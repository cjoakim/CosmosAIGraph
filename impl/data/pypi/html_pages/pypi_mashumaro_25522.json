{
  "libtype": "pypi",
  "libname": "mashumaro",
  "url": "https://pypi.org/project/mashumaro/",
  "html": "<!DOCTYPE html><html lang=\"en\" dir=\"ltr\">  <head>    <meta charset=\"utf-8\">    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">    <meta name=\"defaultLanguage\" content=\"en\">    <meta name=\"availableLanguages\" content=\"en, es, fr, ja, pt_BR, uk, el, de, zh_Hans, zh_Hant, ru, he, eo\">    <title>mashumaro \u00b7 PyPI</title>    <meta name=\"description\" content=\"Fast and well tested serialization library\">    <link rel=\"stylesheet\" href=\"/static/css/warehouse-ltr.99b3104d.css\">    <link rel=\"stylesheet\" href=\"/static/css/fontawesome.b50b476c.css\">    <link rel=\"stylesheet\" href=\"https://fonts.googleapis.com/css?family=Source+Sans+3:400,400italic,600,600italic,700,700italic%7CSource+Code+Pro:500\">    <noscript>      <link rel=\"stylesheet\" href=\"/static/css/noscript.0673c9ea.css\">    </noscript>    <link rel=\"icon\" href=\"/static/images/favicon.35549fe8.ico\" type=\"image/x-icon\">    <link rel=\"alternate\" type=\"application/rss+xml\" title=\"RSS: 40 latest updates\" href=\"/rss/updates.xml\">    <link rel=\"alternate\" type=\"application/rss+xml\" title=\"RSS: 40 newest packages\" href=\"/rss/packages.xml\"><link rel=\"alternate\" type=\"application/rss+xml\" title=\"RSS: latest releases for mashumaro\" href=\"/rss/project/mashumaro/releases.xml\">    <link rel=\"canonical\" href=\"https://pypi.org/project/mashumaro/\">    <meta property=\"og:url\" content=\"https://pypi.org/project/mashumaro/\">    <meta property=\"og:site_name\" content=\"PyPI\">    <meta property=\"og:type\" content=\"website\">    <meta property=\"og:image\" content=\"https://pypi.org/static/images/twitter.abaf4b19.webp\">    <meta property=\"og:title\" content=\"mashumaro\">    <meta property=\"og:description\" content=\"Fast and well tested serialization library\">    <link rel=\"search\" type=\"application/opensearchdescription+xml\" title=\"PyPI\" href=\"/opensearch.xml\">    <script asyncdata-ga-id=\"UA-55961911-1\"data-ga4-id=\"G-RW7D75DF8V\"            src=\"/static/js/warehouse.dd4295c4.js\">    </script><script>MathJax = {  tex: {    inlineMath: [['$', '$'], ['\\\\(', '\\\\)']]  },};</script><script async  src=\"https://cdn.jsdelivr.net/npm/mathjax@3.2.2/es5/tex-svg.js\"  integrity=\"sha256-1CldwzdEg2k1wTmf7s5RWVd7NMXI/7nxxjJM2C4DqII=\"  crossorigin=\"anonymous\"></script><script async src=\"https://www.googletagmanager.com/gtag/js?id=UA-55961911-1\"></script><script async src=\"https://www.googletagmanager.com/gtag/js?id=G-RW7D75DF8V\"></script><script defer src=\"https://www.fastly-insights.com/insights.js?k=6a52360a-f306-421e-8ed5-7417d0d4a4e9&dnt=true\"></script>    <script async        src=\"https://media.ethicalads.io/media/client/v1.4.0/ethicalads.min.js\"        integrity=\"sha256-U3hKDidudIaxBDEzwGJApJgPEf2mWk6cfMWghrAa6i0= sha384-UcmsCqcNRSLW/dV3Lo1oCi2/VaurXbib6p4HyUEOeIa/4OpsrnucrugAefzVZJfI sha512-q4t1L4xEjGV2R4hzqCa41P8jrgFUS8xTb8rdNv4FGvw7FpydVj/kkxBJHOiaoxHa8olCcx1Slk9K+3sNbsM4ug==\"        crossorigin=\"anonymous\"    ></script>  </head>  <body data-controller=\"viewport-toggle\">    <!-- Accessibility: this link should always be the first piece of content inside the body-->    <a href=\"#content\" class=\"skip-to-content\">Skip to main content</a>    <button type=\"button\" class=\"button button--primary button--switch-to-mobile hidden\" data-viewport-toggle-target=\"switchToMobile\" data-action=\"viewport-toggle#switchToMobile\">Switch to mobile version    </button>    <div id=\"sticky-notifications\" class=\"stick-to-top js-stick-to-top\">      <!-- Add browser warning. Will show for ie9 and below -->      <!--[if IE]>      <div class=\"notification-bar notification-bar--warning\" role=\"status\">        <span class=\"notification-bar__icon\">          <i class=\"fa fa-exclamation-triangle\" aria-hidden=\"true\"></i>          <span class=\"sr-only\">Warning</span>        </span>        <span class=\"notification-bar__message\">You are using an unsupported browser, upgrade to a newer version.</span>      </div>      <![endif]-->      <noscript>      <div class=\"notification-bar notification-bar--warning\" role=\"status\">        <span class=\"notification-bar__icon\">          <i class=\"fa fa-exclamation-triangle\" aria-hidden=\"true\"></i>          <span class=\"sr-only\">Warning</span>        </span>        <span class=\"notification-bar__message\">Some features may not work without JavaScript. Please try enabling it if you encounter problems.</span>      </div>      </noscript><div data-html-include=\"/_includes/notification-banners/\"></div>    </div><div data-html-include=\"/_includes/flash-messages/\"></div><div data-html-include=\"/_includes/session-notifications/\"></div>    <header class=\"site-header \">      <div class=\"site-container\">        <div class=\"split-layout\">          <div class=\"split-layout\">            <div>              <a class=\"site-header__logo\" href=\"/\">                <img alt=\"PyPI\" src=\"/static/images/logo-small.2a411bc6.svg\">              </a>            </div>            <form class=\"search-form search-form--primary\" action=\"/search/\" role=\"search\">              <label for=\"search\" class=\"sr-only\">Search PyPI</label>              <input id=\"search\" class=\"search-form__search\" type=\"text\" name=\"q\" placeholder=\"Search projects\" value=\"\" autocomplete=\"off\" autocapitalize=\"off\" spellcheck=\"false\" data-controller=\"search-focus\" data-action=\"keydown@window->search-focus#focusSearchField\" data-search-focus-target=\"searchField\">              <button type=\"submit\" class=\"search-form__button\">                <i class=\"fa fa-search\" aria-hidden=\"true\"></i>                <span class=\"sr-only\">Search</span>              </button>            </form>          </div><div data-html-include=\"/_includes/current-user-indicator/\">            <div id=\"user-indicator\" class=\"horizontal-menu horizontal-menu--light horizontal-menu--tall\">  <nav class=\"horizontal-menu horizontal-menu--light horizontal-menu--tall hide-on-tablet\" aria-label=\"Main navigation\">    <ul>      <li class=\"horizontal-menu__item\"><a href=\"/help/\" class=\"horizontal-menu__link\">Help</a></li>      <li class=\"horizontal-menu__item\"><a href=\"/sponsors/\" class=\"horizontal-menu__link\">Sponsors</a></li>      <li class=\"horizontal-menu__item\"><a href=\"/account/login/\" class=\"horizontal-menu__link\">Log in</a></li>      <li class=\"horizontal-menu__item\"><a href=\"/account/register/\" class=\"horizontal-menu__link\">Register</a></li>    </ul>  </nav>  <nav class=\"dropdown dropdown--on-menu hidden show-on-tablet\" aria-label=\"Main navigation\">    <button type=\"button\" class=\"horizontal-menu__link dropdown__trigger\" aria-haspopup=\"true\" aria-expanded=\"false\" aria-label=\"View menu\">Menu      <span class=\"dropdown__trigger-caret\">        <i class=\"fa fa-caret-down\" aria-hidden=\"true\"></i>      </span>    </button>    <ul class=\"dropdown__content\" aria-hidden=\"true\" aria-label=\"Main menu\">      <li><a class=\"dropdown__link\" href=\"/help/\">Help</a></li>      <li><a class=\"dropdown__link\" href=\"/sponsors/\">Sponsors</a></li>      <li><a class=\"dropdown__link\" href=\"/account/login/\">Log in</a></li>      <li><a class=\"dropdown__link\" href=\"/account/register/\">Register</a></li>    </ul>  </nav></div></div>        </div>      </div>    </header>    <div class=\"mobile-search\">      <form class=\"search-form search-form--fullwidth\" action=\"/search/\" role=\"search\">        <label for=\"mobile-search\" class=\"sr-only\">Search PyPI</label>        <input id=\"mobile-search\" class=\"search-form__search\" type=\"text\" name=\"q\" placeholder=\"Search projects\" value=\"\" autocomplete=\"off\" autocapitalize=\"off\" spellcheck=\"false\">                <button type=\"submit\" class=\"search-form__button\">          <i class=\"fa fa-search\" aria-hidden=\"true\"></i>          <span class=\"sr-only\">Search</span>        </button>      </form>    </div>    <main id=\"content\"><div class=\"hidden\"  data-controller=\"github-repo-stats\"  data-github-repo-stats-github-repo-info-outlet=\".github-repo-info\"  data-github-repo-stats-url-value=\"https://api.github.com/repos/Fatal1ty/mashumaro\"  data-github-repo-stats-issue-url-value=\"https://api.github.com/search/issues?q=repo:Fatal1ty/mashumaro+type:issue+state:open&amp;per_page=1\"></div><div class=\"banner\">  <div class=\"package-header\">    <div class=\"package-header__left\">      <h1 class=\"package-header__name\">        mashumaro 3.12      </h1>      <div data-controller=\"clipboard\">        <p class=\"package-header__pip-instructions\">          <span id=\"pip-command\" data-clipboard-target=\"source\">pip install mashumaro</span>          <button type=\"button\" class=\"copy-tooltip copy-tooltip-s\" data-action=\"clipboard#copy\" data-clipboard-target=\"tooltip\" data-clipboard-tooltip-value=\"Copy to clipboard\">            <i class=\"fa fa-copy\" aria-hidden=\"true\"></i>            <span class=\"sr-only\">Copy PIP instructions</span>          </button>        </p>      </div>    </div>    <div class=\"package-header__right\">      <a class=\"status-badge status-badge--good\" href=\"/project/mashumaro/\">        <span>Latest version</span>      </a>      <p class=\"package-header__date\">Released: <time datetime=\"2024-01-28T11:45:28+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Jan 28, 2024</time>      </p>    </div>  </div></div><div class=\"horizontal-section horizontal-section--grey horizontal-section--thin\">  <div class=\"site-container\"><div data-html-include=\"/_includes/administer-project-include/mashumaro\"></div>    <div class=\"split-layout split-layout--middle package-description\">      <p class=\"package-description__summary\">Fast and well tested serialization library</p><div data-html-include=\"/_includes/edit-project-button/mashumaro\"></div>    </div>  </div></div><div data-controller=\"project-tabs\">  <div class=\"tabs-container\">    <div class=\"vertical-tabs\">      <div class=\"vertical-tabs__tabs\">        <div class=\"sidebar-section\">          <h3 class=\"sidebar-section__title\">Navigation</h3>          <nav aria-label=\"Navigation for mashumaro\">            <ul class=\"vertical-tabs__list\" role=\"tablist\">              <li role=\"tab\">                <a id=\"description-tab\" href=\"#description\" data-project-tabs-target=\"tab\" data-action=\"project-tabs#onTabClick\" class=\"vertical-tabs__tab vertical-tabs__tab--with-icon vertical-tabs__tab--is-active\" aria-selected=\"true\" aria-label=\"Project description. Focus will be moved to the description.\">                  <i class=\"fa fa-align-left\" aria-hidden=\"true\"></i>Project description                </a>              </li>              <li role=\"tab\">                <a id=\"history-tab\" href=\"#history\" data-project-tabs-target=\"tab\" data-action=\"project-tabs#onTabClick\" class=\"vertical-tabs__tab vertical-tabs__tab--with-icon\" aria-label=\"Release history. Focus will be moved to the history panel.\">                  <i class=\"fa fa-history\" aria-hidden=\"true\"></i>Release history                </a>              </li>              <li role=\"tab\">                <a id=\"files-tab\" href=\"#files\" data-project-tabs-target=\"tab\" data-action=\"project-tabs#onTabClick\" class=\"vertical-tabs__tab vertical-tabs__tab--with-icon\" aria-label=\"Download files. Focus will be moved to the project files.\">                  <i class=\"fa fa-download\" aria-hidden=\"true\"></i>Download files                </a>              </li>            </ul>          </nav>        </div><div class=\"sidebar-section\">  <h3 class=\"sidebar-section__title\">Project links</h3>  <ul class=\"vertical-tabs__list\">    <li>      <a class=\"vertical-tabs__tab vertical-tabs__tab--with-icon vertical-tabs__tab--condensed\" href=\"https://github.com/Fatal1ty/mashumaro\" rel=\"nofollow\">        <i class=\"fas fa-home\" aria-hidden=\"true\"></i>Homepage      </a>    </li>  </ul></div><div class=\"sidebar-section\">  <h3 class=\"sidebar-section__title\">Statistics</h3>  <div class=\"hidden github-repo-info\" data-controller=\"github-repo-info\">GitHub statistics:    <ul class=\"vertical-tabs__list\">      <li>        <a class=\"vertical-tabs__tab vertical-tabs__tab--with-icon vertical-tabs__tab--condensed\"           data-github-repo-info-target=\"stargazersUrl\" rel=\"noopener\">          <i class=\"fa fa-star\" aria-hidden=\"true\"></i>          <strong>Stars:</strong>          <span data-github-repo-info-target=\"stargazersCount\"></span>        </a>      </li>      <li>        <a class=\"vertical-tabs__tab vertical-tabs__tab--with-icon vertical-tabs__tab--condensed\"           data-github-repo-info-target=\"forksUrl\" rel=\"noopener\">          <i class=\"fa fa-code-branch\" aria-hidden=\"true\"></i>          <strong>Forks:</strong>          <span data-github-repo-info-target=\"forksCount\"></span>        </a>      </li>      <li>        <a class=\"vertical-tabs__tab vertical-tabs__tab--with-icon vertical-tabs__tab--condensed\"           data-github-repo-info-target=\"openIssuesUrl\" rel=\"noopener\">          <i class=\"fa fa-exclamation-circle\" aria-hidden=\"true\"></i>          <strong>Open issues:</strong>          <span data-github-repo-info-target=\"openIssuesCount\"></span>        </a>      </li>      <li>        <a class=\"vertical-tabs__tab vertical-tabs__tab--with-icon vertical-tabs__tab--condensed\"           data-github-repo-info-target=\"openPRsUrl\" rel=\"noopener\">          <i class=\"fa fa-code-pull-request\" aria-hidden=\"true\"></i>          <strong>Open PRs:</strong>          <span data-github-repo-info-target=\"openPRsCount\"></span>        </a>      </li>    </ul>  </div>  <p>View statistics for this project via <a href=\"https://libraries.io/pypi/mashumaro\" title=\"External link\" target=\"_blank\" rel=\"noopener\">Libraries.io</a>, or by using <a href=\"https://packaging.python.org/guides/analyzing-pypi-package-downloads/\" target=\"_blank\" rel=\"noopener\">our public dataset on Google BigQuery</a>  </p></div><div class=\"sidebar-section\">  <h3 class=\"sidebar-section__title\">Meta</h3>  <p><strong>License:</strong> Apache Software License (Apache License, Version 2.0)</p>    <p><strong>Author:</strong> <a href=\"mailto:random.gauss@gmail.com\">Alexander Tikhonov</a></p>  <p>    <strong>Requires:</strong> Python &gt;=3.8  </p></div><div class=\"sidebar-section\">    <h3 class=\"sidebar-section__title\">Maintainers</h3>      <span class=\"sidebar-section__maintainer\">        <a href=\"/user/Fatal1ty/\" aria-label=\"Fatal1ty\">          <span class=\"sidebar-section__user-gravatar\">            <img src=\"https://pypi-camo.freetls.fastly.net/71e2a4d4ee57191d2c305b787f2f3568b93bf5c7/68747470733a2f2f7365637572652e67726176617461722e636f6d2f6176617461722f30326462633462323336363066623637613332646561616365336264353330323f73697a653d3530\" height=\"50\" width=\"50\" alt=\"Avatar for Fatal1ty from gravatar.com\" title=\"Avatar for Fatal1ty from gravatar.com\">          </span>          <span class=\"sidebar-section__user-gravatar-text\">            Fatal1ty          </span>        </a>      </span></div><div class=\"sidebar-section\">  <h3 class=\"sidebar-section__title\">Classifiers</h3>  <ul class=\"sidebar-section__classifiers\">    <li>      <strong>Development Status</strong>      <ul>        <li>          <a href=\"/search/?c=Development+Status+%3A%3A+5+-+Production%2FStable\">            5 - Production/Stable          </a>        </li>      </ul>    </li>    <li>      <strong>Intended Audience</strong>      <ul>        <li>          <a href=\"/search/?c=Intended+Audience+%3A%3A+Developers\">            Developers          </a>        </li>      </ul>    </li>    <li>      <strong>License</strong>      <ul>        <li>          <a href=\"/search/?c=License+%3A%3A+OSI+Approved+%3A%3A+Apache+Software+License\">            OSI Approved :: Apache Software License          </a>        </li>      </ul>    </li>    <li>      <strong>Programming Language</strong>      <ul>        <li>          <a href=\"/search/?c=Programming+Language+%3A%3A+Python+%3A%3A+3+%3A%3A+Only\">            Python :: 3 :: Only          </a>        </li>        <li>          <a href=\"/search/?c=Programming+Language+%3A%3A+Python+%3A%3A+3.8\">            Python :: 3.8          </a>        </li>        <li>          <a href=\"/search/?c=Programming+Language+%3A%3A+Python+%3A%3A+3.9\">            Python :: 3.9          </a>        </li>        <li>          <a href=\"/search/?c=Programming+Language+%3A%3A+Python+%3A%3A+3.10\">            Python :: 3.10          </a>        </li>        <li>          <a href=\"/search/?c=Programming+Language+%3A%3A+Python+%3A%3A+3.11\">            Python :: 3.11          </a>        </li>        <li>          <a href=\"/search/?c=Programming+Language+%3A%3A+Python+%3A%3A+3.12\">            Python :: 3.12          </a>        </li>      </ul>    </li>  </ul></div><div class=\"sidebar-section\" data-ea-publisher=\"psf\" data-ea-type=\"psf\" data-ea-keywords=\"pypi-sidebar\"></div>      </div>      <div class=\"vertical-tabs__panel\">        <!-- mobile menu -->        <nav aria-label=\"Navigation for mashumaro\">          <ul class=\"vertical-tabs__list\" role=\"tablist\">            <li role=\"tab\">              <a id=\"mobile-description-tab\" href=\"#description\" data-project-tabs-target=\"mobileTab\" data-action=\"project-tabs#onTabClick\" class=\"vertical-tabs__tab vertical-tabs__tab--with-icon vertical-tabs__tab--mobile vertical-tabs__tab--no-top-border vertical-tabs__tab--is-active\" aria-selected=\"true\" aria-label=\"Project description. Focus will be moved to the description.\">                <i class=\"fa fa-align-left\" aria-hidden=\"true\"></i>Project description              </a>            </li>            <li role=\"tab\">              <a id=\"mobile-data-tab\" href=\"#data\" data-project-tabs-target=\"mobileTab\" data-action=\"project-tabs#onTabClick\" class=\"vertical-tabs__tab vertical-tabs__tab--with-icon vertical-tabs__tab--mobile\" aria-label=\"Project details. Focus will be moved to the project details.\">                <i class=\"fa fa-info-circle\" aria-hidden=\"true\"></i>Project details              </a>            </li>            <li role=\"tab\">              <a id=\"mobile-history-tab\" href=\"#history\" data-project-tabs-target=\"mobileTab\" data-action=\"project-tabs#onTabClick\" class=\"vertical-tabs__tab vertical-tabs__tab--with-icon vertical-tabs__tab--mobile\" aria-label=\"Release history. Focus will be moved to the history panel.\">              <i class=\"fa fa-history\" aria-hidden=\"true\"></i>Release history            </a>            </li>            <li role=\"tab\">              <a id=\"mobile-files-tab\" href=\"#files\" data-project-tabs-target=\"mobileTab\" data-action=\"project-tabs#onTabClick\" class=\"vertical-tabs__tab vertical-tabs__tab--with-icon vertical-tabs__tab--mobile\" aria-label=\"Download files. Focus will be moved to the project files.\">                <i class=\"fa fa-download\" aria-hidden=\"true\"></i>Download files              </a>            </li>          </ul>        </nav>        <div id=\"description\" data-project-tabs-target=\"content\" class=\"vertical-tabs__content\" role=\"tabpanel\" aria-labelledby=\"description-tab mobile-description-tab\" tabindex=\"-1\">          <h2 class=\"page-title\">Project description</h2>          <div class=\"project-description\">            <div align=center><img alt=logo width=175 src=\"https://pypi-camo.freetls.fastly.net/2c31ca2b5158aa7b162cf858e8eeafea49aa0cf9/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f466174616c3174792f6d617368756d61726f2f616332663932343539316434383864626439613737366136623161653764656465326438633733652f696d672f6c6f676f2e737667\"><h6>Fast and well tested serialization library</h6><p><a href=\"https://github.com/Fatal1ty/mashumaro/actions\" rel=nofollow><img src=\"https://pypi-camo.freetls.fastly.net/b45ead28dfb3cd509e8a81e5b9f9d704f841026a/68747470733a2f2f6769746875622e636f6d2f466174616c3174792f6d617368756d61726f2f776f726b666c6f77732f74657374732f62616467652e737667\" alt=\"Build Status\"></a><a href=\"https://coveralls.io/github/Fatal1ty/mashumaro?branch=master\" rel=nofollow><img src=\"https://pypi-camo.freetls.fastly.net/bf375ae8ad3a30e425c7d9144276cd494a05ad5e/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f466174616c3174792f6d617368756d61726f2f62616467652e7376673f6272616e63683d6d6173746572\" alt=\"Coverage Status\"></a><a href=\"https://pypi.python.org/pypi/mashumaro\" rel=nofollow><img src=\"https://pypi-camo.freetls.fastly.net/0d55a9d334363e2dc2df0b72647d8b6cafad13bf/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f6d617368756d61726f2e737667\" alt=\"Latest Version\"></a><a href=\"https://pypi.python.org/pypi/mashumaro\" rel=nofollow><img src=\"https://pypi-camo.freetls.fastly.net/09aeadb279ac7fd16c969b056419d5e786828304/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f6d617368756d61726f2e737667\" alt=\"Python Version\"></a><a href=\"https://opensource.org/licenses/Apache-2.0\" rel=nofollow><img src=\"https://pypi-camo.freetls.fastly.net/b97ca76cf5d8fd16c7bc4731270e0bbe53df7aa1/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4c6963656e73652d417061636865253230322e302d626c75652e737667\" alt=License></a></p></div><p>In Python, you often need to dump and load objects based on the schema youhave. It can be a dataclass model, a list of third-party generic classes orwhatever. Mashumaro not only lets you save and load things in different ways,but it also does it <em>super quick</em>.</p><p><strong>Key features</strong></p><ul><li>\ud83d\ude80 One of the fastest libraries</li><li>\u261d\ufe0f Mature and time-tested</li><li>\ud83d\udc76 Easy to use out of the box</li><li>\u2699\ufe0f Highly customizable</li><li>\ud83c\udf89 Built-in support for JSON, YAML, TOML, MessagePack</li><li>\ud83d\udce6 Built-in support for almost all Python types including typing-extensions</li><li>\ud83d\udcdd JSON Schema generation</li></ul><h2>Table of contents</h2><ul><li><a href=#introduction rel=nofollow>Introduction</a></li><li><a href=#installation rel=nofollow>Installation</a></li><li><a href=#changelog rel=nofollow>Changelog</a></li><li><a href=#supported-data-types rel=nofollow>Supported data types</a></li><li><a href=#usage-example rel=nofollow>Usage example</a></li><li><a href=#how-does-it-work rel=nofollow>How does it work?</a></li><li><a href=#benchmark rel=nofollow>Benchmark</a></li><li><a href=#supported-serialization-formats rel=nofollow>Supported serialization formats</a><ul><li><a href=#basic-form rel=nofollow>Basic form</a></li><li><a href=#json rel=nofollow>JSON</a></li><li><a href=#yaml rel=nofollow>YAML</a></li><li><a href=#toml rel=nofollow>TOML</a></li><li><a href=#messagepack rel=nofollow>MessagePack</a></li></ul></li><li><a href=#customization rel=nofollow>Customization</a><ul><li><a href=#serializabletype-interface rel=nofollow><code>SerializableType</code> interface</a><ul><li><a href=#user-defined-types rel=nofollow>User-defined types</a></li><li><a href=#user-defined-generic-types rel=nofollow>User-defined generic types</a></li></ul></li><li><a href=#serializationstrategy rel=nofollow><code>SerializationStrategy</code></a><ul><li><a href=#third-party-types rel=nofollow>Third-party types</a></li><li><a href=#third-party-generic-types rel=nofollow>Third-party generic types</a></li></ul></li><li><a href=#field-options rel=nofollow>Field options</a><ul><li><a href=#serialize-option rel=nofollow><code>serialize</code> option</a></li><li><a href=#deserialize-option rel=nofollow><code>deserialize</code> option</a></li><li><a href=#serialization_strategy-option rel=nofollow><code>serialization_strategy</code> option</a></li><li><a href=#alias-option rel=nofollow><code>alias</code> option</a></li></ul></li><li><a href=#config-options rel=nofollow>Config options</a><ul><li><a href=#debug-config-option rel=nofollow><code>debug</code> config option</a></li><li><a href=#code_generation_options-config-option rel=nofollow><code>code_generation_options</code> config option</a></li><li><a href=#serialization_strategy-config-option rel=nofollow><code>serialization_strategy</code> config option</a></li><li><a href=#aliases-config-option rel=nofollow><code>aliases</code> config option</a></li><li><a href=#serialize_by_alias-config-option rel=nofollow><code>serialize_by_alias</code> config option</a></li><li><a href=#allow_deserialization_not_by_alias-config-option rel=nofollow><code>allow_deserialization_not_by_alias</code> config option</a></li><li><a href=#omit_none-config-option rel=nofollow><code>omit_none</code> config option</a></li><li><a href=#omit_default-config-option rel=nofollow><code>omit_default</code> config option</a></li><li><a href=#namedtuple_as_dict-config-option rel=nofollow><code>namedtuple_as_dict</code> config option</a></li><li><a href=#allow_postponed_evaluation-config-option rel=nofollow><code>allow_postponed_evaluation</code> config option</a></li><li><a href=#dialect-config-option rel=nofollow><code>dialect</code> config option</a></li><li><a href=#orjson_options-config-option rel=nofollow><code>orjson_options</code> config option</a></li><li><a href=#discriminator-config-option rel=nofollow><code>discriminator</code> config option</a></li><li><a href=#lazy_compilation-config-option rel=nofollow><code>lazy_compilation</code> config option</a></li><li><a href=#sort_keys-config-option rel=nofollow><code>sort_keys</code> config option</a></li></ul></li><li><a href=#passing-field-values-as-is rel=nofollow>Passing field values as is</a></li><li><a href=#extending-existing-types rel=nofollow>Extending existing types</a></li><li><a href=#dialects rel=nofollow>Dialects</a><ul><li><a href=#serialization_strategy-dialect-option rel=nofollow><code>serialization_strategy</code> dialect option</a></li><li><a href=#serialize_by_alias-dialect-option rel=nofollow><code>serialize_by_alias</code> dialect option</a></li><li><a href=#omit_none-dialect-option rel=nofollow><code>omit_none</code> dialect option</a></li><li><a href=#omit_default-dialect-option rel=nofollow><code>omit_default</code> dialect option</a></li><li><a href=#namedtuple_as_dict-dialect-option rel=nofollow><code>named_tuple_as_dict</code> dialect option</a></li><li><a href=#no_copy_collections-dialect-option rel=nofollow><code>no_copy_collections</code> dialect option</a></li><li><a href=#changing-the-default-dialect rel=nofollow>Changing the default dialect</a></li></ul></li><li><a href=#discriminator rel=nofollow>Discriminator</a><ul><li><a href=#subclasses-distinguishable-by-a-field rel=nofollow>Subclasses distinguishable by a field</a></li><li><a href=#subclasses-without-a-common-field rel=nofollow>Subclasses without a common field</a></li><li><a href=#class-level-discriminator rel=nofollow>Class level discriminator</a></li><li><a href=#working-with-union-of-classes rel=nofollow>Working with union of classes</a></li><li><a href=#using-a-custom-variant-tagger-function rel=nofollow>Using a custom variant tagger function</a></li></ul></li><li><a href=#code-generation-options rel=nofollow>Code generation options</a><ul><li><a href=#add-omit_none-keyword-argument rel=nofollow>Add <code>omit_none</code> keyword argument</a></li><li><a href=#add-by_alias-keyword-argument rel=nofollow>Add <code>by_alias</code> keyword argument</a></li><li><a href=#add-dialect-keyword-argument rel=nofollow>Add <code>dialect</code> keyword argument</a></li><li><a href=#add-context-keyword-argument rel=nofollow>Add <code>context</code> keyword argument</a></li></ul></li><li><a href=#generic-dataclasses rel=nofollow>Generic dataclasses</a><ul><li><a href=#generic-dataclass-inheritance rel=nofollow>Generic dataclass inheritance</a></li><li><a href=#generic-dataclass-in-a-field-type rel=nofollow>Generic dataclass in a field type</a></li></ul></li><li><a href=#genericserializabletype-interface rel=nofollow><code>GenericSerializableType</code> interface</a></li><li><a href=#serialization-hooks rel=nofollow>Serialization hooks</a><ul><li><a href=#before-deserialization rel=nofollow>Before deserialization</a></li><li><a href=#after-deserialization rel=nofollow>After deserialization</a></li><li><a href=#before-serialization rel=nofollow>Before serialization</a></li><li><a href=#after-serialization rel=nofollow>After serialization</a></li></ul></li></ul></li><li><a href=#json-schema rel=nofollow>JSON Schema</a><ul><li><a href=#building-json-schema rel=nofollow>Building JSON Schema</a></li><li><a href=#json-schema-constraints rel=nofollow>JSON Schema constraints</a></li><li><a href=#extending-json-schema rel=nofollow>Extending JSON Schema</a></li><li><a href=#json-schema-and-custom-serialization-methods rel=nofollow>JSON Schema and custom serialization methods</a></li></ul></li></ul><h2>Introduction</h2><p>This library provides two fundamentally different approaches to convertingyour data to and from various formats. Each of them is useful in differentsituations:</p><ul><li>Codecs</li><li>Mixins</li></ul><p>Codecs are represented by a set of decoder / encoder classes anddecode / encode functions for each supported format. You can use themto convert data of any python built-in and third-party type to JSON, YAML,TOML, MessagePack or a basic form accepted by other serialization formats.For example, you can convert a list of datetime objects to JSON arraycontaining string-represented datetimes and vice versa.</p><p>Mixins are primarily for dataclass models. They are represented by mixinclasses that add methods for converting to and from JSON, YAML, TOML,MessagePack or a basic form accepted by other serialization formats.If you have a root dataclass model, then it will be the easiest way to make itserializable. All you have to do is inherit a particular mixin class.</p><p>In addition to serialization functionality, this library also provides JSONSchema builder that can be used in places where interoperability matters.</p><h2>Installation</h2><p>Use pip to install:</p><pre lang=shell>$<span class=w> </span>pip<span class=w> </span>install<span class=w> </span>mashumaro</pre><p>The current version of <code>mashumaro</code> supports Python versions 3.8 \u2014 3.12.</p><p>It's not recommended to use any version of Python that has reached its<a href=\"https://devguide.python.org/versions/\" rel=nofollow>end of life</a> and is no longer receivingsecurity updates or bug fixes from the Python development team.For convenience, there is a table below that outlines thelast version of <code>mashumaro</code> that can be installed on unmaintained versionsof Python.</p><table><thead><tr><th>Python Version</th><th>Last Version of mashumaro</th><th>Python EOL</th></tr></thead><tbody><tr><td>3.7</td><td><a href=\"https://github.com/Fatal1ty/mashumaro/releases/tag/v3.9.1\" rel=nofollow>3.9.1</a></td><td>2023-06-27</td></tr><tr><td>3.6</td><td><a href=\"https://github.com/Fatal1ty/mashumaro/releases/tag/v3.1.1\" rel=nofollow>3.1.1</a></td><td>2021-12-23</td></tr></tbody></table><h2>Changelog</h2><p>This project follows the principles of <a href=\"https://semver.org\" rel=nofollow>Semantic Versioning</a>.Changelog is available on <a href=\"https://github.com/Fatal1ty/mashumaro/releases\" rel=nofollow>GitHub Releases page</a>.</p><h2>Supported data types</h2><p>There is support for generic types from the standard <a href=\"https://docs.python.org/3/library/typing.html\" rel=nofollow><code>typing</code></a> module:</p><ul><li><a href=\"https://docs.python.org/3/library/typing.html#typing.List\" rel=nofollow><code>List</code></a></li><li><a href=\"https://docs.python.org/3/library/typing.html#typing.Tuple\" rel=nofollow><code>Tuple</code></a></li><li><a href=\"https://docs.python.org/3/library/typing.html#typing.NamedTuple\" rel=nofollow><code>NamedTuple</code></a></li><li><a href=\"https://docs.python.org/3/library/typing.html#typing.Set\" rel=nofollow><code>Set</code></a></li><li><a href=\"https://docs.python.org/3/library/typing.html#typing.FrozenSet\" rel=nofollow><code>FrozenSet</code></a></li><li><a href=\"https://docs.python.org/3/library/typing.html#typing.Deque\" rel=nofollow><code>Deque</code></a></li><li><a href=\"https://docs.python.org/3/library/typing.html#typing.Dict\" rel=nofollow><code>Dict</code></a></li><li><a href=\"https://docs.python.org/3/library/typing.html#typing.OrderedDict\" rel=nofollow><code>OrderedDict</code></a></li><li><a href=\"https://docs.python.org/3/library/typing.html#typing.DefaultDict\" rel=nofollow><code>DefaultDict</code></a></li><li><a href=\"https://docs.python.org/3/library/typing.html#typing.TypedDict\" rel=nofollow><code>TypedDict</code></a></li><li><a href=\"https://docs.python.org/3/library/typing.html#typing.Mapping\" rel=nofollow><code>Mapping</code></a></li><li><a href=\"https://docs.python.org/3/library/typing.html#typing.MutableMapping\" rel=nofollow><code>MutableMapping</code></a></li><li><a href=\"https://docs.python.org/3/library/typing.html#typing.Counter\" rel=nofollow><code>Counter</code></a></li><li><a href=\"https://docs.python.org/3/library/typing.html#typing.ChainMap\" rel=nofollow><code>ChainMap</code></a></li><li><a href=\"https://docs.python.org/3/library/typing.html#typing.Sequence\" rel=nofollow><code>Sequence</code></a></li></ul><p>for standard generic types on <a href=\"https://www.python.org/dev/peps/pep-0585/\" rel=nofollow>PEP 585</a> compatible Python (3.9+):</p><ul><li><a href=\"https://docs.python.org/3/library/stdtypes.html#list\" rel=nofollow><code>list</code></a></li><li><a href=\"https://docs.python.org/3/library/stdtypes.html#tuple\" rel=nofollow><code>tuple</code></a></li><li><a href=\"https://docs.python.org/3/library/collections.html#collections.namedtuple\" rel=nofollow><code>namedtuple</code></a></li><li><a href=\"https://docs.python.org/3/library/stdtypes.html#set\" rel=nofollow><code>set</code></a></li><li><a href=\"https://docs.python.org/3/library/stdtypes.html#frozenset\" rel=nofollow><code>frozenset</code></a></li><li><a href=\"https://docs.python.org/3/library/collections.abc.html#collections.abc.Set\" rel=nofollow><code>collections.abc.Set</code></a></li><li><a href=\"https://docs.python.org/3/library/collections.abc.html#collections.abc.MutableSet\" rel=nofollow><code>collections.abc.MutableSet</code></a></li><li><a href=\"https://docs.python.org/3/library/collections.html#collections.deque\" rel=nofollow><code>collections.deque</code></a></li><li><a href=\"https://docs.python.org/3/library/stdtypes.html#dict\" rel=nofollow><code>dict</code></a></li><li><a href=\"https://docs.python.org/3/library/collections.html#collections.OrderedDict\" rel=nofollow><code>collections.OrderedDict</code></a></li><li><a href=\"https://docs.python.org/3/library/collections.html#collections.defaultdict\" rel=nofollow><code>collections.defaultdict</code></a></li><li><a href=\"https://docs.python.org/3/library/collections.abc.html#collections.abc.Mapping\" rel=nofollow><code>collections.abc.Mapping</code></a></li><li><a href=\"https://docs.python.org/3/library/collections.abc.html#collections.abc.MutableMapping\" rel=nofollow><code>collections.abc.MutableMapping</code></a></li><li><a href=\"https://docs.python.org/3/library/collections.html#collections.Counter\" rel=nofollow><code>collections.Counter</code></a></li><li><a href=\"https://docs.python.org/3/library/collections.html#collections.ChainMap\" rel=nofollow><code>collections.ChainMap</code></a></li><li><a href=\"https://docs.python.org/3/library/collections.abc.html#collections.abc.Sequence\" rel=nofollow><code>collections.abc.Sequence</code></a></li><li><a href=\"https://docs.python.org/3/library/collections.abc.html#collections.abc.MutableSequence\" rel=nofollow><code>collections.abc.MutableSequence</code></a></li></ul><p>for special primitives from the <a href=\"https://docs.python.org/3/library/typing.html\" rel=nofollow><code>typing</code></a> module:</p><ul><li><a href=\"https://docs.python.org/3/library/typing.html#typing.Any\" rel=nofollow><code>Any</code></a></li><li><a href=\"https://docs.python.org/3/library/typing.html#typing.Optional\" rel=nofollow><code>Optional</code></a></li><li><a href=\"https://docs.python.org/3/library/typing.html#typing.Union\" rel=nofollow><code>Union</code></a></li><li><a href=\"https://docs.python.org/3/library/typing.html#typing.TypeVar\" rel=nofollow><code>TypeVar</code></a></li><li><a href=\"https://docs.python.org/3/library/typing.html#typing.TypeVarTuple\" rel=nofollow><code>TypeVarTuple</code></a></li><li><a href=\"https://docs.python.org/3/library/typing.html#newtype\" rel=nofollow><code>NewType</code></a></li><li><a href=\"https://docs.python.org/3/library/typing.html#typing.Annotated\" rel=nofollow><code>Annotated</code></a></li><li><a href=\"https://docs.python.org/3/library/typing.html#typing.Literal\" rel=nofollow><code>Literal</code></a></li><li><a href=\"https://docs.python.org/3/library/typing.html#typing.LiteralString\" rel=nofollow><code>LiteralString</code></a></li><li><a href=\"https://docs.python.org/3/library/typing.html#typing.Final\" rel=nofollow><code>Final</code></a></li><li><a href=\"https://docs.python.org/3/library/typing.html#typing.Self\" rel=nofollow><code>Self</code></a></li><li><a href=\"https://docs.python.org/3/library/typing.html#typing.Unpack\" rel=nofollow><code>Unpack</code></a></li></ul><p>for standard interpreter types from <a href=\"https://docs.python.org/3/library/types.html#standard-interpreter-types\" rel=nofollow><code>types</code></a> module:</p><ul><li><a href=\"https://docs.python.org/3/library/types.html#types.NoneType\" rel=nofollow><code>NoneType</code></a></li><li><a href=\"https://docs.python.org/3/library/types.html#types.UnionType\" rel=nofollow><code>UnionType</code></a></li></ul><p>for enumerations based on classes from the standard <a href=\"https://docs.python.org/3/library/enum.html\" rel=nofollow><code>enum</code></a> module:</p><ul><li><a href=\"https://docs.python.org/3/library/enum.html#enum.Enum\" rel=nofollow><code>Enum</code></a></li><li><a href=\"https://docs.python.org/3/library/enum.html#enum.IntEnum\" rel=nofollow><code>IntEnum</code></a></li><li><a href=\"https://docs.python.org/3/library/enum.html#enum.StrEnum\" rel=nofollow><code>StrEnum</code></a></li><li><a href=\"https://docs.python.org/3/library/enum.html#enum.Flag\" rel=nofollow><code>Flag</code></a></li><li><a href=\"https://docs.python.org/3/library/enum.html#enum.IntFlag\" rel=nofollow><code>IntFlag</code></a></li></ul><p>for common built-in types:</p><ul><li><a href=\"https://docs.python.org/3/library/functions.html#int\" rel=nofollow><code>int</code></a></li><li><a href=\"https://docs.python.org/3/library/functions.html#float\" rel=nofollow><code>float</code></a></li><li><a href=\"https://docs.python.org/3/library/stdtypes.html#bltin-boolean-values\" rel=nofollow><code>bool</code></a></li><li><a href=\"https://docs.python.org/3/library/stdtypes.html#str\" rel=nofollow><code>str</code></a></li><li><a href=\"https://docs.python.org/3/library/stdtypes.html#bytes\" rel=nofollow><code>bytes</code></a></li><li><a href=\"https://docs.python.org/3/library/stdtypes.html#bytearray\" rel=nofollow><code>bytearray</code></a></li></ul><p>for built-in datetime oriented types (see <a href=#deserialize-option rel=nofollow>more</a> details):</p><ul><li><a href=\"https://docs.python.org/3/library/datetime.html#datetime.datetime\" rel=nofollow><code>datetime</code></a></li><li><a href=\"https://docs.python.org/3/library/datetime.html#datetime.date\" rel=nofollow><code>date</code></a></li><li><a href=\"https://docs.python.org/3/library/datetime.html#datetime.time\" rel=nofollow><code>time</code></a></li><li><a href=\"https://docs.python.org/3/library/datetime.html#datetime.timedelta\" rel=nofollow><code>timedelta</code></a></li><li><a href=\"https://docs.python.org/3/library/datetime.html#datetime.timezone\" rel=nofollow><code>timezone</code></a></li><li><a href=\"https://docs.python.org/3/library/zoneinfo.html#zoneinfo.ZoneInfo\" rel=nofollow><code>ZoneInfo</code></a></li></ul><p>for pathlike types:</p><ul><li><a href=\"https://docs.python.org/3/library/pathlib.html#pathlib.PurePath\" rel=nofollow><code>PurePath</code></a></li><li><a href=\"https://docs.python.org/3/library/pathlib.html#pathlib.Path\" rel=nofollow><code>Path</code></a></li><li><a href=\"https://docs.python.org/3/library/pathlib.html#pathlib.PurePosixPath\" rel=nofollow><code>PurePosixPath</code></a></li><li><a href=\"https://docs.python.org/3/library/pathlib.html#pathlib.PosixPath\" rel=nofollow><code>PosixPath</code></a></li><li><a href=\"https://docs.python.org/3/library/pathlib.html#pathlib.PureWindowsPath\" rel=nofollow><code>PureWindowsPath</code></a></li><li><a href=\"https://docs.python.org/3/library/pathlib.html#pathlib.WindowsPath\" rel=nofollow><code>WindowsPath</code></a></li><li><a href=\"https://docs.python.org/3/library/os.html#os.PathLike\" rel=nofollow><code>os.PathLike</code></a></li></ul><p>for other less popular built-in types:</p><ul><li><a href=\"https://docs.python.org/3/library/uuid.html#uuid.UUID\" rel=nofollow><code>uuid.UUID</code></a></li><li><a href=\"https://docs.python.org/3/library/decimal.html#decimal.Decimal\" rel=nofollow><code>decimal.Decimal</code></a></li><li><a href=\"https://docs.python.org/3/library/fractions.html#fractions.Fraction\" rel=nofollow><code>fractions.Fraction</code></a></li><li><a href=\"https://docs.python.org/3/library/ipaddress.html#ipaddress.IPv4Address\" rel=nofollow><code>ipaddress.IPv4Address</code></a></li><li><a href=\"https://docs.python.org/3/library/ipaddress.html#ipaddress.IPv6Address\" rel=nofollow><code>ipaddress.IPv6Address</code></a></li><li><a href=\"https://docs.python.org/3/library/ipaddress.html#ipaddress.IPv4Network\" rel=nofollow><code>ipaddress.IPv4Network</code></a></li><li><a href=\"https://docs.python.org/3/library/ipaddress.html#ipaddress.IPv6Network\" rel=nofollow><code>ipaddress.IPv6Network</code></a></li><li><a href=\"https://docs.python.org/3/library/ipaddress.html#ipaddress.IPv4Interface\" rel=nofollow><code>ipaddress.IPv4Interface</code></a></li><li><a href=\"https://docs.python.org/3/library/ipaddress.html#ipaddress.IPv6Interface\" rel=nofollow><code>ipaddress.IPv6Interface</code></a></li></ul><p>for backported types from <a href=\"https://github.com/python/typing_extensions\" rel=nofollow><code>typing-extensions</code></a>:</p><ul><li><a href=\"https://docs.python.org/3/library/typing.html#typing.OrderedDict\" rel=nofollow><code>OrderedDict</code></a></li><li><a href=\"https://docs.python.org/3/library/typing.html#typing.TypedDict\" rel=nofollow><code>TypedDict</code></a></li><li><a href=\"https://docs.python.org/3/library/typing.html#typing.Annotated\" rel=nofollow><code>Annotated</code></a></li><li><a href=\"https://docs.python.org/3/library/typing.html#typing.Literal\" rel=nofollow><code>Literal</code></a></li><li><a href=\"https://docs.python.org/3/library/typing.html#typing.LiteralString\" rel=nofollow><code>LiteralString</code></a></li><li><a href=\"https://docs.python.org/3/library/typing.html#typing.Self\" rel=nofollow><code>Self</code></a></li><li><a href=\"https://docs.python.org/3/library/typing.html#typing.TypeVarTuple\" rel=nofollow><code>TypeVarTuple</code></a></li><li><a href=\"https://docs.python.org/3/library/typing.html#typing.Unpack\" rel=nofollow><code>Unpack</code></a></li></ul><p>for arbitrary types:</p><ul><li><a href=#user-defined-types rel=nofollow>user-defined types</a></li><li><a href=#third-party-types rel=nofollow>third-party types</a></li><li><a href=#user-defined-generic-types rel=nofollow>user-defined generic types</a></li><li><a href=#third-party-generic-types rel=nofollow>third-party generic types</a></li></ul><h2>Usage example</h2><p>Suppose we're developing a financial application and we operate with currenciesand stocks:</p><pre lang=python3><span class=kn>from</span> <span class=nn>dataclasses</span> <span class=kn>import</span> <span class=n>dataclass</span><span class=kn>from</span> <span class=nn>enum</span> <span class=kn>import</span> <span class=n>Enum</span><span class=k>class</span> <span class=nc>Currency</span><span class=p>(</span><span class=n>Enum</span><span class=p>):</span>    <span class=n>USD</span> <span class=o>=</span> <span class=s2>\"USD\"</span>    <span class=n>EUR</span> <span class=o>=</span> <span class=s2>\"EUR\"</span><span class=nd>@dataclass</span><span class=k>class</span> <span class=nc>CurrencyPosition</span><span class=p>:</span>    <span class=n>currency</span><span class=p>:</span> <span class=n>Currency</span>    <span class=n>balance</span><span class=p>:</span> <span class=nb>float</span><span class=nd>@dataclass</span><span class=k>class</span> <span class=nc>StockPosition</span><span class=p>:</span>    <span class=n>ticker</span><span class=p>:</span> <span class=nb>str</span>    <span class=n>name</span><span class=p>:</span> <span class=nb>str</span>    <span class=n>balance</span><span class=p>:</span> <span class=nb>int</span></pre><p>Now we want a dataclass for portfolio that will be serialized to and from JSON.We inherit <code>DataClassJSONMixin</code> that adds this functionality:</p><pre lang=python3><span class=kn>from</span> <span class=nn>mashumaro.mixins.json</span> <span class=kn>import</span> <span class=n>DataClassJSONMixin</span><span class=o>...</span><span class=nd>@dataclass</span><span class=k>class</span> <span class=nc>Portfolio</span><span class=p>(</span><span class=n>DataClassJSONMixin</span><span class=p>):</span>    <span class=n>currencies</span><span class=p>:</span> <span class=nb>list</span><span class=p>[</span><span class=n>CurrencyPosition</span><span class=p>]</span>    <span class=n>stocks</span><span class=p>:</span> <span class=nb>list</span><span class=p>[</span><span class=n>StockPosition</span><span class=p>]</span></pre><p>Let's create a portfolio instance and check methods <code>from_json</code> and <code>to_json</code>:</p><pre lang=python3><span class=n>portfolio</span> <span class=o>=</span> <span class=n>Portfolio</span><span class=p>(</span>    <span class=n>currencies</span><span class=o>=</span><span class=p>[</span>        <span class=n>CurrencyPosition</span><span class=p>(</span><span class=n>Currency</span><span class=o>.</span><span class=n>USD</span><span class=p>,</span> <span class=mf>238.67</span><span class=p>),</span>        <span class=n>CurrencyPosition</span><span class=p>(</span><span class=n>Currency</span><span class=o>.</span><span class=n>EUR</span><span class=p>,</span> <span class=mf>361.84</span><span class=p>),</span>    <span class=p>],</span>    <span class=n>stocks</span><span class=o>=</span><span class=p>[</span>        <span class=n>StockPosition</span><span class=p>(</span><span class=s2>\"AAPL\"</span><span class=p>,</span> <span class=s2>\"Apple\"</span><span class=p>,</span> <span class=mi>10</span><span class=p>),</span>        <span class=n>StockPosition</span><span class=p>(</span><span class=s2>\"AMZN\"</span><span class=p>,</span> <span class=s2>\"Amazon\"</span><span class=p>,</span> <span class=mi>10</span><span class=p>),</span>    <span class=p>]</span><span class=p>)</span><span class=n>portfolio_json</span> <span class=o>=</span> <span class=n>portfolio</span><span class=o>.</span><span class=n>to_json</span><span class=p>()</span><span class=k>assert</span> <span class=n>Portfolio</span><span class=o>.</span><span class=n>from_json</span><span class=p>(</span><span class=n>portfolio_json</span><span class=p>)</span> <span class=o>==</span> <span class=n>portfolio</span></pre><p>If we need to serialize something different from a root dataclass,we can use codecs. In the following example we create a JSON decoder and encoderfor a list of currencies:</p><pre lang=python3><span class=kn>from</span> <span class=nn>mashumaro.codecs.json</span> <span class=kn>import</span> <span class=n>JSONDecoder</span><span class=p>,</span> <span class=n>JSONEncoder</span><span class=o>...</span><span class=n>decoder</span> <span class=o>=</span> <span class=n>JSONDecoder</span><span class=p>(</span><span class=nb>list</span><span class=p>[</span><span class=n>CurrencyPosition</span><span class=p>])</span><span class=n>encoder</span> <span class=o>=</span> <span class=n>JSONEncoder</span><span class=p>(</span><span class=nb>list</span><span class=p>[</span><span class=n>CurrencyPosition</span><span class=p>])</span><span class=n>currencies</span> <span class=o>=</span> <span class=p>[</span>    <span class=n>CurrencyPosition</span><span class=p>(</span><span class=n>Currency</span><span class=o>.</span><span class=n>USD</span><span class=p>,</span> <span class=mf>238.67</span><span class=p>),</span>    <span class=n>CurrencyPosition</span><span class=p>(</span><span class=n>Currency</span><span class=o>.</span><span class=n>EUR</span><span class=p>,</span> <span class=mf>361.84</span><span class=p>),</span><span class=p>]</span><span class=n>currencies_json</span> <span class=o>=</span> <span class=n>encoder</span><span class=o>.</span><span class=n>encode</span><span class=p>(</span><span class=n>currencies</span><span class=p>)</span><span class=k>assert</span> <span class=n>decoder</span><span class=o>.</span><span class=n>decode</span><span class=p>(</span><span class=n>currencies_json</span><span class=p>)</span> <span class=o>==</span> <span class=n>currencies</span></pre><h2>How does it work?</h2><p>This library works by taking the schema of the data and generating aspecific decoder and encoder for exactly that schema, taking into account thespecifics of serialization format. This is much faster than inspection ofdata types on every call of decoding or encoding at runtime.</p><p>These specific decoders and encoders are generated by<a href=#supported-serialization-formats rel=nofollow>codecs and mixins</a>. When using serializationmixins, these methods are compiled during import time (or at runtime in somecases) and are set as attributes to your dataclasses. To minimize the importtime, you can explicitly enable<a href=#lazy_compilation-config-option rel=nofollow>lazy compilation</a>.</p><h2>Benchmark</h2><ul><li>macOS 14.0 Sonoma</li><li>Apple M1</li><li>16GB RAM</li><li>Python 3.12.0</li></ul><p>Benchmark using <a href=\"https://github.com/psf/pyperf\" rel=nofollow>pyperf</a> with GitHub Issue model. Please note that thefollowing charts use logarithmic scale, as it is convenient for displayingvery large ranges of values.</p><img src=\"https://pypi-camo.freetls.fastly.net/6d80acfcf4ba98e39ee1e75005be5d3e1ed3e975/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f466174616c3174792f6d617368756d61726f2f643566393861326265613634623865643537633037646234303862656565353730393936396334632f62656e63686d61726b2f6368617274732f6c6f61645f6c696768742e737667\" width=604><img src=\"https://pypi-camo.freetls.fastly.net/114636daef171196eecad365efb888efa43bf0cc/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f466174616c3174792f6d617368756d61726f2f643566393861326265613634623865643537633037646234303862656565353730393936396334632f62656e63686d61726b2f6368617274732f64756d705f6c696768742e737667\" width=604><blockquote><p>[!NOTE]<br>Benchmark results may vary depending on the specific configuration andparameters used for serialization and deserialization. However, we have madean attempt to use the available options that can speed up and smooth out thedifferences in how libraries work.</p></blockquote><p>To run benchmark in your environment:</p><pre lang=bash>git<span class=w> </span>clone<span class=w> </span>git@github.com:Fatal1ty/mashumaro.git<span class=nb>cd</span><span class=w> </span>mashumaropython3<span class=w> </span>-m<span class=w> </span>venv<span class=w> </span>env<span class=w> </span><span class=o>&amp;&amp;</span><span class=w> </span><span class=nb>source</span><span class=w> </span>env/bin/activatepip<span class=w> </span>install<span class=w> </span>-e<span class=w> </span>.pip<span class=w> </span>install<span class=w> </span>-r<span class=w> </span>requirements-dev.txt./benchmark/run.sh</pre><h2>Supported serialization formats</h2><p>This library has built-in support for multiple popular formats:</p><ul><li><a href=\"https://www.json.org\" rel=nofollow>JSON</a></li><li><a href=\"https://yaml.org\" rel=nofollow>YAML</a></li><li><a href=\"https://toml.io\" rel=nofollow>TOML</a></li><li><a href=\"https://msgpack.org\" rel=nofollow>MessagePack</a></li></ul><p>There are preconfigured codecs and mixin classes. However, you're freeto override some settings if necessary.</p><blockquote><p>[!IMPORTANT]<br>As for codecs, you areoffered to choose between convenience and efficiency. When you need to decodeor encode structured data more than once, it's highly recommended to createand reuse a decoder or encoder specifically for that structure. For one-timeuse with default settings it may be convenient to use global functions thatcreate a disposable decoder or encoder under the hood. Be aware not to usethese convenient global functions multiple times for the same structure.</p></blockquote><h3>Basic form</h3><p>Basic form denotes a python object consisting only of basic data typessupported by most serialization formats. These types are:<a href=\"https://docs.python.org/3/library/stdtypes.html#str\" rel=nofollow><code>str</code></a>,<a href=\"https://docs.python.org/3/library/functions.html#int\" rel=nofollow><code>int</code></a>,<a href=\"https://docs.python.org/3/library/functions.html#float\" rel=nofollow><code>float</code></a>,<a href=\"https://docs.python.org/3/library/stdtypes.html#bltin-boolean-values\" rel=nofollow><code>bool</code></a>,<a href=\"https://docs.python.org/3/library/stdtypes.html#list\" rel=nofollow><code>list</code></a>,<a href=\"https://docs.python.org/3/library/stdtypes.html#dict\" rel=nofollow><code>dict</code></a>.</p><p>This is also a starting point you can play with for a comprehensivetransformation of your data.</p><p>Efficient decoder and encoder can be used as follows:</p><pre lang=python3><span class=kn>from</span> <span class=nn>mashumaro.codecs</span> <span class=kn>import</span> <span class=n>BasicDecoder</span><span class=p>,</span> <span class=n>BasicEncoder</span><span class=c1># or from mashumaro.codecs.basic import BasicDecoder, BasicEncoder</span><span class=n>decoder</span> <span class=o>=</span> <span class=n>BasicDecoder</span><span class=p>(</span><span class=o>&lt;</span><span class=n>shape_type</span><span class=o>&gt;</span><span class=p>,</span> <span class=o>...</span><span class=p>)</span><span class=n>decoder</span><span class=o>.</span><span class=n>decode</span><span class=p>(</span><span class=o>...</span><span class=p>)</span><span class=n>encoder</span> <span class=o>=</span> <span class=n>BasicEncoder</span><span class=p>(</span><span class=o>&lt;</span><span class=n>shape_type</span><span class=o>&gt;</span><span class=p>,</span> <span class=o>...</span><span class=p>)</span><span class=n>encoder</span><span class=o>.</span><span class=n>encode</span><span class=p>(</span><span class=o>...</span><span class=p>)</span></pre><p>Convenient functions are recommended to be used as follows:</p><pre lang=python3><span class=kn>import</span> <span class=nn>mashumaro.codecs.basic</span> <span class=k>as</span> <span class=nn>basic_codec</span><span class=n>basic_codec</span><span class=o>.</span><span class=n>decode</span><span class=p>(</span><span class=o>...</span><span class=p>,</span> <span class=o>&lt;</span><span class=n>shape_type</span><span class=o>&gt;</span><span class=p>)</span><span class=n>basic_codec</span><span class=o>.</span><span class=n>encode</span><span class=p>(</span><span class=o>...</span><span class=p>,</span> <span class=o>&lt;</span><span class=n>shape_type</span><span class=o>&gt;</span><span class=p>)</span></pre><p>Mixin can be used as follows:</p><pre lang=python3><span class=kn>from</span> <span class=nn>mashumaro</span> <span class=kn>import</span> <span class=n>DataClassDictMixin</span><span class=c1># or from mashumaro.mixins.dict import DataClassDictMixin</span><span class=nd>@dataclass</span><span class=k>class</span> <span class=nc>MyModel</span><span class=p>(</span><span class=n>DataClassDictMixin</span><span class=p>):</span>    <span class=o>...</span><span class=n>MyModel</span><span class=o>.</span><span class=n>from_dict</span><span class=p>(</span><span class=o>...</span><span class=p>)</span><span class=n>MyModel</span><span class=p>(</span><span class=o>...</span><span class=p>)</span><span class=o>.</span><span class=n>to_dict</span><span class=p>()</span></pre><blockquote><p>[!TIP]<br>You don't need to inherit <code>DataClassDictMixin</code> along with other serializationmixins because it's a base class for them.</p></blockquote><h3>JSON</h3><p><a href=\"https://www.json.org\" rel=nofollow>JSON</a> is a lightweight data-interchange format. You canchoose between standard library<a href=\"https://docs.python.org/3/library/json.html\" rel=nofollow>json</a> for compatibility andthird-party dependency <a href=\"https://pypi.org/project/orjson/\" rel=nofollow>orjson</a> for betterperformance.</p><h4>json library</h4><p>Efficient decoder and encoder can be used as follows:</p><pre lang=python3><span class=kn>from</span> <span class=nn>mashumaro.codecs.json</span> <span class=kn>import</span> <span class=n>JSONDecoder</span><span class=p>,</span> <span class=n>JSONEncoder</span><span class=n>decoder</span> <span class=o>=</span> <span class=n>JSONDecoder</span><span class=p>(</span><span class=o>&lt;</span><span class=n>shape_type</span><span class=o>&gt;</span><span class=p>,</span> <span class=o>...</span><span class=p>)</span><span class=n>decoder</span><span class=o>.</span><span class=n>decode</span><span class=p>(</span><span class=o>...</span><span class=p>)</span><span class=n>encoder</span> <span class=o>=</span> <span class=n>JSONEncoder</span><span class=p>(</span><span class=o>&lt;</span><span class=n>shape_type</span><span class=o>&gt;</span><span class=p>,</span> <span class=o>...</span><span class=p>)</span><span class=n>encoder</span><span class=o>.</span><span class=n>encode</span><span class=p>(</span><span class=o>...</span><span class=p>)</span></pre><p>Convenient functions can be used as follows:</p><pre lang=python3><span class=kn>from</span> <span class=nn>mashumaro.codecs.json</span> <span class=kn>import</span> <span class=n>json_decode</span><span class=p>,</span> <span class=n>json_encode</span><span class=n>json_decode</span><span class=p>(</span><span class=o>...</span><span class=p>,</span> <span class=o>&lt;</span><span class=n>shape_type</span><span class=o>&gt;</span><span class=p>)</span><span class=n>json_encode</span><span class=p>(</span><span class=o>...</span><span class=p>,</span> <span class=o>&lt;</span><span class=n>shape_type</span><span class=o>&gt;</span><span class=p>)</span></pre><p>Convenient function aliases are recommended to be used as follows:</p><pre lang=python3><span class=kn>import</span> <span class=nn>mashumaro.codecs.json</span> <span class=k>as</span> <span class=nn>json_codec</span><span class=n>json_codec</span><span class=o>.</span><span class=n>decode</span><span class=p>(</span><span class=o>...&lt;</span><span class=n>shape_type</span><span class=o>&gt;</span><span class=p>)</span><span class=n>json_codec</span><span class=o>.</span><span class=n>encode</span><span class=p>(</span><span class=o>...</span><span class=p>,</span> <span class=o>&lt;</span><span class=n>shape_type</span><span class=o>&gt;</span><span class=p>)</span></pre><p>Mixin can be used as follows:</p><pre lang=python3><span class=kn>from</span> <span class=nn>mashumaro.mixins.json</span> <span class=kn>import</span> <span class=n>DataClassJSONMixin</span><span class=nd>@dataclass</span><span class=k>class</span> <span class=nc>MyModel</span><span class=p>(</span><span class=n>DataClassJSONMixin</span><span class=p>):</span>    <span class=o>...</span><span class=n>MyModel</span><span class=o>.</span><span class=n>from_json</span><span class=p>(</span><span class=o>...</span><span class=p>)</span><span class=n>MyModel</span><span class=p>(</span><span class=o>...</span><span class=p>)</span><span class=o>.</span><span class=n>to_json</span><span class=p>()</span></pre><h4>orjson library</h4><p>In order to use <a href=\"https://pypi.org/project/orjson/\" rel=nofollow><code>orjson</code></a> library, it mustbe installed manually or using an extra option for <code>mashumaro</code>:</p><pre lang=shell>pip<span class=w> </span>install<span class=w> </span>mashumaro<span class=o>[</span>orjson<span class=o>]</span></pre><p>The following data types will be handled by<a href=\"https://pypi.org/project/orjson/\" rel=nofollow><code>orjson</code></a> library by default:</p><ul><li><a href=\"https://docs.python.org/3/library/datetime.html#datetime.datetime\" rel=nofollow><code>datetime</code></a></li><li><a href=\"https://docs.python.org/3/library/datetime.html#datetime.date\" rel=nofollow><code>date</code></a></li><li><a href=\"https://docs.python.org/3/library/datetime.html#datetime.time\" rel=nofollow><code>time</code></a></li><li><a href=\"https://docs.python.org/3/library/uuid.html#uuid.UUID\" rel=nofollow><code>uuid.UUID</code></a></li></ul><p>Efficient decoder and encoder can be used as follows:</p><pre lang=python3><span class=kn>from</span> <span class=nn>mashumaro.codecs.orjson</span> <span class=kn>import</span> <span class=n>ORJSONDecoder</span><span class=p>,</span> <span class=n>ORJSONEncoder</span><span class=n>decoder</span> <span class=o>=</span> <span class=n>ORJSONDecoder</span><span class=p>(</span><span class=o>&lt;</span><span class=n>shape_type</span><span class=o>&gt;</span><span class=p>,</span> <span class=o>...</span><span class=p>)</span><span class=n>decoder</span><span class=o>.</span><span class=n>decode</span><span class=p>(</span><span class=o>...</span><span class=p>)</span><span class=n>encoder</span> <span class=o>=</span> <span class=n>ORJSONEncoder</span><span class=p>(</span><span class=o>&lt;</span><span class=n>shape_type</span><span class=o>&gt;</span><span class=p>,</span> <span class=o>...</span><span class=p>)</span><span class=n>encoder</span><span class=o>.</span><span class=n>encode</span><span class=p>(</span><span class=o>...</span><span class=p>)</span></pre><p>Convenient functions can be used as follows:</p><pre lang=python3><span class=kn>from</span> <span class=nn>mashumaro.codecs.orjson</span> <span class=kn>import</span> <span class=n>json_decode</span><span class=p>,</span> <span class=n>json_encode</span><span class=n>json_decode</span><span class=p>(</span><span class=o>...</span><span class=p>,</span> <span class=o>&lt;</span><span class=n>shape_type</span><span class=o>&gt;</span><span class=p>)</span><span class=n>json_encode</span><span class=p>(</span><span class=o>...</span><span class=p>,</span> <span class=o>&lt;</span><span class=n>shape_type</span><span class=o>&gt;</span><span class=p>)</span></pre><p>Convenient function aliases are recommended to be used as follows:</p><pre lang=python3><span class=kn>import</span> <span class=nn>mashumaro.codecs.orjson</span> <span class=k>as</span> <span class=nn>json_codec</span><span class=n>json_codec</span><span class=o>.</span><span class=n>decode</span><span class=p>(</span><span class=o>...&lt;</span><span class=n>shape_type</span><span class=o>&gt;</span><span class=p>)</span><span class=n>json_codec</span><span class=o>.</span><span class=n>encode</span><span class=p>(</span><span class=o>...</span><span class=p>,</span> <span class=o>&lt;</span><span class=n>shape_type</span><span class=o>&gt;</span><span class=p>)</span></pre><p>Mixin can be used as follows:</p><pre lang=python3><span class=kn>from</span> <span class=nn>mashumaro.mixins.orjson</span> <span class=kn>import</span> <span class=n>DataClassORJSONMixin</span><span class=nd>@dataclass</span><span class=k>class</span> <span class=nc>MyModel</span><span class=p>(</span><span class=n>DataClassORJSONMixin</span><span class=p>):</span>    <span class=o>...</span><span class=n>MyModel</span><span class=o>.</span><span class=n>from_json</span><span class=p>(</span><span class=o>...</span><span class=p>)</span><span class=n>MyModel</span><span class=p>(</span><span class=o>...</span><span class=p>)</span><span class=o>.</span><span class=n>to_json</span><span class=p>()</span><span class=n>MyModel</span><span class=p>(</span><span class=o>...</span><span class=p>)</span><span class=o>.</span><span class=n>to_jsonb</span><span class=p>()</span></pre><h3>YAML</h3><p><a href=\"https://yaml.org\" rel=nofollow>YAML</a> is a human-friendly data serialization language forall programming languages. In order to use this format, the<a href=\"https://pypi.org/project/PyYAML/\" rel=nofollow><code>pyyaml</code></a> package must be installed.You can install it manually or using an extra option for <code>mashumaro</code>:</p><pre lang=shell>pip<span class=w> </span>install<span class=w> </span>mashumaro<span class=o>[</span>yaml<span class=o>]</span></pre><p>Efficient decoder and encoder can be used as follows:</p><pre lang=python3><span class=kn>from</span> <span class=nn>mashumaro.codecs.yaml</span> <span class=kn>import</span> <span class=n>YAMLDecoder</span><span class=p>,</span> <span class=n>YAMLEncoder</span><span class=n>decoder</span> <span class=o>=</span> <span class=n>YAMLDecoder</span><span class=p>(</span><span class=o>&lt;</span><span class=n>shape_type</span><span class=o>&gt;</span><span class=p>,</span> <span class=o>...</span><span class=p>)</span><span class=n>decoder</span><span class=o>.</span><span class=n>decode</span><span class=p>(</span><span class=o>...</span><span class=p>)</span><span class=n>encoder</span> <span class=o>=</span> <span class=n>YAMLEncoder</span><span class=p>(</span><span class=o>&lt;</span><span class=n>shape_type</span><span class=o>&gt;</span><span class=p>,</span> <span class=o>...</span><span class=p>)</span><span class=n>encoder</span><span class=o>.</span><span class=n>encode</span><span class=p>(</span><span class=o>...</span><span class=p>)</span></pre><p>Convenient functions can be used as follows:</p><pre lang=python3><span class=kn>from</span> <span class=nn>mashumaro.codecs.yaml</span> <span class=kn>import</span> <span class=n>yaml_decode</span><span class=p>,</span> <span class=n>yaml_encode</span><span class=n>yaml_decode</span><span class=p>(</span><span class=o>...</span><span class=p>,</span> <span class=o>&lt;</span><span class=n>shape_type</span><span class=o>&gt;</span><span class=p>)</span><span class=n>yaml_encode</span><span class=p>(</span><span class=o>...</span><span class=p>,</span> <span class=o>&lt;</span><span class=n>shape_type</span><span class=o>&gt;</span><span class=p>)</span></pre><p>Convenient function aliases are recommended to be used as follows:</p><pre lang=python3><span class=kn>import</span> <span class=nn>mashumaro.codecs.yaml</span> <span class=k>as</span> <span class=nn>yaml_codec</span><span class=n>yaml_codec</span><span class=o>.</span><span class=n>decode</span><span class=p>(</span><span class=o>...&lt;</span><span class=n>shape_type</span><span class=o>&gt;</span><span class=p>)</span><span class=n>yaml_codec</span><span class=o>.</span><span class=n>encode</span><span class=p>(</span><span class=o>...</span><span class=p>,</span> <span class=o>&lt;</span><span class=n>shape_type</span><span class=o>&gt;</span><span class=p>)</span></pre><p>Mixin can be used as follows:</p><pre lang=python3><span class=kn>from</span> <span class=nn>mashumaro.mixins.yaml</span> <span class=kn>import</span> <span class=n>DataClassYAMLMixin</span><span class=nd>@dataclass</span><span class=k>class</span> <span class=nc>MyModel</span><span class=p>(</span><span class=n>DataClassYAMLMixin</span><span class=p>):</span>    <span class=o>...</span><span class=n>MyModel</span><span class=o>.</span><span class=n>from_yaml</span><span class=p>(</span><span class=o>...</span><span class=p>)</span><span class=n>MyModel</span><span class=p>(</span><span class=o>...</span><span class=p>)</span><span class=o>.</span><span class=n>to_yaml</span><span class=p>()</span></pre><h3>TOML</h3><p><a href=\"https://toml.io\" rel=nofollow>TOML</a> is config file format for humans.In order to use this format, the <a href=\"https://pypi.org/project/tomli/\" rel=nofollow><code>tomli</code></a> and<a href=\"https://pypi.org/project/tomli-w/\" rel=nofollow><code>tomli-w</code></a> packages must be installed.In Python 3.11+, <code>tomli</code> is included as<a href=\"https://docs.python.org/3/library/tomllib.html\" rel=nofollow><code>tomlib</code></a> standard librarymodule and is used for this format. You can install the missing packagesmanually or using an extra optionfor <code>mashumaro</code>:</p><pre lang=shell>pip<span class=w> </span>install<span class=w> </span>mashumaro<span class=o>[</span>toml<span class=o>]</span></pre><p>The following data types will be handled by<a href=\"https://pypi.org/project/tomli/\" rel=nofollow><code>tomli</code></a>/<a href=\"https://pypi.org/project/tomli-w/\" rel=nofollow><code>tomli-w</code></a> library by default:</p><ul><li><a href=\"https://docs.python.org/3/library/datetime.html#datetime.datetime\" rel=nofollow><code>datetime</code></a></li><li><a href=\"https://docs.python.org/3/library/datetime.html#datetime.date\" rel=nofollow><code>date</code></a></li><li><a href=\"https://docs.python.org/3/library/datetime.html#datetime.time\" rel=nofollow><code>time</code></a></li></ul><p>Fields with value <code>None</code> will be omitted on serialization because TOMLdoesn't support null values.</p><p>Efficient decoder and encoder can be used as follows:</p><pre lang=python3><span class=kn>from</span> <span class=nn>mashumaro.codecs.toml</span> <span class=kn>import</span> <span class=n>TOMLDecoder</span><span class=p>,</span> <span class=n>TOMLEncoder</span><span class=n>decoder</span> <span class=o>=</span> <span class=n>TOMLDecoder</span><span class=p>(</span><span class=o>&lt;</span><span class=n>shape_type</span><span class=o>&gt;</span><span class=p>,</span> <span class=o>...</span><span class=p>)</span><span class=n>decoder</span><span class=o>.</span><span class=n>decode</span><span class=p>(</span><span class=o>...</span><span class=p>)</span><span class=n>encoder</span> <span class=o>=</span> <span class=n>TOMLEncoder</span><span class=p>(</span><span class=o>&lt;</span><span class=n>shape_type</span><span class=o>&gt;</span><span class=p>,</span> <span class=o>...</span><span class=p>)</span><span class=n>encoder</span><span class=o>.</span><span class=n>encode</span><span class=p>(</span><span class=o>...</span><span class=p>)</span></pre><p>Convenient functions can be used as follows:</p><pre lang=python3><span class=kn>from</span> <span class=nn>mashumaro.codecs.toml</span> <span class=kn>import</span> <span class=n>toml_decode</span><span class=p>,</span> <span class=n>toml_encode</span><span class=n>toml_decode</span><span class=p>(</span><span class=o>...</span><span class=p>,</span> <span class=o>&lt;</span><span class=n>shape_type</span><span class=o>&gt;</span><span class=p>)</span><span class=n>toml_encode</span><span class=p>(</span><span class=o>...</span><span class=p>,</span> <span class=o>&lt;</span><span class=n>shape_type</span><span class=o>&gt;</span><span class=p>)</span></pre><p>Convenient function aliases are recommended to be used as follows:</p><pre lang=python3><span class=kn>import</span> <span class=nn>mashumaro.codecs.toml</span> <span class=k>as</span> <span class=nn>toml_codec</span><span class=n>toml_codec</span><span class=o>.</span><span class=n>decode</span><span class=p>(</span><span class=o>...&lt;</span><span class=n>shape_type</span><span class=o>&gt;</span><span class=p>)</span><span class=n>toml_codec</span><span class=o>.</span><span class=n>encode</span><span class=p>(</span><span class=o>...</span><span class=p>,</span> <span class=o>&lt;</span><span class=n>shape_type</span><span class=o>&gt;</span><span class=p>)</span></pre><p>Mixin can be used as follows:</p><pre lang=python3><span class=kn>from</span> <span class=nn>mashumaro.mixins.toml</span> <span class=kn>import</span> <span class=n>DataClassTOMLMixin</span><span class=nd>@dataclass</span><span class=k>class</span> <span class=nc>MyModel</span><span class=p>(</span><span class=n>DataClassTOMLMixin</span><span class=p>):</span>    <span class=o>...</span><span class=n>MyModel</span><span class=o>.</span><span class=n>from_toml</span><span class=p>(</span><span class=o>...</span><span class=p>)</span><span class=n>MyModel</span><span class=p>(</span><span class=o>...</span><span class=p>)</span><span class=o>.</span><span class=n>to_toml</span><span class=p>()</span></pre><h3>MessagePack</h3><p><a href=\"https://msgpack.org\" rel=nofollow>MessagePack</a> is an efficient binary serialization format.In order to use this mixin, the <a href=\"https://pypi.org/project/msgpack/\" rel=nofollow><code>msgpack</code></a>package must be installed. You can install it manually or using an extraoption for <code>mashumaro</code>:</p><pre lang=shell>pip<span class=w> </span>install<span class=w> </span>mashumaro<span class=o>[</span>msgpack<span class=o>]</span></pre><p>The following data types will be handled by<a href=\"https://pypi.org/project/msgpack/\" rel=nofollow><code>msgpack</code></a> library by default:</p><ul><li><a href=\"https://docs.python.org/3/library/stdtypes.html#bytes\" rel=nofollow><code>bytes</code></a></li><li><a href=\"https://docs.python.org/3/library/stdtypes.html#bytearray\" rel=nofollow><code>bytearray</code></a></li></ul><p>Efficient decoder and encoder can be used as follows:</p><pre lang=python3><span class=kn>from</span> <span class=nn>mashumaro.codecs.msgpack</span> <span class=kn>import</span> <span class=n>MessagePackDecoder</span><span class=p>,</span> <span class=n>MessagePackEncoder</span><span class=n>decoder</span> <span class=o>=</span> <span class=n>MessagePackDecoder</span><span class=p>(</span><span class=o>&lt;</span><span class=n>shape_type</span><span class=o>&gt;</span><span class=p>,</span> <span class=o>...</span><span class=p>)</span><span class=n>decoder</span><span class=o>.</span><span class=n>decode</span><span class=p>(</span><span class=o>...</span><span class=p>)</span><span class=n>encoder</span> <span class=o>=</span> <span class=n>MessagePackEncoder</span><span class=p>(</span><span class=o>&lt;</span><span class=n>shape_type</span><span class=o>&gt;</span><span class=p>,</span> <span class=o>...</span><span class=p>)</span><span class=n>encoder</span><span class=o>.</span><span class=n>encode</span><span class=p>(</span><span class=o>...</span><span class=p>)</span></pre><p>Convenient functions can be used as follows:</p><pre lang=python3><span class=kn>from</span> <span class=nn>mashumaro.codecs.msgpack</span> <span class=kn>import</span> <span class=n>msgpack_decode</span><span class=p>,</span> <span class=n>msgpack_encode</span><span class=n>msgpack_decode</span><span class=p>(</span><span class=o>...</span><span class=p>,</span> <span class=o>&lt;</span><span class=n>shape_type</span><span class=o>&gt;</span><span class=p>)</span><span class=n>msgpack_encode</span><span class=p>(</span><span class=o>...</span><span class=p>,</span> <span class=o>&lt;</span><span class=n>shape_type</span><span class=o>&gt;</span><span class=p>)</span></pre><p>Convenient function aliases are recommended to be used as follows:</p><pre lang=python3><span class=kn>import</span> <span class=nn>mashumaro.codecs.msgpack</span> <span class=k>as</span> <span class=nn>msgpack_codec</span><span class=n>msgpack_codec</span><span class=o>.</span><span class=n>decode</span><span class=p>(</span><span class=o>...&lt;</span><span class=n>shape_type</span><span class=o>&gt;</span><span class=p>)</span><span class=n>msgpack_codec</span><span class=o>.</span><span class=n>encode</span><span class=p>(</span><span class=o>...</span><span class=p>,</span> <span class=o>&lt;</span><span class=n>shape_type</span><span class=o>&gt;</span><span class=p>)</span></pre><p>Mixin can be used as follows:</p><pre lang=python3><span class=kn>from</span> <span class=nn>mashumaro.mixins.msgpack</span> <span class=kn>import</span> <span class=n>DataClassMessagePackMixin</span><span class=nd>@dataclass</span><span class=k>class</span> <span class=nc>MyModel</span><span class=p>(</span><span class=n>DataClassMessagePackMixin</span><span class=p>):</span>    <span class=o>...</span><span class=n>MyModel</span><span class=o>.</span><span class=n>from_msgpack</span><span class=p>(</span><span class=o>...</span><span class=p>)</span><span class=n>MyModel</span><span class=p>(</span><span class=o>...</span><span class=p>)</span><span class=o>.</span><span class=n>to_msgpack</span><span class=p>()</span></pre><h2>Customization</h2><p>Customization options of <code>mashumaro</code> are extensive and will most likely cover your needs.When it comes to non-standard data types and non-standard serialization support, you can do the following:</p><ul><li>Turn an existing regular or generic class into a serializable oneby inheriting the <a href=#serializabletype-interface rel=nofollow><code>SerializableType</code></a> class</li><li>Write different serialization strategies for an existing regular or generic type that is not under your controlusing <a href=#serializationstrategy rel=nofollow><code>SerializationStrategy</code></a> class</li><li>Define serialization / deserialization methods:<ul><li>for a specific dataclass field by using <a href=#field-options rel=nofollow>field options</a></li><li>for a specific data type used in the dataclass by using <a href=#config-options rel=nofollow><code>Config</code></a> class</li></ul></li><li>Alter input and output data with serialization / deserialization <a href=#serialization-hooks rel=nofollow>hooks</a></li><li>Separate serialization scheme from a dataclass in a reusable manner using <a href=#dialects rel=nofollow>dialects</a></li><li>Choose from predefined serialization engines for the specific data types, e.g. <code>datetime</code> and <code>NamedTuple</code></li></ul><h3>SerializableType interface</h3><p>If you have a custom class or hierarchy of classes whose instances you wantto serialize with <code>mashumaro</code>, the first option is to implement<code>SerializableType</code> interface.</p><h4>User-defined types</h4><p>Let's look at this not very practicable example:</p><pre lang=python3><span class=kn>from</span> <span class=nn>dataclasses</span> <span class=kn>import</span> <span class=n>dataclass</span><span class=kn>from</span> <span class=nn>mashumaro</span> <span class=kn>import</span> <span class=n>DataClassDictMixin</span><span class=kn>from</span> <span class=nn>mashumaro.types</span> <span class=kn>import</span> <span class=n>SerializableType</span><span class=k>class</span> <span class=nc>Airport</span><span class=p>(</span><span class=n>SerializableType</span><span class=p>):</span>    <span class=k>def</span> <span class=fm>__init__</span><span class=p>(</span><span class=bp>self</span><span class=p>,</span> <span class=n>code</span><span class=p>,</span> <span class=n>city</span><span class=p>):</span>        <span class=bp>self</span><span class=o>.</span><span class=n>code</span><span class=p>,</span> <span class=bp>self</span><span class=o>.</span><span class=n>city</span> <span class=o>=</span> <span class=n>code</span><span class=p>,</span> <span class=n>city</span>    <span class=k>def</span> <span class=nf>_serialize</span><span class=p>(</span><span class=bp>self</span><span class=p>):</span>        <span class=k>return</span> <span class=p>[</span><span class=bp>self</span><span class=o>.</span><span class=n>code</span><span class=p>,</span> <span class=bp>self</span><span class=o>.</span><span class=n>city</span><span class=p>]</span>    <span class=nd>@classmethod</span>    <span class=k>def</span> <span class=nf>_deserialize</span><span class=p>(</span><span class=bp>cls</span><span class=p>,</span> <span class=n>value</span><span class=p>):</span>        <span class=k>return</span> <span class=bp>cls</span><span class=p>(</span><span class=o>*</span><span class=n>value</span><span class=p>)</span>    <span class=k>def</span> <span class=fm>__eq__</span><span class=p>(</span><span class=bp>self</span><span class=p>,</span> <span class=n>other</span><span class=p>):</span>        <span class=k>return</span> <span class=bp>self</span><span class=o>.</span><span class=n>code</span><span class=p>,</span> <span class=bp>self</span><span class=o>.</span><span class=n>city</span> <span class=o>==</span> <span class=n>other</span><span class=o>.</span><span class=n>code</span><span class=p>,</span> <span class=n>other</span><span class=o>.</span><span class=n>city</span><span class=nd>@dataclass</span><span class=k>class</span> <span class=nc>Flight</span><span class=p>(</span><span class=n>DataClassDictMixin</span><span class=p>):</span>    <span class=n>origin</span><span class=p>:</span> <span class=n>Airport</span>    <span class=n>destination</span><span class=p>:</span> <span class=n>Airport</span><span class=n>JFK</span> <span class=o>=</span> <span class=n>Airport</span><span class=p>(</span><span class=s2>\"JFK\"</span><span class=p>,</span> <span class=s2>\"New York City\"</span><span class=p>)</span><span class=n>LAX</span> <span class=o>=</span> <span class=n>Airport</span><span class=p>(</span><span class=s2>\"LAX\"</span><span class=p>,</span> <span class=s2>\"Los Angeles\"</span><span class=p>)</span><span class=n>input_data</span> <span class=o>=</span> <span class=p>{</span>    <span class=s2>\"origin\"</span><span class=p>:</span> <span class=p>[</span><span class=s2>\"JFK\"</span><span class=p>,</span> <span class=s2>\"New York City\"</span><span class=p>],</span>    <span class=s2>\"destination\"</span><span class=p>:</span> <span class=p>[</span><span class=s2>\"LAX\"</span><span class=p>,</span> <span class=s2>\"Los Angeles\"</span><span class=p>]</span><span class=p>}</span><span class=n>my_flight</span> <span class=o>=</span> <span class=n>Flight</span><span class=o>.</span><span class=n>from_dict</span><span class=p>(</span><span class=n>input_data</span><span class=p>)</span><span class=k>assert</span> <span class=n>my_flight</span> <span class=o>==</span> <span class=n>Flight</span><span class=p>(</span><span class=n>JFK</span><span class=p>,</span> <span class=n>LAX</span><span class=p>)</span><span class=k>assert</span> <span class=n>my_flight</span><span class=o>.</span><span class=n>to_dict</span><span class=p>()</span> <span class=o>==</span> <span class=n>input_data</span></pre><p>You can see how <code>Airport</code> instances are seamlessly created from lists of twostrings and serialized into them.</p><p>By default <code>_deserialize</code> method will get raw input data without anytransformations before. This should be enough in many cases, especially whenyou need to perform non-standard transformations yourself, but let's extendour example:</p><pre lang=python3><span class=k>class</span> <span class=nc>Itinerary</span><span class=p>(</span><span class=n>SerializableType</span><span class=p>):</span>    <span class=k>def</span> <span class=fm>__init__</span><span class=p>(</span><span class=bp>self</span><span class=p>,</span> <span class=n>flights</span><span class=p>):</span>        <span class=bp>self</span><span class=o>.</span><span class=n>flights</span> <span class=o>=</span> <span class=n>flights</span>    <span class=k>def</span> <span class=nf>_serialize</span><span class=p>(</span><span class=bp>self</span><span class=p>):</span>        <span class=k>return</span> <span class=bp>self</span><span class=o>.</span><span class=n>flights</span>    <span class=nd>@classmethod</span>    <span class=k>def</span> <span class=nf>_deserialize</span><span class=p>(</span><span class=bp>cls</span><span class=p>,</span> <span class=n>flights</span><span class=p>):</span>        <span class=k>return</span> <span class=bp>cls</span><span class=p>(</span><span class=n>flights</span><span class=p>)</span><span class=nd>@dataclass</span><span class=k>class</span> <span class=nc>TravelPlan</span><span class=p>(</span><span class=n>DataClassDictMixin</span><span class=p>):</span>    <span class=n>budget</span><span class=p>:</span> <span class=nb>float</span>    <span class=n>itinerary</span><span class=p>:</span> <span class=n>Itinerary</span><span class=n>input_data</span> <span class=o>=</span> <span class=p>{</span>    <span class=s2>\"budget\"</span><span class=p>:</span> <span class=mi>10_000</span><span class=p>,</span>    <span class=s2>\"itinerary\"</span><span class=p>:</span> <span class=p>[</span>        <span class=p>{</span>            <span class=s2>\"origin\"</span><span class=p>:</span> <span class=p>[</span><span class=s2>\"JFK\"</span><span class=p>,</span> <span class=s2>\"New York City\"</span><span class=p>],</span>            <span class=s2>\"destination\"</span><span class=p>:</span> <span class=p>[</span><span class=s2>\"LAX\"</span><span class=p>,</span> <span class=s2>\"Los Angeles\"</span><span class=p>]</span>        <span class=p>},</span>        <span class=p>{</span>            <span class=s2>\"origin\"</span><span class=p>:</span> <span class=p>[</span><span class=s2>\"LAX\"</span><span class=p>,</span> <span class=s2>\"Los Angeles\"</span><span class=p>],</span>            <span class=s2>\"destination\"</span><span class=p>:</span> <span class=p>[</span><span class=s2>\"SFO\"</span><span class=p>,</span> <span class=s2>\"San Fransisco\"</span><span class=p>]</span>        <span class=p>}</span>    <span class=p>]</span><span class=p>}</span></pre><p>If we pass the flight list as is into <code>Itinerary._deserialize</code>, our itinerarywill have something that we may not expect \u2014 <code>list[dict]</code> instead of<code>list[Flight]</code>. The solution is quite simple. Instead of calling<code>Flight._deserialize</code> yourself, just use annotations:</p><pre lang=python3><span class=k>class</span> <span class=nc>Itinerary</span><span class=p>(</span><span class=n>SerializableType</span><span class=p>,</span> <span class=n>use_annotations</span><span class=o>=</span><span class=kc>True</span><span class=p>):</span>    <span class=k>def</span> <span class=fm>__init__</span><span class=p>(</span><span class=bp>self</span><span class=p>,</span> <span class=n>flights</span><span class=p>):</span>        <span class=bp>self</span><span class=o>.</span><span class=n>flights</span> <span class=o>=</span> <span class=n>flights</span>    <span class=k>def</span> <span class=nf>_serialize</span><span class=p>(</span><span class=bp>self</span><span class=p>)</span> <span class=o>-&gt;</span> <span class=nb>list</span><span class=p>[</span><span class=n>Flight</span><span class=p>]:</span>        <span class=k>return</span> <span class=bp>self</span><span class=o>.</span><span class=n>flights</span>    <span class=nd>@classmethod</span>    <span class=k>def</span> <span class=nf>_deserialize</span><span class=p>(</span><span class=bp>cls</span><span class=p>,</span> <span class=n>flights</span><span class=p>:</span> <span class=nb>list</span><span class=p>[</span><span class=n>Flight</span><span class=p>]):</span>        <span class=k>return</span> <span class=bp>cls</span><span class=p>(</span><span class=n>flights</span><span class=p>)</span><span class=n>my_plan</span> <span class=o>=</span> <span class=n>TravelPlan</span><span class=o>.</span><span class=n>from_dict</span><span class=p>(</span><span class=n>input_data</span><span class=p>)</span><span class=k>assert</span> <span class=nb>isinstance</span><span class=p>(</span><span class=n>my_plan</span><span class=o>.</span><span class=n>itinerary</span><span class=o>.</span><span class=n>flights</span><span class=p>[</span><span class=mi>0</span><span class=p>],</span> <span class=n>Flight</span><span class=p>)</span><span class=k>assert</span> <span class=nb>isinstance</span><span class=p>(</span><span class=n>my_plan</span><span class=o>.</span><span class=n>itinerary</span><span class=o>.</span><span class=n>flights</span><span class=p>[</span><span class=mi>1</span><span class=p>],</span> <span class=n>Flight</span><span class=p>)</span><span class=k>assert</span> <span class=n>my_plan</span><span class=o>.</span><span class=n>to_dict</span><span class=p>()</span> <span class=o>==</span> <span class=n>input_data</span></pre><p>Here we add annotations to the only argument of <code>_deserialize</code> method andto the return value of <code>_serialize</code> method as well. The latter is needed forcorrect serialization.</p><blockquote><p>[!IMPORTANT]<br>The importance of explicit passing <code>use_annotations=True</code> when defining aclass is that otherwise implicit using annotations might break compatibilitywith old code that wasn't aware of this feature. It will be enabled bydefault in the future major release.</p></blockquote><h4>User-defined generic types</h4><p>The great thing to note about using annotations in <code>SerializableType</code> is thatthey work seamlessly with <a href=\"https://docs.python.org/3/library/typing.html#user-defined-generic-types\" rel=nofollow>generic</a>and <a href=\"https://peps.python.org/pep-0646/\" rel=nofollow>variadic generic</a> types.Let's see how this can be useful:</p><pre lang=python3><span class=kn>from</span> <span class=nn>datetime</span> <span class=kn>import</span> <span class=n>date</span><span class=kn>from</span> <span class=nn>typing</span> <span class=kn>import</span> <span class=n>TypeVar</span><span class=kn>from</span> <span class=nn>dataclasses</span> <span class=kn>import</span> <span class=n>dataclass</span><span class=kn>from</span> <span class=nn>mashumaro</span> <span class=kn>import</span> <span class=n>DataClassDictMixin</span><span class=kn>from</span> <span class=nn>mashumaro.types</span> <span class=kn>import</span> <span class=n>SerializableType</span><span class=n>KT</span> <span class=o>=</span> <span class=n>TypeVar</span><span class=p>(</span><span class=s2>\"KT\"</span><span class=p>)</span><span class=n>VT</span> <span class=o>=</span> <span class=n>TypeVar</span><span class=p>(</span><span class=s2>\"VT\"</span><span class=p>)</span><span class=k>class</span> <span class=nc>DictWrapper</span><span class=p>(</span><span class=nb>dict</span><span class=p>[</span><span class=n>KT</span><span class=p>,</span> <span class=n>VT</span><span class=p>],</span> <span class=n>SerializableType</span><span class=p>,</span> <span class=n>use_annotations</span><span class=o>=</span><span class=kc>True</span><span class=p>):</span>    <span class=k>def</span> <span class=nf>_serialize</span><span class=p>(</span><span class=bp>self</span><span class=p>)</span> <span class=o>-&gt;</span> <span class=nb>dict</span><span class=p>[</span><span class=n>KT</span><span class=p>,</span> <span class=n>VT</span><span class=p>]:</span>        <span class=k>return</span> <span class=nb>dict</span><span class=p>(</span><span class=bp>self</span><span class=p>)</span>    <span class=nd>@classmethod</span>    <span class=k>def</span> <span class=nf>_deserialize</span><span class=p>(</span><span class=bp>cls</span><span class=p>,</span> <span class=n>value</span><span class=p>:</span> <span class=nb>dict</span><span class=p>[</span><span class=n>KT</span><span class=p>,</span> <span class=n>VT</span><span class=p>])</span> <span class=o>-&gt;</span> <span class=s1>'DictWrapper[KT, VT]'</span><span class=p>:</span>        <span class=k>return</span> <span class=bp>cls</span><span class=p>(</span><span class=n>value</span><span class=p>)</span><span class=nd>@dataclass</span><span class=k>class</span> <span class=nc>DataClass</span><span class=p>(</span><span class=n>DataClassDictMixin</span><span class=p>):</span>    <span class=n>x</span><span class=p>:</span> <span class=n>DictWrapper</span><span class=p>[</span><span class=n>date</span><span class=p>,</span> <span class=nb>str</span><span class=p>]</span>    <span class=n>y</span><span class=p>:</span> <span class=n>DictWrapper</span><span class=p>[</span><span class=nb>str</span><span class=p>,</span> <span class=n>date</span><span class=p>]</span><span class=n>input_data</span> <span class=o>=</span> <span class=p>{</span>    <span class=s2>\"x\"</span><span class=p>:</span> <span class=p>{</span><span class=s2>\"2022-12-07\"</span><span class=p>:</span> <span class=s2>\"2022-12-07\"</span><span class=p>},</span>    <span class=s2>\"y\"</span><span class=p>:</span> <span class=p>{</span><span class=s2>\"2022-12-07\"</span><span class=p>:</span> <span class=s2>\"2022-12-07\"</span><span class=p>}</span><span class=p>}</span><span class=n>obj</span> <span class=o>=</span> <span class=n>DataClass</span><span class=o>.</span><span class=n>from_dict</span><span class=p>(</span><span class=n>input_data</span><span class=p>)</span><span class=k>assert</span> <span class=n>obj</span> <span class=o>==</span> <span class=n>DataClass</span><span class=p>(</span>    <span class=n>x</span><span class=o>=</span><span class=n>DictWrapper</span><span class=p>({</span><span class=n>date</span><span class=p>(</span><span class=mi>2022</span><span class=p>,</span> <span class=mi>12</span><span class=p>,</span> <span class=mi>7</span><span class=p>):</span> <span class=s2>\"2022-12-07\"</span><span class=p>}),</span>    <span class=n>y</span><span class=o>=</span><span class=n>DictWrapper</span><span class=p>({</span><span class=s2>\"2022-12-07\"</span><span class=p>:</span> <span class=n>date</span><span class=p>(</span><span class=mi>2022</span><span class=p>,</span> <span class=mi>12</span><span class=p>,</span> <span class=mi>7</span><span class=p>)})</span><span class=p>)</span><span class=k>assert</span> <span class=n>obj</span><span class=o>.</span><span class=n>to_dict</span><span class=p>()</span> <span class=o>==</span> <span class=n>input_data</span></pre><p>You can see that formatted date is deserialized to <code>date</code> object before passingto <code>DictWrapper._deserialize</code> in a key or value according to the genericparameters.</p><p>If you have generic dataclass types, you can use <code>SerializableType</code> for them as well, but it's not necessary sincethey're <a href=#generic-dataclasses rel=nofollow>supported</a> out of the box.</p><h3>SerializationStrategy</h3><p>If you want to add support for a custom third-party type that is not under your control,you can write serialization and deserialization logic inside <code>SerializationStrategy</code> class,which will be reusable and so well suited in case that third-party type is widely used.<code>SerializationStrategy</code> is also good if you want to create strategies that are slightly different from each other,because you can add the strategy differentiator in the <code>__init__</code> method.</p><h4>Third-party types</h4><p>To demonstrate how <code>SerializationStrategy</code> works let's write a simple strategy for datetime serializationin different formats. In this example we will use the same strategy class for two dataclass fields,but a string representing the date and time will be different.</p><pre lang=python3><span class=kn>from</span> <span class=nn>dataclasses</span> <span class=kn>import</span> <span class=n>dataclass</span><span class=p>,</span> <span class=n>field</span><span class=kn>from</span> <span class=nn>datetime</span> <span class=kn>import</span> <span class=n>datetime</span><span class=kn>from</span> <span class=nn>mashumaro</span> <span class=kn>import</span> <span class=n>DataClassDictMixin</span><span class=p>,</span> <span class=n>field_options</span><span class=kn>from</span> <span class=nn>mashumaro.types</span> <span class=kn>import</span> <span class=n>SerializationStrategy</span><span class=k>class</span> <span class=nc>FormattedDateTime</span><span class=p>(</span><span class=n>SerializationStrategy</span><span class=p>):</span>    <span class=k>def</span> <span class=fm>__init__</span><span class=p>(</span><span class=bp>self</span><span class=p>,</span> <span class=n>fmt</span><span class=p>):</span>        <span class=bp>self</span><span class=o>.</span><span class=n>fmt</span> <span class=o>=</span> <span class=n>fmt</span>    <span class=k>def</span> <span class=nf>serialize</span><span class=p>(</span><span class=bp>self</span><span class=p>,</span> <span class=n>value</span><span class=p>:</span> <span class=n>datetime</span><span class=p>)</span> <span class=o>-&gt;</span> <span class=nb>str</span><span class=p>:</span>        <span class=k>return</span> <span class=n>value</span><span class=o>.</span><span class=n>strftime</span><span class=p>(</span><span class=bp>self</span><span class=o>.</span><span class=n>fmt</span><span class=p>)</span>    <span class=k>def</span> <span class=nf>deserialize</span><span class=p>(</span><span class=bp>self</span><span class=p>,</span> <span class=n>value</span><span class=p>:</span> <span class=nb>str</span><span class=p>)</span> <span class=o>-&gt;</span> <span class=n>datetime</span><span class=p>:</span>        <span class=k>return</span> <span class=n>datetime</span><span class=o>.</span><span class=n>strptime</span><span class=p>(</span><span class=n>value</span><span class=p>,</span> <span class=bp>self</span><span class=o>.</span><span class=n>fmt</span><span class=p>)</span><span class=nd>@dataclass</span><span class=k>class</span> <span class=nc>DateTimeFormats</span><span class=p>(</span><span class=n>DataClassDictMixin</span><span class=p>):</span>    <span class=n>short</span><span class=p>:</span> <span class=n>datetime</span> <span class=o>=</span> <span class=n>field</span><span class=p>(</span>        <span class=n>metadata</span><span class=o>=</span><span class=n>field_options</span><span class=p>(</span>            <span class=n>serialization_strategy</span><span class=o>=</span><span class=n>FormattedDateTime</span><span class=p>(</span><span class=s2>\"</span><span class=si>%d</span><span class=s2>%m%Y%H%M%S\"</span><span class=p>)</span>        <span class=p>)</span>    <span class=p>)</span>    <span class=n>verbose</span><span class=p>:</span> <span class=n>datetime</span> <span class=o>=</span> <span class=n>field</span><span class=p>(</span>        <span class=n>metadata</span><span class=o>=</span><span class=n>field_options</span><span class=p>(</span>            <span class=n>serialization_strategy</span><span class=o>=</span><span class=n>FormattedDateTime</span><span class=p>(</span><span class=s2>\"%A %B </span><span class=si>%d</span><span class=s2>, %Y, %H:%M:%S\"</span><span class=p>)</span>        <span class=p>)</span>    <span class=p>)</span><span class=n>formats</span> <span class=o>=</span> <span class=n>DateTimeFormats</span><span class=p>(</span>    <span class=n>short</span><span class=o>=</span><span class=n>datetime</span><span class=p>(</span><span class=mi>2019</span><span class=p>,</span> <span class=mi>1</span><span class=p>,</span> <span class=mi>1</span><span class=p>,</span> <span class=mi>12</span><span class=p>),</span>    <span class=n>verbose</span><span class=o>=</span><span class=n>datetime</span><span class=p>(</span><span class=mi>2019</span><span class=p>,</span> <span class=mi>1</span><span class=p>,</span> <span class=mi>1</span><span class=p>,</span> <span class=mi>12</span><span class=p>),</span><span class=p>)</span><span class=n>dictionary</span> <span class=o>=</span> <span class=n>formats</span><span class=o>.</span><span class=n>to_dict</span><span class=p>()</span><span class=c1># {'short': '01012019120000', 'verbose': 'Tuesday January 01, 2019, 12:00:00'}</span><span class=k>assert</span> <span class=n>DateTimeFormats</span><span class=o>.</span><span class=n>from_dict</span><span class=p>(</span><span class=n>dictionary</span><span class=p>)</span> <span class=o>==</span> <span class=n>formats</span></pre><p>Similarly to <code>SerializableType</code>, <code>SerializationStrategy</code> could also take advantage of annotations:</p><pre lang=python3><span class=kn>from</span> <span class=nn>dataclasses</span> <span class=kn>import</span> <span class=n>dataclass</span><span class=kn>from</span> <span class=nn>datetime</span> <span class=kn>import</span> <span class=n>datetime</span><span class=kn>from</span> <span class=nn>mashumaro</span> <span class=kn>import</span> <span class=n>DataClassDictMixin</span><span class=kn>from</span> <span class=nn>mashumaro.types</span> <span class=kn>import</span> <span class=n>SerializationStrategy</span><span class=k>class</span> <span class=nc>TsSerializationStrategy</span><span class=p>(</span><span class=n>SerializationStrategy</span><span class=p>,</span> <span class=n>use_annotations</span><span class=o>=</span><span class=kc>True</span><span class=p>):</span>    <span class=k>def</span> <span class=nf>serialize</span><span class=p>(</span><span class=bp>self</span><span class=p>,</span> <span class=n>value</span><span class=p>:</span> <span class=n>datetime</span><span class=p>)</span> <span class=o>-&gt;</span> <span class=nb>float</span><span class=p>:</span>        <span class=k>return</span> <span class=n>value</span><span class=o>.</span><span class=n>timestamp</span><span class=p>()</span>    <span class=k>def</span> <span class=nf>deserialize</span><span class=p>(</span><span class=bp>self</span><span class=p>,</span> <span class=n>value</span><span class=p>:</span> <span class=nb>float</span><span class=p>)</span> <span class=o>-&gt;</span> <span class=n>datetime</span><span class=p>:</span>        <span class=c1># value will be converted to float before being passed to this method</span>        <span class=k>return</span> <span class=n>datetime</span><span class=o>.</span><span class=n>fromtimestamp</span><span class=p>(</span><span class=n>value</span><span class=p>)</span><span class=nd>@dataclass</span><span class=k>class</span> <span class=nc>Example</span><span class=p>(</span><span class=n>DataClassDictMixin</span><span class=p>):</span>    <span class=n>dt</span><span class=p>:</span> <span class=n>datetime</span>    <span class=k>class</span> <span class=nc>Config</span><span class=p>:</span>        <span class=n>serialization_strategy</span> <span class=o>=</span> <span class=p>{</span>            <span class=n>datetime</span><span class=p>:</span> <span class=n>TsSerializationStrategy</span><span class=p>(),</span>        <span class=p>}</span><span class=n>example</span> <span class=o>=</span> <span class=n>Example</span><span class=o>.</span><span class=n>from_dict</span><span class=p>({</span><span class=s2>\"dt\"</span><span class=p>:</span> <span class=s2>\"1672531200\"</span><span class=p>})</span><span class=nb>print</span><span class=p>(</span><span class=n>example</span><span class=p>)</span><span class=c1># Example(dt=datetime.datetime(2023, 1, 1, 3, 0))</span><span class=nb>print</span><span class=p>(</span><span class=n>example</span><span class=o>.</span><span class=n>to_dict</span><span class=p>())</span><span class=c1># {'dt': 1672531200.0}</span></pre><p>Here the passed string value <code>\"1672531200\"</code> will be converted to <code>float</code> before being passed to <code>deserialize</code> methodthanks to the <code>float</code> annotation.</p><blockquote><p>[!IMPORTANT]<br>As well as for <code>SerializableType</code>, the value of <code>use_annotatons</code> will be<code>True</code> by default in the future major release.</p></blockquote><h4>Third-party generic types</h4><p>To create a generic version of a serialization strategy you need to follow these steps:</p><ul><li>inherit <a href=\"https://docs.python.org/3/library/typing.html#typing.Generic\" rel=nofollow><code>Generic[...]</code></a> typewith the number of parameters matching the number of parametersof the target generic type</li><li>Write generic annotations for <code>serialize</code> method's return type and for <code>deserialize</code> method's argument type</li><li>Use the origin type of the target generic type in the <a href=#serialization_strategy-config-option rel=nofollow><code>serialization_strategy</code></a> config section(<a href=\"https://docs.python.org/3/library/typing.html#typing.get_origin\" rel=nofollow><code>typing.get_origin</code></a> might be helpful)</li></ul><p>There is no need to add <code>use_annotations=True</code> here because it's enabled implicitlyfor generic serialization strategies.</p><p>For example, there is a third-party <a href=\"https://pypi.org/project/multidict/\" rel=nofollow>multidict</a> package that has a generic <code>MultiDict</code> type.A generic serialization strategy for it might look like this:</p><pre lang=python3><span class=kn>from</span> <span class=nn>dataclasses</span> <span class=kn>import</span> <span class=n>dataclass</span><span class=kn>from</span> <span class=nn>datetime</span> <span class=kn>import</span> <span class=n>date</span><span class=kn>from</span> <span class=nn>pprint</span> <span class=kn>import</span> <span class=n>pprint</span><span class=kn>from</span> <span class=nn>typing</span> <span class=kn>import</span> <span class=n>Generic</span><span class=p>,</span> <span class=n>List</span><span class=p>,</span> <span class=n>Tuple</span><span class=p>,</span> <span class=n>TypeVar</span><span class=kn>from</span> <span class=nn>mashumaro</span> <span class=kn>import</span> <span class=n>DataClassDictMixin</span><span class=kn>from</span> <span class=nn>mashumaro.types</span> <span class=kn>import</span> <span class=n>SerializationStrategy</span><span class=kn>from</span> <span class=nn>multidict</span> <span class=kn>import</span> <span class=n>MultiDict</span><span class=n>T</span> <span class=o>=</span> <span class=n>TypeVar</span><span class=p>(</span><span class=s2>\"T\"</span><span class=p>)</span><span class=k>class</span> <span class=nc>MultiDictSerializationStrategy</span><span class=p>(</span><span class=n>SerializationStrategy</span><span class=p>,</span> <span class=n>Generic</span><span class=p>[</span><span class=n>T</span><span class=p>]):</span>    <span class=k>def</span> <span class=nf>serialize</span><span class=p>(</span><span class=bp>self</span><span class=p>,</span> <span class=n>value</span><span class=p>:</span> <span class=n>MultiDict</span><span class=p>[</span><span class=n>T</span><span class=p>])</span> <span class=o>-&gt;</span> <span class=n>List</span><span class=p>[</span><span class=n>Tuple</span><span class=p>[</span><span class=nb>str</span><span class=p>,</span> <span class=n>T</span><span class=p>]]:</span>        <span class=k>return</span> <span class=p>[(</span><span class=n>k</span><span class=p>,</span> <span class=n>v</span><span class=p>)</span> <span class=k>for</span> <span class=n>k</span><span class=p>,</span> <span class=n>v</span> <span class=ow>in</span> <span class=n>value</span><span class=o>.</span><span class=n>items</span><span class=p>()]</span>    <span class=k>def</span> <span class=nf>deserialize</span><span class=p>(</span><span class=bp>self</span><span class=p>,</span> <span class=n>value</span><span class=p>:</span> <span class=n>List</span><span class=p>[</span><span class=n>Tuple</span><span class=p>[</span><span class=nb>str</span><span class=p>,</span> <span class=n>T</span><span class=p>]])</span> <span class=o>-&gt;</span> <span class=n>MultiDict</span><span class=p>[</span><span class=n>T</span><span class=p>]:</span>        <span class=k>return</span> <span class=n>MultiDict</span><span class=p>(</span><span class=n>value</span><span class=p>)</span><span class=nd>@dataclass</span><span class=k>class</span> <span class=nc>Example</span><span class=p>(</span><span class=n>DataClassDictMixin</span><span class=p>):</span>    <span class=n>floats</span><span class=p>:</span> <span class=n>MultiDict</span><span class=p>[</span><span class=nb>float</span><span class=p>]</span>    <span class=n>date_lists</span><span class=p>:</span> <span class=n>MultiDict</span><span class=p>[</span><span class=n>List</span><span class=p>[</span><span class=n>date</span><span class=p>]]</span>    <span class=k>class</span> <span class=nc>Config</span><span class=p>:</span>        <span class=n>serialization_strategy</span> <span class=o>=</span> <span class=p>{</span>            <span class=n>MultiDict</span><span class=p>:</span> <span class=n>MultiDictSerializationStrategy</span><span class=p>()</span>        <span class=p>}</span><span class=n>example</span> <span class=o>=</span> <span class=n>Example</span><span class=p>(</span>    <span class=n>floats</span><span class=o>=</span><span class=n>MultiDict</span><span class=p>([(</span><span class=s2>\"x\"</span><span class=p>,</span> <span class=mf>1.1</span><span class=p>),</span> <span class=p>(</span><span class=s2>\"x\"</span><span class=p>,</span> <span class=mf>2.2</span><span class=p>)]),</span>    <span class=n>date_lists</span><span class=o>=</span><span class=n>MultiDict</span><span class=p>(</span>        <span class=p>[(</span><span class=s2>\"x\"</span><span class=p>,</span> <span class=p>[</span><span class=n>date</span><span class=p>(</span><span class=mi>2023</span><span class=p>,</span> <span class=mi>1</span><span class=p>,</span> <span class=mi>1</span><span class=p>),</span> <span class=n>date</span><span class=p>(</span><span class=mi>2023</span><span class=p>,</span> <span class=mi>1</span><span class=p>,</span> <span class=mi>2</span><span class=p>)]),</span>         <span class=p>(</span><span class=s2>\"x\"</span><span class=p>,</span> <span class=p>[</span><span class=n>date</span><span class=p>(</span><span class=mi>2023</span><span class=p>,</span> <span class=mi>2</span><span class=p>,</span> <span class=mi>1</span><span class=p>),</span> <span class=n>date</span><span class=p>(</span><span class=mi>2023</span><span class=p>,</span> <span class=mi>2</span><span class=p>,</span> <span class=mi>2</span><span class=p>)])]</span>    <span class=p>),</span><span class=p>)</span><span class=n>pprint</span><span class=p>(</span><span class=n>example</span><span class=o>.</span><span class=n>to_dict</span><span class=p>())</span><span class=c1># {'date_lists': [['x', ['2023-01-01', '2023-01-02']],</span><span class=c1>#                 ['x', ['2023-02-01', '2023-02-02']]],</span><span class=c1>#  'floats': [['x', 1.1], ['x', 2.2]]}</span><span class=k>assert</span> <span class=n>Example</span><span class=o>.</span><span class=n>from_dict</span><span class=p>(</span><span class=n>example</span><span class=o>.</span><span class=n>to_dict</span><span class=p>())</span> <span class=o>==</span> <span class=n>example</span></pre><h3>Field options</h3><p>In some cases creating a new class just for one little thing could beexcessive. Moreover, you may need to deal with third party classes that you arenot allowed to change. You can use <a href=\"https://docs.python.org/3/library/dataclasses.html#dataclasses.field\" rel=nofollow><code>dataclasses.field</code></a> function toconfigure some serialization aspects through its <code>metadata</code> parameter. Nextsection describes all supported options to use in <code>metadata</code> mapping.</p><p>If you don't want to remember the names of the options you can use<code>field_options</code> helper function:</p><pre lang=python3><span class=kn>from</span> <span class=nn>dataclasses</span> <span class=kn>import</span> <span class=n>dataclass</span><span class=p>,</span> <span class=n>field</span><span class=kn>from</span> <span class=nn>mashumaro</span> <span class=kn>import</span> <span class=n>field_options</span><span class=nd>@dataclass</span><span class=k>class</span> <span class=nc>A</span><span class=p>:</span>    <span class=n>x</span><span class=p>:</span> <span class=nb>int</span> <span class=o>=</span> <span class=n>field</span><span class=p>(</span><span class=n>metadata</span><span class=o>=</span><span class=n>field_options</span><span class=p>(</span><span class=o>...</span><span class=p>))</span></pre><h4><code>serialize</code> option</h4><p>This option allows you to change the serialization method. When usingthis option, the serialization behaviour depends on what type of value theoption has. It could be either <code>Callable[[Any], Any]</code> or <code>str</code>.</p><p>A value of type <code>Callable[[Any], Any]</code> is a generic way to specify any callableobject like a function, a class method, a class instance method, an instanceof a callable class or even a lambda function to be called for serialization.</p><p>A value of type <code>str</code> sets a specific engine for serialization. Keep in mindthat all possible engines depend on the data type that this option is usedwith. At this moment there are next serialization engines to choose from:</p><table><thead><tr><th align=left>Applicable data types</th><th align=left>Supported engines</th><th align=left>Description</th></tr></thead><tbody><tr><td align=left><code>NamedTuple</code>, <code>namedtuple</code></td><td align=left><code>as_list</code>, <code>as_dict</code></td><td align=left>How to pack named tuples. By default <code>as_list</code> engine is used that means your named tuple class instance will be packed into a list of its values. You can pack it into a dictionary using <code>as_dict</code> engine.</td></tr><tr><td align=left><code>Any</code></td><td align=left><code>omit</code></td><td align=left>Skip the field during serialization</td></tr></tbody></table><blockquote><p>[!TIP]<br>You can pass a field value as is without changes on serialization using<a href=#passing-field-values-as-is rel=nofollow><code>pass_through</code></a>.</p></blockquote><p>Example:</p><pre lang=python3><span class=kn>from</span> <span class=nn>datetime</span> <span class=kn>import</span> <span class=n>datetime</span><span class=kn>from</span> <span class=nn>dataclasses</span> <span class=kn>import</span> <span class=n>dataclass</span><span class=p>,</span> <span class=n>field</span><span class=kn>from</span> <span class=nn>typing</span> <span class=kn>import</span> <span class=n>NamedTuple</span><span class=kn>from</span> <span class=nn>mashumaro</span> <span class=kn>import</span> <span class=n>DataClassDictMixin</span><span class=k>class</span> <span class=nc>MyNamedTuple</span><span class=p>(</span><span class=n>NamedTuple</span><span class=p>):</span>    <span class=n>x</span><span class=p>:</span> <span class=nb>int</span>    <span class=n>y</span><span class=p>:</span> <span class=nb>float</span><span class=nd>@dataclass</span><span class=k>class</span> <span class=nc>A</span><span class=p>(</span><span class=n>DataClassDictMixin</span><span class=p>):</span>    <span class=n>dt</span><span class=p>:</span> <span class=n>datetime</span> <span class=o>=</span> <span class=n>field</span><span class=p>(</span>        <span class=n>metadata</span><span class=o>=</span><span class=p>{</span>            <span class=s2>\"serialize\"</span><span class=p>:</span> <span class=k>lambda</span> <span class=n>v</span><span class=p>:</span> <span class=n>v</span><span class=o>.</span><span class=n>strftime</span><span class=p>(</span><span class=s1>'%Y-%m-</span><span class=si>%d</span><span class=s1> %H:%M:%S'</span><span class=p>)</span>        <span class=p>}</span>    <span class=p>)</span>    <span class=n>t</span><span class=p>:</span> <span class=n>MyNamedTuple</span> <span class=o>=</span> <span class=n>field</span><span class=p>(</span><span class=n>metadata</span><span class=o>=</span><span class=p>{</span><span class=s2>\"serialize\"</span><span class=p>:</span> <span class=s2>\"as_dict\"</span><span class=p>})</span></pre><h4><code>deserialize</code> option</h4><p>This option allows you to change the deserialization method. When usingthis option, the deserialization behaviour depends on what type of value theoption has. It could be either <code>Callable[[Any], Any]</code> or <code>str</code>.</p><p>A value of type <code>Callable[[Any], Any]</code> is a generic way to specify any callableobject like a function, a class method, a class instance method, an instanceof a callable class or even a lambda function to be called for deserialization.</p><p>A value of type <code>str</code> sets a specific engine for deserialization. Keep in mindthat all possible engines depend on the data type that this option is usedwith. At this moment there are next deserialization engines to choose from:</p><table><thead><tr><th align=left>Applicable data types</th><th align=left>Supported engines</th><th align=left>Description</th></tr></thead><tbody><tr><td align=left><code>datetime</code>, <code>date</code>, <code>time</code></td><td align=left><a href=\"https://github.com/closeio/ciso8601#supported-subset-of-iso-8601\" rel=nofollow><code>ciso8601</code></a>, <a href=\"https://github.com/sdispater/pendulum\" rel=nofollow><code>pendulum</code></a></td><td align=left>How to parse datetime string. By default native <a href=\"https://docs.python.org/3/library/datetime.html#datetime.datetime.fromisoformat\" rel=nofollow><code>fromisoformat</code></a> of corresponding class will be used for <code>datetime</code>, <code>date</code> and <code>time</code> fields. It's the fastest way in most cases, but you can choose an alternative.</td></tr><tr><td align=left><code>NamedTuple</code>, <code>namedtuple</code></td><td align=left><code>as_list</code>, <code>as_dict</code></td><td align=left>How to unpack named tuples. By default <code>as_list</code> engine is used that means your named tuple class instance will be created from a list of its values. You can unpack it from a dictionary using <code>as_dict</code> engine.</td></tr></tbody></table><blockquote><p>[!TIP]<br>You can pass a field value as is without changes on deserialization using<a href=#passing-field-values-as-is rel=nofollow><code>pass_through</code></a>.</p></blockquote><p>Example:</p><pre lang=python3><span class=kn>from</span> <span class=nn>datetime</span> <span class=kn>import</span> <span class=n>datetime</span><span class=kn>from</span> <span class=nn>dataclasses</span> <span class=kn>import</span> <span class=n>dataclass</span><span class=p>,</span> <span class=n>field</span><span class=kn>from</span> <span class=nn>typing</span> <span class=kn>import</span> <span class=n>List</span><span class=p>,</span> <span class=n>NamedTuple</span><span class=kn>from</span> <span class=nn>mashumaro</span> <span class=kn>import</span> <span class=n>DataClassDictMixin</span><span class=kn>import</span> <span class=nn>ciso8601</span><span class=kn>import</span> <span class=nn>dateutil</span><span class=k>class</span> <span class=nc>MyNamedTuple</span><span class=p>(</span><span class=n>NamedTuple</span><span class=p>):</span>    <span class=n>x</span><span class=p>:</span> <span class=nb>int</span>    <span class=n>y</span><span class=p>:</span> <span class=nb>float</span><span class=nd>@dataclass</span><span class=k>class</span> <span class=nc>A</span><span class=p>(</span><span class=n>DataClassDictMixin</span><span class=p>):</span>    <span class=n>x</span><span class=p>:</span> <span class=n>datetime</span> <span class=o>=</span> <span class=n>field</span><span class=p>(</span>        <span class=n>metadata</span><span class=o>=</span><span class=p>{</span><span class=s2>\"deserialize\"</span><span class=p>:</span> <span class=s2>\"pendulum\"</span><span class=p>}</span>    <span class=p>)</span><span class=k>class</span> <span class=nc>B</span><span class=p>(</span><span class=n>DataClassDictMixin</span><span class=p>):</span>    <span class=n>x</span><span class=p>:</span> <span class=n>datetime</span> <span class=o>=</span> <span class=n>field</span><span class=p>(</span>        <span class=n>metadata</span><span class=o>=</span><span class=p>{</span><span class=s2>\"deserialize\"</span><span class=p>:</span> <span class=n>ciso8601</span><span class=o>.</span><span class=n>parse_datetime_as_naive</span><span class=p>}</span>    <span class=p>)</span><span class=nd>@dataclass</span><span class=k>class</span> <span class=nc>C</span><span class=p>(</span><span class=n>DataClassDictMixin</span><span class=p>):</span>    <span class=n>dt</span><span class=p>:</span> <span class=n>List</span><span class=p>[</span><span class=n>datetime</span><span class=p>]</span> <span class=o>=</span> <span class=n>field</span><span class=p>(</span>        <span class=n>metadata</span><span class=o>=</span><span class=p>{</span>            <span class=s2>\"deserialize\"</span><span class=p>:</span> <span class=k>lambda</span> <span class=n>l</span><span class=p>:</span> <span class=nb>list</span><span class=p>(</span><span class=nb>map</span><span class=p>(</span><span class=n>dateutil</span><span class=o>.</span><span class=n>parser</span><span class=o>.</span><span class=n>isoparse</span><span class=p>,</span> <span class=n>l</span><span class=p>))</span>        <span class=p>}</span>    <span class=p>)</span><span class=nd>@dataclass</span><span class=k>class</span> <span class=nc>D</span><span class=p>(</span><span class=n>DataClassDictMixin</span><span class=p>):</span>    <span class=n>x</span><span class=p>:</span> <span class=n>MyNamedTuple</span> <span class=o>=</span> <span class=n>field</span><span class=p>(</span><span class=n>metadata</span><span class=o>=</span><span class=p>{</span><span class=s2>\"deserialize\"</span><span class=p>:</span> <span class=s2>\"as_dict\"</span><span class=p>})</span></pre><h4><code>serialization_strategy</code> option</h4><p>This option is useful when you want to change the serialization logicfor a dataclass field depending on some defined parameters using a reusableserialization scheme. You can find an example in the<a href=#serializationstrategy rel=nofollow><code>SerializationStrategy</code></a> chapter.</p><blockquote><p>[!TIP]<br>You can pass a field value as is without changes onserialization / deserialization using<a href=#passing-field-values-as-is rel=nofollow><code>pass_through</code></a>.</p></blockquote><h4><code>alias</code> option</h4><p>In some cases it's better to have different names for a field in your class andin its serialized view. For example, a third-party legacy API you are workingwith might operate with camel case style, but you stick to snake case style inyour code base. Or even you want to load data with keys that are invalididentifiers in Python. This problem is easily solved by using aliases:</p><pre lang=python3><span class=kn>from</span> <span class=nn>dataclasses</span> <span class=kn>import</span> <span class=n>dataclass</span><span class=p>,</span> <span class=n>field</span><span class=kn>from</span> <span class=nn>mashumaro</span> <span class=kn>import</span> <span class=n>DataClassDictMixin</span><span class=p>,</span> <span class=n>field_options</span><span class=nd>@dataclass</span><span class=k>class</span> <span class=nc>DataClass</span><span class=p>(</span><span class=n>DataClassDictMixin</span><span class=p>):</span>    <span class=n>a</span><span class=p>:</span> <span class=nb>int</span> <span class=o>=</span> <span class=n>field</span><span class=p>(</span><span class=n>metadata</span><span class=o>=</span><span class=n>field_options</span><span class=p>(</span><span class=n>alias</span><span class=o>=</span><span class=s2>\"FieldA\"</span><span class=p>))</span>    <span class=n>b</span><span class=p>:</span> <span class=nb>int</span> <span class=o>=</span> <span class=n>field</span><span class=p>(</span><span class=n>metadata</span><span class=o>=</span><span class=n>field_options</span><span class=p>(</span><span class=n>alias</span><span class=o>=</span><span class=s2>\"#invalid\"</span><span class=p>))</span><span class=n>x</span> <span class=o>=</span> <span class=n>DataClass</span><span class=o>.</span><span class=n>from_dict</span><span class=p>({</span><span class=s2>\"FieldA\"</span><span class=p>:</span> <span class=mi>1</span><span class=p>,</span> <span class=s2>\"#invalid\"</span><span class=p>:</span> <span class=mi>2</span><span class=p>})</span>  <span class=c1># DataClass(a=1, b=2)</span><span class=n>x</span><span class=o>.</span><span class=n>to_dict</span><span class=p>()</span>  <span class=c1># {\"a\": 1, \"b\": 2}  # no aliases on serialization by default</span></pre><p>If you want to write all the field aliases in one place, there is<a href=#aliases-config-option rel=nofollow>a config option</a> for that.</p><p>If you want to deserialize all the fields by its names along with aliases,there is <a href=#allow_deserialization_not_by_alias-config-option rel=nofollow>a config option</a>for that.</p><p>If you want to serialize all the fields by aliases you have two options to do so:</p><ul><li><a href=#serialize_by_alias-config-option rel=nofollow><code>serialize_by_alias</code> config option</a></li><li><a href=#serialize_by_alias-dialect-option rel=nofollow><code>serialize_by_alias</code> dialect option</a></li><li><a href=#add-by_alias-keyword-argument rel=nofollow><code>by_alias</code> keyword argument in <code>to_*</code> methods</a></li></ul><p>It's hard to imagine when it might be necessary to serialize only specificfields by alias, but such functionality is easily added to the library. Openthe issue if you need it.</p><h3>Config options</h3><p>If inheritance is not an empty word for you, you'll fall in love with the<code>Config</code> class. You can register <code>serialize</code> and <code>deserialize</code> methods, definecode generation options and other things just in one place. Or in someclasses in different ways if you need flexibility. Inheritance is always on thefirst place.</p><p>There is a base class <code>BaseConfig</code> that you can inherit for the sake ofconvenience, but it's not mandatory.</p><p>In the following example you can see howthe <code>debug</code> flag is changed from class to class: <code>ModelA</code> will have debug mode enabled but<code>ModelB</code> will not.</p><pre lang=python3><span class=kn>from</span> <span class=nn>mashumaro</span> <span class=kn>import</span> <span class=n>DataClassDictMixin</span><span class=kn>from</span> <span class=nn>mashumaro.config</span> <span class=kn>import</span> <span class=n>BaseConfig</span><span class=k>class</span> <span class=nc>BaseModel</span><span class=p>(</span><span class=n>DataClassDictMixin</span><span class=p>):</span>    <span class=k>class</span> <span class=nc>Config</span><span class=p>(</span><span class=n>BaseConfig</span><span class=p>):</span>        <span class=n>debug</span> <span class=o>=</span> <span class=kc>True</span><span class=k>class</span> <span class=nc>ModelA</span><span class=p>(</span><span class=n>BaseModel</span><span class=p>):</span>    <span class=n>a</span><span class=p>:</span> <span class=nb>int</span><span class=k>class</span> <span class=nc>ModelB</span><span class=p>(</span><span class=n>BaseModel</span><span class=p>):</span>    <span class=n>b</span><span class=p>:</span> <span class=nb>int</span>    <span class=k>class</span> <span class=nc>Config</span><span class=p>(</span><span class=n>BaseConfig</span><span class=p>):</span>        <span class=n>debug</span> <span class=o>=</span> <span class=kc>False</span></pre><p>Next section describes all supported options to use in the config.</p><h4><code>debug</code> config option</h4><p>If you enable the <code>debug</code> option the generated code for your data classwill be printed.</p><h4><code>code_generation_options</code> config option</h4><p>Some users may need functionality that wouldn't exist without extra cost suchas valuable cpu time to execute additional instructions. Since not everyoneneeds such instructions, they can be enabled by a constant in the list,so the fastest basic behavior of the library will always remain by default.The following table provides a brief overview of all the available constantsdescribed below.</p><table><thead><tr><th align=left>Constant</th><th align=left>Description</th></tr></thead><tbody><tr><td align=left><a href=#add-omit_none-keyword-argument rel=nofollow><code>TO_DICT_ADD_OMIT_NONE_FLAG</code></a></td><td align=left>Adds <code>omit_none</code> keyword-only argument to <code>to_*</code> methods.</td></tr><tr><td align=left><a href=#add-by_alias-keyword-argument rel=nofollow><code>TO_DICT_ADD_BY_ALIAS_FLAG</code></a></td><td align=left>Adds <code>by_alias</code> keyword-only argument to <code>to_*</code> methods.</td></tr><tr><td align=left><a href=#add-dialect-keyword-argument rel=nofollow><code>ADD_DIALECT_SUPPORT</code></a></td><td align=left>Adds <code>dialect</code> keyword-only argument to <code>from_*</code> and <code>to_*</code> methods.</td></tr><tr><td align=left><a href=#add-context-keyword-argument rel=nofollow><code>ADD_SERIALIZATION_CONTEXT</code></a></td><td align=left>Adds <code>context</code> keyword-only argument to <code>to_*</code> methods.</td></tr></tbody></table><h4><code>serialization_strategy</code> config option</h4><p>You can register custom <a href=#serializationstrategy rel=nofollow><code>SerializationStrategy</code></a>, <code>serialize</code> and <code>deserialize</code>methods for specific types just in one place. It could be configured usinga dictionary with types as keys. The value could be either a<a href=#serializationstrategy rel=nofollow><code>SerializationStrategy</code></a> instance or a dictionary with <code>serialize</code> and<code>deserialize</code> values with the same meaning as in the<a href=#field-options rel=nofollow>field options</a>.</p><pre lang=python3><span class=kn>from</span> <span class=nn>dataclasses</span> <span class=kn>import</span> <span class=n>dataclass</span><span class=kn>from</span> <span class=nn>datetime</span> <span class=kn>import</span> <span class=n>datetime</span><span class=p>,</span> <span class=n>date</span><span class=kn>from</span> <span class=nn>mashumaro</span> <span class=kn>import</span> <span class=n>DataClassDictMixin</span><span class=kn>from</span> <span class=nn>mashumaro.config</span> <span class=kn>import</span> <span class=n>BaseConfig</span><span class=kn>from</span> <span class=nn>mashumaro.types</span> <span class=kn>import</span> <span class=n>SerializationStrategy</span><span class=k>class</span> <span class=nc>FormattedDateTime</span><span class=p>(</span><span class=n>SerializationStrategy</span><span class=p>):</span>    <span class=k>def</span> <span class=fm>__init__</span><span class=p>(</span><span class=bp>self</span><span class=p>,</span> <span class=n>fmt</span><span class=p>):</span>        <span class=bp>self</span><span class=o>.</span><span class=n>fmt</span> <span class=o>=</span> <span class=n>fmt</span>    <span class=k>def</span> <span class=nf>serialize</span><span class=p>(</span><span class=bp>self</span><span class=p>,</span> <span class=n>value</span><span class=p>:</span> <span class=n>datetime</span><span class=p>)</span> <span class=o>-&gt;</span> <span class=nb>str</span><span class=p>:</span>        <span class=k>return</span> <span class=n>value</span><span class=o>.</span><span class=n>strftime</span><span class=p>(</span><span class=bp>self</span><span class=o>.</span><span class=n>fmt</span><span class=p>)</span>    <span class=k>def</span> <span class=nf>deserialize</span><span class=p>(</span><span class=bp>self</span><span class=p>,</span> <span class=n>value</span><span class=p>:</span> <span class=nb>str</span><span class=p>)</span> <span class=o>-&gt;</span> <span class=n>datetime</span><span class=p>:</span>        <span class=k>return</span> <span class=n>datetime</span><span class=o>.</span><span class=n>strptime</span><span class=p>(</span><span class=n>value</span><span class=p>,</span> <span class=bp>self</span><span class=o>.</span><span class=n>fmt</span><span class=p>)</span><span class=nd>@dataclass</span><span class=k>class</span> <span class=nc>DataClass</span><span class=p>(</span><span class=n>DataClassDictMixin</span><span class=p>):</span>    <span class=n>x</span><span class=p>:</span> <span class=n>datetime</span>    <span class=n>y</span><span class=p>:</span> <span class=n>date</span>    <span class=k>class</span> <span class=nc>Config</span><span class=p>(</span><span class=n>BaseConfig</span><span class=p>):</span>        <span class=n>serialization_strategy</span> <span class=o>=</span> <span class=p>{</span>            <span class=n>datetime</span><span class=p>:</span> <span class=n>FormattedDateTime</span><span class=p>(</span><span class=s2>\"%Y\"</span><span class=p>),</span>            <span class=n>date</span><span class=p>:</span> <span class=p>{</span>                <span class=c1># you can use specific str values for datetime here as well</span>                <span class=s2>\"deserialize\"</span><span class=p>:</span> <span class=s2>\"pendulum\"</span><span class=p>,</span>                <span class=s2>\"serialize\"</span><span class=p>:</span> <span class=n>date</span><span class=o>.</span><span class=n>isoformat</span><span class=p>,</span>            <span class=p>},</span>        <span class=p>}</span><span class=n>instance</span> <span class=o>=</span> <span class=n>DataClass</span><span class=o>.</span><span class=n>from_dict</span><span class=p>({</span><span class=s2>\"x\"</span><span class=p>:</span> <span class=s2>\"2021\"</span><span class=p>,</span> <span class=s2>\"y\"</span><span class=p>:</span> <span class=s2>\"2021\"</span><span class=p>})</span><span class=c1># DataClass(x=datetime.datetime(2021, 1, 1, 0, 0), y=Date(2021, 1, 1))</span><span class=n>dictionary</span> <span class=o>=</span> <span class=n>instance</span><span class=o>.</span><span class=n>to_dict</span><span class=p>()</span><span class=c1># {'x': '2021', 'y': '2021-01-01'}</span></pre><p>Note that you can register different methods for multiple logical types whichare based on the same type using <code>NewType</code> and <code>Annotated</code>,see <a href=#extending-existing-types rel=nofollow>Extending existing types</a> for details.</p><p>It's also possible to define a generic (de)serialization method for a generictype by registering a method for its<a href=\"https://docs.python.org/3/library/typing.html#typing.get_origin\" rel=nofollow>origin</a> type.Although this technique is widely used when working with <a href=#third-party-generic-types rel=nofollow>third-party generictypes</a> using generic strategies, it can also beapplied in simple scenarios:</p><pre lang=python3><span class=kn>from</span> <span class=nn>dataclasses</span> <span class=kn>import</span> <span class=n>dataclass</span><span class=kn>from</span> <span class=nn>mashumaro</span> <span class=kn>import</span> <span class=n>DataClassDictMixin</span><span class=nd>@dataclass</span><span class=k>class</span> <span class=nc>C</span><span class=p>(</span><span class=n>DataClassDictMixin</span><span class=p>):</span>    <span class=n>ints</span><span class=p>:</span> <span class=nb>list</span><span class=p>[</span><span class=nb>int</span><span class=p>]</span>    <span class=n>floats</span><span class=p>:</span> <span class=nb>list</span><span class=p>[</span><span class=nb>float</span><span class=p>]</span>    <span class=k>class</span> <span class=nc>Config</span><span class=p>:</span>        <span class=n>serialization_strategy</span> <span class=o>=</span> <span class=p>{</span>            <span class=nb>list</span><span class=p>:</span> <span class=p>{</span>  <span class=c1># origin type for list[int] and list[float] is list</span>                <span class=s2>\"serialize\"</span><span class=p>:</span> <span class=k>lambda</span> <span class=n>x</span><span class=p>:</span> <span class=nb>list</span><span class=p>(</span><span class=nb>map</span><span class=p>(</span><span class=nb>str</span><span class=p>,</span> <span class=n>x</span><span class=p>)),</span>            <span class=p>}</span>        <span class=p>}</span><span class=k>assert</span> <span class=n>C</span><span class=p>([</span><span class=mi>1</span><span class=p>],</span> <span class=p>[</span><span class=mf>2.2</span><span class=p>])</span><span class=o>.</span><span class=n>to_dict</span><span class=p>()</span> <span class=o>==</span> <span class=p>{</span><span class=s1>'ints'</span><span class=p>:</span> <span class=p>[</span><span class=s1>'1'</span><span class=p>],</span> <span class=s1>'floats'</span><span class=p>:</span> <span class=p>[</span><span class=s1>'2.2'</span><span class=p>]}</span></pre><h4><code>aliases</code> config option</h4><p>Sometimes it's better to write the field aliases in one place. You can mixaliases here with <a href=#alias-option rel=nofollow>aliases in the field options</a>, but the last ones will alwaystake precedence.</p><pre lang=python3><span class=kn>from</span> <span class=nn>dataclasses</span> <span class=kn>import</span> <span class=n>dataclass</span><span class=kn>from</span> <span class=nn>mashumaro</span> <span class=kn>import</span> <span class=n>DataClassDictMixin</span><span class=kn>from</span> <span class=nn>mashumaro.config</span> <span class=kn>import</span> <span class=n>BaseConfig</span><span class=nd>@dataclass</span><span class=k>class</span> <span class=nc>DataClass</span><span class=p>(</span><span class=n>DataClassDictMixin</span><span class=p>):</span>    <span class=n>a</span><span class=p>:</span> <span class=nb>int</span>    <span class=n>b</span><span class=p>:</span> <span class=nb>int</span>    <span class=k>class</span> <span class=nc>Config</span><span class=p>(</span><span class=n>BaseConfig</span><span class=p>):</span>        <span class=n>aliases</span> <span class=o>=</span> <span class=p>{</span>            <span class=s2>\"a\"</span><span class=p>:</span> <span class=s2>\"FieldA\"</span><span class=p>,</span>            <span class=s2>\"b\"</span><span class=p>:</span> <span class=s2>\"FieldB\"</span><span class=p>,</span>        <span class=p>}</span><span class=n>DataClass</span><span class=o>.</span><span class=n>from_dict</span><span class=p>({</span><span class=s2>\"FieldA\"</span><span class=p>:</span> <span class=mi>1</span><span class=p>,</span> <span class=s2>\"FieldB\"</span><span class=p>:</span> <span class=mi>2</span><span class=p>})</span>  <span class=c1># DataClass(a=1, b=2)</span></pre><h4><code>serialize_by_alias</code> config option</h4><p>All the fields with <a href=#alias-option rel=nofollow>aliases</a> will be serialized by them bydefault when this option is enabled. You can mix this config option with<a href=#add-by_alias-keyword-argument rel=nofollow><code>by_alias</code></a> keyword argument.</p><pre lang=python3><span class=kn>from</span> <span class=nn>dataclasses</span> <span class=kn>import</span> <span class=n>dataclass</span><span class=p>,</span> <span class=n>field</span><span class=kn>from</span> <span class=nn>mashumaro</span> <span class=kn>import</span> <span class=n>DataClassDictMixin</span><span class=p>,</span> <span class=n>field_options</span><span class=kn>from</span> <span class=nn>mashumaro.config</span> <span class=kn>import</span> <span class=n>BaseConfig</span><span class=nd>@dataclass</span><span class=k>class</span> <span class=nc>DataClass</span><span class=p>(</span><span class=n>DataClassDictMixin</span><span class=p>):</span>    <span class=n>field_a</span><span class=p>:</span> <span class=nb>int</span> <span class=o>=</span> <span class=n>field</span><span class=p>(</span><span class=n>metadata</span><span class=o>=</span><span class=n>field_options</span><span class=p>(</span><span class=n>alias</span><span class=o>=</span><span class=s2>\"FieldA\"</span><span class=p>))</span>    <span class=k>class</span> <span class=nc>Config</span><span class=p>(</span><span class=n>BaseConfig</span><span class=p>):</span>        <span class=n>serialize_by_alias</span> <span class=o>=</span> <span class=kc>True</span><span class=n>DataClass</span><span class=p>(</span><span class=n>field_a</span><span class=o>=</span><span class=mi>1</span><span class=p>)</span><span class=o>.</span><span class=n>to_dict</span><span class=p>()</span>  <span class=c1># {'FieldA': 1}</span></pre><h4><code>allow_deserialization_not_by_alias</code> config option</h4><p>When using aliases, the deserializer defaults to requiring the keys to matchwhat is defined as the alias.If the flexibility to deserialize aliased and unaliased keys is required thenthe config option <code>allow_deserialization_not_by_alias </code> can be set toenable the feature.</p><pre lang=python3><span class=kn>from</span> <span class=nn>dataclasses</span> <span class=kn>import</span> <span class=n>dataclass</span><span class=p>,</span> <span class=n>field</span><span class=kn>from</span> <span class=nn>mashumaro</span> <span class=kn>import</span> <span class=n>DataClassDictMixin</span><span class=kn>from</span> <span class=nn>mashumaro.config</span> <span class=kn>import</span> <span class=n>BaseConfig</span><span class=nd>@dataclass</span><span class=k>class</span> <span class=nc>AliasedDataClass</span><span class=p>(</span><span class=n>DataClassDictMixin</span><span class=p>):</span>    <span class=n>foo</span><span class=p>:</span> <span class=nb>int</span> <span class=o>=</span> <span class=n>field</span><span class=p>(</span><span class=n>metadata</span><span class=o>=</span><span class=p>{</span><span class=s2>\"alias\"</span><span class=p>:</span> <span class=s2>\"alias_foo\"</span><span class=p>})</span>    <span class=n>bar</span><span class=p>:</span> <span class=nb>int</span> <span class=o>=</span> <span class=n>field</span><span class=p>(</span><span class=n>metadata</span><span class=o>=</span><span class=p>{</span><span class=s2>\"alias\"</span><span class=p>:</span> <span class=s2>\"alias_bar\"</span><span class=p>})</span>    <span class=k>class</span> <span class=nc>Config</span><span class=p>(</span><span class=n>BaseConfig</span><span class=p>):</span>        <span class=n>allow_deserialization_not_by_alias</span> <span class=o>=</span> <span class=kc>True</span><span class=n>alias_dict</span> <span class=o>=</span> <span class=p>{</span><span class=s2>\"alias_foo\"</span><span class=p>:</span> <span class=mi>1</span><span class=p>,</span> <span class=s2>\"alias_bar\"</span><span class=p>:</span> <span class=mi>2</span><span class=p>}</span><span class=n>t1</span> <span class=o>=</span> <span class=n>AliasedDataClass</span><span class=o>.</span><span class=n>from_dict</span><span class=p>(</span><span class=n>alias_dict</span><span class=p>)</span><span class=n>no_alias_dict</span> <span class=o>=</span> <span class=p>{</span><span class=s2>\"foo\"</span><span class=p>:</span> <span class=mi>1</span><span class=p>,</span> <span class=s2>\"bar\"</span><span class=p>:</span> <span class=mi>2</span><span class=p>}</span><span class=c1># This would raise `mashumaro.exceptions.MissingField`</span><span class=c1># if allow_deserialization_not_by_alias was False</span><span class=n>t2</span> <span class=o>=</span> <span class=n>AliasedDataClass</span><span class=o>.</span><span class=n>from_dict</span><span class=p>(</span><span class=n>no_alias_dict</span><span class=p>)</span><span class=k>assert</span> <span class=n>t1</span> <span class=o>==</span> <span class=n>t2</span></pre><h4><code>omit_none</code> config option</h4><p>All the fields with <code>None</code> values will be skipped during serialization bydefault when this option is enabled. You can mix this config option with<a href=#add-omit_none-keyword-argument rel=nofollow><code>omit_none</code></a> keyword argument.</p><pre lang=python3><span class=kn>from</span> <span class=nn>dataclasses</span> <span class=kn>import</span> <span class=n>dataclass</span><span class=kn>from</span> <span class=nn>typing</span> <span class=kn>import</span> <span class=n>Optional</span><span class=kn>from</span> <span class=nn>mashumaro</span> <span class=kn>import</span> <span class=n>DataClassDictMixin</span><span class=kn>from</span> <span class=nn>mashumaro.config</span> <span class=kn>import</span> <span class=n>BaseConfig</span><span class=nd>@dataclass</span><span class=k>class</span> <span class=nc>DataClass</span><span class=p>(</span><span class=n>DataClassDictMixin</span><span class=p>):</span>    <span class=n>x</span><span class=p>:</span> <span class=n>Optional</span><span class=p>[</span><span class=nb>int</span><span class=p>]</span> <span class=o>=</span> <span class=mi>42</span>    <span class=k>class</span> <span class=nc>Config</span><span class=p>(</span><span class=n>BaseConfig</span><span class=p>):</span>        <span class=n>omit_none</span> <span class=o>=</span> <span class=kc>True</span><span class=n>DataClass</span><span class=p>(</span><span class=n>x</span><span class=o>=</span><span class=kc>None</span><span class=p>)</span><span class=o>.</span><span class=n>to_dict</span><span class=p>()</span>  <span class=c1># {}</span></pre><h4><code>omit_default</code> config option</h4><p>When this option enabled, all the fields that have values equal to the defaultsor the default_factory results will be skipped during serialization.</p><pre lang=python3><span class=kn>from</span> <span class=nn>dataclasses</span> <span class=kn>import</span> <span class=n>dataclass</span><span class=p>,</span> <span class=n>field</span><span class=kn>from</span> <span class=nn>typing</span> <span class=kn>import</span> <span class=n>List</span><span class=p>,</span> <span class=n>Optional</span><span class=p>,</span> <span class=n>Tuple</span><span class=kn>from</span> <span class=nn>mashumaro</span> <span class=kn>import</span> <span class=n>DataClassDictMixin</span><span class=p>,</span> <span class=n>field_options</span><span class=kn>from</span> <span class=nn>mashumaro.config</span> <span class=kn>import</span> <span class=n>BaseConfig</span><span class=nd>@dataclass</span><span class=k>class</span> <span class=nc>Foo</span><span class=p>:</span>    <span class=n>foo</span><span class=p>:</span> <span class=nb>str</span><span class=nd>@dataclass</span><span class=k>class</span> <span class=nc>DataClass</span><span class=p>(</span><span class=n>DataClassDictMixin</span><span class=p>):</span>    <span class=n>a</span><span class=p>:</span> <span class=nb>int</span> <span class=o>=</span> <span class=mi>42</span>    <span class=n>b</span><span class=p>:</span> <span class=n>Tuple</span><span class=p>[</span><span class=nb>int</span><span class=p>,</span> <span class=o>...</span><span class=p>]</span> <span class=o>=</span> <span class=n>field</span><span class=p>(</span><span class=n>default</span><span class=o>=</span><span class=p>(</span><span class=mi>1</span><span class=p>,</span> <span class=mi>2</span><span class=p>,</span> <span class=mi>3</span><span class=p>))</span>    <span class=n>c</span><span class=p>:</span> <span class=n>List</span><span class=p>[</span><span class=n>Foo</span><span class=p>]</span> <span class=o>=</span> <span class=n>field</span><span class=p>(</span><span class=n>default_factory</span><span class=o>=</span><span class=k>lambda</span><span class=p>:</span> <span class=p>[</span><span class=n>Foo</span><span class=p>(</span><span class=s2>\"foo\"</span><span class=p>)])</span>    <span class=n>d</span><span class=p>:</span> <span class=n>Optional</span><span class=p>[</span><span class=nb>str</span><span class=p>]</span> <span class=o>=</span> <span class=kc>None</span>    <span class=k>class</span> <span class=nc>Config</span><span class=p>(</span><span class=n>BaseConfig</span><span class=p>):</span>        <span class=n>omit_default</span> <span class=o>=</span> <span class=kc>True</span><span class=n>DataClass</span><span class=p>(</span><span class=n>a</span><span class=o>=</span><span class=mi>42</span><span class=p>,</span> <span class=n>b</span><span class=o>=</span><span class=p>(</span><span class=mi>1</span><span class=p>,</span> <span class=mi>2</span><span class=p>,</span> <span class=mi>3</span><span class=p>),</span> <span class=n>c</span><span class=o>=</span><span class=p>[</span><span class=n>Foo</span><span class=p>(</span><span class=s2>\"foo\"</span><span class=p>)])</span><span class=o>.</span><span class=n>to_dict</span><span class=p>()</span>  <span class=c1># {}</span></pre><h4><code>namedtuple_as_dict</code> config option</h4><p>Dataclasses are a great way to declare and use data models. But it's not the only way.Python has a typed version of <a href=\"https://docs.python.org/3/library/collections.html#collections.namedtuple\" rel=nofollow>namedtuple</a>called <a href=\"https://docs.python.org/3/library/typing.html#typing.NamedTuple\" rel=nofollow>NamedTuple</a>which looks similar to dataclasses:</p><pre lang=python3><span class=kn>from</span> <span class=nn>typing</span> <span class=kn>import</span> <span class=n>NamedTuple</span><span class=k>class</span> <span class=nc>Point</span><span class=p>(</span><span class=n>NamedTuple</span><span class=p>):</span>    <span class=n>x</span><span class=p>:</span> <span class=nb>int</span>    <span class=n>y</span><span class=p>:</span> <span class=nb>int</span></pre><p>the same with a dataclass will look like this:</p><pre lang=python3><span class=kn>from</span> <span class=nn>dataclasses</span> <span class=kn>import</span> <span class=n>dataclass</span><span class=nd>@dataclass</span><span class=k>class</span> <span class=nc>Point</span><span class=p>:</span>    <span class=n>x</span><span class=p>:</span> <span class=nb>int</span>    <span class=n>y</span><span class=p>:</span> <span class=nb>int</span></pre><p>At first glance, you can use both options. But imagine that you need to createa bunch of instances of the <code>Point</code> class. Due to how dataclasses work you willhave more memory consumption compared to named tuples. In such a case it couldbe more appropriate to use named tuples.</p><p>By default, all named tuples are packed into lists. But with <code>namedtuple_as_dict</code>option you have a drop-in replacement for dataclasses:</p><pre lang=python3><span class=kn>from</span> <span class=nn>dataclasses</span> <span class=kn>import</span> <span class=n>dataclass</span><span class=kn>from</span> <span class=nn>typing</span> <span class=kn>import</span> <span class=n>List</span><span class=p>,</span> <span class=n>NamedTuple</span><span class=kn>from</span> <span class=nn>mashumaro</span> <span class=kn>import</span> <span class=n>DataClassDictMixin</span><span class=k>class</span> <span class=nc>Point</span><span class=p>(</span><span class=n>NamedTuple</span><span class=p>):</span>    <span class=n>x</span><span class=p>:</span> <span class=nb>int</span>    <span class=n>y</span><span class=p>:</span> <span class=nb>int</span><span class=nd>@dataclass</span><span class=k>class</span> <span class=nc>DataClass</span><span class=p>(</span><span class=n>DataClassDictMixin</span><span class=p>):</span>    <span class=n>points</span><span class=p>:</span> <span class=n>List</span><span class=p>[</span><span class=n>Point</span><span class=p>]</span>    <span class=k>class</span> <span class=nc>Config</span><span class=p>:</span>        <span class=n>namedtuple_as_dict</span> <span class=o>=</span> <span class=kc>True</span><span class=n>obj</span> <span class=o>=</span> <span class=n>DataClass</span><span class=o>.</span><span class=n>from_dict</span><span class=p>({</span><span class=s2>\"points\"</span><span class=p>:</span> <span class=p>[{</span><span class=s2>\"x\"</span><span class=p>:</span> <span class=mi>0</span><span class=p>,</span> <span class=s2>\"y\"</span><span class=p>:</span> <span class=mi>0</span><span class=p>},</span> <span class=p>{</span><span class=s2>\"x\"</span><span class=p>:</span> <span class=mi>1</span><span class=p>,</span> <span class=s2>\"y\"</span><span class=p>:</span> <span class=mi>1</span><span class=p>}]})</span><span class=nb>print</span><span class=p>(</span><span class=n>obj</span><span class=o>.</span><span class=n>to_dict</span><span class=p>())</span>  <span class=c1># {\"points\": [{\"x\": 0, \"y\": 0}, {\"x\": 1, \"y\": 1}]}</span></pre><p>If you want to serialize only certain named tuple fields as dictionaries, youcan use the corresponding <a href=#serialize-option rel=nofollow>serialization</a> and<a href=#deserialize-option rel=nofollow>deserialization</a> engines.</p><h4><code>allow_postponed_evaluation</code> config option</h4><p><a href=\"https://www.python.org/dev/peps/pep-0563/\" rel=nofollow>PEP 563</a> solved the problem of forward references by postponing the evaluationof annotations, so you can write the following code:</p><pre lang=python3><span class=kn>from</span> <span class=nn>__future__</span> <span class=kn>import</span> <span class=n>annotations</span><span class=kn>from</span> <span class=nn>dataclasses</span> <span class=kn>import</span> <span class=n>dataclass</span><span class=kn>from</span> <span class=nn>mashumaro</span> <span class=kn>import</span> <span class=n>DataClassDictMixin</span><span class=nd>@dataclass</span><span class=k>class</span> <span class=nc>A</span><span class=p>(</span><span class=n>DataClassDictMixin</span><span class=p>):</span>    <span class=n>x</span><span class=p>:</span> <span class=n>B</span><span class=nd>@dataclass</span><span class=k>class</span> <span class=nc>B</span><span class=p>(</span><span class=n>DataClassDictMixin</span><span class=p>):</span>    <span class=n>y</span><span class=p>:</span> <span class=nb>int</span><span class=n>obj</span> <span class=o>=</span> <span class=n>A</span><span class=o>.</span><span class=n>from_dict</span><span class=p>({</span><span class=s1>'x'</span><span class=p>:</span> <span class=p>{</span><span class=s1>'y'</span><span class=p>:</span> <span class=mi>1</span><span class=p>}})</span></pre><p>You don't need to write anything special here, forward references work out ofthe box. If a field of a dataclass has a forward reference in the typeannotations, building of <code>from_*</code> and <code>to_*</code> methods of this dataclasswill be postponed until they are called once. However, if for some reason youdon't want the evaluation to be possibly postponed, you can disable it using<code>allow_postponed_evaluation</code> option:</p><pre lang=python3><span class=kn>from</span> <span class=nn>__future__</span> <span class=kn>import</span> <span class=n>annotations</span><span class=kn>from</span> <span class=nn>dataclasses</span> <span class=kn>import</span> <span class=n>dataclass</span><span class=kn>from</span> <span class=nn>mashumaro</span> <span class=kn>import</span> <span class=n>DataClassDictMixin</span><span class=nd>@dataclass</span><span class=k>class</span> <span class=nc>A</span><span class=p>(</span><span class=n>DataClassDictMixin</span><span class=p>):</span>    <span class=n>x</span><span class=p>:</span> <span class=n>B</span>    <span class=k>class</span> <span class=nc>Config</span><span class=p>:</span>        <span class=n>allow_postponed_evaluation</span> <span class=o>=</span> <span class=kc>False</span><span class=c1># UnresolvedTypeReferenceError: Class A has unresolved type reference B</span><span class=c1># in some of its fields</span><span class=nd>@dataclass</span><span class=k>class</span> <span class=nc>B</span><span class=p>(</span><span class=n>DataClassDictMixin</span><span class=p>):</span>    <span class=n>y</span><span class=p>:</span> <span class=nb>int</span></pre><p>In this case you will get <code>UnresolvedTypeReferenceError</code> regardless of whetherclass B is declared below or not.</p><h4><code>dialect</code> config option</h4><p>This option is described <a href=#changing-the-default-dialect rel=nofollow>below</a> in theDialects section.</p><h4><code>orjson_options</code> config option</h4><p>This option changes default options for <code>orjson.dumps</code> encoder which isused in <a href=#dataclassorjsonmixin rel=nofollow><code>DataClassORJSONMixin</code></a>. For example, you cantell orjson to handle non-<code>str</code> <code>dict</code> keys as the built-in <code>json.dumps</code>encoder does. See <a href=\"https://github.com/ijl/orjson#option\" rel=nofollow>orjson documentation</a>to read more about these options.</p><pre lang=python3><span class=kn>import</span> <span class=nn>orjson</span><span class=kn>from</span> <span class=nn>dataclasses</span> <span class=kn>import</span> <span class=n>dataclass</span><span class=kn>from</span> <span class=nn>typing</span> <span class=kn>import</span> <span class=n>Dict</span><span class=kn>from</span> <span class=nn>mashumaro.config</span> <span class=kn>import</span> <span class=n>BaseConfig</span><span class=kn>from</span> <span class=nn>mashumaro.mixins.orjson</span> <span class=kn>import</span> <span class=n>DataClassORJSONMixin</span><span class=nd>@dataclass</span><span class=k>class</span> <span class=nc>MyClass</span><span class=p>(</span><span class=n>DataClassORJSONMixin</span><span class=p>):</span>    <span class=n>x</span><span class=p>:</span> <span class=n>Dict</span><span class=p>[</span><span class=nb>int</span><span class=p>,</span> <span class=nb>int</span><span class=p>]</span>    <span class=k>class</span> <span class=nc>Config</span><span class=p>(</span><span class=n>BaseConfig</span><span class=p>):</span>        <span class=n>orjson_options</span> <span class=o>=</span> <span class=n>orjson</span><span class=o>.</span><span class=n>OPT_NON_STR_KEYS</span><span class=k>assert</span> <span class=n>MyClass</span><span class=p>({</span><span class=mi>1</span><span class=p>:</span> <span class=mi>2</span><span class=p>})</span><span class=o>.</span><span class=n>to_json</span><span class=p>()</span> <span class=o>==</span> <span class=p>{</span><span class=s2>\"1\"</span><span class=p>:</span> <span class=mi>2</span><span class=p>}</span></pre><h4><code>discriminator</code> config option</h4><p>This option is described in the<a href=#class-level-discriminator rel=nofollow>Class level discriminator</a> section.</p><h4><code>lazy_compilation</code> config option</h4><p>By using this option, the compilation of the <code>from_*</code> and <code>to_*</code> methods willbe deferred until they are called first time. This will reduce the import timeand, in certain instances, may enhance the speed of deserializationby leveraging the data that is accessible after the class has been created.</p><blockquote><p>[!CAUTION]<br>If you need to save a reference to <code>from_*</code> or <code>to_*</code> method, you shoulddo it after the method is compiled. To be safe, you can always use lambdafunction:</p><pre lang=python3><span class=n>from_dict</span> <span class=o>=</span> <span class=k>lambda</span> <span class=n>x</span><span class=p>:</span> <span class=n>MyModel</span><span class=o>.</span><span class=n>from_dict</span><span class=p>(</span><span class=n>x</span><span class=p>)</span><span class=n>to_dict</span> <span class=o>=</span> <span class=k>lambda</span> <span class=n>x</span><span class=p>:</span> <span class=n>x</span><span class=o>.</span><span class=n>to_dict</span><span class=p>()</span></pre></blockquote><h4><code>sort_keys</code> config option</h4><p>When set, the keys on serialized dataclasses will be sorted in alphabetical order.</p><p>Unlike the <code>sort_keys</code> option in the standard library's <code>json.dumps</code> function, this option acts at class creation time and has no effect on the performance of serialization.</p><pre lang=python3><span class=kn>from</span> <span class=nn>dataclasses</span> <span class=kn>import</span> <span class=n>dataclass</span><span class=kn>from</span> <span class=nn>mashumaro</span> <span class=kn>import</span> <span class=n>DataClassDictMixin</span><span class=kn>from</span> <span class=nn>mashumaro.config</span> <span class=kn>import</span> <span class=n>BaseConfig</span><span class=nd>@dataclass</span><span class=k>class</span> <span class=nc>SortedDataClass</span><span class=p>(</span><span class=n>DataClassDictMixin</span><span class=p>):</span>    <span class=n>foo</span><span class=p>:</span> <span class=nb>int</span>    <span class=n>bar</span><span class=p>:</span> <span class=nb>int</span>    <span class=k>class</span> <span class=nc>Config</span><span class=p>(</span><span class=n>BaseConfig</span><span class=p>):</span>        <span class=n>sort_keys</span> <span class=o>=</span> <span class=kc>True</span><span class=n>t</span> <span class=o>=</span> <span class=n>SortedDataClass</span><span class=p>(</span><span class=mi>1</span><span class=p>,</span> <span class=mi>2</span><span class=p>)</span><span class=k>assert</span> <span class=n>t</span><span class=o>.</span><span class=n>to_dict</span><span class=p>()</span> <span class=o>==</span> <span class=p>{</span><span class=s2>\"bar\"</span><span class=p>:</span> <span class=mi>2</span><span class=p>,</span> <span class=s2>\"foo\"</span><span class=p>:</span> <span class=mi>1</span><span class=p>}</span></pre><h3>Passing field values as is</h3><p>In some cases it's needed to pass a field value as is without any changesduring serialization / deserialization. There is a predefined<a href=\"https://github.com/Fatal1ty/mashumaro/blob/master/mashumaro/helper.py#L58\" rel=nofollow><code>pass_through</code></a>object that can be used as <code>serialization_strategy</code> or<code>serialize</code> / <code>deserialize</code> options:</p><pre lang=python3><span class=kn>from</span> <span class=nn>dataclasses</span> <span class=kn>import</span> <span class=n>dataclass</span><span class=p>,</span> <span class=n>field</span><span class=kn>from</span> <span class=nn>mashumaro</span> <span class=kn>import</span> <span class=n>DataClassDictMixin</span><span class=p>,</span> <span class=n>pass_through</span><span class=k>class</span> <span class=nc>MyClass</span><span class=p>:</span>    <span class=k>def</span> <span class=fm>__init__</span><span class=p>(</span><span class=bp>self</span><span class=p>,</span> <span class=n>some_value</span><span class=p>):</span>        <span class=bp>self</span><span class=o>.</span><span class=n>some_value</span> <span class=o>=</span> <span class=n>some_value</span><span class=nd>@dataclass</span><span class=k>class</span> <span class=nc>A1</span><span class=p>(</span><span class=n>DataClassDictMixin</span><span class=p>):</span>    <span class=n>x</span><span class=p>:</span> <span class=n>MyClass</span> <span class=o>=</span> <span class=n>field</span><span class=p>(</span>        <span class=n>metadata</span><span class=o>=</span><span class=p>{</span>            <span class=s2>\"serialize\"</span><span class=p>:</span> <span class=n>pass_through</span><span class=p>,</span>            <span class=s2>\"deserialize\"</span><span class=p>:</span> <span class=n>pass_through</span><span class=p>,</span>        <span class=p>}</span>    <span class=p>)</span><span class=nd>@dataclass</span><span class=k>class</span> <span class=nc>A2</span><span class=p>(</span><span class=n>DataClassDictMixin</span><span class=p>):</span>    <span class=n>x</span><span class=p>:</span> <span class=n>MyClass</span> <span class=o>=</span> <span class=n>field</span><span class=p>(</span>        <span class=n>metadata</span><span class=o>=</span><span class=p>{</span>            <span class=s2>\"serialization_strategy\"</span><span class=p>:</span> <span class=n>pass_through</span><span class=p>,</span>        <span class=p>}</span>    <span class=p>)</span><span class=nd>@dataclass</span><span class=k>class</span> <span class=nc>A3</span><span class=p>(</span><span class=n>DataClassDictMixin</span><span class=p>):</span>    <span class=n>x</span><span class=p>:</span> <span class=n>MyClass</span>    <span class=k>class</span> <span class=nc>Config</span><span class=p>:</span>        <span class=n>serialization_strategy</span> <span class=o>=</span> <span class=p>{</span>            <span class=n>MyClass</span><span class=p>:</span> <span class=n>pass_through</span><span class=p>,</span>        <span class=p>}</span><span class=nd>@dataclass</span><span class=k>class</span> <span class=nc>A4</span><span class=p>(</span><span class=n>DataClassDictMixin</span><span class=p>):</span>    <span class=n>x</span><span class=p>:</span> <span class=n>MyClass</span>    <span class=k>class</span> <span class=nc>Config</span><span class=p>:</span>        <span class=n>serialization_strategy</span> <span class=o>=</span> <span class=p>{</span>            <span class=n>MyClass</span><span class=p>:</span> <span class=p>{</span>                <span class=s2>\"serialize\"</span><span class=p>:</span> <span class=n>pass_through</span><span class=p>,</span>                <span class=s2>\"deserialize\"</span><span class=p>:</span> <span class=n>pass_through</span><span class=p>,</span>            <span class=p>}</span>        <span class=p>}</span><span class=n>my_class_instance</span> <span class=o>=</span> <span class=n>MyClass</span><span class=p>(</span><span class=mi>42</span><span class=p>)</span><span class=k>assert</span> <span class=n>A1</span><span class=o>.</span><span class=n>from_dict</span><span class=p>({</span><span class=s1>'x'</span><span class=p>:</span> <span class=n>my_class_instance</span><span class=p>})</span><span class=o>.</span><span class=n>x</span> <span class=o>==</span> <span class=n>my_class_instance</span><span class=k>assert</span> <span class=n>A2</span><span class=o>.</span><span class=n>from_dict</span><span class=p>({</span><span class=s1>'x'</span><span class=p>:</span> <span class=n>my_class_instance</span><span class=p>})</span><span class=o>.</span><span class=n>x</span> <span class=o>==</span> <span class=n>my_class_instance</span><span class=k>assert</span> <span class=n>A3</span><span class=o>.</span><span class=n>from_dict</span><span class=p>({</span><span class=s1>'x'</span><span class=p>:</span> <span class=n>my_class_instance</span><span class=p>})</span><span class=o>.</span><span class=n>x</span> <span class=o>==</span> <span class=n>my_class_instance</span><span class=k>assert</span> <span class=n>A4</span><span class=o>.</span><span class=n>from_dict</span><span class=p>({</span><span class=s1>'x'</span><span class=p>:</span> <span class=n>my_class_instance</span><span class=p>})</span><span class=o>.</span><span class=n>x</span> <span class=o>==</span> <span class=n>my_class_instance</span><span class=n>a1_dict</span> <span class=o>=</span> <span class=n>A1</span><span class=p>(</span><span class=n>my_class_instance</span><span class=p>)</span><span class=o>.</span><span class=n>to_dict</span><span class=p>()</span><span class=n>a2_dict</span> <span class=o>=</span> <span class=n>A2</span><span class=p>(</span><span class=n>my_class_instance</span><span class=p>)</span><span class=o>.</span><span class=n>to_dict</span><span class=p>()</span><span class=n>a3_dict</span> <span class=o>=</span> <span class=n>A3</span><span class=p>(</span><span class=n>my_class_instance</span><span class=p>)</span><span class=o>.</span><span class=n>to_dict</span><span class=p>()</span><span class=n>a4_dict</span> <span class=o>=</span> <span class=n>A4</span><span class=p>(</span><span class=n>my_class_instance</span><span class=p>)</span><span class=o>.</span><span class=n>to_dict</span><span class=p>()</span><span class=k>assert</span> <span class=n>a1_dict</span> <span class=o>==</span> <span class=n>a2_dict</span> <span class=o>==</span> <span class=n>a3_dict</span> <span class=o>==</span> <span class=n>a4_dict</span> <span class=o>==</span> <span class=p>{</span><span class=s2>\"x\"</span><span class=p>:</span> <span class=n>my_class_instance</span><span class=p>}</span></pre><h3>Extending existing types</h3><p>There are situations where you might want some values of the same type to betreated as their own type. You can create new logical types with<a href=\"https://docs.python.org/3/library/typing.html#newtype\" rel=nofollow><code>NewType</code></a> or<a href=\"https://docs.python.org/3/library/typing.html#typing.Annotated\" rel=nofollow><code>Annotated</code></a>and register serialization strategies for them:</p><pre lang=python3><span class=kn>from</span> <span class=nn>typing</span> <span class=kn>import</span> <span class=n>Mapping</span><span class=p>,</span> <span class=n>NewType</span><span class=p>,</span> <span class=n>Annotated</span><span class=kn>from</span> <span class=nn>dataclasses</span> <span class=kn>import</span> <span class=n>dataclass</span><span class=kn>from</span> <span class=nn>mashumaro</span> <span class=kn>import</span> <span class=n>DataClassDictMixin</span><span class=n>SessionID</span> <span class=o>=</span> <span class=n>NewType</span><span class=p>(</span><span class=s2>\"SessionID\"</span><span class=p>,</span> <span class=nb>str</span><span class=p>)</span><span class=n>AccountID</span> <span class=o>=</span> <span class=n>Annotated</span><span class=p>[</span><span class=nb>str</span><span class=p>,</span> <span class=s2>\"AccountID\"</span><span class=p>]</span><span class=nd>@dataclass</span><span class=k>class</span> <span class=nc>Context</span><span class=p>(</span><span class=n>DataClassDictMixin</span><span class=p>):</span>    <span class=n>account_sessions</span><span class=p>:</span> <span class=n>Mapping</span><span class=p>[</span><span class=n>AccountID</span><span class=p>,</span> <span class=n>SessionID</span><span class=p>]</span>    <span class=k>class</span> <span class=nc>Config</span><span class=p>:</span>        <span class=n>serialization_strategy</span> <span class=o>=</span> <span class=p>{</span>            <span class=n>AccountID</span><span class=p>:</span> <span class=p>{</span>                <span class=s2>\"deserialize\"</span><span class=p>:</span> <span class=k>lambda</span> <span class=n>x</span><span class=p>:</span> <span class=o>...</span><span class=p>,</span>                <span class=s2>\"serialize\"</span><span class=p>:</span> <span class=k>lambda</span> <span class=n>x</span><span class=p>:</span> <span class=o>...</span><span class=p>,</span>            <span class=p>},</span>            <span class=n>SessionID</span><span class=p>:</span> <span class=p>{</span>                <span class=s2>\"deserialize\"</span><span class=p>:</span> <span class=k>lambda</span> <span class=n>x</span><span class=p>:</span> <span class=o>...</span><span class=p>,</span>                <span class=s2>\"serialize\"</span><span class=p>:</span> <span class=k>lambda</span> <span class=n>x</span><span class=p>:</span> <span class=o>...</span><span class=p>,</span>            <span class=p>}</span>        <span class=p>}</span></pre><p>Although using <code>NewType</code> is usually the most reliable way to avoid logicalerrors, you have to pay for it with notable overhead. If you are creatingdataclass instances manually, then you know that type checkers willenforce you to enclose a value in your <code>\"NewType\"</code> callable, which leadsto performance degradation:</p><pre lang=python3><span class=n>python</span> <span class=o>-</span><span class=n>m</span> <span class=n>timeit</span> <span class=o>-</span><span class=n>s</span> <span class=s2>\"from typing import NewType; MyInt = NewType('MyInt', int)\"</span> <span class=s2>\"MyInt(42)\"</span><span class=mi>10000000</span> <span class=n>loops</span><span class=p>,</span> <span class=n>best</span> <span class=n>of</span> <span class=mi>5</span><span class=p>:</span> <span class=mf>31.1</span> <span class=n>nsec</span> <span class=n>per</span> <span class=n>loop</span><span class=n>python</span> <span class=o>-</span><span class=n>m</span> <span class=n>timeit</span> <span class=o>-</span><span class=n>s</span> <span class=s2>\"from typing import NewType; MyInt = NewType('MyInt', int)\"</span> <span class=s2>\"42\"</span><span class=mi>50000000</span> <span class=n>loops</span><span class=p>,</span> <span class=n>best</span> <span class=n>of</span> <span class=mi>5</span><span class=p>:</span> <span class=mf>4.35</span> <span class=n>nsec</span> <span class=n>per</span> <span class=n>loop</span></pre><p>However, when you create dataclass instances using the <code>from_*</code> method providedby one of the mixins or using one of the decoders, there will be no performancedegradation, because the value won't be enclosed in the callable in thegenerated code. Therefore, if performance is more important to you thancatching logical errors by type checkers, and you are actively creating orchanging dataclasses manually, then you should take a closer look at using<code>Annotated</code>.</p><h3>Dialects</h3><p>Sometimes it's needed to have different serialization and deserializationmethods depending on the data source where entities of the dataclass arestored or on the API to which the entities are being sent or received from.There is a special <code>Dialect</code> type that may contain all the differences from thedefault serialization and deserialization methods. You can create differentdialects and use each of them for the same dataclass depending onthe situation.</p><p>Suppose we have the following dataclass with a field of type <code>date</code>:</p><pre lang=python3><span class=nd>@dataclass</span><span class=k>class</span> <span class=nc>Entity</span><span class=p>(</span><span class=n>DataClassDictMixin</span><span class=p>):</span>    <span class=n>dt</span><span class=p>:</span> <span class=n>date</span></pre><p>By default, a field of <code>date</code> type serializes to a string in ISO 8601 format,so the serialized entity will look like <code>{'dt': '2021-12-31'}</code>. But what if wehave, for example, two sensitive legacy Ethiopian and Japanese APIs that usetwo different formats for dates \u2014 <code>dd/mm/yyyy</code> and <code>yyyy\u5e74mm\u6708dd\u65e5</code>? Instead ofcreating two similar dataclasses we can have one dataclass and two dialects:</p><pre lang=python3><span class=kn>from</span> <span class=nn>dataclasses</span> <span class=kn>import</span> <span class=n>dataclass</span><span class=kn>from</span> <span class=nn>datetime</span> <span class=kn>import</span> <span class=n>date</span><span class=p>,</span> <span class=n>datetime</span><span class=kn>from</span> <span class=nn>mashumaro</span> <span class=kn>import</span> <span class=n>DataClassDictMixin</span><span class=kn>from</span> <span class=nn>mashumaro.config</span> <span class=kn>import</span> <span class=n>ADD_DIALECT_SUPPORT</span><span class=kn>from</span> <span class=nn>mashumaro.dialect</span> <span class=kn>import</span> <span class=n>Dialect</span><span class=kn>from</span> <span class=nn>mashumaro.types</span> <span class=kn>import</span> <span class=n>SerializationStrategy</span><span class=k>class</span> <span class=nc>DateTimeSerializationStrategy</span><span class=p>(</span><span class=n>SerializationStrategy</span><span class=p>):</span>    <span class=k>def</span> <span class=fm>__init__</span><span class=p>(</span><span class=bp>self</span><span class=p>,</span> <span class=n>fmt</span><span class=p>:</span> <span class=nb>str</span><span class=p>):</span>        <span class=bp>self</span><span class=o>.</span><span class=n>fmt</span> <span class=o>=</span> <span class=n>fmt</span>    <span class=k>def</span> <span class=nf>serialize</span><span class=p>(</span><span class=bp>self</span><span class=p>,</span> <span class=n>value</span><span class=p>:</span> <span class=n>date</span><span class=p>)</span> <span class=o>-&gt;</span> <span class=nb>str</span><span class=p>:</span>        <span class=k>return</span> <span class=n>value</span><span class=o>.</span><span class=n>strftime</span><span class=p>(</span><span class=bp>self</span><span class=o>.</span><span class=n>fmt</span><span class=p>)</span>    <span class=k>def</span> <span class=nf>deserialize</span><span class=p>(</span><span class=bp>self</span><span class=p>,</span> <span class=n>value</span><span class=p>:</span> <span class=nb>str</span><span class=p>)</span> <span class=o>-&gt;</span> <span class=n>date</span><span class=p>:</span>        <span class=k>return</span> <span class=n>datetime</span><span class=o>.</span><span class=n>strptime</span><span class=p>(</span><span class=n>value</span><span class=p>,</span> <span class=bp>self</span><span class=o>.</span><span class=n>fmt</span><span class=p>)</span><span class=o>.</span><span class=n>date</span><span class=p>()</span><span class=k>class</span> <span class=nc>EthiopianDialect</span><span class=p>(</span><span class=n>Dialect</span><span class=p>):</span>    <span class=n>serialization_strategy</span> <span class=o>=</span> <span class=p>{</span>        <span class=n>date</span><span class=p>:</span> <span class=n>DateTimeSerializationStrategy</span><span class=p>(</span><span class=s2>\"</span><span class=si>%d</span><span class=s2>/%m/%Y\"</span><span class=p>)</span>    <span class=p>}</span><span class=k>class</span> <span class=nc>JapaneseDialect</span><span class=p>(</span><span class=n>Dialect</span><span class=p>):</span>    <span class=n>serialization_strategy</span> <span class=o>=</span> <span class=p>{</span>        <span class=n>date</span><span class=p>:</span> <span class=n>DateTimeSerializationStrategy</span><span class=p>(</span><span class=s2>\"%Y\u5e74%m\u6708</span><span class=si>%d</span><span class=s2>\u65e5\"</span><span class=p>)</span>    <span class=p>}</span><span class=nd>@dataclass</span><span class=k>class</span> <span class=nc>Entity</span><span class=p>(</span><span class=n>DataClassDictMixin</span><span class=p>):</span>    <span class=n>dt</span><span class=p>:</span> <span class=n>date</span>    <span class=k>class</span> <span class=nc>Config</span><span class=p>:</span>        <span class=n>code_generation_options</span> <span class=o>=</span> <span class=p>[</span><span class=n>ADD_DIALECT_SUPPORT</span><span class=p>]</span><span class=n>entity</span> <span class=o>=</span> <span class=n>Entity</span><span class=p>(</span><span class=n>date</span><span class=p>(</span><span class=mi>2021</span><span class=p>,</span> <span class=mi>12</span><span class=p>,</span> <span class=mi>31</span><span class=p>))</span><span class=n>entity</span><span class=o>.</span><span class=n>to_dict</span><span class=p>(</span><span class=n>dialect</span><span class=o>=</span><span class=n>EthiopianDialect</span><span class=p>)</span>  <span class=c1># {'dt': '31/12/2021'}</span><span class=n>entity</span><span class=o>.</span><span class=n>to_dict</span><span class=p>(</span><span class=n>dialect</span><span class=o>=</span><span class=n>JapaneseDialect</span><span class=p>)</span>   <span class=c1># {'dt': '2021\u5e7412\u670831\u65e5'}</span><span class=n>Entity</span><span class=o>.</span><span class=n>from_dict</span><span class=p>({</span><span class=s1>'dt'</span><span class=p>:</span> <span class=s1>'2021\u5e7412\u670831\u65e5'</span><span class=p>},</span> <span class=n>dialect</span><span class=o>=</span><span class=n>JapaneseDialect</span><span class=p>)</span></pre><h4><code>serialization_strategy</code> dialect option</h4><p>This dialect option has the same meaning as the<a href=#serialization_strategy-config-option rel=nofollow>similar config option</a>but for the dialect scope. You can register custom <a href=#serializationstrategy rel=nofollow><code>SerializationStrategy</code></a>,<code>serialize</code> and <code>deserialize</code> methods for the specific types.</p><h4><code>serialize_by_alias</code> dialect option</h4><p>This dialect option has the same meaning as the<a href=#serialize_by_alias-config-option rel=nofollow>similar config option</a>but for the dialect scope.</p><h4><code>omit_none</code> dialect option</h4><p>This dialect option has the same meaning as the<a href=#omit_none-config-option rel=nofollow>similar config option</a> but for the dialect scope.</p><h4><code>omit_default</code> dialect option</h4><p>This dialect option has the same meaning as the<a href=#omitdefault-config-option rel=nofollow>similar config option</a> but for the dialect scope.</p><h4><code>namedtuple_as_dict</code> dialect option</h4><p>This dialect option has the same meaning as the<a href=#namedtuple_as_dict-config-option rel=nofollow>similar config option</a>but for the dialect scope.</p><h4><code>no_copy_collections</code> dialect option</h4><p>By default, all collection data types are serialized as a copy to preventmutation of the original collection. As an example, if a dataclass containsa field of type <code>list[str]</code>, then it will be serialized as a copy of theoriginal list, so you can safely mutate it after. The downside is that copyingis always slower than using a reference to the original collection. In somecases we know beforehand that mutation doesn't take place or is even desirable,so we can benefit from avoiding unnecessary copies by setting<code>no_copy_collections</code> to a sequence of origin collection data types.This is applicable only for collections containing elements that do notrequire conversion.</p><pre lang=python3><span class=kn>from</span> <span class=nn>dataclasses</span> <span class=kn>import</span> <span class=n>dataclass</span><span class=kn>from</span> <span class=nn>mashumaro</span> <span class=kn>import</span> <span class=n>DataClassDictMixin</span><span class=kn>from</span> <span class=nn>mashumaro.config</span> <span class=kn>import</span> <span class=n>BaseConfig</span><span class=kn>from</span> <span class=nn>mashumaro.dialect</span> <span class=kn>import</span> <span class=n>Dialect</span><span class=k>class</span> <span class=nc>NoCopyDialect</span><span class=p>(</span><span class=n>Dialect</span><span class=p>):</span>    <span class=n>no_copy_collections</span> <span class=o>=</span> <span class=p>(</span><span class=nb>list</span><span class=p>,</span> <span class=nb>dict</span><span class=p>,</span> <span class=nb>set</span><span class=p>)</span><span class=nd>@dataclass</span><span class=k>class</span> <span class=nc>DataClass</span><span class=p>(</span><span class=n>DataClassDictMixin</span><span class=p>):</span>    <span class=n>simple_list</span><span class=p>:</span> <span class=nb>list</span><span class=p>[</span><span class=nb>str</span><span class=p>]</span>    <span class=n>simple_dict</span><span class=p>:</span> <span class=nb>dict</span><span class=p>[</span><span class=nb>str</span><span class=p>,</span> <span class=nb>str</span><span class=p>]</span>    <span class=n>simple_set</span><span class=p>:</span> <span class=nb>set</span><span class=p>[</span><span class=nb>str</span><span class=p>]</span>    <span class=k>class</span> <span class=nc>Config</span><span class=p>(</span><span class=n>BaseConfig</span><span class=p>):</span>        <span class=n>dialect</span> <span class=o>=</span> <span class=n>NoCopyDialect</span><span class=n>obj</span> <span class=o>=</span> <span class=n>DataClass</span><span class=p>([</span><span class=s2>\"foo\"</span><span class=p>],</span> <span class=p>{</span><span class=s2>\"bar\"</span><span class=p>:</span> <span class=s2>\"baz\"</span><span class=p>},</span> <span class=p>{</span><span class=s2>\"foobar\"</span><span class=p>})</span><span class=n>data</span> <span class=o>=</span> <span class=n>obj</span><span class=o>.</span><span class=n>to_dict</span><span class=p>()</span><span class=k>assert</span> <span class=n>data</span><span class=p>[</span><span class=s2>\"simple_list\"</span><span class=p>]</span> <span class=ow>is</span> <span class=n>obj</span><span class=o>.</span><span class=n>simple_list</span><span class=k>assert</span> <span class=n>data</span><span class=p>[</span><span class=s2>\"simple_dict\"</span><span class=p>]</span> <span class=ow>is</span> <span class=n>obj</span><span class=o>.</span><span class=n>simple_dict</span><span class=k>assert</span> <span class=n>data</span><span class=p>[</span><span class=s2>\"simple_set\"</span><span class=p>]</span> <span class=ow>is</span> <span class=n>obj</span><span class=o>.</span><span class=n>simple_set</span></pre><p>This option is enabled for <code>list</code> and <code>dict</code> in the default dialects thatbelong to mixins and codecs for the following formats:</p><ul><li><a href=#orjson-library rel=nofollow>JSON (orjson library)</a></li><li><a href=#toml rel=nofollow>TOML</a></li><li><a href=#messagepack rel=nofollow>MessagePack</a></li></ul><h4>Changing the default dialect</h4><p>You can change the default serialization and deserialization methods not onlyin the <a href=#serialization_strategy-config-option rel=nofollow><code>serialization_strategy</code></a> configoption but also using the <code>dialect</code> config option. If you have multipledataclasses without a common parent class the default dialect can help youto reduce the number of code lines written:</p><pre lang=python3><span class=nd>@dataclass</span><span class=k>class</span> <span class=nc>Entity</span><span class=p>(</span><span class=n>DataClassDictMixin</span><span class=p>):</span>    <span class=n>dt</span><span class=p>:</span> <span class=n>date</span>    <span class=k>class</span> <span class=nc>Config</span><span class=p>:</span>        <span class=n>dialect</span> <span class=o>=</span> <span class=n>JapaneseDialect</span><span class=n>entity</span> <span class=o>=</span> <span class=n>Entity</span><span class=p>(</span><span class=n>date</span><span class=p>(</span><span class=mi>2021</span><span class=p>,</span> <span class=mi>12</span><span class=p>,</span> <span class=mi>31</span><span class=p>))</span><span class=n>entity</span><span class=o>.</span><span class=n>to_dict</span><span class=p>()</span>  <span class=c1># {'dt': '2021\u5e7412\u670831\u65e5'}</span><span class=k>assert</span> <span class=n>Entity</span><span class=o>.</span><span class=n>from_dict</span><span class=p>({</span><span class=s1>'dt'</span><span class=p>:</span> <span class=s1>'2021\u5e7412\u670831\u65e5'</span><span class=p>})</span> <span class=o>==</span> <span class=n>entity</span></pre><p>Default dialect can also be set when using codecs:</p><pre lang=python3><span class=kn>from</span> <span class=nn>mashumaro.codecs</span> <span class=kn>import</span> <span class=n>BasicDecoder</span><span class=p>,</span> <span class=n>BasicEncoder</span><span class=nd>@dataclass</span><span class=k>class</span> <span class=nc>Entity</span><span class=p>:</span>    <span class=n>dt</span><span class=p>:</span> <span class=n>date</span><span class=n>decoder</span> <span class=o>=</span> <span class=n>BasicDecoder</span><span class=p>(</span><span class=n>Entity</span><span class=p>,</span> <span class=n>default_dialect</span><span class=o>=</span><span class=n>JapaneseDialect</span><span class=p>)</span><span class=n>encoder</span> <span class=o>=</span> <span class=n>BasicEncoder</span><span class=p>(</span><span class=n>Entity</span><span class=p>,</span> <span class=n>default_dialect</span><span class=o>=</span><span class=n>JapaneseDialect</span><span class=p>)</span><span class=n>entity</span> <span class=o>=</span> <span class=n>Entity</span><span class=p>(</span><span class=n>date</span><span class=p>(</span><span class=mi>2021</span><span class=p>,</span> <span class=mi>12</span><span class=p>,</span> <span class=mi>31</span><span class=p>))</span><span class=n>encoder</span><span class=o>.</span><span class=n>encode</span><span class=p>(</span><span class=n>entity</span><span class=p>)</span> <span class=c1># {'dt': '2021\u5e7412\u670831\u65e5'}</span><span class=k>assert</span> <span class=n>decoder</span><span class=o>.</span><span class=n>decode</span><span class=p>({</span><span class=s1>'dt'</span><span class=p>:</span> <span class=s1>'2021\u5e7412\u670831\u65e5'</span><span class=p>})</span> <span class=o>==</span> <span class=n>entity</span></pre><h3>Discriminator</h3><p>There is a special <code>Discriminator</code> class that allows you to customize howa union of dataclasses or their hierarchy will be deserialized.It has the following parameters that affects class selection rules:</p><ul><li><code>field</code> \u2014 optional name of the input dictionary key (also known as tag)by which all the variants can be distinguished</li><li><code>include_subtypes</code> \u2014 allow to deserialize subclasses</li><li><code>include_supertypes</code> \u2014 allow to deserialize superclasses</li><li><code>variant_tagger_fn</code> \u2014 a custom function used to generate tag valuesassociated with a variant</li></ul><p>By default, each variant that you want to discriminate by tags should have aclass-level attribute containing an associated tag value. This attribute shouldhave a name defined by <code>field</code> parameter. The tag value coule be in thefollowing forms:</p><ul><li>without annotations: <code>type = 42</code></li><li>annotated as ClassVar: <code>type: ClassVar[int] = 42</code></li><li>annotated as Final: <code>type: Final[int] = 42</code></li><li>annotated as Literal: <code>type: Literal[42] = 42</code></li><li>annotated as StrEnum: <code>type: ResponseType = ResponseType.OK</code></li></ul><blockquote><p>[!NOTE]<br>Keep in mind that by default only Final, Literal and StrEnum fields areprocessed during serialization.</p></blockquote><p>However, it is possible to use discriminator without the class-levelattribute. You can provide a custom function that generates one or many varianttag values. This function should take a class as the only argument and returneither a single value of the basic type like <code>str</code> or <code>int</code> or a list of themto associate multiple tags with a variant. The common practice is to usea class name as a single tag value:</p><pre lang=python3><span class=n>variant_tagger_fn</span> <span class=o>=</span> <span class=k>lambda</span> <span class=bp>cls</span><span class=p>:</span> <span class=bp>cls</span><span class=o>.</span><span class=vm>__name__</span></pre><p>Next, we will look at different use cases, as well as their pros and cons.</p><h4>Subclasses distinguishable by a field</h4><p>Often you have a base dataclass and multiple subclasses that are easilydistinguishable from each other by the value of a particular field.For example, there may be different events, messages or requests witha discriminator field \"event_type\", \"message_type\" or just \"type\". You could'velisted all of them within <code>Union</code> type, but it would be too verbose andimpractical. Moreover, deserialization of the union would be slow, since weneed to iterate over each variant in the list until we find the right one.</p><p>We can improve subclass deserialization using <code>Discriminator</code> as annotationwithin <code>Annotated</code> type. We will use <code>field</code> parameter and set<code>include_subtypes</code> to <code>True</code>.</p><blockquote><p>[!IMPORTANT]<br>The discriminator field should be accessible from the <code>__dict__</code> attributeof a specific descendant, i.e. defined at the level of that descendant.A descendant class without a discriminator field will be ignored, butits descendants won't.</p></blockquote><p>Suppose we have a hierarchy of client events distinguishable by a classattribute \"type\":</p><pre lang=python3><span class=kn>from</span> <span class=nn>dataclasses</span> <span class=kn>import</span> <span class=n>dataclass</span><span class=kn>from</span> <span class=nn>ipaddress</span> <span class=kn>import</span> <span class=n>IPv4Address</span><span class=kn>from</span> <span class=nn>mashumaro</span> <span class=kn>import</span> <span class=n>DataClassDictMixin</span><span class=nd>@dataclass</span><span class=k>class</span> <span class=nc>ClientEvent</span><span class=p>(</span><span class=n>DataClassDictMixin</span><span class=p>):</span>    <span class=k>pass</span><span class=nd>@dataclass</span><span class=k>class</span> <span class=nc>ClientConnectedEvent</span><span class=p>(</span><span class=n>ClientEvent</span><span class=p>):</span>    <span class=nb>type</span> <span class=o>=</span> <span class=s2>\"connected\"</span>    <span class=n>client_ip</span><span class=p>:</span> <span class=n>IPv4Address</span><span class=nd>@dataclass</span><span class=k>class</span> <span class=nc>ClientDisconnectedEvent</span><span class=p>(</span><span class=n>ClientEvent</span><span class=p>):</span>    <span class=nb>type</span> <span class=o>=</span> <span class=s2>\"disconnected\"</span>    <span class=n>client_ip</span><span class=p>:</span> <span class=n>IPv4Address</span></pre><p>We use base dataclass <code>ClientEvent</code> for a field of another dataclass:</p><pre lang=python3><span class=kn>from</span> <span class=nn>typing</span> <span class=kn>import</span> <span class=n>Annotated</span><span class=p>,</span> <span class=n>List</span><span class=c1># or from typing_extensions import Annotated</span><span class=kn>from</span> <span class=nn>mashumaro.types</span> <span class=kn>import</span> <span class=n>Discriminator</span><span class=nd>@dataclass</span><span class=k>class</span> <span class=nc>AggregatedEvents</span><span class=p>(</span><span class=n>DataClassDictMixin</span><span class=p>):</span>    <span class=nb>list</span><span class=p>:</span> <span class=n>List</span><span class=p>[</span>        <span class=n>Annotated</span><span class=p>[</span>            <span class=n>ClientEvent</span><span class=p>,</span> <span class=n>Discriminator</span><span class=p>(</span><span class=n>field</span><span class=o>=</span><span class=s2>\"type\"</span><span class=p>,</span> <span class=n>include_subtypes</span><span class=o>=</span><span class=kc>True</span><span class=p>)</span>        <span class=p>]</span>    <span class=p>]</span></pre><p>Now we can deserialize events based on \"type\" value:</p><pre lang=python3><span class=n>events</span> <span class=o>=</span> <span class=n>AggregatedEvents</span><span class=o>.</span><span class=n>from_dict</span><span class=p>(</span>    <span class=p>{</span>        <span class=s2>\"list\"</span><span class=p>:</span> <span class=p>[</span>            <span class=p>{</span><span class=s2>\"type\"</span><span class=p>:</span> <span class=s2>\"connected\"</span><span class=p>,</span> <span class=s2>\"client_ip\"</span><span class=p>:</span> <span class=s2>\"10.0.0.42\"</span><span class=p>},</span>            <span class=p>{</span><span class=s2>\"type\"</span><span class=p>:</span> <span class=s2>\"disconnected\"</span><span class=p>,</span> <span class=s2>\"client_ip\"</span><span class=p>:</span> <span class=s2>\"10.0.0.42\"</span><span class=p>},</span>        <span class=p>]</span>    <span class=p>}</span><span class=p>)</span><span class=k>assert</span> <span class=n>events</span> <span class=o>==</span> <span class=n>AggregatedEvents</span><span class=p>(</span>    <span class=nb>list</span><span class=o>=</span><span class=p>[</span>        <span class=n>ClientConnectedEvent</span><span class=p>(</span><span class=n>client_ip</span><span class=o>=</span><span class=n>IPv4Address</span><span class=p>(</span><span class=s2>\"10.0.0.42\"</span><span class=p>)),</span>        <span class=n>ClientDisconnectedEvent</span><span class=p>(</span><span class=n>client_ip</span><span class=o>=</span><span class=n>IPv4Address</span><span class=p>(</span><span class=s2>\"10.0.0.42\"</span><span class=p>)),</span>    <span class=p>]</span><span class=p>)</span></pre><h4>Subclasses without a common field</h4><p>In rare cases you have to deal with subclasses that don't have a common fieldname which they can be distinguished by. Since <code>Discriminator</code> can beinitialized without \"field\" parameter you can use it with only<code>include_subclasses</code> enabled. The drawback is that we will have to go through allthe subclasses until we find the suitable one. It's almost like using <code>Union</code>type but with subclasses support.</p><p>Suppose we're making a brunch. We have some ingredients:</p><pre lang=python3><span class=nd>@dataclass</span><span class=k>class</span> <span class=nc>Ingredient</span><span class=p>(</span><span class=n>DataClassDictMixin</span><span class=p>):</span>    <span class=n>name</span><span class=p>:</span> <span class=nb>str</span><span class=nd>@dataclass</span><span class=k>class</span> <span class=nc>Hummus</span><span class=p>(</span><span class=n>Ingredient</span><span class=p>):</span>    <span class=n>made_of</span><span class=p>:</span> <span class=n>Literal</span><span class=p>[</span><span class=s2>\"chickpeas\"</span><span class=p>,</span> <span class=s2>\"beet\"</span><span class=p>,</span> <span class=s2>\"artichoke\"</span><span class=p>]</span>    <span class=n>grams</span><span class=p>:</span> <span class=nb>int</span><span class=nd>@dataclass</span><span class=k>class</span> <span class=nc>Celery</span><span class=p>(</span><span class=n>Ingredient</span><span class=p>):</span>    <span class=n>pieces</span><span class=p>:</span> <span class=nb>int</span></pre><p>Let's create a plate:</p><pre lang=python3><span class=nd>@dataclass</span><span class=k>class</span> <span class=nc>Plate</span><span class=p>(</span><span class=n>DataClassDictMixin</span><span class=p>):</span>    <span class=n>ingredients</span><span class=p>:</span> <span class=n>List</span><span class=p>[</span>        <span class=n>Annotated</span><span class=p>[</span><span class=n>Ingredient</span><span class=p>,</span> <span class=n>Discriminator</span><span class=p>(</span><span class=n>include_subtypes</span><span class=o>=</span><span class=kc>True</span><span class=p>)]</span>    <span class=p>]</span></pre><p>And now we can put our ingredients on the plate:</p><pre lang=python3><span class=n>plate</span> <span class=o>=</span> <span class=n>Plate</span><span class=o>.</span><span class=n>from_dict</span><span class=p>(</span>    <span class=p>{</span>        <span class=s2>\"ingredients\"</span><span class=p>:</span> <span class=p>[</span>            <span class=p>{</span>                <span class=s2>\"name\"</span><span class=p>:</span> <span class=s2>\"hummus from the shop\"</span><span class=p>,</span>                <span class=s2>\"made_of\"</span><span class=p>:</span> <span class=s2>\"chickpeas\"</span><span class=p>,</span>                <span class=s2>\"grams\"</span><span class=p>:</span> <span class=mi>150</span><span class=p>,</span>            <span class=p>},</span>            <span class=p>{</span><span class=s2>\"name\"</span><span class=p>:</span> <span class=s2>\"celery from my garden\"</span><span class=p>,</span> <span class=s2>\"pieces\"</span><span class=p>:</span> <span class=mi>5</span><span class=p>},</span>        <span class=p>]</span>    <span class=p>}</span><span class=p>)</span><span class=k>assert</span> <span class=n>plate</span> <span class=o>==</span> <span class=n>Plate</span><span class=p>(</span>    <span class=n>ingredients</span><span class=o>=</span><span class=p>[</span>        <span class=n>Hummus</span><span class=p>(</span><span class=n>name</span><span class=o>=</span><span class=s2>\"hummus from the shop\"</span><span class=p>,</span> <span class=n>made_of</span><span class=o>=</span><span class=s2>\"chickpeas\"</span><span class=p>,</span> <span class=n>grams</span><span class=o>=</span><span class=mi>150</span><span class=p>),</span>        <span class=n>Celery</span><span class=p>(</span><span class=n>name</span><span class=o>=</span><span class=s2>\"celery from my garden\"</span><span class=p>,</span> <span class=n>pieces</span><span class=o>=</span><span class=mi>5</span><span class=p>),</span>    <span class=p>]</span><span class=p>)</span></pre><p>In some cases it's necessary to fall back to the base class if there is nosuitable subclass. We can set <code>include_supertypes</code> to <code>True</code>:</p><pre lang=python3><span class=nd>@dataclass</span><span class=k>class</span> <span class=nc>Plate</span><span class=p>(</span><span class=n>DataClassDictMixin</span><span class=p>):</span>    <span class=n>ingredients</span><span class=p>:</span> <span class=n>List</span><span class=p>[</span>        <span class=n>Annotated</span><span class=p>[</span>            <span class=n>Ingredient</span><span class=p>,</span>            <span class=n>Discriminator</span><span class=p>(</span><span class=n>include_subtypes</span><span class=o>=</span><span class=kc>True</span><span class=p>,</span> <span class=n>include_supertypes</span><span class=o>=</span><span class=kc>True</span><span class=p>),</span>        <span class=p>]</span>    <span class=p>]</span><span class=n>plate</span> <span class=o>=</span> <span class=n>Plate</span><span class=o>.</span><span class=n>from_dict</span><span class=p>(</span>    <span class=p>{</span>        <span class=s2>\"ingredients\"</span><span class=p>:</span> <span class=p>[</span>            <span class=p>{</span>                <span class=s2>\"name\"</span><span class=p>:</span> <span class=s2>\"hummus from the shop\"</span><span class=p>,</span>                <span class=s2>\"made_of\"</span><span class=p>:</span> <span class=s2>\"chickpeas\"</span><span class=p>,</span>                <span class=s2>\"grams\"</span><span class=p>:</span> <span class=mi>150</span><span class=p>,</span>            <span class=p>},</span>            <span class=p>{</span><span class=s2>\"name\"</span><span class=p>:</span> <span class=s2>\"celery from my garden\"</span><span class=p>,</span> <span class=s2>\"pieces\"</span><span class=p>:</span> <span class=mi>5</span><span class=p>},</span>            <span class=p>{</span><span class=s2>\"name\"</span><span class=p>:</span> <span class=s2>\"cumin\"</span><span class=p>}</span>  <span class=c1># &lt;- new unknown ingredient</span>        <span class=p>]</span>    <span class=p>}</span><span class=p>)</span><span class=k>assert</span> <span class=n>plate</span> <span class=o>==</span> <span class=n>Plate</span><span class=p>(</span>    <span class=n>ingredients</span><span class=o>=</span><span class=p>[</span>        <span class=n>Hummus</span><span class=p>(</span><span class=n>name</span><span class=o>=</span><span class=s2>\"hummus from the shop\"</span><span class=p>,</span> <span class=n>made_of</span><span class=o>=</span><span class=s2>\"chickpeas\"</span><span class=p>,</span> <span class=n>grams</span><span class=o>=</span><span class=mi>150</span><span class=p>),</span>        <span class=n>Celery</span><span class=p>(</span><span class=n>name</span><span class=o>=</span><span class=s2>\"celery from my garden\"</span><span class=p>,</span> <span class=n>pieces</span><span class=o>=</span><span class=mi>5</span><span class=p>),</span>        <span class=n>Ingredient</span><span class=p>(</span><span class=n>name</span><span class=o>=</span><span class=s2>\"cumin\"</span><span class=p>),</span>  <span class=c1># &lt;- unknown ingredient added</span>    <span class=p>]</span><span class=p>)</span></pre><h4>Class level discriminator</h4><p>It may often be more convenient to specify a <code>Discriminator</code> once at the classlevel and use that class without <code>Annotated</code> type for subclass deserialization.Depending on the <code>Discriminator</code> parameters, it can be used as a replacement for<a href=#subclasses-distinguishable-by-a-field rel=nofollow>subclasses distinguishable by a field</a>as well as for <a href=#subclasses-without-a-common-field rel=nofollow>subclasses without a common field</a>.The only difference is that you can't use <code>include_supertypes=True</code> becauseit would lead to a recursion error.</p><p>Reworked example will look like this:</p><pre lang=python3><span class=kn>from</span> <span class=nn>dataclasses</span> <span class=kn>import</span> <span class=n>dataclass</span><span class=kn>from</span> <span class=nn>ipaddress</span> <span class=kn>import</span> <span class=n>IPv4Address</span><span class=kn>from</span> <span class=nn>typing</span> <span class=kn>import</span> <span class=n>List</span><span class=kn>from</span> <span class=nn>mashumaro</span> <span class=kn>import</span> <span class=n>DataClassDictMixin</span><span class=kn>from</span> <span class=nn>mashumaro.config</span> <span class=kn>import</span> <span class=n>BaseConfig</span><span class=kn>from</span> <span class=nn>mashumaro.types</span> <span class=kn>import</span> <span class=n>Discriminator</span><span class=nd>@dataclass</span><span class=k>class</span> <span class=nc>ClientEvent</span><span class=p>(</span><span class=n>DataClassDictMixin</span><span class=p>):</span>    <span class=k>class</span> <span class=nc>Config</span><span class=p>(</span><span class=n>BaseConfig</span><span class=p>):</span>        <span class=n>discriminator</span> <span class=o>=</span> <span class=n>Discriminator</span><span class=p>(</span>  <span class=c1># &lt;- add discriminator</span>            <span class=n>field</span><span class=o>=</span><span class=s2>\"type\"</span><span class=p>,</span>            <span class=n>include_subtypes</span><span class=o>=</span><span class=kc>True</span><span class=p>,</span>        <span class=p>)</span><span class=nd>@dataclass</span><span class=k>class</span> <span class=nc>ClientConnectedEvent</span><span class=p>(</span><span class=n>ClientEvent</span><span class=p>):</span>    <span class=nb>type</span> <span class=o>=</span> <span class=s2>\"connected\"</span>    <span class=n>client_ip</span><span class=p>:</span> <span class=n>IPv4Address</span><span class=nd>@dataclass</span><span class=k>class</span> <span class=nc>ClientDisconnectedEvent</span><span class=p>(</span><span class=n>ClientEvent</span><span class=p>):</span>    <span class=nb>type</span> <span class=o>=</span> <span class=s2>\"disconnected\"</span>    <span class=n>client_ip</span><span class=p>:</span> <span class=n>IPv4Address</span><span class=nd>@dataclass</span><span class=k>class</span> <span class=nc>AggregatedEvents</span><span class=p>(</span><span class=n>DataClassDictMixin</span><span class=p>):</span>    <span class=nb>list</span><span class=p>:</span> <span class=n>List</span><span class=p>[</span><span class=n>ClientEvent</span><span class=p>]</span>  <span class=c1># &lt;- use base class here</span></pre><p>And now we can deserialize events based on \"type\" value as we did earlier:</p><pre lang=python3><span class=n>events</span> <span class=o>=</span> <span class=n>AggregatedEvents</span><span class=o>.</span><span class=n>from_dict</span><span class=p>(</span>    <span class=p>{</span>        <span class=s2>\"list\"</span><span class=p>:</span> <span class=p>[</span>            <span class=p>{</span><span class=s2>\"type\"</span><span class=p>:</span> <span class=s2>\"connected\"</span><span class=p>,</span> <span class=s2>\"client_ip\"</span><span class=p>:</span> <span class=s2>\"10.0.0.42\"</span><span class=p>},</span>            <span class=p>{</span><span class=s2>\"type\"</span><span class=p>:</span> <span class=s2>\"disconnected\"</span><span class=p>,</span> <span class=s2>\"client_ip\"</span><span class=p>:</span> <span class=s2>\"10.0.0.42\"</span><span class=p>},</span>        <span class=p>]</span>    <span class=p>}</span><span class=p>)</span><span class=k>assert</span> <span class=n>events</span> <span class=o>==</span> <span class=n>AggregatedEvents</span><span class=p>(</span>    <span class=nb>list</span><span class=o>=</span><span class=p>[</span>        <span class=n>ClientConnectedEvent</span><span class=p>(</span><span class=n>client_ip</span><span class=o>=</span><span class=n>IPv4Address</span><span class=p>(</span><span class=s2>\"10.0.0.42\"</span><span class=p>)),</span>        <span class=n>ClientDisconnectedEvent</span><span class=p>(</span><span class=n>client_ip</span><span class=o>=</span><span class=n>IPv4Address</span><span class=p>(</span><span class=s2>\"10.0.0.42\"</span><span class=p>)),</span>    <span class=p>]</span><span class=p>)</span></pre><p>What's more interesting is that you can now deserialize subclasses simply bycalling the superclass <code>from_*</code> method, which is very useful:</p><pre lang=python3><span class=n>disconnected_event</span> <span class=o>=</span> <span class=n>ClientEvent</span><span class=o>.</span><span class=n>from_dict</span><span class=p>(</span>    <span class=p>{</span><span class=s2>\"type\"</span><span class=p>:</span> <span class=s2>\"disconnected\"</span><span class=p>,</span> <span class=s2>\"client_ip\"</span><span class=p>:</span> <span class=s2>\"10.0.0.42\"</span><span class=p>}</span><span class=p>)</span><span class=k>assert</span> <span class=n>disconnected_event</span> <span class=o>==</span> <span class=n>ClientDisconnectedEvent</span><span class=p>(</span><span class=n>IPv4Address</span><span class=p>(</span><span class=s2>\"10.0.0.42\"</span><span class=p>))</span></pre><p>The same is applicable for subclasses without a common field:</p><pre lang=python3><span class=nd>@dataclass</span><span class=k>class</span> <span class=nc>Ingredient</span><span class=p>(</span><span class=n>DataClassDictMixin</span><span class=p>):</span>    <span class=n>name</span><span class=p>:</span> <span class=nb>str</span>    <span class=k>class</span> <span class=nc>Config</span><span class=p>:</span>        <span class=n>discriminator</span> <span class=o>=</span> <span class=n>Discriminator</span><span class=p>(</span><span class=n>include_subtypes</span><span class=o>=</span><span class=kc>True</span><span class=p>)</span><span class=o>...</span><span class=n>celery</span> <span class=o>=</span> <span class=n>Ingredient</span><span class=o>.</span><span class=n>from_dict</span><span class=p>({</span><span class=s2>\"name\"</span><span class=p>:</span> <span class=s2>\"celery from my garden\"</span><span class=p>,</span> <span class=s2>\"pieces\"</span><span class=p>:</span> <span class=mi>5</span><span class=p>})</span><span class=k>assert</span> <span class=n>celery</span> <span class=o>==</span> <span class=n>Celery</span><span class=p>(</span><span class=n>name</span><span class=o>=</span><span class=s2>\"celery from my garden\"</span><span class=p>,</span> <span class=n>pieces</span><span class=o>=</span><span class=mi>5</span><span class=p>)</span></pre><h4>Working with union of classes</h4><p>Deserialization of union of types distinguishable by a particular field willbe much faster using <code>Discriminator</code> because there will be no traversalof all classes and an attempt to deserialize each of them.Usually this approach can be used when you have multiple classes without acommon superclass or when you only need to deserialize some of the subclasses.In the following example we will use <code>include_supertypes=True</code> todeserialize two subclasses out of three:</p><pre lang=python3><span class=kn>from</span> <span class=nn>dataclasses</span> <span class=kn>import</span> <span class=n>dataclass</span><span class=kn>from</span> <span class=nn>typing</span> <span class=kn>import</span> <span class=n>Annotated</span><span class=p>,</span> <span class=n>Literal</span><span class=p>,</span> <span class=n>Union</span><span class=c1># or from typing_extensions import Annotated</span><span class=kn>from</span> <span class=nn>mashumaro</span> <span class=kn>import</span> <span class=n>DataClassDictMixin</span><span class=kn>from</span> <span class=nn>mashumaro.types</span> <span class=kn>import</span> <span class=n>Discriminator</span><span class=nd>@dataclass</span><span class=k>class</span> <span class=nc>Event</span><span class=p>(</span><span class=n>DataClassDictMixin</span><span class=p>):</span>    <span class=k>pass</span><span class=nd>@dataclass</span><span class=k>class</span> <span class=nc>Event1</span><span class=p>(</span><span class=n>Event</span><span class=p>):</span>    <span class=n>code</span><span class=p>:</span> <span class=n>Literal</span><span class=p>[</span><span class=mi>1</span><span class=p>]</span> <span class=o>=</span> <span class=mi>1</span>    <span class=o>...</span><span class=nd>@dataclass</span><span class=k>class</span> <span class=nc>Event2</span><span class=p>(</span><span class=n>Event</span><span class=p>):</span>    <span class=n>code</span><span class=p>:</span> <span class=n>Literal</span><span class=p>[</span><span class=mi>2</span><span class=p>]</span> <span class=o>=</span> <span class=mi>2</span>    <span class=o>...</span><span class=nd>@dataclass</span><span class=k>class</span> <span class=nc>Event3</span><span class=p>(</span><span class=n>Event</span><span class=p>):</span>    <span class=n>code</span><span class=p>:</span> <span class=n>Literal</span><span class=p>[</span><span class=mi>3</span><span class=p>]</span> <span class=o>=</span> <span class=mi>3</span>    <span class=o>...</span><span class=nd>@dataclass</span><span class=k>class</span> <span class=nc>Message</span><span class=p>(</span><span class=n>DataClassDictMixin</span><span class=p>):</span>    <span class=n>event</span><span class=p>:</span> <span class=n>Annotated</span><span class=p>[</span>        <span class=n>Union</span><span class=p>[</span><span class=n>Event1</span><span class=p>,</span> <span class=n>Event2</span><span class=p>],</span>        <span class=n>Discriminator</span><span class=p>(</span><span class=n>field</span><span class=o>=</span><span class=s2>\"code\"</span><span class=p>,</span> <span class=n>include_supertypes</span><span class=o>=</span><span class=kc>True</span><span class=p>),</span>    <span class=p>]</span><span class=n>event1_msg</span> <span class=o>=</span> <span class=n>Message</span><span class=o>.</span><span class=n>from_dict</span><span class=p>({</span><span class=s2>\"event\"</span><span class=p>:</span> <span class=p>{</span><span class=s2>\"code\"</span><span class=p>:</span> <span class=mi>1</span><span class=p>,</span> <span class=o>...</span><span class=p>}})</span><span class=n>event2_msg</span> <span class=o>=</span> <span class=n>Message</span><span class=o>.</span><span class=n>from_dict</span><span class=p>({</span><span class=s2>\"event\"</span><span class=p>:</span> <span class=p>{</span><span class=s2>\"code\"</span><span class=p>:</span> <span class=mi>2</span><span class=p>,</span> <span class=o>...</span><span class=p>}})</span><span class=k>assert</span> <span class=nb>isinstance</span><span class=p>(</span><span class=n>event1_msg</span><span class=o>.</span><span class=n>event</span><span class=p>,</span> <span class=n>Event1</span><span class=p>)</span><span class=k>assert</span> <span class=nb>isinstance</span><span class=p>(</span><span class=n>event2_msg</span><span class=o>.</span><span class=n>event</span><span class=p>,</span> <span class=n>Event2</span><span class=p>)</span><span class=c1># raises InvalidFieldValue:</span><span class=n>Message</span><span class=o>.</span><span class=n>from_dict</span><span class=p>({</span><span class=s2>\"event\"</span><span class=p>:</span> <span class=p>{</span><span class=s2>\"code\"</span><span class=p>:</span> <span class=mi>3</span><span class=p>,</span> <span class=o>...</span><span class=p>}})</span></pre><p>Again, it's not necessary to have a common superclass. If you have a union ofdataclasses without a field that they can be distinguishable by, you can stilluse <code>Discriminator</code>, but deserialization will almost be the same as for <code>Union</code>type without <code>Discriminator</code> except that it could be possible to deserializesubclasses with <code>include_subtypes=True</code>.</p><blockquote><p>[!IMPORTANT]<br>When both <code>include_subtypes</code> and <code>include_supertypes</code> are enabled,all subclasses will be attempted to be deserialized first,superclasses \u2014 at the end.</p></blockquote><p>In the following example you can see how priority works \u2014 first we tryto deserialize <code>ChickpeaHummus</code>, and if it fails, then we try <code>Hummus</code>:</p><pre lang=python3><span class=nd>@dataclass</span><span class=k>class</span> <span class=nc>Hummus</span><span class=p>(</span><span class=n>DataClassDictMixin</span><span class=p>):</span>    <span class=n>made_of</span><span class=p>:</span> <span class=n>Literal</span><span class=p>[</span><span class=s2>\"chickpeas\"</span><span class=p>,</span> <span class=s2>\"artichoke\"</span><span class=p>]</span>    <span class=n>grams</span><span class=p>:</span> <span class=nb>int</span><span class=nd>@dataclass</span><span class=k>class</span> <span class=nc>ChickpeaHummus</span><span class=p>(</span><span class=n>Hummus</span><span class=p>):</span>    <span class=n>made_of</span><span class=p>:</span> <span class=n>Literal</span><span class=p>[</span><span class=s2>\"chickpeas\"</span><span class=p>]</span><span class=nd>@dataclass</span><span class=k>class</span> <span class=nc>Celery</span><span class=p>(</span><span class=n>DataClassDictMixin</span><span class=p>):</span>    <span class=n>pieces</span><span class=p>:</span> <span class=nb>int</span><span class=nd>@dataclass</span><span class=k>class</span> <span class=nc>Plate</span><span class=p>(</span><span class=n>DataClassDictMixin</span><span class=p>):</span>    <span class=n>ingredients</span><span class=p>:</span> <span class=n>List</span><span class=p>[</span>        <span class=n>Annotated</span><span class=p>[</span>            <span class=n>Union</span><span class=p>[</span><span class=n>Hummus</span><span class=p>,</span> <span class=n>Celery</span><span class=p>],</span>            <span class=n>Discriminator</span><span class=p>(</span><span class=n>include_subtypes</span><span class=o>=</span><span class=kc>True</span><span class=p>,</span> <span class=n>include_supertypes</span><span class=o>=</span><span class=kc>True</span><span class=p>),</span>        <span class=p>]</span>    <span class=p>]</span><span class=n>plate</span> <span class=o>=</span> <span class=n>Plate</span><span class=o>.</span><span class=n>from_dict</span><span class=p>(</span>    <span class=p>{</span>        <span class=s2>\"ingredients\"</span><span class=p>:</span> <span class=p>[</span>            <span class=p>{</span><span class=s2>\"made_of\"</span><span class=p>:</span> <span class=s2>\"chickpeas\"</span><span class=p>,</span> <span class=s2>\"grams\"</span><span class=p>:</span> <span class=mi>100</span><span class=p>},</span>            <span class=p>{</span><span class=s2>\"made_of\"</span><span class=p>:</span> <span class=s2>\"artichoke\"</span><span class=p>,</span> <span class=s2>\"grams\"</span><span class=p>:</span> <span class=mi>50</span><span class=p>},</span>            <span class=p>{</span><span class=s2>\"pieces\"</span><span class=p>:</span> <span class=mi>4</span><span class=p>},</span>        <span class=p>]</span>    <span class=p>}</span><span class=p>)</span><span class=k>assert</span> <span class=n>plate</span> <span class=o>==</span> <span class=n>Plate</span><span class=p>(</span>    <span class=n>ingredients</span><span class=o>=</span><span class=p>[</span>        <span class=n>ChickpeaHummus</span><span class=p>(</span><span class=n>made_of</span><span class=o>=</span><span class=s1>'chickpeas'</span><span class=p>,</span> <span class=n>grams</span><span class=o>=</span><span class=mi>100</span><span class=p>),</span>  <span class=c1># &lt;- subclass</span>        <span class=n>Hummus</span><span class=p>(</span><span class=n>made_of</span><span class=o>=</span><span class=s1>'artichoke'</span><span class=p>,</span> <span class=n>grams</span><span class=o>=</span><span class=mi>50</span><span class=p>),</span>  <span class=c1># &lt;- superclass</span>        <span class=n>Celery</span><span class=p>(</span><span class=n>pieces</span><span class=o>=</span><span class=mi>4</span><span class=p>),</span>    <span class=p>]</span><span class=p>)</span></pre><h4>Using a custom variant tagger function</h4><p>Sometimes it is impractical to have a class-level attribute with a tag value,especially when you have a lot of classes. We can have a custom taggerfunction instead. This method is applicable for all scenarios of usingthe discriminator, but for demonstration purposes, let's focus only on oneof them.</p><p>Suppose we want to use the middle part of <code>Client*Event</code> as a tag value:</p><pre lang=python3><span class=kn>from</span> <span class=nn>dataclasses</span> <span class=kn>import</span> <span class=n>dataclass</span><span class=kn>from</span> <span class=nn>ipaddress</span> <span class=kn>import</span> <span class=n>IPv4Address</span><span class=kn>from</span> <span class=nn>mashumaro</span> <span class=kn>import</span> <span class=n>DataClassDictMixin</span><span class=kn>from</span> <span class=nn>mashumaro.config</span> <span class=kn>import</span> <span class=n>BaseConfig</span><span class=kn>from</span> <span class=nn>mashumaro.types</span> <span class=kn>import</span> <span class=n>Discriminator</span><span class=k>def</span> <span class=nf>client_event_tagger</span><span class=p>(</span><span class=bp>cls</span><span class=p>):</span>    <span class=c1># not the best way of doing it, it's just a demo</span>    <span class=k>return</span> <span class=bp>cls</span><span class=o>.</span><span class=vm>__name__</span><span class=p>[</span><span class=mi>6</span><span class=p>:</span><span class=o>-</span><span class=mi>5</span><span class=p>]</span><span class=o>.</span><span class=n>lower</span><span class=p>()</span><span class=nd>@dataclass</span><span class=k>class</span> <span class=nc>ClientEvent</span><span class=p>(</span><span class=n>DataClassDictMixin</span><span class=p>):</span>    <span class=k>class</span> <span class=nc>Config</span><span class=p>(</span><span class=n>BaseConfig</span><span class=p>):</span>        <span class=n>discriminator</span> <span class=o>=</span> <span class=n>Discriminator</span><span class=p>(</span>            <span class=n>field</span><span class=o>=</span><span class=s2>\"type\"</span><span class=p>,</span>            <span class=n>include_subtypes</span><span class=o>=</span><span class=kc>True</span><span class=p>,</span>            <span class=n>variant_tagger_fn</span><span class=o>=</span><span class=n>client_event_tagger</span><span class=p>,</span>        <span class=p>)</span><span class=nd>@dataclass</span><span class=k>class</span> <span class=nc>ClientConnectedEvent</span><span class=p>(</span><span class=n>ClientEvent</span><span class=p>):</span>    <span class=n>client_ip</span><span class=p>:</span> <span class=n>IPv4Address</span><span class=nd>@dataclass</span><span class=k>class</span> <span class=nc>ClientDisconnectedEvent</span><span class=p>(</span><span class=n>ClientEvent</span><span class=p>):</span>    <span class=n>client_ip</span><span class=p>:</span> <span class=n>IPv4Address</span></pre><p>We can now deserialize subclasses as we did it earlier<a href=#class-level-discriminator rel=nofollow>without variant tagger</a>:</p><pre lang=python3><span class=n>disconnected_event</span> <span class=o>=</span> <span class=n>ClientEvent</span><span class=o>.</span><span class=n>from_dict</span><span class=p>(</span>    <span class=p>{</span><span class=s2>\"type\"</span><span class=p>:</span> <span class=s2>\"disconnected\"</span><span class=p>,</span> <span class=s2>\"client_ip\"</span><span class=p>:</span> <span class=s2>\"10.0.0.42\"</span><span class=p>}</span><span class=p>)</span><span class=k>assert</span> <span class=n>disconnected_event</span> <span class=o>==</span> <span class=n>ClientDisconnectedEvent</span><span class=p>(</span><span class=n>IPv4Address</span><span class=p>(</span><span class=s2>\"10.0.0.42\"</span><span class=p>))</span></pre><p>If we need to associate multiple tags with a single variant, we can returna list of tags:</p><pre lang=python3><span class=k>def</span> <span class=nf>client_event_tagger</span><span class=p>(</span><span class=bp>cls</span><span class=p>):</span>    <span class=n>name</span> <span class=o>=</span> <span class=bp>cls</span><span class=o>.</span><span class=vm>__name__</span><span class=p>[</span><span class=mi>6</span><span class=p>:</span><span class=o>-</span><span class=mi>5</span><span class=p>]</span>    <span class=k>return</span> <span class=p>[</span><span class=n>name</span><span class=o>.</span><span class=n>lower</span><span class=p>(),</span> <span class=n>name</span><span class=o>.</span><span class=n>upper</span><span class=p>()]</span></pre><h3>Code generation options</h3><h4>Add <code>omit_none</code> keyword argument</h4><p>If you want to have control over whether to skip <code>None</code> values on serializationyou can add <code>omit_none</code> parameter to <code>to_*</code> methods using the<code>code_generation_options</code> list. The default value of <code>omit_none</code>parameter depends on whether the <a href=#omit_none-config-option rel=nofollow><code>omit_none</code></a>config option or <a href=#omit_none-dialect-option rel=nofollow><code>omit_none</code></a> dialect option is enabled.</p><pre lang=python3><span class=kn>from</span> <span class=nn>dataclasses</span> <span class=kn>import</span> <span class=n>dataclass</span><span class=kn>from</span> <span class=nn>mashumaro</span> <span class=kn>import</span> <span class=n>DataClassDictMixin</span><span class=kn>from</span> <span class=nn>mashumaro.config</span> <span class=kn>import</span> <span class=n>BaseConfig</span><span class=p>,</span> <span class=n>TO_DICT_ADD_OMIT_NONE_FLAG</span><span class=nd>@dataclass</span><span class=k>class</span> <span class=nc>Inner</span><span class=p>(</span><span class=n>DataClassDictMixin</span><span class=p>):</span>    <span class=n>x</span><span class=p>:</span> <span class=nb>int</span> <span class=o>=</span> <span class=kc>None</span>    <span class=c1># \"x\" won't be omitted since there is no TO_DICT_ADD_OMIT_NONE_FLAG here</span><span class=nd>@dataclass</span><span class=k>class</span> <span class=nc>Model</span><span class=p>(</span><span class=n>DataClassDictMixin</span><span class=p>):</span>    <span class=n>x</span><span class=p>:</span> <span class=n>Inner</span>    <span class=n>a</span><span class=p>:</span> <span class=nb>int</span> <span class=o>=</span> <span class=kc>None</span>    <span class=n>b</span><span class=p>:</span> <span class=nb>str</span> <span class=o>=</span> <span class=kc>None</span>  <span class=c1># will be omitted</span>    <span class=k>class</span> <span class=nc>Config</span><span class=p>(</span><span class=n>BaseConfig</span><span class=p>):</span>        <span class=n>code_generation_options</span> <span class=o>=</span> <span class=p>[</span><span class=n>TO_DICT_ADD_OMIT_NONE_FLAG</span><span class=p>]</span><span class=n>Model</span><span class=p>(</span><span class=n>x</span><span class=o>=</span><span class=n>Inner</span><span class=p>(),</span> <span class=n>a</span><span class=o>=</span><span class=mi>1</span><span class=p>)</span><span class=o>.</span><span class=n>to_dict</span><span class=p>(</span><span class=n>omit_none</span><span class=o>=</span><span class=kc>True</span><span class=p>)</span>  <span class=c1># {'x': {'x': None}, 'a': 1}</span></pre><h4>Add <code>by_alias</code> keyword argument</h4><p>If you want to have control over whether to serialize fields by their<a href=#alias-option rel=nofollow>aliases</a> you can add <code>by_alias</code> parameter to <code>to_*</code> methodsusing the <code>code_generation_options</code> list. The default value of <code>by_alias</code>parameter depends on whether the <a href=#serialize_by_alias-config-option rel=nofollow><code>serialize_by_alias</code></a>config option is enabled.</p><pre lang=python3><span class=kn>from</span> <span class=nn>dataclasses</span> <span class=kn>import</span> <span class=n>dataclass</span><span class=p>,</span> <span class=n>field</span><span class=kn>from</span> <span class=nn>mashumaro</span> <span class=kn>import</span> <span class=n>DataClassDictMixin</span><span class=p>,</span> <span class=n>field_options</span><span class=kn>from</span> <span class=nn>mashumaro.config</span> <span class=kn>import</span> <span class=n>BaseConfig</span><span class=p>,</span> <span class=n>TO_DICT_ADD_BY_ALIAS_FLAG</span><span class=nd>@dataclass</span><span class=k>class</span> <span class=nc>DataClass</span><span class=p>(</span><span class=n>DataClassDictMixin</span><span class=p>):</span>    <span class=n>field_a</span><span class=p>:</span> <span class=nb>int</span> <span class=o>=</span> <span class=n>field</span><span class=p>(</span><span class=n>metadata</span><span class=o>=</span><span class=n>field_options</span><span class=p>(</span><span class=n>alias</span><span class=o>=</span><span class=s2>\"FieldA\"</span><span class=p>))</span>    <span class=k>class</span> <span class=nc>Config</span><span class=p>(</span><span class=n>BaseConfig</span><span class=p>):</span>        <span class=n>code_generation_options</span> <span class=o>=</span> <span class=p>[</span><span class=n>TO_DICT_ADD_BY_ALIAS_FLAG</span><span class=p>]</span><span class=n>DataClass</span><span class=p>(</span><span class=n>field_a</span><span class=o>=</span><span class=mi>1</span><span class=p>)</span><span class=o>.</span><span class=n>to_dict</span><span class=p>()</span>  <span class=c1># {'field_a': 1}</span><span class=n>DataClass</span><span class=p>(</span><span class=n>field_a</span><span class=o>=</span><span class=mi>1</span><span class=p>)</span><span class=o>.</span><span class=n>to_dict</span><span class=p>(</span><span class=n>by_alias</span><span class=o>=</span><span class=kc>True</span><span class=p>)</span>  <span class=c1># {'FieldA': 1}</span></pre><h4>Add <code>dialect</code> keyword argument</h4><p>Support for <a href=#dialects rel=nofollow>dialects</a> is disabled by default for performance reasons. You can enableit using a <code>ADD_DIALECT_SUPPORT</code> constant:</p><pre lang=python3><span class=kn>from</span> <span class=nn>dataclasses</span> <span class=kn>import</span> <span class=n>dataclass</span><span class=kn>from</span> <span class=nn>datetime</span> <span class=kn>import</span> <span class=n>date</span><span class=kn>from</span> <span class=nn>mashumaro</span> <span class=kn>import</span> <span class=n>DataClassDictMixin</span><span class=kn>from</span> <span class=nn>mashumaro.config</span> <span class=kn>import</span> <span class=n>BaseConfig</span><span class=p>,</span> <span class=n>ADD_DIALECT_SUPPORT</span><span class=nd>@dataclass</span><span class=k>class</span> <span class=nc>Entity</span><span class=p>(</span><span class=n>DataClassDictMixin</span><span class=p>):</span>    <span class=n>dt</span><span class=p>:</span> <span class=n>date</span>    <span class=k>class</span> <span class=nc>Config</span><span class=p>(</span><span class=n>BaseConfig</span><span class=p>):</span>        <span class=n>code_generation_options</span> <span class=o>=</span> <span class=p>[</span><span class=n>ADD_DIALECT_SUPPORT</span><span class=p>]</span></pre><h4>Add <code>context</code> keyword argument</h4><p>Sometimes it's needed to pass a \"context\" object to the serialization hooksthat will take it into account. For example, you could want to have an optionto remove sensitive data from the serialization result if you need to.You can add <code>context</code> parameter to <code>to_*</code> methods that will be passed to<a href=#before-serialization rel=nofollow><code>__pre_serialize__</code></a> and<a href=#after-serialization rel=nofollow><code>__post_serialize__</code></a> hooks. The type of this contextas well as its mutability is up to you.</p><pre lang=python3><span class=kn>from</span> <span class=nn>dataclasses</span> <span class=kn>import</span> <span class=n>dataclass</span><span class=kn>from</span> <span class=nn>typing</span> <span class=kn>import</span> <span class=n>Dict</span><span class=p>,</span> <span class=n>Optional</span><span class=kn>from</span> <span class=nn>uuid</span> <span class=kn>import</span> <span class=n>UUID</span><span class=kn>from</span> <span class=nn>mashumaro</span> <span class=kn>import</span> <span class=n>DataClassDictMixin</span><span class=kn>from</span> <span class=nn>mashumaro.config</span> <span class=kn>import</span> <span class=n>BaseConfig</span><span class=p>,</span> <span class=n>ADD_SERIALIZATION_CONTEXT</span><span class=k>class</span> <span class=nc>BaseModel</span><span class=p>(</span><span class=n>DataClassDictMixin</span><span class=p>):</span>    <span class=k>class</span> <span class=nc>Config</span><span class=p>(</span><span class=n>BaseConfig</span><span class=p>):</span>        <span class=n>code_generation_options</span> <span class=o>=</span> <span class=p>[</span><span class=n>ADD_SERIALIZATION_CONTEXT</span><span class=p>]</span><span class=nd>@dataclass</span><span class=k>class</span> <span class=nc>Account</span><span class=p>(</span><span class=n>BaseModel</span><span class=p>):</span>    <span class=nb>id</span><span class=p>:</span> <span class=n>UUID</span>    <span class=n>username</span><span class=p>:</span> <span class=nb>str</span>    <span class=n>name</span><span class=p>:</span> <span class=nb>str</span>    <span class=k>def</span> <span class=nf>__pre_serialize__</span><span class=p>(</span><span class=bp>self</span><span class=p>,</span> <span class=n>context</span><span class=p>:</span> <span class=n>Optional</span><span class=p>[</span><span class=n>Dict</span><span class=p>]</span> <span class=o>=</span> <span class=kc>None</span><span class=p>):</span>        <span class=k>return</span> <span class=bp>self</span>    <span class=k>def</span> <span class=nf>__post_serialize__</span><span class=p>(</span><span class=bp>self</span><span class=p>,</span> <span class=n>d</span><span class=p>:</span> <span class=n>Dict</span><span class=p>,</span> <span class=n>context</span><span class=p>:</span> <span class=n>Optional</span><span class=p>[</span><span class=n>Dict</span><span class=p>]</span> <span class=o>=</span> <span class=kc>None</span><span class=p>):</span>        <span class=k>if</span> <span class=n>context</span> <span class=ow>and</span> <span class=n>context</span><span class=o>.</span><span class=n>get</span><span class=p>(</span><span class=s2>\"remove_sensitive_data\"</span><span class=p>):</span>            <span class=n>d</span><span class=p>[</span><span class=s2>\"username\"</span><span class=p>]</span> <span class=o>=</span> <span class=s2>\"***\"</span>            <span class=n>d</span><span class=p>[</span><span class=s2>\"name\"</span><span class=p>]</span> <span class=o>=</span> <span class=s2>\"***\"</span>        <span class=k>return</span> <span class=n>d</span><span class=nd>@dataclass</span><span class=k>class</span> <span class=nc>Session</span><span class=p>(</span><span class=n>BaseModel</span><span class=p>):</span>    <span class=nb>id</span><span class=p>:</span> <span class=n>UUID</span>    <span class=n>key</span><span class=p>:</span> <span class=nb>str</span>    <span class=n>account</span><span class=p>:</span> <span class=n>Account</span>    <span class=k>def</span> <span class=nf>__pre_serialize__</span><span class=p>(</span><span class=bp>self</span><span class=p>,</span> <span class=n>context</span><span class=p>:</span> <span class=n>Optional</span><span class=p>[</span><span class=n>Dict</span><span class=p>]</span> <span class=o>=</span> <span class=kc>None</span><span class=p>):</span>        <span class=k>return</span> <span class=bp>self</span>    <span class=k>def</span> <span class=nf>__post_serialize__</span><span class=p>(</span><span class=bp>self</span><span class=p>,</span> <span class=n>d</span><span class=p>:</span> <span class=n>Dict</span><span class=p>,</span> <span class=n>context</span><span class=p>:</span> <span class=n>Optional</span><span class=p>[</span><span class=n>Dict</span><span class=p>]</span> <span class=o>=</span> <span class=kc>None</span><span class=p>):</span>        <span class=k>if</span> <span class=n>context</span> <span class=ow>and</span> <span class=n>context</span><span class=o>.</span><span class=n>get</span><span class=p>(</span><span class=s2>\"remove_sensitive_data\"</span><span class=p>):</span>            <span class=n>d</span><span class=p>[</span><span class=s2>\"key\"</span><span class=p>]</span> <span class=o>=</span> <span class=s2>\"***\"</span>        <span class=k>return</span> <span class=n>d</span><span class=n>foo</span> <span class=o>=</span> <span class=n>Session</span><span class=p>(</span>    <span class=nb>id</span><span class=o>=</span><span class=n>UUID</span><span class=p>(</span><span class=s1>'03321c9f-6a97-421e-9869-918ff2867a71'</span><span class=p>),</span>    <span class=n>key</span><span class=o>=</span><span class=s2>\"VQ6Q9bX4c8s\"</span><span class=p>,</span>    <span class=n>account</span><span class=o>=</span><span class=n>Account</span><span class=p>(</span>        <span class=nb>id</span><span class=o>=</span><span class=n>UUID</span><span class=p>(</span><span class=s1>'4ef2baa7-edef-4d6a-b496-71e6d72c58fb'</span><span class=p>),</span>        <span class=n>username</span><span class=o>=</span><span class=s2>\"john_doe\"</span><span class=p>,</span>        <span class=n>name</span><span class=o>=</span><span class=s2>\"John\"</span>    <span class=p>)</span><span class=p>)</span><span class=k>assert</span> <span class=n>foo</span><span class=o>.</span><span class=n>to_dict</span><span class=p>()</span> <span class=o>==</span> <span class=p>{</span>    <span class=s1>'id'</span><span class=p>:</span> <span class=s1>'03321c9f-6a97-421e-9869-918ff2867a71'</span><span class=p>,</span>    <span class=s1>'key'</span><span class=p>:</span> <span class=s1>'VQ6Q9bX4c8s'</span><span class=p>,</span>    <span class=s1>'account'</span><span class=p>:</span> <span class=p>{</span>        <span class=s1>'id'</span><span class=p>:</span> <span class=s1>'4ef2baa7-edef-4d6a-b496-71e6d72c58fb'</span><span class=p>,</span>        <span class=s1>'username'</span><span class=p>:</span> <span class=s1>'john_doe'</span><span class=p>,</span>        <span class=s1>'name'</span><span class=p>:</span> <span class=s1>'John'</span>    <span class=p>}</span><span class=p>}</span><span class=k>assert</span> <span class=n>foo</span><span class=o>.</span><span class=n>to_dict</span><span class=p>(</span><span class=n>context</span><span class=o>=</span><span class=p>{</span><span class=s2>\"remove_sensitive_data\"</span><span class=p>:</span> <span class=kc>True</span><span class=p>})</span> <span class=o>==</span> <span class=p>{</span>    <span class=s1>'id'</span><span class=p>:</span> <span class=s1>'03321c9f-6a97-421e-9869-918ff2867a71'</span><span class=p>,</span>    <span class=s1>'key'</span><span class=p>:</span> <span class=s1>'***'</span><span class=p>,</span>    <span class=s1>'account'</span><span class=p>:</span> <span class=p>{</span>        <span class=s1>'id'</span><span class=p>:</span> <span class=s1>'4ef2baa7-edef-4d6a-b496-71e6d72c58fb'</span><span class=p>,</span>        <span class=s1>'username'</span><span class=p>:</span> <span class=s1>'***'</span><span class=p>,</span>        <span class=s1>'name'</span><span class=p>:</span> <span class=s1>'***'</span>    <span class=p>}</span><span class=p>}</span></pre><h3>Generic dataclasses</h3><p>Along with <a href=#user-defined-generic-types rel=nofollow>user-defined generic types</a>implementing <code>SerializableType</code> interface, generic and variadicgeneric dataclasses can also be used. There are two applicable scenariosfor them.</p><h4>Generic dataclass inheritance</h4><p>If you have a generic dataclass and want to serialize and deserialize itsinstances depending on the concrete types, you can use inheritance for that:</p><pre lang=python3><span class=kn>from</span> <span class=nn>dataclasses</span> <span class=kn>import</span> <span class=n>dataclass</span><span class=kn>from</span> <span class=nn>datetime</span> <span class=kn>import</span> <span class=n>date</span><span class=kn>from</span> <span class=nn>typing</span> <span class=kn>import</span> <span class=n>Generic</span><span class=p>,</span> <span class=n>Mapping</span><span class=p>,</span> <span class=n>TypeVar</span><span class=p>,</span> <span class=n>TypeVarTuple</span><span class=kn>from</span> <span class=nn>mashumaro</span> <span class=kn>import</span> <span class=n>DataClassDictMixin</span><span class=n>KT</span> <span class=o>=</span> <span class=n>TypeVar</span><span class=p>(</span><span class=s2>\"KT\"</span><span class=p>)</span><span class=n>VT</span> <span class=o>=</span> <span class=n>TypeVar</span><span class=p>(</span><span class=s2>\"VT\"</span><span class=p>,</span> <span class=n>date</span><span class=p>,</span> <span class=nb>str</span><span class=p>)</span><span class=n>Ts</span> <span class=o>=</span> <span class=n>TypeVarTuple</span><span class=p>(</span><span class=s2>\"Ts\"</span><span class=p>)</span><span class=nd>@dataclass</span><span class=k>class</span> <span class=nc>GenericDataClass</span><span class=p>(</span><span class=n>Generic</span><span class=p>[</span><span class=n>KT</span><span class=p>,</span> <span class=n>VT</span><span class=p>,</span> <span class=o>*</span><span class=n>Ts</span><span class=p>]):</span>    <span class=n>x</span><span class=p>:</span> <span class=n>Mapping</span><span class=p>[</span><span class=n>KT</span><span class=p>,</span> <span class=n>VT</span><span class=p>]</span>    <span class=n>y</span><span class=p>:</span> <span class=n>Tuple</span><span class=p>[</span><span class=o>*</span><span class=n>Ts</span><span class=p>,</span> <span class=n>KT</span><span class=p>]</span><span class=nd>@dataclass</span><span class=k>class</span> <span class=nc>ConcreteDataClass</span><span class=p>(</span>    <span class=n>GenericDataClass</span><span class=p>[</span><span class=nb>str</span><span class=p>,</span> <span class=n>date</span><span class=p>,</span> <span class=o>*</span><span class=n>Tuple</span><span class=p>[</span><span class=nb>float</span><span class=p>,</span> <span class=o>...</span><span class=p>]],</span>    <span class=n>DataClassDictMixin</span><span class=p>,</span><span class=p>):</span>    <span class=k>pass</span><span class=n>ConcreteDataClass</span><span class=o>.</span><span class=n>from_dict</span><span class=p>({</span><span class=s2>\"x\"</span><span class=p>:</span> <span class=p>{</span><span class=s2>\"a\"</span><span class=p>:</span> <span class=s2>\"2021-01-01\"</span><span class=p>},</span> <span class=s2>\"y\"</span><span class=p>:</span> <span class=p>[</span><span class=mi>1</span><span class=p>,</span> <span class=mi>2</span><span class=p>,</span> <span class=s2>\"a\"</span><span class=p>]})</span><span class=c1># ConcreteDataClass(x={'a': datetime.date(2021, 1, 1)}, y=(1.0, 2.0, 'a'))</span></pre><p>You can override <code>TypeVar</code> field with a concrete type or another <code>TypeVar</code>.Partial specification of concrete types is also allowed. If a generic dataclassis inherited without type overriding the types of its fields remain untouched.</p><h4>Generic dataclass in a field type</h4><p>Another approach is to specify concrete types in the field type hints. This canhelp to have different versions of the same generic dataclass:</p><pre lang=python3><span class=kn>from</span> <span class=nn>dataclasses</span> <span class=kn>import</span> <span class=n>dataclass</span><span class=kn>from</span> <span class=nn>datetime</span> <span class=kn>import</span> <span class=n>date</span><span class=kn>from</span> <span class=nn>typing</span> <span class=kn>import</span> <span class=n>Generic</span><span class=p>,</span> <span class=n>TypeVar</span><span class=kn>from</span> <span class=nn>mashumaro</span> <span class=kn>import</span> <span class=n>DataClassDictMixin</span><span class=n>T</span> <span class=o>=</span> <span class=n>TypeVar</span><span class=p>(</span><span class=s1>'T'</span><span class=p>)</span><span class=nd>@dataclass</span><span class=k>class</span> <span class=nc>GenericDataClass</span><span class=p>(</span><span class=n>Generic</span><span class=p>[</span><span class=n>T</span><span class=p>],</span> <span class=n>DataClassDictMixin</span><span class=p>):</span>    <span class=n>x</span><span class=p>:</span> <span class=n>T</span><span class=nd>@dataclass</span><span class=k>class</span> <span class=nc>DataClass</span><span class=p>(</span><span class=n>DataClassDictMixin</span><span class=p>):</span>    <span class=n>date</span><span class=p>:</span> <span class=n>GenericDataClass</span><span class=p>[</span><span class=n>date</span><span class=p>]</span>    <span class=nb>str</span><span class=p>:</span> <span class=n>GenericDataClass</span><span class=p>[</span><span class=nb>str</span><span class=p>]</span><span class=n>instance</span> <span class=o>=</span> <span class=n>DataClass</span><span class=p>(</span>    <span class=n>date</span><span class=o>=</span><span class=n>GenericDataClass</span><span class=p>(</span><span class=n>x</span><span class=o>=</span><span class=n>date</span><span class=p>(</span><span class=mi>2021</span><span class=p>,</span> <span class=mi>1</span><span class=p>,</span> <span class=mi>1</span><span class=p>)),</span>    <span class=nb>str</span><span class=o>=</span><span class=n>GenericDataClass</span><span class=p>(</span><span class=n>x</span><span class=o>=</span><span class=s1>'2021-01-01'</span><span class=p>),</span><span class=p>)</span><span class=n>dictionary</span> <span class=o>=</span> <span class=p>{</span><span class=s1>'date'</span><span class=p>:</span> <span class=p>{</span><span class=s1>'x'</span><span class=p>:</span> <span class=s1>'2021-01-01'</span><span class=p>},</span> <span class=s1>'str'</span><span class=p>:</span> <span class=p>{</span><span class=s1>'x'</span><span class=p>:</span> <span class=s1>'2021-01-01'</span><span class=p>}}</span><span class=k>assert</span> <span class=n>DataClass</span><span class=o>.</span><span class=n>from_dict</span><span class=p>(</span><span class=n>dictionary</span><span class=p>)</span> <span class=o>==</span> <span class=n>instance</span></pre><h3>GenericSerializableType interface</h3><p>There is a generic alternative to <a href=#serializabletype-interface rel=nofollow><code>SerializableType</code></a>called <code>GenericSerializableType</code>. It makes it possible to decide yourself howto serialize and deserialize input data depending on the types provided:</p><pre lang=python3><span class=kn>from</span> <span class=nn>dataclasses</span> <span class=kn>import</span> <span class=n>dataclass</span><span class=kn>from</span> <span class=nn>datetime</span> <span class=kn>import</span> <span class=n>date</span><span class=kn>from</span> <span class=nn>typing</span> <span class=kn>import</span> <span class=n>Dict</span><span class=p>,</span> <span class=n>TypeVar</span><span class=kn>from</span> <span class=nn>mashumaro</span> <span class=kn>import</span> <span class=n>DataClassDictMixin</span><span class=kn>from</span> <span class=nn>mashumaro.types</span> <span class=kn>import</span> <span class=n>GenericSerializableType</span><span class=n>KT</span> <span class=o>=</span> <span class=n>TypeVar</span><span class=p>(</span><span class=s2>\"KT\"</span><span class=p>)</span><span class=n>VT</span> <span class=o>=</span> <span class=n>TypeVar</span><span class=p>(</span><span class=s2>\"VT\"</span><span class=p>)</span><span class=k>class</span> <span class=nc>DictWrapper</span><span class=p>(</span><span class=n>Dict</span><span class=p>[</span><span class=n>KT</span><span class=p>,</span> <span class=n>VT</span><span class=p>],</span> <span class=n>GenericSerializableType</span><span class=p>):</span>    <span class=n>__packers__</span> <span class=o>=</span> <span class=p>{</span><span class=n>date</span><span class=p>:</span> <span class=k>lambda</span> <span class=n>x</span><span class=p>:</span> <span class=n>x</span><span class=o>.</span><span class=n>isoformat</span><span class=p>(),</span> <span class=nb>str</span><span class=p>:</span> <span class=nb>str</span><span class=p>}</span>    <span class=n>__unpackers__</span> <span class=o>=</span> <span class=p>{</span><span class=n>date</span><span class=p>:</span> <span class=n>date</span><span class=o>.</span><span class=n>fromisoformat</span><span class=p>,</span> <span class=nb>str</span><span class=p>:</span> <span class=nb>str</span><span class=p>}</span>    <span class=k>def</span> <span class=nf>_serialize</span><span class=p>(</span><span class=bp>self</span><span class=p>,</span> <span class=n>types</span><span class=p>)</span> <span class=o>-&gt;</span> <span class=n>Dict</span><span class=p>[</span><span class=n>KT</span><span class=p>,</span> <span class=n>VT</span><span class=p>]:</span>        <span class=n>k_type</span><span class=p>,</span> <span class=n>v_type</span> <span class=o>=</span> <span class=n>types</span>        <span class=n>k_conv</span> <span class=o>=</span> <span class=bp>self</span><span class=o>.</span><span class=n>__packers__</span><span class=p>[</span><span class=n>k_type</span><span class=p>]</span>        <span class=n>v_conv</span> <span class=o>=</span> <span class=bp>self</span><span class=o>.</span><span class=n>__packers__</span><span class=p>[</span><span class=n>v_type</span><span class=p>]</span>        <span class=k>return</span> <span class=p>{</span><span class=n>k_conv</span><span class=p>(</span><span class=n>k</span><span class=p>):</span> <span class=n>v_conv</span><span class=p>(</span><span class=n>v</span><span class=p>)</span> <span class=k>for</span> <span class=n>k</span><span class=p>,</span> <span class=n>v</span> <span class=ow>in</span> <span class=bp>self</span><span class=o>.</span><span class=n>items</span><span class=p>()}</span>    <span class=nd>@classmethod</span>    <span class=k>def</span> <span class=nf>_deserialize</span><span class=p>(</span><span class=bp>cls</span><span class=p>,</span> <span class=n>value</span><span class=p>,</span> <span class=n>types</span><span class=p>)</span> <span class=o>-&gt;</span> <span class=s2>\"DictWrapper[KT, VT]\"</span><span class=p>:</span>        <span class=n>k_type</span><span class=p>,</span> <span class=n>v_type</span> <span class=o>=</span> <span class=n>types</span>        <span class=n>k_conv</span> <span class=o>=</span> <span class=bp>cls</span><span class=o>.</span><span class=n>__unpackers__</span><span class=p>[</span><span class=n>k_type</span><span class=p>]</span>        <span class=n>v_conv</span> <span class=o>=</span> <span class=bp>cls</span><span class=o>.</span><span class=n>__unpackers__</span><span class=p>[</span><span class=n>v_type</span><span class=p>]</span>        <span class=k>return</span> <span class=bp>cls</span><span class=p>({</span><span class=n>k_conv</span><span class=p>(</span><span class=n>k</span><span class=p>):</span> <span class=n>v_conv</span><span class=p>(</span><span class=n>v</span><span class=p>)</span> <span class=k>for</span> <span class=n>k</span><span class=p>,</span> <span class=n>v</span> <span class=ow>in</span> <span class=n>value</span><span class=o>.</span><span class=n>items</span><span class=p>()})</span><span class=nd>@dataclass</span><span class=k>class</span> <span class=nc>DataClass</span><span class=p>(</span><span class=n>DataClassDictMixin</span><span class=p>):</span>    <span class=n>x</span><span class=p>:</span> <span class=n>DictWrapper</span><span class=p>[</span><span class=n>date</span><span class=p>,</span> <span class=nb>str</span><span class=p>]</span>    <span class=n>y</span><span class=p>:</span> <span class=n>DictWrapper</span><span class=p>[</span><span class=nb>str</span><span class=p>,</span> <span class=n>date</span><span class=p>]</span><span class=n>input_data</span> <span class=o>=</span> <span class=p>{</span>    <span class=s2>\"x\"</span><span class=p>:</span> <span class=p>{</span><span class=s2>\"2022-12-07\"</span><span class=p>:</span> <span class=s2>\"2022-12-07\"</span><span class=p>},</span>    <span class=s2>\"y\"</span><span class=p>:</span> <span class=p>{</span><span class=s2>\"2022-12-07\"</span><span class=p>:</span> <span class=s2>\"2022-12-07\"</span><span class=p>},</span><span class=p>}</span><span class=n>obj</span> <span class=o>=</span> <span class=n>DataClass</span><span class=o>.</span><span class=n>from_dict</span><span class=p>(</span><span class=n>input_data</span><span class=p>)</span><span class=k>assert</span> <span class=n>obj</span> <span class=o>==</span> <span class=n>DataClass</span><span class=p>(</span>    <span class=n>x</span><span class=o>=</span><span class=n>DictWrapper</span><span class=p>({</span><span class=n>date</span><span class=p>(</span><span class=mi>2022</span><span class=p>,</span> <span class=mi>12</span><span class=p>,</span> <span class=mi>7</span><span class=p>):</span> <span class=s2>\"2022-12-07\"</span><span class=p>}),</span>    <span class=n>y</span><span class=o>=</span><span class=n>DictWrapper</span><span class=p>({</span><span class=s2>\"2022-12-07\"</span><span class=p>:</span> <span class=n>date</span><span class=p>(</span><span class=mi>2022</span><span class=p>,</span> <span class=mi>12</span><span class=p>,</span> <span class=mi>7</span><span class=p>)}),</span><span class=p>)</span><span class=k>assert</span> <span class=n>obj</span><span class=o>.</span><span class=n>to_dict</span><span class=p>()</span> <span class=o>==</span> <span class=n>input_data</span></pre><p>As you can see, the code turns out to be massive compared to the<a href=#user-defined-generic-types rel=nofollow>alternative</a> but in rare cases such flexibilitycan be useful. You should think twice about whether it's really worth using it.</p><h3>Serialization hooks</h3><p>In some cases you need to prepare input / output data or do some extraordinaryactions at different stages of the deserialization / serialization lifecycle.You can do this with different types of hooks.</p><h4>Before deserialization</h4><p>For doing something with a dictionary that will be passed to deserializationyou can use <code>__pre_deserialize__</code> class method:</p><pre lang=python3><span class=nd>@dataclass</span><span class=k>class</span> <span class=nc>A</span><span class=p>(</span><span class=n>DataClassJSONMixin</span><span class=p>):</span>    <span class=n>abc</span><span class=p>:</span> <span class=nb>int</span>    <span class=nd>@classmethod</span>    <span class=k>def</span> <span class=nf>__pre_deserialize__</span><span class=p>(</span><span class=bp>cls</span><span class=p>,</span> <span class=n>d</span><span class=p>:</span> <span class=n>Dict</span><span class=p>[</span><span class=n>Any</span><span class=p>,</span> <span class=n>Any</span><span class=p>])</span> <span class=o>-&gt;</span> <span class=n>Dict</span><span class=p>[</span><span class=n>Any</span><span class=p>,</span> <span class=n>Any</span><span class=p>]:</span>        <span class=k>return</span> <span class=p>{</span><span class=n>k</span><span class=o>.</span><span class=n>lower</span><span class=p>():</span> <span class=n>v</span> <span class=k>for</span> <span class=n>k</span><span class=p>,</span> <span class=n>v</span> <span class=ow>in</span> <span class=n>d</span><span class=o>.</span><span class=n>items</span><span class=p>()}</span><span class=nb>print</span><span class=p>(</span><span class=n>DataClass</span><span class=o>.</span><span class=n>from_dict</span><span class=p>({</span><span class=s2>\"ABC\"</span><span class=p>:</span> <span class=mi>123</span><span class=p>}))</span>    <span class=c1># DataClass(abc=123)</span><span class=nb>print</span><span class=p>(</span><span class=n>DataClass</span><span class=o>.</span><span class=n>from_json</span><span class=p>(</span><span class=s1>'{\"ABC\": 123}'</span><span class=p>))</span>  <span class=c1># DataClass(abc=123)</span></pre><h4>After deserialization</h4><p>For doing something with a dataclass instance that was created as a resultof deserialization you can use <code>__post_deserialize__</code> class method:</p><pre lang=python3><span class=nd>@dataclass</span><span class=k>class</span> <span class=nc>A</span><span class=p>(</span><span class=n>DataClassJSONMixin</span><span class=p>):</span>    <span class=n>abc</span><span class=p>:</span> <span class=nb>int</span>    <span class=nd>@classmethod</span>    <span class=k>def</span> <span class=nf>__post_deserialize__</span><span class=p>(</span><span class=bp>cls</span><span class=p>,</span> <span class=n>obj</span><span class=p>:</span> <span class=s1>'A'</span><span class=p>)</span> <span class=o>-&gt;</span> <span class=s1>'A'</span><span class=p>:</span>        <span class=n>obj</span><span class=o>.</span><span class=n>abc</span> <span class=o>=</span> <span class=mi>456</span>        <span class=k>return</span> <span class=n>obj</span><span class=nb>print</span><span class=p>(</span><span class=n>DataClass</span><span class=o>.</span><span class=n>from_dict</span><span class=p>({</span><span class=s2>\"abc\"</span><span class=p>:</span> <span class=mi>123</span><span class=p>}))</span>    <span class=c1># DataClass(abc=456)</span><span class=nb>print</span><span class=p>(</span><span class=n>DataClass</span><span class=o>.</span><span class=n>from_json</span><span class=p>(</span><span class=s1>'{\"abc\": 123}'</span><span class=p>))</span>  <span class=c1># DataClass(abc=456)</span></pre><h4>Before serialization</h4><p>For doing something before serialization you can use <code>__pre_serialize__</code>method:</p><pre lang=python3><span class=nd>@dataclass</span><span class=k>class</span> <span class=nc>A</span><span class=p>(</span><span class=n>DataClassJSONMixin</span><span class=p>):</span>    <span class=n>abc</span><span class=p>:</span> <span class=nb>int</span>    <span class=n>counter</span><span class=p>:</span> <span class=n>ClassVar</span><span class=p>[</span><span class=nb>int</span><span class=p>]</span> <span class=o>=</span> <span class=mi>0</span>    <span class=k>def</span> <span class=nf>__pre_serialize__</span><span class=p>(</span><span class=bp>self</span><span class=p>)</span> <span class=o>-&gt;</span> <span class=s1>'A'</span><span class=p>:</span>        <span class=bp>self</span><span class=o>.</span><span class=n>counter</span> <span class=o>+=</span> <span class=mi>1</span>        <span class=k>return</span> <span class=bp>self</span><span class=n>obj</span> <span class=o>=</span> <span class=n>DataClass</span><span class=p>(</span><span class=n>abc</span><span class=o>=</span><span class=mi>123</span><span class=p>)</span><span class=n>obj</span><span class=o>.</span><span class=n>to_dict</span><span class=p>()</span><span class=n>obj</span><span class=o>.</span><span class=n>to_json</span><span class=p>()</span><span class=nb>print</span><span class=p>(</span><span class=n>obj</span><span class=o>.</span><span class=n>counter</span><span class=p>)</span>  <span class=c1># 2</span></pre><p>Note that you can add an additional <code>context</code> argument using the<a href=#add-context-keyword-argument rel=nofollow>corresponding</a> code generation option.</p><h4>After serialization</h4><p>For doing something with a dictionary that was created as a result ofserialization you can use <code>__post_serialize__</code> method:</p><pre lang=python3><span class=nd>@dataclass</span><span class=k>class</span> <span class=nc>A</span><span class=p>(</span><span class=n>DataClassJSONMixin</span><span class=p>):</span>    <span class=n>user</span><span class=p>:</span> <span class=nb>str</span>    <span class=n>password</span><span class=p>:</span> <span class=nb>str</span>    <span class=k>def</span> <span class=nf>__post_serialize__</span><span class=p>(</span><span class=bp>self</span><span class=p>,</span> <span class=n>d</span><span class=p>:</span> <span class=n>Dict</span><span class=p>[</span><span class=n>Any</span><span class=p>,</span> <span class=n>Any</span><span class=p>])</span> <span class=o>-&gt;</span> <span class=n>Dict</span><span class=p>[</span><span class=n>Any</span><span class=p>,</span> <span class=n>Any</span><span class=p>]:</span>        <span class=n>d</span><span class=o>.</span><span class=n>pop</span><span class=p>(</span><span class=s1>'password'</span><span class=p>)</span>        <span class=k>return</span> <span class=n>d</span><span class=n>obj</span> <span class=o>=</span> <span class=n>DataClass</span><span class=p>(</span><span class=n>user</span><span class=o>=</span><span class=s2>\"name\"</span><span class=p>,</span> <span class=n>password</span><span class=o>=</span><span class=s2>\"secret\"</span><span class=p>)</span><span class=nb>print</span><span class=p>(</span><span class=n>obj</span><span class=o>.</span><span class=n>to_dict</span><span class=p>())</span>  <span class=c1># {\"user\": \"name\"}</span><span class=nb>print</span><span class=p>(</span><span class=n>obj</span><span class=o>.</span><span class=n>to_json</span><span class=p>())</span>  <span class=c1># '{\"user\": \"name\"}'</span></pre><p>Note that you can add an additional <code>context</code> argument using the<a href=#add-context-keyword-argument rel=nofollow>corresponding</a> code generation option.</p><h2>JSON Schema</h2><p>You can build JSON Schema not only for dataclasses but also for any other<a href=#supported-data-types rel=nofollow>supported</a> datatypes. There is support for the following standards:</p><ul><li><a href=\"https://json-schema.org/specification.html\" rel=nofollow>Draft 2022-12</a></li><li><a href=\"https://spec.openapis.org/oas/v3.1.0\" rel=nofollow>OpenAPI Specification 3.1.0</a></li></ul><h3>Building JSON Schema</h3><p>For simple one-time cases it's recommended to start from using a configurable<code>build_json_schema</code> function. It returns <code>JSONSchema</code> object that can beserialized to json or to dict:</p><pre lang=python3><span class=kn>from</span> <span class=nn>dataclasses</span> <span class=kn>import</span> <span class=n>dataclass</span><span class=p>,</span> <span class=n>field</span><span class=kn>from</span> <span class=nn>typing</span> <span class=kn>import</span> <span class=n>List</span><span class=kn>from</span> <span class=nn>uuid</span> <span class=kn>import</span> <span class=n>UUID</span><span class=kn>from</span> <span class=nn>mashumaro.jsonschema</span> <span class=kn>import</span> <span class=n>build_json_schema</span><span class=nd>@dataclass</span><span class=k>class</span> <span class=nc>User</span><span class=p>:</span>    <span class=nb>id</span><span class=p>:</span> <span class=n>UUID</span>    <span class=n>name</span><span class=p>:</span> <span class=nb>str</span> <span class=o>=</span> <span class=n>field</span><span class=p>(</span><span class=n>metadata</span><span class=o>=</span><span class=p>{</span><span class=s2>\"description\"</span><span class=p>:</span> <span class=s2>\"User name\"</span><span class=p>})</span><span class=nb>print</span><span class=p>(</span><span class=n>build_json_schema</span><span class=p>(</span><span class=n>List</span><span class=p>[</span><span class=n>User</span><span class=p>])</span><span class=o>.</span><span class=n>to_json</span><span class=p>())</span></pre><details><summary>Click to show the result</summary><pre lang=json><span class=p>{</span><span class=w>    </span><span class=nt>\"type\"</span><span class=p>:</span><span class=w> </span><span class=s2>\"array\"</span><span class=p>,</span><span class=w>    </span><span class=nt>\"items\"</span><span class=p>:</span><span class=w> </span><span class=p>{</span><span class=w>        </span><span class=nt>\"type\"</span><span class=p>:</span><span class=w> </span><span class=s2>\"object\"</span><span class=p>,</span><span class=w>        </span><span class=nt>\"title\"</span><span class=p>:</span><span class=w> </span><span class=s2>\"User\"</span><span class=p>,</span><span class=w>        </span><span class=nt>\"properties\"</span><span class=p>:</span><span class=w> </span><span class=p>{</span><span class=w>            </span><span class=nt>\"id\"</span><span class=p>:</span><span class=w> </span><span class=p>{</span><span class=w>                </span><span class=nt>\"type\"</span><span class=p>:</span><span class=w> </span><span class=s2>\"string\"</span><span class=p>,</span><span class=w>                </span><span class=nt>\"format\"</span><span class=p>:</span><span class=w> </span><span class=s2>\"uuid\"</span><span class=w>            </span><span class=p>},</span><span class=w>            </span><span class=nt>\"name\"</span><span class=p>:</span><span class=w> </span><span class=p>{</span><span class=w>                </span><span class=nt>\"type\"</span><span class=p>:</span><span class=w> </span><span class=s2>\"string\"</span><span class=p>,</span><span class=w>                </span><span class=nt>\"description\"</span><span class=p>:</span><span class=w> </span><span class=s2>\"User name\"</span><span class=w>            </span><span class=p>}</span><span class=w>        </span><span class=p>},</span><span class=w>        </span><span class=nt>\"additionalProperties\"</span><span class=p>:</span><span class=w> </span><span class=kc>false</span><span class=p>,</span><span class=w>        </span><span class=nt>\"required\"</span><span class=p>:</span><span class=w> </span><span class=p>[</span><span class=w>            </span><span class=s2>\"id\"</span><span class=p>,</span><span class=w>            </span><span class=s2>\"name\"</span><span class=w>        </span><span class=p>]</span><span class=w>    </span><span class=p>}</span><span class=p>}</span></pre></details><p>Additional validation keywords (<a href=#json-schema-constraints rel=nofollow>see below</a>)can be added using annotations:</p><pre lang=python3><span class=kn>from</span> <span class=nn>typing</span> <span class=kn>import</span> <span class=n>Annotated</span><span class=p>,</span> <span class=n>List</span><span class=kn>from</span> <span class=nn>mashumaro.jsonschema</span> <span class=kn>import</span> <span class=n>build_json_schema</span><span class=kn>from</span> <span class=nn>mashumaro.jsonschema.annotations</span> <span class=kn>import</span> <span class=n>Maximum</span><span class=p>,</span> <span class=n>MaxItems</span><span class=nb>print</span><span class=p>(</span>    <span class=n>build_json_schema</span><span class=p>(</span>        <span class=n>Annotated</span><span class=p>[</span>            <span class=n>List</span><span class=p>[</span><span class=n>Annotated</span><span class=p>[</span><span class=nb>int</span><span class=p>,</span> <span class=n>Maximum</span><span class=p>(</span><span class=mi>42</span><span class=p>)]],</span>            <span class=n>MaxItems</span><span class=p>(</span><span class=mi>4</span><span class=p>)</span>        <span class=p>]</span>    <span class=p>)</span><span class=o>.</span><span class=n>to_json</span><span class=p>()</span><span class=p>)</span></pre><details><summary>Click to show the result</summary><pre lang=json><span class=p>{</span><span class=w>    </span><span class=nt>\"type\"</span><span class=p>:</span><span class=w> </span><span class=s2>\"array\"</span><span class=p>,</span><span class=w>    </span><span class=nt>\"items\"</span><span class=p>:</span><span class=w> </span><span class=p>{</span><span class=w>        </span><span class=nt>\"type\"</span><span class=p>:</span><span class=w> </span><span class=s2>\"integer\"</span><span class=p>,</span><span class=w>        </span><span class=nt>\"maximum\"</span><span class=p>:</span><span class=w> </span><span class=mi>42</span><span class=w>    </span><span class=p>},</span><span class=w>    </span><span class=nt>\"maxItems\"</span><span class=p>:</span><span class=w> </span><span class=mi>4</span><span class=p>}</span></pre></details><p>The <a href=\"https://json-schema.org/draft/2020-12/json-schema-core.html#name-the-schema-keyword\" rel=nofollow><code>$schema</code></a>keyword can be added by setting <code>with_dialect_uri</code> to True:</p><pre lang=python3><span class=nb>print</span><span class=p>(</span><span class=n>build_json_schema</span><span class=p>(</span><span class=nb>str</span><span class=p>,</span> <span class=n>with_dialect_uri</span><span class=o>=</span><span class=kc>True</span><span class=p>)</span><span class=o>.</span><span class=n>to_json</span><span class=p>())</span></pre><details><summary>Click to show the result</summary><pre lang=json><span class=p>{</span><span class=w>    </span><span class=nt>\"$schema\"</span><span class=p>:</span><span class=w> </span><span class=s2>\"https://json-schema.org/draft/2020-12/schema\"</span><span class=p>,</span><span class=w>    </span><span class=nt>\"type\"</span><span class=p>:</span><span class=w> </span><span class=s2>\"string\"</span><span class=p>}</span></pre></details><p>By default, Draft 2022-12 dialect is being used, but you can change it toanother one by setting <code>dialect</code> parameter:</p><pre lang=python3><span class=kn>from</span> <span class=nn>mashumaro.jsonschema</span> <span class=kn>import</span> <span class=n>OPEN_API_3_1</span><span class=nb>print</span><span class=p>(</span>    <span class=n>build_json_schema</span><span class=p>(</span>        <span class=nb>str</span><span class=p>,</span> <span class=n>dialect</span><span class=o>=</span><span class=n>OPEN_API_3_1</span><span class=p>,</span> <span class=n>with_dialect_uri</span><span class=o>=</span><span class=kc>True</span>    <span class=p>)</span><span class=o>.</span><span class=n>to_json</span><span class=p>()</span><span class=p>)</span></pre><details><summary>Click to show the result</summary><pre lang=json><span class=p>{</span><span class=w>    </span><span class=nt>\"$schema\"</span><span class=p>:</span><span class=w> </span><span class=s2>\"https://spec.openapis.org/oas/3.1/dialect/base\"</span><span class=p>,</span><span class=w>    </span><span class=nt>\"type\"</span><span class=p>:</span><span class=w> </span><span class=s2>\"string\"</span><span class=p>}</span></pre></details><p>All dataclass JSON Schemas can or can not be placed in the<a href=\"https://json-schema.org/draft/2020-12/json-schema-core.html#name-schema-re-use-with-defs\" rel=nofollow>definitions</a>section, depending on the <code>all_refs</code> parameter, which default value comesfrom a dialect used (<code>False</code> for Draft 2022-12, <code>True</code> for OpenAPISpecification 3.1.0):</p><pre lang=python3><span class=nb>print</span><span class=p>(</span><span class=n>build_json_schema</span><span class=p>(</span><span class=n>List</span><span class=p>[</span><span class=n>User</span><span class=p>],</span> <span class=n>all_refs</span><span class=o>=</span><span class=kc>True</span><span class=p>)</span><span class=o>.</span><span class=n>to_json</span><span class=p>())</span></pre><details><summary>Click to show the result</summary><pre lang=json><span class=p>{</span><span class=w>    </span><span class=nt>\"type\"</span><span class=p>:</span><span class=w> </span><span class=s2>\"array\"</span><span class=p>,</span><span class=w>    </span><span class=nt>\"$defs\"</span><span class=p>:</span><span class=w> </span><span class=p>{</span><span class=w>        </span><span class=nt>\"User\"</span><span class=p>:</span><span class=w> </span><span class=p>{</span><span class=w>            </span><span class=nt>\"type\"</span><span class=p>:</span><span class=w> </span><span class=s2>\"object\"</span><span class=p>,</span><span class=w>            </span><span class=nt>\"title\"</span><span class=p>:</span><span class=w> </span><span class=s2>\"User\"</span><span class=p>,</span><span class=w>            </span><span class=nt>\"properties\"</span><span class=p>:</span><span class=w> </span><span class=p>{</span><span class=w>                </span><span class=nt>\"id\"</span><span class=p>:</span><span class=w> </span><span class=p>{</span><span class=w>                    </span><span class=nt>\"type\"</span><span class=p>:</span><span class=w> </span><span class=s2>\"string\"</span><span class=p>,</span><span class=w>                    </span><span class=nt>\"format\"</span><span class=p>:</span><span class=w> </span><span class=s2>\"uuid\"</span><span class=w>                </span><span class=p>},</span><span class=w>                </span><span class=nt>\"name\"</span><span class=p>:</span><span class=w> </span><span class=p>{</span><span class=w>                    </span><span class=nt>\"type\"</span><span class=p>:</span><span class=w> </span><span class=s2>\"string\"</span><span class=w>                </span><span class=p>}</span><span class=w>            </span><span class=p>},</span><span class=w>            </span><span class=nt>\"additionalProperties\"</span><span class=p>:</span><span class=w> </span><span class=kc>false</span><span class=p>,</span><span class=w>            </span><span class=nt>\"required\"</span><span class=p>:</span><span class=w> </span><span class=p>[</span><span class=w>                </span><span class=s2>\"id\"</span><span class=p>,</span><span class=w>                </span><span class=s2>\"name\"</span><span class=w>            </span><span class=p>]</span><span class=w>        </span><span class=p>}</span><span class=w>    </span><span class=p>},</span><span class=w>    </span><span class=nt>\"items\"</span><span class=p>:</span><span class=w> </span><span class=p>{</span><span class=w>        </span><span class=nt>\"$ref\"</span><span class=p>:</span><span class=w> </span><span class=s2>\"#/$defs/User\"</span><span class=w>    </span><span class=p>}</span><span class=p>}</span></pre></details><p>The definitions section can be omitted from the final document by setting<code>with_definitions</code> parameter to <code>False</code>:</p><pre lang=python3><span class=nb>print</span><span class=p>(</span>    <span class=n>build_json_schema</span><span class=p>(</span>        <span class=n>List</span><span class=p>[</span><span class=n>User</span><span class=p>],</span> <span class=n>dialect</span><span class=o>=</span><span class=n>OPEN_API_3_1</span><span class=p>,</span> <span class=n>with_definitions</span><span class=o>=</span><span class=kc>False</span>    <span class=p>)</span><span class=o>.</span><span class=n>to_json</span><span class=p>()</span><span class=p>)</span></pre><details><summary>Click to show the result</summary><pre lang=json><span class=p>{</span><span class=w>    </span><span class=nt>\"type\"</span><span class=p>:</span><span class=w> </span><span class=s2>\"array\"</span><span class=p>,</span><span class=w>    </span><span class=nt>\"items\"</span><span class=p>:</span><span class=w> </span><span class=p>{</span><span class=w>        </span><span class=nt>\"$ref\"</span><span class=p>:</span><span class=w> </span><span class=s2>\"#/components/schemas/User\"</span><span class=w>    </span><span class=p>}</span><span class=p>}</span></pre></details><p>Reference prefix can be changed by using <code>ref_prefix</code> parameter:</p><pre lang=python3><span class=nb>print</span><span class=p>(</span>    <span class=n>build_json_schema</span><span class=p>(</span>        <span class=n>List</span><span class=p>[</span><span class=n>User</span><span class=p>],</span>        <span class=n>all_refs</span><span class=o>=</span><span class=kc>True</span><span class=p>,</span>        <span class=n>with_definitions</span><span class=o>=</span><span class=kc>False</span><span class=p>,</span>        <span class=n>ref_prefix</span><span class=o>=</span><span class=s2>\"#/components/responses\"</span><span class=p>,</span>    <span class=p>)</span><span class=o>.</span><span class=n>to_json</span><span class=p>()</span><span class=p>)</span></pre><details><summary>Click to show the result</summary><pre lang=json><span class=p>{</span><span class=w>    </span><span class=nt>\"type\"</span><span class=p>:</span><span class=w> </span><span class=s2>\"array\"</span><span class=p>,</span><span class=w>    </span><span class=nt>\"items\"</span><span class=p>:</span><span class=w> </span><span class=p>{</span><span class=w>        </span><span class=nt>\"$ref\"</span><span class=p>:</span><span class=w> </span><span class=s2>\"#/components/responses/User\"</span><span class=w>    </span><span class=p>}</span><span class=p>}</span></pre></details><p>The omitted definitions could be found later in the <code>Context</code> object thatyou could have created and passed to the function, but it could be easierto use <code>JSONSchemaBuilder</code> for that. For example, you might found it handyto build OpenAPI Specification step by step passing your models to the builderand get all the registered definitions later. This builder has reasonabledefaults but can be customized if necessary.</p><pre lang=python3><span class=kn>from</span> <span class=nn>mashumaro.jsonschema</span> <span class=kn>import</span> <span class=n>JSONSchemaBuilder</span><span class=p>,</span> <span class=n>OPEN_API_3_1</span><span class=n>builder</span> <span class=o>=</span> <span class=n>JSONSchemaBuilder</span><span class=p>(</span><span class=n>OPEN_API_3_1</span><span class=p>)</span><span class=nd>@dataclass</span><span class=k>class</span> <span class=nc>User</span><span class=p>:</span>    <span class=nb>id</span><span class=p>:</span> <span class=n>UUID</span>    <span class=n>name</span><span class=p>:</span> <span class=nb>str</span><span class=nd>@dataclass</span><span class=k>class</span> <span class=nc>Device</span><span class=p>:</span>    <span class=nb>id</span><span class=p>:</span> <span class=n>UUID</span>    <span class=n>model</span><span class=p>:</span> <span class=nb>str</span><span class=nb>print</span><span class=p>(</span><span class=n>builder</span><span class=o>.</span><span class=n>build</span><span class=p>(</span><span class=n>List</span><span class=p>[</span><span class=n>User</span><span class=p>])</span><span class=o>.</span><span class=n>to_json</span><span class=p>())</span><span class=nb>print</span><span class=p>(</span><span class=n>builder</span><span class=o>.</span><span class=n>build</span><span class=p>(</span><span class=n>List</span><span class=p>[</span><span class=n>Device</span><span class=p>])</span><span class=o>.</span><span class=n>to_json</span><span class=p>())</span><span class=nb>print</span><span class=p>(</span><span class=n>builder</span><span class=o>.</span><span class=n>get_definitions</span><span class=p>()</span><span class=o>.</span><span class=n>to_json</span><span class=p>())</span></pre><details><summary>Click to show the result</summary><pre lang=json><span class=p>{</span><span class=w>    </span><span class=nt>\"type\"</span><span class=p>:</span><span class=w> </span><span class=s2>\"array\"</span><span class=p>,</span><span class=w>    </span><span class=nt>\"items\"</span><span class=p>:</span><span class=w> </span><span class=p>{</span><span class=w>        </span><span class=nt>\"$ref\"</span><span class=p>:</span><span class=w> </span><span class=s2>\"#/components/schemas/User\"</span><span class=w>    </span><span class=p>}</span><span class=p>}</span></pre><pre lang=json><span class=p>{</span><span class=w>    </span><span class=nt>\"type\"</span><span class=p>:</span><span class=w> </span><span class=s2>\"array\"</span><span class=p>,</span><span class=w>    </span><span class=nt>\"items\"</span><span class=p>:</span><span class=w> </span><span class=p>{</span><span class=w>        </span><span class=nt>\"$ref\"</span><span class=p>:</span><span class=w> </span><span class=s2>\"#/components/schemas/Device\"</span><span class=w>    </span><span class=p>}</span><span class=p>}</span></pre><pre lang=json><span class=p>{</span><span class=w>    </span><span class=nt>\"User\"</span><span class=p>:</span><span class=w> </span><span class=p>{</span><span class=w>        </span><span class=nt>\"type\"</span><span class=p>:</span><span class=w> </span><span class=s2>\"object\"</span><span class=p>,</span><span class=w>        </span><span class=nt>\"title\"</span><span class=p>:</span><span class=w> </span><span class=s2>\"User\"</span><span class=p>,</span><span class=w>        </span><span class=nt>\"properties\"</span><span class=p>:</span><span class=w> </span><span class=p>{</span><span class=w>            </span><span class=nt>\"id\"</span><span class=p>:</span><span class=w> </span><span class=p>{</span><span class=w>                </span><span class=nt>\"type\"</span><span class=p>:</span><span class=w> </span><span class=s2>\"string\"</span><span class=p>,</span><span class=w>                </span><span class=nt>\"format\"</span><span class=p>:</span><span class=w> </span><span class=s2>\"uuid\"</span><span class=w>            </span><span class=p>},</span><span class=w>            </span><span class=nt>\"name\"</span><span class=p>:</span><span class=w> </span><span class=p>{</span><span class=w>                </span><span class=nt>\"type\"</span><span class=p>:</span><span class=w> </span><span class=s2>\"string\"</span><span class=w>            </span><span class=p>}</span><span class=w>        </span><span class=p>},</span><span class=w>        </span><span class=nt>\"additionalProperties\"</span><span class=p>:</span><span class=w> </span><span class=kc>false</span><span class=p>,</span><span class=w>        </span><span class=nt>\"required\"</span><span class=p>:</span><span class=w> </span><span class=p>[</span><span class=w>            </span><span class=s2>\"id\"</span><span class=p>,</span><span class=w>            </span><span class=s2>\"name\"</span><span class=w>        </span><span class=p>]</span><span class=w>    </span><span class=p>},</span><span class=w>    </span><span class=nt>\"Device\"</span><span class=p>:</span><span class=w> </span><span class=p>{</span><span class=w>        </span><span class=nt>\"type\"</span><span class=p>:</span><span class=w> </span><span class=s2>\"object\"</span><span class=p>,</span><span class=w>        </span><span class=nt>\"title\"</span><span class=p>:</span><span class=w> </span><span class=s2>\"Device\"</span><span class=p>,</span><span class=w>        </span><span class=nt>\"properties\"</span><span class=p>:</span><span class=w> </span><span class=p>{</span><span class=w>            </span><span class=nt>\"id\"</span><span class=p>:</span><span class=w> </span><span class=p>{</span><span class=w>                </span><span class=nt>\"type\"</span><span class=p>:</span><span class=w> </span><span class=s2>\"string\"</span><span class=p>,</span><span class=w>                </span><span class=nt>\"format\"</span><span class=p>:</span><span class=w> </span><span class=s2>\"uuid\"</span><span class=w>            </span><span class=p>},</span><span class=w>            </span><span class=nt>\"model\"</span><span class=p>:</span><span class=w> </span><span class=p>{</span><span class=w>                </span><span class=nt>\"type\"</span><span class=p>:</span><span class=w> </span><span class=s2>\"string\"</span><span class=w>            </span><span class=p>}</span><span class=w>        </span><span class=p>},</span><span class=w>        </span><span class=nt>\"additionalProperties\"</span><span class=p>:</span><span class=w> </span><span class=kc>false</span><span class=p>,</span><span class=w>        </span><span class=nt>\"required\"</span><span class=p>:</span><span class=w> </span><span class=p>[</span><span class=w>            </span><span class=s2>\"id\"</span><span class=p>,</span><span class=w>            </span><span class=s2>\"model\"</span><span class=w>        </span><span class=p>]</span><span class=w>    </span><span class=p>}</span><span class=p>}</span></pre></details><h3>JSON Schema constraints</h3><p>Apart from required keywords, that are added automatically for certain datatypes, you're free to use additional validation keywords.They're presented by the corresponding classes in<a href=\"https://github.com/Fatal1ty/mashumaro/blob/master/mashumaro/jsonschema/annotations.py\" rel=nofollow><code>mashumaro.jsonschema.annotations</code></a>:</p><p>Number constraints:</p><ul><li><a href=\"https://json-schema.org/draft/2020-12/json-schema-validation.html#name-minimum\" rel=nofollow><code>Minimum</code></a></li><li><a href=\"https://json-schema.org/draft/2020-12/json-schema-validation.html#name-maximum\" rel=nofollow><code>Maximum</code></a></li><li><a href=\"https://json-schema.org/draft/2020-12/json-schema-validation.html#name-exclusiveminimum\" rel=nofollow><code>ExclusiveMinimum</code></a></li><li><a href=\"https://json-schema.org/draft/2020-12/json-schema-validation.html#name-exclusivemaximum\" rel=nofollow><code>ExclusiveMaximum</code></a></li><li><a href=\"https://json-schema.org/draft/2020-12/json-schema-validation.html#name-multipleof\" rel=nofollow><code>MultipleOf</code></a></li></ul><p>String constraints:</p><ul><li><a href=\"https://json-schema.org/draft/2020-12/json-schema-validation.html#name-minlength\" rel=nofollow><code>MinLength</code></a></li><li><a href=\"https://json-schema.org/draft/2020-12/json-schema-validation.html#name-maxlength\" rel=nofollow><code>MaxLength</code></a></li><li><a href=\"https://json-schema.org/draft/2020-12/json-schema-validation.html#name-pattern\" rel=nofollow><code>Pattern</code></a></li></ul><p>Array constraints:</p><ul><li><a href=\"https://json-schema.org/draft/2020-12/json-schema-validation.html#name-minitems\" rel=nofollow><code>MinItems</code></a></li><li><a href=\"https://json-schema.org/draft/2020-12/json-schema-validation.html#name-maxitems\" rel=nofollow><code>MaxItems</code></a></li><li><a href=\"https://json-schema.org/draft/2020-12/json-schema-validation.html#name-uniqueitems\" rel=nofollow><code>UniqueItems</code></a></li><li><a href=\"https://json-schema.org/draft/2020-12/json-schema-core.html#name-contains\" rel=nofollow><code>Contains</code></a></li><li><a href=\"https://json-schema.org/draft/2020-12/json-schema-validation.html#name-mincontains\" rel=nofollow><code>MinContains</code></a></li><li><a href=\"https://json-schema.org/draft/2020-12/json-schema-validation.html#name-maxcontains\" rel=nofollow><code>MaxContains</code></a></li></ul><p>Object constraints:</p><ul><li><a href=\"https://json-schema.org/draft/2020-12/json-schema-validation.html#name-maxproperties\" rel=nofollow><code>MaxProperties</code></a></li><li><a href=\"https://json-schema.org/draft/2020-12/json-schema-validation.html#name-minproperties\" rel=nofollow><code>MinProperties</code></a></li><li><a href=\"https://json-schema.org/draft/2020-12/json-schema-validation.html#name-dependentrequired\" rel=nofollow><code>DependentRequired</code></a></li></ul><h3>Extending JSON Schema</h3><p>Using a <code>Config</code> class it is possible to override some parts of the schema.Currently, you can do the following:</p><ul><li>override some field schemas using the \"properties\" key</li><li>change <code>additionalProperties</code> using the \"additionalProperties\" key</li></ul><pre lang=python3><span class=kn>from</span> <span class=nn>dataclasses</span> <span class=kn>import</span> <span class=n>dataclass</span><span class=kn>from</span> <span class=nn>mashumaro.jsonschema</span> <span class=kn>import</span> <span class=n>build_json_schema</span><span class=nd>@dataclass</span><span class=k>class</span> <span class=nc>FooBar</span><span class=p>:</span>    <span class=n>foo</span><span class=p>:</span> <span class=nb>str</span>    <span class=n>bar</span><span class=p>:</span> <span class=nb>int</span>    <span class=k>class</span> <span class=nc>Config</span><span class=p>:</span>        <span class=n>json_schema</span> <span class=o>=</span> <span class=p>{</span>            <span class=s2>\"properties\"</span><span class=p>:</span> <span class=p>{</span>                <span class=s2>\"foo\"</span><span class=p>:</span> <span class=p>{</span>                    <span class=s2>\"type\"</span><span class=p>:</span> <span class=s2>\"string\"</span><span class=p>,</span>                    <span class=s2>\"description\"</span><span class=p>:</span> <span class=s2>\"bar\"</span>                <span class=p>}</span>            <span class=p>},</span>            <span class=s2>\"additionalProperties\"</span><span class=p>:</span> <span class=kc>True</span><span class=p>,</span>        <span class=p>}</span><span class=nb>print</span><span class=p>(</span><span class=n>build_json_schema</span><span class=p>(</span><span class=n>FooBar</span><span class=p>)</span><span class=o>.</span><span class=n>to_json</span><span class=p>())</span></pre><details><summary>Click to show the result</summary><pre lang=json><span class=p>{</span><span class=w>    </span><span class=nt>\"type\"</span><span class=p>:</span><span class=w> </span><span class=s2>\"object\"</span><span class=p>,</span><span class=w>    </span><span class=nt>\"title\"</span><span class=p>:</span><span class=w> </span><span class=s2>\"FooBar\"</span><span class=p>,</span><span class=w>    </span><span class=nt>\"properties\"</span><span class=p>:</span><span class=w> </span><span class=p>{</span><span class=w>        </span><span class=nt>\"foo\"</span><span class=p>:</span><span class=w> </span><span class=p>{</span><span class=w>            </span><span class=nt>\"type\"</span><span class=p>:</span><span class=w> </span><span class=s2>\"string\"</span><span class=p>,</span><span class=w>            </span><span class=nt>\"description\"</span><span class=p>:</span><span class=w> </span><span class=s2>\"bar\"</span><span class=w>        </span><span class=p>},</span><span class=w>        </span><span class=nt>\"bar\"</span><span class=p>:</span><span class=w> </span><span class=p>{</span><span class=w>            </span><span class=nt>\"type\"</span><span class=p>:</span><span class=w> </span><span class=s2>\"integer\"</span><span class=w>        </span><span class=p>}</span><span class=w>    </span><span class=p>},</span><span class=w>    </span><span class=nt>\"additionalProperties\"</span><span class=p>:</span><span class=w> </span><span class=kc>true</span><span class=p>,</span><span class=w>    </span><span class=nt>\"required\"</span><span class=p>:</span><span class=w> </span><span class=p>[</span><span class=w>        </span><span class=s2>\"foo\"</span><span class=p>,</span><span class=w>        </span><span class=s2>\"bar\"</span><span class=w>    </span><span class=p>]</span><span class=p>}</span></pre></details><p>You can also change the \"additionalProperties\" key to a specific schemaby passing it a <code>JSONSchema</code> instance instead of a bool value.</p><h3>JSON Schema and custom serialization methods</h3><p>Mashumaro provides different ways to override default serialization methods fordataclass fields or specific data types. In order for these overrides to bereflected in the schema, you need to make sure that the methods haveannotations of the return value type.</p><pre lang=python3><span class=kn>from</span> <span class=nn>dataclasses</span> <span class=kn>import</span> <span class=n>dataclass</span><span class=p>,</span> <span class=n>field</span><span class=kn>from</span> <span class=nn>mashumaro.config</span> <span class=kn>import</span> <span class=n>BaseConfig</span><span class=kn>from</span> <span class=nn>mashumaro.jsonschema</span> <span class=kn>import</span> <span class=n>build_json_schema</span><span class=k>def</span> <span class=nf>str_as_list</span><span class=p>(</span><span class=n>s</span><span class=p>:</span> <span class=nb>str</span><span class=p>)</span> <span class=o>-&gt;</span> <span class=nb>list</span><span class=p>[</span><span class=nb>str</span><span class=p>]:</span>    <span class=k>return</span> <span class=nb>list</span><span class=p>(</span><span class=n>s</span><span class=p>)</span><span class=k>def</span> <span class=nf>int_as_str</span><span class=p>(</span><span class=n>i</span><span class=p>:</span> <span class=nb>int</span><span class=p>)</span> <span class=o>-&gt;</span> <span class=nb>str</span><span class=p>:</span>    <span class=k>return</span> <span class=nb>str</span><span class=p>(</span><span class=n>i</span><span class=p>)</span><span class=nd>@dataclass</span><span class=k>class</span> <span class=nc>FooBar</span><span class=p>:</span>    <span class=n>foo</span><span class=p>:</span> <span class=nb>str</span> <span class=o>=</span> <span class=n>field</span><span class=p>(</span><span class=n>metadata</span><span class=o>=</span><span class=p>{</span><span class=s2>\"serialize\"</span><span class=p>:</span> <span class=n>str_as_list</span><span class=p>})</span>    <span class=n>bar</span><span class=p>:</span> <span class=nb>int</span>    <span class=k>class</span> <span class=nc>Config</span><span class=p>(</span><span class=n>BaseConfig</span><span class=p>):</span>        <span class=n>serialization_strategy</span> <span class=o>=</span> <span class=p>{</span>            <span class=nb>int</span><span class=p>:</span> <span class=p>{</span>                <span class=s2>\"serialize\"</span><span class=p>:</span> <span class=n>int_as_str</span>            <span class=p>}</span>        <span class=p>}</span><span class=nb>print</span><span class=p>(</span><span class=n>build_json_schema</span><span class=p>(</span><span class=n>FooBar</span><span class=p>)</span><span class=o>.</span><span class=n>to_json</span><span class=p>())</span></pre><details><summary>Click to show the result</summary><pre lang=json><span class=p>{</span><span class=w>    </span><span class=nt>\"type\"</span><span class=p>:</span><span class=w> </span><span class=s2>\"object\"</span><span class=p>,</span><span class=w>    </span><span class=nt>\"title\"</span><span class=p>:</span><span class=w> </span><span class=s2>\"FooBar\"</span><span class=p>,</span><span class=w>    </span><span class=nt>\"properties\"</span><span class=p>:</span><span class=w> </span><span class=p>{</span><span class=w>        </span><span class=nt>\"foo\"</span><span class=p>:</span><span class=w> </span><span class=p>{</span><span class=w>            </span><span class=nt>\"type\"</span><span class=p>:</span><span class=w> </span><span class=s2>\"array\"</span><span class=p>,</span><span class=w>            </span><span class=nt>\"items\"</span><span class=p>:</span><span class=w> </span><span class=p>{</span><span class=w>                </span><span class=nt>\"type\"</span><span class=p>:</span><span class=w> </span><span class=s2>\"string\"</span><span class=w>            </span><span class=p>}</span><span class=w>        </span><span class=p>},</span><span class=w>        </span><span class=nt>\"bar\"</span><span class=p>:</span><span class=w> </span><span class=p>{</span><span class=w>            </span><span class=nt>\"type\"</span><span class=p>:</span><span class=w> </span><span class=s2>\"string\"</span><span class=w>        </span><span class=p>}</span><span class=w>    </span><span class=p>},</span><span class=w>    </span><span class=nt>\"additionalProperties\"</span><span class=p>:</span><span class=w> </span><span class=kc>false</span><span class=p>,</span><span class=w>    </span><span class=nt>\"required\"</span><span class=p>:</span><span class=w> </span><span class=p>[</span><span class=w>        </span><span class=s2>\"foo\"</span><span class=p>,</span><span class=w>        </span><span class=s2>\"bar\"</span><span class=w>    </span><span class=p>]</span><span class=p>}</span></pre></details>          </div>        </div>        <div id=\"data\" data-project-tabs-target=\"content\" class=\"vertical-tabs__content\" role=\"tabpanel\" aria-labelledby=\"mobile-data-tab\" tabindex=\"-1\">          <h2 class=\"page-title\">Project details</h2><div class=\"sidebar-section\">  <h3 class=\"sidebar-section__title\">Project links</h3>  <ul class=\"vertical-tabs__list\">    <li>      <a class=\"vertical-tabs__tab vertical-tabs__tab--with-icon vertical-tabs__tab--condensed\" href=\"https://github.com/Fatal1ty/mashumaro\" rel=\"nofollow\">        <i class=\"fas fa-home\" aria-hidden=\"true\"></i>Homepage      </a>    </li>  </ul></div><div class=\"sidebar-section\">  <h3 class=\"sidebar-section__title\">Statistics</h3>  <div class=\"hidden github-repo-info\" data-controller=\"github-repo-info\">GitHub statistics:    <ul class=\"vertical-tabs__list\">      <li>        <a class=\"vertical-tabs__tab vertical-tabs__tab--with-icon vertical-tabs__tab--condensed\"           data-github-repo-info-target=\"stargazersUrl\" rel=\"noopener\">          <i class=\"fa fa-star\" aria-hidden=\"true\"></i>          <strong>Stars:</strong>          <span data-github-repo-info-target=\"stargazersCount\"></span>        </a>      </li>      <li>        <a class=\"vertical-tabs__tab vertical-tabs__tab--with-icon vertical-tabs__tab--condensed\"           data-github-repo-info-target=\"forksUrl\" rel=\"noopener\">          <i class=\"fa fa-code-branch\" aria-hidden=\"true\"></i>          <strong>Forks:</strong>          <span data-github-repo-info-target=\"forksCount\"></span>        </a>      </li>      <li>        <a class=\"vertical-tabs__tab vertical-tabs__tab--with-icon vertical-tabs__tab--condensed\"           data-github-repo-info-target=\"openIssuesUrl\" rel=\"noopener\">          <i class=\"fa fa-exclamation-circle\" aria-hidden=\"true\"></i>          <strong>Open issues:</strong>          <span data-github-repo-info-target=\"openIssuesCount\"></span>        </a>      </li>      <li>        <a class=\"vertical-tabs__tab vertical-tabs__tab--with-icon vertical-tabs__tab--condensed\"           data-github-repo-info-target=\"openPRsUrl\" rel=\"noopener\">          <i class=\"fa fa-code-pull-request\" aria-hidden=\"true\"></i>          <strong>Open PRs:</strong>          <span data-github-repo-info-target=\"openPRsCount\"></span>        </a>      </li>    </ul>  </div>  <p>View statistics for this project via <a href=\"https://libraries.io/pypi/mashumaro\" title=\"External link\" target=\"_blank\" rel=\"noopener\">Libraries.io</a>, or by using <a href=\"https://packaging.python.org/guides/analyzing-pypi-package-downloads/\" target=\"_blank\" rel=\"noopener\">our public dataset on Google BigQuery</a>  </p></div><div class=\"sidebar-section\">  <h3 class=\"sidebar-section__title\">Meta</h3>  <p><strong>License:</strong> Apache Software License (Apache License, Version 2.0)</p>    <p><strong>Author:</strong> <a href=\"mailto:random.gauss@gmail.com\">Alexander Tikhonov</a></p>  <p>    <strong>Requires:</strong> Python &gt;=3.8  </p></div><div class=\"sidebar-section\">    <h3 class=\"sidebar-section__title\">Maintainers</h3>      <span class=\"sidebar-section__maintainer\">        <a href=\"/user/Fatal1ty/\" aria-label=\"Fatal1ty\">          <span class=\"sidebar-section__user-gravatar\">            <img src=\"https://pypi-camo.freetls.fastly.net/71e2a4d4ee57191d2c305b787f2f3568b93bf5c7/68747470733a2f2f7365637572652e67726176617461722e636f6d2f6176617461722f30326462633462323336363066623637613332646561616365336264353330323f73697a653d3530\" height=\"50\" width=\"50\" alt=\"Avatar for Fatal1ty from gravatar.com\" title=\"Avatar for Fatal1ty from gravatar.com\">          </span>          <span class=\"sidebar-section__user-gravatar-text\">            Fatal1ty          </span>        </a>      </span></div><div class=\"sidebar-section\">  <h3 class=\"sidebar-section__title\">Classifiers</h3>  <ul class=\"sidebar-section__classifiers\">    <li>      <strong>Development Status</strong>      <ul>        <li>          <a href=\"/search/?c=Development+Status+%3A%3A+5+-+Production%2FStable\">            5 - Production/Stable          </a>        </li>      </ul>    </li>    <li>      <strong>Intended Audience</strong>      <ul>        <li>          <a href=\"/search/?c=Intended+Audience+%3A%3A+Developers\">            Developers          </a>        </li>      </ul>    </li>    <li>      <strong>License</strong>      <ul>        <li>          <a href=\"/search/?c=License+%3A%3A+OSI+Approved+%3A%3A+Apache+Software+License\">            OSI Approved :: Apache Software License          </a>        </li>      </ul>    </li>    <li>      <strong>Programming Language</strong>      <ul>        <li>          <a href=\"/search/?c=Programming+Language+%3A%3A+Python+%3A%3A+3+%3A%3A+Only\">            Python :: 3 :: Only          </a>        </li>        <li>          <a href=\"/search/?c=Programming+Language+%3A%3A+Python+%3A%3A+3.8\">            Python :: 3.8          </a>        </li>        <li>          <a href=\"/search/?c=Programming+Language+%3A%3A+Python+%3A%3A+3.9\">            Python :: 3.9          </a>        </li>        <li>          <a href=\"/search/?c=Programming+Language+%3A%3A+Python+%3A%3A+3.10\">            Python :: 3.10          </a>        </li>        <li>          <a href=\"/search/?c=Programming+Language+%3A%3A+Python+%3A%3A+3.11\">            Python :: 3.11          </a>        </li>        <li>          <a href=\"/search/?c=Programming+Language+%3A%3A+Python+%3A%3A+3.12\">            Python :: 3.12          </a>        </li>      </ul>    </li>  </ul></div>          <br>        </div>        <div id=\"history\" data-project-tabs-target=\"content\" class=\"vertical-tabs__content\" role=\"tabpanel\" aria-labelledby=\"history-tab mobile-history-tab\" tabindex=\"-1\">          <h2 class=\"page-title split-layout\">            <span>Release history</span>            <span class=\"reset-text margin-top\">              <a href=\"/help/#project-release-notifications\">Release notifications</a> |              <a href=\"/rss/project/mashumaro/releases.xml\">RSS feed <i class=\"fa fa-rss\" aria-hidden=\"true\"></i></a>            </span>          </h2>          <div class=\"release-timeline\">            <div class=\"release release--latest release--current\">              <div class=\"release__meta\">                <span class=\"badge\">This version</span>              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/blue-cube.572a5bfb.svg\">              </div>              <a class=\"card release__card\" href=\"/project/mashumaro/3.12/\">                <p class=\"release__version\">                  3.12                </p>                <p class=\"release__version-date\">                  <time datetime=\"2024-01-28T11:45:28+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Jan 28, 2024</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/mashumaro/3.11/\">                <p class=\"release__version\">                  3.11                </p>                <p class=\"release__version-date\">                  <time datetime=\"2023-11-23T18:48:49+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Nov 23, 2023</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/mashumaro/3.10/\">                <p class=\"release__version\">                  3.10                </p>                <p class=\"release__version-date\">                  <time datetime=\"2023-09-12T09:12:09+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Sep 12, 2023</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/mashumaro/3.9.1/\">                <p class=\"release__version\">                  3.9.1                </p>                <p class=\"release__version-date\">                  <time datetime=\"2023-08-22T21:49:41+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Aug 22, 2023</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/mashumaro/3.9/\">                <p class=\"release__version\">                  3.9                </p>                <p class=\"release__version-date\">                  <time datetime=\"2023-08-02T20:15:45+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Aug 2, 2023</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/mashumaro/3.8.1/\">                <p class=\"release__version\">                  3.8.1                </p>                <p class=\"release__version-date\">                  <time datetime=\"2023-06-23T16:33:58+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Jun 23, 2023</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/mashumaro/3.8/\">                <p class=\"release__version\">                  3.8                </p>                <p class=\"release__version-date\">                  <time datetime=\"2023-06-22T18:45:29+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Jun 22, 2023</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/mashumaro/3.7/\">                <p class=\"release__version\">                  3.7                </p>                <p class=\"release__version-date\">                  <time datetime=\"2023-04-13T17:55:38+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Apr 13, 2023</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/mashumaro/3.6/\">                <p class=\"release__version\">                  3.6                </p>                <p class=\"release__version-date\">                  <time datetime=\"2023-04-07T09:27:55+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Apr 7, 2023</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/mashumaro/3.5/\">                <p class=\"release__version\">                  3.5                </p>                <p class=\"release__version-date\">                  <time datetime=\"2023-02-13T10:36:39+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Feb 13, 2023</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/mashumaro/3.4/\">                <p class=\"release__version\">                  3.4                </p>                <p class=\"release__version-date\">                  <time datetime=\"2023-02-06T08:37:09+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Feb 6, 2023</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/mashumaro/3.3.1/\">                <p class=\"release__version\">                  3.3.1                </p>                <p class=\"release__version-date\">                  <time datetime=\"2023-01-10T13:41:22+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Jan 10, 2023</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/mashumaro/3.3/\">                <p class=\"release__version\">                  3.3                </p>                <p class=\"release__version-date\">                  <time datetime=\"2022-12-21T23:49:57+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Dec 21, 2022</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/mashumaro/3.2/\">                <p class=\"release__version\">                  3.2                </p>                <p class=\"release__version-date\">                  <time datetime=\"2022-12-02T22:18:06+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Dec 2, 2022</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/mashumaro/3.1.1/\">                <p class=\"release__version\">                  3.1.1                </p>                <p class=\"release__version-date\">                  <time datetime=\"2022-11-29T21:28:35+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Nov 29, 2022</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/mashumaro/3.1/\">                <p class=\"release__version\">                  3.1                </p>                <p class=\"release__version-date\">                  <time datetime=\"2022-10-19T15:22:44+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Oct 19, 2022</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/mashumaro/3.0.4/\">                <p class=\"release__version\">                  3.0.4                </p>                <p class=\"release__version-date\">                  <time datetime=\"2022-08-11T07:56:43+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Aug 11, 2022</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/mashumaro/3.0.3/\">                <p class=\"release__version\">                  3.0.3                </p>                <p class=\"release__version-date\">                  <time datetime=\"2022-06-08T10:20:20+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Jun 8, 2022</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/mashumaro/3.0.2/\">                <p class=\"release__version\">                  3.0.2                </p>                <p class=\"release__version-date\">                  <time datetime=\"2022-06-06T21:48:49+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Jun 6, 2022</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/mashumaro/3.0.1/\">                <p class=\"release__version\">                  3.0.1                </p>                <p class=\"release__version-date\">                  <time datetime=\"2022-04-03T11:30:48+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Apr 3, 2022</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/mashumaro/3.0/\">                <p class=\"release__version\">                  3.0                </p>                <p class=\"release__version-date\">                  <time datetime=\"2022-02-09T13:51:38+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Feb 9, 2022</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/mashumaro/2.11/\">                <p class=\"release__version\">                  2.11                </p>                <p class=\"release__version-date\">                  <time datetime=\"2022-01-04T20:06:12+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Jan 4, 2022</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/mashumaro/2.10.1/\">                <p class=\"release__version\">                  2.10.1                </p>                <p class=\"release__version-date\">                  <time datetime=\"2021-12-30T23:12:17+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Dec 30, 2021</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/mashumaro/2.10/\">                <p class=\"release__version\">                  2.10                </p>                <p class=\"release__version-date\">                  <time datetime=\"2021-12-30T20:38:55+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Dec 30, 2021</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/mashumaro/2.9.1/\">                <p class=\"release__version\">                  2.9.1                </p>                <p class=\"release__version-date\">                  <time datetime=\"2021-12-18T14:37:08+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Dec 18, 2021</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/mashumaro/2.9/\">                <p class=\"release__version\">                  2.9                </p>                <p class=\"release__version-date\">                  <time datetime=\"2021-11-02T07:28:52+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Nov 2, 2021</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/mashumaro/2.8/\">                <p class=\"release__version\">                  2.8                </p>                <p class=\"release__version-date\">                  <time datetime=\"2021-10-16T16:50:18+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Oct 16, 2021</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/mashumaro/2.7/\">                <p class=\"release__version\">                  2.7                </p>                <p class=\"release__version-date\">                  <time datetime=\"2021-09-14T19:33:11+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Sep 14, 2021</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/mashumaro/2.6.4/\">                <p class=\"release__version\">                  2.6.4                </p>                <p class=\"release__version-date\">                  <time datetime=\"2021-09-03T08:11:03+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Sep 3, 2021</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/mashumaro/2.6.3/\">                <p class=\"release__version\">                  2.6.3                </p>                <p class=\"release__version-date\">                  <time datetime=\"2021-08-23T08:27:10+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Aug 23, 2021</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/mashumaro/2.6.2/\">                <p class=\"release__version\">                  2.6.2                </p>                <p class=\"release__version-date\">                  <time datetime=\"2021-08-13T14:45:20+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Aug 13, 2021</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/mashumaro/2.6.1/\">                <p class=\"release__version\">                  2.6.1                </p>                <p class=\"release__version-date\">                  <time datetime=\"2021-08-02T11:52:56+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Aug 2, 2021</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/mashumaro/2.6/\">                <p class=\"release__version\">                  2.6                </p>                <p class=\"release__version-date\">                  <time datetime=\"2021-07-31T11:41:00+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Jul 31, 2021</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/mashumaro/2.5/\">                <p class=\"release__version\">                  2.5                </p>                <p class=\"release__version-date\">                  <time datetime=\"2021-04-28T19:01:13+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Apr 28, 2021</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/mashumaro/2.4/\">                <p class=\"release__version\">                  2.4                </p>                <p class=\"release__version-date\">                  <time datetime=\"2021-04-22T12:41:38+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Apr 22, 2021</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/mashumaro/2.3/\">                <p class=\"release__version\">                  2.3                </p>                <p class=\"release__version-date\">                  <time datetime=\"2021-04-19T13:23:07+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Apr 19, 2021</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/mashumaro/2.2/\">                <p class=\"release__version\">                  2.2                </p>                <p class=\"release__version-date\">                  <time datetime=\"2021-04-08T22:53:48+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Apr 8, 2021</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/mashumaro/2.1/\">                <p class=\"release__version\">                  2.1                </p>                <p class=\"release__version-date\">                  <time datetime=\"2021-04-06T21:31:51+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Apr 6, 2021</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/mashumaro/2.0.2/\">                <p class=\"release__version\">                  2.0.2                </p>                <p class=\"release__version-date\">                  <time datetime=\"2021-03-11T20:13:29+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Mar 11, 2021</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/mashumaro/2.0.1/\">                <p class=\"release__version\">                  2.0.1                </p>                <p class=\"release__version-date\">                  <time datetime=\"2021-03-07T09:00:03+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Mar 7, 2021</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/mashumaro/2.0/\">                <p class=\"release__version\">                  2.0                </p>                <p class=\"release__version-date\">                  <time datetime=\"2021-03-02T08:09:34+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Mar 2, 2021</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/mashumaro/1.24/\">                <p class=\"release__version\">                  1.24                </p>                <p class=\"release__version-date\">                  <time datetime=\"2021-02-06T17:16:25+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Feb 6, 2021</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/mashumaro/1.23/\">                <p class=\"release__version\">                  1.23                </p>                <p class=\"release__version-date\">                  <time datetime=\"2021-01-27T22:07:06+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Jan 27, 2021</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/mashumaro/1.22/\">                <p class=\"release__version\">                  1.22                </p>                <p class=\"release__version-date\">                  <time datetime=\"2021-01-15T01:03:57+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Jan 15, 2021</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/mashumaro/1.21/\">                <p class=\"release__version\">                  1.21                </p>                <p class=\"release__version-date\">                  <time datetime=\"2021-01-10T16:49:00+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Jan 10, 2021</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/mashumaro/1.20/\">                <p class=\"release__version\">                  1.20                </p>                <p class=\"release__version-date\">                  <time datetime=\"2021-01-09T20:59:54+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Jan 9, 2021</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/mashumaro/1.19/\">                <p class=\"release__version\">                  1.19                </p>                <p class=\"release__version-date\">                  <time datetime=\"2021-01-09T14:02:45+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Jan 9, 2021</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/mashumaro/1.18/\">                <p class=\"release__version\">                  1.18                </p>                <p class=\"release__version-date\">                  <time datetime=\"2021-01-04T13:48:39+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Jan 4, 2021</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/mashumaro/1.17/\">                <p class=\"release__version\">                  1.17                </p>                <p class=\"release__version-date\">                  <time datetime=\"2020-12-22T09:48:50+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Dec 22, 2020</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/mashumaro/1.16/\">                <p class=\"release__version\">                  1.16                </p>                <p class=\"release__version-date\">                  <time datetime=\"2020-12-18T22:07:36+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Dec 18, 2020</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/mashumaro/1.15/\">                <p class=\"release__version\">                  1.15                </p>                <p class=\"release__version-date\">                  <time datetime=\"2020-11-21T15:12:21+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Nov 21, 2020</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/mashumaro/1.14/\">                <p class=\"release__version\">                  1.14                </p>                <p class=\"release__version-date\">                  <time datetime=\"2020-11-19T22:18:26+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Nov 19, 2020</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/mashumaro/1.13/\">                <p class=\"release__version\">                  1.13                </p>                <p class=\"release__version-date\">                  <time datetime=\"2020-09-18T10:28:00+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Sep 18, 2020</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/mashumaro/1.12/\">                <p class=\"release__version\">                  1.12                </p>                <p class=\"release__version-date\">                  <time datetime=\"2019-12-13T21:37:53+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Dec 13, 2019</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/mashumaro/1.11/\">                <p class=\"release__version\">                  1.11                </p>                <p class=\"release__version-date\">                  <time datetime=\"2019-12-12T21:57:40+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Dec 12, 2019</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/mashumaro/1.10/\">                <p class=\"release__version\">                  1.10                </p>                <p class=\"release__version-date\">                  <time datetime=\"2019-12-10T17:35:43+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Dec 10, 2019</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/mashumaro/1.9/\">                <p class=\"release__version\">                  1.9                </p>                <p class=\"release__version-date\">                  <time datetime=\"2019-11-04T21:05:47+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Nov 4, 2019</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/mashumaro/1.8/\">                <p class=\"release__version\">                  1.8                </p>                <p class=\"release__version-date\">                  <time datetime=\"2019-10-27T13:40:00+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Oct 27, 2019</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/mashumaro/1.7/\">                <p class=\"release__version\">                  1.7                </p>                <p class=\"release__version-date\">                  <time datetime=\"2019-06-22T14:38:40+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Jun 22, 2019</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/mashumaro/1.6.2/\">                <p class=\"release__version\">                  1.6.2                </p>                <p class=\"release__version-date\">                  <time datetime=\"2019-03-16T17:14:46+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Mar 16, 2019</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/mashumaro/1.6.1/\">                <p class=\"release__version\">                  1.6.1                </p>                <p class=\"release__version-date\">                  <time datetime=\"2019-02-28T15:19:38+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Feb 28, 2019</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/mashumaro/1.6/\">                <p class=\"release__version\">                  1.6                </p>                <p class=\"release__version-date\">                  <time datetime=\"2019-02-23T12:15:55+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Feb 23, 2019</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/mashumaro/1.5/\">                <p class=\"release__version\">                  1.5                </p>                <p class=\"release__version-date\">                  <time datetime=\"2019-02-18T13:11:36+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Feb 18, 2019</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/mashumaro/1.4/\">                <p class=\"release__version\">                  1.4                </p>                <p class=\"release__version-date\">                  <time datetime=\"2019-01-20T09:51:18+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Jan 20, 2019</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/mashumaro/1.3/\">                <p class=\"release__version\">                  1.3                </p>                <p class=\"release__version-date\">                  <time datetime=\"2019-01-09T15:10:49+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Jan 9, 2019</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/mashumaro/1.2.post1/\">                <p class=\"release__version\">                  1.2.post1                </p>                <p class=\"release__version-date\">                  <time datetime=\"2018-12-12T15:25:13+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Dec 12, 2018</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/mashumaro/1.2/\">                <p class=\"release__version\">                  1.2                </p>                <p class=\"release__version-date\">                  <time datetime=\"2018-12-12T15:16:23+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Dec 12, 2018</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/mashumaro/1.1/\">                <p class=\"release__version\">                  1.1                </p>                <p class=\"release__version-date\">                  <time datetime=\"2018-11-27T12:06:43+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Nov 27, 2018</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/mashumaro/1.0/\">                <p class=\"release__version\">                  1.0                </p>                <p class=\"release__version-date\">                  <time datetime=\"2018-11-27T11:14:40+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Nov 27, 2018</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/mashumaro/0.9/\">                <p class=\"release__version\">                  0.9                </p>                <p class=\"release__version-date\">                  <time datetime=\"2018-11-26T14:12:43+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Nov 26, 2018</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/mashumaro/0.8.1/\">                <p class=\"release__version\">                  0.8.1                </p>                <p class=\"release__version-date\">                  <time datetime=\"2018-11-26T10:33:08+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Nov 26, 2018</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/mashumaro/0.8/\">                <p class=\"release__version\">                  0.8                </p>                <p class=\"release__version-date\">                  <time datetime=\"2018-11-26T10:22:13+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Nov 26, 2018</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/mashumaro/0.7/\">                <p class=\"release__version\">                  0.7                </p>                <p class=\"release__version-date\">                  <time datetime=\"2018-11-26T10:04:01+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Nov 26, 2018</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/mashumaro/0.6/\">                <p class=\"release__version\">                  0.6                </p>                <p class=\"release__version-date\">                  <time datetime=\"2018-11-23T15:02:50+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Nov 23, 2018</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/mashumaro/0.5/\">                <p class=\"release__version\">                  0.5                </p>                <p class=\"release__version-date\">                  <time datetime=\"2018-11-23T10:00:40+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Nov 23, 2018</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/mashumaro/0.4/\">                <p class=\"release__version\">                  0.4                </p>                <p class=\"release__version-date\">                  <time datetime=\"2018-11-03T14:52:46+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Nov 3, 2018</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/mashumaro/0.3.1/\">                <p class=\"release__version\">                  0.3.1                </p>                <p class=\"release__version-date\">                  <time datetime=\"2018-10-30T13:12:52+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Oct 30, 2018</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/mashumaro/0.3/\">                <p class=\"release__version\">                  0.3                </p>                <p class=\"release__version-date\">                  <time datetime=\"2018-10-30T13:05:18+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Oct 30, 2018</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/mashumaro/0.2/\">                <p class=\"release__version\">                  0.2                </p>                <p class=\"release__version-date\">                  <time datetime=\"2018-10-29T15:11:07+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Oct 29, 2018</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/mashumaro/0.1.3/\">                <p class=\"release__version\">                  0.1.3                </p>                <p class=\"release__version-date\">                  <time datetime=\"2018-09-25T11:22:47+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Sep 25, 2018</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/mashumaro/0.1.2/\">                <p class=\"release__version\">                  0.1.2                </p>                <p class=\"release__version-date\">                  <time datetime=\"2018-09-17T15:40:52+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Sep 17, 2018</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/mashumaro/0.1.1/\">                <p class=\"release__version\">                  0.1.1                </p>                <p class=\"release__version-date\">                  <time datetime=\"2018-09-11T09:09:42+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Sep 11, 2018</time>                </p>              </a>            </div>            <div class=\"release release--oldest\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/mashumaro/0.1/\">                <p class=\"release__version\">                  0.1                </p>                <p class=\"release__version-date\">                  <time datetime=\"2018-09-11T08:59:17+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Sep 11, 2018</time>                </p>              </a>            </div>          </div>        </div>          <div id=\"files\" data-project-tabs-target=\"content\" class=\"vertical-tabs__content\" role=\"tabpanel\" aria-labelledby=\"files-tab mobile-files-tab\" tabindex=\"-1\">            <h2 class=\"page-title\">Download files</h2>            <p>Download the file for your platform. If you're not sure which to choose, learn more about <a href=\"https://packaging.python.org/tutorials/installing-packages/\" title=\"External link\" target=\"_blank\" rel=\"noopener\">installing packages</a>.</p>            <h3>Source Distribution            </h3>                  <div class=\"file\">      <div class=\"file__graphic\">        <i class=\"far fa-file\" aria-hidden=\"true\"></i>      </div>      <div class=\"card file__card\">        <a href=\"https://files.pythonhosted.org/packages/db/18/5355583a63868cb58318d266daae6344e66b5bee324e0203c510a829dd38/mashumaro-3.12.tar.gz\">          mashumaro-3.12.tar.gz        </a>        (125.6 kB        <a href=\"#copy-hash-modal-eb5da74a-b430-4fa4-8120-c5a661dae433\">view hashes</a>)        <p class=\"file__meta\">          Uploaded <time datetime=\"2024-01-28T11:45:32+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Jan 28, 2024</time>          <code>source</code>        </p>      </div>    </div>            <h3>Built Distribution            </h3>                <div class=\"file\">      <div class=\"file__graphic\">        <i class=\"far fa-file\" aria-hidden=\"true\"></i>      </div>      <div class=\"card file__card\">        <a href=\"https://files.pythonhosted.org/packages/d6/30/eb3c3738ca98ecfc46624044fa3fa5cae95b80a64d67c79135a2ad172589/mashumaro-3.12-py3-none-any.whl\">          mashumaro-3.12-py3-none-any.whl        </a>        (89.9 kB        <a href=\"#copy-hash-modal-e9503ba8-c4ac-4147-a5ab-4e34c36342b2\">view hashes</a>)        <p class=\"file__meta\">          Uploaded <time datetime=\"2024-01-28T11:45:28+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Jan 28, 2024</time>          <code>py3</code>        </p>      </div>    </div>          </div><div id=\"copy-hash-modal-eb5da74a-b430-4fa4-8120-c5a661dae433\" class=\"modal modal--wide\">  <div class=\"modal__content\" role=\"dialog\">    <a href=\"#modal-close\" title=\"Close\" class=\"modal__close\">      <i class=\"fa fa-times\" aria-hidden=\"true\"></i>      <span class=\"sr-only\">Close</span>    </a>    <div class=\"modal__body\">      <h3 class=\"modal__title\"><a href=\"https://pip.pypa.io/en/stable/topics/secure-installs/#hash-checking-mode\" title=\"External link\" target=\"_blank\" rel=\"noopener\">Hashes</a> for mashumaro-3.12.tar.gz      </h3>      <table class=\"table table--hashes\">        <caption class=\"sr-only\">Hashes for mashumaro-3.12.tar.gz</caption>        <thead>          <tr>            <th scope=\"col\">Algorithm</th>            <th scope=\"col\">Hash digest</th>            <th></th>          </tr>        </thead>        <tbody>          <tr data-controller=\"clipboard\">            <th scope=\"row\">SHA256</th>            <td><code data-clipboard-target=\"source\">bb4ff10aee689edff24f6ff369843e1a826193d396b449b86ef58489bfe40c83</code></td>            <td class=\"table__align-right\">              <button type=\"button\" class=\"button button--small copy-tooltip copy-tooltip-w\" data-action=\"clipboard#copy\" data-clipboard-target=\"tooltip\" data-clipboard-tooltip-value=\"Copy to clipboard\">Copy              </button>            </td>          </tr>          <tr data-controller=\"clipboard\">            <th scope=\"row\">MD5</th>            <td><code data-clipboard-target=\"source\">97324a78e9eb7f2ae206204ad6c0fa2d</code></td>            <td class=\"table__align-right\">              <button type=\"button\" class=\"button button--small copy-tooltip copy-tooltip-w\" data-action=\"clipboard#copy\" data-clipboard-target=\"tooltip\" data-clipboard-tooltip-value=\"Copy to clipboard\">Copy              </button>            </td>          </tr>          <tr data-controller=\"clipboard\">            <th scope=\"row\">BLAKE2b-256</th>            <td><code data-clipboard-target=\"source\">db185355583a63868cb58318d266daae6344e66b5bee324e0203c510a829dd38</code></td>            <td class=\"table__align-right\">              <button type=\"button\" class=\"button button--small copy-tooltip copy-tooltip-w\" data-action=\"clipboard#copy\" data-clipboard-target=\"tooltip\" data-clipboard-tooltip-value=\"Copy to clipboard\">Copy              </button>            </td>          </tr>        </tbody>      </table>    </div>    <div class=\"modal__footer\">      <a href=\"#modal-close\" class=\"button button--primary modal__action\">Close</a>    </div>  </div></div><div id=\"copy-hash-modal-e9503ba8-c4ac-4147-a5ab-4e34c36342b2\" class=\"modal modal--wide\">  <div class=\"modal__content\" role=\"dialog\">    <a href=\"#modal-close\" title=\"Close\" class=\"modal__close\">      <i class=\"fa fa-times\" aria-hidden=\"true\"></i>      <span class=\"sr-only\">Close</span>    </a>    <div class=\"modal__body\">      <h3 class=\"modal__title\"><a href=\"https://pip.pypa.io/en/stable/topics/secure-installs/#hash-checking-mode\" title=\"External link\" target=\"_blank\" rel=\"noopener\">Hashes</a> for mashumaro-3.12-py3-none-any.whl      </h3>      <table class=\"table table--hashes\">        <caption class=\"sr-only\">Hashes for mashumaro-3.12-py3-none-any.whl</caption>        <thead>          <tr>            <th scope=\"col\">Algorithm</th>            <th scope=\"col\">Hash digest</th>            <th></th>          </tr>        </thead>        <tbody>          <tr data-controller=\"clipboard\">            <th scope=\"row\">SHA256</th>            <td><code data-clipboard-target=\"source\">bc4ab7ecaca106fcde706d77cef22816149285a10727b88141599855d4603e2f</code></td>            <td class=\"table__align-right\">              <button type=\"button\" class=\"button button--small copy-tooltip copy-tooltip-w\" data-action=\"clipboard#copy\" data-clipboard-target=\"tooltip\" data-clipboard-tooltip-value=\"Copy to clipboard\">Copy              </button>            </td>          </tr>          <tr data-controller=\"clipboard\">            <th scope=\"row\">MD5</th>            <td><code data-clipboard-target=\"source\">a9d4fa5b701ad9ac0ba3edb3d87cfaa9</code></td>            <td class=\"table__align-right\">              <button type=\"button\" class=\"button button--small copy-tooltip copy-tooltip-w\" data-action=\"clipboard#copy\" data-clipboard-target=\"tooltip\" data-clipboard-tooltip-value=\"Copy to clipboard\">Copy              </button>            </td>          </tr>          <tr data-controller=\"clipboard\">            <th scope=\"row\">BLAKE2b-256</th>            <td><code data-clipboard-target=\"source\">d630eb3c3738ca98ecfc46624044fa3fa5cae95b80a64d67c79135a2ad172589</code></td>            <td class=\"table__align-right\">              <button type=\"button\" class=\"button button--small copy-tooltip copy-tooltip-w\" data-action=\"clipboard#copy\" data-clipboard-target=\"tooltip\" data-clipboard-tooltip-value=\"Copy to clipboard\">Copy              </button>            </td>          </tr>        </tbody>      </table>    </div>    <div class=\"modal__footer\">      <a href=\"#modal-close\" class=\"button button--primary modal__action\">Close</a>    </div>  </div></div>      </div>    </div>  </div></div>    </main>    <footer class=\"footer\">      <div class=\"footer__logo\">        <img src=\"/static/images/white-cube.2351a86c.svg\" alt=\"\" class=\"-js-white-cube\">      </div>      <div class=\"footer__menus\">        <div class=\"footer__menu\">          <h2>Help</h2>          <nav aria-label=\"Help navigation\">            <ul>              <li><a href=\"https://packaging.python.org/tutorials/installing-packages/\" title=\"External link\" target=\"_blank\" rel=\"noopener\">Installing packages</a></li>              <li><a href=\"https://packaging.python.org/tutorials/packaging-projects/\" title=\"External link\" target=\"_blank\" rel=\"noopener\">Uploading packages</a></li>              <li><a href=\"https://packaging.python.org/\" title=\"External link\" target=\"_blank\" rel=\"noopener\">User guide</a></li>              <li><a href=\"https://www.python.org/dev/peps/pep-0541/\" title=\"External link\" target=\"_blank\" rel=\"noopener\">Project name retention</a></li>              <li><a href=\"/help/\">FAQs</a></li>            </ul>          </nav>        </div>        <div class=\"footer__menu\">          <h2>About PyPI</h2>          <nav aria-label=\"About PyPI navigation\">            <ul>              <li><a href=\"https://twitter.com/PyPI\" title=\"External link\" target=\"_blank\" rel=\"noopener\">PyPI on Twitter</a></li>              <li><a href=\"https://dtdg.co/pypi\" title=\"External link\" target=\"_blank\" rel=\"noopener\">Infrastructure dashboard</a></li>              <li><a href=\"/stats/\">Statistics</a></li>              <li><a href=\"/trademarks/\">Logos & trademarks</a></li>              <li><a href=\"/sponsors/\">Our sponsors</a></li>            </ul>          </nav>        </div>        <div class=\"footer__menu\">          <h2>Contributing to PyPI</h2>          <nav aria-label=\"How to contribute navigation\">            <ul>              <li><a href=\"/help/#feedback\">Bugs and feedback</a></li>              <li><a href=\"https://github.com/pypi/warehouse\" title=\"External link\" target=\"_blank\" rel=\"noopener\">Contribute on GitHub</a></li>              <li><a href=\"https://hosted.weblate.org/projects/pypa/warehouse/\" title=\"External link\" target=\"_blank\" rel=\"noopener\">Translate PyPI</a></li>              <li><a href=\"/sponsors/\">Sponsor PyPI</a></li>              <li><a href=\"https://github.com/pypi/warehouse/graphs/contributors\" title=\"External link\" target=\"_blank\" rel=\"noopener\">Development credits</a></li>            </ul>          </nav>        </div>        <div class=\"footer__menu\">          <h2>Using PyPI</h2>          <nav aria-label=\"Using PyPI navigation\">            <ul>              <li><a href=\"https://github.com/pypa/.github/blob/main/CODE_OF_CONDUCT.md\" title=\"External link\" target=\"_blank\" rel=\"noopener\">Code of conduct</a></li>              <li><a href=\"/security/\">Report security issue</a></li>              <li><a href=\"https://www.python.org/privacy/\" title=\"External link\" target=\"_blank\" rel=\"noopener\">Privacy policy</a></li>              <li><a href=\"/policy/terms-of-use/\">Terms of use</a></li>              <li><a href=\"/policy/acceptable-use-policy/\">Acceptable Use Policy</a></li>            </ul>          </nav>        </div>      </div>      <hr class=\"footer__divider\">      <div class=\"footer__text\">        <p>Status:<a href=\"https://status.python.org/\" title=\"External link\" target=\"_blank\" rel=\"noopener\">          <span data-statuspage-domain=\"https://2p66nmmycsj3.statuspage.io\">all systems operational</span></a>        </p>        <p>Developed and maintained by the Python community, for the Python community.          <br>          <a href=\"https://donate.pypi.org\">Donate today!</a>        </p>        <p>          \"PyPI\", \"Python Package Index\", and the blocks logos are registered <a href=\"/trademarks/\">trademarks</a> of the <a href=\"https://python.org/psf-landing\" target=\"_blank\" rel=\"noopener\">Python Software Foundation</a>.<br>        </p>        <p>          \u00a9 2024 <a href=\"https://www.python.org/psf-landing/\" title=\"External link\" target=\"_blank\" rel=\"noopener\">Python Software Foundation</a><br>          <a href=\"/sitemap/\">Site map</a>        </p>      </div>      <div class=\"centered hide-on-desktop\">        <button type=\"button\" class=\"button button--switch-to-desktop hidden\" data-viewport-toggle-target=\"switchToDesktop\" data-action=\"viewport-toggle#switchToDesktop\">Switch to desktop version        </button>      </div>    </footer>    <div class=\"language-switcher\">      <form action=\"/locale/\">        <ul>          <li>            <button              class=\"language-switcher__selected\"              name=\"locale_id\" value=\"en\" type=\"submit\"            >              English            </button>          </li>          <li>            <button              name=\"locale_id\" value=\"es\" type=\"submit\"            >              espa\u00f1ol            </button>          </li>          <li>            <button              name=\"locale_id\" value=\"fr\" type=\"submit\"            >              fran\u00e7ais            </button>          </li>          <li>            <button              name=\"locale_id\" value=\"ja\" type=\"submit\"            >              \u65e5\u672c\u8a9e            </button>          </li>          <li>            <button              name=\"locale_id\" value=\"pt_BR\" type=\"submit\"            >              portugu\u00eas (Brasil)            </button>          </li>          <li>            <button              name=\"locale_id\" value=\"uk\" type=\"submit\"            >              \u0443\u043a\u0440\u0430\u0457\u043d\u0441\u044c\u043a\u0430            </button>          </li>          <li>            <button              name=\"locale_id\" value=\"el\" type=\"submit\"            >              \u0395\u03bb\u03bb\u03b7\u03bd\u03b9\u03ba\u03ac            </button>          </li>          <li>            <button              name=\"locale_id\" value=\"de\" type=\"submit\"            >              Deutsch            </button>          </li>          <li>            <button              name=\"locale_id\" value=\"zh_Hans\" type=\"submit\"            >              \u4e2d\u6587 (\u7b80\u4f53)            </button>          </li>          <li>            <button              name=\"locale_id\" value=\"zh_Hant\" type=\"submit\"            >              \u4e2d\u6587 (\u7e41\u9ad4)            </button>          </li>          <li>            <button              name=\"locale_id\" value=\"ru\" type=\"submit\"            >              \u0440\u0443\u0441\u0441\u043a\u0438\u0439            </button>          </li>          <li>            <button              name=\"locale_id\" value=\"he\" type=\"submit\"            >              \u05e2\u05d1\u05e8\u05d9\u05ea            </button>          </li>          <li>            <button              name=\"locale_id\" value=\"eo\" type=\"submit\"            >              esperanto            </button>          </li>        </ul>      </form>    </div><div class=\"sponsors\">  <p class=\"sponsors__title\">Supported by</p>  <div class=\"sponsors__divider\"></div>        <a class=\"sponsors__sponsor\" target=\"_blank\" rel=\"noopener\" href=\"https://aws.amazon.com/\">          <img class=sponsors__image src=\"https://pypi-camo.freetls.fastly.net/ed7074cadad1a06f56bc520ad9bd3e00d0704c5b/68747470733a2f2f73746f726167652e676f6f676c65617069732e636f6d2f707970692d6173736574732f73706f6e736f726c6f676f732f6177732d77686974652d6c6f676f2d7443615473387a432e706e67\" alt=AWS loading=lazy>          <span class=\"sponsors__name\">AWS</span>          <span class=\"sponsors__service\">            Cloud computing and Security Sponsor          </span>        </a>        <a class=\"sponsors__sponsor\" target=\"_blank\" rel=\"noopener\" href=\"https://www.datadoghq.com/\">          <img class=sponsors__image src=\"https://pypi-camo.freetls.fastly.net/8855f7c063a3bdb5b0ce8d91bfc50cf851cc5c51/68747470733a2f2f73746f726167652e676f6f676c65617069732e636f6d2f707970692d6173736574732f73706f6e736f726c6f676f732f64617461646f672d77686974652d6c6f676f2d6668644c4e666c6f2e706e67\" alt=Datadog loading=lazy>          <span class=\"sponsors__name\">Datadog</span>          <span class=\"sponsors__service\">            Monitoring          </span>        </a>        <a class=\"sponsors__sponsor\" target=\"_blank\" rel=\"noopener\" href=\"https://www.fastly.com/\">          <img class=sponsors__image src=\"https://pypi-camo.freetls.fastly.net/df6fe8829cbff2d7f668d98571df1fd011f36192/68747470733a2f2f73746f726167652e676f6f676c65617069732e636f6d2f707970692d6173736574732f73706f6e736f726c6f676f732f666173746c792d77686974652d6c6f676f2d65684d3077735f6f2e706e67\" alt=Fastly loading=lazy>          <span class=\"sponsors__name\">Fastly</span>          <span class=\"sponsors__service\">            CDN          </span>        </a>        <a class=\"sponsors__sponsor\" target=\"_blank\" rel=\"noopener\" href=\"https://careers.google.com/\">          <img class=sponsors__image src=\"https://pypi-camo.freetls.fastly.net/420cc8cf360bac879e24c923b2f50ba7d1314fb0/68747470733a2f2f73746f726167652e676f6f676c65617069732e636f6d2f707970692d6173736574732f73706f6e736f726c6f676f732f676f6f676c652d77686974652d6c6f676f2d616734424e3774332e706e67\" alt=Google loading=lazy>          <span class=\"sponsors__name\">Google</span>          <span class=\"sponsors__service\">            Download Analytics          </span>        </a>        <a class=\"sponsors__sponsor\" target=\"_blank\" rel=\"noopener\" href=\"https://www.python.org/psf/sponsors/#microsoft\">          <img class=sponsors__image src=\"https://pypi-camo.freetls.fastly.net/524d1ce72f7772294ca4c1fe05d21dec8fa3f8ea/68747470733a2f2f73746f726167652e676f6f676c65617069732e636f6d2f707970692d6173736574732f73706f6e736f726c6f676f732f6d6963726f736f66742d77686974652d6c6f676f2d5a443172685444462e706e67\" alt=Microsoft loading=lazy>          <span class=\"sponsors__name\">Microsoft</span>          <span class=\"sponsors__service\">            PSF Sponsor          </span>        </a>        <a class=\"sponsors__sponsor\" target=\"_blank\" rel=\"noopener\" href=\"https://www.pingdom.com/\">          <img class=sponsors__image src=\"https://pypi-camo.freetls.fastly.net/d01053c02f3a626b73ffcb06b96367fdbbf9e230/68747470733a2f2f73746f726167652e676f6f676c65617069732e636f6d2f707970692d6173736574732f73706f6e736f726c6f676f732f70696e67646f6d2d77686974652d6c6f676f2d67355831547546362e706e67\" alt=Pingdom loading=lazy>          <span class=\"sponsors__name\">Pingdom</span>          <span class=\"sponsors__service\">            Monitoring          </span>        </a>        <a class=\"sponsors__sponsor\" target=\"_blank\" rel=\"noopener\" href=\"https://getsentry.com/for/python\">          <img class=sponsors__image src=\"https://pypi-camo.freetls.fastly.net/67af7117035e2345bacb5a82e9aa8b5b3e70701d/68747470733a2f2f73746f726167652e676f6f676c65617069732e636f6d2f707970692d6173736574732f73706f6e736f726c6f676f732f73656e7472792d77686974652d6c6f676f2d4a2d6b64742d706e2e706e67\" alt=Sentry loading=lazy>          <span class=\"sponsors__name\">Sentry</span>          <span class=\"sponsors__service\">            Error logging          </span>        </a>        <a class=\"sponsors__sponsor\" target=\"_blank\" rel=\"noopener\" href=\"https://statuspage.io\">          <img class=sponsors__image src=\"https://pypi-camo.freetls.fastly.net/b611884ff90435a0575dbab7d9b0d3e60f136466/68747470733a2f2f73746f726167652e676f6f676c65617069732e636f6d2f707970692d6173736574732f73706f6e736f726c6f676f732f737461747573706167652d77686974652d6c6f676f2d5467476c6a4a2d502e706e67\" alt=StatusPage loading=lazy>          <span class=\"sponsors__name\">StatusPage</span>          <span class=\"sponsors__service\">            Status page          </span>        </a></div>  </body></html>",
  "embeddings": []
}
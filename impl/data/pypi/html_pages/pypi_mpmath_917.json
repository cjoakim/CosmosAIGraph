{
  "libtype": "pypi",
  "libname": "mpmath",
  "url": "http://mpmath.org/",
  "html": "<!DOCTYPE html><html><head><title>mpmath - Python library for arbitrary-precision floating-point arithmetic</title><meta http-equiv=\"Content-Type\" content=\"text/html;charset=utf-8\" ><style type=\"text/css\">body { font-family: arial, sans-serif; line-height: 1.6em; margin: 2em; }#main { max-width: 800px; margin-left: auto; margin-right: auto; }h1, h2, h3 { text-align:center; }h1 { margin-bottom: 1.5em; }h2, h3 { margin-top: 2em; }p { text-align:justify; text-justify:inter-word; }table { border-collapse:collapse; }table, th, td { border: 1px solid #aaa; }th, td { padding:0.3em; }pre { background-color: #f4f4f4; line-height: 1.3em; margin-left: 2em; margin-right: 2em; white-space: pre-wrap; white-space: -moz-pre-wrap; white-space: -pre-wrap; white-space: -o-pre-wrap; word-wrap: break-word;}</style></head><body><div id=\"main\"><a href=\"https://github.com/fredrik-johansson/mpmath\"><img style=\"position: absolute; top: 0; right: 0; border: 0;\" src=\"https://camo.githubusercontent.com/e7bbb0521b397edbd5fe43e7f760759336b5e05f/68747470733a2f2f73332e616d617a6f6e6177732e636f6d2f6769746875622f726962626f6e732f666f726b6d655f72696768745f677265656e5f3030373230302e706e67\" alt=\"Fork me on GitHub\" data-canonical-src=\"https://s3.amazonaws.com/github/ribbons/forkme_right_green_007200.png\"></a><div style=\"text-align:center\"><img src=\"frontpic.png\" alt=\"plots generated with mpmath\"/></div><h1><img src=\"mpmath.svg\" alt=\"mpmath\" title=\"mpmath\" style=\"width:260px\" /></h1><p><b>mpmath</b> is a free (BSD licensed) Python library for real and complex floating-point arithmetic with arbitrary precision. It has been developed by <a href=\"http://fredrikj.net\">Fredrik Johansson</a> since 2007, with help from many contributors.</p><p>The following example computes 50 digits of pi by numerically evaluating the Gaussian integral with mpmath. See <a href=\"http://fredrikj.net/blog/2011/03/100-mpmath-one-liners-for-pi/\">100 mpmath one-liners for pi</a> and the documentation links below for many more examples!</p><pre>>>> from mpmath import mp>>> mp.dps = 50>>> print(mp.quad(lambda x: mp.exp(-x**2), [-mp.inf, mp.inf]) ** 2)3.1415926535897932384626433832795028841971693993751</pre><p>mpmath works with both Python 2 and Python 3, with no other required dependencies. It can be used as a library, interactively via the Python interpreter, or from within the <a href=\"http://sympy.org\">SymPy</a> or <a href=\"http://sagemath.org\">Sage</a> computer algebra systems which include mpmath as standard component. <a href=\"https://cocalc.com\">CoCalc</a> lets you use mpmath directly in the browser.</p><h2>Downloads, source code, development</h2><p>The latest version is 1.3.0, released 2023-03-07. Download: <a href=\"files/mpmath-1.3.0.tar.gz\">mpmath-1.3.0.tar.gz</a></p><p>Source code git repository: <a href=\"http://github.com/fredrik-johansson/mpmath\">https://github.com/fredrik-johansson/mpmath</a></p><p>Issue tracker: <a href=\"https://github.com/fredrik-johansson/mpmath/issues\">https://github.com/fredrik-johansson/mpmath/issues</a></p><p>Feedback and questions are welcome on the <a href=\"https://groups.google.com/forum/#!forum/mpmath\">mpmath mailing list</a> (mpmath@googlegroups.com)</p><p>This project was previously hosted on Google Code. See <a href=\"http://code.google.com/p/mpmath/\">http://code.google.com/p/mpmath/</a> for the old site.</p><h2>Documentation</h2><p>The documentation provides installation instructions and lots of interactive examples.</p><p><b><a href=\"doc/current\">Main documentation, current development version</a> (HTML)</b></p><p><b><a href=\"doc/current/mpmath.pdf\">Main documentation, current development version</a> (PDF)</b></p><p><a href=\"doc/1.3.0\">Main documentation, 1.3.0 release</a> (HTML)</p><h2>Features</h2><p>mpmath can be used as an arbitrary-precision substitute for Python's float/complex types and math/cmath modules, but also does much more <b>advanced mathematics</b>. Almost any calculation can be performed just as well at 10-digit or 1000-digit precision, with either real or complex numbers, and in many cases mpmath implements efficient algorithms that scale well for extremely high precision work.</p><ul><li>Numerical integration (regular, double/triple integrals, oscillatory)</li><li>Numerical differentiation and differintegration (arbitrary orders); partial derivatives</li><li>Limits and summation of infinite series (with convergence acceleration)</li><li>Root-finding (1D and multidimensional; secant method, bisection, modified Newton's method, and other algorithms)</li><li>Polynomial evaluation and polynomial root-finding</li><li>Chebyshev approximations, Fourier and Taylor series</li><li>Solving ODEs</li><li>Integer relation detection (constant recognition)</li><li>Linear algebra (linear system solving, LU factorization, matrix inverse, matrix norms, matrix exponentials/logarithms/square roots, eigenvalues, singular values, QR factorization)</li><li>Inverse Laplace transforms</li></ul><p>mpmath implements a huge number of <b>special functions</b>, with arbitrary precision and full support for complex numbers:</p><blockquote style=\"font-size:0.8em\"><b>Elementary functions</b> (sqrt, exp, log, trigonometric, hyperbolic and inverse functions);<b>mathematical constants</b> (pi, e, the golden ratio, Euler's constant gamma, Catalan's, Apery's, Khinchin's and Glaisher's constants);the Lambert W function (all branches);the <b>error function</b> (erf), imaginary and complementary error functions; the inverse error function of a real argument; normal distribution functions;<b>gamma functions</b> (complete and incomplete), factorials, double factorials and binomial coefficients, the log-gamma function; complete and incomplete beta functions; <b>exponential and trigonometric integrals</b>;Fibonacci and Stirling numbers;Barnes G-function, super- and hyperfactorials;polygamma functions;<b>Riemann zeta function</b> (including evaluation with the Riemann-Siegel expansion), Hurwitz zeta function, Riemann-Siegel and related functions; Riemann zeta zeros;Bernoulli numbers (fast numerical and exact computation of large Bernoulli numbers), Bernoulli polynomials, Euler numbers and polynomials;<b>polylogarithms</b>, Clausen functions;Stieltjes constants;<b>Bessel functions</b>; Hankel, Struve, Kelvin, Whittaker, Airy, Coulomb functions; Bessel function zeros; parabolic cylinder functions;the arithmetic-geometric mean;complete and incomplete <b>elliptic integrals</b> (Legendre and Carlsen forms);Jacobi elliptic functions and <b>Jacobi theta functions</b>;Jacobi, Legendre, Chebyshev and other <b>orthogonal polynomials</b>; associated Legendre functions; spherical harmonics;<b>generalized hypergeometric functions</b>; the <b>Meijer G-function</b>; Borel regularized hypergeometric series; bilateral hypergeometric series; 2D hypergeometric series (Appell, Horn, Kamp&eacute; de F&eacute;riet functions);q-factorials and q-hypergeometric series.</blockquote><p>mpmath also includes rudimentary support for interval arithmetic (only basic functions are available).</p><p>If <a href=\"http://matplotlib.org\">matplotlib</a> is available, mpmath provides a convenient plotting interface. The pictures at the top of this page were generated by the commands <tt>plot([fresnels, fresnelc])</tt>, <tt>cplot(fresnels)</tt>, and the <a href=\"https://github.com/fredrik-johansson/mpmath/blob/master/demo/mandelbrot.py\">mandelbrot.py</a> script. See the <a href=\"gallery\">function gallery</a> for more images.</p><p>mpmath internally uses Python's builtin long integers by default, but automatically switches to <a href=\"http://gmplib.org/\">GMP</a>/<a href=\"http://www.mpir.org/\">MPIR</a> for much faster high-precision arithmetic if <a href=\"http://code.google.com/p/gmpy\">gmpy</a> is installed or if mpmath is imported from within <a href=\"http://sagemath.org\">Sage</a>.</p><h2>Software using mpmath</h2><p>The <a href=\"http://sagemath.org\">Sage</a> computer algebra system includes mpmath as a standard component, and uses it for numerical evaluation of special functions. <a href=\"http://sympy.org\">SymPy</a> and <a href=\"http://code.google.com/p/sympycore\">SympyCore</a>, Python computer algebra systems, use mpmath for numerical evaluation. Other software includes:</p><ul><li><a href=\"https://code.google.com/archive/p/hcpy/\">hcpy</a>, an RPN calculator</li><li><a href=\"https://gitorious.org/pytaylor/pytaylor\">pytaylor</a> Taylor models for Python using mpmath and sympy</li><li><a href=\"http://tnt.math.se.tmu.ac.jp/nzmath/\">NZMATH</a> uses mpmath for auxiliary calculations in its ECPP code</li></ul><h2>References to mpmath</h2><p>As of April 2014, Google Scholar <a href=\"http://scholar.google.com/scholar?hl=en&q=&quot;mpmath&quot;\">lists over 100 references to mpmath</a> in the scientific literature. A very outdated hand-compiled list can be found <a href=\"http://code.google.com/p/mpmath/wiki/CitingMpmath\">here</a>.</p><p>If you use mpmath in your research, please cite it! In BibTeX format, the following entry can be used:</p><pre>@manual{mpmath,  key     = {mpmath},  author  = {The mpmath development team},  title   = {mpmath: a {P}ython library for arbitrary-precision floating-point arithmetic (version 1.3.0)},  note    = {{\\tt http://mpmath.org/}},  year    = {2023},}</pre>This might render as:<ul><li>The mpmath development team. <i>mpmath: a Python library for arbitrary-precision floating-point arithmetic (version 1.3.0)</i>, 2023. http://mpmath.org/.</li></ul></div></body></html>",
  "embeddings": []
}
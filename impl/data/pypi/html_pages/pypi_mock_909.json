{
  "libtype": "pypi",
  "libname": "mock",
  "url": "http://mock.readthedocs.org/en/latest/",
  "html": "<!DOCTYPE html><html lang=\"en\">  <head>    <meta charset=\"utf-8\" />    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" /><meta name=\"generator\" content=\"Docutils 0.19: https://docutils.sourceforge.io/\" />    <title>Mock - Mocking and Testing Library &#8212; Mock 5.1.0 documentation</title>    <link rel=\"stylesheet\" type=\"text/css\" href=\"_static/pygments.css\" />    <link rel=\"stylesheet\" type=\"text/css\" href=\"_static/nature.css\" />    <link rel=\"stylesheet\" type=\"text/css\" href=\"/_/static/css/badge_only.css\" />    <script data-url_root=\"./\" id=\"documentation_options\" src=\"_static/documentation_options.js\"></script>    <script src=\"_static/jquery.js\"></script>    <script src=\"_static/underscore.js\"></script>    <script src=\"_static/_sphinx_javascript_frameworks_compat.js\"></script>    <script src=\"_static/doctools.js\"></script>    <script src=\"_static/sphinx_highlight.js\"></script>    <script async=\"async\" src=\"/_/static/javascript/readthedocs-doc-embed.js\"></script>    <link rel=\"index\" title=\"Index\" href=\"genindex.html\" />    <link rel=\"search\" title=\"Search\" href=\"search.html\" />    <link rel=\"next\" title=\"Changelog\" href=\"changelog.html\" />   <!-- RTD Extra Head --><link rel=\"stylesheet\" href=\"/_/static/css/readthedocs-doc-embed.css\" type=\"text/css\" /><script type=\"application/json\" id=\"READTHEDOCS_DATA\">{\"ad_free\": false, \"api_host\": \"https://readthedocs.org\", \"builder\": \"sphinx\", \"canonical_url\": null, \"docroot\": \"/docs/\", \"features\": {\"docsearch_disabled\": false}, \"global_analytics_code\": \"UA-17997319-1\", \"language\": \"en\", \"page\": \"index\", \"programming_language\": \"py\", \"project\": \"mock\", \"proxied_api_host\": \"/_\", \"source_suffix\": \".txt\", \"subprojects\": {}, \"theme\": \"nature\", \"user_analytics_code\": \"\", \"version\": \"latest\"}</script><!--Using this variable directly instead of using `JSON.parse` is deprecated.The READTHEDOCS_DATA global variable will be removed in the future.--><script type=\"text/javascript\">READTHEDOCS_DATA = JSON.parse(document.getElementById('READTHEDOCS_DATA').innerHTML);</script><script type=\"text/javascript\" src=\"/_/static/javascript/readthedocs-analytics.js\" async=\"async\"></script><!-- end RTD <extrahead> --></head><body>    <div class=\"related\" role=\"navigation\" aria-label=\"related navigation\">      <h3>Navigation</h3>      <ul>        <li class=\"right\" style=\"margin-right: 10px\">          <a href=\"genindex.html\" title=\"General Index\"             accesskey=\"I\">index</a></li>        <li class=\"right\" >          <a href=\"py-modindex.html\" title=\"Python Module Index\"             >modules</a> |</li>        <li class=\"right\" >          <a href=\"changelog.html\" title=\"Changelog\"             accesskey=\"N\">next</a> |</li>        <li class=\"nav-item nav-item-0\"><a href=\"#\">Mock 5.1.0 documentation</a> &#187;</li>        <li class=\"nav-item nav-item-this\"><a href=\"\">Mock - Mocking and Testing Library</a></li>       </ul>    </div>      <div class=\"document\">      <div class=\"documentwrapper\">        <div class=\"bodywrapper\">          <div class=\"body\" role=\"main\">              <section id=\"mock-mocking-and-testing-library\"><h1>Mock - Mocking and Testing Library<a class=\"headerlink\" href=\"#mock-mocking-and-testing-library\" title=\"Permalink to this heading\">\u00b6</a></h1><p>mock is a library for testing in Python. It allows you to replace parts ofyour system under test with mock objects and make assertions about how theyhave been used.</p><p>mock is now part of the Python standard library, available as <a class=\"reference external\" href=\"https://docs.python.org/dev/library/unittest.mock.html\">unittest.mock</a> in Python 3.3onwards.</p><p>This package contains a rolling backport of the standard library mock codecompatible with Python 3.6 and up.</p><p>Please see the standard library documentation for more details.</p><dl class=\"field-list simple\"><dt class=\"field-odd\">Homepage<span class=\"colon\">:</span></dt><dd class=\"field-odd\"><p><a class=\"reference external\" href=\"http://mock.readthedocs.org/en/latest/\">Mock Homepage</a></p></dd><dt class=\"field-even\">Download<span class=\"colon\">:</span></dt><dd class=\"field-even\"><p><a class=\"reference external\" href=\"https://pypi.org/project/mock/\">Mock on PyPI</a></p></dd><dt class=\"field-odd\">Documentation<span class=\"colon\">:</span></dt><dd class=\"field-odd\"><p><a class=\"reference external\" href=\"https://docs.python.org/dev/library/unittest.mock.html\">Python Docs</a></p></dd><dt class=\"field-even\">License<span class=\"colon\">:</span></dt><dd class=\"field-even\"><p><a class=\"reference external\" href=\"https://github.com/testing-cabal/mock/blob/master/LICENSE.txt\">BSD License</a></p></dd><dt class=\"field-odd\">Support<span class=\"colon\">:</span></dt><dd class=\"field-odd\"><p><a class=\"reference external\" href=\"http://lists.idyll.org/listinfo/testing-in-python\">Mailing list (testing-in-python&#64;lists.idyll.org)</a></p></dd><dt class=\"field-even\">Code<span class=\"colon\">:</span></dt><dd class=\"field-even\"><p><a class=\"reference external\" href=\"https://github.com/testing-cabal/mock\">GitHub</a></p></dd><dt class=\"field-odd\">Issue tracker<span class=\"colon\">:</span></dt><dd class=\"field-odd\"><p><a class=\"reference external\" href=\"https://github.com/testing-cabal/mock/issues\">GitHub Issues</a></p></dd><dt class=\"field-even\">Build status<span class=\"colon\">:</span></dt><dd class=\"field-even\"><p><a class=\"reference external\" href=\"https://circleci.com/gh/testing-cabal/mock/tree/master\"><img alt=\"CircleCI\" src=\"https://circleci.com/gh/testing-cabal/mock/tree/master.svg?style=shield\" /></a> <a class=\"reference external\" href=\"http://mock.readthedocs.org/en/latest/\"><img alt=\"Docs\" src=\"https://readthedocs.org/projects/mock/badge/?version=latest\" /></a></p></dd></dl><span class=\"target\" id=\"module-mock\"></span><div class=\"toctree-wrapper compound\" id=\"index-0\"></div><section id=\"python-version-compatibility\"><h2>Python Version Compatibility<a class=\"headerlink\" href=\"#python-version-compatibility\" title=\"Permalink to this heading\">\u00b6</a></h2><ul class=\"simple\"><li><p>Version 1.0.1 is the last version compatible with Python &lt; 2.6.</p></li><li><p>Version 1.3.0 is the last version compatible with Python 3.2.</p></li><li><p>Version 2.0.0 is the last version compatible with Python 2.6.</p></li><li><p>Version 2.0.0 is the last version offering official Jython support.</p></li><li><p>version 3.0.5 is the last version supporting Python 3.5 and lower.</p></li></ul></section><section id=\"installing\"><span id=\"index-1\"></span><span id=\"id1\"></span><h2>Installing<a class=\"headerlink\" href=\"#installing\" title=\"Permalink to this heading\">\u00b6</a></h2><span class=\"target\" id=\"index-2\"></span><p id=\"index-3\">You can checkout the latest development version from GitHubrepository with the following command:</p><blockquote><div><p><code class=\"docutils literal notranslate\"><span class=\"pre\">git</span> <span class=\"pre\">clone</span> <span class=\"pre\">https://github.com/testing-cabal/mock.git</span></code></p></div></blockquote><p id=\"index-4\">You can install mock with pip:</p><blockquote><div><div class=\"line-block\"><div class=\"line\"><code class=\"docutils literal notranslate\"><span class=\"pre\">pip</span> <span class=\"pre\">install</span> <span class=\"pre\">-U</span> <span class=\"pre\">mock</span></code></div></div></div></blockquote></section><section id=\"bug-reports\"><span id=\"index-5\"></span><h2>Bug Reports<a class=\"headerlink\" href=\"#bug-reports\" title=\"Permalink to this heading\">\u00b6</a></h2><p>Issues with the backport process, such as compatibility with a particularPython, should be reported to the <a class=\"reference external\" href=\"https://github.com/testing-cabal/mock/issues\">bug tracker</a>. Feature requests and issueswith Mock functionality should be reported to the <a class=\"reference external\" href=\"https://bugs.python.org\">Python bug tracker</a>.</p></section><section id=\"changelog\"><span id=\"index-6\"></span><h2>Changelog<a class=\"headerlink\" href=\"#changelog\" title=\"Permalink to this heading\">\u00b6</a></h2><p>See the <a class=\"reference internal\" href=\"changelog.html\"><span class=\"doc\">change log</span></a>.</p></section><section id=\"maintainer-notes\"><span id=\"index-7\"></span><h2>Maintainer Notes<a class=\"headerlink\" href=\"#maintainer-notes\" title=\"Permalink to this heading\">\u00b6</a></h2><section id=\"development\"><h3>Development<a class=\"headerlink\" href=\"#development\" title=\"Permalink to this heading\">\u00b6</a></h3><p>Checkout from git (see <a class=\"reference internal\" href=\"#installing\"><span class=\"std std-ref\">Installing</span></a>) and submit pull requests.</p><p>Committers can just push as desired: since all semantic development takesplace in cPython, the backport process is as lightweight as we can make it.</p><p>If you end up fixing anything backport-specific, please add an entryto the top of <code class=\"docutils literal notranslate\"><span class=\"pre\">CHANGELOG.rst</span></code> so it shows up in the next releasenotes.</p></section><section id=\"releasing\"><h3>Releasing<a class=\"headerlink\" href=\"#releasing\" title=\"Permalink to this heading\">\u00b6</a></h3><p>NB: please use semver. Bump the major component on API breaks, minor on allnon-bugfix changes, patch on bugfix only changes.</p><ol class=\"arabic simple\"><li><p>Run <code class=\"docutils literal notranslate\"><span class=\"pre\">release.py</span> <span class=\"pre\">[major|minor|bugfix]</span></code> which will roll out newNEWS items, bump the version number and create a commit for the release.</p></li><li><p>Review that commit, feel free to amend it if you want to note anythingmanually in <code class=\"docutils literal notranslate\"><span class=\"pre\">CHANGELOG.rst</span></code>.</p></li><li><p>Push to the <code class=\"docutils literal notranslate\"><span class=\"pre\">master</span></code> branch on<a class=\"reference external\" href=\"https://github.com/testing-cabal/mock.git\">https://github.com/testing-cabal/mock.git</a> and the Circle CIautomation will take care of pushing releases to PyPI andcreating a tag.</p></li></ol></section><section id=\"backporting-rules\"><h3>Backporting rules<a class=\"headerlink\" href=\"#backporting-rules\" title=\"Permalink to this heading\">\u00b6</a></h3><ul><li><p>If code such as this causes coverage checking to drop below 100%:</p><div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">def</span> <span class=\"nf\">will_never_be_called</span><span class=\"p\">():</span>    <span class=\"k\">pass</span></pre></div></div><p>It should be adjusted to the following pattern, preferably upstream,so that the <code class=\"docutils literal notranslate\"><span class=\"pre\">.coveragerc</span></code> in this repo knows to ignore it:</p><div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">def</span> <span class=\"nf\">will_never_be_called</span><span class=\"p\">():</span>    <span class=\"k\">pass</span>  <span class=\"c1\"># pragma: no cov</span></pre></div></div></li><li><p>If code such as this causes coverage checking to drop below 100%:</p><div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">def</span> <span class=\"nf\">will_never_be_called</span><span class=\"p\">():</span>    <span class=\"k\">yield</span></pre></div></div><p>It should be adjusted to the following pattern, preferably upstream,so that the <code class=\"docutils literal notranslate\"><span class=\"pre\">.coveragerc</span></code> in this repo knows to ignore it:</p><div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">def</span> <span class=\"nf\">will_never_be_called</span><span class=\"p\">():</span>    <span class=\"k\">yield</span>  <span class=\"c1\"># pragma: no cover</span></pre></div></div></li><li><p>If a backported patch applies cleanly, but ends up needing to be skipped,then commit the latest sync point and then revert the problematic commit in an immediatelysubsequent commit and make a note of the reason for the revert in that commit message.</p><p>See <a class=\"reference external\" href=\"https://github.com/testing-cabal/mock/commit/bc04ea76352c2064d79160f13649f879667a89cb\">bc04ea7</a> for an example where <a class=\"reference external\" href=\"https://github.com/testing-cabal/mock/commit/f4c8dc7098abb6b2f9a65ee86bad3891776abb50\">f4c8dc7</a> broke compatibility for all Pythonversions earlier than 3.10.</p></li></ul></section><section id=\"backporting-process\"><h3>Backporting process<a class=\"headerlink\" href=\"#backporting-process\" title=\"Permalink to this heading\">\u00b6</a></h3><ol class=\"arabic\"><li><p>Clone cpython and mock into the same directory, eg:</p><div class=\"highlight-bash notranslate\"><div class=\"highlight\"><pre><span></span>mkdir<span class=\"w\"> </span>vcs<span class=\"nb\">cd</span><span class=\"w\"> </span>vcsgit<span class=\"w\"> </span>clone<span class=\"w\"> </span>https://github.com/python/cpython.gitgit<span class=\"w\"> </span>clone<span class=\"w\"> </span>https://github.com/testing-cabal/mock.git</pre></div></div><p>Make sure <code class=\"docutils literal notranslate\"><span class=\"pre\">cpython`</span> <span class=\"pre\">is</span> <span class=\"pre\">on</span> <span class=\"pre\">``main`</span> <span class=\"pre\">and</span> <span class=\"pre\">that</span> <span class=\"pre\">``main</span></code> branch is fully up to date!Make sure <code class=\"docutils literal notranslate\"><span class=\"pre\">mock</span></code> is on master and up fully up to date!</p></li><li><p>Create a branch in your <code class=\"docutils literal notranslate\"><span class=\"pre\">mock</span></code> clone and switch to it.</p></li><li><p>Make sure you build a suitable virtualenv for Mock developmentand activate it. For backporting, this should use Python 3.7+.</p></li><li><p>Run <code class=\"docutils literal notranslate\"><span class=\"pre\">backport.py</span></code>:</p><div class=\"highlight-bash notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"nb\">cd</span><span class=\"w\"> </span>vcs/mockpython<span class=\"w\"> </span>backport.py</pre></div></div><p>This will find the next cpython patch that needs to be applied, munge itand attempt to apply it with <code class=\"docutils literal notranslate\"><span class=\"pre\">git</span> <span class=\"pre\">am</span></code>.</p><p>If it succeeds, run the tests and/or push your branch up to a fork anddo a pull request into the master branch of the main repo to kick offthe continuous integration tests.</p><p>If it fails, you\u2019ll have to manually work with what <code class=\"docutils literal notranslate\"><span class=\"pre\">git</span> <span class=\"pre\">status</span></code> showsto get the patch committed.</p><p>If it turns out that there\u2019s nothing that should be applied from the failed commit,run <code class=\"docutils literal notranslate\"><span class=\"pre\">python</span> <span class=\"pre\">backport.py</span> <span class=\"pre\">--skip-current</span></code>, maybe with <code class=\"docutils literal notranslate\"><span class=\"pre\">--skip-reason</span></code>.</p><p>If you have to make changes, please do a <code class=\"docutils literal notranslate\"><span class=\"pre\">git</span> <span class=\"pre\">commit</span> <span class=\"pre\">--amend</span></code> and add notesabout what needed doing below the <code class=\"docutils literal notranslate\"><span class=\"pre\">Signed-off-by</span></code> block.</p><p>If you have to make changes because tests fail with an applied patch, pleasemake those changes in a followup commit and take note of the \u201cBackporting rules\u201dabove.</p></li><li><p>Rinse and repeat until <code class=\"docutils literal notranslate\"><span class=\"pre\">backport.py</span></code> reports no more patches need applying.</p></li><li><p>If <code class=\"docutils literal notranslate\"><span class=\"pre\">backport.py</span></code> has updated <code class=\"docutils literal notranslate\"><span class=\"pre\">lastsync.txt</span></code> but not committed it,now would be a good time to commit that change.</p></li></ol></section><section id=\"checking-coverage-in-upstream\"><h3>Checking coverage in upstream<a class=\"headerlink\" href=\"#checking-coverage-in-upstream\" title=\"Permalink to this heading\">\u00b6</a></h3><p>Assuming you have the checkout structure as above, and you have compiled your cpythonmaster branch, then roughly as follows:</p><div class=\"highlight-bash notranslate\"><div class=\"highlight\"><pre><span></span>~/vcs/cpython/python.exe<span class=\"w\"> </span>-m<span class=\"w\"> </span>venv<span class=\"w\"> </span>~/virtualenvs/cpython-master<span class=\"nb\">source</span><span class=\"w\"> </span>~/virtualenvs/cpython-master/bin/activatepip<span class=\"w\"> </span>install<span class=\"w\"> </span>-U<span class=\"w\"> </span>setuptools<span class=\"w\"> </span>pippip<span class=\"w\"> </span>install<span class=\"w\"> </span>pytest<span class=\"w\"> </span>pytest-cov<span class=\"nb\">cd</span><span class=\"w\"> </span>vcs/cpython/Lib/unittestpytest<span class=\"w\"> </span>--cov<span class=\"w\"> </span>unittest.mock<span class=\"w\"> </span>--cov<span class=\"w\"> </span>unittest.test.testmock<span class=\"w\"> </span><span class=\"se\">\\</span><span class=\"w\">       </span>--cov-config<span class=\"w\"> </span>~/vcs/git/mock/.coveragerc<span class=\"w\"> </span><span class=\"se\">\\</span><span class=\"w\">       </span>--cov-report<span class=\"w\"> </span>term-missing:skip-covered<span class=\"w\"> </span><span class=\"se\">\\</span><span class=\"w\">       </span>test/testmock/test*</pre></div></div><p>Ignore <code class=\"docutils literal notranslate\"><span class=\"pre\">test/testmock/__*__.py</span></code> as these aren\u2019t present in the backport.</p></section></section></section>            <div class=\"clearer\"></div>          </div>        </div>      </div>      <div class=\"sphinxsidebar\" role=\"navigation\" aria-label=\"main navigation\">        <div class=\"sphinxsidebarwrapper\">  <div>    <h3><a href=\"#\">Table of Contents</a></h3>    <ul><li><a class=\"reference internal\" href=\"#\">Mock - Mocking and Testing Library</a><ul><li><a class=\"reference internal\" href=\"#python-version-compatibility\">Python Version Compatibility</a></li><li><a class=\"reference internal\" href=\"#installing\">Installing</a></li><li><a class=\"reference internal\" href=\"#bug-reports\">Bug Reports</a></li><li><a class=\"reference internal\" href=\"#changelog\">Changelog</a></li><li><a class=\"reference internal\" href=\"#maintainer-notes\">Maintainer Notes</a><ul><li><a class=\"reference internal\" href=\"#development\">Development</a></li><li><a class=\"reference internal\" href=\"#releasing\">Releasing</a></li><li><a class=\"reference internal\" href=\"#backporting-rules\">Backporting rules</a></li><li><a class=\"reference internal\" href=\"#backporting-process\">Backporting process</a></li><li><a class=\"reference internal\" href=\"#checking-coverage-in-upstream\">Checking coverage in upstream</a></li></ul></li></ul></li></ul>  </div>  <div>    <h4>Next topic</h4>    <p class=\"topless\"><a href=\"changelog.html\"                          title=\"next chapter\">Changelog</a></p>  </div>  <div role=\"note\" aria-label=\"source link\">    <h3>This Page</h3>    <ul class=\"this-page-menu\">      <li><a href=\"_sources/index.txt\"            rel=\"nofollow\">Show Source</a></li>    </ul>   </div><div id=\"searchbox\" style=\"display: none\" role=\"search\">  <h3 id=\"searchlabel\">Quick search</h3>    <div class=\"searchformwrapper\">    <form class=\"search\" action=\"search.html\" method=\"get\">      <input type=\"text\" name=\"q\" aria-labelledby=\"searchlabel\" autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\"/>      <input type=\"submit\" value=\"Go\" />    </form>    </div></div><script>document.getElementById('searchbox').style.display = \"block\"</script>        </div>      </div>      <div class=\"clearer\"></div>    </div>    <div class=\"related\" role=\"navigation\" aria-label=\"related navigation\">      <h3>Navigation</h3>      <ul>        <li class=\"right\" style=\"margin-right: 10px\">          <a href=\"genindex.html\" title=\"General Index\"             >index</a></li>        <li class=\"right\" >          <a href=\"py-modindex.html\" title=\"Python Module Index\"             >modules</a> |</li>        <li class=\"right\" >          <a href=\"changelog.html\" title=\"Changelog\"             >next</a> |</li>        <li class=\"nav-item nav-item-0\"><a href=\"#\">Mock 5.1.0 documentation</a> &#187;</li>        <li class=\"nav-item nav-item-this\"><a href=\"\">Mock - Mocking and Testing Library</a></li>       </ul>    </div>    <div class=\"footer\" role=\"contentinfo\">        &#169; Copyright 2007-2015, Michael Foord &amp; the mock team.      Last updated on Jul 11, 2023.      Created using <a href=\"https://www.sphinx-doc.org/\">Sphinx</a> 5.3.0.    </div>  </body></html>",
  "embeddings": []
}
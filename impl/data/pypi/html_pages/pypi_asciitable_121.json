{
  "libtype": "pypi",
  "libname": "asciitable",
  "url": "http://cxc.harvard.edu/contrib/asciitable",
  "html": "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"  \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\"><html xmlns=\"http://www.w3.org/1999/xhtml\">  <head>    <meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />        <title>Asciitable &mdash; asciitable 0.8.0 documentation</title>        <link rel=\"stylesheet\" href=\"_static/default.css\" type=\"text/css\" />    <link rel=\"stylesheet\" href=\"_static/pygments.css\" type=\"text/css\" />        <script type=\"text/javascript\">      var DOCUMENTATION_OPTIONS = {        URL_ROOT:    '',        VERSION:     '0.8.0',        COLLAPSE_INDEX: false,        FILE_SUFFIX: '.html',        HAS_SOURCE:  true      };    </script>    <script type=\"text/javascript\" src=\"_static/jquery.js\"></script>    <script type=\"text/javascript\" src=\"_static/underscore.js\"></script>    <script type=\"text/javascript\" src=\"_static/doctools.js\"></script>    <link rel=\"top\" title=\"asciitable 0.8.0 documentation\" href=\"#\" />    <link rel=\"next\" title=\"Fixed-width Gallery\" href=\"fixed_width_gallery.html\" /> <script type=\"text/javascript\">  var _gaq = _gaq || [];  _gaq.push(['_setAccount', 'UA-18709417-1']);  _gaq.push(['_trackPageview']);</script>  </head>  <body>    <div class=\"related\">      <h3>Navigation</h3>      <ul>        <li class=\"right\" style=\"margin-right: 10px\">          <a href=\"genindex.html\" title=\"General Index\"             accesskey=\"I\">index</a></li>        <li class=\"right\" >          <a href=\"py-modindex.html\" title=\"Python Module Index\"             >modules</a> |</li>        <li class=\"right\" >          <a href=\"fixed_width_gallery.html\" title=\"Fixed-width Gallery\"             accesskey=\"N\">next</a> |</li>        <li><a href=\"#\">asciitable 0.8.0 documentation</a> &raquo;</li>       </ul>    </div>      <div class=\"document\">      <div class=\"documentwrapper\">        <div class=\"bodywrapper\">          <div class=\"body\">              <div class=\"section\" id=\"asciitable\"><h1>Asciitable<a class=\"headerlink\" href=\"#asciitable\" title=\"Permalink to this headline\">\u00b6</a></h1><p>An extensible ASCII table reader and writer for Python 2 and 3.</p><p><tt class=\"xref py py-mod docutils literal\"><span class=\"pre\">Asciitable</span></tt> can read and write a wide range of ASCII table formats viabuilt-in <a class=\"reference internal\" href=\"#extension-reader-classes\">Extension Reader Classes</a>:</p><ul class=\"simple\"><li><a class=\"reference internal\" href=\"#asciitable.Basic\" title=\"asciitable.Basic\"><tt class=\"xref py py-class docutils literal\"><span class=\"pre\">Basic</span></tt></a>: basic table with customizable delimiters and header configurations</li><li><a class=\"reference internal\" href=\"#asciitable.Cds\" title=\"asciitable.Cds\"><tt class=\"xref py py-class docutils literal\"><span class=\"pre\">Cds</span></tt></a>: <a class=\"reference external\" href=\"http://vizier.u-strasbg.fr/doc/catstd.htx\">CDS format table</a> (also Vizier and ApJ machine readable tables)</li><li><a class=\"reference internal\" href=\"#asciitable.CommentedHeader\" title=\"asciitable.CommentedHeader\"><tt class=\"xref py py-class docutils literal\"><span class=\"pre\">CommentedHeader</span></tt></a>: column names given in a line that begins with the comment character</li><li><a class=\"reference internal\" href=\"#asciitable.Daophot\" title=\"asciitable.Daophot\"><tt class=\"xref py py-class docutils literal\"><span class=\"pre\">Daophot</span></tt></a>: table from the IRAF DAOphot package</li><li><a class=\"reference internal\" href=\"#asciitable.FixedWidth\" title=\"asciitable.FixedWidth\"><tt class=\"xref py py-class docutils literal\"><span class=\"pre\">FixedWidth</span></tt></a>: table with fixed-width columns (<a class=\"reference internal\" href=\"fixed_width_gallery.html#fixed-width-gallery\"><em>Fixed-width Gallery</em></a>)</li><li><a class=\"reference internal\" href=\"#asciitable.Ipac\" title=\"asciitable.Ipac\"><tt class=\"xref py py-class docutils literal\"><span class=\"pre\">Ipac</span></tt></a>: <a class=\"reference external\" href=\"http://irsa.ipac.caltech.edu/applications/DDGEN/Doc/ipac_tbl.html\">IPAC format table</a></li><li><a class=\"reference internal\" href=\"#asciitable.Latex\" title=\"asciitable.Latex\"><tt class=\"xref py py-class docutils literal\"><span class=\"pre\">Latex</span></tt></a>, <a class=\"reference internal\" href=\"#asciitable.AASTex\" title=\"asciitable.AASTex\"><tt class=\"xref py py-class docutils literal\"><span class=\"pre\">AASTex</span></tt></a>: LaTeX tables (plain and AASTex)</li><li><a class=\"reference internal\" href=\"#asciitable.Memory\" title=\"asciitable.Memory\"><tt class=\"xref py py-class docutils literal\"><span class=\"pre\">Memory</span></tt></a>: table already in memory (list of lists, dict of lists, etc)</li><li><a class=\"reference internal\" href=\"#asciitable.NoHeader\" title=\"asciitable.NoHeader\"><tt class=\"xref py py-class docutils literal\"><span class=\"pre\">NoHeader</span></tt></a>: basic table with no header where columns are auto-named</li><li><a class=\"reference internal\" href=\"#asciitable.Rdb\" title=\"asciitable.Rdb\"><tt class=\"xref py py-class docutils literal\"><span class=\"pre\">Rdb</span></tt></a>: tab-separated values with an extra line after the column definition line</li><li><a class=\"reference internal\" href=\"#asciitable.Tab\" title=\"asciitable.Tab\"><tt class=\"xref py py-class docutils literal\"><span class=\"pre\">Tab</span></tt></a>: tab-separated values</li></ul><p>At the top level <a class=\"reference internal\" href=\"#module-asciitable\" title=\"asciitable\"><tt class=\"xref py py-mod docutils literal\"><span class=\"pre\">asciitable</span></tt></a> looks like many other ASCII table interfacessince it provides default <a class=\"reference internal\" href=\"#asciitable.read\" title=\"asciitable.read\"><tt class=\"xref py py-func docutils literal\"><span class=\"pre\">read()</span></tt></a> and <a class=\"reference internal\" href=\"#asciitable.write\" title=\"asciitable.write\"><tt class=\"xref py py-func docutils literal\"><span class=\"pre\">write()</span></tt></a> functions with long lists ofparameters to accommodate the many variations possible in commonly encounteredASCII table formats.  Below the hood however <a class=\"reference internal\" href=\"#module-asciitable\" title=\"asciitable\"><tt class=\"xref py py-mod docutils literal\"><span class=\"pre\">asciitable</span></tt></a> is built on amodular and extensible class structure.  The basic functionality required forreading or writing a table is largely broken into independent <a class=\"reference internal\" href=\"#base-class-elements\">base classelements</a> so that new formats can be accomodated by modifying the underlyingclass methods as needed.</p><div class=\"admonition warning\"><p class=\"first admonition-title\">Warning</p><p>This package is no longer being developed.</p><p>The asciitable package has been moved into the <a class=\"reference external\" href=\"http://astropy.org\">Astropy project</a> and is now known as <a class=\"reference external\" href=\"http://docs.astropy.org/en/latest/io/ascii/index.html\">astropy.io.ascii</a>.  This new version is verycompatible with asciitable and most existing code should work.</p><p class=\"last\">The <a class=\"reference external\" href=\"http://docs.astropy.org/en/latest/io/ascii/index.html\">astropy.io.ascii</a> package is being actively developed and contains many new features andbug fixes relative to asciitable.  Users are strongly encouraged to migrate to<a class=\"reference external\" href=\"http://docs.astropy.org/en/latest/io/ascii/index.html\">astropy.io.ascii</a>.  If you have any questions or problems please send mail to the AstroPymailing list (<a class=\"reference external\" href=\"mailto:astropy&#37;&#52;&#48;scipy&#46;org\">astropy<span>&#64;</span>scipy<span>&#46;</span>org</a>).</p></div><table class=\"docutils field-list\" frame=\"void\" rules=\"none\"><col class=\"field-name\" /><col class=\"field-body\" /><tbody valign=\"top\"><tr class=\"field-odd field\"><th class=\"field-name\">Copyright:</th><td class=\"field-body\">Smithsonian Astrophysical Observatory (2011)</td></tr><tr class=\"field-even field\"><th class=\"field-name\">Author:</th><td class=\"field-body\">Tom Aldcroft (<a class=\"reference external\" href=\"mailto:aldcroft&#37;&#52;&#48;head&#46;cfa&#46;harvard&#46;edu\">aldcroft<span>&#64;</span>head<span>&#46;</span>cfa<span>&#46;</span>harvard<span>&#46;</span>edu</a>)</td></tr></tbody></table><div class=\"toctree-wrapper compound\"></div><div class=\"section\" id=\"requirements\"><h2>Requirements<a class=\"headerlink\" href=\"#requirements\" title=\"Permalink to this headline\">\u00b6</a></h2><ul class=\"simple\"><li><a class=\"reference internal\" href=\"#module-asciitable\" title=\"asciitable\"><tt class=\"xref py py-mod docutils literal\"><span class=\"pre\">asciitable</span></tt></a> passes its nosetests for the following platform / Pythonversion combinations.  Other combinations may work but have not beentried.</li></ul><table border=\"1\" class=\"docutils\"><colgroup><col width=\"37%\" /><col width=\"63%\" /></colgroup><thead valign=\"bottom\"><tr class=\"row-odd\"><th class=\"head\">OS</th><th class=\"head\">Python version</th></tr></thead><tbody valign=\"top\"><tr class=\"row-even\"><td>Linux</td><td>2.4, 2.6, 2.7, 3.2</td></tr><tr class=\"row-odd\"><td>MacOS 10.6</td><td>2.7</td></tr><tr class=\"row-even\"><td>Windows XP</td><td>2.7</td></tr></tbody></table><ul class=\"simple\"><li>Though not required <a class=\"reference external\" href=\"http://numpy.scipy.org/\">NumPy</a> is recommended.</li><li>NumPy versions 1.2 and 1.3 (Python 2) and 1.5 (Python 3) have been testedin previous releases, while current testing uses NumPy 1.6.</li></ul></div><div class=\"section\" id=\"download\"><h2>Download<a class=\"headerlink\" href=\"#download\" title=\"Permalink to this headline\">\u00b6</a></h2><p>The latest release of the <a class=\"reference internal\" href=\"#module-asciitable\" title=\"asciitable\"><tt class=\"xref py py-mod docutils literal\"><span class=\"pre\">asciitable</span></tt></a> package is available on the Python Package Index at<a class=\"reference external\" href=\"http://pypi.python.org/pypi/asciitable\">http://pypi.python.org/pypi/asciitable</a>.</p><p>The latest git repository version is available at <a class=\"reference external\" href=\"https://github.com/taldcroft/asciitable\">https://github.com/taldcroft/asciitable</a> or with:</p><div class=\"highlight-python\"><pre>git clone git://github.com/taldcroft/asciitable.git</pre></div></div><div class=\"section\" id=\"installation-and-test\"><h2>Installation and test<a class=\"headerlink\" href=\"#installation-and-test\" title=\"Permalink to this headline\">\u00b6</a></h2><p>The <a class=\"reference internal\" href=\"#module-asciitable\" title=\"asciitable\"><tt class=\"xref py py-mod docutils literal\"><span class=\"pre\">asciitable</span></tt></a> package includes a number of component modules that mustbe made available to the Python interpreter.</p><div class=\"section\" id=\"easy-way\"><h3>Easy way<a class=\"headerlink\" href=\"#easy-way\" title=\"Permalink to this headline\">\u00b6</a></h3><p>The easy way to install <a class=\"reference internal\" href=\"#module-asciitable\" title=\"asciitable\"><tt class=\"xref py py-mod docutils literal\"><span class=\"pre\">asciitable</span></tt></a> is using <tt class=\"docutils literal\"><span class=\"pre\">pip</span> <span class=\"pre\">install</span></tt> or<tt class=\"docutils literal\"><span class=\"pre\">easy_install</span></tt>.  Either one will work, but <tt class=\"docutils literal\"><span class=\"pre\">pip</span></tt> is the more &#8220;modern&#8221;alternative.  The following will download and install the package:</p><div class=\"highlight-python\"><pre>pip install [--user] asciitable   ** OR **easy_install [--user] asciitable</pre></div><p>The <tt class=\"docutils literal\"><span class=\"pre\">--user</span></tt> option will install <a class=\"reference internal\" href=\"#module-asciitable\" title=\"asciitable\"><tt class=\"xref py py-mod docutils literal\"><span class=\"pre\">asciitable</span></tt></a> in a local user directoryinstead of within the Python installation directory structure.  See thediscussion on <a class=\"reference external\" href=\"http://python4astronomers.github.com/installation/packages.html#where-to-packages-get-installed\">where packages get installed</a>for more information.  The <tt class=\"docutils literal\"><span class=\"pre\">--user</span></tt> option requires Python 2.6 or later.</p></div><div class=\"section\" id=\"less-easy-way\"><h3>Less easy way<a class=\"headerlink\" href=\"#less-easy-way\" title=\"Permalink to this headline\">\u00b6</a></h3><p>Download and untar the package tarball, then change into the source directory:</p><div class=\"highlight-python\"><pre>tar zxf asciitable-&lt;version&gt;.tar.gzcd asciitable-&lt;version&gt;</pre></div><p>If you have the <a class=\"reference external\" href=\"http://somethingaboutorange.com/mrl/projects/nose\">nose</a> moduleinstalled then at this point you can run the test suite:</p><div class=\"highlight-python\"><div class=\"highlight\"><pre><span class=\"n\">nosetests</span>    <span class=\"c\"># Python 2</span><span class=\"n\">nosetests3</span>   <span class=\"c\"># Python 3</span></pre></div></div><p>There are several methods for installing.  Choose ONE of them.</p><p><strong>Python site-packages</strong></p><p>If you have write access to the python site-packages directory you can do:</p><div class=\"highlight-python\"><pre>python setup.py install</pre></div><p><strong>Local user library</strong></p><p>If you running python 2.6 or later the following command installs the<a class=\"reference internal\" href=\"#module-asciitable\" title=\"asciitable\"><tt class=\"xref py py-mod docutils literal\"><span class=\"pre\">asciitable</span></tt></a> module to the appropriate local user directory:</p><div class=\"highlight-python\"><pre>python setup.py install --user</pre></div></div></div><div class=\"section\" id=\"reading-tables\"><h2>Reading tables<a class=\"headerlink\" href=\"#reading-tables\" title=\"Permalink to this headline\">\u00b6</a></h2><p>The majority of commonly encountered ASCII tables can be easily read with the <a class=\"reference internal\" href=\"#asciitable.read\" title=\"asciitable.read\"><tt class=\"xref py py-func docutils literal\"><span class=\"pre\">read()</span></tt></a>function:</p><div class=\"highlight-python\"><div class=\"highlight\"><pre><span class=\"kn\">import</span> <span class=\"nn\">asciitable</span><span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">asciitable</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">(</span><span class=\"n\">table</span><span class=\"p\">)</span></pre></div></div><p>where <tt class=\"docutils literal\"><span class=\"pre\">table</span></tt> is the name of a file, a string representation of a table, or alist of table lines.  By default <a class=\"reference internal\" href=\"#asciitable.read\" title=\"asciitable.read\"><tt class=\"xref py py-func docutils literal\"><span class=\"pre\">read()</span></tt></a> will try to <a class=\"reference external\" href=\"#guess-table-format\">guess the table format</a>by trying all the supported formats.  If this does not work (for unusuallyformatted tables) then one needs give asciitable additional hints about theformat, for example:</p><div class=\"highlight-python\"><div class=\"highlight\"><pre><span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">asciitable</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">(</span><span class=\"s\">&#39;t/nls1_stackinfo.dbout&#39;</span><span class=\"p\">,</span> <span class=\"n\">data_start</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">delimiter</span><span class=\"o\">=</span><span class=\"s\">&#39;|&#39;</span><span class=\"p\">)</span><span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">asciitable</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">(</span><span class=\"s\">&#39;t/simple.txt&#39;</span><span class=\"p\">,</span> <span class=\"n\">quotechar</span><span class=\"o\">=</span><span class=\"s\">&quot;&#39;&quot;</span><span class=\"p\">)</span><span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">asciitable</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">(</span><span class=\"s\">&#39;t/simple4.txt&#39;</span><span class=\"p\">,</span> <span class=\"n\">Reader</span><span class=\"o\">=</span><span class=\"n\">asciitable</span><span class=\"o\">.</span><span class=\"n\">NoHeader</span><span class=\"p\">,</span> <span class=\"n\">delimiter</span><span class=\"o\">=</span><span class=\"s\">&#39;|&#39;</span><span class=\"p\">)</span><span class=\"n\">table</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">&#39;col1 col2 col3&#39;</span><span class=\"p\">,</span> <span class=\"s\">&#39;1 2 hi&#39;</span><span class=\"p\">,</span> <span class=\"s\">&#39;3 4.2 there&#39;</span><span class=\"p\">]</span><span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">asciitable</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">(</span><span class=\"n\">table</span><span class=\"p\">,</span> <span class=\"n\">delimiter</span><span class=\"o\">=</span><span class=\"s\">&quot; &quot;</span><span class=\"p\">)</span></pre></div></div><p>The <a class=\"reference internal\" href=\"#asciitable.read\" title=\"asciitable.read\"><tt class=\"xref py py-func docutils literal\"><span class=\"pre\">read()</span></tt></a> function accepts a number of parameters that specify the detailedtable format.  Different Reader classes can define different defaults, so thedescriptions below sometimes mention &#8220;typical&#8221; default values.  This refers tothe <a class=\"reference internal\" href=\"#asciitable.Basic\" title=\"asciitable.Basic\"><tt class=\"xref py py-class docutils literal\"><span class=\"pre\">Basic</span></tt></a> reader and other similar Reader classes.</p><div class=\"section\" id=\"commonly-used-parameters-for-read\"><h3>Commonly used parameters for <tt class=\"docutils literal\"><span class=\"pre\">read()</span></tt><a class=\"headerlink\" href=\"#commonly-used-parameters-for-read\" title=\"Permalink to this headline\">\u00b6</a></h3><dl class=\"docutils\"><dt><strong>table</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">input table</span></dt><dd><p class=\"first\">There are four ways to specify the table to be read:</p><ul class=\"simple\"><li>Name of a file (string)</li><li>Single string containing all table lines separated by newlines</li><li>File-like object with a callable read() method</li><li>List of strings where each list element is a table line</li></ul><p class=\"last\">The first two options are distinguished by the presence of a newline in the string.This assumes that valid file names will not normally contain a newline.</p></dd><dt><strong>Reader</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">Reader class (default= <tt class=\"xref py py-class docutils literal\"><span class=\"pre\">BasicReader</span></tt>)</span></dt><dd>This specifies the top-level format of the ASCII table, for exampleif it is a basic character delimited table, fixed format table, ora CDS-compatible table, etc.  The value of this parameter mustbe a Reader class.  For basic usage this means one of thebuilt-in <a class=\"reference internal\" href=\"#extension-reader-classes\">Extension Reader Classes</a>.</dd><dt><strong>numpy</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">return a NumPy record array (default=True)</span></dt><dd><p class=\"first\">By default the output from <a class=\"reference internal\" href=\"#asciitable.read\" title=\"asciitable.read\"><tt class=\"xref py py-func docutils literal\"><span class=\"pre\">read()</span></tt></a> is a<a class=\"reference external\" href=\"http://docs.scipy.org/doc/numpy/reference/generated/numpy.recarray.html\">NumPy record array</a> object.This powerful container efficiently supports both column-wise and row access to thetable and comes with the full NumPy stack of array manipulation methods.</p><p class=\"last\">If NumPy is not available or desired then set <tt class=\"docutils literal\"><span class=\"pre\">numpy=False</span></tt>.  The outputof <a class=\"reference internal\" href=\"#asciitable.read\" title=\"asciitable.read\"><tt class=\"xref py py-func docutils literal\"><span class=\"pre\">read()</span></tt></a> will then be a dictionary of <a class=\"reference internal\" href=\"#asciitable.Column\" title=\"asciitable.Column\"><tt class=\"xref py py-class docutils literal\"><span class=\"pre\">Column</span></tt></a> objectswith each key for the corresponding named column.</p></dd><dt><strong>guess</strong>: try to guess table format (default=True)</dt><dd>If set to True then <a class=\"reference internal\" href=\"#asciitable.read\" title=\"asciitable.read\"><tt class=\"xref py py-func docutils literal\"><span class=\"pre\">read()</span></tt></a> will try to guess the table format by cyclingthrough a number of possible table format permuations and attemping to readthe table in each case.  See the <a class=\"reference internal\" href=\"#guess-table-format\">Guess table format</a> section for further details.</dd><dt><strong>delimiter</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">column delimiter string</span></dt><dd>A one-character string used to separate fields which typically defaults tothe space character.  Other common values might be &#8220;\\s&#8221; (whitespace), &#8221;,&#8221; or&#8220;|&#8221; or &#8220;\\t&#8221; (tab).  A value of &#8220;\\s&#8221; allows any combination of the tab andspace characters to delimit columns.</dd><dt><strong>comment</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">regular expression defining a comment line in table</span></dt><dd>If the <tt class=\"docutils literal\"><span class=\"pre\">comment</span></tt> regular expression matches the beginning of a table line then that linewill be discarded from header or data processing.  For the <a class=\"reference internal\" href=\"#asciitable.Basic\" title=\"asciitable.Basic\"><tt class=\"xref py py-class docutils literal\"><span class=\"pre\">Basic</span></tt></a> Reader thisdefaults to &#8220;\\s*#&#8221; (any whitespace followed by #).</dd><dt><strong>quotechar</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">one-character string to quote fields containing special characters</span></dt><dd>This specifies the quote character and will typically be either the single or doublequote character.  This is can be useful for reading text fields with spaces in a space-delimitedtable.  The default is typically the double quote.</dd><dt><strong>header_start</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">line index for the header line not counting comment lines</span></dt><dd>This specifies in the line index where the header line will be found.  Comment lines arenot included in this count and the counting starts from 0 (first non-comment line has index=0).If set to None this indicates that there is no header line and the column nameswill be auto-generated.  The default is dependent on the Reader.</dd><dt><strong>data_start</strong>: line index for the start of data not counting comment lines</dt><dd>This specifies in the line index where the data lines begin where the counting startsfrom 0 and does not include comment lines.  The default is dependent on the Reader.</dd><dt><strong>data_end</strong>: line index for the end of data (can be negative to count from end)</dt><dd>If this is not None then it allows for excluding lines at the end that are notvalid data lines.  A negative value means to count from the end, so -1 wouldexclude the last line, -2 the last two lines, and so on.</dd><dt><strong>converters</strong>: dict of data type converters</dt><dd>See the <a class=\"reference internal\" href=\"#converters\">Converters</a> section for more information.</dd><dt><strong>names</strong>: list of names corresponding to each data column</dt><dd>Define the complete list of names for each data column.  This will overridenames found in the header (if it exists).  If not supplied thenuse names from the header or auto-generated names if there is no header.</dd><dt><strong>include_names</strong>: list of names to include in output</dt><dd>From the list of column names found from the header or the <tt class=\"docutils literal\"><span class=\"pre\">names</span></tt>parameter, select for output only columns within this list.  If not suppliedthen include all names.</dd><dt><strong>exclude_names</strong>: list of names to exlude from output</dt><dd>Exclude these names from the list of output columns.  This is applied <em>after</em>the <tt class=\"docutils literal\"><span class=\"pre\">include_names</span></tt> filtering.  If not specified then no columns are excluded.</dd><dt><strong>fill_values</strong>: fill value specifier of lists</dt><dd>This can be used to fill missing values in the table or replace strings with special meaning.See the <a class=\"reference internal\" href=\"#replace-bad-or-missing-values\">Replace bad or missing values</a> section for more information and examples.</dd><dt><strong>fill_include_names</strong>: list of column names, which are affected by <tt class=\"docutils literal\"><span class=\"pre\">fill_values</span></tt>.</dt><dd>If not supplied, then <tt class=\"docutils literal\"><span class=\"pre\">fill_values</span></tt> can affect all columns.</dd><dt><strong>fill_exclude_names</strong>: list of column names, which are not affected by <tt class=\"docutils literal\"><span class=\"pre\">fill_values</span></tt>.</dt><dd>If not supplied, then <tt class=\"docutils literal\"><span class=\"pre\">fill_values</span></tt> can affect all columns.</dd></dl></div><div class=\"section\" id=\"advanced-parameters-for-read\"><h3>Advanced parameters for <tt class=\"docutils literal\"><span class=\"pre\">read()</span></tt><a class=\"headerlink\" href=\"#advanced-parameters-for-read\" title=\"Permalink to this headline\">\u00b6</a></h3><p><a class=\"reference internal\" href=\"#asciitable.read\" title=\"asciitable.read\"><tt class=\"xref py py-func docutils literal\"><span class=\"pre\">read()</span></tt></a> can accept a few more parameters that allow for code-level customizationof the reading process.  These will be discussed in the <a class=\"reference internal\" href=\"#advanced-table-reading\">Advanced table reading</a> section.</p><p><strong>data_Splitter</strong>: Splitter class to split data columns</p><p><strong>header_Splitter</strong>: Splitter class to split header columns</p><p><strong>Inputter</strong>: Inputter class</p><p><strong>Outputter</strong>: Outputter class</p></div><div class=\"section\" id=\"replace-bad-or-missing-values\"><h3>Replace bad or missing values<a class=\"headerlink\" href=\"#replace-bad-or-missing-values\" title=\"Permalink to this headline\">\u00b6</a></h3><p><tt class=\"xref py py-mod docutils literal\"><span class=\"pre\">Asciitable</span></tt> can replace string values in the input data before they areconverted.  The most common use case is probably a table which contains stringvalues that are not a valid representation of a number, e.g. <tt class=\"docutils literal\"><span class=\"pre\">&quot;...&quot;</span></tt> for amissing value or <tt class=\"docutils literal\"><span class=\"pre\">&quot;&quot;</span></tt>.  If <tt class=\"xref py py-mod docutils literal\"><span class=\"pre\">Asciitable</span></tt> cannot convert all elements in acolumn to a numeric type, it will format the column as strings. To avoid this,<tt class=\"docutils literal\"><span class=\"pre\">fill_values</span></tt> can be used at the string level to fill missing values with thefollowing syntax, which replaces <tt class=\"docutils literal\"><span class=\"pre\">&lt;old&gt;</span></tt> with <tt class=\"docutils literal\"><span class=\"pre\">&lt;new&gt;</span></tt> before the typeconversion is done:</p><div class=\"highlight-python\"><pre>fill_values = &lt;fill_spec&gt; | [&lt;fill_spec1&gt;, &lt;fill_spec2&gt;, ...]&lt;fill_spec&gt; = (&lt;old&gt;, &lt;new&gt;, &lt;optional col name 1&gt;, &lt;optional col name 2&gt;, ...)</pre></div><p>Within the <tt class=\"docutils literal\"><span class=\"pre\">&lt;fill_spec&gt;</span></tt> tuple the <tt class=\"docutils literal\"><span class=\"pre\">&lt;old&gt;</span></tt> and <tt class=\"docutils literal\"><span class=\"pre\">&lt;new&gt;</span></tt> values must bestrings.  These two values are then followed by zero or more column names.  Ifcolumn names are included the replacement is limited to those columns listed.If no columns are specified then the replacement is done in every column,subject to filtering by <tt class=\"docutils literal\"><span class=\"pre\">fill_include_names</span></tt> and <tt class=\"docutils literal\"><span class=\"pre\">fill_exclude_names</span></tt> (seebelow).</p><p>The <tt class=\"docutils literal\"><span class=\"pre\">fill_values</span></tt> parameter in <a class=\"reference internal\" href=\"#asciitable.read\" title=\"asciitable.read\"><tt class=\"xref py py-func docutils literal\"><span class=\"pre\">read()</span></tt></a> takes a single <tt class=\"docutils literal\"><span class=\"pre\">&lt;fill_spec&gt;</span></tt> or alist of <tt class=\"docutils literal\"><span class=\"pre\">&lt;fill_spec&gt;</span></tt> tuples.  If several <tt class=\"docutils literal\"><span class=\"pre\">&lt;fill_spec&gt;</span></tt> apply to a singleoccurence of <tt class=\"docutils literal\"><span class=\"pre\">&lt;old&gt;</span></tt> then the first one determines the <tt class=\"docutils literal\"><span class=\"pre\">&lt;new&gt;</span></tt> value.  Forinstance the following will replace an empty data value in the <tt class=\"docutils literal\"><span class=\"pre\">x</span></tt> or <tt class=\"docutils literal\"><span class=\"pre\">y</span></tt>columns with &#8220;1e38&#8221; while empty values in any other column will get &#8220;-999&#8221;:</p><div class=\"highlight-python\"><div class=\"highlight\"><pre><span class=\"n\">asciitable</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">(</span><span class=\"n\">table</span><span class=\"p\">,</span> <span class=\"n\">fill_values</span><span class=\"o\">=</span><span class=\"p\">[(</span><span class=\"s\">&#39;&#39;</span><span class=\"p\">,</span> <span class=\"s\">&#39;1e38&#39;</span><span class=\"p\">,</span> <span class=\"s\">&#39;x&#39;</span><span class=\"p\">,</span> <span class=\"s\">&#39;y&#39;</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s\">&#39;&#39;</span><span class=\"p\">,</span> <span class=\"s\">&#39;-999&#39;</span><span class=\"p\">)])</span></pre></div></div><p>The following shows an example where string information needs to be exchangedbefore the conversion to float values happens. Here <tt class=\"docutils literal\"><span class=\"pre\">no_rain</span></tt> and <tt class=\"docutils literal\"><span class=\"pre\">no_snow</span></tt> is replaced by <tt class=\"docutils literal\"><span class=\"pre\">0.0</span></tt>:</p><div class=\"highlight-python\"><div class=\"highlight\"><pre><span class=\"n\">table</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">&#39;day  rain     snow&#39;</span><span class=\"p\">,</span>    <span class=\"c\"># column names</span>         <span class=\"c\">#---  -------  --------</span>         <span class=\"s\">&#39;Mon  3.2      no_snow&#39;</span><span class=\"p\">,</span>         <span class=\"s\">&#39;Tue  no_rain  1.1&#39;</span><span class=\"p\">,</span>         <span class=\"s\">&#39;Wed  0.3      no_snow&#39;</span><span class=\"p\">]</span><span class=\"n\">asciitable</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">(</span><span class=\"n\">table</span><span class=\"p\">,</span> <span class=\"n\">fill_values</span><span class=\"o\">=</span><span class=\"p\">[(</span><span class=\"s\">&#39;no_rain&#39;</span><span class=\"p\">,</span> <span class=\"s\">&#39;0.0&#39;</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s\">&#39;no_snow&#39;</span><span class=\"p\">,</span> <span class=\"s\">&#39;0.0&#39;</span><span class=\"p\">)])</span></pre></div></div><p>Sometimes these rules apply only to specific columns in the table. Columns can be selected with<tt class=\"docutils literal\"><span class=\"pre\">fill_include_names</span></tt> or excluded with <tt class=\"docutils literal\"><span class=\"pre\">fill_exclude_names</span></tt>. Also, column names can begiven directly with fill_values:</p><div class=\"highlight-python\"><div class=\"highlight\"><pre><span class=\"n\">asciidata</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">&#39;text,no1,no2&#39;</span><span class=\"p\">,</span> <span class=\"s\">&#39;text1,1,1.&#39;</span><span class=\"p\">,</span><span class=\"s\">&#39;,2,&#39;</span><span class=\"p\">]</span><span class=\"n\">asciitable</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">(</span><span class=\"n\">asciidata</span><span class=\"p\">,</span> <span class=\"n\">fill_values</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"s\">&#39;&#39;</span><span class=\"p\">,</span> <span class=\"s\">&#39;nan&#39;</span><span class=\"p\">,</span><span class=\"s\">&#39;no1&#39;</span><span class=\"p\">,</span><span class=\"s\">&#39;no2&#39;</span><span class=\"p\">),</span> <span class=\"n\">delimiter</span> <span class=\"o\">=</span> <span class=\"s\">&#39;,&#39;</span><span class=\"p\">)</span></pre></div></div><p>Here, the empty value <tt class=\"docutils literal\"><span class=\"pre\">''</span></tt> in column <tt class=\"docutils literal\"><span class=\"pre\">no2</span></tt> is replaced by <tt class=\"docutils literal\"><span class=\"pre\">nan</span></tt>, but the <tt class=\"docutils literal\"><span class=\"pre\">text</span></tt>column remains unaltered.</p><p>If the <tt class=\"docutils literal\"><span class=\"pre\">numpy</span></tt> module is available, then the default output is a<a class=\"reference external\" href=\"http://docs.scipy.org/doc/numpy/reference/maskedarray.html\">NumPy masked array</a>,where all values, which were replaced by <tt class=\"docutils literal\"><span class=\"pre\">fill_values</span></tt> are masked.  See thedescription of the <a class=\"reference internal\" href=\"#asciitable.NumpyOutputter\" title=\"asciitable.NumpyOutputter\"><tt class=\"xref py py-class docutils literal\"><span class=\"pre\">NumpyOutputter</span></tt></a> class for information ondisabling masked arrays.</p></div><div class=\"section\" id=\"guess-table-format\"><h3>Guess table format<a class=\"headerlink\" href=\"#guess-table-format\" title=\"Permalink to this headline\">\u00b6</a></h3><p>If the <tt class=\"docutils literal\"><span class=\"pre\">guess</span></tt> parameter in <a class=\"reference internal\" href=\"#asciitable.read\" title=\"asciitable.read\"><tt class=\"xref py py-func docutils literal\"><span class=\"pre\">read()</span></tt></a> is set to True (which is the default) then<a class=\"reference internal\" href=\"#asciitable.read\" title=\"asciitable.read\"><tt class=\"xref py py-func docutils literal\"><span class=\"pre\">read()</span></tt></a> will try to guess the table format by cycling through a number ofpossible table format permutations and attemping to read the table in each case.The first format which succeeds and will be used to read the table. To succeedthe table must be successfully parsed by the Reader and satisfy the followingcolumn requirements:</p><blockquote><div><ul class=\"simple\"><li>At least two table columns</li><li>No column names are a float or int number</li><li>No column names begin or end with space, comma, tab, single quote, double quote, ora vertical bar (|).</li></ul></div></blockquote><p>These requirements reduce the chance for a false positive where a table issuccessfully parsed with the wrong format.  A common situation is a tablewith numeric columns but no header row, and in this case <tt class=\"docutils literal\"><span class=\"pre\">asciitable</span></tt> willauto-assign column names because of the restriction on column names thatlook like a number.</p><p>The order of guessing is shown by this Python code:</p><div class=\"highlight-python\"><div class=\"highlight\"><pre><span class=\"k\">for</span> <span class=\"n\">Reader</span> <span class=\"ow\">in</span> <span class=\"p\">(</span><span class=\"n\">Rdb</span><span class=\"p\">,</span> <span class=\"n\">Tab</span><span class=\"p\">,</span> <span class=\"n\">Cds</span><span class=\"p\">,</span> <span class=\"n\">Daophot</span><span class=\"p\">,</span> <span class=\"n\">Ipac</span><span class=\"p\">):</span>    <span class=\"n\">read</span><span class=\"p\">(</span><span class=\"n\">Reader</span><span class=\"o\">=</span><span class=\"n\">Reader</span><span class=\"p\">)</span><span class=\"k\">for</span> <span class=\"n\">Reader</span> <span class=\"ow\">in</span> <span class=\"p\">(</span><span class=\"n\">CommentedHeader</span><span class=\"p\">,</span> <span class=\"n\">BasicReader</span><span class=\"p\">,</span> <span class=\"n\">NoHeader</span><span class=\"p\">):</span>    <span class=\"k\">for</span> <span class=\"n\">delimiter</span> <span class=\"ow\">in</span> <span class=\"p\">(</span><span class=\"s\">&quot;|&quot;</span><span class=\"p\">,</span> <span class=\"s\">&quot;,&quot;</span><span class=\"p\">,</span> <span class=\"s\">&quot; &quot;</span><span class=\"p\">,</span> <span class=\"s\">&quot;</span><span class=\"se\">\\\\</span><span class=\"s\">s&quot;</span><span class=\"p\">):</span>        <span class=\"k\">for</span> <span class=\"n\">quotechar</span> <span class=\"ow\">in</span> <span class=\"p\">(</span><span class=\"s\">&#39;&quot;&#39;</span><span class=\"p\">,</span> <span class=\"s\">&quot;&#39;&quot;</span><span class=\"p\">):</span>            <span class=\"n\">read</span><span class=\"p\">(</span><span class=\"n\">Reader</span><span class=\"o\">=</span><span class=\"n\">Reader</span><span class=\"p\">,</span> <span class=\"n\">delimiter</span><span class=\"o\">=</span><span class=\"n\">delimiter</span><span class=\"p\">,</span> <span class=\"n\">quotechar</span><span class=\"o\">=</span><span class=\"n\">quotechar</span><span class=\"p\">)</span></pre></div></div><p>Note that the <a class=\"reference internal\" href=\"#asciitable.FixedWidth\" title=\"asciitable.FixedWidth\"><tt class=\"xref py py-class docutils literal\"><span class=\"pre\">FixedWidth</span></tt></a> derived-readers are not includedin the default guess sequence (this causes problems), so to read such tablesone must explicitly specify the reader class with the <tt class=\"docutils literal\"><span class=\"pre\">Reader</span></tt> keyword.</p><p>If none of the guesses succeed in reading the table (subject to the columnrequirements) a final try is made using just the user-supplied parameters butwithout checking the column requirements.  In this way a table with only onecolumn or column names that look like a number can still be successfully read.</p><p>The guessing process respects any values of the Reader, delimiter, andquotechar parameters that were supplied to the read() function.  Any guessesthat would conflict are skipped.  For example the call:</p><div class=\"highlight-python\"><div class=\"highlight\"><pre><span class=\"n\">dat</span> <span class=\"o\">=</span> <span class=\"n\">asciitable</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">(</span><span class=\"n\">table</span><span class=\"p\">,</span> <span class=\"n\">Reader</span><span class=\"o\">=</span><span class=\"n\">NoHeader</span><span class=\"p\">,</span> <span class=\"n\">quotechar</span><span class=\"o\">=</span><span class=\"s\">&quot;&#39;&quot;</span><span class=\"p\">)</span></pre></div></div><p>would only try the four delimiter possibilities, skipping all the conflictingReader and quotechar combinations.</p><p>Guessing can be disabled in two ways:</p><div class=\"highlight-python\"><div class=\"highlight\"><pre><span class=\"kn\">import</span> <span class=\"nn\">asciitable</span><span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">asciitable</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">(</span><span class=\"n\">table</span><span class=\"p\">)</span>               <span class=\"c\"># guessing enabled by default</span><span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">asciitable</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">(</span><span class=\"n\">table</span><span class=\"p\">,</span> <span class=\"n\">guess</span><span class=\"o\">=</span><span class=\"bp\">False</span><span class=\"p\">)</span>  <span class=\"c\"># disable for this call</span><span class=\"n\">asciitable</span><span class=\"o\">.</span><span class=\"n\">set_guess</span><span class=\"p\">(</span><span class=\"bp\">False</span><span class=\"p\">)</span>                 <span class=\"c\"># set default to False globally</span><span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">asciitable</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">(</span><span class=\"n\">table</span><span class=\"p\">)</span>               <span class=\"c\"># guessing disabled</span></pre></div></div></div><div class=\"section\" id=\"converters\"><h3>Converters<a class=\"headerlink\" href=\"#converters\" title=\"Permalink to this headline\">\u00b6</a></h3><p><tt class=\"xref py py-mod docutils literal\"><span class=\"pre\">Asciitable</span></tt> converts the raw string values from the table intonumeric data types by using converter functions such as the Python <tt class=\"docutils literal\"><span class=\"pre\">int</span></tt> and<tt class=\"docutils literal\"><span class=\"pre\">float</span></tt> functions.  For example <tt class=\"docutils literal\"><span class=\"pre\">int(&quot;5.0&quot;)</span></tt> will fail while float(&#8220;5.0&#8221;)will succeed and return 5.0 as a Python float.</p><div class=\"section\" id=\"without-numpy\"><h4>Without NumPy<a class=\"headerlink\" href=\"#without-numpy\" title=\"Permalink to this headline\">\u00b6</a></h4><p>The default set of convertersfor the <a class=\"reference internal\" href=\"#asciitable.BaseOutputter\" title=\"asciitable.BaseOutputter\"><tt class=\"xref py py-class docutils literal\"><span class=\"pre\">BaseOutputter</span></tt></a> class is defined as such:</p><div class=\"highlight-python\"><div class=\"highlight\"><pre><span class=\"n\">default_converters</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">asciitable</span><span class=\"o\">.</span><span class=\"n\">convert_list</span><span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">),</span>                      <span class=\"n\">asciitable</span><span class=\"o\">.</span><span class=\"n\">convert_list</span><span class=\"p\">(</span><span class=\"nb\">float</span><span class=\"p\">),</span>                      <span class=\"n\">asciitable</span><span class=\"o\">.</span><span class=\"n\">convert_list</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">)]</span></pre></div></div><p>These take advantage of the <a class=\"reference internal\" href=\"#asciitable.convert_list\" title=\"asciitable.convert_list\"><tt class=\"xref py py-func docutils literal\"><span class=\"pre\">convert_list()</span></tt></a> function whichreturns a 2-element tuple.  The first element is function that will converta list of values to the desired type.  The second element is an <a class=\"reference internal\" href=\"#module-asciitable\" title=\"asciitable\"><tt class=\"xref py py-mod docutils literal\"><span class=\"pre\">asciitable</span></tt></a>class that specifies the type of data produced.  This element should be one of<tt class=\"xref py py-class docutils literal\"><span class=\"pre\">StrType</span></tt>, <tt class=\"xref py py-class docutils literal\"><span class=\"pre\">IntType</span></tt>, or<tt class=\"xref py py-class docutils literal\"><span class=\"pre\">FloatType</span></tt>.</p><p>The conversion code steps through each applicable converter function and triesto call the function with a column of string values.  If it succeeds withoutthrowing an exception it will then break out, but otherwise move on to the nextconversion function.</p><p>Use the <tt class=\"docutils literal\"><span class=\"pre\">converters</span></tt> keyword argument in order to force a specific data typefor a column.  This should be a dictionary with keys corresponding to thecolumn names.  Each dictionary value is a list similar to the<tt class=\"docutils literal\"><span class=\"pre\">default_converter</span></tt>.  For example:</p><div class=\"highlight-python\"><div class=\"highlight\"><pre><span class=\"c\"># col1 is int, col2 is float, col3 is string</span><span class=\"n\">converters</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s\">&#39;col1&#39;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"n\">asciitable</span><span class=\"o\">.</span><span class=\"n\">convert_list</span><span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">)],</span>              <span class=\"s\">&#39;col2&#39;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"n\">asciitable</span><span class=\"o\">.</span><span class=\"n\">convert_list</span><span class=\"p\">(</span><span class=\"nb\">float</span><span class=\"p\">)],</span>              <span class=\"s\">&#39;col3&#39;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"n\">asciitable</span><span class=\"o\">.</span><span class=\"n\">convert_list</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">)]}</span><span class=\"n\">read</span><span class=\"p\">(</span><span class=\"s\">&#39;file.dat&#39;</span><span class=\"p\">,</span> <span class=\"n\">converters</span><span class=\"o\">=</span><span class=\"n\">converters</span><span class=\"p\">)</span></pre></div></div><p>Note that it is also possible to specify a list of converter functions thatwill be tried in order:</p><div class=\"highlight-python\"><div class=\"highlight\"><pre><span class=\"n\">converters</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s\">&#39;col1&#39;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"n\">asciitable</span><span class=\"o\">.</span><span class=\"n\">convert_list</span><span class=\"p\">(</span><span class=\"nb\">float</span><span class=\"p\">),</span>                       <span class=\"n\">asciitable</span><span class=\"o\">.</span><span class=\"n\">convert_list</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">)]}</span><span class=\"n\">read</span><span class=\"p\">(</span><span class=\"s\">&#39;file.dat&#39;</span><span class=\"p\">,</span> <span class=\"n\">converters</span><span class=\"o\">=</span><span class=\"n\">converters</span><span class=\"p\">)</span></pre></div></div></div><div class=\"section\" id=\"with-numpy\"><h4>With NumPy<a class=\"headerlink\" href=\"#with-numpy\" title=\"Permalink to this headline\">\u00b6</a></h4><p>If the <tt class=\"docutils literal\"><span class=\"pre\">numpy</span></tt> module is available then the<a class=\"reference internal\" href=\"#asciitable.NumpyOutputter\" title=\"asciitable.NumpyOutputter\"><tt class=\"xref py py-class docutils literal\"><span class=\"pre\">NumpyOutputter</span></tt></a> is selected by default.  In this case  thedefault converters are:</p><div class=\"highlight-python\"><div class=\"highlight\"><pre><span class=\"n\">default_converters</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">asciitable</span><span class=\"o\">.</span><span class=\"n\">convert_numpy</span><span class=\"p\">(</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">int</span><span class=\"p\">),</span>                      <span class=\"n\">asciitable</span><span class=\"o\">.</span><span class=\"n\">convert_numpy</span><span class=\"p\">(</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">float</span><span class=\"p\">),</span>                      <span class=\"n\">asciitable</span><span class=\"o\">.</span><span class=\"n\">convert_numpy</span><span class=\"p\">(</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">str</span><span class=\"p\">)]</span></pre></div></div><p>These take advantage of the <a class=\"reference internal\" href=\"#asciitable.convert_numpy\" title=\"asciitable.convert_numpy\"><tt class=\"xref py py-func docutils literal\"><span class=\"pre\">convert_numpy()</span></tt></a> function whichreturns a 2-element tuple <tt class=\"docutils literal\"><span class=\"pre\">(converter_func,</span> <span class=\"pre\">converter_type)</span></tt> as described inthe previous section.  The type provided to <tt class=\"docutils literal\"><span class=\"pre\">convert_numpy()</span></tt> must be a valid<a class=\"reference external\" href=\"http://docs.scipy.org/doc/numpy/user/basics.types.html\">numpy type</a>, forexample <tt class=\"docutils literal\"><span class=\"pre\">numpy.int</span></tt>, <tt class=\"docutils literal\"><span class=\"pre\">numpy.uint</span></tt>, <tt class=\"docutils literal\"><span class=\"pre\">numpy.int8</span></tt>, <tt class=\"docutils literal\"><span class=\"pre\">numpy.int64</span></tt>,<tt class=\"docutils literal\"><span class=\"pre\">numpy.float</span></tt>, <tt class=\"docutils literal\"><span class=\"pre\">numpy.float64</span></tt>, <tt class=\"docutils literal\"><span class=\"pre\">numpy.str</span></tt>.</p><p>The converters for each column can be specified with the <tt class=\"docutils literal\"><span class=\"pre\">converters</span></tt>keyword:</p><div class=\"highlight-python\"><div class=\"highlight\"><pre><span class=\"n\">converters</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s\">&#39;col1&#39;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"n\">asciitable</span><span class=\"o\">.</span><span class=\"n\">convert_numpy</span><span class=\"p\">(</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">uint</span><span class=\"p\">)],</span>              <span class=\"s\">&#39;col2&#39;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"n\">asciitable</span><span class=\"o\">.</span><span class=\"n\">convert_numpy</span><span class=\"p\">(</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">float32</span><span class=\"p\">)]}</span><span class=\"n\">read</span><span class=\"p\">(</span><span class=\"s\">&#39;file.dat&#39;</span><span class=\"p\">,</span> <span class=\"n\">converters</span><span class=\"o\">=</span><span class=\"n\">converters</span><span class=\"p\">)</span></pre></div></div></div></div><div class=\"section\" id=\"advanced-table-reading\"><h3>Advanced table reading<a class=\"headerlink\" href=\"#advanced-table-reading\" title=\"Permalink to this headline\">\u00b6</a></h3><p>This section is not finished.  It will discuss ways of making custom readerfunctions and how to write custom <tt class=\"docutils literal\"><span class=\"pre\">Reader</span></tt>, <tt class=\"docutils literal\"><span class=\"pre\">Splitter</span></tt>, <tt class=\"docutils literal\"><span class=\"pre\">Inputter</span></tt> and<tt class=\"docutils literal\"><span class=\"pre\">Outputter</span></tt> classes.  For now please look at the examples and especially thecode for the existing <a class=\"reference internal\" href=\"#extension-reader-classes\">Extension Reader Classes</a>.</p><div class=\"section\" id=\"examples\"><h4>Examples<a class=\"headerlink\" href=\"#examples\" title=\"Permalink to this headline\">\u00b6</a></h4><p><strong>Define a custom reader functionally</strong></p><div class=\"highlight-python\"><div class=\"highlight\"><pre><span class=\"k\">def</span> <span class=\"nf\">read_rdb_table</span><span class=\"p\">(</span><span class=\"n\">table</span><span class=\"p\">):</span>    <span class=\"n\">reader</span> <span class=\"o\">=</span> <span class=\"n\">asciitable</span><span class=\"o\">.</span><span class=\"n\">Basic</span><span class=\"p\">()</span>    <span class=\"n\">reader</span><span class=\"o\">.</span><span class=\"n\">header</span><span class=\"o\">.</span><span class=\"n\">splitter</span><span class=\"o\">.</span><span class=\"n\">delimiter</span> <span class=\"o\">=</span> <span class=\"s\">&#39;</span><span class=\"se\">\\t</span><span class=\"s\">&#39;</span>    <span class=\"n\">reader</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">splitter</span><span class=\"o\">.</span><span class=\"n\">delimiter</span> <span class=\"o\">=</span> <span class=\"s\">&#39;</span><span class=\"se\">\\t</span><span class=\"s\">&#39;</span>    <span class=\"n\">reader</span><span class=\"o\">.</span><span class=\"n\">header</span><span class=\"o\">.</span><span class=\"n\">splitter</span><span class=\"o\">.</span><span class=\"n\">process_line</span> <span class=\"o\">=</span> <span class=\"bp\">None</span>    <span class=\"n\">reader</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">splitter</span><span class=\"o\">.</span><span class=\"n\">process_line</span> <span class=\"o\">=</span> <span class=\"bp\">None</span>    <span class=\"n\">reader</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">start_line</span> <span class=\"o\">=</span> <span class=\"mi\">2</span>    <span class=\"k\">return</span> <span class=\"n\">reader</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">(</span><span class=\"n\">table</span><span class=\"p\">)</span></pre></div></div><p><strong>Define custom readers by class inheritance</strong></p><div class=\"highlight-python\"><div class=\"highlight\"><pre><span class=\"c\"># Note: Tab and Rdb are already included in asciitable for convenience.</span><span class=\"k\">class</span> <span class=\"nc\">Tab</span><span class=\"p\">(</span><span class=\"n\">asciitable</span><span class=\"o\">.</span><span class=\"n\">Basic</span><span class=\"p\">):</span>    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>        <span class=\"n\">asciitable</span><span class=\"o\">.</span><span class=\"n\">Basic</span><span class=\"o\">.</span><span class=\"n\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span>        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">header</span><span class=\"o\">.</span><span class=\"n\">splitter</span><span class=\"o\">.</span><span class=\"n\">delimiter</span> <span class=\"o\">=</span> <span class=\"s\">&#39;</span><span class=\"se\">\\t</span><span class=\"s\">&#39;</span>        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">splitter</span><span class=\"o\">.</span><span class=\"n\">delimiter</span> <span class=\"o\">=</span> <span class=\"s\">&#39;</span><span class=\"se\">\\t</span><span class=\"s\">&#39;</span>        <span class=\"c\"># Don&#39;t strip line whitespace since that includes tabs</span>        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">header</span><span class=\"o\">.</span><span class=\"n\">splitter</span><span class=\"o\">.</span><span class=\"n\">process_line</span> <span class=\"o\">=</span> <span class=\"bp\">None</span>        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">splitter</span><span class=\"o\">.</span><span class=\"n\">process_line</span> <span class=\"o\">=</span> <span class=\"bp\">None</span>        <span class=\"c\"># Don&#39;t strip data value spaces since that is significant in TSV tables</span>        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">splitter</span><span class=\"o\">.</span><span class=\"n\">process_val</span> <span class=\"o\">=</span> <span class=\"bp\">None</span>        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">splitter</span><span class=\"o\">.</span><span class=\"n\">skipinitialspace</span> <span class=\"o\">=</span> <span class=\"bp\">False</span><span class=\"k\">class</span> <span class=\"nc\">Rdb</span><span class=\"p\">(</span><span class=\"n\">asciitable</span><span class=\"o\">.</span><span class=\"n\">Tab</span><span class=\"p\">):</span>    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>        <span class=\"n\">asciitable</span><span class=\"o\">.</span><span class=\"n\">Tab</span><span class=\"o\">.</span><span class=\"n\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span>        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">start_line</span> <span class=\"o\">=</span> <span class=\"mi\">2</span></pre></div></div><p><strong>Create a custom splitter.process_val function</strong></p><div class=\"highlight-python\"><div class=\"highlight\"><pre><span class=\"c\"># The default process_val() normally just strips whitespace.</span><span class=\"c\"># In addition have it replace empty fields with -999.</span><span class=\"k\">def</span> <span class=\"nf\">process_val</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">):</span>    <span class=\"sd\">&quot;&quot;&quot;Custom splitter process_val function: Remove whitespace at the beginning</span><span class=\"sd\">    or end of value and substitute -999 for any blank entries.&quot;&quot;&quot;</span>    <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">strip</span><span class=\"p\">()</span>    <span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"o\">==</span> <span class=\"s\">&#39;&#39;</span><span class=\"p\">:</span>        <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"s\">&#39;-999&#39;</span>    <span class=\"k\">return</span> <span class=\"n\">x</span><span class=\"c\"># Create an RDB reader and override the splitter.process_val function</span><span class=\"n\">rdb_reader</span> <span class=\"o\">=</span> <span class=\"n\">asciitable</span><span class=\"o\">.</span><span class=\"n\">get_reader</span><span class=\"p\">(</span><span class=\"n\">Reader</span><span class=\"o\">=</span><span class=\"n\">asciitable</span><span class=\"o\">.</span><span class=\"n\">Rdb</span><span class=\"p\">)</span><span class=\"n\">rdb_reader</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">splitter</span><span class=\"o\">.</span><span class=\"n\">process_val</span> <span class=\"o\">=</span> <span class=\"n\">process_val</span></pre></div></div></div></div></div><div class=\"section\" id=\"writing-tables\"><h2>Writing tables<a class=\"headerlink\" href=\"#writing-tables\" title=\"Permalink to this headline\">\u00b6</a></h2><p><tt class=\"xref py py-mod docutils literal\"><span class=\"pre\">Asciitable</span></tt> is able to write ASCII tables out to a file or file-likeobject using the same class structure and basic user interface as for readingtables.</p><p>As a very simple example:</p><div class=\"highlight-python\"><div class=\"highlight\"><pre><span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">])</span><span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">x</span><span class=\"o\">**</span><span class=\"mi\">2</span><span class=\"n\">asciitable</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">({</span><span class=\"s\">&#39;x&#39;</span><span class=\"p\">:</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"s\">&#39;y&#39;</span><span class=\"p\">:</span> <span class=\"n\">y</span><span class=\"p\">},</span> <span class=\"s\">&#39;outfile.dat&#39;</span><span class=\"p\">,</span> <span class=\"n\">names</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s\">&#39;x&#39;</span><span class=\"p\">,</span> <span class=\"s\">&#39;y&#39;</span><span class=\"p\">])</span></pre></div></div><div class=\"section\" id=\"input-data-formats\"><h3>Input data formats<a class=\"headerlink\" href=\"#input-data-formats\" title=\"Permalink to this headline\">\u00b6</a></h3><p>A number of data formats for the input table are supported:</p><ul class=\"simple\"><li><a class=\"reference internal\" href=\"#existing-ascii-table-with-metadata\">Existing ASCII table with metadata</a> (<a class=\"reference internal\" href=\"#asciitable.BaseReader\" title=\"asciitable.BaseReader\"><tt class=\"xref py py-class docutils literal\"><span class=\"pre\">BaseReader</span></tt></a> object)</li><li><a class=\"reference internal\" href=\"#data-from-asciitable-read\">Data from asciitable.read()</a> (<a class=\"reference internal\" href=\"#asciitable.DictLikeNumpy\" title=\"asciitable.DictLikeNumpy\"><tt class=\"xref py py-class docutils literal\"><span class=\"pre\">DictLikeNumpy</span></tt></a> object)</li><li><a class=\"reference internal\" href=\"#numpy-structured-array\">NumPy structured array</a> or record array</li><li><a class=\"reference internal\" href=\"#sequence-of-sequences\">Sequence of sequences</a> (row-oriented list of lists)</li><li><a class=\"reference internal\" href=\"#dict-of-sequences\">Dict of sequences</a> (column oriented dictionary of lists)</li></ul><div class=\"section\" id=\"existing-ascii-table-with-metadata\"><h4>Existing ASCII table with metadata<a class=\"headerlink\" href=\"#existing-ascii-table-with-metadata\" title=\"Permalink to this headline\">\u00b6</a></h4><p>The example below highlights that the <a class=\"reference internal\" href=\"#asciitable.get_reader\" title=\"asciitable.get_reader\"><tt class=\"xref py py-func docutils literal\"><span class=\"pre\">get_reader()</span></tt></a> functionreturns a <tt class=\"xref py py-class docutils literal\"><span class=\"pre\">Reader</span></tt> object that supports keywords and tablemetadata.  The <tt class=\"xref py py-class docutils literal\"><span class=\"pre\">Reader</span></tt> object can then be an input to the<a class=\"reference internal\" href=\"#asciitable.write\" title=\"asciitable.write\"><tt class=\"xref py py-func docutils literal\"><span class=\"pre\">write()</span></tt></a> function and allow for any associated metadata to bewritten.</p><p>Note that in the current release there is no support for actually writing theavailable keywords or other metadata, but the infrastructure is available andthis is the top priority for development.</p><div class=\"highlight-python\"><div class=\"highlight\"><pre><span class=\"c\"># Get a Reader object</span><span class=\"n\">table</span> <span class=\"o\">=</span> <span class=\"n\">asciitable</span><span class=\"o\">.</span><span class=\"n\">get_reader</span><span class=\"p\">(</span><span class=\"n\">Reader</span><span class=\"o\">=</span><span class=\"n\">asciitable</span><span class=\"o\">.</span><span class=\"n\">Daophot</span><span class=\"p\">)</span><span class=\"c\"># Read a table from a file.  Return a NumPy record array object and also</span><span class=\"c\"># update column and metadata attributes in the &quot;table&quot; Reader object.</span><span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">table</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">(</span><span class=\"s\">&#39;t/daophot.dat&#39;</span><span class=\"p\">)</span><span class=\"c\"># Write the data in a variety of ways using as input both the NumPy record</span><span class=\"c\"># array and the higher-level Reader object.</span><span class=\"n\">asciitable</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">table</span><span class=\"p\">,</span> <span class=\"s\">&quot;table.dat&quot;</span><span class=\"p\">,</span> <span class=\"n\">Writer</span><span class=\"o\">=</span><span class=\"n\">asciitable</span><span class=\"o\">.</span><span class=\"n\">Tab</span> <span class=\"p\">)</span><span class=\"n\">asciitable</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">table</span><span class=\"p\">,</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s\">&quot;table.dat&quot;</span><span class=\"p\">,</span> <span class=\"s\">&quot;w&quot;</span><span class=\"p\">),</span> <span class=\"n\">Writer</span><span class=\"o\">=</span><span class=\"n\">asciitable</span><span class=\"o\">.</span><span class=\"n\">NoHeader</span> <span class=\"p\">)</span><span class=\"n\">asciitable</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">table</span><span class=\"p\">,</span> <span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">stdout</span><span class=\"p\">,</span> <span class=\"n\">Writer</span><span class=\"o\">=</span><span class=\"n\">asciitable</span><span class=\"o\">.</span><span class=\"n\">CommentedHeader</span> <span class=\"p\">)</span><span class=\"n\">asciitable</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">table</span><span class=\"p\">,</span> <span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">stdout</span><span class=\"p\">,</span> <span class=\"n\">Writer</span><span class=\"o\">=</span><span class=\"n\">asciitable</span><span class=\"o\">.</span><span class=\"n\">Rdb</span><span class=\"p\">,</span> <span class=\"n\">exclude_names</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s\">&#39;CHI&#39;</span><span class=\"p\">]</span> <span class=\"p\">)</span><span class=\"n\">asciitable</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">table</span><span class=\"p\">,</span> <span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">stdout</span><span class=\"p\">,</span> <span class=\"n\">formats</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s\">&#39;XCENTER&#39;</span><span class=\"p\">:</span> <span class=\"s\">&#39;</span><span class=\"si\">%12.1f</span><span class=\"s\">&#39;</span><span class=\"p\">,</span>                                             <span class=\"s\">&#39;YCENTER&#39;</span><span class=\"p\">:</span> <span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"nb\">round</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)},</span>                                    <span class=\"n\">include_names</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s\">&#39;XCENTER&#39;</span><span class=\"p\">,</span> <span class=\"s\">&#39;YCENTER&#39;</span><span class=\"p\">])</span></pre></div></div></div><div class=\"section\" id=\"data-from-asciitable-read\"><h4>Data from asciitable.read()<a class=\"headerlink\" href=\"#data-from-asciitable-read\" title=\"Permalink to this headline\">\u00b6</a></h4><p><tt class=\"xref py py-mod docutils literal\"><span class=\"pre\">Asciitable.read</span></tt> returns a data object that can be an input to the<a class=\"reference internal\" href=\"#asciitable.write\" title=\"asciitable.write\"><tt class=\"xref py py-func docutils literal\"><span class=\"pre\">write()</span></tt></a> function.  If NumPy is available the default dataobject type is a NumPy record array.  However it is possible to use<a class=\"reference internal\" href=\"#module-asciitable\" title=\"asciitable\"><tt class=\"xref py py-mod docutils literal\"><span class=\"pre\">asciitable</span></tt></a> without NumPy in which case a <a class=\"reference internal\" href=\"#asciitable.DictLikeNumpy\" title=\"asciitable.DictLikeNumpy\"><tt class=\"xref py py-class docutils literal\"><span class=\"pre\">DictLikeNumpy</span></tt></a>object is returned.  This object supports the most basic column and row indexingAPI of a NumPy <a class=\"reference external\" href=\"http://docs.scipy.org/doc/numpy/user/basics.rec.html\">structured array</a>.  This object can be used as input to the <a class=\"reference internal\" href=\"#asciitable.write\" title=\"asciitable.write\"><tt class=\"xref py py-func docutils literal\"><span class=\"pre\">write()</span></tt></a>function.</p><div class=\"highlight-python\"><div class=\"highlight\"><pre><span class=\"n\">table</span> <span class=\"o\">=</span> <span class=\"n\">asciitable</span><span class=\"o\">.</span><span class=\"n\">get_reader</span><span class=\"p\">(</span><span class=\"n\">Reader</span><span class=\"o\">=</span><span class=\"n\">asciitable</span><span class=\"o\">.</span><span class=\"n\">Daophot</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">=</span><span class=\"bp\">False</span><span class=\"p\">)</span><span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">table</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">(</span><span class=\"s\">&#39;t/daophot.dat&#39;</span><span class=\"p\">)</span><span class=\"n\">asciitable</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">stdout</span><span class=\"p\">)</span></pre></div></div></div><div class=\"section\" id=\"numpy-structured-array\"><h4>NumPy structured array<a class=\"headerlink\" href=\"#numpy-structured-array\" title=\"Permalink to this headline\">\u00b6</a></h4><p>A NumPy <a class=\"reference external\" href=\"http://docs.scipy.org/doc/numpy/user/basics.rec.html\">structured array</a> (aka record array) can serve as input to the <a class=\"reference internal\" href=\"#asciitable.write\" title=\"asciitable.write\"><tt class=\"xref py py-func docutils literal\"><span class=\"pre\">write()</span></tt></a> function.</p><div class=\"highlight-python\"><div class=\"highlight\"><pre><span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">zeros</span><span class=\"p\">((</span><span class=\"mi\">2</span><span class=\"p\">,),</span> <span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s\">&#39;i4,f4,a10&#39;</span><span class=\"p\">))</span><span class=\"n\">data</span><span class=\"p\">[:]</span> <span class=\"o\">=</span> <span class=\"p\">[(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mf\">2.</span><span class=\"p\">,</span> <span class=\"s\">&#39;Hello&#39;</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mf\">3.</span><span class=\"p\">,</span> <span class=\"s\">&quot;World&quot;</span><span class=\"p\">)]</span><span class=\"n\">asciitable</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">stdout</span><span class=\"p\">)</span></pre></div></div></div><div class=\"section\" id=\"sequence-of-sequences\"><h4>Sequence of sequences<a class=\"headerlink\" href=\"#sequence-of-sequences\" title=\"Permalink to this headline\">\u00b6</a></h4><p>A doubly-nested structure of iterable objects (e.g. lists or tuples) can serve as input to <a class=\"reference internal\" href=\"#asciitable.write\" title=\"asciitable.write\"><tt class=\"xref py py-func docutils literal\"><span class=\"pre\">write()</span></tt></a>.The outer layer represents rows while the inner layer represents columns.</p><div class=\"highlight-python\"><div class=\"highlight\"><pre><span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"p\">[[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span>   <span class=\"mi\">3</span>      <span class=\"p\">],</span>        <span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mf\">5.2</span><span class=\"p\">,</span> <span class=\"mf\">6.1</span>    <span class=\"p\">],</span>        <span class=\"p\">[</span><span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">,</span>   <span class=\"s\">&#39;hello&#39;</span><span class=\"p\">]]</span><span class=\"n\">asciitable</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"s\">&#39;table.dat&#39;</span><span class=\"p\">)</span><span class=\"n\">asciitable</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"s\">&#39;table.dat&#39;</span><span class=\"p\">,</span> <span class=\"n\">names</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s\">&#39;x&#39;</span><span class=\"p\">,</span> <span class=\"s\">&#39;y&#39;</span><span class=\"p\">,</span> <span class=\"s\">&#39;z&#39;</span><span class=\"p\">],</span> <span class=\"n\">exclude_names</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s\">&#39;y&#39;</span><span class=\"p\">])</span></pre></div></div></div><div class=\"section\" id=\"dict-of-sequences\"><h4>Dict of sequences<a class=\"headerlink\" href=\"#dict-of-sequences\" title=\"Permalink to this headline\">\u00b6</a></h4><p>A dictionary containing iterable objects can serve as input to <a class=\"reference internal\" href=\"#asciitable.write\" title=\"asciitable.write\"><tt class=\"xref py py-func docutils literal\"><span class=\"pre\">write()</span></tt></a>.  Eachdict key is taken as the column name while the value must be an iterable objectcontaining the corresponding column values.  Note the difference in output betweenthis example and the previous example.</p><div class=\"highlight-python\"><div class=\"highlight\"><pre><span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s\">&#39;x&#39;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">],</span>        <span class=\"s\">&#39;y&#39;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mf\">5.2</span><span class=\"p\">,</span> <span class=\"mf\">6.1</span><span class=\"p\">],</span>        <span class=\"s\">&#39;z&#39;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">,</span> <span class=\"s\">&#39;hello world&#39;</span><span class=\"p\">]}</span><span class=\"n\">asciitable</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"s\">&#39;table.dat&#39;</span><span class=\"p\">,</span> <span class=\"n\">names</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s\">&#39;x&#39;</span><span class=\"p\">,</span> <span class=\"s\">&#39;y&#39;</span><span class=\"p\">,</span> <span class=\"s\">&#39;z&#39;</span><span class=\"p\">])</span></pre></div></div><p>Specifying the <tt class=\"docutils literal\"><span class=\"pre\">names</span></tt> argument is necessary if the order of the columnsmatters.  The specified values must match the keys in the <tt class=\"docutils literal\"><span class=\"pre\">data</span></tt> dict.</p></div></div><div class=\"section\" id=\"commonly-used-parameters-for-write\"><h3>Commonly used parameters for <tt class=\"docutils literal\"><span class=\"pre\">write()</span></tt><a class=\"headerlink\" href=\"#commonly-used-parameters-for-write\" title=\"Permalink to this headline\">\u00b6</a></h3><p>The <a class=\"reference internal\" href=\"#asciitable.write\" title=\"asciitable.write\"><tt class=\"xref py py-func docutils literal\"><span class=\"pre\">write()</span></tt></a> function accepts a number of parameters that specify the detailedoutput table format.  Different Reader classes can define different defaults, so thedescriptions below sometimes mention &#8220;typical&#8221; default values.  This refers tothe <a class=\"reference internal\" href=\"#asciitable.Basic\" title=\"asciitable.Basic\"><tt class=\"xref py py-class docutils literal\"><span class=\"pre\">Basic</span></tt></a> reader and other similar Reader classes.</p><p>Some Reader classes, e.g. <a class=\"reference internal\" href=\"#asciitable.Latex\" title=\"asciitable.Latex\"><tt class=\"xref py py-class docutils literal\"><span class=\"pre\">Latex</span></tt></a> or <a class=\"reference internal\" href=\"#asciitable.AASTex\" title=\"asciitable.AASTex\"><tt class=\"xref py py-class docutils literal\"><span class=\"pre\">AASTex</span></tt></a>accept aditional keywords, that can customize the output further. See the documentationof these classes for details.</p><dl class=\"docutils\"><dt><strong>output</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">output specifier</span></dt><dd><p class=\"first\">There are two ways to specify the output for the write operation:</p><ul class=\"last simple\"><li>Name of a file (string)</li><li>File-like object (from open(), StringIO, etc)</li></ul></dd><dt><strong>table</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">input table</span></dt><dd><p class=\"first\">The are five possible formats for the data table that is to be written:</p><ul class=\"last simple\"><li><tt class=\"xref py py-mod docutils literal\"><span class=\"pre\">Asciitable</span></tt> Reader object (returned by <a class=\"reference internal\" href=\"#asciitable.get_reader\" title=\"asciitable.get_reader\"><tt class=\"xref py py-func docutils literal\"><span class=\"pre\">get_reader()</span></tt></a>)which has been used to read a table</li><li>Output from <a class=\"reference internal\" href=\"#asciitable.read\" title=\"asciitable.read\"><tt class=\"xref py py-func docutils literal\"><span class=\"pre\">read()</span></tt></a> (<a class=\"reference internal\" href=\"#asciitable.DictLikeNumpy\" title=\"asciitable.DictLikeNumpy\"><tt class=\"xref py py-class docutils literal\"><span class=\"pre\">DictLikeNumpy</span></tt></a>)</li><li>NumPy <a class=\"reference external\" href=\"http://docs.scipy.org/doc/numpy/user/basics.rec.html\">structured array</a> or record array</li><li>List of lists: e.g. <tt class=\"docutils literal\"><span class=\"pre\">[[2,</span> <span class=\"pre\">3],</span> <span class=\"pre\">[4,</span> <span class=\"pre\">5],</span> <span class=\"pre\">[6,</span> <span class=\"pre\">7]]</span></tt> (3 rows, 2 columns)</li><li>Dict of lists: e.g. <tt class=\"docutils literal\"><span class=\"pre\">{'c1':</span> <span class=\"pre\">[2,</span> <span class=\"pre\">3,</span> <span class=\"pre\">4],</span> <span class=\"pre\">'c2':</span> <span class=\"pre\">[5,</span> <span class=\"pre\">6,</span> <span class=\"pre\">7]}</span></tt> (3 rows, 2 columns)</li></ul></dd><dt><strong>Writer</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">Writer class (default= <a class=\"reference internal\" href=\"#asciitable.Basic\" title=\"asciitable.Basic\"><tt class=\"xref py py-class docutils literal\"><span class=\"pre\">Basic</span></tt></a>)</span></dt><dd>This specifies the top-level format of the ASCII table to be written, forexample if it is a basic character delimited table, fixed format table, or aCDS-compatible table, etc.  The value of this parameter must be a Readerclass.  For basic usage this means one of the built-in <a class=\"reference internal\" href=\"#extension-reader-classes\">Extension ReaderClasses</a>.  Note: Reader classes and Writer classes are synonymous, in otherwords Reader classes can also write, but for historical reasons they arecalled Reader classes.</dd><dt><strong>delimiter</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">column delimiter string</span></dt><dd>A one-character string used to separate fields which typically defaults to the space character.Other common values might be &#8221;,&#8221; or &#8220;|&#8221; or &#8220;\\t&#8221;.</dd><dt><strong>comment</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string defining a comment line in table</span></dt><dd>For the <a class=\"reference internal\" href=\"#asciitable.Basic\" title=\"asciitable.Basic\"><tt class=\"xref py py-class docutils literal\"><span class=\"pre\">Basic</span></tt></a> Reader this defaults to &#8220;#&#8221;.</dd><dt><strong>formats</strong>: dict of data type converters</dt><dd><p class=\"first\">For each key (column name) use the given value to convert the column data to a string.If the format value is string-like then it is used as a Python format statement,e.g. &#8216;%0.2f&#8217; % value.  If it is a callable function then that functionis called with a single argument containing the column value to be converted.Example:</p><div class=\"last highlight-python\"><pre>asciitable.write(table, sys.stdout, formats={'XCENTER': '%12.1f',                                             'YCENTER': lambda x: round(x, 1)},</pre></div></dd><dt><strong>names</strong>: list of names corresponding to each data column</dt><dd>Define the complete list of names for each data column.  This will overridenames determined from the data table (if available), except in the case ofinput as a <a class=\"reference internal\" href=\"#dict-of-sequences\">Dict of sequences</a> where it specifies the <em>order</em> columns.  If notsupplied then use names from the data table or auto-generated names.</dd><dt><strong>include_names</strong>: list of names to include in output</dt><dd>From the list of column names found from the data table or the <tt class=\"docutils literal\"><span class=\"pre\">names</span></tt>parameter, select for output only columns within this list.  If not suppliedthen include all names.</dd><dt><strong>exclude_names</strong>: list of names to exlude from output</dt><dd>Exclude these names from the list of output columns.  This is applied <em>after</em>the <tt class=\"docutils literal\"><span class=\"pre\">include_names</span></tt> filtering.  If not specified then no columns are excluded.</dd><dt><strong>fill_values</strong>: fill value specifier of lists</dt><dd><p class=\"first\">This can be used to fill missing values in the table or replace values with special meaning.The syntax is the same as used on input.See the <a class=\"reference internal\" href=\"#replace-bad-or-missing-values\">Replace bad or missing values</a> section for more information on the syntax.When writing a table, all values are converted to strings, before any value is replaced. Thus,you need to provide the string representation (stripped of whitespace) for each value.Example:</p><div class=\"last highlight-python\"><div class=\"highlight\"><pre><span class=\"n\">asciitable</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">table</span><span class=\"p\">,</span> <span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">stdout</span><span class=\"p\">,</span> <span class=\"n\">fill_values</span> <span class=\"o\">=</span> <span class=\"p\">[(</span><span class=\"s\">&#39;nan&#39;</span><span class=\"p\">,</span> <span class=\"s\">&#39;no data&#39;</span><span class=\"p\">),</span>                                                   <span class=\"p\">(</span><span class=\"s\">&#39;-999.0&#39;</span><span class=\"p\">,</span> <span class=\"s\">&#39;no data&#39;</span><span class=\"p\">)])</span></pre></div></div></dd><dt><strong>fill_include_names</strong>: list of column names, which are affected by <tt class=\"docutils literal\"><span class=\"pre\">fill_values</span></tt>.</dt><dd>If not supplied, then <tt class=\"docutils literal\"><span class=\"pre\">fill_values</span></tt> can affect all columns.</dd><dt><strong>fill_exclude_names</strong>: list of column names, which are not affected by <tt class=\"docutils literal\"><span class=\"pre\">fill_values</span></tt>.</dt><dd>If not supplied, then <tt class=\"docutils literal\"><span class=\"pre\">fill_values</span></tt> can affect all columns.</dd></dl></div></div><div class=\"section\" id=\"base-class-elements\"><h2>Base class elements<a class=\"headerlink\" href=\"#base-class-elements\" title=\"Permalink to this headline\">\u00b6</a></h2><p>The key elements in <a class=\"reference internal\" href=\"#module-asciitable\" title=\"asciitable\"><tt class=\"xref py py-mod docutils literal\"><span class=\"pre\">asciitable</span></tt></a> are:</p><ul class=\"simple\"><li><a class=\"reference internal\" href=\"#asciitable.Column\" title=\"asciitable.Column\"><tt class=\"xref py py-class docutils literal\"><span class=\"pre\">Column</span></tt></a>: Internal storage of column properties and data ()</li><li><a class=\"reference internal\" href=\"#asciitable.BaseInputter\" title=\"asciitable.BaseInputter\"><tt class=\"xref py py-class docutils literal\"><span class=\"pre\">Inputter</span></tt></a>: Get the lines from the table input.</li><li><a class=\"reference internal\" href=\"#asciitable.BaseSplitter\" title=\"asciitable.BaseSplitter\"><tt class=\"xref py py-class docutils literal\"><span class=\"pre\">Splitter</span></tt></a>: Split the lines into string column values.</li><li><a class=\"reference internal\" href=\"#asciitable.BaseHeader\" title=\"asciitable.BaseHeader\"><tt class=\"xref py py-class docutils literal\"><span class=\"pre\">Header</span></tt></a>: Initialize output columns based on the table header or user input.</li><li><a class=\"reference internal\" href=\"#asciitable.BaseData\" title=\"asciitable.BaseData\"><tt class=\"xref py py-class docutils literal\"><span class=\"pre\">Data</span></tt></a>: Populate column data from the table.</li><li><a class=\"reference internal\" href=\"#asciitable.BaseOutputter\" title=\"asciitable.BaseOutputter\"><tt class=\"xref py py-class docutils literal\"><span class=\"pre\">Outputter</span></tt></a>: Convert column data to the specified output format, e.g. <a class=\"reference external\" href=\"http://numpy.scipy.org/\">NumPy</a> structured array.</li></ul><p>Each of these elements is an inheritable class with attributes that control thecorresponding functionality.  In this way the large number of tweakableparameters is modularized into managable groups.  Where it makes sense theseattributes are actually functions that make it easy to handle special cases.</p></div></div><div class=\"section\" id=\"module-asciitable\"><span id=\"asciitable-api\"></span><h1>Asciitable API<a class=\"headerlink\" href=\"#module-asciitable\" title=\"Permalink to this headline\">\u00b6</a></h1><p>An extensible ASCII table reader and writer.</p><table class=\"docutils field-list\" frame=\"void\" rules=\"none\"><col class=\"field-name\" /><col class=\"field-body\" /><tbody valign=\"top\"><tr class=\"field-odd field\"><th class=\"field-name\">Copyright:</th><td class=\"field-body\">Smithsonian Astrophysical Observatory (2010)</td></tr><tr class=\"field-even field\"><th class=\"field-name\">Author:</th><td class=\"field-body\">Tom Aldcroft (<a class=\"reference external\" href=\"mailto:aldcroft&#37;&#52;&#48;head&#46;cfa&#46;harvard&#46;edu\">aldcroft<span>&#64;</span>head<span>&#46;</span>cfa<span>&#46;</span>harvard<span>&#46;</span>edu</a>)</td></tr></tbody></table><div class=\"section\" id=\"functions\"><h2>Functions<a class=\"headerlink\" href=\"#functions\" title=\"Permalink to this headline\">\u00b6</a></h2><dl class=\"function\"><dt id=\"asciitable.read\"><tt class=\"descclassname\">asciitable.</tt><tt class=\"descname\">read</tt><big>(</big><em>table</em>, <em>numpy=True</em>, <em>guess=None</em>, <em>**kwargs</em><big>)</big><a class=\"headerlink\" href=\"#asciitable.read\" title=\"Permalink to this definition\">\u00b6</a></dt><dd><p>Read the input <tt class=\"docutils literal\"><span class=\"pre\">table</span></tt>.  If <tt class=\"docutils literal\"><span class=\"pre\">numpy</span></tt> is True (default) return thetable in a numpy record array.  Otherwise return the table as a dictionaryof column objects using plain python lists to hold the data.  Most of thedefault behavior for various parameters is determined by the Reader class.</p><table class=\"docutils field-list\" frame=\"void\" rules=\"none\"><col class=\"field-name\" /><col class=\"field-body\" /><tbody valign=\"top\"><tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><ul class=\"first last simple\"><li><strong>table</strong> &#8211; input table (file name, list of strings, or single newline-separated string)</li><li><strong>numpy</strong> &#8211; use the <a class=\"reference internal\" href=\"#asciitable.NumpyOutputter\" title=\"asciitable.NumpyOutputter\"><tt class=\"xref py py-class docutils literal\"><span class=\"pre\">NumpyOutputter</span></tt></a> class else use <a class=\"reference internal\" href=\"#asciitable.BaseOutputter\" title=\"asciitable.BaseOutputter\"><tt class=\"xref py py-class docutils literal\"><span class=\"pre\">BaseOutputter</span></tt></a> (default=True)</li><li><strong>guess</strong> &#8211; try to guess the table format (default=True)</li><li><strong>Reader</strong> &#8211; Reader class (default= <tt class=\"xref py py-class docutils literal\"><span class=\"pre\">BasicReader</span></tt>)</li><li><strong>Inputter</strong> &#8211; Inputter class</li><li><strong>Outputter</strong> &#8211; Outputter class</li><li><strong>delimiter</strong> &#8211; column delimiter string</li><li><strong>comment</strong> &#8211; regular expression defining a comment line in table</li><li><strong>quotechar</strong> &#8211; one-character string to quote fields containing special characters</li><li><strong>header_start</strong> &#8211; line index for the header line not counting comment lines</li><li><strong>data_start</strong> &#8211; line index for the start of data not counting comment lines</li><li><strong>data_end</strong> &#8211; line index for the end of data (can be negative to count from end)</li><li><strong>converters</strong> &#8211; dict of converters</li><li><strong>data_Splitter</strong> &#8211; Splitter class to split data columns</li><li><strong>header_Splitter</strong> &#8211; Splitter class to split header columns</li><li><strong>names</strong> &#8211; list of names corresponding to each data column</li><li><strong>include_names</strong> &#8211; list of names to include in output (default=None selects all names)</li><li><strong>exclude_names</strong> &#8211; list of names to exlude from output (applied after <tt class=\"docutils literal\"><span class=\"pre\">include_names</span></tt>)</li><li><strong>fill_values</strong> &#8211; specification of fill values for bad or missing table values</li><li><strong>fill_include_names</strong> &#8211; list of names to include in fill_values (default=None selects all names)</li><li><strong>fill_exclude_names</strong> &#8211; list of names to exlude from fill_values (applied after <tt class=\"docutils literal\"><span class=\"pre\">fill_include_names</span></tt>)</li></ul></td></tr></tbody></table></dd></dl><dl class=\"function\"><dt id=\"asciitable.get_reader\"><tt class=\"descclassname\">asciitable.</tt><tt class=\"descname\">get_reader</tt><big>(</big><em>Reader=None</em>, <em>Inputter=None</em>, <em>Outputter=None</em>, <em>numpy=True</em>, <em>**kwargs</em><big>)</big><a class=\"headerlink\" href=\"#asciitable.get_reader\" title=\"Permalink to this definition\">\u00b6</a></dt><dd><p>Initialize a table reader allowing for common customizations.  Most of thedefault behavior for various parameters is determined by the Reader class.</p><table class=\"docutils field-list\" frame=\"void\" rules=\"none\"><col class=\"field-name\" /><col class=\"field-body\" /><tbody valign=\"top\"><tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><ul class=\"first last simple\"><li><strong>Reader</strong> &#8211; Reader class (default= <tt class=\"xref py py-class docutils literal\"><span class=\"pre\">BasicReader</span></tt>)</li><li><strong>Inputter</strong> &#8211; Inputter class</li><li><strong>Outputter</strong> &#8211; Outputter class</li><li><strong>numpy</strong> &#8211; use the NumpyOutputter class else use BaseOutputter (default=True)</li><li><strong>delimiter</strong> &#8211; column delimiter string</li><li><strong>comment</strong> &#8211; regular expression defining a comment line in table</li><li><strong>quotechar</strong> &#8211; one-character string to quote fields containing special characters</li><li><strong>header_start</strong> &#8211; line index for the header line not counting comment lines</li><li><strong>data_start</strong> &#8211; line index for the start of data not counting comment lines</li><li><strong>data_end</strong> &#8211; line index for the end of data (can be negative to count from end)</li><li><strong>converters</strong> &#8211; dict of converters</li><li><strong>data_Splitter</strong> &#8211; Splitter class to split data columns</li><li><strong>header_Splitter</strong> &#8211; Splitter class to split header columns</li><li><strong>names</strong> &#8211; list of names corresponding to each data column</li><li><strong>include_names</strong> &#8211; list of names to include in output (default=None selects all names)</li><li><strong>exclude_names</strong> &#8211; list of names to exlude from output (applied after <tt class=\"docutils literal\"><span class=\"pre\">include_names</span></tt>)</li><li><strong>fill_values</strong> &#8211; specification of fill values for bad or missing table values</li><li><strong>fill_include_names</strong> &#8211; list of names to include in fill_values (default=None selects all names)</li><li><strong>fill_exclude_names</strong> &#8211; list of names to exlude from fill_values (applied after <tt class=\"docutils literal\"><span class=\"pre\">fill_include_names</span></tt>)</li></ul></td></tr></tbody></table></dd></dl><dl class=\"function\"><dt id=\"asciitable.write\"><tt class=\"descclassname\">asciitable.</tt><tt class=\"descname\">write</tt><big>(</big><em>table</em>, <em>output=&lt;open file '&lt;stdout&gt;'</em>, <em>mode 'w' at 0x2ae95039c1e0&gt;</em>, <em>Writer=None</em>, <em>**kwargs</em><big>)</big><a class=\"headerlink\" href=\"#asciitable.write\" title=\"Permalink to this definition\">\u00b6</a></dt><dd><p>Write the input <tt class=\"docutils literal\"><span class=\"pre\">table</span></tt> to <tt class=\"docutils literal\"><span class=\"pre\">filename</span></tt>.  Most of the default behaviorfor various parameters is determined by the Writer class.</p><table class=\"docutils field-list\" frame=\"void\" rules=\"none\"><col class=\"field-name\" /><col class=\"field-body\" /><tbody valign=\"top\"><tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><ul class=\"first last simple\"><li><strong>table</strong> &#8211; input table (Reader object, NumPy struct array, list of lists, etc)</li><li><strong>output</strong> &#8211; output [filename, file-like object] (default = sys.stdout)</li><li><strong>Writer</strong> &#8211; Writer class (default= <a class=\"reference internal\" href=\"#asciitable.Basic\" title=\"asciitable.Basic\"><tt class=\"xref py py-class docutils literal\"><span class=\"pre\">Basic</span></tt></a> )</li><li><strong>delimiter</strong> &#8211; column delimiter string</li><li><strong>write_comment</strong> &#8211; string defining a comment line in table</li><li><strong>quotechar</strong> &#8211; one-character string to quote fields containing special characters</li><li><strong>formats</strong> &#8211; dict of format specifiers or formatting functions</li><li><strong>names</strong> &#8211; list of names corresponding to each data column</li><li><strong>include_names</strong> &#8211; list of names to include in output (default=None selects all names)</li><li><strong>exclude_names</strong> &#8211; list of names to exlude from output (applied after <tt class=\"docutils literal\"><span class=\"pre\">include_names</span></tt>)</li></ul></td></tr></tbody></table></dd></dl><dl class=\"function\"><dt id=\"asciitable.get_writer\"><tt class=\"descclassname\">asciitable.</tt><tt class=\"descname\">get_writer</tt><big>(</big><em>Writer=None</em>, <em>**kwargs</em><big>)</big><a class=\"headerlink\" href=\"#asciitable.get_writer\" title=\"Permalink to this definition\">\u00b6</a></dt><dd><p>Initialize a table writer allowing for common customizations.  Most of thedefault behavior for various parameters is determined by the Writer class.</p><table class=\"docutils field-list\" frame=\"void\" rules=\"none\"><col class=\"field-name\" /><col class=\"field-body\" /><tbody valign=\"top\"><tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><ul class=\"first last simple\"><li><strong>Writer</strong> &#8211; Writer class (default= <a class=\"reference internal\" href=\"#asciitable.Basic\" title=\"asciitable.Basic\"><tt class=\"xref py py-class docutils literal\"><span class=\"pre\">Basic</span></tt></a> )</li><li><strong>delimiter</strong> &#8211; column delimiter string</li><li><strong>write_comment</strong> &#8211; string defining a comment line in table</li><li><strong>quotechar</strong> &#8211; one-character string to quote fields containing special characters</li><li><strong>formats</strong> &#8211; dict of format specifiers or formatting functions</li><li><strong>names</strong> &#8211; list of names corresponding to each data column</li><li><strong>include_names</strong> &#8211; list of names to include in output (default=None selects all names)</li><li><strong>exclude_names</strong> &#8211; list of names to exlude from output (applied after <tt class=\"docutils literal\"><span class=\"pre\">include_names</span></tt>)</li></ul></td></tr></tbody></table></dd></dl><dl class=\"function\"><dt id=\"asciitable.convert_list\"><tt class=\"descclassname\">asciitable.</tt><tt class=\"descname\">convert_list</tt><big>(</big><em>python_type</em><big>)</big><a class=\"headerlink\" href=\"#asciitable.convert_list\" title=\"Permalink to this definition\">\u00b6</a></dt><dd><p>Return a tuple <tt class=\"docutils literal\"><span class=\"pre\">(converter_func,</span> <span class=\"pre\">converter_type)</span></tt>.  The converterfunction converts a list into a list of the given <tt class=\"docutils literal\"><span class=\"pre\">python_type</span></tt>.  Thisargument is a function that takes a single argument and returns a singlevalue of the desired type.  In general this will be one of <tt class=\"docutils literal\"><span class=\"pre\">int</span></tt>,<tt class=\"docutils literal\"><span class=\"pre\">float</span></tt> or <tt class=\"docutils literal\"><span class=\"pre\">str</span></tt>.  The converter type is used to track the generic datatype (int, float, str) that is produced by the converter function.</p></dd></dl><dl class=\"function\"><dt id=\"asciitable.convert_numpy\"><tt class=\"descclassname\">asciitable.</tt><tt class=\"descname\">convert_numpy</tt><big>(</big><em>numpy_type</em><big>)</big><a class=\"headerlink\" href=\"#asciitable.convert_numpy\" title=\"Permalink to this definition\">\u00b6</a></dt><dd><p>Return a tuple <tt class=\"docutils literal\"><span class=\"pre\">(converter_func,</span> <span class=\"pre\">converter_type)</span></tt>.  The converterfunction converts a list into a numpy array of the given <tt class=\"docutils literal\"><span class=\"pre\">numpy_type</span></tt>.This type must be a valid <a class=\"reference external\" href=\"http://docs.scipy.org/doc/numpy/user/basics.types.html\">numpy type</a>, e.g.numpy.int, numpy.uint, numpy.int8, numpy.int64, numpy.float, numpy.float64,numpy.str.  The converter type is used to track the generic data type (int,float, str) that is produced by the converter function.</p></dd></dl><dl class=\"function\"><dt id=\"asciitable.set_guess\"><tt class=\"descclassname\">asciitable.</tt><tt class=\"descname\">set_guess</tt><big>(</big><em>guess</em><big>)</big><a class=\"headerlink\" href=\"#asciitable.set_guess\" title=\"Permalink to this definition\">\u00b6</a></dt><dd><p>Set the default value of the <tt class=\"docutils literal\"><span class=\"pre\">guess</span></tt> parameter for read()</p><table class=\"docutils field-list\" frame=\"void\" rules=\"none\"><col class=\"field-name\" /><col class=\"field-body\" /><tbody valign=\"top\"><tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><strong>guess</strong> &#8211; New default <tt class=\"docutils literal\"><span class=\"pre\">guess</span></tt> value (True|False)</td></tr></tbody></table></dd></dl></div><div class=\"section\" id=\"core-classes\"><h2>Core Classes<a class=\"headerlink\" href=\"#core-classes\" title=\"Permalink to this headline\">\u00b6</a></h2><dl class=\"class\"><dt id=\"asciitable.BaseReader\"><em class=\"property\">class </em><tt class=\"descclassname\">asciitable.</tt><tt class=\"descname\">BaseReader</tt><a class=\"headerlink\" href=\"#asciitable.BaseReader\" title=\"Permalink to this definition\">\u00b6</a></dt><dd><p>Bases: <tt class=\"xref py py-class docutils literal\"><span class=\"pre\">object</span></tt></p><p>Class providing methods to read an ASCII table using the specifiedheader, data, inputter, and outputter instances.</p><p>Typical usage is to instantiate a Reader() object and customize the<tt class=\"docutils literal\"><span class=\"pre\">header</span></tt>, <tt class=\"docutils literal\"><span class=\"pre\">data</span></tt>, <tt class=\"docutils literal\"><span class=\"pre\">inputter</span></tt>, and <tt class=\"docutils literal\"><span class=\"pre\">outputter</span></tt> attributes.  Eachof these is an object of the corresponding class.</p><p>There is one method <tt class=\"docutils literal\"><span class=\"pre\">inconsistent_handler</span></tt> that can be used to customize thebehavior of <tt class=\"docutils literal\"><span class=\"pre\">read()</span></tt> in the event that a data row doesn&#8217;t match the header.The default behavior is to raise an InconsistentTableError.</p><dl class=\"attribute\"><dt id=\"asciitable.BaseReader.comment_lines\"><tt class=\"descname\">comment_lines</tt><a class=\"headerlink\" href=\"#asciitable.BaseReader.comment_lines\" title=\"Permalink to this definition\">\u00b6</a></dt><dd><p>Return lines in the table that match header.comment regexp</p></dd></dl><dl class=\"method\"><dt id=\"asciitable.BaseReader.inconsistent_handler\"><tt class=\"descname\">inconsistent_handler</tt><big>(</big><em>str_vals</em>, <em>ncols</em><big>)</big><a class=\"headerlink\" href=\"#asciitable.BaseReader.inconsistent_handler\" title=\"Permalink to this definition\">\u00b6</a></dt><dd><p>Adjust or skip data entries if a row is inconsistent with the header.</p><p>The default implementation does no adjustment, and hence will always triggeran exception in read() any time the number of data entries does not match the header.</p><p>Note that this will <em>not</em> be called if the row already matches the header.</p><table class=\"docutils field-list\" frame=\"void\" rules=\"none\"><col class=\"field-name\" /><col class=\"field-body\" /><tbody valign=\"top\"><tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><ul class=\"first simple\"><li><strong>str_vals</strong> &#8211; A list of value strings from the current row of the table.</li><li><strong>ncols</strong> &#8211; The expected number of entries from the table header.</li></ul></td></tr><tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><p class=\"first last\">list of strings to be parsed into data entries in the output table. Ifthe length of this list does not match <tt class=\"docutils literal\"><span class=\"pre\">ncols</span></tt>, an exception will beraised in read().  Can also be None, in which case the row will beskipped.</p></td></tr></tbody></table></dd></dl><dl class=\"method\"><dt id=\"asciitable.BaseReader.read\"><tt class=\"descname\">read</tt><big>(</big><em>table</em><big>)</big><a class=\"headerlink\" href=\"#asciitable.BaseReader.read\" title=\"Permalink to this definition\">\u00b6</a></dt><dd><p>Read the <tt class=\"docutils literal\"><span class=\"pre\">table</span></tt> and return the results in a format determined bythe <tt class=\"docutils literal\"><span class=\"pre\">outputter</span></tt> attribute.</p><p>The <tt class=\"docutils literal\"><span class=\"pre\">table</span></tt> parameter is any string or object that can be processedby the instance <tt class=\"docutils literal\"><span class=\"pre\">inputter</span></tt>.  For the base Inputter class <tt class=\"docutils literal\"><span class=\"pre\">table</span></tt> can beone of:</p><ul class=\"simple\"><li>File name</li><li>String (newline separated) with all header and data lines (must have at least 2 lines)</li><li>List of strings</li></ul><table class=\"docutils field-list\" frame=\"void\" rules=\"none\"><col class=\"field-name\" /><col class=\"field-body\" /><tbody valign=\"top\"><tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><strong>table</strong> &#8211; table input</td></tr><tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\">output table</td></tr></tbody></table></dd></dl><dl class=\"method\"><dt id=\"asciitable.BaseReader.write\"><tt class=\"descname\">write</tt><big>(</big><em>table=None</em><big>)</big><a class=\"headerlink\" href=\"#asciitable.BaseReader.write\" title=\"Permalink to this definition\">\u00b6</a></dt><dd><p>Write <tt class=\"docutils literal\"><span class=\"pre\">table</span></tt> as list of strings.</p><table class=\"docutils field-list\" frame=\"void\" rules=\"none\"><col class=\"field-name\" /><col class=\"field-body\" /><tbody valign=\"top\"><tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><strong>table</strong> &#8211; asciitable Reader object</td></tr><tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\">list of strings corresponding to ASCII table</td></tr></tbody></table></dd></dl></dd></dl><dl class=\"class\"><dt id=\"asciitable.BaseData\"><em class=\"property\">class </em><tt class=\"descclassname\">asciitable.</tt><tt class=\"descname\">BaseData</tt><a class=\"headerlink\" href=\"#asciitable.BaseData\" title=\"Permalink to this definition\">\u00b6</a></dt><dd><p>Bases: <tt class=\"xref py py-class docutils literal\"><span class=\"pre\">object</span></tt></p><p>Base table data reader.</p><table class=\"docutils field-list\" frame=\"void\" rules=\"none\"><col class=\"field-name\" /><col class=\"field-body\" /><tbody valign=\"top\"><tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><ul class=\"first last simple\"><li><strong>start_line</strong> &#8211; None, int, or a function of <tt class=\"docutils literal\"><span class=\"pre\">lines</span></tt> that returns None or int</li><li><strong>end_line</strong> &#8211; None, int, or a function of <tt class=\"docutils literal\"><span class=\"pre\">lines</span></tt> that returns None or int</li><li><strong>comment</strong> &#8211; Regular expression for comment lines</li><li><strong>splitter_class</strong> &#8211; Splitter class for splitting data lines into columns</li></ul></td></tr></tbody></table><dl class=\"attribute\"><dt id=\"asciitable.BaseData.comment\"><tt class=\"descname\">comment</tt><em class=\"property\"> = None</em><a class=\"headerlink\" href=\"#asciitable.BaseData.comment\" title=\"Permalink to this definition\">\u00b6</a></dt><dd></dd></dl><dl class=\"attribute\"><dt id=\"asciitable.BaseData.default_formatter\"><tt class=\"descname\">default_formatter</tt><a class=\"headerlink\" href=\"#asciitable.BaseData.default_formatter\" title=\"Permalink to this definition\">\u00b6</a></dt><dd><p>alias of <tt class=\"xref py py-class docutils literal\"><span class=\"pre\">str</span></tt></p></dd></dl><dl class=\"attribute\"><dt id=\"asciitable.BaseData.end_line\"><tt class=\"descname\">end_line</tt><em class=\"property\"> = None</em><a class=\"headerlink\" href=\"#asciitable.BaseData.end_line\" title=\"Permalink to this definition\">\u00b6</a></dt><dd></dd></dl><dl class=\"attribute\"><dt id=\"asciitable.BaseData.fill_exclude_names\"><tt class=\"descname\">fill_exclude_names</tt><em class=\"property\"> = None</em><a class=\"headerlink\" href=\"#asciitable.BaseData.fill_exclude_names\" title=\"Permalink to this definition\">\u00b6</a></dt><dd></dd></dl><dl class=\"attribute\"><dt id=\"asciitable.BaseData.fill_include_names\"><tt class=\"descname\">fill_include_names</tt><em class=\"property\"> = None</em><a class=\"headerlink\" href=\"#asciitable.BaseData.fill_include_names\" title=\"Permalink to this definition\">\u00b6</a></dt><dd></dd></dl><dl class=\"attribute\"><dt id=\"asciitable.BaseData.fill_values\"><tt class=\"descname\">fill_values</tt><em class=\"property\"> = []</em><a class=\"headerlink\" href=\"#asciitable.BaseData.fill_values\" title=\"Permalink to this definition\">\u00b6</a></dt><dd></dd></dl><dl class=\"attribute\"><dt id=\"asciitable.BaseData.formats\"><tt class=\"descname\">formats</tt><em class=\"property\"> = {}</em><a class=\"headerlink\" href=\"#asciitable.BaseData.formats\" title=\"Permalink to this definition\">\u00b6</a></dt><dd></dd></dl><dl class=\"method\"><dt id=\"asciitable.BaseData.get_data_lines\"><tt class=\"descname\">get_data_lines</tt><big>(</big><em>lines</em><big>)</big><a class=\"headerlink\" href=\"#asciitable.BaseData.get_data_lines\" title=\"Permalink to this definition\">\u00b6</a></dt><dd><p>Set the <tt class=\"docutils literal\"><span class=\"pre\">data_lines</span></tt> attribute to the lines slice comprising thetable data values.</p></dd></dl><dl class=\"method\"><dt id=\"asciitable.BaseData.get_str_vals\"><tt class=\"descname\">get_str_vals</tt><big>(</big><big>)</big><a class=\"headerlink\" href=\"#asciitable.BaseData.get_str_vals\" title=\"Permalink to this definition\">\u00b6</a></dt><dd><p>Return a generator that returns a list of column values (as strings)for each data line.</p></dd></dl><dl class=\"method\"><dt id=\"asciitable.BaseData.masks\"><tt class=\"descname\">masks</tt><big>(</big><em>cols</em><big>)</big><a class=\"headerlink\" href=\"#asciitable.BaseData.masks\" title=\"Permalink to this definition\">\u00b6</a></dt><dd><p>Set fill value for each column and then apply that fill value</p><p>In the first step it is evaluated with value from <tt class=\"docutils literal\"><span class=\"pre\">fill_values</span></tt> applies towhich column using <tt class=\"docutils literal\"><span class=\"pre\">fill_include_names</span></tt> and <tt class=\"docutils literal\"><span class=\"pre\">fill_exclude_names</span></tt>.In the second step all replacements are done for the appropriate columns.</p></dd></dl><dl class=\"method\"><dt id=\"asciitable.BaseData.process_lines\"><tt class=\"descname\">process_lines</tt><big>(</big><em>lines</em><big>)</big><a class=\"headerlink\" href=\"#asciitable.BaseData.process_lines\" title=\"Permalink to this definition\">\u00b6</a></dt><dd><p>Strip out comment lines and blank lines from list of <tt class=\"docutils literal\"><span class=\"pre\">lines</span></tt></p><table class=\"docutils field-list\" frame=\"void\" rules=\"none\"><col class=\"field-name\" /><col class=\"field-body\" /><tbody valign=\"top\"><tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><strong>lines</strong> &#8211; all lines in table</td></tr><tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\">list of lines</td></tr></tbody></table></dd></dl><dl class=\"attribute\"><dt id=\"asciitable.BaseData.splitter_class\"><tt class=\"descname\">splitter_class</tt><a class=\"headerlink\" href=\"#asciitable.BaseData.splitter_class\" title=\"Permalink to this definition\">\u00b6</a></dt><dd><p>alias of <a class=\"reference internal\" href=\"#asciitable.DefaultSplitter\" title=\"asciitable.DefaultSplitter\"><tt class=\"xref py py-class docutils literal\"><span class=\"pre\">DefaultSplitter</span></tt></a></p></dd></dl><dl class=\"attribute\"><dt id=\"asciitable.BaseData.start_line\"><tt class=\"descname\">start_line</tt><em class=\"property\"> = None</em><a class=\"headerlink\" href=\"#asciitable.BaseData.start_line\" title=\"Permalink to this definition\">\u00b6</a></dt><dd></dd></dl><dl class=\"method\"><dt id=\"asciitable.BaseData.write\"><tt class=\"descname\">write</tt><big>(</big><em>lines</em><big>)</big><a class=\"headerlink\" href=\"#asciitable.BaseData.write\" title=\"Permalink to this definition\">\u00b6</a></dt><dd></dd></dl><dl class=\"attribute\"><dt id=\"asciitable.BaseData.write_spacer_lines\"><tt class=\"descname\">write_spacer_lines</tt><em class=\"property\"> = ['ASCIITABLE_WRITE_SPACER_LINE']</em><a class=\"headerlink\" href=\"#asciitable.BaseData.write_spacer_lines\" title=\"Permalink to this definition\">\u00b6</a></dt><dd></dd></dl></dd></dl><dl class=\"class\"><dt id=\"asciitable.BaseHeader\"><em class=\"property\">class </em><tt class=\"descclassname\">asciitable.</tt><tt class=\"descname\">BaseHeader</tt><a class=\"headerlink\" href=\"#asciitable.BaseHeader\" title=\"Permalink to this definition\">\u00b6</a></dt><dd><p>Bases: <tt class=\"xref py py-class docutils literal\"><span class=\"pre\">object</span></tt></p><p>Base table header reader</p><table class=\"docutils field-list\" frame=\"void\" rules=\"none\"><col class=\"field-name\" /><col class=\"field-body\" /><tbody valign=\"top\"><tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><ul class=\"first last simple\"><li><strong>auto_format</strong> &#8211; format string for auto-generating column names</li><li><strong>start_line</strong> &#8211; None, int, or a function of <tt class=\"docutils literal\"><span class=\"pre\">lines</span></tt> that returns None or int</li><li><strong>comment</strong> &#8211; regular expression for comment lines</li><li><strong>splitter_class</strong> &#8211; Splitter class for splitting data lines into columns</li><li><strong>names</strong> &#8211; list of names corresponding to each data column</li><li><strong>include_names</strong> &#8211; list of names to include in output (default=None selects all names)</li><li><strong>exclude_names</strong> &#8211; list of names to exlude from output (applied after <tt class=\"docutils literal\"><span class=\"pre\">include_names</span></tt>)</li></ul></td></tr></tbody></table><dl class=\"attribute\"><dt id=\"asciitable.BaseHeader.auto_format\"><tt class=\"descname\">auto_format</tt><em class=\"property\"> = 'col%d'</em><a class=\"headerlink\" href=\"#asciitable.BaseHeader.auto_format\" title=\"Permalink to this definition\">\u00b6</a></dt><dd></dd></dl><dl class=\"attribute\"><dt id=\"asciitable.BaseHeader.colnames\"><tt class=\"descname\">colnames</tt><a class=\"headerlink\" href=\"#asciitable.BaseHeader.colnames\" title=\"Permalink to this definition\">\u00b6</a></dt><dd><p>Return the column names of the table</p></dd></dl><dl class=\"attribute\"><dt id=\"asciitable.BaseHeader.comment\"><tt class=\"descname\">comment</tt><em class=\"property\"> = None</em><a class=\"headerlink\" href=\"#asciitable.BaseHeader.comment\" title=\"Permalink to this definition\">\u00b6</a></dt><dd></dd></dl><dl class=\"attribute\"><dt id=\"asciitable.BaseHeader.exclude_names\"><tt class=\"descname\">exclude_names</tt><em class=\"property\"> = None</em><a class=\"headerlink\" href=\"#asciitable.BaseHeader.exclude_names\" title=\"Permalink to this definition\">\u00b6</a></dt><dd></dd></dl><dl class=\"method\"><dt id=\"asciitable.BaseHeader.get_col_type\"><tt class=\"descname\">get_col_type</tt><big>(</big><em>col</em><big>)</big><a class=\"headerlink\" href=\"#asciitable.BaseHeader.get_col_type\" title=\"Permalink to this definition\">\u00b6</a></dt><dd></dd></dl><dl class=\"method\"><dt id=\"asciitable.BaseHeader.get_cols\"><tt class=\"descname\">get_cols</tt><big>(</big><em>lines</em><big>)</big><a class=\"headerlink\" href=\"#asciitable.BaseHeader.get_cols\" title=\"Permalink to this definition\">\u00b6</a></dt><dd><p>Initialize the header Column objects from the table <tt class=\"docutils literal\"><span class=\"pre\">lines</span></tt>.</p><p>Based on the previously set Header attributes find or create the column names.Sets <tt class=\"docutils literal\"><span class=\"pre\">self.cols</span></tt> with the list of Columns.  This list only includes the actualrequested columns after filtering by the include_names and exclude_namesattributes.  See <tt class=\"docutils literal\"><span class=\"pre\">self.names</span></tt> for the full list.</p><table class=\"docutils field-list\" frame=\"void\" rules=\"none\"><col class=\"field-name\" /><col class=\"field-body\" /><tbody valign=\"top\"><tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><strong>lines</strong> &#8211; list of table lines</td></tr><tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\">None</td></tr></tbody></table></dd></dl><dl class=\"method\"><dt id=\"asciitable.BaseHeader.get_type_map_key\"><tt class=\"descname\">get_type_map_key</tt><big>(</big><em>col</em><big>)</big><a class=\"headerlink\" href=\"#asciitable.BaseHeader.get_type_map_key\" title=\"Permalink to this definition\">\u00b6</a></dt><dd></dd></dl><dl class=\"attribute\"><dt id=\"asciitable.BaseHeader.include_names\"><tt class=\"descname\">include_names</tt><em class=\"property\"> = None</em><a class=\"headerlink\" href=\"#asciitable.BaseHeader.include_names\" title=\"Permalink to this definition\">\u00b6</a></dt><dd></dd></dl><dl class=\"attribute\"><dt id=\"asciitable.BaseHeader.n_data_cols\"><tt class=\"descname\">n_data_cols</tt><a class=\"headerlink\" href=\"#asciitable.BaseHeader.n_data_cols\" title=\"Permalink to this definition\">\u00b6</a></dt><dd><p>Return the number of expected data columns from data splitting.This is either explicitly set (typically for fixedwidth splitters)or set to self.names otherwise.</p></dd></dl><dl class=\"attribute\"><dt id=\"asciitable.BaseHeader.names\"><tt class=\"descname\">names</tt><em class=\"property\"> = None</em><a class=\"headerlink\" href=\"#asciitable.BaseHeader.names\" title=\"Permalink to this definition\">\u00b6</a></dt><dd></dd></dl><dl class=\"method\"><dt id=\"asciitable.BaseHeader.process_lines\"><tt class=\"descname\">process_lines</tt><big>(</big><em>lines</em><big>)</big><a class=\"headerlink\" href=\"#asciitable.BaseHeader.process_lines\" title=\"Permalink to this definition\">\u00b6</a></dt><dd><p>Generator to yield non-comment lines</p></dd></dl><dl class=\"attribute\"><dt id=\"asciitable.BaseHeader.splitter_class\"><tt class=\"descname\">splitter_class</tt><a class=\"headerlink\" href=\"#asciitable.BaseHeader.splitter_class\" title=\"Permalink to this definition\">\u00b6</a></dt><dd><p>alias of <a class=\"reference internal\" href=\"#asciitable.DefaultSplitter\" title=\"asciitable.DefaultSplitter\"><tt class=\"xref py py-class docutils literal\"><span class=\"pre\">DefaultSplitter</span></tt></a></p></dd></dl><dl class=\"attribute\"><dt id=\"asciitable.BaseHeader.start_line\"><tt class=\"descname\">start_line</tt><em class=\"property\"> = None</em><a class=\"headerlink\" href=\"#asciitable.BaseHeader.start_line\" title=\"Permalink to this definition\">\u00b6</a></dt><dd></dd></dl><dl class=\"method\"><dt id=\"asciitable.BaseHeader.write\"><tt class=\"descname\">write</tt><big>(</big><em>lines</em><big>)</big><a class=\"headerlink\" href=\"#asciitable.BaseHeader.write\" title=\"Permalink to this definition\">\u00b6</a></dt><dd></dd></dl><dl class=\"attribute\"><dt id=\"asciitable.BaseHeader.write_spacer_lines\"><tt class=\"descname\">write_spacer_lines</tt><em class=\"property\"> = ['ASCIITABLE_WRITE_SPACER_LINE']</em><a class=\"headerlink\" href=\"#asciitable.BaseHeader.write_spacer_lines\" title=\"Permalink to this definition\">\u00b6</a></dt><dd></dd></dl></dd></dl><dl class=\"class\"><dt id=\"asciitable.BaseInputter\"><em class=\"property\">class </em><tt class=\"descclassname\">asciitable.</tt><tt class=\"descname\">BaseInputter</tt><a class=\"headerlink\" href=\"#asciitable.BaseInputter\" title=\"Permalink to this definition\">\u00b6</a></dt><dd><p>Bases: <tt class=\"xref py py-class docutils literal\"><span class=\"pre\">object</span></tt></p><p>Get the lines from the table input and return a list of lines.  The input table can be one of:</p><ul class=\"simple\"><li>File name</li><li>String (newline separated) with all header and data lines (must have at least 2 lines)</li><li>File-like object with read() method</li><li>List of strings</li></ul><dl class=\"method\"><dt id=\"asciitable.BaseInputter.get_lines\"><tt class=\"descname\">get_lines</tt><big>(</big><em>table</em><big>)</big><a class=\"headerlink\" href=\"#asciitable.BaseInputter.get_lines\" title=\"Permalink to this definition\">\u00b6</a></dt><dd><p>Get the lines from the <tt class=\"docutils literal\"><span class=\"pre\">table</span></tt> input.</p><table class=\"docutils field-list\" frame=\"void\" rules=\"none\"><col class=\"field-name\" /><col class=\"field-body\" /><tbody valign=\"top\"><tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><strong>table</strong> &#8211; table input</td></tr><tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\">list of lines</td></tr></tbody></table></dd></dl><dl class=\"method\"><dt id=\"asciitable.BaseInputter.process_lines\"><tt class=\"descname\">process_lines</tt><big>(</big><em>lines</em><big>)</big><a class=\"headerlink\" href=\"#asciitable.BaseInputter.process_lines\" title=\"Permalink to this definition\">\u00b6</a></dt><dd><p>Process lines for subsequent use.  In the default case do nothing.This routine is not generally intended for removing comment lines orstripping whitespace.  These are done (if needed) in the header anddata line processing.</p><p>Override this method if something more has to be done to convert rawinput lines to the table rows.  For example theContinuationLinesInputter derived class accounts for continuationcharacters if a row is split into lines.</p></dd></dl></dd></dl><dl class=\"class\"><dt id=\"asciitable.BaseOutputter\"><em class=\"property\">class </em><tt class=\"descclassname\">asciitable.</tt><tt class=\"descname\">BaseOutputter</tt><a class=\"headerlink\" href=\"#asciitable.BaseOutputter\" title=\"Permalink to this definition\">\u00b6</a></dt><dd><p>Bases: <tt class=\"xref py py-class docutils literal\"><span class=\"pre\">object</span></tt></p><p>Output table as a dict of column objects keyed on column name.  Thetable data are stored as plain python lists within the column objects.</p><dl class=\"attribute\"><dt id=\"asciitable.BaseOutputter.converters\"><tt class=\"descname\">converters</tt><em class=\"property\"> = {}</em><a class=\"headerlink\" href=\"#asciitable.BaseOutputter.converters\" title=\"Permalink to this definition\">\u00b6</a></dt><dd></dd></dl><dl class=\"attribute\"><dt id=\"asciitable.BaseOutputter.default_converters\"><tt class=\"descname\">default_converters</tt><em class=\"property\"> = [(&lt;function converter at 0x133d3410&gt;, &lt;class 'asciitable.core.IntType'&gt;), (&lt;function converter at 0x133d3488&gt;, &lt;class 'asciitable.core.FloatType'&gt;), (&lt;function converter at 0x133d3500&gt;, &lt;class 'asciitable.core.StrType'&gt;)]</em><a class=\"headerlink\" href=\"#asciitable.BaseOutputter.default_converters\" title=\"Permalink to this definition\">\u00b6</a></dt><dd></dd></dl></dd></dl><dl class=\"class\"><dt id=\"asciitable.BaseSplitter\"><em class=\"property\">class </em><tt class=\"descclassname\">asciitable.</tt><tt class=\"descname\">BaseSplitter</tt><a class=\"headerlink\" href=\"#asciitable.BaseSplitter\" title=\"Permalink to this definition\">\u00b6</a></dt><dd><p>Bases: <tt class=\"xref py py-class docutils literal\"><span class=\"pre\">object</span></tt></p><p>Base splitter that uses python&#8217;s split method to do the work.</p><p>This does not handle quoted values.  A key feature is the formulation of__call__ as a generator that returns a list of the split line values ateach iteration.</p><p>There are two methods that are intended to be overridden, first<tt class=\"docutils literal\"><span class=\"pre\">process_line()</span></tt> to do pre-processing on each input line before splittingand <tt class=\"docutils literal\"><span class=\"pre\">process_val()</span></tt> to do post-processing on each split string value.  Bydefault these apply the string <tt class=\"docutils literal\"><span class=\"pre\">strip()</span></tt> function.  These can be set toanother function via the instance attribute or be disabled entirely, forexample:</p><div class=\"highlight-python\"><div class=\"highlight\"><pre><span class=\"n\">reader</span><span class=\"o\">.</span><span class=\"n\">header</span><span class=\"o\">.</span><span class=\"n\">splitter</span><span class=\"o\">.</span><span class=\"n\">process_val</span> <span class=\"o\">=</span> <span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">lstrip</span><span class=\"p\">()</span><span class=\"n\">reader</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">splitter</span><span class=\"o\">.</span><span class=\"n\">process_val</span> <span class=\"o\">=</span> <span class=\"bp\">None</span></pre></div></div><table class=\"docutils field-list\" frame=\"void\" rules=\"none\"><col class=\"field-name\" /><col class=\"field-body\" /><tbody valign=\"top\"><tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><strong>delimiter</strong> &#8211; one-character string used to separate fields</td></tr></tbody></table><dl class=\"attribute\"><dt id=\"asciitable.BaseSplitter.delimiter\"><tt class=\"descname\">delimiter</tt><em class=\"property\"> = None</em><a class=\"headerlink\" href=\"#asciitable.BaseSplitter.delimiter\" title=\"Permalink to this definition\">\u00b6</a></dt><dd></dd></dl><dl class=\"method\"><dt id=\"asciitable.BaseSplitter.join\"><tt class=\"descname\">join</tt><big>(</big><em>vals</em><big>)</big><a class=\"headerlink\" href=\"#asciitable.BaseSplitter.join\" title=\"Permalink to this definition\">\u00b6</a></dt><dd></dd></dl><dl class=\"method\"><dt id=\"asciitable.BaseSplitter.process_line\"><tt class=\"descname\">process_line</tt><big>(</big><em>line</em><big>)</big><a class=\"headerlink\" href=\"#asciitable.BaseSplitter.process_line\" title=\"Permalink to this definition\">\u00b6</a></dt><dd><p>Remove whitespace at the beginning or end of line.  This is especially useful forwhitespace-delimited files to prevent spurious columns at the beginning or end.</p></dd></dl><dl class=\"method\"><dt id=\"asciitable.BaseSplitter.process_val\"><tt class=\"descname\">process_val</tt><big>(</big><em>val</em><big>)</big><a class=\"headerlink\" href=\"#asciitable.BaseSplitter.process_val\" title=\"Permalink to this definition\">\u00b6</a></dt><dd><p>Remove whitespace at the beginning or end of value.</p></dd></dl></dd></dl><dl class=\"class\"><dt id=\"asciitable.Column\"><em class=\"property\">class </em><tt class=\"descclassname\">asciitable.</tt><tt class=\"descname\">Column</tt><big>(</big><em>name</em>, <em>index</em><big>)</big><a class=\"headerlink\" href=\"#asciitable.Column\" title=\"Permalink to this definition\">\u00b6</a></dt><dd><p>Bases: <tt class=\"xref py py-class docutils literal\"><span class=\"pre\">object</span></tt></p><p>Table column.</p><p>The key attributes of a Column object are:</p><ul class=\"simple\"><li><strong>name</strong> : column name</li><li><strong>index</strong> : column index (first column has index=0, second has index=1, etc)</li><li><strong>type</strong> : column type (NoType, StrType, NumType, FloatType, IntType)</li><li><strong>str_vals</strong> : list of column values as strings</li><li><strong>data</strong> : list of converted column values</li></ul></dd></dl><dl class=\"class\"><dt id=\"asciitable.DefaultSplitter\"><em class=\"property\">class </em><tt class=\"descclassname\">asciitable.</tt><tt class=\"descname\">DefaultSplitter</tt><a class=\"headerlink\" href=\"#asciitable.DefaultSplitter\" title=\"Permalink to this definition\">\u00b6</a></dt><dd><p>Bases: <tt class=\"xref py py-class docutils literal\"><span class=\"pre\">asciitable.core.BaseSplitter</span></tt></p><p>Default class to split strings into columns using python csv.  The classattributes are taken from the csv Dialect class.</p><p>Typical usage:</p><div class=\"highlight-python\"><div class=\"highlight\"><pre><span class=\"c\"># lines = ..</span><span class=\"n\">splitter</span> <span class=\"o\">=</span> <span class=\"n\">asciitable</span><span class=\"o\">.</span><span class=\"n\">DefaultSplitter</span><span class=\"p\">()</span><span class=\"k\">for</span> <span class=\"n\">col_vals</span> <span class=\"ow\">in</span> <span class=\"n\">splitter</span><span class=\"p\">(</span><span class=\"n\">lines</span><span class=\"p\">):</span>    <span class=\"k\">for</span> <span class=\"n\">col_val</span> <span class=\"ow\">in</span> <span class=\"n\">col_vals</span><span class=\"p\">:</span>         <span class=\"o\">...</span></pre></div></div><table class=\"docutils field-list\" frame=\"void\" rules=\"none\"><col class=\"field-name\" /><col class=\"field-body\" /><tbody valign=\"top\"><tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><ul class=\"first last simple\"><li><strong>delimiter</strong> &#8211; one-character string used to separate fields.</li><li><strong>doublequote</strong> &#8211; control how instances of <em>quotechar</em> in a field are quoted</li><li><strong>escapechar</strong> &#8211; character to remove special meaning from following character</li><li><strong>quotechar</strong> &#8211; one-character stringto quote fields containing special characters</li><li><strong>quoting</strong> &#8211; control when quotes are recognised by the reader</li><li><strong>skipinitialspace</strong> &#8211; ignore whitespace immediately following the delimiter</li></ul></td></tr></tbody></table><dl class=\"attribute\"><dt id=\"asciitable.DefaultSplitter.delimiter\"><tt class=\"descname\">delimiter</tt><em class=\"property\"> = ' '</em><a class=\"headerlink\" href=\"#asciitable.DefaultSplitter.delimiter\" title=\"Permalink to this definition\">\u00b6</a></dt><dd></dd></dl><dl class=\"attribute\"><dt id=\"asciitable.DefaultSplitter.doublequote\"><tt class=\"descname\">doublequote</tt><em class=\"property\"> = True</em><a class=\"headerlink\" href=\"#asciitable.DefaultSplitter.doublequote\" title=\"Permalink to this definition\">\u00b6</a></dt><dd></dd></dl><dl class=\"attribute\"><dt id=\"asciitable.DefaultSplitter.escapechar\"><tt class=\"descname\">escapechar</tt><em class=\"property\"> = None</em><a class=\"headerlink\" href=\"#asciitable.DefaultSplitter.escapechar\" title=\"Permalink to this definition\">\u00b6</a></dt><dd></dd></dl><dl class=\"method\"><dt id=\"asciitable.DefaultSplitter.join\"><tt class=\"descname\">join</tt><big>(</big><em>vals</em><big>)</big><a class=\"headerlink\" href=\"#asciitable.DefaultSplitter.join\" title=\"Permalink to this definition\">\u00b6</a></dt><dd></dd></dl><dl class=\"method\"><dt id=\"asciitable.DefaultSplitter.process_line\"><tt class=\"descname\">process_line</tt><big>(</big><em>line</em><big>)</big><a class=\"headerlink\" href=\"#asciitable.DefaultSplitter.process_line\" title=\"Permalink to this definition\">\u00b6</a></dt><dd><p>Remove whitespace at the beginning or end of line.  This is especially useful forwhitespace-delimited files to prevent spurious columns at the beginning or end. If splitting on whitespace then replace unquoted tabs with space first</p></dd></dl><dl class=\"method\"><dt id=\"asciitable.DefaultSplitter.process_val\"><tt class=\"descname\">process_val</tt><big>(</big><em>val</em><big>)</big><a class=\"headerlink\" href=\"#asciitable.DefaultSplitter.process_val\" title=\"Permalink to this definition\">\u00b6</a></dt><dd><p>Remove whitespace at the beginning or end of value.</p></dd></dl><dl class=\"attribute\"><dt id=\"asciitable.DefaultSplitter.quotechar\"><tt class=\"descname\">quotechar</tt><em class=\"property\"> = '&quot;'</em><a class=\"headerlink\" href=\"#asciitable.DefaultSplitter.quotechar\" title=\"Permalink to this definition\">\u00b6</a></dt><dd></dd></dl><dl class=\"attribute\"><dt id=\"asciitable.DefaultSplitter.quoting\"><tt class=\"descname\">quoting</tt><em class=\"property\"> = 0</em><a class=\"headerlink\" href=\"#asciitable.DefaultSplitter.quoting\" title=\"Permalink to this definition\">\u00b6</a></dt><dd></dd></dl><dl class=\"attribute\"><dt id=\"asciitable.DefaultSplitter.skipinitialspace\"><tt class=\"descname\">skipinitialspace</tt><em class=\"property\"> = True</em><a class=\"headerlink\" href=\"#asciitable.DefaultSplitter.skipinitialspace\" title=\"Permalink to this definition\">\u00b6</a></dt><dd></dd></dl></dd></dl><dl class=\"class\"><dt id=\"asciitable.DictLikeNumpy\"><em class=\"property\">class </em><tt class=\"descclassname\">asciitable.</tt><tt class=\"descname\">DictLikeNumpy</tt><big>(</big><em>*args</em>, <em>**kwargs</em><big>)</big><a class=\"headerlink\" href=\"#asciitable.DictLikeNumpy\" title=\"Permalink to this definition\">\u00b6</a></dt><dd><p>Bases: <tt class=\"xref py py-class docutils literal\"><span class=\"pre\">dict</span></tt></p><p>Provide minimal compatibility with numpy rec array API for BaseOutputterobject:</p><div class=\"highlight-python\"><div class=\"highlight\"><pre><span class=\"n\">table</span> <span class=\"o\">=</span> <span class=\"n\">asciitable</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">(</span><span class=\"s\">&#39;mytable.dat&#39;</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">=</span><span class=\"bp\">False</span><span class=\"p\">)</span><span class=\"n\">table</span><span class=\"o\">.</span><span class=\"n\">field</span><span class=\"p\">(</span><span class=\"s\">&#39;x&#39;</span><span class=\"p\">)</span>    <span class=\"c\"># List of elements in column &#39;x&#39;</span><span class=\"n\">table</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"o\">.</span><span class=\"n\">names</span>   <span class=\"c\"># get column names in order</span><span class=\"n\">table</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span>            <span class=\"c\"># returns row 1 as a list</span><span class=\"n\">table</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">2</span><span class=\"p\">]</span>         <span class=\"c\"># 3nd column in row 1</span><span class=\"n\">table</span><span class=\"p\">[</span><span class=\"s\">&#39;col1&#39;</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">]</span>    <span class=\"c\"># Row 1 in column col1</span><span class=\"k\">for</span> <span class=\"n\">row_vals</span> <span class=\"ow\">in</span> <span class=\"n\">table</span><span class=\"p\">:</span>  <span class=\"c\"># iterate over table rows</span>    <span class=\"k\">print</span> <span class=\"n\">row_vals</span>  <span class=\"c\"># print list of vals in each row</span></pre></div></div><dl class=\"class\"><dt id=\"asciitable.DictLikeNumpy.Dtype\"><em class=\"property\">class </em><tt class=\"descname\">Dtype</tt><a class=\"headerlink\" href=\"#asciitable.DictLikeNumpy.Dtype\" title=\"Permalink to this definition\">\u00b6</a></dt><dd><p>Bases: <tt class=\"xref py py-class docutils literal\"><span class=\"pre\">object</span></tt></p></dd></dl><dl class=\"method\"><dt id=\"asciitable.DictLikeNumpy.field\"><tt class=\"descclassname\">DictLikeNumpy.</tt><tt class=\"descname\">field</tt><big>(</big><em>colname</em><big>)</big><a class=\"headerlink\" href=\"#asciitable.DictLikeNumpy.field\" title=\"Permalink to this definition\">\u00b6</a></dt><dd></dd></dl><dl class=\"method\"><dt id=\"asciitable.DictLikeNumpy.next\"><tt class=\"descclassname\">DictLikeNumpy.</tt><tt class=\"descname\">next</tt><big>(</big><big>)</big><a class=\"headerlink\" href=\"#asciitable.DictLikeNumpy.next\" title=\"Permalink to this definition\">\u00b6</a></dt><dd></dd></dl></dd></dl><dl class=\"class\"><dt id=\"asciitable.InconsistentTableError\"><em class=\"property\">class </em><tt class=\"descclassname\">asciitable.</tt><tt class=\"descname\">InconsistentTableError</tt><a class=\"headerlink\" href=\"#asciitable.InconsistentTableError\" title=\"Permalink to this definition\">\u00b6</a></dt><dd><p>Bases: <tt class=\"xref py py-class docutils literal\"><span class=\"pre\">exceptions.ValueError</span></tt></p></dd></dl><dl class=\"class\"><dt id=\"asciitable.NumpyOutputter\"><em class=\"property\">class </em><tt class=\"descclassname\">asciitable.</tt><tt class=\"descname\">NumpyOutputter</tt><a class=\"headerlink\" href=\"#asciitable.NumpyOutputter\" title=\"Permalink to this definition\">\u00b6</a></dt><dd><p>Bases: <tt class=\"xref py py-class docutils literal\"><span class=\"pre\">asciitable.core.BaseOutputter</span></tt></p><p>Output the table as a numpy.rec.recarray</p><p>Missing or bad data values are handled at two levels.  The first is inthe data reading step where if <tt class=\"docutils literal\"><span class=\"pre\">data.fill_values</span></tt> is set then anyoccurences of a bad value are replaced by the correspond fill value.At the same time a boolean list <tt class=\"docutils literal\"><span class=\"pre\">mask</span></tt> is created in the column object.</p><p>The second stage is when converting to numpy arrays which by default generatesmasked arrays, if <tt class=\"docutils literal\"><span class=\"pre\">data.fill_values</span></tt> is set and plain arrays if it is not.In the rare case that plain arrays are needed set <tt class=\"docutils literal\"><span class=\"pre\">auto_masked</span></tt> (default = True) and<tt class=\"docutils literal\"><span class=\"pre\">default_masked</span></tt> (default = False) to control this behavior as follows:</p><table border=\"1\" class=\"docutils\"><colgroup><col width=\"23%\" /><col width=\"29%\" /><col width=\"23%\" /><col width=\"25%\" /></colgroup><thead valign=\"bottom\"><tr class=\"row-odd\"><th class=\"head\">auto_masked</th><th class=\"head\">default_masked</th><th class=\"head\">fill_values</th><th class=\"head\">output</th></tr></thead><tbody valign=\"top\"><tr class=\"row-even\"><td>&#8211;</td><td>True</td><td>&#8211;</td><td>masked_array</td></tr><tr class=\"row-odd\"><td>&#8211;</td><td>False</td><td>None</td><td>array</td></tr><tr class=\"row-even\"><td>True</td><td>&#8211;</td><td>dict(..)</td><td>masked_array</td></tr><tr class=\"row-odd\"><td>False</td><td>&#8211;</td><td>dict(..)</td><td>array</td></tr></tbody></table><p>To set these values use:</p><div class=\"highlight-python\"><div class=\"highlight\"><pre><span class=\"n\">Outputter</span> <span class=\"o\">=</span> <span class=\"n\">asciitable</span><span class=\"o\">.</span><span class=\"n\">NumpyOutputter</span><span class=\"p\">()</span><span class=\"n\">Outputter</span><span class=\"o\">.</span><span class=\"n\">default_masked</span> <span class=\"o\">=</span> <span class=\"bp\">True</span></pre></div></div><dl class=\"attribute\"><dt id=\"asciitable.NumpyOutputter.auto_masked_array\"><tt class=\"descname\">auto_masked_array</tt><em class=\"property\"> = True</em><a class=\"headerlink\" href=\"#asciitable.NumpyOutputter.auto_masked_array\" title=\"Permalink to this definition\">\u00b6</a></dt><dd></dd></dl><dl class=\"attribute\"><dt id=\"asciitable.NumpyOutputter.converters\"><tt class=\"descname\">converters</tt><em class=\"property\"> = {}</em><a class=\"headerlink\" href=\"#asciitable.NumpyOutputter.converters\" title=\"Permalink to this definition\">\u00b6</a></dt><dd></dd></dl><dl class=\"attribute\"><dt id=\"asciitable.NumpyOutputter.default_converters\"><tt class=\"descname\">default_converters</tt><em class=\"property\"> = [(&lt;function converter at 0x133d36e0&gt;, &lt;class 'asciitable.core.IntType'&gt;), (&lt;function converter at 0x133d3758&gt;, &lt;class 'asciitable.core.FloatType'&gt;), (&lt;function converter at 0x133d37d0&gt;, &lt;class 'asciitable.core.StrType'&gt;)]</em><a class=\"headerlink\" href=\"#asciitable.NumpyOutputter.default_converters\" title=\"Permalink to this definition\">\u00b6</a></dt><dd></dd></dl><dl class=\"attribute\"><dt id=\"asciitable.NumpyOutputter.default_masked_array\"><tt class=\"descname\">default_masked_array</tt><em class=\"property\"> = False</em><a class=\"headerlink\" href=\"#asciitable.NumpyOutputter.default_masked_array\" title=\"Permalink to this definition\">\u00b6</a></dt><dd></dd></dl></dd></dl></div><div class=\"section\" id=\"extension-reader-classes\"><h2>Extension Reader Classes<a class=\"headerlink\" href=\"#extension-reader-classes\" title=\"Permalink to this headline\">\u00b6</a></h2><p>The following classes extend the base Reader functionality to handle differenttable formats.  Some, such as the <a class=\"reference internal\" href=\"#asciitable.Basic\" title=\"asciitable.Basic\"><tt class=\"xref py py-class docutils literal\"><span class=\"pre\">Basic</span></tt></a> Reader class are fairlygeneral and include a number of configurable attributes.  Others such as<a class=\"reference internal\" href=\"#asciitable.Cds\" title=\"asciitable.Cds\"><tt class=\"xref py py-class docutils literal\"><span class=\"pre\">Cds</span></tt></a> or <a class=\"reference internal\" href=\"#asciitable.Daophot\" title=\"asciitable.Daophot\"><tt class=\"xref py py-class docutils literal\"><span class=\"pre\">Daophot</span></tt></a> are specialized to read certain well-definedbut idiosyncratic formats.</p><ul class=\"simple\"><li><a class=\"reference internal\" href=\"#asciitable.AASTex\" title=\"asciitable.AASTex\"><tt class=\"xref py py-class docutils literal\"><span class=\"pre\">AASTex</span></tt></a>: AASTeX <cite>deluxetable</cite> used for AAS journals</li><li><a class=\"reference internal\" href=\"#asciitable.Basic\" title=\"asciitable.Basic\"><tt class=\"xref py py-class docutils literal\"><span class=\"pre\">Basic</span></tt></a>: basic table with customizable delimiters and header configurations</li><li><a class=\"reference internal\" href=\"#asciitable.Cds\" title=\"asciitable.Cds\"><tt class=\"xref py py-class docutils literal\"><span class=\"pre\">Cds</span></tt></a>: <a class=\"reference external\" href=\"http://vizier.u-strasbg.fr/doc/catstd.htx\">CDS format table</a> (also Vizier and ApJ machine readable tables)</li><li><a class=\"reference internal\" href=\"#asciitable.CommentedHeader\" title=\"asciitable.CommentedHeader\"><tt class=\"xref py py-class docutils literal\"><span class=\"pre\">CommentedHeader</span></tt></a>: column names given in a line that begins with the comment character</li><li><a class=\"reference internal\" href=\"#asciitable.Daophot\" title=\"asciitable.Daophot\"><tt class=\"xref py py-class docutils literal\"><span class=\"pre\">Daophot</span></tt></a>: table from the IRAF DAOphot package</li><li><a class=\"reference internal\" href=\"#asciitable.FixedWidth\" title=\"asciitable.FixedWidth\"><tt class=\"xref py py-class docutils literal\"><span class=\"pre\">FixedWidth</span></tt></a>: table with fixed-width columns (see also <a class=\"reference internal\" href=\"fixed_width_gallery.html#fixed-width-gallery\"><em>Fixed-width Gallery</em></a>)</li><li><a class=\"reference internal\" href=\"#asciitable.FixedWidthNoHeader\" title=\"asciitable.FixedWidthNoHeader\"><tt class=\"xref py py-class docutils literal\"><span class=\"pre\">FixedWidthNoHeader</span></tt></a>: table with fixed-width columns and no header</li><li><a class=\"reference internal\" href=\"#asciitable.FixedWidthTwoLine\" title=\"asciitable.FixedWidthTwoLine\"><tt class=\"xref py py-class docutils literal\"><span class=\"pre\">FixedWidthTwoLine</span></tt></a>: table with fixed-width columns and a two-line header</li><li><a class=\"reference internal\" href=\"#asciitable.Ipac\" title=\"asciitable.Ipac\"><tt class=\"xref py py-class docutils literal\"><span class=\"pre\">Ipac</span></tt></a>: <a class=\"reference external\" href=\"http://irsa.ipac.caltech.edu/applications/DDGEN/Doc/ipac_tbl.html\">IPAC format table</a></li><li><a class=\"reference internal\" href=\"#asciitable.Latex\" title=\"asciitable.Latex\"><tt class=\"xref py py-class docutils literal\"><span class=\"pre\">Latex</span></tt></a>: LaTeX table with datavalue in the <cite>tabular</cite> environment</li><li><a class=\"reference internal\" href=\"#asciitable.NoHeader\" title=\"asciitable.NoHeader\"><tt class=\"xref py py-class docutils literal\"><span class=\"pre\">NoHeader</span></tt></a>: basic table with no header where columns are auto-named</li><li><a class=\"reference internal\" href=\"#asciitable.Rdb\" title=\"asciitable.Rdb\"><tt class=\"xref py py-class docutils literal\"><span class=\"pre\">Rdb</span></tt></a>: tab-separated values with an extra line after the column definition line</li><li><a class=\"reference internal\" href=\"#asciitable.Tab\" title=\"asciitable.Tab\"><tt class=\"xref py py-class docutils literal\"><span class=\"pre\">Tab</span></tt></a>: tab-separated values</li></ul><dl class=\"class\"><dt id=\"asciitable.AASTex\"><em class=\"property\">class </em><tt class=\"descclassname\">asciitable.</tt><tt class=\"descname\">AASTex</tt><big>(</big><em>**kwargs</em><big>)</big><a class=\"headerlink\" href=\"#asciitable.AASTex\" title=\"Permalink to this definition\">\u00b6</a></dt><dd><p>Bases: <tt class=\"xref py py-class docutils literal\"><span class=\"pre\">asciitable.latex.Latex</span></tt></p><p>Write and read AASTeX tables.</p><p>This class implements some AASTeX specific commands.AASTeX is used for the AAS (American Astronomical Society)publications like ApJ, ApJL and AJ.</p><p>It derives from <a class=\"reference internal\" href=\"#asciitable.Latex\" title=\"asciitable.Latex\"><tt class=\"xref py py-class docutils literal\"><span class=\"pre\">Latex</span></tt></a> and accepts the same keywords (see <a class=\"reference internal\" href=\"#asciitable.Latex\" title=\"asciitable.Latex\"><tt class=\"xref py py-class docutils literal\"><span class=\"pre\">Latex</span></tt></a> for documentation).However, the keywords <tt class=\"docutils literal\"><span class=\"pre\">header_start</span></tt>, <tt class=\"docutils literal\"><span class=\"pre\">header_end</span></tt>, <tt class=\"docutils literal\"><span class=\"pre\">data_start</span></tt> and <tt class=\"docutils literal\"><span class=\"pre\">data_end</span></tt> in <tt class=\"docutils literal\"><span class=\"pre\">latexdict</span></tt> have no effect.</p></dd></dl><dl class=\"class\"><dt id=\"asciitable.Basic\"><em class=\"property\">class </em><tt class=\"descclassname\">asciitable.</tt><tt class=\"descname\">Basic</tt><a class=\"headerlink\" href=\"#asciitable.Basic\" title=\"Permalink to this definition\">\u00b6</a></dt><dd><p>Bases: <tt class=\"xref py py-class docutils literal\"><span class=\"pre\">asciitable.core.BaseReader</span></tt></p><p>Read a character-delimited table with a single header line at the topfollowed by data lines to the end of the table.  Lines beginning with # asthe first non-whitespace character are comments.  This reader is highlyconfigurable.</p><div class=\"highlight-python\"><div class=\"highlight\"><pre><span class=\"n\">rdr</span> <span class=\"o\">=</span> <span class=\"n\">asciitable</span><span class=\"o\">.</span><span class=\"n\">get_reader</span><span class=\"p\">(</span><span class=\"n\">Reader</span><span class=\"o\">=</span><span class=\"n\">asciitable</span><span class=\"o\">.</span><span class=\"n\">Basic</span><span class=\"p\">)</span><span class=\"n\">rdr</span><span class=\"o\">.</span><span class=\"n\">header</span><span class=\"o\">.</span><span class=\"n\">splitter</span><span class=\"o\">.</span><span class=\"n\">delimiter</span> <span class=\"o\">=</span> <span class=\"s\">&#39; &#39;</span><span class=\"n\">rdr</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">splitter</span><span class=\"o\">.</span><span class=\"n\">delimiter</span> <span class=\"o\">=</span> <span class=\"s\">&#39; &#39;</span><span class=\"n\">rdr</span><span class=\"o\">.</span><span class=\"n\">header</span><span class=\"o\">.</span><span class=\"n\">start_line</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"n\">rdr</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">start_line</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"n\">rdr</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">end_line</span> <span class=\"o\">=</span> <span class=\"bp\">None</span><span class=\"n\">rdr</span><span class=\"o\">.</span><span class=\"n\">header</span><span class=\"o\">.</span><span class=\"n\">comment</span> <span class=\"o\">=</span> <span class=\"s\">r&#39;\\s*#&#39;</span><span class=\"n\">rdr</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">comment</span> <span class=\"o\">=</span> <span class=\"s\">r&#39;\\s*#&#39;</span></pre></div></div><p>Example table:</p><div class=\"highlight-python\"><pre># Column definition is the first uncommented line# Default delimiter is the space character.apples oranges pears# Data starts after the header column definition, blank lines ignored1 2 34 5 6</pre></div></dd></dl><dl class=\"class\"><dt id=\"asciitable.Cds\"><em class=\"property\">class </em><tt class=\"descclassname\">asciitable.</tt><tt class=\"descname\">Cds</tt><big>(</big><em>readme=None</em><big>)</big><a class=\"headerlink\" href=\"#asciitable.Cds\" title=\"Permalink to this definition\">\u00b6</a></dt><dd><p>Bases: <tt class=\"xref py py-class docutils literal\"><span class=\"pre\">asciitable.core.BaseReader</span></tt></p><p>Read a CDS format table: <a class=\"reference external\" href=\"http://vizier.u-strasbg.fr/doc/catstd.htx\">http://vizier.u-strasbg.fr/doc/catstd.htx</a>.Example:</p><div class=\"highlight-python\"><pre>Table: Spitzer-identified YSOs: Addendum================================================================================Byte-by-byte Description of file: datafile3.txt--------------------------------------------------------------------------------   Bytes Format Units  Label  Explanations--------------------------------------------------------------------------------   1-  3 I3     ---    Index  Running identification number   5-  6 I2     h      RAh    Hour of Right Ascension (J2000)    8-  9 I2     min    RAm    Minute of Right Ascension (J2000)   11- 15 F5.2   s      RAs    Second of Right Ascension (J2000) --------------------------------------------------------------------------------  1 03 28 39.09</pre></div><p><strong>Basic usage</strong></p><p>Use the <tt class=\"docutils literal\"><span class=\"pre\">asciitable.read()</span></tt> function as normal, with an optional <tt class=\"docutils literal\"><span class=\"pre\">readme</span></tt>parameter indicating the CDS ReadMe file.  If not supplied it is assumed thatthe header information is at the top of the given table.  Examples:</p><div class=\"highlight-python\"><div class=\"highlight\"><pre><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">asciitable</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">table</span> <span class=\"o\">=</span> <span class=\"n\">asciitable</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">(</span><span class=\"s\">&quot;t/cds.dat&quot;</span><span class=\"p\">)</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">table</span> <span class=\"o\">=</span> <span class=\"n\">asciitable</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">(</span><span class=\"s\">&quot;t/vizier/table1.dat&quot;</span><span class=\"p\">,</span> <span class=\"n\">readme</span><span class=\"o\">=</span><span class=\"s\">&quot;t/vizier/ReadMe&quot;</span><span class=\"p\">)</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">table</span> <span class=\"o\">=</span> <span class=\"n\">asciitable</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">(</span><span class=\"s\">&quot;t/cds/multi/lhs2065.dat&quot;</span><span class=\"p\">,</span> <span class=\"n\">readme</span><span class=\"o\">=</span><span class=\"s\">&quot;t/cds/multi/ReadMe&quot;</span><span class=\"p\">)</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">table</span> <span class=\"o\">=</span> <span class=\"n\">asciitable</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">(</span><span class=\"s\">&quot;t/cds/glob/lmxbrefs.dat&quot;</span><span class=\"p\">,</span> <span class=\"n\">readme</span><span class=\"o\">=</span><span class=\"s\">&quot;t/cds/glob/ReadMe&quot;</span><span class=\"p\">)</span></pre></div></div><p><strong>Using a reader object</strong></p><p>When <tt class=\"docutils literal\"><span class=\"pre\">Cds</span></tt> reader object is created with a <tt class=\"docutils literal\"><span class=\"pre\">readme</span></tt> parameterpassed to it at initialization, then when the <tt class=\"docutils literal\"><span class=\"pre\">read</span></tt> method isexecuted with a table filename, the header information for thespecified table is taken from the <tt class=\"docutils literal\"><span class=\"pre\">readme</span></tt> file.  An<tt class=\"docutils literal\"><span class=\"pre\">InconsistentTableError</span></tt> is raised if the <tt class=\"docutils literal\"><span class=\"pre\">readme</span></tt> file does nothave header information for the given table.</p><div class=\"highlight-python\"><div class=\"highlight\"><pre><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">readme</span> <span class=\"o\">=</span> <span class=\"s\">&quot;t/vizier/ReadMe&quot;</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">asciitable</span><span class=\"o\">.</span><span class=\"n\">get_reader</span><span class=\"p\">(</span><span class=\"n\">asciitable</span><span class=\"o\">.</span><span class=\"n\">Cds</span><span class=\"p\">,</span> <span class=\"n\">readme</span><span class=\"o\">=</span><span class=\"n\">readme</span><span class=\"p\">)</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">table</span> <span class=\"o\">=</span> <span class=\"n\">r</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">(</span><span class=\"s\">&quot;t/vizier/table1.dat&quot;</span><span class=\"p\">)</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c\"># table5.dat has the same ReadMe file</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">table</span> <span class=\"o\">=</span> <span class=\"n\">r</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">(</span><span class=\"s\">&quot;t/vizier/table5.dat&quot;</span><span class=\"p\">)</span></pre></div></div><p>If no <tt class=\"docutils literal\"><span class=\"pre\">readme</span></tt> parameter is specified, then the headerinformation is assumed to be at the top of the given table.</p><div class=\"highlight-python\"><div class=\"highlight\"><pre><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">asciitable</span><span class=\"o\">.</span><span class=\"n\">get_reader</span><span class=\"p\">(</span><span class=\"n\">asciitable</span><span class=\"o\">.</span><span class=\"n\">Cds</span><span class=\"p\">)</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">table</span> <span class=\"o\">=</span> <span class=\"n\">r</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">(</span><span class=\"s\">&quot;t/cds.dat&quot;</span><span class=\"p\">)</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c\">#The following gives InconsistentTableError, since no</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c\">#readme file was given and table1.dat does not have a header.</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">table</span> <span class=\"o\">=</span> <span class=\"n\">r</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">(</span><span class=\"s\">&quot;t/vizier/table1.dat&quot;</span><span class=\"p\">)</span><span class=\"gt\">Traceback (most recent call last):</span>  <span class=\"c\">...</span><span class=\"gr\">InconsistentTableError</span>: <span class=\"n\">No CDS section delimiter found</span></pre></div></div><p>Caveats:</p><ul class=\"simple\"><li>Format, Units, and Explanations are available in the <tt class=\"docutils literal\"><span class=\"pre\">Reader.cols</span></tt> attribute.</li><li>All of the other metadata defined by this format is ignored.</li></ul><p>Code contribution to enhance the parsing to include metadata in a Reader.metaattribute would be welcome.</p><dl class=\"method\"><dt id=\"asciitable.Cds.write\"><tt class=\"descname\">write</tt><big>(</big><em>table=None</em><big>)</big><a class=\"headerlink\" href=\"#asciitable.Cds.write\" title=\"Permalink to this definition\">\u00b6</a></dt><dd><p>Not available for the Cds class (raises NotImplementedError)</p></dd></dl></dd></dl><dl class=\"class\"><dt id=\"asciitable.CommentedHeader\"><em class=\"property\">class </em><tt class=\"descclassname\">asciitable.</tt><tt class=\"descname\">CommentedHeader</tt><a class=\"headerlink\" href=\"#asciitable.CommentedHeader\" title=\"Permalink to this definition\">\u00b6</a></dt><dd><p>Bases: <tt class=\"xref py py-class docutils literal\"><span class=\"pre\">asciitable.core.BaseReader</span></tt></p><p>Read a file where the column names are given in a line that begins with theheader comment character.  The default delimiter is the &lt;space&gt; character.:</p><div class=\"highlight-python\"><pre># col1 col2 col3# Comment line1 2 34 5 6</pre></div></dd></dl><dl class=\"class\"><dt id=\"asciitable.Daophot\"><em class=\"property\">class </em><tt class=\"descclassname\">asciitable.</tt><tt class=\"descname\">Daophot</tt><a class=\"headerlink\" href=\"#asciitable.Daophot\" title=\"Permalink to this definition\">\u00b6</a></dt><dd><p>Bases: <tt class=\"xref py py-class docutils literal\"><span class=\"pre\">asciitable.core.BaseReader</span></tt></p><p>Read a DAOphot file.Example:</p><div class=\"highlight-python\"><pre>#K MERGERAD   = INDEF                   scaleunit  %-23.7g  #K IRAF = NOAO/IRAFV2.10EXPORT version %-23s#K USER = davis name %-23s#K HOST = tucana computer %-23s##N ID    XCENTER   YCENTER   MAG         MERR          MSKY           NITER    \\#U ##    pixels    pixels    magnitudes  magnitudes    counts         ##       \\#F %-9d  %-10.3f   %-10.3f   %-12.3f     %-14.3f       %-15.7g        %-6d     ##N         SHARPNESS   CHI         PIER  PERROR                                \\#U         ##          ##          ##    perrors                               \\#F         %-23.3f     %-12.3f     %-6d  %-13s#14       138.538   256.405   15.461      0.003         34.85955       4        \\-0.032      0.802       0     No_error</pre></div><p>The keywords defined in the #K records are available via the Daophot reader object:</p><div class=\"highlight-python\"><div class=\"highlight\"><pre><span class=\"n\">reader</span> <span class=\"o\">=</span> <span class=\"n\">asciitable</span><span class=\"o\">.</span><span class=\"n\">get_reader</span><span class=\"p\">(</span><span class=\"n\">Reader</span><span class=\"o\">=</span><span class=\"n\">asciitable</span><span class=\"o\">.</span><span class=\"n\">DaophotReader</span><span class=\"p\">)</span><span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">reader</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">(</span><span class=\"s\">&#39;t/daophot.dat&#39;</span><span class=\"p\">)</span><span class=\"k\">for</span> <span class=\"n\">keyword</span> <span class=\"ow\">in</span> <span class=\"n\">reader</span><span class=\"o\">.</span><span class=\"n\">keywords</span><span class=\"p\">:</span>    <span class=\"k\">print</span> <span class=\"n\">keyword</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">keyword</span><span class=\"o\">.</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">keyword</span><span class=\"o\">.</span><span class=\"n\">units</span><span class=\"p\">,</span> <span class=\"n\">keyword</span><span class=\"o\">.</span><span class=\"n\">format</span></pre></div></div><dl class=\"method\"><dt id=\"asciitable.Daophot.read\"><tt class=\"descname\">read</tt><big>(</big><em>table</em><big>)</big><a class=\"headerlink\" href=\"#asciitable.Daophot.read\" title=\"Permalink to this definition\">\u00b6</a></dt><dd></dd></dl><dl class=\"method\"><dt id=\"asciitable.Daophot.write\"><tt class=\"descname\">write</tt><big>(</big><em>table=None</em><big>)</big><a class=\"headerlink\" href=\"#asciitable.Daophot.write\" title=\"Permalink to this definition\">\u00b6</a></dt><dd></dd></dl></dd></dl><dl class=\"class\"><dt id=\"asciitable.FixedWidth\"><em class=\"property\">class </em><tt class=\"descclassname\">asciitable.</tt><tt class=\"descname\">FixedWidth</tt><big>(</big><em>col_starts=None</em>, <em>col_ends=None</em>, <em>delimiter_pad=' '</em>, <em>bookend=True</em><big>)</big><a class=\"headerlink\" href=\"#asciitable.FixedWidth\" title=\"Permalink to this definition\">\u00b6</a></dt><dd><p>Bases: <tt class=\"xref py py-class docutils literal\"><span class=\"pre\">asciitable.core.BaseReader</span></tt></p><p>Read or write a fixed width table with a single header line that defines columnnames and positions.  Examples:</p><div class=\"highlight-python\"><pre># Bar delimiter in header and data|  Col1 |   Col2      |  Col3 ||  1.2  | hello there |     3 ||  2.4  | many words  |     7 |# Bar delimiter in header onlyCol1 |   Col2      | Col3 1.2    hello there    3 2.4    many words     7 # No delimiter with column positions specified as inputCol1       Col2Col3  1.2hello there   3  2.4many words    7 </pre></div><p>See the <a class=\"reference internal\" href=\"fixed_width_gallery.html#fixed-width-gallery\"><em>Fixed-width Gallery</em></a> for specific usage examples.</p><table class=\"docutils field-list\" frame=\"void\" rules=\"none\"><col class=\"field-name\" /><col class=\"field-body\" /><tbody valign=\"top\"><tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><ul class=\"first last simple\"><li><strong>col_starts</strong> &#8211; list of start positions for each column (0-based counting)</li><li><strong>col_ends</strong> &#8211; list of end positions (inclusive) for each column</li><li><strong>delimiter_pad</strong> &#8211; padding around delimiter when writing (default = None)</li><li><strong>bookend</strong> &#8211; put the delimiter at start and end of line when writing (default = False)</li></ul></td></tr></tbody></table></dd></dl><dl class=\"class\"><dt id=\"asciitable.FixedWidthNoHeader\"><em class=\"property\">class </em><tt class=\"descclassname\">asciitable.</tt><tt class=\"descname\">FixedWidthNoHeader</tt><big>(</big><em>col_starts=None</em>, <em>col_ends=None</em>, <em>delimiter_pad=' '</em>, <em>bookend=True</em><big>)</big><a class=\"headerlink\" href=\"#asciitable.FixedWidthNoHeader\" title=\"Permalink to this definition\">\u00b6</a></dt><dd><p>Bases: <tt class=\"xref py py-class docutils literal\"><span class=\"pre\">asciitable.fixedwidth.FixedWidth</span></tt></p><p>Read or write a fixed width table which has no header line.  Columnnames are either input (<tt class=\"docutils literal\"><span class=\"pre\">names</span></tt> keyword) or auto-generated.  Columnpositions are determined either by input (<tt class=\"docutils literal\"><span class=\"pre\">col_starts</span></tt> and <tt class=\"docutils literal\"><span class=\"pre\">col_stops</span></tt>keywords) or by splitting the first data line.  In the latter case a<tt class=\"docutils literal\"><span class=\"pre\">delimiter</span></tt> is required to split the data line.</p><p>Examples:</p><div class=\"highlight-python\"><pre># Bar delimiter in header and data|  1.2  | hello there |     3 ||  2.4  | many words  |     7 |# Compact table having no delimiter and column positions specified as input1.2hello there3 2.4many words 7 </pre></div><p>This class is just a convenience wrapper around <a class=\"reference internal\" href=\"#asciitable.FixedWidth\" title=\"asciitable.FixedWidth\"><tt class=\"xref py py-class docutils literal\"><span class=\"pre\">FixedWidth</span></tt></a>but with <tt class=\"docutils literal\"><span class=\"pre\">header.start_line</span> <span class=\"pre\">=</span> <span class=\"pre\">None</span></tt> and <tt class=\"docutils literal\"><span class=\"pre\">data.start_line</span> <span class=\"pre\">=</span> <span class=\"pre\">0</span></tt>.</p><p>See the <a class=\"reference internal\" href=\"fixed_width_gallery.html#fixed-width-gallery\"><em>Fixed-width Gallery</em></a> for specific usage examples.</p><table class=\"docutils field-list\" frame=\"void\" rules=\"none\"><col class=\"field-name\" /><col class=\"field-body\" /><tbody valign=\"top\"><tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><ul class=\"first last simple\"><li><strong>col_starts</strong> &#8211; list of start positions for each column (0-based counting)</li><li><strong>col_ends</strong> &#8211; list of end positions (inclusive) for each column</li><li><strong>delimiter_pad</strong> &#8211; padding around delimiter when writing (default = None)</li><li><strong>bookend</strong> &#8211; put the delimiter at start and end of line when writing (default = False)</li></ul></td></tr></tbody></table></dd></dl><dl class=\"class\"><dt id=\"asciitable.FixedWidthTwoLine\"><em class=\"property\">class </em><tt class=\"descclassname\">asciitable.</tt><tt class=\"descname\">FixedWidthTwoLine</tt><big>(</big><em>position_line=1</em>, <em>position_char='-'</em>, <em>delimiter_pad=None</em>, <em>bookend=False</em><big>)</big><a class=\"headerlink\" href=\"#asciitable.FixedWidthTwoLine\" title=\"Permalink to this definition\">\u00b6</a></dt><dd><p>Bases: <tt class=\"xref py py-class docutils literal\"><span class=\"pre\">asciitable.fixedwidth.FixedWidth</span></tt></p><p>Read or write a fixed width table which has two header lines.  The firstheader line defines the column names and the second implicitly defines thecolumn positions.  Examples:</p><div class=\"highlight-python\"><pre># Typical case with column extent defined by ---- under column names. col1    col2         &lt;== header_start = 0-----  ------------   &lt;== position_line = 1, position_char = \"-\"  1     bee flies     &lt;== data_start = 2  2     fish swims# Pretty-printed table +------+------------+| Col1 |   Col2     |+------+------------+|  1.2 | \"hello\"    ||  2.4 | there world|+------+------------+</pre></div><p>See the <a class=\"reference internal\" href=\"fixed_width_gallery.html#fixed-width-gallery\"><em>Fixed-width Gallery</em></a> for specific usage examples.</p><table class=\"docutils field-list\" frame=\"void\" rules=\"none\"><col class=\"field-name\" /><col class=\"field-body\" /><tbody valign=\"top\"><tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><ul class=\"first last simple\"><li><strong>position_line</strong> &#8211; row index of line that specifies position (default = 1)</li><li><strong>position_char</strong> &#8211; character used to write the position line (default = &#8220;-&#8221;)</li><li><strong>delimiter_pad</strong> &#8211; padding around delimiter when writing (default = None)</li><li><strong>bookend</strong> &#8211; put the delimiter at start and end of line when writing (default = False)</li></ul></td></tr></tbody></table></dd></dl><dl class=\"class\"><dt id=\"asciitable.Ipac\"><em class=\"property\">class </em><tt class=\"descclassname\">asciitable.</tt><tt class=\"descname\">Ipac</tt><a class=\"headerlink\" href=\"#asciitable.Ipac\" title=\"Permalink to this definition\">\u00b6</a></dt><dd><p>Bases: <tt class=\"xref py py-class docutils literal\"><span class=\"pre\">asciitable.core.BaseReader</span></tt></p><p>Read an IPAC format table:<a class=\"reference external\" href=\"http://irsa.ipac.caltech.edu/applications/DDGEN/Doc/ipac_tbl.html\">http://irsa.ipac.caltech.edu/applications/DDGEN/Doc/ipac_tbl.html</a>:</p><div class=\"highlight-python\"><pre>\\name=value                                                    \\ Comment                                                      |  column1 |  column2 | column3 | column4  |    column5       ||  double  |  double  |   int   |   double |     char         ||   unit   |   unit   |   unit  |    unit  |     unit         ||   null   |   null   |   null  |    null  |     null         | 2.0978     29.09056   73765     2.06000    B8IVpMnHg          </pre></div><p>Or:</p><div class=\"highlight-python\"><pre>|-----ra---|----dec---|---sao---|------v---|----sptype--------|  2.09708   29.09056     73765    2.06000   B8IVpMnHg</pre></div><p>Caveats:</p><ul class=\"simple\"><li>Data type, Units, and Null value specifications are ignored.</li><li>Keywords are ignored.</li><li>The IPAC spec requires the first two header lines but this reader only requires the initial column name definition line</li></ul><p>Overcoming these limitations would not be difficult, code contributionswelcome from motivated users.</p><dl class=\"method\"><dt id=\"asciitable.Ipac.write\"><tt class=\"descname\">write</tt><big>(</big><em>table=None</em><big>)</big><a class=\"headerlink\" href=\"#asciitable.Ipac.write\" title=\"Permalink to this definition\">\u00b6</a></dt><dd><p>Not available for the Ipac class (raises NotImplementedError)</p></dd></dl></dd></dl><dl class=\"class\"><dt id=\"asciitable.Latex\"><em class=\"property\">class </em><tt class=\"descclassname\">asciitable.</tt><tt class=\"descname\">Latex</tt><big>(</big><em>ignore_latex_commands=['hline', 'vspace', 'tableline'], latexdict={}, caption='', col_align=None</em><big>)</big><a class=\"headerlink\" href=\"#asciitable.Latex\" title=\"Permalink to this definition\">\u00b6</a></dt><dd><p>Bases: <tt class=\"xref py py-class docutils literal\"><span class=\"pre\">asciitable.core.BaseReader</span></tt></p><p>Write and read LaTeX tables.</p><p>This class implements some LaTeX specific commands.Its main purpose is to write out a table in a form that LaTeXcan compile. It is beyond the scope of this class to implement every possible LaTeX command, instead the focus is to generate a syntactically valid LaTeXtables.This class can also read simple LaTeX tables (one line per table row,no <tt class=\"docutils literal\"><span class=\"pre\">\\multicolumn</span></tt> or similar constructs), specifically, it can read the tables that it writes.</p><p>Reading a LaTeX table, the following keywords are accepted:</p><dl class=\"docutils\"><dt><strong>ignore_latex_commands</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\"></span></dt><dd>Lines starting with these LaTeX commands will be treated as comments (i.e. ignored).</dd></dl><p>When writing a LaTeX table, the some keywords can customize the format.Care has to be taken here, because python interprets <tt class=\"docutils literal\"><span class=\"pre\">\\</span></tt> in a string as an escape character.In order to pass this to the output either format your strings as raw strings with the <tt class=\"docutils literal\"><span class=\"pre\">r</span></tt> specifieror use a double <tt class=\"docutils literal\"><span class=\"pre\">\\\\</span></tt>.Examples:</p><div class=\"highlight-python\"><div class=\"highlight\"><pre><span class=\"n\">caption</span> <span class=\"o\">=</span> <span class=\"s\">r&#39;My table \\label{mytable}&#39;</span><span class=\"n\">caption</span> <span class=\"o\">=</span> <span class=\"s\">&#39;My table </span><span class=\"se\">\\\\</span><span class=\"s\">label{mytable}&#39;</span></pre></div></div><dl class=\"docutils\"><dt><strong>latexdict</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">Dictionary of extra parameters for the LaTeX output</span></dt><dd><ul class=\"first\"><li><dl class=\"first docutils\"><dt>tabletype <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">used for first and last line of table. </span></dt><dd><p class=\"first\">The default is <tt class=\"docutils literal\"><span class=\"pre\">\\begin{table}</span></tt>.The following would generate a table, which spans the whole page in a two-column document:</p><div class=\"last highlight-python\"><div class=\"highlight\"><pre><span class=\"n\">asciitable</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">stdout</span><span class=\"p\">,</span> <span class=\"n\">Writer</span> <span class=\"o\">=</span> <span class=\"n\">asciitable</span><span class=\"o\">.</span><span class=\"n\">Latex</span><span class=\"p\">,</span>             <span class=\"n\">latexdict</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s\">&#39;tabletype&#39;</span><span class=\"p\">:</span> <span class=\"s\">&#39;table*&#39;</span><span class=\"p\">})</span></pre></div></div></dd></dl></li><li><dl class=\"first docutils\"><dt>col_align <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">Alignment of columns</span></dt><dd><p class=\"first last\">If not present all columns will be centered.</p></dd></dl></li><li><dl class=\"first docutils\"><dt>caption <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">Table caption (string or list of strings)</span></dt><dd><p class=\"first last\">This will appear above the table as it is the standard in many scientific publications.If you prefer a caption below the table, just write the full LaTeX command as<tt class=\"docutils literal\"><span class=\"pre\">latexdict['tablefoot']</span> <span class=\"pre\">=</span> <span class=\"pre\">r'\\caption{My</span> <span class=\"pre\">table}'</span></tt></p></dd></dl></li><li><dl class=\"first docutils\"><dt>preamble, header_start, header_end, data_start, data_end, tablefoot: Pure LaTeX</dt><dd><p class=\"first last\">Each one can be a string or a list of strings. These strings will be inserted into the tablewithout any further processing. See the examples below.</p></dd></dl></li><li><dl class=\"first docutils\"><dt>units <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">dictionary of strings</span></dt><dd><p class=\"first\">Keys in this dictionary should be names of columns. If present,a line in the LaTeX table directly below the column names is added, which contains the values of the dictionary. Example:</p><p>import asciitableimport asciitable.lateximport sysdata = {&#8216;name&#8217;: [&#8216;bike&#8217;, &#8216;car&#8217;], &#8216;mass&#8217;: [75,1200], &#8216;speed&#8217;: [10, 130]}asciitable.write(data, sys.stdout, Writer = asciitable.Latex,</p><blockquote><div><p>latexdict = {&#8216;units&#8217;: {&#8216;mass&#8217;: &#8216;kg&#8217;, &#8216;speed&#8217;: &#8216;km/h&#8217;}})</p></div></blockquote><p class=\"last\">If the column has no entry in the <cite>units</cite> dictionary, it defaultsto <cite>&#8216; &#8216;</cite>.</p></dd></dl></li></ul><p>Run the following code to see where each element of the dictionary is inserted in theLaTeX table:</p><div class=\"highlight-python\"><div class=\"highlight\"><pre><span class=\"kn\">import</span> <span class=\"nn\">asciitable</span><span class=\"kn\">import</span> <span class=\"nn\">asciitable.latex</span><span class=\"kn\">import</span> <span class=\"nn\">sys</span><span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s\">&#39;cola&#39;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"s\">&#39;colb&#39;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">]}</span><span class=\"n\">asciitable</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">stdout</span><span class=\"p\">,</span> <span class=\"n\">Writer</span> <span class=\"o\">=</span> <span class=\"n\">asciitable</span><span class=\"o\">.</span><span class=\"n\">Latex</span><span class=\"p\">,</span>                 <span class=\"n\">latexdict</span> <span class=\"o\">=</span> <span class=\"n\">asciitable</span><span class=\"o\">.</span><span class=\"n\">latex</span><span class=\"o\">.</span><span class=\"n\">latexdicts</span><span class=\"p\">[</span><span class=\"s\">&#39;template&#39;</span><span class=\"p\">])</span></pre></div></div><p>Some table styles are predefined in the dictionary <tt class=\"docutils literal\"><span class=\"pre\">asciitable.latex.latexdicts</span></tt>. The following generatesin table in style preferred by A&amp;A and some other journals:</p><div class=\"highlight-python\"><div class=\"highlight\"><pre><span class=\"n\">asciitable</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">stdout</span><span class=\"p\">,</span> <span class=\"n\">Writer</span> <span class=\"o\">=</span> <span class=\"n\">asciitable</span><span class=\"o\">.</span><span class=\"n\">Latex</span><span class=\"p\">,</span>                 <span class=\"n\">latexdict</span> <span class=\"o\">=</span> <span class=\"n\">asciitable</span><span class=\"o\">.</span><span class=\"n\">latex</span><span class=\"o\">.</span><span class=\"n\">latexdicts</span><span class=\"p\">[</span><span class=\"s\">&#39;AA&#39;</span><span class=\"p\">])</span></pre></div></div><p>As an example, this generates a table, which spans all columns and is centered on the page:</p><div class=\"last highlight-python\"><div class=\"highlight\"><pre><span class=\"n\">asciitable</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">stdout</span><span class=\"p\">,</span> <span class=\"n\">Writer</span> <span class=\"o\">=</span> <span class=\"n\">asciitable</span><span class=\"o\">.</span><span class=\"n\">Latex</span><span class=\"p\">,</span>                 <span class=\"n\">col_align</span> <span class=\"o\">=</span> <span class=\"s\">&#39;|lr|&#39;</span><span class=\"p\">,</span>                 <span class=\"n\">latexdict</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s\">&#39;preamble&#39;</span><span class=\"p\">:</span> <span class=\"s\">r&#39;\begin{center}&#39;</span><span class=\"p\">,</span> <span class=\"s\">&#39;tablefoot&#39;</span><span class=\"p\">:</span> <span class=\"s\">r&#39;\\end{center}&#39;</span><span class=\"p\">,</span>                              <span class=\"s\">&#39;tabletype&#39;</span><span class=\"p\">:</span> <span class=\"s\">&#39;table*&#39;</span><span class=\"p\">})</span></pre></div></div></dd><dt><strong>caption</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">Set table caption </span></dt><dd><p class=\"first\">Shorthand for:</p><div class=\"last highlight-python\"><div class=\"highlight\"><pre><span class=\"n\">latexdict</span><span class=\"p\">[</span><span class=\"s\">&#39;caption&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">caption</span></pre></div></div></dd><dt><strong>col_align</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">Set the column alignment. </span></dt><dd><p class=\"first\">If not present this will be auto-generated for centered columns. Shorthand for:</p><div class=\"last highlight-python\"><div class=\"highlight\"><pre><span class=\"n\">latexdict</span><span class=\"p\">[</span><span class=\"s\">&#39;col_align&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">col_align</span></pre></div></div></dd></dl><dl class=\"method\"><dt id=\"asciitable.Latex.write\"><tt class=\"descname\">write</tt><big>(</big><em>table=None</em><big>)</big><a class=\"headerlink\" href=\"#asciitable.Latex.write\" title=\"Permalink to this definition\">\u00b6</a></dt><dd></dd></dl></dd></dl><dl class=\"class\"><dt id=\"asciitable.Memory\"><em class=\"property\">class </em><tt class=\"descclassname\">asciitable.</tt><tt class=\"descname\">Memory</tt><a class=\"headerlink\" href=\"#asciitable.Memory\" title=\"Permalink to this definition\">\u00b6</a></dt><dd><p>Bases: <tt class=\"xref py py-class docutils literal\"><span class=\"pre\">asciitable.core.BaseReader</span></tt></p><p>Read a table from a data object in memory.  Several input data formats are supported:</p><p><strong>Output of asciitable.read()</strong>:</p><div class=\"highlight-python\"><div class=\"highlight\"><pre><span class=\"n\">table</span> <span class=\"o\">=</span> <span class=\"n\">asciitable</span><span class=\"o\">.</span><span class=\"n\">get_reader</span><span class=\"p\">(</span><span class=\"n\">Reader</span><span class=\"o\">=</span><span class=\"n\">asciitable</span><span class=\"o\">.</span><span class=\"n\">Daophot</span><span class=\"p\">)</span><span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">table</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">(</span><span class=\"s\">&#39;t/daophot.dat&#39;</span><span class=\"p\">)</span><span class=\"n\">mem_data_from_table</span> <span class=\"o\">=</span> <span class=\"n\">asciitable</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">(</span><span class=\"n\">table</span><span class=\"p\">,</span> <span class=\"n\">Reader</span><span class=\"o\">=</span><span class=\"n\">asciitable</span><span class=\"o\">.</span><span class=\"n\">Memory</span><span class=\"p\">)</span><span class=\"n\">mem_data_from_data</span> <span class=\"o\">=</span> <span class=\"n\">asciitable</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">Reader</span><span class=\"o\">=</span><span class=\"n\">asciitable</span><span class=\"o\">.</span><span class=\"n\">Memory</span><span class=\"p\">)</span></pre></div></div><p><strong>Numpy structured array</strong>:</p><div class=\"highlight-python\"><div class=\"highlight\"><pre><span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">zeros</span><span class=\"p\">((</span><span class=\"mi\">2</span><span class=\"p\">,),</span> <span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"p\">[(</span><span class=\"s\">&#39;col1&#39;</span><span class=\"p\">,</span><span class=\"s\">&#39;i4&#39;</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s\">&#39;col2&#39;</span><span class=\"p\">,</span><span class=\"s\">&#39;f4&#39;</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s\">&#39;col3&#39;</span><span class=\"p\">,</span> <span class=\"s\">&#39;a10&#39;</span><span class=\"p\">)])</span><span class=\"n\">data</span><span class=\"p\">[:]</span> <span class=\"o\">=</span> <span class=\"p\">[(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mf\">2.</span><span class=\"p\">,</span> <span class=\"s\">&#39;Hello&#39;</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mf\">3.</span><span class=\"p\">,</span> <span class=\"s\">&quot;World&quot;</span><span class=\"p\">)]</span><span class=\"n\">mem_data</span> <span class=\"o\">=</span> <span class=\"n\">asciitable</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">Reader</span><span class=\"o\">=</span><span class=\"n\">asciitable</span><span class=\"o\">.</span><span class=\"n\">Memory</span><span class=\"p\">)</span></pre></div></div><p><strong>Numpy masked structured array</strong>:</p><div class=\"highlight-python\"><pre>data = numpy.ma.zeros((2,), dtype=[('col1','i4'), ('col2','f4'), ('col3', 'a10')])data[:] = [(1, 2., 'Hello'), (2, 3., \"World\")]data['col2'] = ma.maskedmem_data = asciitable.read(data, Reader=asciitable.Memory)In the current version all masked values will be converted to nan.</pre></div><p><strong>Sequence of sequences</strong>:</p><div class=\"highlight-python\"><div class=\"highlight\"><pre><span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"p\">[[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span>   <span class=\"mi\">3</span>      <span class=\"p\">],</span>        <span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mf\">5.2</span><span class=\"p\">,</span> <span class=\"mf\">6.1</span>    <span class=\"p\">],</span>        <span class=\"p\">[</span><span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">,</span>   <span class=\"s\">&#39;hello&#39;</span><span class=\"p\">]]</span><span class=\"n\">mem_data</span> <span class=\"o\">=</span> <span class=\"n\">asciitable</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">Reader</span><span class=\"o\">=</span><span class=\"n\">asciitable</span><span class=\"o\">.</span><span class=\"n\">Memory</span><span class=\"p\">,</span> <span class=\"n\">names</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s\">&#39;c1&#39;</span><span class=\"p\">,</span><span class=\"s\">&#39;c2&#39;</span><span class=\"p\">,</span><span class=\"s\">&#39;c3&#39;</span><span class=\"p\">))</span></pre></div></div><p><strong>Dict of sequences</strong>:</p><div class=\"highlight-python\"><div class=\"highlight\"><pre><span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s\">&#39;c1&#39;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">],</span>        <span class=\"s\">&#39;c2&#39;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mf\">5.2</span><span class=\"p\">,</span> <span class=\"mf\">6.1</span><span class=\"p\">],</span>        <span class=\"s\">&#39;c3&#39;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">,</span> <span class=\"s\">&#39;hello&#39;</span><span class=\"p\">]}</span><span class=\"n\">mem_data</span> <span class=\"o\">=</span> <span class=\"n\">asciitable</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">Reader</span><span class=\"o\">=</span><span class=\"n\">asciitable</span><span class=\"o\">.</span><span class=\"n\">Memory</span><span class=\"p\">,</span> <span class=\"n\">names</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s\">&#39;c1&#39;</span><span class=\"p\">,</span><span class=\"s\">&#39;c2&#39;</span><span class=\"p\">,</span><span class=\"s\">&#39;c3&#39;</span><span class=\"p\">))</span></pre></div></div><dl class=\"method\"><dt id=\"asciitable.Memory.read\"><tt class=\"descname\">read</tt><big>(</big><em>table</em><big>)</big><a class=\"headerlink\" href=\"#asciitable.Memory.read\" title=\"Permalink to this definition\">\u00b6</a></dt><dd></dd></dl><dl class=\"method\"><dt id=\"asciitable.Memory.write\"><tt class=\"descname\">write</tt><big>(</big><em>table=None</em><big>)</big><a class=\"headerlink\" href=\"#asciitable.Memory.write\" title=\"Permalink to this definition\">\u00b6</a></dt><dd><p>Not available for the Memory class (raises NotImplementedError)</p></dd></dl></dd></dl><dl class=\"class\"><dt id=\"asciitable.NoHeader\"><em class=\"property\">class </em><tt class=\"descclassname\">asciitable.</tt><tt class=\"descname\">NoHeader</tt><a class=\"headerlink\" href=\"#asciitable.NoHeader\" title=\"Permalink to this definition\">\u00b6</a></dt><dd><p>Bases: <tt class=\"xref py py-class docutils literal\"><span class=\"pre\">asciitable.basic.Basic</span></tt></p><p>Read a table with no header line.  Columns are autonamed usingheader.auto_format which defaults to &#8220;col%d&#8221;.  Otherwise this readerthe same as the <a class=\"reference internal\" href=\"#asciitable.Basic\" title=\"asciitable.Basic\"><tt class=\"xref py py-class docutils literal\"><span class=\"pre\">Basic</span></tt></a> class from which it is derived.  Example:</p><div class=\"highlight-python\"><pre># Table data1 2 \"hello there\"3 4 world</pre></div></dd></dl><dl class=\"class\"><dt id=\"asciitable.Rdb\"><em class=\"property\">class </em><tt class=\"descclassname\">asciitable.</tt><tt class=\"descname\">Rdb</tt><a class=\"headerlink\" href=\"#asciitable.Rdb\" title=\"Permalink to this definition\">\u00b6</a></dt><dd><p>Bases: <tt class=\"xref py py-class docutils literal\"><span class=\"pre\">asciitable.basic.Tab</span></tt></p><p>Read a tab-separated file with an extra line after the column definitionline.  The RDB format meets this definition.  Example:</p><div class=\"highlight-python\"><div class=\"highlight\"><pre><span class=\"n\">col1</span> <span class=\"o\">&lt;</span><span class=\"n\">tab</span><span class=\"o\">&gt;</span> <span class=\"n\">col2</span> <span class=\"o\">&lt;</span><span class=\"n\">tab</span><span class=\"o\">&gt;</span> <span class=\"n\">col3</span><span class=\"n\">N</span> <span class=\"o\">&lt;</span><span class=\"n\">tab</span><span class=\"o\">&gt;</span> <span class=\"n\">S</span> <span class=\"o\">&lt;</span><span class=\"n\">tab</span><span class=\"o\">&gt;</span> <span class=\"n\">N</span><span class=\"mi\">1</span> <span class=\"o\">&lt;</span><span class=\"n\">tab</span><span class=\"o\">&gt;</span> <span class=\"mi\">2</span> <span class=\"o\">&lt;</span><span class=\"n\">tab</span><span class=\"o\">&gt;</span> <span class=\"mi\">5</span></pre></div></div><p>In this reader the second line is just ignored.</p></dd></dl><dl class=\"class\"><dt id=\"asciitable.Tab\"><em class=\"property\">class </em><tt class=\"descclassname\">asciitable.</tt><tt class=\"descname\">Tab</tt><a class=\"headerlink\" href=\"#asciitable.Tab\" title=\"Permalink to this definition\">\u00b6</a></dt><dd><p>Bases: <tt class=\"xref py py-class docutils literal\"><span class=\"pre\">asciitable.basic.Basic</span></tt></p><p>Read a tab-separated file.  Unlike the <a class=\"reference internal\" href=\"#asciitable.Basic\" title=\"asciitable.Basic\"><tt class=\"xref py py-class docutils literal\"><span class=\"pre\">Basic</span></tt></a> reader, whitespace is not stripped from the beginning and end of lines.  By default whitespace isstill stripped from the beginning and end of individual column values.</p><p>Example:</p><div class=\"highlight-python\"><div class=\"highlight\"><pre><span class=\"n\">col1</span> <span class=\"o\">&lt;</span><span class=\"n\">tab</span><span class=\"o\">&gt;</span> <span class=\"n\">col2</span> <span class=\"o\">&lt;</span><span class=\"n\">tab</span><span class=\"o\">&gt;</span> <span class=\"n\">col3</span><span class=\"c\"># Comment line</span><span class=\"mi\">1</span> <span class=\"o\">&lt;</span><span class=\"n\">tab</span><span class=\"o\">&gt;</span> <span class=\"mi\">2</span> <span class=\"o\">&lt;</span><span class=\"n\">tab</span><span class=\"o\">&gt;</span> <span class=\"mi\">5</span></pre></div></div></dd></dl></div><div class=\"section\" id=\"other-extension-classes\"><h2>Other extension classes<a class=\"headerlink\" href=\"#other-extension-classes\" title=\"Permalink to this headline\">\u00b6</a></h2><p>These classes provide support for extension readers.</p><dl class=\"class\"><dt id=\"asciitable.cds.CdsData\"><em class=\"property\">class </em><tt class=\"descclassname\">asciitable.cds.</tt><tt class=\"descname\">CdsData</tt><a class=\"headerlink\" href=\"#asciitable.cds.CdsData\" title=\"Permalink to this definition\">\u00b6</a></dt><dd><p>Bases: <tt class=\"xref py py-class docutils literal\"><span class=\"pre\">asciitable.core.BaseData</span></tt></p><p>CDS table data reader</p><dl class=\"method\"><dt id=\"asciitable.cds.CdsData.process_lines\"><tt class=\"descname\">process_lines</tt><big>(</big><em>lines</em><big>)</big><a class=\"headerlink\" href=\"#asciitable.cds.CdsData.process_lines\" title=\"Permalink to this definition\">\u00b6</a></dt><dd><p>Skip over CDS header by finding the last section delimiter</p></dd></dl><dl class=\"attribute\"><dt id=\"asciitable.cds.CdsData.splitter_class\"><tt class=\"descname\">splitter_class</tt><a class=\"headerlink\" href=\"#asciitable.cds.CdsData.splitter_class\" title=\"Permalink to this definition\">\u00b6</a></dt><dd><p>alias of <a class=\"reference internal\" href=\"#asciitable.FixedWidthSplitter\" title=\"asciitable.FixedWidthSplitter\"><tt class=\"xref py py-class docutils literal\"><span class=\"pre\">FixedWidthSplitter</span></tt></a></p></dd></dl></dd></dl><dl class=\"class\"><dt id=\"asciitable.cds.CdsHeader\"><em class=\"property\">class </em><tt class=\"descclassname\">asciitable.cds.</tt><tt class=\"descname\">CdsHeader</tt><big>(</big><em>readme=None</em><big>)</big><a class=\"headerlink\" href=\"#asciitable.cds.CdsHeader\" title=\"Permalink to this definition\">\u00b6</a></dt><dd><p>Bases: <tt class=\"xref py py-class docutils literal\"><span class=\"pre\">asciitable.core.BaseHeader</span></tt></p><dl class=\"attribute\"><dt id=\"asciitable.cds.CdsHeader.col_type_map\"><tt class=\"descname\">col_type_map</tt><em class=\"property\"> = {'i': &lt;class 'asciitable.core.IntType'&gt;, 'a': &lt;class 'asciitable.core.StrType'&gt;, 'e': &lt;class 'asciitable.core.FloatType'&gt;, 'f': &lt;class 'asciitable.core.FloatType'&gt;}</em><a class=\"headerlink\" href=\"#asciitable.cds.CdsHeader.col_type_map\" title=\"Permalink to this definition\">\u00b6</a></dt><dd></dd></dl><dl class=\"method\"><dt id=\"asciitable.cds.CdsHeader.get_cols\"><tt class=\"descname\">get_cols</tt><big>(</big><em>lines</em><big>)</big><a class=\"headerlink\" href=\"#asciitable.cds.CdsHeader.get_cols\" title=\"Permalink to this definition\">\u00b6</a></dt><dd><p>Initialize the header Column objects from the table <tt class=\"docutils literal\"><span class=\"pre\">lines</span></tt> for a CDSheader.</p><table class=\"docutils field-list\" frame=\"void\" rules=\"none\"><col class=\"field-name\" /><col class=\"field-body\" /><tbody valign=\"top\"><tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><strong>lines</strong> &#8211; list of table lines</td></tr><tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\">list of table Columns</td></tr></tbody></table></dd></dl><dl class=\"method\"><dt id=\"asciitable.cds.CdsHeader.get_type_map_key\"><tt class=\"descname\">get_type_map_key</tt><big>(</big><em>col</em><big>)</big><a class=\"headerlink\" href=\"#asciitable.cds.CdsHeader.get_type_map_key\" title=\"Permalink to this definition\">\u00b6</a></dt><dd></dd></dl></dd></dl><dl class=\"class\"><dt id=\"asciitable.basic.CommentedHeaderHeader\"><em class=\"property\">class </em><tt class=\"descclassname\">asciitable.basic.</tt><tt class=\"descname\">CommentedHeaderHeader</tt><a class=\"headerlink\" href=\"#asciitable.basic.CommentedHeaderHeader\" title=\"Permalink to this definition\">\u00b6</a></dt><dd><p>Bases: <tt class=\"xref py py-class docutils literal\"><span class=\"pre\">asciitable.core.BaseHeader</span></tt></p><p>Header class for which the column definition line starts with thecomment character.  See the <a class=\"reference internal\" href=\"#asciitable.CommentedHeader\" title=\"asciitable.CommentedHeader\"><tt class=\"xref py py-class docutils literal\"><span class=\"pre\">CommentedHeader</span></tt></a> class  for an example.</p><dl class=\"method\"><dt id=\"asciitable.basic.CommentedHeaderHeader.process_lines\"><tt class=\"descname\">process_lines</tt><big>(</big><em>lines</em><big>)</big><a class=\"headerlink\" href=\"#asciitable.basic.CommentedHeaderHeader.process_lines\" title=\"Permalink to this definition\">\u00b6</a></dt><dd><p>Return only lines that start with the comment regexp.  For theselines strip out the matching characters.</p></dd></dl><dl class=\"method\"><dt id=\"asciitable.basic.CommentedHeaderHeader.write\"><tt class=\"descname\">write</tt><big>(</big><em>lines</em><big>)</big><a class=\"headerlink\" href=\"#asciitable.basic.CommentedHeaderHeader.write\" title=\"Permalink to this definition\">\u00b6</a></dt><dd></dd></dl></dd></dl><dl class=\"class\"><dt id=\"asciitable.ContinuationLinesInputter\"><em class=\"property\">class </em><tt class=\"descclassname\">asciitable.</tt><tt class=\"descname\">ContinuationLinesInputter</tt><a class=\"headerlink\" href=\"#asciitable.ContinuationLinesInputter\" title=\"Permalink to this definition\">\u00b6</a></dt><dd><p>Bases: <tt class=\"xref py py-class docutils literal\"><span class=\"pre\">asciitable.core.BaseInputter</span></tt></p><p>Inputter where lines ending in <tt class=\"docutils literal\"><span class=\"pre\">continuation_char</span></tt> are joinedwith the subsequent line.  Example:</p><div class=\"highlight-python\"><pre>col1 col2 col31       2 34 5       6</pre></div><dl class=\"attribute\"><dt id=\"asciitable.ContinuationLinesInputter.continuation_char\"><tt class=\"descname\">continuation_char</tt><em class=\"property\"> = '\\\\'</em><a class=\"headerlink\" href=\"#asciitable.ContinuationLinesInputter.continuation_char\" title=\"Permalink to this definition\">\u00b6</a></dt><dd></dd></dl><dl class=\"method\"><dt id=\"asciitable.ContinuationLinesInputter.process_lines\"><tt class=\"descname\">process_lines</tt><big>(</big><em>lines</em><big>)</big><a class=\"headerlink\" href=\"#asciitable.ContinuationLinesInputter.process_lines\" title=\"Permalink to this definition\">\u00b6</a></dt><dd></dd></dl></dd></dl><dl class=\"class\"><dt id=\"asciitable.daophot.DaophotHeader\"><em class=\"property\">class </em><tt class=\"descclassname\">asciitable.daophot.</tt><tt class=\"descname\">DaophotHeader</tt><a class=\"headerlink\" href=\"#asciitable.daophot.DaophotHeader\" title=\"Permalink to this definition\">\u00b6</a></dt><dd><p>Bases: <tt class=\"xref py py-class docutils literal\"><span class=\"pre\">asciitable.core.BaseHeader</span></tt></p><p>Read the header from a file produced by the IRAF DAOphot routine.</p><dl class=\"method\"><dt id=\"asciitable.daophot.DaophotHeader.get_cols\"><tt class=\"descname\">get_cols</tt><big>(</big><em>lines</em><big>)</big><a class=\"headerlink\" href=\"#asciitable.daophot.DaophotHeader.get_cols\" title=\"Permalink to this definition\">\u00b6</a></dt><dd><p>Initialize the header Column objects from the table <tt class=\"docutils literal\"><span class=\"pre\">lines</span></tt> for a DAOphotheader.  The DAOphot header is specialized so that we just copy the entire BaseHeaderget_cols routine and modify as needed.</p><table class=\"docutils field-list\" frame=\"void\" rules=\"none\"><col class=\"field-name\" /><col class=\"field-body\" /><tbody valign=\"top\"><tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><strong>lines</strong> &#8211; list of table lines</td></tr><tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\">list of table Columns</td></tr></tbody></table></dd></dl></dd></dl><dl class=\"class\"><dt id=\"asciitable.FixedWidthSplitter\"><em class=\"property\">class </em><tt class=\"descclassname\">asciitable.</tt><tt class=\"descname\">FixedWidthSplitter</tt><a class=\"headerlink\" href=\"#asciitable.FixedWidthSplitter\" title=\"Permalink to this definition\">\u00b6</a></dt><dd><p>Bases: <tt class=\"xref py py-class docutils literal\"><span class=\"pre\">asciitable.core.BaseSplitter</span></tt></p><p>Split line based on fixed start and end positions for each <tt class=\"docutils literal\"><span class=\"pre\">col</span></tt> in<tt class=\"docutils literal\"><span class=\"pre\">self.cols</span></tt>.</p><p>This class requires that the Header class will have defined <tt class=\"docutils literal\"><span class=\"pre\">col.start</span></tt>and <tt class=\"docutils literal\"><span class=\"pre\">col.end</span></tt> for each column.  The reference to the <tt class=\"docutils literal\"><span class=\"pre\">header.cols</span></tt> getsput in the splitter object by the base Reader.read() function just in timefor splitting data lines by a <tt class=\"docutils literal\"><span class=\"pre\">data</span></tt> object.</p><p>Note that the <tt class=\"docutils literal\"><span class=\"pre\">start</span></tt> and <tt class=\"docutils literal\"><span class=\"pre\">end</span></tt> positions are defined in the pythonicstyle so line[start:end] is the desired substring for a column.  This splitterclass does not have a hook for <tt class=\"docutils literal\"><span class=\"pre\">process_lines</span></tt> since that is generally notuseful for fixed-width input.</p><dl class=\"attribute\"><dt id=\"asciitable.FixedWidthSplitter.bookend\"><tt class=\"descname\">bookend</tt><em class=\"property\"> = False</em><a class=\"headerlink\" href=\"#asciitable.FixedWidthSplitter.bookend\" title=\"Permalink to this definition\">\u00b6</a></dt><dd></dd></dl><dl class=\"attribute\"><dt id=\"asciitable.FixedWidthSplitter.delimiter_pad\"><tt class=\"descname\">delimiter_pad</tt><em class=\"property\"> = ''</em><a class=\"headerlink\" href=\"#asciitable.FixedWidthSplitter.delimiter_pad\" title=\"Permalink to this definition\">\u00b6</a></dt><dd></dd></dl><dl class=\"method\"><dt id=\"asciitable.FixedWidthSplitter.join\"><tt class=\"descname\">join</tt><big>(</big><em>vals</em>, <em>widths</em><big>)</big><a class=\"headerlink\" href=\"#asciitable.FixedWidthSplitter.join\" title=\"Permalink to this definition\">\u00b6</a></dt><dd></dd></dl></dd></dl><dl class=\"class\"><dt id=\"asciitable.FixedWidthHeader\"><em class=\"property\">class </em><tt class=\"descclassname\">asciitable.</tt><tt class=\"descname\">FixedWidthHeader</tt><a class=\"headerlink\" href=\"#asciitable.FixedWidthHeader\" title=\"Permalink to this definition\">\u00b6</a></dt><dd><p>Bases: <tt class=\"xref py py-class docutils literal\"><span class=\"pre\">asciitable.core.BaseHeader</span></tt></p><p>Fixed width table header reader.</p><p>The key settable class attributes are:</p><table class=\"docutils field-list\" frame=\"void\" rules=\"none\"><col class=\"field-name\" /><col class=\"field-body\" /><tbody valign=\"top\"><tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><ul class=\"first last simple\"><li><strong>auto_format</strong> &#8211; format string for auto-generating column names</li><li><strong>start_line</strong> &#8211; None, int, or a function of <tt class=\"docutils literal\"><span class=\"pre\">lines</span></tt> that returns None or int</li><li><strong>comment</strong> &#8211; regular expression for comment lines</li><li><strong>splitter_class</strong> &#8211; Splitter class for splitting data lines into columns</li><li><strong>names</strong> &#8211; list of names corresponding to each data column</li><li><strong>include_names</strong> &#8211; list of names to include in output (default=None selects all names)</li><li><strong>exclude_names</strong> &#8211; list of names to exlude from output (applied after <tt class=\"docutils literal\"><span class=\"pre\">include_names</span></tt>)</li><li><strong>position_line</strong> &#8211; row index of line that specifies position (default = 1)</li><li><strong>position_char</strong> &#8211; character used to write the position line (default = &#8220;-&#8221;)</li><li><strong>col_starts</strong> &#8211; list of start positions for each column (0-based counting)</li><li><strong>col_ends</strong> &#8211; list of end positions (inclusive) for each column</li><li><strong>delimiter_pad</strong> &#8211; padding around delimiter when writing (default = None)</li><li><strong>bookend</strong> &#8211; put the delimiter at start and end of line when writing (default = False)</li></ul></td></tr></tbody></table><dl class=\"method\"><dt id=\"asciitable.FixedWidthHeader.get_cols\"><tt class=\"descname\">get_cols</tt><big>(</big><em>lines</em><big>)</big><a class=\"headerlink\" href=\"#asciitable.FixedWidthHeader.get_cols\" title=\"Permalink to this definition\">\u00b6</a></dt><dd><p>Initialize the header Column objects from the table <tt class=\"docutils literal\"><span class=\"pre\">lines</span></tt>.</p><p>Based on the previously set Header attributes find or create the column names.Sets <tt class=\"docutils literal\"><span class=\"pre\">self.cols</span></tt> with the list of Columns.  This list only includes the actualrequested columns after filtering by the include_names and exclude_namesattributes.  See <tt class=\"docutils literal\"><span class=\"pre\">self.names</span></tt> for the full list.</p><table class=\"docutils field-list\" frame=\"void\" rules=\"none\"><col class=\"field-name\" /><col class=\"field-body\" /><tbody valign=\"top\"><tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><strong>lines</strong> &#8211; list of table lines</td></tr><tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\">None</td></tr></tbody></table></dd></dl><dl class=\"method\"><dt id=\"asciitable.FixedWidthHeader.get_fixedwidth_params\"><tt class=\"descname\">get_fixedwidth_params</tt><big>(</big><em>line</em><big>)</big><a class=\"headerlink\" href=\"#asciitable.FixedWidthHeader.get_fixedwidth_params\" title=\"Permalink to this definition\">\u00b6</a></dt><dd><p>Split <tt class=\"docutils literal\"><span class=\"pre\">line</span></tt> on the delimiter and determine column values and columnstart and end positions.  This might include null columns with zero length(e.g. for header row = &#8220;| col1 || col2 | col3 <a href=\"#id5\"><span class=\"problematic\" id=\"id6\">|</span></a>&#8221; orheader2_row = &#8220;&#8212;&#8211;    &#8212;&#8212;-   &#8212;&#8211;&#8221;).  The null columns arestripped out.  Returns the values between delimiters and the correspondingstart and end positions.</p><table class=\"docutils field-list\" frame=\"void\" rules=\"none\"><col class=\"field-name\" /><col class=\"field-body\" /><tbody valign=\"top\"><tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><strong>line</strong> &#8211; input line</td></tr><tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\">(vals, starts, ends)</td></tr></tbody></table></dd></dl><dl class=\"method\"><dt id=\"asciitable.FixedWidthHeader.get_line\"><tt class=\"descname\">get_line</tt><big>(</big><em>lines</em>, <em>index</em><big>)</big><a class=\"headerlink\" href=\"#asciitable.FixedWidthHeader.get_line\" title=\"Permalink to this definition\">\u00b6</a></dt><dd></dd></dl><dl class=\"attribute\"><dt id=\"asciitable.FixedWidthHeader.position_line\"><tt class=\"descname\">position_line</tt><em class=\"property\"> = None</em><a class=\"headerlink\" href=\"#asciitable.FixedWidthHeader.position_line\" title=\"Permalink to this definition\">\u00b6</a></dt><dd></dd></dl><dl class=\"method\"><dt id=\"asciitable.FixedWidthHeader.write\"><tt class=\"descname\">write</tt><big>(</big><em>lines</em><big>)</big><a class=\"headerlink\" href=\"#asciitable.FixedWidthHeader.write\" title=\"Permalink to this definition\">\u00b6</a></dt><dd></dd></dl></dd></dl><dl class=\"class\"><dt id=\"asciitable.FixedWidthData\"><em class=\"property\">class </em><tt class=\"descclassname\">asciitable.</tt><tt class=\"descname\">FixedWidthData</tt><a class=\"headerlink\" href=\"#asciitable.FixedWidthData\" title=\"Permalink to this definition\">\u00b6</a></dt><dd><p>Bases: <tt class=\"xref py py-class docutils literal\"><span class=\"pre\">asciitable.core.BaseData</span></tt></p><p>Base table data reader.</p><table class=\"docutils field-list\" frame=\"void\" rules=\"none\"><col class=\"field-name\" /><col class=\"field-body\" /><tbody valign=\"top\"><tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><ul class=\"first last simple\"><li><strong>start_line</strong> &#8211; None, int, or a function of <tt class=\"docutils literal\"><span class=\"pre\">lines</span></tt> that returns None or int</li><li><strong>end_line</strong> &#8211; None, int, or a function of <tt class=\"docutils literal\"><span class=\"pre\">lines</span></tt> that returns None or int</li><li><strong>comment</strong> &#8211; Regular expression for comment lines</li><li><strong>splitter_class</strong> &#8211; Splitter class for splitting data lines into columns</li></ul></td></tr></tbody></table><dl class=\"attribute\"><dt id=\"asciitable.FixedWidthData.splitter_class\"><tt class=\"descname\">splitter_class</tt><a class=\"headerlink\" href=\"#asciitable.FixedWidthData.splitter_class\" title=\"Permalink to this definition\">\u00b6</a></dt><dd><p>alias of <a class=\"reference internal\" href=\"#asciitable.FixedWidthSplitter\" title=\"asciitable.FixedWidthSplitter\"><tt class=\"xref py py-class docutils literal\"><span class=\"pre\">FixedWidthSplitter</span></tt></a></p></dd></dl><dl class=\"method\"><dt id=\"asciitable.FixedWidthData.write\"><tt class=\"descname\">write</tt><big>(</big><em>lines</em><big>)</big><a class=\"headerlink\" href=\"#asciitable.FixedWidthData.write\" title=\"Permalink to this definition\">\u00b6</a></dt><dd></dd></dl></dd></dl><dl class=\"class\"><dt id=\"asciitable.ipac.IpacData\"><em class=\"property\">class </em><tt class=\"descclassname\">asciitable.ipac.</tt><tt class=\"descname\">IpacData</tt><a class=\"headerlink\" href=\"#asciitable.ipac.IpacData\" title=\"Permalink to this definition\">\u00b6</a></dt><dd><p>Bases: <tt class=\"xref py py-class docutils literal\"><span class=\"pre\">asciitable.core.BaseData</span></tt></p><p>IPAC table data reader</p><dl class=\"attribute\"><dt id=\"asciitable.ipac.IpacData.comment\"><tt class=\"descname\">comment</tt><em class=\"property\"> = '[|\\\\\\\\]'</em><a class=\"headerlink\" href=\"#asciitable.ipac.IpacData.comment\" title=\"Permalink to this definition\">\u00b6</a></dt><dd></dd></dl><dl class=\"attribute\"><dt id=\"asciitable.ipac.IpacData.splitter_class\"><tt class=\"descname\">splitter_class</tt><a class=\"headerlink\" href=\"#asciitable.ipac.IpacData.splitter_class\" title=\"Permalink to this definition\">\u00b6</a></dt><dd><p>alias of <a class=\"reference internal\" href=\"#asciitable.FixedWidthSplitter\" title=\"asciitable.FixedWidthSplitter\"><tt class=\"xref py py-class docutils literal\"><span class=\"pre\">FixedWidthSplitter</span></tt></a></p></dd></dl></dd></dl><dl class=\"class\"><dt id=\"asciitable.ipac.IpacHeader\"><em class=\"property\">class </em><tt class=\"descclassname\">asciitable.ipac.</tt><tt class=\"descname\">IpacHeader</tt><a class=\"headerlink\" href=\"#asciitable.ipac.IpacHeader\" title=\"Permalink to this definition\">\u00b6</a></dt><dd><p>Bases: <tt class=\"xref py py-class docutils literal\"><span class=\"pre\">asciitable.core.BaseHeader</span></tt></p><p>IPAC table header</p><dl class=\"attribute\"><dt id=\"asciitable.ipac.IpacHeader.col_type_map\"><tt class=\"descname\">col_type_map</tt><em class=\"property\"> = {'real': &lt;class 'asciitable.core.FloatType'&gt;, 'int': &lt;class 'asciitable.core.IntType'&gt;, 'float': &lt;class 'asciitable.core.FloatType'&gt;, 'char': &lt;class 'asciitable.core.StrType'&gt;, 'date': &lt;class 'asciitable.core.StrType'&gt;, 'c': &lt;class 'asciitable.core.StrType'&gt;, 'd': &lt;class 'asciitable.core.FloatType'&gt;, 'f': &lt;class 'asciitable.core.FloatType'&gt;, 'i': &lt;class 'asciitable.core.IntType'&gt;, 'double': &lt;class 'asciitable.core.FloatType'&gt;, 'l': &lt;class 'asciitable.core.IntType'&gt;, 'long': &lt;class 'asciitable.core.IntType'&gt;, 'r': &lt;class 'asciitable.core.FloatType'&gt;}</em><a class=\"headerlink\" href=\"#asciitable.ipac.IpacHeader.col_type_map\" title=\"Permalink to this definition\">\u00b6</a></dt><dd></dd></dl><dl class=\"attribute\"><dt id=\"asciitable.ipac.IpacHeader.comment\"><tt class=\"descname\">comment</tt><em class=\"property\"> = '\\\\\\\\'</em><a class=\"headerlink\" href=\"#asciitable.ipac.IpacHeader.comment\" title=\"Permalink to this definition\">\u00b6</a></dt><dd></dd></dl><dl class=\"method\"><dt id=\"asciitable.ipac.IpacHeader.get_cols\"><tt class=\"descname\">get_cols</tt><big>(</big><em>lines</em><big>)</big><a class=\"headerlink\" href=\"#asciitable.ipac.IpacHeader.get_cols\" title=\"Permalink to this definition\">\u00b6</a></dt><dd><p>Initialize the header Column objects from the table <tt class=\"docutils literal\"><span class=\"pre\">lines</span></tt>.</p><p>Based on the previously set Header attributes find or create the column names.Sets <tt class=\"docutils literal\"><span class=\"pre\">self.cols</span></tt> with the list of Columns.  This list only includes the actualrequested columns after filtering by the include_names and exclude_namesattributes.  See <tt class=\"docutils literal\"><span class=\"pre\">self.names</span></tt> for the full list.</p><table class=\"docutils field-list\" frame=\"void\" rules=\"none\"><col class=\"field-name\" /><col class=\"field-body\" /><tbody valign=\"top\"><tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><strong>lines</strong> &#8211; list of table lines</td></tr><tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\">list of table Columns</td></tr></tbody></table></dd></dl><dl class=\"method\"><dt id=\"asciitable.ipac.IpacHeader.process_lines\"><tt class=\"descname\">process_lines</tt><big>(</big><em>lines</em><big>)</big><a class=\"headerlink\" href=\"#asciitable.ipac.IpacHeader.process_lines\" title=\"Permalink to this definition\">\u00b6</a></dt><dd><p>Generator to yield IPAC header lines, i.e. those starting and ending withdelimiter character.</p></dd></dl><dl class=\"attribute\"><dt id=\"asciitable.ipac.IpacHeader.splitter_class\"><tt class=\"descname\">splitter_class</tt><a class=\"headerlink\" href=\"#asciitable.ipac.IpacHeader.splitter_class\" title=\"Permalink to this definition\">\u00b6</a></dt><dd><p>alias of <a class=\"reference internal\" href=\"#asciitable.BaseSplitter\" title=\"asciitable.BaseSplitter\"><tt class=\"xref py py-class docutils literal\"><span class=\"pre\">BaseSplitter</span></tt></a></p></dd></dl></dd></dl><dl class=\"class\"><dt id=\"asciitable.latex.LatexHeader\"><em class=\"property\">class </em><tt class=\"descclassname\">asciitable.latex.</tt><tt class=\"descname\">LatexHeader</tt><a class=\"headerlink\" href=\"#asciitable.latex.LatexHeader\" title=\"Permalink to this definition\">\u00b6</a></dt><dd><p>Bases: <tt class=\"xref py py-class docutils literal\"><span class=\"pre\">asciitable.core.BaseHeader</span></tt></p><dl class=\"attribute\"><dt id=\"asciitable.latex.LatexHeader.header_start\"><tt class=\"descname\">header_start</tt><em class=\"property\"> = '\\\\begin{tabular}'</em><a class=\"headerlink\" href=\"#asciitable.latex.LatexHeader.header_start\" title=\"Permalink to this definition\">\u00b6</a></dt><dd></dd></dl><dl class=\"method\"><dt id=\"asciitable.latex.LatexHeader.start_line\"><tt class=\"descname\">start_line</tt><big>(</big><em>lines</em><big>)</big><a class=\"headerlink\" href=\"#asciitable.latex.LatexHeader.start_line\" title=\"Permalink to this definition\">\u00b6</a></dt><dd></dd></dl><dl class=\"method\"><dt id=\"asciitable.latex.LatexHeader.write\"><tt class=\"descname\">write</tt><big>(</big><em>lines</em><big>)</big><a class=\"headerlink\" href=\"#asciitable.latex.LatexHeader.write\" title=\"Permalink to this definition\">\u00b6</a></dt><dd></dd></dl></dd></dl><dl class=\"class\"><dt id=\"asciitable.latex.LatexData\"><em class=\"property\">class </em><tt class=\"descclassname\">asciitable.latex.</tt><tt class=\"descname\">LatexData</tt><a class=\"headerlink\" href=\"#asciitable.latex.LatexData\" title=\"Permalink to this definition\">\u00b6</a></dt><dd><p>Bases: <tt class=\"xref py py-class docutils literal\"><span class=\"pre\">asciitable.core.BaseData</span></tt></p><dl class=\"attribute\"><dt id=\"asciitable.latex.LatexData.data_end\"><tt class=\"descname\">data_end</tt><em class=\"property\"> = '\\\\end{tabular}'</em><a class=\"headerlink\" href=\"#asciitable.latex.LatexData.data_end\" title=\"Permalink to this definition\">\u00b6</a></dt><dd></dd></dl><dl class=\"attribute\"><dt id=\"asciitable.latex.LatexData.data_start\"><tt class=\"descname\">data_start</tt><em class=\"property\"> = None</em><a class=\"headerlink\" href=\"#asciitable.latex.LatexData.data_start\" title=\"Permalink to this definition\">\u00b6</a></dt><dd></dd></dl><dl class=\"method\"><dt id=\"asciitable.latex.LatexData.end_line\"><tt class=\"descname\">end_line</tt><big>(</big><em>lines</em><big>)</big><a class=\"headerlink\" href=\"#asciitable.latex.LatexData.end_line\" title=\"Permalink to this definition\">\u00b6</a></dt><dd></dd></dl><dl class=\"method\"><dt id=\"asciitable.latex.LatexData.start_line\"><tt class=\"descname\">start_line</tt><big>(</big><em>lines</em><big>)</big><a class=\"headerlink\" href=\"#asciitable.latex.LatexData.start_line\" title=\"Permalink to this definition\">\u00b6</a></dt><dd></dd></dl><dl class=\"method\"><dt id=\"asciitable.latex.LatexData.write\"><tt class=\"descname\">write</tt><big>(</big><em>lines</em><big>)</big><a class=\"headerlink\" href=\"#asciitable.latex.LatexData.write\" title=\"Permalink to this definition\">\u00b6</a></dt><dd></dd></dl></dd></dl><dl class=\"class\"><dt id=\"asciitable.latex.LatexSplitter\"><em class=\"property\">class </em><tt class=\"descclassname\">asciitable.latex.</tt><tt class=\"descname\">LatexSplitter</tt><a class=\"headerlink\" href=\"#asciitable.latex.LatexSplitter\" title=\"Permalink to this definition\">\u00b6</a></dt><dd><p>Bases: <tt class=\"xref py py-class docutils literal\"><span class=\"pre\">asciitable.core.BaseSplitter</span></tt></p><p>Split LaTeX table date. Default delimiter is <cite>&amp;</cite>.</p><dl class=\"attribute\"><dt id=\"asciitable.latex.LatexSplitter.delimiter\"><tt class=\"descname\">delimiter</tt><em class=\"property\"> = '&amp;'</em><a class=\"headerlink\" href=\"#asciitable.latex.LatexSplitter.delimiter\" title=\"Permalink to this definition\">\u00b6</a></dt><dd></dd></dl><dl class=\"method\"><dt id=\"asciitable.latex.LatexSplitter.join\"><tt class=\"descname\">join</tt><big>(</big><em>vals</em><big>)</big><a class=\"headerlink\" href=\"#asciitable.latex.LatexSplitter.join\" title=\"Permalink to this definition\">\u00b6</a></dt><dd><p>Join values together and add a few extra spaces for readability</p></dd></dl><dl class=\"method\"><dt id=\"asciitable.latex.LatexSplitter.process_line\"><tt class=\"descname\">process_line</tt><big>(</big><em>line</em><big>)</big><a class=\"headerlink\" href=\"#asciitable.latex.LatexSplitter.process_line\" title=\"Permalink to this definition\">\u00b6</a></dt><dd><p>Remove whitespace at the beginning or end of line. Also removeat end of line</p></dd></dl><dl class=\"method\"><dt id=\"asciitable.latex.LatexSplitter.process_val\"><tt class=\"descname\">process_val</tt><big>(</big><em>val</em><big>)</big><a class=\"headerlink\" href=\"#asciitable.latex.LatexSplitter.process_val\" title=\"Permalink to this definition\">\u00b6</a></dt><dd><p>Remove whitespace and {} at the beginning or end of value.</p></dd></dl></dd></dl><dl class=\"class\"><dt id=\"asciitable.latex.AASTexHeader\"><em class=\"property\">class </em><tt class=\"descclassname\">asciitable.latex.</tt><tt class=\"descname\">AASTexHeader</tt><a class=\"headerlink\" href=\"#asciitable.latex.AASTexHeader\" title=\"Permalink to this definition\">\u00b6</a></dt><dd><p>Bases: <a class=\"reference internal\" href=\"#asciitable.latex.LatexHeader\" title=\"asciitable.latex.LatexHeader\"><tt class=\"xref py py-class docutils literal\"><span class=\"pre\">asciitable.latex.LatexHeader</span></tt></a></p><p>In a <cite>deluxetable</cite> some header keywords differ from standard LaTeX.</p><p>This header is modified to take that into account.</p><dl class=\"attribute\"><dt id=\"asciitable.latex.AASTexHeader.header_start\"><tt class=\"descname\">header_start</tt><em class=\"property\"> = '\\\\tablehead'</em><a class=\"headerlink\" href=\"#asciitable.latex.AASTexHeader.header_start\" title=\"Permalink to this definition\">\u00b6</a></dt><dd></dd></dl><dl class=\"method\"><dt id=\"asciitable.latex.AASTexHeader.start_line\"><tt class=\"descname\">start_line</tt><big>(</big><em>lines</em><big>)</big><a class=\"headerlink\" href=\"#asciitable.latex.AASTexHeader.start_line\" title=\"Permalink to this definition\">\u00b6</a></dt><dd></dd></dl><dl class=\"method\"><dt id=\"asciitable.latex.AASTexHeader.write\"><tt class=\"descname\">write</tt><big>(</big><em>lines</em><big>)</big><a class=\"headerlink\" href=\"#asciitable.latex.AASTexHeader.write\" title=\"Permalink to this definition\">\u00b6</a></dt><dd></dd></dl></dd></dl><dl class=\"class\"><dt id=\"asciitable.latex.AASTexData\"><em class=\"property\">class </em><tt class=\"descclassname\">asciitable.latex.</tt><tt class=\"descname\">AASTexData</tt><a class=\"headerlink\" href=\"#asciitable.latex.AASTexData\" title=\"Permalink to this definition\">\u00b6</a></dt><dd><p>Bases: <a class=\"reference internal\" href=\"#asciitable.latex.LatexData\" title=\"asciitable.latex.LatexData\"><tt class=\"xref py py-class docutils literal\"><span class=\"pre\">asciitable.latex.LatexData</span></tt></a></p><p>In a <cite>deluxetable</cite> the data is enclosed in <cite>startdata</cite> and <cite>enddata</cite></p><dl class=\"attribute\"><dt id=\"asciitable.latex.AASTexData.data_end\"><tt class=\"descname\">data_end</tt><em class=\"property\"> = '\\\\enddata'</em><a class=\"headerlink\" href=\"#asciitable.latex.AASTexData.data_end\" title=\"Permalink to this definition\">\u00b6</a></dt><dd></dd></dl><dl class=\"attribute\"><dt id=\"asciitable.latex.AASTexData.data_start\"><tt class=\"descname\">data_start</tt><em class=\"property\"> = '\\\\startdata'</em><a class=\"headerlink\" href=\"#asciitable.latex.AASTexData.data_start\" title=\"Permalink to this definition\">\u00b6</a></dt><dd></dd></dl><dl class=\"method\"><dt id=\"asciitable.latex.AASTexData.start_line\"><tt class=\"descname\">start_line</tt><big>(</big><em>lines</em><big>)</big><a class=\"headerlink\" href=\"#asciitable.latex.AASTexData.start_line\" title=\"Permalink to this definition\">\u00b6</a></dt><dd></dd></dl><dl class=\"method\"><dt id=\"asciitable.latex.AASTexData.write\"><tt class=\"descname\">write</tt><big>(</big><em>lines</em><big>)</big><a class=\"headerlink\" href=\"#asciitable.latex.AASTexData.write\" title=\"Permalink to this definition\">\u00b6</a></dt><dd></dd></dl></dd></dl><dl class=\"class\"><dt id=\"asciitable.latex.AASTexHeaderSplitter\"><em class=\"property\">class </em><tt class=\"descclassname\">asciitable.latex.</tt><tt class=\"descname\">AASTexHeaderSplitter</tt><a class=\"headerlink\" href=\"#asciitable.latex.AASTexHeaderSplitter\" title=\"Permalink to this definition\">\u00b6</a></dt><dd><p>Bases: <a class=\"reference internal\" href=\"#asciitable.latex.LatexSplitter\" title=\"asciitable.latex.LatexSplitter\"><tt class=\"xref py py-class docutils literal\"><span class=\"pre\">asciitable.latex.LatexSplitter</span></tt></a></p><p>extract column names from a <cite>deluxetable</cite></p><p>This splitter expects the following LaTeX code <strong>in a single line</strong>:</p><blockquote><div>ablehead{colhead{col1} &amp; ... &amp; colhead{coln}}</div></blockquote><dl class=\"method\"><dt id=\"asciitable.latex.AASTexHeaderSplitter.join\"><tt class=\"descname\">join</tt><big>(</big><em>vals</em><big>)</big><a class=\"headerlink\" href=\"#asciitable.latex.AASTexHeaderSplitter.join\" title=\"Permalink to this definition\">\u00b6</a></dt><dd></dd></dl><dl class=\"method\"><dt id=\"asciitable.latex.AASTexHeaderSplitter.process_line\"><tt class=\"descname\">process_line</tt><big>(</big><em>line</em><big>)</big><a class=\"headerlink\" href=\"#asciitable.latex.AASTexHeaderSplitter.process_line\" title=\"Permalink to this definition\">\u00b6</a></dt><dd><p>extract column names from tablehead</p></dd></dl></dd></dl><div class=\"toctree-wrapper compound\"><ul class=\"simple\"></ul></div></div></div><div class=\"section\" id=\"indices-and-tables\"><h1>Indices and tables<a class=\"headerlink\" href=\"#indices-and-tables\" title=\"Permalink to this headline\">\u00b6</a></h1><ul class=\"simple\"><li><a class=\"reference internal\" href=\"genindex.html\"><em>Index</em></a></li><li><a class=\"reference internal\" href=\"py-modindex.html\"><em>Module Index</em></a></li><li><a class=\"reference internal\" href=\"search.html\"><em>Search Page</em></a></li></ul></div>          </div>        </div>      </div>      <div class=\"sphinxsidebar\">        <div class=\"sphinxsidebarwrapper\">  <h3><a href=\"#\">Table Of Contents</a></h3>  <ul><li><a class=\"reference internal\" href=\"#\">Asciitable</a><ul><li><a class=\"reference internal\" href=\"#requirements\">Requirements</a></li><li><a class=\"reference internal\" href=\"#download\">Download</a></li><li><a class=\"reference internal\" href=\"#installation-and-test\">Installation and test</a><ul><li><a class=\"reference internal\" href=\"#easy-way\">Easy way</a></li><li><a class=\"reference internal\" href=\"#less-easy-way\">Less easy way</a></li></ul></li><li><a class=\"reference internal\" href=\"#reading-tables\">Reading tables</a><ul><li><a class=\"reference internal\" href=\"#commonly-used-parameters-for-read\">Commonly used parameters for <tt class=\"docutils literal\"><span class=\"pre\">read()</span></tt></a></li><li><a class=\"reference internal\" href=\"#advanced-parameters-for-read\">Advanced parameters for <tt class=\"docutils literal\"><span class=\"pre\">read()</span></tt></a></li><li><a class=\"reference internal\" href=\"#replace-bad-or-missing-values\">Replace bad or missing values</a></li><li><a class=\"reference internal\" href=\"#guess-table-format\">Guess table format</a></li><li><a class=\"reference internal\" href=\"#converters\">Converters</a><ul><li><a class=\"reference internal\" href=\"#without-numpy\">Without NumPy</a></li><li><a class=\"reference internal\" href=\"#with-numpy\">With NumPy</a></li></ul></li><li><a class=\"reference internal\" href=\"#advanced-table-reading\">Advanced table reading</a><ul><li><a class=\"reference internal\" href=\"#examples\">Examples</a></li></ul></li></ul></li><li><a class=\"reference internal\" href=\"#writing-tables\">Writing tables</a><ul><li><a class=\"reference internal\" href=\"#input-data-formats\">Input data formats</a><ul><li><a class=\"reference internal\" href=\"#existing-ascii-table-with-metadata\">Existing ASCII table with metadata</a></li><li><a class=\"reference internal\" href=\"#data-from-asciitable-read\">Data from asciitable.read()</a></li><li><a class=\"reference internal\" href=\"#numpy-structured-array\">NumPy structured array</a></li><li><a class=\"reference internal\" href=\"#sequence-of-sequences\">Sequence of sequences</a></li><li><a class=\"reference internal\" href=\"#dict-of-sequences\">Dict of sequences</a></li></ul></li><li><a class=\"reference internal\" href=\"#commonly-used-parameters-for-write\">Commonly used parameters for <tt class=\"docutils literal\"><span class=\"pre\">write()</span></tt></a></li></ul></li><li><a class=\"reference internal\" href=\"#base-class-elements\">Base class elements</a></li></ul></li><li><a class=\"reference internal\" href=\"#module-asciitable\">Asciitable API</a><ul><li><a class=\"reference internal\" href=\"#functions\">Functions</a></li><li><a class=\"reference internal\" href=\"#core-classes\">Core Classes</a></li><li><a class=\"reference internal\" href=\"#extension-reader-classes\">Extension Reader Classes</a></li><li><a class=\"reference internal\" href=\"#other-extension-classes\">Other extension classes</a><ul></ul></li></ul></li><li><a class=\"reference internal\" href=\"#indices-and-tables\">Indices and tables</a></li></ul>  <h4>Next topic</h4>  <p class=\"topless\"><a href=\"fixed_width_gallery.html\"                        title=\"next chapter\">Fixed-width Gallery</a></p><div id=\"searchbox\" style=\"display: none\">  <h3>Quick search</h3>    <form class=\"search\" action=\"search.html\" method=\"get\">      <input type=\"text\" name=\"q\" />      <input type=\"submit\" value=\"Go\" />      <input type=\"hidden\" name=\"check_keywords\" value=\"yes\" />      <input type=\"hidden\" name=\"area\" value=\"default\" />    </form>    <p class=\"searchtip\" style=\"font-size: 90%\">    Enter search terms or a module, class or function name.    </p></div><script type=\"text/javascript\">$('#searchbox').show(0);</script>        </div>      </div>      <div class=\"clearer\"></div>    </div>    <div class=\"related\">      <h3>Navigation</h3>      <ul>        <li class=\"right\" style=\"margin-right: 10px\">          <a href=\"genindex.html\" title=\"General Index\"             >index</a></li>        <li class=\"right\" >          <a href=\"py-modindex.html\" title=\"Python Module Index\"             >modules</a> |</li>        <li class=\"right\" >          <a href=\"fixed_width_gallery.html\" title=\"Fixed-width Gallery\"             >next</a> |</li>        <li><a href=\"#\">asciitable 0.8.0 documentation</a> &raquo;</li>       </ul>    </div>    <div class=\"footer\">        &copy; Copyright 2011, Tom Aldcroft.      Created using <a href=\"http://sphinx.pocoo.org/\">Sphinx</a> 1.1.3.    </div><div class=\"footer\">This page uses <a href=\"http://analytics.google.com/\">Google Analytics</a> to collect statistics. You can disable it by blockingthe JavaScript coming from www.google-analytics.com.<script type=\"text/javascript\">  (function() {    var ga = document.createElement('script');     ga.type = 'text/javascript';     ga.async = true;    ga.src = ('https:' == document.location.protocol ?              'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';    var s = document.getElementsByTagName('script')[0];     s.parentNode.insertBefore(ga, s);  })();</script></div>  </body></html>",
  "embeddings": []
}
{
  "libtype": "pypi",
  "libname": "pytest-factoryboy",
  "url": "https://pytest-factoryboy.readthedocs.io/",
  "html": "<!DOCTYPE html><!--[if IE 8]><html class=\"no-js lt-ie9\" lang=\"en\" > <![endif]--><!--[if gt IE 8]><!--> <html class=\"no-js\" lang=\"en\" > <!--<![endif]--><head>  <meta charset=\"utf-8\">    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">    <title>Welcome to pytest-factoryboy\u2019s documentation! &mdash; pytest-factoryboy 2.5.1 documentation</title>              <script type=\"text/javascript\" src=\"_static/js/modernizr.min.js\"></script>            <script type=\"text/javascript\" id=\"documentation_options\" data-url_root=\"./\" src=\"_static/documentation_options.js\"></script>        <script type=\"text/javascript\" src=\"_static/jquery.js\"></script>        <script type=\"text/javascript\" src=\"_static/underscore.js\"></script>        <script type=\"text/javascript\" src=\"_static/doctools.js\"></script>        <script type=\"text/javascript\" src=\"_static/language_data.js\"></script>        <script async=\"async\" type=\"text/javascript\" src=\"/_/static/javascript/readthedocs-doc-embed.js\"></script>        <script type=\"text/javascript\" src=\"_static/js/theme.js\"></script>        <link rel=\"stylesheet\" href=\"_static/css/theme.css\" type=\"text/css\" />  <link rel=\"stylesheet\" href=\"_static/pygments.css\" type=\"text/css\" />    <link rel=\"index\" title=\"Index\" href=\"genindex.html\" />    <link rel=\"search\" title=\"Search\" href=\"search.html\" /> <!-- RTD Extra Head --><link rel=\"stylesheet\" href=\"/_/static/css/readthedocs-doc-embed.css\" type=\"text/css\" /><script type=\"application/json\" id=\"READTHEDOCS_DATA\">{\"ad_free\": false, \"api_host\": \"https://readthedocs.org\", \"build_date\": \"2022-12-01T18:59:52Z\", \"builder\": \"sphinx\", \"canonical_url\": null, \"commit\": \"ca5bb097\", \"docroot\": \"/docs/\", \"features\": {\"docsearch_disabled\": false}, \"global_analytics_code\": \"UA-17997319-1\", \"language\": \"en\", \"page\": \"index\", \"programming_language\": \"py\", \"project\": \"pytest-factoryboy\", \"proxied_api_host\": \"/_\", \"source_suffix\": \".rst\", \"subprojects\": {}, \"theme\": \"sphinx_rtd_theme\", \"user_analytics_code\": \"\", \"version\": \"stable\"}</script><!--Using this variable directly instead of using `JSON.parse` is deprecated.The READTHEDOCS_DATA global variable will be removed in the future.--><script type=\"text/javascript\">READTHEDOCS_DATA = JSON.parse(document.getElementById('READTHEDOCS_DATA').innerHTML);</script><script type=\"text/javascript\" src=\"/_/static/javascript/readthedocs-analytics.js\" async=\"async\"></script><!-- end RTD <extrahead> --></head><body class=\"wy-body-for-nav\">     <div class=\"wy-grid-for-nav\">        <nav data-toggle=\"wy-nav-shift\" class=\"wy-nav-side\">      <div class=\"wy-side-scroll\">        <div class=\"wy-side-nav-search\" >                                <a href=\"#\" class=\"icon icon-home\"> pytest-factoryboy                              </a>                                                            <div class=\"version\">                stable              </div>                                <div role=\"search\">  <form id=\"rtd-search-form\" class=\"wy-form\" action=\"search.html\" method=\"get\">    <input type=\"text\" name=\"q\" placeholder=\"Search docs\" />    <input type=\"hidden\" name=\"check_keywords\" value=\"yes\" />    <input type=\"hidden\" name=\"area\" value=\"default\" />  </form></div>                  </div>        <div class=\"wy-menu wy-menu-vertical\" data-spy=\"affix\" role=\"navigation\" aria-label=\"main navigation\">                                                                                      <!-- Local TOC -->              <div class=\"local-toc\"><ul><li><a class=\"reference internal\" href=\"#\">Welcome to pytest-factoryboy\u2019s documentation!</a></li><li><a class=\"reference internal\" href=\"#factory-boy-integration-with-the-pytest-runner\">factory_boy integration with the pytest runner</a><ul><li><a class=\"reference internal\" href=\"#install-pytest-factoryboy\">Install pytest-factoryboy</a></li><li><a class=\"reference internal\" href=\"#concept\">Concept</a></li><li><a class=\"reference internal\" href=\"#factory-fixture\">Factory Fixture</a></li><li><a class=\"reference internal\" href=\"#model-fixture\">Model Fixture</a></li><li><a class=\"reference internal\" href=\"#attributes-are-fixtures\">Attributes are Fixtures</a></li><li><a class=\"reference internal\" href=\"#subfactory\">SubFactory</a></li><li><a class=\"reference internal\" href=\"#related-factory\">Related Factory</a></li><li><a class=\"reference internal\" href=\"#post-generation\">post-generation</a></li><li><a class=\"reference internal\" href=\"#integration\">Integration</a></li><li><a class=\"reference internal\" href=\"#fixture-partial-specialization\">Fixture partial specialization</a></li><li><a class=\"reference internal\" href=\"#fixture-attributes\">Fixture attributes</a></li><li><a class=\"reference internal\" href=\"#generic-container-classes-as-models\">Generic container classes as models</a></li></ul></li><li><a class=\"reference internal\" href=\"#post-generation-dependencies\">Post-generation dependencies</a><ul><li><a class=\"reference internal\" href=\"#hooks\">Hooks</a></li><li><a class=\"reference internal\" href=\"#license\">License</a></li></ul></li><li><a class=\"reference internal\" href=\"#authors\">Authors</a></li><li><a class=\"reference internal\" href=\"#changelog\">Changelog</a><ul><li><a class=\"reference internal\" href=\"#unreleased\">Unreleased</a></li><li><a class=\"reference internal\" href=\"#id1\">2.5.1</a></li><li><a class=\"reference internal\" href=\"#id4\">2.5.0</a></li><li><a class=\"reference internal\" href=\"#id11\">2.4.0</a></li><li><a class=\"reference internal\" href=\"#id12\">2.3.1</a></li><li><a class=\"reference internal\" href=\"#id15\">2.3.0</a></li><li><a class=\"reference internal\" href=\"#id18\">2.2.1</a></li><li><a class=\"reference internal\" href=\"#id19\">2.2.0</a></li><li><a class=\"reference internal\" href=\"#id20\">2.1.0</a></li><li><a class=\"reference internal\" href=\"#id21\">2.0.3</a></li><li><a class=\"reference internal\" href=\"#id22\">2.0.2</a></li><li><a class=\"reference internal\" href=\"#id23\">2.0.1</a></li><li><a class=\"reference internal\" href=\"#id24\">1.3.2</a></li><li><a class=\"reference internal\" href=\"#id25\">1.3.1</a></li><li><a class=\"reference internal\" href=\"#id26\">1.3.0</a></li><li><a class=\"reference internal\" href=\"#id27\">1.2.2</a></li><li><a class=\"reference internal\" href=\"#id28\">1.2.1</a></li><li><a class=\"reference internal\" href=\"#id29\">1.1.6</a></li><li><a class=\"reference internal\" href=\"#id30\">1.1.5</a></li><li><a class=\"reference internal\" href=\"#id31\">1.1.3</a></li><li><a class=\"reference internal\" href=\"#id32\">1.1.2</a></li><li><a class=\"reference internal\" href=\"#id33\">1.1.1</a></li><li><a class=\"reference internal\" href=\"#id34\">1.1.0</a></li><li><a class=\"reference internal\" href=\"#id35\">1.0.3</a></li><li><a class=\"reference internal\" href=\"#id36\">1.0.2</a></li><li><a class=\"reference internal\" href=\"#id37\">1.0.1</a></li><li><a class=\"reference internal\" href=\"#id38\">1.0.0</a></li></ul></li></ul></div>                              </div>      </div>    </nav>    <section data-toggle=\"wy-nav-shift\" class=\"wy-nav-content-wrap\">            <nav class=\"wy-nav-top\" aria-label=\"top navigation\">                  <i data-toggle=\"wy-nav-top\" class=\"fa fa-bars\"></i>          <a href=\"#\">pytest-factoryboy</a>              </nav>      <div class=\"wy-nav-content\">                <div class=\"rst-content\">                  <div role=\"navigation\" aria-label=\"breadcrumbs navigation\">  <ul class=\"wy-breadcrumbs\">          <li><a href=\"#\">Docs</a> &raquo;</li>              <li>Welcome to pytest-factoryboy\u2019s documentation!</li>              <li class=\"wy-breadcrumbs-aside\">                                              <a href=\"https://github.com/pytest-dev/pytest-factoryboy/blob/ca5bb0971e7fa393ad4e999560d2ca3da046c85e/docs/index.rst\" class=\"fa fa-github\"> Edit on GitHub</a>                                    </li>      </ul>    <hr/></div>          <div role=\"main\" class=\"document\" itemscope=\"itemscope\" itemtype=\"http://schema.org/Article\">           <div itemprop=\"articleBody\">              <div class=\"section\" id=\"welcome-to-pytest-factoryboy-s-documentation\"><h1>Welcome to pytest-factoryboy\u2019s documentation!<a class=\"headerlink\" href=\"#welcome-to-pytest-factoryboy-s-documentation\" title=\"Permalink to this headline\">\u00b6</a></h1></div><div class=\"section\" id=\"factory-boy-integration-with-the-pytest-runner\"><h1><a class=\"reference external\" href=\"https://factoryboy.readthedocs.io\">factory_boy</a> integration with the <a class=\"reference external\" href=\"https://pytest.org\">pytest</a> runner<a class=\"headerlink\" href=\"#factory-boy-integration-with-the-pytest-runner\" title=\"Permalink to this headline\">\u00b6</a></h1><a class=\"reference external image-reference\" href=\"https://pypi.python.org/pypi/pytest-factoryboy\"><img alt=\"https://img.shields.io/pypi/v/pytest-factoryboy.svg\" src=\"https://img.shields.io/pypi/v/pytest-factoryboy.svg\" /></a><a class=\"reference external image-reference\" href=\"https://pypi.python.org/pypi/pytest-factoryboy\"><img alt=\"https://img.shields.io/pypi/pyversions/pytest-factoryboy.svg\" src=\"https://img.shields.io/pypi/pyversions/pytest-factoryboy.svg\" /></a><a class=\"reference external image-reference\" href=\"https://github.com/pytest-dev/pytest-factoryboy/actions?query=workflow%3Amain\"><img alt=\"https://github.com/pytest-dev/pytest-factoryboy/actions/workflows/main.yml/badge.svg\" src=\"https://github.com/pytest-dev/pytest-factoryboy/actions/workflows/main.yml/badge.svg\" /></a><a class=\"reference external image-reference\" href=\"https://readthedocs.org/projects/pytest-factoryboy/?badge=latest\"><img alt=\"Documentation Status\" src=\"https://readthedocs.org/projects/pytest-factoryboy/badge/?version=latest\" /></a><p>pytest-factoryboy makes it easy to combine <code class=\"docutils literal notranslate\"><span class=\"pre\">factory</span></code> approach to the test setup with the <code class=\"docutils literal notranslate\"><span class=\"pre\">dependency</span></code> injection,heart of the <a class=\"reference external\" href=\"https://pytest.org/latest/fixture.html\">pytest fixtures</a>.</p><div class=\"section\" id=\"install-pytest-factoryboy\"><h2>Install pytest-factoryboy<a class=\"headerlink\" href=\"#install-pytest-factoryboy\" title=\"Permalink to this headline\">\u00b6</a></h2><div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">pip</span> <span class=\"n\">install</span> <span class=\"n\">pytest</span><span class=\"o\">-</span><span class=\"n\">factoryboy</span></pre></div></div></div><div class=\"section\" id=\"concept\"><h2>Concept<a class=\"headerlink\" href=\"#concept\" title=\"Permalink to this headline\">\u00b6</a></h2><p>Library exports a function to register factories as fixtures. Fixtures are contributedto the same module where register function is called.</p></div><div class=\"section\" id=\"factory-fixture\"><h2>Factory Fixture<a class=\"headerlink\" href=\"#factory-fixture\" title=\"Permalink to this headline\">\u00b6</a></h2><p>Factory fixtures allow using factories without importing them. The fixture name convention is to use the lowercase-underscoreform of the class name.</p><div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">factory</span><span class=\"kn\">from</span> <span class=\"nn\">pytest_factoryboy</span> <span class=\"kn\">import</span> <span class=\"n\">register</span><span class=\"k\">class</span> <span class=\"nc\">AuthorFactory</span><span class=\"p\">(</span><span class=\"n\">factory</span><span class=\"o\">.</span><span class=\"n\">Factory</span><span class=\"p\">):</span>    <span class=\"k\">class</span> <span class=\"nc\">Meta</span><span class=\"p\">:</span>        <span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">Author</span><span class=\"n\">register</span><span class=\"p\">(</span><span class=\"n\">AuthorFactory</span><span class=\"p\">)</span>  <span class=\"c1\"># =&gt; author_factory</span><span class=\"k\">def</span> <span class=\"nf\">test_factory_fixture</span><span class=\"p\">(</span><span class=\"n\">author_factory</span><span class=\"p\">):</span>    <span class=\"n\">author</span> <span class=\"o\">=</span> <span class=\"n\">author_factory</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">&quot;Charles Dickens&quot;</span><span class=\"p\">)</span>    <span class=\"k\">assert</span> <span class=\"n\">author</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;Charles Dickens&quot;</span></pre></div></div></div><div class=\"section\" id=\"model-fixture\"><h2>Model Fixture<a class=\"headerlink\" href=\"#model-fixture\" title=\"Permalink to this headline\">\u00b6</a></h2><p>Model fixture implements an instance of a model created by the factory. Name convention is model\u2019s lowercase-underscoreclass name.</p><div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">factory</span><span class=\"kn\">from</span> <span class=\"nn\">pytest_factoryboy</span> <span class=\"kn\">import</span> <span class=\"n\">register</span><span class=\"nd\">@register</span><span class=\"k\">class</span> <span class=\"nc\">AuthorFactory</span><span class=\"p\">(</span><span class=\"n\">factory</span><span class=\"o\">.</span><span class=\"n\">Factory</span><span class=\"p\">):</span>    <span class=\"k\">class</span> <span class=\"nc\">Meta</span><span class=\"p\">:</span>        <span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">Author</span>    <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;Charles Dickens&quot;</span><span class=\"k\">def</span> <span class=\"nf\">test_model_fixture</span><span class=\"p\">(</span><span class=\"n\">author</span><span class=\"p\">):</span>    <span class=\"k\">assert</span> <span class=\"n\">author</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;Charles Dickens&quot;</span></pre></div></div><p>Model fixtures can be registered with specific names. For example, if you address instances of some collectionby the name like \u201cfirst\u201d, \u201csecond\u201d or of another parent as \u201cother\u201d:</p><div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">register</span><span class=\"p\">(</span><span class=\"n\">AuthorFactory</span><span class=\"p\">)</span>  <span class=\"c1\"># author</span><span class=\"n\">register</span><span class=\"p\">(</span><span class=\"n\">AuthorFactory</span><span class=\"p\">,</span> <span class=\"s2\">&quot;second_author&quot;</span><span class=\"p\">)</span>  <span class=\"c1\"># second_author</span><span class=\"c1\"># `register(...)` can be used as a decorator too</span><span class=\"nd\">@register</span>  <span class=\"c1\"># book</span><span class=\"nd\">@register</span><span class=\"p\">(</span><span class=\"n\">_name</span><span class=\"o\">=</span><span class=\"s2\">&quot;second_book&quot;</span><span class=\"p\">)</span>  <span class=\"c1\"># second_book</span><span class=\"nd\">@register</span><span class=\"p\">(</span><span class=\"n\">_name</span><span class=\"o\">=</span><span class=\"s2\">&quot;other_book&quot;</span><span class=\"p\">)</span>  <span class=\"c1\"># other_book, book of another author</span><span class=\"k\">class</span> <span class=\"nc\">BookFactory</span><span class=\"p\">(</span><span class=\"n\">factory</span><span class=\"o\">.</span><span class=\"n\">Factory</span><span class=\"p\">):</span>    <span class=\"k\">class</span> <span class=\"nc\">Meta</span><span class=\"p\">:</span>        <span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">Book</span><span class=\"nd\">@pytest</span><span class=\"o\">.</span><span class=\"n\">fixture</span><span class=\"k\">def</span> <span class=\"nf\">other_book__author</span><span class=\"p\">(</span><span class=\"n\">second_author</span><span class=\"p\">):</span>    <span class=\"sd\">&quot;&quot;&quot;Make the relation of the second_book to another (second) author.&quot;&quot;&quot;</span>    <span class=\"k\">return</span> <span class=\"n\">second_author</span></pre></div></div></div><div class=\"section\" id=\"attributes-are-fixtures\"><h2>Attributes are Fixtures<a class=\"headerlink\" href=\"#attributes-are-fixtures\" title=\"Permalink to this headline\">\u00b6</a></h2><p>There are fixtures created for factory attributes. Attribute names are prefixed with the model fixture name anddouble underscore (similar to the convention used by factory_boy).</p><div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"nd\">@pytest</span><span class=\"o\">.</span><span class=\"n\">mark</span><span class=\"o\">.</span><span class=\"n\">parametrize</span><span class=\"p\">(</span><span class=\"s2\">&quot;author__name&quot;</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s2\">&quot;Bill Gates&quot;</span><span class=\"p\">])</span><span class=\"k\">def</span> <span class=\"nf\">test_model_fixture</span><span class=\"p\">(</span><span class=\"n\">author</span><span class=\"p\">):</span>    <span class=\"k\">assert</span> <span class=\"n\">author</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;Bill Gates&quot;</span></pre></div></div></div><div class=\"section\" id=\"subfactory\"><h2>SubFactory<a class=\"headerlink\" href=\"#subfactory\" title=\"Permalink to this headline\">\u00b6</a></h2><p>Sub-factory attribute points to the model fixture of the sub-factory.Attributes of sub-factories are injected as dependencies to the model fixture and can be <a class=\"reference external\" href=\"https://docs.pytest.org/en/latest/how-to/fixtures.html#overriding-fixtures-on-various-levels\">overridden</a> viathe parametrization.</p></div><div class=\"section\" id=\"related-factory\"><h2>Related Factory<a class=\"headerlink\" href=\"#related-factory\" title=\"Permalink to this headline\">\u00b6</a></h2><p>Related factory attribute points to the model fixture of the related factory.Attributes of related factories are injected as dependencies to the model fixture and can be <a class=\"reference external\" href=\"https://docs.pytest.org/en/latest/how-to/fixtures.html#overriding-fixtures-on-various-levels\">overridden</a> viathe parametrization.</p></div><div class=\"section\" id=\"post-generation\"><h2>post-generation<a class=\"headerlink\" href=\"#post-generation\" title=\"Permalink to this headline\">\u00b6</a></h2><p>Post-generation attribute fixture implements only the extracted value for the post generation function.</p></div><div class=\"section\" id=\"integration\"><h2>Integration<a class=\"headerlink\" href=\"#integration\" title=\"Permalink to this headline\">\u00b6</a></h2><p>An example of <a class=\"reference external\" href=\"https://factoryboy.readthedocs.io\">factory_boy</a> and <a class=\"reference external\" href=\"https://pytest.org\">pytest</a> integration.</p><div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"c1\"># factories/__init__.py</span><span class=\"kn\">import</span> <span class=\"nn\">factory</span><span class=\"kn\">from</span> <span class=\"nn\">faker</span> <span class=\"kn\">import</span> <span class=\"n\">Factory</span> <span class=\"k\">as</span> <span class=\"n\">FakerFactory</span><span class=\"n\">faker</span> <span class=\"o\">=</span> <span class=\"n\">FakerFactory</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">()</span><span class=\"k\">class</span> <span class=\"nc\">AuthorFactory</span><span class=\"p\">(</span><span class=\"n\">factory</span><span class=\"o\">.</span><span class=\"n\">django</span><span class=\"o\">.</span><span class=\"n\">DjangoModelFactory</span><span class=\"p\">):</span>    <span class=\"sd\">&quot;&quot;&quot;Author factory.&quot;&quot;&quot;</span>    <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">factory</span><span class=\"o\">.</span><span class=\"n\">LazyAttribute</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">faker</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">())</span>    <span class=\"k\">class</span> <span class=\"nc\">Meta</span><span class=\"p\">:</span>        <span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;app.Author&#39;</span><span class=\"k\">class</span> <span class=\"nc\">BookFactory</span><span class=\"p\">(</span><span class=\"n\">factory</span><span class=\"o\">.</span><span class=\"n\">django</span><span class=\"o\">.</span><span class=\"n\">DjangoModelFactory</span><span class=\"p\">):</span>    <span class=\"sd\">&quot;&quot;&quot;Book factory.&quot;&quot;&quot;</span>    <span class=\"n\">title</span> <span class=\"o\">=</span> <span class=\"n\">factory</span><span class=\"o\">.</span><span class=\"n\">LazyAttribute</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">faker</span><span class=\"o\">.</span><span class=\"n\">sentence</span><span class=\"p\">(</span><span class=\"n\">nb_words</span><span class=\"o\">=</span><span class=\"mi\">4</span><span class=\"p\">))</span>    <span class=\"k\">class</span> <span class=\"nc\">Meta</span><span class=\"p\">:</span>        <span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;app.Book&#39;</span>    <span class=\"n\">author</span> <span class=\"o\">=</span> <span class=\"n\">factory</span><span class=\"o\">.</span><span class=\"n\">SubFactory</span><span class=\"p\">(</span><span class=\"n\">AuthorFactory</span><span class=\"p\">)</span></pre></div></div><div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"c1\"># tests/conftest.py</span><span class=\"kn\">from</span> <span class=\"nn\">pytest_factoryboy</span> <span class=\"kn\">import</span> <span class=\"n\">register</span><span class=\"kn\">from</span> <span class=\"nn\">factories</span> <span class=\"kn\">import</span> <span class=\"n\">AuthorFactory</span><span class=\"p\">,</span> <span class=\"n\">BookFactory</span><span class=\"n\">register</span><span class=\"p\">(</span><span class=\"n\">AuthorFactory</span><span class=\"p\">)</span><span class=\"n\">register</span><span class=\"p\">(</span><span class=\"n\">BookFactory</span><span class=\"p\">)</span></pre></div></div><div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"c1\"># tests/test_models.py</span><span class=\"kn\">from</span> <span class=\"nn\">app.models</span> <span class=\"kn\">import</span> <span class=\"n\">Book</span><span class=\"kn\">from</span> <span class=\"nn\">factories</span> <span class=\"kn\">import</span> <span class=\"n\">BookFactory</span><span class=\"k\">def</span> <span class=\"nf\">test_book_factory</span><span class=\"p\">(</span><span class=\"n\">book_factory</span><span class=\"p\">):</span>    <span class=\"sd\">&quot;&quot;&quot;Factories become fixtures automatically.&quot;&quot;&quot;</span>    <span class=\"k\">assert</span> <span class=\"n\">book_factory</span> <span class=\"ow\">is</span> <span class=\"n\">BookFactory</span><span class=\"k\">def</span> <span class=\"nf\">test_book</span><span class=\"p\">(</span><span class=\"n\">book</span><span class=\"p\">):</span>    <span class=\"sd\">&quot;&quot;&quot;Instances become fixtures automatically.&quot;&quot;&quot;</span>    <span class=\"k\">assert</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">book</span><span class=\"p\">,</span> <span class=\"n\">Book</span><span class=\"p\">)</span><span class=\"nd\">@pytest</span><span class=\"o\">.</span><span class=\"n\">mark</span><span class=\"o\">.</span><span class=\"n\">parametrize</span><span class=\"p\">(</span><span class=\"s2\">&quot;book__title&quot;</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s2\">&quot;PyTest for Dummies&quot;</span><span class=\"p\">])</span><span class=\"nd\">@pytest</span><span class=\"o\">.</span><span class=\"n\">mark</span><span class=\"o\">.</span><span class=\"n\">parametrize</span><span class=\"p\">(</span><span class=\"s2\">&quot;author__name&quot;</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s2\">&quot;Bill Gates&quot;</span><span class=\"p\">])</span><span class=\"k\">def</span> <span class=\"nf\">test_parametrized</span><span class=\"p\">(</span><span class=\"n\">book</span><span class=\"p\">):</span>    <span class=\"sd\">&quot;&quot;&quot;You can set any factory attribute as a fixture using naming convention.&quot;&quot;&quot;</span>    <span class=\"k\">assert</span> <span class=\"n\">book</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;PyTest for Dummies&quot;</span>    <span class=\"k\">assert</span> <span class=\"n\">book</span><span class=\"o\">.</span><span class=\"n\">author</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;Bill Gates&quot;</span></pre></div></div></div><div class=\"section\" id=\"fixture-partial-specialization\"><h2>Fixture partial specialization<a class=\"headerlink\" href=\"#fixture-partial-specialization\" title=\"Permalink to this headline\">\u00b6</a></h2><p>There is a possibility to pass keyword parameters in order to override factory attribute values during fixtureregistration. This comes in handy when your test case is requesting a lot of fixture flavors. Too much for theregular pytest parametrization.In this case, you can register fixture flavors in the local test module and specify value deviations inside <code class=\"docutils literal notranslate\"><span class=\"pre\">register</span></code>function calls.</p><div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">register</span><span class=\"p\">(</span><span class=\"n\">AuthorFactory</span><span class=\"p\">,</span> <span class=\"s2\">&quot;male_author&quot;</span><span class=\"p\">,</span> <span class=\"n\">gender</span><span class=\"o\">=</span><span class=\"s2\">&quot;M&quot;</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">&quot;John Doe&quot;</span><span class=\"p\">)</span><span class=\"n\">register</span><span class=\"p\">(</span><span class=\"n\">AuthorFactory</span><span class=\"p\">,</span> <span class=\"s2\">&quot;female_author&quot;</span><span class=\"p\">,</span> <span class=\"n\">gender</span><span class=\"o\">=</span><span class=\"s2\">&quot;F&quot;</span><span class=\"p\">)</span><span class=\"nd\">@pytest</span><span class=\"o\">.</span><span class=\"n\">fixture</span><span class=\"k\">def</span> <span class=\"nf\">female_author__name</span><span class=\"p\">():</span>    <span class=\"sd\">&quot;&quot;&quot;Override female author name as a separate fixture.&quot;&quot;&quot;</span>    <span class=\"k\">return</span> <span class=\"s2\">&quot;Jane Doe&quot;</span><span class=\"nd\">@pytest</span><span class=\"o\">.</span><span class=\"n\">mark</span><span class=\"o\">.</span><span class=\"n\">parametrize</span><span class=\"p\">(</span><span class=\"s2\">&quot;male_author__age&quot;</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"mi\">42</span><span class=\"p\">])</span>  <span class=\"c1\"># Override even more</span><span class=\"k\">def</span> <span class=\"nf\">test_partial</span><span class=\"p\">(</span><span class=\"n\">male_author</span><span class=\"p\">,</span> <span class=\"n\">female_author</span><span class=\"p\">):</span>    <span class=\"sd\">&quot;&quot;&quot;Test fixture partial specialization.&quot;&quot;&quot;</span>    <span class=\"k\">assert</span> <span class=\"n\">male_author</span><span class=\"o\">.</span><span class=\"n\">gender</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;M&quot;</span>    <span class=\"k\">assert</span> <span class=\"n\">male_author</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;John Doe&quot;</span>    <span class=\"k\">assert</span> <span class=\"n\">male_author</span><span class=\"o\">.</span><span class=\"n\">age</span> <span class=\"o\">==</span> <span class=\"mi\">42</span>    <span class=\"k\">assert</span> <span class=\"n\">female_author</span><span class=\"o\">.</span><span class=\"n\">gender</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;F&quot;</span>    <span class=\"k\">assert</span> <span class=\"n\">female_author</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;Jane Doe&quot;</span></pre></div></div></div><div class=\"section\" id=\"fixture-attributes\"><h2>Fixture attributes<a class=\"headerlink\" href=\"#fixture-attributes\" title=\"Permalink to this headline\">\u00b6</a></h2><p>Sometimes it is necessary to pass an instance of another fixture as an attribute value to the factory.It is possible to override the generated attribute fixture where desired values can be requested asfixture dependencies. There is also a lazy wrapper for the fixture that can be used in the parametrizationwithout defining fixtures in a module.</p><p>LazyFixture constructor accepts either existing fixture name or callable with dependencies:</p><div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">pytest</span><span class=\"kn\">from</span> <span class=\"nn\">pytest_factoryboy</span> <span class=\"kn\">import</span> <span class=\"n\">register</span><span class=\"p\">,</span> <span class=\"n\">LazyFixture</span><span class=\"nd\">@pytest</span><span class=\"o\">.</span><span class=\"n\">mark</span><span class=\"o\">.</span><span class=\"n\">parametrize</span><span class=\"p\">(</span><span class=\"s2\">&quot;book__author&quot;</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"n\">LazyFixture</span><span class=\"p\">(</span><span class=\"s2\">&quot;another_author&quot;</span><span class=\"p\">)])</span><span class=\"k\">def</span> <span class=\"nf\">test_lazy_fixture_name</span><span class=\"p\">(</span><span class=\"n\">book</span><span class=\"p\">,</span> <span class=\"n\">another_author</span><span class=\"p\">):</span>    <span class=\"sd\">&quot;&quot;&quot;Test that book author is replaced with another author by fixture name.&quot;&quot;&quot;</span>    <span class=\"k\">assert</span> <span class=\"n\">book</span><span class=\"o\">.</span><span class=\"n\">author</span> <span class=\"o\">==</span> <span class=\"n\">another_author</span><span class=\"nd\">@pytest</span><span class=\"o\">.</span><span class=\"n\">mark</span><span class=\"o\">.</span><span class=\"n\">parametrize</span><span class=\"p\">(</span><span class=\"s2\">&quot;book__author&quot;</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"n\">LazyFixture</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">another_author</span><span class=\"p\">:</span> <span class=\"n\">another_author</span><span class=\"p\">)])</span><span class=\"k\">def</span> <span class=\"nf\">test_lazy_fixture_callable</span><span class=\"p\">(</span><span class=\"n\">book</span><span class=\"p\">,</span> <span class=\"n\">another_author</span><span class=\"p\">):</span>    <span class=\"sd\">&quot;&quot;&quot;Test that book author is replaced with another author by callable.&quot;&quot;&quot;</span>    <span class=\"k\">assert</span> <span class=\"n\">book</span><span class=\"o\">.</span><span class=\"n\">author</span> <span class=\"o\">==</span> <span class=\"n\">another_author</span><span class=\"c1\"># Can also be used in the partial specialization during the registration.</span><span class=\"n\">register</span><span class=\"p\">(</span><span class=\"n\">BookFactory</span><span class=\"p\">,</span> <span class=\"s2\">&quot;another_book&quot;</span><span class=\"p\">,</span> <span class=\"n\">author</span><span class=\"o\">=</span><span class=\"n\">LazyFixture</span><span class=\"p\">(</span><span class=\"s2\">&quot;another_author&quot;</span><span class=\"p\">))</span></pre></div></div></div><div class=\"section\" id=\"generic-container-classes-as-models\"><h2>Generic container classes as models<a class=\"headerlink\" href=\"#generic-container-classes-as-models\" title=\"Permalink to this headline\">\u00b6</a></h2><p>It\u2019s often useful to create factories for <code class=\"docutils literal notranslate\"><span class=\"pre\">dict</span></code> or other common generic container classes.In that case, you should wrap the container class around <code class=\"docutils literal notranslate\"><span class=\"pre\">named_model(...)</span></code>, so that pytest-factoryboy can correctly determine the model name when using it in a SubFactory or RelatedFactory.</p><p>Pytest-factoryboy will otherwise raise a warning.</p><p>For example:</p><div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">factory</span><span class=\"kn\">from</span> <span class=\"nn\">pytest_factoryboy</span> <span class=\"kn\">import</span> <span class=\"n\">named_model</span><span class=\"p\">,</span> <span class=\"n\">register</span><span class=\"nd\">@register</span><span class=\"k\">class</span> <span class=\"nc\">JSONPayload</span><span class=\"p\">(</span><span class=\"n\">factory</span><span class=\"o\">.</span><span class=\"n\">Factory</span><span class=\"p\">):</span>    <span class=\"k\">class</span> <span class=\"nc\">Meta</span><span class=\"p\">:</span>        <span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">named_model</span><span class=\"p\">(</span><span class=\"s2\">&quot;JSONPayload&quot;</span><span class=\"p\">,</span> <span class=\"nb\">dict</span><span class=\"p\">)</span>    <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;foo&quot;</span><span class=\"k\">def</span> <span class=\"nf\">test_foo</span><span class=\"p\">(</span><span class=\"n\">json_payload</span><span class=\"p\">):</span>    <span class=\"k\">assert</span> <span class=\"n\">json_payload</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;foo&quot;</span></pre></div></div><p>As a bonus, factory is automatically registering the <code class=\"docutils literal notranslate\"><span class=\"pre\">json_payload</span></code> fixture (rather than <code class=\"docutils literal notranslate\"><span class=\"pre\">dict</span></code>), so there is no need to override <code class=\"docutils literal notranslate\"><span class=\"pre\">&#64;register(_name=&quot;json_payload&quot;))</span></code>.</p></div></div><div class=\"section\" id=\"post-generation-dependencies\"><h1>Post-generation dependencies<a class=\"headerlink\" href=\"#post-generation-dependencies\" title=\"Permalink to this headline\">\u00b6</a></h1><p>Unlike factory_boy which binds related objects using an internal container to store results of lazy evaluations,pytest-factoryboy relies on the PyTest request.</p><p>Circular dependencies between objects can be resolved using post-generation hooks/related factories in combination withpassing the SelfAttribute, but in the case of PyTest request fixture functions have to return values in order to be cachedin the request and to become available to other fixtures.</p><p>That\u2019s why evaluation of the post-generation declaration in pytest-factoryboy is deferred until callingthe test function.This solves circular dependency resolution for situations like:</p><div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">o</span><span class=\"o\">-&gt;</span><span class=\"p\">[</span> <span class=\"n\">A</span> <span class=\"p\">]</span><span class=\"o\">--&gt;</span><span class=\"p\">[</span> <span class=\"n\">B</span> <span class=\"p\">]</span><span class=\"o\">&lt;--</span><span class=\"p\">[</span> <span class=\"n\">C</span> <span class=\"p\">]</span><span class=\"o\">-</span><span class=\"n\">o</span><span class=\"o\">|</span>                        <span class=\"o\">|</span><span class=\"n\">o</span><span class=\"o\">----</span><span class=\"p\">(</span><span class=\"n\">C</span> <span class=\"n\">depends</span> <span class=\"n\">on</span> <span class=\"n\">A</span><span class=\"p\">)</span><span class=\"o\">----</span><span class=\"n\">o</span></pre></div></div><p>On the other hand, deferring the evaluation of post-generation declarations evaluation makes their result unavailable during the generationof objects that are not in the circular dependency, but they rely on the post-generation action.</p><p>pytest-factoryboy is trying to detect cycles and resolve post-generation dependencies automatically.</p><div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">pytest_factoryboy</span> <span class=\"kn\">import</span> <span class=\"n\">register</span><span class=\"k\">class</span> <span class=\"nc\">Foo</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">):</span>        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">value</span><span class=\"k\">class</span> <span class=\"nc\">Bar</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">foo</span><span class=\"p\">):</span>        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">foo</span> <span class=\"o\">=</span> <span class=\"n\">foo</span><span class=\"nd\">@register</span><span class=\"k\">class</span> <span class=\"nc\">FooFactory</span><span class=\"p\">(</span><span class=\"n\">factory</span><span class=\"o\">.</span><span class=\"n\">Factory</span><span class=\"p\">):</span>    <span class=\"sd\">&quot;&quot;&quot;Foo factory.&quot;&quot;&quot;</span>    <span class=\"k\">class</span> <span class=\"nc\">Meta</span><span class=\"p\">:</span>        <span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">Foo</span>    <span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>    <span class=\"nd\">@factory</span><span class=\"o\">.</span><span class=\"n\">post_generation</span>    <span class=\"k\">def</span> <span class=\"nf\">set1</span><span class=\"p\">(</span><span class=\"n\">foo</span><span class=\"p\">,</span> <span class=\"n\">create</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>        <span class=\"n\">foo</span><span class=\"o\">.</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"k\">class</span> <span class=\"nc\">BarFactory</span><span class=\"p\">(</span><span class=\"n\">factory</span><span class=\"o\">.</span><span class=\"n\">Factory</span><span class=\"p\">):</span>    <span class=\"sd\">&quot;&quot;&quot;Bar factory.&quot;&quot;&quot;</span>    <span class=\"n\">foo</span> <span class=\"o\">=</span> <span class=\"n\">factory</span><span class=\"o\">.</span><span class=\"n\">SubFactory</span><span class=\"p\">(</span><span class=\"n\">FooFactory</span><span class=\"p\">)</span>    <span class=\"nd\">@classmethod</span>    <span class=\"k\">def</span> <span class=\"nf\">_create</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"p\">,</span> <span class=\"n\">model_class</span><span class=\"p\">,</span> <span class=\"n\">foo</span><span class=\"p\">):</span>        <span class=\"k\">assert</span> <span class=\"n\">foo</span><span class=\"o\">.</span><span class=\"n\">value</span> <span class=\"o\">==</span> <span class=\"mi\">1</span>  <span class=\"c1\"># Assert that set1 is evaluated before object generation</span>        <span class=\"k\">return</span> <span class=\"nb\">super</span><span class=\"p\">(</span><span class=\"n\">BarFactory</span><span class=\"p\">,</span> <span class=\"bp\">cls</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">_create</span><span class=\"p\">(</span><span class=\"n\">model_class</span><span class=\"p\">,</span> <span class=\"n\">foo</span><span class=\"o\">=</span><span class=\"n\">foo</span><span class=\"p\">)</span>    <span class=\"k\">class</span> <span class=\"nc\">Meta</span><span class=\"p\">:</span>        <span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">Bar</span><span class=\"n\">register</span><span class=\"p\">(</span><span class=\"n\">BarFactory</span><span class=\"p\">,</span> <span class=\"s2\">&quot;bar&quot;</span><span class=\"p\">)</span><span class=\"sd\">&quot;&quot;&quot;Forces &#39;set1&#39; to be evaluated first.&quot;&quot;&quot;</span><span class=\"k\">def</span> <span class=\"nf\">test_depends_on_set1</span><span class=\"p\">(</span><span class=\"n\">bar</span><span class=\"p\">):</span>    <span class=\"sd\">&quot;&quot;&quot;Test that post-generation hooks are done and the value is 2.&quot;&quot;&quot;</span>    <span class=\"k\">assert</span> <span class=\"n\">depends_on_1</span><span class=\"o\">.</span><span class=\"n\">foo</span><span class=\"o\">.</span><span class=\"n\">value</span> <span class=\"o\">==</span> <span class=\"mi\">1</span></pre></div></div><div class=\"section\" id=\"hooks\"><h2>Hooks<a class=\"headerlink\" href=\"#hooks\" title=\"Permalink to this headline\">\u00b6</a></h2><p>pytest-factoryboy exposes several <a class=\"reference external\" href=\"http://pytest.org/latest/plugins.html#well-specified-hooks\">pytest hooks</a>which might be helpful for e.g. controlling database transaction, for reporting etc:</p><ul class=\"simple\"><li>pytest_factoryboy_done(request) - Called after all factory-based fixtures and their post-generation actions have been evaluated.</li></ul></div><div class=\"section\" id=\"license\"><h2>License<a class=\"headerlink\" href=\"#license\" title=\"Permalink to this headline\">\u00b6</a></h2><p>This software is licensed under the <a class=\"reference external\" href=\"http://en.wikipedia.org/wiki/MIT_License\">MIT license</a>.</p><p>\u00a9 2015 Oleg Pidsadnyi, Anatoly Bubenkov and others</p></div></div><div class=\"section\" id=\"authors\"><h1>Authors<a class=\"headerlink\" href=\"#authors\" title=\"Permalink to this headline\">\u00b6</a></h1><dl class=\"docutils\"><dt><a class=\"reference external\" href=\"mailto:oleg&#46;pidsadnyi&#37;&#52;&#48;gmail&#46;com\">Oleg Pidsadnyi</a></dt><dd>original idea and implementation</dd></dl><p>These people have contributed to <cite>pytest-factoryboy</cite>, in alphabetical order:</p><ul class=\"simple\"><li><a class=\"reference external\" href=\"mailto:bubenkoff&#37;&#52;&#48;gmail&#46;com\">Anatoly Bubenkov</a></li><li><a class=\"reference external\" href=\"https://github.com/dduong42\">Daniel Duong</a></li><li><a class=\"reference external\" href=\"https://github.com/blueyed\">Daniel Hahler</a></li><li><a class=\"reference external\" href=\"https://github.com/hugovk\">Hugo van Kemenade</a></li><li><a class=\"reference external\" href=\"https://github.com/p13773\">p13773</a></li><li><a class=\"reference external\" href=\"https://github.com/kvas-it\">Vasily Kuznetsov</a></li></ul></div><div class=\"section\" id=\"changelog\"><h1>Changelog<a class=\"headerlink\" href=\"#changelog\" title=\"Permalink to this headline\">\u00b6</a></h1><div class=\"section\" id=\"unreleased\"><h2>Unreleased<a class=\"headerlink\" href=\"#unreleased\" title=\"Permalink to this headline\">\u00b6</a></h2></div><div class=\"section\" id=\"id1\"><h2>2.5.1<a class=\"headerlink\" href=\"#id1\" title=\"Permalink to this headline\">\u00b6</a></h2><ul class=\"simple\"><li>Fix PytestDeprecationWarning. <a class=\"reference external\" href=\"https://github.com/pytest-dev/pytest-factoryboy/pull/180\">#180</a> <a class=\"reference external\" href=\"https://github.com/pytest-dev/pytest-factoryboy/issues/179\">#179</a></li></ul></div><div class=\"section\" id=\"id4\"><h2>2.5.0<a class=\"headerlink\" href=\"#id4\" title=\"Permalink to this headline\">\u00b6</a></h2><ul class=\"simple\"><li>Using a generic class container like <code class=\"docutils literal notranslate\"><span class=\"pre\">dict</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">list</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">set</span></code>, etc. will raise a warning suggesting you to wrap your model using <code class=\"docutils literal notranslate\"><span class=\"pre\">named_model(...)</span></code>. Doing this will make sure that the fixture name is correctly chosen, otherwise SubFactory and RelatedFactory aren\u2019t able to determine the name of the model. See <a class=\"reference external\" href=\"https://pytest-factoryboy.readthedocs.io/en/latest/#generic-container-classes-as-models\">Generic Container Classes as models</a> <a class=\"reference external\" href=\"https://github.com/pytest-dev/pytest-factoryboy/pull/167\">#167</a></li><li>Fix <code class=\"docutils literal notranslate\"><span class=\"pre\">Factory._after_postgeneration</span></code> being invoked twice. <a class=\"reference external\" href=\"https://github.com/pytest-dev/pytest-factoryboy/pull/164\">#164</a> <a class=\"reference external\" href=\"https://github.com/pytest-dev/pytest-factoryboy/issues/156\">#156</a></li><li>Stack traces caused by pytest-factoryboy are now slimmer. <a class=\"reference external\" href=\"https://github.com/pytest-dev/pytest-factoryboy/pull/169\">#169</a></li><li>Check for naming conflicts between factory and model fixture name, and raise a clear error immediately. <a class=\"reference external\" href=\"https://github.com/pytest-dev/pytest-factoryboy/pull/86\">#86</a></li></ul></div><div class=\"section\" id=\"id11\"><h2>2.4.0<a class=\"headerlink\" href=\"#id11\" title=\"Permalink to this headline\">\u00b6</a></h2><ul class=\"simple\"><li><code class=\"docutils literal notranslate\"><span class=\"pre\">LazyFixture</span></code> is now a Generic[T] type.</li><li>Simplify fixture generation (internal change).</li><li>Use poetry (internal change).</li></ul></div><div class=\"section\" id=\"id12\"><h2>2.3.1<a class=\"headerlink\" href=\"#id12\" title=\"Permalink to this headline\">\u00b6</a></h2><ul class=\"simple\"><li>Fix AttributeError when using LazyFixture in register(\u2026) <a class=\"reference external\" href=\"https://github.com/pytest-dev/pytest-factoryboy/issues/159\">#159</a> <a class=\"reference external\" href=\"https://github.com/pytest-dev/pytest-factoryboy/issues/158\">#158</a></li></ul></div><div class=\"section\" id=\"id15\"><h2>2.3.0<a class=\"headerlink\" href=\"#id15\" title=\"Permalink to this headline\">\u00b6</a></h2><ul class=\"simple\"><li>Add support for <code class=\"docutils literal notranslate\"><span class=\"pre\">factory.PostGenerationMethodCall</span></code> <a class=\"reference external\" href=\"https://github.com/pytest-dev/pytest-factoryboy/pull/103\">#103</a> <a class=\"reference external\" href=\"https://github.com/pytest-dev/pytest-factoryboy/issues/87\">#87</a>.</li></ul></div><div class=\"section\" id=\"id18\"><h2>2.2.1<a class=\"headerlink\" href=\"#id18\" title=\"Permalink to this headline\">\u00b6</a></h2><ul class=\"simple\"><li><code class=\"docutils literal notranslate\"><span class=\"pre\">&#64;register()</span></code> decorator now refuses kwargs after the initial specialization. This behaviour was mistakenly introduced in version 2.2.0, and it complicates the usage of the <code class=\"docutils literal notranslate\"><span class=\"pre\">register</span></code> function unnecessarily. For example, the following is not allowed anymore:</li></ul><div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"c1\"># INVALID</span><span class=\"n\">register</span><span class=\"p\">(</span>    <span class=\"n\">_name</span><span class=\"o\">=</span><span class=\"s2\">&quot;second_author&quot;</span><span class=\"p\">,</span>    <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">&quot;C.S. Lewis&quot;</span><span class=\"p\">,</span><span class=\"p\">)(</span>    <span class=\"n\">AuthorFactory</span><span class=\"p\">,</span>    <span class=\"n\">register_user</span><span class=\"o\">=</span><span class=\"s2\">&quot;cs_lewis&quot;</span><span class=\"p\">,</span>    <span class=\"n\">register_user__password</span><span class=\"o\">=</span><span class=\"s2\">&quot;Aslan1&quot;</span><span class=\"p\">,</span><span class=\"p\">)</span><span class=\"c1\"># VALID</span><span class=\"n\">register</span><span class=\"p\">(</span>    <span class=\"n\">AuthorFactory</span><span class=\"p\">,</span>    <span class=\"n\">_name</span><span class=\"o\">=</span><span class=\"s2\">&quot;second_author&quot;</span><span class=\"p\">,</span>    <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">&quot;C.S. Lewis&quot;</span><span class=\"p\">,</span>    <span class=\"n\">register_user</span><span class=\"o\">=</span><span class=\"s2\">&quot;cs_lewis&quot;</span><span class=\"p\">,</span>    <span class=\"n\">register_user__password</span><span class=\"o\">=</span><span class=\"s2\">&quot;Aslan1&quot;</span><span class=\"p\">,</span><span class=\"p\">)</span></pre></div></div></div><div class=\"section\" id=\"id19\"><h2>2.2.0<a class=\"headerlink\" href=\"#id19\" title=\"Permalink to this headline\">\u00b6</a></h2><ul class=\"simple\"><li>Drop support for Python 3.6. We now support only python &gt;= 3.7.</li><li>Improve \u201cdebuggability\u201d. Internal pytest-factoryboy calls are now visible when using a debugger like PDB or PyCharm.</li><li>Add type annotations. Now <code class=\"docutils literal notranslate\"><span class=\"pre\">register</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">LazyFixture</span></code> are type annotated.</li><li>Fix <a class=\"reference external\" href=\"https://factoryboy.readthedocs.io/en/stable/reference.html#factory.Factory._after_postgeneration\">Factory._after_postgeneration</a> method not getting the evaluated <code class=\"docutils literal notranslate\"><span class=\"pre\">post_generations</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">RelatedFactory</span></code> results correctly in the <code class=\"docutils literal notranslate\"><span class=\"pre\">result</span></code> param.</li><li>Factories can now be registered inside classes (even nested classes) and they won\u2019t pollute the module namespace.</li><li>Allow the <code class=\"docutils literal notranslate\"><span class=\"pre\">&#64;register</span></code> decorator to be called with parameters:</li></ul><div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"nd\">@register</span><span class=\"nd\">@register</span><span class=\"p\">(</span><span class=\"s2\">&quot;other_author&quot;</span><span class=\"p\">)</span><span class=\"k\">class</span> <span class=\"nc\">AuthorFactory</span><span class=\"p\">(</span><span class=\"n\">Factory</span><span class=\"p\">):</span>    <span class=\"o\">...</span></pre></div></div></div><div class=\"section\" id=\"id20\"><h2>2.1.0<a class=\"headerlink\" href=\"#id20\" title=\"Permalink to this headline\">\u00b6</a></h2><ul class=\"simple\"><li>Add support for factory_boy &gt;= 3.2.0</li><li>Drop support for Python 2.7, 3.4, 3.5. We now support only python &gt;= 3.6.</li><li>Drop support for pytest &lt; 4.6. We now support only pytest &gt;= 4.6.</li><li>Add missing versions of python (3.9 and 3.10) and pytest (6.x.x) to the CI test matrix.</li></ul></div><div class=\"section\" id=\"id21\"><h2>2.0.3<a class=\"headerlink\" href=\"#id21\" title=\"Permalink to this headline\">\u00b6</a></h2><ul class=\"simple\"><li>Fix compatibility with pytest 5.</li></ul></div><div class=\"section\" id=\"id22\"><h2>2.0.2<a class=\"headerlink\" href=\"#id22\" title=\"Permalink to this headline\">\u00b6</a></h2><ul class=\"simple\"><li>Fix warning <cite>use of getfuncargvalue is deprecated, use getfixturevalue</cite> (sliverc)</li></ul></div><div class=\"section\" id=\"id23\"><h2>2.0.1<a class=\"headerlink\" href=\"#id23\" title=\"Permalink to this headline\">\u00b6</a></h2><p>Breaking change due to the heavy refactor of both pytest and factory_boy.</p><ul class=\"simple\"><li>Failing test for using a <cite>attributes</cite> field on the factory (blueyed)</li><li>Minimal pytest version is 3.3.2 (olegpidsadnyi)</li><li>Minimal factory_boy version is 2.10.0 (olegpidsadnyi)</li></ul></div><div class=\"section\" id=\"id24\"><h2>1.3.2<a class=\"headerlink\" href=\"#id24\" title=\"Permalink to this headline\">\u00b6</a></h2><ul class=\"simple\"><li>use {posargs} in pytest command (blueyed)</li><li>pin factory_boy&lt;2.9 (blueyed)</li></ul></div><div class=\"section\" id=\"id25\"><h2>1.3.1<a class=\"headerlink\" href=\"#id25\" title=\"Permalink to this headline\">\u00b6</a></h2><ul class=\"simple\"><li>fix LazyFixture evaluation order (olegpidsadnyi)</li></ul></div><div class=\"section\" id=\"id26\"><h2>1.3.0<a class=\"headerlink\" href=\"#id26\" title=\"Permalink to this headline\">\u00b6</a></h2><ul class=\"simple\"><li>replace request._fixturedefs by request._fixture_defs (p13773)</li></ul></div><div class=\"section\" id=\"id27\"><h2>1.2.2<a class=\"headerlink\" href=\"#id27\" title=\"Permalink to this headline\">\u00b6</a></h2><ul class=\"simple\"><li>fix post-generation dependencies (olegpidsadnyi)</li></ul></div><div class=\"section\" id=\"id28\"><h2>1.2.1<a class=\"headerlink\" href=\"#id28\" title=\"Permalink to this headline\">\u00b6</a></h2><ul class=\"simple\"><li>automatic resolution of the post-generation dependencies (olegpidsadnyi, kvas-it)</li></ul></div><div class=\"section\" id=\"id29\"><h2>1.1.6<a class=\"headerlink\" href=\"#id29\" title=\"Permalink to this headline\">\u00b6</a></h2><ul class=\"simple\"><li>fixes fixture function module name attribute (olegpidsadnyi)</li><li>fixes _after_postgeneration hook invocation for deferred post-generation declarations (olegpidsadnyi)</li></ul></div><div class=\"section\" id=\"id30\"><h2>1.1.5<a class=\"headerlink\" href=\"#id30\" title=\"Permalink to this headline\">\u00b6</a></h2><ul class=\"simple\"><li>support factory models to be passed as strings (bubenkoff)</li></ul></div><div class=\"section\" id=\"id31\"><h2>1.1.3<a class=\"headerlink\" href=\"#id31\" title=\"Permalink to this headline\">\u00b6</a></h2><ul class=\"simple\"><li>circular dependency determination is fixed for the post-generation (olegpidsadnyi)</li></ul></div><div class=\"section\" id=\"id32\"><h2>1.1.2<a class=\"headerlink\" href=\"#id32\" title=\"Permalink to this headline\">\u00b6</a></h2><ul class=\"simple\"><li>circular dependency determination is fixed for the RelatedFactory attributes (olegpidsadnyi)</li></ul></div><div class=\"section\" id=\"id33\"><h2>1.1.1<a class=\"headerlink\" href=\"#id33\" title=\"Permalink to this headline\">\u00b6</a></h2><ul class=\"simple\"><li>fix installation issue when django environment is not set (bubenkoff, amakhnach)</li></ul></div><div class=\"section\" id=\"id34\"><h2>1.1.0<a class=\"headerlink\" href=\"#id34\" title=\"Permalink to this headline\">\u00b6</a></h2><ul class=\"simple\"><li>fixture dependencies on deferred post-generation declarations (olegpidsadnyi)</li></ul></div><div class=\"section\" id=\"id35\"><h2>1.0.3<a class=\"headerlink\" href=\"#id35\" title=\"Permalink to this headline\">\u00b6</a></h2><ul class=\"simple\"><li>post_generation extra parameters fixed (olegpidsadnyi)</li><li>fixture partial specialization (olegpidsadnyi)</li><li>fixes readme and example (dduong42)</li><li>lazy fixtures (olegpidsadnyi)</li><li>deferred post-generation evaluation (olegpidsadnyi)</li><li>hooks (olegpidsadnyi)</li></ul></div><div class=\"section\" id=\"id36\"><h2>1.0.2<a class=\"headerlink\" href=\"#id36\" title=\"Permalink to this headline\">\u00b6</a></h2><ul class=\"simple\"><li>refactoring of the fixture function compilation (olegpidsadnyi)</li><li>related factory fix (olegpidsadnyi)</li><li>post_generation fixture dependency fixed (olegpidsadnyi)</li><li>model fixture registration with specific name (olegpidsadnyi)</li><li>README updated (olegpidsadnyi)</li></ul></div><div class=\"section\" id=\"id37\"><h2>1.0.1<a class=\"headerlink\" href=\"#id37\" title=\"Permalink to this headline\">\u00b6</a></h2><ul class=\"simple\"><li>use <code class=\"docutils literal notranslate\"><span class=\"pre\">inflection</span></code> package to convert camel case to underscore (bubenkoff)</li></ul></div><div class=\"section\" id=\"id38\"><h2>1.0.0<a class=\"headerlink\" href=\"#id38\" title=\"Permalink to this headline\">\u00b6</a></h2><ul class=\"simple\"><li>initial release (olegpidsadnyi)</li></ul></div></div>           </div>                     </div>          <footer>    <hr/>  <div role=\"contentinfo\">    <p>        &copy; Copyright 2015, Oleg Pidsadnyi, Anatoly Bubenkov and others              <span class=\"commit\">          Revision <code>ca5bb097</code>.        </span>          </p>  </div>  Built with <a href=\"http://sphinx-doc.org/\">Sphinx</a> using a <a href=\"https://github.com/rtfd/sphinx_rtd_theme\">theme</a> provided by <a href=\"https://readthedocs.org\">Read the Docs</a>. </footer>        </div>      </div>    </section>  </div>    <div class=\"rst-versions\" data-toggle=\"rst-versions\" role=\"note\" aria-label=\"versions\">    <span class=\"rst-current-version\" data-toggle=\"rst-current-version\">      <span class=\"fa fa-book\"> Read the Docs</span>      v: stable      <span class=\"fa fa-caret-down\"></span>    </span>    <div class=\"rst-other-versions\">      <dl>        <dt>Versions</dt>                  <dd><a href=\"/en/latest/\">latest</a></dd>                  <dd><a href=\"/en/stable/\">stable</a></dd>              </dl>      <dl>        <dt>Downloads</dt>                  <dd><a href=\"//pytest-factoryboy.readthedocs.io/_/downloads/en/stable/pdf/\">pdf</a></dd>                  <dd><a href=\"//pytest-factoryboy.readthedocs.io/_/downloads/en/stable/htmlzip/\">html</a></dd>                  <dd><a href=\"//pytest-factoryboy.readthedocs.io/_/downloads/en/stable/epub/\">epub</a></dd>              </dl>      <dl>        <dt>On Read the Docs</dt>          <dd>            <a href=\"//readthedocs.org/projects/pytest-factoryboy/?fromdocs=pytest-factoryboy\">Project Home</a>          </dd>          <dd>            <a href=\"//readthedocs.org/builds/pytest-factoryboy/?fromdocs=pytest-factoryboy\">Builds</a>          </dd>      </dl>      <hr/>      Free document hosting provided by <a href=\"http://www.readthedocs.org\">Read the Docs</a>.    </div>  </div>  <script type=\"text/javascript\">      jQuery(function () {          SphinxRtdTheme.Navigation.enable(true);      });  </script>     </body></html>",
  "embeddings": []
}
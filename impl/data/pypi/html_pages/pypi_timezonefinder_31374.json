{
  "libtype": "pypi",
  "libname": "timezonefinder",
  "url": "https://timezonefinder.michelfe.it/gui",
  "html": "<!DOCTYPE html><html lang=\"en\"><head>    <meta charset=\"UTF-8\">    <meta name=\"this is the main gui page for the timezonefinder(L) GUI\" content=\"\">    <meta name=\"MrMinimal64\" content=\"\">        <title>timezonefinder(L) GUI</title>        <link rel=\"stylesheet\" href=\"https://unpkg.com/leaflet@1.0.3/dist/leaflet.css\"/>    <style>                                        html, body {            margin: 0;            padding: 0;            height: 100%;            width: 100%;        }        #map-overlay {         position: absolute;            top: 1%;            left: 1%;            z-index: 1;            pointer-events: none        }        #full-size-map {            width: 100%;            height: 100%;            position: absolute;            top: 0;            left: 0;            z-index: 0;        }        #id_header_table {            font-family: Verdana, sans-serif;        }        #id_title_td {            font-weight: bold;        }        #input-layer {            pointer-events: all;            background: #f4f4f4;            font-size: 0.85em;        }        #id_choose_algo_table {            font-family: \"Courier New\", monospace;            font-size: 0.8em;        }        #id_results_div {            background: #f4f4f4;            font-family: \"Courier New\", monospace;            font-size: 0.8em;                }        #id_spacer_td {            width: 4%        }    </style></head><body><div id=\"full-size-map\"></div><div id=\"map-overlay\">    <div id=\"input-layer\">        <table id=\"id_header_table\">            <tbody>            <tr id=\"id_row_0\">                <td id=\"id_title_td\"><a>timezonefinder v6.3.0 GUI</a></td>                <td id=\"id_spacer_td\" class=\"spacer_td\"><a></a></td>                <td><a class=\"brand\" href=\"/statistic\">Statistic</a></td>                <td id=\"id_spacer_td\" class=\"spacer_td\"><a></a></td>                <td><a class=\"brand\" href=\"/api_guide\">API Guide</a></td>                <td id=\"id_spacer_td\" class=\"spacer_td\"><a></a></td>                <td><a class=\"brand\" href=\"https://github.com/MrMinimal64/timezonefinder\">GitHub</a></td>            </tr>            </tbody>        </table>        <form id=\"id_form\">            <input id=\"id_hidden_mode\" name=\"hidden_mode\" step=\"1\" type=\"hidden\" value=\"None\"/>            <table id=\"id_table0\">                <tbody>                <tr id=\"id_row_0\">                    <td><input id=\"id_longitude\" max=\"180\" min=\"-180\" name=\"longitude\"                               value=\"\" placeholder=\"Longitude\"/></td>                    <td><input id=\"id_latitude\" max=\"90\" min=\"-90\" name=\"latitude\"                               value=\"\" placeholder=\"Latitude\"/></td>                    <td>                        <button type=\"button\" name=\"search_button\" id=\"search_button_id\">Search</button>                    </td>                </tr>                </tbody>            </table>            <table id=\"id_choose_algo_table\">                <tbody>                <tr id=\"id_row_1\">                    <td><input type=\"radio\" id=\"radio_algorithm_0_id\" name=\"algorithm\" value=\"0\" checked=\"checked\">                    </td>                    <td><label for=\"radio_algorithm_0_id\">timezone_at</label><br></td>                    <td><input type=\"radio\" id=\"radio_algorithm_5_id\" name=\"algorithm\" value=\"5\"></td>                    <td><label for=\"radio_algorithm_5_id\">timezone_at_land</label></td>                    <td><input type=\"radio\" id=\"radio_algorithm_1_id\" name=\"algorithm\" value=\"1\"></td>                    <td><label for=\"radio_algorithm_1_id\">certain_timezone_at</label><br></td>                </tr>                <tr id=\"id_row_2\">                    <td><input type=\"radio\" id=\"radio_algorithm_3_id\" name=\"algorithm\" value=\"3\"></td>                    <td><label for=\"radio_algorithm_3_id\">L.timezone_at</label></td>                    <td><input type=\"radio\" id=\"radio_algorithm_4_id\" name=\"algorithm\" value=\"4\"></td>                    <td><label for=\"radio_algorithm_4_id\">L.timezone_at_land</label></td>                    <td><input type=\"radio\" id=\"radio_algorithm_2_id\" name=\"algorithm\" value=\"2\"></td>                    <td><label for=\"radio_algorithm_2_id\">closest_timezone_at</label></td>                </tr>                </tbody>            </table>        </form>    </div>    <div id=\"id_results_div\" style=\"display:none;\">        <table id=\"id_table\">                        <tbody>            <tr id=\"id_row_0\">                <td>timezone name:</td>                <td>                    <div id=\"id_timezone_display\"></div>            </tr>            <tr>                <td>time@timezone:</td>                <td>                    <div id=\"id_current_datetime_in_tz\"></div>                </td>            </tr>            <tr>                <td>UTC-offset (hours):</td>                <td>                    <div id=\"id_current_offset\"></div>                </td>            </tr>            <tr>                <td>timezone abbreviation:</td>                <td>                    <div id=\"id_tz_abbreviation\"></div>                </td>            </tr>            </tbody>        </table>    </div></div><script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.2.1/jquery.min.js\"></script><script src=\"https://unpkg.com/leaflet@1.0.3/dist/leaflet.js\"></script><script>    var map = L.map('full-size-map', {zoomControl: false}).setView([51.5, 0.0], 4); //Greenwich: UTC 0:00    var eventMarker = L.marker([0.0, 0.0]);    var tz_polygon = L.polygon([], {color: 'blue', smoothFactor: 2.0});    var latitude_field = $('#id_latitude');    var longitude_field = $('#id_longitude');    var timezone_field = $('#id_timezone_display');    var available_zones = [];    var stored_multiPolygons = [];    function get_multipolygon_of(zone_name) {    }    function giveJSONFromTo(urlString, callbackFunction) {        // or with GET data {'address':string}        $.getJSON(urlString, function (jsonData) {                callbackFunction(jsonData);            }        );    }    L.tileLayer('https://api.tiles.mapbox.com/styles/v1/{id}/tiles/{z}/{x}/{y}?access_token={accessToken}', {        attribution: 'Map data &copy; <a href=\"http://openstreetmap.org\">OpenStreetMap</a> contributors, <a href=\"http://creativecommons.org/licenses/by-sa/2.0/\">CC-BY-SA</a>, Imagery \u00a9 <a href=\"http://mapbox.com\">Mapbox</a>',        zoomOffset: -1,        // this should be set to a value where you can never see more than one 'world'        maxZoom: 18,        minZoom: 2,        id: 'mapbox/dark-v10', // dark default style        tileSize: 512,        accessToken: 'pk.eyJ1IjoiZmJ1ZGR5IiwiYSI6ImNpaDBrejlhcDB3b3c0cG0zM3cwc2FqenEifQ.dYBi9Tcipd0jVwPwMq1WNw'    }).addTo(map);    // when map is being clicked on or the search button is pressed, call the API    map.on('click', onMapClick);    function onMapClick(e) {        callAPI(e.latlng.lng, e.latlng.lat)    }    $('#search_button_id').click(function () {        callAPI(longitude_field.val(), latitude_field.val());    });    //set the radio buttons according to the mode selected in the url    $(\"input[name=algorithm][value=\" + $('#id_hidden_mode').val() + \"]\").prop('checked', true);    // call the API when page is being loaded the first time    callAPI(longitude_field.val(), latitude_field.val());    function callAPI(lng, lat) {        if (!$.isNumeric(lng) || !$.isNumeric(lat)) {            // don't call API, when no coordinates are present            return        }        // if input data is out of bounds, set it properly        if (lng > 180.0) {            lng = ((lng + 180.0) % 360.0) - 180.0;        } else if (lng < -180.0) {            lng = ((lng - 180.0) % 360.0) + 180.0;        }        if (lat > 90.0) {            lat = ((lat + 90.0) % 180.0) - 90.0;        } else if (lat < -90.0) {            lat = ((lat - 90.0) % 180.0) + 90.0;        }        // set the coodinate input fields        longitude_field.val(lng);        latitude_field.val(lat);        // set the marker on the map        eventMarker.setLatLng([lat, lng]).addTo(map);        map.panTo([lat, lng]);        var mode = $('input[name=algorithm]:checked').val();        if ($.isNumeric(mode)) {            var url_extension = mode.toString() + \"_\" + lng.toString() + \"_\" + lat.toString();            // change url without reloading the page            window.history.pushState({}, \"\", '/gui/' + url_extension);            // get tz_name            giveJSONFromTo(\"/api/\" + url_extension, receive_tz_name);        }    }    function receive_tz_name(jsonData) {        var old_tz_name = timezone_field.html();        var new_tz_name = jsonData['tz_name'];        if (new_tz_name == null) {            //there is no result, update the display            timezone_field.html('None');            $('#id_current_datetime_in_tz').html('/');            $('#id_tz_abbreviation').html('/');            $('#id_current_offset').html('/');            // remove the old polygon from the map            tz_polygon.remove();        } else {            // the data is not empty            // get new gui info            giveJSONFromTo(\"/gui/getInfo/\" + new_tz_name, display_gui_info);            // only change geometry if its a different zone or if the polygon hasn't been loaded            // if the same zone is queried but the geometry hasn't been loaded the geometry is not requested again            if (new_tz_name != old_tz_name) {                // update the displayed timezone                timezone_field.html(new_tz_name);                // try if the polygon of the new zone has already been loaded                var index = available_zones.indexOf(new_tz_name);                if (index == -1) {                    // hasn't been loaded                    // get JSON and add its data to the map                    giveJSONFromTo(\"/gui/getGeometry/\" + new_tz_name, display_polygon);                } else tz_polygon.setLatLngs(stored_multiPolygons[index]).addTo(map);            }        }        //expand the result div (is collapsed on first load)        $('#id_results_div').show();    }    function display_polygon(jsonData) {        var geometry = jsonData['geometry'];        if (geometry == null) {            // remove the old polygon from the map            tz_polygon.remove();        } else {            var tz_name = jsonData['tz_name'];            // if the received geometry is for the current timezone            if (tz_name == timezone_field.html()) {                //display the timezone geometry in the map                tz_polygon.setLatLngs(geometry).addTo(map);            }            // store the polygon, if not already stored            var index = available_zones.indexOf(tz_name);            if (index == -1) {                // only store geometry if a valid one has been loaded;                stored_multiPolygons.push(tz_polygon.getLatLngs());                available_zones.push(tz_name);            }        }    }    function display_gui_info(jsonData) {        var tz_abbreviation = jsonData['tz_abbreviation'];        if (tz_abbreviation == null) {            $('#id_current_datetime_in_tz').html('/');            $('#id_tz_abbreviation').html('/');            $('#id_current_offset').html('/');        } else {            $('#id_current_datetime_in_tz').html(jsonData['current_datetime_in_tz']);            $('#id_tz_abbreviation').html(tz_abbreviation);            $('#id_current_offset').html(jsonData['current_offset']);        }    }</script></body></html>",
  "embeddings": []
}
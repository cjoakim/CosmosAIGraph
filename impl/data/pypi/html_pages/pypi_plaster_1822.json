{
  "libtype": "pypi",
  "libname": "plaster",
  "url": "https://docs.pylonsproject.org/projects/plaster/en/latest/",
  "html": "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"  \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\"><html xmlns=\"http://www.w3.org/1999/xhtml\" lang=\"en\">  <head>    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=Edge\" />    <meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />    <title>plaster &#8212; plaster 1.1.2 documentation</title>    <link rel=\"stylesheet\" href=\"_static/pylons.css\" type=\"text/css\" />    <link rel=\"stylesheet\" href=\"_static/pygments.css\" type=\"text/css\" />    <link rel=\"stylesheet\" type=\"text/css\" href=\"/_/static/css/badge_only.css\" />    <script type=\"text/javascript\" id=\"documentation_options\" data-url_root=\"./\" src=\"_static/documentation_options.js\"></script>    <script type=\"text/javascript\" src=\"_static/jquery.js\"></script>    <script type=\"text/javascript\" src=\"_static/underscore.js\"></script>    <script type=\"text/javascript\" src=\"_static/doctools.js\"></script>    <script type=\"text/javascript\" src=\"_static/language_data.js\"></script>    <script async=\"async\" type=\"text/javascript\" src=\"/_/static/javascript/readthedocs-doc-embed.js\"></script>    <link rel=\"canonical\" href=\"https://docs.pylonsproject.org/projects/plaster/en/latest/index.html\" />    <link rel=\"index\" title=\"Index\" href=\"genindex.html\" />    <link rel=\"search\" title=\"Search\" href=\"search.html\" />    <link rel=\"next\" title=\"plaster API\" href=\"api.html\" /><link rel=\"stylesheet\" href=\"//static.pylonsproject.org/fonts/nobile/stylesheet.css\" type=\"text/css\" media=\"screen\" charset=\"utf-8\" /><link rel=\"stylesheet\" href=\"//static.pylonsproject.org/fonts/neuton/stylesheet.css\" type=\"text/css\" media=\"screen\" charset=\"utf-8\" /><!--[if lte IE 6]><link rel=\"stylesheet\" href=\"_static/ie6.css\" type=\"text/css\" media=\"screen\" charset=\"utf-8\" /><![endif]--><link rel=\"shortcut icon\" href=\"_static/pylons.ico\"/>  <!-- RTD Extra Head --><link rel=\"stylesheet\" href=\"/_/static/css/readthedocs-doc-embed.css\" type=\"text/css\" /><script type=\"application/json\" id=\"READTHEDOCS_DATA\">{\"ad_free\": false, \"api_host\": \"https://readthedocs.org\", \"build_date\": \"2022-11-21T08:17:10Z\", \"builder\": \"sphinx\", \"canonical_url\": null, \"commit\": \"abad36aa\", \"docroot\": \"/docs/\", \"features\": {\"docsearch_disabled\": false}, \"global_analytics_code\": \"UA-17997319-1\", \"language\": \"en\", \"page\": \"index\", \"programming_language\": \"py\", \"project\": \"plaster\", \"proxied_api_host\": \"/_\", \"source_suffix\": \".rst\", \"subprojects\": {}, \"theme\": \"pylons\", \"user_analytics_code\": \"G-V7CJBMK66P\", \"version\": \"latest\"}</script><!--Using this variable directly instead of using `JSON.parse` is deprecated.The READTHEDOCS_DATA global variable will be removed in the future.--><script type=\"text/javascript\">READTHEDOCS_DATA = JSON.parse(document.getElementById('READTHEDOCS_DATA').innerHTML);</script><script type=\"text/javascript\" src=\"/_/static/javascript/readthedocs-analytics.js\" async=\"async\"></script><!-- end RTD <extrahead> --></head><body><a href=\"https://github.com/Pylons/plaster/blob/master/docs/index.rst\"><img style=\"position: absolute; top: 0; right: 0; border: 0;\" src=\"_static/edit-me-on-github.png\" alt=\"Edit me on GitHub\"></a><div class=\"header-small\"><div class=\"logo-small\"><a href=\"#\">      <img class=\"logo\" src=\"_static/pylons-small.png\" alt=\"Logo\"/></a>  </div></div>    <div class=\"related\" role=\"navigation\" aria-label=\"related navigation\">      <h3>Navigation</h3>      <ul>        <li class=\"right\" style=\"margin-right: 10px\">          <a href=\"genindex.html\" title=\"General Index\"             accesskey=\"I\">index</a></li>        <li class=\"right\" >          <a href=\"py-modindex.html\" title=\"Python Module Index\"             >modules</a> |</li>        <li class=\"right\" >          <a href=\"api.html\" title=\"plaster API\"             accesskey=\"N\">next</a> |</li>    <li><a href=\"#\">plaster 1.1.2 documentation</a> &#187;</li>       </ul>    </div>      <div class=\"document\">      <div class=\"documentwrapper\">        <div class=\"bodywrapper\">          <div class=\"body\" role=\"main\">              <div class=\"section\" id=\"plaster\"><h1>plaster<a class=\"headerlink\" href=\"#plaster\" title=\"Permalink to this headline\">\u00b6</a></h1><p><code class=\"docutils literal notranslate\"><span class=\"pre\">plaster</span></code> is a loader interface around arbitrary config file formats. It exists to define a common API for applications to use when they wish to load configuration settings. The library itself does not aim to handle anything except a basic API that applications may use to find and load configuration settings. Any specific constraints should be implemented in a pluggable loader which can be registered via an entrypoint.</p><p>The library helps your application find an appropriate loader based on a <a class=\"reference internal\" href=\"glossary.html#term-config-uri\"><span class=\"xref std std-term\">config uri</span></a> and a desired set of <a class=\"reference internal\" href=\"glossary.html#term-loader-protocol\"><span class=\"xref std std-term\">loader protocol</span></a> identifiers.</p><p>Some possible <code class=\"docutils literal notranslate\"><span class=\"pre\">config_uri</span></code> formats:</p><ul class=\"simple\"><li><code class=\"docutils literal notranslate\"><span class=\"pre\">development.ini</span></code></li><li><code class=\"docutils literal notranslate\"><span class=\"pre\">development.ini#myapp</span></code></li><li><code class=\"docutils literal notranslate\"><span class=\"pre\">development.ini?http_port=8080#main</span></code></li><li><code class=\"docutils literal notranslate\"><span class=\"pre\">ini://development.conf</span></code></li><li><code class=\"docutils literal notranslate\"><span class=\"pre\">pastedeploy+ini:///path/to/development.ini</span></code></li><li><code class=\"docutils literal notranslate\"><span class=\"pre\">pastedeploy+ini://development.ini#foo</span></code></li><li><code class=\"docutils literal notranslate\"><span class=\"pre\">egg:MyApp?debug=false#foo</span></code></li></ul><p>An example application that does not care what file format the settings are sourced from, as long as they are in a section named <code class=\"docutils literal notranslate\"><span class=\"pre\">my-settings</span></code>:</p><div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">plaster</span><span class=\"kn\">import</span> <span class=\"nn\">sys</span><span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;__main__&#39;</span><span class=\"p\">:</span>    <span class=\"n\">config_uri</span> <span class=\"o\">=</span> <span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">argv</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span>    <span class=\"n\">settings</span> <span class=\"o\">=</span> <span class=\"n\">plaster</span><span class=\"o\">.</span><span class=\"n\">get_settings</span><span class=\"p\">(</span><span class=\"n\">config_uri</span><span class=\"p\">,</span> <span class=\"s1\">&#39;my-settings&#39;</span><span class=\"p\">)</span></pre></div></div><p>This script can support any config format so long as the application (or the user) has installed the loader they expect to use. For example, <code class=\"docutils literal notranslate\"><span class=\"pre\">pip</span> <span class=\"pre\">install</span> <span class=\"pre\">plaster_pastedeploy</span></code>. The loader is then found by <a class=\"reference internal\" href=\"api.html#plaster.get_settings\" title=\"plaster.get_settings\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">plaster.get_settings()</span></code></a> based on the specific <a class=\"reference internal\" href=\"glossary.html#term-config-uri\"><span class=\"xref std std-term\">config uri</span></a> provided. The application does not need to configure the loaders. They are discovered via <a class=\"reference external\" href=\"http://setuptools.readthedocs.io/en/latest/pkg_resources.html#entry-points\">pkg_resources entrypoints</a> and registered for specific schemes.</p><div class=\"section\" id=\"protocols\"><h2>Protocols<a class=\"headerlink\" href=\"#protocols\" title=\"Permalink to this headline\">\u00b6</a></h2><p><code class=\"docutils literal notranslate\"><span class=\"pre\">plaster</span></code> supports custom loader protocols which loaders may choose to implement to provide extra functionality over the basic <a class=\"reference internal\" href=\"api.html#plaster.ILoader\" title=\"plaster.ILoader\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">plaster.ILoader</span></code></a> interface. A <a class=\"reference internal\" href=\"glossary.html#term-loader-protocol\"><span class=\"xref std std-term\">loader protocol</span></a> is intentionally very loosely defined but it basically boils down to a loader object that supports extra methods with agreed-upon signatures. Right now the only officially-supported protocol is <code class=\"docutils literal notranslate\"><span class=\"pre\">wsgi</span></code> which defines a loader that should implement the <a class=\"reference internal\" href=\"api.html#plaster.protocols.IWSGIProtocol\" title=\"plaster.protocols.IWSGIProtocol\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">plaster.protocols.IWSGIProtocol</span></code></a> interface.</p></div><div class=\"section\" id=\"known-loaders\"><h2>Known Loaders<a class=\"headerlink\" href=\"#known-loaders\" title=\"Permalink to this headline\">\u00b6</a></h2><ul><li><p class=\"first\"><a class=\"reference external\" href=\"https://github.com/Pylons/plaster_pastedeploy\">plaster_pastedeploy</a> <strong>officially supported</strong></p><p>File types:</p><ul class=\"simple\"><li><code class=\"docutils literal notranslate\"><span class=\"pre\">file+ini</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">ini</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">pastedeploy+ini</span></code></li><li><code class=\"docutils literal notranslate\"><span class=\"pre\">egg</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">pastedeploy+egg</span></code></li></ul><p>Protocols:</p><ul class=\"simple\"><li><code class=\"docutils literal notranslate\"><span class=\"pre\">wsgi</span></code> - <a class=\"reference internal\" href=\"api.html#plaster.protocols.IWSGIProtocol\" title=\"plaster.protocols.IWSGIProtocol\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">plaster.protocols.IWSGIProtocol</span></code></a></li></ul></li></ul></div><div class=\"section\" id=\"installation\"><h2>Installation<a class=\"headerlink\" href=\"#installation\" title=\"Permalink to this headline\">\u00b6</a></h2><div class=\"section\" id=\"stable-release\"><h3>Stable release<a class=\"headerlink\" href=\"#stable-release\" title=\"Permalink to this headline\">\u00b6</a></h3><p>To install plaster, run this command in your terminal:</p><div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>pip install plaster</pre></div></div><p>If you don\u2019t have <a class=\"reference external\" href=\"https://pip.pypa.io\">pip</a> installed, this <a class=\"reference external\" href=\"http://docs.python-guide.org/en/latest/starting/installation/\">Python installation guide</a> can guide you through the process.</p></div><div class=\"section\" id=\"from-sources\"><h3>From sources<a class=\"headerlink\" href=\"#from-sources\" title=\"Permalink to this headline\">\u00b6</a></h3><p>The sources for plaster can be downloaded from the <a class=\"reference external\" href=\"https://github.com/Pylons/plaster\">Github repo</a>.</p><div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>git clone https://github.com/Pylons/plaster.git</pre></div></div><p>Once you have a copy of the source, you can install it with:</p><div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>pip install -e .</pre></div></div></div></div><div class=\"section\" id=\"usage\"><h2>Usage<a class=\"headerlink\" href=\"#usage\" title=\"Permalink to this headline\">\u00b6</a></h2><div class=\"section\" id=\"loading-settings\"><h3>Loading settings<a class=\"headerlink\" href=\"#loading-settings\" title=\"Permalink to this headline\">\u00b6</a></h3><p>A goal of <code class=\"docutils literal notranslate\"><span class=\"pre\">plaster</span></code> is to allow a configuration source to be used for multiple purposes. For example, an INI file is split into separate sections which provide settings for separate applications. This works because each application can parse the INI file easily and pull out only the section it cares about. In order to load settings, use the <a class=\"reference internal\" href=\"api.html#plaster.get_settings\" title=\"plaster.get_settings\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">plaster.get_settings()</span></code></a>.</p><p>The application may accept a path to a config file, allowing the user to specify the name of the section (<code class=\"docutils literal notranslate\"><span class=\"pre\">myapp</span></code>) to be loaded:</p><div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">plaster</span><span class=\"n\">config_uri</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;development.ini#myapp&#39;</span><span class=\"n\">settings</span> <span class=\"o\">=</span> <span class=\"n\">plaster</span><span class=\"o\">.</span><span class=\"n\">get_settings</span><span class=\"p\">(</span><span class=\"n\">config_uri</span><span class=\"p\">)</span></pre></div></div><p>Alternatively, the application may depend on a specifically named section:</p><div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">plaster</span><span class=\"n\">config_uri</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;development.ini#myapp&#39;</span><span class=\"n\">settings</span> <span class=\"o\">=</span> <span class=\"n\">plaster</span><span class=\"o\">.</span><span class=\"n\">get_settings</span><span class=\"p\">(</span><span class=\"n\">config_uri</span><span class=\"p\">,</span> <span class=\"n\">section</span><span class=\"o\">=</span><span class=\"s1\">&#39;thisapp&#39;</span><span class=\"p\">)</span></pre></div></div></div><div class=\"section\" id=\"configuring-logging\"><h3>Configuring logging<a class=\"headerlink\" href=\"#configuring-logging\" title=\"Permalink to this headline\">\u00b6</a></h3><p><code class=\"docutils literal notranslate\"><span class=\"pre\">plaster</span></code> requires a <a class=\"reference internal\" href=\"glossary.html#term-loader\"><span class=\"xref std std-term\">loader</span></a> to provide a way to configure Python\u2019s stdlib logging module. In order to utilize this feature, simply call <a class=\"reference internal\" href=\"api.html#plaster.setup_logging\" title=\"plaster.setup_logging\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">plaster.setup_logging()</span></code></a> from your application.</p><div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">plaster</span><span class=\"n\">config_uri</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;redis://username@password:hostname/db?opt=val&#39;</span><span class=\"n\">plaster</span><span class=\"o\">.</span><span class=\"n\">setup_logging</span><span class=\"p\">(</span><span class=\"n\">config_uri</span><span class=\"p\">)</span></pre></div></div></div><div class=\"section\" id=\"finding-a-loader\"><h3>Finding a loader<a class=\"headerlink\" href=\"#finding-a-loader\" title=\"Permalink to this headline\">\u00b6</a></h3><p>At the heart of <code class=\"docutils literal notranslate\"><span class=\"pre\">plaster</span></code> is the <code class=\"docutils literal notranslate\"><span class=\"pre\">config_uri</span></code> format. This format is basically <code class=\"docutils literal notranslate\"><span class=\"pre\">&lt;scheme&gt;://&lt;path&gt;</span></code> with a few variations. The <code class=\"docutils literal notranslate\"><span class=\"pre\">scheme</span></code> is used to find an <a class=\"reference internal\" href=\"api.html#plaster.ILoaderFactory\" title=\"plaster.ILoaderFactory\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">plaster.ILoaderFactory</span></code></a>.</p><div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">plaster</span><span class=\"n\">config_uri</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;pastedeploy+ini://development.ini#myapp&#39;</span><span class=\"n\">loader</span> <span class=\"o\">=</span> <span class=\"n\">plaster</span><span class=\"o\">.</span><span class=\"n\">get_loader</span><span class=\"p\">(</span><span class=\"n\">config_uri</span><span class=\"p\">,</span> <span class=\"n\">protocols</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;wsgi&#39;</span><span class=\"p\">])</span><span class=\"n\">settings</span> <span class=\"o\">=</span> <span class=\"n\">loader</span><span class=\"o\">.</span><span class=\"n\">get_settings</span><span class=\"p\">()</span></pre></div></div><p>A <code class=\"docutils literal notranslate\"><span class=\"pre\">config_uri</span></code> may be a file path or an <span class=\"target\" id=\"index-0\"></span><a class=\"rfc reference external\" href=\"https://tools.ietf.org/html/rfc3986.html\"><strong>RFC 3986</strong></a> URI. In the case of a file path, the file extension is used as the scheme. In either case the scheme and the protocols are the only items that <code class=\"docutils literal notranslate\"><span class=\"pre\">plaster</span></code> cares about with respect to finding an <a class=\"reference internal\" href=\"api.html#plaster.ILoaderFactory\" title=\"plaster.ILoaderFactory\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">plaster.ILoaderFactory</span></code></a>.</p><p>It\u2019s also possible to lookup the exact loader by prefixing the scheme with the name of the package containing the loader:</p><div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">settings</span> <span class=\"o\">=</span> <span class=\"n\">plaster</span><span class=\"o\">.</span><span class=\"n\">get_settings</span><span class=\"p\">(</span><span class=\"s1\">&#39;plaster_pastedeploy+ini://&#39;</span><span class=\"p\">)</span></pre></div></div></div><div class=\"section\" id=\"writing-your-own-loader\"><h3>Writing your own loader<a class=\"headerlink\" href=\"#writing-your-own-loader\" title=\"Permalink to this headline\">\u00b6</a></h3><p><code class=\"docutils literal notranslate\"><span class=\"pre\">plaster</span></code> finds loaders registered for the <code class=\"docutils literal notranslate\"><span class=\"pre\">plaster.loader_factory</span></code> entry point in your <code class=\"docutils literal notranslate\"><span class=\"pre\">setup.py</span></code>:</p><div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">setuptools</span> <span class=\"kn\">import</span> <span class=\"n\">setup</span><span class=\"n\">setup</span><span class=\"p\">(</span>    <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">&#39;myapp&#39;</span><span class=\"p\">,</span>    <span class=\"c1\"># ...</span>    <span class=\"n\">entry_points</span><span class=\"o\">=</span><span class=\"p\">{</span>        <span class=\"s1\">&#39;plaster.loader_factory&#39;</span><span class=\"p\">:</span> <span class=\"p\">[</span>            <span class=\"s1\">&#39;dict = myapp:Loader&#39;</span><span class=\"p\">,</span>        <span class=\"p\">],</span>    <span class=\"p\">},</span><span class=\"p\">)</span></pre></div></div><p>In this example the importable <code class=\"docutils literal notranslate\"><span class=\"pre\">myapp.Loader</span></code> class will be used as <a class=\"reference internal\" href=\"api.html#plaster.ILoaderFactory\" title=\"plaster.ILoaderFactory\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">plaster.ILoaderFactory</span></code></a> for creating <a class=\"reference internal\" href=\"api.html#plaster.ILoader\" title=\"plaster.ILoader\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">plaster.ILoader</span></code></a> objects. Each loader is passed a <a class=\"reference internal\" href=\"api.html#plaster.PlasterURL\" title=\"plaster.PlasterURL\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">plaster.PlasterURL</span></code></a> instance, the result of parsing the <code class=\"docutils literal notranslate\"><span class=\"pre\">config_uri</span></code> to determine the scheme and fragment.</p><p>If the loader should be found automatically via file extension then it should broadcast support for the special <code class=\"docutils literal notranslate\"><span class=\"pre\">file+&lt;extension&gt;</span></code> scheme. For example, to support <code class=\"docutils literal notranslate\"><span class=\"pre\">development.ini</span></code> instead of <code class=\"docutils literal notranslate\"><span class=\"pre\">myscheme://development.ini</span></code> the loader should be registered for the <code class=\"docutils literal notranslate\"><span class=\"pre\">file+ini</span></code> scheme.</p><div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">plaster</span><span class=\"k\">class</span> <span class=\"nc\">Loader</span><span class=\"p\">(</span><span class=\"n\">plaster</span><span class=\"o\">.</span><span class=\"n\">ILoader</span><span class=\"p\">):</span>    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">uri</span><span class=\"p\">):</span>        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">uri</span> <span class=\"o\">=</span> <span class=\"n\">uri</span>    <span class=\"k\">def</span> <span class=\"nf\">get_sections</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>        <span class=\"k\">return</span> <span class=\"p\">[</span><span class=\"s1\">&#39;myapp&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;yourapp&#39;</span><span class=\"p\">]</span>    <span class=\"k\">def</span> <span class=\"nf\">get_settings</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">section</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">defaults</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>        <span class=\"c1\"># fallback to the fragment from config_uri if no section is given</span>        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">section</span><span class=\"p\">:</span>            <span class=\"n\">section</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">uri</span><span class=\"o\">.</span><span class=\"n\">fragment</span>        <span class=\"c1\"># if section is still none we could fallback to some</span>        <span class=\"c1\"># loader-specific default</span>        <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>        <span class=\"k\">if</span> <span class=\"n\">defaults</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>            <span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">(</span><span class=\"n\">defaults</span><span class=\"p\">)</span>        <span class=\"k\">if</span> <span class=\"n\">section</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;myapp&#39;</span><span class=\"p\">:</span>            <span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">({</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">})</span>        <span class=\"k\">elif</span> <span class=\"n\">section</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;yourapp&#39;</span><span class=\"p\">:</span>            <span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">({</span><span class=\"s1\">&#39;b&#39;</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">})</span>        <span class=\"k\">return</span> <span class=\"n\">result</span></pre></div></div><p>This loader may then be used:</p><div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">plaster</span><span class=\"n\">settings</span> <span class=\"o\">=</span> <span class=\"n\">plaster</span><span class=\"o\">.</span><span class=\"n\">get_settings</span><span class=\"p\">(</span><span class=\"s1\">&#39;dict://&#39;</span><span class=\"p\">,</span> <span class=\"n\">section</span><span class=\"o\">=</span><span class=\"s1\">&#39;myapp&#39;</span><span class=\"p\">)</span><span class=\"k\">assert</span> <span class=\"n\">settings</span><span class=\"p\">[</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"n\">settings2</span> <span class=\"o\">=</span> <span class=\"n\">plaster</span><span class=\"o\">.</span><span class=\"n\">get_settings</span><span class=\"p\">(</span><span class=\"s1\">&#39;myapp+dict://&#39;</span><span class=\"p\">,</span> <span class=\"n\">section</span><span class=\"o\">=</span><span class=\"s1\">&#39;myapp&#39;</span><span class=\"p\">)</span><span class=\"k\">assert</span> <span class=\"n\">settings</span> <span class=\"o\">==</span> <span class=\"n\">settings2</span></pre></div></div><div class=\"section\" id=\"supporting-a-custom-protocol\"><h4>Supporting a custom protocol<a class=\"headerlink\" href=\"#supporting-a-custom-protocol\" title=\"Permalink to this headline\">\u00b6</a></h4><p>By default, loaders are exposed via the <code class=\"docutils literal notranslate\"><span class=\"pre\">plaster.loader_factory</span></code> entry point. In order to register a loader that supports a custom protocol it should register itself on a <code class=\"docutils literal notranslate\"><span class=\"pre\">plaster.&lt;protocol&gt;_loader_factory</span></code> entry point.</p><p>A scheme <strong>MUST</strong> point to the same loader factory for every protocol, including the default (empty) protocol. If it does not then no compatible loader will be found if the end-user requests a loader satisfying both protocols.</p></div></div></div><div class=\"section\" id=\"acknowledgments\"><h2>Acknowledgments<a class=\"headerlink\" href=\"#acknowledgments\" title=\"Permalink to this headline\">\u00b6</a></h2><p>This API is heavily inspired by conversations, contributions, and design put forth in <a class=\"reference external\" href=\"https://github.com/inklesspen/montague\">https://github.com/inklesspen/montague</a> and <a class=\"reference external\" href=\"https://metaclassical.com/announcing-montague-the-new-way-to-configure-python-applications/\">https://metaclassical.com/announcing-montague-the-new-way-to-configure-python-applications/</a>.</p></div><div class=\"section\" id=\"more-information\"><h2>More Information<a class=\"headerlink\" href=\"#more-information\" title=\"Permalink to this headline\">\u00b6</a></h2><div class=\"toctree-wrapper compound\"><ul><li class=\"toctree-l1\"><a class=\"reference internal\" href=\"api.html\"><code class=\"docutils literal notranslate\"><span class=\"pre\">plaster</span></code> API</a></li><li class=\"toctree-l1\"><a class=\"reference internal\" href=\"glossary.html\">Glossary</a></li><li class=\"toctree-l1\"><a class=\"reference internal\" href=\"contributing.html\">Contributing</a></li><li class=\"toctree-l1\"><a class=\"reference internal\" href=\"changes.html\">Changes</a></li></ul></div></div><div class=\"section\" id=\"indices-and-tables\"><h2>Indices and tables<a class=\"headerlink\" href=\"#indices-and-tables\" title=\"Permalink to this headline\">\u00b6</a></h2><ul class=\"simple\"><li><a class=\"reference internal\" href=\"genindex.html\"><span class=\"std std-ref\">Index</span></a></li><li><a class=\"reference internal\" href=\"py-modindex.html\"><span class=\"std std-ref\">Module Index</span></a></li><li><a class=\"reference internal\" href=\"search.html\"><span class=\"std std-ref\">Search Page</span></a></li></ul></div></div>          </div>        </div>      </div>      <div class=\"sphinxsidebar\" role=\"navigation\" aria-label=\"main navigation\">        <div class=\"sphinxsidebarwrapper\">  <h3><a href=\"#\">Table of Contents</a></h3>  <ul><li><a class=\"reference internal\" href=\"#\">plaster</a><ul><li><a class=\"reference internal\" href=\"#protocols\">Protocols</a></li><li><a class=\"reference internal\" href=\"#known-loaders\">Known Loaders</a></li><li><a class=\"reference internal\" href=\"#installation\">Installation</a><ul><li><a class=\"reference internal\" href=\"#stable-release\">Stable release</a></li><li><a class=\"reference internal\" href=\"#from-sources\">From sources</a></li></ul></li><li><a class=\"reference internal\" href=\"#usage\">Usage</a><ul><li><a class=\"reference internal\" href=\"#loading-settings\">Loading settings</a></li><li><a class=\"reference internal\" href=\"#configuring-logging\">Configuring logging</a></li><li><a class=\"reference internal\" href=\"#finding-a-loader\">Finding a loader</a></li><li><a class=\"reference internal\" href=\"#writing-your-own-loader\">Writing your own loader</a><ul><li><a class=\"reference internal\" href=\"#supporting-a-custom-protocol\">Supporting a custom protocol</a></li></ul></li></ul></li><li><a class=\"reference internal\" href=\"#acknowledgments\">Acknowledgments</a></li><li><a class=\"reference internal\" href=\"#more-information\">More Information</a></li><li><a class=\"reference internal\" href=\"#indices-and-tables\">Indices and tables</a></li></ul></li></ul>  <h4>Next topic</h4>  <p class=\"topless\"><a href=\"api.html\"                        title=\"next chapter\"><code class=\"docutils literal notranslate\"><span class=\"pre\">plaster</span></code> API</a></p>  <div role=\"note\" aria-label=\"source link\">    <h3>This Page</h3>    <ul class=\"this-page-menu\">      <li><a href=\"_sources/index.rst.txt\"            rel=\"nofollow\">Show Source</a></li>    </ul>   </div><div id=\"searchbox\" style=\"display: none\" role=\"search\">  <h3>Quick search</h3>    <div class=\"searchformwrapper\">    <form class=\"search\" action=\"search.html\" method=\"get\">      <input type=\"text\" name=\"q\" />      <input type=\"submit\" value=\"Go\" />      <input type=\"hidden\" name=\"check_keywords\" value=\"yes\" />      <input type=\"hidden\" name=\"area\" value=\"default\" />    </form>    </div></div><script type=\"text/javascript\">$('#searchbox').show(0);</script>        </div>      </div>      <div class=\"clearer\"></div>    </div>    <div class=\"related\" role=\"navigation\" aria-label=\"related navigation\">      <h3>Navigation</h3>      <ul>        <li class=\"right\" style=\"margin-right: 10px\">          <a href=\"genindex.html\" title=\"General Index\"             >index</a></li>        <li class=\"right\" >          <a href=\"py-modindex.html\" title=\"Python Module Index\"             >modules</a> |</li>        <li class=\"right\" >          <a href=\"api.html\" title=\"plaster API\"             >next</a> |</li>    <li><a href=\"#\">plaster 1.1.2 documentation</a> &#187;</li>       </ul>    </div>    <div class=\"footer\" role=\"contentinfo\">        &#169; Copyright 2022, Michael Merickel.      Created using <a href=\"http://sphinx-doc.org/\">Sphinx</a> 1.8.6.    </div>  </body></html>",
  "embeddings": []
}
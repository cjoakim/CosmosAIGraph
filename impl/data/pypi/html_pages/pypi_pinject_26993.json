{
  "libtype": "pypi",
  "libname": "pinject",
  "url": "https://pypi.org/project/pinject/",
  "html": "<!DOCTYPE html><html lang=\"en\" dir=\"ltr\">  <head>    <meta charset=\"utf-8\">    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">    <meta name=\"defaultLanguage\" content=\"en\">    <meta name=\"availableLanguages\" content=\"en, es, fr, ja, pt_BR, uk, el, de, zh_Hans, zh_Hant, ru, he, eo\">    <title>pinject \u00b7 PyPI</title>    <meta name=\"description\" content=\"A pythonic dependency injection library\">    <link rel=\"stylesheet\" href=\"/static/css/warehouse-ltr.99b3104d.css\">    <link rel=\"stylesheet\" href=\"/static/css/fontawesome.b50b476c.css\">    <link rel=\"stylesheet\" href=\"https://fonts.googleapis.com/css?family=Source+Sans+3:400,400italic,600,600italic,700,700italic%7CSource+Code+Pro:500\">    <noscript>      <link rel=\"stylesheet\" href=\"/static/css/noscript.0673c9ea.css\">    </noscript>    <link rel=\"icon\" href=\"/static/images/favicon.35549fe8.ico\" type=\"image/x-icon\">    <link rel=\"alternate\" type=\"application/rss+xml\" title=\"RSS: 40 latest updates\" href=\"/rss/updates.xml\">    <link rel=\"alternate\" type=\"application/rss+xml\" title=\"RSS: 40 newest packages\" href=\"/rss/packages.xml\"><link rel=\"alternate\" type=\"application/rss+xml\" title=\"RSS: latest releases for pinject\" href=\"/rss/project/pinject/releases.xml\">    <link rel=\"canonical\" href=\"https://pypi.org/project/pinject/\">    <meta property=\"og:url\" content=\"https://pypi.org/project/pinject/\">    <meta property=\"og:site_name\" content=\"PyPI\">    <meta property=\"og:type\" content=\"website\">    <meta property=\"og:image\" content=\"https://pypi.org/static/images/twitter.abaf4b19.webp\">    <meta property=\"og:title\" content=\"pinject\">    <meta property=\"og:description\" content=\"A pythonic dependency injection library\">    <link rel=\"search\" type=\"application/opensearchdescription+xml\" title=\"PyPI\" href=\"/opensearch.xml\">    <script asyncdata-ga-id=\"UA-55961911-1\"data-ga4-id=\"G-RW7D75DF8V\"            src=\"/static/js/warehouse.dd4295c4.js\">    </script><script>MathJax = {  tex: {    inlineMath: [['$', '$'], ['\\\\(', '\\\\)']]  },};</script><script async  src=\"https://cdn.jsdelivr.net/npm/mathjax@3.2.2/es5/tex-svg.js\"  integrity=\"sha256-1CldwzdEg2k1wTmf7s5RWVd7NMXI/7nxxjJM2C4DqII=\"  crossorigin=\"anonymous\"></script><script async src=\"https://www.googletagmanager.com/gtag/js?id=UA-55961911-1\"></script><script async src=\"https://www.googletagmanager.com/gtag/js?id=G-RW7D75DF8V\"></script><script defer src=\"https://www.fastly-insights.com/insights.js?k=6a52360a-f306-421e-8ed5-7417d0d4a4e9&dnt=true\"></script>    <script async        src=\"https://media.ethicalads.io/media/client/v1.4.0/ethicalads.min.js\"        integrity=\"sha256-U3hKDidudIaxBDEzwGJApJgPEf2mWk6cfMWghrAa6i0= sha384-UcmsCqcNRSLW/dV3Lo1oCi2/VaurXbib6p4HyUEOeIa/4OpsrnucrugAefzVZJfI sha512-q4t1L4xEjGV2R4hzqCa41P8jrgFUS8xTb8rdNv4FGvw7FpydVj/kkxBJHOiaoxHa8olCcx1Slk9K+3sNbsM4ug==\"        crossorigin=\"anonymous\"    ></script>  </head>  <body data-controller=\"viewport-toggle\">    <!-- Accessibility: this link should always be the first piece of content inside the body-->    <a href=\"#content\" class=\"skip-to-content\">Skip to main content</a>    <button type=\"button\" class=\"button button--primary button--switch-to-mobile hidden\" data-viewport-toggle-target=\"switchToMobile\" data-action=\"viewport-toggle#switchToMobile\">Switch to mobile version    </button>    <div id=\"sticky-notifications\" class=\"stick-to-top js-stick-to-top\">      <!-- Add browser warning. Will show for ie9 and below -->      <!--[if IE]>      <div class=\"notification-bar notification-bar--warning\" role=\"status\">        <span class=\"notification-bar__icon\">          <i class=\"fa fa-exclamation-triangle\" aria-hidden=\"true\"></i>          <span class=\"sr-only\">Warning</span>        </span>        <span class=\"notification-bar__message\">You are using an unsupported browser, upgrade to a newer version.</span>      </div>      <![endif]-->      <noscript>      <div class=\"notification-bar notification-bar--warning\" role=\"status\">        <span class=\"notification-bar__icon\">          <i class=\"fa fa-exclamation-triangle\" aria-hidden=\"true\"></i>          <span class=\"sr-only\">Warning</span>        </span>        <span class=\"notification-bar__message\">Some features may not work without JavaScript. Please try enabling it if you encounter problems.</span>      </div>      </noscript><div data-html-include=\"/_includes/notification-banners/\"></div>    </div><div data-html-include=\"/_includes/flash-messages/\"></div><div data-html-include=\"/_includes/session-notifications/\"></div>    <header class=\"site-header \">      <div class=\"site-container\">        <div class=\"split-layout\">          <div class=\"split-layout\">            <div>              <a class=\"site-header__logo\" href=\"/\">                <img alt=\"PyPI\" src=\"/static/images/logo-small.2a411bc6.svg\">              </a>            </div>            <form class=\"search-form search-form--primary\" action=\"/search/\" role=\"search\">              <label for=\"search\" class=\"sr-only\">Search PyPI</label>              <input id=\"search\" class=\"search-form__search\" type=\"text\" name=\"q\" placeholder=\"Search projects\" value=\"\" autocomplete=\"off\" autocapitalize=\"off\" spellcheck=\"false\" data-controller=\"search-focus\" data-action=\"keydown@window->search-focus#focusSearchField\" data-search-focus-target=\"searchField\">              <button type=\"submit\" class=\"search-form__button\">                <i class=\"fa fa-search\" aria-hidden=\"true\"></i>                <span class=\"sr-only\">Search</span>              </button>            </form>          </div><div data-html-include=\"/_includes/current-user-indicator/\">            <div id=\"user-indicator\" class=\"horizontal-menu horizontal-menu--light horizontal-menu--tall\">  <nav class=\"horizontal-menu horizontal-menu--light horizontal-menu--tall hide-on-tablet\" aria-label=\"Main navigation\">    <ul>      <li class=\"horizontal-menu__item\"><a href=\"/help/\" class=\"horizontal-menu__link\">Help</a></li>      <li class=\"horizontal-menu__item\"><a href=\"/sponsors/\" class=\"horizontal-menu__link\">Sponsors</a></li>      <li class=\"horizontal-menu__item\"><a href=\"/account/login/\" class=\"horizontal-menu__link\">Log in</a></li>      <li class=\"horizontal-menu__item\"><a href=\"/account/register/\" class=\"horizontal-menu__link\">Register</a></li>    </ul>  </nav>  <nav class=\"dropdown dropdown--on-menu hidden show-on-tablet\" aria-label=\"Main navigation\">    <button type=\"button\" class=\"horizontal-menu__link dropdown__trigger\" aria-haspopup=\"true\" aria-expanded=\"false\" aria-label=\"View menu\">Menu      <span class=\"dropdown__trigger-caret\">        <i class=\"fa fa-caret-down\" aria-hidden=\"true\"></i>      </span>    </button>    <ul class=\"dropdown__content\" aria-hidden=\"true\" aria-label=\"Main menu\">      <li><a class=\"dropdown__link\" href=\"/help/\">Help</a></li>      <li><a class=\"dropdown__link\" href=\"/sponsors/\">Sponsors</a></li>      <li><a class=\"dropdown__link\" href=\"/account/login/\">Log in</a></li>      <li><a class=\"dropdown__link\" href=\"/account/register/\">Register</a></li>    </ul>  </nav></div></div>        </div>      </div>    </header>    <div class=\"mobile-search\">      <form class=\"search-form search-form--fullwidth\" action=\"/search/\" role=\"search\">        <label for=\"mobile-search\" class=\"sr-only\">Search PyPI</label>        <input id=\"mobile-search\" class=\"search-form__search\" type=\"text\" name=\"q\" placeholder=\"Search projects\" value=\"\" autocomplete=\"off\" autocapitalize=\"off\" spellcheck=\"false\">                <button type=\"submit\" class=\"search-form__button\">          <i class=\"fa fa-search\" aria-hidden=\"true\"></i>          <span class=\"sr-only\">Search</span>        </button>      </form>    </div>    <main id=\"content\"><div class=\"hidden\"  data-controller=\"github-repo-stats\"  data-github-repo-stats-github-repo-info-outlet=\".github-repo-info\"  data-github-repo-stats-url-value=\"https://api.github.com/repos/google/pinject\"  data-github-repo-stats-issue-url-value=\"https://api.github.com/search/issues?q=repo:google/pinject+type:issue+state:open&amp;per_page=1\"></div><div class=\"banner\">  <div class=\"package-header\">    <div class=\"package-header__left\">      <h1 class=\"package-header__name\">        pinject 0.14.1      </h1>      <div data-controller=\"clipboard\">        <p class=\"package-header__pip-instructions\">          <span id=\"pip-command\" data-clipboard-target=\"source\">pip install pinject</span>          <button type=\"button\" class=\"copy-tooltip copy-tooltip-s\" data-action=\"clipboard#copy\" data-clipboard-target=\"tooltip\" data-clipboard-tooltip-value=\"Copy to clipboard\">            <i class=\"fa fa-copy\" aria-hidden=\"true\"></i>            <span class=\"sr-only\">Copy PIP instructions</span>          </button>        </p>      </div>    </div>    <div class=\"package-header__right\">      <a class=\"status-badge status-badge--good\" href=\"/project/pinject/\">        <span>Latest version</span>      </a>      <p class=\"package-header__date\">Released: <time datetime=\"2019-05-25T08:04:36+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  May 25, 2019</time>      </p>    </div>  </div></div><div class=\"horizontal-section horizontal-section--grey horizontal-section--thin\">  <div class=\"site-container\"><div data-html-include=\"/_includes/administer-project-include/pinject\"></div>    <div class=\"split-layout split-layout--middle package-description\">      <p class=\"package-description__summary\">A pythonic dependency injection library</p><div data-html-include=\"/_includes/edit-project-button/pinject\"></div>    </div>  </div></div><div data-controller=\"project-tabs\">  <div class=\"tabs-container\">    <div class=\"vertical-tabs\">      <div class=\"vertical-tabs__tabs\">        <div class=\"sidebar-section\">          <h3 class=\"sidebar-section__title\">Navigation</h3>          <nav aria-label=\"Navigation for pinject\">            <ul class=\"vertical-tabs__list\" role=\"tablist\">              <li role=\"tab\">                <a id=\"description-tab\" href=\"#description\" data-project-tabs-target=\"tab\" data-action=\"project-tabs#onTabClick\" class=\"vertical-tabs__tab vertical-tabs__tab--with-icon vertical-tabs__tab--is-active\" aria-selected=\"true\" aria-label=\"Project description. Focus will be moved to the description.\">                  <i class=\"fa fa-align-left\" aria-hidden=\"true\"></i>Project description                </a>              </li>              <li role=\"tab\">                <a id=\"history-tab\" href=\"#history\" data-project-tabs-target=\"tab\" data-action=\"project-tabs#onTabClick\" class=\"vertical-tabs__tab vertical-tabs__tab--with-icon\" aria-label=\"Release history. Focus will be moved to the history panel.\">                  <i class=\"fa fa-history\" aria-hidden=\"true\"></i>Release history                </a>              </li>              <li role=\"tab\">                <a id=\"files-tab\" href=\"#files\" data-project-tabs-target=\"tab\" data-action=\"project-tabs#onTabClick\" class=\"vertical-tabs__tab vertical-tabs__tab--with-icon\" aria-label=\"Download files. Focus will be moved to the project files.\">                  <i class=\"fa fa-download\" aria-hidden=\"true\"></i>Download files                </a>              </li>            </ul>          </nav>        </div><div class=\"sidebar-section\">  <h3 class=\"sidebar-section__title\">Project links</h3>  <ul class=\"vertical-tabs__list\">    <li>      <a class=\"vertical-tabs__tab vertical-tabs__tab--with-icon vertical-tabs__tab--condensed\" href=\"https://github.com/google/pinject\" rel=\"nofollow\">        <i class=\"fas fa-home\" aria-hidden=\"true\"></i>Homepage      </a>    </li>  </ul></div><div class=\"sidebar-section\">  <h3 class=\"sidebar-section__title\">Statistics</h3>  <div class=\"hidden github-repo-info\" data-controller=\"github-repo-info\">GitHub statistics:    <ul class=\"vertical-tabs__list\">      <li>        <a class=\"vertical-tabs__tab vertical-tabs__tab--with-icon vertical-tabs__tab--condensed\"           data-github-repo-info-target=\"stargazersUrl\" rel=\"noopener\">          <i class=\"fa fa-star\" aria-hidden=\"true\"></i>          <strong>Stars:</strong>          <span data-github-repo-info-target=\"stargazersCount\"></span>        </a>      </li>      <li>        <a class=\"vertical-tabs__tab vertical-tabs__tab--with-icon vertical-tabs__tab--condensed\"           data-github-repo-info-target=\"forksUrl\" rel=\"noopener\">          <i class=\"fa fa-code-branch\" aria-hidden=\"true\"></i>          <strong>Forks:</strong>          <span data-github-repo-info-target=\"forksCount\"></span>        </a>      </li>      <li>        <a class=\"vertical-tabs__tab vertical-tabs__tab--with-icon vertical-tabs__tab--condensed\"           data-github-repo-info-target=\"openIssuesUrl\" rel=\"noopener\">          <i class=\"fa fa-exclamation-circle\" aria-hidden=\"true\"></i>          <strong>Open issues:</strong>          <span data-github-repo-info-target=\"openIssuesCount\"></span>        </a>      </li>      <li>        <a class=\"vertical-tabs__tab vertical-tabs__tab--with-icon vertical-tabs__tab--condensed\"           data-github-repo-info-target=\"openPRsUrl\" rel=\"noopener\">          <i class=\"fa fa-code-pull-request\" aria-hidden=\"true\"></i>          <strong>Open PRs:</strong>          <span data-github-repo-info-target=\"openPRsCount\"></span>        </a>      </li>    </ul>  </div>  <p>View statistics for this project via <a href=\"https://libraries.io/pypi/pinject\" title=\"External link\" target=\"_blank\" rel=\"noopener\">Libraries.io</a>, or by using <a href=\"https://packaging.python.org/guides/analyzing-pypi-package-downloads/\" target=\"_blank\" rel=\"noopener\">our public dataset on Google BigQuery</a>  </p></div><div class=\"sidebar-section\">  <h3 class=\"sidebar-section__title\">Meta</h3>  <p><strong>License:</strong> Apache License 2.0</p>    <p><strong>Author:</strong> <a href=\"mailto:kurt@steinkraus.us\">Kurt Steinkraus</a></p></div><div class=\"sidebar-section\">    <h3 class=\"sidebar-section__title\">Maintainers</h3>      <span class=\"sidebar-section__maintainer\">        <a href=\"/user/KurtSteinkraus/\" aria-label=\"KurtSteinkraus\">          <span class=\"sidebar-section__user-gravatar\">            <img src=\"https://pypi-camo.freetls.fastly.net/0400bffe3045a1db1fe0fe4901b5e06aca454910/68747470733a2f2f7365637572652e67726176617461722e636f6d2f6176617461722f66346536313465313431353465303265656364303539333238366161343966333f73697a653d3530\" height=\"50\" width=\"50\" alt=\"Avatar for KurtSteinkraus from gravatar.com\" title=\"Avatar for KurtSteinkraus from gravatar.com\">          </span>          <span class=\"sidebar-section__user-gravatar-text\">            KurtSteinkraus          </span>        </a>      </span>      <span class=\"sidebar-section__maintainer\">        <a href=\"/user/zixia/\" aria-label=\"zixia\">          <span class=\"sidebar-section__user-gravatar\">            <img src=\"https://pypi-camo.freetls.fastly.net/979569c2f2f445aec8c38eb64597825e07346fd5/68747470733a2f2f7365637572652e67726176617461722e636f6d2f6176617461722f33633532643161306166363332303736656337373532626537386363303432313f73697a653d3530\" height=\"50\" width=\"50\" alt=\"Avatar for zixia from gravatar.com\" title=\"Avatar for zixia from gravatar.com\">          </span>          <span class=\"sidebar-section__user-gravatar-text\">            zixia          </span>        </a>      </span></div><div class=\"sidebar-section\" data-ea-publisher=\"psf\" data-ea-type=\"psf\" data-ea-keywords=\"pypi-sidebar\"></div>      </div>      <div class=\"vertical-tabs__panel\">        <!-- mobile menu -->        <nav aria-label=\"Navigation for pinject\">          <ul class=\"vertical-tabs__list\" role=\"tablist\">            <li role=\"tab\">              <a id=\"mobile-description-tab\" href=\"#description\" data-project-tabs-target=\"mobileTab\" data-action=\"project-tabs#onTabClick\" class=\"vertical-tabs__tab vertical-tabs__tab--with-icon vertical-tabs__tab--mobile vertical-tabs__tab--no-top-border vertical-tabs__tab--is-active\" aria-selected=\"true\" aria-label=\"Project description. Focus will be moved to the description.\">                <i class=\"fa fa-align-left\" aria-hidden=\"true\"></i>Project description              </a>            </li>            <li role=\"tab\">              <a id=\"mobile-data-tab\" href=\"#data\" data-project-tabs-target=\"mobileTab\" data-action=\"project-tabs#onTabClick\" class=\"vertical-tabs__tab vertical-tabs__tab--with-icon vertical-tabs__tab--mobile\" aria-label=\"Project details. Focus will be moved to the project details.\">                <i class=\"fa fa-info-circle\" aria-hidden=\"true\"></i>Project details              </a>            </li>            <li role=\"tab\">              <a id=\"mobile-history-tab\" href=\"#history\" data-project-tabs-target=\"mobileTab\" data-action=\"project-tabs#onTabClick\" class=\"vertical-tabs__tab vertical-tabs__tab--with-icon vertical-tabs__tab--mobile\" aria-label=\"Release history. Focus will be moved to the history panel.\">              <i class=\"fa fa-history\" aria-hidden=\"true\"></i>Release history            </a>            </li>            <li role=\"tab\">              <a id=\"mobile-files-tab\" href=\"#files\" data-project-tabs-target=\"mobileTab\" data-action=\"project-tabs#onTabClick\" class=\"vertical-tabs__tab vertical-tabs__tab--with-icon vertical-tabs__tab--mobile\" aria-label=\"Download files. Focus will be moved to the project files.\">                <i class=\"fa fa-download\" aria-hidden=\"true\"></i>Download files              </a>            </li>          </ul>        </nav>        <div id=\"description\" data-project-tabs-target=\"content\" class=\"vertical-tabs__content\" role=\"tabpanel\" aria-labelledby=\"description-tab mobile-description-tab\" tabindex=\"-1\">          <h2 class=\"page-title\">Project description</h2>          <div class=\"project-description\">            <a href=\"https://pypi.org/project/pinject/\" rel=nofollow><img alt=\"https://badge.fury.io/py/pinject.svg\" src=\"https://pypi-camo.freetls.fastly.net/cc91ada01e90b6dbb059ff5a5d979166787cd65e/68747470733a2f2f62616467652e667572792e696f2f70792f70696e6a6563742e737667\"></a><a href=\"https://travis-ci.com/google/pinject\" rel=nofollow><img alt=\"https://travis-ci.com/google/pinject.svg?branch=master\" src=\"https://pypi-camo.freetls.fastly.net/d2973858d6ef490af51120f7f022a1a0423c67de/68747470733a2f2f7472617669732d63692e636f6d2f676f6f676c652f70696e6a6563742e7376673f6272616e63683d6d6173746572\"></a><a href=\"https://pepy.tech/badge/pinject\" rel=nofollow><img alt=\"https://pepy.tech/badge/pinject\" src=\"https://pypi-camo.freetls.fastly.net/ce9dc2a4625b04135a28a5187c8adbb49c50606a/68747470733a2f2f706570792e746563682f62616467652f70696e6a656374\"></a><a href=\"https://pepy.tech/badge/pinject\" rel=nofollow><img alt=\"https://pepy.tech/badge/pinject/month\" src=\"https://pypi-camo.freetls.fastly.net/856e644f8c54eaf40fe87e236c53848b385e3c04/68747470733a2f2f706570792e746563682f62616467652f70696e6a6563742f6d6f6e7468\"></a><p>Pinject is a dependency injection library for python.</p><p>The primary goal of Pinject is to help you assemble objects into graphs in aneasy, maintainable way.</p><p>If you are already familiar with other dependency injection libraries, you maywant to read the condensed summary section at the end, so that you get an ideaof what Pinject is like and how it might differ from libraries you\u2019re used to.</p><p>There is a changelog of differences between released versions near the end ofthis README.</p><section id=why-pinject><h2>Why Pinject?</h2><p>If you\u2019re wondering why to use a dependency injection library at all: ifyou\u2019re writing a lot of object-oriented code in python, then it will make yourlife easier.  See, for instance:</p><ul class=simple><li><p><a href=\"https://en.wikipedia.org/wiki/Dependency_injection\" rel=nofollow>https://en.wikipedia.org/wiki/Dependency_injection</a></li><li><p><a href=\"http://lmgtfy.com/?q=dependency+injection\" rel=nofollow>http://lmgtfy.com/?q=dependency+injection</a></li></ul><p>If you\u2019re wondering why to use Pinject instead of another python dependencyinjection library, a few of reasons are:</p><ul class=simple><li><p>Pinject is much easier to get started with.  Forget having to decorate your code with <span class=\"docutils literal\">@inject_this</span> and <span class=\"docutils literal\">@annotate_that</span> just to get started.  With Pinject, you call <span class=\"docutils literal\">new_object_graph()</span>, one line, and you\u2019re good to go.</li><li><p>Pinject is a <em>pythonic</em> dependency injection library.  Python ports of other libraries, like Spring or Guice, retain the feel (and verbosity) of being designed for a statically typed language.  Pinject is designed from the ground up for python.</li><li><p>The design choices in Pinject are informed by several dependency injection experts working at Google, based on many years of experience.  Several common confusing or misguided features are omitted altogether from Pinject.</li><li><p>Pinject has great error messages.  They tell you exactly what you did wrong, and exactly where.  This should be a welcome change from other dependency frameworks, with their voluminous and yet inscrutable stack traces.</li></ul><p>Look at the simplest getting-started examples for Pinject and for othersimilar libraries.  Pinject should be uniformly easier to use, clearer toread, and less boilerplate that you need to add.  If you don\u2019t find this to bethe case, email!</p></section><section id=installation><h2>Installation</h2><p>The easiest way to install Pinject is to get the latest released version fromPyPI:</p><pre><code>sudo<span class=w> </span>pip<span class=w> </span>install<span class=w> </span>pinject</code></pre><p>If you are interested in the developing version, you can install the next version from Test PyPI:</p><pre><code>sudo<span class=w> </span>pip<span class=w> </span>install<span class=w> </span><span class=se>\\</span><span class=w>    </span>--no-deps<span class=w> </span><span class=se>\\</span><span class=w>    </span>--no-cache<span class=w> </span><span class=se>\\</span><span class=w>    </span>--upgrade<span class=w> </span><span class=se>\\</span><span class=w>    </span>--index-url<span class=w> </span>https://test.pypi.org/simple/<span class=w> </span><span class=se>\\</span><span class=w>    </span>pinject</code></pre><p>You can also check out all the source code, including tests, designs, andTODOs:</p><pre><code>git<span class=w> </span>clone<span class=w> </span>https://github.com/google/pinject</code></pre></section><section id=basic-dependency-injection><h2>Basic dependency injection</h2><p>The most important function in the <span class=\"docutils literal\">pinject</span> module is<span class=\"docutils literal\">new_object_graph()</span>.  This creates an <span class=\"docutils literal\">ObjectGraph</span>, which you can use toinstantiate objects using dependency injection.  If you pass no args to<span class=\"docutils literal\">new_object_graph()</span>, it will return a reasonably configured default<span class=\"docutils literal\">ObjectGraph</span>.</p><pre><code><span class=o>&gt;&gt;&gt;</span> <span class=k>class</span> <span class=nc>OuterClass</span><span class=p>(</span><span class=nb>object</span><span class=p>):</span><span class=w></span><span class=o>...</span>     <span class=k>def</span> <span class=fm>__init__</span><span class=p>(</span><span class=bp>self</span><span class=p>,</span> <span class=n>inner_class</span><span class=p>):</span><span class=w></span><span class=o>...</span>         <span class=bp>self</span><span class=o>.</span><span class=n>inner_class</span> <span class=o>=</span> <span class=n>inner_class</span><span class=w></span><span class=o>...</span><span class=w></span><span class=o>&gt;&gt;&gt;</span> <span class=k>class</span> <span class=nc>InnerClass</span><span class=p>(</span><span class=nb>object</span><span class=p>):</span><span class=w></span><span class=o>...</span>     <span class=k>def</span> <span class=fm>__init__</span><span class=p>(</span><span class=bp>self</span><span class=p>):</span><span class=w></span><span class=o>...</span>         <span class=bp>self</span><span class=o>.</span><span class=n>forty_two</span> <span class=o>=</span> <span class=mi>42</span><span class=w></span><span class=o>...</span><span class=w></span><span class=o>&gt;&gt;&gt;</span> <span class=n>obj_graph</span> <span class=o>=</span> <span class=n>pinject</span><span class=o>.</span><span class=n>new_object_graph</span><span class=p>()</span><span class=w></span><span class=o>&gt;&gt;&gt;</span> <span class=n>outer_class</span> <span class=o>=</span> <span class=n>obj_graph</span><span class=o>.</span><span class=n>provide</span><span class=p>(</span><span class=n>OuterClass</span><span class=p>)</span><span class=w></span><span class=o>&gt;&gt;&gt;</span> <span class=nb>print</span> <span class=n>outer_class</span><span class=o>.</span><span class=n>inner_class</span><span class=o>.</span><span class=n>forty_two</span><span class=w></span><span class=mi>42</span><span class=w></span><span class=o>&gt;&gt;&gt;</span></code></pre><p>As you can see, you don\u2019t need to tell Pinject how to construct its<span class=\"docutils literal\">ObjectGraph</span>, and you don\u2019t need to put decorators in your code.  Pinject hasreasonable defaults that allow it to work out of the box.</p><p>A Pinject <em>binding</em> is an association between an <em>arg name</em> and a <em>provider</em>.In the example above, Pinject created a binding between the arg name<span class=\"docutils literal\">inner_class</span> and an implicitly created provider for the class<span class=\"docutils literal\">InnerClass</span>.  The binding it had created was how Pinject knew that itshould pass an instance of <span class=\"docutils literal\">InnerClass</span> as the value of the <span class=\"docutils literal\">inner_class</span>arg when instantiating <span class=\"docutils literal\">OuterClass</span>.</p></section><section id=implicit-class-bindings><h2>Implicit class bindings</h2><p>Pinject creates implicit bindings for classes.  The implicit bindings assumeyour code follows PEP8 conventions: your classes are named in <span class=\"docutils literal\">CamelCase</span>,and your args are named in <span class=\"docutils literal\">lower_with_underscores</span>.  Pinject transformsclass names to injectable arg names by lowercasing words and connecting themwith underscores.  It will also ignore any leading underscore on the classname.</p><table><thead><tr><th class=head><p>Class name</th><th class=head><p>Arg name</th></tr></thead><tbody><tr><td><p><span class=\"docutils literal\">Foo</span></td><td><p><span class=\"docutils literal\">foo</span></td></tr><tr><td><p><span class=\"docutils literal\">FooBar</span></td><td><p><span class=\"docutils literal\">foo_bar</span></td></tr><tr><td><p><span class=\"docutils literal\">_Foo</span></td><td><p><span class=\"docutils literal\">foo</span></td></tr><tr><td><p><span class=\"docutils literal\">_FooBar</span></td><td><p><span class=\"docutils literal\">foo_bar</span></td></tr></tbody></table><p>If two classes map to the same arg name, whether those classes are in the samemodule or different modules, Pinject will not create an implicit binding forthat arg name (though it will not raise an error).</p></section><section id=finding-classes-and-providers-for-implicit-bindings><h2>Finding classes and providers for implicit bindings</h2><p>So far, the examples have not told <span class=\"docutils literal\">new_object_graph()</span> the classes forwhich it should create implicit bindings.  <span class=\"docutils literal\">new_object_graph()</span> by defaultlooks in all imported modules, but you may occasionally want to restrict theclasses for which <span class=\"docutils literal\">new_object_graph()</span> creates implicit bindings.  If so,<span class=\"docutils literal\">new_object_graph()</span> has two args for this purpose.</p><ul class=simple><li><p>The <span class=\"docutils literal\">modules</span> arg specifies in which (python) modules to look for classes; this defaults to <span class=\"docutils literal\">ALL_IMPORTED_MODULES</span>.</li><li><p>The <span class=\"docutils literal\">classes</span> arg specifies a exact list of classes; this defaults to <span class=\"docutils literal\">None</span>.</li></ul><pre><code><span class=o>&gt;&gt;&gt;</span> <span class=k>class</span> <span class=nc>SomeClass</span><span class=p>(</span><span class=nb>object</span><span class=p>):</span><span class=w></span><span class=o>...</span>     <span class=k>def</span> <span class=fm>__init__</span><span class=p>(</span><span class=bp>self</span><span class=p>,</span> <span class=n>foo</span><span class=p>):</span><span class=w></span><span class=o>...</span>         <span class=bp>self</span><span class=o>.</span><span class=n>foo</span> <span class=o>=</span> <span class=n>foo</span><span class=w></span><span class=o>...</span><span class=w></span><span class=o>&gt;&gt;&gt;</span> <span class=k>class</span> <span class=nc>Foo</span><span class=p>(</span><span class=nb>object</span><span class=p>):</span><span class=w></span><span class=o>...</span>     <span class=k>pass</span><span class=w></span><span class=o>...</span><span class=w></span><span class=o>&gt;&gt;&gt;</span> <span class=n>obj_graph</span> <span class=o>=</span> <span class=n>pinject</span><span class=o>.</span><span class=n>new_object_graph</span><span class=p>(</span><span class=n>modules</span><span class=o>=</span><span class=kc>None</span><span class=p>,</span> <span class=n>classes</span><span class=o>=</span><span class=p>[</span><span class=n>SomeClass</span><span class=p>])</span><span class=w></span><span class=o>&gt;&gt;&gt;</span> <span class=c1># obj_graph.provide(SomeClass)  # would raise a NothingInjectableForArgError</span><span class=w></span><span class=o>&gt;&gt;&gt;</span> <span class=n>obj_graph</span> <span class=o>=</span> <span class=n>pinject</span><span class=o>.</span><span class=n>new_object_graph</span><span class=p>(</span><span class=n>modules</span><span class=o>=</span><span class=kc>None</span><span class=p>,</span> <span class=n>classes</span><span class=o>=</span><span class=p>[</span><span class=n>SomeClass</span><span class=p>,</span> <span class=n>Foo</span><span class=p>])</span><span class=w></span><span class=o>&gt;&gt;&gt;</span> <span class=n>some_class</span> <span class=o>=</span> <span class=n>obj_graph</span><span class=o>.</span><span class=n>provide</span><span class=p>(</span><span class=n>SomeClass</span><span class=p>)</span><span class=w></span><span class=o>&gt;&gt;&gt;</span></code></pre></section><section id=auto-copying-args-to-fields><h2>Auto-copying args to fields</h2><p>One thing that can get tedious about dependency injection via initializers isthat you need to write <span class=\"docutils literal\">__init__()</span> methods that copy args to fields.  These<span class=\"docutils literal\">__init__()</span> methods can get repetitive, especially when you have severalinitializer args.</p><pre><code><span class=o>&gt;&gt;&gt;</span> <span class=k>class</span> <span class=nc>ClassWithTediousInitializer</span><span class=p>(</span><span class=nb>object</span><span class=p>):</span><span class=w></span><span class=o>...</span>     <span class=k>def</span> <span class=fm>__init__</span><span class=p>(</span><span class=bp>self</span><span class=p>,</span> <span class=n>foo</span><span class=p>,</span> <span class=n>bar</span><span class=p>,</span> <span class=n>baz</span><span class=p>,</span> <span class=n>quux</span><span class=p>):</span><span class=w></span><span class=o>...</span>         <span class=bp>self</span><span class=o>.</span><span class=n>_foo</span> <span class=o>=</span> <span class=n>foo</span><span class=w></span><span class=o>...</span>         <span class=bp>self</span><span class=o>.</span><span class=n>_bar</span> <span class=o>=</span> <span class=n>bar</span><span class=w></span><span class=o>...</span>         <span class=bp>self</span><span class=o>.</span><span class=n>_baz</span> <span class=o>=</span> <span class=n>baz</span><span class=w></span><span class=o>...</span>         <span class=bp>self</span><span class=o>.</span><span class=n>_quux</span> <span class=o>=</span> <span class=n>quux</span><span class=w></span><span class=o>...</span><span class=w></span><span class=o>&gt;&gt;&gt;</span></code></pre><p>Pinject provides decorators that you can use to avoid repetitive initializerbodies.</p><ul class=simple><li><p><span class=\"docutils literal\">@copy_args_to_internal_fields</span> prepends an underscore, i.e., it copies an arg named <span class=\"docutils literal\">foo</span> to a field named <span class=\"docutils literal\">_foo</span>.  It\u2019s useful for normal classes.</li><li><p><span class=\"docutils literal\">@copy_args_to_public_fields</span> copies the arg named as-is, i.e., it copies an arg named <span class=\"docutils literal\">foo</span> to a field named <span class=\"docutils literal\">foo</span>.  It\u2019s useful for data objects.</li></ul><pre><code><span class=o>&gt;&gt;&gt;</span> <span class=k>class</span> <span class=nc>ClassWithTediousInitializer</span><span class=p>(</span><span class=nb>object</span><span class=p>):</span><span class=w></span><span class=o>...</span>     <span class=nd>@pinject</span><span class=o>.</span><span class=n>copy_args_to_internal_fields</span><span class=w></span><span class=o>...</span>     <span class=k>def</span> <span class=fm>__init__</span><span class=p>(</span><span class=bp>self</span><span class=p>,</span> <span class=n>foo</span><span class=p>,</span> <span class=n>bar</span><span class=p>,</span> <span class=n>baz</span><span class=p>,</span> <span class=n>quux</span><span class=p>):</span><span class=w></span><span class=o>...</span>         <span class=k>pass</span><span class=w></span><span class=o>...</span><span class=w></span><span class=o>&gt;&gt;&gt;</span> <span class=n>cwti</span> <span class=o>=</span> <span class=n>ClassWithTediousInitializer</span><span class=p>(</span><span class=s1>'a-foo'</span><span class=p>,</span> <span class=s1>'a-bar'</span><span class=p>,</span> <span class=s1>'a-baz'</span><span class=p>,</span> <span class=s1>'a-quux'</span><span class=p>)</span><span class=w></span><span class=o>&gt;&gt;&gt;</span> <span class=nb>print</span> <span class=n>cwti</span><span class=o>.</span><span class=n>_foo</span><span class=w></span><span class=s1>'a-foo'</span><span class=w></span><span class=o>&gt;&gt;&gt;</span></code></pre><p>When using these decorators, you\u2019ll normally <span class=\"docutils literal\">pass</span> in the body of theinitializer, but you can put other statements there if you need to.  The argswill be copied to fields before the initializer body is executed.</p><p>These decorators can be applied to initializers that take <span class=\"docutils literal\">**kwargs</span> but notinitializers that take <span class=\"docutils literal\">*pargs</span> (since it would be unclear what field nameto use).</p></section><section id=binding-specs><h2>Binding specs</h2><p>To create any bindings more complex than the implicit class bindings describedabove, you use a <em>binding spec</em>.  A binding spec is any python class thatinherits from <span class=\"docutils literal\">BindingSpec</span>.  A binding spec can do three things:</p><ul class=simple><li><p>Its <span class=\"docutils literal\">configure()</span> method can create explicit bindings to classes or instances, as well as requiring bindings without creating them.</li><li><p>Its <span class=\"docutils literal\">dependencies()</span> method can return depended-on binding specs.</li><li><p>It can have provider methods, for which explicit bindings are created.</li></ul><p>The <span class=\"docutils literal\">new_object_graph()</span> function takes a sequence of binding spec instancesas its <span class=\"docutils literal\">binding_specs</span> arg.  <span class=\"docutils literal\">new_object_graph()</span> takes binding specinstances, rather than binding spec classes, so that you can manually injectany initial dependencies into the binding specs as needed.</p><p>Binding specs should generally live in files named <span class=\"docutils literal\">binding_specs.py</span>, whereeach file is named in the plural even if there is exactly one binding spec init.  Ideally, a directory\u2019s worth of functionality should be coverable with asingle binding spec.  If not, you can create multiple binding specs in thesame <span class=\"docutils literal\">binding_specs.py</span> file.  If you have so many binding specs that youneed to split them into multiple files, you should name them each with a<span class=\"docutils literal\">_binding_specs.py</span> suffix.</p><section id=binding-spec-configure-methods><h3>Binding spec <span class=\"docutils literal\">configure()</span> methods</h3><p>Pinject creates implicit bindings for classes, but sometimes the implicitbindings aren\u2019t what you want.  For instance, if you have<span class=\"docutils literal\">SomeReallyLongClassName</span>, you may not want to name your initializer args<span class=\"docutils literal\">some_really_long_class_name</span> but instead use something shorter like<span class=\"docutils literal\">long_name</span>, just for this class.</p><p>For such situations, you can create explicit bindings using the<span class=\"docutils literal\">configure()</span> method of a binding spec.  The <span class=\"docutils literal\">configure()</span> method takes afunction <span class=\"docutils literal\">bind()</span> as an arg and calls that function to create explicitbindings.</p><pre><code><span class=o>&gt;&gt;&gt;</span> <span class=k>class</span> <span class=nc>SomeClass</span><span class=p>(</span><span class=nb>object</span><span class=p>):</span><span class=w></span><span class=o>...</span>     <span class=k>def</span> <span class=fm>__init__</span><span class=p>(</span><span class=bp>self</span><span class=p>,</span> <span class=n>long_name</span><span class=p>):</span><span class=w></span><span class=o>...</span>         <span class=bp>self</span><span class=o>.</span><span class=n>long_name</span> <span class=o>=</span> <span class=n>long_name</span><span class=w></span><span class=o>...</span><span class=w></span><span class=o>&gt;&gt;&gt;</span> <span class=k>class</span> <span class=nc>SomeReallyLongClassName</span><span class=p>(</span><span class=nb>object</span><span class=p>):</span><span class=w></span><span class=o>...</span>     <span class=k>def</span> <span class=fm>__init__</span><span class=p>(</span><span class=bp>self</span><span class=p>):</span><span class=w></span><span class=o>...</span>         <span class=bp>self</span><span class=o>.</span><span class=n>foo</span> <span class=o>=</span> <span class=s1>'foo'</span><span class=w></span><span class=o>...</span><span class=w></span><span class=o>&gt;&gt;&gt;</span> <span class=k>class</span> <span class=nc>MyBindingSpec</span><span class=p>(</span><span class=n>pinject</span><span class=o>.</span><span class=n>BindingSpec</span><span class=p>):</span><span class=w></span><span class=o>...</span>     <span class=k>def</span> <span class=nf>configure</span><span class=p>(</span><span class=bp>self</span><span class=p>,</span> <span class=n>bind</span><span class=p>):</span><span class=w></span><span class=o>...</span>         <span class=n>bind</span><span class=p>(</span><span class=s1>'long_name'</span><span class=p>,</span> <span class=n>to_class</span><span class=o>=</span><span class=n>SomeReallyLongClassName</span><span class=p>)</span><span class=w></span><span class=o>...</span><span class=w></span><span class=o>&gt;&gt;&gt;</span> <span class=n>obj_graph</span> <span class=o>=</span> <span class=n>pinject</span><span class=o>.</span><span class=n>new_object_graph</span><span class=p>(</span><span class=n>binding_specs</span><span class=o>=</span><span class=p>[</span><span class=n>MyBindingSpec</span><span class=p>()])</span><span class=w></span><span class=o>&gt;&gt;&gt;</span> <span class=n>some_class</span> <span class=o>=</span> <span class=n>obj_graph</span><span class=o>.</span><span class=n>provide</span><span class=p>(</span><span class=n>SomeClass</span><span class=p>)</span><span class=w></span><span class=o>&gt;&gt;&gt;</span> <span class=nb>print</span> <span class=n>some_class</span><span class=o>.</span><span class=n>long_name</span><span class=o>.</span><span class=n>foo</span><span class=w></span><span class=s1>'foo'</span><span class=w></span><span class=o>&gt;&gt;&gt;</span></code></pre><p>The <span class=\"docutils literal\">bind()</span> function passed to a binding function binds its first arg,which must be an arg name (as a <span class=\"docutils literal\">str</span>), to exactly one of two kinds ofthings.</p><ul class=simple><li><p>Using <span class=\"docutils literal\">to_class</span> binds to a class.  When the binding is used, Pinject injects an instance of the class.</li><li><p>Using <span class=\"docutils literal\">to_instance</span> binds to an instance of some object.  Every time the binding is used, Pinject uses that instance.</li></ul><pre><code><span class=o>&gt;&gt;&gt;</span> <span class=k>class</span> <span class=nc>SomeClass</span><span class=p>(</span><span class=nb>object</span><span class=p>):</span><span class=w></span><span class=o>...</span>     <span class=k>def</span> <span class=fm>__init__</span><span class=p>(</span><span class=bp>self</span><span class=p>,</span> <span class=n>foo</span><span class=p>):</span><span class=w></span><span class=o>...</span>         <span class=bp>self</span><span class=o>.</span><span class=n>foo</span> <span class=o>=</span> <span class=n>foo</span><span class=w></span><span class=o>...</span><span class=w></span><span class=o>&gt;&gt;&gt;</span> <span class=k>class</span> <span class=nc>MyBindingSpec</span><span class=p>(</span><span class=n>pinject</span><span class=o>.</span><span class=n>BindingSpec</span><span class=p>):</span><span class=w></span><span class=o>...</span>     <span class=k>def</span> <span class=nf>configure</span><span class=p>(</span><span class=bp>self</span><span class=p>,</span> <span class=n>bind</span><span class=p>):</span><span class=w></span><span class=o>...</span>         <span class=n>bind</span><span class=p>(</span><span class=s1>'foo'</span><span class=p>,</span> <span class=n>to_instance</span><span class=o>=</span><span class=s1>'a-foo'</span><span class=p>)</span><span class=w></span><span class=o>...</span><span class=w></span><span class=o>&gt;&gt;&gt;</span> <span class=n>obj_graph</span> <span class=o>=</span> <span class=n>pinject</span><span class=o>.</span><span class=n>new_object_graph</span><span class=p>(</span><span class=n>binding_specs</span><span class=o>=</span><span class=p>[</span><span class=n>MyBindingSpec</span><span class=p>()])</span><span class=w></span><span class=o>&gt;&gt;&gt;</span> <span class=n>some_class</span> <span class=o>=</span> <span class=n>obj_graph</span><span class=o>.</span><span class=n>provide</span><span class=p>(</span><span class=n>SomeClass</span><span class=p>)</span><span class=w></span><span class=o>&gt;&gt;&gt;</span> <span class=nb>print</span> <span class=n>some_class</span><span class=o>.</span><span class=n>foo</span><span class=w></span><span class=s1>'a-foo'</span><span class=w></span><span class=o>&gt;&gt;&gt;</span></code></pre><p>The <span class=\"docutils literal\">configure()</span> method of a binding spec also may take a function<span class=\"docutils literal\">require()</span> as an arg and use that function to require that a binding bepresent without actually defining that binding.  <span class=\"docutils literal\">require()</span> takes as argsthe name of the arg for which to require a binding.</p><pre><code><span class=o>&gt;&gt;&gt;</span> <span class=k>class</span> <span class=nc>MainBindingSpec</span><span class=p>(</span><span class=n>pinject</span><span class=o>.</span><span class=n>BindingSpec</span><span class=p>):</span><span class=w></span><span class=o>...</span>     <span class=k>def</span> <span class=nf>configure</span><span class=p>(</span><span class=bp>self</span><span class=p>,</span> <span class=n>require</span><span class=p>):</span><span class=w></span><span class=o>...</span>         <span class=n>require</span><span class=p>(</span><span class=s1>'foo'</span><span class=p>)</span><span class=w></span><span class=o>...</span><span class=w></span><span class=o>&gt;&gt;&gt;</span> <span class=k>class</span> <span class=nc>RealFooBindingSpec</span><span class=p>(</span><span class=n>pinject</span><span class=o>.</span><span class=n>BindingSpec</span><span class=p>):</span><span class=w></span><span class=o>...</span>     <span class=k>def</span> <span class=nf>configure</span><span class=p>(</span><span class=bp>self</span><span class=p>,</span> <span class=n>bind</span><span class=p>):</span><span class=w></span><span class=o>...</span>         <span class=n>bind</span><span class=p>(</span><span class=s1>'foo'</span><span class=p>,</span> <span class=n>to_instance</span><span class=o>=</span><span class=s1>'a-real-foo'</span><span class=p>)</span><span class=w></span><span class=o>...</span><span class=w></span><span class=o>&gt;&gt;&gt;</span> <span class=k>class</span> <span class=nc>StubFooBindingSpec</span><span class=p>(</span><span class=n>pinject</span><span class=o>.</span><span class=n>BindingSpec</span><span class=p>):</span><span class=w></span><span class=o>...</span>     <span class=k>def</span> <span class=nf>configure</span><span class=p>(</span><span class=bp>self</span><span class=p>,</span> <span class=n>bind</span><span class=p>):</span><span class=w></span><span class=o>...</span>         <span class=n>bind</span><span class=p>(</span><span class=s1>'foo'</span><span class=p>,</span> <span class=n>to_instance</span><span class=o>=</span><span class=s1>'a-stub-foo'</span><span class=p>)</span><span class=w></span><span class=o>...</span><span class=w></span><span class=o>&gt;&gt;&gt;</span> <span class=k>class</span> <span class=nc>SomeClass</span><span class=p>(</span><span class=nb>object</span><span class=p>):</span><span class=w></span><span class=o>...</span>     <span class=k>def</span> <span class=fm>__init__</span><span class=p>(</span><span class=bp>self</span><span class=p>,</span> <span class=n>foo</span><span class=p>):</span><span class=w></span><span class=o>...</span>         <span class=bp>self</span><span class=o>.</span><span class=n>foo</span> <span class=o>=</span> <span class=n>foo</span><span class=w></span><span class=o>...</span><span class=w></span><span class=o>&gt;&gt;&gt;</span> <span class=n>obj_graph</span> <span class=o>=</span> <span class=n>pinject</span><span class=o>.</span><span class=n>new_object_graph</span><span class=p>(</span><span class=w></span><span class=o>...</span>     <span class=n>binding_specs</span><span class=o>=</span><span class=p>[</span><span class=n>MainBindingSpec</span><span class=p>(),</span> <span class=n>RealFooBindingSpec</span><span class=p>()])</span><span class=w></span><span class=o>&gt;&gt;&gt;</span> <span class=n>some_class</span> <span class=o>=</span> <span class=n>obj_graph</span><span class=o>.</span><span class=n>provide</span><span class=p>(</span><span class=n>SomeClass</span><span class=p>)</span><span class=w></span><span class=o>&gt;&gt;&gt;</span> <span class=nb>print</span> <span class=n>some_class</span><span class=o>.</span><span class=n>foo</span><span class=w></span><span class=s1>'a-real-foo'</span><span class=w></span><span class=o>&gt;&gt;&gt;</span> <span class=c1># pinject.new_object_graph(</span><span class=w></span><span class=o>...</span> <span class=c1>#    binding_specs=[MainBindingSpec()])  # would raise a MissingRequiredBindingError</span><span class=w></span><span class=o>...</span><span class=w></span><span class=o>&gt;&gt;&gt;</span></code></pre><p>Being able to require a binding without defining the binding is useful whenyou know the code will need some dependency satisfied, but there is more thanone implementation that satisfies that dependency, e.g., there may be a realRPC client and a fake RPC client.  Declaring the dependency means that anyexpected but missing bindings will be detected early, when<span class=\"docutils literal\">new_object_graph()</span> is called, rather than in the middle of running yourprogram.</p><p>You\u2019ll notice that the <span class=\"docutils literal\">configure()</span> methods above have differentsignatures, sometimes taking the arg <span class=\"docutils literal\">bind</span> and sometimes taking the arg<span class=\"docutils literal\">require</span>.  <span class=\"docutils literal\">configure()</span> methods must take at least one arg that iseither <span class=\"docutils literal\">bind</span> or <span class=\"docutils literal\">require</span>, and they may have both args.  Pinject willpass whichever arg or args your <span class=\"docutils literal\">configure()</span> method needs.</p></section><section id=binding-spec-dependencies><h3>Binding spec dependencies</h3><p>Binding specs can declare dependencies.  A binding spec declares itsdependencies by returning a sequence of instances of the dependent bindingspecs from its <span class=\"docutils literal\">dependencies()</span> method.</p><pre><code><span class=o>&gt;&gt;&gt;</span> <span class=k>class</span> <span class=nc>ClassOne</span><span class=p>(</span><span class=nb>object</span><span class=p>):</span><span class=w></span><span class=o>...</span>    <span class=k>def</span> <span class=fm>__init__</span><span class=p>(</span><span class=bp>self</span><span class=p>,</span> <span class=n>foo</span><span class=p>):</span><span class=w></span><span class=o>...</span>        <span class=bp>self</span><span class=o>.</span><span class=n>foo</span> <span class=o>=</span> <span class=n>foo</span><span class=w></span><span class=o>....</span><span class=w></span><span class=o>&gt;&gt;&gt;</span> <span class=k>class</span> <span class=nc>BindingSpecOne</span><span class=p>(</span><span class=n>pinject</span><span class=o>.</span><span class=n>BindingSpec</span><span class=p>):</span><span class=w></span><span class=o>...</span>     <span class=k>def</span> <span class=nf>configure</span><span class=p>(</span><span class=bp>self</span><span class=p>,</span> <span class=n>bind</span><span class=p>):</span><span class=w></span><span class=o>...</span>         <span class=n>bind</span><span class=p>(</span><span class=s1>'foo'</span><span class=p>,</span> <span class=n>to_instance</span><span class=o>=</span><span class=s1>'foo-'</span><span class=p>)</span><span class=w></span><span class=o>...</span><span class=w></span><span class=o>&gt;&gt;&gt;</span> <span class=k>class</span> <span class=nc>ClassTwo</span><span class=p>(</span><span class=nb>object</span><span class=p>):</span><span class=w></span><span class=o>...</span>     <span class=k>def</span> <span class=fm>__init__</span><span class=p>(</span><span class=bp>self</span><span class=p>,</span> <span class=n>class_one</span><span class=p>,</span> <span class=n>bar</span><span class=p>):</span><span class=w></span><span class=o>...</span>         <span class=bp>self</span><span class=o>.</span><span class=n>foobar</span> <span class=o>=</span> <span class=n>class_one</span><span class=o>.</span><span class=n>foo</span> <span class=o>+</span> <span class=n>bar</span><span class=w></span><span class=o>...</span><span class=w></span><span class=o>&gt;&gt;&gt;</span> <span class=k>class</span> <span class=nc>BindingSpecTwo</span><span class=p>(</span><span class=n>pinject</span><span class=o>.</span><span class=n>BindingSpec</span><span class=p>):</span><span class=w></span><span class=o>...</span>     <span class=k>def</span> <span class=nf>configure</span><span class=p>(</span><span class=bp>self</span><span class=p>,</span> <span class=n>bind</span><span class=p>):</span><span class=w></span><span class=o>...</span>         <span class=n>bind</span><span class=p>(</span><span class=s1>'bar'</span><span class=p>,</span> <span class=n>to_instance</span><span class=o>=</span><span class=s1>'-bar'</span><span class=p>)</span><span class=w></span><span class=o>...</span>     <span class=k>def</span> <span class=nf>dependencies</span><span class=p>(</span><span class=bp>self</span><span class=p>):</span><span class=w></span><span class=o>...</span>         <span class=k>return</span> <span class=p>[</span><span class=n>BindingSpecOne</span><span class=p>()]</span><span class=w></span><span class=o>...</span><span class=w></span><span class=o>&gt;&gt;&gt;</span> <span class=n>obj_graph</span> <span class=o>=</span> <span class=n>pinject</span><span class=o>.</span><span class=n>new_object_graph</span><span class=p>(</span><span class=n>binding_specs</span><span class=o>=</span><span class=p>[</span><span class=n>BindingSpecTwo</span><span class=p>()])</span><span class=w></span><span class=o>&gt;&gt;&gt;</span> <span class=n>class_two</span> <span class=o>=</span> <span class=n>obj_graph</span><span class=o>.</span><span class=n>provide</span><span class=p>(</span><span class=n>ClassTwo</span><span class=p>)</span><span class=w></span><span class=o>&gt;&gt;&gt;</span> <span class=nb>print</span> <span class=n>class_two</span><span class=o>.</span><span class=n>foobar</span><span class=w></span><span class=s1>'foo--bar'</span><span class=w></span><span class=o>&gt;&gt;&gt;</span></code></pre><p>If classes from module A are injected as collaborators into classes frommodule B, then you should consider having the binding spec for module B dependon the binding spec for module A.  In the example above, <span class=\"docutils literal\">ClassOne</span> isinjected as a collaborator into <span class=\"docutils literal\">ClassTwo</span>, and so <span class=\"docutils literal\">BindingSpecTwo</span> (thebinding spec for <span class=\"docutils literal\">ClassTwo</span>) depends on <span class=\"docutils literal\">BindingSpecOne</span> (the binding specfor <span class=\"docutils literal\">ClassOne</span>).</p><p>In this way, you can build a graph of binding spec dependencies that mirrorsthe graph of collaborator dependencies.</p><p>Since explicit bindings cannot conflict (see the section below on bindingprecedence), a binding spec should only have dependencies that there willnever be a choice about using.  If there may be a choice, then it is better tolist the binding specs separately and explicitly when calling<span class=\"docutils literal\">new_object_graph()</span>.</p><p>The binding spec dependencies can be a directed acyclic graph (DAG); that is,binding spec A can be a dependency of B and of C, and binding spec D can havedependencies on B and C.  Even though there are multiple dependency paths fromD to A, the bindings in binding spec A will only be evaluated once.</p><p>The binding spec instance of A that is a dependency of B is considered thesame as the instance that is a dependency of C if the two instances are equal(via <span class=\"docutils literal\">__eq__()</span>).  The default implementation of <span class=\"docutils literal\">__eq__()</span> in<span class=\"docutils literal\">BindingSpec</span> says that two binding specs are equal if they are of exactlythe same python type.  You will need to override <span class=\"docutils literal\">__eq__()</span> (as well as<span class=\"docutils literal\">__hash__()</span>) if your binding spec is parameterized, i.e., if it takes oneor more initializer args so that two instances of the binding spec may behavedifferently.</p><pre><code><span class=o>&gt;&gt;&gt;</span> <span class=k>class</span> <span class=nc>SomeBindingSpec</span><span class=p>(</span><span class=n>pinject</span><span class=o>.</span><span class=n>BindingSpec</span><span class=p>):</span><span class=w></span><span class=o>...</span>     <span class=k>def</span> <span class=fm>__init__</span><span class=p>(</span><span class=bp>self</span><span class=p>,</span> <span class=n>the_instance</span><span class=p>):</span><span class=w></span><span class=o>...</span>         <span class=bp>self</span><span class=o>.</span><span class=n>_the_instance</span> <span class=o>=</span> <span class=n>the_instance</span><span class=w></span><span class=o>...</span>     <span class=k>def</span> <span class=nf>configure</span><span class=p>(</span><span class=bp>self</span><span class=p>,</span> <span class=n>bind</span><span class=p>):</span><span class=w></span><span class=o>...</span>         <span class=n>bind</span><span class=p>(</span><span class=s1>'foo'</span><span class=p>,</span> <span class=n>to_instance</span><span class=o>=</span><span class=bp>self</span><span class=o>.</span><span class=n>_the_instance</span><span class=p>)</span><span class=w></span><span class=o>...</span>     <span class=k>def</span> <span class=fm>__eq__</span><span class=p>(</span><span class=bp>self</span><span class=p>,</span> <span class=n>other</span><span class=p>):</span><span class=w></span><span class=o>...</span>         <span class=k>return</span> <span class=p>(</span><span class=nb>type</span><span class=p>(</span><span class=bp>self</span><span class=p>)</span> <span class=o>==</span> <span class=nb>type</span><span class=p>(</span><span class=n>other</span><span class=p>)</span> <span class=ow>and</span><span class=w></span><span class=o>...</span>                 <span class=bp>self</span><span class=o>.</span><span class=n>_the_instance</span> <span class=o>==</span> <span class=n>other</span><span class=o>.</span><span class=n>_the_instance</span><span class=p>)</span><span class=w></span><span class=o>...</span>     <span class=k>def</span> <span class=fm>__hash__</span><span class=p>(</span><span class=bp>self</span><span class=p>):</span><span class=w></span><span class=o>...</span>         <span class=k>return</span> <span class=nb>hash</span><span class=p>(</span><span class=nb>type</span><span class=p>(</span><span class=bp>self</span><span class=p>))</span> <span class=o>^</span> <span class=nb>hash</span><span class=p>(</span><span class=bp>self</span><span class=o>.</span><span class=n>_the_instance</span><span class=p>)</span><span class=w></span><span class=o>...</span><span class=w></span><span class=o>&gt;&gt;&gt;</span></code></pre></section><section id=provider-methods><h3>Provider methods</h3><p>If it takes more to instantiate a class than calling its initializer andinjecting initializer args, then you can write a <em>provider method</em> for it.Pinject can use provider methods to instantiate objects used to inject as thevalues of other args.</p><p>Pinject looks on binding specs for methods named like provider methods andthen creates explicit bindings for them.</p><pre><code><span class=o>&gt;&gt;&gt;</span> <span class=k>class</span> <span class=nc>SomeClass</span><span class=p>(</span><span class=nb>object</span><span class=p>):</span><span class=w></span><span class=o>...</span>     <span class=k>def</span> <span class=fm>__init__</span><span class=p>(</span><span class=bp>self</span><span class=p>,</span> <span class=n>foo</span><span class=p>):</span><span class=w></span><span class=o>...</span>         <span class=bp>self</span><span class=o>.</span><span class=n>foo</span> <span class=o>=</span> <span class=n>foo</span><span class=w></span><span class=o>...</span><span class=w></span><span class=o>&gt;&gt;&gt;</span> <span class=k>class</span> <span class=nc>SomeBindingSpec</span><span class=p>(</span><span class=n>pinject</span><span class=o>.</span><span class=n>BindingSpec</span><span class=p>):</span><span class=w></span><span class=o>...</span>     <span class=k>def</span> <span class=nf>provide_foo</span><span class=p>(</span><span class=bp>self</span><span class=p>):</span><span class=w></span><span class=o>...</span>         <span class=k>return</span> <span class=s1>'some-complex-foo'</span><span class=w></span><span class=o>...</span><span class=w></span><span class=o>&gt;&gt;&gt;</span> <span class=n>obj_graph</span> <span class=o>=</span> <span class=n>pinject</span><span class=o>.</span><span class=n>new_object_graph</span><span class=p>(</span><span class=n>binding_specs</span><span class=o>=</span><span class=p>[</span><span class=n>SomeBindingSpec</span><span class=p>()])</span><span class=w></span><span class=o>&gt;&gt;&gt;</span> <span class=n>some_class</span> <span class=o>=</span> <span class=n>obj_graph</span><span class=o>.</span><span class=n>provide</span><span class=p>(</span><span class=n>SomeClass</span><span class=p>)</span><span class=w></span><span class=o>&gt;&gt;&gt;</span> <span class=nb>print</span> <span class=n>some_class</span><span class=o>.</span><span class=n>foo</span><span class=w></span><span class=s1>'some-complex-foo'</span><span class=w></span><span class=o>&gt;&gt;&gt;</span></code></pre><p>Pinject looks on binding specs for methods whose names start with<span class=\"docutils literal\">provide_</span>, and it assumes that the methods are providers for whatever therest of their method names are.  For instance, Pinject assumes that the method<span class=\"docutils literal\">provide_foo_bar()</span> is a provider method for the arg name <span class=\"docutils literal\">foo_bar</span>.</p><p>Pinject injects all args of provider methods that have no default when itcalls the provider method.</p><pre><code><span class=o>&gt;&gt;&gt;</span> <span class=k>class</span> <span class=nc>SomeClass</span><span class=p>(</span><span class=nb>object</span><span class=p>):</span><span class=w></span><span class=o>...</span>     <span class=k>def</span> <span class=fm>__init__</span><span class=p>(</span><span class=bp>self</span><span class=p>,</span> <span class=n>foobar</span><span class=p>):</span><span class=w></span><span class=o>...</span>         <span class=bp>self</span><span class=o>.</span><span class=n>foobar</span> <span class=o>=</span> <span class=n>foobar</span><span class=w></span><span class=o>...</span><span class=w></span><span class=o>&gt;&gt;&gt;</span> <span class=k>class</span> <span class=nc>SomeBindingSpec</span><span class=p>(</span><span class=n>pinject</span><span class=o>.</span><span class=n>BindingSpec</span><span class=p>):</span><span class=w></span><span class=o>...</span>     <span class=k>def</span> <span class=nf>provide_foobar</span><span class=p>(</span><span class=bp>self</span><span class=p>,</span> <span class=n>bar</span><span class=p>,</span> <span class=n>hyphen</span><span class=o>=</span><span class=s1>'-'</span><span class=p>):</span><span class=w></span><span class=o>...</span>         <span class=k>return</span> <span class=s1>'foo'</span> <span class=o>+</span> <span class=n>hyphen</span> <span class=o>+</span> <span class=n>bar</span><span class=w></span><span class=o>...</span>     <span class=k>def</span> <span class=nf>provide_bar</span><span class=p>(</span><span class=bp>self</span><span class=p>):</span><span class=w></span><span class=o>...</span>         <span class=k>return</span> <span class=s1>'bar'</span><span class=w></span><span class=o>...</span><span class=w></span><span class=o>&gt;&gt;&gt;</span> <span class=n>obj_graph</span> <span class=o>=</span> <span class=n>pinject</span><span class=o>.</span><span class=n>new_object_graph</span><span class=p>(</span><span class=n>binding_specs</span><span class=o>=</span><span class=p>[</span><span class=n>SomeBindingSpec</span><span class=p>()])</span><span class=w></span><span class=o>&gt;&gt;&gt;</span> <span class=n>some_class</span> <span class=o>=</span> <span class=n>obj_graph</span><span class=o>.</span><span class=n>provide</span><span class=p>(</span><span class=n>SomeClass</span><span class=p>)</span><span class=w></span><span class=o>&gt;&gt;&gt;</span> <span class=nb>print</span> <span class=n>some_class</span><span class=o>.</span><span class=n>foobar</span><span class=w></span><span class=s1>'foo-bar'</span><span class=w></span><span class=o>&gt;&gt;&gt;</span></code></pre></section></section><section id=binding-precedence><h2>Binding precedence</h2><p>Bindings have precedence: explicit bindings take precedence over implicitbindings.</p><ul class=simple><li><p>Explicit bindings are the bindings that come from binding specs.</li><li><p>Implicit bindings are the bindings created for classes in the <span class=\"docutils literal\">modules</span> and <span class=\"docutils literal\">classes</span> args passed to <span class=\"docutils literal\">new_object_graph()</span>.</li></ul><p>Pinject will prefer an explicit to an implicit binding.</p><pre><code><span class=o>&gt;&gt;&gt;</span> <span class=k>class</span> <span class=nc>SomeClass</span><span class=p>(</span><span class=nb>object</span><span class=p>):</span><span class=w></span><span class=o>...</span>     <span class=k>def</span> <span class=fm>__init__</span><span class=p>(</span><span class=bp>self</span><span class=p>,</span> <span class=n>foo</span><span class=p>):</span><span class=w></span><span class=o>...</span>         <span class=bp>self</span><span class=o>.</span><span class=n>foo</span> <span class=o>=</span> <span class=n>foo</span><span class=w></span><span class=o>...</span><span class=w></span><span class=o>&gt;&gt;&gt;</span> <span class=k>class</span> <span class=nc>Foo</span><span class=p>(</span><span class=nb>object</span><span class=p>):</span><span class=w></span><span class=o>...</span>     <span class=k>pass</span><span class=w></span><span class=o>...</span><span class=w></span><span class=o>&gt;&gt;&gt;</span> <span class=k>class</span> <span class=nc>SomeBindingSpec</span><span class=p>(</span><span class=n>pinject</span><span class=o>.</span><span class=n>BindingSpec</span><span class=p>):</span><span class=w></span><span class=o>...</span>     <span class=k>def</span> <span class=nf>configure</span><span class=p>(</span><span class=bp>self</span><span class=p>,</span> <span class=n>bind</span><span class=p>):</span><span class=w></span><span class=o>...</span>         <span class=n>bind</span><span class=p>(</span><span class=s1>'foo'</span><span class=p>,</span> <span class=n>to_instance</span><span class=o>=</span><span class=s1>'foo-instance'</span><span class=p>)</span><span class=w></span><span class=o>...</span><span class=w></span><span class=o>&gt;&gt;&gt;</span> <span class=n>obj_graph</span> <span class=o>=</span> <span class=n>pinject</span><span class=o>.</span><span class=n>new_object_graph</span><span class=p>(</span><span class=n>binding_specs</span><span class=o>=</span><span class=p>[</span><span class=n>SomeBindingSpec</span><span class=p>()])</span><span class=w></span><span class=o>&gt;&gt;&gt;</span> <span class=n>some_class</span> <span class=o>=</span> <span class=n>obj_graph</span><span class=o>.</span><span class=n>provide</span><span class=p>(</span><span class=n>SomeClass</span><span class=p>)</span><span class=w></span><span class=o>&gt;&gt;&gt;</span> <span class=nb>print</span> <span class=n>some_class</span><span class=o>.</span><span class=n>foo</span><span class=w></span><span class=s1>'foo-instance'</span><span class=w></span><span class=o>&gt;&gt;&gt;</span></code></pre><p>If you have two classes named the same thing, Pinject will have two different(and thus conflicting) implicit bindings.  But Pinject will not complainunless you try to use those bindings.  Pinject <em>will</em> complain if you try tocreate different (and thus conflicting) explicit bindings.</p></section><section id=safety><h2>Safety</h2><p>Pinject tries to strike a balance between being helpful and being safe.Sometimes, you may want or need to change this balance.</p><p><span class=\"docutils literal\">new_object_graph()</span> uses implicit bindings by default.  If you worry thatyou may accidentally inject a class or use a provider functionunintentionally, then you can make <span class=\"docutils literal\">new_object_graph()</span> ignore implicitbindings, by setting <span class=\"docutils literal\">only_use_explicit_bindings=True</span>.  If you do so, thenPinject will only use explicit bindings.</p><p>If you want to promote an implicit binding to be an explicit binding, you canannotate the corresponding class with <span class=\"docutils literal\">@inject()</span>.  The <span class=\"docutils literal\">@inject()</span>decorator lets you create explicit bindings without needing to create bindingspecs, as long as you can live with the binding defaults (e.g., no annotationson args, see below).</p><pre><code><span class=o>&gt;&gt;&gt;</span> <span class=k>class</span> <span class=nc>ExplicitlyBoundClass</span><span class=p>(</span><span class=nb>object</span><span class=p>):</span><span class=w></span><span class=o>...</span>     <span class=nd>@pinject</span><span class=o>.</span><span class=n>inject</span><span class=p>()</span><span class=w></span><span class=o>...</span>     <span class=k>def</span> <span class=fm>__init__</span><span class=p>(</span><span class=bp>self</span><span class=p>,</span> <span class=n>foo</span><span class=p>):</span><span class=w></span><span class=o>...</span>         <span class=bp>self</span><span class=o>.</span><span class=n>foo</span> <span class=o>=</span> <span class=n>foo</span><span class=w></span><span class=o>...</span><span class=w></span><span class=o>&gt;&gt;&gt;</span> <span class=k>class</span> <span class=nc>ImplicitlyBoundClass</span><span class=p>(</span><span class=nb>object</span><span class=p>):</span><span class=w></span><span class=o>...</span>     <span class=k>def</span> <span class=fm>__init__</span><span class=p>(</span><span class=bp>self</span><span class=p>,</span> <span class=n>foo</span><span class=p>):</span><span class=w></span><span class=o>...</span>         <span class=bp>self</span><span class=o>.</span><span class=n>foo</span> <span class=o>=</span> <span class=n>foo</span><span class=w></span><span class=o>...</span><span class=w></span><span class=o>&gt;&gt;&gt;</span> <span class=k>class</span> <span class=nc>SomeBindingSpec</span><span class=p>(</span><span class=n>pinject</span><span class=o>.</span><span class=n>BindingSpec</span><span class=p>):</span><span class=w></span><span class=o>...</span>     <span class=k>def</span> <span class=nf>configure</span><span class=p>(</span><span class=bp>self</span><span class=p>,</span> <span class=n>bind</span><span class=p>):</span><span class=w></span><span class=o>...</span>         <span class=n>bind</span><span class=p>(</span><span class=s1>'foo'</span><span class=p>,</span> <span class=n>to_instance</span><span class=o>=</span><span class=s1>'explicit-foo'</span><span class=p>)</span><span class=w></span><span class=o>...</span><span class=w></span><span class=o>&gt;&gt;&gt;</span> <span class=n>obj_graph</span> <span class=o>=</span> <span class=n>pinject</span><span class=o>.</span><span class=n>new_object_graph</span><span class=p>(</span><span class=n>binding_specs</span><span class=o>=</span><span class=p>[</span><span class=n>SomeBindingSpec</span><span class=p>()],</span><span class=w></span><span class=o>...</span>     <span class=n>only_use_explicit_bindings</span><span class=o>=</span><span class=kc>True</span><span class=p>)</span><span class=w></span><span class=o>&gt;&gt;&gt;</span> <span class=c1># obj_graph.provide(ImplicitlyBoundClass)  # would raise a NonExplicitlyBoundClassError</span><span class=w></span><span class=o>&gt;&gt;&gt;</span> <span class=n>some_class</span> <span class=o>=</span> <span class=n>obj_graph</span><span class=o>.</span><span class=n>provide</span><span class=p>(</span><span class=n>ExplicitlyBoundClass</span><span class=p>)</span><span class=w></span><span class=o>&gt;&gt;&gt;</span> <span class=nb>print</span> <span class=n>some_class</span><span class=o>.</span><span class=n>foo</span><span class=w></span><span class=s1>'explicit-foo'</span><span class=w></span><span class=o>&gt;&gt;&gt;</span></code></pre><p>You can also promote an implicit binding to explicit by using<span class=\"docutils literal\">@annotated_arg()</span> (see below), with or without <span class=\"docutils literal\">@inject()</span> as well.</p><p>(Previous versions of Pinject included an <span class=\"docutils literal\">@injectable</span> decorator.  That isdeprecated in favor of <span class=\"docutils literal\">@inject()</span>.  Note that <span class=\"docutils literal\">@inject()</span> needs parens,whereas <span class=\"docutils literal\">@injectable</span> didn\u2019t.)</p><p>On the opposite side of permissiveness, Pinject by default will complain if aprovider method returns <span class=\"docutils literal\">None</span>.  If you really want to turn off this defaultbehavior, you can pass <span class=\"docutils literal\">allow_injecting_none=True</span> to<span class=\"docutils literal\">new_object_graph()</span>.</p></section><section id=annotations><h2>Annotations</h2><p>Pinject <em>annotations</em> let you have different objects injected for the same argname.  For instance, you may have two classes in different parts of yourcodebase named the same thing, and you want to use the same arg name indifferent parts of your codebase.</p><p>On the arg side, an annotation tells Pinject only to inject using a bindingwhose binding key includes the annotation object.  You can use<span class=\"docutils literal\">@annotate_arg()</span> on an initializer, or on a provider method, to specify theannotation object.</p><p>On the binding side, an annotation changes the binding so that the key of thebinding includes the annotation object.  When using <span class=\"docutils literal\">bind()</span> in a bindingspec\u2019s <span class=\"docutils literal\">configure()</span> method, you can pass an <span class=\"docutils literal\">annotated_with</span> arg tospecify the annotation object.</p><pre><code><span class=o>&gt;&gt;&gt;</span> <span class=k>class</span> <span class=nc>SomeClass</span><span class=p>(</span><span class=nb>object</span><span class=p>):</span><span class=w></span><span class=o>...</span>     <span class=nd>@pinject</span><span class=o>.</span><span class=n>annotate_arg</span><span class=p>(</span><span class=s1>'foo'</span><span class=p>,</span> <span class=s1>'annot'</span><span class=p>)</span><span class=w></span><span class=o>...</span>     <span class=k>def</span> <span class=fm>__init__</span><span class=p>(</span><span class=bp>self</span><span class=p>,</span> <span class=n>foo</span><span class=p>):</span><span class=w></span><span class=o>...</span>         <span class=bp>self</span><span class=o>.</span><span class=n>foo</span> <span class=o>=</span> <span class=n>foo</span><span class=w></span><span class=o>...</span><span class=w></span><span class=o>&gt;&gt;&gt;</span> <span class=k>class</span> <span class=nc>SomeBindingSpec</span><span class=p>(</span><span class=n>pinject</span><span class=o>.</span><span class=n>BindingSpec</span><span class=p>):</span><span class=w></span><span class=o>...</span>     <span class=k>def</span> <span class=nf>configure</span><span class=p>(</span><span class=bp>self</span><span class=p>,</span> <span class=n>bind</span><span class=p>):</span><span class=w></span><span class=o>...</span>         <span class=n>bind</span><span class=p>(</span><span class=s1>'foo'</span><span class=p>,</span> <span class=n>annotated_with</span><span class=o>=</span><span class=s1>'annot'</span><span class=p>,</span> <span class=n>to_instance</span><span class=o>=</span><span class=s1>'foo-with-annot'</span><span class=p>)</span><span class=w></span><span class=o>...</span>         <span class=n>bind</span><span class=p>(</span><span class=s1>'foo'</span><span class=p>,</span> <span class=n>annotated_with</span><span class=o>=</span><span class=mi>12345</span><span class=p>,</span> <span class=n>to_instance</span><span class=o>=</span><span class=s1>'12345-foo'</span><span class=p>)</span><span class=w></span><span class=o>...</span><span class=w></span><span class=o>&gt;&gt;&gt;</span> <span class=n>obj_graph</span> <span class=o>=</span> <span class=n>pinject</span><span class=o>.</span><span class=n>new_object_graph</span><span class=p>(</span><span class=n>binding_specs</span><span class=o>=</span><span class=p>[</span><span class=n>SomeBindingSpec</span><span class=p>()])</span><span class=w></span><span class=o>&gt;&gt;&gt;</span> <span class=n>some_class</span> <span class=o>=</span> <span class=n>obj_graph</span><span class=o>.</span><span class=n>provide</span><span class=p>(</span><span class=n>SomeClass</span><span class=p>)</span><span class=w></span><span class=o>&gt;&gt;&gt;</span> <span class=nb>print</span> <span class=n>some_class</span><span class=o>.</span><span class=n>foo</span><span class=w></span><span class=s1>'foo-with-annot'</span><span class=w></span><span class=o>&gt;&gt;&gt;</span></code></pre><p>Also on the binding side, when defining a provider method, you can use the<span class=\"docutils literal\">@provides()</span> decorator.  The decorator lets you pass an <span class=\"docutils literal\">annotated_with</span>arg to specify the annotation object.  The decorator\u2019s first param,<span class=\"docutils literal\">arg_name</span> also lets you override what arg name you want the provider to befor.  This is optional but useful if you want the same binding spec to havetwo provider methods for the same arg name but annotated differently.(Otherwise, the methods would need to be named the same, since they\u2019re for thesame arg name.)</p><pre><code><span class=o>&gt;&gt;&gt;</span> <span class=k>class</span> <span class=nc>SomeClass</span><span class=p>(</span><span class=nb>object</span><span class=p>):</span><span class=w></span><span class=o>...</span>     <span class=nd>@pinject</span><span class=o>.</span><span class=n>annotate_arg</span><span class=p>(</span><span class=s1>'foo'</span><span class=p>,</span> <span class=s1>'annot'</span><span class=p>)</span><span class=w></span><span class=o>...</span>     <span class=k>def</span> <span class=fm>__init__</span><span class=p>(</span><span class=bp>self</span><span class=p>,</span> <span class=n>foo</span><span class=p>):</span><span class=w></span><span class=o>...</span>         <span class=bp>self</span><span class=o>.</span><span class=n>foo</span> <span class=o>=</span> <span class=n>foo</span><span class=w></span><span class=o>...</span><span class=w></span><span class=o>&gt;&gt;&gt;</span> <span class=k>class</span> <span class=nc>SomeBindingSpec</span><span class=p>(</span><span class=n>pinject</span><span class=o>.</span><span class=n>BindingSpec</span><span class=p>):</span><span class=w></span><span class=o>...</span>     <span class=nd>@pinject</span><span class=o>.</span><span class=n>provides</span><span class=p>(</span><span class=s1>'foo'</span><span class=p>,</span> <span class=n>annotated_with</span><span class=o>=</span><span class=s1>'annot'</span><span class=p>)</span><span class=w></span><span class=o>...</span>     <span class=k>def</span> <span class=nf>provide_annot_foo</span><span class=p>(</span><span class=bp>self</span><span class=p>):</span><span class=w></span><span class=o>...</span>         <span class=k>return</span> <span class=s1>'foo-with-annot'</span><span class=w></span><span class=o>...</span>     <span class=nd>@pinject</span><span class=o>.</span><span class=n>provides</span><span class=p>(</span><span class=s1>'foo'</span><span class=p>,</span> <span class=n>annotated_with</span><span class=o>=</span><span class=mi>12345</span><span class=p>)</span><span class=w></span><span class=o>...</span>     <span class=k>def</span> <span class=nf>provide_12345_foo</span><span class=p>(</span><span class=bp>self</span><span class=p>):</span><span class=w></span><span class=o>...</span>         <span class=k>return</span> <span class=s1>'12345-foo'</span><span class=w></span><span class=o>...</span><span class=w></span><span class=o>&gt;&gt;&gt;</span> <span class=n>obj_graph</span> <span class=o>=</span> <span class=n>pinject</span><span class=o>.</span><span class=n>new_object_graph</span><span class=p>(</span><span class=n>binding_specs</span><span class=o>=</span><span class=p>[</span><span class=n>SomeBindingSpec</span><span class=p>()])</span><span class=w></span><span class=o>&gt;&gt;&gt;</span> <span class=n>some_class</span> <span class=o>=</span> <span class=n>obj_graph</span><span class=o>.</span><span class=n>provide</span><span class=p>(</span><span class=n>SomeClass</span><span class=p>)</span><span class=w></span><span class=o>&gt;&gt;&gt;</span> <span class=nb>print</span> <span class=n>some_class</span><span class=o>.</span><span class=n>foo</span><span class=w></span><span class=s1>'foo-with-annot'</span><span class=w></span><span class=o>&gt;&gt;&gt;</span></code></pre><p>When requiring a binding, via the <span class=\"docutils literal\">require</span> arg passed into the<span class=\"docutils literal\">configure()</span> method of a binding spec, you can pass the arg<span class=\"docutils literal\">annotated_with</span> to require an annotated binding.</p><pre><code><span class=o>&gt;&gt;&gt;</span> <span class=k>class</span> <span class=nc>MainBindingSpec</span><span class=p>(</span><span class=n>pinject</span><span class=o>.</span><span class=n>BindingSpec</span><span class=p>):</span><span class=w></span><span class=o>...</span>     <span class=k>def</span> <span class=nf>configure</span><span class=p>(</span><span class=bp>self</span><span class=p>,</span> <span class=n>require</span><span class=p>):</span><span class=w></span><span class=o>...</span>         <span class=n>require</span><span class=p>(</span><span class=s1>'foo'</span><span class=p>,</span> <span class=n>annotated_with</span><span class=o>=</span><span class=s1>'annot'</span><span class=p>)</span><span class=w></span><span class=o>...</span><span class=w></span><span class=o>&gt;&gt;&gt;</span> <span class=k>class</span> <span class=nc>NonSatisfyingBindingSpec</span><span class=p>(</span><span class=n>pinject</span><span class=o>.</span><span class=n>BindingSpec</span><span class=p>):</span><span class=w></span><span class=o>...</span>     <span class=k>def</span> <span class=nf>configure</span><span class=p>(</span><span class=bp>self</span><span class=p>,</span> <span class=n>bind</span><span class=p>):</span><span class=w></span><span class=o>...</span>         <span class=n>bind</span><span class=p>(</span><span class=s1>'foo'</span><span class=p>,</span> <span class=n>to_instance</span><span class=o>=</span><span class=s1>'an-unannotated-foo'</span><span class=p>)</span><span class=w></span><span class=o>...</span><span class=w></span><span class=o>&gt;&gt;&gt;</span> <span class=k>class</span> <span class=nc>SatisfyingBindingSpec</span><span class=p>(</span><span class=n>pinject</span><span class=o>.</span><span class=n>BindingSpec</span><span class=p>):</span><span class=w></span><span class=o>...</span>     <span class=k>def</span> <span class=nf>configure</span><span class=p>(</span><span class=bp>self</span><span class=p>,</span> <span class=n>bind</span><span class=p>):</span><span class=w></span><span class=o>...</span>         <span class=n>bind</span><span class=p>(</span><span class=s1>'foo'</span><span class=p>,</span> <span class=n>annotated_with</span><span class=o>=</span><span class=s1>'annot'</span><span class=p>,</span> <span class=n>to_instance</span><span class=o>=</span><span class=s1>'an-annotated-foo'</span><span class=p>)</span><span class=w></span><span class=o>...</span><span class=w></span><span class=o>&gt;&gt;&gt;</span> <span class=n>obj_graph</span> <span class=o>=</span> <span class=n>pinject</span><span class=o>.</span><span class=n>new_object_graph</span><span class=p>(</span><span class=w></span><span class=o>...</span>     <span class=n>binding_specs</span><span class=o>=</span><span class=p>[</span><span class=n>MainBindingSpec</span><span class=p>(),</span> <span class=n>SatisfyingBindingSpec</span><span class=p>()])</span>  <span class=c1># works</span><span class=w></span><span class=o>&gt;&gt;&gt;</span> <span class=c1># obj_graph = pinject.new_object_graph(</span><span class=w></span><span class=o>...</span> <span class=c1>#     binding_specs=[MainBindingSpec(),</span><span class=w></span><span class=o>...</span> <span class=c1>#                    NonSatisfyingBindingSpec()])  # would raise a MissingRequiredBindingError</span><span class=w></span><span class=o>&gt;&gt;&gt;</span></code></pre><p>You can use any kind of object as an annotation object as long as itimplements <span class=\"docutils literal\">__eq__()</span> and <span class=\"docutils literal\">__hash__()</span>.</p></section><section id=scopes><h2>Scopes</h2><p>By default, Pinject remembers the object it injected into a (possiblyannotated) arg, so that it can inject the same object into other args with thesame name.  This means that, for each arg name, a single instance of thebound-to class, or a single instance returned by a provider method, is createdby default.</p><pre><code><span class=o>&gt;&gt;&gt;</span> <span class=k>class</span> <span class=nc>SomeClass</span><span class=p>(</span><span class=nb>object</span><span class=p>):</span><span class=w></span><span class=o>...</span>     <span class=k>def</span> <span class=fm>__init__</span><span class=p>(</span><span class=bp>self</span><span class=p>,</span> <span class=n>foo</span><span class=p>):</span><span class=w></span><span class=o>...</span>         <span class=bp>self</span><span class=o>.</span><span class=n>foo</span> <span class=o>=</span> <span class=n>foo</span><span class=w></span><span class=o>...</span><span class=w></span><span class=o>&gt;&gt;&gt;</span> <span class=k>class</span> <span class=nc>SomeBindingSpec</span><span class=p>(</span><span class=n>pinject</span><span class=o>.</span><span class=n>BindingSpec</span><span class=p>):</span><span class=w></span><span class=o>...</span>     <span class=k>def</span> <span class=nf>provide_foo</span><span class=p>(</span><span class=bp>self</span><span class=p>):</span><span class=w></span><span class=o>...</span>         <span class=k>return</span> <span class=nb>object</span><span class=p>()</span><span class=w></span><span class=o>...</span><span class=w></span><span class=o>&gt;&gt;&gt;</span> <span class=n>obj_graph</span> <span class=o>=</span> <span class=n>pinject</span><span class=o>.</span><span class=n>new_object_graph</span><span class=p>(</span><span class=n>binding_specs</span><span class=o>=</span><span class=p>[</span><span class=n>SomeBindingSpec</span><span class=p>()])</span><span class=w></span><span class=o>&gt;&gt;&gt;</span> <span class=n>some_class_1</span> <span class=o>=</span> <span class=n>obj_graph</span><span class=o>.</span><span class=n>provide</span><span class=p>(</span><span class=n>SomeClass</span><span class=p>)</span><span class=w></span><span class=o>&gt;&gt;&gt;</span> <span class=n>some_class_2</span> <span class=o>=</span> <span class=n>obj_graph</span><span class=o>.</span><span class=n>provide</span><span class=p>(</span><span class=n>SomeClass</span><span class=p>)</span><span class=w></span><span class=o>&gt;&gt;&gt;</span> <span class=nb>print</span> <span class=n>some_class_1</span><span class=o>.</span><span class=n>foo</span> <span class=ow>is</span> <span class=n>some_class_2</span><span class=o>.</span><span class=n>foo</span><span class=w></span><span class=kc>True</span><span class=w></span><span class=o>&gt;&gt;&gt;</span></code></pre><p>In some cases, you may want to create new instances, always or sometimes,instead of reusing them each time they\u2019re injected.  If so, you want to use<em>scopes</em>.</p><p>A scope controls memoization (i.e., caching).  A scope can choose to cachenever, sometimes, or always.</p><p>Pinject has two built-in scopes.  <em>Singleton scope</em> (<span class=\"docutils literal\">SINGLETON</span>) is thedefault and always caches.  <em>Prototype scope</em> (<span class=\"docutils literal\">PROTOTYPE</span>) is the otherbuilt-in option and does no caching whatsoever.</p><p>Every binding is associated with a scope.  You can specify a scope for abinding by decorating a provider method with <span class=\"docutils literal\">@in_scope()</span>, or by passing an<span class=\"docutils literal\">in_scope</span> arg to <span class=\"docutils literal\">bind()</span> in a binding spec\u2019s <span class=\"docutils literal\">configure()</span> method.</p><pre><code><span class=o>&gt;&gt;&gt;</span> <span class=k>class</span> <span class=nc>SomeClass</span><span class=p>(</span><span class=nb>object</span><span class=p>):</span><span class=w></span><span class=o>...</span>     <span class=k>def</span> <span class=fm>__init__</span><span class=p>(</span><span class=bp>self</span><span class=p>,</span> <span class=n>foo</span><span class=p>):</span><span class=w></span><span class=o>...</span>         <span class=bp>self</span><span class=o>.</span><span class=n>foo</span> <span class=o>=</span> <span class=n>foo</span><span class=w></span><span class=o>...</span><span class=w></span><span class=o>&gt;&gt;&gt;</span> <span class=k>class</span> <span class=nc>SomeBindingSpec</span><span class=p>(</span><span class=n>pinject</span><span class=o>.</span><span class=n>BindingSpec</span><span class=p>):</span><span class=w></span><span class=o>...</span>     <span class=nd>@pinject</span><span class=o>.</span><span class=n>provides</span><span class=p>(</span><span class=n>in_scope</span><span class=o>=</span><span class=n>pinject</span><span class=o>.</span><span class=n>PROTOTYPE</span><span class=p>)</span><span class=w></span><span class=o>...</span>     <span class=k>def</span> <span class=nf>provide_foo</span><span class=p>(</span><span class=bp>self</span><span class=p>):</span><span class=w></span><span class=o>...</span>         <span class=k>return</span> <span class=nb>object</span><span class=p>()</span><span class=w></span><span class=o>...</span><span class=w></span><span class=o>&gt;&gt;&gt;</span> <span class=n>obj_graph</span> <span class=o>=</span> <span class=n>pinject</span><span class=o>.</span><span class=n>new_object_graph</span><span class=p>(</span><span class=n>binding_specs</span><span class=o>=</span><span class=p>[</span><span class=n>SomeBindingSpec</span><span class=p>()])</span><span class=w></span><span class=o>&gt;&gt;&gt;</span> <span class=n>some_class_1</span> <span class=o>=</span> <span class=n>obj_graph</span><span class=o>.</span><span class=n>provide</span><span class=p>(</span><span class=n>SomeClass</span><span class=p>)</span><span class=w></span><span class=o>&gt;&gt;&gt;</span> <span class=n>some_class_2</span> <span class=o>=</span> <span class=n>obj_graph</span><span class=o>.</span><span class=n>provide</span><span class=p>(</span><span class=n>SomeClass</span><span class=p>)</span><span class=w></span><span class=o>&gt;&gt;&gt;</span> <span class=nb>print</span> <span class=n>some_class_1</span><span class=o>.</span><span class=n>foo</span> <span class=ow>is</span> <span class=n>some_class_2</span><span class=o>.</span><span class=n>foo</span><span class=w></span><span class=kc>False</span><span class=w></span><span class=o>&gt;&gt;&gt;</span></code></pre><p>If a binding specifies no scope explicitly, then it is in singleton scope.Implicit class bindings are always in singleton scope.</p><p>Memoization of class bindings works at the class level, not at the binding keylevel.  This means that, if you bind two arg names (or the same arg name withtwo different annotations) to the same class, and the class is in a memoizingscope, then the same class instance will be provided when you inject thedifferent arg names.</p><pre><code><span class=o>&gt;&gt;&gt;</span> <span class=k>class</span> <span class=nc>InjectedClass</span><span class=p>(</span><span class=nb>object</span><span class=p>):</span><span class=w></span><span class=o>...</span>     <span class=k>pass</span><span class=w></span><span class=o>...</span><span class=w></span><span class=o>&gt;&gt;&gt;</span> <span class=k>class</span> <span class=nc>SomeObject</span><span class=p>(</span><span class=nb>object</span><span class=p>):</span><span class=w></span><span class=o>...</span>     <span class=k>def</span> <span class=fm>__init__</span><span class=p>(</span><span class=bp>self</span><span class=p>,</span> <span class=n>foo</span><span class=p>,</span> <span class=n>bar</span><span class=p>):</span><span class=w></span><span class=o>...</span>         <span class=bp>self</span><span class=o>.</span><span class=n>foo</span> <span class=o>=</span> <span class=n>foo</span><span class=w></span><span class=o>...</span>         <span class=bp>self</span><span class=o>.</span><span class=n>bar</span> <span class=o>=</span> <span class=n>bar</span><span class=w></span><span class=o>...</span><span class=w></span><span class=o>&gt;&gt;&gt;</span> <span class=k>class</span> <span class=nc>SomeBindingSpec</span><span class=p>(</span><span class=n>pinject</span><span class=o>.</span><span class=n>BindingSpec</span><span class=p>):</span><span class=w></span><span class=o>...</span>     <span class=k>def</span> <span class=nf>configure</span><span class=p>(</span><span class=bp>self</span><span class=p>,</span> <span class=n>bind</span><span class=p>):</span><span class=w></span><span class=o>...</span>         <span class=n>bind</span><span class=p>(</span><span class=s1>'foo'</span><span class=p>,</span> <span class=n>to_class</span><span class=o>=</span><span class=n>InjectedClass</span><span class=p>)</span><span class=w></span><span class=o>...</span>         <span class=n>bind</span><span class=p>(</span><span class=s1>'bar'</span><span class=p>,</span> <span class=n>to_class</span><span class=o>=</span><span class=n>InjectedClass</span><span class=p>)</span><span class=w></span><span class=o>...</span><span class=w></span><span class=o>&gt;&gt;&gt;</span> <span class=n>obj_graph</span> <span class=o>=</span> <span class=n>pinject</span><span class=o>.</span><span class=n>new_object_graph</span><span class=p>(</span><span class=w></span><span class=o>...</span>     <span class=n>binding_specs</span><span class=o>=</span><span class=p>[</span><span class=n>SomeBindingSpec</span><span class=p>()])</span><span class=w></span><span class=o>&gt;&gt;&gt;</span> <span class=n>some_object</span> <span class=o>=</span> <span class=n>obj_graph</span><span class=o>.</span><span class=n>provide</span><span class=p>(</span><span class=n>SomeObject</span><span class=p>)</span><span class=w></span><span class=o>&gt;&gt;&gt;</span> <span class=nb>print</span> <span class=n>some_object</span><span class=o>.</span><span class=n>foo</span> <span class=ow>is</span> <span class=n>some_object</span><span class=o>.</span><span class=n>bar</span><span class=w></span><span class=kc>True</span><span class=w></span><span class=o>&gt;&gt;&gt;</span></code></pre><p>Pinject memoizes class bindings this way because this is more likely to bewhat you mean if you bind two different arg names to the same class insingleton scope: you want only one instance of the class, even though it maybe injected in multiple places.</p></section><section id=provider-bindings><h2>Provider bindings</h2><p>Sometimes, you need to inject not just a single instance of some class, butrather you need to inject the ability to create instances on demand.(Clearly, this is most useful when the binding you\u2019re using is not in thesingleton scope, otherwise you\u2019ll always get the same instance, and you may aswell just inject that..)</p><p>You could inject the Pinject object graph, but you\u2019d have to do thatdependency injection manually (Pinject doesn\u2019t inject itself!), and you\u2019d beinjecting a huge set of capabilities when your class really only needs toinstantiate objects of one type.</p><p>To solve this, Pinject creates <em>provider bindings</em> for each bound arg name.It will look at the arg name for the prefix <span class=\"docutils literal\">provide_</span>, and if it finds thatprefix, it assumes you want to inject a provider function for whatever therest of the arg name is.  For instance, if you have an arg named<span class=\"docutils literal\">provide_foo_bar</span>, then Pinject will inject a zero-arg function that, whencalled, provides whatever the arg name <span class=\"docutils literal\">foo_bar</span> is bound to.</p><pre><code><span class=o>&gt;&gt;&gt;</span> <span class=k>class</span> <span class=nc>Foo</span><span class=p>(</span><span class=nb>object</span><span class=p>):</span><span class=w></span><span class=o>...</span>   <span class=k>def</span> <span class=fm>__init__</span><span class=p>(</span><span class=bp>self</span><span class=p>):</span><span class=w></span><span class=o>...</span>     <span class=bp>self</span><span class=o>.</span><span class=n>forty_two</span> <span class=o>=</span> <span class=mi>42</span><span class=w></span><span class=o>...</span><span class=w></span><span class=o>&gt;&gt;&gt;</span> <span class=k>class</span> <span class=nc>SomeBindingSpec</span><span class=p>(</span><span class=n>pinject</span><span class=o>.</span><span class=n>BindingSpec</span><span class=p>):</span><span class=w></span><span class=o>...</span>     <span class=k>def</span> <span class=nf>configure</span><span class=p>(</span><span class=bp>self</span><span class=p>,</span> <span class=n>bind</span><span class=p>):</span><span class=w></span><span class=o>...</span>         <span class=n>bind</span><span class=p>(</span><span class=s1>'foo'</span><span class=p>,</span> <span class=n>to_class</span><span class=o>=</span><span class=n>Foo</span><span class=p>,</span> <span class=n>in_scope</span><span class=o>=</span><span class=n>pinject</span><span class=o>.</span><span class=n>PROTOTYPE</span><span class=p>)</span><span class=w></span><span class=o>...</span><span class=w></span><span class=o>&gt;&gt;&gt;</span> <span class=k>class</span> <span class=nc>NeedsProvider</span><span class=p>(</span><span class=nb>object</span><span class=p>):</span><span class=w></span><span class=o>...</span>     <span class=k>def</span> <span class=fm>__init__</span><span class=p>(</span><span class=bp>self</span><span class=p>,</span> <span class=n>provide_foo</span><span class=p>):</span><span class=w></span><span class=o>...</span>         <span class=bp>self</span><span class=o>.</span><span class=n>provide_foo</span> <span class=o>=</span> <span class=n>provide_foo</span><span class=w></span><span class=o>...</span><span class=w></span><span class=o>&gt;&gt;&gt;</span> <span class=n>obj_graph</span> <span class=o>=</span> <span class=n>pinject</span><span class=o>.</span><span class=n>new_object_graph</span><span class=p>(</span><span class=n>binding_specs</span><span class=o>=</span><span class=p>[</span><span class=n>SomeBindingSpec</span><span class=p>()])</span><span class=w></span><span class=o>&gt;&gt;&gt;</span> <span class=n>needs_provider</span> <span class=o>=</span> <span class=n>obj_graph</span><span class=o>.</span><span class=n>provide</span><span class=p>(</span><span class=n>NeedsProvider</span><span class=p>)</span><span class=w></span><span class=o>&gt;&gt;&gt;</span> <span class=nb>print</span> <span class=n>needs_provider</span><span class=o>.</span><span class=n>provide_foo</span><span class=p>()</span> <span class=ow>is</span> <span class=n>needs_provider</span><span class=o>.</span><span class=n>provide_foo</span><span class=p>()</span><span class=w></span><span class=kc>False</span><span class=w></span><span class=o>&gt;&gt;&gt;</span> <span class=nb>print</span> <span class=n>needs_provider</span><span class=o>.</span><span class=n>provide_foo</span><span class=p>()</span><span class=o>.</span><span class=n>forty_two</span><span class=w></span><span class=mi>42</span><span class=w></span><span class=o>&gt;&gt;&gt;</span></code></pre><p>Pinject will always look for the <span class=\"docutils literal\">provide_</span> prefix as a signal to inject aprovider function, anywhere it injects dependencies (initializer args, bindingspec provider methods, etc.).  This does mean that it\u2019s quite difficult, say,to inject an instance of a class named <span class=\"docutils literal\">ProvideFooBar</span> into an arg named<span class=\"docutils literal\">provide_foo_bar</span>, but assuming you\u2019re naming your classes as noun phrasesinstead of verb phrases, this shouldn\u2019t be a problem.</p><p>Watch out: don\u2019t confuse</p><ul class=simple><li><p><em>provider bindings</em>, which let you inject args named <span class=\"docutils literal\">provide_something</span> with provider functions; and</li><li><p><em>provider methods</em>, which are methods of binding specs that provide instances of some arg name.</li></ul></section><section id=partial-injection><h2>Partial injection</h2><p>Provider bindings are useful when you want to create instances of a class ondemand.  But a zero arg provider function will always return an instanceconfigured the same way (within a given scope).  Sometimes, you want theability to parameterize the provided instances, e.g., based on run-time userconfiguration.  You want the ability to create instances where part of theinitialization data is provided per-instance at run-time and part of theinitialization data is injected as dependencies.</p><p>To do this, other dependency injection libraries have you define factoryclasses.  You inject dependencies into the factory class\u2019s initializerfunction, and then you call the factory class\u2019s creation method with theper-instance data.</p><pre><code><span class=o>&gt;&gt;&gt;</span> <span class=k>class</span> <span class=nc>WidgetFactory</span><span class=p>(</span><span class=nb>object</span><span class=p>):</span><span class=w></span><span class=o>...</span>     <span class=k>def</span> <span class=fm>__init__</span><span class=p>(</span><span class=bp>self</span><span class=p>,</span> <span class=n>widget_polisher</span><span class=p>):</span><span class=w></span><span class=o>...</span>         <span class=bp>self</span><span class=o>.</span><span class=n>_widget_polisher</span> <span class=o>=</span> <span class=n>widget_polisher</span><span class=w></span><span class=o>...</span>     <span class=k>def</span> <span class=nf>new</span><span class=p>(</span><span class=bp>self</span><span class=p>,</span> <span class=n>color</span><span class=p>):</span>  <span class=c1># normally would contain some non-trivial code...</span><span class=w></span><span class=o>...</span>         <span class=k>return</span> <span class=n>some_function_of</span><span class=p>(</span><span class=bp>self</span><span class=o>.</span><span class=n>_widget_polisher</span><span class=p>,</span> <span class=n>color</span><span class=p>)</span><span class=w></span><span class=o>...</span><span class=w></span><span class=o>&gt;&gt;&gt;</span> <span class=k>class</span> <span class=nc>SomeBindingSpec</span><span class=p>(</span><span class=n>pinject</span><span class=o>.</span><span class=n>BindingSpec</span><span class=p>):</span><span class=w></span><span class=o>...</span>     <span class=k>def</span> <span class=nf>provide_something_with_colored_widgets</span><span class=p>(</span><span class=bp>self</span><span class=p>,</span> <span class=n>colors</span><span class=p>,</span> <span class=n>widget_factory</span><span class=p>):</span><span class=w></span><span class=o>...</span>         <span class=k>return</span> <span class=n>SomethingWithColoredWidgets</span><span class=p>(</span><span class=w></span><span class=o>...</span>             <span class=p>[</span><span class=n>widget_factory</span><span class=o>.</span><span class=n>new</span><span class=p>(</span><span class=n>color</span><span class=p>)</span> <span class=k>for</span> <span class=n>color</span> <span class=ow>in</span> <span class=n>colors</span><span class=p>])</span><span class=w></span><span class=o>...</span><span class=w></span><span class=o>&gt;&gt;&gt;</span></code></pre><p>You can follow this pattern in Pinject, but it involves boring boilerplate forthe factory class, saving away the initializer-injected dependencies to beused in the creation method.  Plus, you have to create yet another<span class=\"docutils literal\"><span class=pre>...Factory</span></span> class, which makes you feel like you\u2019re programming in java,not python.</p><p>As a less repetitive alternative, Pinject lets you use <em>partial injection</em> onthe provider functions returned by provider bindings.  You use the<span class=\"docutils literal\">@inject()</span> decorator to tell Pinject ahead of time which args you expect topass directly (vs. automatic injection), and then you pass those args directlywhen calling the provider function.</p><pre><code><span class=o>&gt;&gt;&gt;</span> <span class=k>class</span> <span class=nc>SomeBindingSpec</span><span class=p>(</span><span class=n>pinject</span><span class=o>.</span><span class=n>BindingSpec</span><span class=p>):</span><span class=w></span><span class=o>...</span>     <span class=nd>@pinject</span><span class=o>.</span><span class=n>inject</span><span class=p>([</span><span class=s1>'widget_polisher'</span><span class=p>])</span><span class=w></span><span class=o>...</span>     <span class=k>def</span> <span class=nf>provide_widget</span><span class=p>(</span><span class=bp>self</span><span class=p>,</span> <span class=n>color</span><span class=p>,</span> <span class=n>widget_polisher</span><span class=p>):</span><span class=w></span><span class=o>...</span>         <span class=k>return</span> <span class=n>some_function_of</span><span class=p>(</span><span class=n>widget_polisher</span><span class=p>,</span> <span class=n>color</span><span class=p>)</span><span class=w></span><span class=o>...</span>     <span class=k>def</span> <span class=nf>provide_something_needing_widgets</span><span class=p>(</span><span class=bp>self</span><span class=p>,</span> <span class=n>colors</span><span class=p>,</span> <span class=n>provide_widget</span><span class=p>):</span><span class=w></span><span class=o>...</span>         <span class=k>return</span> <span class=n>SomethingNeedingWidgets</span><span class=p>(</span><span class=w></span><span class=o>...</span>             <span class=p>[</span><span class=n>provide_widget</span><span class=p>(</span><span class=n>color</span><span class=p>)</span> <span class=k>for</span> <span class=n>color</span> <span class=ow>in</span> <span class=n>colors</span><span class=p>])</span><span class=w></span><span class=o>...</span><span class=w></span><span class=o>&gt;&gt;&gt;</span></code></pre><p>The first arg to <span class=\"docutils literal\">@inject()</span>, <span class=\"docutils literal\">arg_names</span>, specifies which args of thedecorated method should be injected as dependencies.  If specified, it must bea non-empty sequence of names of the decorated method\u2019s args.  The remainingdecorated method args will be passed directly.</p><p>In the example above, note that, although there is a method called<span class=\"docutils literal\">provide_widget()</span> and an arg of <span class=\"docutils literal\">provide_something_needing_widgets()</span>called <span class=\"docutils literal\">provide_widget</span>, these are not exactly the same!  The latter is adependency-injected wrapper around the former.  The wrapper ensures that the<span class=\"docutils literal\">color</span> arg is passed directly and then injects the <span class=\"docutils literal\">widget_polisher</span>dependency.</p><p>The <span class=\"docutils literal\">@inject()</span> decorator works to specify args passed directly both forprovider bindings to provider methods (as in the example above) and forprovider bindings to classes (where you can pass args directly to theinitializer, as in the example below).</p><pre><code><span class=o>&gt;&gt;&gt;</span> <span class=k>class</span> <span class=nc>Widget</span><span class=p>(</span><span class=nb>object</span><span class=p>):</span><span class=w></span><span class=o>...</span>     <span class=nd>@pinject</span><span class=o>.</span><span class=n>inject</span><span class=p>([</span><span class=s1>'widget_polisher'</span><span class=p>])</span><span class=w></span><span class=o>...</span>     <span class=k>def</span> <span class=fm>__init__</span><span class=p>(</span><span class=bp>self</span><span class=p>,</span> <span class=n>color</span><span class=p>,</span> <span class=n>widget_polisher</span><span class=p>):</span><span class=w></span><span class=o>...</span>         <span class=k>pass</span>  <span class=c1># normally something involving color and widget_polisher</span><span class=w></span><span class=o>...</span><span class=w></span><span class=o>&gt;&gt;&gt;</span> <span class=k>class</span> <span class=nc>SomeBindingSpec</span><span class=p>(</span><span class=n>pinject</span><span class=o>.</span><span class=n>BindingSpec</span><span class=p>):</span><span class=w></span><span class=o>...</span>     <span class=k>def</span> <span class=nf>provide_something_needing_widgets</span><span class=p>(</span><span class=bp>self</span><span class=p>,</span> <span class=n>colors</span><span class=p>,</span> <span class=n>provide_widget</span><span class=p>):</span><span class=w></span><span class=o>...</span>         <span class=k>return</span> <span class=n>SomethingNeedingWidgets</span><span class=p>(</span><span class=w></span><span class=o>...</span>             <span class=p>[</span><span class=n>provide_widget</span><span class=p>(</span><span class=n>color</span><span class=p>)</span> <span class=k>for</span> <span class=n>color</span> <span class=ow>in</span> <span class=n>colors</span><span class=p>])</span><span class=w></span><span class=o>...</span><span class=w></span><span class=o>&gt;&gt;&gt;</span></code></pre><p>The <span class=\"docutils literal\">@inject()</span> decorator also takes an <span class=\"docutils literal\">all_except</span> arg.  You can usethis, instead of the (first positional) <span class=\"docutils literal\">arg_names</span> arg, if it\u2019s clearer andmore concise to say which args are <em>not</em> injected (i.e., which args are passeddirectly).</p><pre><code><span class=o>&gt;&gt;&gt;</span> <span class=k>class</span> <span class=nc>Widget</span><span class=p>(</span><span class=nb>object</span><span class=p>):</span><span class=w></span><span class=o>...</span>     <span class=c1># equivalent to @pinject.inject(['widget_polisher']):</span><span class=w></span><span class=o>...</span>     <span class=nd>@pinject</span><span class=o>.</span><span class=n>inject</span><span class=p>(</span><span class=n>all_except</span><span class=o>=</span><span class=p>[</span><span class=s1>'color'</span><span class=p>])</span><span class=w></span><span class=o>...</span>     <span class=k>def</span> <span class=fm>__init__</span><span class=p>(</span><span class=bp>self</span><span class=p>,</span> <span class=n>color</span><span class=p>,</span> <span class=n>widget_polisher</span><span class=p>):</span><span class=w></span><span class=o>...</span>         <span class=k>pass</span>  <span class=c1># normally something involving color and widget_polisher</span><span class=w></span><span class=o>...</span><span class=w></span><span class=o>&gt;&gt;&gt;</span></code></pre><p>If both <span class=\"docutils literal\">arg_names</span> and <span class=\"docutils literal\">all_except</span> are omitted, then all args areinjected by Pinject, and none are passed directly.  (Both <span class=\"docutils literal\">arg_names</span> and<span class=\"docutils literal\">all_except</span> may not be specified at the same time.)  Wildcard positionaland keyword args (i.e., <span class=\"docutils literal\">*pargs</span> and <span class=\"docutils literal\">**kwargs</span>) are always passeddirectly, not injected.</p><p>If you use <span class=\"docutils literal\">@inject()</span> to mark at least one arg of a provider method (orinitializer) as passed directly, then you may no longer directly inject thatprovider method\u2019s corresponding arg name.  You must instead use a providerbinding to inject a provider function, and then pass the required directarg(s), as in the examples above.</p></section><section id=custom-scopes><h2>Custom scopes</h2><p>If you want to, you can create your own custom scope.  A custom scope isuseful when you have some objects that need to be reused (i.e., cached) butwhose lifetime is shorter than the entire lifetime of your program.</p><p>A custom scope is any class that implements the <span class=\"docutils literal\">Scope</span> interface.</p><pre><code><span class=k>class</span> <span class=nc>Scope</span><span class=p>(</span><span class=nb>object</span><span class=p>):</span><span class=w></span>    <span class=k>def</span> <span class=nf>provide</span><span class=p>(</span><span class=bp>self</span><span class=p>,</span> <span class=n>binding_key</span><span class=p>,</span> <span class=n>default_provider_fn</span><span class=p>):</span><span class=w></span>        <span class=k>raise</span> <span class=ne>NotImplementedError</span><span class=p>()</span></code></pre><p>The <span class=\"docutils literal\">binding_key</span> passed to <span class=\"docutils literal\">provide()</span> will be an object implementing<span class=\"docutils literal\">__eq__()</span> and <span class=\"docutils literal\">__hash__()</span> but otherwise opaque (you shouldn\u2019t need tointrospect it).  You can think of the binding key roughly as encapsulating thearg name and annotation (if any).  The <span class=\"docutils literal\">default_provider_fn</span> passed to<span class=\"docutils literal\">provide()</span> is a zero-arg function that, when called, provides an instanceof whatever should be provided.</p><p>The job of a scope\u2019s <span class=\"docutils literal\">provide()</span> function is to return a cached object ifavailable and appropriate, otherwise to return (and possibly cache) the resultof calling the default provider function.</p><p>Scopes almost always have other methods that control clearing the scope\u2019scache.  For instance, a scope may have \u201center scope\u201d and \u201cexit scope\u201d methods,or a single direct \u201cclear cache\u201d method.  When passing a custom scope toPinject, your code should keep a handle to the custom scope and use thathandle to clear the scope\u2019s cache at the appropriate time.</p><p>You can use one or more custom scopes by passing a map from <em>scope identifier</em>to scope as the <span class=\"docutils literal\">id_to_scope</span> arg of <span class=\"docutils literal\">new_object_graph()</span>.</p><pre><code><span class=o>&gt;&gt;&gt;</span> <span class=k>class</span> <span class=nc>MyScope</span><span class=p>(</span><span class=n>pinject</span><span class=o>.</span><span class=n>Scope</span><span class=p>):</span><span class=w></span><span class=o>...</span>     <span class=k>def</span> <span class=fm>__init__</span><span class=p>(</span><span class=bp>self</span><span class=p>):</span><span class=w></span><span class=o>...</span>         <span class=bp>self</span><span class=o>.</span><span class=n>_cache</span> <span class=o>=</span> <span class=p>{}</span><span class=w></span><span class=o>...</span>     <span class=k>def</span> <span class=nf>provide</span><span class=p>(</span><span class=bp>self</span><span class=p>,</span> <span class=n>binding_key</span><span class=p>,</span> <span class=n>default_provider_fn</span><span class=p>):</span><span class=w></span><span class=o>...</span>         <span class=k>if</span> <span class=n>binding_key</span> <span class=ow>not</span> <span class=ow>in</span> <span class=bp>self</span><span class=o>.</span><span class=n>_cache</span><span class=p>:</span><span class=w></span><span class=o>...</span>             <span class=bp>self</span><span class=o>.</span><span class=n>_cache</span><span class=p>[</span><span class=n>binding_key</span><span class=p>]</span> <span class=o>=</span> <span class=n>default_provider_fn</span><span class=p>()</span><span class=w></span><span class=o>...</span>         <span class=k>return</span> <span class=bp>self</span><span class=o>.</span><span class=n>_cache</span><span class=p>[</span><span class=n>binding_key</span><span class=p>]</span><span class=w></span><span class=o>...</span>     <span class=k>def</span> <span class=nf>clear</span><span class=p>(</span><span class=bp>self</span><span class=p>):</span><span class=w></span><span class=o>...</span>         <span class=bp>self</span><span class=o>.</span><span class=n>_cache</span> <span class=o>=</span> <span class=p>{}</span><span class=w></span><span class=o>...</span><span class=w></span><span class=o>&gt;&gt;&gt;</span> <span class=k>class</span> <span class=nc>SomeClass</span><span class=p>(</span><span class=nb>object</span><span class=p>):</span><span class=w></span><span class=o>...</span>     <span class=k>def</span> <span class=fm>__init__</span><span class=p>(</span><span class=bp>self</span><span class=p>,</span> <span class=n>foo</span><span class=p>):</span><span class=w></span><span class=o>...</span>         <span class=bp>self</span><span class=o>.</span><span class=n>foo</span> <span class=o>=</span> <span class=n>foo</span><span class=w></span><span class=o>...</span><span class=w></span><span class=o>&gt;&gt;&gt;</span> <span class=k>class</span> <span class=nc>SomeBindingSpec</span><span class=p>(</span><span class=n>pinject</span><span class=o>.</span><span class=n>BindingSpec</span><span class=p>):</span><span class=w></span><span class=o>...</span>     <span class=nd>@pinject</span><span class=o>.</span><span class=n>provides</span><span class=p>(</span><span class=n>in_scope</span><span class=o>=</span><span class=s1>'my custom scope'</span><span class=p>)</span><span class=w></span><span class=o>...</span>     <span class=k>def</span> <span class=nf>provide_foo</span><span class=p>(</span><span class=bp>self</span><span class=p>):</span><span class=w></span><span class=o>...</span>         <span class=k>return</span> <span class=nb>object</span><span class=p>()</span><span class=w></span><span class=o>...</span><span class=w></span><span class=o>&gt;&gt;&gt;</span> <span class=n>my_scope</span> <span class=o>=</span> <span class=n>MyScope</span><span class=p>()</span><span class=w></span><span class=o>&gt;&gt;&gt;</span> <span class=n>obj_graph</span> <span class=o>=</span> <span class=n>pinject</span><span class=o>.</span><span class=n>new_object_graph</span><span class=p>(</span><span class=w></span><span class=o>...</span>     <span class=n>binding_specs</span><span class=o>=</span><span class=p>[</span><span class=n>SomeBindingSpec</span><span class=p>()],</span><span class=w></span><span class=o>...</span>     <span class=n>id_to_scope</span><span class=o>=</span><span class=p>{</span><span class=s1>'my custom scope'</span><span class=p>:</span> <span class=n>my_scope</span><span class=p>})</span><span class=w></span><span class=o>&gt;&gt;&gt;</span> <span class=n>some_class_1</span> <span class=o>=</span> <span class=n>obj_graph</span><span class=o>.</span><span class=n>provide</span><span class=p>(</span><span class=n>SomeClass</span><span class=p>)</span><span class=w></span><span class=o>&gt;&gt;&gt;</span> <span class=n>some_class_2</span> <span class=o>=</span> <span class=n>obj_graph</span><span class=o>.</span><span class=n>provide</span><span class=p>(</span><span class=n>SomeClass</span><span class=p>)</span><span class=w></span><span class=o>&gt;&gt;&gt;</span> <span class=n>my_scope</span><span class=o>.</span><span class=n>clear</span><span class=p>()</span><span class=w></span><span class=o>&gt;&gt;&gt;</span> <span class=n>some_class_3</span> <span class=o>=</span> <span class=n>obj_graph</span><span class=o>.</span><span class=n>provide</span><span class=p>(</span><span class=n>SomeClass</span><span class=p>)</span><span class=w></span><span class=o>&gt;&gt;&gt;</span> <span class=nb>print</span> <span class=n>some_class_1</span><span class=o>.</span><span class=n>foo</span> <span class=ow>is</span> <span class=n>some_class_2</span><span class=o>.</span><span class=n>foo</span><span class=w></span><span class=kc>True</span><span class=w></span><span class=o>&gt;&gt;&gt;</span> <span class=nb>print</span> <span class=n>some_class_2</span><span class=o>.</span><span class=n>foo</span> <span class=ow>is</span> <span class=n>some_class_3</span><span class=o>.</span><span class=n>foo</span><span class=w></span><span class=kc>False</span><span class=w></span><span class=o>&gt;&gt;&gt;</span></code></pre><p>A scope identifier can be any object implementing <span class=\"docutils literal\">__eq__()</span> and<span class=\"docutils literal\">__hash__()</span>.</p><p>If you plan to use Pinject in a multi-threaded environment (and even if youdon\u2019t plan to now but may some day), you should make your custom scopethread-safe.  The example custom scope above could be trivially (but moreverbosely) rewritten to be thread-safe, as in the example below.  The lock isreentrant so that something in <span class=\"docutils literal\">MyScope</span> can be injected into something elsein <span class=\"docutils literal\">MyScope</span>.</p><pre><code><span class=o>&gt;&gt;&gt;</span> <span class=k>class</span> <span class=nc>MyScope</span><span class=p>(</span><span class=n>pinject</span><span class=o>.</span><span class=n>Scope</span><span class=p>):</span><span class=w></span><span class=o>...</span>     <span class=k>def</span> <span class=fm>__init__</span><span class=p>(</span><span class=bp>self</span><span class=p>):</span><span class=w></span><span class=o>...</span>         <span class=bp>self</span><span class=o>.</span><span class=n>_cache</span> <span class=o>=</span> <span class=p>{}</span><span class=w></span><span class=o>...</span>         <span class=bp>self</span><span class=o>.</span><span class=n>_rlock</span> <span class=o>=</span> <span class=n>threading</span><span class=o>.</span><span class=n>RLock</span><span class=p>()</span><span class=w></span><span class=o>...</span>     <span class=k>def</span> <span class=nf>provide</span><span class=p>(</span><span class=bp>self</span><span class=p>,</span> <span class=n>binding_key</span><span class=p>,</span> <span class=n>default_provider_fn</span><span class=p>):</span><span class=w></span><span class=o>...</span>         <span class=k>with</span> <span class=bp>self</span><span class=o>.</span><span class=n>_rlock</span><span class=p>:</span><span class=w></span><span class=o>...</span>             <span class=k>if</span> <span class=n>binding_key</span> <span class=ow>not</span> <span class=ow>in</span> <span class=bp>self</span><span class=o>.</span><span class=n>_cache</span><span class=p>:</span><span class=w></span><span class=o>...</span>                 <span class=bp>self</span><span class=o>.</span><span class=n>_cache</span><span class=p>[</span><span class=n>binding_key</span><span class=p>]</span> <span class=o>=</span> <span class=n>default_provider_fn</span><span class=p>()</span><span class=w></span><span class=o>...</span>             <span class=k>return</span> <span class=bp>self</span><span class=o>.</span><span class=n>_cache</span><span class=p>[</span><span class=n>binding_key</span><span class=p>]</span><span class=w></span><span class=o>...</span>     <span class=k>def</span> <span class=nf>clear</span><span class=p>(</span><span class=bp>self</span><span class=p>):</span><span class=w></span><span class=o>...</span>         <span class=k>with</span> <span class=bp>self</span><span class=o>.</span><span class=n>_rlock</span><span class=p>:</span><span class=w></span><span class=o>...</span>             <span class=bp>self</span><span class=o>.</span><span class=n>_cache</span> <span class=o>=</span> <span class=p>{}</span><span class=w></span><span class=o>&gt;&gt;&gt;</span></code></pre></section><section id=scope-accessibility><h2>Scope accessibility</h2><p>To prevent yourself from injecting objects where they don\u2019t belong, you maywant to validate one object being injected into another w.r.t. scope.</p><p>For instance, you may have created a custom scope for HTTP requests handled byyour program.  Objects in request scope would be cached for the duration of asingle HTTP request.  You may want to verify that objects in request scopenever get injected into objects in singleton scope.  Such an injection islikely not to make semantic sense, since it would make something tied to oneHTTP request be used for the duration of your program.</p><p>Pinject lets you pass a validation function as the<span class=\"docutils literal\">is_scope_usable_from_scope</span> arg to <span class=\"docutils literal\">new_object_graph()</span>.  This functiontakes two scope identifiers and returns <span class=\"docutils literal\">True</span> iff an object in the firstscope can be injected into an object of the second scope.</p><pre><code><span class=o>&gt;&gt;&gt;</span> <span class=k>class</span> <span class=nc>RequestScope</span><span class=p>(</span><span class=n>pinject</span><span class=o>.</span><span class=n>Scope</span><span class=p>):</span><span class=w></span><span class=o>...</span>     <span class=k>def</span> <span class=nf>start_request</span><span class=p>(</span><span class=bp>self</span><span class=p>):</span><span class=w></span><span class=o>...</span>         <span class=bp>self</span><span class=o>.</span><span class=n>_cache</span> <span class=o>=</span> <span class=p>{}</span><span class=w></span><span class=o>...</span>     <span class=k>def</span> <span class=nf>provide</span><span class=p>(</span><span class=bp>self</span><span class=p>,</span> <span class=n>binding_key</span><span class=p>,</span> <span class=n>default_provider_fn</span><span class=p>):</span><span class=w></span><span class=o>...</span>         <span class=k>if</span> <span class=n>binding_key</span> <span class=ow>not</span> <span class=ow>in</span> <span class=bp>self</span><span class=o>.</span><span class=n>_cache</span><span class=p>:</span><span class=w></span><span class=o>...</span>             <span class=bp>self</span><span class=o>.</span><span class=n>_cache</span><span class=p>[</span><span class=n>binding_key</span><span class=p>]</span> <span class=o>=</span> <span class=n>default_provider_fn</span><span class=p>()</span><span class=w></span><span class=o>...</span>         <span class=k>return</span> <span class=bp>self</span><span class=o>.</span><span class=n>_cache</span><span class=p>[</span><span class=n>binding_key</span><span class=p>]</span><span class=w></span><span class=o>...</span><span class=w></span><span class=o>&gt;&gt;&gt;</span> <span class=k>class</span> <span class=nc>SomeClass</span><span class=p>(</span><span class=nb>object</span><span class=p>):</span><span class=w></span><span class=o>...</span>     <span class=k>def</span> <span class=fm>__init__</span><span class=p>(</span><span class=bp>self</span><span class=p>,</span> <span class=n>foo</span><span class=p>):</span><span class=w></span><span class=o>...</span>         <span class=bp>self</span><span class=o>.</span><span class=n>foo</span> <span class=o>=</span> <span class=n>foo</span><span class=w></span><span class=o>...</span><span class=w></span><span class=o>&gt;&gt;&gt;</span> <span class=k>class</span> <span class=nc>SomeBindingSpec</span><span class=p>(</span><span class=n>pinject</span><span class=o>.</span><span class=n>BindingSpec</span><span class=p>):</span><span class=w></span><span class=o>...</span>     <span class=nd>@pinject</span><span class=o>.</span><span class=n>provides</span><span class=p>(</span><span class=n>in_scope</span><span class=o>=</span><span class=n>pinject</span><span class=o>.</span><span class=n>SINGLETON</span><span class=p>)</span><span class=w></span><span class=o>...</span>     <span class=k>def</span> <span class=nf>provide_foo</span><span class=p>(</span><span class=n>bar</span><span class=p>):</span><span class=w></span><span class=o>...</span>         <span class=k>return</span> <span class=s1>'foo-'</span> <span class=o>+</span> <span class=n>bar</span><span class=w></span><span class=o>...</span>     <span class=nd>@pinject</span><span class=o>.</span><span class=n>provides</span><span class=p>(</span><span class=n>in_scope</span><span class=o>=</span><span class=s1>'request scope'</span><span class=p>)</span><span class=w></span><span class=o>...</span>     <span class=k>def</span> <span class=nf>provide_bar</span><span class=p>():</span><span class=w></span><span class=o>...</span>         <span class=k>return</span> <span class=s1>'-bar'</span><span class=w></span><span class=o>...</span><span class=w></span><span class=o>&gt;&gt;&gt;</span> <span class=k>def</span> <span class=nf>is_usable</span><span class=p>(</span><span class=n>scope_id_inner</span><span class=p>,</span> <span class=n>scope_id_outer</span><span class=p>):</span><span class=w></span><span class=o>...</span>     <span class=k>return</span> <span class=ow>not</span> <span class=p>(</span><span class=n>scope_id_inner</span> <span class=o>==</span> <span class=s1>'request scope'</span> <span class=ow>and</span><span class=w></span><span class=o>...</span>                 <span class=n>scope_id_outer</span> <span class=o>==</span> <span class=n>scoping</span><span class=o>.</span><span class=n>SINGLETON</span><span class=p>)</span><span class=w></span><span class=o>...</span><span class=w></span><span class=o>&gt;&gt;&gt;</span> <span class=n>my_request_scope</span> <span class=o>=</span> <span class=n>RequestScope</span><span class=p>()</span><span class=w></span><span class=o>&gt;&gt;&gt;</span> <span class=n>obj_graph</span> <span class=o>=</span> <span class=n>pinject</span><span class=o>.</span><span class=n>new_object_graph</span><span class=p>(</span><span class=w></span><span class=o>...</span>     <span class=n>binding_specs</span><span class=o>=</span><span class=p>[</span><span class=n>SomeBindingSpec</span><span class=p>()],</span><span class=w></span><span class=o>...</span>     <span class=n>id_to_scope</span><span class=o>=</span><span class=p>{</span><span class=s1>'request scope'</span><span class=p>:</span> <span class=n>my_request_scope</span><span class=p>},</span><span class=w></span><span class=o>...</span>     <span class=n>is_scope_usable_from_scope</span><span class=o>=</span><span class=n>is_usable</span><span class=p>)</span><span class=w></span><span class=o>&gt;&gt;&gt;</span> <span class=n>my_request_scope</span><span class=o>.</span><span class=n>start_request</span><span class=p>()</span><span class=w></span><span class=o>&gt;&gt;&gt;</span> <span class=c1># obj_graph.provide(SomeClass)  # would raise a BadDependencyScopeError</span><span class=w></span><span class=o>&gt;&gt;&gt;</span></code></pre><p>The default scope accessibility validator allows objects from any scope to beinjected into objects from any other scope.</p></section><section id=changing-naming-conventions><h2>Changing naming conventions</h2><p>If your code follows PEP8 naming coventions, then you\u2019re likely happy with thedefault implicit bindings (where the class <span class=\"docutils literal\">FooBar</span> gets bound to the argname <span class=\"docutils literal\">foo_bar</span>) and where <span class=\"docutils literal\">provide_foo_bar()</span> is a binding spec\u2019s providermethod for the arg name <span class=\"docutils literal\">foo_bar</span>.</p><p>But if not, read on!</p><section id=customizing-implicit-bindings><h3>Customizing implicit bindings</h3><p><span class=\"docutils literal\">new_object_graph()</span> takes a <span class=\"docutils literal\">get_arg_names_from_class_name</span> arg.  This isthe function that is used to determine implicit class bindings.  This functiontakes in a class name (e.g., <span class=\"docutils literal\">FooBar</span>) and returns the arg names to whichthat class should be implicitly bound (e.g., <span class=\"docutils literal\">['foo_bar']</span>).  Its defaultbehavior is described in the \u201cimplicit class bindings\u201d section above, but thatdefault behavior can be overridden.</p><p>For instance, suppose that your code uses a library that names many classeswith the leading letter X (e.g., <span class=\"docutils literal\">XFooBar</span>), and you\u2019d like to be able tobind that to a corresponding arg name without the leading X (e.g.,<span class=\"docutils literal\">foo_bar</span>).</p><pre><code><span class=o>&gt;&gt;&gt;</span> <span class=kn>import</span> <span class=nn>re</span><span class=w></span><span class=o>&gt;&gt;&gt;</span> <span class=k>def</span> <span class=nf>custom_get_arg_names</span><span class=p>(</span><span class=n>class_name</span><span class=p>):</span><span class=w></span><span class=o>...</span>     <span class=n>stripped_class_name</span> <span class=o>=</span> <span class=n>re</span><span class=o>.</span><span class=n>sub</span><span class=p>(</span><span class=s1>'^_?X?'</span><span class=p>,</span> <span class=s1>''</span><span class=p>,</span> <span class=n>class_name</span><span class=p>)</span><span class=w></span><span class=o>...</span>     <span class=k>return</span> <span class=p>[</span><span class=n>re</span><span class=o>.</span><span class=n>sub</span><span class=p>(</span><span class=s1>'(?!^)([A-Z]+)'</span><span class=p>,</span> <span class=sa>r</span><span class=s1>'_\\1'</span><span class=p>,</span> <span class=n>stripped_class_name</span><span class=p>)</span><span class=o>.</span><span class=n>lower</span><span class=p>()]</span><span class=w></span><span class=o>...</span><span class=w></span><span class=o>&gt;&gt;&gt;</span> <span class=nb>print</span> <span class=n>custom_get_arg_names</span><span class=p>(</span><span class=s1>'XFooBar'</span><span class=p>)</span><span class=w></span><span class=p>[</span><span class=s1>'foo_bar'</span><span class=p>]</span><span class=w></span><span class=o>&gt;&gt;&gt;</span> <span class=nb>print</span> <span class=n>custom_get_arg_names</span><span class=p>(</span><span class=s1>'XLibraryClass'</span><span class=p>)</span><span class=w></span><span class=p>[</span><span class=s1>'library_class'</span><span class=p>]</span><span class=w></span><span class=o>&gt;&gt;&gt;</span> <span class=k>class</span> <span class=nc>OuterClass</span><span class=p>(</span><span class=nb>object</span><span class=p>):</span><span class=w></span><span class=o>...</span>     <span class=k>def</span> <span class=fm>__init__</span><span class=p>(</span><span class=bp>self</span><span class=p>,</span> <span class=n>library_class</span><span class=p>):</span><span class=w></span><span class=o>...</span>         <span class=bp>self</span><span class=o>.</span><span class=n>library_class</span> <span class=o>=</span> <span class=n>library_class</span><span class=w></span><span class=o>...</span><span class=w></span><span class=o>&gt;&gt;&gt;</span> <span class=k>class</span> <span class=nc>XLibraryClass</span><span class=p>(</span><span class=nb>object</span><span class=p>):</span><span class=w></span><span class=o>...</span>     <span class=k>def</span> <span class=fm>__init__</span><span class=p>(</span><span class=bp>self</span><span class=p>):</span><span class=w></span><span class=o>...</span>         <span class=bp>self</span><span class=o>.</span><span class=n>forty_two</span> <span class=o>=</span> <span class=mi>42</span><span class=w></span><span class=o>...</span><span class=w></span><span class=o>&gt;&gt;&gt;</span> <span class=n>obj_graph</span> <span class=o>=</span> <span class=n>pinject</span><span class=o>.</span><span class=n>new_object_graph</span><span class=p>(</span><span class=w></span><span class=o>...</span>     <span class=n>get_arg_names_from_class_name</span><span class=o>=</span><span class=n>custom_get_arg_names</span><span class=p>)</span><span class=w></span><span class=o>&gt;&gt;&gt;</span> <span class=n>outer_class</span> <span class=o>=</span> <span class=n>obj_graph</span><span class=o>.</span><span class=n>provide</span><span class=p>(</span><span class=n>OuterClass</span><span class=p>)</span><span class=w></span><span class=o>&gt;&gt;&gt;</span> <span class=nb>print</span> <span class=n>outer_class</span><span class=o>.</span><span class=n>library_class</span><span class=o>.</span><span class=n>forty_two</span><span class=w></span><span class=mi>42</span><span class=w></span><span class=o>&gt;&gt;&gt;</span></code></pre><p>The function passed as the <span class=\"docutils literal\">get_arg_names_from_class_name</span> arg to<span class=\"docutils literal\">new_object_graph()</span> can return as many or as few arg names as it wants.  Ifit always returns the empty list (i.e., if it is <span class=\"docutils literal\">lambda _: []</span>), then thatdisables implicit class bindings.</p></section><section id=customizing-binding-spec-method-names><h3>Customizing binding spec method names</h3><p>The standard binding spec methods to configure bindings and declaredependencies are named <span class=\"docutils literal\">configure</span> and <span class=\"docutils literal\">dependencies</span>, by default.  If youneed to, you can change their names by passing <span class=\"docutils literal\">configure_method_name</span>and/or <span class=\"docutils literal\">dependencies_method_name</span> as args to <span class=\"docutils literal\">new_object_graph()</span>.</p><pre><code><span class=o>&gt;&gt;&gt;</span> <span class=k>class</span> <span class=nc>NonStandardBindingSpec</span><span class=p>(</span><span class=n>pinject</span><span class=o>.</span><span class=n>BindingSpec</span><span class=p>):</span><span class=w></span><span class=o>...</span>     <span class=k>def</span> <span class=nf>Configure</span><span class=p>(</span><span class=bp>self</span><span class=p>,</span> <span class=n>bind</span><span class=p>):</span><span class=w></span><span class=o>...</span>         <span class=n>bind</span><span class=p>(</span><span class=s1>'forty_two'</span><span class=p>,</span> <span class=n>to_instance</span><span class=o>=</span><span class=mi>42</span><span class=p>)</span><span class=w></span><span class=o>...</span><span class=w></span><span class=o>&gt;&gt;&gt;</span> <span class=k>class</span> <span class=nc>SomeClass</span><span class=p>(</span><span class=nb>object</span><span class=p>):</span><span class=w></span><span class=o>...</span>     <span class=k>def</span> <span class=fm>__init__</span><span class=p>(</span><span class=bp>self</span><span class=p>,</span> <span class=n>forty_two</span><span class=p>):</span><span class=w></span><span class=o>...</span>         <span class=bp>self</span><span class=o>.</span><span class=n>forty_two</span> <span class=o>=</span> <span class=n>forty_two</span><span class=w></span><span class=o>...</span><span class=w></span><span class=o>&gt;&gt;&gt;</span> <span class=n>obj_graph</span> <span class=o>=</span> <span class=n>pinject</span><span class=o>.</span><span class=n>new_object_graph</span><span class=p>(</span><span class=w></span><span class=o>...</span>     <span class=n>binding_specs</span><span class=o>=</span><span class=p>[</span><span class=n>NonStandardBindingSpec</span><span class=p>()],</span><span class=w></span><span class=o>...</span>     <span class=n>configure_method_name</span><span class=o>=</span><span class=s1>'Configure'</span><span class=p>)</span><span class=w></span><span class=o>&gt;&gt;&gt;</span> <span class=n>some_class</span> <span class=o>=</span> <span class=n>obj_graph</span><span class=o>.</span><span class=n>provide</span><span class=p>(</span><span class=n>SomeClass</span><span class=p>)</span><span class=w></span><span class=o>&gt;&gt;&gt;</span> <span class=nb>print</span> <span class=n>some_class</span><span class=o>.</span><span class=n>forty_two</span><span class=w></span><span class=mi>42</span><span class=w></span><span class=o>&gt;&gt;&gt;</span></code></pre></section><section id=customizing-provider-method-names><h3>Customizing provider method names</h3><p><span class=\"docutils literal\">new_object_graph()</span> takes a <span class=\"docutils literal\">get_arg_names_from_provider_fn_name</span> arg.This is the function that is used to identify provider methods on bindingspecs.  This function takes in the name of a potential provider method (e.g.,<span class=\"docutils literal\">provide_foo_bar</span>) and returns the arg names for which the provider methodis a provider, if any (e.g., <span class=\"docutils literal\">['foo_bar']</span>).  Its default behavior isdescribed in the \u201cprovider methods\u201d section above, but that default behaviorcan be overridden.</p><p>For instance, suppose that you work for a certain large corporation whosepython style guide makes you name functions in <span class=\"docutils literal\">CamelCase</span>, and so you needto name the provider method for the arg name <span class=\"docutils literal\">foo_bar</span> more like<span class=\"docutils literal\">ProvideFooBar</span> than <span class=\"docutils literal\">provide_foo_bar</span>.</p><pre><code><span class=o>&gt;&gt;&gt;</span> <span class=kn>import</span> <span class=nn>re</span><span class=w></span><span class=o>&gt;&gt;&gt;</span> <span class=k>def</span> <span class=nf>CustomGetArgNames</span><span class=p>(</span><span class=n>provider_fn_name</span><span class=p>):</span><span class=w></span><span class=o>...</span>     <span class=k>if</span> <span class=n>provider_fn_name</span><span class=o>.</span><span class=n>startswith</span><span class=p>(</span><span class=s1>'Provide'</span><span class=p>):</span><span class=w></span><span class=o>...</span>         <span class=n>provided_camelcase</span> <span class=o>=</span> <span class=n>provider_fn_name</span><span class=p>[</span><span class=nb>len</span><span class=p>(</span><span class=s1>'Provide'</span><span class=p>):]</span><span class=w></span><span class=o>...</span>         <span class=k>return</span> <span class=p>[</span><span class=n>re</span><span class=o>.</span><span class=n>sub</span><span class=p>(</span><span class=s1>'(?!^)([A-Z]+)'</span><span class=p>,</span> <span class=sa>r</span><span class=s1>'_\\1'</span><span class=p>,</span> <span class=n>provided_camelcase</span><span class=p>)</span><span class=o>.</span><span class=n>lower</span><span class=p>()]</span><span class=w></span><span class=o>...</span>     <span class=k>else</span><span class=p>:</span><span class=w></span><span class=o>...</span>         <span class=k>return</span> <span class=p>[]</span><span class=w></span><span class=o>...</span><span class=w></span><span class=o>&gt;&gt;&gt;</span> <span class=nb>print</span> <span class=n>CustomGetArgNames</span><span class=p>(</span><span class=s1>'ProvideFooBar'</span><span class=p>)</span><span class=w></span><span class=p>[</span><span class=s1>'foo_bar'</span><span class=p>]</span><span class=w></span><span class=o>&gt;&gt;&gt;</span> <span class=nb>print</span> <span class=n>CustomGetArgNames</span><span class=p>(</span><span class=s1>'ProvideFoo'</span><span class=p>)</span><span class=w></span><span class=p>[</span><span class=s1>'foo'</span><span class=p>]</span><span class=w></span><span class=o>&gt;&gt;&gt;</span> <span class=k>class</span> <span class=nc>SomeClass</span><span class=p>(</span><span class=nb>object</span><span class=p>):</span><span class=w></span><span class=o>...</span>     <span class=k>def</span> <span class=fm>__init__</span><span class=p>(</span><span class=bp>self</span><span class=p>,</span> <span class=n>foo</span><span class=p>):</span><span class=w></span><span class=o>...</span>         <span class=bp>self</span><span class=o>.</span><span class=n>foo</span> <span class=o>=</span> <span class=n>foo</span><span class=w></span><span class=o>...</span><span class=w></span><span class=o>&gt;&gt;&gt;</span> <span class=k>class</span> <span class=nc>SomeBindingSpec</span><span class=p>(</span><span class=n>pinject</span><span class=o>.</span><span class=n>BindingSpec</span><span class=p>):</span><span class=w></span><span class=o>...</span>     <span class=k>def</span> <span class=nf>ProvideFoo</span><span class=p>(</span><span class=bp>self</span><span class=p>):</span><span class=w></span><span class=o>...</span>         <span class=k>return</span> <span class=s1>'some-foo'</span><span class=w></span><span class=o>...</span><span class=w></span><span class=o>&gt;&gt;&gt;</span> <span class=n>obj_graph</span> <span class=o>=</span> <span class=n>pinject</span><span class=o>.</span><span class=n>new_object_graph</span><span class=p>(</span><span class=w></span><span class=o>...</span>     <span class=n>binding_specs</span><span class=o>=</span><span class=p>[</span><span class=n>SomeBindingSpec</span><span class=p>()],</span><span class=w></span><span class=o>...</span>     <span class=n>get_arg_names_from_provider_fn_name</span><span class=o>=</span><span class=n>CustomGetArgNames</span><span class=p>)</span><span class=w></span><span class=o>&gt;&gt;&gt;</span> <span class=n>some_class</span> <span class=o>=</span> <span class=n>obj_graph</span><span class=o>.</span><span class=n>provide</span><span class=p>(</span><span class=n>SomeClass</span><span class=p>)</span><span class=w></span><span class=o>&gt;&gt;&gt;</span> <span class=nb>print</span> <span class=n>some_class</span><span class=o>.</span><span class=n>foo</span><span class=w></span><span class=s1>'some-foo'</span><span class=w></span><span class=o>&gt;&gt;&gt;</span></code></pre><p>The function passed as the <span class=\"docutils literal\">get_arg_names_from_provider_fn_name</span> arg to<span class=\"docutils literal\">new_object_graph()</span> can return as many or as few arg names as it wants.  Ifit returns an empty list, then that potential provider method is assumed notactually to be a provider method.</p></section></section><section id=miscellaneous><h2>Miscellaneous</h2><p>Pinject raises helpful exceptions whose messages include the file and linenumber of errors.  So, Pinject by default will shorten the stack trace ofexceptions that it raises, so that you don\u2019t see the many levels of functioncalls within the Pinject library.</p><p>In some situations, though, the complete stack trace is helpful, e.g., whendebugging Pinject, or when your code calls Pinject, which calls back into yourcode, which calls back into Pinject.  In such cases, to disable exceptionstack shortening, you can pass <span class=\"docutils literal\">use_short_stack_traces=False</span> to<span class=\"docutils literal\">new_object_graph()</span>.</p></section><section id=gotchas><h2>Gotchas</h2><p>Pinject has a few things to watch out for.</p><section id=thread-safety><h3>Thread safety</h3><p>Pinject\u2019s default scope is <span class=\"docutils literal\">SINGLETON</span>.  If you have a multi-threadedprogram, it\u2019s likely that some or all of the things that Pinject provides fromsingleton scope will be used in multiple threads.  So, it\u2019s important that youensure that such classes are thread-safe.</p><p>Similarly, it\u2019s important that your custom scope classes are thread-safe.Even if the objects they provide are only used in a single thread, it may bethat the object graph (and therefore the scope itself) will be usedsimultaneously in multiple threads.</p><p>Remember to make locks re-entrant on your custom scope classes, or otherwisedeal with one object in your custom scope trying to inject another object inyour custom scope.</p><p>That\u2019s it for gotchas, for now.</p></section></section><section id=condensed-summary><h2>Condensed summary</h2><p>If you are already familiar with dependency injection libraries such as Guice,this section gives you a condensed high level summary of Pinject and how itmight be similar to or different than other dependency injection libraries.(If you don\u2019t understand it, no problem.  The rest of the documentation coverseverything listed here.)</p><ul class=simple><li><p>Pinject uses code and decorators to configure injection, not a separate config file.</li><li><p>Bindings are keyed by arg name, (not class type, since Python is dynamically typed).</li><li><p>Pinject automatically creates bindings to <span class=\"docutils literal\">some_class</span> arg names for <span class=\"docutils literal\">SomeClass</span> classes.</li><li><p>You can ask Pinject only to create bindings from binding specs and classes whose <span class=\"docutils literal\">__init__()</span> is marked with <span class=\"docutils literal\">@inject()</span>.</li><li><p>A binding spec is a class that creates explicit bindings.</li><li><p>A binding spec can bind arg names to classes or to instances.</li><li><p>A binding spec can bind arg names <span class=\"docutils literal\">foo</span> to provider methods <span class=\"docutils literal\">provide_foo()</span>.</li><li><p>Binding specs can depend on (i.e., include) other binding specs.</li><li><p>You can annotate args and bindings to distinguish among args/bindings for the same arg name.</li><li><p>Pinject has two built-in scopes: \u201csingleton\u201d (always memoized; the default) and \u201cprototype\u201d (never memoized).</li><li><p>You can define custom scopes, and you can configure which scopes are accessible from which other scopes.</li><li><p>Pinject doesn\u2019t allow injecting <span class=\"docutils literal\">None</span> by default, but you can turn off that check.</li></ul></section><section id=changelog><h2>Changelog</h2><p>v0.13: master</p><p>v0.12: 28 Nov, 2018</p><ul class=simple><li><p>Support Python 3</li><li><p>Add two maintainers: @trein and @huan</li></ul><p>v0.10.2:</p><ul class=simple><li><p>Fixed bug: allows binding specs containing only provider methods.</li></ul><p>v0.10.1:</p><ul class=simple><li><p>Fixed bug: allows omitting custom named <span class=\"docutils literal\">configure()</span> binding spec method.</li></ul><p>v0.10:</p><ul class=simple><li><p>Added default <span class=\"docutils literal\">__eq__()</span> to <span class=\"docutils literal\">BindingSpec</span>, so that DAG binding spec dependencies can have equal but not identical dependencies.</li><li><p>Allowed customizing <span class=\"docutils literal\">configure()</span> and <span class=\"docutils literal\">dependencies()</span> binding spec method names.</li><li><p>Deprecated <span class=\"docutils literal\">@injectable</span> in favor of <span class=\"docutils literal\">@inject</span>.</li><li><p>Added partial injection.</li><li><p>Added <span class=\"docutils literal\">require</span> arg to allow binding spec <span class=\"docutils literal\">configure</span> methods to declare but not define bindings.</li><li><p>Sped up tests (and probably general functionality) by 10x.</li><li><p>Documented more design decisions.</li><li><p>Added <span class=\"docutils literal\">@copy_args_to_internal_fields</span> and <span class=\"docutils literal\">@copy_args_to_public_fields</span>.</li><li><p>Renamed <span class=\"docutils literal\">InjectableDecoratorAppliedToNonInitError</span> to <span class=\"docutils literal\">DecoratorAppliedToNonInitError</span>.</li></ul><p>v0.9:</p><ul class=simple><li><p>Added validation of python types of public args.</li><li><p>Improved error messages for all Pinject-raised exceptions.</li><li><p>Added <span class=\"docutils literal\">use_short_stack_traces</span> arg to <span class=\"docutils literal\">new_object_graph()</span>.</li><li><p>Allowed multiple <span class=\"docutils literal\">@provides</span> on single provider method.</li></ul><p>v0.8:</p><ul class=simple><li><p>First released version.</li></ul></section><section id=maintainers><h2>Maintainers</h2><ul class=simple><li><p>Kurt Steinkraus @kurt</li><li><p>Guilherme Trein @trein</li><li><p>Huan LI @huan</li></ul></section><section id=license><h2>License</h2><p>Apache-2.0</p></section><section id=pinject-and-google><h2>Pinject and Google</h2><p>Though Google owns this project\u2019s copyright, this project is not an officialGoogle product.</p></section>          </div>        </div>        <div id=\"data\" data-project-tabs-target=\"content\" class=\"vertical-tabs__content\" role=\"tabpanel\" aria-labelledby=\"mobile-data-tab\" tabindex=\"-1\">          <h2 class=\"page-title\">Project details</h2><div class=\"sidebar-section\">  <h3 class=\"sidebar-section__title\">Project links</h3>  <ul class=\"vertical-tabs__list\">    <li>      <a class=\"vertical-tabs__tab vertical-tabs__tab--with-icon vertical-tabs__tab--condensed\" href=\"https://github.com/google/pinject\" rel=\"nofollow\">        <i class=\"fas fa-home\" aria-hidden=\"true\"></i>Homepage      </a>    </li>  </ul></div><div class=\"sidebar-section\">  <h3 class=\"sidebar-section__title\">Statistics</h3>  <div class=\"hidden github-repo-info\" data-controller=\"github-repo-info\">GitHub statistics:    <ul class=\"vertical-tabs__list\">      <li>        <a class=\"vertical-tabs__tab vertical-tabs__tab--with-icon vertical-tabs__tab--condensed\"           data-github-repo-info-target=\"stargazersUrl\" rel=\"noopener\">          <i class=\"fa fa-star\" aria-hidden=\"true\"></i>          <strong>Stars:</strong>          <span data-github-repo-info-target=\"stargazersCount\"></span>        </a>      </li>      <li>        <a class=\"vertical-tabs__tab vertical-tabs__tab--with-icon vertical-tabs__tab--condensed\"           data-github-repo-info-target=\"forksUrl\" rel=\"noopener\">          <i class=\"fa fa-code-branch\" aria-hidden=\"true\"></i>          <strong>Forks:</strong>          <span data-github-repo-info-target=\"forksCount\"></span>        </a>      </li>      <li>        <a class=\"vertical-tabs__tab vertical-tabs__tab--with-icon vertical-tabs__tab--condensed\"           data-github-repo-info-target=\"openIssuesUrl\" rel=\"noopener\">          <i class=\"fa fa-exclamation-circle\" aria-hidden=\"true\"></i>          <strong>Open issues:</strong>          <span data-github-repo-info-target=\"openIssuesCount\"></span>        </a>      </li>      <li>        <a class=\"vertical-tabs__tab vertical-tabs__tab--with-icon vertical-tabs__tab--condensed\"           data-github-repo-info-target=\"openPRsUrl\" rel=\"noopener\">          <i class=\"fa fa-code-pull-request\" aria-hidden=\"true\"></i>          <strong>Open PRs:</strong>          <span data-github-repo-info-target=\"openPRsCount\"></span>        </a>      </li>    </ul>  </div>  <p>View statistics for this project via <a href=\"https://libraries.io/pypi/pinject\" title=\"External link\" target=\"_blank\" rel=\"noopener\">Libraries.io</a>, or by using <a href=\"https://packaging.python.org/guides/analyzing-pypi-package-downloads/\" target=\"_blank\" rel=\"noopener\">our public dataset on Google BigQuery</a>  </p></div><div class=\"sidebar-section\">  <h3 class=\"sidebar-section__title\">Meta</h3>  <p><strong>License:</strong> Apache License 2.0</p>    <p><strong>Author:</strong> <a href=\"mailto:kurt@steinkraus.us\">Kurt Steinkraus</a></p></div><div class=\"sidebar-section\">    <h3 class=\"sidebar-section__title\">Maintainers</h3>      <span class=\"sidebar-section__maintainer\">        <a href=\"/user/KurtSteinkraus/\" aria-label=\"KurtSteinkraus\">          <span class=\"sidebar-section__user-gravatar\">            <img src=\"https://pypi-camo.freetls.fastly.net/0400bffe3045a1db1fe0fe4901b5e06aca454910/68747470733a2f2f7365637572652e67726176617461722e636f6d2f6176617461722f66346536313465313431353465303265656364303539333238366161343966333f73697a653d3530\" height=\"50\" width=\"50\" alt=\"Avatar for KurtSteinkraus from gravatar.com\" title=\"Avatar for KurtSteinkraus from gravatar.com\">          </span>          <span class=\"sidebar-section__user-gravatar-text\">            KurtSteinkraus          </span>        </a>      </span>      <span class=\"sidebar-section__maintainer\">        <a href=\"/user/zixia/\" aria-label=\"zixia\">          <span class=\"sidebar-section__user-gravatar\">            <img src=\"https://pypi-camo.freetls.fastly.net/979569c2f2f445aec8c38eb64597825e07346fd5/68747470733a2f2f7365637572652e67726176617461722e636f6d2f6176617461722f33633532643161306166363332303736656337373532626537386363303432313f73697a653d3530\" height=\"50\" width=\"50\" alt=\"Avatar for zixia from gravatar.com\" title=\"Avatar for zixia from gravatar.com\">          </span>          <span class=\"sidebar-section__user-gravatar-text\">            zixia          </span>        </a>      </span></div>          <br>        </div>        <div id=\"history\" data-project-tabs-target=\"content\" class=\"vertical-tabs__content\" role=\"tabpanel\" aria-labelledby=\"history-tab mobile-history-tab\" tabindex=\"-1\">          <h2 class=\"page-title split-layout\">            <span>Release history</span>            <span class=\"reset-text margin-top\">              <a href=\"/help/#project-release-notifications\">Release notifications</a> |              <a href=\"/rss/project/pinject/releases.xml\">RSS feed <i class=\"fa fa-rss\" aria-hidden=\"true\"></i></a>            </span>          </h2>          <div class=\"release-timeline\">            <div class=\"release release--latest\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/pinject/0.15.dev5/\">                <p class=\"release__version\">                  0.15.dev5                  <span class=\"badge badge--warning\">pre-release                  </span>                </p>                <p class=\"release__version-date\">                  <time datetime=\"2021-03-23T16:43:50+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Mar 23, 2021</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/pinject/0.15.dev4/\">                <p class=\"release__version\">                  0.15.dev4                  <span class=\"badge badge--warning\">pre-release                  </span>                </p>                <p class=\"release__version-date\">                  <time datetime=\"2020-06-29T12:15:28+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Jun 29, 2020</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/pinject/0.15.dev3/\">                <p class=\"release__version\">                  0.15.dev3                  <span class=\"badge badge--warning\">pre-release                  </span>                </p>                <p class=\"release__version-date\">                  <time datetime=\"2020-03-24T06:30:06+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Mar 24, 2020</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/pinject/0.15.dev2/\">                <p class=\"release__version\">                  0.15.dev2                  <span class=\"badge badge--warning\">pre-release                  </span>                </p>                <p class=\"release__version-date\">                  <time datetime=\"2020-03-21T03:50:30+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Mar 21, 2020</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/pinject/0.15.dev1/\">                <p class=\"release__version\">                  0.15.dev1                  <span class=\"badge badge--warning\">pre-release                  </span>                </p>                <p class=\"release__version-date\">                  <time datetime=\"2020-03-21T03:24:17+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Mar 21, 2020</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/pinject/0.15.dev0/\">                <p class=\"release__version\">                  0.15.dev0                  <span class=\"badge badge--warning\">pre-release                  </span>                </p>                <p class=\"release__version-date\">                  <time datetime=\"2020-03-21T03:20:48+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Mar 21, 2020</time>                </p>              </a>            </div>            <div class=\"release release--current\">              <div class=\"release__meta\">                <span class=\"badge\">This version</span>              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/blue-cube.572a5bfb.svg\">              </div>              <a class=\"card release__card\" href=\"/project/pinject/0.14.1/\">                <p class=\"release__version\">                  0.14.1                </p>                <p class=\"release__version-date\">                  <time datetime=\"2019-05-25T08:04:36+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  May 25, 2019</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/pinject/0.12.6/\">                <p class=\"release__version\">                  0.12.6                </p>                <p class=\"release__version-date\">                  <time datetime=\"2018-11-29T04:04:56+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Nov 29, 2018</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/pinject/0.12.2/\">                <p class=\"release__version\">                  0.12.2                </p>                <p class=\"release__version-date\">                  <time datetime=\"2018-11-27T17:52:11+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Nov 27, 2018</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/pinject/0.10.2/\">                <p class=\"release__version\">                  0.10.2                </p>                <p class=\"release__version-date\">                  <time datetime=\"2013-08-16T15:56:59+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Aug 16, 2013</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/pinject/0.10.1/\">                <p class=\"release__version\">                  0.10.1                </p>                <p class=\"release__version-date\">                  <time datetime=\"2013-08-15T14:38:28+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Aug 15, 2013</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/pinject/0.10/\">                <p class=\"release__version\">                  0.10                </p>                <p class=\"release__version-date\">                  <time datetime=\"2013-08-02T17:11:09+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Aug 2, 2013</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/pinject/0.9/\">                <p class=\"release__version\">                  0.9                </p>                <p class=\"release__version-date\">                  <time datetime=\"2013-07-08T04:04:54+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Jul 8, 2013</time>                </p>              </a>            </div>            <div class=\"release release--oldest\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/pinject/0.8/\">                <p class=\"release__version\">                  0.8                </p>                <p class=\"release__version-date\">                  <time datetime=\"2013-06-29T03:50:28+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Jun 29, 2013</time>                </p>              </a>            </div>          </div>        </div>          <div id=\"files\" data-project-tabs-target=\"content\" class=\"vertical-tabs__content\" role=\"tabpanel\" aria-labelledby=\"files-tab mobile-files-tab\" tabindex=\"-1\">            <h2 class=\"page-title\">Download files</h2>            <p>Download the file for your platform. If you're not sure which to choose, learn more about <a href=\"https://packaging.python.org/tutorials/installing-packages/\" title=\"External link\" target=\"_blank\" rel=\"noopener\">installing packages</a>.</p>            <h3>Source Distribution            </h3>                  <div class=\"file\">      <div class=\"file__graphic\">        <i class=\"far fa-file\" aria-hidden=\"true\"></i>      </div>      <div class=\"card file__card\">        <a href=\"https://files.pythonhosted.org/packages/4c/4e/5e311f48898e22e2116c53739e91c20477993f50da21b603259b72c3a65b/pinject-0.14.1.tar.gz\">          pinject-0.14.1.tar.gz        </a>        (60.3 kB        <a href=\"#copy-hash-modal-d52b0103-f851-42ba-99b8-096d3e000c6a\">view hashes</a>)        <p class=\"file__meta\">          Uploaded <time datetime=\"2019-05-25T08:04:39+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  May 25, 2019</time>          <code>source</code>        </p>      </div>    </div>            <h3>Built Distribution            </h3>                <div class=\"file\">      <div class=\"file__graphic\">        <i class=\"far fa-file\" aria-hidden=\"true\"></i>      </div>      <div class=\"card file__card\">        <a href=\"https://files.pythonhosted.org/packages/fd/67/9025a31cbadca4d88880a6856b9b3052e970981d49dc9fa3f9ee46793022/pinject-0.14.1-py3-none-any.whl\">          pinject-0.14.1-py3-none-any.whl        </a>        (43.0 kB        <a href=\"#copy-hash-modal-50297e4d-693e-4adb-8b2f-a158fea1b13c\">view hashes</a>)        <p class=\"file__meta\">          Uploaded <time datetime=\"2019-05-25T08:04:36+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  May 25, 2019</time>          <code>py3</code>        </p>      </div>    </div>          </div><div id=\"copy-hash-modal-d52b0103-f851-42ba-99b8-096d3e000c6a\" class=\"modal modal--wide\">  <div class=\"modal__content\" role=\"dialog\">    <a href=\"#modal-close\" title=\"Close\" class=\"modal__close\">      <i class=\"fa fa-times\" aria-hidden=\"true\"></i>      <span class=\"sr-only\">Close</span>    </a>    <div class=\"modal__body\">      <h3 class=\"modal__title\"><a href=\"https://pip.pypa.io/en/stable/topics/secure-installs/#hash-checking-mode\" title=\"External link\" target=\"_blank\" rel=\"noopener\">Hashes</a> for pinject-0.14.1.tar.gz      </h3>      <table class=\"table table--hashes\">        <caption class=\"sr-only\">Hashes for pinject-0.14.1.tar.gz</caption>        <thead>          <tr>            <th scope=\"col\">Algorithm</th>            <th scope=\"col\">Hash digest</th>            <th></th>          </tr>        </thead>        <tbody>          <tr data-controller=\"clipboard\">            <th scope=\"row\">SHA256</th>            <td><code data-clipboard-target=\"source\">0f0a0b14f9df87a85b529a21cdaf530269b1f24fb303d418583a12bb53f69382</code></td>            <td class=\"table__align-right\">              <button type=\"button\" class=\"button button--small copy-tooltip copy-tooltip-w\" data-action=\"clipboard#copy\" data-clipboard-target=\"tooltip\" data-clipboard-tooltip-value=\"Copy to clipboard\">Copy              </button>            </td>          </tr>          <tr data-controller=\"clipboard\">            <th scope=\"row\">MD5</th>            <td><code data-clipboard-target=\"source\">57ac1f33685ff85aa31f0e2433cae97d</code></td>            <td class=\"table__align-right\">              <button type=\"button\" class=\"button button--small copy-tooltip copy-tooltip-w\" data-action=\"clipboard#copy\" data-clipboard-target=\"tooltip\" data-clipboard-tooltip-value=\"Copy to clipboard\">Copy              </button>            </td>          </tr>          <tr data-controller=\"clipboard\">            <th scope=\"row\">BLAKE2b-256</th>            <td><code data-clipboard-target=\"source\">4c4e5e311f48898e22e2116c53739e91c20477993f50da21b603259b72c3a65b</code></td>            <td class=\"table__align-right\">              <button type=\"button\" class=\"button button--small copy-tooltip copy-tooltip-w\" data-action=\"clipboard#copy\" data-clipboard-target=\"tooltip\" data-clipboard-tooltip-value=\"Copy to clipboard\">Copy              </button>            </td>          </tr>        </tbody>      </table>    </div>    <div class=\"modal__footer\">      <a href=\"#modal-close\" class=\"button button--primary modal__action\">Close</a>    </div>  </div></div><div id=\"copy-hash-modal-50297e4d-693e-4adb-8b2f-a158fea1b13c\" class=\"modal modal--wide\">  <div class=\"modal__content\" role=\"dialog\">    <a href=\"#modal-close\" title=\"Close\" class=\"modal__close\">      <i class=\"fa fa-times\" aria-hidden=\"true\"></i>      <span class=\"sr-only\">Close</span>    </a>    <div class=\"modal__body\">      <h3 class=\"modal__title\"><a href=\"https://pip.pypa.io/en/stable/topics/secure-installs/#hash-checking-mode\" title=\"External link\" target=\"_blank\" rel=\"noopener\">Hashes</a> for pinject-0.14.1-py3-none-any.whl      </h3>      <table class=\"table table--hashes\">        <caption class=\"sr-only\">Hashes for pinject-0.14.1-py3-none-any.whl</caption>        <thead>          <tr>            <th scope=\"col\">Algorithm</th>            <th scope=\"col\">Hash digest</th>            <th></th>          </tr>        </thead>        <tbody>          <tr data-controller=\"clipboard\">            <th scope=\"row\">SHA256</th>            <td><code data-clipboard-target=\"source\">dfc4981a36d3f7cf2fa82bd8922f713c769004fe7af935def3e2a52147aeda66</code></td>            <td class=\"table__align-right\">              <button type=\"button\" class=\"button button--small copy-tooltip copy-tooltip-w\" data-action=\"clipboard#copy\" data-clipboard-target=\"tooltip\" data-clipboard-tooltip-value=\"Copy to clipboard\">Copy              </button>            </td>          </tr>          <tr data-controller=\"clipboard\">            <th scope=\"row\">MD5</th>            <td><code data-clipboard-target=\"source\">24846fd788c75ac896efcdbd8e7a4334</code></td>            <td class=\"table__align-right\">              <button type=\"button\" class=\"button button--small copy-tooltip copy-tooltip-w\" data-action=\"clipboard#copy\" data-clipboard-target=\"tooltip\" data-clipboard-tooltip-value=\"Copy to clipboard\">Copy              </button>            </td>          </tr>          <tr data-controller=\"clipboard\">            <th scope=\"row\">BLAKE2b-256</th>            <td><code data-clipboard-target=\"source\">fd679025a31cbadca4d88880a6856b9b3052e970981d49dc9fa3f9ee46793022</code></td>            <td class=\"table__align-right\">              <button type=\"button\" class=\"button button--small copy-tooltip copy-tooltip-w\" data-action=\"clipboard#copy\" data-clipboard-target=\"tooltip\" data-clipboard-tooltip-value=\"Copy to clipboard\">Copy              </button>            </td>          </tr>        </tbody>      </table>    </div>    <div class=\"modal__footer\">      <a href=\"#modal-close\" class=\"button button--primary modal__action\">Close</a>    </div>  </div></div>      </div>    </div>  </div></div>    </main>    <footer class=\"footer\">      <div class=\"footer__logo\">        <img src=\"/static/images/white-cube.2351a86c.svg\" alt=\"\" class=\"-js-white-cube\">      </div>      <div class=\"footer__menus\">        <div class=\"footer__menu\">          <h2>Help</h2>          <nav aria-label=\"Help navigation\">            <ul>              <li><a href=\"https://packaging.python.org/tutorials/installing-packages/\" title=\"External link\" target=\"_blank\" rel=\"noopener\">Installing packages</a></li>              <li><a href=\"https://packaging.python.org/tutorials/packaging-projects/\" title=\"External link\" target=\"_blank\" rel=\"noopener\">Uploading packages</a></li>              <li><a href=\"https://packaging.python.org/\" title=\"External link\" target=\"_blank\" rel=\"noopener\">User guide</a></li>              <li><a href=\"https://www.python.org/dev/peps/pep-0541/\" title=\"External link\" target=\"_blank\" rel=\"noopener\">Project name retention</a></li>              <li><a href=\"/help/\">FAQs</a></li>            </ul>          </nav>        </div>        <div class=\"footer__menu\">          <h2>About PyPI</h2>          <nav aria-label=\"About PyPI navigation\">            <ul>              <li><a href=\"https://twitter.com/PyPI\" title=\"External link\" target=\"_blank\" rel=\"noopener\">PyPI on Twitter</a></li>              <li><a href=\"https://dtdg.co/pypi\" title=\"External link\" target=\"_blank\" rel=\"noopener\">Infrastructure dashboard</a></li>              <li><a href=\"/stats/\">Statistics</a></li>              <li><a href=\"/trademarks/\">Logos & trademarks</a></li>              <li><a href=\"/sponsors/\">Our sponsors</a></li>            </ul>          </nav>        </div>        <div class=\"footer__menu\">          <h2>Contributing to PyPI</h2>          <nav aria-label=\"How to contribute navigation\">            <ul>              <li><a href=\"/help/#feedback\">Bugs and feedback</a></li>              <li><a href=\"https://github.com/pypi/warehouse\" title=\"External link\" target=\"_blank\" rel=\"noopener\">Contribute on GitHub</a></li>              <li><a href=\"https://hosted.weblate.org/projects/pypa/warehouse/\" title=\"External link\" target=\"_blank\" rel=\"noopener\">Translate PyPI</a></li>              <li><a href=\"/sponsors/\">Sponsor PyPI</a></li>              <li><a href=\"https://github.com/pypi/warehouse/graphs/contributors\" title=\"External link\" target=\"_blank\" rel=\"noopener\">Development credits</a></li>            </ul>          </nav>        </div>        <div class=\"footer__menu\">          <h2>Using PyPI</h2>          <nav aria-label=\"Using PyPI navigation\">            <ul>              <li><a href=\"https://github.com/pypa/.github/blob/main/CODE_OF_CONDUCT.md\" title=\"External link\" target=\"_blank\" rel=\"noopener\">Code of conduct</a></li>              <li><a href=\"/security/\">Report security issue</a></li>              <li><a href=\"https://www.python.org/privacy/\" title=\"External link\" target=\"_blank\" rel=\"noopener\">Privacy policy</a></li>              <li><a href=\"/policy/terms-of-use/\">Terms of use</a></li>              <li><a href=\"/policy/acceptable-use-policy/\">Acceptable Use Policy</a></li>            </ul>          </nav>        </div>      </div>      <hr class=\"footer__divider\">      <div class=\"footer__text\">        <p>Status:<a href=\"https://status.python.org/\" title=\"External link\" target=\"_blank\" rel=\"noopener\">          <span data-statuspage-domain=\"https://2p66nmmycsj3.statuspage.io\">all systems operational</span></a>        </p>        <p>Developed and maintained by the Python community, for the Python community.          <br>          <a href=\"https://donate.pypi.org\">Donate today!</a>        </p>        <p>          \"PyPI\", \"Python Package Index\", and the blocks logos are registered <a href=\"/trademarks/\">trademarks</a> of the <a href=\"https://python.org/psf-landing\" target=\"_blank\" rel=\"noopener\">Python Software Foundation</a>.<br>        </p>        <p>          \u00a9 2024 <a href=\"https://www.python.org/psf-landing/\" title=\"External link\" target=\"_blank\" rel=\"noopener\">Python Software Foundation</a><br>          <a href=\"/sitemap/\">Site map</a>        </p>      </div>      <div class=\"centered hide-on-desktop\">        <button type=\"button\" class=\"button button--switch-to-desktop hidden\" data-viewport-toggle-target=\"switchToDesktop\" data-action=\"viewport-toggle#switchToDesktop\">Switch to desktop version        </button>      </div>    </footer>    <div class=\"language-switcher\">      <form action=\"/locale/\">        <ul>          <li>            <button              class=\"language-switcher__selected\"              name=\"locale_id\" value=\"en\" type=\"submit\"            >              English            </button>          </li>          <li>            <button              name=\"locale_id\" value=\"es\" type=\"submit\"            >              espa\u00f1ol            </button>          </li>          <li>            <button              name=\"locale_id\" value=\"fr\" type=\"submit\"            >              fran\u00e7ais            </button>          </li>          <li>            <button              name=\"locale_id\" value=\"ja\" type=\"submit\"            >              \u65e5\u672c\u8a9e            </button>          </li>          <li>            <button              name=\"locale_id\" value=\"pt_BR\" type=\"submit\"            >              portugu\u00eas (Brasil)            </button>          </li>          <li>            <button              name=\"locale_id\" value=\"uk\" type=\"submit\"            >              \u0443\u043a\u0440\u0430\u0457\u043d\u0441\u044c\u043a\u0430            </button>          </li>          <li>            <button              name=\"locale_id\" value=\"el\" type=\"submit\"            >              \u0395\u03bb\u03bb\u03b7\u03bd\u03b9\u03ba\u03ac            </button>          </li>          <li>            <button              name=\"locale_id\" value=\"de\" type=\"submit\"            >              Deutsch            </button>          </li>          <li>            <button              name=\"locale_id\" value=\"zh_Hans\" type=\"submit\"            >              \u4e2d\u6587 (\u7b80\u4f53)            </button>          </li>          <li>            <button              name=\"locale_id\" value=\"zh_Hant\" type=\"submit\"            >              \u4e2d\u6587 (\u7e41\u9ad4)            </button>          </li>          <li>            <button              name=\"locale_id\" value=\"ru\" type=\"submit\"            >              \u0440\u0443\u0441\u0441\u043a\u0438\u0439            </button>          </li>          <li>            <button              name=\"locale_id\" value=\"he\" type=\"submit\"            >              \u05e2\u05d1\u05e8\u05d9\u05ea            </button>          </li>          <li>            <button              name=\"locale_id\" value=\"eo\" type=\"submit\"            >              esperanto            </button>          </li>        </ul>      </form>    </div><div class=\"sponsors\">  <p class=\"sponsors__title\">Supported by</p>  <div class=\"sponsors__divider\"></div>        <a class=\"sponsors__sponsor\" target=\"_blank\" rel=\"noopener\" href=\"https://aws.amazon.com/\">          <img class=sponsors__image src=\"https://pypi-camo.freetls.fastly.net/ed7074cadad1a06f56bc520ad9bd3e00d0704c5b/68747470733a2f2f73746f726167652e676f6f676c65617069732e636f6d2f707970692d6173736574732f73706f6e736f726c6f676f732f6177732d77686974652d6c6f676f2d7443615473387a432e706e67\" alt=AWS loading=lazy>          <span class=\"sponsors__name\">AWS</span>          <span class=\"sponsors__service\">            Cloud computing and Security Sponsor          </span>        </a>        <a class=\"sponsors__sponsor\" target=\"_blank\" rel=\"noopener\" href=\"https://www.datadoghq.com/\">          <img class=sponsors__image src=\"https://pypi-camo.freetls.fastly.net/8855f7c063a3bdb5b0ce8d91bfc50cf851cc5c51/68747470733a2f2f73746f726167652e676f6f676c65617069732e636f6d2f707970692d6173736574732f73706f6e736f726c6f676f732f64617461646f672d77686974652d6c6f676f2d6668644c4e666c6f2e706e67\" alt=Datadog loading=lazy>          <span class=\"sponsors__name\">Datadog</span>          <span class=\"sponsors__service\">            Monitoring          </span>        </a>        <a class=\"sponsors__sponsor\" target=\"_blank\" rel=\"noopener\" href=\"https://www.fastly.com/\">          <img class=sponsors__image src=\"https://pypi-camo.freetls.fastly.net/df6fe8829cbff2d7f668d98571df1fd011f36192/68747470733a2f2f73746f726167652e676f6f676c65617069732e636f6d2f707970692d6173736574732f73706f6e736f726c6f676f732f666173746c792d77686974652d6c6f676f2d65684d3077735f6f2e706e67\" alt=Fastly loading=lazy>          <span class=\"sponsors__name\">Fastly</span>          <span class=\"sponsors__service\">            CDN          </span>        </a>        <a class=\"sponsors__sponsor\" target=\"_blank\" rel=\"noopener\" href=\"https://careers.google.com/\">          <img class=sponsors__image src=\"https://pypi-camo.freetls.fastly.net/420cc8cf360bac879e24c923b2f50ba7d1314fb0/68747470733a2f2f73746f726167652e676f6f676c65617069732e636f6d2f707970692d6173736574732f73706f6e736f726c6f676f732f676f6f676c652d77686974652d6c6f676f2d616734424e3774332e706e67\" alt=Google loading=lazy>          <span class=\"sponsors__name\">Google</span>          <span class=\"sponsors__service\">            Download Analytics          </span>        </a>        <a class=\"sponsors__sponsor\" target=\"_blank\" rel=\"noopener\" href=\"https://www.python.org/psf/sponsors/#microsoft\">          <img class=sponsors__image src=\"https://pypi-camo.freetls.fastly.net/524d1ce72f7772294ca4c1fe05d21dec8fa3f8ea/68747470733a2f2f73746f726167652e676f6f676c65617069732e636f6d2f707970692d6173736574732f73706f6e736f726c6f676f732f6d6963726f736f66742d77686974652d6c6f676f2d5a443172685444462e706e67\" alt=Microsoft loading=lazy>          <span class=\"sponsors__name\">Microsoft</span>          <span class=\"sponsors__service\">            PSF Sponsor          </span>        </a>        <a class=\"sponsors__sponsor\" target=\"_blank\" rel=\"noopener\" href=\"https://www.pingdom.com/\">          <img class=sponsors__image src=\"https://pypi-camo.freetls.fastly.net/d01053c02f3a626b73ffcb06b96367fdbbf9e230/68747470733a2f2f73746f726167652e676f6f676c65617069732e636f6d2f707970692d6173736574732f73706f6e736f726c6f676f732f70696e67646f6d2d77686974652d6c6f676f2d67355831547546362e706e67\" alt=Pingdom loading=lazy>          <span class=\"sponsors__name\">Pingdom</span>          <span class=\"sponsors__service\">            Monitoring          </span>        </a>        <a class=\"sponsors__sponsor\" target=\"_blank\" rel=\"noopener\" href=\"https://getsentry.com/for/python\">          <img class=sponsors__image src=\"https://pypi-camo.freetls.fastly.net/67af7117035e2345bacb5a82e9aa8b5b3e70701d/68747470733a2f2f73746f726167652e676f6f676c65617069732e636f6d2f707970692d6173736574732f73706f6e736f726c6f676f732f73656e7472792d77686974652d6c6f676f2d4a2d6b64742d706e2e706e67\" alt=Sentry loading=lazy>          <span class=\"sponsors__name\">Sentry</span>          <span class=\"sponsors__service\">            Error logging          </span>        </a>        <a class=\"sponsors__sponsor\" target=\"_blank\" rel=\"noopener\" href=\"https://statuspage.io\">          <img class=sponsors__image src=\"https://pypi-camo.freetls.fastly.net/b611884ff90435a0575dbab7d9b0d3e60f136466/68747470733a2f2f73746f726167652e676f6f676c65617069732e636f6d2f707970692d6173736574732f73706f6e736f726c6f676f732f737461747573706167652d77686974652d6c6f676f2d5467476c6a4a2d502e706e67\" alt=StatusPage loading=lazy>          <span class=\"sponsors__name\">StatusPage</span>          <span class=\"sponsors__service\">            Status page          </span>        </a></div>  </body></html>",
  "embeddings": []
}
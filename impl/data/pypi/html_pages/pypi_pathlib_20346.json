{
  "libtype": "pypi",
  "libname": "pathlib",
  "url": "https://pathlib.readthedocs.org/",
  "html": "<!DOCTYPE html><!--[if IE 8]><html class=\"no-js lt-ie9\" lang=\"en\" > <![endif]--><!--[if gt IE 8]><!--> <html class=\"no-js\" lang=\"en\" > <!--<![endif]--><head>  <meta charset=\"utf-8\">  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">    <title>pathlib &mdash; pathlib 1.0.1 documentation</title>          <link href='https://fonts.googleapis.com/css?family=Lato:400,700,400italic,700italic|Roboto+Slab:400,700|Inconsolata:400,700' rel='stylesheet' type='text/css'>                    <link rel=\"stylesheet\" href=\"https://media.readthedocs.org/css/sphinx_rtd_theme.css\" type=\"text/css\" />      <link rel=\"stylesheet\" href=\"https://media.readthedocs.org/css/readthedocs-doc-embed.css\" type=\"text/css\" />      <link rel=\"top\" title=\"pathlib 1.0.1 documentation\" href=\"#\"/> <!-- RTD Extra Head --><!-- Read the Docs is acting as the canonical URL for your project. If you want to change it, more info is available in our docs:  http://docs.readthedocs.org/en/latest/canonical.html--><link rel=\"canonical\" href=\"http://pathlib.readthedocs.org/en/latest/\" /><script type=\"text/javascript\">  // This is included here because other places don't have access to the pagename variable.  var READTHEDOCS_DATA = {    project: \"pathlib\",    version: \"pep428\",    language: \"en\",    page: \"index\",    theme: \"sphinx_rtd_theme\",    docroot: \"/docs/\",    source_suffix: \".rst\",    api_host: \"https://readthedocs.org\",    commit: \"11f10035e7fb+\"  }  // Old variables  var doc_version = \"pep428\";  var doc_slug = \"pathlib\";  var page_name = \"index\";  var html_theme = \"sphinx_rtd_theme\";</script><!-- RTD Analytics Code --><!-- Included in the header because you don't have a footer block. --><script type=\"text/javascript\">  var _gaq = _gaq || [];  _gaq.push(['_setAccount', 'UA-17997319-1']);  _gaq.push(['_trackPageview']);  (function() {    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);  })();</script><!-- end RTD Analytics Code --><!-- end RTD <extrahead> -->    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/modernizr/2.6.2/modernizr.min.js\"></script></head><body class=\"wy-body-for-nav\" role=\"document\">  <div class=\"wy-grid-for-nav\">        <nav data-toggle=\"wy-nav-shift\" class=\"wy-nav-side\">      <div class=\"wy-side-nav-search\">                  <a href=\"#\" class=\"fa fa-home\"> pathlib</a>                <div role=\"search\">  <form id =\"rtd-search-form\" class=\"wy-form\" action=\"search.html\" method=\"get\">    <input type=\"text\" name=\"q\" placeholder=\"Search docs\" />    <input type=\"hidden\" name=\"check_keywords\" value=\"yes\" />    <input type=\"hidden\" name=\"area\" value=\"default\" />  </form></div>      </div>      <div class=\"wy-menu wy-menu-vertical\" data-spy=\"affix\" role=\"navigation\" aria-label=\"main navigation\">                            <!-- Local TOC -->            <div class=\"local-toc\"><ul><li><a class=\"reference internal\" href=\"#\">pathlib</a><ul><li><a class=\"reference internal\" href=\"#download\">Download</a></li><li><a class=\"reference internal\" href=\"#high-level-view\">High-level view</a></li><li><a class=\"reference internal\" href=\"#basic-use\">Basic use</a></li><li><a class=\"reference internal\" href=\"#pure-paths\">Pure paths</a><ul><li><a class=\"reference internal\" href=\"#general-properties\">General properties</a></li><li><a class=\"reference internal\" href=\"#operators\">Operators</a></li><li><a class=\"reference internal\" href=\"#accessing-individual-parts\">Accessing individual parts</a></li><li><a class=\"reference internal\" href=\"#methods-and-properties\">Methods and properties</a></li></ul></li><li><a class=\"reference internal\" href=\"#concrete-paths\">Concrete paths</a><ul><li><a class=\"reference internal\" href=\"#methods\">Methods</a></li></ul></li></ul></li></ul></div>              </div>      &nbsp;    </nav>    <section data-toggle=\"wy-nav-shift\" class=\"wy-nav-content-wrap\">            <nav class=\"wy-nav-top\" role=\"navigation\" aria-label=\"top navigation\">        <i data-toggle=\"wy-nav-top\" class=\"fa fa-bars\"></i>        <a href=\"#\">pathlib</a>      </nav>            <div class=\"wy-nav-content\">        <div class=\"rst-content\">          <div role=\"navigation\" aria-label=\"breadcrumbs navigation\">  <ul class=\"wy-breadcrumbs\">    <li><a href=\"#\">Docs</a> &raquo;</li>          <li>pathlib</li>      <li class=\"wy-breadcrumbs-aside\">                  <a href=\"https://bitbucket.org/pitrou/pathlib/src/pep428/docs/index.rst\" class=\"fa fa-bitbucket\"> Edit on Bitbucket</a>              </li>  </ul>  <hr/></div>          <div role=\"main\" class=\"document\">              <div class=\"section\" id=\"module-pathlib\"><span id=\"pathlib\"></span><h1>pathlib<a class=\"headerlink\" href=\"#module-pathlib\" title=\"Permalink to this headline\">\u00b6</a></h1><p>Manipulating filesystem paths as string objects can quickly become cumbersome:multiple calls to <tt class=\"xref py py-func docutils literal\"><span class=\"pre\">os.path.join()</span></tt> or <tt class=\"xref py py-func docutils literal\"><span class=\"pre\">os.path.dirname()</span></tt>, etc.This module offers a set of classes featuring all the common operations onpaths in an easy, object-oriented way.</p><p>This module is best used with Python 3.2 or later, but it is also compatiblewith Python 2.6 and 2.7.</p><div class=\"admonition note\"><p class=\"first admonition-title\">Note</p><p class=\"last\">This module has been <a class=\"reference external\" href=\"http://docs.python.org/dev/library/pathlib.html\">included</a>in the Python 3.4 standard library after <span class=\"target\" id=\"index-0\"></span><a class=\"pep reference external\" href=\"http://www.python.org/dev/peps/pep-0428\"><strong>PEP 428</strong></a> acceptance. You onlyneed to install it for Python 3.3 or older.</p></div><div class=\"admonition seealso\"><p class=\"first admonition-title\">See also</p><p class=\"last\"><span class=\"target\" id=\"index-1\"></span><a class=\"pep reference external\" href=\"http://www.python.org/dev/peps/pep-0428\"><strong>PEP 428</strong></a>: Rationale for the final pathlib design and API.</p></div><div class=\"section\" id=\"download\"><h2>Download<a class=\"headerlink\" href=\"#download\" title=\"Permalink to this headline\">\u00b6</a></h2><p>Standalone releases are available on PyPI: <a class=\"reference external\" href=\"http://pypi.python.org/pypi/pathlib/\">http://pypi.python.org/pypi/pathlib/</a></p><p>Main development now takes place in the Python standard library: seethe <a class=\"reference external\" href=\"http://docs.python.org/devguide/\">Python developer&#8217;s guide</a>.</p><p>The maintenance repository for this standalone backport module can befound on BitBucket, but activity is expected to be quite low:<a class=\"reference external\" href=\"https://bitbucket.org/pitrou/pathlib/\">https://bitbucket.org/pitrou/pathlib/</a></p></div><div class=\"section\" id=\"high-level-view\"><h2>High-level view<a class=\"headerlink\" href=\"#high-level-view\" title=\"Permalink to this headline\">\u00b6</a></h2><p>This module offers classes representing filesystem paths with semanticsappropriate for different operating systems.  Path classes are dividedbetween <a class=\"reference internal\" href=\"#pure-paths\"><em>pure paths</em></a>, which provide purely computationaloperations without I/O, and <a class=\"reference internal\" href=\"#concrete-paths\"><em>concrete paths</em></a>, whichinherit from pure paths but also provide I/O operations.</p><img alt=\"_images/pathlib-inheritance.png\" class=\"align-center\" src=\"_images/pathlib-inheritance.png\" /><p>If you&#8217;ve never used this module before or just aren&#8217;t sure which class isright for your task, <a class=\"reference internal\" href=\"#pathlib.Path\" title=\"pathlib.Path\"><tt class=\"xref py py-class docutils literal\"><span class=\"pre\">Path</span></tt></a> is most likely what you need. It instantiatesa <a class=\"reference internal\" href=\"#concrete-paths\"><em>concrete path</em></a> for the platform the code is running on.</p><p>Pure paths are useful in some special cases; for example:</p><ol class=\"arabic simple\"><li>If you want to manipulate Windows paths on a Unix machine (or vice versa).You cannot instantiate a <a class=\"reference internal\" href=\"#pathlib.WindowsPath\" title=\"pathlib.WindowsPath\"><tt class=\"xref py py-class docutils literal\"><span class=\"pre\">WindowsPath</span></tt></a> when running on Unix, but youcan instantiate <a class=\"reference internal\" href=\"#pathlib.PureWindowsPath\" title=\"pathlib.PureWindowsPath\"><tt class=\"xref py py-class docutils literal\"><span class=\"pre\">PureWindowsPath</span></tt></a>.</li><li>You want to make sure that your code only manipulates paths without actuallyaccessing the OS. In this case, instantiating one of the pure classes may beuseful since those simply don&#8217;t have any OS-accessing operations.</li></ol></div><div class=\"section\" id=\"basic-use\"><h2>Basic use<a class=\"headerlink\" href=\"#basic-use\" title=\"Permalink to this headline\">\u00b6</a></h2><p>Importing the module classes:</p><div class=\"highlight-python\"><div class=\"highlight\"><pre><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">pathlib</span> <span class=\"kn\">import</span> <span class=\"o\">*</span></pre></div></div><p>Listing subdirectories:</p><div class=\"highlight-python\"><div class=\"highlight\"><pre><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">Path</span><span class=\"p\">(</span><span class=\"s\">&#39;.&#39;</span><span class=\"p\">)</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"p\">[</span><span class=\"n\">x</span> <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">iterdir</span><span class=\"p\">()</span> <span class=\"k\">if</span> <span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">is_dir</span><span class=\"p\">()]</span><span class=\"go\">[PosixPath(&#39;.hg&#39;), PosixPath(&#39;docs&#39;), PosixPath(&#39;dist&#39;),</span><span class=\"go\"> PosixPath(&#39;__pycache__&#39;), PosixPath(&#39;build&#39;)]</span></pre></div></div><p>Listing Python source files in this directory tree:</p><div class=\"highlight-python\"><div class=\"highlight\"><pre><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">glob</span><span class=\"p\">(</span><span class=\"s\">&#39;**/*.py&#39;</span><span class=\"p\">))</span><span class=\"go\">[PosixPath(&#39;test_pathlib.py&#39;), PosixPath(&#39;setup.py&#39;),</span><span class=\"go\"> PosixPath(&#39;pathlib.py&#39;), PosixPath(&#39;docs/conf.py&#39;),</span><span class=\"go\"> PosixPath(&#39;build/lib/pathlib.py&#39;)]</span></pre></div></div><p>Navigating inside a directory tree:</p><div class=\"highlight-python\"><div class=\"highlight\"><pre><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">Path</span><span class=\"p\">(</span><span class=\"s\">&#39;/etc&#39;</span><span class=\"p\">)</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">q</span> <span class=\"o\">=</span> <span class=\"n\">p</span> <span class=\"o\">/</span> <span class=\"s\">&#39;init.d&#39;</span> <span class=\"o\">/</span> <span class=\"s\">&#39;reboot&#39;</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">q</span><span class=\"go\">PosixPath(&#39;/etc/init.d/reboot&#39;)</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">q</span><span class=\"o\">.</span><span class=\"n\">resolve</span><span class=\"p\">()</span><span class=\"go\">PosixPath(&#39;/etc/rc.d/init.d/halt&#39;)</span></pre></div></div><p>Querying path properties:</p><div class=\"highlight-python\"><div class=\"highlight\"><pre><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">q</span><span class=\"o\">.</span><span class=\"n\">exists</span><span class=\"p\">()</span><span class=\"go\">True</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">q</span><span class=\"o\">.</span><span class=\"n\">is_dir</span><span class=\"p\">()</span><span class=\"go\">False</span></pre></div></div><p>Opening a file:</p><div class=\"highlight-python\"><div class=\"highlight\"><pre><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">with</span> <span class=\"n\">q</span><span class=\"o\">.</span><span class=\"n\">open</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span> <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">readline</span><span class=\"p\">()</span><span class=\"gp\">...</span><span class=\"go\">&#39;#!/bin/bash\\n&#39;</span></pre></div></div></div><div class=\"section\" id=\"pure-paths\"><span id=\"id1\"></span><h2>Pure paths<a class=\"headerlink\" href=\"#pure-paths\" title=\"Permalink to this headline\">\u00b6</a></h2><p>Pure path objects provide path-handling operations which don&#8217;t actuallyaccess a filesystem.  There are three ways to access these classes, whichwe also call <em>flavours</em>:</p><dl class=\"class\"><dt id=\"pathlib.PurePath\"><em class=\"property\">class </em><tt class=\"descclassname\">pathlib.</tt><tt class=\"descname\">PurePath</tt><big>(</big><em>*pathsegments</em><big>)</big><a class=\"headerlink\" href=\"#pathlib.PurePath\" title=\"Permalink to this definition\">\u00b6</a></dt><dd><p>A generic class that represents the system&#8217;s path flavour (instantiatingit creates either a <a class=\"reference internal\" href=\"#pathlib.PurePosixPath\" title=\"pathlib.PurePosixPath\"><tt class=\"xref py py-class docutils literal\"><span class=\"pre\">PurePosixPath</span></tt></a> or a <a class=\"reference internal\" href=\"#pathlib.PureWindowsPath\" title=\"pathlib.PureWindowsPath\"><tt class=\"xref py py-class docutils literal\"><span class=\"pre\">PureWindowsPath</span></tt></a>):</p><div class=\"highlight-python\"><div class=\"highlight\"><pre><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">PurePath</span><span class=\"p\">(</span><span class=\"s\">&#39;setup.py&#39;</span><span class=\"p\">)</span>      <span class=\"c\"># Running on a Unix machine</span><span class=\"go\">PurePosixPath(&#39;setup.py&#39;)</span></pre></div></div><p>Each element of <em>pathsegments</em> can be either a string or bytes objectrepresenting a path segment; it can also be another path object:</p><div class=\"highlight-python\"><div class=\"highlight\"><pre><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">PurePath</span><span class=\"p\">(</span><span class=\"s\">&#39;foo&#39;</span><span class=\"p\">,</span> <span class=\"s\">&#39;some/path&#39;</span><span class=\"p\">,</span> <span class=\"s\">&#39;bar&#39;</span><span class=\"p\">)</span><span class=\"go\">PurePosixPath(&#39;foo/some/path/bar&#39;)</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">PurePath</span><span class=\"p\">(</span><span class=\"n\">Path</span><span class=\"p\">(</span><span class=\"s\">&#39;foo&#39;</span><span class=\"p\">),</span> <span class=\"n\">Path</span><span class=\"p\">(</span><span class=\"s\">&#39;bar&#39;</span><span class=\"p\">))</span><span class=\"go\">PurePosixPath(&#39;foo/bar&#39;)</span></pre></div></div><p>When <em>pathsegments</em> is empty, the current directory is assumed:</p><div class=\"highlight-python\"><div class=\"highlight\"><pre><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">PurePath</span><span class=\"p\">()</span><span class=\"go\">PurePosixPath(&#39;.&#39;)</span></pre></div></div><p>When several absolute paths are given, the last is taken as an anchor(mimicking <tt class=\"xref py py-func docutils literal\"><span class=\"pre\">os.path.join()</span></tt>&#8216;s behaviour):</p><div class=\"highlight-python\"><div class=\"highlight\"><pre><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">PurePath</span><span class=\"p\">(</span><span class=\"s\">&#39;/etc&#39;</span><span class=\"p\">,</span> <span class=\"s\">&#39;/usr&#39;</span><span class=\"p\">,</span> <span class=\"s\">&#39;lib64&#39;</span><span class=\"p\">)</span><span class=\"go\">PurePosixPath(&#39;/usr/lib64&#39;)</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">PureWindowsPath</span><span class=\"p\">(</span><span class=\"s\">&#39;c:/Windows&#39;</span><span class=\"p\">,</span> <span class=\"s\">&#39;d:bar&#39;</span><span class=\"p\">)</span><span class=\"go\">PureWindowsPath(&#39;d:bar&#39;)</span></pre></div></div><p>However, in a Windows path, changing the local root doesn&#8217;t discard theprevious drive setting:</p><div class=\"highlight-python\"><div class=\"highlight\"><pre><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">PureWindowsPath</span><span class=\"p\">(</span><span class=\"s\">&#39;c:/Windows&#39;</span><span class=\"p\">,</span> <span class=\"s\">&#39;/Program Files&#39;</span><span class=\"p\">)</span><span class=\"go\">PureWindowsPath(&#39;c:/Program Files&#39;)</span></pre></div></div><p>Spurious slashes and single dots are collapsed, but double dots (<tt class=\"docutils literal\"><span class=\"pre\">'..'</span></tt>)are not, since this would change the meaning of a path in the face ofsymbolic links:</p><div class=\"highlight-python\"><div class=\"highlight\"><pre><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">PurePath</span><span class=\"p\">(</span><span class=\"s\">&#39;foo//bar&#39;</span><span class=\"p\">)</span><span class=\"go\">PurePosixPath(&#39;foo/bar&#39;)</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">PurePath</span><span class=\"p\">(</span><span class=\"s\">&#39;foo/./bar&#39;</span><span class=\"p\">)</span><span class=\"go\">PurePosixPath(&#39;foo/bar&#39;)</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">PurePath</span><span class=\"p\">(</span><span class=\"s\">&#39;foo/../bar&#39;</span><span class=\"p\">)</span><span class=\"go\">PurePosixPath(&#39;foo/../bar&#39;)</span></pre></div></div><p>(a na\u00efve approach would make <tt class=\"docutils literal\"><span class=\"pre\">PurePosixPath('foo/../bar')</span></tt> equivalentto <tt class=\"docutils literal\"><span class=\"pre\">PurePosixPath('bar')</span></tt>, which is wrong if <tt class=\"docutils literal\"><span class=\"pre\">foo</span></tt> is a symbolic linkto another directory)</p></dd></dl><dl class=\"class\"><dt id=\"pathlib.PurePosixPath\"><em class=\"property\">class </em><tt class=\"descclassname\">pathlib.</tt><tt class=\"descname\">PurePosixPath</tt><big>(</big><em>*pathsegments</em><big>)</big><a class=\"headerlink\" href=\"#pathlib.PurePosixPath\" title=\"Permalink to this definition\">\u00b6</a></dt><dd><p>A subclass of <a class=\"reference internal\" href=\"#pathlib.PurePath\" title=\"pathlib.PurePath\"><tt class=\"xref py py-class docutils literal\"><span class=\"pre\">PurePath</span></tt></a>, this path flavour represents non-Windowsfilesystem paths:</p><div class=\"highlight-python\"><div class=\"highlight\"><pre><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">PurePosixPath</span><span class=\"p\">(</span><span class=\"s\">&#39;/etc&#39;</span><span class=\"p\">)</span><span class=\"go\">PurePosixPath(&#39;/etc&#39;)</span></pre></div></div><p><em>pathsegments</em> is specified similarly to <a class=\"reference internal\" href=\"#pathlib.PurePath\" title=\"pathlib.PurePath\"><tt class=\"xref py py-class docutils literal\"><span class=\"pre\">PurePath</span></tt></a>.</p></dd></dl><dl class=\"class\"><dt id=\"pathlib.PureWindowsPath\"><em class=\"property\">class </em><tt class=\"descclassname\">pathlib.</tt><tt class=\"descname\">PureWindowsPath</tt><big>(</big><em>*pathsegments</em><big>)</big><a class=\"headerlink\" href=\"#pathlib.PureWindowsPath\" title=\"Permalink to this definition\">\u00b6</a></dt><dd><p>A subclass of <a class=\"reference internal\" href=\"#pathlib.PurePath\" title=\"pathlib.PurePath\"><tt class=\"xref py py-class docutils literal\"><span class=\"pre\">PurePath</span></tt></a>, this path flavour represents Windowsfilesystem paths:</p><div class=\"highlight-python\"><div class=\"highlight\"><pre><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">PureWindowsPath</span><span class=\"p\">(</span><span class=\"s\">&#39;c:/Program Files/&#39;</span><span class=\"p\">)</span><span class=\"go\">PureWindowsPath(&#39;c:/Program Files&#39;)</span></pre></div></div><p><em>pathsegments</em> is specified similarly to <a class=\"reference internal\" href=\"#pathlib.PurePath\" title=\"pathlib.PurePath\"><tt class=\"xref py py-class docutils literal\"><span class=\"pre\">PurePath</span></tt></a>.</p></dd></dl><p>Regardless of the system you&#8217;re running on, you can instantiate all ofthese classes, since they don&#8217;t provide any operation that does system calls.</p><div class=\"section\" id=\"general-properties\"><h3>General properties<a class=\"headerlink\" href=\"#general-properties\" title=\"Permalink to this headline\">\u00b6</a></h3><p>Paths are immutable and hashable.  Paths of a same flavour are comparableand orderable.  These properties respect the flavour&#8217;s case-foldingsemantics:</p><div class=\"highlight-python\"><div class=\"highlight\"><pre><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">PurePosixPath</span><span class=\"p\">(</span><span class=\"s\">&#39;foo&#39;</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"n\">PurePosixPath</span><span class=\"p\">(</span><span class=\"s\">&#39;FOO&#39;</span><span class=\"p\">)</span><span class=\"go\">False</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">PureWindowsPath</span><span class=\"p\">(</span><span class=\"s\">&#39;foo&#39;</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"n\">PureWindowsPath</span><span class=\"p\">(</span><span class=\"s\">&#39;FOO&#39;</span><span class=\"p\">)</span><span class=\"go\">True</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">PureWindowsPath</span><span class=\"p\">(</span><span class=\"s\">&#39;FOO&#39;</span><span class=\"p\">)</span> <span class=\"ow\">in</span> <span class=\"p\">{</span> <span class=\"n\">PureWindowsPath</span><span class=\"p\">(</span><span class=\"s\">&#39;foo&#39;</span><span class=\"p\">)</span> <span class=\"p\">}</span><span class=\"go\">True</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">PureWindowsPath</span><span class=\"p\">(</span><span class=\"s\">&#39;C:&#39;</span><span class=\"p\">)</span> <span class=\"o\">&lt;</span> <span class=\"n\">PureWindowsPath</span><span class=\"p\">(</span><span class=\"s\">&#39;d:&#39;</span><span class=\"p\">)</span><span class=\"go\">True</span></pre></div></div><p>Paths of a different flavour compare unequal and cannot be ordered:</p><div class=\"highlight-python\"><div class=\"highlight\"><pre><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">PureWindowsPath</span><span class=\"p\">(</span><span class=\"s\">&#39;foo&#39;</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"n\">PurePosixPath</span><span class=\"p\">(</span><span class=\"s\">&#39;foo&#39;</span><span class=\"p\">)</span><span class=\"go\">False</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">PureWindowsPath</span><span class=\"p\">(</span><span class=\"s\">&#39;foo&#39;</span><span class=\"p\">)</span> <span class=\"o\">&lt;</span> <span class=\"n\">PurePosixPath</span><span class=\"p\">(</span><span class=\"s\">&#39;foo&#39;</span><span class=\"p\">)</span><span class=\"gt\">Traceback (most recent call last):</span>  File <span class=\"nb\">&quot;&lt;stdin&gt;&quot;</span>, line <span class=\"m\">1</span>, in <span class=\"n\">&lt;module&gt;</span><span class=\"gr\">TypeError</span>: <span class=\"n\">unorderable types: PureWindowsPath() &lt; PurePosixPath()</span></pre></div></div></div><div class=\"section\" id=\"operators\"><h3>Operators<a class=\"headerlink\" href=\"#operators\" title=\"Permalink to this headline\">\u00b6</a></h3><p>The slash operator helps create child paths, similarly to <tt class=\"docutils literal\"><span class=\"pre\">os.path.join</span></tt>:</p><div class=\"highlight-python\"><div class=\"highlight\"><pre><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">PurePath</span><span class=\"p\">(</span><span class=\"s\">&#39;/etc&#39;</span><span class=\"p\">)</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">p</span><span class=\"go\">PurePosixPath(&#39;/etc&#39;)</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">p</span> <span class=\"o\">/</span> <span class=\"s\">&#39;init.d&#39;</span> <span class=\"o\">/</span> <span class=\"s\">&#39;apache2&#39;</span><span class=\"go\">PurePosixPath(&#39;/etc/init.d/apache2&#39;)</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">q</span> <span class=\"o\">=</span> <span class=\"n\">PurePath</span><span class=\"p\">(</span><span class=\"s\">&#39;bin&#39;</span><span class=\"p\">)</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"s\">&#39;/usr&#39;</span> <span class=\"o\">/</span> <span class=\"n\">q</span><span class=\"go\">PurePosixPath(&#39;/usr/bin&#39;)</span></pre></div></div><p>The string representation of a path is the raw filesystem path itself(in native form, e.g. with backslashes under Windows), which you canpass to any function taking a file path as a string:</p><div class=\"highlight-python\"><div class=\"highlight\"><pre><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">PurePath</span><span class=\"p\">(</span><span class=\"s\">&#39;/etc&#39;</span><span class=\"p\">)</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">)</span><span class=\"go\">&#39;/etc&#39;</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">PureWindowsPath</span><span class=\"p\">(</span><span class=\"s\">&#39;c:/Program Files&#39;</span><span class=\"p\">)</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">)</span><span class=\"go\">&#39;c:\\\\Program Files&#39;</span></pre></div></div><p>Similarly, calling <tt class=\"docutils literal\"><span class=\"pre\">bytes</span></tt> on a path gives the raw filesystem path as abytes object, as encoded by <tt class=\"docutils literal\"><span class=\"pre\">os.fsencode</span></tt>:</p><div class=\"highlight-python\"><div class=\"highlight\"><pre><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">bytes</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">)</span><span class=\"go\">b&#39;/etc&#39;</span></pre></div></div></div><div class=\"section\" id=\"accessing-individual-parts\"><h3>Accessing individual parts<a class=\"headerlink\" href=\"#accessing-individual-parts\" title=\"Permalink to this headline\">\u00b6</a></h3><p>To access the individual &#8220;parts&#8221; (components) of a path, use the followingproperty:</p><dl class=\"data\"><dt id=\"pathlib.PurePath.parts\"><tt class=\"descclassname\">PurePath.</tt><tt class=\"descname\">parts</tt><a class=\"headerlink\" href=\"#pathlib.PurePath.parts\" title=\"Permalink to this definition\">\u00b6</a></dt><dd><p>A tuple giving access to the path&#8217;s various components:</p><div class=\"highlight-python\"><div class=\"highlight\"><pre><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">PurePath</span><span class=\"p\">(</span><span class=\"s\">&#39;/usr/bin/python3&#39;</span><span class=\"p\">)</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">parts</span><span class=\"go\">(&#39;/&#39;, &#39;usr&#39;, &#39;bin&#39;, &#39;python3&#39;)</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">PureWindowsPath</span><span class=\"p\">(</span><span class=\"s\">&#39;c:/Program Files/PSF&#39;</span><span class=\"p\">)</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">parts</span><span class=\"go\">(&#39;c:\\\\&#39;, &#39;Program Files&#39;, &#39;PSF&#39;)</span></pre></div></div><p>(note how the drive and local root are regrouped in a single part)</p></dd></dl></div><div class=\"section\" id=\"methods-and-properties\"><h3>Methods and properties<a class=\"headerlink\" href=\"#methods-and-properties\" title=\"Permalink to this headline\">\u00b6</a></h3><p>Pure paths provide the following methods and properties:</p><dl class=\"data\"><dt id=\"pathlib.PurePath.drive\"><tt class=\"descclassname\">PurePath.</tt><tt class=\"descname\">drive</tt><a class=\"headerlink\" href=\"#pathlib.PurePath.drive\" title=\"Permalink to this definition\">\u00b6</a></dt><dd><p>A string representing the drive letter or name, if any:</p><div class=\"highlight-python\"><div class=\"highlight\"><pre><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">PureWindowsPath</span><span class=\"p\">(</span><span class=\"s\">&#39;c:/Program Files/&#39;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">drive</span><span class=\"go\">&#39;c:&#39;</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">PureWindowsPath</span><span class=\"p\">(</span><span class=\"s\">&#39;/Program Files/&#39;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">drive</span><span class=\"go\">&#39;&#39;</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">PurePosixPath</span><span class=\"p\">(</span><span class=\"s\">&#39;/etc&#39;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">drive</span><span class=\"go\">&#39;&#39;</span></pre></div></div><p>UNC shares are also considered drives:</p><div class=\"highlight-python\"><div class=\"highlight\"><pre><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">PureWindowsPath</span><span class=\"p\">(</span><span class=\"s\">&#39;//host/share/foo.txt&#39;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">drive</span><span class=\"go\">&#39;\\\\\\\\host\\\\share&#39;</span></pre></div></div></dd></dl><dl class=\"data\"><dt id=\"pathlib.PurePath.root\"><tt class=\"descclassname\">PurePath.</tt><tt class=\"descname\">root</tt><a class=\"headerlink\" href=\"#pathlib.PurePath.root\" title=\"Permalink to this definition\">\u00b6</a></dt><dd><p>A string representing the (local or global) root, if any:</p><div class=\"highlight-python\"><div class=\"highlight\"><pre><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">PureWindowsPath</span><span class=\"p\">(</span><span class=\"s\">&#39;c:/Program Files/&#39;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">root</span><span class=\"go\">&#39;\\\\&#39;</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">PureWindowsPath</span><span class=\"p\">(</span><span class=\"s\">&#39;c:Program Files/&#39;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">root</span><span class=\"go\">&#39;&#39;</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">PurePosixPath</span><span class=\"p\">(</span><span class=\"s\">&#39;/etc&#39;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">root</span><span class=\"go\">&#39;/&#39;</span></pre></div></div><p>UNC shares always have a root:</p><div class=\"highlight-python\"><div class=\"highlight\"><pre><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">PureWindowsPath</span><span class=\"p\">(</span><span class=\"s\">&#39;//host/share&#39;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">root</span><span class=\"go\">&#39;\\\\&#39;</span></pre></div></div></dd></dl><dl class=\"data\"><dt id=\"pathlib.PurePath.anchor\"><tt class=\"descclassname\">PurePath.</tt><tt class=\"descname\">anchor</tt><a class=\"headerlink\" href=\"#pathlib.PurePath.anchor\" title=\"Permalink to this definition\">\u00b6</a></dt><dd><p>The concatenation of the drive and root:</p><div class=\"highlight-python\"><div class=\"highlight\"><pre><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">PureWindowsPath</span><span class=\"p\">(</span><span class=\"s\">&#39;c:/Program Files/&#39;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">anchor</span><span class=\"go\">&#39;c:\\\\&#39;</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">PureWindowsPath</span><span class=\"p\">(</span><span class=\"s\">&#39;c:Program Files/&#39;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">anchor</span><span class=\"go\">&#39;c:&#39;</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">PurePosixPath</span><span class=\"p\">(</span><span class=\"s\">&#39;/etc&#39;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">anchor</span><span class=\"go\">&#39;/&#39;</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">PureWindowsPath</span><span class=\"p\">(</span><span class=\"s\">&#39;//host/share&#39;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">anchor</span><span class=\"go\">&#39;\\\\\\\\host\\\\share\\\\&#39;</span></pre></div></div></dd></dl><dl class=\"data\"><dt id=\"pathlib.PurePath.parents\"><tt class=\"descclassname\">PurePath.</tt><tt class=\"descname\">parents</tt><a class=\"headerlink\" href=\"#pathlib.PurePath.parents\" title=\"Permalink to this definition\">\u00b6</a></dt><dd><p>An immutable sequence providing access to the logical ancestors ofthe path:</p><div class=\"highlight-python\"><div class=\"highlight\"><pre><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">PureWindowsPath</span><span class=\"p\">(</span><span class=\"s\">&#39;c:/foo/bar/setup.py&#39;</span><span class=\"p\">)</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">parents</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"go\">PureWindowsPath(&#39;c:/foo/bar&#39;)</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">parents</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"go\">PureWindowsPath(&#39;c:/foo&#39;)</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">parents</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span><span class=\"go\">PureWindowsPath(&#39;c:/&#39;)</span></pre></div></div></dd></dl><dl class=\"data\"><dt id=\"pathlib.PurePath.parent\"><tt class=\"descclassname\">PurePath.</tt><tt class=\"descname\">parent</tt><a class=\"headerlink\" href=\"#pathlib.PurePath.parent\" title=\"Permalink to this definition\">\u00b6</a></dt><dd><p>The logical parent of the path:</p><div class=\"highlight-python\"><div class=\"highlight\"><pre><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">PurePosixPath</span><span class=\"p\">(</span><span class=\"s\">&#39;/a/b/c/d&#39;</span><span class=\"p\">)</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">parent</span><span class=\"go\">PurePosixPath(&#39;/a/b/c&#39;)</span></pre></div></div><p>You cannot go past an anchor, or empty path:</p><div class=\"highlight-python\"><div class=\"highlight\"><pre><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">PurePosixPath</span><span class=\"p\">(</span><span class=\"s\">&#39;/&#39;</span><span class=\"p\">)</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">parent</span><span class=\"go\">PurePosixPath(&#39;/&#39;)</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">PurePosixPath</span><span class=\"p\">(</span><span class=\"s\">&#39;.&#39;</span><span class=\"p\">)</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">parent</span><span class=\"go\">PurePosixPath(&#39;.&#39;)</span></pre></div></div><div class=\"admonition note\"><p class=\"first admonition-title\">Note</p><p>This is a purely lexical operation, hence the following behaviour:</p><div class=\"highlight-python\"><div class=\"highlight\"><pre><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">PurePosixPath</span><span class=\"p\">(</span><span class=\"s\">&#39;foo/..&#39;</span><span class=\"p\">)</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">parent</span><span class=\"go\">PurePosixPath(&#39;foo&#39;)</span></pre></div></div><p class=\"last\">If you want to walk an arbitrary filesystem path upwards, it isrecommended to first call <a class=\"reference internal\" href=\"#pathlib.Path.resolve\" title=\"pathlib.Path.resolve\"><tt class=\"xref py py-meth docutils literal\"><span class=\"pre\">Path.resolve()</span></tt></a> so as to resolvesymlinks and eliminate <cite>&#8221;..&#8221;</cite> components.</p></div></dd></dl><dl class=\"data\"><dt id=\"pathlib.PurePath.name\"><tt class=\"descclassname\">PurePath.</tt><tt class=\"descname\">name</tt><a class=\"headerlink\" href=\"#pathlib.PurePath.name\" title=\"Permalink to this definition\">\u00b6</a></dt><dd><p>A string representing the final path component, excluding the drive androot, if any:</p><div class=\"highlight-python\"><div class=\"highlight\"><pre><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">PurePosixPath</span><span class=\"p\">(</span><span class=\"s\">&#39;my/library/setup.py&#39;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"go\">&#39;setup.py&#39;</span></pre></div></div><p>UNC drive names are not considered:</p><div class=\"highlight-python\"><div class=\"highlight\"><pre><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">PureWindowsPath</span><span class=\"p\">(</span><span class=\"s\">&#39;//some/share/setup.py&#39;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"go\">&#39;setup.py&#39;</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">PureWindowsPath</span><span class=\"p\">(</span><span class=\"s\">&#39;//some/share&#39;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"go\">&#39;&#39;</span></pre></div></div></dd></dl><dl class=\"data\"><dt id=\"pathlib.PurePath.suffix\"><tt class=\"descclassname\">PurePath.</tt><tt class=\"descname\">suffix</tt><a class=\"headerlink\" href=\"#pathlib.PurePath.suffix\" title=\"Permalink to this definition\">\u00b6</a></dt><dd><p>The file extension of the final component, if any:</p><div class=\"highlight-python\"><div class=\"highlight\"><pre><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">PurePosixPath</span><span class=\"p\">(</span><span class=\"s\">&#39;my/library/setup.py&#39;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">suffix</span><span class=\"go\">&#39;.py&#39;</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">PurePosixPath</span><span class=\"p\">(</span><span class=\"s\">&#39;my/library.tar.gz&#39;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">suffix</span><span class=\"go\">&#39;.gz&#39;</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">PurePosixPath</span><span class=\"p\">(</span><span class=\"s\">&#39;my/library&#39;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">suffix</span><span class=\"go\">&#39;&#39;</span></pre></div></div></dd></dl><dl class=\"data\"><dt id=\"pathlib.PurePath.suffixes\"><tt class=\"descclassname\">PurePath.</tt><tt class=\"descname\">suffixes</tt><a class=\"headerlink\" href=\"#pathlib.PurePath.suffixes\" title=\"Permalink to this definition\">\u00b6</a></dt><dd><p>A list of the path&#8217;s file extensions:</p><div class=\"highlight-python\"><div class=\"highlight\"><pre><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">PurePosixPath</span><span class=\"p\">(</span><span class=\"s\">&#39;my/library.tar.gar&#39;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">suffixes</span><span class=\"go\">[&#39;.tar&#39;, &#39;.gar&#39;]</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">PurePosixPath</span><span class=\"p\">(</span><span class=\"s\">&#39;my/library.tar.gz&#39;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">suffixes</span><span class=\"go\">[&#39;.tar&#39;, &#39;.gz&#39;]</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">PurePosixPath</span><span class=\"p\">(</span><span class=\"s\">&#39;my/library&#39;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">suffixes</span><span class=\"go\">[]</span></pre></div></div></dd></dl><dl class=\"data\"><dt id=\"pathlib.PurePath.stem\"><tt class=\"descclassname\">PurePath.</tt><tt class=\"descname\">stem</tt><a class=\"headerlink\" href=\"#pathlib.PurePath.stem\" title=\"Permalink to this definition\">\u00b6</a></dt><dd><p>The final path component, without its suffix:</p><div class=\"highlight-python\"><div class=\"highlight\"><pre><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">PurePosixPath</span><span class=\"p\">(</span><span class=\"s\">&#39;my/library.tar.gz&#39;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">stem</span><span class=\"go\">&#39;library.tar&#39;</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">PurePosixPath</span><span class=\"p\">(</span><span class=\"s\">&#39;my/library.tar&#39;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">stem</span><span class=\"go\">&#39;library&#39;</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">PurePosixPath</span><span class=\"p\">(</span><span class=\"s\">&#39;my/library&#39;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">stem</span><span class=\"go\">&#39;library&#39;</span></pre></div></div></dd></dl><dl class=\"method\"><dt id=\"pathlib.PurePath.as_posix\"><tt class=\"descclassname\">PurePath.</tt><tt class=\"descname\">as_posix</tt><big>(</big><big>)</big><a class=\"headerlink\" href=\"#pathlib.PurePath.as_posix\" title=\"Permalink to this definition\">\u00b6</a></dt><dd><p>Return a string representation of the path with forward slashes (<tt class=\"docutils literal\"><span class=\"pre\">/</span></tt>):</p><div class=\"highlight-python\"><div class=\"highlight\"><pre><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">PureWindowsPath</span><span class=\"p\">(</span><span class=\"s\">&#39;c:</span><span class=\"se\">\\\\</span><span class=\"s\">windows&#39;</span><span class=\"p\">)</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">)</span><span class=\"go\">&#39;c:\\\\windows&#39;</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">as_posix</span><span class=\"p\">()</span><span class=\"go\">&#39;c:/windows&#39;</span></pre></div></div></dd></dl><dl class=\"method\"><dt id=\"pathlib.PurePath.as_uri\"><tt class=\"descclassname\">PurePath.</tt><tt class=\"descname\">as_uri</tt><big>(</big><big>)</big><a class=\"headerlink\" href=\"#pathlib.PurePath.as_uri\" title=\"Permalink to this definition\">\u00b6</a></dt><dd><p>Represent the path as a <tt class=\"docutils literal\"><span class=\"pre\">file</span></tt> URI.  <tt class=\"xref py py-exc docutils literal\"><span class=\"pre\">ValueError</span></tt> is raised ifthe path isn&#8217;t absolute.</p><div class=\"highlight-python\"><div class=\"highlight\"><pre><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">PurePosixPath</span><span class=\"p\">(</span><span class=\"s\">&#39;/etc/passwd&#39;</span><span class=\"p\">)</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">as_uri</span><span class=\"p\">()</span><span class=\"go\">&#39;file:///etc/passwd&#39;</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">PureWindowsPath</span><span class=\"p\">(</span><span class=\"s\">&#39;c:/Windows&#39;</span><span class=\"p\">)</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">as_uri</span><span class=\"p\">()</span><span class=\"go\">&#39;file:///c:/Windows&#39;</span></pre></div></div></dd></dl><dl class=\"method\"><dt id=\"pathlib.PurePath.is_absolute\"><tt class=\"descclassname\">PurePath.</tt><tt class=\"descname\">is_absolute</tt><big>(</big><big>)</big><a class=\"headerlink\" href=\"#pathlib.PurePath.is_absolute\" title=\"Permalink to this definition\">\u00b6</a></dt><dd><p>Return whether the path is absolute or not.  A path is considered absoluteif it has both a root and (if the flavour allows) a drive:</p><div class=\"highlight-python\"><div class=\"highlight\"><pre><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">PurePosixPath</span><span class=\"p\">(</span><span class=\"s\">&#39;/a/b&#39;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">is_absolute</span><span class=\"p\">()</span><span class=\"go\">True</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">PurePosixPath</span><span class=\"p\">(</span><span class=\"s\">&#39;a/b&#39;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">is_absolute</span><span class=\"p\">()</span><span class=\"go\">False</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">PureWindowsPath</span><span class=\"p\">(</span><span class=\"s\">&#39;c:/a/b&#39;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">is_absolute</span><span class=\"p\">()</span><span class=\"go\">True</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">PureWindowsPath</span><span class=\"p\">(</span><span class=\"s\">&#39;/a/b&#39;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">is_absolute</span><span class=\"p\">()</span><span class=\"go\">False</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">PureWindowsPath</span><span class=\"p\">(</span><span class=\"s\">&#39;c:&#39;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">is_absolute</span><span class=\"p\">()</span><span class=\"go\">False</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">PureWindowsPath</span><span class=\"p\">(</span><span class=\"s\">&#39;//some/share&#39;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">is_absolute</span><span class=\"p\">()</span><span class=\"go\">True</span></pre></div></div></dd></dl><dl class=\"method\"><dt id=\"pathlib.PurePath.is_reserved\"><tt class=\"descclassname\">PurePath.</tt><tt class=\"descname\">is_reserved</tt><big>(</big><big>)</big><a class=\"headerlink\" href=\"#pathlib.PurePath.is_reserved\" title=\"Permalink to this definition\">\u00b6</a></dt><dd><p>With <a class=\"reference internal\" href=\"#pathlib.PureWindowsPath\" title=\"pathlib.PureWindowsPath\"><tt class=\"xref py py-class docutils literal\"><span class=\"pre\">PureWindowsPath</span></tt></a>, return <tt class=\"docutils literal\"><span class=\"pre\">True</span></tt> if the path is consideredreserved under Windows, <tt class=\"docutils literal\"><span class=\"pre\">False</span></tt> otherwise.  With <a class=\"reference internal\" href=\"#pathlib.PurePosixPath\" title=\"pathlib.PurePosixPath\"><tt class=\"xref py py-class docutils literal\"><span class=\"pre\">PurePosixPath</span></tt></a>,<tt class=\"docutils literal\"><span class=\"pre\">False</span></tt> is always returned.</p><div class=\"highlight-python\"><div class=\"highlight\"><pre><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">PureWindowsPath</span><span class=\"p\">(</span><span class=\"s\">&#39;nul&#39;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">is_reserved</span><span class=\"p\">()</span><span class=\"go\">True</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">PurePosixPath</span><span class=\"p\">(</span><span class=\"s\">&#39;nul&#39;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">is_reserved</span><span class=\"p\">()</span><span class=\"go\">False</span></pre></div></div><p>File system calls on reserved paths can fail mysteriously or haveunintended effects.</p></dd></dl><dl class=\"method\"><dt id=\"pathlib.PurePath.joinpath\"><tt class=\"descclassname\">PurePath.</tt><tt class=\"descname\">joinpath</tt><big>(</big><em>*other</em><big>)</big><a class=\"headerlink\" href=\"#pathlib.PurePath.joinpath\" title=\"Permalink to this definition\">\u00b6</a></dt><dd><p>Calling this method is equivalent to combining the path with each ofthe <em>other</em> arguments in turn:</p><div class=\"highlight-python\"><div class=\"highlight\"><pre><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">PurePosixPath</span><span class=\"p\">(</span><span class=\"s\">&#39;/etc&#39;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">joinpath</span><span class=\"p\">(</span><span class=\"s\">&#39;passwd&#39;</span><span class=\"p\">)</span><span class=\"go\">PurePosixPath(&#39;/etc/passwd&#39;)</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">PurePosixPath</span><span class=\"p\">(</span><span class=\"s\">&#39;/etc&#39;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">joinpath</span><span class=\"p\">(</span><span class=\"n\">PurePosixPath</span><span class=\"p\">(</span><span class=\"s\">&#39;passwd&#39;</span><span class=\"p\">))</span><span class=\"go\">PurePosixPath(&#39;/etc/passwd&#39;)</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">PurePosixPath</span><span class=\"p\">(</span><span class=\"s\">&#39;/etc&#39;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">joinpath</span><span class=\"p\">(</span><span class=\"s\">&#39;init.d&#39;</span><span class=\"p\">,</span> <span class=\"s\">&#39;apache2&#39;</span><span class=\"p\">)</span><span class=\"go\">PurePosixPath(&#39;/etc/init.d/apache2&#39;)</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">PureWindowsPath</span><span class=\"p\">(</span><span class=\"s\">&#39;c:&#39;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">joinpath</span><span class=\"p\">(</span><span class=\"s\">&#39;/Program Files&#39;</span><span class=\"p\">)</span><span class=\"go\">PureWindowsPath(&#39;c:/Program Files&#39;)</span></pre></div></div></dd></dl><dl class=\"method\"><dt id=\"pathlib.PurePath.match\"><tt class=\"descclassname\">PurePath.</tt><tt class=\"descname\">match</tt><big>(</big><em>pattern</em><big>)</big><a class=\"headerlink\" href=\"#pathlib.PurePath.match\" title=\"Permalink to this definition\">\u00b6</a></dt><dd><p>Match this path against the provided glob-style pattern.  Return <tt class=\"docutils literal\"><span class=\"pre\">True</span></tt>if matching is successful, <tt class=\"docutils literal\"><span class=\"pre\">False</span></tt> otherwise.</p><p>If <em>pattern</em> is relative, the path can be either relative or absolute,and matching is done from the right:</p><div class=\"highlight-python\"><div class=\"highlight\"><pre><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">PurePath</span><span class=\"p\">(</span><span class=\"s\">&#39;a/b.py&#39;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">match</span><span class=\"p\">(</span><span class=\"s\">&#39;*.py&#39;</span><span class=\"p\">)</span><span class=\"go\">True</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">PurePath</span><span class=\"p\">(</span><span class=\"s\">&#39;/a/b/c.py&#39;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">match</span><span class=\"p\">(</span><span class=\"s\">&#39;b/*.py&#39;</span><span class=\"p\">)</span><span class=\"go\">True</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">PurePath</span><span class=\"p\">(</span><span class=\"s\">&#39;/a/b/c.py&#39;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">match</span><span class=\"p\">(</span><span class=\"s\">&#39;a/*.py&#39;</span><span class=\"p\">)</span><span class=\"go\">False</span></pre></div></div><p>If <em>pattern</em> is absolute, the path must be absolute, and the whole pathmust match:</p><div class=\"highlight-python\"><div class=\"highlight\"><pre><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">PurePath</span><span class=\"p\">(</span><span class=\"s\">&#39;/a.py&#39;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">match</span><span class=\"p\">(</span><span class=\"s\">&#39;/*.py&#39;</span><span class=\"p\">)</span><span class=\"go\">True</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">PurePath</span><span class=\"p\">(</span><span class=\"s\">&#39;a/b.py&#39;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">match</span><span class=\"p\">(</span><span class=\"s\">&#39;/*.py&#39;</span><span class=\"p\">)</span><span class=\"go\">False</span></pre></div></div><p>As with other methods, case-sensitivity is observed:</p><div class=\"highlight-python\"><div class=\"highlight\"><pre><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">PureWindowsPath</span><span class=\"p\">(</span><span class=\"s\">&#39;b.py&#39;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">match</span><span class=\"p\">(</span><span class=\"s\">&#39;*.PY&#39;</span><span class=\"p\">)</span><span class=\"go\">True</span></pre></div></div></dd></dl><dl class=\"method\"><dt id=\"pathlib.PurePath.relative_to\"><tt class=\"descclassname\">PurePath.</tt><tt class=\"descname\">relative_to</tt><big>(</big><em>*other</em><big>)</big><a class=\"headerlink\" href=\"#pathlib.PurePath.relative_to\" title=\"Permalink to this definition\">\u00b6</a></dt><dd><p>Compute a version of this path relative to the path represented by<em>other</em>.  If it&#8217;s impossible, ValueError is raised:</p><div class=\"highlight-python\"><div class=\"highlight\"><pre><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">PurePosixPath</span><span class=\"p\">(</span><span class=\"s\">&#39;/etc/passwd&#39;</span><span class=\"p\">)</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">relative_to</span><span class=\"p\">(</span><span class=\"s\">&#39;/&#39;</span><span class=\"p\">)</span><span class=\"go\">PurePosixPath(&#39;etc/passwd&#39;)</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">relative_to</span><span class=\"p\">(</span><span class=\"s\">&#39;/etc&#39;</span><span class=\"p\">)</span><span class=\"go\">PurePosixPath(&#39;passwd&#39;)</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">relative_to</span><span class=\"p\">(</span><span class=\"s\">&#39;/usr&#39;</span><span class=\"p\">)</span><span class=\"gt\">Traceback (most recent call last):</span>  File <span class=\"nb\">&quot;&lt;stdin&gt;&quot;</span>, line <span class=\"m\">1</span>, in <span class=\"n\">&lt;module&gt;</span>  File <span class=\"nb\">&quot;pathlib.py&quot;</span>, line <span class=\"m\">694</span>, in <span class=\"n\">relative_to</span>    <span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">),</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">formatted</span><span class=\"p\">)))</span><span class=\"gr\">ValueError</span>: <span class=\"n\">&#39;/etc/passwd&#39; does not start with &#39;/usr&#39;</span></pre></div></div></dd></dl><dl class=\"method\"><dt id=\"pathlib.PurePath.with_name\"><tt class=\"descclassname\">PurePath.</tt><tt class=\"descname\">with_name</tt><big>(</big><em>name</em><big>)</big><a class=\"headerlink\" href=\"#pathlib.PurePath.with_name\" title=\"Permalink to this definition\">\u00b6</a></dt><dd><p>Return a new path with the <a class=\"reference internal\" href=\"#pathlib.PurePath.name\" title=\"pathlib.PurePath.name\"><tt class=\"xref py py-attr docutils literal\"><span class=\"pre\">name</span></tt></a> changed.  If the original pathdoesn&#8217;t have a name, ValueError is raised:</p><div class=\"highlight-python\"><div class=\"highlight\"><pre><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">PureWindowsPath</span><span class=\"p\">(</span><span class=\"s\">&#39;c:/Downloads/pathlib.tar.gz&#39;</span><span class=\"p\">)</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">with_name</span><span class=\"p\">(</span><span class=\"s\">&#39;setup.py&#39;</span><span class=\"p\">)</span><span class=\"go\">PureWindowsPath(&#39;c:/Downloads/setup.py&#39;)</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">PureWindowsPath</span><span class=\"p\">(</span><span class=\"s\">&#39;c:/&#39;</span><span class=\"p\">)</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">with_name</span><span class=\"p\">(</span><span class=\"s\">&#39;setup.py&#39;</span><span class=\"p\">)</span><span class=\"gt\">Traceback (most recent call last):</span>  File <span class=\"nb\">&quot;&lt;stdin&gt;&quot;</span>, line <span class=\"m\">1</span>, in <span class=\"n\">&lt;module&gt;</span>  File <span class=\"nb\">&quot;/home/antoine/cpython/default/Lib/pathlib.py&quot;</span>, line <span class=\"m\">751</span>, in <span class=\"n\">with_name</span>    <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span><span class=\"s\">&quot;</span><span class=\"si\">%r</span><span class=\"s\"> has an empty name&quot;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,))</span><span class=\"gr\">ValueError</span>: <span class=\"n\">PureWindowsPath(&#39;c:/&#39;) has an empty name</span></pre></div></div></dd></dl><dl class=\"method\"><dt id=\"pathlib.PurePath.with_suffix\"><tt class=\"descclassname\">PurePath.</tt><tt class=\"descname\">with_suffix</tt><big>(</big><em>suffix</em><big>)</big><a class=\"headerlink\" href=\"#pathlib.PurePath.with_suffix\" title=\"Permalink to this definition\">\u00b6</a></dt><dd><p>Return a new path with the <a class=\"reference internal\" href=\"#pathlib.PurePath.suffix\" title=\"pathlib.PurePath.suffix\"><tt class=\"xref py py-attr docutils literal\"><span class=\"pre\">suffix</span></tt></a> changed.  If the original pathdoesn&#8217;t have a suffix, the new <em>suffix</em> is appended instead:</p><div class=\"highlight-python\"><div class=\"highlight\"><pre><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">PureWindowsPath</span><span class=\"p\">(</span><span class=\"s\">&#39;c:/Downloads/pathlib.tar.gz&#39;</span><span class=\"p\">)</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">with_suffix</span><span class=\"p\">(</span><span class=\"s\">&#39;.bz2&#39;</span><span class=\"p\">)</span><span class=\"go\">PureWindowsPath(&#39;c:/Downloads/pathlib.tar.bz2&#39;)</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">PureWindowsPath</span><span class=\"p\">(</span><span class=\"s\">&#39;README&#39;</span><span class=\"p\">)</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">with_suffix</span><span class=\"p\">(</span><span class=\"s\">&#39;.txt&#39;</span><span class=\"p\">)</span><span class=\"go\">PureWindowsPath(&#39;README.txt&#39;)</span></pre></div></div></dd></dl></div></div><div class=\"section\" id=\"concrete-paths\"><span id=\"id2\"></span><h2>Concrete paths<a class=\"headerlink\" href=\"#concrete-paths\" title=\"Permalink to this headline\">\u00b6</a></h2><p>Concrete paths are subclasses of the pure path classes.  In addition tooperations provided by the latter, they also provide methods to do systemcalls on path objects.  There are three ways to instantiate concrete paths:</p><dl class=\"class\"><dt id=\"pathlib.Path\"><em class=\"property\">class </em><tt class=\"descclassname\">pathlib.</tt><tt class=\"descname\">Path</tt><big>(</big><em>*pathsegments</em><big>)</big><a class=\"headerlink\" href=\"#pathlib.Path\" title=\"Permalink to this definition\">\u00b6</a></dt><dd><p>A subclass of <a class=\"reference internal\" href=\"#pathlib.PurePath\" title=\"pathlib.PurePath\"><tt class=\"xref py py-class docutils literal\"><span class=\"pre\">PurePath</span></tt></a>, this class represents concrete paths ofthe system&#8217;s path flavour (instantiating it creates either a<a class=\"reference internal\" href=\"#pathlib.PosixPath\" title=\"pathlib.PosixPath\"><tt class=\"xref py py-class docutils literal\"><span class=\"pre\">PosixPath</span></tt></a> or a <a class=\"reference internal\" href=\"#pathlib.WindowsPath\" title=\"pathlib.WindowsPath\"><tt class=\"xref py py-class docutils literal\"><span class=\"pre\">WindowsPath</span></tt></a>):</p><div class=\"highlight-python\"><div class=\"highlight\"><pre><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Path</span><span class=\"p\">(</span><span class=\"s\">&#39;setup.py&#39;</span><span class=\"p\">)</span><span class=\"go\">PosixPath(&#39;setup.py&#39;)</span></pre></div></div><p><em>pathsegments</em> is specified similarly to <a class=\"reference internal\" href=\"#pathlib.PurePath\" title=\"pathlib.PurePath\"><tt class=\"xref py py-class docutils literal\"><span class=\"pre\">PurePath</span></tt></a>.</p></dd></dl><dl class=\"class\"><dt id=\"pathlib.PosixPath\"><em class=\"property\">class </em><tt class=\"descclassname\">pathlib.</tt><tt class=\"descname\">PosixPath</tt><big>(</big><em>*pathsegments</em><big>)</big><a class=\"headerlink\" href=\"#pathlib.PosixPath\" title=\"Permalink to this definition\">\u00b6</a></dt><dd><p>A subclass of <a class=\"reference internal\" href=\"#pathlib.Path\" title=\"pathlib.Path\"><tt class=\"xref py py-class docutils literal\"><span class=\"pre\">Path</span></tt></a> and <a class=\"reference internal\" href=\"#pathlib.PurePosixPath\" title=\"pathlib.PurePosixPath\"><tt class=\"xref py py-class docutils literal\"><span class=\"pre\">PurePosixPath</span></tt></a>, this classrepresents concrete non-Windows filesystem paths:</p><div class=\"highlight-python\"><div class=\"highlight\"><pre><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">PosixPath</span><span class=\"p\">(</span><span class=\"s\">&#39;/etc&#39;</span><span class=\"p\">)</span><span class=\"go\">PosixPath(&#39;/etc&#39;)</span></pre></div></div><p><em>pathsegments</em> is specified similarly to <a class=\"reference internal\" href=\"#pathlib.PurePath\" title=\"pathlib.PurePath\"><tt class=\"xref py py-class docutils literal\"><span class=\"pre\">PurePath</span></tt></a>.</p></dd></dl><dl class=\"class\"><dt id=\"pathlib.WindowsPath\"><em class=\"property\">class </em><tt class=\"descclassname\">pathlib.</tt><tt class=\"descname\">WindowsPath</tt><big>(</big><em>*pathsegments</em><big>)</big><a class=\"headerlink\" href=\"#pathlib.WindowsPath\" title=\"Permalink to this definition\">\u00b6</a></dt><dd><p>A subclass of <a class=\"reference internal\" href=\"#pathlib.Path\" title=\"pathlib.Path\"><tt class=\"xref py py-class docutils literal\"><span class=\"pre\">Path</span></tt></a> and <a class=\"reference internal\" href=\"#pathlib.PureWindowsPath\" title=\"pathlib.PureWindowsPath\"><tt class=\"xref py py-class docutils literal\"><span class=\"pre\">PureWindowsPath</span></tt></a>, this classrepresents concrete Windows filesystem paths:</p><div class=\"highlight-python\"><div class=\"highlight\"><pre><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">WindowsPath</span><span class=\"p\">(</span><span class=\"s\">&#39;c:/Program Files/&#39;</span><span class=\"p\">)</span><span class=\"go\">WindowsPath(&#39;c:/Program Files&#39;)</span></pre></div></div><p><em>pathsegments</em> is specified similarly to <a class=\"reference internal\" href=\"#pathlib.PurePath\" title=\"pathlib.PurePath\"><tt class=\"xref py py-class docutils literal\"><span class=\"pre\">PurePath</span></tt></a>.</p></dd></dl><p>You can only instantiate the class flavour that corresponds to your system(allowing system calls on non-compatible path flavours could lead tobugs or failures in your application):</p><div class=\"highlight-python\"><div class=\"highlight\"><pre><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">os</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"go\">&#39;posix&#39;</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Path</span><span class=\"p\">(</span><span class=\"s\">&#39;setup.py&#39;</span><span class=\"p\">)</span><span class=\"go\">PosixPath(&#39;setup.py&#39;)</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">PosixPath</span><span class=\"p\">(</span><span class=\"s\">&#39;setup.py&#39;</span><span class=\"p\">)</span><span class=\"go\">PosixPath(&#39;setup.py&#39;)</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">WindowsPath</span><span class=\"p\">(</span><span class=\"s\">&#39;setup.py&#39;</span><span class=\"p\">)</span><span class=\"gt\">Traceback (most recent call last):</span>  File <span class=\"nb\">&quot;&lt;stdin&gt;&quot;</span>, line <span class=\"m\">1</span>, in <span class=\"n\">&lt;module&gt;</span>  File <span class=\"nb\">&quot;pathlib.py&quot;</span>, line <span class=\"m\">798</span>, in <span class=\"n\">__new__</span>    <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">cls</span><span class=\"o\">.</span><span class=\"n\">__name__</span><span class=\"p\">,))</span><span class=\"gr\">NotImplementedError</span>: <span class=\"n\">cannot instantiate &#39;WindowsPath&#39; on your system</span></pre></div></div><div class=\"section\" id=\"methods\"><h3>Methods<a class=\"headerlink\" href=\"#methods\" title=\"Permalink to this headline\">\u00b6</a></h3><p>Concrete paths provide the following methods in addition to pure pathsmethods.  Many of these methods can raise an <tt class=\"xref py py-exc docutils literal\"><span class=\"pre\">OSError</span></tt> if a systemcall fails (for example because the path doesn&#8217;t exist):</p><dl class=\"classmethod\"><dt id=\"pathlib.Path.cwd\"><em class=\"property\">classmethod </em><tt class=\"descclassname\">Path.</tt><tt class=\"descname\">cwd</tt><big>(</big><big>)</big><a class=\"headerlink\" href=\"#pathlib.Path.cwd\" title=\"Permalink to this definition\">\u00b6</a></dt><dd><p>Return a new path object representing the current directory (as returnedby <tt class=\"xref py py-func docutils literal\"><span class=\"pre\">os.getcwd()</span></tt>):</p><div class=\"highlight-python\"><div class=\"highlight\"><pre><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Path</span><span class=\"o\">.</span><span class=\"n\">cwd</span><span class=\"p\">()</span><span class=\"go\">PosixPath(&#39;/home/antoine/pathlib&#39;)</span></pre></div></div></dd></dl><dl class=\"method\"><dt id=\"pathlib.Path.stat\"><tt class=\"descclassname\">Path.</tt><tt class=\"descname\">stat</tt><big>(</big><big>)</big><a class=\"headerlink\" href=\"#pathlib.Path.stat\" title=\"Permalink to this definition\">\u00b6</a></dt><dd><p>Return information about this path (similarly to <tt class=\"xref py py-func docutils literal\"><span class=\"pre\">os.stat()</span></tt>).The result is looked up at each call to this method.</p><div class=\"highlight-python\"><div class=\"highlight\"><pre><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">Path</span><span class=\"p\">(</span><span class=\"s\">&#39;setup.py&#39;</span><span class=\"p\">)</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">stat</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">st_size</span><span class=\"go\">956</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">stat</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">st_mtime</span><span class=\"go\">1327883547.852554</span></pre></div></div></dd></dl><dl class=\"method\"><dt id=\"pathlib.Path.chmod\"><tt class=\"descclassname\">Path.</tt><tt class=\"descname\">chmod</tt><big>(</big><em>mode</em><big>)</big><a class=\"headerlink\" href=\"#pathlib.Path.chmod\" title=\"Permalink to this definition\">\u00b6</a></dt><dd><p>Change the file mode and permissions, like <tt class=\"xref py py-func docutils literal\"><span class=\"pre\">os.chmod()</span></tt>:</p><div class=\"highlight-python\"><div class=\"highlight\"><pre><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">Path</span><span class=\"p\">(</span><span class=\"s\">&#39;setup.py&#39;</span><span class=\"p\">)</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">stat</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">st_mode</span><span class=\"go\">33277</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">chmod</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"n\">o444</span><span class=\"p\">)</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">stat</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">st_mode</span><span class=\"go\">33060</span></pre></div></div></dd></dl><dl class=\"method\"><dt id=\"pathlib.Path.exists\"><tt class=\"descclassname\">Path.</tt><tt class=\"descname\">exists</tt><big>(</big><big>)</big><a class=\"headerlink\" href=\"#pathlib.Path.exists\" title=\"Permalink to this definition\">\u00b6</a></dt><dd><p>Whether the path points to an existing file or directory:</p><div class=\"highlight-python\"><div class=\"highlight\"><pre><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">pathlib</span> <span class=\"kn\">import</span> <span class=\"o\">*</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Path</span><span class=\"p\">(</span><span class=\"s\">&#39;.&#39;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">exists</span><span class=\"p\">()</span><span class=\"go\">True</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Path</span><span class=\"p\">(</span><span class=\"s\">&#39;setup.py&#39;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">exists</span><span class=\"p\">()</span><span class=\"go\">True</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Path</span><span class=\"p\">(</span><span class=\"s\">&#39;/etc&#39;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">exists</span><span class=\"p\">()</span><span class=\"go\">True</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Path</span><span class=\"p\">(</span><span class=\"s\">&#39;nonexistentfile&#39;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">exists</span><span class=\"p\">()</span><span class=\"go\">False</span></pre></div></div></dd></dl><dl class=\"method\"><dt id=\"pathlib.Path.glob\"><tt class=\"descclassname\">Path.</tt><tt class=\"descname\">glob</tt><big>(</big><em>pattern</em><big>)</big><a class=\"headerlink\" href=\"#pathlib.Path.glob\" title=\"Permalink to this definition\">\u00b6</a></dt><dd><p>Glob the given <em>pattern</em> in the directory represented by this path,yielding all matching files (of any kind):</p><div class=\"highlight-python\"><div class=\"highlight\"><pre><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">sorted</span><span class=\"p\">(</span><span class=\"n\">Path</span><span class=\"p\">(</span><span class=\"s\">&#39;.&#39;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">glob</span><span class=\"p\">(</span><span class=\"s\">&#39;*.py&#39;</span><span class=\"p\">))</span><span class=\"go\">[PosixPath(&#39;pathlib.py&#39;), PosixPath(&#39;setup.py&#39;), PosixPath(&#39;test_pathlib.py&#39;)]</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">sorted</span><span class=\"p\">(</span><span class=\"n\">Path</span><span class=\"p\">(</span><span class=\"s\">&#39;.&#39;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">glob</span><span class=\"p\">(</span><span class=\"s\">&#39;*/*.py&#39;</span><span class=\"p\">))</span><span class=\"go\">[PosixPath(&#39;docs/conf.py&#39;)]</span></pre></div></div><p>The &#8220;<tt class=\"docutils literal\"><span class=\"pre\">**</span></tt>&#8221; pattern means &#8220;this directory and all subdirectories,recursively&#8221;.  In other words, it enables recursive globbing:</p><div class=\"highlight-python\"><div class=\"highlight\"><pre><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">sorted</span><span class=\"p\">(</span><span class=\"n\">Path</span><span class=\"p\">(</span><span class=\"s\">&#39;.&#39;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">glob</span><span class=\"p\">(</span><span class=\"s\">&#39;**/*.py&#39;</span><span class=\"p\">))</span><span class=\"go\">[PosixPath(&#39;build/lib/pathlib.py&#39;),</span><span class=\"go\"> PosixPath(&#39;docs/conf.py&#39;),</span><span class=\"go\"> PosixPath(&#39;pathlib.py&#39;),</span><span class=\"go\"> PosixPath(&#39;setup.py&#39;),</span><span class=\"go\"> PosixPath(&#39;test_pathlib.py&#39;)]</span></pre></div></div><div class=\"admonition note\"><p class=\"first admonition-title\">Note</p><p class=\"last\">Using the &#8220;<tt class=\"docutils literal\"><span class=\"pre\">**</span></tt>&#8221; pattern in large directory trees may consumean inordinate amount of time.</p></div></dd></dl><dl class=\"method\"><dt id=\"pathlib.Path.group\"><tt class=\"descclassname\">Path.</tt><tt class=\"descname\">group</tt><big>(</big><big>)</big><a class=\"headerlink\" href=\"#pathlib.Path.group\" title=\"Permalink to this definition\">\u00b6</a></dt><dd><p>Return the name of the group owning the file.  <tt class=\"xref py py-exc docutils literal\"><span class=\"pre\">KeyError</span></tt> is raisedif the file&#8217;s gid isn&#8217;t found in the system database.</p></dd></dl><dl class=\"method\"><dt id=\"pathlib.Path.is_dir\"><tt class=\"descclassname\">Path.</tt><tt class=\"descname\">is_dir</tt><big>(</big><big>)</big><a class=\"headerlink\" href=\"#pathlib.Path.is_dir\" title=\"Permalink to this definition\">\u00b6</a></dt><dd><p>Return <tt class=\"docutils literal\"><span class=\"pre\">True</span></tt> if the path points to a directory (or a symbolic linkpointing to a directory), <tt class=\"docutils literal\"><span class=\"pre\">False</span></tt> if it points to another kind of file.</p><p><tt class=\"docutils literal\"><span class=\"pre\">False</span></tt> is also returned if the path doesn&#8217;t exist or is a broken symlink;other errors (such as permission errors) are propagated.</p></dd></dl><dl class=\"method\"><dt id=\"pathlib.Path.is_file\"><tt class=\"descclassname\">Path.</tt><tt class=\"descname\">is_file</tt><big>(</big><big>)</big><a class=\"headerlink\" href=\"#pathlib.Path.is_file\" title=\"Permalink to this definition\">\u00b6</a></dt><dd><p>Return <tt class=\"docutils literal\"><span class=\"pre\">True</span></tt> if the path points to a regular file (or a symbolic linkpointing to a regular file), <tt class=\"docutils literal\"><span class=\"pre\">False</span></tt> if it points to another kind of file.</p><p><tt class=\"docutils literal\"><span class=\"pre\">False</span></tt> is also returned if the path doesn&#8217;t exist or is a broken symlink;other errors (such as permission errors) are propagated.</p></dd></dl><dl class=\"method\"><dt id=\"pathlib.Path.is_symlink\"><tt class=\"descclassname\">Path.</tt><tt class=\"descname\">is_symlink</tt><big>(</big><big>)</big><a class=\"headerlink\" href=\"#pathlib.Path.is_symlink\" title=\"Permalink to this definition\">\u00b6</a></dt><dd><p>Return <tt class=\"docutils literal\"><span class=\"pre\">True</span></tt> if the path points to a symbolic link, <tt class=\"docutils literal\"><span class=\"pre\">False</span></tt> otherwise.</p><p><tt class=\"docutils literal\"><span class=\"pre\">False</span></tt> is also returned if the path doesn&#8217;t exist; other errors (suchas permission errors) are propagated.</p></dd></dl><dl class=\"method\"><dt id=\"pathlib.Path.is_socket\"><tt class=\"descclassname\">Path.</tt><tt class=\"descname\">is_socket</tt><big>(</big><big>)</big><a class=\"headerlink\" href=\"#pathlib.Path.is_socket\" title=\"Permalink to this definition\">\u00b6</a></dt><dd><p>Return <tt class=\"docutils literal\"><span class=\"pre\">True</span></tt> if the path points to a Unix socket (or a symbolic linkpointing to a Unix socket), <tt class=\"docutils literal\"><span class=\"pre\">False</span></tt> if it points to another kind of file.</p><p><tt class=\"docutils literal\"><span class=\"pre\">False</span></tt> is also returned if the path doesn&#8217;t exist or is a broken symlink;other errors (such as permission errors) are propagated.</p></dd></dl><dl class=\"method\"><dt id=\"pathlib.Path.is_fifo\"><tt class=\"descclassname\">Path.</tt><tt class=\"descname\">is_fifo</tt><big>(</big><big>)</big><a class=\"headerlink\" href=\"#pathlib.Path.is_fifo\" title=\"Permalink to this definition\">\u00b6</a></dt><dd><p>Return <tt class=\"docutils literal\"><span class=\"pre\">True</span></tt> if the path points to a FIFO (or a symbolic linkpointing to a FIFO), <tt class=\"docutils literal\"><span class=\"pre\">False</span></tt> if it points to another kind of file.</p><p><tt class=\"docutils literal\"><span class=\"pre\">False</span></tt> is also returned if the path doesn&#8217;t exist or is a broken symlink;other errors (such as permission errors) are propagated.</p></dd></dl><dl class=\"method\"><dt id=\"pathlib.Path.is_block_device\"><tt class=\"descclassname\">Path.</tt><tt class=\"descname\">is_block_device</tt><big>(</big><big>)</big><a class=\"headerlink\" href=\"#pathlib.Path.is_block_device\" title=\"Permalink to this definition\">\u00b6</a></dt><dd><p>Return <tt class=\"docutils literal\"><span class=\"pre\">True</span></tt> if the path points to a block device (or a symbolic linkpointing to a block device), <tt class=\"docutils literal\"><span class=\"pre\">False</span></tt> if it points to another kind of file.</p><p><tt class=\"docutils literal\"><span class=\"pre\">False</span></tt> is also returned if the path doesn&#8217;t exist or is a broken symlink;other errors (such as permission errors) are propagated.</p></dd></dl><dl class=\"method\"><dt id=\"pathlib.Path.is_char_device\"><tt class=\"descclassname\">Path.</tt><tt class=\"descname\">is_char_device</tt><big>(</big><big>)</big><a class=\"headerlink\" href=\"#pathlib.Path.is_char_device\" title=\"Permalink to this definition\">\u00b6</a></dt><dd><p>Return <tt class=\"docutils literal\"><span class=\"pre\">True</span></tt> if the path points to a character device (or a symbolic linkpointing to a character device), <tt class=\"docutils literal\"><span class=\"pre\">False</span></tt> if it points to another kind of file.</p><p><tt class=\"docutils literal\"><span class=\"pre\">False</span></tt> is also returned if the path doesn&#8217;t exist or is a broken symlink;other errors (such as permission errors) are propagated.</p></dd></dl><dl class=\"method\"><dt id=\"pathlib.Path.iterdir\"><tt class=\"descclassname\">Path.</tt><tt class=\"descname\">iterdir</tt><big>(</big><big>)</big><a class=\"headerlink\" href=\"#pathlib.Path.iterdir\" title=\"Permalink to this definition\">\u00b6</a></dt><dd><p>When the path points to a directory, yield path objects of the directorycontents:</p><div class=\"highlight-python\"><div class=\"highlight\"><pre><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">Path</span><span class=\"p\">(</span><span class=\"s\">&#39;docs&#39;</span><span class=\"p\">)</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">for</span> <span class=\"n\">child</span> <span class=\"ow\">in</span> <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">iterdir</span><span class=\"p\">():</span> <span class=\"n\">child</span><span class=\"gp\">...</span><span class=\"go\">PosixPath(&#39;docs/conf.py&#39;)</span><span class=\"go\">PosixPath(&#39;docs/_templates&#39;)</span><span class=\"go\">PosixPath(&#39;docs/make.bat&#39;)</span><span class=\"go\">PosixPath(&#39;docs/index.rst&#39;)</span><span class=\"go\">PosixPath(&#39;docs/_build&#39;)</span><span class=\"go\">PosixPath(&#39;docs/_static&#39;)</span><span class=\"go\">PosixPath(&#39;docs/Makefile&#39;)</span></pre></div></div></dd></dl><dl class=\"method\"><dt id=\"pathlib.Path.lchmod\"><tt class=\"descclassname\">Path.</tt><tt class=\"descname\">lchmod</tt><big>(</big><em>mode</em><big>)</big><a class=\"headerlink\" href=\"#pathlib.Path.lchmod\" title=\"Permalink to this definition\">\u00b6</a></dt><dd><p>Like <a class=\"reference internal\" href=\"#pathlib.Path.chmod\" title=\"pathlib.Path.chmod\"><tt class=\"xref py py-meth docutils literal\"><span class=\"pre\">Path.chmod()</span></tt></a> but, if the path points to a symbolic link, thesymbolic link&#8217;s mode is changed rather than its target&#8217;s.</p></dd></dl><dl class=\"method\"><dt id=\"pathlib.Path.lstat\"><tt class=\"descclassname\">Path.</tt><tt class=\"descname\">lstat</tt><big>(</big><big>)</big><a class=\"headerlink\" href=\"#pathlib.Path.lstat\" title=\"Permalink to this definition\">\u00b6</a></dt><dd><p>Like <a class=\"reference internal\" href=\"#pathlib.Path.stat\" title=\"pathlib.Path.stat\"><tt class=\"xref py py-meth docutils literal\"><span class=\"pre\">Path.stat()</span></tt></a> but, if the path points to a symbolic link, returnthe symbolic link&#8217;s information rather than its target&#8217;s.</p></dd></dl><dl class=\"method\"><dt id=\"pathlib.Path.mkdir\"><tt class=\"descclassname\">Path.</tt><tt class=\"descname\">mkdir</tt><big>(</big><em>mode=0o777</em>, <em>parents=False</em><big>)</big><a class=\"headerlink\" href=\"#pathlib.Path.mkdir\" title=\"Permalink to this definition\">\u00b6</a></dt><dd><p>Create a new directory at this given path.  If <em>mode</em> is given, it iscombined with the process&#8217; <tt class=\"docutils literal\"><span class=\"pre\">umask</span></tt> value to determine the file modeand access flags.  If the path already exists, <tt class=\"xref py py-exc docutils literal\"><span class=\"pre\">OSError</span></tt> is raised.</p><p>If <em>parents</em> is true, any missing parents of this path are createdas needed; they are created with the default permissions without taking<em>mode</em> into account (mimicking the POSIX <tt class=\"docutils literal\"><span class=\"pre\">mkdir</span> <span class=\"pre\">-p</span></tt> command).</p><p>If <em>parents</em> is false (the default), a missing parent raises<tt class=\"xref py py-exc docutils literal\"><span class=\"pre\">OSError</span></tt>.</p></dd></dl><dl class=\"method\"><dt id=\"pathlib.Path.open\"><tt class=\"descclassname\">Path.</tt><tt class=\"descname\">open</tt><big>(</big><em>mode='r'</em>, <em>buffering=-1</em>, <em>encoding=None</em>, <em>errors=None</em>, <em>newline=None</em><big>)</big><a class=\"headerlink\" href=\"#pathlib.Path.open\" title=\"Permalink to this definition\">\u00b6</a></dt><dd><p>Open the file pointed to by the path, like the built-in <a class=\"reference internal\" href=\"#pathlib.Path.open\" title=\"pathlib.Path.open\"><tt class=\"xref py py-func docutils literal\"><span class=\"pre\">open()</span></tt></a>function does:</p><div class=\"highlight-python\"><div class=\"highlight\"><pre><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">Path</span><span class=\"p\">(</span><span class=\"s\">&#39;setup.py&#39;</span><span class=\"p\">)</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">with</span> <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">open</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span><span class=\"gp\">... </span>    <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">readline</span><span class=\"p\">()</span><span class=\"gp\">...</span><span class=\"go\">&#39;#!/usr/bin/env python3\\n&#39;</span></pre></div></div></dd></dl><dl class=\"method\"><dt id=\"pathlib.Path.owner\"><tt class=\"descclassname\">Path.</tt><tt class=\"descname\">owner</tt><big>(</big><big>)</big><a class=\"headerlink\" href=\"#pathlib.Path.owner\" title=\"Permalink to this definition\">\u00b6</a></dt><dd><p>Return the name of the user owning the file.  <tt class=\"xref py py-exc docutils literal\"><span class=\"pre\">KeyError</span></tt> is raisedif the file&#8217;s uid isn&#8217;t found in the system database.</p></dd></dl><dl class=\"method\"><dt id=\"pathlib.Path.rename\"><tt class=\"descclassname\">Path.</tt><tt class=\"descname\">rename</tt><big>(</big><em>target</em><big>)</big><a class=\"headerlink\" href=\"#pathlib.Path.rename\" title=\"Permalink to this definition\">\u00b6</a></dt><dd><p>Rename this file or directory to the given <em>target</em>.  <em>target</em> can beeither a string or another path object:</p><div class=\"highlight-python\"><div class=\"highlight\"><pre><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">Path</span><span class=\"p\">(</span><span class=\"s\">&#39;foo&#39;</span><span class=\"p\">)</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">open</span><span class=\"p\">(</span><span class=\"s\">&#39;w&#39;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"s\">&#39;some text&#39;</span><span class=\"p\">)</span><span class=\"go\">9</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">target</span> <span class=\"o\">=</span> <span class=\"n\">Path</span><span class=\"p\">(</span><span class=\"s\">&#39;bar&#39;</span><span class=\"p\">)</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">rename</span><span class=\"p\">(</span><span class=\"n\">target</span><span class=\"p\">)</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">target</span><span class=\"o\">.</span><span class=\"n\">open</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">()</span><span class=\"go\">&#39;some text&#39;</span></pre></div></div></dd></dl><dl class=\"method\"><dt id=\"pathlib.Path.replace\"><tt class=\"descclassname\">Path.</tt><tt class=\"descname\">replace</tt><big>(</big><em>target</em><big>)</big><a class=\"headerlink\" href=\"#pathlib.Path.replace\" title=\"Permalink to this definition\">\u00b6</a></dt><dd><p>Rename this file or directory to the given <em>target</em>.  If <em>target</em> pointsto an existing file or directory, it will be unconditionally replaced.</p><p>This method is only available with Python 3.3; it will raise<tt class=\"xref py py-exc docutils literal\"><span class=\"pre\">NotImplementedError</span></tt> on previous Python versions.</p></dd></dl><dl class=\"method\"><dt id=\"pathlib.Path.resolve\"><tt class=\"descclassname\">Path.</tt><tt class=\"descname\">resolve</tt><big>(</big><big>)</big><a class=\"headerlink\" href=\"#pathlib.Path.resolve\" title=\"Permalink to this definition\">\u00b6</a></dt><dd><p>Make the path absolute, resolving any symlinks.  A new path object isreturned:</p><div class=\"highlight-python\"><div class=\"highlight\"><pre><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">Path</span><span class=\"p\">()</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">p</span><span class=\"go\">PosixPath(&#39;.&#39;)</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">resolve</span><span class=\"p\">()</span><span class=\"go\">PosixPath(&#39;/home/antoine/pathlib&#39;)</span></pre></div></div><p><cite>&#8221;..&#8221;</cite> components are also eliminated (this is the only method to do so):</p><div class=\"highlight-python\"><div class=\"highlight\"><pre><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">Path</span><span class=\"p\">(</span><span class=\"s\">&#39;docs/../setup.py&#39;</span><span class=\"p\">)</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">resolve</span><span class=\"p\">()</span><span class=\"go\">PosixPath(&#39;/home/antoine/pathlib/setup.py&#39;)</span></pre></div></div><p>If the path doesn&#8217;t exist, an <tt class=\"xref py py-exc docutils literal\"><span class=\"pre\">OSError</span></tt> is raised.  If an infiniteloop is encountered along the resolution path, <tt class=\"xref py py-exc docutils literal\"><span class=\"pre\">RuntimeError</span></tt> israised.</p></dd></dl><dl class=\"method\"><dt id=\"pathlib.Path.rglob\"><tt class=\"descclassname\">Path.</tt><tt class=\"descname\">rglob</tt><big>(</big><em>pattern</em><big>)</big><a class=\"headerlink\" href=\"#pathlib.Path.rglob\" title=\"Permalink to this definition\">\u00b6</a></dt><dd><p>This is like calling <a class=\"reference internal\" href=\"#pathlib.Path.glob\" title=\"pathlib.Path.glob\"><tt class=\"xref py py-meth docutils literal\"><span class=\"pre\">glob()</span></tt></a> with &#8220;<tt class=\"docutils literal\"><span class=\"pre\">**</span></tt>&#8221; added in front of thegiven <em>pattern</em>:</p><div class=\"highlight-python\"><div class=\"highlight\"><pre><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">sorted</span><span class=\"p\">(</span><span class=\"n\">Path</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">rglob</span><span class=\"p\">(</span><span class=\"s\">&quot;*.py&quot;</span><span class=\"p\">))</span><span class=\"go\">[PosixPath(&#39;build/lib/pathlib.py&#39;),</span><span class=\"go\"> PosixPath(&#39;docs/conf.py&#39;),</span><span class=\"go\"> PosixPath(&#39;pathlib.py&#39;),</span><span class=\"go\"> PosixPath(&#39;setup.py&#39;),</span><span class=\"go\"> PosixPath(&#39;test_pathlib.py&#39;)]</span></pre></div></div></dd></dl><dl class=\"method\"><dt id=\"pathlib.Path.rmdir\"><tt class=\"descclassname\">Path.</tt><tt class=\"descname\">rmdir</tt><big>(</big><big>)</big><a class=\"headerlink\" href=\"#pathlib.Path.rmdir\" title=\"Permalink to this definition\">\u00b6</a></dt><dd><p>Remove this directory.  The directory must be empty.</p></dd></dl><dl class=\"method\"><dt id=\"pathlib.Path.symlink_to\"><tt class=\"descclassname\">Path.</tt><tt class=\"descname\">symlink_to</tt><big>(</big><em>target</em>, <em>target_is_directory=False</em><big>)</big><a class=\"headerlink\" href=\"#pathlib.Path.symlink_to\" title=\"Permalink to this definition\">\u00b6</a></dt><dd><p>Make this path a symbolic link to <em>target</em>.  Under Windows,<em>target_is_directory</em> must be true (default <tt class=\"docutils literal\"><span class=\"pre\">False</span></tt>) if the link&#8217;s targetis a directory.  Under POSIX, <em>target_is_directory</em>&#8216;s value is ignored.</p><div class=\"highlight-python\"><div class=\"highlight\"><pre><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">Path</span><span class=\"p\">(</span><span class=\"s\">&#39;mylink&#39;</span><span class=\"p\">)</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">symlink_to</span><span class=\"p\">(</span><span class=\"s\">&#39;setup.py&#39;</span><span class=\"p\">)</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">resolve</span><span class=\"p\">()</span><span class=\"go\">PosixPath(&#39;/home/antoine/pathlib/setup.py&#39;)</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">stat</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">st_size</span><span class=\"go\">956</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">lstat</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">st_size</span><span class=\"go\">8</span></pre></div></div><div class=\"admonition note\"><p class=\"first admonition-title\">Note</p><p class=\"last\">The order of arguments (link, target) is the reverseof <tt class=\"xref py py-func docutils literal\"><span class=\"pre\">os.symlink()</span></tt>&#8216;s.</p></div></dd></dl><dl class=\"method\"><dt id=\"pathlib.Path.touch\"><tt class=\"descclassname\">Path.</tt><tt class=\"descname\">touch</tt><big>(</big><em>mode=0o777</em>, <em>exist_ok=True</em><big>)</big><a class=\"headerlink\" href=\"#pathlib.Path.touch\" title=\"Permalink to this definition\">\u00b6</a></dt><dd><p>Create a file at this given path.  If <em>mode</em> is given, it is combinedwith the process&#8217; <tt class=\"docutils literal\"><span class=\"pre\">umask</span></tt> value to determine the file mode and accessflags.  If the file already exists, the function succeeds if <em>exist_ok</em>is true (and its modification time is updated to the current time),otherwise <tt class=\"xref py py-exc docutils literal\"><span class=\"pre\">OSError</span></tt> is raised.</p></dd></dl><dl class=\"method\"><dt id=\"pathlib.Path.unlink\"><tt class=\"descclassname\">Path.</tt><tt class=\"descname\">unlink</tt><big>(</big><big>)</big><a class=\"headerlink\" href=\"#pathlib.Path.unlink\" title=\"Permalink to this definition\">\u00b6</a></dt><dd><p>Remove this file or symbolic link.  If the path points to a directory,use <a class=\"reference internal\" href=\"#pathlib.Path.rmdir\" title=\"pathlib.Path.rmdir\"><tt class=\"xref py py-func docutils literal\"><span class=\"pre\">Path.rmdir()</span></tt></a> instead.</p></dd></dl></div></div></div>          </div>          <footer>    <hr/>  <div role=\"contentinfo\">    <p>        &copy; Copyright 2012-2014, Antoine Pitrou and contributors.    </p>  </div>  <a href=\"https://github.com/snide/sphinx_rtd_theme\">Sphinx theme</a> provided by <a href=\"https://readthedocs.org\">Read the Docs</a></footer>        </div>      </div>    </section>  </div>    <div class=\"rst-versions\" data-toggle=\"rst-versions\" role=\"note\" aria-label=\"versions\">    <span class=\"rst-current-version\" data-toggle=\"rst-current-version\">      <span class=\"fa fa-book\"> Read the Docs</span>      v: pep428      <span class=\"fa fa-caret-down\"></span>    </span>    <div class=\"rst-other-versions\">      <dl>        <dt>Versions</dt>                  <dd><a href=\"/en/pep428/\">pep428</a></dd>                  <dd><a href=\"/en/1.0.1/\">1.0.1</a></dd>                  <dd><a href=\"/en/1.0/\">1.0</a></dd>                  <dd><a href=\"/en/0.97/\">0.97</a></dd>                  <dd><a href=\"/en/0.8/\">0.8</a></dd>                  <dd><a href=\"/en/0.7/\">0.7</a></dd>                  <dd><a href=\"/en/0.6/\">0.6</a></dd>                  <dd><a href=\"/en/0.5/\">0.5</a></dd>              </dl>      <dl>        <dt>Downloads</dt>                  <dd><a href=\"https://readthedocs.org/projects/pathlib/downloads/pdf/pep428/\">PDF</a></dd>                  <dd><a href=\"https://readthedocs.org/projects/pathlib/downloads/htmlzip/pep428/\">HTML</a></dd>                  <dd><a href=\"https://readthedocs.org/projects/pathlib/downloads/epub/pep428/\">Epub</a></dd>              </dl>      <dl>        <dt>On Read the Docs</dt>          <dd>            <a href=\"//readthedocs.org/projects/pathlib/?fromdocs=pathlib\">Project Home</a>          </dd>          <dd>            <a href=\"//readthedocs.org/builds/pathlib/?fromdocs=pathlib\">Builds</a>          </dd>      </dl>      <hr/>      Free document hosting provided by <a href=\"http://www.readthedocs.org\">Read the Docs</a>.    </div>  </div>      <script type=\"text/javascript\">        var DOCUMENTATION_OPTIONS = {            URL_ROOT:'./',            VERSION:'1.0.1',            COLLAPSE_INDEX:false,            FILE_SUFFIX:'.html',            HAS_SOURCE:  true        };    </script>      <script type=\"text/javascript\" src=\"https://media.readthedocs.org/javascript/jquery/jquery-2.0.3.min.js\"></script>      <script type=\"text/javascript\" src=\"https://media.readthedocs.org/javascript/jquery/jquery-migrate-1.2.1.min.js\"></script>      <script type=\"text/javascript\" src=\"https://media.readthedocs.org/javascript/underscore.js\"></script>      <script type=\"text/javascript\" src=\"https://media.readthedocs.org/javascript/doctools.js\"></script>      <script type=\"text/javascript\" src=\"https://media.readthedocs.org/javascript/readthedocs-doc-embed.js\"></script>            <script type=\"text/javascript\">      jQuery(function () {          SphinxRtdTheme.StickyNav.enable();      });  </script>   </body></html>",
  "embeddings": []
}
{
  "libtype": "pypi",
  "libname": "spyne",
  "url": "http://spyne.io",
  "html": "<!doctype html><html><head>    <!-- Tagline candidates:        - Tame the interwebs.        - We supply the pipe. You supply the neurons.        - RPC that doesn't break your back.    -->    <meta charset=\"utf-8\">    <meta http-equiv=\"X-UA-Compatible\" content=\"chrome=1\">    <title>spyne - RPC that doesn't break your back.</title>    <link rel=\"stylesheet\" href=\"assets/styles.css\" />    <script src=\"assets/scale.fix.js\"></script>    <script src=\"assets/jquery-1.8.2.min.js\"></script>    <script src=\"assets/jquery-ui-1.9.1.custom.min.js\"></script>    <script src=\"assets/jquery.snippet.min.js\"></script>    <script src=\"assets/jquery.ba-bbq.min.js\"></script>    <script type=\"text/javascript\">db_params_pos = null; // FIXME: come on, this isn't THAT bad :)aux_params_pos = null;$(document).ready(function(){    var hide_imports = true;    var db_params = $('#db_parameters');    var aux_params = $('#aux_parameters');    var fix_unfix = function() {        // 430 is the smallest max-width in css.        if(db_params_pos && $(this).scrollTop() > db_params_pos && $(document).width() > 430) {            $(db_params).css({position:'fixed', top: 0});        }        else {            $(db_params).css({position:'relative'});        }        if(aux_params_pos && $(this).scrollTop() > aux_params_pos && $(document).width() > 430) {            $(aux_params).css({position:'fixed', top: 0});        }        else {            $(aux_params).css({position:'relative'});        }    }    $(window).scroll(fix_unfix);    $(window).resize(function() {        db_params_pos = db_params.offset().top;        aux_params_pos = aux_params.offset().top;        fix_unfix();    });    var gen_imports = [         \"import logging\"        ,\"logging.basicConfig(level=logging.DEBUG)\"        ,\"\"        ,\"from spyne import Application, rpc, ServiceBase, \\\\\"        ,\"    Integer, Unicode\"    ]    var rpc_imports = [         \"from spyne import Iterable\"    ]    var prot_imports = {         HttpRpc: \"from spyne.protocol.http import HttpRpc\"        ,XmlDocument: \"from spyne.protocol.xml import XmlDocument\"        ,Soap11: \"from spyne.protocol.soap import Soap11\"        ,JsonDocument: \"from spyne.protocol.json import JsonDocument\"        ,YamlDocument: \"from spyne.protocol.yaml import YamlDocument\"        ,MessagePackDocument: \"from spyne.protocol.msgpack import MessagePackDocument\"        ,MessagePackRpc: \"from spyne.protocol.msgpack import MessagePackRpc\"        ,Csv: \"from spyne.protocol.csv import Csv\"        ,HtmlRowTable:    \"from spyne.protocol.html import HtmlRowTable\"        ,HtmlColumnTable: \"from spyne.protocol.html import HtmlColumnTable\"        ,HtmlMicroFormat: \"from spyne.protocol.html import HtmlMicroFormat\"    };    // TODO: Fill these up.    var prot_client = {         HttpRpc: ['$ curl \"http://localhost:8000/say_hello?name=World&times=4\"']        ,JsonDocument: [             '# The following two requests are equivalent:'            ,'$ curl -s http://localhost:8000/ -d \\\\'            ,'             \\'{\"say_hello\": {\"name\": \"World\", \"times\": 5}}\\''            ,'$ curl -s http://localhost:8000/ -d \\\\'            ,'             \\'{\"say_hello\": [\"World\", 5]}\\''        ]    }    var prot_response = {        JsonDocument: [             '['            ,'    \"Hello, World\",'            ,'    \"Hello, World\",'            ,'    \"Hello, World\",'            ,'    \"Hello, World\"'            ,']'        ]        ,YamlDocument: [             '- Hello, World'            ,'- Hello, World'            ,'- Hello, World'            ,'- Hello, World'        ]        ,Soap11: [\"<?xml version='1.0' encoding='utf-8'?>\\n<senv:Envelope xmlns:tns=\\\"spyne.examples.hello\\\"\"            ,'      xmlns:senv=\"http://schemas.xmlsoap.org/soap/envelope/\">'            ,'  <senv:Body>'            ,'    <tns:say_helloResponse>'            ,'      <tns:say_helloResult>'            ,'        <tns:string>Hello, World</tns:string>'            ,'        <tns:string>Hello, World</tns:string>'            ,'        <tns:string>Hello, World</tns:string>'            ,'        <tns:string>Hello, World</tns:string>'            ,'      </tns:say_helloResult>'            ,'    </tns:say_helloResponse>'            ,'  </senv:Body>'            ,'</senv:Envelope>'        ]        ,HtmlMicroFormat: [             '<div class=\"say_helloResponse\">'            ,'  <div class=\"say_helloResult\">'            ,'    <div class=\"string\">Hello, World</div>'            ,'    <div class=\"string\">Hello, World</div>'            ,'    <div class=\"string\">Hello, World</div>'            ,'    <div class=\"string\">Hello, World</div>'            ,'  </div>'            ,'</div>'        ]        ,HtmlColumnTable: [             '<table class=\"say_helloResponse\">'            ,'  <tr>'            ,'    <th>string</th>'            ,'  </tr>'            ,'  <tr>'            ,'    <td>Hello, World</td>'            ,'  </tr>'            ,'  <tr>'            ,'    <td>Hello, World</td>'            ,'  </tr>'            ,'  <tr>'            ,'    <td>Hello, World</td>'            ,'  </tr>'            ,'  <tr>'            ,'    <td>Hello, World</td>'            ,'  </tr>'            ,'</table>'        ]        ,Csv: [             'string'            ,'\"Hello, World\"'            ,'\"Hello, World\"'            ,'\"Hello, World\"'            ,'\"Hello, World\"'        ]        ,XmlDocument: [             \"<?xml version='1.0' encoding='utf-8'?>\"            ,'<ns0:say_helloResponse xmlns:ns0=\"spyne.examples.hello\">'            ,'  <ns0:say_helloResult>'            ,'    <ns0:string>Hello, World</ns0:string>'            ,'    <ns0:string>Hello, World</ns0:string>'            ,'    <ns0:string>Hello, World</ns0:string>'            ,'    <ns0:string>Hello, World</ns0:string>'            ,'  </ns0:say_helloResult>'            ,'</ns0:say_helloResponse>'        ]        ,MessagePackDocument: [             '00000000  94 ac 48 65 6c 6c 6f 2c  20 57 6f 72 6c 64 ac 48  |..Hello, World.H|'            ,'00000010  65 6c 6c 6f 2c 20 57 6f  72 6c 64 ac 48 65 6c 6c  |ello, World.Hell|'            ,'00000020  6f 2c 20 57 6f 72 6c 64  ac 48 65 6c 6c 6f 2c 20  |o, World.Hello, |'            ,'00000030  57 6f 72 6c 64                                    |World|'            ,'00000035'        ]    }    var tpt_imports = {        WsgiApplication: [\"from spyne.server.wsgi import WsgiApplication\"]        ,TwistedWebResource: [             \"from spyne.server.twisted import TwistedWebResource\"            ,\"\"            ,\"from twisted.internet import reactor\"            ,\"from twisted.web.server import Site\"        ]        ,DjangoApplication: [             \"from spyne.server.django import DjangoApplication\"            ,\"\"            ,\"from django.views.decorators.csrf import csrf_exempt\"        ]        ,PyramidApplication: [             \"from spyne.server.pyramid import PyramidApplication\"            ,\"\"            ,\"from pyramid.config import Configurator\"        ]        ,ZeroMQServer: [\"from spyne.server.zeromq import ZeroMQServer\"]    }    var tpt_example = {         WsgiApplication: [\"helloworld_http.py\"]        ,TwistedWebResource: [\"twisted\"]        ,DjangoApplication: [\"django\"]        ,PyramidApplication: [\"pyramid\"]    }    var tpt_code = {        WsgiApplication: [             \"if __name__ == '__main__':\"            ,\"    # You can use any Wsgi server. Here, we chose\"            ,\"    # Python's built-in wsgi server but you're not\"            ,\"    # supposed to use it in production.\"            ,\"    from wsgiref.simple_server import make_server\"            ,\"\"            ,\"    wsgi_app = WsgiApplication(application)\"            ,\"    server = make_server('0.0.0.0', 8000, wsgi_app)\"            ,\"    server.serve_forever()\"        ]        ,ZeroMQServer: [             \"if __name__ == '__main__':\"            ,\"    wsgi_app = ZeroMQServer(application,\"            ,\"                           'tcp://0.0.0.0:5555')\"            ,\"    server.serve_forever()\"        ]        ,TwistedWebResource: [             \"if __name__ == '__main__':\"            ,\"    resource = TwistedWebResource(application)\"            ,\"    site = Site(resource)\"            ,\"\"            ,\"    reactor.listenTCP(8000, site, interface='0.0.0.0')\"            ,\"    reactor.run()\"        ]        ,DjangoApplication: [             \"# This module resides in a package in your Django\"            ,\"# project.\"            ,\"\"            ,\"hello_app = csrf_exempt(DjangoApplication(application))\"            ,\"\"            ,\"# hello_app here has to be put in a package that is\"            ,\"# listed in the INSTALLED_APPS list in your settings.py\"            ,\"# and referenced in the url.py under an appropriate\"            ,\"# regexp entry.\"        ]        ,PyramidApplication: [             \"if __name__ == '__main__':\"            ,\"    app = PyramidApplication(application)\"            ,\"    settings = {'debug_all': True}\"            ,\"    config = Configurator(settings=settings)\"            ,\"    config.add_route('home', '/{method_name}')\"            ,\"    config.add_view(app, route_name='home')\"            ,\"    wsgi_app = config.make_wsgi_app()\"            ,\"\"            ,\"    # You can use any Wsgi server. Here, we chose\"            ,\"    # Python's built-in wsgi server but you're not\"            ,\"    # supposed to use it in production.\"            ,\"    from wsgiref.simple_server import make_server\"            ,\"\"            ,\"    server = make_server('0.0.0.0', 8000, wsgi_app)\"            ,\"    server.serve_forever()\"        ]    }    function setup_import_toggle(div) {        var ti = div.find(\"#toggle_imports\");        ti.click(function(e) {            if (hide_imports) {                hide_imports = false;                regen_code_rpc();                regen_code_db();                regen_code_aux();            }            else {                hide_imports = true;                regen_code_rpc();                regen_code_db();                regen_code_aux();            }        });    }    function is_supported(transport, inprot, outprot) {        if (transport == 'ZeroMQServer' && (inprot == 'HttpRpc' || outprot == 'HttpRpc')) {            return false;        }        return true;    }    function regen_code_rpc() {        var retval = [];        var version = '2.13.16';        var inprot = $('input[name=inprot]:checked').val();        var outprot = $('input[name=outprot]:checked').val();        var tpt = $('input[name=tpt]:checked').val();        var validator = $('input[name=validator]:checked').val();        if ($('#tabs').tabs('option', 'active') == 0) {          window.location.href = $.param.fragment('', {             s: 'rpc'            ,inprot: inprot            ,outprot: outprot            ,tpt: tpt            ,validator: validator ? 'true' : 'false'          });        }        // validator        if (validator == \"true\") {            if (inprot == \"Soap11\" || inprot == \"XmlDocument\") {                validator = 'lxml';            }            else {                validator = 'soft';            }        }        else {            validator='';        }        // imports        if (! hide_imports) {            retval = retval.concat(gen_imports);            retval.push(\"\")            retval = retval.concat(rpc_imports);            retval.push(\"\")            // protocol imports            retval.push(prot_imports[inprot]);            if (prot_imports[inprot] != prot_imports[outprot]) {                retval.push(prot_imports[outprot]);            }            retval.push(\"\");            // transport imports            retval = retval.concat(tpt_imports[tpt]);            retval.push(\"\");        }        var prot_to_code = function(prot, validator) {            if (validator) {                validator = \"validator='\"+ validator + \"'\";            }            else {                validator = \"\";            }            if (prot == \"HtmlColumnTable\") {                if (validator != \"\") {                    validator = \", \" + validator;                }                return \"HtmlColumnTable(\" + validator + \")\";            }            else if (prot == \"HtmlRowTable\") {                if (validator != \"\") {                    validator = \", \" + validator;                }                return \"HtmlRowTable(\" + validator + \")\";            }            else {                return prot + \"(\" + validator + \")\";            }        }        // user code        retval = retval.concat([             \"class HelloWorldService(ServiceBase):\"            ,\"    @rpc(Unicode, Integer, _returns=Iterable(Unicode))\"            ,\"    def say_hello(ctx, name, times):\"            ,\"        for i in range(times):\"            ,\"            yield 'Hello, %s' % name\"            ,\"\"            ,\"application = Application([HelloWorldService],\"            ,\"    tns='spyne.examples.hello',\"            ,\"    in_protocol=\" + prot_to_code(inprot, validator) + \",\"            ,\"    out_protocol=\" + prot_to_code(outprot)            ,\")\"            ,\"\"        ]);        // transport        if (tpt_code[tpt]) {            retval = retval.concat(tpt_code[tpt]);        }        else {            retval.push(\"# Please write an example for this transport and \");            retval.push(\"# send a pull request \");        }        var div = $(\"div#code_rpc\");        div.css(\"height\", \"2000px\");        if (! is_supported(tpt, inprot, outprot)) {            div.html(\"<br/><strong>Unsupported Protocol/Transport Combination.</strong>\");            return        }        div.html([            '<div>'            ,  '<a id=\"toggle_imports\">'+(hide_imports ? \"With Imports\": \"Hide Imports\")+'</a>'            ,  ' | '            ,  '<span class=\"code_link\"></span>'            ,'</div>'            ,'<pre id=\"code\"/>'            ,'Client Code: <pre id=\"client\" />'            ,'Response Document: <pre id=\"response\" style=\"line-height: normal\"/>'        ].join(''));        setup_import_toggle(div);        var example_url = tpt_example[tpt];        if (example_url) {            $(\"span.code_link\").html(            \"<a target=\\\"_blank\\\" href=\\\"https://github.com/arskom/spyne/tree/spyne-\" + version +                \"/examples/\"+example_url+\"\\\">A \"+tpt+\" Example</a>\"            );        }        else {            $(\"span.code_link\").html('<span style=\"font-size: 12px\">' +                \"Write a \" + tpt + \" example and send a pull request!</span>\");        }        div.children(\"pre#code\").text(retval.join(\"\\n\"));        div.children(\"pre#code\").snippet(\"python\", {            style:\"whitengrey\"            ,clipboard:\"assets/ZeroClipboard.swf\"        });        if (prot_client[inprot]) {            var g = [].concat(prot_client[inprot])            var hexdump   = \"                                                 | hexdump -C\";            var tidy_xml  = \"                               | tidy -q -xml -indent -wrap 0\";            var json_tool = \"                                        | python -m json.tool\";            var tidy_html = \"                                    | tidy -q -indent -wrap 0\";            var prettifier_map = {                MessagePackDocument: hexdump,                XmlDocument: tidy_xml,                Soap11: tidy_xml,                JsonDocument: json_tool,                HtmlMicroFormat: tidy_xml, // looks nicer                HtmlRowTable: tidy_html,                HtmlColumnTable: tidy_html            }            var prettifier = prettifier_map[outprot];            if (prettifier) {                if (inprot == 'HttpRpc') {                    g[0] += \" \\\\\";                    g.push(prettifier);                }                else if (inprot == 'JsonDocument') {                    g[4] += \" \\\\\";                    g[2] += \" \\\\\";                    g.splice(5, 0, prettifier);                    g.splice(3, 0, prettifier);                }            }            div.children(\"pre#client\").text(g.join(\"\\n\"));        }        else {            div.children(\"pre#client\").text(\"Add this client code and send a pull request!\");        }        if (prot_response[outprot]) {            if (outprot == 'MessagePackDocument') {                div.children(\"pre#response\").css(\"font-size\", \"10px\");            }            div.children(\"pre#response\").text(prot_response[outprot].join(\"\\n\"));        }        else{            div.children(\"pre#response\").text(\"Add this server response document and send a pull request!\");        }        div.css(\"height\", \"auto\");    }    var db_imports = [         'logging.getLogger(\"sqlalchemy\").setLevel(logging.DEBUG)'        ,''        ,'from sqlalchemy import create_engine'        ,'from sqlalchemy import MetaData'        ,'from sqlalchemy.orm import sessionmaker'        ,''        ,'from spyne import Array, Integer32, TTableModel, \\\\'        ,'    ServiceBase'        ,'from spyne.server.wsgi import WsgiApplication'    ];    var db_boilerplate = [         '# Generate a ComplexModelBase subclass with'        ,'# metadata information'        ,'TableModel = TTableModel()'        ,''        ,'# Initialize SQLAlchemy Environment'        ,'db = create_engine('        ,'          \"postgres://postgres:@localhost/spyne_test\")'        ,'Session = sessionmaker(bind=db)'        ,'TableModel.Attributes.sqla_metadata.bind = db'    ];    var obj_user = [        ,\"class User(TableModel):\"        ,\"    __tablename__ = 'spyne_user'\"        ,\"\"        ,\"    user_id = Integer32(primary_key=True)\"        ,\"    user_name = Unicode(256, nullable=False)\"        ,\"    first_name = Unicode(256)\"        ,\"    last_name = Unicode(256)\"    ];    var obj_perm = [         'class Permission(ComplexModel):'        ,'    permission_id = Integer32'        ,'    app = Unicode(256)'        ,'    op = Unicode(256)'    ]    var obj_perm_db = [         'class Permission(TableModel):'        ,\"    __tablename__ = 'spyne_permission'\"        ,\"\"        ,'    permission_id = Integer32(pk=True)'        ,'    app = Unicode(256)'        ,'    op = Unicode(256)'    ]    var db_user_perms_col = {         None: {             code: [                 \"    permissions = Array(Permission)\"            ]            ,imports: []        }        ,Json: {             code: [                 \"    permissions = Array(Permission).store_as(json())\"            ]            ,imports: ['from spyne.model.complex import json']        }        ,Xml: {             code: [                 \"    permissions = Array(Permission).store_as(\"                ,\"                                     xml(no_ns=True))\"            ],            imports: ['from spyne.model.complex import xml']        }        ,SqlOtm: {             code: [                 \"    permissions = Array(Permission).store_as('table')\"            ]            ,imports: []        }        ,SqlMtm: {             code: [                 \"    permissions = Array(Permission).store_as(\"                ,\"                                     table(multi=True))\"            ]            ,imports: ['from spyne.model.complex import table']        }    }    var get_db = [        ''        ,'TableModel.Attributes.sqla_metadata.create_all('        ,'                                       checkfirst=True)'    ]    var show_sql = {        Data: [             'session = Session()'            ,'session.add(User('            ,'    user_name=\"js\",'            ,'    first_name=\"John\",'            ,'    last_name=\"Smith\",'            ,'    permissions=['            ,'        Permission(app=\"x\", op=\"y\"),'            ,'        Permission(app=\"z\", op=\"t\"),'            ,'    ]'            ,'))'            ,'session.commit()'        ]    }    var sql_itself = {        Schema: {             None: [                 \"-- Note that Permission is not\"                ,\"-- stored in the database at all.\"                ,\"CREATE TABLE spyne_user (\"                ,\"  last_name VARCHAR(256),\"                ,\"  user_id SERIAL NOT NULL,\"                ,\"  first_name VARCHAR(256),\"                ,\"  user_name VARCHAR(256) NOT NULL,\"                ,\"  PRIMARY KEY (user_id)\"                ,\");\"            ]            ,Json: [                 \"CREATE TABLE spyne_user (\"                ,\"  last_name VARCHAR(256),\"                ,\"  user_id SERIAL NOT NULL,\"                ,\"  first_name VARCHAR(256),\"                ,\"  user_name VARCHAR(256) NOT NULL,\"                ,\"  permissions json,\"                ,\"  PRIMARY KEY (user_id)\"                ,\");\"            ]            ,Xml: [                 \"CREATE TABLE spyne_user (\"                ,\"  last_name VARCHAR(256),\"                ,\"  user_id SERIAL NOT NULL,\"                ,\"  first_name VARCHAR(256),\"                ,\"  user_name VARCHAR(256) NOT NULL,\"                ,\"  permissions xml,\"                ,\"  PRIMARY KEY (user_id)\"                ,\");\"            ]            ,SqlOtm: [                 \"CREATE TABLE spyne_user (\"                ,\"  last_name VARCHAR(256),\"                ,\"  user_id SERIAL NOT NULL,\"                ,\"  first_name VARCHAR(256),\"                ,\"  user_name VARCHAR(256) NOT NULL,\"                ,\"  PRIMARY KEY (user_id)\"                ,\");\"                ,\"\"                ,\"CREATE TABLE spyne_permission (\"                ,\"  permission_id SERIAL NOT NULL,\"                ,\"  app VARCHAR(256),\"                ,\"  op VARCHAR(256),\"                ,\"  spyne_user_user_id INTEGER,\"                ,\"  PRIMARY KEY (permission_id),\"                ,\"  FOREIGN KEY(spyne_user_user_id)\"                ,\"              REFERENCES spyne_user (user_id)\"                ,\");\"            ]            ,SqlMtm: [                 \"CREATE TABLE spyne_permission (\"                ,\"  permission_id SERIAL NOT NULL,\"                ,\"  app VARCHAR(256),\"                ,\"  op VARCHAR(256),\"                ,\"  PRIMARY KEY (permission_id)\"                ,\");\"                ,\"\"                ,\"CREATE TABLE spyne_user (\"                ,\"  last_name VARCHAR(256),\"                ,\"  user_id SERIAL NOT NULL,\"                ,\"  first_name VARCHAR(256),\"                ,\"  user_name VARCHAR(256) NOT NULL,\"                ,\"  PRIMARY KEY (user_id)\"                ,\");\"                ,\"\"                ,\"CREATE TABLE spyne_user_permissions (\"                ,\"  spyne_user_user_id INTEGER,\"                ,\"  permissions_permission_id INTEGER,\"                ,\"  FOREIGN KEY(spyne_user_user_id)\"                ,\"       REFERENCES spyne_user (user_id),\"                ,\"  FOREIGN KEY(permissions_permission_id)\"                ,\"       REFERENCES spyne_user_permission (permission_id)\"                ,\");\"            ]        }        ,Data: {            None: [                 \"-- Note that permissions attribute is not\"                ,\"-- stored.\"                ,\"BEGIN;\"                ,\"INSERT INTO spyne_user\"                ,\"        (last_name, first_name, user_name)\"                ,\"        VALUES ('Smith', 'John', 'js');\"                ,\"COMMIT;\"            ]            ,Json: [                 \"BEGIN;\"                ,\"INSERT INTO spyne_user\"                ,\"       (last_name, first_name, user_name,\"                ,\"                     permissions)\"                ,\"       VALUES ('Smith', 'John', 'js',\"                ,' \\'{\"Permission\": [{\"app\": \"x\", \"permission_id\": null, \"op\": \"y\"}, {\"app\": \"z\", \"permission_id\": null, \"op\": \"t\"}]}\\''                ,\");\"                ,\"COMMIT;\"            ]            ,Xml: [                 \"BEGIN;\"                ,\"INSERT INTO spyne_user\"                ,\"       (last_name, first_name, user_name,\"                ,\"                     permissions)\"                ,\"       VALUES ('Smith', 'John', 'js',\"                ,' \\'<PermissionArray><Permission><app>x</app><op>y</op></Permission><Permission><app>z</app><op>t</op></Permission></PermissionArray>\\''                ,\");\"                ,\"COMMIT;\"            ]            ,SqlOtm: [                 \"BEGIN;\"                ,\"INSERT INTO spyne_user\"                ,\"       (last_name, first_name, user_name)\"                ,\"       VALUES ('Smith', 'John', 'js');\"                ,\"INSERT INTO spyne_user_permission\"                ,\"       (app, op, spyne_user_user_id)\"                ,\"       VALUES ('x', 'y', 1);\"                ,\"INSERT INTO spyne_user_permission\"                ,\"       (app, op, spyne_user_user_id)\"                ,\"       VALUES ('z', 't', 1);\"                ,\"COMMIT;\"            ]            ,SqlMtm: [                 \"BEGIN;\"                ,\"INSERT INTO spyne_user_permission (app, op)\"                ,\"        VALUES ('x', 'y');\"                ,\"INSERT INTO spyne_user_permission (app, op)\"                ,\"        VALUES ('z', 't');\"                ,\"INSERT INTO spyne_user\"                ,\"        (last_name, first_name, user_name)\"                ,\"        VALUES ('Smith', 'John', 'js');\"                ,\"INSERT INTO spyne_user_permissions\"                ,\"        (spyne_user_user_id,\"                ,\"                permissions_permission_id)\"                ,\"        VALUES (1, 1);\"                ,\"INSERT INTO spyne_user_permissions\"                ,\"        (spyne_user_user_id,\"                ,\"                permissions_permission_id)\"                ,\"        VALUES (1, 2);\"                ,\"COMMIT;\"            ]        }    };    function regen_code_db() {        var code = [];        var sql = [];        var imports = [];        var version = $(\"span#version\").text();        var ser = $('input[name=ser]:checked').val();        var show = $('input[name=show]:checked').val();        if ($('#tabs').tabs('option', 'active') == 1) {          window.location.href = $.param.fragment('', {             s: 'sql'            ,ser: ser            ,show: show          });        }        imports = imports.concat(gen_imports).concat([\"\"]);        imports = imports.concat(db_imports).concat([\"\"]);        code = code.concat(db_boilerplate).concat([\"\"]);        if (ser == \"SqlOtm\" || ser == \"SqlMtm\") {            code = code.concat(obj_perm_db);        }        else {            code = code.concat(obj_perm);            imports.push(\"from spyne import ComplexModel\");        }        code = code.concat(obj_user);        if (db_user_perms_col[ser]) {            code = code.concat(db_user_perms_col[ser].code);            if (db_user_perms_col[ser].imports.len > 0) {                imports = imports.concat(db_user_perms_col[ser].imports);            }        }        code = code.concat(get_db);        if (! hide_imports) {            code = imports.concat(code);        }        code = code.concat([\"\"]).concat(show_sql[show]);        sql = sql.concat(sql_itself[show][ser]);        var div = $(\"div#code_db\");        // this is to prevent scrolling up after the div content is reset        div.css(\"height\", \"2000px\");        div.html([             '<div>'            ,  '<a id=\"toggle_imports\">' + (hide_imports ? \"Show Imports\": \"Hide Imports\") + '</a>'            ,  ' | '            ,\"<a target=\\\"_blank\\\" href=\\\"https://github.com/arskom/spyne/tree/spyne-\" + version +                            \"/examples/user_manager/server_sqlalchemy.py\\\">Example</a>\"            ,'</div>'            ,'<pre class=\"code\"/>'            ,'Resulting SQL: <pre class=\"sql\" />'        ].join(''));        setup_import_toggle(div);        div.children(\"pre.code\").text(code.join(\"\\n\"));        div.children(\"pre.code\").snippet(\"python\", {             style:\"whitengrey\"            ,clipboard:\"assets/ZeroClipboard.swf\"        });        div.children(\"pre.sql\").text(sql.join(\"\\n\"));        div.children(\"pre.sql\").snippet(\"sql\", {             style:\"whitengrey\"            ,clipboard:\"assets/ZeroClipboard.swf\"        });        div.css(\"height\", \"auto\");    }    var aux_imports = {        Thread: [             \"# Requires Python >=2.7\"            ,\"from spyne.auxproc.thread import ThreadAuxProc\"        ]        ,Sync: [            \"from spyne.auxproc.sync import SyncAuxProc\"        ]    };    var client_code = {        Sync: [             \"$ time curl http://localhost:9753/block?seconds=2\"            ,\"<?xml version='1.0' encoding='UTF-8'?>\"            ,'<ns0:blockResponse xmlns:ns0=\"spyne.examples.auxproc\"/>'            ,''            ,'real    0m6.027s'            ,'user    0m0.012s'            ,'sys     0m0.005s'        ]        ,Thread: [             \"$ time curl http://localhost:9753/block?seconds=2\"            ,\"<?xml version='1.0' encoding='UTF-8'?>\"            ,'<ns0:blockResponse xmlns:ns0=\"spyne.examples.auxproc\"/>'            ,''            ,'real    0m2.027s'            ,'user    0m0.012s'            ,'sys     0m0.005s'        ]    }    function regen_code_aux() {        var server = [];        var client = [];        var version = $(\"span#version\").text();        var auxproc = $('input[name=auxproc]:checked').val();        if ($('#tabs').tabs('option', 'active') == 2) {          window.location.href = $.param.fragment('', {             s: 'aux'            ,auxproc: auxproc          });        }        // imports        if (! hide_imports) {            server = server.concat(gen_imports).concat([                 prot_imports['HttpRpc']                ,prot_imports['XmlDocument']                ,\"\"                ,tpt_imports[\"WsgiApplication\"]                ,\"from wsgiref.simple_server import make_server\"                ,\"\"            ]).concat(aux_imports[auxproc]).concat([\"\"]);        }        var params = '';        if (auxproc == 'Thread') {            params = 'pool_size=1';        }        server = server.concat([             'class SomeService(ServiceBase):'            ,'    @rpc(Integer)'            ,'    def block(ctx, seconds):'            ,'        logging.info(\"Primary sleeping for \"'            ,'                                \"%d seconds.\" % seconds)'            ,'        time.sleep(seconds)'            ,''            ,'class SomeAuxService(ServiceBase):'            ,'    __aux__ = '+auxproc+'AuxProc('+params+')'            ,''            ,'    @rpc(Integer)'            ,'    def block(ctx, seconds):'            ,'        logging.info(\"Auxiliary sleeping for\"'            ,'                         \" %d seconds.\" % (seconds * 2))'            ,'        time.sleep(seconds * 2)'            ,''            ,'application = Application([SomeService, SomeAuxService],'            ,'       tns=\"spyne.examples.auxproc\",'            ,'       in_protocol=HttpRpc(),'            ,'       out_protocol=XmlDocument(),'            ,'    )'            ,''            ,'if __name__ == \"__main__\":'            ,'    server = make_server(host, port, '            ,'                  WsgiApplication(application))'            ,'    server.serve_forever()'        ]);        client = client.concat(client_code[auxproc])        var div = $(\"div#code_aux\");        div.css(\"height\", \"2000px\");        div.html([             '<div>'            ,  '<a id=\"toggle_imports\">' + (hide_imports ? \"Show Imports\": \"Hide Imports\") + '</a>'            ,  ' | '            ,\"<a target=\\\"_blank\\\" href=\\\"https://github.com/arskom/spyne/blob/master\" +                            \"/examples/auxproc.py\\\">AuxProc Example</a>\"            ,'</div>'            ,'<pre class=\"server\"/>'            ,'Client Code: <pre class=\"client\" style=\"line-height: normal\"/>'        ].join(''));        setup_import_toggle(div);        div.children(\"pre.server\").text(server.join(\"\\n\"));        div.children(\"pre.server\").snippet(\"python\", {             style:\"whitengrey\"            ,clipboard:\"assets/ZeroClipboard.swf\"        });        div.children(\"pre.client\").text(client.join(\"\\n\"));        div.css(\"height\", \"auto\");    }    $(\"input.param_rpc\").change(function(e) {        regen_code_rpc();    });    $(\"input.param_db\").change(function(e) {        regen_code_db();    });    $(\"input.param_aux\").change(function(e) {        regen_code_aux();    });    /*     * TABS     */    $('#tabs').tabs({activate: function(e, u) {        if (u.newPanel[0].id == 'tabs-2') {            db_params_pos = $(\"#db_parameters\").offset().top;            regen_code_db();        }        if (u.newPanel[0].id == 'tabs-3') {            aux_params_pos = $(\"#aux_parameters\").offset().top;            regen_code_aux();        }    }});    params=$.deparam.fragment();    s_map={'rpc':1, 'sql': 2, 'aux': 3}    if (params.s && s_map[params.s]) {      $(\"#tabs\").tabs(\"option\", \"active\", s_map[params.s] -1);    }    if (params.s && s_map[params.s] && params.s == 'rpc') {      if (params.inprot) {        $('input[name=inprot]').attr(\"checked\", false);        $('input[name=inprot][value='+params.inprot+']').attr(\"checked\", true);      }      if (params.outprot) {        $('input[name=outprot]').attr(\"checked\", false);        $('input[name=outprot][value='+params.outprot+']').attr(\"checked\", true);      }      if (params.validator) {        $('input[name=validator]').attr(\"checked\", false);        $('input[name=validator][value='+params.validator+']').attr(\"checked\", true);      }      if (params.tpt) {        $('input[name=tpt]').attr(\"checked\", false);        $('input[name=tpt][value='+params.tpt+']').attr(\"checked\", true);      }    }    if (params.s && s_map[params.s] && params.s == 'sql') {      if (params.ser) {        $('input[name=ser]').attr(\"checked\", false);        $('input[name=ser][value='+params.ser+']').attr(\"checked\", true);      }      if (params.show) {        $('input[name=show]').attr(\"checked\", false);        $('input[name=show][value='+params.show+']').attr(\"checked\", true);      }    }    if (params.s && s_map[params.s] && params.s == 'aux') {      if (params.auxproc) {        $('input[name=auxproc]').attr(\"checked\", false);        $('input[name=auxproc][value='+params.auxproc+']').attr(\"checked\", true);      }    }    regen_code_db();    regen_code_rpc();    regen_code_aux();});    </script>    <!--<meta name=\"viewport\" content=\"width=device-width, initial-scale=1, user-scalable=no\"> -->    <!--[if lt IE 9]>    <script src=\"//html5shiv.googlecode.com/svn/trunk/html5.js\"></script>    <![endif]--></head><body><div class=\"wrapper\"><header>    <div class=\"header_title\">        <h1 class=\"header\">spyne</h1>        <p style=\"margin-bottom: 0;\">        <small>RPC that doesn't break your back.</small>        </p>        <br>        <span style=\"font-weight: bold\">Latest release:</span> <br/>        <div>            <strong>2.13.16</strong> | <a href=\"https://pypi.python.org/packages/source/s/spyne/spyne-2.13.16.tar.gz\">Download</a>            <span class=\"pipe\"> | </span>            <span style=\"display: inline-block\">2020-11-23</span>            <span class=\"pipe\"> | </span>            <!-- TODO: Does jenkins have something similar?            <span style=\"display: inline-block\">                <a href=\"https://travis-ci.org/arskom/spyne\">                    <img alt=\"Trunk Travis Status\" src=\"https://api.travis-ci.org/arskom/spyne.png\">                </a>            </span>            -->        </div>    </div>    <ul>        <li class=\"buttons\"><a class=\"docs\" href=\"docs/index.html\">Docs</a></li>        <li class=\"buttons\"><a class=\"blog\" href=\"blog/index.html\">Blog</a></li>        <li class=\"buttons\"><a class=\"buttons github\" href=\"https://github.com/arskom/spyne\">GitHub</a></li>        <li class=\"buttons\"><a class=\"pypi\" href=\"https://pypi.org/project/spyne/#history\">PyPi</a></li>        <li class=\"buttons\"><a class=\"so\" href=\"https://stackoverflow.com/questions/tagged/spyne\">StackOverflow</a></li>        <li class=\"buttons\"><a class=\"jenkins\" href=\"https://jenkins.arskom.com.tr/job/spyne/\">Jenkins</a></li>    </ul>    <div class=\"clear\"></div></header><section class=\"what_is\">    <h1>What is Spyne?</h1>    <p>Spyne is a Python RPC toolkit that makes it easy to expose online services        that have a well-defined API using multiple protocols and transports.</p>    <p>It integrates with popular Python web frameworks as well as libraries like        <a href=\"http://sqlalchemy.org\">SQLAlchemy</a>        to keep your code as        <a href=\"http://c2.com/cgi/wiki?DontRepeatYourself\">DRY</a> as possible.</p>    <p>See the <a href=\"docs/index.html\">documentation</a> for more information.<!--    For a quick introduction, you can have a look at the        <a href=\"http://www.youtube.com/watch?v=N4zdWLuSbV0#t=21m58\">lightning talk</a>        and the <a href=\"slides/2012-03_pycon-2012.pdf\">slides</a> from Pycon 2012        (from back when the project was called Rpclib). !--> If you like Spyne, make sure        to star it on <a href=\"https://github.com/arskom/spyne\">Github</a>.    </p>    <h1>Getting Started</h1>    <div id=\"tabs\">        <ul>            <li><a href=\"#tabs-1\">RPC</a></li>            <li><a href=\"#tabs-2\">SQL</a></li>            <li><a href=\"#tabs-3\">AUX</a></li>        </ul>        <div id=\"tabs-1\">            <p>You can expose the same function using multiple protocols and transports.</p>            <hr/>            <div class=\"parameters\" id=\"rpc_parameters\">                <form action=\"#\" method=\"foo\">                    <fieldset>                        <legend>Input Protocol</legend>                        <label><input class=\"param_rpc\" type=\"radio\" name=\"inprot\" value=\"HttpRpc\" checked /> HttpRpc</label> <br/>                        <label><input class=\"param_rpc\" type=\"radio\" name=\"inprot\" value=\"JsonDocument\" /> Json Document</label>  <br/>                        <label><input class=\"param_rpc\" type=\"radio\" name=\"inprot\" value=\"YamlDocument\" /> Yaml Document</label>  <br/>                        <label><input class=\"param_rpc\" type=\"radio\" name=\"inprot\" value=\"Soap11\" /> Soap 1.1</label>  <br/>                        <label><input class=\"param_rpc\" type=\"radio\" name=\"inprot\" value=\"XmlDocument\" /> Xml Document</label>  <br/>                        <label><input class=\"param_rpc\" type=\"radio\" name=\"inprot\" value=\"MessagePackDocument\"/> MessagePack Document</label>  <br/>                        <label><input class=\"param_rpc\" type=\"radio\" name=\"inprot\" value=\"MessagePackRpc\" /> MessagePack RPC</label>  <br/>                    </fieldset>                    <fieldset>                        <legend>Output Protocol</legend>                        <!-- <label><input class=\"param_rpc\" type=\"radio\" name=\"outprot\" value=\"HttpRpc\" checked />HttpRpc</label>  <br/> -->                        <label><input class=\"param_rpc\" type=\"radio\" name=\"outprot\" value=\"JsonDocument\" checked /> Json Document</label>  <br/>                        <label><input class=\"param_rpc\" type=\"radio\" name=\"outprot\" value=\"YamlDocument\" /> Yaml Document</label>  <br/>                        <label><input class=\"param_rpc\" type=\"radio\" name=\"outprot\" value=\"Soap11\" /> Soap 1.1</label>  <br/>                        <label><input class=\"param_rpc\" type=\"radio\" name=\"outprot\" value=\"XmlDocument\" /> Xml Document</label>  <br/>                        <label><input class=\"param_rpc\" type=\"radio\" name=\"outprot\" value=\"MessagePackDocument\" /> MessagePack Document</label>  <br/>                        <label><input class=\"param_rpc\" type=\"radio\" name=\"outprot\" value=\"MessagePackRpc\" /> MessagePack RPC</label>  <br/>                        <label><input class=\"param_rpc\" type=\"radio\" name=\"outprot\" value=\"Csv\" />Comma Separated Values</label>  <br/>                        <label><input class=\"param_rpc\" type=\"radio\" name=\"outprot\" value=\"HtmlRowTable\" />Html Row Table</label>  <br/>                        <label><input class=\"param_rpc\" type=\"radio\" name=\"outprot\" value=\"HtmlColumnTable\" />Html Column Table</label>  <br/>                        <label><input class=\"param_rpc\" type=\"radio\" name=\"outprot\" value=\"HtmlMicroFormat\" />Html MicroFormat</label>  <br/>                    </fieldset>                    <fieldset>                        <legend>Transport</legend>                        <label><input class=\"param_rpc\" type=\"radio\" name=\"tpt\" value=\"WsgiApplication\" checked /> Http (WSGI)</label> <br/>                        <label><input class=\"param_rpc\" type=\"radio\" name=\"tpt\" value=\"TwistedWebResource\" /> Http (Twisted)</label>  <br/>                        <label><input class=\"param_rpc\" type=\"radio\" name=\"tpt\" value=\"DjangoApplication\" /> Http (Django)</label> <br/>                        <label><input class=\"param_rpc\" type=\"radio\" name=\"tpt\" value=\"PyramidApplication\" /> Http (Pyramid)</label> <br/>                        <label><input class=\"param_rpc\" type=\"radio\" name=\"tpt\" value=\"ZeroMQServer\" /> ZeroMQ (REQ/REP)</label> <br/>                    </fieldset>                    <fieldset>                        <legend>Validator:</legend>                        <label><input class=\"param_rpc\" type=\"radio\" name=\"validator\" value=\"true\" checked /> Enabled</label> <br/>                        <label><input class=\"param_rpc\" type=\"radio\" name=\"validator\" value=\"false\" /> Disabled</label> <br/>                    </fieldset>                </form>            </div>            <div class=\"code\" id=\"code_rpc\"></div>            <div class=\"clear\"></div>        </div>        <div id=\"tabs-2\">            <p>You can use TableModel children as both mapped objects in SQLAlchemy            code and type annotators in Spyne code. Spyne offers rich mechanisms            that lets you use PostgreSQL as a hybrid document store.</p>            <hr/>            <div class=\"parameters\" id=\"db_parameters\">                <form action=\"#\" method=\"foo\">                    <fieldset>                        <legend>Complex Type Serialization</legend>                        <label><input class=\"param_db\" type=\"radio\" name=\"ser\" value=\"None\" checked />None</label>  <br/>                        <label><input class=\"param_db\" type=\"radio\" name=\"ser\" value=\"Json\">Json (&gt;=PostgreSQL-9.2)</label>  <br/>                        <label><input class=\"param_db\" type=\"radio\" name=\"ser\" value=\"Xml\">Xml (&gt;=PostgreSQL-8.3)</label>  <br/>                        <label><input class=\"param_db\" type=\"radio\" name=\"ser\" value=\"SqlOtm\">SQL Table (One-to-many)</label>  <br/>                        <label><input class=\"param_db\" type=\"radio\" name=\"ser\" value=\"SqlMtm\">SQL Table (Many-to-many)</label>  <br/>                    </fieldset>                    <fieldset>                        <legend>Show</legend>                        <label><input class=\"param_db\" type=\"radio\" name=\"show\" value=\"Schema\" checked />Schema</label><br/>                        <label><input class=\"param_db\" type=\"radio\" name=\"show\" value=\"Data\">Data</label><br/>                    </fieldset>                </form>            </div>            <div class=\"code\" id=\"code_db\"></div>            <div class=\"clear\"></div>        </div>        <div id=\"tabs-3\">            <p>The Auxiliary Methods offer a powerful task queuing API. To do additional            work after the primary method returns, you can set the <code>__aux__</code>            attribute in another service definition class and implement the same            method signature. Currently, only the simplest defer-to-thread method            with a non-persistent queue is implemented. This is an experimental part            of Spyne. Patches and feedback are most welcome.            </p>            <hr/>            <div class=\"parameters\" id=\"aux_parameters\">                <form action=\"#\" method=\"foo\">                    <fieldset>                        <legend>Auxiliary Method Processor</legend>                        <label><input class=\"param_aux\" type=\"radio\" name=\"auxproc\" value=\"Sync\" checked>Sync</label> <br/>                        <label><input class=\"param_aux\" type=\"radio\" name=\"auxproc\" value=\"Thread\">Async(Thread)</label> <br/>                    </fieldset>                </form>            </div>            <div class=\"code\" id=\"code_aux\"></div>            <div class=\"clear\"></div>        </div>    </div></section></div><footer style=\"align: center\">    <p>&copy; All content on this web site copyright        <a href=\"http://arskom.com.tr\">Arskom Ltd.</a>        Generated code is licensed under the three-clause BSD license.</p>    <p><small>Hosted on    <a href=\"https://pages.github.com\">GitHub Pages</a>    using a variation of the Dinky theme. Please use the    <a href=\"http://github.com/spyne/spyne.github.com/issues\">issue tracker</a>    at Github for ideas on improving this web site.</small></p></footer><!--[if !IE]><script>fixScale(document);</script><![endif]--></body></html>",
  "embeddings": []
}
{
  "libtype": "pypi",
  "libname": "pytype",
  "url": "https://google.github.io/pytype",
  "html": "<!DOCTYPE html><html lang=\"en-US\">  <head>    <meta charset=\"UTF-8\">    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"><!-- Begin Jekyll SEO tag v2.8.0 --><title>pytype - \ud83e\udd86\u2714 | pytype</title><meta name=\"generator\" content=\"Jekyll v3.9.5\" /><meta property=\"og:title\" content=\"pytype - \ud83e\udd86\u2714\" /><meta property=\"og:locale\" content=\"en_US\" /><meta name=\"description\" content=\"A static type analyzer for Python code\" /><meta property=\"og:description\" content=\"A static type analyzer for Python code\" /><link rel=\"canonical\" href=\"https://google.github.io/pytype/\" /><meta property=\"og:url\" content=\"https://google.github.io/pytype/\" /><meta property=\"og:site_name\" content=\"pytype\" /><meta property=\"og:type\" content=\"website\" /><meta name=\"twitter:card\" content=\"summary\" /><meta property=\"twitter:title\" content=\"pytype - \ud83e\udd86\u2714\" /><script type=\"application/ld+json\">{\"@context\":\"https://schema.org\",\"@type\":\"WebSite\",\"description\":\"A static type analyzer for Python code\",\"headline\":\"pytype - \ud83e\udd86\u2714\",\"name\":\"pytype\",\"url\":\"https://google.github.io/pytype/\"}</script><!-- End Jekyll SEO tag -->    <link rel=\"stylesheet\" href=\"/pytype/assets/css/style.css?v=95cb0b760cf9a5b8d7d7b315b4440d2e56519072\">    <!--[if lt IE 9]>    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/html5shiv/3.7.3/html5shiv.min.js\"></script>    <![endif]-->  </head>  <body>    <div class=\"wrapper\">      <header>        <h1><a href=\"https://google.github.io/pytype/\">pytype</a></h1>                <p>A static type analyzer for Python code</p>        <p>          <a href=\"https://google.github.io/pytype/\">Home</a>          <br />          <a href=\"/pytype/user_guide.html\">User guide</a>          <br />          <a href=\"/pytype/developers/index.html\">Developer guide</a>          <br />          <a href=\"/pytype/errors.html\">Error classes</a>          <br />          <a href=\"/pytype/faq.html\">FAQ</a>          <br />          <a href=\"/pytype/typing_faq.html\">Typing FAQ</a>          <br />          <a href=\"/pytype/support.html\">Supported features</a>          <br />          <a href=\"https://groups.google.com/forum/#!forum/pytype\">Mailing list</a>          <br />          <a href=\"https://github.com/google/pytype/issues/new\">File a bug</a>        </p>                <p class=\"view\"><a href=\"https://github.com/google/pytype\">View the Project on GitHub <small>google/pytype</small></a></p>                                <p><small>Hosted on GitHub Pages &mdash; Theme by <a href=\"https://github.com/orderedlist\">orderedlist</a></small></p>      </header>      <section>      <h1 id=\"pytype---\">pytype - \ud83e\udd86\u2714</h1><!--* freshness: { exempt: true } *--><p>Pytype checks and infers types for your Python code - without requiring typeannotations. Pytype can:</p><ul>  <li>Lint plain Python code, flagging common mistakes such as misspelled attributenames, incorrect function calls, and <a href=\"/pytype/errors.html\">much more</a>, even acrossfile boundaries.</li>  <li>Enforce user-provided <a href=\"https://www.python.org/dev/peps/pep-0484\">type annotations</a>. While annotations areoptional for pytype, it will check and apply them where present.</li>  <li>Generate type annotations in standalone files (\u201c<a href=\"/pytype/user_guide.html#pyi-stub-files\">pyi files</a>\u201d),which can be merged back into the Python source with a provided<a href=\"https://github.com/google/pytype/tree/main/pytype/tools/merge_pyi\">merge-pyi</a> tool.</li></ul><p>Pytype is a static analyzer; it does not execute the code it runs on.</p><p>Thousands of projects at Google rely on pytype to keep their Python codewell-typed and error-free.</p><p>For more information, check out the <a href=\"/pytype/user_guide.html\">user guide</a>, <a href=\"/pytype/faq.html\">FAQ</a>, or<a href=\"/pytype/support.html\">supported features</a>.</p><h2 id=\"how-is-pytype-different-from-other-type-checkers\">How is pytype different from other type checkers?</h2><ol>  <li>    <p>Pytype uses <strong>inference</strong> instead of gradual typing. This means it willinfer types on code even when the code has no type hints on it. So it candetect issues with code like this, which other type checkers would miss:</p>    <div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code> <span class=\"k\">def</span> <span class=\"nf\">f</span><span class=\"p\">():</span>     <span class=\"k\">return</span> <span class=\"s\">\"PyCon\"</span> <span class=\"k\">def</span> <span class=\"nf\">g</span><span class=\"p\">():</span>     <span class=\"k\">return</span> <span class=\"n\">f</span><span class=\"p\">()</span> <span class=\"o\">+</span> <span class=\"mi\">2019</span> <span class=\"c1\"># pytype: line 4, in g: unsupported operand type(s) for +: 'str'</span> <span class=\"c1\"># and 'int' [unsupported-operands]</span></code></pre></div>    </div>  </li>  <li>    <p>Pytype is <strong>lenient</strong> instead of strict. That means it allows alloperations that succeed at runtime and don\u2019t contradict annotations. Forinstance, this code will pass as safe in pytype, but fail in other typecheckers, which assign types to variables as soon as they are initialized:</p>    <div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code> <span class=\"kn\">from</span> <span class=\"nn\">typing</span> <span class=\"kn\">import</span> <span class=\"n\">List</span> <span class=\"k\">def</span> <span class=\"nf\">get_list</span><span class=\"p\">()</span> <span class=\"o\">-&gt;</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]:</span>     <span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"PyCon\"</span><span class=\"p\">]</span>     <span class=\"n\">lst</span><span class=\"p\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"mi\">2019</span><span class=\"p\">)</span>     <span class=\"k\">return</span> <span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"n\">lst</span><span class=\"p\">]</span> <span class=\"c1\"># mypy: line 4: error: Argument 1 to \"append\" of \"list\" has</span> <span class=\"c1\"># incompatible type \"int\"; expected \"str\"</span></code></pre></div>    </div>  </li></ol><p>Also see the corresponding <a href=\"/pytype/faq.html#how-is-pytype-different-from-other-type-checkers\">FAQ entry</a>.</p><h2 id=\"quickstart\">Quickstart</h2><p>To quickly get started with type-checking a file or directory, run thefollowing, replacing <code class=\"language-plaintext highlighter-rouge\">file_or_directory</code> with your input:</p><div class=\"language-shell highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>pip <span class=\"nb\">install </span>pytypepytype file_or_directory</code></pre></div></div><p>To set up pytype on an entire package, add the following to a <code class=\"language-plaintext highlighter-rouge\">pyproject.toml</code>file in the directory immediately above the package, replacing <code class=\"language-plaintext highlighter-rouge\">package_name</code>with the package name:</p><div class=\"language-toml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nn\">[tool.pytype]</span><span class=\"py\">inputs</span> <span class=\"p\">=</span> <span class=\"nn\">['package_name']</span></code></pre></div></div><p>Now you can run the no-argument command <code class=\"language-plaintext highlighter-rouge\">pytype</code> to type-check the package. It\u2019salso easy to add pytype to your automated testing; see this<a href=\"https://github.com/google/importlab/blob/main/.github/workflows/ci.yml\">example</a> of a GitHub project that runs pytype on GitHub Actions.</p><p>Finally, pytype generates files of inferred type information, located by defaultin <code class=\"language-plaintext highlighter-rouge\">.pytype/pyi</code>. You can use this information to type-annotate thecorresponding source file:</p><div class=\"language-shell highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>merge-pyi <span class=\"nt\">-i</span> &lt;filepath&gt;.py .pytype/pyi/&lt;filename&gt;.pyi</code></pre></div></div><h2 id=\"requirements\">Requirements</h2><p>You need a Python 3.8-3.11 interpreter to run pytype, as well as aninterpreter in <code class=\"language-plaintext highlighter-rouge\">$PATH</code> for the Python version of the code you\u2019re analyzing(supported: 3.8-3.11).</p><p>Platform support:</p><ul>  <li>Pytype is currently developed and tested on Linux*, which is the main supportedplatform.</li>  <li>Installation on MacOSX requires OSX 10.7 or higher and Xcode v8 or higher**.</li>  <li>Windows is currently not supported unless you use <a href=\"https://docs.microsoft.com/en-us/windows/wsl/faq\">WSL</a>.</li></ul><p><sub>*On Alpine Linux, installation may fail due to issues with upstreamdependencies.  See the details of <a href=\"https://github.com/scikit-build/ninja-python-distributions/issues/27\">this issue</a> for apossible fix.<br />**If the ninja dependency fails to install, make sure cmake is installed. See<a href=\"https://github.com/google/pytype/issues/957\">this issue</a> for details.</sub></p><h2 id=\"installing\">Installing</h2><p>Pytype can be installed via pip. Note that the installation requires <code class=\"language-plaintext highlighter-rouge\">wheel</code>and <code class=\"language-plaintext highlighter-rouge\">setuptools</code>. (If you\u2019re working in a virtualenv, these two packages shouldalready be present.)</p><div class=\"language-shell highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>pip <span class=\"nb\">install </span>pytype</code></pre></div></div><p>Or from the source code <a href=\"https://github.com/google/pytype/\">on GitHub</a>.</p><div class=\"language-shell highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>git clone <span class=\"nt\">--recurse-submodules</span> https://github.com/google/pytype.git<span class=\"nb\">cd </span>pytypepip <span class=\"nb\">install</span> <span class=\"nb\">.</span></code></pre></div></div><p>Instead of using <code class=\"language-plaintext highlighter-rouge\">--recurse-submodules</code>, you could also have run</p><div class=\"language-shell highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>git submodule initgit submodule update</code></pre></div></div><p>in the <code class=\"language-plaintext highlighter-rouge\">pytype</code> directory. To edit the code and have your edits tracked live,replace the pip install command with:</p><div class=\"language-shell highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>pip <span class=\"nb\">install</span> <span class=\"nt\">-e</span> <span class=\"nb\">.</span></code></pre></div></div><h3 id=\"installing-on-wsl\">Installing on WSL</h3><p>Follow the steps above, but make sure you have the correct libraries first:</p><div class=\"language-shell highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">sudo </span>apt <span class=\"nb\">install </span>build-essential python3-dev libpython3-dev</code></pre></div></div><h2 id=\"usage\">Usage</h2><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>usage: pytype [options] input [input ...]positional arguments:  input                 file or directory to process</code></pre></div></div><p>Common options:</p><ul>  <li><code class=\"language-plaintext highlighter-rouge\">-V, --python-version</code>: Python version (major.minor) of the target code.Defaults to the version that pytype is running under.</li>  <li><code class=\"language-plaintext highlighter-rouge\">-o, --output</code>: The directory into which all pytype output goes, includinggenerated .pyi files. Defaults to <code class=\"language-plaintext highlighter-rouge\">.pytype</code>.</li>  <li><code class=\"language-plaintext highlighter-rouge\">-d, --disable</code>. Comma or space-separated list of error names to ignore.Detailed explanations of pytype\u2019s error names are in<a href=\"/pytype/errors.html\">this doc</a>. Defaults to empty.</li></ul><p>For a full list of options, run <code class=\"language-plaintext highlighter-rouge\">pytype --help</code>.</p><p>In addition to the above, you can direct pytype to use a custom typeshedinstallation instead of its own bundled copy by setting <code class=\"language-plaintext highlighter-rouge\">$TYPESHED_HOME</code>.</p><h3 id=\"config-file\">Config File</h3><p>For convenience, you can save your pytype configuration in a file. The configfile can be a TOML-style file with a <code class=\"language-plaintext highlighter-rouge\">[tool.pytype]</code> section (preferred) or anINI-style file with a <code class=\"language-plaintext highlighter-rouge\">[pytype]</code> section. If an explicit config file is notsupplied, pytype will look for a pytype section in the first <code class=\"language-plaintext highlighter-rouge\">pyproject.toml</code> or<code class=\"language-plaintext highlighter-rouge\">setup.cfg</code> file found by walking upwards from the current working directory.</p><p>Start off by generating a sample config file:</p><div class=\"language-shell highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nv\">$ </span>pytype <span class=\"nt\">--generate-config</span> pytype.toml</code></pre></div></div><p>Now customize the file based on your local setup, keeping only the sections youneed. Directories may be relative to the location of the config file, which isuseful if you want to check in the config file as part of your project.</p><p>For example, suppose you have the following directory structure and want toanalyze package <code class=\"language-plaintext highlighter-rouge\">~/repo1/foo</code>, which depends on package <code class=\"language-plaintext highlighter-rouge\">~/repo2/bar</code>:</p><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>~/\u251c\u2500\u2500 repo1\u2502   \u2514\u2500\u2500 foo\u2502       \u251c\u2500\u2500 __init__.py\u2502       \u2514\u2500\u2500 file_to_check.py\u2514\u2500\u2500 repo2    \u2514\u2500\u2500 bar        \u251c\u2500\u2500 __init__.py        \u2514\u2500\u2500 dependency.py</code></pre></div></div><p>Here is the filled-in config file, which instructs pytype to type-check<code class=\"language-plaintext highlighter-rouge\">~/repo1/foo</code> as Python 3.9 code, look for packages in <code class=\"language-plaintext highlighter-rouge\">~/repo1</code> and <code class=\"language-plaintext highlighter-rouge\">~/repo2</code>,and ignore attribute errors. Notice that the path to a package does not includethe package itself.</p><div class=\"language-toml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"err\">$</span> <span class=\"err\">cat</span> <span class=\"err\">~/repo</span><span class=\"mi\">1</span><span class=\"err\">/pytype.toml</span><span class=\"c\"># NOTE: All relative paths are relative to the location of this file.</span><span class=\"nn\">[tool.pytype]</span><span class=\"c\"># Space-separated list of files or directories to process.</span><span class=\"py\">inputs</span> <span class=\"p\">=</span> <span class=\"p\">[</span>    <span class=\"s\">'foo'</span><span class=\"p\">,</span><span class=\"p\">]</span><span class=\"c\"># Python version (major.minor) of the target code.</span><span class=\"py\">python_version</span> <span class=\"p\">=</span> <span class=\"s\">'3.9'</span><span class=\"c\"># Paths to source code directories, separated by ':'.</span><span class=\"py\">pythonpath</span> <span class=\"p\">=</span> <span class=\"err\">.:~/repo</span><span class=\"mi\">2</span><span class=\"c\"># Space-separated list of error names to ignore.</span><span class=\"py\">disable</span> <span class=\"p\">=</span> <span class=\"p\">[</span>    <span class=\"s\">'attribute-error'</span><span class=\"p\">,</span><span class=\"p\">]</span></code></pre></div></div><p>We could\u2019ve discovered that <code class=\"language-plaintext highlighter-rouge\">~/repo2</code> needed to be added to the pythonpath byrunning pytype\u2019s broken dependency checker:</p><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>$ pytype --config=~/repo1/pytype.toml ~/repo1/foo/*.py --unresolvedUnresolved dependencies:  bar.dependency</code></pre></div></div><h3 id=\"subtools\">Subtools</h3><p>Pytype ships with a few scripts in addition to <code class=\"language-plaintext highlighter-rouge\">pytype</code> itself:</p><ul>  <li><code class=\"language-plaintext highlighter-rouge\">annotate-ast</code>, an in-progress type annotator for ASTs.</li>  <li><a href=\"https://github.com/google/pytype/tree/main/pytype/tools/merge_pyi\"><code class=\"language-plaintext highlighter-rouge\">merge-pyi</code></a>, for merging type information from a .pyi file into aPython file.</li>  <li><code class=\"language-plaintext highlighter-rouge\">pytd-tool</code>, a parser for .pyi files.</li>  <li><code class=\"language-plaintext highlighter-rouge\">pytype-single</code>, a debugging tool for pytype developers, which analyzes asingle Python file assuming that .pyi files have already been generated for allof its dependencies.</li>  <li><code class=\"language-plaintext highlighter-rouge\">pyxref</code>, a cross-references generator.</li></ul><h2 id=\"2023-roadmap\">2023 Roadmap</h2><ul>  <li>Typegraph rewrite for improved correctness and performance.</li>  <li>Basic Python 3.11 support.</li></ul><h2 id=\"license\">License</h2><p><a href=\"https://github.com/google/pytype/blob/main/LICENSE\">Apache 2.0</a></p><h2 id=\"disclaimer\">Disclaimer</h2><p>This is not an official Google product.</p>      </section>    </div>    <script src=\"/pytype/assets/js/scale.fix.js\"></script>        <script>      (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){      (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),      m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)      })(window,document,'script','https://www.google-analytics.com/analytics.js','ga');      ga('create', 'G-G896Q7VERJ', 'auto');      ga('send', 'pageview');    </script>      </body></html>",
  "embeddings": []
}
{
  "libtype": "pypi",
  "libname": "munkres",
  "url": "https://software.clapper.org/munkres/",
  "html": "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\"><html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\" lang=\"en\"><head><meta http-equiv=\"content-type\" content=\"text/html;charset=UTF-8\"></meta><title>munkres \u2014 Munkres implementation for Python</title><link href=\"http://software.clapper.org/stylesheets/style.css\" media=\"screen\" rel=\"stylesheet\" type=\"text/css\"/><link href=\"stylesheets/style.css\" media=\"screen\" rel=\"stylesheet\" type=\"text/css\"/></head><body><div class=\"header\">  <table class=\"banner\">    <tr valign=\"bottom\">      <td class=\"banner-image\" width=\"82\"><img src=\"http://software.clapper.org/images/clapper-logo.png\" width=\"82\" height=\"81\"/></td>      <td class=\"banner-title\"><span class=\"title\">munkres \u2014 Munkres implementation for Python</span></td>    </tr>  </table>  <div class=\"linktabs\">    <span class=\"linktab\"><a href=\"index.html\">Home</a></span>    <span class=\"linktab\"><a href=\"http://github.com/bmc/munkres\">Code</a></span>    <span class=\"linktab\"><a href=\"http://software.clapper.org/\">Other Software</a></span>  </div>  <br clear=\"all\"/>  </div><script type=\"text/javascript\" src=\"http://software.clapper.org/js/toc.js\"><!-- --></script><div id=\"content\" class=\"site\"><div id=\"tocBlock\"><span id=\"tocHeading\">Table of Contents</span><div id=\"toc\"></div></div><h2 id=\"introduction\">Introduction</h2><h3 id=\"assignment-problem\">Assignment Problem</h3><p>Let <em>C</em> be an <em>n</em> by <em>n</em> matrix representing the costs of each of <em>n</em> workersto perform any of <em>n</em> jobs. The assignment problem is to assign jobs toworkers in a way that minimizes the total cost. Since each worker can performonly one job and each job can be assigned to only one worker the assignmentsrepresent an independent set of the matrix <em>C</em>.</p><p>One way to generate the optimal set is to create all permutations ofthe indexes necessary to traverse the matrix so that no row and columnare used more than once. For instance, given this matrix (expressed inPython):</p><div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">matrix</span> <span class=\"o\">=</span> <span class=\"p\">[[</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span>          <span class=\"p\">[</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">],</span>          <span class=\"p\">[</span><span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">]]</span></code></pre></div></div><p>You could use this code to generate the traversal indexes:</p><div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">permute</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">results</span><span class=\"p\">):</span>    <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"p\">:</span>        <span class=\"n\">results</span><span class=\"o\">.</span><span class=\"n\">insert</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">results</span><span class=\"p\">),</span> <span class=\"n\">a</span><span class=\"p\">)</span>    <span class=\"k\">else</span><span class=\"p\">:</span>        <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">)):</span>            <span class=\"n\">element</span> <span class=\"o\">=</span> <span class=\"n\">a</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span>            <span class=\"n\">a_copy</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">a</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"k\">for</span> <span class=\"n\">j</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">))</span> <span class=\"k\">if</span> <span class=\"n\">j</span> <span class=\"o\">!=</span> <span class=\"n\">i</span><span class=\"p\">]</span>            <span class=\"n\">subresults</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>            <span class=\"n\">permute</span><span class=\"p\">(</span><span class=\"n\">a_copy</span><span class=\"p\">,</span> <span class=\"n\">subresults</span><span class=\"p\">)</span>            <span class=\"k\">for</span> <span class=\"n\">subresult</span> <span class=\"ow\">in</span> <span class=\"n\">subresults</span><span class=\"p\">:</span>                <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">element</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">subresult</span>                <span class=\"n\">results</span><span class=\"o\">.</span><span class=\"n\">insert</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">results</span><span class=\"p\">),</span> <span class=\"n\">result</span><span class=\"p\">)</span><span class=\"n\">results</span> <span class=\"o\">=</span> <span class=\"p\">[]</span><span class=\"n\">permute</span><span class=\"p\">(</span><span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">matrix</span><span class=\"p\">)),</span> <span class=\"n\">results</span><span class=\"p\">)</span> <span class=\"c\"># [0, 1, 2] for a 3x3 matrix</span></code></pre></div></div><p>After the call to permute(), the results matrix would look like this:</p><div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"p\">[[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">]]</span></code></pre></div></div><p>You could then use that index matrix to loop over the original cost matrixand calculate the smallest cost of the combinations:</p><div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">minval</span> <span class=\"o\">=</span> <span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">maxsize</span><span class=\"k\">for</span> <span class=\"n\">indexes</span> <span class=\"ow\">in</span> <span class=\"n\">results</span><span class=\"p\">:</span>    <span class=\"n\">cost</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>    <span class=\"k\">for</span> <span class=\"n\">row</span><span class=\"p\">,</span> <span class=\"n\">col</span> <span class=\"ow\">in</span> <span class=\"nb\">enumerate</span><span class=\"p\">(</span><span class=\"n\">indexes</span><span class=\"p\">):</span>        <span class=\"n\">cost</span> <span class=\"o\">+=</span> <span class=\"n\">matrix</span><span class=\"p\">[</span><span class=\"n\">row</span><span class=\"p\">][</span><span class=\"n\">col</span><span class=\"p\">]</span>    <span class=\"n\">minval</span> <span class=\"o\">=</span> <span class=\"nb\">min</span><span class=\"p\">(</span><span class=\"n\">cost</span><span class=\"p\">,</span> <span class=\"n\">minval</span><span class=\"p\">)</span><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">minval</span><span class=\"p\">)</span></code></pre></div></div><p>While this approach works fine for small matrices, it does not scale. Itexecutes in O(<em>n</em>!) time: Calculating the permutations for an <em>n</em> x <em>n</em>matrix requires <em>n</em>! operations. For a 12x12 matrix, that\u2019s 479,001,600traversals. Even if you could manage to perform each traversal in just onemillisecond, it would still take more than 133 hours to perform the entiretraversal. A 20x20 matrix would take 2,432,902,008,176,640,000 operations. Atan optimistic millisecond per operation, that\u2019s more than 77 million years.</p><p>The Munkres algorithm runs in O(<em>n</em>^3) time, rather than O(<em>n</em>!). Thispackage provides an implementation of that algorithm.</p><p>This version is based on<a href=\"http://csclab.murraystate.edu/~bob.pilgrim/445/munkres.html\">http://csclab.murraystate.edu/~bob.pilgrim/445/munkres.html</a></p><p>This version was written for Python by Brian Clapper from the algorithmat the above web site. (The <code class=\"highlighter-rouge\">Algorithm:Munkres</code> Perl version, in CPAN, wasclearly adapted from the same web site.)</p><h3 id=\"usage\">Usage</h3><p>Construct a Munkres object:</p><div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">from</span> <span class=\"nn\">munkres</span> <span class=\"kn\">import</span> <span class=\"n\">Munkres</span><span class=\"n\">m</span> <span class=\"o\">=</span> <span class=\"n\">Munkres</span><span class=\"p\">()</span></code></pre></div></div><p>Then use it to compute the lowest cost assignment from a cost matrix. Here\u2019sa sample program:</p><div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">from</span> <span class=\"nn\">munkres</span> <span class=\"kn\">import</span> <span class=\"n\">Munkres</span><span class=\"p\">,</span> <span class=\"n\">print_matrix</span><span class=\"n\">matrix</span> <span class=\"o\">=</span> <span class=\"p\">[[</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span>          <span class=\"p\">[</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">],</span>          <span class=\"p\">[</span><span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">]]</span><span class=\"n\">m</span> <span class=\"o\">=</span> <span class=\"n\">Munkres</span><span class=\"p\">()</span><span class=\"n\">indexes</span> <span class=\"o\">=</span> <span class=\"n\">m</span><span class=\"o\">.</span><span class=\"n\">compute</span><span class=\"p\">(</span><span class=\"n\">matrix</span><span class=\"p\">)</span><span class=\"n\">print_matrix</span><span class=\"p\">(</span><span class=\"n\">matrix</span><span class=\"p\">,</span> <span class=\"n\">msg</span><span class=\"o\">=</span><span class=\"s\">'Lowest cost through this matrix:'</span><span class=\"p\">)</span><span class=\"n\">total</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"k\">for</span> <span class=\"n\">row</span><span class=\"p\">,</span> <span class=\"n\">column</span> <span class=\"ow\">in</span> <span class=\"n\">indexes</span><span class=\"p\">:</span>    <span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">matrix</span><span class=\"p\">[</span><span class=\"n\">row</span><span class=\"p\">][</span><span class=\"n\">column</span><span class=\"p\">]</span>    <span class=\"n\">total</span> <span class=\"o\">+=</span> <span class=\"n\">value</span>    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"s\">'({row}, {column}) -&gt; {value}'</span><span class=\"p\">)</span><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"s\">'total cost: {total}'</span><span class=\"p\">)</span><span class=\"s\">'</span><span class=\"err\"></span></code></pre></div></div><p>Running that program produces:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>Lowest cost through this matrix:[5, 9, 1][10, 3, 2][8, 7, 4](0, 0) -&gt; 5(1, 1) -&gt; 3(2, 2) -&gt; 4total cost=12</code></pre></div></div><p>The instantiated Munkres object can be used multiple times on differentmatrices.</p><h3 id=\"non-square-cost-matrices\">Non-square Cost Matrices</h3><p>The Munkres algorithm assumes that the cost matrix is square. However, it\u2019spossible to use a rectangular matrix if you first pad it with 0 values to makeit square. This module automatically pads rectangular cost matrices to makethem square.</p><p>Notes:</p><ul>  <li>The module operates on a <em>copy</em> of the caller\u2019s matrix, so any padding willnot be seen by the caller.</li>  <li>The cost matrix must be rectangular or square. An irregular matrix will<em>not</em> work.</li></ul><h3 id=\"calculating-profit-rather-than-cost\">Calculating Profit, Rather than Cost</h3><p>The cost matrix is just that: A cost matrix. The Munkres algorithm findsthe combination of elements (one from each row and column) that results inthe smallest cost. It\u2019s also possible to use the algorithm to maximizeprofit. To do that, however, you have to convert your profit matrix to acost matrix. The simplest way to do that is to subtract all elements from alarge value. For example:</p><div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">from</span> <span class=\"nn\">munkres</span> <span class=\"kn\">import</span> <span class=\"n\">Munkres</span><span class=\"p\">,</span> <span class=\"n\">print_matrix</span><span class=\"n\">matrix</span> <span class=\"o\">=</span> <span class=\"p\">[[</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span>          <span class=\"p\">[</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">],</span>          <span class=\"p\">[</span><span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">]]</span><span class=\"n\">cost_matrix</span> <span class=\"o\">=</span> <span class=\"p\">[]</span><span class=\"k\">for</span> <span class=\"n\">row</span> <span class=\"ow\">in</span> <span class=\"n\">matrix</span><span class=\"p\">:</span>    <span class=\"n\">cost_row</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>    <span class=\"k\">for</span> <span class=\"n\">col</span> <span class=\"ow\">in</span> <span class=\"n\">row</span><span class=\"p\">:</span>        <span class=\"n\">cost_row</span> <span class=\"o\">+=</span> <span class=\"p\">[</span><span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">maxsize</span> <span class=\"o\">-</span> <span class=\"n\">col</span><span class=\"p\">]</span>    <span class=\"n\">cost_matrix</span> <span class=\"o\">+=</span> <span class=\"p\">[</span><span class=\"n\">cost_row</span><span class=\"p\">]</span><span class=\"n\">m</span> <span class=\"o\">=</span> <span class=\"n\">Munkres</span><span class=\"p\">()</span><span class=\"n\">indexes</span> <span class=\"o\">=</span> <span class=\"n\">m</span><span class=\"o\">.</span><span class=\"n\">compute</span><span class=\"p\">(</span><span class=\"n\">cost_matrix</span><span class=\"p\">)</span><span class=\"n\">print_matrix</span><span class=\"p\">(</span><span class=\"n\">matrix</span><span class=\"p\">,</span> <span class=\"n\">msg</span><span class=\"o\">=</span><span class=\"s\">'Highest profit through this matrix:'</span><span class=\"p\">)</span><span class=\"n\">total</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"k\">for</span> <span class=\"n\">row</span><span class=\"p\">,</span> <span class=\"n\">column</span> <span class=\"ow\">in</span> <span class=\"n\">indexes</span><span class=\"p\">:</span>    <span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">matrix</span><span class=\"p\">[</span><span class=\"n\">row</span><span class=\"p\">][</span><span class=\"n\">column</span><span class=\"p\">]</span>    <span class=\"n\">total</span> <span class=\"o\">+=</span> <span class=\"n\">value</span>    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"s\">'({row}, {column}) -&gt; {value}'</span><span class=\"p\">)</span><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"s\">'total profit={total}'</span><span class=\"p\">)</span><span class=\"s\">'</span><span class=\"err\"></span></code></pre></div></div><p>Running that program produces:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>Highest profit through this matrix:[5, 9, 1][10, 3, 2][8, 7, 4](0, 1) -&gt; 9(1, 0) -&gt; 10(2, 2) -&gt; 4total profit=23</code></pre></div></div><p>The <code class=\"highlighter-rouge\">munkres</code> module provides a convenience method for creating a costmatrix from a profit matrix. By default, it calculates the maximum profitand subtracts every profit from it to obtain a cost. If, however, youneed a more general function, you can provide theconversion function; but the convenience method takes care of the actualcreation of the matrix:</p><div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">import</span> <span class=\"nn\">munkres</span><span class=\"kn\">import</span> <span class=\"nn\">math</span><span class=\"n\">cost_matrix</span> <span class=\"o\">=</span> <span class=\"n\">munkres</span><span class=\"o\">.</span><span class=\"n\">make_cost_matrix</span><span class=\"p\">(</span>    <span class=\"n\">matrix</span><span class=\"p\">,</span>    <span class=\"k\">lambda</span> <span class=\"n\">profit</span><span class=\"p\">:</span> <span class=\"mf\">1000.0</span> <span class=\"o\">-</span> <span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">sqrt</span><span class=\"p\">(</span><span class=\"n\">profit</span><span class=\"p\">)</span><span class=\"p\">)</span></code></pre></div></div><p>So, the above profit-calculation program can be recast as:</p><div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">from</span> <span class=\"nn\">munkres</span> <span class=\"kn\">import</span> <span class=\"n\">Munkres</span><span class=\"p\">,</span> <span class=\"n\">print_matrix</span><span class=\"p\">,</span> <span class=\"n\">make_cost_matrix</span><span class=\"n\">matrix</span> <span class=\"o\">=</span> <span class=\"p\">[[</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span>          <span class=\"p\">[</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">],</span>          <span class=\"p\">[</span><span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">]]</span><span class=\"n\">cost_matrix</span> <span class=\"o\">=</span> <span class=\"n\">make_cost_matrix</span><span class=\"p\">(</span><span class=\"n\">matrix</span><span class=\"p\">)</span><span class=\"c\"># cost_matrix == [[5, 1, 9],</span><span class=\"c\">#                 [0, 7, 8],</span><span class=\"c\">#                 [2, 3, 6]]</span><span class=\"n\">m</span> <span class=\"o\">=</span> <span class=\"n\">Munkres</span><span class=\"p\">()</span><span class=\"n\">indexes</span> <span class=\"o\">=</span> <span class=\"n\">m</span><span class=\"o\">.</span><span class=\"n\">compute</span><span class=\"p\">(</span><span class=\"n\">cost_matrix</span><span class=\"p\">)</span><span class=\"n\">print_matrix</span><span class=\"p\">(</span><span class=\"n\">matrix</span><span class=\"p\">,</span> <span class=\"n\">msg</span><span class=\"o\">=</span><span class=\"s\">'Highest profits through this matrix:'</span><span class=\"p\">)</span><span class=\"n\">total</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"k\">for</span> <span class=\"n\">row</span><span class=\"p\">,</span> <span class=\"n\">column</span> <span class=\"ow\">in</span> <span class=\"n\">indexes</span><span class=\"p\">:</span>    <span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">matrix</span><span class=\"p\">[</span><span class=\"n\">row</span><span class=\"p\">][</span><span class=\"n\">column</span><span class=\"p\">]</span>    <span class=\"n\">total</span> <span class=\"o\">+=</span> <span class=\"n\">value</span>    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"s\">'(${row}, ${column}) -&gt; ${total}'</span><span class=\"p\">)</span><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"s\">'total profit=${total}'</span><span class=\"p\">)</span></code></pre></div></div><h3 id=\"disallowed-assignments\">Disallowed Assignments</h3><p>You can also mark assignments in your cost or profit matrix as disallowed.Simply use the munkres.DISALLOWED constant.</p><div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">from</span> <span class=\"nn\">munkres</span> <span class=\"kn\">import</span> <span class=\"n\">Munkres</span><span class=\"p\">,</span> <span class=\"n\">print_matrix</span><span class=\"p\">,</span> <span class=\"n\">make_cost_matrix</span><span class=\"p\">,</span> <span class=\"n\">DISALLOWED</span><span class=\"n\">matrix</span> <span class=\"o\">=</span> <span class=\"p\">[[</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">,</span> <span class=\"n\">DISALLOWED</span><span class=\"p\">],</span>          <span class=\"p\">[</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"n\">DISALLOWED</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">],</span>          <span class=\"p\">[</span><span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">]]</span><span class=\"n\">cost_matrix</span> <span class=\"o\">=</span> <span class=\"n\">make_cost_matrix</span><span class=\"p\">(</span><span class=\"n\">matrix</span><span class=\"p\">,</span> <span class=\"k\">lambda</span> <span class=\"n\">cost</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">maxsize</span> <span class=\"o\">-</span> <span class=\"n\">cost</span><span class=\"p\">)</span> <span class=\"k\">if</span>                                      <span class=\"p\">(</span><span class=\"n\">cost</span> <span class=\"o\">!=</span> <span class=\"n\">DISALLOWED</span><span class=\"p\">)</span> <span class=\"k\">else</span> <span class=\"n\">DISALLOWED</span><span class=\"p\">)</span><span class=\"n\">m</span> <span class=\"o\">=</span> <span class=\"n\">Munkres</span><span class=\"p\">()</span><span class=\"n\">indexes</span> <span class=\"o\">=</span> <span class=\"n\">m</span><span class=\"o\">.</span><span class=\"n\">compute</span><span class=\"p\">(</span><span class=\"n\">cost_matrix</span><span class=\"p\">)</span><span class=\"n\">print_matrix</span><span class=\"p\">(</span><span class=\"n\">matrix</span><span class=\"p\">,</span> <span class=\"n\">msg</span><span class=\"o\">=</span><span class=\"s\">'Highest profit through this matrix:'</span><span class=\"p\">)</span><span class=\"n\">total</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"k\">for</span> <span class=\"n\">row</span><span class=\"p\">,</span> <span class=\"n\">column</span> <span class=\"ow\">in</span> <span class=\"n\">indexes</span><span class=\"p\">:</span>    <span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">matrix</span><span class=\"p\">[</span><span class=\"n\">row</span><span class=\"p\">][</span><span class=\"n\">column</span><span class=\"p\">]</span>    <span class=\"n\">total</span> <span class=\"o\">+=</span> <span class=\"n\">value</span>    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"s\">'({row}, {column}) -&gt; {value}'</span><span class=\"p\">)</span><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"s\">'total profit={total}'</span><span class=\"p\">)</span></code></pre></div></div><p>Running this program produces:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>Lowest cost through this matrix:[ 5,  9,  D][10,  D,  2][ 8,  7,  4](0, 1) -&gt; 9(1, 0) -&gt; 10(2, 2) -&gt; 4total profit=23</code></pre></div></div><h3 id=\"references\">References</h3><ol>  <li>    <p><a href=\"http://www.public.iastate.edu/~ddoty/HungarianAlgorithm.html\">http://www.public.iastate.edu/~ddoty/HungarianAlgorithm.html</a></p>  </li>  <li>    <p>Harold W. Kuhn. The Hungarian Method for the assignment problem.<em>Naval Research Logistics Quarterly</em>, 2:83-97, 1955.</p>  </li>  <li>    <p>Harold W. Kuhn. Variants of the Hungarian method for assignmentproblems. <em>Naval Research Logistics Quarterly</em>, 3: 253-258, 1956.</p>  </li>  <li>    <p>Munkres, J. Algorithms for the Assignment and Transportation Problems.<em>Journal of the Society of Industrial and Applied Mathematics</em>,5(1):32-38, March, 1957.</p>  </li>  <li>    <p><a href=\"http://en.wikipedia.org/wiki/Hungarian_algorithm\">http://en.wikipedia.org/wiki/Hungarian_algorithm</a></p>  </li></ol><h2 id=\"getting-and-installing-munkres\">Getting and installing <em>munkres</em></h2><h3 id=\"installing\">Installing</h3><p>Because <em>munkres</em> is available via <a href=\"http://pypi.python.org/pypi\">PyPI</a>, if you have <a href=\"https://pip.pypa.io/en/stable\">pip</a>installed on your system, installing <em>munkres</em> is as easy as running thiscommand:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>pip install munkres</code></pre></div></div><p><strong>WARNING:</strong> As of version 1.1.0, <em>munkres</em> no longer supports Python 2.If you need to use it with Python 2, install an earlier version (e.g., 1.0.12):</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>pip install munkres==1.0.12</code></pre></div></div><h3 id=\"installing-from-source\">Installing from source</h3><p>You can also install <em>munkres</em> from source. Either download the source (asa zip or tarball) from <a href=\"http://github.com/bmc/munkres/downloads\">http://github.com/bmc/munkres/downloads</a>, or makea local read-only clone of the <a href=\"http://github.com/bmc/munkres\">Git repository</a> using one of thefollowing commands:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>$ git clone git://github.com/bmc/munkres.git$ git clone http://github.com/bmc/munkres.git</code></pre></div></div><p>Once you have a local <code class=\"highlighter-rouge\">munkres</code> source directory, change your working directoryto the source directory, and type:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>python setup.py install</code></pre></div></div><p>To install it somewhere other than the default location (such as in yourhome directory) type:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>python setup.py install --prefix=$HOME</code></pre></div></div><h2 id=\"documentation\">Documentation</h2><p>Consult the <a href=\"/munkres/api/index.html\">API documentation</a> for details. The API documentation is generated from the source code, so you can also just browse<a href=\"https://github.com/bmc/munkres/blob/master/munkres.py\">the source</a>.</p><h3 id=\"references-1\">References</h3><ol>  <li><a href=\"http://csclab.murraystate.edu/bob.pilgrim/445/munkres.html\">http://csclab.murraystate.edu/bob.pilgrim/445/munkres.html</a></li>  <li>Harold W. Kuhn. The Hungarian Method for the assignment problem.<em>Naval Research Logistics Quarterly</em>, 2:83-97, 1955.</li>  <li>Harold W. Kuhn. Variants of the Hungarian method for assignmentproblems. <em>Naval Research Logistics Quarterly</em>, 3: 253-258, 1956.</li>  <li>Munkres, J. Algorithms for the Assignment and Transportation Problems.<em>Journal of the Society of Industrial and Applied Mathematics</em>,5(1):32-38, March, 1957.</li>  <li><a href=\"http://en.wikipedia.org/wiki/Hungarian_algorithm\">http://en.wikipedia.org/wiki/Hungarian_algorithm</a></li></ol><h2 id=\"license\">License</h2><p>This module is released under the Apache Software License, version 2.See the <a href=\"https://github.com/bmc/munkres/blob/master/LICENSE.md\">license</a> file for details.</p></div><script type=\"text/javascript\">createTOC();</script> </body></html>",
  "embeddings": []
}
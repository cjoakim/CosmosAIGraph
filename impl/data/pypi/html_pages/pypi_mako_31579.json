{
  "libtype": "pypi",
  "libname": "mako",
  "url": "https://www.makotemplates.org/",
  "html": "<html><meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/><link rel=\"shortcut icon\" href=\"/favicon.ico\" type=\"image/x-icon\"><head><title>    welcome to Mako! </title><link rel=\"stylesheet\" href=\"/css/site.css\"></link><link rel=\"stylesheet\" href=\"/css/highlight.css\"></link>        <link rel=\"stylesheet\" type=\"text/css\" media=\"all\" href=\"/css/carbonads.css\"/></head><body>    <div id=\"wrap\">    <div class=\"rightbar\">    <div class=\"slogan\">    Hyperfast and lightweight templating for the Python platform.    </div>    <div class=\"toolbar\">    <a href=\"/\">Home</a>    &nbsp; | &nbsp;    <a href=\"/community.html\">Community</a>    &nbsp; | &nbsp;    <a href=\"http://docs.makotemplates.org\">Documentation</a>    &nbsp; | &nbsp;    <a href=\"/download.html\">Download</a>    </div>    </div>    <a href=\"/\"><img src=\"/images/makoLogo.png\" /></a>    <hr/>    <h1>Mako Templates for Python</h1><!-- test hiya ! 3 --><p>Mako is a template library written in Python. It provides afamiliar, non-XML syntax which compiles into Python modules formaximum performance. Mako's syntax and API borrows from the bestideas of many others, including Django and Jinja2 templates, Cheetah,Myghty, and Genshi. Conceptually, Mako is an embedded Python(i.e. Python Server Page) language, which refines the familiarideas of componentized layout and inheritance to produce one ofthe most straightforward and flexible models available, whilealso maintaining close ties to Python calling and scopingsemantics.</p><p>Mako is used by <a href=\"http://reddit.com\">reddit.com</a> where it delivers over <a href=\"http://mashable.com/2011/02/02/reddit-surpasses-1-billion-monthly-pageviews/\">one billion page views per month</a>.It is the default templatelanguage included with the <ahref=\"https://www.pylonsproject.org/\">Pylons and Pyramid</a> web frameworks.</p><h2>Nutshell:</h2><pre class=\"codesample\"><span class=\"cp\">&lt;%</span><span class=\"nb\">inherit</span> <span class=\"na\">file=</span><span class=\"s\">&quot;base.html&quot;</span><span class=\"cp\">/&gt;</span><span class=\"x\"></span><span class=\"cp\">&lt;%</span>    <span class=\"n\">rows</span> <span class=\"o\">=</span> <span class=\"p\">[[</span><span class=\"n\">v</span> <span class=\"k\">for</span> <span class=\"n\">v</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">10</span><span class=\"p\">)]</span> <span class=\"k\">for</span> <span class=\"n\">row</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">10</span><span class=\"p\">)]</span><span class=\"cp\">%&gt;</span><span class=\"x\"></span><span class=\"x\">&lt;table&gt;</span>    <span class=\"cp\">%</span> <span class=\"k\">for</span> <span class=\"n\">row</span> <span class=\"ow\">in</span> <span class=\"n\">rows</span><span class=\"p\">:</span><span class=\"x\"></span><span class=\"x\">        </span><span class=\"cp\">${</span><span class=\"n\">makerow</span><span class=\"p\">(</span><span class=\"n\">row</span><span class=\"p\">)</span><span class=\"cp\">}</span>    <span class=\"cp\">%</span><span class=\"k\"> endfor</span><span class=\"x\"></span><span class=\"x\">&lt;/table&gt;</span><span class=\"cp\">&lt;%</span><span class=\"nb\">def</span> <span class=\"na\">name=</span><span class=\"s\">&quot;makerow(row)&quot;</span><span class=\"cp\">&gt;</span><span class=\"x\"></span><span class=\"x\">    &lt;tr&gt;</span>    <span class=\"cp\">%</span> <span class=\"k\">for</span> <span class=\"n\">name</span> <span class=\"ow\">in</span> <span class=\"n\">row</span><span class=\"p\">:</span><span class=\"x\"></span><span class=\"x\">        &lt;td&gt;</span><span class=\"cp\">${</span><span class=\"n\">name</span><span class=\"cp\">}</span><span class=\"x\">&lt;/td&gt;</span><span class=\"o\">\\</span>    <span class=\"cp\">%</span><span class=\"k\"> endfor</span><span class=\"x\"></span><span class=\"x\">    &lt;/tr&gt;</span><span class=\"cp\">&lt;/%</span><span class=\"nb\">def</span><span class=\"cp\">&gt;</span><span class=\"x\"></span></pre><h2>Philosophy:</h2><p>Python is a great scripting language.  Don't reinvent the wheel...your templates can handle it !</p><h2>Features:</h2><ul>    <li>Super-simple API.  For basic usage, just one class, <span class=\"code\">Template</span> is needed:    <pre class=\"codesample\"><span class=\"kn\">from</span> <span class=\"nn\">mako.template</span> <span class=\"kn\">import</span> <span class=\"n\">Template</span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">Template</span><span class=\"p\">(</span><span class=\"s2\">&quot;hello $</span><span class=\"si\">{data}</span><span class=\"s2\">!&quot;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">render</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"o\">=</span><span class=\"s2\">&quot;world&quot;</span><span class=\"p\">))</span></pre>    For filesystem management and template caching, add the <span class=\"code\">TemplateLookup</span> class.    </li>    <li>    Super fast. As templates are ultimately compiled into Python bytecode,    Mako's approach is extremely efficient, and was originally written to be    just as fast as Cheetah.  Today, Mako is very close in speed to    Jinja2, which uses a similar approach and for which Mako was an inspiration.    </li>    <li>Standard template features    <ul>        <li>control structures constructed from real Python code (i.e. loops, conditionals)</li>        <li>straight Python blocks, inline or at the module-level</li>        <li>plain old includes</li>    </ul></li>    <li>Callable blocks    <ul>        <li>two types - the <code><%def></code> tag provides Python <code>def</code>        semantics, whereas the <code><%block></code> tag behaves more like a        Jinja2 content block.</li>        <li>can access variables from their enclosing scope as well as the template's request context</li>        <li>can be nested arbitrarily</li>        <li>can specify regular Python argument signatures</li>        <li>outer-level callable blocks can be called by other templates or controller code (i.e. \"method call\")</li>        <li>Calls to functions can define any number of sub-blocks of content which are accessible to the called function This is the basis for nestable custom tags.</li>    </ul>    </li>    <li>Inheritance        <ul>        <li>supports \"multi-zoned\" inheritance - define any number of areas in        the base template to be overridden using <code><%block></code> or        <code><%def></code>.</li>        <li>supports \"chaining\" style inheritance - call <span class=\"code\">next.body()</span> to call the \"inner\" content.</li>        <li>the full inheritance hierarchy is navigable in both directions (i.e. parent and child) from anywhere in the chain.</li>        <li>inheritance is dynamic!  Specify a function instead of a filename to calculate inheritance on the fly for every request.</li>        </ul>    </li>    <li>Full-Featured            <ul>                <li>filters, such as URL escaping, HTML escaping.  Markupsafe is used for performant and secure HTML escaping, and new                    filters can be constructed as a plain Python callable.</li>                <li>complete caching system, allowing caching to be applied at the page level or individual block/def level.  The                    caching system includes an open API that communicates with                    <a href=\"https://github.com/sqlalchemy/dogpile.cache/\">dogpile.cache</a>                    by default.  New cache backends can be added with ease via setuptools entrypoints.</li>                <li>Supports Python 2.7 and Python 3.5 and above.</li>                <li>Supports Google App Engine.</li>            </ul>    </li></ul><div class=\"pylogo\"><a href=\"http://www.python.org\"><img src=\"/images/python-logo.gif\"/></a></div><p>To get started, visit the <a href=\"/docs/\">documentation</a>  and the <a href=\"/download.html\">download page</a>.</p><p>Mako is covered by the <a href=\"http://www.opensource.org/licenses/mit-license.php\">MIT License</a>.</p><div style=\"clear:both\"/><div class=\"clearfix\"><hr/><div class=\"copyright\">Website content copyright &copy; by Michael Bayer. All rights reserved.  Mako and its documentation are licensed under the MIT license.  mike(&)zzzcomputing.com</div></div></div></body></html>",
  "embeddings": []
}
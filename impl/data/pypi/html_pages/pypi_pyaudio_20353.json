{
  "libtype": "pypi",
  "libname": "pyaudio",
  "url": "https://people.csail.mit.edu/hubert/pyaudio/",
  "html": "<!DOCTYPE html><html lang=\"en\">  <head>    <title>PyAudio: Cross-platform audio I/O for Python, with PortAudio</title>    <meta charset=\"utf-8\" />    <meta name=\"description\"          content=\"PyAudio provides Python bindings for PortAudio, the cross platform audio API.\" />    <meta name=\"keywords\"          content=\"PyAudio,PortAudio,Python,cross-platform,audio\" />    <link href=\"pastie.css\" rel=\"stylesheet\" type=\"text/css\"/>    <link href=\"jquery-ui-1.9.0.custom.css\" rel=\"stylesheet\" type=\"text/css\"/>    <link href=\"pyaudio.css\" rel=\"stylesheet\" type=\"text/css\"/>    <script       src=\"https://ajax.googleapis.com/ajax/libs/jquery/1.8.2/jquery.min.js\"       type=\"text/javascript\"></script>    <script src=\"jquery-ui-1.9.0.custom.min.js\"></script>    <script src=\"pyaudio.js\"></script>    <script type=\"text/javascript\">      var _gaq = _gaq || [];      _gaq.push(['_setAccount', 'UA-35547267-1']);      _gaq.push(['_trackPageview']);      (function() {      var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;      ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';      var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);      })();    </script>  </head>  <body>    <a id=\"top\"></a>    <div class=\"toc\">      <nav>        <a href=\"#downloads\">Installation</a>        <span class=\"bullet\">&bull;</span>        <a href=\"#docs\">Documentation &amp; Examples</a>        <span class=\"bullet\">&bull;</span>        <a href=\"#license\">License</a>        <span class=\"bullet\">&bull;</span>        <a href=\"#ack\">Acknowledgements</a>        <span class=\"bullet\">&bull;</span>        <a href=\"#contact\">Contact</a>      </nav>    </div>    <div id=\"container\">      <div id=\"snakey\">        <img src=\"images/snake-300.png\"             alt=\"Snakey: Headphones wearing Python\" />      </div>      <header>        <h1>PyAudio</h1>        <p>          PyAudio provides <a href=\"http://www.python.org/\">Python</a>          bindings          for <a href=\"http://www.portaudio.com/\">PortAudio</a> v19, the          cross-platform audio I/O library. With PyAudio, you can          easily use Python to play and record audio on a variety of          platforms, such as GNU/Linux, Microsoft Windows, and Apple          macOS.        </p>      </header>      <p>PyAudio is distributed under the MIT License.</p>      <p>This library was originally inspired by:</p>      <ul>        <li>pyPortAudio/fastaudio:        Python bindings for PortAudio <strong>v18</strong> API.        </li>        <li><a href=\"http://www.speech.kth.se/snack/\">tkSnack</a>:          cross-platform sound toolkit for Tcl/Tk and Python.</li>      </ul>      <a id=\"new\"></a>      <h2>What's new</h2>      <h4 style=\"margin-bottom: 7px;\">November 6, 2023</h4>      PyAudio 0.2.14 is a new release that fixes a build issue.      Thanks to Bhanu Victor DiCara for the help.      <p>Also, PyAudio 0.2.14 pre-compiled wheels for Microsoft Windows (32-bit and      64-bit) are now available for <strong>Python 3.12</strong>      on <a href=\"https://pypi.org/project/PyAudio/#files\">PyPI</a>.      Install using pip, as described <a href=\"#downloads\">below</a>.      <h4 style=\"margin-bottom: 7px;\">December 26, 2022</h4>      PyAudio 0.2.13 is a new release focused on refactoring, maintenance, and      cleanup. See the CHANGELOG in the <a href=\"#sources\">source      distribution</a> for details. Notable changes include:      <ul>        <li>          Fixed installation on Apple silicon. Thanks to Michael Parque for help          with updating and testing!        </li>        <li><code>pyaudio.Stream</code> is          now <code>pyaudio.PyAudio.Stream</code>, which should not affect          existing code, as directly accessing the          module-level <code>pyaudio.Stream</code> class has always been          unsupported. Use <code>PyAudio.open</code> instead.        </li>        <li><code>PaMacCoreStreamInfo.get_channel_map()</code>  and <code>PaMacCoreStreamInfo.get_flags()</code> methods are  deprecated.  Use the <code>channel_map</code> and <code>flags</code>          properties, respectively, instead.        </li>      </ul>      <h4 style=\"margin-bottom: 7px;\">October 25, 2022</h4>      PyAudio 0.2.12 pre-compiled wheels for Microsoft Windows (32-bit and      64-bit) are now available for <strong>Python 3.11</strong>      on <a href=\"https://pypi.org/project/PyAudio/0.2.12/#files\">PyPI</a>.      Install using pip, as described <a href=\"#downloads\">below</a>.      <h4 style=\"margin-bottom: 7px;\">July 18, 2022</h4>      PyAudio 0.2.12 is a new release with many updates. See the CHANGELOG in      the <a href=\"#sources\">source distribution</a> for details. Notably, the      PyAudio build process for Microsoft Windows is streamlined, using the      native toolchain.      Special thanks to:      <ul>        <li>Sean Zimmermann for help with modernizing the Microsoft Windows          build process</li>        <li>Jason Hihn for suggesting the use paFramesPerBufferUnspecified as          the default frames per buffer</li>        <li>Eiichi Takamori for the patch that uses the system's preferred        encoding</li>        <li>Mat\u011bj Cepl for the patches that skip unit tests that require audio        hardware</li>        <li>Vasily Zakharov for fixes and suggestions to the documentation</li>        <li>Artur Janowiec for fixes to the website documentation</li>      </ul>      <div id=\"oldernews\" style=\"display: none;\">      <h4 style=\"margin-bottom: 7px;\">March 18, 2017</h4> PyAudio 0.2.11 is a        new release with a bug fix related to memory management.      <p>Many thanks to both Blaise Potard and Matthias Schaff for        discovering the issue and for their patches!  Thanks as well to        Timothy Port for helping to correct a docstring.</p>        <h4 style=\"margin-bottom: 7px;\">January 16, 2017</h4>        PyAudio 0.2.10 is a new release with bug fixes related to        the Python GIL. It also introduces a few automated unit tests.      <p>Great thanks to Michael Graczyk for discovering the GIL-related issues        and for submitting a patch!</p>      <h4 style=\"margin-bottom: 7px;\">October 19, 2015</h4> PyAudio <a         href=\"#downloads\">installation</a> is better streamlined.         Install PyAudio on most platforms using pip.      <h4 style=\"margin-bottom: 7px;\">October 18, 2015</h4>        PyAudio 0.2.9 is a new release with bug fixes related        to overflow error handling and IOError exception arguments.      <p>Many thanks to Tony Jacobson for discovering and helping with         the overflow error.  Thanks also to Sami Liedes for reporting         the IOError exception issue!</p>        <h4 style=\"margin-bottom: 7px;\">April 12, 2014</h4> PyAudio 0.2.8 is a        new release with bug fixes related to the Python GIL and device name        encoding.        <p>Many thanks to Jason Roehm for discovering and patching the      threading-related issue!</p>        <h4 style=\"margin-bottom: 7px;\">January 30, 2014</h4> Many thanks to        Sebastian Audet, who        wrote <a href=\"http://wp.me/p4i09r-2\">instructions</a> for building        PyAudio using Microsoft Visual Studio!        <h4 style=\"margin-bottom: 7px;\">October 27, 2012</h4>      PyAudio 0.2.7 is a new release with:      <ul>        <li>Modernized documentation format</li>        <li>Fix for callback (non-blocking) operation</li>        <li>Binaries for Python 3.3</li>      </ul>      <p>Thanks again to Bastian Bechtold for his help converting the        documentation for use with Sphinx!  In addition, thanks to John        K. Luebs for the callback fix.      </p>      <h4 style=\"margin-bottom: 7px;\">October 14, 2012</h4>      PyAudio 0.2.6 is a new release with:      <ul>        <li><strong>Python 3</strong> support</li>        <li>Callback (non-blocking) operation</li>        <li>Bug fixes</li>      </ul>      <p>Many thanks to Bastian Bechtold and Bob Jamison for their        contributions!  Without their patches and Bastian's careful        review, this release would still be far away. Also, great        thanks to Danilo J. S. Bellini for reporting bugs.      </p>      <p><em>Note:</em> As of this update, PyAudio is      compatible with Python 2.6, Python 2.7, and Python 3.2.  For      Python installations older than 2.6,      use <a href=\"packages/\">PyAudio 0.2.4</a>.      </p>        <h4 style=\"margin-bottom: 7px;\">August 22, 2012</h4>        This web page has been <a href=\"#translations\">translated</a> to        French&mdash;thanks to the efforts of Cyril Danilevski!        <h4 style=\"margin-bottom: 7px;\">April 20, 2012</h4>        This web page has been <a href=\"#translations\">translated</a> to        Russian&mdash;thanks to the efforts of Oleg Meister!        <h4 style=\"margin-bottom: 7px;\">March 7, 2012</h4>        This web page has been <a href=\"#translations\">translated</a> to        German&mdash;thanks to the efforts of Olga Babenko!        <h4 style=\"margin-bottom: 7px;\">December 7, 2010</h4>        This web page has been <a href=\"#translations\">translated</a>        to Belorussian&mdash;thanks to the efforts of Jason Fragoso!        <h4 style=\"margin-bottom: 7px;\">November 2, 2010</h4>        PyAudio 0.2.4 has been uploaded to Debian (sid).  A huge        thanks to Felipe Sateler for sponsoring the package!        <h4 style=\"margin-bottom: 7px;\">October 12, 2010</h4>        PyAudio 0.2.4 is a maintenance release&mdash;there are no new        features or bug fixes.  The binary packages now include        PortAudio-v19 (r1535).  The source for PyAudio is now        in <a href=\"#sources\">git</a> (previously subversion).        <h4 style=\"margin-bottom: 7px;\">November 2, 2008</h4>        PyAudio 0.2.3 fixes several outstanding bugs        (<a href=\"#ack\">thanks to all</a> who have sent patches); see        the <a href=\"https://people.csail.mit.edu/hubert/git/?p=pyaudio.git;a=blob_plain;f=CHANGELOG;hb=master\">CHANGELOG</a>        for details.        PyAudio 0.2.3 provides bindings for PortAudio-v19 (r1395) and now        includes binary distributions for Python 2.4, 2.5, and 2.6.        <h4 style=\"margin-bottom: 7px;\">March 5, 2008</h4>        PyAudio 0.2.0 now works with both Python 2.4 and Python        2.5. Additionally, PyAudio features support for PortAudio's        Mac OS X Host API Specific Stream Info extensions (e.g.,        for <strong>channel mapping</strong>)&mdash;see examples        below. The new binary installers include an updated version of        PortAudio-v19 (r1368).        <h4 style=\"margin-bottom: 7px;\">July 6, 2006</h4>        PyAudio 0.1.0 is released.      </div>      <p><a id=\"morenews\" href=\"\">Older news...</a></p>      <a id=\"downloads\"></a>      <h2>Installation</h2>      <p>        The current version is <strong>PyAudio v0.2.14</strong> and supports        Python version 3.8+. Install PyAudio using pip on most platforms. For        PyAudio versions prior to v0.2.9, PyAudio distributed installation        binaries, which are        <a href=\"packages/\">archived here</a>.      </p>      <a id=\"binaries\"></a>      <div class=\"download\">        <span class=\"dlplatform\">Microsoft Windows</span>        <br/>        <p>          Install          using <a href=\"http://pip.readthedocs.org/en/stable/\">pip</a>:        </p>        <p>          <blockquote>            <code>python -m pip install pyaudio</code>          </blockquote>        <p>          Notes:          <ul>            <li>              If pip is not already bundled with your installation of              Python, get it              <a href=\"http://pip.readthedocs.org/en/stable/installing/\">here</a>.            </li>            <li>              pip will fetch and install PyAudio wheels (prepackaged              binaries).  Currently, there are wheels compatible with              the              <a href=\"http://www.python.org/\">official                distributions</a> for Python 3.8, 3.9, 3.10, 3.11, and 3.12.              Both 32-bit and 64-bit wheels are available.            </li>            <li>              These binaries include PortAudio v19 19.7.0, built using the              native compiler toolchain.  They support the Windows MME API,              DirectSound, WASAPI, and WDM-KS.  They do <strong>not</strong>              include support for ASIO. If you require support for APIs not              included, you will need to compile PortAudio and PyAudio.            </li>          </ul>      </div>      <br/>      <div class=\"download\">        <span class=\"dlplatform\">Apple macOS</span>        <p>          Use <a href=\"http://brew.sh/\">Homebrew</a> to install          the prerequisite portaudio library, then install PyAudio using pip:        </p>        <p>          <blockquote>            <code>            brew install portaudio            <br/>            pip install pyaudio            </code>          </blockquote>        <p>          Notes:          <ul>            <li>              If not already installed, download              <a href=\"http://brew.sh/\">Homebrew</a>.            </li>            <li>              pip will download the PyAudio source and build it for              your version of Python.            </li>            <li>              Homebrew and building PyAudio also require installing              the Command Line Tools for Xcode              (<a href=\"https://github.com/Homebrew/homebrew/blob/master/share/doc/homebrew/Installation.md\">more              information</a>).            </li>          </ul>      </div>      <br/>      <div class=\"download\">        <div class=\"dlplatform\">GNU/Linux</div>        <p>          Use the package manager to install PyAudio. For example, on          Debian-based systems:        </p>        <blockquote>          <code>            sudo apt-get install python3-pyaudio          </code>        </blockquote>        <hr style=\"border: 0px; border-bottom: 1px dashed #ccc;\"/>        <p>          If the latest version of PyAudio is not available, install it          using pip:        </p>        <blockquote>          <code>            pip install pyaudio          </code>        </blockquote>        <p>          Notes:          <ul>            <li>              pip will download the PyAudio source and build it for              your system.  Be sure to install the portaudio library              development package (e.g., <code>portaudio19-dev</code>) and              the python development package              (e.g., <code>python3-all-dev</code>) beforehand.            </li>            <li>              For better isolation from system packages, consider              installing PyAudio in              a <a href=\"https://virtualenv.pypa.io/en/latest/\">virtualenv</a>.            </li>          </ul>      </div>      <a id=\"sources\"></a>      <!-- <h3 class=\"subheading\">Source</h3> -->      <br/>      <div class=\"download\">        <div class=\"dlplatform\">PyAudio Source</div>        <p>          Source is available for download at          the <a href=\"https://pypi.python.org/pypi/PyAudio\">Python Package          Index (PyPI)</a>.        </p>        <p>Or clone the git repository:</p>        <blockquote>          <code>            git clone https://people.csail.mit.edu/hubert/git/pyaudio.git          </code>        </blockquote>        <p>          To build PyAudio from source, you will also need to build          <a href=\"http://www.portaudio.com/\">PortAudio            v19</a>. See the INSTALLATION file in the PyAudio source bundle for          build instructions.        </p>      </div>      <a id=\"docs\"></a>      <a id=\"examples\"></a>      <h2>Documentation &amp; Examples</h2>      <p>Browse the <a href=\"./docs/\">PyAudio API      documentation</a>.  PyAudio roughly mirrors      the <a href=\"http://www.portaudio.com/docs/v19-doxydocs/\">PortAudio      v19 API 2.0</a>.</p>      <p>The PyAudio <a href=\"#sources\">source distribution</a>        contains a set of demos. Here's a selection from that set:</p>      <div id=\"tabs\">        <ul>          <li><a href=\"#play-wave-example\">Play</a></li>          <li><a href=\"#record-example\">Record</a></li>          <li><a href=\"#wire-example\">Wire</a></li>          <li><a href=\"#play-wave-callback-example\">              Play (Callback)</a>          </li>          <li><a href=\"#wire-callback-example\">              Wire (Callback)</a>          </li>          <li><a href=\"#channel-maps-example\">              Channel Maps</a>          </li>        </ul><div id=\"play-wave-example\" class=\"highlight\"><code><pre><span></span><span class=\"sd\">&quot;&quot;&quot;PyAudio Example: Play a wave file.&quot;&quot;&quot;</span><span class=\"kn\">import</span> <span class=\"nn\">wave</span><span class=\"kn\">import</span> <span class=\"nn\">sys</span><span class=\"kn\">import</span> <span class=\"nn\">pyaudio</span><span class=\"n\">CHUNK</span> <span class=\"o\">=</span> <span class=\"mi\">1024</span><span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">argv</span><span class=\"p\">)</span> <span class=\"o\">&lt;</span> <span class=\"mi\">2</span><span class=\"p\">:</span>    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s1\">&#39;Plays a wave file. Usage: </span><span class=\"si\">{</span><span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">argv</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"si\">}</span><span class=\"s1\"> filename.wav&#39;</span><span class=\"p\">)</span>    <span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">exit</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"k\">with</span> <span class=\"n\">wave</span><span class=\"o\">.</span><span class=\"n\">open</span><span class=\"p\">(</span><span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">argv</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"s1\">&#39;rb&#39;</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">wf</span><span class=\"p\">:</span>    <span class=\"c1\"># Instantiate PyAudio and initialize PortAudio system resources (1)</span>    <span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">pyaudio</span><span class=\"o\">.</span><span class=\"n\">PyAudio</span><span class=\"p\">()</span>    <span class=\"c1\"># Open stream (2)</span>    <span class=\"n\">stream</span> <span class=\"o\">=</span> <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">open</span><span class=\"p\">(</span><span class=\"nb\">format</span><span class=\"o\">=</span><span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">get_format_from_width</span><span class=\"p\">(</span><span class=\"n\">wf</span><span class=\"o\">.</span><span class=\"n\">getsampwidth</span><span class=\"p\">()),</span>                    <span class=\"n\">channels</span><span class=\"o\">=</span><span class=\"n\">wf</span><span class=\"o\">.</span><span class=\"n\">getnchannels</span><span class=\"p\">(),</span>                    <span class=\"n\">rate</span><span class=\"o\">=</span><span class=\"n\">wf</span><span class=\"o\">.</span><span class=\"n\">getframerate</span><span class=\"p\">(),</span>                    <span class=\"n\">output</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>    <span class=\"c1\"># Play samples from the wave file (3)</span>    <span class=\"k\">while</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">data</span> <span class=\"o\">:=</span> <span class=\"n\">wf</span><span class=\"o\">.</span><span class=\"n\">readframes</span><span class=\"p\">(</span><span class=\"n\">CHUNK</span><span class=\"p\">)):</span>  <span class=\"c1\"># Requires Python 3.8+ for :=</span>        <span class=\"n\">stream</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span>    <span class=\"c1\"># Close stream (4)</span>    <span class=\"n\">stream</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>    <span class=\"c1\"># Release PortAudio system resources (5)</span>    <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">terminate</span><span class=\"p\">()</span></pre></code></div><!-- record example --><div id=\"record-example\" class=\"highlight\"><code><pre><span></span><span class=\"sd\">&quot;&quot;&quot;PyAudio Example: Record a few seconds of audio and save to a wave file.&quot;&quot;&quot;</span><span class=\"kn\">import</span> <span class=\"nn\">wave</span><span class=\"kn\">import</span> <span class=\"nn\">sys</span><span class=\"kn\">import</span> <span class=\"nn\">pyaudio</span><span class=\"n\">CHUNK</span> <span class=\"o\">=</span> <span class=\"mi\">1024</span><span class=\"n\">FORMAT</span> <span class=\"o\">=</span> <span class=\"n\">pyaudio</span><span class=\"o\">.</span><span class=\"n\">paInt16</span><span class=\"n\">CHANNELS</span> <span class=\"o\">=</span> <span class=\"mi\">1</span> <span class=\"k\">if</span> <span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">platform</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;darwin&#39;</span> <span class=\"k\">else</span> <span class=\"mi\">2</span><span class=\"n\">RATE</span> <span class=\"o\">=</span> <span class=\"mi\">44100</span><span class=\"n\">RECORD_SECONDS</span> <span class=\"o\">=</span> <span class=\"mi\">5</span><span class=\"k\">with</span> <span class=\"n\">wave</span><span class=\"o\">.</span><span class=\"n\">open</span><span class=\"p\">(</span><span class=\"s1\">&#39;output.wav&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;wb&#39;</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">wf</span><span class=\"p\">:</span>    <span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">pyaudio</span><span class=\"o\">.</span><span class=\"n\">PyAudio</span><span class=\"p\">()</span>    <span class=\"n\">wf</span><span class=\"o\">.</span><span class=\"n\">setnchannels</span><span class=\"p\">(</span><span class=\"n\">CHANNELS</span><span class=\"p\">)</span>    <span class=\"n\">wf</span><span class=\"o\">.</span><span class=\"n\">setsampwidth</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">get_sample_size</span><span class=\"p\">(</span><span class=\"n\">FORMAT</span><span class=\"p\">))</span>    <span class=\"n\">wf</span><span class=\"o\">.</span><span class=\"n\">setframerate</span><span class=\"p\">(</span><span class=\"n\">RATE</span><span class=\"p\">)</span>    <span class=\"n\">stream</span> <span class=\"o\">=</span> <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">open</span><span class=\"p\">(</span><span class=\"nb\">format</span><span class=\"o\">=</span><span class=\"n\">FORMAT</span><span class=\"p\">,</span> <span class=\"n\">channels</span><span class=\"o\">=</span><span class=\"n\">CHANNELS</span><span class=\"p\">,</span> <span class=\"n\">rate</span><span class=\"o\">=</span><span class=\"n\">RATE</span><span class=\"p\">,</span> <span class=\"nb\">input</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;Recording...&#39;</span><span class=\"p\">)</span>    <span class=\"k\">for</span> <span class=\"n\">_</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">RATE</span> <span class=\"o\">//</span> <span class=\"n\">CHUNK</span> <span class=\"o\">*</span> <span class=\"n\">RECORD_SECONDS</span><span class=\"p\">):</span>        <span class=\"n\">wf</span><span class=\"o\">.</span><span class=\"n\">writeframes</span><span class=\"p\">(</span><span class=\"n\">stream</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">(</span><span class=\"n\">CHUNK</span><span class=\"p\">))</span>    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;Done&#39;</span><span class=\"p\">)</span>    <span class=\"n\">stream</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>    <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">terminate</span><span class=\"p\">()</span></pre></code></div><!-- wire example --><div id=\"wire-example\" class=\"highlight\"><code><pre><span></span><span class=\"sd\">&quot;&quot;&quot;PyAudio Example: full-duplex wire between input and output.&quot;&quot;&quot;</span><span class=\"kn\">import</span> <span class=\"nn\">sys</span><span class=\"kn\">import</span> <span class=\"nn\">pyaudio</span><span class=\"n\">RECORD_SECONDS</span> <span class=\"o\">=</span> <span class=\"mi\">5</span><span class=\"n\">CHUNK</span> <span class=\"o\">=</span> <span class=\"mi\">1024</span><span class=\"n\">RATE</span> <span class=\"o\">=</span> <span class=\"mi\">44100</span><span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">pyaudio</span><span class=\"o\">.</span><span class=\"n\">PyAudio</span><span class=\"p\">()</span><span class=\"n\">stream</span> <span class=\"o\">=</span> <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">open</span><span class=\"p\">(</span><span class=\"nb\">format</span><span class=\"o\">=</span><span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">get_format_from_width</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">),</span>                <span class=\"n\">channels</span><span class=\"o\">=</span><span class=\"mi\">1</span> <span class=\"k\">if</span> <span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">platform</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;darwin&#39;</span> <span class=\"k\">else</span> <span class=\"mi\">2</span><span class=\"p\">,</span>                <span class=\"n\">rate</span><span class=\"o\">=</span><span class=\"n\">RATE</span><span class=\"p\">,</span>                <span class=\"nb\">input</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>                <span class=\"n\">output</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>                <span class=\"n\">frames_per_buffer</span><span class=\"o\">=</span><span class=\"n\">CHUNK</span><span class=\"p\">)</span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;* recording&#39;</span><span class=\"p\">)</span><span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">RATE</span> <span class=\"o\">/</span> <span class=\"n\">CHUNK</span> <span class=\"o\">*</span> <span class=\"n\">RECORD_SECONDS</span><span class=\"p\">)):</span>    <span class=\"n\">stream</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">stream</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">(</span><span class=\"n\">CHUNK</span><span class=\"p\">))</span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;* done&#39;</span><span class=\"p\">)</span><span class=\"n\">stream</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span><span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">terminate</span><span class=\"p\">()</span></pre></code></div><!-- play wave callback --><div id=\"play-wave-callback-example\" class=\"highlight\"><code><pre><span></span><span class=\"sd\">&quot;&quot;&quot;PyAudio Example: Play a wave file (callback version).&quot;&quot;&quot;</span><span class=\"kn\">import</span> <span class=\"nn\">wave</span><span class=\"kn\">import</span> <span class=\"nn\">time</span><span class=\"kn\">import</span> <span class=\"nn\">sys</span><span class=\"kn\">import</span> <span class=\"nn\">pyaudio</span><span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">argv</span><span class=\"p\">)</span> <span class=\"o\">&lt;</span> <span class=\"mi\">2</span><span class=\"p\">:</span>    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s1\">&#39;Plays a wave file. Usage: </span><span class=\"si\">{</span><span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">argv</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"si\">}</span><span class=\"s1\"> filename.wav&#39;</span><span class=\"p\">)</span>    <span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">exit</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"k\">with</span> <span class=\"n\">wave</span><span class=\"o\">.</span><span class=\"n\">open</span><span class=\"p\">(</span><span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">argv</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"s1\">&#39;rb&#39;</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">wf</span><span class=\"p\">:</span>    <span class=\"c1\"># Define callback for playback (1)</span>    <span class=\"k\">def</span> <span class=\"nf\">callback</span><span class=\"p\">(</span><span class=\"n\">in_data</span><span class=\"p\">,</span> <span class=\"n\">frame_count</span><span class=\"p\">,</span> <span class=\"n\">time_info</span><span class=\"p\">,</span> <span class=\"n\">status</span><span class=\"p\">):</span>        <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">wf</span><span class=\"o\">.</span><span class=\"n\">readframes</span><span class=\"p\">(</span><span class=\"n\">frame_count</span><span class=\"p\">)</span>        <span class=\"c1\"># If len(data) is less than requested frame_count, PyAudio automatically</span>        <span class=\"c1\"># assumes the stream is finished, and the stream stops.</span>        <span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">pyaudio</span><span class=\"o\">.</span><span class=\"n\">paContinue</span><span class=\"p\">)</span>    <span class=\"c1\"># Instantiate PyAudio and initialize PortAudio system resources (2)</span>    <span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">pyaudio</span><span class=\"o\">.</span><span class=\"n\">PyAudio</span><span class=\"p\">()</span>    <span class=\"c1\"># Open stream using callback (3)</span>    <span class=\"n\">stream</span> <span class=\"o\">=</span> <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">open</span><span class=\"p\">(</span><span class=\"nb\">format</span><span class=\"o\">=</span><span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">get_format_from_width</span><span class=\"p\">(</span><span class=\"n\">wf</span><span class=\"o\">.</span><span class=\"n\">getsampwidth</span><span class=\"p\">()),</span>                    <span class=\"n\">channels</span><span class=\"o\">=</span><span class=\"n\">wf</span><span class=\"o\">.</span><span class=\"n\">getnchannels</span><span class=\"p\">(),</span>                    <span class=\"n\">rate</span><span class=\"o\">=</span><span class=\"n\">wf</span><span class=\"o\">.</span><span class=\"n\">getframerate</span><span class=\"p\">(),</span>                    <span class=\"n\">output</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>                    <span class=\"n\">stream_callback</span><span class=\"o\">=</span><span class=\"n\">callback</span><span class=\"p\">)</span>    <span class=\"c1\"># Wait for stream to finish (4)</span>    <span class=\"k\">while</span> <span class=\"n\">stream</span><span class=\"o\">.</span><span class=\"n\">is_active</span><span class=\"p\">():</span>        <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mf\">0.1</span><span class=\"p\">)</span>    <span class=\"c1\"># Close the stream (5)</span>    <span class=\"n\">stream</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>    <span class=\"c1\"># Release PortAudio system resources (6)</span>    <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">terminate</span><span class=\"p\">()</span></pre></code></div><!-- wire callback --><div id=\"wire-callback-example\" class=\"highlight\"><code><pre><span></span><span class=\"sd\">&quot;&quot;&quot;PyAudio Example: Audio wire between input and output. Callback version.&quot;&quot;&quot;</span><span class=\"kn\">import</span> <span class=\"nn\">time</span><span class=\"kn\">import</span> <span class=\"nn\">sys</span><span class=\"kn\">import</span> <span class=\"nn\">pyaudio</span><span class=\"n\">DURATION</span> <span class=\"o\">=</span> <span class=\"mi\">5</span>  <span class=\"c1\"># seconds</span><span class=\"k\">def</span> <span class=\"nf\">callback</span><span class=\"p\">(</span><span class=\"n\">in_data</span><span class=\"p\">,</span> <span class=\"n\">frame_count</span><span class=\"p\">,</span> <span class=\"n\">time_info</span><span class=\"p\">,</span> <span class=\"n\">status</span><span class=\"p\">):</span>    <span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"n\">in_data</span><span class=\"p\">,</span> <span class=\"n\">pyaudio</span><span class=\"o\">.</span><span class=\"n\">paContinue</span><span class=\"p\">)</span><span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">pyaudio</span><span class=\"o\">.</span><span class=\"n\">PyAudio</span><span class=\"p\">()</span><span class=\"n\">stream</span> <span class=\"o\">=</span> <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">open</span><span class=\"p\">(</span><span class=\"nb\">format</span><span class=\"o\">=</span><span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">get_format_from_width</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">),</span>                <span class=\"n\">channels</span><span class=\"o\">=</span><span class=\"mi\">1</span> <span class=\"k\">if</span> <span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">platform</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;darwin&#39;</span> <span class=\"k\">else</span> <span class=\"mi\">2</span><span class=\"p\">,</span>                <span class=\"n\">rate</span><span class=\"o\">=</span><span class=\"mi\">44100</span><span class=\"p\">,</span>                <span class=\"nb\">input</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>                <span class=\"n\">output</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>                <span class=\"n\">stream_callback</span><span class=\"o\">=</span><span class=\"n\">callback</span><span class=\"p\">)</span><span class=\"n\">start</span> <span class=\"o\">=</span> <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">time</span><span class=\"p\">()</span><span class=\"k\">while</span> <span class=\"n\">stream</span><span class=\"o\">.</span><span class=\"n\">is_active</span><span class=\"p\">()</span> <span class=\"ow\">and</span> <span class=\"p\">(</span><span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">time</span><span class=\"p\">()</span> <span class=\"o\">-</span> <span class=\"n\">start</span><span class=\"p\">)</span> <span class=\"o\">&lt;</span> <span class=\"n\">DURATION</span><span class=\"p\">:</span>    <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mf\">0.1</span><span class=\"p\">)</span><span class=\"n\">stream</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span><span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">terminate</span><span class=\"p\">()</span></pre></code></div><!-- channel maps example --><div id=\"channel-maps-example\" class=\"highlight\"><code><pre><span></span><span class=\"sd\">&quot;&quot;&quot;PyAudio Example: macOS-only: Play a wave file with channel maps.&quot;&quot;&quot;</span><span class=\"kn\">import</span> <span class=\"nn\">wave</span><span class=\"kn\">import</span> <span class=\"nn\">sys</span><span class=\"kn\">import</span> <span class=\"nn\">pyaudio</span><span class=\"n\">CHUNK</span> <span class=\"o\">=</span> <span class=\"mi\">1024</span><span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">argv</span><span class=\"p\">)</span> <span class=\"o\">&lt;</span> <span class=\"mi\">2</span><span class=\"p\">:</span>    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s1\">&#39;Plays a wave file. Usage: </span><span class=\"si\">{</span><span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">argv</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"si\">}</span><span class=\"s1\"> filename.wav&#39;</span><span class=\"p\">)</span>    <span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">exit</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"c1\"># standard L-R stereo</span><span class=\"c1\"># channel_map = (0, 1)</span><span class=\"c1\"># reverse: R-L stereo</span><span class=\"c1\"># channel_map = (1, 0)</span><span class=\"c1\"># no audio</span><span class=\"c1\"># channel_map = (-1, -1)</span><span class=\"c1\"># left channel audio --&gt; left speaker; no right channel</span><span class=\"c1\"># channel_map = (0, -1)</span><span class=\"c1\"># right channel audio --&gt; right speaker; no left channel</span><span class=\"c1\"># channel_map = (-1, 1)</span><span class=\"c1\"># left channel audio --&gt; right speaker</span><span class=\"c1\"># channel_map = (-1, 0)</span><span class=\"c1\"># right channel audio --&gt; left speaker</span><span class=\"n\">channel_map</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"c1\"># etc...</span><span class=\"k\">try</span><span class=\"p\">:</span>    <span class=\"n\">stream_info</span> <span class=\"o\">=</span> <span class=\"n\">pyaudio</span><span class=\"o\">.</span><span class=\"n\">PaMacCoreStreamInfo</span><span class=\"p\">(</span>        <span class=\"n\">flags</span><span class=\"o\">=</span><span class=\"n\">pyaudio</span><span class=\"o\">.</span><span class=\"n\">PaMacCoreStreamInfo</span><span class=\"o\">.</span><span class=\"n\">paMacCorePlayNice</span><span class=\"p\">,</span>        <span class=\"n\">channel_map</span><span class=\"o\">=</span><span class=\"n\">channel_map</span><span class=\"p\">)</span><span class=\"k\">except</span> <span class=\"ne\">AttributeError</span><span class=\"p\">:</span>    <span class=\"nb\">print</span><span class=\"p\">(</span>        <span class=\"s1\">&#39;Could not find PaMacCoreStreamInfo. Ensure you are running on macOS.&#39;</span><span class=\"p\">)</span>    <span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">exit</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;Stream Info Flags:&#39;</span><span class=\"p\">,</span> <span class=\"n\">stream_info</span><span class=\"o\">.</span><span class=\"n\">flags</span><span class=\"p\">)</span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;Stream Info Channel Map:&#39;</span><span class=\"p\">,</span> <span class=\"n\">stream_info</span><span class=\"o\">.</span><span class=\"n\">channel_map</span><span class=\"p\">)</span><span class=\"k\">with</span> <span class=\"n\">wave</span><span class=\"o\">.</span><span class=\"n\">open</span><span class=\"p\">(</span><span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">argv</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"s1\">&#39;rb&#39;</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">wf</span><span class=\"p\">:</span>    <span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">pyaudio</span><span class=\"o\">.</span><span class=\"n\">PyAudio</span><span class=\"p\">()</span>    <span class=\"n\">stream</span> <span class=\"o\">=</span> <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">open</span><span class=\"p\">(</span>        <span class=\"nb\">format</span><span class=\"o\">=</span><span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">get_format_from_width</span><span class=\"p\">(</span><span class=\"n\">wf</span><span class=\"o\">.</span><span class=\"n\">getsampwidth</span><span class=\"p\">()),</span>        <span class=\"n\">channels</span><span class=\"o\">=</span><span class=\"n\">wf</span><span class=\"o\">.</span><span class=\"n\">getnchannels</span><span class=\"p\">(),</span>        <span class=\"n\">rate</span><span class=\"o\">=</span><span class=\"n\">wf</span><span class=\"o\">.</span><span class=\"n\">getframerate</span><span class=\"p\">(),</span>        <span class=\"n\">output</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>        <span class=\"n\">output_host_api_specific_stream_info</span><span class=\"o\">=</span><span class=\"n\">stream_info</span><span class=\"p\">)</span>    <span class=\"c1\"># Play stream</span>    <span class=\"k\">while</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">data</span> <span class=\"o\">:=</span> <span class=\"n\">wf</span><span class=\"o\">.</span><span class=\"n\">readframes</span><span class=\"p\">(</span><span class=\"n\">CHUNK</span><span class=\"p\">)):</span>  <span class=\"c1\"># Requires Python 3.8+ for :=</span>        <span class=\"n\">stream</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span>    <span class=\"n\">stream</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>    <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">terminate</span><span class=\"p\">()</span></pre></code></div>      </div>      <a id=\"license\"></a>      <div>        <h2>License</h2>        PyAudio is distributed under the <strong>MIT        License</strong>:        <p>Copyright (c) 2006          <a href=\"https://people.csail.mit.edu/hubert/\">Hubert Pham</a>        </p>        <p>Permission is hereby granted, free of charge, to any person          obtaining a copy of this software and associated          documentation files (the \"Software\"), to deal in the          Software without restriction, including without limitation          the rights to use, copy, modify, merge, publish, distribute,          sublicense, and/or sell copies of the Software, and to          permit persons to whom the Software is furnished to do so,          subject to the following conditions:        </p>        <p>The above copyright notice and this permission notice shall          be included in all copies or substantial portions of the          Software.        </p>        <p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY          KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE          WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR          PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS          OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR          OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR          OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE          SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.        </p>      </div>      <a id=\"ack\"></a>      <div>        <h2>Acknowledgements</h2>        <p>Many thanks to Andrew Baldwin, Alex ThreeD, Timoth&eacute;e Lecomte,        Frank Samuelson, Matthieu Brucher, Chris Stawarz, Barry Walker, Bob        Jamison, Danilo J. S. Bellini, Bastian Bechtold, Christoph Gohlke,        Sebastian Audet, Jason Roehm, Tony Jacobson, Sami Liedes, Michael        Graczyk, Blaise Potard, Matthias Schaff, Timothy Port, Sean Zimmermann,        Jason Hihn, Eiichi Takamori, Mat\u011bj Cepl, Vasily Zakharov, Artur        Janowiec, and Bhanu Victor DiCara for their much appreciated suggestions        and patches&mdash;as well as to others who have written to say        hello!</p>        <p>Special thanks to Felipe Sateler and Justin Mazzola Paluska          for Debian/Ubuntu packaging help.</p>        <p>The development of PyAudio was funded in part by the        Cambridge-MIT Institute and T-Party.</p>      </div>      <a id=\"contact\"></a>      <div>        <h2>Contact</h2> For help with PyAudio, your best bet for a        timely response is to consult or post to        <a href=\"http://www.stackoverflow.com/questions/tagged/pyaudio\">StackOverflow</a>.        <p>Comments, suggestions, and patches welcomed.  Send mail to my first name        at <span class=\"tt\">mit.edu</span>.</p>      </div>    </div>  </body></html>",
  "embeddings": []
}
{
  "libtype": "pypi",
  "libname": "objgraph",
  "url": "https://mg.pov.lt/objgraph/",
  "html": "<!DOCTYPE html><html lang=\"en\">  <head>    <meta charset=\"utf-8\" />    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" /><meta name=\"generator\" content=\"Docutils 0.19: https://docutils.sourceforge.io/\" />    <title>Python Object Graphs &#8212; objgraph 3.6.1 documentation</title>    <link rel=\"stylesheet\" type=\"text/css\" href=\"_static/pygments.css\" />    <link rel=\"stylesheet\" type=\"text/css\" href=\"_static/mg.css\" />        <script data-url_root=\"./\" id=\"documentation_options\" src=\"_static/documentation_options.js\"></script>    <script src=\"_static/jquery.js\"></script>    <script src=\"_static/underscore.js\"></script>    <script src=\"_static/_sphinx_javascript_frameworks_compat.js\"></script>    <script src=\"_static/doctools.js\"></script>    <script src=\"_static/sphinx_highlight.js\"></script>        <link rel=\"search\" title=\"Search\" href=\"search.html\" />    <link rel=\"next\" title=\"objgraph\" href=\"objgraph.html\" />   </head><body>    <div class=\"related\" role=\"navigation\" aria-label=\"related navigation\">      <h3>Navigation</h3>      <ul>        <li class=\"right\" style=\"margin-right: 10px\">          <a href=\"py-modindex.html\" title=\"Python Module Index\"             >modules</a></li>        <li class=\"right\" >          <a href=\"objgraph.html\" title=\"objgraph\"             accesskey=\"N\">next</a> |</li>        <li class=\"nav-item nav-item-0\"><a href=\"#\">home</a> &#187;</li>        <li class=\"nav-item nav-item-this\"><a href=\"\">Python Object Graphs</a></li>       </ul>    </div>      <div class=\"document\">      <div class=\"documentwrapper\">        <div class=\"bodywrapper\">          <div class=\"body\" role=\"main\">              <section id=\"python-object-graphs\"><h1>Python Object Graphs<a class=\"headerlink\" href=\"#python-object-graphs\" title=\"Permalink to this heading\">\u00b6</a></h1><a class=\"reference external image-reference\" href=\"https://github.com/mgedmin/objgraph/actions\"><img alt=\"Build Status\" src=\"https://github.com/mgedmin/objgraph/workflows/build/badge.svg?branch=master\" /></a><a class=\"reference external image-reference\" href=\"https://ci.appveyor.com/project/mgedmin/objgraph\"><img alt=\"Build Status (Windows)\" src=\"https://ci.appveyor.com/api/projects/status/github/mgedmin/objgraph?branch=master&amp;svg=true\" /></a><a class=\"reference external image-reference\" href=\"https://coveralls.io/r/mgedmin/objgraph?branch=master\"><img alt=\"Test Coverage\" src=\"https://coveralls.io/repos/mgedmin/objgraph/badge.svg?branch=master\" /></a><a class=\"reference external image-reference\" href=\"https://readthedocs.org/projects/objgraph/?badge=latest\"><img alt=\"Documentation Status\" src=\"https://readthedocs.org/projects/objgraph/badge/?version=latest\" /></a><p><code class=\"docutils literal notranslate\"><span class=\"pre\">objgraph</span></code> is a module that lets you visually explore Python object graphs.</p><p>You\u2019ll need <a class=\"reference external\" href=\"https://www.graphviz.org/\">graphviz</a> if you want to drawthe pretty graphs.</p><p>I recommend <a class=\"reference external\" href=\"https://pypi.python.org/pypi/xdot\">xdot</a> for interactive use.<code class=\"docutils literal notranslate\"><span class=\"pre\">pip</span> <span class=\"pre\">install</span> <span class=\"pre\">xdot</span></code> should suffice; objgraph will automatically look for itin your <code class=\"docutils literal notranslate\"><span class=\"pre\">PATH</span></code>.</p><section id=\"installation-and-documentation\"><h2>Installation and Documentation<a class=\"headerlink\" href=\"#installation-and-documentation\" title=\"Permalink to this heading\">\u00b6</a></h2><p><code class=\"docutils literal notranslate\"><span class=\"pre\">pip</span> <span class=\"pre\">install</span> <span class=\"pre\">objgraph</span></code> or <a class=\"reference external\" href=\"https://pypi.python.org/pypi/objgraph\">download it from PyPI</a>.</p><p>Documentation lives at <a class=\"reference external\" href=\"https://mg.pov.lt/objgraph\">https://mg.pov.lt/objgraph</a>.</p></section><section id=\"quick-start\"><h2>Quick start<a class=\"headerlink\" href=\"#quick-start\" title=\"Permalink to this heading\">\u00b6</a></h2><p>Try this in a Python shell:</p><div class=\"doctest highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"p\">[]</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"n\">x</span><span class=\"p\">],</span> <span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">=</span><span class=\"n\">x</span><span class=\"p\">)]</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">objgraph</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">objgraph</span><span class=\"o\">.</span><span class=\"n\">show_refs</span><span class=\"p\">([</span><span class=\"n\">y</span><span class=\"p\">],</span> <span class=\"n\">filename</span><span class=\"o\">=</span><span class=\"s1\">&#39;sample-graph.png&#39;</span><span class=\"p\">)</span><span class=\"go\">Graph written to ....dot (... nodes)</span><span class=\"go\">Image generated as sample-graph.png</span></pre></div></div><p>(If you\u2019ve installed <code class=\"docutils literal notranslate\"><span class=\"pre\">xdot</span></code>, omit the filename argument to get theinteractive viewer.)</p><p>You should see a graph like this:</p><figure class=\"align-default\"><img alt=\"[graph of objects reachable from y]\" src=\"_images/sample-graph.png\" /></figure><p>If you prefer to handle your own file output, you can provide a file object tothe <code class=\"docutils literal notranslate\"><span class=\"pre\">output</span></code> parameter of <code class=\"docutils literal notranslate\"><span class=\"pre\">show_refs</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">show_backrefs</span></code> instead of afilename. The contents of this file will contain the graph source in DOT format.</p></section><section id=\"backreferences\"><h2>Backreferences<a class=\"headerlink\" href=\"#backreferences\" title=\"Permalink to this heading\">\u00b6</a></h2><p>Now try</p><div class=\"doctest highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">objgraph</span><span class=\"o\">.</span><span class=\"n\">show_backrefs</span><span class=\"p\">([</span><span class=\"n\">x</span><span class=\"p\">],</span> <span class=\"n\">filename</span><span class=\"o\">=</span><span class=\"s1\">&#39;sample-backref-graph.png&#39;</span><span class=\"p\">)</span><span class=\"gp\">... </span><span class=\"go\">Graph written to ....dot (8 nodes)</span><span class=\"go\">Image generated as sample-backref-graph.png</span></pre></div></div><p>and you\u2019ll see</p><figure class=\"align-default\"><a class=\"reference internal image-reference\" href=\"_images/sample-backref-graph.png\"><img alt=\"[graph of objects from which y is reachable]\" src=\"_images/sample-backref-graph.png\" style=\"width: 465.0px; height: 318.0px;\" /></a></figure></section><section id=\"memory-leak-example\"><h2>Memory leak example<a class=\"headerlink\" href=\"#memory-leak-example\" title=\"Permalink to this heading\">\u00b6</a></h2><p>The original purpose of <a class=\"reference internal\" href=\"objgraph.html#module-objgraph\" title=\"objgraph\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">objgraph</span></code></a> was to help me find memory leaks.The idea was to pick an object in memory that shouldn\u2019t be there and thensee what references are keeping it alive.</p><p>To get a quick overview of the objects in memory, use the imaginatively-named<a class=\"reference internal\" href=\"objgraph.html#objgraph.show_most_common_types\" title=\"objgraph.show_most_common_types\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">show_most_common_types()</span></code></a>:</p><div class=\"doctest highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">objgraph</span><span class=\"o\">.</span><span class=\"n\">show_most_common_types</span><span class=\"p\">()</span> <span class=\"go\">tuple                      5224</span><span class=\"go\">function                   1329</span><span class=\"go\">wrapper_descriptor         967</span><span class=\"go\">dict                       790</span><span class=\"go\">builtin_function_or_method 658</span><span class=\"go\">method_descriptor          340</span><span class=\"go\">weakref                    322</span><span class=\"go\">list                       168</span><span class=\"go\">member_descriptor          167</span><span class=\"go\">type                       163</span></pre></div></div><p>But that\u2019s looking for a small needle in a large haystack.  Can we limitour haystack to objects that were created recently?  Perhaps.</p><p>Let\u2019s define a function that \u201cleaks\u201d memory</p><div class=\"doctest highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">class</span> <span class=\"nc\">MyBigFatObject</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span><span class=\"gp\">... </span>    <span class=\"k\">pass</span><span class=\"gp\">...</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">def</span> <span class=\"nf\">computate_something</span><span class=\"p\">(</span><span class=\"n\">_cache</span><span class=\"o\">=</span><span class=\"p\">{}):</span><span class=\"gp\">... </span>    <span class=\"n\">_cache</span><span class=\"p\">[</span><span class=\"mi\">42</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"n\">foo</span><span class=\"o\">=</span><span class=\"n\">MyBigFatObject</span><span class=\"p\">(),</span><span class=\"gp\">... </span>                      <span class=\"n\">bar</span><span class=\"o\">=</span><span class=\"n\">MyBigFatObject</span><span class=\"p\">())</span><span class=\"gp\">... </span>    <span class=\"c1\"># a very explicit and easy-to-find &quot;leak&quot; but oh well</span><span class=\"gp\">... </span>    <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">MyBigFatObject</span><span class=\"p\">()</span> <span class=\"c1\"># this one doesn&#39;t leak</span></pre></div></div><p>We take a snapshot of all the objects counts that are alive beforewe call our function</p><div class=\"doctest highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">objgraph</span><span class=\"o\">.</span><span class=\"n\">show_growth</span><span class=\"p\">(</span><span class=\"n\">limit</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">)</span> <span class=\"go\">tuple                  5228     +5228</span><span class=\"go\">function               1330     +1330</span><span class=\"go\">wrapper_descriptor      967      +967</span></pre></div></div><p>and see what changes after we call it</p><div class=\"doctest highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">computate_something</span><span class=\"p\">()</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">objgraph</span><span class=\"o\">.</span><span class=\"n\">show_growth</span><span class=\"p\">()</span> <span class=\"go\">MyBigFatObject        2        +2</span><span class=\"go\">dict                797        +1</span></pre></div></div><p>It\u2019s easy to see <code class=\"docutils literal notranslate\"><span class=\"pre\">MyBigFatObject</span></code> instances that appeared and werenot freed.  I can pick one of them at random and trace the reference chainback to one of the garbage collector\u2019s roots.</p><p>For simplicity\u2019s sake let\u2019s assume all of the roots are modules.  <code class=\"docutils literal notranslate\"><span class=\"pre\">objgraph</span></code>provides a function, <a class=\"reference internal\" href=\"objgraph.html#objgraph.is_proper_module\" title=\"objgraph.is_proper_module\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">is_proper_module()</span></code></a>, to check this. Ifyou\u2019ve any examples where that isn\u2019t true, I\u2019d love to hear about them(although see <a class=\"reference internal\" href=\"#leaking-objects\"><span class=\"std std-ref\">Reference counting bugs</span></a>).</p><div class=\"doctest highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">random</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">objgraph</span><span class=\"o\">.</span><span class=\"n\">show_chain</span><span class=\"p\">(</span><span class=\"gp\">... </span>    <span class=\"n\">objgraph</span><span class=\"o\">.</span><span class=\"n\">find_backref_chain</span><span class=\"p\">(</span><span class=\"gp\">... </span>        <span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">choice</span><span class=\"p\">(</span><span class=\"n\">objgraph</span><span class=\"o\">.</span><span class=\"n\">by_type</span><span class=\"p\">(</span><span class=\"s1\">&#39;MyBigFatObject&#39;</span><span class=\"p\">)),</span><span class=\"gp\">... </span>        <span class=\"n\">objgraph</span><span class=\"o\">.</span><span class=\"n\">is_proper_module</span><span class=\"p\">),</span><span class=\"gp\">... </span>    <span class=\"n\">filename</span><span class=\"o\">=</span><span class=\"s1\">&#39;chain.png&#39;</span><span class=\"p\">)</span> <span class=\"go\">Graph written to ...dot (13 nodes)</span><span class=\"go\">Image generated as chain.png</span></pre></div></div><figure class=\"align-default\"><a class=\"reference internal image-reference\" href=\"_images/chain.png\"><img alt=\"[chain of references from a module to a MyBigFatObject instance]\" src=\"_images/chain.png\" style=\"width: 395.0px; height: 556.0px;\" /></a></figure><p>It is perhaps surprising to find <a class=\"reference external\" href=\"https://docs.python.org/3/library/linecache.html#module-linecache\" title=\"(in Python v3.12)\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">linecache</span></code></a> at the end of that chain(apparently <a class=\"reference external\" href=\"https://docs.python.org/3/library/doctest.html#module-doctest\" title=\"(in Python v3.12)\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">doctest</span></code></a> monkey-patches it), but the important things \u2013<code class=\"docutils literal notranslate\"><span class=\"pre\">computate_something</span></code> and its cache dictionary \u2013 are in there.</p><p>There are other tools, perhaps better suited for memory leak hunting:<a class=\"reference external\" href=\"https://pypi.python.org/pypi/guppy\">heapy</a>,<a class=\"reference external\" href=\"https://pypi.python.org/pypi/Dozer\">Dozer</a>.</p></section><section id=\"reference-counting-bugs\"><span id=\"leaking-objects\"></span><h2>Reference counting bugs<a class=\"headerlink\" href=\"#reference-counting-bugs\" title=\"Permalink to this heading\">\u00b6</a></h2><p>Bugs in C-level reference counting may leave objects in memory that do nothave any other objects pointing at them.  You can find these by calling<a class=\"reference internal\" href=\"objgraph.html#objgraph.get_leaking_objects\" title=\"objgraph.get_leaking_objects\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">get_leaking_objects()</span></code></a>, but you\u2019ll have to filter out legitimate GCroots from them, and there are a <em>lot</em> of those:</p><div class=\"doctest highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">roots</span> <span class=\"o\">=</span> <span class=\"n\">objgraph</span><span class=\"o\">.</span><span class=\"n\">get_leaking_objects</span><span class=\"p\">()</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">roots</span><span class=\"p\">)</span> <span class=\"go\">4621</span></pre></div></div><div class=\"doctest highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">objgraph</span><span class=\"o\">.</span><span class=\"n\">show_most_common_types</span><span class=\"p\">(</span><span class=\"n\">objects</span><span class=\"o\">=</span><span class=\"n\">roots</span><span class=\"p\">)</span><span class=\"gp\">... </span><span class=\"go\">tuple          4333</span><span class=\"go\">dict           171</span><span class=\"go\">list           74</span><span class=\"go\">instancemethod 4</span><span class=\"go\">listiterator   2</span><span class=\"go\">MemoryError    1</span><span class=\"go\">Sub            1</span><span class=\"go\">RuntimeError   1</span><span class=\"go\">Param          1</span><span class=\"go\">Add            1</span></pre></div></div><div class=\"doctest highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">objgraph</span><span class=\"o\">.</span><span class=\"n\">show_refs</span><span class=\"p\">(</span><span class=\"n\">roots</span><span class=\"p\">[:</span><span class=\"mi\">3</span><span class=\"p\">],</span> <span class=\"n\">refcounts</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">filename</span><span class=\"o\">=</span><span class=\"s1\">&#39;roots.png&#39;</span><span class=\"p\">)</span><span class=\"gp\">... </span><span class=\"go\">Graph written to ...dot (19 nodes)</span><span class=\"go\">Image generated as roots.png</span></pre></div></div><figure class=\"align-default\"><a class=\"reference internal image-reference\" href=\"_images/roots.png\"><img alt=\"[GC roots and potentially leaked objects]\" src=\"_images/roots.png\" style=\"width: 2321.25px; height: 75.0px;\" /></a></figure></section><section id=\"api-documentation\"><h2>API Documentation<a class=\"headerlink\" href=\"#api-documentation\" title=\"Permalink to this heading\">\u00b6</a></h2><div class=\"toctree-wrapper compound\"><ul><li class=\"toctree-l1\"><a class=\"reference internal\" href=\"objgraph.html\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">objgraph</span></code></a><ul><li class=\"toctree-l2\"><a class=\"reference internal\" href=\"objgraph.html#statistics\">Statistics</a></li><li class=\"toctree-l2\"><a class=\"reference internal\" href=\"objgraph.html#locating-and-filtering-objects\">Locating and Filtering Objects</a></li><li class=\"toctree-l2\"><a class=\"reference internal\" href=\"objgraph.html#traversing-and-displaying-object-graphs\">Traversing and Displaying Object Graphs</a></li></ul></li></ul></div></section><section id=\"more-examples-that-also-double-as-tests\"><h2>More examples, that also double as tests<a class=\"headerlink\" href=\"#more-examples-that-also-double-as-tests\" title=\"Permalink to this heading\">\u00b6</a></h2><div class=\"toctree-wrapper compound\"><ul><li class=\"toctree-l1\"><a class=\"reference internal\" href=\"references.html\">Too many references</a></li><li class=\"toctree-l1\"><a class=\"reference internal\" href=\"references.html#reference-counts\">Reference counts</a></li><li class=\"toctree-l1\"><a class=\"reference internal\" href=\"extra-info.html\">Extra information</a></li><li class=\"toctree-l1\"><a class=\"reference internal\" href=\"highlighting.html\">Highlighting</a></li><li class=\"toctree-l1\"><a class=\"reference internal\" href=\"uncollectable.html\">Uncollectable garbage</a></li><li class=\"toctree-l1\"><a class=\"reference internal\" href=\"generator-sample.html\">Stack frames and generators</a></li><li class=\"toctree-l1\"><a class=\"reference internal\" href=\"chain.html\">Graph searches</a></li><li class=\"toctree-l1\"><a class=\"reference internal\" href=\"quoting.html\">Quoting unsafe characters</a></li></ul></div></section><section id=\"history\"><h2>History<a class=\"headerlink\" href=\"#history\" title=\"Permalink to this heading\">\u00b6</a></h2><p>I\u2019ve developed a set of functions that eventually became objgraph when Iwas hunting for memory leaks in a Python program.  The whole story \u2013 withillustrated examples \u2013 is in this series of blog posts:</p><ul class=\"simple\"><li><p><a class=\"reference external\" href=\"https://mg.pov.lt/blog/hunting-python-memleaks.html\">Hunting memory leaks in Python</a></p></li><li><p><a class=\"reference external\" href=\"https://mg.pov.lt/blog/python-object-graphs.html\">Python object graphs</a></p></li><li><p><a class=\"reference external\" href=\"https://mg.pov.lt/blog/object-graphs-with-graphviz.html\">Object graphs with graphviz</a></p></li></ul><p>And here\u2019s the change log</p><div class=\"toctree-wrapper compound\"><ul><li class=\"toctree-l1\"><a class=\"reference internal\" href=\"CHANGES.html\">Changes</a><ul><li class=\"toctree-l2\"><a class=\"reference internal\" href=\"CHANGES.html#id1\">3.6.1 (2024-02-26)</a></li><li class=\"toctree-l2\"><a class=\"reference internal\" href=\"CHANGES.html#id2\">3.6.0 (2023-06-16)</a></li><li class=\"toctree-l2\"><a class=\"reference internal\" href=\"CHANGES.html#id3\">3.5.0 (2020-10-11)</a></li><li class=\"toctree-l2\"><a class=\"reference internal\" href=\"CHANGES.html#id4\">3.4.1 (2019-04-23)</a></li><li class=\"toctree-l2\"><a class=\"reference internal\" href=\"CHANGES.html#id5\">3.4.0 (2018-02-13)</a></li><li class=\"toctree-l2\"><a class=\"reference internal\" href=\"CHANGES.html#id6\">3.3.0 (2017-12-28)</a></li><li class=\"toctree-l2\"><a class=\"reference internal\" href=\"CHANGES.html#id7\">3.2.0 (2017-12-20)</a></li><li class=\"toctree-l2\"><a class=\"reference internal\" href=\"CHANGES.html#id8\">3.1.2 (2017-11-27)</a></li><li class=\"toctree-l2\"><a class=\"reference internal\" href=\"CHANGES.html#id9\">3.1.1 (2017-10-30)</a></li><li class=\"toctree-l2\"><a class=\"reference internal\" href=\"CHANGES.html#id10\">3.1.0 (2016-12-07)</a></li><li class=\"toctree-l2\"><a class=\"reference internal\" href=\"CHANGES.html#id11\">3.0.1 (2016-09-17)</a></li><li class=\"toctree-l2\"><a class=\"reference internal\" href=\"CHANGES.html#id12\">3.0.0 (2016-04-13)</a></li><li class=\"toctree-l2\"><a class=\"reference internal\" href=\"CHANGES.html#id13\">2.0.1 (2015-07-28)</a></li><li class=\"toctree-l2\"><a class=\"reference internal\" href=\"CHANGES.html#id14\">2.0.0 (2015-04-18)</a></li><li class=\"toctree-l2\"><a class=\"reference internal\" href=\"CHANGES.html#id15\">1.8.1 (2014-05-15)</a></li><li class=\"toctree-l2\"><a class=\"reference internal\" href=\"CHANGES.html#id16\">1.8.0 (2014-02-13)</a></li><li class=\"toctree-l2\"><a class=\"reference internal\" href=\"CHANGES.html#id17\">1.7.2 (2012-10-23)</a></li><li class=\"toctree-l2\"><a class=\"reference internal\" href=\"CHANGES.html#id18\">1.7.1 (2011-12-11)</a></li><li class=\"toctree-l2\"><a class=\"reference internal\" href=\"CHANGES.html#id19\">1.7.0 (2011-03-11)</a></li><li class=\"toctree-l2\"><a class=\"reference internal\" href=\"CHANGES.html#id20\">1.6.0 (2010-12-18)</a></li><li class=\"toctree-l2\"><a class=\"reference internal\" href=\"CHANGES.html#id21\">1.5.1 (2010-12-09)</a></li><li class=\"toctree-l2\"><a class=\"reference internal\" href=\"CHANGES.html#id22\">1.5.0 (2010-12-05)</a></li><li class=\"toctree-l2\"><a class=\"reference internal\" href=\"CHANGES.html#id23\">1.4.0 (2010-11-03)</a></li><li class=\"toctree-l2\"><a class=\"reference internal\" href=\"CHANGES.html#id24\">1.3.1 (2010-07-17)</a></li><li class=\"toctree-l2\"><a class=\"reference internal\" href=\"CHANGES.html#id25\">1.3 (2010-07-13)</a></li><li class=\"toctree-l2\"><a class=\"reference internal\" href=\"CHANGES.html#id26\">1.2 (2009-03-25)</a></li><li class=\"toctree-l2\"><a class=\"reference internal\" href=\"CHANGES.html#id27\">1.1 (2008-09-10)</a></li><li class=\"toctree-l2\"><a class=\"reference internal\" href=\"CHANGES.html#id28\">1.0 (2008-06-14)</a></li></ul></li></ul></div></section><section id=\"support-and-development\"><h2>Support and Development<a class=\"headerlink\" href=\"#support-and-development\" title=\"Permalink to this heading\">\u00b6</a></h2><p>The source code can be found in this Git repository:<a class=\"reference external\" href=\"https://github.com/mgedmin/objgraph\">https://github.com/mgedmin/objgraph</a>.</p><p>To check it out, use <code class=\"docutils literal notranslate\"><span class=\"pre\">git</span> <span class=\"pre\">clone</span> <span class=\"pre\">https://github.com/mgedmin/objgraph</span></code>.</p><p>Report bugs at <a class=\"reference external\" href=\"https://github.com/mgedmin/objgraph/issues\">https://github.com/mgedmin/objgraph/issues</a>.</p><p>For more information, see <a class=\"reference internal\" href=\"HACKING.html#hacking\"><span class=\"std std-ref\">Hacking on objgraph</span></a>.</p><div class=\"toctree-wrapper compound\"></div></section></section>            <div class=\"clearer\"></div>          </div>        </div>      </div>      <div class=\"sphinxsidebar\" role=\"navigation\" aria-label=\"main navigation\">        <div class=\"sphinxsidebarwrapper\">  <div>    <h3><a href=\"#\">Table of Contents</a></h3>    <ul><li><a class=\"reference internal\" href=\"#\">Python Object Graphs</a><ul><li><a class=\"reference internal\" href=\"#installation-and-documentation\">Installation and Documentation</a></li><li><a class=\"reference internal\" href=\"#quick-start\">Quick start</a></li><li><a class=\"reference internal\" href=\"#backreferences\">Backreferences</a></li><li><a class=\"reference internal\" href=\"#memory-leak-example\">Memory leak example</a></li><li><a class=\"reference internal\" href=\"#reference-counting-bugs\">Reference counting bugs</a></li><li><a class=\"reference internal\" href=\"#api-documentation\">API Documentation</a></li><li><a class=\"reference internal\" href=\"#more-examples-that-also-double-as-tests\">More examples, that also double as tests</a></li><li><a class=\"reference internal\" href=\"#history\">History</a></li><li><a class=\"reference internal\" href=\"#support-and-development\">Support and Development</a></li></ul></li></ul>  </div>  <div>    <h4>Next topic</h4>    <p class=\"topless\"><a href=\"objgraph.html\"                          title=\"next chapter\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">objgraph</span></code></a></p>  </div><div id=\"searchbox\" style=\"display: none\" role=\"search\">  <h3 id=\"searchlabel\">Quick search</h3>    <div class=\"searchformwrapper\">    <form class=\"search\" action=\"search.html\" method=\"get\">      <input type=\"text\" name=\"q\" aria-labelledby=\"searchlabel\" autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\"/>      <input type=\"submit\" value=\"Go\" />    </form>    </div></div><script>document.getElementById('searchbox').style.display = \"block\"</script>        </div>      </div>      <div class=\"clearer\"></div>    </div>    <div class=\"related\" role=\"navigation\" aria-label=\"related navigation\">      <h3>Navigation</h3>      <ul>        <li class=\"right\" style=\"margin-right: 10px\">          <a href=\"py-modindex.html\" title=\"Python Module Index\"             >modules</a></li>        <li class=\"right\" >          <a href=\"objgraph.html\" title=\"objgraph\"             >next</a> |</li>        <li class=\"nav-item nav-item-0\"><a href=\"#\">home</a> &#187;</li>        <li class=\"nav-item nav-item-this\"><a href=\"\">Python Object Graphs</a></li>       </ul>    </div>    <div class=\"footer\" role=\"contentinfo\">        &#169; Copyright 2015, Marius Gedminas and contributors.      Created using <a href=\"https://www.sphinx-doc.org/\">Sphinx</a> 5.3.0.    </div>  </body></html>",
  "embeddings": []
}
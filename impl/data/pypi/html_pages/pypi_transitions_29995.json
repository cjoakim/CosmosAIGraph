{
  "libtype": "pypi",
  "libname": "transitions",
  "url": "https://pypi.org/project/transitions/",
  "html": "<!DOCTYPE html><html lang=\"en\" dir=\"ltr\">  <head>    <meta charset=\"utf-8\">    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">    <meta name=\"defaultLanguage\" content=\"en\">    <meta name=\"availableLanguages\" content=\"en, es, fr, ja, pt_BR, uk, el, de, zh_Hans, zh_Hant, ru, he, eo\">    <title>transitions \u00b7 PyPI</title>    <meta name=\"description\" content=\"A lightweight, object-oriented Python state machine implementation with many extensions.\">    <link rel=\"stylesheet\" href=\"/static/css/warehouse-ltr.99b3104d.css\">    <link rel=\"stylesheet\" href=\"/static/css/fontawesome.b50b476c.css\">    <link rel=\"stylesheet\" href=\"https://fonts.googleapis.com/css?family=Source+Sans+3:400,400italic,600,600italic,700,700italic%7CSource+Code+Pro:500\">    <noscript>      <link rel=\"stylesheet\" href=\"/static/css/noscript.0673c9ea.css\">    </noscript>    <link rel=\"icon\" href=\"/static/images/favicon.35549fe8.ico\" type=\"image/x-icon\">    <link rel=\"alternate\" type=\"application/rss+xml\" title=\"RSS: 40 latest updates\" href=\"/rss/updates.xml\">    <link rel=\"alternate\" type=\"application/rss+xml\" title=\"RSS: 40 newest packages\" href=\"/rss/packages.xml\"><link rel=\"alternate\" type=\"application/rss+xml\" title=\"RSS: latest releases for transitions\" href=\"/rss/project/transitions/releases.xml\">    <link rel=\"canonical\" href=\"https://pypi.org/project/transitions/\">    <meta property=\"og:url\" content=\"https://pypi.org/project/transitions/\">    <meta property=\"og:site_name\" content=\"PyPI\">    <meta property=\"og:type\" content=\"website\">    <meta property=\"og:image\" content=\"https://pypi.org/static/images/twitter.abaf4b19.webp\">    <meta property=\"og:title\" content=\"transitions\">    <meta property=\"og:description\" content=\"A lightweight, object-oriented Python state machine implementation with many extensions.\">    <link rel=\"search\" type=\"application/opensearchdescription+xml\" title=\"PyPI\" href=\"/opensearch.xml\">    <script asyncdata-ga-id=\"UA-55961911-1\"data-ga4-id=\"G-RW7D75DF8V\"            src=\"/static/js/warehouse.dd4295c4.js\">    </script><script>MathJax = {  tex: {    inlineMath: [['$', '$'], ['\\\\(', '\\\\)']]  },};</script><script async  src=\"https://cdn.jsdelivr.net/npm/mathjax@3.2.2/es5/tex-svg.js\"  integrity=\"sha256-1CldwzdEg2k1wTmf7s5RWVd7NMXI/7nxxjJM2C4DqII=\"  crossorigin=\"anonymous\"></script><script async src=\"https://www.googletagmanager.com/gtag/js?id=UA-55961911-1\"></script><script async src=\"https://www.googletagmanager.com/gtag/js?id=G-RW7D75DF8V\"></script><script defer src=\"https://www.fastly-insights.com/insights.js?k=6a52360a-f306-421e-8ed5-7417d0d4a4e9&dnt=true\"></script>    <script async        src=\"https://media.ethicalads.io/media/client/v1.4.0/ethicalads.min.js\"        integrity=\"sha256-U3hKDidudIaxBDEzwGJApJgPEf2mWk6cfMWghrAa6i0= sha384-UcmsCqcNRSLW/dV3Lo1oCi2/VaurXbib6p4HyUEOeIa/4OpsrnucrugAefzVZJfI sha512-q4t1L4xEjGV2R4hzqCa41P8jrgFUS8xTb8rdNv4FGvw7FpydVj/kkxBJHOiaoxHa8olCcx1Slk9K+3sNbsM4ug==\"        crossorigin=\"anonymous\"    ></script>  </head>  <body data-controller=\"viewport-toggle\">    <!-- Accessibility: this link should always be the first piece of content inside the body-->    <a href=\"#content\" class=\"skip-to-content\">Skip to main content</a>    <button type=\"button\" class=\"button button--primary button--switch-to-mobile hidden\" data-viewport-toggle-target=\"switchToMobile\" data-action=\"viewport-toggle#switchToMobile\">Switch to mobile version    </button>    <div id=\"sticky-notifications\" class=\"stick-to-top js-stick-to-top\">      <!-- Add browser warning. Will show for ie9 and below -->      <!--[if IE]>      <div class=\"notification-bar notification-bar--warning\" role=\"status\">        <span class=\"notification-bar__icon\">          <i class=\"fa fa-exclamation-triangle\" aria-hidden=\"true\"></i>          <span class=\"sr-only\">Warning</span>        </span>        <span class=\"notification-bar__message\">You are using an unsupported browser, upgrade to a newer version.</span>      </div>      <![endif]-->      <noscript>      <div class=\"notification-bar notification-bar--warning\" role=\"status\">        <span class=\"notification-bar__icon\">          <i class=\"fa fa-exclamation-triangle\" aria-hidden=\"true\"></i>          <span class=\"sr-only\">Warning</span>        </span>        <span class=\"notification-bar__message\">Some features may not work without JavaScript. Please try enabling it if you encounter problems.</span>      </div>      </noscript><div data-html-include=\"/_includes/notification-banners/\"></div>    </div><div data-html-include=\"/_includes/flash-messages/\"></div><div data-html-include=\"/_includes/session-notifications/\"></div>    <header class=\"site-header \">      <div class=\"site-container\">        <div class=\"split-layout\">          <div class=\"split-layout\">            <div>              <a class=\"site-header__logo\" href=\"/\">                <img alt=\"PyPI\" src=\"/static/images/logo-small.2a411bc6.svg\">              </a>            </div>            <form class=\"search-form search-form--primary\" action=\"/search/\" role=\"search\">              <label for=\"search\" class=\"sr-only\">Search PyPI</label>              <input id=\"search\" class=\"search-form__search\" type=\"text\" name=\"q\" placeholder=\"Search projects\" value=\"\" autocomplete=\"off\" autocapitalize=\"off\" spellcheck=\"false\" data-controller=\"search-focus\" data-action=\"keydown@window->search-focus#focusSearchField\" data-search-focus-target=\"searchField\">              <button type=\"submit\" class=\"search-form__button\">                <i class=\"fa fa-search\" aria-hidden=\"true\"></i>                <span class=\"sr-only\">Search</span>              </button>            </form>          </div><div data-html-include=\"/_includes/current-user-indicator/\">            <div id=\"user-indicator\" class=\"horizontal-menu horizontal-menu--light horizontal-menu--tall\">  <nav class=\"horizontal-menu horizontal-menu--light horizontal-menu--tall hide-on-tablet\" aria-label=\"Main navigation\">    <ul>      <li class=\"horizontal-menu__item\"><a href=\"/help/\" class=\"horizontal-menu__link\">Help</a></li>      <li class=\"horizontal-menu__item\"><a href=\"/sponsors/\" class=\"horizontal-menu__link\">Sponsors</a></li>      <li class=\"horizontal-menu__item\"><a href=\"/account/login/\" class=\"horizontal-menu__link\">Log in</a></li>      <li class=\"horizontal-menu__item\"><a href=\"/account/register/\" class=\"horizontal-menu__link\">Register</a></li>    </ul>  </nav>  <nav class=\"dropdown dropdown--on-menu hidden show-on-tablet\" aria-label=\"Main navigation\">    <button type=\"button\" class=\"horizontal-menu__link dropdown__trigger\" aria-haspopup=\"true\" aria-expanded=\"false\" aria-label=\"View menu\">Menu      <span class=\"dropdown__trigger-caret\">        <i class=\"fa fa-caret-down\" aria-hidden=\"true\"></i>      </span>    </button>    <ul class=\"dropdown__content\" aria-hidden=\"true\" aria-label=\"Main menu\">      <li><a class=\"dropdown__link\" href=\"/help/\">Help</a></li>      <li><a class=\"dropdown__link\" href=\"/sponsors/\">Sponsors</a></li>      <li><a class=\"dropdown__link\" href=\"/account/login/\">Log in</a></li>      <li><a class=\"dropdown__link\" href=\"/account/register/\">Register</a></li>    </ul>  </nav></div></div>        </div>      </div>    </header>    <div class=\"mobile-search\">      <form class=\"search-form search-form--fullwidth\" action=\"/search/\" role=\"search\">        <label for=\"mobile-search\" class=\"sr-only\">Search PyPI</label>        <input id=\"mobile-search\" class=\"search-form__search\" type=\"text\" name=\"q\" placeholder=\"Search projects\" value=\"\" autocomplete=\"off\" autocapitalize=\"off\" spellcheck=\"false\">                <button type=\"submit\" class=\"search-form__button\">          <i class=\"fa fa-search\" aria-hidden=\"true\"></i>          <span class=\"sr-only\">Search</span>        </button>      </form>    </div>    <main id=\"content\"><div class=\"hidden\"  data-controller=\"github-repo-stats\"  data-github-repo-stats-github-repo-info-outlet=\".github-repo-info\"  data-github-repo-stats-url-value=\"https://api.github.com/repos/pytransitions/transitions\"  data-github-repo-stats-issue-url-value=\"https://api.github.com/search/issues?q=repo:pytransitions/transitions+type:issue+state:open&amp;per_page=1\"></div><div class=\"banner\">  <div class=\"package-header\">    <div class=\"package-header__left\">      <h1 class=\"package-header__name\">        transitions 0.9.0      </h1>      <div data-controller=\"clipboard\">        <p class=\"package-header__pip-instructions\">          <span id=\"pip-command\" data-clipboard-target=\"source\">pip install transitions</span>          <button type=\"button\" class=\"copy-tooltip copy-tooltip-s\" data-action=\"clipboard#copy\" data-clipboard-target=\"tooltip\" data-clipboard-tooltip-value=\"Copy to clipboard\">            <i class=\"fa fa-copy\" aria-hidden=\"true\"></i>            <span class=\"sr-only\">Copy PIP instructions</span>          </button>        </p>      </div>    </div>    <div class=\"package-header__right\">      <a class=\"status-badge status-badge--good\" href=\"/project/transitions/\">        <span>Latest version</span>      </a>      <p class=\"package-header__date\">Released: <time datetime=\"2022-09-02T09:48:52+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Sep 2, 2022</time>      </p>    </div>  </div></div><div class=\"horizontal-section horizontal-section--grey horizontal-section--thin\">  <div class=\"site-container\"><div data-html-include=\"/_includes/administer-project-include/transitions\"></div>    <div class=\"split-layout split-layout--middle package-description\">      <p class=\"package-description__summary\">A lightweight, object-oriented Python state machine implementation with many extensions.</p><div data-html-include=\"/_includes/edit-project-button/transitions\"></div>    </div>  </div></div><div data-controller=\"project-tabs\">  <div class=\"tabs-container\">    <div class=\"vertical-tabs\">      <div class=\"vertical-tabs__tabs\">        <div class=\"sidebar-section\">          <h3 class=\"sidebar-section__title\">Navigation</h3>          <nav aria-label=\"Navigation for transitions\">            <ul class=\"vertical-tabs__list\" role=\"tablist\">              <li role=\"tab\">                <a id=\"description-tab\" href=\"#description\" data-project-tabs-target=\"tab\" data-action=\"project-tabs#onTabClick\" class=\"vertical-tabs__tab vertical-tabs__tab--with-icon vertical-tabs__tab--is-active\" aria-selected=\"true\" aria-label=\"Project description. Focus will be moved to the description.\">                  <i class=\"fa fa-align-left\" aria-hidden=\"true\"></i>Project description                </a>              </li>              <li role=\"tab\">                <a id=\"history-tab\" href=\"#history\" data-project-tabs-target=\"tab\" data-action=\"project-tabs#onTabClick\" class=\"vertical-tabs__tab vertical-tabs__tab--with-icon\" aria-label=\"Release history. Focus will be moved to the history panel.\">                  <i class=\"fa fa-history\" aria-hidden=\"true\"></i>Release history                </a>              </li>              <li role=\"tab\">                <a id=\"files-tab\" href=\"#files\" data-project-tabs-target=\"tab\" data-action=\"project-tabs#onTabClick\" class=\"vertical-tabs__tab vertical-tabs__tab--with-icon\" aria-label=\"Download files. Focus will be moved to the project files.\">                  <i class=\"fa fa-download\" aria-hidden=\"true\"></i>Download files                </a>              </li>            </ul>          </nav>        </div><div class=\"sidebar-section\">  <h3 class=\"sidebar-section__title\">Project links</h3>  <ul class=\"vertical-tabs__list\">    <li>      <a class=\"vertical-tabs__tab vertical-tabs__tab--with-icon vertical-tabs__tab--condensed\" href=\"http://github.com/pytransitions/transitions\" rel=\"nofollow\">        <i class=\"fas fa-home\" aria-hidden=\"true\"></i>Homepage      </a>    </li>    <li>      <a class=\"vertical-tabs__tab vertical-tabs__tab--with-icon vertical-tabs__tab--condensed\" href=\"https://github.com/pytransitions/transitions/archive/0.9.0.tar.gz\" rel=\"nofollow\">        <i class=\"fas fa-cloud-download-alt\" aria-hidden=\"true\"></i>Download      </a>    </li>  </ul></div><div class=\"sidebar-section\">  <h3 class=\"sidebar-section__title\">Statistics</h3>  <div class=\"hidden github-repo-info\" data-controller=\"github-repo-info\">GitHub statistics:    <ul class=\"vertical-tabs__list\">      <li>        <a class=\"vertical-tabs__tab vertical-tabs__tab--with-icon vertical-tabs__tab--condensed\"           data-github-repo-info-target=\"stargazersUrl\" rel=\"noopener\">          <i class=\"fa fa-star\" aria-hidden=\"true\"></i>          <strong>Stars:</strong>          <span data-github-repo-info-target=\"stargazersCount\"></span>        </a>      </li>      <li>        <a class=\"vertical-tabs__tab vertical-tabs__tab--with-icon vertical-tabs__tab--condensed\"           data-github-repo-info-target=\"forksUrl\" rel=\"noopener\">          <i class=\"fa fa-code-branch\" aria-hidden=\"true\"></i>          <strong>Forks:</strong>          <span data-github-repo-info-target=\"forksCount\"></span>        </a>      </li>      <li>        <a class=\"vertical-tabs__tab vertical-tabs__tab--with-icon vertical-tabs__tab--condensed\"           data-github-repo-info-target=\"openIssuesUrl\" rel=\"noopener\">          <i class=\"fa fa-exclamation-circle\" aria-hidden=\"true\"></i>          <strong>Open issues:</strong>          <span data-github-repo-info-target=\"openIssuesCount\"></span>        </a>      </li>      <li>        <a class=\"vertical-tabs__tab vertical-tabs__tab--with-icon vertical-tabs__tab--condensed\"           data-github-repo-info-target=\"openPRsUrl\" rel=\"noopener\">          <i class=\"fa fa-code-pull-request\" aria-hidden=\"true\"></i>          <strong>Open PRs:</strong>          <span data-github-repo-info-target=\"openPRsCount\"></span>        </a>      </li>    </ul>  </div>  <p>View statistics for this project via <a href=\"https://libraries.io/pypi/transitions\" title=\"External link\" target=\"_blank\" rel=\"noopener\">Libraries.io</a>, or by using <a href=\"https://packaging.python.org/guides/analyzing-pypi-package-downloads/\" target=\"_blank\" rel=\"noopener\">our public dataset on Google BigQuery</a>  </p></div><div class=\"sidebar-section\">  <h3 class=\"sidebar-section__title\">Meta</h3>  <p><strong>License:</strong> MIT License (MIT)</p>    <p><strong>Author:</strong> <a href=\"mailto:tyarkoni@gmail.com\">Tal Yarkoni</a></p>    <p><strong>Maintainer:</strong> <a href=\"mailto:aleneum@gmail.com\">Alexander Neumann</a></p></div><div class=\"sidebar-section\">    <h3 class=\"sidebar-section__title\">Maintainers</h3>      <span class=\"sidebar-section__maintainer\">        <a href=\"/user/aleneum/\" aria-label=\"aleneum\">          <span class=\"sidebar-section__user-gravatar\">            <img src=\"https://pypi-camo.freetls.fastly.net/40ff251e481c7955d29ee67e38991810aeef9880/68747470733a2f2f7365637572652e67726176617461722e636f6d2f6176617461722f39326365343338326663396165336663623163663830343939636137313430643f73697a653d3530\" height=\"50\" width=\"50\" alt=\"Avatar for aleneum from gravatar.com\" title=\"Avatar for aleneum from gravatar.com\">          </span>          <span class=\"sidebar-section__user-gravatar-text\">            aleneum          </span>        </a>      </span>      <span class=\"sidebar-section__maintainer\">        <a href=\"/user/tyarkoni/\" aria-label=\"tyarkoni\">          <span class=\"sidebar-section__user-gravatar\">            <img src=\"https://pypi-camo.freetls.fastly.net/cb53601d7ad572916bbf46f58a23dffb9217d31e/68747470733a2f2f7365637572652e67726176617461722e636f6d2f6176617461722f36363635363234383937333033663831316665336234666462323663393931383f73697a653d3530\" height=\"50\" width=\"50\" alt=\"Avatar for tyarkoni from gravatar.com\" title=\"Avatar for tyarkoni from gravatar.com\">          </span>          <span class=\"sidebar-section__user-gravatar-text\">            tyarkoni          </span>        </a>      </span></div><div class=\"sidebar-section\">  <h3 class=\"sidebar-section__title\">Classifiers</h3>  <ul class=\"sidebar-section__classifiers\">    <li>      <strong>License</strong>      <ul>        <li>          <a href=\"/search/?c=License+%3A%3A+OSI+Approved+%3A%3A+MIT+License\">            OSI Approved :: MIT License          </a>        </li>      </ul>    </li>    <li>      <strong>Programming Language</strong>      <ul>        <li>          <a href=\"/search/?c=Programming+Language+%3A%3A+Python+%3A%3A+2\">            Python :: 2          </a>        </li>        <li>          <a href=\"/search/?c=Programming+Language+%3A%3A+Python+%3A%3A+2.7\">            Python :: 2.7          </a>        </li>        <li>          <a href=\"/search/?c=Programming+Language+%3A%3A+Python+%3A%3A+3\">            Python :: 3          </a>        </li>        <li>          <a href=\"/search/?c=Programming+Language+%3A%3A+Python+%3A%3A+3.3\">            Python :: 3.3          </a>        </li>        <li>          <a href=\"/search/?c=Programming+Language+%3A%3A+Python+%3A%3A+3.4\">            Python :: 3.4          </a>        </li>        <li>          <a href=\"/search/?c=Programming+Language+%3A%3A+Python+%3A%3A+3.5\">            Python :: 3.5          </a>        </li>        <li>          <a href=\"/search/?c=Programming+Language+%3A%3A+Python+%3A%3A+3.6\">            Python :: 3.6          </a>        </li>        <li>          <a href=\"/search/?c=Programming+Language+%3A%3A+Python+%3A%3A+3.7\">            Python :: 3.7          </a>        </li>        <li>          <a href=\"/search/?c=Programming+Language+%3A%3A+Python+%3A%3A+3.8\">            Python :: 3.8          </a>        </li>      </ul>    </li>  </ul></div><div class=\"sidebar-section\" data-ea-publisher=\"psf\" data-ea-type=\"psf\" data-ea-keywords=\"pypi-sidebar\"></div>      </div>      <div class=\"vertical-tabs__panel\">        <!-- mobile menu -->        <nav aria-label=\"Navigation for transitions\">          <ul class=\"vertical-tabs__list\" role=\"tablist\">            <li role=\"tab\">              <a id=\"mobile-description-tab\" href=\"#description\" data-project-tabs-target=\"mobileTab\" data-action=\"project-tabs#onTabClick\" class=\"vertical-tabs__tab vertical-tabs__tab--with-icon vertical-tabs__tab--mobile vertical-tabs__tab--no-top-border vertical-tabs__tab--is-active\" aria-selected=\"true\" aria-label=\"Project description. Focus will be moved to the description.\">                <i class=\"fa fa-align-left\" aria-hidden=\"true\"></i>Project description              </a>            </li>            <li role=\"tab\">              <a id=\"mobile-data-tab\" href=\"#data\" data-project-tabs-target=\"mobileTab\" data-action=\"project-tabs#onTabClick\" class=\"vertical-tabs__tab vertical-tabs__tab--with-icon vertical-tabs__tab--mobile\" aria-label=\"Project details. Focus will be moved to the project details.\">                <i class=\"fa fa-info-circle\" aria-hidden=\"true\"></i>Project details              </a>            </li>            <li role=\"tab\">              <a id=\"mobile-history-tab\" href=\"#history\" data-project-tabs-target=\"mobileTab\" data-action=\"project-tabs#onTabClick\" class=\"vertical-tabs__tab vertical-tabs__tab--with-icon vertical-tabs__tab--mobile\" aria-label=\"Release history. Focus will be moved to the history panel.\">              <i class=\"fa fa-history\" aria-hidden=\"true\"></i>Release history            </a>            </li>            <li role=\"tab\">              <a id=\"mobile-files-tab\" href=\"#files\" data-project-tabs-target=\"mobileTab\" data-action=\"project-tabs#onTabClick\" class=\"vertical-tabs__tab vertical-tabs__tab--with-icon vertical-tabs__tab--mobile\" aria-label=\"Download files. Focus will be moved to the project files.\">                <i class=\"fa fa-download\" aria-hidden=\"true\"></i>Download files              </a>            </li>          </ul>        </nav>        <div id=\"description\" data-project-tabs-target=\"content\" class=\"vertical-tabs__content\" role=\"tabpanel\" aria-labelledby=\"description-tab mobile-description-tab\" tabindex=\"-1\">          <h2 class=\"page-title\">Project description</h2>          <div class=\"project-description\">            <h2>Quickstart</h2><p>They say <a href=\"https://www.google.com/webhp?ie=UTF-8#q=%22a+good+example+is+worth%22&amp;start=20\" rel=nofollow>a good example is worth</a> 100 pages of API documentation, a million directives, or a thousand words.</p><p>Well, \"they\" probably lie... but here's an example anyway:</p><pre lang=python3><span class=kn>from</span> <span class=nn>transitions</span> <span class=kn>import</span> <span class=n>Machine</span><span class=kn>import</span> <span class=nn>random</span><span class=k>class</span> <span class=nc>NarcolepticSuperhero</span><span class=p>(</span><span class=nb>object</span><span class=p>):</span>    <span class=c1># Define some states. Most of the time, narcoleptic superheroes are just like</span>    <span class=c1># everyone else. Except for...</span>    <span class=n>states</span> <span class=o>=</span> <span class=p>[</span><span class=s1>'asleep'</span><span class=p>,</span> <span class=s1>'hanging out'</span><span class=p>,</span> <span class=s1>'hungry'</span><span class=p>,</span> <span class=s1>'sweaty'</span><span class=p>,</span> <span class=s1>'saving the world'</span><span class=p>]</span>    <span class=k>def</span> <span class=fm>__init__</span><span class=p>(</span><span class=bp>self</span><span class=p>,</span> <span class=n>name</span><span class=p>):</span>        <span class=c1># No anonymous superheroes on my watch! Every narcoleptic superhero gets</span>        <span class=c1># a name. Any name at all. SleepyMan. SlumberGirl. You get the idea.</span>        <span class=bp>self</span><span class=o>.</span><span class=n>name</span> <span class=o>=</span> <span class=n>name</span>        <span class=c1># What have we accomplished today?</span>        <span class=bp>self</span><span class=o>.</span><span class=n>kittens_rescued</span> <span class=o>=</span> <span class=mi>0</span>        <span class=c1># Initialize the state machine</span>        <span class=bp>self</span><span class=o>.</span><span class=n>machine</span> <span class=o>=</span> <span class=n>Machine</span><span class=p>(</span><span class=n>model</span><span class=o>=</span><span class=bp>self</span><span class=p>,</span> <span class=n>states</span><span class=o>=</span><span class=n>NarcolepticSuperhero</span><span class=o>.</span><span class=n>states</span><span class=p>,</span> <span class=n>initial</span><span class=o>=</span><span class=s1>'asleep'</span><span class=p>)</span>        <span class=c1># Add some transitions. We could also define these using a static list of</span>        <span class=c1># dictionaries, as we did with states above, and then pass the list to</span>        <span class=c1># the Machine initializer as the transitions= argument.</span>        <span class=c1># At some point, every superhero must rise and shine.</span>        <span class=bp>self</span><span class=o>.</span><span class=n>machine</span><span class=o>.</span><span class=n>add_transition</span><span class=p>(</span><span class=n>trigger</span><span class=o>=</span><span class=s1>'wake_up'</span><span class=p>,</span> <span class=n>source</span><span class=o>=</span><span class=s1>'asleep'</span><span class=p>,</span> <span class=n>dest</span><span class=o>=</span><span class=s1>'hanging out'</span><span class=p>)</span>        <span class=c1># Superheroes need to keep in shape.</span>        <span class=bp>self</span><span class=o>.</span><span class=n>machine</span><span class=o>.</span><span class=n>add_transition</span><span class=p>(</span><span class=s1>'work_out'</span><span class=p>,</span> <span class=s1>'hanging out'</span><span class=p>,</span> <span class=s1>'hungry'</span><span class=p>)</span>        <span class=c1># Those calories won't replenish themselves!</span>        <span class=bp>self</span><span class=o>.</span><span class=n>machine</span><span class=o>.</span><span class=n>add_transition</span><span class=p>(</span><span class=s1>'eat'</span><span class=p>,</span> <span class=s1>'hungry'</span><span class=p>,</span> <span class=s1>'hanging out'</span><span class=p>)</span>        <span class=c1># Superheroes are always on call. ALWAYS. But they're not always</span>        <span class=c1># dressed in work-appropriate clothing.</span>        <span class=bp>self</span><span class=o>.</span><span class=n>machine</span><span class=o>.</span><span class=n>add_transition</span><span class=p>(</span><span class=s1>'distress_call'</span><span class=p>,</span> <span class=s1>'*'</span><span class=p>,</span> <span class=s1>'saving the world'</span><span class=p>,</span>                         <span class=n>before</span><span class=o>=</span><span class=s1>'change_into_super_secret_costume'</span><span class=p>)</span>        <span class=c1># When they get off work, they're all sweaty and disgusting. But before</span>        <span class=c1># they do anything else, they have to meticulously log their latest</span>        <span class=c1># escapades. Because the legal department says so.</span>        <span class=bp>self</span><span class=o>.</span><span class=n>machine</span><span class=o>.</span><span class=n>add_transition</span><span class=p>(</span><span class=s1>'complete_mission'</span><span class=p>,</span> <span class=s1>'saving the world'</span><span class=p>,</span> <span class=s1>'sweaty'</span><span class=p>,</span>                         <span class=n>after</span><span class=o>=</span><span class=s1>'update_journal'</span><span class=p>)</span>        <span class=c1># Sweat is a disorder that can be remedied with water.</span>        <span class=c1># Unless you've had a particularly long day, in which case... bed time!</span>        <span class=bp>self</span><span class=o>.</span><span class=n>machine</span><span class=o>.</span><span class=n>add_transition</span><span class=p>(</span><span class=s1>'clean_up'</span><span class=p>,</span> <span class=s1>'sweaty'</span><span class=p>,</span> <span class=s1>'asleep'</span><span class=p>,</span> <span class=n>conditions</span><span class=o>=</span><span class=p>[</span><span class=s1>'is_exhausted'</span><span class=p>])</span>        <span class=bp>self</span><span class=o>.</span><span class=n>machine</span><span class=o>.</span><span class=n>add_transition</span><span class=p>(</span><span class=s1>'clean_up'</span><span class=p>,</span> <span class=s1>'sweaty'</span><span class=p>,</span> <span class=s1>'hanging out'</span><span class=p>)</span>        <span class=c1># Our NarcolepticSuperhero can fall asleep at pretty much any time.</span>        <span class=bp>self</span><span class=o>.</span><span class=n>machine</span><span class=o>.</span><span class=n>add_transition</span><span class=p>(</span><span class=s1>'nap'</span><span class=p>,</span> <span class=s1>'*'</span><span class=p>,</span> <span class=s1>'asleep'</span><span class=p>)</span>    <span class=k>def</span> <span class=nf>update_journal</span><span class=p>(</span><span class=bp>self</span><span class=p>):</span><span class=w>        </span><span class=sd>\"\"\" Dear Diary, today I saved Mr. Whiskers. Again. \"\"\"</span>        <span class=bp>self</span><span class=o>.</span><span class=n>kittens_rescued</span> <span class=o>+=</span> <span class=mi>1</span>    <span class=nd>@property</span>    <span class=k>def</span> <span class=nf>is_exhausted</span><span class=p>(</span><span class=bp>self</span><span class=p>):</span><span class=w>        </span><span class=sd>\"\"\" Basically a coin toss. \"\"\"</span>        <span class=k>return</span> <span class=n>random</span><span class=o>.</span><span class=n>random</span><span class=p>()</span> <span class=o>&lt;</span> <span class=mf>0.5</span>    <span class=k>def</span> <span class=nf>change_into_super_secret_costume</span><span class=p>(</span><span class=bp>self</span><span class=p>):</span>        <span class=nb>print</span><span class=p>(</span><span class=s2>\"Beauty, eh?\"</span><span class=p>)</span></pre><p>There, now you've baked a state machine into <code>NarcolepticSuperhero</code>. Let's take him/her/it out for a spin...</p><pre lang=python3><span class=o>&gt;&gt;&gt;</span> <span class=n>batman</span> <span class=o>=</span> <span class=n>NarcolepticSuperhero</span><span class=p>(</span><span class=s2>\"Batman\"</span><span class=p>)</span><span class=o>&gt;&gt;&gt;</span> <span class=n>batman</span><span class=o>.</span><span class=n>state</span><span class=s1>'asleep'</span><span class=o>&gt;&gt;&gt;</span> <span class=n>batman</span><span class=o>.</span><span class=n>wake_up</span><span class=p>()</span><span class=o>&gt;&gt;&gt;</span> <span class=n>batman</span><span class=o>.</span><span class=n>state</span><span class=s1>'hanging out'</span><span class=o>&gt;&gt;&gt;</span> <span class=n>batman</span><span class=o>.</span><span class=n>nap</span><span class=p>()</span><span class=o>&gt;&gt;&gt;</span> <span class=n>batman</span><span class=o>.</span><span class=n>state</span><span class=s1>'asleep'</span><span class=o>&gt;&gt;&gt;</span> <span class=n>batman</span><span class=o>.</span><span class=n>clean_up</span><span class=p>()</span><span class=n>MachineError</span><span class=p>:</span> <span class=s2>\"Can't trigger event clean_up from state asleep!\"</span><span class=o>&gt;&gt;&gt;</span> <span class=n>batman</span><span class=o>.</span><span class=n>wake_up</span><span class=p>()</span><span class=o>&gt;&gt;&gt;</span> <span class=n>batman</span><span class=o>.</span><span class=n>work_out</span><span class=p>()</span><span class=o>&gt;&gt;&gt;</span> <span class=n>batman</span><span class=o>.</span><span class=n>state</span><span class=s1>'hungry'</span><span class=c1># Batman still hasn't done anything useful...</span><span class=o>&gt;&gt;&gt;</span> <span class=n>batman</span><span class=o>.</span><span class=n>kittens_rescued</span><span class=mi>0</span><span class=c1># We now take you live to the scene of a horrific kitten entreement...</span><span class=o>&gt;&gt;&gt;</span> <span class=n>batman</span><span class=o>.</span><span class=n>distress_call</span><span class=p>()</span><span class=s1>'Beauty, eh?'</span><span class=o>&gt;&gt;&gt;</span> <span class=n>batman</span><span class=o>.</span><span class=n>state</span><span class=s1>'saving the world'</span><span class=c1># Back to the crib.</span><span class=o>&gt;&gt;&gt;</span> <span class=n>batman</span><span class=o>.</span><span class=n>complete_mission</span><span class=p>()</span><span class=o>&gt;&gt;&gt;</span> <span class=n>batman</span><span class=o>.</span><span class=n>state</span><span class=s1>'sweaty'</span><span class=o>&gt;&gt;&gt;</span> <span class=n>batman</span><span class=o>.</span><span class=n>clean_up</span><span class=p>()</span><span class=o>&gt;&gt;&gt;</span> <span class=n>batman</span><span class=o>.</span><span class=n>state</span><span class=s1>'asleep'</span>   <span class=c1># Too tired to shower!</span><span class=c1># Another productive day, Alfred.</span><span class=o>&gt;&gt;&gt;</span> <span class=n>batman</span><span class=o>.</span><span class=n>kittens_rescued</span><span class=mi>1</span></pre><p>While we cannot read the mind of the actual batman, we surely can visualize the current state of our <code>NarcolepticSuperhero</code>.</p><p><img src=\"https://pypi-camo.freetls.fastly.net/32e232b36833fcb4efa3114998194bd70cf55dfc/68747470733a2f2f757365722d696d616765732e67697468756275736572636f6e74656e742e636f6d2f3230353938362f3130343933323330322d63326632343538302d353961372d313165622d383936332d3564636537333862393330352e706e67\" alt=\"batman diagram\"></p><p>Have a look at the <a href=#diagrams rel=nofollow>Diagrams</a> extensions if you want to know how.</p><h2>The non-quickstart</h2><h3>Basic initialization</h3><p>Getting a state machine up and running is pretty simple. Let's say you have the object <code>lump</code> (an instance of class <code>Matter</code>), and you want to manage its states:</p><pre lang=python3><span class=k>class</span> <span class=nc>Matter</span><span class=p>(</span><span class=nb>object</span><span class=p>):</span>    <span class=k>pass</span><span class=n>lump</span> <span class=o>=</span> <span class=n>Matter</span><span class=p>()</span></pre><p>You can initialize a (<em>minimal</em>) working state machine bound to <code>lump</code> like this:</p><pre lang=python3><span class=kn>from</span> <span class=nn>transitions</span> <span class=kn>import</span> <span class=n>Machine</span><span class=n>machine</span> <span class=o>=</span> <span class=n>Machine</span><span class=p>(</span><span class=n>model</span><span class=o>=</span><span class=n>lump</span><span class=p>,</span> <span class=n>states</span><span class=o>=</span><span class=p>[</span><span class=s1>'solid'</span><span class=p>,</span> <span class=s1>'liquid'</span><span class=p>,</span> <span class=s1>'gas'</span><span class=p>,</span> <span class=s1>'plasma'</span><span class=p>],</span> <span class=n>initial</span><span class=o>=</span><span class=s1>'solid'</span><span class=p>)</span><span class=c1># Lump now has state!</span><span class=n>lump</span><span class=o>.</span><span class=n>state</span><span class=o>&gt;&gt;&gt;</span> <span class=s1>'solid'</span></pre><p>I say \"minimal\", because while this state machine is technically operational, it doesn't actually <em>do</em> anything. It starts in the <code>'solid'</code> state, but won't ever move into another state, because no transitions are defined... yet!</p><p>Let's try again.</p><pre lang=python3><span class=c1># The states</span><span class=n>states</span><span class=o>=</span><span class=p>[</span><span class=s1>'solid'</span><span class=p>,</span> <span class=s1>'liquid'</span><span class=p>,</span> <span class=s1>'gas'</span><span class=p>,</span> <span class=s1>'plasma'</span><span class=p>]</span><span class=c1># And some transitions between states. We're lazy, so we'll leave out</span><span class=c1># the inverse phase transitions (freezing, condensation, etc.).</span><span class=n>transitions</span> <span class=o>=</span> <span class=p>[</span>    <span class=p>{</span> <span class=s1>'trigger'</span><span class=p>:</span> <span class=s1>'melt'</span><span class=p>,</span> <span class=s1>'source'</span><span class=p>:</span> <span class=s1>'solid'</span><span class=p>,</span> <span class=s1>'dest'</span><span class=p>:</span> <span class=s1>'liquid'</span> <span class=p>},</span>    <span class=p>{</span> <span class=s1>'trigger'</span><span class=p>:</span> <span class=s1>'evaporate'</span><span class=p>,</span> <span class=s1>'source'</span><span class=p>:</span> <span class=s1>'liquid'</span><span class=p>,</span> <span class=s1>'dest'</span><span class=p>:</span> <span class=s1>'gas'</span> <span class=p>},</span>    <span class=p>{</span> <span class=s1>'trigger'</span><span class=p>:</span> <span class=s1>'sublimate'</span><span class=p>,</span> <span class=s1>'source'</span><span class=p>:</span> <span class=s1>'solid'</span><span class=p>,</span> <span class=s1>'dest'</span><span class=p>:</span> <span class=s1>'gas'</span> <span class=p>},</span>    <span class=p>{</span> <span class=s1>'trigger'</span><span class=p>:</span> <span class=s1>'ionize'</span><span class=p>,</span> <span class=s1>'source'</span><span class=p>:</span> <span class=s1>'gas'</span><span class=p>,</span> <span class=s1>'dest'</span><span class=p>:</span> <span class=s1>'plasma'</span> <span class=p>}</span><span class=p>]</span><span class=c1># Initialize</span><span class=n>machine</span> <span class=o>=</span> <span class=n>Machine</span><span class=p>(</span><span class=n>lump</span><span class=p>,</span> <span class=n>states</span><span class=o>=</span><span class=n>states</span><span class=p>,</span> <span class=n>transitions</span><span class=o>=</span><span class=n>transitions</span><span class=p>,</span> <span class=n>initial</span><span class=o>=</span><span class=s1>'liquid'</span><span class=p>)</span><span class=c1># Now lump maintains state...</span><span class=n>lump</span><span class=o>.</span><span class=n>state</span><span class=o>&gt;&gt;&gt;</span> <span class=s1>'liquid'</span><span class=c1># And that state can change...</span><span class=n>lump</span><span class=o>.</span><span class=n>evaporate</span><span class=p>()</span><span class=n>lump</span><span class=o>.</span><span class=n>state</span><span class=o>&gt;&gt;&gt;</span> <span class=s1>'gas'</span><span class=n>lump</span><span class=o>.</span><span class=n>trigger</span><span class=p>(</span><span class=s1>'ionize'</span><span class=p>)</span><span class=n>lump</span><span class=o>.</span><span class=n>state</span><span class=o>&gt;&gt;&gt;</span> <span class=s1>'plasma'</span></pre><p>Notice the shiny new methods attached to the <code>Matter</code> instance (<code>evaporate()</code>, <code>ionize()</code>, etc.). Each method triggers the corresponding transition. You don't have to explicitly define these methods anywhere; the name of each transition is bound to the model passed to the <code>Machine</code> initializer (in this case, <code>lump</code>).To be more precise, your model <strong>should not</strong> already contain methods with the same name as event triggers since <code>transitions</code> will only attach convenience methods to your model if the spot is not already taken.If you want to modify that behaviour, have a look at the <a href=\"examples/Frequently%20asked%20questions.ipynb\" rel=nofollow>FAQ</a>.Furthermore, there is a method called <code>trigger</code> now attached to your model (if it hasn't been there before).This method lets you execute transitions by name in case dynamic triggering is required.</p><h3><a rel=nofollow></a>States</h3><p>The soul of any good state machine (and of many bad ones, no doubt) is a set of states. Above, we defined the valid model states by passing a list of strings to the <code>Machine</code> initializer. But internally, states are actually represented as <code>State</code> objects.</p><p>You can initialize and modify States in a number of ways. Specifically, you can:</p><ul><li>pass a string to the <code>Machine</code> initializer giving the name(s) of the state(s), or</li><li>directly initialize each new <code>State</code> object, or</li><li>pass a dictionary with initialization arguments</li></ul><p>The following snippets illustrate several ways to achieve the same goal:</p><pre lang=python3><span class=c1># import Machine and State class</span><span class=kn>from</span> <span class=nn>transitions</span> <span class=kn>import</span> <span class=n>Machine</span><span class=p>,</span> <span class=n>State</span><span class=c1># Create a list of 3 states to pass to the Machine</span><span class=c1># initializer. We can mix types; in this case, we</span><span class=c1># pass one State, one string, and one dict.</span><span class=n>states</span> <span class=o>=</span> <span class=p>[</span>    <span class=n>State</span><span class=p>(</span><span class=n>name</span><span class=o>=</span><span class=s1>'solid'</span><span class=p>),</span>    <span class=s1>'liquid'</span><span class=p>,</span>    <span class=p>{</span> <span class=s1>'name'</span><span class=p>:</span> <span class=s1>'gas'</span><span class=p>}</span>    <span class=p>]</span><span class=n>machine</span> <span class=o>=</span> <span class=n>Machine</span><span class=p>(</span><span class=n>lump</span><span class=p>,</span> <span class=n>states</span><span class=p>)</span><span class=c1># This alternative example illustrates more explicit</span><span class=c1># addition of states and state callbacks, but the net</span><span class=c1># result is identical to the above.</span><span class=n>machine</span> <span class=o>=</span> <span class=n>Machine</span><span class=p>(</span><span class=n>lump</span><span class=p>)</span><span class=n>solid</span> <span class=o>=</span> <span class=n>State</span><span class=p>(</span><span class=s1>'solid'</span><span class=p>)</span><span class=n>liquid</span> <span class=o>=</span> <span class=n>State</span><span class=p>(</span><span class=s1>'liquid'</span><span class=p>)</span><span class=n>gas</span> <span class=o>=</span> <span class=n>State</span><span class=p>(</span><span class=s1>'gas'</span><span class=p>)</span><span class=n>machine</span><span class=o>.</span><span class=n>add_states</span><span class=p>([</span><span class=n>solid</span><span class=p>,</span> <span class=n>liquid</span><span class=p>,</span> <span class=n>gas</span><span class=p>])</span></pre><p>States are initialized <em>once</em> when added to the machine and will persist until they are removed from it. In other words: if you alter the attributes of a state object, this change will NOT be reset the next time you enter that state. Have a look at how to <a href=#state-features rel=nofollow>extend state features</a> in case you require some other behaviour.</p><h4><a rel=nofollow></a>Callbacks</h4><p>A <code>State</code> can also be associated with a list of <code>enter</code> and <code>exit</code> callbacks, which are called whenever the state machine enters or leaves that state. You can specify callbacks during initialization by passing them to a <code>State</code> object constructor, in a state property dictionary, or add them later.</p><p>For convenience, whenever a new <code>State</code> is added to a <code>Machine</code>, the methods <code>on_enter_\u00abstate name\u00bb</code> and <code>on_exit_\u00abstate name\u00bb</code> are dynamically created on the Machine (not on the model!), which allow you to dynamically add new enter and exit callbacks later if you need them.</p><pre lang=python3><span class=c1># Our old Matter class, now with  a couple of new methods we</span><span class=c1># can trigger when entering or exit states.</span><span class=k>class</span> <span class=nc>Matter</span><span class=p>(</span><span class=nb>object</span><span class=p>):</span>    <span class=k>def</span> <span class=nf>say_hello</span><span class=p>(</span><span class=bp>self</span><span class=p>):</span> <span class=nb>print</span><span class=p>(</span><span class=s2>\"hello, new state!\"</span><span class=p>)</span>    <span class=k>def</span> <span class=nf>say_goodbye</span><span class=p>(</span><span class=bp>self</span><span class=p>):</span> <span class=nb>print</span><span class=p>(</span><span class=s2>\"goodbye, old state!\"</span><span class=p>)</span><span class=n>lump</span> <span class=o>=</span> <span class=n>Matter</span><span class=p>()</span><span class=c1># Same states as above, but now we give StateA an exit callback</span><span class=n>states</span> <span class=o>=</span> <span class=p>[</span>    <span class=n>State</span><span class=p>(</span><span class=n>name</span><span class=o>=</span><span class=s1>'solid'</span><span class=p>,</span> <span class=n>on_exit</span><span class=o>=</span><span class=p>[</span><span class=s1>'say_goodbye'</span><span class=p>]),</span>    <span class=s1>'liquid'</span><span class=p>,</span>    <span class=p>{</span> <span class=s1>'name'</span><span class=p>:</span> <span class=s1>'gas'</span><span class=p>,</span> <span class=s1>'on_exit'</span><span class=p>:</span> <span class=p>[</span><span class=s1>'say_goodbye'</span><span class=p>]}</span>    <span class=p>]</span><span class=n>machine</span> <span class=o>=</span> <span class=n>Machine</span><span class=p>(</span><span class=n>lump</span><span class=p>,</span> <span class=n>states</span><span class=o>=</span><span class=n>states</span><span class=p>)</span><span class=n>machine</span><span class=o>.</span><span class=n>add_transition</span><span class=p>(</span><span class=s1>'sublimate'</span><span class=p>,</span> <span class=s1>'solid'</span><span class=p>,</span> <span class=s1>'gas'</span><span class=p>)</span><span class=c1># Callbacks can also be added after initialization using</span><span class=c1># the dynamically added on_enter_ and on_exit_ methods.</span><span class=c1># Note that the initial call to add the callback is made</span><span class=c1># on the Machine and not on the model.</span><span class=n>machine</span><span class=o>.</span><span class=n>on_enter_gas</span><span class=p>(</span><span class=s1>'say_hello'</span><span class=p>)</span><span class=c1># Test out the callbacks...</span><span class=n>machine</span><span class=o>.</span><span class=n>set_state</span><span class=p>(</span><span class=s1>'solid'</span><span class=p>)</span><span class=n>lump</span><span class=o>.</span><span class=n>sublimate</span><span class=p>()</span><span class=o>&gt;&gt;&gt;</span> <span class=s1>'goodbye, old state!'</span><span class=o>&gt;&gt;&gt;</span> <span class=s1>'hello, new state!'</span></pre><p>Note that <code>on_enter_\u00abstate name\u00bb</code> callback will <em>not</em> fire when a Machine is first initialized. For example if you have an <code>on_enter_A()</code> callback defined, and initialize the <code>Machine</code> with <code>initial='A'</code>, <code>on_enter_A()</code> will not be fired until the next time you enter state <code>A</code>. (If you need to make sure <code>on_enter_A()</code> fires at initialization, you can simply create a dummy initial state and then explicitly call <code>to_A()</code> inside the <code>__init__</code> method.)</p><p>In addition to passing in callbacks when initializing a <code>State</code>, or adding them dynamically, it's also possible to define callbacks in the model class itself, which may increase code clarity. For example:</p><pre lang=python3><span class=k>class</span> <span class=nc>Matter</span><span class=p>(</span><span class=nb>object</span><span class=p>):</span>    <span class=k>def</span> <span class=nf>say_hello</span><span class=p>(</span><span class=bp>self</span><span class=p>):</span> <span class=nb>print</span><span class=p>(</span><span class=s2>\"hello, new state!\"</span><span class=p>)</span>    <span class=k>def</span> <span class=nf>say_goodbye</span><span class=p>(</span><span class=bp>self</span><span class=p>):</span> <span class=nb>print</span><span class=p>(</span><span class=s2>\"goodbye, old state!\"</span><span class=p>)</span>    <span class=k>def</span> <span class=nf>on_enter_A</span><span class=p>(</span><span class=bp>self</span><span class=p>):</span> <span class=nb>print</span><span class=p>(</span><span class=s2>\"We've just entered state A!\"</span><span class=p>)</span><span class=n>lump</span> <span class=o>=</span> <span class=n>Matter</span><span class=p>()</span><span class=n>machine</span> <span class=o>=</span> <span class=n>Machine</span><span class=p>(</span><span class=n>lump</span><span class=p>,</span> <span class=n>states</span><span class=o>=</span><span class=p>[</span><span class=s1>'A'</span><span class=p>,</span> <span class=s1>'B'</span><span class=p>,</span> <span class=s1>'C'</span><span class=p>])</span></pre><p>Now, any time <code>lump</code> transitions to state <code>A</code>, the <code>on_enter_A()</code> method defined in the <code>Matter</code> class will fire.</p><h4><a rel=nofollow></a>Checking state</h4><p>You can always check the current state of the model by either:</p><ul><li>inspecting the <code>.state</code> attribute, or</li><li>calling <code>is_\u00abstate name\u00bb()</code></li></ul><p>And if you want to retrieve the actual <code>State</code> object for the current state, you can do that through the <code>Machine</code> instance's <code>get_state()</code> method.</p><pre lang=python3><span class=n>lump</span><span class=o>.</span><span class=n>state</span><span class=o>&gt;&gt;&gt;</span> <span class=s1>'solid'</span><span class=n>lump</span><span class=o>.</span><span class=n>is_gas</span><span class=p>()</span><span class=o>&gt;&gt;&gt;</span> <span class=kc>False</span><span class=n>lump</span><span class=o>.</span><span class=n>is_solid</span><span class=p>()</span><span class=o>&gt;&gt;&gt;</span> <span class=kc>True</span><span class=n>machine</span><span class=o>.</span><span class=n>get_state</span><span class=p>(</span><span class=n>lump</span><span class=o>.</span><span class=n>state</span><span class=p>)</span><span class=o>.</span><span class=n>name</span><span class=o>&gt;&gt;&gt;</span> <span class=s1>'solid'</span></pre><p>If you'd like you can choose your own state attribute name by passing the <code>model_attribute</code> argument while initializing the <code>Machine</code>. This will also change the name of <code>is_\u00abstate name\u00bb()</code> to <code>is_\u00abmodel_attribute\u00bb_\u00abstate name\u00bb()</code> though. Similarly, auto transitions will be named <code>to_\u00abmodel_attribute\u00bb_\u00abstate name\u00bb()</code> instead of <code>to_\u00abstate name\u00bb()</code>. This is done to allow multiple machines to work on the same model with individual state attribute names.</p><pre lang=python3><span class=n>lump</span> <span class=o>=</span> <span class=n>Matter</span><span class=p>()</span><span class=n>machine</span> <span class=o>=</span> <span class=n>Machine</span><span class=p>(</span><span class=n>lump</span><span class=p>,</span> <span class=n>states</span><span class=o>=</span><span class=p>[</span><span class=s1>'solid'</span><span class=p>,</span> <span class=s1>'liquid'</span><span class=p>,</span> <span class=s1>'gas'</span><span class=p>],</span>  <span class=n>model_attribute</span><span class=o>=</span><span class=s1>'matter_state'</span><span class=p>,</span> <span class=n>initial</span><span class=o>=</span><span class=s1>'solid'</span><span class=p>)</span><span class=n>lump</span><span class=o>.</span><span class=n>matter_state</span><span class=o>&gt;&gt;&gt;</span> <span class=s1>'solid'</span><span class=c1># with a custom 'model_attribute', states can also be checked like this:</span><span class=n>lump</span><span class=o>.</span><span class=n>is_matter_state_solid</span><span class=p>()</span><span class=o>&gt;&gt;&gt;</span> <span class=kc>True</span><span class=n>lump</span><span class=o>.</span><span class=n>to_matter_state_gas</span><span class=p>()</span><span class=o>&gt;&gt;&gt;</span> <span class=kc>True</span></pre><h4><a rel=nofollow></a>Enumerations</h4><p>So far we have seen how we can give state names and use these names to work with our state machine.If you favour stricter typing and more IDE code completion (or you just can't type 'sesquipedalophobia' any longer because the word scares you) using <a href=\"https://docs.python.org/3/library/enum.html\" rel=nofollow>Enumerations</a> might be what you are looking for:</p><pre lang=python3><span class=kn>import</span> <span class=nn>enum</span>  <span class=c1># Python 2.7 users need to have 'enum34' installed</span><span class=kn>from</span> <span class=nn>transitions</span> <span class=kn>import</span> <span class=n>Machine</span><span class=k>class</span> <span class=nc>States</span><span class=p>(</span><span class=n>enum</span><span class=o>.</span><span class=n>Enum</span><span class=p>):</span>    <span class=n>ERROR</span> <span class=o>=</span> <span class=mi>0</span>    <span class=n>RED</span> <span class=o>=</span> <span class=mi>1</span>    <span class=n>YELLOW</span> <span class=o>=</span> <span class=mi>2</span>    <span class=n>GREEN</span> <span class=o>=</span> <span class=mi>3</span><span class=n>transitions</span> <span class=o>=</span> <span class=p>[[</span><span class=s1>'proceed'</span><span class=p>,</span> <span class=n>States</span><span class=o>.</span><span class=n>RED</span><span class=p>,</span> <span class=n>States</span><span class=o>.</span><span class=n>YELLOW</span><span class=p>],</span>               <span class=p>[</span><span class=s1>'proceed'</span><span class=p>,</span> <span class=n>States</span><span class=o>.</span><span class=n>YELLOW</span><span class=p>,</span> <span class=n>States</span><span class=o>.</span><span class=n>GREEN</span><span class=p>],</span>               <span class=p>[</span><span class=s1>'error'</span><span class=p>,</span> <span class=s1>'*'</span><span class=p>,</span> <span class=n>States</span><span class=o>.</span><span class=n>ERROR</span><span class=p>]]</span><span class=n>m</span> <span class=o>=</span> <span class=n>Machine</span><span class=p>(</span><span class=n>states</span><span class=o>=</span><span class=n>States</span><span class=p>,</span> <span class=n>transitions</span><span class=o>=</span><span class=n>transitions</span><span class=p>,</span> <span class=n>initial</span><span class=o>=</span><span class=n>States</span><span class=o>.</span><span class=n>RED</span><span class=p>)</span><span class=k>assert</span> <span class=n>m</span><span class=o>.</span><span class=n>is_RED</span><span class=p>()</span><span class=k>assert</span> <span class=n>m</span><span class=o>.</span><span class=n>state</span> <span class=ow>is</span> <span class=n>States</span><span class=o>.</span><span class=n>RED</span><span class=n>state</span> <span class=o>=</span> <span class=n>m</span><span class=o>.</span><span class=n>get_state</span><span class=p>(</span><span class=n>States</span><span class=o>.</span><span class=n>RED</span><span class=p>)</span>  <span class=c1># get transitions.State object</span><span class=nb>print</span><span class=p>(</span><span class=n>state</span><span class=o>.</span><span class=n>name</span><span class=p>)</span>  <span class=c1># &gt;&gt;&gt; RED</span><span class=n>m</span><span class=o>.</span><span class=n>proceed</span><span class=p>()</span><span class=n>m</span><span class=o>.</span><span class=n>proceed</span><span class=p>()</span><span class=k>assert</span> <span class=n>m</span><span class=o>.</span><span class=n>is_GREEN</span><span class=p>()</span><span class=n>m</span><span class=o>.</span><span class=n>error</span><span class=p>()</span><span class=k>assert</span> <span class=n>m</span><span class=o>.</span><span class=n>state</span> <span class=ow>is</span> <span class=n>States</span><span class=o>.</span><span class=n>ERROR</span></pre><p>You can mix enums and strings if you like (e.g. <code>[States.RED, 'ORANGE', States.YELLOW, States.GREEN]</code>) but note that internally, <code>transitions</code> will still handle states by name (<code>enum.Enum.name</code>).Thus, it is not possible to have the states <code>'GREEN'</code> and <code>States.GREEN</code> at the same time.</p><h3><a rel=nofollow></a>Transitions</h3><p>Some of the above examples already illustrate the use of transitions in passing, but here we'll explore them in more detail.</p><p>As with states, each transition is represented internally as its own object \u2013 an instance of class <code>Transition</code>. The quickest way to initialize a set of transitions is to pass a dictionary, or list of dictionaries, to the <code>Machine</code> initializer. We already saw this above:</p><pre lang=python3><span class=n>transitions</span> <span class=o>=</span> <span class=p>[</span>    <span class=p>{</span> <span class=s1>'trigger'</span><span class=p>:</span> <span class=s1>'melt'</span><span class=p>,</span> <span class=s1>'source'</span><span class=p>:</span> <span class=s1>'solid'</span><span class=p>,</span> <span class=s1>'dest'</span><span class=p>:</span> <span class=s1>'liquid'</span> <span class=p>},</span>    <span class=p>{</span> <span class=s1>'trigger'</span><span class=p>:</span> <span class=s1>'evaporate'</span><span class=p>,</span> <span class=s1>'source'</span><span class=p>:</span> <span class=s1>'liquid'</span><span class=p>,</span> <span class=s1>'dest'</span><span class=p>:</span> <span class=s1>'gas'</span> <span class=p>},</span>    <span class=p>{</span> <span class=s1>'trigger'</span><span class=p>:</span> <span class=s1>'sublimate'</span><span class=p>,</span> <span class=s1>'source'</span><span class=p>:</span> <span class=s1>'solid'</span><span class=p>,</span> <span class=s1>'dest'</span><span class=p>:</span> <span class=s1>'gas'</span> <span class=p>},</span>    <span class=p>{</span> <span class=s1>'trigger'</span><span class=p>:</span> <span class=s1>'ionize'</span><span class=p>,</span> <span class=s1>'source'</span><span class=p>:</span> <span class=s1>'gas'</span><span class=p>,</span> <span class=s1>'dest'</span><span class=p>:</span> <span class=s1>'plasma'</span> <span class=p>}</span><span class=p>]</span><span class=n>machine</span> <span class=o>=</span> <span class=n>Machine</span><span class=p>(</span><span class=n>model</span><span class=o>=</span><span class=n>Matter</span><span class=p>(),</span> <span class=n>states</span><span class=o>=</span><span class=n>states</span><span class=p>,</span> <span class=n>transitions</span><span class=o>=</span><span class=n>transitions</span><span class=p>)</span></pre><p>Defining transitions in dictionaries has the benefit of clarity, but can be cumbersome. If you're after brevity, you might choose to define transitions using lists. Just make sure that the elements in each list are in the same order as the positional arguments in the <code>Transition</code> initialization (i.e., <code>trigger</code>, <code>source</code>, <code>destination</code>, etc.).</p><p>The following list-of-lists is functionally equivalent to the list-of-dictionaries above:</p><pre lang=python3><span class=n>transitions</span> <span class=o>=</span> <span class=p>[</span>    <span class=p>[</span><span class=s1>'melt'</span><span class=p>,</span> <span class=s1>'solid'</span><span class=p>,</span> <span class=s1>'liquid'</span><span class=p>],</span>    <span class=p>[</span><span class=s1>'evaporate'</span><span class=p>,</span> <span class=s1>'liquid'</span><span class=p>,</span> <span class=s1>'gas'</span><span class=p>],</span>    <span class=p>[</span><span class=s1>'sublimate'</span><span class=p>,</span> <span class=s1>'solid'</span><span class=p>,</span> <span class=s1>'gas'</span><span class=p>],</span>    <span class=p>[</span><span class=s1>'ionize'</span><span class=p>,</span> <span class=s1>'gas'</span><span class=p>,</span> <span class=s1>'plasma'</span><span class=p>]</span><span class=p>]</span></pre><p>Alternatively, you can add transitions to a <code>Machine</code> after initialization:</p><pre lang=python3><span class=n>machine</span> <span class=o>=</span> <span class=n>Machine</span><span class=p>(</span><span class=n>model</span><span class=o>=</span><span class=n>lump</span><span class=p>,</span> <span class=n>states</span><span class=o>=</span><span class=n>states</span><span class=p>,</span> <span class=n>initial</span><span class=o>=</span><span class=s1>'solid'</span><span class=p>)</span><span class=n>machine</span><span class=o>.</span><span class=n>add_transition</span><span class=p>(</span><span class=s1>'melt'</span><span class=p>,</span> <span class=n>source</span><span class=o>=</span><span class=s1>'solid'</span><span class=p>,</span> <span class=n>dest</span><span class=o>=</span><span class=s1>'liquid'</span><span class=p>)</span></pre><p>The <code>trigger</code> argument defines the name of the new triggering method that gets attached to the base model. When this method is called, it will try to execute the transition:</p><pre lang=python3><span class=o>&gt;&gt;&gt;</span> <span class=n>lump</span><span class=o>.</span><span class=n>melt</span><span class=p>()</span><span class=o>&gt;&gt;&gt;</span> <span class=n>lump</span><span class=o>.</span><span class=n>state</span><span class=s1>'liquid'</span></pre><p>By default, calling an invalid trigger will raise an exception:</p><pre lang=python3><span class=o>&gt;&gt;&gt;</span> <span class=n>lump</span><span class=o>.</span><span class=n>to_gas</span><span class=p>()</span><span class=o>&gt;&gt;&gt;</span> <span class=c1># This won't work because only objects in a solid state can melt</span><span class=o>&gt;&gt;&gt;</span> <span class=n>lump</span><span class=o>.</span><span class=n>melt</span><span class=p>()</span><span class=n>transitions</span><span class=o>.</span><span class=n>core</span><span class=o>.</span><span class=n>MachineError</span><span class=p>:</span> <span class=s2>\"Can't trigger event melt from state gas!\"</span></pre><p>This behavior is generally desirable, since it helps alert you to problems in your code. But in some cases, you might want to silently ignore invalid triggers. You can do this by setting <code>ignore_invalid_triggers=True</code> (either on a state-by-state basis, or globally for all states):</p><pre lang=python3><span class=o>&gt;&gt;&gt;</span> <span class=c1># Globally suppress invalid trigger exceptions</span><span class=o>&gt;&gt;&gt;</span> <span class=n>m</span> <span class=o>=</span> <span class=n>Machine</span><span class=p>(</span><span class=n>lump</span><span class=p>,</span> <span class=n>states</span><span class=p>,</span> <span class=n>initial</span><span class=o>=</span><span class=s1>'solid'</span><span class=p>,</span> <span class=n>ignore_invalid_triggers</span><span class=o>=</span><span class=kc>True</span><span class=p>)</span><span class=o>&gt;&gt;&gt;</span> <span class=c1># ...or suppress for only one group of states</span><span class=o>&gt;&gt;&gt;</span> <span class=n>states</span> <span class=o>=</span> <span class=p>[</span><span class=s1>'new_state1'</span><span class=p>,</span> <span class=s1>'new_state2'</span><span class=p>]</span><span class=o>&gt;&gt;&gt;</span> <span class=n>m</span><span class=o>.</span><span class=n>add_states</span><span class=p>(</span><span class=n>states</span><span class=p>,</span> <span class=n>ignore_invalid_triggers</span><span class=o>=</span><span class=kc>True</span><span class=p>)</span><span class=o>&gt;&gt;&gt;</span> <span class=c1># ...or even just for a single state. Here, exceptions will only be suppressed when the current state is A.</span><span class=o>&gt;&gt;&gt;</span> <span class=n>states</span> <span class=o>=</span> <span class=p>[</span><span class=n>State</span><span class=p>(</span><span class=s1>'A'</span><span class=p>,</span> <span class=n>ignore_invalid_triggers</span><span class=o>=</span><span class=kc>True</span><span class=p>),</span> <span class=s1>'B'</span><span class=p>,</span> <span class=s1>'C'</span><span class=p>]</span><span class=o>&gt;&gt;&gt;</span> <span class=n>m</span> <span class=o>=</span> <span class=n>Machine</span><span class=p>(</span><span class=n>lump</span><span class=p>,</span> <span class=n>states</span><span class=p>)</span><span class=o>&gt;&gt;&gt;</span> <span class=c1># ...this can be inverted as well if just one state should raise an exception</span><span class=o>&gt;&gt;&gt;</span> <span class=c1># since the machine's global value is not applied to a previously initialized state.</span><span class=o>&gt;&gt;&gt;</span> <span class=n>states</span> <span class=o>=</span> <span class=p>[</span><span class=s1>'A'</span><span class=p>,</span> <span class=s1>'B'</span><span class=p>,</span> <span class=n>State</span><span class=p>(</span><span class=s1>'C'</span><span class=p>)]</span> <span class=c1># the default value for 'ignore_invalid_triggers' is False</span><span class=o>&gt;&gt;&gt;</span> <span class=n>m</span> <span class=o>=</span> <span class=n>Machine</span><span class=p>(</span><span class=n>lump</span><span class=p>,</span> <span class=n>states</span><span class=p>,</span> <span class=n>ignore_invalid_triggers</span><span class=o>=</span><span class=kc>True</span><span class=p>)</span></pre><p>If you need to know which transitions are valid from a certain state, you can use <code>get_triggers</code>:</p><pre lang=python3><span class=n>m</span><span class=o>.</span><span class=n>get_triggers</span><span class=p>(</span><span class=s1>'solid'</span><span class=p>)</span><span class=o>&gt;&gt;&gt;</span> <span class=p>[</span><span class=s1>'melt'</span><span class=p>,</span> <span class=s1>'sublimate'</span><span class=p>]</span><span class=n>m</span><span class=o>.</span><span class=n>get_triggers</span><span class=p>(</span><span class=s1>'liquid'</span><span class=p>)</span><span class=o>&gt;&gt;&gt;</span> <span class=p>[</span><span class=s1>'evaporate'</span><span class=p>]</span><span class=n>m</span><span class=o>.</span><span class=n>get_triggers</span><span class=p>(</span><span class=s1>'plasma'</span><span class=p>)</span><span class=o>&gt;&gt;&gt;</span> <span class=p>[]</span><span class=c1># you can also query several states at once</span><span class=n>m</span><span class=o>.</span><span class=n>get_triggers</span><span class=p>(</span><span class=s1>'solid'</span><span class=p>,</span> <span class=s1>'liquid'</span><span class=p>,</span> <span class=s1>'gas'</span><span class=p>,</span> <span class=s1>'plasma'</span><span class=p>)</span><span class=o>&gt;&gt;&gt;</span> <span class=p>[</span><span class=s1>'melt'</span><span class=p>,</span> <span class=s1>'evaporate'</span><span class=p>,</span> <span class=s1>'sublimate'</span><span class=p>,</span> <span class=s1>'ionize'</span><span class=p>]</span></pre><h4><a rel=nofollow></a>Automatic transitions for all states</h4><p>In addition to any transitions added explicitly, a <code>to_\u00abstate\u00bb()</code> method is created automatically whenever a state is added to a <code>Machine</code> instance. This method transitions to the target state no matter which state the machine is currently in:</p><pre lang=python3><span class=n>lump</span><span class=o>.</span><span class=n>to_liquid</span><span class=p>()</span><span class=n>lump</span><span class=o>.</span><span class=n>state</span><span class=o>&gt;&gt;&gt;</span> <span class=s1>'liquid'</span><span class=n>lump</span><span class=o>.</span><span class=n>to_solid</span><span class=p>()</span><span class=n>lump</span><span class=o>.</span><span class=n>state</span><span class=o>&gt;&gt;&gt;</span> <span class=s1>'solid'</span></pre><p>If you desire, you can disable this behavior by setting <code>auto_transitions=False</code> in the <code>Machine</code> initializer.</p><h4><a rel=nofollow></a>Transitioning from multiple states</h4><p>A given trigger can be attached to multiple transitions, some of which can potentially begin or end in the same state. For example:</p><pre lang=python3><span class=n>machine</span><span class=o>.</span><span class=n>add_transition</span><span class=p>(</span><span class=s1>'transmogrify'</span><span class=p>,</span> <span class=p>[</span><span class=s1>'solid'</span><span class=p>,</span> <span class=s1>'liquid'</span><span class=p>,</span> <span class=s1>'gas'</span><span class=p>],</span> <span class=s1>'plasma'</span><span class=p>)</span><span class=n>machine</span><span class=o>.</span><span class=n>add_transition</span><span class=p>(</span><span class=s1>'transmogrify'</span><span class=p>,</span> <span class=s1>'plasma'</span><span class=p>,</span> <span class=s1>'solid'</span><span class=p>)</span><span class=c1># This next transition will never execute</span><span class=n>machine</span><span class=o>.</span><span class=n>add_transition</span><span class=p>(</span><span class=s1>'transmogrify'</span><span class=p>,</span> <span class=s1>'plasma'</span><span class=p>,</span> <span class=s1>'gas'</span><span class=p>)</span></pre><p>In this case, calling <code>transmogrify()</code> will set the model's state to <code>'solid'</code> if it's currently <code>'plasma'</code>, and set it to <code>'plasma'</code> otherwise. (Note that only the <em>first</em> matching transition will execute; thus, the transition defined in the last line above won't do anything.)</p><p>You can also make a trigger cause a transition from <em>all</em> states to a particular destination by using the <code>'*'</code> wildcard:</p><pre lang=python3><span class=n>machine</span><span class=o>.</span><span class=n>add_transition</span><span class=p>(</span><span class=s1>'to_liquid'</span><span class=p>,</span> <span class=s1>'*'</span><span class=p>,</span> <span class=s1>'liquid'</span><span class=p>)</span></pre><p>Note that wildcard transitions will only apply to states that exist at the time of the add_transition() call. Calling a wildcard-based transition when the model is in a state added after the transition was defined will elicit an invalid transition message, and will not transition to the target state.</p><h4><a rel=nofollow></a>Reflexive transitions from multiple states</h4><p>A reflexive trigger (trigger that has the same state as source and destination) can easily be added specifying <code>=</code> as destination.This is handy if the same reflexive trigger should be added to multiple states.For example:</p><pre lang=python3><span class=n>machine</span><span class=o>.</span><span class=n>add_transition</span><span class=p>(</span><span class=s1>'touch'</span><span class=p>,</span> <span class=p>[</span><span class=s1>'liquid'</span><span class=p>,</span> <span class=s1>'gas'</span><span class=p>,</span> <span class=s1>'plasma'</span><span class=p>],</span> <span class=s1>'='</span><span class=p>,</span> <span class=n>after</span><span class=o>=</span><span class=s1>'change_shape'</span><span class=p>)</span></pre><p>This will add reflexive transitions for all three states with <code>touch()</code> as trigger and with <code>change_shape</code> executed after each trigger.</p><h4><a rel=nofollow></a>Internal transitions</h4><p>In contrast to reflexive transitions, internal transitions will never actually leave the state.This means that transition-related callbacks such as <code>before</code> or <code>after</code> will be processed while state-related callbacks <code>exit</code> or <code>enter</code> will not.To define a transition to be internal, set the destination to <code>None</code>.</p><pre lang=python3><span class=n>machine</span><span class=o>.</span><span class=n>add_transition</span><span class=p>(</span><span class=s1>'internal'</span><span class=p>,</span> <span class=p>[</span><span class=s1>'liquid'</span><span class=p>,</span> <span class=s1>'gas'</span><span class=p>],</span> <span class=kc>None</span><span class=p>,</span> <span class=n>after</span><span class=o>=</span><span class=s1>'change_shape'</span><span class=p>)</span></pre><h4><a rel=nofollow></a> Ordered transitions</h4><p>A common desire is for state transitions to follow a strict linear sequence. For instance, given states <code>['A', 'B', 'C']</code>, you might want valid transitions for <code>A</code> \u2192 <code>B</code>, <code>B</code> \u2192 <code>C</code>, and <code>C</code> \u2192 <code>A</code> (but no other pairs).</p><p>To facilitate this behavior, Transitions provides an <code>add_ordered_transitions()</code> method in the <code>Machine</code> class:</p><pre lang=python3><span class=n>states</span> <span class=o>=</span> <span class=p>[</span><span class=s1>'A'</span><span class=p>,</span> <span class=s1>'B'</span><span class=p>,</span> <span class=s1>'C'</span><span class=p>]</span> <span class=c1># See the \"alternative initialization\" section for an explanation of the 1st argument to init</span><span class=n>machine</span> <span class=o>=</span> <span class=n>Machine</span><span class=p>(</span><span class=n>states</span><span class=o>=</span><span class=n>states</span><span class=p>,</span> <span class=n>initial</span><span class=o>=</span><span class=s1>'A'</span><span class=p>)</span><span class=n>machine</span><span class=o>.</span><span class=n>add_ordered_transitions</span><span class=p>()</span><span class=n>machine</span><span class=o>.</span><span class=n>next_state</span><span class=p>()</span><span class=nb>print</span><span class=p>(</span><span class=n>machine</span><span class=o>.</span><span class=n>state</span><span class=p>)</span><span class=o>&gt;&gt;&gt;</span> <span class=s1>'B'</span><span class=c1># We can also define a different order of transitions</span><span class=n>machine</span> <span class=o>=</span> <span class=n>Machine</span><span class=p>(</span><span class=n>states</span><span class=o>=</span><span class=n>states</span><span class=p>,</span> <span class=n>initial</span><span class=o>=</span><span class=s1>'A'</span><span class=p>)</span><span class=n>machine</span><span class=o>.</span><span class=n>add_ordered_transitions</span><span class=p>([</span><span class=s1>'A'</span><span class=p>,</span> <span class=s1>'C'</span><span class=p>,</span> <span class=s1>'B'</span><span class=p>])</span><span class=n>machine</span><span class=o>.</span><span class=n>next_state</span><span class=p>()</span><span class=nb>print</span><span class=p>(</span><span class=n>machine</span><span class=o>.</span><span class=n>state</span><span class=p>)</span><span class=o>&gt;&gt;&gt;</span> <span class=s1>'C'</span><span class=c1># Conditions can be passed to 'add_ordered_transitions' as well</span><span class=c1># If one condition is passed, it will be used for all transitions</span><span class=n>machine</span> <span class=o>=</span> <span class=n>Machine</span><span class=p>(</span><span class=n>states</span><span class=o>=</span><span class=n>states</span><span class=p>,</span> <span class=n>initial</span><span class=o>=</span><span class=s1>'A'</span><span class=p>)</span><span class=n>machine</span><span class=o>.</span><span class=n>add_ordered_transitions</span><span class=p>(</span><span class=n>conditions</span><span class=o>=</span><span class=s1>'check'</span><span class=p>)</span><span class=c1># If a list is passed, it must contain exactly as many elements as the</span><span class=c1># machine contains states (A-&gt;B, ..., X-&gt;A)</span><span class=n>machine</span> <span class=o>=</span> <span class=n>Machine</span><span class=p>(</span><span class=n>states</span><span class=o>=</span><span class=n>states</span><span class=p>,</span> <span class=n>initial</span><span class=o>=</span><span class=s1>'A'</span><span class=p>)</span><span class=n>machine</span><span class=o>.</span><span class=n>add_ordered_transitions</span><span class=p>(</span><span class=n>conditions</span><span class=o>=</span><span class=p>[</span><span class=s1>'check_A2B'</span><span class=p>,</span> <span class=o>...</span><span class=p>,</span> <span class=s1>'check_X2A'</span><span class=p>])</span><span class=c1># Conditions are always applied starting from the initial state</span><span class=n>machine</span> <span class=o>=</span> <span class=n>Machine</span><span class=p>(</span><span class=n>states</span><span class=o>=</span><span class=n>states</span><span class=p>,</span> <span class=n>initial</span><span class=o>=</span><span class=s1>'B'</span><span class=p>)</span><span class=n>machine</span><span class=o>.</span><span class=n>add_ordered_transitions</span><span class=p>(</span><span class=n>conditions</span><span class=o>=</span><span class=p>[</span><span class=s1>'check_B2C'</span><span class=p>,</span> <span class=o>...</span><span class=p>,</span> <span class=s1>'check_A2B'</span><span class=p>])</span><span class=c1># With `loop=False`, the transition from the last state to the first state will be omitted (e.g. C-&gt;A)</span><span class=c1># When you also pass conditions, you need to pass one condition less (len(states)-1)</span><span class=n>machine</span> <span class=o>=</span> <span class=n>Machine</span><span class=p>(</span><span class=n>states</span><span class=o>=</span><span class=n>states</span><span class=p>,</span> <span class=n>initial</span><span class=o>=</span><span class=s1>'A'</span><span class=p>)</span><span class=n>machine</span><span class=o>.</span><span class=n>add_ordered_transitions</span><span class=p>(</span><span class=n>loop</span><span class=o>=</span><span class=kc>False</span><span class=p>)</span><span class=n>machine</span><span class=o>.</span><span class=n>next_state</span><span class=p>()</span><span class=n>machine</span><span class=o>.</span><span class=n>next_state</span><span class=p>()</span><span class=n>machine</span><span class=o>.</span><span class=n>next_state</span><span class=p>()</span> <span class=c1># transitions.core.MachineError: \"Can't trigger event next_state from state C!\"</span></pre><h4><a rel=nofollow></a>Queued transitions</h4><p>The default behaviour in Transitions is to process events instantly. This means events within an <code>on_enter</code> method will be processed <em>before</em> callbacks bound to <code>after</code> are called.</p><pre lang=python3><span class=k>def</span> <span class=nf>go_to_C</span><span class=p>():</span>    <span class=k>global</span> <span class=n>machine</span>    <span class=n>machine</span><span class=o>.</span><span class=n>to_C</span><span class=p>()</span><span class=k>def</span> <span class=nf>after_advance</span><span class=p>():</span>    <span class=nb>print</span><span class=p>(</span><span class=s2>\"I am in state B now!\"</span><span class=p>)</span><span class=k>def</span> <span class=nf>entering_C</span><span class=p>():</span>    <span class=nb>print</span><span class=p>(</span><span class=s2>\"I am in state C now!\"</span><span class=p>)</span><span class=n>states</span> <span class=o>=</span> <span class=p>[</span><span class=s1>'A'</span><span class=p>,</span> <span class=s1>'B'</span><span class=p>,</span> <span class=s1>'C'</span><span class=p>]</span><span class=n>machine</span> <span class=o>=</span> <span class=n>Machine</span><span class=p>(</span><span class=n>states</span><span class=o>=</span><span class=n>states</span><span class=p>,</span> <span class=n>initial</span><span class=o>=</span><span class=s1>'A'</span><span class=p>)</span><span class=c1># we want a message when state transition to B has been completed</span><span class=n>machine</span><span class=o>.</span><span class=n>add_transition</span><span class=p>(</span><span class=s1>'advance'</span><span class=p>,</span> <span class=s1>'A'</span><span class=p>,</span> <span class=s1>'B'</span><span class=p>,</span> <span class=n>after</span><span class=o>=</span><span class=n>after_advance</span><span class=p>)</span><span class=c1># call transition from state B to state C</span><span class=n>machine</span><span class=o>.</span><span class=n>on_enter_B</span><span class=p>(</span><span class=n>go_to_C</span><span class=p>)</span><span class=c1># we also want a message when entering state C</span><span class=n>machine</span><span class=o>.</span><span class=n>on_enter_C</span><span class=p>(</span><span class=n>entering_C</span><span class=p>)</span><span class=n>machine</span><span class=o>.</span><span class=n>advance</span><span class=p>()</span><span class=o>&gt;&gt;&gt;</span> <span class=s1>'I am in state C now!'</span><span class=o>&gt;&gt;&gt;</span> <span class=s1>'I am in state B now!'</span> <span class=c1># what?</span></pre><p>The execution order of this example is</p><pre><code>prepare -&gt; before -&gt; on_enter_B -&gt; on_enter_C -&gt; after.</code></pre><p>If queued processing is enabled, a transition will be finished before the next transition is triggered:</p><pre lang=python3><span class=n>machine</span> <span class=o>=</span> <span class=n>Machine</span><span class=p>(</span><span class=n>states</span><span class=o>=</span><span class=n>states</span><span class=p>,</span> <span class=n>queued</span><span class=o>=</span><span class=kc>True</span><span class=p>,</span> <span class=n>initial</span><span class=o>=</span><span class=s1>'A'</span><span class=p>)</span><span class=o>...</span><span class=n>machine</span><span class=o>.</span><span class=n>advance</span><span class=p>()</span><span class=o>&gt;&gt;&gt;</span> <span class=s1>'I am in state B now!'</span><span class=o>&gt;&gt;&gt;</span> <span class=s1>'I am in state C now!'</span> <span class=c1># That's better!</span></pre><p>This results in</p><pre><code>prepare -&gt; before -&gt; on_enter_B -&gt; queue(to_C) -&gt; after  -&gt; on_enter_C.</code></pre><p><strong>Important note:</strong> when processing events in a queue, the trigger call will <em>always</em> return <code>True</code>, since there is no way to determine at queuing time whether a transition involving queued calls will ultimately complete successfully. This is true even when only a single event is processed.</p><pre lang=python3><span class=n>machine</span><span class=o>.</span><span class=n>add_transition</span><span class=p>(</span><span class=s1>'jump'</span><span class=p>,</span> <span class=s1>'A'</span><span class=p>,</span> <span class=s1>'C'</span><span class=p>,</span> <span class=n>conditions</span><span class=o>=</span><span class=s1>'will_fail'</span><span class=p>)</span><span class=o>...</span><span class=c1># queued=False</span><span class=n>machine</span><span class=o>.</span><span class=n>jump</span><span class=p>()</span><span class=o>&gt;&gt;&gt;</span> <span class=kc>False</span><span class=c1># queued=True</span><span class=n>machine</span><span class=o>.</span><span class=n>jump</span><span class=p>()</span><span class=o>&gt;&gt;&gt;</span> <span class=kc>True</span></pre><p>When a model is removed from the machine, <code>transitions</code> will also remove all related events from the queue.</p><pre lang=python3><span class=k>class</span> <span class=nc>Model</span><span class=p>:</span>    <span class=k>def</span> <span class=nf>on_enter_B</span><span class=p>(</span><span class=bp>self</span><span class=p>):</span>        <span class=bp>self</span><span class=o>.</span><span class=n>to_C</span><span class=p>()</span>  <span class=c1># add event to queue ...</span>        <span class=bp>self</span><span class=o>.</span><span class=n>machine</span><span class=o>.</span><span class=n>remove_model</span><span class=p>(</span><span class=bp>self</span><span class=p>)</span>  <span class=c1># aaaand it's gone</span></pre><h4><a rel=nofollow></a>Conditional transitions</h4><p>Sometimes you only want a particular transition to execute if a specific condition occurs. You can do this by passing a method, or list of methods, in the <code>conditions</code> argument:</p><pre lang=python3><span class=c1># Our Matter class, now with a bunch of methods that return booleans.</span><span class=k>class</span> <span class=nc>Matter</span><span class=p>(</span><span class=nb>object</span><span class=p>):</span>    <span class=k>def</span> <span class=nf>is_flammable</span><span class=p>(</span><span class=bp>self</span><span class=p>):</span> <span class=k>return</span> <span class=kc>False</span>    <span class=k>def</span> <span class=nf>is_really_hot</span><span class=p>(</span><span class=bp>self</span><span class=p>):</span> <span class=k>return</span> <span class=kc>True</span><span class=n>machine</span><span class=o>.</span><span class=n>add_transition</span><span class=p>(</span><span class=s1>'heat'</span><span class=p>,</span> <span class=s1>'solid'</span><span class=p>,</span> <span class=s1>'gas'</span><span class=p>,</span> <span class=n>conditions</span><span class=o>=</span><span class=s1>'is_flammable'</span><span class=p>)</span><span class=n>machine</span><span class=o>.</span><span class=n>add_transition</span><span class=p>(</span><span class=s1>'heat'</span><span class=p>,</span> <span class=s1>'solid'</span><span class=p>,</span> <span class=s1>'liquid'</span><span class=p>,</span> <span class=n>conditions</span><span class=o>=</span><span class=p>[</span><span class=s1>'is_really_hot'</span><span class=p>])</span></pre><p>In the above example, calling <code>heat()</code> when the model is in state <code>'solid'</code> will transition to state <code>'gas'</code> if <code>is_flammable</code> returns <code>True</code>. Otherwise, it will transition to state <code>'liquid'</code> if <code>is_really_hot</code> returns <code>True</code>.</p><p>For convenience, there's also an <code>'unless'</code> argument that behaves exactly like conditions, but inverted:</p><pre lang=python3><span class=n>machine</span><span class=o>.</span><span class=n>add_transition</span><span class=p>(</span><span class=s1>'heat'</span><span class=p>,</span> <span class=s1>'solid'</span><span class=p>,</span> <span class=s1>'gas'</span><span class=p>,</span> <span class=n>unless</span><span class=o>=</span><span class=p>[</span><span class=s1>'is_flammable'</span><span class=p>,</span> <span class=s1>'is_really_hot'</span><span class=p>])</span></pre><p>In this case, the model would transition from solid to gas whenever <code>heat()</code> fires, provided that both <code>is_flammable()</code> and <code>is_really_hot()</code> return <code>False</code>.</p><p>Note that condition-checking methods will passively receive optional arguments and/or data objects passed to triggering methods. For instance, the following call:</p><pre lang=python3><span class=n>lump</span><span class=o>.</span><span class=n>heat</span><span class=p>(</span><span class=n>temp</span><span class=o>=</span><span class=mi>74</span><span class=p>)</span><span class=c1># equivalent to lump.trigger('heat', temp=74)</span></pre><p>... would pass the <code>temp=74</code> optional kwarg to the <code>is_flammable()</code> check (possibly wrapped in an <code>EventData</code> instance). For more on this, see the <a href=#passing-data rel=nofollow>Passing data</a> section below.</p><h4><a rel=nofollow></a>Check transitions</h4><p>If you want to check whether a transition is possible before you execute it ('look before you leap'), you can use <code>may_&lt;trigger_name&gt;</code> convenience functions that have been attached to your model:</p><pre lang=python3><span class=c1># check if the current temperature is hot enough to trigger a transition</span><span class=k>if</span> <span class=n>lump</span><span class=o>.</span><span class=n>may_heat</span><span class=p>():</span>    <span class=n>lump</span><span class=o>.</span><span class=n>heat</span><span class=p>()</span></pre><p>This will execute all <code>prepare</code> callbacks and evaluate the conditions assigned to the potential transitions.Transition checks can also be used when a transition's destination is not available (yet):</p><pre lang=python3><span class=n>machine</span><span class=o>.</span><span class=n>add_transition</span><span class=p>(</span><span class=s1>'elevate'</span><span class=p>,</span> <span class=s1>'solid'</span><span class=p>,</span> <span class=s1>'spiritual'</span><span class=p>)</span><span class=k>assert</span> <span class=ow>not</span> <span class=n>lump</span><span class=o>.</span><span class=n>may_elevate</span><span class=p>()</span>  <span class=c1># not ready yet :(</span></pre><h4><a rel=nofollow></a>Callbacks</h4><p>You can attach callbacks to transitions as well as states. Every transition has <code>'before'</code> and <code>'after'</code> attributes that contain a list of methods to call before and after the transition executes:</p><pre lang=python3><span class=k>class</span> <span class=nc>Matter</span><span class=p>(</span><span class=nb>object</span><span class=p>):</span>    <span class=k>def</span> <span class=nf>make_hissing_noises</span><span class=p>(</span><span class=bp>self</span><span class=p>):</span> <span class=nb>print</span><span class=p>(</span><span class=s2>\"HISSSSSSSSSSSSSSSS\"</span><span class=p>)</span>    <span class=k>def</span> <span class=nf>disappear</span><span class=p>(</span><span class=bp>self</span><span class=p>):</span> <span class=nb>print</span><span class=p>(</span><span class=s2>\"where'd all the liquid go?\"</span><span class=p>)</span><span class=n>transitions</span> <span class=o>=</span> <span class=p>[</span>    <span class=p>{</span> <span class=s1>'trigger'</span><span class=p>:</span> <span class=s1>'melt'</span><span class=p>,</span> <span class=s1>'source'</span><span class=p>:</span> <span class=s1>'solid'</span><span class=p>,</span> <span class=s1>'dest'</span><span class=p>:</span> <span class=s1>'liquid'</span><span class=p>,</span> <span class=s1>'before'</span><span class=p>:</span> <span class=s1>'make_hissing_noises'</span><span class=p>},</span>    <span class=p>{</span> <span class=s1>'trigger'</span><span class=p>:</span> <span class=s1>'evaporate'</span><span class=p>,</span> <span class=s1>'source'</span><span class=p>:</span> <span class=s1>'liquid'</span><span class=p>,</span> <span class=s1>'dest'</span><span class=p>:</span> <span class=s1>'gas'</span><span class=p>,</span> <span class=s1>'after'</span><span class=p>:</span> <span class=s1>'disappear'</span> <span class=p>}</span><span class=p>]</span><span class=n>lump</span> <span class=o>=</span> <span class=n>Matter</span><span class=p>()</span><span class=n>machine</span> <span class=o>=</span> <span class=n>Machine</span><span class=p>(</span><span class=n>lump</span><span class=p>,</span> <span class=n>states</span><span class=p>,</span> <span class=n>transitions</span><span class=o>=</span><span class=n>transitions</span><span class=p>,</span> <span class=n>initial</span><span class=o>=</span><span class=s1>'solid'</span><span class=p>)</span><span class=n>lump</span><span class=o>.</span><span class=n>melt</span><span class=p>()</span><span class=o>&gt;&gt;&gt;</span> <span class=s2>\"HISSSSSSSSSSSSSSSS\"</span><span class=n>lump</span><span class=o>.</span><span class=n>evaporate</span><span class=p>()</span><span class=o>&gt;&gt;&gt;</span> <span class=s2>\"where'd all the liquid go?\"</span></pre><p>There is also a <code>'prepare'</code> callback that is executed as soon as a transition starts, before any <code>'conditions'</code> are checked or other callbacks are executed.</p><pre lang=python3><span class=k>class</span> <span class=nc>Matter</span><span class=p>(</span><span class=nb>object</span><span class=p>):</span>    <span class=n>heat</span> <span class=o>=</span> <span class=kc>False</span>    <span class=n>attempts</span> <span class=o>=</span> <span class=mi>0</span>    <span class=k>def</span> <span class=nf>count_attempts</span><span class=p>(</span><span class=bp>self</span><span class=p>):</span> <span class=bp>self</span><span class=o>.</span><span class=n>attempts</span> <span class=o>+=</span> <span class=mi>1</span>    <span class=k>def</span> <span class=nf>heat_up</span><span class=p>(</span><span class=bp>self</span><span class=p>):</span> <span class=bp>self</span><span class=o>.</span><span class=n>heat</span> <span class=o>=</span> <span class=n>random</span><span class=o>.</span><span class=n>random</span><span class=p>()</span> <span class=o>&lt;</span> <span class=mf>0.25</span>    <span class=k>def</span> <span class=nf>stats</span><span class=p>(</span><span class=bp>self</span><span class=p>):</span> <span class=nb>print</span><span class=p>(</span><span class=s1>'It took you </span><span class=si>%i</span><span class=s1> attempts to melt the lump!'</span> <span class=o>%</span><span class=bp>self</span><span class=o>.</span><span class=n>attempts</span><span class=p>)</span>    <span class=nd>@property</span>    <span class=k>def</span> <span class=nf>is_really_hot</span><span class=p>(</span><span class=bp>self</span><span class=p>):</span>        <span class=k>return</span> <span class=bp>self</span><span class=o>.</span><span class=n>heat</span><span class=n>states</span><span class=o>=</span><span class=p>[</span><span class=s1>'solid'</span><span class=p>,</span> <span class=s1>'liquid'</span><span class=p>,</span> <span class=s1>'gas'</span><span class=p>,</span> <span class=s1>'plasma'</span><span class=p>]</span><span class=n>transitions</span> <span class=o>=</span> <span class=p>[</span>    <span class=p>{</span> <span class=s1>'trigger'</span><span class=p>:</span> <span class=s1>'melt'</span><span class=p>,</span> <span class=s1>'source'</span><span class=p>:</span> <span class=s1>'solid'</span><span class=p>,</span> <span class=s1>'dest'</span><span class=p>:</span> <span class=s1>'liquid'</span><span class=p>,</span> <span class=s1>'prepare'</span><span class=p>:</span> <span class=p>[</span><span class=s1>'heat_up'</span><span class=p>,</span> <span class=s1>'count_attempts'</span><span class=p>],</span> <span class=s1>'conditions'</span><span class=p>:</span> <span class=s1>'is_really_hot'</span><span class=p>,</span> <span class=s1>'after'</span><span class=p>:</span> <span class=s1>'stats'</span><span class=p>},</span><span class=p>]</span><span class=n>lump</span> <span class=o>=</span> <span class=n>Matter</span><span class=p>()</span><span class=n>machine</span> <span class=o>=</span> <span class=n>Machine</span><span class=p>(</span><span class=n>lump</span><span class=p>,</span> <span class=n>states</span><span class=p>,</span> <span class=n>transitions</span><span class=o>=</span><span class=n>transitions</span><span class=p>,</span> <span class=n>initial</span><span class=o>=</span><span class=s1>'solid'</span><span class=p>)</span><span class=n>lump</span><span class=o>.</span><span class=n>melt</span><span class=p>()</span><span class=n>lump</span><span class=o>.</span><span class=n>melt</span><span class=p>()</span><span class=n>lump</span><span class=o>.</span><span class=n>melt</span><span class=p>()</span><span class=n>lump</span><span class=o>.</span><span class=n>melt</span><span class=p>()</span><span class=o>&gt;&gt;&gt;</span> <span class=s2>\"It took you 4 attempts to melt the lump!\"</span></pre><p>Note that <code>prepare</code> will not be called unless the current state is a valid source for the named transition.</p><p>Default actions meant to be executed before or after <em>every</em> transition can be passed to <code>Machine</code> during initialization with<code>before_state_change</code> and <code>after_state_change</code> respectively:</p><pre lang=python3><span class=k>class</span> <span class=nc>Matter</span><span class=p>(</span><span class=nb>object</span><span class=p>):</span>    <span class=k>def</span> <span class=nf>make_hissing_noises</span><span class=p>(</span><span class=bp>self</span><span class=p>):</span> <span class=nb>print</span><span class=p>(</span><span class=s2>\"HISSSSSSSSSSSSSSSS\"</span><span class=p>)</span>    <span class=k>def</span> <span class=nf>disappear</span><span class=p>(</span><span class=bp>self</span><span class=p>):</span> <span class=nb>print</span><span class=p>(</span><span class=s2>\"where'd all the liquid go?\"</span><span class=p>)</span><span class=n>states</span><span class=o>=</span><span class=p>[</span><span class=s1>'solid'</span><span class=p>,</span> <span class=s1>'liquid'</span><span class=p>,</span> <span class=s1>'gas'</span><span class=p>,</span> <span class=s1>'plasma'</span><span class=p>]</span><span class=n>lump</span> <span class=o>=</span> <span class=n>Matter</span><span class=p>()</span><span class=n>m</span> <span class=o>=</span> <span class=n>Machine</span><span class=p>(</span><span class=n>lump</span><span class=p>,</span> <span class=n>states</span><span class=p>,</span> <span class=n>before_state_change</span><span class=o>=</span><span class=s1>'make_hissing_noises'</span><span class=p>,</span> <span class=n>after_state_change</span><span class=o>=</span><span class=s1>'disappear'</span><span class=p>)</span><span class=n>lump</span><span class=o>.</span><span class=n>to_gas</span><span class=p>()</span><span class=o>&gt;&gt;&gt;</span> <span class=s2>\"HISSSSSSSSSSSSSSSS\"</span><span class=o>&gt;&gt;&gt;</span> <span class=s2>\"where'd all the liquid go?\"</span></pre><p>There are also two keywords for callbacks which should be executed <em>independently</em> a) of how many transitions are possible,b) if any transition succeeds and c) even if an error is raised during the execution of some other callback.Callbacks passed to <code>Machine</code> with <code>prepare_event</code> will be executed <em>once</em> before processing possible transitions(and their individual <code>prepare</code> callbacks) takes place.Callbacks of <code>finalize_event</code> will be executed regardless of the success of the processed transitions.Note that if an error occurred it will be attached to <code>event_data</code> as <code>error</code> and can be retrieved with <code>send_event=True</code>.</p><pre lang=python3><span class=kn>from</span> <span class=nn>transitions</span> <span class=kn>import</span> <span class=n>Machine</span><span class=k>class</span> <span class=nc>Matter</span><span class=p>(</span><span class=nb>object</span><span class=p>):</span>    <span class=k>def</span> <span class=nf>raise_error</span><span class=p>(</span><span class=bp>self</span><span class=p>,</span> <span class=n>event</span><span class=p>):</span> <span class=k>raise</span> <span class=ne>ValueError</span><span class=p>(</span><span class=s2>\"Oh no\"</span><span class=p>)</span>    <span class=k>def</span> <span class=nf>prepare</span><span class=p>(</span><span class=bp>self</span><span class=p>,</span> <span class=n>event</span><span class=p>):</span> <span class=nb>print</span><span class=p>(</span><span class=s2>\"I am ready!\"</span><span class=p>)</span>    <span class=k>def</span> <span class=nf>finalize</span><span class=p>(</span><span class=bp>self</span><span class=p>,</span> <span class=n>event</span><span class=p>):</span> <span class=nb>print</span><span class=p>(</span><span class=s2>\"Result: \"</span><span class=p>,</span> <span class=nb>type</span><span class=p>(</span><span class=n>event</span><span class=o>.</span><span class=n>error</span><span class=p>),</span> <span class=n>event</span><span class=o>.</span><span class=n>error</span><span class=p>)</span><span class=n>states</span><span class=o>=</span><span class=p>[</span><span class=s1>'solid'</span><span class=p>,</span> <span class=s1>'liquid'</span><span class=p>,</span> <span class=s1>'gas'</span><span class=p>,</span> <span class=s1>'plasma'</span><span class=p>]</span><span class=n>lump</span> <span class=o>=</span> <span class=n>Matter</span><span class=p>()</span><span class=n>m</span> <span class=o>=</span> <span class=n>Machine</span><span class=p>(</span><span class=n>lump</span><span class=p>,</span> <span class=n>states</span><span class=p>,</span> <span class=n>prepare_event</span><span class=o>=</span><span class=s1>'prepare'</span><span class=p>,</span> <span class=n>before_state_change</span><span class=o>=</span><span class=s1>'raise_error'</span><span class=p>,</span>            <span class=n>finalize_event</span><span class=o>=</span><span class=s1>'finalize'</span><span class=p>,</span> <span class=n>send_event</span><span class=o>=</span><span class=kc>True</span><span class=p>)</span><span class=k>try</span><span class=p>:</span>    <span class=n>lump</span><span class=o>.</span><span class=n>to_gas</span><span class=p>()</span><span class=k>except</span> <span class=ne>ValueError</span><span class=p>:</span>    <span class=k>pass</span><span class=nb>print</span><span class=p>(</span><span class=n>lump</span><span class=o>.</span><span class=n>state</span><span class=p>)</span><span class=c1># &gt;&gt;&gt; I am ready!</span><span class=c1># &gt;&gt;&gt; Result:  &lt;class 'ValueError'&gt; Oh no</span><span class=c1># &gt;&gt;&gt; initial</span></pre><p>Sometimes things just don't work out as intended and we need to handle exceptions and clean up the mess to keep things going.We can pass callbacks to <code>on_exception</code> to do this:</p><pre lang=python3><span class=kn>from</span> <span class=nn>transitions</span> <span class=kn>import</span> <span class=n>Machine</span><span class=k>class</span> <span class=nc>Matter</span><span class=p>(</span><span class=nb>object</span><span class=p>):</span>    <span class=k>def</span> <span class=nf>raise_error</span><span class=p>(</span><span class=bp>self</span><span class=p>,</span> <span class=n>event</span><span class=p>):</span> <span class=k>raise</span> <span class=ne>ValueError</span><span class=p>(</span><span class=s2>\"Oh no\"</span><span class=p>)</span>    <span class=k>def</span> <span class=nf>handle_error</span><span class=p>(</span><span class=bp>self</span><span class=p>,</span> <span class=n>event</span><span class=p>):</span>        <span class=nb>print</span><span class=p>(</span><span class=s2>\"Fixing things ...\"</span><span class=p>)</span>        <span class=k>del</span> <span class=n>event</span><span class=o>.</span><span class=n>error</span>  <span class=c1># it did not happen if we cannot see it ...</span><span class=n>states</span><span class=o>=</span><span class=p>[</span><span class=s1>'solid'</span><span class=p>,</span> <span class=s1>'liquid'</span><span class=p>,</span> <span class=s1>'gas'</span><span class=p>,</span> <span class=s1>'plasma'</span><span class=p>]</span><span class=n>lump</span> <span class=o>=</span> <span class=n>Matter</span><span class=p>()</span><span class=n>m</span> <span class=o>=</span> <span class=n>Machine</span><span class=p>(</span><span class=n>lump</span><span class=p>,</span> <span class=n>states</span><span class=p>,</span> <span class=n>before_state_change</span><span class=o>=</span><span class=s1>'raise_error'</span><span class=p>,</span> <span class=n>on_exception</span><span class=o>=</span><span class=s1>'handle_error'</span><span class=p>,</span> <span class=n>send_event</span><span class=o>=</span><span class=kc>True</span><span class=p>)</span><span class=k>try</span><span class=p>:</span>    <span class=n>lump</span><span class=o>.</span><span class=n>to_gas</span><span class=p>()</span><span class=k>except</span> <span class=ne>ValueError</span><span class=p>:</span>    <span class=k>pass</span><span class=nb>print</span><span class=p>(</span><span class=n>lump</span><span class=o>.</span><span class=n>state</span><span class=p>)</span><span class=c1># &gt;&gt;&gt; Fixing things ...</span><span class=c1># &gt;&gt;&gt; initial</span></pre><h3><a rel=nofollow></a>Callable resolution</h3><p>As you have probably already realized, the standard way of passing callables to states, conditions and transitions is by name. When processing callbacks and conditions, <code>transitions</code> will use their name to retrieve the related callable from the model. If the method cannot be retrieved and it contains dots, <code>transitions</code> will treat the name as a path to a module function and try to import it. Alternatively, you can pass names of properties or attributes. They will be wrapped into functions but cannot receive event data for obvious reasons. You can also pass callables such as (bound) functions directly. As mentioned earlier, you can also pass lists/tuples of callables names to the callback parameters. Callbacks will be executed in the order they were added.</p><pre lang=python3><span class=kn>from</span> <span class=nn>transitions</span> <span class=kn>import</span> <span class=n>Machine</span><span class=kn>from</span> <span class=nn>mod</span> <span class=kn>import</span> <span class=n>imported_func</span><span class=kn>import</span> <span class=nn>random</span><span class=k>class</span> <span class=nc>Model</span><span class=p>(</span><span class=nb>object</span><span class=p>):</span>    <span class=k>def</span> <span class=nf>a_callback</span><span class=p>(</span><span class=bp>self</span><span class=p>):</span>        <span class=n>imported_func</span><span class=p>()</span>    <span class=nd>@property</span>    <span class=k>def</span> <span class=nf>a_property</span><span class=p>(</span><span class=bp>self</span><span class=p>):</span><span class=w>        </span><span class=sd>\"\"\" Basically a coin toss. \"\"\"</span>        <span class=k>return</span> <span class=n>random</span><span class=o>.</span><span class=n>random</span><span class=p>()</span> <span class=o>&lt;</span> <span class=mf>0.5</span>    <span class=n>an_attribute</span> <span class=o>=</span> <span class=kc>False</span><span class=n>model</span> <span class=o>=</span> <span class=n>Model</span><span class=p>()</span><span class=n>machine</span> <span class=o>=</span> <span class=n>Machine</span><span class=p>(</span><span class=n>model</span><span class=o>=</span><span class=n>model</span><span class=p>,</span> <span class=n>states</span><span class=o>=</span><span class=p>[</span><span class=s1>'A'</span><span class=p>],</span> <span class=n>initial</span><span class=o>=</span><span class=s1>'A'</span><span class=p>)</span><span class=n>machine</span><span class=o>.</span><span class=n>add_transition</span><span class=p>(</span><span class=s1>'by_name'</span><span class=p>,</span> <span class=s1>'A'</span><span class=p>,</span> <span class=s1>'A'</span><span class=p>,</span> <span class=n>conditions</span><span class=o>=</span><span class=s1>'a_property'</span><span class=p>,</span> <span class=n>after</span><span class=o>=</span><span class=s1>'a_callback'</span><span class=p>)</span><span class=n>machine</span><span class=o>.</span><span class=n>add_transition</span><span class=p>(</span><span class=s1>'by_reference'</span><span class=p>,</span> <span class=s1>'A'</span><span class=p>,</span> <span class=s1>'A'</span><span class=p>,</span> <span class=n>unless</span><span class=o>=</span><span class=p>[</span><span class=s1>'a_property'</span><span class=p>,</span> <span class=s1>'an_attribute'</span><span class=p>],</span> <span class=n>after</span><span class=o>=</span><span class=n>model</span><span class=o>.</span><span class=n>a_callback</span><span class=p>)</span><span class=n>machine</span><span class=o>.</span><span class=n>add_transition</span><span class=p>(</span><span class=s1>'imported'</span><span class=p>,</span> <span class=s1>'A'</span><span class=p>,</span> <span class=s1>'A'</span><span class=p>,</span> <span class=n>after</span><span class=o>=</span><span class=s1>'mod.imported_func'</span><span class=p>)</span><span class=n>model</span><span class=o>.</span><span class=n>by_name</span><span class=p>()</span><span class=n>model</span><span class=o>.</span><span class=n>by_reference</span><span class=p>()</span><span class=n>model</span><span class=o>.</span><span class=n>imported</span><span class=p>()</span></pre><p>The callable resolution is done in <code>Machine.resolve_callable</code>.This method can be overridden in case more complex callable resolution strategies are required.</p><p><strong>Example</strong></p><pre lang=python3><span class=k>class</span> <span class=nc>CustomMachine</span><span class=p>(</span><span class=n>Machine</span><span class=p>):</span>    <span class=nd>@staticmethod</span>    <span class=k>def</span> <span class=nf>resolve_callable</span><span class=p>(</span><span class=n>func</span><span class=p>,</span> <span class=n>event_data</span><span class=p>):</span>        <span class=c1># manipulate arguments here and return func, or super() if no manipulation is done.</span>        <span class=nb>super</span><span class=p>(</span><span class=n>CustomMachine</span><span class=p>,</span> <span class=n>CustomMachine</span><span class=p>)</span><span class=o>.</span><span class=n>resolve_callable</span><span class=p>(</span><span class=n>func</span><span class=p>,</span> <span class=n>event_data</span><span class=p>)</span></pre><h3><a rel=nofollow></a>Callback execution order</h3><p>In summary, there are currently three ways to trigger events. You can call a model's convenience functions like <code>lump.melt()</code>,execute triggers by name such as <code>lump.trigger(\"melt\")</code> or dispatch events on multiple models with <code>machine.dispatch(\"melt\")</code>(see section about multiple models in <a href=#alternative-initialization-patterns rel=nofollow>alternative initialization patterns</a>).Callbacks on transitions are then executed in the following order:</p><table><thead><tr><th>Callback</th><th align=center>Current State</th><th>Comments</th></tr></thead><tbody><tr><td><code>'machine.prepare_event'</code></td><td align=center><code>source</code></td><td>executed <em>once</em> before individual transitions are processed</td></tr><tr><td><code>'transition.prepare'</code></td><td align=center><code>source</code></td><td>executed as soon as the transition starts</td></tr><tr><td><code>'transition.conditions'</code></td><td align=center><code>source</code></td><td>conditions <em>may</em> fail and halt the transition</td></tr><tr><td><code>'transition.unless'</code></td><td align=center><code>source</code></td><td>conditions <em>may</em> fail and halt the transition</td></tr><tr><td><code>'machine.before_state_change'</code></td><td align=center><code>source</code></td><td>default callbacks declared on model</td></tr><tr><td><code>'transition.before'</code></td><td align=center><code>source</code></td><td></td></tr><tr><td><code>'state.on_exit'</code></td><td align=center><code>source</code></td><td>callbacks declared on the source state</td></tr><tr><td><code>&lt;STATE CHANGE&gt;</code></td><td align=center></td><td></td></tr><tr><td><code>'state.on_enter'</code></td><td align=center><code>destination</code></td><td>callbacks declared on the destination state</td></tr><tr><td><code>'transition.after'</code></td><td align=center><code>destination</code></td><td></td></tr><tr><td><code>'machine.after_state_change'</code></td><td align=center><code>destination</code></td><td>default callbacks declared on model</td></tr><tr><td><code>'machine.on_exception'</code></td><td align=center><code>source/destination</code></td><td>callbacks will be executed when an exception has been raised</td></tr><tr><td><code>'machine.finalize_event'</code></td><td align=center><code>source/destination</code></td><td>callbacks will be executed even if no transition took place or an exception has been raised</td></tr></tbody></table><p>If any callback raises an exception, the processing of callbacks is not continued. This means that when an error occurs before the transition (in <code>state.on_exit</code> or earlier), it is halted. In case there is a raise after the transition has been conducted (in <code>state.on_enter</code> or later), the state change persists and no rollback is happening. Callbacks specified in <code>machine.finalize_event</code> will always be executed unless the exception is raised by a finalizing callback itself. Note that each callback sequence has to be finished before the next stage is executed. Blocking callbacks will halt the execution order and therefore block the <code>trigger</code> or <code>dispatch</code> call itself. If you want callbacks to be executed in parallel, you could have a look at the <a href=#extensions rel=nofollow>extensions</a> <code>AsyncMachine</code> for asynchronous processing or <code>LockedMachine</code> for threading.</p><h3><a rel=nofollow></a>Passing data</h3><p>Sometimes you need to pass the callback functions registered at machine initialization some data that reflects the model's current state.Transitions allows you to do this in two different ways.</p><p>First (the default), you can pass any positional or keyword arguments directly to the trigger methods (created when you call <code>add_transition()</code>):</p><pre lang=python3><span class=k>class</span> <span class=nc>Matter</span><span class=p>(</span><span class=nb>object</span><span class=p>):</span>    <span class=k>def</span> <span class=fm>__init__</span><span class=p>(</span><span class=bp>self</span><span class=p>):</span> <span class=bp>self</span><span class=o>.</span><span class=n>set_environment</span><span class=p>()</span>    <span class=k>def</span> <span class=nf>set_environment</span><span class=p>(</span><span class=bp>self</span><span class=p>,</span> <span class=n>temp</span><span class=o>=</span><span class=mi>0</span><span class=p>,</span> <span class=n>pressure</span><span class=o>=</span><span class=mf>101.325</span><span class=p>):</span>        <span class=bp>self</span><span class=o>.</span><span class=n>temp</span> <span class=o>=</span> <span class=n>temp</span>        <span class=bp>self</span><span class=o>.</span><span class=n>pressure</span> <span class=o>=</span> <span class=n>pressure</span>    <span class=k>def</span> <span class=nf>print_temperature</span><span class=p>(</span><span class=bp>self</span><span class=p>):</span> <span class=nb>print</span><span class=p>(</span><span class=s2>\"Current temperature is </span><span class=si>%d</span><span class=s2> degrees celsius.\"</span> <span class=o>%</span> <span class=bp>self</span><span class=o>.</span><span class=n>temp</span><span class=p>)</span>    <span class=k>def</span> <span class=nf>print_pressure</span><span class=p>(</span><span class=bp>self</span><span class=p>):</span> <span class=nb>print</span><span class=p>(</span><span class=s2>\"Current pressure is </span><span class=si>%.2f</span><span class=s2> kPa.\"</span> <span class=o>%</span> <span class=bp>self</span><span class=o>.</span><span class=n>pressure</span><span class=p>)</span><span class=n>lump</span> <span class=o>=</span> <span class=n>Matter</span><span class=p>()</span><span class=n>machine</span> <span class=o>=</span> <span class=n>Machine</span><span class=p>(</span><span class=n>lump</span><span class=p>,</span> <span class=p>[</span><span class=s1>'solid'</span><span class=p>,</span> <span class=s1>'liquid'</span><span class=p>],</span> <span class=n>initial</span><span class=o>=</span><span class=s1>'solid'</span><span class=p>)</span><span class=n>machine</span><span class=o>.</span><span class=n>add_transition</span><span class=p>(</span><span class=s1>'melt'</span><span class=p>,</span> <span class=s1>'solid'</span><span class=p>,</span> <span class=s1>'liquid'</span><span class=p>,</span> <span class=n>before</span><span class=o>=</span><span class=s1>'set_environment'</span><span class=p>)</span><span class=n>lump</span><span class=o>.</span><span class=n>melt</span><span class=p>(</span><span class=mi>45</span><span class=p>)</span>  <span class=c1># positional arg;</span><span class=c1># equivalent to lump.trigger('melt', 45)</span><span class=n>lump</span><span class=o>.</span><span class=n>print_temperature</span><span class=p>()</span><span class=o>&gt;&gt;&gt;</span> <span class=s1>'Current temperature is 45 degrees celsius.'</span><span class=n>machine</span><span class=o>.</span><span class=n>set_state</span><span class=p>(</span><span class=s1>'solid'</span><span class=p>)</span>  <span class=c1># reset state so we can melt again</span><span class=n>lump</span><span class=o>.</span><span class=n>melt</span><span class=p>(</span><span class=n>pressure</span><span class=o>=</span><span class=mf>300.23</span><span class=p>)</span>  <span class=c1># keyword args also work</span><span class=n>lump</span><span class=o>.</span><span class=n>print_pressure</span><span class=p>()</span><span class=o>&gt;&gt;&gt;</span> <span class=s1>'Current pressure is 300.23 kPa.'</span></pre><p>You can pass any number of arguments you like to the trigger.</p><p>There is one important limitation to this approach: every callback function triggered by the state transition must be able to handle <em>all</em> of the arguments. This may cause problems if the callbacks each expect somewhat different data.</p><p>To get around this, Transitions supports an alternate method for sending data. If you set <code>send_event=True</code> at <code>Machine</code> initialization, all arguments to the triggers will be wrapped in an <code>EventData</code> instance and passed on to every callback. (The <code>EventData</code> object also maintains internal references to the source state, model, transition, machine, and trigger associated with the event, in case you need to access these for anything.)</p><pre lang=python3><span class=k>class</span> <span class=nc>Matter</span><span class=p>(</span><span class=nb>object</span><span class=p>):</span>    <span class=k>def</span> <span class=fm>__init__</span><span class=p>(</span><span class=bp>self</span><span class=p>):</span>        <span class=bp>self</span><span class=o>.</span><span class=n>temp</span> <span class=o>=</span> <span class=mi>0</span>        <span class=bp>self</span><span class=o>.</span><span class=n>pressure</span> <span class=o>=</span> <span class=mf>101.325</span>    <span class=c1># Note that the sole argument is now the EventData instance.</span>    <span class=c1># This object stores positional arguments passed to the trigger method in the</span>    <span class=c1># .args property, and stores keywords arguments in the .kwargs dictionary.</span>    <span class=k>def</span> <span class=nf>set_environment</span><span class=p>(</span><span class=bp>self</span><span class=p>,</span> <span class=n>event</span><span class=p>):</span>        <span class=bp>self</span><span class=o>.</span><span class=n>temp</span> <span class=o>=</span> <span class=n>event</span><span class=o>.</span><span class=n>kwargs</span><span class=o>.</span><span class=n>get</span><span class=p>(</span><span class=s1>'temp'</span><span class=p>,</span> <span class=mi>0</span><span class=p>)</span>        <span class=bp>self</span><span class=o>.</span><span class=n>pressure</span> <span class=o>=</span> <span class=n>event</span><span class=o>.</span><span class=n>kwargs</span><span class=o>.</span><span class=n>get</span><span class=p>(</span><span class=s1>'pressure'</span><span class=p>,</span> <span class=mf>101.325</span><span class=p>)</span>    <span class=k>def</span> <span class=nf>print_pressure</span><span class=p>(</span><span class=bp>self</span><span class=p>):</span> <span class=nb>print</span><span class=p>(</span><span class=s2>\"Current pressure is </span><span class=si>%.2f</span><span class=s2> kPa.\"</span> <span class=o>%</span> <span class=bp>self</span><span class=o>.</span><span class=n>pressure</span><span class=p>)</span><span class=n>lump</span> <span class=o>=</span> <span class=n>Matter</span><span class=p>()</span><span class=n>machine</span> <span class=o>=</span> <span class=n>Machine</span><span class=p>(</span><span class=n>lump</span><span class=p>,</span> <span class=p>[</span><span class=s1>'solid'</span><span class=p>,</span> <span class=s1>'liquid'</span><span class=p>],</span> <span class=n>send_event</span><span class=o>=</span><span class=kc>True</span><span class=p>,</span> <span class=n>initial</span><span class=o>=</span><span class=s1>'solid'</span><span class=p>)</span><span class=n>machine</span><span class=o>.</span><span class=n>add_transition</span><span class=p>(</span><span class=s1>'melt'</span><span class=p>,</span> <span class=s1>'solid'</span><span class=p>,</span> <span class=s1>'liquid'</span><span class=p>,</span> <span class=n>before</span><span class=o>=</span><span class=s1>'set_environment'</span><span class=p>)</span><span class=n>lump</span><span class=o>.</span><span class=n>melt</span><span class=p>(</span><span class=n>temp</span><span class=o>=</span><span class=mi>45</span><span class=p>,</span> <span class=n>pressure</span><span class=o>=</span><span class=mf>1853.68</span><span class=p>)</span>  <span class=c1># keyword args</span><span class=n>lump</span><span class=o>.</span><span class=n>print_pressure</span><span class=p>()</span><span class=o>&gt;&gt;&gt;</span> <span class=s1>'Current pressure is 1853.68 kPa.'</span></pre><h3><a rel=nofollow></a>Alternative initialization patterns</h3><p>In all of the examples so far, we've attached a new <code>Machine</code> instance to a separate model (<code>lump</code>, an instance of class <code>Matter</code>). While this separation keeps things tidy (because you don't have to monkey patch a whole bunch of new methods into the <code>Matter</code> class), it can also get annoying, since it requires you to keep track of which methods are called on the state machine, and which ones are called on the model that the state machine is bound to (e.g., <code>lump.on_enter_StateA()</code> vs. <code>machine.add_transition()</code>).</p><p>Fortunately, Transitions is flexible, and supports two other initialization patterns.</p><p>First, you can create a standalone state machine that doesn't require another model at all. Simply omit the model argument during initialization:</p><pre lang=python3><span class=n>machine</span> <span class=o>=</span> <span class=n>Machine</span><span class=p>(</span><span class=n>states</span><span class=o>=</span><span class=n>states</span><span class=p>,</span> <span class=n>transitions</span><span class=o>=</span><span class=n>transitions</span><span class=p>,</span> <span class=n>initial</span><span class=o>=</span><span class=s1>'solid'</span><span class=p>)</span><span class=n>machine</span><span class=o>.</span><span class=n>melt</span><span class=p>()</span><span class=n>machine</span><span class=o>.</span><span class=n>state</span><span class=o>&gt;&gt;&gt;</span> <span class=s1>'liquid'</span></pre><p>If you initialize the machine this way, you can then attach all triggering events (like <code>evaporate()</code>, <code>sublimate()</code>, etc.) and all callback functions directly to the <code>Machine</code> instance.</p><p>This approach has the benefit of consolidating all of the state machine functionality in one place, but can feel a little bit unnatural if you think state logic should be contained within the model itself rather than in a separate controller.</p><p>An alternative (potentially better) approach is to have the model inherit from the <code>Machine</code> class. Transitions is designed to support inheritance seamlessly. (just be sure to override class <code>Machine</code>'s <code>__init__</code> method!):</p><pre lang=python3><span class=k>class</span> <span class=nc>Matter</span><span class=p>(</span><span class=n>Machine</span><span class=p>):</span>    <span class=k>def</span> <span class=nf>say_hello</span><span class=p>(</span><span class=bp>self</span><span class=p>):</span> <span class=nb>print</span><span class=p>(</span><span class=s2>\"hello, new state!\"</span><span class=p>)</span>    <span class=k>def</span> <span class=nf>say_goodbye</span><span class=p>(</span><span class=bp>self</span><span class=p>):</span> <span class=nb>print</span><span class=p>(</span><span class=s2>\"goodbye, old state!\"</span><span class=p>)</span>    <span class=k>def</span> <span class=fm>__init__</span><span class=p>(</span><span class=bp>self</span><span class=p>):</span>        <span class=n>states</span> <span class=o>=</span> <span class=p>[</span><span class=s1>'solid'</span><span class=p>,</span> <span class=s1>'liquid'</span><span class=p>,</span> <span class=s1>'gas'</span><span class=p>]</span>        <span class=n>Machine</span><span class=o>.</span><span class=fm>__init__</span><span class=p>(</span><span class=bp>self</span><span class=p>,</span> <span class=n>states</span><span class=o>=</span><span class=n>states</span><span class=p>,</span> <span class=n>initial</span><span class=o>=</span><span class=s1>'solid'</span><span class=p>)</span>        <span class=bp>self</span><span class=o>.</span><span class=n>add_transition</span><span class=p>(</span><span class=s1>'melt'</span><span class=p>,</span> <span class=s1>'solid'</span><span class=p>,</span> <span class=s1>'liquid'</span><span class=p>)</span><span class=n>lump</span> <span class=o>=</span> <span class=n>Matter</span><span class=p>()</span><span class=n>lump</span><span class=o>.</span><span class=n>state</span><span class=o>&gt;&gt;&gt;</span> <span class=s1>'solid'</span><span class=n>lump</span><span class=o>.</span><span class=n>melt</span><span class=p>()</span><span class=n>lump</span><span class=o>.</span><span class=n>state</span><span class=o>&gt;&gt;&gt;</span> <span class=s1>'liquid'</span></pre><p>Here you get to consolidate all state machine functionality into your existing model, which often feels more natural than sticking all of the functionality we want in a separate standalone <code>Machine</code> instance.</p><p>A machine can handle multiple models which can be passed as a list like <code>Machine(model=[model1, model2, ...])</code>.In cases where you want to add models <em>as well as</em> the machine instance itself, you can pass the class variable placeholder (string) <code>Machine.self_literal</code> during initialization like <code>Machine(model=[Machine.self_literal, model1, ...])</code>.You can also create a standalone machine, and register models dynamically via <code>machine.add_model</code> by passing <code>model=None</code> to the constructor.Furthermore, you can use <code>machine.dispatch</code> to trigger events on all currently added models.Remember to call <code>machine.remove_model</code> if machine is long-lasting and your models are temporary and should be garbage collected:</p><pre lang=python3><span class=k>class</span> <span class=nc>Matter</span><span class=p>():</span>    <span class=k>pass</span><span class=n>lump1</span> <span class=o>=</span> <span class=n>Matter</span><span class=p>()</span><span class=n>lump2</span> <span class=o>=</span> <span class=n>Matter</span><span class=p>()</span><span class=c1># setting 'model' to None or passing an empty list will initialize the machine without a model</span><span class=n>machine</span> <span class=o>=</span> <span class=n>Machine</span><span class=p>(</span><span class=n>model</span><span class=o>=</span><span class=kc>None</span><span class=p>,</span> <span class=n>states</span><span class=o>=</span><span class=n>states</span><span class=p>,</span> <span class=n>transitions</span><span class=o>=</span><span class=n>transitions</span><span class=p>,</span> <span class=n>initial</span><span class=o>=</span><span class=s1>'solid'</span><span class=p>)</span><span class=n>machine</span><span class=o>.</span><span class=n>add_model</span><span class=p>(</span><span class=n>lump1</span><span class=p>)</span><span class=n>machine</span><span class=o>.</span><span class=n>add_model</span><span class=p>(</span><span class=n>lump2</span><span class=p>,</span> <span class=n>initial</span><span class=o>=</span><span class=s1>'liquid'</span><span class=p>)</span><span class=n>lump1</span><span class=o>.</span><span class=n>state</span><span class=o>&gt;&gt;&gt;</span> <span class=s1>'solid'</span><span class=n>lump2</span><span class=o>.</span><span class=n>state</span><span class=o>&gt;&gt;&gt;</span> <span class=s1>'liquid'</span><span class=c1># custom events as well as auto transitions can be dispatched to all models</span><span class=n>machine</span><span class=o>.</span><span class=n>dispatch</span><span class=p>(</span><span class=s2>\"to_plasma\"</span><span class=p>)</span><span class=n>lump1</span><span class=o>.</span><span class=n>state</span><span class=o>&gt;&gt;&gt;</span> <span class=s1>'plasma'</span><span class=k>assert</span> <span class=n>lump1</span><span class=o>.</span><span class=n>state</span> <span class=o>==</span> <span class=n>lump2</span><span class=o>.</span><span class=n>state</span><span class=n>machine</span><span class=o>.</span><span class=n>remove_model</span><span class=p>([</span><span class=n>lump1</span><span class=p>,</span> <span class=n>lump2</span><span class=p>])</span><span class=k>del</span> <span class=n>lump1</span>  <span class=c1># lump1 is garbage collected</span><span class=k>del</span> <span class=n>lump2</span>  <span class=c1># lump2 is garbage collected</span></pre><p>If you don't provide an initial state in the state machine constructor, <code>transitions</code> will create and add a default state called <code>'initial'</code>.If you do not want a default initial state, you can pass <code>initial=None</code>.However, in this case you need to pass an initial state every time you add a model.</p><pre lang=python3><span class=n>machine</span> <span class=o>=</span> <span class=n>Machine</span><span class=p>(</span><span class=n>model</span><span class=o>=</span><span class=kc>None</span><span class=p>,</span> <span class=n>states</span><span class=o>=</span><span class=n>states</span><span class=p>,</span> <span class=n>transitions</span><span class=o>=</span><span class=n>transitions</span><span class=p>,</span> <span class=n>initial</span><span class=o>=</span><span class=kc>None</span><span class=p>)</span><span class=n>machine</span><span class=o>.</span><span class=n>add_model</span><span class=p>(</span><span class=n>Matter</span><span class=p>())</span><span class=o>&gt;&gt;&gt;</span> <span class=s2>\"MachineError: No initial state configured for machine, must specify when adding model.\"</span><span class=n>machine</span><span class=o>.</span><span class=n>add_model</span><span class=p>(</span><span class=n>Matter</span><span class=p>(),</span> <span class=n>initial</span><span class=o>=</span><span class=s1>'liquid'</span><span class=p>)</span></pre><p>Models with multiple states could attach multiple machines using different <code>model_attribute</code> values. As mentioned in <a href=#checking-state rel=nofollow>Checking state</a>, this will add custom <code>is/to_&lt;model_attribute&gt;_&lt;state_name&gt;</code> functions:</p><pre lang=python3><span class=n>lump</span> <span class=o>=</span> <span class=n>Matter</span><span class=p>()</span><span class=n>matter_machine</span> <span class=o>=</span> <span class=n>Machine</span><span class=p>(</span><span class=n>lump</span><span class=p>,</span> <span class=n>states</span><span class=o>=</span><span class=p>[</span><span class=s1>'solid'</span><span class=p>,</span> <span class=s1>'liquid'</span><span class=p>,</span> <span class=s1>'gas'</span><span class=p>],</span> <span class=n>initial</span><span class=o>=</span><span class=s1>'solid'</span><span class=p>)</span><span class=c1># add a second machine to the same model but assign a different state attribute</span><span class=n>shipment_machine</span> <span class=o>=</span> <span class=n>Machine</span><span class=p>(</span><span class=n>lump</span><span class=p>,</span> <span class=n>states</span><span class=o>=</span><span class=p>[</span><span class=s1>'delivered'</span><span class=p>,</span> <span class=s1>'shipping'</span><span class=p>],</span> <span class=n>initial</span><span class=o>=</span><span class=s1>'delivered'</span><span class=p>,</span> <span class=n>model_attribute</span><span class=o>=</span><span class=s1>'shipping_state'</span><span class=p>)</span><span class=n>lump</span><span class=o>.</span><span class=n>state</span><span class=o>&gt;&gt;&gt;</span> <span class=s1>'solid'</span><span class=n>lump</span><span class=o>.</span><span class=n>is_solid</span><span class=p>()</span>  <span class=c1># check the default field</span><span class=o>&gt;&gt;&gt;</span> <span class=kc>True</span><span class=n>lump</span><span class=o>.</span><span class=n>shipping_state</span><span class=o>&gt;&gt;&gt;</span> <span class=s1>'delivered'</span><span class=n>lump</span><span class=o>.</span><span class=n>is_shipping_state_delivered</span><span class=p>()</span>  <span class=c1># check the custom field.</span><span class=o>&gt;&gt;&gt;</span> <span class=kc>True</span><span class=n>lump</span><span class=o>.</span><span class=n>to_shipping_state_shipping</span><span class=p>()</span><span class=o>&gt;&gt;&gt;</span> <span class=kc>True</span><span class=n>lump</span><span class=o>.</span><span class=n>is_shipping_state_delivered</span><span class=p>()</span><span class=o>&gt;&gt;&gt;</span> <span class=kc>False</span></pre><h3>Logging</h3><p>Transitions includes very rudimentary logging capabilities. A number of events \u2013 namely, state changes, transition triggers, and conditional checks \u2013 are logged as INFO-level events using the standard Python <code>logging</code> module. This means you can easily configure logging to standard output in a script:</p><pre lang=python3><span class=c1># Set up logging; The basic log level will be DEBUG</span><span class=kn>import</span> <span class=nn>logging</span><span class=n>logging</span><span class=o>.</span><span class=n>basicConfig</span><span class=p>(</span><span class=n>level</span><span class=o>=</span><span class=n>logging</span><span class=o>.</span><span class=n>DEBUG</span><span class=p>)</span><span class=c1># Set transitions' log level to INFO; DEBUG messages will be omitted</span><span class=n>logging</span><span class=o>.</span><span class=n>getLogger</span><span class=p>(</span><span class=s1>'transitions'</span><span class=p>)</span><span class=o>.</span><span class=n>setLevel</span><span class=p>(</span><span class=n>logging</span><span class=o>.</span><span class=n>INFO</span><span class=p>)</span><span class=c1># Business as usual</span><span class=n>machine</span> <span class=o>=</span> <span class=n>Machine</span><span class=p>(</span><span class=n>states</span><span class=o>=</span><span class=n>states</span><span class=p>,</span> <span class=n>transitions</span><span class=o>=</span><span class=n>transitions</span><span class=p>,</span> <span class=n>initial</span><span class=o>=</span><span class=s1>'solid'</span><span class=p>)</span><span class=o>...</span></pre><h3><a rel=nofollow></a>(Re-)Storing machine instances</h3><p>Machines are picklable and can be stored and loaded with <code>pickle</code>. For Python 3.3 and earlier <code>dill</code> is required.</p><pre lang=python3><span class=kn>import</span> <span class=nn>dill</span> <span class=k>as</span> <span class=nn>pickle</span> <span class=c1># only required for Python 3.3 and earlier</span><span class=n>m</span> <span class=o>=</span> <span class=n>Machine</span><span class=p>(</span><span class=n>states</span><span class=o>=</span><span class=p>[</span><span class=s1>'A'</span><span class=p>,</span> <span class=s1>'B'</span><span class=p>,</span> <span class=s1>'C'</span><span class=p>],</span> <span class=n>initial</span><span class=o>=</span><span class=s1>'A'</span><span class=p>)</span><span class=n>m</span><span class=o>.</span><span class=n>to_B</span><span class=p>()</span><span class=n>m</span><span class=o>.</span><span class=n>state</span><span class=o>&gt;&gt;&gt;</span> <span class=n>B</span><span class=c1># store the machine</span><span class=n>dump</span> <span class=o>=</span> <span class=n>pickle</span><span class=o>.</span><span class=n>dumps</span><span class=p>(</span><span class=n>m</span><span class=p>)</span><span class=c1># load the Machine instance again</span><span class=n>m2</span> <span class=o>=</span> <span class=n>pickle</span><span class=o>.</span><span class=n>loads</span><span class=p>(</span><span class=n>dump</span><span class=p>)</span><span class=n>m2</span><span class=o>.</span><span class=n>state</span><span class=o>&gt;&gt;&gt;</span> <span class=n>B</span><span class=n>m2</span><span class=o>.</span><span class=n>states</span><span class=o>.</span><span class=n>keys</span><span class=p>()</span><span class=o>&gt;&gt;&gt;</span> <span class=p>[</span><span class=s1>'A'</span><span class=p>,</span> <span class=s1>'B'</span><span class=p>,</span> <span class=s1>'C'</span><span class=p>]</span></pre><h3><a rel=nofollow></a> Extensions</h3><p>Even though the core of transitions is kept lightweight, there are a variety of MixIns to extend its functionality. Currently supported are:</p><ul><li><strong>Diagrams</strong> to visualize the current state of a machine</li><li><strong>Hierarchical State Machines</strong> for nesting and reuse</li><li><strong>Threadsafe Locks</strong> for parallel execution</li><li><strong>Async callbacks</strong> for asynchronous execution</li><li><strong>Custom States</strong> for extended state-related behaviour</li></ul><p>There are two mechanisms to retrieve a state machine instance with the desired features enabled.The first approach makes use of the convenience <code>factory</code> with the four parameters <code>graph</code>, <code>nested</code>, <code>locked</code> or <code>asyncio</code> set to <code>True</code> if the feature is required:</p><pre lang=python3><span class=kn>from</span> <span class=nn>transitions.extensions</span> <span class=kn>import</span> <span class=n>MachineFactory</span><span class=c1># create a machine with mixins</span><span class=n>diagram_cls</span> <span class=o>=</span> <span class=n>MachineFactory</span><span class=o>.</span><span class=n>get_predefined</span><span class=p>(</span><span class=n>graph</span><span class=o>=</span><span class=kc>True</span><span class=p>)</span><span class=n>nested_locked_cls</span> <span class=o>=</span> <span class=n>MachineFactory</span><span class=o>.</span><span class=n>get_predefined</span><span class=p>(</span><span class=n>nested</span><span class=o>=</span><span class=kc>True</span><span class=p>,</span> <span class=n>locked</span><span class=o>=</span><span class=kc>True</span><span class=p>)</span><span class=n>async_machine_cls</span> <span class=o>=</span> <span class=n>MachineFactory</span><span class=o>.</span><span class=n>get_predefined</span><span class=p>(</span><span class=n>asyncio</span><span class=o>=</span><span class=kc>True</span><span class=p>)</span><span class=c1># create instances from these classes</span><span class=c1># instances can be used like simple machines</span><span class=n>machine1</span> <span class=o>=</span> <span class=n>diagram_cls</span><span class=p>(</span><span class=n>model</span><span class=p>,</span> <span class=n>state</span><span class=p>,</span> <span class=n>transitions</span><span class=p>)</span><span class=n>machine2</span> <span class=o>=</span> <span class=n>nested_locked_cls</span><span class=p>(</span><span class=n>model</span><span class=p>,</span> <span class=n>state</span><span class=p>,</span> <span class=n>transitions</span><span class=p>)</span></pre><p>This approach targets experimental use since in this case the underlying classes do not have to be known.However, classes can also be directly imported from <code>transitions.extensions</code>. The naming scheme is as follows:</p><table><thead><tr><th align=right></th><th align=center>Diagrams</th><th align=center>Nested</th><th align=center>Locked</th><th align=center>Asyncio</th></tr></thead><tbody><tr><td align=right>Machine</td><td align=center>\u2718</td><td align=center>\u2718</td><td align=center>\u2718</td><td align=center>\u2718</td></tr><tr><td align=right>GraphMachine</td><td align=center>\u2713</td><td align=center>\u2718</td><td align=center>\u2718</td><td align=center>\u2718</td></tr><tr><td align=right>HierarchicalMachine</td><td align=center>\u2718</td><td align=center>\u2713</td><td align=center>\u2718</td><td align=center>\u2718</td></tr><tr><td align=right>LockedMachine</td><td align=center>\u2718</td><td align=center>\u2718</td><td align=center>\u2713</td><td align=center>\u2718</td></tr><tr><td align=right>HierarchicalGraphMachine</td><td align=center>\u2713</td><td align=center>\u2713</td><td align=center>\u2718</td><td align=center>\u2718</td></tr><tr><td align=right>LockedGraphMachine</td><td align=center>\u2713</td><td align=center>\u2718</td><td align=center>\u2713</td><td align=center>\u2718</td></tr><tr><td align=right>LockedHierarchicalMachine</td><td align=center>\u2718</td><td align=center>\u2713</td><td align=center>\u2713</td><td align=center>\u2718</td></tr><tr><td align=right>LockedHierarchicalGraphMachine</td><td align=center>\u2713</td><td align=center>\u2713</td><td align=center>\u2713</td><td align=center>\u2718</td></tr><tr><td align=right>AsyncMachine</td><td align=center>\u2718</td><td align=center>\u2718</td><td align=center>\u2718</td><td align=center>\u2713</td></tr><tr><td align=right>AsyncGraphMachine</td><td align=center>\u2713</td><td align=center>\u2718</td><td align=center>\u2718</td><td align=center>\u2713</td></tr><tr><td align=right>HierarchicalAsyncMachine</td><td align=center>\u2718</td><td align=center>\u2713</td><td align=center>\u2718</td><td align=center>\u2713</td></tr><tr><td align=right>HierarchicalAsyncGraphMachine</td><td align=center>\u2713</td><td align=center>\u2713</td><td align=center>\u2718</td><td align=center>\u2713</td></tr></tbody></table><p>To use a feature-rich state machine, one could write:</p><pre lang=python3><span class=kn>from</span> <span class=nn>transitions.extensions</span> <span class=kn>import</span> <span class=n>LockedHierarchicalGraphMachine</span> <span class=k>as</span> <span class=n>LHGMachine</span><span class=n>machine</span> <span class=o>=</span> <span class=n>LHGMachine</span><span class=p>(</span><span class=n>model</span><span class=p>,</span> <span class=n>states</span><span class=p>,</span> <span class=n>transitions</span><span class=p>)</span></pre><h4><a rel=nofollow></a> Diagrams</h4><p>Additional Keywords:</p><ul><li><code>title</code> (optional): Sets the title of the generated image.</li><li><code>show_conditions</code> (default False): Shows conditions at transition edges</li><li><code>show_auto_transitions</code> (default False): Shows auto transitions in graph</li><li><code>show_state_attributes</code> (default False): Show callbacks (enter, exit), tags and timeouts in graph</li></ul><p>Transitions can generate basic state diagrams displaying all valid transitions between states. To use the graphing functionality, you'll need to have <code>graphviz</code> and/or <code>pygraphviz</code> installed:<br>To generate graphs with the package <code>graphviz</code>, you need to install <a href=\"https://graphviz.org/\" rel=nofollow>Graphviz</a> manually or via a package manager.</p><pre><code>sudo apt-get install graphviz graphviz-dev  # Ubuntu and Debianbrew install graphviz  # MacOSconda install graphviz python-graphviz  # (Ana)conda</code></pre><p>Now you can install the actual Python packages</p><pre><code>pip install graphviz pygraphviz # install graphviz and/or pygraphviz manually...pip install transitions[diagrams]  # ... or install transitions with 'diagrams' extras which currently depends on pygraphviz</code></pre><p>Currently, <code>GraphMachine</code> will use <code>pygraphviz</code> when available and fall back to <code>graphviz</code> when <code>pygraphviz</code> cannot befound. This can be overridden by passing <code>use_pygraphviz=False</code> to the constructor. Note that this default might changein the future and <code>pygraphviz</code> support may be dropped.With <code>Model.get_graph()</code> you can get the current graph or the region of interest (roi) and draw it like this:</p><pre lang=python3><span class=c1># import transitions</span><span class=kn>from</span> <span class=nn>transitions.extensions</span> <span class=kn>import</span> <span class=n>GraphMachine</span><span class=n>m</span> <span class=o>=</span> <span class=n>Model</span><span class=p>()</span><span class=c1># without further arguments pygraphviz will be used</span><span class=n>machine</span> <span class=o>=</span> <span class=n>GraphMachine</span><span class=p>(</span><span class=n>model</span><span class=o>=</span><span class=n>m</span><span class=p>,</span> <span class=o>...</span><span class=p>)</span><span class=c1># when you want to use graphviz explicitly</span><span class=n>machine</span> <span class=o>=</span> <span class=n>GraphMachine</span><span class=p>(</span><span class=n>model</span><span class=o>=</span><span class=n>m</span><span class=p>,</span> <span class=n>use_pygraphviz</span><span class=o>=</span><span class=kc>False</span><span class=p>,</span> <span class=o>...</span><span class=p>)</span><span class=c1># in cases where auto transitions should be visible</span><span class=n>machine</span> <span class=o>=</span> <span class=n>GraphMachine</span><span class=p>(</span><span class=n>model</span><span class=o>=</span><span class=n>m</span><span class=p>,</span> <span class=n>show_auto_transitions</span><span class=o>=</span><span class=kc>True</span><span class=p>,</span> <span class=o>...</span><span class=p>)</span><span class=c1># draw the whole graph ...</span><span class=n>m</span><span class=o>.</span><span class=n>get_graph</span><span class=p>()</span><span class=o>.</span><span class=n>draw</span><span class=p>(</span><span class=s1>'my_state_diagram.png'</span><span class=p>,</span> <span class=n>prog</span><span class=o>=</span><span class=s1>'dot'</span><span class=p>)</span><span class=c1># ... or just the region of interest</span><span class=c1># (previous state, active state and all reachable states)</span><span class=n>roi</span> <span class=o>=</span> <span class=n>m</span><span class=o>.</span><span class=n>get_graph</span><span class=p>(</span><span class=n>show_roi</span><span class=o>=</span><span class=kc>True</span><span class=p>)</span><span class=o>.</span><span class=n>draw</span><span class=p>(</span><span class=s1>'my_state_diagram.png'</span><span class=p>,</span> <span class=n>prog</span><span class=o>=</span><span class=s1>'dot'</span><span class=p>)</span></pre><p>This produces something like this:</p><p><img src=\"https://pypi-camo.freetls.fastly.net/72f36463d6dc105b60b7281a92f7ffefb6c206ac/68747470733a2f2f757365722d696d616765732e67697468756275736572636f6e74656e742e636f6d2f3230353938362f34373532343236382d37323563313238302d643839612d313165382d383132622d3164336236653636376239312e706e67\" alt=\"state diagram example\"></p><p>Independent of the backend you use, the draw function also accepts a file descriptor or a binary stream as the first argument. If you set this parameter to <code>None</code>, the byte stream will be returned:</p><pre lang=python3><span class=kn>import</span> <span class=nn>io</span><span class=k>with</span> <span class=nb>open</span><span class=p>(</span><span class=s1>'a_graph.png'</span><span class=p>,</span> <span class=s1>'bw'</span><span class=p>)</span> <span class=k>as</span> <span class=n>f</span><span class=p>:</span>    <span class=c1># you need to pass the format when you pass objects instead of filenames.</span>    <span class=n>m</span><span class=o>.</span><span class=n>get_graph</span><span class=p>()</span><span class=o>.</span><span class=n>draw</span><span class=p>(</span><span class=n>f</span><span class=p>,</span> <span class=nb>format</span><span class=o>=</span><span class=s2>\"png\"</span><span class=p>,</span> <span class=n>prog</span><span class=o>=</span><span class=s1>'dot'</span><span class=p>)</span><span class=c1># you can pass a (binary) stream too</span><span class=n>b</span> <span class=o>=</span> <span class=n>io</span><span class=o>.</span><span class=n>BytesIO</span><span class=p>()</span><span class=n>m</span><span class=o>.</span><span class=n>get_graph</span><span class=p>()</span><span class=o>.</span><span class=n>draw</span><span class=p>(</span><span class=n>b</span><span class=p>,</span> <span class=nb>format</span><span class=o>=</span><span class=s2>\"png\"</span><span class=p>,</span> <span class=n>prog</span><span class=o>=</span><span class=s1>'dot'</span><span class=p>)</span><span class=c1># or just handle the binary string yourself</span><span class=n>result</span> <span class=o>=</span> <span class=n>m</span><span class=o>.</span><span class=n>get_graph</span><span class=p>()</span><span class=o>.</span><span class=n>draw</span><span class=p>(</span><span class=kc>None</span><span class=p>,</span> <span class=nb>format</span><span class=o>=</span><span class=s2>\"png\"</span><span class=p>,</span> <span class=n>prog</span><span class=o>=</span><span class=s1>'dot'</span><span class=p>)</span><span class=k>assert</span> <span class=n>result</span> <span class=o>==</span> <span class=n>b</span><span class=o>.</span><span class=n>getvalue</span><span class=p>()</span></pre><p>References and partials passed as callbacks will be resolved as good as possible:</p><pre lang=python3><span class=kn>from</span> <span class=nn>transitions.extensions</span> <span class=kn>import</span> <span class=n>GraphMachine</span><span class=kn>from</span> <span class=nn>functools</span> <span class=kn>import</span> <span class=n>partial</span><span class=k>class</span> <span class=nc>Model</span><span class=p>:</span>    <span class=k>def</span> <span class=nf>clear_state</span><span class=p>(</span><span class=bp>self</span><span class=p>,</span> <span class=n>deep</span><span class=o>=</span><span class=kc>False</span><span class=p>,</span> <span class=n>force</span><span class=o>=</span><span class=kc>False</span><span class=p>):</span>        <span class=nb>print</span><span class=p>(</span><span class=s2>\"Clearing state ...\"</span><span class=p>)</span>        <span class=k>return</span> <span class=kc>True</span><span class=n>model</span> <span class=o>=</span> <span class=n>Model</span><span class=p>()</span><span class=n>machine</span> <span class=o>=</span> <span class=n>GraphMachine</span><span class=p>(</span><span class=n>model</span><span class=o>=</span><span class=n>model</span><span class=p>,</span> <span class=n>states</span><span class=o>=</span><span class=p>[</span><span class=s1>'A'</span><span class=p>,</span> <span class=s1>'B'</span><span class=p>,</span> <span class=s1>'C'</span><span class=p>],</span>                       <span class=n>transitions</span><span class=o>=</span><span class=p>[</span>                           <span class=p>{</span><span class=s1>'trigger'</span><span class=p>:</span> <span class=s1>'clear'</span><span class=p>,</span> <span class=s1>'source'</span><span class=p>:</span> <span class=s1>'B'</span><span class=p>,</span> <span class=s1>'dest'</span><span class=p>:</span> <span class=s1>'A'</span><span class=p>,</span> <span class=s1>'conditions'</span><span class=p>:</span> <span class=n>model</span><span class=o>.</span><span class=n>clear_state</span><span class=p>},</span>                           <span class=p>{</span><span class=s1>'trigger'</span><span class=p>:</span> <span class=s1>'clear'</span><span class=p>,</span> <span class=s1>'source'</span><span class=p>:</span> <span class=s1>'C'</span><span class=p>,</span> <span class=s1>'dest'</span><span class=p>:</span> <span class=s1>'A'</span><span class=p>,</span>                            <span class=s1>'conditions'</span><span class=p>:</span> <span class=n>partial</span><span class=p>(</span><span class=n>model</span><span class=o>.</span><span class=n>clear_state</span><span class=p>,</span> <span class=kc>False</span><span class=p>,</span> <span class=n>force</span><span class=o>=</span><span class=kc>True</span><span class=p>)},</span>                       <span class=p>],</span>                       <span class=n>initial</span><span class=o>=</span><span class=s1>'A'</span><span class=p>,</span> <span class=n>show_conditions</span><span class=o>=</span><span class=kc>True</span><span class=p>)</span><span class=n>model</span><span class=o>.</span><span class=n>get_graph</span><span class=p>()</span><span class=o>.</span><span class=n>draw</span><span class=p>(</span><span class=s1>'my_state_diagram.png'</span><span class=p>,</span> <span class=n>prog</span><span class=o>=</span><span class=s1>'dot'</span><span class=p>)</span></pre><p>This should produce something similar to this:</p><p><img src=\"https://pypi-camo.freetls.fastly.net/8140e41451369aba3bee0c330090e136f6bdb293/68747470733a2f2f757365722d696d616765732e67697468756275736572636f6e74656e742e636f6d2f3230353938362f3131303738333037362d33393038376638302d383236382d313165622d386661312d6663376261633937663463662e706e67\" alt=\"state diagram references_example\"></p><p>If the format of references does not suit your needs, you can override the static method <code>GraphMachine.format_references</code>. If you want to skip reference entirely, just let <code>GraphMachine.format_references</code> return <code>None</code>.Also, have a look at our <a href=\"./examples\" rel=nofollow>example</a> IPython/Jupyter notebooks for a more detailed example about how to use and edit graphs.</p><h3><a rel=nofollow></a>Hierarchical State Machine (HSM)</h3><p>Transitions includes an extension module which allows nesting states.This allows us to create contexts and to model cases where states are related to certain subtasks in the state machine.To create a nested state, either import <code>NestedState</code> from transitions or use a dictionary with the initialization arguments <code>name</code> and <code>children</code>.Optionally, <code>initial</code> can be used to define a sub state to transit to, when the nested state is entered.</p><pre lang=python3><span class=kn>from</span> <span class=nn>transitions.extensions</span> <span class=kn>import</span> <span class=n>HierarchicalMachine</span><span class=n>states</span> <span class=o>=</span> <span class=p>[</span><span class=s1>'standing'</span><span class=p>,</span> <span class=s1>'walking'</span><span class=p>,</span> <span class=p>{</span><span class=s1>'name'</span><span class=p>:</span> <span class=s1>'caffeinated'</span><span class=p>,</span> <span class=s1>'children'</span><span class=p>:[</span><span class=s1>'dithering'</span><span class=p>,</span> <span class=s1>'running'</span><span class=p>]}]</span><span class=n>transitions</span> <span class=o>=</span> <span class=p>[</span>  <span class=p>[</span><span class=s1>'walk'</span><span class=p>,</span> <span class=s1>'standing'</span><span class=p>,</span> <span class=s1>'walking'</span><span class=p>],</span>  <span class=p>[</span><span class=s1>'stop'</span><span class=p>,</span> <span class=s1>'walking'</span><span class=p>,</span> <span class=s1>'standing'</span><span class=p>],</span>  <span class=p>[</span><span class=s1>'drink'</span><span class=p>,</span> <span class=s1>'*'</span><span class=p>,</span> <span class=s1>'caffeinated'</span><span class=p>],</span>  <span class=p>[</span><span class=s1>'walk'</span><span class=p>,</span> <span class=p>[</span><span class=s1>'caffeinated'</span><span class=p>,</span> <span class=s1>'caffeinated_dithering'</span><span class=p>],</span> <span class=s1>'caffeinated_running'</span><span class=p>],</span>  <span class=p>[</span><span class=s1>'relax'</span><span class=p>,</span> <span class=s1>'caffeinated'</span><span class=p>,</span> <span class=s1>'standing'</span><span class=p>]</span><span class=p>]</span><span class=n>machine</span> <span class=o>=</span> <span class=n>HierarchicalMachine</span><span class=p>(</span><span class=n>states</span><span class=o>=</span><span class=n>states</span><span class=p>,</span> <span class=n>transitions</span><span class=o>=</span><span class=n>transitions</span><span class=p>,</span> <span class=n>initial</span><span class=o>=</span><span class=s1>'standing'</span><span class=p>,</span> <span class=n>ignore_invalid_triggers</span><span class=o>=</span><span class=kc>True</span><span class=p>)</span><span class=n>machine</span><span class=o>.</span><span class=n>walk</span><span class=p>()</span> <span class=c1># Walking now</span><span class=n>machine</span><span class=o>.</span><span class=n>stop</span><span class=p>()</span> <span class=c1># let's stop for a moment</span><span class=n>machine</span><span class=o>.</span><span class=n>drink</span><span class=p>()</span> <span class=c1># coffee time</span><span class=n>machine</span><span class=o>.</span><span class=n>state</span><span class=o>&gt;&gt;&gt;</span> <span class=s1>'caffeinated'</span><span class=n>machine</span><span class=o>.</span><span class=n>walk</span><span class=p>()</span> <span class=c1># we have to go faster</span><span class=n>machine</span><span class=o>.</span><span class=n>state</span><span class=o>&gt;&gt;&gt;</span> <span class=s1>'caffeinated_running'</span><span class=n>machine</span><span class=o>.</span><span class=n>stop</span><span class=p>()</span> <span class=c1># can't stop moving!</span><span class=n>machine</span><span class=o>.</span><span class=n>state</span><span class=o>&gt;&gt;&gt;</span> <span class=s1>'caffeinated_running'</span><span class=n>machine</span><span class=o>.</span><span class=n>relax</span><span class=p>()</span> <span class=c1># leave nested state</span><span class=n>machine</span><span class=o>.</span><span class=n>state</span> <span class=c1># phew, what a ride</span><span class=o>&gt;&gt;&gt;</span> <span class=s1>'standing'</span><span class=c1># machine.on_enter_caffeinated_running('callback_method')</span></pre><p>A configuration making use of <code>initial</code> could look like this:</p><pre lang=python3><span class=c1># ...</span><span class=n>states</span> <span class=o>=</span> <span class=p>[</span><span class=s1>'standing'</span><span class=p>,</span> <span class=s1>'walking'</span><span class=p>,</span> <span class=p>{</span><span class=s1>'name'</span><span class=p>:</span> <span class=s1>'caffeinated'</span><span class=p>,</span> <span class=s1>'initial'</span><span class=p>:</span> <span class=s1>'dithering'</span><span class=p>,</span> <span class=s1>'children'</span><span class=p>:</span> <span class=p>[</span><span class=s1>'dithering'</span><span class=p>,</span> <span class=s1>'running'</span><span class=p>]}]</span><span class=n>transitions</span> <span class=o>=</span> <span class=p>[</span>  <span class=p>[</span><span class=s1>'walk'</span><span class=p>,</span> <span class=s1>'standing'</span><span class=p>,</span> <span class=s1>'walking'</span><span class=p>],</span>  <span class=p>[</span><span class=s1>'stop'</span><span class=p>,</span> <span class=s1>'walking'</span><span class=p>,</span> <span class=s1>'standing'</span><span class=p>],</span>  <span class=c1># this transition will end in 'caffeinated_dithering'...</span>  <span class=p>[</span><span class=s1>'drink'</span><span class=p>,</span> <span class=s1>'*'</span><span class=p>,</span> <span class=s1>'caffeinated'</span><span class=p>],</span>  <span class=c1># ... that is why we do not need do specify 'caffeinated' here anymore</span>  <span class=p>[</span><span class=s1>'walk'</span><span class=p>,</span> <span class=s1>'caffeinated_dithering'</span><span class=p>,</span> <span class=s1>'caffeinated_running'</span><span class=p>],</span>  <span class=p>[</span><span class=s1>'relax'</span><span class=p>,</span> <span class=s1>'caffeinated'</span><span class=p>,</span> <span class=s1>'standing'</span><span class=p>]</span><span class=p>]</span><span class=c1># ...</span></pre><p>The <code>initial</code> keyword of the <code>HierarchicalMachine</code> constructor accepts nested states (e.g. <code>initial='caffeinated_running'</code>) and a list of states which is considered to be a parallel state (e.g. <code>initial=['A', 'B']</code>) or the current state of another model (<code>initial=model.state</code>) which should be effectively one of the previous mentioned options. Note that when passing a string, <code>transition</code> will check the targeted state for <code>initial</code> substates and use this as an entry state. This will be done recursively until a substate does not mention an initial state. Parallel states or a state passed as a list will be used 'as is' and no further initial evaluation will be conducted.</p><p>Note that your previously created state object <em>must be</em> a <code>NestedState</code> or a derived class of it.The standard <code>State</code> class used in simple <code>Machine</code> instances lacks features required for nesting.</p><pre lang=python3><span class=kn>from</span> <span class=nn>transitions.extensions.nesting</span> <span class=kn>import</span> <span class=n>HierarchicalMachine</span><span class=p>,</span> <span class=n>NestedState</span><span class=kn>from</span> <span class=nn>transitions</span> <span class=kn>import</span>  <span class=n>State</span><span class=n>m</span> <span class=o>=</span> <span class=n>HierarchicalMachine</span><span class=p>(</span><span class=n>states</span><span class=o>=</span><span class=p>[</span><span class=s1>'A'</span><span class=p>],</span> <span class=n>initial</span><span class=o>=</span><span class=s1>'initial'</span><span class=p>)</span><span class=n>m</span><span class=o>.</span><span class=n>add_state</span><span class=p>(</span><span class=s1>'B'</span><span class=p>)</span>  <span class=c1># fine</span><span class=n>m</span><span class=o>.</span><span class=n>add_state</span><span class=p>({</span><span class=s1>'name'</span><span class=p>:</span> <span class=s1>'C'</span><span class=p>})</span>  <span class=c1># also fine</span><span class=n>m</span><span class=o>.</span><span class=n>add_state</span><span class=p>(</span><span class=n>NestedState</span><span class=p>(</span><span class=s1>'D'</span><span class=p>))</span>  <span class=c1># fine as well</span><span class=n>m</span><span class=o>.</span><span class=n>add_state</span><span class=p>(</span><span class=n>State</span><span class=p>(</span><span class=s1>'E'</span><span class=p>))</span>  <span class=c1># does not work!</span></pre><p>Some things that have to be considered when working with nested states: State <em>names are concatenated</em> with <code>NestedState.separator</code>.Currently the separator is set to underscore ('_') and therefore behaves similar to the basic machine.This means a substate <code>bar</code> from state <code>foo</code> will be known by <code>foo_bar</code>. A substate <code>baz</code> of <code>bar</code> will be referred to as <code>foo_bar_baz</code> and so on.When entering a substate, <code>enter</code> will be called for all parent states. The same is true for exiting substates.Third, nested states can overwrite transition behaviour of their parents.If a transition is not known to the current state it will be delegated to its parent.</p><p><strong>This means that in the standard configuration, state names in HSMs MUST NOT contain underscores.</strong>For <code>transitions</code> it's impossible to tell whether <code>machine.add_state('state_name')</code> should add a state named <code>state_name</code> or add a substate <code>name</code> to the state <code>state</code>.In some cases this is not sufficient however.For instance if state names consist of more than one word and you want/need to use underscore to separate them instead of <code>CamelCase</code>.To deal with this, you can change the character used for separation quite easily.You can even use fancy unicode characters if you use Python 3.Setting the separator to something else than underscore changes some of the behaviour (auto_transition and setting callbacks) though:</p><pre lang=python3><span class=kn>from</span> <span class=nn>transitions.extensions</span> <span class=kn>import</span> <span class=n>HierarchicalMachine</span><span class=kn>from</span> <span class=nn>transitions.extensions.nesting</span> <span class=kn>import</span> <span class=n>NestedState</span><span class=n>NestedState</span><span class=o>.</span><span class=n>separator</span> <span class=o>=</span> <span class=s1>'\u21a6'</span><span class=n>states</span> <span class=o>=</span> <span class=p>[</span><span class=s1>'A'</span><span class=p>,</span> <span class=s1>'B'</span><span class=p>,</span>  <span class=p>{</span><span class=s1>'name'</span><span class=p>:</span> <span class=s1>'C'</span><span class=p>,</span> <span class=s1>'children'</span><span class=p>:[</span><span class=s1>'1'</span><span class=p>,</span> <span class=s1>'2'</span><span class=p>,</span>    <span class=p>{</span><span class=s1>'name'</span><span class=p>:</span> <span class=s1>'3'</span><span class=p>,</span> <span class=s1>'children'</span><span class=p>:</span> <span class=p>[</span><span class=s1>'a'</span><span class=p>,</span> <span class=s1>'b'</span><span class=p>,</span> <span class=s1>'c'</span><span class=p>]}</span>  <span class=p>]}</span><span class=p>]</span><span class=n>transitions</span> <span class=o>=</span> <span class=p>[</span>    <span class=p>[</span><span class=s1>'reset'</span><span class=p>,</span> <span class=s1>'C'</span><span class=p>,</span> <span class=s1>'A'</span><span class=p>],</span>    <span class=p>[</span><span class=s1>'reset'</span><span class=p>,</span> <span class=s1>'C\u21a62'</span><span class=p>,</span> <span class=s1>'C'</span><span class=p>]</span>  <span class=c1># overwriting parent reset</span><span class=p>]</span><span class=c1># we rely on auto transitions</span><span class=n>machine</span> <span class=o>=</span> <span class=n>HierarchicalMachine</span><span class=p>(</span><span class=n>states</span><span class=o>=</span><span class=n>states</span><span class=p>,</span> <span class=n>transitions</span><span class=o>=</span><span class=n>transitions</span><span class=p>,</span> <span class=n>initial</span><span class=o>=</span><span class=s1>'A'</span><span class=p>)</span><span class=n>machine</span><span class=o>.</span><span class=n>to_B</span><span class=p>()</span>  <span class=c1># exit state A, enter state B</span><span class=n>machine</span><span class=o>.</span><span class=n>to_C</span><span class=p>()</span>  <span class=c1># exit B, enter C</span><span class=n>machine</span><span class=o>.</span><span class=n>to_C</span><span class=o>.</span><span class=n>s3</span><span class=o>.</span><span class=n>a</span><span class=p>()</span>  <span class=c1># enter C\u21a6a; enter C\u21a63\u21a6a;</span><span class=n>machine</span><span class=o>.</span><span class=n>state</span><span class=o>&gt;&gt;&gt;</span> <span class=s1>'C\u21a63\u21a6a'</span><span class=k>assert</span> <span class=n>machine</span><span class=o>.</span><span class=n>is_C</span><span class=o>.</span><span class=n>s3</span><span class=o>.</span><span class=n>a</span><span class=p>()</span><span class=n>machine</span><span class=o>.</span><span class=n>to</span><span class=p>(</span><span class=s1>'C\u21a62'</span><span class=p>)</span>  <span class=c1># not interactive; exit C\u21a63\u21a6a, exit C\u21a63, enter C\u21a62</span><span class=n>machine</span><span class=o>.</span><span class=n>reset</span><span class=p>()</span>  <span class=c1># exit C\u21a62; reset C has been overwritten by C\u21a63</span><span class=n>machine</span><span class=o>.</span><span class=n>state</span><span class=o>&gt;&gt;&gt;</span> <span class=s1>'C'</span><span class=n>machine</span><span class=o>.</span><span class=n>reset</span><span class=p>()</span>  <span class=c1># exit C, enter A</span><span class=n>machine</span><span class=o>.</span><span class=n>state</span><span class=o>&gt;&gt;&gt;</span> <span class=s1>'A'</span><span class=c1># s.on_enter('C\u21a63\u21a6a', 'callback_method')</span></pre><p>Instead of <code>to_C_3_a()</code> auto transition is called as <code>to_C.s3.a()</code>. If your substate starts with a digit, transitions adds a prefix 's' ('3' becomes 's3') to the auto transition <code>FunctionWrapper</code> to comply with the attribute naming scheme of Python.If interactive completion is not required, <code>to('C\u21a63\u21a6a')</code> can be called directly. Additionally, <code>on_enter/exit_&lt;&lt;state name&gt;&gt;</code> is replaced with <code>on_enter/exit(state_name, callback)</code>. State checks can be conducted in a similar fashion. Instead of <code>is_C_3_a()</code>, the <code>FunctionWrapper</code> variant <code>is_C.s3.a()</code> can be used.</p><p>To check whether the current state is a substate of a specific state, <code>is_state</code> supports the keyword <code>allow_substates</code>:</p><pre lang=python3><span class=n>machine</span><span class=o>.</span><span class=n>state</span><span class=o>&gt;&gt;&gt;</span> <span class=s1>'C.2.a'</span><span class=n>machine</span><span class=o>.</span><span class=n>is_C</span><span class=p>()</span> <span class=c1># checks for specific states</span><span class=o>&gt;&gt;&gt;</span> <span class=kc>False</span><span class=n>machine</span><span class=o>.</span><span class=n>is_C</span><span class=p>(</span><span class=n>allow_substates</span><span class=o>=</span><span class=kc>True</span><span class=p>)</span><span class=o>&gt;&gt;&gt;</span> <span class=kc>True</span><span class=k>assert</span> <span class=n>machine</span><span class=o>.</span><span class=n>is_C</span><span class=o>.</span><span class=n>s2</span><span class=p>()</span> <span class=ow>is</span> <span class=kc>False</span><span class=k>assert</span> <span class=n>machine</span><span class=o>.</span><span class=n>is_C</span><span class=o>.</span><span class=n>s2</span><span class=p>(</span><span class=n>allow_substates</span><span class=o>=</span><span class=kc>True</span><span class=p>)</span>  <span class=c1># FunctionWrapper support allow_substate as well</span></pre><p><em>new in 0.8.0</em><br>You can use enumerations in HSMs as well but keep in mind that <code>Enum</code> are compared by value.If you have a value more than once in a state tree those states cannot be distinguished.</p><pre lang=python3><span class=n>states</span> <span class=o>=</span> <span class=p>[</span><span class=n>States</span><span class=o>.</span><span class=n>RED</span><span class=p>,</span> <span class=n>States</span><span class=o>.</span><span class=n>YELLOW</span><span class=p>,</span> <span class=p>{</span><span class=s1>'name'</span><span class=p>:</span> <span class=n>States</span><span class=o>.</span><span class=n>GREEN</span><span class=p>,</span> <span class=s1>'children'</span><span class=p>:</span> <span class=p>[</span><span class=s1>'tick'</span><span class=p>,</span> <span class=s1>'tock'</span><span class=p>]}]</span><span class=n>states</span> <span class=o>=</span> <span class=p>[</span><span class=s1>'A'</span><span class=p>,</span> <span class=p>{</span><span class=s1>'name'</span><span class=p>:</span> <span class=s1>'B'</span><span class=p>,</span> <span class=s1>'children'</span><span class=p>:</span> <span class=n>states</span><span class=p>,</span> <span class=s1>'initial'</span><span class=p>:</span> <span class=n>States</span><span class=o>.</span><span class=n>GREEN</span><span class=p>},</span> <span class=n>States</span><span class=o>.</span><span class=n>GREEN</span><span class=p>]</span><span class=n>machine</span> <span class=o>=</span> <span class=n>HierarchicalMachine</span><span class=p>(</span><span class=n>states</span><span class=o>=</span><span class=n>states</span><span class=p>)</span><span class=n>machine</span><span class=o>.</span><span class=n>to_B</span><span class=p>()</span><span class=n>machine</span><span class=o>.</span><span class=n>is_GREEN</span><span class=p>()</span>  <span class=c1># returns True even though the actual state is B_GREEN</span></pre><p><em>new in 0.8.0</em><br><code>HierarchicalMachine</code> has been rewritten from scratch to support parallel states and better isolation of nested states.This involves some tweaks based on community feedback.To get an idea of processing order and configuration have a look at the following example:</p><pre lang=python3><span class=kn>from</span> <span class=nn>transitions.extensions.nesting</span> <span class=kn>import</span> <span class=n>HierarchicalMachine</span><span class=kn>import</span> <span class=nn>logging</span><span class=n>states</span> <span class=o>=</span> <span class=p>[</span><span class=s1>'A'</span><span class=p>,</span> <span class=s1>'B'</span><span class=p>,</span> <span class=p>{</span><span class=s1>'name'</span><span class=p>:</span> <span class=s1>'C'</span><span class=p>,</span> <span class=s1>'parallel'</span><span class=p>:</span> <span class=p>[{</span><span class=s1>'name'</span><span class=p>:</span> <span class=s1>'1'</span><span class=p>,</span> <span class=s1>'children'</span><span class=p>:</span> <span class=p>[</span><span class=s1>'a'</span><span class=p>,</span> <span class=s1>'b'</span><span class=p>,</span> <span class=s1>'c'</span><span class=p>],</span> <span class=s1>'initial'</span><span class=p>:</span> <span class=s1>'a'</span><span class=p>,</span>                                                <span class=s1>'transitions'</span><span class=p>:</span> <span class=p>[[</span><span class=s1>'go'</span><span class=p>,</span> <span class=s1>'a'</span><span class=p>,</span> <span class=s1>'b'</span><span class=p>]]},</span>                                               <span class=p>{</span><span class=s1>'name'</span><span class=p>:</span> <span class=s1>'2'</span><span class=p>,</span> <span class=s1>'children'</span><span class=p>:</span> <span class=p>[</span><span class=s1>'x'</span><span class=p>,</span> <span class=s1>'y'</span><span class=p>,</span> <span class=s1>'z'</span><span class=p>],</span> <span class=s1>'initial'</span><span class=p>:</span> <span class=s1>'z'</span><span class=p>}],</span>                      <span class=s1>'transitions'</span><span class=p>:</span> <span class=p>[[</span><span class=s1>'go'</span><span class=p>,</span> <span class=s1>'2_z'</span><span class=p>,</span> <span class=s1>'2_x'</span><span class=p>]]}]</span><span class=n>transitions</span> <span class=o>=</span> <span class=p>[[</span><span class=s1>'reset'</span><span class=p>,</span> <span class=s1>'C_1_b'</span><span class=p>,</span> <span class=s1>'B'</span><span class=p>]]</span><span class=n>logging</span><span class=o>.</span><span class=n>basicConfig</span><span class=p>(</span><span class=n>level</span><span class=o>=</span><span class=n>logging</span><span class=o>.</span><span class=n>INFO</span><span class=p>)</span><span class=n>machine</span> <span class=o>=</span> <span class=n>HierarchicalMachine</span><span class=p>(</span><span class=n>states</span><span class=o>=</span><span class=n>states</span><span class=p>,</span> <span class=n>transitions</span><span class=o>=</span><span class=n>transitions</span><span class=p>,</span> <span class=n>initial</span><span class=o>=</span><span class=s1>'A'</span><span class=p>)</span><span class=n>machine</span><span class=o>.</span><span class=n>to_C</span><span class=p>()</span><span class=c1># INFO:transitions.extensions.nesting:Exited state A</span><span class=c1># INFO:transitions.extensions.nesting:Entered state C</span><span class=c1># INFO:transitions.extensions.nesting:Entered state C_1</span><span class=c1># INFO:transitions.extensions.nesting:Entered state C_2</span><span class=c1># INFO:transitions.extensions.nesting:Entered state C_1_a</span><span class=c1># INFO:transitions.extensions.nesting:Entered state C_2_z</span><span class=n>machine</span><span class=o>.</span><span class=n>go</span><span class=p>()</span><span class=c1># INFO:transitions.extensions.nesting:Exited state C_1_a</span><span class=c1># INFO:transitions.extensions.nesting:Entered state C_1_b</span><span class=c1># INFO:transitions.extensions.nesting:Exited state C_2_z</span><span class=c1># INFO:transitions.extensions.nesting:Entered state C_2_x</span><span class=n>machine</span><span class=o>.</span><span class=n>reset</span><span class=p>()</span><span class=c1># INFO:transitions.extensions.nesting:Exited state C_1_b</span><span class=c1># INFO:transitions.extensions.nesting:Exited state C_2_x</span><span class=c1># INFO:transitions.extensions.nesting:Exited state C_1</span><span class=c1># INFO:transitions.extensions.nesting:Exited state C_2</span><span class=c1># INFO:transitions.extensions.nesting:Exited state C</span><span class=c1># INFO:transitions.extensions.nesting:Entered state B</span></pre><p>When using <code>parallel</code> instead of <code>children</code>, <code>transitions</code> will enter all states of the passed list at the same time.Which substate to enter is defined by <code>initial</code> which should <em>always</em> point to a direct substate.A novel feature is to define local transitions by passing the <code>transitions</code> keyword in a state definition.The above defined transition <code>['go', 'a', 'b']</code> is only valid in <code>C_1</code>.While you can reference substates as done in <code>['go', '2_z', '2_x']</code> you cannot reference parent states directly in locally defined transitions.When a parent state is exited, its children will also be exited.In addition to the processing order of transitions known from <code>Machine</code> where transitions are considered in the order they were added, <code>HierarchicalMachine</code> considers hierarchy as well.Transitions defined in substates will be evaluated first (e.g. <code>C_1_a</code> is left before <code>C_2_z</code>) and transitions defined with wildcard <code>*</code> will (for now) only add transitions to root states (in this example <code>A</code>, <code>B</code>, <code>C</code>)Starting with <em>0.8.0</em> nested states can be added directly and will issue the creation of parent states on-the-fly:</p><pre lang=python3><span class=n>m</span> <span class=o>=</span> <span class=n>HierarchicalMachine</span><span class=p>(</span><span class=n>states</span><span class=o>=</span><span class=p>[</span><span class=s1>'A'</span><span class=p>],</span> <span class=n>initial</span><span class=o>=</span><span class=s1>'A'</span><span class=p>)</span><span class=n>m</span><span class=o>.</span><span class=n>add_state</span><span class=p>(</span><span class=s1>'B_1_a'</span><span class=p>)</span><span class=n>m</span><span class=o>.</span><span class=n>to_B_1</span><span class=p>()</span><span class=k>assert</span> <span class=n>m</span><span class=o>.</span><span class=n>is_B</span><span class=p>(</span><span class=n>allow_substates</span><span class=o>=</span><span class=kc>True</span><span class=p>)</span></pre><h4>Reuse of previously created HSMs</h4><p>Besides semantic order, nested states are very handy if you want to specify state machines for specific tasks and plan to reuse them.Before <em>0.8.0</em>, a <code>HierarchicalMachine</code> would not integrate the machine instance itself but the states and transitions by creating copies of them.However, since <em>0.8.0</em> <code>(Nested)State</code> instances are just <strong>referenced</strong> which means changes in one machine's collection of states and events will influence the other machine instance. Models and their state will not be shared though.Note that events and transitions are also copied by reference and will be shared by both instances if you do not use the <code>remap</code> keyword.This change was done to be more in line with <code>Machine</code> which also uses passed <code>State</code> instances by reference.</p><pre lang=python3><span class=n>count_states</span> <span class=o>=</span> <span class=p>[</span><span class=s1>'1'</span><span class=p>,</span> <span class=s1>'2'</span><span class=p>,</span> <span class=s1>'3'</span><span class=p>,</span> <span class=s1>'done'</span><span class=p>]</span><span class=n>count_trans</span> <span class=o>=</span> <span class=p>[</span>    <span class=p>[</span><span class=s1>'increase'</span><span class=p>,</span> <span class=s1>'1'</span><span class=p>,</span> <span class=s1>'2'</span><span class=p>],</span>    <span class=p>[</span><span class=s1>'increase'</span><span class=p>,</span> <span class=s1>'2'</span><span class=p>,</span> <span class=s1>'3'</span><span class=p>],</span>    <span class=p>[</span><span class=s1>'decrease'</span><span class=p>,</span> <span class=s1>'3'</span><span class=p>,</span> <span class=s1>'2'</span><span class=p>],</span>    <span class=p>[</span><span class=s1>'decrease'</span><span class=p>,</span> <span class=s1>'2'</span><span class=p>,</span> <span class=s1>'1'</span><span class=p>],</span>    <span class=p>[</span><span class=s1>'done'</span><span class=p>,</span> <span class=s1>'3'</span><span class=p>,</span> <span class=s1>'done'</span><span class=p>],</span>    <span class=p>[</span><span class=s1>'reset'</span><span class=p>,</span> <span class=s1>'*'</span><span class=p>,</span> <span class=s1>'1'</span><span class=p>]</span><span class=p>]</span><span class=n>counter</span> <span class=o>=</span> <span class=n>HierarchicalMachine</span><span class=p>(</span><span class=n>states</span><span class=o>=</span><span class=n>count_states</span><span class=p>,</span> <span class=n>transitions</span><span class=o>=</span><span class=n>count_trans</span><span class=p>,</span> <span class=n>initial</span><span class=o>=</span><span class=s1>'1'</span><span class=p>)</span><span class=n>counter</span><span class=o>.</span><span class=n>increase</span><span class=p>()</span> <span class=c1># love my counter</span><span class=n>states</span> <span class=o>=</span> <span class=p>[</span><span class=s1>'waiting'</span><span class=p>,</span> <span class=s1>'collecting'</span><span class=p>,</span> <span class=p>{</span><span class=s1>'name'</span><span class=p>:</span> <span class=s1>'counting'</span><span class=p>,</span> <span class=s1>'children'</span><span class=p>:</span> <span class=n>counter</span><span class=p>}]</span><span class=n>transitions</span> <span class=o>=</span> <span class=p>[</span>    <span class=p>[</span><span class=s1>'collect'</span><span class=p>,</span> <span class=s1>'*'</span><span class=p>,</span> <span class=s1>'collecting'</span><span class=p>],</span>    <span class=p>[</span><span class=s1>'wait'</span><span class=p>,</span> <span class=s1>'*'</span><span class=p>,</span> <span class=s1>'waiting'</span><span class=p>],</span>    <span class=p>[</span><span class=s1>'count'</span><span class=p>,</span> <span class=s1>'collecting'</span><span class=p>,</span> <span class=s1>'counting'</span><span class=p>]</span><span class=p>]</span><span class=n>collector</span> <span class=o>=</span> <span class=n>HierarchicalMachine</span><span class=p>(</span><span class=n>states</span><span class=o>=</span><span class=n>states</span><span class=p>,</span> <span class=n>transitions</span><span class=o>=</span><span class=n>transitions</span><span class=p>,</span> <span class=n>initial</span><span class=o>=</span><span class=s1>'waiting'</span><span class=p>)</span><span class=n>collector</span><span class=o>.</span><span class=n>collect</span><span class=p>()</span>  <span class=c1># collecting</span><span class=n>collector</span><span class=o>.</span><span class=n>count</span><span class=p>()</span>  <span class=c1># let's see what we got; counting_1</span><span class=n>collector</span><span class=o>.</span><span class=n>increase</span><span class=p>()</span>  <span class=c1># counting_2</span><span class=n>collector</span><span class=o>.</span><span class=n>increase</span><span class=p>()</span>  <span class=c1># counting_3</span><span class=n>collector</span><span class=o>.</span><span class=n>done</span><span class=p>()</span>  <span class=c1># collector.state == counting_done</span><span class=n>collector</span><span class=o>.</span><span class=n>wait</span><span class=p>()</span>  <span class=c1># collector.state == waiting</span></pre><p>If a <code>HierarchicalMachine</code> is passed with the <code>children</code> keyword, the initial state of this machine will be assigned to the new parent state.In the above example we see that entering <code>counting</code> will also enter <code>counting_1</code>.If this is undesired behaviour and the machine should rather halt in the parent state, the user can pass <code>initial</code> as <code>False</code> like <code>{'name': 'counting', 'children': counter, 'initial': False}</code>.</p><p>Sometimes you want such an embedded state collection to 'return' which means after it is done it should exit and transit to one of your super states.To achieve this behaviour you can remap state transitions.In the example above we would like the counter to return if the state <code>done</code> was reached.This is done as follows:</p><pre lang=python3><span class=n>states</span> <span class=o>=</span> <span class=p>[</span><span class=s1>'waiting'</span><span class=p>,</span> <span class=s1>'collecting'</span><span class=p>,</span> <span class=p>{</span><span class=s1>'name'</span><span class=p>:</span> <span class=s1>'counting'</span><span class=p>,</span> <span class=s1>'children'</span><span class=p>:</span> <span class=n>counter</span><span class=p>,</span> <span class=s1>'remap'</span><span class=p>:</span> <span class=p>{</span><span class=s1>'done'</span><span class=p>:</span> <span class=s1>'waiting'</span><span class=p>}}]</span><span class=o>...</span> <span class=c1># same as above</span><span class=n>collector</span><span class=o>.</span><span class=n>increase</span><span class=p>()</span> <span class=c1># counting_3</span><span class=n>collector</span><span class=o>.</span><span class=n>done</span><span class=p>()</span><span class=n>collector</span><span class=o>.</span><span class=n>state</span><span class=o>&gt;&gt;&gt;</span> <span class=s1>'waiting'</span> <span class=c1># be aware that 'counting_done' will be removed from the state machine</span></pre><p>As mentioned above, using <code>remap</code> will <strong>copy</strong> events and transitions since they could not be valid in the original state machine.If a reused state machine does not have a final state, you can of course add the transitions manually.If 'counter' had no 'done' state, we could just add <code>['done', 'counter_3', 'waiting']</code> to achieve the same behaviour.</p><p>In cases where you want states and transitions to be copied by value rather than reference (for instance, if you want to keep the pre-0.8 behaviour) you can do so by creating a <code>NestedState</code> and assigning deep copies of the machine's events and states to it.</p><pre lang=python3><span class=kn>from</span> <span class=nn>transitions.extensions.nesting</span> <span class=kn>import</span> <span class=n>NestedState</span><span class=kn>from</span> <span class=nn>copy</span> <span class=kn>import</span> <span class=n>deepcopy</span><span class=c1># ... configuring and creating counter</span><span class=n>counting_state</span> <span class=o>=</span> <span class=n>NestedState</span><span class=p>(</span><span class=n>name</span><span class=o>=</span><span class=s2>\"counting\"</span><span class=p>,</span> <span class=n>initial</span><span class=o>=</span><span class=s1>'1'</span><span class=p>)</span><span class=n>counting_state</span><span class=o>.</span><span class=n>states</span> <span class=o>=</span> <span class=n>deepcopy</span><span class=p>(</span><span class=n>counter</span><span class=o>.</span><span class=n>states</span><span class=p>)</span><span class=n>counting_state</span><span class=o>.</span><span class=n>events</span> <span class=o>=</span> <span class=n>deepcopy</span><span class=p>(</span><span class=n>counter</span><span class=o>.</span><span class=n>events</span><span class=p>)</span><span class=n>states</span> <span class=o>=</span> <span class=p>[</span><span class=s1>'waiting'</span><span class=p>,</span> <span class=s1>'collecting'</span><span class=p>,</span> <span class=n>counting_state</span><span class=p>]</span></pre><p>For complex state machines, sharing configurations rather than instantiated machines might be more feasible.Especially since instantiated machines must be derived from <code>HierarchicalMachine</code>.Such configurations can be stored and loaded easily via JSON or YAML (see the <a href=\"examples/Frequently%20asked%20questions.ipynb\" rel=nofollow>FAQ</a>).<code>HierarchicalMachine</code> allows defining substates either with the keyword <code>children</code> or <code>states</code>.If both are present, only <code>children</code> will be considered.</p><pre lang=python3><span class=n>counter_conf</span> <span class=o>=</span> <span class=p>{</span>    <span class=s1>'name'</span><span class=p>:</span> <span class=s1>'counting'</span><span class=p>,</span>    <span class=s1>'states'</span><span class=p>:</span> <span class=p>[</span><span class=s1>'1'</span><span class=p>,</span> <span class=s1>'2'</span><span class=p>,</span> <span class=s1>'3'</span><span class=p>,</span> <span class=s1>'done'</span><span class=p>],</span>    <span class=s1>'transitions'</span><span class=p>:</span> <span class=p>[</span>        <span class=p>[</span><span class=s1>'increase'</span><span class=p>,</span> <span class=s1>'1'</span><span class=p>,</span> <span class=s1>'2'</span><span class=p>],</span>        <span class=p>[</span><span class=s1>'increase'</span><span class=p>,</span> <span class=s1>'2'</span><span class=p>,</span> <span class=s1>'3'</span><span class=p>],</span>        <span class=p>[</span><span class=s1>'decrease'</span><span class=p>,</span> <span class=s1>'3'</span><span class=p>,</span> <span class=s1>'2'</span><span class=p>],</span>        <span class=p>[</span><span class=s1>'decrease'</span><span class=p>,</span> <span class=s1>'2'</span><span class=p>,</span> <span class=s1>'1'</span><span class=p>],</span>        <span class=p>[</span><span class=s1>'done'</span><span class=p>,</span> <span class=s1>'3'</span><span class=p>,</span> <span class=s1>'done'</span><span class=p>],</span>        <span class=p>[</span><span class=s1>'reset'</span><span class=p>,</span> <span class=s1>'*'</span><span class=p>,</span> <span class=s1>'1'</span><span class=p>]</span>    <span class=p>],</span>    <span class=s1>'initial'</span><span class=p>:</span> <span class=s1>'1'</span><span class=p>}</span><span class=n>collector_conf</span> <span class=o>=</span> <span class=p>{</span>    <span class=s1>'name'</span><span class=p>:</span> <span class=s1>'collector'</span><span class=p>,</span>    <span class=s1>'states'</span><span class=p>:</span> <span class=p>[</span><span class=s1>'waiting'</span><span class=p>,</span> <span class=s1>'collecting'</span><span class=p>,</span> <span class=n>counter_conf</span><span class=p>],</span>    <span class=s1>'transitions'</span><span class=p>:</span> <span class=p>[</span>        <span class=p>[</span><span class=s1>'collect'</span><span class=p>,</span> <span class=s1>'*'</span><span class=p>,</span> <span class=s1>'collecting'</span><span class=p>],</span>        <span class=p>[</span><span class=s1>'wait'</span><span class=p>,</span> <span class=s1>'*'</span><span class=p>,</span> <span class=s1>'waiting'</span><span class=p>],</span>        <span class=p>[</span><span class=s1>'count'</span><span class=p>,</span> <span class=s1>'collecting'</span><span class=p>,</span> <span class=s1>'counting'</span><span class=p>]</span>    <span class=p>],</span>    <span class=s1>'initial'</span><span class=p>:</span> <span class=s1>'waiting'</span><span class=p>}</span><span class=n>collector</span> <span class=o>=</span> <span class=n>HierarchicalMachine</span><span class=p>(</span><span class=o>**</span><span class=n>collector_conf</span><span class=p>)</span><span class=n>collector</span><span class=o>.</span><span class=n>collect</span><span class=p>()</span><span class=n>collector</span><span class=o>.</span><span class=n>count</span><span class=p>()</span><span class=n>collector</span><span class=o>.</span><span class=n>increase</span><span class=p>()</span><span class=k>assert</span> <span class=n>collector</span><span class=o>.</span><span class=n>is_counting_2</span><span class=p>()</span></pre><h4><a rel=nofollow></a> Threadsafe(-ish) State Machine</h4><p>In cases where event dispatching is done in threads, one can use either <code>LockedMachine</code> or <code>LockedHierarchicalMachine</code> where <strong>function access</strong> (!sic) is secured with reentrant locks.This does not save you from corrupting your machine by tinkering with member variables of your model or state machine.</p><pre lang=python3><span class=kn>from</span> <span class=nn>transitions.extensions</span> <span class=kn>import</span> <span class=n>LockedMachine</span><span class=kn>from</span> <span class=nn>threading</span> <span class=kn>import</span> <span class=n>Thread</span><span class=kn>import</span> <span class=nn>time</span><span class=n>states</span> <span class=o>=</span> <span class=p>[</span><span class=s1>'A'</span><span class=p>,</span> <span class=s1>'B'</span><span class=p>,</span> <span class=s1>'C'</span><span class=p>]</span><span class=n>machine</span> <span class=o>=</span> <span class=n>LockedMachine</span><span class=p>(</span><span class=n>states</span><span class=o>=</span><span class=n>states</span><span class=p>,</span> <span class=n>initial</span><span class=o>=</span><span class=s1>'A'</span><span class=p>)</span><span class=c1># let us assume that entering B will take some time</span><span class=n>thread</span> <span class=o>=</span> <span class=n>Thread</span><span class=p>(</span><span class=n>target</span><span class=o>=</span><span class=n>machine</span><span class=o>.</span><span class=n>to_B</span><span class=p>)</span><span class=n>thread</span><span class=o>.</span><span class=n>start</span><span class=p>()</span><span class=n>time</span><span class=o>.</span><span class=n>sleep</span><span class=p>(</span><span class=mf>0.01</span><span class=p>)</span> <span class=c1># thread requires some time to start</span><span class=n>machine</span><span class=o>.</span><span class=n>to_C</span><span class=p>()</span> <span class=c1># synchronized access; won't execute before thread is done</span><span class=c1># accessing attributes directly</span><span class=n>thread</span> <span class=o>=</span> <span class=n>Thread</span><span class=p>(</span><span class=n>target</span><span class=o>=</span><span class=n>machine</span><span class=o>.</span><span class=n>to_B</span><span class=p>)</span><span class=n>thread</span><span class=o>.</span><span class=n>start</span><span class=p>()</span><span class=n>machine</span><span class=o>.</span><span class=n>new_attrib</span> <span class=o>=</span> <span class=mi>42</span> <span class=c1># not synchronized! will mess with execution order</span></pre><p>Any python context manager can be passed in via the <code>machine_context</code> keyword argument:</p><pre lang=python3><span class=kn>from</span> <span class=nn>transitions.extensions</span> <span class=kn>import</span> <span class=n>LockedMachine</span><span class=kn>from</span> <span class=nn>threading</span> <span class=kn>import</span> <span class=n>RLock</span><span class=n>states</span> <span class=o>=</span> <span class=p>[</span><span class=s1>'A'</span><span class=p>,</span> <span class=s1>'B'</span><span class=p>,</span> <span class=s1>'C'</span><span class=p>]</span><span class=n>lock1</span> <span class=o>=</span> <span class=n>RLock</span><span class=p>()</span><span class=n>lock2</span> <span class=o>=</span> <span class=n>RLock</span><span class=p>()</span><span class=n>machine</span> <span class=o>=</span> <span class=n>LockedMachine</span><span class=p>(</span><span class=n>states</span><span class=o>=</span><span class=n>states</span><span class=p>,</span> <span class=n>initial</span><span class=o>=</span><span class=s1>'A'</span><span class=p>,</span> <span class=n>machine_context</span><span class=o>=</span><span class=p>[</span><span class=n>lock1</span><span class=p>,</span> <span class=n>lock2</span><span class=p>])</span></pre><p>Any contexts via <code>machine_model</code> will be shared between all models registered with the <code>Machine</code>.Per-model contexts can be added as well:</p><pre lang=python3><span class=n>lock3</span> <span class=o>=</span> <span class=n>RLock</span><span class=p>()</span><span class=n>machine</span><span class=o>.</span><span class=n>add_model</span><span class=p>(</span><span class=n>model</span><span class=p>,</span> <span class=n>model_context</span><span class=o>=</span><span class=n>lock3</span><span class=p>)</span></pre><p>It's important that all user-provided context managers are re-entrant since the state machine will call them multipletimes, even in the context of a single trigger invocation.</p><h4><a rel=nofollow></a> Using async callbacks</h4><p>If you are using Python 3.7 or later, you can use <code>AsyncMachine</code> to work with asynchronous callbacks.You can mix synchronous and asynchronous callbacks if you like but this may have undesired side effects.Note that events need to be awaited and the event loop must also be handled by you.</p><pre lang=python3><span class=kn>from</span> <span class=nn>transitions.extensions.asyncio</span> <span class=kn>import</span> <span class=n>AsyncMachine</span><span class=kn>import</span> <span class=nn>asyncio</span><span class=kn>import</span> <span class=nn>time</span><span class=k>class</span> <span class=nc>AsyncModel</span><span class=p>:</span>    <span class=k>def</span> <span class=nf>prepare_model</span><span class=p>(</span><span class=bp>self</span><span class=p>):</span>        <span class=nb>print</span><span class=p>(</span><span class=s2>\"I am synchronous.\"</span><span class=p>)</span>        <span class=bp>self</span><span class=o>.</span><span class=n>start_time</span> <span class=o>=</span> <span class=n>time</span><span class=o>.</span><span class=n>time</span><span class=p>()</span>    <span class=k>async</span> <span class=k>def</span> <span class=nf>before_change</span><span class=p>(</span><span class=bp>self</span><span class=p>):</span>        <span class=nb>print</span><span class=p>(</span><span class=s2>\"I am asynchronous and will block now for 100 milliseconds.\"</span><span class=p>)</span>        <span class=k>await</span> <span class=n>asyncio</span><span class=o>.</span><span class=n>sleep</span><span class=p>(</span><span class=mf>0.1</span><span class=p>)</span>        <span class=nb>print</span><span class=p>(</span><span class=s2>\"I am done waiting.\"</span><span class=p>)</span>    <span class=k>def</span> <span class=nf>sync_before_change</span><span class=p>(</span><span class=bp>self</span><span class=p>):</span>        <span class=nb>print</span><span class=p>(</span><span class=s2>\"I am synchronous and will block the event loop (what I probably shouldn't)\"</span><span class=p>)</span>        <span class=n>time</span><span class=o>.</span><span class=n>sleep</span><span class=p>(</span><span class=mf>0.1</span><span class=p>)</span>        <span class=nb>print</span><span class=p>(</span><span class=s2>\"I am done waiting synchronously.\"</span><span class=p>)</span>    <span class=k>def</span> <span class=nf>after_change</span><span class=p>(</span><span class=bp>self</span><span class=p>):</span>        <span class=nb>print</span><span class=p>(</span><span class=sa>f</span><span class=s2>\"I am synchronous again. Execution took </span><span class=si>{</span><span class=nb>int</span><span class=p>((</span><span class=n>time</span><span class=o>.</span><span class=n>time</span><span class=p>()</span><span class=w> </span><span class=o>-</span><span class=w> </span><span class=bp>self</span><span class=o>.</span><span class=n>start_time</span><span class=p>)</span><span class=w> </span><span class=o>*</span><span class=w> </span><span class=mi>1000</span><span class=p>)</span><span class=si>}</span><span class=s2> ms.\"</span><span class=p>)</span><span class=n>transition</span> <span class=o>=</span> <span class=nb>dict</span><span class=p>(</span><span class=n>trigger</span><span class=o>=</span><span class=s2>\"start\"</span><span class=p>,</span> <span class=n>source</span><span class=o>=</span><span class=s2>\"Start\"</span><span class=p>,</span> <span class=n>dest</span><span class=o>=</span><span class=s2>\"Done\"</span><span class=p>,</span> <span class=n>prepare</span><span class=o>=</span><span class=s2>\"prepare_model\"</span><span class=p>,</span>                  <span class=n>before</span><span class=o>=</span><span class=p>[</span><span class=s2>\"before_change\"</span><span class=p>]</span> <span class=o>*</span> <span class=mi>5</span> <span class=o>+</span> <span class=p>[</span><span class=s2>\"sync_before_change\"</span><span class=p>],</span>                  <span class=n>after</span><span class=o>=</span><span class=s2>\"after_change\"</span><span class=p>)</span>  <span class=c1># execute before function in asynchronously 5 times</span><span class=n>model</span> <span class=o>=</span> <span class=n>AsyncModel</span><span class=p>()</span><span class=n>machine</span> <span class=o>=</span> <span class=n>AsyncMachine</span><span class=p>(</span><span class=n>model</span><span class=p>,</span> <span class=n>states</span><span class=o>=</span><span class=p>[</span><span class=s2>\"Start\"</span><span class=p>,</span> <span class=s2>\"Done\"</span><span class=p>],</span> <span class=n>transitions</span><span class=o>=</span><span class=p>[</span><span class=n>transition</span><span class=p>],</span> <span class=n>initial</span><span class=o>=</span><span class=s1>'Start'</span><span class=p>)</span><span class=n>asyncio</span><span class=o>.</span><span class=n>get_event_loop</span><span class=p>()</span><span class=o>.</span><span class=n>run_until_complete</span><span class=p>(</span><span class=n>model</span><span class=o>.</span><span class=n>start</span><span class=p>())</span><span class=c1># &gt;&gt;&gt; I am synchronous.</span><span class=c1>#     I am asynchronous and will block now for 100 milliseconds.</span><span class=c1>#     I am asynchronous and will block now for 100 milliseconds.</span><span class=c1>#     I am asynchronous and will block now for 100 milliseconds.</span><span class=c1>#     I am asynchronous and will block now for 100 milliseconds.</span><span class=c1>#     I am asynchronous and will block now for 100 milliseconds.</span><span class=c1>#     I am synchronous and will block the event loop (what I probably shouldn't)</span><span class=c1>#     I am done waiting synchronously.</span><span class=c1>#     I am done waiting.</span><span class=c1>#     I am done waiting.</span><span class=c1>#     I am done waiting.</span><span class=c1>#     I am done waiting.</span><span class=c1>#     I am done waiting.</span><span class=c1>#     I am synchronous again. Execution took 101 ms.</span><span class=k>assert</span> <span class=n>model</span><span class=o>.</span><span class=n>is_Done</span><span class=p>()</span></pre><p>So, why do you need to use Python 3.7 or later you may ask.Async support has been introduced earlier.<code>AsyncMachine</code> makes use of <code>contextvars</code> to handle running callbacks when new events arrive before a transitionhas been finished:</p><pre lang=python3><span class=k>async</span> <span class=k>def</span> <span class=nf>await_never_return</span><span class=p>():</span>    <span class=k>await</span> <span class=n>asyncio</span><span class=o>.</span><span class=n>sleep</span><span class=p>(</span><span class=mi>100</span><span class=p>)</span>    <span class=k>raise</span> <span class=ne>ValueError</span><span class=p>(</span><span class=s2>\"That took too long!\"</span><span class=p>)</span><span class=k>async</span> <span class=k>def</span> <span class=nf>fix</span><span class=p>():</span>    <span class=k>await</span> <span class=n>m2</span><span class=o>.</span><span class=n>fix</span><span class=p>()</span><span class=n>m1</span> <span class=o>=</span> <span class=n>AsyncMachine</span><span class=p>(</span><span class=n>states</span><span class=o>=</span><span class=p>[</span><span class=s1>'A'</span><span class=p>,</span> <span class=s1>'B'</span><span class=p>,</span> <span class=s1>'C'</span><span class=p>],</span> <span class=n>initial</span><span class=o>=</span><span class=s1>'A'</span><span class=p>,</span> <span class=n>name</span><span class=o>=</span><span class=s2>\"m1\"</span><span class=p>)</span><span class=n>m2</span> <span class=o>=</span> <span class=n>AsyncMachine</span><span class=p>(</span><span class=n>states</span><span class=o>=</span><span class=p>[</span><span class=s1>'A'</span><span class=p>,</span> <span class=s1>'B'</span><span class=p>,</span> <span class=s1>'C'</span><span class=p>],</span> <span class=n>initial</span><span class=o>=</span><span class=s1>'A'</span><span class=p>,</span> <span class=n>name</span><span class=o>=</span><span class=s2>\"m2\"</span><span class=p>)</span><span class=n>m2</span><span class=o>.</span><span class=n>add_transition</span><span class=p>(</span><span class=n>trigger</span><span class=o>=</span><span class=s1>'go'</span><span class=p>,</span> <span class=n>source</span><span class=o>=</span><span class=s1>'A'</span><span class=p>,</span> <span class=n>dest</span><span class=o>=</span><span class=s1>'B'</span><span class=p>,</span> <span class=n>before</span><span class=o>=</span><span class=n>await_never_return</span><span class=p>)</span><span class=n>m2</span><span class=o>.</span><span class=n>add_transition</span><span class=p>(</span><span class=n>trigger</span><span class=o>=</span><span class=s1>'fix'</span><span class=p>,</span> <span class=n>source</span><span class=o>=</span><span class=s1>'A'</span><span class=p>,</span> <span class=n>dest</span><span class=o>=</span><span class=s1>'C'</span><span class=p>)</span><span class=n>m1</span><span class=o>.</span><span class=n>add_transition</span><span class=p>(</span><span class=n>trigger</span><span class=o>=</span><span class=s1>'go'</span><span class=p>,</span> <span class=n>source</span><span class=o>=</span><span class=s1>'A'</span><span class=p>,</span> <span class=n>dest</span><span class=o>=</span><span class=s1>'B'</span><span class=p>,</span> <span class=n>after</span><span class=o>=</span><span class=s1>'go'</span><span class=p>)</span><span class=n>m1</span><span class=o>.</span><span class=n>add_transition</span><span class=p>(</span><span class=n>trigger</span><span class=o>=</span><span class=s1>'go'</span><span class=p>,</span> <span class=n>source</span><span class=o>=</span><span class=s1>'B'</span><span class=p>,</span> <span class=n>dest</span><span class=o>=</span><span class=s1>'C'</span><span class=p>,</span> <span class=n>after</span><span class=o>=</span><span class=n>fix</span><span class=p>)</span><span class=n>asyncio</span><span class=o>.</span><span class=n>get_event_loop</span><span class=p>()</span><span class=o>.</span><span class=n>run_until_complete</span><span class=p>(</span><span class=n>asyncio</span><span class=o>.</span><span class=n>gather</span><span class=p>(</span><span class=n>m2</span><span class=o>.</span><span class=n>go</span><span class=p>(),</span> <span class=n>m1</span><span class=o>.</span><span class=n>go</span><span class=p>()))</span><span class=k>assert</span> <span class=n>m1</span><span class=o>.</span><span class=n>state</span> <span class=o>==</span> <span class=n>m2</span><span class=o>.</span><span class=n>state</span></pre><p>This example actually illustrates two things:First, that 'go' called in m1's transition from <code>A</code> to be <code>B</code> is not cancelled and second, calling <code>m2.fix()</code> willhalt the transition attempt of m2 from <code>A</code> to <code>B</code> by executing 'fix' from <code>A</code> to <code>C</code>.This separation would not be possible without <code>contextvars</code>.Note that <code>prepare</code> and <code>conditions</code> are NOT treated as ongoing transitions.This means that after <code>conditions</code> have been evaluated, a transition is executed even though another event already happened.Tasks will only be cancelled when run as a <code>before</code> callback or later.</p><p><code>AsyncMachine</code> features a model-special queue mode which can be used when <code>queued='model'</code> is passed to the constructor.With a model-specific queue, events will only be queued when they belong to the same model.Furthermore, a raised exception will only clear the event queue of the model that raised that exception.For the sake of simplicity, let's assume that every event in <code>asyncio.gather</code> below is not triggered at the same time but slightly delayed:</p><pre lang=python3><span class=n>asyncio</span><span class=o>.</span><span class=n>gather</span><span class=p>(</span><span class=n>model1</span><span class=o>.</span><span class=n>event1</span><span class=p>(),</span> <span class=n>model1</span><span class=o>.</span><span class=n>event2</span><span class=p>(),</span> <span class=n>model2</span><span class=o>.</span><span class=n>event1</span><span class=p>())</span><span class=c1># execution order with AsyncMachine(queued=True)</span><span class=c1># model1.event1 -&gt; model1.event2 -&gt; model2.event1</span><span class=c1># execution order with AsyncMachine(queued='model')</span><span class=c1># (model1.event1, model2.event1) -&gt; model1.event2</span><span class=n>asyncio</span><span class=o>.</span><span class=n>gather</span><span class=p>(</span><span class=n>model1</span><span class=o>.</span><span class=n>event1</span><span class=p>(),</span> <span class=n>model1</span><span class=o>.</span><span class=n>error</span><span class=p>(),</span> <span class=n>model1</span><span class=o>.</span><span class=n>event3</span><span class=p>(),</span> <span class=n>model2</span><span class=o>.</span><span class=n>event1</span><span class=p>(),</span> <span class=n>model2</span><span class=o>.</span><span class=n>event2</span><span class=p>(),</span> <span class=n>model2</span><span class=o>.</span><span class=n>event3</span><span class=p>())</span><span class=c1># execution order with AsyncMachine(queued=True)</span><span class=c1># model1.event1 -&gt; model1.error</span><span class=c1># execution order with AsyncMachine(queued='model')</span><span class=c1># (model1.event1, model2.event1) -&gt; (model1.error, model2.event2) -&gt; model2.event3</span></pre><p>Note that queue modes must not be changed after machine construction.</p><h4><a rel=nofollow></a>Adding features to states</h4><p>If your superheroes need some custom behaviour, you can throw in some extra functionality by decorating machine states:</p><pre lang=python3><span class=kn>from</span> <span class=nn>time</span> <span class=kn>import</span> <span class=n>sleep</span><span class=kn>from</span> <span class=nn>transitions</span> <span class=kn>import</span> <span class=n>Machine</span><span class=kn>from</span> <span class=nn>transitions.extensions.states</span> <span class=kn>import</span> <span class=n>add_state_features</span><span class=p>,</span> <span class=n>Tags</span><span class=p>,</span> <span class=n>Timeout</span><span class=nd>@add_state_features</span><span class=p>(</span><span class=n>Tags</span><span class=p>,</span> <span class=n>Timeout</span><span class=p>)</span><span class=k>class</span> <span class=nc>CustomStateMachine</span><span class=p>(</span><span class=n>Machine</span><span class=p>):</span>    <span class=k>pass</span><span class=k>class</span> <span class=nc>SocialSuperhero</span><span class=p>(</span><span class=nb>object</span><span class=p>):</span>    <span class=k>def</span> <span class=fm>__init__</span><span class=p>(</span><span class=bp>self</span><span class=p>):</span>        <span class=bp>self</span><span class=o>.</span><span class=n>entourage</span> <span class=o>=</span> <span class=mi>0</span>    <span class=k>def</span> <span class=nf>on_enter_waiting</span><span class=p>(</span><span class=bp>self</span><span class=p>):</span>        <span class=bp>self</span><span class=o>.</span><span class=n>entourage</span> <span class=o>+=</span> <span class=mi>1</span><span class=n>states</span> <span class=o>=</span> <span class=p>[{</span><span class=s1>'name'</span><span class=p>:</span> <span class=s1>'preparing'</span><span class=p>,</span> <span class=s1>'tags'</span><span class=p>:</span> <span class=p>[</span><span class=s1>'home'</span><span class=p>,</span> <span class=s1>'busy'</span><span class=p>]},</span>          <span class=p>{</span><span class=s1>'name'</span><span class=p>:</span> <span class=s1>'waiting'</span><span class=p>,</span> <span class=s1>'timeout'</span><span class=p>:</span> <span class=mi>1</span><span class=p>,</span> <span class=s1>'on_timeout'</span><span class=p>:</span> <span class=s1>'go'</span><span class=p>},</span>          <span class=p>{</span><span class=s1>'name'</span><span class=p>:</span> <span class=s1>'away'</span><span class=p>}]</span>  <span class=c1># The city needs us!</span><span class=n>transitions</span> <span class=o>=</span> <span class=p>[[</span><span class=s1>'done'</span><span class=p>,</span> <span class=s1>'preparing'</span><span class=p>,</span> <span class=s1>'waiting'</span><span class=p>],</span>               <span class=p>[</span><span class=s1>'join'</span><span class=p>,</span> <span class=s1>'waiting'</span><span class=p>,</span> <span class=s1>'waiting'</span><span class=p>],</span>  <span class=c1># Entering Waiting again will increase our entourage</span>               <span class=p>[</span><span class=s1>'go'</span><span class=p>,</span> <span class=s1>'waiting'</span><span class=p>,</span> <span class=s1>'away'</span><span class=p>]]</span>  <span class=c1># Okay, let' move</span><span class=n>hero</span> <span class=o>=</span> <span class=n>SocialSuperhero</span><span class=p>()</span><span class=n>machine</span> <span class=o>=</span> <span class=n>CustomStateMachine</span><span class=p>(</span><span class=n>model</span><span class=o>=</span><span class=n>hero</span><span class=p>,</span> <span class=n>states</span><span class=o>=</span><span class=n>states</span><span class=p>,</span> <span class=n>transitions</span><span class=o>=</span><span class=n>transitions</span><span class=p>,</span> <span class=n>initial</span><span class=o>=</span><span class=s1>'preparing'</span><span class=p>)</span><span class=k>assert</span> <span class=n>hero</span><span class=o>.</span><span class=n>state</span> <span class=o>==</span> <span class=s1>'preparing'</span>  <span class=c1># Preparing for the night shift</span><span class=k>assert</span> <span class=n>machine</span><span class=o>.</span><span class=n>get_state</span><span class=p>(</span><span class=n>hero</span><span class=o>.</span><span class=n>state</span><span class=p>)</span><span class=o>.</span><span class=n>is_busy</span>  <span class=c1># We are at home and busy</span><span class=n>hero</span><span class=o>.</span><span class=n>done</span><span class=p>()</span><span class=k>assert</span> <span class=n>hero</span><span class=o>.</span><span class=n>state</span> <span class=o>==</span> <span class=s1>'waiting'</span>  <span class=c1># Waiting for fellow superheroes to join us</span><span class=k>assert</span> <span class=n>hero</span><span class=o>.</span><span class=n>entourage</span> <span class=o>==</span> <span class=mi>1</span>  <span class=c1># It's just us so far</span><span class=n>sleep</span><span class=p>(</span><span class=mf>0.7</span><span class=p>)</span>  <span class=c1># Waiting...</span><span class=n>hero</span><span class=o>.</span><span class=n>join</span><span class=p>()</span>  <span class=c1># Weeh, we got company</span><span class=n>sleep</span><span class=p>(</span><span class=mf>0.5</span><span class=p>)</span>  <span class=c1># Waiting...</span><span class=n>hero</span><span class=o>.</span><span class=n>join</span><span class=p>()</span>  <span class=c1># Even more company \\o/</span><span class=n>sleep</span><span class=p>(</span><span class=mi>2</span><span class=p>)</span>  <span class=c1># Waiting...</span><span class=k>assert</span> <span class=n>hero</span><span class=o>.</span><span class=n>state</span> <span class=o>==</span> <span class=s1>'away'</span>  <span class=c1># Impatient superhero already left the building</span><span class=k>assert</span> <span class=n>machine</span><span class=o>.</span><span class=n>get_state</span><span class=p>(</span><span class=n>hero</span><span class=o>.</span><span class=n>state</span><span class=p>)</span><span class=o>.</span><span class=n>is_home</span> <span class=ow>is</span> <span class=kc>False</span>  <span class=c1># Yupp, not at home anymore</span><span class=k>assert</span> <span class=n>hero</span><span class=o>.</span><span class=n>entourage</span> <span class=o>==</span> <span class=mi>3</span>  <span class=c1># At least he is not alone</span></pre><p>Currently, transitions comes equipped with the following state features:</p><ul><li><p><strong>Timeout</strong> -- triggers an event after some time has passed</p><ul><li>keyword: <code>timeout</code> (int, optional) -- if passed, an entered state will timeout after <code>timeout</code> seconds</li><li>keyword: <code>on_timeout</code> (string/callable, optional) -- will be called when timeout time has been reached</li><li>will raise an <code>AttributeError</code> when <code>timeout</code> is set but <code>on_timeout</code> is not</li><li>Note: A timeout is triggered in a thread. This implies several limitations (e.g. catching Exceptions raised in timeouts). Consider an event queue for more sophisticated applications.</li></ul></li><li><p><strong>Tags</strong> -- adds tags to states</p><ul><li>keyword: <code>tags</code> (list, optional) -- assigns tags to a state</li><li><code>State.is_&lt;tag_name&gt;</code> will return <code>True</code> when the state has been tagged with <code>tag_name</code>, else <code>False</code></li></ul></li><li><p><strong>Error</strong> -- raises a <code>MachineError</code> when a state cannot be left</p><ul><li>inherits from <code>Tags</code> (if you use <code>Error</code> do not use <code>Tags</code>)</li><li>keyword: <code>accepted</code> (bool, optional) -- marks a state as accepted</li><li>alternatively the keyword <code>tags</code> can be passed, containing 'accepted'</li><li>Note: Errors will only be raised if <code>auto_transitions</code> has been set to <code>False</code>. Otherwise every state can be exited with <code>to_&lt;state&gt;</code> methods.</li></ul></li><li><p><strong>Volatile</strong> -- initialises an object every time a state is entered</p><ul><li>keyword: <code>volatile</code> (class, optional) -- every time the state is entered an object of type class will be assigned to the model. The attribute name is defined by <code>hook</code>. If omitted, an empty VolatileObject will be created instead</li><li>keyword: <code>hook</code> (string, default='scope') -- The model's attribute name for the temporal object.</li></ul></li></ul><p>You can write your own <code>State</code> extensions and add them the same way. Just note that <code>add_state_features</code> expects <em>Mixins</em>. This means your extension should always call the overridden methods <code>__init__</code>, <code>enter</code> and <code>exit</code>. Your extension may inherit from <em>State</em> but will also work without it.Using <code>@add_state_features</code> has a drawback which is that decorated machines cannot be pickled (more precisely, the dynamically generated <code>CustomState</code> cannot be pickled).This might be a reason to write a dedicated custom state class instead.Depending on the chosen state machine, your custom state class may need to provide certain state features. For instance, <code>HierarchicalMachine</code> requires your custom state to be an instance of <code>NestedState</code> (<code>State</code> is not sufficient). To inject your states you can either assign them to your <code>Machine</code>'s class attribute <code>state_cls</code> or override <code>Machine.create_state</code> in case you need some specific procedures done whenever a state is created:</p><pre lang=python3><span class=kn>from</span> <span class=nn>transitions</span> <span class=kn>import</span> <span class=n>Machine</span><span class=p>,</span> <span class=n>State</span><span class=k>class</span> <span class=nc>MyState</span><span class=p>(</span><span class=n>State</span><span class=p>):</span>    <span class=k>pass</span><span class=k>class</span> <span class=nc>CustomMachine</span><span class=p>(</span><span class=n>Machine</span><span class=p>):</span>    <span class=c1># Use MyState as state class</span>    <span class=n>state_cls</span> <span class=o>=</span> <span class=n>MyState</span><span class=k>class</span> <span class=nc>VerboseMachine</span><span class=p>(</span><span class=n>Machine</span><span class=p>):</span>    <span class=c1># `Machine._create_state` is a class method but we can</span>    <span class=c1># override it to be an instance method</span>    <span class=k>def</span> <span class=nf>_create_state</span><span class=p>(</span><span class=bp>self</span><span class=p>,</span> <span class=o>*</span><span class=n>args</span><span class=p>,</span> <span class=o>**</span><span class=n>kwargs</span><span class=p>):</span>        <span class=nb>print</span><span class=p>(</span><span class=s2>\"Creating a new state with machine '</span><span class=si>{0}</span><span class=s2>'\"</span><span class=o>.</span><span class=n>format</span><span class=p>(</span><span class=bp>self</span><span class=o>.</span><span class=n>name</span><span class=p>))</span>        <span class=k>return</span> <span class=n>MyState</span><span class=p>(</span><span class=o>*</span><span class=n>args</span><span class=p>,</span> <span class=o>**</span><span class=n>kwargs</span><span class=p>)</span></pre><p>If you want to avoid threads in your <code>AsyncMachine</code> entirely, you can replace the <code>Timeout</code> state feature with <code>AsyncTimeout</code> from the <code>asyncio</code> extension:</p><pre lang=python3><span class=kn>import</span> <span class=nn>asyncio</span><span class=kn>from</span> <span class=nn>transitions.extensions.states</span> <span class=kn>import</span> <span class=n>add_state_features</span><span class=kn>from</span> <span class=nn>transitions.extensions.asyncio</span> <span class=kn>import</span> <span class=n>AsyncTimeout</span><span class=p>,</span> <span class=n>AsyncMachine</span><span class=nd>@add_state_features</span><span class=p>(</span><span class=n>AsyncTimeout</span><span class=p>)</span><span class=k>class</span> <span class=nc>TimeoutMachine</span><span class=p>(</span><span class=n>AsyncMachine</span><span class=p>):</span>    <span class=k>pass</span><span class=n>states</span> <span class=o>=</span> <span class=p>[</span><span class=s1>'A'</span><span class=p>,</span> <span class=p>{</span><span class=s1>'name'</span><span class=p>:</span> <span class=s1>'B'</span><span class=p>,</span> <span class=s1>'timeout'</span><span class=p>:</span> <span class=mf>0.2</span><span class=p>,</span> <span class=s1>'on_timeout'</span><span class=p>:</span> <span class=s1>'to_C'</span><span class=p>},</span> <span class=s1>'C'</span><span class=p>]</span><span class=n>m</span> <span class=o>=</span> <span class=n>TimeoutMachine</span><span class=p>(</span><span class=n>states</span><span class=o>=</span><span class=n>states</span><span class=p>,</span> <span class=n>initial</span><span class=o>=</span><span class=s1>'A'</span><span class=p>,</span> <span class=n>queued</span><span class=o>=</span><span class=kc>True</span><span class=p>)</span>  <span class=c1># see remark below</span><span class=n>asyncio</span><span class=o>.</span><span class=n>run</span><span class=p>(</span><span class=n>asyncio</span><span class=o>.</span><span class=n>wait</span><span class=p>([</span><span class=n>m</span><span class=o>.</span><span class=n>to_B</span><span class=p>(),</span> <span class=n>asyncio</span><span class=o>.</span><span class=n>sleep</span><span class=p>(</span><span class=mf>0.1</span><span class=p>)]))</span><span class=k>assert</span> <span class=n>m</span><span class=o>.</span><span class=n>is_B</span><span class=p>()</span>  <span class=c1># timeout shouldn't be triggered</span><span class=n>asyncio</span><span class=o>.</span><span class=n>run</span><span class=p>(</span><span class=n>asyncio</span><span class=o>.</span><span class=n>wait</span><span class=p>([</span><span class=n>m</span><span class=o>.</span><span class=n>to_B</span><span class=p>(),</span> <span class=n>asyncio</span><span class=o>.</span><span class=n>sleep</span><span class=p>(</span><span class=mf>0.3</span><span class=p>)]))</span><span class=k>assert</span> <span class=n>m</span><span class=o>.</span><span class=n>is_C</span><span class=p>()</span>   <span class=c1># now timeout should have been processed</span></pre><p>You should consider passing <code>queued=True</code> to the <code>TimeoutMachine</code> constructor. This will make sure that events are processed sequentially and avoid asynchronous <a href=\"https://github.com/pytransitions/transitions/issues/459\" rel=nofollow>racing conditions</a> that may appear when timeout and event happen in close proximity.</p><h4><a rel=nofollow></a> Using transitions together with Django</h4><p>You can have a look at the <a href=\"examples/Frequently%20asked%20questions.ipynb\" rel=nofollow>FAQ</a> for some inspiration or checkout <code>django-transitions</code>.It has been developed by Christian Ledermann and is also hosted on <a href=\"https://github.com/PrimarySite/django-transitions\" rel=nofollow>Github</a>.<a href=\"https://django-transitions.readthedocs.io/en/latest/\" rel=nofollow>The documentation</a> contains some usage examples.</p><h3><a rel=nofollow></a>I have a [bug report/issue/question]...</h3><p>First, congratulations! You reached the end of the documentation!If you want to try out <code>transitions</code> before you install it, you can do that in an interactive Jupyter notebook at mybinder.org.Just click this button \ud83d\udc49 <a href=\"https://mybinder.org/v2/gh/pytransitions/transitions/master?filepath=examples%2FPlayground.ipynb\" rel=nofollow><img src=\"https://pypi-camo.freetls.fastly.net/85e91bbb928104e4ce317951541520c6b9c170e1/68747470733a2f2f6d7962696e6465722e6f72672f62616467655f6c6f676f2e737667\" alt=Binder></a>.</p><p>For bug reports and other issues, please <a href=\"https://github.com/pytransitions/transitions\" rel=nofollow>open an issue</a> on GitHub.</p><p>For usage questions, post on Stack Overflow, making sure to tag your question with the <a href=\"https://stackoverflow.com/questions/tagged/pytransitions\" rel=nofollow><code>pytransitions</code> tag</a>. Do not forget to have a look at the <a href=\"./examples\" rel=nofollow>extended examples</a>!</p><p>For any other questions, solicitations, or large unrestricted monetary gifts, email <a href=mailto:tyarkoni@gmail.com rel=nofollow>Tal Yarkoni</a> (initial author) and/or <a href=mailto:aleneum@gmail.com rel=nofollow>Alexander Neumann</a> (current maintainer).</p>          </div>        </div>        <div id=\"data\" data-project-tabs-target=\"content\" class=\"vertical-tabs__content\" role=\"tabpanel\" aria-labelledby=\"mobile-data-tab\" tabindex=\"-1\">          <h2 class=\"page-title\">Project details</h2><div class=\"sidebar-section\">  <h3 class=\"sidebar-section__title\">Project links</h3>  <ul class=\"vertical-tabs__list\">    <li>      <a class=\"vertical-tabs__tab vertical-tabs__tab--with-icon vertical-tabs__tab--condensed\" href=\"http://github.com/pytransitions/transitions\" rel=\"nofollow\">        <i class=\"fas fa-home\" aria-hidden=\"true\"></i>Homepage      </a>    </li>    <li>      <a class=\"vertical-tabs__tab vertical-tabs__tab--with-icon vertical-tabs__tab--condensed\" href=\"https://github.com/pytransitions/transitions/archive/0.9.0.tar.gz\" rel=\"nofollow\">        <i class=\"fas fa-cloud-download-alt\" aria-hidden=\"true\"></i>Download      </a>    </li>  </ul></div><div class=\"sidebar-section\">  <h3 class=\"sidebar-section__title\">Statistics</h3>  <div class=\"hidden github-repo-info\" data-controller=\"github-repo-info\">GitHub statistics:    <ul class=\"vertical-tabs__list\">      <li>        <a class=\"vertical-tabs__tab vertical-tabs__tab--with-icon vertical-tabs__tab--condensed\"           data-github-repo-info-target=\"stargazersUrl\" rel=\"noopener\">          <i class=\"fa fa-star\" aria-hidden=\"true\"></i>          <strong>Stars:</strong>          <span data-github-repo-info-target=\"stargazersCount\"></span>        </a>      </li>      <li>        <a class=\"vertical-tabs__tab vertical-tabs__tab--with-icon vertical-tabs__tab--condensed\"           data-github-repo-info-target=\"forksUrl\" rel=\"noopener\">          <i class=\"fa fa-code-branch\" aria-hidden=\"true\"></i>          <strong>Forks:</strong>          <span data-github-repo-info-target=\"forksCount\"></span>        </a>      </li>      <li>        <a class=\"vertical-tabs__tab vertical-tabs__tab--with-icon vertical-tabs__tab--condensed\"           data-github-repo-info-target=\"openIssuesUrl\" rel=\"noopener\">          <i class=\"fa fa-exclamation-circle\" aria-hidden=\"true\"></i>          <strong>Open issues:</strong>          <span data-github-repo-info-target=\"openIssuesCount\"></span>        </a>      </li>      <li>        <a class=\"vertical-tabs__tab vertical-tabs__tab--with-icon vertical-tabs__tab--condensed\"           data-github-repo-info-target=\"openPRsUrl\" rel=\"noopener\">          <i class=\"fa fa-code-pull-request\" aria-hidden=\"true\"></i>          <strong>Open PRs:</strong>          <span data-github-repo-info-target=\"openPRsCount\"></span>        </a>      </li>    </ul>  </div>  <p>View statistics for this project via <a href=\"https://libraries.io/pypi/transitions\" title=\"External link\" target=\"_blank\" rel=\"noopener\">Libraries.io</a>, or by using <a href=\"https://packaging.python.org/guides/analyzing-pypi-package-downloads/\" target=\"_blank\" rel=\"noopener\">our public dataset on Google BigQuery</a>  </p></div><div class=\"sidebar-section\">  <h3 class=\"sidebar-section__title\">Meta</h3>  <p><strong>License:</strong> MIT License (MIT)</p>    <p><strong>Author:</strong> <a href=\"mailto:tyarkoni@gmail.com\">Tal Yarkoni</a></p>    <p><strong>Maintainer:</strong> <a href=\"mailto:aleneum@gmail.com\">Alexander Neumann</a></p></div><div class=\"sidebar-section\">    <h3 class=\"sidebar-section__title\">Maintainers</h3>      <span class=\"sidebar-section__maintainer\">        <a href=\"/user/aleneum/\" aria-label=\"aleneum\">          <span class=\"sidebar-section__user-gravatar\">            <img src=\"https://pypi-camo.freetls.fastly.net/40ff251e481c7955d29ee67e38991810aeef9880/68747470733a2f2f7365637572652e67726176617461722e636f6d2f6176617461722f39326365343338326663396165336663623163663830343939636137313430643f73697a653d3530\" height=\"50\" width=\"50\" alt=\"Avatar for aleneum from gravatar.com\" title=\"Avatar for aleneum from gravatar.com\">          </span>          <span class=\"sidebar-section__user-gravatar-text\">            aleneum          </span>        </a>      </span>      <span class=\"sidebar-section__maintainer\">        <a href=\"/user/tyarkoni/\" aria-label=\"tyarkoni\">          <span class=\"sidebar-section__user-gravatar\">            <img src=\"https://pypi-camo.freetls.fastly.net/cb53601d7ad572916bbf46f58a23dffb9217d31e/68747470733a2f2f7365637572652e67726176617461722e636f6d2f6176617461722f36363635363234383937333033663831316665336234666462323663393931383f73697a653d3530\" height=\"50\" width=\"50\" alt=\"Avatar for tyarkoni from gravatar.com\" title=\"Avatar for tyarkoni from gravatar.com\">          </span>          <span class=\"sidebar-section__user-gravatar-text\">            tyarkoni          </span>        </a>      </span></div><div class=\"sidebar-section\">  <h3 class=\"sidebar-section__title\">Classifiers</h3>  <ul class=\"sidebar-section__classifiers\">    <li>      <strong>License</strong>      <ul>        <li>          <a href=\"/search/?c=License+%3A%3A+OSI+Approved+%3A%3A+MIT+License\">            OSI Approved :: MIT License          </a>        </li>      </ul>    </li>    <li>      <strong>Programming Language</strong>      <ul>        <li>          <a href=\"/search/?c=Programming+Language+%3A%3A+Python+%3A%3A+2\">            Python :: 2          </a>        </li>        <li>          <a href=\"/search/?c=Programming+Language+%3A%3A+Python+%3A%3A+2.7\">            Python :: 2.7          </a>        </li>        <li>          <a href=\"/search/?c=Programming+Language+%3A%3A+Python+%3A%3A+3\">            Python :: 3          </a>        </li>        <li>          <a href=\"/search/?c=Programming+Language+%3A%3A+Python+%3A%3A+3.3\">            Python :: 3.3          </a>        </li>        <li>          <a href=\"/search/?c=Programming+Language+%3A%3A+Python+%3A%3A+3.4\">            Python :: 3.4          </a>        </li>        <li>          <a href=\"/search/?c=Programming+Language+%3A%3A+Python+%3A%3A+3.5\">            Python :: 3.5          </a>        </li>        <li>          <a href=\"/search/?c=Programming+Language+%3A%3A+Python+%3A%3A+3.6\">            Python :: 3.6          </a>        </li>        <li>          <a href=\"/search/?c=Programming+Language+%3A%3A+Python+%3A%3A+3.7\">            Python :: 3.7          </a>        </li>        <li>          <a href=\"/search/?c=Programming+Language+%3A%3A+Python+%3A%3A+3.8\">            Python :: 3.8          </a>        </li>      </ul>    </li>  </ul></div>          <br>        </div>        <div id=\"history\" data-project-tabs-target=\"content\" class=\"vertical-tabs__content\" role=\"tabpanel\" aria-labelledby=\"history-tab mobile-history-tab\" tabindex=\"-1\">          <h2 class=\"page-title split-layout\">            <span>Release history</span>            <span class=\"reset-text margin-top\">              <a href=\"/help/#project-release-notifications\">Release notifications</a> |              <a href=\"/rss/project/transitions/releases.xml\">RSS feed <i class=\"fa fa-rss\" aria-hidden=\"true\"></i></a>            </span>          </h2>          <div class=\"release-timeline\">            <div class=\"release release--latest release--current\">              <div class=\"release__meta\">                <span class=\"badge\">This version</span>              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/blue-cube.572a5bfb.svg\">              </div>              <a class=\"card release__card\" href=\"/project/transitions/0.9.0/\">                <p class=\"release__version\">                  0.9.0                </p>                <p class=\"release__version-date\">                  <time datetime=\"2022-09-02T09:48:52+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Sep 2, 2022</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/transitions/0.8.11/\">                <p class=\"release__version\">                  0.8.11                </p>                <p class=\"release__version-date\">                  <time datetime=\"2022-02-24T09:28:15+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Feb 24, 2022</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/transitions/0.8.10/\">                <p class=\"release__version\">                  0.8.10                </p>                <p class=\"release__version-date\">                  <time datetime=\"2021-10-04T15:32:32+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Oct 4, 2021</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/transitions/0.8.9/\">                <p class=\"release__version\">                  0.8.9                </p>                <p class=\"release__version-date\">                  <time datetime=\"2021-09-02T10:46:28+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Sep 2, 2021</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/transitions/0.8.8/\">                <p class=\"release__version\">                  0.8.8                </p>                <p class=\"release__version-date\">                  <time datetime=\"2021-04-07T09:38:46+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Apr 7, 2021</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/transitions/0.8.7/\">                <p class=\"release__version\">                  0.8.7                </p>                <p class=\"release__version-date\">                  <time datetime=\"2021-02-13T11:46:27+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Feb 13, 2021</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/transitions/0.8.6/\">                <p class=\"release__version\">                  0.8.6                </p>                <p class=\"release__version-date\">                  <time datetime=\"2020-12-28T20:07:00+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Dec 28, 2020</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/transitions/0.8.5/\">                <p class=\"release__version\">                  0.8.5                </p>                <p class=\"release__version-date\">                  <time datetime=\"2020-11-06T08:17:09+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Nov 6, 2020</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/transitions/0.8.4/\">                <p class=\"release__version\">                  0.8.4                </p>                <p class=\"release__version-date\">                  <time datetime=\"2020-10-12T07:23:45+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Oct 12, 2020</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/transitions/0.8.3/\">                <p class=\"release__version\">                  0.8.3                </p>                <p class=\"release__version-date\">                  <time datetime=\"2020-09-25T11:28:32+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Sep 25, 2020</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/transitions/0.8.2/\">                <p class=\"release__version\">                  0.8.2                </p>                <p class=\"release__version-date\">                  <time datetime=\"2020-06-27T16:37:48+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Jun 27, 2020</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/transitions/0.8.1/\">                <p class=\"release__version\">                  0.8.1                </p>                <p class=\"release__version-date\">                  <time datetime=\"2020-04-02T21:35:43+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Apr 2, 2020</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/transitions/0.8.0/\">                <p class=\"release__version\">                  0.8.0                </p>                <p class=\"release__version-date\">                  <time datetime=\"2020-03-20T11:39:22+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Mar 20, 2020</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/transitions/0.7.2/\">                <p class=\"release__version\">                  0.7.2                </p>                <p class=\"release__version-date\">                  <time datetime=\"2020-01-10T08:41:59+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Jan 10, 2020</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/transitions/0.7.1/\">                <p class=\"release__version\">                  0.7.1                </p>                <p class=\"release__version-date\">                  <time datetime=\"2019-09-13T07:49:49+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Sep 13, 2019</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/transitions/0.7.0/\">                <p class=\"release__version\">                  0.7.0                </p>                <p class=\"release__version-date\">                  <time datetime=\"2019-08-19T19:31:36+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Aug 19, 2019</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/transitions/0.6.9/\">                <p class=\"release__version\">                  0.6.9                </p>                <p class=\"release__version-date\">                  <time datetime=\"2018-10-26T17:11:37+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Oct 26, 2018</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/transitions/0.6.8/\">                <p class=\"release__version\">                  0.6.8                </p>                <p class=\"release__version-date\">                  <time datetime=\"2018-05-25T14:39:07+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  May 25, 2018</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/transitions/0.6.7/\">                <p class=\"release__version\">                  0.6.7                </p>                <p class=\"release__version-date\">                  <time datetime=\"2018-05-18T12:33:28+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  May 18, 2018</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/transitions/0.6.6/\">                <p class=\"release__version\">                  0.6.6                </p>                <p class=\"release__version-date\">                  <time datetime=\"2018-05-18T11:48:04+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  May 18, 2018</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/transitions/0.6.5/\">                <p class=\"release__version\">                  0.6.5                </p>                <p class=\"release__version-date\">                  <time datetime=\"2018-04-16T16:35:19+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Apr 16, 2018</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/transitions/0.6.4/\">                <p class=\"release__version\">                  0.6.4                </p>                <p class=\"release__version-date\">                  <time datetime=\"2018-01-03T11:36:08+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Jan 3, 2018</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/transitions/0.6.3/\">                <p class=\"release__version\">                  0.6.3                </p>                <p class=\"release__version-date\">                  <time datetime=\"2017-11-30T08:27:56+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Nov 30, 2017</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/transitions/0.6.2/\">                <p class=\"release__version\">                  0.6.2                </p>                <p class=\"release__version-date\">                  <time datetime=\"2017-11-03T08:32:25+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Nov 3, 2017</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/transitions/0.6.1/\">                <p class=\"release__version\">                  0.6.1                </p>                <p class=\"release__version-date\">                  <time datetime=\"2017-09-04T10:16:27+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Sep 4, 2017</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/transitions/0.6.0/\">                <p class=\"release__version\">                  0.6.0                </p>                <p class=\"release__version-date\">                  <time datetime=\"2017-08-20T22:07:40+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Aug 20, 2017</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/transitions/0.5.3/\">                <p class=\"release__version\">                  0.5.3                </p>                <p class=\"release__version-date\">                  <time datetime=\"2017-05-29T07:29:21+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  May 29, 2017</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/transitions/0.5.2/\">                <p class=\"release__version\">                  0.5.2                </p>                <p class=\"release__version-date\">                  <time datetime=\"2017-04-24T16:14:58+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Apr 24, 2017</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/transitions/0.5.1/\">                <p class=\"release__version\">                  0.5.1                </p>                <p class=\"release__version-date\">                  <time datetime=\"2017-04-24T15:27:48+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Apr 24, 2017</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/transitions/0.5.0/\">                <p class=\"release__version\">                  0.5.0                </p>                <p class=\"release__version-date\">                  <time datetime=\"2017-03-14T14:02:38+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Mar 14, 2017</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/transitions/0.4.3/\">                <p class=\"release__version\">                  0.4.3                </p>                <p class=\"release__version-date\">                  <time datetime=\"2016-12-10T08:47:45+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Dec 10, 2016</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/transitions/0.4.2/\">                <p class=\"release__version\">                  0.4.2                </p>                <p class=\"release__version-date\">                  <time datetime=\"2016-10-07T13:22:39+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Oct 7, 2016</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/transitions/0.4.1/\">                <p class=\"release__version\">                  0.4.1                </p>                <p class=\"release__version-date\">                  <time datetime=\"2016-07-26T12:39:12+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Jul 26, 2016</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/transitions/0.4.0/\">                <p class=\"release__version\">                  0.4.0                </p>                <p class=\"release__version-date\">                  <time datetime=\"2016-04-25T17:12:36+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Apr 25, 2016</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/transitions/0.3.1/\">                <p class=\"release__version\">                  0.3.1                </p>                <p class=\"release__version-date\">                  <time datetime=\"2016-01-03T21:35:37+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Jan 3, 2016</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/transitions/0.3.0/\">                <p class=\"release__version\">                  0.3.0                </p>                <p class=\"release__version-date\">                  <time datetime=\"2016-01-02T21:45:52+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Jan 2, 2016</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/transitions/0.2.9/\">                <p class=\"release__version\">                  0.2.9                </p>                <p class=\"release__version-date\">                  <time datetime=\"2015-11-10T17:08:12+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Nov 10, 2015</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/transitions/0.2.8/\">                <p class=\"release__version\">                  0.2.8                </p>                <p class=\"release__version-date\">                  <time datetime=\"2015-08-06T10:49:01+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Aug 6, 2015</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/transitions/0.2.7/\">                <p class=\"release__version\">                  0.2.7                </p>                <p class=\"release__version-date\">                  <time datetime=\"2015-07-27T12:41:00+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Jul 27, 2015</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/transitions/0.2.6/\">                <p class=\"release__version\">                  0.2.6                </p>                <p class=\"release__version-date\">                  <time datetime=\"2015-07-26T11:34:53+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Jul 26, 2015</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/transitions/0.2.5/\">                <p class=\"release__version\">                  0.2.5                </p>                <p class=\"release__version-date\">                  <time datetime=\"2015-05-04T16:06:04+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  May 4, 2015</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/transitions/0.2.4/\">                <p class=\"release__version\">                  0.2.4                </p>                <p class=\"release__version-date\">                  <time datetime=\"2015-03-11T05:45:05+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Mar 11, 2015</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/transitions/0.2.3/\">                <p class=\"release__version\">                  0.2.3                </p>                <p class=\"release__version-date\">                  <time datetime=\"2015-01-15T03:27:41+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Jan 15, 2015</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/transitions/0.2.2/\">                <p class=\"release__version\">                  0.2.2                </p>                <p class=\"release__version-date\">                  <time datetime=\"2014-12-28T18:15:13+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Dec 28, 2014</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/transitions/0.2.1/\">                <p class=\"release__version\">                  0.2.1                </p>                <p class=\"release__version-date\">                  <time datetime=\"2014-11-11T06:04:45+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Nov 11, 2014</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/transitions/0.2/\">                <p class=\"release__version\">                  0.2                </p>                <p class=\"release__version-date\">                  <time datetime=\"2014-10-27T04:12:45+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Oct 27, 2014</time>                </p>              </a>            </div>            <div class=\"release release--oldest\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/transitions/0.1/\">                <p class=\"release__version\">                  0.1                </p>                <p class=\"release__version-date\">                  <time datetime=\"2014-10-15T03:40:04+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Oct 15, 2014</time>                </p>              </a>            </div>          </div>        </div>          <div id=\"files\" data-project-tabs-target=\"content\" class=\"vertical-tabs__content\" role=\"tabpanel\" aria-labelledby=\"files-tab mobile-files-tab\" tabindex=\"-1\">            <h2 class=\"page-title\">Download files</h2>            <p>Download the file for your platform. If you're not sure which to choose, learn more about <a href=\"https://packaging.python.org/tutorials/installing-packages/\" title=\"External link\" target=\"_blank\" rel=\"noopener\">installing packages</a>.</p>            <h3>Source Distribution            </h3>                  <div class=\"file\">      <div class=\"file__graphic\">        <i class=\"far fa-file\" aria-hidden=\"true\"></i>      </div>      <div class=\"card file__card\">        <a href=\"https://files.pythonhosted.org/packages/bc/c0/d2e5b8a03ad07c10694ab0804682722b9293fbe89391a8508aff1f6d9603/transitions-0.9.0.tar.gz\">          transitions-0.9.0.tar.gz        </a>        (1.2 MB        <a href=\"#copy-hash-modal-a3d8a67d-4fed-4ad7-b040-96152d699558\">view hashes</a>)        <p class=\"file__meta\">          Uploaded <time datetime=\"2022-09-02T09:48:56+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Sep 2, 2022</time>          <code>source</code>        </p>      </div>    </div>            <h3>Built Distribution            </h3>                <div class=\"file\">      <div class=\"file__graphic\">        <i class=\"far fa-file\" aria-hidden=\"true\"></i>      </div>      <div class=\"card file__card\">        <a href=\"https://files.pythonhosted.org/packages/ee/35/77e8f975da682e14e1581ae0f47f4e3beed29871794f26ce7c9d4dd32b14/transitions-0.9.0-py2.py3-none-any.whl\">          transitions-0.9.0-py2.py3-none-any.whl        </a>        (97.7 kB        <a href=\"#copy-hash-modal-6c330fce-637b-4b15-a5f5-bd2dbeb578b8\">view hashes</a>)        <p class=\"file__meta\">          Uploaded <time datetime=\"2022-09-02T09:48:52+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Sep 2, 2022</time>          <code>py2</code>          <code>py3</code>        </p>      </div>    </div>          </div><div id=\"copy-hash-modal-a3d8a67d-4fed-4ad7-b040-96152d699558\" class=\"modal modal--wide\">  <div class=\"modal__content\" role=\"dialog\">    <a href=\"#modal-close\" title=\"Close\" class=\"modal__close\">      <i class=\"fa fa-times\" aria-hidden=\"true\"></i>      <span class=\"sr-only\">Close</span>    </a>    <div class=\"modal__body\">      <h3 class=\"modal__title\"><a href=\"https://pip.pypa.io/en/stable/topics/secure-installs/#hash-checking-mode\" title=\"External link\" target=\"_blank\" rel=\"noopener\">Hashes</a> for transitions-0.9.0.tar.gz      </h3>      <table class=\"table table--hashes\">        <caption class=\"sr-only\">Hashes for transitions-0.9.0.tar.gz</caption>        <thead>          <tr>            <th scope=\"col\">Algorithm</th>            <th scope=\"col\">Hash digest</th>            <th></th>          </tr>        </thead>        <tbody>          <tr data-controller=\"clipboard\">            <th scope=\"row\">SHA256</th>            <td><code data-clipboard-target=\"source\">2f54d11bdb225779d7e729011e93a9fb717668ce3dc65f8d4f5a5d7ba2f48e10</code></td>            <td class=\"table__align-right\">              <button type=\"button\" class=\"button button--small copy-tooltip copy-tooltip-w\" data-action=\"clipboard#copy\" data-clipboard-target=\"tooltip\" data-clipboard-tooltip-value=\"Copy to clipboard\">Copy              </button>            </td>          </tr>          <tr data-controller=\"clipboard\">            <th scope=\"row\">MD5</th>            <td><code data-clipboard-target=\"source\">54d54d8de9222ef4be7961136d1b7e74</code></td>            <td class=\"table__align-right\">              <button type=\"button\" class=\"button button--small copy-tooltip copy-tooltip-w\" data-action=\"clipboard#copy\" data-clipboard-target=\"tooltip\" data-clipboard-tooltip-value=\"Copy to clipboard\">Copy              </button>            </td>          </tr>          <tr data-controller=\"clipboard\">            <th scope=\"row\">BLAKE2b-256</th>            <td><code data-clipboard-target=\"source\">bcc0d2e5b8a03ad07c10694ab0804682722b9293fbe89391a8508aff1f6d9603</code></td>            <td class=\"table__align-right\">              <button type=\"button\" class=\"button button--small copy-tooltip copy-tooltip-w\" data-action=\"clipboard#copy\" data-clipboard-target=\"tooltip\" data-clipboard-tooltip-value=\"Copy to clipboard\">Copy              </button>            </td>          </tr>        </tbody>      </table>    </div>    <div class=\"modal__footer\">      <a href=\"#modal-close\" class=\"button button--primary modal__action\">Close</a>    </div>  </div></div><div id=\"copy-hash-modal-6c330fce-637b-4b15-a5f5-bd2dbeb578b8\" class=\"modal modal--wide\">  <div class=\"modal__content\" role=\"dialog\">    <a href=\"#modal-close\" title=\"Close\" class=\"modal__close\">      <i class=\"fa fa-times\" aria-hidden=\"true\"></i>      <span class=\"sr-only\">Close</span>    </a>    <div class=\"modal__body\">      <h3 class=\"modal__title\"><a href=\"https://pip.pypa.io/en/stable/topics/secure-installs/#hash-checking-mode\" title=\"External link\" target=\"_blank\" rel=\"noopener\">Hashes</a> for transitions-0.9.0-py2.py3-none-any.whl      </h3>      <table class=\"table table--hashes\">        <caption class=\"sr-only\">Hashes for transitions-0.9.0-py2.py3-none-any.whl</caption>        <thead>          <tr>            <th scope=\"col\">Algorithm</th>            <th scope=\"col\">Hash digest</th>            <th></th>          </tr>        </thead>        <tbody>          <tr data-controller=\"clipboard\">            <th scope=\"row\">SHA256</th>            <td><code data-clipboard-target=\"source\">5687ee8c6a3200830e44f988d16b0045f53293f7a873002d7bff70852331a078</code></td>            <td class=\"table__align-right\">              <button type=\"button\" class=\"button button--small copy-tooltip copy-tooltip-w\" data-action=\"clipboard#copy\" data-clipboard-target=\"tooltip\" data-clipboard-tooltip-value=\"Copy to clipboard\">Copy              </button>            </td>          </tr>          <tr data-controller=\"clipboard\">            <th scope=\"row\">MD5</th>            <td><code data-clipboard-target=\"source\">1eaf0976c549ca1373e4a2c1e822b9fc</code></td>            <td class=\"table__align-right\">              <button type=\"button\" class=\"button button--small copy-tooltip copy-tooltip-w\" data-action=\"clipboard#copy\" data-clipboard-target=\"tooltip\" data-clipboard-tooltip-value=\"Copy to clipboard\">Copy              </button>            </td>          </tr>          <tr data-controller=\"clipboard\">            <th scope=\"row\">BLAKE2b-256</th>            <td><code data-clipboard-target=\"source\">ee3577e8f975da682e14e1581ae0f47f4e3beed29871794f26ce7c9d4dd32b14</code></td>            <td class=\"table__align-right\">              <button type=\"button\" class=\"button button--small copy-tooltip copy-tooltip-w\" data-action=\"clipboard#copy\" data-clipboard-target=\"tooltip\" data-clipboard-tooltip-value=\"Copy to clipboard\">Copy              </button>            </td>          </tr>        </tbody>      </table>    </div>    <div class=\"modal__footer\">      <a href=\"#modal-close\" class=\"button button--primary modal__action\">Close</a>    </div>  </div></div>      </div>    </div>  </div></div>    </main>    <footer class=\"footer\">      <div class=\"footer__logo\">        <img src=\"/static/images/white-cube.2351a86c.svg\" alt=\"\" class=\"-js-white-cube\">      </div>      <div class=\"footer__menus\">        <div class=\"footer__menu\">          <h2>Help</h2>          <nav aria-label=\"Help navigation\">            <ul>              <li><a href=\"https://packaging.python.org/tutorials/installing-packages/\" title=\"External link\" target=\"_blank\" rel=\"noopener\">Installing packages</a></li>              <li><a href=\"https://packaging.python.org/tutorials/packaging-projects/\" title=\"External link\" target=\"_blank\" rel=\"noopener\">Uploading packages</a></li>              <li><a href=\"https://packaging.python.org/\" title=\"External link\" target=\"_blank\" rel=\"noopener\">User guide</a></li>              <li><a href=\"https://www.python.org/dev/peps/pep-0541/\" title=\"External link\" target=\"_blank\" rel=\"noopener\">Project name retention</a></li>              <li><a href=\"/help/\">FAQs</a></li>            </ul>          </nav>        </div>        <div class=\"footer__menu\">          <h2>About PyPI</h2>          <nav aria-label=\"About PyPI navigation\">            <ul>              <li><a href=\"https://twitter.com/PyPI\" title=\"External link\" target=\"_blank\" rel=\"noopener\">PyPI on Twitter</a></li>              <li><a href=\"https://dtdg.co/pypi\" title=\"External link\" target=\"_blank\" rel=\"noopener\">Infrastructure dashboard</a></li>              <li><a href=\"/stats/\">Statistics</a></li>              <li><a href=\"/trademarks/\">Logos & trademarks</a></li>              <li><a href=\"/sponsors/\">Our sponsors</a></li>            </ul>          </nav>        </div>        <div class=\"footer__menu\">          <h2>Contributing to PyPI</h2>          <nav aria-label=\"How to contribute navigation\">            <ul>              <li><a href=\"/help/#feedback\">Bugs and feedback</a></li>              <li><a href=\"https://github.com/pypi/warehouse\" title=\"External link\" target=\"_blank\" rel=\"noopener\">Contribute on GitHub</a></li>              <li><a href=\"https://hosted.weblate.org/projects/pypa/warehouse/\" title=\"External link\" target=\"_blank\" rel=\"noopener\">Translate PyPI</a></li>              <li><a href=\"/sponsors/\">Sponsor PyPI</a></li>              <li><a href=\"https://github.com/pypi/warehouse/graphs/contributors\" title=\"External link\" target=\"_blank\" rel=\"noopener\">Development credits</a></li>            </ul>          </nav>        </div>        <div class=\"footer__menu\">          <h2>Using PyPI</h2>          <nav aria-label=\"Using PyPI navigation\">            <ul>              <li><a href=\"https://github.com/pypa/.github/blob/main/CODE_OF_CONDUCT.md\" title=\"External link\" target=\"_blank\" rel=\"noopener\">Code of conduct</a></li>              <li><a href=\"/security/\">Report security issue</a></li>              <li><a href=\"https://www.python.org/privacy/\" title=\"External link\" target=\"_blank\" rel=\"noopener\">Privacy policy</a></li>              <li><a href=\"/policy/terms-of-use/\">Terms of use</a></li>              <li><a href=\"/policy/acceptable-use-policy/\">Acceptable Use Policy</a></li>            </ul>          </nav>        </div>      </div>      <hr class=\"footer__divider\">      <div class=\"footer__text\">        <p>Status:<a href=\"https://status.python.org/\" title=\"External link\" target=\"_blank\" rel=\"noopener\">          <span data-statuspage-domain=\"https://2p66nmmycsj3.statuspage.io\">all systems operational</span></a>        </p>        <p>Developed and maintained by the Python community, for the Python community.          <br>          <a href=\"https://donate.pypi.org\">Donate today!</a>        </p>        <p>          \"PyPI\", \"Python Package Index\", and the blocks logos are registered <a href=\"/trademarks/\">trademarks</a> of the <a href=\"https://python.org/psf-landing\" target=\"_blank\" rel=\"noopener\">Python Software Foundation</a>.<br>        </p>        <p>          \u00a9 2024 <a href=\"https://www.python.org/psf-landing/\" title=\"External link\" target=\"_blank\" rel=\"noopener\">Python Software Foundation</a><br>          <a href=\"/sitemap/\">Site map</a>        </p>      </div>      <div class=\"centered hide-on-desktop\">        <button type=\"button\" class=\"button button--switch-to-desktop hidden\" data-viewport-toggle-target=\"switchToDesktop\" data-action=\"viewport-toggle#switchToDesktop\">Switch to desktop version        </button>      </div>    </footer>    <div class=\"language-switcher\">      <form action=\"/locale/\">        <ul>          <li>            <button              class=\"language-switcher__selected\"              name=\"locale_id\" value=\"en\" type=\"submit\"            >              English            </button>          </li>          <li>            <button              name=\"locale_id\" value=\"es\" type=\"submit\"            >              espa\u00f1ol            </button>          </li>          <li>            <button              name=\"locale_id\" value=\"fr\" type=\"submit\"            >              fran\u00e7ais            </button>          </li>          <li>            <button              name=\"locale_id\" value=\"ja\" type=\"submit\"            >              \u65e5\u672c\u8a9e            </button>          </li>          <li>            <button              name=\"locale_id\" value=\"pt_BR\" type=\"submit\"            >              portugu\u00eas (Brasil)            </button>          </li>          <li>            <button              name=\"locale_id\" value=\"uk\" type=\"submit\"            >              \u0443\u043a\u0440\u0430\u0457\u043d\u0441\u044c\u043a\u0430            </button>          </li>          <li>            <button              name=\"locale_id\" value=\"el\" type=\"submit\"            >              \u0395\u03bb\u03bb\u03b7\u03bd\u03b9\u03ba\u03ac            </button>          </li>          <li>            <button              name=\"locale_id\" value=\"de\" type=\"submit\"            >              Deutsch            </button>          </li>          <li>            <button              name=\"locale_id\" value=\"zh_Hans\" type=\"submit\"            >              \u4e2d\u6587 (\u7b80\u4f53)            </button>          </li>          <li>            <button              name=\"locale_id\" value=\"zh_Hant\" type=\"submit\"            >              \u4e2d\u6587 (\u7e41\u9ad4)            </button>          </li>          <li>            <button              name=\"locale_id\" value=\"ru\" type=\"submit\"            >              \u0440\u0443\u0441\u0441\u043a\u0438\u0439            </button>          </li>          <li>            <button              name=\"locale_id\" value=\"he\" type=\"submit\"            >              \u05e2\u05d1\u05e8\u05d9\u05ea            </button>          </li>          <li>            <button              name=\"locale_id\" value=\"eo\" type=\"submit\"            >              esperanto            </button>          </li>        </ul>      </form>    </div><div class=\"sponsors\">  <p class=\"sponsors__title\">Supported by</p>  <div class=\"sponsors__divider\"></div>        <a class=\"sponsors__sponsor\" target=\"_blank\" rel=\"noopener\" href=\"https://aws.amazon.com/\">          <img class=sponsors__image src=\"https://pypi-camo.freetls.fastly.net/ed7074cadad1a06f56bc520ad9bd3e00d0704c5b/68747470733a2f2f73746f726167652e676f6f676c65617069732e636f6d2f707970692d6173736574732f73706f6e736f726c6f676f732f6177732d77686974652d6c6f676f2d7443615473387a432e706e67\" alt=AWS loading=lazy>          <span class=\"sponsors__name\">AWS</span>          <span class=\"sponsors__service\">            Cloud computing and Security Sponsor          </span>        </a>        <a class=\"sponsors__sponsor\" target=\"_blank\" rel=\"noopener\" href=\"https://www.datadoghq.com/\">          <img class=sponsors__image src=\"https://pypi-camo.freetls.fastly.net/8855f7c063a3bdb5b0ce8d91bfc50cf851cc5c51/68747470733a2f2f73746f726167652e676f6f676c65617069732e636f6d2f707970692d6173736574732f73706f6e736f726c6f676f732f64617461646f672d77686974652d6c6f676f2d6668644c4e666c6f2e706e67\" alt=Datadog loading=lazy>          <span class=\"sponsors__name\">Datadog</span>          <span class=\"sponsors__service\">            Monitoring          </span>        </a>        <a class=\"sponsors__sponsor\" target=\"_blank\" rel=\"noopener\" href=\"https://www.fastly.com/\">          <img class=sponsors__image src=\"https://pypi-camo.freetls.fastly.net/df6fe8829cbff2d7f668d98571df1fd011f36192/68747470733a2f2f73746f726167652e676f6f676c65617069732e636f6d2f707970692d6173736574732f73706f6e736f726c6f676f732f666173746c792d77686974652d6c6f676f2d65684d3077735f6f2e706e67\" alt=Fastly loading=lazy>          <span class=\"sponsors__name\">Fastly</span>          <span class=\"sponsors__service\">            CDN          </span>        </a>        <a class=\"sponsors__sponsor\" target=\"_blank\" rel=\"noopener\" href=\"https://careers.google.com/\">          <img class=sponsors__image src=\"https://pypi-camo.freetls.fastly.net/420cc8cf360bac879e24c923b2f50ba7d1314fb0/68747470733a2f2f73746f726167652e676f6f676c65617069732e636f6d2f707970692d6173736574732f73706f6e736f726c6f676f732f676f6f676c652d77686974652d6c6f676f2d616734424e3774332e706e67\" alt=Google loading=lazy>          <span class=\"sponsors__name\">Google</span>          <span class=\"sponsors__service\">            Download Analytics          </span>        </a>        <a class=\"sponsors__sponsor\" target=\"_blank\" rel=\"noopener\" href=\"https://www.python.org/psf/sponsors/#microsoft\">          <img class=sponsors__image src=\"https://pypi-camo.freetls.fastly.net/524d1ce72f7772294ca4c1fe05d21dec8fa3f8ea/68747470733a2f2f73746f726167652e676f6f676c65617069732e636f6d2f707970692d6173736574732f73706f6e736f726c6f676f732f6d6963726f736f66742d77686974652d6c6f676f2d5a443172685444462e706e67\" alt=Microsoft loading=lazy>          <span class=\"sponsors__name\">Microsoft</span>          <span class=\"sponsors__service\">            PSF Sponsor          </span>        </a>        <a class=\"sponsors__sponsor\" target=\"_blank\" rel=\"noopener\" href=\"https://www.pingdom.com/\">          <img class=sponsors__image src=\"https://pypi-camo.freetls.fastly.net/d01053c02f3a626b73ffcb06b96367fdbbf9e230/68747470733a2f2f73746f726167652e676f6f676c65617069732e636f6d2f707970692d6173736574732f73706f6e736f726c6f676f732f70696e67646f6d2d77686974652d6c6f676f2d67355831547546362e706e67\" alt=Pingdom loading=lazy>          <span class=\"sponsors__name\">Pingdom</span>          <span class=\"sponsors__service\">            Monitoring          </span>        </a>        <a class=\"sponsors__sponsor\" target=\"_blank\" rel=\"noopener\" href=\"https://getsentry.com/for/python\">          <img class=sponsors__image src=\"https://pypi-camo.freetls.fastly.net/67af7117035e2345bacb5a82e9aa8b5b3e70701d/68747470733a2f2f73746f726167652e676f6f676c65617069732e636f6d2f707970692d6173736574732f73706f6e736f726c6f676f732f73656e7472792d77686974652d6c6f676f2d4a2d6b64742d706e2e706e67\" alt=Sentry loading=lazy>          <span class=\"sponsors__name\">Sentry</span>          <span class=\"sponsors__service\">            Error logging          </span>        </a>        <a class=\"sponsors__sponsor\" target=\"_blank\" rel=\"noopener\" href=\"https://statuspage.io\">          <img class=sponsors__image src=\"https://pypi-camo.freetls.fastly.net/b611884ff90435a0575dbab7d9b0d3e60f136466/68747470733a2f2f73746f726167652e676f6f676c65617069732e636f6d2f707970692d6173736574732f73706f6e736f726c6f676f732f737461747573706167652d77686974652d6c6f676f2d5467476c6a4a2d502e706e67\" alt=StatusPage loading=lazy>          <span class=\"sponsors__name\">StatusPage</span>          <span class=\"sponsors__service\">            Status page          </span>        </a></div>  </body></html>",
  "embeddings": []
}
{
  "libtype": "pypi",
  "libname": "elephas",
  "url": "https://danielenricocahall.github.io/elephas/",
  "html": "<!DOCTYPE html><html class=\"writer-html5\" lang=\"en\" ><head>    <meta charset=\"utf-8\" />    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" /><meta name=\"description\" content=\"Documentation for Elephas, Distributed Deep Learning with Keras & Spark\" /><link rel=\"canonical\" href=\"http://danielenricocahall.github.io/elephas/\" />      <link rel=\"shortcut icon\" href=\"img/favicon.ico\" />    <title>Elephas Documentation</title>    <link rel=\"stylesheet\" href=\"css/theme.css\" />    <link rel=\"stylesheet\" href=\"css/theme_extra.css\" />        <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/styles/github.min.css\" />          <script>        // Current page data        var mkdocs_page_name = \"Home\";        var mkdocs_page_input_path = \"index.md\";        var mkdocs_page_url = \"/elephas/\";      </script>        <!--[if lt IE 9]>      <script src=\"js/html5shiv.min.js\"></script>    <![endif]-->      <script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/highlight.min.js\"></script>      <script>hljs.highlightAll();</script> </head><body class=\"wy-body-for-nav\" role=\"document\">  <div class=\"wy-grid-for-nav\">    <nav data-toggle=\"wy-nav-shift\" class=\"wy-nav-side stickynav\">    <div class=\"wy-side-scroll\">      <div class=\"wy-side-nav-search\">          <a href=\".\" class=\"icon icon-home\"> Elephas Documentation        </a><div role=\"search\">  <form id =\"rtd-search-form\" class=\"wy-form\" action=\"./search.html\" method=\"get\">      <input type=\"text\" name=\"q\" placeholder=\"Search docs\" aria-label=\"Search docs\" title=\"Type search term here\" />  </form></div>      </div>      <div class=\"wy-menu wy-menu-vertical\" data-spy=\"affix\" role=\"navigation\" aria-label=\"Navigation menu\">              <ul class=\"current\">                <li class=\"toctree-l1 current\"><a class=\"reference internal current\" href=\".\">Home</a>    <ul class=\"current\">    <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"#_1\"></a>    </li>    <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"#introduction\">Introduction</a>    </li>    <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"#getting-started\">Getting started</a>    </li>    <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"#basic-spark-integration\">Basic Spark integration</a>    </li>    <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"#distributed-inference-and-evaluation\">Distributed Inference and Evaluation</a>    </li>    <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"#spark-mllib-integration\">Spark MLlib integration</a>    </li>    <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"#spark-ml-integration\">Spark ML integration</a>    </li>    <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"#hadoop-integration\">Hadoop Integration</a>    </li>    <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"#distributed-hyper-parameter-optimization\">Distributed hyper-parameter optimization</a>    </li>    <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"#distributed-training-of-ensemble-models\">Distributed training of ensemble models</a>    </li>    <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"#discussion\">Discussion</a>    </li>    <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"#literature\">Literature</a>    </li>    <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"#maintainers-contributions\">Maintainers / Contributions</a>    </li>    <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"#star-history\">Star History</a>    </li>    </ul>                </li>              </ul>              <ul>                <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"why-use-elephas/\">Why use Elephas</a>                </li>              </ul>              <p class=\"caption\"><span class=\"caption-text\">Getting started</span></p>              <ul>                  <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"getting-started/getting-started/\">Getting started with Elephas</a>                  </li>                  <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"getting-started/faq/\">FAQ</a>                  </li>              </ul>              <p class=\"caption\"><span class=\"caption-text\">Models</span></p>              <ul>                  <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"models/about-elephas-models/\">About Elephas models</a>                  </li>                  <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"models/spark-model/\">SparkModel</a>                  </li>                  <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"models/spark-mllib-model/\">SparkMLlibModel</a>                  </li>                  <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"models/spark-ml-model/\">ElephasEstimator</a>                  </li>              </ul>              <p class=\"caption\"><span class=\"caption-text\">Parameter server</span></p>              <ul>                  <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"parameter/server/\">Servers</a>                  </li>                  <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"parameter/client/\">Clients</a>                  </li>              </ul>              <p class=\"caption\"><span class=\"caption-text\">Utilities</span></p>              <ul>                  <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"utils/rdd_utils/\">RDD utils</a>                  </li>                  <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"utils/functional_utils/\">Functional utils</a>                  </li>                  <li class=\"toctree-l1\"><a class=\"\" href=\"utils/serialization.md\">Serialization utils</a>                  </li>              </ul>              <p class=\"caption\"><span class=\"caption-text\">Spark ML and MLlib adapters</span></p>              <ul>                  <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"adapters/spark-ml/\">Spark ML</a>                  </li>                  <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"adapters/spark-mllib/\">Spark MLlib</a>                  </li>              </ul>      </div>    </div>    </nav>    <section data-toggle=\"wy-nav-shift\" class=\"wy-nav-content-wrap\">      <nav class=\"wy-nav-top\" role=\"navigation\" aria-label=\"Mobile navigation menu\">          <i data-toggle=\"wy-nav-top\" class=\"fa fa-bars\"></i>          <a href=\".\">Elephas Documentation</a>              </nav>      <div class=\"wy-nav-content\">        <div class=\"rst-content\"><div role=\"navigation\" aria-label=\"breadcrumbs navigation\">  <ul class=\"wy-breadcrumbs\">    <li><a href=\".\" class=\"icon icon-home\" aria-label=\"Docs\"></a></li>      <li class=\"breadcrumb-item active\">Home</li>    <li class=\"wy-breadcrumbs-aside\">          <a href=\"http://github.com/danielenricocahall/elephas/edit/master/docs/index.md\" class=\"icon icon-github\"> Edit on GitHub</a>    </li>  </ul>  <hr/></div>          <div role=\"main\" class=\"document\" itemscope=\"itemscope\" itemtype=\"http://schema.org/Article\">            <div class=\"section\" itemprop=\"articleBody\">                              <h1 id=\"elephas-distributed-deep-learning-with-keras-spark\">Elephas: Distributed Deep Learning with Keras &amp; Spark</h1><h2 id=\"_1\"></h2><p><a href=\"https://github.com/danielenricocahall/elephas/actions/workflows/ci.yaml/badge.svg\"><img alt=\"Build Status\" src=\"https://github.com/danielenricocahall/elephas/actions/workflows/ci.yaml/badge.svg\" /></a><a href=\"https://github.com/danielenricocahall/elephas/blob/master/LICENSE\"><img alt=\"license\" src=\"https://img.shields.io/github/license/mashape/apistatus.svg?maxAge=2592000\" /></a><a href=\"https://img.shields.io/badge/python-3.8%20%7C%203.9%20%7C%203.10-blue\"><img alt=\"Supported Versions\" src=\"https://img.shields.io/badge/python-3.8%20%7C%203.9%20%7C%203.10-blue\" /></a></p><p>Elephas is an extension of <a href=\"http://keras.io\">Keras</a>, which allows you to run distributed deep learning models at scale with <a href=\"http://spark.apache.org\">Spark</a>. Elephas currently supports a number of applications, including:</p><ul><li><a href=\"#basic-spark-integration\">Data-parallel training of deep learning models</a></li><li><a href=\"#distributed-inference-and-evaluation\">Distributed inference and evaluation of deep learning models</a></li><li><a href=\"#distributed-training-of-ensemble-models\"><strike>Distributed training of ensemble models</strike></a>  (removed as of 3.0.0)</li><li><a href=\"#distributed-hyper-parameter-optimization\"><strike>Distributed hyper-parameter optimization</strike></a>  (removed as of 3.0.0)</li></ul><p>Schematically, elephas works as follows.</p><p><img alt=\"Elephas\" src=\"https://raw.githubusercontent.com/danielenricocahall/elephas/master/elephas.gif\" /></p><p>Table of content:* <a href=\"#elephas-distributed-deep-learning-with-keras-&amp;-spark-\">Elephas: Distributed Deep Learning with Keras &amp; Spark</a>  * <a href=\"#introduction\">Introduction</a>  * <a href=\"#getting-started\">Getting started</a>  * <a href=\"#basic-spark-integration\">Basic Spark integration</a>  * <a href=\"#distributed-inference-and-evaluation\">Distributed Inference and Evaluation</a>  * <a href=\"#spark-mllib-integration\">Spark MLlib integration</a>  * <a href=\"#spark-ml-integration\">Spark ML integration</a>  * <a href=\"#hadoop-integration\">Hadoop integration</a>  * <a href=\"#distributed-hyper-parameter-optimization\">Distributed hyper-parameter optimization</a>  * <a href=\"#distributed-training-of-ensemble-models\">Distributed training of ensemble models</a>  * <a href=\"#discussion\">Discussion</a>  * <a href=\"#literature\">Literature</a></p><h2 id=\"introduction\">Introduction</h2><p>Elephas brings deep learning with <a href=\"http://keras.io\">Keras</a> to <a href=\"http://spark.apache.org\">Spark</a>. Elephas intends to keep the simplicity and high usability of Keras, thereby allowing for fast prototyping of distributed models, which can be run on massive data sets. For an introductory example, see the following <a href=\"https://github.com/danielenricocahall/elephas/blob/master/examples/Spark_ML_Pipeline.ipynb\">iPython notebook</a>.</p><p>\u1f10\u03bb\u03ad\u03c6\u03b1\u03c2 is Greek for <em>ivory</em> and an accompanying project to \u03ba\u03ad\u03c1\u03b1\u03c2, meaning <em>horn</em>. If this seems weird mentioning, like a bad dream, you should confirm it actually is at the <a href=\"https://github.com/fchollet/keras/blob/master/README.md\">Keras documentation</a>. Elephas also means <em>elephant</em>, as in stuffed yellow elephant.</p><p>Elephas implements a class of data-parallel algorithms on top of Keras, using Spark's RDDs and data frames. Keras Models are initialized on the driver, then serialized and shipped to workers, alongside with data and broadcasted model parameters. Spark workers deserialize the model, train their chunk of data and send their gradients back to the driver. The \"master\" model on the driver is updated by an optimizer, which takes gradients either synchronously orasynchronously.</p><h2 id=\"getting-started\">Getting started</h2><p>Just install elephas from PyPI with, Spark will be installed through <code>pyspark</code> for you.</p><pre><code>pip install elephas</code></pre><p>That's it, you should now be able to run Elephas examples.</p><h2 id=\"basic-spark-integration\">Basic Spark integration</h2><p>After installing both Elephas, you can train a model as follows. First, create a local pyspark context</p><pre><code class=\"language-python\">from pyspark import SparkContext, SparkConfconf = SparkConf().setAppName('Elephas_App').setMaster('local[8]')sc = SparkContext(conf=conf)</code></pre><p>Next, you define and compile a Keras model</p><pre><code class=\"language-python\">from tensorflow.keras.models import Sequentialfrom tensorflow.keras.layers import Dense, Dropout, Activationfrom tensorflow.keras.optimizers import SGDmodel = Sequential()model.add(Dense(128, input_dim=784))model.add(Activation('relu'))model.add(Dropout(0.2))model.add(Dense(128))model.add(Activation('relu'))model.add(Dropout(0.2))model.add(Dense(10))model.add(Activation('softmax'))model.compile(loss='categorical_crossentropy', optimizer=SGD())</code></pre><p>and create an RDD from numpy arrays (or however you want to create an RDD)</p><pre><code class=\"language-python\">from elephas.utils.rdd_utils import to_simple_rddrdd = to_simple_rdd(sc, x_train, y_train)</code></pre><p>The basic model in Elephas is the <code>SparkModel</code>. You initialize a <code>SparkModel</code> by passing in a compiled Keras model, an update frequency and a parallelization mode. After that you can simply <code>fit</code> the model on your RDD. Elephas <code>fit</code>has the same options as a Keras model, so you can pass <code>epochs</code>, <code>batch_size</code> etc. as you're used to from tensorflow.keras.</p><pre><code class=\"language-python\">from elephas.spark_model import SparkModelspark_model = SparkModel(model, frequency='epoch', mode='asynchronous')spark_model.fit(rdd, epochs=20, batch_size=32, verbose=0, validation_split=0.1)</code></pre><p>Your script can now be run using spark-submit</p><pre><code class=\"language-bash\">spark-submit --driver-memory 1G ./your_script.py</code></pre><p>Increasing the driver memory even further may be necessary, as the set of parameters in a network may be very large and collecting them on the driver eats up a lot of resources. See the examples folder for a few working examples.</p><h2 id=\"distributed-inference-and-evaluation\">Distributed Inference and Evaluation</h2><p>The <code>SparkModel</code> can also be used for distributed inference (prediction) and evaluation. Similar to the <code>fit</code> method,  the <code>predict</code> and <code>evaluate</code> methodsconform to the Keras Model API. </p><pre><code class=\"language-python\">from elephas.spark_model import SparkModel# create/train the model, similar to the previous section (Basic Spark Integration)model = ...spark_model = SparkModel(model, ...)spark_model.fit(...)x_test, y_test = ... # load test datapredictions = spark_model.predict(x_test) # perform inferenceevaluation = spark_model.evaluate(x_test, y_test) # perform evaluation/scoring</code></pre><p>The paradigm is identical to the data parallelism in training, as the model is serialized and shipped to the workers and used to evaluate a chunk of the testing data. The predict method will take either a numpy array or an RDD.</p><h2 id=\"spark-mllib-integration\">Spark MLlib integration</h2><p>Following up on the last example, to use Spark's MLlib library with Elephas, you create an RDD of LabeledPoints for supervised training as follows</p><pre><code class=\"language-python\">from elephas.utils.rdd_utils import to_labeled_pointlp_rdd = to_labeled_point(sc, x_train, y_train, categorical=True)</code></pre><p>Training a given LabeledPoint-RDD is very similar to what we've seen already</p><pre><code class=\"language-python\">from elephas.spark_model import SparkMLlibModelspark_model = SparkMLlibModel(model, frequency='batch', mode='hogwild')spark_model.train(lp_rdd, epochs=20, batch_size=32, verbose=0, validation_split=0.1,                   categorical=True, nb_classes=nb_classes)</code></pre><h2 id=\"spark-ml-integration\">Spark ML integration</h2><p>To train a model with a SparkML estimator on a data frame, use the following syntax.</p><pre><code class=\"language-python\">df = to_data_frame(sc, x_train, y_train, categorical=True)test_df = to_data_frame(sc, x_test, y_test, categorical=True)estimator = ElephasEstimator(model, epochs=epochs, batch_size=batch_size, frequency='batch', mode='asynchronous',                             categorical=True, nb_classes=nb_classes)fitted_model = estimator.fit(df)</code></pre><p>Fitting an estimator results in a SparkML transformer, which we can use for predictions and other evaluations by calling the transform method on it.</p><pre><code class=\"language-python\">prediction = fitted_model.transform(test_df)pnl = prediction.select(&quot;label&quot;, &quot;prediction&quot;)pnl.show(100)import numpy as npprediction_and_label = pnl.rdd.map(lambda row: (row.label, float(np.argmax(row.prediction))))metrics = MulticlassMetrics(prediction_and_label)print(metrics.weightedPrecision)print(metrics.weightedRecall)</code></pre><p>If the model utilizes custom activation function, layer, or loss function, that will need to be supplied using the <code>set_custom_objects</code> method:</p><pre><code class=\"language-python\">def custom_activation(x):    ...class CustomLayer(Layer):    ...model = Sequential()model.add(CustomLayer(...))estimator = ElephasEstimator(model, epochs=epochs, batch_size=batch_size)estimator.set_custom_objects({'custom_activation': custom_activation, 'CustomLayer': CustomLayer})</code></pre><h2 id=\"hadoop-integration\">Hadoop Integration</h2><p>In addition to saving locally, models may be saved directly into a network-accessible Hadoop cluster.</p><pre><code class=\"language-python\">spark_model.save('/absolute/file/path/model.h5', to_hadoop=True)</code></pre><p>Models saved on a network-accessible Hadoop cluster may be loaded as follows.</p><pre><code class=\"language-python\">from elephas.spark_model import load_spark_modelspark_model = load_spark_model('/absolute/file/path/model.h5', from_hadoop=True)</code></pre><h2 id=\"distributed-hyper-parameter-optimization\">Distributed hyper-parameter optimization</h2><p><span style=\"color:red\"><strong>UPDATE</strong>: As of 3.0.0, Hyper-parameter optimization features have been removed, since Hyperas is no longer active and was causing versioning compatibility issues. To use these features, install version 2.1 or below.</span></p><p>Hyper-parameter optimization with elephas is based on <a href=\"https://github.com/maxpumperla/hyperas\">hyperas</a>, a convenience wrapper for hyperopt and keras. Each Spark worker executes a number of trials, the results get collected and the best model is returned. As the distributed mode in hyperopt (using MongoDB), is somewhat difficult to configure and error prone at the time of writing, we chose to implement parallelization ourselves. Right now, the only available optimization algorithm is random search.</p><p>The first part of this example is more or less directly taken from the hyperas documentation. We define data and model as functions, hyper-parameter ranges are defined through braces. See the hyperas documentation for more on how this works.</p><pre><code class=\"language-python\">from hyperopt import STATUS_OKfrom hyperas.distributions import choice, uniformdef data():    from tensorflow.keras.datasets import mnist    from tensorflow.keras.utils import to_categorical    (x_train, y_train), (x_test, y_test) = mnist.load_data()    x_train = x_train.reshape(60000, 784)    x_test = x_test.reshape(10000, 784)    x_train = x_train.astype('float32')    x_test = x_test.astype('float32')    x_train /= 255    x_test /= 255    nb_classes = 10    y_train = to_categorical(y_train, nb_classes)    y_test = to_categorical(y_test, nb_classes)    return x_train, y_train, x_test, y_testdef model(x_train, y_train, x_test, y_test):    from tensorflow.keras.models import Sequential    from tensorflow.keras.layers import Dense, Dropout, Activation    from tensorflow.keras.optimizers import RMSprop    model = Sequential()    model.add(Dense(512, input_shape=(784,)))    model.add(Activation('relu'))    model.add(Dropout({{uniform(0, 1)}}))    model.add(Dense({{choice([256, 512, 1024])}}))    model.add(Activation('relu'))    model.add(Dropout({{uniform(0, 1)}}))    model.add(Dense(10))    model.add(Activation('softmax'))    rms = RMSprop()    model.compile(loss='categorical_crossentropy', optimizer=rms)    model.fit(x_train, y_train,              batch_size={{choice([64, 128])}},              nb_epoch=1,              show_accuracy=True,              verbose=2,              validation_data=(x_test, y_test))    score, acc = model.evaluate(x_test, y_test, show_accuracy=True, verbose=0)    print('Test accuracy:', acc)    return {'loss': -acc, 'status': STATUS_OK, 'model': model.to_json()}</code></pre><p>Once the basic setup is defined, running the minimization is done in just a few lines of code:</p><pre><code class=\"language-python\">from elephas.hyperparam import HyperParamModelfrom pyspark import SparkContext, SparkConf# Create Spark contextconf = SparkConf().setAppName('Elephas_Hyperparameter_Optimization').setMaster('local[8]')sc = SparkContext(conf=conf)# Define hyper-parameter model and run optimizationhyperparam_model = HyperParamModel(sc)hyperparam_model.minimize(model=model, data=data, max_evals=5)</code></pre><h2 id=\"distributed-training-of-ensemble-models\">Distributed training of ensemble models</h2><p><span style=\"color:red\"><strong>UPDATE</strong>: As of 3.0.0, Hyper-parameter optimization features have been removed, since Hyperas is no longer active and was causing versioning compatibility issues. To use these features, install version 2.1 or below.</span></p><p>Building on the last section, it is possible to train ensemble models with elephas by means of running hyper-parameter optimization on large search spaces and defining a resulting voting classifier on the top-n performing models. With <code>data</code> and <code>model</code> defined as above, this is a simple as running</p><pre><code class=\"language-python\">result = hyperparam_model.best_ensemble(nb_ensemble_models=10, model=model, data=data, max_evals=5)</code></pre><p>In this example an ensemble of 10 models is built, based on optimization of at most 5 runs on each of the Spark workers.</p><h2 id=\"discussion\">Discussion</h2><p>Premature parallelization may not be the root of all evil, but it may not always be the best idea to do so. Keep in mind that more workers mean less data per worker and parallelizing a model is not an excuse for actual learning. So, if you can perfectly well fit your data into memory <em>and</em> you're happy with training speed of the model consider just using keras.</p><p>One exception to this rule may be that you're already working within the Spark ecosystem and want to leverage what's there. The above SparkML example shows how to use evaluation modules from Spark and maybe you wish to further process the outcome of an elephas model down the road. In this case, we recommend to use elephas as a simple wrapper by setting num_workers=1.</p><p>Note that right now elephas restricts itself to data-parallel algorithms for two reasons. First, Spark simply makes it very easy to distribute data. Second, neither Spark nor Theano make it particularly easy to split up the actual model in parts, thus making model-parallelism practically impossible to realize.</p><p>Having said all that, we hope you learn to appreciate elephas as a pretty easy to setup and use playground for data-parallel deep-learning algorithms.</p><h2 id=\"literature\">Literature</h2><p>[1] J. Dean, G.S. Corrado, R. Monga, K. Chen, M. Devin, QV. Le, MZ. Mao, M\u2019A. Ranzato, A. Senior, P. Tucker, K. Yang, and AY. Ng. <a href=\"http://research.google.com/archive/large_deep_networks_nips2012.html\">Large Scale Distributed Deep Networks</a>.</p><p>[2] F. Niu, B. Recht, C. Re, S.J. Wright <a href=\"http://arxiv.org/abs/1106.5730\">HOGWILD!: A Lock-Free Approach to Parallelizing Stochastic Gradient Descent</a></p><p>[3] C. Noel, S. Osindero. <a href=\"http://stanford.edu/~rezab/nips2014workshop/submits/dogwild.pdf\">Dogwild! \u2014 Distributed Hogwild for CPU &amp; GPU</a></p><h2 id=\"maintainers-contributions\">Maintainers / Contributions</h2><p>This great project was started by Max Pumperla, and is currently maintained by Daniel Cahall (https://github.com/danielenricocahall). If you have any questions, please feel free to open up an issue or send an email to danielenricocahall@gmail.com. If you want to contribute, feel free to submit a PR, or start a conversation about how we can go about implementing something.</p><h2 id=\"star-history\">Star History</h2><p><a href=\"https://star-history.com/#danielenricocahall/elephas&amp;Date\"><img alt=\"Star History Chart\" src=\"https://api.star-history.com/svg?repos=danielenricocahall/elephas&amp;type=Date\" /></a></p>                          </div>          </div><footer>    <div class=\"rst-footer-buttons\" role=\"navigation\" aria-label=\"Footer Navigation\">        <a href=\"why-use-elephas/\" class=\"btn btn-neutral float-right\" title=\"Why use Elephas\">Next <span class=\"icon icon-circle-arrow-right\"></span></a>    </div>  <hr/>  <div role=\"contentinfo\">    <!-- Copyright etc -->  </div>  Built with <a href=\"https://www.mkdocs.org/\">MkDocs</a> using a <a href=\"https://github.com/readthedocs/sphinx_rtd_theme\">theme</a> provided by <a href=\"https://readthedocs.org\">Read the Docs</a>.</footer>                  </div>      </div>    </section>  </div>  <div class=\"rst-versions\" role=\"note\" aria-label=\"Versions\">  <span class=\"rst-current-version\" data-toggle=\"rst-current-version\">            <span>          <a href=\"http://github.com/danielenricocahall/elephas\" class=\"fa fa-github\" style=\"color: #fcfcfc\"> GitHub</a>        </span>                  <span><a href=\"why-use-elephas/\" style=\"color: #fcfcfc\">Next &raquo;</a></span>      </span></div>    <script src=\"js/jquery-3.6.0.min.js\"></script>    <script>var base_url = \".\";</script>    <script src=\"js/theme_extra.js\"></script>    <script src=\"js/theme.js\"></script>      <script src=\"search/main.js\"></script>    <script>        jQuery(function () {            SphinxRtdTheme.Navigation.enable(true);        });    </script></body></html><!--MkDocs version : 1.5.3Build Date UTC : 2024-01-09 00:51:00.482444+00:00-->",
  "embeddings": []
}
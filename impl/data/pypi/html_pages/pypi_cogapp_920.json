{
  "libtype": "pypi",
  "libname": "cogapp",
  "url": "http://nedbatchelder.com/code/cog",
  "html": "<!DOCTYPE HTML><html lang=\"en\"><head><title>Cog | Ned Batchelder</title><meta http-equiv=\"Content-Type\" content=\"text/html;charset=utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"><meta name=\"supported-color-schemes\" content=\"light dark\"><meta name=\"color-scheme\" content=\"light dark\"><meta name=\"og:site\" content=\"Ned Batchelder\"><meta name=\"twitter:widgets:theme\" content=\"default\"><meta property=\"og:title\" content=\"Cog\"><meta property=\"og:url\" content=\"https://nedbatchelder.com/code/cog/index.html\"><meta property='og:updated_time' content='2021-11-19T10:41:00'><meta property='article:published_time' content='2021-11-19T10:41:00'><link rel=\"webmention\" href=\"https://webmention.io/nedbatchelder.com/webmention\"><meta property=\"og:type\" content=\"article\"><link rel='stylesheet' href='//nedbatchelder.com/style__728bc1aa662f.css' type='text/css'><link rel=\"preload\" href=\"https://fonts.googleapis.com/css?family=Source+Sans+Pro:400,400i,700,700i&display=swap\" as=\"style\" onload=\"this.onload=null;this.rel='stylesheet'\"><noscript><link href=\"https://fonts.googleapis.com/css?family=Source+Sans+Pro:400,400i,700,700i&display=swap\" rel=\"stylesheet\"></noscript><script src='//nedbatchelder.com/nedbatchelder__7b54fcc4ae41.js'></script><script async src=\"https://www.googletagmanager.com/gtag/js?id=G-NS11SER2K8\"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'G-NS11SER2K8');</script></head><body><header id='banner'><nav class='path'><a class='home' href='/'>Ned<span class='chelder'>&nbsp;</span>Bat<span class='chelder'>chelder</span></a> <span class='top_areas'><span class='plaindot'>&#xb7;&#xb7;</span> <a href='/blog'>Blog</a> \u00b7 <a href='/text'>Text</a> \u00b7 <a href='/code'>Code</a> <span class='plaindot'>&#xb7;&#xb7;</span> <a class=\"blm\" href=\"/blog/202006/black_lives_matter.html\">BLM</a> <a class=\"ukraine\" title=\"Support Ukraine\" href=\"https://stand-with-ukraine.pp.ua/#support-ukraine\">&nbsp;</a> <a class=\"pride\" title=\"Happy Pride!\" href=\"/blog/201207/my_mom_got_married.html\">&nbsp;</a></span></nav></header><main id='content'><h1 class='headslug'>Cog</h1><div class='body'><p class='dateline'>                    Created 10 February 2004, last updated 19 November 2021                </p><p class=\"docinfo\">An older version of this document is also available in<a href=\"//nedbatchelder.com/code/cog/index_ru.html\">Russian</a>.</p><p class=\"first\">Cog is a file generation tool.  It lets you use pieces of Python codeas generators in your source files to generate whatever text you need.</p><p>This page describes version 3.3.0, released November 19, 2021.</p><p>The sections below are:</p><ul><li><a href=\"//nedbatchelder.com/code/cog/index.html#h_what_does_it_do\">What does it do?</a></li><li><a href=\"//nedbatchelder.com/code/cog/index.html#h_design\">Design</a></li><li><a href=\"//nedbatchelder.com/code/cog/index.html#h_installation\">Installation</a></li><li><a href=\"//nedbatchelder.com/code/cog/index.html#h_writing_the_source_files\">Writing the source files</a></li><li><a href=\"//nedbatchelder.com/code/cog/index.html#h_the_cog_module\">The cog module</a></li><li><a href=\"//nedbatchelder.com/code/cog/index.html#h_running_cog\">Running cog</a></li><li><a href=\"//nedbatchelder.com/code/cog/index.html#h_history\">History</a></li><li><a href=\"//nedbatchelder.com/code/cog/index.html#h_feedback\">Feedback</a></li><li><a href=\"//nedbatchelder.com/code/cog/index.html#h_see_also\">See Also</a></li></ul><h1 id=\"h_what_does_it_do\">What does it do?<a class=\"headerlink\" aria-label=\"Link to this header\" href=\"#h_what_does_it_do\"></a></h1><p>Cog transforms files in a very simple way: it finds chunks of Python codeembedded in them, executes the Python code, and inserts its output backinto the original file.The file can contain whatever text you like around the Python code.It will usually be source code.</p><p>For example, if you run this file through cog:</p><blockquote class=\"code\"><pre class=\"c\"><span class=\"c1\">//&#xA0;This&#xA0;is&#xA0;my&#xA0;C++&#xA0;file.</span><br><span class=\"p\">...</span><span class=\"w\"></span><br><span class=\"cm\">/*[[[cog</span><br><span class=\"cm\">import&#xA0;cog</span><br><span class=\"cm\">fnames&#xA0;=&#xA0;[&#39;DoSomething&#39;,&#xA0;&#39;DoAnotherThing&#39;,&#xA0;&#39;DoLastThing&#39;]</span><br><span class=\"cm\">for&#xA0;fn&#xA0;in&#xA0;fnames:</span><br><span class=\"cm\">&#xA0;&#xA0;&#xA0;&#xA0;cog.outl(&quot;void&#xA0;%s();&quot;&#xA0;%&#xA0;fn)</span><br><span class=\"cm\">]]]*/</span><span class=\"w\"></span><br><span class=\"c1\">//[[[end]]]</span><br><span class=\"p\">...</span><span class=\"w\"></span><br></pre></blockquote><p>it will come out like this:</p><blockquote class=\"code\"><pre class=\"c\"><span class=\"c1\">//&#xA0;This&#xA0;is&#xA0;my&#xA0;C++&#xA0;file.</span><br><span class=\"p\">...</span><span class=\"w\"></span><br><span class=\"cm\">/*[[[cog</span><br><span class=\"cm\">import&#xA0;cog</span><br><span class=\"cm\">fnames&#xA0;=&#xA0;[&#39;DoSomething&#39;,&#xA0;&#39;DoAnotherThing&#39;,&#xA0;&#39;DoLastThing&#39;]</span><br><span class=\"cm\">for&#xA0;fn&#xA0;in&#xA0;fnames:</span><br><span class=\"cm\">&#xA0;&#xA0;&#xA0;&#xA0;cog.outl(&quot;void&#xA0;%s();&quot;&#xA0;%&#xA0;fn)</span><br><span class=\"cm\">]]]*/</span><span class=\"w\"></span><br><span class=\"kt\">void</span><span class=\"w\">&#xA0;</span><span class=\"n\">DoSomething</span><span class=\"p\">();</span><span class=\"w\"></span><br><span class=\"kt\">void</span><span class=\"w\">&#xA0;</span><span class=\"nf\">DoAnotherThing</span><span class=\"p\">();</span><span class=\"w\"></span><br><span class=\"kt\">void</span><span class=\"w\">&#xA0;</span><span class=\"nf\">DoLastThing</span><span class=\"p\">();</span><span class=\"w\"></span><br><span class=\"c1\">//[[[end]]]</span><br><span class=\"p\">...</span><span class=\"w\"></span><br></pre></blockquote><p>Lines with triple square brackets are marker lines.The lines between <b>[[[cog</b> and <b>]]]</b> are the generator Python code.The lines between <b>]]]</b> and <b>[[[end]]]</b> are the output fromthe generator.</p><p>Output is written with <b>cog.outl</b>, or if you use the <b>-P</b> option,normal <b>print()</b> calls.</p><p>When cog runs, it discards the last generated Python output,executes the generator Python code,and writes its generated output into the file.All text lines outside of the special markers are passed through unchanged.</p><p>The cog marker lines can contain any text in addition to the triple square brackettokens.  This makes it possible to hide the generator Python code from the source file.In the sample above, the entire chunk of Python code is a C++ comment, so thePython code can be left in place while the file is treated as C++ code.</p><h1 id=\"h_design\">Design<a class=\"headerlink\" aria-label=\"Link to this header\" href=\"#h_design\"></a></h1><p>Cog is designed to be easy to run.It writes its results back into the original file whileretaining the code it executed.This means cog can be run any number of times on the same file.Rather than have a source generator file, and a separate output file, typicallycog is run with one file serving as both generator and output.</p><p>Because the marker lines accommodate any language syntax, the markerscan hide the cog Python code from the source file.This means cog files can be checked into source controlwithout worrying about keeping the source files separate from the outputfiles, without modifying build procedures, and so on.</p><p>I experimented with using a templating engine for generating code,and found myself constantly struggling with white space in the generatedoutput, and mentally converting from the Python code I could imagine, intoits templating equivalent.  The advantages of a templating system (that mostof the code could be entered literally) were lost as the code generationtasks became more complex, and the generation process needed more logic.</p><p>Cog lets you use the full power of Python for text generation,without a templating system dumbing down your tools for you.</p><h1 id=\"h_installation\">Installation<a class=\"headerlink\" aria-label=\"Link to this header\" href=\"#h_installation\"></a></h1><p>Cog requires Python 2.7, 3.5, 3.6, 3.7, 3.8, or Jython 2.5.</p><p>Cog is installed in the usual way, except the name is &#8220;cogapp&#8221;, not &#8220;cog&#8221;:</p><blockquote class=\"code\"><pre>$\u00a0pip\u00a0install\u00a0cogapp<br></pre></blockquote><p>You should now have a &#8220;cog&#8221; command, or cog.py in your Python scripts directory.</p><h2 id=\"h_license\">License<a class=\"headerlink\" aria-label=\"Link to this header\" href=\"#h_license\"></a></h2><p>Cog is distributed under the<a href=\"http://www.opensource.org/licenses/mit-license.php\" rel=\"external noopener\">MIT license</a>.Use it to spread goodness through the world.</p><h1 id=\"h_writing_the_source_files\">Writing the source files<a class=\"headerlink\" aria-label=\"Link to this header\" href=\"#h_writing_the_source_files\"></a></h1><p>Source files to be run through cog are mostly just plain text that willbe passed through untouched.The Python code in your source file is standard Python code.Any way you want to use Python to generate text to go into your file is fine.Each chunk of Python code (between the <b>[[[cog</b> and <b>]]]</b> lines)is called a <em>generator</em> and is executed in sequence.</p><p>The output area for each generator (between the <b>]]]</b> and <b>[[[end]]]</b>lines) is deleted, and the output of running the Python code is inserted in its place.To accommodate all source file types, the format of the marker lines is irrelevant.If the line contains the special character sequence, the whole line is taken asa marker.Any of these lines mark the beginning of executable Python code:</p><blockquote class=\"code\"><pre>//[[[cog<br>/*\u00a0cog\u00a0starts\u00a0now:\u00a0[[[cog\u00a0*/<br>--\u00a0[[[cog\u00a0(this\u00a0is\u00a0cog\u00a0Python\u00a0code)<br>#if\u00a00\u00a0//\u00a0[[[cog<br></pre></blockquote><p>Cog can also be used in languages without multi-line comments.If the marker lines all have the same text before the triple brackets,and all the lines in the generator code also have this text as a prefix,then the prefixes are removed from all the generator lines before execution.For example, in a SQL file, this:</p><blockquote class=\"code\"><pre>--[[[cog<br>--\u00a0\u00a0\u00a0import\u00a0cog<br>--\u00a0\u00a0\u00a0for\u00a0table\u00a0in\u00a0['customers',\u00a0'orders',\u00a0'suppliers']:<br>--\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0cog.outl(\"drop\u00a0table\u00a0%s;\"\u00a0%\u00a0table)<br>--]]]<br>--[[[end]]]<br></pre></blockquote><p>will produce this:</p><blockquote class=\"code\"><pre>--[[[cog<br>--\u00a0\u00a0\u00a0import\u00a0cog<br>--\u00a0\u00a0\u00a0for\u00a0table\u00a0in\u00a0['customers',\u00a0'orders',\u00a0'suppliers']:<br>--\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0cog.outl(\"drop\u00a0table\u00a0%s;\"\u00a0%\u00a0table)<br>--]]]<br>drop\u00a0table\u00a0customers;<br>drop\u00a0table\u00a0orders;<br>drop\u00a0table\u00a0suppliers;<br>--[[[end]]]<br></pre></blockquote><p>Finally, a compact form can be used for single-line generators.The begin-code marker and the end-code marker can appear on the sameline, and all the text between them will be taken as a single Pythonline:</p><blockquote class=\"code\"><pre>//\u00a0blah\u00a0blah<br>//[[[cog\u00a0import\u00a0MyModule\u00a0as\u00a0m;\u00a0m.generateCode()\u00a0]]]<br>//[[[end]]]<br></pre></blockquote><p>You can also use this form to simply import a module.  The top-levelstatements in the module can generate the code.</p><p>If you have special requirements for the syntax of your file, you can usethe --markers option to define new markers.</p><p>If there are multiple generators in the same file, they are executedwith the same globals dictionary, so it is as if they were all one Pythonmodule.</p><p>Cog tries to do the right thing with white space.Your Python code can be block-indented to match the surrounding text in thesource file, and cog will re-indent the output to fit as well.All of the output for a generator is collected as a block of text, a commonwhitespace prefix is removed, and then the block is indented to match theindentation of the cog generator. This means the left-most non-whitespacecharacter in your output will have the same indentation as the begin-codemarker line.  Other lines in your output keep their relative indentation.</p><h1 id=\"h_the_cog_module\">The cog module<a class=\"headerlink\" aria-label=\"Link to this header\" href=\"#h_the_cog_module\"></a></h1><p>A module called cog provides the functions you call to produce output intoyour file.  The functions are:</p><dl><dt><b>cog.out</b><i>(sOut=&#8217;&#8217; [, dedent=False][, trimblanklines=False])</i></dt><dd>Writes text to the output.</dd><dd><i>sOut</i> is the string to write to the output.</dd><dd>If <i>dedent</i> is True, then common initial white space is removed from thelines in <i>sOut</i> before adding them to the output.If <i>trimblanklines</i> is True, then an initial and trailingblank line are removed from <i>sOut</i> before adding them to the output.Together, these option arguments make it easier to use multi-line strings,and they only are useful for multi-line strings:</dd><blockquote class=\"code\"><pre>cog.out(\"\"\"<br>\u00a0\u00a0\u00a0\u00a0These\u00a0are\u00a0lines\u00a0I<br>\u00a0\u00a0\u00a0\u00a0want\u00a0to\u00a0write\u00a0into\u00a0my\u00a0source\u00a0file.<br>\"\"\",\u00a0dedent=True,\u00a0trimblanklines=True)<br></pre></blockquote><dt><b>cog.outl</b></dt><dd>Same as <b>cog.out</b>, but adds a trailing newline.</dd><dt><b>cog.msg</b><i>(msg)</i></dt><dd>Prints <i>msg</i> to stdout with a &#8220;Message: &#8221; prefix.</dd><dt><b>cog.error</b><i>(msg)</i></dt><dd>Raises an exception with <i>msg</i> as the text.No traceback is included, so that non-Python programmers using your codegenerators won&#8217;t be scared.</dd><dt><b>cog.inFile</b></dt><dd>An attribute, the path of the input file.</dd><dt><b>cog.outFile</b></dt><dd>An attribute, the path of the output file.</dd><dt><b>cog.firstLineNum</b></dt><dd>An attribute, the line number of the first line of Python codein the generator.  This can be used to distinguish between twogenerators in the same input file, if needed.</dd><dt><b>cog.previous</b></dt><dd>An attribute, the text output of the previous run of thisgenerator.  This can be used for whatever purpose you like, includingoutputting again with cog.out().</dd></dl><h1 id=\"h_running_cog\">Running cog<a class=\"headerlink\" aria-label=\"Link to this header\" href=\"#h_running_cog\"></a></h1><p>Cog is a command-line utility which takes arguments in standard form.</p><blockquote class=\"code\"><pre>$\u00a0cog\u00a0-h<br>cog\u00a0-\u00a0generate\u00a0content\u00a0with\u00a0inlined\u00a0Python\u00a0code.<br><br>cog\u00a0[OPTIONS]\u00a0[INFILE\u00a0|\u00a0@FILELIST]\u00a0...<br><br>INFILE\u00a0is\u00a0the\u00a0name\u00a0of\u00a0an\u00a0input\u00a0file,\u00a0'-'\u00a0will\u00a0read\u00a0from\u00a0stdin.<br>FILELIST\u00a0is\u00a0the\u00a0name\u00a0of\u00a0a\u00a0text\u00a0file\u00a0containing\u00a0file\u00a0names\u00a0or<br>\u00a0\u00a0\u00a0\u00a0other\u00a0@FILELISTs.<br><br>OPTIONS:<br>\u00a0\u00a0\u00a0\u00a0-c\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Checksum\u00a0the\u00a0output\u00a0to\u00a0protect\u00a0it\u00a0against\u00a0accidental\u00a0change.<br>\u00a0\u00a0\u00a0\u00a0-d\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Delete\u00a0the\u00a0generator\u00a0code\u00a0from\u00a0the\u00a0output\u00a0file.<br>\u00a0\u00a0\u00a0\u00a0-D\u00a0name=val\u00a0Define\u00a0a\u00a0global\u00a0string\u00a0available\u00a0to\u00a0your\u00a0generator\u00a0code.<br>\u00a0\u00a0\u00a0\u00a0-e\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Warn\u00a0if\u00a0a\u00a0file\u00a0has\u00a0no\u00a0cog\u00a0code\u00a0in\u00a0it.<br>\u00a0\u00a0\u00a0\u00a0-I\u00a0PATH\u00a0\u00a0\u00a0\u00a0\u00a0Add\u00a0PATH\u00a0to\u00a0the\u00a0list\u00a0of\u00a0directories\u00a0for\u00a0data\u00a0files\u00a0and\u00a0modules.<br>\u00a0\u00a0\u00a0\u00a0-n\u00a0ENCODING\u00a0Use\u00a0ENCODING\u00a0when\u00a0reading\u00a0and\u00a0writing\u00a0files.<br>\u00a0\u00a0\u00a0\u00a0-o\u00a0OUTNAME\u00a0\u00a0Write\u00a0the\u00a0output\u00a0to\u00a0OUTNAME.<br>\u00a0\u00a0\u00a0\u00a0-p\u00a0PROLOGUE\u00a0Prepend\u00a0the\u00a0generator\u00a0source\u00a0with\u00a0PROLOGUE.\u00a0Useful\u00a0to\u00a0insert\u00a0an<br>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0import\u00a0line.\u00a0Example:\u00a0-p\u00a0\"import\u00a0math\"<br>\u00a0\u00a0\u00a0\u00a0-P\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Use\u00a0print()\u00a0instead\u00a0of\u00a0cog.outl()\u00a0for\u00a0code\u00a0output.<br>\u00a0\u00a0\u00a0\u00a0-r\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Replace\u00a0the\u00a0input\u00a0file\u00a0with\u00a0the\u00a0output.<br>\u00a0\u00a0\u00a0\u00a0-s\u00a0STRING\u00a0\u00a0\u00a0Suffix\u00a0all\u00a0generated\u00a0output\u00a0lines\u00a0with\u00a0STRING.<br>\u00a0\u00a0\u00a0\u00a0-U\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Write\u00a0the\u00a0output\u00a0with\u00a0Unix\u00a0newlines\u00a0(only\u00a0LF\u00a0line-endings).<br>\u00a0\u00a0\u00a0\u00a0-w\u00a0CMD\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Use\u00a0CMD\u00a0if\u00a0the\u00a0output\u00a0file\u00a0needs\u00a0to\u00a0be\u00a0made\u00a0writable.<br>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0A\u00a0%s\u00a0in\u00a0the\u00a0CMD\u00a0will\u00a0be\u00a0filled\u00a0with\u00a0the\u00a0filename.<br>\u00a0\u00a0\u00a0\u00a0-x\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Excise\u00a0all\u00a0the\u00a0generated\u00a0output\u00a0without\u00a0running\u00a0the\u00a0generators.<br>\u00a0\u00a0\u00a0\u00a0-z\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0The\u00a0end-output\u00a0marker\u00a0can\u00a0be\u00a0omitted,\u00a0and\u00a0is\u00a0assumed\u00a0at\u00a0eof.<br>\u00a0\u00a0\u00a0\u00a0-v\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Print\u00a0the\u00a0version\u00a0of\u00a0cog\u00a0and\u00a0exit.<br>\u00a0\u00a0\u00a0\u00a0--check\u00a0\u00a0\u00a0\u00a0\u00a0Check\u00a0that\u00a0the\u00a0files\u00a0would\u00a0not\u00a0change\u00a0if\u00a0run\u00a0again.<br>\u00a0\u00a0\u00a0\u00a0--markers='START\u00a0END\u00a0END-OUTPUT'<br>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0The\u00a0patterns\u00a0surrounding\u00a0cog\u00a0inline\u00a0instructions.\u00a0Should<br>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0include\u00a0three\u00a0values\u00a0separated\u00a0by\u00a0spaces,\u00a0the\u00a0start,\u00a0end,<br>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0and\u00a0end-output\u00a0markers.\u00a0Defaults\u00a0to\u00a0'[[[cog\u00a0]]]\u00a0[[[end]]]'.<br>\u00a0\u00a0\u00a0\u00a0--verbosity=VERBOSITY<br>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Control\u00a0the\u00a0amount\u00a0of\u00a0output.\u00a02\u00a0(the\u00a0default)\u00a0lists\u00a0all\u00a0files,<br>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a01\u00a0lists\u00a0only\u00a0changed\u00a0files,\u00a00\u00a0lists\u00a0no\u00a0files.<br>\u00a0\u00a0\u00a0\u00a0-h\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Print\u00a0this\u00a0help.<br></pre></blockquote><p>In addition to running cog as a command on the command line, you can alsoinvoke it as a module with the Python interpreter:</p><blockquote class=\"code\"><pre>$\u00a0python\u00a0-m\u00a0cogapp\u00a0[options]\u00a0[arguments]</pre></blockquote><p>Note that the Python module is called &#8220;cogapp&#8221;.</p><h2 id=\"h_input_files\">Input files<a class=\"headerlink\" aria-label=\"Link to this header\" href=\"#h_input_files\"></a></h2><p>Files on the command line are processed as input files. All input filesare assumed to be UTF-8 encoded. Using a minus for a filename (-) will readthe standard input.</p><p>Files can also be listed in a text file named on the command linewith an @:</p><blockquote class=\"code\"><pre>$\u00a0cog\u00a0@files_to_cog.txt</pre></blockquote><p>These @-files can be nested, and each line can contain switches as wellas a file to process.For example, you can create a file cogfiles.txt:</p><blockquote class=\"code\"><p class=\"name\">cogfiles.txt</p><pre>#\u00a0These\u00a0are\u00a0the\u00a0files\u00a0I\u00a0run\u00a0through\u00a0cog<br>mycode.cpp<br>myothercode.cpp<br>myschema.sql\u00a0-s\u00a0\"\u00a0--**cogged**\"<br>readme.txt\u00a0-s\u00a0\"\"<br></pre></blockquote><p>then invoke cog like this:</p><blockquote class=\"code\"><pre>cog\u00a0-s\u00a0\"\u00a0//**cogged**\"\u00a0@cogfiles.txt<br></pre></blockquote><p>Now cog will process four files, using C++ syntax for markers on all the C++ files,SQL syntax for the .sql file, and no markers at all on the readme.txt file.</p><p>As another example, cogfiles2.txt could be:</p><blockquote class=\"code\"><p class=\"name\">cogfiles2.txt</p><pre>template.h\u00a0-D\u00a0thefile=data1.xml\u00a0-o\u00a0data1.h<br>template.h\u00a0-D\u00a0thefile=data2.xml\u00a0-o\u00a0data2.h<br></pre></blockquote><p>with cog invoked like this:</p><blockquote class=\"code\"><pre>cog\u00a0-D\u00a0version=3.4.1\u00a0@cogfiles2.txt<br></pre></blockquote><p>Cog will process template.h twice, creating both data1.h and data2.h.  Both executionswould define the variable version as &#8220;3.4.1&#8221;, but the first run would have thefile equal to &#8220;data1.xml&#8221;and the second run would have thefile equal to &#8220;data2.xml&#8221;.</p><h2 id=\"h_overwriting_files\">Overwriting files<a class=\"headerlink\" aria-label=\"Link to this header\" href=\"#h_overwriting_files\"></a></h2><p>The -r flag tells cog to write the output back to the input file.If the input file is not writable (for example, because it has not beenchecked out of a source control system),a command to make the file writable can be provided with -w:</p><blockquote class=\"code\"><pre>$\u00a0cog\u00a0-r\u00a0-w\u00a0\"p4\u00a0edit\u00a0%s\"\u00a0@files_to_cog.txt</pre></blockquote><h2 id=\"h_setting_globals\">Setting globals<a class=\"headerlink\" aria-label=\"Link to this header\" href=\"#h_setting_globals\"></a></h2><p>Global values can be set from the command line with the -D flag.For example, invoking Cog like this:</p><blockquote class=\"code\"><pre>cog\u00a0-D\u00a0thefile=fooey.xml\u00a0mycode.txt<br></pre></blockquote><p>will run Cog over mycode.txt, but first define a global variable calledthefile with a value of &#8220;fooey.xml&#8221;. This variable can then be referenced inyour generator code. You can provide multiple -D arguments on the command line,and all will be defined and available.</p><p>The value is always interpreted as a Python string, to simplify the problem of quoting.This means that:</p><blockquote class=\"code\"><pre>cog\u00a0-D\u00a0NUM_TO_DO=12<br></pre></blockquote><p>will define NUM_TO_DO not as the integer 12, but as the string &#8220;12&#8221;, whichare different and not equal values in Python. Use int(NUM_TO_DO) to get thenumeric value.</p><h2 id=\"h_checksummed_output\">Checksummed output<a class=\"headerlink\" aria-label=\"Link to this header\" href=\"#h_checksummed_output\"></a></h2><p>If cog is run with the -c flag, then generated output is accompanied bya checksum:</p><blockquote class=\"code\"><pre>--[[[cog<br>--\u00a0\u00a0\u00a0import\u00a0cog<br>--\u00a0\u00a0\u00a0for\u00a0i\u00a0in\u00a0range(10):<br>--\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0cog.out(\"%d\u00a0\"\u00a0%\u00a0i)<br>--]]]<br>0\u00a01\u00a02\u00a03\u00a04\u00a05\u00a06\u00a07\u00a08\u00a09<br>--[[[end]]]\u00a0(checksum:\u00a0bd7715304529f66c4d3493e786bb0f1f)<br></pre></blockquote><p>If the generated code is edited by a misguided developer, the next time cogis run, the checksum won&#8217;t match, and cog will stop to avoid overwriting theedited code.</p><h2 id=\"h_continuous_integration\">Continuous integration<a class=\"headerlink\" aria-label=\"Link to this header\" href=\"#h_continuous_integration\"></a></h2><p>You can use the --check option to run cog just to check that the files wouldnot change if run again.  This is useful in continuous integration to check thatyour files have been updated properly.</p><h2 id=\"h_output_line_suffixes\">Output line suffixes<a class=\"headerlink\" aria-label=\"Link to this header\" href=\"#h_output_line_suffixes\"></a></h2><p>To make it easier to identify generated lines when grepping your source files,the -s switch provides a suffix which is appended to every non-blank text line generated byCog.  For example, with this input file (mycode.txt):</p><blockquote class=\"code\"><p class=\"name\">mycode.txt</p><pre>[[[cog<br>cog.outl('Three\u00a0times:\\n')<br>for\u00a0i\u00a0in\u00a0range(3):<br>\u00a0\u00a0\u00a0\u00a0cog.outl('This\u00a0is\u00a0line\u00a0%d'\u00a0%\u00a0i)<br>]]]<br>[[[end]]]<br></pre></blockquote><p>invoking cog like this:</p><blockquote class=\"code\"><pre>cog\u00a0-s\u00a0\"\u00a0//(generated)\"\u00a0mycode.txt<br></pre></blockquote><p>will produce this output:</p><blockquote class=\"code\"><pre>[[[cog<br>cog.outl('Three\u00a0times:\\n')<br>for\u00a0i\u00a0in\u00a0range(3):<br>\u00a0\u00a0\u00a0\u00a0cog.outl('This\u00a0is\u00a0line\u00a0%d'\u00a0%\u00a0i)<br>]]]<br>Three\u00a0times:\u00a0//(generated)<br><br>This\u00a0is\u00a0line\u00a00\u00a0//(generated)<br>This\u00a0is\u00a0line\u00a01\u00a0//(generated)<br>This\u00a0is\u00a0line\u00a02\u00a0//(generated)<br>[[[end]]]<br></pre></blockquote><h2 id=\"h_miscellaneous\">Miscellaneous<a class=\"headerlink\" aria-label=\"Link to this header\" href=\"#h_miscellaneous\"></a></h2><p>The -n option lets you tell cog what encoding to use when reading and    writing files.</p><p>The --verbose option lets you control how much cog should chatter about the    files it is cogging.  --verbose=2 is the default: cog will name every file    it considers, and whether it has changed.  --verbose=1 will only name the    changed files. --verbose=0 won&#8217;t mention any files at all.</p><p>The --markers option lets you control the syntax of the marker lines.  The    value must be a string with two spaces in it.  The three markers are the    three pieces separated by the spaces.  The default value for markers is    &#8220;[[cog ]]] [[[end]]]&#8221;.</p><p>The -x flag tells cog to delete the old generated output without runningthe generators.  This lets you remove all the generated output from a sourcefile.</p><p>The -d flag tells cog to delete the generators from the output file.  This letsyou generate content in a public file but not have to show the generator to your customers.</p><p>The -U flag causes the output file to use pure Unix newlines rather than theplatform&#8217;s native line endings.  You can use this on Windows to produce Unix-styleoutput files.</p><p>The -I flag adds a directory to the path used to find Python modules.</p><p>The -p option specifies Python text to prepend to embedded generator source,which can keep common imports out of source files.</p><p>The -z flag lets you omit the [[[end]]] marker line, and it will be assumed at theend of the file.</p><h1 id=\"h_history\">History<a class=\"headerlink\" aria-label=\"Link to this header\" href=\"#h_history\"></a></h1><p>Cog&#8217;s change log is on a <a href=\"//nedbatchelder.com/code/cog/changes.html\">separate change page</a>.</p><h1 id=\"h_feedback\">Feedback<a class=\"headerlink\" aria-label=\"Link to this header\" href=\"#h_feedback\"></a></h1><p>I&#8217;d love to hear about your successes or difficulties using cog.Comment here, or<a href='javascript:nospam(\"ned\",\"nedbatchelder.com?subject=Cog\");'>send me a note</a>.</p><h1 id=\"h_see_also\">See Also<a class=\"headerlink\" aria-label=\"Link to this header\" href=\"#h_see_also\"></a></h1><p>There are a handful of other implementations of the ideas in Cog:</p><ul><li><a href=\"http://rubyforge.org/projects/argent/\" rel=\"external noopener\">Argent</a> is a Ruby implementation.</li><li><a href=\"http://babylon.idlevice.co.uk/php/precog/\" rel=\"external noopener\">Precog</a> is a PHP implementation.</li><li><a href=\"http://www.crazilocks.com/pcg.html\" rel=\"external noopener\">PCG</a> is a Perl implementation.</li><li><a href=\"http://sourceforge.net/projects/templarian\" rel=\"external noopener\">Templarian</a> is a similar tool, also in Python.</li><li><a href=\"http://www.larryhastings.com/programming/nocog/\" rel=\"external noopener\">Nocog</a> is a build tool to detect filesthat should be run through cog.</li></ul><p>You might like to read:</p><ul><li><a href=\"http://www.python.org/about/success/cog/\" rel=\"external noopener\">Cog: A Code Generation Tool Written in Python</a>,the Python Success Story I wrote about Cog.</li><li><a href=\"//nedbatchelder.com/blog\">My blog</a>, where I ramble on about software and other things that interest me.</li></ul><div id='comments'><h1>Comments</h1><div id='commentform'><h2>Add a comment:</h2><div><form method=\"post\" action=\"https://nedbatchelder.com/code/cog#commentform\" id=\"commentformform\"><div><label for='f5c8b4d89641494f92cadbd8b41f198a9'>Name:</label><input class='edit' type=\"text\" name=\"f5c8b4d89641494f92cadbd8b41f198a9\" id=\"f5c8b4d89641494f92cadbd8b41f198a9\" value=\"\"></div><div><label for='ff570f494be0a090daece04c6306bb96f'>Email:</label><div class=\"dn\">                Ignore this:                <input class='edit' type=\"email\" name=\"fbc9a1465ecbd6c722b2499dd8097b848\" id=\"fbc9a1465ecbd6c722b2499dd8097b848\"></div><input class='edit' type=\"email\" name=\"ff570f494be0a090daece04c6306bb96f\" id=\"ff570f494be0a090daece04c6306bb96f\" value=\"\"><div class=\"dn\">                Leave this empty:                <input class='edit' type=\"email\" name=\"ff6bb1ebb48ae67219eb4a84bb481ce86\" id=\"ff6bb1ebb48ae67219eb4a84bb481ce86\"></div></div><div><label for='f3f7563b716c718286339d799ab3f3e5b'>Web site:</label><input class='edit' type=\"url\" name=\"f3f7563b716c718286339d799ab3f3e5b\" id=\"f3f7563b716c718286339d799ab3f3e5b\" value=\"\"></div><div class=\"notice\">            Name is required. Either email or web are required.            Email won't be displayed and I won't spam you.            Your web site won't be indexed by search engines.        </div><div class=\"dn\">            Don't put anything here:            <textarea name=\"fe457172323b79dc10b0e70d838d261de\" id=\"fe457172323b79dc10b0e70d838d261de\" rows=\"7\"></textarea></div><div><label for='f8609836575a58d67314e7f3df87922eb'>Comment:</label><textarea name=\"f8609836575a58d67314e7f3df87922eb\" id=\"f8609836575a58d67314e7f3df87922eb\" rows=\"7\"></textarea></div><div class=\"dn\">            Leave this empty:            <textarea name=\"f778b0cd07f7ae9771226173b75bda1eb\" id=\"f778b0cd07f7ae9771226173b75bda1eb\" rows=\"7\"></textarea></div><div class=\"notice\">            Comment text is Markdown.        </div><div><label class='check' for=\"f6f4bdc38272e2302b07ac871a937dee8\"><input type=\"checkbox\" name=\"f6f4bdc38272e2302b07ac871a937dee8\" id=\"f6f4bdc38272e2302b07ac871a937dee8\">                Email me future comments on this page            </label>&#160;&#160;        </div><div class=\"finish\"><input id=\"previewbtn\" type=\"submit\" name=\"f192a6d591267204e45ec035d36544da2\" value=\"Preview >>\"><span class=\"dn\"><input type=\"submit\" name=\"f3cd92ea7b68423293a04efb0aa0c5c3f\" value=\"I'm a spambot\"></span></div><input type='hidden' name='fe75facc8ab8fd7c56ac94c3f0d366be6' value='code/cog'><input type='hidden' name='fdd03bda3a9d4fb460a6579545d0fbcfb' value='de31ec1acf31de4eaaacd012389cd102'><input type='hidden' name='f11eae6e7e1e36b2351ba59973f893ac7' value='1709668813'></form></div></div></div></div></main><aside id='sidebar'><ul class='first'><li class='first'><label for=\"searchterm\">Search this site: </label><form class=\"searchform\" action=\"https://www.google.com/search\" role=\"search\"><input type=\"hidden\" name=\"q\" value=\"site:nedbatchelder.com\"><input id=\"searchterm\" name=\"q\" class=\"searchbox\" size=\"15\" aria-label=\"search this site\"><input id=\"submit\" type=\"image\" title=\"Search\" alt=\"Search\" src=\"/pix/search.png\"></form></li><li class='inline'><label>Me: </label><ul class='tight'><li><a href='/site/aboutned.html' rel='author'>about</a></li><li><a href='/site'>site</a></li><li><a href='mailto:ned@nedbatchelder.com'>email</a></li><li><a href=\"https://hachyderm.io/@nedbat\">mastodon</a></li><li><a href=\"https://bsky.app/profile/nedbat.com\">bluesky</a></li><li><del>twitter</del></li><li><a href='irc://irc.libera.chat/#python'>irc</a></li><li><a href='https://about.bostonpython.com/slack'>slack</a></li><li><a href='https://pythondiscord.com'>discord</a></li><li><a href='https://github.com/users/nedbat/sponsorship'>sponsor</a></li><li><a href='https://tidelift.com/subscription/pkg/pypi-coverage?utm_source=pypi-coverage&utm_medium=referral&utm_campaign=nedbatblog'>tidelift</a></li><!-- <li><a href='https://edx.org'>work</a></li> --><li><a href='https://github.com/nedbat'>github</a></li><li><a href='https://linkedin.com/in/nedbat'>linkedin</a></li><li><a href='/Ned-Batchelder-Resume.pdf'>r\u00e9sum\u00e9</a></li><!-- <li><a href='https://orcid.org/0009-0006-2659-884X'>orcid</a></li> --></ul></li><li class='inline'><label>Blog: </label><nav><ul class='tight'><!--<li><a href='/blog/classics.html'><i>classics</i></a></li>--><li><a href='/blog/tag/python.html'>python</a></li><li><a href='/blog/tag/coverage.html'>coverage</a></li><li><a href='/blog/archive/year2024.html'>'24</a></li><li><a href='/blog/tag/mycode.html'>my code</a></li><li><a href='/blog/archive/year2023.html'>'23</a></li><li><a href='/blog/tag/math.html'>math</a></li><li><a href='/blog/tag/testing.html'>testing</a></li><li><a href='/blog/archive/year2022.html'>'22</a></li><li><a href='/blog/tag/beginners.html'>beginners</a></li><li><a href='/blog/archive/year2021.html'>'21</a></li><li><a href='/blog/tag/github.html'>github</a></li><li><a href='/blog/tag/art.html'>art</a></li><li><a href='/blog/archive/year2020.html'>'20</a></li><li><a href='/blog/tag/audio.html'>audio</a></li><li><a href='/blog/archive/year2019.html'>'19</a></li><li><a href='/blog/tag/edu.html'>edu</a></li><li><a href='/blog/tag/opensource.html'>oss</a></li><li><a href='/blog/archive/year2018.html'>'18</a></li><li><a href='/blog/tag/walking.html'>walking</a></li><li><a href='/blog/archive/year2017.html'>'17</a></li><li><a href='/blog/tag/boston.html'>boston</a></li><li><a href='/blog/tag/cog.html'>cog</a></li><li><a href='/blog/tags.html'><i>all tags</i></a></li><li><a href='#' class='thisdate'>this date</a></li><li><a href='/blog/archive/all.html'><b><i>everything!</i></b></a></li></ul></nav></li></ul></aside><footer id='footer'><p class='sitetools'><span class=\"othermode-switch\"><span class=\"btn dark\">Dark</span><span class=\"btn light\">Light</span></span> <a href='/blog/202004/please_report_bugs_in_this_site.html'>                Something wrong?            </a></p><p class='copyright'><a rel='license' href='/site/legal.html'>                    &#xa9; Copyright                                            2004&ndash;2021,                                        Ned Batchelder                </a></p></footer><header id='logo'><a href='/' aria-hidden='true' tabindex='-1'>&nbsp;</a></header></body></html>",
  "embeddings": []
}
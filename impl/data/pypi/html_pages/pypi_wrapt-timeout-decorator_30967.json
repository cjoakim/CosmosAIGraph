{
  "libtype": "pypi",
  "libname": "wrapt-timeout-decorator",
  "url": "https://pypi.org/project/wrapt-timeout-decorator/",
  "html": "<!DOCTYPE html><html lang=\"en\" dir=\"ltr\">  <head>    <meta charset=\"utf-8\">    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">    <meta name=\"defaultLanguage\" content=\"en\">    <meta name=\"availableLanguages\" content=\"en, es, fr, ja, pt_BR, uk, el, de, zh_Hans, zh_Hant, ru, he, eo\">    <title>wrapt-timeout-decorator \u00b7 PyPI</title>    <meta name=\"description\" content=\"The better timout decorator\">    <link rel=\"stylesheet\" href=\"/static/css/warehouse-ltr.99b3104d.css\">    <link rel=\"stylesheet\" href=\"/static/css/fontawesome.b50b476c.css\">    <link rel=\"stylesheet\" href=\"https://fonts.googleapis.com/css?family=Source+Sans+3:400,400italic,600,600italic,700,700italic%7CSource+Code+Pro:500\">    <noscript>      <link rel=\"stylesheet\" href=\"/static/css/noscript.0673c9ea.css\">    </noscript>    <link rel=\"icon\" href=\"/static/images/favicon.35549fe8.ico\" type=\"image/x-icon\">    <link rel=\"alternate\" type=\"application/rss+xml\" title=\"RSS: 40 latest updates\" href=\"/rss/updates.xml\">    <link rel=\"alternate\" type=\"application/rss+xml\" title=\"RSS: 40 newest packages\" href=\"/rss/packages.xml\"><link rel=\"alternate\" type=\"application/rss+xml\" title=\"RSS: latest releases for wrapt-timeout-decorator\" href=\"/rss/project/wrapt-timeout-decorator/releases.xml\">    <link rel=\"canonical\" href=\"https://pypi.org/project/wrapt-timeout-decorator/\">    <meta property=\"og:url\" content=\"https://pypi.org/project/wrapt-timeout-decorator/\">    <meta property=\"og:site_name\" content=\"PyPI\">    <meta property=\"og:type\" content=\"website\">    <meta property=\"og:image\" content=\"https://pypi.org/static/images/twitter.abaf4b19.webp\">    <meta property=\"og:title\" content=\"wrapt-timeout-decorator\">    <meta property=\"og:description\" content=\"The better timout decorator\">    <link rel=\"search\" type=\"application/opensearchdescription+xml\" title=\"PyPI\" href=\"/opensearch.xml\">    <script asyncdata-ga-id=\"UA-55961911-1\"data-ga4-id=\"G-RW7D75DF8V\"            src=\"/static/js/warehouse.dd4295c4.js\">    </script><script>MathJax = {  tex: {    inlineMath: [['$', '$'], ['\\\\(', '\\\\)']]  },};</script><script async  src=\"https://cdn.jsdelivr.net/npm/mathjax@3.2.2/es5/tex-svg.js\"  integrity=\"sha256-1CldwzdEg2k1wTmf7s5RWVd7NMXI/7nxxjJM2C4DqII=\"  crossorigin=\"anonymous\"></script><script async src=\"https://www.googletagmanager.com/gtag/js?id=UA-55961911-1\"></script><script async src=\"https://www.googletagmanager.com/gtag/js?id=G-RW7D75DF8V\"></script><script defer src=\"https://www.fastly-insights.com/insights.js?k=6a52360a-f306-421e-8ed5-7417d0d4a4e9&dnt=true\"></script>    <script async        src=\"https://media.ethicalads.io/media/client/v1.4.0/ethicalads.min.js\"        integrity=\"sha256-U3hKDidudIaxBDEzwGJApJgPEf2mWk6cfMWghrAa6i0= sha384-UcmsCqcNRSLW/dV3Lo1oCi2/VaurXbib6p4HyUEOeIa/4OpsrnucrugAefzVZJfI sha512-q4t1L4xEjGV2R4hzqCa41P8jrgFUS8xTb8rdNv4FGvw7FpydVj/kkxBJHOiaoxHa8olCcx1Slk9K+3sNbsM4ug==\"        crossorigin=\"anonymous\"    ></script>  </head>  <body data-controller=\"viewport-toggle\">    <!-- Accessibility: this link should always be the first piece of content inside the body-->    <a href=\"#content\" class=\"skip-to-content\">Skip to main content</a>    <button type=\"button\" class=\"button button--primary button--switch-to-mobile hidden\" data-viewport-toggle-target=\"switchToMobile\" data-action=\"viewport-toggle#switchToMobile\">Switch to mobile version    </button>    <div id=\"sticky-notifications\" class=\"stick-to-top js-stick-to-top\">      <!-- Add browser warning. Will show for ie9 and below -->      <!--[if IE]>      <div class=\"notification-bar notification-bar--warning\" role=\"status\">        <span class=\"notification-bar__icon\">          <i class=\"fa fa-exclamation-triangle\" aria-hidden=\"true\"></i>          <span class=\"sr-only\">Warning</span>        </span>        <span class=\"notification-bar__message\">You are using an unsupported browser, upgrade to a newer version.</span>      </div>      <![endif]-->      <noscript>      <div class=\"notification-bar notification-bar--warning\" role=\"status\">        <span class=\"notification-bar__icon\">          <i class=\"fa fa-exclamation-triangle\" aria-hidden=\"true\"></i>          <span class=\"sr-only\">Warning</span>        </span>        <span class=\"notification-bar__message\">Some features may not work without JavaScript. Please try enabling it if you encounter problems.</span>      </div>      </noscript><div data-html-include=\"/_includes/notification-banners/\"></div>    </div><div data-html-include=\"/_includes/flash-messages/\"></div><div data-html-include=\"/_includes/session-notifications/\"></div>    <header class=\"site-header \">      <div class=\"site-container\">        <div class=\"split-layout\">          <div class=\"split-layout\">            <div>              <a class=\"site-header__logo\" href=\"/\">                <img alt=\"PyPI\" src=\"/static/images/logo-small.2a411bc6.svg\">              </a>            </div>            <form class=\"search-form search-form--primary\" action=\"/search/\" role=\"search\">              <label for=\"search\" class=\"sr-only\">Search PyPI</label>              <input id=\"search\" class=\"search-form__search\" type=\"text\" name=\"q\" placeholder=\"Search projects\" value=\"\" autocomplete=\"off\" autocapitalize=\"off\" spellcheck=\"false\" data-controller=\"search-focus\" data-action=\"keydown@window->search-focus#focusSearchField\" data-search-focus-target=\"searchField\">              <button type=\"submit\" class=\"search-form__button\">                <i class=\"fa fa-search\" aria-hidden=\"true\"></i>                <span class=\"sr-only\">Search</span>              </button>            </form>          </div><div data-html-include=\"/_includes/current-user-indicator/\">            <div id=\"user-indicator\" class=\"horizontal-menu horizontal-menu--light horizontal-menu--tall\">  <nav class=\"horizontal-menu horizontal-menu--light horizontal-menu--tall hide-on-tablet\" aria-label=\"Main navigation\">    <ul>      <li class=\"horizontal-menu__item\"><a href=\"/help/\" class=\"horizontal-menu__link\">Help</a></li>      <li class=\"horizontal-menu__item\"><a href=\"/sponsors/\" class=\"horizontal-menu__link\">Sponsors</a></li>      <li class=\"horizontal-menu__item\"><a href=\"/account/login/\" class=\"horizontal-menu__link\">Log in</a></li>      <li class=\"horizontal-menu__item\"><a href=\"/account/register/\" class=\"horizontal-menu__link\">Register</a></li>    </ul>  </nav>  <nav class=\"dropdown dropdown--on-menu hidden show-on-tablet\" aria-label=\"Main navigation\">    <button type=\"button\" class=\"horizontal-menu__link dropdown__trigger\" aria-haspopup=\"true\" aria-expanded=\"false\" aria-label=\"View menu\">Menu      <span class=\"dropdown__trigger-caret\">        <i class=\"fa fa-caret-down\" aria-hidden=\"true\"></i>      </span>    </button>    <ul class=\"dropdown__content\" aria-hidden=\"true\" aria-label=\"Main menu\">      <li><a class=\"dropdown__link\" href=\"/help/\">Help</a></li>      <li><a class=\"dropdown__link\" href=\"/sponsors/\">Sponsors</a></li>      <li><a class=\"dropdown__link\" href=\"/account/login/\">Log in</a></li>      <li><a class=\"dropdown__link\" href=\"/account/register/\">Register</a></li>    </ul>  </nav></div></div>        </div>      </div>    </header>    <div class=\"mobile-search\">      <form class=\"search-form search-form--fullwidth\" action=\"/search/\" role=\"search\">        <label for=\"mobile-search\" class=\"sr-only\">Search PyPI</label>        <input id=\"mobile-search\" class=\"search-form__search\" type=\"text\" name=\"q\" placeholder=\"Search projects\" value=\"\" autocomplete=\"off\" autocapitalize=\"off\" spellcheck=\"false\">                <button type=\"submit\" class=\"search-form__button\">          <i class=\"fa fa-search\" aria-hidden=\"true\"></i>          <span class=\"sr-only\">Search</span>        </button>      </form>    </div>    <main id=\"content\"><div class=\"hidden\"  data-controller=\"github-repo-stats\"  data-github-repo-stats-github-repo-info-outlet=\".github-repo-info\"  data-github-repo-stats-url-value=\"https://api.github.com/repos/bitranox/wrapt_timeout_decorator\"  data-github-repo-stats-issue-url-value=\"https://api.github.com/search/issues?q=repo:bitranox/wrapt_timeout_decorator+type:issue+state:open&amp;per_page=1\"></div><div class=\"banner\">  <div class=\"package-header\">    <div class=\"package-header__left\">      <h1 class=\"package-header__name\">        wrapt-timeout-decorator 1.5.1      </h1>      <div data-controller=\"clipboard\">        <p class=\"package-header__pip-instructions\">          <span id=\"pip-command\" data-clipboard-target=\"source\">pip install wrapt-timeout-decorator</span>          <button type=\"button\" class=\"copy-tooltip copy-tooltip-s\" data-action=\"clipboard#copy\" data-clipboard-target=\"tooltip\" data-clipboard-tooltip-value=\"Copy to clipboard\">            <i class=\"fa fa-copy\" aria-hidden=\"true\"></i>            <span class=\"sr-only\">Copy PIP instructions</span>          </button>        </p>      </div>    </div>    <div class=\"package-header__right\">      <a class=\"status-badge status-badge--good\" href=\"/project/wrapt-timeout-decorator/\">        <span>Latest version</span>      </a>      <p class=\"package-header__date\">Released: <time datetime=\"2024-02-28T21:56:40+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Feb 28, 2024</time>      </p>    </div>  </div></div><div class=\"horizontal-section horizontal-section--grey horizontal-section--thin\">  <div class=\"site-container\"><div data-html-include=\"/_includes/administer-project-include/wrapt-timeout-decorator\"></div>    <div class=\"split-layout split-layout--middle package-description\">      <p class=\"package-description__summary\">The better timout decorator</p><div data-html-include=\"/_includes/edit-project-button/wrapt-timeout-decorator\"></div>    </div>  </div></div><div data-controller=\"project-tabs\">  <div class=\"tabs-container\">    <div class=\"vertical-tabs\">      <div class=\"vertical-tabs__tabs\">        <div class=\"sidebar-section\">          <h3 class=\"sidebar-section__title\">Navigation</h3>          <nav aria-label=\"Navigation for wrapt-timeout-decorator\">            <ul class=\"vertical-tabs__list\" role=\"tablist\">              <li role=\"tab\">                <a id=\"description-tab\" href=\"#description\" data-project-tabs-target=\"tab\" data-action=\"project-tabs#onTabClick\" class=\"vertical-tabs__tab vertical-tabs__tab--with-icon vertical-tabs__tab--is-active\" aria-selected=\"true\" aria-label=\"Project description. Focus will be moved to the description.\">                  <i class=\"fa fa-align-left\" aria-hidden=\"true\"></i>Project description                </a>              </li>              <li role=\"tab\">                <a id=\"history-tab\" href=\"#history\" data-project-tabs-target=\"tab\" data-action=\"project-tabs#onTabClick\" class=\"vertical-tabs__tab vertical-tabs__tab--with-icon\" aria-label=\"Release history. Focus will be moved to the history panel.\">                  <i class=\"fa fa-history\" aria-hidden=\"true\"></i>Release history                </a>              </li>              <li role=\"tab\">                <a id=\"files-tab\" href=\"#files\" data-project-tabs-target=\"tab\" data-action=\"project-tabs#onTabClick\" class=\"vertical-tabs__tab vertical-tabs__tab--with-icon\" aria-label=\"Download files. Focus will be moved to the project files.\">                  <i class=\"fa fa-download\" aria-hidden=\"true\"></i>Download files                </a>              </li>            </ul>          </nav>        </div><div class=\"sidebar-section\">  <h3 class=\"sidebar-section__title\">Project links</h3>  <ul class=\"vertical-tabs__list\">    <li>      <a class=\"vertical-tabs__tab vertical-tabs__tab--with-icon vertical-tabs__tab--condensed\" href=\"https://github.com/bitranox/wrapt_timeout_decorator/blob/master/CHANGES.rst\" rel=\"nofollow\">        <i class=\"fas fa-scroll\" aria-hidden=\"true\"></i>Changelog      </a>    </li>    <li>      <a class=\"vertical-tabs__tab vertical-tabs__tab--with-icon vertical-tabs__tab--condensed\" href=\"https://github.com/bitranox/wrapt_timeout_decorator/blob/master/README.rst\" rel=\"nofollow\">        <i class=\"fas fa-book\" aria-hidden=\"true\"></i>Documentation      </a>    </li>    <li>      <a class=\"vertical-tabs__tab vertical-tabs__tab--with-icon vertical-tabs__tab--condensed\" href=\"https://github.com/bitranox/wrapt_timeout_decorator\" rel=\"nofollow\">        <i class=\"fas fa-home\" aria-hidden=\"true\"></i>Homepage      </a>    </li>    <li>      <a class=\"vertical-tabs__tab vertical-tabs__tab--with-icon vertical-tabs__tab--condensed\" href=\"https://github.com/bitranox/wrapt_timeout_decorator.git\" rel=\"nofollow\">        <i class=\"fab fa-github\" aria-hidden=\"true\"></i>Repository      </a>    </li>  </ul></div><div class=\"sidebar-section\">  <h3 class=\"sidebar-section__title\">Statistics</h3>  <div class=\"hidden github-repo-info\" data-controller=\"github-repo-info\">GitHub statistics:    <ul class=\"vertical-tabs__list\">      <li>        <a class=\"vertical-tabs__tab vertical-tabs__tab--with-icon vertical-tabs__tab--condensed\"           data-github-repo-info-target=\"stargazersUrl\" rel=\"noopener\">          <i class=\"fa fa-star\" aria-hidden=\"true\"></i>          <strong>Stars:</strong>          <span data-github-repo-info-target=\"stargazersCount\"></span>        </a>      </li>      <li>        <a class=\"vertical-tabs__tab vertical-tabs__tab--with-icon vertical-tabs__tab--condensed\"           data-github-repo-info-target=\"forksUrl\" rel=\"noopener\">          <i class=\"fa fa-code-branch\" aria-hidden=\"true\"></i>          <strong>Forks:</strong>          <span data-github-repo-info-target=\"forksCount\"></span>        </a>      </li>      <li>        <a class=\"vertical-tabs__tab vertical-tabs__tab--with-icon vertical-tabs__tab--condensed\"           data-github-repo-info-target=\"openIssuesUrl\" rel=\"noopener\">          <i class=\"fa fa-exclamation-circle\" aria-hidden=\"true\"></i>          <strong>Open issues:</strong>          <span data-github-repo-info-target=\"openIssuesCount\"></span>        </a>      </li>      <li>        <a class=\"vertical-tabs__tab vertical-tabs__tab--with-icon vertical-tabs__tab--condensed\"           data-github-repo-info-target=\"openPRsUrl\" rel=\"noopener\">          <i class=\"fa fa-code-pull-request\" aria-hidden=\"true\"></i>          <strong>Open PRs:</strong>          <span data-github-repo-info-target=\"openPRsCount\"></span>        </a>      </li>    </ul>  </div>  <p>View statistics for this project via <a href=\"https://libraries.io/pypi/wrapt-timeout-decorator\" title=\"External link\" target=\"_blank\" rel=\"noopener\">Libraries.io</a>, or by using <a href=\"https://packaging.python.org/guides/analyzing-pypi-package-downloads/\" target=\"_blank\" rel=\"noopener\">our public dataset on Google BigQuery</a>  </p></div><div class=\"sidebar-section\">  <h3 class=\"sidebar-section__title\">Meta</h3>  <p><strong>License:</strong> MIT License (MIT)</p>    <p><strong>Author:</strong> <a href=\"mailto:bitranox@gmail.com\">Robert Nowotny</a></p>  <p>    <strong>Requires:</strong> Python &gt;=3.8.0  </p></div><div class=\"sidebar-section\">    <h3 class=\"sidebar-section__title\">Maintainers</h3>      <span class=\"sidebar-section__maintainer\">        <a href=\"/user/bitranox/\" aria-label=\"bitranox\">          <span class=\"sidebar-section__user-gravatar\">            <img src=\"https://pypi-camo.freetls.fastly.net/334df8f1d370c6293902d0f52b111fb94791ff28/68747470733a2f2f7365637572652e67726176617461722e636f6d2f6176617461722f37623334666533663933623263386366343262643666363337303862663134393f73697a653d3530\" height=\"50\" width=\"50\" alt=\"Avatar for bitranox from gravatar.com\" title=\"Avatar for bitranox from gravatar.com\">          </span>          <span class=\"sidebar-section__user-gravatar-text\">            bitranox          </span>        </a>      </span></div><div class=\"sidebar-section\">  <h3 class=\"sidebar-section__title\">Classifiers</h3>  <ul class=\"sidebar-section__classifiers\">    <li>      <strong>Development Status</strong>      <ul>        <li>          <a href=\"/search/?c=Development+Status+%3A%3A+5+-+Production%2FStable\">            5 - Production/Stable          </a>        </li>      </ul>    </li>    <li>      <strong>Intended Audience</strong>      <ul>        <li>          <a href=\"/search/?c=Intended+Audience+%3A%3A+Developers\">            Developers          </a>        </li>      </ul>    </li>    <li>      <strong>License</strong>      <ul>        <li>          <a href=\"/search/?c=License+%3A%3A+OSI+Approved+%3A%3A+MIT+License\">            OSI Approved :: MIT License          </a>        </li>      </ul>    </li>    <li>      <strong>Natural Language</strong>      <ul>        <li>          <a href=\"/search/?c=Natural+Language+%3A%3A+English\">            English          </a>        </li>      </ul>    </li>    <li>      <strong>Operating System</strong>      <ul>        <li>          <a href=\"/search/?c=Operating+System+%3A%3A+OS+Independent\">            OS Independent          </a>        </li>      </ul>    </li>    <li>      <strong>Programming Language</strong>      <ul>        <li>          <a href=\"/search/?c=Programming+Language+%3A%3A+Python\">            Python          </a>        </li>      </ul>    </li>    <li>      <strong>Topic</strong>      <ul>        <li>          <a href=\"/search/?c=Topic+%3A%3A+Software+Development+%3A%3A+Libraries+%3A%3A+Python+Modules\">            Software Development :: Libraries :: Python Modules          </a>        </li>      </ul>    </li>  </ul></div><div class=\"sidebar-section\" data-ea-publisher=\"psf\" data-ea-type=\"psf\" data-ea-keywords=\"pypi-sidebar\"></div>      </div>      <div class=\"vertical-tabs__panel\">        <!-- mobile menu -->        <nav aria-label=\"Navigation for wrapt-timeout-decorator\">          <ul class=\"vertical-tabs__list\" role=\"tablist\">            <li role=\"tab\">              <a id=\"mobile-description-tab\" href=\"#description\" data-project-tabs-target=\"mobileTab\" data-action=\"project-tabs#onTabClick\" class=\"vertical-tabs__tab vertical-tabs__tab--with-icon vertical-tabs__tab--mobile vertical-tabs__tab--no-top-border vertical-tabs__tab--is-active\" aria-selected=\"true\" aria-label=\"Project description. Focus will be moved to the description.\">                <i class=\"fa fa-align-left\" aria-hidden=\"true\"></i>Project description              </a>            </li>            <li role=\"tab\">              <a id=\"mobile-data-tab\" href=\"#data\" data-project-tabs-target=\"mobileTab\" data-action=\"project-tabs#onTabClick\" class=\"vertical-tabs__tab vertical-tabs__tab--with-icon vertical-tabs__tab--mobile\" aria-label=\"Project details. Focus will be moved to the project details.\">                <i class=\"fa fa-info-circle\" aria-hidden=\"true\"></i>Project details              </a>            </li>            <li role=\"tab\">              <a id=\"mobile-history-tab\" href=\"#history\" data-project-tabs-target=\"mobileTab\" data-action=\"project-tabs#onTabClick\" class=\"vertical-tabs__tab vertical-tabs__tab--with-icon vertical-tabs__tab--mobile\" aria-label=\"Release history. Focus will be moved to the history panel.\">              <i class=\"fa fa-history\" aria-hidden=\"true\"></i>Release history            </a>            </li>            <li role=\"tab\">              <a id=\"mobile-files-tab\" href=\"#files\" data-project-tabs-target=\"mobileTab\" data-action=\"project-tabs#onTabClick\" class=\"vertical-tabs__tab vertical-tabs__tab--with-icon vertical-tabs__tab--mobile\" aria-label=\"Download files. Focus will be moved to the project files.\">                <i class=\"fa fa-download\" aria-hidden=\"true\"></i>Download files              </a>            </li>          </ul>        </nav>        <div id=\"description\" data-project-tabs-target=\"content\" class=\"vertical-tabs__content\" role=\"tabpanel\" aria-labelledby=\"description-tab mobile-description-tab\" tabindex=\"-1\">          <h2 class=\"page-title\">Project description</h2>          <div class=\"project-description\">            <section id=wrapt-timeout-decorator><h2>wrapt_timeout_decorator</h2><p>Version v1.5.1 as of 2024-02-28 see <a href=#changelog rel=nofollow>Changelog</a></p><p><a href=\"https://github.com/bitranox/wrapt_timeout_decorator/actions/workflows/python-package.yml\" rel=nofollow><img alt=build_badge src=\"https://pypi-camo.freetls.fastly.net/7bcda44b4085424df7ffa876c9cd704ef47edc16/68747470733a2f2f6769746875622e636f6d2f62697472616e6f782f77726170745f74696d656f75745f6465636f7261746f722f616374696f6e732f776f726b666c6f77732f707974686f6e2d7061636b6167652e796d6c2f62616467652e737667\"></a> <a href=\"https://github.com//bitranox/wrapt_timeout_decorator/actions/workflows/codeql-analysis.yml\" rel=nofollow><img alt=codeql src=\"https://pypi-camo.freetls.fastly.net/d3f0c4d98220396d6a2b6c8311d4dd790774cfa2/68747470733a2f2f6769746875622e636f6d2f62697472616e6f782f77726170745f74696d656f75745f6465636f7261746f722f616374696f6e732f776f726b666c6f77732f636f6465716c2d616e616c797369732e796d6c2f62616467652e7376673f6576656e743d70757368\"></a> <a href=\"http://en.wikipedia.org/wiki/MIT_License\" rel=nofollow><img alt=license src=\"https://pypi-camo.freetls.fastly.net/550adc74c61cfd09c0fc5610e2e5f319e5e27fb3/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6963656e73652f776562636f6d6963732f707977696e652e737667\"></a> <a href=\"https://mybinder.org/v2/gh/bitranox/wrapt_timeout_decorator/master?filepath=wrapt_timeout_decorator.ipynb\" rel=nofollow><img alt=jupyter src=\"https://pypi-camo.freetls.fastly.net/85e91bbb928104e4ce317951541520c6b9c170e1/68747470733a2f2f6d7962696e6465722e6f72672f62616467655f6c6f676f2e737667\"></a> <a href=\"https://badge.fury.io/py/wrapt_timeout_decorator\" rel=nofollow><img alt=pypi src=\"https://pypi-camo.freetls.fastly.net/9adf80ba52b7e20f8ac13c2f5bbb9b570a7e7374/68747470733a2f2f696d672e736869656c64732e696f2f707970692f7374617475732f77726170742d74696d656f75742d6465636f7261746f723f6c6162656c3d507950492532305061636b616765\"></a><a href=\"https://pypi.org/project/wrapt-timeout-decorator/\" rel=nofollow><img alt=\"PyPI - Downloads\" src=\"https://pypi-camo.freetls.fastly.net/e1c180af213fac0f1b8ffee012ca3c9465ee8eb7/68747470733a2f2f696d672e736869656c64732e696f2f707970692f646d2f77726170742d74696d656f75742d6465636f7261746f72\"></a> <a href=\"https://github.com/psf/black\" rel=nofollow><img alt=black src=\"https://pypi-camo.freetls.fastly.net/fbfdc7754183ecf079bc71ddeabaf88f6cbc5c00/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f636f64652532307374796c652d626c61636b2d3030303030302e737667\"></a> <a href=\"https://codecov.io/gh/bitranox/wrapt_timeout_decorator\" rel=nofollow><img alt=codecov src=\"https://pypi-camo.freetls.fastly.net/c69b0f524374eddabd4f75d35a4caa1a06e06b7c/68747470733a2f2f636f6465636f762e696f2f67682f62697472616e6f782f77726170745f74696d656f75745f6465636f7261746f722f67726170682f62616467652e737667\"></a> <a href=\"https://codeclimate.com/github/bitranox/wrapt_timeout_decorator/maintainability\" rel=nofollow><img alt=Maintainability src=\"https://pypi-camo.freetls.fastly.net/d48879868c373f0bdcf05cc186ecef1d38750c52/68747470733a2f2f696d672e736869656c64732e696f2f636f6465636c696d6174652f6d61696e7461696e6162696c6974792d70657263656e746167652f62697472616e6f782f77726170745f74696d656f75745f6465636f7261746f723f6c6162656c3d43432532306d61696e7461696e6162696c697479\"></a> <a href=\"https://codeclimate.com/github/bitranox/wrapt_timeout_decorator/maintainability\" rel=nofollow><img alt=Maintainability src=\"https://pypi-camo.freetls.fastly.net/41895d56d00ec03140a41512c14ee02cc526acda/68747470733a2f2f696d672e736869656c64732e696f2f636f6465636c696d6174652f6973737565732f62697472616e6f782f77726170745f74696d656f75745f6465636f7261746f723f6c6162656c3d4343253230697373756573\"></a> <a href=\"https://codeclimate.com/github/bitranox/wrapt_timeout_decorator/test_coverage\" rel=nofollow><img alt=\"Code Coverage\" src=\"https://pypi-camo.freetls.fastly.net/d174ad1f9bd2dc6e29fcc7de3a5a426d25f9fb4c/68747470733a2f2f696d672e736869656c64732e696f2f636f6465636c696d6174652f636f7665726167652f62697472616e6f782f77726170745f74696d656f75745f6465636f7261746f723f6c6162656c3d4343253230636f766572616765\"></a> <a href=\"https://snyk.io/test/github/bitranox/wrapt_timeout_decorator\" rel=nofollow><img alt=snyk src=\"https://pypi-camo.freetls.fastly.net/d161be94d7d15c1f1ae22f182e87f029ba515fff/68747470733a2f2f736e796b2e696f2f746573742f6769746875622f62697472616e6f782f77726170745f74696d656f75745f6465636f7261746f722f62616467652e737667\"></a></p><p>There are several timeout decorators available, but the one mentioned herefocuses on ensuring correctness when used with classes, methods, class methods,static methods, etc. It also preserves traceback information for PyCharm debugging.</p><p>The timeout can be dynamically adjusted, calculated from other parameters or methods accessible via an optional eval function.</p><p>Two timeout strategies have been implemented:one using \u201cSignals\u201d and the other using \u201cSubprocess\u201d.</p><section id=signals-strategy><h3>Signals Strategy</h3><p>The \u201cSignals\u201d strategy (for POSIX Systems) is elegant and efficient,but it has some important caveats which should be reviewedin the <a href=#considerations-using-signals rel=nofollow>Considerations using Signals</a> section.</p></section><section id=subprocess-strategy-the-default><h3>Subprocess Strategy (the default)</h3><p>The utilization of subprocesses serves as the default approach for executing timeouts:</p><ul class=simple><li><dl class=simple><dt><strong>Windows Compatibility</strong>:</dt><dd><p>Given the absence of signal support,subprocesses become the sole method for implementing timeouts on Windows,automatically applied to accommodate the platform\u2019s limitations.On Windows the only available startmethod for subprocesses is <span class=\"docutils literal\">spawn</span></p></dd></dl></li><li><dl class=simple><dt><strong>POSIX Systems</strong>:</dt><dd><p>On POSIX-compliant systems, signals cannot be employed withinsubthreads, necessitating the use of subprocesses in these contexts as well.On POSIX the available startmethods for subprocesses are <span class=\"docutils literal\">fork</span>, <span class=\"docutils literal\">forkserver</span>, <span class=\"docutils literal\">spawn</span></p></dd></dl></li></ul><p>To ensure compatibility and functionality across subprocesses,it\u2019s essential that as many object types as possible are pickleable.To this end, the <span class=\"docutils literal\">dill</span> library is preferred over Python\u2019s standard <span class=\"docutils literal\">pickle</span> module,and <span class=\"docutils literal\">multiprocess</span> is chosen instead of <span class=\"docutils literal\">multiprocessing</span>.<span class=\"docutils literal\">dill</span> enhances the pickle module\u2019s capabilities, extending support forserialization and deserialization of a broader array of Python object types.</p><p>Subprocess communication is facilitated through <span class=\"docutils literal\">multiprocess.pipe</span> rather than <span class=\"docutils literal\">queue</span>.This choice not only boosts performance but also enhances compatibility,potentially offering better support for environments like Amazon AWS.</p><p>Subprocesses can be initiated using various methods,including \u2018fork\u2019, \u2018forkserver\u2019, and \u2018spawn\u2019.For detailed information on these methods and their implications,please refer to Section <a href=#considerations-using-subprocesses rel=nofollow>Considerations using Subprocesses</a> of this manual.</p><hr class=docutils><p>automated tests, Github Actions, Documentation, Badges, etc. are managed with <a href=\"https://github.com/bitranox/PizzaCutter\" rel=nofollow>PizzaCutter</a> (cookiecutter on steroids)</p><p>Python version required: 3.8.0 or newer</p><p>tested on recent linux with python 3.8, 3.9, 3.10, 3.11, 3.12, pypy-3.9, pypy-3.10 - architectures: amd64</p><p><a href=\"https://codeclimate.com/github/bitranox/wrapt_timeout_decorator/test_coverage\" rel=nofollow>100% code coverage</a>, flake8 style checking ,mypy static type checking ,tested under <a href=\"https://github.com/bitranox/wrapt_timeout_decorator/actions/workflows/python-package.yml\" rel=nofollow>Linux, macOS, Windows</a>, automatic daily builds and monitoring</p><hr class=docutils><ul class=simple><li><p><a href=#try-it-online rel=nofollow>Try it Online</a></li><li><p><a href=#usage rel=nofollow>Usage</a></li><li><p><a href=#usage-from-commandline rel=nofollow>Usage from Commandline</a></li><li><p><a href=#installation-and-upgrade rel=nofollow>Installation and Upgrade</a></li><li><p><a href=#requirements rel=nofollow>Requirements</a></li><li><p><a href=#acknowledgements rel=nofollow>Acknowledgements</a></li><li><p><a href=#contribute rel=nofollow>Contribute</a></li><li><p><a href=\"https://github.com/bitranox/wrapt_timeout_decorator/blob/master/ISSUE_TEMPLATE.md\" rel=nofollow>Report Issues</a></li><li><p><a href=\"https://github.com/bitranox/wrapt_timeout_decorator/blob/master/PULL_REQUEST_TEMPLATE.md\" rel=nofollow>Pull Request</a></li><li><p><a href=\"https://github.com/bitranox/wrapt_timeout_decorator/blob/master/CODE_OF_CONDUCT.md\" rel=nofollow>Code of Conduct</a></li><li><p><a href=#license rel=nofollow>License</a></li><li><p><a href=#changelog rel=nofollow>Changelog</a></li></ul></section><hr class=docutils><section id=try-it-online><h3>Try it Online</h3><p>You might try it right away in Jupyter Notebook by using the \u201claunch binder\u201d badge, or click <a href=\"https://mybinder.org/v2/gh/{{rst_include.repository_slug}}/master?filepath=wrapt_timeout_decorator.ipynb\" rel=nofollow>here</a></p></section><section id=usage><h3>Usage</h3><ul class=simple><li><p><a href=#basic-usage rel=nofollow>Basic Usage</a></li><li><p><a href=#general-recommendations rel=nofollow>General Recommendations</a></li><li><dl class=simple><dt><a href=#use-with-windows rel=nofollow>use with Windows</a></dt><dd><ul><li><p><a href=#quick-guide-for-the-eager rel=nofollow>Quick Guide for the Eager</a></li><li><p><a href=#in-depth-explanation-for-the-curious rel=nofollow>In-Depth Explanation for the Curious</a></li><li><p><a href=#windows-compatibility-issue rel=nofollow>Windows Compatibility Issue</a></li><li><p><a href=#timing-considerations rel=nofollow>Timing Considerations</a></li></ul></dd></dl></li><li><p><a href=#considerations-using-signals rel=nofollow>Considerations using Signals</a></li><li><dl class=simple><dt><a href=#considerations-using-subprocesses rel=nofollow>Considerations using Subprocesses</a></dt><dd><ul><li><p><a href=#overview rel=nofollow>Overview</a></li><li><p><a href=#initialization rel=nofollow>Initialization</a></li><li><p><a href=#process-execution-and-communication rel=nofollow>Process Execution and Communication</a></li><li><p><a href=#subprocess-start-methods rel=nofollow>Subprocess Start Methods</a></li><li><p><a href=#choosing-the-right-start-method rel=nofollow>Choosing the Right Start Method</a></li><li><p><a href=#setting-the-start-method rel=nofollow>Setting the Start Method</a></li><li><p><a href=#special-considerations-for-uvicorn-fastapi-asyncio rel=nofollow>Special Considerations for Uvicorn, FastAPI, asyncio</a></li></ul></dd></dl></li><li><p><a href=#handling-nested-timeouts rel=nofollow>Handling Nested Timeouts</a></li><li><p><a href=#custom-timeout-exception rel=nofollow>Custom Timeout Exception</a></li><li><p><a href=#parameters rel=nofollow>Parameters</a></li><li><p><a href=#override-parameters rel=nofollow>Override Parameters</a></li><li><p><a href=#multithreading rel=nofollow>Multithreading</a></li><li><p><a href=#subprocess-monitoring rel=nofollow>Subprocess Monitoring</a></li><li><p><a href=#use-as-function-not-as-decorator rel=nofollow>use as function not as decorator</a></li><li><p><a href=#dynamic-timeout-value-adjustment-with-eval rel=nofollow>Dynamic Timeout Value Adjustment with eval</a></li><li><dl class=simple><dt><a href=#tools rel=nofollow>Tools</a></dt><dd><ul><li><p><a href=#detect-pickle-errors rel=nofollow>detect pickle errors</a></li><li><p><a href=#set-subprocess-starting-method rel=nofollow>set_subprocess_starting_method</a></li></ul></dd></dl></li><li><p><a href=#logging-challenges-with-subprocesses rel=nofollow>Logging Challenges with Subprocesses</a></li><li><p><a href=#hard-timeout rel=nofollow>hard timeout</a></li><li><p><a href=#understanding-timeout-durations-across-platforms rel=nofollow>Understanding Timeout Durations Across Platforms</a></li><li><p><a href=#mypy-testing rel=nofollow>MYPY Testing</a></li></ul></section><section id=basic-usage><h3>Basic Usage</h3><pre><code><span class=kn>import</span> <span class=nn>time</span><span class=w></span><span class=kn>from</span> <span class=nn>wrapt_timeout_decorator</span> <span class=kn>import</span> <span class=o>*</span><span class=w></span><span class=nd>@timeout</span><span class=p>(</span><span class=mi>5</span><span class=p>)</span><span class=w></span><span class=k>def</span> <span class=nf>mytest</span><span class=p>(</span><span class=n>message</span><span class=p>):</span><span class=w></span>    <span class=c1># this example does NOT work on windows, please check the section</span><span class=w></span>    <span class=c1># \"use with Windows\" in the README.rst</span><span class=w></span>    <span class=nb>print</span><span class=p>(</span><span class=n>message</span><span class=p>)</span><span class=w></span>    <span class=k>for</span> <span class=n>i</span> <span class=ow>in</span> <span class=nb>range</span><span class=p>(</span><span class=mi>1</span><span class=p>,</span><span class=mi>10</span><span class=p>):</span><span class=w></span>        <span class=n>time</span><span class=o>.</span><span class=n>sleep</span><span class=p>(</span><span class=mi>1</span><span class=p>)</span><span class=w></span>        <span class=nb>print</span><span class=p>(</span><span class=s1>'</span><span class=si>{}</span><span class=s1> seconds have passed'</span><span class=o>.</span><span class=n>format</span><span class=p>(</span><span class=n>i</span><span class=p>))</span><span class=w></span><span class=k>if</span> <span class=vm>__name__</span> <span class=o>==</span> <span class=s1>'__main__'</span><span class=p>:</span><span class=w></span>    <span class=n>mytest</span><span class=p>(</span><span class=s1>'starting'</span><span class=p>)</span></code></pre></section><section id=general-recommendations><h3>General Recommendations</h3><p>It\u2019s recommended to minimize the utilization of timeouts in your programming, reserving them for truly essential instances.</p><p>Timers should be applied at an appropriate level of detail, tailored specifically to the needs of your application.This precision aids in circumventing unwanted outcomes, such as the mishandling of exceptions by unrelated code sectionsor complications with entities that cannot be pickled.</p><p>Conversely, it\u2019s prudent to refrain from embedding a Timeout Decorator within loops that execute multiple times.Such an approach can induce notable delays, especially on Windows systems, owing to the additional burden of initiating subprocesses.</p><p>Where possible, opt for the timeout features natively available in the functions and libraries at your disposal.These inherent capabilities are often adequate for the majority of use cases.The implementation of a Timeout Decorator is best reserved as a measure of last resort,subsequent to the exhaustive consideration of alternative strategies.</p><p>Additionally, be cognizant of the fact that the behavior and efficiency of subprocesses may vary significantly across platforms(Windows versus Linux) and depending on the chosen method for subprocess initiation.Refer to the documentation on <a href=#subprocess-start-methods rel=nofollow>Subprocess Start Methods</a> for further details.</p><blockquote><p>BAD EXAMPLE (Pseudocode) - lets assume the write to the database fails sometimes for unknown reasons, and \u201changs\u201d</p><pre><code><span class=c1># module file_analyzer</span><span class=w></span><span class=kn>import</span> <span class=nn>time</span><span class=w></span><span class=kn>from</span> <span class=nn>wrapt_timeout_decorator</span> <span class=kn>import</span> <span class=o>*</span><span class=w></span><span class=k>def</span> <span class=nf>read_the_file</span><span class=p>(</span><span class=n>filename</span><span class=p>):</span><span class=w></span>    <span class=o>...</span><span class=w></span><span class=k>def</span> <span class=nf>analyze_the_file</span><span class=p>(</span><span class=n>filename</span><span class=p>):</span><span class=w></span>    <span class=o>...</span><span class=w></span><span class=k>def</span> <span class=nf>write_to_database</span><span class=p>(</span><span class=n>file_content</span><span class=p>):</span><span class=w></span>    <span class=o>...</span><span class=w></span><span class=nd>@timeout</span><span class=p>(</span><span class=mi>5</span><span class=p>)</span>  <span class=c1># try to minimize the scope of the timeout</span><span class=w></span><span class=k>def</span> <span class=nf>import_file</span><span class=p>(</span><span class=n>filename</span><span class=p>):</span><span class=w></span>    <span class=n>file_content</span> <span class=o>=</span> <span class=n>read_the_file</span><span class=p>(</span><span class=n>filename</span><span class=p>)</span><span class=w></span>    <span class=n>structured_data</span> <span class=o>=</span> <span class=n>analyze_the_file</span><span class=p>(</span><span class=n>file_content</span><span class=p>)</span><span class=w></span>    <span class=n>write_to_database</span><span class=p>(</span><span class=n>structured_data</span><span class=p>)</span></code></pre><p>BETTER EXAMPLE (Pseudocode)</p><pre><code><span class=c1># module file_analyzer</span><span class=w></span><span class=kn>import</span> <span class=nn>time</span><span class=w></span><span class=kn>from</span> <span class=nn>wrapt_timeout_decorator</span> <span class=kn>import</span> <span class=o>*</span><span class=w></span><span class=k>def</span> <span class=nf>read_the_file</span><span class=p>(</span><span class=n>filename</span><span class=p>):</span><span class=w></span>    <span class=o>...</span><span class=w></span><span class=k>def</span> <span class=nf>analyze_the_file</span><span class=p>(</span><span class=n>filename</span><span class=p>):</span><span class=w></span>    <span class=o>...</span><span class=w></span><span class=nd>@timeout</span><span class=p>(</span><span class=mi>5</span><span class=p>)</span>     <span class=c1># better, because smaller scope</span><span class=w></span><span class=k>def</span> <span class=nf>write_to_database</span><span class=p>(</span><span class=n>file_content</span><span class=p>):</span><span class=w></span>    <span class=o>...</span><span class=w></span><span class=k>def</span> <span class=nf>import_file</span><span class=p>(</span><span class=n>filename</span><span class=p>):</span><span class=w></span>    <span class=n>file_content</span> <span class=o>=</span> <span class=n>read_the_file</span><span class=p>(</span><span class=n>filename</span><span class=p>)</span><span class=w></span>    <span class=n>structured_data</span> <span class=o>=</span> <span class=n>analyze_the_file</span><span class=p>(</span><span class=n>file_content</span><span class=p>)</span><span class=w></span>    <span class=n>write_to_database</span><span class=p>(</span><span class=n>structured_data</span><span class=p>)</span></code></pre></blockquote></section><section id=use-with-windows><h3>use with Windows</h3></section><section id=quick-guide-for-the-eager><h3>Quick Guide for the Eager</h3><p>To bypass complexities, simply place the decorated function within a separate module, rather than in the main script.</p></section><section id=in-depth-explanation-for-the-curious><h3>In-Depth Explanation for the Curious</h3><p>On Windows, due to the absence of native forking support, Python attempts to emulate a forking environment.This emulation involves re-importing the main module under a different name, not as \u2018__main__\u2019.This behavior is part of Python\u2019s multiprocessing efforts to replicate the main process\u2019s environment as closely as possible.Consequently, it\u2019s crucial to protect the entry point of your application with the well-known conditional statement\u201cif __name__ == \u2018__main__\u2019:\u201d.</p><pre><code><span class=kn>import</span> <span class=nn>lib_foo</span><span class=w></span><span class=k>def</span> <span class=nf>some_module</span><span class=p>():</span><span class=w></span>    <span class=n>lib_foo</span><span class=o>.</span><span class=n>function_foo</span><span class=p>()</span><span class=w></span><span class=k>def</span> <span class=nf>main</span><span class=p>():</span><span class=w></span>    <span class=n>some_module</span><span class=p>()</span><span class=w></span><span class=c1># here the subprocess stops loading, because __name__ is NOT '__main__'</span><span class=w></span><span class=k>if</span> <span class=vm>__name__</span> <span class=o>=</span> <span class=s1>'__main__'</span><span class=p>:</span><span class=w></span>    <span class=n>main</span><span class=p>()</span></code></pre></section><section id=windows-compatibility-issue><h3>Windows Compatibility Issue</h3><p>The challenge arises from Windows OS\u2019s lack of support for the \u201cfork\u201d process model, a limitation not present in Unix-based systems.</p><p>Further details can be explored through these resources:</p><ul class=simple><li><p>[Stack Overflow discussion on multiprocessing and <cite>__name__ == \u2018__main__\u2019</cite>](<a href=\"https://stackoverflow.com/questions/45110287/workaround-for-using-name-main-in-python-multiprocessing\" rel=nofollow>https://stackoverflow.com/questions/45110287/workaround-for-using-name-main-in-python-multiprocessing</a>)</li><li><p>[Python\u2019s multiprocessing documentation for Windows](<a href=\"https://docs.python.org/2/library/multiprocessing.html#windows\" rel=nofollow>https://docs.python.org/2/library/multiprocessing.html#windows</a>)</li></ul><p>Due to this, when <cite>main.py</cite> is re-imported under a name different from <cite>\u201c__main__\u201d</cite>, references within decorated classesand functions become invalid. To circumvent this, it\u2019s advisable to house decorated entities in a separate module.Generally, and particularly on Windows, the <cite>main()</cite> function should be streamlined to act merely as an entry point,with the substantive logic residing in modules.Additionally, storing settings or configurations in a distinct file is beneficial for centralized access and to leverage featureslike type hints and auto-completion in your preferred IDE.</p><p>The <cite>dill</cite> serializer, chosen for its broader compatibility, successfully serializes the <cite>__main__</cite> context,enabling objects to be pickled to <cite>\u201c__main__.lib_foo\u201d</cite>, <cite>\u201c__main__.some_module\u201d</cite>, <cite>\u201c__main__.main\u201d</cite>, etc.This overcomes the limitations faced when using <cite>pickle</cite>, which cannot serialize various types including functionswith yields, nested functions, and more.<cite>Dill</cite> enhances functionality by enabling the saving/loading of Python sessions, extraction of source code, and interactive debugging of serialization errors.However, it necessitates that decorated methods and classes not be defined in the <cite>__main__</cite> context but within a module.</p><p>For more insights on serialization with <cite>pickle</cite> or <cite>dill</cite>:- [Stack Overflow discussion on serializing objects in <cite>__main__</cite> with <cite>pickle</cite> or <cite>dill</cite>](<a href=\"https://stackoverflow.com/questions/45616584/serializing-an-object-in-main-with-pickle-or-dill\" rel=nofollow>https://stackoverflow.com/questions/45616584/serializing-an-object-in-main-with-pickle-or-dill</a>)</p></section><section id=timing-considerations><h3>Timing Considerations</h3><p>Given the variable duration of the spawning process (due to re-importing modules),the <a href=#hard-timeout rel=nofollow>hard timeout</a> section provides guidance on configuring the commencement of timeouts.</p><p>An illustration highlights a scenario functional on Linux but problematic on Windows,where the variable <cite>\u201cname\u201d</cite> and the function <cite>\u201csleep\u201d</cite> are not recognized in the spawned process:</p><pre><code><span class=n>main</span><span class=o>.</span><span class=n>py</span><span class=p>:</span><span class=w></span><span class=kn>from</span> <span class=nn>time</span> <span class=kn>import</span> <span class=n>sleep</span><span class=w></span><span class=kn>from</span> <span class=nn>wrapt_timeout_decorator</span> <span class=kn>import</span> <span class=o>*</span><span class=w></span><span class=n>name</span><span class=o>=</span><span class=s2>\"my_var_name\"</span><span class=w></span><span class=nd>@timeout</span><span class=p>(</span><span class=mi>5</span><span class=p>,</span> <span class=n>use_signals</span><span class=o>=</span><span class=kc>False</span><span class=p>)</span><span class=w></span><span class=k>def</span> <span class=nf>mytest</span><span class=p>():</span><span class=w></span>    <span class=c1># this example does NOT work on windows, please check the example below !</span><span class=w></span>    <span class=c1># You need to move this function into a module to be able to run it on windows.</span><span class=w></span>    <span class=nb>print</span><span class=p>(</span><span class=s2>\"Start \"</span><span class=p>,</span> <span class=n>name</span><span class=p>)</span><span class=w></span>    <span class=k>for</span> <span class=n>i</span> <span class=ow>in</span> <span class=nb>range</span><span class=p>(</span><span class=mi>1</span><span class=p>,</span><span class=mi>10</span><span class=p>):</span><span class=w></span>        <span class=n>sleep</span><span class=p>(</span><span class=mi>1</span><span class=p>)</span><span class=w></span>        <span class=nb>print</span><span class=p>(</span><span class=s2>\"</span><span class=si>{}</span><span class=s2> seconds have passed\"</span><span class=o>.</span><span class=n>format</span><span class=p>(</span><span class=n>i</span><span class=p>))</span><span class=w></span>    <span class=k>return</span> <span class=n>i</span><span class=w></span><span class=k>if</span> <span class=vm>__name__</span> <span class=o>==</span> <span class=s1>'__main__'</span><span class=p>:</span><span class=w></span>    <span class=n>mytest</span><span class=p>()</span></code></pre><p>here the same example, which will work on Windows:</p><pre><code><span class=c1># my_program_main.py:</span><span class=w></span><span class=kn>import</span> <span class=nn>lib_test</span><span class=w></span><span class=k>def</span> <span class=nf>main</span><span class=p>():</span><span class=w></span>    <span class=n>lib_test</span><span class=o>.</span><span class=n>mytest</span><span class=p>()</span><span class=w></span><span class=k>if</span> <span class=vm>__name__</span> <span class=o>==</span> <span class=s1>'__main__'</span><span class=p>:</span><span class=w></span>    <span class=n>main</span><span class=p>()</span></code></pre><pre><code><span class=c1># conf_my_program.py:</span><span class=w></span><span class=k>class</span> <span class=nc>ConfMyProgram</span><span class=p>(</span><span class=nb>object</span><span class=p>):</span><span class=w></span>    <span class=k>def</span> <span class=fm>__init__</span><span class=p>(</span><span class=bp>self</span><span class=p>):</span><span class=w></span>        <span class=bp>self</span><span class=o>.</span><span class=n>name</span><span class=p>:</span><span class=nb>str</span> <span class=o>=</span> <span class=s1>'my_var_name'</span><span class=w></span><span class=n>conf_my_program</span> <span class=o>=</span> <span class=n>ConfMyProgram</span><span class=p>()</span></code></pre><pre><code><span class=c1># lib_test.py:</span><span class=w></span><span class=kn>from</span> <span class=nn>wrapt_timeout_decorator</span> <span class=kn>import</span> <span class=o>*</span><span class=w></span><span class=kn>from</span> <span class=nn>time</span> <span class=kn>import</span> <span class=n>sleep</span><span class=w></span><span class=kn>from</span> <span class=nn>conf_my_program</span> <span class=kn>import</span> <span class=n>conf_my_program</span><span class=w></span><span class=c1># use_signals = False is not really necessary here, it is set automatically under Windows</span><span class=w></span><span class=c1># but You can force NOT to use Signals under Linux</span><span class=w></span><span class=nd>@timeout</span><span class=p>(</span><span class=mi>5</span><span class=p>,</span> <span class=n>use_signals</span><span class=o>=</span><span class=kc>False</span><span class=p>)</span><span class=w></span><span class=k>def</span> <span class=nf>mytest</span><span class=p>():</span><span class=w></span>    <span class=nb>print</span><span class=p>(</span><span class=s2>\"Start \"</span><span class=p>,</span> <span class=n>conf_my_program</span><span class=o>.</span><span class=n>name</span><span class=p>)</span><span class=w></span>    <span class=k>for</span> <span class=n>i</span> <span class=ow>in</span> <span class=nb>range</span><span class=p>(</span><span class=mi>1</span><span class=p>,</span><span class=mi>10</span><span class=p>):</span><span class=w></span>        <span class=n>sleep</span><span class=p>(</span><span class=mi>1</span><span class=p>)</span><span class=w></span>        <span class=nb>print</span><span class=p>(</span><span class=s2>\"</span><span class=si>{}</span><span class=s2> seconds have passed\"</span><span class=o>.</span><span class=n>format</span><span class=p>(</span><span class=n>i</span><span class=p>))</span><span class=w></span>    <span class=k>return</span> <span class=n>i</span></code></pre></section><section id=considerations-using-signals><h3>Considerations using Signals</h3><p>ABADGER1999 highlights in his <a href=\"https://anonbadger.wordpress.com/2018/12/15/python-signal-handlers-and-exceptions/\" rel=nofollow>blog post</a> thepotential pitfalls of using signals alongside the TimeoutException.This approach may not be advisable as the exception can be intercepted within the decorated function.</p><p>While it\u2019s possible to implement a custom Exception derived from the Base Exception Class,this doesn\u2019t guarantee the code will behave as anticipated.For an illustrative example, you\u2019re encouraged to conduct an experiment using a<a href=\"https://mybinder.org/v2/gh/bitranox/wrapt_timeout_decorator/master?filepath=jupyter_test_{repository}.ipynb\" rel=nofollow>Jupyter notebook</a>.</p><pre><code><span class=kn>import</span> <span class=nn>time</span><span class=w></span><span class=kn>from</span> <span class=nn>wrapt_timeout_decorator</span> <span class=kn>import</span> <span class=o>*</span><span class=w></span><span class=c1># Considerations for Signal Usage - Handling TimeoutError</span><span class=w></span><span class=c1># The TimeoutError triggered by a signal might be intercepted within the decorated function.</span><span class=w></span><span class=c1># Utilizing a custom Exception, derived from the base Exception Class, is a possible workaround.</span><span class=w></span><span class=c1># Within Python 3.7.1's standard library, there are over 300 instances where your custom timeout might be caught</span><span class=w></span><span class=c1># if it's based on Exception. Should you base your exception on BaseException,</span><span class=w></span><span class=c1># there still remain 231 potential catch points.</span><span class=w></span><span class=c1># To ensure proper timeout management, it's advisable to set `use_signals=False`.</span><span class=w></span><span class=c1># Consequently, `use_signals` defaults to `False` in this decorator to avoid these issues.</span><span class=w></span><span class=nd>@timeout</span><span class=p>(</span><span class=mi>5</span><span class=p>,</span> <span class=n>use_signals</span><span class=o>=</span><span class=kc>True</span><span class=p>)</span><span class=w></span><span class=k>def</span> <span class=nf>mytest</span><span class=p>(</span><span class=n>message</span><span class=p>):</span><span class=w></span>    <span class=k>try</span><span class=p>:</span><span class=w></span>        <span class=nb>print</span><span class=p>(</span><span class=n>message</span><span class=p>)</span><span class=w></span>        <span class=k>for</span> <span class=n>i</span> <span class=ow>in</span> <span class=nb>range</span><span class=p>(</span><span class=mi>1</span><span class=p>,</span><span class=mi>10</span><span class=p>):</span><span class=w></span>            <span class=n>time</span><span class=o>.</span><span class=n>sleep</span><span class=p>(</span><span class=mi>1</span><span class=p>)</span><span class=w></span>            <span class=nb>print</span><span class=p>(</span><span class=s1>'</span><span class=si>{}</span><span class=s1> seconds have passed - lets assume we read a big file here'</span><span class=o>.</span><span class=n>format</span><span class=p>(</span><span class=n>i</span><span class=p>))</span><span class=w></span>    <span class=c1># TimeoutError is a Subclass of OSError - therefore it is catched here !</span><span class=w></span>    <span class=k>except</span> <span class=ne>OSError</span><span class=p>:</span><span class=w></span>        <span class=k>for</span> <span class=n>i</span> <span class=ow>in</span> <span class=nb>range</span><span class=p>(</span><span class=mi>1</span><span class=p>,</span><span class=mi>10</span><span class=p>):</span><span class=w></span>            <span class=n>time</span><span class=o>.</span><span class=n>sleep</span><span class=p>(</span><span class=mi>1</span><span class=p>)</span><span class=w></span>            <span class=nb>print</span><span class=p>(</span><span class=s1>'Whats going on here ? - Ooops the Timeout Exception is catched by the OSError ! </span><span class=si>{}</span><span class=s1>'</span><span class=o>.</span><span class=n>format</span><span class=p>(</span><span class=n>i</span><span class=p>))</span><span class=w></span>    <span class=k>except</span> <span class=ne>Exception</span><span class=p>:</span><span class=w></span>        <span class=c1># even worse !</span><span class=w></span>        <span class=k>pass</span><span class=w></span>    <span class=k>except</span><span class=p>:</span><span class=w></span>        <span class=c1># the worst - and exists more then 300x in actual Python 3.7 stdlib Code !</span><span class=w></span>        <span class=c1># so You never really can rely that You catch the TimeoutError when using Signals !</span><span class=w></span>        <span class=k>pass</span><span class=w></span><span class=k>if</span> <span class=vm>__name__</span> <span class=o>==</span> <span class=s1>'__main__'</span><span class=p>:</span><span class=w></span>    <span class=k>try</span><span class=p>:</span><span class=w></span>        <span class=n>mytest</span><span class=p>(</span><span class=s1>'starting'</span><span class=p>)</span><span class=w></span>        <span class=nb>print</span><span class=p>(</span><span class=s1>'no Timeout Occured'</span><span class=p>)</span><span class=w></span>    <span class=k>except</span> <span class=ne>TimeoutError</span><span class=p>():</span><span class=w></span>        <span class=c1># this will never be printed because the decorated function catches implicitly the TimeoutError !</span><span class=w></span>        <span class=nb>print</span><span class=p>(</span><span class=s1>'Timeout Occured'</span><span class=p>)</span></code></pre></section><section id=considerations-using-subprocesses><h3>Considerations using Subprocesses</h3></section><section id=overview><h3>Overview</h3><p>Subprocesses ares utilized by default to implement timeout functionality. This involves forking or spawning subprocesses, each with its own set ofconsiderations and caveats.</p></section><section id=initialization><h3>Initialization</h3><ul class=simple><li><p><strong>Windows Considerations:</strong> On Windows, the spawn method can significantly slow down the process initiation.</li><li><p><strong>Main Context Protection:</strong> It is crucial to protect the <span class=\"docutils literal\">__main__</span> context for compatibility, especially on Windows. See the \u201cUsage with Windows\u201d section for more details.</li><li><p><strong>Pickle Requirements:</strong> Function codes and arguments must be pickleable. To accommodate a wider range of types, <cite>dill</cite> is used for serialization.</li><li><p><strong>Global Variables:</strong> Access to global variables from a child process might not reflect the parent process\u2019s state at the time of the fork. Module-level constants are generally unaffected.</li></ul></section><section id=process-execution-and-communication><h3>Process Execution and Communication</h3><ul class=simple><li><p><strong>Subprocess Execution:</strong> Functions run in a separate subprocess, whether forked or spawned.</li><li><p><strong>Data Transmission:</strong> Parameters and results are communicated through pipes, with <cite>dill</cite> used for serialization.</li><li><p><strong>Timeout Management:</strong> Absent a result within the specified timeout, the subprocess is terminated using <cite>SIGTERM</cite>. Ensuring subprocesses can terminate safely is essential; thus, disabling the <cite>SIGTERM</cite> handler is not advisable.</li></ul></section><section id=subprocess-start-methods><h3>Subprocess Start Methods</h3><ul class=simple><li><p><strong>Windows Limitation:</strong> Only <cite>spawn</cite> is available on Windows.</li><li><dl class=simple><dt><strong>Linux/Unix Options:</strong> Options include <cite>fork</cite>, <cite>forkserver</cite>, and <cite>spawn</cite>.</dt><dd><ul><li><p><strong>Fork:</strong> Efficiently clones the parent process, including memory space, but may lead to issues with shared resources or in multi-threaded applications.</li><li><p><strong>Forkserver:</strong> Starts a server at program launch, creating new processes upon request for better isolation but at a slower pace due to the server communication requirement.</li><li><p><strong>Spawn:</strong> Initiates a fresh Python interpreter process, ensuring total independence at the cost of slower start-up due to the need for full initialization.</li></ul></dd></dl></li></ul></section><section id=choosing-the-right-start-method><h3>Choosing the Right Start Method</h3><ul class=simple><li><p><strong>fork</strong> offers speed but can encounter issues with resource sharing or threading.</li><li><p><strong>forkserver</strong> enhances stability and isolation, ideal for applications requiring safety or managing unstable resources.</li><li><p><strong>spawn</strong> provides the highest level of isolation, recommended for a clean start and avoiding shared state complications.</li></ul></section><section id=setting-the-start-method><h3>Setting the Start Method</h3><p>Configure the start method with <span class=\"docutils literal\">multiprocessing.set_start_method(method, force=True)</span>. This should be done cautiously, ideally once, and within the <span class=\"docutils literal\">if __name__ == '__main__'</span> block to prevent unintended effects.Since we use <span class=\"docutils literal\">multiprocess</span> instead of <span class=\"docutils literal\">multiprocessing</span>, we provide a method to set the starting method on both at the same time.see : <a href=#set-subprocess-starting-method rel=nofollow>set_subprocess_starting_method</a></p></section><section id=special-considerations-for-uvicorn-fastapi-asyncio><h3>Special Considerations for Uvicorn, FastAPI, asyncio</h3><p>For Uvicorn or FastAPI applications, a specific approach to the <cite>fork</cite> method is recommended to ensure proper signal handling and isolation, facilitated by the <span class=\"docutils literal\">dec_mp_reset_signals</span> parameter.This design aims to reset signal handlers and manage file descriptors in child processes effectively.You can set that by passing the parameter <span class=\"docutils literal\">dec_mp_reset_signals=True</span> to the decorator.</p></section><section id=handling-nested-timeouts><h3>Handling Nested Timeouts</h3><p>Due to Unix\u2019s limitation of having just one ALARM signal per process, it\u2019s necessary to set <cite>use_signals=False</cite> for nested timeoutsto function correctly. While the outermost decorator may utilize signals,all inner decorators must have <cite>use_signals</cite> set to <cite>False</cite>\u2014which is the default setting.For practical experimentation and to see this behavior in action,you\u2019re encouraged to use a <a href=\"https://mybinder.org/v2/gh/bitranox/wrapt_timeout_decorator/master?filepath=jupyter_test_{repository}.ipynb\" rel=nofollow>Jupyter notebook</a>.</p><pre><code><span class=c1># main.py</span><span class=w></span><span class=kn>import</span> <span class=nn>mylib</span><span class=w></span><span class=c1># this example will work on Windows and Linux</span><span class=w></span><span class=c1># since the decorated function is not in the __main__ scope but in another module !</span><span class=w></span><span class=k>if</span> <span class=vm>__name__</span> <span class=o>==</span> <span class=s1>'__main__'</span><span class=p>:</span><span class=w></span><span class=n>mylib</span><span class=o>.</span><span class=n>outer</span><span class=p>()</span></code></pre><pre><code><span class=c1># mylib.py</span><span class=w></span><span class=kn>from</span> <span class=nn>wrapt_timeout_decorator</span> <span class=kn>import</span> <span class=o>*</span><span class=w></span><span class=kn>import</span> <span class=nn>time</span><span class=w></span><span class=c1># this example will work on Windows and Linux</span><span class=w></span><span class=c1># since the decorated function is not in the __main__ scope but in another module !</span><span class=w></span><span class=nd>@timeout</span><span class=p>(</span><span class=mi>1</span><span class=p>,</span> <span class=n>use_signals</span><span class=o>=</span><span class=kc>True</span><span class=p>)</span><span class=w></span><span class=k>def</span> <span class=nf>outer</span><span class=p>():</span><span class=w></span>    <span class=n>inner</span><span class=p>()</span><span class=w></span><span class=nd>@timeout</span><span class=p>(</span><span class=mi>5</span><span class=p>)</span><span class=w></span><span class=k>def</span> <span class=nf>inner</span><span class=p>():</span><span class=w></span>    <span class=n>time</span><span class=o>.</span><span class=n>sleep</span><span class=p>(</span><span class=mi>3</span><span class=p>)</span><span class=w></span>    <span class=nb>print</span><span class=p>(</span><span class=s2>\"Should never be printed if you call outer()\"</span><span class=p>)</span></code></pre></section><section id=custom-timeout-exception><h3>Custom Timeout Exception</h3><p>Define a different exception to be raised upon timeout:</p><pre><code><span class=kn>import</span> <span class=nn>time</span><span class=w></span><span class=kn>from</span> <span class=nn>wrapt_timeout_decorator</span> <span class=kn>import</span> <span class=o>*</span><span class=w></span><span class=c1># this will throw StopIteration Error instead of TimeoutError</span><span class=w></span><span class=nd>@timeout</span><span class=p>(</span><span class=mi>5</span><span class=p>,</span> <span class=n>timeout_exception</span><span class=o>=</span><span class=ne>StopIteration</span><span class=p>)</span><span class=w></span><span class=k>def</span> <span class=nf>mytest</span><span class=p>(</span><span class=n>message</span><span class=p>):</span><span class=w></span>    <span class=c1># this example does NOT work on windows, please check the section</span><span class=w></span>    <span class=c1># \"use with Windows\" in the README.rst</span><span class=w></span>    <span class=nb>print</span><span class=p>(</span><span class=n>message</span><span class=p>)</span><span class=w></span>    <span class=k>for</span> <span class=n>i</span> <span class=ow>in</span> <span class=nb>range</span><span class=p>(</span><span class=mi>1</span><span class=p>,</span><span class=mi>10</span><span class=p>):</span><span class=w></span>        <span class=n>time</span><span class=o>.</span><span class=n>sleep</span><span class=p>(</span><span class=mi>1</span><span class=p>)</span><span class=w></span>        <span class=nb>print</span><span class=p>(</span><span class=s1>'</span><span class=si>{}</span><span class=s1> seconds have passed'</span><span class=o>.</span><span class=n>format</span><span class=p>(</span><span class=n>i</span><span class=p>))</span><span class=w></span><span class=k>if</span> <span class=vm>__name__</span> <span class=o>==</span> <span class=s1>'__main__'</span><span class=p>:</span><span class=w></span>    <span class=n>mytest</span><span class=p>(</span><span class=s1>'starting'</span><span class=p>)</span></code></pre></section><section id=parameters><h3>Parameters</h3><pre><code><span class=nd>@timeout</span><span class=p>(</span><span class=n>dec_timeout</span><span class=p>,</span> <span class=n>use_signals</span><span class=p>,</span> <span class=n>timeout_exception</span><span class=p>,</span> <span class=n>exception_message</span><span class=p>,</span><span class=w></span>         <span class=n>dec_allow_eval</span><span class=p>,</span> <span class=n>dec_hard_timeout</span><span class=p>,</span> <span class=n>dec_mp_reset_signals</span><span class=p>)</span><span class=w></span><span class=k>def</span> <span class=nf>decorated_function</span><span class=p>(</span><span class=o>*</span><span class=n>args</span><span class=p>,</span> <span class=o>**</span><span class=n>kwargs</span><span class=p>):</span><span class=w></span>    <span class=c1># interesting things happens here ...</span><span class=w></span>    <span class=o>...</span></code></pre><ul><li><dl class=simple><dt>dec_timeout</dt><dd><p>This parameter sets the timeout duration. It accepts a float, integer, or a stringthat can be evaluated to a number if dec_allow_eval is enabled.By default, there\u2019s no timeout (None). You can change the timeout dynamicallyby passing a dec_timeout keyword argument to the decorated function.</p></dd></dl></li><li><dl class=simple><dt>use_signals</dt><dd><p>This boolean parameter controls whether to use UNIX signals for implementing timeouts.It\u2019s the most accurate method but comes with certain limitations,such as being available only on Linux and macOS, and only in the main thread.By default, signals are not used (False). It\u2019s typically not necessary to modifythis setting manually, but you can override it by passing \u2018use_signals=True\u2019 to the decorated function.</p></dd></dl></li><li><dl class=simple><dt>timeout_exception</dt><dd><p>Specifies the exception to raise when a timeout occurs.by default, it\u2019s set to TimeoutErrortype: exceptiondefault: TimeoutError</p></dd></dl></li><li><dl class=simple><dt>exception_message</dt><dd><p>You can customize the message of the timeout exception.The default message includes the name of the function and the timeout duration.This message gets formatted with the actual values when a timeout occurs.type: strdefault : \u2018Function {function_name} timed out after {dec_timeout} seconds\u2019 (will be formatted)</p></dd></dl></li><li><dl><dt>dec_allow_eval</dt><dd><p>When enabled (True), this boolean parameter allows the dec_timeout string to be evaluated dynamically.It provides access</p><ul class=simple><li><p>to the decorated function (wrapped),</li><li><p>the instance it belongs to (instance),</li><li><p>the positional arguments (args),</li><li><p>and keyword arguments (kwargs).</li></ul><p>It\u2019s disabled (False) by default for safety reasons but can be enabled by passing a dec_allow_evalkeyword argument to the decorated function.</p><blockquote><p>instance    Example: \u2018instance.x\u2019 - see example above or dokuargs        Example: \u2018args[0]\u2019 - the timeout is the first argument in argskwargs      Example: \u2018kwargs[\u201cmax_time\u201d] * 2\u2019type: booldefault: falsesee section \u201cDynamic Timeout Value Adjustment with eval\u201d in the manual</p></blockquote></dd></dl></li><li><dl class=simple><dt>dec_hard_timeout</dt><dd><p>This boolean parameter is relevant when signals cannot be used,necessitating the creation of a new process for the timeout mechanism.Setting it to True means the timeout strictly applies to the execution time of the function,potentially not allowing enough time for process creation.With False, the process creation time is not included in the timeout, giving the actual functionthe full duration to execute.You can override this setting by passing a dec_hard_timeout keyword argument to the decorated function.type: booldefault: falsecan be overridden by passing the kwarg dec_hard_timeout to the decorated function*</p></dd></dl></li><li><dl><dt>dec_mp_reset_signals</dt><dd><p>This parameter is relevant when using the \u201cfork\u201d start method for multiprocessing.Setting it to True accomplishes two primary objectives:</p><ul class=simple><li><dl class=simple><dt>Restores Default Signal Handlers in Child Processes:</dt><dd><p>It ensures that child processes revert to the default signal handling behavior,rather than inheriting signal handlers from the parent process.This adjustment is crucial for applications utilizing frameworks like \u201cunicorn\u201d or \u201cFastAPI\u201d,facilitating the use of the efficient \u201cfork\u201d method while maintaining correct signal handling.For more context, refer to the Discussion onFastAPI GitHub page: <a href=\"https://github.com/tiangolo/fastapi/discussions/7442\" rel=nofollow>https://github.com/tiangolo/fastapi/discussions/7442</a></p></dd></dl></li><li><dl class=simple><dt>Avoids Inheritance of the File Descriptor (fd) for Wakeup Signals:</dt><dd><p>Typically, if the parent process utilizes a wakeup_fd, child processes inherit this descriptor.Consequently, when a signal is sent to a child, it is also received by the parent processvia this shared socket, potentially leading to unintended termination or shutdown of the application.By resetting signal handlers and not using the inherited fd, this parameter prevents such conflicts,ensuring isolated and correct signal handling in child processes.</p></dd></dl></li></ul><p>Note: This parameter exclusively affects processes initiated with the \u201cfork\u201d methodand is not applicable to other multiprocessing start methods.</p><p>For enhanced isolation of subprocesses, consider utilizing the \u201cforkserver\u201d or \u201cspawn\u201d start methods in multiprocessing.These methods provide a greater degree of independence between the parent process and its children,mitigating the risks associated with shared resources and ensuring a cleaner execution environment for each subprocess,at the cost of slower startup times. This slowdown is due to the additional overhead involved in setting up a completelynew process environment for each child process, as opposed to directly duplicating the parent process\u2019s environment,which occurs with the \u201cfork\u201d method.</p></dd></dl></li></ul><ul class=simple><li><p>that means the decorated_function must not use that kwarg itself, since this kwarg will be popped from the kwargs</li></ul></section><section id=override-parameters><h3>Override Parameters</h3><p>decorator parameters starting with dec_* and use_signals can be overridden by kwargs with the same name :</p><pre><code><span class=kn>import</span> <span class=nn>time</span><span class=w></span><span class=kn>from</span> <span class=nn>wrapt_timeout_decorator</span> <span class=kn>import</span> <span class=o>*</span><span class=w></span><span class=nd>@timeout</span><span class=p>(</span><span class=n>dec_timeout</span><span class=o>=</span><span class=mi>5</span><span class=p>,</span> <span class=n>use_signals</span><span class=o>=</span><span class=kc>False</span><span class=p>)</span><span class=w></span><span class=k>def</span> <span class=nf>mytest</span><span class=p>(</span><span class=n>message</span><span class=p>):</span><span class=w></span>    <span class=c1># this example does NOT work on windows, please check the section</span><span class=w></span>    <span class=c1># \"use with Windows\" in the README.rst</span><span class=w></span>    <span class=nb>print</span><span class=p>(</span><span class=n>message</span><span class=p>)</span><span class=w></span>    <span class=k>for</span> <span class=n>i</span> <span class=ow>in</span> <span class=nb>range</span><span class=p>(</span><span class=mi>1</span><span class=p>,</span><span class=mi>10</span><span class=p>):</span><span class=w></span>        <span class=n>time</span><span class=o>.</span><span class=n>sleep</span><span class=p>(</span><span class=mi>1</span><span class=p>)</span><span class=w></span>        <span class=nb>print</span><span class=p>(</span><span class=s1>'</span><span class=si>{}</span><span class=s1> seconds have passed'</span><span class=o>.</span><span class=n>format</span><span class=p>(</span><span class=n>i</span><span class=p>))</span><span class=w></span><span class=k>if</span> <span class=vm>__name__</span> <span class=o>==</span> <span class=s1>'__main__'</span><span class=p>:</span><span class=w></span>    <span class=n>mytest</span><span class=p>(</span><span class=s1>'starting'</span><span class=p>,</span><span class=n>dec_timeout</span><span class=o>=</span><span class=mi>12</span><span class=p>)</span>   <span class=c1># override the decorators setting. The kwarg dec_timeout will be not</span><span class=w></span>                                        <span class=c1># passed to the decorated function.</span></code></pre></section><section id=multithreading><h3>Multithreading</h3><p>Signals will not work if your function is not executed in the main thread.<span class=\"docutils literal\">use_signals</span> is therefore automatically disabled (if set) when the function is not running in the main thread.</p><pre><code><span class=kn>import</span> <span class=nn>time</span><span class=w></span><span class=kn>from</span> <span class=nn>wrapt_timeout_decorator</span> <span class=kn>import</span> <span class=o>*</span><span class=w></span><span class=nd>@timeout</span><span class=p>(</span><span class=mi>5</span><span class=p>,</span> <span class=n>use_signals</span><span class=o>=</span><span class=kc>False</span><span class=p>)</span><span class=w></span><span class=k>def</span> <span class=nf>mytest</span><span class=p>(</span><span class=n>message</span><span class=p>):</span><span class=w></span>    <span class=c1># this example does NOT work on windows, please check the section</span><span class=w></span>    <span class=c1># \"use with Windows\" in the README.rst</span><span class=w></span>    <span class=nb>print</span><span class=p>(</span><span class=n>message</span><span class=p>)</span><span class=w></span>    <span class=k>for</span> <span class=n>i</span> <span class=ow>in</span> <span class=nb>range</span><span class=p>(</span><span class=mi>1</span><span class=p>,</span><span class=mi>10</span><span class=p>):</span><span class=w></span>        <span class=n>time</span><span class=o>.</span><span class=n>sleep</span><span class=p>(</span><span class=mi>1</span><span class=p>)</span><span class=w></span>        <span class=nb>print</span><span class=p>(</span><span class=s1>'</span><span class=si>{}</span><span class=s1> seconds have passed'</span><span class=o>.</span><span class=n>format</span><span class=p>(</span><span class=n>i</span><span class=p>))</span><span class=w></span><span class=k>if</span> <span class=vm>__name__</span> <span class=o>==</span> <span class=s1>'__main__'</span><span class=p>:</span><span class=w></span>    <span class=n>mytest</span><span class=p>(</span><span class=s1>'starting'</span><span class=p>)</span></code></pre><aside class=\"admonition warning\"><p class=admonition-title>Warning</p><p>Make sure that in case of subprocess strategy for timeout, your function does not return objects which cannotbe pickled, otherwise it will fail at marshalling it between master and child processes. To cover more cases,we use multiprocess and dill instead of multiprocessing and pickle.</p><p>Since Signals will not work on Windows, it is disabled by default, whatever You set.</p></aside></section><section id=subprocess-monitoring><h3>Subprocess Monitoring</h3><p>when using subprocesses, the subprocess is monitored if it is still alive.if the subprocess was terminated or killed (for instance by OOMKiller),<span class=\"docutils literal\">multiprocessing.context.ProcessError</span> will be raised.By default the subprocess is monitored every 5 seconds, but can be set with parameter<span class=\"docutils literal\">dec_poll_subprocess</span>. polling can be turned off by setting to 0.0 seconds</p><pre><code><span class=kn>from</span> <span class=nn>wrapt_timeout_decorator</span> <span class=kn>import</span> <span class=n>timeout</span><span class=w></span><span class=nd>@timeout</span><span class=p>(</span><span class=mi>10</span><span class=p>,</span> <span class=n>use_signals</span><span class=o>=</span><span class=kc>False</span><span class=p>,</span> <span class=n>timeout_exception</span><span class=o>=</span><span class=ne>TimeoutError</span><span class=p>,</span> <span class=n>dec_poll_subprocess</span><span class=o>=</span><span class=mi>1</span><span class=p>)</span><span class=w></span><span class=k>def</span> <span class=nf>slow_process</span><span class=p>()</span> <span class=o>-&gt;</span> <span class=kc>None</span><span class=p>:</span><span class=w></span>    <span class=c1># should have enough time to finish</span><span class=w></span>    <span class=c1># but instead it gets terminated, and the</span><span class=w></span>    <span class=c1># poll the subprocess every second</span><span class=w></span>    <span class=n>logger</span><span class=o>.</span><span class=n>error</span><span class=p>(</span><span class=sa>f</span><span class=s2>\"Slow process started at </span><span class=si>{</span><span class=n>get_str_time</span><span class=p>()</span><span class=si>}</span><span class=s2>\"</span><span class=p>)</span><span class=w></span>    <span class=n>time</span><span class=o>.</span><span class=n>sleep</span><span class=p>(</span><span class=mi>5</span><span class=p>)</span><span class=w></span>    <span class=n>logger</span><span class=o>.</span><span class=n>error</span><span class=p>(</span><span class=sa>f</span><span class=s2>\"Slow process done at </span><span class=si>{</span><span class=n>get_str_time</span><span class=p>()</span><span class=si>}</span><span class=s2>\"</span><span class=p>)</span><span class=w></span><span class=k>def</span> <span class=nf>fake_oom_killer</span><span class=p>()</span> <span class=o>-&gt;</span> <span class=kc>None</span><span class=p>:</span><span class=w></span>    <span class=n>logger</span><span class=o>.</span><span class=n>error</span><span class=p>(</span><span class=sa>f</span><span class=s2>\"Fake OOMKiller started at </span><span class=si>{</span><span class=n>get_str_time</span><span class=p>()</span><span class=si>}</span><span class=s2>\"</span><span class=p>)</span><span class=w></span>    <span class=n>time</span><span class=o>.</span><span class=n>sleep</span><span class=p>(</span><span class=mi>2</span><span class=p>)</span><span class=w></span>    <span class=c1># kill sibling slow_process</span><span class=w></span>    <span class=c1># hacky way to find it</span><span class=w></span>    <span class=n>target</span> <span class=o>=</span> <span class=n>psutil</span><span class=o>.</span><span class=n>Process</span><span class=p>()</span><span class=o>.</span><span class=n>parent</span><span class=p>()</span><span class=o>.</span><span class=n>children</span><span class=p>(</span><span class=n>recursive</span><span class=o>=</span><span class=kc>True</span><span class=p>)[</span><span class=o>-</span><span class=mi>1</span><span class=p>]</span><span class=w></span>    <span class=n>target</span><span class=o>.</span><span class=n>kill</span><span class=p>()</span><span class=w></span>    <span class=n>logger</span><span class=o>.</span><span class=n>error</span><span class=p>(</span><span class=sa>f</span><span class=s2>\"Killed </span><span class=si>{</span><span class=n>target</span><span class=o>.</span><span class=n>pid</span><span class=si>}</span><span class=s2> at </span><span class=si>{</span><span class=n>get_str_time</span><span class=p>()</span><span class=si>}</span><span class=s2>\"</span><span class=p>)</span><span class=w></span><span class=k>def</span> <span class=nf>start_processes</span><span class=p>()</span> <span class=o>-&gt;</span> <span class=kc>None</span><span class=p>:</span><span class=w>    </span><span class=sd>\"\"\"    starts the 'fake_oom_killer' and 'slow_process' process -    and kill 'slow_process' after two seconds    &gt;&gt;&gt; start_processes()    Traceback (most recent call last):        ...    multiprocessing.context.ProcessError: Function slow_process was terminated or killed after ... seconds    \"\"\"</span><span class=w></span>    <span class=n>process_oom_killer</span> <span class=o>=</span> <span class=n>multiprocessing</span><span class=o>.</span><span class=n>Process</span><span class=p>(</span><span class=n>target</span><span class=o>=</span><span class=n>fake_oom_killer</span><span class=p>,</span> <span class=n>args</span><span class=o>=</span><span class=p>())</span><span class=w></span>    <span class=n>process_oom_killer</span><span class=o>.</span><span class=n>start</span><span class=p>()</span><span class=w></span>    <span class=n>slow_process</span><span class=p>()</span><span class=w></span>    <span class=n>process_oom_killer</span><span class=o>.</span><span class=n>join</span><span class=p>()</span><span class=w></span><span class=k>def</span> <span class=nf>get_str_time</span><span class=p>()</span> <span class=o>-&gt;</span> <span class=nb>str</span><span class=p>:</span><span class=w></span>    <span class=n>t</span> <span class=o>=</span> <span class=n>time</span><span class=o>.</span><span class=n>localtime</span><span class=p>()</span><span class=w></span>    <span class=n>current_time</span> <span class=o>=</span> <span class=n>time</span><span class=o>.</span><span class=n>strftime</span><span class=p>(</span><span class=s2>\"%H:%M:%S\"</span><span class=p>,</span> <span class=n>t</span><span class=p>)</span><span class=w></span>    <span class=k>return</span> <span class=n>current_time</span><span class=w></span><span class=k>if</span> <span class=vm>__name__</span> <span class=o>==</span> <span class=s1>'__main__'</span><span class=p>:</span><span class=w></span>    <span class=n>start_processes</span><span class=p>()</span></code></pre></section><section id=use-as-function-not-as-decorator><h3>use as function not as decorator</h3><p>You can use the timout also as function, without using as decorator:</p><pre><code><span class=kn>import</span> <span class=nn>time</span><span class=w></span><span class=kn>from</span> <span class=nn>wrapt_timeout_decorator</span> <span class=kn>import</span> <span class=o>*</span><span class=w></span><span class=k>def</span> <span class=nf>mytest</span><span class=p>(</span><span class=n>message</span><span class=p>):</span><span class=w></span>    <span class=nb>print</span><span class=p>(</span><span class=n>message</span><span class=p>)</span><span class=w></span>    <span class=k>for</span> <span class=n>i</span> <span class=ow>in</span> <span class=nb>range</span><span class=p>(</span><span class=mi>1</span><span class=p>,</span><span class=mi>10</span><span class=p>):</span><span class=w></span>        <span class=n>time</span><span class=o>.</span><span class=n>sleep</span><span class=p>(</span><span class=mi>1</span><span class=p>)</span><span class=w></span>        <span class=nb>print</span><span class=p>(</span><span class=s1>'</span><span class=si>{}</span><span class=s1> seconds have passed'</span><span class=o>.</span><span class=n>format</span><span class=p>(</span><span class=n>i</span><span class=p>))</span><span class=w></span><span class=k>if</span> <span class=vm>__name__</span> <span class=o>==</span> <span class=s1>'__main__'</span><span class=p>:</span><span class=w></span>    <span class=n>timeout</span><span class=p>(</span><span class=n>dec_timeout</span><span class=o>=</span><span class=mi>5</span><span class=p>)(</span><span class=n>mytest</span><span class=p>)(</span><span class=s1>'starting'</span><span class=p>)</span></code></pre></section><section id=dynamic-timeout-value-adjustment-with-eval><h3>Dynamic Timeout Value Adjustment with eval</h3><p>The timeout value can be dynamically adjusted, calculated from other parameters or methods accessible via the eval function.This capability is highly potent yet bears significant risks, especially when evaluating strings from UNTRUSTED sources.</p><aside class=\"admonition caution\"><p class=admonition-title>Caution!</p><p>Utilizing eval with untrusted input is perilous.For an in-depth understanding, refer to <a href=\"https://nedbatchelder.com/blog/201206/eval_really_is_dangerous.html\" rel=nofollow>this article by Ned Batchelder</a>.</p></aside><p>When activated, the <span class=\"docutils literal\">dec_timeout</span> function parameter,or the value passed through the <span class=\"docutils literal\">dec_timeout</span> keyword argument (kwarg), will undergo evaluation if it\u2019s a string type.</p><p>Accessible objects within the eval context include:</p><ul class=simple><li><p><strong>wrapped</strong>: Represents the decorated function and its attributes.</li><li><p><strong>instance</strong>: Accesses attributes of the class instance, e.g., <span class=\"docutils literal\">'instance.x'</span> refers to an attribute <span class=\"docutils literal\">x</span> of the instance.</li><li><p><strong>args</strong>: Refers to positional arguments, e.g., <span class=\"docutils literal\">'args[0]'</span> might be used to indicate the first argument is the timeout.</li><li><p><strong>kwargs</strong>: Accesses keyword arguments, e.g., <span class=\"docutils literal\"><span class=pre>'kwargs[\"max_time\"]</span> * 2'</span> doubles the value of <span class=\"docutils literal\">max_time</span>.</li></ul><p>These elements underscore the feature\u2019s versatility but also highlight its potential hazards.By default, <span class=\"docutils literal\">allow_eval</span> is turned off to mitigate risks.However, it can be enabled to address specific use cases without altering the timeout decorator\u2019s core functionality.</p><pre><code><span class=c1># this example does NOT work on windows, please check the section</span><span class=w></span><span class=c1># \"use with Windows\" in the README.rst</span><span class=w></span><span class=k>def</span> <span class=nf>class</span> <span class=n>FunnyMemes</span><span class=p>(</span><span class=nb>object</span><span class=p>):</span><span class=w></span>    <span class=k>def</span> <span class=fm>__init__</span><span class=p>(</span><span class=bp>self</span><span class=p>,</span><span class=n>x</span><span class=p>):</span><span class=w></span>        <span class=bp>self</span><span class=o>.</span><span class=n>x</span><span class=o>=</span><span class=n>x</span><span class=w></span>    <span class=nd>@timeout</span><span class=p>(</span><span class=s1>'instance.x'</span><span class=p>,</span> <span class=n>dec_allow_eval</span><span class=o>=</span><span class=kc>True</span><span class=p>)</span><span class=w></span>    <span class=k>def</span> <span class=nf>swallow</span><span class=p>(</span><span class=bp>self</span><span class=p>):</span><span class=w></span>        <span class=k>while</span> <span class=kc>True</span><span class=p>:</span><span class=w></span>            <span class=n>time</span><span class=o>.</span><span class=n>sleep</span><span class=p>(</span><span class=mf>0.5</span><span class=p>)</span><span class=w></span>            <span class=nb>print</span><span class=p>(</span><span class=s1>'swallow'</span><span class=p>)</span><span class=w></span>    <span class=nd>@timeout</span><span class=p>(</span><span class=mi>1</span><span class=p>)</span><span class=w></span>    <span class=k>def</span> <span class=nf>parrot</span><span class=p>(</span><span class=bp>self</span><span class=p>):</span><span class=w></span>        <span class=k>while</span> <span class=kc>True</span><span class=p>:</span><span class=w></span>            <span class=n>time</span><span class=o>.</span><span class=n>sleep</span><span class=p>(</span><span class=mf>0.5</span><span class=p>)</span><span class=w></span>            <span class=nb>print</span><span class=p>(</span><span class=s1>'parrot'</span><span class=p>)</span><span class=w></span>    <span class=nd>@timeout</span><span class=p>(</span><span class=n>dec_timeout</span><span class=o>=</span><span class=s1>'args[0] + kwargs.pop(\"more_time\",0)'</span><span class=p>,</span> <span class=n>dec_allow_eval</span><span class=o>=</span><span class=kc>True</span><span class=p>)</span><span class=w></span>    <span class=k>def</span> <span class=nf>knight</span><span class=p>(</span><span class=bp>self</span><span class=p>,</span><span class=n>base_delay</span><span class=p>):</span><span class=w></span>        <span class=k>while</span> <span class=kc>True</span><span class=p>:</span><span class=w></span>            <span class=n>time</span><span class=o>.</span><span class=n>sleep</span><span class=p>(</span><span class=n>base_delay</span><span class=p>)</span><span class=w></span>            <span class=nb>print</span><span class=p>(</span><span class=s1>'knight'</span><span class=p>)</span><span class=w></span><span class=k>def</span> <span class=nf>main</span><span class=p>():</span><span class=w></span>    <span class=n>my_memes</span> <span class=o>=</span> <span class=n>FunnyMemes</span><span class=p>(</span><span class=mi>2</span><span class=p>)</span><span class=w></span>    <span class=n>my_memes</span><span class=o>.</span><span class=n>swallow</span><span class=p>()</span>                                                      <span class=c1># this will time out after 2 seconds</span><span class=w></span>    <span class=n>my_memes</span><span class=o>.</span><span class=n>swallow</span><span class=p>(</span><span class=n>dec_timeout</span><span class=o>=</span><span class=s1>'instance.x * 2 + 1'</span><span class=p>)</span>                      <span class=c1># this will time out after 5 seconds</span><span class=w></span>    <span class=n>my_memes</span><span class=o>.</span><span class=n>parrot</span><span class=p>(</span><span class=n>dec_timeout</span><span class=o>=</span><span class=s1>'instance.x * 2 + 1'</span><span class=p>,</span> <span class=n>dec_allow_eval</span><span class=o>=</span><span class=kc>True</span><span class=p>)</span>  <span class=c1># this will time out after 5 seconds</span><span class=w></span>    <span class=n>my_memes</span><span class=o>.</span><span class=n>knight</span><span class=p>(</span><span class=mi>1</span><span class=p>,</span><span class=n>more_time</span><span class=o>=</span><span class=mi>4</span><span class=p>)</span>                                          <span class=c1># this will time out after 5 seconds</span><span class=w></span><span class=k>if</span> <span class=vm>__name__</span> <span class=o>==</span> <span class=s1>'__main__'</span><span class=p>:</span><span class=w></span>    <span class=n>main</span><span class=p>()</span></code></pre></section><section id=tools><h3>Tools</h3></section><section id=detect-pickle-errors><h3>detect pickle errors</h3><p>Keep in mind that when employing subprocesses, both decorated functions and their return values must be pickleable.To identify issues with pickling, you can utilize the <span class=\"docutils literal\">detect_unpickable_objects</span> function:</p><pre><code><span class=kn>from</span> <span class=nn>wrapt_timeout_decorator</span> <span class=kn>import</span> <span class=o>*</span><span class=w></span><span class=n>detect_unpickable_objects</span><span class=p>(</span><span class=n>object_to_pickle</span><span class=p>,</span> <span class=n>dill_trace</span><span class=o>=</span><span class=kc>True</span><span class=p>)</span></code></pre></section><section id=set-subprocess-starting-method><h3>set_subprocess_starting_method</h3><p>Set the start Method for Subprocesses. Since we use multiprocess,we set the starting method for multiprocess and multiprocessing to the same value.we did not test what would happen if we set that to different values.</p><blockquote><ul class=simple><li><p>Windows Limitation: Only <cite>spawn</cite> is available on Windows.</li><li><dl class=simple><dt>Linux/Unix Options: Options include <cite>fork</cite>, <cite>forkserver</cite>, and <cite>spawn</cite>.</dt><dd><ul><li><dl class=simple><dt>fork:</dt><dd><p>Efficiently clones the parent process, including memory space,but may lead to issues with shared resources or in multi-threaded applications.</p></dd></dl></li><li><dl class=simple><dt>forkserver:</dt><dd><p>Starts a server at program launch, creating new processes upon requestfor better isolation but at a slower pace due to the server communication requirement.</p></dd></dl></li><li><dl class=simple><dt>spawn:</dt><dd><p>Initiates a fresh Python interpreter process, ensuring total independenceat the cost of slower start-up due to the need for full initialization.</p></dd></dl></li></ul></dd></dl></li><li><dl class=simple><dt>Choosing the Right Start Method</dt><dd><ul><li><dl class=simple><dt>fork</dt><dd><p>offers speed but can encounter issues with resource sharing or threading.</p></dd></dl></li><li><dl class=simple><dt>forkserver</dt><dd><p>enhances stability and isolation, ideal for applications requiring safety or managing unstable resources.</p></dd></dl></li><li><dl class=simple><dt>spawn</dt><dd><p>provides the highest level of isolation, recommended for a clean start and avoiding shared state complications.</p></dd></dl></li></ul></dd></dl></li><li><dl class=simple><dt>Setting the Start Method</dt><dd><p>Configure the start method with <cite>set_subprocess_starting_method(method)</cite>This should be done cautiously, ideally once, and within the <cite>if __name__ == \u2018__main__\u2019</cite> block to prevent unintended effects.</p></dd></dl></li></ul></blockquote><pre><code><span class=kn>from</span> <span class=nn>wrapt_timeout_decorator</span> <span class=kn>import</span> <span class=o>*</span><span class=w></span><span class=n>set_subprocess_starting_method</span><span class=p>(</span><span class=s2>\"forkserver\"</span><span class=p>)</span></code></pre></section><section id=logging-challenges-with-subprocesses><h3>Logging Challenges with Subprocesses</h3><p>When <cite>signals=False</cite> is set, implementing logging within a subprocess poses challenges.A new process does not inherit the main process\u2019s logger object, necessitating further developmentfor integration with the main process\u2019s logger via mechanisms like sockets or queues.</p><p>Utilizing <cite>logger=logging.getLogger()</cite> within the wrapped function results in the instantiation of a new Logger Object.Configuring this Logger, especially for file logging from concurrent processes, presents complications as direct filelogging from multiple processes is generally unsupported.A potential solution involves employing a SocketHandler coupled with a Receiver Thread to facilitate logging.</p><p>In the interim, it\u2019s necessary to initialize a separate logger within the decorated function for logging purposes.It\u2019s crucial to remember that writing to the same logfile from multiple processes is not advisable.While certain logging modules may offer solutions for concurrent logging, they require specific setup and configuration.</p></section><section id=hard-timeout><h3>hard timeout</h3><p>When employing subprocesses (which is the default behavior), the timeout functionality is achieved by initiatinga new subprocess and terminating it once the specified timeout period elapses.The process creation speed varies significantly between operating systems.On Linux, the <span class=\"docutils literal\">fork()</span> method allows rapid creation of a new process.In contrast, on Windows, the <span class=\"docutils literal\">spawn()</span> method can introduce a noticeable delay due to the necessity of reloading the main context,with spawning a small module potentially taking upwards of 0.5 seconds.</p><p>The timeout duration commences subsequent to the creation of the new process.Consequently, the specified timeout reflects the period the decorated function is permitted to execute,exclusive of the process setup time. This distinction is particularly vital for scenarios utilizing brief timeout intervals:</p><pre><code><span class=nd>@timeout</span><span class=p>(</span><span class=mf>0.1</span><span class=p>)</span><span class=w></span><span class=k>def</span> <span class=nf>test</span><span class=p>():</span><span class=w></span>    <span class=n>time</span><span class=o>.</span><span class=n>sleep</span><span class=p>(</span><span class=mf>0.2</span><span class=p>)</span></code></pre></section><section id=understanding-timeout-durations-across-platforms><h3>Understanding Timeout Durations Across Platforms</h3><p>The implementation of timeouts, yields different total timeout durations on Linux (fork, forkserver) compared to Windows (spawn).On Linux, the timeout process may for instance complete in approximately 0.1 seconds with \u201cfork\u201d.Conversely, on Windows, the total time to reach timeout could extend for instance to about 0.6 seconds,comprising a 0.5-second delay to spawn a new process and then allowing 0.1 seconds for the function <span class=\"docutils literal\">test()</span> to execute.</p><p>To enforce a decorated function to timeout strictly after the specified timeout period,you may use the <span class=\"docutils literal\">dec_hard_timeout=True</span> parameter.</p><p>With this setting, the targeted function will timeout precisely after the designated duration after start,regardless of the process spawning time.However, setting a very short timeout with this option may prevent the process from running at all,resulting in an immediate timeout upon spawning.</p><aside class=\"admonition note\"><p class=admonition-title>Note</p><p>The term \u201cprecisely\u201d should be interpreted with a degree of flexibility.There remains a negligible delay in returning from the spawned process, making it imperative to approach very short timeouts with caution.</p></aside></section><section id=mypy-testing><h3>MYPY Testing</h3><p>for local MYPY Testing please make sure that the stub file \u201cwrapt.pyi\u201d is in in the MYPY Path (once!), in order to preserve the decorated function signature.</p></section><section id=usage-from-commandline><h3>Usage from Commandline</h3><pre><code>Usage: wrapt_timeout_decorator [OPTIONS] COMMAND [ARGS]...  The better timout decoratorOptions:  --version                     Show the version and exit.  --traceback / --no-traceback  return traceback information on cli  -h, --help                    Show this message and exit.Commands:  info  get program informations</code></pre></section><section id=installation-and-upgrade><h3>Installation and Upgrade</h3><ul class=simple><li><p>Before You start, its highly recommended to update pip:</li></ul><pre><code>python -m pip --upgrade pip</code></pre><ul class=simple><li><p>to install the latest release from PyPi via pip (recommended):</li></ul><pre><code>python -m pip install --upgrade wrapt_timeout_decorator</code></pre><ul class=simple><li><p>to install the latest release from PyPi via pip, including test dependencies:</li></ul><pre><code>python -m pip install --upgrade wrapt_timeout_decorator[test]</code></pre><ul class=simple><li><p>to install the latest version from github via pip:</li></ul><pre><code>python -m pip install --upgrade git+https://github.com/bitranox/wrapt_timeout_decorator.git</code></pre><ul class=simple><li><p>include it into Your requirements.txt:</li></ul><pre><code># Insert following line in Your requirements.txt:# for the latest Release on pypi:wrapt_timeout_decorator# for the latest development version :wrapt_timeout_decorator @ git+https://github.com/bitranox/wrapt_timeout_decorator.git# to install and upgrade all modules mentioned in requirements.txt:python -m pip install --upgrade -r /&lt;path&gt;/requirements.txt</code></pre><ul class=simple><li><p>to install the latest development version, including test dependencies from source code:</li></ul><pre><code># cd ~$ git clone https://github.com/bitranox/wrapt_timeout_decorator.git$ cd wrapt_timeout_decoratorpython -m pip install -e .[test]</code></pre><ul class=simple><li><p>via makefile:makefiles are a very convenient way to install. Here we can do much more,like installing virtual environments, clean caches and so on.</li></ul><pre><code><span class=c1># from Your shell's homedirectory:</span>$<span class=w> </span>git<span class=w> </span>clone<span class=w> </span>https://github.com/bitranox/wrapt_timeout_decorator.git<span class=w></span>$<span class=w> </span><span class=nb>cd</span><span class=w> </span>wrapt_timeout_decorator<span class=w></span><span class=c1># to run the tests:</span>$<span class=w> </span>make<span class=w> </span><span class=nb>test</span><span class=w></span><span class=c1># to install the package</span>$<span class=w> </span>make<span class=w> </span>install<span class=w></span><span class=c1># to clean the package</span>$<span class=w> </span>make<span class=w> </span>clean<span class=w></span><span class=c1># uninstall the package</span>$<span class=w> </span>make<span class=w> </span>uninstall</code></pre></section><section id=requirements><h3>Requirements</h3><p>following modules will be automatically installed :</p><pre><code><span class=c1>## Project Requirements</span>cli_exit_tools<span class=w></span>lib_detect_testenv<span class=w></span><span class=c1># class decorators are failing on windows with dill 0.3.5, 0.3.5.1</span>dill&gt;0.3.0,!<span class=o>=</span><span class=m>0</span>.3.5,!<span class=o>=</span><span class=m>0</span>.3.5.1<span class=p>;</span><span class=nv>sys_platform</span><span class=o>==</span><span class=s2>\"win32\"</span><span class=w></span>dill<span class=p>;</span>sys_platform!<span class=o>=</span><span class=s2>\"win32\"</span><span class=w></span>multiprocess<span class=w></span>psutil<span class=w></span>wrapt</code></pre></section><section id=acknowledgements><h3>Acknowledgements</h3><ul class=simple><li><p>special thanks to \u201cuncle bob\u201d Robert C. Martin, especially for his books on \u201cclean code\u201d and \u201cclean architecture\u201d</li></ul></section><section id=contribute><h3>Contribute</h3><p>I would love for you to fork and send me pull request for this project.- <a href=\"https://github.com/bitranox/wrapt_timeout_decorator/blob/master/CONTRIBUTING.md\" rel=nofollow>please Contribute</a></p></section><section id=license><h3>License</h3><p>This software is licensed under the <a href=\"http://en.wikipedia.org/wiki/MIT_License\" rel=nofollow>MIT license</a></p><p>\u2014</p></section></section><section id=changelog><h2>Changelog</h2><section id=v1-5-1><h3>v1.5.1</h3><dl class=simple><dt>2024-02-28:</dt><dd><ul class=simple><li><p>overhaul documentation</li><li><p>github <a href=\"mailto:actions/checkout%40v4\" rel=nofollow>actions/checkout<span>@</span>v4</a></li><li><p>github <a href=\"mailto:actions/setup-python%40v5\" rel=nofollow>actions/setup-python<span>@</span>v5</a></li></ul></dd></dl></section><section id=v1-5-0><h3>v1.5.0</h3><dl class=simple><dt>2024-02-27:</dt><dd><ul class=simple><li><p>thanks to <a href=\"https://github.com/alor\" rel=nofollow>Alberto Ornaghi:</a></li><li><p>parameter <span class=\"docutils literal\">dec_mp_reset_signals</span></li><li><p>restores the default behavior of signal handlers on multiprocessing <span class=\"docutils literal\">fork</span></li><li><p>suitible especially for <span class=\"docutils literal\">FastAPI</span> and <span class=\"docutils literal\">Uvicorn</span></li></ul></dd></dl></section><section id=v1-4-1><h3>v1.4.1</h3><dl class=simple><dt>2024-01-10:</dt><dd><ul class=simple><li><p>thanks to <a href=\"https://github.com/fayak\" rel=nofollow>fayak:</a></li><li><p>omit mypy option \u2013no-implicit-reexport</li><li><p>explicitly export methods in <span class=\"docutils literal\">__init__.py</span></li></ul></dd></dl></section><section id=v1-4-0><h3>v1.4.0</h3><dl class=simple><dt>2023-07-13:</dt><dd><ul class=simple><li><p>check for killed child processes (for instance by OOMKiller)</li><li><p>change dill requirements for windows</li><li><p>require minimum python 3.8</li><li><p>remove python 3.7 tests</li><li><p>introduce PEP517 packaging standard</li><li><p>introduce pyproject.toml build-system</li><li><p>remove mypy.ini</li><li><p>remove pytest.ini</li><li><p>remove setup.cfg</li><li><p>remove setup.py</li><li><p>remove .bettercodehub.yml</li><li><p>remove .travis.yml</li><li><p>update black config</li><li><p>clean ./tests/test_cli.py</li><li><p>add codeql badge</li><li><p>move 3rd_party_stubs outside the src directory to <span class=\"docutils literal\"><span class=pre>./.3rd_party_stubs</span></span></li><li><p>add pypy 3.10 tests</li><li><p>add python 3.12-dev tests</li></ul></dd></dl></section><section id=v1-3-12-2><h3>v1.3.12.2</h3><p>2022-06-01: update to github actions <a href=mailto:checkout%40v3 rel=nofollow>checkout<span>@</span>v3</a> and <a href=mailto:setup-python%40v3 rel=nofollow>setup-python<span>@</span>v3</a></p></section><section id=v1-3-12><h3>v1.3.12</h3><p>2022-05-23: update requirements.txt</p></section><section id=v1-3-11><h3>v1.3.11</h3><dl class=simple><dt>2022-05-23:</dt><dd><ul class=simple><li><p>set dill version &lt; 0.3.5 on windows, because decorating class methods fails with dill 0.3.5 upwards</li><li><p>update tests to the latest python versions</li></ul></dd></dl></section><section id=v1-3-10><h3>v1.3.10</h3><p>2022-04-26: add tests for thread lock</p></section><section id=v1-3-9><h3>v1.3.9</h3><p>2022-04-26: preserve Signature of the decorator</p></section><section id=v1-3-8><h3>v1.3.8</h3><p>2022-03-29: remedy mypy Untyped decorator makes function \u201ccli_info\u201d untyped</p></section><section id=v1-3-7><h3>v1.3.7</h3><p>2022-03-28: extend time on test_timeout_decorator_arg - github macos seems to be slow, so sometimes that test fails</p></section><section id=v1-3-6><h3>v1.3.6</h3><p>2022-03-25: fix github actions windows test</p></section><section id=v1-3-4><h3>v1.3.4</h3><p>2022-03-23: extend time on test_timeout_ok_timeout_as_kwarg - github macos seems to be slow, so sometimes that test fails</p></section><section id=v1-3-3><h3>v1.3.3</h3><p>2022-03-10: extend time on test_timeout_alternate_exception - github macos seems to be slow, so sometimes that test fails</p></section><section id=v1-3-2><h3>v1.3.2</h3><p>2022-03-01: github actions pipeline, codestyle black, fix requirements</p></section><section id=v1-3-1><h3>v1.3.1</h3><p>2019-09-02: strict mypy static type checking, housekeeping</p></section><section id=v1-3-0><h3>v1.3.0</h3><p>2019-05-03: pointing out caveats when using signals, the decorator defaults now to NOT using Signals !</p></section><section id=v1-2-9><h3>v1.2.9</h3><p>2019-05-03: support nested decorators, mypy static type checking</p></section><section id=v1-2-8><h3>v1.2.8</h3><p>2019-04-23: import multiprocess as multiprocess, not as multiprocessing - that might brake other packages</p></section><section id=v1-2-0><h3>v1.2.0</h3><p>2019-04-09: initial PyPi release</p></section><section id=v1-1-0><h3>v1.1.0</h3><p>2019-04-03: added pickle analyze convenience function</p></section><section id=v1-0-9><h3>v1.0.9</h3><p>2019-03-27: added OsX and Windows tests, added parameter dec_hard_timeout for Windows, 100% Code Coverage</p></section><section id=v1-0-8><h3>v1.0.8</h3><p>2019-02-26: complete refractoring and code cleaning</p></section><section id=v1-0-7><h3>v1.0.7</h3><p>2019-02-25:  fix pickle detection, added some tests, codecov now correctly combining the coverage of all tests</p></section><section id=v1-0-6><h3>v1.0.6</h3><p>2019-02-24: fix pickle detection when use_signals = False, drop Python2.6 support since wrapt dropped it.</p></section><section id=v1-0-5><h3>v1.0.5</h3><p>2018-09-13: use multiprocessing.pipe instead of queueIf we are not able to use signals, we need to spawn a new process.This was done in the past by pickling the target function and put it on a queue -now this is done with a half-duplex pipe.</p><ul class=simple><li><p>it is faster</li><li><p>it probably can work on Amazon AWS, since there You must not use queues</li></ul></section><section id=v1-0-4><h3>v1.0.4</h3><p>2017-12-02: automatic detection if we are in the main thread. Signals can only be used in the main thread. If the decorator is running in a subthread, we automatically disable signals.</p></section><section id=v1-0-3><h3>v1.0.3</h3><p>2017-11-30: using dill and multiprocess to enhance windows functionality</p></section><section id=v1-0-0><h3>v1.0.0</h3><p>2017-11-10: Initial public release</p></section></section>          </div>        </div>        <div id=\"data\" data-project-tabs-target=\"content\" class=\"vertical-tabs__content\" role=\"tabpanel\" aria-labelledby=\"mobile-data-tab\" tabindex=\"-1\">          <h2 class=\"page-title\">Project details</h2><div class=\"sidebar-section\">  <h3 class=\"sidebar-section__title\">Project links</h3>  <ul class=\"vertical-tabs__list\">    <li>      <a class=\"vertical-tabs__tab vertical-tabs__tab--with-icon vertical-tabs__tab--condensed\" href=\"https://github.com/bitranox/wrapt_timeout_decorator/blob/master/CHANGES.rst\" rel=\"nofollow\">        <i class=\"fas fa-scroll\" aria-hidden=\"true\"></i>Changelog      </a>    </li>    <li>      <a class=\"vertical-tabs__tab vertical-tabs__tab--with-icon vertical-tabs__tab--condensed\" href=\"https://github.com/bitranox/wrapt_timeout_decorator/blob/master/README.rst\" rel=\"nofollow\">        <i class=\"fas fa-book\" aria-hidden=\"true\"></i>Documentation      </a>    </li>    <li>      <a class=\"vertical-tabs__tab vertical-tabs__tab--with-icon vertical-tabs__tab--condensed\" href=\"https://github.com/bitranox/wrapt_timeout_decorator\" rel=\"nofollow\">        <i class=\"fas fa-home\" aria-hidden=\"true\"></i>Homepage      </a>    </li>    <li>      <a class=\"vertical-tabs__tab vertical-tabs__tab--with-icon vertical-tabs__tab--condensed\" href=\"https://github.com/bitranox/wrapt_timeout_decorator.git\" rel=\"nofollow\">        <i class=\"fab fa-github\" aria-hidden=\"true\"></i>Repository      </a>    </li>  </ul></div><div class=\"sidebar-section\">  <h3 class=\"sidebar-section__title\">Statistics</h3>  <div class=\"hidden github-repo-info\" data-controller=\"github-repo-info\">GitHub statistics:    <ul class=\"vertical-tabs__list\">      <li>        <a class=\"vertical-tabs__tab vertical-tabs__tab--with-icon vertical-tabs__tab--condensed\"           data-github-repo-info-target=\"stargazersUrl\" rel=\"noopener\">          <i class=\"fa fa-star\" aria-hidden=\"true\"></i>          <strong>Stars:</strong>          <span data-github-repo-info-target=\"stargazersCount\"></span>        </a>      </li>      <li>        <a class=\"vertical-tabs__tab vertical-tabs__tab--with-icon vertical-tabs__tab--condensed\"           data-github-repo-info-target=\"forksUrl\" rel=\"noopener\">          <i class=\"fa fa-code-branch\" aria-hidden=\"true\"></i>          <strong>Forks:</strong>          <span data-github-repo-info-target=\"forksCount\"></span>        </a>      </li>      <li>        <a class=\"vertical-tabs__tab vertical-tabs__tab--with-icon vertical-tabs__tab--condensed\"           data-github-repo-info-target=\"openIssuesUrl\" rel=\"noopener\">          <i class=\"fa fa-exclamation-circle\" aria-hidden=\"true\"></i>          <strong>Open issues:</strong>          <span data-github-repo-info-target=\"openIssuesCount\"></span>        </a>      </li>      <li>        <a class=\"vertical-tabs__tab vertical-tabs__tab--with-icon vertical-tabs__tab--condensed\"           data-github-repo-info-target=\"openPRsUrl\" rel=\"noopener\">          <i class=\"fa fa-code-pull-request\" aria-hidden=\"true\"></i>          <strong>Open PRs:</strong>          <span data-github-repo-info-target=\"openPRsCount\"></span>        </a>      </li>    </ul>  </div>  <p>View statistics for this project via <a href=\"https://libraries.io/pypi/wrapt-timeout-decorator\" title=\"External link\" target=\"_blank\" rel=\"noopener\">Libraries.io</a>, or by using <a href=\"https://packaging.python.org/guides/analyzing-pypi-package-downloads/\" target=\"_blank\" rel=\"noopener\">our public dataset on Google BigQuery</a>  </p></div><div class=\"sidebar-section\">  <h3 class=\"sidebar-section__title\">Meta</h3>  <p><strong>License:</strong> MIT License (MIT)</p>    <p><strong>Author:</strong> <a href=\"mailto:bitranox@gmail.com\">Robert Nowotny</a></p>  <p>    <strong>Requires:</strong> Python &gt;=3.8.0  </p></div><div class=\"sidebar-section\">    <h3 class=\"sidebar-section__title\">Maintainers</h3>      <span class=\"sidebar-section__maintainer\">        <a href=\"/user/bitranox/\" aria-label=\"bitranox\">          <span class=\"sidebar-section__user-gravatar\">            <img src=\"https://pypi-camo.freetls.fastly.net/334df8f1d370c6293902d0f52b111fb94791ff28/68747470733a2f2f7365637572652e67726176617461722e636f6d2f6176617461722f37623334666533663933623263386366343262643666363337303862663134393f73697a653d3530\" height=\"50\" width=\"50\" alt=\"Avatar for bitranox from gravatar.com\" title=\"Avatar for bitranox from gravatar.com\">          </span>          <span class=\"sidebar-section__user-gravatar-text\">            bitranox          </span>        </a>      </span></div><div class=\"sidebar-section\">  <h3 class=\"sidebar-section__title\">Classifiers</h3>  <ul class=\"sidebar-section__classifiers\">    <li>      <strong>Development Status</strong>      <ul>        <li>          <a href=\"/search/?c=Development+Status+%3A%3A+5+-+Production%2FStable\">            5 - Production/Stable          </a>        </li>      </ul>    </li>    <li>      <strong>Intended Audience</strong>      <ul>        <li>          <a href=\"/search/?c=Intended+Audience+%3A%3A+Developers\">            Developers          </a>        </li>      </ul>    </li>    <li>      <strong>License</strong>      <ul>        <li>          <a href=\"/search/?c=License+%3A%3A+OSI+Approved+%3A%3A+MIT+License\">            OSI Approved :: MIT License          </a>        </li>      </ul>    </li>    <li>      <strong>Natural Language</strong>      <ul>        <li>          <a href=\"/search/?c=Natural+Language+%3A%3A+English\">            English          </a>        </li>      </ul>    </li>    <li>      <strong>Operating System</strong>      <ul>        <li>          <a href=\"/search/?c=Operating+System+%3A%3A+OS+Independent\">            OS Independent          </a>        </li>      </ul>    </li>    <li>      <strong>Programming Language</strong>      <ul>        <li>          <a href=\"/search/?c=Programming+Language+%3A%3A+Python\">            Python          </a>        </li>      </ul>    </li>    <li>      <strong>Topic</strong>      <ul>        <li>          <a href=\"/search/?c=Topic+%3A%3A+Software+Development+%3A%3A+Libraries+%3A%3A+Python+Modules\">            Software Development :: Libraries :: Python Modules          </a>        </li>      </ul>    </li>  </ul></div>          <br>        </div>        <div id=\"history\" data-project-tabs-target=\"content\" class=\"vertical-tabs__content\" role=\"tabpanel\" aria-labelledby=\"history-tab mobile-history-tab\" tabindex=\"-1\">          <h2 class=\"page-title split-layout\">            <span>Release history</span>            <span class=\"reset-text margin-top\">              <a href=\"/help/#project-release-notifications\">Release notifications</a> |              <a href=\"/rss/project/wrapt-timeout-decorator/releases.xml\">RSS feed <i class=\"fa fa-rss\" aria-hidden=\"true\"></i></a>            </span>          </h2>          <div class=\"release-timeline\">            <div class=\"release release--latest release--current\">              <div class=\"release__meta\">                <span class=\"badge\">This version</span>              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/blue-cube.572a5bfb.svg\">              </div>              <a class=\"card release__card\" href=\"/project/wrapt-timeout-decorator/1.5.1/\">                <p class=\"release__version\">                  1.5.1                </p>                <p class=\"release__version-date\">                  <time datetime=\"2024-02-28T21:56:40+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Feb 28, 2024</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/wrapt-timeout-decorator/1.5.0/\">                <p class=\"release__version\">                  1.5.0                </p>                <p class=\"release__version-date\">                  <time datetime=\"2024-02-27T22:22:16+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Feb 27, 2024</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/wrapt-timeout-decorator/1.4.1/\">                <p class=\"release__version\">                  1.4.1                </p>                <p class=\"release__version-date\">                  <time datetime=\"2024-01-10T19:37:23+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Jan 10, 2024</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/wrapt-timeout-decorator/1.4.0/\">                <p class=\"release__version\">                  1.4.0                </p>                <p class=\"release__version-date\">                  <time datetime=\"2023-07-14T17:41:25+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Jul 14, 2023</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/wrapt-timeout-decorator/1.3.12.2/\">                <p class=\"release__version\">                  1.3.12.2                </p>                <p class=\"release__version-date\">                  <time datetime=\"2022-06-02T09:45:00+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Jun 2, 2022</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/wrapt-timeout-decorator/1.3.12/\">                <p class=\"release__version\">                  1.3.12                </p>                <p class=\"release__version-date\">                  <time datetime=\"2022-05-23T12:05:59+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  May 23, 2022</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/wrapt-timeout-decorator/1.3.11/\">                <p class=\"release__version\">                  1.3.11                </p>                <p class=\"release__version-date\">                  <time datetime=\"2022-05-23T11:52:11+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  May 23, 2022</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/wrapt-timeout-decorator/1.3.10/\">                <p class=\"release__version\">                  1.3.10                </p>                <p class=\"release__version-date\">                  <time datetime=\"2022-04-26T21:32:36+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Apr 26, 2022</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/wrapt-timeout-decorator/1.3.9/\">                <p class=\"release__version\">                  1.3.9                </p>                <p class=\"release__version-date\">                  <time datetime=\"2022-04-26T08:55:50+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Apr 26, 2022</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/wrapt-timeout-decorator/1.3.8/\">                <p class=\"release__version\">                  1.3.8                </p>                <p class=\"release__version-date\">                  <time datetime=\"2022-03-29T10:03:15+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Mar 29, 2022</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/wrapt-timeout-decorator/1.3.6/\">                <p class=\"release__version\">                  1.3.6                </p>                <p class=\"release__version-date\">                  <time datetime=\"2022-03-25T15:26:49+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Mar 25, 2022</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/wrapt-timeout-decorator/1.3.4/\">                <p class=\"release__version\">                  1.3.4                </p>                <p class=\"release__version-date\">                  <time datetime=\"2022-03-23T12:12:33+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Mar 23, 2022</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/wrapt-timeout-decorator/1.3.3/\">                <p class=\"release__version\">                  1.3.3                </p>                <p class=\"release__version-date\">                  <time datetime=\"2022-03-10T07:33:11+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Mar 10, 2022</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/wrapt-timeout-decorator/1.3.2/\">                <p class=\"release__version\">                  1.3.2                </p>                <p class=\"release__version-date\">                  <time datetime=\"2022-03-01T22:59:56+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Mar 1, 2022</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/wrapt-timeout-decorator/1.3.1/\">                <p class=\"release__version\">                  1.3.1                </p>                <p class=\"release__version-date\">                  <time datetime=\"2019-09-02T23:11:21+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Sep 2, 2019</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/wrapt-timeout-decorator/1.3.0/\">                <p class=\"release__version\">                  1.3.0                </p>                <p class=\"release__version-date\">                  <time datetime=\"2019-05-03T20:03:22+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  May 3, 2019</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/wrapt-timeout-decorator/1.2.9/\">                <p class=\"release__version\">                  1.2.9                </p>                <p class=\"release__version-date\">                  <time datetime=\"2019-05-03T17:21:29+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  May 3, 2019</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/wrapt-timeout-decorator/1.2.8/\">                <p class=\"release__version\">                  1.2.8                </p>                <p class=\"release__version-date\">                  <time datetime=\"2019-04-23T19:30:17+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Apr 23, 2019</time>                </p>              </a>            </div>            <div class=\"release release--oldest\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/wrapt-timeout-decorator/1.2.6/\">                <p class=\"release__version\">                  1.2.6                </p>                <p class=\"release__version-date\">                  <time datetime=\"2019-04-10T13:17:46+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Apr 10, 2019</time>                </p>              </a>            </div>          </div>        </div>          <div id=\"files\" data-project-tabs-target=\"content\" class=\"vertical-tabs__content\" role=\"tabpanel\" aria-labelledby=\"files-tab mobile-files-tab\" tabindex=\"-1\">            <h2 class=\"page-title\">Download files</h2>            <p>Download the file for your platform. If you're not sure which to choose, learn more about <a href=\"https://packaging.python.org/tutorials/installing-packages/\" title=\"External link\" target=\"_blank\" rel=\"noopener\">installing packages</a>.</p>            <h3>Source Distribution            </h3>                  <div class=\"file\">      <div class=\"file__graphic\">        <i class=\"far fa-file\" aria-hidden=\"true\"></i>      </div>      <div class=\"card file__card\">        <a href=\"https://files.pythonhosted.org/packages/de/3d/805cc392da0690fba1d48ae91ee7b5b621a88cace21a8d39500beabc40ca/wrapt_timeout_decorator-1.5.1.tar.gz\">          wrapt_timeout_decorator-1.5.1.tar.gz        </a>        (94.3 kB        <a href=\"#copy-hash-modal-71625c1e-e448-42cb-8abd-23efb49cdc66\">view hashes</a>)        <p class=\"file__meta\">          Uploaded <time datetime=\"2024-02-28T21:56:42+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Feb 28, 2024</time>          <code>source</code>        </p>      </div>    </div>            <h3>Built Distribution            </h3>                <div class=\"file\">      <div class=\"file__graphic\">        <i class=\"far fa-file\" aria-hidden=\"true\"></i>      </div>      <div class=\"card file__card\">        <a href=\"https://files.pythonhosted.org/packages/f8/0c/6700d125c44689c142ec1703d738c0517b3858e932f2b9149f73b5e341c0/wrapt_timeout_decorator-1.5.1-py3-none-any.whl\">          wrapt_timeout_decorator-1.5.1-py3-none-any.whl        </a>        (30.6 kB        <a href=\"#copy-hash-modal-0ba65934-d6f0-4060-8e6e-8095c5d7744d\">view hashes</a>)        <p class=\"file__meta\">          Uploaded <time datetime=\"2024-02-28T21:56:40+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Feb 28, 2024</time>          <code>py3</code>        </p>      </div>    </div>          </div><div id=\"copy-hash-modal-71625c1e-e448-42cb-8abd-23efb49cdc66\" class=\"modal modal--wide\">  <div class=\"modal__content\" role=\"dialog\">    <a href=\"#modal-close\" title=\"Close\" class=\"modal__close\">      <i class=\"fa fa-times\" aria-hidden=\"true\"></i>      <span class=\"sr-only\">Close</span>    </a>    <div class=\"modal__body\">      <h3 class=\"modal__title\"><a href=\"https://pip.pypa.io/en/stable/topics/secure-installs/#hash-checking-mode\" title=\"External link\" target=\"_blank\" rel=\"noopener\">Hashes</a> for wrapt_timeout_decorator-1.5.1.tar.gz      </h3>      <table class=\"table table--hashes\">        <caption class=\"sr-only\">Hashes for wrapt_timeout_decorator-1.5.1.tar.gz</caption>        <thead>          <tr>            <th scope=\"col\">Algorithm</th>            <th scope=\"col\">Hash digest</th>            <th></th>          </tr>        </thead>        <tbody>          <tr data-controller=\"clipboard\">            <th scope=\"row\">SHA256</th>            <td><code data-clipboard-target=\"source\">00f15646db89c629aa1b1566f4c1cf00ae6da0beece2905039f1cd7a60506a67</code></td>            <td class=\"table__align-right\">              <button type=\"button\" class=\"button button--small copy-tooltip copy-tooltip-w\" data-action=\"clipboard#copy\" data-clipboard-target=\"tooltip\" data-clipboard-tooltip-value=\"Copy to clipboard\">Copy              </button>            </td>          </tr>          <tr data-controller=\"clipboard\">            <th scope=\"row\">MD5</th>            <td><code data-clipboard-target=\"source\">483a662fa45866fe4ff09cc8c2a0761f</code></td>            <td class=\"table__align-right\">              <button type=\"button\" class=\"button button--small copy-tooltip copy-tooltip-w\" data-action=\"clipboard#copy\" data-clipboard-target=\"tooltip\" data-clipboard-tooltip-value=\"Copy to clipboard\">Copy              </button>            </td>          </tr>          <tr data-controller=\"clipboard\">            <th scope=\"row\">BLAKE2b-256</th>            <td><code data-clipboard-target=\"source\">de3d805cc392da0690fba1d48ae91ee7b5b621a88cace21a8d39500beabc40ca</code></td>            <td class=\"table__align-right\">              <button type=\"button\" class=\"button button--small copy-tooltip copy-tooltip-w\" data-action=\"clipboard#copy\" data-clipboard-target=\"tooltip\" data-clipboard-tooltip-value=\"Copy to clipboard\">Copy              </button>            </td>          </tr>        </tbody>      </table>    </div>    <div class=\"modal__footer\">      <a href=\"#modal-close\" class=\"button button--primary modal__action\">Close</a>    </div>  </div></div><div id=\"copy-hash-modal-0ba65934-d6f0-4060-8e6e-8095c5d7744d\" class=\"modal modal--wide\">  <div class=\"modal__content\" role=\"dialog\">    <a href=\"#modal-close\" title=\"Close\" class=\"modal__close\">      <i class=\"fa fa-times\" aria-hidden=\"true\"></i>      <span class=\"sr-only\">Close</span>    </a>    <div class=\"modal__body\">      <h3 class=\"modal__title\"><a href=\"https://pip.pypa.io/en/stable/topics/secure-installs/#hash-checking-mode\" title=\"External link\" target=\"_blank\" rel=\"noopener\">Hashes</a> for wrapt_timeout_decorator-1.5.1-py3-none-any.whl      </h3>      <table class=\"table table--hashes\">        <caption class=\"sr-only\">Hashes for wrapt_timeout_decorator-1.5.1-py3-none-any.whl</caption>        <thead>          <tr>            <th scope=\"col\">Algorithm</th>            <th scope=\"col\">Hash digest</th>            <th></th>          </tr>        </thead>        <tbody>          <tr data-controller=\"clipboard\">            <th scope=\"row\">SHA256</th>            <td><code data-clipboard-target=\"source\">5b0c957da947f4ded2eaa7b36afe709c21ce1da3050fe9261a090ae0714d4641</code></td>            <td class=\"table__align-right\">              <button type=\"button\" class=\"button button--small copy-tooltip copy-tooltip-w\" data-action=\"clipboard#copy\" data-clipboard-target=\"tooltip\" data-clipboard-tooltip-value=\"Copy to clipboard\">Copy              </button>            </td>          </tr>          <tr data-controller=\"clipboard\">            <th scope=\"row\">MD5</th>            <td><code data-clipboard-target=\"source\">43e59ba682f77be5686d4fffaf9a925a</code></td>            <td class=\"table__align-right\">              <button type=\"button\" class=\"button button--small copy-tooltip copy-tooltip-w\" data-action=\"clipboard#copy\" data-clipboard-target=\"tooltip\" data-clipboard-tooltip-value=\"Copy to clipboard\">Copy              </button>            </td>          </tr>          <tr data-controller=\"clipboard\">            <th scope=\"row\">BLAKE2b-256</th>            <td><code data-clipboard-target=\"source\">f80c6700d125c44689c142ec1703d738c0517b3858e932f2b9149f73b5e341c0</code></td>            <td class=\"table__align-right\">              <button type=\"button\" class=\"button button--small copy-tooltip copy-tooltip-w\" data-action=\"clipboard#copy\" data-clipboard-target=\"tooltip\" data-clipboard-tooltip-value=\"Copy to clipboard\">Copy              </button>            </td>          </tr>        </tbody>      </table>    </div>    <div class=\"modal__footer\">      <a href=\"#modal-close\" class=\"button button--primary modal__action\">Close</a>    </div>  </div></div>      </div>    </div>  </div></div>    </main>    <footer class=\"footer\">      <div class=\"footer__logo\">        <img src=\"/static/images/white-cube.2351a86c.svg\" alt=\"\" class=\"-js-white-cube\">      </div>      <div class=\"footer__menus\">        <div class=\"footer__menu\">          <h2>Help</h2>          <nav aria-label=\"Help navigation\">            <ul>              <li><a href=\"https://packaging.python.org/tutorials/installing-packages/\" title=\"External link\" target=\"_blank\" rel=\"noopener\">Installing packages</a></li>              <li><a href=\"https://packaging.python.org/tutorials/packaging-projects/\" title=\"External link\" target=\"_blank\" rel=\"noopener\">Uploading packages</a></li>              <li><a href=\"https://packaging.python.org/\" title=\"External link\" target=\"_blank\" rel=\"noopener\">User guide</a></li>              <li><a href=\"https://www.python.org/dev/peps/pep-0541/\" title=\"External link\" target=\"_blank\" rel=\"noopener\">Project name retention</a></li>              <li><a href=\"/help/\">FAQs</a></li>            </ul>          </nav>        </div>        <div class=\"footer__menu\">          <h2>About PyPI</h2>          <nav aria-label=\"About PyPI navigation\">            <ul>              <li><a href=\"https://twitter.com/PyPI\" title=\"External link\" target=\"_blank\" rel=\"noopener\">PyPI on Twitter</a></li>              <li><a href=\"https://dtdg.co/pypi\" title=\"External link\" target=\"_blank\" rel=\"noopener\">Infrastructure dashboard</a></li>              <li><a href=\"/stats/\">Statistics</a></li>              <li><a href=\"/trademarks/\">Logos & trademarks</a></li>              <li><a href=\"/sponsors/\">Our sponsors</a></li>            </ul>          </nav>        </div>        <div class=\"footer__menu\">          <h2>Contributing to PyPI</h2>          <nav aria-label=\"How to contribute navigation\">            <ul>              <li><a href=\"/help/#feedback\">Bugs and feedback</a></li>              <li><a href=\"https://github.com/pypi/warehouse\" title=\"External link\" target=\"_blank\" rel=\"noopener\">Contribute on GitHub</a></li>              <li><a href=\"https://hosted.weblate.org/projects/pypa/warehouse/\" title=\"External link\" target=\"_blank\" rel=\"noopener\">Translate PyPI</a></li>              <li><a href=\"/sponsors/\">Sponsor PyPI</a></li>              <li><a href=\"https://github.com/pypi/warehouse/graphs/contributors\" title=\"External link\" target=\"_blank\" rel=\"noopener\">Development credits</a></li>            </ul>          </nav>        </div>        <div class=\"footer__menu\">          <h2>Using PyPI</h2>          <nav aria-label=\"Using PyPI navigation\">            <ul>              <li><a href=\"https://github.com/pypa/.github/blob/main/CODE_OF_CONDUCT.md\" title=\"External link\" target=\"_blank\" rel=\"noopener\">Code of conduct</a></li>              <li><a href=\"/security/\">Report security issue</a></li>              <li><a href=\"https://www.python.org/privacy/\" title=\"External link\" target=\"_blank\" rel=\"noopener\">Privacy policy</a></li>              <li><a href=\"/policy/terms-of-use/\">Terms of use</a></li>              <li><a href=\"/policy/acceptable-use-policy/\">Acceptable Use Policy</a></li>            </ul>          </nav>        </div>      </div>      <hr class=\"footer__divider\">      <div class=\"footer__text\">        <p>Status:<a href=\"https://status.python.org/\" title=\"External link\" target=\"_blank\" rel=\"noopener\">          <span data-statuspage-domain=\"https://2p66nmmycsj3.statuspage.io\">all systems operational</span></a>        </p>        <p>Developed and maintained by the Python community, for the Python community.          <br>          <a href=\"https://donate.pypi.org\">Donate today!</a>        </p>        <p>          \"PyPI\", \"Python Package Index\", and the blocks logos are registered <a href=\"/trademarks/\">trademarks</a> of the <a href=\"https://python.org/psf-landing\" target=\"_blank\" rel=\"noopener\">Python Software Foundation</a>.<br>        </p>        <p>          \u00a9 2024 <a href=\"https://www.python.org/psf-landing/\" title=\"External link\" target=\"_blank\" rel=\"noopener\">Python Software Foundation</a><br>          <a href=\"/sitemap/\">Site map</a>        </p>      </div>      <div class=\"centered hide-on-desktop\">        <button type=\"button\" class=\"button button--switch-to-desktop hidden\" data-viewport-toggle-target=\"switchToDesktop\" data-action=\"viewport-toggle#switchToDesktop\">Switch to desktop version        </button>      </div>    </footer>    <div class=\"language-switcher\">      <form action=\"/locale/\">        <ul>          <li>            <button              class=\"language-switcher__selected\"              name=\"locale_id\" value=\"en\" type=\"submit\"            >              English            </button>          </li>          <li>            <button              name=\"locale_id\" value=\"es\" type=\"submit\"            >              espa\u00f1ol            </button>          </li>          <li>            <button              name=\"locale_id\" value=\"fr\" type=\"submit\"            >              fran\u00e7ais            </button>          </li>          <li>            <button              name=\"locale_id\" value=\"ja\" type=\"submit\"            >              \u65e5\u672c\u8a9e            </button>          </li>          <li>            <button              name=\"locale_id\" value=\"pt_BR\" type=\"submit\"            >              portugu\u00eas (Brasil)            </button>          </li>          <li>            <button              name=\"locale_id\" value=\"uk\" type=\"submit\"            >              \u0443\u043a\u0440\u0430\u0457\u043d\u0441\u044c\u043a\u0430            </button>          </li>          <li>            <button              name=\"locale_id\" value=\"el\" type=\"submit\"            >              \u0395\u03bb\u03bb\u03b7\u03bd\u03b9\u03ba\u03ac            </button>          </li>          <li>            <button              name=\"locale_id\" value=\"de\" type=\"submit\"            >              Deutsch            </button>          </li>          <li>            <button              name=\"locale_id\" value=\"zh_Hans\" type=\"submit\"            >              \u4e2d\u6587 (\u7b80\u4f53)            </button>          </li>          <li>            <button              name=\"locale_id\" value=\"zh_Hant\" type=\"submit\"            >              \u4e2d\u6587 (\u7e41\u9ad4)            </button>          </li>          <li>            <button              name=\"locale_id\" value=\"ru\" type=\"submit\"            >              \u0440\u0443\u0441\u0441\u043a\u0438\u0439            </button>          </li>          <li>            <button              name=\"locale_id\" value=\"he\" type=\"submit\"            >              \u05e2\u05d1\u05e8\u05d9\u05ea            </button>          </li>          <li>            <button              name=\"locale_id\" value=\"eo\" type=\"submit\"            >              esperanto            </button>          </li>        </ul>      </form>    </div><div class=\"sponsors\">  <p class=\"sponsors__title\">Supported by</p>  <div class=\"sponsors__divider\"></div>        <a class=\"sponsors__sponsor\" target=\"_blank\" rel=\"noopener\" href=\"https://aws.amazon.com/\">          <img class=sponsors__image src=\"https://pypi-camo.freetls.fastly.net/ed7074cadad1a06f56bc520ad9bd3e00d0704c5b/68747470733a2f2f73746f726167652e676f6f676c65617069732e636f6d2f707970692d6173736574732f73706f6e736f726c6f676f732f6177732d77686974652d6c6f676f2d7443615473387a432e706e67\" alt=AWS loading=lazy>          <span class=\"sponsors__name\">AWS</span>          <span class=\"sponsors__service\">            Cloud computing and Security Sponsor          </span>        </a>        <a class=\"sponsors__sponsor\" target=\"_blank\" rel=\"noopener\" href=\"https://www.datadoghq.com/\">          <img class=sponsors__image src=\"https://pypi-camo.freetls.fastly.net/8855f7c063a3bdb5b0ce8d91bfc50cf851cc5c51/68747470733a2f2f73746f726167652e676f6f676c65617069732e636f6d2f707970692d6173736574732f73706f6e736f726c6f676f732f64617461646f672d77686974652d6c6f676f2d6668644c4e666c6f2e706e67\" alt=Datadog loading=lazy>          <span class=\"sponsors__name\">Datadog</span>          <span class=\"sponsors__service\">            Monitoring          </span>        </a>        <a class=\"sponsors__sponsor\" target=\"_blank\" rel=\"noopener\" href=\"https://www.fastly.com/\">          <img class=sponsors__image src=\"https://pypi-camo.freetls.fastly.net/df6fe8829cbff2d7f668d98571df1fd011f36192/68747470733a2f2f73746f726167652e676f6f676c65617069732e636f6d2f707970692d6173736574732f73706f6e736f726c6f676f732f666173746c792d77686974652d6c6f676f2d65684d3077735f6f2e706e67\" alt=Fastly loading=lazy>          <span class=\"sponsors__name\">Fastly</span>          <span class=\"sponsors__service\">            CDN          </span>        </a>        <a class=\"sponsors__sponsor\" target=\"_blank\" rel=\"noopener\" href=\"https://careers.google.com/\">          <img class=sponsors__image src=\"https://pypi-camo.freetls.fastly.net/420cc8cf360bac879e24c923b2f50ba7d1314fb0/68747470733a2f2f73746f726167652e676f6f676c65617069732e636f6d2f707970692d6173736574732f73706f6e736f726c6f676f732f676f6f676c652d77686974652d6c6f676f2d616734424e3774332e706e67\" alt=Google loading=lazy>          <span class=\"sponsors__name\">Google</span>          <span class=\"sponsors__service\">            Download Analytics          </span>        </a>        <a class=\"sponsors__sponsor\" target=\"_blank\" rel=\"noopener\" href=\"https://www.python.org/psf/sponsors/#microsoft\">          <img class=sponsors__image src=\"https://pypi-camo.freetls.fastly.net/524d1ce72f7772294ca4c1fe05d21dec8fa3f8ea/68747470733a2f2f73746f726167652e676f6f676c65617069732e636f6d2f707970692d6173736574732f73706f6e736f726c6f676f732f6d6963726f736f66742d77686974652d6c6f676f2d5a443172685444462e706e67\" alt=Microsoft loading=lazy>          <span class=\"sponsors__name\">Microsoft</span>          <span class=\"sponsors__service\">            PSF Sponsor          </span>        </a>        <a class=\"sponsors__sponsor\" target=\"_blank\" rel=\"noopener\" href=\"https://www.pingdom.com/\">          <img class=sponsors__image src=\"https://pypi-camo.freetls.fastly.net/d01053c02f3a626b73ffcb06b96367fdbbf9e230/68747470733a2f2f73746f726167652e676f6f676c65617069732e636f6d2f707970692d6173736574732f73706f6e736f726c6f676f732f70696e67646f6d2d77686974652d6c6f676f2d67355831547546362e706e67\" alt=Pingdom loading=lazy>          <span class=\"sponsors__name\">Pingdom</span>          <span class=\"sponsors__service\">            Monitoring          </span>        </a>        <a class=\"sponsors__sponsor\" target=\"_blank\" rel=\"noopener\" href=\"https://getsentry.com/for/python\">          <img class=sponsors__image src=\"https://pypi-camo.freetls.fastly.net/67af7117035e2345bacb5a82e9aa8b5b3e70701d/68747470733a2f2f73746f726167652e676f6f676c65617069732e636f6d2f707970692d6173736574732f73706f6e736f726c6f676f732f73656e7472792d77686974652d6c6f676f2d4a2d6b64742d706e2e706e67\" alt=Sentry loading=lazy>          <span class=\"sponsors__name\">Sentry</span>          <span class=\"sponsors__service\">            Error logging          </span>        </a>        <a class=\"sponsors__sponsor\" target=\"_blank\" rel=\"noopener\" href=\"https://statuspage.io\">          <img class=sponsors__image src=\"https://pypi-camo.freetls.fastly.net/b611884ff90435a0575dbab7d9b0d3e60f136466/68747470733a2f2f73746f726167652e676f6f676c65617069732e636f6d2f707970692d6173736574732f73706f6e736f726c6f676f732f737461747573706167652d77686974652d6c6f676f2d5467476c6a4a2d502e706e67\" alt=StatusPage loading=lazy>          <span class=\"sponsors__name\">StatusPage</span>          <span class=\"sponsors__service\">            Status page          </span>        </a></div>  </body></html>",
  "embeddings": []
}
{
  "libtype": "pypi",
  "libname": "plum-py",
  "url": "https://plum-py.readthedocs.io/en/latest/index.html",
  "html": "<!DOCTYPE html><!--[if IE 8]><html class=\"no-js lt-ie9\" lang=\"en\" > <![endif]--><!--[if gt IE 8]><!--> <html class=\"no-js\" lang=\"en\" > <!--<![endif]--><head>  <meta charset=\"utf-8\">    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">    <title>[plum] Pack/Unpack Memory &mdash; plum 0.8.7 documentation</title>              <script type=\"text/javascript\" src=\"_static/js/modernizr.min.js\"></script>            <script type=\"text/javascript\" id=\"documentation_options\" data-url_root=\"./\" src=\"_static/documentation_options.js\"></script>        <script type=\"text/javascript\" src=\"_static/jquery.js\"></script>        <script type=\"text/javascript\" src=\"_static/underscore.js\"></script>        <script type=\"text/javascript\" src=\"_static/doctools.js\"></script>        <script type=\"text/javascript\" src=\"_static/language_data.js\"></script>        <script async=\"async\" type=\"text/javascript\" src=\"/_/static/javascript/readthedocs-doc-embed.js\"></script>        <script type=\"text/javascript\" src=\"_static/js/theme.js\"></script>        <link rel=\"stylesheet\" href=\"_static/css/theme.css\" type=\"text/css\" />  <link rel=\"stylesheet\" href=\"_static/pygments.css\" type=\"text/css\" />    <link rel=\"author\" title=\"About these documents\" href=\"about.html\" />    <link rel=\"index\" title=\"Index\" href=\"genindex.html\" />    <link rel=\"search\" title=\"Search\" href=\"search.html\" />    <link rel=\"next\" title=\"[plum] About\" href=\"about.html\" /> <!-- RTD Extra Head --><link rel=\"stylesheet\" href=\"/_/static/css/readthedocs-doc-embed.css\" type=\"text/css\" /><script type=\"application/json\" id=\"READTHEDOCS_DATA\">{\"ad_free\": false, \"api_host\": \"https://readthedocs.org\", \"builder\": \"sphinx\", \"canonical_url\": null, \"docroot\": \"/docs/\", \"features\": {\"docsearch_disabled\": false}, \"global_analytics_code\": \"UA-17997319-1\", \"language\": \"en\", \"page\": \"index\", \"programming_language\": \"words\", \"project\": \"plum-py\", \"proxied_api_host\": \"/_\", \"source_suffix\": \".rst\", \"subprojects\": {}, \"theme\": \"sphinx_rtd_theme\", \"user_analytics_code\": \"\", \"version\": \"latest\"}</script><!--Using this variable directly instead of using `JSON.parse` is deprecated.The READTHEDOCS_DATA global variable will be removed in the future.--><script type=\"text/javascript\">READTHEDOCS_DATA = JSON.parse(document.getElementById('READTHEDOCS_DATA').innerHTML);</script><script type=\"text/javascript\" src=\"/_/static/javascript/readthedocs-analytics.js\" async=\"async\"></script><!-- end RTD <extrahead> --></head><body class=\"wy-body-for-nav\">     <div class=\"wy-grid-for-nav\">        <nav data-toggle=\"wy-nav-shift\" class=\"wy-nav-side\">      <div class=\"wy-side-scroll\">        <div class=\"wy-side-nav-search\" >                                <a href=\"#\" class=\"icon icon-home\"> plum                              </a>                                                            <div class=\"version\">                latest              </div>                                <div role=\"search\">  <form id=\"rtd-search-form\" class=\"wy-form\" action=\"search.html\" method=\"get\">    <input type=\"text\" name=\"q\" placeholder=\"Search docs\" />    <input type=\"hidden\" name=\"check_keywords\" value=\"yes\" />    <input type=\"hidden\" name=\"area\" value=\"default\" />  </form></div>                  </div>        <div class=\"wy-menu wy-menu-vertical\" data-spy=\"affix\" role=\"navigation\" aria-label=\"main navigation\">                                                                                      <ul><li class=\"toctree-l1\"><a class=\"reference internal\" href=\"about.html\">About</a></li><li class=\"toctree-l1\"><a class=\"reference internal\" href=\"contribute.html\">Contributing</a></li><li class=\"toctree-l1\"><a class=\"reference internal\" href=\"errata.html\">Errata</a></li><li class=\"toctree-l1\"><a class=\"reference internal\" href=\"installation.html\">Installation</a></li><li class=\"toctree-l1\"><a class=\"reference internal\" href=\"reference/index.html\">Reference</a></li><li class=\"toctree-l1\"><a class=\"reference internal\" href=\"release_notes.html\">Release Notes</a></li><li class=\"toctree-l1\"><a class=\"reference internal\" href=\"tutorials/index.html\">Tutorials</a></li></ul>                              </div>      </div>    </nav>    <section data-toggle=\"wy-nav-shift\" class=\"wy-nav-content-wrap\">            <nav class=\"wy-nav-top\" aria-label=\"top navigation\">                  <i data-toggle=\"wy-nav-top\" class=\"fa fa-bars\"></i>          <a href=\"#\">plum</a>              </nav>      <div class=\"wy-nav-content\">                <div class=\"rst-content\">                  <div role=\"navigation\" aria-label=\"breadcrumbs navigation\">  <ul class=\"wy-breadcrumbs\">          <li><a href=\"#\">Docs</a> &raquo;</li>              <li>[plum] Pack/Unpack Memory</li>              <li class=\"wy-breadcrumbs-aside\">                                              <a href=\"https://gitlab.com/dangass/plum/blob/master/docs/index.rst\" class=\"fa fa-gitlab\"> Edit on GitLab</a>                                    </li>      </ul>    <hr/></div>          <div role=\"main\" class=\"document\" itemscope=\"itemscope\" itemtype=\"http://schema.org/Article\">           <div itemprop=\"articleBody\">              <span class=\"target\" id=\"module-plum\"></span><p>Classes and utilities for packing/unpacking bytes.</p><div class=\"section\" id=\"plum-pack-unpack-memory\"><h1>[plum] Pack/Unpack Memory<a class=\"headerlink\" href=\"#plum-pack-unpack-memory\" title=\"Permalink to this headline\">\u00b6</a></h1><a class=\"reference external image-reference\" href=\"https://gitlab.com/dangass/plum/commits/master\"><img alt=\"Pipeline Status\" src=\"https://gitlab.com/dangass/plum/badges/master/pipeline.svg\" /></a><a class=\"reference external image-reference\" href=\"https://gitlab.com/dangass/plum/commits/master\"><img alt=\"Coverage Report\" src=\"https://gitlab.com/dangass/plum/badges/master/coverage.svg\" /></a><a class=\"reference external image-reference\" href=\"https://plum-py.readthedocs.io/en/latest/?badge=latest\"><img alt=\"Documentation Status\" src=\"https://readthedocs.org/projects/plum-py/badge/?version=latest\" /></a><p>The <a class=\"reference internal\" href=\"#\"><span class=\"doc\">plum-py</span></a> Python package provides classes and utility functions totransform byte sequences into Python objects and back. While similar inpurpose to Python\u2019s standard library <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">struct</span></code> module, this packageprovides a larger set of format specifiers and is extensible, allowingyou to easily create complex ones of your own.</p><div class=\"toctree-wrapper compound\"></div><p>The following summarizes the <a class=\"reference internal\" href=\"#module-plum\" title=\"plum\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">plum</span></code></a> transforms available in this package.</p><blockquote><div><table border=\"1\" class=\"docutils\"><colgroup><col width=\"55%\" /><col width=\"45%\" /></colgroup><thead valign=\"bottom\"><tr class=\"row-odd\"><th class=\"head\">Transform</th><th class=\"head\">Description</th></tr></thead><tbody valign=\"top\"><tr class=\"row-even\"><td><a class=\"reference internal\" href=\"reference/array.html\"><span class=\"doc\">plum.array</span></a></td><td>list of uniformly typed</td></tr><tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"reference/attrdict.html\"><span class=\"doc\">plum.attrdict</span></a></td><td>dictionary of uniquely typed items</td></tr><tr class=\"row-even\"><td><a class=\"reference internal\" href=\"reference/bigendian.html\"><span class=\"doc\">plum.bigendian</span></a></td><td>common big endian byte order transforms</td></tr><tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"reference/bitfields.html\"><span class=\"doc\">plum.bitfields</span></a></td><td>integer with bit field accessors</td></tr><tr class=\"row-even\"><td><a class=\"reference internal\" href=\"reference/bytes.html\"><span class=\"doc\">plum.bytes</span></a></td><td>array of bytes</td></tr><tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"reference/decimal.html\"><span class=\"doc\">plum.decimal</span></a></td><td>fixed point decimal numbers</td></tr><tr class=\"row-even\"><td><a class=\"reference internal\" href=\"reference/enum.html\"><span class=\"doc\">plum.enum</span></a></td><td>integer enumerated constants</td></tr><tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"reference/flag.html\"><span class=\"doc\">plum.flag</span></a></td><td>integer with bit flags</td></tr><tr class=\"row-even\"><td><a class=\"reference internal\" href=\"reference/float.html\"><span class=\"doc\">plum.float</span></a></td><td>floating point</td></tr><tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"reference/int.html\"><span class=\"doc\">plum.int</span></a></td><td>integers</td></tr><tr class=\"row-even\"><td><a class=\"reference internal\" href=\"reference/ipaddress.html\"><span class=\"doc\">plum.ipaddress</span></a></td><td>IP address/network/interface objects</td></tr><tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"reference/items.html\"><span class=\"doc\">plum.items</span></a></td><td>collection of uniquely typed items</td></tr><tr class=\"row-even\"><td><a class=\"reference internal\" href=\"reference/littleendian.html\"><span class=\"doc\">plum.littleendian</span></a></td><td>common little endian byte order transforms</td></tr><tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"reference/none.html\"><span class=\"doc\">plum.none</span></a></td><td>no bytes</td></tr><tr class=\"row-even\"><td><a class=\"reference internal\" href=\"reference/optional.html\"><span class=\"doc\">plum.optional</span></a></td><td>optional item</td></tr><tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"reference/str.html\"><span class=\"doc\">plum.str</span></a></td><td>strings</td></tr><tr class=\"row-even\"><td><a class=\"reference internal\" href=\"reference/sized.html\"><span class=\"doc\">plum.sized</span></a></td><td>variably sized object with size header</td></tr><tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"reference/structure.html\"><span class=\"doc\">plum.structure</span></a></td><td>structure of uniquely typed members</td></tr></tbody></table></div></blockquote><div class=\"section\" id=\"quick-start\"><h2>Quick Start<a class=\"headerlink\" href=\"#quick-start\" title=\"Permalink to this headline\">\u00b6</a></h2><div class=\"section\" id=\"numeric-types\"><h3>Numeric Types<a class=\"headerlink\" href=\"#numeric-types\" title=\"Permalink to this headline\">\u00b6</a></h3><p>Numeric transforms control the format of numeric data bytes. You may define your owntransforms to choose your own naming conventions or simply use the common transformsprovided by either the <a class=\"reference internal\" href=\"reference/bigendian.html#module-plum.bigendian\" title=\"plum.bigendian\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bigendian</span></code></a> or <cite>~plum.littleendian</cite> modules:</p><div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">plum.littleendian</span> <span class=\"kn\">import</span> <span class=\"n\">uint8</span><span class=\"p\">,</span> <span class=\"n\">uint16</span><span class=\"p\">,</span> <span class=\"n\">single</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">plum.utilities</span> <span class=\"kn\">import</span> <span class=\"n\">pack</span><span class=\"p\">,</span> <span class=\"n\">unpack</span><span class=\"gp\">&gt;&gt;&gt;</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">fmt</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">uint8</span><span class=\"p\">,</span> <span class=\"n\">uint16</span><span class=\"p\">,</span> <span class=\"n\">single</span><span class=\"p\">]</span><span class=\"gp\">&gt;&gt;&gt;</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">buffer</span> <span class=\"o\">=</span> <span class=\"n\">pack</span><span class=\"p\">([</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">fmt</span><span class=\"p\">)</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">buffer</span><span class=\"go\">b&#39;\\x02\\x01\\x00\\x00\\x00\\x00\\x00&#39;</span><span class=\"gp\">&gt;&gt;&gt;</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">unpack</span><span class=\"p\">(</span><span class=\"n\">fmt</span><span class=\"p\">,</span> <span class=\"n\">buffer</span><span class=\"p\">)</span><span class=\"go\">[2, 1, 0.0]</span></pre></div></div></div><div class=\"section\" id=\"arrays\"><h3>Arrays<a class=\"headerlink\" href=\"#arrays\" title=\"Permalink to this headline\">\u00b6</a></h3><p>Without dims, <code class=\"docutils literal notranslate\"><span class=\"pre\">ArrayX</span></code> transforms accept any number of items when packing andgreedily consume bytes until exhaustion when unpacking:</p><div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">plum.array</span> <span class=\"kn\">import</span> <span class=\"n\">ArrayX</span><span class=\"gp\">&gt;&gt;&gt;</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">greedy_array</span> <span class=\"o\">=</span> <span class=\"n\">ArrayX</span><span class=\"p\">(</span><span class=\"n\">fmt</span><span class=\"o\">=</span><span class=\"n\">uint8</span><span class=\"p\">)</span><span class=\"gp\">&gt;&gt;&gt;</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># greedy arrays accept any number of items when packing</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">pack</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"n\">fmt</span><span class=\"o\">=</span><span class=\"n\">greedy_array</span><span class=\"p\">)</span><span class=\"go\">b&#39;\\x01\\x02&#39;</span><span class=\"gp\">&gt;&gt;&gt;</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># greedy arrays consume everything that is left in the buffer</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">unpack</span><span class=\"p\">(</span><span class=\"n\">greedy_array</span><span class=\"p\">,</span> <span class=\"sa\">b</span><span class=\"s1\">&#39;</span><span class=\"se\">\\x01\\x02\\x03\\x04</span><span class=\"s1\">&#39;</span><span class=\"p\">)</span><span class=\"go\">[1, 2, 3, 4]</span></pre></div></div><p>Specifying <code class=\"docutils literal notranslate\"><span class=\"pre\">dims</span></code> controls the the array dimensions:</p><div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">array_2x2</span> <span class=\"o\">=</span> <span class=\"n\">ArrayX</span><span class=\"p\">(</span><span class=\"n\">fmt</span><span class=\"o\">=</span><span class=\"n\">uint8</span><span class=\"p\">,</span> <span class=\"n\">dims</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">))</span><span class=\"gp\">&gt;&gt;&gt;</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">buffer</span> <span class=\"o\">=</span> <span class=\"n\">array_2x2</span><span class=\"o\">.</span><span class=\"n\">pack</span><span class=\"p\">([[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">]])</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">buffer</span><span class=\"go\">b&#39;\\x01\\x02\\x03\\x04&#39;</span><span class=\"gp\">&gt;&gt;&gt;</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">array_2x2</span><span class=\"o\">.</span><span class=\"n\">unpack</span><span class=\"p\">(</span><span class=\"n\">buffer</span><span class=\"p\">)</span><span class=\"go\">[[1, 2], [3, 4]]</span></pre></div></div></div><div class=\"section\" id=\"structures\"><h3>Structures<a class=\"headerlink\" href=\"#structures\" title=\"Permalink to this headline\">\u00b6</a></h3><p><a class=\"reference internal\" href=\"reference/structure.html#plum.structure.Structure\" title=\"plum.structure.Structure\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Structure</span></code></a> offers a succinct and intuitive method fordefining the bytes format for a sequence of uniquely typed members:</p><div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">plum.structure</span> <span class=\"kn\">import</span> <span class=\"n\">Structure</span><span class=\"p\">,</span> <span class=\"n\">member</span><span class=\"gp\">&gt;&gt;&gt;</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">class</span> <span class=\"nc\">MyStruct</span><span class=\"p\">(</span><span class=\"n\">Structure</span><span class=\"p\">):</span><span class=\"gp\">... </span>    <span class=\"n\">byte</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"n\">member</span><span class=\"p\">(</span><span class=\"n\">fmt</span><span class=\"o\">=</span><span class=\"n\">uint8</span><span class=\"p\">)</span><span class=\"gp\">... </span>    <span class=\"n\">word</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"n\">member</span><span class=\"p\">(</span><span class=\"n\">fmt</span><span class=\"o\">=</span><span class=\"n\">uint16</span><span class=\"p\">,</span> <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"gp\">... </span>    <span class=\"n\">array</span><span class=\"p\">:</span> <span class=\"nb\">list</span> <span class=\"o\">=</span> <span class=\"n\">member</span><span class=\"p\">(</span><span class=\"n\">fmt</span><span class=\"o\">=</span><span class=\"n\">array_2x2</span><span class=\"p\">)</span><span class=\"gp\">...</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">buffer</span> <span class=\"o\">=</span> <span class=\"n\">pack</span><span class=\"p\">(</span><span class=\"n\">MyStruct</span><span class=\"p\">(</span><span class=\"n\">byte</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">array</span><span class=\"o\">=</span><span class=\"p\">[[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">]]))</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">buffer</span><span class=\"go\">b&#39;\\x02\\x00\\x00\\x01\\x02\\x03\\x04&#39;</span><span class=\"gp\">&gt;&gt;&gt;</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">mystruct</span> <span class=\"o\">=</span> <span class=\"n\">unpack</span><span class=\"p\">(</span><span class=\"n\">MyStruct</span><span class=\"p\">,</span> <span class=\"n\">buffer</span><span class=\"p\">)</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">mystruct</span><span class=\"go\">MyStruct(byte=2, word=0, array=[[1, 2], [3, 4]])</span><span class=\"gp\">&gt;&gt;&gt;</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># access members via attribute or index</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">mystruct</span><span class=\"o\">.</span><span class=\"n\">byte</span><span class=\"go\">2</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">mystruct</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"go\">2</span></pre></div></div><p><a class=\"reference internal\" href=\"reference/structure.html#plum.structure.Structure\" title=\"plum.structure.Structure\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Structure</span></code></a> offers many features. Be sure to consult the<a class=\"reference internal\" href=\"reference/index.html\"><span class=\"doc\">API reference</span></a> and <a class=\"reference internal\" href=\"tutorials/index.html\"><span class=\"doc\">Tutorials</span></a> since you will likely use thistype often.</p></div><div class=\"section\" id=\"byte-breakdown-summaries\"><h3>Byte Breakdown Summaries<a class=\"headerlink\" href=\"#byte-breakdown-summaries\" title=\"Permalink to this headline\">\u00b6</a></h3><p>Variants to the <code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">pack()</span></code> and <code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">unpack()</span></code> utility functions existfor additionally obtaining a byte by byte summary of the transformation:</p><div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">plum.utilities</span> <span class=\"kn\">import</span> <span class=\"n\">pack_and_dump</span><span class=\"p\">,</span> <span class=\"n\">unpack_and_dump</span><span class=\"gp\">&gt;&gt;&gt;</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">buffer</span><span class=\"p\">,</span> <span class=\"n\">dump</span> <span class=\"o\">=</span> <span class=\"n\">pack_and_dump</span><span class=\"p\">([[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]],</span> <span class=\"n\">fmt</span><span class=\"o\">=</span><span class=\"n\">array_2x2</span><span class=\"p\">)</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">dump</span><span class=\"p\">)</span><span class=\"go\">+--------+--------+-------+-------+-----------------+</span><span class=\"go\">| Offset | Access | Value | Bytes | Format          |</span><span class=\"go\">+--------+--------+-------+-------+-----------------+</span><span class=\"go\">|        |        |       |       | List[List[int]] |</span><span class=\"go\">|        | [0]    |       |       |                 |</span><span class=\"go\">| 0      |   [0]  | 0     | 00    | uint8           |</span><span class=\"go\">| 1      |   [1]  | 1     | 01    | uint8           |</span><span class=\"go\">|        | [1]    |       |       |                 |</span><span class=\"go\">| 2      |   [0]  | 2     | 02    | uint8           |</span><span class=\"go\">| 3      |   [1]  | 3     | 03    | uint8           |</span><span class=\"go\">+--------+--------+-------+-------+-----------------+</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">array</span><span class=\"p\">,</span> <span class=\"n\">dump</span> <span class=\"o\">=</span> <span class=\"n\">unpack_and_dump</span><span class=\"p\">(</span><span class=\"n\">array_2x2</span><span class=\"p\">,</span> <span class=\"n\">buffer</span><span class=\"p\">)</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">dump</span><span class=\"p\">)</span><span class=\"go\">+--------+--------+-------+-------+-----------------+</span><span class=\"go\">| Offset | Access | Value | Bytes | Format          |</span><span class=\"go\">+--------+--------+-------+-------+-----------------+</span><span class=\"go\">|        |        |       |       | List[List[int]] |</span><span class=\"go\">|        | [0]    |       |       |                 |</span><span class=\"go\">| 0      |   [0]  | 0     | 00    | uint8           |</span><span class=\"go\">| 1      |   [1]  | 1     | 01    | uint8           |</span><span class=\"go\">|        | [1]    |       |       |                 |</span><span class=\"go\">| 2      |   [0]  | 2     | 02    | uint8           |</span><span class=\"go\">| 3      |   [1]  | 3     | 03    | uint8           |</span><span class=\"go\">+--------+--------+-------+-------+-----------------+</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">array</span><span class=\"go\">[[0, 1], [2, 3]]</span></pre></div></div><p>Structure instances offer a <code class=\"docutils literal notranslate\"><span class=\"pre\">dump</span></code> property which you may convert toa string and print yourself. Alternatively, it prints the summarywhen executed:</p><div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">mystruct</span> <span class=\"o\">=</span> <span class=\"n\">MyStruct</span><span class=\"p\">(</span><span class=\"n\">byte</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">array</span><span class=\"o\">=</span><span class=\"p\">[[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">]])</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">mystruct</span><span class=\"o\">.</span><span class=\"n\">dump</span><span class=\"p\">()</span><span class=\"go\">+--------+---------+-------+-------+----------------------+</span><span class=\"go\">| Offset | Access  | Value | Bytes | Format               |</span><span class=\"go\">+--------+---------+-------+-------+----------------------+</span><span class=\"go\">|        |         |       |       | MyStruct (Structure) |</span><span class=\"go\">| 0      | byte    | 2     | 02    | uint8                |</span><span class=\"go\">| 1      | word    | 0     | 00 00 | uint16               |</span><span class=\"go\">|        | array   |       |       | List[List[int]]      |</span><span class=\"go\">|        |   [0]   |       |       |                      |</span><span class=\"go\">| 3      |     [0] | 1     | 01    | uint8                |</span><span class=\"go\">| 4      |     [1] | 2     | 02    | uint8                |</span><span class=\"go\">|        |   [1]   |       |       |                      |</span><span class=\"go\">| 5      |     [0] | 3     | 03    | uint8                |</span><span class=\"go\">| 6      |     [1] | 4     | 04    | uint8                |</span><span class=\"go\">+--------+---------+-------+-------+----------------------+</span></pre></div></div><div class=\"admonition seealso\"><p class=\"first admonition-title\">See also</p><p class=\"last\"><a class=\"reference internal\" href=\"tutorials/basics/dumps.html\"><span class=\"doc\">Byte Breakdown Summary Tutorial</span></a></p></div></div><div class=\"section\" id=\"enumerations\"><h3>Enumerations<a class=\"headerlink\" href=\"#enumerations\" title=\"Permalink to this headline\">\u00b6</a></h3><p>Enumeration transforms control the format of integer enumeration data bytes.</p><div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">enum</span> <span class=\"kn\">import</span> <span class=\"n\">IntEnum</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">plum.enum</span> <span class=\"kn\">import</span> <span class=\"n\">EnumX</span><span class=\"gp\">&gt;&gt;&gt;</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">class</span> <span class=\"nc\">Pet</span><span class=\"p\">(</span><span class=\"n\">IntEnum</span><span class=\"p\">):</span><span class=\"gp\">... </span>    <span class=\"n\">CAT</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"gp\">... </span>    <span class=\"n\">DOG</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"gp\">...</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">class</span> <span class=\"nc\">Family</span><span class=\"p\">(</span><span class=\"n\">Structure</span><span class=\"p\">):</span><span class=\"gp\">... </span>    <span class=\"n\">nkids</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"n\">member</span><span class=\"p\">(</span><span class=\"n\">fmt</span><span class=\"o\">=</span><span class=\"n\">uint8</span><span class=\"p\">)</span><span class=\"gp\">... </span>    <span class=\"n\">pet</span><span class=\"p\">:</span> <span class=\"n\">Pet</span> <span class=\"o\">=</span> <span class=\"n\">member</span><span class=\"p\">(</span><span class=\"n\">fmt</span><span class=\"o\">=</span><span class=\"n\">EnumX</span><span class=\"p\">(</span><span class=\"n\">enum</span><span class=\"o\">=</span><span class=\"n\">Pet</span><span class=\"p\">,</span> <span class=\"n\">nbytes</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">))</span><span class=\"gp\">...</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">family</span> <span class=\"o\">=</span> <span class=\"n\">Family</span><span class=\"o\">.</span><span class=\"n\">unpack</span><span class=\"p\">(</span><span class=\"sa\">b</span><span class=\"s1\">&#39;</span><span class=\"se\">\\x02\\x01</span><span class=\"s1\">&#39;</span><span class=\"p\">)</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">family</span><span class=\"o\">.</span><span class=\"n\">dump</span><span class=\"p\">()</span><span class=\"go\">+--------+--------+---------+-------+--------------------+</span><span class=\"go\">| Offset | Access | Value   | Bytes | Format             |</span><span class=\"go\">+--------+--------+---------+-------+--------------------+</span><span class=\"go\">|        |        |         |       | Family (Structure) |</span><span class=\"go\">| 0      | nkids  | 2       | 02    | uint8              |</span><span class=\"go\">| 1      | pet    | Pet.DOG | 01    | Pet (IntEnum)      |</span><span class=\"go\">+--------+--------+---------+-------+--------------------+</span><span class=\"gp\">&gt;&gt;&gt;</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">family</span><span class=\"o\">.</span><span class=\"n\">pet</span><span class=\"go\">&lt;Pet.DOG: 1&gt;</span></pre></div></div><p>The default <a class=\"reference internal\" href=\"reference/enum.html#plum.enum.EnumX\" title=\"plum.enum.EnumX\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">EnumX</span></code></a> behavior raises an exception when packing or unpackingvalues that are not members of the enumeration. See the <a class=\"reference internal\" href=\"reference/enum.html#plum.enum.EnumX\" title=\"plum.enum.EnumX\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">EnumX</span></code></a> API Referenceto discover how to create an enum transformation which allows packing andunpacking operations to succeed for values that aren\u2019t members of theenumeration.</p></div></div></div>           </div>                     </div>          <footer>      <div class=\"rst-footer-buttons\" role=\"navigation\" aria-label=\"footer navigation\">              <a href=\"about.html\" class=\"btn btn-neutral float-right\" title=\"[plum] About\" accesskey=\"n\" rel=\"next\">Next <span class=\"fa fa-arrow-circle-right\"></span></a>                </div>    <hr/>  <div role=\"contentinfo\">    <p>        &copy; Copyright 2023, Daniel Mark Gass              <span class=\"commit\">          Revision <code>870b6950</code>.        </span>          </p>  </div>  Built with <a href=\"http://sphinx-doc.org/\">Sphinx</a> using a <a href=\"https://github.com/rtfd/sphinx_rtd_theme\">theme</a> provided by <a href=\"https://readthedocs.org\">Read the Docs</a>. </footer>        </div>      </div>    </section>  </div>    <div class=\"rst-versions\" data-toggle=\"rst-versions\" role=\"note\" aria-label=\"versions\">    <span class=\"rst-current-version\" data-toggle=\"rst-current-version\">      <span class=\"fa fa-book\"> Read the Docs</span>      v: latest      <span class=\"fa fa-caret-down\"></span>    </span>    <div class=\"rst-other-versions\">      <dl>        <dt>Versions</dt>                  <dd><a href=\"/en/latest/\">latest</a></dd>                  <dd><a href=\"/en/stable/\">stable</a></dd>              </dl>      <dl>        <dt>Downloads</dt>              </dl>      <dl>        <dt>On Read the Docs</dt>          <dd>            <a href=\"//readthedocs.org/projects/plum-py/?fromdocs=plum-py\">Project Home</a>          </dd>          <dd>            <a href=\"//readthedocs.org/builds/plum-py/?fromdocs=plum-py\">Builds</a>          </dd>      </dl>      <hr/>      Free document hosting provided by <a href=\"http://www.readthedocs.org\">Read the Docs</a>.    </div>  </div>  <script type=\"text/javascript\">      jQuery(function () {          SphinxRtdTheme.Navigation.enable(true);      });  </script>     </body></html>",
  "embeddings": []
}
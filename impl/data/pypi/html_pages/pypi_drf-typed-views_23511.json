{
  "libtype": "pypi",
  "libname": "drf-typed-views",
  "url": "https://pypi.org/project/drf-typed-views/",
  "html": "<!DOCTYPE html><html lang=\"en\" dir=\"ltr\">  <head>    <meta charset=\"utf-8\">    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">    <meta name=\"defaultLanguage\" content=\"en\">    <meta name=\"availableLanguages\" content=\"en, es, fr, ja, pt_BR, uk, el, de, zh_Hans, zh_Hant, ru, he, eo\">    <title>drf-typed-views \u00b7 PyPI</title>    <meta name=\"description\" content=\"Use type annotations for automatic request validation in Django REST Framework\">    <link rel=\"stylesheet\" href=\"/static/css/warehouse-ltr.99b3104d.css\">    <link rel=\"stylesheet\" href=\"/static/css/fontawesome.b50b476c.css\">    <link rel=\"stylesheet\" href=\"https://fonts.googleapis.com/css?family=Source+Sans+3:400,400italic,600,600italic,700,700italic%7CSource+Code+Pro:500\">    <noscript>      <link rel=\"stylesheet\" href=\"/static/css/noscript.0673c9ea.css\">    </noscript>    <link rel=\"icon\" href=\"/static/images/favicon.35549fe8.ico\" type=\"image/x-icon\">    <link rel=\"alternate\" type=\"application/rss+xml\" title=\"RSS: 40 latest updates\" href=\"/rss/updates.xml\">    <link rel=\"alternate\" type=\"application/rss+xml\" title=\"RSS: 40 newest packages\" href=\"/rss/packages.xml\"><link rel=\"alternate\" type=\"application/rss+xml\" title=\"RSS: latest releases for drf-typed-views\" href=\"/rss/project/drf-typed-views/releases.xml\">    <link rel=\"canonical\" href=\"https://pypi.org/project/drf-typed-views/\">    <meta property=\"og:url\" content=\"https://pypi.org/project/drf-typed-views/\">    <meta property=\"og:site_name\" content=\"PyPI\">    <meta property=\"og:type\" content=\"website\">    <meta property=\"og:image\" content=\"https://pypi.org/static/images/twitter.abaf4b19.webp\">    <meta property=\"og:title\" content=\"drf-typed-views\">    <meta property=\"og:description\" content=\"Use type annotations for automatic request validation in Django REST Framework\">    <link rel=\"search\" type=\"application/opensearchdescription+xml\" title=\"PyPI\" href=\"/opensearch.xml\">    <script asyncdata-ga-id=\"UA-55961911-1\"data-ga4-id=\"G-RW7D75DF8V\"            src=\"/static/js/warehouse.dd4295c4.js\">    </script><script>MathJax = {  tex: {    inlineMath: [['$', '$'], ['\\\\(', '\\\\)']]  },};</script><script async  src=\"https://cdn.jsdelivr.net/npm/mathjax@3.2.2/es5/tex-svg.js\"  integrity=\"sha256-1CldwzdEg2k1wTmf7s5RWVd7NMXI/7nxxjJM2C4DqII=\"  crossorigin=\"anonymous\"></script><script async src=\"https://www.googletagmanager.com/gtag/js?id=UA-55961911-1\"></script><script async src=\"https://www.googletagmanager.com/gtag/js?id=G-RW7D75DF8V\"></script><script defer src=\"https://www.fastly-insights.com/insights.js?k=6a52360a-f306-421e-8ed5-7417d0d4a4e9&dnt=true\"></script>    <script async        src=\"https://media.ethicalads.io/media/client/v1.4.0/ethicalads.min.js\"        integrity=\"sha256-U3hKDidudIaxBDEzwGJApJgPEf2mWk6cfMWghrAa6i0= sha384-UcmsCqcNRSLW/dV3Lo1oCi2/VaurXbib6p4HyUEOeIa/4OpsrnucrugAefzVZJfI sha512-q4t1L4xEjGV2R4hzqCa41P8jrgFUS8xTb8rdNv4FGvw7FpydVj/kkxBJHOiaoxHa8olCcx1Slk9K+3sNbsM4ug==\"        crossorigin=\"anonymous\"    ></script>  </head>  <body data-controller=\"viewport-toggle\">    <!-- Accessibility: this link should always be the first piece of content inside the body-->    <a href=\"#content\" class=\"skip-to-content\">Skip to main content</a>    <button type=\"button\" class=\"button button--primary button--switch-to-mobile hidden\" data-viewport-toggle-target=\"switchToMobile\" data-action=\"viewport-toggle#switchToMobile\">Switch to mobile version    </button>    <div id=\"sticky-notifications\" class=\"stick-to-top js-stick-to-top\">      <!-- Add browser warning. Will show for ie9 and below -->      <!--[if IE]>      <div class=\"notification-bar notification-bar--warning\" role=\"status\">        <span class=\"notification-bar__icon\">          <i class=\"fa fa-exclamation-triangle\" aria-hidden=\"true\"></i>          <span class=\"sr-only\">Warning</span>        </span>        <span class=\"notification-bar__message\">You are using an unsupported browser, upgrade to a newer version.</span>      </div>      <![endif]-->      <noscript>      <div class=\"notification-bar notification-bar--warning\" role=\"status\">        <span class=\"notification-bar__icon\">          <i class=\"fa fa-exclamation-triangle\" aria-hidden=\"true\"></i>          <span class=\"sr-only\">Warning</span>        </span>        <span class=\"notification-bar__message\">Some features may not work without JavaScript. Please try enabling it if you encounter problems.</span>      </div>      </noscript><div data-html-include=\"/_includes/notification-banners/\"></div>    </div><div data-html-include=\"/_includes/flash-messages/\"></div><div data-html-include=\"/_includes/session-notifications/\"></div>    <header class=\"site-header \">      <div class=\"site-container\">        <div class=\"split-layout\">          <div class=\"split-layout\">            <div>              <a class=\"site-header__logo\" href=\"/\">                <img alt=\"PyPI\" src=\"/static/images/logo-small.2a411bc6.svg\">              </a>            </div>            <form class=\"search-form search-form--primary\" action=\"/search/\" role=\"search\">              <label for=\"search\" class=\"sr-only\">Search PyPI</label>              <input id=\"search\" class=\"search-form__search\" type=\"text\" name=\"q\" placeholder=\"Search projects\" value=\"\" autocomplete=\"off\" autocapitalize=\"off\" spellcheck=\"false\" data-controller=\"search-focus\" data-action=\"keydown@window->search-focus#focusSearchField\" data-search-focus-target=\"searchField\">              <button type=\"submit\" class=\"search-form__button\">                <i class=\"fa fa-search\" aria-hidden=\"true\"></i>                <span class=\"sr-only\">Search</span>              </button>            </form>          </div><div data-html-include=\"/_includes/current-user-indicator/\">            <div id=\"user-indicator\" class=\"horizontal-menu horizontal-menu--light horizontal-menu--tall\">  <nav class=\"horizontal-menu horizontal-menu--light horizontal-menu--tall hide-on-tablet\" aria-label=\"Main navigation\">    <ul>      <li class=\"horizontal-menu__item\"><a href=\"/help/\" class=\"horizontal-menu__link\">Help</a></li>      <li class=\"horizontal-menu__item\"><a href=\"/sponsors/\" class=\"horizontal-menu__link\">Sponsors</a></li>      <li class=\"horizontal-menu__item\"><a href=\"/account/login/\" class=\"horizontal-menu__link\">Log in</a></li>      <li class=\"horizontal-menu__item\"><a href=\"/account/register/\" class=\"horizontal-menu__link\">Register</a></li>    </ul>  </nav>  <nav class=\"dropdown dropdown--on-menu hidden show-on-tablet\" aria-label=\"Main navigation\">    <button type=\"button\" class=\"horizontal-menu__link dropdown__trigger\" aria-haspopup=\"true\" aria-expanded=\"false\" aria-label=\"View menu\">Menu      <span class=\"dropdown__trigger-caret\">        <i class=\"fa fa-caret-down\" aria-hidden=\"true\"></i>      </span>    </button>    <ul class=\"dropdown__content\" aria-hidden=\"true\" aria-label=\"Main menu\">      <li><a class=\"dropdown__link\" href=\"/help/\">Help</a></li>      <li><a class=\"dropdown__link\" href=\"/sponsors/\">Sponsors</a></li>      <li><a class=\"dropdown__link\" href=\"/account/login/\">Log in</a></li>      <li><a class=\"dropdown__link\" href=\"/account/register/\">Register</a></li>    </ul>  </nav></div></div>        </div>      </div>    </header>    <div class=\"mobile-search\">      <form class=\"search-form search-form--fullwidth\" action=\"/search/\" role=\"search\">        <label for=\"mobile-search\" class=\"sr-only\">Search PyPI</label>        <input id=\"mobile-search\" class=\"search-form__search\" type=\"text\" name=\"q\" placeholder=\"Search projects\" value=\"\" autocomplete=\"off\" autocapitalize=\"off\" spellcheck=\"false\">                <button type=\"submit\" class=\"search-form__button\">          <i class=\"fa fa-search\" aria-hidden=\"true\"></i>          <span class=\"sr-only\">Search</span>        </button>      </form>    </div>    <main id=\"content\"><div class=\"hidden\"  data-controller=\"github-repo-stats\"  data-github-repo-stats-github-repo-info-outlet=\".github-repo-info\"  data-github-repo-stats-url-value=\"https://api.github.com/repos/rsinger86/drf-typed-views\"  data-github-repo-stats-issue-url-value=\"https://api.github.com/search/issues?q=repo:rsinger86/drf-typed-views+type:issue+state:open&amp;per_page=1\"></div><div class=\"banner\">  <div class=\"package-header\">    <div class=\"package-header__left\">      <h1 class=\"package-header__name\">        drf-typed-views 0.3.0      </h1>      <div data-controller=\"clipboard\">        <p class=\"package-header__pip-instructions\">          <span id=\"pip-command\" data-clipboard-target=\"source\">pip install drf-typed-views</span>          <button type=\"button\" class=\"copy-tooltip copy-tooltip-s\" data-action=\"clipboard#copy\" data-clipboard-target=\"tooltip\" data-clipboard-tooltip-value=\"Copy to clipboard\">            <i class=\"fa fa-copy\" aria-hidden=\"true\"></i>            <span class=\"sr-only\">Copy PIP instructions</span>          </button>        </p>      </div>    </div>    <div class=\"package-header__right\">      <a class=\"status-badge status-badge--good\" href=\"/project/drf-typed-views/\">        <span>Latest version</span>      </a>      <p class=\"package-header__date\">Released: <time datetime=\"2020-06-07T16:48:45+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Jun 7, 2020</time>      </p>    </div>  </div></div><div class=\"horizontal-section horizontal-section--grey horizontal-section--thin\">  <div class=\"site-container\"><div data-html-include=\"/_includes/administer-project-include/drf-typed-views\"></div>    <div class=\"split-layout split-layout--middle package-description\">      <p class=\"package-description__summary\">Use type annotations for automatic request validation in Django REST Framework</p><div data-html-include=\"/_includes/edit-project-button/drf-typed-views\"></div>    </div>  </div></div><div data-controller=\"project-tabs\">  <div class=\"tabs-container\">    <div class=\"vertical-tabs\">      <div class=\"vertical-tabs__tabs\">        <div class=\"sidebar-section\">          <h3 class=\"sidebar-section__title\">Navigation</h3>          <nav aria-label=\"Navigation for drf-typed-views\">            <ul class=\"vertical-tabs__list\" role=\"tablist\">              <li role=\"tab\">                <a id=\"description-tab\" href=\"#description\" data-project-tabs-target=\"tab\" data-action=\"project-tabs#onTabClick\" class=\"vertical-tabs__tab vertical-tabs__tab--with-icon vertical-tabs__tab--is-active\" aria-selected=\"true\" aria-label=\"Project description. Focus will be moved to the description.\">                  <i class=\"fa fa-align-left\" aria-hidden=\"true\"></i>Project description                </a>              </li>              <li role=\"tab\">                <a id=\"history-tab\" href=\"#history\" data-project-tabs-target=\"tab\" data-action=\"project-tabs#onTabClick\" class=\"vertical-tabs__tab vertical-tabs__tab--with-icon\" aria-label=\"Release history. Focus will be moved to the history panel.\">                  <i class=\"fa fa-history\" aria-hidden=\"true\"></i>Release history                </a>              </li>              <li role=\"tab\">                <a id=\"files-tab\" href=\"#files\" data-project-tabs-target=\"tab\" data-action=\"project-tabs#onTabClick\" class=\"vertical-tabs__tab vertical-tabs__tab--with-icon\" aria-label=\"Download files. Focus will be moved to the project files.\">                  <i class=\"fa fa-download\" aria-hidden=\"true\"></i>Download files                </a>              </li>            </ul>          </nav>        </div><div class=\"sidebar-section\">  <h3 class=\"sidebar-section__title\">Project links</h3>  <ul class=\"vertical-tabs__list\">    <li>      <a class=\"vertical-tabs__tab vertical-tabs__tab--with-icon vertical-tabs__tab--condensed\" href=\"https://github.com/rsinger86/drf-typed-views\" rel=\"nofollow\">        <i class=\"fas fa-home\" aria-hidden=\"true\"></i>Homepage      </a>    </li>  </ul></div><div class=\"sidebar-section\">  <h3 class=\"sidebar-section__title\">Statistics</h3>  <div class=\"hidden github-repo-info\" data-controller=\"github-repo-info\">GitHub statistics:    <ul class=\"vertical-tabs__list\">      <li>        <a class=\"vertical-tabs__tab vertical-tabs__tab--with-icon vertical-tabs__tab--condensed\"           data-github-repo-info-target=\"stargazersUrl\" rel=\"noopener\">          <i class=\"fa fa-star\" aria-hidden=\"true\"></i>          <strong>Stars:</strong>          <span data-github-repo-info-target=\"stargazersCount\"></span>        </a>      </li>      <li>        <a class=\"vertical-tabs__tab vertical-tabs__tab--with-icon vertical-tabs__tab--condensed\"           data-github-repo-info-target=\"forksUrl\" rel=\"noopener\">          <i class=\"fa fa-code-branch\" aria-hidden=\"true\"></i>          <strong>Forks:</strong>          <span data-github-repo-info-target=\"forksCount\"></span>        </a>      </li>      <li>        <a class=\"vertical-tabs__tab vertical-tabs__tab--with-icon vertical-tabs__tab--condensed\"           data-github-repo-info-target=\"openIssuesUrl\" rel=\"noopener\">          <i class=\"fa fa-exclamation-circle\" aria-hidden=\"true\"></i>          <strong>Open issues:</strong>          <span data-github-repo-info-target=\"openIssuesCount\"></span>        </a>      </li>      <li>        <a class=\"vertical-tabs__tab vertical-tabs__tab--with-icon vertical-tabs__tab--condensed\"           data-github-repo-info-target=\"openPRsUrl\" rel=\"noopener\">          <i class=\"fa fa-code-pull-request\" aria-hidden=\"true\"></i>          <strong>Open PRs:</strong>          <span data-github-repo-info-target=\"openPRsCount\"></span>        </a>      </li>    </ul>  </div>  <p>View statistics for this project via <a href=\"https://libraries.io/pypi/drf-typed-views\" title=\"External link\" target=\"_blank\" rel=\"noopener\">Libraries.io</a>, or by using <a href=\"https://packaging.python.org/guides/analyzing-pypi-package-downloads/\" target=\"_blank\" rel=\"noopener\">our public dataset on Google BigQuery</a>  </p></div><div class=\"sidebar-section\">  <h3 class=\"sidebar-section__title\">Meta</h3>  <p><strong>License:</strong> MIT License (MIT)</p>    <p><strong>Author:</strong> <a href=\"mailto:robertgsinger@gmail.com\">Robert Singer</a></p>  <p class=\"tags\">    <i class=\"fa fa-tags\" aria-hidden=\"true\"></i>    <span class=\"sr-only\">Tags</span>    <span class=\"package-keyword\">      django,    </span>    <span class=\"package-keyword\">      rest,    </span>    <span class=\"package-keyword\">      type,    </span>    <span class=\"package-keyword\">      annotations,    </span>    <span class=\"package-keyword\">      automatic,    </span>    <span class=\"package-keyword\">      validation,    </span>    <span class=\"package-keyword\">      validate    </span>  </p></div><div class=\"sidebar-section\">    <h3 class=\"sidebar-section__title\">Maintainers</h3>      <span class=\"sidebar-section__maintainer\">        <a href=\"/user/rsinger86/\" aria-label=\"rsinger86\">          <span class=\"sidebar-section__user-gravatar\">            <img src=\"https://pypi-camo.freetls.fastly.net/a39c2d7e07defdcbf244d9909f3431f367132b9d/68747470733a2f2f7365637572652e67726176617461722e636f6d2f6176617461722f33343233613130373734616136346537333034396635623536336663386235633f73697a653d3530\" height=\"50\" width=\"50\" alt=\"Avatar for rsinger86 from gravatar.com\" title=\"Avatar for rsinger86 from gravatar.com\">          </span>          <span class=\"sidebar-section__user-gravatar-text\">            rsinger86          </span>        </a>      </span></div><div class=\"sidebar-section\">  <h3 class=\"sidebar-section__title\">Classifiers</h3>  <ul class=\"sidebar-section__classifiers\">    <li>      <strong>Development Status</strong>      <ul>        <li>          <a href=\"/search/?c=Development+Status+%3A%3A+4+-+Beta\">            4 - Beta          </a>        </li>      </ul>    </li>    <li>      <strong>License</strong>      <ul>        <li>          <a href=\"/search/?c=License+%3A%3A+OSI+Approved+%3A%3A+MIT+License\">            OSI Approved :: MIT License          </a>        </li>      </ul>    </li>    <li>      <strong>Programming Language</strong>      <ul>        <li>          <a href=\"/search/?c=Programming+Language+%3A%3A+Python+%3A%3A+3.3\">            Python :: 3.3          </a>        </li>        <li>          <a href=\"/search/?c=Programming+Language+%3A%3A+Python+%3A%3A+3.4\">            Python :: 3.4          </a>        </li>        <li>          <a href=\"/search/?c=Programming+Language+%3A%3A+Python+%3A%3A+3.5\">            Python :: 3.5          </a>        </li>        <li>          <a href=\"/search/?c=Programming+Language+%3A%3A+Python+%3A%3A+3.6\">            Python :: 3.6          </a>        </li>      </ul>    </li>  </ul></div><div class=\"sidebar-section\" data-ea-publisher=\"psf\" data-ea-type=\"psf\" data-ea-keywords=\"pypi-sidebar\"></div>      </div>      <div class=\"vertical-tabs__panel\">        <!-- mobile menu -->        <nav aria-label=\"Navigation for drf-typed-views\">          <ul class=\"vertical-tabs__list\" role=\"tablist\">            <li role=\"tab\">              <a id=\"mobile-description-tab\" href=\"#description\" data-project-tabs-target=\"mobileTab\" data-action=\"project-tabs#onTabClick\" class=\"vertical-tabs__tab vertical-tabs__tab--with-icon vertical-tabs__tab--mobile vertical-tabs__tab--no-top-border vertical-tabs__tab--is-active\" aria-selected=\"true\" aria-label=\"Project description. Focus will be moved to the description.\">                <i class=\"fa fa-align-left\" aria-hidden=\"true\"></i>Project description              </a>            </li>            <li role=\"tab\">              <a id=\"mobile-data-tab\" href=\"#data\" data-project-tabs-target=\"mobileTab\" data-action=\"project-tabs#onTabClick\" class=\"vertical-tabs__tab vertical-tabs__tab--with-icon vertical-tabs__tab--mobile\" aria-label=\"Project details. Focus will be moved to the project details.\">                <i class=\"fa fa-info-circle\" aria-hidden=\"true\"></i>Project details              </a>            </li>            <li role=\"tab\">              <a id=\"mobile-history-tab\" href=\"#history\" data-project-tabs-target=\"mobileTab\" data-action=\"project-tabs#onTabClick\" class=\"vertical-tabs__tab vertical-tabs__tab--with-icon vertical-tabs__tab--mobile\" aria-label=\"Release history. Focus will be moved to the history panel.\">              <i class=\"fa fa-history\" aria-hidden=\"true\"></i>Release history            </a>            </li>            <li role=\"tab\">              <a id=\"mobile-files-tab\" href=\"#files\" data-project-tabs-target=\"mobileTab\" data-action=\"project-tabs#onTabClick\" class=\"vertical-tabs__tab vertical-tabs__tab--with-icon vertical-tabs__tab--mobile\" aria-label=\"Download files. Focus will be moved to the project files.\">                <i class=\"fa fa-download\" aria-hidden=\"true\"></i>Download files              </a>            </li>          </ul>        </nav>        <div id=\"description\" data-project-tabs-target=\"content\" class=\"vertical-tabs__content\" role=\"tabpanel\" aria-labelledby=\"description-tab mobile-description-tab\" tabindex=\"-1\">          <h2 class=\"page-title\">Project description</h2>          <div class=\"project-description\">            <h2>Django REST Framework - Typed Views</h2><p><a href=\"https://pypi.python.org/pypi/drf-typed-views\" rel=nofollow><img src=\"https://pypi-camo.freetls.fastly.net/bd225cad8fb73b18644a11bdb0e7dc17242d9738/68747470733a2f2f62616467652e667572792e696f2f70792f6472662d74797065642d76696577732e737667\" alt=\"Package version\"></a><a href=\"https://img.shields.io/pypi/status/drf-typed-views.svg/\" rel=nofollow><img src=\"https://pypi-camo.freetls.fastly.net/024b624ece63fdabf3fc924727b03e7fdd144a2b/68747470733a2f2f696d672e736869656c64732e696f2f707970692f7374617475732f6472662d74797065642d76696577732e737667\" alt=\"Python versions\"></a></p><p>This project extends <a href=\"https://www.django-rest-framework.org/\" rel=nofollow>Django Rest Framework</a> to allow use of Python's type annotations for automatically validating and casting view parameters. This pattern makes for code that is easier to read and write. View inputs are individually declared, not buried inside all-encompassing <code>request</code> objects. Meanwhile, you get even more out of type annotations: they can replace repetitive validation/sanitization code.</p><p>More features:</p><ul><li><a href=\"https://pydantic-docs.helpmanual.io/\" rel=nofollow>Pydantic</a> models and <a href=\"https://marshmallow.readthedocs.io\" rel=nofollow>Marshmallow</a> schemas are compatible types for view parameters. Annotate your POST/PUT functions with them to automatically validate incoming request bodies.</li><li>Advanced validators for more than just the type: <code>min_value</code>/<code>max_value</code> for numbers</li><li>Validate string formats: <code>email</code>, <code>uuid</code> and <code>ipv4/6</code>; use Python's native <code>Enum</code> for \"choices\" validation</li></ul><p>Quick example:</p><pre lang=python3><span class=kn>from</span> <span class=nn>rest_typed_views</span> <span class=kn>import</span> <span class=n>typed_api_view</span><span class=nd>@typed_api_view</span><span class=p>([</span><span class=s2>\"GET\"</span><span class=p>])</span><span class=k>def</span> <span class=nf>get_users</span><span class=p>(</span><span class=n>registered_on</span><span class=p>:</span> <span class=n>date</span> <span class=o>=</span> <span class=kc>None</span><span class=p>,</span> <span class=n>groups</span><span class=p>:</span> <span class=n>List</span><span class=p>[</span><span class=nb>int</span><span class=p>]</span> <span class=o>=</span> <span class=kc>None</span><span class=p>,</span> <span class=n>is_staff</span><span class=p>:</span> <span class=nb>bool</span> <span class=o>=</span> <span class=kc>None</span><span class=p>):</span>    <span class=nb>print</span><span class=p>(</span><span class=n>registered_on</span><span class=p>,</span> <span class=n>groups</span><span class=p>,</span> <span class=n>is_staff</span><span class=p>)</span></pre><p>GET <code>/users/registered/?registered_on=2019-03-03&amp;groups=4,5&amp;is_staff=yes</code><br>Status Code: 200</p><pre><code>    date(2019, 3, 3)   [4, 5]  True</code></pre><p>GET <code>/users/?registered_on=9999&amp;groups=admin&amp;is_staff=maybe</code><br>:no_entry_sign: Status Code: 400 <em>ValidationError raised</em></p><pre lang=json><span class=w>    </span><span class=p>{</span><span class=w>        </span><span class=nt>\"registered_on\"</span><span class=p>:</span><span class=w> </span><span class=s2>\"'9999' is not a valid date\"</span><span class=p>,</span><span class=w>        </span><span class=nt>\"groups\"</span><span class=p>:</span><span class=w> </span><span class=s2>\"'admin' is not a valid integer\"</span><span class=p>,</span><span class=w>        </span><span class=nt>\"is_staff\"</span><span class=p>:</span><span class=w> </span><span class=s2>\"'maybe' is not a valid boolean\"</span><span class=w>    </span><span class=p>}</span></pre><h2>Table of Contents</h2><ul><li><a href=#install--decorators rel=nofollow>Install &amp; Decorators</a></li><li><a href=#how-it-works-simple-usage rel=nofollow>How It Works: Simple Usage</a><ul><li><a href=#basic-get-request rel=nofollow>Basic GET Request</a></li><li><a href=#basic-post-request rel=nofollow>Basic POST Request</a></li></ul></li><li><a href=#how-it-works-advanced-usage rel=nofollow>How It Works: Advanced Usage</a><ul><li><a href=#additional-validation-rules rel=nofollow>Additional Validation Rules</a></li><li><a href=#nested-body-fields rel=nofollow>Nested Body Fields</a></li><li><a href=#list-validation rel=nofollow>List Validation</a></li><li><a href=#accessing-the-request-object rel=nofollow>Accessing the Request Object</a></li><li><a href=#interdependent-query-parameter-validation rel=nofollow>Interdependent Query Parameter Validation</a></li><li><a href=#simple-access-control rel=nofollow>(Simple) Access Control</a></li></ul></li><li><a href=#enabling-3rd-party-validators rel=nofollow>Enabling Marshmallow, Pydantic Schemas</a></li><li><a href=#request-element-classes rel=nofollow>Request Element Classes</a><ul><li><a href=#query rel=nofollow>Query</a></li><li><a href=#body rel=nofollow>Body</a></li><li><a href=#path rel=nofollow>Path</a></li><li><a href=#header rel=nofollow>Header</a></li><li><a href=#currentuser rel=nofollow>CurrentUser</a></li></ul></li><li><a href=#supported-types-and-validator-rules rel=nofollow>Supported Types/Validator Rules</a><ul><li><a href=#int rel=nofollow>int</a></li><li><a href=#float rel=nofollow>float</a></li><li><a href=#decimal rel=nofollow>Decimal</a></li><li><a href=#str rel=nofollow>str</a></li><li><a href=#bool rel=nofollow>bool</a></li><li><a href=#datetime rel=nofollow>datetime</a></li><li><a href=#date rel=nofollow>date</a></li><li><a href=#time rel=nofollow>time</a></li><li><a href=#timedelta rel=nofollow>timedelta</a></li><li><a href=#list rel=nofollow>List</a></li><li><a href=#enum rel=nofollow>Enum</a></li><li><a href=#marshmallowschema rel=nofollow>marshmallow.Schema</a></li><li><a href=#pydanticbasemodel rel=nofollow>pydantic.BaseModel</a></li></ul></li><li><a href=#changes rel=nofollow>Change Log</a></li><li><a href=#motivation rel=nofollow>Motivation &amp; Inspiration</a></li></ul><h2>Install &amp; Decorators</h2><pre><code>pip install drf-typed-views</code></pre><p>You can add type annotation-enabled features to either <code>ViewSet</code> methods or function-based views using the <code>typed_action</code> and <code>typed_api_view</code> decorators. They take the exact same arguments as Django REST's <a href=\"https://www.django-rest-framework.org/api-guide/views/#api_view\" rel=nofollow><code>api_view</code></a> and <a href=\"https://www.django-rest-framework.org/api-guide/viewsets/#marking-extra-actions-for-routing\" rel=nofollow><code>action</code></a> decorators.</p><h2>How It Works: Simple Usage</h2><p>For many cases, you can rely on implicit behavior for how different parts of the request (URL path variables, query parameters, body) map to the parameters of a view function/method.</p><p>The value of a view parameter will come from...</p><ul><li>the URL path if the path variable and the view argument have the same name, <em>or</em>:</li><li>the request body if the view argument is annotated using a class from a supported library for complex object validation (Pydantic, MarshMallow), <em>or</em>:</li><li>a query parameter with the same name</li></ul><p>Unless a default value is given, the parameter is <strong>required</strong> and a <a href=\"https://www.django-rest-framework.org/api-guide/exceptions/#validationerror\" rel=nofollow><code>ValidationError</code></a> will be raised if not set.</p><h3>Basic GET Request</h3><pre lang=python3><span class=n>urlpatterns</span> <span class=o>=</span> <span class=p>[</span>    <span class=n>url</span><span class=p>(</span><span class=sa>r</span><span class=s2>\"^(?P&lt;city&gt;[\\w+])/restaurants/\"</span><span class=p>,</span> <span class=n>search_restaurants</span><span class=p>)</span><span class=p>]</span><span class=kn>from</span> <span class=nn>rest_typed_views</span> <span class=kn>import</span> <span class=n>typed_api_view</span><span class=c1># Example request: /chicago/restaurants?delivery=yes</span><span class=nd>@typed_api_view</span><span class=p>([</span><span class=s2>\"GET\"</span><span class=p>])</span><span class=k>def</span> <span class=nf>search_restaurants</span><span class=p>(</span><span class=n>city</span><span class=p>:</span> <span class=nb>str</span><span class=p>,</span> <span class=n>rating</span><span class=p>:</span> <span class=nb>float</span> <span class=o>=</span> <span class=kc>None</span><span class=p>,</span> <span class=n>offers_delivery</span><span class=p>:</span> <span class=nb>bool</span> <span class=o>=</span> <span class=kc>None</span><span class=p>):</span>    <span class=n>restaurants</span> <span class=o>=</span> <span class=n>Restaurant</span><span class=o>.</span><span class=n>objects</span><span class=o>.</span><span class=n>filter</span><span class=p>(</span><span class=n>city</span><span class=o>=</span><span class=n>city</span><span class=p>)</span>    <span class=k>if</span> <span class=n>rating</span> <span class=ow>is</span> <span class=ow>not</span> <span class=kc>None</span><span class=p>:</span>        <span class=n>restaurants</span> <span class=o>=</span> <span class=n>restaurants</span><span class=o>.</span><span class=n>filter</span><span class=p>(</span><span class=n>rating__gte</span><span class=o>=</span><span class=n>rating</span><span class=p>)</span>    <span class=k>if</span> <span class=n>offers_delivery</span> <span class=ow>is</span> <span class=ow>not</span> <span class=kc>None</span><span class=p>:</span>        <span class=n>restaurants</span> <span class=o>=</span> <span class=n>restaurants</span><span class=o>.</span><span class=n>filter</span><span class=p>(</span><span class=n>delivery</span><span class=o>=</span><span class=n>offers_delivery</span><span class=p>)</span></pre><p>In this example, <code>city</code> is required and must be its string. Its value comes from the URL path variable with the same name. The other parameters, <code>rating</code> and <code>offers_delivery</code>, are not part of the path parameters and are assumed to be query parameters. They both have a default value, so they are optional.</p><h3>Basic POST Request</h3><pre lang=python3><span class=c1># urls.py</span><span class=n>urlpatterns</span> <span class=o>=</span> <span class=p>[</span><span class=n>url</span><span class=p>(</span><span class=sa>r</span><span class=s2>\"^(?P&lt;city&gt;[\\w+])/bookings/\"</span><span class=p>,</span> <span class=n>create_booking</span><span class=p>)]</span><span class=c1># settings.py</span><span class=n>DRF_TYPED_VIEWS</span> <span class=o>=</span> <span class=p>{</span><span class=s2>\"schema_packages\"</span><span class=p>:</span> <span class=p>[</span><span class=s2>\"pydantic\"</span><span class=p>]}</span><span class=c1># views.py</span><span class=kn>from</span> <span class=nn>pydantic</span> <span class=kn>import</span> <span class=n>BaseModel</span><span class=kn>from</span> <span class=nn>rest_typed_views</span> <span class=kn>import</span> <span class=n>typed_api_view</span><span class=k>class</span> <span class=nc>RoomEnum</span><span class=p>(</span><span class=nb>str</span><span class=p>,</span> <span class=n>Enum</span><span class=p>):</span>    <span class=n>double</span> <span class=o>=</span> <span class=s1>'double'</span>    <span class=n>twin</span> <span class=o>=</span> <span class=s1>'twin'</span>    <span class=n>single</span> <span class=o>=</span> <span class=s1>'single'</span><span class=k>class</span> <span class=nc>BookingSchema</span><span class=p>(</span><span class=n>BaseModel</span><span class=p>):</span>    <span class=n>start_date</span><span class=p>:</span> <span class=n>date</span>    <span class=n>end_date</span><span class=p>:</span> <span class=n>date</span>    <span class=n>room</span><span class=p>:</span> <span class=n>RoomEnum</span> <span class=o>=</span> <span class=n>RoomEnum</span><span class=o>.</span><span class=n>double</span>    <span class=n>include_breakfast</span><span class=p>:</span> <span class=nb>bool</span> <span class=o>=</span> <span class=kc>False</span><span class=c1># Example request: /chicago/bookings/</span><span class=nd>@typed_api_view</span><span class=p>([</span><span class=s2>\"POST\"</span><span class=p>])</span><span class=k>def</span> <span class=nf>create_booking</span><span class=p>(</span><span class=n>city</span><span class=p>:</span> <span class=nb>str</span><span class=p>,</span> <span class=n>booking</span><span class=p>:</span> <span class=n>BookingSchema</span><span class=p>):</span>    <span class=c1># do something with the validated booking...</span></pre><p>In this example, <code>city</code> will again be populated using the URL path variable. The <code>booking</code> parameter is annotated using a supported complex schema class (Pydantic), so it's assumed to come from the request body, which will be read in as JSON, used to hydrate the Pydantic <code>BookingSchema</code> and then validated. If validation fails a <code>ValidationError</code> will be raised.</p><h2>How It Works: Advanced Usage</h2><p>For more advanced use cases, you can explicitly declare how each parameter's value is sourced from the request -- from the query parameters, path, body or headers -- as well as define additional validation rules. You import a class named after the request element that is expected to hold the value and assign it to the parameter's default.</p><pre lang=python3><span class=kn>from</span> <span class=nn>rest_typed_views</span> <span class=kn>import</span> <span class=n>typed_api_view</span><span class=p>,</span> <span class=n>Query</span><span class=p>,</span> <span class=n>Path</span><span class=nd>@typed_api_view</span><span class=p>([</span><span class=s2>\"GET\"</span><span class=p>])</span><span class=k>def</span> <span class=nf>list_documents</span><span class=p>(</span><span class=n>year</span><span class=p>:</span> <span class=n>date</span> <span class=o>=</span> <span class=n>Path</span><span class=p>(),</span> <span class=n>title</span><span class=p>:</span> <span class=nb>str</span> <span class=o>=</span> <span class=n>Query</span><span class=p>(</span><span class=n>default</span><span class=o>=</span><span class=kc>None</span><span class=p>)):</span>    <span class=c1># ORM logic here...</span></pre><p>In this example, <code>year</code> is required and must come from the URL path and <code>title</code> is an optional query parameter because the <code>default</code> is set. This is similar to Django REST's <a href=\"https://www.django-rest-framework.org/api-guide/fields/#core-arguments\" rel=nofollow>serializer fields</a>:  passing a default implies that the filed is not required.</p><pre lang=python3><span class=kn>from</span> <span class=nn>rest_typed_views</span> <span class=kn>import</span> <span class=n>typed_api_view</span><span class=p>,</span> <span class=n>Header</span><span class=nd>@typed_api_view</span><span class=p>([</span><span class=s2>\"GET\"</span><span class=p>])</span><span class=k>def</span> <span class=nf>get_cache_header</span><span class=p>(</span><span class=n>cache</span><span class=p>:</span> <span class=nb>str</span> <span class=o>=</span> <span class=n>Header</span><span class=p>()):</span>    <span class=c1># ORM logic here...</span></pre><p>In this example, <code>cache</code> is required and must come from the headers.</p><h3>Additional Validation Rules</h3><p>You can use the request element class (<code>Query</code>, <code>Path</code>, <code>Body</code>, <code>Header</code>) to set additional validation constraints. You'll find that these keywords are consistent with Django REST's serializer fields.</p><pre lang=python3><span class=kn>from</span> <span class=nn>rest_typed_views</span> <span class=kn>import</span> <span class=n>typed_api_view</span><span class=p>,</span> <span class=n>Query</span><span class=p>,</span> <span class=n>Path</span><span class=nd>@typed_api_view</span><span class=p>([</span><span class=s2>\"GET\"</span><span class=p>])</span><span class=k>def</span> <span class=nf>search_restaurants</span><span class=p>(</span>    <span class=n>year</span><span class=p>:</span> <span class=n>date</span> <span class=o>=</span> <span class=n>Path</span><span class=p>(),</span>     <span class=n>rating</span><span class=p>:</span> <span class=nb>int</span> <span class=o>=</span> <span class=n>Query</span><span class=p>(</span><span class=n>default</span><span class=o>=</span><span class=kc>None</span><span class=p>,</span> <span class=n>min_value</span><span class=o>=</span><span class=mi>1</span><span class=p>,</span> <span class=n>max_value</span><span class=o>=</span><span class=mi>5</span><span class=p>)</span><span class=p>):</span>    <span class=c1># ORM logic here...</span><span class=nd>@typed_api_view</span><span class=p>([</span><span class=s2>\"GET\"</span><span class=p>])</span><span class=k>def</span> <span class=nf>get_document</span><span class=p>(</span><span class=nb>id</span><span class=p>:</span> <span class=nb>str</span> <span class=o>=</span> <span class=n>Path</span><span class=p>(</span><span class=nb>format</span><span class=o>=</span><span class=s2>\"uuid\"</span><span class=p>)):</span>    <span class=c1># ORM logic here...</span><span class=nd>@typed_api_view</span><span class=p>([</span><span class=s2>\"GET\"</span><span class=p>])</span><span class=k>def</span> <span class=nf>search_users</span><span class=p>(</span>    <span class=n>email</span><span class=p>:</span> <span class=nb>str</span> <span class=o>=</span> <span class=n>Query</span><span class=p>(</span><span class=n>default</span><span class=o>=</span><span class=kc>None</span><span class=p>,</span> <span class=nb>format</span><span class=o>=</span><span class=s2>\"email\"</span><span class=p>),</span>     <span class=n>ip_address</span><span class=p>:</span> <span class=nb>str</span> <span class=o>=</span> <span class=n>Query</span><span class=p>(</span><span class=n>default</span><span class=o>=</span><span class=kc>None</span><span class=p>,</span> <span class=nb>format</span><span class=o>=</span><span class=s2>\"ip\"</span><span class=p>),</span> <span class=p>):</span>    <span class=c1># ORM logic here...</span></pre><p>View a <a href=#supported-types-and-validator-rules rel=nofollow>full list</a> of supported types and additional validation rules.</p><h3>Nested Body Fields</h3><p>Similar to how <code>source</code> is used in Django REST to control field mappings during serialization, you can use it to specify the exact path to the request data.</p><pre lang=python3><span class=kn>from</span> <span class=nn>pydantic</span> <span class=kn>import</span> <span class=n>BaseModel</span><span class=kn>from</span> <span class=nn>rest_typed_views</span> <span class=kn>import</span> <span class=n>typed_api_view</span><span class=p>,</span> <span class=n>Query</span><span class=p>,</span> <span class=n>Path</span><span class=k>class</span> <span class=nc>Document</span><span class=p>(</span><span class=n>BaseModel</span><span class=p>):</span>    <span class=n>title</span><span class=p>:</span> <span class=nb>str</span>    <span class=n>body</span><span class=p>:</span> <span class=nb>str</span><span class=sd>\"\"\"</span><span class=sd>    POST</span><span class=sd>    {</span><span class=sd>        \"strict\": false,</span><span class=sd>        \"data\": {</span><span class=sd>            \"title\": \"A Dark and Stormy Night\",</span><span class=sd>            \"body\": \"Once upon a time\"</span><span class=sd>        }</span><span class=sd>    }</span><span class=sd>\"\"\"</span><span class=nd>@typed_api_view</span><span class=p>([</span><span class=s2>\"POST\"</span><span class=p>])</span><span class=k>def</span> <span class=nf>create_document</span><span class=p>(</span>    <span class=n>strict_mode</span><span class=p>:</span> <span class=nb>bool</span> <span class=o>=</span> <span class=n>Body</span><span class=p>(</span><span class=n>source</span><span class=o>=</span><span class=s2>\"strict\"</span><span class=p>),</span>     <span class=n>item</span><span class=p>:</span> <span class=n>Document</span> <span class=o>=</span> <span class=n>Body</span><span class=p>(</span><span class=n>source</span><span class=o>=</span><span class=s2>\"data\"</span><span class=p>)</span><span class=p>):</span>    <span class=c1># ORM logic here...</span></pre><p>You can also use dot-notation to source data multiple levels deep in the JSON payload.</p><h3>List Validation</h3><p>For the basic case of list validation - validating types within a comma-delimited string - declare the type to get automatic validation/coercion:</p><pre lang=python3><span class=kn>from</span> <span class=nn>rest_typed_views</span> <span class=kn>import</span> <span class=n>typed_api_view</span><span class=p>,</span> <span class=n>Query</span><span class=nd>@typed_api_view</span><span class=p>([</span><span class=s2>\"GET\"</span><span class=p>])</span><span class=k>def</span> <span class=nf>search_movies</span><span class=p>(</span><span class=n>item_ids</span><span class=p>:</span> <span class=n>List</span><span class=p>[</span><span class=nb>int</span><span class=p>]</span> <span class=o>=</span> <span class=p>[])):</span>    <span class=nb>print</span><span class=p>(</span><span class=n>item_ids</span><span class=p>)</span><span class=c1># GET /movies?items_ids=41,64,3</span><span class=c1># [41, 64, 3]</span></pre><p>But you can also specify <code>min_length</code> and <code>max_length</code>, as well as the <code>delimiter</code> and specify additional rules for the child items -- think Django REST's <a href=\"https://www.django-rest-framework.org/api-guide/fields/#listfield\" rel=nofollow>ListField</a>.</p><p>Import the generic <code>Param</code> class and use it to set the rules for the <code>child</code> elements:</p><pre lang=python3><span class=kn>from</span> <span class=nn>rest_typed_views</span> <span class=kn>import</span> <span class=n>typed_api_view</span><span class=p>,</span> <span class=n>Query</span><span class=p>,</span> <span class=n>Param</span><span class=nd>@typed_api_view</span><span class=p>([</span><span class=s2>\"GET\"</span><span class=p>])</span><span class=k>def</span> <span class=nf>search_outcomes</span><span class=p>(</span>    <span class=n>scores</span><span class=p>:</span> <span class=n>List</span><span class=p>[</span><span class=nb>int</span><span class=p>]</span> <span class=o>=</span> <span class=n>Query</span><span class=p>(</span><span class=n>delimiter</span><span class=o>=</span><span class=s2>\"|\"</span><span class=p>,</span> <span class=n>child</span><span class=o>=</span><span class=n>Param</span><span class=p>(</span><span class=n>min_value</span><span class=o>=</span><span class=mi>0</span><span class=p>,</span> <span class=n>max_value</span><span class=o>=</span><span class=mi>100</span><span class=p>))</span><span class=p>):</span>    <span class=c1># ORM logic ...</span><span class=nd>@typed_api_view</span><span class=p>([</span><span class=s2>\"GET\"</span><span class=p>])</span><span class=k>def</span> <span class=nf>search_message</span><span class=p>(</span>    <span class=n>recipients</span><span class=p>:</span> <span class=n>List</span><span class=p>[</span><span class=nb>str</span><span class=p>]</span> <span class=o>=</span> <span class=n>Query</span><span class=p>(</span><span class=n>min_length</span><span class=o>=</span><span class=mi>1</span><span class=p>,</span> <span class=n>max_length</span><span class=o>=</span><span class=mi>10</span><span class=p>,</span> <span class=n>child</span><span class=o>=</span><span class=n>Param</span><span class=p>(</span><span class=nb>format</span><span class=o>=</span><span class=s2>\"email\"</span><span class=p>))</span><span class=p>):</span>    <span class=c1># ORM logic ...</span></pre><h3>Accessing the Request Object</h3><p>You probably won't need to access the <code>request</code> object directly, as this package will provide its relevant properties as view arguments. However, you can include it as a parameter annotated with its type and it will be injected:</p><pre lang=python3><span class=kn>from</span> <span class=nn>rest_framework.request</span> <span class=kn>import</span> <span class=n>Request</span><span class=kn>from</span> <span class=nn>rest_typed_views</span> <span class=kn>import</span> <span class=n>typed_api_view</span><span class=nd>@typed_api_view</span><span class=p>([</span><span class=s2>\"GET\"</span><span class=p>])</span><span class=k>def</span> <span class=nf>search_documens</span><span class=p>(</span><span class=n>request</span><span class=p>:</span> <span class=n>Request</span><span class=p>,</span> <span class=n>q</span><span class=p>:</span> <span class=nb>str</span> <span class=o>=</span> <span class=kc>None</span><span class=p>):</span>    <span class=c1># ORM logic ...</span></pre><h3>Interdependent Query Parameter Validation</h3><p>Often, it's useful to validate a combination of query parameters - for instance, a <code>start_date</code> shouldn't come after an <code>end_date</code>. You can use complex schema object (Pydantic or Marshmallow) for this scenario. In the example below, <code>Query(source=\"*\")</code> is instructing an instance of <code>SearchParamsSchema</code> to be populated/validated using all of the query parameters together: <code>request.query_params.dict()</code>.</p><pre lang=python3><span class=kn>from</span> <span class=nn>marshmallow</span> <span class=kn>import</span> <span class=n>Schema</span><span class=p>,</span> <span class=n>fields</span><span class=p>,</span> <span class=n>validates_schema</span><span class=p>,</span> <span class=n>ValidationError</span><span class=kn>from</span> <span class=nn>rest_typed_views</span> <span class=kn>import</span> <span class=n>typed_api_view</span><span class=k>class</span> <span class=nc>SearchParamsSchema</span><span class=p>(</span><span class=n>Schema</span><span class=p>):</span>    <span class=n>start_date</span> <span class=o>=</span> <span class=n>fields</span><span class=o>.</span><span class=n>Date</span><span class=p>()</span>    <span class=n>end_date</span> <span class=o>=</span> <span class=n>fields</span><span class=o>.</span><span class=n>Date</span><span class=p>()</span>    <span class=nd>@validates_schema</span>    <span class=k>def</span> <span class=nf>validate_numbers</span><span class=p>(</span><span class=bp>self</span><span class=p>,</span> <span class=n>data</span><span class=p>,</span> <span class=o>**</span><span class=n>kwargs</span><span class=p>):</span>        <span class=k>if</span> <span class=n>data</span><span class=p>[</span><span class=s2>\"start_date\"</span><span class=p>]</span> <span class=o>&gt;=</span> <span class=n>data</span><span class=p>[</span><span class=s2>\"end_date\"</span><span class=p>]:</span>            <span class=k>raise</span> <span class=n>ValidationError</span><span class=p>(</span><span class=s2>\"end_date must come after start_date\"</span><span class=p>)</span><span class=nd>@typed_api_view</span><span class=p>([</span><span class=s2>\"GET\"</span><span class=p>])</span><span class=k>def</span> <span class=nf>search_documens</span><span class=p>(</span><span class=n>search_params</span><span class=p>:</span> <span class=n>SearchParamsSchema</span> <span class=o>=</span> <span class=n>Query</span><span class=p>(</span><span class=n>source</span><span class=o>=</span><span class=s2>\"*\"</span><span class=p>)):</span>    <span class=c1># ORM logic ...</span></pre><h3>(Simple) Access Control</h3><p>You can apply some very basic access control by applying some validation rules to a view parameter sourced from the <code>CurrentUser</code> request element class. In the example below, a <code>ValidationError</code> will be raised if the <code>request.user</code> is not a member of either <code>super_users</code> or <code>admins</code>.</p><pre lang=python3>    <span class=kn>from</span> <span class=nn>my_pydantic_schemas</span> <span class=kn>import</span> <span class=n>BookingSchema</span>    <span class=kn>from</span> <span class=nn>rest_typed_views</span> <span class=kn>import</span> <span class=n>typed_api_view</span><span class=p>,</span> <span class=n>CurrentUser</span>    <span class=nd>@typed_api_view</span><span class=p>([</span><span class=s2>\"POST\"</span><span class=p>])</span>    <span class=k>def</span> <span class=nf>create_booking</span><span class=p>(</span>        <span class=n>booking</span><span class=p>:</span> <span class=n>BookingSchema</span><span class=p>,</span>         <span class=n>user</span><span class=p>:</span> <span class=n>User</span> <span class=o>=</span> <span class=n>CurrentUser</span><span class=p>(</span><span class=n>member_of_any</span><span class=o>=</span><span class=p>[</span><span class=s2>\"super_users\"</span><span class=p>,</span> <span class=s2>\"admins\"</span><span class=p>])</span>    <span class=p>):</span>        <span class=c1># Do something with the request.user</span></pre><p>Read more about the <a href=#current-user-keywords rel=nofollow><code>Current User</code> request element class</a>.</p><h2>Enabling Marshmallow, Pydantic Schemas <a id=enabling-3rd-party-validators rel=nofollow></a></h2><p>As an alternative to Django REST's serializers, you can annotate views with <a href=\"https://pydantic-docs.helpmanual.io/\" rel=nofollow>Pydantic</a> models or <a href=\"https://marshmallow.readthedocs.io/en/stable/\" rel=nofollow>Marshmallow</a> schemas to have their parameters automatically validated and pass an instance of the Pydantic/Marshmallow class to your method/function.</p><p>To enable support for third-party libraries for complex object validation, modify your settings:</p><pre lang=python3><span class=n>DRF_TYPED_VIEWS</span> <span class=o>=</span> <span class=p>{</span>    <span class=s2>\"schema_packages\"</span><span class=p>:</span> <span class=p>[</span><span class=s2>\"pydantic\"</span><span class=p>,</span> <span class=s2>\"marshmallow\"</span><span class=p>]</span><span class=p>}</span></pre><p>These third-party packages must be installed in your virtual environment/runtime.</p><h2>Request Element Classes</h2><p>You can specify the part of the request that holds each view parameter by using default function arguments, for example:</p><pre lang=python3>    <span class=kn>from</span> <span class=nn>rest_typed_views</span> <span class=kn>import</span> <span class=n>Body</span><span class=p>,</span> <span class=n>Query</span>    <span class=nd>@typed_api_view</span><span class=p>([</span><span class=s2>\"PUT\"</span><span class=p>])</span>    <span class=k>def</span> <span class=nf>update_user</span><span class=p>(</span>        <span class=n>user</span><span class=p>:</span> <span class=n>UserSchema</span> <span class=o>=</span> <span class=n>Body</span><span class=p>(),</span>         <span class=n>optimistic_update</span><span class=p>:</span> <span class=nb>bool</span> <span class=o>=</span> <span class=n>Query</span><span class=p>(</span><span class=n>default</span><span class=o>=</span><span class=kc>False</span><span class=p>)</span>    <span class=p>):</span></pre><p>The <code>user</code> parameter will come from the request body and is required because no default is provided. Meanwhile, <code>optimistic_update</code> is not required and will be populated from a query parameter with the same name.</p><p>The core keyword arguments to these classes are:</p><ul><li><code>default</code> the default value for the parameter, which is required unless set</li><li><code>source</code> if the view parameter has a different name than its key embedded in the request</li></ul><p>Passing keywords for additional validation constraints is a <em>powerful capability</em> that gets you <em>almost the same feature set</em> as Django REST's flexible <a href=\"https://www.django-rest-framework.org/api-guide/fields/\" rel=nofollow>serializer fields</a>. See a <a href=#supported-types-and-validator-rule rel=nofollow>complete list</a> of validation keywords.</p><h3>Query</h3><p>Use the <code>source</code> argument to alias the parameter value and pass keywords to set additional constraints. For example, your query parameters can have dashes, but be mapped to a parameter that have underscores:</p><pre lang=python3>    <span class=kn>from</span> <span class=nn>rest_typed_views</span> <span class=kn>import</span> <span class=n>typed_api_view</span><span class=p>,</span> <span class=n>Query</span>    <span class=nd>@typed_api_view</span><span class=p>([</span><span class=s2>\"GET\"</span><span class=p>])</span>    <span class=k>def</span> <span class=nf>search_events</span><span class=p>(</span>        <span class=n>starting_after</span><span class=p>:</span> <span class=n>date</span> <span class=o>=</span> <span class=n>Query</span><span class=p>(</span><span class=n>source</span><span class=o>=</span><span class=s2>\"starting-after\"</span><span class=p>),</span>        <span class=n>available_tickets</span><span class=p>:</span> <span class=nb>int</span> <span class=o>=</span> <span class=n>Query</span><span class=p>(</span><span class=n>default</span><span class=o>=</span><span class=mi>0</span><span class=p>,</span> <span class=n>min_value</span><span class=o>=</span><span class=mi>0</span><span class=p>)</span>    <span class=p>):</span>        <span class=c1># ORM logic here...</span></pre><h3>Body</h3><p>By default, the entire request body is used to populate parameters marked with this class (<code>source=\"*\"</code>):</p><pre lang=python3>    <span class=kn>from</span> <span class=nn>rest_typed_views</span> <span class=kn>import</span> <span class=n>typed_api_view</span><span class=p>,</span> <span class=n>Body</span>    <span class=kn>from</span> <span class=nn>my_pydantic_schemas</span> <span class=kn>import</span> <span class=n>ResidenceListing</span>    <span class=nd>@typed_api_view</span><span class=p>([</span><span class=s2>\"POST\"</span><span class=p>])</span>    <span class=k>def</span> <span class=nf>create_listing</span><span class=p>(</span><span class=n>residence</span><span class=p>:</span> <span class=n>ResidenceListing</span> <span class=o>=</span> <span class=n>Body</span><span class=p>()):</span>        <span class=c1># ORM logic ...</span></pre><p>However, you can also specify nested fields in the request body, with support for dot notation.</p><pre lang=python3><span class=w>    </span><span class=sd>\"\"\"</span><span class=sd>        POST  /users/</span><span class=sd>        {</span><span class=sd>            \"first_name\": \"Homer\",</span><span class=sd>            \"last_name\": \"Simpson\",</span><span class=sd>            \"contact\": {</span><span class=sd>                \"phone\" : \"800-123-456\",</span><span class=sd>                \"fax\": \"13235551234\"</span><span class=sd>            }</span><span class=sd>        }</span><span class=sd>    \"\"\"</span>    <span class=kn>from</span> <span class=nn>rest_typed_views</span> <span class=kn>import</span> <span class=n>typed_api_view</span><span class=p>,</span> <span class=n>Body</span>    <span class=nd>@typed_api_view</span><span class=p>([</span><span class=s2>\"POST\"</span><span class=p>])</span>    <span class=k>def</span> <span class=nf>create_user</span><span class=p>(</span>        <span class=n>first_name</span><span class=p>:</span> <span class=nb>str</span> <span class=o>=</span> <span class=n>Body</span><span class=p>(</span><span class=n>source</span><span class=o>=</span><span class=s2>\"first_name\"</span><span class=p>),</span>        <span class=n>last_name</span><span class=p>:</span> <span class=nb>str</span> <span class=o>=</span> <span class=n>Body</span><span class=p>(</span><span class=n>source</span><span class=o>=</span><span class=s2>\"last_name\"</span><span class=p>),</span>        <span class=n>phone</span><span class=p>:</span> <span class=nb>str</span> <span class=o>=</span> <span class=n>Body</span><span class=p>(</span><span class=n>source</span><span class=o>=</span><span class=s2>\"contact.phone\"</span><span class=p>,</span> <span class=n>min_length</span><span class=o>=</span><span class=mi>10</span><span class=p>,</span> <span class=n>max_length</span><span class=o>=</span><span class=mi>20</span><span class=p>)</span>    <span class=p>):</span>        <span class=c1># ORM logic ...</span></pre><h3>Path</h3><p>Use the <code>source</code> argument to alias a view parameter name. More commonly, though, you can set additional validation rules for parameters coming from the URL path.</p><pre lang=python3>    <span class=kn>from</span> <span class=nn>rest_typed_views</span> <span class=kn>import</span> <span class=n>typed_api_view</span><span class=p>,</span> <span class=n>Query</span>    <span class=nd>@typed_api_view</span><span class=p>([</span><span class=s2>\"GET\"</span><span class=p>])</span>    <span class=k>def</span> <span class=nf>retrieve_event</span><span class=p>(</span><span class=nb>id</span><span class=p>:</span> <span class=nb>int</span> <span class=o>=</span> <span class=n>Path</span><span class=p>(</span><span class=n>min_value</span><span class=o>=</span><span class=mi>0</span><span class=p>,</span> <span class=n>max_value</span><span class=o>=</span><span class=mi>1000</span><span class=p>)):</span>        <span class=c1># ORM logic here...</span></pre><h3>Header</h3><p>Use the <code>Header</code> request element class to automatically retrieve a value from a header. Underscores in variable names are automatically converted to dashes.</p><pre lang=python3>    <span class=kn>from</span> <span class=nn>rest_typed_views</span> <span class=kn>import</span> <span class=n>typed_api_view</span><span class=p>,</span> <span class=n>Header</span>    <span class=nd>@typed_api_view</span><span class=p>([</span><span class=s2>\"GET\"</span><span class=p>])</span>    <span class=k>def</span> <span class=nf>retrieve_event</span><span class=p>(</span><span class=nb>id</span><span class=p>:</span> <span class=nb>int</span><span class=p>,</span> <span class=n>cache_control</span><span class=p>:</span> <span class=nb>str</span> <span class=o>=</span> <span class=n>Header</span><span class=p>(</span><span class=n>default</span><span class=o>=</span><span class=s2>\"no-cache\"</span><span class=p>)):</span>        <span class=c1># ORM logic here...</span></pre><p>If you prefer, you can explicitly specify the exact header key:</p><pre lang=python3>    <span class=kn>from</span> <span class=nn>rest_typed_views</span> <span class=kn>import</span> <span class=n>typed_api_view</span><span class=p>,</span> <span class=n>Header</span>    <span class=nd>@typed_api_view</span><span class=p>([</span><span class=s2>\"GET\"</span><span class=p>])</span>    <span class=k>def</span> <span class=nf>retrieve_event</span><span class=p>(</span><span class=nb>id</span><span class=p>:</span> <span class=nb>int</span><span class=p>,</span> <span class=n>cache_control</span><span class=p>:</span> <span class=nb>str</span> <span class=o>=</span> <span class=n>Header</span><span class=p>(</span><span class=n>source</span><span class=o>=</span><span class=s2>\"cache-control\"</span><span class=p>,</span> <span class=n>default</span><span class=o>=</span><span class=s2>\"no-cache\"</span><span class=p>)):</span>        <span class=c1># ORM logic here...</span></pre><h3>CurrentUser <a id=current-user-keywords rel=nofollow></a></h3><p>Use this class to have a view parameter populated with the current user of the request. You can even extract fields from the current user using the <code>source</code> option.</p><pre lang=python3>    <span class=kn>from</span> <span class=nn>my_pydantic_schemas</span> <span class=kn>import</span> <span class=n>BookingSchema</span>    <span class=kn>from</span> <span class=nn>rest_typed_views</span> <span class=kn>import</span> <span class=n>typed_api_view</span><span class=p>,</span> <span class=n>CurrentUser</span>    <span class=nd>@typed_api_view</span><span class=p>([</span><span class=s2>\"POST\"</span><span class=p>])</span>    <span class=k>def</span> <span class=nf>create_booking</span><span class=p>(</span><span class=n>booking</span><span class=p>:</span> <span class=n>BookingSchema</span><span class=p>,</span> <span class=n>user</span><span class=p>:</span> <span class=n>User</span> <span class=o>=</span> <span class=n>CurrentUser</span><span class=p>()):</span>        <span class=c1># Do something with the request.user</span>    <span class=nd>@typed_api_view</span><span class=p>([</span><span class=s2>\"GET\"</span><span class=p>])</span>    <span class=k>def</span> <span class=nf>retrieve_something</span><span class=p>(</span><span class=n>first_name</span><span class=p>:</span> <span class=nb>str</span> <span class=o>=</span> <span class=n>CurrentUser</span><span class=p>(</span><span class=n>source</span><span class=o>=</span><span class=s2>\"first_name\"</span><span class=p>)):</span>        <span class=c1># Do something with the request.user's first name</span></pre><p>You can also pass some additional parameters to the <code>CurrentUser</code> request element class to implement simple access control:</p><ul><li><code>member_of</code> (str) Validates that the current <code>request.user</code> is a member of a group with this name</li><li><code>member_of_any</code> (List[str]) Validates that the current <code>request.user</code> is a member of one of these groups</li></ul><p><em>Using these keyword validators assumes that your <code>User</code> model has a many-to-many relationship with <code>django.contrib.auth.models.Group</code> via <code>user.groups</code>.</em></p><p>An example:</p><pre lang=python3><span class=kn>from</span> <span class=nn>django.contrib.auth.models</span> <span class=kn>import</span> <span class=n>User</span><span class=kn>from</span> <span class=nn>rest_typed_views</span> <span class=kn>import</span> <span class=n>typed_api_view</span><span class=p>,</span> <span class=n>CurrentUser</span><span class=nd>@typed_api_view</span><span class=p>([</span><span class=s2>\"GET\"</span><span class=p>])</span><span class=k>def</span> <span class=nf>do_something</span><span class=p>(</span><span class=n>user</span><span class=p>:</span> <span class=n>User</span> <span class=o>=</span> <span class=n>CurrentUser</span><span class=p>(</span><span class=n>member_of</span><span class=o>=</span><span class=s2>\"admin\"</span><span class=p>)):</span>    <span class=c1># now have a user instance (assuming ValidationError wasn't raised)</span></pre><h2>Supported Types and Validator Rules</h2><p>The following native Python types are supported. Depending on the type, you can pass additional validation rules to the request element class (<code>Query</code>, <code>Path</code>, <code>Body</code>). You can think of the type combining with the validation rules to create a Django REST serializer field on the fly -- in fact, that's what happens behind the scenes.</p><h3>str</h3><p>Additional arguments:</p><ul><li><code>max_length</code> Validates that the input contains no more than this number of characters.</li><li><code>min_length</code> Validates that the input contains no fewer than this number of characters.</li><li><code>trim_whitespace</code> (bool; default <code>True</code>) Whether to trim leading and trailing white space.</li><li><code>format</code> Validates that the string matches a common format; supported values:<ul><li><code>email</code> validates the text to be a valid e-mail address.</li><li><code>slug</code> validates the input against the pattern <code>[a-zA-Z0-9_-]+</code>.</li><li><code>uuid</code> validates the input is a valid UUID string</li><li><code>url</code> validates fully qualified URLs of the form <code>http://&lt;host&gt;/&lt;path&gt;</code></li><li><code>ip</code> validates input is a valid IPv4 or IPv6 string</li><li><code>ipv4</code> validates input is a valid IPv4 string</li><li><code>ipv6</code> validates input is a valid IPv6 string</li><li><code>file_path</code> validates that the input corresponds to filenames in a certain directory on the filesystem; allows all the same keyword arguments as Django REST's <a href=\"https://www.django-rest-framework.org/api-guide/fields/#filepathfield\" rel=nofollow><code>FilePathField</code></a></li></ul></li></ul><p>Some examples:</p><pre lang=python3><span class=kn>from</span> <span class=nn>rest_typed_views</span> <span class=kn>import</span> <span class=n>typed_api_view</span><span class=p>,</span> <span class=n>Query</span><span class=nd>@typed_api_view</span><span class=p>([</span><span class=s2>\"GET\"</span><span class=p>])</span><span class=k>def</span> <span class=nf>search_users</span><span class=p>(</span><span class=n>email</span><span class=p>:</span> <span class=nb>str</span> <span class=o>=</span> <span class=n>Query</span><span class=p>(</span><span class=nb>format</span><span class=o>=</span><span class=s1>'email'</span><span class=p>)):</span>    <span class=c1># ORM logic here...</span>    <span class=k>return</span> <span class=n>Response</span><span class=p>(</span><span class=n>data</span><span class=p>)</span><span class=nd>@typed_api_view</span><span class=p>([</span><span class=s2>\"GET\"</span><span class=p>])</span><span class=k>def</span> <span class=nf>search_shared_links</span><span class=p>(</span><span class=n>url</span><span class=p>:</span> <span class=nb>str</span> <span class=o>=</span> <span class=n>Query</span><span class=p>(</span><span class=n>default</span><span class=o>=</span><span class=kc>None</span><span class=p>,</span> <span class=nb>format</span><span class=o>=</span><span class=s1>'url'</span><span class=p>)):</span>    <span class=c1># ORM logic here...</span>    <span class=k>return</span> <span class=n>Response</span><span class=p>(</span><span class=n>data</span><span class=p>)</span><span class=nd>@typed_api_view</span><span class=p>([</span><span class=s2>\"GET\"</span><span class=p>])</span><span class=k>def</span> <span class=nf>search_request_logs</span><span class=p>(</span><span class=n>ip_address</span><span class=p>:</span> <span class=nb>str</span> <span class=o>=</span> <span class=n>Query</span><span class=p>(</span><span class=n>default</span><span class=o>=</span><span class=kc>None</span><span class=p>,</span> <span class=nb>format</span><span class=o>=</span><span class=s1>'ip'</span><span class=p>)):</span>    <span class=c1># ORM logic here...</span>    <span class=k>return</span> <span class=n>Response</span><span class=p>(</span><span class=n>data</span><span class=p>)</span></pre><h3>int</h3><p>Additional arguments:</p><ul><li><code>max_value</code> Validate that the number provided is no greater than this value.</li><li><code>min_value</code> Validate that the number provided is no less than this value.</li></ul><p>An example:</p><pre lang=python3><span class=kn>from</span> <span class=nn>rest_typed_views</span> <span class=kn>import</span> <span class=n>typed_api_view</span><span class=p>,</span> <span class=n>Query</span><span class=nd>@typed_api_view</span><span class=p>([</span><span class=s2>\"GET\"</span><span class=p>])</span><span class=k>def</span> <span class=nf>search_products</span><span class=p>(</span><span class=n>inventory</span><span class=p>:</span> <span class=nb>int</span> <span class=o>=</span> <span class=n>Query</span><span class=p>(</span><span class=n>min_value</span><span class=o>=</span><span class=mi>0</span><span class=p>)):</span>    <span class=c1># ORM logic here...</span></pre><h3>float</h3><p>Additional arguments:</p><ul><li><code>max_value</code> Validate that the number provided is no greater than this value.</li><li><code>min_value</code> Validate that the number provided is no less than this value.</li></ul><p>An example:</p><pre lang=python3><span class=kn>from</span> <span class=nn>rest_typed_views</span> <span class=kn>import</span> <span class=n>typed_api_view</span><span class=p>,</span> <span class=n>Query</span><span class=nd>@typed_api_view</span><span class=p>([</span><span class=s2>\"GET\"</span><span class=p>])</span><span class=k>def</span> <span class=nf>search_products</span><span class=p>(</span><span class=n>price</span><span class=p>:</span> <span class=nb>float</span> <span class=o>=</span> <span class=n>Query</span><span class=p>(</span><span class=n>min_value</span><span class=o>=</span><span class=mi>0</span><span class=p>)):</span>    <span class=c1># ORM logic here...</span></pre><h3>Decimal</h3><p>Additional arguments:</p><ul><li><code>max_value</code> Validate that the number provided is no greater than this value.</li><li><code>min_value</code> Validate that the number provided is no less than this value.</li><li>.. even more ... accepts the same arguments as <a href=\"https://www.django-rest-framework.org/api-guide/fields/#decimalfield\" rel=nofollow>Django REST's <code>DecimalField</code></a></li></ul><h3>bool</h3><p>View parameters annotated with this type will validate and coerce the same values as Django REST's <code>BooleanField</code>, including but not limited to the following:</p><pre lang=python3>    <span class=n>true_values</span> <span class=o>=</span> <span class=p>[</span><span class=s2>\"yes\"</span><span class=p>,</span> <span class=mi>1</span><span class=p>,</span> <span class=s2>\"on\"</span><span class=p>,</span> <span class=s2>\"y\"</span><span class=p>,</span> <span class=s2>\"true\"</span><span class=p>]</span>    <span class=n>false_values</span> <span class=o>=</span> <span class=p>[</span><span class=s2>\"no\"</span><span class=p>,</span> <span class=mi>0</span><span class=p>,</span> <span class=s2>\"off\"</span><span class=p>,</span> <span class=s2>\"n\"</span><span class=p>,</span> <span class=s2>\"false\"</span><span class=p>]</span></pre><h3>datetime</h3><p>Additional arguments:</p><ul><li><code>input_formats</code> A list of input formats which may be used to parse the date-time, defaults to Django's <code>DATETIME_INPUT_FORMATS</code> settings, which defaults to <code>['iso-8601']</code></li><li><code>default_timezone</code>  A <code>pytz.timezone</code> of the timezone. If not specified, falls back to Django's <code>USE_TZ</code> setting.</li></ul><h3>date</h3><p>Additional arguments:</p><ul><li><code>input_formats</code> A list of input formats which may be used to parse the date, defaults to Django's <code>DATETIME_INPUT_FORMATS</code> settings, which defaults to <code>['iso-8601']</code></li></ul><h3>time</h3><p>Additional arguments:</p><ul><li><code>input_formats</code> A list of input formats which may be used to parse the time, defaults to Django's <code>TIME_INPUT_FORMATS</code> settings, which defaults to <code>['iso-8601']</code></li></ul><h3>timedelta</h3><p>Validates strings of the format <code>'[DD] [HH:[MM:]]ss[.uuuuuu]'</code> and converts them to a <code>datetime.timedelta</code> instance.</p><p>Additional arguments:</p><ul><li><code>max_value</code> Validate that the input duration is no greater than this value.</li><li><code>min_value</code> Validate that the input duration is no less than this value.</li></ul><h3>List</h3><p>Validates strings of the format <code>'[DD] [HH:[MM:]]ss[.uuuuuu]'</code> and converts them to a <code>datetime.timedelta</code> instance.</p><p>Additional arguments:</p><ul><li><code>min_length</code> Validates that the list contains no fewer than this number of elements.</li><li><code>max_length</code> Validates that the list contains no more than this number of elements.</li><li><code>child</code> Pass keyword constraints via a <code>Param</code> instance to to validate the members of the list.</li></ul><p>An example:</p><pre lang=python3><span class=kn>from</span> <span class=nn>rest_typed_views</span> <span class=kn>import</span> <span class=n>typed_api_view</span><span class=p>,</span> <span class=n>Param</span><span class=p>,</span> <span class=n>Query</span><span class=nd>@typed_api_view</span><span class=p>([</span><span class=s2>\"GET\"</span><span class=p>])</span><span class=k>def</span> <span class=nf>search_contacts</span><span class=p>(</span><span class=n>emails</span><span class=p>:</span> <span class=n>List</span><span class=p>[</span><span class=nb>str</span><span class=p>]</span> <span class=o>=</span> <span class=n>Query</span><span class=p>(</span><span class=n>max_length</span><span class=o>=</span><span class=mi>10</span><span class=p>,</span> <span class=n>child</span><span class=o>=</span><span class=n>Param</span><span class=p>(</span><span class=nb>format</span><span class=o>=</span><span class=s2>\"email\"</span><span class=p>))):</span>    <span class=c1># ORM logic here...</span></pre><h3>Enum</h3><p>Validates that the value of the input is one of a limited set of choices. Think of this as mapping to a Django REST <a href=\"https://www.django-rest-framework.org/api-guide/fields/#choicefield\" rel=nofollow><code>ChoiceField</code></a>.</p><p>An example:</p><pre lang=python3><span class=kn>from</span> <span class=nn>rest_typed_views</span> <span class=kn>import</span> <span class=n>typed_api_view</span><span class=p>,</span> <span class=n>Query</span><span class=k>class</span> <span class=nc>Straws</span><span class=p>(</span><span class=nb>str</span><span class=p>,</span> <span class=n>Enum</span><span class=p>):</span>    <span class=n>paper</span> <span class=o>=</span> <span class=s2>\"paper\"</span>    <span class=n>plastic</span> <span class=o>=</span> <span class=s2>\"plastic\"</span><span class=nd>@typed_api_view</span><span class=p>([</span><span class=s2>\"GET\"</span><span class=p>])</span><span class=k>def</span> <span class=nf>search_straws</span><span class=p>(</span><span class=nb>type</span><span class=p>:</span> <span class=n>Straws</span> <span class=o>=</span> <span class=kc>None</span><span class=p>):</span>    <span class=c1># ORM logic here...</span></pre><h3>marshmallow.Schema</h3><p>You can annotate view parameters with <a href=\"https://marshmallow.readthedocs.io/en/stable/\" rel=nofollow>Marshmallow schemas</a> to validate request data and pass an instance of the schema to the view.</p><pre lang=python3><span class=kn>from</span> <span class=nn>marshmallow</span> <span class=kn>import</span> <span class=n>Schema</span><span class=p>,</span> <span class=n>fields</span><span class=kn>from</span> <span class=nn>rest_typed_views</span> <span class=kn>import</span> <span class=n>typed_api_view</span><span class=p>,</span> <span class=n>Query</span><span class=k>class</span> <span class=nc>ArtistSchema</span><span class=p>(</span><span class=n>Schema</span><span class=p>):</span>    <span class=n>name</span> <span class=o>=</span> <span class=n>fields</span><span class=o>.</span><span class=n>Str</span><span class=p>()</span><span class=k>class</span> <span class=nc>AlbumSchema</span><span class=p>(</span><span class=n>Schema</span><span class=p>):</span>    <span class=n>title</span> <span class=o>=</span> <span class=n>fields</span><span class=o>.</span><span class=n>Str</span><span class=p>()</span>    <span class=n>release_date</span> <span class=o>=</span> <span class=n>fields</span><span class=o>.</span><span class=n>Date</span><span class=p>()</span>    <span class=n>artist</span> <span class=o>=</span> <span class=n>fields</span><span class=o>.</span><span class=n>Nested</span><span class=p>(</span><span class=n>ArtistSchema</span><span class=p>())</span><span class=sd>\"\"\"</span><span class=sd>    POST </span><span class=sd>    {</span><span class=sd>        \"title\": \"Michael Scott's Greatest Hits\",</span><span class=sd>        \"release_date\": \"2019-03-03\",</span><span class=sd>        \"artist\": {</span><span class=sd>            \"name\": \"Michael Scott\"</span><span class=sd>        }</span><span class=sd>    }</span><span class=sd>\"\"\"</span><span class=nd>@typed_api_view</span><span class=p>([</span><span class=s2>\"POST\"</span><span class=p>])</span><span class=k>def</span> <span class=nf>create_album</span><span class=p>(</span><span class=n>album</span><span class=p>:</span> <span class=n>AlbumSchema</span><span class=p>):</span>    <span class=c1># now have an album instance (assuming ValidationError wasn't raised)</span></pre><h3>pydantic.BaseModel</h3><p>You can annotate view parameters with <a href=\"https://pydantic-docs.helpmanual.io/\" rel=nofollow>Pydantic models</a> to validate request data and pass an instance of the model to the view.</p><pre lang=python3><span class=kn>from</span> <span class=nn>pydantic</span> <span class=kn>import</span> <span class=n>BaseModel</span><span class=kn>from</span> <span class=nn>rest_typed_views</span> <span class=kn>import</span> <span class=n>typed_api_view</span><span class=p>,</span> <span class=n>Query</span><span class=k>class</span> <span class=nc>User</span><span class=p>(</span><span class=n>BaseModel</span><span class=p>):</span>    <span class=nb>id</span><span class=p>:</span> <span class=nb>int</span>    <span class=n>name</span><span class=p>:</span> <span class=nb>str</span>    <span class=n>signup_ts</span><span class=p>:</span> <span class=n>datetime</span> <span class=o>=</span> <span class=kc>None</span>    <span class=n>friends</span><span class=p>:</span> <span class=n>List</span><span class=p>[</span><span class=nb>int</span><span class=p>]</span> <span class=o>=</span> <span class=p>[]</span><span class=sd>\"\"\"</span><span class=sd>    POST </span><span class=sd>    {</span><span class=sd>        \"id\": 24529782,</span><span class=sd>        \"name\": \"Michael Scott\",</span><span class=sd>        \"friends\": [24529782]</span><span class=sd>    }</span><span class=sd>\"\"\"</span><span class=nd>@typed_api_view</span><span class=p>([</span><span class=s2>\"POST\"</span><span class=p>])</span><span class=k>def</span> <span class=nf>create_user</span><span class=p>(</span><span class=n>user</span><span class=p>:</span> <span class=n>User</span><span class=p>):</span>    <span class=c1># now have a user instance (assuming ValidationError wasn't raised)</span></pre><h2>Change Log</h2><ul><li>June 7, 2020<ul><li>Fixes compatability with DRF decorator. Thanks @sjquant!</li><li>Makes Django's QueryDict work with Marshmallow and Pydantic validators. Thanks @filwaline!</li></ul></li><li>February 2, 2020: Adds support for <code>Header</code> request parameter. Thanks @bbkgh!</li></ul><h2>Motivation</h2><p>While REST Framework's ModelViewSets and ModelSerializers are very productive when building out CRUD resources, I've felt less productive in the framework when developing other types of operations. Serializers are a powerful and flexible way to validate incoming request data, but are not as self-documenting as type annotations. Furthermore, the Django ecosystem is hugely productive and I see no reason why REST Framework cannot take advantage of more Python 3 features.</p><h2>Inspiration</h2><p>I first came across type annotations for validation in <a href=\"https://github.com/encode/apistar\" rel=nofollow>API Star</a>, which has since evolved into an OpenAPI toolkit. This pattern has also been offered by <a href=\"https://hugapi.github.io/hug/\" rel=nofollow>Hug</a> and <a href=\"https://github.com/Bogdanp/molten\" rel=nofollow>Molten</a> (I believe in that order). Furthermore, I've borrowed ideas from <a href=\"https://github.com/tiangolo/fastapi\" rel=nofollow>FastAPI</a>, specifically its use of default values to declare additional validation rules. Finally, this <a href=\"https://instagram-engineering.com/types-for-python-http-apis-an-instagram-story-d3c3a207fdb7\" rel=nofollow>blog post</a> from Instagram's engineering team showed me how decorators can be used to implement these features on view functions.</p>          </div>        </div>        <div id=\"data\" data-project-tabs-target=\"content\" class=\"vertical-tabs__content\" role=\"tabpanel\" aria-labelledby=\"mobile-data-tab\" tabindex=\"-1\">          <h2 class=\"page-title\">Project details</h2><div class=\"sidebar-section\">  <h3 class=\"sidebar-section__title\">Project links</h3>  <ul class=\"vertical-tabs__list\">    <li>      <a class=\"vertical-tabs__tab vertical-tabs__tab--with-icon vertical-tabs__tab--condensed\" href=\"https://github.com/rsinger86/drf-typed-views\" rel=\"nofollow\">        <i class=\"fas fa-home\" aria-hidden=\"true\"></i>Homepage      </a>    </li>  </ul></div><div class=\"sidebar-section\">  <h3 class=\"sidebar-section__title\">Statistics</h3>  <div class=\"hidden github-repo-info\" data-controller=\"github-repo-info\">GitHub statistics:    <ul class=\"vertical-tabs__list\">      <li>        <a class=\"vertical-tabs__tab vertical-tabs__tab--with-icon vertical-tabs__tab--condensed\"           data-github-repo-info-target=\"stargazersUrl\" rel=\"noopener\">          <i class=\"fa fa-star\" aria-hidden=\"true\"></i>          <strong>Stars:</strong>          <span data-github-repo-info-target=\"stargazersCount\"></span>        </a>      </li>      <li>        <a class=\"vertical-tabs__tab vertical-tabs__tab--with-icon vertical-tabs__tab--condensed\"           data-github-repo-info-target=\"forksUrl\" rel=\"noopener\">          <i class=\"fa fa-code-branch\" aria-hidden=\"true\"></i>          <strong>Forks:</strong>          <span data-github-repo-info-target=\"forksCount\"></span>        </a>      </li>      <li>        <a class=\"vertical-tabs__tab vertical-tabs__tab--with-icon vertical-tabs__tab--condensed\"           data-github-repo-info-target=\"openIssuesUrl\" rel=\"noopener\">          <i class=\"fa fa-exclamation-circle\" aria-hidden=\"true\"></i>          <strong>Open issues:</strong>          <span data-github-repo-info-target=\"openIssuesCount\"></span>        </a>      </li>      <li>        <a class=\"vertical-tabs__tab vertical-tabs__tab--with-icon vertical-tabs__tab--condensed\"           data-github-repo-info-target=\"openPRsUrl\" rel=\"noopener\">          <i class=\"fa fa-code-pull-request\" aria-hidden=\"true\"></i>          <strong>Open PRs:</strong>          <span data-github-repo-info-target=\"openPRsCount\"></span>        </a>      </li>    </ul>  </div>  <p>View statistics for this project via <a href=\"https://libraries.io/pypi/drf-typed-views\" title=\"External link\" target=\"_blank\" rel=\"noopener\">Libraries.io</a>, or by using <a href=\"https://packaging.python.org/guides/analyzing-pypi-package-downloads/\" target=\"_blank\" rel=\"noopener\">our public dataset on Google BigQuery</a>  </p></div><div class=\"sidebar-section\">  <h3 class=\"sidebar-section__title\">Meta</h3>  <p><strong>License:</strong> MIT License (MIT)</p>    <p><strong>Author:</strong> <a href=\"mailto:robertgsinger@gmail.com\">Robert Singer</a></p>  <p class=\"tags\">    <i class=\"fa fa-tags\" aria-hidden=\"true\"></i>    <span class=\"sr-only\">Tags</span>    <span class=\"package-keyword\">      django,    </span>    <span class=\"package-keyword\">      rest,    </span>    <span class=\"package-keyword\">      type,    </span>    <span class=\"package-keyword\">      annotations,    </span>    <span class=\"package-keyword\">      automatic,    </span>    <span class=\"package-keyword\">      validation,    </span>    <span class=\"package-keyword\">      validate    </span>  </p></div><div class=\"sidebar-section\">    <h3 class=\"sidebar-section__title\">Maintainers</h3>      <span class=\"sidebar-section__maintainer\">        <a href=\"/user/rsinger86/\" aria-label=\"rsinger86\">          <span class=\"sidebar-section__user-gravatar\">            <img src=\"https://pypi-camo.freetls.fastly.net/a39c2d7e07defdcbf244d9909f3431f367132b9d/68747470733a2f2f7365637572652e67726176617461722e636f6d2f6176617461722f33343233613130373734616136346537333034396635623536336663386235633f73697a653d3530\" height=\"50\" width=\"50\" alt=\"Avatar for rsinger86 from gravatar.com\" title=\"Avatar for rsinger86 from gravatar.com\">          </span>          <span class=\"sidebar-section__user-gravatar-text\">            rsinger86          </span>        </a>      </span></div><div class=\"sidebar-section\">  <h3 class=\"sidebar-section__title\">Classifiers</h3>  <ul class=\"sidebar-section__classifiers\">    <li>      <strong>Development Status</strong>      <ul>        <li>          <a href=\"/search/?c=Development+Status+%3A%3A+4+-+Beta\">            4 - Beta          </a>        </li>      </ul>    </li>    <li>      <strong>License</strong>      <ul>        <li>          <a href=\"/search/?c=License+%3A%3A+OSI+Approved+%3A%3A+MIT+License\">            OSI Approved :: MIT License          </a>        </li>      </ul>    </li>    <li>      <strong>Programming Language</strong>      <ul>        <li>          <a href=\"/search/?c=Programming+Language+%3A%3A+Python+%3A%3A+3.3\">            Python :: 3.3          </a>        </li>        <li>          <a href=\"/search/?c=Programming+Language+%3A%3A+Python+%3A%3A+3.4\">            Python :: 3.4          </a>        </li>        <li>          <a href=\"/search/?c=Programming+Language+%3A%3A+Python+%3A%3A+3.5\">            Python :: 3.5          </a>        </li>        <li>          <a href=\"/search/?c=Programming+Language+%3A%3A+Python+%3A%3A+3.6\">            Python :: 3.6          </a>        </li>      </ul>    </li>  </ul></div>          <br>        </div>        <div id=\"history\" data-project-tabs-target=\"content\" class=\"vertical-tabs__content\" role=\"tabpanel\" aria-labelledby=\"history-tab mobile-history-tab\" tabindex=\"-1\">          <h2 class=\"page-title split-layout\">            <span>Release history</span>            <span class=\"reset-text margin-top\">              <a href=\"/help/#project-release-notifications\">Release notifications</a> |              <a href=\"/rss/project/drf-typed-views/releases.xml\">RSS feed <i class=\"fa fa-rss\" aria-hidden=\"true\"></i></a>            </span>          </h2>          <div class=\"release-timeline\">            <div class=\"release release--latest release--current\">              <div class=\"release__meta\">                <span class=\"badge\">This version</span>              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/blue-cube.572a5bfb.svg\">              </div>              <a class=\"card release__card\" href=\"/project/drf-typed-views/0.3.0/\">                <p class=\"release__version\">                  0.3.0                </p>                <p class=\"release__version-date\">                  <time datetime=\"2020-06-07T16:48:45+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Jun 7, 2020</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/drf-typed-views/0.2.1/\">                <p class=\"release__version\">                  0.2.1                </p>                <p class=\"release__version-date\">                  <time datetime=\"2020-03-12T18:47:41+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Mar 12, 2020</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/drf-typed-views/0.2.0/\">                <p class=\"release__version\">                  0.2.0                </p>                <p class=\"release__version-date\">                  <time datetime=\"2020-02-02T21:46:23+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Feb 2, 2020</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/drf-typed-views/0.1.5/\">                <p class=\"release__version\">                  0.1.5                </p>                <p class=\"release__version-date\">                  <time datetime=\"2019-10-17T02:12:39+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Oct 17, 2019</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/drf-typed-views/0.1.3/\">                <p class=\"release__version\">                  0.1.3                </p>                <p class=\"release__version-date\">                  <time datetime=\"2019-10-09T04:27:20+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Oct 9, 2019</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/drf-typed-views/0.1.2/\">                <p class=\"release__version\">                  0.1.2                </p>                <p class=\"release__version-date\">                  <time datetime=\"2019-10-09T04:11:45+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Oct 9, 2019</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/drf-typed-views/0.1.1/\">                <p class=\"release__version\">                  0.1.1                </p>                <p class=\"release__version-date\">                  <time datetime=\"2019-10-03T23:19:12+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Oct 3, 2019</time>                </p>              </a>            </div>            <div class=\"release release--oldest\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/drf-typed-views/0.1.0/\">                <p class=\"release__version\">                  0.1.0                </p>                <p class=\"release__version-date\">                  <time datetime=\"2019-10-03T05:48:41+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Oct 3, 2019</time>                </p>              </a>            </div>          </div>        </div>          <div id=\"files\" data-project-tabs-target=\"content\" class=\"vertical-tabs__content\" role=\"tabpanel\" aria-labelledby=\"files-tab mobile-files-tab\" tabindex=\"-1\">            <h2 class=\"page-title\">Download files</h2>            <p>Download the file for your platform. If you're not sure which to choose, learn more about <a href=\"https://packaging.python.org/tutorials/installing-packages/\" title=\"External link\" target=\"_blank\" rel=\"noopener\">installing packages</a>.</p>            <h3>Source Distribution            </h3>                  <div class=\"file\">      <div class=\"file__graphic\">        <i class=\"far fa-file\" aria-hidden=\"true\"></i>      </div>      <div class=\"card file__card\">        <a href=\"https://files.pythonhosted.org/packages/44/50/da0541c3d267200fb7f42461019221371ec089d8539fe4c4c3e90e33fa3d/drf-typed-views-0.3.0.tar.gz\">          drf-typed-views-0.3.0.tar.gz        </a>        (26.2 kB        <a href=\"#copy-hash-modal-93a467da-f984-4bc3-8725-ff78ec3ea08c\">view hashes</a>)        <p class=\"file__meta\">          Uploaded <time datetime=\"2020-06-07T16:48:45+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Jun 7, 2020</time>          <code>source</code>        </p>      </div>    </div>          </div><div id=\"copy-hash-modal-93a467da-f984-4bc3-8725-ff78ec3ea08c\" class=\"modal modal--wide\">  <div class=\"modal__content\" role=\"dialog\">    <a href=\"#modal-close\" title=\"Close\" class=\"modal__close\">      <i class=\"fa fa-times\" aria-hidden=\"true\"></i>      <span class=\"sr-only\">Close</span>    </a>    <div class=\"modal__body\">      <h3 class=\"modal__title\"><a href=\"https://pip.pypa.io/en/stable/topics/secure-installs/#hash-checking-mode\" title=\"External link\" target=\"_blank\" rel=\"noopener\">Hashes</a> for drf-typed-views-0.3.0.tar.gz      </h3>      <table class=\"table table--hashes\">        <caption class=\"sr-only\">Hashes for drf-typed-views-0.3.0.tar.gz</caption>        <thead>          <tr>            <th scope=\"col\">Algorithm</th>            <th scope=\"col\">Hash digest</th>            <th></th>          </tr>        </thead>        <tbody>          <tr data-controller=\"clipboard\">            <th scope=\"row\">SHA256</th>            <td><code data-clipboard-target=\"source\">260d15f62c728c951d50bffe058bf1890103f1878f75af4977b309b36f8cddef</code></td>            <td class=\"table__align-right\">              <button type=\"button\" class=\"button button--small copy-tooltip copy-tooltip-w\" data-action=\"clipboard#copy\" data-clipboard-target=\"tooltip\" data-clipboard-tooltip-value=\"Copy to clipboard\">Copy              </button>            </td>          </tr>          <tr data-controller=\"clipboard\">            <th scope=\"row\">MD5</th>            <td><code data-clipboard-target=\"source\">49e11968d1825dbd34892d005fe9f13c</code></td>            <td class=\"table__align-right\">              <button type=\"button\" class=\"button button--small copy-tooltip copy-tooltip-w\" data-action=\"clipboard#copy\" data-clipboard-target=\"tooltip\" data-clipboard-tooltip-value=\"Copy to clipboard\">Copy              </button>            </td>          </tr>          <tr data-controller=\"clipboard\">            <th scope=\"row\">BLAKE2b-256</th>            <td><code data-clipboard-target=\"source\">4450da0541c3d267200fb7f42461019221371ec089d8539fe4c4c3e90e33fa3d</code></td>            <td class=\"table__align-right\">              <button type=\"button\" class=\"button button--small copy-tooltip copy-tooltip-w\" data-action=\"clipboard#copy\" data-clipboard-target=\"tooltip\" data-clipboard-tooltip-value=\"Copy to clipboard\">Copy              </button>            </td>          </tr>        </tbody>      </table>    </div>    <div class=\"modal__footer\">      <a href=\"#modal-close\" class=\"button button--primary modal__action\">Close</a>    </div>  </div></div>      </div>    </div>  </div></div>    </main>    <footer class=\"footer\">      <div class=\"footer__logo\">        <img src=\"/static/images/white-cube.2351a86c.svg\" alt=\"\" class=\"-js-white-cube\">      </div>      <div class=\"footer__menus\">        <div class=\"footer__menu\">          <h2>Help</h2>          <nav aria-label=\"Help navigation\">            <ul>              <li><a href=\"https://packaging.python.org/tutorials/installing-packages/\" title=\"External link\" target=\"_blank\" rel=\"noopener\">Installing packages</a></li>              <li><a href=\"https://packaging.python.org/tutorials/packaging-projects/\" title=\"External link\" target=\"_blank\" rel=\"noopener\">Uploading packages</a></li>              <li><a href=\"https://packaging.python.org/\" title=\"External link\" target=\"_blank\" rel=\"noopener\">User guide</a></li>              <li><a href=\"https://www.python.org/dev/peps/pep-0541/\" title=\"External link\" target=\"_blank\" rel=\"noopener\">Project name retention</a></li>              <li><a href=\"/help/\">FAQs</a></li>            </ul>          </nav>        </div>        <div class=\"footer__menu\">          <h2>About PyPI</h2>          <nav aria-label=\"About PyPI navigation\">            <ul>              <li><a href=\"https://twitter.com/PyPI\" title=\"External link\" target=\"_blank\" rel=\"noopener\">PyPI on Twitter</a></li>              <li><a href=\"https://dtdg.co/pypi\" title=\"External link\" target=\"_blank\" rel=\"noopener\">Infrastructure dashboard</a></li>              <li><a href=\"/stats/\">Statistics</a></li>              <li><a href=\"/trademarks/\">Logos & trademarks</a></li>              <li><a href=\"/sponsors/\">Our sponsors</a></li>            </ul>          </nav>        </div>        <div class=\"footer__menu\">          <h2>Contributing to PyPI</h2>          <nav aria-label=\"How to contribute navigation\">            <ul>              <li><a href=\"/help/#feedback\">Bugs and feedback</a></li>              <li><a href=\"https://github.com/pypi/warehouse\" title=\"External link\" target=\"_blank\" rel=\"noopener\">Contribute on GitHub</a></li>              <li><a href=\"https://hosted.weblate.org/projects/pypa/warehouse/\" title=\"External link\" target=\"_blank\" rel=\"noopener\">Translate PyPI</a></li>              <li><a href=\"/sponsors/\">Sponsor PyPI</a></li>              <li><a href=\"https://github.com/pypi/warehouse/graphs/contributors\" title=\"External link\" target=\"_blank\" rel=\"noopener\">Development credits</a></li>            </ul>          </nav>        </div>        <div class=\"footer__menu\">          <h2>Using PyPI</h2>          <nav aria-label=\"Using PyPI navigation\">            <ul>              <li><a href=\"https://github.com/pypa/.github/blob/main/CODE_OF_CONDUCT.md\" title=\"External link\" target=\"_blank\" rel=\"noopener\">Code of conduct</a></li>              <li><a href=\"/security/\">Report security issue</a></li>              <li><a href=\"https://www.python.org/privacy/\" title=\"External link\" target=\"_blank\" rel=\"noopener\">Privacy policy</a></li>              <li><a href=\"/policy/terms-of-use/\">Terms of use</a></li>              <li><a href=\"/policy/acceptable-use-policy/\">Acceptable Use Policy</a></li>            </ul>          </nav>        </div>      </div>      <hr class=\"footer__divider\">      <div class=\"footer__text\">        <p>Status:<a href=\"https://status.python.org/\" title=\"External link\" target=\"_blank\" rel=\"noopener\">          <span data-statuspage-domain=\"https://2p66nmmycsj3.statuspage.io\">all systems operational</span></a>        </p>        <p>Developed and maintained by the Python community, for the Python community.          <br>          <a href=\"https://donate.pypi.org\">Donate today!</a>        </p>        <p>          \"PyPI\", \"Python Package Index\", and the blocks logos are registered <a href=\"/trademarks/\">trademarks</a> of the <a href=\"https://python.org/psf-landing\" target=\"_blank\" rel=\"noopener\">Python Software Foundation</a>.<br>        </p>        <p>          \u00a9 2024 <a href=\"https://www.python.org/psf-landing/\" title=\"External link\" target=\"_blank\" rel=\"noopener\">Python Software Foundation</a><br>          <a href=\"/sitemap/\">Site map</a>        </p>      </div>      <div class=\"centered hide-on-desktop\">        <button type=\"button\" class=\"button button--switch-to-desktop hidden\" data-viewport-toggle-target=\"switchToDesktop\" data-action=\"viewport-toggle#switchToDesktop\">Switch to desktop version        </button>      </div>    </footer>    <div class=\"language-switcher\">      <form action=\"/locale/\">        <ul>          <li>            <button              class=\"language-switcher__selected\"              name=\"locale_id\" value=\"en\" type=\"submit\"            >              English            </button>          </li>          <li>            <button              name=\"locale_id\" value=\"es\" type=\"submit\"            >              espa\u00f1ol            </button>          </li>          <li>            <button              name=\"locale_id\" value=\"fr\" type=\"submit\"            >              fran\u00e7ais            </button>          </li>          <li>            <button              name=\"locale_id\" value=\"ja\" type=\"submit\"            >              \u65e5\u672c\u8a9e            </button>          </li>          <li>            <button              name=\"locale_id\" value=\"pt_BR\" type=\"submit\"            >              portugu\u00eas (Brasil)            </button>          </li>          <li>            <button              name=\"locale_id\" value=\"uk\" type=\"submit\"            >              \u0443\u043a\u0440\u0430\u0457\u043d\u0441\u044c\u043a\u0430            </button>          </li>          <li>            <button              name=\"locale_id\" value=\"el\" type=\"submit\"            >              \u0395\u03bb\u03bb\u03b7\u03bd\u03b9\u03ba\u03ac            </button>          </li>          <li>            <button              name=\"locale_id\" value=\"de\" type=\"submit\"            >              Deutsch            </button>          </li>          <li>            <button              name=\"locale_id\" value=\"zh_Hans\" type=\"submit\"            >              \u4e2d\u6587 (\u7b80\u4f53)            </button>          </li>          <li>            <button              name=\"locale_id\" value=\"zh_Hant\" type=\"submit\"            >              \u4e2d\u6587 (\u7e41\u9ad4)            </button>          </li>          <li>            <button              name=\"locale_id\" value=\"ru\" type=\"submit\"            >              \u0440\u0443\u0441\u0441\u043a\u0438\u0439            </button>          </li>          <li>            <button              name=\"locale_id\" value=\"he\" type=\"submit\"            >              \u05e2\u05d1\u05e8\u05d9\u05ea            </button>          </li>          <li>            <button              name=\"locale_id\" value=\"eo\" type=\"submit\"            >              esperanto            </button>          </li>        </ul>      </form>    </div><div class=\"sponsors\">  <p class=\"sponsors__title\">Supported by</p>  <div class=\"sponsors__divider\"></div>        <a class=\"sponsors__sponsor\" target=\"_blank\" rel=\"noopener\" href=\"https://aws.amazon.com/\">          <img class=sponsors__image src=\"https://pypi-camo.freetls.fastly.net/ed7074cadad1a06f56bc520ad9bd3e00d0704c5b/68747470733a2f2f73746f726167652e676f6f676c65617069732e636f6d2f707970692d6173736574732f73706f6e736f726c6f676f732f6177732d77686974652d6c6f676f2d7443615473387a432e706e67\" alt=AWS loading=lazy>          <span class=\"sponsors__name\">AWS</span>          <span class=\"sponsors__service\">            Cloud computing and Security Sponsor          </span>        </a>        <a class=\"sponsors__sponsor\" target=\"_blank\" rel=\"noopener\" href=\"https://www.datadoghq.com/\">          <img class=sponsors__image src=\"https://pypi-camo.freetls.fastly.net/8855f7c063a3bdb5b0ce8d91bfc50cf851cc5c51/68747470733a2f2f73746f726167652e676f6f676c65617069732e636f6d2f707970692d6173736574732f73706f6e736f726c6f676f732f64617461646f672d77686974652d6c6f676f2d6668644c4e666c6f2e706e67\" alt=Datadog loading=lazy>          <span class=\"sponsors__name\">Datadog</span>          <span class=\"sponsors__service\">            Monitoring          </span>        </a>        <a class=\"sponsors__sponsor\" target=\"_blank\" rel=\"noopener\" href=\"https://www.fastly.com/\">          <img class=sponsors__image src=\"https://pypi-camo.freetls.fastly.net/df6fe8829cbff2d7f668d98571df1fd011f36192/68747470733a2f2f73746f726167652e676f6f676c65617069732e636f6d2f707970692d6173736574732f73706f6e736f726c6f676f732f666173746c792d77686974652d6c6f676f2d65684d3077735f6f2e706e67\" alt=Fastly loading=lazy>          <span class=\"sponsors__name\">Fastly</span>          <span class=\"sponsors__service\">            CDN          </span>        </a>        <a class=\"sponsors__sponsor\" target=\"_blank\" rel=\"noopener\" href=\"https://careers.google.com/\">          <img class=sponsors__image src=\"https://pypi-camo.freetls.fastly.net/420cc8cf360bac879e24c923b2f50ba7d1314fb0/68747470733a2f2f73746f726167652e676f6f676c65617069732e636f6d2f707970692d6173736574732f73706f6e736f726c6f676f732f676f6f676c652d77686974652d6c6f676f2d616734424e3774332e706e67\" alt=Google loading=lazy>          <span class=\"sponsors__name\">Google</span>          <span class=\"sponsors__service\">            Download Analytics          </span>        </a>        <a class=\"sponsors__sponsor\" target=\"_blank\" rel=\"noopener\" href=\"https://www.python.org/psf/sponsors/#microsoft\">          <img class=sponsors__image src=\"https://pypi-camo.freetls.fastly.net/524d1ce72f7772294ca4c1fe05d21dec8fa3f8ea/68747470733a2f2f73746f726167652e676f6f676c65617069732e636f6d2f707970692d6173736574732f73706f6e736f726c6f676f732f6d6963726f736f66742d77686974652d6c6f676f2d5a443172685444462e706e67\" alt=Microsoft loading=lazy>          <span class=\"sponsors__name\">Microsoft</span>          <span class=\"sponsors__service\">            PSF Sponsor          </span>        </a>        <a class=\"sponsors__sponsor\" target=\"_blank\" rel=\"noopener\" href=\"https://www.pingdom.com/\">          <img class=sponsors__image src=\"https://pypi-camo.freetls.fastly.net/d01053c02f3a626b73ffcb06b96367fdbbf9e230/68747470733a2f2f73746f726167652e676f6f676c65617069732e636f6d2f707970692d6173736574732f73706f6e736f726c6f676f732f70696e67646f6d2d77686974652d6c6f676f2d67355831547546362e706e67\" alt=Pingdom loading=lazy>          <span class=\"sponsors__name\">Pingdom</span>          <span class=\"sponsors__service\">            Monitoring          </span>        </a>        <a class=\"sponsors__sponsor\" target=\"_blank\" rel=\"noopener\" href=\"https://getsentry.com/for/python\">          <img class=sponsors__image src=\"https://pypi-camo.freetls.fastly.net/67af7117035e2345bacb5a82e9aa8b5b3e70701d/68747470733a2f2f73746f726167652e676f6f676c65617069732e636f6d2f707970692d6173736574732f73706f6e736f726c6f676f732f73656e7472792d77686974652d6c6f676f2d4a2d6b64742d706e2e706e67\" alt=Sentry loading=lazy>          <span class=\"sponsors__name\">Sentry</span>          <span class=\"sponsors__service\">            Error logging          </span>        </a>        <a class=\"sponsors__sponsor\" target=\"_blank\" rel=\"noopener\" href=\"https://statuspage.io\">          <img class=sponsors__image src=\"https://pypi-camo.freetls.fastly.net/b611884ff90435a0575dbab7d9b0d3e60f136466/68747470733a2f2f73746f726167652e676f6f676c65617069732e636f6d2f707970692d6173736574732f73706f6e736f726c6f676f732f737461747573706167652d77686974652d6c6f676f2d5467476c6a4a2d502e706e67\" alt=StatusPage loading=lazy>          <span class=\"sponsors__name\">StatusPage</span>          <span class=\"sponsors__service\">            Status page          </span>        </a></div>  </body></html>",
  "embeddings": []
}
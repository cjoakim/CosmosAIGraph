{
  "libtype": "pypi",
  "libname": "funcsigs",
  "url": "http://funcsigs.readthedocs.org",
  "html": "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"  \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\"><html xmlns=\"http://www.w3.org/1999/xhtml\">  <head>    <meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />        <title>Introducing funcsigs &mdash; funcsigs 0.4 documentation</title>        <link rel=\"stylesheet\" href=\"_static/agogo.css\" type=\"text/css\" />    <link rel=\"stylesheet\" href=\"_static/pygments.css\" type=\"text/css\" />    <link rel=\"stylesheet\" href=\"https://media.readthedocs.org/css/badge_only.css\" type=\"text/css\" />    <link rel=\"stylesheet\" href=\"https://media.readthedocs.org/css/readthedocs-doc-embed.css\" type=\"text/css\" />        <script type=\"text/javascript\">      var DOCUMENTATION_OPTIONS = {        URL_ROOT:    '',        VERSION:     '0.4',        COLLAPSE_INDEX: false,        FILE_SUFFIX: '.html',        HAS_SOURCE:  true      };    </script>    <script type=\"text/javascript\" src=\"https://media.readthedocs.org/javascript/jquery/jquery-2.0.3.min.js\"></script>    <script type=\"text/javascript\" src=\"https://media.readthedocs.org/javascript/jquery/jquery-migrate-1.2.1.min.js\"></script>    <script type=\"text/javascript\" src=\"https://media.readthedocs.org/javascript/underscore.js\"></script>    <script type=\"text/javascript\" src=\"https://media.readthedocs.org/javascript/doctools.js\"></script>    <script type=\"text/javascript\" src=\"https://media.readthedocs.org/javascript/readthedocs-doc-embed.js\"></script>    <link rel=\"top\" title=\"funcsigs 0.4 documentation\" href=\"#\" />    <a href=\"https://github.com/aliles/funcsigs\">        <img style=\"position: absolute; top: 0; right: 0; border: 0;\"             src=\"https://s3.amazonaws.com/github/ribbons/forkme_right_red_aa0000.png\"             alt=\"Fork me on GitHub\">    </a>     <!-- RTD Extra Head --><script type=\"text/javascript\">  // This is included here because other places don't have access to the pagename variable.  var READTHEDOCS_DATA = {    project: \"funcsigs\",    version: \"0.4\",    page: \"index\",    theme: \"agogo\",    docroot: \"/docs/\"  }  // Old variables  var doc_version = \"0.4\";  var doc_slug = \"funcsigs\";  var page_name = \"index\";  var html_theme = \"agogo\";</script><!-- RTD Analytics Code --><!-- Included in the header because you don't have a footer block. --><script type=\"text/javascript\">  var _gaq = _gaq || [];  _gaq.push(['_setAccount', 'UA-17997319-1']);  _gaq.push(['_trackPageview']);  (function() {    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);  })();</script><!-- end RTD Analytics Code --><!-- User Analytics Code --><script type=\"text/javascript\">  var _gaq = _gaq || [];  _gaq.push(['_setAccount', 'UA-42949701-1']);  _gaq.push(['_trackPageview']);  (function() {    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);  })();</script><!-- End User Analytics Code --><!-- end RTD <extrahead> -->  </head>  <body>    <div class=\"header-wrapper\">      <div class=\"header\">        <div class=\"headertitle\"><a          href=\"#\">funcsigs 0.4 documentation</a></div>        <div class=\"rel\">          <a href=\"genindex.html\" title=\"General Index\"             accesskey=\"I\">index</a>        </div>       </div>    </div>    <div class=\"content-wrapper\">      <div class=\"content\">        <div class=\"document\">                  <div class=\"documentwrapper\">        <div class=\"bodywrapper\">          <div class=\"body\">              <div class=\"section\" id=\"introducing-funcsigs\"><h1>Introducing funcsigs<a class=\"headerlink\" href=\"#introducing-funcsigs\" title=\"Permalink to this headline\">\u00b6</a></h1><div class=\"section\" id=\"the-funcsigs-package\"><h2>The Funcsigs Package<a class=\"headerlink\" href=\"#the-funcsigs-package\" title=\"Permalink to this headline\">\u00b6</a></h2><p><em>funcsigs</em> is a backport of the <a class=\"reference external\" href=\"http://www.python.org/dev/peps/pep-0362/\">PEP 362</a> function signature features fromPython 3.3&#8217;s <a class=\"reference external\" href=\"http://docs.python.org/3/library/inspect.html#introspecting-callables-with-the-signature-object\">inspect</a> module. The backport is compatible with Python 2.6, 2.7as well as 3.2 and up.</p><div class=\"section\" id=\"compatability\"><h3>Compatability<a class=\"headerlink\" href=\"#compatability\" title=\"Permalink to this headline\">\u00b6</a></h3><p>The <em>funcsigs</em> backport has been tested against:</p><ul class=\"simple\"><li>CPython 2.6</li><li>CPython 2.7</li><li>CPython 3.2</li><li>PyPy 1.9</li></ul><p>Continuous integration testing is provided by <a class=\"reference external\" href=\"http://travis-ci.org/\">Travis CI</a>.</p><p>Under Python 2.x there is a compatability issue when a function is assigned tothe <tt class=\"docutils literal\"><span class=\"pre\">__wrapped__</span></tt> property of a class after it has been constructed.Similiarily there under PyPy directly passing the <tt class=\"docutils literal\"><span class=\"pre\">__call__</span></tt> method of abuiltin is also a compatability issues.  Otherwise the functionality isbelieved to be uniform between both Python2 and Python3.</p></div><div class=\"section\" id=\"issues\"><h3>Issues<a class=\"headerlink\" href=\"#issues\" title=\"Permalink to this headline\">\u00b6</a></h3><p>Source code for <em>funcsigs</em> is hosted on <a class=\"reference external\" href=\"https://github.com/aliles/funcsigs\">GitHub</a>. Any bug reports or featurerequests can be made using GitHub&#8217;s <a class=\"reference external\" href=\"https://github.com/alies/funcsigs/issues\">issues system</a>.</p></div></div><div class=\"section\" id=\"introspecting-callables-with-the-signature-object\"><h2>Introspecting callables with the Signature object<a class=\"headerlink\" href=\"#introspecting-callables-with-the-signature-object\" title=\"Permalink to this headline\">\u00b6</a></h2><div class=\"admonition note\"><p class=\"first admonition-title\">Note</p><p class=\"last\">This section of documentation is a direct repoduction of the Pythonstandard library documentation for the inspect module.</p></div><p>The Signature object represents the call signature of a callable object and itsreturn annotation.  To retrieve a Signature object, use the <a class=\"reference internal\" href=\"#signature\" title=\"signature\"><tt class=\"xref py py-func docutils literal\"><span class=\"pre\">signature()</span></tt></a>function.</p><dl class=\"function\"><dt id=\"signature\"><tt class=\"descname\">signature</tt><big>(</big><em>callable</em><big>)</big><a class=\"headerlink\" href=\"#signature\" title=\"Permalink to this definition\">\u00b6</a></dt><dd><p>Return a <a class=\"reference internal\" href=\"#Signature\" title=\"Signature\"><tt class=\"xref py py-class docutils literal\"><span class=\"pre\">Signature</span></tt></a> object for the given <tt class=\"docutils literal\"><span class=\"pre\">callable</span></tt>:</p><div class=\"highlight-python\"><div class=\"highlight\"><pre><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">inspect</span> <span class=\"kn\">import</span> <span class=\"n\">signature</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">def</span> <span class=\"nf\">foo</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">:</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span><span class=\"gp\">... </span>    <span class=\"k\">pass</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">sig</span> <span class=\"o\">=</span> <span class=\"n\">signature</span><span class=\"p\">(</span><span class=\"n\">foo</span><span class=\"p\">)</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">sig</span><span class=\"p\">)</span><span class=\"go\">&#39;(a, *, b:int, **kwargs)&#39;</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">sig</span><span class=\"o\">.</span><span class=\"n\">parameters</span><span class=\"p\">[</span><span class=\"s\">&#39;b&#39;</span><span class=\"p\">])</span><span class=\"go\">&#39;b:int&#39;</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">sig</span><span class=\"o\">.</span><span class=\"n\">parameters</span><span class=\"p\">[</span><span class=\"s\">&#39;b&#39;</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">annotation</span><span class=\"go\">&lt;class &#39;int&#39;&gt;</span></pre></div></div><p>Accepts a wide range of python callables, from plain functions and classes to<a class=\"reference external\" href=\"http://docs.python.org/py3k/library/functools.html#functools.partial\" title=\"(in Python v3.3)\"><tt class=\"xref py py-func docutils literal\"><span class=\"pre\">functools.partial()</span></tt></a> objects.</p><div class=\"admonition note\"><p class=\"first admonition-title\">Note</p><p class=\"last\">Some callables may not be introspectable in certain implementations ofPython.  For example, in CPython, built-in functions defined in C provideno metadata about their arguments.</p></div></dd></dl><dl class=\"class\"><dt id=\"Signature\"><em class=\"property\">class </em><tt class=\"descname\">Signature</tt><a class=\"headerlink\" href=\"#Signature\" title=\"Permalink to this definition\">\u00b6</a></dt><dd><p>A Signature object represents the call signature of a function and its returnannotation.  For each parameter accepted by the function it stores a<a class=\"reference internal\" href=\"#Parameter\" title=\"Parameter\"><tt class=\"xref py py-class docutils literal\"><span class=\"pre\">Parameter</span></tt></a> object in its <a class=\"reference internal\" href=\"#Signature.parameters\" title=\"Signature.parameters\"><tt class=\"xref py py-attr docutils literal\"><span class=\"pre\">parameters</span></tt></a> collection.</p><p>Signature objects are <em>immutable</em>.  Use <a class=\"reference internal\" href=\"#Signature.replace\" title=\"Signature.replace\"><tt class=\"xref py py-meth docutils literal\"><span class=\"pre\">Signature.replace()</span></tt></a> to make amodified copy.</p><dl class=\"attribute\"><dt id=\"Signature.empty\"><tt class=\"descname\">empty</tt><a class=\"headerlink\" href=\"#Signature.empty\" title=\"Permalink to this definition\">\u00b6</a></dt><dd><p>A special class-level marker to specify absence of a return annotation.</p></dd></dl><dl class=\"attribute\"><dt id=\"Signature.parameters\"><tt class=\"descname\">parameters</tt><a class=\"headerlink\" href=\"#Signature.parameters\" title=\"Permalink to this definition\">\u00b6</a></dt><dd><p>An ordered mapping of parameters&#8217; names to the corresponding<a class=\"reference internal\" href=\"#Parameter\" title=\"Parameter\"><tt class=\"xref py py-class docutils literal\"><span class=\"pre\">Parameter</span></tt></a> objects.</p></dd></dl><dl class=\"attribute\"><dt id=\"Signature.return_annotation\"><tt class=\"descname\">return_annotation</tt><a class=\"headerlink\" href=\"#Signature.return_annotation\" title=\"Permalink to this definition\">\u00b6</a></dt><dd><p>The &#8220;return&#8221; annotation for the callable.  If the callable has no &#8220;return&#8221;annotation, this attribute is set to <a class=\"reference internal\" href=\"#Signature.empty\" title=\"Signature.empty\"><tt class=\"xref py py-attr docutils literal\"><span class=\"pre\">Signature.empty</span></tt></a>.</p></dd></dl><dl class=\"method\"><dt id=\"Signature.bind\"><tt class=\"descname\">bind</tt><big>(</big><em>*args</em>, <em>**kwargs</em><big>)</big><a class=\"headerlink\" href=\"#Signature.bind\" title=\"Permalink to this definition\">\u00b6</a></dt><dd><p>Create a mapping from positional and keyword arguments to parameters.Returns <a class=\"reference internal\" href=\"#BoundArguments\" title=\"BoundArguments\"><tt class=\"xref py py-class docutils literal\"><span class=\"pre\">BoundArguments</span></tt></a> if <tt class=\"docutils literal\"><span class=\"pre\">*args</span></tt> and <tt class=\"docutils literal\"><span class=\"pre\">**kwargs</span></tt> match thesignature, or raises a <a class=\"reference external\" href=\"http://docs.python.org/py3k/library/exceptions.html#TypeError\" title=\"(in Python v3.3)\"><tt class=\"xref py py-exc docutils literal\"><span class=\"pre\">TypeError</span></tt></a>.</p></dd></dl><dl class=\"method\"><dt id=\"Signature.bind_partial\"><tt class=\"descname\">bind_partial</tt><big>(</big><em>*args</em>, <em>**kwargs</em><big>)</big><a class=\"headerlink\" href=\"#Signature.bind_partial\" title=\"Permalink to this definition\">\u00b6</a></dt><dd><p>Works the same way as <a class=\"reference internal\" href=\"#Signature.bind\" title=\"Signature.bind\"><tt class=\"xref py py-meth docutils literal\"><span class=\"pre\">Signature.bind()</span></tt></a>, but allows the omission ofsome required arguments (mimics <a class=\"reference external\" href=\"http://docs.python.org/py3k/library/functools.html#functools.partial\" title=\"(in Python v3.3)\"><tt class=\"xref py py-func docutils literal\"><span class=\"pre\">functools.partial()</span></tt></a> behavior.)Returns <a class=\"reference internal\" href=\"#BoundArguments\" title=\"BoundArguments\"><tt class=\"xref py py-class docutils literal\"><span class=\"pre\">BoundArguments</span></tt></a>, or raises a <a class=\"reference external\" href=\"http://docs.python.org/py3k/library/exceptions.html#TypeError\" title=\"(in Python v3.3)\"><tt class=\"xref py py-exc docutils literal\"><span class=\"pre\">TypeError</span></tt></a> if thepassed arguments do not match the signature.</p></dd></dl><dl class=\"method\"><dt id=\"Signature.replace\"><tt class=\"descname\">replace</tt><big>(</big><em>*[, parameters][, return_annotation]</em><big>)</big><a class=\"headerlink\" href=\"#Signature.replace\" title=\"Permalink to this definition\">\u00b6</a></dt><dd><p>Create a new Signature instance based on the instance replace was invokedon.  It is possible to pass different <tt class=\"docutils literal\"><span class=\"pre\">parameters</span></tt> and/or<tt class=\"docutils literal\"><span class=\"pre\">return_annotation</span></tt> to override the corresponding properties of the basesignature.  To remove return_annotation from the copied Signature, pass in<a class=\"reference internal\" href=\"#Signature.empty\" title=\"Signature.empty\"><tt class=\"xref py py-attr docutils literal\"><span class=\"pre\">Signature.empty</span></tt></a>.</p><div class=\"highlight-python\"><div class=\"highlight\"><pre><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">def</span> <span class=\"nf\">test</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">):</span><span class=\"gp\">... </span>    <span class=\"k\">pass</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">sig</span> <span class=\"o\">=</span> <span class=\"n\">signature</span><span class=\"p\">(</span><span class=\"n\">test</span><span class=\"p\">)</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">new_sig</span> <span class=\"o\">=</span> <span class=\"n\">sig</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"n\">return_annotation</span><span class=\"o\">=</span><span class=\"s\">&quot;new return anno&quot;</span><span class=\"p\">)</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">new_sig</span><span class=\"p\">)</span><span class=\"go\">&quot;(a, b) -&gt; &#39;new return anno&#39;&quot;</span></pre></div></div></dd></dl></dd></dl><dl class=\"class\"><dt id=\"Parameter\"><em class=\"property\">class </em><tt class=\"descname\">Parameter</tt><a class=\"headerlink\" href=\"#Parameter\" title=\"Permalink to this definition\">\u00b6</a></dt><dd><p>Parameter objects are <em>immutable</em>.  Instead of modifying a Parameter object,you can use <a class=\"reference internal\" href=\"#Parameter.replace\" title=\"Parameter.replace\"><tt class=\"xref py py-meth docutils literal\"><span class=\"pre\">Parameter.replace()</span></tt></a> to create a modified copy.</p><dl class=\"attribute\"><dt id=\"Parameter.empty\"><tt class=\"descname\">empty</tt><a class=\"headerlink\" href=\"#Parameter.empty\" title=\"Permalink to this definition\">\u00b6</a></dt><dd><p>A special class-level marker to specify absence of default values andannotations.</p></dd></dl><dl class=\"attribute\"><dt id=\"Parameter.name\"><tt class=\"descname\">name</tt><a class=\"headerlink\" href=\"#Parameter.name\" title=\"Permalink to this definition\">\u00b6</a></dt><dd><p>The name of the parameter as a string.  Must be a valid python identifiername (with the exception of <tt class=\"docutils literal\"><span class=\"pre\">POSITIONAL_ONLY</span></tt> parameters, which can haveit set to <tt class=\"docutils literal\"><span class=\"pre\">None</span></tt>).</p></dd></dl><dl class=\"attribute\"><dt id=\"Parameter.default\"><tt class=\"descname\">default</tt><a class=\"headerlink\" href=\"#Parameter.default\" title=\"Permalink to this definition\">\u00b6</a></dt><dd><p>The default value for the parameter.  If the parameter has no defaultvalue, this attribute is set to <a class=\"reference internal\" href=\"#Parameter.empty\" title=\"Parameter.empty\"><tt class=\"xref py py-attr docutils literal\"><span class=\"pre\">Parameter.empty</span></tt></a>.</p></dd></dl><dl class=\"attribute\"><dt id=\"Parameter.annotation\"><tt class=\"descname\">annotation</tt><a class=\"headerlink\" href=\"#Parameter.annotation\" title=\"Permalink to this definition\">\u00b6</a></dt><dd><p>The annotation for the parameter.  If the parameter has no annotation,this attribute is set to <a class=\"reference internal\" href=\"#Parameter.empty\" title=\"Parameter.empty\"><tt class=\"xref py py-attr docutils literal\"><span class=\"pre\">Parameter.empty</span></tt></a>.</p></dd></dl><dl class=\"attribute\"><dt id=\"Parameter.kind\"><tt class=\"descname\">kind</tt><a class=\"headerlink\" href=\"#Parameter.kind\" title=\"Permalink to this definition\">\u00b6</a></dt><dd><p>Describes how argument values are bound to the parameter.  Possible values(accessible via <a class=\"reference internal\" href=\"#Parameter\" title=\"Parameter\"><tt class=\"xref py py-class docutils literal\"><span class=\"pre\">Parameter</span></tt></a>, like <tt class=\"docutils literal\"><span class=\"pre\">Parameter.KEYWORD_ONLY</span></tt>):</p><table border=\"1\" class=\"docutils\"><colgroup><col width=\"34%\" /><col width=\"66%\" /></colgroup><thead valign=\"bottom\"><tr class=\"row-odd\"><th class=\"head\">Name</th><th class=\"head\">Meaning</th></tr></thead><tbody valign=\"top\"><tr class=\"row-even\"><td><em>POSITIONAL_ONLY</em></td><td><p class=\"first\">Value must be supplied as a positionalargument.</p><p class=\"last\">Python has no explicit syntax for definingpositional-only parameters, but many built-inand extension module functions (especiallythose that accept only one or two parameters)accept them.</p></td></tr><tr class=\"row-odd\"><td><em>POSITIONAL_OR_KEYWORD</em></td><td>Value may be supplied as either a keyword orpositional argument (this is the standardbinding behaviour for functions implementedin Python.)</td></tr><tr class=\"row-even\"><td><em>VAR_POSITIONAL</em></td><td>A tuple of positional arguments that aren&#8217;tbound to any other parameter. Thiscorresponds to a <tt class=\"docutils literal\"><span class=\"pre\">*args</span></tt> parameter in aPython function definition.</td></tr><tr class=\"row-odd\"><td><em>KEYWORD_ONLY</em></td><td>Value must be supplied as a keyword argument.Keyword only parameters are those whichappear after a <tt class=\"docutils literal\"><span class=\"pre\">*</span></tt> or <tt class=\"docutils literal\"><span class=\"pre\">*args</span></tt> entry in aPython function definition.</td></tr><tr class=\"row-even\"><td><em>VAR_KEYWORD</em></td><td>A dict of keyword arguments that aren&#8217;t boundto any other parameter. This corresponds to a<tt class=\"docutils literal\"><span class=\"pre\">**kwargs</span></tt> parameter in a Python functiondefinition.</td></tr></tbody></table><p>Example: print all keyword-only arguments without default values:</p><div class=\"highlight-python\"><div class=\"highlight\"><pre><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">def</span> <span class=\"nf\">foo</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">d</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">):</span><span class=\"gp\">... </span>    <span class=\"k\">pass</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">sig</span> <span class=\"o\">=</span> <span class=\"n\">signature</span><span class=\"p\">(</span><span class=\"n\">foo</span><span class=\"p\">)</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">for</span> <span class=\"n\">param</span> <span class=\"ow\">in</span> <span class=\"n\">sig</span><span class=\"o\">.</span><span class=\"n\">parameters</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">():</span><span class=\"gp\">... </span>    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">param</span><span class=\"o\">.</span><span class=\"n\">kind</span> <span class=\"o\">==</span> <span class=\"n\">param</span><span class=\"o\">.</span><span class=\"n\">KEYWORD_ONLY</span> <span class=\"ow\">and</span><span class=\"gp\">... </span>                       <span class=\"n\">param</span><span class=\"o\">.</span><span class=\"n\">default</span> <span class=\"ow\">is</span> <span class=\"n\">param</span><span class=\"o\">.</span><span class=\"n\">empty</span><span class=\"p\">):</span><span class=\"gp\">... </span>        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">&#39;Parameter:&#39;</span><span class=\"p\">,</span> <span class=\"n\">param</span><span class=\"p\">)</span><span class=\"go\">Parameter: c</span></pre></div></div></dd></dl><dl class=\"method\"><dt id=\"Parameter.replace\"><tt class=\"descname\">replace</tt><big>(</big><em>*[, name][, kind][, default][, annotation]</em><big>)</big><a class=\"headerlink\" href=\"#Parameter.replace\" title=\"Permalink to this definition\">\u00b6</a></dt><dd><p>Create a new Parameter instance based on the instance replaced was invokedon.  To override a <a class=\"reference internal\" href=\"#Parameter\" title=\"Parameter\"><tt class=\"xref py py-class docutils literal\"><span class=\"pre\">Parameter</span></tt></a> attribute, pass the correspondingargument.  To remove a default value or/and an annotation from aParameter, pass <a class=\"reference internal\" href=\"#Parameter.empty\" title=\"Parameter.empty\"><tt class=\"xref py py-attr docutils literal\"><span class=\"pre\">Parameter.empty</span></tt></a>.</p><div class=\"highlight-python\"><div class=\"highlight\"><pre><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">inspect</span> <span class=\"kn\">import</span> <span class=\"n\">Parameter</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">param</span> <span class=\"o\">=</span> <span class=\"n\">Parameter</span><span class=\"p\">(</span><span class=\"s\">&#39;foo&#39;</span><span class=\"p\">,</span> <span class=\"n\">Parameter</span><span class=\"o\">.</span><span class=\"n\">KEYWORD_ONLY</span><span class=\"p\">,</span> <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"mi\">42</span><span class=\"p\">)</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">param</span><span class=\"p\">)</span><span class=\"go\">&#39;foo=42&#39;</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">param</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">())</span> <span class=\"c\"># Will create a shallow copy of &#39;param&#39;</span><span class=\"go\">&#39;foo=42&#39;</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">param</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"n\">default</span><span class=\"o\">=</span><span class=\"n\">Parameter</span><span class=\"o\">.</span><span class=\"n\">empty</span><span class=\"p\">,</span> <span class=\"n\">annotation</span><span class=\"o\">=</span><span class=\"s\">&#39;spam&#39;</span><span class=\"p\">))</span><span class=\"go\">&quot;foo:&#39;spam&#39;&quot;</span></pre></div></div></dd></dl></dd></dl><dl class=\"class\"><dt id=\"BoundArguments\"><em class=\"property\">class </em><tt class=\"descname\">BoundArguments</tt><a class=\"headerlink\" href=\"#BoundArguments\" title=\"Permalink to this definition\">\u00b6</a></dt><dd><p>Result of a <a class=\"reference internal\" href=\"#Signature.bind\" title=\"Signature.bind\"><tt class=\"xref py py-meth docutils literal\"><span class=\"pre\">Signature.bind()</span></tt></a> or <a class=\"reference internal\" href=\"#Signature.bind_partial\" title=\"Signature.bind_partial\"><tt class=\"xref py py-meth docutils literal\"><span class=\"pre\">Signature.bind_partial()</span></tt></a> call.Holds the mapping of arguments to the function&#8217;s parameters.</p><dl class=\"attribute\"><dt id=\"BoundArguments.arguments\"><tt class=\"descname\">arguments</tt><a class=\"headerlink\" href=\"#BoundArguments.arguments\" title=\"Permalink to this definition\">\u00b6</a></dt><dd><p>An ordered, mutable mapping (<a class=\"reference external\" href=\"http://docs.python.org/py3k/library/collections.html#collections.OrderedDict\" title=\"(in Python v3.3)\"><tt class=\"xref py py-class docutils literal\"><span class=\"pre\">collections.OrderedDict</span></tt></a>) ofparameters&#8217; names to arguments&#8217; values.  Contains only explicitly boundarguments.  Changes in <a class=\"reference internal\" href=\"#BoundArguments.arguments\" title=\"BoundArguments.arguments\"><tt class=\"xref py py-attr docutils literal\"><span class=\"pre\">arguments</span></tt></a> will reflect in <a class=\"reference internal\" href=\"#BoundArguments.args\" title=\"BoundArguments.args\"><tt class=\"xref py py-attr docutils literal\"><span class=\"pre\">args</span></tt></a> and<a class=\"reference internal\" href=\"#BoundArguments.kwargs\" title=\"BoundArguments.kwargs\"><tt class=\"xref py py-attr docutils literal\"><span class=\"pre\">kwargs</span></tt></a>.</p><p>Should be used in conjunction with <a class=\"reference internal\" href=\"#Signature.parameters\" title=\"Signature.parameters\"><tt class=\"xref py py-attr docutils literal\"><span class=\"pre\">Signature.parameters</span></tt></a> for anyargument processing purposes.</p><div class=\"admonition note\"><p class=\"first admonition-title\">Note</p><p class=\"last\">Arguments for which <a class=\"reference internal\" href=\"#Signature.bind\" title=\"Signature.bind\"><tt class=\"xref py py-meth docutils literal\"><span class=\"pre\">Signature.bind()</span></tt></a> or<a class=\"reference internal\" href=\"#Signature.bind_partial\" title=\"Signature.bind_partial\"><tt class=\"xref py py-meth docutils literal\"><span class=\"pre\">Signature.bind_partial()</span></tt></a> relied on a default value are skipped.However, if needed, it is easy to include them.</p></div><div class=\"highlight-python\"><div class=\"highlight\"><pre><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">def</span> <span class=\"nf\">foo</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">):</span><span class=\"gp\">... </span>    <span class=\"k\">pass</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">sig</span> <span class=\"o\">=</span> <span class=\"n\">signature</span><span class=\"p\">(</span><span class=\"n\">foo</span><span class=\"p\">)</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ba</span> <span class=\"o\">=</span> <span class=\"n\">sig</span><span class=\"o\">.</span><span class=\"n\">bind</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ba</span><span class=\"o\">.</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"n\">ba</span><span class=\"o\">.</span><span class=\"n\">kwargs</span><span class=\"go\">((5,), {})</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">for</span> <span class=\"n\">param</span> <span class=\"ow\">in</span> <span class=\"n\">sig</span><span class=\"o\">.</span><span class=\"n\">parameters</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">():</span><span class=\"gp\">... </span>    <span class=\"k\">if</span> <span class=\"n\">param</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">ba</span><span class=\"o\">.</span><span class=\"n\">arguments</span><span class=\"p\">:</span><span class=\"gp\">... </span>        <span class=\"n\">ba</span><span class=\"o\">.</span><span class=\"n\">arguments</span><span class=\"p\">[</span><span class=\"n\">param</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">param</span><span class=\"o\">.</span><span class=\"n\">default</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ba</span><span class=\"o\">.</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"n\">ba</span><span class=\"o\">.</span><span class=\"n\">kwargs</span><span class=\"go\">((5, 10), {})</span></pre></div></div></dd></dl><dl class=\"attribute\"><dt id=\"BoundArguments.args\"><tt class=\"descname\">args</tt><a class=\"headerlink\" href=\"#BoundArguments.args\" title=\"Permalink to this definition\">\u00b6</a></dt><dd><p>A tuple of positional arguments values.  Dynamically computed from the<a class=\"reference internal\" href=\"#BoundArguments.arguments\" title=\"BoundArguments.arguments\"><tt class=\"xref py py-attr docutils literal\"><span class=\"pre\">arguments</span></tt></a> attribute.</p></dd></dl><dl class=\"attribute\"><dt id=\"BoundArguments.kwargs\"><tt class=\"descname\">kwargs</tt><a class=\"headerlink\" href=\"#BoundArguments.kwargs\" title=\"Permalink to this definition\">\u00b6</a></dt><dd><p>A dict of keyword arguments values.  Dynamically computed from the<a class=\"reference internal\" href=\"#BoundArguments.arguments\" title=\"BoundArguments.arguments\"><tt class=\"xref py py-attr docutils literal\"><span class=\"pre\">arguments</span></tt></a> attribute.</p></dd></dl><p>The <a class=\"reference internal\" href=\"#BoundArguments.args\" title=\"BoundArguments.args\"><tt class=\"xref py py-attr docutils literal\"><span class=\"pre\">args</span></tt></a> and <a class=\"reference internal\" href=\"#BoundArguments.kwargs\" title=\"BoundArguments.kwargs\"><tt class=\"xref py py-attr docutils literal\"><span class=\"pre\">kwargs</span></tt></a> properties can be used to invokefunctions:</p><div class=\"highlight-python\"><pre>def test(a, *, b):   ...sig = signature(test)ba = sig.bind(10, b=20)test(*ba.args, **ba.kwargs)</pre></div></dd></dl><div class=\"admonition-see-also admonition seealso\"><p class=\"first admonition-title\">See also</p><dl class=\"last docutils\"><dt><span class=\"target\" id=\"index-0\"></span><a class=\"pep reference external\" href=\"http://www.python.org/dev/peps/pep-0362\"><strong>PEP 362</strong></a> - Function Signature Object.</dt><dd>The detailed specification, implementation details and examples.</dd></dl></div></div><div class=\"section\" id=\"copyright\"><h2>Copyright<a class=\"headerlink\" href=\"#copyright\" title=\"Permalink to this headline\">\u00b6</a></h2><p><em>funcsigs</em> is a derived work of CPython under the terms of the <a class=\"reference external\" href=\"http://docs.python.org/3/license.html#terms-and-conditions-for-accessing-or-otherwise-using-python\">PSF LicenseAgreement</a>. The original CPython inspect module, its unit tests anddocumentation are the copyright of the Python Software Foundation. The derivedwork is distributed under the <a class=\"reference external\" href=\"http://opensource.org/licenses/Apache-2.0\">Apache License Version 2.0</a>.</p></div></div>          </div>        </div>      </div>        </div>        <div class=\"sidebar\">          <h3>Table Of Contents</h3>                    <h3 style=\"margin-top: 1.5em;\">Search</h3>          <form class=\"search\" action=\"search.html\" method=\"get\">            <input type=\"text\" name=\"q\" />            <input type=\"submit\" value=\"Go\" />            <input type=\"hidden\" name=\"check_keywords\" value=\"yes\" />            <input type=\"hidden\" name=\"area\" value=\"default\" />          </form>          <p class=\"searchtip\" style=\"font-size: 90%\">            Enter search terms or a module, class or function name.          </p>        </div>        <div class=\"clearer\"></div>      </div>    </div>    <div class=\"footer-wrapper\">      <div class=\"footer\">        <div class=\"left\">          <a href=\"genindex.html\" title=\"General Index\"             >index</a>            <br/>            <a href=\"_sources/index.txt\"               rel=\"nofollow\">Show Source</a>        </div>        <div class=\"right\">              <div class=\"footer\">        &copy; Copyright 2013, Aaron Iles.      Created using <a href=\"http://sphinx.pocoo.org/\">Sphinx</a> 1.1.3.    </div>        </div>        <div class=\"clearer\"></div>      </div>    </div>  </body></html>",
  "embeddings": []
}
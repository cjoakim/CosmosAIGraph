{
  "libtype": "pypi",
  "libname": "pyleri",
  "url": "https://pypi.org/project/pyleri/",
  "html": "<!DOCTYPE html><html lang=\"en\" dir=\"ltr\">  <head>    <meta charset=\"utf-8\">    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">    <meta name=\"defaultLanguage\" content=\"en\">    <meta name=\"availableLanguages\" content=\"en, es, fr, ja, pt_BR, uk, el, de, zh_Hans, zh_Hant, ru, he, eo\">    <title>pyleri \u00b7 PyPI</title>    <meta name=\"description\" content=\"Python Left-Right Parser\">    <link rel=\"stylesheet\" href=\"/static/css/warehouse-ltr.99b3104d.css\">    <link rel=\"stylesheet\" href=\"/static/css/fontawesome.b50b476c.css\">    <link rel=\"stylesheet\" href=\"https://fonts.googleapis.com/css?family=Source+Sans+3:400,400italic,600,600italic,700,700italic%7CSource+Code+Pro:500\">    <noscript>      <link rel=\"stylesheet\" href=\"/static/css/noscript.0673c9ea.css\">    </noscript>    <link rel=\"icon\" href=\"/static/images/favicon.35549fe8.ico\" type=\"image/x-icon\">    <link rel=\"alternate\" type=\"application/rss+xml\" title=\"RSS: 40 latest updates\" href=\"/rss/updates.xml\">    <link rel=\"alternate\" type=\"application/rss+xml\" title=\"RSS: 40 newest packages\" href=\"/rss/packages.xml\"><link rel=\"alternate\" type=\"application/rss+xml\" title=\"RSS: latest releases for pyleri\" href=\"/rss/project/pyleri/releases.xml\">    <link rel=\"canonical\" href=\"https://pypi.org/project/pyleri/\">    <meta property=\"og:url\" content=\"https://pypi.org/project/pyleri/\">    <meta property=\"og:site_name\" content=\"PyPI\">    <meta property=\"og:type\" content=\"website\">    <meta property=\"og:image\" content=\"https://pypi.org/static/images/twitter.abaf4b19.webp\">    <meta property=\"og:title\" content=\"pyleri\">    <meta property=\"og:description\" content=\"Python Left-Right Parser\">    <link rel=\"search\" type=\"application/opensearchdescription+xml\" title=\"PyPI\" href=\"/opensearch.xml\">    <script asyncdata-ga-id=\"UA-55961911-1\"data-ga4-id=\"G-RW7D75DF8V\"            src=\"/static/js/warehouse.dd4295c4.js\">    </script><script>MathJax = {  tex: {    inlineMath: [['$', '$'], ['\\\\(', '\\\\)']]  },};</script><script async  src=\"https://cdn.jsdelivr.net/npm/mathjax@3.2.2/es5/tex-svg.js\"  integrity=\"sha256-1CldwzdEg2k1wTmf7s5RWVd7NMXI/7nxxjJM2C4DqII=\"  crossorigin=\"anonymous\"></script><script async src=\"https://www.googletagmanager.com/gtag/js?id=UA-55961911-1\"></script><script async src=\"https://www.googletagmanager.com/gtag/js?id=G-RW7D75DF8V\"></script><script defer src=\"https://www.fastly-insights.com/insights.js?k=6a52360a-f306-421e-8ed5-7417d0d4a4e9&dnt=true\"></script>    <script async        src=\"https://media.ethicalads.io/media/client/v1.4.0/ethicalads.min.js\"        integrity=\"sha256-U3hKDidudIaxBDEzwGJApJgPEf2mWk6cfMWghrAa6i0= sha384-UcmsCqcNRSLW/dV3Lo1oCi2/VaurXbib6p4HyUEOeIa/4OpsrnucrugAefzVZJfI sha512-q4t1L4xEjGV2R4hzqCa41P8jrgFUS8xTb8rdNv4FGvw7FpydVj/kkxBJHOiaoxHa8olCcx1Slk9K+3sNbsM4ug==\"        crossorigin=\"anonymous\"    ></script>  </head>  <body data-controller=\"viewport-toggle\">    <!-- Accessibility: this link should always be the first piece of content inside the body-->    <a href=\"#content\" class=\"skip-to-content\">Skip to main content</a>    <button type=\"button\" class=\"button button--primary button--switch-to-mobile hidden\" data-viewport-toggle-target=\"switchToMobile\" data-action=\"viewport-toggle#switchToMobile\">Switch to mobile version    </button>    <div id=\"sticky-notifications\" class=\"stick-to-top js-stick-to-top\">      <!-- Add browser warning. Will show for ie9 and below -->      <!--[if IE]>      <div class=\"notification-bar notification-bar--warning\" role=\"status\">        <span class=\"notification-bar__icon\">          <i class=\"fa fa-exclamation-triangle\" aria-hidden=\"true\"></i>          <span class=\"sr-only\">Warning</span>        </span>        <span class=\"notification-bar__message\">You are using an unsupported browser, upgrade to a newer version.</span>      </div>      <![endif]-->      <noscript>      <div class=\"notification-bar notification-bar--warning\" role=\"status\">        <span class=\"notification-bar__icon\">          <i class=\"fa fa-exclamation-triangle\" aria-hidden=\"true\"></i>          <span class=\"sr-only\">Warning</span>        </span>        <span class=\"notification-bar__message\">Some features may not work without JavaScript. Please try enabling it if you encounter problems.</span>      </div>      </noscript><div data-html-include=\"/_includes/notification-banners/\"></div>    </div><div data-html-include=\"/_includes/flash-messages/\"></div><div data-html-include=\"/_includes/session-notifications/\"></div>    <header class=\"site-header \">      <div class=\"site-container\">        <div class=\"split-layout\">          <div class=\"split-layout\">            <div>              <a class=\"site-header__logo\" href=\"/\">                <img alt=\"PyPI\" src=\"/static/images/logo-small.2a411bc6.svg\">              </a>            </div>            <form class=\"search-form search-form--primary\" action=\"/search/\" role=\"search\">              <label for=\"search\" class=\"sr-only\">Search PyPI</label>              <input id=\"search\" class=\"search-form__search\" type=\"text\" name=\"q\" placeholder=\"Search projects\" value=\"\" autocomplete=\"off\" autocapitalize=\"off\" spellcheck=\"false\" data-controller=\"search-focus\" data-action=\"keydown@window->search-focus#focusSearchField\" data-search-focus-target=\"searchField\">              <button type=\"submit\" class=\"search-form__button\">                <i class=\"fa fa-search\" aria-hidden=\"true\"></i>                <span class=\"sr-only\">Search</span>              </button>            </form>          </div><div data-html-include=\"/_includes/current-user-indicator/\">            <div id=\"user-indicator\" class=\"horizontal-menu horizontal-menu--light horizontal-menu--tall\">  <nav class=\"horizontal-menu horizontal-menu--light horizontal-menu--tall hide-on-tablet\" aria-label=\"Main navigation\">    <ul>      <li class=\"horizontal-menu__item\"><a href=\"/help/\" class=\"horizontal-menu__link\">Help</a></li>      <li class=\"horizontal-menu__item\"><a href=\"/sponsors/\" class=\"horizontal-menu__link\">Sponsors</a></li>      <li class=\"horizontal-menu__item\"><a href=\"/account/login/\" class=\"horizontal-menu__link\">Log in</a></li>      <li class=\"horizontal-menu__item\"><a href=\"/account/register/\" class=\"horizontal-menu__link\">Register</a></li>    </ul>  </nav>  <nav class=\"dropdown dropdown--on-menu hidden show-on-tablet\" aria-label=\"Main navigation\">    <button type=\"button\" class=\"horizontal-menu__link dropdown__trigger\" aria-haspopup=\"true\" aria-expanded=\"false\" aria-label=\"View menu\">Menu      <span class=\"dropdown__trigger-caret\">        <i class=\"fa fa-caret-down\" aria-hidden=\"true\"></i>      </span>    </button>    <ul class=\"dropdown__content\" aria-hidden=\"true\" aria-label=\"Main menu\">      <li><a class=\"dropdown__link\" href=\"/help/\">Help</a></li>      <li><a class=\"dropdown__link\" href=\"/sponsors/\">Sponsors</a></li>      <li><a class=\"dropdown__link\" href=\"/account/login/\">Log in</a></li>      <li><a class=\"dropdown__link\" href=\"/account/register/\">Register</a></li>    </ul>  </nav></div></div>        </div>      </div>    </header>    <div class=\"mobile-search\">      <form class=\"search-form search-form--fullwidth\" action=\"/search/\" role=\"search\">        <label for=\"mobile-search\" class=\"sr-only\">Search PyPI</label>        <input id=\"mobile-search\" class=\"search-form__search\" type=\"text\" name=\"q\" placeholder=\"Search projects\" value=\"\" autocomplete=\"off\" autocapitalize=\"off\" spellcheck=\"false\">                <button type=\"submit\" class=\"search-form__button\">          <i class=\"fa fa-search\" aria-hidden=\"true\"></i>          <span class=\"sr-only\">Search</span>        </button>      </form>    </div>    <main id=\"content\"><div class=\"hidden\"  data-controller=\"github-repo-stats\"  data-github-repo-stats-github-repo-info-outlet=\".github-repo-info\"  data-github-repo-stats-url-value=\"https://api.github.com/repos/cesbit/pyleri\"  data-github-repo-stats-issue-url-value=\"https://api.github.com/search/issues?q=repo:cesbit/pyleri+type:issue+state:open&amp;per_page=1\"></div><div class=\"banner\">  <div class=\"package-header\">    <div class=\"package-header__left\">      <h1 class=\"package-header__name\">        pyleri 1.4.2      </h1>      <div data-controller=\"clipboard\">        <p class=\"package-header__pip-instructions\">          <span id=\"pip-command\" data-clipboard-target=\"source\">pip install pyleri</span>          <button type=\"button\" class=\"copy-tooltip copy-tooltip-s\" data-action=\"clipboard#copy\" data-clipboard-target=\"tooltip\" data-clipboard-tooltip-value=\"Copy to clipboard\">            <i class=\"fa fa-copy\" aria-hidden=\"true\"></i>            <span class=\"sr-only\">Copy PIP instructions</span>          </button>        </p>      </div>    </div>    <div class=\"package-header__right\">      <a class=\"status-badge status-badge--good\" href=\"/project/pyleri/\">        <span>Latest version</span>      </a>      <p class=\"package-header__date\">Released: <time datetime=\"2023-03-16T08:51:04+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Mar 16, 2023</time>      </p>    </div>  </div></div><div class=\"horizontal-section horizontal-section--grey horizontal-section--thin\">  <div class=\"site-container\"><div data-html-include=\"/_includes/administer-project-include/pyleri\"></div>    <div class=\"split-layout split-layout--middle package-description\">      <p class=\"package-description__summary\">Python Left-Right Parser</p><div data-html-include=\"/_includes/edit-project-button/pyleri\"></div>    </div>  </div></div><div data-controller=\"project-tabs\">  <div class=\"tabs-container\">    <div class=\"vertical-tabs\">      <div class=\"vertical-tabs__tabs\">        <div class=\"sidebar-section\">          <h3 class=\"sidebar-section__title\">Navigation</h3>          <nav aria-label=\"Navigation for pyleri\">            <ul class=\"vertical-tabs__list\" role=\"tablist\">              <li role=\"tab\">                <a id=\"description-tab\" href=\"#description\" data-project-tabs-target=\"tab\" data-action=\"project-tabs#onTabClick\" class=\"vertical-tabs__tab vertical-tabs__tab--with-icon vertical-tabs__tab--is-active\" aria-selected=\"true\" aria-label=\"Project description. Focus will be moved to the description.\">                  <i class=\"fa fa-align-left\" aria-hidden=\"true\"></i>Project description                </a>              </li>              <li role=\"tab\">                <a id=\"history-tab\" href=\"#history\" data-project-tabs-target=\"tab\" data-action=\"project-tabs#onTabClick\" class=\"vertical-tabs__tab vertical-tabs__tab--with-icon\" aria-label=\"Release history. Focus will be moved to the history panel.\">                  <i class=\"fa fa-history\" aria-hidden=\"true\"></i>Release history                </a>              </li>              <li role=\"tab\">                <a id=\"files-tab\" href=\"#files\" data-project-tabs-target=\"tab\" data-action=\"project-tabs#onTabClick\" class=\"vertical-tabs__tab vertical-tabs__tab--with-icon\" aria-label=\"Download files. Focus will be moved to the project files.\">                  <i class=\"fa fa-download\" aria-hidden=\"true\"></i>Download files                </a>              </li>            </ul>          </nav>        </div><div class=\"sidebar-section\">  <h3 class=\"sidebar-section__title\">Project links</h3>  <ul class=\"vertical-tabs__list\">    <li>      <a class=\"vertical-tabs__tab vertical-tabs__tab--with-icon vertical-tabs__tab--condensed\" href=\"https://github.com/cesbit/pyleri\" rel=\"nofollow\">        <i class=\"fas fa-home\" aria-hidden=\"true\"></i>Homepage      </a>    </li>    <li>      <a class=\"vertical-tabs__tab vertical-tabs__tab--with-icon vertical-tabs__tab--condensed\" href=\"https://github.com/cesbit/pyleri/tarball/1.4.2\" rel=\"nofollow\">        <i class=\"fas fa-cloud-download-alt\" aria-hidden=\"true\"></i>Download      </a>    </li>  </ul></div><div class=\"sidebar-section\">  <h3 class=\"sidebar-section__title\">Statistics</h3>  <div class=\"hidden github-repo-info\" data-controller=\"github-repo-info\">GitHub statistics:    <ul class=\"vertical-tabs__list\">      <li>        <a class=\"vertical-tabs__tab vertical-tabs__tab--with-icon vertical-tabs__tab--condensed\"           data-github-repo-info-target=\"stargazersUrl\" rel=\"noopener\">          <i class=\"fa fa-star\" aria-hidden=\"true\"></i>          <strong>Stars:</strong>          <span data-github-repo-info-target=\"stargazersCount\"></span>        </a>      </li>      <li>        <a class=\"vertical-tabs__tab vertical-tabs__tab--with-icon vertical-tabs__tab--condensed\"           data-github-repo-info-target=\"forksUrl\" rel=\"noopener\">          <i class=\"fa fa-code-branch\" aria-hidden=\"true\"></i>          <strong>Forks:</strong>          <span data-github-repo-info-target=\"forksCount\"></span>        </a>      </li>      <li>        <a class=\"vertical-tabs__tab vertical-tabs__tab--with-icon vertical-tabs__tab--condensed\"           data-github-repo-info-target=\"openIssuesUrl\" rel=\"noopener\">          <i class=\"fa fa-exclamation-circle\" aria-hidden=\"true\"></i>          <strong>Open issues:</strong>          <span data-github-repo-info-target=\"openIssuesCount\"></span>        </a>      </li>      <li>        <a class=\"vertical-tabs__tab vertical-tabs__tab--with-icon vertical-tabs__tab--condensed\"           data-github-repo-info-target=\"openPRsUrl\" rel=\"noopener\">          <i class=\"fa fa-code-pull-request\" aria-hidden=\"true\"></i>          <strong>Open PRs:</strong>          <span data-github-repo-info-target=\"openPRsCount\"></span>        </a>      </li>    </ul>  </div>  <p>View statistics for this project via <a href=\"https://libraries.io/pypi/pyleri\" title=\"External link\" target=\"_blank\" rel=\"noopener\">Libraries.io</a>, or by using <a href=\"https://packaging.python.org/guides/analyzing-pypi-package-downloads/\" target=\"_blank\" rel=\"noopener\">our public dataset on Google BigQuery</a>  </p></div><div class=\"sidebar-section\">  <h3 class=\"sidebar-section__title\">Meta</h3>  <p><strong>License:</strong> MIT License</p>    <p><strong>Author:</strong> <a href=\"mailto:jeroen@cesbit.com\">Jeroen van der Heijden</a></p>  <p class=\"tags\">    <i class=\"fa fa-tags\" aria-hidden=\"true\"></i>    <span class=\"sr-only\">Tags</span>    <span class=\"package-keyword\">      parser,    </span>    <span class=\"package-keyword\">      grammar,    </span>    <span class=\"package-keyword\">      autocompletion    </span>  </p></div><div class=\"sidebar-section\">    <h3 class=\"sidebar-section__title\">Maintainers</h3>      <span class=\"sidebar-section__maintainer\">        <a href=\"/user/joente/\" aria-label=\"joente\">          <span class=\"sidebar-section__user-gravatar\">            <img src=\"https://pypi-camo.freetls.fastly.net/a530a1dbf2b4bc2f744053374e287396aa000620/68747470733a2f2f7365637572652e67726176617461722e636f6d2f6176617461722f64396265656463633936623564313836313633613538376432343137636163313f73697a653d3530\" height=\"50\" width=\"50\" alt=\"Avatar for joente from gravatar.com\" title=\"Avatar for joente from gravatar.com\">          </span>          <span class=\"sidebar-section__user-gravatar-text\">            joente          </span>        </a>      </span></div><div class=\"sidebar-section\">  <h3 class=\"sidebar-section__title\">Classifiers</h3>  <ul class=\"sidebar-section__classifiers\">    <li>      <strong>Development Status</strong>      <ul>        <li>          <a href=\"/search/?c=Development+Status+%3A%3A+5+-+Production%2FStable\">            5 - Production/Stable          </a>        </li>      </ul>    </li>    <li>      <strong>Intended Audience</strong>      <ul>        <li>          <a href=\"/search/?c=Intended+Audience+%3A%3A+Developers\">            Developers          </a>        </li>      </ul>    </li>    <li>      <strong>License</strong>      <ul>        <li>          <a href=\"/search/?c=License+%3A%3A+OSI+Approved+%3A%3A+MIT+License\">            OSI Approved :: MIT License          </a>        </li>      </ul>    </li>    <li>      <strong>Operating System</strong>      <ul>        <li>          <a href=\"/search/?c=Operating+System+%3A%3A+OS+Independent\">            OS Independent          </a>        </li>      </ul>    </li>    <li>      <strong>Programming Language</strong>      <ul>        <li>          <a href=\"/search/?c=Programming+Language+%3A%3A+Python+%3A%3A+3\">            Python :: 3          </a>        </li>        <li>          <a href=\"/search/?c=Programming+Language+%3A%3A+Python+%3A%3A+3+%3A%3A+Only\">            Python :: 3 :: Only          </a>        </li>        <li>          <a href=\"/search/?c=Programming+Language+%3A%3A+Python+%3A%3A+3.7\">            Python :: 3.7          </a>        </li>        <li>          <a href=\"/search/?c=Programming+Language+%3A%3A+Python+%3A%3A+3.8\">            Python :: 3.8          </a>        </li>        <li>          <a href=\"/search/?c=Programming+Language+%3A%3A+Python+%3A%3A+3.9\">            Python :: 3.9          </a>        </li>        <li>          <a href=\"/search/?c=Programming+Language+%3A%3A+Python+%3A%3A+3.10\">            Python :: 3.10          </a>        </li>      </ul>    </li>    <li>      <strong>Topic</strong>      <ul>        <li>          <a href=\"/search/?c=Topic+%3A%3A+Software+Development+%3A%3A+Libraries+%3A%3A+Python+Modules\">            Software Development :: Libraries :: Python Modules          </a>        </li>        <li>          <a href=\"/search/?c=Topic+%3A%3A+Text+Processing+%3A%3A+Linguistic\">            Text Processing :: Linguistic          </a>        </li>      </ul>    </li>  </ul></div><div class=\"sidebar-section\" data-ea-publisher=\"psf\" data-ea-type=\"psf\" data-ea-keywords=\"pypi-sidebar\"></div>      </div>      <div class=\"vertical-tabs__panel\">        <!-- mobile menu -->        <nav aria-label=\"Navigation for pyleri\">          <ul class=\"vertical-tabs__list\" role=\"tablist\">            <li role=\"tab\">              <a id=\"mobile-description-tab\" href=\"#description\" data-project-tabs-target=\"mobileTab\" data-action=\"project-tabs#onTabClick\" class=\"vertical-tabs__tab vertical-tabs__tab--with-icon vertical-tabs__tab--mobile vertical-tabs__tab--no-top-border vertical-tabs__tab--is-active\" aria-selected=\"true\" aria-label=\"Project description. Focus will be moved to the description.\">                <i class=\"fa fa-align-left\" aria-hidden=\"true\"></i>Project description              </a>            </li>            <li role=\"tab\">              <a id=\"mobile-data-tab\" href=\"#data\" data-project-tabs-target=\"mobileTab\" data-action=\"project-tabs#onTabClick\" class=\"vertical-tabs__tab vertical-tabs__tab--with-icon vertical-tabs__tab--mobile\" aria-label=\"Project details. Focus will be moved to the project details.\">                <i class=\"fa fa-info-circle\" aria-hidden=\"true\"></i>Project details              </a>            </li>            <li role=\"tab\">              <a id=\"mobile-history-tab\" href=\"#history\" data-project-tabs-target=\"mobileTab\" data-action=\"project-tabs#onTabClick\" class=\"vertical-tabs__tab vertical-tabs__tab--with-icon vertical-tabs__tab--mobile\" aria-label=\"Release history. Focus will be moved to the history panel.\">              <i class=\"fa fa-history\" aria-hidden=\"true\"></i>Release history            </a>            </li>            <li role=\"tab\">              <a id=\"mobile-files-tab\" href=\"#files\" data-project-tabs-target=\"mobileTab\" data-action=\"project-tabs#onTabClick\" class=\"vertical-tabs__tab vertical-tabs__tab--with-icon vertical-tabs__tab--mobile\" aria-label=\"Download files. Focus will be moved to the project files.\">                <i class=\"fa fa-download\" aria-hidden=\"true\"></i>Download files              </a>            </li>          </ul>        </nav>        <div id=\"description\" data-project-tabs-target=\"content\" class=\"vertical-tabs__content\" role=\"tabpanel\" aria-labelledby=\"description-tab mobile-description-tab\" tabindex=\"-1\">          <h2 class=\"page-title\">Project description</h2>          <div class=\"project-description\">            <p><a href=\"https://github.com/cesbit/pyleri/actions\" rel=nofollow><img src=\"https://pypi-camo.freetls.fastly.net/d8f2c272226e962f7a91f13a8b214dd57d775ec7/68747470733a2f2f6769746875622e636f6d2f6365736269742f70796c6572692f776f726b666c6f77732f43492f62616467652e737667\" alt=CI></a><a href=\"https://github.com/cesbit/pyleri/releases\" rel=nofollow><img src=\"https://pypi-camo.freetls.fastly.net/aac9ec2f9f6cab9506c904a897f6c26825809514/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f72656c656173652f6365736269742f70796c657269\" alt=\"Release Version\"></a></p><h1>Python Left-Right Parser</h1><p>Pyleri is an easy-to-use parser created for <a href=\"http://siridb.net/\" rel=nofollow>SiriDB</a>. We first used <a href=\"http://lrparsing.sourceforge.net/doc/html/\" rel=nofollow>lrparsing</a> and wrote <a href=\"https://github.com/cesbit/jsleri\" rel=nofollow>jsleri</a> for auto-completion and suggestions in our web console. Later we found small issues within the <code>lrparsing</code> module and also had difficulties keeping the language the same in all projects. That is when we decided to create Pyleri which can export a created grammar to JavaScript, C, Python, Go and Java.</p><p>Gabriele Tomassetti <a href=\"https://tomassetti.me/pyleri-tutorial/\" rel=nofollow>wrote a tutorial</a> about the pyleri library.</p><hr><ul><li><a href=#related-projects rel=nofollow>Related projects</a></li><li><a href=#installation rel=nofollow>Installation</a></li><li><a href=#quick-usage rel=nofollow>Quick usage</a></li><li><a href=#grammar rel=nofollow>Grammar</a><ul><li><a href=#parse rel=nofollow>Grammar.parse()</a></li><li><a href=#export_js rel=nofollow>Grammar.export_js()</a></li><li><a href=#export_c rel=nofollow>Grammar.export_c()</a></li><li><a href=#export_go rel=nofollow>Grammar.export_go()</a></li><li><a href=#export_java rel=nofollow>Grammar.export_java()</a></li><li><a href=#export_py rel=nofollow>Grammar.export_py()</a></li></ul></li><li><a href=#result rel=nofollow>Result</a><ul><li><a href=#is_valid rel=nofollow>is_valid</a></li><li><a href=#position rel=nofollow>Position</a></li><li><a href=#tree rel=nofollow>Tree</a></li><li><a href=#expecting rel=nofollow>Expecting</a></li></ul></li><li><a href=#elements rel=nofollow>Elements</a><ul><li><a href=#keyword rel=nofollow>Keyword</a></li><li><a href=#regex rel=nofollow>Regex</a></li><li><a href=#token rel=nofollow>Token</a></li><li><a href=#tokens rel=nofollow>Tokens</a></li><li><a href=#sequence rel=nofollow>Sequence</a></li><li><a href=#choice rel=nofollow>Choice</a></li><li><a href=#repeat rel=nofollow>Repeat</a></li><li><a href=#list rel=nofollow>List</a></li><li><a href=#optional rel=nofollow>Optional</a></li><li><a href=#ref rel=nofollow>Ref</a></li><li><a href=#prio rel=nofollow>Prio</a></li></ul></li></ul><hr><h2>Related projects</h2><ul><li><a href=\"https://github.com/cesbit/jsleri\" rel=nofollow>jsleri</a>: JavaScript parser</li><li><a href=\"https://github.com/cesbit/libcleri\" rel=nofollow>libcleri</a>: C parser</li><li><a href=\"https://github.com/cesbit/goleri\" rel=nofollow>goleri</a>: Go parser</li><li><a href=\"https://github.com/cesbit/jleri\" rel=nofollow>jleri</a>: Java parser</li></ul><h2>Installation</h2><p>The easiest way is to use PyPI:</p><pre><code>sudo pip3 install pyleri</code></pre><h2>Quick usage</h2><pre lang=python3><span class=c1># Imports, note that we skip the imports in other examples...</span><span class=kn>from</span> <span class=nn>pyleri</span> <span class=kn>import</span> <span class=p>(</span>    <span class=n>Grammar</span><span class=p>,</span>    <span class=n>Keyword</span><span class=p>,</span>    <span class=n>Regex</span><span class=p>,</span>    <span class=n>Sequence</span><span class=p>)</span><span class=c1># Create a Grammar Class to define your language</span><span class=k>class</span> <span class=nc>MyGrammar</span><span class=p>(</span><span class=n>Grammar</span><span class=p>):</span>    <span class=n>r_name</span> <span class=o>=</span> <span class=n>Regex</span><span class=p>(</span><span class=s1>'(?:\"(?:[^\"]*)\")+'</span><span class=p>)</span>    <span class=n>k_hi</span> <span class=o>=</span> <span class=n>Keyword</span><span class=p>(</span><span class=s1>'hi'</span><span class=p>)</span>    <span class=n>START</span> <span class=o>=</span> <span class=n>Sequence</span><span class=p>(</span><span class=n>k_hi</span><span class=p>,</span> <span class=n>r_name</span><span class=p>)</span><span class=c1># Compile your grammar by creating an instance of the Grammar Class.</span><span class=n>my_grammar</span> <span class=o>=</span> <span class=n>MyGrammar</span><span class=p>()</span><span class=c1># Use the compiled grammar to parse 'strings'</span><span class=nb>print</span><span class=p>(</span><span class=n>my_grammar</span><span class=o>.</span><span class=n>parse</span><span class=p>(</span><span class=s1>'hi \"Iris\"'</span><span class=p>)</span><span class=o>.</span><span class=n>is_valid</span><span class=p>)</span> <span class=c1># =&gt; True</span><span class=nb>print</span><span class=p>(</span><span class=n>my_grammar</span><span class=o>.</span><span class=n>parse</span><span class=p>(</span><span class=s1>'bye \"Iris\"'</span><span class=p>)</span><span class=o>.</span><span class=n>is_valid</span><span class=p>)</span> <span class=c1># =&gt; False</span><span class=nb>print</span><span class=p>(</span><span class=n>my_grammar</span><span class=o>.</span><span class=n>parse</span><span class=p>(</span><span class=s1>'bye \"Iris\"'</span><span class=p>)</span><span class=o>.</span><span class=n>as_str</span><span class=p>())</span> <span class=c1># =&gt; error at position 0, expecting: hi</span></pre><h2>Grammar</h2><p>When writing a grammar you should subclass Grammar. A Grammar expects at least a <code>START</code> property so the parser knows where to start parsing. Grammar has some default properties which can be overwritten like <code>RE_KEYWORDS</code>, which will be explained later. Grammar also has a parse method: <code>parse()</code>, and a few export methods: <a href=#export_js rel=nofollow>export_js()</a>, <a href=#export_c rel=nofollow>export_c()</a>, <a href=#export_py rel=nofollow>export_py()</a>, <a href=#export_go rel=nofollow>export_go()</a> and <a href=#export_java rel=nofollow>export_java()</a> which are explained below.</p><h3>parse</h3><p>syntax:</p><pre lang=python3><span class=n>Grammar</span><span class=p>()</span><span class=o>.</span><span class=n>parse</span><span class=p>(</span><span class=n>string</span><span class=p>)</span></pre><p>The <code>parse()</code> method returns a result object which has the following properties that are further explained in <a href=#result rel=nofollow>Result</a>:</p><ul><li><code>expecting</code></li><li><code>is_valid</code></li><li><code>pos</code></li><li><code>tree</code></li></ul><h3>export_js</h3><p>syntax:</p><pre lang=python3><span class=n>Grammar</span><span class=p>()</span><span class=o>.</span><span class=n>export_js</span><span class=p>(</span>    <span class=n>js_module_name</span><span class=o>=</span><span class=s1>'jsleri'</span><span class=p>,</span>    <span class=n>js_template</span><span class=o>=</span><span class=n>Grammar</span><span class=o>.</span><span class=n>JS_TEMPLATE</span><span class=p>,</span>    <span class=n>js_indent</span><span class=o>=</span><span class=s1>' '</span> <span class=o>*</span> <span class=mi>4</span><span class=p>)</span></pre><p>Optional keyword arguments:</p><ul><li><code>js_module_name</code>: Name of the JavaScript module. (default: 'jsleri')</li><li><code>js_template</code>: Template String used for the export. You might want to look at the default string which can be found at Grammar.JS_TEMPLATE.</li><li><code>js_indent</code>: indentation used in the JavaScript file. (default: 4 spaces)</li></ul><p>For example when using our Quick usage grammar, this is the output when running <code>my_grammar.export_js()</code>:</p><pre lang=javascript><span class=cm>/* jshint newcap: false */</span><span class=cm>/*</span><span class=cm> * This grammar is generated using the Grammar.export_js() method and</span><span class=cm> * should be used with the jsleri JavaScript module.</span><span class=cm> *</span><span class=cm> * Source class: MyGrammar</span><span class=cm> * Created at: 2015-11-04 10:06:06</span><span class=cm> */</span><span class=s1>'use strict'</span><span class=p>;</span><span class=p>(</span><span class=kd>function</span><span class=w> </span><span class=p>(</span><span class=w>            </span><span class=nx>Regex</span><span class=p>,</span><span class=w>            </span><span class=nx>Sequence</span><span class=p>,</span><span class=w>            </span><span class=nx>Keyword</span><span class=p>,</span><span class=w>            </span><span class=nx>Grammar</span><span class=w>        </span><span class=p>)</span><span class=w> </span><span class=p>{</span><span class=w>    </span><span class=kd>var</span><span class=w> </span><span class=nx>r_name</span><span class=w> </span><span class=o>=</span><span class=w> </span><span class=nx>Regex</span><span class=p>(</span><span class=s1>'^(?:\"(?:[^\"]*)\")+'</span><span class=p>);</span><span class=w>    </span><span class=kd>var</span><span class=w> </span><span class=nx>k_hi</span><span class=w> </span><span class=o>=</span><span class=w> </span><span class=nx>Keyword</span><span class=p>(</span><span class=s1>'hi'</span><span class=p>);</span><span class=w>    </span><span class=kd>var</span><span class=w> </span><span class=nx>START</span><span class=w> </span><span class=o>=</span><span class=w> </span><span class=nx>Sequence</span><span class=p>(</span><span class=w>        </span><span class=nx>k_hi</span><span class=p>,</span><span class=w>        </span><span class=nx>r_name</span><span class=w>    </span><span class=p>);</span><span class=w>    </span><span class=nb>window</span><span class=p>.</span><span class=nx>MyGrammar</span><span class=w> </span><span class=o>=</span><span class=w> </span><span class=nx>Grammar</span><span class=p>(</span><span class=nx>START</span><span class=p>,</span><span class=w> </span><span class=s1>'^\\w+'</span><span class=p>);</span><span class=p>})(</span><span class=w>    </span><span class=nb>window</span><span class=p>.</span><span class=nx>jsleri</span><span class=p>.</span><span class=nx>Regex</span><span class=p>,</span><span class=w>    </span><span class=nb>window</span><span class=p>.</span><span class=nx>jsleri</span><span class=p>.</span><span class=nx>Sequence</span><span class=p>,</span><span class=w>    </span><span class=nb>window</span><span class=p>.</span><span class=nx>jsleri</span><span class=p>.</span><span class=nx>Keyword</span><span class=p>,</span><span class=w>    </span><span class=nb>window</span><span class=p>.</span><span class=nx>jsleri</span><span class=p>.</span><span class=nx>Grammar</span><span class=p>);</span></pre><h3>export_c</h3><p>syntax:</p><pre lang=python3><span class=n>Grammar</span><span class=p>()</span><span class=o>.</span><span class=n>export_c</span><span class=p>(</span>    <span class=n>target</span><span class=o>=</span><span class=n>Grammar</span><span class=o>.</span><span class=n>C_TARGET</span><span class=p>,</span>    <span class=n>c_indent</span><span class=o>=</span><span class=s1>' '</span> <span class=o>*</span> <span class=mi>4</span><span class=p>)</span></pre><p>Optional keyword arguments:</p><ul><li><code>target</code>: Name of the c module. (default: 'grammar')</li><li><code>c_indent</code>: indentation used in the c files. (default: 4 spaces)</li></ul><p>The return value is a tuple containing the source (c) file and header (h) file.</p><p>For example when using our Quick usage grammar, this is the output when running <code>my_grammar.export_c()</code>:</p><pre lang=c><span class=cm>/*</span><span class=cm> * grammar.c</span><span class=cm> *</span><span class=cm> * This grammar is generated using the Grammar.export_c() method and</span><span class=cm> * should be used with the libcleri module.</span><span class=cm> *</span><span class=cm> * Source class: MyGrammar</span><span class=cm> * Created at: 2016-05-09 12:16:49</span><span class=cm> */</span><span class=cp>#include</span><span class=w> </span><span class=cpf>\"grammar.h\"</span><span class=cp>#include</span><span class=w> </span><span class=cpf>&lt;stdio.h&gt;</span><span class=cp>#define CLERI_CASE_SENSITIVE 0</span><span class=cp>#define CLERI_CASE_INSENSITIVE 1</span><span class=cp>#define CLERI_FIRST_MATCH 0</span><span class=cp>#define CLERI_MOST_GREEDY 1</span><span class=n>cleri_grammar_t</span><span class=w> </span><span class=o>*</span><span class=w> </span><span class=nf>compile_grammar</span><span class=p>(</span><span class=kt>void</span><span class=p>)</span><span class=p>{</span><span class=w>    </span><span class=n>cleri_t</span><span class=w> </span><span class=o>*</span><span class=w> </span><span class=n>r_name</span><span class=w> </span><span class=o>=</span><span class=w> </span><span class=n>cleri_regex</span><span class=p>(</span><span class=n>CLERI_GID_R_NAME</span><span class=p>,</span><span class=w> </span><span class=s>\"^(?:</span><span class=se>\\\"</span><span class=s>(?:[^</span><span class=se>\\\"</span><span class=s>]*)</span><span class=se>\\\"</span><span class=s>)+\"</span><span class=p>);</span><span class=w>    </span><span class=n>cleri_t</span><span class=w> </span><span class=o>*</span><span class=w> </span><span class=n>k_hi</span><span class=w> </span><span class=o>=</span><span class=w> </span><span class=n>cleri_keyword</span><span class=p>(</span><span class=n>CLERI_GID_K_HI</span><span class=p>,</span><span class=w> </span><span class=s>\"hi\"</span><span class=p>,</span><span class=w> </span><span class=n>CLERI_CASE_INSENSITIVE</span><span class=p>);</span><span class=w>    </span><span class=n>cleri_t</span><span class=w> </span><span class=o>*</span><span class=w> </span><span class=n>START</span><span class=w> </span><span class=o>=</span><span class=w> </span><span class=n>cleri_sequence</span><span class=p>(</span><span class=w>        </span><span class=n>CLERI_GID_START</span><span class=p>,</span><span class=w>        </span><span class=mi>2</span><span class=p>,</span><span class=w>        </span><span class=n>k_hi</span><span class=p>,</span><span class=w>        </span><span class=n>r_name</span><span class=w>    </span><span class=p>);</span><span class=w>    </span><span class=n>cleri_grammar_t</span><span class=w> </span><span class=o>*</span><span class=w> </span><span class=n>grammar</span><span class=w> </span><span class=o>=</span><span class=w> </span><span class=n>cleri_grammar</span><span class=p>(</span><span class=n>START</span><span class=p>,</span><span class=w> </span><span class=s>\"^</span><span class=se>\\\\</span><span class=s>w+\"</span><span class=p>);</span><span class=w>    </span><span class=k>return</span><span class=w> </span><span class=n>grammar</span><span class=p>;</span><span class=p>}</span></pre><p>and the header file...</p><pre lang=c><span class=cm>/*</span><span class=cm> * grammar.h</span><span class=cm> *</span><span class=cm> * This grammar is generated using the Grammar.export_c() method and</span><span class=cm> * should be used with the libcleri module.</span><span class=cm> *</span><span class=cm> * Source class: MyGrammar</span><span class=cm> * Created at: 2016-05-09 12:16:49</span><span class=cm> */</span><span class=cp>#ifndef CLERI_EXPORT_GRAMMAR_H_</span><span class=cp>#define CLERI_EXPORT_GRAMMAR_H_</span><span class=cp>#include</span><span class=w> </span><span class=cpf>&lt;grammar.h&gt;</span><span class=cp>#include</span><span class=w> </span><span class=cpf>&lt;cleri/cleri.h&gt;</span><span class=n>cleri_grammar_t</span><span class=w> </span><span class=o>*</span><span class=w> </span><span class=nf>compile_grammar</span><span class=p>(</span><span class=kt>void</span><span class=p>);</span><span class=k>enum</span><span class=w> </span><span class=n>cleri_grammar_ids</span><span class=w> </span><span class=p>{</span><span class=w>    </span><span class=n>CLERI_NONE</span><span class=p>,</span><span class=w>   </span><span class=c1>// used for objects with no name</span><span class=w>    </span><span class=n>CLERI_GID_K_HI</span><span class=p>,</span><span class=w>    </span><span class=n>CLERI_GID_R_NAME</span><span class=p>,</span><span class=w>    </span><span class=n>CLERI_GID_START</span><span class=p>,</span><span class=w>    </span><span class=n>CLERI_END</span><span class=w> </span><span class=c1>// can be used to get the enum length</span><span class=p>};</span><span class=cp>#endif </span><span class=cm>/* CLERI_EXPORT_GRAMMAR_H_ */</span></pre><h3>export_go</h3><p>syntax:</p><pre lang=python3><span class=n>Grammar</span><span class=p>()</span><span class=o>.</span><span class=n>export_go</span><span class=p>(</span>    <span class=n>go_template</span><span class=o>=</span><span class=n>Grammar</span><span class=o>.</span><span class=n>GO_TEMPLATE</span><span class=p>,</span>    <span class=n>go_indent</span><span class=o>=</span><span class=s1>'</span><span class=se>\\t</span><span class=s1>'</span><span class=p>,</span>    <span class=n>go_package</span><span class=o>=</span><span class=s1>'grammar'</span><span class=p>)</span></pre><p>Optional keyword arguments:</p><ul><li><code>go_template</code>: Template String used for the export. You might want to look at the default string which can be found at Grammar.GO_TEMPLATE.</li><li><code>go_indent</code>: indentation used in the Go file. (default: one tab)</li><li><code>go_package</code>: Name of the go package. (default: 'grammar')</li></ul><p>For example when using our Quick usage grammar, this is the output when running <code>my_grammar.export_go()</code>:</p><pre lang=go><span class=kn>package</span><span class=w> </span><span class=nx>grammar</span><span class=c1>// This grammar is generated using the Grammar.export_go() method and</span><span class=c1>// should be used with the goleri module.</span><span class=c1>//</span><span class=c1>// Source class: MyGrammar</span><span class=c1>// Created at: 2017-03-14 19:07:09</span><span class=kn>import</span><span class=w> </span><span class=p>(</span><span class=w>        </span><span class=s>\"regexp\"</span><span class=w>        </span><span class=s>\"github.com/cesbit/goleri\"</span><span class=p>)</span><span class=c1>// Element indentifiers</span><span class=kd>const</span><span class=w> </span><span class=p>(</span><span class=w>        </span><span class=nx>NoGid</span><span class=w> </span><span class=p>=</span><span class=w> </span><span class=kc>iota</span><span class=w>        </span><span class=nx>GidKHi</span><span class=w> </span><span class=p>=</span><span class=w> </span><span class=kc>iota</span><span class=w>        </span><span class=nx>GidRName</span><span class=w> </span><span class=p>=</span><span class=w> </span><span class=kc>iota</span><span class=w>        </span><span class=nx>GidSTART</span><span class=w> </span><span class=p>=</span><span class=w> </span><span class=kc>iota</span><span class=p>)</span><span class=c1>// MyGrammar returns a compiled goleri grammar.</span><span class=kd>func</span><span class=w> </span><span class=nx>MyGrammar</span><span class=p>()</span><span class=w> </span><span class=o>*</span><span class=nx>goleri</span><span class=p>.</span><span class=nx>Grammar</span><span class=w> </span><span class=p>{</span><span class=w>        </span><span class=nx>rName</span><span class=w> </span><span class=o>:=</span><span class=w> </span><span class=nx>goleri</span><span class=p>.</span><span class=nx>NewRegex</span><span class=p>(</span><span class=nx>GidRName</span><span class=p>,</span><span class=w> </span><span class=nx>regexp</span><span class=p>.</span><span class=nx>MustCompile</span><span class=p>(</span><span class=s>`^(?:\"(?:[^\"]*)\")+`</span><span class=p>))</span><span class=w>        </span><span class=nx>kHi</span><span class=w> </span><span class=o>:=</span><span class=w> </span><span class=nx>goleri</span><span class=p>.</span><span class=nx>NewKeyword</span><span class=p>(</span><span class=nx>GidKHi</span><span class=p>,</span><span class=w> </span><span class=s>\"hi\"</span><span class=p>,</span><span class=w> </span><span class=kc>false</span><span class=p>)</span><span class=w>        </span><span class=nx>START</span><span class=w> </span><span class=o>:=</span><span class=w> </span><span class=nx>goleri</span><span class=p>.</span><span class=nx>NewSequence</span><span class=p>(</span><span class=w>                </span><span class=nx>GidSTART</span><span class=p>,</span><span class=w>                </span><span class=nx>kHi</span><span class=p>,</span><span class=w>                </span><span class=nx>rName</span><span class=p>,</span><span class=w>        </span><span class=p>)</span><span class=w>        </span><span class=k>return</span><span class=w> </span><span class=nx>goleri</span><span class=p>.</span><span class=nx>NewGrammar</span><span class=p>(</span><span class=nx>START</span><span class=p>,</span><span class=w> </span><span class=nx>regexp</span><span class=p>.</span><span class=nx>MustCompile</span><span class=p>(</span><span class=s>`^\\w+`</span><span class=p>))</span><span class=p>}</span></pre><h3>export_java</h3><p>syntax:</p><pre lang=python3><span class=n>Grammar</span><span class=p>()</span><span class=o>.</span><span class=n>export_java</span><span class=p>(</span>    <span class=n>java_template</span><span class=o>=</span><span class=n>Grammar</span><span class=o>.</span><span class=n>JAVA_TEMPLATE</span><span class=p>,</span>    <span class=n>java_indent</span><span class=o>=</span><span class=s1>' '</span> <span class=o>*</span> <span class=mi>4</span><span class=p>,</span>    <span class=n>java_package</span><span class=o>=</span><span class=kc>None</span><span class=p>,</span>    <span class=n>is_public</span><span class=o>=</span><span class=kc>True</span><span class=p>)</span></pre><p>Optional keyword arguments:</p><ul><li><code>java_template</code>: Template String used for the export. You might want to look at the default string which can be found at Grammar.JAVA_TEMPLATE.</li><li><code>java_indent</code>: indentation used in the Java file. (default: four spaces)</li><li><code>java_package</code>: Name of the Java package or None when no package is specified. (default: None)</li><li><code>is_public</code>: Class and constructor are defined as public when True, else they will be defined as package private.</li></ul><p>For example when using our Quick usage grammar, this is the output when running <code>my_grammar.export_java()</code>:</p><pre lang=java><span class=cm>/**</span><span class=cm> * This grammar is generated using the Grammar.export_java() method and</span><span class=cm> * should be used with the jleri module.</span><span class=cm> *</span><span class=cm> * Source class: MyGrammar</span><span class=cm> * Created at: 2018-07-04 12:12:34</span><span class=cm> */</span><span class=kn>import</span><span class=w> </span><span class=nn>jleri.Grammar</span><span class=p>;</span><span class=kn>import</span><span class=w> </span><span class=nn>jleri.Element</span><span class=p>;</span><span class=kn>import</span><span class=w> </span><span class=nn>jleri.Sequence</span><span class=p>;</span><span class=kn>import</span><span class=w> </span><span class=nn>jleri.Regex</span><span class=p>;</span><span class=kn>import</span><span class=w> </span><span class=nn>jleri.Keyword</span><span class=p>;</span><span class=kd>public</span><span class=w> </span><span class=kd>class</span> <span class=nc>MyGrammar</span><span class=w> </span><span class=kd>extends</span><span class=w> </span><span class=n>Grammar</span><span class=w> </span><span class=p>{</span><span class=w>    </span><span class=kd>enum</span><span class=w> </span><span class=n>Ids</span><span class=w> </span><span class=p>{</span><span class=w>        </span><span class=n>K_HI</span><span class=p>,</span><span class=w>        </span><span class=n>R_NAME</span><span class=p>,</span><span class=w>        </span><span class=n>START</span><span class=w>    </span><span class=p>}</span><span class=w>    </span><span class=kd>private</span><span class=w> </span><span class=kd>static</span><span class=w> </span><span class=kd>final</span><span class=w> </span><span class=n>Element</span><span class=w> </span><span class=n>R_NAME</span><span class=w> </span><span class=o>=</span><span class=w> </span><span class=k>new</span><span class=w> </span><span class=n>Regex</span><span class=p>(</span><span class=n>Ids</span><span class=p>.</span><span class=na>R_NAME</span><span class=p>,</span><span class=w> </span><span class=s>\"^(?:\\\"(?:[^\\\"]*)\\\")+\"</span><span class=p>);</span><span class=w>    </span><span class=kd>private</span><span class=w> </span><span class=kd>static</span><span class=w> </span><span class=kd>final</span><span class=w> </span><span class=n>Element</span><span class=w> </span><span class=n>K_HI</span><span class=w> </span><span class=o>=</span><span class=w> </span><span class=k>new</span><span class=w> </span><span class=n>Keyword</span><span class=p>(</span><span class=n>Ids</span><span class=p>.</span><span class=na>K_HI</span><span class=p>,</span><span class=w> </span><span class=s>\"hi\"</span><span class=p>,</span><span class=w> </span><span class=kc>false</span><span class=p>);</span><span class=w>    </span><span class=kd>private</span><span class=w> </span><span class=kd>static</span><span class=w> </span><span class=kd>final</span><span class=w> </span><span class=n>Element</span><span class=w> </span><span class=n>START</span><span class=w> </span><span class=o>=</span><span class=w> </span><span class=k>new</span><span class=w> </span><span class=n>Sequence</span><span class=p>(</span><span class=w>        </span><span class=n>Ids</span><span class=p>.</span><span class=na>START</span><span class=p>,</span><span class=w>        </span><span class=n>K_HI</span><span class=p>,</span><span class=w>        </span><span class=n>R_NAME</span><span class=w>    </span><span class=p>);</span><span class=w>    </span><span class=kd>public</span><span class=w> </span><span class=nf>MyGrammar</span><span class=p>()</span><span class=w> </span><span class=p>{</span><span class=w>        </span><span class=kd>super</span><span class=p>(</span><span class=n>START</span><span class=p>,</span><span class=w> </span><span class=s>\"^\\\\w+\"</span><span class=p>);</span><span class=w>    </span><span class=p>}</span><span class=p>}</span></pre><h3>export_py</h3><p>syntax:</p><pre lang=python3><span class=n>Grammar</span><span class=p>()</span><span class=o>.</span><span class=n>export_py</span><span class=p>(</span>    <span class=n>py_module_name</span><span class=o>=</span><span class=s1>'pyleri'</span><span class=p>,</span>    <span class=n>py_template</span><span class=o>=</span><span class=n>Grammar</span><span class=o>.</span><span class=n>PY_TEMPLATE</span><span class=p>,</span>    <span class=n>py_indent</span><span class=o>=</span><span class=s1>' '</span> <span class=o>*</span> <span class=mi>4</span><span class=p>)</span></pre><p>Optional keyword arguments:</p><ul><li><code>py_module_name</code>: Name of the Pyleri Module. (default: 'pyleri')</li><li><code>py_template</code>: Template String used for the export. You might want to look at the default string which can be found at Grammar.PY_TEMPLATE.</li><li><code>py_indent</code>: indentation used in the Python file. (default: 4 spaces)</li></ul><p>For example when using our Quick usage grammar, this is the output when running <code>my_grammar.export_py()</code>:</p><pre lang=python3><span class=sd>\"\"\"</span><span class=sd> This grammar is generated using the Grammar.export_py() method and</span><span class=sd> should be used with the pyleri python module.</span><span class=sd> Source class: MyGrammar</span><span class=sd> Created at: 2017-03-14 19:14:51</span><span class=sd>\"\"\"</span><span class=kn>import</span> <span class=nn>re</span><span class=kn>from</span> <span class=nn>pyleri</span> <span class=kn>import</span> <span class=n>Sequence</span><span class=kn>from</span> <span class=nn>pyleri</span> <span class=kn>import</span> <span class=n>Keyword</span><span class=kn>from</span> <span class=nn>pyleri</span> <span class=kn>import</span> <span class=n>Grammar</span><span class=kn>from</span> <span class=nn>pyleri</span> <span class=kn>import</span> <span class=n>Regex</span><span class=k>class</span> <span class=nc>MyGrammar</span><span class=p>(</span><span class=n>Grammar</span><span class=p>):</span>    <span class=n>RE_KEYWORDS</span> <span class=o>=</span> <span class=n>re</span><span class=o>.</span><span class=n>compile</span><span class=p>(</span><span class=s1>'^</span><span class=se>\\\\</span><span class=s1>w+'</span><span class=p>)</span>    <span class=n>r_name</span> <span class=o>=</span> <span class=n>Regex</span><span class=p>(</span><span class=s1>'^(?:\"(?:[^\"]*)\")+'</span><span class=p>)</span>    <span class=n>k_hi</span> <span class=o>=</span> <span class=n>Keyword</span><span class=p>(</span><span class=s1>'hi'</span><span class=p>)</span>    <span class=n>START</span> <span class=o>=</span> <span class=n>Sequence</span><span class=p>(</span>        <span class=n>k_hi</span><span class=p>,</span>        <span class=n>r_name</span>    <span class=p>)</span></pre><h2>Result</h2><p>The result of the <code>parse()</code> method contains 4 properties that will be explained next. A function <code>as_str(translate=None)</code> is also available which willshow the result as a string. The <code>translate</code> argument should be a function which accepts an element as argument. This function can be used toreturn custom strings for certain elements. If the return value of <code>translate</code> is <code>None</code> then the function will fall try to generate a string value. Ifthe return value is an empty string, the value will be ignored.</p><p>Example of translate functions:</p><pre lang=python3><span class=c1># In case a translation function returns an empty string, no text is used</span><span class=k>def</span> <span class=nf>translate</span><span class=p>(</span><span class=n>elem</span><span class=p>):</span>    <span class=k>return</span> <span class=s1>''</span>  <span class=c1># as a result you get something like: 'error at position x'</span><span class=c1># Text may be returned based on gid</span><span class=k>def</span> <span class=nf>translate</span><span class=p>(</span><span class=n>elem</span><span class=p>):</span>    <span class=k>if</span> <span class=n>elem</span> <span class=ow>is</span> <span class=n>some_elem</span><span class=p>:</span>        <span class=k>return</span> <span class=s1>'A'</span>   <span class=c1># something like: error at position x, expecting: A</span>    <span class=k>elif</span> <span class=n>elem</span> <span class=ow>is</span> <span class=n>other_elem</span><span class=p>:</span>        <span class=k>return</span> <span class=s1>''</span>    <span class=c1># other_elem will be ignored</span>    <span class=k>else</span><span class=p>:</span>        <span class=k>return</span> <span class=kc>None</span>  <span class=c1># normal parsing</span><span class=c1># A translate function can be used as follow:</span><span class=nb>print</span><span class=p>(</span><span class=n>my_grammar</span><span class=o>.</span><span class=n>parse</span><span class=p>(</span><span class=s1>'some string'</span><span class=p>)</span><span class=o>.</span><span class=n>as_str</span><span class=p>(</span><span class=n>translate</span><span class=o>=</span><span class=n>translate</span><span class=p>))</span></pre><h3>is_valid</h3><p><code>is_valid</code> returns a boolean value, <code>True</code> when the given string is valid according to the given grammar, <code>False</code> when not valid.</p><p>Let us take the example from Quick usage.</p><pre lang=python3><span class=n>res</span> <span class=o>=</span> <span class=n>my_grammar</span><span class=o>.</span><span class=n>parse</span><span class=p>(</span><span class=s1>'bye \"Iris\"'</span><span class=p>)</span><span class=nb>print</span><span class=p>(</span><span class=n>res</span><span class=o>.</span><span class=n>is_valid</span><span class=p>)</span> <span class=c1># =&gt; False</span></pre><h3>Position</h3><p><code>pos</code> returns the position where the parser had to stop. (when <code>is_valid</code> is <code>True</code> this value will be equal to the length of the given string with <code>str.rstrip()</code> applied)</p><p>Let us take the example from Quick usage.</p><pre lang=python3><span class=n>result</span> <span class=o>=</span> <span class=n>my_grammar</span><span class=o>.</span><span class=n>parse</span><span class=p>(</span><span class=s1>'hi Iris'</span><span class=p>)</span><span class=nb>print</span><span class=p>(</span><span class=n>res</span><span class=o>.</span><span class=n>is_valid</span><span class=p>,</span> <span class=n>result</span><span class=o>.</span><span class=n>pos</span><span class=p>)</span> <span class=c1># =&gt; False, 3</span></pre><h3>Tree</h3><p><code>tree</code> contains the parse tree. Even when <code>is_valid</code> is <code>False</code> the parse tree is returned but will only contain results as far as parsing has succeeded. The tree is the root node which can include several <code>children</code> nodes. The structure will be further clarified in the following example which explains a way of visualizing the parse tree.</p><p>Example:</p><pre lang=python3><span class=kn>import</span> <span class=nn>json</span><span class=kn>from</span> <span class=nn>pyleri</span> <span class=kn>import</span> <span class=n>Choice</span><span class=kn>from</span> <span class=nn>pyleri</span> <span class=kn>import</span> <span class=n>Grammar</span><span class=kn>from</span> <span class=nn>pyleri</span> <span class=kn>import</span> <span class=n>Keyword</span><span class=kn>from</span> <span class=nn>pyleri</span> <span class=kn>import</span> <span class=n>Regex</span><span class=kn>from</span> <span class=nn>pyleri</span> <span class=kn>import</span> <span class=n>Repeat</span><span class=kn>from</span> <span class=nn>pyleri</span> <span class=kn>import</span> <span class=n>Sequence</span><span class=c1># Create a Grammar Class to define your language</span><span class=k>class</span> <span class=nc>MyGrammar</span><span class=p>(</span><span class=n>Grammar</span><span class=p>):</span>    <span class=n>r_name</span> <span class=o>=</span> <span class=n>Regex</span><span class=p>(</span><span class=s1>'(?:\"(?:[^\"]*)\")+'</span><span class=p>)</span>    <span class=n>k_hi</span> <span class=o>=</span> <span class=n>Keyword</span><span class=p>(</span><span class=s1>'hi'</span><span class=p>)</span>    <span class=n>k_bye</span> <span class=o>=</span> <span class=n>Keyword</span><span class=p>(</span><span class=s1>'bye'</span><span class=p>)</span>    <span class=n>START</span> <span class=o>=</span> <span class=n>Repeat</span><span class=p>(</span><span class=n>Sequence</span><span class=p>(</span><span class=n>Choice</span><span class=p>(</span><span class=n>k_hi</span><span class=p>,</span> <span class=n>k_bye</span><span class=p>),</span> <span class=n>r_name</span><span class=p>))</span><span class=c1># Returns properties of a node object as a dictionary:</span><span class=k>def</span> <span class=nf>node_props</span><span class=p>(</span><span class=n>node</span><span class=p>,</span> <span class=n>children</span><span class=p>):</span>    <span class=k>return</span> <span class=p>{</span>        <span class=s1>'start'</span><span class=p>:</span> <span class=n>node</span><span class=o>.</span><span class=n>start</span><span class=p>,</span>        <span class=s1>'end'</span><span class=p>:</span> <span class=n>node</span><span class=o>.</span><span class=n>end</span><span class=p>,</span>        <span class=s1>'name'</span><span class=p>:</span> <span class=n>node</span><span class=o>.</span><span class=n>element</span><span class=o>.</span><span class=n>name</span> <span class=k>if</span> <span class=nb>hasattr</span><span class=p>(</span><span class=n>node</span><span class=o>.</span><span class=n>element</span><span class=p>,</span> <span class=s1>'name'</span><span class=p>)</span> <span class=k>else</span> <span class=kc>None</span><span class=p>,</span>        <span class=s1>'element'</span><span class=p>:</span> <span class=n>node</span><span class=o>.</span><span class=n>element</span><span class=o>.</span><span class=vm>__class__</span><span class=o>.</span><span class=vm>__name__</span><span class=p>,</span>        <span class=s1>'string'</span><span class=p>:</span> <span class=n>node</span><span class=o>.</span><span class=n>string</span><span class=p>,</span>        <span class=s1>'children'</span><span class=p>:</span> <span class=n>children</span><span class=p>}</span><span class=c1># Recursive method to get the children of a node object:</span><span class=k>def</span> <span class=nf>get_children</span><span class=p>(</span><span class=n>children</span><span class=p>):</span>    <span class=k>return</span> <span class=p>[</span><span class=n>node_props</span><span class=p>(</span><span class=n>c</span><span class=p>,</span> <span class=n>get_children</span><span class=p>(</span><span class=n>c</span><span class=o>.</span><span class=n>children</span><span class=p>))</span> <span class=k>for</span> <span class=n>c</span> <span class=ow>in</span> <span class=n>children</span><span class=p>]</span><span class=c1># View the parse tree:</span><span class=k>def</span> <span class=nf>view_parse_tree</span><span class=p>(</span><span class=n>res</span><span class=p>):</span>    <span class=n>start</span> <span class=o>=</span> <span class=n>res</span><span class=o>.</span><span class=n>tree</span><span class=o>.</span><span class=n>children</span><span class=p>[</span><span class=mi>0</span><span class=p>]</span> \\        <span class=k>if</span> <span class=n>res</span><span class=o>.</span><span class=n>tree</span><span class=o>.</span><span class=n>children</span> <span class=k>else</span> <span class=n>res</span><span class=o>.</span><span class=n>tree</span>    <span class=k>return</span> <span class=n>node_props</span><span class=p>(</span><span class=n>start</span><span class=p>,</span> <span class=n>get_children</span><span class=p>(</span><span class=n>start</span><span class=o>.</span><span class=n>children</span><span class=p>))</span><span class=k>if</span> <span class=vm>__name__</span> <span class=o>==</span> <span class=s1>'__main__'</span><span class=p>:</span>    <span class=c1># Compile your grammar by creating an instance of the Grammar Class:</span>    <span class=n>my_grammar</span> <span class=o>=</span> <span class=n>MyGrammar</span><span class=p>()</span>    <span class=n>res</span> <span class=o>=</span> <span class=n>my_grammar</span><span class=o>.</span><span class=n>parse</span><span class=p>(</span><span class=s1>'hi \"pyleri\" bye \"pyleri\"'</span><span class=p>)</span>    <span class=c1># The parse tree is visualized as a JSON object:</span>    <span class=nb>print</span><span class=p>(</span><span class=n>json</span><span class=o>.</span><span class=n>dumps</span><span class=p>(</span><span class=n>view_parse_tree</span><span class=p>(</span><span class=n>res</span><span class=p>),</span> <span class=n>indent</span><span class=o>=</span><span class=mi>2</span><span class=p>))</span></pre><p>Part of the output is shown below.</p><pre lang=json><span class=w>    </span><span class=p>{</span><span class=w>    </span><span class=nt>\"start\"</span><span class=p>:</span><span class=w> </span><span class=mi>0</span><span class=p>,</span><span class=w>    </span><span class=nt>\"end\"</span><span class=p>:</span><span class=w> </span><span class=mi>23</span><span class=p>,</span><span class=w>    </span><span class=nt>\"name\"</span><span class=p>:</span><span class=w> </span><span class=s2>\"START\"</span><span class=p>,</span><span class=w>    </span><span class=nt>\"element\"</span><span class=p>:</span><span class=w> </span><span class=s2>\"Repeat\"</span><span class=p>,</span><span class=w>    </span><span class=nt>\"string\"</span><span class=p>:</span><span class=w> </span><span class=s2>\"hi \\\"pyleri\\\" bye \\\"pyleri\\\"\"</span><span class=p>,</span><span class=w>    </span><span class=nt>\"children\"</span><span class=p>:</span><span class=w> </span><span class=p>[</span><span class=w>        </span><span class=p>{</span><span class=w>        </span><span class=nt>\"start\"</span><span class=p>:</span><span class=w> </span><span class=mi>0</span><span class=p>,</span><span class=w>        </span><span class=nt>\"end\"</span><span class=p>:</span><span class=w> </span><span class=mi>11</span><span class=p>,</span><span class=w>        </span><span class=nt>\"name\"</span><span class=p>:</span><span class=w> </span><span class=kc>null</span><span class=p>,</span><span class=w>        </span><span class=nt>\"element\"</span><span class=p>:</span><span class=w> </span><span class=s2>\"Sequence\"</span><span class=p>,</span><span class=w>        </span><span class=nt>\"string\"</span><span class=p>:</span><span class=w> </span><span class=s2>\"hi \\\"pyleri\\\"\"</span><span class=p>,</span><span class=w>        </span><span class=nt>\"children\"</span><span class=p>:</span><span class=w> </span><span class=p>[</span><span class=w>            </span><span class=p>{</span><span class=w>            </span><span class=nt>\"start\"</span><span class=p>:</span><span class=w> </span><span class=mi>0</span><span class=p>,</span><span class=w>            </span><span class=nt>\"end\"</span><span class=p>:</span><span class=w> </span><span class=mi>2</span><span class=p>,</span><span class=w>            </span><span class=nt>\"name\"</span><span class=p>:</span><span class=w> </span><span class=kc>null</span><span class=p>,</span><span class=w>            </span><span class=nt>\"element\"</span><span class=p>:</span><span class=w> </span><span class=s2>\"Choice\"</span><span class=p>,</span><span class=w>            </span><span class=nt>\"string\"</span><span class=p>:</span><span class=w> </span><span class=s2>\"hi\"</span><span class=p>,</span><span class=w>            </span><span class=nt>\"children\"</span><span class=p>:</span><span class=w> </span><span class=p>[</span><span class=w>                </span><span class=p>{</span><span class=w>                </span><span class=nt>\"start\"</span><span class=p>:</span><span class=w> </span><span class=mi>0</span><span class=p>,</span><span class=w>                </span><span class=nt>\"end\"</span><span class=p>:</span><span class=w> </span><span class=mi>2</span><span class=p>,</span><span class=w>                </span><span class=nt>\"name\"</span><span class=p>:</span><span class=w> </span><span class=s2>\"k_hi\"</span><span class=p>,</span><span class=w>                </span><span class=nt>\"element\"</span><span class=p>:</span><span class=w> </span><span class=s2>\"Keyword\"</span><span class=p>,</span><span class=w>                </span><span class=nt>\"string\"</span><span class=p>:</span><span class=w> </span><span class=s2>\"hi\"</span><span class=p>,</span><span class=w>                </span><span class=nt>\"children\"</span><span class=p>:</span><span class=w> </span><span class=p>[]</span><span class=w>                </span><span class=p>}</span><span class=w>            </span><span class=p>]</span><span class=w>            </span><span class=p>},</span><span class=w>            </span><span class=p>{</span><span class=w>            </span><span class=nt>\"start\"</span><span class=p>:</span><span class=w> </span><span class=mi>3</span><span class=p>,</span><span class=w>            </span><span class=nt>\"end\"</span><span class=p>:</span><span class=w> </span><span class=mi>11</span><span class=p>,</span><span class=w>            </span><span class=nt>\"name\"</span><span class=p>:</span><span class=w> </span><span class=s2>\"r_name\"</span><span class=p>,</span><span class=w>            </span><span class=nt>\"element\"</span><span class=p>:</span><span class=w> </span><span class=s2>\"Regex\"</span><span class=p>,</span><span class=w>            </span><span class=nt>\"string\"</span><span class=p>:</span><span class=w> </span><span class=s2>\"\\\"pyleri\\\"\"</span><span class=p>,</span><span class=w>            </span><span class=nt>\"children\"</span><span class=p>:</span><span class=w> </span><span class=p>[]</span><span class=w>            </span><span class=p>}</span><span class=w>            </span><span class=s2>\"...\"</span><span class=w>            </span><span class=s2>\"...\"</span></pre><p>A node contains 5 properties that will be explained next:</p><ul><li><code>start</code> property returns the start of the node object.</li><li><code>end</code> property returns the end of the  node object.</li><li><code>element</code> returns the <a href=#elements rel=nofollow>Element</a>'s type (e.g. Repeat, Sequence, Keyword, etc.). An element can be assigned to a variable; for instance in the example above <code>Keyword('hi')</code> was assigned to <code>k_hi</code>. With <code>element.name</code> the assigned name <code>k_hi</code> will be returned. Note that it is not a given that an element is named; in our example <code>Sequence</code> was not assigned, thus in this case the element has no attribute <code>name</code>.</li><li><code>string</code> returns the string that is parsed.</li><li><code>children</code> can return a node object containing deeper layered nodes provided that there are any. In our example the root node has an element type <code>Repeat()</code>, starts at 0 and ends at 24, and it has two <code>children</code>. These children are node objects that have both an element type <code>Sequence</code>, start at 0 and 12 respectively, and so on.</li></ul><h3>Expecting</h3><p><code>expecting</code> returns a Python set() containing elements which pyleri expects at <code>pos</code>. Even if <code>is_valid</code> is true there might be elements in this set, for example when an <code>Optional()</code> element could be added to the string. \"Expecting\" is useful if you want to implement things like auto-completion, syntax error handling, auto-syntax-correction etc. The following example will illustrate a way of implementation.</p><p>Example:</p><pre lang=python3><span class=kn>import</span> <span class=nn>re</span><span class=kn>import</span> <span class=nn>random</span><span class=kn>from</span> <span class=nn>pyleri</span> <span class=kn>import</span> <span class=n>Choice</span><span class=kn>from</span> <span class=nn>pyleri</span> <span class=kn>import</span> <span class=n>Grammar</span><span class=kn>from</span> <span class=nn>pyleri</span> <span class=kn>import</span> <span class=n>Keyword</span><span class=kn>from</span> <span class=nn>pyleri</span> <span class=kn>import</span> <span class=n>Repeat</span><span class=kn>from</span> <span class=nn>pyleri</span> <span class=kn>import</span> <span class=n>Sequence</span><span class=kn>from</span> <span class=nn>pyleri</span> <span class=kn>import</span> <span class=n>end_of_statement</span><span class=c1># Create a Grammar Class to define your language.</span><span class=k>class</span> <span class=nc>MyGrammar</span><span class=p>(</span><span class=n>Grammar</span><span class=p>):</span>    <span class=n>RE_KEYWORDS</span> <span class=o>=</span> <span class=n>re</span><span class=o>.</span><span class=n>compile</span><span class=p>(</span><span class=sa>r</span><span class=s1>'\\S+'</span><span class=p>)</span>    <span class=n>r_name</span> <span class=o>=</span> <span class=n>Keyword</span><span class=p>(</span><span class=s1>'\"pyleri\"'</span><span class=p>)</span>    <span class=n>k_hi</span> <span class=o>=</span> <span class=n>Keyword</span><span class=p>(</span><span class=s1>'hi'</span><span class=p>)</span>    <span class=n>k_bye</span> <span class=o>=</span> <span class=n>Keyword</span><span class=p>(</span><span class=s1>'bye'</span><span class=p>)</span>    <span class=n>START</span> <span class=o>=</span> <span class=n>Repeat</span><span class=p>(</span><span class=n>Sequence</span><span class=p>(</span><span class=n>Choice</span><span class=p>(</span><span class=n>k_hi</span><span class=p>,</span> <span class=n>k_bye</span><span class=p>),</span> <span class=n>r_name</span><span class=p>),</span> <span class=n>mi</span><span class=o>=</span><span class=mi>2</span><span class=p>)</span><span class=c1># Print the expected elements as a indented and numbered list.</span><span class=k>def</span> <span class=nf>print_expecting</span><span class=p>(</span><span class=n>node_expecting</span><span class=p>,</span> <span class=n>string_expecting</span><span class=p>):</span>    <span class=k>for</span> <span class=n>loop</span><span class=p>,</span> <span class=n>e</span> <span class=ow>in</span> <span class=nb>enumerate</span><span class=p>(</span><span class=n>node_expecting</span><span class=p>):</span>        <span class=n>string_expecting</span> <span class=o>=</span> <span class=s1>'</span><span class=si>{}</span><span class=se>\\n\\t</span><span class=s1>(</span><span class=si>{}</span><span class=s1>) </span><span class=si>{}</span><span class=s1>'</span><span class=o>.</span><span class=n>format</span><span class=p>(</span><span class=n>string_expecting</span><span class=p>,</span> <span class=n>loop</span><span class=p>,</span> <span class=n>e</span><span class=p>)</span>    <span class=nb>print</span><span class=p>(</span><span class=n>string_expecting</span><span class=p>)</span><span class=c1># Complete a string until it is valid according to the grammar.</span><span class=k>def</span> <span class=nf>auto_correction</span><span class=p>(</span><span class=n>string</span><span class=p>,</span> <span class=n>my_grammar</span><span class=p>):</span>    <span class=n>node</span> <span class=o>=</span> <span class=n>my_grammar</span><span class=o>.</span><span class=n>parse</span><span class=p>(</span><span class=n>string</span><span class=p>)</span>    <span class=nb>print</span><span class=p>(</span><span class=s1>'</span><span class=se>\\n</span><span class=s1>Parsed string: </span><span class=si>{}</span><span class=s1>'</span><span class=o>.</span><span class=n>format</span><span class=p>(</span><span class=n>node</span><span class=o>.</span><span class=n>tree</span><span class=o>.</span><span class=n>string</span><span class=p>))</span>    <span class=k>if</span> <span class=n>node</span><span class=o>.</span><span class=n>is_valid</span><span class=p>:</span>        <span class=n>string_expecting</span> <span class=o>=</span> <span class=s1>'String is valid. </span><span class=se>\\n</span><span class=s1>Expected: '</span>        <span class=n>print_expecting</span><span class=p>(</span><span class=n>node</span><span class=o>.</span><span class=n>expecting</span><span class=p>,</span> <span class=n>string_expecting</span><span class=p>)</span>    <span class=k>else</span><span class=p>:</span>        <span class=n>string_expecting</span> <span class=o>=</span> <span class=s1>'String is NOT valid.</span><span class=se>\\n</span><span class=s1>Expected: '</span> \\            <span class=k>if</span> <span class=ow>not</span> <span class=n>node</span><span class=o>.</span><span class=n>pos</span> \\            <span class=k>else</span> <span class=s1>'String is NOT valid. </span><span class=se>\\n</span><span class=s1>After \"</span><span class=si>{}</span><span class=s1>\" expected: '</span><span class=o>.</span><span class=n>format</span><span class=p>(</span>                                                  <span class=n>node</span><span class=o>.</span><span class=n>tree</span><span class=o>.</span><span class=n>string</span><span class=p>[:</span><span class=n>node</span><span class=o>.</span><span class=n>pos</span><span class=p>])</span>        <span class=n>print_expecting</span><span class=p>(</span><span class=n>node</span><span class=o>.</span><span class=n>expecting</span><span class=p>,</span> <span class=n>string_expecting</span><span class=p>)</span>        <span class=n>selected</span> <span class=o>=</span> <span class=n>random</span><span class=o>.</span><span class=n>choice</span><span class=p>(</span><span class=nb>list</span><span class=p>(</span><span class=n>node</span><span class=o>.</span><span class=n>expecting</span><span class=p>))</span>        <span class=n>string</span> <span class=o>=</span> <span class=s1>'</span><span class=si>{}</span><span class=s1> </span><span class=si>{}</span><span class=s1>'</span><span class=o>.</span><span class=n>format</span><span class=p>(</span><span class=n>node</span><span class=o>.</span><span class=n>tree</span><span class=o>.</span><span class=n>string</span><span class=p>[:</span><span class=n>node</span><span class=o>.</span><span class=n>pos</span><span class=p>],</span>                                <span class=n>selected</span>                                <span class=k>if</span> <span class=n>selected</span>                                <span class=ow>is</span> <span class=ow>not</span> <span class=n>end_of_statement</span> <span class=k>else</span> <span class=s1>''</span><span class=p>)</span>        <span class=n>auto_correction</span><span class=p>(</span><span class=n>string</span><span class=p>,</span> <span class=n>my_grammar</span><span class=p>)</span><span class=k>if</span> <span class=vm>__name__</span> <span class=o>==</span> <span class=s1>'__main__'</span><span class=p>:</span>    <span class=c1># Compile your grammar by creating an instance of the Grammar Class.</span>    <span class=n>my_grammar</span> <span class=o>=</span> <span class=n>MyGrammar</span><span class=p>()</span>    <span class=n>string</span> <span class=o>=</span> <span class=s1>'hello \"pyleri\"'</span>    <span class=n>auto_correction</span><span class=p>(</span><span class=n>string</span><span class=p>,</span> <span class=n>my_grammar</span><span class=p>)</span></pre><p>Output:</p><pre><code>Parsed string: hello \"pyleri\"String is NOT valid.Expected:        (1) hi        (2) byeParsed string:  byeString is NOT valid.After \" bye\" expected:        (1) \"pyleri\"Parsed string:  bye \"pyleri\"String is NOT valid.After \" bye \"pyleri\"\" expected:        (1) hi        (2) byeParsed string:  bye \"pyleri\" hiString is NOT valid.After \" bye \"pyleri\" hi\" expected:        (1) \"pyleri\"Parsed string:  bye \"pyleri\" hi \"pyleri\"String is valid.Expected:        (1) hi        (2) bye</code></pre><p>In the above example we parsed an invalid string according to the grammar class. The <code>auto-correction()</code> method that we built for this example combines all properties from the <code>parse()</code> to create a valid string. The output shows every recursion of the <code>auto-correction()</code> method and prints successively the set of expected elements. It takes one randomly and adds it to the string. When the string corresponds to the grammar, the property <code>is_valid</code> will return <code>True</code>. Notably the <code>expecting</code> property still contains elements even if the <code>is_valid</code> returned <code>True</code>. The reason in this example is due to the <a href=#repeat rel=nofollow>Repeat</a> element.</p><h2>Elements</h2><p>Pyleri has several elements which are all subclasses of <a href=#element rel=nofollow>Element</a> and can be used to create a grammar.</p><h3>Keyword</h3><p>syntax:</p><pre lang=python3><span class=n>Keyword</span><span class=p>(</span><span class=n>keyword</span><span class=p>,</span> <span class=n>ign_case</span><span class=o>=</span><span class=kc>False</span><span class=p>)</span></pre><p>The parser needs to match the keyword which is just a string. When matching keywords we need to tell the parser what characters are allowed in keywords. By default Pyleri uses <code>^\\w+</code> which is both in Python and JavaScript equal to <code>^[A-Za-z0-9_]+</code>. We can overwrite the default by setting <code>RE_KEYWORDS</code> in the grammar. Keyword() accepts one keyword argument <code>ign_case</code> to tell the parser if we should match case insensitive.</p><p>Example:</p><pre lang=python3><span class=k>class</span> <span class=nc>TicTacToe</span><span class=p>(</span><span class=n>Grammar</span><span class=p>):</span>    <span class=c1># Let's allow keywords with alphabetic characters and dashes.</span>    <span class=n>RE_KEYWORDS</span> <span class=o>=</span> <span class=n>re</span><span class=o>.</span><span class=n>compile</span><span class=p>(</span><span class=s1>'^[A-Za-z-]+'</span><span class=p>)</span>    <span class=n>START</span> <span class=o>=</span> <span class=n>Keyword</span><span class=p>(</span><span class=s1>'tic-tac-toe'</span><span class=p>,</span> <span class=n>ign_case</span><span class=o>=</span><span class=kc>True</span><span class=p>)</span><span class=n>ttt_grammar</span> <span class=o>=</span> <span class=n>TicTacToe</span><span class=p>()</span><span class=n>ttt_grammar</span><span class=o>.</span><span class=n>parse</span><span class=p>(</span><span class=s1>'Tic-Tac-Toe'</span><span class=p>)</span><span class=o>.</span><span class=n>is_valid</span>  <span class=c1># =&gt; True</span></pre><h3>Regex</h3><p>syntax:</p><pre lang=python3><span class=n>Regex</span><span class=p>(</span><span class=n>pattern</span><span class=p>,</span> <span class=n>flags</span><span class=o>=</span><span class=mi>0</span><span class=p>)</span></pre><p>The parser compiles a regular expression using the <code>re</code> module. The current version of pyleri has only support for the <code>re.IGNORECASE</code> flag.See the <a href=#quick-usage rel=nofollow>Quick usage</a> example for how to use <code>Regex</code>.</p><h3>Token</h3><p>syntax:</p><pre lang=python3><span class=n>Token</span><span class=p>(</span><span class=n>token</span><span class=p>)</span></pre><p>A token can be one or more characters and is usually used to match operators like <code>+</code>, <code>-</code>, <code>//</code> and so on. When we parse a string object where pyleri expects an element, it will automatically be converted to a <code>Token()</code> object.</p><p>Example:</p><pre lang=python3><span class=k>class</span> <span class=nc>Ni</span><span class=p>(</span><span class=n>Grammar</span><span class=p>):</span>    <span class=n>t_dash</span> <span class=o>=</span> <span class=n>Token</span><span class=p>(</span><span class=s1>'-'</span><span class=p>)</span>    <span class=c1># We could just write delimiter='-' because</span>    <span class=c1># any string will be converted to Token()</span>    <span class=n>START</span> <span class=o>=</span> <span class=n>List</span><span class=p>(</span><span class=n>Keyword</span><span class=p>(</span><span class=s1>'ni'</span><span class=p>),</span> <span class=n>delimiter</span><span class=o>=</span><span class=n>t_dash</span><span class=p>)</span><span class=n>ni</span> <span class=o>=</span> <span class=n>Ni</span><span class=p>()</span><span class=n>ni</span><span class=o>.</span><span class=n>parse</span><span class=p>(</span><span class=s1>'ni-ni-ni-ni-ni'</span><span class=p>)</span><span class=o>.</span><span class=n>is_valid</span>  <span class=c1># =&gt; True</span></pre><h3>Tokens</h3><p>syntax:</p><pre lang=python3><span class=n>Tokens</span><span class=p>(</span><span class=n>tokens</span><span class=p>)</span></pre><p>Can be used to register multiple tokens at once. The <code>tokens</code> argument should be a string with tokens separated by spaces. If given tokens are different in size the parser will try to match the longest tokens first.</p><p>Example:</p><pre lang=python3><span class=k>class</span> <span class=nc>Ni</span><span class=p>(</span><span class=n>Grammar</span><span class=p>):</span>    <span class=n>tks</span> <span class=o>=</span> <span class=n>Tokens</span><span class=p>(</span><span class=s1>'+ - !='</span><span class=p>)</span>    <span class=n>START</span> <span class=o>=</span> <span class=n>List</span><span class=p>(</span><span class=n>Keyword</span><span class=p>(</span><span class=s1>'ni'</span><span class=p>),</span> <span class=n>delimiter</span><span class=o>=</span><span class=n>tks</span><span class=p>)</span><span class=n>ni</span> <span class=o>=</span> <span class=n>Ni</span><span class=p>()</span><span class=n>ni</span><span class=o>.</span><span class=n>parse</span><span class=p>(</span><span class=s1>'ni + ni != ni - ni'</span><span class=p>)</span><span class=o>.</span><span class=n>is_valid</span>  <span class=c1># =&gt; True</span></pre><h3>Sequence</h3><p>syntax:</p><pre lang=python3><span class=n>Sequence</span><span class=p>(</span><span class=n>element</span><span class=p>,</span> <span class=n>element</span><span class=p>,</span> <span class=o>...</span><span class=p>)</span></pre><p>The parser needs to match each element in a sequence.</p><p>Example:</p><pre lang=python3><span class=k>class</span> <span class=nc>TicTacToe</span><span class=p>(</span><span class=n>Grammar</span><span class=p>):</span>    <span class=n>START</span> <span class=o>=</span> <span class=n>Sequence</span><span class=p>(</span><span class=n>Keyword</span><span class=p>(</span><span class=s1>'Tic'</span><span class=p>),</span> <span class=n>Keyword</span><span class=p>(</span><span class=s1>'Tac'</span><span class=p>),</span> <span class=n>Keyword</span><span class=p>(</span><span class=s1>'Toe'</span><span class=p>))</span><span class=n>ttt_grammar</span> <span class=o>=</span> <span class=n>TicTacToe</span><span class=p>()</span><span class=n>ttt_grammar</span><span class=o>.</span><span class=n>parse</span><span class=p>(</span><span class=s1>'Tic Tac Toe'</span><span class=p>)</span><span class=o>.</span><span class=n>is_valid</span>  <span class=c1># =&gt; True</span></pre><h3>Choice</h3><p>syntax:</p><pre lang=python3><span class=n>Choice</span><span class=p>(</span><span class=n>element</span><span class=p>,</span> <span class=n>element</span><span class=p>,</span> <span class=o>...</span><span class=p>,</span> <span class=n>most_greedy</span><span class=o>=</span><span class=kc>True</span><span class=p>)</span></pre><p>The parser needs to choose between one of the given elements. Choice accepts one keyword argument <code>most_greedy</code> which is <code>True</code> by default. When <code>most_greedy</code> is set to <code>False</code> the parser will stop at the first match. When <code>True</code> the parser will try each element and returns the longest match. Setting <code>most_greedy</code> to <code>False</code> can provide some extra performance. Note that the parser will try to match each element in the exact same order they are parsed to Choice.</p><p>Example: let us use <code>Choice</code> to modify the Quick usage example to allow the string 'bye \"Iris\"'</p><pre lang=python3><span class=k>class</span> <span class=nc>MyGrammar</span><span class=p>(</span><span class=n>Grammar</span><span class=p>):</span>    <span class=n>r_name</span> <span class=o>=</span> <span class=n>Regex</span><span class=p>(</span><span class=s1>'(?:\"(?:[^\"]*)\")+'</span><span class=p>)</span>    <span class=n>k_hi</span> <span class=o>=</span> <span class=n>Keyword</span><span class=p>(</span><span class=s1>'hi'</span><span class=p>)</span>    <span class=n>k_bye</span> <span class=o>=</span> <span class=n>Keyword</span><span class=p>(</span><span class=s1>'bye'</span><span class=p>)</span>    <span class=n>START</span> <span class=o>=</span> <span class=n>Sequence</span><span class=p>(</span><span class=n>Choice</span><span class=p>(</span><span class=n>k_hi</span><span class=p>,</span> <span class=n>k_bye</span><span class=p>),</span> <span class=n>r_name</span><span class=p>)</span><span class=n>my_grammar</span> <span class=o>=</span> <span class=n>MyGrammar</span><span class=p>()</span><span class=n>my_grammar</span><span class=o>.</span><span class=n>parse</span><span class=p>(</span><span class=s1>'hi \"Iris\"'</span><span class=p>)</span><span class=o>.</span><span class=n>is_valid</span>  <span class=c1># =&gt; True</span><span class=n>my_grammar</span><span class=o>.</span><span class=n>parse</span><span class=p>(</span><span class=s1>'bye \"Iris\"'</span><span class=p>)</span><span class=o>.</span><span class=n>is_valid</span>  <span class=c1># =&gt; True</span></pre><h3>Repeat</h3><p>syntax:</p><pre lang=python3><span class=n>Repeat</span><span class=p>(</span><span class=n>element</span><span class=p>,</span> <span class=n>mi</span><span class=o>=</span><span class=mi>0</span><span class=p>,</span> <span class=n>ma</span><span class=o>=</span><span class=kc>None</span><span class=p>)</span></pre><p>The parser needs at least <code>mi</code> elements and at most <code>ma</code> elements. When <code>ma</code> is set to <code>None</code> we allow unlimited number of elements. <code>mi</code> can be any integer value equal or higher than 0 but not larger then <code>ma</code>.</p><p>Example:</p><pre lang=python3><span class=k>class</span> <span class=nc>Ni</span><span class=p>(</span><span class=n>Grammar</span><span class=p>):</span>    <span class=n>START</span> <span class=o>=</span> <span class=n>Repeat</span><span class=p>(</span><span class=n>Keyword</span><span class=p>(</span><span class=s1>'ni'</span><span class=p>))</span><span class=n>ni</span> <span class=o>=</span> <span class=n>Ni</span><span class=p>()</span><span class=n>ni</span><span class=o>.</span><span class=n>parse</span><span class=p>(</span><span class=s1>'ni ni ni ni ni'</span><span class=p>)</span><span class=o>.</span><span class=n>is_valid</span>  <span class=c1># =&gt; True</span></pre><p>It is not allowed to bind a name to the same element twice and Repeat(element, 1, 1) is a common solution to bind the element a second (or more) time(s).</p><p>For example consider the following:</p><pre lang=python3><span class=k>class</span> <span class=nc>MyGrammar</span><span class=p>(</span><span class=n>Grammar</span><span class=p>):</span>    <span class=n>r_name</span> <span class=o>=</span> <span class=n>Regex</span><span class=p>(</span><span class=s1>'(?:\"(?:[^\"]*)\")+'</span><span class=p>)</span>    <span class=c1># Raises a SyntaxError because we try to bind a second time.</span>    <span class=n>r_address</span> <span class=o>=</span> <span class=n>r_name</span> <span class=c1># WRONG</span>    <span class=c1># Instead use Repeat</span>    <span class=n>r_address</span> <span class=o>=</span> <span class=n>Repeat</span><span class=p>(</span><span class=n>r_name</span><span class=p>,</span> <span class=mi>1</span><span class=p>,</span> <span class=mi>1</span><span class=p>)</span> <span class=c1># RIGHT</span></pre><h3>List</h3><p>syntax:</p><pre lang=python3><span class=n>List</span><span class=p>(</span><span class=n>element</span><span class=p>,</span> <span class=n>delimiter</span><span class=o>=</span><span class=s1>','</span><span class=p>,</span> <span class=n>mi</span><span class=o>=</span><span class=mi>0</span><span class=p>,</span> <span class=n>ma</span><span class=o>=</span><span class=kc>None</span><span class=p>,</span> <span class=n>opt</span><span class=o>=</span><span class=kc>False</span><span class=p>)</span></pre><p>List is like Repeat but with a delimiter. A comma is used as default delimiter but any element is allowed. When a string is used as delimiter it will be converted to a <code>Token</code> element. <code>mi</code> and <code>ma</code> work exactly like with Repeat. An optional keyword argument <code>opt</code> can be set to <code>True</code> to allow the list to end with a delimiter. By default this is set to <code>False</code> which means the list has to end with an element.</p><p>Example:</p><pre lang=python3><span class=k>class</span> <span class=nc>Ni</span><span class=p>(</span><span class=n>Grammar</span><span class=p>):</span>    <span class=n>START</span> <span class=o>=</span> <span class=n>List</span><span class=p>(</span><span class=n>Keyword</span><span class=p>(</span><span class=s1>'ni'</span><span class=p>))</span><span class=n>ni</span> <span class=o>=</span> <span class=n>Ni</span><span class=p>()</span><span class=n>ni</span><span class=o>.</span><span class=n>parse</span><span class=p>(</span><span class=s1>'ni, ni, ni, ni, ni'</span><span class=p>)</span><span class=o>.</span><span class=n>is_valid</span>  <span class=c1># =&gt; True</span></pre><h3>Optional</h3><p>syntax:</p><pre lang=python3><span class=n>Optional</span><span class=p>(</span><span class=n>element</span><span class=p>)</span></pre><p>The parser looks for an optional element. It is like using <code>Repeat(element, 0, 1)</code> but we encourage to use <code>Optional</code> since it is more readable. (and slightly faster)</p><p>Example:</p><pre lang=python3><span class=k>class</span> <span class=nc>MyGrammar</span><span class=p>(</span><span class=n>Grammar</span><span class=p>):</span>    <span class=n>r_name</span> <span class=o>=</span> <span class=n>Regex</span><span class=p>(</span><span class=s1>'(?:\"(?:[^\"]*)\")+'</span><span class=p>)</span>    <span class=n>k_hi</span> <span class=o>=</span> <span class=n>Keyword</span><span class=p>(</span><span class=s1>'hi'</span><span class=p>)</span>    <span class=n>START</span> <span class=o>=</span> <span class=n>Sequence</span><span class=p>(</span><span class=n>k_hi</span><span class=p>,</span> <span class=n>Optional</span><span class=p>(</span><span class=n>r_name</span><span class=p>))</span><span class=n>my_grammar</span> <span class=o>=</span> <span class=n>MyGrammar</span><span class=p>()</span><span class=n>my_grammar</span><span class=o>.</span><span class=n>parse</span><span class=p>(</span><span class=s1>'hi \"Iris\"'</span><span class=p>)</span><span class=o>.</span><span class=n>is_valid</span>  <span class=c1># =&gt; True</span><span class=n>my_grammar</span><span class=o>.</span><span class=n>parse</span><span class=p>(</span><span class=s1>'hi'</span><span class=p>)</span><span class=o>.</span><span class=n>is_valid</span>  <span class=c1># =&gt; True</span></pre><h3>Ref</h3><p>syntax:</p><pre lang=python3><span class=n>Ref</span><span class=p>()</span></pre><p>The grammar can make a forward reference to make recursion possible. In the example below we create a forward reference to START but note thata reference to any element can be made.</p><blockquote><p>Warning: A reference is not protected against testing the same position ina string. This could potentially lead to an infinite loop.For example:</p><pre lang=python3><span class=n>r</span> <span class=o>=</span> <span class=n>Ref</span><span class=p>()</span><span class=n>r</span> <span class=o>=</span> <span class=n>Optional</span><span class=p>(</span><span class=n>r</span><span class=p>)</span>  <span class=c1># DON'T DO THIS</span></pre><p>Use <a href=#prio rel=nofollow>Prio</a> if such recursive construction is required.</p></blockquote><p>Example:</p><pre lang=python3><span class=k>class</span> <span class=nc>NestedNi</span><span class=p>(</span><span class=n>Grammar</span><span class=p>):</span>    <span class=n>START</span> <span class=o>=</span> <span class=n>Ref</span><span class=p>()</span>    <span class=n>ni_item</span> <span class=o>=</span> <span class=n>Choice</span><span class=p>(</span><span class=n>Keyword</span><span class=p>(</span><span class=s1>'ni'</span><span class=p>),</span> <span class=n>START</span><span class=p>)</span>    <span class=n>START</span> <span class=o>=</span> <span class=n>Sequence</span><span class=p>(</span><span class=s1>'['</span><span class=p>,</span> <span class=n>List</span><span class=p>(</span><span class=n>ni_item</span><span class=p>),</span> <span class=s1>']'</span><span class=p>)</span><span class=n>nested_ni</span> <span class=o>=</span> <span class=n>NestedNi</span><span class=p>()</span><span class=n>nested_ni</span><span class=o>.</span><span class=n>parse</span><span class=p>(</span><span class=s1>'[ni, ni, [ni, [], [ni, ni]]]'</span><span class=p>)</span><span class=o>.</span><span class=n>is_valid</span>  <span class=c1># =&gt; True</span></pre><h3>Prio</h3><p>syntax:</p><pre lang=python3><span class=n>Prio</span><span class=p>(</span><span class=n>element</span><span class=p>,</span> <span class=n>element</span><span class=p>,</span> <span class=o>...</span><span class=p>)</span></pre><p>Choose the first match from the prio elements and allow <code>THIS</code> for recursive operations. With <code>THIS</code> we point to the <code>Prio</code> element. Probably the example below explains how <code>Prio</code> and <code>THIS</code> can be used.</p><blockquote><p>Note: Use a <a href=#ref rel=nofollow>Ref</a> when possible.A <code>Prio</code> element is required when the same position in a string is potentiallychecked more than once.</p></blockquote><p>Example:</p><pre lang=python3><span class=k>class</span> <span class=nc>Ni</span><span class=p>(</span><span class=n>Grammar</span><span class=p>):</span>    <span class=n>k_ni</span> <span class=o>=</span> <span class=n>Keyword</span><span class=p>(</span><span class=s1>'ni'</span><span class=p>)</span>    <span class=n>START</span> <span class=o>=</span> <span class=n>Prio</span><span class=p>(</span>        <span class=n>k_ni</span><span class=p>,</span>        <span class=c1># '(' and ')' are automatically converted to Token('(') and Token(')')</span>        <span class=n>Sequence</span><span class=p>(</span><span class=s1>'('</span><span class=p>,</span> <span class=n>THIS</span><span class=p>,</span> <span class=s1>')'</span><span class=p>),</span>        <span class=n>Sequence</span><span class=p>(</span><span class=n>THIS</span><span class=p>,</span> <span class=n>Keyword</span><span class=p>(</span><span class=s1>'or'</span><span class=p>),</span> <span class=n>THIS</span><span class=p>),</span>        <span class=n>Sequence</span><span class=p>(</span><span class=n>THIS</span><span class=p>,</span> <span class=n>Keyword</span><span class=p>(</span><span class=s1>'and'</span><span class=p>),</span> <span class=n>THIS</span><span class=p>))</span><span class=n>ni</span> <span class=o>=</span> <span class=n>Ni</span><span class=p>()</span><span class=n>ni</span><span class=o>.</span><span class=n>parse</span><span class=p>(</span><span class=s1>'(ni or ni) and (ni or ni)'</span><span class=p>)</span><span class=o>.</span><span class=n>is_valid</span>  <span class=c1># =&gt; True</span></pre>          </div>        </div>        <div id=\"data\" data-project-tabs-target=\"content\" class=\"vertical-tabs__content\" role=\"tabpanel\" aria-labelledby=\"mobile-data-tab\" tabindex=\"-1\">          <h2 class=\"page-title\">Project details</h2><div class=\"sidebar-section\">  <h3 class=\"sidebar-section__title\">Project links</h3>  <ul class=\"vertical-tabs__list\">    <li>      <a class=\"vertical-tabs__tab vertical-tabs__tab--with-icon vertical-tabs__tab--condensed\" href=\"https://github.com/cesbit/pyleri\" rel=\"nofollow\">        <i class=\"fas fa-home\" aria-hidden=\"true\"></i>Homepage      </a>    </li>    <li>      <a class=\"vertical-tabs__tab vertical-tabs__tab--with-icon vertical-tabs__tab--condensed\" href=\"https://github.com/cesbit/pyleri/tarball/1.4.2\" rel=\"nofollow\">        <i class=\"fas fa-cloud-download-alt\" aria-hidden=\"true\"></i>Download      </a>    </li>  </ul></div><div class=\"sidebar-section\">  <h3 class=\"sidebar-section__title\">Statistics</h3>  <div class=\"hidden github-repo-info\" data-controller=\"github-repo-info\">GitHub statistics:    <ul class=\"vertical-tabs__list\">      <li>        <a class=\"vertical-tabs__tab vertical-tabs__tab--with-icon vertical-tabs__tab--condensed\"           data-github-repo-info-target=\"stargazersUrl\" rel=\"noopener\">          <i class=\"fa fa-star\" aria-hidden=\"true\"></i>          <strong>Stars:</strong>          <span data-github-repo-info-target=\"stargazersCount\"></span>        </a>      </li>      <li>        <a class=\"vertical-tabs__tab vertical-tabs__tab--with-icon vertical-tabs__tab--condensed\"           data-github-repo-info-target=\"forksUrl\" rel=\"noopener\">          <i class=\"fa fa-code-branch\" aria-hidden=\"true\"></i>          <strong>Forks:</strong>          <span data-github-repo-info-target=\"forksCount\"></span>        </a>      </li>      <li>        <a class=\"vertical-tabs__tab vertical-tabs__tab--with-icon vertical-tabs__tab--condensed\"           data-github-repo-info-target=\"openIssuesUrl\" rel=\"noopener\">          <i class=\"fa fa-exclamation-circle\" aria-hidden=\"true\"></i>          <strong>Open issues:</strong>          <span data-github-repo-info-target=\"openIssuesCount\"></span>        </a>      </li>      <li>        <a class=\"vertical-tabs__tab vertical-tabs__tab--with-icon vertical-tabs__tab--condensed\"           data-github-repo-info-target=\"openPRsUrl\" rel=\"noopener\">          <i class=\"fa fa-code-pull-request\" aria-hidden=\"true\"></i>          <strong>Open PRs:</strong>          <span data-github-repo-info-target=\"openPRsCount\"></span>        </a>      </li>    </ul>  </div>  <p>View statistics for this project via <a href=\"https://libraries.io/pypi/pyleri\" title=\"External link\" target=\"_blank\" rel=\"noopener\">Libraries.io</a>, or by using <a href=\"https://packaging.python.org/guides/analyzing-pypi-package-downloads/\" target=\"_blank\" rel=\"noopener\">our public dataset on Google BigQuery</a>  </p></div><div class=\"sidebar-section\">  <h3 class=\"sidebar-section__title\">Meta</h3>  <p><strong>License:</strong> MIT License</p>    <p><strong>Author:</strong> <a href=\"mailto:jeroen@cesbit.com\">Jeroen van der Heijden</a></p>  <p class=\"tags\">    <i class=\"fa fa-tags\" aria-hidden=\"true\"></i>    <span class=\"sr-only\">Tags</span>    <span class=\"package-keyword\">      parser,    </span>    <span class=\"package-keyword\">      grammar,    </span>    <span class=\"package-keyword\">      autocompletion    </span>  </p></div><div class=\"sidebar-section\">    <h3 class=\"sidebar-section__title\">Maintainers</h3>      <span class=\"sidebar-section__maintainer\">        <a href=\"/user/joente/\" aria-label=\"joente\">          <span class=\"sidebar-section__user-gravatar\">            <img src=\"https://pypi-camo.freetls.fastly.net/a530a1dbf2b4bc2f744053374e287396aa000620/68747470733a2f2f7365637572652e67726176617461722e636f6d2f6176617461722f64396265656463633936623564313836313633613538376432343137636163313f73697a653d3530\" height=\"50\" width=\"50\" alt=\"Avatar for joente from gravatar.com\" title=\"Avatar for joente from gravatar.com\">          </span>          <span class=\"sidebar-section__user-gravatar-text\">            joente          </span>        </a>      </span></div><div class=\"sidebar-section\">  <h3 class=\"sidebar-section__title\">Classifiers</h3>  <ul class=\"sidebar-section__classifiers\">    <li>      <strong>Development Status</strong>      <ul>        <li>          <a href=\"/search/?c=Development+Status+%3A%3A+5+-+Production%2FStable\">            5 - Production/Stable          </a>        </li>      </ul>    </li>    <li>      <strong>Intended Audience</strong>      <ul>        <li>          <a href=\"/search/?c=Intended+Audience+%3A%3A+Developers\">            Developers          </a>        </li>      </ul>    </li>    <li>      <strong>License</strong>      <ul>        <li>          <a href=\"/search/?c=License+%3A%3A+OSI+Approved+%3A%3A+MIT+License\">            OSI Approved :: MIT License          </a>        </li>      </ul>    </li>    <li>      <strong>Operating System</strong>      <ul>        <li>          <a href=\"/search/?c=Operating+System+%3A%3A+OS+Independent\">            OS Independent          </a>        </li>      </ul>    </li>    <li>      <strong>Programming Language</strong>      <ul>        <li>          <a href=\"/search/?c=Programming+Language+%3A%3A+Python+%3A%3A+3\">            Python :: 3          </a>        </li>        <li>          <a href=\"/search/?c=Programming+Language+%3A%3A+Python+%3A%3A+3+%3A%3A+Only\">            Python :: 3 :: Only          </a>        </li>        <li>          <a href=\"/search/?c=Programming+Language+%3A%3A+Python+%3A%3A+3.7\">            Python :: 3.7          </a>        </li>        <li>          <a href=\"/search/?c=Programming+Language+%3A%3A+Python+%3A%3A+3.8\">            Python :: 3.8          </a>        </li>        <li>          <a href=\"/search/?c=Programming+Language+%3A%3A+Python+%3A%3A+3.9\">            Python :: 3.9          </a>        </li>        <li>          <a href=\"/search/?c=Programming+Language+%3A%3A+Python+%3A%3A+3.10\">            Python :: 3.10          </a>        </li>      </ul>    </li>    <li>      <strong>Topic</strong>      <ul>        <li>          <a href=\"/search/?c=Topic+%3A%3A+Software+Development+%3A%3A+Libraries+%3A%3A+Python+Modules\">            Software Development :: Libraries :: Python Modules          </a>        </li>        <li>          <a href=\"/search/?c=Topic+%3A%3A+Text+Processing+%3A%3A+Linguistic\">            Text Processing :: Linguistic          </a>        </li>      </ul>    </li>  </ul></div>          <br>        </div>        <div id=\"history\" data-project-tabs-target=\"content\" class=\"vertical-tabs__content\" role=\"tabpanel\" aria-labelledby=\"history-tab mobile-history-tab\" tabindex=\"-1\">          <h2 class=\"page-title split-layout\">            <span>Release history</span>            <span class=\"reset-text margin-top\">              <a href=\"/help/#project-release-notifications\">Release notifications</a> |              <a href=\"/rss/project/pyleri/releases.xml\">RSS feed <i class=\"fa fa-rss\" aria-hidden=\"true\"></i></a>            </span>          </h2>          <div class=\"release-timeline\">            <div class=\"release release--latest release--current\">              <div class=\"release__meta\">                <span class=\"badge\">This version</span>              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/blue-cube.572a5bfb.svg\">              </div>              <a class=\"card release__card\" href=\"/project/pyleri/1.4.2/\">                <p class=\"release__version\">                  1.4.2                </p>                <p class=\"release__version-date\">                  <time datetime=\"2023-03-16T08:51:04+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Mar 16, 2023</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/pyleri/1.4.1/\">                <p class=\"release__version\">                  1.4.1                </p>                <p class=\"release__version-date\">                  <time datetime=\"2022-07-23T19:15:01+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Jul 23, 2022</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/pyleri/1.4.0/\">                <p class=\"release__version\">                  1.4.0                </p>                <p class=\"release__version-date\">                  <time datetime=\"2022-07-23T16:28:14+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Jul 23, 2022</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/pyleri/1.3.4/\">                <p class=\"release__version\">                  1.3.4                </p>                <p class=\"release__version-date\">                  <time datetime=\"2021-08-10T11:15:41+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Aug 10, 2021</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/pyleri/1.3.3/\">                <p class=\"release__version\">                  1.3.3                </p>                <p class=\"release__version-date\">                  <time datetime=\"2020-12-01T20:37:14+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Dec 1, 2020</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/pyleri/1.3.2/\">                <p class=\"release__version\">                  1.3.2                </p>                <p class=\"release__version-date\">                  <time datetime=\"2018-10-29T10:01:20+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Oct 29, 2018</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/pyleri/1.3.1/\">                <p class=\"release__version\">                  1.3.1                </p>                <p class=\"release__version-date\">                  <time datetime=\"2018-10-25T20:02:26+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Oct 25, 2018</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/pyleri/1.3.0/\">                <p class=\"release__version\">                  1.3.0                </p>                <p class=\"release__version-date\">                  <time datetime=\"2018-10-15T14:26:59+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Oct 15, 2018</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/pyleri/1.2.2/\">                <p class=\"release__version\">                  1.2.2                </p>                <p class=\"release__version-date\">                  <time datetime=\"2018-07-09T11:19:14+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Jul 9, 2018</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/pyleri/1.2.1/\">                <p class=\"release__version\">                  1.2.1                </p>                <p class=\"release__version-date\">                  <time datetime=\"2018-07-05T15:58:34+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Jul 5, 2018</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/pyleri/1.2.0/\">                <p class=\"release__version\">                  1.2.0                </p>                <p class=\"release__version-date\">                  <time datetime=\"2018-07-05T14:28:10+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Jul 5, 2018</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/pyleri/1.1.8/\">                <p class=\"release__version\">                  1.1.8                </p>                <p class=\"release__version-date\">                  <time datetime=\"2017-06-23T08:26:55+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Jun 23, 2017</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/pyleri/1.1.7/\">                <p class=\"release__version\">                  1.1.7                </p>                <p class=\"release__version-date\">                  <time datetime=\"2017-06-22T13:16:38+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Jun 22, 2017</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/pyleri/1.1.6/\">                <p class=\"release__version\">                  1.1.6                </p>                <p class=\"release__version-date\">                  <time datetime=\"2017-06-20T20:15:28+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Jun 20, 2017</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/pyleri/1.1.5/\">                <p class=\"release__version\">                  1.1.5                </p>                <p class=\"release__version-date\">                  <time datetime=\"2017-03-13T20:42:03+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Mar 13, 2017</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/pyleri/1.1.4/\">                <p class=\"release__version\">                  1.1.4                </p>                <p class=\"release__version-date\">                  <time datetime=\"2016-10-25T07:35:58+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Oct 25, 2016</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/pyleri/1.1.3/\">                <p class=\"release__version\">                  1.1.3                </p>                <p class=\"release__version-date\">                  <time datetime=\"2016-10-24T12:10:39+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Oct 24, 2016</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/pyleri/1.1.2/\">                <p class=\"release__version\">                  1.1.2                </p>                <p class=\"release__version-date\">                  <time datetime=\"2016-05-23T08:11:47+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  May 23, 2016</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/pyleri/1.1.0/\">                <p class=\"release__version\">                  1.1.0                </p>                <p class=\"release__version-date\">                  <time datetime=\"2016-05-20T08:40:36+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  May 20, 2016</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/pyleri/1.0.9/\">                <p class=\"release__version\">                  1.0.9                </p>                <p class=\"release__version-date\">                  <time datetime=\"2016-05-09T10:23:36+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  May 9, 2016</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/pyleri/1.0.8/\">                <p class=\"release__version\">                  1.0.8                </p>                <p class=\"release__version-date\">                  <time datetime=\"2016-02-19T09:29:18+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Feb 19, 2016</time>                </p>              </a>            </div>            <div class=\"release release--oldest\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/pyleri/1.0.6/\">                <p class=\"release__version\">                  1.0.6                </p>                <p class=\"release__version-date\">                  <time datetime=\"2016-02-18T20:46:53+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Feb 18, 2016</time>                </p>              </a>            </div>          </div>        </div>          <div id=\"files\" data-project-tabs-target=\"content\" class=\"vertical-tabs__content\" role=\"tabpanel\" aria-labelledby=\"files-tab mobile-files-tab\" tabindex=\"-1\">            <h2 class=\"page-title\">Download files</h2>            <p>Download the file for your platform. If you're not sure which to choose, learn more about <a href=\"https://packaging.python.org/tutorials/installing-packages/\" title=\"External link\" target=\"_blank\" rel=\"noopener\">installing packages</a>.</p>            <h3>Source Distribution            </h3>                  <div class=\"file\">      <div class=\"file__graphic\">        <i class=\"far fa-file\" aria-hidden=\"true\"></i>      </div>      <div class=\"card file__card\">        <a href=\"https://files.pythonhosted.org/packages/0e/94/fa146d2de46b78237562373a2bb9277d69e4149738a11b69c1f42ca64c33/pyleri-1.4.2.tar.gz\">          pyleri-1.4.2.tar.gz        </a>        (36.5 kB        <a href=\"#copy-hash-modal-3b80f2a7-0f6a-4e41-a3f2-d153106a5840\">view hashes</a>)        <p class=\"file__meta\">          Uploaded <time datetime=\"2023-03-16T08:51:04+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Mar 16, 2023</time>          <code>source</code>        </p>      </div>    </div>          </div><div id=\"copy-hash-modal-3b80f2a7-0f6a-4e41-a3f2-d153106a5840\" class=\"modal modal--wide\">  <div class=\"modal__content\" role=\"dialog\">    <a href=\"#modal-close\" title=\"Close\" class=\"modal__close\">      <i class=\"fa fa-times\" aria-hidden=\"true\"></i>      <span class=\"sr-only\">Close</span>    </a>    <div class=\"modal__body\">      <h3 class=\"modal__title\"><a href=\"https://pip.pypa.io/en/stable/topics/secure-installs/#hash-checking-mode\" title=\"External link\" target=\"_blank\" rel=\"noopener\">Hashes</a> for pyleri-1.4.2.tar.gz      </h3>      <table class=\"table table--hashes\">        <caption class=\"sr-only\">Hashes for pyleri-1.4.2.tar.gz</caption>        <thead>          <tr>            <th scope=\"col\">Algorithm</th>            <th scope=\"col\">Hash digest</th>            <th></th>          </tr>        </thead>        <tbody>          <tr data-controller=\"clipboard\">            <th scope=\"row\">SHA256</th>            <td><code data-clipboard-target=\"source\">18b92f631567c3c0dc6a9288aa9abc5706a8c1e0bd48d33fea0401eec02f2e63</code></td>            <td class=\"table__align-right\">              <button type=\"button\" class=\"button button--small copy-tooltip copy-tooltip-w\" data-action=\"clipboard#copy\" data-clipboard-target=\"tooltip\" data-clipboard-tooltip-value=\"Copy to clipboard\">Copy              </button>            </td>          </tr>          <tr data-controller=\"clipboard\">            <th scope=\"row\">MD5</th>            <td><code data-clipboard-target=\"source\">85ff5d78232b471be09cf21860c30c5c</code></td>            <td class=\"table__align-right\">              <button type=\"button\" class=\"button button--small copy-tooltip copy-tooltip-w\" data-action=\"clipboard#copy\" data-clipboard-target=\"tooltip\" data-clipboard-tooltip-value=\"Copy to clipboard\">Copy              </button>            </td>          </tr>          <tr data-controller=\"clipboard\">            <th scope=\"row\">BLAKE2b-256</th>            <td><code data-clipboard-target=\"source\">0e94fa146d2de46b78237562373a2bb9277d69e4149738a11b69c1f42ca64c33</code></td>            <td class=\"table__align-right\">              <button type=\"button\" class=\"button button--small copy-tooltip copy-tooltip-w\" data-action=\"clipboard#copy\" data-clipboard-target=\"tooltip\" data-clipboard-tooltip-value=\"Copy to clipboard\">Copy              </button>            </td>          </tr>        </tbody>      </table>    </div>    <div class=\"modal__footer\">      <a href=\"#modal-close\" class=\"button button--primary modal__action\">Close</a>    </div>  </div></div>      </div>    </div>  </div></div>    </main>    <footer class=\"footer\">      <div class=\"footer__logo\">        <img src=\"/static/images/white-cube.2351a86c.svg\" alt=\"\" class=\"-js-white-cube\">      </div>      <div class=\"footer__menus\">        <div class=\"footer__menu\">          <h2>Help</h2>          <nav aria-label=\"Help navigation\">            <ul>              <li><a href=\"https://packaging.python.org/tutorials/installing-packages/\" title=\"External link\" target=\"_blank\" rel=\"noopener\">Installing packages</a></li>              <li><a href=\"https://packaging.python.org/tutorials/packaging-projects/\" title=\"External link\" target=\"_blank\" rel=\"noopener\">Uploading packages</a></li>              <li><a href=\"https://packaging.python.org/\" title=\"External link\" target=\"_blank\" rel=\"noopener\">User guide</a></li>              <li><a href=\"https://www.python.org/dev/peps/pep-0541/\" title=\"External link\" target=\"_blank\" rel=\"noopener\">Project name retention</a></li>              <li><a href=\"/help/\">FAQs</a></li>            </ul>          </nav>        </div>        <div class=\"footer__menu\">          <h2>About PyPI</h2>          <nav aria-label=\"About PyPI navigation\">            <ul>              <li><a href=\"https://twitter.com/PyPI\" title=\"External link\" target=\"_blank\" rel=\"noopener\">PyPI on Twitter</a></li>              <li><a href=\"https://dtdg.co/pypi\" title=\"External link\" target=\"_blank\" rel=\"noopener\">Infrastructure dashboard</a></li>              <li><a href=\"/stats/\">Statistics</a></li>              <li><a href=\"/trademarks/\">Logos & trademarks</a></li>              <li><a href=\"/sponsors/\">Our sponsors</a></li>            </ul>          </nav>        </div>        <div class=\"footer__menu\">          <h2>Contributing to PyPI</h2>          <nav aria-label=\"How to contribute navigation\">            <ul>              <li><a href=\"/help/#feedback\">Bugs and feedback</a></li>              <li><a href=\"https://github.com/pypi/warehouse\" title=\"External link\" target=\"_blank\" rel=\"noopener\">Contribute on GitHub</a></li>              <li><a href=\"https://hosted.weblate.org/projects/pypa/warehouse/\" title=\"External link\" target=\"_blank\" rel=\"noopener\">Translate PyPI</a></li>              <li><a href=\"/sponsors/\">Sponsor PyPI</a></li>              <li><a href=\"https://github.com/pypi/warehouse/graphs/contributors\" title=\"External link\" target=\"_blank\" rel=\"noopener\">Development credits</a></li>            </ul>          </nav>        </div>        <div class=\"footer__menu\">          <h2>Using PyPI</h2>          <nav aria-label=\"Using PyPI navigation\">            <ul>              <li><a href=\"https://github.com/pypa/.github/blob/main/CODE_OF_CONDUCT.md\" title=\"External link\" target=\"_blank\" rel=\"noopener\">Code of conduct</a></li>              <li><a href=\"/security/\">Report security issue</a></li>              <li><a href=\"https://www.python.org/privacy/\" title=\"External link\" target=\"_blank\" rel=\"noopener\">Privacy policy</a></li>              <li><a href=\"/policy/terms-of-use/\">Terms of use</a></li>              <li><a href=\"/policy/acceptable-use-policy/\">Acceptable Use Policy</a></li>            </ul>          </nav>        </div>      </div>      <hr class=\"footer__divider\">      <div class=\"footer__text\">        <p>Status:<a href=\"https://status.python.org/\" title=\"External link\" target=\"_blank\" rel=\"noopener\">          <span data-statuspage-domain=\"https://2p66nmmycsj3.statuspage.io\">all systems operational</span></a>        </p>        <p>Developed and maintained by the Python community, for the Python community.          <br>          <a href=\"https://donate.pypi.org\">Donate today!</a>        </p>        <p>          \"PyPI\", \"Python Package Index\", and the blocks logos are registered <a href=\"/trademarks/\">trademarks</a> of the <a href=\"https://python.org/psf-landing\" target=\"_blank\" rel=\"noopener\">Python Software Foundation</a>.<br>        </p>        <p>          \u00a9 2024 <a href=\"https://www.python.org/psf-landing/\" title=\"External link\" target=\"_blank\" rel=\"noopener\">Python Software Foundation</a><br>          <a href=\"/sitemap/\">Site map</a>        </p>      </div>      <div class=\"centered hide-on-desktop\">        <button type=\"button\" class=\"button button--switch-to-desktop hidden\" data-viewport-toggle-target=\"switchToDesktop\" data-action=\"viewport-toggle#switchToDesktop\">Switch to desktop version        </button>      </div>    </footer>    <div class=\"language-switcher\">      <form action=\"/locale/\">        <ul>          <li>            <button              class=\"language-switcher__selected\"              name=\"locale_id\" value=\"en\" type=\"submit\"            >              English            </button>          </li>          <li>            <button              name=\"locale_id\" value=\"es\" type=\"submit\"            >              espa\u00f1ol            </button>          </li>          <li>            <button              name=\"locale_id\" value=\"fr\" type=\"submit\"            >              fran\u00e7ais            </button>          </li>          <li>            <button              name=\"locale_id\" value=\"ja\" type=\"submit\"            >              \u65e5\u672c\u8a9e            </button>          </li>          <li>            <button              name=\"locale_id\" value=\"pt_BR\" type=\"submit\"            >              portugu\u00eas (Brasil)            </button>          </li>          <li>            <button              name=\"locale_id\" value=\"uk\" type=\"submit\"            >              \u0443\u043a\u0440\u0430\u0457\u043d\u0441\u044c\u043a\u0430            </button>          </li>          <li>            <button              name=\"locale_id\" value=\"el\" type=\"submit\"            >              \u0395\u03bb\u03bb\u03b7\u03bd\u03b9\u03ba\u03ac            </button>          </li>          <li>            <button              name=\"locale_id\" value=\"de\" type=\"submit\"            >              Deutsch            </button>          </li>          <li>            <button              name=\"locale_id\" value=\"zh_Hans\" type=\"submit\"            >              \u4e2d\u6587 (\u7b80\u4f53)            </button>          </li>          <li>            <button              name=\"locale_id\" value=\"zh_Hant\" type=\"submit\"            >              \u4e2d\u6587 (\u7e41\u9ad4)            </button>          </li>          <li>            <button              name=\"locale_id\" value=\"ru\" type=\"submit\"            >              \u0440\u0443\u0441\u0441\u043a\u0438\u0439            </button>          </li>          <li>            <button              name=\"locale_id\" value=\"he\" type=\"submit\"            >              \u05e2\u05d1\u05e8\u05d9\u05ea            </button>          </li>          <li>            <button              name=\"locale_id\" value=\"eo\" type=\"submit\"            >              esperanto            </button>          </li>        </ul>      </form>    </div><div class=\"sponsors\">  <p class=\"sponsors__title\">Supported by</p>  <div class=\"sponsors__divider\"></div>        <a class=\"sponsors__sponsor\" target=\"_blank\" rel=\"noopener\" href=\"https://aws.amazon.com/\">          <img class=sponsors__image src=\"https://pypi-camo.freetls.fastly.net/ed7074cadad1a06f56bc520ad9bd3e00d0704c5b/68747470733a2f2f73746f726167652e676f6f676c65617069732e636f6d2f707970692d6173736574732f73706f6e736f726c6f676f732f6177732d77686974652d6c6f676f2d7443615473387a432e706e67\" alt=AWS loading=lazy>          <span class=\"sponsors__name\">AWS</span>          <span class=\"sponsors__service\">            Cloud computing and Security Sponsor          </span>        </a>        <a class=\"sponsors__sponsor\" target=\"_blank\" rel=\"noopener\" href=\"https://www.datadoghq.com/\">          <img class=sponsors__image src=\"https://pypi-camo.freetls.fastly.net/8855f7c063a3bdb5b0ce8d91bfc50cf851cc5c51/68747470733a2f2f73746f726167652e676f6f676c65617069732e636f6d2f707970692d6173736574732f73706f6e736f726c6f676f732f64617461646f672d77686974652d6c6f676f2d6668644c4e666c6f2e706e67\" alt=Datadog loading=lazy>          <span class=\"sponsors__name\">Datadog</span>          <span class=\"sponsors__service\">            Monitoring          </span>        </a>        <a class=\"sponsors__sponsor\" target=\"_blank\" rel=\"noopener\" href=\"https://www.fastly.com/\">          <img class=sponsors__image src=\"https://pypi-camo.freetls.fastly.net/df6fe8829cbff2d7f668d98571df1fd011f36192/68747470733a2f2f73746f726167652e676f6f676c65617069732e636f6d2f707970692d6173736574732f73706f6e736f726c6f676f732f666173746c792d77686974652d6c6f676f2d65684d3077735f6f2e706e67\" alt=Fastly loading=lazy>          <span class=\"sponsors__name\">Fastly</span>          <span class=\"sponsors__service\">            CDN          </span>        </a>        <a class=\"sponsors__sponsor\" target=\"_blank\" rel=\"noopener\" href=\"https://careers.google.com/\">          <img class=sponsors__image src=\"https://pypi-camo.freetls.fastly.net/420cc8cf360bac879e24c923b2f50ba7d1314fb0/68747470733a2f2f73746f726167652e676f6f676c65617069732e636f6d2f707970692d6173736574732f73706f6e736f726c6f676f732f676f6f676c652d77686974652d6c6f676f2d616734424e3774332e706e67\" alt=Google loading=lazy>          <span class=\"sponsors__name\">Google</span>          <span class=\"sponsors__service\">            Download Analytics          </span>        </a>        <a class=\"sponsors__sponsor\" target=\"_blank\" rel=\"noopener\" href=\"https://www.python.org/psf/sponsors/#microsoft\">          <img class=sponsors__image src=\"https://pypi-camo.freetls.fastly.net/524d1ce72f7772294ca4c1fe05d21dec8fa3f8ea/68747470733a2f2f73746f726167652e676f6f676c65617069732e636f6d2f707970692d6173736574732f73706f6e736f726c6f676f732f6d6963726f736f66742d77686974652d6c6f676f2d5a443172685444462e706e67\" alt=Microsoft loading=lazy>          <span class=\"sponsors__name\">Microsoft</span>          <span class=\"sponsors__service\">            PSF Sponsor          </span>        </a>        <a class=\"sponsors__sponsor\" target=\"_blank\" rel=\"noopener\" href=\"https://www.pingdom.com/\">          <img class=sponsors__image src=\"https://pypi-camo.freetls.fastly.net/d01053c02f3a626b73ffcb06b96367fdbbf9e230/68747470733a2f2f73746f726167652e676f6f676c65617069732e636f6d2f707970692d6173736574732f73706f6e736f726c6f676f732f70696e67646f6d2d77686974652d6c6f676f2d67355831547546362e706e67\" alt=Pingdom loading=lazy>          <span class=\"sponsors__name\">Pingdom</span>          <span class=\"sponsors__service\">            Monitoring          </span>        </a>        <a class=\"sponsors__sponsor\" target=\"_blank\" rel=\"noopener\" href=\"https://getsentry.com/for/python\">          <img class=sponsors__image src=\"https://pypi-camo.freetls.fastly.net/67af7117035e2345bacb5a82e9aa8b5b3e70701d/68747470733a2f2f73746f726167652e676f6f676c65617069732e636f6d2f707970692d6173736574732f73706f6e736f726c6f676f732f73656e7472792d77686974652d6c6f676f2d4a2d6b64742d706e2e706e67\" alt=Sentry loading=lazy>          <span class=\"sponsors__name\">Sentry</span>          <span class=\"sponsors__service\">            Error logging          </span>        </a>        <a class=\"sponsors__sponsor\" target=\"_blank\" rel=\"noopener\" href=\"https://statuspage.io\">          <img class=sponsors__image src=\"https://pypi-camo.freetls.fastly.net/b611884ff90435a0575dbab7d9b0d3e60f136466/68747470733a2f2f73746f726167652e676f6f676c65617069732e636f6d2f707970692d6173736574732f73706f6e736f726c6f676f732f737461747573706167652d77686974652d6c6f676f2d5467476c6a4a2d502e706e67\" alt=StatusPage loading=lazy>          <span class=\"sponsors__name\">StatusPage</span>          <span class=\"sponsors__service\">            Status page          </span>        </a></div>  </body></html>",
  "embeddings": []
}
{
  "libtype": "pypi",
  "libname": "pymatting",
  "url": "https://pymatting.github.io",
  "html": "<!DOCTYPE html><html lang=\"en\"><head><meta charset=\"utf-8\" /><title>PyMatting \u2014 PyMatting 1.1.10 documentation</title><link rel=\"stylesheet\" href=\"/katex.min.css\"><link rel=\"stylesheet\" href=\"/style.css\"><script src=\"/katex.min.js\"></script></head><body><div class=\"sidebar\"><div class=\"logo\"><a href=\"/\" class=\"sidebarlink\"><img src=\"/figures/lemur_small.png\" width=\"50px\"></a><a href=\"/\" class=\"logotext\">PyMatting</a></div><div class=\"sidebarcontents\">CONTENTS</div><ul><li><a href=\"/index.html\" class=\"sidebarlink currentpage\">PyMatting</a></li><li class=\"sidebarlink\"><a href=\"/api.html\" class=\"sidebarlink\">API Reference</a><br><ul><li><a href=\"/alpha.html\" class=\"sidebarlink\">Alpha Estimation</a></li><li><a href=\"/cutout.html\" class=\"sidebarlink\">Cutout Function</a></li><li><a href=\"/foreground.html\" class=\"sidebarlink\">Foreground Estimation</a></li><li><a href=\"/laplacian.html\" class=\"sidebarlink\">Matting Laplacians</a></li><li><a href=\"/preconditioner.html\" class=\"sidebarlink\">Preconditioners</a></li><li><a href=\"/solver.html\" class=\"sidebarlink\">Solvers</a></li><li><a href=\"/util.html\" class=\"sidebarlink\">Utility Functions</a></li></ul></li><li><a href=\"/examples.html\" class=\"sidebarlink\">Examples</a></li><li><a href=\"/benchmarks.html\" class=\"sidebarlink\">Benchmarks</a></li><li><a href=\"/references.html\" class=\"sidebarlink\">Biblography</a></li><li><a href=\"https://pypi.org/project/PyMatting/\" class=\"sidebarlink\">PyPI</a></li><li><a href=\"https://www.github.com/pymatting/pymatting\" class=\"sidebarlink\">GitHub</a></li></ul></div><div class=\"middle\"><h1>PyMatting</h1><div class=\"textblock\"><span class=\"text\">PyMatting is a Python library to cut out things from an image.More specifically, PyMatting estimates an alpha matte from an input image and an input trimap.The trimap is used to specify which subject from the image should be extracted. It consists of three parts:</span></div><ol><li><span class=\"text\">White, which is 100 % foreground.</span></li><li><span class=\"text\">Black, which is 100 % background.</span></li><li><span class=\"text\">Gray, which is either foreground, background or a mix of both. PyMatting fills in the gray area of the trimap to compute the alpha matte.</span></li></ol>    <div class=\"figure\">        <img src=\"/figures/lemur_at_the_beach.png\">        <div class=\"caption\">Figure 1: Input image, input trimap, estimated alpha and extracted foreground. </div>    </div><h2><span class=\"text\">Installation</span></h2><div class=\"textblock\"><span class=\"text\">To install PyMatting, simply run:</span></div><div class=\"code_block\"><div class=\"codeblock\"><span class=name>git</span><span class=space> </span><span class=name>clone</span><span class=space> </span><span class=name>https</span><span class=operator>:</span><span class=operator>/</span><span class=operator>/</span><span class=name>github</span><span class=operator>.</span><span class=name>com</span><span class=operator>/</span><span class=name>pymatting</span><span class=operator>/</span><span class=name>pymatting</span><span class=space></span><span class=name>cd</span><span class=space> </span><span class=name>pymatting</span><span class=space></span><span class=name>pip3</span><span class=space> </span><span class=name>install</span><span class=space> </span><span class=operator>.</span></div></div><h2><span class=\"text\">Testing</span></h2><div class=\"textblock\"><span class=\"text\">Run the tests from the main directory:</span></div><div class=\"code_block\"><div class=\"codeblock\"><span class=name>python3</span><span class=space> </span><span class=name>tests</span><span class=operator>/</span><span class=name>download_images</span><span class=operator>.</span><span class=name>py</span><span class=space></span><span class=name>pip3</span><span class=space> </span><span class=name>install</span><span class=space> </span><span class=operator>-</span><span class=name>r</span><span class=space> </span><span class=name>requirements_tests</span><span class=operator>.</span><span class=name>txt</span><span class=space></span><span class=name>pytest</span></div></div><div class=\"textblock\"><span class=\"text\">A warning will be thrown if PyOpenCL or CuPy are not available.</span></div><h2><span class=\"text\">Requirements</span></h2><ul><li><span class=\"text\">numpy&gt;=1.16.0</span></li><li><span class=\"text\">pillow&gt;=5.2.0</span></li><li><span class=\"text\">numba&gt;=0.44.0</span></li><li><span class=\"text\">scipy&gt;=1.1.0</span></li></ul><h2><span class=\"text\">Additional Requirements (for GPU support)</span></h2><ul><li><span class=\"text\">cupy-cuda90&gt;=6.5.0 or similar</span></li><li><span class=\"text\">pyopencl&gt;=2019.1.2</span></li></ul><h2><span class=\"text\">Alpha Matting</span></h2><div class=\"textblock\"><span class=\"text\">For an image </span><span class=\"inline_math\">\\(I\\)</span><span class=\"text\"> with foreground pixels </span><span class=\"inline_math\">\\(F\\)</span><span class=\"text\"> and background </span><span class=\"inline_math\">\\(B\\)</span><span class=\"text\"> the alpha matting problem aims to determine opacities </span><span class=\"inline_math\">\\(\\alpha\\)</span><span class=\"text\">, such that the equality</span></div><div class=\"math_block\">$$   I = \\alpha F +(1-\\alpha)B$$</div><div class=\"textblock\"><span class=\"text\">holds. This problem is inherently ill-posed since for each pixel we have three equations with seven unknown variables. The alpha matte </span><span class=\"inline_math\">\\(\\alpha\\)</span><span class=\"text\"> determine how much a pixel contributes to the foreground and how much to the background of an image.</span></div><div class=\"textblock\"><span class=\"text\">After estimating the alpha matte </span><span class=\"inline_math\">\\(\\alpha\\)</span><span class=\"text\"> the foreground pixels and background pixels can be estimated. We refer to this process as foreground estimation.</span></div><div class=\"textblock\"><span class=\"text\">To estimate the alpha matte Pymatting implements the following methods:</span></div><ul><li><span class=\"text\">Closed-form matting </span><span class=\"citation\"><a href=\"/references.html#LLW07\">[LLW07]</a></span></li><li><span class=\"text\">KNN matting </span><span class=\"citation\"><a href=\"/references.html#CLT13\">[CLT13]</a></span></li><li><span class=\"text\">Large kernel matting </span><span class=\"citation\"><a href=\"/references.html#HST10\">[HST10]</a></span></li><li><span class=\"text\">Learning-based matting </span><span class=\"citation\"><a href=\"/references.html#ZK09\">[ZK09]</a></span></li><li><span class=\"text\">Random-walk matting </span><span class=\"citation\"><a href=\"/references.html#GSAW05\">[GSAW05]</a></span></li><li><span class=\"text\">Shared matting </span><span class=\"citation\"><a href=\"/references.html#GO10\">[GO10]</a></span></li></ul><h2><span class=\"text\">Foreground Extraction</span></h2><div class=\"textblock\"><span class=\"text\">Simply multiplying the alpha matte with the input image results in halo artifacts. This motivates the development of foreground extraction methods.</span></div>    <div class=\"figure\">        <img src=\"/figures/lemur_color_bleeding.png\">        <div class=\"caption\">Figure 2: Input image naively composed onto a grey background (left) and extracted foreground placed onto the same background (right).</div>    </div><div class=\"textblock\"><span class=\"text\">The following foreground estimation methods are implemented in PyMatting:</span></div><ul><li><span class=\"text\">Closed-form foreground estimation </span><span class=\"citation\"><a href=\"/references.html#LLW07\">[LLW07]</a></span></li><li><span class=\"text\">Fast multi-level foreground estimation </span><span class=\"citation\"><a href=\"/references.html#GUCH20\">[GUCH20]</a></span></li></ul><h2><span class=\"text\">Thanks</span></h2><div class=\"textblock\"><span class=\"text\">We thank Mathias Appel for </span><a href=\"https://www.flickr.com/photos/mathiasappel/25419442300/\"><span class=\"text\">his lemur photo</span></a><span class=\"text\">, licensed under </span><a href=\"https://creativecommons.org/publicdomain/zero/1.0/\"><span class=\"text\">CC0 1.0 Universal (CC0 1.0) Public Domain License</span></a><span class=\"text\">.</span></div><footer>\u00a9 Copyright 2023, Thomas Germer, Tobias Uelwer, Stefan Conrad, Stefan Harmeling</footer></div><script src=\"/auto-render.min.js\" onload=\"renderMathInElement(document.body)\"></script></body></html>",
  "embeddings": []
}
{
  "libtype": "pypi",
  "libname": "html5-parser",
  "url": "https://html5-parser.readthedocs.io",
  "html": "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"  \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\"><html xmlns=\"http://www.w3.org/1999/xhtml\" lang=\"en\">  <head>    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=Edge\" />    <meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />    <title>html5-parser &#8212; html5-quickstart  documentation</title>    <link rel=\"stylesheet\" href=\"_static/alabaster.css\" type=\"text/css\" />    <link rel=\"stylesheet\" href=\"_static/pygments.css\" type=\"text/css\" />    <link rel=\"stylesheet\" type=\"text/css\" href=\"/_/static/css/badge_only.css\" />    <script type=\"text/javascript\" id=\"documentation_options\" data-url_root=\"./\" src=\"_static/documentation_options.js\"></script>    <script type=\"text/javascript\" src=\"_static/jquery.js\"></script>    <script type=\"text/javascript\" src=\"_static/underscore.js\"></script>    <script type=\"text/javascript\" src=\"_static/doctools.js\"></script>    <script type=\"text/javascript\" src=\"_static/language_data.js\"></script>    <script async=\"async\" type=\"text/javascript\" src=\"/_/static/javascript/readthedocs-doc-embed.js\"></script>    <link rel=\"canonical\" href=\"https://html5-parser.readthedocs.io/en/latest/index.html\" />    <link rel=\"index\" title=\"Index\" href=\"genindex.html\" />    <link rel=\"search\" title=\"Search\" href=\"search.html\" />     <link rel=\"stylesheet\" href=\"_static/custom.css\" type=\"text/css\" />      <meta name=\"viewport\" content=\"width=device-width, initial-scale=0.9, maximum-scale=0.9\" />  <!-- RTD Extra Head --><link rel=\"stylesheet\" href=\"/_/static/css/readthedocs-doc-embed.css\" type=\"text/css\" /><script type=\"application/json\" id=\"READTHEDOCS_DATA\">{\"ad_free\": false, \"api_host\": \"https://readthedocs.org\", \"build_date\": \"2023-04-12T05:09:38Z\", \"builder\": \"sphinx\", \"canonical_url\": null, \"commit\": \"ef7d4af9\", \"docroot\": \"/docs/\", \"features\": {\"docsearch_disabled\": false}, \"global_analytics_code\": \"UA-17997319-1\", \"language\": \"en\", \"page\": \"index\", \"programming_language\": \"c\", \"project\": \"html5-parser\", \"proxied_api_host\": \"/_\", \"source_suffix\": \".rst\", \"subprojects\": {}, \"theme\": \"alabaster\", \"user_analytics_code\": \"\", \"version\": \"latest\"}</script><!--Using this variable directly instead of using `JSON.parse` is deprecated.The READTHEDOCS_DATA global variable will be removed in the future.--><script type=\"text/javascript\">READTHEDOCS_DATA = JSON.parse(document.getElementById('READTHEDOCS_DATA').innerHTML);</script><script type=\"text/javascript\" src=\"/_/static/javascript/readthedocs-analytics.js\" async=\"async\"></script><!-- end RTD <extrahead> --></head><body>      <div class=\"document\">      <div class=\"documentwrapper\">        <div class=\"bodywrapper\">                    <div class=\"body\" role=\"main\">              <div class=\"section\" id=\"html5-parser\"><h1>html5-parser<a class=\"headerlink\" href=\"#html5-parser\" title=\"Permalink to this headline\">\u00b6</a></h1><p><a class=\"reference external\" href=\"https://pypi.python.org/pypi/html5-parser\"><img alt=\"Latest version released on PyPi\" src=\"https://img.shields.io/pypi/v/html5-parser.svg?label=version\" /></a> <a class=\"reference external\" href=\"https://github.com/kovidgoyal/html5-parser/actions?query=workflow%3ACI%22\"><img alt=\"Build status of the master branch\" src=\"https://github.com/kovidgoyal/html5-parser/workflows/CI/badge.svg\" /></a></p><p>A fast implementation of the <a class=\"reference external\" href=\"https://www.w3.org/TR/html5/syntax.html#parsing\">HTML 5 parsing spec</a> for Python. Parsing is donein C using a variant of the <a class=\"reference external\" href=\"https://github.com/google/gumbo-parser\">gumbo parser</a>. The gumbo parse tree is thentransformed into an <a class=\"reference external\" href=\"http://lxml.de/\">lxml</a> tree, also in C, yielding parsetimes that can be <strong>a thirtieth</strong> of the html5lib parse times. That is aspeedup of <strong>30x</strong>. This differs, for instance, from the gumbo python bindings,where the initial parsing is done in C but the transformation into the finaltree is done in python.</p><div class=\"section\" id=\"installation\"><h2>Installation<a class=\"headerlink\" href=\"#installation\" title=\"Permalink to this headline\">\u00b6</a></h2><div class=\"section\" id=\"unix\"><h3>Unix<a class=\"headerlink\" href=\"#unix\" title=\"Permalink to this headline\">\u00b6</a></h3><p>On a Unix-y system, with a working C99 compiler, simply run:</p><div class=\"highlight-bash notranslate\"><div class=\"highlight\"><pre><span></span>pip install --no-binary lxml html5-parser</pre></div></div><p>It is important that lxml is installed with the <code class=\"docutils literal notranslate\"><span class=\"pre\">--no-binary</span></code> flag. This isbecause without it, lxml uses a static copy of libxml2. For html5-parser towork it must use the same libxml2 implementation as lxml. This is only possibleif libxml2 is loaded dynamically.</p><p>You can setup html5-parser to run from a source checkout as follows:</p><div class=\"highlight-bash notranslate\"><div class=\"highlight\"><pre><span></span>git clone https://github.com/kovidgoyal/html5-parser <span class=\"o\">&amp;&amp;</span> <span class=\"nb\">cd</span> html5-parserpip install --no-binary lxml <span class=\"s1\">&#39;lxml&gt;=3.8.0&#39;</span> --userpython setup.py develop --user</pre></div></div></div><div class=\"section\" id=\"windows\"><h3>Windows<a class=\"headerlink\" href=\"#windows\" title=\"Permalink to this headline\">\u00b6</a></h3><p>On Windows, installation is a little more involved. There is a 200 line scriptthat is used to install html5-parser and all its dependencies on the windowscontinuous integration server. Using that script installation can be done byrunning the following commands in a Visual Studio 2015 Command prompt:</p><div class=\"highlight-bat notranslate\"><div class=\"highlight\"><pre><span></span>python.exe win-ci.py install_depspython.exe win-ci.py test</pre></div></div><p>This will install all dependencies and html5-parser in the <code class=\"file docutils literal notranslate\"><span class=\"pre\">sw</span></code>sub-directory. You will need to add <code class=\"file docutils literal notranslate\"><span class=\"pre\">sw\\bin</span></code> to <span class=\"target\" id=\"index-0\"></span><code class=\"xref std std-envvar docutils literal notranslate\"><span class=\"pre\">PATH</span></code> and<code class=\"file docutils literal notranslate\"><span class=\"pre\">sw\\python\\Lib\\site-packages</span></code> to <span class=\"target\" id=\"index-1\"></span><a class=\"reference external\" href=\"https://docs.python.org/3/using/cmdline.html#envvar-PYTHONPATH\" title=\"(in Python v3.11)\"><code class=\"xref std std-envvar docutils literal notranslate\"><span class=\"pre\">PYTHONPATH</span></code></a>. Or copy the filesinto your system python\u2019s directories.</p></div></div><div class=\"section\" id=\"quickstart\"><h2>Quickstart<a class=\"headerlink\" href=\"#quickstart\" title=\"Permalink to this headline\">\u00b6</a></h2><p>To use html5-parser in your code, after installing it simply do:</p><div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">html5_parser</span> <span class=\"kn\">import</span> <span class=\"n\">parse</span><span class=\"kn\">from</span> <span class=\"nn\">lxml.etree</span> <span class=\"kn\">import</span> <span class=\"n\">tostring</span><span class=\"n\">root</span> <span class=\"o\">=</span> <span class=\"n\">parse</span><span class=\"p\">(</span><span class=\"n\">some_html</span><span class=\"p\">)</span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">tostring</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"p\">))</span></pre></div></div><p>See the <a class=\"reference internal\" href=\"#html5_parser.parse\" title=\"html5_parser.parse\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">html5_parser.parse()</span></code></a> function documentation for more details onparsing. To learn how to use the parsed lxml tree in your program, seethe <a class=\"reference external\" href=\"http://lxml.de/tutorial.html\">lxml tutorial</a>.</p></div><div class=\"section\" id=\"xhtml-1\"><span id=\"xhtml\"></span><h2>XHTML<a class=\"headerlink\" href=\"#xhtml-1\" title=\"Permalink to this headline\">\u00b6</a></h2><p>html5-parser has the ability to parse XHTML documents as well. It willpreserve namespace information even for namespaces not defined in the HTML 5spec. You can ask it to treat the input html as possibly XHTML by using the<code class=\"docutils literal notranslate\"><span class=\"pre\">maybe_xhtml</span></code> parameter to the <a class=\"reference internal\" href=\"#html5_parser.parse\" title=\"html5_parser.parse\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">html5_parser.parse()</span></code></a> function. For example:</p><div class=\"highlight-html notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"p\">&lt;</span><span class=\"nt\">p</span> <span class=\"na\">xmlns:n</span><span class=\"o\">=</span><span class=\"s\">&quot;my namespace&quot;</span><span class=\"p\">&gt;&lt;</span><span class=\"nt\">n:tag</span> <span class=\"na\">n:attr</span><span class=\"o\">=</span><span class=\"s\">&quot;a&quot;</span> <span class=\"p\">/&gt;</span></pre></div></div><p>becomes</p><div class=\"highlight-html notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"p\">&lt;</span><span class=\"nt\">html</span><span class=\"p\">&gt;</span>    <span class=\"p\">&lt;</span><span class=\"nt\">head</span><span class=\"p\">/&gt;</span>    <span class=\"p\">&lt;</span><span class=\"nt\">body</span><span class=\"p\">&gt;</span>        <span class=\"p\">&lt;</span><span class=\"nt\">p</span> <span class=\"na\">xmlns:n</span><span class=\"o\">=</span><span class=\"s\">&quot;my namespace&quot;</span><span class=\"p\">&gt;</span>            <span class=\"p\">&lt;</span><span class=\"nt\">n:tag</span> <span class=\"na\">n:attr</span><span class=\"o\">=</span><span class=\"s\">&quot;a&quot;</span><span class=\"p\">/&gt;</span>        <span class=\"p\">&lt;/</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span>    <span class=\"p\">&lt;/</span><span class=\"nt\">body</span><span class=\"p\">&gt;</span><span class=\"p\">&lt;/</span><span class=\"nt\">html</span><span class=\"p\">&gt;</span></pre></div></div><p>This is useful when try to parse a XHTML document that is not well-formed andso cannot be parsed by a regular XML parser.</p></div><div class=\"section\" id=\"api-documentation\"><h2>API documentation<a class=\"headerlink\" href=\"#api-documentation\" title=\"Permalink to this headline\">\u00b6</a></h2><p>The API of html5-parser is a single function, <code class=\"docutils literal notranslate\"><span class=\"pre\">parse()</span></code>.</p><dl class=\"function\"><dt id=\"html5_parser.parse\"><code class=\"descclassname\">html5_parser.</code><code class=\"descname\">parse</code><span class=\"sig-paren\">(</span><em>html</em>, <em>transport_encoding=None</em>, <em>namespace_elements=False</em>, <em>treebuilder=u'lxml'</em>, <em>fallback_encoding=None</em>, <em>keep_doctype=True</em>, <em>maybe_xhtml=False</em>, <em>return_root=True</em>, <em>line_number_attr=None</em>, <em>sanitize_names=True</em>, <em>stack_size=16384</em>, <em>fragment_context=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#html5_parser.parse\" title=\"Permalink to this definition\">\u00b6</a></dt><dd><p>Parse the specified <code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">html</span></code> and return the parsed representation.</p><table class=\"docutils field-list\" frame=\"void\" rules=\"none\"><col class=\"field-name\" /><col class=\"field-body\" /><tbody valign=\"top\"><tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><ul class=\"first last simple\"><li><strong>html</strong> \u2013 The HTML to be parsed. Can be either bytes or a unicode string.</li><li><strong>transport_encoding</strong> \u2013 If specified, assume the passed in bytes are in this encoding.Ignored if <code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">html</span></code> is unicode.</li><li><strong>namespace_elements</strong> \u2013 Add XML namespaces when parsing so that the resulting tree is XHTML.</li><li><strong>treebuilder</strong> \u2013 <p>The type of tree to return. Note that only the lxml treebuilder is fast, as allother treebuilders are implemented in python, not C. Supported values are:</p><blockquote><div><ul><li><a class=\"reference external\" href=\"https://lxml.de\">lxml</a>  \u2013 the default, and fastest</li><li><a class=\"reference external\" href=\"https://lxml.de\">lxml_html</a>  \u2013 tree of lxml.html.HtmlElement, same speed as lxml(new in <em>0.4.10</em>)</li><li>etree (the python stdlib <a class=\"reference external\" href=\"https://docs.python.org/3/library/xml.etree.elementtree.html#module-xml.etree.ElementTree\" title=\"(in Python v3.11)\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">xml.etree.ElementTree</span></code></a>)</li><li>dom (the python stdlib <a class=\"reference external\" href=\"https://docs.python.org/3/library/xml.dom.minidom.html#module-xml.dom.minidom\" title=\"(in Python v3.11)\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">xml.dom.minidom</span></code></a>)</li><li><a class=\"reference external\" href=\"https://www.crummy.com/software/BeautifulSoup\">soup</a> \u2013 BeautifulSoup,which must be installed or it will raise an <a class=\"reference external\" href=\"https://docs.python.org/3/library/exceptions.html#ImportError\" title=\"(in Python v3.11)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ImportError</span></code></a></li></ul></div></blockquote></li><li><strong>fallback_encoding</strong> \u2013 If no encoding could be detected, then use this encoding.Defaults to an encoding based on system locale.</li><li><strong>keep_doctype</strong> \u2013 Keep the &lt;DOCTYPE&gt; (if any).</li><li><strong>maybe_xhtml</strong> \u2013 Useful when it is unknown if the HTML to be parsed isactually XHTML. Changes the HTML 5 parsing algorithm to be moresuitable for XHTML. In particular handles self-closed CDATA elements.So a <code class=\"docutils literal notranslate\"><span class=\"pre\">&lt;title/&gt;</span></code> or <code class=\"docutils literal notranslate\"><span class=\"pre\">&lt;style/&gt;</span></code> in the HTML will not completely breakparsing. Also preserves namespaced tags and attributes even for namespacesnot supported by HTML 5 (this works only with the <code class=\"docutils literal notranslate\"><span class=\"pre\">lxml</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">lxml_html</span></code>treebuilders).Note that setting this also implicitly sets <code class=\"docutils literal notranslate\"><span class=\"pre\">namespace_elements</span></code>.</li><li><strong>return_root</strong> \u2013 If True, return the root node of the document, otherwisereturn the tree object for the document.</li><li><strong>line_number_attr</strong> \u2013 The optional name of an attribute used to store the line numberof every element. If set, this attribute will be added to each element with theelement\u2019s line number.</li><li><strong>sanitize_names</strong> \u2013 Ensure tag and attributes contain only ASCII alphanumericcharactes, underscores, hyphens and periods. This ensures that the resultingtree is also valid XML. Any characters outside this set are replaced byunderscores. Note that this is not strictly HTML 5 spec compliant, so turn itoff if you need strict spec compliance.</li><li><strong>stack_size</strong> \u2013 The initial size (number of items) in the stack. Thedefault is sufficient to avoid memory allocations for all but thelargest documents.</li><li><strong>fragment_context</strong> \u2013 the tag name under which to parse the HTML when the htmlis a fragment. Common choices are <code class=\"docutils literal notranslate\"><span class=\"pre\">div</span></code> or <code class=\"docutils literal notranslate\"><span class=\"pre\">body</span></code>. To use SVG or MATHML tagsprefix the tag name with <code class=\"docutils literal notranslate\"><span class=\"pre\">svg:</span></code> or <code class=\"docutils literal notranslate\"><span class=\"pre\">math:</span></code> respectively. Note that currentlyusing a non-HTML fragment_context is not supported. New in <em>0.4.10</em>.</li></ul></td></tr></tbody></table></dd></dl></div><div class=\"section\" id=\"comparison-with-html5lib\"><h2>Comparison with html5lib<a class=\"headerlink\" href=\"#comparison-with-html5lib\" title=\"Permalink to this headline\">\u00b6</a></h2><p>Before doing the actual comparison, let me say that html5lib is a greatproject. It was a pioneer of HTML 5 parsing and I have used it myself for manyyears. However, being written in pure python, it cannot help but be slow.</p><div class=\"section\" id=\"benchmarks\"><h3>Benchmarks<a class=\"headerlink\" href=\"#benchmarks\" title=\"Permalink to this headline\">\u00b6</a></h3><p>There is a benchmark script named <a class=\"reference external\" href=\"https://github.com/kovidgoyal/html5-parser/blob/master/benchmark.py\">benchmark.py</a> thatcompares the parse times for parsing a large (~ 5.7MB) HTML document inhtml5lib and html5-parser. The results on my system (using python 3) show aspeedup of <strong>37x</strong>. The output from the script on my system is:</p><div class=\"highlight-none notranslate\"><div class=\"highlight\"><pre><span></span>Testing with HTML file of 5,956,815 bytesParsing 100 times with html5-parserhtml5-parser took an average of: 0.397 seconds to parse itParsing 10 times with html5-parser-to-souphtml5-parser-to-soup took an average of: 1.685 seconds to parse itParsing 10 times with html5libhtml5lib took an average of: 13.906 seconds to parse itParsing 10 times with BeautifulSoup-with-html5libBeautifulSoup-with-html5lib took an average of: 12.683 seconds to parse itParsing 10 times with BeautifulSoup-with-lxmlBeautifulSoup-with-lxml took an average of: 3.826 seconds to parse itResults are below. They show how much faster html5-parser is than eachspecified parser. Note that there are two additional considerations:what the final tree is and whether the parsing supports the HTML 5parsing algorithm. The most apples-to-apples comparison is when thefinal tree is lxml and HTML 5 parsing is supported by the parser beingcompared to. Note that in this case, we have the largest speedup. Inall other cases, speedup is less because of the overhead of buildingthe final tree in python instead of C or because the compared parserdoes not use the HTML 5 parsing algorithm or both.Parser            |Tree              |Supports HTML 5   |Speedup (factor)  |===============================================================================html5lib          |lxml              |yes               |35                |soup+html5lib     |BeautifulSoup     |yes               |8                 |soup+lxml.html    |BeautifulSoup     |no                |2                 |</pre></div></div><p>There is further potential for speedup. Currently the gumbo subsystem usesits own data structures to store parse results and these are converted tolibxml2 data structures in a second pass after parsing completes. By modifying gumboto use libxml2 data structures directly, there could be significant speed andmemory usage gains.</p></div><div class=\"section\" id=\"xml-namespace-handling\"><h3>XML namespace handling<a class=\"headerlink\" href=\"#xml-namespace-handling\" title=\"Permalink to this headline\">\u00b6</a></h3><p>html5lib has truly horrible handling of namespaces. There is even a source-codefile in it named <code class=\"file docutils literal notranslate\"><span class=\"pre\">_ihatexml.py</span></code>. Compare the result of parsing and prettyprinting the following simple HTML fragment (pretty printing is done via lxml in bothcases).</p><div class=\"highlight-html notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"p\">&lt;</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span>xxx<span class=\"p\">&lt;</span><span class=\"nt\">svg</span><span class=\"p\">&gt;&lt;</span><span class=\"nt\">image</span> <span class=\"na\">xlink:href</span><span class=\"o\">=</span><span class=\"s\">&quot;xxx&quot;</span><span class=\"p\">&gt;&lt;/</span><span class=\"nt\">svg</span><span class=\"p\">&gt;&lt;</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span>yyy</pre></div></div><p>With <strong>html5lib</strong>:</p><div class=\"highlight-html notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"p\">&lt;</span><span class=\"nt\">html:html</span> <span class=\"na\">xmlns:html</span><span class=\"o\">=</span><span class=\"s\">&quot;http://www.w3.org/1999/xhtml&quot;</span><span class=\"p\">&gt;</span>    <span class=\"p\">&lt;</span><span class=\"nt\">html:head</span><span class=\"p\">/&gt;</span>    <span class=\"p\">&lt;</span><span class=\"nt\">html:body</span><span class=\"p\">&gt;</span>        <span class=\"p\">&lt;</span><span class=\"nt\">html:p</span><span class=\"p\">&gt;</span>xxx<span class=\"p\">&lt;</span><span class=\"nt\">ns0:svg</span> <span class=\"na\">xmlns:ns0</span><span class=\"o\">=</span><span class=\"s\">&quot;http://www.w3.org/2000/svg&quot;</span><span class=\"p\">&gt;&lt;</span><span class=\"nt\">ns0:image</span> <span class=\"na\">xmlns:ns1</span><span class=\"o\">=</span><span class=\"s\">&quot;http://www.w3.org/1999/xlink&quot;</span> <span class=\"na\">ns1:href</span><span class=\"o\">=</span><span class=\"s\">&quot;xxx&quot;</span><span class=\"p\">/&gt;&lt;/</span><span class=\"nt\">ns0:svg</span><span class=\"p\">&gt;&lt;/</span><span class=\"nt\">html:p</span><span class=\"p\">&gt;</span>        <span class=\"p\">&lt;</span><span class=\"nt\">html:p</span><span class=\"p\">&gt;</span>yyy<span class=\"p\">&lt;/</span><span class=\"nt\">html:p</span><span class=\"p\">&gt;</span>    <span class=\"p\">&lt;/</span><span class=\"nt\">html:body</span><span class=\"p\">&gt;</span><span class=\"p\">&lt;/</span><span class=\"nt\">html:html</span><span class=\"p\">&gt;</span></pre></div></div><p>With <strong>html5-parser</strong>:</p><div class=\"highlight-html notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"p\">&lt;</span><span class=\"nt\">html</span> <span class=\"na\">xmlns</span><span class=\"o\">=</span><span class=\"s\">&quot;http://www.w3.org/1999/xhtml&quot;</span> <span class=\"na\">xmlns:xlink</span><span class=\"o\">=</span><span class=\"s\">&quot;http://www.w3.org/1999/xlink&quot;</span><span class=\"p\">&gt;</span>    <span class=\"p\">&lt;</span><span class=\"nt\">head</span><span class=\"p\">/&gt;</span>    <span class=\"p\">&lt;</span><span class=\"nt\">body</span><span class=\"p\">&gt;</span>        <span class=\"p\">&lt;</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span>xxx<span class=\"p\">&lt;</span><span class=\"nt\">svg</span> <span class=\"na\">xmlns</span><span class=\"o\">=</span><span class=\"s\">&quot;http://www.w3.org/2000/svg&quot;</span><span class=\"p\">&gt;&lt;</span><span class=\"nt\">image</span> <span class=\"na\">xlink:href</span><span class=\"o\">=</span><span class=\"s\">&quot;xxx&quot;</span><span class=\"p\">/&gt;&lt;/</span><span class=\"nt\">svg</span><span class=\"p\">&gt;&lt;/</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span>        <span class=\"p\">&lt;</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span>yyy<span class=\"p\">&lt;/</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span>    <span class=\"p\">&lt;/</span><span class=\"nt\">body</span><span class=\"p\">&gt;</span><span class=\"p\">&lt;/</span><span class=\"nt\">html</span><span class=\"p\">&gt;</span></pre></div></div><p>While both outputs are technically correct, the output produced viahtml5-parser is much easier to read and much closer to what an actual humanwould write. In particular, notice the unnecessary use of prefixes inthe html5lib output, as well as the ugly <code class=\"docutils literal notranslate\"><span class=\"pre\">ns0</span></code> anonymous prefix for the svgnamespace.</p><p>html5-parser also has the ability to optionally preserve namespace informationeven for namespaces not defined in the HTML 5 standard. See the <a class=\"reference internal\" href=\"#xhtml\"><span class=\"std std-ref\">XHTML</span></a>section for more information.</p></div></div><div class=\"section\" id=\"safety-and-correctness\"><h2>Safety and correctness<a class=\"headerlink\" href=\"#safety-and-correctness\" title=\"Permalink to this headline\">\u00b6</a></h2><p>The HTML parser is based on the <a class=\"reference external\" href=\"https://github.com/google/gumbo-parser\">gumbo parser</a> which has undergone a Googlesecurity review and been tested on 2.5 billion pages from the Google cache. Inaddition, html5-parser passes (almost) all the tests from the html5lib testsuite.</p><p>Finally, html5-parser is compiled with <code class=\"docutils literal notranslate\"><span class=\"pre\">-pedantic-errors</span> <span class=\"pre\">-Wall</span> <span class=\"pre\">-Werror</span></code> andthe test suite, consisting of thousands of tests, is run using the address andundefined behavior sanitizers. Continuous integration testing is done on threemajor OSes and four different compilers.</p></div></div>          </div>                  </div>      </div>      <div class=\"sphinxsidebar\" role=\"navigation\" aria-label=\"main navigation\">        <div class=\"sphinxsidebarwrapper\"><h1 class=\"logo\"><a href=\"#\">html5-quickstart</a></h1><p><iframe src=\"https://ghbtns.com/github-btn.html?user=kovidgoyal&repo=html5-parser&type=watch&count=true&size=large&v=2\"  allowtransparency=\"true\" frameborder=\"0\" scrolling=\"0\" width=\"200px\" height=\"35px\"></iframe></p><h3>Navigation</h3><div class=\"relations\"><h3>Related Topics</h3><ul>  <li><a href=\"#\">Documentation overview</a><ul>  </ul></li></ul></div><div id=\"searchbox\" style=\"display: none\" role=\"search\">  <h3>Quick search</h3>    <div class=\"searchformwrapper\">    <form class=\"search\" action=\"search.html\" method=\"get\">      <input type=\"text\" name=\"q\" />      <input type=\"submit\" value=\"Go\" />      <input type=\"hidden\" name=\"check_keywords\" value=\"yes\" />      <input type=\"hidden\" name=\"area\" value=\"default\" />    </form>    </div></div><script type=\"text/javascript\">$('#searchbox').show(0);</script>        </div>      </div>      <div class=\"clearer\"></div>    </div>    <div class=\"footer\">      &copy;2023, Kovid Goyal.            |      Powered by <a href=\"http://sphinx-doc.org/\">Sphinx 1.8.6</a>      &amp; <a href=\"https://github.com/bitprophet/alabaster\">Alabaster 0.7.12</a>            |      <a href=\"_sources/index.rst.txt\"          rel=\"nofollow\">Page source</a>    </div>        <a href=\"https://github.com/kovidgoyal/html5-parser\" class=\"github\">        <img style=\"position: absolute; top: 0; right: 0; border: 0;\" src=\"https://s3.amazonaws.com/github/ribbons/forkme_right_darkblue_121621.png\" alt=\"Fork me on GitHub\"  class=\"github\"/>    </a>          </body></html>",
  "embeddings": []
}
{
  "libtype": "pypi",
  "libname": "zict",
  "url": "http://zict.readthedocs.io/en/latest/",
  "html": "<!DOCTYPE html><html lang=\"en\" data-content_root=\"./\">  <head>    <meta charset=\"utf-8\" />    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" /><meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />    <title>Zict: Composable Mutable Mappings &#8212; zict 3.1.0 documentation</title>    <link rel=\"stylesheet\" type=\"text/css\" href=\"_static/pygments.css?v=fa44fd50\" />    <link rel=\"stylesheet\" type=\"text/css\" href=\"_static/alabaster.css?v=039e1c02\" />    <link rel=\"stylesheet\" type=\"text/css\" href=\"/_/static/css/badge_only.css\" />    <script src=\"_static/documentation_options.js?v=dd1205ac\"></script>    <script src=\"_static/doctools.js?v=888ff710\"></script>    <script src=\"_static/sphinx_highlight.js?v=dc90522c\"></script>    <script async=\"async\" src=\"/_/static/javascript/readthedocs-doc-embed.js\"></script>    <link rel=\"index\" title=\"Index\" href=\"genindex.html\" />    <link rel=\"search\" title=\"Search\" href=\"search.html\" />     <link rel=\"stylesheet\" href=\"_static/custom.css\" type=\"text/css\" />      <meta name=\"viewport\" content=\"width=device-width, initial-scale=0.9, maximum-scale=0.9\" />  <!-- RTD Extra Head --><link rel=\"stylesheet\" href=\"/_/static/css/readthedocs-doc-embed.css\" type=\"text/css\" /><script type=\"application/json\" id=\"READTHEDOCS_DATA\">{\"ad_free\": false, \"api_host\": \"https://readthedocs.org\", \"builder\": \"sphinx\", \"canonical_url\": null, \"docroot\": \"/doc/source/\", \"features\": {\"docsearch_disabled\": false}, \"global_analytics_code\": \"UA-17997319-1\", \"language\": \"en\", \"page\": \"index\", \"programming_language\": \"py\", \"project\": \"zict\", \"proxied_api_host\": \"/_\", \"source_suffix\": \".rst\", \"subprojects\": {}, \"theme\": \"alabaster\", \"user_analytics_code\": \"\", \"version\": \"latest\"}</script><!--Using this variable directly instead of using `JSON.parse` is deprecated.The READTHEDOCS_DATA global variable will be removed in the future.--><script type=\"text/javascript\">READTHEDOCS_DATA = JSON.parse(document.getElementById('READTHEDOCS_DATA').innerHTML);</script><script type=\"text/javascript\" src=\"/_/static/javascript/readthedocs-analytics.js\" async=\"async\"></script><!-- end RTD <extrahead> --></head><body>      <div class=\"document\">      <div class=\"documentwrapper\">        <div class=\"bodywrapper\">                    <div class=\"body\" role=\"main\">              <section id=\"zict-composable-mutable-mappings\"><h1>Zict: Composable Mutable Mappings<a class=\"headerlink\" href=\"#zict-composable-mutable-mappings\" title=\"Link to this heading\">\u00b6</a></h1><p>The dictionary / mutable mapping interface is powerful and multi-faceted.</p><ul class=\"simple\"><li><p>We store data in different locations such as in-memory, on disk, in archivefiles, etc..</p></li><li><p>We manage old data with different policies like LRU, random eviction, etc..</p></li><li><p>We might encode or transform data as it arrives or departs the dictionarythrough compression, encoding, etc..</p></li></ul><p>To this end we build abstract <code class=\"docutils literal notranslate\"><span class=\"pre\">MutableMapping</span></code> classes that consume and buildon other <code class=\"docutils literal notranslate\"><span class=\"pre\">MutableMappings</span></code>.  We can compose several of these with each otherto form intuitive interfaces over complex storage systems policies.</p><section id=\"example\"><h2>Example<a class=\"headerlink\" href=\"#example\" title=\"Link to this heading\">\u00b6</a></h2><p>In the following example we create an LRU dictionary backed by pickle-encoded,zlib-compressed, directory of files.</p><div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">pickle</span><span class=\"kn\">import</span> <span class=\"nn\">zlib</span><span class=\"kn\">from</span> <span class=\"nn\">zict</span> <span class=\"kn\">import</span> <span class=\"n\">File</span><span class=\"p\">,</span> <span class=\"n\">Func</span><span class=\"p\">,</span> <span class=\"n\">LRU</span><span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">File</span><span class=\"p\">(</span><span class=\"s1\">&#39;mydir/&#39;</span><span class=\"p\">)</span><span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">Func</span><span class=\"p\">(</span><span class=\"n\">zlib</span><span class=\"o\">.</span><span class=\"n\">compress</span><span class=\"p\">,</span> <span class=\"n\">zlib</span><span class=\"o\">.</span><span class=\"n\">decompress</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">)</span><span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"n\">Func</span><span class=\"p\">(</span><span class=\"n\">pickle</span><span class=\"o\">.</span><span class=\"n\">dumps</span><span class=\"p\">,</span> <span class=\"n\">pickle</span><span class=\"o\">.</span><span class=\"n\">loads</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">)</span><span class=\"n\">d</span> <span class=\"o\">=</span> <span class=\"n\">LRU</span><span class=\"p\">(</span><span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">)</span><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">d</span><span class=\"p\">[</span><span class=\"s1\">&#39;x&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]</span><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">d</span><span class=\"p\">[</span><span class=\"s1\">&#39;x&#39;</span><span class=\"p\">]</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]</span></pre></div></div></section><section id=\"thread-safety\"><h2>Thread-safety<a class=\"headerlink\" href=\"#thread-safety\" title=\"Link to this heading\">\u00b6</a></h2><p>Most classes in this library are thread-safe.Refer to the documentation of the individual mappings for exceptions.</p></section><section id=\"api\"><h2>API<a class=\"headerlink\" href=\"#api\" title=\"Link to this heading\">\u00b6</a></h2><p><strong>zict</strong> defines the following MutableMappings:</p><dl class=\"py class\"><dt class=\"sig sig-object py\" id=\"zict.Buffer\"><em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><span class=\"sig-prename descclassname\"><span class=\"pre\">zict.</span></span><span class=\"sig-name descname\"><span class=\"pre\">Buffer</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"pre\">fast:</span> <span class=\"pre\">MutableMapping[KT,</span> <span class=\"pre\">VT],</span> <span class=\"pre\">slow:</span> <span class=\"pre\">MutableMapping[KT,</span> <span class=\"pre\">VT],</span> <span class=\"pre\">n:</span> <span class=\"pre\">float,</span> <span class=\"pre\">weight:</span> <span class=\"pre\">Callable[[KT,</span> <span class=\"pre\">VT],</span> <span class=\"pre\">float]</span> <span class=\"pre\">=</span> <span class=\"pre\">&lt;function</span> <span class=\"pre\">Buffer.&lt;lambda&gt;&gt;,</span> <span class=\"pre\">fast_to_slow_callbacks:</span> <span class=\"pre\">Callable[[KT,</span> <span class=\"pre\">VT],</span> <span class=\"pre\">None]</span> <span class=\"pre\">|</span> <span class=\"pre\">list[Callable[[KT,</span> <span class=\"pre\">VT],</span> <span class=\"pre\">None]]</span> <span class=\"pre\">|</span> <span class=\"pre\">None</span> <span class=\"pre\">=</span> <span class=\"pre\">None,</span> <span class=\"pre\">slow_to_fast_callbacks:</span> <span class=\"pre\">Callable[[KT,</span> <span class=\"pre\">VT],</span> <span class=\"pre\">None]</span> <span class=\"pre\">|</span> <span class=\"pre\">list[Callable[[KT,</span> <span class=\"pre\">VT],</span> <span class=\"pre\">None]]</span> <span class=\"pre\">|</span> <span class=\"pre\">None</span> <span class=\"pre\">=</span> <span class=\"pre\">None</span></em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"_modules/zict/buffer.html#Buffer\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#zict.Buffer\" title=\"Link to this definition\">\u00b6</a></dt><dd><p>Buffer one dictionary on top of another</p><p>This creates a MutableMapping by combining two MutableMappings, one thatfeeds into the other when it overflows, based on an LRU mechanism.  Whenthe first evicts elements these get placed into the second. When an itemis retrieved from the second it is placed back into the first.</p><dl class=\"field-list simple\"><dt class=\"field-odd\">Parameters<span class=\"colon\">:</span></dt><dd class=\"field-odd\"><dl class=\"simple\"><dt><strong>fast: MutableMapping</strong></dt><dd></dd><dt><strong>slow: MutableMapping</strong></dt><dd></dd><dt><strong>n: float</strong></dt><dd><p>Number of elements to keep, or total weight if <code class=\"docutils literal notranslate\"><span class=\"pre\">weight</span></code> is used.</p></dd><dt><strong>weight: f(k, v) -&gt; float, optional</strong></dt><dd><p>Weight of each key/value pair (default: 1)</p></dd><dt><strong>fast_to_slow_callbacks: list of callables</strong></dt><dd><p>These functions run every time data moves from the fast to the slowmapping. They take two arguments, a key and a value.If an exception occurs during a fast_to_slow_callbacks (e.g a callback triedstoring to disk and raised a disk full error) the key will remain in the LRU.</p></dd><dt><strong>slow_to_fast_callbacks: list of callables</strong></dt><dd><p>These functions run every time data moves form the slow to the fast mapping.</p></dd></dl></dd></dl><div class=\"admonition seealso\"><p class=\"admonition-title\">See also</p><dl class=\"simple\"><dt><a class=\"reference internal\" href=\"#zict.LRU\" title=\"zict.LRU\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">LRU</span></code></a></dt><dd></dd></dl></div><p class=\"rubric\">Notes</p><p>If you call methods of this class from multiple threads, access will be fast as longas all methods of <code class=\"docutils literal notranslate\"><span class=\"pre\">fast</span></code>, plus <code class=\"docutils literal notranslate\"><span class=\"pre\">slow.__contains__</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">slow.__delitem__</span></code>, arefast. <code class=\"docutils literal notranslate\"><span class=\"pre\">slow.__getitem__</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">slow.__setitem__</span></code> and callbacks are not protectedby locks.</p><p class=\"rubric\">Examples</p><div class=\"doctest highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">fast</span> <span class=\"o\">=</span> <span class=\"p\">{}</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">slow</span> <span class=\"o\">=</span> <span class=\"n\">Func</span><span class=\"p\">(</span><span class=\"n\">dumps</span><span class=\"p\">,</span> <span class=\"n\">loads</span><span class=\"p\">,</span> <span class=\"n\">File</span><span class=\"p\">(</span><span class=\"s1\">&#39;storage/&#39;</span><span class=\"p\">))</span>  <span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">def</span> <span class=\"nf\">weight</span><span class=\"p\">(</span><span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">v</span><span class=\"p\">):</span><span class=\"gp\">... </span>    <span class=\"k\">return</span> <span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">getsizeof</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">buff</span> <span class=\"o\">=</span> <span class=\"n\">Buffer</span><span class=\"p\">(</span><span class=\"n\">fast</span><span class=\"p\">,</span> <span class=\"n\">slow</span><span class=\"p\">,</span> <span class=\"mf\">1e8</span><span class=\"p\">,</span> <span class=\"n\">weight</span><span class=\"o\">=</span><span class=\"n\">weight</span><span class=\"p\">)</span>  </pre></div></div><dl class=\"py method\"><dt class=\"sig sig-object py\" id=\"zict.Buffer.close\"><span class=\"sig-name descname\"><span class=\"pre\">close</span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span> <span class=\"sig-return\"><span class=\"sig-return-icon\">&#x2192;</span> <span class=\"sig-return-typehint\"><span class=\"pre\">None</span></span></span><a class=\"reference internal\" href=\"_modules/zict/buffer.html#Buffer.close\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#zict.Buffer.close\" title=\"Link to this definition\">\u00b6</a></dt><dd><p>Release any system resources held by this object</p></dd></dl><dl class=\"py method\"><dt class=\"sig sig-object py\" id=\"zict.Buffer.evict_until_below_target\"><span class=\"sig-name descname\"><span class=\"pre\">evict_until_below_target</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">n</span></span><span class=\"p\"><span class=\"pre\">:</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">float</span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">|</span></span><span class=\"w\"> </span><span class=\"pre\">None</span></span><span class=\"w\"> </span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"default_value\"><span class=\"pre\">None</span></span></em><span class=\"sig-paren\">)</span> <span class=\"sig-return\"><span class=\"sig-return-icon\">&#x2192;</span> <span class=\"sig-return-typehint\"><span class=\"pre\">None</span></span></span><a class=\"reference internal\" href=\"_modules/zict/buffer.html#Buffer.evict_until_below_target\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#zict.Buffer.evict_until_below_target\" title=\"Link to this definition\">\u00b6</a></dt><dd><p>Wrapper around <a class=\"reference internal\" href=\"#zict.LRU.evict_until_below_target\" title=\"zict.LRU.evict_until_below_target\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">zict.LRU.evict_until_below_target()</span></code></a>.Presented here to allow easier overriding.</p></dd></dl><dl class=\"py method\"><dt class=\"sig sig-object py\" id=\"zict.Buffer.items\"><span class=\"sig-name descname\"><span class=\"pre\">items</span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span> <span class=\"sig-return\"><span class=\"sig-return-icon\">&#x2192;</span> <span class=\"sig-return-typehint\"><span class=\"pre\">a</span> <span class=\"pre\">set-like</span> <span class=\"pre\">object</span> <span class=\"pre\">providing</span> <span class=\"pre\">a</span> <span class=\"pre\">view</span> <span class=\"pre\">on</span> <span class=\"pre\">D's</span> <span class=\"pre\">items</span></span></span><a class=\"reference internal\" href=\"_modules/zict/buffer.html#Buffer.items\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#zict.Buffer.items\" title=\"Link to this definition\">\u00b6</a></dt><dd></dd></dl><dl class=\"py property\"><dt class=\"sig sig-object py\" id=\"zict.Buffer.n\"><em class=\"property\"><span class=\"pre\">property</span><span class=\"w\"> </span></em><span class=\"sig-name descname\"><span class=\"pre\">n</span></span><em class=\"property\"><span class=\"p\"><span class=\"pre\">:</span></span><span class=\"w\"> </span><span class=\"pre\">float</span></em><a class=\"headerlink\" href=\"#zict.Buffer.n\" title=\"Link to this definition\">\u00b6</a></dt><dd><p>Maximum weight in the fast mapping before eviction happens.Can be updated; this won\u2019t trigger eviction by itself; you should call<a class=\"reference internal\" href=\"#zict.Buffer.evict_until_below_target\" title=\"zict.Buffer.evict_until_below_target\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">evict_until_below_target()</span></code></a> afterwards.</p><div class=\"admonition seealso\"><p class=\"admonition-title\">See also</p><dl class=\"simple\"><dt><a class=\"reference internal\" href=\"#zict.Buffer.offset\" title=\"zict.Buffer.offset\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">offset</span></code></a></dt><dd></dd><dt><a class=\"reference internal\" href=\"#zict.Buffer.evict_until_below_target\" title=\"zict.Buffer.evict_until_below_target\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">evict_until_below_target</span></code></a></dt><dd></dd><dt><a class=\"reference internal\" href=\"#zict.LRU.n\" title=\"zict.LRU.n\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">LRU.n</span></code></a></dt><dd></dd><dt><a class=\"reference internal\" href=\"#zict.LRU.offset\" title=\"zict.LRU.offset\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">LRU.offset</span></code></a></dt><dd></dd></dl></div></dd></dl><dl class=\"py property\"><dt class=\"sig sig-object py\" id=\"zict.Buffer.offset\"><em class=\"property\"><span class=\"pre\">property</span><span class=\"w\"> </span></em><span class=\"sig-name descname\"><span class=\"pre\">offset</span></span><em class=\"property\"><span class=\"p\"><span class=\"pre\">:</span></span><span class=\"w\"> </span><span class=\"pre\">float</span></em><a class=\"headerlink\" href=\"#zict.Buffer.offset\" title=\"Link to this definition\">\u00b6</a></dt><dd><p>Offset to add to the total weight in the fast buffer to determine wheneviction happens. Note that increasing offset is not the same as decreasing n,as the latter also changes what keys qualify as \u201cheavy\u201d and should not be storedin fast.</p><p>Always starts at zero and can be updated; this won\u2019t trigger eviction by itself;you should call <a class=\"reference internal\" href=\"#zict.Buffer.evict_until_below_target\" title=\"zict.Buffer.evict_until_below_target\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">evict_until_below_target()</span></code></a> afterwards.</p><div class=\"admonition seealso\"><p class=\"admonition-title\">See also</p><dl class=\"simple\"><dt><a class=\"reference internal\" href=\"#zict.Buffer.n\" title=\"zict.Buffer.n\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">n</span></code></a></dt><dd></dd><dt><a class=\"reference internal\" href=\"#zict.Buffer.evict_until_below_target\" title=\"zict.Buffer.evict_until_below_target\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">evict_until_below_target</span></code></a></dt><dd></dd><dt><a class=\"reference internal\" href=\"#zict.LRU.n\" title=\"zict.LRU.n\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">LRU.n</span></code></a></dt><dd></dd><dt><a class=\"reference internal\" href=\"#zict.LRU.offset\" title=\"zict.LRU.offset\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">LRU.offset</span></code></a></dt><dd></dd></dl></div></dd></dl><dl class=\"py method\"><dt class=\"sig sig-object py\" id=\"zict.Buffer.set_noevict\"><span class=\"sig-name descname\"><span class=\"pre\">set_noevict</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">key</span></span><span class=\"p\"><span class=\"pre\">:</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">KT</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">value</span></span><span class=\"p\"><span class=\"pre\">:</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">VT</span></span></em><span class=\"sig-paren\">)</span> <span class=\"sig-return\"><span class=\"sig-return-icon\">&#x2192;</span> <span class=\"sig-return-typehint\"><span class=\"pre\">None</span></span></span><a class=\"reference internal\" href=\"_modules/zict/buffer.html#Buffer.set_noevict\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#zict.Buffer.set_noevict\" title=\"Link to this definition\">\u00b6</a></dt><dd><p>Variant of <code class=\"docutils literal notranslate\"><span class=\"pre\">__setitem__</span></code> that does not move keys from fast to slow if thetotal weight exceeds n</p></dd></dl><dl class=\"py method\"><dt class=\"sig sig-object py\" id=\"zict.Buffer.values\"><span class=\"sig-name descname\"><span class=\"pre\">values</span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span> <span class=\"sig-return\"><span class=\"sig-return-icon\">&#x2192;</span> <span class=\"sig-return-typehint\"><span class=\"pre\">an</span> <span class=\"pre\">object</span> <span class=\"pre\">providing</span> <span class=\"pre\">a</span> <span class=\"pre\">view</span> <span class=\"pre\">on</span> <span class=\"pre\">D's</span> <span class=\"pre\">values</span></span></span><a class=\"reference internal\" href=\"_modules/zict/buffer.html#Buffer.values\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#zict.Buffer.values\" title=\"Link to this definition\">\u00b6</a></dt><dd></dd></dl></dd></dl><dl class=\"py class\"><dt class=\"sig sig-object py\" id=\"zict.AsyncBuffer\"><em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><span class=\"sig-prename descclassname\"><span class=\"pre\">zict.</span></span><span class=\"sig-name descname\"><span class=\"pre\">AsyncBuffer</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"pre\">fast:</span> <span class=\"pre\">MutableMapping[KT,</span> <span class=\"pre\">VT],</span> <span class=\"pre\">slow:</span> <span class=\"pre\">MutableMapping[KT,</span> <span class=\"pre\">VT],</span> <span class=\"pre\">n:</span> <span class=\"pre\">float,</span> <span class=\"pre\">weight:</span> <span class=\"pre\">Callable[[KT,</span> <span class=\"pre\">VT],</span> <span class=\"pre\">float]</span> <span class=\"pre\">=</span> <span class=\"pre\">&lt;function</span> <span class=\"pre\">Buffer.&lt;lambda&gt;&gt;,</span> <span class=\"pre\">fast_to_slow_callbacks:</span> <span class=\"pre\">Callable[[KT,</span> <span class=\"pre\">VT],</span> <span class=\"pre\">None]</span> <span class=\"pre\">|</span> <span class=\"pre\">list[Callable[[KT,</span> <span class=\"pre\">VT],</span> <span class=\"pre\">None]]</span> <span class=\"pre\">|</span> <span class=\"pre\">None</span> <span class=\"pre\">=</span> <span class=\"pre\">None,</span> <span class=\"pre\">slow_to_fast_callbacks:</span> <span class=\"pre\">Callable[[KT,</span> <span class=\"pre\">VT],</span> <span class=\"pre\">None]</span> <span class=\"pre\">|</span> <span class=\"pre\">list[Callable[[KT,</span> <span class=\"pre\">VT],</span> <span class=\"pre\">None]]</span> <span class=\"pre\">|</span> <span class=\"pre\">None</span> <span class=\"pre\">=</span> <span class=\"pre\">None</span></em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"_modules/zict/async_buffer.html#AsyncBuffer\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#zict.AsyncBuffer\" title=\"Link to this definition\">\u00b6</a></dt><dd><p>Extension of <a class=\"reference internal\" href=\"#zict.Buffer\" title=\"zict.Buffer\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Buffer</span></code></a> that allows offloading all reads and writesfrom/to slow to a separate worker thread.</p><p>This requires <code class=\"docutils literal notranslate\"><span class=\"pre\">fast</span></code> to be fully thread-safe (e.g. a plain dict).</p><p><code class=\"docutils literal notranslate\"><span class=\"pre\">slow.__setitem__</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">slow.__getitem__</span></code> will be called from the offloadedthread, while all of its other methods (including, notably for the purpose ofthread-safety consideration, <code class=\"docutils literal notranslate\"><span class=\"pre\">__contains__</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">__delitem__</span></code>) will be calledfrom the main thread.</p><dl class=\"field-list simple\"><dt class=\"field-odd\">Parameters<span class=\"colon\">:</span></dt><dd class=\"field-odd\"><dl class=\"simple\"><dt><strong>Same as in Buffer, plus:</strong></dt><dd></dd><dt><strong>executor: concurrent.futures.Executor, optional</strong></dt><dd><p>An Executor instance to use for offloading. It must not pickle/unpickle.Defaults to an internal ThreadPoolExecutor.</p></dd><dt><strong>nthreads: int, optional</strong></dt><dd><p>Number of offloaded threads to run in parallel. Defaults to 1.Mutually exclusive with executor parameter.</p></dd></dl></dd></dl><div class=\"admonition seealso\"><p class=\"admonition-title\">See also</p><dl class=\"simple\"><dt><a class=\"reference internal\" href=\"#zict.Buffer\" title=\"zict.Buffer\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">Buffer</span></code></a></dt><dd></dd></dl></div><dl class=\"py method\"><dt class=\"sig sig-object py\" id=\"zict.AsyncBuffer.async_evict_until_below_target\"><span class=\"sig-name descname\"><span class=\"pre\">async_evict_until_below_target</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">n</span></span><span class=\"p\"><span class=\"pre\">:</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">float</span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">|</span></span><span class=\"w\"> </span><span class=\"pre\">None</span></span><span class=\"w\"> </span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"default_value\"><span class=\"pre\">None</span></span></em><span class=\"sig-paren\">)</span> <span class=\"sig-return\"><span class=\"sig-return-icon\">&#x2192;</span> <span class=\"sig-return-typehint\"><span class=\"pre\">None</span></span></span><a class=\"reference internal\" href=\"_modules/zict/async_buffer.html#AsyncBuffer.async_evict_until_below_target\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#zict.AsyncBuffer.async_evict_until_below_target\" title=\"Link to this definition\">\u00b6</a></dt><dd><p>If the total weight exceeds n, asynchronously start moving keys from fast toslow in a worker thread.</p></dd></dl><dl class=\"py method\"><dt class=\"sig sig-object py\" id=\"zict.AsyncBuffer.async_get\"><span class=\"sig-name descname\"><span class=\"pre\">async_get</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">keys</span></span><span class=\"p\"><span class=\"pre\">:</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">Collection</span><span class=\"p\"><span class=\"pre\">[</span></span><span class=\"pre\">KT</span><span class=\"p\"><span class=\"pre\">]</span></span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">missing</span></span><span class=\"p\"><span class=\"pre\">:</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">Literal</span><span class=\"p\"><span class=\"pre\">[</span></span><span class=\"s\"><span class=\"pre\">'raise'</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"s\"><span class=\"pre\">'omit'</span></span><span class=\"p\"><span class=\"pre\">]</span></span></span><span class=\"w\"> </span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"default_value\"><span class=\"pre\">'raise'</span></span></em><span class=\"sig-paren\">)</span> <span class=\"sig-return\"><span class=\"sig-return-icon\">&#x2192;</span> <span class=\"sig-return-typehint\"><span class=\"pre\">Future</span><span class=\"p\"><span class=\"pre\">[</span></span><span class=\"pre\">dict</span><span class=\"p\"><span class=\"pre\">[</span></span><span class=\"pre\">KT</span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"pre\">VT</span><span class=\"p\"><span class=\"pre\">]</span></span><span class=\"p\"><span class=\"pre\">]</span></span></span></span><a class=\"reference internal\" href=\"_modules/zict/async_buffer.html#AsyncBuffer.async_get\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#zict.AsyncBuffer.async_get\" title=\"Link to this definition\">\u00b6</a></dt><dd><p>Fetch one or more key/value pairs. If not all keys are available in fast,offload to a worker thread moving keys from slow to fast, as well as possiblymoving older keys from fast to slow.</p><dl class=\"field-list simple\"><dt class=\"field-odd\">Parameters<span class=\"colon\">:</span></dt><dd class=\"field-odd\"><dl class=\"simple\"><dt><strong>keys:</strong></dt><dd><p>collection of zero or more keys to get</p></dd><dt><strong>missing: raise or omit, optional</strong></dt><dd><dl class=\"simple\"><dt>raise (default)</dt><dd><p>If any key is missing, raise KeyError.</p></dd><dt>omit</dt><dd><p>If a key is missing, return a dict with less keys than those requested.</p></dd></dl></dd></dl></dd></dl><p class=\"rubric\">Notes</p><p>All keys may be present when you call <code class=\"docutils literal notranslate\"><span class=\"pre\">async_get</span></code>, but <code class=\"docutils literal notranslate\"><span class=\"pre\">__delitem__</span></code> may becalled on one of them before the actual data is fetched. <code class=\"docutils literal notranslate\"><span class=\"pre\">__setitem__</span></code> alsointernally calls <code class=\"docutils literal notranslate\"><span class=\"pre\">__delitem__</span></code> in a non-atomic way, so you may get<code class=\"docutils literal notranslate\"><span class=\"pre\">KeyError</span></code> when updating a value too.</p></dd></dl><dl class=\"py method\"><dt class=\"sig sig-object py\" id=\"zict.AsyncBuffer.close\"><span class=\"sig-name descname\"><span class=\"pre\">close</span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span> <span class=\"sig-return\"><span class=\"sig-return-icon\">&#x2192;</span> <span class=\"sig-return-typehint\"><span class=\"pre\">None</span></span></span><a class=\"reference internal\" href=\"_modules/zict/async_buffer.html#AsyncBuffer.close\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#zict.AsyncBuffer.close\" title=\"Link to this definition\">\u00b6</a></dt><dd><p>Release any system resources held by this object</p></dd></dl></dd></dl><dl class=\"py class\"><dt class=\"sig sig-object py\" id=\"zict.Cache\"><em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><span class=\"sig-prename descclassname\"><span class=\"pre\">zict.</span></span><span class=\"sig-name descname\"><span class=\"pre\">Cache</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">data</span></span><span class=\"p\"><span class=\"pre\">:</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">MutableMapping</span><span class=\"p\"><span class=\"pre\">[</span></span><span class=\"pre\">KT</span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"pre\">VT</span><span class=\"p\"><span class=\"pre\">]</span></span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">cache</span></span><span class=\"p\"><span class=\"pre\">:</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">MutableMapping</span><span class=\"p\"><span class=\"pre\">[</span></span><span class=\"pre\">KT</span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"pre\">VT</span><span class=\"p\"><span class=\"pre\">]</span></span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">update_on_set</span></span><span class=\"p\"><span class=\"pre\">:</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"default_value\"><span class=\"pre\">True</span></span></em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"_modules/zict/cache.html#Cache\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#zict.Cache\" title=\"Link to this definition\">\u00b6</a></dt><dd><p>Transparent write-through cache around a MutableMapping with an expensive__getitem__ method.</p><dl class=\"field-list simple\"><dt class=\"field-odd\">Parameters<span class=\"colon\">:</span></dt><dd class=\"field-odd\"><dl class=\"simple\"><dt><strong>data: MutableMapping</strong></dt><dd><p>Persistent, slow to read mapping to be cached</p></dd><dt><strong>cache: MutableMapping</strong></dt><dd><p>Fast cache for reads from data. This mapping may lose keys on its own; e.g. itcould be a LRU.</p></dd><dt><strong>update_on_set: bool, optional</strong></dt><dd><p>If True (default), the cache will be updated both when writing and reading.If False, update the cache when reading, but just invalidate it when writing.</p></dd></dl></dd></dl><p class=\"rubric\">Notes</p><p>If you call methods of this class from multiple threads, access will be fast as longas all methods of <code class=\"docutils literal notranslate\"><span class=\"pre\">cache</span></code>, plus <code class=\"docutils literal notranslate\"><span class=\"pre\">data.__delitem__</span></code>, are fast. Other methods of<code class=\"docutils literal notranslate\"><span class=\"pre\">data</span></code> are not protected by locks.</p><p class=\"rubric\">Examples</p><p>Keep the latest 100 accessed values in memory&gt;&gt;&gt; from zict import Cache, File, LRU, WeakValueMapping&gt;&gt;&gt; d = Cache(File(\u2018myfile\u2019), LRU(100, {}))  # doctest: +SKIP</p><p>Read data from disk every time, unless it was previously accessed and it\u2019s still inuse somewhere else in the application&gt;&gt;&gt; d = Cache(File(\u2018myfile\u2019), WeakValueMapping())  # doctest: +SKIP</p><dl class=\"py method\"><dt class=\"sig sig-object py\" id=\"zict.Cache.close\"><span class=\"sig-name descname\"><span class=\"pre\">close</span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span> <span class=\"sig-return\"><span class=\"sig-return-icon\">&#x2192;</span> <span class=\"sig-return-typehint\"><span class=\"pre\">None</span></span></span><a class=\"reference internal\" href=\"_modules/zict/cache.html#Cache.close\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#zict.Cache.close\" title=\"Link to this definition\">\u00b6</a></dt><dd><p>Release any system resources held by this object</p></dd></dl></dd></dl><dl class=\"py class\"><dt class=\"sig sig-object py\" id=\"zict.File\"><em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><span class=\"sig-prename descclassname\"><span class=\"pre\">zict.</span></span><span class=\"sig-name descname\"><span class=\"pre\">File</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">directory</span></span><span class=\"p\"><span class=\"pre\">:</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">str</span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">|</span></span><span class=\"w\"> </span><span class=\"pre\">pathlib.Path</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">memmap</span></span><span class=\"p\"><span class=\"pre\">:</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"default_value\"><span class=\"pre\">False</span></span></em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"_modules/zict/file.html#File\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#zict.File\" title=\"Link to this definition\">\u00b6</a></dt><dd><p>Mutable Mapping interface to a directory</p><p>Keys must be strings, values must be buffers</p><p>Note this shouldn\u2019t be used for interprocess persistence, as keysare cached in memory.</p><dl class=\"field-list simple\"><dt class=\"field-odd\">Parameters<span class=\"colon\">:</span></dt><dd class=\"field-odd\"><dl class=\"simple\"><dt><strong>directory: str</strong></dt><dd><p>Directory to write to. If it already exists, existing files will be imported asmapping elements. If it doesn\u2019t exists, it will be created.</p></dd><dt><strong>memmap: bool (optional)</strong></dt><dd><p>If True, use <cite>mmap</cite> for reading. Defaults to False.</p></dd></dl></dd></dl><p class=\"rubric\">Notes</p><p>If you call methods of this class from multiple threads, access will be fast as longas atomic disk access such as <code class=\"docutils literal notranslate\"><span class=\"pre\">open</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">os.fstat</span></code>, and <code class=\"docutils literal notranslate\"><span class=\"pre\">os.remove</span></code> is fast.This is not always the case, e.g. in case of slow network mounts or spun-downmagnetic drives.Bytes read/write in the files is not protected by locks; this could cause failureson Windows, NFS, and in general whenever it\u2019s not OK to delete a file while thereare file descriptors open on it.</p><p class=\"rubric\">Examples</p><div class=\"doctest highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">z</span> <span class=\"o\">=</span> <span class=\"n\">File</span><span class=\"p\">(</span><span class=\"s1\">&#39;myfile&#39;</span><span class=\"p\">)</span>  <span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">z</span><span class=\"p\">[</span><span class=\"s1\">&#39;x&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"sa\">b</span><span class=\"s1\">&#39;123&#39;</span>  <span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">z</span><span class=\"p\">[</span><span class=\"s1\">&#39;x&#39;</span><span class=\"p\">]</span>  <span class=\"go\">b&#39;123&#39;</span></pre></div></div><p>Also supports writing lists of bytes objects</p><div class=\"doctest highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">z</span><span class=\"p\">[</span><span class=\"s1\">&#39;y&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"sa\">b</span><span class=\"s1\">&#39;123&#39;</span><span class=\"p\">,</span> <span class=\"sa\">b</span><span class=\"s1\">&#39;4567&#39;</span><span class=\"p\">]</span>  <span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">z</span><span class=\"p\">[</span><span class=\"s1\">&#39;y&#39;</span><span class=\"p\">]</span>  <span class=\"go\">b&#39;1234567&#39;</span></pre></div></div><p>Or anything that can be used with file.write, like a memoryview</p><div class=\"doctest highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">z</span><span class=\"p\">[</span><span class=\"s1\">&#39;data&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">ones</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">data</span>  </pre></div></div></dd></dl><dl class=\"py class\"><dt class=\"sig sig-object py\" id=\"zict.Func\"><em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><span class=\"sig-prename descclassname\"><span class=\"pre\">zict.</span></span><span class=\"sig-name descname\"><span class=\"pre\">Func</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">dump</span></span><span class=\"p\"><span class=\"pre\">:</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">Callable</span><span class=\"p\"><span class=\"pre\">[</span></span><span class=\"p\"><span class=\"pre\">[</span></span><span class=\"pre\">VT</span><span class=\"p\"><span class=\"pre\">]</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"pre\">WT</span><span class=\"p\"><span class=\"pre\">]</span></span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">load</span></span><span class=\"p\"><span class=\"pre\">:</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">Callable</span><span class=\"p\"><span class=\"pre\">[</span></span><span class=\"p\"><span class=\"pre\">[</span></span><span class=\"pre\">WT</span><span class=\"p\"><span class=\"pre\">]</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"pre\">VT</span><span class=\"p\"><span class=\"pre\">]</span></span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">d</span></span><span class=\"p\"><span class=\"pre\">:</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">MutableMapping</span><span class=\"p\"><span class=\"pre\">[</span></span><span class=\"pre\">KT</span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"pre\">WT</span><span class=\"p\"><span class=\"pre\">]</span></span></span></em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"_modules/zict/func.html#Func\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#zict.Func\" title=\"Link to this definition\">\u00b6</a></dt><dd><p>Translate the values of a MutableMapping with a pair of input/output functions</p><dl class=\"field-list simple\"><dt class=\"field-odd\">Parameters<span class=\"colon\">:</span></dt><dd class=\"field-odd\"><dl class=\"simple\"><dt><strong>dump: callable</strong></dt><dd><p>Function to call on value as we set it into the mapping</p></dd><dt><strong>load: callable</strong></dt><dd><p>Function to call on value as we pull it from the mapping</p></dd><dt><strong>d: MutableMapping</strong></dt><dd></dd></dl></dd></dl><div class=\"admonition seealso\"><p class=\"admonition-title\">See also</p><dl class=\"simple\"><dt><a class=\"reference internal\" href=\"#zict.KeyMap\" title=\"zict.KeyMap\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">KeyMap</span></code></a></dt><dd></dd></dl></div><p class=\"rubric\">Examples</p><div class=\"doctest highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">def</span> <span class=\"nf\">double</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">):</span><span class=\"gp\">... </span>    <span class=\"k\">return</span> <span class=\"n\">x</span> <span class=\"o\">*</span> <span class=\"mi\">2</span></pre></div></div><div class=\"doctest highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">def</span> <span class=\"nf\">halve</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">):</span><span class=\"gp\">... </span>    <span class=\"k\">return</span> <span class=\"n\">x</span> <span class=\"o\">/</span> <span class=\"mi\">2</span></pre></div></div><div class=\"doctest highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">d</span> <span class=\"o\">=</span> <span class=\"p\">{}</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">f</span> <span class=\"o\">=</span> <span class=\"n\">Func</span><span class=\"p\">(</span><span class=\"n\">double</span><span class=\"p\">,</span> <span class=\"n\">halve</span><span class=\"p\">,</span> <span class=\"n\">d</span><span class=\"p\">)</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">f</span><span class=\"p\">[</span><span class=\"s1\">&#39;x&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">10</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">d</span><span class=\"go\">{&#39;x&#39;: 20}</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">f</span><span class=\"p\">[</span><span class=\"s1\">&#39;x&#39;</span><span class=\"p\">]</span><span class=\"go\">10.0</span></pre></div></div><dl class=\"py method\"><dt class=\"sig sig-object py\" id=\"zict.Func.close\"><span class=\"sig-name descname\"><span class=\"pre\">close</span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span> <span class=\"sig-return\"><span class=\"sig-return-icon\">&#x2192;</span> <span class=\"sig-return-typehint\"><span class=\"pre\">None</span></span></span><a class=\"reference internal\" href=\"_modules/zict/func.html#Func.close\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#zict.Func.close\" title=\"Link to this definition\">\u00b6</a></dt><dd><p>Release any system resources held by this object</p></dd></dl></dd></dl><dl class=\"py class\"><dt class=\"sig sig-object py\" id=\"zict.KeyMap\"><em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><span class=\"sig-prename descclassname\"><span class=\"pre\">zict.</span></span><span class=\"sig-name descname\"><span class=\"pre\">KeyMap</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">fn</span></span><span class=\"p\"><span class=\"pre\">:</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">Callable</span><span class=\"p\"><span class=\"pre\">[</span></span><span class=\"p\"><span class=\"pre\">[</span></span><span class=\"pre\">KT</span><span class=\"p\"><span class=\"pre\">]</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"pre\">JT</span><span class=\"p\"><span class=\"pre\">]</span></span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">d</span></span><span class=\"p\"><span class=\"pre\">:</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">MutableMapping</span><span class=\"p\"><span class=\"pre\">[</span></span><span class=\"pre\">JT</span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"pre\">VT</span><span class=\"p\"><span class=\"pre\">]</span></span></span></em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"_modules/zict/keymap.html#KeyMap\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#zict.KeyMap\" title=\"Link to this definition\">\u00b6</a></dt><dd><p>Translate the keys of a MutableMapping with a pair of input/output functions</p><dl class=\"field-list simple\"><dt class=\"field-odd\">Parameters<span class=\"colon\">:</span></dt><dd class=\"field-odd\"><dl class=\"simple\"><dt><strong>fn: callable</strong></dt><dd><p>Function to call on a key of the KeyMap to transform it to a key of the wrappedmapping. It must be pure (if called twice on the same key it must returnthe same result) and it must not generate collisions. In other words,<code class=\"docutils literal notranslate\"><span class=\"pre\">fn(a)</span> <span class=\"pre\">==</span> <span class=\"pre\">fn(b)</span> <span class=\"pre\">iff</span> <span class=\"pre\">a</span> <span class=\"pre\">==</span> <span class=\"pre\">b</span></code>.</p></dd><dt><strong>d: MutableMapping</strong></dt><dd><p>Wrapped mapping</p></dd></dl></dd></dl><div class=\"admonition seealso\"><p class=\"admonition-title\">See also</p><dl class=\"simple\"><dt><a class=\"reference internal\" href=\"#zict.Func\" title=\"zict.Func\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">Func</span></code></a></dt><dd></dd></dl></div><p class=\"rubric\">Examples</p><p>Use any python object as keys of a File, instead of just strings, as long as theirstr representation is unique:</p><div class=\"doctest highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">zict</span> <span class=\"kn\">import</span> <span class=\"n\">File</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">z</span> <span class=\"o\">=</span> <span class=\"n\">KeyMap</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">File</span><span class=\"p\">(</span><span class=\"s2\">&quot;myfile&quot;</span><span class=\"p\">))</span>  <span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">z</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">10</span>  </pre></div></div><dl class=\"py method\"><dt class=\"sig sig-object py\" id=\"zict.KeyMap.close\"><span class=\"sig-name descname\"><span class=\"pre\">close</span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span> <span class=\"sig-return\"><span class=\"sig-return-icon\">&#x2192;</span> <span class=\"sig-return-typehint\"><span class=\"pre\">None</span></span></span><a class=\"reference internal\" href=\"_modules/zict/keymap.html#KeyMap.close\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#zict.KeyMap.close\" title=\"Link to this definition\">\u00b6</a></dt><dd><p>Release any system resources held by this object</p></dd></dl></dd></dl><dl class=\"py class\"><dt class=\"sig sig-object py\" id=\"zict.LMDB\"><em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><span class=\"sig-prename descclassname\"><span class=\"pre\">zict.</span></span><span class=\"sig-name descname\"><span class=\"pre\">LMDB</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">directory</span></span><span class=\"p\"><span class=\"pre\">:</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">str</span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">|</span></span><span class=\"w\"> </span><span class=\"pre\">pathlib.Path</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">map_size</span></span><span class=\"p\"><span class=\"pre\">:</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">int</span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">|</span></span><span class=\"w\"> </span><span class=\"pre\">None</span></span><span class=\"w\"> </span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"default_value\"><span class=\"pre\">None</span></span></em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"_modules/zict/lmdb.html#LMDB\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#zict.LMDB\" title=\"Link to this definition\">\u00b6</a></dt><dd><p>Mutable Mapping interface to a LMDB database.</p><p>Keys must be strings, values must be bytes</p><dl class=\"field-list\"><dt class=\"field-odd\">Parameters<span class=\"colon\">:</span></dt><dd class=\"field-odd\"><dl><dt><strong>directory: str</strong></dt><dd></dd><dt><strong>map_size: int</strong></dt><dd><p>On Linux and MacOS, maximum size of the database file on disk.Defaults to 1 TiB on 64 bit systems and 1 GiB on 32 bit ones.</p><p>On Windows, preallocated total size of the database file on disk. Defaults to10 MiB to encourage explicitly setting it.</p></dd></dl></dd></dl><p class=\"rubric\">Notes</p><p>None of this class is thread-safe - not even normally trivial methods such as<code class=\"docutils literal notranslate\"><span class=\"pre\">__len__</span> <span class=\"pre\">``</span> <span class=\"pre\">or</span> <span class=\"pre\">``__contains__</span></code>.</p><p class=\"rubric\">Examples</p><div class=\"doctest highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">z</span> <span class=\"o\">=</span> <span class=\"n\">LMDB</span><span class=\"p\">(</span><span class=\"s1\">&#39;/tmp/somedir/&#39;</span><span class=\"p\">)</span>  <span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">z</span><span class=\"p\">[</span><span class=\"s1\">&#39;x&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"sa\">b</span><span class=\"s1\">&#39;123&#39;</span>  <span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">z</span><span class=\"p\">[</span><span class=\"s1\">&#39;x&#39;</span><span class=\"p\">]</span>  <span class=\"go\">b&#39;123&#39;</span></pre></div></div><dl class=\"py method\"><dt class=\"sig sig-object py\" id=\"zict.LMDB.close\"><span class=\"sig-name descname\"><span class=\"pre\">close</span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span> <span class=\"sig-return\"><span class=\"sig-return-icon\">&#x2192;</span> <span class=\"sig-return-typehint\"><span class=\"pre\">None</span></span></span><a class=\"reference internal\" href=\"_modules/zict/lmdb.html#LMDB.close\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#zict.LMDB.close\" title=\"Link to this definition\">\u00b6</a></dt><dd><p>Release any system resources held by this object</p></dd></dl><dl class=\"py method\"><dt class=\"sig sig-object py\" id=\"zict.LMDB.items\"><span class=\"sig-name descname\"><span class=\"pre\">items</span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span> <span class=\"sig-return\"><span class=\"sig-return-icon\">&#x2192;</span> <span class=\"sig-return-typehint\"><span class=\"pre\">a</span> <span class=\"pre\">set-like</span> <span class=\"pre\">object</span> <span class=\"pre\">providing</span> <span class=\"pre\">a</span> <span class=\"pre\">view</span> <span class=\"pre\">on</span> <span class=\"pre\">D's</span> <span class=\"pre\">items</span></span></span><a class=\"reference internal\" href=\"_modules/zict/lmdb.html#LMDB.items\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#zict.LMDB.items\" title=\"Link to this definition\">\u00b6</a></dt><dd></dd></dl><dl class=\"py method\"><dt class=\"sig sig-object py\" id=\"zict.LMDB.values\"><span class=\"sig-name descname\"><span class=\"pre\">values</span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span> <span class=\"sig-return\"><span class=\"sig-return-icon\">&#x2192;</span> <span class=\"sig-return-typehint\"><span class=\"pre\">an</span> <span class=\"pre\">object</span> <span class=\"pre\">providing</span> <span class=\"pre\">a</span> <span class=\"pre\">view</span> <span class=\"pre\">on</span> <span class=\"pre\">D's</span> <span class=\"pre\">values</span></span></span><a class=\"reference internal\" href=\"_modules/zict/lmdb.html#LMDB.values\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#zict.LMDB.values\" title=\"Link to this definition\">\u00b6</a></dt><dd></dd></dl></dd></dl><dl class=\"py class\"><dt class=\"sig sig-object py\" id=\"zict.LRU\"><em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><span class=\"sig-prename descclassname\"><span class=\"pre\">zict.</span></span><span class=\"sig-name descname\"><span class=\"pre\">LRU</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"pre\">n:</span> <span class=\"pre\">float,</span> <span class=\"pre\">d:</span> <span class=\"pre\">MutableMapping[KT,</span> <span class=\"pre\">VT],</span> <span class=\"pre\">*,</span> <span class=\"pre\">on_evict:</span> <span class=\"pre\">Callable[[KT,</span> <span class=\"pre\">VT],</span> <span class=\"pre\">None]</span> <span class=\"pre\">|</span> <span class=\"pre\">list[Callable[[KT,</span> <span class=\"pre\">VT],</span> <span class=\"pre\">None]]</span> <span class=\"pre\">|</span> <span class=\"pre\">None</span> <span class=\"pre\">=</span> <span class=\"pre\">None,</span> <span class=\"pre\">on_cancel_evict:</span> <span class=\"pre\">Callable[[KT,</span> <span class=\"pre\">VT],</span> <span class=\"pre\">None]</span> <span class=\"pre\">|</span> <span class=\"pre\">list[Callable[[KT,</span> <span class=\"pre\">VT],</span> <span class=\"pre\">None]]</span> <span class=\"pre\">|</span> <span class=\"pre\">None</span> <span class=\"pre\">=</span> <span class=\"pre\">None,</span> <span class=\"pre\">weight:</span> <span class=\"pre\">Callable[[KT,</span> <span class=\"pre\">VT],</span> <span class=\"pre\">float]</span> <span class=\"pre\">=</span> <span class=\"pre\">&lt;function</span> <span class=\"pre\">LRU.&lt;lambda&gt;&gt;</span></em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"_modules/zict/lru.html#LRU\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#zict.LRU\" title=\"Link to this definition\">\u00b6</a></dt><dd><p>Evict Least Recently Used Elements.</p><dl class=\"field-list\"><dt class=\"field-odd\">Parameters<span class=\"colon\">:</span></dt><dd class=\"field-odd\"><dl><dt><strong>n: int or float</strong></dt><dd><p>Number of elements to keep, or total weight if <code class=\"docutils literal notranslate\"><span class=\"pre\">weight</span></code> is used.Any individual key that is heavier than n will be automatically evicted as soonas it is inserted.</p><p>It can be updated after initialization. See also: <code class=\"docutils literal notranslate\"><span class=\"pre\">offset</span></code> attribute.</p></dd><dt><strong>d: MutableMapping</strong></dt><dd><p>Dict-like in which to hold elements. There are no expectations on its internalordering. Iteration on the LRU follows the order of the underlying mapping.</p></dd><dt><strong>on_evict: callable or list of callables</strong></dt><dd><p>Function:: k, v -&gt; action to call on key/value pairs prior to evictionIf an exception occurs during an on_evict callback (e.g a callback triedstoring to disk and raised a disk full error) the key will remain in the LRU.</p></dd><dt><strong>on_cancel_evict: callable or list of callables</strong></dt><dd><p>Function:: k, v -&gt; action to call on key/value pairs if they\u2019re deleted orupdated from a thread while the on_evict callables are being executed inanother.If you\u2019re not accessing the LRU from multiple threads, ignore this parameter.</p></dd><dt><strong>weight: callable</strong></dt><dd><p>Function:: k, v -&gt; number to determine the size of keeping the item inthe mapping.  Defaults to <code class=\"docutils literal notranslate\"><span class=\"pre\">(k,</span> <span class=\"pre\">v)</span> <span class=\"pre\">-&gt;</span> <span class=\"pre\">1</span></code></p></dd></dl></dd></dl><p class=\"rubric\">Notes</p><p>If you call methods of this class from multiple threads, access will be fast as longas all methods of <code class=\"docutils literal notranslate\"><span class=\"pre\">d</span></code> are fast. Callbacks are not protected by locks and can bearbitrarily slow.</p><p class=\"rubric\">Examples</p><div class=\"doctest highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lru</span> <span class=\"o\">=</span> <span class=\"n\">LRU</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"p\">{},</span> <span class=\"n\">on_evict</span><span class=\"o\">=</span><span class=\"k\">lambda</span> <span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">v</span><span class=\"p\">:</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;Lost&quot;</span><span class=\"p\">,</span> <span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">v</span><span class=\"p\">))</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lru</span><span class=\"p\">[</span><span class=\"s1\">&#39;x&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lru</span><span class=\"p\">[</span><span class=\"s1\">&#39;y&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">2</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lru</span><span class=\"p\">[</span><span class=\"s1\">&#39;z&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">3</span><span class=\"go\">Lost x 1</span></pre></div></div><dl class=\"py method\"><dt class=\"sig sig-object py\" id=\"zict.LRU.close\"><span class=\"sig-name descname\"><span class=\"pre\">close</span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span> <span class=\"sig-return\"><span class=\"sig-return-icon\">&#x2192;</span> <span class=\"sig-return-typehint\"><span class=\"pre\">None</span></span></span><a class=\"reference internal\" href=\"_modules/zict/lru.html#LRU.close\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#zict.LRU.close\" title=\"Link to this definition\">\u00b6</a></dt><dd><p>Release any system resources held by this object</p></dd></dl><dl class=\"py method\"><dt class=\"sig sig-object py\" id=\"zict.LRU.evict\"><span class=\"sig-name descname\"><span class=\"pre\">evict</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">key</span></span><span class=\"p\"><span class=\"pre\">:</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">KT</span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">|</span></span><span class=\"w\"> </span><span class=\"pre\">NoDefault</span></span><span class=\"w\"> </span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"default_value\"><span class=\"pre\">NoDefault.nodefault</span></span></em><span class=\"sig-paren\">)</span> <span class=\"sig-return\"><span class=\"sig-return-icon\">&#x2192;</span> <span class=\"sig-return-typehint\"><span class=\"pre\">tuple</span><span class=\"p\"><span class=\"pre\">[</span></span><span class=\"pre\">KT</span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"pre\">VT</span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"pre\">float</span><span class=\"p\"><span class=\"pre\">]</span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">|</span></span><span class=\"w\"> </span><span class=\"pre\">tuple</span><span class=\"p\"><span class=\"pre\">[</span></span><span class=\"pre\">None</span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"pre\">None</span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"pre\">float</span><span class=\"p\"><span class=\"pre\">]</span></span></span></span><a class=\"reference internal\" href=\"_modules/zict/lru.html#LRU.evict\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#zict.LRU.evict\" title=\"Link to this definition\">\u00b6</a></dt><dd><p>Evict least recently used key, or least recently inserted key with individualweight &gt; n, if any. You may also evict a specific key.</p><p>This is typically called from internal use, but can be externallytriggered as well.</p><dl class=\"field-list simple\"><dt class=\"field-odd\">Returns<span class=\"colon\">:</span></dt><dd class=\"field-odd\"><dl class=\"simple\"><dt>Tuple of (key, value, weight)</dt><dd></dd><dt>Or (None, None, 0) if the key that was being evicted was updated or deleted from</dt><dd></dd><dt>another thread while the on_evict callbacks were being executed. This outcome is</dt><dd></dd><dt>only possible in multithreaded access.</dt><dd></dd></dl></dd></dl></dd></dl><dl class=\"py method\"><dt class=\"sig sig-object py\" id=\"zict.LRU.evict_until_below_target\"><span class=\"sig-name descname\"><span class=\"pre\">evict_until_below_target</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">n</span></span><span class=\"p\"><span class=\"pre\">:</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">float</span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">|</span></span><span class=\"w\"> </span><span class=\"pre\">None</span></span><span class=\"w\"> </span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"default_value\"><span class=\"pre\">None</span></span></em><span class=\"sig-paren\">)</span> <span class=\"sig-return\"><span class=\"sig-return-icon\">&#x2192;</span> <span class=\"sig-return-typehint\"><span class=\"pre\">None</span></span></span><a class=\"reference internal\" href=\"_modules/zict/lru.html#LRU.evict_until_below_target\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#zict.LRU.evict_until_below_target\" title=\"Link to this definition\">\u00b6</a></dt><dd><p>Evict key/value pairs until the total weight falls below n</p><dl class=\"field-list simple\"><dt class=\"field-odd\">Parameters<span class=\"colon\">:</span></dt><dd class=\"field-odd\"><dl class=\"simple\"><dt><strong>n: float, optional</strong></dt><dd><p>Total weight threshold to achieve. Defaults to self.n.</p></dd></dl></dd></dl></dd></dl><dl class=\"py method\"><dt class=\"sig sig-object py\" id=\"zict.LRU.get_all_or_nothing\"><span class=\"sig-name descname\"><span class=\"pre\">get_all_or_nothing</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">keys</span></span><span class=\"p\"><span class=\"pre\">:</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">Collection</span><span class=\"p\"><span class=\"pre\">[</span></span><span class=\"pre\">KT</span><span class=\"p\"><span class=\"pre\">]</span></span></span></em><span class=\"sig-paren\">)</span> <span class=\"sig-return\"><span class=\"sig-return-icon\">&#x2192;</span> <span class=\"sig-return-typehint\"><span class=\"pre\">dict</span><span class=\"p\"><span class=\"pre\">[</span></span><span class=\"pre\">KT</span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"pre\">VT</span><span class=\"p\"><span class=\"pre\">]</span></span></span></span><a class=\"reference internal\" href=\"_modules/zict/lru.html#LRU.get_all_or_nothing\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#zict.LRU.get_all_or_nothing\" title=\"Link to this definition\">\u00b6</a></dt><dd><p>If all keys exist in the LRU, update their FIFO priority and return theirvalues; this would be the same as <code class=\"docutils literal notranslate\"><span class=\"pre\">{k:</span> <span class=\"pre\">lru[k]</span> <span class=\"pre\">for</span> <span class=\"pre\">k</span> <span class=\"pre\">in</span> <span class=\"pre\">keys}</span></code>.If any keys are missing, however, raise KeyError for the first one missing anddo not bring any of the available keys to the top of the LRU.</p></dd></dl><dl class=\"py method\"><dt class=\"sig sig-object py\" id=\"zict.LRU.items\"><span class=\"sig-name descname\"><span class=\"pre\">items</span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span> <span class=\"sig-return\"><span class=\"sig-return-icon\">&#x2192;</span> <span class=\"sig-return-typehint\"><span class=\"pre\">a</span> <span class=\"pre\">set-like</span> <span class=\"pre\">object</span> <span class=\"pre\">providing</span> <span class=\"pre\">a</span> <span class=\"pre\">view</span> <span class=\"pre\">on</span> <span class=\"pre\">D's</span> <span class=\"pre\">items</span></span></span><a class=\"reference internal\" href=\"_modules/zict/lru.html#LRU.items\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#zict.LRU.items\" title=\"Link to this definition\">\u00b6</a></dt><dd></dd></dl><dl class=\"py method\"><dt class=\"sig sig-object py\" id=\"zict.LRU.keys\"><span class=\"sig-name descname\"><span class=\"pre\">keys</span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span> <span class=\"sig-return\"><span class=\"sig-return-icon\">&#x2192;</span> <span class=\"sig-return-typehint\"><span class=\"pre\">a</span> <span class=\"pre\">set-like</span> <span class=\"pre\">object</span> <span class=\"pre\">providing</span> <span class=\"pre\">a</span> <span class=\"pre\">view</span> <span class=\"pre\">on</span> <span class=\"pre\">D's</span> <span class=\"pre\">keys</span></span></span><a class=\"reference internal\" href=\"_modules/zict/lru.html#LRU.keys\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#zict.LRU.keys\" title=\"Link to this definition\">\u00b6</a></dt><dd></dd></dl><dl class=\"py attribute\"><dt class=\"sig sig-object py\" id=\"zict.LRU.n\"><span class=\"sig-name descname\"><span class=\"pre\">n</span></span><em class=\"property\"><span class=\"p\"><span class=\"pre\">:</span></span><span class=\"w\"> </span><span class=\"pre\">float</span></em><a class=\"headerlink\" href=\"#zict.LRU.n\" title=\"Link to this definition\">\u00b6</a></dt><dd><p>Maximum weight before eviction is triggered, as set during initialization.Updating this attribute doesn\u2019t trigger eviction by itself; you should call<a class=\"reference internal\" href=\"#zict.LRU.evict_until_below_target\" title=\"zict.LRU.evict_until_below_target\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">evict_until_below_target()</span></code></a> explicitly afterwards.</p></dd></dl><dl class=\"py attribute\"><dt class=\"sig sig-object py\" id=\"zict.LRU.offset\"><span class=\"sig-name descname\"><span class=\"pre\">offset</span></span><em class=\"property\"><span class=\"p\"><span class=\"pre\">:</span></span><span class=\"w\"> </span><span class=\"pre\">float</span></em><a class=\"headerlink\" href=\"#zict.LRU.offset\" title=\"Link to this definition\">\u00b6</a></dt><dd><p>Offset to add to <code class=\"docutils literal notranslate\"><span class=\"pre\">total_weight</span></code> to determine if key/value pairs should beevicted. It always starts at zero and can be updated afterwards. Updating thisattribute doesn\u2019t trigger eviction by itself; you should call<a class=\"reference internal\" href=\"#zict.LRU.evict_until_below_target\" title=\"zict.LRU.evict_until_below_target\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">evict_until_below_target()</span></code></a> explicitly afterwards.Increasing <code class=\"docutils literal notranslate\"><span class=\"pre\">offset</span></code> is not the same as reducing <code class=\"docutils literal notranslate\"><span class=\"pre\">n</span></code>, as the latter will alsoreduce the threshold below which a value is considered \u201cheavy\u201d and qualifies forimmediate eviction.</p></dd></dl><dl class=\"py method\"><dt class=\"sig sig-object py\" id=\"zict.LRU.set_noevict\"><span class=\"sig-name descname\"><span class=\"pre\">set_noevict</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">key</span></span><span class=\"p\"><span class=\"pre\">:</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">KT</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">value</span></span><span class=\"p\"><span class=\"pre\">:</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">VT</span></span></em><span class=\"sig-paren\">)</span> <span class=\"sig-return\"><span class=\"sig-return-icon\">&#x2192;</span> <span class=\"sig-return-typehint\"><span class=\"pre\">None</span></span></span><a class=\"reference internal\" href=\"_modules/zict/lru.html#LRU.set_noevict\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#zict.LRU.set_noevict\" title=\"Link to this definition\">\u00b6</a></dt><dd><p>Variant of <code class=\"docutils literal notranslate\"><span class=\"pre\">__setitem__</span></code> that does not evict if the total weight exceeds n.Unlike <code class=\"docutils literal notranslate\"><span class=\"pre\">__setitem__</span></code>, this method does not depend on the <code class=\"docutils literal notranslate\"><span class=\"pre\">on_evict</span></code>functions to be thread-safe for its own thread-safety. It also is not prone tore-raising exceptions from the <code class=\"docutils literal notranslate\"><span class=\"pre\">on_evict</span></code> callbacks.</p></dd></dl><dl class=\"py method\"><dt class=\"sig sig-object py\" id=\"zict.LRU.values\"><span class=\"sig-name descname\"><span class=\"pre\">values</span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span> <span class=\"sig-return\"><span class=\"sig-return-icon\">&#x2192;</span> <span class=\"sig-return-typehint\"><span class=\"pre\">an</span> <span class=\"pre\">object</span> <span class=\"pre\">providing</span> <span class=\"pre\">a</span> <span class=\"pre\">view</span> <span class=\"pre\">on</span> <span class=\"pre\">D's</span> <span class=\"pre\">values</span></span></span><a class=\"reference internal\" href=\"_modules/zict/lru.html#LRU.values\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#zict.LRU.values\" title=\"Link to this definition\">\u00b6</a></dt><dd></dd></dl></dd></dl><dl class=\"py class\"><dt class=\"sig sig-object py\" id=\"zict.Sieve\"><em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><span class=\"sig-prename descclassname\"><span class=\"pre\">zict.</span></span><span class=\"sig-name descname\"><span class=\"pre\">Sieve</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">mappings</span></span><span class=\"p\"><span class=\"pre\">:</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">Mapping</span><span class=\"p\"><span class=\"pre\">[</span></span><span class=\"pre\">MKT</span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"pre\">MutableMapping</span><span class=\"p\"><span class=\"pre\">[</span></span><span class=\"pre\">KT</span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"pre\">VT</span><span class=\"p\"><span class=\"pre\">]</span></span><span class=\"p\"><span class=\"pre\">]</span></span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">selector</span></span><span class=\"p\"><span class=\"pre\">:</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">Callable</span><span class=\"p\"><span class=\"pre\">[</span></span><span class=\"p\"><span class=\"pre\">[</span></span><span class=\"pre\">KT</span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"pre\">VT</span><span class=\"p\"><span class=\"pre\">]</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"pre\">MKT</span><span class=\"p\"><span class=\"pre\">]</span></span></span></em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"_modules/zict/sieve.html#Sieve\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#zict.Sieve\" title=\"Link to this definition\">\u00b6</a></dt><dd><p>Store values in different mappings based on a selector\u2019soutput.</p><p>This creates a MutableMapping combining several underlyingMutableMappings for storage.  Items are dispatched based ona selector function provided by the user.</p><dl class=\"field-list simple\"><dt class=\"field-odd\">Parameters<span class=\"colon\">:</span></dt><dd class=\"field-odd\"><dl class=\"simple\"><dt><strong>mappings: dict of {mapping key: MutableMapping}</strong></dt><dd></dd><dt><strong>selector: callable (key, value) -&gt; mapping key</strong></dt><dd></dd></dl></dd></dl><p class=\"rubric\">Notes</p><p>If you call methods of this class from multiple threads, access will be fast as longas the <code class=\"docutils literal notranslate\"><span class=\"pre\">__contains__</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">__delitem__</span></code> methods of all underlying mappins arefast. <code class=\"docutils literal notranslate\"><span class=\"pre\">__getitem__</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">__setitem__</span></code> methods of the underlying mappings are notprotected by locks.</p><p class=\"rubric\">Examples</p><div class=\"doctest highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">small</span> <span class=\"o\">=</span> <span class=\"p\">{}</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">large</span> <span class=\"o\">=</span> <span class=\"n\">DataBase</span><span class=\"p\">()</span>                        <span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">mappings</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"kc\">True</span><span class=\"p\">:</span> <span class=\"n\">small</span><span class=\"p\">,</span> <span class=\"kc\">False</span><span class=\"p\">:</span> <span class=\"n\">large</span><span class=\"p\">}</span>    <span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">def</span> <span class=\"nf\">is_small</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">):</span>                 <span class=\"gp\">... </span>    <span class=\"k\">return</span> <span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">getsizeof</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">)</span> <span class=\"o\">&lt;</span> <span class=\"mi\">10000</span>   <span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">d</span> <span class=\"o\">=</span> <span class=\"n\">Sieve</span><span class=\"p\">(</span><span class=\"n\">mappings</span><span class=\"p\">,</span> <span class=\"n\">is_small</span><span class=\"p\">)</span>             </pre></div></div><dl class=\"py method\"><dt class=\"sig sig-object py\" id=\"zict.Sieve.close\"><span class=\"sig-name descname\"><span class=\"pre\">close</span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span> <span class=\"sig-return\"><span class=\"sig-return-icon\">&#x2192;</span> <span class=\"sig-return-typehint\"><span class=\"pre\">None</span></span></span><a class=\"reference internal\" href=\"_modules/zict/sieve.html#Sieve.close\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#zict.Sieve.close\" title=\"Link to this definition\">\u00b6</a></dt><dd><p>Release any system resources held by this object</p></dd></dl></dd></dl><dl class=\"py class\"><dt class=\"sig sig-object py\" id=\"zict.Zip\"><em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><span class=\"sig-prename descclassname\"><span class=\"pre\">zict.</span></span><span class=\"sig-name descname\"><span class=\"pre\">Zip</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">filename</span></span><span class=\"p\"><span class=\"pre\">:</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">str</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">mode</span></span><span class=\"p\"><span class=\"pre\">:</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">Literal</span><span class=\"p\"><span class=\"pre\">[</span></span><span class=\"s\"><span class=\"pre\">'r'</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"s\"><span class=\"pre\">'w'</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"s\"><span class=\"pre\">'x'</span></span><span class=\"p\"><span class=\"pre\">,</span></span><span class=\"w\"> </span><span class=\"s\"><span class=\"pre\">'a'</span></span><span class=\"p\"><span class=\"pre\">]</span></span></span><span class=\"w\"> </span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"default_value\"><span class=\"pre\">'a'</span></span></em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"_modules/zict/zip.html#Zip\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#zict.Zip\" title=\"Link to this definition\">\u00b6</a></dt><dd><p>Mutable Mapping interface to a Zip file</p><p>Keys must be strings, values must be bytes</p><dl class=\"field-list simple\"><dt class=\"field-odd\">Parameters<span class=\"colon\">:</span></dt><dd class=\"field-odd\"><dl class=\"simple\"><dt><strong>filename: string</strong></dt><dd></dd><dt><strong>mode: string, (\u2018r\u2019, \u2018w\u2019, \u2018a\u2019), defaults to \u2018a\u2019</strong></dt><dd></dd></dl></dd></dl><p class=\"rubric\">Notes</p><p>None of this class is thread-safe - not even normally trivial methods such as<code class=\"docutils literal notranslate\"><span class=\"pre\">__len__</span> <span class=\"pre\">``</span> <span class=\"pre\">or</span> <span class=\"pre\">``__contains__</span></code>.</p><p class=\"rubric\">Examples</p><div class=\"doctest highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">z</span> <span class=\"o\">=</span> <span class=\"n\">Zip</span><span class=\"p\">(</span><span class=\"s1\">&#39;myfile.zip&#39;</span><span class=\"p\">)</span>  <span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">z</span><span class=\"p\">[</span><span class=\"s1\">&#39;x&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"sa\">b</span><span class=\"s1\">&#39;123&#39;</span>  <span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">z</span><span class=\"p\">[</span><span class=\"s1\">&#39;x&#39;</span><span class=\"p\">]</span>  <span class=\"go\">b&#39;123&#39;</span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">z</span><span class=\"o\">.</span><span class=\"n\">flush</span><span class=\"p\">()</span>  <span class=\"c1\"># flush and write metadata to disk  </span></pre></div></div></dd></dl><p>Additionally, <strong>zict</strong> makes available the following general-purpose objects:</p><dl class=\"py class\"><dt class=\"sig sig-object py\" id=\"zict.InsertionSortedSet\"><em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><span class=\"sig-prename descclassname\"><span class=\"pre\">zict.</span></span><span class=\"sig-name descname\"><span class=\"pre\">InsertionSortedSet</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">other</span></span><span class=\"p\"><span class=\"pre\">:</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">Iterable</span><span class=\"p\"><span class=\"pre\">[</span></span><span class=\"pre\">T</span><span class=\"p\"><span class=\"pre\">]</span></span></span><span class=\"w\"> </span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"default_value\"><span class=\"pre\">()</span></span></em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"_modules/zict/utils.html#InsertionSortedSet\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#zict.InsertionSortedSet\" title=\"Link to this definition\">\u00b6</a></dt><dd><p>A set-like that retains insertion order, like a dict. Thread-safe.</p><p>Equality does not compare order or class, but only compares against the contents ofany other set-like, coherently with dict and the AbstractSet design.</p><dl class=\"py method\"><dt class=\"sig sig-object py\" id=\"zict.InsertionSortedSet.add\"><span class=\"sig-name descname\"><span class=\"pre\">add</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">value</span></span><span class=\"p\"><span class=\"pre\">:</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">T</span></span></em><span class=\"sig-paren\">)</span> <span class=\"sig-return\"><span class=\"sig-return-icon\">&#x2192;</span> <span class=\"sig-return-typehint\"><span class=\"pre\">None</span></span></span><a class=\"reference internal\" href=\"_modules/zict/utils.html#InsertionSortedSet.add\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#zict.InsertionSortedSet.add\" title=\"Link to this definition\">\u00b6</a></dt><dd><p>Add element to the set. If the element is already in the set, retain originalinsertion order.</p></dd></dl><dl class=\"py method\"><dt class=\"sig sig-object py\" id=\"zict.InsertionSortedSet.clear\"><span class=\"sig-name descname\"><span class=\"pre\">clear</span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span> <span class=\"sig-return\"><span class=\"sig-return-icon\">&#x2192;</span> <span class=\"sig-return-typehint\"><span class=\"pre\">None</span></span></span><a class=\"reference internal\" href=\"_modules/zict/utils.html#InsertionSortedSet.clear\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#zict.InsertionSortedSet.clear\" title=\"Link to this definition\">\u00b6</a></dt><dd><p>This is slow (creates N new iterators!) but effective.</p></dd></dl><dl class=\"py method\"><dt class=\"sig sig-object py\" id=\"zict.InsertionSortedSet.discard\"><span class=\"sig-name descname\"><span class=\"pre\">discard</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">value</span></span><span class=\"p\"><span class=\"pre\">:</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">T</span></span></em><span class=\"sig-paren\">)</span> <span class=\"sig-return\"><span class=\"sig-return-icon\">&#x2192;</span> <span class=\"sig-return-typehint\"><span class=\"pre\">None</span></span></span><a class=\"reference internal\" href=\"_modules/zict/utils.html#InsertionSortedSet.discard\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#zict.InsertionSortedSet.discard\" title=\"Link to this definition\">\u00b6</a></dt><dd><p>Remove an element.  Do not raise an exception if absent.</p></dd></dl><dl class=\"py method\"><dt class=\"sig sig-object py\" id=\"zict.InsertionSortedSet.pop\"><span class=\"sig-name descname\"><span class=\"pre\">pop</span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span> <span class=\"sig-return\"><span class=\"sig-return-icon\">&#x2192;</span> <span class=\"sig-return-typehint\"><span class=\"pre\">T</span></span></span><a class=\"headerlink\" href=\"#zict.InsertionSortedSet.pop\" title=\"Link to this definition\">\u00b6</a></dt><dd><p>Pop the latest-inserted key from the set</p></dd></dl><dl class=\"py method\"><dt class=\"sig sig-object py\" id=\"zict.InsertionSortedSet.popleft\"><span class=\"sig-name descname\"><span class=\"pre\">popleft</span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span> <span class=\"sig-return\"><span class=\"sig-return-icon\">&#x2192;</span> <span class=\"sig-return-typehint\"><span class=\"pre\">T</span></span></span><a class=\"reference internal\" href=\"_modules/zict/utils.html#InsertionSortedSet.popleft\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#zict.InsertionSortedSet.popleft\" title=\"Link to this definition\">\u00b6</a></dt><dd><p>Pop the oldest-inserted key from the set</p></dd></dl><dl class=\"py method\"><dt class=\"sig sig-object py\" id=\"zict.InsertionSortedSet.popright\"><span class=\"sig-name descname\"><span class=\"pre\">popright</span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span> <span class=\"sig-return\"><span class=\"sig-return-icon\">&#x2192;</span> <span class=\"sig-return-typehint\"><span class=\"pre\">T</span></span></span><a class=\"reference internal\" href=\"_modules/zict/utils.html#InsertionSortedSet.popright\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#zict.InsertionSortedSet.popright\" title=\"Link to this definition\">\u00b6</a></dt><dd><p>Pop the latest-inserted key from the set</p></dd></dl><dl class=\"py method\"><dt class=\"sig sig-object py\" id=\"zict.InsertionSortedSet.remove\"><span class=\"sig-name descname\"><span class=\"pre\">remove</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">value</span></span><span class=\"p\"><span class=\"pre\">:</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">T</span></span></em><span class=\"sig-paren\">)</span> <span class=\"sig-return\"><span class=\"sig-return-icon\">&#x2192;</span> <span class=\"sig-return-typehint\"><span class=\"pre\">None</span></span></span><a class=\"reference internal\" href=\"_modules/zict/utils.html#InsertionSortedSet.remove\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#zict.InsertionSortedSet.remove\" title=\"Link to this definition\">\u00b6</a></dt><dd><p>Remove an element. If not a member, raise a KeyError.</p></dd></dl></dd></dl><dl class=\"py class\"><dt class=\"sig sig-object py\" id=\"zict.WeakValueMapping\"><em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><span class=\"sig-prename descclassname\"><span class=\"pre\">zict.</span></span><span class=\"sig-name descname\"><span class=\"pre\">WeakValueMapping</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">other</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">()</span></span></em>, <em class=\"sig-param\"><span class=\"o\"><span class=\"pre\">/</span></span></em>, <em class=\"sig-param\"><span class=\"o\"><span class=\"pre\">**</span></span><span class=\"n\"><span class=\"pre\">kw</span></span></em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"_modules/zict/cache.html#WeakValueMapping\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#zict.WeakValueMapping\" title=\"Link to this definition\">\u00b6</a></dt><dd><p>Variant of weakref.WeakValueDictionary which silently ignores objects thatcan\u2019t be referenced by a weakref.ref</p></dd></dl></section><section id=\"changelog\"><h2>Changelog<a class=\"headerlink\" href=\"#changelog\" title=\"Link to this heading\">\u00b6</a></h2><p>Release notes can be found <a class=\"reference internal\" href=\"changelog.html\"><span class=\"doc\">here</span></a>.</p></section></section>          </div>                  </div>      </div>      <div class=\"sphinxsidebar\" role=\"navigation\" aria-label=\"main navigation\">        <div class=\"sphinxsidebarwrapper\"><h1 class=\"logo\"><a href=\"#\">zict</a></h1><h3>Navigation</h3><div class=\"relations\"><h3>Related Topics</h3><ul>  <li><a href=\"#\">Documentation overview</a><ul>  </ul></li></ul></div><div id=\"searchbox\" style=\"display: none\" role=\"search\">  <h3 id=\"searchlabel\">Quick search</h3>    <div class=\"searchformwrapper\">    <form class=\"search\" action=\"search.html\" method=\"get\">      <input type=\"text\" name=\"q\" aria-labelledby=\"searchlabel\" autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\"/>      <input type=\"submit\" value=\"Go\" />    </form>    </div></div><script>document.getElementById('searchbox').style.display = \"block\"</script>        </div>      </div>      <div class=\"clearer\"></div>    </div>    <div class=\"footer\">      &copy;2016, Matthew Rocklin.            |      Powered by <a href=\"http://sphinx-doc.org/\">Sphinx 7.2.6</a>      &amp; <a href=\"https://github.com/bitprophet/alabaster\">Alabaster 0.7.13</a>            |      <a href=\"_sources/index.rst.txt\"          rel=\"nofollow\">Page source</a>    </div>          </body></html>",
  "embeddings": []
}
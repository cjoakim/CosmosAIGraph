{
  "libtype": "pypi",
  "libname": "autoapi",
  "url": "https://autoapi.readthedocs.org/",
  "html": "<!DOCTYPE html><!--[if IE 8]><html class=\"no-js lt-ie9\" lang=\"en\" > <![endif]--><!--[if gt IE 8]><!--> <html class=\"no-js\" lang=\"en\" > <!--<![endif]--><head>  <meta charset=\"utf-8\">    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">    <title>AutoAPI &mdash; autoapi 1.4.0 documentation</title>              <script type=\"text/javascript\" src=\"_static/js/modernizr.min.js\"></script>            <script type=\"text/javascript\" id=\"documentation_options\" data-url_root=\"./\" src=\"_static/documentation_options.js\"></script>        <script type=\"text/javascript\" src=\"_static/jquery.js\"></script>        <script type=\"text/javascript\" src=\"_static/underscore.js\"></script>        <script type=\"text/javascript\" src=\"_static/doctools.js\"></script>        <script type=\"text/javascript\" src=\"_static/language_data.js\"></script>        <script type=\"text/javascript\" src=\"https://assets.readthedocs.org/static/javascript/readthedocs-doc-embed.js\"></script>        <script type=\"text/javascript\" src=\"_static/js/theme.js\"></script>        <link rel=\"stylesheet\" href=\"_static/css/theme.css\" type=\"text/css\" />  <link rel=\"stylesheet\" href=\"_static/pygments.css\" type=\"text/css\" />  <link rel=\"stylesheet\" href=\"_static/graphviz.css\" type=\"text/css\" />  <link rel=\"stylesheet\" href=\"_static/styles/custom.css\" type=\"text/css\" />    <link rel=\"index\" title=\"Index\" href=\"genindex.html\" />    <link rel=\"search\" title=\"Search\" href=\"search.html\" />    <link rel=\"next\" title=\"Developer Guide\" href=\"developer.html\" /> <!-- RTD Extra Head --><!-- Always link to the latest version, as canonical.http://docs.readthedocs.org/en/latest/canonical.html--><link rel=\"canonical\" href=\"https://autoapi.readthedocs.io/\" /><link rel=\"stylesheet\" href=\"https://assets.readthedocs.org/static/css/readthedocs-doc-embed.css\" type=\"text/css\" /><script type=\"text/javascript\" src=\"_static/readthedocs-data.js\"></script><!-- Add page-specific data, which must exist in the page js, not global --><script type=\"text/javascript\">READTHEDOCS_DATA['page'] = \"index\"READTHEDOCS_DATA['source_suffix'] = \".rst\"</script><script type=\"text/javascript\" src=\"https://assets.readthedocs.org/static/javascript/readthedocs-analytics.js\"></script><!-- end RTD <extrahead> --></head><body class=\"wy-body-for-nav\">     <div class=\"wy-grid-for-nav\">        <nav data-toggle=\"wy-nav-shift\" class=\"wy-nav-side\">      <div class=\"wy-side-scroll\">        <div class=\"wy-side-nav-search\" >                                <a href=\"#\" class=\"icon icon-home\"> autoapi                              </a>                                                            <div class=\"version\">                latest              </div>                                <div role=\"search\">  <form id=\"rtd-search-form\" class=\"wy-form\" action=\"search.html\" method=\"get\">    <input type=\"text\" name=\"q\" placeholder=\"Search docs\" />    <input type=\"hidden\" name=\"check_keywords\" value=\"yes\" />    <input type=\"hidden\" name=\"area\" value=\"default\" />  </form></div>                  </div>        <div class=\"wy-menu wy-menu-vertical\" data-spy=\"affix\" role=\"navigation\" aria-label=\"main navigation\">                                                                                      <ul><li class=\"toctree-l1\"><a class=\"reference internal\" href=\"developer.html\">Developer Guide</a></li><li class=\"toctree-l1\"><a class=\"reference internal\" href=\"autoapi/autoapi.html\"><code class=\"docutils literal notranslate\"><span class=\"pre\">autoapi</span></code></a></li><li class=\"toctree-l1\"><a class=\"reference internal\" href=\"autoapi/documented.html\"><code class=\"docutils literal notranslate\"><span class=\"pre\">documented</span></code></a></li></ul>                              </div>      </div>    </nav>    <section data-toggle=\"wy-nav-shift\" class=\"wy-nav-content-wrap\">            <nav class=\"wy-nav-top\" aria-label=\"top navigation\">                  <i data-toggle=\"wy-nav-top\" class=\"fa fa-bars\"></i>          <a href=\"#\">autoapi</a>              </nav>      <div class=\"wy-nav-content\">                <div class=\"rst-content\">                  <div role=\"navigation\" aria-label=\"breadcrumbs navigation\">  <ul class=\"wy-breadcrumbs\">          <li><a href=\"#\">Docs</a> &raquo;</li>              <li>AutoAPI</li>              <li class=\"wy-breadcrumbs-aside\">                                              <a href=\"https://github.com/carlos-jenkins/autoapi/blob/master/doc/index.rst\" class=\"fa fa-github\"> Edit on GitHub</a>                                    </li>      </ul>    <hr/></div>          <div role=\"main\" class=\"document\" itemscope=\"itemscope\" itemtype=\"http://schema.org/Article\">           <div itemprop=\"articleBody\">              <div class=\"toctree-wrapper compound\"></div><div class=\"section\" id=\"autoapi\"><h1>AutoAPI<a class=\"headerlink\" href=\"#autoapi\" title=\"Permalink to this headline\">\u00b6</a></h1><div class=\"float-right docutils container\"><img alt=\"_images/logo.png\" src=\"_images/logo.png\" /></div><p>Automatic Python API reference documentation generator for Sphinx, inspired byDoxygen.</p><p>AutoAPI is a <a class=\"reference external\" href=\"http://sphinx-doc.org/\">Sphinx</a> extension that allows to automatically generateAPI reference documentation for Python packages(<a class=\"reference internal\" href=\"autoapi/documented.html\"><span class=\"doc\">example</span></a>), recursively, without any interventionfrom the developer. It will discover all the package modules and their publicobjects and document them.</p><div class=\"contents local topic\" id=\"contents\"><ul class=\"simple\"><li><a class=\"reference internal\" href=\"#usage\" id=\"id2\">Usage</a></li><li><a class=\"reference internal\" href=\"#documenting-the-code\" id=\"id3\">Documenting the code</a></li><li><a class=\"reference internal\" href=\"#customizing\" id=\"id4\">Customizing</a><ul><li><a class=\"reference internal\" href=\"#overriding-the-default-template\" id=\"id5\">Overriding the default template</a></li><li><a class=\"reference internal\" href=\"#using-different-templates\" id=\"id6\">Using different templates</a></li></ul></li><li><a class=\"reference internal\" href=\"#improvements\" id=\"id7\">Improvements</a></li><li><a class=\"reference internal\" href=\"#contributing\" id=\"id8\">Contributing</a></li><li><a class=\"reference internal\" href=\"#development\" id=\"id9\">Development</a></li><li><a class=\"reference internal\" href=\"#license\" id=\"id10\">License</a></li></ul></div><div class=\"section\" id=\"usage\"><h2><a class=\"toc-backref\" href=\"#id2\">Usage</a><a class=\"headerlink\" href=\"#usage\" title=\"Permalink to this headline\">\u00b6</a></h2><ol class=\"arabic\"><li><p class=\"first\">Install:</p><div class=\"highlight-sh notranslate\"><div class=\"highlight\"><pre><span></span>pip install autoapi</pre></div></div><p>Or if using <a class=\"reference external\" href=\"https://virtualenv.pypa.io/\">Virtualenv</a> or <a class=\"reference external\" href=\"https://tox.readthedocs.org/\">Tox</a> (and you should) add it to your<em>requirements.txt</em> (or <em>requirements.dev.txt</em> if you want to separateyour package requirements from the development requirements).</p></li><li><p class=\"first\">Add AutoAPI to your extensions:</p><p>In your <a class=\"reference external\" href=\"http://sphinx-doc.org/\">Sphinx</a> <code class=\"docutils literal notranslate\"><span class=\"pre\">conf.py</span></code> configuration file add <code class=\"docutils literal notranslate\"><span class=\"pre\">autoapi.sphinx</span></code>:</p><div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">extensions</span> <span class=\"o\">=</span> <span class=\"p\">[</span>    <span class=\"s1\">&#39;sphinx.ext.autodoc&#39;</span><span class=\"p\">,</span>    <span class=\"s1\">&#39;sphinx.ext.inheritance_diagram&#39;</span><span class=\"p\">,</span>    <span class=\"s1\">&#39;autoapi.sphinx&#39;</span><span class=\"p\">]</span></pre></div></div><p>Make sure to have <code class=\"docutils literal notranslate\"><span class=\"pre\">autodoc</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">inheritance_diagram</span></code> too because thedefault generation template will use them.</p></li><li><p class=\"first\">Configure AutoAPI with the root modules you want to generate documentationfor:</p><p>In your project <code class=\"docutils literal notranslate\"><span class=\"pre\">conf.py</span></code> file define the <code class=\"docutils literal notranslate\"><span class=\"pre\">autoapi_modules</span></code> dictionaryvariable with the module names as keys:</p><div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">autoapi_modules</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">&#39;mymodule&#39;</span><span class=\"p\">:</span> <span class=\"bp\">None</span><span class=\"p\">}</span></pre></div></div><p>This dictionary maps the module names with the options for generation forthat module:</p><table class=\"docutils field-list\" frame=\"void\" rules=\"none\"><col class=\"field-name\" /><col class=\"field-body\" /><tbody valign=\"top\"><tr class=\"field-odd field\"><th class=\"field-name\">prune:</th><td class=\"field-body\"><p class=\"first\"><code class=\"docutils literal notranslate\"><span class=\"pre\">bool</span> <span class=\"pre\">[False]</span></code>The package to document is modeled as a tree, and each submodule is a nodeof that tree.A node is considered relevant if it has a public interface that needs tobe documented or it is required to reach a node that has a publicinterface.If <code class=\"docutils literal notranslate\"><span class=\"pre\">prune</span></code> is set to <code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code>, all branches that aren\u2019t relevant will besilently ignored. If <code class=\"docutils literal notranslate\"><span class=\"pre\">False</span></code>, all branches will be generated, even forthose modules that do not possess a public interface.</p></td></tr><tr class=\"field-even field\"><th class=\"field-name\">override:</th><td class=\"field-body\"><p class=\"first\"><code class=\"docutils literal notranslate\"><span class=\"pre\">bool</span> <span class=\"pre\">[True]</span></code>Regenerate the reference pages even if they exists. AutoAPI by default isautomatic, but if you prefer to use it like <a class=\"reference external\" href=\"http://sphinx-doc.org/latest/ext/autosummary.html#generating-stub-pages-automatically\">autosummary_generate</a> andcreate stub pages for later manual edition set the <code class=\"docutils literal notranslate\"><span class=\"pre\">override</span></code> flag to<code class=\"docutils literal notranslate\"><span class=\"pre\">False</span></code> and commit the generated pages to your version control.On the other hand, if fully automatic reference documentation generationis preferred put the output folder of this module in your version controlignore file.</p></td></tr><tr class=\"field-odd field\"><th class=\"field-name\">template:</th><td class=\"field-body\"><p class=\"first\"><code class=\"docutils literal notranslate\"><span class=\"pre\">str</span> <span class=\"pre\">['module']</span></code>Template name to use. This option can be changed to use different templatesfor different modules. See the section <a class=\"reference internal\" href=\"#different-templates\"><span class=\"std std-ref\">Using different templates</span></a>.</p></td></tr><tr class=\"field-even field\"><th class=\"field-name\">output:</th><td class=\"field-body\"><p class=\"first\"><code class=\"docutils literal notranslate\"><span class=\"pre\">str</span> <span class=\"pre\">[module]</span></code>Output folder to generate the documentation for this module relative tothe folder where your <code class=\"docutils literal notranslate\"><span class=\"pre\">conf.py</span></code> is located. By default the output folderis the same as the module key. For example, for <code class=\"docutils literal notranslate\"><span class=\"pre\">mymodule</span></code> the followingcould be generated:</p><div class=\"last highlight-text notranslate\"><div class=\"highlight\"><pre><span></span>.|-- conf.py`-- mymodule    |-- mymodule.rst    |-- mymodule.submodule.rst    `-- mymodule.another.rst</pre></div></div></td></tr></tbody></table><p>For example, a custom configuration could be:</p><div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">autoapi_modules</span> <span class=\"o\">=</span> <span class=\"p\">{</span>   <span class=\"s1\">&#39;mymodule&#39;</span><span class=\"p\">:</span> <span class=\"p\">{</span>      <span class=\"s1\">&#39;override&#39;</span><span class=\"p\">:</span> <span class=\"bp\">False</span><span class=\"p\">,</span>      <span class=\"s1\">&#39;output&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;auto&#39;</span>   <span class=\"p\">}</span><span class=\"p\">}</span></pre></div></div></li><li><p class=\"first\">Reference your documentation in your Sphinx project:</p><p>Add in one of your reST source files a reference to the documentation.</p><div class=\"highlight-rest notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"p\">..</span> <span class=\"ow\">toctree</span><span class=\"p\">::</span>   <span class=\"nc\">:hidden:</span>   mymodule/mymodule</pre></div></div><p>And, optionally, you can link to it like this:</p><div class=\"highlight-rest notranslate\"><div class=\"highlight\"><pre><span></span>See the <span class=\"na\">:doc:</span><span class=\"nv\">`reference documentation &lt;mymodule/mymodule&gt;`</span>.</pre></div></div></li><li><p class=\"first\">Prepare your codebase:</p><p>Now in your modules, put all the elements you want to document in the<code class=\"docutils literal notranslate\"><span class=\"pre\">__all__</span></code> or the <code class=\"docutils literal notranslate\"><span class=\"pre\">__api__</span></code> listings. See the section<a class=\"reference internal\" href=\"#documenting-the-code\"><span class=\"std std-ref\">Documenting the code</span></a>.</p></li></ol></div><div class=\"section\" id=\"documenting-the-code\"><span id=\"id1\"></span><h2><a class=\"toc-backref\" href=\"#id3\">Documenting the code</a><a class=\"headerlink\" href=\"#documenting-the-code\" title=\"Permalink to this headline\">\u00b6</a></h2><p>The strict minimum:</p><ul class=\"simple\"><li>List all public objects in your <code class=\"docutils literal notranslate\"><span class=\"pre\">__all__</span></code> (preferred) or <code class=\"docutils literal notranslate\"><span class=\"pre\">__api__</span></code>.</li><li>Put at least a docstring with a brief in your module, in all your publicclasses, methods, functions and variables.</li></ul><p>Even better:</p><ul class=\"simple\"><li>Use the <a class=\"reference external\" href=\"http://sphinx-doc.org/ext/autodoc.html\">autodoc</a> syntax in your docstrings (or use other that autodocsupports).</li></ul><p>Use the following example as a guide. Check corresponding<a class=\"reference internal\" href=\"autoapi/documented.html\"><span class=\"doc\">documentation</span></a> produced by AutoAPI.</p><div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"c1\"># -*- coding: utf-8 -*-</span><span class=\"sd\">&quot;&quot;&quot;</span><span class=\"sd\">This is my module brief line.</span><span class=\"sd\">This is a more complete paragraph documenting my module.</span><span class=\"sd\">- A list item.</span><span class=\"sd\">- Another list item.</span><span class=\"sd\">This section can use any reST syntax.</span><span class=\"sd\">&quot;&quot;&quot;</span><span class=\"n\">A_CONSTANT</span> <span class=\"o\">=</span> <span class=\"mi\">1000</span><span class=\"sd\">&quot;&quot;&quot;This is an important constant.&quot;&quot;&quot;</span><span class=\"n\">YET_ANOTHER</span> <span class=\"o\">=</span> <span class=\"p\">{</span>    <span class=\"s1\">&#39;this&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;that&#39;</span><span class=\"p\">,</span>    <span class=\"s1\">&#39;jam&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;eggs&#39;</span><span class=\"p\">,</span>    <span class=\"s1\">&#39;yet&#39;</span><span class=\"p\">:</span> <span class=\"p\">{</span>        <span class=\"s1\">&#39;things&#39;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"s1\">&#39;a&#39;</span><span class=\"p\">],</span>        <span class=\"s1\">&#39;tuples&#39;</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"n\">A_CONSTANT</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">)</span>    <span class=\"p\">}</span><span class=\"p\">}</span><span class=\"sd\">&quot;&quot;&quot;Yet another public constant variable&quot;&quot;&quot;</span><span class=\"k\">def</span> <span class=\"nf\">a_function</span><span class=\"p\">(</span><span class=\"n\">my_arg</span><span class=\"p\">,</span> <span class=\"n\">another</span><span class=\"p\">):</span>    <span class=\"sd\">&quot;&quot;&quot;</span><span class=\"sd\">    This is the brief description of my function.</span><span class=\"sd\">    This is a more complete example of my function. It can include doctest,</span><span class=\"sd\">    code blocks or any other reST structure.</span><span class=\"sd\">    &gt;&gt;&gt; a_function(10, [MyClass(&#39;a&#39;), MyClass(&#39;b&#39;)])</span><span class=\"sd\">    20</span><span class=\"sd\">    :param int my_arg: The first argument of the function. Just a number.</span><span class=\"sd\">    :param another: The other argument of the important function.</span><span class=\"sd\">    :type another: A list of :class:`MyClass`</span><span class=\"sd\">    :return: The length of the second argument times the first argument.</span><span class=\"sd\">    :rtype: int</span><span class=\"sd\">    &quot;&quot;&quot;</span>    <span class=\"k\">return</span> <span class=\"n\">my_arg</span> <span class=\"o\">*</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">another</span><span class=\"p\">)</span><span class=\"k\">class</span> <span class=\"nc\">MyClass</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>    <span class=\"sd\">&quot;&quot;&quot;</span><span class=\"sd\">    This is the brief of my main class.</span><span class=\"sd\">    A more general description of what the class does.</span><span class=\"sd\">    :param int param1: The first parameter of my class.</span><span class=\"sd\">    :param param2: The second one.</span><span class=\"sd\">    :type param2: int or float</span><span class=\"sd\">    :var my_attribute: Just an instance attribute.</span><span class=\"sd\">    :raises TypeError: if param2 is not None.</span><span class=\"sd\">    &quot;&quot;&quot;</span>    <span class=\"n\">class_attribute</span> <span class=\"o\">=</span> <span class=\"mi\">625</span>    <span class=\"sd\">&quot;&quot;&quot;This is a class attribute.&quot;&quot;&quot;</span>    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">param1</span><span class=\"p\">,</span> <span class=\"n\">param2</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">param1</span> <span class=\"o\">=</span> <span class=\"n\">param1</span>        <span class=\"k\">if</span> <span class=\"n\">param2</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>            <span class=\"k\">raise</span> <span class=\"ne\">TypeError</span><span class=\"p\">()</span>        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">param2</span> <span class=\"o\">=</span> <span class=\"n\">param2</span>        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">my_attribute</span> <span class=\"o\">=</span> <span class=\"mi\">100</span>    <span class=\"k\">def</span> <span class=\"nf\">my_method</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">param1</span><span class=\"p\">,</span> <span class=\"n\">param2</span><span class=\"p\">):</span>        <span class=\"sd\">&quot;&quot;&quot;</span><span class=\"sd\">        The brief of this method.</span><span class=\"sd\">        This method does many many important things.</span><span class=\"sd\">        :param int param1: A parameter.</span><span class=\"sd\">        :param list param2: Another parameter.</span><span class=\"sd\">        :return: A list of the first parameter as long a the length of the</span><span class=\"sd\">         second parameter.</span><span class=\"sd\">        :rtype: list of int</span><span class=\"sd\">        &quot;&quot;&quot;</span>        <span class=\"k\">return</span> <span class=\"p\">[</span><span class=\"n\">param1</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">param2</span><span class=\"p\">)</span><span class=\"k\">class</span> <span class=\"nc\">AnotherClass</span><span class=\"p\">(</span><span class=\"n\">MyClass</span><span class=\"p\">):</span>    <span class=\"sd\">&quot;&quot;&quot;</span><span class=\"sd\">    This another class.</span><span class=\"sd\">    Check the nice inheritance diagram. See :class:`MyClass`.</span><span class=\"sd\">    &quot;&quot;&quot;</span><span class=\"k\">class</span> <span class=\"nc\">MyException</span><span class=\"p\">(</span><span class=\"ne\">Exception</span><span class=\"p\">):</span>    <span class=\"sd\">&quot;&quot;&quot;</span><span class=\"sd\">    This is my custom exception.</span><span class=\"sd\">    This is a more complete description of what my exception does. Again, you</span><span class=\"sd\">    can be as verbose as you want here.</span><span class=\"sd\">    &quot;&quot;&quot;</span><span class=\"n\">__all__</span> <span class=\"o\">=</span> <span class=\"p\">[</span>    <span class=\"s1\">&#39;A_CONSTANT&#39;</span><span class=\"p\">,</span>    <span class=\"s1\">&#39;YET_ANOTHER&#39;</span><span class=\"p\">,</span>    <span class=\"s1\">&#39;a_function&#39;</span><span class=\"p\">,</span>    <span class=\"s1\">&#39;MyClass&#39;</span><span class=\"p\">,</span>    <span class=\"s1\">&#39;AnotherClass&#39;</span><span class=\"p\">,</span>    <span class=\"s1\">&#39;MyException&#39;</span><span class=\"p\">]</span></pre></div></div></div><div class=\"section\" id=\"customizing\"><h2><a class=\"toc-backref\" href=\"#id4\">Customizing</a><a class=\"headerlink\" href=\"#customizing\" title=\"Permalink to this headline\">\u00b6</a></h2><p>AutoAPI provides several ways to customize the output generated by the tool.AutoAPI uses the <a class=\"reference external\" href=\"http://jinja.pocoo.org/\">Jinja2</a> template engine for page generation.</p><div class=\"section\" id=\"overriding-the-default-template\"><h3><a class=\"toc-backref\" href=\"#id5\">Overriding the default template</a><a class=\"headerlink\" href=\"#overriding-the-default-template\" title=\"Permalink to this headline\">\u00b6</a></h3><p>The <a class=\"reference external\" href=\"https://raw.githubusercontent.com/carlos-jenkins/autoapi/master/lib/autoapi/templates/autoapi/module.rst\">default template</a> used by <code class=\"docutils literal notranslate\"><span class=\"pre\">autoapi</span></code> can be customized to meet yourneeds. To do so, copy the default template and put it in your<code class=\"docutils literal notranslate\"><span class=\"pre\">templates_path</span></code> (usually <code class=\"docutils literal notranslate\"><span class=\"pre\">_templates</span></code>) folder under:</p><div class=\"highlight-text notranslate\"><div class=\"highlight\"><pre><span></span>&lt;templates_path&gt;/autoapi/module.rst</pre></div></div><p>The next run <a class=\"reference external\" href=\"http://sphinx-doc.org/\">Sphinx</a> will use it for all your modules documentation generation.</p></div><div class=\"section\" id=\"using-different-templates\"><span id=\"different-templates\"></span><h3><a class=\"toc-backref\" href=\"#id6\">Using different templates</a><a class=\"headerlink\" href=\"#using-different-templates\" title=\"Permalink to this headline\">\u00b6</a></h3><p>Instead of providing a single template for all your modules you can also setupdifferent templates for different modules. For example, for you module<code class=\"docutils literal notranslate\"><span class=\"pre\">mymod</span></code> you choose to use the template <code class=\"docutils literal notranslate\"><span class=\"pre\">mymodtemplate</span></code>. In your <code class=\"docutils literal notranslate\"><span class=\"pre\">conf.py</span></code>the following is setup:</p><div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"c1\"># autoapi configuration</span><span class=\"n\">autoapi_modules</span> <span class=\"o\">=</span> <span class=\"p\">{</span>    <span class=\"s1\">&#39;mymod&#39;</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">&#39;template&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;mymodtemplate&#39;</span><span class=\"p\">}</span><span class=\"p\">}</span></pre></div></div><p>Now you need to place your template in:</p><div class=\"highlight-text notranslate\"><div class=\"highlight\"><pre><span></span>&lt;templates_path&gt;/autoapi/mymodtemplate.rst</pre></div></div><p>And AutoAPI will use it for documenting <code class=\"docutils literal notranslate\"><span class=\"pre\">mymod</span></code> only.</p></div></div><div class=\"section\" id=\"improvements\"><h2><a class=\"toc-backref\" href=\"#id7\">Improvements</a><a class=\"headerlink\" href=\"#improvements\" title=\"Permalink to this headline\">\u00b6</a></h2><p>This is a list of possible improvements, its doesn\u2019t mean they are good ideaor that they should be implemented.</p><ul class=\"simple\"><li>Automatically hook the auto-generated files to the index document<code class=\"docutils literal notranslate\"><span class=\"pre\">toctree</span></code>.</li><li>Extend the <code class=\"docutils literal notranslate\"><span class=\"pre\">__api__</span></code> key to support a dictionary so each element thatrequires documentation can provide attributes individually(like show special members).</li><li>Generate an optional module index page with a different template(called index.rst at the module generation folder).</li></ul></div><div class=\"section\" id=\"contributing\"><h2><a class=\"toc-backref\" href=\"#id8\">Contributing</a><a class=\"headerlink\" href=\"#contributing\" title=\"Permalink to this headline\">\u00b6</a></h2><ul class=\"simple\"><li><a class=\"reference internal\" href=\"developer.html\"><span class=\"doc\">Developer Guide.</span></a></li><li><a class=\"reference internal\" href=\"autoapi/autoapi.html\"><span class=\"doc\">Internal Documentation Reference.</span></a></li></ul></div><div class=\"section\" id=\"development\"><h2><a class=\"toc-backref\" href=\"#id9\">Development</a><a class=\"headerlink\" href=\"#development\" title=\"Permalink to this headline\">\u00b6</a></h2><ul class=\"simple\"><li><a class=\"reference external\" href=\"https://github.com/carlos-jenkins/autoapi\">Project GitHub</a>.</li><li><a class=\"reference external\" href=\"https://pypi.python.org/pypi/autoapi/\">Project PyPI</a>.</li></ul></div><div class=\"section\" id=\"license\"><h2><a class=\"toc-backref\" href=\"#id10\">License</a><a class=\"headerlink\" href=\"#license\" title=\"Permalink to this headline\">\u00b6</a></h2><div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">Copyright</span> <span class=\"p\">(</span><span class=\"n\">C</span><span class=\"p\">)</span> <span class=\"mi\">2015</span><span class=\"o\">-</span><span class=\"mi\">2018</span> <span class=\"n\">KuraLabs</span> <span class=\"n\">S</span><span class=\"o\">.</span><span class=\"n\">R</span><span class=\"o\">.</span><span class=\"n\">L</span><span class=\"n\">Licensed</span> <span class=\"n\">under</span> <span class=\"n\">the</span> <span class=\"n\">Apache</span> <span class=\"n\">License</span><span class=\"p\">,</span> <span class=\"n\">Version</span> <span class=\"mf\">2.0</span> <span class=\"p\">(</span><span class=\"n\">the</span> <span class=\"s2\">&quot;License&quot;</span><span class=\"p\">);</span><span class=\"n\">you</span> <span class=\"n\">may</span> <span class=\"ow\">not</span> <span class=\"n\">use</span> <span class=\"n\">this</span> <span class=\"n\">file</span> <span class=\"k\">except</span> <span class=\"ow\">in</span> <span class=\"n\">compliance</span> <span class=\"k\">with</span> <span class=\"n\">the</span> <span class=\"n\">License</span><span class=\"o\">.</span><span class=\"n\">You</span> <span class=\"n\">may</span> <span class=\"n\">obtain</span> <span class=\"n\">a</span> <span class=\"n\">copy</span> <span class=\"n\">of</span> <span class=\"n\">the</span> <span class=\"n\">License</span> <span class=\"n\">at</span>    <span class=\"n\">http</span><span class=\"p\">:</span><span class=\"o\">//</span><span class=\"n\">www</span><span class=\"o\">.</span><span class=\"n\">apache</span><span class=\"o\">.</span><span class=\"n\">org</span><span class=\"o\">/</span><span class=\"n\">licenses</span><span class=\"o\">/</span><span class=\"n\">LICENSE</span><span class=\"o\">-</span><span class=\"mf\">2.0</span><span class=\"n\">Unless</span> <span class=\"n\">required</span> <span class=\"n\">by</span> <span class=\"n\">applicable</span> <span class=\"n\">law</span> <span class=\"ow\">or</span> <span class=\"n\">agreed</span> <span class=\"n\">to</span> <span class=\"ow\">in</span> <span class=\"n\">writing</span><span class=\"p\">,</span><span class=\"n\">software</span> <span class=\"n\">distributed</span> <span class=\"n\">under</span> <span class=\"n\">the</span> <span class=\"n\">License</span> <span class=\"ow\">is</span> <span class=\"n\">distributed</span> <span class=\"n\">on</span> <span class=\"n\">an</span><span class=\"s2\">&quot;AS IS&quot;</span> <span class=\"n\">BASIS</span><span class=\"p\">,</span> <span class=\"n\">WITHOUT</span> <span class=\"n\">WARRANTIES</span> <span class=\"n\">OR</span> <span class=\"n\">CONDITIONS</span> <span class=\"n\">OF</span> <span class=\"n\">ANY</span><span class=\"n\">KIND</span><span class=\"p\">,</span> <span class=\"n\">either</span> <span class=\"n\">express</span> <span class=\"ow\">or</span> <span class=\"n\">implied</span><span class=\"o\">.</span>  <span class=\"n\">See</span> <span class=\"n\">the</span> <span class=\"n\">License</span> <span class=\"k\">for</span> <span class=\"n\">the</span><span class=\"n\">specific</span> <span class=\"n\">language</span> <span class=\"n\">governing</span> <span class=\"n\">permissions</span> <span class=\"ow\">and</span> <span class=\"n\">limitations</span><span class=\"n\">under</span> <span class=\"n\">the</span> <span class=\"n\">License</span><span class=\"o\">.</span></pre></div></div></div></div>           </div>                     </div>          <footer>      <div class=\"rst-footer-buttons\" role=\"navigation\" aria-label=\"footer navigation\">              <a href=\"developer.html\" class=\"btn btn-neutral float-right\" title=\"Developer Guide\" accesskey=\"n\" rel=\"next\">Next <span class=\"fa fa-arrow-circle-right\"></span></a>                </div>    <hr/>  <div role=\"contentinfo\">    <p>        &copy; Copyright 2015-2018, KuraLabs S.R.L              <span class=\"commit\">          Revision <code>450dc1bc</code>.        </span>          </p>  </div>  Built with <a href=\"http://sphinx-doc.org/\">Sphinx</a> using a <a href=\"https://github.com/rtfd/sphinx_rtd_theme\">theme</a> provided by <a href=\"https://readthedocs.org\">Read the Docs</a>. </footer>        </div>      </div>    </section>  </div>    <div class=\"rst-versions\" data-toggle=\"rst-versions\" role=\"note\" aria-label=\"versions\">    <span class=\"rst-current-version\" data-toggle=\"rst-current-version\">      <span class=\"fa fa-book\"> Read the Docs</span>      v: latest      <span class=\"fa fa-caret-down\"></span>    </span>    <div class=\"rst-other-versions\">      <dl>        <dt>Versions</dt>                  <dd><a href=\"/en/latest/\">latest</a></dd>                  <dd><a href=\"/en/stable/\">stable</a></dd>              </dl>      <dl>        <dt>Downloads</dt>                  <dd><a href=\"//readthedocs.org/projects/autoapi/downloads/htmlzip/latest/\">html</a></dd>              </dl>      <dl>        <dt>On Read the Docs</dt>          <dd>            <a href=\"//readthedocs.org/projects/autoapi/?fromdocs=autoapi\">Project Home</a>          </dd>          <dd>            <a href=\"//readthedocs.org/builds/autoapi/?fromdocs=autoapi\">Builds</a>          </dd>      </dl>      <hr/>      Free document hosting provided by <a href=\"http://www.readthedocs.org\">Read the Docs</a>.    </div>  </div>  <script type=\"text/javascript\">      jQuery(function () {          SphinxRtdTheme.Navigation.enable(true);      });  </script>     </body></html>",
  "embeddings": []
}
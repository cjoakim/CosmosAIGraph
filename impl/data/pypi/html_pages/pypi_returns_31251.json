{
  "libtype": "pypi",
  "libname": "returns",
  "url": "https://returns.readthedocs.io",
  "html": "<!DOCTYPE html><html lang=\"en\"><head>  <meta charset=\"utf-8\">  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">  <meta name=\"generator\" content=\"Docutils 0.19: https://docutils.sourceforge.io/\" /><title>Features &mdash; returns 0.22.0 documentation</title>  <link rel=\"stylesheet\" href=\"https://fonts.googleapis.com/css?family=Roboto:300,400,500,700\"><link rel=\"stylesheet\" href=\"https://fonts.googleapis.com/css?family=Roboto+Mono\"><link rel=\"stylesheet\" href=\"_static/typlog.css?v=0.7.3\" type=\"text/css\" />  <link rel=\"stylesheet\" href=\"_static/theme.css?v=0.7.3\" type=\"text/css\" /><link rel=\"stylesheet\" href=\"_static/pygments.css\" type=\"text/css\" /><link rel=\"stylesheet\" href=\"_static/typlog.css\" type=\"text/css\" /><link rel=\"stylesheet\" href=\"_static/css/tooltipster.custom.css\" type=\"text/css\" /><link rel=\"stylesheet\" href=\"_static/css/tooltipster.bundle.min.css\" type=\"text/css\" /><link rel=\"stylesheet\" href=\"_static/css/tooltipster-sideTip-shadow.min.css\" type=\"text/css\" /><link rel=\"stylesheet\" href=\"_static/css/tooltipster-sideTip-punk.min.css\" type=\"text/css\" /><link rel=\"stylesheet\" href=\"_static/css/tooltipster-sideTip-noir.min.css\" type=\"text/css\" /><link rel=\"stylesheet\" href=\"_static/css/tooltipster-sideTip-light.min.css\" type=\"text/css\" /><link rel=\"stylesheet\" href=\"_static/css/tooltipster-sideTip-borderless.min.css\" type=\"text/css\" /><link rel=\"stylesheet\" href=\"_static/css/micromodal.css\" type=\"text/css\" /><link rel=\"stylesheet\" href=\"/_/static/css/badge_only.css\" type=\"text/css\" /><link rel=\"stylesheet\" href=\"_static/overrides.css\" type=\"text/css\" />      <link rel=\"index\" title=\"Index\" href=\"genindex.html\"/>      <link rel=\"search\" title=\"Search\" href=\"search.html\"/>    <link rel=\"top\" title=\"returns 0.22.0 documentation\" href=\"#\"/>      <link rel=\"next\" title=\"Quickstart\" href=\"pages/quickstart.html\"/>  <script>(function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)})(window,document,'script','https://www.google-analytics.com/analytics.js','ga');ga('create', '');ga('send', 'pageview');</script>  <script type=\"text/javascript\" id=\"documentation_options\" data-url_root=\"./\" src=\"_static/documentation_options.js\"></script>    <script data-url_root=\"./\" id=\"documentation_options\" src=\"_static/documentation_options.js\"></script>    <script src=\"_static/jquery.js\"></script>    <script src=\"_static/underscore.js\"></script>    <script src=\"_static/_sphinx_javascript_frameworks_compat.js\"></script>    <script src=\"_static/doctools.js\"></script>    <script src=\"_static/sphinx_highlight.js\"></script>    <script src=\"_static/js/hoverxref.js\"></script>    <script src=\"_static/js/tooltipster.bundle.min.js\"></script>    <script src=\"_static/js/micromodal.min.js\"></script>    <script async=\"async\" src=\"https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js\"></script>    <script async=\"async\" src=\"/_/static/javascript/readthedocs-doc-embed.js\"></script>    <script src=\"https://unpkg.com/mermaid@9.4.0/dist/mermaid.min.js\"></script>    <script>mermaid.initialize({startOnLoad:true});</script>  <meta property=\"og:type\" content=\"website\">  <meta property=\"og:site_name\" content=\"returns\">  <meta property=\"og:title\" content=\"Features\">    <meta property=\"og:description\" content=\"Make your functions return something meaningful, typed, and safe!\">  <meta name=\"twitter:card\" content=\"summary\"><!-- RTD Extra Head --><link rel=\"stylesheet\" href=\"/_/static/css/readthedocs-doc-embed.css\" type=\"text/css\" /><script type=\"application/json\" id=\"READTHEDOCS_DATA\">{\"ad_free\": false, \"api_host\": \"https://readthedocs.org\", \"builder\": \"sphinx\", \"canonical_url\": null, \"docroot\": \"/docs/\", \"features\": {\"docsearch_disabled\": false}, \"global_analytics_code\": \"UA-17997319-1\", \"language\": \"en\", \"page\": \"index\", \"programming_language\": \"py\", \"project\": \"returns\", \"proxied_api_host\": \"/_\", \"source_suffix\": \".rst\", \"subprojects\": {}, \"theme\": \"sphinx_typlog_theme\", \"user_analytics_code\": \"\", \"version\": \"latest\"}</script><!--Using this variable directly instead of using `JSON.parse` is deprecated.The READTHEDOCS_DATA global variable will be removed in the future.--><script type=\"text/javascript\">READTHEDOCS_DATA = JSON.parse(document.getElementById('READTHEDOCS_DATA').innerHTML);</script><script type=\"text/javascript\" src=\"/_/static/javascript/readthedocs-analytics.js\" async=\"async\"></script><!-- end RTD <extrahead> --></head><body role=\"document\" data-page=\"index\">  <header class=\"t-head\">    <div class=\"t-head_menu\"><svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\"><path d=\"M64 384h384v-42.666H64V384zm0-106.666h384v-42.667H64v42.667zM64 128v42.665h384V128H64z\"/></svg></div>    <a class=\"t-head_logo\" href=\"#\">returns    </a>  </header>  <aside class=\"t-sidebar\">    <div class=\"t-sidebar_close\">      <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\"><path d=\"M405 136.798L375.202 107 256 226.202 136.798 107 107 136.798 226.202 256 107 375.202 136.798 405 256 285.798 375.202 405 405 375.202 285.798 256z\"/></svg>    </div>    <div class=\"inner\"><a class=\"logo\" href=\"#\">    returns</a><div class=\"logo_desc\">Make your functions return something meaningful, typed, and safe!</div><div class=\"globaltoc\"><ul><li class=\"toctree-l1\"><a class=\"reference internal\" href=\"pages/quickstart.html\">Quickstart</a></li></ul><p class=\"caption\" role=\"heading\"><span class=\"caption-text\">Userguide</span></p><ul><li class=\"toctree-l1\"><a class=\"reference internal\" href=\"pages/container.html\">Container: the concept</a></li><li class=\"toctree-l1\"><a class=\"reference internal\" href=\"pages/railway.html\">Railway oriented programming</a></li><li class=\"toctree-l1\"><a class=\"reference internal\" href=\"pages/hkt.html\">Higher Kinded Types</a></li><li class=\"toctree-l1\"><a class=\"reference internal\" href=\"pages/interfaces.html\">Interfaces</a></li></ul><p class=\"caption\" role=\"heading\"><span class=\"caption-text\">Containers</span></p><ul><li class=\"toctree-l1\"><a class=\"reference internal\" href=\"pages/maybe.html\">Maybe</a></li><li class=\"toctree-l1\"><a class=\"reference internal\" href=\"pages/result.html\">Result</a></li><li class=\"toctree-l1\"><a class=\"reference internal\" href=\"pages/io.html\">IO</a></li><li class=\"toctree-l1\"><a class=\"reference internal\" href=\"pages/future.html\">Future</a></li><li class=\"toctree-l1\"><a class=\"reference internal\" href=\"pages/context.html\">Context</a></li><li class=\"toctree-l1\"><a class=\"reference internal\" href=\"pages/create-your-own-container.html\">Create your own container</a></li></ul><p class=\"caption\" role=\"heading\"><span class=\"caption-text\">Composition helpers</span></p><ul><li class=\"toctree-l1\"><a class=\"reference internal\" href=\"pages/pipeline.html\">Pipelines</a></li><li class=\"toctree-l1\"><a class=\"reference internal\" href=\"pages/converters.html\">Converters</a></li><li class=\"toctree-l1\"><a class=\"reference internal\" href=\"pages/pointfree.html\">Pointfree</a></li><li class=\"toctree-l1\"><a class=\"reference internal\" href=\"pages/methods.html\">Methods</a></li><li class=\"toctree-l1\"><a class=\"reference internal\" href=\"pages/do-notation.html\">Do Notation</a></li><li class=\"toctree-l1\"><a class=\"reference internal\" href=\"pages/functions.html\">Helper functions</a></li><li class=\"toctree-l1\"><a class=\"reference internal\" href=\"pages/curry.html\">Curry</a></li><li class=\"toctree-l1\"><a class=\"reference internal\" href=\"pages/trampolines.html\">Trampolines</a></li><li class=\"toctree-l1\"><a class=\"reference internal\" href=\"pages/types.html\">Primitive types</a></li></ul><p class=\"caption\" role=\"heading\"><span class=\"caption-text\">Integration</span></p><ul><li class=\"toctree-l1\"><a class=\"reference internal\" href=\"pages/development.html\">Development tooling</a></li><li class=\"toctree-l1\"><a class=\"reference internal\" href=\"pages/contrib/mypy_plugins.html\">mypy plugin</a></li><li class=\"toctree-l1\"><a class=\"reference internal\" href=\"pages/contrib/pytest_plugins.html\">pytest plugin</a></li><li class=\"toctree-l1\"><a class=\"reference internal\" href=\"pages/contrib/hypothesis_plugins.html\">hypothesis plugin</a></li></ul><p class=\"caption\" role=\"heading\"><span class=\"caption-text\">Changelog</span></p><ul><li class=\"toctree-l1\"><a class=\"reference internal\" href=\"pages/changelog.html\">Version history</a></li></ul></div><div class=\"github_wrap\">  <a class=\"github\" href=\"https://github.com/dry-python/returns\" target=\"_blank\">    <span class=\"github_icon\"></span>    <span class=\"github_stars\">      <strong>-</strong>stars    </span>    <span class=\"github_forks\">      <strong>-</strong>forks    </span>  </a></div><div id=\"searchbox\">  <form class=\"search\" action=\"search.html\" method=\"get\">    <div class=\"input-group\">      <input type=\"text\" name=\"q\" placeholder=\"Search\" />      <button type=\"submit\">Go</button>    </div>    <input type=\"hidden\" name=\"check_keywords\" value=\"yes\" />    <input type=\"hidden\" name=\"area\" value=\"default\" />  </form></div><h3>Links</h3><ul>    <li>        <a href=\"https://github.com/dry-python/returns\">GitHub</a>    </li>    <li>        <a href=\"https://pypi.python.org/pypi/returns\">PyPI</a>    </li>    <li>        <a href=\"https://travis-ci.com/dry-python/returns\">Travis CI</a>    </li>    <li>        <a href=\"https://coveralls.io/github/dry-python/returns?branch=master\">Coverage</a>    </li></ul>    </div>  </aside>  <div class=\"t-content\">    <div class=\"t-body yue\">        <a class=\"reference external image-reference\" href=\"https://github.com/dry-python/returns\"><img alt=\"Returns logo\" src=\"https://raw.githubusercontent.com/dry-python/brand/master/logo/returns_white-outline.png\" /></a><hr class=\"docutils\" /><a class=\"reference external image-reference\" href=\"https://github.com/dry-python/returns/actions?query=workflow%3Atest\"><img alt=\"Build Status\" src=\"https://github.com/dry-python/returns/workflows/test/badge.svg?branch=master&amp;event=push\" /></a><a class=\"reference external image-reference\" href=\"https://codecov.io/gh/dry-python/returns\"><img alt=\"codecov\" src=\"https://codecov.io/gh/dry-python/returns/branch/master/graph/badge.svg\" /></a><a class=\"reference external image-reference\" href=\"https://returns.readthedocs.io/en/latest/?badge=latest\"><img alt=\"Documentation Status\" src=\"https://readthedocs.org/projects/returns/badge/?version=latest\" /></a><a class=\"reference external image-reference\" href=\"https://pypi.org/project/returns/\"><img alt=\"Python Version\" src=\"https://img.shields.io/pypi/pyversions/returns.svg\" /></a><a class=\"reference external image-reference\" href=\"https://anaconda.org/conda-forge/returns\"><img alt=\"conda\" src=\"https://img.shields.io/conda/v/conda-forge/returns?label=conda\" /></a><a class=\"reference external image-reference\" href=\"https://github.com/wemake-services/wemake-python-styleguide\"><img alt=\"wemake-python-styleguide\" src=\"https://img.shields.io/badge/style-wemake-000000.svg\" /></a><a class=\"reference external image-reference\" href=\"https://t.me/drypython\"><img alt=\"Telegram chat\" src=\"https://img.shields.io/badge/chat-join-blue?logo=telegram\" /></a><hr class=\"docutils\" /><p>Make your functions return something meaningful, typed, and safe!</p><section id=\"features\"><h1>Features<a class=\"headerlink\" href=\"#features\" title=\"Permalink to this heading\">\u00b6</a></h1><ul class=\"simple\"><li><p>Brings functional programming to Python land</p></li><li><p>Provides a bunch of primitives to write declarative business logic</p></li><li><p>Enforces better architecture</p></li><li><p>Fully typed with annotations and checked with <code class=\"docutils literal notranslate\"><span class=\"pre\">mypy</span></code>, <a class=\"reference external\" href=\"https://www.python.org/dev/peps/pep-0561/\">PEP561 compatible</a></p></li><li><p>Adds emulated Higher Kinded Types support</p></li><li><p>Provides type-safe interfaces to create your own data-types with enforced laws</p></li><li><p>Has a bunch of helpers for better composition</p></li><li><p>Pythonic and pleasant to write and to read \ud83d\udc0d</p></li><li><p>Support functions and coroutines, framework agnostic</p></li><li><p>Easy to start: has lots of docs, tests, and tutorials</p></li></ul><p><a class=\"reference external\" href=\"https://returns.readthedocs.io/en/latest/pages/quickstart.html\">Quickstart</a> right now!</p></section><section id=\"installation\"><h1>Installation<a class=\"headerlink\" href=\"#installation\" title=\"Permalink to this heading\">\u00b6</a></h1><div class=\"highlight-bash notranslate\"><div class=\"highlight\"><pre><span></span>pip<span class=\"w\"> </span>install<span class=\"w\"> </span>returns</pre></div></div><p>You can also install <code class=\"docutils literal notranslate\"><span class=\"pre\">returns</span></code> with the latest supported <code class=\"docutils literal notranslate\"><span class=\"pre\">mypy</span></code> version:</p><div class=\"highlight-bash notranslate\"><div class=\"highlight\"><pre><span></span>pip<span class=\"w\"> </span>install<span class=\"w\"> </span>returns<span class=\"o\">[</span>compatible-mypy<span class=\"o\">]</span></pre></div></div><p>You would also need to configure our <cite>``mypy`</cite> plugin &lt;<a class=\"reference external\" href=\"https://returns.readthedocs.io/en/latest/pages/contrib/mypy_plugins.html\">https://returns.readthedocs.io/en/latest/pages/contrib/mypy_plugins.html</a>&gt;`_:</p><div class=\"highlight-ini notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"c1\"># In setup.cfg or mypy.ini:</span><span class=\"k\">[mypy]</span><span class=\"na\">plugins</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\">  </span><span class=\"na\">returns.contrib.mypy.returns_plugin</span></pre></div></div><p>or:</p><div class=\"highlight-toml notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">[tool.mypy]</span><span class=\"n\">plugins</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"s2\">&quot;returns.contrib.mypy.returns_plugin&quot;</span><span class=\"p\">]</span></pre></div></div><p>We also recommend to use the same <code class=\"docutils literal notranslate\"><span class=\"pre\">mypy</span></code> settings <a class=\"reference external\" href=\"https://github.com/wemake-services/wemake-python-styleguide/blob/master/styles/mypy.toml\">we use</a>.</p><p>Make sure you know how to get started, <a class=\"reference external\" href=\"https://returns.readthedocs.io/en/latest/\">check out our docs</a>!<a class=\"reference external\" href=\"https://repl.it/&#64;sobolevn/returns#ex.py\">Try our demo</a>.</p></section><section id=\"contents\"><h1>Contents<a class=\"headerlink\" href=\"#contents\" title=\"Permalink to this heading\">\u00b6</a></h1><ul class=\"simple\"><li><p><a class=\"reference external\" href=\"#maybe-container\">Maybe container</a> that allows you to write <code class=\"docutils literal notranslate\"><span class=\"pre\">None</span></code>-free code</p></li><li><p><a class=\"reference external\" href=\"#requirescontext-container\">RequiresContext container</a> that allows you to use typed functional dependency injection</p></li><li><p><a class=\"reference external\" href=\"#result-container\">Result container</a> that let\u2019s you to get rid of exceptions</p></li><li><p><a class=\"reference external\" href=\"#io-container\">IO container</a> and <a class=\"reference external\" href=\"#troublesome-io\">IOResult</a> that marks all impure operations and structures them</p></li><li><p><a class=\"reference external\" href=\"#future-container\">Future container</a> and <a class=\"reference external\" href=\"#async-code-without-exceptions\">FutureResult</a> to work with <code class=\"docutils literal notranslate\"><span class=\"pre\">async</span></code> code</p></li><li><p><a class=\"reference external\" href=\"https://returns.readthedocs.io/en/latest/pages/create-your-own-container.html\">Write your own container!</a> You would still have all the features for your own types (including full existing code reuse and type-safety)</p></li></ul></section><section id=\"id1\"><h1>Maybe container<a class=\"headerlink\" href=\"#id1\" title=\"Permalink to this heading\">\u00b6</a></h1><p><code class=\"docutils literal notranslate\"><span class=\"pre\">None</span></code> is called the <a class=\"reference external\" href=\"https://www.infoq.com/presentations/Null-References-The-Billion-Dollar-Mistake-Tony-Hoare/\">worst mistake in the history of Computer Science</a>.</p><p>So, what can we do to check for <code class=\"docutils literal notranslate\"><span class=\"pre\">None</span></code> in our programs?You can use builtin <a class=\"reference external\" href=\"https://mypy.readthedocs.io/en/stable/kinds_of_types.html#optional-types-and-the-none-type\">Optional</a> typeand write a lot of <code class=\"docutils literal notranslate\"><span class=\"pre\">if</span> <span class=\"pre\">some</span> <span class=\"pre\">is</span> <span class=\"pre\">not</span> <span class=\"pre\">None:</span></code> conditions.But, <strong>having ``null`` checks here and there makes your code unreadable</strong>.</p><div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">user</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">User</span><span class=\"p\">]</span><span class=\"n\">discount_program</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"s1\">&#39;DiscountProgram&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"k\">if</span> <span class=\"n\">user</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>     <span class=\"n\">balance</span> <span class=\"o\">=</span> <span class=\"n\">user</span><span class=\"o\">.</span><span class=\"n\">get_balance</span><span class=\"p\">()</span>     <span class=\"k\">if</span> <span class=\"n\">balance</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>         <span class=\"n\">credit</span> <span class=\"o\">=</span> <span class=\"n\">balance</span><span class=\"o\">.</span><span class=\"n\">credit_amount</span><span class=\"p\">()</span>         <span class=\"k\">if</span> <span class=\"n\">credit</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span> <span class=\"ow\">and</span> <span class=\"n\">credit</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">:</span>             <span class=\"n\">discount_program</span> <span class=\"o\">=</span> <span class=\"n\">choose_discount</span><span class=\"p\">(</span><span class=\"n\">credit</span><span class=\"p\">)</span></pre></div></div><p>Or you can use<a class=\"reference external\" href=\"https://returns.readthedocs.io/en/latest/pages/maybe.html\">Maybe</a> container!It consists of <code class=\"docutils literal notranslate\"><span class=\"pre\">Some</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">Nothing</span></code> types,representing existing state and empty (instead of <code class=\"docutils literal notranslate\"><span class=\"pre\">None</span></code>) state respectively.</p><div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">typing</span> <span class=\"kn\">import</span> <span class=\"n\">Optional</span><span class=\"kn\">from</span> <span class=\"nn\">returns.maybe</span> <span class=\"kn\">import</span> <span class=\"n\">Maybe</span><span class=\"p\">,</span> <span class=\"n\">maybe</span><span class=\"nd\">@maybe</span>  <span class=\"c1\"># decorator to convert existing Optional[int] to Maybe[int]</span><span class=\"k\">def</span> <span class=\"nf\">bad_function</span><span class=\"p\">()</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]:</span>    <span class=\"o\">...</span><span class=\"n\">maybe_number</span><span class=\"p\">:</span> <span class=\"n\">Maybe</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">bad_function</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">bind_optional</span><span class=\"p\">(</span>    <span class=\"k\">lambda</span> <span class=\"n\">number</span><span class=\"p\">:</span> <span class=\"n\">number</span> <span class=\"o\">/</span> <span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"p\">)</span><span class=\"c1\"># =&gt; Maybe will return Some[float] only if there&#39;s a non-None value</span><span class=\"c1\">#    Otherwise, will return Nothing</span></pre></div></div><p>You can be sure that <code class=\"docutils literal notranslate\"><span class=\"pre\">.bind_optional()</span></code> method won\u2019t be called for <code class=\"docutils literal notranslate\"><span class=\"pre\">Nothing</span></code>.Forget about <code class=\"docutils literal notranslate\"><span class=\"pre\">None</span></code>-related errors forever!</p><p>We can also bind a <code class=\"docutils literal notranslate\"><span class=\"pre\">Optional</span></code>-returning function over a container.To achieve this, we are going to use <code class=\"docutils literal notranslate\"><span class=\"pre\">.bind_optional</span></code> method.</p><p>And here\u2019s how your initial refactored code will look:</p><div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">user</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">User</span><span class=\"p\">]</span><span class=\"c1\"># Type hint here is optional, it only helps the reader here:</span><span class=\"n\">discount_program</span><span class=\"p\">:</span> <span class=\"n\">Maybe</span><span class=\"p\">[</span><span class=\"s1\">&#39;DiscountProgram&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Maybe</span><span class=\"o\">.</span><span class=\"n\">from_optional</span><span class=\"p\">(</span>    <span class=\"n\">user</span><span class=\"p\">,</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">bind_optional</span><span class=\"p\">(</span>  <span class=\"c1\"># This won&#39;t be called if `user is None`</span>    <span class=\"k\">lambda</span> <span class=\"n\">real_user</span><span class=\"p\">:</span> <span class=\"n\">real_user</span><span class=\"o\">.</span><span class=\"n\">get_balance</span><span class=\"p\">(),</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">bind_optional</span><span class=\"p\">(</span>  <span class=\"c1\"># This won&#39;t be called if `real_user.get_balance()` is None</span>    <span class=\"k\">lambda</span> <span class=\"n\">balance</span><span class=\"p\">:</span> <span class=\"n\">balance</span><span class=\"o\">.</span><span class=\"n\">credit_amount</span><span class=\"p\">(),</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">bind_optional</span><span class=\"p\">(</span>  <span class=\"c1\"># And so on!</span>    <span class=\"k\">lambda</span> <span class=\"n\">credit</span><span class=\"p\">:</span> <span class=\"n\">choose_discount</span><span class=\"p\">(</span><span class=\"n\">credit</span><span class=\"p\">)</span> <span class=\"k\">if</span> <span class=\"n\">credit</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span> <span class=\"k\">else</span> <span class=\"kc\">None</span><span class=\"p\">,</span><span class=\"p\">)</span></pre></div></div><p>Much better, isn\u2019t it?</p></section><section id=\"id2\"><h1>RequiresContext container<a class=\"headerlink\" href=\"#id2\" title=\"Permalink to this heading\">\u00b6</a></h1><p>Many developers do use some kind of dependency injection in Python.And usually it is based on the ideathat there\u2019s some kind of a container and assembly process.</p><p>Functional approach is much simpler!</p><p>Imagine that you have a <code class=\"docutils literal notranslate\"><span class=\"pre\">django</span></code> based game, where you award users with points for each guessed letter in a word (unguessed letters are marked as <code class=\"docutils literal notranslate\"><span class=\"pre\">'.'</span></code>):</p><div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.http</span> <span class=\"kn\">import</span> <span class=\"n\">HttpRequest</span><span class=\"p\">,</span> <span class=\"n\">HttpResponse</span><span class=\"kn\">from</span> <span class=\"nn\">words_app.logic</span> <span class=\"kn\">import</span> <span class=\"n\">calculate_points</span><span class=\"k\">def</span> <span class=\"nf\">view</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">:</span> <span class=\"n\">HttpRequest</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">HttpResponse</span><span class=\"p\">:</span>    <span class=\"n\">user_word</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">POST</span><span class=\"p\">[</span><span class=\"s1\">&#39;word&#39;</span><span class=\"p\">]</span>  <span class=\"c1\"># just an example</span>    <span class=\"n\">points</span> <span class=\"o\">=</span> <span class=\"n\">calculate_points</span><span class=\"p\">(</span><span class=\"n\">user_word</span><span class=\"p\">)</span>    <span class=\"o\">...</span>  <span class=\"c1\"># later you show the result to user somehow</span><span class=\"c1\"># Somewhere in your `words_app/logic.py`:</span><span class=\"k\">def</span> <span class=\"nf\">calculate_points</span><span class=\"p\">(</span><span class=\"n\">word</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">int</span><span class=\"p\">:</span>    <span class=\"n\">guessed_letters_count</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">([</span><span class=\"n\">letter</span> <span class=\"k\">for</span> <span class=\"n\">letter</span> <span class=\"ow\">in</span> <span class=\"n\">word</span> <span class=\"k\">if</span> <span class=\"n\">letter</span> <span class=\"o\">!=</span> <span class=\"s1\">&#39;.&#39;</span><span class=\"p\">])</span>    <span class=\"k\">return</span> <span class=\"n\">_award_points_for_letters</span><span class=\"p\">(</span><span class=\"n\">guessed_letters_count</span><span class=\"p\">)</span><span class=\"k\">def</span> <span class=\"nf\">_award_points_for_letters</span><span class=\"p\">(</span><span class=\"n\">guessed</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">int</span><span class=\"p\">:</span>    <span class=\"k\">return</span> <span class=\"mi\">0</span> <span class=\"k\">if</span> <span class=\"n\">guessed</span> <span class=\"o\">&lt;</span> <span class=\"mi\">5</span> <span class=\"k\">else</span> <span class=\"n\">guessed</span>  <span class=\"c1\"># minimum 6 points possible!</span></pre></div></div><p>Awesome! It works, users are happy, your logic is pure and awesome.But, later you decide to make the game more fun:let\u2019s make the minimal accountable letters thresholdconfigurable for an extra challenge.</p><p>You can just do it directly:</p><div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">def</span> <span class=\"nf\">_award_points_for_letters</span><span class=\"p\">(</span><span class=\"n\">guessed</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">threshold</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">int</span><span class=\"p\">:</span>    <span class=\"k\">return</span> <span class=\"mi\">0</span> <span class=\"k\">if</span> <span class=\"n\">guessed</span> <span class=\"o\">&lt;</span> <span class=\"n\">threshold</span> <span class=\"k\">else</span> <span class=\"n\">guessed</span></pre></div></div><p>The problem is that <code class=\"docutils literal notranslate\"><span class=\"pre\">_award_points_for_letters</span></code> is deeply nested.And then you have to pass <code class=\"docutils literal notranslate\"><span class=\"pre\">threshold</span></code> through the whole callstack,including <code class=\"docutils literal notranslate\"><span class=\"pre\">calculate_points</span></code> and all other functions that might be on the way.All of them will have to accept <code class=\"docutils literal notranslate\"><span class=\"pre\">threshold</span></code> as a parameter!This is not useful at all!Large code bases will struggle a lot from this change.</p><p>Ok, you can directly use <code class=\"docutils literal notranslate\"><span class=\"pre\">django.settings</span></code> (or similar)in your <code class=\"docutils literal notranslate\"><span class=\"pre\">_award_points_for_letters</span></code> function.And <strong>ruin your pure logic with framework specific details</strong>. That\u2019s ugly!</p><p>Or you can use <code class=\"docutils literal notranslate\"><span class=\"pre\">RequiresContext</span></code> container. Let\u2019s see how our code changes:</p><div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.conf</span> <span class=\"kn\">import</span> <span class=\"n\">settings</span><span class=\"kn\">from</span> <span class=\"nn\">django.http</span> <span class=\"kn\">import</span> <span class=\"n\">HttpRequest</span><span class=\"p\">,</span> <span class=\"n\">HttpResponse</span><span class=\"kn\">from</span> <span class=\"nn\">words_app.logic</span> <span class=\"kn\">import</span> <span class=\"n\">calculate_points</span><span class=\"k\">def</span> <span class=\"nf\">view</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">:</span> <span class=\"n\">HttpRequest</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">HttpResponse</span><span class=\"p\">:</span>    <span class=\"n\">user_word</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">POST</span><span class=\"p\">[</span><span class=\"s1\">&#39;word&#39;</span><span class=\"p\">]</span>  <span class=\"c1\"># just an example</span>    <span class=\"n\">points</span> <span class=\"o\">=</span> <span class=\"n\">calculate_points</span><span class=\"p\">(</span><span class=\"n\">user_words</span><span class=\"p\">)(</span><span class=\"n\">settings</span><span class=\"p\">)</span>  <span class=\"c1\"># passing the dependencies</span>    <span class=\"o\">...</span>  <span class=\"c1\"># later you show the result to user somehow</span><span class=\"c1\"># Somewhere in your `words_app/logic.py`:</span><span class=\"kn\">from</span> <span class=\"nn\">typing</span> <span class=\"kn\">import</span> <span class=\"n\">Protocol</span><span class=\"kn\">from</span> <span class=\"nn\">returns.context</span> <span class=\"kn\">import</span> <span class=\"n\">RequiresContext</span><span class=\"k\">class</span> <span class=\"nc\">_Deps</span><span class=\"p\">(</span><span class=\"n\">Protocol</span><span class=\"p\">):</span>  <span class=\"c1\"># we rely on abstractions, not direct values or types</span>    <span class=\"n\">WORD_THRESHOLD</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"k\">def</span> <span class=\"nf\">calculate_points</span><span class=\"p\">(</span><span class=\"n\">word</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">RequiresContext</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">_Deps</span><span class=\"p\">]:</span>    <span class=\"n\">guessed_letters_count</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">([</span><span class=\"n\">letter</span> <span class=\"k\">for</span> <span class=\"n\">letter</span> <span class=\"ow\">in</span> <span class=\"n\">word</span> <span class=\"k\">if</span> <span class=\"n\">letter</span> <span class=\"o\">!=</span> <span class=\"s1\">&#39;.&#39;</span><span class=\"p\">])</span>    <span class=\"k\">return</span> <span class=\"n\">_award_points_for_letters</span><span class=\"p\">(</span><span class=\"n\">guessed_letters_count</span><span class=\"p\">)</span><span class=\"k\">def</span> <span class=\"nf\">_award_points_for_letters</span><span class=\"p\">(</span><span class=\"n\">guessed</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">RequiresContext</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">_Deps</span><span class=\"p\">]:</span>    <span class=\"k\">return</span> <span class=\"n\">RequiresContext</span><span class=\"p\">(</span>        <span class=\"k\">lambda</span> <span class=\"n\">deps</span><span class=\"p\">:</span> <span class=\"mi\">0</span> <span class=\"k\">if</span> <span class=\"n\">guessed</span> <span class=\"o\">&lt;</span> <span class=\"n\">deps</span><span class=\"o\">.</span><span class=\"n\">WORD_THRESHOLD</span> <span class=\"k\">else</span> <span class=\"n\">guessed</span><span class=\"p\">,</span>    <span class=\"p\">)</span></pre></div></div><p>And now you can pass your dependencies in a really direct and explicit way.And have the type-safety to check what you pass to cover your back.Check out <a class=\"reference external\" href=\"https://returns.readthedocs.io/en/latest/pages/context.html\">RequiresContext</a> docs for more. There you will learn how to make <code class=\"docutils literal notranslate\"><span class=\"pre\">'.'</span></code> also configurable.</p><p>We also have <a class=\"reference external\" href=\"https://returns.readthedocs.io/en/latest/pages/context.html#requirescontextresult-container\">RequiresContextResult</a>for context-related operations that might fail. And also <a class=\"reference external\" href=\"https://returns.readthedocs.io/en/latest/pages/context.html#requirescontextioresult-container\">RequiresContextIOResult</a> and <a class=\"reference external\" href=\"https://returns.readthedocs.io/en/latest/pages/context.html#requirescontextfutureresult-container\">RequiresContextFutureResult</a>.</p></section><section id=\"id3\"><h1>Result container<a class=\"headerlink\" href=\"#id3\" title=\"Permalink to this heading\">\u00b6</a></h1><p>Please, make sure that you are also aware of<a class=\"reference external\" href=\"https://fsharpforfunandprofit.com/rop/\">Railway Oriented Programming</a>.</p><section id=\"straight-forward-approach\"><h2>Straight-forward approach<a class=\"headerlink\" href=\"#straight-forward-approach\" title=\"Permalink to this heading\">\u00b6</a></h2><p>Consider this code that you can find in <strong>any</strong> <code class=\"docutils literal notranslate\"><span class=\"pre\">python</span></code> project.</p><div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">requests</span><span class=\"k\">def</span> <span class=\"nf\">fetch_user_profile</span><span class=\"p\">(</span><span class=\"n\">user_id</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"s1\">&#39;UserProfile&#39;</span><span class=\"p\">:</span><span class=\"w\">    </span><span class=\"sd\">&quot;&quot;&quot;Fetches UserProfile dict from foreign API.&quot;&quot;&quot;</span>    <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">requests</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">&#39;/api/users/</span><span class=\"si\">{0}</span><span class=\"s1\">&#39;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">user_id</span><span class=\"p\">))</span>    <span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">raise_for_status</span><span class=\"p\">()</span>    <span class=\"k\">return</span> <span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">json</span><span class=\"p\">()</span></pre></div></div><p>Seems legit, does it not?It also seems like a pretty straightforward code to test.All you need is to mock <code class=\"docutils literal notranslate\"><span class=\"pre\">requests.get</span></code> to return the structure you need.</p><p>But, there are hidden problems in this tiny code samplethat are almost impossible to spot at the first glance.</p></section><section id=\"hidden-problems\"><h2>Hidden problems<a class=\"headerlink\" href=\"#hidden-problems\" title=\"Permalink to this heading\">\u00b6</a></h2><p>Let\u2019s have a look at the exact same code,but with the all hidden problems explained.</p><div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">requests</span><span class=\"k\">def</span> <span class=\"nf\">fetch_user_profile</span><span class=\"p\">(</span><span class=\"n\">user_id</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"s1\">&#39;UserProfile&#39;</span><span class=\"p\">:</span><span class=\"w\">    </span><span class=\"sd\">&quot;&quot;&quot;Fetches UserProfile dict from foreign API.&quot;&quot;&quot;</span>    <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">requests</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">&#39;/api/users/</span><span class=\"si\">{0}</span><span class=\"s1\">&#39;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">user_id</span><span class=\"p\">))</span>    <span class=\"c1\"># What if we try to find user that does not exist?</span>    <span class=\"c1\"># Or network will go down? Or the server will return 500?</span>    <span class=\"c1\"># In this case the next line will fail with an exception.</span>    <span class=\"c1\"># We need to handle all possible errors in this function</span>    <span class=\"c1\"># and do not return corrupt data to consumers.</span>    <span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">raise_for_status</span><span class=\"p\">()</span>    <span class=\"c1\"># What if we have received invalid JSON?</span>    <span class=\"c1\"># Next line will raise an exception!</span>    <span class=\"k\">return</span> <span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">json</span><span class=\"p\">()</span></pre></div></div><p>Now, all (probably all?) problems are clear.How can we be sure that this function will be safeto use inside our complex business logic?</p><p>We really cannot be sure!We will have to create <strong>lots</strong> of <code class=\"docutils literal notranslate\"><span class=\"pre\">try</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">except</span></code> casesjust to catch the expected exceptions. Our code will become complex and unreadable with all this mess!</p><p>Or we can go with the top level <code class=\"docutils literal notranslate\"><span class=\"pre\">except</span> <span class=\"pre\">Exception:</span></code> caseto catch literally everything.And this way we would end up with catching unwanted ones.This approach can hide serious problems from us for a long time.</p></section><section id=\"pipe-example\"><h2>Pipe example<a class=\"headerlink\" href=\"#pipe-example\" title=\"Permalink to this heading\">\u00b6</a></h2><div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">requests</span><span class=\"kn\">from</span> <span class=\"nn\">returns.result</span> <span class=\"kn\">import</span> <span class=\"n\">Result</span><span class=\"p\">,</span> <span class=\"n\">safe</span><span class=\"kn\">from</span> <span class=\"nn\">returns.pipeline</span> <span class=\"kn\">import</span> <span class=\"n\">flow</span><span class=\"kn\">from</span> <span class=\"nn\">returns.pointfree</span> <span class=\"kn\">import</span> <span class=\"n\">bind</span><span class=\"k\">def</span> <span class=\"nf\">fetch_user_profile</span><span class=\"p\">(</span><span class=\"n\">user_id</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Result</span><span class=\"p\">[</span><span class=\"s1\">&#39;UserProfile&#39;</span><span class=\"p\">,</span> <span class=\"ne\">Exception</span><span class=\"p\">]:</span><span class=\"w\">    </span><span class=\"sd\">&quot;&quot;&quot;Fetches `UserProfile` TypedDict from foreign API.&quot;&quot;&quot;</span>    <span class=\"k\">return</span> <span class=\"n\">flow</span><span class=\"p\">(</span>        <span class=\"n\">user_id</span><span class=\"p\">,</span>        <span class=\"n\">_make_request</span><span class=\"p\">,</span>        <span class=\"n\">bind</span><span class=\"p\">(</span><span class=\"n\">_parse_json</span><span class=\"p\">),</span>    <span class=\"p\">)</span><span class=\"nd\">@safe</span><span class=\"k\">def</span> <span class=\"nf\">_make_request</span><span class=\"p\">(</span><span class=\"n\">user_id</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">requests</span><span class=\"o\">.</span><span class=\"n\">Response</span><span class=\"p\">:</span>    <span class=\"c1\"># TODO: we are not yet done with this example, read more about `IO`:</span>    <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">requests</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">&#39;/api/users/</span><span class=\"si\">{0}</span><span class=\"s1\">&#39;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">user_id</span><span class=\"p\">))</span>    <span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">raise_for_status</span><span class=\"p\">()</span>    <span class=\"k\">return</span> <span class=\"n\">response</span><span class=\"nd\">@safe</span><span class=\"k\">def</span> <span class=\"nf\">_parse_json</span><span class=\"p\">(</span><span class=\"n\">response</span><span class=\"p\">:</span> <span class=\"n\">requests</span><span class=\"o\">.</span><span class=\"n\">Response</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"s1\">&#39;UserProfile&#39;</span><span class=\"p\">:</span>    <span class=\"k\">return</span> <span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">json</span><span class=\"p\">()</span></pre></div></div><p>Now we have a clean and a safe and declarative wayto express our business needs:</p><ul class=\"simple\"><li><p>We start from making a request, that might fail at any moment,</p></li><li><p>Then parsing the response if the request was successful,</p></li><li><p>And then return the result.</p></li></ul><p>Now, instead of returning regular valueswe return values wrapped inside a special containerthanks to the<a class=\"reference external\" href=\"https://returns.readthedocs.io/en/latest/pages/result.html#safe\">&#64;safe</a>decorator. It will return <a class=\"reference external\" href=\"https://returns.readthedocs.io/en/latest/pages/result.html\">Success[YourType] or Failure[Exception]</a>.And will never throw exception at us!</p><p>We also use <a class=\"reference external\" href=\"https://returns.readthedocs.io/en/latest/pages/pipeline.html#flow\">flow</a>and <a class=\"reference external\" href=\"https://returns.readthedocs.io/en/latest/pages/pointfree.html#bind\">bind</a>functions for handy and declarative composition.</p><p>This way we can be sure that our code won\u2019t break inrandom places due to some implicit exception.Now we control all parts and are prepared for the explicit errors.</p><p>We are not yet done with this example,let\u2019s continue to improve it in the next chapter.</p></section></section><section id=\"id4\"><h1>IO container<a class=\"headerlink\" href=\"#id4\" title=\"Permalink to this heading\">\u00b6</a></h1><p>Let\u2019s look at our example from another angle.All its functions look like regular ones:it is impossible to tell whether they are <a class=\"reference external\" href=\"https://en.wikipedia.org/wiki/Pure_function\">pure</a>or impure from the first sight.</p><p>It leads to a very important consequence:<em>we start to mix pure and impure code together</em>.We should not do that!</p><p>When these two concepts are mixedwe suffer really bad when testing or reusing it.Almost everything should be pure by default.And we should explicitly mark impure parts of the program.</p><p>That\u2019s why we have created <code class=\"docutils literal notranslate\"><span class=\"pre\">IO</span></code> containerto mark impure functions that never fail.</p><p>These impure functions use <code class=\"docutils literal notranslate\"><span class=\"pre\">random</span></code>, current datetime, environment, or console:</p><div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">random</span><span class=\"kn\">import</span> <span class=\"nn\">datetime</span> <span class=\"k\">as</span> <span class=\"nn\">dt</span><span class=\"kn\">from</span> <span class=\"nn\">returns.io</span> <span class=\"kn\">import</span> <span class=\"n\">IO</span><span class=\"k\">def</span> <span class=\"nf\">get_random_number</span><span class=\"p\">()</span> <span class=\"o\">-&gt;</span> <span class=\"n\">IO</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]:</span>  <span class=\"c1\"># or use `@impure` decorator</span>    <span class=\"k\">return</span> <span class=\"n\">IO</span><span class=\"p\">(</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">randint</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">))</span>  <span class=\"c1\"># isn&#39;t pure, because random</span><span class=\"n\">now</span><span class=\"p\">:</span> <span class=\"n\">Callable</span><span class=\"p\">[[],</span> <span class=\"n\">IO</span><span class=\"p\">[</span><span class=\"n\">dt</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"n\">impure</span><span class=\"p\">(</span><span class=\"n\">dt</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">now</span><span class=\"p\">)</span><span class=\"nd\">@impure</span><span class=\"k\">def</span> <span class=\"nf\">return_and_show_next_number</span><span class=\"p\">(</span><span class=\"n\">previous</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">int</span><span class=\"p\">:</span>    <span class=\"n\">next_number</span> <span class=\"o\">=</span> <span class=\"n\">previous</span> <span class=\"o\">+</span> <span class=\"mi\">1</span>    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">next_number</span><span class=\"p\">)</span>  <span class=\"c1\"># isn&#39;t pure, because does IO</span>    <span class=\"k\">return</span> <span class=\"n\">next_number</span></pre></div></div><p>Now we can clearly see which functions are pure and which ones are impure.This helps us a lot in building large applications, unit testing you code,and composing business logic together.</p><section id=\"troublesome-io\"><h2>Troublesome IO<a class=\"headerlink\" href=\"#troublesome-io\" title=\"Permalink to this heading\">\u00b6</a></h2><p>As it was already said, we use <code class=\"docutils literal notranslate\"><span class=\"pre\">IO</span></code> when we handle functions that do not fail.</p><p>What if our function can fail and is impure?Like <code class=\"docutils literal notranslate\"><span class=\"pre\">requests.get()</span></code> we had earlier in our example.</p><p>Then we have to use a special <code class=\"docutils literal notranslate\"><span class=\"pre\">IOResult</span></code> type instead of a regular <code class=\"docutils literal notranslate\"><span class=\"pre\">Result</span></code>.Let\u2019s find the difference:</p><ul class=\"simple\"><li><p>Our <code class=\"docutils literal notranslate\"><span class=\"pre\">_parse_json</span></code> function always returnsthe same result (hopefully) for the same input:you can either parse valid <code class=\"docutils literal notranslate\"><span class=\"pre\">json</span></code> or fail on invalid one.That\u2019s why we return pure <code class=\"docutils literal notranslate\"><span class=\"pre\">Result</span></code>, there\u2019s no <code class=\"docutils literal notranslate\"><span class=\"pre\">IO</span></code> inside</p></li><li><p>Our <code class=\"docutils literal notranslate\"><span class=\"pre\">_make_request</span></code> function is impure and can fail.Try to send two similar requests with and without internet connection.The result will be different for the same input.That\u2019s why we must use <code class=\"docutils literal notranslate\"><span class=\"pre\">IOResult</span></code> here: it can fail and has <code class=\"docutils literal notranslate\"><span class=\"pre\">IO</span></code></p></li></ul><p>So, in order to fulfill our requirement and separate pure code from impure one,we have to refactor our example.</p></section><section id=\"explicit-io\"><h2>Explicit IO<a class=\"headerlink\" href=\"#explicit-io\" title=\"Permalink to this heading\">\u00b6</a></h2><p>Let\u2019s make our <a class=\"reference external\" href=\"https://returns.readthedocs.io/en/latest/pages/io.html\">IO</a>explicit!</p><div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">requests</span><span class=\"kn\">from</span> <span class=\"nn\">returns.io</span> <span class=\"kn\">import</span> <span class=\"n\">IOResult</span><span class=\"p\">,</span> <span class=\"n\">impure_safe</span><span class=\"kn\">from</span> <span class=\"nn\">returns.result</span> <span class=\"kn\">import</span> <span class=\"n\">safe</span><span class=\"kn\">from</span> <span class=\"nn\">returns.pipeline</span> <span class=\"kn\">import</span> <span class=\"n\">flow</span><span class=\"kn\">from</span> <span class=\"nn\">returns.pointfree</span> <span class=\"kn\">import</span> <span class=\"n\">bind_result</span><span class=\"k\">def</span> <span class=\"nf\">fetch_user_profile</span><span class=\"p\">(</span><span class=\"n\">user_id</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">IOResult</span><span class=\"p\">[</span><span class=\"s1\">&#39;UserProfile&#39;</span><span class=\"p\">,</span> <span class=\"ne\">Exception</span><span class=\"p\">]:</span><span class=\"w\">    </span><span class=\"sd\">&quot;&quot;&quot;Fetches `UserProfile` TypedDict from foreign API.&quot;&quot;&quot;</span>    <span class=\"k\">return</span> <span class=\"n\">flow</span><span class=\"p\">(</span>        <span class=\"n\">user_id</span><span class=\"p\">,</span>        <span class=\"n\">_make_request</span><span class=\"p\">,</span>        <span class=\"c1\"># before: def (Response) -&gt; UserProfile</span>        <span class=\"c1\"># after safe: def (Response) -&gt; ResultE[UserProfile]</span>        <span class=\"c1\"># after bind_result: def (IOResultE[Response]) -&gt; IOResultE[UserProfile]</span>        <span class=\"n\">bind_result</span><span class=\"p\">(</span><span class=\"n\">_parse_json</span><span class=\"p\">),</span>    <span class=\"p\">)</span><span class=\"nd\">@impure_safe</span><span class=\"k\">def</span> <span class=\"nf\">_make_request</span><span class=\"p\">(</span><span class=\"n\">user_id</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">requests</span><span class=\"o\">.</span><span class=\"n\">Response</span><span class=\"p\">:</span>    <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">requests</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">&#39;/api/users/</span><span class=\"si\">{0}</span><span class=\"s1\">&#39;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">user_id</span><span class=\"p\">))</span>    <span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">raise_for_status</span><span class=\"p\">()</span>    <span class=\"k\">return</span> <span class=\"n\">response</span><span class=\"nd\">@safe</span><span class=\"k\">def</span> <span class=\"nf\">_parse_json</span><span class=\"p\">(</span><span class=\"n\">response</span><span class=\"p\">:</span> <span class=\"n\">requests</span><span class=\"o\">.</span><span class=\"n\">Response</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"s1\">&#39;UserProfile&#39;</span><span class=\"p\">:</span>    <span class=\"k\">return</span> <span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">json</span><span class=\"p\">()</span></pre></div></div><p>And later we can use <a class=\"reference external\" href=\"https://returns.readthedocs.io/en/latest/pages/io.html#unsafe-perform-io\">unsafe_perform_io</a>somewhere at the top level of our program to get the pure (or \u201creal\u201d) value.</p><p>As a result of this refactoring session, we know everything about our code:</p><ul class=\"simple\"><li><p>Which parts can fail,</p></li><li><p>Which parts are impure,</p></li><li><p>How to compose them in a smart, readable, and typesafe manner.</p></li></ul></section></section><section id=\"id5\"><h1>Future container<a class=\"headerlink\" href=\"#id5\" title=\"Permalink to this heading\">\u00b6</a></h1><p>There are several issues with <code class=\"docutils literal notranslate\"><span class=\"pre\">async</span></code> code in Python:</p><ol class=\"arabic simple\"><li><p>You cannot call <code class=\"docutils literal notranslate\"><span class=\"pre\">async</span></code> function from a sync one</p></li><li><p>Any unexpectedly thrown exception can ruin your whole event loop</p></li><li><p>Ugly composition with lots of <code class=\"docutils literal notranslate\"><span class=\"pre\">await</span></code> statements</p></li></ol><p><code class=\"docutils literal notranslate\"><span class=\"pre\">Future</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">FutureResult</span></code> containers solve these issues!</p><section id=\"mixing-sync-and-async-code\"><h2>Mixing sync and async code<a class=\"headerlink\" href=\"#mixing-sync-and-async-code\" title=\"Permalink to this heading\">\u00b6</a></h2><p>The main feature of <a class=\"reference external\" href=\"https://returns.readthedocs.io/en/latest/pages/future.html\">Future</a>is that it allows to run async codewhile maintaining sync context. Let\u2019s see an example.</p><p>Let\u2019s say we have two functions,the <code class=\"docutils literal notranslate\"><span class=\"pre\">first</span></code> one returns a number and the <code class=\"docutils literal notranslate\"><span class=\"pre\">second</span></code> one increments it:</p><div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">first</span><span class=\"p\">()</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">int</span><span class=\"p\">:</span>    <span class=\"k\">return</span> <span class=\"mi\">1</span><span class=\"k\">def</span> <span class=\"nf\">second</span><span class=\"p\">():</span>  <span class=\"c1\"># How can we call `first()` from here?</span>    <span class=\"k\">return</span> <span class=\"n\">first</span><span class=\"p\">()</span> <span class=\"o\">+</span> <span class=\"mi\">1</span>  <span class=\"c1\"># Boom! Don&#39;t do this. We illustrate a problem here.</span></pre></div></div><p>If we try to just run <code class=\"docutils literal notranslate\"><span class=\"pre\">first()</span></code>, we will just create an unawaited coroutine.It won\u2019t return the value we want.</p><p>But, if we would try to run <code class=\"docutils literal notranslate\"><span class=\"pre\">await</span> <span class=\"pre\">first()</span></code>,then we would need to change <code class=\"docutils literal notranslate\"><span class=\"pre\">second</span></code> to be <code class=\"docutils literal notranslate\"><span class=\"pre\">async</span></code>.And sometimes it is not possible for various reasons.</p><p>However, with <code class=\"docutils literal notranslate\"><span class=\"pre\">Future</span></code> we can \u201cpretend\u201d to call async code from sync code:</p><div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">returns.future</span> <span class=\"kn\">import</span> <span class=\"n\">Future</span><span class=\"k\">def</span> <span class=\"nf\">second</span><span class=\"p\">()</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Future</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]:</span>    <span class=\"k\">return</span> <span class=\"n\">Future</span><span class=\"p\">(</span><span class=\"n\">first</span><span class=\"p\">())</span><span class=\"o\">.</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">num</span><span class=\"p\">:</span> <span class=\"n\">num</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span></pre></div></div><p>Without touching our <code class=\"docutils literal notranslate\"><span class=\"pre\">first</span></code> async functionor making <code class=\"docutils literal notranslate\"><span class=\"pre\">second</span></code> async we have achieved our goal.Now, our async value is incremented inside a sync function.</p><p>However, <code class=\"docutils literal notranslate\"><span class=\"pre\">Future</span></code> still requires to be executed inside a proper eventloop:</p><div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">anyio</span>  <span class=\"c1\"># or asyncio, or any other lib</span><span class=\"c1\"># We can then pass our `Future` to any library: asyncio, trio, curio.</span><span class=\"c1\"># And use any event loop: regular, uvloop, even a custom one, etc</span><span class=\"k\">assert</span> <span class=\"n\">anyio</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">second</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">awaitable</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">2</span></pre></div></div><p>As you can see <code class=\"docutils literal notranslate\"><span class=\"pre\">Future</span></code> allows youto work with async functions from a sync context.And to mix these two realms together.Use raw <code class=\"docutils literal notranslate\"><span class=\"pre\">Future</span></code> for operations that cannot fail or raise exceptions.Pretty much the same logic we had with our <code class=\"docutils literal notranslate\"><span class=\"pre\">IO</span></code> container.</p></section><section id=\"async-code-without-exceptions\"><h2>Async code without exceptions<a class=\"headerlink\" href=\"#async-code-without-exceptions\" title=\"Permalink to this heading\">\u00b6</a></h2><p>We have already covered how <cite>``Result`</cite> &lt;#result-container&gt;`_ worksfor both pure and impure code.The main idea is: we don\u2019t raise exceptions, we return them.It is <strong>especially</strong> critical in async code,because a single exception can ruinall our coroutines running in a single eventloop.</p><p>We have a handy combination of <code class=\"docutils literal notranslate\"><span class=\"pre\">Future</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">Result</span></code> containers: <code class=\"docutils literal notranslate\"><span class=\"pre\">FutureResult</span></code>.Again, this is exactly like <code class=\"docutils literal notranslate\"><span class=\"pre\">IOResult</span></code>, but for impure async code.Use it when your <code class=\"docutils literal notranslate\"><span class=\"pre\">Future</span></code> might have problems:like HTTP requests or filesystem operations.</p><p>You can easily turn any wild throwing coroutine into a calm <code class=\"docutils literal notranslate\"><span class=\"pre\">FutureResult</span></code>:</p><div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">anyio</span><span class=\"kn\">from</span> <span class=\"nn\">returns.future</span> <span class=\"kn\">import</span> <span class=\"n\">future_safe</span><span class=\"kn\">from</span> <span class=\"nn\">returns.io</span> <span class=\"kn\">import</span> <span class=\"n\">IOFailure</span><span class=\"nd\">@future_safe</span><span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">raising</span><span class=\"p\">():</span>    <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span><span class=\"s1\">&#39;Not so fast!&#39;</span><span class=\"p\">)</span><span class=\"n\">ioresult</span> <span class=\"o\">=</span> <span class=\"n\">anyio</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">raising</span><span class=\"o\">.</span><span class=\"n\">awaitable</span><span class=\"p\">)</span>  <span class=\"c1\"># all `Future`s return IO containers</span><span class=\"k\">assert</span> <span class=\"n\">ioresult</span> <span class=\"o\">==</span> <span class=\"n\">IOFailure</span><span class=\"p\">(</span><span class=\"ne\">ValueError</span><span class=\"p\">(</span><span class=\"s1\">&#39;Not so fast!&#39;</span><span class=\"p\">))</span>  <span class=\"c1\"># True</span></pre></div></div><p>Using <code class=\"docutils literal notranslate\"><span class=\"pre\">FutureResult</span></code> will keep your code safe from exceptions.You can always <code class=\"docutils literal notranslate\"><span class=\"pre\">await</span></code> or execute inside an eventloop any <code class=\"docutils literal notranslate\"><span class=\"pre\">FutureResult</span></code>to get sync <code class=\"docutils literal notranslate\"><span class=\"pre\">IOResult</span></code> instance to work with it in a sync manner.</p></section><section id=\"better-async-composition\"><h2>Better async composition<a class=\"headerlink\" href=\"#better-async-composition\" title=\"Permalink to this heading\">\u00b6</a></h2><p>Previously, you had to do quite a lot of <code class=\"docutils literal notranslate\"><span class=\"pre\">await</span></code>ing while writing <code class=\"docutils literal notranslate\"><span class=\"pre\">async</span></code> code:</p><div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">fetch_user</span><span class=\"p\">(</span><span class=\"n\">user_id</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"s1\">&#39;User&#39;</span><span class=\"p\">:</span>    <span class=\"o\">...</span><span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">get_user_permissions</span><span class=\"p\">(</span><span class=\"n\">user</span><span class=\"p\">:</span> <span class=\"s1\">&#39;User&#39;</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"s1\">&#39;Permissions&#39;</span><span class=\"p\">:</span>    <span class=\"o\">...</span><span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">ensure_allowed</span><span class=\"p\">(</span><span class=\"n\">permissions</span><span class=\"p\">:</span> <span class=\"s1\">&#39;Permissions&#39;</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">bool</span><span class=\"p\">:</span>    <span class=\"o\">...</span><span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">(</span><span class=\"n\">user_id</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">bool</span><span class=\"p\">:</span>    <span class=\"c1\"># Also, don&#39;t forget to handle all possible errors with `try / except`!</span>    <span class=\"n\">user</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">fetch_user</span><span class=\"p\">(</span><span class=\"n\">user_id</span><span class=\"p\">)</span>  <span class=\"c1\"># We will await each time we use a coro!</span>    <span class=\"n\">permissions</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">get_user_permissions</span><span class=\"p\">(</span><span class=\"n\">user</span><span class=\"p\">)</span>    <span class=\"k\">return</span> <span class=\"k\">await</span> <span class=\"n\">ensure_allowed</span><span class=\"p\">(</span><span class=\"n\">permissions</span><span class=\"p\">)</span></pre></div></div><p>Some people are ok with it, but some people don\u2019t like this imperative style.The problem is that there was no choice.</p><p>But now, you can do the same thing in functional style!With the help of <code class=\"docutils literal notranslate\"><span class=\"pre\">Future</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">FutureResult</span></code> containers:</p><div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">anyio</span><span class=\"kn\">from</span> <span class=\"nn\">returns.future</span> <span class=\"kn\">import</span> <span class=\"n\">FutureResultE</span><span class=\"p\">,</span> <span class=\"n\">future_safe</span><span class=\"kn\">from</span> <span class=\"nn\">returns.io</span> <span class=\"kn\">import</span> <span class=\"n\">IOSuccess</span><span class=\"p\">,</span> <span class=\"n\">IOFailure</span><span class=\"nd\">@future_safe</span><span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">fetch_user</span><span class=\"p\">(</span><span class=\"n\">user_id</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"s1\">&#39;User&#39;</span><span class=\"p\">:</span>    <span class=\"o\">...</span><span class=\"nd\">@future_safe</span><span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">get_user_permissions</span><span class=\"p\">(</span><span class=\"n\">user</span><span class=\"p\">:</span> <span class=\"s1\">&#39;User&#39;</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"s1\">&#39;Permissions&#39;</span><span class=\"p\">:</span>    <span class=\"o\">...</span><span class=\"nd\">@future_safe</span><span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">ensure_allowed</span><span class=\"p\">(</span><span class=\"n\">permissions</span><span class=\"p\">:</span> <span class=\"s1\">&#39;Permissions&#39;</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">bool</span><span class=\"p\">:</span>    <span class=\"o\">...</span><span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">(</span><span class=\"n\">user_id</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">FutureResultE</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">]:</span>    <span class=\"c1\"># We can now turn `main` into a sync function, it does not `await` at all.</span>    <span class=\"c1\"># We also don&#39;t care about exceptions anymore, they are already handled.</span>    <span class=\"k\">return</span> <span class=\"n\">fetch_user</span><span class=\"p\">(</span><span class=\"n\">user_id</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">bind</span><span class=\"p\">(</span><span class=\"n\">get_user_permissions</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">bind</span><span class=\"p\">(</span><span class=\"n\">ensure_allowed</span><span class=\"p\">)</span><span class=\"n\">correct_user_id</span><span class=\"p\">:</span> <span class=\"nb\">int</span>  <span class=\"c1\"># has required permissions</span><span class=\"n\">banned_user_id</span><span class=\"p\">:</span> <span class=\"nb\">int</span>  <span class=\"c1\"># does not have required permissions</span><span class=\"n\">wrong_user_id</span><span class=\"p\">:</span> <span class=\"nb\">int</span>  <span class=\"c1\"># does not exist</span><span class=\"c1\"># We can have correct business results:</span><span class=\"k\">assert</span> <span class=\"n\">anyio</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">main</span><span class=\"p\">(</span><span class=\"n\">correct_user_id</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">awaitable</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"n\">IOSuccess</span><span class=\"p\">(</span><span class=\"kc\">True</span><span class=\"p\">)</span><span class=\"k\">assert</span> <span class=\"n\">anyio</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">main</span><span class=\"p\">(</span><span class=\"n\">banned_user_id</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">awaitable</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"n\">IOSuccess</span><span class=\"p\">(</span><span class=\"kc\">False</span><span class=\"p\">)</span><span class=\"c1\"># Or we can have errors along the way:</span><span class=\"k\">assert</span> <span class=\"n\">anyio</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">main</span><span class=\"p\">(</span><span class=\"n\">wrong_user_id</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">awaitable</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"n\">IOFailure</span><span class=\"p\">(</span>    <span class=\"n\">UserDoesNotExistError</span><span class=\"p\">(</span><span class=\"o\">...</span><span class=\"p\">),</span><span class=\"p\">)</span></pre></div></div><p>Or even something really fancy:</p><div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">returns.pointfree</span> <span class=\"kn\">import</span> <span class=\"n\">bind</span><span class=\"kn\">from</span> <span class=\"nn\">returns.pipeline</span> <span class=\"kn\">import</span> <span class=\"n\">flow</span><span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">(</span><span class=\"n\">user_id</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">FutureResultE</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">]:</span>    <span class=\"k\">return</span> <span class=\"n\">flow</span><span class=\"p\">(</span>        <span class=\"n\">fetch_user</span><span class=\"p\">(</span><span class=\"n\">user_id</span><span class=\"p\">),</span>        <span class=\"n\">bind</span><span class=\"p\">(</span><span class=\"n\">get_user_permissions</span><span class=\"p\">),</span>        <span class=\"n\">bind</span><span class=\"p\">(</span><span class=\"n\">ensure_allowed</span><span class=\"p\">),</span>    <span class=\"p\">)</span></pre></div></div><p>Later we can also refactor our logical functions to be syncand to return <code class=\"docutils literal notranslate\"><span class=\"pre\">FutureResult</span></code>.</p><p>Lovely, isn\u2019t it?</p></section></section><section id=\"more\"><h1>More!<a class=\"headerlink\" href=\"#more\" title=\"Permalink to this heading\">\u00b6</a></h1><p>Want more?<a class=\"reference external\" href=\"https://returns.readthedocs.io\">Go to the docs!</a>Or read these articles:</p><ul class=\"simple\"><li><p><a class=\"reference external\" href=\"https://sobolevn.me/2019/02/python-exceptions-considered-an-antipattern\">Python exceptions considered an anti-pattern</a></p></li><li><p><a class=\"reference external\" href=\"https://sobolevn.me/2019/03/enforcing-srp\">Enforcing Single Responsibility Principle in Python</a></p></li><li><p><a class=\"reference external\" href=\"https://sobolevn.me/2020/02/typed-functional-dependency-injection\">Typed functional Dependency Injection in Python</a></p></li><li><p><a class=\"reference external\" href=\"https://sobolevn.me/2020/06/how-async-should-have-been\">How Async Should Have Been</a></p></li><li><p><a class=\"reference external\" href=\"https://sobolevn.me/2020/10/higher-kinded-types-in-python\">Higher Kinded Types in Python</a></p></li><li><p><a class=\"reference external\" href=\"https://sobolevn.me/2021/02/make-tests-a-part-of-your-app\">Make Tests a Part of Your App</a></p></li></ul><p>Do you have an article to submit? Feel free to open a pull request!</p></section><section id=\"id6\"><h1>Contents<a class=\"headerlink\" href=\"#id6\" title=\"Permalink to this heading\">\u00b6</a></h1><div class=\"toctree-wrapper compound\"><ul><li class=\"toctree-l1\"><a class=\"reference internal\" href=\"pages/quickstart.html\">Quickstart</a><ul><li class=\"toctree-l2\"><a class=\"reference internal\" href=\"pages/quickstart.html#why\">Why</a></li><li class=\"toctree-l2\"><a class=\"reference internal\" href=\"pages/quickstart.html#installation\">Installation</a></li><li class=\"toctree-l2\"><a class=\"reference internal\" href=\"pages/quickstart.html#typechecking-and-other-integrations\">Typechecking and other integrations</a></li><li class=\"toctree-l2\"><a class=\"reference internal\" href=\"pages/quickstart.html#theory\">Theory</a></li><li class=\"toctree-l2\"><a class=\"reference internal\" href=\"pages/quickstart.html#building-your-own-stuff\">Building your own stuff</a></li></ul></li></ul></div><div class=\"toctree-wrapper compound\"><p class=\"caption\" role=\"heading\"><span class=\"caption-text\">Userguide</span></p><ul><li class=\"toctree-l1\"><a class=\"reference internal\" href=\"pages/container.html\">Container: the concept</a><ul><li class=\"toctree-l2\"><a class=\"reference internal\" href=\"pages/container.html#basics\">Basics</a></li><li class=\"toctree-l2\"><a class=\"reference internal\" href=\"pages/container.html#working-with-a-container\">Working with a container</a></li><li class=\"toctree-l2\"><a class=\"reference internal\" href=\"pages/container.html#instantiating-a-container\">Instantiating a container</a></li><li class=\"toctree-l2\"><a class=\"reference internal\" href=\"pages/container.html#working-with-multiple-containers\">Working with multiple containers</a></li><li class=\"toctree-l2\"><a class=\"reference internal\" href=\"pages/container.html#immutability\">Immutability</a></li><li class=\"toctree-l2\"><a class=\"reference internal\" href=\"pages/container.html#type-safety\">Type safety</a></li><li class=\"toctree-l2\"><a class=\"reference internal\" href=\"pages/container.html#further-reading\">Further reading</a></li><li class=\"toctree-l2\"><a class=\"reference internal\" href=\"pages/container.html#api-reference\">API Reference</a></li></ul></li><li class=\"toctree-l1\"><a class=\"reference internal\" href=\"pages/railway.html\">Railway oriented programming</a><ul><li class=\"toctree-l2\"><a class=\"reference internal\" href=\"pages/railway.html#error-handling\">Error handling</a></li><li class=\"toctree-l2\"><a class=\"reference internal\" href=\"pages/railway.html#unwrapping-values\">Unwrapping values</a></li><li class=\"toctree-l2\"><a class=\"reference internal\" href=\"pages/railway.html#further-reading\">Further reading</a></li></ul></li><li class=\"toctree-l1\"><a class=\"reference internal\" href=\"pages/hkt.html\">Higher Kinded Types</a><ul><li class=\"toctree-l2\"><a class=\"reference internal\" href=\"pages/hkt.html#regular-types\">Regular types</a></li><li class=\"toctree-l2\"><a class=\"reference internal\" href=\"pages/hkt.html#generics\">Generics</a></li><li class=\"toctree-l2\"><a class=\"reference internal\" href=\"pages/hkt.html#operations-on-generics\">Operations on generics</a></li><li class=\"toctree-l2\"><a class=\"reference internal\" href=\"pages/hkt.html#current-limitations\">Current limitations</a></li><li class=\"toctree-l2\"><a class=\"reference internal\" href=\"pages/hkt.html#id1\">Higher Kinded Types</a></li><li class=\"toctree-l2\"><a class=\"reference internal\" href=\"pages/hkt.html#kinds\">Kinds</a></li><li class=\"toctree-l2\"><a class=\"reference internal\" href=\"pages/hkt.html#further-reading\">Further reading</a></li><li class=\"toctree-l2\"><a class=\"reference internal\" href=\"pages/hkt.html#faq\">FAQ</a></li><li class=\"toctree-l2\"><a class=\"reference internal\" href=\"pages/hkt.html#api-reference\">API Reference</a></li></ul></li><li class=\"toctree-l1\"><a class=\"reference internal\" href=\"pages/interfaces.html\">Interfaces</a><ul><li class=\"toctree-l2\"><a class=\"reference internal\" href=\"pages/interfaces.html#general-information\">General information</a></li><li class=\"toctree-l2\"><a class=\"reference internal\" href=\"pages/interfaces.html#mappable\">Mappable</a></li><li class=\"toctree-l2\"><a class=\"reference internal\" href=\"pages/interfaces.html#bindable\">Bindable</a></li><li class=\"toctree-l2\"><a class=\"reference internal\" href=\"pages/interfaces.html#applicative\">Applicative</a></li><li class=\"toctree-l2\"><a class=\"reference internal\" href=\"pages/interfaces.html#container\">Container</a></li><li class=\"toctree-l2\"><a class=\"reference internal\" href=\"pages/interfaces.html#more\">More!</a></li><li class=\"toctree-l2\"><a class=\"reference internal\" href=\"pages/interfaces.html#faq\">FAQ</a></li><li class=\"toctree-l2\"><a class=\"reference internal\" href=\"pages/interfaces.html#api-reference\">API Reference</a></li></ul></li></ul></div><div class=\"toctree-wrapper compound\"><p class=\"caption\" role=\"heading\"><span class=\"caption-text\">Containers</span></p><ul><li class=\"toctree-l1\"><a class=\"reference internal\" href=\"pages/maybe.html\">Maybe</a><ul><li class=\"toctree-l2\"><a class=\"reference internal\" href=\"pages/maybe.html#maybe-container\">Maybe container</a></li><li class=\"toctree-l2\"><a class=\"reference internal\" href=\"pages/maybe.html#pattern-matching\">Pattern Matching</a></li><li class=\"toctree-l2\"><a class=\"reference internal\" href=\"pages/maybe.html#decorators\">Decorators</a></li><li class=\"toctree-l2\"><a class=\"reference internal\" href=\"pages/maybe.html#faq\">FAQ</a></li><li class=\"toctree-l2\"><a class=\"reference internal\" href=\"pages/maybe.html#further-reading\">Further reading</a></li><li class=\"toctree-l2\"><a class=\"reference internal\" href=\"pages/maybe.html#api-reference\">API Reference</a></li></ul></li><li class=\"toctree-l1\"><a class=\"reference internal\" href=\"pages/result.html\">Result</a><ul><li class=\"toctree-l2\"><a class=\"reference internal\" href=\"pages/result.html#composition\">Composition</a></li><li class=\"toctree-l2\"><a class=\"reference internal\" href=\"pages/result.html#pattern-matching\">Pattern Matching</a></li><li class=\"toctree-l2\"><a class=\"reference internal\" href=\"pages/result.html#aliases\">Aliases</a></li><li class=\"toctree-l2\"><a class=\"reference internal\" href=\"pages/result.html#decorators\">Decorators</a></li><li class=\"toctree-l2\"><a class=\"reference internal\" href=\"pages/result.html#faq\">FAQ</a></li><li class=\"toctree-l2\"><a class=\"reference internal\" href=\"pages/result.html#further-reading\">Further reading</a></li><li class=\"toctree-l2\"><a class=\"reference internal\" href=\"pages/result.html#api-reference\">API Reference</a></li></ul></li><li class=\"toctree-l1\"><a class=\"reference internal\" href=\"pages/io.html\">IO</a><ul><li class=\"toctree-l2\"><a class=\"reference internal\" href=\"pages/io.html#io-container\">IO container</a></li><li class=\"toctree-l2\"><a class=\"reference internal\" href=\"pages/io.html#ioresult\">IOResult</a></li><li class=\"toctree-l2\"><a class=\"reference internal\" href=\"pages/io.html#pattern-matching\">Pattern Matching</a></li><li class=\"toctree-l2\"><a class=\"reference internal\" href=\"pages/io.html#aliases\">Aliases</a></li><li class=\"toctree-l2\"><a class=\"reference internal\" href=\"pages/io.html#decorators\">Decorators</a></li><li class=\"toctree-l2\"><a class=\"reference internal\" href=\"pages/io.html#helpers\">Helpers</a></li><li class=\"toctree-l2\"><a class=\"reference internal\" href=\"pages/io.html#faq\">FAQ</a></li><li class=\"toctree-l2\"><a class=\"reference internal\" href=\"pages/io.html#further-reading\">Further reading</a></li><li class=\"toctree-l2\"><a class=\"reference internal\" href=\"pages/io.html#api-reference\">API Reference</a></li></ul></li><li class=\"toctree-l1\"><a class=\"reference internal\" href=\"pages/future.html\">Future</a><ul><li class=\"toctree-l2\"><a class=\"reference internal\" href=\"pages/future.html#future-container\">Future container</a></li><li class=\"toctree-l2\"><a class=\"reference internal\" href=\"pages/future.html#futureresult\">FutureResult</a></li><li class=\"toctree-l2\"><a class=\"reference internal\" href=\"pages/future.html#aliases\">Aliases</a></li><li class=\"toctree-l2\"><a class=\"reference internal\" href=\"pages/future.html#decorators\">Decorators</a></li><li class=\"toctree-l2\"><a class=\"reference internal\" href=\"pages/future.html#faq\">FAQ</a></li><li class=\"toctree-l2\"><a class=\"reference internal\" href=\"pages/future.html#further-reading\">Further reading</a></li><li class=\"toctree-l2\"><a class=\"reference internal\" href=\"pages/future.html#api-reference\">API Reference</a></li></ul></li><li class=\"toctree-l1\"><a class=\"reference internal\" href=\"pages/context.html\">Context</a><ul><li class=\"toctree-l2\"><a class=\"reference internal\" href=\"pages/context.html#using-the-context\">Using the context</a></li><li class=\"toctree-l2\"><a class=\"reference internal\" href=\"pages/context.html#requirescontext-container\">RequiresContext container</a></li><li class=\"toctree-l2\"><a class=\"reference internal\" href=\"pages/context.html#requirescontextresult-container\">RequiresContextResult container</a></li><li class=\"toctree-l2\"><a class=\"reference internal\" href=\"pages/context.html#requirescontextioresult-container\">RequiresContextIOResult container</a></li><li class=\"toctree-l2\"><a class=\"reference internal\" href=\"pages/context.html#requirescontextfutureresult-container\">RequiresContextFutureResult container</a></li><li class=\"toctree-l2\"><a class=\"reference internal\" href=\"pages/context.html#aliases\">Aliases</a></li><li class=\"toctree-l2\"><a class=\"reference internal\" href=\"pages/context.html#faq\">FAQ</a></li><li class=\"toctree-l2\"><a class=\"reference internal\" href=\"pages/context.html#further-reading\">Further reading</a></li><li class=\"toctree-l2\"><a class=\"reference internal\" href=\"pages/context.html#api-reference\">API Reference</a></li></ul></li><li class=\"toctree-l1\"><a class=\"reference internal\" href=\"pages/create-your-own-container.html\">Create your own container</a><ul><li class=\"toctree-l2\"><a class=\"reference internal\" href=\"pages/create-your-own-container.html#step-0-motivation\">Step 0: Motivation</a></li><li class=\"toctree-l2\"><a class=\"reference internal\" href=\"pages/create-your-own-container.html#step-1-choosing-right-interfaces\">Step 1: Choosing right interfaces</a></li><li class=\"toctree-l2\"><a class=\"reference internal\" href=\"pages/create-your-own-container.html#step-2-initial-implementation\">Step 2: Initial implementation</a></li><li class=\"toctree-l2\"><a class=\"reference internal\" href=\"pages/create-your-own-container.html#step-3-new-interfaces\">Step 3: New interfaces</a></li><li class=\"toctree-l2\"><a class=\"reference internal\" href=\"pages/create-your-own-container.html#step-4-writing-tests-and-docs\">Step 4: Writing tests and docs</a></li><li class=\"toctree-l2\"><a class=\"reference internal\" href=\"pages/create-your-own-container.html#step-5-checking-laws\">Step 5: Checking laws</a></li><li class=\"toctree-l2\"><a class=\"reference internal\" href=\"pages/create-your-own-container.html#step-6-writing-type-tests\">Step 6: Writing type-tests</a></li><li class=\"toctree-l2\"><a class=\"reference internal\" href=\"pages/create-your-own-container.html#step-7-reusing-code\">Step 7: Reusing code</a></li></ul></li></ul></div><div class=\"toctree-wrapper compound\"><p class=\"caption\" role=\"heading\"><span class=\"caption-text\">Composition helpers</span></p><ul><li class=\"toctree-l1\"><a class=\"reference internal\" href=\"pages/pipeline.html\">Pipelines</a><ul><li class=\"toctree-l2\"><a class=\"reference internal\" href=\"pages/pipeline.html#flow\">flow</a></li><li class=\"toctree-l2\"><a class=\"reference internal\" href=\"pages/pipeline.html#pipe\">pipe</a></li><li class=\"toctree-l2\"><a class=\"reference internal\" href=\"pages/pipeline.html#managed\">managed</a></li><li class=\"toctree-l2\"><a class=\"reference internal\" href=\"pages/pipeline.html#is-successful\">is_successful</a></li><li class=\"toctree-l2\"><a class=\"reference internal\" href=\"pages/pipeline.html#further-reading\">Further reading</a></li><li class=\"toctree-l2\"><a class=\"reference internal\" href=\"pages/pipeline.html#api-reference\">API Reference</a></li></ul></li><li class=\"toctree-l1\"><a class=\"reference internal\" href=\"pages/converters.html\">Converters</a><ul><li class=\"toctree-l2\"><a class=\"reference internal\" href=\"pages/converters.html#maybe-and-result\">Maybe and Result</a></li><li class=\"toctree-l2\"><a class=\"reference internal\" href=\"pages/converters.html#flatten\">flatten</a></li><li class=\"toctree-l2\"><a class=\"reference internal\" href=\"pages/converters.html#module-returns.converters\">API Reference</a></li></ul></li><li class=\"toctree-l1\"><a class=\"reference internal\" href=\"pages/pointfree.html\">Pointfree</a><ul><li class=\"toctree-l2\"><a class=\"reference internal\" href=\"pages/pointfree.html#map\">map</a></li><li class=\"toctree-l2\"><a class=\"reference internal\" href=\"pages/pointfree.html#bind\">bind</a></li><li class=\"toctree-l2\"><a class=\"reference internal\" href=\"pages/pointfree.html#alt\">alt</a></li><li class=\"toctree-l2\"><a class=\"reference internal\" href=\"pages/pointfree.html#lash\">lash</a></li><li class=\"toctree-l2\"><a class=\"reference internal\" href=\"pages/pointfree.html#apply\">apply</a></li><li class=\"toctree-l2\"><a class=\"reference internal\" href=\"pages/pointfree.html#compose-result\">compose_result</a></li><li class=\"toctree-l2\"><a class=\"reference internal\" href=\"pages/pointfree.html#cond\">cond</a></li><li class=\"toctree-l2\"><a class=\"reference internal\" href=\"pages/pointfree.html#further-reading\">Further reading</a></li><li class=\"toctree-l2\"><a class=\"reference internal\" href=\"pages/pointfree.html#api-reference\">API Reference</a></li></ul></li><li class=\"toctree-l1\"><a class=\"reference internal\" href=\"pages/methods.html\">Methods</a><ul><li class=\"toctree-l2\"><a class=\"reference internal\" href=\"pages/methods.html#cond\">cond</a></li><li class=\"toctree-l2\"><a class=\"reference internal\" href=\"pages/methods.html#unwrap-or-failure\">unwrap_or_failure</a></li><li class=\"toctree-l2\"><a class=\"reference internal\" href=\"pages/methods.html#api-reference\">API Reference</a></li></ul></li><li class=\"toctree-l1\"><a class=\"reference internal\" href=\"pages/do-notation.html\">Do Notation</a><ul><li class=\"toctree-l2\"><a class=\"reference internal\" href=\"pages/do-notation.html#regular-containers\">Regular containers</a></li><li class=\"toctree-l2\"><a class=\"reference internal\" href=\"pages/do-notation.html#async-containers\">Async containers</a></li><li class=\"toctree-l2\"><a class=\"reference internal\" href=\"pages/do-notation.html#faq\">FAQ</a></li><li class=\"toctree-l2\"><a class=\"reference internal\" href=\"pages/do-notation.html#further-reading\">Further reading</a></li></ul></li><li class=\"toctree-l1\"><a class=\"reference internal\" href=\"pages/functions.html\">Helper functions</a><ul><li class=\"toctree-l2\"><a class=\"reference internal\" href=\"pages/functions.html#compose\">compose</a></li><li class=\"toctree-l2\"><a class=\"reference internal\" href=\"pages/functions.html#identity\">identity</a></li><li class=\"toctree-l2\"><a class=\"reference internal\" href=\"pages/functions.html#tap-and-untap\">tap and untap</a></li><li class=\"toctree-l2\"><a class=\"reference internal\" href=\"pages/functions.html#raise-exception\">raise_exception</a></li><li class=\"toctree-l2\"><a class=\"reference internal\" href=\"pages/functions.html#not\">not_</a></li><li class=\"toctree-l2\"><a class=\"reference internal\" href=\"pages/functions.html#module-returns.functions\">API Reference</a></li></ul></li><li class=\"toctree-l1\"><a class=\"reference internal\" href=\"pages/curry.html\">Curry</a><ul><li class=\"toctree-l2\"><a class=\"reference internal\" href=\"pages/curry.html#partial\">Partial</a></li><li class=\"toctree-l2\"><a class=\"reference internal\" href=\"pages/curry.html#id3\">&#64;curry</a></li><li class=\"toctree-l2\"><a class=\"reference internal\" href=\"pages/curry.html#faq\">FAQ</a></li><li class=\"toctree-l2\"><a class=\"reference internal\" href=\"pages/curry.html#further-reading\">Further reading</a></li><li class=\"toctree-l2\"><a class=\"reference internal\" href=\"pages/curry.html#module-returns.curry\">API Reference</a></li></ul></li><li class=\"toctree-l1\"><a class=\"reference internal\" href=\"pages/trampolines.html\">Trampolines</a><ul><li class=\"toctree-l2\"><a class=\"reference internal\" href=\"pages/trampolines.html#module-returns.trampolines\">API Reference</a></li></ul></li><li class=\"toctree-l1\"><a class=\"reference internal\" href=\"pages/types.html\">Primitive types</a><ul><li class=\"toctree-l2\"><a class=\"reference internal\" href=\"pages/types.html#fold\">Fold</a></li><li class=\"toctree-l2\"><a class=\"reference internal\" href=\"pages/types.html#immutable\">Immutable</a></li><li class=\"toctree-l2\"><a class=\"reference internal\" href=\"pages/types.html#api-reference\">API Reference</a></li></ul></li></ul></div><div class=\"toctree-wrapper compound\"><p class=\"caption\" role=\"heading\"><span class=\"caption-text\">Integration</span></p><ul><li class=\"toctree-l1\"><a class=\"reference internal\" href=\"pages/development.html\">Development tooling</a><ul><li class=\"toctree-l2\"><a class=\"reference internal\" href=\"pages/development.html#tracing-failures\">Tracing Failures</a></li><li class=\"toctree-l2\"><a class=\"reference internal\" href=\"pages/development.html#module-returns.primitives.tracing\">API Reference</a></li></ul></li><li class=\"toctree-l1\"><a class=\"reference internal\" href=\"pages/contrib/mypy_plugins.html\">mypy plugin</a><ul><li class=\"toctree-l2\"><a class=\"reference internal\" href=\"pages/contrib/mypy_plugins.html#installation\">Installation</a></li><li class=\"toctree-l2\"><a class=\"reference internal\" href=\"pages/contrib/mypy_plugins.html#configuration\">Configuration</a></li><li class=\"toctree-l2\"><a class=\"reference internal\" href=\"pages/contrib/mypy_plugins.html#supported-features\">Supported features</a></li><li class=\"toctree-l2\"><a class=\"reference internal\" href=\"pages/contrib/mypy_plugins.html#further-reading\">Further reading</a></li><li class=\"toctree-l2\"><a class=\"reference internal\" href=\"pages/contrib/mypy_plugins.html#api-reference\">API Reference</a></li></ul></li><li class=\"toctree-l1\"><a class=\"reference internal\" href=\"pages/contrib/pytest_plugins.html\">pytest plugin</a><ul><li class=\"toctree-l2\"><a class=\"reference internal\" href=\"pages/contrib/pytest_plugins.html#installation\">Installation</a></li><li class=\"toctree-l2\"><a class=\"reference internal\" href=\"pages/contrib/pytest_plugins.html#usage\">Usage</a></li><li class=\"toctree-l2\"><a class=\"reference internal\" href=\"pages/contrib/pytest_plugins.html#further-reading\">Further reading</a></li><li class=\"toctree-l2\"><a class=\"reference internal\" href=\"pages/contrib/pytest_plugins.html#api-reference\">API Reference</a></li></ul></li><li class=\"toctree-l1\"><a class=\"reference internal\" href=\"pages/contrib/hypothesis_plugins.html\">hypothesis plugin</a><ul><li class=\"toctree-l2\"><a class=\"reference internal\" href=\"pages/contrib/hypothesis_plugins.html#installation\">Installation</a></li><li class=\"toctree-l2\"><a class=\"reference internal\" href=\"pages/contrib/hypothesis_plugins.html#hypothesis-entrypoint\">hypothesis entrypoint</a></li><li class=\"toctree-l2\"><a class=\"reference internal\" href=\"pages/contrib/hypothesis_plugins.html#strategy-from-container\">strategy_from_container</a></li><li class=\"toctree-l2\"><a class=\"reference internal\" href=\"pages/contrib/hypothesis_plugins.html#check-all-laws\">check_all_laws</a></li><li class=\"toctree-l2\"><a class=\"reference internal\" href=\"pages/contrib/hypothesis_plugins.html#further-reading\">Further reading</a></li><li class=\"toctree-l2\"><a class=\"reference internal\" href=\"pages/contrib/hypothesis_plugins.html#api-reference\">API Reference</a></li></ul></li></ul></div><div class=\"toctree-wrapper compound\"><p class=\"caption\" role=\"heading\"><span class=\"caption-text\">Changelog</span></p><ul><li class=\"toctree-l1\"><a class=\"reference internal\" href=\"pages/changelog.html\">Version history</a></li></ul></div></section><section id=\"indices-and-tables\"><h1>Indices and tables<a class=\"headerlink\" href=\"#indices-and-tables\" title=\"Permalink to this heading\">\u00b6</a></h1><ul class=\"simple\"><li><p><a class=\"reference internal\" href=\"genindex.html\"><span class=\"std std-ref\">Index</span></a></p></li><li><p><a class=\"reference internal\" href=\"py-modindex.html\"><span class=\"std std-ref\">Module Index</span></a></p></li><li><p><a class=\"reference internal\" href=\"search.html\"><span class=\"std std-ref\">Search Page</span></a></p></li></ul></section>  <div class=\"t-pagination clearfix\">    <span style=\"float:right\">      <a href=\"pages/quickstart.html\" title=\"Quickstart\">Quickstart</a> \u2192    </span>  </div>    </div><footer class=\"t-foot\">    &copy; Copyright 2019, dry-python team.    <br>    A <a href=\"https://typlog.com/\">typlog</a> <a href=\"https://github.com/typlog/sphinx-typlog-theme\">sphinx theme</a>,    designed by <a href=\"https://lepture.com/\">Hsiaoming Yang</a>.</footer>  </div>  <script>$(function(){$(\".t-head_menu\").on(\"click\",function(){$(\"body\").addClass(\"_expand\")});$(\".t-body\").on(\"click\",function(){$(\"body\").removeClass(\"_expand\")});$(\".t-sidebar_close\").on(\"click\",function(){$(\"body\").removeClass(\"_expand\")});$(\"a.footnote-reference\").on(\"click\",function(e){e.preventDefault();var id=$(this).attr(\"href\");var html=$(id).find(\"td.label + td\").html();var w=Math.max(document.documentElement.clientWidth,window.innerWidth||0);var style=\"top:\"+e.pageY+\"px;\";if(w>560){style+=\"width:480px;\";if(e.pageX>240&&e.pageX+240<w){style+=\"left:\"+(e.pageX-240)+\"px;\"}else if(e.pageX<=240){style+=\"left:20px;\"}else{style+=\"right:20px;\"}}showFootnote(html,style)});function showFootnote(html,style){var CONTENT_ID=\"typlog-footnote-content\";var content=document.getElementById(CONTENT_ID);if(!content){content=document.createElement(\"div\");content.id=CONTENT_ID;$(\".t-body\").append(content)}var MASK_ID=\"typlog-footnote-mask\";var mask=document.getElementById(MASK_ID);if(!mask){mask=document.createElement(\"div\");mask.id=MASK_ID;document.body.appendChild(mask);mask.addEventListener(\"click\",function(){content.className=\"\";mask.className=\"\"})}content.innerHTML=html;content.setAttribute(\"style\",style);content.className=\"_active\";mask.className=\"_active\"}function fetchGitHubRepo(repo){var url=\"https://api.github.com/repos/\"+repo;$.getJSON(url,function(data){var counts=[+new Date,data.stargazers_count,data.forks_count];localStorage.setItem(\"gh:\"+repo,JSON.stringify(counts));updateGitHubStats(counts[1],counts[2])})}function updateGitHubStats(stars,forks){$(\".github_stars strong\").text(stars);$(\".github_forks strong\").text(forks)}function initGitHub(url){if(!url){return}var repo=url.replace(\"https://github.com/\",\"\");var cache=localStorage.getItem(\"gh:\"+repo);if(cache){try{var counts=JSON.parse(cache);updateGitHubStats(counts[1],counts[2]);var delta=new Date-counts[0];if(delta<0||delta>9e5){fetchGitHubRepo(repo)}}catch(error){fetchGitHubRepo(repo)}}else{fetchGitHubRepo(repo)}}initGitHub($(\".github\").attr(\"href\"))});</script></body></html>",
  "embeddings": []
}
{
  "libtype": "pypi",
  "libname": "temporalio",
  "url": "https://pypi.org/project/temporalio/",
  "html": "<!DOCTYPE html><html lang=\"en\" dir=\"ltr\">  <head>    <meta charset=\"utf-8\">    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">    <meta name=\"defaultLanguage\" content=\"en\">    <meta name=\"availableLanguages\" content=\"en, es, fr, ja, pt_BR, uk, el, de, zh_Hans, zh_Hant, ru, he, eo\">    <title>temporalio \u00b7 PyPI</title>    <meta name=\"description\" content=\"Temporal.io Python SDK\">    <link rel=\"stylesheet\" href=\"/static/css/warehouse-ltr.99b3104d.css\">    <link rel=\"stylesheet\" href=\"/static/css/fontawesome.b50b476c.css\">    <link rel=\"stylesheet\" href=\"https://fonts.googleapis.com/css?family=Source+Sans+3:400,400italic,600,600italic,700,700italic%7CSource+Code+Pro:500\">    <noscript>      <link rel=\"stylesheet\" href=\"/static/css/noscript.0673c9ea.css\">    </noscript>    <link rel=\"icon\" href=\"/static/images/favicon.35549fe8.ico\" type=\"image/x-icon\">    <link rel=\"alternate\" type=\"application/rss+xml\" title=\"RSS: 40 latest updates\" href=\"/rss/updates.xml\">    <link rel=\"alternate\" type=\"application/rss+xml\" title=\"RSS: 40 newest packages\" href=\"/rss/packages.xml\"><link rel=\"alternate\" type=\"application/rss+xml\" title=\"RSS: latest releases for temporalio\" href=\"/rss/project/temporalio/releases.xml\">    <link rel=\"canonical\" href=\"https://pypi.org/project/temporalio/\">    <meta property=\"og:url\" content=\"https://pypi.org/project/temporalio/\">    <meta property=\"og:site_name\" content=\"PyPI\">    <meta property=\"og:type\" content=\"website\">    <meta property=\"og:image\" content=\"https://pypi.org/static/images/twitter.abaf4b19.webp\">    <meta property=\"og:title\" content=\"temporalio\">    <meta property=\"og:description\" content=\"Temporal.io Python SDK\">    <link rel=\"search\" type=\"application/opensearchdescription+xml\" title=\"PyPI\" href=\"/opensearch.xml\">    <script asyncdata-ga-id=\"UA-55961911-1\"data-ga4-id=\"G-RW7D75DF8V\"            src=\"/static/js/warehouse.dd4295c4.js\">    </script><script>MathJax = {  tex: {    inlineMath: [['$', '$'], ['\\\\(', '\\\\)']]  },};</script><script async  src=\"https://cdn.jsdelivr.net/npm/mathjax@3.2.2/es5/tex-svg.js\"  integrity=\"sha256-1CldwzdEg2k1wTmf7s5RWVd7NMXI/7nxxjJM2C4DqII=\"  crossorigin=\"anonymous\"></script><script async src=\"https://www.googletagmanager.com/gtag/js?id=UA-55961911-1\"></script><script async src=\"https://www.googletagmanager.com/gtag/js?id=G-RW7D75DF8V\"></script><script defer src=\"https://www.fastly-insights.com/insights.js?k=6a52360a-f306-421e-8ed5-7417d0d4a4e9&dnt=true\"></script>    <script async        src=\"https://media.ethicalads.io/media/client/v1.4.0/ethicalads.min.js\"        integrity=\"sha256-U3hKDidudIaxBDEzwGJApJgPEf2mWk6cfMWghrAa6i0= sha384-UcmsCqcNRSLW/dV3Lo1oCi2/VaurXbib6p4HyUEOeIa/4OpsrnucrugAefzVZJfI sha512-q4t1L4xEjGV2R4hzqCa41P8jrgFUS8xTb8rdNv4FGvw7FpydVj/kkxBJHOiaoxHa8olCcx1Slk9K+3sNbsM4ug==\"        crossorigin=\"anonymous\"    ></script>  </head>  <body data-controller=\"viewport-toggle\">    <!-- Accessibility: this link should always be the first piece of content inside the body-->    <a href=\"#content\" class=\"skip-to-content\">Skip to main content</a>    <button type=\"button\" class=\"button button--primary button--switch-to-mobile hidden\" data-viewport-toggle-target=\"switchToMobile\" data-action=\"viewport-toggle#switchToMobile\">Switch to mobile version    </button>    <div id=\"sticky-notifications\" class=\"stick-to-top js-stick-to-top\">      <!-- Add browser warning. Will show for ie9 and below -->      <!--[if IE]>      <div class=\"notification-bar notification-bar--warning\" role=\"status\">        <span class=\"notification-bar__icon\">          <i class=\"fa fa-exclamation-triangle\" aria-hidden=\"true\"></i>          <span class=\"sr-only\">Warning</span>        </span>        <span class=\"notification-bar__message\">You are using an unsupported browser, upgrade to a newer version.</span>      </div>      <![endif]-->      <noscript>      <div class=\"notification-bar notification-bar--warning\" role=\"status\">        <span class=\"notification-bar__icon\">          <i class=\"fa fa-exclamation-triangle\" aria-hidden=\"true\"></i>          <span class=\"sr-only\">Warning</span>        </span>        <span class=\"notification-bar__message\">Some features may not work without JavaScript. Please try enabling it if you encounter problems.</span>      </div>      </noscript><div data-html-include=\"/_includes/notification-banners/\"></div>    </div><div data-html-include=\"/_includes/flash-messages/\"></div><div data-html-include=\"/_includes/session-notifications/\"></div>    <header class=\"site-header \">      <div class=\"site-container\">        <div class=\"split-layout\">          <div class=\"split-layout\">            <div>              <a class=\"site-header__logo\" href=\"/\">                <img alt=\"PyPI\" src=\"/static/images/logo-small.2a411bc6.svg\">              </a>            </div>            <form class=\"search-form search-form--primary\" action=\"/search/\" role=\"search\">              <label for=\"search\" class=\"sr-only\">Search PyPI</label>              <input id=\"search\" class=\"search-form__search\" type=\"text\" name=\"q\" placeholder=\"Search projects\" value=\"\" autocomplete=\"off\" autocapitalize=\"off\" spellcheck=\"false\" data-controller=\"search-focus\" data-action=\"keydown@window->search-focus#focusSearchField\" data-search-focus-target=\"searchField\">              <button type=\"submit\" class=\"search-form__button\">                <i class=\"fa fa-search\" aria-hidden=\"true\"></i>                <span class=\"sr-only\">Search</span>              </button>            </form>          </div><div data-html-include=\"/_includes/current-user-indicator/\">            <div id=\"user-indicator\" class=\"horizontal-menu horizontal-menu--light horizontal-menu--tall\">  <nav class=\"horizontal-menu horizontal-menu--light horizontal-menu--tall hide-on-tablet\" aria-label=\"Main navigation\">    <ul>      <li class=\"horizontal-menu__item\"><a href=\"/help/\" class=\"horizontal-menu__link\">Help</a></li>      <li class=\"horizontal-menu__item\"><a href=\"/sponsors/\" class=\"horizontal-menu__link\">Sponsors</a></li>      <li class=\"horizontal-menu__item\"><a href=\"/account/login/\" class=\"horizontal-menu__link\">Log in</a></li>      <li class=\"horizontal-menu__item\"><a href=\"/account/register/\" class=\"horizontal-menu__link\">Register</a></li>    </ul>  </nav>  <nav class=\"dropdown dropdown--on-menu hidden show-on-tablet\" aria-label=\"Main navigation\">    <button type=\"button\" class=\"horizontal-menu__link dropdown__trigger\" aria-haspopup=\"true\" aria-expanded=\"false\" aria-label=\"View menu\">Menu      <span class=\"dropdown__trigger-caret\">        <i class=\"fa fa-caret-down\" aria-hidden=\"true\"></i>      </span>    </button>    <ul class=\"dropdown__content\" aria-hidden=\"true\" aria-label=\"Main menu\">      <li><a class=\"dropdown__link\" href=\"/help/\">Help</a></li>      <li><a class=\"dropdown__link\" href=\"/sponsors/\">Sponsors</a></li>      <li><a class=\"dropdown__link\" href=\"/account/login/\">Log in</a></li>      <li><a class=\"dropdown__link\" href=\"/account/register/\">Register</a></li>    </ul>  </nav></div></div>        </div>      </div>    </header>    <div class=\"mobile-search\">      <form class=\"search-form search-form--fullwidth\" action=\"/search/\" role=\"search\">        <label for=\"mobile-search\" class=\"sr-only\">Search PyPI</label>        <input id=\"mobile-search\" class=\"search-form__search\" type=\"text\" name=\"q\" placeholder=\"Search projects\" value=\"\" autocomplete=\"off\" autocapitalize=\"off\" spellcheck=\"false\">                <button type=\"submit\" class=\"search-form__button\">          <i class=\"fa fa-search\" aria-hidden=\"true\"></i>          <span class=\"sr-only\">Search</span>        </button>      </form>    </div>    <main id=\"content\"><div class=\"hidden\"  data-controller=\"github-repo-stats\"  data-github-repo-stats-github-repo-info-outlet=\".github-repo-info\"  data-github-repo-stats-url-value=\"https://api.github.com/repos/temporalio/sdk-python\"  data-github-repo-stats-issue-url-value=\"https://api.github.com/search/issues?q=repo:temporalio/sdk-python+type:issue+state:open&amp;per_page=1\"></div><div class=\"banner\">  <div class=\"package-header\">    <div class=\"package-header__left\">      <h1 class=\"package-header__name\">        temporalio 1.5.1      </h1>      <div data-controller=\"clipboard\">        <p class=\"package-header__pip-instructions\">          <span id=\"pip-command\" data-clipboard-target=\"source\">pip install temporalio</span>          <button type=\"button\" class=\"copy-tooltip copy-tooltip-s\" data-action=\"clipboard#copy\" data-clipboard-target=\"tooltip\" data-clipboard-tooltip-value=\"Copy to clipboard\">            <i class=\"fa fa-copy\" aria-hidden=\"true\"></i>            <span class=\"sr-only\">Copy PIP instructions</span>          </button>        </p>      </div>    </div>    <div class=\"package-header__right\">      <a class=\"status-badge status-badge--good\" href=\"/project/temporalio/\">        <span>Latest version</span>      </a>      <p class=\"package-header__date\">Released: <time datetime=\"2024-02-27T21:35:55+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Feb 27, 2024</time>      </p>    </div>  </div></div><div class=\"horizontal-section horizontal-section--grey horizontal-section--thin\">  <div class=\"site-container\"><div data-html-include=\"/_includes/administer-project-include/temporalio\"></div>    <div class=\"split-layout split-layout--middle package-description\">      <p class=\"package-description__summary\">Temporal.io Python SDK</p><div data-html-include=\"/_includes/edit-project-button/temporalio\"></div>    </div>  </div></div><div data-controller=\"project-tabs\">  <div class=\"tabs-container\">    <div class=\"vertical-tabs\">      <div class=\"vertical-tabs__tabs\">        <div class=\"sidebar-section\">          <h3 class=\"sidebar-section__title\">Navigation</h3>          <nav aria-label=\"Navigation for temporalio\">            <ul class=\"vertical-tabs__list\" role=\"tablist\">              <li role=\"tab\">                <a id=\"description-tab\" href=\"#description\" data-project-tabs-target=\"tab\" data-action=\"project-tabs#onTabClick\" class=\"vertical-tabs__tab vertical-tabs__tab--with-icon vertical-tabs__tab--is-active\" aria-selected=\"true\" aria-label=\"Project description. Focus will be moved to the description.\">                  <i class=\"fa fa-align-left\" aria-hidden=\"true\"></i>Project description                </a>              </li>              <li role=\"tab\">                <a id=\"history-tab\" href=\"#history\" data-project-tabs-target=\"tab\" data-action=\"project-tabs#onTabClick\" class=\"vertical-tabs__tab vertical-tabs__tab--with-icon\" aria-label=\"Release history. Focus will be moved to the history panel.\">                  <i class=\"fa fa-history\" aria-hidden=\"true\"></i>Release history                </a>              </li>              <li role=\"tab\">                <a id=\"files-tab\" href=\"#files\" data-project-tabs-target=\"tab\" data-action=\"project-tabs#onTabClick\" class=\"vertical-tabs__tab vertical-tabs__tab--with-icon\" aria-label=\"Download files. Focus will be moved to the project files.\">                  <i class=\"fa fa-download\" aria-hidden=\"true\"></i>Download files                </a>              </li>            </ul>          </nav>        </div><div class=\"sidebar-section\">  <h3 class=\"sidebar-section__title\">Project links</h3>  <ul class=\"vertical-tabs__list\">    <li>      <a class=\"vertical-tabs__tab vertical-tabs__tab--with-icon vertical-tabs__tab--condensed\" href=\"https://github.com/temporalio/sdk-python\" rel=\"nofollow\">        <i class=\"fas fa-home\" aria-hidden=\"true\"></i>Homepage      </a>    </li>    <li>      <a class=\"vertical-tabs__tab vertical-tabs__tab--with-icon vertical-tabs__tab--condensed\" href=\"https://github.com/temporalio/sdk-python/issues\" rel=\"nofollow\">        <i class=\"fas fa-bug\" aria-hidden=\"true\"></i>Bug Tracker      </a>    </li>    <li>      <a class=\"vertical-tabs__tab vertical-tabs__tab--with-icon vertical-tabs__tab--condensed\" href=\"https://docs.temporal.io/docs/python\" rel=\"nofollow\">        <i class=\"fas fa-book\" aria-hidden=\"true\"></i>Documentation      </a>    </li>    <li>      <a class=\"vertical-tabs__tab vertical-tabs__tab--with-icon vertical-tabs__tab--condensed\" href=\"https://github.com/temporalio/sdk-python\" rel=\"nofollow\">        <i class=\"fab fa-github\" aria-hidden=\"true\"></i>Repository      </a>    </li>  </ul></div><div class=\"sidebar-section\">  <h3 class=\"sidebar-section__title\">Statistics</h3>  <div class=\"hidden github-repo-info\" data-controller=\"github-repo-info\">GitHub statistics:    <ul class=\"vertical-tabs__list\">      <li>        <a class=\"vertical-tabs__tab vertical-tabs__tab--with-icon vertical-tabs__tab--condensed\"           data-github-repo-info-target=\"stargazersUrl\" rel=\"noopener\">          <i class=\"fa fa-star\" aria-hidden=\"true\"></i>          <strong>Stars:</strong>          <span data-github-repo-info-target=\"stargazersCount\"></span>        </a>      </li>      <li>        <a class=\"vertical-tabs__tab vertical-tabs__tab--with-icon vertical-tabs__tab--condensed\"           data-github-repo-info-target=\"forksUrl\" rel=\"noopener\">          <i class=\"fa fa-code-branch\" aria-hidden=\"true\"></i>          <strong>Forks:</strong>          <span data-github-repo-info-target=\"forksCount\"></span>        </a>      </li>      <li>        <a class=\"vertical-tabs__tab vertical-tabs__tab--with-icon vertical-tabs__tab--condensed\"           data-github-repo-info-target=\"openIssuesUrl\" rel=\"noopener\">          <i class=\"fa fa-exclamation-circle\" aria-hidden=\"true\"></i>          <strong>Open issues:</strong>          <span data-github-repo-info-target=\"openIssuesCount\"></span>        </a>      </li>      <li>        <a class=\"vertical-tabs__tab vertical-tabs__tab--with-icon vertical-tabs__tab--condensed\"           data-github-repo-info-target=\"openPRsUrl\" rel=\"noopener\">          <i class=\"fa fa-code-pull-request\" aria-hidden=\"true\"></i>          <strong>Open PRs:</strong>          <span data-github-repo-info-target=\"openPRsCount\"></span>        </a>      </li>    </ul>  </div>  <p>View statistics for this project via <a href=\"https://libraries.io/pypi/temporalio\" title=\"External link\" target=\"_blank\" rel=\"noopener\">Libraries.io</a>, or by using <a href=\"https://packaging.python.org/guides/analyzing-pypi-package-downloads/\" target=\"_blank\" rel=\"noopener\">our public dataset on Google BigQuery</a>  </p></div><div class=\"sidebar-section\">  <h3 class=\"sidebar-section__title\">Meta</h3>  <p><strong>License:</strong> MIT License (MIT)</p>    <p><strong>Author:</strong> <a href=\"mailto:sdk@temporal.io\">Temporal Technologies Inc</a></p>  <p class=\"tags\">    <i class=\"fa fa-tags\" aria-hidden=\"true\"></i>    <span class=\"sr-only\">Tags</span>    <span class=\"package-keyword\">      temporal,    </span>    <span class=\"package-keyword\">      workflow    </span>  </p>  <p>    <strong>Requires:</strong> Python &gt;=3.8, &lt;4.0  </p></div><div class=\"sidebar-section\">    <h3 class=\"sidebar-section__title\">Maintainers</h3>      <span class=\"sidebar-section__maintainer\">        <a href=\"/user/cretz/\" aria-label=\"cretz\">          <span class=\"sidebar-section__user-gravatar\">            <img src=\"https://pypi-camo.freetls.fastly.net/8441de39fcc3a7465074f633140f896a441cedbf/68747470733a2f2f7365637572652e67726176617461722e636f6d2f6176617461722f30333663646133366234336566623535666433313039363162343130663565373f73697a653d3530\" height=\"50\" width=\"50\" alt=\"Avatar for cretz from gravatar.com\" title=\"Avatar for cretz from gravatar.com\">          </span>          <span class=\"sidebar-section__user-gravatar-text\">            cretz          </span>        </a>      </span>      <span class=\"sidebar-section__maintainer\">        <a href=\"/user/swgillespie-temporal/\" aria-label=\"swgillespie-temporal\">          <span class=\"sidebar-section__user-gravatar\">            <img src=\"https://pypi-camo.freetls.fastly.net/ff7fc461a9e047b735ba378993c9a2f98e635a10/68747470733a2f2f7365637572652e67726176617461722e636f6d2f6176617461722f36666232653065333735653632633335353864643830316162386433376464643f73697a653d3530\" height=\"50\" width=\"50\" alt=\"Avatar for swgillespie-temporal from gravatar.com\" title=\"Avatar for swgillespie-temporal from gravatar.com\">          </span>          <span class=\"sidebar-section__user-gravatar-text\">            swgillespie-temporal          </span>        </a>      </span>      <span class=\"sidebar-section__maintainer\">        <a href=\"/user/temporalio/\" aria-label=\"temporalio\">          <span class=\"sidebar-section__user-gravatar\">            <img src=\"https://pypi-camo.freetls.fastly.net/8683e03b34b6389c890204ae964191c7e76535a1/68747470733a2f2f7365637572652e67726176617461722e636f6d2f6176617461722f38396163653135336166393139323965376439316530306464386664383333663f73697a653d3530\" height=\"50\" width=\"50\" alt=\"Avatar for temporalio from gravatar.com\" title=\"Avatar for temporalio from gravatar.com\">          </span>          <span class=\"sidebar-section__user-gravatar-text\">            temporalio          </span>        </a>      </span></div><div class=\"sidebar-section\">  <h3 class=\"sidebar-section__title\">Classifiers</h3>  <ul class=\"sidebar-section__classifiers\">    <li>      <strong>License</strong>      <ul>        <li>          <a href=\"/search/?c=License+%3A%3A+OSI+Approved+%3A%3A+MIT+License\">            OSI Approved :: MIT License          </a>        </li>      </ul>    </li>    <li>      <strong>Programming Language</strong>      <ul>        <li>          <a href=\"/search/?c=Programming+Language+%3A%3A+Python+%3A%3A+3\">            Python :: 3          </a>        </li>        <li>          <a href=\"/search/?c=Programming+Language+%3A%3A+Python+%3A%3A+3.8\">            Python :: 3.8          </a>        </li>        <li>          <a href=\"/search/?c=Programming+Language+%3A%3A+Python+%3A%3A+3.9\">            Python :: 3.9          </a>        </li>        <li>          <a href=\"/search/?c=Programming+Language+%3A%3A+Python+%3A%3A+3.10\">            Python :: 3.10          </a>        </li>        <li>          <a href=\"/search/?c=Programming+Language+%3A%3A+Python+%3A%3A+3.11\">            Python :: 3.11          </a>        </li>        <li>          <a href=\"/search/?c=Programming+Language+%3A%3A+Python+%3A%3A+3.12\">            Python :: 3.12          </a>        </li>      </ul>    </li>  </ul></div><div class=\"sidebar-section\" data-ea-publisher=\"psf\" data-ea-type=\"psf\" data-ea-keywords=\"pypi-sidebar\"></div>      </div>      <div class=\"vertical-tabs__panel\">        <!-- mobile menu -->        <nav aria-label=\"Navigation for temporalio\">          <ul class=\"vertical-tabs__list\" role=\"tablist\">            <li role=\"tab\">              <a id=\"mobile-description-tab\" href=\"#description\" data-project-tabs-target=\"mobileTab\" data-action=\"project-tabs#onTabClick\" class=\"vertical-tabs__tab vertical-tabs__tab--with-icon vertical-tabs__tab--mobile vertical-tabs__tab--no-top-border vertical-tabs__tab--is-active\" aria-selected=\"true\" aria-label=\"Project description. Focus will be moved to the description.\">                <i class=\"fa fa-align-left\" aria-hidden=\"true\"></i>Project description              </a>            </li>            <li role=\"tab\">              <a id=\"mobile-data-tab\" href=\"#data\" data-project-tabs-target=\"mobileTab\" data-action=\"project-tabs#onTabClick\" class=\"vertical-tabs__tab vertical-tabs__tab--with-icon vertical-tabs__tab--mobile\" aria-label=\"Project details. Focus will be moved to the project details.\">                <i class=\"fa fa-info-circle\" aria-hidden=\"true\"></i>Project details              </a>            </li>            <li role=\"tab\">              <a id=\"mobile-history-tab\" href=\"#history\" data-project-tabs-target=\"mobileTab\" data-action=\"project-tabs#onTabClick\" class=\"vertical-tabs__tab vertical-tabs__tab--with-icon vertical-tabs__tab--mobile\" aria-label=\"Release history. Focus will be moved to the history panel.\">              <i class=\"fa fa-history\" aria-hidden=\"true\"></i>Release history            </a>            </li>            <li role=\"tab\">              <a id=\"mobile-files-tab\" href=\"#files\" data-project-tabs-target=\"mobileTab\" data-action=\"project-tabs#onTabClick\" class=\"vertical-tabs__tab vertical-tabs__tab--with-icon vertical-tabs__tab--mobile\" aria-label=\"Download files. Focus will be moved to the project files.\">                <i class=\"fa fa-download\" aria-hidden=\"true\"></i>Download files              </a>            </li>          </ul>        </nav>        <div id=\"description\" data-project-tabs-target=\"content\" class=\"vertical-tabs__content\" role=\"tabpanel\" aria-labelledby=\"description-tab mobile-description-tab\" tabindex=\"-1\">          <h2 class=\"page-title\">Project description</h2>          <div class=\"project-description\">            <p><img src=\"https://pypi-camo.freetls.fastly.net/a1bd272752bdb48f2924a2da9c226fadbe42d354/68747470733a2f2f6173736574732e74656d706f72616c2e696f2f772f70792d62616e6e65722e737667\" alt=\"Temporal Python SDK\"></p><p><a href=\"https://pypi.org/project/temporalio\" rel=nofollow><img src=\"https://pypi-camo.freetls.fastly.net/50408e63b7a9b55384a7bb98782deb52bab7614a/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f74656d706f72616c696f2e7376673f7374796c653d666f722d7468652d6261646765\" alt=\"Python 3.8+\"></a><a href=\"https://pypi.org/project/temporalio\" rel=nofollow><img src=\"https://pypi-camo.freetls.fastly.net/2669da11acf4c399d34c9d2760cfb66aae37dbe6/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f74656d706f72616c696f2e7376673f7374796c653d666f722d7468652d6261646765\" alt=PyPI></a><a href=LICENSE rel=nofollow><img src=\"https://pypi-camo.freetls.fastly.net/e54431f3cbb916ccfe15bfdb818e5f6e29337554/68747470733a2f2f696d672e736869656c64732e696f2f707970692f6c2f74656d706f72616c696f2e7376673f7374796c653d666f722d7468652d6261646765\" alt=MIT></a></p><p><a href=\"https://temporal.io/\" rel=nofollow>Temporal</a> is a distributed, scalable, durable, and highly available orchestration engine used toexecute asynchronous, long-running business logic in a scalable and resilient way.</p><p>\"Temporal Python SDK\" is the framework for authoring workflows and activities using the Python programming language.</p><p>Also see:</p><ul><li><a href=\"https://docs.temporal.io/application-development?lang=python\" rel=nofollow>Application Development Guide</a> - Once you've tried our<a href=#quick-start rel=nofollow>Quick Start</a>, check out our guide on how to use Temporal in your Python applications, includinginformation around Temporal core concepts.</li><li><a href=\"https://github.com/temporalio/samples-python\" rel=nofollow>Python Code Samples</a></li><li><a href=\"https://python.temporal.io\" rel=nofollow>API Documentation</a> - Complete Temporal Python SDK Package reference.</li></ul><p>In addition to features common across all Temporal SDKs, the Python SDK also has the following interesting features:</p><p><strong>Type Safe</strong></p><p>This library uses the latest typing and MyPy support with generics to ensure all calls can be typed. For example,starting a workflow with an <code>int</code> parameter when it accepts a <code>str</code> parameter would cause MyPy to fail.</p><p><strong>Different Activity Types</strong></p><p>The activity worker has been developed to work with <code>async def</code>, threaded, and multiprocess activities. While<code>async def</code> activities are the easiest and recommended, care has been taken to make heartbeating and cancellation alsowork across threads/processes.</p><p><strong>Custom <code>asyncio</code> Event Loop</strong></p><p>The workflow implementation basically turns <code>async def</code> functions into workflows backed by a distributed, fault-tolerantevent loop. This means task management, sleep, cancellation, etc have all been developed to seamlessly integrate with<code>asyncio</code> concepts.</p><p>See the <a href=\"https://temporal.io/blog/durable-distributed-asyncio-event-loop\" rel=nofollow>blog post</a> introducing the Python SDK for aninformal introduction to the features and their implementation.</p><hr><p><strong>Contents</strong></p><ul><li><a href=#quick-start rel=nofollow>Quick Start</a><ul><li><a href=#installation rel=nofollow>Installation</a></li><li><a href=#implementing-a-workflow rel=nofollow>Implementing a Workflow</a></li><li><a href=#running-a-workflow rel=nofollow>Running a Workflow</a></li><li><a href=#next-steps rel=nofollow>Next Steps</a></li></ul></li><li><a href=#usage rel=nofollow>Usage</a><ul><li><a href=#client rel=nofollow>Client</a><ul><li><a href=#data-conversion rel=nofollow>Data Conversion</a><ul><li><a href=#custom-type-data-conversion rel=nofollow>Custom Type Data Conversion</a></li></ul></li></ul></li><li><a href=#workers rel=nofollow>Workers</a></li><li><a href=#workflows rel=nofollow>Workflows</a><ul><li><a href=#definition rel=nofollow>Definition</a></li><li><a href=#running rel=nofollow>Running</a></li><li><a href=#invoking-activities rel=nofollow>Invoking Activities</a></li><li><a href=#invoking-child-workflows rel=nofollow>Invoking Child Workflows</a></li><li><a href=#timers rel=nofollow>Timers</a></li><li><a href=#conditions rel=nofollow>Conditions</a></li><li><a href=#asyncio-and-cancellation rel=nofollow>Asyncio and Cancellation</a></li><li><a href=#workflow-utilities rel=nofollow>Workflow Utilities</a></li><li><a href=#exceptions rel=nofollow>Exceptions</a></li><li><a href=#external-workflows rel=nofollow>External Workflows</a></li><li><a href=#testing rel=nofollow>Testing</a><ul><li><a href=#automatic-time-skipping rel=nofollow>Automatic Time Skipping</a></li><li><a href=#manual-time-skipping rel=nofollow>Manual Time Skipping</a></li><li><a href=#mocking-activities rel=nofollow>Mocking Activities</a></li></ul></li><li><a href=#workflow-sandbox rel=nofollow>Workflow Sandbox</a><ul><li><a href=#how-the-sandbox-works rel=nofollow>How the Sandbox Works</a></li><li><a href=#avoiding-the-sandbox rel=nofollow>Avoiding the Sandbox</a></li><li><a href=#customizing-the-sandbox rel=nofollow>Customizing the Sandbox</a><ul><li><a href=#passthrough-modules rel=nofollow>Passthrough Modules</a></li><li><a href=#invalid-module-members rel=nofollow>Invalid Module Members</a></li></ul></li><li><a href=#known-sandbox-issues rel=nofollow>Known Sandbox Issues</a><ul><li><a href=#global-importbuiltins rel=nofollow>Global Import/Builtins</a></li><li><a href=#sandbox-is-not-secure rel=nofollow>Sandbox is not Secure</a></li><li><a href=#sandbox-performance rel=nofollow>Sandbox Performance</a></li><li><a href=#extending-restricted-classes rel=nofollow>Extending Restricted Classes</a></li><li><a href=#certain-standard-library-calls-on-restricted-objects rel=nofollow>Certain Standard Library Calls on Restricted Objects</a></li><li><a href=#is_subclass-of-abc-based-restricted-classes rel=nofollow>is_subclass of ABC-based Restricted Classes</a></li><li><a href=#compiled-pydantic-sometimes-using-wrong-types rel=nofollow>Compiled Pydantic Sometimes Using Wrong Types</a></li></ul></li></ul></li></ul></li><li><a href=#activities rel=nofollow>Activities</a><ul><li><a href=#definition-1 rel=nofollow>Definition</a></li><li><a href=#types-of-activities rel=nofollow>Types of Activities</a><ul><li><a href=#synchronous-activities rel=nofollow>Synchronous Activities</a><ul><li><a href=#synchronous-multithreaded-activities rel=nofollow>Synchronous Multithreaded Activities</a></li><li><a href=#synchronous-multiprocessother-activities rel=nofollow>Synchronous Multiprocess/Other Activities</a></li></ul></li><li><a href=#asynchronous-activities rel=nofollow>Asynchronous Activities</a></li></ul></li><li><a href=#activity-context rel=nofollow>Activity Context</a><ul><li><a href=#heartbeating-and-cancellation rel=nofollow>Heartbeating and Cancellation</a></li><li><a href=#worker-shutdown rel=nofollow>Worker Shutdown</a></li></ul></li><li><a href=#testing-1 rel=nofollow>Testing</a></li></ul></li><li><a href=#workflow-replay rel=nofollow>Workflow Replay</a></li><li><a href=#opentelemetry-support rel=nofollow>OpenTelemetry Support</a></li><li><a href=#protobuf-3x-vs-4x rel=nofollow>Protobuf 3.x vs 4.x</a></li><li><a href=#known-compatibility-issues rel=nofollow>Known Compatibility Issues</a><ul><li><a href=#gevent-patching rel=nofollow>gevent Patching</a></li></ul></li></ul></li><li><a href=#development rel=nofollow>Development</a><ul><li><a href=#building rel=nofollow>Building</a><ul><li><a href=#prepare rel=nofollow>Prepare</a></li><li><a href=#build rel=nofollow>Build</a></li><li><a href=#use rel=nofollow>Use</a></li></ul></li><li><a href=#local-sdk-development-environment rel=nofollow>Local SDK development environment</a><ul><li><a href=#testing-2 rel=nofollow>Testing</a></li><li><a href=#proto-generation-and-testing rel=nofollow>Proto Generation and Testing</a></li></ul></li><li><a href=#style rel=nofollow>Style</a></li></ul></li></ul><h1>Quick Start</h1><p>We will guide you through the Temporal basics to create a \"hello, world!\" script on your machine. It is not intended asone of the ways to use Temporal, but in reality it is very simplified and decidedly not \"the only way\" to use Temporal.For more information, check out the docs references in \"Next Steps\" below the quick start.</p><h2>Installation</h2><p>Install the <code>temporalio</code> package from <a href=\"https://pypi.org/project/temporalio\" rel=nofollow>PyPI</a>.</p><p>These steps can be followed to use with a virtual environment and <code>pip</code>:</p><ul><li><a href=\"https://packaging.python.org/en/latest/tutorials/installing-packages/#creating-virtual-environments\" rel=nofollow>Create a virtual environment</a></li><li>Update <code>pip</code> - <code>python -m pip install -U pip</code><ul><li>Needed because older versions of <code>pip</code> may not pick the right wheel</li></ul></li><li>Install Temporal SDK - <code>python -m pip install temporalio</code></li></ul><p>The SDK is now ready for use. To build from source, see \"Building\" near the end of this documentation.</p><p><strong>NOTE: This README is for the current branch and not necessarily what's released on <code>PyPI</code>.</strong></p><h2>Implementing a Workflow</h2><p>Create the following in <code>activities.py</code>:</p><pre lang=python3><span class=kn>from</span> <span class=nn>temporalio</span> <span class=kn>import</span> <span class=n>activity</span><span class=nd>@activity</span><span class=o>.</span><span class=n>defn</span><span class=k>def</span> <span class=nf>say_hello</span><span class=p>(</span><span class=n>name</span><span class=p>:</span> <span class=nb>str</span><span class=p>)</span> <span class=o>-&gt;</span> <span class=nb>str</span><span class=p>:</span>    <span class=k>return</span> <span class=sa>f</span><span class=s2>\"Hello, </span><span class=si>{</span><span class=n>name</span><span class=si>}</span><span class=s2>!\"</span></pre><p>Create the following in <code>workflows.py</code>:</p><pre lang=python3><span class=kn>from</span> <span class=nn>datetime</span> <span class=kn>import</span> <span class=n>timedelta</span><span class=kn>from</span> <span class=nn>temporalio</span> <span class=kn>import</span> <span class=n>workflow</span><span class=c1># Import our activity, passing it through the sandbox</span><span class=k>with</span> <span class=n>workflow</span><span class=o>.</span><span class=n>unsafe</span><span class=o>.</span><span class=n>imports_passed_through</span><span class=p>():</span>    <span class=kn>from</span> <span class=nn>.activities</span> <span class=kn>import</span> <span class=n>say_hello</span><span class=nd>@workflow</span><span class=o>.</span><span class=n>defn</span><span class=k>class</span> <span class=nc>SayHello</span><span class=p>:</span>    <span class=nd>@workflow</span><span class=o>.</span><span class=n>run</span>    <span class=k>async</span> <span class=k>def</span> <span class=nf>run</span><span class=p>(</span><span class=bp>self</span><span class=p>,</span> <span class=n>name</span><span class=p>:</span> <span class=nb>str</span><span class=p>)</span> <span class=o>-&gt;</span> <span class=nb>str</span><span class=p>:</span>        <span class=k>return</span> <span class=k>await</span> <span class=n>workflow</span><span class=o>.</span><span class=n>execute_activity</span><span class=p>(</span>            <span class=n>say_hello</span><span class=p>,</span> <span class=n>name</span><span class=p>,</span> <span class=n>schedule_to_close_timeout</span><span class=o>=</span><span class=n>timedelta</span><span class=p>(</span><span class=n>seconds</span><span class=o>=</span><span class=mi>5</span><span class=p>)</span>        <span class=p>)</span></pre><p>Create the following in <code>run_worker.py</code>:</p><pre lang=python3><span class=kn>import</span> <span class=nn>asyncio</span><span class=kn>import</span> <span class=nn>concurrent.futures</span><span class=kn>from</span> <span class=nn>temporalio.client</span> <span class=kn>import</span> <span class=n>Client</span><span class=kn>from</span> <span class=nn>temporalio.worker</span> <span class=kn>import</span> <span class=n>Worker</span><span class=c1># Import the activity and workflow from our other files</span><span class=kn>from</span> <span class=nn>.activities</span> <span class=kn>import</span> <span class=n>say_hello</span><span class=kn>from</span> <span class=nn>.workflows</span> <span class=kn>import</span> <span class=n>SayHello</span><span class=k>async</span> <span class=k>def</span> <span class=nf>main</span><span class=p>():</span>    <span class=c1># Create client connected to server at the given address</span>    <span class=n>client</span> <span class=o>=</span> <span class=k>await</span> <span class=n>Client</span><span class=o>.</span><span class=n>connect</span><span class=p>(</span><span class=s2>\"localhost:7233\"</span><span class=p>)</span>    <span class=c1># Run the worker</span>    <span class=k>with</span> <span class=n>concurrent</span><span class=o>.</span><span class=n>futures</span><span class=o>.</span><span class=n>ThreadPoolExecutor</span><span class=p>(</span><span class=n>max_workers</span><span class=o>=</span><span class=mi>100</span><span class=p>)</span> <span class=k>as</span> <span class=n>activity_executor</span><span class=p>:</span>        <span class=n>worker</span> <span class=o>=</span> <span class=n>Worker</span><span class=p>(</span>          <span class=n>client</span><span class=p>,</span>          <span class=n>task_queue</span><span class=o>=</span><span class=s2>\"my-task-queue\"</span><span class=p>,</span>          <span class=n>workflows</span><span class=o>=</span><span class=p>[</span><span class=n>SayHello</span><span class=p>],</span>          <span class=n>activities</span><span class=o>=</span><span class=p>[</span><span class=n>say_hello</span><span class=p>],</span>          <span class=n>activity_executor</span><span class=o>=</span><span class=n>activity_executor</span><span class=p>,</span>        <span class=p>)</span>        <span class=k>await</span> <span class=n>worker</span><span class=o>.</span><span class=n>run</span><span class=p>()</span><span class=k>if</span> <span class=vm>__name__</span> <span class=o>==</span> <span class=s2>\"__main__\"</span><span class=p>:</span>    <span class=n>asyncio</span><span class=o>.</span><span class=n>run</span><span class=p>(</span><span class=n>main</span><span class=p>())</span></pre><p>Assuming you have a <a href=\"https://docs.temporal.io/docs/server/quick-install/\" rel=nofollow>Temporal server running on localhost</a>, thiswill run the worker:</p><pre><code>python run_worker.py</code></pre><h2>Running a Workflow</h2><p>Create the following script at <code>run_workflow.py</code>:</p><pre lang=python3><span class=kn>import</span> <span class=nn>asyncio</span><span class=kn>from</span> <span class=nn>temporalio.client</span> <span class=kn>import</span> <span class=n>Client</span><span class=c1># Import the workflow from the previous code</span><span class=kn>from</span> <span class=nn>.workflows</span> <span class=kn>import</span> <span class=n>SayHello</span><span class=k>async</span> <span class=k>def</span> <span class=nf>main</span><span class=p>():</span>    <span class=c1># Create client connected to server at the given address</span>    <span class=n>client</span> <span class=o>=</span> <span class=k>await</span> <span class=n>Client</span><span class=o>.</span><span class=n>connect</span><span class=p>(</span><span class=s2>\"localhost:7233\"</span><span class=p>)</span>    <span class=c1># Execute a workflow</span>    <span class=n>result</span> <span class=o>=</span> <span class=k>await</span> <span class=n>client</span><span class=o>.</span><span class=n>execute_workflow</span><span class=p>(</span><span class=n>SayHello</span><span class=o>.</span><span class=n>run</span><span class=p>,</span> <span class=s2>\"my name\"</span><span class=p>,</span> <span class=nb>id</span><span class=o>=</span><span class=s2>\"my-workflow-id\"</span><span class=p>,</span> <span class=n>task_queue</span><span class=o>=</span><span class=s2>\"my-task-queue\"</span><span class=p>)</span>    <span class=nb>print</span><span class=p>(</span><span class=sa>f</span><span class=s2>\"Result: </span><span class=si>{</span><span class=n>result</span><span class=si>}</span><span class=s2>\"</span><span class=p>)</span><span class=k>if</span> <span class=vm>__name__</span> <span class=o>==</span> <span class=s2>\"__main__\"</span><span class=p>:</span>    <span class=n>asyncio</span><span class=o>.</span><span class=n>run</span><span class=p>(</span><span class=n>main</span><span class=p>())</span></pre><p>Assuming you have <code>run_worker.py</code> running from before, this will run the workflow:</p><pre><code>python run_workflow.py</code></pre><p>The output will be:</p><pre><code>Result: Hello, my-name!</code></pre><h2>Next Steps</h2><p>Temporal can be implemented in your code in many different ways, to suit your application's needs. The links below willgive you much more information about how Temporal works with Python:</p><ul><li><a href=\"https://github.com/temporalio/samples-python\" rel=nofollow>Code Samples</a> - If you want to start with some code, we have providedsome pre-built samples.</li><li><a href=\"https://docs.temporal.io/application-development?lang=python\" rel=nofollow>Application Development Guide</a> Our Python specificDeveloper's Guide will give you much more information on how to build with Temporal in your Python applications thanour SDK README ever could (or should).</li><li><a href=\"https://python.temporal.io\" rel=nofollow>API Documentation</a> - Full Temporal Python SDK package documentation.</li></ul><hr><h1>Usage</h1><p>From here, you will find reference documentation about specific pieces of the Temporal Python SDK that were built aroundTemporal concepts. <em>This section is not intended as a how-to guide</em> -- For more how-to oriented information, check outthe links in the <a href=#next-steps rel=nofollow>Next Steps</a> section above.</p><h3>Client</h3><p>A client can be created and used to start a workflow like so:</p><pre lang=python3><span class=kn>from</span> <span class=nn>temporalio.client</span> <span class=kn>import</span> <span class=n>Client</span><span class=k>async</span> <span class=k>def</span> <span class=nf>main</span><span class=p>():</span>    <span class=c1># Create client connected to server at the given address and namespace</span>    <span class=n>client</span> <span class=o>=</span> <span class=k>await</span> <span class=n>Client</span><span class=o>.</span><span class=n>connect</span><span class=p>(</span><span class=s2>\"localhost:7233\"</span><span class=p>,</span> <span class=n>namespace</span><span class=o>=</span><span class=s2>\"my-namespace\"</span><span class=p>)</span>    <span class=c1># Start a workflow</span>    <span class=n>handle</span> <span class=o>=</span> <span class=k>await</span> <span class=n>client</span><span class=o>.</span><span class=n>start_workflow</span><span class=p>(</span><span class=n>MyWorkflow</span><span class=o>.</span><span class=n>run</span><span class=p>,</span> <span class=s2>\"some arg\"</span><span class=p>,</span> <span class=nb>id</span><span class=o>=</span><span class=s2>\"my-workflow-id\"</span><span class=p>,</span> <span class=n>task_queue</span><span class=o>=</span><span class=s2>\"my-task-queue\"</span><span class=p>)</span>    <span class=c1># Wait for result</span>    <span class=n>result</span> <span class=o>=</span> <span class=k>await</span> <span class=n>handle</span><span class=o>.</span><span class=n>result</span><span class=p>()</span>    <span class=nb>print</span><span class=p>(</span><span class=sa>f</span><span class=s2>\"Result: </span><span class=si>{</span><span class=n>result</span><span class=si>}</span><span class=s2>\"</span><span class=p>)</span></pre><p>Some things to note about the above code:</p><ul><li>A <code>Client</code> does not have an explicit \"close\"</li><li>To enable TLS, the <code>tls</code> argument to <code>connect</code> can be set to <code>True</code> or a <code>TLSConfig</code> object</li><li>A single positional argument can be passed to <code>start_workflow</code>. If there are multiple arguments, only thenon-type-safe form of <code>start_workflow</code> can be used (i.e. the one accepting a string workflow name) and it must be inthe <code>args</code> keyword argument.</li><li>The <code>handle</code> represents the workflow that was started and can be used for more than just getting the result</li><li>Since we are just getting the handle and waiting on the result, we could have called <code>client.execute_workflow</code> whichdoes the same thing</li><li>Clients can have many more options not shown here (e.g. data converters and interceptors)</li><li>A string can be used instead of the method reference to call a workflow by name (e.g. if defined in another language)</li><li>Clients do not work across forks</li></ul><p>Clients also provide a shallow copy of their config for use in making slightly different clients backed by the sameconnection. For instance, given the <code>client</code> above, this is how to have a client in another namespace:</p><pre lang=python3><span class=n>config</span> <span class=o>=</span> <span class=n>client</span><span class=o>.</span><span class=n>config</span><span class=p>()</span><span class=n>config</span><span class=p>[</span><span class=s2>\"namespace\"</span><span class=p>]</span> <span class=o>=</span> <span class=s2>\"my-other-namespace\"</span><span class=n>other_ns_client</span> <span class=o>=</span> <span class=n>Client</span><span class=p>(</span><span class=o>**</span><span class=n>config</span><span class=p>)</span></pre><h4>Data Conversion</h4><p>Data converters are used to convert raw Temporal payloads to/from actual Python types. A custom data converter of type<code>temporalio.converter.DataConverter</code> can be set via the <code>data_converter</code> client parameter. Data converters are acombination of payload converters, payload codecs, and failure converters. Payload converters convert Python valuesto/from serialized bytes. Payload codecs convert bytes to bytes (e.g. for compression or encryption). Failure convertersconvert exceptions to/from serialized failures.</p><p>The default data converter supports converting multiple types including:</p><ul><li><code>None</code></li><li><code>bytes</code></li><li><code>google.protobuf.message.Message</code> - As JSON when encoding, but has ability to decode binary proto from other languages</li><li>Anything that can be converted to JSON including:<ul><li>Anything that <a href=\"https://docs.python.org/3/library/json.html#json.dump\" rel=nofollow><code>json.dump</code></a> supports natively</li><li><a href=\"https://docs.python.org/3/library/dataclasses.html\" rel=nofollow>dataclasses</a></li><li>Iterables including ones JSON dump may not support by default, e.g. <code>set</code></li><li>Any class with a <code>dict()</code> method and a static <code>parse_obj()</code> method, e.g.<a href=\"https://pydantic-docs.helpmanual.io/usage/models\" rel=nofollow>Pydantic models</a><ul><li>The default data converter is deprecated for Pydantic models and will warn if used since not all fields work.See <a href=\"https://github.com/temporalio/samples-python/tree/main/pydantic_converter\" rel=nofollow>this sample</a> for the recommendedapproach.</li></ul></li><li><a href=\"https://docs.python.org/3/library/enum.html\" rel=nofollow>IntEnum, StrEnum</a> based enumerates</li><li><a href=\"https://docs.python.org/3/library/uuid.html\" rel=nofollow>UUID</a></li></ul></li></ul><p>This notably doesn't include any <code>date</code>, <code>time</code>, or <code>datetime</code> objects as they may not work across SDKs.</p><p>Users are strongly encouraged to use a single <code>dataclass</code> for parameter and return types so fields with defaults can beeasily added without breaking compatibility.</p><p>Classes with generics may not have the generics properly resolved. The current implementation does not have generictype resolution. Users should use concrete types.</p><h5>Custom Type Data Conversion</h5><p>For converting from JSON, the workflow/activity type hint is taken into account to convert to the proper type. Care hasbeen taken to support all common typings including <code>Optional</code>, <code>Union</code>, all forms of iterables and mappings, <code>NewType</code>,etc in addition to the regular JSON values mentioned before.</p><p>Data converters contain a reference to a payload converter class that is used to convert to/from payloads/values. Thisis a class and not an instance because it is instantiated on every workflow run inside the sandbox. The payloadconverter is usually a <code>CompositePayloadConverter</code> which contains a multiple <code>EncodingPayloadConverter</code>s it uses to tryto serialize/deserialize payloads. Upon serialization, each <code>EncodingPayloadConverter</code> is tried until one succeeds. The<code>EncodingPayloadConverter</code> provides an \"encoding\" string serialized onto the payload so that, upon deserialization, thespecific <code>EncodingPayloadConverter</code> for the given \"encoding\" is used.</p><p>The default data converter uses the <code>DefaultPayloadConverter</code> which is simply a <code>CompositePayloadConverter</code> with a knownset of default <code>EncodingPayloadConverter</code>s. To implement a custom encoding for a custom type, a new<code>EncodingPayloadConverter</code> can be created for the new type. For example, to support <code>IPv4Address</code> types:</p><pre lang=python3><span class=k>class</span> <span class=nc>IPv4AddressEncodingPayloadConverter</span><span class=p>(</span><span class=n>EncodingPayloadConverter</span><span class=p>):</span>    <span class=nd>@property</span>    <span class=k>def</span> <span class=nf>encoding</span><span class=p>(</span><span class=bp>self</span><span class=p>)</span> <span class=o>-&gt;</span> <span class=nb>str</span><span class=p>:</span>        <span class=k>return</span> <span class=s2>\"text/ipv4-address\"</span>    <span class=k>def</span> <span class=nf>to_payload</span><span class=p>(</span><span class=bp>self</span><span class=p>,</span> <span class=n>value</span><span class=p>:</span> <span class=n>Any</span><span class=p>)</span> <span class=o>-&gt;</span> <span class=n>Optional</span><span class=p>[</span><span class=n>Payload</span><span class=p>]:</span>        <span class=k>if</span> <span class=nb>isinstance</span><span class=p>(</span><span class=n>value</span><span class=p>,</span> <span class=n>ipaddress</span><span class=o>.</span><span class=n>IPv4Address</span><span class=p>):</span>            <span class=k>return</span> <span class=n>Payload</span><span class=p>(</span>                <span class=n>metadata</span><span class=o>=</span><span class=p>{</span><span class=s2>\"encoding\"</span><span class=p>:</span> <span class=bp>self</span><span class=o>.</span><span class=n>encoding</span><span class=o>.</span><span class=n>encode</span><span class=p>()},</span>                <span class=n>data</span><span class=o>=</span><span class=nb>str</span><span class=p>(</span><span class=n>value</span><span class=p>)</span><span class=o>.</span><span class=n>encode</span><span class=p>(),</span>            <span class=p>)</span>        <span class=k>else</span><span class=p>:</span>            <span class=k>return</span> <span class=kc>None</span>    <span class=k>def</span> <span class=nf>from_payload</span><span class=p>(</span><span class=bp>self</span><span class=p>,</span> <span class=n>payload</span><span class=p>:</span> <span class=n>Payload</span><span class=p>,</span> <span class=n>type_hint</span><span class=p>:</span> <span class=n>Optional</span><span class=p>[</span><span class=n>Type</span><span class=p>]</span> <span class=o>=</span> <span class=kc>None</span><span class=p>)</span> <span class=o>-&gt;</span> <span class=n>Any</span><span class=p>:</span>        <span class=k>assert</span> <span class=ow>not</span> <span class=n>type_hint</span> <span class=ow>or</span> <span class=n>type_hint</span> <span class=ow>is</span> <span class=n>ipaddress</span><span class=o>.</span><span class=n>IPv4Address</span>        <span class=k>return</span> <span class=n>ipaddress</span><span class=o>.</span><span class=n>IPv4Address</span><span class=p>(</span><span class=n>payload</span><span class=o>.</span><span class=n>data</span><span class=o>.</span><span class=n>decode</span><span class=p>())</span><span class=k>class</span> <span class=nc>IPv4AddressPayloadConverter</span><span class=p>(</span><span class=n>CompositePayloadConverter</span><span class=p>):</span>    <span class=k>def</span> <span class=fm>__init__</span><span class=p>(</span><span class=bp>self</span><span class=p>)</span> <span class=o>-&gt;</span> <span class=kc>None</span><span class=p>:</span>        <span class=c1># Just add ours as first before the defaults</span>        <span class=nb>super</span><span class=p>()</span><span class=o>.</span><span class=fm>__init__</span><span class=p>(</span>            <span class=n>IPv4AddressEncodingPayloadConverter</span><span class=p>(),</span>            <span class=o>*</span><span class=n>DefaultPayloadConverter</span><span class=o>.</span><span class=n>default_encoding_payload_converters</span><span class=p>,</span>        <span class=p>)</span><span class=n>my_data_converter</span> <span class=o>=</span> <span class=n>dataclasses</span><span class=o>.</span><span class=n>replace</span><span class=p>(</span>    <span class=n>DataConverter</span><span class=o>.</span><span class=n>default</span><span class=p>,</span>    <span class=n>payload_converter_class</span><span class=o>=</span><span class=n>IPv4AddressPayloadConverter</span><span class=p>,</span><span class=p>)</span></pre><p>Imports are left off for brevity.</p><p>This is good for many custom types. However, sometimes you want to override the behavior of the just the existing JSONencoding payload converter to support a new type. It is already the last encoding data converter in the list, so it'sthe fall-through behavior for any otherwise unknown type. Customizing the existing JSON converter has the benefit ofmaking the type work in lists, unions, etc.</p><p>The <code>JSONPlainPayloadConverter</code> uses the Python <a href=\"https://docs.python.org/3/library/json.html\" rel=nofollow>json</a> library with anadvanced JSON encoder by default and a custom value conversion method to turn <code>json.load</code>ed values to their type hints.The conversion can be customized for serialization with a custom <code>json.JSONEncoder</code> and deserialization with a custom<code>JSONTypeConverter</code>. For example, to support <code>IPv4Address</code> types in existing JSON conversion:</p><pre lang=python3><span class=k>class</span> <span class=nc>IPv4AddressJSONEncoder</span><span class=p>(</span><span class=n>AdvancedJSONEncoder</span><span class=p>):</span>    <span class=k>def</span> <span class=nf>default</span><span class=p>(</span><span class=bp>self</span><span class=p>,</span> <span class=n>o</span><span class=p>:</span> <span class=n>Any</span><span class=p>)</span> <span class=o>-&gt;</span> <span class=n>Any</span><span class=p>:</span>        <span class=k>if</span> <span class=nb>isinstance</span><span class=p>(</span><span class=n>o</span><span class=p>,</span> <span class=n>ipaddress</span><span class=o>.</span><span class=n>IPv4Address</span><span class=p>):</span>            <span class=k>return</span> <span class=nb>str</span><span class=p>(</span><span class=n>o</span><span class=p>)</span>        <span class=k>return</span> <span class=nb>super</span><span class=p>()</span><span class=o>.</span><span class=n>default</span><span class=p>(</span><span class=n>o</span><span class=p>)</span><span class=k>class</span> <span class=nc>IPv4AddressJSONTypeConverter</span><span class=p>(</span><span class=n>JSONTypeConverter</span><span class=p>):</span>    <span class=k>def</span> <span class=nf>to_typed_value</span><span class=p>(</span>        <span class=bp>self</span><span class=p>,</span> <span class=n>hint</span><span class=p>:</span> <span class=n>Type</span><span class=p>,</span> <span class=n>value</span><span class=p>:</span> <span class=n>Any</span>    <span class=p>)</span> <span class=o>-&gt;</span> <span class=n>Union</span><span class=p>[</span><span class=n>Optional</span><span class=p>[</span><span class=n>Any</span><span class=p>],</span> <span class=n>_JSONTypeConverterUnhandled</span><span class=p>]:</span>        <span class=k>if</span> <span class=nb>issubclass</span><span class=p>(</span><span class=n>hint</span><span class=p>,</span> <span class=n>ipaddress</span><span class=o>.</span><span class=n>IPv4Address</span><span class=p>):</span>            <span class=k>return</span> <span class=n>ipaddress</span><span class=o>.</span><span class=n>IPv4Address</span><span class=p>(</span><span class=n>value</span><span class=p>)</span>        <span class=k>return</span> <span class=n>JSONTypeConverter</span><span class=o>.</span><span class=n>Unhandled</span><span class=k>class</span> <span class=nc>IPv4AddressPayloadConverter</span><span class=p>(</span><span class=n>CompositePayloadConverter</span><span class=p>):</span>    <span class=k>def</span> <span class=fm>__init__</span><span class=p>(</span><span class=bp>self</span><span class=p>)</span> <span class=o>-&gt;</span> <span class=kc>None</span><span class=p>:</span>        <span class=c1># Replace default JSON plain with our own that has our encoder and type</span>        <span class=c1># converter</span>        <span class=n>json_converter</span> <span class=o>=</span> <span class=n>JSONPlainPayloadConverter</span><span class=p>(</span>            <span class=n>encoder</span><span class=o>=</span><span class=n>IPv4AddressJSONEncoder</span><span class=p>,</span>            <span class=n>custom_type_converters</span><span class=o>=</span><span class=p>[</span><span class=n>IPv4AddressJSONTypeConverter</span><span class=p>()],</span>        <span class=p>)</span>        <span class=nb>super</span><span class=p>()</span><span class=o>.</span><span class=fm>__init__</span><span class=p>(</span>            <span class=o>*</span><span class=p>[</span>                <span class=n>c</span> <span class=k>if</span> <span class=ow>not</span> <span class=nb>isinstance</span><span class=p>(</span><span class=n>c</span><span class=p>,</span> <span class=n>JSONPlainPayloadConverter</span><span class=p>)</span> <span class=k>else</span> <span class=n>json_converter</span>                <span class=k>for</span> <span class=n>c</span> <span class=ow>in</span> <span class=n>DefaultPayloadConverter</span><span class=o>.</span><span class=n>default_encoding_payload_converters</span>            <span class=p>]</span>        <span class=p>)</span><span class=n>my_data_converter</span> <span class=o>=</span> <span class=n>dataclasses</span><span class=o>.</span><span class=n>replace</span><span class=p>(</span>    <span class=n>DataConverter</span><span class=o>.</span><span class=n>default</span><span class=p>,</span>    <span class=n>payload_converter_class</span><span class=o>=</span><span class=n>IPv4AddressPayloadConverter</span><span class=p>,</span><span class=p>)</span></pre><p>Now <code>IPv4Address</code> can be used in type hints including collections, optionals, etc.</p><h3>Workers</h3><p>Workers host workflows and/or activities. Here's how to run a worker:</p><pre lang=python3><span class=kn>import</span> <span class=nn>asyncio</span><span class=kn>import</span> <span class=nn>logging</span><span class=kn>from</span> <span class=nn>temporalio.client</span> <span class=kn>import</span> <span class=n>Client</span><span class=kn>from</span> <span class=nn>temporalio.worker</span> <span class=kn>import</span> <span class=n>Worker</span><span class=c1># Import your own workflows and activities</span><span class=kn>from</span> <span class=nn>my_workflow_package</span> <span class=kn>import</span> <span class=n>MyWorkflow</span><span class=p>,</span> <span class=n>my_activity</span><span class=k>async</span> <span class=k>def</span> <span class=nf>run_worker</span><span class=p>(</span><span class=n>stop_event</span><span class=p>:</span> <span class=n>asyncio</span><span class=o>.</span><span class=n>Event</span><span class=p>):</span>    <span class=c1># Create client connected to server at the given address</span>    <span class=n>client</span> <span class=o>=</span> <span class=k>await</span> <span class=n>Client</span><span class=o>.</span><span class=n>connect</span><span class=p>(</span><span class=s2>\"localhost:7233\"</span><span class=p>,</span> <span class=n>namespace</span><span class=o>=</span><span class=s2>\"my-namespace\"</span><span class=p>)</span>    <span class=c1># Run the worker until the event is set</span>    <span class=n>worker</span> <span class=o>=</span> <span class=n>Worker</span><span class=p>(</span><span class=n>client</span><span class=p>,</span> <span class=n>task_queue</span><span class=o>=</span><span class=s2>\"my-task-queue\"</span><span class=p>,</span> <span class=n>workflows</span><span class=o>=</span><span class=p>[</span><span class=n>MyWorkflow</span><span class=p>],</span> <span class=n>activities</span><span class=o>=</span><span class=p>[</span><span class=n>my_activity</span><span class=p>])</span>    <span class=k>async</span> <span class=k>with</span> <span class=n>worker</span><span class=p>:</span>        <span class=k>await</span> <span class=n>stop_event</span><span class=o>.</span><span class=n>wait</span><span class=p>()</span></pre><p>Some things to note about the above code:</p><ul><li>This creates/uses the same client that is used for starting workflows</li><li>While this example accepts a stop event and uses <code>async with</code>, <code>run()</code> and <code>shutdown()</code> may be used instead</li><li>Workers can have many more options not shown here (e.g. data converters and interceptors)</li></ul><h3>Workflows</h3><h4>Definition</h4><p>Workflows are defined as classes decorated with <code>@workflow.defn</code>. The method invoked for the workflow is decorated with<code>@workflow.run</code>. Methods for signals, queries, and updates are decorated with <code>@workflow.signal</code>, <code>@workflow.query</code>and <code>@workflow.update</code> respectively. Here's an example of a workflow:</p><pre lang=python3><span class=kn>import</span> <span class=nn>asyncio</span><span class=kn>from</span> <span class=nn>datetime</span> <span class=kn>import</span> <span class=n>timedelta</span><span class=kn>from</span> <span class=nn>temporalio</span> <span class=kn>import</span> <span class=n>workflow</span><span class=c1># Pass the activities through the sandbox</span><span class=k>with</span> <span class=n>workflow</span><span class=o>.</span><span class=n>unsafe</span><span class=o>.</span><span class=n>imports_passed_through</span><span class=p>():</span>    <span class=kn>from</span> <span class=nn>.my_activities</span> <span class=kn>import</span> <span class=n>GreetingInfo</span><span class=p>,</span> <span class=n>create_greeting_activity</span><span class=nd>@workflow</span><span class=o>.</span><span class=n>defn</span><span class=k>class</span> <span class=nc>GreetingWorkflow</span><span class=p>:</span>    <span class=k>def</span> <span class=fm>__init__</span><span class=p>(</span><span class=bp>self</span><span class=p>)</span> <span class=o>-&gt;</span> <span class=kc>None</span><span class=p>:</span>        <span class=bp>self</span><span class=o>.</span><span class=n>_current_greeting</span> <span class=o>=</span> <span class=s2>\"&lt;unset&gt;\"</span>        <span class=bp>self</span><span class=o>.</span><span class=n>_greeting_info</span> <span class=o>=</span> <span class=n>GreetingInfo</span><span class=p>()</span>        <span class=bp>self</span><span class=o>.</span><span class=n>_greeting_info_update</span> <span class=o>=</span> <span class=n>asyncio</span><span class=o>.</span><span class=n>Event</span><span class=p>()</span>        <span class=bp>self</span><span class=o>.</span><span class=n>_complete</span> <span class=o>=</span> <span class=n>asyncio</span><span class=o>.</span><span class=n>Event</span><span class=p>()</span>    <span class=nd>@workflow</span><span class=o>.</span><span class=n>run</span>    <span class=k>async</span> <span class=k>def</span> <span class=nf>run</span><span class=p>(</span><span class=bp>self</span><span class=p>,</span> <span class=n>name</span><span class=p>:</span> <span class=nb>str</span><span class=p>)</span> <span class=o>-&gt;</span> <span class=nb>str</span><span class=p>:</span>        <span class=bp>self</span><span class=o>.</span><span class=n>_greeting_info</span><span class=o>.</span><span class=n>name</span> <span class=o>=</span> <span class=n>name</span>        <span class=k>while</span> <span class=kc>True</span><span class=p>:</span>            <span class=c1># Store greeting</span>            <span class=bp>self</span><span class=o>.</span><span class=n>_current_greeting</span> <span class=o>=</span> <span class=k>await</span> <span class=n>workflow</span><span class=o>.</span><span class=n>execute_activity</span><span class=p>(</span>                <span class=n>create_greeting_activity</span><span class=p>,</span>                <span class=bp>self</span><span class=o>.</span><span class=n>_greeting_info</span><span class=p>,</span>                <span class=n>start_to_close_timeout</span><span class=o>=</span><span class=n>timedelta</span><span class=p>(</span><span class=n>seconds</span><span class=o>=</span><span class=mi>5</span><span class=p>),</span>            <span class=p>)</span>            <span class=n>workflow</span><span class=o>.</span><span class=n>logger</span><span class=o>.</span><span class=n>debug</span><span class=p>(</span><span class=s2>\"Greeting set to </span><span class=si>%s</span><span class=s2>\"</span><span class=p>,</span> <span class=bp>self</span><span class=o>.</span><span class=n>_current_greeting</span><span class=p>)</span>                        <span class=c1># Wait for salutation update or complete signal (this can be</span>            <span class=c1># cancelled)</span>            <span class=k>await</span> <span class=n>asyncio</span><span class=o>.</span><span class=n>wait</span><span class=p>(</span>                <span class=p>[</span>                    <span class=n>asyncio</span><span class=o>.</span><span class=n>create_task</span><span class=p>(</span><span class=bp>self</span><span class=o>.</span><span class=n>_greeting_info_update</span><span class=o>.</span><span class=n>wait</span><span class=p>()),</span>                    <span class=n>asyncio</span><span class=o>.</span><span class=n>create_task</span><span class=p>(</span><span class=bp>self</span><span class=o>.</span><span class=n>_complete</span><span class=o>.</span><span class=n>wait</span><span class=p>()),</span>                <span class=p>],</span>                <span class=n>return_when</span><span class=o>=</span><span class=n>asyncio</span><span class=o>.</span><span class=n>FIRST_COMPLETED</span><span class=p>,</span>            <span class=p>)</span>            <span class=k>if</span> <span class=bp>self</span><span class=o>.</span><span class=n>_complete</span><span class=o>.</span><span class=n>is_set</span><span class=p>():</span>                <span class=k>return</span> <span class=bp>self</span><span class=o>.</span><span class=n>_current_greeting</span>            <span class=bp>self</span><span class=o>.</span><span class=n>_greeting_info_update</span><span class=o>.</span><span class=n>clear</span><span class=p>()</span>    <span class=nd>@workflow</span><span class=o>.</span><span class=n>signal</span>    <span class=k>async</span> <span class=k>def</span> <span class=nf>update_salutation</span><span class=p>(</span><span class=bp>self</span><span class=p>,</span> <span class=n>salutation</span><span class=p>:</span> <span class=nb>str</span><span class=p>)</span> <span class=o>-&gt;</span> <span class=kc>None</span><span class=p>:</span>        <span class=bp>self</span><span class=o>.</span><span class=n>_greeting_info</span><span class=o>.</span><span class=n>salutation</span> <span class=o>=</span> <span class=n>salutation</span>        <span class=bp>self</span><span class=o>.</span><span class=n>_greeting_info_update</span><span class=o>.</span><span class=n>set</span><span class=p>()</span>    <span class=nd>@workflow</span><span class=o>.</span><span class=n>signal</span>    <span class=k>async</span> <span class=k>def</span> <span class=nf>complete_with_greeting</span><span class=p>(</span><span class=bp>self</span><span class=p>)</span> <span class=o>-&gt;</span> <span class=kc>None</span><span class=p>:</span>        <span class=bp>self</span><span class=o>.</span><span class=n>_complete</span><span class=o>.</span><span class=n>set</span><span class=p>()</span>    <span class=nd>@workflow</span><span class=o>.</span><span class=n>query</span>    <span class=k>def</span> <span class=nf>current_greeting</span><span class=p>(</span><span class=bp>self</span><span class=p>)</span> <span class=o>-&gt;</span> <span class=nb>str</span><span class=p>:</span>        <span class=k>return</span> <span class=bp>self</span><span class=o>.</span><span class=n>_current_greeting</span>        <span class=nd>@workflow</span><span class=o>.</span><span class=n>update</span>    <span class=k>def</span> <span class=nf>set_and_get_greeting</span><span class=p>(</span><span class=bp>self</span><span class=p>,</span> <span class=n>greeting</span><span class=p>:</span> <span class=nb>str</span><span class=p>)</span> <span class=o>-&gt;</span> <span class=nb>str</span><span class=p>:</span>      <span class=n>old</span> <span class=o>=</span> <span class=bp>self</span><span class=o>.</span><span class=n>_current_greeting</span>      <span class=bp>self</span><span class=o>.</span><span class=n>_current_greeting</span> <span class=o>=</span> <span class=n>greeting</span>      <span class=k>return</span> <span class=n>old</span></pre><p>This assumes there's an activity in <code>my_activities.py</code> like:</p><pre lang=python3><span class=kn>from</span> <span class=nn>dataclasses</span> <span class=kn>import</span> <span class=n>dataclass</span><span class=kn>from</span> <span class=nn>temporalio</span> <span class=kn>import</span> <span class=n>workflow</span><span class=nd>@dataclass</span><span class=k>class</span> <span class=nc>GreetingInfo</span><span class=p>:</span>    <span class=n>salutation</span><span class=p>:</span> <span class=nb>str</span> <span class=o>=</span> <span class=s2>\"Hello\"</span>    <span class=n>name</span><span class=p>:</span> <span class=nb>str</span> <span class=o>=</span> <span class=s2>\"&lt;unknown&gt;\"</span><span class=nd>@activity</span><span class=o>.</span><span class=n>defn</span><span class=k>def</span> <span class=nf>create_greeting_activity</span><span class=p>(</span><span class=n>info</span><span class=p>:</span> <span class=n>GreetingInfo</span><span class=p>)</span> <span class=o>-&gt;</span> <span class=nb>str</span><span class=p>:</span>    <span class=k>return</span> <span class=sa>f</span><span class=s2>\"</span><span class=si>{</span><span class=n>info</span><span class=o>.</span><span class=n>salutation</span><span class=si>}</span><span class=s2>, </span><span class=si>{</span><span class=n>info</span><span class=o>.</span><span class=n>name</span><span class=si>}</span><span class=s2>!\"</span></pre><p>Some things to note about the above workflow code:</p><ul><li>Workflows run in a sandbox by default.<ul><li>Users are encouraged to define workflows in files with no side effects or other complicated code or unnecessaryimports to other third party libraries.</li><li>Non-standard-library, non-<code>temporalio</code> imports should usually be \"passed through\" the sandbox. See the<a href=#workflow-sandbox rel=nofollow>Workflow Sandbox</a> section for more details.</li></ul></li><li>This workflow continually updates the queryable current greeting when signalled and can complete with the greeting ona different signal</li><li>Workflows are always classes and must have a single <code>@workflow.run</code> which is an <code>async def</code> function</li><li>Workflow code must be deterministic. This means no threading, no randomness, no external calls to processes, nonetwork IO, and no global state mutation. All code must run in the implicit <code>asyncio</code> event loop and be deterministic.</li><li><code>@activity.defn</code> is explained in a later section. For normal simple string concatenation, this would just be done inthe workflow. The activity is for demonstration purposes only.</li><li><code>workflow.execute_activity(create_greeting_activity, ...</code> is actually a typed signature, and MyPy will fail if the<code>self._greeting_info</code> parameter is not a <code>GreetingInfo</code></li></ul><p>Here are the decorators that can be applied:</p><ul><li><code>@workflow.defn</code> - Defines a workflow class<ul><li>Must be defined on the class given to the worker (ignored if present on a base class)</li><li>Can have a <code>name</code> param to customize the workflow name, otherwise it defaults to the unqualified class name</li><li>Can have <code>dynamic=True</code> which means all otherwise unhandled workflows fall through to this. If present, cannot have<code>name</code> argument, and run method must accept a single parameter of <code>Sequence[temporalio.common.RawValue]</code> type. Thepayload of the raw value can be converted via <code>workflow.payload_converter().from_payload</code>.</li></ul></li><li><code>@workflow.run</code> - Defines the primary workflow run method<ul><li>Must be defined on the same class as <code>@workflow.defn</code>, not a base class (but can <em>also</em> be defined on the samemethod of a base class)</li><li>Exactly one method name must have this decorator, no more or less</li><li>Must be defined on an <code>async def</code> method</li><li>The method's arguments are the workflow's arguments</li><li>The first parameter must be <code>self</code>, followed by positional arguments. Best practice is to only take a singleargument that is an object/dataclass of fields that can be added to as needed.</li></ul></li><li><code>@workflow.signal</code> - Defines a method as a signal<ul><li>Can be defined on an <code>async</code> or non-<code>async</code> function at any hierarchy depth, but if decorated method is overridden,the override must also be decorated</li><li>The method's arguments are the signal's arguments</li><li>Can have a <code>name</code> param to customize the signal name, otherwise it defaults to the unqualified method name</li><li>Can have <code>dynamic=True</code> which means all otherwise unhandled signals fall through to this. If present, cannot have<code>name</code> argument, and method parameters must be <code>self</code>, a string signal name, and a<code>Sequence[temporalio.common.RawValue]</code>.</li><li>Non-dynamic method can only have positional arguments. Best practice is to only take a single argument that is anobject/dataclass of fields that can be added to as needed.</li><li>Return value is ignored</li></ul></li><li><code>@workflow.query</code> - Defines a method as a query<ul><li>All the same constraints as <code>@workflow.signal</code> but should return a value</li><li>Should not be <code>async</code></li><li>Temporal queries should never mutate anything in the workflow or call any calls that would mutate the workflow</li></ul></li><li><code>@workflow.update</code> - Defines a method as an update<ul><li>May both accept as input and return a value</li><li>May be <code>async</code> or non-<code>async</code></li><li>May mutate workflow state, and make calls to other workflow APIs like starting activities, etc.</li><li>Also accepts the <code>name</code> and <code>dynamic</code> parameters like signals and queries, with the same semantics.</li><li>Update handlers may optionally define a validator method by decorating it with <code>@update_handler_method.validator</code>.To reject an update before any events are written to history, throw an exception in a validator. Validators cannotbe <code>async</code>, cannot mutate workflow state, and return nothing.</li></ul></li></ul><h4>Running</h4><p>To start a locally-defined workflow from a client, you can simply reference its method like so:</p><pre lang=python3><span class=kn>from</span> <span class=nn>temporalio.client</span> <span class=kn>import</span> <span class=n>Client</span><span class=kn>from</span> <span class=nn>my_workflow_package</span> <span class=kn>import</span> <span class=n>GreetingWorkflow</span><span class=k>async</span> <span class=k>def</span> <span class=nf>create_greeting</span><span class=p>(</span><span class=n>client</span><span class=p>:</span> <span class=n>Client</span><span class=p>)</span> <span class=o>-&gt;</span> <span class=nb>str</span><span class=p>:</span>    <span class=c1># Start the workflow</span>    <span class=n>handle</span> <span class=o>=</span> <span class=k>await</span> <span class=n>client</span><span class=o>.</span><span class=n>start_workflow</span><span class=p>(</span><span class=n>GreetingWorkflow</span><span class=o>.</span><span class=n>run</span><span class=p>,</span> <span class=s2>\"my name\"</span><span class=p>,</span> <span class=nb>id</span><span class=o>=</span><span class=s2>\"my-workflow-id\"</span><span class=p>,</span> <span class=n>task_queue</span><span class=o>=</span><span class=s2>\"my-task-queue\"</span><span class=p>)</span>    <span class=c1># Change the salutation</span>    <span class=k>await</span> <span class=n>handle</span><span class=o>.</span><span class=n>signal</span><span class=p>(</span><span class=n>GreetingWorkflow</span><span class=o>.</span><span class=n>update_salutation</span><span class=p>,</span> <span class=s2>\"Aloha\"</span><span class=p>)</span>    <span class=c1># Tell it to complete</span>    <span class=k>await</span> <span class=n>handle</span><span class=o>.</span><span class=n>signal</span><span class=p>(</span><span class=n>GreetingWorkflow</span><span class=o>.</span><span class=n>complete_with_greeting</span><span class=p>)</span>    <span class=c1># Wait and return result</span>    <span class=k>return</span> <span class=k>await</span> <span class=n>handle</span><span class=o>.</span><span class=n>result</span><span class=p>()</span></pre><p>Some things to note about the above code:</p><ul><li>This uses the <code>GreetingWorkflow</code> from the previous section</li><li>The result of calling this function is <code>\"Aloha, my name!\"</code></li><li><code>id</code> and <code>task_queue</code> are required for running a workflow</li><li><code>client.start_workflow</code> is typed, so MyPy would fail if <code>\"my name\"</code> were something besides a string</li><li><code>handle.signal</code> is typed, so MyPy would fail if <code>\"Aloha\"</code> were something besides a string or if we provided aparameter to the parameterless <code>complete_with_greeting</code></li><li><code>handle.result</code> is typed to the workflow itself, so MyPy would fail if we said this <code>create_greeting</code> returnedsomething besides a string</li></ul><h4>Invoking Activities</h4><ul><li>Activities are started with non-async <code>workflow.start_activity()</code> which accepts either an activity function referenceor a string name.</li><li>A single argument to the activity is positional. Multiple arguments are not supported in the type-safe form ofstart/execute activity and must be supplied via the <code>args</code> keyword argument.</li><li>Activity options are set as keyword arguments after the activity arguments. At least one of <code>start_to_close_timeout</code>or <code>schedule_to_close_timeout</code> must be provided.</li><li>The result is an activity handle which is an <code>asyncio.Task</code> and supports basic task features</li><li>An async <code>workflow.execute_activity()</code> helper is provided which takes the same arguments as<code>workflow.start_activity()</code> and <code>await</code>s on the result. This should be used in most cases unless advanced taskcapabilities are needed.</li><li>Local activities work very similarly except the functions are <code>workflow.start_local_activity()</code> and<code>workflow.execute_local_activity()</code><ul><li>\u26a0\ufe0fLocal activities are currently experimental</li></ul></li><li>Activities can be methods of a class. Invokers should use <code>workflow.start_activity_method()</code>,<code>workflow.execute_activity_method()</code>, <code>workflow.start_local_activity_method()</code>, and<code>workflow.execute_local_activity_method()</code> instead.</li><li>Activities can callable classes (i.e. that define <code>__call__</code>). Invokers should use <code>workflow.start_activity_class()</code>,<code>workflow.execute_activity_class()</code>, <code>workflow.start_local_activity_class()</code>, and<code>workflow.execute_local_activity_class()</code> instead.</li></ul><h4>Invoking Child Workflows</h4><ul><li>Child workflows are started with async <code>workflow.start_child_workflow()</code> which accepts either a workflow run methodreference or a string name. The arguments to the workflow are positional.</li><li>A single argument to the child workflow is positional. Multiple arguments are not supported in the type-safe form ofstart/execute child workflow and must be supplied via the <code>args</code> keyword argument.</li><li>Child workflow options are set as keyword arguments after the arguments. At least <code>id</code> must be provided.</li><li>The <code>await</code> of the start does not complete until the start has been accepted by the server</li><li>The result is a child workflow handle which is an <code>asyncio.Task</code> and supports basic task features. The handle also hassome child info and supports signalling the child workflow</li><li>An async <code>workflow.execute_child_workflow()</code> helper is provided which takes the same arguments as<code>workflow.start_child_workflow()</code> and <code>await</code>s on the result. This should be used in most cases unless advanced taskcapabilities are needed.</li></ul><h4>Timers</h4><ul><li>A timer is represented by normal <code>asyncio.sleep()</code></li><li>Timers are also implicitly started on any <code>asyncio</code> calls with timeouts (e.g. <code>asyncio.wait_for</code>)</li><li>Timers are Temporal server timers, not local ones, so sub-second resolution rarely has value</li><li>Calls that use a specific point in time, e.g. <code>call_at</code> or <code>timeout_at</code>, should be based on the current loop time(i.e. <code>workflow.time()</code>) and not an actual point in time. This is because fixed times are translated to relative onesby subtracting the current loop time which may not be the actual current time.</li></ul><h4>Conditions</h4><ul><li><code>workflow.wait_condition</code> is an async function that doesn't return until a provided callback returns true</li><li>A <code>timeout</code> can optionally be provided which will throw a <code>asyncio.TimeoutError</code> if reached (internally backed by<code>asyncio.wait_for</code> which uses a timer)</li></ul><h4>Asyncio and Cancellation</h4><p>Workflows are backed by a custom <a href=\"https://docs.python.org/3/library/asyncio.html\" rel=nofollow>asyncio</a> event loop. This means manyof the common <code>asyncio</code> calls work as normal. Some asyncio features are disabled such as:</p><ul><li>Thread related calls such as <code>to_thread()</code>, <code>run_coroutine_threadsafe()</code>, <code>loop.run_in_executor()</code>, etc</li><li>Calls that alter the event loop such as <code>loop.close()</code>, <code>loop.stop()</code>, <code>loop.run_forever()</code>,<code>loop.set_task_factory()</code>, etc</li><li>Calls that use anything external such as networking, subprocesses, disk IO, etc</li></ul><p>Cancellation is done the same way as <code>asyncio</code>. Specifically, a task can be requested to be cancelled but does notnecessarily have to respect that cancellation immediately. This also means that <code>asyncio.shield()</code> can be used toprotect against cancellation. The following tasks, when cancelled, perform a Temporal cancellation:</p><ul><li>Activities - when the task executing an activity is cancelled, a cancellation request is sent to the activity</li><li>Child workflows - when the task starting or executing a child workflow is cancelled, a cancellation request is sent tocancel the child workflow</li><li>Timers - when the task executing a timer is cancelled (whether started via sleep or timeout), the timer is cancelled</li></ul><p>When the workflow itself is requested to cancel, <code>Task.cancel</code> is called on the main workflow task. Therefore,<code>asyncio.CancelledError</code> can be caught in order to handle the cancel gracefully.</p><p>Workflows follow <code>asyncio</code> cancellation rules exactly which can cause confusion among Python developers. Cancelling atask doesn't always cancel the thing it created. For example, given<code>task = asyncio.create_task(workflow.start_child_workflow(...</code>, calling <code>task.cancel</code> does not cancel the childworkflow, it only cancels the starting of it, which has no effect if it has already started. However, cancelling theresult of <code>handle = await workflow.start_child_workflow(...</code> or<code>task = asyncio.create_task(workflow.execute_child_workflow(...</code> <em>does</em> cancel the child workflow.</p><p>Also, due to Temporal rules, a cancellation request is a state not an event. Therefore, repeated cancellation requestsare not delivered, only the first. If the workflow chooses swallow a cancellation, it cannot be requested again.</p><h4>Workflow Utilities</h4><p>While running in a workflow, in addition to features documented elsewhere, the following items are available from the<code>temporalio.workflow</code> package:</p><ul><li><code>continue_as_new()</code> - Async function to stop the workflow immediately and continue as new</li><li><code>info()</code> - Returns information about the current workflow</li><li><code>logger</code> - A logger for use in a workflow (properly skips logging on replay)</li><li><code>now()</code> - Returns the \"current time\" from the workflow's perspective</li></ul><h4>Exceptions</h4><ul><li>Workflows can raise exceptions to fail the workflow or the \"workflow task\" (i.e. suspend the workflow retrying).</li><li>Exceptions that are instances of <code>temporalio.exceptions.FailureError</code> will fail the workflow with that exception<ul><li>For failing the workflow explicitly with a user exception, use <code>temporalio.exceptions.ApplicationError</code>. This canbe marked non-retryable or include details as needed.</li><li>Other exceptions that come from activity execution, child execution, cancellation, etc are already instances of<code>FailureError</code> and will fail the workflow when uncaught.</li></ul></li><li>All other exceptions fail the \"workflow task\" which means the workflow will continually retry until the workflow isfixed. This is helpful for bad code or other non-predictable exceptions. To actually fail the workflow, use an<code>ApplicationError</code> as mentioned above.</li></ul><h4>External Workflows</h4><ul><li><code>workflow.get_external_workflow_handle()</code> inside a workflow returns a handle to interact with another workflow</li><li><code>workflow.get_external_workflow_handle_for()</code> can be used instead for a type safe handle</li><li><code>await handle.signal()</code> can be called on the handle to signal the external workflow</li><li><code>await handle.cancel()</code> can be called on the handle to send a cancel to the external workflow</li></ul><h4>Testing</h4><p>Workflow testing can be done in an integration-test fashion against a real server, however it is hard to simulatetimeouts and other long time-based code. Using the time-skipping workflow test environment can help there.</p><p>The time-skipping <code>temporalio.testing.WorkflowEnvironment</code> can be created via the static async <code>start_time_skipping()</code>.This internally downloads the Temporal time-skipping test server to a temporary directory if it doesn't already exist,then starts the test server which has special APIs for skipping time.</p><p><strong>NOTE:</strong> The time-skipping test environment does not work on ARM. The SDK will try to download the x64 binary on macOSfor use with the Intel emulator, but for Linux or Windows ARM there is no proper time-skipping test server at this time.</p><h5>Automatic Time Skipping</h5><p>Anytime a workflow result is waited on, the time-skipping server automatically advances to the next event it can. Tomanually advance time before waiting on the result of a workflow, the <code>WorkflowEnvironment.sleep</code> method can be used.</p><p>Here's a simple example of a workflow that sleeps for 24 hours:</p><pre lang=python3><span class=kn>import</span> <span class=nn>asyncio</span><span class=kn>from</span> <span class=nn>temporalio</span> <span class=kn>import</span> <span class=n>workflow</span><span class=nd>@workflow</span><span class=o>.</span><span class=n>defn</span><span class=k>class</span> <span class=nc>WaitADayWorkflow</span><span class=p>:</span>    <span class=nd>@workflow</span><span class=o>.</span><span class=n>run</span>    <span class=k>async</span> <span class=k>def</span> <span class=nf>run</span><span class=p>(</span><span class=bp>self</span><span class=p>)</span> <span class=o>-&gt;</span> <span class=nb>str</span><span class=p>:</span>        <span class=k>await</span> <span class=n>asyncio</span><span class=o>.</span><span class=n>sleep</span><span class=p>(</span><span class=mi>24</span> <span class=o>*</span> <span class=mi>60</span> <span class=o>*</span> <span class=mi>60</span><span class=p>)</span>        <span class=k>return</span> <span class=s2>\"all done\"</span></pre><p>An integration test of this workflow would be way too slow. However the time-skipping server automatically skips to thenext event when we wait on the result. Here's a test for that workflow:</p><pre lang=python3><span class=kn>from</span> <span class=nn>temporalio.testing</span> <span class=kn>import</span> <span class=n>WorkflowEnvironment</span><span class=kn>from</span> <span class=nn>temporalio.worker</span> <span class=kn>import</span> <span class=n>Worker</span><span class=k>async</span> <span class=k>def</span> <span class=nf>test_wait_a_day_workflow</span><span class=p>():</span>    <span class=k>async</span> <span class=k>with</span> <span class=k>await</span> <span class=n>WorkflowEnvironment</span><span class=o>.</span><span class=n>start_time_skipping</span><span class=p>()</span> <span class=k>as</span> <span class=n>env</span><span class=p>:</span>        <span class=k>async</span> <span class=k>with</span> <span class=n>Worker</span><span class=p>(</span><span class=n>env</span><span class=o>.</span><span class=n>client</span><span class=p>,</span> <span class=n>task_queue</span><span class=o>=</span><span class=s2>\"tq1\"</span><span class=p>,</span> <span class=n>workflows</span><span class=o>=</span><span class=p>[</span><span class=n>WaitADayWorkflow</span><span class=p>]):</span>            <span class=k>assert</span> <span class=s2>\"all done\"</span> <span class=o>==</span> <span class=k>await</span> <span class=n>env</span><span class=o>.</span><span class=n>client</span><span class=o>.</span><span class=n>execute_workflow</span><span class=p>(</span><span class=n>WaitADayWorkflow</span><span class=o>.</span><span class=n>run</span><span class=p>,</span> <span class=nb>id</span><span class=o>=</span><span class=s2>\"wf1\"</span><span class=p>,</span> <span class=n>task_queue</span><span class=o>=</span><span class=s2>\"tq1\"</span><span class=p>)</span></pre><p>That test will run almost instantly. This is because by calling <code>execute_workflow</code> on our client, we have asked theenvironment to automatically skip time as much as it can (basically until the end of the workflow or until an activityis run).</p><p>To disable automatic time-skipping while waiting for a workflow result, run code inside a<code>with env.auto_time_skipping_disabled():</code> block.</p><h5>Manual Time Skipping</h5><p>Until a workflow is waited on, all time skipping in the time-skipping environment is done manually via<code>WorkflowEnvironment.sleep</code>.</p><p>Here's workflow that waits for a signal or times out:</p><pre lang=python3><span class=kn>import</span> <span class=nn>asyncio</span><span class=kn>from</span> <span class=nn>temporalio</span> <span class=kn>import</span> <span class=n>workflow</span><span class=nd>@workflow</span><span class=o>.</span><span class=n>defn</span><span class=k>class</span> <span class=nc>SignalWorkflow</span><span class=p>:</span>    <span class=k>def</span> <span class=fm>__init__</span><span class=p>(</span><span class=bp>self</span><span class=p>)</span> <span class=o>-&gt;</span> <span class=kc>None</span><span class=p>:</span>        <span class=bp>self</span><span class=o>.</span><span class=n>signal_received</span> <span class=o>=</span> <span class=kc>False</span>    <span class=nd>@workflow</span><span class=o>.</span><span class=n>run</span>    <span class=k>async</span> <span class=k>def</span> <span class=nf>run</span><span class=p>(</span><span class=bp>self</span><span class=p>)</span> <span class=o>-&gt;</span> <span class=nb>str</span><span class=p>:</span>        <span class=c1># Wait for signal or timeout in 45 seconds</span>        <span class=k>try</span><span class=p>:</span>            <span class=k>await</span> <span class=n>workflow</span><span class=o>.</span><span class=n>wait_condition</span><span class=p>(</span><span class=k>lambda</span><span class=p>:</span> <span class=bp>self</span><span class=o>.</span><span class=n>signal_received</span><span class=p>,</span> <span class=n>timeout</span><span class=o>=</span><span class=mi>45</span><span class=p>)</span>            <span class=k>return</span> <span class=s2>\"got signal\"</span>        <span class=k>except</span> <span class=n>asyncio</span><span class=o>.</span><span class=n>TimeoutError</span><span class=p>:</span>            <span class=k>return</span> <span class=s2>\"got timeout\"</span>    <span class=nd>@workflow</span><span class=o>.</span><span class=n>signal</span>    <span class=k>def</span> <span class=nf>some_signal</span><span class=p>(</span><span class=bp>self</span><span class=p>)</span> <span class=o>-&gt;</span> <span class=kc>None</span><span class=p>:</span>        <span class=bp>self</span><span class=o>.</span><span class=n>signal_received</span> <span class=o>=</span> <span class=kc>True</span></pre><p>To test a normal signal, you might:</p><pre lang=python3><span class=kn>from</span> <span class=nn>temporalio.testing</span> <span class=kn>import</span> <span class=n>WorkflowEnvironment</span><span class=kn>from</span> <span class=nn>temporalio.worker</span> <span class=kn>import</span> <span class=n>Worker</span><span class=k>async</span> <span class=k>def</span> <span class=nf>test_signal_workflow</span><span class=p>():</span>    <span class=k>async</span> <span class=k>with</span> <span class=k>await</span> <span class=n>WorkflowEnvironment</span><span class=o>.</span><span class=n>start_time_skipping</span><span class=p>()</span> <span class=k>as</span> <span class=n>env</span><span class=p>:</span>        <span class=k>async</span> <span class=k>with</span> <span class=n>Worker</span><span class=p>(</span><span class=n>env</span><span class=o>.</span><span class=n>client</span><span class=p>,</span> <span class=n>task_queue</span><span class=o>=</span><span class=s2>\"tq1\"</span><span class=p>,</span> <span class=n>workflows</span><span class=o>=</span><span class=p>[</span><span class=n>SignalWorkflow</span><span class=p>]):</span>            <span class=c1># Start workflow, send signal, check result</span>            <span class=n>handle</span> <span class=o>=</span> <span class=k>await</span> <span class=n>env</span><span class=o>.</span><span class=n>client</span><span class=o>.</span><span class=n>start_workflow</span><span class=p>(</span><span class=n>SignalWorkflow</span><span class=o>.</span><span class=n>run</span><span class=p>,</span> <span class=nb>id</span><span class=o>=</span><span class=s2>\"wf1\"</span><span class=p>,</span> <span class=n>task_queue</span><span class=o>=</span><span class=s2>\"tq1\"</span><span class=p>)</span>            <span class=k>await</span> <span class=n>handle</span><span class=o>.</span><span class=n>signal</span><span class=p>(</span><span class=n>SignalWorkflow</span><span class=o>.</span><span class=n>some_signal</span><span class=p>)</span>            <span class=k>assert</span> <span class=s2>\"got signal\"</span> <span class=o>==</span> <span class=k>await</span> <span class=n>handle</span><span class=o>.</span><span class=n>result</span><span class=p>()</span></pre><p>But how would you test the timeout part? Like so:</p><pre lang=python3><span class=kn>from</span> <span class=nn>temporalio.testing</span> <span class=kn>import</span> <span class=n>WorkflowEnvironment</span><span class=kn>from</span> <span class=nn>temporalio.worker</span> <span class=kn>import</span> <span class=n>Worker</span><span class=k>async</span> <span class=k>def</span> <span class=nf>test_signal_workflow_timeout</span><span class=p>():</span>    <span class=k>async</span> <span class=k>with</span> <span class=k>await</span> <span class=n>WorkflowEnvironment</span><span class=o>.</span><span class=n>start_time_skipping</span><span class=p>()</span> <span class=k>as</span> <span class=n>env</span><span class=p>:</span>        <span class=k>async</span> <span class=k>with</span> <span class=n>Worker</span><span class=p>(</span><span class=n>env</span><span class=o>.</span><span class=n>client</span><span class=p>,</span> <span class=n>task_queue</span><span class=o>=</span><span class=s2>\"tq1\"</span><span class=p>,</span> <span class=n>workflows</span><span class=o>=</span><span class=p>[</span><span class=n>SignalWorkflow</span><span class=p>]):</span>            <span class=c1># Start workflow, advance time past timeout, check result</span>            <span class=n>handle</span> <span class=o>=</span> <span class=k>await</span> <span class=n>env</span><span class=o>.</span><span class=n>client</span><span class=o>.</span><span class=n>start_workflow</span><span class=p>(</span><span class=n>SignalWorkflow</span><span class=o>.</span><span class=n>run</span><span class=p>,</span> <span class=nb>id</span><span class=o>=</span><span class=s2>\"wf1\"</span><span class=p>,</span> <span class=n>task_queue</span><span class=o>=</span><span class=s2>\"tq1\"</span><span class=p>)</span>            <span class=k>await</span> <span class=n>env</span><span class=o>.</span><span class=n>sleep</span><span class=p>(</span><span class=mi>50</span><span class=p>)</span>            <span class=k>assert</span> <span class=s2>\"got timeout\"</span> <span class=o>==</span> <span class=k>await</span> <span class=n>handle</span><span class=o>.</span><span class=n>result</span><span class=p>()</span></pre><p>Also, the current time of the workflow environment can be obtained via the async <code>WorkflowEnvironment.get_current_time</code>method.</p><h5>Mocking Activities</h5><p>Activities are just functions decorated with <code>@activity.defn</code>. Simply write different ones and pass those to the workerto have different activities called during the test.</p><h4>Workflow Sandbox</h4><p>By default workflows are run in a sandbox to help avoid non-deterministic code. If a call that is known to benon-deterministic is performed, an exception will be thrown in the workflow which will \"fail the task\" which means theworkflow will not progress until fixed.</p><p>The sandbox is not foolproof and non-determinism can still occur. It is simply a best-effort way to catch bad codeearly. Users are encouraged to define their workflows in files with no other side effects.</p><p>The sandbox offers a mechanism to pass through modules from outside the sandbox. By default this already includes allstandard library modules and Temporal modules. <strong>For performance and behavior reasons, users are encouraged to passthrough all third party modules whose calls will be deterministic.</strong> This includes modules containing the activities tobe referenced in workflows. See \"Passthrough Modules\" below on how to do this.</p><p>If you are getting an error like:</p><blockquote><p>temporalio.worker.workflow_sandbox._restrictions.RestrictedWorkflowAccessError: Cannot accesshttp.client.IncompleteRead.__mro_entries__ from inside a workflow. If this is code from a module not used in aworkflow or known to only be used deterministically from a workflow, mark the import as pass through.</p></blockquote><p>Then you are either using an invalid construct from the workflow, this is a known limitation of the sandbox, or mostcommonly this is from a module that is safe to pass through (see \"Passthrough Modules\" section below).</p><h5>How the Sandbox Works</h5><p>The sandbox is made up of two components that work closely together:</p><ul><li>Global state isolation</li><li>Restrictions preventing known non-deterministic library calls</li></ul><p>Global state isolation is performed by using <code>exec</code>. Upon workflow start, the file that the workflow is defined in isimported into a new sandbox created for that workflow run. In order to keep the sandbox performant a known set of\"passthrough modules\" are passed through from outside of the sandbox when they are imported. These are expected to beside-effect free on import and have their non-deterministic aspects restricted. By default the entire Python standardlibrary, <code>temporalio</code>, and a couple of other modules are passed through from outside of the sandbox. To update thislist, see \"Customizing the Sandbox\".</p><p>Restrictions preventing known non-deterministic library calls are achieved using proxy objects on modules wrapped aroundthe custom importer set in the sandbox. Many restrictions apply at workflow import time and workflow run time, whilesome restrictions only apply at workflow run time. A default set of restrictions is included that prevents mostdangerous standard library calls. However it is known in Python that some otherwise-non-deterministic invocations, likereading a file from disk via <code>open</code> or using <code>os.environ</code>, are done as part of importing modules. To customize what isand isn't restricted, see \"Customizing the Sandbox\".</p><h5>Avoiding the Sandbox</h5><p>There are three increasingly-scoped ways to avoid the sandbox. Users are discouraged from avoiding the sandbox ifpossible.</p><p>To remove restrictions around a particular block of code, use <code>with temporalio.workflow.unsafe.sandbox_unrestricted():</code>.The workflow will still be running in the sandbox, but no restrictions for invalid library calls will be applied.</p><p>To run an entire workflow outside of a sandbox, set <code>sandboxed=False</code> on the <code>@workflow.defn</code> decorator when definingit. This will run the entire workflow outside of the workflow which means it can share global state and other badthings.</p><p>To disable the sandbox entirely for a worker, set the <code>Worker</code> init's <code>workflow_runner</code> keyword argument to<code>temporalio.worker.UnsandboxedWorkflowRunner()</code>. This value is defaulted to<code>temporalio.worker.workflow_sandbox.SandboxedWorkflowRunner()</code> so by changing it to the unsandboxed runner, the sandboxwill not be used at all.</p><h5>Customizing the Sandbox</h5><p>\u26a0\ufe0f WARNING: APIs in the <code>temporalio.worker.workflow_sandbox</code> module are not yet considered stable and may change infuture releases.</p><p>When creating the <code>Worker</code>, the <code>workflow_runner</code> is defaulted to<code>temporalio.worker.workflow_sandbox.SandboxedWorkflowRunner()</code>. The <code>SandboxedWorkflowRunner</code>'s init accepts a<code>restrictions</code> keyword argument that is defaulted to <code>SandboxRestrictions.default</code>. The <code>SandboxRestrictions</code> dataclassis immutable and contains three fields that can be customized, but only two have notable value. See below.</p><h6>Passthrough Modules</h6><p>By default the sandbox completely reloads non-standard-library and non-Temporal modules for every workflow run. To makethe sandbox quicker and use less memory when importing known-side-effect-free third party modules, they can be markedas passthrough modules.</p><p><strong>For performance and behavior reasons, users are encouraged to pass through all third party modules whose calls will bedeterministic.</strong></p><p>One way to pass through a module is at import time in the workflow file using the <code>imports_passed_through</code> contextmanager like so:</p><pre lang=python3><span class=c1># my_workflow_file.py</span><span class=kn>from</span> <span class=nn>temporalio</span> <span class=kn>import</span> <span class=n>workflow</span><span class=k>with</span> <span class=n>workflow</span><span class=o>.</span><span class=n>unsafe</span><span class=o>.</span><span class=n>imports_passed_through</span><span class=p>():</span>    <span class=kn>import</span> <span class=nn>pydantic</span><span class=nd>@workflow</span><span class=o>.</span><span class=n>defn</span><span class=k>class</span> <span class=nc>MyWorkflow</span><span class=p>:</span>    <span class=o>...</span></pre><p>Alternatively, this can be done at worker creation time by customizing the runner's restrictions. For example:</p><pre lang=python3><span class=n>my_worker</span> <span class=o>=</span> <span class=n>Worker</span><span class=p>(</span>  <span class=o>...</span><span class=p>,</span>  <span class=n>workflow_runner</span><span class=o>=</span><span class=n>SandboxedWorkflowRunner</span><span class=p>(</span>    <span class=n>restrictions</span><span class=o>=</span><span class=n>SandboxRestrictions</span><span class=o>.</span><span class=n>default</span><span class=o>.</span><span class=n>with_passthrough_modules</span><span class=p>(</span><span class=s2>\"pydantic\"</span><span class=p>)</span>  <span class=p>)</span><span class=p>)</span></pre><p>In both of these cases, now the <code>pydantic</code> module will be passed through from outside of the sandbox instead ofbeing reloaded for every workflow run.</p><h6>Invalid Module Members</h6><p><code>SandboxRestrictions.invalid_module_members</code> contains a root matcher that applies to all module members. This alreadyhas a default set which includes things like <code>datetime.date.today()</code> which should never be called from a workflow. Toremove this restriction:</p><pre lang=python3><span class=n>my_restrictions</span> <span class=o>=</span> <span class=n>dataclasses</span><span class=o>.</span><span class=n>replace</span><span class=p>(</span>    <span class=n>SandboxRestrictions</span><span class=o>.</span><span class=n>default</span><span class=p>,</span>    <span class=n>invalid_module_members</span><span class=o>=</span><span class=n>SandboxRestrictions</span><span class=o>.</span><span class=n>invalid_module_members_default</span><span class=o>.</span><span class=n>with_child_unrestricted</span><span class=p>(</span>      <span class=s2>\"datetime\"</span><span class=p>,</span> <span class=s2>\"date\"</span><span class=p>,</span> <span class=s2>\"today\"</span><span class=p>,</span>    <span class=p>),</span><span class=p>)</span><span class=n>my_worker</span> <span class=o>=</span> <span class=n>Worker</span><span class=p>(</span><span class=o>...</span><span class=p>,</span> <span class=n>workflow_runner</span><span class=o>=</span><span class=n>SandboxedWorkflowRunner</span><span class=p>(</span><span class=n>restrictions</span><span class=o>=</span><span class=n>my_restrictions</span><span class=p>))</span></pre><p>Restrictions can also be added by <code>|</code>'ing together matchers, for example to restrict the <code>datetime.date</code> class frombeing used altogether:</p><pre lang=python3><span class=n>my_restrictions</span> <span class=o>=</span> <span class=n>dataclasses</span><span class=o>.</span><span class=n>replace</span><span class=p>(</span>    <span class=n>SandboxRestrictions</span><span class=o>.</span><span class=n>default</span><span class=p>,</span>    <span class=n>invalid_module_members</span><span class=o>=</span><span class=n>SandboxRestrictions</span><span class=o>.</span><span class=n>invalid_module_members_default</span> <span class=o>|</span> <span class=n>SandboxMatcher</span><span class=p>(</span>      <span class=n>children</span><span class=o>=</span><span class=p>{</span><span class=s2>\"datetime\"</span><span class=p>:</span> <span class=n>SandboxMatcher</span><span class=p>(</span><span class=n>use</span><span class=o>=</span><span class=p>{</span><span class=s2>\"date\"</span><span class=p>})},</span>    <span class=p>),</span><span class=p>)</span><span class=n>my_worker</span> <span class=o>=</span> <span class=n>Worker</span><span class=p>(</span><span class=o>...</span><span class=p>,</span> <span class=n>workflow_runner</span><span class=o>=</span><span class=n>SandboxedWorkflowRunner</span><span class=p>(</span><span class=n>restrictions</span><span class=o>=</span><span class=n>my_restrictions</span><span class=p>))</span></pre><p>See the API for more details on exact fields and their meaning.</p><h5>Known Sandbox Issues</h5><p>Below are known sandbox issues. As the sandbox is developed and matures, some may be resolved.</p><h6>Global Import/Builtins</h6><p>Currently the sandbox references/alters the global <code>sys.modules</code> and <code>builtins</code> fields while running workflow code. Inorder to prevent affecting other sandboxed code, thread locals are leveraged to only intercept these values during theworkflow thread running. Therefore, technically if top-level import code starts a thread, it may lose sandboxprotection.</p><h6>Sandbox is not Secure</h6><p>The sandbox is built to catch many non-deterministic and state sharing issues, but it is not secure. Some known badcalls are intercepted, but for performance reasons, every single attribute get/set cannot be checked. Therefore a simplecall like <code>setattr(temporalio.common, \"__my_key\", \"my value\")</code> will leak across sandbox runs.</p><p>The sandbox is only a helper, it does not provide full protection.</p><h6>Sandbox Performance</h6><p>The sandbox does not add significant CPU or memory overhead for workflows that are in files which only import standardlibrary modules. This is because they are passed through from outside of the sandbox. However, everynon-standard-library import that is performed at the top of the same file the workflow is in will add CPU overhead (themodule is re-imported every workflow run) and memory overhead (each module independently cached as part of the workflowrun for isolation reasons). This becomes more apparent for large numbers of workflow runs.</p><p>To mitigate this, users should:</p><ul><li>Define workflows in files that have as few non-standard-library imports as possible</li><li>Alter the max workflow cache and/or max concurrent workflows settings if memory grows too large</li><li>Set third-party libraries as passthrough modules if they are known to be side-effect free</li></ul><h6>Extending Restricted Classes</h6><p>Extending a restricted class causes Python to instantiate the restricted metaclass which is unsupported. Therefore ifyou attempt to use a class in the sandbox that extends a restricted class, it will fail. For example, if you have a<code>class MyZipFile(zipfile.ZipFile)</code> and try to use that class inside a workflow, it will fail.</p><p>Classes used inside the workflow should not extend restricted classes. For situations where third-party modules need toat import time, they should be marked as pass through modules.</p><h6>Certain Standard Library Calls on Restricted Objects</h6><p>If an object is restricted, internal C Python validation may fail in some cases. For example, running<code>dict.items(os.__dict__)</code> will fail with:</p><blockquote><p>descriptor 'items' for 'dict' objects doesn't apply to a '_RestrictedProxy' object</p></blockquote><p>This is a low-level check that cannot be subverted. The solution is to not use restricted objects inside the sandbox.For situations where third-party modules need to at import time, they should be marked as pass through modules.</p><h6>is_subclass of ABC-based Restricted Classes</h6><p>Due to <a href=\"https://bugs.python.org/issue44847\" rel=nofollow>https://bugs.python.org/issue44847</a>, classes that are wrapped and thenchecked to see if they are subclasses of another via <code>is_subclass</code> may fail (see also<a href=\"https://github.com/GrahamDumpleton/wrapt/issues/130\" rel=nofollow>this wrapt issue</a>).</p><h6>Compiled Pydantic Sometimes Using Wrong Types</h6><p>If the Pydantic dependency is in compiled form (the default) and you are using a Pydantic model inside a workflowsandbox that uses a <code>datetime</code> type, it will grab the wrong validator and use <code>date</code> instead. This is because ourpatched form of <code>issubclass</code> is bypassed by compiled Pydantic.</p><p>To work around, either don't use <code>datetime</code>-based Pydantic model fields in workflows, or mark <code>datetime</code> library aspassthrough (means you lose protection against calling the non-deterministic <code>now()</code>), or use non-compiled Pydanticdependency.</p><h3>Activities</h3><h4>Definition</h4><p>Activities are decorated with <code>@activity.defn</code> like so:</p><pre lang=python3><span class=kn>from</span> <span class=nn>temporalio</span> <span class=kn>import</span> <span class=n>activity</span><span class=nd>@activity</span><span class=o>.</span><span class=n>defn</span><span class=k>def</span> <span class=nf>say_hello_activity</span><span class=p>(</span><span class=n>name</span><span class=p>:</span> <span class=nb>str</span><span class=p>)</span> <span class=o>-&gt;</span> <span class=nb>str</span><span class=p>:</span>    <span class=k>return</span> <span class=sa>f</span><span class=s2>\"Hello, </span><span class=si>{</span><span class=n>name</span><span class=si>}</span><span class=s2>!\"</span></pre><p>Some things to note about activity definitions:</p><ul><li>The <code>say_hello_activity</code> is synchronous which is the recommended activity type (see \"Types of Activities\" below), butit can be <code>async</code></li><li>A custom name for the activity can be set with a decorator argument, e.g. <code>@activity.defn(name=\"my activity\")</code></li><li>Long running activities should regularly heartbeat and handle cancellation</li><li>Activities can only have positional arguments. Best practice is to only take a single argument that is anobject/dataclass of fields that can be added to as needed.</li><li>Activities can be defined on methods instead of top-level functions. This allows the instance to carry state that anactivity may need (e.g. a DB connection). The instance method should be what is registered with the worker.</li><li>Activities can also be defined on callable classes (i.e. classes with <code>__call__</code>). An instance of the class should bewhat is registered with the worker.</li><li>The <code>@activity.defn</code> can have <code>dynamic=True</code> set which means all otherwise unhandled activities fall through to this.If present, cannot have <code>name</code> argument, and the activity function must accept a single parameter of<code>Sequence[temporalio.common.RawValue]</code>. The payload of the raw value can be converted via<code>activity.payload_converter().from_payload</code>.</li></ul><h4>Types of Activities</h4><p>There are 3 types of activity callables accepted and described below: synchronous multithreaded, synchronousmultiprocess/other, and asynchronous. Only positional parameters are allowed in activity callables.</p><h5>Synchronous Activities</h5><p>Synchronous activities, i.e. functions that do not have <code>async def</code>, can be used with workers, but the<code>activity_executor</code> worker parameter must be set with a <code>concurrent.futures.Executor</code> instance to use for executing theactivities.</p><p>All long running, non-local activities should heartbeat so they can be cancelled. Cancellation in threaded activitiesthrows but multiprocess/other activities does not. The sections below on each synchronous type explain further. Thereare also calls on the context that can check for cancellation. For more information, see \"Activity Context\" and\"Heartbeating and Cancellation\" sections later.</p><p>Note, all calls from an activity to functions in the <code>temporalio.activity</code> package are powered by<a href=\"https://docs.python.org/3/library/contextvars.html\" rel=nofollow>contextvars</a>. Therefore, new threads starting <em>inside</em> ofactivities must <code>copy_context()</code> and then <code>.run()</code> manually to ensure <code>temporalio.activity</code> calls like <code>heartbeat</code> stillfunction in the new threads.</p><p>If any activity ever throws a <code>concurrent.futures.BrokenExecutor</code>, the failure is consisted unrecoverable and the workerwill fail and shutdown.</p><h6>Synchronous Multithreaded Activities</h6><p>If <code>activity_executor</code> is set to an instance of <code>concurrent.futures.ThreadPoolExecutor</code> then the synchronous activitiesare considered multithreaded activities. If <code>max_workers</code> is not set to at least the worker's<code>max_concurrent_activities</code> setting a warning will be issued. Besides <code>activity_executor</code>, no other worker parametersare required for synchronous multithreaded activities.</p><p>By default, cancellation of a synchronous multithreaded activity is done via a <code>temporalio.exceptions.CancelledError</code>thrown into the activity thread. Activities that do not wish to have cancellation thrown can set<code>no_thread_cancel_exception=True</code> in the <code>@activity.defn</code> decorator.</p><p>Code that wishes to be temporarily shielded from the cancellation exception can run inside<code>with activity.shield_thread_cancel_exception():</code>. But once the last nested form of that block is finished, even ifthere is a return statement within, it will throw the cancellation if there was one. A <code>try</code> +<code>except temporalio.exceptions.CancelledError</code> would have to surround the <code>with</code> to handle the cancellation explicitly.</p><h6>Synchronous Multiprocess/Other Activities</h6><p>If <code>activity_executor</code> is set to an instance of <code>concurrent.futures.Executor</code> that is <em>not</em><code>concurrent.futures.ThreadPoolExecutor</code>, then the synchronous activities are considered multiprocess/other activities.Users should prefer threaded activities over multiprocess ones since, among other reasons, threaded activities can raiseon cancellation.</p><p>These require special primitives for heartbeating and cancellation. The <code>shared_state_manager</code> worker parameter must beset to an instance of <code>temporalio.worker.SharedStateManager</code>. The most common implementation can be created by passing a<code>multiprocessing.managers.SyncManager</code> (i.e. result of <code>multiprocessing.managers.Manager()</code>) to<code>temporalio.worker.SharedStateManager.create_from_multiprocessing()</code>.</p><p>Also, all of these activity functions must be<a href=\"https://docs.python.org/3/library/pickle.html#what-can-be-pickled-and-unpickled\" rel=nofollow>\"picklable\"</a>.</p><h5>Asynchronous Activities</h5><p>Asynchronous activities are functions defined with <code>async def</code>. Asynchronous activities are often much more performantthan synchronous ones. When using asynchronous activities no special worker parameters are needed.</p><p><strong>\u26a0\ufe0f WARNING: Do not block the thread in <code>async def</code> Python functions. This can stop the processing of the rest of theTemporal.</strong></p><p>Cancellation for asynchronous activities is done via<a href=\"https://docs.python.org/3/library/asyncio-task.html#asyncio.Task.cancel\" rel=nofollow><code>asyncio.Task.cancel</code></a>. This means that<code>asyncio.CancelledError</code> will be raised (and can be caught, but it is not recommended). A non-local activity mustheartbeat to receive cancellation and there are other ways to be notified about cancellation (see \"Activity Context\" and\"Heartbeating and Cancellation\" later).</p><h4>Activity Context</h4><p>During activity execution, an implicit activity context is set as a<a href=\"https://docs.python.org/3/library/contextvars.html\" rel=nofollow>context variable</a>. The context variable itself is not visible, butcalls in the <code>temporalio.activity</code> package make use of it. Specifically:</p><ul><li><code>in_activity()</code> - Whether an activity context is present</li><li><code>info()</code> - Returns the immutable info of the currently running activity</li><li><code>heartbeat(*details)</code> - Record a heartbeat</li><li><code>is_cancelled()</code> - Whether a cancellation has been requested on this activity</li><li><code>wait_for_cancelled()</code> - <code>async</code> call to wait for cancellation request</li><li><code>wait_for_cancelled_sync(timeout)</code> - Synchronous blocking call to wait for cancellation request</li><li><code>shield_thread_cancel_exception()</code> - Context manager for use in <code>with</code> clauses by synchronous multithreaded activitiesto prevent cancel exception from being thrown during the block of code</li><li><code>is_worker_shutdown()</code> - Whether the worker has started graceful shutdown</li><li><code>wait_for_worker_shutdown()</code> - <code>async</code> call to wait for start of graceful worker shutdown</li><li><code>wait_for_worker_shutdown_sync(timeout)</code> - Synchronous blocking call to wait for start of graceful worker shutdown</li><li><code>raise_complete_async()</code> - Raise an error that this activity will be completed asynchronously (i.e. after return ofthe activity function in a separate client call)</li></ul><p>With the exception of <code>in_activity()</code>, if any of the functions are called outside of an activity context, an erroroccurs. Synchronous activities cannot call any of the <code>async</code> functions.</p><h5>Heartbeating and Cancellation</h5><p>In order for a non-local activity to be notified of cancellation requests, it must be given a <code>heartbeat_timeout</code> atinvocation time and invoke <code>temporalio.activity.heartbeat()</code> inside the activity. It is strongly recommended that allbut the fastest executing activities call this function regularly. \"Types of Activities\" has specifics on cancellationfor synchronous and asynchronous activities.</p><p>In addition to obtaining cancellation information, heartbeats also support detail data that is persisted on the serverfor retrieval during activity retry. If an activity calls <code>temporalio.activity.heartbeat(123, 456)</code> and then fails andis retried, <code>temporalio.activity.info().heartbeat_details</code> will return an iterable containing <code>123</code> and <code>456</code> on thenext run.</p><p>Heartbeating has no effect on local activities.</p><h5>Worker Shutdown</h5><p>An activity can react to a worker shutdown. Using <code>is_worker_shutdown</code> or one of the <code>wait_for_worker_shutdown</code>functions an activity can react to a shutdown.</p><p>When the <code>graceful_shutdown_timeout</code> worker parameter is given a <code>datetime.timedelta</code>, on shutdown the worker willnotify activities of the graceful shutdown. Once that timeout has passed (or if wasn't set), the worker will performcancellation of all outstanding activities.</p><p>The <code>shutdown()</code> invocation will wait on all activities to complete, so if a long-running activity does not at leastrespect cancellation, the shutdown may never complete.</p><h4>Testing</h4><p>Unit testing an activity or any code that could run in an activity is done via the<code>temporalio.testing.ActivityEnvironment</code> class. Simply instantiate this and any callable + params passed to <code>run</code> willbe invoked inside the activity context. The following are attributes/methods on the environment that can be used toaffect calls activity code might make to functions on the <code>temporalio.activity</code> package.</p><ul><li><code>info</code> property can be set to customize what is returned from <code>activity.info()</code></li><li><code>on_heartbeat</code> property can be set to handle <code>activity.heartbeat()</code> calls</li><li><code>cancel()</code> can be invoked to simulate a cancellation of the activity</li><li><code>worker_shutdown()</code> can be invoked to simulate a worker shutdown during execution of the activity</li></ul><h3>Workflow Replay</h3><p>Given a workflow's history, it can be replayed locally to check for things like non-determinism errors. For example,assuming <code>history_str</code> is populated with a JSON string history either exported from the web UI or from <code>tctl</code>, thefollowing function will replay it:</p><pre lang=python3><span class=kn>from</span> <span class=nn>temporalio.client</span> <span class=kn>import</span> <span class=n>WorkflowHistory</span><span class=kn>from</span> <span class=nn>temporalio.worker</span> <span class=kn>import</span> <span class=n>Replayer</span><span class=k>async</span> <span class=k>def</span> <span class=nf>run_replayer</span><span class=p>(</span><span class=n>history_str</span><span class=p>:</span> <span class=nb>str</span><span class=p>):</span>  <span class=n>replayer</span> <span class=o>=</span> <span class=n>Replayer</span><span class=p>(</span><span class=n>workflows</span><span class=o>=</span><span class=p>[</span><span class=n>SayHello</span><span class=p>])</span>  <span class=k>await</span> <span class=n>replayer</span><span class=o>.</span><span class=n>replay_workflow</span><span class=p>(</span><span class=n>WorkflowHistory</span><span class=o>.</span><span class=n>from_json</span><span class=p>(</span><span class=n>history_str</span><span class=p>))</span></pre><p>This will throw an error if any non-determinism is detected.</p><p>Replaying from workflow history is a powerful concept that many use to test that workflow alterations won't causenon-determinisms with past-complete workflows. The following code will make sure that all workflow histories for acertain workflow type (i.e. workflow class) are safe with the current code.</p><pre lang=python3><span class=kn>from</span> <span class=nn>temporalio.client</span> <span class=kn>import</span> <span class=n>Client</span><span class=p>,</span> <span class=n>WorkflowHistory</span><span class=kn>from</span> <span class=nn>temporalio.worker</span> <span class=kn>import</span> <span class=n>Replayer</span><span class=k>async</span> <span class=k>def</span> <span class=nf>check_past_histories</span><span class=p>(</span><span class=n>my_client</span><span class=p>:</span> <span class=n>Client</span><span class=p>):</span>  <span class=n>replayer</span> <span class=o>=</span> <span class=n>Replayer</span><span class=p>(</span><span class=n>workflows</span><span class=o>=</span><span class=p>[</span><span class=n>SayHello</span><span class=p>])</span>  <span class=k>await</span> <span class=n>replayer</span><span class=o>.</span><span class=n>replay_workflows</span><span class=p>(</span>    <span class=k>await</span> <span class=n>my_client</span><span class=o>.</span><span class=n>list_workflows</span><span class=p>(</span><span class=s2>\"WorkflowType = 'SayHello'\"</span><span class=p>)</span><span class=o>.</span><span class=n>map_histories</span><span class=p>(),</span>  <span class=p>)</span></pre><h3>OpenTelemetry Support</h3><p>OpenTelemetry support requires the optional <code>opentelemetry</code> dependencies which are part of the <code>opentelemetry</code> extra.When using <code>pip</code>, running</p><pre><code>pip install temporalio[opentelemetry]</code></pre><p>will install needed dependencies. Then the <code>temporalio.contrib.opentelemetry.TracingInterceptor</code> can be created and setas an interceptor on the <code>interceptors</code> argument of <code>Client.connect</code>. When set, spans will be created for all clientcalls and for all activity and workflow invocations on the worker, spans will be created and properly serialized throughthe server to give one proper trace for a workflow execution.</p><h3>Protobuf 3.x vs 4.x</h3><p>Python currently has two somewhat-incompatible protobuf library versions - the 3.x series and the 4.x series. Pythoncurrently recommends 4.x and that is the primary supported version. Some libraries like<a href=\"https://github.com/pulumi/pulumi\" rel=nofollow>Pulumi</a> require 4.x. Other libraries such as <a href=\"https://github.com/onnx/onnx\" rel=nofollow>ONNX</a> and<a href=\"https://github.com/streamlit/streamlit\" rel=nofollow>Streamlit</a>, for one reason or another, have/will not leave 3.x.</p><p>To support these, Temporal Python SDK allows any protobuf library &gt;= 3.19. However, the C extension in older Pythonversions can cause issues with the sandbox due to global state sharing. Temporal strongly recommends using the latestprotobuf 4.x library unless you absolutely cannot at which point some proto libraries may have to be marked as<a href=#passthrough-modules rel=nofollow>Passthrough Modules</a>.</p><h3>Known Compatibility Issues</h3><p>Below are known compatibility issues with the Python SDK.</p><h4>gevent Patching</h4><p>When using <code>gevent.monkey.patch_all()</code>, asyncio event loops can get messed up, especially those using custom event loopslike Temporal. See <a href=\"https://github.com/gevent/gevent/issues/982\" rel=nofollow>this gevent issue</a>. This is a known incompatibility andusers are encouraged to not use gevent in asyncio applications (including Temporal). But if you must, there is<a href=\"https://github.com/temporalio/samples-python/tree/main/gevent_async\" rel=nofollow>a sample</a> showing how it is possible.</p><h1>Development</h1><p>The Python SDK is built to work with Python 3.8 and newer. It is built using<a href=\"https://github.com/temporalio/sdk-core/\" rel=nofollow>SDK Core</a> which is written in Rust.</p><h3>Building</h3><h4>Prepare</h4><p>To build the SDK from source for use as a dependency, the following prerequisites are required:</p><ul><li><a href=\"https://www.python.org/\" rel=nofollow>Python</a> &gt;= 3.8<ul><li>Make sure the latest version of <code>pip</code> is in use</li></ul></li><li><a href=\"https://www.rust-lang.org/\" rel=nofollow>Rust</a></li><li><a href=\"https://github.com/python-poetry/poetry\" rel=nofollow>poetry</a> (e.g. <code>python -m pip install poetry</code>)</li><li><a href=\"https://github.com/nat-n/poethepoet\" rel=nofollow>poe</a> (e.g. <code>python -m pip install poethepoet</code>)</li></ul><p>macOS note: If errors are encountered, it may be better to install Python and Rust as recommended from their websitesinstead of via <code>brew</code>.</p><p>With the prerequisites installed, first clone the SDK repository recursively:</p><pre lang=bash>git<span class=w> </span>clone<span class=w> </span>--recursive<span class=w> </span>https://github.com/temporalio/sdk-python.git<span class=nb>cd</span><span class=w> </span>sdk-python</pre><p>Use <code>poetry</code> to install the dependencies with <code>--no-root</code> to not install this package (because we still need to buildit):</p><pre lang=bash>poetry<span class=w> </span>install<span class=w> </span>--no-root<span class=w> </span>--all-extras</pre><h4>Build</h4><p>Now perform the release build:</p><blockquote><p>This will take a while because Rust will compile the core project in release mode (see <a href=#local-sdk-development-environment rel=nofollow>Local SDK developmentenvironment</a> for the quicker approach to local development).</p></blockquote><pre lang=bash>poetry<span class=w> </span>build</pre><p>The compiled wheel doesn't have the exact right tags yet for use, so run this script to fix it:</p><pre lang=bash>poe<span class=w> </span>fix-wheel</pre><p>The <code>whl</code> wheel file in <code>dist/</code> is now ready to use.</p><h4>Use</h4><p>The wheel can now be installed into any virtual environment.</p><p>For example,<a href=\"https://packaging.python.org/en/latest/tutorials/installing-packages/#creating-virtual-environments\" rel=nofollow>create a virtual environment</a>somewhere and then run the following inside the virtual environment:</p><pre lang=bash>pip<span class=w> </span>install<span class=w> </span>wheel</pre><pre lang=bash>pip<span class=w> </span>install<span class=w> </span>/path/to/cloned/sdk-python/dist/*.whl</pre><p>Create this Python file at <code>example.py</code>:</p><pre lang=python3><span class=kn>import</span> <span class=nn>asyncio</span><span class=kn>from</span> <span class=nn>temporalio</span> <span class=kn>import</span> <span class=n>workflow</span><span class=p>,</span> <span class=n>activity</span><span class=kn>from</span> <span class=nn>temporalio.client</span> <span class=kn>import</span> <span class=n>Client</span><span class=kn>from</span> <span class=nn>temporalio.worker</span> <span class=kn>import</span> <span class=n>Worker</span><span class=nd>@workflow</span><span class=o>.</span><span class=n>defn</span><span class=k>class</span> <span class=nc>SayHello</span><span class=p>:</span>    <span class=nd>@workflow</span><span class=o>.</span><span class=n>run</span>    <span class=k>async</span> <span class=k>def</span> <span class=nf>run</span><span class=p>(</span><span class=bp>self</span><span class=p>,</span> <span class=n>name</span><span class=p>:</span> <span class=nb>str</span><span class=p>)</span> <span class=o>-&gt;</span> <span class=nb>str</span><span class=p>:</span>        <span class=k>return</span> <span class=sa>f</span><span class=s2>\"Hello, </span><span class=si>{</span><span class=n>name</span><span class=si>}</span><span class=s2>!\"</span><span class=k>async</span> <span class=k>def</span> <span class=nf>main</span><span class=p>():</span>    <span class=n>client</span> <span class=o>=</span> <span class=k>await</span> <span class=n>Client</span><span class=o>.</span><span class=n>connect</span><span class=p>(</span><span class=s2>\"localhost:7233\"</span><span class=p>)</span>    <span class=k>async</span> <span class=k>with</span> <span class=n>Worker</span><span class=p>(</span><span class=n>client</span><span class=p>,</span> <span class=n>task_queue</span><span class=o>=</span><span class=s2>\"my-task-queue\"</span><span class=p>,</span> <span class=n>workflows</span><span class=o>=</span><span class=p>[</span><span class=n>SayHello</span><span class=p>]):</span>        <span class=n>result</span> <span class=o>=</span> <span class=k>await</span> <span class=n>client</span><span class=o>.</span><span class=n>execute_workflow</span><span class=p>(</span><span class=n>SayHello</span><span class=o>.</span><span class=n>run</span><span class=p>,</span> <span class=s2>\"Temporal\"</span><span class=p>,</span>            <span class=nb>id</span><span class=o>=</span><span class=s2>\"my-workflow-id\"</span><span class=p>,</span> <span class=n>task_queue</span><span class=o>=</span><span class=s2>\"my-task-queue\"</span><span class=p>)</span>        <span class=nb>print</span><span class=p>(</span><span class=sa>f</span><span class=s2>\"Result: </span><span class=si>{</span><span class=n>result</span><span class=si>}</span><span class=s2>\"</span><span class=p>)</span><span class=k>if</span> <span class=vm>__name__</span> <span class=o>==</span> <span class=s2>\"__main__\"</span><span class=p>:</span>    <span class=n>asyncio</span><span class=o>.</span><span class=n>run</span><span class=p>(</span><span class=n>main</span><span class=p>())</span></pre><p>Assuming there is a <a href=\"https://docs.temporal.io/docs/server/quick-install/\" rel=nofollow>local Temporal server</a> running, execute thefile with <code>python</code> (or <code>python3</code> if necessary):</p><pre lang=bash>python<span class=w> </span>example.py</pre><p>It should output:</p><pre><code>Result: Hello, Temporal!</code></pre><h3>Local SDK development environment</h3><p>For local development, it is often quicker to use debug builds and a local virtual environment.</p><p>While not required, it often helps IDEs if we put the virtual environment <code>.venv</code> directory in the project itself. Thiscan be configured system-wide via:</p><pre lang=bash>poetry<span class=w> </span>config<span class=w> </span>virtualenvs.in-project<span class=w> </span><span class=nb>true</span></pre><p>Now perform the same steps as the \"Prepare\" section above by installing the prerequisites, cloning the project,installing dependencies, and generating the protobuf code:</p><pre lang=bash>git<span class=w> </span>clone<span class=w> </span>--recursive<span class=w> </span>https://github.com/temporalio/sdk-python.git<span class=nb>cd</span><span class=w> </span>sdk-pythonpoetry<span class=w> </span>install<span class=w> </span>--no-root<span class=w> </span>--all-extras</pre><p>Now compile the Rust extension in develop mode which is quicker than release mode:</p><pre lang=bash>poe<span class=w> </span>build-develop</pre><p>That step can be repeated for any Rust changes made.</p><p>The environment is now ready to develop in.</p><h4>Testing</h4><p>To execute tests:</p><pre lang=bash>poe<span class=w> </span><span class=nb>test</span></pre><p>This runs against <a href=\"https://github.com/temporalio/temporalite\" rel=nofollow>Temporalite</a>. To run against the time-skipping testserver, pass <code>--workflow-environment time-skipping</code>. To run against the <code>default</code> namespace of an already-runningserver, pass the <code>host:port</code> to <code>--workflow-environment</code>. Can also use regular pytest arguments. For example, here's howto run a single test with debug logs on the console:</p><pre lang=bash>poe<span class=w> </span><span class=nb>test</span><span class=w> </span>-s<span class=w> </span>--log-cli-level<span class=o>=</span>DEBUG<span class=w> </span>-k<span class=w> </span>test_sync_activity_thread_cancel_caught</pre><h4>Proto Generation and Testing</h4><p>To allow for backwards compatibility, protobuf code is generated on the 3.x series of the protobuf library. To generateprotobuf code, you must be on Python &lt;= 3.10, and then run <code>poetry add \"protobuf&lt;4\"</code>. Then the protobuf files can begenerated via <code>poe gen-protos</code>. Tests can be run for protobuf version 3 by setting the <code>TEMPORAL_TEST_PROTO3</code> env varto <code>1</code> prior to running tests.</p><p>Do not commit <code>poetry.lock</code> or <code>pyproject.toml</code> changes. To go back from this downgrade, restore <code>pyproject.toml</code> andrun <code>poetry update protobuf grpcio-tools</code>.</p><p>For a less system-intrusive approach, you can:</p><pre lang=shell>docker<span class=w> </span>build<span class=w> </span>-f<span class=w> </span>scripts/_proto/Dockerfile<span class=w> </span>.docker<span class=w> </span>run<span class=w> </span>-v<span class=w> </span><span class=s2>\"</span><span class=si>${</span><span class=nv>PWD</span><span class=si>}</span><span class=s2>/temporalio/api:/api_new\"</span><span class=w> </span>-v<span class=w> </span><span class=s2>\"</span><span class=si>${</span><span class=nv>PWD</span><span class=si>}</span><span class=s2>/temporalio/bridge/proto:/bridge_new\"</span><span class=w> </span>&lt;just<span class=w> </span>built<span class=w> </span>image<span class=w> </span>sha&gt;poe<span class=w> </span>format</pre><h3>Style</h3><ul><li>Mostly <a href=\"https://google.github.io/styleguide/pyguide.html\" rel=nofollow>Google Style Guide</a>. Notable exceptions:<ul><li>We use <a href=\"https://github.com/psf/black\" rel=nofollow>Black</a> for formatting, so that takes precedence</li><li>In tests and example code, can import individual classes/functions to make it more readable. Can also do this forrarely in library code for some Python common items (e.g. <code>dataclass</code> or <code>partial</code>), but not allowed to do this forany <code>temporalio</code> packages (except <code>temporalio.types</code>) or any classes/functions that aren't clear when unqualified.</li><li>We allow relative imports for private packages</li><li>We allow <code>@staticmethod</code></li></ul></li></ul>          </div>        </div>        <div id=\"data\" data-project-tabs-target=\"content\" class=\"vertical-tabs__content\" role=\"tabpanel\" aria-labelledby=\"mobile-data-tab\" tabindex=\"-1\">          <h2 class=\"page-title\">Project details</h2><div class=\"sidebar-section\">  <h3 class=\"sidebar-section__title\">Project links</h3>  <ul class=\"vertical-tabs__list\">    <li>      <a class=\"vertical-tabs__tab vertical-tabs__tab--with-icon vertical-tabs__tab--condensed\" href=\"https://github.com/temporalio/sdk-python\" rel=\"nofollow\">        <i class=\"fas fa-home\" aria-hidden=\"true\"></i>Homepage      </a>    </li>    <li>      <a class=\"vertical-tabs__tab vertical-tabs__tab--with-icon vertical-tabs__tab--condensed\" href=\"https://github.com/temporalio/sdk-python/issues\" rel=\"nofollow\">        <i class=\"fas fa-bug\" aria-hidden=\"true\"></i>Bug Tracker      </a>    </li>    <li>      <a class=\"vertical-tabs__tab vertical-tabs__tab--with-icon vertical-tabs__tab--condensed\" href=\"https://docs.temporal.io/docs/python\" rel=\"nofollow\">        <i class=\"fas fa-book\" aria-hidden=\"true\"></i>Documentation      </a>    </li>    <li>      <a class=\"vertical-tabs__tab vertical-tabs__tab--with-icon vertical-tabs__tab--condensed\" href=\"https://github.com/temporalio/sdk-python\" rel=\"nofollow\">        <i class=\"fab fa-github\" aria-hidden=\"true\"></i>Repository      </a>    </li>  </ul></div><div class=\"sidebar-section\">  <h3 class=\"sidebar-section__title\">Statistics</h3>  <div class=\"hidden github-repo-info\" data-controller=\"github-repo-info\">GitHub statistics:    <ul class=\"vertical-tabs__list\">      <li>        <a class=\"vertical-tabs__tab vertical-tabs__tab--with-icon vertical-tabs__tab--condensed\"           data-github-repo-info-target=\"stargazersUrl\" rel=\"noopener\">          <i class=\"fa fa-star\" aria-hidden=\"true\"></i>          <strong>Stars:</strong>          <span data-github-repo-info-target=\"stargazersCount\"></span>        </a>      </li>      <li>        <a class=\"vertical-tabs__tab vertical-tabs__tab--with-icon vertical-tabs__tab--condensed\"           data-github-repo-info-target=\"forksUrl\" rel=\"noopener\">          <i class=\"fa fa-code-branch\" aria-hidden=\"true\"></i>          <strong>Forks:</strong>          <span data-github-repo-info-target=\"forksCount\"></span>        </a>      </li>      <li>        <a class=\"vertical-tabs__tab vertical-tabs__tab--with-icon vertical-tabs__tab--condensed\"           data-github-repo-info-target=\"openIssuesUrl\" rel=\"noopener\">          <i class=\"fa fa-exclamation-circle\" aria-hidden=\"true\"></i>          <strong>Open issues:</strong>          <span data-github-repo-info-target=\"openIssuesCount\"></span>        </a>      </li>      <li>        <a class=\"vertical-tabs__tab vertical-tabs__tab--with-icon vertical-tabs__tab--condensed\"           data-github-repo-info-target=\"openPRsUrl\" rel=\"noopener\">          <i class=\"fa fa-code-pull-request\" aria-hidden=\"true\"></i>          <strong>Open PRs:</strong>          <span data-github-repo-info-target=\"openPRsCount\"></span>        </a>      </li>    </ul>  </div>  <p>View statistics for this project via <a href=\"https://libraries.io/pypi/temporalio\" title=\"External link\" target=\"_blank\" rel=\"noopener\">Libraries.io</a>, or by using <a href=\"https://packaging.python.org/guides/analyzing-pypi-package-downloads/\" target=\"_blank\" rel=\"noopener\">our public dataset on Google BigQuery</a>  </p></div><div class=\"sidebar-section\">  <h3 class=\"sidebar-section__title\">Meta</h3>  <p><strong>License:</strong> MIT License (MIT)</p>    <p><strong>Author:</strong> <a href=\"mailto:sdk@temporal.io\">Temporal Technologies Inc</a></p>  <p class=\"tags\">    <i class=\"fa fa-tags\" aria-hidden=\"true\"></i>    <span class=\"sr-only\">Tags</span>    <span class=\"package-keyword\">      temporal,    </span>    <span class=\"package-keyword\">      workflow    </span>  </p>  <p>    <strong>Requires:</strong> Python &gt;=3.8, &lt;4.0  </p></div><div class=\"sidebar-section\">    <h3 class=\"sidebar-section__title\">Maintainers</h3>      <span class=\"sidebar-section__maintainer\">        <a href=\"/user/cretz/\" aria-label=\"cretz\">          <span class=\"sidebar-section__user-gravatar\">            <img src=\"https://pypi-camo.freetls.fastly.net/8441de39fcc3a7465074f633140f896a441cedbf/68747470733a2f2f7365637572652e67726176617461722e636f6d2f6176617461722f30333663646133366234336566623535666433313039363162343130663565373f73697a653d3530\" height=\"50\" width=\"50\" alt=\"Avatar for cretz from gravatar.com\" title=\"Avatar for cretz from gravatar.com\">          </span>          <span class=\"sidebar-section__user-gravatar-text\">            cretz          </span>        </a>      </span>      <span class=\"sidebar-section__maintainer\">        <a href=\"/user/swgillespie-temporal/\" aria-label=\"swgillespie-temporal\">          <span class=\"sidebar-section__user-gravatar\">            <img src=\"https://pypi-camo.freetls.fastly.net/ff7fc461a9e047b735ba378993c9a2f98e635a10/68747470733a2f2f7365637572652e67726176617461722e636f6d2f6176617461722f36666232653065333735653632633335353864643830316162386433376464643f73697a653d3530\" height=\"50\" width=\"50\" alt=\"Avatar for swgillespie-temporal from gravatar.com\" title=\"Avatar for swgillespie-temporal from gravatar.com\">          </span>          <span class=\"sidebar-section__user-gravatar-text\">            swgillespie-temporal          </span>        </a>      </span>      <span class=\"sidebar-section__maintainer\">        <a href=\"/user/temporalio/\" aria-label=\"temporalio\">          <span class=\"sidebar-section__user-gravatar\">            <img src=\"https://pypi-camo.freetls.fastly.net/8683e03b34b6389c890204ae964191c7e76535a1/68747470733a2f2f7365637572652e67726176617461722e636f6d2f6176617461722f38396163653135336166393139323965376439316530306464386664383333663f73697a653d3530\" height=\"50\" width=\"50\" alt=\"Avatar for temporalio from gravatar.com\" title=\"Avatar for temporalio from gravatar.com\">          </span>          <span class=\"sidebar-section__user-gravatar-text\">            temporalio          </span>        </a>      </span></div><div class=\"sidebar-section\">  <h3 class=\"sidebar-section__title\">Classifiers</h3>  <ul class=\"sidebar-section__classifiers\">    <li>      <strong>License</strong>      <ul>        <li>          <a href=\"/search/?c=License+%3A%3A+OSI+Approved+%3A%3A+MIT+License\">            OSI Approved :: MIT License          </a>        </li>      </ul>    </li>    <li>      <strong>Programming Language</strong>      <ul>        <li>          <a href=\"/search/?c=Programming+Language+%3A%3A+Python+%3A%3A+3\">            Python :: 3          </a>        </li>        <li>          <a href=\"/search/?c=Programming+Language+%3A%3A+Python+%3A%3A+3.8\">            Python :: 3.8          </a>        </li>        <li>          <a href=\"/search/?c=Programming+Language+%3A%3A+Python+%3A%3A+3.9\">            Python :: 3.9          </a>        </li>        <li>          <a href=\"/search/?c=Programming+Language+%3A%3A+Python+%3A%3A+3.10\">            Python :: 3.10          </a>        </li>        <li>          <a href=\"/search/?c=Programming+Language+%3A%3A+Python+%3A%3A+3.11\">            Python :: 3.11          </a>        </li>        <li>          <a href=\"/search/?c=Programming+Language+%3A%3A+Python+%3A%3A+3.12\">            Python :: 3.12          </a>        </li>      </ul>    </li>  </ul></div>          <br>        </div>        <div id=\"history\" data-project-tabs-target=\"content\" class=\"vertical-tabs__content\" role=\"tabpanel\" aria-labelledby=\"history-tab mobile-history-tab\" tabindex=\"-1\">          <h2 class=\"page-title split-layout\">            <span>Release history</span>            <span class=\"reset-text margin-top\">              <a href=\"/help/#project-release-notifications\">Release notifications</a> |              <a href=\"/rss/project/temporalio/releases.xml\">RSS feed <i class=\"fa fa-rss\" aria-hidden=\"true\"></i></a>            </span>          </h2>          <div class=\"release-timeline\">            <div class=\"release release--latest release--current\">              <div class=\"release__meta\">                <span class=\"badge\">This version</span>              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/blue-cube.572a5bfb.svg\">              </div>              <a class=\"card release__card\" href=\"/project/temporalio/1.5.1/\">                <p class=\"release__version\">                  1.5.1                </p>                <p class=\"release__version-date\">                  <time datetime=\"2024-02-27T21:35:55+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Feb 27, 2024</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/temporalio/1.5.0/\">                <p class=\"release__version\">                  1.5.0                </p>                <p class=\"release__version-date\">                  <time datetime=\"2024-01-09T13:24:32+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Jan 9, 2024</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/temporalio/1.4.0/\">                <p class=\"release__version\">                  1.4.0                </p>                <p class=\"release__version-date\">                  <time datetime=\"2023-11-08T17:12:21+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Nov 8, 2023</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/temporalio/1.3.0/\">                <p class=\"release__version\">                  1.3.0                </p>                <p class=\"release__version-date\">                  <time datetime=\"2023-07-24T17:41:28+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Jul 24, 2023</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/temporalio/1.2.0/\">                <p class=\"release__version\">                  1.2.0                </p>                <p class=\"release__version-date\">                  <time datetime=\"2023-05-01T16:17:16+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  May 1, 2023</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/temporalio/1.1.0/\">                <p class=\"release__version\">                  1.1.0                </p>                <p class=\"release__version-date\">                  <time datetime=\"2023-02-23T17:57:01+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Feb 23, 2023</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/temporalio/1.0.0/\">                <p class=\"release__version\">                  1.0.0                </p>                <p class=\"release__version-date\">                  <time datetime=\"2023-01-05T20:00:41+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Jan 5, 2023</time>                </p>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/temporalio/0.1b4/\">                <p class=\"release__version\">                  0.1b4                  <span class=\"badge badge--warning\">pre-release                  </span>                  <span class=\"badge badge--danger\">yanked                  </span>                </p>                <p class=\"release__version-date\">                  <time datetime=\"2022-12-07T17:23:35+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Dec 7, 2022</time>                </p>                  <div class=\"callout-block callout-block--danger release__yanked-reason\">                    <p>Reason this release was yanked:</p>                    <p>Beta release no longer valid</p>                  </div>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/temporalio/0.1b3/\">                <p class=\"release__version\">                  0.1b3                  <span class=\"badge badge--warning\">pre-release                  </span>                  <span class=\"badge badge--danger\">yanked                  </span>                </p>                <p class=\"release__version-date\">                  <time datetime=\"2022-11-14T20:56:56+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Nov 14, 2022</time>                </p>                  <div class=\"callout-block callout-block--danger release__yanked-reason\">                    <p>Reason this release was yanked:</p>                    <p>Beta release no longer valid</p>                  </div>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/temporalio/0.1b2/\">                <p class=\"release__version\">                  0.1b2                  <span class=\"badge badge--warning\">pre-release                  </span>                  <span class=\"badge badge--danger\">yanked                  </span>                </p>                <p class=\"release__version-date\">                  <time datetime=\"2022-09-20T15:07:43+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Sep 20, 2022</time>                </p>                  <div class=\"callout-block callout-block--danger release__yanked-reason\">                    <p>Reason this release was yanked:</p>                    <p>Beta release no longer valid</p>                  </div>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/temporalio/0.1b1/\">                <p class=\"release__version\">                  0.1b1                  <span class=\"badge badge--warning\">pre-release                  </span>                  <span class=\"badge badge--danger\">yanked                  </span>                </p>                <p class=\"release__version-date\">                  <time datetime=\"2022-08-05T17:15:19+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Aug 5, 2022</time>                </p>                  <div class=\"callout-block callout-block--danger release__yanked-reason\">                    <p>Reason this release was yanked:</p>                    <p>Beta release no longer valid</p>                  </div>              </a>            </div>            <div class=\"release\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/temporalio/0.1a2/\">                <p class=\"release__version\">                  0.1a2                  <span class=\"badge badge--warning\">pre-release                  </span>                  <span class=\"badge badge--danger\">yanked                  </span>                </p>                <p class=\"release__version-date\">                  <time datetime=\"2022-06-13T17:16:16+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Jun 13, 2022</time>                </p>                  <div class=\"callout-block callout-block--danger release__yanked-reason\">                    <p>Reason this release was yanked:</p>                    <p>Alpha release no longer valid</p>                  </div>              </a>            </div>            <div class=\"release release--oldest\">              <div class=\"release__meta\">              </div>              <div class=\"release__graphic\">                <div class=\"release__line\"></div>                <img class=\"release__node\" alt=\"\" src=\"https://pypi.org/static/images/white-cube.2351a86c.svg\">              </div>              <a class=\"card release__card\" href=\"/project/temporalio/0.1a1/\">                <p class=\"release__version\">                  0.1a1                  <span class=\"badge badge--warning\">pre-release                  </span>                  <span class=\"badge badge--danger\">yanked                  </span>                </p>                <p class=\"release__version-date\">                  <time datetime=\"2022-03-18T12:20:05+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Mar 18, 2022</time>                </p>                  <div class=\"callout-block callout-block--danger release__yanked-reason\">                    <p>Reason this release was yanked:</p>                    <p>Alpha release no longer valid</p>                  </div>              </a>            </div>          </div>        </div>          <div id=\"files\" data-project-tabs-target=\"content\" class=\"vertical-tabs__content\" role=\"tabpanel\" aria-labelledby=\"files-tab mobile-files-tab\" tabindex=\"-1\">            <h2 class=\"page-title\">Download files</h2>            <p>Download the file for your platform. If you're not sure which to choose, learn more about <a href=\"https://packaging.python.org/tutorials/installing-packages/\" title=\"External link\" target=\"_blank\" rel=\"noopener\">installing packages</a>.</p>            <h3>Source Distribution            </h3>                  <div class=\"file\">      <div class=\"file__graphic\">        <i class=\"far fa-file\" aria-hidden=\"true\"></i>      </div>      <div class=\"card file__card\">        <a href=\"https://files.pythonhosted.org/packages/93/3a/0e23df938d2540fc733c535291164fb4ad6311045db66ae0c359d2f8ab5e/temporalio-1.5.1.tar.gz\">          temporalio-1.5.1.tar.gz        </a>        (1.0 MB        <a href=\"#copy-hash-modal-e17c5f0d-9f27-41b0-a351-7772c0c6b84a\">view hashes</a>)        <p class=\"file__meta\">          Uploaded <time datetime=\"2024-02-27T21:36:36+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Feb 27, 2024</time>          <code>source</code>        </p>      </div>    </div>            <h3>Built Distributions            </h3>                <div class=\"file\">      <div class=\"file__graphic\">        <i class=\"far fa-file\" aria-hidden=\"true\"></i>      </div>      <div class=\"card file__card\">        <a href=\"https://files.pythonhosted.org/packages/36/77/b9537a6c2bbc3004bfab62164c66e284f401f1f6ec183e7d02758dcdf01f/temporalio-1.5.1-cp38-abi3-win_amd64.whl\">          temporalio-1.5.1-cp38-abi3-win_amd64.whl        </a>        (9.8 MB        <a href=\"#copy-hash-modal-409259c3-ef80-40ff-9b2a-d98329c7c960\">view hashes</a>)        <p class=\"file__meta\">          Uploaded <time datetime=\"2024-02-27T21:36:32+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Feb 27, 2024</time>          <code>cp38</code>        </p>      </div>    </div>    <div class=\"file\">      <div class=\"file__graphic\">        <i class=\"far fa-file\" aria-hidden=\"true\"></i>      </div>      <div class=\"card file__card\">        <a href=\"https://files.pythonhosted.org/packages/13/95/b5a9c4b8e77e0c2f5604357e94602932b6fceb35398453b2d7a48bf53d38/temporalio-1.5.1-cp38-abi3-manylinux2014_x86_64.manylinux_2_17_x86_64.whl\">          temporalio-1.5.1-cp38-abi3-manylinux2014_x86_64.manylinux_2_17_x86_64.whl        </a>        (10.8 MB        <a href=\"#copy-hash-modal-5890aaaa-57c4-4108-ac54-aaf47eda1415\">view hashes</a>)        <p class=\"file__meta\">          Uploaded <time datetime=\"2024-02-27T21:36:25+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Feb 27, 2024</time>          <code>cp38</code>        </p>      </div>    </div>    <div class=\"file\">      <div class=\"file__graphic\">        <i class=\"far fa-file\" aria-hidden=\"true\"></i>      </div>      <div class=\"card file__card\">        <a href=\"https://files.pythonhosted.org/packages/14/b9/8317f38a343b8aac7423553b8676fecc80612528541a34e31a427d7f1a34/temporalio-1.5.1-cp38-abi3-manylinux2014_aarch64.manylinux_2_17_aarch64.whl\">          temporalio-1.5.1-cp38-abi3-manylinux2014_aarch64.manylinux_2_17_aarch64.whl        </a>        (10.6 MB        <a href=\"#copy-hash-modal-3c7d6c65-9277-4ea2-95c4-e7fcb5f43f07\">view hashes</a>)        <p class=\"file__meta\">          Uploaded <time datetime=\"2024-02-27T21:36:16+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Feb 27, 2024</time>          <code>cp38</code>        </p>      </div>    </div>    <div class=\"file\">      <div class=\"file__graphic\">        <i class=\"far fa-file\" aria-hidden=\"true\"></i>      </div>      <div class=\"card file__card\">        <a href=\"https://files.pythonhosted.org/packages/c1/1e/3062667eee6689df5ceff211f9be4206da7a6f05720d07c8cfc64fcab2a2/temporalio-1.5.1-cp38-abi3-macosx_11_0_arm64.whl\">          temporalio-1.5.1-cp38-abi3-macosx_11_0_arm64.whl        </a>        (9.8 MB        <a href=\"#copy-hash-modal-2d496548-7e78-4f72-a7e2-ae24eabec7b0\">view hashes</a>)        <p class=\"file__meta\">          Uploaded <time datetime=\"2024-02-27T21:36:08+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Feb 27, 2024</time>          <code>cp38</code>        </p>      </div>    </div>    <div class=\"file\">      <div class=\"file__graphic\">        <i class=\"far fa-file\" aria-hidden=\"true\"></i>      </div>      <div class=\"card file__card\">        <a href=\"https://files.pythonhosted.org/packages/66/f8/2135e0b5475d7344dec50187b435c61bd26fb56000075bfe5335eb193efd/temporalio-1.5.1-cp38-abi3-macosx_10_9_x86_64.whl\">          temporalio-1.5.1-cp38-abi3-macosx_10_9_x86_64.whl        </a>        (10.1 MB        <a href=\"#copy-hash-modal-d35e6224-d09a-4a6e-be17-68af9f98d38f\">view hashes</a>)        <p class=\"file__meta\">          Uploaded <time datetime=\"2024-02-27T21:35:55+0000\" data-controller=\"localized-time\" data-localized-time-relative=\"true\" data-localized-time-show-time=\"false\">  Feb 27, 2024</time>          <code>cp38</code>        </p>      </div>    </div>          </div><div id=\"copy-hash-modal-e17c5f0d-9f27-41b0-a351-7772c0c6b84a\" class=\"modal modal--wide\">  <div class=\"modal__content\" role=\"dialog\">    <a href=\"#modal-close\" title=\"Close\" class=\"modal__close\">      <i class=\"fa fa-times\" aria-hidden=\"true\"></i>      <span class=\"sr-only\">Close</span>    </a>    <div class=\"modal__body\">      <h3 class=\"modal__title\"><a href=\"https://pip.pypa.io/en/stable/topics/secure-installs/#hash-checking-mode\" title=\"External link\" target=\"_blank\" rel=\"noopener\">Hashes</a> for temporalio-1.5.1.tar.gz      </h3>      <table class=\"table table--hashes\">        <caption class=\"sr-only\">Hashes for temporalio-1.5.1.tar.gz</caption>        <thead>          <tr>            <th scope=\"col\">Algorithm</th>            <th scope=\"col\">Hash digest</th>            <th></th>          </tr>        </thead>        <tbody>          <tr data-controller=\"clipboard\">            <th scope=\"row\">SHA256</th>            <td><code data-clipboard-target=\"source\">4c7bbc8a3e8df1ffc0c7d213bdcad26ae055bdd615567ce1ca4bfa9f28f831b8</code></td>            <td class=\"table__align-right\">              <button type=\"button\" class=\"button button--small copy-tooltip copy-tooltip-w\" data-action=\"clipboard#copy\" data-clipboard-target=\"tooltip\" data-clipboard-tooltip-value=\"Copy to clipboard\">Copy              </button>            </td>          </tr>          <tr data-controller=\"clipboard\">            <th scope=\"row\">MD5</th>            <td><code data-clipboard-target=\"source\">ce490dadbd65d5d01a8c366ac4975d33</code></td>            <td class=\"table__align-right\">              <button type=\"button\" class=\"button button--small copy-tooltip copy-tooltip-w\" data-action=\"clipboard#copy\" data-clipboard-target=\"tooltip\" data-clipboard-tooltip-value=\"Copy to clipboard\">Copy              </button>            </td>          </tr>          <tr data-controller=\"clipboard\">            <th scope=\"row\">BLAKE2b-256</th>            <td><code data-clipboard-target=\"source\">933a0e23df938d2540fc733c535291164fb4ad6311045db66ae0c359d2f8ab5e</code></td>            <td class=\"table__align-right\">              <button type=\"button\" class=\"button button--small copy-tooltip copy-tooltip-w\" data-action=\"clipboard#copy\" data-clipboard-target=\"tooltip\" data-clipboard-tooltip-value=\"Copy to clipboard\">Copy              </button>            </td>          </tr>        </tbody>      </table>    </div>    <div class=\"modal__footer\">      <a href=\"#modal-close\" class=\"button button--primary modal__action\">Close</a>    </div>  </div></div><div id=\"copy-hash-modal-409259c3-ef80-40ff-9b2a-d98329c7c960\" class=\"modal modal--wide\">  <div class=\"modal__content\" role=\"dialog\">    <a href=\"#modal-close\" title=\"Close\" class=\"modal__close\">      <i class=\"fa fa-times\" aria-hidden=\"true\"></i>      <span class=\"sr-only\">Close</span>    </a>    <div class=\"modal__body\">      <h3 class=\"modal__title\"><a href=\"https://pip.pypa.io/en/stable/topics/secure-installs/#hash-checking-mode\" title=\"External link\" target=\"_blank\" rel=\"noopener\">Hashes</a> for temporalio-1.5.1-cp38-abi3-win_amd64.whl      </h3>      <table class=\"table table--hashes\">        <caption class=\"sr-only\">Hashes for temporalio-1.5.1-cp38-abi3-win_amd64.whl</caption>        <thead>          <tr>            <th scope=\"col\">Algorithm</th>            <th scope=\"col\">Hash digest</th>            <th></th>          </tr>        </thead>        <tbody>          <tr data-controller=\"clipboard\">            <th scope=\"row\">SHA256</th>            <td><code data-clipboard-target=\"source\">15d36d2038b0ac33511163619bea7ead6f10aca3db5bad4b9d464d3fa0f4ff48</code></td>            <td class=\"table__align-right\">              <button type=\"button\" class=\"button button--small copy-tooltip copy-tooltip-w\" data-action=\"clipboard#copy\" data-clipboard-target=\"tooltip\" data-clipboard-tooltip-value=\"Copy to clipboard\">Copy              </button>            </td>          </tr>          <tr data-controller=\"clipboard\">            <th scope=\"row\">MD5</th>            <td><code data-clipboard-target=\"source\">e8494efe030d776e4688c0e23a7d2eb1</code></td>            <td class=\"table__align-right\">              <button type=\"button\" class=\"button button--small copy-tooltip copy-tooltip-w\" data-action=\"clipboard#copy\" data-clipboard-target=\"tooltip\" data-clipboard-tooltip-value=\"Copy to clipboard\">Copy              </button>            </td>          </tr>          <tr data-controller=\"clipboard\">            <th scope=\"row\">BLAKE2b-256</th>            <td><code data-clipboard-target=\"source\">3677b9537a6c2bbc3004bfab62164c66e284f401f1f6ec183e7d02758dcdf01f</code></td>            <td class=\"table__align-right\">              <button type=\"button\" class=\"button button--small copy-tooltip copy-tooltip-w\" data-action=\"clipboard#copy\" data-clipboard-target=\"tooltip\" data-clipboard-tooltip-value=\"Copy to clipboard\">Copy              </button>            </td>          </tr>        </tbody>      </table>    </div>    <div class=\"modal__footer\">      <a href=\"#modal-close\" class=\"button button--primary modal__action\">Close</a>    </div>  </div></div><div id=\"copy-hash-modal-5890aaaa-57c4-4108-ac54-aaf47eda1415\" class=\"modal modal--wide\">  <div class=\"modal__content\" role=\"dialog\">    <a href=\"#modal-close\" title=\"Close\" class=\"modal__close\">      <i class=\"fa fa-times\" aria-hidden=\"true\"></i>      <span class=\"sr-only\">Close</span>    </a>    <div class=\"modal__body\">      <h3 class=\"modal__title\"><a href=\"https://pip.pypa.io/en/stable/topics/secure-installs/#hash-checking-mode\" title=\"External link\" target=\"_blank\" rel=\"noopener\">Hashes</a> for temporalio-1.5.1-cp38-abi3-manylinux2014_x86_64.manylinux_2_17_x86_64.whl      </h3>      <table class=\"table table--hashes\">        <caption class=\"sr-only\">Hashes for temporalio-1.5.1-cp38-abi3-manylinux2014_x86_64.manylinux_2_17_x86_64.whl</caption>        <thead>          <tr>            <th scope=\"col\">Algorithm</th>            <th scope=\"col\">Hash digest</th>            <th></th>          </tr>        </thead>        <tbody>          <tr data-controller=\"clipboard\">            <th scope=\"row\">SHA256</th>            <td><code data-clipboard-target=\"source\">1167f6fc31355170cdb4f5f7b89f0f7e36c54d0aecb0ee9aa611f73e32db7d78</code></td>            <td class=\"table__align-right\">              <button type=\"button\" class=\"button button--small copy-tooltip copy-tooltip-w\" data-action=\"clipboard#copy\" data-clipboard-target=\"tooltip\" data-clipboard-tooltip-value=\"Copy to clipboard\">Copy              </button>            </td>          </tr>          <tr data-controller=\"clipboard\">            <th scope=\"row\">MD5</th>            <td><code data-clipboard-target=\"source\">e8989f9497e54beb5a9af215d095bb46</code></td>            <td class=\"table__align-right\">              <button type=\"button\" class=\"button button--small copy-tooltip copy-tooltip-w\" data-action=\"clipboard#copy\" data-clipboard-target=\"tooltip\" data-clipboard-tooltip-value=\"Copy to clipboard\">Copy              </button>            </td>          </tr>          <tr data-controller=\"clipboard\">            <th scope=\"row\">BLAKE2b-256</th>            <td><code data-clipboard-target=\"source\">1395b5a9c4b8e77e0c2f5604357e94602932b6fceb35398453b2d7a48bf53d38</code></td>            <td class=\"table__align-right\">              <button type=\"button\" class=\"button button--small copy-tooltip copy-tooltip-w\" data-action=\"clipboard#copy\" data-clipboard-target=\"tooltip\" data-clipboard-tooltip-value=\"Copy to clipboard\">Copy              </button>            </td>          </tr>        </tbody>      </table>    </div>    <div class=\"modal__footer\">      <a href=\"#modal-close\" class=\"button button--primary modal__action\">Close</a>    </div>  </div></div><div id=\"copy-hash-modal-3c7d6c65-9277-4ea2-95c4-e7fcb5f43f07\" class=\"modal modal--wide\">  <div class=\"modal__content\" role=\"dialog\">    <a href=\"#modal-close\" title=\"Close\" class=\"modal__close\">      <i class=\"fa fa-times\" aria-hidden=\"true\"></i>      <span class=\"sr-only\">Close</span>    </a>    <div class=\"modal__body\">      <h3 class=\"modal__title\"><a href=\"https://pip.pypa.io/en/stable/topics/secure-installs/#hash-checking-mode\" title=\"External link\" target=\"_blank\" rel=\"noopener\">Hashes</a> for temporalio-1.5.1-cp38-abi3-manylinux2014_aarch64.manylinux_2_17_aarch64.whl      </h3>      <table class=\"table table--hashes\">        <caption class=\"sr-only\">Hashes for temporalio-1.5.1-cp38-abi3-manylinux2014_aarch64.manylinux_2_17_aarch64.whl</caption>        <thead>          <tr>            <th scope=\"col\">Algorithm</th>            <th scope=\"col\">Hash digest</th>            <th></th>          </tr>        </thead>        <tbody>          <tr data-controller=\"clipboard\">            <th scope=\"row\">SHA256</th>            <td><code data-clipboard-target=\"source\">47149204b6430c8553d5dd6dfe2fbc6830bf6fd8ab08463ee4c97885c68f3082</code></td>            <td class=\"table__align-right\">              <button type=\"button\" class=\"button button--small copy-tooltip copy-tooltip-w\" data-action=\"clipboard#copy\" data-clipboard-target=\"tooltip\" data-clipboard-tooltip-value=\"Copy to clipboard\">Copy              </button>            </td>          </tr>          <tr data-controller=\"clipboard\">            <th scope=\"row\">MD5</th>            <td><code data-clipboard-target=\"source\">d6b1e0c1740bcc9c2a77143116372734</code></td>            <td class=\"table__align-right\">              <button type=\"button\" class=\"button button--small copy-tooltip copy-tooltip-w\" data-action=\"clipboard#copy\" data-clipboard-target=\"tooltip\" data-clipboard-tooltip-value=\"Copy to clipboard\">Copy              </button>            </td>          </tr>          <tr data-controller=\"clipboard\">            <th scope=\"row\">BLAKE2b-256</th>            <td><code data-clipboard-target=\"source\">14b98317f38a343b8aac7423553b8676fecc80612528541a34e31a427d7f1a34</code></td>            <td class=\"table__align-right\">              <button type=\"button\" class=\"button button--small copy-tooltip copy-tooltip-w\" data-action=\"clipboard#copy\" data-clipboard-target=\"tooltip\" data-clipboard-tooltip-value=\"Copy to clipboard\">Copy              </button>            </td>          </tr>        </tbody>      </table>    </div>    <div class=\"modal__footer\">      <a href=\"#modal-close\" class=\"button button--primary modal__action\">Close</a>    </div>  </div></div><div id=\"copy-hash-modal-2d496548-7e78-4f72-a7e2-ae24eabec7b0\" class=\"modal modal--wide\">  <div class=\"modal__content\" role=\"dialog\">    <a href=\"#modal-close\" title=\"Close\" class=\"modal__close\">      <i class=\"fa fa-times\" aria-hidden=\"true\"></i>      <span class=\"sr-only\">Close</span>    </a>    <div class=\"modal__body\">      <h3 class=\"modal__title\"><a href=\"https://pip.pypa.io/en/stable/topics/secure-installs/#hash-checking-mode\" title=\"External link\" target=\"_blank\" rel=\"noopener\">Hashes</a> for temporalio-1.5.1-cp38-abi3-macosx_11_0_arm64.whl      </h3>      <table class=\"table table--hashes\">        <caption class=\"sr-only\">Hashes for temporalio-1.5.1-cp38-abi3-macosx_11_0_arm64.whl</caption>        <thead>          <tr>            <th scope=\"col\">Algorithm</th>            <th scope=\"col\">Hash digest</th>            <th></th>          </tr>        </thead>        <tbody>          <tr data-controller=\"clipboard\">            <th scope=\"row\">SHA256</th>            <td><code data-clipboard-target=\"source\">2b3765e0b6b0ef0b670cf39720a80280fd35be2444633c715b741d2b5428ceb6</code></td>            <td class=\"table__align-right\">              <button type=\"button\" class=\"button button--small copy-tooltip copy-tooltip-w\" data-action=\"clipboard#copy\" data-clipboard-target=\"tooltip\" data-clipboard-tooltip-value=\"Copy to clipboard\">Copy              </button>            </td>          </tr>          <tr data-controller=\"clipboard\">            <th scope=\"row\">MD5</th>            <td><code data-clipboard-target=\"source\">ed5f2f319000e636934a2072779f8469</code></td>            <td class=\"table__align-right\">              <button type=\"button\" class=\"button button--small copy-tooltip copy-tooltip-w\" data-action=\"clipboard#copy\" data-clipboard-target=\"tooltip\" data-clipboard-tooltip-value=\"Copy to clipboard\">Copy              </button>            </td>          </tr>          <tr data-controller=\"clipboard\">            <th scope=\"row\">BLAKE2b-256</th>            <td><code data-clipboard-target=\"source\">c11e3062667eee6689df5ceff211f9be4206da7a6f05720d07c8cfc64fcab2a2</code></td>            <td class=\"table__align-right\">              <button type=\"button\" class=\"button button--small copy-tooltip copy-tooltip-w\" data-action=\"clipboard#copy\" data-clipboard-target=\"tooltip\" data-clipboard-tooltip-value=\"Copy to clipboard\">Copy              </button>            </td>          </tr>        </tbody>      </table>    </div>    <div class=\"modal__footer\">      <a href=\"#modal-close\" class=\"button button--primary modal__action\">Close</a>    </div>  </div></div><div id=\"copy-hash-modal-d35e6224-d09a-4a6e-be17-68af9f98d38f\" class=\"modal modal--wide\">  <div class=\"modal__content\" role=\"dialog\">    <a href=\"#modal-close\" title=\"Close\" class=\"modal__close\">      <i class=\"fa fa-times\" aria-hidden=\"true\"></i>      <span class=\"sr-only\">Close</span>    </a>    <div class=\"modal__body\">      <h3 class=\"modal__title\"><a href=\"https://pip.pypa.io/en/stable/topics/secure-installs/#hash-checking-mode\" title=\"External link\" target=\"_blank\" rel=\"noopener\">Hashes</a> for temporalio-1.5.1-cp38-abi3-macosx_10_9_x86_64.whl      </h3>      <table class=\"table table--hashes\">        <caption class=\"sr-only\">Hashes for temporalio-1.5.1-cp38-abi3-macosx_10_9_x86_64.whl</caption>        <thead>          <tr>            <th scope=\"col\">Algorithm</th>            <th scope=\"col\">Hash digest</th>            <th></th>          </tr>        </thead>        <tbody>          <tr data-controller=\"clipboard\">            <th scope=\"row\">SHA256</th>            <td><code data-clipboard-target=\"source\">cd1f8930787c728e30ca2fecf86175cafd1781d97e3ee7cdf6e41915c566a835</code></td>            <td class=\"table__align-right\">              <button type=\"button\" class=\"button button--small copy-tooltip copy-tooltip-w\" data-action=\"clipboard#copy\" data-clipboard-target=\"tooltip\" data-clipboard-tooltip-value=\"Copy to clipboard\">Copy              </button>            </td>          </tr>          <tr data-controller=\"clipboard\">            <th scope=\"row\">MD5</th>            <td><code data-clipboard-target=\"source\">3e52ac436c23904c81ce28eeb5317603</code></td>            <td class=\"table__align-right\">              <button type=\"button\" class=\"button button--small copy-tooltip copy-tooltip-w\" data-action=\"clipboard#copy\" data-clipboard-target=\"tooltip\" data-clipboard-tooltip-value=\"Copy to clipboard\">Copy              </button>            </td>          </tr>          <tr data-controller=\"clipboard\">            <th scope=\"row\">BLAKE2b-256</th>            <td><code data-clipboard-target=\"source\">66f82135e0b5475d7344dec50187b435c61bd26fb56000075bfe5335eb193efd</code></td>            <td class=\"table__align-right\">              <button type=\"button\" class=\"button button--small copy-tooltip copy-tooltip-w\" data-action=\"clipboard#copy\" data-clipboard-target=\"tooltip\" data-clipboard-tooltip-value=\"Copy to clipboard\">Copy              </button>            </td>          </tr>        </tbody>      </table>    </div>    <div class=\"modal__footer\">      <a href=\"#modal-close\" class=\"button button--primary modal__action\">Close</a>    </div>  </div></div>      </div>    </div>  </div></div>    </main>    <footer class=\"footer\">      <div class=\"footer__logo\">        <img src=\"/static/images/white-cube.2351a86c.svg\" alt=\"\" class=\"-js-white-cube\">      </div>      <div class=\"footer__menus\">        <div class=\"footer__menu\">          <h2>Help</h2>          <nav aria-label=\"Help navigation\">            <ul>              <li><a href=\"https://packaging.python.org/tutorials/installing-packages/\" title=\"External link\" target=\"_blank\" rel=\"noopener\">Installing packages</a></li>              <li><a href=\"https://packaging.python.org/tutorials/packaging-projects/\" title=\"External link\" target=\"_blank\" rel=\"noopener\">Uploading packages</a></li>              <li><a href=\"https://packaging.python.org/\" title=\"External link\" target=\"_blank\" rel=\"noopener\">User guide</a></li>              <li><a href=\"https://www.python.org/dev/peps/pep-0541/\" title=\"External link\" target=\"_blank\" rel=\"noopener\">Project name retention</a></li>              <li><a href=\"/help/\">FAQs</a></li>            </ul>          </nav>        </div>        <div class=\"footer__menu\">          <h2>About PyPI</h2>          <nav aria-label=\"About PyPI navigation\">            <ul>              <li><a href=\"https://twitter.com/PyPI\" title=\"External link\" target=\"_blank\" rel=\"noopener\">PyPI on Twitter</a></li>              <li><a href=\"https://dtdg.co/pypi\" title=\"External link\" target=\"_blank\" rel=\"noopener\">Infrastructure dashboard</a></li>              <li><a href=\"/stats/\">Statistics</a></li>              <li><a href=\"/trademarks/\">Logos & trademarks</a></li>              <li><a href=\"/sponsors/\">Our sponsors</a></li>            </ul>          </nav>        </div>        <div class=\"footer__menu\">          <h2>Contributing to PyPI</h2>          <nav aria-label=\"How to contribute navigation\">            <ul>              <li><a href=\"/help/#feedback\">Bugs and feedback</a></li>              <li><a href=\"https://github.com/pypi/warehouse\" title=\"External link\" target=\"_blank\" rel=\"noopener\">Contribute on GitHub</a></li>              <li><a href=\"https://hosted.weblate.org/projects/pypa/warehouse/\" title=\"External link\" target=\"_blank\" rel=\"noopener\">Translate PyPI</a></li>              <li><a href=\"/sponsors/\">Sponsor PyPI</a></li>              <li><a href=\"https://github.com/pypi/warehouse/graphs/contributors\" title=\"External link\" target=\"_blank\" rel=\"noopener\">Development credits</a></li>            </ul>          </nav>        </div>        <div class=\"footer__menu\">          <h2>Using PyPI</h2>          <nav aria-label=\"Using PyPI navigation\">            <ul>              <li><a href=\"https://github.com/pypa/.github/blob/main/CODE_OF_CONDUCT.md\" title=\"External link\" target=\"_blank\" rel=\"noopener\">Code of conduct</a></li>              <li><a href=\"/security/\">Report security issue</a></li>              <li><a href=\"https://www.python.org/privacy/\" title=\"External link\" target=\"_blank\" rel=\"noopener\">Privacy policy</a></li>              <li><a href=\"/policy/terms-of-use/\">Terms of use</a></li>              <li><a href=\"/policy/acceptable-use-policy/\">Acceptable Use Policy</a></li>            </ul>          </nav>        </div>      </div>      <hr class=\"footer__divider\">      <div class=\"footer__text\">        <p>Status:<a href=\"https://status.python.org/\" title=\"External link\" target=\"_blank\" rel=\"noopener\">          <span data-statuspage-domain=\"https://2p66nmmycsj3.statuspage.io\">all systems operational</span></a>        </p>        <p>Developed and maintained by the Python community, for the Python community.          <br>          <a href=\"https://donate.pypi.org\">Donate today!</a>        </p>        <p>          \"PyPI\", \"Python Package Index\", and the blocks logos are registered <a href=\"/trademarks/\">trademarks</a> of the <a href=\"https://python.org/psf-landing\" target=\"_blank\" rel=\"noopener\">Python Software Foundation</a>.<br>        </p>        <p>          \u00a9 2024 <a href=\"https://www.python.org/psf-landing/\" title=\"External link\" target=\"_blank\" rel=\"noopener\">Python Software Foundation</a><br>          <a href=\"/sitemap/\">Site map</a>        </p>      </div>      <div class=\"centered hide-on-desktop\">        <button type=\"button\" class=\"button button--switch-to-desktop hidden\" data-viewport-toggle-target=\"switchToDesktop\" data-action=\"viewport-toggle#switchToDesktop\">Switch to desktop version        </button>      </div>    </footer>    <div class=\"language-switcher\">      <form action=\"/locale/\">        <ul>          <li>            <button              class=\"language-switcher__selected\"              name=\"locale_id\" value=\"en\" type=\"submit\"            >              English            </button>          </li>          <li>            <button              name=\"locale_id\" value=\"es\" type=\"submit\"            >              espa\u00f1ol            </button>          </li>          <li>            <button              name=\"locale_id\" value=\"fr\" type=\"submit\"            >              fran\u00e7ais            </button>          </li>          <li>            <button              name=\"locale_id\" value=\"ja\" type=\"submit\"            >              \u65e5\u672c\u8a9e            </button>          </li>          <li>            <button              name=\"locale_id\" value=\"pt_BR\" type=\"submit\"            >              portugu\u00eas (Brasil)            </button>          </li>          <li>            <button              name=\"locale_id\" value=\"uk\" type=\"submit\"            >              \u0443\u043a\u0440\u0430\u0457\u043d\u0441\u044c\u043a\u0430            </button>          </li>          <li>            <button              name=\"locale_id\" value=\"el\" type=\"submit\"            >              \u0395\u03bb\u03bb\u03b7\u03bd\u03b9\u03ba\u03ac            </button>          </li>          <li>            <button              name=\"locale_id\" value=\"de\" type=\"submit\"            >              Deutsch            </button>          </li>          <li>            <button              name=\"locale_id\" value=\"zh_Hans\" type=\"submit\"            >              \u4e2d\u6587 (\u7b80\u4f53)            </button>          </li>          <li>            <button              name=\"locale_id\" value=\"zh_Hant\" type=\"submit\"            >              \u4e2d\u6587 (\u7e41\u9ad4)            </button>          </li>          <li>            <button              name=\"locale_id\" value=\"ru\" type=\"submit\"            >              \u0440\u0443\u0441\u0441\u043a\u0438\u0439            </button>          </li>          <li>            <button              name=\"locale_id\" value=\"he\" type=\"submit\"            >              \u05e2\u05d1\u05e8\u05d9\u05ea            </button>          </li>          <li>            <button              name=\"locale_id\" value=\"eo\" type=\"submit\"            >              esperanto            </button>          </li>        </ul>      </form>    </div><div class=\"sponsors\">  <p class=\"sponsors__title\">Supported by</p>  <div class=\"sponsors__divider\"></div>        <a class=\"sponsors__sponsor\" target=\"_blank\" rel=\"noopener\" href=\"https://aws.amazon.com/\">          <img class=sponsors__image src=\"https://pypi-camo.freetls.fastly.net/ed7074cadad1a06f56bc520ad9bd3e00d0704c5b/68747470733a2f2f73746f726167652e676f6f676c65617069732e636f6d2f707970692d6173736574732f73706f6e736f726c6f676f732f6177732d77686974652d6c6f676f2d7443615473387a432e706e67\" alt=AWS loading=lazy>          <span class=\"sponsors__name\">AWS</span>          <span class=\"sponsors__service\">            Cloud computing and Security Sponsor          </span>        </a>        <a class=\"sponsors__sponsor\" target=\"_blank\" rel=\"noopener\" href=\"https://www.datadoghq.com/\">          <img class=sponsors__image src=\"https://pypi-camo.freetls.fastly.net/8855f7c063a3bdb5b0ce8d91bfc50cf851cc5c51/68747470733a2f2f73746f726167652e676f6f676c65617069732e636f6d2f707970692d6173736574732f73706f6e736f726c6f676f732f64617461646f672d77686974652d6c6f676f2d6668644c4e666c6f2e706e67\" alt=Datadog loading=lazy>          <span class=\"sponsors__name\">Datadog</span>          <span class=\"sponsors__service\">            Monitoring          </span>        </a>        <a class=\"sponsors__sponsor\" target=\"_blank\" rel=\"noopener\" href=\"https://www.fastly.com/\">          <img class=sponsors__image src=\"https://pypi-camo.freetls.fastly.net/df6fe8829cbff2d7f668d98571df1fd011f36192/68747470733a2f2f73746f726167652e676f6f676c65617069732e636f6d2f707970692d6173736574732f73706f6e736f726c6f676f732f666173746c792d77686974652d6c6f676f2d65684d3077735f6f2e706e67\" alt=Fastly loading=lazy>          <span class=\"sponsors__name\">Fastly</span>          <span class=\"sponsors__service\">            CDN          </span>        </a>        <a class=\"sponsors__sponsor\" target=\"_blank\" rel=\"noopener\" href=\"https://careers.google.com/\">          <img class=sponsors__image src=\"https://pypi-camo.freetls.fastly.net/420cc8cf360bac879e24c923b2f50ba7d1314fb0/68747470733a2f2f73746f726167652e676f6f676c65617069732e636f6d2f707970692d6173736574732f73706f6e736f726c6f676f732f676f6f676c652d77686974652d6c6f676f2d616734424e3774332e706e67\" alt=Google loading=lazy>          <span class=\"sponsors__name\">Google</span>          <span class=\"sponsors__service\">            Download Analytics          </span>        </a>        <a class=\"sponsors__sponsor\" target=\"_blank\" rel=\"noopener\" href=\"https://www.python.org/psf/sponsors/#microsoft\">          <img class=sponsors__image src=\"https://pypi-camo.freetls.fastly.net/524d1ce72f7772294ca4c1fe05d21dec8fa3f8ea/68747470733a2f2f73746f726167652e676f6f676c65617069732e636f6d2f707970692d6173736574732f73706f6e736f726c6f676f732f6d6963726f736f66742d77686974652d6c6f676f2d5a443172685444462e706e67\" alt=Microsoft loading=lazy>          <span class=\"sponsors__name\">Microsoft</span>          <span class=\"sponsors__service\">            PSF Sponsor          </span>        </a>        <a class=\"sponsors__sponsor\" target=\"_blank\" rel=\"noopener\" href=\"https://www.pingdom.com/\">          <img class=sponsors__image src=\"https://pypi-camo.freetls.fastly.net/d01053c02f3a626b73ffcb06b96367fdbbf9e230/68747470733a2f2f73746f726167652e676f6f676c65617069732e636f6d2f707970692d6173736574732f73706f6e736f726c6f676f732f70696e67646f6d2d77686974652d6c6f676f2d67355831547546362e706e67\" alt=Pingdom loading=lazy>          <span class=\"sponsors__name\">Pingdom</span>          <span class=\"sponsors__service\">            Monitoring          </span>        </a>        <a class=\"sponsors__sponsor\" target=\"_blank\" rel=\"noopener\" href=\"https://getsentry.com/for/python\">          <img class=sponsors__image src=\"https://pypi-camo.freetls.fastly.net/67af7117035e2345bacb5a82e9aa8b5b3e70701d/68747470733a2f2f73746f726167652e676f6f676c65617069732e636f6d2f707970692d6173736574732f73706f6e736f726c6f676f732f73656e7472792d77686974652d6c6f676f2d4a2d6b64742d706e2e706e67\" alt=Sentry loading=lazy>          <span class=\"sponsors__name\">Sentry</span>          <span class=\"sponsors__service\">            Error logging          </span>        </a>        <a class=\"sponsors__sponsor\" target=\"_blank\" rel=\"noopener\" href=\"https://statuspage.io\">          <img class=sponsors__image src=\"https://pypi-camo.freetls.fastly.net/b611884ff90435a0575dbab7d9b0d3e60f136466/68747470733a2f2f73746f726167652e676f6f676c65617069732e636f6d2f707970692d6173736574732f73706f6e736f726c6f676f732f737461747573706167652d77686974652d6c6f676f2d5467476c6a4a2d502e706e67\" alt=StatusPage loading=lazy>          <span class=\"sponsors__name\">StatusPage</span>          <span class=\"sponsors__service\">            Status page          </span>        </a></div>  </body></html>",
  "embeddings": []
}
{
  "libtype": "pypi",
  "libname": "kahypar",
  "url": "https://www.kahypar.org",
  "html": "<!DOCTYPE html><html lang=\"en-US\">  <head>    <!-- Global site tag (gtag.js) - Google Analytics -->    <script async src=\"https://www.googletagmanager.com/gtag/js?id=UA-117423443-1\"></script>    <script>      window.dataLayer = window.dataLayer || [];      function gtag(){dataLayer.push(arguments);}      gtag('js', new Date());      gtag('config', 'UA-117423443-1');    </script>    <meta charset=\"UTF-8\">    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"><!-- Begin Jekyll SEO tag v2.8.0 --><title>KaHyPar - Karlsruhe Hypergraph Partitioning | KaHyPar is a multilevel hypergraph partitioning framework providing direct k-way and recursive bisection based partitioning algorithms that compute solutions of very high quality.</title><meta name=\"generator\" content=\"Jekyll v3.9.3\" /><meta property=\"og:title\" content=\"KaHyPar - Karlsruhe Hypergraph Partitioning\" /><meta name=\"author\" content=\"Sebastian Schlag\" /><meta property=\"og:locale\" content=\"en_US\" /><meta name=\"description\" content=\"KaHyPar is a multilevel hypergraph partitioning framework providing direct k-way and recursive bisection based partitioning algorithms that compute solutions of very high quality.\" /><meta property=\"og:description\" content=\"KaHyPar is a multilevel hypergraph partitioning framework providing direct k-way and recursive bisection based partitioning algorithms that compute solutions of very high quality.\" /><link rel=\"canonical\" href=\"https://kahypar.org/\" /><meta property=\"og:url\" content=\"https://kahypar.org/\" /><meta property=\"og:site_name\" content=\"KaHyPar - Karlsruhe Hypergraph Partitioning\" /><meta property=\"og:type\" content=\"website\" /><meta name=\"twitter:card\" content=\"summary\" /><meta property=\"twitter:title\" content=\"KaHyPar - Karlsruhe Hypergraph Partitioning\" /><meta name=\"google-site-verification\" content=\"2cEH9AhrJ-QdTWqpK9dKNvuPsSASwfxL2rU3hLeUe0o\" /><script type=\"application/ld+json\">{\"@context\":\"https://schema.org\",\"@type\":\"WebSite\",\"author\":{\"@type\":\"Person\",\"name\":\"Sebastian Schlag\"},\"description\":\"KaHyPar is a multilevel hypergraph partitioning framework providing direct k-way and recursive bisection based partitioning algorithms that compute solutions of very high quality.\",\"headline\":\"KaHyPar - Karlsruhe Hypergraph Partitioning\",\"name\":\"Sebastian Schlag\",\"sameAs\":[\"https://www.linkedin.com/in/SebastianSchlag\",\"https://github.com/SebastianSchlag\",\"https://algo2.iti.kit.edu/sebastian.schlag.php\",\"http://www.sebastianschlag.de/\"],\"url\":\"https://kahypar.org/\"}</script><!-- End Jekyll SEO tag -->    <link rel=\"stylesheet\" href=\"/assets/css/style.css?v=fcc9bda7c803d1440022c32e0a20b8da8d03d76a\">    <!--[if lt IE 9]>    <script src=\"//cdnjs.cloudflare.com/ajax/libs/html5shiv/3.7.3/html5shiv.min.js\"></script>    <![endif]-->  </head>  <body>    <div class=\"wrapper\">      <header>        <h1><a href=\"https://kahypar.org/\">High-Quality Multilevel Hypergraph Partitioning</a></h1>                        <p>KaHyPar is a multilevel hypergraph partitioning framework providing direct k-way and recursive bisection based partitioning algorithms that compute solutions of very high quality.</p>                <p class=\"view\"><a href=\"https://github.com/kahypar/kahypar\">View the Project on GitHub <small>kahypar/kahypar</small></a></p>                              </header>      <section>          <p align=\"center\"><img src=\"https://user-images.githubusercontent.com/484403/70459249-0fd0d080-1ab4-11ea-833b-17130ecafc0a.png\" alt=\"KaHyPar - Karlsruhe Hypergraph Partitioning\" width=\"60%\" height=\"60%\" /></p><table>  <thead>    <tr>      <th style=\"text-align: center\">License</th>      <th style=\"text-align: center\">Fossa</th>      <th style=\"text-align: center\">Zenodo</th>    </tr>  </thead>  <tbody>    <tr>      <td style=\"text-align: center\"><a href=\"http://www.gnu.org/licenses/gpl-3.0\"><img src=\"https://img.shields.io/badge/License-GPL%20v3-blue.svg\" alt=\"License: GPL v3\" /></a></td>      <td style=\"text-align: center\"><a href=\"https://app.fossa.com/projects/git%2Bgithub.com%2FSebastianSchlag%2Fkahypar?ref=badge_small\"><img src=\"https://app.fossa.com/api/projects/git%2Bgithub.com%2FSebastianSchlag%2Fkahypar.svg?type=small\" alt=\"FOSSA Status\" /></a></td>      <td style=\"text-align: center\"><a href=\"https://doi.org/10.5281/zenodo.4500838\"><img src=\"https://zenodo.org/badge/DOI/10.5281/zenodo.4500838.svg\" alt=\"DOI\" /></a></td>    </tr>  </tbody></table><table>  <thead>    <tr>      <th style=\"text-align: center\">Linux &amp; macOS Build</th>      <th style=\"text-align: center\">Code Coverage</th>      <th style=\"text-align: center\">Code Quality</th>      <th style=\"text-align: center\">Coverity Scan</th>      <th style=\"text-align: center\">Issues</th>    </tr>  </thead>  <tbody>    <tr>      <td style=\"text-align: center\"><a href=\"https://github.com/kahypar/kahypar/actions/workflows/kahypar_ci.yml\"><img src=\"https://github.com/kahypar/kahypar/actions/workflows/kahypar_ci.yml/badge.svg\" alt=\"Build Status\" /></a></td>      <td style=\"text-align: center\"><a href=\"https://codecov.io/gh/kahypar/kahypar\"><img src=\"https://codecov.io/gh/kahypar/kahypar/branch/master/graph/badge.svg\" alt=\"codecov\" /></a></td>      <td style=\"text-align: center\"><a href=\"https://www.codacy.com/gh/kahypar/kahypar/dashboard?utm_source=github.com&amp;utm_medium=referral&amp;utm_content=kahypar/kahypar&amp;utm_campaign=Badge_Grade\"><img src=\"https://app.codacy.com/project/badge/Grade/93f46f4897c14ad280ed72d460f85c49\" alt=\"Codacy Badge\" /></a></td>      <td style=\"text-align: center\"><a href=\"https://scan.coverity.com/projects/11452/badge.svg\"><img src=\"https://scan.coverity.com/projects/11452/badge.svg\" alt=\"Coverity Status\" /></a></td>      <td style=\"text-align: center\"><a href=\"http://isitmaintained.com/project/sebastianschlag/kahypar\" title=\"Average time to resolve an issue\"><img src=\"http://isitmaintained.com/badge/resolution/sebastianschlag/kahypar.svg\" alt=\"Average time to resolve an issue\" /></a></td>    </tr>  </tbody></table><h2 id=\"table-of-contents\">Table of Contents</h2><ul>  <li><a href=\"#what-is-a-hypergraph-what-is-hypergraph-partitioning\">What is a Hypergraph? What is Hypergraph Partitioning?</a></li>  <li><a href=\"#what-is-kahypar\">What is KaHyPar?</a>    <ul>      <li><a href=\"#additional-features\">Additional Features</a></li>      <li><a href=\"#experimental-results\">Experimental Results</a></li>      <li><a href=\"#additional-resources\">Additional Resources</a></li>      <li><a href=\"#projects-using-kahypar\">Projects using KaHyPar</a></li>    </ul>  </li>  <li><a href=\"#requirements\">Requirements</a></li>  <li><a href=\"#building-kahypar\">Building KaHyPar</a></li>  <li><a href=\"#testing-and-profiling\">Testing and Profiling</a></li>  <li><a href=\"#running-kahypar\">Running KaHyPar</a></li>  <li><a href=\"#using-the-library-interfaces\">Using the Library Interfaces</a>    <ul>      <li><a href=\"#the-c-style-interface\">The C-Style Interface</a></li>      <li><a href=\"#the-python-interface\">The Python Interface</a></li>      <li><a href=\"#the-julia-interface\">The Julia Interface</a></li>      <li><a href=\"#the-java-interface\">The Java Interface</a></li>    </ul>  </li>  <li><a href=\"#bug-reports\">Bug Reports</a></li>  <li><a href=\"#licensing\">Licensing</a></li>  <li><a href=\"#contributing\">Contributing</a></li></ul><h2 id=\"what-is-a-hypergraph-what-is-hypergraph-partitioning\">What is a Hypergraph? What is Hypergraph Partitioning?</h2><p><a href=\"https://en.wikipedia.org/wiki/Hypergraph\" title=\"Hypergraphs\">Hypergraphs</a> are a generalization of graphs, where each (hyper)edge (also called net) canconnect more than two vertices. The <em>k</em>-way hypergraph partitioning problem is the generalization of the well-known <a href=\"https://en.wikipedia.org/wiki/Graph_partition\">graph partitioning</a> problem: partition the vertex set into <em>k</em> disjointblocks of bounded size (at most 1 + \u03b5 times the average block size), while minimizing anobjective function defined on the nets.</p><p>The two most prominent objective functions are the cut-net and the connectivity (or \u03bb \u2212 1)metrics. Cut-net is a straightforward generalization of the edge-cut objective in graph partitioning(i.e., minimizing the sum of the weights of those nets that connect more than one block). Theconnectivity metric additionally takes into account the actual number \u03bb of blocks connected by anet. By summing the (\u03bb \u2212 1)-values of all nets, one accurately models the total communicationvolume of parallel sparse matrix-vector multiplication and once more gets a metric that revertsto edge-cut for plain graphs.</p><p><img src=\"https://cloud.githubusercontent.com/assets/484403/25314222/3a3bdbda-2840-11e7-9961-3bbc59b59177.png\" alt=\"alt text\" width=\"50%\" height=\"50%\" /><img src=\"https://cloud.githubusercontent.com/assets/484403/25314225/3e061e42-2840-11e7-860c-028a345d1641.png\" alt=\"alt text\" width=\"50%\" height=\"50%\" /></p><h2 id=\"what-is-kahypar\">What is KaHyPar?</h2><p>KaHyPar is a multilevel hypergraph partitioning framework for optimizing the cut- and the(\u03bb \u2212 1)-metric. It supports both <em>recursive bisection</em> and <em>direct k-way</em> partitioning.As a multilevel algorithm, it consist of three phases: In the <em>coarsening phase</em>, thehypergraph is coarsened to obtain a hierarchy of smaller hypergraphs. After applying an<em>initial partitioning</em> algorithm to the smallest hypergraph in the second phase, coarsening isundone and, at each level, a <em>local search</em> method is used to improve the partition induced bythe coarser level. KaHyPar instantiates the multilevel approach in its most extreme version,removing only a single vertex in every level of the hierarchy.By using this very fine grained <em>n</em>-level approach combined with strong local search heuristics,it computes solutions of very high quality.Its algorithms and detailed experimental results are presented in several <a href=\"https://github.com/kahypar/research-publications\" title=\"KaHyPar Publications\">research publications</a>.</p><h3 id=\"additional-features\">Additional Features</h3><ul>  <li><strong>Hypergraph partitioning with variable block weights</strong></li></ul> KaHyPar has support for variable block weights. If command line option <code class=\"language-plaintext highlighter-rouge\">--use-individual-part-weights=true</code> is used, the partitioner tries to partition the hypergraph such that each block Vx has a weight of at most Bx, where Bx can be specified for each block individually using the command line parameter <code class=\"language-plaintext highlighter-rouge\">--part-weights= B1 B2 B3 ... Bk-1</code>. Since the framework does not yet support perfectly balanced partitioning, upper bounds need to be slightly larger than the total weight of all vertices of the hypergraph. Note that this feature is still experimental.<ul>  <li>    <p><strong>Hypergraph partitioning with fixed vertices</strong></p>    <p>Hypergraph partitioning with fixed vertices is a variation of standard hypergraph partitioning. In this problem, there is an additional constraint on the block assignment of some vertices, i.e., some vertices are preassigned to specific blocks prior to partitioning with the condition that, after partitioning the remaining \u201cfree\u201d vertices, the fixed vertices are still in the block that they were assigned to. The command line parameter <code class=\"language-plaintext highlighter-rouge\">--fixed / -f</code> can be used to specify a fix file in <a href=\"http://glaros.dtc.umn.edu/gkhome/fetch/sw/hmetis/manual.pdf\">hMetis fix file format</a>. For a hypergraph with V vertices, the fix file consists of V lines - one for each vertex. The <em>i</em>th line either contains <code class=\"language-plaintext highlighter-rouge\">-1</code> to indicate that the vertex is free to move or <code class=\"language-plaintext highlighter-rouge\">&lt;part id&gt;</code> to indicate that this vertex should be preassigned to block <code class=\"language-plaintext highlighter-rouge\">&lt;part id&gt;</code>. Note that part ids start from 0.</p>    <p>KaHyPar currently supports three different contraction policies for partitioning with fixed vertices:</p>    <ol>      <li><code class=\"language-plaintext highlighter-rouge\">free_vertex_only</code> allows all contractions in which the contraction partner is a <em>free</em> vertex, i.e., it allows contractions of vertex pairs where either both vertices are free, or one vertex is fixed and the other vertex is free.</li>      <li><code class=\"language-plaintext highlighter-rouge\">fixed_vertex_allowed</code> additionally allows contractions of two fixed vertices provided that both are preassigned to the <em>same</em> block. Based on preliminary experiments, this is currently the default policy.</li>      <li><code class=\"language-plaintext highlighter-rouge\">equivalent_vertices</code> only allows contractions of vertex pairs that consist of either two free vertices or two fixed vertices preassigned to the same block.</li>    </ol>  </li>  <li>    <p><strong>Evolutionary framework (KaHyPar-E)</strong></p>    <p>KaHyPar-E enhances KaHyPar with an evolutionary framework as described in our <a href=\"https://dl.acm.org/citation.cfm?id=3205475\">GECCO\u201918 publication</a>. Given a fairly large amount of running time, this memetic multilevel algorithm performs better than repeated executions of nonevolutionary KaHyPar configurations, hMetis, and PaToH. The command line parameter <code class=\"language-plaintext highlighter-rouge\">--time-limit=xxx</code> can be used to set the maximum running time (in seconds). Parameter <code class=\"language-plaintext highlighter-rouge\">--partition-evolutionary=true</code> enables evolutionary partitioning.</p>  </li>  <li>    <p><strong>Improving existing partitions</strong></p>    <p>KaHyPar uses direct k-way V-cycles to try to improve an existing partition specified via parameter <code class=\"language-plaintext highlighter-rouge\">--part-file=&lt;/path/to/file&gt;</code>. The maximum number of V-cycles can be controlled via parameter <code class=\"language-plaintext highlighter-rouge\">--vcycles=</code>.</p>  </li>  <li>    <p><strong>Partitioning directed acyclic hypergraphs</strong></p>    <p>While the code has not been merged into the main repository yet, there exists a <a href=\"https://github.com/DanielSeemaier/kahypar\">fork</a> that supports acyclic hypergraph partitioning. More details can be found in the corresponding <a href=\"https://epubs.siam.org/doi/abs/10.1137/1.9781611976472.1\">conference publication</a>.</p>  </li></ul><h3 id=\"experimental-results\">Experimental Results</h3><p>We use the <a href=\"https://link.springer.com/article/10.1007/s101070100263\"><em>performance profiles</em></a> to compare KaHyPar to other partitioning algorithms in terms of solution quality.  For a set of <img src=\"https://user-images.githubusercontent.com/484403/80751017-55f10400-8b29-11ea-9d73-be63c0727d39.jpg\" /> algorithms and a benchmark set <img src=\"https://user-images.githubusercontent.com/484403/80751742-a452d280-8b2a-11ea-9f8d-47cbdd9cfccf.jpg\" /> containing <img src=\"https://user-images.githubusercontent.com/484403/80751744-a452d280-8b2a-11ea-9049-5c3fb2d3cc76.jpg\" /> instances, the <em>performance ratio</em> <img src=\"https://user-images.githubusercontent.com/484403/80751746-a4eb6900-8b2a-11ea-8413-ff75bccc2296.jpg\" /> relates the cut computed by  partitioner <em>p</em> for instance <em>i</em> to the smallest minimum cut of <em>all</em> algorithms, i.e.,</p><p align=\"center\"><img src=\"https://user-images.githubusercontent.com/484403/80750749-f09d1300-8b28-11ea-859d-e3b72f543ed1.png\" />. </p><p>The <em>performance profile</em> <img src=\"https://user-images.githubusercontent.com/484403/80751752-a583ff80-8b2a-11ea-8f67-b88625b9e958.jpg\" /> of algorithm <em>p</em> is then given by the function</p><p align=\"center\"><img src=\"https://user-images.githubusercontent.com/484403/80750914-35c14500-8b29-11ea-8e2c-3203b1776a96.jpg\" />.</p><p>For connectivity optimization, the performance ratios are computed using the connectivity values <img src=\"https://user-images.githubusercontent.com/484403/80751741-a3ba3c00-8b2a-11ea-9509-6aafec2ca490.jpg\" /> instead of the cut values.    The value of <img src=\"https://user-images.githubusercontent.com/484403/80751750-a583ff80-8b2a-11ea-8782-3d44ee478d54.png\" /> corresponds to the fraction of instances for which partitioner <em>p</em> computed the best solution, while  <img src=\"https://user-images.githubusercontent.com/484403/80751750-a583ff80-8b2a-11ea-8782-3d44ee478d54.png\" /> is the probability    that a performance ratio <img src=\"https://user-images.githubusercontent.com/484403/80751746-a4eb6900-8b2a-11ea-8413-ff75bccc2296.jpg\" /> is within a factor of <img src=\"https://user-images.githubusercontent.com/484403/80752228-70c47800-8b2b-11ea-99e5-4524298c8620.jpg\" /> of the best possible ratio.    Note that since performance profiles only allow to assess the performance of each algorithm relative to the <em>best</em> algorithm, the <img src=\"https://user-images.githubusercontent.com/484403/80751747-a4eb6900-8b2a-11ea-846f-1265085ad086.jpg\" /> values    cannot be used to rank algorithms (i.e., to determine which algorithm is the second best etc.).</p><p>In our experimental analysis, the performance profile plots are based on the <em>best</em> solutions (i.e., <em>minimum</em> connectivity/cut) each algorithm found for each instance.    Furthermore, we choose parameters <img src=\"https://user-images.githubusercontent.com/484403/80751754-a61c9600-8b2a-11ea-8fdb-3ba461bfe626.jpg\" /> for all <em>p</em>, <em>i</em>, and <img src=\"https://user-images.githubusercontent.com/484403/80751762-a6b52c80-8b2a-11ea-9f6c-8fb9d00130d3.jpg\" /> such that a performance ratio <img src=\"https://user-images.githubusercontent.com/484403/80751756-a61c9600-8b2a-11ea-88fe-22e2bdd511aa.jpg\" /> if and only if algorithm <em>p</em> computed an infeasible solution    for instance <em>i</em>, and <img src=\"https://user-images.githubusercontent.com/484403/80751759-a6b52c80-8b2a-11ea-9cbc-527965565037.jpg\" /> if and only if the algorithm could not compute a solution for instance <em>i</em> within the given time limit. In our performance profile plots, performance ratios corresponding to <em>infeasible</em> solutions will be shown on the x-tick on the <em>x</em>-axis, whileinstances that could not be partitioned within the time limit are shown implicitly by a line that exits the plot below <img src=\"https://user-images.githubusercontent.com/484403/80751768-a7e65980-8b2a-11ea-8a69-54dc47ea9eb7.jpg\" />.    Since the performance ratios are heavily right-skewed, the performance profile plots are divided into three segments with different ranges for parameter <img src=\"https://user-images.githubusercontent.com/484403/80752228-70c47800-8b2b-11ea-99e5-4524298c8620.jpg\" /> to reflect various areas of interest.    The first segment highlights small values (<img src=\"https://user-images.githubusercontent.com/484403/80751766-a74dc300-8b2a-11ea-9b54-8e47cd726181.jpg\" />), while the second segment contains results for all instances    that are up to a factor of <img src=\"https://user-images.githubusercontent.com/484403/80751763-a74dc300-8b2a-11ea-82f6-d1b644119430.jpg\" /> worse than the best possible ratio. The last segment  contains all remaining ratios, i.e., instances for which    some algorithms performed considerably worse than the best algorithm, instances for which algorithms produced infeasible solutions, and instances which could not be partitioned within    the given time limit.</p><p>In the figures, we compare KaHyPar with PaToH in quality (PaToH-Q) and default mode (PaToH-D), the k-way (hMETIS-K) and the recursive bisection variant (hMETIS-R) of hMETIS 2.0 (p1), <a href=\"https://github.com/rsln-s/aggregative-coarsening-for-multilevel-hypergraph-partitioning\">Zoltan using algebraic distance-based coarsening</a> (Zoltan-AlgD), <a href=\"http://www.staff.science.uu.nl/~bisse101/Mondriaan/\">Mondriaan v.4.2.1</a> and the recently published <a href=\"https://arxiv.org/abs/1810.11319\">HYPE</a> <a href=\"https://github.com/mayerrn/HYPE\">algorithm</a>.</p><p align=\"center\"><b>Solution Quality</b><img src=\"https://user-images.githubusercontent.com/484403/67393292-65076000-f5a2-11e9-9605-1dcfd768b045.png\" alt=\"Solution Quality\" width=\"100%\" height=\"50%\" /></p><p align=\"center\"><b>Running Time</b><img src=\"https://user-images.githubusercontent.com/484403/67393303-69cc1400-f5a2-11e9-8184-53cf8e5c7cda.png\" alt=\"Running Time\" width=\"100%\" height=\"50%\" /></p><h3 id=\"additional-resources\">Additional Resources</h3><p>We provide additional resources for all KaHyPar-related publications:</p><table>  <thead>    <tr>      <th style=\"text-align: left\">kKaHyPar-SEA20 /<br /> rKaHyPar-SEA20</th>      <th style=\"text-align: left\">SEA\u201920</th>      <th style=\"text-align: center\"><a href=\"https://drops.dagstuhl.de/opus/frontdoor.php?source_opus=12085\">Paper</a></th>      <th style=\"text-align: center\"><a href=\"https://arxiv.org/abs/2003.12110\">TR</a></th>      <th style=\"text-align: center\"><a href=\"http://www.sea2020.dmi.unict.it/SLIDES/Gottesburen.pdf\">Slides</a></th>      <th style=\"text-align: center\"><a href=\"https://github.com/kahypar/experimental-results/tree/master/sea20\">Experimental Results</a></th>    </tr>  </thead>  <tbody>    <tr>      <td style=\"text-align: left\">kKaHyPar /<br /> rKaHyPar</td>      <td style=\"text-align: left\">-</td>      <td style=\"text-align: center\"><a href=\"https://publikationen.bibliothek.kit.edu/1000105953\">Dissertation</a></td>      <td style=\"text-align: center\">-</td>      <td style=\"text-align: center\"><a href=\"http://algo2.iti.kit.edu/download/defense_schlag.pdf\">Slides</a></td>      <td style=\"text-align: center\"><a href=\"https://publikationen.bibliothek.kit.edu/1000105953\">Experimental Results</a></td>    </tr>    <tr>      <td style=\"text-align: left\">KaHyPar-MF /<br /> KaHyPar-R-MF</td>      <td style=\"text-align: left\">SEA\u201918 /<br /> JEA\u201919</td>      <td style=\"text-align: center\"><a href=\"SEA'18\">SEA Paper</a> /<br /> <a href=\"https://dl.acm.org/citation.cfm?doid=3310279.3329872\">JEA Paper</a></td>      <td style=\"text-align: center\"><a href=\"https://arxiv.org/abs/1802.03587\">TR</a></td>      <td style=\"text-align: center\"><a href=\"https://algo2.iti.kit.edu/download/sea18-schlag.pdf\">Slides</a></td>      <td style=\"text-align: center\">Experimental Results:<br /><a href=\"https://algo2.iti.kit.edu/schlag/sea2018/\">SEA</a> / <a href=\"https://algo2.iti.kit.edu/schlag/jea2019/\">JEA</a></td>    </tr>    <tr>      <td style=\"text-align: left\">KaHyPar-E (EvoHGP)</td>      <td style=\"text-align: left\">GECCO\u201918</td>      <td style=\"text-align: center\"><a href=\"https://dl.acm.org/citation.cfm?id=3205475\">Paper</a></td>      <td style=\"text-align: center\"><a href=\"https://arxiv.org/abs/1710.01968\">TR</a></td>      <td style=\"text-align: center\"><a href=\"https://algo2.iti.kit.edu/3506.php\">Slides</a></td>      <td style=\"text-align: center\"><a href=\"http://algo2.iti.kit.edu/schlag/gecco2018/\">Experimental Results</a></td>    </tr>    <tr>      <td style=\"text-align: left\">KaHyPar-CA</td>      <td style=\"text-align: left\">SEA\u201917</td>      <td style=\"text-align: center\"><a href=\"http://drops.dagstuhl.de/opus/volltexte/2017/7622/\">Paper</a></td>      <td style=\"text-align: center\">-</td>      <td style=\"text-align: center\"><a href=\"http://algo2.iti.kit.edu/sea17schlag.php\">Slides</a></td>      <td style=\"text-align: center\"><a href=\"https://algo2.iti.kit.edu/schlag/sea2017/\">Experimental Results</a></td>    </tr>    <tr>      <td style=\"text-align: left\">KaHyPar-K</td>      <td style=\"text-align: left\">ALENEX\u201917</td>      <td style=\"text-align: center\"><a href=\"http://epubs.siam.org/doi/abs/10.1137/1.9781611974768.3\">Paper</a></td>      <td style=\"text-align: center\">-</td>      <td style=\"text-align: center\"><a href=\"http://algo2.iti.kit.edu/3214.php\">Slides</a></td>      <td style=\"text-align: center\"><a href=\"https://algo2.iti.kit.edu/schlag/alenex2017/\">Experimental Results</a></td>    </tr>    <tr>      <td style=\"text-align: left\">KaHyPar-R</td>      <td style=\"text-align: left\">ALENEX\u201916</td>      <td style=\"text-align: center\"><a href=\"http://epubs.siam.org/doi/abs/10.1137/1.9781611974317.5\">Paper</a></td>      <td style=\"text-align: center\"><a href=\"https://arxiv.org/abs/1511.03137\">TR</a></td>      <td style=\"text-align: center\"><a href=\"http://algo2.iti.kit.edu/3034.php\">Slides</a></td>      <td style=\"text-align: center\"><a href=\"https://doi.org/10.5281/zenodo.30176\">Experimental Results</a></td>    </tr>  </tbody></table><h3 id=\"projects-using-kahypar\">Projects using KaHyPar</h3><ul>  <li><a href=\"https://github.com/jcmgray/cotengra\"><strong>CoTenGra</strong> - Hyper-optimized Contraction Trees for Large Tensor Networks</a></li>  <li><a href=\"https://github.com/LNIS-Projects/LSOracle\"><strong>LSOracle</strong> - The Logic Synthesis Oracle</a></li>  <li><a href=\"https://github.com/zavalab/Plasmo.jl\"><strong>Plasmo.jl</strong> - Platform for Scalable Modeling and Optimization</a></li>  <li><a href=\"https://github.com/yhtang/GraphDot\"><strong>GraphDot</strong> - A GPU-accelerated Python library for graph similarity computation</a></li>  <li><a href=\"https://github.com/alibaba/acqdp\"><strong>ACQDP</strong> - Alibaba Cloud Quantum Development Platform</a></li>  <li><a href=\"https://github.com/phineasng/DECODE\"><strong>DECODE</strong> - A Computational Pipeline for discovering TCR Binding Rules</a></li>  <li><a href=\"https://github.com/nasa/hybridq\"><strong>HybridQ</strong> - A Hybrid Simulator for Quantum Circuits</a></li>  <li><a href=\"https://github.com/c0waro1/ClusterEnsembles\"><strong>ClusterEnsembles</strong> - Consensus Clustering</a></li>  <li><a href=\"https://github.com/tencent-quantum-lab/tensorcircuit\"><strong>TensorCircuit</strong> - Quantum Circuit Simulator</a></li>  <li><a href=\"https://github.com/Fanerst/simulate_sycamore\"><strong>simulate_symacore</strong> - Simulation of the Sycamore quantum supremacy circuit</a></li>  <li><a href=\"https://github.com/PennyLaneAI/qml\"><strong>QML</strong> - PennyLane Quantum Machine Learning Demos</a></li></ul><h2 id=\"requirements\">Requirements</h2><p>The Karlsruhe Hypergraph Partitioning Framework requires:</p><ul>  <li>A 64-bit operating system. Linux, Mac OS X and Windows (through the Windows Subsystem for Linux) are currently supported.</li>  <li>A modern, <img src=\"https://img.shields.io/badge/C++-17-blue.svg?style=flat\" alt=\"C++14\" />-ready compiler such as <code class=\"language-plaintext highlighter-rouge\">g++</code> version 9 or higher or <code class=\"language-plaintext highlighter-rouge\">clang</code> version 11.0.3 or higher.</li>  <li>The <a href=\"http://www.cmake.org/\" title=\"CMake tool\">cmake</a> build system.</li>  <li>The <a href=\"http://www.boost.org/doc/libs/1_58_0/doc/html/program_options.html\">Boost.Program_options</a> library and the boost header files. If you don\u2019t want to install boost yourself, you can add the <code class=\"language-plaintext highlighter-rouge\">-DKAHYPAR_USE_MINIMAL_BOOST=ON</code> flag to the cmake command to download, extract, and build the necessary dependencies automatically.</li></ul><h2 id=\"building-kahypar\">Building KaHyPar</h2><ol>  <li>    <p>Clone the repository including submodules:</p>    <p><code class=\"language-plaintext highlighter-rouge\">git clone --depth=1 --recursive git@github.com:SebastianSchlag/kahypar.git</code></p>  </li>  <li>Create a build directory: <code class=\"language-plaintext highlighter-rouge\">mkdir build &amp;&amp; cd build</code></li>  <li>Run cmake: <code class=\"language-plaintext highlighter-rouge\">cmake .. -DCMAKE_BUILD_TYPE=RELEASE</code></li>  <li>Run make: <code class=\"language-plaintext highlighter-rouge\">make</code></li></ol><h2 id=\"testing-and-profiling\">Testing and Profiling</h2><p>Tests are automatically executed while project is built. Additionally a <code class=\"language-plaintext highlighter-rouge\">test</code> target is provided.End-to-end integration tests can be started with: <code class=\"language-plaintext highlighter-rouge\">make integration_tests</code>. Profiling can be enabled via cmake flag: <code class=\"language-plaintext highlighter-rouge\">-DENABLE_PROFILE=ON</code>.</p><h2 id=\"running-kahypar\">Running KaHyPar</h2><p>The standalone program can be built via <code class=\"language-plaintext highlighter-rouge\">make KaHyPar</code>. The binary will be located at: <code class=\"language-plaintext highlighter-rouge\">build/kahypar/application/</code>.</p><p>KaHyPar has several configuration parameters. For a list of all possible parameters please run: <code class=\"language-plaintext highlighter-rouge\">./KaHyPar --help</code>.We use the <a href=\"http://glaros.dtc.umn.edu/gkhome/fetch/sw/hmetis/manual.pdf\">hMetis format</a> for the input hypergraph file as well as the partition output file.</p><p>The command line parameter <code class=\"language-plaintext highlighter-rouge\">--quiet=1</code> can be used to suppress all logging output. If you are using the library interfaces, adding <code class=\"language-plaintext highlighter-rouge\">quiet=1</code> to the corresponding .ini configuration file has the same effect.</p><h4 id=\"default--most-recent-presets\">Default / Most Recent Presets</h4><p>We provide two default framework configurations - one for recursive bipartitioning (<em>r</em>KaHyPar) and one fordirect k-way partitioning (<em>k</em>KaHyPar).</p><p>In general, we recommend using <em>k</em>KaHyPar as it performs better than <em>r</em>KaHyPar in terms of both running time and solution quality.</p><p>To start <strong><em>k</em>KaHyPar</strong> optimizing the <strong>(connectivity - 1)</strong> objective run:</p><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>./KaHyPar -h &lt;path-to-hgr&gt; -k &lt;# blocks&gt; -e &lt;imbalance (e.g. 0.03)&gt; -o km1 -m direct -p ../../../config/km1_kKaHyPar_sea20.ini</code></pre></div></div><p>To start <strong><em>k</em>KaHyPar</strong> optimizing the <strong>cut net</strong> objective run:</p><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>./KaHyPar -h &lt;path-to-hgr&gt; -k &lt;# blocks&gt; -e &lt;imbalance (e.g. 0.03)&gt; -o cut -m direct -p ../../../config/cut_kKaHyPar_sea20.ini</code></pre></div></div><p>To start <strong><em>r</em>KaHyPar</strong> optimizing the <strong>(connectivity - 1)</strong> objective run:</p><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>./KaHyPar -h &lt;path-to-hgr&gt; -k &lt;# blocks&gt; -e &lt;imbalance (e.g. 0.03)&gt; -o km1 -m recursive -p ../../../config/km1_rKaHyPar_sea20.ini</code></pre></div></div><p>To start <strong><em>r</em>KaHyPar</strong> optimizing the <strong>cut net</strong> objective run:</p><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>./KaHyPar -h &lt;path-to-hgr&gt; -k &lt;# blocks&gt; -e &lt;imbalance (e.g. 0.03)&gt; -o cut -m recursive -p ../../../config/cut_rKaHyPar_sea20.ini</code></pre></div></div><p>To start the <strong>memetic</strong> algorithm <strong><em>k</em>KaHyPar-E</strong> optimizing the (connectivity - 1) objective run:</p><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>./KaHyPar -h &lt;path-to-hgr&gt; -k &lt;# blocks&gt; -e &lt;imbalance (e.g. 0.03)&gt; -o km1 -m direct -p ../../../config/km1_kKaHyPar-E_sea20.ini</code></pre></div></div><h4 id=\"old-presets\">Old Presets</h4><p>Additionally, we provide different presets that correspond to the configurations used in the publications at<a href=\"http://epubs.siam.org/doi/abs/10.1137/1.9781611974317.5\">ALENEX\u201916</a>, <a href=\"http://epubs.siam.org/doi/abs/10.1137/1.9781611974768.3\">ALENEX\u201917</a>, <a href=\"http://drops.dagstuhl.de/opus/volltexte/2017/7622/\">SEA\u201917</a>, <a href=\"http://drops.dagstuhl.de/opus/volltexte/2018/8936/\">SEA\u201918</a>, <a href=\"https://dl.acm.org/citation.cfm?id=3205475\">GECCO\u201918</a>, as well asin our <a href=\"https://dl.acm.org/citation.cfm?doid=3310279.3329872\">JEA journal paper</a> and in the <a href=\"https://publikationen.bibliothek.kit.edu/1000105953\">dissertation</a> of Sebastian Schlag. These configurations are located in the <a href=\"https://github.com/SebastianSchlag/kahypar/tree/master/config/old_reference_configs\">config/old_reference_configs</a> folder. In order to use these configurations, youhave to checkout <a href=\"https://github.com/SebastianSchlag/kahypar/releases/tag/1.1.0\">KaHyPar release 1.1.0</a>, since some old code as been removed in the most current release.</p><p>To start KaHyPar-MF (using <em>flow-based refinement</em>) optimizing the (connectivity - 1) objective using direct k-way mode run:</p><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>./KaHyPar -h &lt;path-to-hgr&gt; -k &lt;# blocks&gt; -e &lt;imbalance (e.g. 0.03)&gt; -o km1 -m direct -p ../../../config/old_reference_configs/km1_kahypar_mf_jea19.ini</code></pre></div></div><p>To start KaHyPar-MF (using <em>flow-based refinement</em>) optimizing the cut-net objective using direct k-way mode run:</p><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>./KaHyPar -h &lt;path-to-hgr&gt; -k &lt;# blocks&gt; -e &lt;imbalance (e.g. 0.03)&gt; -o cut -m direct -p ../../../config/old_reference_configs/cut_kahypar_mf_jea19.ini</code></pre></div></div><p>To start EvoHGP/KaHyPar-E optimizing the (connectivity - 1) objective using direct k-way mode run</p><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code> ./KaHyPar -h &lt;path-to-hgr&gt; -k &lt;# blocks&gt; -e &lt;imbalance (e.g. 0.03)&gt; -o km1 -m direct -p ../../../config/old_reference_configs/km1_direct_kway_gecco18.ini</code></pre></div></div><p>Note that the configuration <code class=\"language-plaintext highlighter-rouge\">km1_direct_kway_gecco18.ini</code> is based on KaHyPar-CA. However, KaHyPar-E also works with flow-based local improvements. In our JEA publication the <code class=\"language-plaintext highlighter-rouge\">km1_kahypar_e_mf_jea19.ini</code> configuration was used.</p><p>To start KaHyPar-CA (using <em>community-aware coarsening</em>) optimizing the (connectivity - 1) objective using direct k-way mode run:</p><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>./KaHyPar -h &lt;path-to-hgr&gt; -k &lt;# blocks&gt; -e &lt;imbalance (e.g. 0.03)&gt; -o km1 -m direct -p ../../../config/old_reference_configs/km1_direct_kway_sea17.ini</code></pre></div></div><p>To start KaHyPar in direct k-way mode (KaHyPar-K) optimizing the (connectivity - 1) objective run:</p><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>./KaHyPar -h &lt;path-to-hgr&gt; -k &lt;# blocks&gt; -e &lt;imbalance (e.g. 0.03)&gt; -o km1 -m direct -p ../../../config/old_reference_configs/km1_direct_kway_alenex17.ini</code></pre></div></div><p>To start KaHyPar in recursive bisection mode (KaHyPar-R) optimizing the cut-net objective run:</p><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>./KaHyPar -h &lt;path-to-hgr&gt; -k &lt;# blocks&gt; -e &lt;imbalance (e.g. 0.03)&gt; -o cut -m recursive -p ../../../config/old_reference_configs/cut_rb_alenex16.ini</code></pre></div></div><p>All preset parameters can be overwritten by using the corresponding command line options.</p><h4 id=\"input-validation\">Input Validation</h4><p>When creating a hypergraph KaHyPar validates that the input is actually a correct hypergraph, otherwise printing an error and aborting.This applies to hgr input files, the C interface and the Python interface. The runtime cost of the validation should be negligible in almost all cases.However, the input validation can also be disabled using the cmake flag <code class=\"language-plaintext highlighter-rouge\">-DKAHYPAR_INPUT_VALIDATION=OFF</code>.</p><p>Additionally, warnings are printed for non-fatal issues (e.g. hyperedges with duplicate pins).To treat non-fatal issues as hard errors instead, use the cmake flag <code class=\"language-plaintext highlighter-rouge\">-DKAHYPAR_INPUT_VALIDATION_PROMOTE_WARNINGS_TO_ERRORS=ON</code>.</p><h2 id=\"using-the-library-interfaces\">Using the Library Interfaces</h2><h4 id=\"the-c-style-interface\">The C-Style Interface</h4><p>We provide a simple C-style interface to use KaHyPar as a library. Note that this interface is not thread-safe yet. However there are some existing <a href=\"https://github.com/kahypar/kahypar/issues/142#issuecomment-1410015774\">workarounds</a>. The library can be built and installed via</p><div class=\"language-sh highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>make install.library</code></pre></div></div><p>and can be used like this:</p><div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"cp\">#include &lt;memory&gt;#include &lt;vector&gt;#include &lt;iostream&gt;</span><span class=\"cp\">#include &lt;libkahypar.h&gt;</span><span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">argc</span><span class=\"p\">,</span> <span class=\"kt\">char</span><span class=\"o\">*</span> <span class=\"n\">argv</span><span class=\"p\">[])</span> <span class=\"p\">{</span>  <span class=\"n\">kahypar_context_t</span><span class=\"o\">*</span> <span class=\"n\">context</span> <span class=\"o\">=</span> <span class=\"n\">kahypar_context_new</span><span class=\"p\">();</span>  <span class=\"n\">kahypar_configure_context_from_file</span><span class=\"p\">(</span><span class=\"n\">context</span><span class=\"p\">,</span> <span class=\"s\">\"/path/to/config.ini\"</span><span class=\"p\">);</span>    <span class=\"n\">kahypar_set_seed</span><span class=\"p\">(</span><span class=\"n\">context</span><span class=\"p\">,</span> <span class=\"mi\">42</span><span class=\"p\">);</span>  <span class=\"k\">const</span> <span class=\"n\">kahypar_hypernode_id_t</span> <span class=\"n\">num_vertices</span> <span class=\"o\">=</span> <span class=\"mi\">7</span><span class=\"p\">;</span>  <span class=\"k\">const</span> <span class=\"n\">kahypar_hyperedge_id_t</span> <span class=\"n\">num_hyperedges</span> <span class=\"o\">=</span> <span class=\"mi\">4</span><span class=\"p\">;</span>  <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">unique_ptr</span><span class=\"o\">&lt;</span><span class=\"n\">kahypar_hyperedge_weight_t</span><span class=\"p\">[]</span><span class=\"o\">&gt;</span> <span class=\"n\">hyperedge_weights</span> <span class=\"o\">=</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">make_unique</span><span class=\"o\">&lt;</span><span class=\"n\">kahypar_hyperedge_weight_t</span><span class=\"p\">[]</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">);</span>  <span class=\"c1\">// force the cut to contain hyperedge 0 and 2</span>  <span class=\"n\">hyperedge_weights</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>  <span class=\"n\">hyperedge_weights</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">1000</span><span class=\"p\">;</span>  <span class=\"n\">hyperedge_weights</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>  <span class=\"n\">hyperedge_weights</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">1000</span><span class=\"p\">;</span>  <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">unique_ptr</span><span class=\"o\">&lt;</span><span class=\"kt\">size_t</span><span class=\"p\">[]</span><span class=\"o\">&gt;</span> <span class=\"n\">hyperedge_indices</span> <span class=\"o\">=</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">make_unique</span><span class=\"o\">&lt;</span><span class=\"kt\">size_t</span><span class=\"p\">[]</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">);</span>  <span class=\"n\">hyperedge_indices</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">hyperedge_indices</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">2</span><span class=\"p\">;</span>  <span class=\"n\">hyperedge_indices</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">6</span><span class=\"p\">;</span> <span class=\"n\">hyperedge_indices</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">9</span><span class=\"p\">;</span>  <span class=\"n\">hyperedge_indices</span><span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">12</span><span class=\"p\">;</span>  <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">unique_ptr</span><span class=\"o\">&lt;</span><span class=\"n\">kahypar_hyperedge_id_t</span><span class=\"p\">[]</span><span class=\"o\">&gt;</span> <span class=\"n\">hyperedges</span> <span class=\"o\">=</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">make_unique</span><span class=\"o\">&lt;</span><span class=\"n\">kahypar_hyperedge_id_t</span><span class=\"p\">[]</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"mi\">12</span><span class=\"p\">);</span>  <span class=\"c1\">// hypergraph from hMetis manual page 14</span>  <span class=\"n\">hyperedges</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>  <span class=\"n\">hyperedges</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">2</span><span class=\"p\">;</span>  <span class=\"n\">hyperedges</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>  <span class=\"n\">hyperedges</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>  <span class=\"n\">hyperedges</span><span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">3</span><span class=\"p\">;</span>  <span class=\"n\">hyperedges</span><span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">4</span><span class=\"p\">;</span>  <span class=\"n\">hyperedges</span><span class=\"p\">[</span><span class=\"mi\">6</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">3</span><span class=\"p\">;</span>  <span class=\"n\">hyperedges</span><span class=\"p\">[</span><span class=\"mi\">7</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">4</span><span class=\"p\">;</span>  <span class=\"n\">hyperedges</span><span class=\"p\">[</span><span class=\"mi\">8</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">6</span><span class=\"p\">;</span>  <span class=\"n\">hyperedges</span><span class=\"p\">[</span><span class=\"mi\">9</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">2</span><span class=\"p\">;</span>  <span class=\"n\">hyperedges</span><span class=\"p\">[</span><span class=\"mi\">10</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">5</span><span class=\"p\">;</span> <span class=\"n\">hyperedges</span><span class=\"p\">[</span><span class=\"mi\">11</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">6</span><span class=\"p\">;</span>  <span class=\"k\">const</span> <span class=\"kt\">double</span> <span class=\"n\">imbalance</span> <span class=\"o\">=</span> <span class=\"mf\">0.03</span><span class=\"p\">;</span>  <span class=\"k\">const</span> <span class=\"n\">kahypar_partition_id_t</span> <span class=\"n\">k</span> <span class=\"o\">=</span> <span class=\"mi\">2</span><span class=\"p\">;</span>  <span class=\"n\">kahypar_hyperedge_weight_t</span> <span class=\"n\">objective</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>  <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"n\">kahypar_partition_id_t</span><span class=\"o\">&gt;</span> <span class=\"n\">partition</span><span class=\"p\">(</span><span class=\"n\">num_vertices</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">);</span>  <span class=\"n\">kahypar_partition</span><span class=\"p\">(</span><span class=\"n\">num_vertices</span><span class=\"p\">,</span> <span class=\"n\">num_hyperedges</span><span class=\"p\">,</span>                   <span class=\"n\">imbalance</span><span class=\"p\">,</span> <span class=\"n\">k</span><span class=\"p\">,</span>                   <span class=\"cm\">/*vertex_weights */</span> <span class=\"nb\">nullptr</span><span class=\"p\">,</span> <span class=\"n\">hyperedge_weights</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"p\">(),</span>                   <span class=\"n\">hyperedge_indices</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"p\">(),</span> <span class=\"n\">hyperedges</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"p\">(),</span>                   <span class=\"o\">&amp;</span><span class=\"n\">objective</span><span class=\"p\">,</span> <span class=\"n\">context</span><span class=\"p\">,</span> <span class=\"n\">partition</span><span class=\"p\">.</span><span class=\"n\">data</span><span class=\"p\">());</span>  <span class=\"k\">for</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">!=</span> <span class=\"n\">num_vertices</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"p\">{</span>    <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">\":\"</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">partition</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">endl</span><span class=\"p\">;</span>  <span class=\"p\">}</span>  <span class=\"n\">kahypar_context_free</span><span class=\"p\">(</span><span class=\"n\">context</span><span class=\"p\">);</span><span class=\"p\">}</span></code></pre></div></div><p>To compile the program using <code class=\"language-plaintext highlighter-rouge\">g++</code> run:</p><div class=\"language-sh highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>g++ <span class=\"nt\">-std</span><span class=\"o\">=</span>c++14 <span class=\"nt\">-DNDEBUG</span> <span class=\"nt\">-O3</span> <span class=\"nt\">-I</span>/usr/local/include <span class=\"nt\">-L</span>/usr/local/lib program.cc <span class=\"nt\">-o</span> program <span class=\"nt\">-lkahypar</span></code></pre></div></div><p>Note: If boost is not found during linking, you might need to add <code class=\"language-plaintext highlighter-rouge\">-L/path/to/boost/lib -I/path/to/boost/include -lboost_program_options</code> to the command.</p><p>To remove the library from your system use the provided uninstall target:</p><div class=\"language-sh highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>make uninstall-kahypar</code></pre></div></div><h4 id=\"the-python-interface\">The Python Interface</h4><p>To compile the Python interface, do the following:</p><ol>  <li>Create a build directory: <code class=\"language-plaintext highlighter-rouge\">mkdir build &amp;&amp; cd build</code></li>  <li>If you have boost installed on your system, run cmake: <code class=\"language-plaintext highlighter-rouge\">cmake .. -DCMAKE_BUILD_TYPE=RELEASE -DKAHYPAR_PYTHON_INTERFACE=1</code>. If you don\u2019t have boost installed, run: <code class=\"language-plaintext highlighter-rouge\">cmake .. -DCMAKE_BUILD_TYPE=RELEASE -DKAHYPAR_PYTHON_INTERFACE=1 -DKAHYPAR_USE_MINIMAL_BOOST=ON</code> instead. This will download, extract, and build the necessary dependencies automatically.</li>  <li>Go to libary folder: <code class=\"language-plaintext highlighter-rouge\">cd python</code></li>  <li>Compile the libarary: <code class=\"language-plaintext highlighter-rouge\">make</code></li>  <li>Copy the libary to your site-packages directory: <code class=\"language-plaintext highlighter-rouge\">cp kahypar.so &lt;path-to-site-packages&gt;</code></li></ol><p>After that you can use the KaHyPar libary like this:</p><div class=\"language-py highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">import</span> <span class=\"nn\">os</span><span class=\"kn\">import</span> <span class=\"nn\">kahypar</span> <span class=\"k\">as</span> <span class=\"n\">kahypar</span><span class=\"n\">num_nodes</span> <span class=\"o\">=</span> <span class=\"mi\">7</span><span class=\"n\">num_nets</span> <span class=\"o\">=</span> <span class=\"mi\">4</span><span class=\"n\">hyperedge_indices</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">6</span><span class=\"p\">,</span><span class=\"mi\">9</span><span class=\"p\">,</span><span class=\"mi\">12</span><span class=\"p\">]</span><span class=\"n\">hyperedges</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"mi\">6</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"mi\">6</span><span class=\"p\">]</span><span class=\"n\">node_weights</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"mi\">6</span><span class=\"p\">,</span><span class=\"mi\">7</span><span class=\"p\">]</span><span class=\"n\">edge_weights</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">11</span><span class=\"p\">,</span><span class=\"mi\">22</span><span class=\"p\">,</span><span class=\"mi\">33</span><span class=\"p\">,</span><span class=\"mi\">44</span><span class=\"p\">]</span><span class=\"n\">k</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"n\">hypergraph</span> <span class=\"o\">=</span> <span class=\"n\">kahypar</span><span class=\"p\">.</span><span class=\"n\">Hypergraph</span><span class=\"p\">(</span><span class=\"n\">num_nodes</span><span class=\"p\">,</span> <span class=\"n\">num_nets</span><span class=\"p\">,</span> <span class=\"n\">hyperedge_indices</span><span class=\"p\">,</span> <span class=\"n\">hyperedges</span><span class=\"p\">,</span> <span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">edge_weights</span><span class=\"p\">,</span> <span class=\"n\">node_weights</span><span class=\"p\">)</span><span class=\"n\">context</span> <span class=\"o\">=</span> <span class=\"n\">kahypar</span><span class=\"p\">.</span><span class=\"n\">Context</span><span class=\"p\">()</span><span class=\"n\">context</span><span class=\"p\">.</span><span class=\"n\">loadINIconfiguration</span><span class=\"p\">(</span><span class=\"s\">\"&lt;path/to/config&gt;/km1_kKaHyPar_sea20.ini\"</span><span class=\"p\">)</span><span class=\"n\">context</span><span class=\"p\">.</span><span class=\"n\">setK</span><span class=\"p\">(</span><span class=\"n\">k</span><span class=\"p\">)</span><span class=\"n\">context</span><span class=\"p\">.</span><span class=\"n\">setEpsilon</span><span class=\"p\">(</span><span class=\"mf\">0.03</span><span class=\"p\">)</span><span class=\"n\">kahypar</span><span class=\"p\">.</span><span class=\"n\">partition</span><span class=\"p\">(</span><span class=\"n\">hypergraph</span><span class=\"p\">,</span> <span class=\"n\">context</span><span class=\"p\">)</span></code></pre></div></div><p>For more information about the python library functionality, please see: <a href=\"https://github.com/SebastianSchlag/kahypar/blob/master/python/module.cpp\">module.cpp</a></p><p>We also provide a precompiled version as a <a href=\"https://badge.fury.io/py/kahypar\"><img src=\"https://badge.fury.io/py/kahypar.svg\" alt=\"PyPI version\" /></a> , which can be installed via:</p><p><code class=\"language-plaintext highlighter-rouge\">python3 -m pip install --index-url https://pypi.org/simple/ --no-deps kahypar</code></p><h4 id=\"the-julia-interface\">The Julia Interface</h4><p>Thanks to Jordan Jalving (<a href=\"https://github.com/jalving\">@jalving</a>) KaHyPar now also offers a Julia interface,which can currently be found here: <a href=\"https://github.com/kahypar/KaHyPar.jl\">kahypar/KaHyPar.jl</a>.</p><p>The corresponding dependency can be installed via:</p><div class=\"language-jl highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">using</span> <span class=\"n\">Pkg</span><span class=\"n\">Pkg</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"x\">(</span><span class=\"kt\">PackageSpec</span><span class=\"x\">(</span><span class=\"n\">url</span><span class=\"o\">=</span><span class=\"s\">\"https://github.com/jalving/KaHyPar.jl.git\"</span><span class=\"x\">))</span><span class=\"n\">Pkg</span><span class=\"o\">.</span><span class=\"n\">test</span><span class=\"x\">(</span><span class=\"s\">\"KaHyPar\"</span><span class=\"x\">)</span></code></pre></div></div><p>After that, you can use KaHyPar to partition your hypergraphs like this:</p><div class=\"language-jl highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">using</span> <span class=\"n\">KaHyPar</span><span class=\"k\">using</span> <span class=\"n\">SparseArrays</span><span class=\"n\">I</span> <span class=\"o\">=</span> <span class=\"x\">[</span><span class=\"mi\">1</span><span class=\"x\">,</span><span class=\"mi\">3</span><span class=\"x\">,</span><span class=\"mi\">1</span><span class=\"x\">,</span><span class=\"mi\">2</span><span class=\"x\">,</span><span class=\"mi\">4</span><span class=\"x\">,</span><span class=\"mi\">5</span><span class=\"x\">,</span><span class=\"mi\">4</span><span class=\"x\">,</span><span class=\"mi\">5</span><span class=\"x\">,</span><span class=\"mi\">7</span><span class=\"x\">,</span><span class=\"mi\">3</span><span class=\"x\">,</span><span class=\"mi\">6</span><span class=\"x\">,</span><span class=\"mi\">7</span><span class=\"x\">]</span><span class=\"n\">J</span> <span class=\"o\">=</span> <span class=\"x\">[</span><span class=\"mi\">1</span><span class=\"x\">,</span><span class=\"mi\">1</span><span class=\"x\">,</span><span class=\"mi\">2</span><span class=\"x\">,</span><span class=\"mi\">2</span><span class=\"x\">,</span><span class=\"mi\">2</span><span class=\"x\">,</span><span class=\"mi\">2</span><span class=\"x\">,</span><span class=\"mi\">3</span><span class=\"x\">,</span><span class=\"mi\">3</span><span class=\"x\">,</span><span class=\"mi\">3</span><span class=\"x\">,</span><span class=\"mi\">4</span><span class=\"x\">,</span><span class=\"mi\">4</span><span class=\"x\">,</span><span class=\"mi\">4</span><span class=\"x\">]</span><span class=\"n\">V</span> <span class=\"o\">=</span> <span class=\"kt\">Int</span><span class=\"o\">.</span><span class=\"x\">(</span><span class=\"n\">ones</span><span class=\"x\">(</span><span class=\"n\">length</span><span class=\"x\">(</span><span class=\"n\">I</span><span class=\"x\">)))</span><span class=\"n\">A</span> <span class=\"o\">=</span> <span class=\"n\">sparse</span><span class=\"x\">(</span><span class=\"n\">I</span><span class=\"x\">,</span><span class=\"n\">J</span><span class=\"x\">,</span><span class=\"n\">V</span><span class=\"x\">)</span><span class=\"n\">h</span> <span class=\"o\">=</span> <span class=\"n\">KaHyPar</span><span class=\"o\">.</span><span class=\"n\">hypergraph</span><span class=\"x\">(</span><span class=\"n\">A</span><span class=\"x\">)</span><span class=\"n\">KaHyPar</span><span class=\"o\">.</span><span class=\"n\">partition</span><span class=\"x\">(</span><span class=\"n\">h</span><span class=\"x\">,</span><span class=\"mi\">2</span><span class=\"x\">,</span><span class=\"n\">configuration</span> <span class=\"o\">=</span> <span class=\"o\">:</span><span class=\"n\">edge_cut</span><span class=\"x\">)</span><span class=\"n\">KaHyPar</span><span class=\"o\">.</span><span class=\"n\">partition</span><span class=\"x\">(</span><span class=\"n\">h</span><span class=\"x\">,</span><span class=\"mi\">2</span><span class=\"x\">,</span><span class=\"n\">configuration</span> <span class=\"o\">=</span> <span class=\"o\">:</span><span class=\"n\">connectivity</span><span class=\"x\">)</span><span class=\"n\">KaHyPar</span><span class=\"o\">.</span><span class=\"n\">partition</span><span class=\"x\">(</span><span class=\"n\">h</span><span class=\"x\">,</span><span class=\"mi\">2</span><span class=\"x\">,</span><span class=\"n\">configuration</span> <span class=\"o\">=</span> <span class=\"n\">joinpath</span><span class=\"x\">(</span><span class=\"nd\">@__DIR__</span><span class=\"x\">,</span><span class=\"s\">\"../src/config/km1_kKaHyPar_sea20.ini\"</span><span class=\"x\">))</span></code></pre></div></div><h4 id=\"the-java-interface\">The Java Interface</h4><p><a href=\"https://github.com/romainwallon\">Romain Wallon</a> has created a <a href=\"https://github.com/crillab/jkahypar\">Java interface for KaHyPar</a>. Please refer to the <a href=\"https://github.com/crillab/jkahypar/blob/master/README.md\">readme</a> for a detailed description on how to build and use the interface.</p><h2 id=\"bug-reports\">Bug Reports</h2><p>We encourage you to report any problems with KaHyPar via the <a href=\"https://github.com/SebastianSchlag/kahypar/issues\">github issue tracking system</a> of the project.</p><h2 id=\"licensing\">Licensing</h2><p>KaHyPar is free software provided under the GNU General Public License (GPLv3).For more information see the <a href=\"https://github.com/SebastianSchlag/kahypar/blob/master/COPYING\" title=\"Licence\">COPYING file</a>.We distribute this framework freely to foster the use and development of hypergraph partitioning tools.If you use KaHyPar in an academic setting please cite the appropriate papers. If you are interested in a commercial license, please contact me.</p><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>// Overall KaHyPar framework@phdthesis{DBLP:phd/dnb/Schlag20,  author    = {Sebastian Schlag},  title     = {High-Quality Hypergraph Partitioning},  school    = {Karlsruhe Institute of Technology, Germany},  year      = {2020}}@article{10.1145/3529090,   author = {Schlag, Sebastian and             Heuer, Tobias and             Gottesb\\\"{u}ren, Lars and             Akhremtsev, Yaroslav and             Schulz, Christian and             Sanders, Peter},   title = {High-Quality Hypergraph Partitioning},   url = {https://doi.org/10.1145/3529090},   doi = {10.1145/3529090},   journal = {ACM J. Exp. Algorithmics},  year = {2022},   month = {mar}}// KaHyPar-R@inproceedings{shhmss2016alenex, author    = {Sebastian Schlag and              Vitali Henne and              Tobias Heuer and              Henning Meyerhenke and              Peter Sanders and              Christian Schulz}, title     = {k-way Hypergraph Partitioning via \\emph{n}-Level Recursive              Bisection}, booktitle = {18th Workshop on Algorithm Engineering and Experiments, (ALENEX 2016)}, pages     = {53--67}, year      = {2016},}// KaHyPar-K@inproceedings{ahss2017alenex, author    = {Yaroslav Akhremtsev and              Tobias Heuer and              Peter Sanders and              Sebastian Schlag}, title     = {Engineering a direct \\emph{k}-way Hypergraph Partitioning Algorithm}, booktitle = {19th Workshop on Algorithm Engineering and Experiments, (ALENEX 2017)}, pages     = {28--42}, year      = {2017},}// KaHyPar-CA@inproceedings{hs2017sea, author    = {Tobias Heuer and              Sebastian Schlag}, title     = {Improving Coarsening Schemes for Hypergraph Partitioning by Exploiting Community Structure}, booktitle = {16th International Symposium on Experimental Algorithms, (SEA 2017)}, pages     = {21:1--21:19}, year      = {2017},}// KaHyPar-MF@inproceedings{heuer_et_al:LIPIcs:2018:8936, author ={Tobias Heuer and Peter Sanders and Sebastian Schlag}, title =, booktitle ={17th International Symposium on Experimental Algorithms  (SEA 2018)}, pages ={1:1--1:19}, year ={2018}}@article{KaHyPar-MF-JEA,  author = {Heuer, T. and Sanders, P. and Schlag, S.},  title = {Network Flow-Based Refinement for Multilevel Hypergraph Partitioning},  journal = {ACM Journal of Experimental Algorithmics (JEA)}},  volume = {24},  number = {1},  month = {09},  year = {2019},  pages = {2.3:1--2.3:36},  publisher = {ACM}}// KaHyPar-E (EvoHGP)@inproceedings{Andre:2018:MMH:3205455.3205475, author = {Robin Andre and Sebastian Schlag and Christian Schulz}, title = {Memetic Multilevel Hypergraph Partitioning}, booktitle = {Proceedings of the Genetic and Evolutionary Computation Conference}, series = {GECCO '18}, year = {2018}, pages = {347--354}, numpages = {8}}// KaHyPar-SEA20 (KaHyPar-HFC)@InProceedings{gottesbren_et_al:LIPIcs:2020:12085,  author = {Lars Gottesb{\\\"u}ren and Michael Hamann and Sebastian Schlag and Dorothea Wagner},  title =,  booktitle = {18th International Symposium on Experimental Algorithms (SEA)},  pages ={11:1--11:15},  series = {Leibniz International Proceedings in Informatics (LIPIcs)},  year ={2020}}</code></pre></div></div><h2 id=\"contributing\">Contributing</h2><p>If you are interested in contributing to the KaHyPar frameworkfeel free to contact me or create an issue on the<a href=\"https://github.com/SebastianSchlag/kahypar/issues\">issue tracking system</a>.</p>      </section>      <footer>                <p>This project is maintained by <a href=\"https://github.com/kahypar\">kahypar</a></p>                <p><small>Hosted on GitHub Pages &mdash; Theme by <a href=\"https://github.com/orderedlist\">orderedlist</a></small></p>      </footer>    </div>    <script src=\"/assets/js/scale.fix.js\"></script>      </body></html>",
  "embeddings": []
}
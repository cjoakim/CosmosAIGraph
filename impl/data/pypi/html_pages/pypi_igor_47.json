{
  "libtype": "pypi",
  "libname": "igor",
  "url": "http://blog.tremily.us/posts/igor/",
  "html": "<!DOCTYPE html><html><head><meta charset=\"utf-8\" /><title>Reading IGOR files from Python</title><link rel=\"stylesheet\" href=\"../../style.css\" type=\"text/css\" /><link rel=\"stylesheet\" href=\"../../local.css\" type=\"text/css\" /><link rel=\"vcs-git\" href=\"git://tremily.us/blog.git\" title=\"wiki git repository\" /></head><body><article class=\"page\"><section class=\"pageheader\"><header class=\"header\"><span><span class=\"parentlinks\"><a href=\"../../\">unfolding disasters</a>/ <a href=\"../\">posts</a>/ </span><span class=\"title\">Reading IGOR files from Python</span></span></header><nav class=\"actions\"><ul><li><a href=\"../../recentchanges/\">RecentChanges</a></li></ul></nav></section><aside class=\"sidebar\"><ul><li><a href=\"http://tremily.us/\">Homepage</a></li><li><a href=\"../../\">Blog</a></li><li><a href=\"../\">Archive</a></li><li><a href=\"../../contact/\">Contact</a></li></ul><div class='pagecloud'><span class=\"smallestPC\"><a href=\"../../tags/C/\">C</a></span><span class=\"smallestPC\"><a href=\"../../tags/bash/\">bash</a></span><span class=\"smallestPC\"><a href=\"../../tags/blogging/\">blogging</a></span><span class=\"smallestPC\"><a href=\"../../tags/bzr/\">bzr</a></span><span class=\"smallPC\"><a href=\"../../tags/code/\">code</a></span><span class=\"smallestPC\"><a href=\"../../tags/emacs/\">emacs</a></span><span class=\"smallPC\"><a href=\"../../tags/fun/\">fun</a></span><span class=\"normalPC\"><a href=\"../../tags/git/\">git</a></span><span class=\"smallestPC\"><a href=\"../../tags/hardware/\">hardware</a></span><span class=\"smallestPC\"><a href=\"../../tags/hg/\">hg</a></span><span class=\"smallestPC\"><a href=\"../../tags/hooke/\">hooke</a></span><span class=\"smallestPC\"><a href=\"../../tags/java/\">java</a></span><span class=\"smallestPC\"><a href=\"../../tags/latex/\">latex</a></span><span class=\"biggestPC\"><a href=\"../../tags/linux/\">linux</a></span><span class=\"smallestPC\"><a href=\"../../tags/papers/\">papers</a></span><span class=\"bigPC\"><a href=\"../../tags/programming/\">programming</a></span><span class=\"smallestPC\"><a href=\"../../tags/pypi/\">pypi</a></span><span class=\"normalPC\"><a href=\"../../tags/python/\">python</a></span><span class=\"smallestPC\"><a href=\"../../tags/sawsim/\">sawsim</a></span><span class=\"smallestPC\"><a href=\"../../tags/teaching/\">teaching</a></span><span class=\"smallestPC\"><a href=\"../../tags/theory/\">theory</a></span><span class=\"bigPC\"><a href=\"../../tags/tools/\">tools</a></span><span class=\"smallestPC\"><a href=\"../../tags/unicode/\">unicode</a></span><span class=\"smallPC\"><a href=\"../../tags/web/\">web</a></span></div></aside><div id=\"pagebody\"><section id=\"content\"><p><span class=\"infobox\">Available in a <a href=\"../../tags/git/\">git</a> repository.<br />Repository: <a href=\"git://tremily.us/igor.git\" rel=\"vcs-git\" title=\"igor repository\">igor</a><br />Browsable repository: <a href=\"http://git.tremily.us/?p=igor.git\" rel=\"vcs-git\" title=\"igor repository\">igor</a><br />Author: W. Trevor King<br /></span></p><p>This is the home page for the <code>igor</code> package, <a href=\"../Python/\">Python</a> modules forreading files written by <a href=\"http://www.wavemetrics.com/\">WaveMetrics</a> IGOR Pro.  Note that ifyou're designing a system, <a href=\"../HDF5/\">HDF5</a> is almost certainly a betterchoice for your data file format than IBW or PXP.  This package existsfor those of you who's data is already stuck in an IGOR format.</p><h2>History</h2><p>When I joined Prof. Yang's lab, there was a good deal of data analysiscode written in IGOR, and a bunch of old data saved in IGOR binarywave (IBW) and packed experiment (PXP) files.  I don't use MS Windows,so I don't run IGOR, but I still needed a way to get at the data.Luckily, the <a href=\"http://www.wavemetrics.com/\">WaveMetrics</a> folks publish <a href=\"ftp://ftp.wavemetrics.net/IgorPro/Technical_Notes/\">some useful notes</a>which explain the fundamentals of these two file formats (<a href=\"ftp://ftp.wavemetrics.net/IgorPro/Technical_Notes/TN003.zip\">TN003</a>for IBW and <a href=\"ftp://ftp.wavemetrics.net/IgorPro/Technical_Notes/PTN003.zip\">PTN003</a> for PXP).  The file formats are in a goofyformat, but <a href=\"http://www.gnu.org/software/binutils/\">strings</a> pulls out enough meat to figure out what'sgoing on.</p><p>For a while I used a IBW \u2192 ASCII reader that I coded up in <a href=\"../C/\">C</a>, butwhen I joined the <a href=\"../Hooke/\">Hooke</a> project during the winter of 2009\u20132010, Itranslated the reader into <a href=\"../Python/\">Python</a> to support the drivers for datafrom Asylum Research's <a href=\"http://www.asylumresearch.com/Products/Mfp1D/Mfp1D.shtml\">MFP-*</a> and related microscopes.  Thisscratched my itch for a few years.</p><p>Fast forward to 2012, and for the first time I needed to extract datafrom a PXP file.  Since my Python code only supported IBW's, Isearched around and found <a href=\"http://pypi.python.org/pypi/igor.py\">igor.py</a> by Paul Kienzle Merlijn vanDeen.  They had a PXP reader, but no reader for stand-alone IBW files.I decided to merge the two projects, so I split my reader out of theHooke repository and hacked up the <a href=\"../Git/\">Git</a> repository referencedabove.  Now it's easy to get a hold of all that useful metadata in ahurry.  No writing ability yet, but I don't know why you'd want tomove data that direction anyway ;).</p><h2>Parsing dynamic structures with Python</h2><p>The IGOR file formats rely on lots of shenanigans with C <code>struct</code>s.To meld all the structures together in a natural way, I've extendedPython's standard <a href=\"http://docs.python.org/library/struct.html\">struct</a> library to support arbitrary nesting anddynamic fields.  Take a look at <a href=\"http://git.tremily.us/?p=igor.git;a=blob;f=igor/struct.py;hb=HEAD\">igor.struct</a> for someexamples.  This framework makes it easy to load data from structureslike:</p><pre><code>struct vector {  unsigned int length;  short data[length];};</code></pre><p>With the standard <code>struct</code> module, you'd read this using thefunctional approach:</p><pre><code>&gt;&gt;&gt; import struct&gt;&gt;&gt; buffer = b'\\x00\\x00\\x00\\x02\\x01\\x02\\x03\\x04'&gt;&gt;&gt; length_struct = struct.Struct('&gt;I')&gt;&gt;&gt; length = length_struct.unpack_from(buffer)[0]&gt;&gt;&gt; data = struct.unpack_from('&gt;' + 'h'*length, buffer, length_struct.size)&gt;&gt;&gt; print(data)(258, 772)</code></pre><p>This obviously works, but keeping track of the offsets, byte ordering,etc. can be tedious.  My <code>igor.struct</code> package allows you to use amore object oriented approach:</p><pre><code>&gt;&gt;&gt; from pprint import pprint&gt;&gt;&gt; from igor.struct import Field, DynamicField, DynamicStructure&gt;&gt;&gt; class DynamicLengthField (DynamicField):...     def pre_pack(self, parents, data):...         \"Set the 'length' value to match the data before packing\"...         vector_structure = parents[-1]...         vector_data = self._get_structure_data(...             parents, data, vector_structure)...         length = len(vector_data['data'])...         vector_data['length'] = length...         data_field = vector_structure.get_field('data')...         data_field.count = length...         data_field.setup()...     def post_unpack(self, parents, data):...         \"Adjust the expected data count to match the 'length' value\"...         vector_structure = parents[-1]...         vector_data = self._get_structure_data(...             parents, data, vector_structure)...         length = vector_data['length']...         data_field = vector_structure.get_field('data')...         data_field.count = length...         data_field.setup()&gt;&gt;&gt; dynamic_length_vector = DynamicStructure('vector',...     fields=[...         DynamicLengthField('I', 'length'),...         Field('h', 'data', count=0, array=True),...         ],...     byte_order='&gt;')&gt;&gt;&gt; vector = dynamic_length_vector.unpack(buffer)&gt;&gt;&gt; pprint(vector){'data': array([258, 772]), 'length': 2}</code></pre><p>While this is overkill for such a simple example, it scales much morecleanly than an approach using the standard <code>struct</code> module.  The mainbenefit is that you can use <code>Structure</code> instances as format specifiersfor <code>Field</code> instances.  This means that you could specify a Cstructure like:</p><pre><code>struct vectors {  unsigned int length;  struct vector data[length];};</code></pre><p>With:</p><pre><code>&gt;&gt;&gt; dynamic_length_vectors = DynamicStructure('vectors',...     fields=[...         DynamicLengthField('I', 'length'),...         Field(dynamic_length_vector, 'data', count=0, array=True),...         ],...     byte_order='&gt;')</code></pre><p>The C code your mimicking probably only uses a handful of dynamicapproaches.  Once you've written classes to handle each of them, it iseasy to translate arbitrarily complex nested C structures into Pythonrepresentations.</p><p>The pre-pack and post-unpack hooks also give you a convenient place totranslate between some C struct's funky format and Python's nativetypes.  You take care off all that when you define the structure, andthen any part of your software that uses the structure gets the nativeversion automatically.</p></section></div><footer id=\"footer\" class=\"pagefooter\"><nav id=\"pageinfo\"><nav class=\"tags\">Tags:<a href=\"../../tags/git/\" rel=\"tag\">tags/git</a><a href=\"../../tags/programming/\" rel=\"tag\">tags/programming</a></nav><nav id=\"backlinks\">Links:<a href=\"../Comparing_velocity_clamp_experiments/\">Comparing velocity clamp experiments</a><a href=\"../Gentoo_overlay/\">Gentoo overlay</a><a href=\"../Open_source_force_spectroscopy/\">Open source force spectroscopy</a></nav><div class=\"pagedate\">Last edited <time datetime=\"2012-07-21T20:12:12Z\">Sat 21 Jul 2012 01:12:12 PM PDT</time><!-- Created <time datetime=\"2012-07-21T20:07:56Z\" pubdate=\"pubdate\">Sat 21 Jul 2012 01:07:56 PM PDT</time> --></div></nav><!-- from unfolding disasters --></footer></article></body></html>",
  "embeddings": []
}
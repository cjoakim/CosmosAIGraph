{
  "libtype": "pypi",
  "libname": "pyopengl",
  "url": "http://pyopengl.sourceforge.net",
  "html": "<!DOCTYPE html><html>  <head>    <title>PyOpenGL -- The Python OpenGL Binding</title>    <link rel=\"stylesheet\" type=\"text/css\" href=\"modern.css\">    <style>      #about-icon {        background-image: url('images/logo.png');        background-repeat: no-repeat;        background-position: 25px 0;        width: 128px;        height: 145px;        float:right;      }      #docs-icon {        background-image: url('images/docslogo.png');        background-repeat: no-repeat;        background-position: 5px 0;        width: 128px;        height: 145px;        float:right;      }    #introduction {        position: relative;        padding-right: 50%;    }        #introduction .screenshot {        position: absolute;        text-align: center;        right: 1em;        top: 1em;        bottom: 2em;        left: 50%;    }    .screenshot .screenshot-link {        font-size: .5em;    }    </style>  </head>  <body>    <header>      <nav>      <ul class=\"menu\">        <li><a href=\"/index.html\">Home</a></li>        <li><a href=\"/documentation/index.html\">Docs</a></li>        <li><a href=\"/documentation/installation.html\">Install</a></li>      </ul>      </nav>      <h1>PyOpenGL 3.x <span class=\"subheading\">The Python OpenGL Binding</span></h1>    </header>    <section >      <h2>About PyOpenGL</h2>      <p>PyOpenGL is the most common cross platform <a href=\"http://www.python.org/\">Python</a>        binding to <a href=\"http://www.opengl.org/\">OpenGL</a> and related        APIs. The binding is created using the standard ctypes library, and is        provided under an extremely liberal BSD-style Open-Source license.</p>    </section>    <section id=\"introduction\">        <div class=\"screenshot\">            <div class=\"screenshot-caption\"><a class=\"screenshot-link description\"></a></div>            <div class=\"image-holder\"></div>            <div class=\"clear-both\"><br></div>        </div>        <div class=\"screenshot-preload\"></div>        <h2>PyOpenGL Supports</h2>      <ul>        <li>OpenGL v1.1 to 4.4</li>        <li>GLES 1 to 3.1 (Experimental)</li>        <li>GLU</li>        <li>EGL, WGL, GLX</li>        <li>GLUT, FreeGLUT</li>        <li>GLE 3 (GL Extrusion Library)</li>        <li>hundreds of extensions to GL, GLES, EGL, WGL and GLX</li>      </ul>      <p>PyOpenGL is interoperable with a large number of external GUI libraries        for Python including (but not limited to):</p>      <ul>        <li><a href=\"http://wxpython.org/\">wxPython</a></li>        <li><a href=\"http://www.pygame.org/\">PyGame</a></li>        <li><a href=\"http://www.riverbankcomputing.co.uk/pyqt/index.php\">PyQt</a>          and <a href=\"http://qt-project.org/wiki/PySide\">PySide</a></li>        <li>PyGTK</li>        <li>Raw XLib</li>        <li>OSMesa</li>        <li>Raspberry Pi BCM</li>        <li>Tkinter (if you have installed the Togl widget for Tk)</li>      </ul>      <p>PyOpenGL 3.x runs on:</p>      <ul>        <li>Python 3.3+ (3.2 support is likely to work, but untested)</li>        <li>Python 2.7 (recommended)</li>        <li>Python 2.6 (for compatibility with older software and systems)</li>        <li>PyPy (experimental)</li>      </ul>      <div class=\"clear-both\"><br></div>    </section>    <section id=\"packages\">      <h2>Sub-Packages</h2>      <p>The PyOpenGL project includes a number of sub-projects:</p>      <ul>        <li>PyOpenGL, the \"OpenGL\" package when installed, provides GL, GLES1,          GLES2, GLES3, GLUT, GLU, GLE, WGL, EGL and GLX subpackages</li>        <li>OpenGL_accelerate, a cython coded accelerator module for PyOpenGL,          optional, but recommended where available            <ul>              <li>The code for OpenGL_accelerate is in the core PyOpenGL repository,                but is distributed as a separate Python package and installs as                OpenGL_accelerate</li>            </ul>        </li>        <li>PyOpenGL-Demo, a collection of small stand-alone demos        <ul>          <li>You normally want to run these from the source distribution, as            there's nothing installed by the package</li>        </ul>        </li>        <li><a href=\"context/index.html\">OpenGLContext</a>, a teaching and          testing library built on top of PyOpenGL (and a lot of other          libraries)</li>        <ul>          <li>You do <strong>NOT</strong> need OpenGLContext to use PyOpenGL</li>        </ul>      </ul>    </section>    <section id=\"installation\">      <h2>Downloading and Installation</h2>      <p>The easiest way to install PyOpenGL is using <a href=\"https://pypi.python.org/pypi/pip\">pip</a></p>      <pre>$ pip install PyOpenGL PyOpenGL_accelerate</pre>      <p>You can also manually download the packages:</p>      <ul>        <li><a href=\"https://pypi.python.org/pypi/PyOpenGL\">PyOpenGL</a></li>        <li><a href=\"https://pypi.python.org/pypi/PyOpenGL_accelerate\">PyOpenGL_accelerate</a></li>        <li><a href=\"https://pypi.python.org/pypi/PyOpenGL-Demo\">PyOpenGL Demo</a></li>        <li><a href=\"https://pypi.python.org/pypi/OpenGLContext\">OpenGLContext</a></li>      </ul>      <p>unpack them into temporary directories, change to those directories and run:</p>      <pre>python setup.py</pre>      <p><a href=\"documentation/installation.html\">Detailed installation instructions</a> are available.</p>    </section>    <section id=\"documentation\">      <div id=\"docs-icon\"><br>      </div>      <h2>Documentation</h2>      <p>The <a href=\"documentation/index.html\">documentation collection</a>        provides reference documentation, support and feedback information and        pointers to more in-depth documentation.</p>        <div class=\"clear-both\"></div>    </section>    <section id=\"source\">      <h2>Source Code</h2>      <p>You can work with latest version of PyOpenGL using the <a href=\"http://bazaar-vcs.org/\">bzr</a>        distributed source code control tool on the <a href=\"https://code.launchpad.net/pyopengl\">LaunchPad</a>        code-hosting platform:</p>      <pre>bzr branch lp:pyopengl<br>bzr branch lp:pyopengl-demo<br>bzr branch lp:openglcontext</pre>      <p>Contributions and patches are very welcome. &nbsp;You can either        request a merge via LaunchPad or send a patch-set via email using \"bzr        send\" to mcfletch@vrplumber.com.</p>    </section>    <section id=\"support\">      <h2>Support</h2>      <p>Bugs and general questions are best reported and answered on the <a href=\"http://sourceforge.net/mail/?group_id=5988\">PyOpenGL          mailing list</a>.&nbsp; The list is fairly low-traffic. </p>    </section>    <section id=\"otherlibraries\">      <h2>Other Libraries</h2>      <p>There are quite a few 3D-related libraries available for use with        Python, many of them either based on, or extensible with PyOpenGL.&nbsp;        PyOpenGL's author collects pointers to them on <a href=\"http://www.vrplumber.com/py3d.py\">his          site</a>. &nbsp;There is another commonly used binding of OpenGL for        Python which is part of the <a href=\"http://www.pyglet.org/\">Pyglet</a>        game development environment. </p>    </section>    <footer>      <div>A SourceForge Open-Source Project </div>      <div><a href=\"http://sourceforge.net\"><img src=\"http://sourceforge.net/sflogo.php?group_id=5988&amp;type=1\"            border=\"0\"></a></div>    </footer>    <script src=\"http://ajax.googleapis.com/ajax/libs/jquery/1.11.0/jquery.min.js\"></script>    <script src=\"scripts/screenshots.js\"></script>    <script type=\"text/javascript\">$(document).ready(function(){  $.screenshots( [    {        'url': 'http://geometrian.com/data/programming/projects/glLib/glLib%20Reloaded%200.5.8sb/glLib.png',        'link': 'http://geometrian.com/programming/projects/index.php?project=glLib',        'description': 'A PyOpenGL rendering library showing some of its features'    },    {        'url': 'http://geometrian.com/data/programming/projects/Realtime%20CPU%20Cloth/2/ClothDemo2.png',        'link': 'http://geometrian.com/programming/projects/index.php?project=Realtime%20CPU%20Cloth',        'description': 'A cloth simulation visualized through PyOpenGL'    },    {        'url':'http://geometrian.com/data/programming/projects/Mandelbrot%20Set/Viewer%205.00/mandelviewer5.png',        'link': 'http://geometrian.com/programming/projects/index.php?project=Mandelbrot%20Set',        'description': 'A Mandelbrot Set fractal rendered in realtime using GLSL shaders through PyOpenGL'    },    {        'url':'https://lh5.googleusercontent.com/-aaYepjfdvYg/UydcaFD93hI/AAAAAAAAChk/PJu_e01vPpo/w759-h603/FabriCAD_067.png',        'link': 'https://launchpad.net/pycad',        'description': '2D CAD program in PyOpenGL'    },    {        'url': 'screenshots/blanch/dots.png',        'link': 'https://bitbucket.org/rndblnch/opengl-programmable/',        'description': 'Cube with an animated partially transparent texture demonstrating rendering from OpenGL 1.0 to core profile'    },    {        'url': 'screenshots/blanch/mandelbrot.png',        'link': 'http://iihm.imag.fr/blanch/teaching/opengl/src/c-shader/02-fragment.py',        'description': 'Interactive Mandelbrot Set. Rendering is done as a procedural texture computed by the fragment shader'    },    {        'url': 'screenshots/blanch/webmichl_my_camera.png',        'link': 'https://bitbucket.org/rndblnch/seagull/',        'description': 'High fidelity rendering of 2D vector graphics (SVG) (Open Clip Art by webmichl) using the Seagull package'    },        {        'url': 'http://pyopengl.sourceforge.net/screenshots/context/twitch-viewer-screen-0001.png',        'link': 'http://launchpad.net/twitch',        'description': 'Twitch BSP (Quake III(TM) Map File) loader'    },    {        'url': 'http://pyopengl.sourceforge.net/screenshots/context/glelathe.jpg',        'link': 'http://pyopengl.sourceforge.net/context',        'description': 'OpenGLContext GLE Tubing/Extrusion Demo'    },    {        'url': 'http://pyopengl.sourceforge.net/screenshots/context/shader_instanced.py-screen-0001.png',        'link': 'http://pyopengl.sourceforge.net/context',        'description': 'OpenGLContext shader_instanced tutorial'    },    {        'url': 'http://pyopengl.sourceforge.net/screenshots/context/shaderobjects.py-screen-0001.png',        'link': 'http://pyopengl.sourceforge.net/context',        'description': 'OpenGLContext shader objct-graph demo'    },    {        'url': 'http://pyopengl.sourceforge.net/screenshots/context/shadow_2.py-screen-0001.png',        'link': 'http://pyopengl.sourceforge.net/context',        'description': 'OpenGLContext depth-map shadow tutorial'    },    {        'url': 'http://pyopengl.sourceforge.net/screenshots/context/h_cyber.jpg',        'link': 'http://pyopengl.sourceforge.net/context',        'description': 'OpenGLContext VRML97 renderering'    },    {        'url': 'http://pyopengl.sourceforge.net/screenshots/context/h_secondplatform.jpg',        'link': 'http://pyopengl.sourceforge.net/context',        'description': 'OpenGLContext VRML97 renderering'    },    {        'url': 'http://pyopengl.sourceforge.net/screenshots/context/h_showroom.jpg',        'link': 'http://pyopengl.sourceforge.net/context',        'description': 'OpenGLContext VRML97 renderering'    },    {        'url': 'http://pyopengl.sourceforge.net/screenshots/context/lorentz_dots.jpg',        'link': 'http://pyopengl.sourceforge.net/context',        'description': 'OpenGLContext demonstration of dynamic pointset generation'    },    {        'url': 'http://pyopengl.sourceforge.net/screenshots/context/h_wallworld.jpg',        'link': 'http://pyopengl.sourceforge.net/context',        'description': 'OpenGLContext VRML97 renderering'    },    {        'url': 'http://pyopengl.sourceforge.net/screenshots/context/truetype3d.jpg',        'link': 'http://pyopengl.sourceforge.net/context',        'description': 'OpenGLContext demonstration of 3D TrueType rendering'    },    {        'url': 'http://pyopengl.sourceforge.net/screenshots/context/h_office.jpg',        'link': 'http://pyopengl.sourceforge.net/context',        'description': 'OpenGLContext VRML97 renderering'    },    {        'url': 'http://pyopengl.sourceforge.net/screenshots/context/alternateatlas.jpg',        'link': 'http://pyopengl.sourceforge.net/context',        'description': 'OpenGLContext VRML97 renderering'    },    {        'url': 'http://pyopengl.sourceforge.net/screenshots/context/h_boardroom.jpg',        'link': 'http://pyopengl.sourceforge.net/context',        'description': 'OpenGLContext VRML97 renderering'    },    {        'url': 'http://pyopengl.sourceforge.net/screenshots/context/h_egypt_exterior_wide.jpg',        'link': 'http://pyopengl.sourceforge.net/context',        'description': 'OpenGLContext VRML97 renderering'    },    {        'url': 'http://pyopengl.sourceforge.net/screenshots/context/h_egypt_exterior.jpg',        'link': 'http://pyopengl.sourceforge.net/context',        'description': 'OpenGLContext VRML97 renderering'    },    {        'url': 'http://pyopengl.sourceforge.net/screenshots/context/h_egypt_interior.jpg',        'link': 'http://pyopengl.sourceforge.net/context',        'description': 'OpenGLContext VRML97 renderering'    },    {        'url': 'http://pyopengl.sourceforge.net/screenshots/context/h_baths.jpg',        'link': 'http://pyopengl.sourceforge.net/context',        'description': 'OpenGLContext VRML97 renderering'    },    {        'url': 'http://pyopengl.sourceforge.net/screenshots/context/h_baths_frigid.jpg',        'link': 'http://pyopengl.sourceforge.net/context',        'description': 'OpenGLContext VRML97 renderering'    } ],    $( '.screenshot' ),    $( '.screenshot-preload' ) );});    </script>      </body></html>",
  "embeddings": []
}
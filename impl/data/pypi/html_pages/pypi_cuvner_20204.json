{
  "libtype": "pypi",
  "libname": "cuvner",
  "url": "https://meejah.ca/projects/cuvner",
  "html": "<!DOCTYPE html><html class=\"no-js\">  <head>    <title>meejah.ca</title>    <link rel=\"stylesheet\" href=\"/assets/meejah-39ac1e1d.css\">    <link href=\"/atom.xml\" type=\"application/atom+xml\" rel=\"alternate\" title=\"meejah.ca ATOM Feed\" />    <link rel=\"icon\" type=\"image/png\" href=\"/media/favicon.png\" /><!--    <link rel=\"stylesheet\" href=\"solarized-base-style.css\"> --><!--    <link rel=\"stylesheet\" href=\"/static/css/solarized.css\">    <link rel=\"stylesheet\" href=\"/static/css/solarized-pygments.css\">    <link rel=\"stylesheet\" href=\"/static/css/meejah-lego.css\">    <link rel=\"stylesheet\" href=\"/static/css/meejah-lego-content.css\">-->      </head>  <body>    <header>    <div id=\"sitemap\">      <ul id=\"menu\" class=\"menu\">        <li   class=\"active top\"><a href=\"/projects\">projects</a>          <ul class=\"submenu projects\">            <li><a href=\"/projects/txtorcon\"><img src=\"/media/txtorcon-logo.png\" style=\"max-height: 2em; height: 2em; position: relative; top: .5em; margin-top: -.5em;\"> txtorcon</a></li>            <li><a href=\"/projects/carml\"><img src=\"/media/carml-logo.png\" style=\"max-height: 2em; height: 2em; position: relative; top: .5em;margin-top: -.5em;\"> carml&nbsp;&nbsp;&nbsp;</a></li>            <li><a href=\"/projects/cuvner\"><img src=\"/media/cuvner-logo.png\" style=\"max-height: 2em; height: 2em; position: relative; top: .8em;margin-top: -.5em;margin-right: .2em;margin-left: 0.2em;\"> cuv&#x2019;ner&nbsp;</a></li>          </ul>        </li>        <li   class=\"top\"><a href=\"/blog\">blog</a>          <ul class=\"submenu blog\">              <li><a href=\"/blog/wizard-gardens-vision\" title=\"Wizard Gardens\">Wizard Gardens</a></li>              <li><a href=\"/blog/magic-womrhole-0.13.0\" title=\"magic-wormhole 0.13.0 released\">magic-wormh...0 released</a></li>              <li><a href=\"/blog/pypiratzzi\" title=\"pypiratzzi: No More Signatures on PyPI\">pypiratzzi:..res on PyPI</a></li>            <li><a href=\"/blog\">&hellip;</a></li>          </ul>        </li>        <li   class=\"top\"><a href=\"/about/contact\">contact</a>          <ul class=\"submenu\">            <li><a href=\"/about/gnupg\">GnuPG</a></li>            <li><a href=\"/about/site-information\">Site Info.</a></li><!--            <li><a href=\"/about/livechat\">Live Chat</a></li>  -->          </ul>        </li>      </ul>    </div>    </header><article>   <h1>cuv&#x2019;ner</h1><!-- note to self: can get info via PyPI API, like: https://pypi.python.org/pypi/txtorcon/json --><p class=\"subtitle\">A commanding view of your coverage</p><img class=\"projectlogo\" src=\"/media/cuvner-logo.svg\" style=\"width: 50%; height: auto\" />  <p>    Cuv'ner is an amalgamation of several ideas I've been playing with    for visualizing coverage data. It is specifically for Python    coverage, as written    by <a href=\"http://coverage.readthedocs.org/en/latest/\">Coverage.py</a>    -- however, it's somewhat generic and there's no reason that    coverage data of other languages couldn't also be visualized (fire    me a <a href=\"https://github.com/meejah/cuvner/pulls\">PR</a>!)  </p>  <p>    The most useful tools are the console ones, where you can set    up <code>less</code> to    show <a href=\"https://pygments.org\">Pygments</a>-highlighted code    background-coloured by coverage or view line-by-line graphs of all    the files with <code>cuv graph</code>. The best eye-candy comes    from the \"graphic\" visualizations, the SVG-based <code>cuv    hist</code> \"histogram\"-style one or the <code>cuv pixel</code>    \"show every glyph\" one. This allowed me to make a history    of <a href=\"/projects/txtorcon\">txtorcon</a>'s coverage and code.  </p><div style=\"padding: 0; border: 0; margin: 0; width: 118%; height: 512px; clear: right; background-color: #000; text-align: center; position: relative; left: -18%;\">  <img src=\"/media/txtorcon-history.gif\" width=\"1069\" height=\"512\" alt=\"animated GIF of all of txtorcon's coverage history\" style=\"max-width: 95%;\" /></div>  <p>    Trying it out is easy: <code>pip install cuvner</code> and then    type <code>cuv readme</code> to get started.  </p>  <p>    <b>Similar tools</b> exist for viewing coverage. One nice one    is <a href=\"https://codecov.io\">codecov'io</a>'s <a href=\"https://github.com/codecov/browser-extension/tree/master/dist\">browser    extension</a> that shows colored coverage on GitHub as you browse    a project. <a href=\"http://pybee.org/\">BeeWare</a> has a GUI tool    called <a href=\"http://pybee.org/duvet/\">Duvet</a> that allows you    to browse files with coverage highlighting.  </p>  <p>    I am not aware of any console tools like this, though, and I find    using <code>less</code> a <i>really</i> convenient way to confirm    my new test covers what I wanted it to cover...  </p>  <ul>    <li><a href=\"https://cuvner.readthedocs.org\">documentation</a> from ReadTheDocs.org</li>    <li><a href=\"https://github.com/meejah/cuvner\">source code</a> from GitHub</li>    <li><a href=\"http://asciinema.org/a/33154\">demo</a> from asciinema.org</li>  </ul>  <div class=\"ascii\">    <script type=\"text/javascript\" src=\"https://asciinema.org/a/33154.js\" id=\"asciicast-33154\" async></script>  </div>  <p>    Some more screen-shots:  </p>    <img src=\"/media/cuvner-graph-twisted.png\" width=\"1347\" height=\"418\" style=\"max-width: 80%;\" />  <p>    <code>cuv graph</code> running on Twisted's code.  </p>    <img src=\"/media/cuvner-histogram-twisted.png\" width=\"1340\" height=\"334\" style=\"max-width: 80%;\" />  <p>    Part of <code>cuv hist</code>'s output on Twisted code.  </p>    <img src=\"/media/cuvner-lessopen-twisted.png\" width=\"1161\" height=\"372\" style=\"max-width: 80%;\" />  <p>    Using <code>cuv lessopen</code> to view a Twisted source file  </p></article>    <footer>      <p>          This site was last updated          <b>October 22, 2023</b>          in Git commit <b>63edc08e</b>.          You are visiting from <b>108.211.231.52</b>.          You're running an unknown host/browser.          <span id=\"is_using_tor\">...</span>      </p>    </footer>  <script type=\"text/javascript\">      // this keeps the menu-bar (projects/blog/contact) bar glued to      // the top      // XXX FIXME I wonder if this is really worth it?  Advantage to      // get rid of it is \"no javascript at all!!11!!\" so, e.g.,      // noscript doesn't show the \"i'm blocking stuff\" icon...      // ALTHOUGH I guess you get that anyway for the custom @font      // stuff :/      var menu = document.getElementById('menu');      var map = document.getElementById('sitemap');      var menu_top = menu.offsetTop;      function set_menu_position(pos) {          if (pos > menu_top) {              menu.className = \"menu smallmenu\";          } else {              menu.className = \"menu\";          }      }      // \"if not a touch device\"...misses some edge cases, like Surface      if ( !('ontouchstart' in window) ) {          // this does the \"slower scroll\" thing for the meejah graphic          // this does the shrink-ness for the menu-bar          document.onscroll = function(event) {//              var header = document.getElementById('sitemap');//              header.style.backgroundPosition = \"center \" + (window.scrollY / 2) + \"px\";              // XXX FIXME must match meejah-lego-content.css line 322 :(              if (document.body.clientWidth > 769) {                  var top = document.documentElement.scrollTop || document.body.scrollTop;                  var pos = Math.max(menu_top, top);                  set_menu_position(pos);              }          }          window.onresize = function(event) {              menu_top = map.clientHeight;              set_menu_position(menu_top);          }      }// fill out the \"is_using_tor\" span after an AJAX request. We do this// so as not to slow down page-render times on the server (e.g. while it// waits for a DNS query).      var req = new XMLHttpRequest();      req.onreadystatechange = function() {          if (this.readyState == 4) {            var d = this.responseText;              if (d == \"true\") {                  document.getElementById(\"is_using_tor\").innerHTML = 'You are <b>using Tor!</b>';              } else {                  document.getElementById(\"is_using_tor\").innerHTML = 'You are <b>not</b> using Tor.';              }          }      }      req.open(\"GET\", \"/using-tor\", true);      req.send();  </script>  </body></html>",
  "embeddings": []
}
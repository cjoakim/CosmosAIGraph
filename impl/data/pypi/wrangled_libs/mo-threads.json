{
  "classifiers": [
    "development status :: 4 - beta",
    "license :: osi approved :: mozilla public license 2.0 (mpl 2.0)",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: software development :: libraries",
    "topic :: software development :: libraries :: python modules"
  ],
  "description": "more threads! simpler and faster threading.\n\r\n# more threads!\r\n\r\n\r\n|branch      | status                                                                                                                                                                                                                                                                                                                                         |\r\n|------------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\r\n|master      | [![build status](https://app.travis-ci.com/klahnakoski/mo-threads.svg?branch=master)](https://travis-ci.com/github/klahnakoski/mo-threads)                                                                                                                                                                                                     |\r\n|dev         | [![build status](https://app.travis-ci.com/klahnakoski/mo-threads.svg?branch=dev)](https://travis-ci.com/github/klahnakoski/mo-threads)  [![coverage status](https://coveralls.io/repos/github/klahnakoski/mo-threads/badge.svg?branch=dev)](https://coveralls.io/github/klahnakoski/mo-threads?branch=dev) \u2190 child thread coverage is missing |\r\n\r\n## module `threads`\r\n\r\nthe main benefits over python's threading library is:\r\n\r\n1. **multi-threaded queues do not use serialization** - serialization is \r\ngreat in the general case, where you may also be communicating between \r\nprocesses, but it is a needless overhead for single-process multi-threading. \r\nit is left to the programmer to ensure the messages put on the queue are \r\nnot changed, which is not ominous demand.\r\n2. **shutdown order is deterministic and explicit** - python's threading \r\nlibrary is missing strict conventions for controlled and orderly shutdown. \r\neach thread can shutdown on its own terms, but is expected to do so expediently.\r\n    * all threads are required to accept a `please_stop` signal; are \r\n    expected to test it in a timely manner; and expected to exit when signalled.\r\n    * all threads have a parent - the parent is responsible for ensuring their children get the `please_stop` signal, and are dead, before stopping themselves. this responsibility is baked into the thread spawning process, \r\n  so you need not deal with it unless you want.\r\n3. uses [**signals**](#signal-class) to simplify logical \r\ndependencies among multiple threads, events, and timeouts.\r\n4. **logging and profiling is integrated** - logging and exception handling \r\nis seamlessly integrated: this means logs are centrally handled, and thread \r\nsafe. parent threads have access to uncaught child thread exceptions, and \r\nthe cprofiler properly aggregates results from the multiple threads.\r\n\r\n\r\n### what's it used for\r\n\r\na good amount of time is spent waiting for underlying c libraries and os\r\nservices to respond to network and file access requests. multiple\r\nthreads can make your code faster, despite the gil, when dealing with those\r\nrequests. for example, by moving logging off the main thread, we can get\r\nup to 15% increase in overall speed because we no longer have the main thread\r\nwaiting for disk writes or remote logging posts. please note, this level of\r\nspeed improvement can only be realized if there is no serialization happening\r\nat the multi-threaded queue.  \r\n\r\n### do not use async\r\n\r\n[actors](http://en.wikipedia.org/wiki/actor_model) are easier to reason about than [async tasks](https://docs.python.org/3/library/asyncio-task.html). mixing regular methods and co-routines (with their `yield from` pollution) is dangerous because:\r\n\r\n1. calling styles between synchronous and asynchronous methods can be easily confused\r\n2. actors can use blocking methods, async can not\r\n3. there is no way to manage resource priority with co-routines.\r\n4. stack traces are lost with co-routines\r\n5. async scope easily escapes lexical scope, which promotes bugs \r\n\r\npython's async efforts are still immature; a re-invention of threading functionality by another name. expect to experience a decade of problems that are already solved by threading; [here is an example](https://www.python.org/dev/peps/pep-0550/).  \r\n\r\n## reading\r\n\r\n* fibers were an async experiment using a stack, as opposed to the state-machine-based async python uses now. it does not apply to my argument, but is an interesting read: [[fibers are] not an appropriate solution for writing scalable concurrent software](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p1364r0.pdf)\r\n\r\n\r\n## writing threaded functions\r\n\r\nall threaded functions must accept a `please_stop` parameter, which is a `signal` to indicate the desire to stop.  the function should check this signal often, and do it's best to promptly return. \r\n\r\n#### simple work loop\r\n\r\nfor threaded functions that perform small chunks of work in some loop; the chunks are small enough that they will complete soon enough. simply check the `please_stop` signal at the start of each loop:\r\n\r\n    def worker(p1, p2, please_stop):\r\n        while not please_stop:\r\n            do_some_small_chunk_of_work(p1)\r\n            \r\n#### one-time work\r\n            \r\nsometimes, threads are launched to perform low priority, one-time work. you may not need to check the `please_stop` signal: \r\n    \r\n    def worker(p1, p2, please_stop):\r\n         do_some_work_and_exit(p1, p2)\r\n\r\n#### passing signals to others\r\n         \r\nthere are many times a more complex `please_stop` checks are required. for example, we want to wait on an input queue for the next task.  many of the methods in `mo-threads` accept `signals` instead of timeouts so they return quickly when signalled. you may pass the `please_stop` signal to these methods, or make your own.  be sure to check if the method returned because it is done, or it returned because it was signaled to stop early.\r\n         \r\n```python \r\ndef worker(source, please_stop):\r\n     while not please_stop:\r\n        data = source.pop(till=please_stop)\r\n        if please_stop:  # did pop() return because of please_stop?\r\n            return\r\n        chunk_of_work(data)\r\n```\r\n\r\n#### combining signals\r\n            \r\nwork might be done on some regular interval: the threaded function will sleep for a period and perform some work. in these cases you can combine signals and `wait()` on either of them:\r\n\r\n```python \r\ndef worker(please_stop):\r\n    while not please_stop:\r\n        next_event = till(seconds=1000)\r\n        (next_event | please_stop).wait()\r\n        if please_stop:  # is wait done because of please_stop?\r\n            return\r\n        chunk_of_work()\r\n```\r\n\r\n## spawning threads\r\n\r\nmost threads will be declared and run in a single line. it is much like python's threading library, except it demands a name for the thread: \r\n\r\n    thread = thread.run(\"name\", function, p1, p2, ...)\r\n    \r\nsometimes you want to separate creation from starting:\r\n\r\n    thread = thread(\"name\", function, p1, p2, ...)\r\n    thread.start()\r\n    \r\n   \r\n### `join()` vs `release()`\r\n\r\nonce a thread is created, a few actions can be performed with the thread object:\r\n\r\n* `join()` - join on `thread` will make the caller thread wait until `thread` has stopped. then, return the resulting value or to re-raise `thread`'s exception in the caller.\r\n\r\n      result = thread.join()     # may raise exception\r\n\r\n* `release()` - will ignore any return value, and post any exception to logging. tracking is still performed; released threads are still properly stopped.  you may still `join()` to guarantee the caller will wait for thread completion, but you risk being too late: the thread may have already completed and logged it's failure.\r\n\r\n      thread.release()     # release thread resources asap, when done\r\n  \r\n* `stopped.wait()` - every thread has a `stopped` signal, which can be used for coordination by other threads. this allows a thread to wait for another to be complete and then resume. no errors or return values are captured\r\n\r\n      thread.stopped.wait()\r\n  \r\n### registering threads\r\n\r\nthreads created without this module can call your code; you want to ensure these \"alien\" threads have finished their work, released the locks, and exited your code before stopping. if you register alien threads, then `mo-threads` will ensure the alien work is done for a clean stop. \r\n\r\n    def my_method():\r\n        with registerthread():\r\n            t = thread.current()   # we can now use mo-threads on this thread \r\n            print(t.name)          # a name is always given to the alien thread \r\n\r\n\r\n## synchronization primitives\r\n\r\nthere are three major aspects of a synchronization primitive:\r\n\r\n* **resource** - monitors and locks can only be owned by one thread at a time\r\n* **binary** - the primitive has only two states\r\n* **irreversible** - the state of the primitive can only be set, or advanced, never reversed\r\n\r\nthe last, *irreversibility* is very useful, but ignored in many threading\r\nlibraries. the irreversibility allows us to model progression; and\r\nwe can allow threads to poll for progress, or be notified of progress. \r\n\r\nthese three aspects can be combined to give us 8 synchronization primitives:\r\n\r\n* `- - -` - semaphore\r\n* `- b -` - event\r\n* `r - -` - monitor\r\n* `r b -` - **[lock](#lock-class)**\r\n* `- - i` - iterator/generator\r\n* `- b i` - **[signal](#signal-class)** (or promise)\r\n* `r - i` - private iterator \r\n* `r b i` - private signal (best implemented as `is_done` boolean flag)\r\n\r\n## `lock` class\r\n\r\nlocks are identical to [threading monitors](https://en.wikipedia.org/wiki/monitor_(synchronization)), except for two differences: \r\n\r\n1. the `wait()` method will **always acquire the lock before returning**. this is an important feature, it ensures every line inside a `with` block has lock acquisition, and is easier to reason about.\r\n2. exiting a lock via `__exit__()` will **always** signal a waiting thread to resume. this ensures no signals are missed, and every thread gets an opportunity to react to possible change.\r\n3. `lock` is **not reentrant**! this is a feature to ensure locks are not held for long periods of time.\r\n\r\n**example**\r\n```python\r\nlock = lock()\r\nwhile not please_stop:\r\n    with lock:\r\n        while not todo:\r\n            lock.wait(seconds=1)\r\n        # do some work\r\n```\r\nin this example, we look for stuff `todo`, and if there is none, we wait for a second. during that time others can acquire the `lock` and add `todo` items. upon releasing the the `lock`, our example code will immediately resume to see what's available, waiting again if nothing is found.\r\n\r\n\r\n## `signal` class\r\n\r\n[the `signal` class](mo_threads/signals.py) is a binary semaphore that can be signalled only once; subsequent signals have no effect.\r\n  * it can be signalled by any thread; \r\n  * any thread can wait on a `signal`; and \r\n  * once signalled, all waiting threads are unblocked, including all subsequent waiting threads. \r\n  * a signal's current state can be accessed by any thread without blocking.\r\n   \r\n`signal` is used to model thread-safe state advancement. it initializes to `false`, and when signalled (with `go()`) becomes `true`. it can not be reversed.  \r\n\r\nsignals are like a promise, but more explicit \r\n\r\n|   signal     |      promise       | python event |\r\n|:------------:|:------------------:|:------------:|\r\n|   s.go()     |    p.resolve()     |    e.set()   |\r\n| s.then(f)    |     p.then(m)      |              |\r\n|  s.wait()    |      await p       |   e.wait()   |\r\n|  bool(s)     |                    |  e.is_set()  |\r\n|   s & t      | promise.all(p, q)  |              |\r\n| s &vert; t   | promise.race(p, q) |              |\r\n\r\n\r\nhere is simple worker that signals when work is done. it is assumed `do_work` is executed by some other thread.\r\n\r\n```python\r\nclass worker:\r\n    def __init__(self):\r\n        self.is_done = signal()\r\n  \r\n    def do_work(self):\r\n        do_some_work()\r\n        self.is_done.go()\r\n```\r\n\r\nyou can attach methods to a `signal`, which will be run, just once, upon `go()`. if already signalled, then the method is run immediately.\r\n\r\n```python\r\nworker = worker()\r\nworker.is_done.then(lambda: print(\"done\"))\r\n```\r\n\r\nyou may also wait on a `signal`, which will block the current thread until the `signal` is a go\r\n\r\n```python\r\nworker.is_done.wait()\r\nprint(\"worker thread is done\")\r\n```\r\n\r\n`signals` are first class, they can be passed around and combined with other signals. for example, using the `__or__` operator (`|`):  `either = lhs | rhs`; `either` will be triggered when `lhs` or `rhs` is triggered.\r\n\r\n```python\r\ndef worker(please_stop):\r\n    while not please_stop:\r\n        #do work \r\n\r\nuser_cancel = signal(\"user cancel\")\r\n...\r\nworker(user_cancel | till(seconds=360))\r\n```\r\n\r\n`signal`s can also be combined using logical and (`&`):  `both = lhs & rhs`; `both` is triggered only when both `lhs` and `rhs` are triggered:\r\n\r\n```python\r\n(workera.stopped & workerb.stopped).wait()\r\nprint(\"both threads are done\")\r\n```\r\n\r\n### differences from python's `event`\r\n\r\n* `signal` is not reversable, while `event` has a `clear()` method\r\n* `signal` allows function chaining using the `then` method\r\n* complex signals can be composed from simple signals using boolean logic  \r\n\r\n\r\n\r\n## `till` class\r\n\r\n[the `till` class](mo-threads/till.py) (short for \"until\") is a special `signal` used to represent timeouts.  \r\n\r\n```python\r\ntill(seconds=20).wait()\r\ntill(till=date(\"21 jan 2016\").unix).wait()\r\n```\r\n\r\nuse `till` rather than `sleep()` because you can combine `till` objects with other `signals`. \r\n\r\n**beware that all `till` objects will be triggered before expiry when the main thread is asked to shutdown**\r\n\r\n\r\n## `command` class\r\n\r\nif you find process creation is too slow, the `command` class can be used to recycle existing processes.  it has the same interface as `process`, yet it manages a `bash` (or `cmd.exe`) session for you in the background.\r\n\r\n \r\n",
  "docs_url": null,
  "keywords": "",
  "license": "mpl 2.0",
  "name": "mo-threads",
  "package_url": "https://pypi.org/project/mo-threads/",
  "project_url": "https://pypi.org/project/mo-threads/",
  "project_urls": {
    "Homepage": "https://github.com/klahnakoski/mo-threads"
  },
  "release_url": "https://pypi.org/project/mo-threads/6.458.23316/",
  "requires_dist": [
    "mo-dots ==9.455.23316",
    "mo-future ==7.449.23304",
    "mo-logs ==8.456.23316",
    "mo-math ==7.455.23316",
    "mo-times ==5.458.23316",
    "mo-testing ; extra == 'tests'",
    "jx-python ; extra == 'tests'",
    "psutil ; extra == 'tests'",
    "objgraph ; extra == 'tests'",
    "mo-files >=6.0.0 ; extra == 'tests'"
  ],
  "requires_python": "",
  "summary": "more threads! simpler and faster threading.",
  "version": "6.458.23316",
  "releases": [],
  "developers": [
    "kyle@lahnakoski.com",
    "kyle_lahnakoski"
  ],
  "kwds": "threaded threading threads branch concurrent",
  "license_kwds": "mpl 2.0",
  "libtype": "pypi",
  "id": "pypi_mo_threads",
  "homepage": "https://github.com/klahnakoski/mo-threads",
  "release_count": 78,
  "dependency_ids": [
    "pypi_jx_python",
    "pypi_mo_dots",
    "pypi_mo_files",
    "pypi_mo_future",
    "pypi_mo_logs",
    "pypi_mo_math",
    "pypi_mo_testing",
    "pypi_mo_times",
    "pypi_objgraph",
    "pypi_psutil"
  ],
  "documentation_summary": "The GitHub repository \"klahnakoski/mo-threads\" focuses on providing a more efficient and easier approach to threading in Python. It aims to overcome limitations of Python's standard threading library by avoiding serialization in multi-threaded queues, ensuring deterministic and explicit shutdown orders, and integrating logging and profiling. The library allows threads to have parents for better control and uses signals for managing dependencies among threads, events, and timeouts. It's particularly useful for improving performance in tasks that involve waiting for responses from C libraries or OS services, potentially speeding up code execution by up to 15% in certain scenarios. The repository is licensed under MPL-2.0 and includes various features like synchronization primitives, the ability to spawn threads easily, and special classes like Signal and Till for advanced threading operations.",
  "embedding": [
    -0.040356364101171494,
    -0.01682235300540924,
    -0.021301591768860817,
    -0.02305872179567814,
    0.010650795884430408,
    0.00890806969255209,
    0.0027473149821162224,
    0.0015122834593057632,
    -0.03502736613154411,
    -0.021099954843521118,
    -0.006776470225304365,
    0.011882226914167404,
    -0.021834492683410645,
    0.0121774822473526,
    -0.0022918295580893755,
    -0.021099954843521118,
    0.02210814319550991,
    -0.02343319170176983,
    -0.004349614959210157,
    -0.020495040342211723,
    0.029467923566699028,
    0.010643594898283482,
    -0.00818073283880949,
    -0.029669560492038727,
    -0.005069750361144543,
    0.03321262449026108,
    0.03534422442317009,
    -0.025363152846693993,
    -0.02006296068429947,
    0.010283526964485645,
    0.03260771185159683,
    0.0019623676780611277,
    -0.02098473347723484,
    -0.001739125931635499,
    -0.023116331547498703,
    -0.016044607385993004,
    0.025463972240686417,
    0.01798897050321102,
    0.025838442146778107,
    0.0025960865896195173,
    0.023634828627109528,
    -0.0028049256652593613,
    0.0075974236242473125,
    -0.018449857831001282,
    -0.03134027495980263,
    0.010549977421760559,
    0.002684303093701601,
    -0.03226204589009285,
    -0.004738488234579563,
    -0.00022740512213204056,
    0.0264433566480875,
    0.013416114263236523,
    -0.03131146728992462,
    0.013027241453528404,
    0.013041644357144833,
    0.014777169562876225,
    0.009253734722733498,
    0.014640343375504017,
    -0.0222665723413229,
    -0.0144675113260746,
    0.008807250298559666,
    -0.003622278803959489,
    -0.035286612808704376,
    0.009167318232357502,
    0.001292642205953598,
    0.008029504679143429,
    -0.0378790982067585,
    0.022957902401685715,
    -0.014453108422458172,
    -0.00807991437613964,
    0.01964528113603592,
    0.022885888814926147,
    0.005278589203953743,
    0.0005220978637225926,
    0.05795646086335182,
    -0.034278422594070435,
    -0.017801735550165176,
    0.04188304767012596,
    0.011601374484598637,
    -0.02177688106894493,
    0.007892679423093796,
    0.007791860494762659,
    -0.009318546392023563,
    0.023418789729475975,
    0.004018353298306465,
    0.011925434693694115,
    0.008483190089464188,
    0.016793547198176384,
    -0.025507180020213127,
    -0.022669848054647446,
    0.03318382054567337,
    0.002385447034612298,
    0.016577506437897682,
    0.0193572286516428,
    -0.004770894069224596,
    0.03718777000904083,
    -0.04228632524609566,
    0.009923459962010384,
    0.0017544288421049714,
    -0.013394510373473167,
    -0.01644788309931755,
    -0.004605263005942106,
    0.00046808773186057806,
    -0.011666186153888702,
    -0.037619851529598236,
    -0.013632155023515224,
    -0.0023782458156347275,
    -0.012062260881066322,
    0.030792970210313797,
    -0.010845232754945755,
    -0.030504917725920677,
    0.024326158687472343,
    -0.013747376389801502,
    -0.0328957661986351,
    -0.01015390269458294,
    -0.01719682291150093,
    0.011291716247797012,
    0.008166330866515636,
    0.004090366419404745,
    -0.010982058010995388,
    0.0006868287455290556,
    0.018464259803295135,
    -0.008569605648517609,
    0.0069529032334685326,
    0.038397595286369324,
    -0.008605612441897392,
    -0.009505781345069408,
    0.007006912957876921,
    -0.013416114263236523,
    0.00041700314613990486,
    0.006945701781660318,
    0.0033450268674641848,
    0.003195598954334855,
    0.0015500904992222786,
    -0.009152915328741074,
    0.006726060528308153,
    -0.012688778340816498,
    -0.03583391755819321,
    -0.017081601545214653,
    -0.01814740151166916,
    -0.006970906630158424,
    0.01453232392668724,
    0.0028337310068309307,
    0.0010378945153206587,
    -0.007467799354344606,
    0.048018600791692734,
    0.008972881361842155,
    -0.0009631805005483329,
    -0.011399736627936363,
    0.013106456026434898,
    0.006891691591590643,
    -0.026904242113232613,
    -0.003051572013646364,
    -0.011277313344180584,
    -0.0027095077093690634,
    0.013020040467381477,
    -0.004918521735817194,
    0.012019052170217037,
    0.004457635339349508,
    -0.0025870848912745714,
    0.011882226914167404,
    0.02327476255595684,
    -0.02177688106894493,
    -0.02598246932029724,
    -0.009649808518588543,
    0.023577218875288963,
    0.016203036531805992,
    -0.0039319368079304695,
    0.0027383132837712765,
    0.006697255186736584,
    -0.012458334676921368,
    -0.0010180907556787133,
    -0.03695732727646828,
    0.0065172212198376656,
    -0.0032316057477146387,
    0.01860828697681427,
    -0.012105468660593033,
    0.006214764900505543,
    -0.004601662512868643,
    -0.0069276983849704266,
    0.005800687242299318,
    -0.007150940131396055,
    0.006682852283120155,
    0.04084605351090431,
    -0.03450886905193329,
    0.018550677224993706,
    -0.0004059760831296444,
    -0.0064776139333844185,
    0.005368606187403202,
    0.009700218215584755,
    0.0037843091413378716,
    0.019832516089081764,
    0.0072481585666537285,
    -0.019184395670890808,
    -0.5738035440444946,
    0.014762766659259796,
    -0.026789020746946335,
    -0.03223324194550514,
    -0.017960166558623314,
    0.000793948769569397,
    0.0050121392123401165,
    -0.016678325831890106,
    -0.026198510080575943,
    0.015454096719622612,
    -0.017600098624825478,
    0.017182420939207077,
    0.015151639468967915,
    -0.02114316262304783,
    -0.01119809877127409,
    -0.015756553038954735,
    0.0016536099137738347,
    -0.03681330010294914,
    -0.0220649354159832,
    -0.0032838154584169388,
    -0.013660959899425507,
    0.018219415098428726,
    0.010852433741092682,
    0.008764042519032955,
    -0.01213427446782589,
    0.010290728881955147,
    0.03131146728992462,
    0.008015101775527,
    -0.001713021076284349,
    0.011579770594835281,
    -0.033990371972322464,
    0.012350314296782017,
    0.03589152544736862,
    -0.021992921829223633,
    0.060548946261405945,
    -0.009440969675779343,
    -0.015266860835254192,
    0.04617505520582199,
    -0.0003724448033608496,
    0.030821776017546654,
    -0.024585407227277756,
    -0.016059009358286858,
    0.031369078904390335,
    -0.007104131393134594,
    0.010859635658562183,
    0.024614213034510612,
    0.021575244143605232,
    0.0030119644943624735,
    -0.00191735930275172,
    -0.018550677224993706,
    0.011349326930940151,
    0.01724003069102764,
    0.010665198788046837,
    0.006376795005053282,
    -0.00878564640879631,
    -0.010521171614527702,
    0.011349326930940151,
    0.008389572612941265,
    0.0036240792833268642,
    0.0009514783159829676,
    -0.018003374338150024,
    0.009376157075166702,
    0.02197851985692978,
    -0.026112094521522522,
    -0.02369244024157524,
    0.01860828697681427,
    -0.02343319170176983,
    -0.016721533611416817,
    -0.005055347457528114,
    -0.030130445957183838,
    0.013768980279564857,
    0.005001337267458439,
    0.013408913277089596,
    -0.012415126897394657,
    0.009642607532441616,
    0.04778815433382988,
    0.015598122961819172,
    0.009505781345069408,
    -0.004853709600865841,
    0.027278712019324303,
    0.013164066709578037,
    0.004090366419404745,
    0.00951298326253891,
    -0.02035101316869259,
    0.07944528758525848,
    0.0013322497252374887,
    -0.013848195783793926,
    -0.0077558537013828754,
    0.035949137061834335,
    0.0014672749675810337,
    -0.020163778215646744,
    0.02230978198349476,
    -0.0033594295382499695,
    -0.0337311215698719,
    0.032031603157520294,
    0.0399530865252018,
    -0.01365375891327858,
    0.0010630992474034429,
    -0.009433767758309841,
    -0.037447016686201096,
    -0.02943911775946617,
    -0.026616187766194344,
    -0.002392648486420512,
    -0.005743076093494892,
    0.0293527003377676,
    -0.004299205727875233,
    0.004389222711324692,
    0.002090191701427102,
    0.038858480751514435,
    -0.022871486842632294,
    0.021287189796566963,
    -0.022410599514842033,
    -0.0003114583669230342,
    -0.01500761229544878,
    0.01677914522588253,
    -0.033817537128925323,
    0.032204434275627136,
    0.008295955136418343,
    0.02056705392897129,
    -0.01940043643116951,
    0.014892390929162502,
    -0.004295605234801769,
    -0.003708695061504841,
    0.011010863818228245,
    0.027379531413316727,
    0.01618863455951214,
    0.02488786354660988,
    -0.021013537421822548,
    -0.027077075093984604,
    0.004029155243188143,
    0.0015320871025323868,
    -0.010182708501815796,
    0.019558865576982498,
    -0.02156084030866623,
    0.03275173902511597,
    0.003222604049369693,
    0.013977820053696632,
    -0.0045044440776109695,
    0.03617957979440689,
    -0.023001110181212425,
    -0.023044317960739136,
    0.025795234367251396,
    0.015410888008773327,
    -0.013351302593946457,
    0.00477809552103281,
    -0.02730751782655716,
    0.0023440392687916756,
    -0.002268425188958645,
    -0.003859923454001546,
    -0.010938850231468678,
    -0.006913295481353998,
    -0.0022774268873035908,
    -0.030216863378882408,
    0.004925723187625408,
    -0.015598122961819172,
    -0.00993066094815731,
    0.0020523846615105867,
    -0.012076662853360176,
    -0.028502941131591797,
    -0.002401650184765458,
    -0.0033162215258926153,
    0.008634418249130249,
    -0.0055198343470692635,
    0.03442244976758957,
    -0.04058680683374405,
    -0.0002923297870438546,
    -0.038743261247873306,
    0.03442244976758957,
    -0.0071977488696575165,
    -0.028128471225500107,
    -0.016635118052363396,
    -0.02697625569999218,
    0.007979094982147217,
    -0.006711657624691725,
    0.009131311438977718,
    -0.014388296753168106,
    -0.010780420154333115,
    0.023202748969197273,
    -0.02693304792046547,
    -0.001331349485553801,
    0.0031595921609550714,
    0.028690176084637642,
    -0.049516480416059494,
    -0.007590222638100386,
    0.02635693922638893,
    0.015497304499149323,
    0.02972717210650444,
    0.010780420154333115,
    -0.013632155023515224,
    0.012335912324488163,
    0.01752808503806591,
    -0.0009892854141071439,
    -0.03756223991513252,
    0.017139211297035217,
    -0.004021953791379929,
    -0.006787272170186043,
    0.015727747231721878,
    -0.013826590962707996,
    0.03770626708865166,
    0.025492778047919273,
    0.023087527602910995,
    -0.0030047630425542593,
    0.008403974585235119,
    -0.02439817227423191,
    -0.03064894489943981,
    0.004788897465914488,
    0.017499279230833054,
    -0.02939590997993946,
    0.01986132189631462,
    0.0068628862500190735,
    0.01860828697681427,
    -0.027782807126641273,
    -0.02069667913019657,
    0.0009271737653762102,
    0.008656022138893604,
    0.03508497402071953,
    -0.029525533318519592,
    0.021632853895425797,
    -0.00537940813228488,
    -0.022093741223216057,
    0.01732644811272621,
    0.02459981106221676,
    0.0038707253988832235,
    0.009937862865626812,
    -0.013063248246908188,
    0.0006791772902943194,
    0.03822476416826248,
    0.034192007035017014,
    0.00467367609962821,
    -0.006492016837000847,
    -0.024743836373090744,
    0.011673388071358204,
    0.004219990689307451,
    -0.018968354910612106,
    0.02472943440079689,
    0.0089512774720788,
    0.024052508175373077,
    -0.008151927962899208,
    0.041854243725538254,
    -0.03908892720937729,
    0.00046808773186057806,
    0.029410311952233315,
    0.026529772207140923,
    -0.015526109375059605,
    0.00292374799028039,
    0.009621002711355686,
    0.027552364394068718,
    -0.024239743128418922,
    -0.00836796872317791,
    0.012400723993778229,
    -0.010398749262094498,
    0.02726431004703045,
    0.004788897465914488,
    0.011478951200842857,
    0.01994773931801319,
    -0.002032581018283963,
    0.009476976469159126,
    -0.009700218215584755,
    0.034163203090429306,
    0.007424591574817896,
    -0.003109182696789503,
    -0.005933912005275488,
    0.03387514874339104,
    0.006401999853551388,
    0.0199765432626009,
    -0.018219415098428726,
    0.004788897465914488,
    -0.035949137061834335,
    0.008072713389992714,
    -0.016663923859596252,
    -0.02107114903628826,
    -0.008699229918420315,
    -0.0026699004229158163,
    -0.025780832394957542,
    0.03018805757164955,
    0.013639356009662151,
    0.02272745966911316,
    0.024167729541659355,
    -0.004515246022492647,
    -0.004133574664592743,
    -0.024124521762132645,
    -0.027826014906167984,
    0.009772231802344322,
    0.01047076191753149,
    -0.02884860709309578,
    -0.04124933108687401,
    -0.009174519218504429,
    0.007547014392912388,
    0.01724003069102764,
    -0.008706431835889816,
    0.007482202257961035,
    0.01627505011856556,
    -0.016750339418649673,
    0.015583720989525318,
    -0.005563042592257261,
    0.01344492007046938,
    0.02230978198349476,
    -0.0038743261247873306,
    0.011082877404987812,
    -0.015324472449719906,
    -0.0009307744330726564,
    0.009167318232357502,
    -0.013185671530663967,
    0.0022018125746399164,
    0.025737622752785683,
    -0.00042915542144328356,
    0.011918233707547188,
    -0.02439817227423191,
    -0.0071977488696575165,
    -0.017052795737981796,
    0.017038393765687943,
    -0.010744413360953331,
    0.0012782395351678133,
    -0.022554626688361168,
    0.015036418102681637,
    0.011378132738173008,
    0.038282375782728195,
    0.010463560931384563,
    0.01953005976974964,
    -0.0037447018548846245,
    -0.01590058021247387,
    -0.01070120558142662,
    -0.022453807294368744,
    -0.005426216870546341,
    0.042948849499225616,
    0.03217563033103943,
    0.009901856072247028,
    -0.0018993559060618281,
    -0.05519114434719086,
    -0.0028175280895084143,
    -0.007662236224859953,
    -0.0017121208366006613,
    0.011176494881510735,
    -9.170468729280401e-06,
    0.006369593553245068,
    0.028459733352065086,
    -0.004500843584537506,
    -0.007402987219393253,
    -0.0006904294132255018,
    -0.01336570456624031,
    -0.02259783446788788,
    0.021474424749612808,
    0.0033792334143072367,
    -0.02177688106894493,
    0.03309740126132965,
    -0.00993066094815731,
    0.015799760818481445,
    0.007885477505624294,
    0.035315416753292084,
    0.005717871710658073,
    0.009664211422204971,
    0.031023414805531502,
    0.002111795824021101,
    -0.024297352880239487,
    -0.00918172113597393,
    -0.015151639468967915,
    0.0006211164291016757,
    0.03168593719601631,
    -0.017096003517508507,
    0.041854243725538254,
    0.009095304645597935,
    0.010017077438533306,
    -0.01752808503806591,
    0.0007120334194041789,
    -0.0096786143258214,
    0.011262910440564156,
    -0.008555203676223755,
    0.004666474647819996,
    0.0010252922074869275,
    -0.023173943161964417,
    -0.017009587958455086,
    0.012667174451053143,
    -0.017470473423600197,
    0.002545677125453949,
    0.048191431909799576,
    0.005332599394023418,
    -0.05519114434719086,
    -0.010578782297670841,
    0.0387144573032856,
    0.009945063851773739,
    -0.013768980279564857,
    -0.0020595858804881573,
    -0.0023584419395774603,
    -0.017038393765687943,
    -0.006103144027292728,
    -0.04136455059051514,
    0.011875025928020477,
    0.017009587958455086,
    0.009685815311968327,
    -0.026947449892759323,
    0.008857659995555878,
    0.02655857801437378,
    -0.03168593719601631,
    0.0025474773719906807,
    -0.011983045376837254,
    -0.019832516089081764,
    -0.036986131221055984,
    -0.018392246216535568,
    0.03880087286233902,
    0.016131022945046425,
    0.005332599394023418,
    0.00040327556780539453,
    0.004533249419182539,
    0.0332990400493145,
    -0.006718859076499939,
    -0.039780255407094955,
    -0.018795521929860115,
    -0.005537837743759155,
    0.004086765926331282,
    -0.001834543771110475,
    0.031023414805531502,
    0.027235504239797592,
    0.0020181783474981785,
    0.027696391567587852,
    0.013718570582568645,
    0.01706719771027565,
    0.011313320137560368,
    -0.022324183955788612,
    0.008836056105792522,
    0.02598246932029724,
    0.030792970210313797,
    0.02902143821120262,
    0.012227891944348812,
    -0.029338298365473747,
    -0.00932574737817049,
    -0.015842968598008156,
    -0.0002482215058989823,
    0.010838030837476254,
    -0.021791283041238785,
    -0.012242293916642666,
    -0.004814102314412594,
    0.015583720989525318,
    -0.05095674842596054,
    -0.0016149026341736317,
    0.0324636846780777,
    0.001435769023373723,
    0.006474013440310955,
    0.016894366592168808,
    0.0020271798130124807,
    0.01852187141776085,
    0.006063536275178194,
    0.030447306111454964,
    0.00907370075583458,
    0.005631455220282078,
    0.025247931480407715,
    -0.026630591601133347,
    0.003773507196456194,
    0.027912430465221405,
    -0.015137236565351486,
    -0.017600098624825478,
    0.0199765432626009,
    -0.012415126897394657,
    -0.0025096703320741653,
    -0.003253209637477994,
    -0.003422441426664591,
    0.013020040467381477,
    -0.026284925639629364,
    -0.05608411133289337,
    -0.0058078886941075325,
    -0.01653429865837097,
    -0.011745401658117771,
    0.022698653861880302,
    0.001856147893704474,
    0.024124521762132645,
    -0.00508055230602622,
    0.009304143488407135,
    -0.0011108082253485918,
    -0.017801735550165176,
    -0.002623091684654355,
    -0.030735360458493233,
    -0.018593885004520416,
    0.010614789091050625,
    0.007935887202620506,
    0.030447306111454964,
    -0.010946051217615604,
    0.009880251251161098,
    -0.0035916732158511877,
    0.006434405688196421,
    -0.0018831528723239899,
    -0.027926834300160408,
    -0.000646321102976799,
    -0.017844945192337036,
    0.023663634434342384,
    0.015252458862960339,
    0.02514711208641529,
    0.0017139211995527148,
    0.038109540939331055,
    0.003204600652679801,
    -0.00297595770098269,
    -0.020840706303715706,
    -0.000854260113555938,
    0.014179456979036331,
    -0.004698880482465029,
    0.005390210077166557,
    0.03485453128814697,
    0.016908768564462662,
    -0.008483190089464188,
    -0.021258383989334106,
    -0.007215752266347408,
    0.03485453128814697,
    -0.00420558825135231,
    0.00857680756598711,
    -0.012796798720955849,
    -0.011169292964041233,
    -0.002828330034390092,
    -0.004450433887541294,
    -0.006697255186736584,
    -0.01644788309931755,
    -0.009973869659006596,
    -0.024095715954899788,
    0.0316283293068409,
    0.0009379757684655488,
    0.015310069546103477,
    0.022497016936540604,
    0.008972881361842155,
    0.005022941157221794,
    0.004000349901616573,
    0.006618040148168802,
    0.037447016686201096,
    -0.01585737243294716,
    -0.0031901979818940163,
    -0.037447016686201096,
    0.023534011095762253,
    -0.008627217262983322,
    0.0027311118319630623,
    0.015482901595532894,
    0.019558865576982498,
    -0.003487253561615944,
    -0.004479239694774151,
    0.003759104525670409,
    -0.013869799673557281,
    -0.005058947950601578,
    0.027955640107393265,
    -0.002290029078722,
    -0.010946051217615604,
    -0.02580963633954525,
    -0.026299329474568367,
    -0.03813834860920906,
    0.008771243505179882,
    0.00292374799028039,
    0.004594461061060429,
    -0.01636146567761898,
    -0.020379818975925446,
    0.0026572979986667633,
    0.026875436305999756,
    0.005408213473856449,
    0.03255010023713112,
    -0.0010252922074869275,
    0.025031890720129013,
    -0.0014699754538014531,
    0.02027900144457817,
    0.023173943161964417,
    -0.008223941549658775,
    -0.0007831467664800584,
    0.01953005976974964,
    0.04075963795185089,
    0.0146763501688838,
    0.0065676309168338776,
    -0.00820233765989542,
    0.009837043471634388,
    -0.006247170735150576,
    -0.027336323633790016,
    -0.027408337220549583,
    0.002822929061949253,
    0.039117731153964996,
    0.00321000162512064,
    -0.04254557192325592,
    0.006293979473412037,
    -0.016635118052363396,
    -0.011630179360508919,
    -0.023202748969197273,
    -0.001461873995140195,
    0.014654746279120445,
    -0.00824554543942213,
    -0.03223324194550514,
    0.0370437428355217,
    0.014762766659259796,
    0.014035430736839771,
    0.0070249163545668125,
    -0.011767005547881126,
    -0.014820377342402935,
    -0.028531746938824654,
    -0.02215135097503662,
    0.0023620426654815674,
    0.009750626981258392,
    0.019674086943268776,
    -0.002545677125453949,
    -0.026861034333705902,
    0.028863009065389633,
    -0.009404962882399559,
    -0.00622196588665247,
    -0.013711369596421719,
    -0.01136372983455658,
    0.03499855846166611,
    -0.011025266721844673,
    0.028963828459382057,
    -0.038858480751514435,
    -0.015079625882208347,
    0.004086765926331282,
    -0.029755976051092148,
    -0.01321447640657425,
    4.9846843467094004e-05,
    0.01413624919950962,
    0.01590058021247387,
    0.021056747063994408,
    0.002333237323909998,
    -0.006081539671868086,
    0.004436031449586153,
    0.0014276675647124648,
    -0.007212151773273945,
    -0.0033630302641540766,
    -0.0018525471678003669,
    0.025593597441911697,
    -0.0264433566480875,
    -0.018132997676730156,
    -0.030130445957183838,
    -0.010297929868102074,
    0.00605633482336998,
    -0.006297580432146788,
    -0.0013304493622854352,
    -1.0323809874535073e-05,
    0.0536932609975338,
    0.0008268049568869174,
    0.027465946972370148,
    -0.006463211495429277,
    -0.009671412408351898,
    -0.012775193899869919,
    0.01436669286340475,
    -0.004047158639878035,
    -0.028416525572538376,
    0.006808876059949398,
    -0.008922472596168518,
    -0.020739886909723282,
    -0.02023579180240631,
    -0.0029201472643762827,
    0.003265812061727047,
    -0.009880251251161098,
    -0.0075974236242473125,
    -0.007064524106681347,
    0.019386032596230507,
    -0.0020721883047372103,
    -0.020091764628887177,
    0.003460248466581106,
    0.03243487700819969,
    -0.03148430213332176,
    -0.007140138186514378,
    0.026702605187892914,
    0.01693757437169552,
    -0.002327836351469159,
    -0.001045095850713551,
    -0.01075881626456976,
    -0.016577506437897682,
    -0.04021233692765236,
    -0.038570430129766464,
    -0.0036150775849819183,
    -0.006895292084664106,
    -0.029525533318519592,
    0.013286489993333817,
    0.013380107469856739,
    -0.04672235623002052,
    -0.01803218014538288,
    0.024009300395846367,
    -0.0089512774720788,
    -0.009837043471634388,
    -0.06031850352883339,
    0.008929673582315445,
    0.013516933657228947,
    0.012595160864293575,
    -0.0007399386959150434,
    -0.002021778840571642,
    0.02118637040257454,
    0.031282663345336914,
    -0.03200279921293259,
    -0.03301098570227623,
    -0.026068884879350662,
    0.03168593719601631,
    0.014381094835698605,
    -0.027451545000076294,
    -0.01581416465342045,
    0.007827866822481155,
    -0.03231965750455856,
    -0.013092054054141045,
    -0.012688778340816498,
    0.022842681035399437,
    0.014834780246019363,
    -0.004828504752367735,
    -0.0005103956791572273,
    0.01206946186721325,
    -0.0017184220487251878,
    0.0048897163942456245,
    -0.04050039127469063,
    -0.0008929673349484801,
    -0.01927081122994423,
    0.014280276373028755,
    -0.001929961727000773,
    0.008728035725653172,
    -0.057639602571725845,
    0.006369593553245068,
    0.009901856072247028,
    0.00017159465642180294,
    -0.004180383402854204,
    0.024038104340434074,
    0.00406876252964139,
    0.012141475453972816,
    -0.008800049312412739,
    -0.01806098408997059,
    -0.005872700829058886,
    -0.007993497885763645,
    0.023289164528250694,
    -0.022828279063105583,
    -0.01798897050321102,
    0.01915558986365795,
    0.01304884534329176,
    -0.024340562522411346,
    -0.0018633492290973663,
    0.005314595997333527,
    -0.009671412408351898,
    -0.004432430490851402,
    -0.012796798720955849,
    -0.0112413065508008,
    0.028114069253206253,
    -0.0026987057644873857,
    0.020797498524188995,
    0.014805974438786507,
    0.014661948196589947,
    0.022756265476346016,
    -0.005494629964232445,
    -0.004990535322576761,
    0.00240345043130219,
    0.0011090078623965383,
    -0.022828279063105583,
    -0.0019407636718824506,
    0.026112094521522522,
    0.007388584781438112,
    -0.013660959899425507,
    -0.003269412787631154,
    0.03499855846166611,
    0.0007795460987836123,
    0.019746100530028343,
    -0.01574215106666088,
    -0.02294350042939186,
    -0.009023291058838367,
    -0.01669272780418396,
    0.020077362656593323,
    -0.025910455733537674,
    0.013329697772860527,
    0.013020040467381477,
    0.0332990400493145,
    -0.0027113081887364388,
    -0.027077075093984604,
    -0.028402123600244522,
    -0.02144561894237995,
    0.02140241116285324,
    -0.003483652835711837,
    0.006636043544858694,
    -0.01948685199022293,
    -0.008648821152746677,
    -0.014762766659259796,
    -0.026673799380660057,
    -0.01469795498996973,
    0.19253528118133545,
    -0.002194611355662346,
    0.007827866822481155,
    0.033327847719192505,
    0.012307106517255306,
    0.021618451923131943,
    0.016059009358286858,
    0.010290728881955147,
    -0.009837043471634388,
    0.03459528461098671,
    0.0003985496878158301,
    -0.02294350042939186,
    0.005948314908891916,
    0.003038969589397311,
    -0.002752715954557061,
    -0.012897617183625698,
    0.00022740512213204056,
    -0.035315416753292084,
    -0.03157071769237518,
    0.011730998754501343,
    0.0036510841455310583,
    -0.02369244024157524,
    -0.01781613938510418,
    -0.0332990400493145,
    0.004057960584759712,
    0.0008961179410107434,
    -0.00257628271356225,
    -0.015266860835254192,
    0.007539812941104174,
    -0.012328710407018661,
    -0.026587381958961487,
    0.024426978081464767,
    -0.0179025549441576,
    -0.01807538792490959,
    -0.027926834300160408,
    -0.0119686434045434,
    0.014661948196589947,
    -0.01469795498996973,
    0.014935598708689213,
    0.007921484299004078,
    0.005602649878710508,
    -0.00944817066192627,
    -0.007352577988058329,
    -0.006470412481576204,
    0.008900867775082588,
    -0.0013133460888639092,
    -0.009649808518588543,
    0.003942738752812147,
    -0.023634828627109528,
    0.006113945972174406,
    -0.024571005254983902,
    0.001010889420285821,
    0.0002671250549610704,
    0.001262036501429975,
    0.0078062629327178,
    -0.029900003224611282,
    -0.033327847719192505,
    0.01794576272368431,
    0.012155878357589245,
    0.007021315861493349,
    -0.008792848326265812,
    0.020365417003631592,
    -0.02360602468252182,
    0.034566476941108704,
    -0.04908439889550209,
    0.022381793707609177,
    -0.04516686499118805,
    -0.0008650621166452765,
    -0.010621991008520126,
    -0.004626867361366749,
    -0.021834492683410645,
    -0.026212912052869797,
    0.009102505631744862,
    -0.0247726421803236,
    -0.0023476399946957827,
    -0.008115921169519424,
    0.026155302301049232,
    0.01086683664470911,
    0.015425290912389755,
    0.015396485105156898,
    -0.0014843782410025597,
    0.004097567871212959,
    -0.0010630992474034429,
    0.0007669437327422202,
    -0.009909057058393955,
    -0.0011522159911692142,
    0.03335665166378021,
    -0.003413439728319645,
    0.0108236288651824,
    -0.011010863818228245,
    -0.008562404662370682,
    -0.03298218175768852,
    0.0048501091077923775,
    -0.0026825028471648693,
    -0.007161742076277733,
    -0.0030551725067198277,
    0.0012683377135545015,
    0.009138512425124645,
    -0.011543763801455498,
    0.001587897539138794,
    -0.017081601545214653,
    0.01376177929341793,
    0.007064524106681347,
    -0.013344100676476955,
    -0.0076478333212435246,
    -0.0035790707916021347,
    0.0031163841485977173,
    0.017297642305493355,
    0.014733961783349514,
    -0.03306859731674194,
    -0.013228879310190678,
    -0.005876301322132349,
    0.006956503726541996,
    -0.007827866822481155,
    0.020552651956677437,
    0.0042667994275689125,
    -0.021171968430280685,
    -0.022828279063105583,
    0.015828566625714302,
    0.009167318232357502,
    -0.002801324939355254,
    -0.010557178407907486,
    -0.008987284265458584,
    -0.010017077438533306,
    -0.029251882806420326,
    -0.027710793539881706,
    -0.019890127703547478,
    0.013329697772860527,
    0.007863873615860939,
    -0.0031631928868591785,
    0.00366908754222095,
    -0.027998847886919975,
    0.021200772374868393,
    -0.012933623977005482,
    -0.007799061480909586,
    -0.010730011388659477,
    -0.012767992913722992,
    -0.003483652835711837,
    -0.014640343375504017,
    -0.004767293576151133,
    -0.027581168338656425,
    -0.000216940650716424,
    -0.008720834739506245,
    -0.001908357604406774,
    0.022756265476346016,
    -0.02230978198349476,
    -0.016260648146271706,
    0.03900250792503357,
    -0.017672112211585045,
    0.006189560052007437,
    -0.0017580294515937567,
    -0.0006121147307567298,
    0.014834780246019363,
    -0.028690176084637642,
    -0.0062903789803385735,
    -0.026385745033621788,
    -0.01847866363823414,
    -0.011788609437644482,
    0.010449158027768135,
    -0.001478977152146399,
    -0.03822476416826248,
    -0.006463211495429277,
    -0.015598122961819172,
    0.01015390269458294,
    -0.03442244976758957,
    -0.021431216970086098,
    -0.18308711051940918,
    0.010182708501815796,
    0.01496440451592207,
    -0.025550387799739838,
    0.022929096594452858,
    -0.027249906212091446,
    0.01860828697681427,
    0.01205505896359682,
    -0.020466236397624016,
    -0.02743714116513729,
    0.005692666862159967,
    -0.00366908754222095,
    0.005656660068780184,
    -0.021532034501433372,
    -0.00766943721100688,
    -0.0014582732692360878,
    0.003712295787408948,
    -0.0022828278597444296,
    0.026126496493816376,
    0.025334348902106285,
    0.03701493889093399,
    -0.03684210404753685,
    0.0024124521296471357,
    0.008490391075611115,
    0.018809925764799118,
    -0.010139500722289085,
    0.0005932111525908113,
    0.012040656991302967,
    0.023577218875288963,
    -0.037619851529598236,
    -0.02347639948129654,
    0.02305872179567814,
    0.023865273222327232,
    0.01574215106666088,
    0.0466359406709671,
    0.03217563033103943,
    0.01836344227194786,
    -0.011327723041176796,
    -0.005851096473634243,
    -0.014921196736395359,
    0.02369244024157524,
    0.021589646115899086,
    0.023260358721017838,
    -0.015439693816006184,
    0.003985946998000145,
    0.002732912078499794,
    0.01026192307472229,
    -0.02068227529525757,
    -0.007691041566431522,
    -0.026702605187892914,
    0.03067774884402752,
    -0.007993497885763645,
    0.000581058906391263,
    0.009001687169075012,
    0.003751903073862195,
    -0.005966318305581808,
    0.011875025928020477,
    0.004936525132507086,
    0.007827866822481155,
    -0.012912020087242126,
    -0.0031901979818940163,
    -0.015396485105156898,
    0.006128348410129547,
    0.003148790216073394,
    -0.03448006138205528,
    -0.00764063186943531,
    -0.010686802677810192,
    0.03946339711546898,
    -0.029900003224611282,
    0.007417390123009682,
    -0.008929673582315445,
    0.02856055274605751,
    0.007547014392912388,
    -0.018464259803295135,
    0.023461997509002686,
    0.01640467531979084,
    -0.013934611342847347,
    0.02239619754254818,
    0.0241389237344265,
    0.006859285291284323,
    -0.02135920338332653,
    0.05274268612265587,
    0.017211224883794785,
    0.011644582264125347,
    0.011644582264125347,
    -0.019256409257650375,
    0.00420558825135231,
    -0.006549627520143986,
    -0.0199765432626009,
    -0.019011562690138817,
    0.029698366299271584,
    0.00423439359292388,
    0.005192173179239035,
    -0.010024278424680233,
    0.006834080908447504,
    0.016375869512557983,
    0.02052384614944458,
    -0.0216472577303648,
    0.001626604818738997,
    -0.01577095501124859,
    0.012955227866768837,
    0.011450146324932575,
    -0.014309081248939037,
    -0.007878276519477367,
    0.034278422594070435,
    0.02169046550989151,
    -0.023130735382437706,
    0.030418500304222107,
    0.042113494127988815,
    0.016087815165519714,
    -0.012667174451053143,
    -0.007158141583204269,
    0.010182708501815796,
    0.008029504679143429,
    -0.017254434525966644,
    0.03217563033103943,
    0.036698076874017715,
    -0.0199909470975399,
    0.018968354910612106,
    0.017052795737981796,
    0.04692399501800537,
    0.010708406567573547,
    -0.02411011792719364,
    0.028747787699103355,
    -0.02373564802110195,
    -0.04355376213788986,
    -0.1323896050453186,
    -0.02376445382833481,
    0.0015014813980087638,
    0.0021712069865316153,
    -0.021791283041238785,
    0.016548700630664825,
    -0.0022180157247930765,
    0.019890127703547478,
    0.0009694817126728594,
    0.02631373144686222,
    0.009880251251161098,
    -0.017830541357398033,
    -0.017038393765687943,
    0.010204312391579151,
    -0.017585696652531624,
    -0.012998435646295547,
    -0.030245669186115265,
    0.002401650184765458,
    -0.004871712997555733,
    0.032953374087810516,
    7.651434134459123e-05,
    -0.008749639615416527,
    0.0036366814747452736,
    0.010679601691663265,
    -0.014273075386881828,
    0.014719558879733086,
    -0.03252129629254341,
    0.008490391075611115,
    -0.0011981244897469878,
    0.019933335483074188,
    -0.010441957041621208,
    0.006506419274955988,
    -0.00820233765989542,
    -0.012119871564209461,
    0.007863873615860939,
    0.0051597668789327145,
    -0.012501543387770653,
    -0.025363152846693993,
    0.005278589203953743,
    -0.015094028785824776,
    -0.012724785134196281,
    0.011493354104459286,
    0.007118534296751022,
    0.0005504531436599791,
    0.023260358721017838,
    0.006430805195122957,
    -0.013617752119898796,
    0.038195960223674774,
    0.0174848772585392,
    -0.00557744549587369,
    -0.01885313354432583,
    0.011745401658117771,
    -0.02056705392897129,
    -0.006207563448697329,
    0.023663634434342384,
    -0.027782807126641273,
    -0.009750626981258392,
    0.014978807419538498,
    -0.034912142902612686,
    0.0096786143258214,
    0.03093699738383293,
    0.00951298326253891,
    -0.0065928357653319836,
    0.02523352950811386,
    0.016750339418649673,
    -0.01806098408997059,
    0.012091065756976604,
    0.004295605234801769,
    0.022713055834174156,
    -0.023130735382437706,
    -0.03047611191868782,
    0.034912142902612686,
    -0.021330397576093674,
    -0.008029504679143429,
    -0.02459981106221676,
    -0.008288753218948841,
    -0.008375169709324837,
    -0.019342824816703796,
    -0.0027131084352731705,
    0.019386032596230507,
    -0.037245381623506546,
    0.005004937760531902,
    -0.015065222978591919,
    -0.03157071769237518,
    -0.012040656991302967,
    0.01577095501124859,
    -0.005915908608585596,
    0.015598122961819172,
    -0.011752602644264698,
    -0.042603183537721634,
    -0.004180383402854204,
    0.014575531706213951,
    0.018449857831001282,
    -0.0025438766460865736,
    0.023116331547498703,
    0.03882967680692673,
    -0.014712356962263584,
    0.0016500091878697276,
    0.0003616427711676806,
    0.009001687169075012,
    -0.03741821274161339,
    -0.03180116042494774,
    -0.05864779278635979,
    0.000871813390403986,
    0.03067774884402752,
    -0.014215463772416115,
    0.00508055230602622,
    -0.038484010845422745,
    0.030620139092206955,
    -0.01902596652507782,
    0.0020919921807944775,
    0.005761079490184784,
    -0.011104481294751167,
    -0.0004480589705053717,
    -0.009131311438977718,
    -0.0027905229944735765,
    -0.008490391075611115,
    0.0063155838288366795,
    0.037648655474185944,
    -0.015842968598008156,
    0.04395703971385956,
    0.01402822881937027,
    0.01623184233903885,
    0.002662698971107602,
    0.028445331379771233,
    -0.002815727610141039,
    -0.013567342422902584,
    -0.010852433741092682,
    -0.035862721502780914,
    0.009700218215584755,
    -0.002160404808819294,
    -0.00792868621647358,
    0.0009469774668104947,
    -0.010146701708436012,
    0.011882226914167404,
    -0.008663224056363106,
    -0.004090366419404745,
    0.019674086943268776,
    0.02114316262304783,
    0.01299123466014862,
    0.005112958140671253,
    0.0006512720719911158,
    -0.013135261833667755,
    -0.025003086775541306,
    -0.0013286489993333817,
    -0.009548990055918694,
    -0.009743425995111465,
    -0.004468437284231186,
    0.005825891625136137,
    0.015310069546103477,
    0.02472943440079689,
    -0.0001949990401044488,
    0.04447553679347038,
    0.006376795005053282,
    -0.005811489187180996,
    -0.030360890552401543,
    0.008584008552134037,
    -0.01049236673861742,
    0.017254434525966644,
    -0.012163079343736172,
    -0.011226903647184372,
    -0.022929096594452858,
    0.04101888835430145,
    0.03643883019685745,
    -0.0017454271437600255,
    -0.014611538499593735,
    -0.0026699004229158163,
    -0.03197399154305458,
    -0.03188757598400116,
    -0.019458046182990074,
    0.01321447640657425,
    -0.013250483199954033,
    -0.020509444177150726,
    -0.048853956162929535,
    0.018493065610527992,
    -0.0009415764361619949,
    0.014057034626603127,
    -0.015223653055727482,
    -0.0019749701023101807,
    -0.01458993460983038,
    -0.048105016350746155,
    0.027134684845805168,
    0.006376795005053282,
    -0.01915558986365795,
    -0.029050244018435478,
    0.011594172567129135,
    0.03462408855557442,
    -0.002198212081566453,
    -0.0222665723413229,
    0.006139150355011225,
    0.010297929868102074,
    0.02027900144457817,
    -0.011248508468270302,
    0.00729496730491519,
    0.011507757008075714,
    -0.021460022777318954,
    -0.005325397942215204,
    0.018305830657482147,
    -0.015079625882208347,
    0.0027869222685694695,
    0.005915908608585596,
    0.0023188346531242132,
    0.010463560931384563,
    0.0044144270941615105,
    0.005980720743536949,
    -0.004997736774384975,
    -0.001734625082463026,
    -0.008634418249130249,
    -0.012803999707102776,
    -0.012321509420871735,
    -0.00824554543942213,
    0.013704168610274792,
    0.004605263005942106,
    -0.006203962489962578,
    0.0015041818842291832,
    0.04064441844820976,
    -0.042401544749736786,
    0.025247931480407715,
    -0.008828854188323021,
    -0.027465946972370148,
    -0.0009051196393556893,
    0.018953952938318253,
    0.015180445276200771,
    0.0156125258654356,
    0.036611661314964294,
    -0.027206698432564735,
    -0.001309745479375124,
    0.019659684970974922,
    0.01706719771027565,
    -0.01261676475405693,
    -0.01359614823013544,
    0.0054226163774728775,
    -0.0009631805005483329,
    -0.003469250164926052,
    -0.023332372307777405,
    -0.038282375782728195,
    0.014287477359175682,
    -0.015295666642487049,
    0.0009460772853344679,
    0.01594378799200058,
    0.006031130440533161,
    0.07725607603788376,
    0.020091764628887177,
    -0.013502530753612518,
    0.003235206240788102,
    -0.004360417369753122,
    0.04712563008069992,
    0.02140241116285324,
    0.027552364394068718,
    -0.00021345249842852354,
    -0.016433479264378548,
    0.01523805595934391,
    -0.00857680756598711,
    -0.001127911382354796,
    -0.02809966541826725,
    -0.010816426947712898,
    0.010852433741092682,
    -0.023793259635567665,
    0.0065028187818825245,
    0.0028301305137574673,
    -0.0011090078623965383,
    0.02680342271924019,
    -0.008634418249130249,
    0.0028697378002107143,
    -0.015194847248494625,
    -0.026875436305999756,
    0.0017886351561173797,
    0.025075098499655724,
    0.02560799941420555,
    0.008591210469603539,
    -0.05513353273272514,
    0.03488333895802498,
    -0.015151639468967915,
    -0.0037230977322906256,
    -0.029050244018435478,
    -0.02880539931356907,
    0.011839019134640694,
    -0.005242582410573959,
    -0.011745401658117771,
    0.0177009180188179,
    0.01922760345041752,
    -0.029165465384721756,
    -0.023951688781380653,
    -0.018637092784047127,
    -0.029755976051092148,
    0.01852187141776085,
    0.0030587732326239347,
    0.0015689940191805363,
    0.010859635658562183,
    -0.043726593255996704
  ]
}
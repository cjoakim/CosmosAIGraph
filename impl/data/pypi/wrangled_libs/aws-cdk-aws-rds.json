{
  "classifiers": [
    "development status :: 7 - inactive",
    "framework :: aws cdk",
    "framework :: aws cdk :: 1",
    "intended audience :: developers",
    "license :: osi approved",
    "operating system :: os independent",
    "programming language :: javascript",
    "programming language :: python :: 3 :: only",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "typing :: typed"
  ],
  "description": "the cdk construct library for aws::rds\n# amazon relational database service construct library\n\n<!--begin stability banner-->---\n\n\n![end-of-support](https://img.shields.io/badge/end--of--support-critical.svg?style=for-the-badge)\n\n> aws cdk v1 has reached end-of-support on 2023-06-01.\n> this package is no longer being updated, and users should migrate to aws cdk v2.\n>\n> for more information on how to migrate, see the [*migrating to aws cdk v2* guide](https://docs.aws.amazon.com/cdk/v2/guide/migrating-v2.html).\n\n---\n<!--end stability banner-->\n\n```python\nimport aws_cdk.aws_rds as rds\n```\n\n## starting a clustered database\n\nto set up a clustered database (like aurora), define a `databasecluster`. you must\nalways launch a database in a vpc. use the `vpcsubnets` attribute to control whether\nyour instances will be launched privately or publicly:\n\n```python\n# vpc: ec2.vpc\n\ncluster = rds.databasecluster(self, \"database\",\n    engine=rds.databaseclusterengine.aurora_mysql(version=rds.auroramysqlengineversion.ver_2_08_1),\n    credentials=rds.credentials.from_generated_secret(\"clusteradmin\"),  # optional - will default to 'admin' username and generated password\n    instance_props=rds.instanceprops(\n        # optional , defaults to t3.medium\n        instance_type=ec2.instancetype.of(ec2.instanceclass.burstable2, ec2.instancesize.small),\n        vpc_subnets=ec2.subnetselection(\n            subnet_type=ec2.subnettype.private_with_nat\n        ),\n        vpc=vpc\n    )\n)\n```\n\nif there isn't a constant for the exact version you want to use,\nall of the `version` classes have a static `of` method that can be used to create an arbitrary version.\n\n```python\ncustom_engine_version = rds.auroramysqlengineversion.of(\"5.7.mysql_aurora.2.08.1\")\n```\n\nby default, the master password will be generated and stored in aws secrets manager with auto-generated description.\n\nyour cluster will be empty by default. to add a default database upon construction, specify the\n`defaultdatabasename` attribute.\n\nuse `databaseclusterfromsnapshot` to create a cluster from a snapshot:\n\n```python\n# vpc: ec2.vpc\n\nrds.databaseclusterfromsnapshot(self, \"database\",\n    engine=rds.databaseclusterengine.aurora(version=rds.auroraengineversion.ver_1_22_2),\n    instance_props=rds.instanceprops(\n        vpc=vpc\n    ),\n    snapshot_identifier=\"mysnapshot\"\n)\n```\n\n## starting an instance database\n\nto set up a instance database, define a `databaseinstance`. you must\nalways launch a database in a vpc. use the `vpcsubnets` attribute to control whether\nyour instances will be launched privately or publicly:\n\n```python\n# vpc: ec2.vpc\n\ninstance = rds.databaseinstance(self, \"instance\",\n    engine=rds.databaseinstanceengine.oracle_se2(version=rds.oracleengineversion.ver_19_0_0_0_2020_04_r1),\n    # optional, defaults to m5.large\n    instance_type=ec2.instancetype.of(ec2.instanceclass.burstable3, ec2.instancesize.small),\n    credentials=rds.credentials.from_generated_secret(\"syscdk\"),  # optional - will default to 'admin' username and generated password\n    vpc=vpc,\n    vpc_subnets=ec2.subnetselection(\n        subnet_type=ec2.subnettype.private_with_nat\n    )\n)\n```\n\nif there isn't a constant for the exact engine version you want to use,\nall of the `version` classes have a static `of` method that can be used to create an arbitrary version.\n\n```python\ncustom_engine_version = rds.oracleengineversion.of(\"19.0.0.0.ru-2020-04.rur-2020-04.r1\", \"19\")\n```\n\nby default, the master password will be generated and stored in aws secrets manager.\n\nto use the storage auto scaling option of rds you can specify the maximum allocated storage.\nthis is the upper limit to which rds can automatically scale the storage. more info can be found\n[here](https://docs.aws.amazon.com/amazonrds/latest/userguide/user_piops.storagetypes.html#user_piops.autoscaling)\nexample for max storage configuration:\n\n```python\n# vpc: ec2.vpc\n\ninstance = rds.databaseinstance(self, \"instance\",\n    engine=rds.databaseinstanceengine.postgres(version=rds.postgresengineversion.ver_12_3),\n    # optional, defaults to m5.large\n    instance_type=ec2.instancetype.of(ec2.instanceclass.burstable2, ec2.instancesize.small),\n    vpc=vpc,\n    max_allocated_storage=200\n)\n```\n\nuse `databaseinstancefromsnapshot` and `databaseinstancereadreplica` to create an instance from snapshot or\na source database respectively:\n\n```python\n# vpc: ec2.vpc\n\n# source_instance: rds.databaseinstance\n\nrds.databaseinstancefromsnapshot(self, \"instance\",\n    snapshot_identifier=\"my-snapshot\",\n    engine=rds.databaseinstanceengine.postgres(version=rds.postgresengineversion.ver_12_3),\n    # optional, defaults to m5.large\n    instance_type=ec2.instancetype.of(ec2.instanceclass.burstable2, ec2.instancesize.large),\n    vpc=vpc\n)\nrds.databaseinstancereadreplica(self, \"readreplica\",\n    source_database_instance=source_instance,\n    instance_type=ec2.instancetype.of(ec2.instanceclass.burstable2, ec2.instancesize.large),\n    vpc=vpc\n)\n```\n\nautomatic backups of read replica instances are only supported for mysql and mariadb. by default,\nautomatic backups are disabled for read replicas and can only be enabled (using `backupretention`)\nif also enabled on the source instance.\n\ncreating a \"production\" oracle database instance with option and parameter groups:\n\n```python\n# set open cursors with parameter group\nparameter_group = rds.parametergroup(self, \"parametergroup\",\n    engine=rds.databaseinstanceengine.oracle_se2(version=rds.oracleengineversion.ver_19_0_0_0_2020_04_r1),\n    parameters={\n        \"open_cursors\": \"2500\"\n    }\n)\n\noption_group = rds.optiongroup(self, \"optiongroup\",\n    engine=rds.databaseinstanceengine.oracle_se2(version=rds.oracleengineversion.ver_19_0_0_0_2020_04_r1),\n    configurations=[rds.optionconfiguration(\n        name=\"locator\"\n    ), rds.optionconfiguration(\n        name=\"oem\",\n        port=1158,\n        vpc=vpc\n    )\n    ]\n)\n\n# allow connections to oem\noption_group.option_connections.oem.connections.allow_default_port_from_any_ipv4()\n\n# database instance with production values\ninstance = rds.databaseinstance(self, \"instance\",\n    engine=rds.databaseinstanceengine.oracle_se2(version=rds.oracleengineversion.ver_19_0_0_0_2020_04_r1),\n    license_model=rds.licensemodel.bring_your_own_license,\n    instance_type=ec2.instancetype.of(ec2.instanceclass.burstable3, ec2.instancesize.medium),\n    multi_az=true,\n    storage_type=rds.storagetype.io1,\n    credentials=rds.credentials.from_username(\"syscdk\"),\n    vpc=vpc,\n    database_name=\"orcl\",\n    storage_encrypted=true,\n    backup_retention=cdk.duration.days(7),\n    monitoring_interval=cdk.duration.seconds(60),\n    enable_performance_insights=true,\n    cloudwatch_logs_exports=[\"trace\", \"audit\", \"alert\", \"listener\"\n    ],\n    cloudwatch_logs_retention=logs.retentiondays.one_month,\n    auto_minor_version_upgrade=true,  # required to be true if locator is used in the option group\n    option_group=option_group,\n    parameter_group=parameter_group,\n    removal_policy=removalpolicy.destroy\n)\n\n# allow connections on default port from any ipv4\ninstance.connections.allow_default_port_from_any_ipv4()\n\n# rotate the master user password every 30 days\ninstance.add_rotation_single_user()\n\n# add alarm for high cpu\ncloudwatch.alarm(self, \"highcpu\",\n    metric=instance.metric_cpuutilization(),\n    threshold=90,\n    evaluation_periods=1\n)\n\n# trigger lambda function on instance availability events\nfn = lambda_.function(self, \"function\",\n    code=lambda_.code.from_inline(\"exports.handler = (event) => console.log(event);\"),\n    handler=\"index.handler\",\n    runtime=lambda_.runtime.nodejs_14_x\n)\n\navailability_rule = instance.on_event(\"availability\", target=targets.lambdafunction(fn))\navailability_rule.add_event_pattern(\n    detail={\n        \"eventcategories\": [\"availability\"\n        ]\n    }\n)\n```\n\nadd xmldb and oem with option group\n\n```python\n# set open cursors with parameter group\nparameter_group = rds.parametergroup(self, \"parametergroup\",\n    engine=rds.databaseinstanceengine.oracle_se2(version=rds.oracleengineversion.ver_19_0_0_0_2020_04_r1),\n    parameters={\n        \"open_cursors\": \"2500\"\n    }\n)\n\noption_group = rds.optiongroup(self, \"optiongroup\",\n    engine=rds.databaseinstanceengine.oracle_se2(version=rds.oracleengineversion.ver_19_0_0_0_2020_04_r1),\n    configurations=[rds.optionconfiguration(\n        name=\"locator\"\n    ), rds.optionconfiguration(\n        name=\"oem\",\n        port=1158,\n        vpc=vpc\n    )\n    ]\n)\n\n# allow connections to oem\noption_group.option_connections.oem.connections.allow_default_port_from_any_ipv4()\n\n# database instance with production values\ninstance = rds.databaseinstance(self, \"instance\",\n    engine=rds.databaseinstanceengine.oracle_se2(version=rds.oracleengineversion.ver_19_0_0_0_2020_04_r1),\n    license_model=rds.licensemodel.bring_your_own_license,\n    instance_type=ec2.instancetype.of(ec2.instanceclass.burstable3, ec2.instancesize.medium),\n    multi_az=true,\n    storage_type=rds.storagetype.io1,\n    credentials=rds.credentials.from_username(\"syscdk\"),\n    vpc=vpc,\n    database_name=\"orcl\",\n    storage_encrypted=true,\n    backup_retention=cdk.duration.days(7),\n    monitoring_interval=cdk.duration.seconds(60),\n    enable_performance_insights=true,\n    cloudwatch_logs_exports=[\"trace\", \"audit\", \"alert\", \"listener\"\n    ],\n    cloudwatch_logs_retention=logs.retentiondays.one_month,\n    auto_minor_version_upgrade=true,  # required to be true if locator is used in the option group\n    option_group=option_group,\n    parameter_group=parameter_group,\n    removal_policy=removalpolicy.destroy\n)\n\n# allow connections on default port from any ipv4\ninstance.connections.allow_default_port_from_any_ipv4()\n\n# rotate the master user password every 30 days\ninstance.add_rotation_single_user()\n\n# add alarm for high cpu\ncloudwatch.alarm(self, \"highcpu\",\n    metric=instance.metric_cpuutilization(),\n    threshold=90,\n    evaluation_periods=1\n)\n\n# trigger lambda function on instance availability events\nfn = lambda_.function(self, \"function\",\n    code=lambda_.code.from_inline(\"exports.handler = (event) => console.log(event);\"),\n    handler=\"index.handler\",\n    runtime=lambda_.runtime.nodejs_14_x\n)\n\navailability_rule = instance.on_event(\"availability\", target=targets.lambdafunction(fn))\navailability_rule.add_event_pattern(\n    detail={\n        \"eventcategories\": [\"availability\"\n        ]\n    }\n)\n```\n\n## setting public accessibility\n\nyou can set public accessibility for the database instance or cluster using the `publiclyaccessible` property.\nif you specify `true`, it creates an instance with a publicly resolvable dns name, which resolves to a public ip address.\nif you specify `false`, it creates an internal instance with a dns name that resolves to a private ip address.\nthe default value depends on `vpcsubnets`.\nit will be `true` if `vpcsubnets` is `subnettype: subnettype.public`, `false` otherwise.\n\n```python\n# vpc: ec2.vpc\n\n# setting public accessibility for db instance\nrds.databaseinstance(self, \"instance\",\n    engine=rds.databaseinstanceengine.mysql(\n        version=rds.mysqlengineversion.ver_8_0_19\n    ),\n    vpc=vpc,\n    vpc_subnets=ec2.subnetselection(\n        subnet_type=ec2.subnettype.private_with_nat\n    ),\n    publicly_accessible=true\n)\n\n# setting public accessibility for db cluster\nrds.databasecluster(self, \"databasecluster\",\n    engine=rds.databaseclusterengine.aurora,\n    instance_props=rds.instanceprops(\n        vpc=vpc,\n        vpc_subnets=ec2.subnetselection(\n            subnet_type=ec2.subnettype.private_with_nat\n        ),\n        publicly_accessible=true\n    )\n)\n```\n\n## instance events\n\nto define amazon cloudwatch event rules for database instances, use the `onevent`\nmethod:\n\n```python\n# instance: rds.databaseinstance\n# fn: lambda.function\n\nrule = instance.on_event(\"instanceevent\", target=targets.lambdafunction(fn))\n```\n\n## login credentials\n\nby default, database instances and clusters (with the exception of `databaseinstancefromsnapshot` and `serverlessclusterfromsnapshot`) will have `admin` user with an auto-generated password.\nan alternative username (and password) may be specified for the admin user instead of the default.\n\nthe following examples use a `databaseinstance`, but the same usage is applicable to `databasecluster`.\n\n```python\n# vpc: ec2.vpc\n\nengine = rds.databaseinstanceengine.postgres(version=rds.postgresengineversion.ver_12_3)\nrds.databaseinstance(self, \"instancewithusername\",\n    engine=engine,\n    vpc=vpc,\n    credentials=rds.credentials.from_generated_secret(\"postgres\")\n)\n\nrds.databaseinstance(self, \"instancewithusernameandpassword\",\n    engine=engine,\n    vpc=vpc,\n    credentials=rds.credentials.from_password(\"postgres\", secretvalue.ssm_secure(\"/dbpassword\", \"1\"))\n)\n\nmy_secret = secretsmanager.secret.from_secret_name(self, \"dbsecret\", \"mydblogininfo\")\nrds.databaseinstance(self, \"instancewithsecretlogin\",\n    engine=engine,\n    vpc=vpc,\n    credentials=rds.credentials.from_secret(my_secret)\n)\n```\n\nsecrets generated by `fromgeneratedsecret()` can be customized:\n\n```python\n# vpc: ec2.vpc\n\nengine = rds.databaseinstanceengine.postgres(version=rds.postgresengineversion.ver_12_3)\nmy_key = kms.key(self, \"mykey\")\n\nrds.databaseinstance(self, \"instancewithcustomizedsecret\",\n    engine=engine,\n    vpc=vpc,\n    credentials=rds.credentials.from_generated_secret(\"postgres\",\n        secret_name=\"my-cool-name\",\n        encryption_key=my_key,\n        exclude_characters=\"!&*^#@()\",\n        replica_regions=[secretsmanager.replicaregion(region=\"eu-west-1\"), secretsmanager.replicaregion(region=\"eu-west-2\")]\n    )\n)\n```\n\n### snapshot credentials\n\nas noted above, databases created with `databaseinstancefromsnapshot` or `serverlessclusterfromsnapshot` will not create user and auto-generated password by default because it's not possible to change the master username for a snapshot. instead, they will use the existing username and password from the snapshot. you can still generate a new password - to generate a secret similarly to the other constructs, pass in credentials with `fromgeneratedsecret()` or `fromgeneratedpassword()`.\n\n```python\n# vpc: ec2.vpc\n\nengine = rds.databaseinstanceengine.postgres(version=rds.postgresengineversion.ver_12_3)\nmy_key = kms.key(self, \"mykey\")\n\nrds.databaseinstancefromsnapshot(self, \"instancefromsnapshotwithcustomizedsecret\",\n    engine=engine,\n    vpc=vpc,\n    snapshot_identifier=\"mysnapshot\",\n    credentials=rds.snapshotcredentials.from_generated_secret(\"username\",\n        encryption_key=my_key,\n        exclude_characters=\"!&*^#@()\",\n        replica_regions=[secretsmanager.replicaregion(region=\"eu-west-1\"), secretsmanager.replicaregion(region=\"eu-west-2\")]\n    )\n)\n```\n\n## connecting\n\nto control who can access the cluster or instance, use the `.connections` attribute. rds databases have\na default port, so you don't need to specify the port:\n\n```python\n# cluster: rds.databasecluster\n\ncluster.connections.allow_from_any_ipv4(ec2.port.all_traffic(), \"open to the world\")\n```\n\nthe endpoints to access your database cluster will be available as the `.clusterendpoint` and `.readerendpoint`\nattributes:\n\n```python\n# cluster: rds.databasecluster\n\nwrite_address = cluster.cluster_endpoint.socket_address\n```\n\nfor an instance database:\n\n```python\n# instance: rds.databaseinstance\n\naddress = instance.instance_endpoint.socket_address\n```\n\n## rotating credentials\n\nwhen the master password is generated and stored in aws secrets manager, it can be rotated automatically:\n\n```python\nimport aws_cdk.core as cdk\n\n# instance: rds.databaseinstance\n\ninstance.add_rotation_single_user(\n    automatically_after=cdk.duration.days(7),  # defaults to 30 days\n    exclude_characters=\"!@#$%^&*\"\n)\n```\n\n```python\ncluster = rds.databasecluster(stack, \"database\",\n    engine=rds.databaseclusterengine.aurora,\n    instance_props=rds.instanceprops(\n        instance_type=ec2.instancetype.of(ec2.instanceclass.burstable3, ec2.instancesize.small),\n        vpc=vpc\n    )\n)\n\ncluster.add_rotation_single_user()\n```\n\nthe multi user rotation scheme is also available:\n\n```python\n# instance: rds.databaseinstance\n# my_imported_secret: rds.databasesecret\n\ninstance.add_rotation_multi_user(\"myuser\",\n    secret=my_imported_secret\n)\n```\n\nit's also possible to create user credentials together with the instance/cluster and add rotation:\n\n```python\n# instance: rds.databaseinstance\n\nmy_user_secret = rds.databasesecret(self, \"myusersecret\",\n    username=\"myuser\",\n    secret_name=\"my-user-secret\",  # optional, defaults to a cloudformation-generated name\n    master_secret=instance.secret,\n    exclude_characters=\"{}[]()'\\\"/\\\\\"\n)\nmy_user_secret_attached = my_user_secret.attach(instance) # adds db connections information in the secret\n\ninstance.add_rotation_multi_user(\"myuser\",  # add rotation using the multi user scheme\n    secret=my_user_secret_attached)\n```\n\n**note**: this user must be created manually in the database using the master credentials.\nthe rotation will start as soon as this user exists.\n\naccess to the secrets manager api is required for the secret rotation. this can be achieved either with\ninternet connectivity (through nat) or with a vpc interface endpoint. by default, the rotation lambda function\nis deployed in the same subnets as the instance/cluster. if access to the secrets manager api is not possible from\nthose subnets or using the default api endpoint, use the `vpcsubnets` and/or `endpoint` options:\n\n```python\n# instance: rds.databaseinstance\n# my_endpoint: ec2.interfacevpcendpoint\n\n\ninstance.add_rotation_single_user(\n    vpc_subnets=ec2.subnetselection(subnet_type=ec2.subnettype.private_with_nat),  # place rotation lambda in private subnets\n    endpoint=my_endpoint\n)\n```\n\nsee also [@aws-cdk/aws-secretsmanager](https://github.com/aws/aws-cdk/blob/master/packages/%40aws-cdk/aws-secretsmanager/readme.md) for credentials rotation of existing clusters/instances.\n\n## iam authentication\n\nyou can also authenticate to a database instance using aws identity and access management (iam) database authentication;\nsee [https://docs.aws.amazon.com/amazonrds/latest/userguide/usingwithrds.iamdbauth.html](https://docs.aws.amazon.com/amazonrds/latest/userguide/usingwithrds.iamdbauth.html) for more information\nand a list of supported versions and limitations.\n\n**note**: `grantconnect()` does not currently work - see [this github issue](https://github.com/aws/aws-cdk/issues/11851).\n\nthe following example shows enabling iam authentication for a database instance and granting connection access to an iam role.\n\n```python\n# vpc: ec2.vpc\n\ninstance = rds.databaseinstance(self, \"instance\",\n    engine=rds.databaseinstanceengine.mysql(version=rds.mysqlengineversion.ver_8_0_19),\n    vpc=vpc,\n    iam_authentication=true\n)\nrole = iam.role(self, \"dbrole\", assumed_by=iam.accountprincipal(self.account))\ninstance.grant_connect(role)\n```\n\nthe following example shows granting connection access for rds proxy to an iam role.\n\n```python\n# vpc: ec2.vpc\n\ncluster = rds.databasecluster(self, \"database\",\n    engine=rds.databaseclusterengine.aurora,\n    instance_props=rds.instanceprops(vpc=vpc)\n)\n\nproxy = rds.databaseproxy(self, \"proxy\",\n    proxy_target=rds.proxytarget.from_cluster(cluster),\n    secrets=[cluster.secret],\n    vpc=vpc\n)\n\nrole = iam.role(self, \"dbproxyrole\", assumed_by=iam.accountprincipal(self.account))\nproxy.grant_connect(role, \"admin\")\n```\n\n**note**: in addition to the setup above, a database user will need to be created to support iam auth.\nsee [https://docs.aws.amazon.com/amazonrds/latest/userguide/usingwithrds.iamdbauth.dbaccounts.html](https://docs.aws.amazon.com/amazonrds/latest/userguide/usingwithrds.iamdbauth.dbaccounts.html) for setup instructions.\n\n## kerberos authentication\n\nyou can also authenticate using kerberos to a database instance using aws managed microsoft ad for authentication;\nsee [https://docs.aws.amazon.com/amazonrds/latest/userguide/kerberos-authentication.html](https://docs.aws.amazon.com/amazonrds/latest/userguide/kerberos-authentication.html) for more information\nand a list of supported versions and limitations.\n\nthe following example shows enabling domain support for a database instance and creating an iam role to access\ndirectory services.\n\n```python\n# vpc: ec2.vpc\n\nrole = iam.role(self, \"rdsdirectoryservicesrole\",\n    assumed_by=iam.serviceprincipal(\"rds.amazonaws.com\"),\n    managed_policies=[\n        iam.managedpolicy.from_aws_managed_policy_name(\"service-role/amazonrdsdirectoryserviceaccess\")\n    ]\n)\ninstance = rds.databaseinstance(self, \"instance\",\n    engine=rds.databaseinstanceengine.mysql(version=rds.mysqlengineversion.ver_8_0_19),\n    vpc=vpc,\n    domain=\"d-????????\",  # the id of the domain for the instance to join.\n    domain_role=role\n)\n```\n\n**note**: in addition to the setup above, you need to make sure that the database instance has network connectivity\nto the domain controllers. this includes enabling cross-vpc traffic if in a different vpc and setting up the\nappropriate security groups/network acl to allow traffic between the database instance and domain controllers.\nonce configured, see [https://docs.aws.amazon.com/amazonrds/latest/userguide/kerberos-authentication.html](https://docs.aws.amazon.com/amazonrds/latest/userguide/kerberos-authentication.html) for details\non configuring users for each available database engine.\n\n## metrics\n\ndatabase instances and clusters both expose metrics (`cloudwatch.metric`):\n\n```python\n# the number of database connections in use (average over 5 minutes)\n# instance: rds.databaseinstance\n\n# average cpu utilization over 5 minutes\n# cluster: rds.databasecluster\n\ndb_connections = instance.metric_database_connections()\ncpu_utilization = cluster.metric_cpuutilization()\n\n# the average amount of time taken per disk i/o operation (average over 1 minute)\nread_latency = instance.metric(\"readlatency\", statistic=\"average\", period=duration.seconds(60))\n```\n\n## enabling s3 integration\n\ndata in s3 buckets can be imported to and exported from certain database engines using sql queries. to enable this\nfunctionality, set the `s3importbuckets` and `s3exportbuckets` properties for import and export respectively. when\nconfigured, the cdk automatically creates and configures iam roles as required.\nadditionally, the `s3importrole` and `s3exportrole` properties can be used to set this role directly.\n\nyou can read more about loading data to (or from) s3 here:\n\n* aurora mysql - [import](https://docs.aws.amazon.com/amazonrds/latest/aurorauserguide/auroramysql.integrating.loadfroms3.html)\n  and [export](https://docs.aws.amazon.com/amazonrds/latest/aurorauserguide/auroramysql.integrating.saveintos3.html).\n* aurora postgresql - [import](https://docs.aws.amazon.com/amazonrds/latest/aurorauserguide/aurorapostgresql.migrating.html#user_postgresql.s3import)\n  and [export](https://docs.aws.amazon.com/amazonrds/latest/aurorauserguide/postgresql-s3-export.html).\n* microsoft sql server - [import and export](https://docs.aws.amazon.com/amazonrds/latest/userguide/sqlserver.procedural.importing.html)\n* postgresql - [import](https://docs.aws.amazon.com/amazonrds/latest/userguide/postgresql.procedural.importing.html)\n  and [export](https://docs.aws.amazon.com/amazonrds/latest/userguide/postgresql-s3-export.html)\n* oracle - [import and export](https://docs.aws.amazon.com/amazonrds/latest/userguide/oracle-s3-integration.html)\n\nthe following snippet sets up a database cluster with different s3 buckets where the data is imported and exported -\n\n```python\nimport aws_cdk.aws_s3 as s3\n\n# vpc: ec2.vpc\n\nimport_bucket = s3.bucket(self, \"importbucket\")\nexport_bucket = s3.bucket(self, \"exportbucket\")\nrds.databasecluster(self, \"dbcluster\",\n    engine=rds.databaseclusterengine.aurora,\n    instance_props=rds.instanceprops(\n        vpc=vpc\n    ),\n    s3_import_buckets=[import_bucket],\n    s3_export_buckets=[export_bucket]\n)\n```\n\n## creating a database proxy\n\namazon rds proxy sits between your application and your relational database to efficiently manage\nconnections to the database and improve scalability of the application. learn more about at [amazon rds proxy](https://aws.amazon.com/rds/proxy/)\n\nthe following code configures an rds proxy for a `databaseinstance`.\n\n```python\n# vpc: ec2.vpc\n# security_group: ec2.securitygroup\n# secrets: list[secretsmanager.secret[]]\n# db_instance: rds.databaseinstance\n\n\nproxy = db_instance.add_proxy(\"proxy\",\n    borrow_timeout=duration.seconds(30),\n    max_connections_percent=50,\n    secrets=secrets,\n    vpc=vpc\n)\n```\n\n## exporting logs\n\nyou can publish database logs to amazon cloudwatch logs. with cloudwatch logs, you can perform real-time analysis of the log data,\nstore the data in highly durable storage, and manage the data with the cloudwatch logs agent. this is available for both database\ninstances and clusters; the types of logs available depend on the database type and engine being used.\n\n```python\nimport aws_cdk.aws_logs as logs\n# my_logs_publishing_role: iam.role\n# vpc: ec2.vpc\n\n\n# exporting logs from a cluster\ncluster = rds.databasecluster(self, \"database\",\n    engine=rds.databaseclusterengine.aurora(\n        version=rds.auroraengineversion.ver_1_17_9\n    ),\n    instance_props=rds.instanceprops(\n        vpc=vpc\n    ),\n    cloudwatch_logs_exports=[\"error\", \"general\", \"slowquery\", \"audit\"],  # export all available mysql-based logs\n    cloudwatch_logs_retention=logs.retentiondays.three_months,  # optional - default is to never expire logs\n    cloudwatch_logs_retention_role=my_logs_publishing_role\n)\n\n# exporting logs from an instance\ninstance = rds.databaseinstance(self, \"instance\",\n    engine=rds.databaseinstanceengine.postgres(\n        version=rds.postgresengineversion.ver_12_3\n    ),\n    vpc=vpc,\n    cloudwatch_logs_exports=[\"postgresql\"]\n)\n```\n\n## option groups\n\nsome db engines offer additional features that make it easier to manage data and databases, and to provide additional security for your database.\namazon rds uses option groups to enable and configure these features. an option group can specify features, called options,\nthat are available for a particular amazon rds db instance.\n\n```python\n# vpc: ec2.vpc\n# security_group: ec2.securitygroup\n\n\nrds.optiongroup(self, \"options\",\n    engine=rds.databaseinstanceengine.oracle_se2(\n        version=rds.oracleengineversion.ver_19\n    ),\n    configurations=[rds.optionconfiguration(\n        name=\"oem\",\n        port=5500,\n        vpc=vpc,\n        security_groups=[security_group]\n    )\n    ]\n)\n```\n\n## parameter groups\n\ndatabase parameters specify how the database is configured.\nfor example, database parameters can specify the amount of resources, such as memory, to allocate to a database.\nyou manage your database configuration by associating your db instances with parameter groups.\namazon rds defines parameter groups with default settings.\n\nyou can create your own parameter group for your cluster or instance and associate it with your database:\n\n```python\n# vpc: ec2.vpc\n\n\nparameter_group = rds.parametergroup(self, \"parametergroup\",\n    engine=rds.databaseinstanceengine.sql_server_ee(\n        version=rds.sqlserverengineversion.ver_11\n    ),\n    parameters={\n        \"locks\": \"100\"\n    }\n)\n\nrds.databaseinstance(self, \"database\",\n    engine=rds.databaseinstanceengine.sql_server_ee,\n    vpc=vpc,\n    parameter_group=parameter_group\n)\n```\n\nanother way to specify parameters is to use the inline field `parameters` that creates an rds parameter group for you.\nyou can use this if you do not want to reuse the parameter group instance for different instances:\n\n```python\n# vpc: ec2.vpc\n\n\nrds.databaseinstance(self, \"database\",\n    engine=rds.databaseinstanceengine.sql_server_ee(version=rds.sqlserverengineversion.ver_11),\n    vpc=vpc,\n    parameters={\n        \"locks\": \"100\"\n    }\n)\n```\n\nyou cannot specify a parameter map and a parameter group at the same time.\n\n## serverless\n\n[amazon aurora serverless](https://aws.amazon.com/rds/aurora/serverless/) is an on-demand, auto-scaling configuration for amazon\naurora. the database will automatically start up, shut down, and scale capacity\nup or down based on your application's needs. it enables you to run your database\nin the cloud without managing any database instances.\n\nthe following example initializes an aurora serverless postgresql cluster.\naurora serverless clusters can specify scaling properties which will be used to\nautomatically scale the database cluster seamlessly based on the workload.\n\n```python\n# vpc: ec2.vpc\n\n\ncluster = rds.serverlesscluster(self, \"anothercluster\",\n    engine=rds.databaseclusterengine.aurora_postgresql,\n    parameter_group=rds.parametergroup.from_parameter_group_name(self, \"parametergroup\", \"default.aurora-postgresql10\"),\n    vpc=vpc,\n    scaling=rds.serverlessscalingoptions(\n        auto_pause=duration.minutes(10),  # default is to pause after 5 minutes of idle time\n        min_capacity=rds.auroracapacityunit.acu_8,  # default is 2 aurora capacity units (acus)\n        max_capacity=rds.auroracapacityunit.acu_32\n    )\n)\n```\n\naurora serverless clusters do not support the following features:\n\n* loading data from an amazon s3 bucket\n* saving data to an amazon s3 bucket\n* invoking an aws lambda function with an aurora mysql native function\n* aurora replicas\n* backtracking\n* multi-master clusters\n* database cloning\n* iam database cloning\n* iam database authentication\n* restoring a snapshot from mysql db instance\n* performance insights\n* rds proxy\n\nread more about the [limitations of aurora serverless](https://docs.aws.amazon.com/amazonrds/latest/aurorauserguide/aurora-serverless.html#aurora-serverless.limitations)\n\nlearn more about using amazon aurora serverless by reading the [documentation](https://docs.aws.amazon.com/amazonrds/latest/aurorauserguide/aurora-serverless.html)\n\nuse `serverlessclusterfromsnapshot` to create a serverless cluster from a snapshot:\n\n```python\n# vpc: ec2.vpc\n\nrds.serverlessclusterfromsnapshot(self, \"cluster\",\n    engine=rds.databaseclusterengine.aurora_mysql,\n    vpc=vpc,\n    snapshot_identifier=\"mysnapshot\"\n)\n```\n\n### data api\n\nyou can access your aurora serverless db cluster using the built-in data api. the data api doesn't require a persistent connection to the db cluster. instead, it provides a secure http endpoint and integration with aws sdks.\n\nthe following example shows granting data api access to a lamba function.\n\n```python\n# vpc: ec2.vpc\n\n# code: lambda.code\n\n\ncluster = rds.serverlesscluster(self, \"anothercluster\",\n    engine=rds.databaseclusterengine.aurora_mysql,\n    vpc=vpc,  # this parameter is optional for serverless clusters\n    enable_data_api=true\n)\nfn = lambda_.function(self, \"myfunction\",\n    runtime=lambda_.runtime.nodejs_14_x,\n    handler=\"index.handler\",\n    code=code,\n    environment={\n        \"cluster_arn\": cluster.cluster_arn,\n        \"secret_arn\": cluster.secret.secret_arn\n    }\n)\ncluster.grant_data_api_access(fn)\n```\n\n**note**: to invoke the data api, the resource will need to read the secret associated with the cluster.\n\nto learn more about using the data api, see the [documentation](https://docs.aws.amazon.com/amazonrds/latest/aurorauserguide/data-api.html).\n\n### default vpc\n\nthe `vpc` parameter is optional.\n\nif not provided, the cluster will be created in the default vpc of the account and region.\nas this vpc is not deployed with aws cdk, you can't configure the `vpcsubnets`, `subnetgroup` or `securitygroups` of the aurora serverless cluster.\nif you want to provide one of `vpcsubnets`, `subnetgroup` or `securitygroups` parameter, please provide a `vpc`.\n",
  "docs_url": null,
  "keywords": "",
  "license": "apache-2.0",
  "name": "aws-cdk.aws-rds",
  "package_url": "https://pypi.org/project/aws-cdk.aws-rds/",
  "project_url": "https://pypi.org/project/aws-cdk.aws-rds/",
  "project_urls": {
    "Homepage": "https://github.com/aws/aws-cdk",
    "Source": "https://github.com/aws/aws-cdk.git"
  },
  "release_url": "https://pypi.org/project/aws-cdk.aws-rds/1.204.0/",
  "requires_dist": [
    "aws-cdk.aws-cloudwatch (==1.204.0)",
    "aws-cdk.aws-ec2 (==1.204.0)",
    "aws-cdk.aws-events (==1.204.0)",
    "aws-cdk.aws-iam (==1.204.0)",
    "aws-cdk.aws-kms (==1.204.0)",
    "aws-cdk.aws-logs (==1.204.0)",
    "aws-cdk.aws-s3 (==1.204.0)",
    "aws-cdk.aws-secretsmanager (==1.204.0)",
    "aws-cdk.core (==1.204.0)",
    "aws-cdk.cx-api (==1.204.0)",
    "constructs (<4.0.0,>=3.3.69)",
    "jsii (<2.0.0,>=1.84.0)",
    "publication (>=0.0.3)",
    "typeguard (~=2.13.3)"
  ],
  "requires_python": "~=3.7",
  "summary": "the cdk construct library for aws::rds",
  "version": "1.204.0",
  "releases": [],
  "developers": [
    "amazon_web_services"
  ],
  "kwds": "aws_cdk aws_rds auroramysql aws_s3 aws",
  "license_kwds": "apache-2.0",
  "libtype": "pypi",
  "id": "pypi_aws_cdk.aws_rds",
  "homepage": "https://github.com/aws/aws-cdk",
  "release_count": 258,
  "dependency_ids": [
    "pypi_aws_cdk.aws_cloudwatch",
    "pypi_aws_cdk.aws_ec2",
    "pypi_aws_cdk.aws_events",
    "pypi_aws_cdk.aws_iam",
    "pypi_aws_cdk.aws_kms",
    "pypi_aws_cdk.aws_logs",
    "pypi_aws_cdk.aws_s3",
    "pypi_aws_cdk.aws_secretsmanager",
    "pypi_aws_cdk.core",
    "pypi_aws_cdk.cx_api",
    "pypi_constructs",
    "pypi_jsii",
    "pypi_publication",
    "pypi_typeguard"
  ],
  "documentation_summary": "The HTML text is a PyPI (Python Package Index) page for the `aws-cdk.aws-rds` package, version 1.204.0, released on June 19, 2023. This package is part of the AWS Cloud Development Kit (CDK) and provides a construct library for Amazon Relational Database Service (RDS). It supports various database instances and configurations, including Aurora clusters, instance databases, and serverless options. The package is no longer being updated as AWS CDK v1 has reached end-of-support on June 1, 2023, and users are advised to migrate to AWS CDK v2. The package requires Python version 3.7 or newer and is licensed under the Apache-2.0 license. It includes features like automatic backups, IAM authentication, Kerberos authentication, CloudWatch metrics, S3 integration, database proxies, log exporting, and more.",
  "embedding": [
    -0.023670870810747147,
    -0.00492967339232564,
    -0.017735572531819344,
    -0.03448661416769028,
    -0.011504914611577988,
    0.03333331272006035,
    0.005200418643653393,
    -0.008691977709531784,
    -0.020956385880708694,
    -0.02434597536921501,
    -0.017046403139829636,
    0.006909278221428394,
    0.014796052128076553,
    0.02080167457461357,
    -0.0038502083625644445,
    0.014416305348277092,
    0.020914191380143166,
    -0.015330510213971138,
    0.03012656234204769,
    0.0024806594010442495,
    0.01734176091849804,
    -0.024641333147883415,
    -0.0026494357734918594,
    0.0008988215122371912,
    0.002429674845188856,
    0.027482401579618454,
    0.0025703217834234238,
    -0.00988747552037239,
    0.00825597159564495,
    0.017693378031253815,
    0.03673696517944336,
    -0.006202527787536383,
    -0.012714478187263012,
    -0.002593176905065775,
    -0.014331917278468609,
    -0.00862165354192257,
    -0.0007568560540676117,
    0.005868491251021624,
    0.017791830003261566,
    0.010021090507507324,
    0.005400840193033218,
    0.004170180298388004,
    -0.008122357539832592,
    -0.011406462639570236,
    -0.01790434867143631,
    0.010991553775966167,
    0.010872003622353077,
    -0.039324868470430374,
    -0.016005614772439003,
    -0.01999998651444912,
    -0.0076089962385594845,
    0.03479604050517082,
    -0.050098419189453125,
    0.0009607940446585417,
    0.014226431958377361,
    -0.003598802024498582,
    0.009247533045709133,
    0.013143450953066349,
    0.006663145963102579,
    -0.02998591586947441,
    0.03389589861035347,
    0.01151194702833891,
    -0.013607585802674294,
    -0.014360046945512295,
    -0.024838238954544067,
    0.016962014138698578,
    -0.013748233206570148,
    0.01503515150398016,
    0.004883963149040937,
    0.007967646233737469,
    0.05980305373668671,
    0.03153303265571594,
    0.0066842432133853436,
    -0.015963422134518623,
    0.014113915152847767,
    -0.031448643654584885,
    -0.02322079986333847,
    0.016329104080796242,
    -0.020548509433865547,
    -0.02135019749403,
    -0.0091139180585742,
    0.00186181312892586,
    -0.005379743408411741,
    0.03125173598527908,
    0.016990143805742264,
    0.014571016654372215,
    -0.020492250099778175,
    0.0027637111488729715,
    -0.009620246477425098,
    0.016933884471654892,
    0.002213430358096957,
    0.008382554166018963,
    -0.011223621666431427,
    0.020112505182623863,
    -0.013459906913340092,
    0.019282687455415726,
    0.009789022617042065,
    0.01111813634634018,
    0.015569609589874744,
    -0.026652583852410316,
    -0.023108283057808876,
    0.020815739408135414,
    -0.024444429203867912,
    -0.0038291113451123238,
    -0.04078759625554085,
    0.001781820203177631,
    0.002637129044160247,
    0.004616734106093645,
    0.044500675052404404,
    0.005801683757454157,
    -0.0072151850908994675,
    0.027116719633340836,
    -0.013994364999234676,
    -0.034149061888456345,
    -0.003015117486938834,
    -0.01939520612359047,
    0.023628676310181618,
    0.008874818682670593,
    -0.014725728891789913,
    -0.018804488703608513,
    0.0038326275534927845,
    0.015471157617866993,
    0.001817860989831388,
    -0.017876219004392624,
    -0.0017791830468922853,
    -0.02358648180961609,
    -0.008853721432387829,
    -0.0043530212715268135,
    0.020112505182623863,
    -0.03642754256725311,
    -0.008586492389440536,
    -0.009838249534368515,
    -0.002791840583086014,
    -0.030717279762029648,
    -0.009317856281995773,
    0.009008432738482952,
    -0.0018512646201997995,
    -0.02187059074640274,
    -0.03127986565232277,
    -0.02872009389102459,
    -0.0001494373136665672,
    0.016962014138698578,
    0.0007045529782772064,
    -0.004676508717238903,
    -0.007594931870698929,
    0.017876219004392624,
    0.009852314367890358,
    0.031307995319366455,
    -0.008206745609641075,
    -0.013663845136761665,
    0.0005836845375597477,
    -0.0017616022378206253,
    -0.03772149235010147,
    -0.021575231105089188,
    0.0128902867436409,
    -0.008206745609641075,
    -0.004015468526631594,
    0.011364268139004707,
    0.008389586582779884,
    -0.019789015874266624,
    0.012383958324790001,
    0.04675102233886719,
    -0.021082967519760132,
    -0.003018633695319295,
    0.033220794051885605,
    0.03189871460199356,
    0.0049683512188494205,
    -0.0094163091853261,
    -0.01798873580992222,
    0.007341767195612192,
    0.03451474383473396,
    -0.003755271900445223,
    -0.025119533762335777,
    0.006543596275150776,
    -0.01170182041823864,
    0.022067496553063393,
    0.0009185999515466392,
    0.014275658875703812,
    -0.0376652367413044,
    -0.010295351967215538,
    0.02592121995985508,
    0.01641349121928215,
    0.004898027516901493,
    0.05741205811500549,
    -0.009500697255134583,
    -0.014367079362273216,
    -0.007545705419033766,
    0.006916310638189316,
    0.011068909429013729,
    0.019043587148189545,
    0.018270030617713928,
    0.033445827662944794,
    0.002698661992326379,
    -0.0010486983228474855,
    -0.5837408304214478,
    -0.026118125766515732,
    -0.026075931265950203,
    -0.03603373095393181,
    -0.006336142309010029,
    -0.002788324374705553,
    0.0077707404270768166,
    0.02270040661096573,
    -0.030886055901646614,
    0.030520373955368996,
    -0.011575238779187202,
    0.012876221910119057,
    -0.014092817902565002,
    0.004922640975564718,
    0.0015585432993248105,
    -0.03119547851383686,
    0.015358639881014824,
    -0.021926848217844963,
    0.010822777636349201,
    -0.005654004868119955,
    -0.006543596275150776,
    0.043291110545396805,
    -0.0051406435668468475,
    0.0031100541818886995,
    -0.00988747552037239,
    0.009950767271220684,
    -0.008319263346493244,
    -0.03189871460199356,
    0.041659608483314514,
    -0.01044303085654974,
    -0.02237691916525364,
    0.008164552040398121,
    0.018157511949539185,
    0.00033008065656758845,
    0.04779181256890297,
    -0.0019444432109594345,
    -0.02094232104718685,
    0.055330485105514526,
    0.010548516176640987,
    0.0338396392762661,
    -0.010457095690071583,
    -0.012967642396688461,
    -0.013185645453631878,
    0.023192670196294785,
    0.031111091375350952,
    0.0007186176953837276,
    0.026835424825549126,
    0.02052037976682186,
    -0.017651183530688286,
    -0.00836848933249712,
    0.012165955267846584,
    -0.010014058090746403,
    0.02424752339720726,
    -0.019451463595032692,
    0.011800273321568966,
    -0.028241893276572227,
    0.017271436750888824,
    -0.004198309499770403,
    0.0165119431912899,
    0.002730307634919882,
    -0.0011541835265234113,
    0.004535861779004335,
    0.004817155655473471,
    -0.0163150392472744,
    -0.0005643456242978573,
    0.00817861594259739,
    0.009697603061795235,
    -0.0157102569937706,
    0.009599150158464909,
    -0.03417719155550003,
    0.00499999662861228,
    0.0015304138651117682,
    0.004479603376239538,
    -0.030745409429073334,
    0.027074525132775307,
    0.025288309901952744,
    0.04036565497517586,
    0.012109696865081787,
    -0.005738392937928438,
    0.03310827538371086,
    0.019620239734649658,
    -0.0056715854443609715,
    -0.012686348520219326,
    -0.03358647599816322,
    0.023811517283320427,
    0.0024665948003530502,
    -0.007819966413080692,
    -0.014796052128076553,
    -0.02601967379450798,
    0.012440216727554798,
    -0.002086848020553589,
    0.011842467822134495,
    -0.03192684426903725,
    -0.03552740439772606,
    0.011364268139004707,
    0.017046403139829636,
    0.012693380936980247,
    -0.013811524026095867,
    -0.002443739678710699,
    -0.006529531441628933,
    -0.01641349121928215,
    -0.007798869628459215,
    -0.0314205139875412,
    -0.0008790430147200823,
    0.05004215985536575,
    -0.01562586799263954,
    -0.014514758251607418,
    -0.002761953277513385,
    0.00781293399631977,
    -0.02672290802001953,
    -0.01104781311005354,
    -0.02340364083647728,
    -0.0072784763760864735,
    -0.012742607854306698,
    0.015583674423396587,
    -0.02857944741845131,
    0.029395198449492455,
    0.017707442864775658,
    0.013804491609334946,
    -0.011983114294707775,
    0.005049223080277443,
    0.0019672983326017857,
    0.007081570569425821,
    0.01683543249964714,
    0.025428956374526024,
    0.010766519233584404,
    -0.002053444506600499,
    -0.021322067826986313,
    0.004599153064191341,
    0.016905754804611206,
    0.03440222889184952,
    0.029057646170258522,
    0.023375511169433594,
    -0.005741909146308899,
    0.03687761351466179,
    0.000351397437043488,
    0.026891684159636497,
    0.009992960840463638,
    -0.00047380418982356787,
    -0.02769337221980095,
    -0.014205335639417171,
    0.017637118697166443,
    0.02167368493974209,
    -0.03727142512798309,
    -0.012243310920894146,
    -0.0072503467090427876,
    -0.028748223558068275,
    0.0009854072704911232,
    -0.0020903642289340496,
    -0.0002610757655929774,
    -0.0009388179751113057,
    -0.025260180234909058,
    -0.0177215076982975,
    0.014810116961598396,
    -0.025105468928813934,
    0.0027197590097784996,
    -0.01293951366096735,
    -0.011736982502043247,
    -0.008410683833062649,
    0.002758437069132924,
    0.028888870030641556,
    9.922197932610288e-05,
    -0.006104074884206057,
    0.029592104256153107,
    -0.038396600633859634,
    -0.008459909819066525,
    -0.036258768290281296,
    0.021884655579924583,
    -0.01552741602063179,
    -0.018438806757330894,
    -0.02551334537565708,
    0.006184946745634079,
    0.009247533045709133,
    0.0005625875201076269,
    0.011758079752326012,
    -0.008354424498975277,
    -0.029198292642831802,
    0.013804491609334946,
    -0.00799577496945858,
    0.01603374443948269,
    0.021139226853847504,
    0.025302374735474586,
    -0.01842474192380905,
    -0.009831217117607594,
    0.03999997302889824,
    0.017285501584410667,
    0.009845281951129436,
    0.006613919511437416,
    -0.04106888920068741,
    0.002478901296854019,
    -0.0340365469455719,
    0.007433187682181597,
    -0.03440222889184952,
    0.05167366564273834,
    -0.02120954915881157,
    0.0026564679574221373,
    0.007763708010315895,
    0.020871996879577637,
    0.009135015308856964,
    0.032939501106739044,
    0.019507722929120064,
    -0.0032208135817199945,
    0.019507722929120064,
    -0.01943739876151085,
    0.007208152674138546,
    -0.030576633289456367,
    -0.00032634471426717937,
    -0.00019251041521783918,
    0.03338956832885742,
    0.010604774579405785,
    0.017215179279446602,
    -0.014978893101215363,
    -0.003769336501136422,
    -0.018157511949539185,
    0.022123754024505615,
    0.026652583852410316,
    -0.014099850319325924,
    0.013368486426770687,
    -0.037327684462070465,
    0.001986637245863676,
    -0.0028885353822261095,
    0.02052037976682186,
    0.02154710330069065,
    0.00392756424844265,
    0.01375526562333107,
    -0.005573132541030645,
    0.008466942235827446,
    0.005108998157083988,
    0.011715885251760483,
    -0.034992944449186325,
    -0.014922634698450565,
    0.006111107300966978,
    -0.012658219784498215,
    -0.01935301162302494,
    0.003227845998480916,
    -0.0010161737445741892,
    0.02312234789133072,
    -0.027777759358286858,
    0.004092824179679155,
    -0.03744019940495491,
    0.028593512251973152,
    -0.0024718688800930977,
    0.023066088557243347,
    -0.019704628735780716,
    0.019409269094467163,
    0.005805199965834618,
    -0.021293938159942627,
    0.005351613741368055,
    -0.01669478416442871,
    0.019085781648755074,
    4.115020055905916e-05,
    0.01445849984884262,
    -0.004936705809086561,
    0.012594928033649921,
    0.002354077296331525,
    0.0006544475327245891,
    0.004345988854765892,
    0.016483815386891365,
    0.033361442387104034,
    -0.0018319257069379091,
    0.01545709278434515,
    0.02503514476120472,
    0.024078747257590294,
    -0.0021167355589568615,
    0.044134993106126785,
    -0.0028340346179902554,
    -0.011462721042335033,
    -0.00874120369553566,
    -0.0011629739310592413,
    0.006490853615105152,
    -0.00741209089756012,
    -0.03608999028801918,
    -0.0035003493539988995,
    -0.041378311812877655,
    0.010752454400062561,
    -0.010998586192727089,
    0.017932478338479996,
    0.037468329071998596,
    0.009247533045709133,
    0.02158929593861103,
    0.005179321393370628,
    -0.03772149235010147,
    0.020450057461857796,
    0.005576648749411106,
    -0.010464128106832504,
    -0.041293926537036896,
    -0.025569602847099304,
    0.025991544127464294,
    -0.016146263107657433,
    0.037327684462070465,
    -0.002106187166646123,
    0.018481001257896423,
    0.01485231053084135,
    0.008495071902871132,
    -0.022250337526202202,
    -0.005988040938973427,
    0.037187036126852036,
    -0.01590716280043125,
    0.0011137474793940783,
    0.01917017064988613,
    -0.008839656598865986,
    -0.015428963117301464,
    0.014725728891789913,
    0.02098451554775238,
    0.04877633973956108,
    0.003980306908488274,
    -0.007911386899650097,
    -0.009360049851238728,
    0.0019497174071148038,
    -0.011856532655656338,
    0.004061178769916296,
    0.004321375396102667,
    -0.012587895616889,
    -0.003547817701473832,
    0.0057208118960261345,
    0.004110405221581459,
    0.009535858407616615,
    -0.04458506032824516,
    0.01790434867143631,
    0.002252108184620738,
    0.02457101084291935,
    -0.030717279762029648,
    0.0005151192308403552,
    -0.0045745400711894035,
    0.011610399931669235,
    -0.01766524836421013,
    -0.008713074028491974,
    0.020112505182623863,
    -0.037327684462070465,
    -0.02765117771923542,
    -0.03119547851383686,
    -0.029676493257284164,
    -0.019704628735780716,
    0.02340364083647728,
    -0.022601954638957977,
    0.015485221520066261,
    0.029198292642831802,
    0.022531630471348763,
    0.000503252143971622,
    0.015232057310640812,
    -0.008818559348583221,
    0.003983823116868734,
    -0.0020024599507451057,
    -0.014922634698450565,
    -0.00799577496945858,
    -0.003582979319617152,
    0.029535844922065735,
    0.02126580849289894,
    0.04554146155714989,
    0.017102660611271858,
    0.020534444600343704,
    -0.009767926298081875,
    0.0017396261682733893,
    -0.03518984839320183,
    0.007679319940507412,
    0.00018295082554686815,
    -0.0016561170341446996,
    0.014838246628642082,
    0.008389586582779884,
    0.014247529208660126,
    0.017876219004392624,
    0.019831210374832153,
    -0.01766524836421013,
    0.008382554166018963,
    0.023389576002955437,
    0.017355825752019882,
    0.005288322921842337,
    -0.007651190273463726,
    -0.006761598866432905,
    -0.021715879440307617,
    0.013023901730775833,
    0.008713074028491974,
    -0.02471165731549263,
    0.005147675983607769,
    0.012904351577162743,
    0.01370603870600462,
    -0.02140645496547222,
    -0.01357242465019226,
    0.021040773019194603,
    -0.012201117351651192,
    0.02998591586947441,
    -0.012032341212034225,
    -0.010309416800737381,
    -0.028509123250842094,
    -0.02229253016412258,
    -0.016863562166690826,
    0.006575241684913635,
    0.016075938940048218,
    -0.014156108722090721,
    -0.0010214479407295585,
    -0.02066102623939514,
    0.022362854331731796,
    -0.04722922295331955,
    0.013769329525530338,
    -0.006494369823485613,
    -0.011997179128229618,
    -0.01088606845587492,
    0.007063989527523518,
    0.029395198449492455,
    0.005358646158128977,
    0.007137829437851906,
    0.015864968299865723,
    0.0034353001974523067,
    -0.007169474847614765,
    0.0016104067908599973,
    -0.004764412995427847,
    -0.011926855891942978,
    -0.05566803738474846,
    -0.002753162756562233,
    -0.009774958714842796,
    0.012679316103458405,
    0.027848083525896072,
    0.0023611094802618027,
    0.03744019940495491,
    -0.012862157076597214,
    0.01194092072546482,
    0.033502086997032166,
    -0.03049224428832531,
    0.015822773799300194,
    0.008917012251913548,
    0.005418421234935522,
    0.012426151894032955,
    0.0030274242162704468,
    0.0076863523572683334,
    -0.02630096673965454,
    -0.0202390868216753,
    0.01149788312613964,
    -0.006501402240246534,
    0.01860758289694786,
    0.013509132899343967,
    -0.005028126295655966,
    -0.009507729671895504,
    -0.011884661391377449,
    -0.031954970210790634,
    -0.012700413353741169,
    -0.023656805977225304,
    -0.014303787611424923,
    -0.019929664209485054,
    -0.006624468136578798,
    -0.005928266327828169,
    -0.02018282748758793,
    0.006251753773540258,
    -0.01931081712245941,
    0.007700416725128889,
    0.028270022943615913,
    -0.02597747929394245,
    0.02312234789133072,
    0.024050617590546608,
    -0.0023927551228553057,
    0.04962022230029106,
    0.01322080660611391,
    -0.02302389405667782,
    -0.031870584934949875,
    -0.0036392381880432367,
    0.019409269094467163,
    -0.01991559937596321,
    0.0009546407382003963,
    -0.03603373095393181,
    -0.007939516566693783,
    -0.006181430537253618,
    0.020646963268518448,
    0.00656117731705308,
    -0.005439518019556999,
    -0.014261594042181969,
    -0.04053443297743797,
    0.017454277724027634,
    0.0010522145312279463,
    -0.010133608244359493,
    -0.019085781648755074,
    -0.014064688235521317,
    -0.025063274428248405,
    0.004862865898758173,
    0.004922640975564718,
    0.02606186829507351,
    -0.015288316644728184,
    -0.00552390655502677,
    -0.028129376471042633,
    -0.006831922568380833,
    -0.0003896358248312026,
    0.002985230181366205,
    0.020871996879577637,
    -0.010457095690071583,
    0.032151877880096436,
    0.03054850362241268,
    0.03507733345031738,
    0.0042756651528179646,
    0.019845275208353996,
    0.019001394510269165,
    0.02201123721897602,
    -0.015217992477118969,
    -0.008684945292770863,
    0.019620239734649658,
    -0.006603371351957321,
    -0.001963782124221325,
    0.009381147101521492,
    0.021322067826986313,
    -0.009514762088656425,
    -0.012398023158311844,
    0.01673697866499424,
    0.02350209467113018,
    -0.001600737334229052,
    -0.013959202915430069,
    -0.021040773019194603,
    -0.023052023723721504,
    -0.032376911491155624,
    3.639787610154599e-05,
    -0.015344575047492981,
    0.023656805977225304,
    -0.034852296113967896,
    -0.007960613816976547,
    0.02630096673965454,
    -0.01739802025258541,
    0.017637118697166443,
    -0.031223608180880547,
    0.035443015396595,
    -0.004022500943392515,
    0.014838246628642082,
    -0.0007687231409363449,
    0.01931081712245941,
    -0.0019268622854724526,
    0.014978893101215363,
    -0.03316453471779823,
    0.0005432486068457365,
    0.014725728891789913,
    0.02181433141231537,
    0.013720103539526463,
    0.02126580849289894,
    0.00016372176469303668,
    0.027862148359417915,
    -0.011279880069196224,
    -0.015203927643597126,
    -0.0182278361171484,
    0.031870584934949875,
    -0.03248943015933037,
    -0.005246128886938095,
    -0.018340352922677994,
    -0.030886055901646614,
    -0.028143441304564476,
    0.028607575222849846,
    -0.004229954909533262,
    0.011744014918804169,
    0.02420532889664173,
    -0.01776370219886303,
    0.0034563972149044275,
    0.019268622621893883,
    -0.008263004012405872,
    0.03468352183699608,
    0.01559773925691843,
    0.005917717702686787,
    0.00372362625785172,
    0.006751050241291523,
    -0.016469750553369522,
    -0.008755268529057503,
    -0.01915610581636429,
    -0.014085785485804081,
    0.012559766881167889,
    0.030689150094985962,
    -0.02634316124022007,
    -0.0032524592243134975,
    0.0031803776510059834,
    -0.01691981963813305,
    -0.02358648180961609,
    -0.036483801901340485,
    0.026033738628029823,
    0.005084384698420763,
    -0.0006693912437185645,
    -0.02098451554775238,
    -0.0012376925442367792,
    0.019690563902258873,
    -0.008312230929732323,
    -0.025443021208047867,
    -0.0022222206462174654,
    0.029479587450623512,
    -0.020070310682058334,
    -0.020168762654066086,
    0.005228547845035791,
    0.009831217117607594,
    0.025372697040438652,
    -0.017130790278315544,
    -0.012032341212034225,
    -0.011898726224899292,
    -0.0070288279093801975,
    -0.026174385100603104,
    -0.013945138081908226,
    -0.008902947418391705,
    0.0077074491418898106,
    -0.012995772063732147,
    -0.0049683512188494205,
    0.04171586409211159,
    -0.0221518836915493,
    -0.005369194783270359,
    -0.006065397057682276,
    -0.030942315235733986,
    0.038902927190065384,
    -0.012278473004698753,
    -0.009191273711621761,
    -0.023530224338173866,
    0.011336138471961021,
    -0.027172977104783058,
    -0.01559773925691843,
    -0.012025308795273304,
    0.011251750402152538,
    -0.019521787762641907,
    0.0009748587035574019,
    -0.0045850882306694984,
    -0.023530224338173866,
    0.002886777278035879,
    -0.013853717595338821,
    0.001321201678365469,
    -0.0277918241918087,
    0.004655411932617426,
    0.009268629364669323,
    0.02229253016412258,
    -0.023656805977225304,
    -0.03440222889184952,
    -0.016807302832603455,
    -0.02684948965907097,
    0.019240492954850197,
    0.012454281561076641,
    0.014528823085129261,
    0.007644158322364092,
    0.03969055041670799,
    -0.01485231053084135,
    0.007025311700999737,
    -0.018734164535999298,
    -0.012137825600802898,
    -0.02400842308998108,
    0.021758072078227997,
    -0.014556952752172947,
    -0.008171583525836468,
    0.0277918241918087,
    -0.017834024503827095,
    -0.03831221163272858,
    -0.03291137143969536,
    8.584404298517256e-09,
    0.006125171668827534,
    -0.0015277768252417445,
    -0.00023602305736858398,
    0.006343174260109663,
    0.040590692311525345,
    0.032376911491155624,
    -0.014838246628642082,
    0.0009572778362780809,
    0.026976071298122406,
    0.020717285573482513,
    -0.035217978060245514,
    0.011645562015473843,
    -0.008945141918957233,
    0.02140645496547222,
    -0.033361442387104034,
    0.006476788781583309,
    0.013909976929426193,
    -0.018804488703608513,
    0.005675101652741432,
    -0.006199011579155922,
    0.012187052518129349,
    -0.032939501106739044,
    0.01780589483678341,
    -0.006061880849301815,
    -0.010091413743793964,
    -0.021800266578793526,
    0.03639941290020943,
    0.013206742703914642,
    -0.01018986664712429,
    0.03884666785597801,
    0.015471157617866993,
    0.018959200009703636,
    0.014226431958377361,
    -0.008389586582779884,
    -0.007088602986186743,
    -0.0008034453494474292,
    0.005759489722549915,
    -0.024374105036258698,
    -0.021153291687369347,
    0.005889588035643101,
    0.035780567675828934,
    0.017187049612402916,
    -0.028551317751407623,
    -0.012573831714689732,
    -0.01786215417087078,
    -0.02303795889019966,
    -0.01352319773286581,
    -0.01935301162302494,
    0.03744019940495491,
    0.02886074036359787,
    8.235534187406301e-05,
    0.03136425465345383,
    -0.0030485212337225676,
    -0.004194793291389942,
    0.02736988291144371,
    -0.041575219482183456,
    0.023389576002955437,
    0.0032559754326939583,
    0.003421235363930464,
    0.02056257426738739,
    -0.0034599134232848883,
    -0.04070320725440979,
    0.012524604797363281,
    0.011828402988612652,
    0.007594931870698929,
    0.01049225777387619,
    0.03817156329751015,
    0.01576651632785797,
    -0.003387831849977374,
    -0.00048127604532055557,
    -0.023108283057808876,
    -0.006642049178481102,
    0.03682135418057442,
    -0.003284104634076357,
    -0.051786184310913086,
    -0.03324892371892929,
    0.005636423826217651,
    0.0176230538636446,
    0.011947953142225742,
    0.008776365779340267,
    0.0330238863825798,
    -0.018804488703608513,
    0.002246833872050047,
    -0.008699010126292706,
    -0.013164548203349113,
    0.021237678825855255,
    0.010295351967215538,
    0.0045112487860023975,
    0.010970456525683403,
    0.031954970210790634,
    0.022165948525071144,
    -0.013431777246296406,
    -0.022390983998775482,
    -0.007440220098942518,
    0.002846341347321868,
    -0.0318143256008625,
    -0.0009643101948313415,
    0.0017141338903456926,
    -0.016751043498516083,
    0.026835424825549126,
    -0.015316445380449295,
    0.010794647969305515,
    -0.0030959895811975002,
    -0.019367076456546783,
    -0.006336142309010029,
    -0.006195495370775461,
    -0.0011058361269533634,
    -0.00035117767401970923,
    -0.0044127958826720715,
    -0.024458492174744606,
    0.00032656447729095817,
    -0.0005116030224598944,
    -0.004500700160861015,
    0.0037095616571605206,
    0.0004175454378128052,
    -0.003377283224835992,
    -0.005228547845035791,
    -0.003041488816961646,
    -0.007805902045220137,
    -0.005836845841258764,
    -0.01149788312613964,
    0.001573486952111125,
    -0.004258084576576948,
    -0.021195486187934875,
    0.011413494125008583,
    0.18677906692028046,
    0.026005608960986137,
    0.014261594042181969,
    0.03136425465345383,
    0.005998589564114809,
    0.006332626100629568,
    -0.004912092350423336,
    0.01800280064344406,
    -0.02098451554775238,
    0.05248941853642464,
    -0.015428963117301464,
    -0.012897319160401821,
    -0.015175798907876015,
    0.011807305738329887,
    0.019971856847405434,
    0.0037939497269690037,
    -0.02350209467113018,
    -0.04337549954652786,
    -0.012151890434324741,
    0.005552035756409168,
    0.013227839022874832,
    -0.020014051347970963,
    -0.014627275988459587,
    -0.034992944449186325,
    0.0390717051923275,
    -0.02507733926177025,
    -0.010267222300171852,
    -0.001958507811650634,
    0.0378621406853199,
    0.0263853557407856,
    -0.02247537113726139,
    0.026075931265950203,
    0.010485225357115269,
    -0.017960606142878532,
    -0.04416312277317047,
    -0.010499290190637112,
    -0.0013238388346508145,
    -0.02805905230343342,
    0.006230656988918781,
    0.020450057461857796,
    -0.0011954985093325377,
    -0.022531630471348763,
    0.00307840877212584,
    -0.027398012578487396,
    -0.004454989917576313,
    -0.01445849984884262,
    -0.013473971746861935,
    0.019901534542441368,
    0.013579456135630608,
    0.018987329676747322,
    -0.008319263346493244,
    -0.0063994331285357475,
    0.023248929530382156,
    -0.011132201179862022,
    0.02886074036359787,
    0.002383964601904154,
    0.01855132356286049,
    0.016258779913187027,
    -0.013853717595338821,
    0.00207454152405262,
    -0.030886055901646614,
    0.033220794051885605,
    -0.019085781648755074,
    0.0025773542001843452,
    -0.02060476876795292,
    0.018382547423243523,
    -0.029592104256153107,
    0.038677893579006195,
    0.01485231053084135,
    -0.02759491838514805,
    -0.013481004163622856,
    -0.022208143025636673,
    -0.022587889805436134,
    -0.024556946009397507,
    -0.02009844034910202,
    -0.015780581161379814,
    0.022728536278009415,
    0.010590710677206516,
    0.0015014054952189326,
    0.023066088557243347,
    0.014402240514755249,
    0.01655413769185543,
    0.006269334815442562,
    0.015428963117301464,
    0.007848096080124378,
    -0.0016438104212284088,
    0.014585081487894058,
    -0.01786215417087078,
    0.009711666963994503,
    -0.0012957094004377723,
    -0.016385361552238464,
    -0.013713071122765541,
    -0.0017185291508212686,
    -0.012489443644881248,
    0.002417368348687887,
    -0.016722913831472397,
    -0.0029447940178215504,
    0.029395198449492455,
    -0.02331925369799137,
    -0.009212370961904526,
    -0.03623063862323761,
    0.06886071711778641,
    0.013621650636196136,
    0.011652594432234764,
    -0.02154710330069065,
    0.027580853551626205,
    0.0038818540051579475,
    0.02801685966551304,
    0.006557661108672619,
    -0.003414203180000186,
    -0.01338255126029253,
    -0.0049683512188494205,
    -0.008073131553828716,
    0.0054852282628417015,
    0.014205335639417171,
    0.008509136736392975,
    -0.004704638384282589,
    0.02298170141875744,
    -0.01149788312613964,
    -0.011385365389287472,
    -0.015780581161379814,
    -0.010084381327033043,
    0.007932484149932861,
    -0.017848089337348938,
    -0.010780584067106247,
    -0.002035863697528839,
    -0.012784801423549652,
    0.014528823085129261,
    -0.004539377987384796,
    -0.020871996879577637,
    0.01655413769185543,
    -0.017848089337348938,
    0.012805898673832417,
    -0.007953581400215626,
    0.008094227872788906,
    -0.0006869721109978855,
    0.020773544907569885,
    -0.023473965004086494,
    0.008073131553828716,
    0.03274259343743324,
    -0.006923343054950237,
    0.015288316644728184,
    0.016497880220413208,
    0.004142050631344318,
    0.0001251537469215691,
    -0.010738389566540718,
    -0.005541487131267786,
    -0.0018495065160095692,
    -0.016849497333168983,
    -0.007341767195612192,
    -0.010471160523593426,
    0.009683538228273392,
    0.018495066091418266,
    -0.012362861074507236,
    0.0058931042440235615,
    -0.014170173555612564,
    -0.02056257426738739,
    -0.03274259343743324,
    0.010246125049889088,
    0.013115322217345238,
    -0.014922634698450565,
    -0.011406462639570236,
    0.00328058865852654,
    0.0035566079895943403,
    -0.003394864033907652,
    -0.030857926234602928,
    -0.17777766287326813,
    0.01697607897222042,
    0.01074542198330164,
    -0.03859350457787514,
    0.012180020101368427,
    -0.010386772453784943,
    0.0073277028277516365,
    0.023797452449798584,
    -0.01798873580992222,
    -0.013248936273157597,
    0.01744021289050579,
    0.0006874116370454431,
    -0.005179321393370628,
    0.0020376218017190695,
    0.004810123238712549,
    -0.005133611150085926,
    0.007390993647277355,
    -0.004440925549715757,
    0.044219378381967545,
    0.009085788391530514,
    0.02732769027352333,
    -0.016680721193552017,
    0.00603726739063859,
    0.020084375515580177,
    -0.023530224338173866,
    -0.04019688069820404,
    -0.0026002093218266964,
    0.005080868490040302,
    -0.010056252591311932,
    -0.022503500804305077,
    -0.00741209089756012,
    0.008333328180015087,
    0.03324892371892929,
    -0.0019743305165320635,
    -0.0012165955267846584,
    0.016160326078534126,
    0.0024103359319269657,
    -0.009908572770655155,
    -0.011624464765191078,
    0.003983823116868734,
    0.02956397458910942,
    0.02312234789133072,
    0.02158929593861103,
    -0.02102670818567276,
    0.008902947418391705,
    0.020731350407004356,
    0.009648376144468784,
    -0.01850912906229496,
    0.012995772063732147,
    -0.010133608244359493,
    0.030829796567559242,
    -0.011617432348430157,
    0.009901540353894234,
    -0.01921236515045166,
    0.0068213739432394505,
    0.029817139729857445,
    -0.004321375396102667,
    0.014310820028185844,
    -0.0019831210374832153,
    -0.030829796567559242,
    0.006075945217162371,
    -0.00042040232801809907,
    0.004293246194720268,
    -0.007468349300324917,
    -0.016160326078534126,
    -0.03189871460199356,
    0.004862865898758173,
    0.016385361552238464,
    0.013860750012099743,
    0.008459909819066525,
    0.02364274114370346,
    0.010668066330254078,
    -0.03715890645980835,
    0.006026718765497208,
    -0.01308016013354063,
    0.0006997182499617338,
    -0.04331924021244049,
    0.027440207079052925,
    0.016188455745577812,
    -0.025864962488412857,
    -0.02573837898671627,
    0.04154708981513977,
    -0.018860746175050735,
    0.015443027950823307,
    -0.006722921039909124,
    0.01403655856847763,
    -0.0001416358136339113,
    -0.04039378464221954,
    -0.009099853225052357,
    0.0023822064977139235,
    0.024036552757024765,
    -0.040815725922584534,
    -0.0014337191823869944,
    -0.0207454152405262,
    0.0005151192308403552,
    0.02867789939045906,
    -0.01841067709028721,
    -0.015386768616735935,
    0.0012042889138683677,
    -0.014310820028185844,
    -0.00045534427044913173,
    0.008122357539832592,
    -0.027172977104783058,
    -0.011012651026248932,
    0.017130790278315544,
    0.003090715268626809,
    -0.02302389405667782,
    0.0010073833400383592,
    0.026469742879271507,
    -0.010773551650345325,
    0.01655413769185543,
    0.02135019749403,
    0.04601965844631195,
    0.017651183530688286,
    0.012841060757637024,
    -0.001468001864850521,
    -0.013305195607244968,
    0.011026715859770775,
    0.020590703934431076,
    0.01758086122572422,
    0.025203920900821686,
    0.004444441292434931,
    0.016047809273004532,
    0.001010020379908383,
    -0.009198306128382683,
    -0.028227830305695534,
    -0.10306603461503983,
    -0.027946535497903824,
    0.016385361552238464,
    0.021701814606785774,
    -0.03651193156838417,
    -0.03156116232275963,
    -0.019549917429685593,
    -0.012046405114233494,
    -0.03296763077378273,
    -0.011969049461185932,
    0.0008175100083462894,
    0.007798869628459215,
    -0.005242612678557634,
    0.024978887289762497,
    -0.006251753773540258,
    -0.014810116961598396,
    -0.03316453471779823,
    0.003934596665203571,
    -0.003895918605849147,
    0.02106890268623829,
    -0.0036462703719735146,
    -0.0032067489810287952,
    -0.011230654083192348,
    0.013832621276378632,
    -0.013649780303239822,
    -0.006536563858389854,
    -0.02060476876795292,
    0.019746823236346245,
    0.03479604050517082,
    0.005752457305788994,
    -0.006339658051729202,
    -0.013994364999234676,
    -0.00474331621080637,
    0.008030937053263187,
    -0.02396622858941555,
    -0.004050630144774914,
    -0.05119546502828598,
    -0.02857944741845131,
    0.04599153250455856,
    -0.029310811311006546,
    0.0016438104212284088,
    -0.0013484519440680742,
    0.004198309499770403,
    -0.018706034868955612,
    -0.01957804523408413,
    0.023052023723721504,
    -0.01691981963813305,
    0.027299560606479645,
    0.003691980615258217,
    -0.0037306586746126413,
    -0.00037293400964699686,
    -0.020717285573482513,
    0.00948663242161274,
    0.01683543249964714,
    0.009592117741703987,
    -0.006824890151619911,
    0.004142050631344318,
    0.01729956641793251,
    0.005369194783270359,
    0.0020270731765776873,
    0.003284104634076357,
    -0.007890290580689907,
    0.011969049461185932,
    0.00792545173317194,
    -0.006265818607062101,
    0.002753162756562233,
    -0.005738392937928438,
    -0.021364262327551842,
    -0.00818564835935831,
    -0.022362854331731796,
    -0.02616032026708126,
    0.0018002800643444061,
    -0.013227839022874832,
    0.008340360596776009,
    -0.027777759358286858,
    -0.004771445412188768,
    -0.013066095300018787,
    -0.0012579105095937848,
    0.015935292467474937,
    -0.02489449828863144,
    0.006332626100629568,
    0.004834736697375774,
    0.0072151850908994675,
    -0.03164554759860039,
    -0.004296762403100729,
    0.029170162975788116,
    0.0015497528947889805,
    0.004110405221581459,
    0.018663842231035233,
    -0.043516144156455994,
    0.011153297498822212,
    -0.009451470337808132,
    0.0271870419383049,
    0.005650488659739494,
    -0.010731357149779797,
    0.011547109112143517,
    -0.002899083774536848,
    0.00836848933249712,
    -0.031026702374219894,
    -0.00829816609621048,
    -0.02984526939690113,
    -0.005703231319785118,
    -0.07578054070472717,
    0.006874116603285074,
    0.0077215139754116535,
    0.000251626071985811,
    0.0072644115425646305,
    -0.03738394007086754,
    -0.005949363112449646,
    -0.01482418179512024,
    0.02205343171954155,
    0.032292526215314865,
    -0.021364262327551842,
    -0.008347392082214355,
    0.01464134082198143,
    0.015021087601780891,
    -0.019409269094467163,
    0.005400840193033218,
    0.03763710707426071,
    -0.007025311700999737,
    0.035836827009916306,
    0.02144864946603775,
    -0.02551334537565708,
    0.0009572778362780809,
    0.023797452449798584,
    0.017327696084976196,
    -0.03707451745867729,
    -0.009810119867324829,
    0.010112510994076729,
    0.019324881955981255,
    -0.004307311028242111,
    -0.016216585412621498,
    0.010668066330254078,
    -0.02172994427382946,
    -0.012461313977837563,
    0.0252742450684309,
    0.00763712590560317,
    -0.0119338883087039,
    0.0015664546517655253,
    0.023066088557243347,
    0.03448661416769028,
    0.021082967519760132,
    -0.01677917316555977,
    -0.03727142512798309,
    0.04379744082689285,
    -0.002876228652894497,
    -0.013579456135630608,
    0.008326295763254166,
    -0.01677917316555977,
    0.015007022768259048,
    0.01669478416442871,
    0.0033315729815512896,
    0.016708848997950554,
    -0.0051054819487035275,
    -0.015414898283779621,
    -0.020014051347970963,
    -0.0037834011018276215,
    -0.009613214060664177,
    0.01212376169860363,
    -0.013277065940201283,
    -0.011744014918804169,
    -0.006033751182258129,
    0.0439099557697773,
    -0.0008992610382847488,
    0.018171576783061028,
    -0.022784795612096786,
    -0.008382554166018963,
    -0.0297046210616827,
    -0.02340364083647728,
    -0.024542881175875664,
    0.0008983819861896336,
    -0.011160329915583134,
    -0.006733469665050507,
    -0.03603373095393181,
    0.011413494125008583,
    0.008009839802980423,
    0.009774958714842796,
    -0.028199700638651848,
    0.0027742597740143538,
    -0.010766519233584404,
    -0.00967650581151247,
    0.004655411932617426,
    0.023431770503520966,
    -0.007911386899650097,
    -0.02028128132224083,
    -0.0019567497074604034,
    0.029957786202430725,
    0.0045112487860023975,
    -0.004349505063146353,
    -0.004356537014245987,
    -0.0001735011173877865,
    -0.009971863590180874,
    0.008284101262688637,
    0.019732758402824402,
    -0.007222217507660389,
    0.020492250099778175,
    0.024838238954544067,
    -0.00048655029968358576,
    -0.01977495104074478,
    -0.017749637365341187,
    0.009219403378665447,
    0.027988729998469353,
    0.005446550436317921,
    -0.010133608244359493,
    -0.00615330133587122,
    0.0017449003644287586,
    -0.00811532512307167,
    0.00625878619030118,
    0.015724321827292442,
    -0.03192684426903725,
    -0.013241903856396675,
    0.009535858407616615,
    -0.016286909580230713,
    -0.016441620886325836,
    -0.028410671278834343,
    0.019184235483407974,
    -0.014345982111990452,
    -0.021898720413446426,
    -0.010147673077881336,
    -0.0014214125694707036,
    -0.013516165316104889,
    -0.017004208639264107,
    -0.017454277724027634,
    0.004992964211851358,
    0.034064676612615585,
    0.00781293399631977,
    0.004437409341335297,
    0.0029149067122489214,
    0.021462714299559593,
    -0.0007788321236148477,
    0.004750348627567291,
    -0.009789022617042065,
    0.006276367232203484,
    0.003614624962210655,
    -0.022405048832297325,
    -0.0340365469455719,
    -0.00562939140945673,
    0.006216592155396938,
    0.006216592155396938,
    -0.010471160523593426,
    -0.018129384145140648,
    0.09620247036218643,
    0.00670182378962636,
    -0.02732769027352333,
    0.029676493257284164,
    -0.0233614481985569,
    0.016146263107657433,
    -0.0008900310494937003,
    -0.014416305348277092,
    0.02727143093943596,
    -0.012545702047646046,
    0.015161734074354172,
    0.01780589483678341,
    -0.0016165601555258036,
    0.012805898673832417,
    -0.037552718073129654,
    0.031307995319366455,
    -0.016933884471654892,
    0.027904340997338295,
    0.024303780868649483,
    0.0035460595972836018,
    0.01786215417087078,
    0.007728546392172575,
    0.011040780693292618,
    0.011153297498822212,
    -0.05884665623307228,
    -0.007791837211698294,
    0.04635721445083618,
    0.022601954638957977,
    0.010112510994076729,
    -0.044641319662332535,
    -0.0027250333223491907,
    -0.022362854331731796,
    -0.03673696517944336,
    -0.008466942235827446,
    -0.010028122924268246,
    0.0021395906805992126,
    -0.017693378031253815,
    -0.021293938159942627,
    0.013811524026095867,
    -0.012700413353741169,
    -0.003359702415764332,
    -0.004472570959478617,
    -0.031729936599731445,
    -0.03395215794444084,
    0.027763694524765015,
    -0.0036251733545213938,
    0.013037965632975101,
    -0.01679323799908161,
    -0.026146255433559418
  ]
}
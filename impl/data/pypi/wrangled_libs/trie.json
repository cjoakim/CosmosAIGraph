{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "natural language :: english",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9"
  ],
  "description": "python implementation of the ethereum trie structure\n# python implementation of the ethereum trie structure\n\n[![join the conversation on discord](https://img.shields.io/discord/809793915578089484?color=blue&label=chat&logo=discord&logocolor=white)](https://discord.gg/ghryrvpb84)\n[![build status](https://circleci.com/gh/ethereum/py-trie.svg?style=shield)](https://circleci.com/gh/ethereum/py-trie)\n[![pypi version](https://badge.fury.io/py/trie.svg)](https://badge.fury.io/py/trie)\n[![python versions](https://img.shields.io/pypi/pyversions/trie.svg)](https://pypi.python.org/pypi/trie)\n\n> this library and repository was previously located at [pipermerriam/py-trie](https://github.com/pipermerriam/py-trie). it was transferred to the ethereum foundation github in\n> november 2017 and renamed to `py-trie`.\n\n## installation\n\n```sh\npython -m pip install trie\n```\n\n## developer setup\n\nif you would like to hack on py-trie, please check out the [snake charmers\ntactical manual](https://github.com/ethereum/snake-charmers-tactical-manual)\nfor information on how we do:\n\n- testing\n- pull requests\n- documentation\n\nwe use [pre-commit](https://pre-commit.com/) to maintain consistent code style. once\ninstalled, it will run automatically with every commit. you can also run it manually\nwith `make lint`. if you need to make a commit that skips the `pre-commit` checks, you\ncan do so with `git commit --no-verify`.\n\n### development environment setup\n\nyou can set up your dev environment with:\n\n```sh\ngit clone git@github.com:ethereum/py-trie.git\ncd py-trie\nvirtualenv -p python3 venv\n. venv/bin/activate\npython -m pip install -e \".[dev]\"\npre-commit install\n```\n\n## running the tests\n\nyou can run the tests with:\n\n```sh\ngit submodule update --init --recursive\npytest tests\n```\n\n### release setup\n\nto release a new version:\n\n```sh\nmake release bump=$$version_part_to_bump$$\n```\n\n#### how to bumpversion\n\nthe version format for this repo is `{major}.{minor}.{patch}` for stable, and\n`{major}.{minor}.{patch}-{stage}.{devnum}` for unstable (`stage` can be alpha or beta).\n\nto issue the next version in line, specify which part to bump,\nlike `make release bump=minor` or `make release bump=devnum`. this is typically done from the\nmain branch, except when releasing a beta (in which case the beta is released from main,\nand the previous stable branch is released from said branch).\n\nif you are in a beta version, `bumpversion stage` will switch to a stable.\n\nto issue an unstable version when the current version is stable, specify the\nnew version explicitly, like `bumpversion --new-version 4.0.0-alpha.1 devnum`\n\n## usage\n\n```python\n>>> from trie import hexarytrie\n>>> t = hexarytrie(db={})\n>>> t.root_hash\nb'v\\xe8\\x1f\\x17\\x1b\\xccu\\xa6\\xff\\x83e\\xe6\\x92\\xc0\\xf8n[h\\xe0\\x1b\\x99l\\xad\\xc0\\x01b/\\xb5\\xe3c\\xb4!'\n>>> t.set(b'my-key', b'some-value')\n>>> t.get(b'my-key')\nb'some-value'\n>>> t.exists(b'another-key')\nfalse\n>>> t.set(b'another-key', b'another-value')\n>>> t.exists(b'another-key')\ntrue\n>>> t.delete(b'another-key')\n>>> t.exists(b'another-key')\nfalse\n```\n\nyou can also use it like a dictionary.\n\n```python\n>>> from trie import hexarytrie\n>>> t = hexarytrie(db={})\n>>> t.root_hash\nb'v\\xe8\\x1f\\x17\\x1b\\xccu\\xa6\\xff\\x83e\\xe6\\x92\\xc0\\xf8n[h\\xe0\\x1b\\x99l\\xad\\xc0\\x01b/\\xb5\\xe3c\\xb4!'\n>>> t[b'my-key'] = b'some-value'\n>>> t[b'my-key']\nb'some-value'\n>>> b'another-key' in t\nfalse\n>>> t[b'another-key']  = b'another-value'\n>>> b'another-key' in t\ntrue\n>>> del t[b'another-key']\n>>> b'another-key' in t\nfalse\n```\n\n### traversing (inspecting trie internals)\n\n```python\n>>> from trie import hexarytrie\n>>> t = hexarytrie(db={})\n>>> t.root_hash\nb'v\\xe8\\x1f\\x17\\x1b\\xccu\\xa6\\xff\\x83e\\xe6\\x92\\xc0\\xf8n[h\\xe0\\x1b\\x99l\\xad\\xc0\\x01b/\\xb5\\xe3c\\xb4!'\n>>> t[b'my-key'] = b'some-value'\n>>> t[b'my-other-key']  = b'another-value'\n\n# look at the root node:\n>>> root_node = t.traverse(())\n>>> root_node\nhexarytrienode(sub_segments=((0x6, 0xd, 0x7, 0x9, 0x2, 0xd, 0x6),), value=b'', suffix=(), raw=[b'\\x16\\xd7\\x92\\xd6', b'\\xb4q\\xb8h\\xec\\x1c\\xe1\\xf4\\\\\\x88\\xda\\xb4\\xc1\\xc2n\\xbaw\\xd0\\x9c\\xf1\\xacv\\xb4dk\\xa7\\xe6\\xd7qf\\xc2\\x82'])\n\n# the root node is an extension down, because the first 7 nibbles are the same between the two keys\n\n# let's walk down to the child of that extension\n>>> prefix6d792d6 = t.traverse(root_node.sub_segments[0])\n>>> prefix6d792d6\nhexarytrienode(sub_segments=((0xb,), (0xf,)), value=b'', suffix=(), raw=[b'', b'', b'', b'', b'', b'', b'', b'', b'', b'', b'', [b' ey', b'some-value'], b'', b'', b'', [b' ther-key', b'another-value'], b''])\n\n# a branch node separates the second nibbles of b'k' and b'o': 0xb and 0xf\n# notice the position of the children in the 11th and 15th index\n\n# another way to get there without loading the root node from the database is using traverse_from:\n>>> assert t.traverse_from(root_node, root_node.sub_segments[0]) == prefix6d792d6\n\n# embedded nodes can be traversed to the same way as nodes stored in the database:\n\n>>> t.traverse(root_node.sub_segments[0] + (0xb,))\nhexarytrienode(sub_segments=(), value=b'some-value', suffix=(0x6, 0x5, 0x7, 0x9), raw=[b' ey', b'some-value'])\n\n# this leaf node includes the suffix (the rest of the key, in nibbles, that haven't been traversed,\n# just b'ey': 0x6579\n\n```\n\n### walking a full trie\n\nto walk through the full trie (for example, to verify that all node bodies are present in the database),\nuse hexarytriefog and the traversal api above.\n\nfor example:\n\n```python\n\n>>> from trie import hexarytrie\n>>> t = hexarytrie(db={})\n>>> t.root_hash\nb'v\\xe8\\x1f\\x17\\x1b\\xccu\\xa6\\xff\\x83e\\xe6\\x92\\xc0\\xf8n[h\\xe0\\x1b\\x99l\\xad\\xc0\\x01b/\\xb5\\xe3c\\xb4!'\n>>> t[b'my-key'] = b'some-value'\n>>> t[b'my-other-key']  = b'another-value'\n>>> t[b'your-key'] = b'your-value'\n>>> t[b'your-other-key'] = b'your-other-value'\n>>> t.root_hash\nb'\\xf8\\xdd\\xe4\\x0f\\xaa\\xf4p7\\xfa$\\xfde>\\xec\\xb4i\\x00n\\xa3)\\xcf\\xef\\x80\\xc4yu\\xe8\\xe7\\xbf\\xa89\\xd5'\n\n# initialize a fog object to track unexplored prefixes in a trie walk\n>>> from trie.fog import hexarytriefog\n>>> empty_fog = hexarytriefog()\n# at the beginning, the unexplored prefix is (), which means that none of the trie has been explored\n>>> prefix = empty_fog.nearest_unknown()\n()\n\n# so we start by exploring the node at prefix () -- which is the root node:\n>>> node = t.traverse(prefix)\nhexarytrienode(sub_segments=((0x6,), (0x7,)), value=b'', suffix=(), raw=[b'', b'', b'', b'', b'', b'', b\"\\x03\\xd2vk\\x85\\xce\\xe1\\xa8\\xdb'f\\x8c\\xe5\\x15\\xc6\\n+m:th\\xa1\\\\\\xb13\\xcc\\xe8\\xd0\\x1d\\xa7\\xa8u\", b\"\\x1b\\x8d'\\xb3\\x99(yx\\xaa\\x96c!\\xba'x \\xbb|\\xa6,\\xb5v!\\xd3\\x1a\\x05\\xe5\\xbf\\x02\\xa3fr\", b'', b'', b'', b'', b'', b'', b'', b'', b''])\n# and mark the root as explored, while defining the unexplored children:\n>>> level1fog = empty_fog.explore(prefix, node.sub_segments)\n# now the unexplored prefixes are the keys starting with the four bits 6 and the four bits 7.\n# all other keys are known to not exist (and so have been explored)\n>>> level1fog\nhexarytriefog<sortedset([(0x6,), (0x7,)])>\n\n# so we continue exploring. the fog helps choose which prefix to explore next:\n>>> level1fog.nearest_unknown()\n(0x6,)\n# we can also look for the nearest unknown key to a particular target\n>>> prefix = level1fog.nearest_unknown((8, 1))\n(0x7,)\n>>> node7 = node.traverse(prefix)\nhexarytrienode(sub_segments=((0x9, 0x6, 0xf, 0x7, 0x5, 0x7, 0x2, 0x2, 0xd, 0x6),), value=b'', suffix=(), raw=[b'\\x00\\x96\\xf7w\"\\xd6', b\"\\xe2\\xe2on\\xe1\\xf8\\xda\\xc1\\x8c\\x03\\x92'\\x93\\x805\\xad-\\xef\\x07_\\x0epv\\x1f\\xb5/lvz\\xc6\\xc1\\xf9\"])\n# we found an extension node, and mark it in the fog\n# for simpliticy, we'll start clobbering the `fog` variable\n>>> fog = level1fog.explore(prefix, node7.sub_segments)\nhexarytriefog<sortedset([(0x6,), (0x7, 0x9, 0x6, 0xf, 0x7, 0x5, 0x7, 0x2, 0x2, 0xd, 0x6)])>\n\n# let's explore the next branch node and see what's left\n>>> prefix = fog.nearest_unknown((7,))\n(0x7, 0x9, 0x6, 0xf, 0x7, 0x5, 0x7, 0x2, 0x2, 0xd, 0x6)\n>>> node796f75722d6 = t.traverse(prefix)\nhexarytrienode(sub_segments=((0xb,), (0xf,)), value=b'', suffix=(), raw=[b'', b'', b'', b'', b'', b'', b'', b'', b'', b'', b'', [b' ey', b'your-value'], b'', b'', b'', [b' ther-key', b'your-other-value'], b''])\n# notice that the branch node inlines the values, but the fog and annotated node ignore them for now\n>>> fog = fog.explore(prefix, node796f75722d6.sub_segments)\nhexarytriefog<sortedset([(0x6,), (0x7, 0x9, 0x6, 0xf, 0x7, 0x5, 0x7, 0x2, 0x2, 0xd, 0x6, 0xb), (0x7, 0x9, 0x6, 0xf, 0x7, 0x5, 0x7, 0x2, 0x2, 0xd, 0x6, 0xf)])>\n\n# index keys may not matter for some use cases, so we can leave them out\n#   entirely, like nearest_unknown().\n# there's one more feature to consider: we can look directionally to the right\n#   of an index for the nearest prefix.\n>>> prefix = fog.nearest_right((0x7, 0x9, 0x6, 0xf, 0x7, 0x5, 0x7, 0x2, 0x2, 0xd, 0x6, 0xc))\n(0x7, 0x9, 0x6, 0xf, 0x7, 0x5, 0x7, 0x2, 0x2, 0xd, 0x6, 0xf)\n# that same index key would give a closer prefix to the left if direction didn't matter\n#   (see the difference in the very last nibble)\n>>> fog.nearest_unknown((0x7, 0x9, 0x6, 0xf, 0x7, 0x5, 0x7, 0x2, 0x2, 0xd, 0x6, 0xc))\n(0x7, 0x9, 0x6, 0xf, 0x7, 0x5, 0x7, 0x2, 0x2, 0xd, 0x6, 0xb)\n# so we traverse to this last embedded leaf node at `prefix`\n>>> a_leaf_node = t.traverse(prefix)\nhexarytrienode(sub_segments=(), value=b'your-other-value', suffix=(0x7, 0x4, 0x6, 0x8, 0x6, 0x5, 0x7, 0x2, 0x2, 0xd, 0x6, 0xb, 0x6, 0x5, 0x7, 0x9), raw=[b' ther-key', b'your-other-value'])\n# we mark the prefix as fully explored like so:\n>>> fog = fog.explore(prefix, a_leaf_node.sub_segments)\nhexarytriefog<sortedset([(0x6,), (0x7, 0x9, 0x6, 0xf, 0x7, 0x5, 0x7, 0x2, 0x2, 0xd, 0x6, 0xb)])>\n# notice that sub_segments was empty, and the prefix has disappeared from our list of unexplored prefixes\n\n# so far we have dealt with an un-changing trie, but what if it is\n#   modified while we are working on it?\n>>> del t[b'your-other-key']\n>>> t[b'your-key-rebranched'] = b'your-value'\n>>> t.root_hash\nb'\"\\xc0\\xcaq\\xa7x\\x08e\\xb5\"a\\xde\\xbfy\\xeb\"xy\\xb1o\\x034=\\x04\\x06\\xa9li\\xd8\\x92\\xadp'\n\n# the unexplored prefixes we have before might not exist anymore. they might:\n#   1. have been deleted entirely, in which case, we will get a blank node, and need no special treatment\n#   2. lead us into the middle of a leaf or extension node, which makes things tricky\n>>> prefix = fog.nearest_unknown((8,))\n(0x7, 0x9, 0x6, 0xf, 0x7, 0x5, 0x7, 0x2, 0x2, 0xd, 0x6, 0xb)\n>>> t.traverse(prefix)\ntraversedpartialpath: could not traverse through hexarytrienode(sub_segments=((0x9, 0x6, 0xf, 0x7, 0x5, 0x7, 0x2, 0x2, 0xd, 0x6, 0xb, 0x6, 0x5, 0x7, 0x9),), value=b'', suffix=(), raw=[b'\\x19our-key', b'f\\xbe\\x88\\x8f#\\xd5\\x15-8\\xc0\\x1f\\xfb\\xf7\\x8b=\\x98\\x86 \\xec\\xdek\\x07\\xc8\\xbf\\xa7\\x93\\xfa\\x9e\\xc1\\x89@\\x00']) at (0x7,), only partially traversed with: (0x9, 0x6, 0xf, 0x7, 0x5, 0x7, 0x2, 0x2, 0xd, 0x6, 0xb)\n\n# let's drill into what this means:\n#   - we fully traversed to a node at prefix (7,)\n#   - we tried to traverse into the rest of the prefix\n#   - we only got part-way through the extension node: (0x9, 0x6, 0xf, 0x7, 0x5, 0x7, 0x2, 0x2, 0xd, 0x6, 0xb)\n#   - the extension node full sub-segment is actually: (0x9, 0x6, 0xf, 0x7, 0x5, 0x7, 0x2, 0x2, 0xd, 0x6, 0xb, 0x6, 0x5, 0x7, 0x9)\n\n# so what do we do about it? catch the exception, and explore with the fog slightly differently\n>>> from trie.exceptions import traversedpartialpath\n>>> last_exception = none\n>>> try:\n      t.traverse(prefix)\n    except traversedpartialpath as exc:\n      last_exception = exc\n\n# we can now continue exploring the children of the extension node, by using an attribute on the exception:\n>>> sub_segments = last_exception.simulated_node.sub_segments\n((0x6, 0x5, 0x7, 0x9),)\n# note that this sub-segment now carries us the rest of the way to the child\n#   of the node that we only partially traversed into.\n# this \"simulated_node\" is created by slicing the extension node in two: the\n#   first extension node having the path that we (partially) traversed, and the second\n#   extension node being the child of that parent, which continues on to point to\n#   the child of the original extension.\n# if the exception is raised on a leaf node, then the leaf node is sliced into\n#   an extension and another shorter leaf node.\n>>> fog = fog.explore(prefix, sub_segments)\nhexarytriefog<sortedset([(0x6,), (0x7, 0x9, 0x6, 0xf, 0x7, 0x5, 0x7, 0x2, 0x2, 0xd, 0x6, 0xb, 0x6, 0x5, 0x7, 0x9)])>\n\n# so now we can pick up where we left off, traversing to the child of the extension node, and so on.\n>>> prefix = fog.nearest_unknown((8,))\n(0x7, 0x9, 0x6, 0xf, 0x7, 0x5, 0x7, 0x2, 0x2, 0xd, 0x6, 0xb, 0x6, 0x5, 0x7, 0x9)\n# the following will not raise a traversedpartialpath exception, because we know that\n#   a node was at the path, and the trie hasn't changed:\n>>> t.traverse(prefix)\nhexarytrienode(sub_segments=((0x2,),), value=b'your-value', suffix=(), raw=[b'', b'', [b'=rebranched', b'your-value'], b'', b'', b'', b'', b'', b'', b'', b'', b'', b'', b'', b'', b'', b'your-value'])\n\n# etc...\n```\n\n**note**: `traverse()` will access the database for every node from the root to the target node. if navigating a large trie, consider using `triefrontiercache` and `hexarytrie.traverse_from()` to minimize database lookups. see the tests in `tests/test_hexary_trie_walk.py` for some examples.\n\n## binarytrie\n\n**note:** one drawback of binary trie is that **one key can not be the prefix of another key**. for example,\nif you already set the value `value1` with key `key1`, you can not set another value with key `key` or `key11`\nand the like.\n\n### binarytrie branch and witness helper functions\n\n```python\n>>> from trie import binarytrie\n>>> from trie.branches import (\n>>>     check_if_branch_exist,\n>>>     get_branch,\n>>>     if_branch_valid,\n>>>     get_witness_for_key_prefix,\n>>> )\n>>> t = binarytrie(db={})\n>>> t.root_hash\nb\"\\xc5\\xd2f\\x01\\x86\\xf7#<\\x92~}\\xb2\\xdc\\xc7\\x03\\xc0\\xe5\\x00\\xb6s\\xca\\x82';{\\xfa\\xd8\\x04]\\x85\\xa4p\"\n>>> t.set(b'key1', b'value1')\n>>> t.set(b'key2', b'value2')\n```\n\nnow trie looks like this:\n\n```\n    root --->  (kvnode, *common key prefix*)\n                         |\n                         |\n                         |\n                    (branchnode)\n                     /         \\\n                    /           \\\n                   /             \\\n(kvnode, *remain kepath*)(kvnode, *remain kepath*)\n            |                           |\n            |                           |\n            |                           |\n  (leafnode, b'value1')       (leafnode, b'value2')\n```\n\n```python\n>>> # check_if_branch_exist function\n>>> check_if_branch_exist(t.db, t.root_hash, b'key')\ntrue\n>>> check_if_branch_exist(t.db, t.root_hash, b'key1')\ntrue\n>>> check_if_branch_exist(t.db, t.root_hash, b'ken')\nfalse\n>>> check_if_branch_exist(t.db, t.root_hash, b'key123')\nfalse\n>>> # get_branch function\n>>> get_branch(t.db, t.root_hash, b'key1')\n(b'\\x00\\x82\\x1a\\xd9^l|38j\\xed\\xf31s\\xb2\\x97a\\x8dy\\x91rj\\x92\\xf5zc\\xb4\\x99t&;!\\x9f\\xa9!\\xa2\\xfe;', b\"\\x01*\\xaccxh\\x89\\x08}\\x93|\\xda\\xb9\\r\\x9b\\x82\\x8b\\xb2y\\xbc\\x10\\xb9\\x88\\xf40\\xef\\xed\\x8b'\\x13\\xbc\\xa5\\xccygb\\xc2\\x8db\\x88lps@)\\x86v\\xd7b\\xf7\\xd3x\\x93\\xc9\\xf0\\xfd\\xae\\xe0`j#\\x0b\\xca;\\xf8\", b'\\x00\\x11\\x8ael3\\x839e\\xbd\\xc4g\\xd1xj\\x0fxwu\\xcb\\xf6\\xf3\\xf2\\x8e7!m\\xca\\x1c/\\xd7\\x7f\\xed\\xc6', b'\\x02value1')\n```\n\nnode started with `b'\\x00'`, `b'\\x01'` and `b'\\x02'` are kvnode, branchnode and leafnode respectively.\n\n```python\n>>> get_branch(t.db, t.root_hash, b'key')\n(b'\\x00\\x82\\x1a\\xd9^l|38j\\xed\\xf31s\\xb2\\x97a\\x8dy\\x91rj\\x92\\xf5zc\\xb4\\x99t&;!\\x9f\\xa9!\\xa2\\xfe;',)\n>>> get_branch(t.db, t.root_hash, b'key123') # invalidkeyerror\n>>> get_branch(t.db, t.root_hash, b'key5') # there is still branch for non-exist key\n(b'\\x00\\x82\\x1a\\xd9^l|38j\\xed\\xf31s\\xb2\\x97a\\x8dy\\x91rj\\x92\\xf5zc\\xb4\\x99t&;!\\x9f\\xa9!\\xa2\\xfe;',)\n>>> # if_branch_valid function\n>>> v = t.get(b'key1')\n>>> b = get_branch(t.db, t.root_hash, b'key1')\n>>> if_branch_valid(b, t.root_hash, b'key1', v)\ntrue\n>>> v = t.get(b'key5') # v should be none\n>>> b = get_branch(t.db, t.root_hash, b'key5')\n>>> if_branch_valid(b, t.root_hash, b'key5', v)\ntrue\n>>> v = t.get(b'key1')\n>>> b = get_branch(t.db, t.root_hash, b'key2')\n>>> if_branch_valid(b, t.root_hash, b'key1', v) # keyerror\n>>> if_branch_valid([], t.root_hash, b'key1', v) # assertionerror\n>>> # get_witness_for_key_prefix function\n>>> get_witness_for_key_prefix(t.db, t.root_hash, b'key1') # equivalent to `get_branch(t.db, t.root_hash, b'key1')`\n(b'\\x00\\x82\\x1a\\xd9^l|38j\\xed\\xf31s\\xb2\\x97a\\x8dy\\x91rj\\x92\\xf5zc\\xb4\\x99t&;!\\x9f\\xa9!\\xa2\\xfe;', b\"\\x01*\\xaccxh\\x89\\x08}\\x93|\\xda\\xb9\\r\\x9b\\x82\\x8b\\xb2y\\xbc\\x10\\xb9\\x88\\xf40\\xef\\xed\\x8b'\\x13\\xbc\\xa5\\xccygb\\xc2\\x8db\\x88lps@)\\x86v\\xd7b\\xf7\\xd3x\\x93\\xc9\\xf0\\xfd\\xae\\xe0`j#\\x0b\\xca;\\xf8\", b'\\x00\\x11\\x8ael3\\x839e\\xbd\\xc4g\\xd1xj\\x0fxwu\\xcb\\xf6\\xf3\\xf2\\x8e7!m\\xca\\x1c/\\xd7\\x7f\\xed\\xc6', b'\\x02value1')\n>>> get_witness_for_key_prefix(t.db, t.root_hash, b'key') # this will include additional nodes of b'key2'\n(b'\\x00\\x82\\x1a\\xd9^l|38j\\xed\\xf31s\\xb2\\x97a\\x8dy\\x91rj\\x92\\xf5zc\\xb4\\x99t&;!\\x9f\\xa9!\\xa2\\xfe;', b\"\\x01*\\xaccxh\\x89\\x08}\\x93|\\xda\\xb9\\r\\x9b\\x82\\x8b\\xb2y\\xbc\\x10\\xb9\\x88\\xf40\\xef\\xed\\x8b'\\x13\\xbc\\xa5\\xccygb\\xc2\\x8db\\x88lps@)\\x86v\\xd7b\\xf7\\xd3x\\x93\\xc9\\xf0\\xfd\\xae\\xe0`j#\\x0b\\xca;\\xf8\", b'\\x00\\x11\\x8ael3\\x839e\\xbd\\xc4g\\xd1xj\\x0fxwu\\xcb\\xf6\\xf3\\xf2\\x8e7!m\\xca\\x1c/\\xd7\\x7f\\xed\\xc6', b'\\x02value1', b'\\x00\\x10o\\xa9\\x0b\\x1c!_`<\\xb5^\\x98d\\x89\\x17\\x148\\xac\\xda&\\xb3p\\xf6\\x06[\\x1b9\\xc09\\xbas\\x85\\xf5', b'\\x02value2')\n>>> get_witness_for_key_prefix(t.db, t.root_hash, b'') # this will return the whole trie\n```\n",
  "docs_url": null,
  "keywords": "ethereum blockchain evm trie merkle",
  "license": "mit",
  "name": "trie",
  "package_url": "https://pypi.org/project/trie/",
  "project_url": "https://pypi.org/project/trie/",
  "project_urls": {
    "Homepage": "https://github.com/ethereum/py-trie"
  },
  "release_url": "https://pypi.org/project/trie/3.0.0/",
  "requires_dist": [
    "eth-hash >=0.1.0",
    "eth-utils >=2.0.0",
    "hexbytes <0.4.0,>=0.2.0",
    "rlp >=3",
    "sortedcontainers >=2.1.0",
    "build >=0.9.0 ; extra == 'dev'",
    "bumpversion >=0.5.3 ; extra == 'dev'",
    "eth-hash <1.0.0,>=0.1.0 ; extra == 'dev'",
    "ipython ; extra == 'dev'",
    "pre-commit >=3.4.0 ; extra == 'dev'",
    "tox >=4.0.0 ; extra == 'dev'",
    "twine ; extra == 'dev'",
    "wheel ; extra == 'dev'",
    "towncrier <22,>=21 ; extra == 'dev'",
    "hypothesis <7,>=6.56.4 ; extra == 'dev'",
    "pycryptodome ; extra == 'dev'",
    "pytest >=7.0.0 ; extra == 'dev'",
    "pytest-xdist >=2.4.0 ; extra == 'dev'",
    "towncrier <22,>=21 ; extra == 'docs'",
    "hypothesis <7,>=6.56.4 ; extra == 'test'",
    "pycryptodome ; extra == 'test'",
    "pytest >=7.0.0 ; extra == 'test'",
    "pytest-xdist >=2.4.0 ; extra == 'test'"
  ],
  "requires_python": ">=3.8, <4",
  "summary": "python implementation of the ethereum trie structure",
  "version": "3.0.0",
  "releases": [],
  "developers": [
    "snakecharmers@ethereum.org",
    "the_ethereum_foundation"
  ],
  "kwds": "trie triefrontiercache test_hexary_trie_walk python3 pytest",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_trie",
  "homepage": "https://github.com/ethereum/py-trie",
  "release_count": 34,
  "dependency_ids": [
    "pypi_build",
    "pypi_bumpversion",
    "pypi_eth_hash",
    "pypi_eth_utils",
    "pypi_hexbytes",
    "pypi_hypothesis",
    "pypi_ipython",
    "pypi_pre_commit",
    "pypi_pycryptodome",
    "pypi_pytest",
    "pypi_pytest_xdist",
    "pypi_rlp",
    "pypi_sortedcontainers",
    "pypi_towncrier",
    "pypi_tox",
    "pypi_twine",
    "pypi_wheel"
  ],
  "documentation_summary": "The GitHub repository \"ethereum/py-trie\" is a Python library for implementing the Ethereum Trie structure. It has received 100 stars and 51 forks. The library, previously located at pipermerriam/py-trie, was transferred to the Ethereum Foundation GitHub in November 2017 and renamed to py-trie. It is licensed under the MIT license. The repository includes instructions for installation, developer setup, running tests, and usage examples. It also provides detailed documentation on traversing the trie, including inspecting trie internals and walking a full trie. Additionally, it covers the setup for releasing new versions and includes a note on the Binary Trie's limitation regarding key prefixes. The repository is actively maintained with 29 contributors and supports Python 3.",
  "embedding": [
    -0.0011123951990157366,
    0.00975785218179226,
    -0.01671963557600975,
    -0.042068760842084885,
    -0.0049002161249518394,
    0.027449725195765495,
    0.010488804429769516,
    -0.022396931424736977,
    -0.004726348910480738,
    -0.024469144642353058,
    -0.017542844638228416,
    0.015740303322672844,
    -0.01704608090221882,
    0.022453704848885536,
    0.00166504445951432,
    -0.002611556090414524,
    0.011184273287653923,
    -0.02869873121380806,
    0.01943054422736168,
    0.007586286403238773,
    0.02892582304775715,
    -0.013753249309957027,
    -0.04311906173825264,
    -0.01534289214760065,
    0.00974365882575512,
    -0.0021697916090488434,
    0.01680479571223259,
    -0.0064437310211360455,
    0.0010733637027442455,
    0.001179813058115542,
    0.017628002911806107,
    -0.008040470071136951,
    -0.03613598644733429,
    -0.020892448723316193,
    -0.0005242627812549472,
    0.008409494534134865,
    0.029862577095627785,
    -0.0042792619206011295,
    0.05458720028400421,
    0.006802110001444817,
    0.01642157882452011,
    0.01427839882671833,
    -0.01921764574944973,
    -0.005808583460748196,
    -0.01201457716524601,
    0.007231455761939287,
    -0.005155694205313921,
    -0.037157900631427765,
    -0.02388722263276577,
    0.0035589549224823713,
    0.0017519780667498708,
    0.025391705334186554,
    -0.002936226548627019,
    -0.015002254396677017,
    -0.011702326126396656,
    0.005191177595406771,
    0.014633229933679104,
    0.04158619046211243,
    -0.025278160348534584,
    0.0027534884866327047,
    0.028045842424035072,
    -0.011077823117375374,
    -0.034886982291936874,
    -0.0008582474547438323,
    -0.015967395156621933,
    -0.015697723254561424,
    0.0038463680539280176,
    0.012546824291348457,
    0.007345001678913832,
    0.034262482076883316,
    0.027903908863663673,
    0.02377367578446865,
    -0.004992472007870674,
    -0.0019018941093236208,
    0.04093330353498459,
    -0.0265981312841177,
    -0.0041621676646173,
    0.011226852424442768,
    -0.01677640900015831,
    0.0027446176391094923,
    -0.002063342137262225,
    -0.015115800313651562,
    0.01323519553989172,
    0.025278160348534584,
    0.012312635779380798,
    0.0030994487460702658,
    0.00976494885981083,
    0.03312702104449272,
    -0.015172572806477547,
    -0.012710046023130417,
    0.0025175258051604033,
    -0.003697338979691267,
    -0.0072740353643894196,
    0.027903908863663673,
    -0.008984320797026157,
    0.012348118238151073,
    -0.003232510294765234,
    0.029124528169631958,
    -0.010133973322808743,
    -0.022297579795122147,
    -0.0327296108007431,
    0.0076501560397446156,
    0.0014494846109300852,
    -0.011226852424442768,
    -0.032076720148324966,
    -0.008970127440989017,
    -0.020211173221468925,
    -0.010176552459597588,
    0.039201728999614716,
    0.007976600900292397,
    -0.024980101734399796,
    0.034801822155714035,
    -0.004477967042475939,
    -0.01302229706197977,
    -0.0033017024397850037,
    -0.0029823544900864363,
    0.04510611668229103,
    -0.001092879450879991,
    -0.004882474429905415,
    -0.011496524326503277,
    0.02664071135222912,
    -0.041728124022483826,
    0.005847614724189043,
    0.002503332681953907,
    -3.2627816835884005e-05,
    -0.007096619810909033,
    0.0013935987371951342,
    -0.037328220903873444,
    0.016279645264148712,
    -0.02421366609632969,
    0.011929417960345745,
    -0.002705586375668645,
    0.007387581281363964,
    -0.004595061298459768,
    -0.012106833048164845,
    -0.009956557303667068,
    -0.010141070000827312,
    -0.0216588843613863,
    -0.011184273287653923,
    -0.03204833343625069,
    0.0012561017647385597,
    0.022411124780774117,
    -0.0010201390832662582,
    0.00023928914743009955,
    -0.0007806281791999936,
    0.04788799211382866,
    -0.02154533751308918,
    -0.0020367298275232315,
    -0.004818604793399572,
    -0.020409878343343735,
    0.01870669052004814,
    0.010453321039676666,
    0.0083243353292346,
    0.010659122839570045,
    -0.0013660993427038193,
    0.00485763605684042,
    -0.02631426602602005,
    0.0011407816782593727,
    -0.007309518288820982,
    -0.004492160398513079,
    -0.014242916367948055,
    0.020722130313515663,
    -0.02178662270307541,
    -0.0014237593859434128,
    0.02197113446891308,
    0.03517084941267967,
    -0.002730424515902996,
    -0.006287605036050081,
    -0.0008946176385506988,
    0.00824627187103033,
    0.01900474727153778,
    0.0031065454240888357,
    -0.020225366577506065,
    -0.013370031490921974,
    -0.0074159675277769566,
    -0.0018557660514488816,
    0.04238101467490196,
    0.0075153205543756485,
    -0.027875522151589394,
    0.011155886575579643,
    0.025334931910037994,
    0.00823917519301176,
    0.002992999507114291,
    0.03639146685600281,
    -0.006131479516625404,
    -0.027449725195765495,
    -0.012163606472313404,
    0.015683529898524284,
    0.010183649137616158,
    0.0008045792928896844,
    0.0237027108669281,
    0.025292353704571724,
    -0.0031828340142965317,
    -0.007256293669342995,
    -0.5781757831573486,
    -0.021076960489153862,
    0.0015169024700298905,
    -0.03744176775217056,
    0.000865787616930902,
    -0.0007389355450868607,
    0.0034081516787409782,
    0.012213282287120819,
    -0.03204833343625069,
    0.025462672114372253,
    0.005201822146773338,
    0.024398179724812508,
    -0.003924430813640356,
    -0.0022354351822286844,
    -0.01910410076379776,
    -0.014406138099730015,
    0.003857012838125229,
    -0.02832970581948757,
    0.034801822155714035,
    -0.014789355918765068,
    -0.002907840069383383,
    0.037328220903873444,
    -0.027151666581630707,
    0.0016748022753745317,
    -0.008366914466023445,
    0.030259987339377403,
    0.020594390109181404,
    -0.0005428914446383715,
    0.015499018132686615,
    0.01951570436358452,
    -0.014399041421711445,
    0.012248765677213669,
    0.01182296872138977,
    -0.01327777560800314,
    0.04777444526553154,
    -0.006922752596437931,
    -0.01078686211258173,
    0.034915369004011154,
    0.00238801259547472,
    0.02848583273589611,
    0.002265595830976963,
    -0.015030641108751297,
    0.0007792975520715117,
    0.015655143186450005,
    -0.0024483338929712772,
    0.00486473273485899,
    0.008047566749155521,
    0.007926924154162407,
    0.007263390347361565,
    -0.010928794741630554,
    -0.0030071926303207874,
    -0.019941501319408417,
    0.007309518288820982,
    -0.012823591940104961,
    0.04357324540615082,
    0.005904387682676315,
    0.027109088376164436,
    -0.00955205038189888,
    0.025590410456061363,
    -0.022624023258686066,
    -0.013717765919864178,
    0.02373109757900238,
    0.022496284916996956,
    0.004619899671524763,
    -0.03355281800031662,
    0.025718150660395622,
    -0.0016331096412613988,
    -0.013206809759140015,
    -0.0006626468966715038,
    -0.011588780209422112,
    0.023205947130918503,
    0.005198273807764053,
    0.001312874723225832,
    -0.017500264570116997,
    0.01077976543456316,
    0.051322754472494125,
    0.028173580765724182,
    0.007536610122770071,
    0.02622910775244236,
    0.0436016321182251,
    0.004297003149986267,
    0.0047618318349123,
    -0.012809398584067822,
    -0.01935957930982113,
    0.044282909482717514,
    0.006919204257428646,
    0.002001246903091669,
    -0.000548213894944638,
    0.015683529898524284,
    0.02637103945016861,
    0.0027641335036605597,
    0.015839654952287674,
    0.003938624169677496,
    -0.026967154815793037,
    0.01945893093943596,
    0.016151906922459602,
    -0.01081524882465601,
    -0.00529407849535346,
    -0.001972860423848033,
    -0.018763462081551552,
    -0.002049149014055729,
    -0.037157900631427765,
    -0.026768449693918228,
    0.007394677959382534,
    -0.005148597527295351,
    0.03817981481552124,
    -0.014093887060880661,
    0.006326636765152216,
    0.037129513919353485,
    0.0031988013070076704,
    -0.01890539564192295,
    -0.036817263811826706,
    -0.014576457440853119,
    -0.013327452354133129,
    0.0052656917832791805,
    -0.030487079173326492,
    0.03304186090826988,
    0.003557180752977729,
    -0.005751810502260923,
    -0.018153153359889984,
    0.006362119689583778,
    0.009779142215847969,
    -0.0016907696845009923,
    -0.014100983738899231,
    0.02192855440080166,
    0.006734692025929689,
    0.015768690034747124,
    -0.009225605987012386,
    -0.028301319107413292,
    0.015953201800584793,
    0.009048189967870712,
    0.003047998296096921,
    0.024682043120265007,
    0.002419947413727641,
    0.039372045546770096,
    -0.003299928270280361,
    0.020168593153357506,
    0.011382978409528732,
    -0.004683769308030605,
    -0.014058403670787811,
    0.004999568685889244,
    0.011915224604308605,
    0.01683318242430687,
    -0.02655555121600628,
    -0.031991563737392426,
    -0.02360335737466812,
    -0.013866795226931572,
    0.01060235034674406,
    -0.012944234535098076,
    -0.009289475157856941,
    0.037299834191799164,
    0.013710669241845608,
    -0.03079932928085327,
    0.016095133498311043,
    0.00829594861716032,
    -0.0030071926303207874,
    -0.025065261870622635,
    0.00021700133220292628,
    -0.0010777991265058517,
    -0.002201726194471121,
    -0.009232702665030956,
    0.015683529898524284,
    -0.0040521700866520405,
    0.013497770763933659,
    -0.032247040420770645,
    -0.025647183880209923,
    -0.001738671911880374,
    0.015002254396677017,
    0.0261013675481081,
    -0.020452458411455154,
    -0.025547832250595093,
    -0.0029557421803474426,
    -0.01057396363466978,
    -0.002803164767101407,
    -0.01636480540037155,
    0.018337665125727654,
    -0.032530903816223145,
    0.009481084533035755,
    0.005237305536866188,
    0.004570223391056061,
    -0.008814001455903053,
    0.04011009633541107,
    -0.0170744676142931,
    -0.01305778045207262,
    0.015726109966635704,
    -0.002666554879397154,
    0.012951331213116646,
    0.01666286401450634,
    0.02642781287431717,
    0.004985375329852104,
    0.0002674538700375706,
    -0.010652026161551476,
    -0.005766003392636776,
    0.0025991369038820267,
    -0.01307907048612833,
    0.0036086312029510736,
    0.024341406300663948,
    0.012383601628243923,
    -0.002806713106110692,
    0.017585424706339836,
    0.01901894062757492,
    -0.000783732975833118,
    0.025278160348534584,
    -0.044112589210271835,
    0.0030178376473486423,
    -0.013923567719757557,
    0.0030604172497987747,
    -0.015655143186450005,
    -0.0020952769555151463,
    -0.007834668271243572,
    0.017585424706339836,
    -0.009211412630975246,
    -0.006599856540560722,
    0.011092016473412514,
    -0.009190122596919537,
    0.04496418312191963,
    -0.019984081387519836,
    0.014846128411591053,
    -0.00206689047627151,
    -0.01637899875640869,
    0.017585424706339836,
    -0.004350227769464254,
    0.0023418846540153027,
    0.00853723380714655,
    -0.005045696627348661,
    -0.018252506852149963,
    0.032445747405290604,
    0.011482330970466137,
    -0.0194731242954731,
    -0.037214674055576324,
    0.0286419577896595,
    0.018153153359889984,
    -0.018479598686099052,
    -0.018110573291778564,
    0.004311196506023407,
    0.017741549760103226,
    0.05203241482377052,
    -0.026853609830141068,
    -0.011517814360558987,
    -0.03096964955329895,
    0.0013483577640727162,
    0.044282909482717514,
    -0.008643683046102524,
    -0.03326895460486412,
    0.04047911986708641,
    0.029919348657131195,
    -0.009289475157856941,
    0.01934538595378399,
    -0.027009734883904457,
    0.03993977606296539,
    -0.007117909844964743,
    0.013710669241845608,
    0.005553104914724827,
    -0.005425365641713142,
    0.011453944258391857,
    0.0003439642896410078,
    0.008579812943935394,
    0.034205708652734756,
    0.022822730243206024,
    0.0038108848966658115,
    0.02656974457204342,
    -0.01703188754618168,
    0.015314505435526371,
    0.025405898690223694,
    0.042068760842084885,
    -0.027293600142002106,
    -0.026867803186178207,
    -0.01538547221571207,
    -0.00487892609089613,
    -0.008381107822060585,
    -0.018578950315713882,
    -0.044396452605724335,
    -0.005467945709824562,
    -0.024724623188376427,
    0.03182124346494675,
    0.005648909602314234,
    0.0057376171462237835,
    0.029720643535256386,
    -0.018451211974024773,
    -0.010240422561764717,
    -0.005957612302154303,
    -0.008785615675151348,
    0.034688279032707214,
    0.020196979865431786,
    -0.0024536564014852047,
    -0.031963177025318146,
    0.007117909844964743,
    0.004077007994055748,
    -0.02147437073290348,
    0.009679789654910564,
    -0.018209926784038544,
    0.001102637266740203,
    -0.008785615675151348,
    0.015924815088510513,
    -0.034631505608558655,
    -0.014604843221604824,
    0.015215152874588966,
    0.0033850877080112696,
    0.01537127885967493,
    -0.00405926676467061,
    -0.0018912492087110877,
    0.008835291489958763,
    -0.034745052456855774,
    0.013221003115177155,
    0.07914150506258011,
    -0.013135842978954315,
    -0.01951570436358452,
    0.00829594861716032,
    -0.0037860467564314604,
    0.008828194811940193,
    -0.012121026404201984,
    -0.003312347223982215,
    -0.018096379935741425,
    -0.0021431792993098497,
    0.013128746300935745,
    0.014200336299836636,
    0.00300187012180686,
    0.006372764706611633,
    0.046525441110134125,
    0.01056686695665121,
    -0.0070433951914310455,
    -0.03812304139137268,
    -0.001728026894852519,
    0.013824215158820152,
    0.032247040420770645,
    0.025263966992497444,
    -0.002828002907335758,
    -0.0061208344995975494,
    -0.019941501319408417,
    -0.005826324690133333,
    -0.004414097405970097,
    0.000932318449486047,
    -0.006312443409115076,
    -0.01538547221571207,
    0.014633229933679104,
    0.0009917526040226221,
    -0.0006679693469777703,
    0.017826709896326065,
    0.020409878343343735,
    0.01927441917359829,
    -0.008381107822060585,
    0.00725984200835228,
    0.00954495370388031,
    0.006379861384630203,
    0.01945893093943596,
    -0.022354353219270706,
    -0.023177560418844223,
    0.009942363947629929,
    0.01305068377405405,
    0.002240757690742612,
    0.018167346715927124,
    0.004116039723157883,
    0.01882023550570011,
    -0.012979717925190926,
    -0.0014725485816597939,
    -0.02647039107978344,
    0.0071959723718464375,
    0.01717381924390793,
    -0.028145194053649902,
    0.04311906173825264,
    0.01696092076599598,
    0.030373532325029373,
    0.0237027108669281,
    -0.015215152874588966,
    0.03133867308497429,
    0.011461040936410427,
    0.003117190208286047,
    -0.004502805415540934,
    0.0004133781185373664,
    -0.007820474915206432,
    0.003005418460816145,
    -0.010907504707574844,
    -0.027236826717853546,
    0.01934538595378399,
    0.0075224172323942184,
    -0.0029025175608694553,
    -0.049165382981300354,
    -0.032502517104148865,
    0.03588050976395607,
    -0.006695660762488842,
    0.008700455538928509,
    -0.00037301608244888484,
    -0.005762455519288778,
    -0.03077094443142414,
    0.003564277198165655,
    -0.043771952390670776,
    0.013802925124764442,
    -0.015229346230626106,
    0.012468760833144188,
    -0.012504244223237038,
    -0.00327509013004601,
    0.024582691490650177,
    -0.0155557906255126,
    -0.0014122274005785584,
    -0.021105347201228142,
    0.00021944078616797924,
    -0.029976122081279755,
    -0.0071888756938278675,
    0.027407145127654076,
    0.0005145049653947353,
    0.027251020073890686,
    0.0015940782614052296,
    0.006362119689583778,
    -0.027918102219700813,
    0.0004976504715159535,
    -0.01706027425825596,
    0.01302229706197977,
    -0.007231455761939287,
    0.005052793305367231,
    -0.0023897867649793625,
    0.02872711792588234,
    0.008558523841202259,
    -0.010630736127495766,
    0.01889120228588581,
    -0.009701079688966274,
    0.001619803486391902,
    0.005634716246277094,
    0.0037966915406286716,
    -0.017202205955982208,
    0.0065856631845235825,
    0.01075137872248888,
    0.000719419855158776,
    0.005549556575715542,
    0.0002772117150016129,
    -0.011028147302567959,
    -0.004988923668861389,
    0.007025653496384621,
    -0.014846128411591053,
    0.008012083359062672,
    -0.01708866097033024,
    -0.010219132527709007,
    0.018082186579704285,
    -0.004499257076531649,
    -0.004293454810976982,
    0.024426564574241638,
    -0.014441621489822865,
    -0.004687317181378603,
    0.02608717419207096,
    0.01884862221777439,
    0.004740542266517878,
    -0.013547447510063648,
    0.025420092046260834,
    -0.011893934570252895,
    -0.022652409970760345,
    0.014157756231725216,
    -0.022411124780774117,
    0.024866556748747826,
    0.02838647924363613,
    -0.0032591226045042276,
    -0.008622393012046814,
    0.0024589786771684885,
    -0.006000191904604435,
    -0.027109088376164436,
    0.025391705334186554,
    0.023362072184681892,
    0.0010325581533834338,
    0.016038360074162483,
    -0.009083673357963562,
    -0.0016881084302440286,
    -0.007536610122770071,
    -0.022496284916996956,
    -0.010190745815634727,
    -0.017486071214079857,
    0.0019018941093236208,
    -0.01691834256052971,
    -0.0017147207399830222,
    -0.017684776335954666,
    -0.01906152069568634,
    -0.018380245193839073,
    -0.019884727895259857,
    -0.02892582304775715,
    0.006862431298941374,
    0.002010117517784238,
    0.002663006540387869,
    -0.018082186579704285,
    -0.011297819204628468,
    -0.012965524569153786,
    -0.01703188754618168,
    0.002017214195802808,
    -0.009786238893866539,
    0.013944857753813267,
    0.022666603326797485,
    0.015300312079489231,
    0.027989068999886513,
    0.014434524811804295,
    0.0038392713759094477,
    0.027023928239941597,
    0.02371690422296524,
    0.015257732942700386,
    0.002160920761525631,
    -0.004971181973814964,
    0.015967395156621933,
    -0.032417360693216324,
    -0.00777079863473773,
    -0.0005056341760791838,
    0.007075329776853323,
    0.008785615675151348,
    -0.009885591454803944,
    -0.01706027425825596,
    0.0529123991727829,
    -0.012305539101362228,
    0.014988061040639877,
    -0.020111819729208946,
    -0.034546345472335815,
    -0.04465193301439285,
    0.011567490175366402,
    0.01687576249241829,
    0.0033779910299926996,
    -0.012518437579274178,
    -0.012532630935311317,
    0.020310526713728905,
    -0.02407173439860344,
    0.023191753774881363,
    0.00936044193804264,
    -0.0042863585986196995,
    0.003424118971452117,
    0.020665356889367104,
    0.012298442423343658,
    0.0286419577896595,
    -0.01204296387732029,
    0.010432031005620956,
    -0.022254999727010727,
    -0.03338250145316124,
    -0.0018593143904581666,
    -0.0028155839536339045,
    0.012475857511162758,
    0.0004204747383482754,
    0.001699640415608883,
    -0.003920882474631071,
    0.017429297789931297,
    0.004648285917937756,
    -0.025363318622112274,
    0.023134980350732803,
    -0.0014441621024161577,
    -0.024909134954214096,
    -0.02177242934703827,
    -0.0378107912838459,
    -0.029493551701307297,
    0.0004133781185373664,
    0.031934790313243866,
    0.022794343531131744,
    0.017443491145968437,
    -0.013930664397776127,
    -0.0010840087197721004,
    -0.00326799345202744,
    0.016322225332260132,
    0.07301002740859985,
    0.013682283461093903,
    0.02121889404952526,
    0.030401919037103653,
    0.0037683050613850355,
    -0.013554544188082218,
    -0.0037824984174221754,
    -0.007827571593225002,
    -0.004534740000963211,
    0.034745052456855774,
    0.017897674813866615,
    -0.03582373633980751,
    0.018181540071964264,
    0.020196979865431786,
    -0.006287605036050081,
    -0.017514457926154137,
    -0.021005995571613312,
    0.027052314952015877,
    0.00972946546971798,
    0.011673939414322376,
    -0.008558523841202259,
    -0.0003344282158650458,
    -0.01686156913638115,
    0.03173608332872391,
    -0.034716665744781494,
    0.007607576437294483,
    -0.01698930747807026,
    -0.012993911281228065,
    -0.020282140001654625,
    0.02185758948326111,
    -0.004556030035018921,
    0.022141454741358757,
    0.0019426996586844325,
    -0.01185135543346405,
    -0.003427667310461402,
    -0.007529513444751501,
    -0.027705203741788864,
    0.008217886090278625,
    0.007905634120106697,
    0.04496418312191963,
    -0.041415873914957047,
    -0.019756989553570747,
    0.04280681163072586,
    -0.009885591454803944,
    -0.027605850249528885,
    -0.007898537442088127,
    -0.014860321767628193,
    0.04113200679421425,
    -0.004538288339972496,
    -0.012447470799088478,
    -0.02377367578446865,
    -0.005446655675768852,
    0.0015390794724225998,
    0.02172984927892685,
    -0.027052314952015877,
    -0.009033996611833572,
    -0.006156317889690399,
    0.00958753377199173,
    0.022240806370973587,
    -0.01715962588787079,
    0.0050350516103208065,
    -0.027208440005779266,
    -0.006713402457535267,
    0.00326089677400887,
    -0.019898921251296997,
    0.006394054275006056,
    0.027861328795552254,
    -0.02371690422296524,
    -0.01185135543346405,
    -0.011581683531403542,
    -0.00591503269970417,
    0.001965763745829463,
    0.004524094983935356,
    -0.014143562875688076,
    -0.01083653885871172,
    0.046582210808992386,
    -8.543665171600878e-05,
    -0.015669336542487144,
    -0.00936753861606121,
    0.008892064914107323,
    -0.030316760763525963,
    -0.0035323426127433777,
    -0.01681898906826973,
    -0.011532006785273552,
    0.014171949587762356,
    -0.008196596056222916,
    -0.01926022581756115,
    -0.01930280588567257,
    -0.004751186817884445,
    0.027492305263876915,
    0.009424311108887196,
    -0.014902901835739613,
    -0.00949527695775032,
    0.021034380421042442,
    0.01879184879362583,
    0.007387581281363964,
    -0.025093648582696915,
    0.03755531087517738,
    -0.011631360277533531,
    -0.01425710879266262,
    -0.005457300692796707,
    -0.010041717439889908,
    0.005812131799757481,
    0.022624023258686066,
    -0.0010210261680185795,
    -0.007387581281363964,
    -0.03741338104009628,
    -0.02387302927672863,
    -0.023404652252793312,
    -0.022496284916996956,
    -0.034234095364809036,
    0.03338250145316124,
    0.010332678444683552,
    -0.010495901107788086,
    -0.0165777038782835,
    0.024696236476302147,
    -0.007394677959382534,
    -0.007096619810909033,
    0.0045099020935595036,
    0.019643444567918777,
    0.01879184879362583,
    -0.019615057855844498,
    -0.0026789740659296513,
    -0.013348741456866264,
    0.010950084775686264,
    0.006727595813572407,
    -0.04502095654606819,
    -0.015740303322672844,
    -0.010133973322808743,
    0.04771767184138298,
    0.027506498619914055,
    -0.01891958899796009,
    -0.0023755934089422226,
    -0.018351858481764793,
    -0.024724623188376427,
    -0.0007172021432779729,
    -0.0012906977208331227,
    0.020069241523742676,
    0.027577465400099754,
    -0.01431388221681118,
    0.014619036577641964,
    0.020991802215576172,
    0.0005331335705704987,
    0.013568737544119358,
    -0.017926061525940895,
    0.01633641868829727,
    0.011269432492554188,
    -0.013213906437158585,
    -0.005414721090346575,
    -0.020864062011241913,
    -0.01676221564412117,
    -0.025448478758335114,
    0.007121458183974028,
    0.012582306750118732,
    0.006944042630493641,
    0.03613598644733429,
    -0.009282378479838371,
    -0.007330808322876692,
    0.000391866487916559,
    -0.010027524083852768,
    0.010041717439889908,
    0.011631360277533531,
    0.00300187012180686,
    -0.049108609557151794,
    0.0015736754285171628,
    -0.0027694557793438435,
    0.02148856408894062,
    -0.025462672114372253,
    0.0012844882439821959,
    0.004545385017991066,
    0.004932150710374117,
    0.00530117517337203,
    -0.01080815214663744,
    0.0019036682788282633,
    0.01890539564192295,
    -0.017145434394478798,
    -0.0028954208828508854,
    -0.0023472069296985865,
    -0.0008507072925567627,
    0.018607337027788162,
    0.005766003392636776,
    0.0062059941701591015,
    -0.02397238090634346,
    0.01880604214966297,
    -0.0311115812510252,
    0.03167930990457535,
    0.008941740728914738,
    -0.003456053789705038,
    0.01952989771962166,
    -0.0170744676142931,
    0.02130405232310295,
    -0.0051308562979102135,
    0.017897674813866615,
    -0.020367298275232315,
    -0.029976122081279755,
    -0.015711916610598564,
    0.018295085057616234,
    -0.003062191419303417,
    -0.03616437315940857,
    -0.010552673600614071,
    0.003981203772127628,
    -0.004410549066960812,
    0.012951331213116646,
    -0.01913248747587204,
    -0.01715962588787079,
    -0.007479837164282799,
    0.019544091075658798,
    -0.004222488962113857,
    0.004712155554443598,
    -0.03119674138724804,
    0.0074301608838140965,
    0.005989547353237867,
    -0.03324056789278984,
    -0.009445601142942905,
    0.18076510727405548,
    0.00848755706101656,
    0.04118878021836281,
    0.009906881488859653,
    0.0023933351039886475,
    -0.007330808322876692,
    0.002785423304885626,
    0.012199089862406254,
    -0.029124528169631958,
    0.004882474429905415,
    -0.030231600627303123,
    -0.004077007994055748,
    -0.04050750657916069,
    0.007685639429837465,
    0.029124528169631958,
    -0.0032768642995506525,
    -0.005822776351124048,
    -0.037157900631427765,
    -0.02170146256685257,
    0.0025494606234133244,
    -0.022254999727010727,
    -0.00851594377309084,
    -0.01084363553673029,
    -0.025618797168135643,
    0.0017927836161106825,
    -0.02146017923951149,
    -0.010318485088646412,
    -0.009821722283959389,
    0.02128985896706581,
    -0.00712855439633131,
    -0.03079932928085327,
    -0.011432654224336147,
    -0.003271541791036725,
    -0.02384464256465435,
    -0.03565341979265213,
    -0.023191753774881363,
    0.027407145127654076,
    0.004339583218097687,
    0.009615919552743435,
    0.0016987533308565617,
    0.01635061204433441,
    -0.03289993107318878,
    -0.00034529491676948965,
    -0.039542365819215775,
    -0.0070398468524217606,
    -0.008210789412260056,
    0.00600374024361372,
    -0.009615919552743435,
    -0.00780628202483058,
    0.02429882623255253,
    -0.03832174837589264,
    -0.04249455779790878,
    0.011021050624549389,
    0.0041905539110302925,
    -0.02144598588347435,
    -0.027208440005779266,
    0.034688279032707214,
    0.03741338104009628,
    0.02150275744497776,
    0.009615919552743435,
    -0.020622776821255684,
    0.02879808284342289,
    -0.015711916610598564,
    0.020424071699380875,
    -0.04116039350628853,
    0.015399664640426636,
    -0.0481150820851326,
    0.008941740728914738,
    0.007494030520319939,
    -0.008835291489958763,
    -0.00652179354801774,
    -0.02185758948326111,
    -0.022169839590787888,
    0.0037683050613850355,
    -0.0290677547454834,
    -0.018082186579704285,
    0.05010213702917099,
    0.0036121795419603586,
    -0.00237381923943758,
    0.029635485261678696,
    0.01667705737054348,
    -0.017386717721819878,
    0.011673939414322376,
    0.021885976195335388,
    -0.029493551701307297,
    -0.010133973322808743,
    0.01883442886173725,
    -0.01940215937793255,
    0.011752002872526646,
    0.0011824743123725057,
    -0.0013847278896719217,
    -0.005666650831699371,
    0.022113068029284477,
    -0.03999654948711395,
    0.0030036442913115025,
    0.020055048167705536,
    -0.0015727883437648416,
    0.02374528907239437,
    -0.01941635273396969,
    0.0024980101734399796,
    -0.0337231382727623,
    0.021062767133116722,
    -0.007380484603345394,
    -0.0011629585642367601,
    -0.021062767133116722,
    0.0038144332356750965,
    -0.014789355918765068,
    -0.01901894062757492,
    0.010133973322808743,
    -0.020821481943130493,
    0.011624263599514961,
    -0.012930041179060936,
    -0.018309278413653374,
    0.008565620519220829,
    0.026654904708266258,
    -0.0014219852164387703,
    -0.009864301420748234,
    -0.014065500348806381,
    -0.02182920277118683,
    -0.00405926676467061,
    0.0027534884866327047,
    -0.006525341887027025,
    -0.010886214673519135,
    -0.0017901223618537188,
    -0.03338250145316124,
    -0.014108080416917801,
    -0.032247040420770645,
    0.02374528907239437,
    0.0027002638671547174,
    0.00300896679982543,
    0.018252506852149963,
    -0.01060235034674406,
    0.02174404263496399,
    0.03395022824406624,
    0.0018451211508363485,
    -0.016151906922459602,
    -0.004605706315487623,
    -0.02417108789086342,
    -0.026881996542215347,
    0.030089668929576874,
    -0.00853723380714655,
    -0.015271926298737526,
    -0.024653656408190727,
    -0.012305539101362228,
    0.00955914705991745,
    -0.025079455226659775,
    0.009253992699086666,
    -0.0036316951736807823,
    0.0035128267481923103,
    0.0033283147495239973,
    -0.01872088387608528,
    -0.0024589786771684885,
    -0.00014969432959333062,
    -0.008814001455903053,
    0.007242100313305855,
    -0.05069825053215027,
    0.006081803236156702,
    -0.027364566922187805,
    0.02591685578227043,
    0.020310526713728905,
    -0.028159387409687042,
    0.01306487713009119,
    -0.00936753861606121,
    -0.005932774394750595,
    -0.023177560418844223,
    -0.010048814117908478,
    -0.1791754513978958,
    0.002230112673714757,
    0.022042101249098778,
    -0.004765380173921585,
    0.03363797813653946,
    -0.01327777560800314,
    -0.0012898106360808015,
    -0.018082186579704285,
    -0.012596500106155872,
    -0.019657636061310768,
    0.00950237363576889,
    -0.03182124346494675,
    -0.0155557906255126,
    -0.015640949830412865,
    -0.018153153359889984,
    -0.00018373591592535377,
    0.022396931424736977,
    -0.0011984417214989662,
    0.04300551488995552,
    -0.0023543036077171564,
    -0.009864301420748234,
    -0.016066746786236763,
    0.022496284916996956,
    0.025718150660395622,
    0.022581445053219795,
    -0.029181301593780518,
    -0.01644996553659439,
    -0.014058403670787811,
    -0.012781011871993542,
    -0.02410012111067772,
    -0.011411365121603012,
    -0.007586286403238773,
    0.02411431446671486,
    -0.010247519239783287,
    0.01306487713009119,
    0.01926022581756115,
    0.02388722263276577,
    0.005553104914724827,
    -0.00411958759650588,
    0.021076960489153862,
    0.02648458443582058,
    0.04073459655046463,
    0.01426420547068119,
    -0.029238073155283928,
    -0.014803549274802208,
    0.0010627188021317124,
    -0.010027524083852768,
    -0.020310526713728905,
    -0.007486933842301369,
    -0.001358115579932928,
    0.011212659068405628,
    0.01663447730243206,
    -0.009112060070037842,
    -0.005070535000413656,
    0.019586671143770218,
    -0.00362992100417614,
    0.006692112423479557,
    0.0032271877862513065,
    0.004353776108473539,
    0.0009190122946165502,
    -0.014108080416917801,
    -0.005322464741766453,
    0.008437881246209145,
    -0.022198226302862167,
    -0.007256293669342995,
    -0.0053543997928500175,
    -7.606689177919179e-05,
    -0.004946344066411257,
    -0.021914362907409668,
    0.0055105253122746944,
    -0.006883721332997084,
    0.00826756190508604,
    0.017599618062376976,
    0.009140446782112122,
    -0.010488804429769516,
    0.025221386924386024,
    -0.027052314952015877,
    0.027094895020127296,
    0.008849484845995903,
    -0.006454375572502613,
    0.0004998681833967566,
    0.029976122081279755,
    -0.001295133144594729,
    0.002524622483178973,
    0.02429882623255253,
    -0.023319492116570473,
    -0.003152673365548253,
    -0.02418528124690056,
    -0.017358332872390747,
    0.0010423160856589675,
    0.0007327260100282729,
    -0.008778518997132778,
    -0.007898537442088127,
    0.01427839882671833,
    0.011319108307361603,
    0.027009734883904457,
    0.0016960921930149198,
    0.0011886837892234325,
    0.031991563737392426,
    -0.02136082574725151,
    0.009679789654910564,
    0.013164229691028595,
    -0.020778903737664223,
    0.005226660519838333,
    0.03096964955329895,
    0.027449725195765495,
    -0.03395022824406624,
    -0.00953785702586174,
    0.03536955267190933,
    0.013135842978954315,
    -0.010162360034883022,
    0.012908751145005226,
    0.013682283461093903,
    0.024838170036673546,
    -0.010368161834776402,
    0.02411431446671486,
    -0.008984320797026157,
    -0.0009757852531038225,
    -0.008806904777884483,
    0.010552673600614071,
    0.053934309631586075,
    -0.00831723865121603,
    -0.011908127926290035,
    0.013951954431831837,
    -0.001155862002633512,
    -0.0049002161249518394,
    -0.10724411904811859,
    -0.05501299723982811,
    -0.001864636898972094,
    0.003995397128164768,
    -0.022680796682834625,
    -0.00046660276711918414,
    -0.011368785053491592,
    0.020026661455631256,
    0.004375066142529249,
    0.01074428204447031,
    -0.011233949102461338,
    0.004318293184041977,
    -0.013668090105056763,
    -0.0006218412891030312,
    -0.05058470740914345,
    0.00824627187103033,
    -0.017500264570116997,
    0.0143564622849226,
    0.00850884709507227,
    0.01679060235619545,
    -0.0027499401476234198,
    -0.002464301185682416,
    0.004577319603413343,
    -0.0029663871973752975,
    0.003156221704557538,
    -0.007721122354269028,
    -0.032332200556993484,
    0.00119400629773736,
    0.0037966915406286716,
    -0.0038321746978908777,
    0.0033460562117397785,
    -0.028088420629501343,
    -0.012333924882113934,
    0.0130152003839612,
    0.02195694111287594,
    0.022879501804709435,
    -0.001651738304644823,
    -0.01637899875640869,
    0.0380946546792984,
    -0.03094126284122467,
    -0.012504244223237038,
    -0.016208680346608162,
    0.021999521180987358,
    0.01179458200931549,
    0.0026363942306488752,
    0.002276240848004818,
    -0.02347561903297901,
    0.006213090848177671,
    0.010502997785806656,
    -0.015186766162514687,
    -0.029834190383553505,
    -0.03150899335741997,
    0.003040901618078351,
    -0.010055909864604473,
    0.015229346230626106,
    -0.0037966915406286716,
    -0.008863678202033043,
    0.01185135543346405,
    -0.004545385017991066,
    -0.022737570106983185,
    0.004548933357000351,
    0.012177799828350544,
    0.030118053779006004,
    0.04538998007774353,
    0.027804557234048843,
    0.019615057855844498,
    -0.006056964863091707,
    -0.020750517025589943,
    0.0190473273396492,
    -0.010893311351537704,
    -0.009090770035982132,
    0.018536370247602463,
    -0.024412373080849648,
    0.01696092076599598,
    -0.032161880284547806,
    -0.009843011386692524,
    0.00975785218179226,
    -0.0260304007679224,
    0.01715962588787079,
    -0.004336034879088402,
    -0.004971181973814964,
    -0.006865979637950659,
    -0.01900474727153778,
    -0.03119674138724804,
    0.01205006055533886,
    0.032161880284547806,
    0.0029397746548056602,
    0.010886214673519135,
    0.04470870643854141,
    -0.06926301121711731,
    0.027989068999886513,
    -0.01691834256052971,
    0.007834668271243572,
    -0.03409216180443764,
    -0.00826756190508604,
    -0.003550084074959159,
    0.014015824533998966,
    0.00780628202483058,
    -0.020452458411455154,
    -0.0050385999493300915,
    -0.05245821550488472,
    -0.017968641594052315,
    -0.074769988656044,
    0.027478111907839775,
    0.011979094706475735,
    -0.046582210808992386,
    0.027094895020127296,
    -0.024951715022325516,
    0.010857827961444855,
    -0.03505730256438255,
    0.0054998802952468395,
    0.023064013570547104,
    -0.003487988607957959,
    -0.019969888031482697,
    0.018621530383825302,
    -0.009892688132822514,
    -0.011070727370679379,
    -0.020126013085246086,
    0.01623706705868244,
    -0.023177560418844223,
    0.0306857842952013,
    0.03170769661664963,
    0.03289993107318878,
    0.02178662270307541,
    0.019827956333756447,
    0.0022035003639757633,
    -0.03278638422489166,
    -0.0004508571291808039,
    0.0008471590117551386,
    0.00714984443038702,
    -0.0006440182332880795,
    -0.04028041288256645,
    -0.0022194678895175457,
    -0.005216015502810478,
    0.008615296334028244,
    0.009814625605940819,
    0.039088182151317596,
    0.01880604214966297,
    0.02400076761841774,
    -0.0018069768557325006,
    0.03903140872716904,
    0.0030834812205284834,
    -0.013795829378068447,
    -0.03289993107318878,
    0.015413857996463776,
    0.0027694557793438435,
    -0.017585424706339836,
    -0.008217886090278625,
    0.0240575410425663,
    0.01653512381017208,
    0.02872711792588234,
    -0.015257732942700386,
    0.017628002911806107,
    0.01691834256052971,
    -0.03522761911153793,
    -0.022794343531131744,
    -0.0024412372149527073,
    -0.006699209101498127,
    0.011461040936410427,
    -0.0037576602771878242,
    0.003849916160106659,
    -0.007316614966839552,
    0.034404411911964417,
    0.005091824568808079,
    -0.001640206202864647,
    -0.0046624792739748955,
    0.02605878747999668,
    -0.03661855682730675,
    -0.041699737310409546,
    -0.022084681317210197,
    -0.004073459655046463,
    -0.006067609880119562,
    9.203428635373712e-05,
    -0.02627168595790863,
    0.039627525955438614,
    0.005719875451177359,
    0.0024146249052137136,
    -0.000843167130369693,
    -0.0008285303483717144,
    0.025079455226659775,
    -0.024980101734399796,
    0.017656389623880386,
    0.012561016716063023,
    -0.05478590354323387,
    -0.010886214673519135,
    -0.0012623112415894866,
    0.046695757657289505,
    -0.009282378479838371,
    -0.0003872093220707029,
    0.0095236636698246,
    -0.006475665606558323,
    -0.0028759052511304617,
    -0.00715694110840559,
    0.014831935055553913,
    -0.008047566749155521,
    0.009800432249903679,
    -0.01306487713009119,
    -0.002412850735709071,
    -0.009104963392019272,
    -0.012930041179060936,
    0.024383986368775368,
    0.006983073893934488,
    0.004772476851940155,
    -0.019799569621682167,
    -0.0046660276129841805,
    -0.00539697939530015,
    -0.028301319107413292,
    0.005868904758244753,
    -0.01060235034674406,
    -0.008125629276037216,
    -0.020267946645617485,
    0.012284249067306519,
    0.019714409485459328,
    -0.008657876402139664,
    -0.02886904962360859,
    0.019544091075658798,
    -0.01686156913638115,
    0.03184963017702103,
    0.014803549274802208,
    0.007213714066892862,
    -0.009403021074831486,
    0.01951570436358452,
    0.0017892352771013975,
    0.030430305749177933,
    0.044509999454021454,
    -0.011219755746424198,
    0.017670582979917526,
    0.026924574747681618,
    0.029124528169631958,
    -0.006848237942904234,
    -0.026683291420340538,
    0.0019107648404315114,
    0.005546008236706257,
    -0.006876624654978514,
    -0.04732026159763336,
    -0.0107939587906003,
    0.0051273079589009285,
    -0.021076960489153862,
    0.017471877858042717,
    0.00026324024656787515,
    -0.016279645264148712,
    0.08391043543815613,
    0.01666286401450634,
    -0.025462672114372253,
    -0.025193000212311745,
    0.017599618062376976,
    0.01671963557600975,
    0.01076557207852602,
    -0.0003725725400727242,
    0.003557180752977729,
    -0.0341489352285862,
    0.023021435365080833,
    -0.024483337998390198,
    -0.012816495262086391,
    -0.025207193568348885,
    -0.01681898906826973,
    0.0006959122838452458,
    -0.014370654709637165,
    0.019969888031482697,
    0.0028723569121211767,
    0.0022354351822286844,
    0.032644450664520264,
    0.020835675299167633,
    0.007444354239851236,
    -0.03184963017702103,
    -0.032303813844919205,
    0.010460417717695236,
    0.027691010385751724,
    0.0030746106058359146,
    0.011659746058285236,
    -0.051294367760419846,
    0.022169839590787888,
    -0.014917095191776752,
    -0.015655143186450005,
    -0.016222873702645302,
    -0.025533638894557953,
    0.0028439704328775406,
    -0.010027524083852768,
    -0.010403644293546677,
    0.029266459867358208,
    -0.010481707751750946,
    -0.002171565778553486,
    -0.004311196506023407,
    -0.0020952769555151463,
    -0.0474054217338562,
    0.017798323184251785,
    0.003134931903332472,
    -0.0034258931409567595,
    -0.01652093045413494,
    -0.049335699528455734
  ]
}
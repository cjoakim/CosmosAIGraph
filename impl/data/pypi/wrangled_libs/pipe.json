{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "operating system :: os independent",
    "programming language :: python",
    "programming language :: python :: 3",
    "topic :: software development",
    "topic :: software development :: libraries :: python modules"
  ],
  "description": "module enabling a sh like infix syntax (using pipes)\n# pipe \u2014 infix programming toolkit\n\n[![pypi](https://img.shields.io/pypi/v/pipe)\n ![monthly downloads](https://img.shields.io/pypi/dm/pipe)\n ![supported python version](https://img.shields.io/pypi/pyversions/pipe.svg)\n](https://pypi.org/project/pipe)\n[![github workflow status](https://img.shields.io/github/workflow/status/julienpalard/pipe/tests.yml?branch=main)](https://github.com/julienpalard/pipe/actions)\n\nmodule enabling a sh like infix syntax (using pipes).\n\n\n# introduction\n\nas an example, here is the solution for the [2nd euler project\nproblem](https://projecteuler.net/problem=2):\n\n> find the sum of all the even-valued terms in fibonacci which do not\n  exceed four million.\n\ngiven `fib` a generator of fibonacci numbers:\n\n```python\nsum(fib() | where(lambda x: x % 2 == 0) | take_while(lambda x: x < 4000000))\n```\n\neach pipes is lazy evalatated, can be aliased, and partially\ninitialized, so it could be rewritten as:\n\n```python\nis_even = where(lambda x: x % 2 == 0)\nsum(fib() | is_even | take_while(lambda x: x < 4000000)\n```\n\n\n# installing\n\nto install the library, you can just run the following command:\n\n```shell\n# linux/macos\npython3 -m pip install pipe\n\n# windows\npy -3 -m pip install pipe\n```\n\n\n# using\n\nthe basic syntax is to use a `|` like in a shell:\n\n```python\n>>> from itertools import count\n>>> from pipe import select, take\n>>> sum(count() | select(lambda x: x ** 2) | take(10))\n285\n>>>\n```\n\nsome pipes take an argument:\n\n```python\n>>> from pipe import where\n>>> sum([1, 2, 3, 4] | where(lambda x: x % 2 == 0))\n6\n>>>\n```\n\nsome do not need one:\n\n```python\n>>> from pipe import traverse\n>>> for i in [1, [2, 3], 4] | traverse:\n...     print(i)\n1\n2\n3\n4\n>>>\n```\n\nin which case it's allowed to use the calling parenthesis:\n\n```python\n>>> from pipe import traverse\n>>> for i in [1, [2, 3], 4] | traverse():\n...     print(i)\n1\n2\n3\n4\n>>>\n```\n\n\n## existing pipes in this module\n\nalphabetical list of available pipes; when several names are listed\nfor a given pipe, these are aliases.\n\n### `batched`\n\nlike python 3.12 `itertool.batched`:\n\n```python\n>>> from pipe import batched\n>>> list(\"abcdefg\" | batched(3))\n[('a', 'b', 'c'), ('d', 'e', 'f'), ('g',)]\n>>>\n```\n\n### `chain`\n\nchain a sequence of iterables:\n\n```python\n>>> from pipe import chain\n>>> list([[1, 2], [3, 4], [5]] | chain)\n[1, 2, 3, 4, 5]\n>>>\n```\n\nwarning : chain only unfold iterable containing only iterables:\n\n```python\n[1, 2, [3]] | chain\n```\ngives a `typeerror: chain argument #1 must support iteration`\nconsider using traverse.\n\n\n### `chain_with(other)`\n\nlike itertools.chain, yields elements of the given iterable,\nthen yields elements of its parameters\n\n```python\n>>> from pipe import chain_with\n>>> list((1, 2, 3) | chain_with([4, 5], [6]))\n[1, 2, 3, 4, 5, 6]\n>>>\n```\n\n### `dedup(key=none)`\n\ndeduplicate values, using the given `key` function if provided.\n\n```python\n>>> from pipe import dedup\n>>> list([-1, 0, 0, 0, 1, 2, 3] | dedup)\n[-1, 0, 1, 2, 3]\n>>> list([-1, 0, 0, 0, 1, 2, 3] | dedup(key=abs))\n[-1, 0, 2, 3]\n>>>\n```\n\n\n### `enumerate(start=0)`\n\nthe builtin `enumerate()` as a pipe:\n\n```python\n>>> from pipe import enumerate\n>>> list(['apple', 'banana', 'citron'] | enumerate)\n[(0, 'apple'), (1, 'banana'), (2, 'citron')]\n>>> list(['car', 'truck', 'motorcycle', 'bus', 'train'] | enumerate(start=6))\n[(6, 'car'), (7, 'truck'), (8, 'motorcycle'), (9, 'bus'), (10, 'train')]\n>>>\n```\n\n\n### `filter(predicate)`\n\nalias for `where(predicate)`, see `where(predicate)`.\n\n\n### `groupby(key=none)`\n\nlike `itertools.groupby(sorted(iterable, key = keyfunc), keyfunc)`\n\n```python\n>>> from pipe import groupby, map\n>>> items = range(10)\n>>> ' / '.join(items | groupby(lambda x: \"odd\" if x % 2 else \"even\")\n...                  | select(lambda x: \"{}: {}\".format(x[0], ', '.join(x[1] | map(str)))))\n'even: 0, 2, 4, 6, 8 / odd: 1, 3, 5, 7, 9'\n>>>\n```\n\n\n### `islice()`\n\njust the `itertools.islice` function as a pipe:\n\n```python\n>>> from pipe import islice\n>>> list((1, 2, 3, 4, 5, 6, 7, 8, 9) | islice(2, 8, 2))\n[3, 5, 7]\n>>>\n```\n\n### `izip()`\n\njust the `itertools.izip` function as a pipe:\n\n```python\n>>> from pipe import izip\n>>> list(range(0, 10) | izip(range(1, 11)))\n[(0, 1), (1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10)]\n>>>\n```\n\n### `map()`, `select()`\n\napply a conversion expression given as parameter\nto each element of the given iterable\n\n```python\n>>> list([1, 2, 3] | map(lambda x: x * x))\n[1, 4, 9]\n\n>>> list([1, 2, 3] | select(lambda x: x * x))\n[1, 4, 9]\n>>>\n```\n\n### `netcat`\n\nthe netcat pipe sends and receive bytes over tcp:\n\n```python\ndata = [\n    b\"head / http/1.0\\r\\n\",\n    b\"host: python.org\\r\\n\",\n    b\"\\r\\n\",\n]\nfor packet in data | netcat(\"python.org\", 80):\n    print(packet.decode(\"utf-8\"))\n```\n\ngives:\n\n```\nhttp/1.1 301 moved permanently\ncontent-length: 0\nlocation: https://python.org/\nconnection: close\n```\n\n### ```permutations(r=none)```\n\nreturns all possible permutations:\n\n```python\n>>> from pipe import permutations\n>>> for item in 'abc' | permutations(2):\n...     print(item)\n('a', 'b')\n('a', 'c')\n('b', 'a')\n('b', 'c')\n('c', 'a')\n('c', 'b')\n>>>\n```\n\n```python\n>>> for item in range(3) | permutations:\n...     print(item)\n(0, 1, 2)\n(0, 2, 1)\n(1, 0, 2)\n(1, 2, 0)\n(2, 0, 1)\n(2, 1, 0)\n>>>\n```\n\n### `reverse`\n\nlike python's built-in `reversed` function.\n\n```python\n>>> from pipe import reverse\n>>> list([1, 2, 3] | reverse)\n[3, 2, 1]\n>>>\n```\n\n### `select(fct)`\n\nalias for `map(fct)`, see `map(fct)`.\n\n\n### `skip()`\n\nskips the given quantity of elements from the given iterable, then yields\n\n```python\n>>> from pipe import skip\n>>> list((1, 2, 3, 4, 5) | skip(2))\n[3, 4, 5]\n>>>\n```\n\n\n### `skip_while(predicate)`\n\nlike itertools.dropwhile, skips elements of the given iterable\nwhile the predicate is true, then yields others:\n\n```python\n>>> from pipe import skip_while\n>>> list([1, 2, 3, 4] | skip_while(lambda x: x < 3))\n[3, 4]\n>>>\n```\n\n### `sort(key=none, reverse=false)`\n\nlike python's built-in \"sorted\" primitive.\n\n```python\n>>> from pipe import sort\n>>> ''.join(\"python\" | sort)\n'hnopty'\n>>> [5, -4, 3, -2, 1] | sort(key=abs)\n[1, -2, 3, -4, 5]\n>>>\n```\n\n### `t`\n\nlike haskell's operator \":\":\n\n```python\n>>> from pipe import t\n>>> for i in 0 | t(1) | t(2):\n...     print(i)\n0\n1\n2\n>>>\n```\n\n### `tail(n)`\n\nyields the given quantity of the last elements of the given iterable.\n\n```python\n>>> from pipe import tail\n>>> for i in (1, 2, 3, 4, 5) | tail(3):\n...     print(i)\n3\n4\n5\n>>>\n```\n\n### `take(n)`\n\nyields the given quantity of elements from the given iterable, like `head`\nin shell script.\n\n```python\n>>> from pipe import take\n>>> for i in count() | take(5):\n...     print(i)\n0\n1\n2\n3\n4\n>>>\n```\n\n### `take_while(predicate)`\n\nlike `itertools.takewhile`, yields elements of the\ngiven iterable while the predicate is true:\n\n```python\n>>> from pipe import take_while\n>>> for i in count() | take_while(lambda x: x ** 2 < 100):\n...     print(i)\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n>>>\n```\n\n### `tee`\n\ntee outputs to the standard output and yield unchanged items, useful for\ndebugging a pipe stage by stage:\n\n```python\n>>> from pipe import tee\n>>> sum([\"1\", \"2\", \"3\", \"4\", \"5\"] | tee | map(int) | tee)\n'1'\n1\n'2'\n2\n'3'\n3\n'4'\n4\n'5'\n5\n15\n>>>\n```\n\nthe `15` at the end is the `sum` returning.\n\n\n### `transpose()`\n\ntransposes the rows and columns of a matrix.\n\n```python\n>>> from pipe import transpose\n>>> [[1, 2, 3], [4, 5, 6], [7, 8, 9]] | transpose\n[(1, 4, 7), (2, 5, 8), (3, 6, 9)]\n>>>\n```\n\n### `traverse`\n\nrecursively unfold iterables:\n\n```python\n>>> list([[1, 2], [[[3], [[4]]], [5]]] | traverse)\n[1, 2, 3, 4, 5]\n>>> squares = (i * i for i in range(3))\n>>> list([[0, 1, 2], squares] | traverse)\n[0, 1, 2, 0, 1, 4]\n>>>\n```\n\n### `uniq(key=none)`\n\n\nlike dedup() but only deduplicate consecutive values, using the given\n`key` function if provided (or else the identity).\n\n```python\n>>> from pipe import uniq\n>>> list([1, 1, 2, 2, 3, 3, 1, 2, 3] | uniq)\n[1, 2, 3, 1, 2, 3]\n>>> list([1, -1, 1, 2, -2, 2, 3, 3, 1, 2, 3] | uniq(key=abs))\n[1, 2, 3, 1, 2, 3]\n>>>\n```\n\n### `where(predicate)`, `filter(predicate)`\n\nonly yields the matching items of the given iterable:\n\n```python\n>>> list([1, 2, 3] | where(lambda x: x % 2 == 0))\n[2]\n>>>\n```\n\ndon't forget they can be aliased:\n\n```python\n>>> positive = where(lambda x: x > 0)\n>>> negative = where(lambda x: x < 0)\n>>> sum([-10, -5, 0, 5, 10] | positive)\n15\n>>> sum([-10, -5, 0, 5, 10] | negative)\n-15\n>>>\n```\n\n## constructing your own\n\nyou can construct your pipes using the `pipe` class like:\n\n```python\nfrom pipe import pipe\nsquare = pipe(lambda iterable: (x ** 2 for x in iterable))\nmap = pipe(lambda iterable, fct: builtins.map(fct, iterable)\n>>>\n```\n\nas you can see it's often very short to write, and with a bit of luck\nthe function you're wrapping already takes an iterable as the first\nargument, making the wrapping straight forward:\n\n```python\n>>> from collections import deque\n>>> from pipe import pipe\n>>> end = pipe(deque)\n>>>\n```\n\nand that's it `itrable | end(3)` is `deque(iterable, 3)`:\n\n```python\n>>> list(range(100) | end(3))\n[97, 98, 99]\n>>>\n```\n\nin case it gets more complicated one can use `pipe` as a decorator to\na function taking an iterable as the first argument, and any other\noptional arguments after:\n\n```python\n>>> from statistics import mean\n\n>>> @pipe\n... def running_average(iterable, width):\n...     items = deque(maxlen=width)\n...     for item in iterable:\n...         items.append(item)\n...         yield mean(items)\n\n>>> list(range(20) | running_average(width=2))\n[0, 0.5, 1.5, 2.5, 3.5, 4.5, 5.5, 6.5, 7.5, 8.5, 9.5, 10.5, 11.5, 12.5, 13.5, 14.5, 15.5, 16.5, 17.5, 18.5]\n>>> list(range(20) | running_average(width=10))\n[0, 0.5, 1, 1.5, 2, 2.5, 3, 3.5, 4, 4.5, 5.5, 6.5, 7.5, 8.5, 9.5, 10.5, 11.5, 12.5, 13.5, 14.5]\n>>>\n```\n\n\n## euler project samples\n\n> find the sum of all the multiples of 3 or 5 below 1000.\n\n```python\n>>> sum(count() | where(lambda x: x % 3 == 0 or x % 5 == 0) | take_while(lambda x: x < 1000))\n233168\n>>>\n```\n\n> find the sum of all the even-valued terms in fibonacci which do not\n> exceed four million.\n\n```python\nsum(fib() | where(lambda x: x % 2 == 0) | take_while(lambda x: x < 4000000))\n```\n\n> find the difference between the sum of the squares of the first one\n> hundred natural numbers and the square of the sum.\n\n```python\n>>> square = map(lambda x: x ** 2)\n>>> sum(range(101)) ** 2 - sum(range(101) | square)\n25164150\n>>>\n```\n\n\n# going deeper\n## partial pipes\n\na `pipe` can be parametrized without being evaluated:\n\n```python\n>>> running_average_of_two = running_average(2)\n>>> list(range(20) | running_average_of_two)\n[0, 0.5, 1.5, 2.5, 3.5, 4.5, 5.5, 6.5, 7.5, 8.5, 9.5, 10.5, 11.5, 12.5, 13.5, 14.5, 15.5, 16.5, 17.5, 18.5]\n>>>\n```\n\nfor multi-argument pipes then can be partially initialized, you can think of curying:\n\n```python\nsome_iterable | some_pipe(1, 2, 3)\n```\n\nis strictly equivalent to:\n\n```python\nsome_iterable | some_pipe(1)(2)(3)\n```\n\nso it can be used to specialize pipes, first a dummy example:\n\n```python\n>>> @pipe\n... def addmul(iterable, to_add, to_mul):\n...     \"\"\"computes (x + to_add) * to_mul to every items of the input.\"\"\"\n...     for i in iterable:\n...         yield (i + to_add) * to_mul\n\n>>> mul = addmul(0)  # this partially initialize addmul with to_add=0\n>>> list(range(10) | mul(10))\n[0, 10, 20, 30, 40, 50, 60, 70, 80, 90]\n\n```\n\nwhich also works with keyword arguments:\n\n```python\n>>> add = addmul(to_mul=1)  # this partially initialize addmul with `to_mul=1`\n>>> list(range(10) | add(10))\n[10, 11, 12, 13, 14, 15, 16, 17, 18, 19]\n>>>\n```\n\n\nbut now for something interesting:\n\n```python\n>>> import re\n>>> @pipe\n... def grep(iterable, pattern, flags=0):\n...     for line in iterable:\n...         if re.match(pattern, line, flags=flags):\n...             yield line\n...\n>>> lines = [\"hello\", \"hello\", \"world\", \"world\"]\n>>> for line in lines | grep(\"h\"):\n...     print(line)\nhello\n>>>\n```\n\nnow let's reuse it in two ways, first with a pattern:\n\n```python\n>>> lowercase_only = grep(\"[a-z]+$\")\n>>> for line in lines | lowercase_only:\n...     print(line)\nhello\nworld\n>>>\n```\n\nor now with a flag:\n\n```python\n>>> igrep = grep(flags=re.ignorecase)\n>>> for line in lines | igrep(\"hello\"):\n...    print(line)\n...\nhello\nhello\n>>>\n```\n\n\n## lazy evaluation\n\npipe uses generators all the way down, so it is naturally lazy.\n\nin the following examples we'll use\n[itertools.count](https://docs.python.org/fr/3/library/itertools.html#itertools.count):\nan infinite generator of integers.\n\nwe'll make use of the `tee` pipe too, which prints every values that\npasse through it.\n\nthe following example does nothing, nothing is printed by `tee` so no\nvalue passed through it. it's nice because generating an infinite\nsequence of squares is \"slow\".\n\n```python\n>>> result = count() | tee | select(lambda x: x ** 2)\n>>>\n```\n\nchaining more pipes still won't make previous ones start generating\nvalues, in the following example not a single value is pulled out of\n`count`:\n\n```python\n>>> result = count() | tee | select(lambda x: x ** 2)\n>>> first_results = result | take(10)\n>>> only_odd_ones = first_results | where(lambda x: x % 2)\n>>>\n```\n\nsame without variables:\n\n```python\n>>> result = (count() | tee\n...                   | select(lambda x: x ** 2)\n...                   | take(10)\n...                   | where(lambda x: x % 2))\n>>>\n```\n\n\nonly when values are actually needed, the generators starts to work.\n\nin the following example only two values will be extracted out of `count`:\n- `0` which is squared (to `0`), passes the `take(10)` eaily,\n  but is dropped by `where`\n- `1` which is squared (to `1`), also easily passes the `take(10)`,\n  passes the `where`, and passes the `take(1)`.\n\nat this point `take(1)` is satisfied so no other computations need to\nbe done. notice `tee` printing `0` and `1` passing through it:\n\n```python\n>>> result = (count() | tee\n...                   | select(lambda x: x ** 2)\n...                   | take(10)\n...                   | where(lambda x: x % 2))\n>>> print(list(result | take(1)))\n0\n1\n[1]\n>>>\n```\n\n## deprecations\n\nin pipe 1.x a lot of functions were returning iterables and a lot\nother functions were returning non-iterables, causing confusion. the\none returning non-iterables could only be used as the last function of\na pipe expression, so they are in fact useless:\n\n```python\nrange(100) | where(lambda x: x % 2 == 0) | add\n```\n\ncan be rewritten with no less readability as:\n\n```python\nsum(range(100) | where(lambda x: x % 2 == 0))\n```\n\nso all pipes returning non-iterables were deprecated (raising\nwarnings), and finally removed in pipe 2.0.\n\n\n## what should i do?\n\noh, you just upgraded pipe, got an exception, and landed here? you\nhave three solutions:\n\n\n1) stop using closing-pipes, replace `...|...|...|...|as_list` to\n   `list(...|...|...|)`, that's it, it's even shorter.\n\n2) if \"closing pipes\" are not an issue for you, and you really like\n   them, just reimplement the few you really need, it often take a very\n   few lines of code, or copy them from\n   [here](https://github.com/julienpalard/pipe/blob/dd179c8ff0aa28ee0524f3247e5cb1c51347cba6/pipe.py).\n\n3) if you still rely on a lot of them and are in a hurry, just `pip install pipe<2`.\n\n\nand start testing your project using the [python development\nmode](https://docs.python.org/3/library/devmode.html) so you catch\nthose warnings before they bite you.\n\n\n## but i like them, pleassssse, reintroduce them!\n\nthis has already been discussed in [#74](https://github.com/julienpalard/pipe/issues/74).\n\nan `@pipe` is often easily implemented in a 1 to 3 lines of code\nfunction, and the `pipe` module does not aim at giving all\npossibilities, it aims at giving the `pipe` decorator.\n\nso if you need more pipes, closing pipes, weird pipes, you-name-it,\nfeel free to implement them on your project, and consider the\nalready-implemented ones as examples on how to do it.\n\nsee the `constructing your own` paragraph below.\n",
  "docs_url": null,
  "keywords": "",
  "license": "mit license",
  "name": "pipe",
  "package_url": "https://pypi.org/project/pipe/",
  "project_url": "https://pypi.org/project/pipe/",
  "project_urls": {
    "repository": "https://github.com/JulienPalard/Pipe"
  },
  "release_url": "https://pypi.org/project/pipe/2.1/",
  "requires_dist": [],
  "requires_python": ">=3.8",
  "summary": "module enabling a sh like infix syntax (using pipes)",
  "version": "2.1",
  "releases": [],
  "developers": [
    "julien@palard.fr"
  ],
  "kwds": "pipe pipes some_pipe pip fibonacci",
  "license_kwds": "mit license",
  "libtype": "pypi",
  "id": "pypi_pipe",
  "homepage": "",
  "release_count": 8,
  "dependency_ids": [],
  "documentation_summary": "The HTML text describes the \"pipe\" module version 2.1, released on December 20, 2023, which is available on PyPI for installation. This module enables a shell-like infix syntax (using pipes) in Python, allowing for more intuitive and readable code, especially for operations involving iterables. It requires Python version 3.8 or higher and is licensed under the MIT License. The module provides a wide range of \"pipes\" or functions that can be chained together to perform complex operations in a streamlined manner. Examples include filtering, mapping, slicing, and more complex operations like generating permutations or handling network data with netcat. The document also covers installation instructions, basic usage examples, a comprehensive list of available pipes, and guidance on constructing custom pipes. Additionally, it addresses deprecations and encourages users to adapt to the newer version for improved functionality.",
  "embedding": [
    -0.021893363445997238,
    -0.002617992926388979,
    0.006270429585129023,
    -0.00023204131866805255,
    -0.008530618622899055,
    -0.0017128546023741364,
    -0.001571150030940771,
    -0.024798309430480003,
    0.0005840887315571308,
    -0.028383435681462288,
    0.023282069712877274,
    0.008381828665733337,
    0.0007798182778060436,
    0.03137340396642685,
    0.0064936145208776,
    -0.011697717010974884,
    0.006323568988591433,
    -0.012321216985583305,
    0.010684528388082981,
    -0.0045203776098787785,
    0.014312166720628738,
    0.001301025622524321,
    -0.010018517263233662,
    -0.023409603163599968,
    -0.028057515621185303,
    0.01178273931145668,
    0.024543240666389465,
    -0.02961626648902893,
    -0.010004346258938313,
    -0.009805959649384022,
    0.02359381876885891,
    0.003248578403145075,
    -0.03194022178649902,
    -0.032790448516607285,
    -0.007977969944477081,
    -0.008729004301130772,
    0.006727426778525114,
    0.011619779281318188,
    0.02896442450582981,
    0.001661486690863967,
    0.047896161675453186,
    -0.007460748311132193,
    0.00232395576313138,
    -0.011711887083947659,
    -0.030551517382264137,
    0.02360798977315426,
    -0.014127951115369797,
    -0.02744818478822708,
    -0.003402682254090905,
    0.0011114956578239799,
    0.026682980358600616,
    0.004112976603209972,
    -0.02315453439950943,
    -0.017174599692225456,
    -0.005831145215779543,
    0.0016995698679238558,
    -0.004584144335240126,
    -0.0018031913787126541,
    0.0026481051463633776,
    0.014333422295749187,
    0.006833705585449934,
    -0.0018581018084660172,
    -0.03933720290660858,
    -0.034094132483005524,
    0.007829179987311363,
    0.006408591754734516,
    -0.00898407306522131,
    0.011747313663363457,
    -0.016338542103767395,
    0.02187919430434704,
    0.02852514013648033,
    0.029077788814902306,
    0.004902979824692011,
    -0.012200768105685711,
    0.0519772544503212,
    -0.008034652099013329,
    -0.02618701383471489,
    0.016267690807580948,
    -0.020221250131726265,
    0.0012009466299787164,
    0.027575720101594925,
    -0.020632192492485046,
    -0.003608153900131583,
    0.015105713158845901,
    0.01037277840077877,
    -0.003145842580124736,
    0.007382811047136784,
    0.01557333767414093,
    -0.026753833517432213,
    -0.0075174300000071526,
    0.028213391080498695,
    -0.0019165549892932177,
    0.013143103569746017,
    0.03267708420753479,
    -0.006883302237838507,
    0.028595993295311928,
    -0.012144085951149464,
    0.016763657331466675,
    0.0010521567892283201,
    -0.03551117703318596,
    -0.005101366434246302,
    0.016522759571671486,
    0.00674868281930685,
    -0.013879967853426933,
    -0.043786726891994476,
    -0.012059063650667667,
    -0.02226179651916027,
    -0.008473936468362808,
    0.0389404296875,
    0.00964299961924553,
    -0.026470422744750977,
    0.05271412059664726,
    0.009047839790582657,
    -0.04568557068705559,
    0.022176774218678474,
    -0.019739454612135887,
    0.013235211372375488,
    -0.02145407907664776,
    -0.023239558562636375,
    -0.0031954392325133085,
    -0.006320026237517595,
    -0.015417463146150112,
    0.014446786604821682,
    0.0023345835506916046,
    0.027122264727950096,
    0.015417463146150112,
    -0.016607781872153282,
    -0.010599506087601185,
    -0.02226179651916027,
    -0.013554046861827374,
    0.04392843320965767,
    0.020915601402521133,
    0.022545205429196358,
    0.005101366434246302,
    -0.01297305803745985,
    -0.012349558062851429,
    -0.00907618086785078,
    -0.01793980598449707,
    -0.01775558851659298,
    -0.027122264727950096,
    0.004821499809622765,
    0.004307820461690426,
    -0.015219076536595821,
    -0.003232636721804738,
    -0.019952010363340378,
    0.03653145208954811,
    0.021043136715888977,
    -0.025138400495052338,
    -0.00025528972037136555,
    -0.006624691188335419,
    0.01534661091864109,
    -0.008445595391094685,
    -0.007131285034120083,
    -0.012845523655414581,
    0.01861998811364174,
    0.0034505075309425592,
    -6.753110938007012e-05,
    0.002617992926388979,
    0.019498556852340698,
    0.019300170242786407,
    0.010096454061567783,
    0.007482003886252642,
    -0.00644047511741519,
    0.0011486931471154094,
    -0.005328093655407429,
    0.030126402154564857,
    0.023012829944491386,
    0.011534756049513817,
    -0.03741002082824707,
    0.000659812125377357,
    0.025025036185979843,
    0.037551723420619965,
    -0.03718329221010208,
    0.012179512530565262,
    0.0035426155664026737,
    -0.01396499015390873,
    -0.0005530908820219338,
    0.001039757626131177,
    -0.006025989074259996,
    -0.0013780774315819144,
    0.019526896998286247,
    0.019767794758081436,
    -0.0018970706732943654,
    0.037750110030174255,
    -0.03874204307794571,
    -0.016706975176930428,
    -0.010075198486447334,
    0.02591777592897415,
    -0.019952010363340378,
    0.025379298254847527,
    0.005664642434567213,
    0.02117067016661167,
    -0.0032928611617535353,
    -0.02987133525311947,
    -0.5767945051193237,
    -0.013929564505815506,
    -0.01799648627638817,
    -0.04707427695393562,
    0.011754398234188557,
    -0.005682355258613825,
    -0.00550876697525382,
    0.009217885322868824,
    -0.015360780991613865,
    0.023211216554045677,
    -0.009210800752043724,
    0.01689119078218937,
    0.00018178045866079628,
    -0.004605400376021862,
    0.0022991574369370937,
    -0.028015004470944405,
    0.02119901217520237,
    -0.022856956347823143,
    -0.01900259032845497,
    0.01081206277012825,
    -0.019796134904026985,
    0.040357477962970734,
    -0.014808133244514465,
    0.011067130602896214,
    -0.0151482243090868,
    0.013554046861827374,
    0.02961626648902893,
    -0.033413950353860855,
    -0.0005300638731569052,
    -0.003110416466370225,
    -0.011818165890872478,
    0.024330683052539825,
    0.007042719516903162,
    -0.020816409960389137,
    0.055066417902708054,
    0.012760501354932785,
    -0.011024619452655315,
    0.04407013580203056,
    0.00823303870856762,
    0.025053376331925392,
    -0.02206340990960598,
    -0.02338126301765442,
    0.0038862493820488453,
    0.014765622094273567,
    0.026541275903582573,
    -0.0035798130556941032,
    0.032081928104162216,
    0.019215146079659462,
    0.0017296820878982544,
    -0.009706766344606876,
    0.00356741389259696,
    -0.02141156792640686,
    0.010960852727293968,
    -0.019611919298768044,
    0.037296656519174576,
    0.0038862493820488453,
    0.012675478123128414,
    -0.006029531825333834,
    0.0060472446493804455,
    -0.015289928764104843,
    0.018294066190719604,
    0.03049483522772789,
    -0.00964299961924553,
    0.0005265212384983897,
    -0.03636140748858452,
    0.026923878118395805,
    0.009550891816616058,
    -0.0302964486181736,
    -0.0005119079723954201,
    -0.012795927003026009,
    0.028213391080498695,
    0.00039920848212204874,
    0.004995088092982769,
    -0.017429668456315994,
    0.015672530978918076,
    0.019569408148527145,
    0.01857747510075569,
    0.012229109182953835,
    0.011371796019375324,
    0.021723318845033646,
    0.005165133625268936,
    0.007843350991606712,
    -0.026314549148082733,
    -0.014305081218481064,
    0.03721163421869278,
    0.007067517843097448,
    -0.02203506790101528,
    -0.010181477293372154,
    0.023437945172190666,
    0.0005367062403820455,
    0.014361763373017311,
    0.0029563126154243946,
    0.0022318477276712656,
    -0.046422433108091354,
    0.0036595219280570745,
    0.013688666746020317,
    -0.020164567977190018,
    0.0030643625650554895,
    -0.00660697789862752,
    -0.03434919938445091,
    0.0024904587771743536,
    -0.028595993295311928,
    -0.012944716960191727,
    -0.005356434732675552,
    0.0015268672723323107,
    0.01796814613044262,
    0.010146050713956356,
    -0.009735107421875,
    0.02115650102496147,
    -0.02767491340637207,
    0.0008019595989026129,
    -0.033187221735715866,
    -0.026215355843305588,
    -0.01393665000796318,
    -0.004155488219112158,
    -0.03392408788204193,
    0.03525611013174057,
    -0.015304098837077618,
    0.012087404727935791,
    -0.027363162487745285,
    0.013490280136466026,
    -0.016069304198026657,
    -0.004112976603209972,
    -0.008381828665733337,
    0.005607960280030966,
    0.010245244018733501,
    0.04027245193719864,
    0.006808907259255648,
    -0.030834926292300224,
    0.01666446402668953,
    -0.010599506087601185,
    -0.010124795138835907,
    0.010415289551019669,
    -0.004474323242902756,
    0.002979339798912406,
    -0.01545997429639101,
    0.009579232893884182,
    -0.0009051382658071816,
    -0.012668393552303314,
    -0.019356850534677505,
    0.003330058651044965,
    0.009409187361598015,
    0.007251733914017677,
    -0.018520794808864594,
    -0.0007554627954959869,
    -0.02835509553551674,
    -0.026512935757637024,
    0.009161204099655151,
    -0.00316532701253891,
    0.011088387109339237,
    -0.02250269427895546,
    -0.0017535947263240814,
    -0.03369735926389694,
    0.028879402205348015,
    -0.010209818370640278,
    -0.018279897049069405,
    -0.0017128546023741364,
    -0.022105921059846878,
    -0.017344646155834198,
    -0.02294197864830494,
    9.321507241111249e-05,
    0.022176774218678474,
    0.008148015476763248,
    -0.0021627668756991625,
    -0.025861093774437904,
    -0.004913607612252235,
    -0.003794141346588731,
    0.02119901217520237,
    0.004449524916708469,
    -0.026768002659082413,
    0.013263552449643612,
    -0.012349558062851429,
    -0.013242296874523163,
    0.005494596902281046,
    -0.004523919895291328,
    0.027859129011631012,
    -0.01992367021739483,
    -0.0002015969657804817,
    -0.011683546006679535,
    -0.0018138191662728786,
    0.0004964090185239911,
    0.025435980409383774,
    -0.036644816398620605,
    -0.010585335083305836,
    0.04095263406634331,
    0.001558750867843628,
    0.02380637638270855,
    -0.004559346009045839,
    -0.016395224258303642,
    0.011024619452655315,
    0.009905152954161167,
    0.010741210542619228,
    -0.030466493219137192,
    0.00874317530542612,
    -0.02445821836590767,
    0.018067339435219765,
    0.026527104899287224,
    -0.0007678619003854692,
    0.01944187469780445,
    0.025691047310829163,
    0.026243695989251137,
    -0.0033583994954824448,
    -0.007088773883879185,
    -0.025237593799829483,
    0.0024390907492488623,
    -0.022190943360328674,
    0.020490488037467003,
    0.002965169260278344,
    0.023041171953082085,
    0.00020536099327728152,
    0.007722902111709118,
    -0.028213391080498695,
    -0.022375158965587616,
    0.006961239501833916,
    0.0006775252404622734,
    0.03415081277489662,
    -0.029332857578992844,
    0.008133845403790474,
    -0.0002885017602238804,
    -0.000813030288554728,
    0.023636331781744957,
    -0.02574772946536541,
    0.009706766344606876,
    0.03049483522772789,
    0.00995474960654974,
    0.0009697910281829536,
    0.004860468674451113,
    0.018960079178214073,
    -0.004438897129148245,
    -0.029247833415865898,
    -0.001434759353287518,
    0.02206340990960598,
    0.013752433471381664,
    0.00345759280025959,
    0.009331249631941319,
    0.019101783633232117,
    0.03417915478348732,
    -0.013391086831688881,
    0.016338542103767395,
    -0.016395224258303642,
    0.016806168481707573,
    0.01690536178648472,
    0.0145955765619874,
    -0.003149385331198573,
    0.024103956297039986,
    0.009699681773781776,
    0.029106128960847855,
    -0.010975022800266743,
    -0.02333875186741352,
    0.0039039624389261007,
    0.028185049071907997,
    0.02165246568620205,
    0.0016924845986068249,
    -0.0033176594879478216,
    0.025195082649588585,
    0.0007222507265396416,
    0.001852787914685905,
    0.02353713847696781,
    0.02122735232114792,
    0.00017945561558008194,
    -0.001900613191537559,
    -0.01986698806285858,
    0.01026649959385395,
    0.0323936752974987,
    0.029757970944046974,
    -0.022828614339232445,
    0.007474918849766254,
    -0.03996070474386215,
    0.0022194485645741224,
    -0.012051978148519993,
    -0.025606025010347366,
    -0.03746670112013817,
    -0.006745140068233013,
    -0.016366884112358093,
    0.037523385137319565,
    -0.009834300726652145,
    -0.002802208997309208,
    0.039875682443380356,
    -0.013816201128065586,
    0.0076803904958069324,
    -0.019781965762376785,
    -0.023097854107618332,
    0.0259886272251606,
    0.008332232013344765,
    -0.004244053270667791,
    -0.0145955765619874,
    -0.019640261307358742,
    0.010549909435212612,
    -0.011662290431559086,
    -0.019611919298768044,
    0.00348593364469707,
    0.026555446907877922,
    0.008466850966215134,
    0.024699116125702858,
    -0.03369735926389694,
    -0.01276758685708046,
    0.0410943403840065,
    -0.008693578653037548,
    -0.017472179606556892,
    -0.00023979079560376704,
    -0.01968277245759964,
    -0.009331249631941319,
    -6.360102270264179e-05,
    0.004127147141844034,
    0.03573790565133095,
    -0.015006519854068756,
    -0.006617605686187744,
    -0.0025117143522948027,
    -0.012930546887218952,
    -0.0027118721045553684,
    -0.007000208366662264,
    0.00044836229062639177,
    -0.017018724232912064,
    -0.016125986352562904,
    0.0012833124492317438,
    -0.007928373292088509,
    0.003020079806447029,
    0.016791997477412224,
    0.045515526086091995,
    -0.00021698520868085325,
    -0.002366467146202922,
    -0.029077788814902306,
    -0.02593194507062435,
    0.01578589528799057,
    0.04239802435040474,
    0.019498556852340698,
    -0.011208835989236832,
    -0.0029279717709869146,
    -0.039478909224271774,
    -0.02535095624625683,
    -0.00799922551959753,
    0.000461425690446049,
    0.016777826473116875,
    0.005076568108052015,
    0.01710374839603901,
    0.0075741121545434,
    0.018719181418418884,
    0.025435980409383774,
    -0.000485338328871876,
    -0.0008072734926827252,
    -0.015856746584177017,
    -0.0059161679819226265,
    -0.003641808871179819,
    -0.020051203668117523,
    0.040584202855825424,
    -0.004704593680799007,
    0.011974040418863297,
    0.01297305803745985,
    0.022601887583732605,
    0.017387157306075096,
    0.021921705454587936,
    0.031515106558799744,
    -0.008899049833416939,
    -0.025818582624197006,
    -0.0302681066095829,
    -0.004573516547679901,
    -0.0008590842480771244,
    0.01482230331748724,
    -0.01769890822470188,
    0.027802446857094765,
    0.02160995453596115,
    0.03661647439002991,
    0.016310201957821846,
    0.00348593364469707,
    0.007333214394748211,
    0.026668809354305267,
    0.01860581710934639,
    -0.006337739061564207,
    0.003634723601862788,
    -0.02159578539431095,
    -0.014680598862469196,
    -0.005622130818665028,
    0.007276532240211964,
    0.015630019828677177,
    0.03854365646839142,
    -0.003988984972238541,
    -0.045147091150283813,
    -0.0008179013966582716,
    0.022431841120123863,
    0.02662629820406437,
    0.020929772406816483,
    -0.01796814613044262,
    -0.0015233246376737952,
    -0.05209061875939369,
    0.018988419324159622,
    -0.024500729516148567,
    0.00887070968747139,
    0.0013851627008989453,
    0.029474562034010887,
    0.00884945411235094,
    -0.007010836154222488,
    0.019101783633232117,
    -0.012725074775516987,
    -0.010953767225146294,
    -0.010252329520881176,
    -0.04123604670166969,
    -0.047301001846790314,
    -0.019626090303063393,
    0.03347063064575195,
    0.011598523706197739,
    -0.0016384597402065992,
    0.014120865613222122,
    -0.010663272812962532,
    -0.002570167649537325,
    0.01253377366811037,
    -0.04018742963671684,
    0.009062010794878006,
    -0.00481087202206254,
    0.015304098837077618,
    -0.0047471048310399055,
    0.006114554591476917,
    -0.008062993176281452,
    -0.008976987563073635,
    0.016791997477412224,
    0.018945908173918724,
    -0.0021432824432849884,
    0.022403500974178314,
    -0.020632192492485046,
    0.014680598862469196,
    0.02224762551486492,
    0.014921496622264385,
    -0.00536351976916194,
    0.024302342906594276,
    -0.02899276651442051,
    -0.011208835989236832,
    -0.022431841120123863,
    -0.008027566596865654,
    -0.017358817160129547,
    -0.0184074304997921,
    -0.00832514651119709,
    0.003528445027768612,
    0.02981465309858322,
    -0.03004137985408306,
    -0.01755720190703869,
    0.03613467887043953,
    0.0025595396291464567,
    0.005080110859125853,
    0.03222363069653511,
    -0.00874317530542612,
    0.004704593680799007,
    0.003308802843093872,
    0.03616302087903023,
    -0.02899276651442051,
    0.010138966143131256,
    0.01255502924323082,
    -0.01663612201809883,
    -0.0031121878419071436,
    0.013702836818993092,
    -0.007609538268297911,
    -0.013511535711586475,
    -0.012236193753778934,
    -0.03698490560054779,
    -0.017599714919924736,
    0.02295614965260029,
    0.029559584334492683,
    0.021496592089533806,
    -0.014581405557692051,
    -0.011726057156920433,
    -0.025025036185979843,
    -0.010868744924664497,
    -0.002240704372525215,
    -0.009118692018091679,
    -0.015870917588472366,
    0.0022442468907684088,
    0.0003009009233210236,
    -0.000922851380892098,
    -0.00622083293274045,
    -0.001123894820921123,
    -0.01986698806285858,
    -0.021128159016370773,
    -0.022587716579437256,
    -0.002582566812634468,
    -0.011407221667468548,
    -0.002125569386407733,
    0.0172596238553524,
    0.00027765249251388013,
    0.0006363423308357596,
    -0.01945604383945465,
    -0.02009371481835842,
    -0.008495192043483257,
    -0.015899257734417915,
    -0.00176953652407974,
    0.013447768986225128,
    0.04874638840556145,
    0.022644398733973503,
    0.015729213133454323,
    0.03913881629705429,
    0.0054520852863788605,
    0.001948438584804535,
    -0.0074394927360117435,
    -0.010642017237842083,
    0.0020210621878504753,
    -0.007871692068874836,
    0.007581197191029787,
    0.00907618086785078,
    0.00622083293274045,
    -0.006674287840723991,
    -0.03998904302716255,
    -0.014751451089978218,
    0.03692822530865669,
    -0.00389687716960907,
    0.006376707926392555,
    -0.012179512530565262,
    -0.02380637638270855,
    -0.01861998811364174,
    -0.00026259638252668083,
    -0.0018917566630989313,
    -0.008998243138194084,
    -0.0008329575066454709,
    -0.0048675537109375,
    0.0017473951447755098,
    0.008254294283688068,
    0.03695656731724739,
    0.01169063150882721,
    -0.001453357981517911,
    0.007446577772498131,
    0.03573790565133095,
    0.0036807775031775236,
    0.05534982681274414,
    -0.012016551569104195,
    -0.010975022800266743,
    -0.03942222520709038,
    -0.026328718289732933,
    -0.0025418265722692013,
    -0.01545997429639101,
    0.02620118483901024,
    -0.016763657331466675,
    -0.007531600538641214,
    -0.015729213133454323,
    0.019413532689213753,
    -0.0205613411962986,
    -0.0001901941723190248,
    0.033413950353860855,
    -0.013653240166604519,
    -0.019739454612135887,
    -0.02250269427895546,
    -0.032138608396053314,
    -0.01690536178648472,
    0.0151482243090868,
    0.005491054151207209,
    0.001240801066160202,
    0.00984138622879982,
    -0.02464243397116661,
    -0.012399154715240002,
    -0.018903397023677826,
    -0.02333875186741352,
    0.04044250026345253,
    0.02182251214981079,
    0.03006972000002861,
    0.019526896998286247,
    0.023707183077931404,
    0.004321991000324488,
    -0.012321216985583305,
    -0.00942335743457079,
    0.001558750867843628,
    0.021794170141220093,
    0.010415289551019669,
    0.004917150363326073,
    -0.02722145803272724,
    -0.013554046861827374,
    -0.0045416331849992275,
    -0.004516834858804941,
    -0.02512422949075699,
    0.046195708215236664,
    0.014241314493119717,
    -0.0013639070093631744,
    -0.031656812876462936,
    -0.006153523456305265,
    -0.023919740691781044,
    0.006142895203083754,
    -0.0017535947263240814,
    0.006238546222448349,
    -0.013313149102032185,
    -0.0016606010030955076,
    -0.015729213133454323,
    0.019838647916913033,
    0.018733350560069084,
    0.022672738879919052,
    0.000645641703158617,
    -0.011974040418863297,
    -0.010330267250537872,
    -0.030013039708137512,
    -0.041462771594524384,
    0.014078354462981224,
    0.030976630747318268,
    0.02897859551012516,
    -0.018705010414123535,
    0.002809294033795595,
    0.04475031793117523,
    -0.013915393501520157,
    -0.0205329991877079,
    0.014723110012710094,
    -0.01769890822470188,
    0.03069322183728218,
    -0.0036205530632287264,
    0.005058854818344116,
    -0.022587716579437256,
    -0.012810098007321358,
    0.02185085229575634,
    -0.021496592089533806,
    -0.021780000999569893,
    -0.014737281017005444,
    0.010578250512480736,
    0.006245631258934736,
    0.01341234240680933,
    -0.004445982631295919,
    4.9624293751548976e-05,
    -0.005604417994618416,
    0.001934268046170473,
    -0.0008170157088898122,
    -0.019512725993990898,
    0.0005012801266275346,
    0.03548283874988556,
    -0.03344229236245155,
    -0.019583579152822495,
    -0.03160013258457184,
    -0.0029226578772068024,
    0.0016606010030955076,
    0.00962174404412508,
    -0.008296805433928967,
    0.00763079384341836,
    0.04579893499612808,
    -0.008247208781540394,
    0.01774141937494278,
    0.0028748326003551483,
    0.004272394347935915,
    -0.010514482855796814,
    0.022148432210087776,
    0.011081301607191563,
    0.0075741121545434,
    0.0025453693233430386,
    -0.021680807694792747,
    -0.017358817160129547,
    -0.014354677870869637,
    0.011038790456950665,
    0.01813819259405136,
    -0.0015215533785521984,
    -0.010904170572757721,
    -0.006323568988591433,
    0.010847488418221474,
    0.02230430766940117,
    -0.02749069593846798,
    0.007071060594171286,
    -0.019526896998286247,
    -0.020405465736985207,
    -0.005979935172945261,
    0.01687701977789402,
    0.007173796650022268,
    0.023310409858822823,
    0.008785686455667019,
    0.003531987778842449,
    0.004722306504845619,
    -0.023848887532949448,
    -0.03650311008095741,
    -0.0033938256092369556,
    -0.03307385742664337,
    -0.013575302436947823,
    0.01880420371890068,
    0.003096245927736163,
    -0.005292667541652918,
    -0.02098645456135273,
    0.035369474440813065,
    -0.007446577772498131,
    0.01231413148343563,
    0.004892352037131786,
    0.03392408788204193,
    0.006482986267656088,
    0.006114554591476917,
    -0.026045309379696846,
    -0.02399059198796749,
    -0.008020482026040554,
    0.02532261610031128,
    -0.027844958007335663,
    -0.025152569636702538,
    -0.013391086831688881,
    0.041207704693078995,
    0.02186502330005169,
    0.001551665598526597,
    -0.0346609503030777,
    -0.004251138772815466,
    -0.018534963950514793,
    -0.03281879052519798,
    -0.019526896998286247,
    0.021326545625925064,
    0.013050995767116547,
    0.009742192924022675,
    -0.020490488037467003,
    0.015615849755704403,
    -0.016055133193731308,
    0.0015569794923067093,
    -0.0346609503030777,
    -0.010089369490742683,
    0.017217110842466354,
    0.014949837699532509,
    -0.009175374172627926,
    -0.015091542154550552,
    -0.03913881629705429,
    -0.012937632389366627,
    0.017231281846761703,
    -0.012512518092989922,
    0.018761692568659782,
    0.03143008425831795,
    -0.008835283108055592,
    0.009898067452013493,
    -0.0035178172402083874,
    -0.01145681831985712,
    0.014057098887860775,
    0.016777826473116875,
    0.02145407907664776,
    -0.015374951995909214,
    -0.012434580363333225,
    0.002577252918854356,
    0.010975022800266743,
    -0.01230704691261053,
    0.010344437323510647,
    -0.008580215275287628,
    -0.010188562795519829,
    -0.01288095023483038,
    -0.011378881521522999,
    -0.013972075656056404,
    0.00885653868317604,
    0.00197500828653574,
    0.029106128960847855,
    -0.0061960346065461636,
    0.03630472347140312,
    0.030013039708137512,
    0.0029226578772068024,
    0.009728021919727325,
    -0.023480456322431564,
    0.028156708925962448,
    -0.03264874592423439,
    -0.008459766395390034,
    0.02746235579252243,
    0.003914589993655682,
    -0.0010920112254098058,
    -0.019937841221690178,
    0.015247417613863945,
    -0.0018209044355899096,
    -0.0016845136415213346,
    -0.003512503346428275,
    -0.029984697699546814,
    -0.0020405466202646494,
    -0.00644047511741519,
    0.024812478572130203,
    -0.010294840671122074,
    0.014482212252914906,
    0.02811419777572155,
    -0.0024284629616886377,
    -0.0024780596140772104,
    -0.04066922515630722,
    -0.019314339384436607,
    -0.03845863416790962,
    0.02944622002542019,
    -0.0062527162954211235,
    0.0145955765619874,
    -0.03956393152475357,
    0.0069754100404679775,
    0.003574499161913991,
    -0.028043344616889954,
    -0.0005074797081761062,
    0.18682336807250977,
    0.027136435732245445,
    0.024401536211371422,
    0.030013039708137512,
    -0.003914589993655682,
    0.014212973415851593,
    0.006755767855793238,
    0.03162847086787224,
    -0.032138608396053314,
    0.013327320106327534,
    0.0009352504857815802,
    -0.0248833317309618,
    -0.013490280136466026,
    0.000315071374643594,
    0.0118890181183815,
    -0.0010078741470351815,
    -0.004828584846109152,
    -0.06206662580370903,
    -0.007666219957172871,
    0.01395790558308363,
    -0.00821886770427227,
    -0.004778988193720579,
    -0.028029173612594604,
    -0.02533678710460663,
    -0.005058854818344116,
    0.02094394341111183,
    0.016281861811876297,
    -0.011796909384429455,
    0.023948080837726593,
    -0.020178738981485367,
    -0.029928015545010567,
    0.008750260807573795,
    0.001680971123278141,
    0.0041306898929178715,
    -0.028709355741739273,
    -0.004934863653033972,
    0.018350748345255852,
    -0.02186502330005169,
    0.01597011089324951,
    0.012292875908315182,
    0.022389329969882965,
    -0.03267708420753479,
    0.0002893874188885093,
    -0.022672738879919052,
    0.015757553279399872,
    -0.01771307736635208,
    -0.014198803342878819,
    -0.008721919730305672,
    0.0063589951023459435,
    0.009940579533576965,
    -0.02139739878475666,
    -0.006171236280351877,
    0.030324788764119148,
    0.009232056327164173,
    0.0013337947893887758,
    -0.008310976438224316,
    -0.007382811047136784,
    0.020419636741280556,
    0.024118127301335335,
    -0.0045912298373878,
    -0.004027953837066889,
    0.029786311089992523,
    -0.027547378093004227,
    0.004368044901639223,
    -0.024982525035738945,
    0.03154344856739044,
    -0.04829293489456177,
    -0.015091542154550552,
    -0.03372570127248764,
    0.0048002442345023155,
    -0.014035843312740326,
    -0.012895120307803154,
    -0.008509362116456032,
    0.0032432645093649626,
    -0.028950253501534462,
    -0.01751469075679779,
    0.03984734043478966,
    0.01276758685708046,
    0.021737489849328995,
    0.040584202855825424,
    -0.026059480383992195,
    -0.007659134920686483,
    -0.029531244188547134,
    0.005398946348577738,
    -0.017160430550575256,
    0.005593789741396904,
    0.010351522825658321,
    -0.024529069662094116,
    -0.030239766463637352,
    -0.019994521513581276,
    -0.01750052161514759,
    -0.03738167881965637,
    -0.0020547169260680676,
    0.015856746584177017,
    0.006015361286699772,
    0.002704787068068981,
    -0.007304873317480087,
    0.005753207486122847,
    -0.020022863522171974,
    -0.0036187816876918077,
    -0.041179362684488297,
    0.04384341090917587,
    -0.00048135287943296134,
    -0.002350525464862585,
    -0.010146050713956356,
    0.008254294283688068,
    0.007552856579422951,
    0.002940370934084058,
    0.018719181418418884,
    -0.04409847781062126,
    -0.018676668405532837,
    -0.0184074304997921,
    0.002488687401637435,
    -0.019555237144231796,
    0.01557333767414093,
    -0.003287547267973423,
    -0.004881724249571562,
    0.005441457498818636,
    -0.019144294783473015,
    0.01795397512614727,
    0.0026675895787775517,
    -0.004084635525941849,
    -0.007120657246559858,
    -0.008580215275287628,
    -0.004445982631295919,
    -0.0047471048310399055,
    -0.04302152246236801,
    0.03004137985408306,
    -0.020887261256575584,
    0.014623916707932949,
    0.010861659422516823,
    -0.009678425267338753,
    0.0067167989909648895,
    -0.024996696040034294,
    -0.016721146181225777,
    -0.0014188175555318594,
    -0.014319252222776413,
    -0.003170640906319022,
    -0.0025418265722692013,
    -0.0014604432508349419,
    -0.036248043179512024,
    0.0012142314808443189,
    0.01081206277012825,
    0.021567443385720253,
    0.020192908123135567,
    -0.03089160844683647,
    -0.008934476412832737,
    -0.008162186481058598,
    0.0024390907492488623,
    0.005799261853098869,
    -0.026470422744750977,
    0.0028004376217722893,
    0.015885088592767715,
    -0.02074555680155754,
    0.009699681773781776,
    -0.06427721679210663,
    -0.0151482243090868,
    -0.005753207486122847,
    0.028397606685757637,
    0.003985442686825991,
    -0.010252329520881176,
    -0.008558958768844604,
    0.011648120358586311,
    -0.0012053749524056911,
    -0.009968920610845089,
    -0.04585561528801918,
    -0.17900127172470093,
    0.004899437539279461,
    0.016947872936725616,
    -0.022190943360328674,
    0.02315453439950943,
    0.008204697631299496,
    0.012675478123128414,
    0.014524723403155804,
    0.0067911939695477486,
    -0.020731385797262192,
    0.020490488037467003,
    -0.009132863022387028,
    -0.0183649193495512,
    -0.01125134713947773,
    -0.01490732654929161,
    -0.010996278375387192,
    -0.0005158933927305043,
    0.02165246568620205,
    0.045118752866983414,
    0.010160221718251705,
    0.05707862228155136,
    -0.014567235484719276,
    0.02229013666510582,
    0.026909707114100456,
    0.001250543282367289,
    -0.03069322183728218,
    -0.009154118597507477,
    -0.0015029546339064837,
    -0.012569200247526169,
    -0.02357964962720871,
    -0.008828197605907917,
    0.021992556750774384,
    0.019498556852340698,
    -0.005016343668103218,
    0.032960496842861176,
    0.0009387931204400957,
    0.008622726425528526,
    -0.020249590277671814,
    -0.017344646155834198,
    0.022105921059846878,
    0.02706558257341385,
    0.031260039657354355,
    0.02811419777572155,
    -0.036701496690511703,
    -0.023919740691781044,
    0.01438301894813776,
    0.015006519854068756,
    -0.02987133525311947,
    0.0013878196477890015,
    -0.0005592904053628445,
    0.042936500161886215,
    -0.014354677870869637,
    -0.009777618572115898,
    0.011952784843742847,
    0.00417320104315877,
    -0.0031121878419071436,
    0.0014170461799949408,
    0.0030891606584191322,
    -0.0064581879414618015,
    0.000763876480050385,
    -0.01904510147869587,
    -0.015870917588472366,
    0.0022849871311336756,
    0.015176565386354923,
    -0.023083683103322983,
    -0.005678812973201275,
    -0.010309011675417423,
    0.012399154715240002,
    -0.029984697699546814,
    0.022417671978473663,
    -0.011754398234188557,
    0.016749486327171326,
    -0.003712661098688841,
    -0.025407638400793076,
    -0.0007178224623203278,
    0.014638087712228298,
    -0.026002798229455948,
    0.022984489798545837,
    -0.0015410378109663725,
    0.0022938435431569815,
    -0.009047839790582657,
    0.04472197964787483,
    0.01307933684438467,
    0.00211317022331059,
    0.007822095416486263,
    -0.005044684745371342,
    0.025776071473956108,
    -0.00017967703752219677,
    0.007482003886252642,
    -0.004222797695547342,
    0.020830579102039337,
    0.012569200247526169,
    -0.028454288840293884,
    -0.018506623804569244,
    0.0024036646354943514,
    0.018237384036183357,
    0.013759518973529339,
    -0.005692983046174049,
    0.00821886770427227,
    -0.028170878067612648,
    0.019526896998286247,
    0.016055133193731308,
    -0.010656187310814857,
    0.018988419324159622,
    0.02464243397116661,
    0.028879402205348015,
    0.004697508178651333,
    0.012186597101390362,
    0.06212330609560013,
    0.032535381615161896,
    -0.028284242376685143,
    -0.012073233723640442,
    0.01416337676346302,
    0.014262570068240166,
    -0.010004346258938313,
    0.030126402154564857,
    0.001154892728663981,
    0.005172218661755323,
    0.010358608327805996,
    -0.02294197864830494,
    0.032336995005607605,
    0.0003159570333082229,
    0.02441570721566677,
    0.013561132363975048,
    0.0018421601271256804,
    -0.006943526677787304,
    -0.13671661913394928,
    -0.0345475859940052,
    0.024132296442985535,
    0.0025542257353663445,
    0.00605787243694067,
    -0.010471971705555916,
    -0.009543806314468384,
    0.003186582587659359,
    -0.012144085951149464,
    0.029899675399065018,
    0.019512725993990898,
    0.00920371524989605,
    -0.005048227030783892,
    0.020263761281967163,
    -0.02896442450582981,
    0.014850644394755363,
    -0.008310976438224316,
    -0.0009600488119758666,
    0.008913220837712288,
    0.01415629219263792,
    -0.012087404727935791,
    0.02401893399655819,
    0.007531600538641214,
    -0.0035426155664026737,
    -0.011208835989236832,
    0.020703045651316643,
    -0.04492036625742912,
    -0.009033669717609882,
    0.01072703953832388,
    -0.0008914106292650104,
    -0.002938599558547139,
    -0.018081510439515114,
    -0.018534963950514793,
    -0.002644562628120184,
    0.016267690807580948,
    -0.014305081218481064,
    0.004194456618279219,
    -0.021921705454587936,
    0.0270514115691185,
    -0.022672738879919052,
    0.014893155544996262,
    -0.008899049833416939,
    0.012803012505173683,
    0.03160013258457184,
    -3.229868889320642e-05,
    -0.013773689046502113,
    -0.022587716579437256,
    0.023877229541540146,
    0.010528653860092163,
    -0.01988115906715393,
    -0.023027000948786736,
    -0.022998660802841187,
    -0.027377333492040634,
    0.017783930525183678,
    0.021553272381424904,
    -0.02573356032371521,
    -0.007751242723315954,
    -0.008906135335564613,
    -0.006872673984616995,
    -0.007425322197377682,
    0.005186389200389385,
    -0.005310380831360817,
    -0.012923461385071278,
    0.03814688324928284,
    0.002378866309300065,
    0.007588282693177462,
    -0.023749694228172302,
    0.011159239336848259,
    0.024089785292744637,
    -0.02921949326992035,
    -0.025478491559624672,
    0.024344854056835175,
    -0.01775558851659298,
    0.03834526985883713,
    -0.010025601834058762,
    -0.013150189071893692,
    0.01945604383945465,
    -0.005476883612573147,
    -0.001592405722476542,
    0.0020671160891652107,
    -0.011038790456950665,
    -0.018676668405532837,
    0.014779792167246342,
    -0.021539103239774704,
    -0.003007680643349886,
    -0.0002885017602238804,
    0.013511535711586475,
    0.010216902941465378,
    0.02230430766940117,
    -0.040102407336235046,
    0.005289125256240368,
    -0.009834300726652145,
    0.022417671978473663,
    0.007333214394748211,
    0.002761468756943941,
    0.010245244018733501,
    0.008070078678429127,
    -0.017202941700816154,
    -0.019526896998286247,
    0.015119883231818676,
    -0.02984299324452877,
    -0.013263552449643612,
    -0.06433390080928802,
    -0.001262056757695973,
    0.021057307720184326,
    -0.01860581710934639,
    0.0030590484384447336,
    -0.022800274193286896,
    0.012172427028417587,
    -0.02743401564657688,
    0.0006496271234937012,
    -0.0018297609640285373,
    -0.025180911645293236,
    0.014765622094273567,
    -0.016069304198026657,
    0.00036599647137336433,
    0.009805959649384022,
    -0.011520585976541042,
    0.019427703693509102,
    -0.017217110842466354,
    0.01558750867843628,
    0.012817183509469032,
    -0.0003051077655982226,
    -0.004846298135817051,
    0.0162110086530447,
    -0.0013258238323032856,
    -0.030381470918655396,
    -0.007195052225142717,
    -0.0324503593146801,
    0.028241731226444244,
    -0.01752886176109314,
    -0.020164567977190018,
    0.026470422744750977,
    -0.0033371439203619957,
    0.01144973374903202,
    -0.009409187361598015,
    0.029077788814902306,
    0.010649102739989758,
    0.04174618050456047,
    0.00799922551959753,
    0.018449941650032997,
    -0.010408204980194569,
    -0.010571165010333061,
    -0.03531279042363167,
    0.005639844108372927,
    0.02186502330005169,
    -0.0029014020692557096,
    -0.00790711771696806,
    0.016040964052081108,
    0.0005420201923698187,
    0.01470893993973732,
    0.01372409239411354,
    0.021794170141220093,
    0.018478283658623695,
    -0.018875055015087128,
    -0.010549909435212612,
    0.023423774167895317,
    -0.019569408148527145,
    0.0025453693233430386,
    -0.017458008602261543,
    -0.001212460221722722,
    -0.02553517371416092,
    0.03202524408698082,
    0.02353713847696781,
    -0.00015731426537968218,
    0.007035634480416775,
    -0.009791789576411247,
    -0.022446012124419212,
    -0.049653299152851105,
    -0.01114506833255291,
    0.009472954086959362,
    -0.017585543915629387,
    -0.013398172333836555,
    -0.0497099831700325,
    0.01907344162464142,
    0.039450567215681076,
    0.02397642284631729,
    -0.007729987148195505,
    -0.020221250131726265,
    -0.011853591538965702,
    -0.028510969132184982,
    0.03434919938445091,
    0.02681051380932331,
    -0.014446786604821682,
    -0.04347497969865799,
    0.007432407233864069,
    0.022630227729678154,
    -0.002802208997309208,
    -0.01900259032845497,
    -0.008721919730305672,
    0.002288529649376869,
    0.019526896998286247,
    0.015431633219122887,
    -0.01581423543393612,
    0.001094668172299862,
    0.010649102739989758,
    0.027944151312112808,
    0.012200768105685711,
    0.001250543282367289,
    -0.010415289551019669,
    0.010053942911326885,
    -0.005303295329213142,
    0.010606590658426285,
    -0.010797892697155476,
    -0.00605787243694067,
    -0.0007944315439090133,
    -0.002476288238540292,
    0.003452278906479478,
    -0.007368640508502722,
    -0.03848697617650032,
    0.003547929460182786,
    0.042284660041332245,
    0.00395001657307148,
    0.0091824596747756,
    -0.015119883231818676,
    0.026923878118395805,
    -0.023678842931985855,
    0.0323936752974987,
    -0.006288142409175634,
    -0.021992556750774384,
    -0.014170462265610695,
    0.0035231311339884996,
    -0.010089369490742683,
    0.007333214394748211,
    0.02658378705382347,
    -0.009267481975257397,
    0.022559376433491707,
    0.016976213082671165,
    0.012611711397767067,
    -0.02253103442490101,
    0.010571165010333061,
    -0.018024828284978867,
    -0.04132106900215149,
    0.014538894407451153,
    -0.01622517965734005,
    -0.013972075656056404,
    0.020717216655611992,
    -0.007552856579422951,
    0.014149206690490246,
    -0.007460748311132193,
    0.010316096246242523,
    0.077880859375,
    0.0076237088069319725,
    0.0024869160261005163,
    0.011556011624634266,
    0.021780000999569893,
    0.024755798280239105,
    0.004754189867526293,
    0.012965972535312176,
    0.0003823810548055917,
    -0.014623916707932949,
    0.014276741072535515,
    -0.006908100564032793,
    0.0026569615583866835,
    -0.0411510206758976,
    -0.0018279895884916186,
    0.017372986301779747,
    -0.013022654689848423,
    0.020830579102039337,
    -0.026470422744750977,
    0.004339704290032387,
    0.019555237144231796,
    0.0030661337077617645,
    -0.0005358206108212471,
    -0.021694976836442947,
    -0.030778244137763977,
    -0.0009131091646850109,
    0.02206340990960598,
    0.011081301607191563,
    0.0005163362366147339,
    -0.05254407227039337,
    0.024387365207076073,
    -0.005933881271630526,
    -0.003928760532289743,
    -0.0291911531239748,
    0.008445595391094685,
    0.010599506087601185,
    -0.005476883612573147,
    -0.005930338520556688,
    0.02659795805811882,
    0.01416337676346302,
    0.012590455822646618,
    -0.011024619452655315,
    -0.03267708420753479,
    -0.031911879777908325,
    -0.003067905083298683,
    0.0205755103379488,
    -0.02880854904651642,
    -0.009990176185965538,
    -0.04611068591475487
  ]
}
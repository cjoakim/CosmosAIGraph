{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "programming language :: python :: 3 :: only",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: software development :: libraries"
  ],
  "description": "streaming json encoder and decoder\n# json-stream\n\n[![tests](https://github.com/daggaz/json-stream/actions/workflows/tests.yml/badge.svg)](https://github.com/daggaz/json-stream/actions/workflows/tests.yml)\n[![pypi package and version badge](https://img.shields.io/pypi/v/json-stream)](https://pypi.org/project/json-stream)\n[![supported python versions badge](https://img.shields.io/pypi/pyversions/json-stream)](https://pypi.org/project/json-stream/)\n[![donate](https://img.shields.io/badge/buy%20me%20a%20coffee-donate-blue.svg)](https://www.buymeacoffee.com/daggaz)\n\nsimple streaming json parser and encoder.\n\nwhen [reading](#reading) json data, `json-stream` can decode json data in \na streaming manner, providing a pythonic dict/list-like interface, or a\n[visitor-based interfeace](#visitor). can stream from files, [urls](#urls) \nor [iterators](#iterators).\n\nwhen [writing](#writing) json data, `json-stream` can stream json objects \nas you generate them.\n\nthese techniques allow you to [reduce memory consumption and \nlatency](#standard-json-problems).\n\n# <a id=\"reading\"></a> reading\n\n`json-stream` is a json parser just like the standard library's\n [`json.load()`](https://docs.python.org/3/library/json.html#json.load). it \n will read a json document and convert it into native python types.\n\n```python\nimport json_stream\ndata = json_stream.load(f)\n```\n\nfeatures:\n* stream all json data types (objects, lists and simple types)\n* stream nested data\n* simple pythonic `list`-like/`dict`-like interface\n* stream truncated or malformed json data (up to the first error)\n* [native code parsing speedups](#rust-tokenizer) for most common platforms \n* pure python fallback if native extensions not available\n\nunlike `json.load()`, `json-stream` can _stream_ json data from any file-like or\n[iterable](#iterators) object. this has the following benefits:\n\n* it does not require the whole json document to be read into memory up-front\n* it can start producing data before the entire document has finished loading\n* it only requires enough memory to hold the data currently being parsed\n\nthere are specific integrations for streaming json data from [urls](#urls) using the \n[`requests`](#requests), [`httpx`](#httpx), or [`urllib`](#urllib).\n\nthe objects that `json-stream` produces can be [re-output](#encoding-json-stream-objects)\nusing `json.dump()` with a little work.\n\n## usage\n\n### `json_stream.load()`\n\n`json_stream.load()` has two modes of operation, controlled by\nthe `persistent` argument (default false).\n\nit is also possible to \"mix\" the modes as you consume the data.\n\n#### transient mode (default)\n\nthis mode is appropriate if you can consume the data iteratively. you cannot \nmove backwards through the stream to read data that has already been skipped\nover. it is the mode you **must** use if you want to process large amounts of\njson data without consuming large amounts of memory.\n\nin transient mode, only the data currently being read is stored in memory. any\ndata previously read from the stream is discarded (it's up to you what to do \nwith it) and attempting to access this data results in a\n`transientaccessexception`.\n\n```python\nimport json_stream\n\n# json: {\"count\": 3, \"results\": [\"a\", \"b\", \"c\"]}\ndata = json_stream.load(f)  # data is a transient dict-like object \n# stream has been read up to \"{\"\n\n# use data like a dict\nresults = data[\"results\"]  # results is a transient list-like object\n# stream has been read up to \"[\", we now cannot read \"count\"\n\n# iterate transient list\nfor result in results:\n    print(result)  # prints a, b, c\n# stream has been read up to \"]\"\n\n# attempt to read \"count\" from earlier in stream\ncount = data[\"count\"]  # will raise exception\n# stream is now exhausted\n\n# attempt to read from list that has already been iterated\nfor result in results:  # will raise exception\n    pass\n```\n\n#### persistent mode\n\nin persistent mode all previously read data is stored in memory as\nit is parsed. the returned `dict`-like or `list`-like objects\ncan be used just like normal data structures.\n\nif you request an index or key that has already been read from the stream\nthen it is retrieved from memory. if you request an index or key that has\nnot yet been read from the stream, then the request blocks until that item\nis found in the stream.\n\n```python\nimport json_stream\n\n# json: {\"count\": 1, \"results\": [\"a\", \"b\", \"c\"]}\ndata = json_stream.load(f, persistent=true)\n# data is a streaming  dict-like object \n# stream has been read up to \"{\"\n\n# use data like a dict\nresults = data[\"results\"]  # results is a streaming list-like object\n# stream has been read up to \"[\"\n# count has been stored data\n\n# use results like a list\na_result = results[1]  # a_result = \"b\"\n# stream has been read up to the middle of list\n# \"a\" and \"b\" have been stored in results\n\n# read earlier data from memory\ncount = data[\"count\"]  # count = 1\n\n# consume rest of list\nresults.read_all()\n# stream has been read up to \"}\"\n# \"c\" is now stored in results too\n# results.is_streaming() == false\n\n# consume everything\ndata.read_all()\n# stream is now exhausted\n# data.is_streaming() == false\n```\n\npersistent mode is not appropriate if you care about memory consumption, but\nprovides an identical experience compared to `json.load()`.\n\n#### mixed mode\n\nin some cases you will need to be able to randomly access some part of the \ndata, but still only have that specific data taking up memory resources.\n\nfor example, you might have a very long list of objects, but you cannot always \naccess the keys of the objects in stream order. you want to be able to iterate\nthe list transiently, but access the result objects persistently.\n\nthis can be achieved using the `persistent()` method of all the `list` or\n`dict`-like objects json_stream produces. calling `persistent()` causes the existing\ntransient object to produce persistent child objects.\n\nnote that the `persistent()` method makes the children of the object it\nis called on persistent, not the object it is called on.\n\n```python\nimport json_stream\n\n# json: {\"results\": [{\"x\": 1, \"y\": 3}, {\"y\": 4, \"x\": 2}]}\n# note that the keys of the inner objects are not ordered \ndata = json_stream.load(f)  # data is a transient dict-like object \n\n# iterate transient list, but produce persistent items\nfor result in data['results'].persistent():\n    # result is a persistent dict-like object\n    print(result['x'])  # print x\n    print(result['y'])  # print y (error on second result without .persistent())\n    print(result['x'])  # print x again (error without .persistent())\n```\n\nthe opposite is also possible, going from persistent mode to transient mode, though \nthe use cases for this are more esoteric.\n\n```python\n# json: {\"a\": 1, \"x\": [\"long\", \"list\", \"i\", \"don't\", \"want\", \"in\", \"memory\"], \"b\": 2}\ndata = load(stringio(json), persistent=true).transient()\n# data is a persistent dict-list object that produces transient children\n\nprint(data[\"a\"])  # prints 1\nx = data[\"x\"]  # x is a transient list, you can use it accordingly\nprint(x[0])  # prints long\n\n# access earlier data from memory\nprint(data[\"a\"])  # this would have raised an exception if data was transient\n\nprint(data[\"b\"])  # prints 2\n\n# we have now moved past all the data in the transient list\nprint(x[0])  # will raise exception\n```\n\n### <a id=\"visitor\"></a>visitor pattern\n\nyou can also parse using a visitor-style approach where a function you supply\nis called for each data item as it is parsed (depth-first).\n\nthis uses a transient parser under the hood, so does not consume memory for\nthe whole document.\n\n```python\nimport json_stream\n\n# json: {\"x\": 1, \"y\": {}, \"xxxx\": [1,2, {\"yyyy\": 1}, \"z\", 1, []]}\n\ndef visitor(item, path):\n    print(f\"{item} at path {path}\")\n\njson_stream.visit(f, visitor)\n```\n\noutput:\n```\n1 at path ('x',)\n{} at path ('y',)\n1 at path ('xxxx', 0)\n2 at path ('xxxx', 1)\n1 at path ('xxxx', 2, 'yyyy')\nz at path ('xxxx', 3)\n1 at path ('xxxx', 4)\n[] at path ('xxxx', 5)\n```\n\n### <a id=\"urls\"></a> stream a url\n\n`json_stream` knows how to stream directly from a url using a variety of packages.\nsupported packages include:\n- python's batteries-included [`urllib`](#urllib) package\n- the popular [`requests`](#requests) library\n- the newer [`httpx`](#httpx) library\n\n#### <a id=\"urllib\"></a> urllib\n\n[`urllib`](https://docs.python.org/3/library/urllib.html)'s response objects are already\nfile-like objects, so we can just pass them directly to `json-stream`.\n\n```python\nimport urllib.request\nimport json_stream\n\nwith urllib.request.urlopen('http://example.com/data.json') as response:\n    data = json_stream.load(response)\n```\n\n#### <a id=\"requests\"></a>requests\n\nto stream json data from [`requests`](https://requests.readthedocs.io/en/latest/), you must\npass `stream=true` when making a request, and call `json_stream.requests.load()` passing the response. \n\n```python\nimport requests\nimport json_stream.requests\n\nwith requests.get('http://example.com/data.json', stream=true) as response:\n    data = json_stream.requests.load(response)\n```\n\n<a id=\"requests-chunk-size\"></a>\nnote: these functions use\n[`response.iter_content()`](https://requests.readthedocs.io/en/latest/api/#requests.response.iter_content) under the\nhood with a `chunk_size` of 10k bytes. this default allows us to perform effective reads from the response stream and \nlower cpu usage. the drawback to this is that `requests` will buffer each read until up to 10k bytes have been read \nbefore passing the data back to `json_stream`. if you need to consume data more responsively the only option is to tune\n`chunk_size` back to 1 to disable buffering.\n\n#### <a id=\"httpx\"></a> httpx\n\nto stream json data from [`httpx`](https://www.python-httpx.org/), you must call\n[`stream()`](https://www.python-httpx.org/quickstart/#streaming-responses) when\nmaking your request, and call `json_stream.httpx.load()` passing the response.\n\n```python\nimport httpx\nimport json_stream.httpx\n\nwith httpx.client() as client, client.stream('get', 'http://example.com/data.json') as response:\n    data = json_stream.httpx.load(response)\n```\n\nunder the hood, this works similarly to the [`requests`](#requests) version above, including \nthe caveat about [`chunk_size`](#requests-chunk-size).\n\n### stream a url (with visitor)\n\nthe visitor pattern also works with url streams.\n\n#### urllib\n\n```python\nimport urllib.request\nimport json_stream\n\ndef visitor(item, path):\n    print(f\"{item} at path {path}\")\n    \nwith urllib.request.urlopen('http://example.com/data.json') as response:\n    json_stream.visit(response, visitor)\n```\n\n#### requests\n\n```python\nimport requests\nimport json_stream.requests\n\ndef visitor(item, path):\n    print(f\"{item} at path {path}\")\n    \nwith requests.get('http://example.com/data.json', stream=true) as response:\n    json_stream.requests.visit(response, visitor)\n```\n\nthe [`chunk_size`](#requests-chunk-size) note also applies to `visit()`.\n\n#### httpx\n\n```python\nimport httpx\nimport json_stream.httpx\n\ndef visitor(item, path):\n    print(f\"{item} at path {path}\")\n    \nwith httpx.client() as client, client.stream('get', 'http://example.com/data.json') as response:\n    json_stream.httpx.visit(response, visitor)\n```\n\n### <a id=\"iterators\"></a> stream an iterable\n\n`json-stream`'s parsing functions can take any iterable object that produces encoded json as\n`byte` objects.\n\n```python\nimport json_stream\n\ndef some_iterator():\n    yield b'{\"some\":'\n    yield b' \"json\"}'\n\ndata = json_stream.load(some_iterator())\nassert data['some'] == \"json\"\n```\n\nthis is actually how the [`requests`](#requests) and [`httpx`](#httpx) extensions work, as\nboth libraries provide methods to iterate over the response content.\n\n### <a id=\"encoding-json-stream-objects\"></a> encoding json-stream objects\n\nyou can re-output (encode) _persistent_ json-stream `dict`-like and `list`-like object back to json using the built-in\n`json.dump()` or `json.dumps()` functions, but with a little additional work:\n\n```python\nimport json\n\nimport json_stream\nfrom json_stream.dump import jsonstreamencoder, default\n\ndata = json_stream.load(f, persistent=true)\n\n# option 1: supply json_stream.encoding.default as the default argument\nprint(json.dumps(data, default=default))\n\n# option 2: supply json_stream.encoding.jsonstreamencoder as the cls argument\n# this allows you to create your own subclass to further customise encoding\nprint(json.dumps(data, cls=jsonstreamencoder))\n```\n\nif you are using a library that internally takes data you pass it and encodes\nit using `json.dump()`. you can also use jsonstreamencoder() as a context manager.\n\nit works by monkey-patching the built-in `jsonencoder.default` method during the\nscope of the `with` statement.\n\n```python \n# library code\ndef some_library_function_out_of_your_control(arg):\n    json.dumps(arg)\n\n# your code\nwith jsonstreamencoder():\n    some_library_function_out_of_your_control(data)\n```\n\n### converting to standard python types\n\nto convert a json-stream `dict`-like or `list`-like object and all its\ndescendants to a standard `list` and `dict`, you can use the\n`json_stream.to_standard_types` utility:\n\n```python\n# json: {\"round\": 1, \"results\": [1, 2, 3]}\ndata = json_stream.load(f)\nresults = data[\"results\"]\nprint(results)  # prints <transientstreamingjsonlist: transient, streaming>\nconverted = json_stream.to_standard_types(results)\nprint(converted)  # prints [1, 2, 3]\n```\n\n#### thread safety (experimental)\n\nthere is also a thread-safe version of the `json.dump` context manager:\n\n```python\nfrom json_stream.dump.threading import threadsafejsonstreamencoder\n\n# your code\nwith threadsafejsonstreamencoder():\n   some_library_function_out_of_your_control(data)\n```\n\nthe thread-safe implementation will ensure that concurrent uses of the \ncontext manager will only apply the patch for the first thread entering\nthe patched section(s) and will only remove the patch when the last\nthread exits the patched sections(s)\n\nadditionally, if the patch is somehow called by a thread that is _not_\ncurrently in a patched section (i.e. some other thread calling \n`json.dump`) then that thread will block until the patch has been\nremoved. while such an un-patched thread is active, any thread attempting\nto apply the patch is blocked.\n\n### <a id=\"rust-tokenizer\"></a> rust tokenizer speedups\n\nby default `json-stream` uses the \n[`json-stream-rs-tokenizer`](https://pypi.org/project/json-stream-rs-tokenizer/)\nnative extension.\n\nthis is a 3rd party rust-based tokenizer implementations that provides\nsignificant parsing speedup compared to pure python implementation.\n\n`json-stream` will fallback to its pure python tokenizer implementation\nif `json-stream-rs-tokenizer` is not available.\n\n### custom tokenizer\n\nyou can supply an alternative json tokenizer implementation. simply pass \na tokenizer to the `load()` or `visit()` methods.\n\n```python\njson_stream.load(f, tokenizer=some_tokenizer)\n```\n\nthe requests methods also accept a customer tokenizer parameter.\n\n\n# writing\n\nthe standard library's `json.dump()` function can only accept standard\npython types such as `dict`, `list`, `str`.\n\n`json-stream` allows you to write streaming json output based on python\ngenerators instead.\n\nfor actually encoding and writing to the stream, `json-stream` \nstill uses the standard library's `json.dump()` function, but provides\nwrappers that adapt python generators into `dict`/`list` subclasses \nthat `json.dump()` can use.\n\nthe means that you do not have to generate all of your data upfront\nbefore calling `json.dump()`.\n\n## usage\n\nto use `json-stream` to generate json data iteratively, you must first \nwrite python generators (or use any other iterable).\n\nto output json objects, the iterable must yield key/value pairs.\n\nto output json lists, the iterable must yield individual items.\n\nthe values yielded can be either be standard python types or another other\n`streamable` object, allowing lists and object to be arbitrarily nested.\n\n`streamable_list`/`streamable_dict` can be used to wrap an existing\niterable:\n```python\nimport sys\nimport json\n\nfrom json_stream import streamable_list\n\n# wrap existing iterable\ndata = streamable_list(range(10))\n\n# consume iterable with standard json.dump()\njson.dump(data, sys.stdout)\n```\n\nor they can be used as decorators on generator functions:\n```python\nimport json\nimport sys\n\nfrom json_stream import streamable_dict\n\n# declare a new streamable dict generator function\n@streamable_dict\ndef generate_dict_of_squares(n):\n    for i in range(n):\n        # this could be some memory intensive operation\n        # or just a really large value of n\n        yield i, i ** 2\n\n# data is will already be streamable because\n# of the decorator\ndata = generate_dict_of_squares(10)\njson.dump(data, sys.stdout)\n```\n\n## example\n\nthe following example generates a json object with a nested json list.\nit uses `time.sleep()` to slow down the generation and show that the\noutput is indeed written as the data is created.\n\n```python\nimport sys\nimport json\nimport time\n\nfrom json_stream.writer import streamable_dict, streamable_list\n\n\n# define a list data generator that (slowly) yields \n# items that will be written as a json list\n@streamable_list\ndef generate_list(n):\n    # output n numbers and their squares\n    for i in range(n):  # range is itself a generator\n        yield i\n        time.sleep(1)\n\n\n# define a dictionary data generator that (slowly) yields \n# key/value pairs that will be written as a json dict\n@streamable_dict\ndef generate_dict(n):\n    # output n numbers and their squares\n    for i in range(n):  # range is itself a generator\n        yield i, i ** 2\n        time.sleep(1)\n\n    # yield another dictionary item key, with the value\n    # being a streamed nested list\n    yield \"a list\", generate_list(n)\n\n\n# get a streamable generator\ndata = generate_dict(5)\n\n# use json.dump() to write dict generator to stdout\njson.dump(data, sys.stdout, indent=2)\n\n# if you already have an iterable object, you can just\n# call streamable_* on it to make it writable\ndata = streamable_list(range(10))\njson.dump(data, sys.stdout)\n\n```\n\noutput:\n```json\n{\n  \"0\": 0,\n  \"1\": 1,\n  \"2\": 4,\n  \"3\": 9,\n  \"4\": 16,\n  \"a list\": [\n    0,\n    1,\n    2,\n    3,\n    4\n  ]\n}\n```\n\n# <a id=\"standard-json-problems\"></a> what are the problems with the standard `json` package?\n\n## reading with `json.load()`\nthe problem with the `json.load()` stem from the fact that it must read\nthe whole json document into memory before parsing it.\n\n### memory usage\n\n`json.load()` first reads the whole document into memory as a string. it\nthen starts parsing that string and converting the whole document into python\ntypes again stored in memory. for a very large document, this could be more\nmemory than you have available to your system.\n\n`json_stream.load()` does not read the whole document into memory, it only\nbuffers enough from the stream to produce the next item of data.\n\nadditionally, in the default transient mode (see below) `json-stream` doesn't store \nup all of the parsed data in memory.\n\n### latency\n\n`json.load()` produces all the data after parsing the whole document. if you\nonly care about the first 10 items in a list of 2 million items, then you\nhave wait until all 2 million items have been parsed first.\n\n`json_stream.load()` produces data as soon as it is available in the stream.\n\n## <a id=\"writing\"></a> writing\n\n### memory usage\n\nwhile `json.dump()` does iteratively write json data to the given\nfile-like object, you must first produce the entire document to be \nwritten as standard python types (`dict`, `list`, etc). for a very\nlarge document, this could be more memory than you have available \nto your system.\n\n`json-stream` allows you iteratively generate your data one item at\na time, and thus consumes only the memory required to generate that\none item.\n\n### latency\n\n`json.dump()` can only start writing to the output file once all the\ndata has been generated up front at standard python types.\n\nthe iterative generation of json items provided by `json-stream`\nallows the data to be written as it is produced.\n\n# future improvements\n\n* allow long strings in the json to be read as streams themselves\n* allow transient mode on seekable streams to seek to data earlier in\nthe stream instead of raising a `transientaccessexception`\n* a more efficient tokenizer?\n\n# alternatives\n\n## naya\n\n[naya](https://github.com/danielyule/naya) is a pure python json parser for\nparsing a simple json list as a stream.\n\n### why not naya?\n\n* it can only stream json containing a top-level list \n* it does not provide a pythonic `dict`/`list`-like interface \n\n## yajl-py\n\n[yajl-py](https://pykler.github.io/yajl-py/) is a wrapper around the c yajl json library that can be used to \ngenerate sax style events while parsing json.\n\n### why not yajl-py?\n\n* no pure python implementation\n* it does not provide a pythonic `dict`/`list`-like interface \n\n## jsonslicer\n\n[jsonslicer](https://github.com/amdmi3/jsonslicer) is another wrapper around the yajl c library with a\npath lookup based interface.\n\n### why not jsonslicer?\n\n* no pure python implementation\n* it does not provide a pythonic `dict`/`list`-like interface\n* must know all data paths lookup in advance (or make multiple passes)\n\n# contributing\n\nsee the project [contribution guide](https://github.com/daggaz/json-stream/blob/master/contributing.md).\n\n# donations\n\n[![paypal](https://www.paypalobjects.com/webstatic/mktg/logo/pp-logo-100px.png)](https://paypal.me/jcockburn307?country.x=gb&locale.x=en_gb)\n\nor\n\n[![\"buy me a coffee\"](https://www.buymeacoffee.com/assets/img/custom_images/orange_img.png)](https://www.buymeacoffee.com/daggaz)\n\n# acknowledgements\n\nthe json tokenizer used in the project was taken from the\n[naya](https://github.com/danielyule/naya) project.\n",
  "docs_url": null,
  "keywords": "json,stream,decoder,encoder,parsing",
  "license": "copyright (c) 2020 jamie cockburn  permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"software\"), to deal in the software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the software, and to permit persons to whom the software is furnished to do so, subject to the following conditions:  the above copyright notice and this permission notice shall be included in all copies or substantial portions of the software.  the software is provided \"as is\", without warranty of any kind, express or implied, including but not limited to the warranties of merchantability, fitness for a particular purpose and noninfringement. in no event shall the authors or copyright holders be liable for any claim, damages or other liability, whether in an action of contract, tort or otherwise, arising from, out of or in connection with the software or the use or other dealings in the software. ",
  "name": "json-stream",
  "package_url": "https://pypi.org/project/json-stream/",
  "project_url": "https://pypi.org/project/json-stream/",
  "project_urls": {
    "Funding": "https://www.buymeacoffee.com/daggaz",
    "Homepage": "https://github.com/daggaz/json-stream",
    "Repository": "https://github.com/daggaz/json-stream",
    "Tracker": "https://github.com/daggaz/json-stream/issues"
  },
  "release_url": "https://pypi.org/project/json-stream/2.3.2/",
  "requires_dist": [
    "json-stream-rs-tokenizer (>=0.4.17)",
    "httpx ; extra == 'httpx'",
    "requests ; extra == 'requests'"
  ],
  "requires_python": "<4,>=3.5",
  "summary": "streaming json encoder and decoder",
  "version": "2.3.2",
  "releases": [],
  "developers": [
    "jamie_cockburn@hotmail.co.uk"
  ],
  "kwds": "json_stream jsonstreamencoder jsonencoder streamable_dict pyversions",
  "license_kwds": "copyright liable liability copies noninfringement",
  "libtype": "pypi",
  "id": "pypi_json_stream",
  "homepage": "",
  "release_count": 24,
  "dependency_ids": [
    "pypi_httpx",
    "pypi_json_stream_rs_tokenizer",
    "pypi_requests"
  ],
  "documentation_summary": "The HTML text describes `json-stream`, a Python package available on PyPI for streaming JSON encoding and decoding. It allows for efficient parsing and generation of JSON data without loading the entire document into memory, reducing memory consumption and latency. The package supports streaming from files, URLs, or iterators and offers both transient and persistent modes for data handling. It also provides a visitor pattern for parsing and supports streaming JSON data directly from URLs using libraries like `urllib`, `requests`, and `httpx`. Additionally, `json-stream` can encode streaming JSON objects and lists, allowing for iterative data generation. The package, released under the MIT License by Jamie Cockburn, requires Python versions 3.5 and above but less than 4. The latest version as of June 30, 2023, is 2.3.2.",
  "embedding": [
    -0.039895907044410706,
    0.004765109624713659,
    0.017200883477926254,
    -0.006388698238879442,
    0.015242715366184711,
    0.016059793531894684,
    0.004102995153516531,
    -0.021215831860899925,
    -0.002659022808074951,
    -0.03299301117658615,
    -0.007966502569615841,
    0.02473771572113037,
    -0.012065975926816463,
    0.006536617409437895,
    -0.0008166369516402483,
    -0.015355415642261505,
    0.02052554301917553,
    -0.0057371496222913265,
    0.031866010278463364,
    -0.0012185720261186361,
    0.004250914324074984,
    0.00400086073204875,
    -0.01989160291850567,
    -0.013862136751413345,
    -0.009523175656795502,
    0.0433332659304142,
    -0.000813115038909018,
    -0.00802285224199295,
    -0.0059378971345722675,
    0.0002386076666880399,
    0.022892247885465622,
    -0.022286484017968178,
    -0.0013145433040335774,
    -0.028611788526177406,
    -0.011903969570994377,
    -0.021708894520998,
    0.00784675870090723,
    -0.0056878430768847466,
    0.02532939240336418,
    -0.017285408452153206,
    0.015496291220188141,
    -0.0025551270227879286,
    -0.02107495628297329,
    -0.0089878486469388,
    0.002701285295188427,
    0.015496291220188141,
    -0.0003605529200285673,
    -0.02697763405740261,
    -0.0006268954020924866,
    -0.004409399349242449,
    0.03471169248223305,
    0.011847618967294693,
    -0.007783364504575729,
    -0.02087773010134697,
    0.01997612789273262,
    -0.014207281172275543,
    -0.011002366431057453,
    0.008248252794146538,
    -0.0008734273142181337,
    -0.017722122371196747,
    0.02245553396642208,
    0.03020367957651615,
    -0.03882525488734245,
    -0.013552211225032806,
    0.004191042389720678,
    0.001905339420773089,
    -0.021638456732034683,
    0.0032894399482756853,
    0.005913244094699621,
    0.01303801592439413,
    0.025540705770254135,
    0.005437789484858513,
    -0.016228843480348587,
    0.015637166798114777,
    0.060463711619377136,
    -0.010917841456830502,
    -0.01675008237361908,
    -0.0009227336850017309,
    -0.001568119041621685,
    -0.004427008796483278,
    0.010776965878903866,
    -0.03211958706378937,
    -0.018891388550400734,
    0.03634584695100784,
    0.004106517415493727,
    0.01989160291850567,
    -0.01848284900188446,
    0.027146684005856514,
    -0.02524486742913723,
    -0.00640982948243618,
    0.004691150039434433,
    0.0027048070915043354,
    0.0001139109444920905,
    0.022032909095287323,
    -0.004398833494633436,
    0.0010600872337818146,
    -0.01667964458465576,
    0.03817722573876381,
    -0.004986988380551338,
    -0.013643779791891575,
    -0.019356276839971542,
    0.009755619801580906,
    -0.019722552970051765,
    -0.012714002281427383,
    -0.031443383544683456,
    -0.006807802710682154,
    0.004402355290949345,
    -0.012150500901043415,
    0.024836327880620956,
    0.0376700758934021,
    -0.015566729009151459,
    0.022314660251140594,
    -0.005480051971971989,
    -0.034429941326379776,
    -0.006293607410043478,
    -0.0047228471376001835,
    0.0528564415872097,
    -0.003157369326800108,
    -0.016172492876648903,
    -0.015665341168642044,
    -0.0009544306667521596,
    -0.012256157584488392,
    0.013932574540376663,
    -0.0026819149497896433,
    0.016017530113458633,
    -0.0160457044839859,
    -0.009382300078868866,
    -0.004465749487280846,
    -0.011770137585699558,
    -0.008861061185598373,
    0.00155579240527004,
    0.0032101976685225964,
    0.0216666329652071,
    -0.021089043468236923,
    -0.03257038816809654,
    0.021568020805716515,
    -0.005959028378129005,
    -0.00961474422365427,
    -0.03896613046526909,
    -0.025033554062247276,
    0.0064626578241586685,
    0.014820089563727379,
    -0.022046996280550957,
    0.002632608637213707,
    0.0035394937731325626,
    0.016454244032502174,
    0.004261480178683996,
    0.006342913955450058,
    -0.02118765562772751,
    -0.01441155094653368,
    0.01354516763240099,
    -0.019807077944278717,
    -0.012347727082669735,
    -0.0005362068768590689,
    -0.021131306886672974,
    0.034824393689632416,
    0.01868007518351078,
    0.001557553419843316,
    0.0009280165540985763,
    0.044178519397974014,
    -0.007649532984942198,
    0.018299711868166924,
    -0.019807077944278717,
    -0.021483493968844414,
    -0.016454244032502174,
    0.029471129179000854,
    0.027456611394882202,
    0.0048602004535496235,
    -0.010114852339029312,
    -0.008367997594177723,
    -0.007663620635867119,
    0.029189378023147583,
    -0.0244559645652771,
    0.012728090398013592,
    -0.009840144775807858,
    0.03699387237429619,
    0.015073665417730808,
    0.02630143240094185,
    -0.02197655849158764,
    0.002805180847644806,
    0.0032383727375417948,
    0.012770352885127068,
    -0.0037296756636351347,
    0.03180966153740883,
    -0.018412411212921143,
    -0.00862861704081297,
    -0.008015808649361134,
    0.010776965878903866,
    0.007431176025420427,
    0.027357997372746468,
    0.04462932050228119,
    0.0077270143665373325,
    -0.015468115918338299,
    -0.03307753801345825,
    -0.5729683041572571,
    -0.009502043947577477,
    0.005395526997745037,
    -0.03313388675451279,
    0.016482418403029442,
    0.0013488817494362593,
    0.007536832708865404,
    0.016228843480348587,
    0.012981666252017021,
    0.008445478975772858,
    0.012157544493675232,
    0.024484140798449516,
    0.014087537303566933,
    -0.016651470214128494,
    -0.007152947131544352,
    0.011333423666656017,
    0.025582967326045036,
    -0.01808839850127697,
    -0.002023322507739067,
    0.011763093993067741,
    0.005089122802019119,
    0.054518770426511765,
    -0.05167308822274208,
    -0.0013823396293446422,
    -0.023765675723552704,
    0.010882622562348843,
    0.014975052326917648,
    -0.005659668240696192,
    0.0244559645652771,
    -0.003613453358411789,
    -0.043699540197849274,
    0.00477919727563858,
    0.022638672962784767,
    0.005166604183614254,
    0.05756167694926262,
    0.014806002378463745,
    0.0080017214640975,
    0.04832025244832039,
    0.0014122755965217948,
    0.04600989818572998,
    -0.015538553707301617,
    -0.015904830768704414,
    0.0012018430279567838,
    0.02508990466594696,
    0.026160556823015213,
    0.023258524015545845,
    0.01030503399670124,
    0.010523390956223011,
    0.003252460155636072,
    -0.028414562344551086,
    -0.00014461738464888185,
    -0.0033616386353969574,
    0.03885342925786972,
    -0.035134319216012955,
    0.0311898086220026,
    -0.018919562920928,
    0.004550274461507797,
    0.009544306434690952,
    0.01120663620531559,
    0.005701930727809668,
    0.01425658818334341,
    0.02759748511016369,
    0.009706313721835613,
    0.01863781176507473,
    0.0010812184773385525,
    0.004293177276849747,
    0.005113776307553053,
    -0.0244137030094862,
    -0.0024054469540715218,
    -0.012995753437280655,
    0.012213895097374916,
    0.02056780457496643,
    -0.005187735892832279,
    -0.02331487461924553,
    0.025456180796027184,
    0.028724489733576775,
    0.00019755569519475102,
    -0.004881331697106361,
    0.006300651002675295,
    0.04558727145195007,
    0.005666711833328009,
    0.007233950309455395,
    -0.011988494545221329,
    -0.038599852472543716,
    0.023061299696564674,
    0.022511884570121765,
    0.0014457335928454995,
    -0.0037015005946159363,
    0.032739438116550446,
    -0.014834176748991013,
    -0.004462227690964937,
    0.0012018430279567838,
    0.0008298440370708704,
    -0.022427359595894814,
    0.008163727819919586,
    0.012685827910900116,
    0.004434052389115095,
    0.012474514544010162,
    -0.03082353249192238,
    -0.022159695625305176,
    -0.0037472848780453205,
    -0.02087773010134697,
    0.023131737485527992,
    -0.01635563187301159,
    0.007304388098418713,
    0.02555479295551777,
    -0.01446790061891079,
    0.009079418145120144,
    -0.0009148094686679542,
    -0.019511239603161812,
    -0.002352618845179677,
    -0.027667922899127007,
    -0.02594924345612526,
    -0.022540060803294182,
    -0.02682267129421234,
    -0.03814905136823654,
    0.03262673690915108,
    -0.013714217580854893,
    0.015679428353905678,
    -0.022427359595894814,
    -0.009917626157402992,
    -0.021060869097709656,
    -0.0035042748786509037,
    0.0014457335928454995,
    0.013122540898621082,
    0.011741962283849716,
    0.036120444536209106,
    -0.028766751289367676,
    -0.021398968994617462,
    0.017919348552823067,
    -0.012368857860565186,
    0.006585923954844475,
    0.019004087895154953,
    -0.023624800145626068,
    0.0038282882887870073,
    0.004842591006308794,
    0.022878160700201988,
    0.0017864758847281337,
    0.004898941144347191,
    -0.02811872400343418,
    0.01057974062860012,
    0.01490461453795433,
    0.011495430953800678,
    -0.02961200475692749,
    -0.021793421357870102,
    -0.042178086936473846,
    -0.003757850732654333,
    0.004490402527153492,
    -0.00423682713881135,
    -0.028048288077116013,
    -0.021708894520998,
    -0.016566943377256393,
    -0.02882310189306736,
    0.021722983568906784,
    -0.003757850732654333,
    -0.023920638486742973,
    0.012298420071601868,
    -0.011439080350100994,
    -0.013516992330551147,
    0.006656361278146505,
    0.021722983568906784,
    0.013383160345256329,
    -0.024441877380013466,
    0.019595764577388763,
    -0.02893580123782158,
    -0.004525621421635151,
    -0.017482634633779526,
    0.017595333978533745,
    -0.0034549685660749674,
    -0.011925100348889828,
    -0.0036310628056526184,
    0.011960319243371487,
    -0.00861452892422676,
    -0.003447924740612507,
    0.011199592612683773,
    0.011143242008984089,
    -0.017637597396969795,
    0.011157330125570297,
    0.002255766885355115,
    0.00884697400033474,
    -0.01339020486921072,
    0.03279578685760498,
    -0.029273902997374535,
    -0.02803419902920723,
    0.01969437673687935,
    0.029302077367901802,
    -0.0020444539841264486,
    0.018567373976111412,
    -0.015468115918338299,
    -0.004039601422846317,
    0.025343479588627815,
    0.042572539299726486,
    -0.009269599802792072,
    0.016665557399392128,
    -0.019314013421535492,
    0.012876009568572044,
    0.005684321280568838,
    -0.010748791508376598,
    0.012150500901043415,
    0.01541176624596119,
    0.01687687076628208,
    -0.015115927904844284,
    -0.0036768473219126463,
    -0.02933025360107422,
    -0.007240994367748499,
    -0.022864073514938354,
    0.026400044560432434,
    -0.007100118789821863,
    -0.002442426746711135,
    -0.006543661002069712,
    0.026400044560432434,
    -0.003972685430198908,
    -0.034232717007398605,
    -0.009748576208949089,
    0.018215186893939972,
    0.042572539299726486,
    0.009671094827353954,
    0.010523390956223011,
    -0.018905475735664368,
    -0.009065330028533936,
    -0.013608560897409916,
    -0.019990215077996254,
    -0.013524035923182964,
    0.016609206795692444,
    0.014538338407874107,
    0.03200688585639,
    -0.02272319793701172,
    0.0015734018525108695,
    0.005656146444380283,
    -0.03927605599164963,
    0.008832885883748531,
    0.01525680348277092,
    0.006402785889804363,
    0.008670879527926445,
    0.02386428788304329,
    -0.010551565326750278,
    0.04448844492435455,
    0.004691150039434433,
    0.01490461453795433,
    -0.023610712960362434,
    0.005620927549898624,
    -0.0053990487940609455,
    0.026808584108948708,
    -0.003521884325891733,
    0.02890762686729431,
    0.002528713084757328,
    -0.012404076755046844,
    0.017313582822680473,
    -0.008980805054306984,
    -0.011467255651950836,
    -0.008135552518069744,
    0.020201528444886208,
    -0.0007439980981871486,
    0.008459566161036491,
    0.029076676815748215,
    -0.0019511239370331168,
    0.004095951560884714,
    -0.002445948775857687,
    0.03457081690430641,
    -0.01608796790242195,
    0.003312332322821021,
    0.005906200036406517,
    0.03378191590309143,
    0.01589074172079563,
    0.029161201789975166,
    -0.018567373976111412,
    -0.03121798299252987,
    -0.03375374153256416,
    0.004039601422846317,
    0.01368604227900505,
    -0.01762351021170616,
    -0.03896613046526909,
    -0.02366706356406212,
    -0.0283159501850605,
    0.037134747952222824,
    0.003722631838172674,
    0.017355846241116524,
    0.02961200475692749,
    -0.001179831218905747,
    0.0041346922516822815,
    0.006349957548081875,
    -8.98080543265678e-05,
    0.01624293066561222,
    -0.010551565326750278,
    -0.0034796218387782574,
    -0.029442952945828438,
    -0.026357783004641533,
    0.0055504897609353065,
    0.006688058376312256,
    0.002400164259597659,
    0.001790878246538341,
    0.009093505330383778,
    0.03166878595948219,
    0.00418752059340477,
    -0.002562170848250389,
    0.013622649013996124,
    0.041501887142658234,
    -0.03798000141978264,
    -0.013862136751413345,
    -0.01238294504582882,
    0.021398968994617462,
    0.01762351021170616,
    -0.01429180707782507,
    0.041896335780620575,
    0.034345418214797974,
    -0.009678138419985771,
    -0.0070226374082267284,
    -0.010643134824931622,
    -0.020863642916083336,
    -0.018933650106191635,
    0.0028386388439685106,
    0.006152731832116842,
    -0.008551135659217834,
    0.0013832200784236193,
    0.021877946332097054,
    -8.199387229979038e-05,
    0.025808367878198624,
    -0.001497681369073689,
    0.02272319793701172,
    -0.02410377748310566,
    -0.0253998301923275,
    -0.01749672181904316,
    -0.0397268570959568,
    0.007061378099024296,
    0.021018605679273605,
    0.026400044560432434,
    0.010121895931661129,
    -0.013340897858142853,
    -0.011417949572205544,
    -0.02465319074690342,
    -0.021441232413053513,
    0.0029636656399816275,
    0.00435657100751996,
    0.015778042376041412,
    -0.0070367250591516495,
    0.023173999041318893,
    0.004715803079307079,
    0.012023713439702988,
    0.0006295368075370789,
    0.006846543401479721,
    -0.018708249554038048,
    -0.018187010660767555,
    -0.006723277270793915,
    -0.010234596207737923,
    0.025103991851210594,
    -0.019004087895154953,
    0.017271321266889572,
    0.026287345215678215,
    0.0358668714761734,
    -0.004839069209992886,
    0.008466609753668308,
    0.0024864503648132086,
    -0.021877946332097054,
    -0.02709033526480198,
    0.01887729950249195,
    -0.004159345291554928,
    0.01852511242032051,
    0.025822456926107407,
    -0.027076246216893196,
    0.0377545990049839,
    0.007896064780652523,
    -0.0002907755842898041,
    0.038515329360961914,
    -0.018454674631357193,
    0.03302118927240372,
    0.0006189711857587099,
    0.0051630823872983456,
    0.01122776698321104,
    0.011150285601615906,
    -0.02028605341911316,
    -0.013200022280216217,
    0.02048327960073948,
    0.009727444499731064,
    -0.00983310118317604,
    0.0338100902736187,
    -0.005311001557856798,
    -0.05558942258358002,
    -0.0062619103118777275,
    0.035641469061374664,
    0.0019405583152547479,
    0.030541781336069107,
    -0.025075817480683327,
    0.022356921806931496,
    -0.01852511242032051,
    0.013657867908477783,
    -0.031048933044075966,
    -0.022779548540711403,
    -0.008227122016251087,
    -0.0020779117476195097,
    0.00955135002732277,
    0.002995362738147378,
    0.021145394071936607,
    -0.022596409544348717,
    0.022342834621667862,
    0.025906981900334358,
    -0.0160457044839859,
    -0.026019681245088577,
    -0.018933650106191635,
    0.02107495628297329,
    -0.005863937549293041,
    -0.011220723390579224,
    -0.022751372307538986,
    0.026639534160494804,
    -0.007353694643825293,
    0.004927116446197033,
    -0.026047857478260994,
    -0.007945370860397816,
    -0.020117003470659256,
    0.011629262007772923,
    0.0003882877645082772,
    0.016411980614066124,
    -0.017243145033717155,
    0.005705452524125576,
    0.03248586133122444,
    -0.006712711416184902,
    0.044770196080207825,
    0.020300142467021942,
    0.0077129267156124115,
    -0.0025199083611369133,
    0.03040090575814247,
    0.009037155658006668,
    0.009417518973350525,
    0.009671094827353954,
    -0.025737931951880455,
    -0.008875148370862007,
    -0.018496936187148094,
    0.0013295114040374756,
    0.018708249554038048,
    -0.01248155813664198,
    -0.015439941547811031,
    0.019004087895154953,
    0.006843021139502525,
    -0.014834176748991013,
    -0.010227552615106106,
    0.0245827529579401,
    0.00552583672106266,
    -0.03747285157442093,
    0.020398754626512527,
    0.015130015090107918,
    0.001111154560931027,
    -0.028485000133514404,
    0.03583869710564613,
    -0.0244559645652771,
    0.02610420621931553,
    0.03020367957651615,
    -0.03617679700255394,
    0.022399185225367546,
    0.010805141180753708,
    0.021765245124697685,
    0.016820520162582397,
    0.009945801459252834,
    -0.002688958775252104,
    -0.025470267981290817,
    0.02890762686729431,
    0.01446790061891079,
    0.03223228454589844,
    -0.010643134824931622,
    -0.0359513945877552,
    -0.010565653443336487,
    -0.0033052884973585606,
    0.003449685638770461,
    -0.0018384236609563231,
    0.012876009568572044,
    0.00024521120940335095,
    -0.022032909095287323,
    -0.03445811569690704,
    -0.008692010305821896,
    -0.016496505588293076,
    -0.014150931499898434,
    -0.021103130653500557,
    -0.005515270866453648,
    -0.002933729672804475,
    -0.0018771643517538905,
    0.014918702654540539,
    -0.0003797031531576067,
    -0.005719540175050497,
    0.011037585325539112,
    -0.009192118421196938,
    -0.0066000111401081085,
    0.003167934948578477,
    -0.02513216622173786,
    0.011340467259287834,
    0.028330037370324135,
    0.00896671786904335,
    0.04296698793768883,
    -0.0032577430829405785,
    0.002808702876791358,
    0.0032348507083952427,
    -0.0057230619713664055,
    0.006673970725387335,
    -0.007107162848114967,
    0.008882191963493824,
    0.011509518139064312,
    0.004768631421029568,
    0.0012573127169162035,
    0.011509518139064312,
    -0.005733627825975418,
    -0.03606409579515457,
    -0.017412196844816208,
    0.015538553707301617,
    0.012749221175909042,
    0.008508872240781784,
    -0.014975052326917648,
    -0.02001839131116867,
    0.0015707603888586164,
    0.020046565681695938,
    -0.003555342322215438,
    -0.005726584233343601,
    0.005652624648064375,
    -0.009995107538998127,
    0.03178148344159126,
    -0.017820734530687332,
    0.05026433244347572,
    0.014453813433647156,
    -0.0007285898318514228,
    0.008889236487448215,
    0.010805141180753708,
    0.01334794145077467,
    0.019130876287817955,
    0.021708894520998,
    0.020046565681695938,
    -0.036627598106861115,
    -0.014010055921971798,
    -0.007043768651783466,
    0.004014948382973671,
    0.018708249554038048,
    0.007209297269582748,
    0.023737501353025436,
    0.006860630586743355,
    0.029668353497982025,
    -0.005420180037617683,
    -0.014080493710935116,
    0.026653621345758438,
    0.00152145407628268,
    -0.022046996280550957,
    -0.04231896251440048,
    -0.04322056472301483,
    -0.023188086226582527,
    -0.005117298103868961,
    0.01859555020928383,
    0.020342404022812843,
    0.012122325599193573,
    -0.011946232058107853,
    0.01254495233297348,
    -0.009058286435902119,
    0.0030094501562416553,
    0.022990861907601357,
    0.016778256744146347,
    0.0031855443958193064,
    0.018567373976111412,
    -0.010037370957434177,
    -0.024399615824222565,
    -0.02201882191002369,
    0.017088182270526886,
    -0.014052318409085274,
    0.019018175080418587,
    0.015327241271734238,
    0.0057230619713664055,
    -0.010135983116924763,
    0.007741102017462254,
    -0.0031802617013454437,
    -0.01584848016500473,
    -0.010072588920593262,
    0.012537908740341663,
    0.0415300615131855,
    0.002609716262668371,
    -0.026794496923685074,
    0.004152301698923111,
    -0.014834176748991013,
    0.01576395519077778,
    -0.04113560914993286,
    0.019849339500069618,
    0.004476314876228571,
    0.0021430666092783213,
    -0.043474141508340836,
    0.04415034130215645,
    0.0282736886292696,
    0.009192118421196938,
    0.0038564633578062057,
    0.00554344616830349,
    -0.00395155418664217,
    -0.011586999520659447,
    0.0002852726320270449,
    0.015623078681528568,
    0.049757182598114014,
    0.012876009568572044,
    -0.03352833911776543,
    -0.030429081991314888,
    0.04524917155504227,
    0.01083331648260355,
    -0.021089043468236923,
    0.016031617298722267,
    -0.02941477857530117,
    0.03451446816325188,
    -0.013538123108446598,
    -0.0020286054350435734,
    0.014989139512181282,
    -0.006504920311272144,
    -0.024174215272068977,
    0.0012476275442168117,
    -0.02045510523021221,
    -0.02469545416533947,
    -0.005920287687331438,
    -0.0025991506408900023,
    0.029161201789975166,
    -0.005180691834539175,
    0.0012890096986666322,
    0.00035394937731325626,
    0.0020057130604982376,
    -0.010960103943943977,
    -0.0008236807188950479,
    -0.014327025972306728,
    0.013615605421364307,
    -0.023328961804509163,
    -0.00917803030461073,
    -0.02080729231238365,
    -0.012805571779608727,
    0.014876439236104488,
    0.006504920311272144,
    -0.017158620059490204,
    0.019609851762652397,
    0.027893323451280594,
    0.004902462940663099,
    0.03868437930941582,
    -0.015566729009151459,
    0.015918917953968048,
    -0.023483924567699432,
    0.006180907133966684,
    0.021708894520998,
    -0.010100764222443104,
    0.013678998686373234,
    0.0016684926813468337,
    -0.05187031254172325,
    0.0007171437027864158,
    -0.002408968983218074,
    0.016609206795692444,
    -0.008135552518069744,
    -0.0032013929449021816,
    -0.006920502986758947,
    0.011072804220020771,
    0.0018577940063551068,
    -0.02500537969172001,
    -0.0025339957792311907,
    0.015876654535531998,
    -0.02847091294825077,
    -0.009213249199092388,
    0.021525757387280464,
    -0.03020367957651615,
    0.0007448785472661257,
    0.02992193028330803,
    0.0042861332185566425,
    -0.006149210035800934,
    -0.0071388594806194305,
    -0.02324443683028221,
    -0.0012890096986666322,
    -0.015045490115880966,
    -0.020976344123482704,
    0.04412216693162918,
    0.02063824236392975,
    -0.006670448929071426,
    -0.008290516212582588,
    0.017510809004306793,
    -0.019553503021597862,
    -0.013531079515814781,
    -0.022990861907601357,
    0.02418830245733261,
    0.020948167890310287,
    0.02151167020201683,
    0.011100979521870613,
    0.00027558745932765305,
    -0.0003319375973660499,
    -0.0039198570884764194,
    -0.0022945075761526823,
    -0.028879452496767044,
    -0.008480697870254517,
    0.01997612789273262,
    0.031443383544683456,
    0.009981020353734493,
    -0.015510378405451775,
    0.0179756972938776,
    -0.03769825026392937,
    0.00018269775318913162,
    -0.012530864216387272,
    0.04541822150349617,
    0.03178148344159126,
    0.013150716200470924,
    -0.011340467259287834,
    0.020990431308746338,
    0.0008787101251073182,
    0.03307753801345825,
    -0.03519066795706749,
    -0.005789977964013815,
    0.020384667441248894,
    0.018144749104976654,
    0.01291827205568552,
    0.003365160431712866,
    -0.030288206413388252,
    0.0021800464019179344,
    -0.01903226412832737,
    0.0039339447394013405,
    0.030795356258749962,
    0.028555437922477722,
    -0.02028605341911316,
    -0.016257017850875854,
    -0.00720577547326684,
    0.0059872036799788475,
    -0.004117082804441452,
    0.00802285224199295,
    -0.020595980808138847,
    -0.029499303549528122,
    -0.012791483663022518,
    0.011157330125570297,
    0.006430960725992918,
    0.0071388594806194305,
    -0.0026713493280112743,
    0.01946897618472576,
    0.0008232404943555593,
    -0.024723628535866737,
    0.006106947548687458,
    0.00047193249338306487,
    0.01667964458465576,
    -0.016482418403029442,
    0.005001076031476259,
    0.013608560897409916,
    0.009079418145120144,
    0.03375374153256416,
    0.010903754271566868,
    0.004789762664586306,
    -0.0011270029935985804,
    0.02607603184878826,
    -0.005649102386087179,
    0.012559039518237114,
    0.03386643901467323,
    0.002386076608672738,
    0.01679234392940998,
    -0.003041147254407406,
    0.024202389642596245,
    -0.005828718654811382,
    0.020046565681695938,
    -0.012044844217598438,
    -0.005976637825369835,
    -0.03369738906621933,
    0.0013603278202936053,
    -0.005177170038223267,
    -0.03868437930941582,
    0.02961200475692749,
    0.014608776196837425,
    0.0058745029382407665,
    -0.004504490178078413,
    -0.0255266185849905,
    -0.014721476472914219,
    -0.03242951259016991,
    0.014242500066757202,
    0.012080063112080097,
    0.022624585777521133,
    -0.0565473772585392,
    0.002516386331990361,
    -0.01777847297489643,
    -0.03378191590309143,
    -0.0013400770258158445,
    0.18888570368289948,
    0.0012581931659951806,
    0.025385743007063866,
    0.01789117231965065,
    0.005846328102052212,
    0.008544091135263443,
    0.020229704678058624,
    0.0022064605727791786,
    -0.03220411017537117,
    0.037416499108076096,
    -0.009107593446969986,
    -0.011382730677723885,
    0.003821244463324547,
    0.003345790086314082,
    -0.00152145407628268,
    0.011889881454408169,
    -0.02063824236392975,
    -0.07060673832893372,
    -0.007381869480013847,
    -0.0033317026682198048,
    0.0038916822522878647,
    -0.03719110041856766,
    -0.012861921451985836,
    -0.0357823446393013,
    0.04023400694131851,
    -0.02193429507315159,
    -0.0021571542602032423,
    -0.015735778957605362,
    0.021046781912446022,
    0.014017099514603615,
    -0.02480815351009369,
    -0.013439510948956013,
    -0.016496505588293076,
    -0.0022399185691028833,
    -0.03485256806015968,
    -0.030175505205988884,
    0.009579525329172611,
    0.0014871156308799982,
    -0.007142381742596626,
    0.010530434548854828,
    -0.0012846073368564248,
    -0.042093563824892044,
    -0.02559705637395382,
    -0.026681795716285706,
    0.012953490950167179,
    -0.009135767817497253,
    -0.018299711868166924,
    0.013700130395591259,
    -0.00725508201867342,
    0.03530336916446686,
    -0.019412627443671227,
    -0.0253998301923275,
    0.006283041555434465,
    0.00573010602965951,
    0.006402785889804363,
    -0.018384236842393875,
    -0.01639789342880249,
    0.023765675723552704,
    0.010826272889971733,
    -0.016341542825102806,
    -0.016623293980956078,
    0.028527263551950455,
    -0.017961610108613968,
    -0.002586824120953679,
    -0.04155823588371277,
    0.03600774705410004,
    -0.041586410254240036,
    -0.004976422525942326,
    0.009044199250638485,
    -0.017764383926987648,
    -0.021060869097709656,
    -0.012706958688795567,
    -0.0359513945877552,
    -0.014404507353901863,
    -0.00271361181512475,
    -0.007219863124191761,
    0.0339791402220726,
    0.016764169558882713,
    0.030175505205988884,
    0.015975266695022583,
    -0.02823142521083355,
    0.013249329291284084,
    0.002373750088736415,
    0.02280772291123867,
    -0.010748791508376598,
    -0.0451364703476429,
    0.029555654153227806,
    -0.016102055087685585,
    0.004057210870087147,
    -0.02096225507557392,
    -0.0035042748786509037,
    -0.019088612869381905,
    0.02177933230996132,
    -0.017468547448515892,
    -0.013122540898621082,
    -0.028809014707803726,
    0.006980374921113253,
    0.027428435161709785,
    0.02579428069293499,
    0.0003460251318756491,
    -0.02190612070262432,
    0.04223443567752838,
    0.009044199250638485,
    -0.008741317316889763,
    -0.033556513488292694,
    0.02041284181177616,
    -0.025343479588627815,
    0.007557963952422142,
    0.0018454673700034618,
    -0.021497583016753197,
    0.011903969570994377,
    -0.02858361415565014,
    0.0030252987053245306,
    -0.023610712960362434,
    0.00421921769157052,
    -0.015862567350268364,
    -0.00805807113647461,
    0.00292492494918406,
    -0.01687687076628208,
    -0.002852726262062788,
    -0.007614314090460539,
    -0.017919348552823067,
    -0.004793284460902214,
    -0.01639789342880249,
    -0.022145608440041542,
    -0.028569526970386505,
    -0.015468115918338299,
    0.014355200342833996,
    -0.015904830768704414,
    0.019807077944278717,
    -0.010157114826142788,
    -0.029273902997374535,
    0.028062375262379646,
    -0.012235026806592941,
    -0.019680289551615715,
    0.0013999490765854716,
    -0.019947953522205353,
    -0.0136649115011096,
    0.021765245124697685,
    0.010403646156191826,
    -0.005561055615544319,
    -0.007741102017462254,
    0.013777611777186394,
    -0.028555437922477722,
    0.013023928739130497,
    -0.03189418464899063,
    0.026752233505249023,
    -0.013150716200470924,
    0.004173432942479849,
    0.00918507482856512,
    -0.010917841456830502,
    -0.009114637039601803,
    0.020342404022812843,
    -0.011474299244582653,
    -0.011488386429846287,
    -0.04770040139555931,
    -0.01589074172079563,
    -0.018581461161375046,
    -0.0004160225798841566,
    -0.002419534604996443,
    -0.007938327267765999,
    0.0117349186912179,
    -0.00822007842361927,
    0.0026995243970304728,
    -0.006959243677556515,
    -0.027949674054980278,
    -0.1769394725561142,
    0.0003431636141613126,
    -0.016102055087685585,
    -0.03614862263202667,
    0.00839617196470499,
    -0.0022522450890392065,
    0.020187441259622574,
    -0.003969163633882999,
    0.006099903956055641,
    -0.011241855099797249,
    0.019454888999462128,
    -0.004969378933310509,
    -0.022314660251140594,
    -0.03133068233728409,
    -0.031077107414603233,
    -0.013967793434858322,
    -0.0076777078211307526,
    0.008931498974561691,
    0.0051983012817800045,
    0.01852511242032051,
    0.03716292232275009,
    -0.012080063112080097,
    0.02269502356648445,
    -0.009657006710767746,
    0.0021606760565191507,
    -0.010178245604038239,
    -0.0036874129436910152,
    0.016961395740509033,
    -0.01446790061891079,
    -0.010220508091151714,
    -0.0052616954781115055,
    0.0014800719218328595,
    0.012474514544010162,
    0.004476314876228571,
    0.02194838412106037,
    0.018891388550400734,
    0.03409184142947197,
    -0.017200883477926254,
    -0.021892033517360687,
    0.030372731387615204,
    0.019792990759015083,
    0.01911678910255432,
    0.0008514155633747578,
    -0.014129799790680408,
    -0.006670448929071426,
    -0.012516777031123638,
    0.006117513403296471,
    -0.008051027543842793,
    0.010128939524292946,
    -0.01703183352947235,
    0.02847091294825077,
    -0.014242500066757202,
    -0.00812146533280611,
    0.014651038683950901,
    0.007860845886170864,
    -0.011911013163626194,
    0.009234380908310413,
    -0.0028439215384423733,
    0.016623293980956078,
    -0.011396817862987518,
    -0.02682267129421234,
    -0.010009195655584335,
    0.017369933426380157,
    -0.0052335201762616634,
    -0.030964408069849014,
    0.012143457308411598,
    -0.02217378467321396,
    0.006018900312483311,
    0.006184428930282593,
    0.023385312408208847,
    -0.04299516603350639,
    0.02520260401070118,
    -0.0005045099533163011,
    -0.01639789342880249,
    -0.025667494162917137,
    0.01045999675989151,
    -0.02399107627570629,
    0.02339939959347248,
    0.033246587961912155,
    0.01832788623869419,
    -0.0234698373824358,
    0.0450519435107708,
    -0.022835899144411087,
    0.02044101618230343,
    0.009030111134052277,
    -0.008537047542631626,
    0.0047228471376001835,
    -0.011502474546432495,
    -0.010523390956223011,
    -0.003803635248914361,
    0.02091999351978302,
    0.0018208142137154937,
    0.014439726248383522,
    0.001170146046206355,
    -0.0011208397336304188,
    -0.004007904324680567,
    -0.00530747976154089,
    0.012932359240949154,
    0.0032454165630042553,
    -0.009163943119347095,
    0.008896280080080032,
    0.012721046805381775,
    -0.03366921469569206,
    -0.015454028733074665,
    0.02910485304892063,
    0.023850200697779655,
    -0.009389343671500683,
    0.01415797509253025,
    0.026526832953095436,
    0.004476314876228571,
    -0.016426069661974907,
    -0.004920072387903929,
    0.018567373976111412,
    0.007966502569615841,
    -0.015439941547811031,
    0.03634584695100784,
    0.004113561008125544,
    -0.005480051971971989,
    0.021539844572544098,
    -0.02816098742187023,
    0.04474201798439026,
    0.011516561731696129,
    -0.034345418214797974,
    -0.0006048836512491107,
    0.012946447357535362,
    -0.040093131363391876,
    -0.11208044737577438,
    -0.04978535696864128,
    -0.009065330028533936,
    0.0018049657810479403,
    0.011995538137853146,
    0.029555654153227806,
    0.0004974661860615015,
    0.024385526776313782,
    -0.010685397312045097,
    -9.872281952993944e-05,
    -0.019088612869381905,
    0.0035588641185313463,
    -0.016890957951545715,
    0.002315639052540064,
    0.004652409348636866,
    0.0009306579595431685,
    0.004243870731443167,
    0.006339391693472862,
    -0.024596840143203735,
    0.026921283453702927,
    -0.012080063112080097,
    0.009375256486237049,
    -0.00189477379899472,
    0.01409458089619875,
    -0.014651038683950901,
    -0.0021747637074440718,
    -0.03803635016083717,
    -0.0021747637074440718,
    0.012551995925605297,
    0.007811539340764284,
    0.017214970663189888,
    -0.023343048989772797,
    -0.01907452568411827,
    -0.012678783386945724,
    0.00474750017747283,
    0.021089043468236923,
    -0.02386428788304329,
    -0.02669588290154934,
    0.050856009125709534,
    -0.03581051900982857,
    0.008079202845692635,
    -0.00440587755292654,
    -0.01260130200535059,
    -0.0001839083997765556,
    -0.013305678963661194,
    -0.008297559805214405,
    -0.02284998632967472,
    0.03606409579515457,
    -0.0012793245259672403,
    -0.020145177841186523,
    -0.03609227016568184,
    -0.013115497305989265,
    0.003101019188761711,
    -0.018158836290240288,
    0.031443383544683456,
    -0.005691365338861942,
    0.0003933504631277174,
    0.022032909095287323,
    -0.008142597042024136,
    -0.01970846578478813,
    -0.013904399238526821,
    -0.001754778902977705,
    0.007195209618657827,
    0.030879883095622063,
    0.006092859897762537,
    -0.008882191963493824,
    -0.02292042411863804,
    0.018341973423957825,
    0.01760942116379738,
    0.005117298103868961,
    -0.01907452568411827,
    0.008410260081291199,
    -0.009107593446969986,
    0.0029513391200453043,
    -0.009572481736540794,
    -0.013284548185765743,
    0.02142714522778988,
    0.0001899616327136755,
    0.011417949572205544,
    0.0034796218387782574,
    0.01769394800066948,
    0.0016059792833402753,
    -0.008720185607671738,
    -0.030429081991314888,
    0.01855328679084778,
    0.0026238039135932922,
    0.0049658571369946,
    0.00019931665156036615,
    0.013791698962450027,
    -0.039811380207538605,
    0.013502905145287514,
    0.002711850916966796,
    0.03316206485033035,
    -0.002128979191184044,
    -0.024639103561639786,
    -0.0066140987910330296,
    -0.025568880140781403,
    0.013855093158781528,
    -0.027696099132299423,
    0.015130015090107918,
    -0.029555654153227806,
    0.0014571796637028456,
    -0.06671857833862305,
    -0.024568665772676468,
    0.018581461161375046,
    -0.011093935929238796,
    0.012368857860565186,
    -0.021765245124697685,
    -0.003719109809026122,
    -0.03609227016568184,
    0.025146255269646645,
    0.00161478400696069,
    -0.028809014707803726,
    -0.019919777289032936,
    -0.013960749842226505,
    -0.01071357261389494,
    0.02421647682785988,
    0.00469819363206625,
    0.014552426524460316,
    0.014108669012784958,
    0.019750727340579033,
    0.0017169186612591147,
    -0.0021553931292146444,
    -0.014010055921971798,
    0.027400260791182518,
    0.00886810477823019,
    -0.052433814853429794,
    -0.008072159253060818,
    -0.014932789839804173,
    0.03843080252408981,
    0.002349096816033125,
    -0.03983955457806587,
    0.0028580091893672943,
    7.759151776554063e-05,
    -0.005980159621685743,
    -0.007607270497828722,
    0.03358468785881996,
    0.021173568442463875,
    0.030992582440376282,
    0.001986342715099454,
    0.02096225507557392,
    -8.6286170699168e-05,
    -0.02386428788304329,
    -0.03059813193976879,
    0.018708249554038048,
    -0.005117298103868961,
    -0.011368642561137676,
    0.008459566161036491,
    0.020004304125905037,
    -0.007684751879423857,
    0.00028417204157449305,
    0.006092859897762537,
    0.019877515733242035,
    0.015130015090107918,
    -0.02421647682785988,
    0.00843139085918665,
    -0.01067835371941328,
    -0.015482204034924507,
    0.012530864216387272,
    -0.028442738577723503,
    -0.02535756677389145,
    0.00020415923791006207,
    0.031048933044075966,
    0.0029795141890645027,
    0.014890527352690697,
    0.01918722689151764,
    -0.020948167890310287,
    -0.0032700696028769016,
    -0.028132813051342964,
    -0.03806452825665474,
    0.004550274461507797,
    0.00046708990703336895,
    0.008896280080080032,
    -0.0234698373824358,
    0.034345418214797974,
    0.01734175905585289,
    0.01729949563741684,
    -0.02434326522052288,
    -0.01835606060922146,
    -0.016778256744146347,
    -0.02779471129179001,
    0.03412001579999924,
    0.029273902997374535,
    -0.011037585325539112,
    -0.029471129179000854,
    0.002386076608672738,
    0.04296698793768883,
    -0.0002350857830606401,
    -0.016228843480348587,
    -0.003940988797694445,
    -0.003645150223746896,
    0.013228197582066059,
    -0.008720185607671738,
    -0.019088612869381905,
    0.014003012329339981,
    0.0024248172994703054,
    0.01429180707782507,
    -0.00563149293884635,
    -0.03121798299252987,
    -0.007452307268977165,
    0.02193429507315159,
    0.015721691772341728,
    0.005043338518589735,
    -0.006733843125402927,
    0.006860630586743355,
    -0.020356491208076477,
    -0.016693731769919395,
    -0.004057210870087147,
    -0.040487583726644516,
    -0.00822007842361927,
    -0.028682226315140724,
    0.018074311316013336,
    -0.017764383926987648,
    -0.023934725672006607,
    -0.04482654482126236,
    0.01758124679327011,
    -0.0023473359178751707,
    0.007593182846903801,
    0.015933005139231682,
    0.003557103220373392,
    0.006251344922930002,
    -0.008579310029745102,
    0.01266469620168209,
    -0.0062619103118777275,
    0.01855328679084778,
    -0.008917410857975483,
    0.01903226412832737,
    0.01863781176507473,
    0.006011856719851494,
    -0.02454048953950405,
    -0.011777181178331375,
    -0.011178460903465748,
    -0.013235241174697876,
    0.02028605341911316,
    -0.007635445334017277,
    -0.014453813433647156,
    -0.021793421357870102,
    -0.01710227131843567,
    -0.0055997963063418865,
    -0.017834821715950966,
    -0.017214970663189888,
    0.09218884259462357,
    0.004388268105685711,
    -0.0179334357380867,
    0.004789762664586306,
    0.00849478505551815,
    0.030090980231761932,
    0.017524896189570427,
    0.0008373280288651586,
    0.0030358643271028996,
    0.0009209727868437767,
    -0.009213249199092388,
    -0.031837835907936096,
    -0.0179756972938776,
    -0.03082353249192238,
    0.014404507353901863,
    0.00622316962108016,
    -0.025343479588627815,
    0.024991292506456375,
    -0.007931283675134182,
    0.004261480178683996,
    0.014622864313423634,
    0.02410377748310566,
    -0.006758496165275574,
    -0.03262673690915108,
    -0.03538789600133896,
    0.007839714176952839,
    0.014010055921971798,
    0.002586824120953679,
    -0.025512531399726868,
    -0.023652976378798485,
    0.015482204034924507,
    0.014200237579643726,
    -0.017637597396969795,
    -0.01067835371941328,
    0.01222798228263855,
    -0.0006986538064666092,
    -0.03220411017537117,
    -0.02320217341184616,
    0.006254866719245911,
    0.026132382452487946,
    -0.0017028311267495155,
    -0.009149855934083462,
    -0.027217121794819832,
    -0.02383611351251602,
    0.019553503021597862,
    0.019173137843608856,
    -0.008093290030956268,
    -0.006776105612516403,
    -0.054208844900131226
  ]
}
{
  "classifiers": [],
  "description": "bigquery schema generator from json or csv data\n# bigquery schema generator\n\n[![bigquery schema generator ci](https://github.com/bxparks/bigquery-schema-generator/actions/workflows/pythonpackage.yml/badge.svg)](https://github.com/bxparks/bigquery-schema-generator/actions/workflows/pythonpackage.yml)\n\nthis script generates the bigquery schema from the newline-delimited data\nrecords on the stdin. the records can be in json format or csv format. the\nbigquery data importer (`bq load`) uses only the\n[first 500 records](https://cloud.google.com/bigquery/docs/schema-detect)\nwhen the schema auto-detection feature is enabled. in contrast, this script uses\nall data records to generate the schema.\n\nusage:\n```\n$ generate-schema < file.data.json > file.schema.json\n$ generate-schema --input_format csv < file.data.csv > file.schema.json\n```\n\n**version**: 1.5.1 (2022-12-04)\n\n**changelog**: [changelog.md](changelog.md)\n\n## table of contents\n\n* [background](#background)\n* [installation](#installation)\n    * [ubuntu linux](#ubuntulinux)\n    * [macos](#macos)\n        * [macos 11 (big sur)](#macos11)\n        * [macos 10.14 (mojave)](#macos1014)\n* [usage](#usage)\n    * [command line](#commandline)\n    * [schema output](#schemaoutput)\n    * [command line flag options](#flagoptions)\n        * [help (`--help`)](#help)\n        * [input format (`--input_format`)](#inputformat)\n        * [keep nulls (`--keep_nulls`)](#keepnulls)\n        * [quoted values are strings(`--quoted_values_are_strings`)](#quotedvaluesarestrings)\n        * [infer mode (`--infer_mode`)](#infermode)\n        * [debugging interval (`--debugging_interval`)](#debugginginterval)\n        * [debugging map (`--debugging_map`)](#debuggingmap)\n        * [sanitize names (`--sanitize_names`)](#sanitizednames)\n        * [ignore invalid lines (`--ignore_invalid_lines`)](#ignoreinvalidlines)\n        * [existing schema path (`--existing_schema_path`)](#existingschemapath)\n        * [preserve input sort order\n          (`--preserve_input_sort_order`)](#preserveinputsortorder)\n    * [using as a library](#usingaslibrary)\n        * [`schemagenerator.run()`](#schemageneratorrun)\n        * [`schemagenerator.deduce_schema()` with file](#schemageneratordeduceschemafromfile)\n        * [`schemagenerator.deduce_schema()` with dict](#schemageneratordeduceschemafromdict)\n* [schema types](#schematypes)\n    * [supported types](#supportedtypes)\n    * [type inference](#typeinference)\n* [examples](#examples)\n* [benchmarks](#benchmarks)\n* [system requirements](#systemrequirements)\n* [license](#license)\n* [feedback and support](#feedback)\n* [authors](#authors)\n\n<a name=\"background\"></a>\n## background\n\ndata can be imported into [bigquery](https://cloud.google.com/bigquery/) using\nthe [bq](https://cloud.google.com/bigquery/bq-command-line-tool) command line\ntool. it accepts a number of data formats including csv or newline-delimited\njson. the data can be loaded into an existing table or a new table can be\ncreated during the loading process. the structure of the table is defined by\nits [schema](https://cloud.google.com/bigquery/docs/schemas). the table's\nschema can be defined manually or the schema can be\n[auto-detected](https://cloud.google.com/bigquery/docs/schema-detect#auto-detect).\n\nwhen the auto-detect feature is used, the bigquery data importer examines only\nthe [first 500 records](https://cloud.google.com/bigquery/docs/schema-detect)\nof the input data. in many cases, this is sufficient\nbecause the data records were dumped from another database and the exact schema\nof the source table was known. however, for data extracted from a service\n(e.g. using a rest api) the record fields could have been organically added\nat later dates. in this case, the first 100 records do not contain fields which\nare present in later records. the **bq load** auto-detection fails and the data\nfails to load.\n\nthe **bq load** tool does not support the ability to process the entire dataset\nto determine a more accurate schema. this script fills in that gap. it\nprocesses the entire dataset given in the stdin and outputs the bigquery schema\nin json format on the stdout. this schema file can be fed back into the **bq\nload** tool to create a table that is more compatible with the data fields in\nthe input dataset.\n\n<a name=\"installation\"></a>\n## installation\n\n**prerequisite**: you need have python 3.6 or higher.\n\ninstall from [pypi](https://pypi.python.org/pypi) repository using `pip3`. there\nare too many ways to install packages in python. the following are in order\nhighest to lowest recommendation:\n\n1) if you are using a virtual environment (such as\n[venv](https://docs.python.org/3/library/venv.html)), then use:\n```\n$ pip3 install bigquery_schema_generator\n```\n\n2) if you aren't using a virtual environment you can install into\nyour local python directory:\n\n```\n$ pip3 install --user bigquery_schema_generator\n```\n\n3) if you want to install the package for your entire system globally, use\n```\n$ sudo -h pip3 install bigquery_schema_generator\n```\nbut realize that you will be running code from pypi as `root` so this has\nsecurity implications.\n\nsometimes, your python environment gets into a complete mess and the `pip3`\ncommand won't work. try typing `python3 -m pip` instead.\n\na successful install should print out something like the following (the version\nnumber may be different):\n```\ncollecting bigquery-schema-generator\ninstalling collected packages: bigquery-schema-generator\nsuccessfully installed bigquery-schema-generator-1.1\n```\n\nthe shell script `generate-schema` will be installed somewhere in your system,\ndepending on how your python environment is configured. see below for\nsome notes for ubuntu linux and macos.\n\n<a name=\"ubuntulinux\"></a>\n### ubuntu linux (18.04, 20.04, 22.04)\n\nafter running `pip3 install bigquery_schema_generator`, the `generate-schema`\nscript may be installed in one the following locations:\n\n* `/usr/bin/generate-schema`\n* `/usr/local/bin/generate-schema`\n* `$home/.local/bin/generate-schema`\n* `$home/.virtualenvs/{your_virtual_env}/bin/generate-schema`\n\n<a name=\"macos\"></a>\n### macos\n\ni don't have any macs which are able to run the latest macos, and i don't use\nthem much for software development these days, but here are some notes if they\nhelp.\n\n<a name=\"macos11\"></a>\n#### macos 11 (big sur)\n\ni believe big sur comes preinstalled with python 3.8. if you install\n`bigquery_schema_generator` using:\n\n```\n$ pip3 install --user bigquery_schema_generator\n```\n\nthen the `generate-schema` wrapper script will be installed at:\n\n```\n/user/{your-login}/library/python/3.8/bin/generate-schema\n```\n\n<a name=\"macos1014\"></a>\n#### macos 10.14 (mojave)\n\nthis macos version comes with python 2.7 only. to install python 3, you can\ninstall using:\n\n1)) downloading the [macos installer directly from\n   python.org](https://www.python.org/downloads/macos/).\n\nthe python3 binary will be located at `/usr/local/bin/python3`, and the\n`/usr/local/bin/pip3` is a symlink to\n`/library/frameworks/python.framework/versions/3.6/bin/pip3`.\n\nso running\n\n```\n$ pip3 install --user bigquery_schema_generator\n```\n\nwill install `generate-schema` at\n`/library/frameworks/python.framework/versions/3.6/bin/generate-schema`.\n\nthe python installer updates `$home/.bash_profile` to add\n`/library/frameworks/python.framework/versions/3.6/bin` to the `$path`\nenvironment variable. so you should be able to run the `generate-schema`\ncommand without typing in the full path.\n\n2)) using [homebrew](https://docs.brew.sh/homebrew-and-python).\n\nin this environment, the `generate-schema` script will probably be installed in\n`/usr/local/bin` but i'm not completely certain.\n\n<a name=\"usage\"></a>\n## usage\n\n<a name=\"commandline\"></a>\n### command line\n\nthe `generate_schema.py` script accepts a newline-delimited json or\ncsv data file on the stdin. json input format has been tested extensively.\ncsv input format was added more recently (in v0.4) using the `--input_format\ncsv` flag. the support is not as robust as json file. for example, csv format\nsupports only the comma-separator, and does not support the pipe (`|`) or tab\n(`\\t`) character.\n\nunlike `bq load`, the `generate_schema.py` script reads every record in the\ninput data file to deduce the table's schema. it prints the json formatted\nschema file on the stdout.\n\nthere are at least 3 ways to run this script:\n\n**1) shell script**\n\nif you installed using `pip3`, then it should have installed a small helper\nscript named `generate-schema` in your local `./bin` directory of your current\nenvironment (depending on whether you are using a virtual environment).\n\n```\n$ generate-schema < file.data.json > file.schema.json\n```\n\n**2) python module**\n\nyou can invoke the module directly using:\n```\n$ python3 -m bigquery_schema_generator.generate_schema < file.data.json > file.schema.json\n```\nthis is essentially what the `generate-schema` command does.\n\n**3) python script**\n\nif you retrieved this code from its\n[github repository](https://github.com/bxparks/bigquery-schema-generator),\nthen you can invoke the python script directly:\n```\n$ ./generate_schema.py < file.data.json > file.schema.json\n```\n\n<a name=\"schemaoutput\"></a>\n### using the schema output\n\nthe resulting schema file can be given to the **bq load** command using the\n`--schema` flag:\n```\n\n$ bq load --source_format newline_delimited_json \\\n    --ignore_unknown_values \\\n    --schema file.schema.json \\\n    mydataset.mytable \\\n    file.data.json\n```\nwhere `mydataset.mytable` is the target table in bigquery.\n\nfor debugging purposes, here is the equivalent `bq load` command using schema\nautodetection:\n\n```\n$ bq load --source_format newline_delimited_json \\\n    --autodetect \\\n    mydataset.mytable \\\n    file.data.json\n```\n\nif the input file is in csv format, the first line will be the header line which\nenumerates the names of the columns. but this header line must be skipped when\nimporting the file into the bigquery table. we accomplish this using\n`--skip_leading_rows` flag:\n```\n$ bq load --source_format csv \\\n    --schema file.schema.json \\\n    --skip_leading_rows 1 \\\n    mydataset.mytable \\\n    file.data.csv\n```\n\nhere is the equivalent `bq load` command for csv files using autodetection:\n```\n$ bq load --source_format csv \\\n    --autodetect \\\n    mydataset.mytable \\\n    file.data.csv\n```\n\na useful flag for `bq load`, particularly for json files,  is\n`--ignore_unknown_values`, which causes `bq load` to ignore fields in the input\ndata which are not defined in the schema. when `generate_schema.py` detects an\ninconsistency in the definition of a particular field in the input data, it\nremoves the field from the schema definition. without the\n`--ignore_unknown_values`, the `bq load` fails when the inconsistent data record\nis read.\n\nanother useful flag during development and debugging is `--replace` which\nreplaces any existing bigquery table.\n\nafter the bigquery table is loaded, the schema can be retrieved using:\n\n```\n$ bq show --schema mydataset.mytable | python3 -m json.tool\n```\n\n(the `python -m json.tool` command will pretty-print the json formatted schema\nfile. an alternative is the [jq command](https://stedolan.github.io/jq/).)\nthe resulting schema file should be identical to `file.schema.json`.\n\n<a name=\"flagoptions\"></a>\n### command line flag options\n\nthe `generate_schema.py` script supports a handful of command line flags\nas shown by the `--help` flag below.\n\n<a name=\"help\"></a>\n#### help (`--help`)\n\nprint the built-in help strings:\n\n```bash\n$ generate-schema --help\nusage: generate-schema [-h] [--input_format input_format] [--keep_nulls]\n                       [--quoted_values_are_strings] [--infer_mode]\n                       [--debugging_interval debugging_interval]\n                       [--debugging_map] [--sanitize_names]\n                       [--ignore_invalid_lines]\n                       [--existing_schema_path existing_schema_path]\n                       [--preserve_input_sort_order]\n\ngenerate bigquery schema from json or csv file.\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --input_format input_format\n                        specify an alternative input format ('csv', 'json',\n                        'dict')\n  --keep_nulls          print the schema for null values, empty arrays or\n                        empty records\n  --quoted_values_are_strings\n                        quoted values should be interpreted as strings\n  --infer_mode          determine if mode can be 'nullable' or 'required'\n  --debugging_interval debugging_interval\n                        number of lines between heartbeat debugging messages\n  --debugging_map       print the metadata schema_map instead of the schema\n  --sanitize_names      forces schema name to comply with bigquery naming\n                        standard\n  --ignore_invalid_lines\n                        ignore lines that cannot be parsed instead of stopping\n  --existing_schema_path existing_schema_path\n                        file that contains the existing bigquery schema for a\n                        table. this can be fetched with: `bq show --schema\n                        <project_id>:<dataset>:<table_name>\n  --preserve_input_sort_order\n                        preserve the original ordering of columns from input\n                        instead of sorting alphabetically. this only impacts\n                        `input_format` of json or dict\n\n```\n\n<a name=\"inputformat\"></a>\n#### input format (`--input_format`)\n\nspecifies the format of the input file as a string. it must be one of `json`\n(default), `csv`, or `dict`:\n\n* `json`\n    * a \"file-like\" object containing newline-delimited json\n* `csv`\n    * a \"file-like\" object containing newline-delimited csv\n* `dict`\n    * a `list` of python `dict` objects corresponding to list of\n      newline-delimited json, in other words `list[dict[str, any]]`\n    * applies only if `schemagenerator` is used as a library through the\n      `run()` or `deduce_schema()` method\n    * useful if the input data (usually json) has already been read into memory\n      and parsed from newline-delimited json into native python dict objects.\n\nif `csv` file is specified, the `--keep_nulls` flag is automatically activated.\nthis is required because csv columns are defined positionally, so the schema\nfile must contain all the columns specified by the csv file, in the same\norder, even if the column contains an empty value for every record.\n\nsee [issue #26](https://github.com/bxparks/bigquery-schema-generator/issues/26)\nfor implementation details.\n\n<a name=\"keepnulls\"></a>\n#### keep nulls (`--keep_nulls`)\n\nnormally when the input data file contains a field which has a null, empty\narray or empty record as its value, the field is suppressed in the schema file.\nthis flag enables this field to be included in the schema file.\n\nin other words, using a data file containing just nulls and empty values:\n```bash\n$ generate_schema\n{ \"s\": null, \"a\": [], \"m\": {} }\n^d\ninfo:root:processed 1 lines\n[]\n```\n\nwith the `keep_nulls` flag, we get:\n```bash\n$ generate-schema --keep_nulls\n{ \"s\": null, \"a\": [], \"m\": {} }\n^d\ninfo:root:processed 1 lines\n[\n  {\n    \"mode\": \"repeated\",\n    \"type\": \"string\",\n    \"name\": \"a\"\n  },\n  {\n    \"mode\": \"nullable\",\n    \"fields\": [\n      {\n        \"mode\": \"nullable\",\n        \"type\": \"string\",\n        \"name\": \"__unknown__\"\n      }\n    ],\n    \"type\": \"record\",\n    \"name\": \"d\"\n  },\n  {\n    \"mode\": \"nullable\",\n    \"type\": \"string\",\n    \"name\": \"s\"\n  }\n]\n```\n\n<a name=\"quotedvaluesarestrings\"></a>\n#### quoted values are strings (`--quoted_values_are_strings`)\n\nby default, quoted values are inspected to determine if they can be interpreted\nas `date`, `time`, `timestamp`, `boolean`, `integer` or `float`. this is\nconsistent with the algorithm used by `bq load`. however, for the `boolean`,\n`integer`, or `float` types, it is sometimes more useful to interpret those as\nnormal strings instead. this flag disables type inference for `boolean`,\n`integer` and `float` types inside quoted strings.\n\n```bash\n$ generate-schema\n{ \"name\": \"1\" }\n^d\n[\n  {\n    \"mode\": \"nullable\",\n    \"name\": \"name\",\n    \"type\": \"integer\"\n  }\n]\n\n$ generate-schema --quoted_values_are_strings\n{ \"name\": \"1\" }\n^d\n[\n  {\n    \"mode\": \"nullable\",\n    \"name\": \"name\",\n    \"type\": \"string\"\n  }\n]\n```\n\n<a name=\"infermode\"></a>\n#### infer mode (`--infer_mode`)\n\nset the schema `mode` of a field to `required` instead of the default\n`nullable` if the field contains a non-null or non-empty value for every data\nrecord in the input file. this option is available only for csv\n(`--input_format csv`) files. it is theoretically possible to implement this\nfeature for json files, but too difficult to implement in practice because\nfields are often completely missing from a given json record (instead of\nexplicitly being defined to be `null`).\n\nin addition to the above, this option, when used in conjunction with\n`--existing_schema_map`, will allow fields to be relaxed from required to\nnullable if they were required in the existing schema and null rows are found in\nthe new data we are inferring a schema from. in this case it can be used with\neither input_format, csv or json.\n\nsee [issue #28](https://github.com/bxparks/bigquery-schema-generator/issues/28)\nfor implementation details.\n\n<a name=\"debugginginterval\"></a>\n#### debugging interval (`--debugging_interval`)\n\nby default, the `generate_schema.py` script prints a short progress message\nevery 1000 lines of input data. this interval can be changed using the\n`--debugging_interval` flag.\n\n```bash\n$ generate-schema --debugging_interval 50 < file.data.json > file.schema.json\n```\n\n<a name=\"debuggingmap\"></a>\n#### debugging map (`--debugging_map`)\n\ninstead of printing out the bigquery schema, the `--debugging_map` prints out\nthe bookkeeping metadata map which is used internally to keep track of the\nvarious fields and their types that were inferred using the data file. this\nflag is intended to be used for debugging.\n\n```bash\n$ generate-schema --debugging_map < file.data.json > file.schema.json\n```\n\n<a name=\"sanitizednames\"></a>\n#### sanitize names (`--sanitize_names`)\n\nbigquery column names are [restricted to certain characters and\nlength](https://cloud.google.com/bigquery/docs/schemas#column_names):\n* it must contain only letters (a-z, a-z), numbers (0-9), or underscores\n* it must start with a letter or underscore\n* the maximum length is 128 characters\n* column names are case-insensitive\n\nfor csv files, the `bq load` command seems to automatically convert invalid\ncolumn names into valid column names. this flag attempts to perform some of the\nsame transformations, to avoid having to scan through the input data twice to\ngenerate the schema file. the transformations are:\n\n* any character outside of ascii letters, numbers and underscore\n  (`[a-za-z0-9_]`) are converted to an underscore. for example `go&2#there!` is\n  converted to `go_2_there_`;\n* names longer than 128 characters are truncated to 128.\n\nmy recollection is that the `bq load` command does *not* normalize the json key\nnames. instead it prints an error message. so the `--sanitize_names` flag is\nuseful mostly for csv files. for json files, you'll have to do a second pass\nthrough the data files to cleanup the column names anyway. see\n[issue #14](https://github.com/bxparks/bigquery-schema-generator/issues/14) and\n[issue #33](https://github.com/bxparks/bigquery-schema-generator/issues/33).\n\n<a name=\"ignoreinvalidlines\"></a>\n#### ignore invalid lines (`--ignore_invalid_lines`)\n\nby default, if an error is encountered on a particular line, processing stops\nimmediately with an exception. this flag causes invalid lines to be ignored and\nprocessing continues. a list of all errors and their line numbers will be\nprinted on the stderr after processing the entire file.\n\nthis flag is currently most useful for json files, to ignore lines which do not\nparse correctly as a json object.\n\nthis flag is probably not useful for csv files. csv files are processed by the\n`dictreader` class which performs its own line processing internally, including\nextracting the column names from the first line of the file. if the `dictreader`\ndoes throw an exception on a given line, we would not be able to catch it and\ncontinue processing. fortunately, csv files are fairly robust, and the schema\ndeduction logic will handle any missing or extra columns gracefully.\n\nfixes\n[issue #49](https://github.com/bxparks/bigquery-schema-generator/issues/49).\n\n<a name=\"existingschemapath\"></a>\n#### existing schema path (`--existing_schema_path`)\n\nthere are cases where we would like to start from an existing bigquery table\nschema rather than starting from scratch with a new batch of data we would like\nto load. in this case we can specify the path to a local file on disk that is\nour existing bigquery table schema. this can be generated via the following `bq\nshow --schema` command:\n```bash\nbq show --schema <project_id>:<dataset_name>.<table_name> > existing_table_schema.json\n```\n\nwe can then run generate-schema with the additional option\n```bash\n--existing_schema_path existing_table_schema.json\n```\n\nthere is some subtle interaction between the `--existing_schema_path` and fields\nwhich are marked with a `mode` of `required` in the existing schema. if the new\ndata contains a `null` value (either in a csv or json data file), it is not\nclear if the schema should be changed to `mode=nullable` or whether the new data\nshould be ignored and the schema should remain `mode=required`. the choice is\ndetermined by overloading the `--infer_mode` flag:\n\n* if `--infer_mode` is given, the new schema will be allowed to revert back to\n  `nullable`.\n* if `--infer_mode` is not given, the offending new record will be ignored\n  and the new schema will remain `required`.\n\nsee discussion in\n[pr #57](https://github.com/bxparks/bigquery-schema-generator/pull/57) for\nmore details.\n\n<a name=\"preserveinputsortorder\"></a>\n#### preserve input sort order (`--preserve_input_sort_order`)\n\nby default, the order of columns in the bq schema file is sorted\nlexicographically, which matched the original behavior of `bq load\n--autodetect`. if the `--preserve_input_sort_order` flag is given, the columns\nin the resulting schema file is not sorted, but preserves the order of\nappearance in the input json data. for example, the following json data with\nthe `--preserve_input_sort_order` flag will produce:\n\n```bash\n$ generate-schema --preserve_input_sort_order\n{ \"s\": \"string\", \"i\": 3, \"x\": 3.2, \"b\": true }\n^d\n[\n  {\n    \"mode\": \"nullable\",\n    \"name\": \"s\",\n    \"type\": \"string\"\n  },\n  {\n    \"mode\": \"nullable\",\n    \"name\": \"i\",\n    \"type\": \"integer\"\n  },\n  {\n    \"mode\": \"nullable\",\n    \"name\": \"x\",\n    \"type\": \"float\"\n  },\n  {\n    \"mode\": \"nullable\",\n    \"name\": \"b\",\n    \"type\": \"boolean\"\n  }\n]\n```\n\nit is possible that each json record line contains only a partial subset of the\ntotal possible columns in the data set. the order of the columns in the bq\nschema will then be the order that each column was first *seen* by the\nscript:\n\n```bash\n$ generate-schema --preserve_input_sort_order\n{ \"s\": \"string\", \"i\": 3 }\n{ \"x\": 3.2, \"s\": \"string\", \"i\": 3 }\n{ \"b\": true, \"x\": 3.2, \"s\": \"string\", \"i\": 3 }\n^d\n[\n  {\n    \"mode\": \"nullable\",\n    \"name\": \"s\",\n    \"type\": \"string\"\n  },\n  {\n    \"mode\": \"nullable\",\n    \"name\": \"i\",\n    \"type\": \"integer\"\n  },\n  {\n    \"mode\": \"nullable\",\n    \"name\": \"x\",\n    \"type\": \"float\"\n  },\n  {\n    \"mode\": \"nullable\",\n    \"name\": \"b\",\n    \"type\": \"boolean\"\n  }\n]\n```\n\n**note**: in python 3.6 (the earliest version of python supported by this\nproject), the order of keys in a `dict` was the insertion-order, but this\nordering was an implementation detail, and not guaranteed. in python 3.7, that\nordering was made permanent. so the `--preserve_input_sort_order` flag\n**should** work in python 3.6 but is not guaranteed.\n\nsee discussion in\n[pr #75](https://github.com/bxparks/bigquery-schema-generator/pull/75) for\nmore details.\n\n<a name=\"usingaslibrary\"></a>\n### using as a library\n\nthe `schemagenerator` class can be used programmatically as a library from a\nlarger python application.\n\n<a name=\"schemageneratorrun\"></a>\n#### `schemagenerator.run()`\n\nthe `bigquery_schema_generator` module can be used as a library by an external\npython client code by creating an instance of `schemagenerator` and calling the\n`run(input, output)` method:\n\n```python\nfrom bigquery_schema_generator.generate_schema import schemagenerator\n\ngenerator = schemagenerator(\n    input_format=input_format,\n    infer_mode=infer_mode,\n    keep_nulls=keep_nulls,\n    quoted_values_are_strings=quoted_values_are_strings,\n    debugging_interval=debugging_interval,\n    debugging_map=debugging_map,\n    sanitize_names=sanitize_names,\n    ignore_invalid_lines=ignore_invalid_lines,\n    preserve_input_sort_order=preserve_input_sort_order,\n)\n\nfilename = \"...\"\n\nwith open(filename) as input_file:\n    generator.run(input_file=input_file, output_file=output_file)\n```\n\nthe `input_format` is one of `json`, `csv`, and `dict` as described in the\n[input format](#inputformat) section above. the `input_file` must match the\nformat given by this parameter.\n\nsee [generatorrun.py](examples/generatorrun.py) for an example.\n\n<a name=\"schemageneratordeduceschemafromfile\"></a>\n#### `schemagenerator.deduce_schema()` from file\n\nif you need to process the generated schema programmatically, use the\n`deduce_schema()` method and process the resulting `schema_map` and `error_log`\ndata structures like this:\n\n```python\nimport json\nimport logging\nimport sys\nfrom bigquery_schema_generator.generate_schema import schemagenerator\n\nfilename = \"jsonfile.json\"\n\ngenerator = schemagenerator(\n    input_format='json',\n    quoted_values_are_strings=true,\n)\n\nwith open(filename) as file:\n    schema_map, errors = generator.deduce_schema(file)\n\nschema_map, error_logs = generator.deduce_schema(input_data=input_data)\n\nfor error in error_logs:\n    logging.info(\"problem on line %s: %s\", error['line_number'], error['msg'])\n\nschema = generator.flatten_schema(schema_map)\njson.dump(schema, sys.stdout, indent=2)\nprint()\n```\n\nsee [csvreader.py](examples/csvreader.py) and\n[jsoneader.py](examples/jsoneader.py) for 2 examples.\n\nthe `deduce_schema()` also supports starting from an existing `schema_map`\ninstead of starting from scratch. this is the internal version of the\n`--existing_schema_path` functionality.\n\n```python\nschema_map1, error_logs = generator.deduce_schema(input_data=data1)\nschema_map2, error_logs = generator.deduce_schema(\n    input_data=data1, schema_map=schema_map1\n)\n```\n\nthe `input_data` must match the `input_format` given in the constructor. the\nformat is described in the [input format](#inputformat) section above.\n\n<a name=\"schemageneratordeduceschemafromdict\"></a>\n#### `schemagenerator.deduce_schema()` from dict\n\nif the json data set has already been read into memory into a python `dict`\nobject, the `schemagenerator` can process that too like this:\n\n```python\nimport json\nimport logging\nimport sys\nfrom bigquery_schema_generator.generate_schema import schemagenerator\n\ngenerator = schemagenerator(input_format='dict')\ninput_data = [\n    {\n        's': 'string',\n        'b': true,\n    },\n    {\n        'd': '2021-08-18',\n        'x': 3.1\n    },\n]\nschema_map, error_logs = generator.deduce_schema(input_data)\nschema = generator.flatten_schema(schema_map)\njson.dump(schema, sys.stdout, indent=2)\nprint()\n```\n\nsee [dictreader.py](examples/dictreader.py) for an example.\n\n<a name=\"schematypes\"></a>\n## schema types\n\n<a name=\"supportedtypes\"></a>\n### supported types\n\nthe `bq show --schema` command produces a json schema file that uses the\nolder [legacy sql date types](https://cloud.google.com/bigquery/data-types).\nfor compatibility, **generate-schema** script will also generate a schema file\nusing the legacy data types.\n\nthe supported types are:\n\n* `boolean`\n* `integer`\n* `float`\n* `string`\n* `timestamp`\n* `date`\n* `time`\n* `record`\n\nthe `generate-schema` script supports both `nullable` and `repeated` modes of\nall of the above types.\n\nthe supported format of `timestamp` is as close as practical to the\n[bq load format](https://cloud.google.com/bigquery/docs/reference/standard-sql/data-types#timestamp-type):\n```\nyyyy-[m]m-[d]d[( |t)[h]h:[m]m:[s]s[.dddddd]][time zone]\n```\nwhich appears to be an extension of the\n[iso 8601 format](https://en.wikipedia.org/wiki/iso_8601).\nthe difference from `bq load` is that the `[time zone]` component can be only\n* `z`\n* `utc` (same as `z`)\n* `(+|-)h[h][:m[m]]`\n\nnote that bigquery supports up to 6 decimal places after the integer 'second'\ncomponent. `generate-schema` follows the same restriction for compatibility. if\nyour input file contains more than 6 decimal places, you need to write a data\ncleansing filter to fix this.\n\nthe suffix `utc` is not standard iso 8601 nor\n[documented by google](https://cloud.google.com/bigquery/docs/reference/standard-sql/data-types#time-zones)\nbut the `utc` suffix is used by `bq extract` and the web interface. (see\n[issue 19](https://github.com/bxparks/bigquery-schema-generator/issues/19).)\n\ntimezone names from the [tz database](http://www.iana.org/time-zones) (e.g.\n\"america/los_angeles\") are _not_ supported by `generate-schema`.\n\nthe following types are _not_ supported at all:\n\n* `bytes`\n* `datetime` (unable to distinguish from `timestamp`)\n\n<a name=\"typeinference\"></a>\n### type inference rules\n\nthe `generate-schema` script attempts to emulate the various type conversion and\ncompatibility rules implemented by **bq load**:\n\n* `integer` can upgrade to `float`\n    * if a field in an early record is an `integer`, but a subsequent record\n      shows this field to have a `float` value, the type of the field will be\n      upgraded to a `float`\n    * the reverse does not happen, once a field is a `float`, it will remain a\n      `float`\n* conflicting `time`, `date`, `timestamp` types upgrades to `string`\n    * if a field is determined to have one type of \"time\" in one record, then\n      subsequently a different \"time\" type, then the field will be assigned a\n      `string` type\n* `nullable record` can upgrade to a `repeated record`\n    * a field may be defined as `record` (aka \"struct\") type with `{ ... }`\n    * if the field is subsequently read as an array with a `[{ ... }]`, the\n      field is upgraded to a `repeated record`\n* a primitive type (`float`, `integer`, `string`) cannot upgrade to a `repeated`\n  primitive type\n    * there's no technical reason why this cannot be allowed, but **bq load**\n      does not support it, so we follow its behavior\n* a `datetime` field is always inferred to be a `timestamp`\n    * the format of these two fields is identical (in the absence of timezone)\n    * we follow the same logic as **bq load** and always infer these as\n      `timestamp`\n* `boolean`, `integer`, and `float` can appear inside quoted strings\n    * in other words, `\"true\"` (or `\"true\"` or `\"false\"`, etc) is considered a\n      boolean type, `\"1\"` is considered an integer type, and `\"2.1\"` is\n      considered a float type. luigi mori (jtschichold@) added additional logic\n      to replicate the type conversion logic used by `bq load` for these\n      strings.\n    * this type inference inside quoted strings can be disabled using the\n      `--quoted_values_are_strings` flag\n    * (see [issue #22](https://github.com/bxparks/bigquery-schema-generator/issues/22) for more details.)\n* `integer` values overflowing a 64-bit signed integer upgrade to `float`\n    * integers greater than `2^63-1` (9223372036854775807)\n    * integers less than `-2^63` (-9223372036854775808)\n    * (see [issue #18](https://github.com/bxparks/bigquery-schema-generator/issues/18) for more details)\n\n<a name=\"examples\"></a>\n## examples\n\nhere is an example of a single json data record on the stdin (the `^d` below\nmeans typing control-d, which indicates \"end of file\" under linux and macos):\n\n```bash\n$ generate-schema\n{ \"s\": \"string\", \"b\": true, \"i\": 1, \"x\": 3.1, \"t\": \"2017-05-22t17:10:00-07:00\" }\n^d\ninfo:root:processed 1 lines\n[\n  {\n    \"mode\": \"nullable\",\n    \"name\": \"b\",\n    \"type\": \"boolean\"\n  },\n  {\n    \"mode\": \"nullable\",\n    \"name\": \"i\",\n    \"type\": \"integer\"\n  },\n  {\n    \"mode\": \"nullable\",\n    \"name\": \"s\",\n    \"type\": \"string\"\n  },\n  {\n    \"mode\": \"nullable\",\n    \"name\": \"t\",\n    \"type\": \"timestamp\"\n  },\n  {\n    \"mode\": \"nullable\",\n    \"name\": \"x\",\n    \"type\": \"float\"\n  }\n]\n```\n\nin most cases, the data file will be stored in a file:\n```bash\n$ cat > file.data.json\n{ \"a\": [1, 2] }\n{ \"i\": 3 }\n^d\n\n$ generate-schema < file.data.json > file.schema.json\ninfo:root:processed 2 lines\n\n$ cat file.schema.json\n[\n  {\n    \"mode\": \"repeated\",\n    \"name\": \"a\",\n    \"type\": \"integer\"\n  },\n  {\n    \"mode\": \"nullable\",\n    \"name\": \"i\",\n    \"type\": \"integer\"\n  }\n]\n```\n\nhere is the schema generated from a csv input file. the first line is the header\ncontaining the names of the columns, and the schema lists the columns in the\nsame order as the header:\n```bash\n$ generate-schema --input_format csv\ne,b,c,d,a\n1,x,true,,2.0\n2,x,,,4\n3,,,,\n^d\ninfo:root:processed 3 lines\n[\n  {\n    \"mode\": \"nullable\",\n    \"name\": \"e\",\n    \"type\": \"integer\"\n  },\n  {\n    \"mode\": \"nullable\",\n    \"name\": \"b\",\n    \"type\": \"string\"\n  },\n  {\n    \"mode\": \"nullable\",\n    \"name\": \"c\",\n    \"type\": \"boolean\"\n  },\n  {\n    \"mode\": \"nullable\",\n    \"name\": \"d\",\n    \"type\": \"string\"\n  },\n  {\n    \"mode\": \"nullable\",\n    \"name\": \"a\",\n    \"type\": \"float\"\n  }\n]\n```\n\nhere is an example of the schema generated with the `--infer_mode` flag:\n```bash\n$ generate-schema --input_format csv --infer_mode\nname,surname,age\njohn\nmichael,,\nmaria,smith,30\njoanna,anders,21\n^d\ninfo:root:processed 4 lines\n[\n  {\n    \"mode\": \"required\",\n    \"name\": \"name\",\n    \"type\": \"string\"\n  },\n  {\n    \"mode\": \"nullable\",\n    \"name\": \"surname\",\n    \"type\": \"string\"\n  },\n  {\n    \"mode\": \"nullable\",\n    \"name\": \"age\",\n    \"type\": \"integer\"\n  }\n]\n```\n\n<a name=\"benchmarks\"></a>\n## benchmarks\n\ni wrote the `bigquery_schema_generator/anonymize.py` script to create an\nanonymized data file `tests/testdata/anon1.data.json.gz`:\n```bash\n$ ./bigquery_schema_generator/anonymize.py < original.data.json \\\n    > anon1.data.json\n$ gzip anon1.data.json\n```\nthis data file is 290mb (5.6mb compressed) with 103080 data records.\n\ngenerating the schema using\n```bash\n$ bigquery_schema_generator/generate_schema.py < anon1.data.json \\\n    > anon1.schema.json\n```\ntook 67s on a dell precision m4700 laptop with an intel core i7-3840qm cpu @\n2.80ghz, 32gb of ram, ubuntu linux 18.04, python 3.6.7.\n\n<a name=\"systemrequirements\"></a>\n## system requirements\n\nthis project was initially developed on ubuntu 17.04 using python 3.5.3, but it\nnow requires python 3.6 or higher, i think mostly due to the use of f-strings.\n\ni have tested it on:\n\n* ubuntu 22.04, python 3.10.6\n* ubuntu 20.04, python 3.8.5\n* ubuntu 18.04, python 3.7.7\n* ubuntu 18.04, python 3.6.7\n* ubuntu 17.10, python 3.6.3\n* macos 11.7.1 (big sur), python 3.8.9\n* macos 10.14.2 (mojave), python 3.6.4\n* macos 10.13.2 (high sierra), python 3.6.4\n\nthe github actions continuous integration pipeline validates on python 3.6, 3.7\nand 3.8.\n\nthe unit tests are invoked with `$ make tests` target, and depends only on the\nbuilt-in python `unittest` package.\n\nthe coding style check is invoked using `$ make flake8` and depends on the\n`flake8` package. it can be installed using `$ pip3 install --user flake8`.\n\n<a name=\"license\"></a>\n## license\n\napache license 2.0\n\n<a name=\"feedback\"></a>\n## feedback and support\n\nif you have any questions, comments, or feature requests for this library,\nplease use the [github\ndiscussions](https://github.com/bxparks/bigquery-schema-generator/discussions)\nfor this project. if you have bug reports, please file a ticket in [github\nissues](https://github.com/bxparks/bigquery-schema-generator/issues). feature\nrequests should go into discussions first because they often have alternative\nsolutions which are useful to remain visible, instead of disappearing from the\ndefault view of the issue tracker after the ticket is closed.\n\nplease refrain from emailing me directly unless the content is sensitive. the\nproblem with email is that i cannot reference the email conversation when other\npeople ask similar questions later.\n\n<a name=\"authors\"></a>\n## authors\n\n* created by brian t. park (brian@xparks.net).\n* type inference inside quoted strings by luigi mori (jtschichold@).\n* flag to disable type inference inside quoted strings by daniel ecer\n  (de-code@).\n* support for csv files and detection of `required` fields by sandor korotkevics\n  (korotkevics@).\n* better support for using `bigquery_schema_generator` as a library from an\n  external python code by stefanog_ita (stefanogita@).\n* sanitizing of column names to valid bigquery characters and length by jon\n  warghed (jonwarghed@).\n* bug fix in `--sanitize_names` by riccardo m. cefala (riccardomc@).\n* print full path of nested json elements in error messages, by austin brogle\n  (abroglesc@).\n* allow an existing schema file to be specified using `--existing_schema_path`,\n  by austin brogle (abroglesc@) and bozo dragojevic (bozzzzo@).\n* allow `schemagenerator.deduce_schema()` to accept a list of native python\n  `dict` objects, by zigfrid zvezdin (ziggerzz@).\n* make the column order in the bq schema file match the order of appearance in\n  the json data file using the `--preserve_input_sort_order` flag. by kevin\n  deggelman (kdeggelman@).\n\n\n",
  "docs_url": null,
  "keywords": "",
  "license": "apache 2.0",
  "name": "bigquery-schema-generator",
  "package_url": "https://pypi.org/project/bigquery-schema-generator/",
  "project_url": "https://pypi.org/project/bigquery-schema-generator/",
  "project_urls": {
    "Homepage": "https://github.com/bxparks/bigquery-schema-generator"
  },
  "release_url": "https://pypi.org/project/bigquery-schema-generator/1.5.1/",
  "requires_dist": [],
  "requires_python": ">=3.6",
  "summary": "bigquery schema generator from json or csv data",
  "version": "1.5.1",
  "releases": [],
  "developers": [
    "brian@xparks.net",
    "brian_t"
  ],
  "kwds": "bigquery_schema_generator bigquery schemaoutput generate_schema schemageneratorrun",
  "license_kwds": "apache 2.0",
  "libtype": "pypi",
  "id": "pypi_bigquery_schema_generator",
  "homepage": "https://github.com/bxparks/bigquery-schema-generator",
  "release_count": 23,
  "dependency_ids": [],
  "documentation_summary": "The HTML text describes the \"bigquery-schema-generator\" package version 1.6.1, released on January 13, 2024, available on PyPI for generating BigQuery schemas from JSON or CSV data. It requires Python >=3.6 and is licensed under Apache 2.0. The package, authored by Brian T. Park, processes entire datasets to generate a schema, contrasting with BigQuery's data importer that only uses the first 500 records for schema auto-detection. Installation instructions are provided for various platforms, including Ubuntu Linux and MacOS versions. The package supports several command-line options for customizing schema generation, such as handling null values, inferring data types, and preserving input sort order. It can also be used as a library within Python applications.",
  "embedding": [
    -0.01929004304111004,
    0.0011313142022117972,
    0.02193385735154152,
    -0.005500949453562498,
    -0.014303168281912804,
    0.015890855342149734,
    -0.00699771149083972,
    -0.025095241144299507,
    -0.0060185217298567295,
    -0.026857784017920494,
    0.02035316452383995,
    0.007253000512719154,
    -0.022661255672574043,
    0.018632587045431137,
    -0.0028623822145164013,
    -0.0010666176676750183,
    0.02078680507838726,
    -0.015513167716562748,
    0.028410499915480614,
    0.012393748387694359,
    0.034943096339702606,
    0.014995595440268517,
    -0.015275364741683006,
    -0.013023227453231812,
    0.004553233738988638,
    0.02193385735154152,
    0.007022191304713488,
    -0.010806061327457428,
    -0.002369290217757225,
    0.015065537765622139,
    0.03483118861913681,
    0.00339394249022007,
    -0.015555133111774921,
    -0.029151886701583862,
    -0.033879976719617844,
    -0.029151886701583862,
    0.01572299376130104,
    0.008358086459338665,
    0.013897503726184368,
    0.014233226887881756,
    0.000349710724549368,
    0.003598523326218128,
    0.006025515962392092,
    -0.0029375699814409018,
    -0.015918832272291183,
    0.001161039574071765,
    0.006752914283424616,
    -0.021178482100367546,
    -0.017359640449285507,
    -0.010882997885346413,
    0.045098695904016495,
    0.021360330283641815,
    -0.012932302430272102,
    -0.01445004716515541,
    -0.00110858294647187,
    0.003219087142497301,
    -0.006983723025768995,
    0.03125014901161194,
    -0.017037905752658844,
    0.004392366856336594,
    0.045098695904016495,
    -0.016142647713422775,
    -0.014205249957740307,
    0.0055429148487746716,
    0.006630515214055777,
    -0.010722130537033081,
    -0.027892926707863808,
    -0.009693981148302555,
    -0.0034201708622276783,
    -0.004535748157650232,
    0.03208945691585541,
    0.04378378391265869,
    -0.018842414021492004,
    0.010267507284879684,
    0.02488541416823864,
    -0.04812019690871239,
    -0.035530608147382736,
    0.01045635063201189,
    -0.030242983251810074,
    -0.003616008907556534,
    0.0022626284044235945,
    -0.0023045935668051243,
    0.0010963431559503078,
    0.018604610115289688,
    -0.010959934443235397,
    0.029711423441767693,
    -0.0336281843483448,
    0.024717554450035095,
    -0.01165236160159111,
    -0.01104386430233717,
    -0.005493955686688423,
    -0.013170105405151844,
    0.004290950484573841,
    0.04546239227056503,
    0.0030949399806559086,
    0.030187029391527176,
    -0.013589758425951004,
    0.034159742295742035,
    0.011281668208539486,
    -0.007116613443940878,
    -0.01867455244064331,
    0.01857663318514824,
    -0.02419998124241829,
    -0.008798722177743912,
    -0.025892581790685654,
    -0.0029095932841300964,
    -0.002433986635878682,
    -0.01780726946890354,
    0.008805716410279274,
    0.021919868886470795,
    -0.006749417167156935,
    0.04893152415752411,
    -0.011162766255438328,
    -0.03941939398646355,
    -0.0009800642728805542,
    -0.008833693340420723,
    0.021765995770692825,
    -0.01292530819773674,
    -0.009952766820788383,
    0.007518780417740345,
    0.011204731650650501,
    0.015093514695763588,
    0.020045418292284012,
    -0.017933165654540062,
    -0.005777221173048019,
    0.016506345942616463,
    -0.02419998124241829,
    -0.017205767333507538,
    0.01801709644496441,
    -0.01265952829271555,
    -0.004217511508613825,
    0.01814299263060093,
    0.00646265409886837,
    -0.005675805266946554,
    -0.01590484380722046,
    0.004972886294126511,
    -0.011337622068822384,
    0.013582764193415642,
    -0.028410499915480614,
    -0.021863915026187897,
    -0.006158405914902687,
    0.029459631070494652,
    -0.03194957226514816,
    -0.011918141506612301,
    -0.013093169778585434,
    0.01104386430233717,
    0.0006823730655014515,
    0.008442017249763012,
    0.0019985968247056007,
    -0.012079008854925632,
    0.04235696420073509,
    0.025095241144299507,
    0.005843666382133961,
    0.010358431376516819,
    0.01545721385627985,
    0.012470684014260769,
    -0.007819531485438347,
    0.020674897357821465,
    -0.009777911938726902,
    0.014422070235013962,
    0.0018010102212429047,
    0.008127276785671711,
    -0.013163112103939056,
    -0.011596407741308212,
    -0.00221716589294374,
    0.027515240013599396,
    0.026927726343274117,
    -0.04585406929254532,
    -0.01745755970478058,
    -0.018842414021492004,
    -0.003920257091522217,
    0.04442724958062172,
    -0.03997892886400223,
    -0.0008677197620272636,
    -0.02305293083190918,
    0.01319108810275793,
    0.023906225338578224,
    0.0029777868185192347,
    -0.01997547596693039,
    0.016254553571343422,
    0.021206459030508995,
    -0.003797858487814665,
    -0.003376457141712308,
    0.02243744023144245,
    -0.0070466711185872555,
    -0.022941023111343384,
    0.014100336469709873,
    -0.010806061327457428,
    0.028760209679603577,
    0.01140056923031807,
    0.026046454906463623,
    0.029571538791060448,
    -0.009610050357878208,
    -0.01674414984881878,
    -0.5989285707473755,
    -0.012323806062340736,
    -0.02799084596335888,
    -0.0477285198867321,
    0.008176236413419247,
    -0.006063983775675297,
    -0.0037908642552793026,
    0.01885640248656273,
    0.010882997885346413,
    0.035222865641117096,
    -0.013009238988161087,
    0.02587859332561493,
    0.002923581749200821,
    -0.01808703877031803,
    -0.02177998423576355,
    -0.013533804565668106,
    0.02712356299161911,
    -0.019443916156888008,
    -0.0049973661080002785,
    0.02168206498026848,
    -0.018716517835855484,
    0.03880390152335167,
    -0.021738018840551376,
    0.011904153041541576,
    0.008546929806470871,
    0.010778084397315979,
    0.008029358461499214,
    -0.004196528811007738,
    0.013589758425951004,
    -0.003591529093682766,
    -0.02643813006579876,
    0.03152991831302643,
    -0.007413867395371199,
    -0.030746566131711006,
    0.046189792454242706,
    0.017135825008153915,
    -0.01349883433431387,
    0.03958725556731224,
    -0.009700975380837917,
    0.06278006732463837,
    -0.01982160471379757,
    -0.014981606975197792,
    0.008861669339239597,
    0.026368187740445137,
    0.004067135509103537,
    0.025095241144299507,
    0.0017826503608375788,
    0.012051031924784184,
    -0.011939124204218388,
    -0.014338139444589615,
    0.01048432756215334,
    -0.014673861674964428,
    0.03183766454458237,
    -0.006424185819923878,
    0.013149123638868332,
    0.0011811479926109314,
    0.04333615303039551,
    -0.023108884692192078,
    0.011876176111400127,
    -0.003801355604082346,
    -0.005994041915982962,
    0.03206147998571396,
    0.011694326996803284,
    -0.014002417214214802,
    0.008693808689713478,
    -0.006665486376732588,
    0.00020403435337357223,
    -0.020171314477920532,
    9.447653428651392e-05,
    -0.02976737730205059,
    0.008665831759572029,
    -0.01207201462239027,
    0.007232017815113068,
    -0.008707797154784203,
    0.006731931585818529,
    0.01905224099755287,
    0.01864657551050186,
    0.007854502648115158,
    0.01110681239515543,
    0.026200328022241592,
    0.02165408805012703,
    -0.004053147509694099,
    0.0009713215404190123,
    -0.038020551204681396,
    0.026242293417453766,
    -0.01969570852816105,
    -0.023108884692192078,
    -0.013806579634547234,
    0.0006439048447646201,
    -0.005046325735747814,
    0.025025298818945885,
    0.016016751527786255,
    0.01882842555642128,
    -0.048763662576675415,
    -0.013365943916141987,
    0.022353509441018105,
    0.019891545176506042,
    0.01347085740417242,
    -0.012316811829805374,
    -0.023290734738111496,
    -0.006015024613589048,
    -0.02050703763961792,
    0.00029594270745292306,
    0.0031876133289188147,
    0.01618461310863495,
    0.014142301864922047,
    -0.010358431376516819,
    0.012435713782906532,
    -0.001912917708978057,
    -0.007728606928139925,
    -0.0032697953283786774,
    -0.022325532510876656,
    -0.032984714955091476,
    -0.004532251041382551,
    0.003703436581417918,
    -0.029319746419787407,
    -0.002159463707357645,
    -0.016939988359808922,
    0.004976383410394192,
    0.0035478153731673956,
    -0.005770226940512657,
    0.009589067660272121,
    0.0009092479012906551,
    -0.020800793543457985,
    0.018184958025813103,
    0.013743631541728973,
    0.03734910488128662,
    -0.019401950761675835,
    -0.024843450635671616,
    0.0025423970073461533,
    -0.009533114731311798,
    0.01839478313922882,
    0.03508298099040985,
    -0.011134789325296879,
    0.02075882814824581,
    0.012155944481492043,
    0.05424712598323822,
    0.00470710638910532,
    -0.01428917981684208,
    -0.01590484380722046,
    0.011603401973843575,
    -0.0066270180977880955,
    0.0028116742614656687,
    0.005633839871734381,
    0.0026368189137429,
    0.008288144133985043,
    -0.03530679643154144,
    0.01361074112355709,
    -0.00977091770619154,
    0.007025688420981169,
    -0.028732232749462128,
    -0.006298290099948645,
    -0.028508417308330536,
    0.007511786185204983,
    -0.011708315461874008,
    -0.03259303793311119,
    -0.009980743750929832,
    -0.040622398257255554,
    -0.00882669910788536,
    0.0009739443776197731,
    0.019038252532482147,
    0.019527846947312355,
    -0.013254036195576191,
    -0.015009583905339241,
    -0.03432760387659073,
    -0.005665313918143511,
    -0.01963975466787815,
    0.014177273027598858,
    2.0818715711357072e-05,
    -0.02134634181857109,
    0.010554269887506962,
    -0.018338831141591072,
    -0.006308781448751688,
    0.006364735309034586,
    0.022731196135282516,
    0.012526637874543667,
    -0.0023465589620172977,
    0.010463344864547253,
    -0.004339910112321377,
    -0.0009048765059560537,
    -0.009386235848069191,
    0.00345689058303833,
    -0.03810448199510574,
    -0.025864604860544205,
    0.037824712693691254,
    0.024535704404115677,
    0.01390449795871973,
    0.0038188411854207516,
    0.003595026209950447,
    -0.0009914299007505178,
    -0.016856057569384575,
    0.03967118263244629,
    -0.01745755970478058,
    0.006648000795394182,
    -0.005987047683447599,
    0.006934763863682747,
    -0.006193377077579498,
    0.003944736905395985,
    -0.02040911838412285,
    0.02615836262702942,
    0.00459170201793313,
    0.022255590185523033,
    -0.026745876297354698,
    -0.012225886806845665,
    0.002944564213976264,
    -0.008239184506237507,
    0.03169777989387512,
    -0.03088645078241825,
    -0.001968871336430311,
    0.020674897357821465,
    0.034131765365600586,
    -0.022325532510876656,
    -0.005504446569830179,
    -0.011218720115721226,
    0.016296518966555595,
    0.0007396381697617471,
    0.0036859510000795126,
    0.00628430163487792,
    -0.018226923421025276,
    0.023318711668252945,
    0.024130040779709816,
    0.0003145210794173181,
    0.01363871805369854,
    -0.007043174002319574,
    0.0049693891778588295,
    0.01129565667361021,
    -0.002624579006806016,
    0.021416284143924713,
    0.021416284143924713,
    -0.004116095136851072,
    0.025081252679228783,
    0.04865175485610962,
    -0.012617562897503376,
    -0.020213279873132706,
    0.014464035630226135,
    -0.00660953251644969,
    0.020898712798953056,
    -0.010246524587273598,
    0.018045073375105858,
    -0.019457904621958733,
    0.001506378990598023,
    -0.004158060532063246,
    0.03139003366231918,
    -0.00886866357177496,
    0.018324842676520348,
    0.005277134943753481,
    0.022101717069745064,
    0.0043294187635183334,
    0.006070978008210659,
    0.002190937753766775,
    -0.02442379668354988,
    0.03452344238758087,
    -0.019555823877453804,
    0.02053501456975937,
    0.03122217394411564,
    -0.010994905605912209,
    -0.008525947108864784,
    0.023402642458677292,
    0.02485743910074234,
    0.03564251586794853,
    -0.0050253430381417274,
    0.008134271018207073,
    0.009749935008585453,
    0.02417200431227684,
    0.033907949924468994,
    -0.012575597502291203,
    0.02134634181857109,
    -0.01836680807173252,
    0.00017824317910708487,
    -0.0039971936494112015,
    -0.00459170201793313,
    -0.029627492651343346,
    -0.026550037786364555,
    -0.038608063012361526,
    0.0031841162126511335,
    -0.015443225391209126,
    0.0010631205514073372,
    0.03147396445274353,
    0.0012126219226047397,
    0.013820568099617958,
    -0.005945082288235426,
    -0.009721958078444004,
    0.02068888582289219,
    0.0016689944313839078,
    0.0023308219388127327,
    0.012673516757786274,
    -0.02653604932129383,
    0.011386580765247345,
    -0.013149123638868332,
    0.027459286153316498,
    0.0047210948541760445,
    0.031921595335006714,
    0.013603746891021729,
    0.011505482718348503,
    -0.02519316039979458,
    0.02610240876674652,
    0.01314212940633297,
    -0.012016060762107372,
    -0.0019723684526979923,
    -0.0022189144510775805,
    0.02867627888917923,
    0.02982333116233349,
    0.004598695784807205,
    -0.0073509193025529385,
    0.05477868765592575,
    0.0008152631344273686,
    -0.002155966591089964,
    -0.01116976048797369,
    0.004088118206709623,
    -0.03575442358851433,
    0.00015671411529183388,
    0.006805370561778545,
    -0.012407736852765083,
    -0.0004069758579134941,
    -0.006550082005560398,
    -0.01796114258468151,
    0.007679647300392389,
    0.020115360617637634,
    0.02068888582289219,
    -0.008602883666753769,
    -0.015303341671824455,
    -0.035558585077524185,
    -0.011890164576470852,
    0.032173387706279755,
    0.014205249957740307,
    0.01301623322069645,
    -0.003348480211570859,
    0.018660563975572586,
    -0.032509107142686844,
    0.031026335433125496,
    -0.023570502176880836,
    -0.009805888868868351,
    0.005763232707977295,
    -0.01445004716515541,
    -0.03519488871097565,
    0.010806061327457428,
    0.02516518346965313,
    -0.000529811717569828,
    0.008567912504076958,
    0.006032510194927454,
    0.014149296097457409,
    0.014813746325671673,
    -0.0021332353353500366,
    -0.005486961454153061,
    -0.011624384671449661,
    -0.0019496373133733869,
    0.006280804518610239,
    0.007413867395371199,
    0.03883187845349312,
    0.009365253150463104,
    0.024773508310317993,
    0.015681028366088867,
    0.0015177445020526648,
    -0.01519143395125866,
    -0.019304031506180763,
    0.0006583304493688047,
    -0.001358626177534461,
    0.03824436292052269,
    -0.016226578503847122,
    0.04884759336709976,
    0.03007512167096138,
    0.018198946490883827,
    -0.02075882814824581,
    0.030550729483366013,
    0.03267696872353554,
    -0.003329246072098613,
    0.01058224681764841,
    0.006581556051969528,
    0.0015702011296525598,
    -0.051869094371795654,
    -0.006910284049808979,
    0.02131836488842964,
    0.00015376343799289316,
    -0.015261376276612282,
    0.005941585171967745,
    0.012456695549190044,
    -0.028004834428429604,
    -0.00863785482943058,
    0.015345306135714054,
    -0.010169588029384613,
    0.015946809202432632,
    -0.011239702813327312,
    -0.007022191304713488,
    -0.04859580099582672,
    -0.005521932151168585,
    -0.03547465428709984,
    -0.009798894636332989,
    -0.010498316027224064,
    -0.02376634068787098,
    0.021178482100367546,
    -0.007945427671074867,
    0.013988428749144077,
    -0.046497538685798645,
    0.0027522232849150896,
    -0.005563897546380758,
    -0.04328019917011261,
    -0.031054312363266945,
    -0.01461790781468153,
    0.024088075384497643,
    -0.00242699240334332,
    0.016394438222050667,
    0.00660953251644969,
    0.005042828619480133,
    -0.01486970018595457,
    -0.016114670783281326,
    -0.07195647805929184,
    0.011778256855905056,
    -0.026480095461010933,
    0.007819531485438347,
    -0.005567394662648439,
    -0.0006959243328310549,
    0.01051929872483015,
    0.02249339409172535,
    0.03673361614346504,
    -0.0070466711185872555,
    -0.006682971958070993,
    0.0026193333324044943,
    -0.01558311004191637,
    0.012344788759946823,
    0.011911147274076939,
    0.0006312278565019369,
    -0.002021328080445528,
    -0.002140229567885399,
    -0.04272066056728363,
    0.004560227971524,
    -0.02447975054383278,
    0.009826871566474438,
    -0.03846817836165428,
    0.02671789936721325,
    0.011456523090600967,
    -0.006438174284994602,
    -0.020521026104688644,
    -0.0003857746487483382,
    -0.0063822208903729916,
    0.008875657804310322,
    -0.03650980070233345,
    -0.0037174250464886427,
    0.015667039901018143,
    0.02597651258111,
    -0.007427855860441923,
    0.011036870069801807,
    0.020898712798953056,
    0.002051053335890174,
    -0.0026543044950813055,
    -0.006473145447671413,
    -0.015415248461067677,
    0.02712356299161911,
    0.028228649869561195,
    0.004039159044623375,
    0.03088645078241825,
    -0.004619678482413292,
    -0.016198601573705673,
    -0.021793972700834274,
    0.002381530124694109,
    0.03885985538363457,
    0.010806061327457428,
    -0.012526637874543667,
    -0.015345306135714054,
    -0.007004705723375082,
    -0.022996976971626282,
    0.010309471748769283,
    0.012498660944402218,
    -0.014715827070176601,
    -0.014492012560367584,
    -0.01640842668712139,
    -0.0009127450175583363,
    -0.0022154173348098993,
    0.0024567178916186094,
    -0.018884379416704178,
    -0.01873050630092621,
    -0.020171314477920532,
    -0.007127104327082634,
    0.014366116374731064,
    0.014813746325671673,
    0.010176582261919975,
    0.014254208654165268,
    0.014659873209893703,
    -0.01363871805369854,
    -0.014436058700084686,
    0.008917623199522495,
    0.0062353420071303844,
    0.01230282336473465,
    0.009505137801170349,
    0.041153956204652786,
    0.031893618404865265,
    0.003671962535008788,
    -0.0031334080267697573,
    0.015834901481866837,
    -0.009959761053323746,
    -0.011897158809006214,
    -0.004784042481333017,
    -0.000653084774967283,
    -0.0021612122654914856,
    -0.006675977725535631,
    -0.008707797154784203,
    0.012876348569989204,
    0.003182367654517293,
    -0.018772471696138382,
    -0.01208600215613842,
    0.009127450175583363,
    0.017821257933974266,
    0.0014740306651219726,
    -0.01870252937078476,
    -0.02898402512073517,
    -0.009756929241120815,
    0.010106639936566353,
    0.0021454752422869205,
    0.022143682464957237,
    -0.027892926707863808,
    -0.02351454831659794,
    0.034663327038288116,
    -0.01659027673304081,
    0.019150158390402794,
    0.016548311337828636,
    0.01084103249013424,
    -0.006203868426382542,
    -0.004647655412554741,
    0.00042162000318057835,
    0.02519316039979458,
    0.0033152576070278883,
    0.013100164011120796,
    -0.0196677315980196,
    -0.03404783457517624,
    0.016100682318210602,
    0.00870080292224884,
    0.021108539775013924,
    0.013156117871403694,
    0.0016742401057854295,
    0.0042734649032354355,
    0.03913962468504906,
    0.008050341159105301,
    0.0026140876580029726,
    0.02463362365961075,
    -0.03194957226514816,
    -0.0351669117808342,
    -0.04017476737499237,
    -0.027011657133698463,
    -0.027039634063839912,
    -0.011519471183419228,
    0.017919177189469337,
    0.028788186609745026,
    0.012218892574310303,
    -0.015806924551725388,
    -0.0014346882235258818,
    0.01705189421772957,
    -0.0009914299007505178,
    0.05108574405312538,
    0.014079353772103786,
    0.03194957226514816,
    0.02643813006579876,
    0.0101905707269907,
    -0.0025756193790584803,
    -0.020059406757354736,
    0.010309471748769283,
    -0.0001364964700769633,
    0.017471548169851303,
    0.008358086459338665,
    0.004451817367225885,
    -0.028018822893500328,
    0.03681754320859909,
    -0.009176409803330898,
    -0.01770935021340847,
    -0.017359640449285507,
    0.01755547896027565,
    0.0019356488483026624,
    0.004500776994973421,
    -0.019471893087029457,
    -0.005714273080229759,
    0.0008331857970915735,
    0.015261376276612282,
    0.011421551927924156,
    -0.004214014392346144,
    0.025906570255756378,
    -0.009721958078444004,
    -0.009386235848069191,
    0.01905224099755287,
    0.006336758378893137,
    -0.00464415829628706,
    0.012267852202057838,
    -0.02687177248299122,
    0.0022556341718882322,
    -0.028410499915480614,
    -0.017009928822517395,
    0.014701838605105877,
    0.015093514695763588,
    0.034663327038288116,
    0.002516168635338545,
    -0.012680510990321636,
    0.028424488380551338,
    0.009868836961686611,
    -0.005357568152248859,
    0.004798030946403742,
    -0.00103514373768121,
    0.03631396219134331,
    -0.025277091190218925,
    -0.0020370648708194494,
    -0.006427682936191559,
    0.006536093540489674,
    -0.00274173216894269,
    -0.003909765742719173,
    -0.010792072862386703,
    -0.024927379563450813,
    -0.027347378432750702,
    -0.0038678005803376436,
    0.020618943497538567,
    -0.03793662041425705,
    -0.015499179251492023,
    -0.019066229462623596,
    0.006088463589549065,
    0.00174942787270993,
    -0.02979535423219204,
    0.016114670783281326,
    0.02643813006579876,
    -0.018870390951633453,
    -0.005934590939432383,
    -0.011750279925763607,
    -0.012946290895342827,
    0.008365080691874027,
    -0.007088636513799429,
    -0.0027382350526750088,
    0.0037139279302209616,
    0.03060668334364891,
    -0.018758483231067657,
    5.966939352219924e-05,
    0.0010229038307443261,
    -0.009113461710512638,
    -0.025402987375855446,
    0.0027032638899981976,
    -0.006724937353283167,
    0.007854502648115158,
    0.015429236926138401,
    -0.0021542180329561234,
    -0.022661255672574043,
    -0.006319272797554731,
    0.003388696815818548,
    0.02435385435819626,
    -0.0030984370969235897,
    -0.03729315102100372,
    -0.0015107502695173025,
    0.021178482100367546,
    0.029851308092474937,
    -0.013107158243656158,
    -0.02646610699594021,
    0.02594853565096855,
    -0.014813746325671673,
    -0.0016034236177802086,
    -3.589999323594384e-05,
    -0.0015011333161965013,
    0.017905188724398613,
    -0.0013970943400636315,
    0.006794879212975502,
    -0.005759735591709614,
    -0.042301010340452194,
    -0.01885640248656273,
    0.01207201462239027,
    0.007490803487598896,
    0.003434159327298403,
    0.0280607882887125,
    -0.003647482953965664,
    0.0026508073788136244,
    -0.02834055759012699,
    0.024717554450035095,
    0.010323460213840008,
    -0.02050703763961792,
    0.0043888697400689125,
    0.04025869816541672,
    0.03491511940956116,
    0.017415594309568405,
    -0.016856057569384575,
    -0.0009853099472820759,
    -0.03152991831302643,
    -0.019276054576039314,
    -0.03852413222193718,
    -0.02982333116233349,
    0.008686814457178116,
    0.024381831288337708,
    0.0203251875936985,
    -0.013442880474030972,
    -0.016632242128252983,
    -0.019429927691817284,
    -0.017625421285629272,
    -0.0052071926183998585,
    -0.00245846644975245,
    0.019891545176506042,
    0.014925654046237469,
    0.020269233733415604,
    0.01873050630092621,
    0.0017616677796468139,
    -0.02137431874871254,
    0.021556168794631958,
    -0.021276401355862617,
    0.00017332537390757352,
    -0.016240565106272697,
    0.019905533641576767,
    0.002944564213976264,
    -0.009917795658111572,
    -0.03206147998571396,
    -0.008029358461499214,
    0.009064502082765102,
    -0.0007929690764285624,
    0.004983377642929554,
    0.03323650732636452,
    0.008847680874168873,
    -0.009596061892807484,
    -0.013652706518769264,
    -0.013925480656325817,
    -0.006193377077579498,
    -0.0009258591453544796,
    0.016925999894738197,
    -0.01910819485783577,
    -0.016198601573705673,
    -0.0030057637486606836,
    0.004116095136851072,
    0.007616699673235416,
    -0.016366461291909218,
    -0.012624557130038738,
    -0.041769448667764664,
    -0.0012222389923408628,
    -0.010309471748769283,
    -0.004004187881946564,
    -0.006588549818843603,
    0.008959588594734669,
    0.014079353772103786,
    0.018688540905714035,
    0.017443571239709854,
    0.023976167663931847,
    -0.00870080292224884,
    -0.010729124769568443,
    -0.020870735868811607,
    0.0365937314927578,
    -0.023416630923748016,
    -0.007392884697765112,
    0.004833002109080553,
    -0.022563336417078972,
    -0.02615836262702942,
    -0.003745401743799448,
    0.03597823902964592,
    0.00660953251644969,
    0.0045707193203270435,
    -0.004871470388025045,
    -0.014016405679285526,
    -0.028256626799702644,
    -0.012589585967361927,
    0.006410197354853153,
    -0.02068888582289219,
    0.0029043476097285748,
    0.02498333342373371,
    -0.007868491113185883,
    -0.004951904062181711,
    -0.021416284143924713,
    -0.010980917140841484,
    -0.032760899513959885,
    0.026857784017920494,
    -0.0010972174350172281,
    -0.0047525689005851746,
    -0.022451428696513176,
    0.008421034552156925,
    0.0018132501281797886,
    -0.01311415247619152,
    0.014037388376891613,
    0.16483964025974274,
    0.028760209679603577,
    0.038076505064964294,
    0.020115360617637634,
    0.0009267334244213998,
    -0.001601675059646368,
    0.012190915644168854,
    0.005994041915982962,
    -0.012890337035059929,
    0.007371902000159025,
    -0.013897503726184368,
    -0.016142647713422775,
    -0.008665831759572029,
    -0.003623003140091896,
    0.026396164670586586,
    -0.004105603788048029,
    -0.040062859654426575,
    -0.023248769342899323,
    -0.015093514695763588,
    -0.021416284143924713,
    0.0064451685175299644,
    -0.021612122654914856,
    -0.037796735763549805,
    -0.026647957041859627,
    -0.0006176765891723335,
    -0.0014495509676635265,
    -0.012680510990321636,
    0.0094771608710289,
    0.036397892981767654,
    0.016170624643564224,
    -0.014519989490509033,
    -0.01742958277463913,
    0.00396222248673439,
    -0.007039676886051893,
    -0.03270494565367699,
    -0.018282877281308174,
    0.010924963280558586,
    -0.011554442346096039,
    0.005396036431193352,
    0.03620205447077751,
    -0.01361074112355709,
    -0.04546239227056503,
    -0.005301614757627249,
    -0.02320680394768715,
    0.004493782762438059,
    -0.030270960181951523,
    -0.029879285022616386,
    0.023234780877828598,
    -0.0053330883383750916,
    -0.0013848544331267476,
    -0.0040636383928358555,
    -0.013631723821163177,
    0.026088420301675797,
    0.03194957226514816,
    -0.007001208607107401,
    -0.028732232749462128,
    0.000803897506557405,
    0.0017057140357792377,
    0.026703910902142525,
    0.003203350119292736,
    -0.03762887418270111,
    0.04501476511359215,
    -0.015667039901018143,
    0.013002244755625725,
    -0.02457766979932785,
    -0.0045427423901855946,
    -0.018604610115289688,
    -0.0024846945889294147,
    -0.006487133912742138,
    -0.003058220259845257,
    -0.021542180329561234,
    -0.0015597097808495164,
    -0.012498660944402218,
    -0.012526637874543667,
    -0.01717779040336609,
    -0.040566444396972656,
    0.05363163724541664,
    0.001650634570978582,
    0.01826888881623745,
    0.026060443371534348,
    -0.024004144594073296,
    0.013596752658486366,
    -0.0217520073056221,
    0.003493610071018338,
    -0.001235353178344667,
    -0.017135825008153915,
    0.02730541303753853,
    -0.024787496775388718,
    -0.014799757860600948,
    -0.02119247056543827,
    0.00759571697562933,
    -0.014729815535247326,
    0.001629651989787817,
    -0.020884724333882332,
    0.002168206498026848,
    0.028158707544207573,
    -0.009169415570795536,
    0.014156290329992771,
    -0.011897158809006214,
    -0.0046091871336102486,
    -0.03125014901161194,
    0.07497797906398773,
    0.017667386680841446,
    0.004532251041382551,
    -0.023528536781668663,
    0.010952940210700035,
    -0.001561458338983357,
    0.018660563975572586,
    -0.004983377642929554,
    -0.018408771604299545,
    -0.00047516945051029325,
    -0.023822294548153877,
    -0.012183921411633492,
    -0.010155599564313889,
    0.0038852861616760492,
    -0.01003669761121273,
    -0.014631896279752254,
    -0.017471548169851303,
    7.342559001699556e-06,
    -0.0016620001988485456,
    0.018884379416704178,
    -0.011974095366895199,
    0.013974440284073353,
    0.027948880568146706,
    -0.017793281003832817,
    -0.035558585077524185,
    0.0002758343471214175,
    0.026354199275374413,
    -0.017751315608620644,
    -0.005560400430113077,
    -0.006130428984761238,
    -0.028788186609745026,
    0.009330281987786293,
    0.005431007593870163,
    -0.009211380034685135,
    -0.005458984524011612,
    -0.018632587045431137,
    0.020982643589377403,
    0.013316984288394451,
    -0.005637336988002062,
    -0.024521715939044952,
    -0.008127276785671711,
    0.024717554450035095,
    -0.015275364741683006,
    0.002643813146278262,
    -0.03617407754063606,
    0.023976167663931847,
    -0.02066090889275074,
    -0.006196874193847179,
    -0.017499525099992752,
    -0.015806924551725388,
    -0.011498488485813141,
    0.013393920846283436,
    -0.010029703378677368,
    0.02755720540881157,
    -0.01250565517693758,
    -0.0017153311055153608,
    -0.028760209679603577,
    -0.002372787334024906,
    -0.010106639936566353,
    -0.03410378843545914,
    0.0052666435949504375,
    0.021332353353500366,
    0.003671962535008788,
    -0.022577324882149696,
    -0.031306102871894836,
    -0.17759709060192108,
    0.008260167203843594,
    0.030131075531244278,
    -0.06361937522888184,
    -0.007469821255654097,
    -0.012113979086279869,
    0.006357741076499224,
    -0.016100682318210602,
    0.008225196041166782,
    -0.008651843294501305,
    0.020213279873132706,
    -0.00414057495072484,
    -0.009603056125342846,
    -0.026829807087779045,
    0.002729492262005806,
    -0.02544495277106762,
    -0.013002244755625725,
    -0.00393074844032526,
    0.048204127699136734,
    0.006305284332484007,
    0.036957427859306335,
    -0.022996976971626282,
    0.003437656443566084,
    0.011120800860226154,
    0.013890509493649006,
    0.0008301258203573525,
    -0.023038942366838455,
    0.007343925070017576,
    -0.02010137215256691,
    -0.005549909081310034,
    -0.015862878412008286,
    0.0253190565854311,
    -0.004095112439244986,
    -0.005231672432273626,
    0.026480095461010933,
    -0.0048469905741512775,
    0.010889992117881775,
    -0.0035653007216751575,
    -0.019933510571718216,
    0.014233226887881756,
    0.03849615529179573,
    0.010078663006424904,
    0.010505310259759426,
    -0.002344810403883457,
    0.01292530819773674,
    0.009756929241120815,
    0.005256152246147394,
    -0.02371038682758808,
    -0.005784215405583382,
    -0.03715326637029648,
    0.02274518460035324,
    -0.034719280898571014,
    0.012624557130038738,
    0.014799757860600948,
    0.02724945917725563,
    -0.01489767711609602,
    -0.0022748683113604784,
    0.01545721385627985,
    -0.003990199416875839,
    -0.01058224681764841,
    -0.005672308150678873,
    -0.029459631070494652,
    0.0045427423901855946,
    -0.009505137801170349,
    -0.03281685337424278,
    -0.0022416457068175077,
    -0.012197909876704216,
    0.00532959122210741,
    -0.0008620369480922818,
    0.013757620006799698,
    -0.0013201580150052905,
    0.02516518346965313,
    -0.013666694983839989,
    0.011218720115721226,
    0.011428546160459518,
    -0.008232190273702145,
    -0.03429962694644928,
    0.007064156699925661,
    0.022423451766371727,
    -0.0007689264602959156,
    -0.025067264214158058,
    0.03547465428709984,
    -0.004021673463284969,
    -0.014813746325671673,
    0.029655469581484795,
    0.0017100854311138391,
    -0.009267333894968033,
    -0.014687850140035152,
    0.0027802002150565386,
    -0.011638373136520386,
    0.0013358949217945337,
    -0.014855711720883846,
    -0.008071323856711388,
    -0.008742768317461014,
    -0.010834038257598877,
    0.005214186850935221,
    0.00043232989264652133,
    0.011393574997782707,
    -0.013652706518769264,
    -0.009931784123182297,
    0.017289698123931885,
    0.018912356346845627,
    -0.02376634068787098,
    0.005801700986921787,
    0.03793662041425705,
    0.02610240876674652,
    0.003965719603002071,
    0.0032855323515832424,
    0.021458249539136887,
    0.005371556617319584,
    -0.015653051435947418,
    0.0014005914563313127,
    0.009092479012906551,
    0.00879172794520855,
    -0.010973922908306122,
    0.03969915956258774,
    0.0027224980294704437,
    -0.015736982226371765,
    0.0012117476435378194,
    -0.007966410368680954,
    0.011330627836287022,
    0.010645193979144096,
    -0.012603574432432652,
    0.011274673976004124,
    0.008085312321782112,
    -0.027039634063839912,
    -0.0898057147860527,
    -0.014575943350791931,
    -0.007120110560208559,
    0.0011050858302041888,
    -0.0010395151330158114,
    -0.013275018893182278,
    -0.012939296662807465,
    0.033292461186647415,
    -0.010246524587273598,
    -0.0031806190963834524,
    -0.046189792454242706,
    -0.004661643877625465,
    -0.013009238988161087,
    0.0010972174350172281,
    -0.009036525152623653,
    -0.01012762263417244,
    -0.035866331309080124,
    0.01714981347322464,
    0.008449011482298374,
    0.029039978981018066,
    -0.03429962694644928,
    0.0011995077366009355,
    -0.013261030428111553,
    -0.00652560219168663,
    0.01786322332918644,
    0.013834556564688683,
    -0.04277661442756653,
    0.02348657138645649,
    0.025794662535190582,
    0.0049169328995049,
    0.006308781448751688,
    -0.03899974003434181,
    -0.014464035630226135,
    -0.00407762685790658,
    -0.026619980111718178,
    -0.006630515214055777,
    -0.028452465310692787,
    -0.018884379416704178,
    0.02529107965528965,
    -0.014981606975197792,
    -0.007973404601216316,
    -0.0036125117912888527,
    0.03343234583735466,
    -0.022227613255381584,
    0.005385545082390308,
    -0.008295138366520405,
    -0.026647957041859627,
    0.04336412996053696,
    0.04109800606966019,
    -0.04414748027920723,
    -0.010666176676750183,
    -0.003077454399317503,
    -0.015009583905339241,
    -0.013715654611587524,
    0.007081642281264067,
    0.019066229462623596,
    0.010945945978164673,
    0.013456868939101696,
    -0.008043346926569939,
    0.005375053733587265,
    0.003650980070233345,
    -0.00759571697562933,
    -0.022996976971626282,
    0.019779639318585396,
    -0.021290387958288193,
    0.015918832272291183,
    -0.029683446511626244,
    -0.009393230080604553,
    0.023038942366838455,
    -0.02762714773416519,
    -0.02376634068787098,
    0.0038852861616760492,
    -0.02600448951125145,
    0.01435212790966034,
    -0.01349883433431387,
    -0.006620023865252733,
    -0.008358086459338665,
    0.004168551880866289,
    0.007232017815113068,
    -0.02221362479031086,
    0.005291123408824205,
    0.013058198615908623,
    -0.007567740045487881,
    0.0020895216148346663,
    0.015107503160834312,
    0.005081296898424625,
    -0.00242699240334332,
    -0.006637509446591139,
    0.01969570852816105,
    -0.04554632306098938,
    0.03200552612543106,
    0.0005258775199763477,
    0.028606336563825607,
    -0.023850271478295326,
    0.0006906786584295332,
    0.0073788962326943874,
    -0.01250565517693758,
    -0.009728952310979366,
    -0.04389569163322449,
    0.005193204153329134,
    -0.0548626184463501,
    -0.01259658019989729,
    -0.07844711095094681,
    0.01873050630092621,
    0.0217520073056221,
    -0.027753043919801712,
    0.01244270708411932,
    -0.007134098559617996,
    -0.011736291460692883,
    -0.019681720063090324,
    -0.005987047683447599,
    0.00019299660925753415,
    -0.015345306135714054,
    -0.011932129971683025,
    -0.021793972700834274,
    -0.022661255672574043,
    -0.02569674327969551,
    0.002720749471336603,
    0.032481130212545395,
    -0.007483809255063534,
    0.03771280497312546,
    -0.006480139680206776,
    -0.026899749413132668,
    0.006368232425302267,
    0.025668766349554062,
    0.033907949924468994,
    -0.02305293083190918,
    0.00018501882732380182,
    -0.021849926561117172,
    0.019961487501859665,
    -0.008735774084925652,
    -0.04798031225800514,
    0.014408081769943237,
    -0.00857490673661232,
    -0.009533114731311798,
    0.0009346019360236824,
    0.016212590038776398,
    0.008469994179904461,
    0.03340436890721321,
    -0.008442017249763012,
    0.032984714955091476,
    0.01460392028093338,
    -0.010994905605912209,
    -0.015429236926138401,
    0.023654432967305183,
    -0.0030477289110422134,
    -0.009952766820788383,
    0.011806233786046505,
    0.007287971675395966,
    -0.0009625787497498095,
    0.014701838605105877,
    0.014191261492669582,
    0.033544253557920456,
    0.013708660379052162,
    -0.020339176058769226,
    -0.03432760387659073,
    0.010078663006424904,
    -0.02709558606147766,
    -0.001777404802851379,
    0.029347723349928856,
    -0.01152646541595459,
    0.002566876821219921,
    0.029991190880537033,
    0.01048432756215334,
    0.014051376841962337,
    0.028228649869561195,
    -0.024507727473974228,
    -0.005458984524011612,
    -0.015429236926138401,
    -0.003413176629692316,
    -0.0026105905417352915,
    -0.013170105405151844,
    -0.022297555580735207,
    -0.022101717069745064,
    0.025486918166279793,
    0.011344616301357746,
    0.028732232749462128,
    -0.012953285127878189,
    -0.009400224313139915,
    -0.0032260813750326633,
    -0.0025406484492123127,
    0.03899974003434181,
    0.02628425881266594,
    0.005371556617319584,
    -0.015862878412008286,
    -0.0005796455079689622,
    0.02867627888917923,
    -0.0017922674305737019,
    -0.015107503160834312,
    0.012848371639847755,
    -0.003769881557673216,
    0.009253345429897308,
    0.008630860596895218,
    0.0012309817830100656,
    0.0037593902088701725,
    0.029963213950395584,
    0.025990501046180725,
    0.028172696009278297,
    -0.021863915026187897,
    -0.015764959156513214,
    0.016548311337828636,
    0.013757620006799698,
    0.015639062970876694,
    0.003185864770784974,
    0.01412131916731596,
    -0.004584707785397768,
    -0.032425180077552795,
    0.002830908400937915,
    -0.01631050743162632,
    -0.008889646269381046,
    0.025486918166279793,
    0.0046091871336102486,
    0.009092479012906551,
    -0.009386235848069191,
    -0.01789120025932789,
    0.021052585914731026,
    -0.006931266747415066,
    0.008917623199522495,
    0.02280113846063614,
    -0.008134271018207073,
    -0.028452465310692787,
    0.027053620666265488,
    0.014338139444589615,
    0.007945427671074867,
    0.021122528240084648,
    -0.00834409799426794,
    0.02628425881266594,
    0.022549347952008247,
    0.012016060762107372,
    -0.009155427105724812,
    0.005784215405583382,
    -0.03435558080673218,
    -0.006623520981520414,
    0.00954010896384716,
    -0.026857784017920494,
    0.005336585454642773,
    -0.019192123785614967,
    -0.015023572370409966,
    -0.015499179251492023,
    -0.0019846083596348763,
    0.005581383127719164,
    0.0900854840874672,
    -0.002766211749985814,
    -0.01045635063201189,
    0.010589241050183773,
    -0.009994732216000557,
    0.0027120066806674004,
    0.03253708407282829,
    0.004990371875464916,
    -0.011911147274076939,
    -0.007644676603376865,
    0.027906915172934532,
    -0.00989681389182806,
    -0.029151886701583862,
    -0.009924789890646935,
    -0.01737362891435623,
    0.012883342802524567,
    -0.007931439206004143,
    0.013792591169476509,
    -0.011281668208539486,
    0.011981089599430561,
    0.02068888582289219,
    0.007679647300392389,
    0.029319746419787407,
    -0.0047490717843174934,
    -0.014785769395530224,
    -0.010365425609052181,
    0.034159742295742035,
    0.007623693905770779,
    -0.00012250803411006927,
    -0.03340436890721321,
    0.00706065958365798,
    0.01935998536646366,
    -0.013449874706566334,
    -0.0004664266889449209,
    -0.016604265198111534,
    0.002830908400937915,
    -0.007630688138306141,
    -0.02724945917725563,
    -0.005917105358093977,
    -0.017359640449285507,
    0.009791900403797626,
    -0.013918486423790455,
    -0.02243744023144245,
    -0.018436748534440994,
    0.009162421338260174,
    -0.018282877281308174,
    0.0007951547740958631,
    -0.023696398362517357,
    -0.04347603768110275
  ]
}
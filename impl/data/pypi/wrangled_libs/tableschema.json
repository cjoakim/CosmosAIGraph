{
  "classifiers": [
    "development status :: 4 - beta",
    "environment :: web environment",
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "operating system :: os independent",
    "programming language :: python :: 2",
    "programming language :: python :: 2.7",
    "programming language :: python :: 3",
    "programming language :: python :: 3.4",
    "programming language :: python :: 3.5",
    "programming language :: python :: 3.6",
    "topic :: internet :: www/http :: dynamic content",
    "topic :: software development :: libraries :: python modules"
  ],
  "description": "a utility library for working with table schema in python\n# tableschema-py\n\n[![travis](https://travis-ci.org/frictionlessdata/tableschema-py.svg?branch=master)](https://travis-ci.org/frictionlessdata/tableschema-py)\n[![coveralls](http://img.shields.io/coveralls/frictionlessdata/tableschema-py.svg?branch=master)](https://coveralls.io/r/frictionlessdata/tableschema-py?branch=master)\n[![pypi](https://img.shields.io/pypi/v/tableschema.svg)](https://pypi.python.org/pypi/tableschema)\n[![github](https://img.shields.io/badge/github-master-brightgreen)](https://github.com/frictionlessdata/tableschema-py)\n[![gitter](https://img.shields.io/gitter/room/frictionlessdata/chat.svg)](https://gitter.im/frictionlessdata/chat)\n\na python implementation of the [table schema](http://specs.frictionlessdata.io/table-schema/) standard.\n\n> **[important notice]** we have released [frictionless framework](https://github.com/frictionlessdata/frictionless-py). this framework provides improved `tableschema` functionality extended to be a complete data solution. the change in not breaking for the existing software so no actions are required. please read the [migration guide](https://framework.frictionlessdata.io/docs/development/migration) from `tableschema` to frictionless framework.\n> - we continue to bug-fix `tableschema@1.x` in this [repository](https://github.com/frictionlessdata/tableschema-py) as well as it's available on [pypi](https://pypi.org/project/tableschema/) as it was before\n> - please note that `frictionless@3.x` version's api, we're working on at the moment, is not stable\n> - we will release `frictionless@4.x` by the end of 2020 to be the first semver/stable version\n\n## features\n\n- `table` to work with data tables described by table schema\n- `schema` representing table schema\n- `field` representing table schema field\n- `validate` to validate table schema\n- `infer` to infer table schema from data\n- built-in command-line interface to validate and infer schemas\n- storage/plugins system to connect tables to different storage backends like sql database\n\n## contents\n\n<!--toc-->\n\n  - [getting started](#getting-started)\n    - [installation](#installation)\n  - [documentation](#documentation)\n    - [introduction](#introduction)\n    - [working with table](#working-with-table)\n    - [working with schema](#working-with-schema)\n    - [working with field](#working-with-field)\n  - [api reference](#api-reference)\n    - [`cli`](#cli)\n    - [`table`](#table)\n    - [`schema`](#schema)\n    - [`field`](#field)\n    - [`storage`](#storage)\n    - [`validate`](#validate)\n    - [`infer`](#infer)\n    - [`failedcast`](#failedcast)\n    - [`datapackageexception`](#datapackageexception)\n    - [`tableschemaexception`](#tableschemaexception)\n    - [`loaderror`](#loaderror)\n    - [`validationerror`](#validationerror)\n    - [`casterror`](#casterror)\n    - [`integrityerror`](#integrityerror)\n    - [`uniquekeyerror`](#uniquekeyerror)\n    - [`relationerror`](#relationerror)\n    - [`unresolvedfkerror`](#unresolvedfkerror)\n    - [`storageerror`](#storageerror)\n  - [experimental](#experimental)\n  - [contributing](#contributing)\n  - [changelog](#changelog)\n\n<!--toc-->\n\n## getting started\n\n### installation\n\nthe package uses semantic versioning. it means that major versions  could include breaking changes. it's highly recommended to specify `tableschema` version range in your `setup/requirements` file e.g. `tableschema>=1.0,<2.0`.\n\n```bash\n$ pip install tableschema\n```\n\n## documentation\n\n### introduction\n\nlet's start with a simple example:\n\n```python\nfrom tableschema import table\n\n# create table\ntable = table('path.csv', schema='schema.json')\n\n# print schema descriptor\nprint(table.schema.descriptor)\n\n# print cast rows in a dict form\nfor keyed_row in table.iter(keyed=true):\n    print(keyed_row)\n```\n\n### working with table\n\na table is a core concept in a tabular data world. it represents data with metadata (table schema). let's see how we can use it in practice.\n\nconsider we have some local csv file. it could be inline data or from a remote link - all supported by the `table` class (except local files for in-brower usage of course). but say it's `data.csv` for now:\n\n```csv\ncity,location\nlondon,\"51.50,-0.11\"\nparis,\"48.85,2.30\"\nrome,n/a\n```\n\nlet's create and read a table instance. we use the static `table.load` method and the `table.read` method with the `keyed` option to get an array of keyed rows:\n\n```python\ntable = table('data.csv')\ntable.headers # ['city', 'location']\ntable.read(keyed=true)\n# [\n#   {city: 'london', location: '51.50,-0.11'},\n#   {city: 'paris', location: '48.85,2.30'},\n#   {city: 'rome', location: 'n/a'},\n# ]\n```\n\nas we can see, our locations are just strings. but they should be geopoints. also, rome's location is not available, but it's just a string `n/a` instead of `none`. first we have to infer table schema:\n\n```python\ntable.infer()\ntable.schema.descriptor\n# { fields:\n#   [ { name: 'city', type: 'string', format: 'default' },\n#     { name: 'location', type: 'geopoint', format: 'default' } ],\n#  missingvalues: [ '' ] }\ntable.read(keyed=true)\n# fails with a data validation error\n```\n\nlet's fix the \"not available\" location. there is a `missingvalues` property in table schema specification. as a first try we set `missingvalues` to `n/a` in `table.schema.descriptor`. the schema descriptor can be changed in-place, but all changes should also be committed using `table.schema.commit()`:\n\n```python\ntable.schema.descriptor['missingvalues'] = 'n/a'\ntable.schema.commit()\ntable.schema.valid # false\ntable.schema.errors\n# [<validationerror: \"'n/a' is not of type 'array'\">]\n```\n\nas a good citizens we've decided to check our schema descriptor's validity. and it's not valid! we should use an array for the `missingvalues` property. also, don't forget to include \"empty string\" as a valid missing value:\n\n```python\ntable.schema.descriptor['missingvalues'] = ['', 'n/a']\ntable.schema.commit()\ntable.schema.valid # true\n```\n\nall good. it looks like we're ready to read our data again:\n\n```python\ntable.read(keyed=true)\n# [\n#   {city: 'london', location: [51.50,-0.11]},\n#   {city: 'paris', location: [48.85,2.30]},\n#   {city: 'rome', location: null},\n# ]\n```\n\nnow we see that:\n- locations are arrays with numeric latitude and longitude\n- rome's location is a native python `none`\n\nand because there are no errors after reading, we can be sure that our data is valid against our schema. let's save it:\n\n```python\ntable.schema.save('schema.json')\ntable.save('data.csv')\n```\n\nour `data.csv` looks the same because it has been stringified back to `csv` format. but now we have `schema.json`:\n\n```json\n{\n    \"fields\": [\n        {\n            \"name\": \"city\",\n            \"type\": \"string\",\n            \"format\": \"default\"\n        },\n        {\n            \"name\": \"location\",\n            \"type\": \"geopoint\",\n            \"format\": \"default\"\n        }\n    ],\n    \"missingvalues\": [\n        \"\",\n        \"n/a\"\n    ]\n}\n\n```\n\nif we decide to improve it even more we could update the schema file and then open it again. but now providing a schema path:\n\n```python\ntable = table('data.csv', schema='schema.json')\n# continue the work\n```\n\nas already mentioned a given schema can be used to *validate* data (see the [schema](#schema) section for schema specification details). in default mode invalid data rows immediately trigger an [exception](#exceptions) in the `table.iter()`/`table.write()` methods.\n\nsuppose this schema-invalid local file `invalid_data.csv`:\n```csv\nkey,value\nzero,0\none,not_an_integer\ntwo,2\n```\n\nwe're going to validate the data against the following schema:\n```python\ntable = table(\n    'invalid_data.csv',\n    schema={'fields': [{'name': 'key'}, {'name': 'value', 'type': 'integer'}]})\n```\n\niterating over the data triggers an exception due to the failed cast of `'not_an_integer'` to `int`:\n```python\nfor row in table.iter():\n    print(row)\n\n# traceback (most recent call last):\n# ...\n# tableschema.exceptions.casterror: there are 1 cast errors (see exception.errors) for row \"3\"\n```\n\nhint: the row number count starts with 1 and also includes header lines.\n\n(note: you can optionally switch off `iter()`/`read()` value casting using the cast parameter, see reference below.)\n\nby providing a custom exception handler (a callable) to those methods you can treat occurring exceptions at your own discretion, i.e. to \"fail late\" and e.g. gather a validation report on the whole data:\n\n```python\nerrors = []\ndef exc_handler(exc, row_number=none, row_data=none, error_data=none):\n    errors.append((exc, row_number, row_data, error_data))\n\nfor row in table.iter(exc_handler=exc_handler):\n    print(row)\n\n# ['zero', 0]\n# ['one', failedcast('not_an_integer')]\n# ['two', 2]\n\nprint(errors)\n\n# [(casterror('there are 1 cast errors (see exception.errors) for row \"3\"',),\n#   3,\n#   ordereddict([('key', 'one'), ('value', 'not_an_integer')]),\n#   ordereddict([('value', 'not_an_integer')]))]\n```\n\nnote that\n\n- data rows are yielded even though the data is schema-invalid; this is due to our custom expression handler choosing not to raise exceptions (but rather collect them in the errors list).\n- data field values that can't get casted properly (if `iter()`/`read()` cast parameter is set to true, which is the default) are wrapped into a `failedcast` \"value holder\". this allows for distinguishing uncasted values from successfully casted values on the data consumer side. `failedcast` instances can only get yielded when custom exception handling is in place.\n- the custom exception handler callable must support a function signature as specified in the `iter()`/`read()` sections of the `table` class api reference.\n\n### working with schema\n\na model of a schema with helpful methods for working with the schema and supported data. schema instances can be initialized with a schema source as a url to a json file or a json object. the schema is initially validated (see [validate](#validate) below). by default validation errors will be stored in `schema.errors` but in a strict mode it will be instantly raised.\n\nlet's create a blank schema. it's not valid because `descriptor.fields` property is required by the [table schema](http://specs.frictionlessdata.io/table-schema/) specification:\n\n```python\nschema = schema()\nschema.valid # false\nschema.errors\n# [<validationerror: \"'fields' is a required property\">]\n```\n\nto avoid creating a schema descriptor by hand we will use a `schema.infer` method to infer the descriptor from given data:\n\n```python\nschema.infer([\n  ['id', 'age', 'name'],\n  ['1','39','paul'],\n  ['2','23','jimmy'],\n  ['3','36','jane'],\n  ['4','28','judy'],\n])\nschema.valid # true\nschema.descriptor\n#{ fields:\n#   [ { name: 'id', type: 'integer', format: 'default' },\n#     { name: 'age', type: 'integer', format: 'default' },\n#     { name: 'name', type: 'string', format: 'default' } ],\n#  missingvalues: [ '' ] }\n```\n\nnow we have an inferred schema and it's valid. we can cast data rows against our schema. we provide a string input which will be cast correspondingly:\n\n```python\nschema.cast_row(['5', '66', 'sam'])\n# [ 5, 66, 'sam' ]\n```\n\nbut if we try provide some missing value to the `age` field, the cast will fail because the only valid \"missing\" value is an empty string. let's update our schema:\n\n```python\nschema.cast_row(['6', 'n/a', 'walt'])\n# cast error\nschema.descriptor['missingvalues'] = ['', 'n/a']\nschema.commit()\nschema.cast_row(['6', 'n/a', 'walt'])\n# [ 6, none, 'walt' ]\n```\n\nwe can save the schema to a local file, and resume work on it at any time by loading it from that file:\n\n```python\nschema.save('schema.json')\nschema = schema('schema.json')\n```\n\n### working with field\n\n```python\nfrom tableschema import field\n\n# init field\nfield = field({'name': 'name', 'type': 'number'})\n\n# cast a value\nfield.cast_value('12345') # -> 12345\n```\n\ndata values can be cast to native python objects with a field instance. type instances can be initialized with [field descriptors](https://specs.frictionlessdata.io/table-schema/). this allows formats and constraints to be defined.\n\ncasting a value will check the value is of the expected type, is in the correct format, and complies with any constraints imposed by a schema. e.g. a date value (in iso 8601 format) can be cast with a datetype instance. values that can't be cast will raise an `invalidcasterror` exception.\n\ncasting a value that doesn't meet the constraints will raise a `constrainterror` exception.\n\n## api reference\n\n### `cli`\n```python\ncli()\n```\ncommand-line interface\n\n```\nusage: tableschema [options] command [args]...\n\noptions:\n  --help  show this message and exit.\n\ncommands:\n  infer     infer a schema from data.\n  info      return info on this version of table schema\n  validate  validate that a supposed schema is in fact a table schema.\n```\n\n\n### `table`\n```python\ntable(self,\n      source,\n      schema=none,\n      strict=false,\n      post_cast=[],\n      storage=none,\n      **options)\n```\ntable representation\n\n__arguments__\n- __source (str/list[])__: data source one of:\n    - local file (path)\n    - remote file (url)\n    - array of arrays representing the rows\n- __schema (any)__: data schema in all forms supported by `schema` class\n- __strict (bool)__: strictness option to pass to `schema` constructor\n- __post_cast (function[])__: list of post cast processors\n- __storage (none)__: storage name like `sql` or `bigquery`\n- __options (dict)__: `tabulator` or storage's options\n\n__raises__\n- `tableschemaexception`: raises on any error\n\n\n\n#### `table.hash`\ntable's sha256 hash if it's available.\n\nif it's already read using e.g. `table.read`, otherwise returns `none`.\nin the middle of an iteration it returns hash of already read contents\n\n__returns__\n\n`str/none`: sha256 hash\n\n\n\n#### `table.headers`\ntable's headers is available\n\n__returns__\n\n`str[]`: headers\n\n\n\n#### `table.schema`\nreturns schema class instance if available\n\n__returns__\n\n`schema`: schema\n\n\n\n#### `table.size`\ntable's size in bytes if it's available\n\nif it's already read using e.g. `table.read`, otherwise returns `none`.\nin the middle of an iteration it returns size of already read contents\n\n__returns__\n\n`int/none`: size in bytes\n\n\n\n#### `table.iter`\n```python\ntable.iter(keyed=false,\n           extended=false,\n           cast=true,\n           integrity=false,\n           relations=false,\n           foreign_keys_values=false,\n           exc_handler=none)\n```\niterates through the table data and emits rows cast based on table schema.\n\n__arguments__\n\n\n    keyed (bool):\n        yield keyed rows in a form of `{header1: value1, header2: value2}`\n        (default is false; the form of rows is `[value1, value2]`)\n\n    extended (bool):\n        yield extended rows in a for of `[rownumber, [header1, header2], [value1, value2]]`\n        (default is false; the form of rows is `[value1, value2]`)\n\n    cast (bool):\n        disable data casting if false\n        (default is true)\n\n    integrity (dict):\n        dictionary in a form of `{'size': <bytes>, 'hash': '<sha256>'}`\n        to check integrity of the table when it's read completely.\n        both keys are optional.\n\n    relations (dict):\n        dictionary of foreign key references in a form\n        of `{resource1: [{field1: value1, field2: value2}, ...], ...}`.\n        if provided, foreign key fields will checked and resolved\n        to one of their references (/!\\ one-to-many fk are not completely resolved).\n\n    foreign_keys_values (dict):\n        three-level dictionary of foreign key references optimized\n        to speed up validation process in a form of\n        `{resource1: {(fk_field1, fk_field2): {(value1, value2): {one_keyedrow}, ... }}}`.\n        if not provided but relations is true, it will be created\n        before the validation process by *index_foreign_keys_values* method\n\n    exc_handler (func):\n        optional custom exception handler callable.\n        can be used to defer raising errors (i.e. \"fail late\"), e.g.\n        for data validation purposes. must support the signature below\n\n__custom exception handler__\n\n\n```python\ndef exc_handler(exc, row_number=none, row_data=none, error_data=none):\n    '''custom exception handler (example)\n\n    # arguments:\n        exc(exception):\n            deferred exception instance\n        row_number(int):\n            data row number that triggers exception exc\n        row_data(ordereddict):\n            invalid data row source data\n        error_data(ordereddict):\n            data row source data field subset responsible for the error, if\n            applicable (e.g. invalid primary or foreign key fields). may be\n            identical to row_data.\n    '''\n    # ...\n```\n\n__raises__\n- `tableschemaexception`: base class of any error\n- `casterror`: data cast error\n- `integrityerror`: integrity checking error\n- `uniquekeyerror`: unique key constraint violation\n- `unresolvedfkerror`: unresolved foreign key reference error\n\n__returns__\n\n`iterator[list]`: yields rows\n\n\n\n#### `table.read`\n```python\ntable.read(keyed=false,\n           extended=false,\n           cast=true,\n           limit=none,\n           integrity=false,\n           relations=false,\n           foreign_keys_values=false,\n           exc_handler=none)\n```\nread the whole table and return as array of rows\n\n> it has the same api as `table.iter` except for\n\n__arguments__\n- __limit (int)__: limit count of rows to read and return\n\n__returns__\n\n`list[]`: returns rows\n\n\n\n#### `table.infer`\n```python\ntable.infer(limit=100,\n            confidence=0.75,\n            missing_values=[''],\n            guesser_cls=none,\n            resolver_cls=none)\n```\ninfer a schema for the table.\n\nit will infer and set table schema to `table.schema` based on table data.\n\n__arguments__\n- __limit (int)__: limit rows sample size\n- __confidence (float)__: how many casting errors are allowed (as a ratio, between 0 and 1)\n- __missing_values (str[])__: list of missing values (by default `['']`)\n- __guesser_cls (class)__: you can implement inferring strategies by\n         providing type-guessing and type-resolving classes [experimental]\n- __resolver_cls (class)__: you can implement inferring strategies by\n         providing type-guessing and type-resolving classes [experimental]\n\n__returns__\n\n`dict`: table schema descriptor\n\n\n\n#### `table.save`\n```python\ntable.save(target, storage=none, **options)\n```\nsave data source to file locally in csv format with `,` (comma) delimiter\n\n> to save schema use `table.schema.save()`\n\n__arguments__\n- __target (str)__: saving target (e.g. file path)\n- __storage (none/str)__: storage name like `sql` or `bigquery`\n- __options (dict)__: `tabulator` or storage options\n\n__raises__\n- `tableschemaexception`: raises an error if there is saving problem\n\n__returns__\n\n`true/storage`: returns true or storage instance\n\n\n\n#### `table.index_foreign_keys_values`\n```python\ntable.index_foreign_keys_values(relations)\n```\ncreates a three-level dictionary of foreign key references\n\nwe create them optimized to speed up validation process in a form of\n`{resource1: {(fk_field1, fk_field2): {(value1, value2): {one_keyedrow}, ... }}}`.\n\nfor each foreign key of the schema it will iterate through the corresponding\n`relations['resource']` to create an index (i.e. a dict) of existing values\nfor the foreign fields and store on keyed row for each value combination.\n\nthe optimization relies on the indexation of possible values for one foreign key\nin a hashmap to later speed up resolution.\n\nthis method is public to allow creating the index once to apply it\non multiple tables charing the same schema\n(typically [grouped resources in datapackage](https://github.com/frictionlessdata/datapackage-py#group))\n\n__notes__\n\n- the second key of the output is a tuple of the foreign fields,\n    a proxy identifier of the foreign key\n- the same relation resource can be indexed multiple times\n    as a schema can contain more than one foreign keys\n    pointing to the same resource\n\n__arguments__\n- __relations (dict)__:\n        dict of foreign key references in a form of\n        `{resource1: [{field1: value1, field2: value2}, ...], ...}`.\n        it must contain all resources pointed in the foreign keys schema definition.\n\n__returns__\n\n`dict`:\n        returns a three-level dictionary of foreign key references\n        optimized to speed up validation process in a form of\n        `{resource1: {(fk_field1, fk_field2): {(value1, value2): {one_keyedrow}, ... }}})`\n\n\n### `schema`\n```python\nschema(self, descriptor={}, strict=false)\n```\nschema representation\n\n__arguments__\n- __descriptor (str/dict)__: schema descriptor one of:\n        - local path\n        - remote url\n        - dictionary\n- __strict (bool)__: flag to specify validation behaviour:\n        - if false, errors will not be raised but instead collected in `schema.errors`\n        - if true, validation errors are raised immediately\n\n__raises__\n- `tableschemaexception`: raise any error that occurs during the process\n\n\n\n#### `schema.descriptor`\nschema's descriptor\n\n__returns__\n\n`dict`: descriptor\n\n\n\n#### `schema.errors`\nvalidation errors\n\nalways empty in strict mode.\n\n__returns__\n\n`exception[]`: validation errors\n\n\n\n#### `schema.field_names`\nschema's field names\n\n__returns__\n\n`str[]`: an array of field names\n\n\n\n#### `schema.fields`\nschema's fields\n\n__returns__\n\n`field[]`: an array of field instances\n\n\n\n#### `schema.foreign_keys`\nschema's foreign keys\n\n__returns__\n\n`dict[]`: foreign keys\n\n\n\n#### `schema.headers`\nschema's field names\n\n__returns__\n\n`str[]`: an array of field names\n\n\n\n#### `schema.missing_values`\nschema's missing values\n\n__returns__\n\n`str[]`: missing values\n\n\n\n#### `schema.primary_key`\nschema's primary keys\n\n__returns__\n\n`str[]`: primary keys\n\n\n\n#### `schema.valid`\nvalidation status\n\nalways true in strict mode.\n\n__returns__\n\n`bool`: validation status\n\n\n\n#### `schema.get_field`\n```python\nschema.get_field(name)\n```\nget schema's field by name.\n\n> use `table.update_field` if you want to modify the field descriptor\n\n__arguments__\n- __name (str)__: schema field name\n\n__returns__\n\n`field/none`: `field` instance or `none` if not found\n\n\n\n#### `schema.get_field`\n```python\nschema.get_field(name)\n```\nget schema's field by name.\n\n> use `table.update_field` if you want to modify the field descriptor\n\n__arguments__\n- __name (str)__: schema field name\n\n__returns__\n\n`field/none`: `field` instance or `none` if not found\n\n\n\n#### `schema.add_field`\n```python\nschema.add_field(descriptor)\n```\nadd new field to schema.\n\nthe schema descriptor will be validated with newly added field descriptor.\n\n__arguments__\n- __descriptor (dict)__: field descriptor\n\n__raises__\n- `tableschemaexception`: raises any error that occurs during the process\n\n__returns__\n\n`field/none`: added `field` instance or `none` if not added\n\n\n\n#### `schema.update_field`\n```python\nschema.update_field(name, update)\n```\nupdate existing descriptor field by name\n\n__arguments__\n- __name (str)__: schema field name\n- __update (dict)__: update to apply to field's descriptor\n\n__returns__\n\n`bool`: true on success and false if no field is found to be modified\n\n\n\n#### `schema.remove_field`\n```python\nschema.remove_field(name)\n```\nremove field resource by name.\n\nthe schema descriptor will be validated after field descriptor removal.\n\n__arguments__\n- __name (str)__: schema field name\n\n__raises__\n- `tableschemaexception`: raises any error that occurs during the process\n\n__returns__\n\n`field/none`: removed `field` instances or `none` if not found\n\n\n\n#### `schema.cast_row`\n```python\nschema.cast_row(row, fail_fast=false, row_number=none, exc_handler=none)\n```\ncast row based on field types and formats.\n\n__arguments__\n- __row (any[]__: data row as an array of values\n\n__returns__\n\n`any[]`: returns cast data row\n\n\n\n#### `schema.infer`\n```python\nschema.infer(rows,\n             headers=1,\n             confidence=0.75,\n             guesser_cls=none,\n             resolver_cls=none)\n```\ninfer and set `schema.descriptor` based on data sample.\n\n__arguments__\n- __rows (list[])__: array of arrays representing rows.\n- __headers (int/str[])__: data sample headers (one of):\n      - row number containing headers (`rows` should contain headers rows)\n      - array of headers (`rows` should not contain headers rows)\n- __confidence (float)__: how many casting errors are allowed (as a ratio, between 0 and 1)\n- __guesser_cls (class)__: you can implement inferring strategies by\n         providing type-guessing and type-resolving classes [experimental]\n- __resolver_cls (class)__: you can implement inferring strategies by\n         providing type-guessing and type-resolving classes [experimental]\n\n__returns__\n\n`dict`: table schema descriptor\n\n\n\n#### `schema.commit`\n```python\nschema.commit(strict=none)\n```\nupdate schema instance if there are in-place changes in the descriptor.\n\n__example__\n\n\n```python\nfrom tableschema import schema\ndescriptor = {'fields': [{'name': 'my_field', 'title': 'my field', 'type': 'string'}]}\nschema = schema(descriptor)\nprint(schema.get_field('my_field').descriptor['type']) # string\n\n# update descriptor by field position\nschema.descriptor['fields'][0]['type'] = 'number'\n# update descriptor by field name\nschema.update_field('my_field', {'title': 'my pretty field'}) # true\n\n# change are not committed\nprint(schema.get_field('my_field').descriptor['type']) # string\nprint(schema.get_field('my_field').descriptor['title']) # my field\n\n# commit change\nschema.commit()\nprint(schema.get_field('my_field').descriptor['type']) # number\nprint(schema.get_field('my_field').descriptor['title']) # my pretty field\n\n```\n\n__arguments__\n- __strict (bool)__: alter `strict` mode for further work\n\n__raises__\n- `tableschemaexception`: raises any error that occurs during the process\n\n__returns__\n\n`bool`: true on success and false if not modified\n\n\n\n#### `schema.save`\n```python\nschema.save(target, ensure_ascii=true)\n```\nsave schema descriptor to target destination.\n\n__arguments__\n- __target (str)__: path where to save a descriptor\n\n__raises__\n- `tableschemaexception`: raises any error that occurs during the process\n\n__returns__\n\n`bool`: true on success\n\n\n\n### `field`\n```python\nfield(self, descriptor, missing_values=[''], schema=none)\n```\nfield representaion\n\n__arguments__\n- __descriptor (dict)__: schema field descriptor\n- __missingvalues (str[])__: an array with string representing missing values\n\n__raises__\n- `tableschemaexception`: raises any error that occurs during the process\n\n\n\n#### `field.constraints`\nfield constraints\n\n__returns__\n\n`dict`: dict of field constraints\n\n\n\n#### `field.descriptor`\nfields's descriptor\n\n__returns__\n\n`dict`: descriptor\n\n\n\n#### `field.format`\nfield format\n\n__returns__\n\n`str`: field format\n\n\n\n#### `field.missing_values`\nfield's missing values\n\n__returns__\n\n`str[]`: missing values\n\n\n\n#### `field.name`\nfield name\n\n__returns__\n\n`str`: field name\n\n\n\n#### `field.required`\nwhether field is required\n\n__returns__\n\n`bool`: true if required\n\n\n\n#### `field.schema`\nreturns a schema instance if the field belongs to some schema\n\n__returns__\n\n`schema`: field's schema\n\n\n\n#### `field.type`\nfield type\n\n__returns__\n\n`str`: field type\n\n\n\n#### `field.cast_value`\n```python\nfield.cast_value(value, constraints=true)\n```\ncast given value according to the field type and format.\n\n__arguments__\n- __value (any)__: value to cast against field\n- __constraints (boll/str[])__: gets constraints configuration\n        - it could be set to true to disable constraint checks\n        - it could be an array of constraints to check e.g. ['minimum', 'maximum']\n\n__raises__\n- `tableschemaexception`: raises any error that occurs during the process\n\n__returns__\n\n`any`: returns cast value\n\n\n\n#### `field.test_value`\n```python\nfield.test_value(value, constraints=true)\n```\ntest whether value is compliant to the field.\n\n__arguments__\n- __value (any)__: value to cast against field\n- __constraints (bool/str[])__: constraints configuration\n\n__returns__\n\n`bool`: returns if value is compliant to the field\n\n\n### `storage`\n```python\nstorage(self, **options)\n```\nstorage factory/interface\n\n__for users__\n\n\n> use `storage.connect` to instantiate a storage\n\nfor instantiation of concrete storage instances,\n`tableschema.storage` provides a unified factory method `connect`\n(which uses the plugin system under the hood):\n\n```python\n# pip install tableschema_sql\nfrom tableschema import storage\n\nstorage = storage.connect('sql', **options)\nstorage.create('bucket', descriptor)\nstorage.write('bucket', rows)\nstorage.read('bucket')\n```\n\n__for integrators__\n\n\nthe library includes interface declaration to implement tabular `storage`.\nthis interface allow to use different data storage systems like sql\nwith `tableschema.table` class (load/save) as well as on the data package level:\n\n![storage](https://raw.githubusercontent.com/frictionlessdata/tableschema-py/master/data/storage.png)\n\nan implementor must follow `tableschema.storage` interface\nto write his own storage backend. concrete storage backends\ncould include additional functionality specific to conrete storage system.\nsee `plugins` below to know how to integrate custom storage plugin into your workflow.\n\n\n\n#### `storage.buckets`\nreturn list of storage bucket names.\n\na `bucket` is a special term which has almost the same meaning as `table`.\nyou should consider `bucket` as a `table` stored in the `storage`.\n\n__raises__\n- `exceptions.storageerror`: raises on any error\n\n__returns__\n\n`str[]`: return list of bucket names\n\n\n\n#### `storage.connect`\n```python\nstorage.connect(name, **options)\n```\ncreate tabular `storage` based on storage name.\n\n> this method is statis: `storage.connect()`\n\n__arguments__\n- __name (str)__: storage name like `sql`\n- __options (dict)__: concrete storage options\n\n__raises__\n- `storageerror`: raises on any error\n\n__returns__\n\n`storage`: returns `storage` instance\n\n\n\n#### `storage.create`\n```python\nstorage.create(bucket, descriptor, force=false)\n```\ncreate one/multiple buckets.\n\n__arguments__\n- __bucket (str/list)__: bucket name or list of bucket names\n- __descriptor (dict/dict[])__: schema descriptor or list of descriptors\n- __force (bool)__: whether to delete and re-create already existing buckets\n\n__raises__\n- `exceptions.storageerror`: raises on any error\n\n\n\n#### `storage.delete`\n```python\nstorage.delete(bucket=none, ignore=false)\n```\ndelete one/multiple/all buckets.\n\n__arguments__\n- __bucket (str/list/none)__: bucket name or list of bucket names to delete.\n        if `none`, all buckets will be deleted\n- __descriptor (dict/dict[])__: schema descriptor or list of descriptors\n- __ignore (bool)__: don't raise an error on non-existent bucket deletion\n\n__raises__\n- `exceptions.storageerror`: raises on any error\n\n\n\n#### `storage.describe`\n```python\nstorage.describe(bucket, descriptor=none)\n```\nget/set bucket's table schema descriptor\n\n__arguments__\n- __bucket (str)__: bucket name\n- __descriptor (dict/none)__: schema descriptor to set\n\n__raises__\n- `exceptions.storageerror`: raises on any error\n\n__returns__\n\n`dict`: returns table schema descriptor\n\n\n\n#### `storage.iter`\n```python\nstorage.iter(bucket)\n```\nreturn an iterator of typed values based on the schema of this bucket.\n\n__arguments__\n- __bucket (str)__: bucket name\n\n__raises__\n- `exceptions.storageerror`: raises on any error\n\n__returns__\n\n`list[]`: yields data rows\n\n\n\n#### `storage.read`\n```python\nstorage.read(bucket)\n```\nread typed values based on the schema of this bucket.\n\n__arguments__\n- __bucket (str)__: bucket name\n__raises__\n- `exceptions.storageerror`: raises on any error\n__returns__\n\n`list[]`: returns data rows\n\n\n\n#### `storage.write`\n```python\nstorage.write(bucket, rows)\n```\nthis method writes data rows into `storage`.\n\nit should store values of unsupported types as strings internally (like csv does).\n\n__arguments__\n- __bucket (str)__: bucket name\n- __rows (list[])__: data rows to write\n\n__raises__\n- `exceptions.storageerror`: raises on any error\n\n\n### `validate`\n```python\nvalidate(descriptor)\n```\nvalidate descriptor\n\n__arguments__\n- __dict__: descriptor\n\n__raises__\n- `validationerror`: on validation errors\n\n__returns__\n\n`bool`: true\n\n\n### `infer`\n```python\ninfer(source,\n      headers=1,\n      limit=100,\n      confidence=0.75,\n      missing_values=[''],\n      guesser_cls=none,\n      resolver_cls=none,\n      **options)\n```\ninfer source schema.\n\n__arguments__\n- __source (any)__: source as path, url or inline data\n- __headers (int/str[])__: headers rows number or headers list\n- __confidence (float)__: how many casting errors are allowed (as a ratio, between 0 and 1)\n- __missing_values (str[])__: list of missing values (by default `['']`)\n- __guesser_cls (class)__: you can implement inferring strategies by\n        providing type-guessing and type-resolving classes [experimental]\n- __resolver_cls (class)__: you can implement inferring strategies by\n        providing type-guessing and type-resolving classes [experimental]\n\n__raises__\n- `tableschemaexception`: raises any error that occurs during the process\n\n__returns__\n\n`dict`: returns schema descriptor\n\n\n### `failedcast`\n```python\nfailedcast(self, value)\n```\nwrap an original data field value that failed to be properly casted.\n\nfailedcast allows for further processing/yielding values but still be able\nto distinguish uncasted values on the consuming side.\n\ndelegates attribute access and the basic rich comparison methods to the\nunderlying object. supports default user-defined classes hashability i.e.\nis hashable based on object identity (not based on the wrapped value).\n\n__arguments__\n- __value (any)__: value\n\n\n### `datapackageexception`\n```python\ndatapackageexception(self, message, errors=[])\n```\nbase class for all datapackage/tableschema exceptions.\n\nif there are multiple errors, they can be read from the exception object:\n\n```python\ntry:\n    # lib action\nexcept datapackageexception as exception:\n    if exception.multiple:\n        for error in exception.errors:\n            # handle error\n```\n\n\n\n#### `datapackageexception.errors`\nlist of nested errors\n\n__returns__\n\n`datapackageexception[]`: list of nested errors\n\n\n\n#### `datapackageexception.multiple`\nwhether it's a nested exception\n\n__returns__\n\n`bool`: whether it's a nested exception\n\n\n\n### `tableschemaexception`\n```python\ntableschemaexception(self, message, errors=[])\n```\nbase class for all tableschema exceptions.\n\n\n### `loaderror`\n```python\nloaderror(self, message, errors=[])\n```\nall loading errors.\n\n\n### `validationerror`\n```python\nvalidationerror(self, message, errors=[])\n```\nall validation errors.\n\n\n### `casterror`\n```python\ncasterror(self, message, errors=[])\n```\nall value cast errors.\n\n\n### `integrityerror`\n```python\nintegrityerror(self, message, errors=[])\n```\nall integrity errors.\n\n\n### `uniquekeyerror`\n```python\nuniquekeyerror(self, message, errors=[])\n```\nunique key constraint violation (casterror subclass)\n\n\n### `relationerror`\n```python\nrelationerror(self, message, errors=[])\n```\nall relations errors.\n\n\n### `unresolvedfkerror`\n```python\nunresolvedfkerror(self, message, errors=[])\n```\nunresolved foreign key reference error (relationerror subclass).\n\n\n### `storageerror`\n```python\nstorageerror(self, message, errors=[])\n```\nall storage errors.\n\n## experimental\n\n> this api is experimental and can be changed/removed in the future\n\nthere is an experimental environment variable `tableschema_preserve_missing_values` which, if it is set, affects how data casting works.\n\nby default, missing values are resolved to `none` values. when this flag is set, missing values are passed through as it is. for example:\n\n> missing_values.py\n\n```python\nfrom tableschema import field\n\nfield = field({'type': 'number'}, missing_values=['-'])\nprint(field.cast_value('3'))\nprint(field.cast_value('-'))\n```\n\nrunning this script in different modes:\n\n```bash\n$ python missing_values.py\n3\nnone\n$ tableschema_preserve_missing_values=1 python missing_values.py\n3\n-\n```\n\nthe flags affects all the library's apis and software built on top of `tableschema`. for example, data package pipelines:\n\n```bash\n$ tableschema_preserve_missing_values=1 dpp run ./my_pipeline\n```\n\n## contributing\n\n> the project follows the [open knowledge international coding standards](https://github.com/okfn/coding-standards).\n\nrecommended way to get started is to create and activate a project virtual environment.\nto install package and development dependencies into active environment:\n\n```bash\n$ make install\n```\n\nto run tests with linting and coverage:\n\n```bash\n$ make test\n```\n\n## changelog\n\nhere described only breaking and the most important changes. the full changelog and documentation for all released versions can be found in the nicely formatted [commit history](https://github.com/frictionlessdata/tableschema-py/commits/master).\n\n#### v1.20\n\n- added --json flag to the cli (#287)\n\n#### v1.19\n\n- deduplicate field names if guessing in infer\n\n#### v1.18\n\n- publish `field.error/cast_function/check_functions`\n\n#### v1.17\n\n- added `schema.missing_values` and `field.missing_values`\n\n#### v1.16\n\n- fixed the way we parse `geopoint`:\n    - as a string it can be in 3 forms (\"default\", \"array\", \"object\") but\n    - as native object it can only be a list/tuple\n\n#### v1.15\n\n- added an experimental `tableschema_preserve_missing_values` environment variable flag\n\n#### v1.14\n\n- allow providing custom guesser and resolver to `table.infer` and `infer`\n\n#### v1.13\n\n- added `missing_values` argument to the `infer` function (#269)\n\n#### v1.12\n\n- support optional custom exception handling for table.iter/read (#259)\n\n#### v1.11\n\n- added `preserve_missing_values` parameter to `field.cast_value`\n\n#### v1.10\n\n- added an ability to check table's integrity while reading\n\n#### v1.9\n\n- implemented the `table.size` and `table.hash` properties\n\n#### v1.8\n\n- added `table.index_foreign_keys_values` and improved foreign key checks performance\n\n#### v1.7\n\n- added `field.schema` property\n\n#### v1.6\n\n- in `strict` mode raise an exception if there are problems in field construction\n\n#### v1.5\n\n- allow providing custom guesser and resolver to schema infer\n\n#### v1.4\n\n- added `schema.update_field` method\n\n#### v1.3\n\n- support datetime with no time for date casting\n\n#### v1.2\n\n- support floats like 1.0 for integer casting\n\n#### v1.1\n\n- added the `confidence` parameter to `infer`\n\n#### v1.0\n\n- the library has been rebased on the frictionless data specs v1 - https://frictionlessdata.io/specs/table-schema/\n\n",
  "docs_url": null,
  "keywords": "frictionless data,open data,json schema,table schema,data package,tabular data package",
  "license": "mit",
  "name": "tableschema",
  "package_url": "https://pypi.org/project/tableschema/",
  "project_url": "https://pypi.org/project/tableschema/",
  "project_urls": {
    "Homepage": "https://github.com/frictionlessdata/tableschema-py"
  },
  "release_url": "https://pypi.org/project/tableschema/1.20.2/",
  "requires_dist": [
    "six (>=1.9)",
    "click (>=3.3)",
    "requests (>=2.5)",
    "cached-property (>=1.5)",
    "python-dateutil (>=2.4)",
    "jsonschema (>=2.5)",
    "unicodecsv (>=0.14)",
    "isodate (>=0.5.4)",
    "rfc3986 (>=1.1.0)",
    "tabulator (>=1.51.3)",
    "mock ; extra == 'develop'",
    "pylama ; extra == 'develop'",
    "pytest ; extra == 'develop'",
    "pytest-cov ; extra == 'develop'"
  ],
  "requires_python": "",
  "summary": "a utility library for working with table schema in python",
  "version": "1.20.2",
  "releases": [],
  "developers": [
    "info@okfn.org",
    "open_knowledge_foundation"
  ],
  "kwds": "tableschema frictionlessdata tableschema_sql tableschema_preserve_missing_values tables",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_tableschema",
  "homepage": "https://github.com/frictionlessdata/tableschema-py",
  "release_count": 79,
  "dependency_ids": [
    "pypi_cached_property",
    "pypi_click",
    "pypi_isodate",
    "pypi_jsonschema",
    "pypi_mock",
    "pypi_pylama",
    "pypi_pytest",
    "pypi_pytest_cov",
    "pypi_python_dateutil",
    "pypi_requests",
    "pypi_rfc3986",
    "pypi_six",
    "pypi_tabulator",
    "pypi_unicodecsv"
  ],
  "documentation_summary": "The `tableschema-py` is a public GitHub repository under the `frictionlessdata` organization, offering a Python library for working with Table Schema. It has garnered 255 stars and 41 forks, indicating its utility and popularity within the community. The library is licensed under the MIT license, ensuring open and permissive usage. It provides features such as working with data tables described by Table Schema, validating and inferring Table Schema from data, and a built-in command-line interface for schema operations. Additionally, it supports a storage/plugins system for connecting tables to various storage backends like SQL databases. The repository also mentions the release of the Frictionless Framework, which extends the functionality of `tableschema-py` to offer a complete data solution without breaking existing software.",
  "embedding": [
    -0.009316937066614628,
    0.014102648012340069,
    0.011416428722441196,
    -0.05720232054591179,
    -0.025264592841267586,
    -0.00044777675066143274,
    -0.025717008858919144,
    -0.006443390157073736,
    -0.0016355890547856688,
    -0.03280014172196388,
    0.03545808419585228,
    -0.0016276363749057055,
    0.0007753805257380009,
    0.031471170485019684,
    -0.0021136298310011625,
    -0.02512321248650551,
    0.019920431077480316,
    -0.01654145121574402,
    0.0005730304983444512,
    0.0009313402697443962,
    0.0382574088871479,
    0.0045488993637263775,
    -0.03709809482097626,
    0.005648128222674131,
    -0.023992173373699188,
    0.04204639047384262,
    -0.0024812177289277315,
    -0.018336975947022438,
    -0.02703184261918068,
    0.021305955946445465,
    0.0395863801240921,
    -0.02714494615793228,
    -0.01968008652329445,
    -0.031018756330013275,
    -0.012604020535945892,
    -0.030311856418848038,
    0.017078695818781853,
    0.018874220550060272,
    0.0074012391269207,
    0.011140738613903522,
    -0.011642636731266975,
    0.0036864816211163998,
    -0.013522990047931671,
    0.014689374715089798,
    -0.008511072024703026,
    -0.011515394784510136,
    0.016216278076171875,
    -0.015438687987625599,
    -0.02301665209233761,
    0.006036922801285982,
    0.012731262482702732,
    0.011904190294444561,
    -0.02775288000702858,
    -0.009571420960128307,
    0.005662266165018082,
    0.008977625519037247,
    0.004043465945869684,
    0.04329053312540054,
    -0.014505580998957157,
    0.017700767144560814,
    0.026961151510477066,
    -0.0018397063249722123,
    -0.02508080005645752,
    0.0038914824835956097,
    -0.0009101332980208099,
    -0.006712011992931366,
    -0.027385292574763298,
    0.0017990595661103725,
    0.015424550510942936,
    0.004538295790553093,
    0.01524075586348772,
    0.07159479707479477,
    -0.01220815721899271,
    -0.00689934054389596,
    0.04097190126776695,
    -0.022366303950548172,
    -0.010554011911153793,
    0.001195544027723372,
    -0.02935047261416912,
    0.012427295558154583,
    -0.0007493136217817664,
    -0.007903138175606728,
    -0.005428989417850971,
    0.015650758519768715,
    0.02209768258035183,
    0.01922767050564289,
    -0.02404872514307499,
    0.011359876953065395,
    -0.011487118899822235,
    -0.021659404039382935,
    0.0025448387023061514,
    0.01403195783495903,
    0.0162445530295372,
    0.01377747394144535,
    -0.016414210200309753,
    0.0464574433863163,
    -0.023667000234127045,
    0.040830522775650024,
    0.005107349716126919,
    -0.029689785093069077,
    -0.004439329728484154,
    0.02471321076154709,
    -0.010087457485496998,
    -0.01628696732223034,
    -0.0338180772960186,
    -0.021829061210155487,
    0.010610563680529594,
    -0.004739762283861637,
    0.005506748333573341,
    0.008680727332830429,
    -0.006814512424170971,
    0.04100017994642258,
    -0.022267337888479233,
    -0.021829061210155487,
    -0.009090729057788849,
    0.011437635868787766,
    0.022846996784210205,
    -0.024854591116309166,
    -0.010723667219281197,
    0.007874862290918827,
    0.021447334438562393,
    0.03486429154872894,
    0.012625227682292461,
    -0.0046690721064805984,
    0.016428347676992416,
    -0.0012856737012043595,
    0.00642571784555912,
    0.008030380122363567,
    0.005485541187226772,
    -0.010511597618460655,
    0.014357131905853748,
    0.01274540089070797,
    0.018322838470339775,
    0.015000410377979279,
    -0.011458843015134335,
    -0.007931414060294628,
    0.0009322239202447236,
    0.004785710480064154,
    -0.026593564078211784,
    -0.019510429352521896,
    0.010235906578600407,
    0.023624585941433907,
    -0.028346676379442215,
    -0.01559420581907034,
    -0.02055664174258709,
    0.000956081785261631,
    0.0011160178110003471,
    -0.009097798727452755,
    0.021913887932896614,
    -0.007832447998225689,
    0.03198013827204704,
    -0.0010002630297094584,
    -0.03048151172697544,
    0.018308700993657112,
    -0.006697874050587416,
    0.006153561174869537,
    -0.0054395925253629684,
    0.0012556305155158043,
    -0.017191799357533455,
    -0.002477683126926422,
    -0.01220815721899271,
    0.024543555453419685,
    -0.016004208475351334,
    -0.027060117572546005,
    -0.01614558696746826,
    0.03398773446679115,
    -0.0009675688925199211,
    -0.01634351909160614,
    -0.012024362571537495,
    0.0007859840407036245,
    0.015042824670672417,
    0.019043875858187675,
    -0.014788340777158737,
    -0.014590408653020859,
    0.00382786151021719,
    -0.0044463989324867725,
    0.028078053146600723,
    -0.0010303062153980136,
    -0.02519390359520912,
    0.010603494942188263,
    0.017799733206629753,
    0.00850400235503912,
    0.021461473777890205,
    0.051518846303224564,
    -0.000992310349829495,
    -0.01849249377846718,
    -0.0006746473372913897,
    0.004757434595376253,
    0.013445231132209301,
    0.01953870616853237,
    0.03243255615234375,
    0.034920841455459595,
    -0.012335398234426975,
    -0.029944268986582756,
    -0.5944743156433105,
    -0.026593564078211784,
    -0.004739762283861637,
    -0.03534498065710068,
    -0.004835193511098623,
    0.0016868392704054713,
    -0.00453476095572114,
    0.021164575591683388,
    -0.039642930030822754,
    0.01866215094923973,
    -0.020174914970993996,
    0.04722089692950249,
    0.015947656705975533,
    -0.008878659456968307,
    -0.017205936834216118,
    -0.0030467375181615353,
    0.010688322596251965,
    -0.022125959396362305,
    0.0019333704840391874,
    0.031782206147909164,
    -0.016004208475351334,
    0.046740204095840454,
    0.00366880907677114,
    -0.005096746608614922,
    -0.004354501608759165,
    -0.0017098134849220514,
    0.027484258636832237,
    -0.002804624382406473,
    -0.001227354514412582,
    -0.008779693394899368,
    -0.02527873031795025,
    0.032658763229846954,
    0.00642571784555912,
    -0.02076871134340763,
    0.042838118970394135,
    0.003739499021321535,
    -0.02714494615793228,
    0.035599466413259506,
    0.01840766705572605,
    0.04719261825084686,
    -0.011536601930856705,
    -0.004308553412556648,
    0.00039122477755881846,
    0.03444014862179756,
    -0.011176083236932755,
    0.011041772551834583,
    0.0031297982204705477,
    -0.0016302872681990266,
    0.0056870076805353165,
    -0.005213384982198477,
    -0.017403868958353996,
    -0.03263048827648163,
    0.01305643655359745,
    0.004527692217379808,
    0.04297949746251106,
    0.013487645424902439,
    0.036673951894044876,
    -0.028162881731987,
    -0.001818499295040965,
    0.007691068109124899,
    0.0161880012601614,
    0.011861776001751423,
    0.018322838470339775,
    -0.02204113081097603,
    -0.008058656007051468,
    0.007100807037204504,
    0.014887306839227676,
    0.0017990595661103725,
    -0.009564352221786976,
    -0.022493546828627586,
    0.016668694093823433,
    -0.005510282702744007,
    -0.01808249205350876,
    -0.017545249313116074,
    -0.0007183867855928838,
    0.05279126390814781,
    0.028049778193235397,
    0.021871475502848625,
    0.003887948114424944,
    0.0322628989815712,
    0.0068639954552054405,
    0.010370217263698578,
    -0.00827779434621334,
    -0.0324891060590744,
    0.04495881870388985,
    0.002445872640237212,
    -0.045722268521785736,
    -0.019156979396939278,
    0.010115733370184898,
    -0.0063338209874928,
    0.01434299349784851,
    0.004276742693036795,
    -0.00776175782084465,
    -0.022140096873044968,
    0.016329381614923477,
    0.04066086560487747,
    -0.01349471416324377,
    0.0007736132829450071,
    -0.025264592841267586,
    -0.02065560780465603,
    0.00760623998939991,
    -0.03616498410701752,
    0.0148307541385293,
    -0.004732693079859018,
    0.023709414526820183,
    0.015905242413282394,
    -0.01938318833708763,
    0.006294941063970327,
    0.021772509440779686,
    -0.015382136218249798,
    0.0025925543159246445,
    -0.05796577036380768,
    -0.0161880012601614,
    0.0064787352457642555,
    0.02800736390054226,
    -0.0282194335013628,
    0.049369871616363525,
    -0.019552843645215034,
    0.009847111999988556,
    -0.008207105100154877,
    -0.01461868453770876,
    0.010801426135003567,
    -0.0021701818332076073,
    0.011444705538451672,
    0.0021772508043795824,
    0.020443538203835487,
    0.024373900145292282,
    -0.010250044986605644,
    -0.013636093586683273,
    0.007471929304301739,
    0.012455571442842484,
    0.02724391222000122,
    0.03531670570373535,
    -0.01994870789349079,
    0.0260563213378191,
    -0.00013342731108423322,
    0.030283579602837563,
    0.0036652747076004744,
    -0.0026473391335457563,
    -0.0019881553016602993,
    -0.0073517560958862305,
    -0.007874862290918827,
    0.014145061373710632,
    -0.015269031748175621,
    0.003151005133986473,
    -0.013268506154417992,
    -0.028841504827141762,
    0.0023769501131027937,
    -0.000775822380091995,
    0.02250768430531025,
    -0.04272501543164253,
    -0.010575219057500362,
    -0.01464696042239666,
    0.006146492436528206,
    0.0038172579370439053,
    -0.01881766878068447,
    -0.0436863973736763,
    -0.027682190760970116,
    -0.009027108550071716,
    -0.0051957122050225735,
    -0.00706899631768465,
    0.00418838020414114,
    -0.026070458814501762,
    -0.005365368444472551,
    -0.04020845144987106,
    -0.02133423089981079,
    -0.009670387022197247,
    0.011579016223549843,
    -0.008115207776427269,
    -0.03135806694626808,
    -0.005163901951164007,
    -0.01315540261566639,
    0.011303325183689594,
    0.001647076103836298,
    0.011289186775684357,
    0.015325584448873997,
    -0.0064964075572788715,
    0.0009825904853641987,
    0.02414769120514393,
    -0.008086931891739368,
    -0.015424550510942936,
    -0.015862828120589256,
    -0.02359630912542343,
    -0.020344572141766548,
    0.03565601631999016,
    0.0016523778904229403,
    0.015000410377979279,
    7.577080396004021e-05,
    0.0018573787529021502,
    -0.0020164311863482,
    -0.0175735242664814,
    -0.007001840975135565,
    -0.011614360846579075,
    0.010327803902328014,
    -0.0022832858376204967,
    0.009408834390342236,
    0.0021436731331050396,
    0.0010638840030878782,
    -0.018874220550060272,
    0.0379180982708931,
    -0.005990974605083466,
    0.018110768869519234,
    -0.010207630693912506,
    -0.031160136684775352,
    0.0016373562393710017,
    -0.005135626066476107,
    0.02010422572493553,
    -0.020033536478877068,
    0.005347695667296648,
    0.0175169724971056,
    0.05315885320305824,
    0.004852865822613239,
    -0.015636619180440903,
    -0.017926974222064018,
    0.002917728153988719,
    0.0004890862037427723,
    -0.00786072388291359,
    0.004474674817174673,
    -0.011748671531677246,
    0.012879711575806141,
    0.0004027118848171085,
    0.006729684770107269,
    0.021206989884376526,
    0.017559386789798737,
    -0.0043792431242764,
    0.0067438227124512196,
    -0.0008270725957117975,
    0.016795935109257698,
    0.011649706400930882,
    -0.03118841163814068,
    -0.0036829470191150904,
    0.02291768603026867,
    -0.0006225134711712599,
    -0.01897318661212921,
    0.01305643655359745,
    -0.013890577480196953,
    0.030396685004234314,
    -0.046853307634592056,
    0.024995971471071243,
    -0.026749081909656525,
    0.02410527691245079,
    0.00431562215089798,
    0.03172565624117851,
    -0.005322954151779413,
    -0.002233802806586027,
    0.011161945760250092,
    0.02447286620736122,
    0.015792137011885643,
    -0.004354501608759165,
    0.01644248515367508,
    0.001231772592291236,
    0.019298359751701355,
    -3.904516051989049e-05,
    0.026381494477391243,
    0.028912195935845375,
    -0.008242449723184109,
    -0.011126600205898285,
    0.011812292970716953,
    0.021348368376493454,
    0.025462524965405464,
    -0.01895904913544655,
    -0.00010018093598773703,
    0.011649706400930882,
    0.010200561955571175,
    0.04671192914247513,
    -0.010440907441079617,
    -0.013424023985862732,
    -0.050133321434259415,
    -0.00752848107367754,
    -0.020994918420910835,
    -0.020641470327973366,
    -0.00025161210214719176,
    -0.018153183162212372,
    -0.01700800471007824,
    0.021051472052931786,
    -0.009302799589931965,
    0.0074577913619577885,
    0.028360813856124878,
    -0.0008270725957117975,
    -0.01228591613471508,
    -0.031329791992902756,
    -0.033280834555625916,
    0.028770815581083298,
    0.0036970851942896843,
    0.012858504429459572,
    -0.0024158295709639788,
    -0.010052112862467766,
    -0.009331075474619865,
    -0.007910206913948059,
    0.0056021795608103275,
    -0.010278320871293545,
    0.015226618386805058,
    -0.0087867621332407,
    0.01712111011147499,
    -0.03786154463887215,
    0.0019475085427984595,
    0.028770815581083298,
    0.009373488835990429,
    0.012844366021454334,
    -0.006623649504035711,
    -0.006871064659208059,
    0.016202140599489212,
    -0.02365286275744438,
    0.014067302457988262,
    0.06294234097003937,
    0.013091781176626682,
    0.001524252351373434,
    -0.0014137992402538657,
    -0.004577175248414278,
    -0.03834223747253418,
    0.00911900494247675,
    0.002774581080302596,
    -0.00847572647035122,
    -0.0010895091108977795,
    -0.01710697077214718,
    -0.00303966854698956,
    -0.012702986598014832,
    -0.0040964833460748196,
    0.023200446739792824,
    -0.006022784858942032,
    -0.021616991609334946,
    -0.04111328348517418,
    -0.03169738128781319,
    -0.0021737164352089167,
    0.03141462057828903,
    0.021602852270007133,
    0.005086143035441637,
    0.0148307541385293,
    -0.04105672985315323,
    0.01655558869242668,
    -0.015424550510942936,
    -0.011359876953065395,
    0.011239704675972462,
    -0.004244932439178228,
    -0.0030944531317800283,
    0.000917202269192785,
    0.005842525511980057,
    0.017799733206629753,
    0.01927008479833603,
    0.008574692532420158,
    -0.00382786151021719,
    0.015071100555360317,
    -0.004216656554490328,
    -0.009295729920268059,
    -0.012582813389599323,
    0.0063338209874928,
    0.007093737833201885,
    0.0068251159973442554,
    0.019397325813770294,
    0.007330549415200949,
    0.02194216474890709,
    -0.0034443684853613377,
    -0.0021136298310011625,
    -0.03124496340751648,
    0.000501898757647723,
    -0.0012326563009992242,
    0.007782964967191219,
    0.007775896228849888,
    -0.06345131248235703,
    0.04894573241472244,
    0.029067713767290115,
    -0.009910732507705688,
    -0.007422446273267269,
    0.048860903829336166,
    0.0350339449942112,
    -0.007585033308714628,
    0.01686662621796131,
    0.013353333808481693,
    -0.00639744196087122,
    -0.012377812527120113,
    -0.007563826162368059,
    0.009670387022197247,
    -0.01447023544460535,
    0.007980897091329098,
    -0.007563826162368059,
    0.006026319228112698,
    -0.02471321076154709,
    0.0032429019920527935,
    0.02759736217558384,
    -0.007086669094860554,
    0.031273238360881805,
    -0.026664255186915398,
    -0.0018096630228683352,
    -0.03885120525956154,
    -0.0010497459443286061,
    -0.025307007133960724,
    -0.003629929618909955,
    0.0029566078446805477,
    0.004262604750692844,
    0.02133423089981079,
    -0.011635567992925644,
    0.01228591613471508,
    -0.025773560628294945,
    -0.009055384434759617,
    -0.0037430336233228445,
    -0.053582992404699326,
    -0.027512533590197563,
    -0.005920284427702427,
    0.026070458814501762,
    -0.004778641741722822,
    0.008009172976016998,
    -0.008716072887182236,
    -0.019255945459008217,
    -0.015848690643906593,
    -0.01577799953520298,
    -0.027894260361790657,
    -0.01567903347313404,
    -0.03828568384051323,
    -0.0006817163666710258,
    -0.021206989884376526,
    0.003013159614056349,
    0.01788455992937088,
    -0.0019404394552111626,
    0.048549868166446686,
    0.010087457485496998,
    -0.008313139900565147,
    -0.008079863153398037,
    -0.0006901107844896615,
    0.009253316558897495,
    0.00620657904073596,
    0.01695145294070244,
    -0.003803119994699955,
    0.0017566456226632,
    0.0038455340545624495,
    -0.014307648874819279,
    -0.01860559917986393,
    0.014074372127652168,
    -0.019043875858187675,
    0.010356079787015915,
    0.01259695179760456,
    -0.01297867763787508,
    0.012936263345181942,
    0.003707688534632325,
    0.010179354809224606,
    0.012194018810987473,
    -0.01587696559727192,
    0.01599006913602352,
    0.005322954151779413,
    0.034100838005542755,
    -0.009776421822607517,
    0.03506222367286682,
    0.012830228544771671,
    0.0010479787597432733,
    -0.012893849052488804,
    0.011267980560660362,
    -0.008518140763044357,
    0.017135247588157654,
    0.012399019673466682,
    -0.01343816239386797,
    0.03319600597023964,
    0.0012671175645664334,
    -0.020796988159418106,
    -0.01587696559727192,
    -0.01839352771639824,
    0.03972775861620903,
    0.006697874050587416,
    0.007804172113537788,
    0.006135888863354921,
    -0.004916486795991659,
    0.005298212636262178,
    0.011423498392105103,
    0.0003874693647958338,
    -0.011423498392105103,
    -0.0008531394996680319,
    0.01907215267419815,
    -0.006121750921010971,
    -0.016626279801130295,
    -0.009613835252821445,
    -0.029689785093069077,
    -0.023355964571237564,
    -0.03395945951342583,
    -0.008306071162223816,
    0.011098324321210384,
    0.011600223369896412,
    0.02230975218117237,
    0.011345739476382732,
    0.007705206051468849,
    -0.00025161210214719176,
    0.0017619472928345203,
    0.0027321670204401016,
    0.014943858608603477,
    0.008694865740835667,
    0.005612783133983612,
    0.038511890918016434,
    -0.0016797702992334962,
    0.012172811664640903,
    0.023624585941433907,
    -0.012271777726709843,
    -0.012462640181183815,
    -0.015664895996451378,
    -0.012151604518294334,
    0.00010040184133686125,
    -0.001959879184141755,
    -0.008440381847321987,
    0.004100017715245485,
    -0.004852865822613239,
    0.00453476095572114,
    -0.017870422452688217,
    0.004145966377109289,
    0.01819559745490551,
    0.008779693394899368,
    0.005482006818056107,
    -0.025462524965405464,
    -0.0029336335137486458,
    -0.005425454583019018,
    -0.0006825999589636922,
    0.02246527001261711,
    0.011840568855404854,
    -0.04637261480093002,
    -0.016569728031754494,
    0.04230087623000145,
    -0.0140814408659935,
    0.0017062789993360639,
    0.004997780546545982,
    0.016159726306796074,
    -0.018167320638895035,
    0.00041905895341187716,
    0.010546942241489887,
    0.033026352524757385,
    -0.009210902266204357,
    0.01963767223060131,
    -0.013600748963654041,
    -0.028092192485928535,
    -0.00022709151380695403,
    0.014307648874819279,
    0.038427066057920456,
    0.012816090136766434,
    0.021235264837741852,
    -0.015424550510942936,
    0.011897120624780655,
    0.028134604915976524,
    -0.00399751728400588,
    0.005114418920129538,
    -0.00932400580495596,
    -0.026127010583877563,
    -0.033704973757267,
    -0.019920431077480316,
    -0.03288497030735016,
    -0.008984694257378578,
    -0.002133069559931755,
    0.010030905716121197,
    0.014456097967922688,
    -0.025533214211463928,
    0.003849068423733115,
    0.020853539928793907,
    0.022846996784210205,
    0.04688158258795738,
    0.01784214749932289,
    0.027116669341921806,
    0.030877375975251198,
    0.00042899971595034003,
    0.0024759159423410892,
    -0.002702123951166868,
    0.0003419627028051764,
    -0.01870456524193287,
    0.021546300500631332,
    0.024684935808181763,
    0.002131302375346422,
    -0.02235216647386551,
    -0.016173863783478737,
    -0.020372847095131874,
    -0.005973301827907562,
    -0.02250768430531025,
    0.010419700294733047,
    0.007910206913948059,
    0.00932400580495596,
    -0.026240114122629166,
    0.023214584216475487,
    -0.011465911753475666,
    0.020330432802438736,
    -0.014321786351501942,
    -0.00899176299571991,
    0.017389731481671333,
    -0.024077001959085464,
    -0.01953870616853237,
    0.006086405832320452,
    0.002603157889097929,
    0.01628696732223034,
    0.009946078062057495,
    -0.03562774136662483,
    -0.004103552550077438,
    -0.02985944040119648,
    -0.026635978370904922,
    0.009656248614192009,
    0.024077001959085464,
    0.043714672327041626,
    -0.018534908071160316,
    0.0004992478643544018,
    0.025759423151612282,
    0.009840043261647224,
    -0.016923177987337112,
    -0.012271777726709843,
    -0.010384355671703815,
    0.04461950436234474,
    -0.030877375975251198,
    -0.0147742023691535,
    -0.006114681717008352,
    0.012391950935125351,
    0.021814923733472824,
    -0.00634795892983675,
    -0.0060899402014911175,
    -0.011416428722441196,
    -0.003863206598907709,
    0.0087584862485528,
    -0.002163112862035632,
    -0.028601160272955894,
    -0.036476019769907,
    -0.012844366021454334,
    -0.004732693079859018,
    -0.009924870915710926,
    -0.0018397063249722123,
    0.005782438907772303,
    0.01259695179760456,
    -0.014760064892470837,
    -0.004881142172962427,
    0.0042838118970394135,
    0.0024812177289277315,
    -0.006227785721421242,
    0.016527313739061356,
    -0.013890577480196953,
    0.005863732658326626,
    0.05248022824525833,
    -0.012688848190009594,
    0.010702460072934628,
    -0.0007051323773339391,
    0.005223988555371761,
    -0.027512533590197563,
    0.02867184951901436,
    -0.01706455647945404,
    0.0037748441100120544,
    0.0068639954552054405,
    -0.002219664864242077,
    -0.011819361709058285,
    -0.011374015361070633,
    0.03362014517188072,
    0.018110768869519234,
    -0.012399019673466682,
    -0.03254565969109535,
    0.01731904037296772,
    0.008284864015877247,
    0.01539627369493246,
    0.000752848107367754,
    -0.011310393922030926,
    0.025462524965405464,
    0.001015284564346075,
    -0.004421657416969538,
    -0.00039939829730428755,
    -0.012003155425190926,
    0.014859030023217201,
    -0.0008204454206861556,
    -0.010016768239438534,
    0.0036440675612539053,
    -0.041396044194698334,
    0.023921484127640724,
    0.014385407790541649,
    0.0069488235749304295,
    -0.00012182973296148703,
    0.024699073284864426,
    -0.00011017693759640679,
    -0.012752469629049301,
    -0.015071100555360317,
    0.027470119297504425,
    -0.007563826162368059,
    -0.01447023544460535,
    0.003629929618909955,
    0.027385292574763298,
    0.01758766360580921,
    -0.015099376440048218,
    -0.010589356534183025,
    0.00432976009324193,
    -0.019354911521077156,
    -0.008320208638906479,
    -0.032771866768598557,
    0.0016506107058376074,
    -0.01403195783495903,
    0.021928027272224426,
    0.010497459210455418,
    -0.01994870789349079,
    -0.018534908071160316,
    -0.009422971867024899,
    -0.02837495133280754,
    -0.022394580766558647,
    0.0060934750363230705,
    0.0161880012601614,
    8.742360660107806e-05,
    0.01395419891923666,
    0.016767660155892372,
    0.010511597618460655,
    -0.009507800452411175,
    0.03684360906481743,
    -0.017912836745381355,
    0.013763335533440113,
    0.014272303320467472,
    -0.004368639551103115,
    0.013247299008071423,
    -0.004559502471238375,
    -0.028770815581083298,
    -0.007790034171193838,
    0.004746831022202969,
    0.00379605102352798,
    0.0006167699466459453,
    0.01531144604086876,
    0.009415903128683567,
    0.009656248614192009,
    -0.004577175248414278,
    -0.007613309193402529,
    -0.0006927616195753217,
    -0.005482006818056107,
    0.0087584862485528,
    -0.018633874133229256,
    -0.008701934479176998,
    0.006810978055000305,
    0.010030905716121197,
    -0.004821055568754673,
    -0.03325255960226059,
    -0.019552843645215034,
    -0.028813229873776436,
    0.012420226819813251,
    -0.009903663769364357,
    -0.005941491574048996,
    0.016414210200309753,
    0.009232109412550926,
    0.020938366651535034,
    0.009500730782747269,
    0.009090729057788849,
    0.0351470485329628,
    0.012780745513737202,
    -0.01645662449300289,
    -0.01886008307337761,
    0.016385933384299278,
    -0.02348320558667183,
    0.009104867465794086,
    0.019029738381505013,
    -0.020994918420910835,
    -0.002808158751577139,
    0.006305544637143612,
    0.03313945606350899,
    0.006065198685973883,
    0.013989543542265892,
    -0.008002104237675667,
    -0.02256423607468605,
    0.0012927426723763347,
    -0.01447023544460535,
    0.0067438227124512196,
    -0.01649903692305088,
    -0.006256061606109142,
    0.0015021617291495204,
    -0.000721037620678544,
    0.016428347676992416,
    -0.010285389609634876,
    0.00022664970310870558,
    -0.016004208475351334,
    -0.0016099639469757676,
    0.0005116186221130192,
    -0.0030149270314723253,
    -0.022125959396362305,
    -0.00853227823972702,
    0.009189695119857788,
    -0.016074897721409798,
    0.01521247997879982,
    0.1359509378671646,
    0.03229117393493652,
    0.04020845144987106,
    0.015283170156180859,
    0.0038066545967012644,
    0.006068733520805836,
    0.015735585242509842,
    -0.02560390532016754,
    -0.017955251038074493,
    0.020796988159418106,
    -0.01467523630708456,
    -0.018266286700963974,
    0.04054776206612587,
    -0.005591575987637043,
    0.009012970142066479,
    -0.017856284976005554,
    -0.025391835719347,
    -0.020415261387825012,
    -0.014986271969974041,
    -0.0016983264358714223,
    0.0010391424875706434,
    -0.034298770129680634,
    -0.03212152048945427,
    -0.027385292574763298,
    0.015693172812461853,
    -0.01681007258594036,
    -0.02527873031795025,
    -0.009578489698469639,
    0.018534908071160316,
    0.014943858608603477,
    -0.010101595893502235,
    0.014215751551091671,
    -0.007288135122507811,
    -0.017714904621243477,
    -0.03972775861620903,
    -0.012893849052488804,
    0.013127126730978489,
    -0.0023239324800670147,
    0.01886008307337761,
    0.0005297329043969512,
    -0.025377696380019188,
    -0.032715316861867905,
    -0.0012494451366364956,
    -0.018732840195298195,
    -0.012922124937176704,
    -0.04148086905479431,
    -0.016569728031754494,
    0.023158032447099686,
    0.00773348193615675,
    0.02045767568051815,
    -0.031895313411951065,
    -0.007585033308714628,
    0.02065560780465603,
    0.023271135985851288,
    -0.0015162996714934707,
    -0.02035870961844921,
    0.007203307468444109,
    0.029067713767290115,
    0.025321144610643387,
    -0.008412105962634087,
    -0.014844892546534538,
    0.04148086905479431,
    -0.012915056198835373,
    0.02410527691245079,
    -0.061811305582523346,
    -0.0017875725170597434,
    -0.006422183010727167,
    -0.012003155425190926,
    -0.011260910890996456,
    -0.01840766705572605,
    -0.012554537504911423,
    -0.031527724117040634,
    -0.003401954425498843,
    -0.00741537706926465,
    -0.02246527001261711,
    -0.02754081040620804,
    0.03141462057828903,
    -0.012059708125889301,
    -0.0049730390310287476,
    0.02317216992378235,
    -0.017446283251047134,
    -0.006673132535070181,
    -0.02194216474890709,
    0.021419059485197067,
    -0.0065812356770038605,
    -0.01686662621796131,
    0.012632296420633793,
    -0.014371269382536411,
    -0.023879069834947586,
    0.0015825715381652117,
    0.0014880237868055701,
    0.001512765185907483,
    0.0018291028682142496,
    -0.01819559745490551,
    0.01675352081656456,
    0.00381018896587193,
    -0.002642037346959114,
    -0.0009154350263997912,
    -0.02353975735604763,
    -0.0027887190226465464,
    -0.030311856418848038,
    0.0759492963552475,
    0.005937956739217043,
    0.02590080350637436,
    -0.002698589349165559,
    -0.009550213813781738,
    -0.005202781409025192,
    0.03706981614232063,
    0.0075991712510585785,
    -0.02009008824825287,
    0.022224925458431244,
    -0.04908711090683937,
    -0.0034532046411186457,
    -0.005421920213848352,
    0.017177661880850792,
    -0.004418122582137585,
    -0.010638839565217495,
    -0.015862828120589256,
    0.012003155425190926,
    -0.0005973302177153528,
    0.001989922486245632,
    -0.009825904853641987,
    0.037804991006851196,
    -0.009543145075440407,
    -0.006895806174725294,
    -0.026183562353253365,
    -0.019354911521077156,
    0.013452299870550632,
    -0.0013042298378422856,
    -0.012526261620223522,
    0.0395863801240921,
    -0.033280834555625916,
    0.02092422917485237,
    0.007535550277680159,
    -0.0169090386480093,
    -0.0141379926353693,
    -0.009946078062057495,
    0.004400450270622969,
    -0.006736753508448601,
    0.010094527155160904,
    -0.027003565803170204,
    0.0040399315766990185,
    0.011593153700232506,
    -0.012505054473876953,
    0.010101595893502235,
    -0.0019227670272812247,
    -0.0015816879458725452,
    -0.017050419002771378,
    0.012109191156923771,
    -0.014887306839227676,
    0.002900055842474103,
    -0.011154876090586185,
    0.003958637826144695,
    -0.013742129318416119,
    0.016046620905399323,
    -0.02718736045062542,
    -0.006570632103830576,
    -0.021390782669186592,
    0.0036087227053940296,
    0.001227354514412582,
    -0.04507192224264145,
    0.019962845370173454,
    0.01511351391673088,
    0.0008341415668837726,
    -0.030764272436499596,
    -0.005803646054118872,
    -0.17949596047401428,
    0.010964013636112213,
    0.011402291245758533,
    -0.067409947514534,
    0.014477304182946682,
    0.0013952432200312614,
    0.009903663769364357,
    0.014844892546534538,
    -0.0002973396622110158,
    -0.01356540434062481,
    0.04009534791111946,
    0.025250455364584923,
    -0.004043465945869684,
    -0.00656709773465991,
    -0.0026473391335457563,
    0.0014438425423577428,
    -0.0009755215141922235,
    -0.005379506386816502,
    0.03602360561490059,
    0.012243501842021942,
    0.021009057760238647,
    -0.02718736045062542,
    0.020853539928793907,
    0.013530058786273003,
    0.020443538203835487,
    -0.013791612349450588,
    -0.029887717217206955,
    0.013947130180895329,
    -0.022790445014834404,
    0.004912952426820993,
    -0.006107612978667021,
    0.01577799953520298,
    0.030509788542985916,
    -0.02826184779405594,
    0.017361454665660858,
    0.02878495305776596,
    0.0074577913619577885,
    -0.016004208475351334,
    -0.005980371031910181,
    0.02584424987435341,
    0.010596425272524357,
    0.026028044521808624,
    -0.00814348366111517,
    -0.022776305675506592,
    0.0020959575194865465,
    0.011041772551834583,
    0.006086405832320452,
    -0.017488697543740273,
    0.005906146485358477,
    -0.03254565969109535,
    0.01492972020059824,
    -0.012010225094854832,
    0.020782848820090294,
    -0.0030007888562977314,
    0.0049730390310287476,
    -0.002131302375346422,
    -0.0127241937443614,
    0.009288661181926727,
    0.004004586488008499,
    -0.006867529824376106,
    -0.008079863153398037,
    -0.029633233323693275,
    0.00840503629297018,
    -0.0009410601342096925,
    -0.019694223999977112,
    -0.006874599028378725,
    -0.01659800298511982,
    0.0010241208365187049,
    -0.005775370169430971,
    0.016923177987337112,
    0.02061319351196289,
    0.030311856418848038,
    -0.0016647486481815577,
    0.014173338189721107,
    -0.0006613929872401059,
    0.020372847095131874,
    -0.029378749430179596,
    0.013819888234138489,
    0.011048841290175915,
    -0.024755625054240227,
    -0.017290765419602394,
    0.026141148060560226,
    0.00028408528305590153,
    0.0015189505647867918,
    0.041763629764318466,
    0.000725455756764859,
    -0.02426079474389553,
    -0.018478356301784515,
    -0.029407024383544922,
    -0.007952621206641197,
    0.018153183162212372,
    -0.014816616661846638,
    -0.00873727910220623,
    0.005959163885563612,
    0.017926974222064018,
    0.005683473311364651,
    -0.004895280115306377,
    -0.0076345158740878105,
    0.006468131672590971,
    -0.03229117393493652,
    0.021673543378710747,
    0.0154952397570014,
    -0.02246527001261711,
    0.023087341338396072,
    0.032517384737730026,
    0.019807327538728714,
    -0.03336566314101219,
    0.01449144259095192,
    0.00919676385819912,
    0.0011928931344300508,
    -0.020952505990862846,
    0.017658352851867676,
    0.02909598872065544,
    0.0022726822644472122,
    0.012271777726709843,
    0.03534498065710068,
    0.021404920145869255,
    -0.019199393689632416,
    0.0017204169416800141,
    -0.00031677939114160836,
    0.027413567528128624,
    0.0006808327161706984,
    0.007365894038230181,
    0.03822913393378258,
    -0.023313550278544426,
    -0.02414769120514393,
    -0.09042660146951675,
    -0.011861776001751423,
    0.00017716671572998166,
    0.019213533028960228,
    -0.020429398864507675,
    -0.03135806694626808,
    0.0059308880008757114,
    0.03305462747812271,
    -0.017205936834216118,
    -0.0014606313779950142,
    -0.022960100322961807,
    -0.00019428694213274866,
    -0.028205296024680138,
    -0.01261815894395113,
    -0.020726297050714493,
    0.009126074612140656,
    -0.031386345624923706,
    0.009415903128683567,
    -0.014123855158686638,
    0.0020358709152787924,
    -0.0025678130332380533,
    0.016272829845547676,
    0.006775632966309786,
    0.0004095599870197475,
    0.01511351391673088,
    0.02363872341811657,
    -0.03480773791670799,
    0.020386986434459686,
    0.010801426135003567,
    -0.0057046799920499325,
    0.00363699859008193,
    -0.036476019769907,
    -0.00801624171435833,
    -0.006510545499622822,
    -0.000873904675245285,
    -0.011706258170306683,
    -0.03048151172697544,
    -0.012653503566980362,
    0.030707720667123795,
    -0.03870982304215431,
    -0.026452183723449707,
    -0.015042824670672417,
    0.03257393464446068,
    0.005227522924542427,
    -0.014505580998957157,
    0.00203056912869215,
    -0.02985944040119648,
    0.02580183744430542,
    0.050642289221286774,
    -0.024190105497837067,
    -0.008284864015877247,
    -0.009797628968954086,
    -0.009882456623017788,
    -0.024684935808181763,
    0.020641470327973366,
    -0.009691594168543816,
    -0.001528670429252088,
    0.005591575987637043,
    -0.001015284564346075,
    0.0037147575058043003,
    -0.008002104237675667,
    -0.010546942241489887,
    0.0010197027586400509,
    0.030594617128372192,
    -0.009444179013371468,
    0.012165742926299572,
    0.01784214749932289,
    -0.018888358026742935,
    0.050755392760038376,
    -0.0274418443441391,
    -0.023115618154406548,
    -0.009345212951302528,
    -0.02862943522632122,
    0.004803383257240057,
    -0.008341415785253048,
    0.0031704448629170656,
    -0.00039984012255445123,
    -0.0154952397570014,
    0.0070902034640312195,
    -0.01876111701130867,
    -0.002422898542135954,
    0.01346643827855587,
    -0.023115618154406548,
    -0.02718736045062542,
    0.031782206147909164,
    0.01963767223060131,
    0.015028686262667179,
    -0.0004259070265106857,
    0.049567803740501404,
    -0.03280014172196388,
    0.003191651776432991,
    -0.007768827024847269,
    0.031160136684775352,
    -0.00842624343931675,
    0.011494188569486141,
    -0.002329234266653657,
    -0.004580709617584944,
    0.011480050161480904,
    -0.01808249205350876,
    -0.0037501025944948196,
    -0.07312169671058655,
    -0.029463576152920723,
    -0.07193410396575928,
    0.022705616429448128,
    0.029746336862444878,
    -0.026452183723449707,
    0.0020959575194865465,
    -0.024854591116309166,
    -0.016385933384299278,
    -0.015071100555360317,
    -0.0064575280994176865,
    -0.00827779434621334,
    -0.025066660717129707,
    -0.009854180738329887,
    -0.018365252763032913,
    -0.006086405832320452,
    -0.002384019084274769,
    0.00689934054389596,
    0.03186703473329544,
    -0.018789391964673996,
    0.05960577726364136,
    0.018068354576826096,
    -0.019213533028960228,
    0.01891663484275341,
    0.028148744255304337,
    0.008440381847321987,
    -0.01654145121574402,
    -0.007521412335336208,
    -0.01825214922428131,
    0.007252790499478579,
    -0.01433592475950718,
    -0.029689785093069077,
    0.01349471416324377,
    -0.026593564078211784,
    -0.011041772551834583,
    0.026918739080429077,
    0.023610448464751244,
    0.004085879772901535,
    0.040067072957754135,
    -0.019722500815987587,
    0.0505574606359005,
    0.01799766533076763,
    -0.005959163885563612,
    -0.023115618154406548,
    0.024854591116309166,
    -0.038738101720809937,
    0.0011831732699647546,
    0.023723552003502846,
    0.006408045068383217,
    0.0030626426450908184,
    0.027229774743318558,
    0.0038066545967012644,
    0.0010912762954831123,
    0.019708361476659775,
    -0.022691478952765465,
    -0.010681253857910633,
    0.009154350496828556,
    -0.01700800471007824,
    0.023667000234127045,
    0.0029194955714046955,
    0.005026056431233883,
    -0.01716352254152298,
    0.015382136218249798,
    0.005676404107362032,
    0.00379605102352798,
    -0.000725455756764859,
    -0.006415114272385836,
    -0.011840568855404854,
    -0.00827072560787201,
    -0.02471321076154709,
    -0.010568149387836456,
    -0.02102319523692131,
    -0.039190515875816345,
    -0.004517088644206524,
    0.04018017649650574,
    0.011133668944239616,
    0.015226618386805058,
    0.004008120857179165,
    -0.0309904795140028,
    0.006666063796728849,
    -0.012349536642432213,
    0.028742538765072823,
    0.027894260361790657,
    -0.0254483874887228,
    -0.030820824205875397,
    0.028954608365893364,
    0.03817258030176163,
    -0.0013192514888942242,
    -0.013862301595509052,
    0.01686662621796131,
    -0.0013492946745827794,
    0.0014526788145303726,
    -0.017389731481671333,
    0.0005694960127584636,
    0.0016992100281640887,
    0.031018756330013275,
    0.005001314915716648,
    0.0035062222741544247,
    -0.018831806257367134,
    -0.013014022260904312,
    0.03904913738369942,
    0.007153824437409639,
    -0.0002843062102328986,
    -0.01343816239386797,
    0.011246773414313793,
    -0.024798039346933365,
    -0.04312087967991829,
    -0.01220815721899271,
    -0.0041601043194532394,
    -0.011741602793335915,
    0.0029566078446805477,
    0.023469068109989166,
    0.01536799781024456,
    0.007224514149129391,
    -0.0030644098296761513,
    0.006450459361076355,
    -0.0021825525909662247,
    0.011614360846579075,
    -0.019750775769352913,
    0.018322838470339775,
    -0.004633727017790079,
    0.009394695982336998,
    -0.0009790559997782111,
    0.01716352254152298,
    0.03263048827648163,
    -0.01681007258594036,
    0.010398494079709053,
    0.0022231994662433863,
    0.0029972544871270657,
    -0.012674710713326931,
    0.008235380984842777,
    -0.01829456351697445,
    -0.006605977192521095,
    0.024274934083223343,
    -0.043601568788290024,
    0.007185634691268206,
    -0.0240628644824028,
    -0.01182643137872219,
    -0.022111820057034492,
    -0.014887306839227676,
    -0.005870801396667957,
    0.06622235476970673,
    -0.008624175563454628,
    -0.0154669638723135,
    -0.006871064659208059,
    0.0011743369977921247,
    -0.009649179875850677,
    0.031075308099389076,
    -0.011600223369896412,
    -0.007691068109124899,
    -0.034666359424591064,
    -0.0022037597373127937,
    -0.019156979396939278,
    -0.029435301199555397,
    -0.025151489302515984,
    -0.011932466179132462,
    0.024840453639626503,
    -0.017347317188978195,
    0.01659800298511982,
    -0.01983560435473919,
    0.011041772551834583,
    0.009430041536688805,
    0.008129346184432507,
    0.00724572129547596,
    -0.020429398864507675,
    -0.01870456524193287,
    -0.001230005407705903,
    0.03828568384051323,
    -2.7295714971842244e-05,
    0.012116259895265102,
    -0.04280984029173851,
    0.010794357396662235,
    0.012710055336356163,
    -0.013445231132209301,
    -0.013042298145592213,
    0.002437036484479904,
    -0.00024211312120314687,
    -0.00858176127076149,
    -0.0029442370869219303,
    -0.0024087605997920036,
    -0.007072530686855316,
    -0.004368639551103115,
    -0.012420226819813251,
    -0.03633464127779007,
    -0.04204639047384262,
    0.005170970689505339,
    -0.019976984709501266,
    0.02626839093863964,
    -0.01587696559727192,
    -0.04343191534280777
  ]
}
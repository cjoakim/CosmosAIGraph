{
  "classifiers": [
    "development status :: 4 - beta",
    "framework :: aws cdk",
    "framework :: aws cdk :: 2",
    "intended audience :: developers",
    "license :: osi approved",
    "operating system :: os independent",
    "programming language :: javascript",
    "programming language :: python :: 3 :: only",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "typing :: typed"
  ],
  "description": "the cdk construct library for aws::batch\n# aws batch construct library\n\n<!--begin stability banner-->---\n\n\n![cdk-constructs: developer preview](https://img.shields.io/badge/cdk--constructs-developer--preview-informational.svg?style=for-the-badge)\n\n> the apis of higher level constructs in this module are in **developer preview** before they\n> become stable. we will only make breaking changes to address unforeseen api issues. therefore,\n> these apis are not subject to [semantic versioning](https://semver.org/), and breaking changes\n> will be announced in release notes. this means that while you may use them, you may need to\n> update your source code when upgrading to a newer version of this package.\n\n---\n<!--end stability banner-->\n\nthis module is part of the [aws cloud development kit](https://github.com/aws/aws-cdk) project.\n\naws batch is a batch processing tool for efficiently running hundreds of thousands computing jobs in aws.\nbatch can dynamically provision [amazon ec2](https://aws.amazon.com/ec2/) instances to meet the resource requirements of submitted jobs\nand simplifies the planning, scheduling, and executions of your batch workloads. batch achieves this through four different resources:\n\n* computeenvironments: contain the resources used to execute jobs\n* jobdefinitions: define a type of job that can be submitted\n* jobqueues: route waiting jobs to computeenvironments\n* schedulingpolicies: applied to queues to control how and when jobs exit the jobqueue and enter the computeenvironment\n\n`computeenvironment`s can be managed or unmanaged. batch will automatically provision ec2 instances in a managed `computeenvironment` and will\nnot provision any instances in an unmanaged `computeenvironment`. managed `computeenvironment`s can use ecs, fargate, or eks resources to spin up\nec2 instances in (ensure your eks cluster has [been configured](https://docs.aws.amazon.com/batch/latest/userguide/getting-started-eks.html)\nto support a batch computeenvironment before linking it). you can use launch templates and placement groups to configure exactly how these resources\nwill be provisioned.\n\n`jobdefinition`s can use either ecs resources or eks resources. ecs `jobdefinition`s can use multiple containers to execute distributed workloads.\neks `jobdefinition`s can only execute a single container. submitted jobs use `jobdefinition`s as templates.\n\n`jobqueue`s must link at least one `computeenvironment`. jobs exit the queue in fifo order unless a `schedulingpolicy` is specified.\n\n`schedulingpolicy`s tell the scheduler how to choose which jobs should be executed next by the computeenvironment.\n\n## use cases & examples\n\n### cost optimization\n\n#### spot instances\n\nspot instances are significantly discounted ec2 instances that can be reclaimed at any time by aws.\nworkloads that are fault-tolerant or stateless can take advantage of spot pricing.\nto use spot spot instances, set `spot` to `true` on a managed ec2 or fargate compute environment:\n\n```python\nvpc = ec2.vpc(self, \"vpc\")\nbatch.fargatecomputeenvironment(self, \"myfargatecomputeenv\",\n    vpc=vpc,\n    spot=true\n)\n```\n\nbatch allows you to specify the percentage of the on-demand instance that the current spot price\nmust be to provision the instance using the `spotbidpercentage`.\nthis defaults to 100%, which is the recommended value.\nthis value cannot be specified for `fargatecomputeenvironment`s\nand only applies to `managedec2ecscomputeenvironment`s.\nthe following code configures a compute environment to only use spot instances that\nare at most 20% the price of the on-demand instance price:\n\n```python\nvpc = ec2.vpc(self, \"vpc\")\nbatch.managedec2ecscomputeenvironment(self, \"myec2computeenv\",\n    vpc=vpc,\n    spot=true,\n    spot_bid_percentage=20\n)\n```\n\nfor stateful or otherwise non-interruption-tolerant workflows, omit `spot` or set it to `false` to only provision on-demand instances.\n\n#### choosing your instance types\n\nbatch allows you to choose the instance types or classes that will run your workload.\nthis example configures your `computeenvironment` to use only the `m5ad.large` instance:\n\n```python\nvpc = ec2.vpc(self, \"vpc\")\n\nbatch.managedec2ecscomputeenvironment(self, \"myec2computeenv\",\n    vpc=vpc,\n    instance_types=[ec2.instancetype.of(ec2.instanceclass.m5ad, ec2.instancesize.large)]\n)\n```\n\nbatch allows you to specify only the instance class and to let it choose the size, which you can do like this:\n\n```python\n# compute_env: batch.imanagedec2ecscomputeenvironment\nvpc = ec2.vpc(self, \"vpc\")\ncompute_env.add_instance_class(ec2.instanceclass.m5ad)\n# or, specify it on the constructor:\nbatch.managedec2ecscomputeenvironment(self, \"myec2computeenv\",\n    vpc=vpc,\n    instance_classes=[ec2.instanceclass.r4]\n)\n```\n\nunless you explicitly specify `useoptimalinstanceclasses: false`, this compute environment will use `'optimal'` instances,\nwhich tells batch to pick an instance from the c4, m4, and r4 instance families.\n*note*: batch does not allow specifying instance types or classes with different architectures.\nfor example, `instanceclass.a1` cannot be specified alongside `'optimal'`,\nbecause `a1` uses arm and `'optimal'` uses x86_64.\nyou can specify both `'optimal'` alongside several different instance types in the same compute environment:\n\n```python\n# vpc: ec2.ivpc\n\n\ncompute_env = batch.managedec2ecscomputeenvironment(self, \"myec2computeenv\",\n    instance_types=[ec2.instancetype.of(ec2.instanceclass.m5ad, ec2.instancesize.large)],\n    use_optimal_instance_classes=true,  # default\n    vpc=vpc\n)\n# note: this is equivalent to specifying\ncompute_env.add_instance_type(ec2.instancetype.of(ec2.instanceclass.m5ad, ec2.instancesize.large))\ncompute_env.add_instance_class(ec2.instanceclass.c4)\ncompute_env.add_instance_class(ec2.instanceclass.m4)\ncompute_env.add_instance_class(ec2.instanceclass.r4)\n```\n\n#### allocation strategies\n\n| allocation strategy           | optimized for              | downsides                     |\n| -----------------------       | -------------              | ----------------------------- |\n| best_fit                      | cost                       | may limit throughput          |\n| best_fit_progressive          | throughput                 | may increase cost             |\n| spot_capacity_optimized       | least interruption         | only useful on spot instances |\n| spot_price_capacity_optimized | least interruption + price | only useful on spot instances |\n\nbatch provides different allocation strategies to help it choose which instances to provision.\nif your workflow tolerates interruptions, you should enable `spot` on your `computeenvironment`\nand use `spot_price_capacity_optimized` (this is the default if `spot` is enabled).\nthis will tell batch to choose the instance types from the ones you\u2019ve specified that have\nthe most spot capacity available to minimize the chance of interruption and have the lowest price.\nto get the most benefit from your spot instances,\nyou should allow batch to choose from as many different instance types as possible.\nif you only care about minimal interruptions and not want batch to optimize for cost, use\n`spot_capacity_optimized`. `spot_price_capacity_optimized` is recommended over `spot_capacity_optimized`\nfor most use cases.\n\nif your workflow does not tolerate interruptions and you want to minimize your costs at the expense\nof potentially longer waiting times, use `allocationstrategy.best_fit`.\nthis will choose the lowest-cost instance type that fits all the jobs in the queue.\nif instances of that type are not available,\nthe queue will not choose a new type; instead, it will wait for the instance to become available.\nthis can stall your `queue`, with your compute environment only using part of its max capacity\n(or none at all) until the `best_fit` instance becomes available.\n\nif you are running a workflow that does not tolerate interruptions and you want to maximize throughput,\nyou can use `allocationstrategy.best_fit_progressive`.\nthis is the default allocation strategy if `spot` is `false` or unspecified.\nthis strategy will examine the jobs in the queue and choose whichever instance type meets the requirements\nof the jobs in the queue and with the lowest cost per vcpu, just as `best_fit`.\nhowever, if not all of the capacity can be filled with this instance type,\nit will choose a new next-best instance type to run any jobs that couldn\u2019t fit into the `best_fit` capacity.\nto make the most use of this allocation strategy,\nit is recommended to use as many instance classes as is feasible for your workload.\nthis example shows a `computeenvironment` that uses `best_fit_progressive`\nwith `'optimal'` and `instanceclass.m5` instance types:\n\n```python\n# vpc: ec2.ivpc\n\n\ncompute_env = batch.managedec2ecscomputeenvironment(self, \"myec2computeenv\",\n    vpc=vpc,\n    instance_classes=[ec2.instanceclass.m5]\n)\n```\n\nthis example shows a `computeenvironment` that uses `best_fit` with `'optimal'` instances:\n\n```python\n# vpc: ec2.ivpc\n\n\ncompute_env = batch.managedec2ecscomputeenvironment(self, \"myec2computeenv\",\n    vpc=vpc,\n    allocation_strategy=batch.allocationstrategy.best_fit\n)\n```\n\n*note*: `allocationstrategy` cannot be specified on fargate compute environments.\n\n### controlling vcpu allocation\n\nyou can specify the maximum and minimum vcpus a managed `computeenvironment` can have at any given time.\nbatch will *always* maintain `minvcpus` worth of instances in your computeenvironment, even if it is not executing any jobs,\nand even if it is disabled. batch will scale the instances up to `maxvcpus` worth of instances as\njobs exit the jobqueue and enter the computeenvironment. if you use `allocationstrategy.best_fit_progressive`,\n`allocationstrategy.spot_price_capacity_optimized`, or `allocationstrategy.spot_capacity_optimized`,\nbatch may exceed `maxvcpus`; it will never exceed `maxvcpus` by more than a single instance type. this example configures a\n`minvcpus` of 10 and a `maxvcpus` of 100:\n\n```python\n# vpc: ec2.ivpc\n\n\nbatch.managedec2ecscomputeenvironment(self, \"myec2computeenv\",\n    vpc=vpc,\n    instance_classes=[ec2.instanceclass.r4],\n    minv_cpus=10,\n    maxv_cpus=100\n)\n```\n\n### tagging instances\n\nyou can tag any instances launched by your managed ec2 computeenvironments by using the cdk `tags` api:\n\n```python\nfrom aws_cdk import tags\n\n# vpc: ec2.ivpc\n\n\ntag_ce = batch.managedec2ecscomputeenvironment(self, \"cethatmakestaggedinstnaces\",\n    vpc=vpc\n)\n\ntags.of(tag_ce).add(\"super\", \"salamander\")\n```\n\nunmanaged `computeenvironment`s do not support `maxvcpus` or `minvcpus` because you must provision and manage the instances yourself;\nthat is, batch will not scale them up and down as needed.\n\n### sharing a computeenvironment between multiple jobqueues\n\nmultiple `jobqueue`s can share the same `computeenvironment`.\nif multiple queues are attempting to submit jobs to the same `computeenvironment`,\nbatch will pick the job from the queue with the highest priority.\nthis example creates two `jobqueue`s that share a `computeenvironment`:\n\n```python\n# vpc: ec2.ivpc\n\nshared_compute_env = batch.fargatecomputeenvironment(self, \"spotenv\",\n    vpc=vpc,\n    spot=true\n)\nlow_priority_queue = batch.jobqueue(self, \"jobqueue\",\n    priority=1\n)\nhigh_priority_queue = batch.jobqueue(self, \"jobqueue\",\n    priority=10\n)\nlow_priority_queue.add_compute_environment(shared_compute_env, 1)\nhigh_priority_queue.add_compute_environment(shared_compute_env, 1)\n```\n\n### fairshare scheduling\n\nbatch `jobqueue`s execute jobs submitted to them in fifo order unless you specify a `schedulingpolicy`.\nfifo queuing can cause short-running jobs to be starved while long-running jobs fill the compute environment.\nto solve this, jobs can be associated with a share.\n\nshares consist of a `shareidentifier` and a `weightfactor`, which is inversely correlated with the vcpu allocated to that share identifier.\nwhen submitting a job, you can specify its `shareidentifier` to associate that particular job with that share.\nlet's see how the scheduler uses this information to schedule jobs.\n\nfor example, if there are two shares defined as follows:\n\n| share identifier | weight factor |\n| ---------------- | ------------- |\n| a                | 1             |\n| b                | 1             |\n\nthe weight factors share the following relationship:\n\n```math\na_{vcpus} / a_{weight} = b_{vcpus} / b_{weight}\n```\n\nwhere `bvcpus` is the number of vcpus allocated to jobs with share identifier `'b'`, and `b_weight` is the weight factor of `b`.\n\nthe total number of vcpus allocated to a share is equal to the amount of jobs in that share times the number of vcpus necessary for every job.\nlet's say that each a job needs 32 vcpus (`a_requirement` = 32) and each b job needs 64 vcpus (`b_requirement` = 64):\n\n```math\na_{vcpus} = a_{jobs} * a_{requirement}\n```\n\n```math\nb_{vcpus} = b_{jobs} * b_{requirement}\n```\n\nwe have:\n\n```math\na_{vcpus} / a_{weight} = b_{vcpus} / b_{weight}\n```\n\n```math\na_{jobs} * a_{requirement} / a_{weight} = b_{jobs} * b_{requirement} / b_{weight}\n```\n\n```math\na_{jobs} * 32 / 1 = b_{jobs} * 64 / 1\n```\n\n```math\na_{jobs} * 32 = b_{jobs} * 64\n```\n\n```math\na_{jobs} = b_{jobs} * 2\n```\n\nthus the scheduler will schedule two `'a'` jobs for each `'b'` job.\n\nyou can control the weight factors to change these ratios, but note that\nweight factors are inversely correlated with the vcpus allocated to the corresponding share.\n\nthis example would be configured like this:\n\n```python\nfairshare_policy = batch.fairshareschedulingpolicy(self, \"myfairsharepolicy\")\n\nfairshare_policy.add_share(\n    share_identifier=\"a\",\n    weight_factor=1\n)\nfairshare_policy.add_share(\n    share_identifier=\"b\",\n    weight_factor=1\n)\nbatch.jobqueue(self, \"jobqueue\",\n    scheduling_policy=fairshare_policy\n)\n```\n\n*note*: the scheduler will only consider the current usage of the compute environment unless you specify `sharedecay`.\nfor example, a `sharedecay` of 5 minutes in the above example means that at any given point in time, twice as many `'a'` jobs\nwill be scheduled for each `'b'` job, but only for the past 5 minutes. if `'b'` jobs run longer than 5 minutes, then\nthe scheduler is allowed to put more than two `'a'` jobs for each `'b'` job, because the usage of those long-running\n`'b'` jobs will no longer be considered after 5 minutes. `sharedecay` linearly decreases the usage of\nlong running jobs for calculation purposes. for example if share decay is 60 seconds,\nthen jobs that run for 30 seconds have their usage considered to be only 50% of what it actually is,\nbut after a whole minute the scheduler pretends they don't exist for fairness calculations.\n\nthe following code specifies a `sharedecay` of 5 minutes:\n\n```python\nimport aws_cdk as cdk\n\nfairshare_policy = batch.fairshareschedulingpolicy(self, \"myfairsharepolicy\",\n    share_decay=cdk.duration.minutes(5)\n)\n```\n\nif you have high priority jobs that should always be executed as soon as they arrive,\nyou can define a `computereservation` to specify the percentage of the\nmaximum vcpu capacity that should be reserved for shares that are *not in the queue*.\nthe actual reserved percentage is defined by batch as:\n\n```math\n (\\frac{computereservation}{100}) ^ {activefairshares}\n```\n\nwhere `activefairshares` is the number of shares for which there exists\nat least one job in the queue with a unique share identifier.\n\nthis is best illustrated with an example.\nsuppose there are three shares with share identifiers `a`, `b` and `c` respectively\nand we specify the `computereservation` to be 75%. the queue is currently empty,\nand no other shares exist.\n\nthere are no active fair shares, since the queue is empty.\nthus (75/100)^0 = 1 = 100% of the maximum vcpus are reserved for all shares.\n\na job with identifier `a` enters the queue.\n\nthe number of active fair shares is now 1, hence\n(75/100)^1 = .75 = 75% of the maximum vcpus are reserved for all shares that do not have the identifier `a`;\nfor this example, this is `b` and `c`,\n(but if jobs are submitted with a share identifier not covered by this fairshare policy, those would be considered just as `b` and `c` are).\n\nnow a `b` job enters the queue. the number of active fair shares is now 2,\nso (75/100)^2 = .5625 = 56.25% of the maximum vcpus are reserved for all shares that do not have the identifier `a` or `b`.\n\nnow a second `a` job enters the queue. the number of active fair shares is still 2,\nso the percentage reserved is still 56.25%\n\nnow a `c` job enters the queue. the number of active fair shares is now 3,\nso (75/100)^3 = .421875 = 42.1875% of the maximum vcpus are reserved for all shares that do not have the identifier `a`, `b`, or `c`.\n\nif there are no other shares that your jobs can specify, this means that 42.1875% of your capacity will never be used!\n\nnow, `a`, `b`, and `c` can only consume 100% - 42.1875% = 57.8125% of the maximum vcpus.\nnote that the this percentage is **not** split between `a`, `b`, and `c`.\ninstead, the scheduler will use their `weightfactor`s to decide which jobs to schedule;\nthe only difference is that instead of competing for 100% of the max capacity, jobs compete for 57.8125% of the max capacity.\n\nthis example specifies a `computereservation` of 75% that will behave as explained in the example above:\n\n```python\nbatch.fairshareschedulingpolicy(self, \"myfairsharepolicy\",\n    compute_reservation=75,\n    shares=[batch.share(weight_factor=1, share_identifier=\"a\"), batch.share(weight_factor=0.5, share_identifier=\"b\"), batch.share(weight_factor=2, share_identifier=\"c\")\n    ]\n)\n```\n\nyou can specify a `priority` on your `jobdefinition`s to tell the scheduler to prioritize certain jobs that share the same share identifier.\n\n### configuring job retry policies\n\ncertain workflows may result in jobs failing due to intermittent issues.\njobs can specify retry policies to respond to different failures with different actions.\nthere are three different ways information about the way a job exited can be conveyed;\n\n* `exitcode`: the exit code returned from the process executed by the container. will only match non-zero exit codes.\n* `reason`: any middleware errors, like your docker registry being down.\n* `statusreason`: infrastructure errors, most commonly your spot instance being reclaimed.\n\nfor most use cases, only one of these will be associated with a particular action at a time.\nto specify common `exitcode`s, `reason`s, or `statusreason`s, use the corresponding value from\nthe `reason` class. this example shows some common failure reasons:\n\n```python\nimport aws_cdk as cdk\n\n\njob_defn = batch.ecsjobdefinition(self, \"jobdefn\",\n    container=batch.ecsec2containerdefinition(self, \"containerdefn\",\n        image=ecs.containerimage.from_registry(\"public.ecr.aws/amazonlinux/amazonlinux:latest\"),\n        memory=cdk.size.mebibytes(2048),\n        cpu=256\n    ),\n    retry_attempts=5,\n    retry_strategies=[\n        batch.retrystrategy.of(batch.action.exit, batch.reason.cannot_pull_container)\n    ]\n)\njob_defn.add_retry_strategy(\n    batch.retrystrategy.of(batch.action.exit, batch.reason.spot_instance_reclaimed))\njob_defn.add_retry_strategy(\n    batch.retrystrategy.of(batch.action.exit, batch.reason.cannot_pull_container))\njob_defn.add_retry_strategy(\n    batch.retrystrategy.of(batch.action.exit, batch.reason.custom(\n        on_exit_code=\"40*\",\n        on_reason=\"some reason\"\n    )))\n```\n\nwhen specifying a custom reason,\nyou can specify a glob string to match each of these and react to different failures accordingly.\nup to five different retry strategies can be configured for each job,\nand each strategy can match against some or all of `exitcode`, `reason`, and `statusreason`.\nyou can optionally configure the number of times a job will be retried,\nbut you cannot configure different retry counts for different strategies; they all share the same count.\nif multiple conditions are specified in a given retry strategy,\nthey must all match for the action to be taken; the conditions are anded together, not ored.\n\n### running single-container ecs workflows\n\nbatch can run jobs on ecs or eks. ecs jobs can be defined as single container or multinode.\nthis example creates a `jobdefinition` that runs a single container with ecs:\n\n```python\nimport aws_cdk as cdk\nimport aws_cdk.aws_iam as iam\nimport aws_cdk.aws_efs as efs\n\n# my_file_system: efs.ifilesystem\n# my_job_role: iam.role\n\nmy_file_system.grant_read(my_job_role)\n\njob_defn = batch.ecsjobdefinition(self, \"jobdefn\",\n    container=batch.ecsec2containerdefinition(self, \"containerdefn\",\n        image=ecs.containerimage.from_registry(\"public.ecr.aws/amazonlinux/amazonlinux:latest\"),\n        memory=cdk.size.mebibytes(2048),\n        cpu=256,\n        volumes=[batch.ecsvolume.efs(\n            name=\"myvolume\",\n            file_system=my_file_system,\n            container_path=\"/volumes/myvolume\",\n            use_job_role=true\n        )],\n        job_role=my_job_role\n    )\n)\n```\n\nfor workflows that need persistent storage, batch supports mounting `volume`s to the container.\nyou can both provision the volume and mount it to the container in a single operation:\n\n```python\nimport aws_cdk.aws_efs as efs\n\n# my_file_system: efs.ifilesystem\n# job_defn: batch.ecsjobdefinition\n\n\njob_defn.container.add_volume(batch.ecsvolume.efs(\n    name=\"myvolume\",\n    file_system=my_file_system,\n    container_path=\"/volumes/myvolume\"\n))\n```\n\n### secrets\n\nyou can expose secretsmanager secret arns or ssm parameters to your container as environment variables.\nthe following example defines the `my_secret_env_var` environment variable that contains the\narn of the secret defined by `mysecret`:\n\n```python\nimport aws_cdk as cdk\n\n# my_secret: secretsmanager.isecret\n\n\njob_defn = batch.ecsjobdefinition(self, \"jobdefn\",\n    container=batch.ecsec2containerdefinition(self, \"containerdefn\",\n        image=ecs.containerimage.from_registry(\"public.ecr.aws/amazonlinux/amazonlinux:latest\"),\n        memory=cdk.size.mebibytes(2048),\n        cpu=256,\n        secrets={\n            \"my_secret_env_var\": batch.secret.from_secrets_manager(my_secret)\n        }\n    )\n)\n```\n\n### running kubernetes workflows\n\nbatch also supports running workflows on eks. the following example creates a `jobdefinition` that runs on eks:\n\n```python\nimport aws_cdk as cdk\n\njob_defn = batch.eksjobdefinition(self, \"eksf2\",\n    container=batch.ekscontainerdefinition(self, \"container\",\n        image=ecs.containerimage.from_registry(\"amazon/amazon-ecs-sample\"),\n        volumes=[batch.eksvolume.empty_dir(\n            name=\"myemptydirvolume\",\n            mount_path=\"/mount/path\",\n            medium=batch.emptydirmediumtype.memory,\n            readonly=true,\n            size_limit=cdk.size.mebibytes(2048)\n        )]\n    )\n)\n```\n\nyou can mount `volume`s to these containers in a single operation:\n\n```python\n# job_defn: batch.eksjobdefinition\n\njob_defn.container.add_volume(batch.eksvolume.empty_dir(\n    name=\"emptydir\",\n    mount_path=\"/volumes/emptydir\"\n))\njob_defn.container.add_volume(batch.eksvolume.host_path(\n    name=\"hostpath\",\n    host_path=\"/sys\",\n    mount_path=\"/volumes/hostpath\"\n))\njob_defn.container.add_volume(batch.eksvolume.secret(\n    name=\"secret\",\n    optional=true,\n    mount_path=\"/volumes/secret\",\n    secret_name=\"mysecret\"\n))\n```\n\n### running distributed workflows\n\nsome workflows benefit from parallellization and are most powerful when run in a distributed environment,\nsuch as certain numerical calculations or simulations. batch offers `multinodejobdefinition`s,\nwhich allow a single job to run on multiple instances in parallel, for this purpose.\nmessage passing interface (mpi) is often used with these workflows.\nyou must configure your containers to use mpi properly,\nbut batch allows different nodes running different containers to communicate easily with one another.\nyou must configure your containers to use certain environment variables that batch will provide them,\nwhich lets them know which one is the main node, among other information.\nfor an in-depth example on using mpi to perform numerical computations on batch,\nsee this [blog post](https://aws.amazon.com/blogs/compute/building-a-tightly-coupled-molecular-dynamics-workflow-with-multi-node-parallel-jobs-in-aws-batch/)\nin particular, the environment variable that tells the containers which one is the main node can be configured on your `multinodejobdefinition` as follows:\n\n```python\nimport aws_cdk as cdk\n\nmulti_node_job = batch.multinodejobdefinition(self, \"jobdefinition\",\n    instance_type=ec2.instancetype.of(ec2.instanceclass.r4, ec2.instancesize.large),\n    containers=[batch.multinodecontainer(\n        container=batch.ecsec2containerdefinition(self, \"mainmpicontainer\",\n            image=ecs.containerimage.from_registry(\"yourregsitry.com/yourmpiimage:latest\"),\n            cpu=256,\n            memory=cdk.size.mebibytes(2048)\n        ),\n        start_node=0,\n        end_node=5\n    )]\n)\n# convenience method\nmulti_node_job.add_container(\n    start_node=6,\n    end_node=10,\n    container=batch.ecsec2containerdefinition(self, \"multicontainer\",\n        image=ecs.containerimage.from_registry(\"amazon/amazon-ecs-sample\"),\n        cpu=256,\n        memory=cdk.size.mebibytes(2048)\n    )\n)\n```\n\nif you need to set the control node to an index other than 0, specify it in directly:\n\n```python\nmulti_node_job = batch.multinodejobdefinition(self, \"jobdefinition\",\n    main_node=5,\n    instance_type=ec2.instancetype.of(ec2.instanceclass.r4, ec2.instancesize.large)\n)\n```\n\n### pass parameters to a job\n\nbatch allows you define parameters in your `jobdefinition`, which can be referenced in the container command. for example:\n\n```python\nimport aws_cdk as cdk\n\nbatch.ecsjobdefinition(self, \"jobdefn\",\n    parameters={\"echo_param\": \"foobar\"},\n    container=batch.ecsec2containerdefinition(self, \"containerdefn\",\n        image=ecs.containerimage.from_registry(\"public.ecr.aws/amazonlinux/amazonlinux:latest\"),\n        memory=cdk.size.mebibytes(2048),\n        cpu=256,\n        command=[\"echo\", \"ref::echoparam\"\n        ]\n    )\n)\n```\n\n### understanding progressive allocation strategies\n\naws batch uses an [allocation strategy](https://docs.aws.amazon.com/batch/latest/userguide/allocation-strategies.html) to determine what compute resource will efficiently handle incoming job requests. by default, **best_fit** will pick an available compute instance based on vcpu requirements. if none exist, the job will wait until resources become available. however, with this strategy, you may have jobs waiting in the queue unnecessarily despite having more powerful instances available. below is an example of how that situation might look like:\n\n```plaintext\ncompute environment:\n\n1. m5.xlarge => 4 vcpu\n2. m5.2xlarge => 8 vcpu\n```\n\n```plaintext\njob queue:\n---------\n| a | b |\n---------\n\njob requirements:\na => 4 vcpu - allocated to m5.xlarge\nb => 2 vcpu - waiting\n```\n\nin this situation, batch will allocate **job a** to compute resource #1 because it is the most cost efficient resource that matches the vcpu requirement. however, with this `best_fit` strategy, **job b** will not be allocated to our other available compute resource even though it is strong enough to handle it. instead, it will wait until the first job is finished processing or wait a similar `m5.xlarge` resource to be provisioned.\n\nthe alternative would be to use the `best_fit_progressive` strategy in order for the remaining job to be handled in larger containers regardless of vcpu requirement and costs.\n\n### permissions\n\nyou can grant any principal the `batch:submitjob` permission on both a job definition and a job queue like this:\n\n```python\nimport aws_cdk as cdk\nimport aws_cdk.aws_iam as iam\n\n# vpc: ec2.ivpc\n\n\necs_job = batch.ecsjobdefinition(self, \"jobdefn\",\n    container=batch.ecsec2containerdefinition(self, \"containerdefn\",\n        image=ecs.containerimage.from_registry(\"public.ecr.aws/amazonlinux/amazonlinux:latest\"),\n        memory=cdk.size.mebibytes(2048),\n        cpu=256\n    )\n)\n\nqueue = batch.jobqueue(self, \"jobqueue\",\n    compute_environments=[batch.orderedcomputeenvironment(\n        compute_environment=batch.managedec2ecscomputeenvironment(self, \"managedec2ce\",\n            vpc=vpc\n        ),\n        order=1\n    )],\n    priority=10\n)\n\nuser = iam.user(self, \"myuser\")\necs_job.grant_submit_job(user, queue)\n```\n",
  "docs_url": null,
  "keywords": "",
  "license": "apache-2.0",
  "name": "aws-cdk.aws-batch-alpha",
  "package_url": "https://pypi.org/project/aws-cdk.aws-batch-alpha/",
  "project_url": "https://pypi.org/project/aws-cdk.aws-batch-alpha/",
  "project_urls": {
    "Homepage": "https://github.com/aws/aws-cdk",
    "Source": "https://github.com/aws/aws-cdk.git"
  },
  "release_url": "https://pypi.org/project/aws-cdk.aws-batch-alpha/2.95.1a0/",
  "requires_dist": [
    "aws-cdk-lib ==2.95.1",
    "constructs <11.0.0,>=10.0.0",
    "jsii <2.0.0,>=1.88.0",
    "publication >=0.0.3",
    "typeguard ~=2.13.3"
  ],
  "requires_python": "~=3.7",
  "summary": "the cdk construct library for aws::batch",
  "version": "2.95.1a0",
  "releases": [],
  "developers": [
    "amazon_web_services"
  ],
  "kwds": "aws_cdk aws_iam aws aws_efs ecsjobdefinition",
  "license_kwds": "apache-2.0",
  "libtype": "pypi",
  "id": "pypi_aws_cdk.aws_batch_alpha",
  "homepage": "https://github.com/aws/aws-cdk",
  "release_count": 139,
  "dependency_ids": [
    "pypi_aws_cdk_lib",
    "pypi_constructs",
    "pypi_jsii",
    "pypi_publication",
    "pypi_typeguard"
  ],
  "documentation_summary": "The HTML text is about the `aws-cdk.aws-batch-alpha` package version 2.95.1a0 on PyPI, released on September 9, 2023. It's part of the AWS Cloud Development Kit and is designed for batch processing in AWS, allowing for efficient job scheduling and execution by dynamically provisioning EC2 instances. The package is in beta development status, requires Python version 3.7 or newer, and is licensed under Apache-2.0. It supports various AWS CDK and Python versions, and is intended for developers. The package offers features like cost optimization using spot instances, choosing instance types, allocation strategies, and handling job retries. It also supports ECS and EKS for running single-container or distributed workflows, with capabilities for parameter passing and job prioritization.",
  "embedding": [
    -0.005395964253693819,
    -0.007480687461793423,
    -0.014918465167284012,
    -0.009340131655335426,
    -0.008260224014520645,
    0.01886620745062828,
    -0.011242486536502838,
    -0.012193663977086544,
    -0.030323246493935585,
    -0.025860579684376717,
    0.006304231472313404,
    0.005295840557664633,
    0.006772668566554785,
    0.016506144776940346,
    -0.009554683230817318,
    -0.004441211465746164,
    0.01858014054596424,
    -0.025889186188578606,
    0.009576138108968735,
    0.015118712559342384,
    0.011292548850178719,
    -0.0025996461044996977,
    -0.007623721845448017,
    -0.009533228352665901,
    -0.027391046285629272,
    0.020682742819190025,
    0.021669678390026093,
    -0.016477538272738457,
    0.018694566562771797,
    0.021226271986961365,
    0.03141030669212341,
    0.0008729554829187691,
    -0.019080759957432747,
    -0.002996566006913781,
    -0.005027651321142912,
    -0.022098781540989876,
    0.00010699627455323935,
    -0.0020132060162723064,
    0.04814530536532402,
    0.0006092361873015761,
    0.022642310708761215,
    0.025374263525009155,
    0.0024923705495893955,
    0.00554257445037365,
    -0.00991226825863123,
    0.01574806310236454,
    0.002483431017026305,
    -0.028821386396884918,
    -0.021998656913638115,
    0.004709400236606598,
    0.014961374923586845,
    0.05006196349859238,
    -0.03358442708849907,
    -0.001367764314636588,
    0.017278529703617096,
    -0.0037367679178714752,
    -0.0003110993420705199,
    0.022771041840314865,
    0.016077041625976562,
    -0.03407074138522148,
    0.01889481581747532,
    0.013073324225842953,
    -0.01470391359180212,
    -0.01835128478705883,
    -0.028621139004826546,
    -0.0028141974471509457,
    -0.024830734357237816,
    0.01561933197081089,
    -0.0121793607249856,
    -0.009583289735019207,
    0.04539904743432999,
    0.011750257574021816,
    -0.012558400630950928,
    -0.01644892990589142,
    0.05003335699439049,
    -0.009776386432349682,
    -0.03075234778225422,
    0.012830166146159172,
    -0.023371784016489983,
    0.013166296295821667,
    -0.0009645867394283414,
    0.012429670430719852,
    -0.001471464172936976,
    0.03572993725538254,
    0.017207011580467224,
    0.019395435228943825,
    -0.008052824065089226,
    -0.0136597640812397,
    -0.02098311483860016,
    0.012107843533158302,
    0.029350614175200462,
    -0.014317721128463745,
    0.027262315154075623,
    0.030552100390195847,
    -0.020425280556082726,
    0.02082577720284462,
    0.006561692804098129,
    0.04694381728768349,
    0.024187080562114716,
    -0.03289785981178284,
    -0.022313332185149193,
    0.020611224696040154,
    -0.03776102513074875,
    -0.007974155247211456,
    -0.07060167193412781,
    -0.01858014054596424,
    -0.024930857121944427,
    0.009211401455104351,
    0.046714961528778076,
    0.013345088809728622,
    -0.02204156666994095,
    0.018279768526554108,
    -0.014017350040376186,
    -0.026203861460089684,
    -0.023214448243379593,
    -0.018808994442224503,
    -0.007945548743009567,
    -0.01378849521279335,
    -0.020739955827593803,
    -0.01680651679635048,
    -0.0039048329927027225,
    0.02741965278983116,
    0.0068870955146849155,
    -0.01152140274643898,
    0.0007393078994937241,
    0.015133015811443329,
    -0.011106603778898716,
    -0.03181080147624016,
    0.02028224617242813,
    -0.04093638062477112,
    0.001525101950392127,
    -0.008617809042334557,
    0.014289114624261856,
    -0.019366828724741936,
    -0.019295310601592064,
    -0.014424997381865978,
    -0.005964525509625673,
    -0.022313332185149193,
    -0.030037177726626396,
    -0.020654136314988136,
    -0.007545053027570248,
    0.03861922770738602,
    -0.005796459969133139,
    -0.0063829002901911736,
    -0.005270809400826693,
    0.026847515255212784,
    0.03899111598730087,
    0.005345902405679226,
    -0.014038804918527603,
    0.0026640116702765226,
    -0.012508339248597622,
    -0.0014365995302796364,
    -0.01140697579830885,
    -0.0014804037055000663,
    0.004026412032544613,
    0.007795362733304501,
    -0.018165340647101402,
    -0.015547815710306168,
    0.004709400236606598,
    -0.01796509325504303,
    0.009819296188652515,
    0.03647371754050255,
    -0.011743105947971344,
    -0.00173339550383389,
    0.02108323760330677,
    0.02368645928800106,
    0.016792213544249535,
    -0.02680460549890995,
    -0.01112090703099966,
    -0.01081338431686163,
    0.019209491088986397,
    -0.00041301120654679835,
    -0.03575854375958443,
    0.024544665589928627,
    -0.021683981642127037,
    0.010591681115329266,
    -0.004094353411346674,
    -7.88922916399315e-05,
    -0.03532944247126579,
    -0.018036609515547752,
    0.03232572600245476,
    0.02002478577196598,
    0.006347141694277525,
    0.05186419188976288,
    -0.007781059481203556,
    -0.02059692144393921,
    0.006436537951231003,
    0.007938397116959095,
    0.0017941850237548351,
    0.0075235976837575436,
    -0.0006114711286500096,
    0.021426519379019737,
    -0.017464473843574524,
    -0.012429670430719852,
    -0.5854102969169617,
    -0.01534756738692522,
    -0.0277057196944952,
    -0.04116523638367653,
    -0.022985592484474182,
    0.014718216843903065,
    0.03095259703695774,
    0.018937725573778152,
    -0.015705153346061707,
    0.034728698432445526,
    -0.014446452260017395,
    0.014374935068190098,
    -0.012880227528512478,
    -0.001053983112797141,
    -0.00024606348597444594,
    -0.013087627477943897,
    0.007373412139713764,
    -0.024244293570518494,
    0.012994655407965183,
    -0.01406025979667902,
    -0.03295507654547691,
    0.031896620988845825,
    -0.017822058871388435,
    -0.004702248610556126,
    0.005052682477980852,
    0.009261462837457657,
    0.008052824065089226,
    -0.02018212340772152,
    0.032154083251953125,
    -0.01783636212348938,
    -0.018465712666511536,
    0.02683321200311184,
    0.01760750822722912,
    0.013695523142814636,
    0.06322110444307327,
    0.02381519041955471,
    -0.022027263417840004,
    0.029550861567258835,
    0.011077997274696827,
    0.022027263417840004,
    -0.0456279031932354,
    -0.031038416549563408,
    -0.007537901401519775,
    -6.313618359854445e-05,
    0.029264792799949646,
    0.026046523824334145,
    0.04579954594373703,
    0.022799648344516754,
    -0.018151037395000458,
    -0.03121005743741989,
    0.006179076619446278,
    0.0010396797442808747,
    0.011929051019251347,
    -0.005896584130823612,
    0.009311525151133537,
    -0.007630873471498489,
    0.01537617389112711,
    -0.015891097486019135,
    0.00811718963086605,
    -0.0007983095129020512,
    0.01780775561928749,
    0.0243587214499712,
    0.004312480334192514,
    -0.03100981004536152,
    -0.028778476640582085,
    0.02278534509241581,
    -0.013645460829138756,
    -0.012286636047065258,
    -0.007881183177232742,
    -0.026919033378362656,
    0.012579856440424919,
    -0.02422999031841755,
    0.023829493671655655,
    -0.034499842673540115,
    0.05046245828270912,
    0.014467907138168812,
    0.018422802910208702,
    -0.03593018651008606,
    -0.006922854110598564,
    0.02618955820798874,
    0.021784106269478798,
    0.001793291070498526,
    -0.003473942633718252,
    -0.02291407622396946,
    0.029064545407891273,
    0.006500903517007828,
    -0.003459639148786664,
    -0.011192424222826958,
    -0.02085438370704651,
    -0.008024217560887337,
    0.017378652468323708,
    0.008610657416284084,
    0.004022836219519377,
    -0.05461044982075691,
    0.016892336308956146,
    0.019295310601592064,
    0.017850665375590324,
    -0.005921614822000265,
    -0.012708586640655994,
    0.0006584041984751821,
    0.0015000709099695086,
    -0.007738149259239435,
    0.005825066938996315,
    -0.010212640278041363,
    0.03364164009690285,
    0.0079884584993124,
    -0.0074735358357429504,
    -0.005034802947193384,
    0.036588143557310104,
    -0.013552488759160042,
    0.004984741099178791,
    -0.020239336416125298,
    -0.019938964396715164,
    0.01825116202235222,
    0.02082577720284462,
    -0.03987792879343033,
    0.0212691817432642,
    0.018236858770251274,
    0.01322351023554802,
    0.008860967122018337,
    -0.003940591588616371,
    0.010863445699214935,
    0.0072697121649980545,
    0.007702390663325787,
    0.021927140653133392,
    0.01870886981487274,
    0.02111184410750866,
    -0.017564596608281136,
    -0.01587679423391819,
    0.018036609515547752,
    0.007566507905721664,
    0.004931103438138962,
    0.022155994549393654,
    0.01100648008286953,
    0.05340896174311638,
    0.005921614822000265,
    0.014582335017621517,
    0.0051098959520459175,
    -0.01534756738692522,
    -0.026332592591643333,
    0.008589202538132668,
    0.00036138479481451213,
    0.015891097486019135,
    -0.02198435366153717,
    -0.017207011580467224,
    -0.00028495091828517616,
    -0.029064545407891273,
    0.002104390412569046,
    -0.013216358609497547,
    0.004412604495882988,
    -0.014632396399974823,
    -0.0021294213365763426,
    -0.011714499443769455,
    0.03255457803606987,
    -0.006744061596691608,
    -0.004255266860127449,
    0.000735732086468488,
    -0.00638647610321641,
    -0.0034310324117541313,
    -0.001568906125612557,
    0.027591293677687645,
    0.013159144669771194,
    -0.007502142805606127,
    -0.00479522068053484,
    -0.03833315894007683,
    0.011035086587071419,
    -0.02905024215579033,
    0.024988071992993355,
    -0.0056784567423164845,
    -0.04082195460796356,
    0.0005967207252979279,
    -0.01486125122755766,
    -0.01809382438659668,
    0.004305328708142042,
    0.018279768526554108,
    0.002828500932082534,
    -0.024158472195267677,
    0.03178219497203827,
    -0.002204514341428876,
    0.008903877809643745,
    -0.006225562654435635,
    0.030809562653303146,
    -0.01940973848104477,
    -0.002470915438607335,
    0.03458566591143608,
    0.025431476533412933,
    0.021226271986961365,
    0.0034220926463603973,
    -0.01269428338855505,
    0.018780387938022614,
    -0.009597592987120152,
    0.014281962998211384,
    -0.028320766985416412,
    0.04874604940414429,
    -0.024887947365641594,
    0.015190229751169682,
    0.012250877916812897,
    0.008396106772124767,
    0.0010647106682881713,
    0.017049673944711685,
    0.03698863834142685,
    0.025174016132950783,
    0.012987503781914711,
    -0.006622482556849718,
    -0.00880375411361456,
    -0.04508437216281891,
    0.006400779355317354,
    -0.0031682071276009083,
    0.035501085221767426,
    0.0063829002901911736,
    0.009983785450458527,
    -0.027262315154075623,
    -0.017907878383994102,
    -0.021412216126918793,
    0.027548382058739662,
    -0.00407289806753397,
    -0.02814912609755993,
    0.025016678497195244,
    -0.026475626975297928,
    -0.015018588863313198,
    0.012558400630950928,
    0.011836078017950058,
    0.004959710408002138,
    -0.0018522925674915314,
    0.000762103998567909,
    0.004727279767394066,
    0.018623050302267075,
    0.00037010092637501657,
    0.014961374923586845,
    -0.01799369975924492,
    0.007509294431656599,
    0.029493648558855057,
    -0.024573272094130516,
    -0.029493648558855057,
    0.008853815495967865,
    0.003313029184937477,
    0.03950604051351547,
    -0.017106886953115463,
    0.01915227621793747,
    -0.03183940798044205,
    0.011435582302510738,
    -0.005524695385247469,
    0.03072374127805233,
    -0.005635546520352364,
    0.003965622745454311,
    -0.006150469649583101,
    -0.0040621706284582615,
    0.015147319994866848,
    -0.006164773367345333,
    -0.018308375030755997,
    0.004906072281301022,
    -0.007008675020188093,
    0.0040621706284582615,
    0.021869925782084465,
    0.010985025204718113,
    -0.0025352807715535164,
    0.017822058871388435,
    0.005692760460078716,
    0.035243622958660126,
    0.005102744325995445,
    0.01770763099193573,
    0.021512340754270554,
    0.0171354953199625,
    -0.008181555196642876,
    0.0243587214499712,
    -0.03964907303452492,
    -0.0171354953199625,
    -0.0241012591868639,
    -0.009218553081154823,
    -0.002583554945886135,
    -0.013652612455189228,
    -0.020897293463349342,
    -0.007981306873261929,
    -0.04262418672442436,
    0.026404108852148056,
    0.0061111352406442165,
    0.025688938796520233,
    0.01747877709567547,
    0.026246771216392517,
    0.008217313326895237,
    0.0014839796349406242,
    -0.04299607500433922,
    0.029808323830366135,
    0.020582618191838264,
    -0.008975395001471043,
    -0.020639831200242043,
    -0.004112232476472855,
    0.022728130221366882,
    -0.01023409515619278,
    0.023100020363926888,
    -0.007859728299081326,
    0.00872508529573679,
    -0.01232239417731762,
    0.003937015775591135,
    -0.01896633207798004,
    -0.00472370395436883,
    0.03836176544427872,
    -0.0015152683481574059,
    -0.0072053465992212296,
    -0.02041097730398178,
    -0.00616119708865881,
    0.004623579792678356,
    0.017850665375590324,
    0.026461323723196983,
    0.030780956149101257,
    0.010999328456819057,
    -0.03178219497203827,
    -0.011800319887697697,
    -0.005603364203125238,
    -0.002247424563392997,
    0.002052540425211191,
    -0.016334503889083862,
    -0.010176882147789001,
    0.021169058978557587,
    0.021254878491163254,
    -0.003262967336922884,
    -0.0011219243751838803,
    -0.031868014484643936,
    0.03804709017276764,
    0.003618764691054821,
    0.013409454375505447,
    -0.0034810942597687244,
    -0.008217313326895237,
    0.019137972965836525,
    0.017750542610883713,
    0.0035919458605349064,
    0.003733192104846239,
    0.01809382438659668,
    -0.041508518159389496,
    -0.03613043203949928,
    -0.03206826373934746,
    0.01716410182416439,
    0.0022831831593066454,
    -0.007909789681434631,
    -0.020768562331795692,
    0.0017441230593249202,
    0.01742156222462654,
    0.002463763812556863,
    0.018465712666511536,
    0.012930289842188358,
    -0.0018201099010184407,
    0.001728925621137023,
    0.00878944993019104,
    -0.012980352155864239,
    0.01796509325504303,
    0.010198337025940418,
    0.032411545515060425,
    0.007466384209692478,
    0.03927718475461006,
    0.033412784337997437,
    -0.009619048796594143,
    0.005510391667485237,
    -0.011564313434064388,
    -0.04165155440568924,
    0.003829740220680833,
    -0.029164670035243034,
    0.01176456082612276,
    0.01745017059147358,
    0.0016073465812951326,
    0.03098120354115963,
    0.013166296295821667,
    0.032640401273965836,
    -0.008832360617816448,
    0.005385236814618111,
    0.021097540855407715,
    0.0034346082247793674,
    0.01767902448773384,
    -5.6291770306415856e-05,
    0.002787378616631031,
    -0.022542186081409454,
    0.004691521171480417,
    0.007959851995110512,
    -0.02121196873486042,
    0.022413456812500954,
    0.04027842357754707,
    -0.0020811473950743675,
    -0.04170876741409302,
    -0.019996177405118942,
    0.020682742819190025,
    0.009004001505672932,
    0.025660332292318344,
    -0.012114995159208775,
    -0.002163392025977373,
    -0.03819012641906738,
    -0.012072084471583366,
    -0.03959186002612114,
    -0.0068870955146849155,
    0.013538185507059097,
    -0.0001001239288598299,
    -0.005009772256016731,
    -0.026246771216392517,
    0.003718888619914651,
    -0.024601878598332405,
    -0.002370791509747505,
    -0.04316771402955055,
    -0.008381802588701248,
    -0.024916553869843483,
    -0.012536945752799511,
    0.03675978258252144,
    0.008739388547837734,
    0.0011442734394222498,
    -0.023257357999682426,
    -0.005249354522675276,
    -0.0020829353015869856,
    -0.00314138806425035,
    -0.019395435228943825,
    -0.018308375030755997,
    -0.04628586024045944,
    0.0119218984618783,
    -0.01600552536547184,
    0.021040327847003937,
    0.015304657630622387,
    0.008717933669686317,
    0.039134152233600616,
    -0.010884901508688927,
    0.017664721235632896,
    0.023629246279597282,
    -0.021140452474355698,
    0.024158472195267677,
    0.015733759850263596,
    0.008653568103909492,
    0.01963859237730503,
    0.01657766103744507,
    -0.027848754078149796,
    -0.019853144884109497,
    -0.003790405811741948,
    0.017435867339372635,
    0.013566792011260986,
    0.01845140941441059,
    0.014081714674830437,
    0.01068465318530798,
    -0.0008573111263103783,
    -0.02214169129729271,
    -0.020768562331795692,
    -0.004337511491030455,
    -0.024787822738289833,
    -0.00021533349354285747,
    -0.012072084471583366,
    0.00548893678933382,
    -0.007459232583642006,
    -0.01755029335618019,
    -0.020382370799779892,
    -0.0030645073857158422,
    0.0012283059768378735,
    0.016119951382279396,
    -0.01652044802904129,
    0.010741867125034332,
    0.02294268272817135,
    -0.007323349826037884,
    0.013516729697585106,
    0.009132732637226582,
    -0.014231900684535503,
    -0.02850671112537384,
    0.028006091713905334,
    -0.004612852353602648,
    0.0015027528861537576,
    -0.013194902800023556,
    -0.04445502161979675,
    -0.014661003835499287,
    -0.0026532839983701706,
    0.0171354953199625,
    0.02802039496600628,
    -0.007330501917749643,
    -0.016334503889083862,
    -0.038418982177972794,
    -0.0007352850516326725,
    -0.015891097486019135,
    -0.006525934673845768,
    0.0014401753433048725,
    -0.02786305733025074,
    -0.013681218959391117,
    0.012715738266706467,
    0.0022366968914866447,
    0.02580336667597294,
    -0.005131351295858622,
    0.01886620745062828,
    -0.008911029435694218,
    -0.016191469505429268,
    -0.006876368075609207,
    -0.0032826343085616827,
    0.017664721235632896,
    -0.007816817611455917,
    0.02606082707643509,
    0.03618764877319336,
    0.033241141587495804,
    -0.0002017005463130772,
    0.007616570219397545,
    0.016119951382279396,
    0.0038047090638428926,
    -0.013459516689181328,
    -0.009783538058400154,
    0.03020881861448288,
    0.0015036468394100666,
    -0.012150753289461136,
    0.02574615180492401,
    0.012858772650361061,
    -0.0012542309705168009,
    -0.014818340539932251,
    0.028006091713905334,
    0.01806521601974964,
    0.00109868124127388,
    -0.011907595209777355,
    -0.025660332292318344,
    -0.009747778996825218,
    -0.01995326764881611,
    -0.0128230145201087,
    -0.004920375999063253,
    0.005181413143873215,
    -0.028034700080752373,
    -0.02760559692978859,
    0.020739955827593803,
    0.018880512565374374,
    0.027333831414580345,
    -0.004469817969948053,
    -0.0006771774496883154,
    -0.001683333539403975,
    0.0071588605642318726,
    0.017950790002942085,
    0.03201105073094368,
    0.0014830856816843152,
    0.008217313326895237,
    -0.026361199095845222,
    0.004884617403149605,
    0.03020881861448288,
    0.012780103832483292,
    0.008832360617816448,
    0.01068465318530798,
    0.003568702843040228,
    0.0032933619804680347,
    0.0007048902916722,
    -0.009583289735019207,
    -0.007212498690932989,
    0.02043958380818367,
    -0.015891097486019135,
    -0.03690281882882118,
    -0.022427760064601898,
    -0.005721366964280605,
    -0.02525983564555645,
    0.020453887060284615,
    -0.016148559749126434,
    0.006254169624298811,
    0.027691416442394257,
    -0.017464473843574524,
    0.005624819081276655,
    0.010248399339616299,
    -0.0032808464020490646,
    0.03326975181698799,
    0.006955036893486977,
    0.01822255365550518,
    0.019753020256757736,
    0.01470391359180212,
    -0.0036384318955242634,
    -0.03329835832118988,
    -0.017049673944711685,
    0.003779678139835596,
    0.02079716883599758,
    0.01610564813017845,
    -0.009147035889327526,
    -0.027176493778824806,
    0.004509152378886938,
    -0.00017275847494602203,
    -0.02889290452003479,
    -0.037103064358234406,
    0.02618955820798874,
    0.00690855085849762,
    -0.009254311211407185,
    -0.028692657127976418,
    -0.012508339248597622,
    0.0018808994209393859,
    -0.0006221986841410398,
    0.0013802797766402364,
    -0.0014947071904316545,
    0.012801558710634708,
    -0.020453887060284615,
    -0.0074091702699661255,
    0.0016583024989813566,
    0.008903877809643745,
    0.01693524606525898,
    0.009804992936551571,
    -0.01912366971373558,
    -0.01189329195767641,
    -0.0032272087410092354,
    -0.03223990276455879,
    0.0038726504426449537,
    -0.0061111352406442165,
    0.0008246814250014722,
    -0.027305224910378456,
    0.010791928507387638,
    0.03572993725538254,
    -0.018923422321677208,
    -0.028034700080752373,
    0.004566366318613291,
    0.0042230840772390366,
    0.03990653529763222,
    -0.008353196084499359,
    -0.007602266501635313,
    -0.02288546785712242,
    -0.012429670430719852,
    0.011950505897402763,
    -0.0221702978014946,
    -0.01863735355436802,
    0.00886811874806881,
    0.0002941140264738351,
    0.005113471765071154,
    0.009132732637226582,
    -0.010841990821063519,
    -0.02275673858821392,
    -0.00969056598842144,
    0.00767378369346261,
    -0.01036282628774643,
    0.0013695522211492062,
    0.016048435121774673,
    0.014818340539932251,
    -0.024945160374045372,
    0.0019702957943081856,
    -0.015004285611212254,
    -0.01745017059147358,
    0.009647655300796032,
    0.020897293463349342,
    -0.0106345908716321,
    -0.021683981642127037,
    0.05910172313451767,
    0.0008662507752887905,
    0.008317437954246998,
    -0.019137972965836525,
    -0.004130112007260323,
    -0.027233708649873734,
    0.012679980136454105,
    -0.00040384806925430894,
    -0.00356333889067173,
    0.0025603119283914566,
    -0.0062219868414103985,
    -0.0324687585234642,
    -0.027305224910378456,
    -0.024787822738289833,
    0.021669678390026093,
    0.004609276540577412,
    0.0032200568821281195,
    0.008017065934836864,
    0.012730041518807411,
    0.012265181168913841,
    -0.012722889892756939,
    -0.000892175710760057,
    0.009847903624176979,
    0.014789734035730362,
    -0.031868014484643936,
    0.0322112962603569,
    -0.005177837330847979,
    0.0031735708471387625,
    -0.024058349430561066,
    -3.2713480322854593e-05,
    -0.0003980373148806393,
    -0.01677790842950344,
    -0.006947885267436504,
    0.012679980136454105,
    0.028749870136380196,
    0.012529794126749039,
    9.28884037421085e-06,
    0.004591397009789944,
    -0.021040327847003937,
    -0.02108323760330677,
    0.04173737391829491,
    0.00491679972037673,
    -0.012014871463179588,
    0.02317153662443161,
    0.022313332185149193,
    0.030008571222424507,
    0.018522925674915314,
    -0.010019544512033463,
    -0.014167535118758678,
    -0.012579856440424919,
    0.00387622625567019,
    -0.02664726786315441,
    -0.012758648954331875,
    -0.01394583284854889,
    0.017235618084669113,
    0.01587679423391819,
    -0.014775430783629417,
    -0.031925227493047714,
    -0.032382939010858536,
    -0.006032466422766447,
    -0.02188422903418541,
    -0.003511489136144519,
    0.036273468285799026,
    0.00017823399684857577,
    0.019996177405118942,
    0.02072565257549286,
    0.02940782718360424,
    0.00057750049745664,
    0.02574615180492401,
    -0.025460083037614822,
    0.0055211191065609455,
    0.020039089024066925,
    -0.0022992745507508516,
    -0.003819012548774481,
    -0.012315242551267147,
    -0.051692552864551544,
    0.0008577581029385328,
    0.02616095170378685,
    0.027076371014118195,
    0.0232001431286335,
    0.020010482519865036,
    0.020868686959147453,
    -0.0071123745292425156,
    -1.347231136605842e-05,
    -0.018551532179117203,
    -0.029493648558855057,
    0.0014258719747886062,
    0.03647371754050255,
    -0.027305224910378456,
    -0.027104977518320084,
    0.0017262437613680959,
    -0.002050752518698573,
    -0.002515613567084074,
    0.0158481877297163,
    0.02275673858821392,
    -0.019881751388311386,
    0.007831121794879436,
    -0.004830979276448488,
    -0.05126345157623291,
    -0.003309453371912241,
    0.0017396531766280532,
    0.009804992936551571,
    0.03470009192824364,
    0.01486125122755766,
    0.01870886981487274,
    0.0033344842959195375,
    -0.021455127745866776,
    -0.023243054747581482,
    0.0016404232010245323,
    -0.04185179993510246,
    0.005589060485363007,
    -0.0034810942597687244,
    -0.006071800831705332,
    -0.00964050367474556,
    -0.00975493062287569,
    0.02397252805531025,
    -0.01677790842950344,
    -0.006729758344590664,
    0.004459090530872345,
    -0.003305877558887005,
    0.00023935876379255205,
    0.01845140941441059,
    0.005485360976308584,
    -0.01850862242281437,
    0.01654905453324318,
    -0.00484528299421072,
    0.008167251944541931,
    -0.027076371014118195,
    0.007330501917749643,
    -0.006665392778813839,
    -0.01068465318530798,
    0.023486211895942688,
    -0.004648610949516296,
    -0.036302074790000916,
    -0.014124625362455845,
    0.0067261820659041405,
    -0.0009288282017223537,
    -0.017021067440509796,
    0.018723174929618835,
    0.16591964662075043,
    0.019037850201129913,
    0.01940973848104477,
    0.02827785722911358,
    0.007115950342267752,
    -0.0008944105939008296,
    -0.00031333425431512296,
    0.02719079703092575,
    -0.01451081782579422,
    0.045427653938531876,
    0.004816676024347544,
    0.012558400630950928,
    -0.034471236169338226,
    0.007931245490908623,
    0.020968811586499214,
    6.11806390224956e-05,
    -0.023414695635437965,
    -0.05887286737561226,
    -0.007241105195134878,
    0.029293399304151535,
    0.02548869140446186,
    -0.015633635222911835,
    -0.004362542647868395,
    -0.03352721035480499,
    0.024086955934762955,
    -0.03046628087759018,
    -0.0069264299236238,
    -0.008682174608111382,
    0.025502994656562805,
    0.030838169157505035,
    -0.027047762647271156,
    0.03856201469898224,
    0.0138528598472476,
    -0.015562118962407112,
    -0.04065031558275223,
    -0.010355674661695957,
    -0.00725540891289711,
    -0.017564596608281136,
    0.010112516582012177,
    0.01786496862769127,
    -0.021869925782084465,
    -0.02195574715733528,
    -0.024058349430561066,
    -0.02332887426018715,
    -0.020840080454945564,
    -0.009604745544493198,
    -0.02626107446849346,
    -0.009461711160838604,
    0.015690850093960762,
    0.004226659890264273,
    -0.021555250510573387,
    -0.0038261644076555967,
    0.02847810462117195,
    -0.006919278297573328,
    0.022341938689351082,
    0.012458276934921741,
    0.0075235976837575436,
    0.01773623749613762,
    0.018208250403404236,
    0.007566507905721664,
    -0.011170969344675541,
    0.03046628087759018,
    -0.0270620658993721,
    0.01523314043879509,
    -0.015633635222911835,
    0.012787255458533764,
    -0.030809562653303146,
    0.004144415259361267,
    0.020968811586499214,
    -0.006200531497597694,
    -0.02683321200311184,
    -0.025588814169168472,
    -0.025703242048621178,
    -0.010305612348020077,
    -0.015948310494422913,
    -0.005302992183715105,
    0.02381519041955471,
    0.007094495464116335,
    0.010048151016235352,
    0.033670246601104736,
    0.017207011580467224,
    0.02840658836066723,
    -0.004341087304055691,
    -0.006590299773961306,
    -0.003633068175986409,
    -0.025016678497195244,
    0.03046628087759018,
    -0.037389133125543594,
    -0.016892336308956146,
    -0.015590725466609001,
    -0.010277005843818188,
    -0.02332887426018715,
    -0.008696477860212326,
    -0.003972774371504784,
    0.0168780330568552,
    0.004101505037397146,
    0.01642032340168953,
    2.5952880605473183e-05,
    -0.040249817073345184,
    0.00407289806753397,
    -0.03432820364832878,
    0.058987297117710114,
    -0.008188706822693348,
    0.012057781219482422,
    -0.007012250833213329,
    0.007437777239829302,
    -0.02593209594488144,
    0.017564596608281136,
    0.007051585242152214,
    -0.0017968668835237622,
    -0.03183940798044205,
    -0.019552772864699364,
    0.0018004426965489984,
    -0.012393911369144917,
    0.003686706069856882,
    0.026361199095845222,
    -0.027934575453400612,
    0.002837440464645624,
    0.010534467175602913,
    -0.010620287619531155,
    -0.0316963754594326,
    -0.021154755726456642,
    -0.00028003411716781557,
    -0.003051991807296872,
    -0.009075518697500229,
    -0.012472580187022686,
    -0.01747877709567547,
    0.003726040478795767,
    0.008560596033930779,
    -0.03535804897546768,
    0.004312480334192514,
    0.001050407299771905,
    0.019853144884109497,
    -0.038905296474695206,
    0.0021258455235511065,
    -0.016434626653790474,
    -0.007480687461793423,
    -0.00956183485686779,
    -0.023100020363926888,
    0.04036424681544304,
    -0.011900443583726883,
    0.004416180308908224,
    0.01393152866512537,
    0.01001239288598299,
    0.014746824279427528,
    -0.035300835967063904,
    0.025717545300722122,
    0.017793452367186546,
    -0.03807570040225983,
    -0.028592532500624657,
    -0.021197665482759476,
    0.01277295220643282,
    0.01806521601974964,
    -0.023800887167453766,
    0.02824925072491169,
    -0.02561742067337036,
    -0.015819579362869263,
    -0.013345088809728622,
    0.0069514610804617405,
    -0.0011898656375706196,
    -0.05020499601960182,
    -0.01521883625537157,
    -0.0010736503172665834,
    0.013552488759160042,
    -0.02015351504087448,
    -0.01837989129126072,
    -0.18228276073932648,
    0.00903260800987482,
    -0.0008018853841349483,
    -0.031324487179517746,
    0.006822730414569378,
    0.002742680488154292,
    -0.0159769169986248,
    0.027019156143069267,
    -0.03123866394162178,
    -0.009812144562602043,
    0.024916553869843483,
    0.0018272616434842348,
    0.026332592591643333,
    -0.009983785450458527,
    -0.01306617259979248,
    -0.013523881323635578,
    -0.004727279767394066,
    -0.0017208799254149199,
    0.049489825963974,
    0.013702674768865108,
    0.028177732601761818,
    -0.008167251944541931,
    -0.0011138786794617772,
    0.020010482519865036,
    -0.008474775590002537,
    -0.014424997381865978,
    -0.004280298016965389,
    0.010741867125034332,
    -0.01626298576593399,
    -0.026432717218995094,
    -0.01940973848104477,
    0.008203010074794292,
    0.018665960058569908,
    0.004144415259361267,
    0.015161623246967793,
    0.010670349933207035,
    0.004641459323465824,
    -0.027534078806638718,
    -0.02673308737576008,
    0.001829943503253162,
    0.03962046653032303,
    0.03621625527739525,
    0.01438208669424057,
    -0.011471341364085674,
    -0.01644892990589142,
    0.00019968912238255143,
    0.01473252009600401,
    -0.013180599547922611,
    0.010913508012890816,
    -0.013166296295821667,
    0.032182689756155014,
    -0.013159144669771194,
    -0.003309453371912241,
    -0.0039048329927027225,
    0.012036326341331005,
    0.013309330679476261,
    0.01129970047622919,
    0.006618906743824482,
    -0.005435298662632704,
    -0.018294071778655052,
    -0.010312763974070549,
    -0.020811473950743675,
    0.011192424222826958,
    -0.007916942238807678,
    -0.0040800501592457294,
    -0.013166296295821667,
    -0.01577666960656643,
    0.0337560661137104,
    0.0017825635150074959,
    0.011714499443769455,
    0.016205772757530212,
    -0.013895770534873009,
    -0.005617667455226183,
    0.011957657523453236,
    0.001727137714624405,
    -0.0001195676377392374,
    -0.020482495427131653,
    0.022742435336112976,
    0.0012667464325204492,
    -0.026346895843744278,
    -0.0238437969237566,
    0.03781823813915253,
    -0.03146751970052719,
    -0.008589202538132668,
    0.005660577677190304,
    -0.0036831300240010023,
    0.004069322254508734,
    -0.01747877709567547,
    -0.0079884584993124,
    -0.01280871033668518,
    0.011542858555912971,
    -0.019295310601592064,
    0.006357869133353233,
    -0.018780387938022614,
    -0.0022152417805045843,
    0.03770380839705467,
    0.0037403437308967113,
    -0.014560879208147526,
    0.0052672335878014565,
    -0.03778963163495064,
    0.003940591588616371,
    0.007502142805606127,
    -0.037617988884449005,
    -0.0002190210943808779,
    0.02937922067940235,
    0.020496798679232597,
    -0.03409934788942337,
    0.010548770427703857,
    0.02902163565158844,
    -0.021397912874817848,
    0.007094495464116335,
    -0.008775146678090096,
    0.01825116202235222,
    0.00274446839466691,
    -0.0034882461186498404,
    0.009540379978716373,
    0.01386716403067112,
    -0.009633352048695087,
    0.022484973073005676,
    0.014210445806384087,
    0.03438541665673256,
    0.011757409200072289,
    -0.0049489825032651424,
    0.008210161700844765,
    -0.007845425046980381,
    -0.036845605820417404,
    -0.10870597511529922,
    -0.031152844429016113,
    -0.012858772650361061,
    -0.004019260406494141,
    -0.021641071885824203,
    -0.007545053027570248,
    -0.016191469505429268,
    0.00948316603899002,
    -0.042252298444509506,
    -0.000943131628446281,
    0.0016395292477682233,
    0.02567463554441929,
    -0.025502994656562805,
    -0.00387622625567019,
    0.004044291563332081,
    0.005556877702474594,
    -0.027405349537730217,
    0.016477538272738457,
    -0.0011398036731407046,
    0.004630731418728828,
    -0.011685892008244991,
    -0.009068367071449757,
    -0.0022295452654361725,
    -0.0051742615178227425,
    -0.021526644006371498,
    0.002458399860188365,
    -0.018108127638697624,
    0.009225704707205296,
    0.02917897328734398,
    0.0269333366304636,
    0.003051991807296872,
    -0.019810233265161514,
    -0.013173447921872139,
    0.0016654542414471507,
    -0.019609985873103142,
    -0.01170019619166851,
    -0.026661571115255356,
    -0.017249921336770058,
    0.03020881861448288,
    -0.01087774895131588,
    -0.00996233057230711,
    -0.0033362722024321556,
    0.02330026775598526,
    -0.006869216449558735,
    -0.008660719729959965,
    0.03535804897546768,
    -0.02268522046506405,
    0.01850862242281437,
    0.001781669445335865,
    -0.01995326764881611,
    -0.011800319887697697,
    -0.0049024964682757854,
    -0.013123385608196259,
    0.009983785450458527,
    0.0052207475528120995,
    -0.01561933197081089,
    -0.004906072281301022,
    0.01438208669424057,
    -0.01353103294968605,
    -0.005535422824323177,
    0.021226271986961365,
    0.01200056727975607,
    -0.0112782446667552,
    0.0005721367197111249,
    -0.002304638270288706,
    -0.01197196077555418,
    -0.026089433580636978,
    -0.01438208669424057,
    -0.0010092849843204021,
    -0.034785911440849304,
    -0.025846276432275772,
    0.03807570040225983,
    -0.0032772705890238285,
    0.01577666960656643,
    -0.017178405076265335,
    -0.008961091749370098,
    -0.01202202308923006,
    -0.0009529652306810021,
    0.008903877809643745,
    -0.0031288727186620235,
    -0.03100981004536152,
    0.005628394894301891,
    -0.00440187705680728,
    -0.02002478577196598,
    0.004033563658595085,
    0.027948878705501556,
    0.011914746835827827,
    -0.0019631441682577133,
    0.008574899286031723,
    -0.03364164009690285,
    0.011664437130093575,
    -0.010405736975371838,
    0.028234947472810745,
    0.007931245490908623,
    -0.023514818400144577,
    0.016620570793747902,
    -0.006504479330033064,
    -0.00419447710737586,
    -0.016205772757530212,
    0.0002637192665133625,
    -0.014789734035730362,
    0.0017459109658375382,
    -0.07981307059526443,
    0.012186512351036072,
    -0.006468720734119415,
    -0.01280871033668518,
    0.003205753630027175,
    -0.03979210928082466,
    0.013359392061829567,
    -0.022928379476070404,
    -0.010162578895688057,
    0.0009654806926846504,
    -0.01561933197081089,
    -0.012551249004900455,
    -0.0012336698127910495,
    -0.023486211895942688,
    0.0023421847727149725,
    -0.006783396005630493,
    0.025202622637152672,
    -0.01860874705016613,
    0.03590158000588417,
    0.014661003835499287,
    -0.005646274425089359,
    -0.013838556595146656,
    0.034242384135723114,
    2.7698904887074605e-05,
    -0.026990549638867378,
    -0.0042695701122283936,
    -0.010906356386840343,
    0.006665392778813839,
    0.013631157577037811,
    -0.010613135993480682,
    0.0225564893335104,
    0.004702248610556126,
    -0.00494183087721467,
    0.02548869140446186,
    0.008818057365715504,
    0.01112090703099966,
    0.02291407622396946,
    0.004383997526019812,
    0.0221702978014946,
    0.00346679100766778,
    -0.0067333341576159,
    -0.03432820364832878,
    0.010112516582012177,
    0.010698956437408924,
    -0.04147991165518761,
    -0.001320384326390922,
    0.0016413171542808414,
    0.006930006202310324,
    0.01426765974611044,
    0.014718216843903065,
    0.04605700448155403,
    0.01036282628774643,
    0.004752310458570719,
    -0.03209687024354935,
    0.01719270832836628,
    0.007266136351972818,
    0.012572704814374447,
    0.003372030798345804,
    -0.03069513477385044,
    0.0013194902567192912,
    0.04783063009381294,
    0.023572033271193504,
    0.02992274984717369,
    -0.005281537305563688,
    0.001161258784122765,
    -0.01084914244711399,
    -0.027877362444996834,
    -0.009633352048695087,
    0.0030305366963148117,
    -0.017207011580467224,
    0.014224749058485031,
    -0.038104306906461716,
    0.01248688343912363,
    0.003672402584925294,
    -0.0016681361012160778,
    -0.019495557993650436,
    -0.007373412139713764,
    -0.021068934351205826,
    -0.02837798185646534,
    0.03146751970052719,
    0.02304280549287796,
    -0.00503837876021862,
    -0.00409792922437191,
    0.0021669678390026093,
    0.0038011332508176565,
    -0.01144273392856121,
    -0.01729283295571804,
    -0.0073805637657642365,
    0.014353480190038681,
    0.01928100734949112,
    -0.00026841257931664586,
    -0.004409028682857752,
    0.004183749668300152,
    0.023643549531698227,
    0.019881751388311386,
    0.004988316912204027,
    0.010920659638941288,
    -0.008560596033930779,
    -0.003305877558887005,
    0.016606267541646957,
    0.01039858441799879,
    0.010870597325265408,
    0.008796602487564087,
    -0.01417468674480915,
    -0.013860012404620647,
    -0.019209491088986397,
    -0.0006516994908452034,
    -0.030351852998137474,
    -0.002218817826360464,
    0.0075235976837575436,
    0.017764845862984657,
    -0.005628394894301891,
    -0.004208780825138092,
    0.020525405183434486,
    -0.030809562653303146,
    0.010341371409595013,
    -0.005739246495068073,
    0.0029125334694981575,
    -0.010069605894386768,
    0.01036282628774643,
    -0.011306852102279663,
    -0.007187467534095049,
    0.04039285331964493,
    0.013316482305526733,
    0.02443023771047592,
    -0.016863729804754257,
    0.029221883043646812,
    0.0006727076251991093,
    0.004144415259361267,
    -0.014296266250312328,
    -0.0027945302426815033,
    -0.003990653436630964,
    -0.016606267541646957,
    -0.01693524606525898,
    -0.02461618185043335,
    -0.017407258972525597,
    0.038705047219991684,
    0.009847903624176979,
    -0.024415934458374977,
    0.09726323932409286,
    0.0007647858583368361,
    -0.02198435366153717,
    0.019495557993650436,
    0.01176456082612276,
    0.016191469505429268,
    0.0011827138951048255,
    0.0067941234447062016,
    0.010999328456819057,
    -0.022341938689351082,
    -0.005667729303240776,
    0.010341371409595013,
    -0.011414127424359322,
    0.011385520920157433,
    -0.01288737915456295,
    0.01793648675084114,
    -0.011113755404949188,
    0.02317153662443161,
    0.0158481877297163,
    0.0005184988840483129,
    0.0005345902172848582,
    0.0158481877297163,
    0.024501755833625793,
    0.007630873471498489,
    -0.049346793442964554,
    -0.0018648081459105015,
    0.03072374127805233,
    0.005842946004122496,
    0.002892866265028715,
    -0.03753216937184334,
    0.012193663977086544,
    -0.022828254848718643,
    -0.018665960058569908,
    -0.021412216126918793,
    0.01700676418840885,
    0.015705153346061707,
    -0.012536945752799511,
    0.0035794302821159363,
    0.014804037287831306,
    -0.013430909253656864,
    0.009182794019579887,
    -0.011449886485934258,
    -0.014489362016320229,
    -0.04105081036686897,
    0.02229902893304825,
    0.0024923705495893955,
    -0.01049155741930008,
    -0.0061290147714316845,
    -0.029751108959317207
  ]
}
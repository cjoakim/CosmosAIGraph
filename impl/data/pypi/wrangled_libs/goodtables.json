{
  "classifiers": [
    "development status :: 4 - beta",
    "environment :: web environment",
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "operating system :: os independent",
    "programming language :: python :: 2",
    "programming language :: python :: 2.7",
    "programming language :: python :: 3",
    "programming language :: python :: 3.4",
    "programming language :: python :: 3.5",
    "programming language :: python :: 3.6",
    "topic :: internet :: www/http :: dynamic content",
    "topic :: software development :: libraries :: python modules"
  ],
  "description": "goodtables is a framework to inspect tabular data.\n# goodtables-py\n\n[![travis](https://img.shields.io/travis/frictionlessdata/goodtables-py/master.svg)](https://travis-ci.org/frictionlessdata/goodtables-py)\n[![coveralls](http://img.shields.io/coveralls/frictionlessdata/goodtables-py.svg?branch=master)](https://coveralls.io/r/frictionlessdata/goodtables-py?branch=master)\n[![pypi](https://img.shields.io/pypi/v/goodtables.svg)](https://pypi.python.org/pypi/goodtables)\n[![github](https://img.shields.io/badge/github-master-brightgreen)](https://github.com/frictionlessdata/goodtables-py)\n[![gitter](https://img.shields.io/gitter/room/frictionlessdata/chat.svg)](https://gitter.im/frictionlessdata/chat)\n\ngoodtables is a framework to validate tabular data. it can check the structure\nof your data (e.g. all rows have the same number of columns), and its contents\n(e.g. all dates are valid).\n\n> **[important notice]** `goodtables` was renamed to `frictionless` since version 3. the framework got various improvements and was extended to be a complete data solution. the change in not breaking for the existing software so no actions are required. please read the [migration guide](https://framework.frictionlessdata.io/docs/development/migration#from-goodtables) to start working with frictionless for python.\n> - we continue to bug-fix `goodtables@2.x` in this [branch](https://github.com/frictionlessdata/goodtables-py/tree/goodtables) as well as it's available on [pypi](https://pypi.org/project/goodtables/) as it was before\n> - please note that `frictionless@3.x` version's api, we're working on at the moment, is not stable\n> - we will release `frictionless@4.x` by the end of 2020 to be the first semver/stable version\n\n## features\n\n* **structural checks**: ensure that there are no empty rows, no blank headers, etc.\n* **content checks**: ensure that the values have the correct types (\"string\", \"number\", \"date\", etc.), that their format is valid (\"string must be an e-mail\"), and that they respect the constraints (\"age must be a number greater than 18\").\n* **support for multiple tabular formats**: csv, excel files, libreoffice, data package, etc.\n* **parallelized validations for multi-table datasets**\n* **command line interface**\n\n## contents\n\n<!--toc-->\n\n  - [getting started](#getting-started)\n    - [installing](#installing)\n    - [running on cli](#running-on-cli)\n    - [running on python](#running-on-python)\n  - [documentation](#documentation)\n    - [report](#report)\n    - [checks](#checks)\n    - [presets](#presets)\n    - [data quality errors](#data-quality-errors)\n    - [frequently asked questions](#frequently-asked-questions)\n  - [api reference](#api-reference)\n    - [`cli`](#cli)\n    - [`validate`](#validate)\n    - [`preset`](#preset)\n    - [`check`](#check)\n    - [`error`](#error)\n    - [`spec`](#spec)\n    - [`goodtablesexception`](#goodtablesexception)\n  - [contributing](#contributing)\n  - [changelog](#changelog)\n\n<!--toc-->\n\n## getting started\n\n> for faster goodtables-combatible pandas dataframes validation take a look at https://github.com/ezwelty/goodtables-pandas-py\n\n### installing\n\n```\npip install goodtables\npip install goodtables[ods]  # if you need libreoffice's ods file support\n```\n\n### running on cli\n\n```\ngoodtables data.csv\n```\n\nuse `goodtables --help` to see the different options.\n\n### running on python\n\n```python\nfrom goodtables import validate\n\nreport = validate('invalid.csv')\nreport['valid'] # false\nreport['table-count'] # 1\nreport['error-count'] # 3\nreport['tables'][0]['valid'] # false\nreport['tables'][0]['source'] # 'invalid.csv'\nreport['tables'][0]['errors'][0]['code'] # 'blank-header'\n```\n\nyou can read a more in depth explanation on using goodtables with python on\nthe [developer documentation](#developer-documentation) section. check also\nthe [examples](examples) folder for other examples.\n\n## documentation\n\ngoodtables validates your tabular dataset to find structural and content\nerrors. consider you have a file named `invalid.csv`. let's validate it:\n\n```python\nreport = validate('invalid.csv')\n```\n\nwe could also pass a remote uri instead of a local path. it supports csv, xls,\nxlsx, ods, json, and all other formats supported by the [tabulator][tabulator]\nlibrary.\n\n### report\n\n> the validation report follows the json schema defined on [goodtables/schemas/report.json][validation-jsonschema].\n\nthe output of the `validate()` method is a report dictionary. it includes\ninformation if the data was valid, count of errors, list of table reports, which\nindividual checks failed, etc. a report will be looking like this:\n\n```json\n{\n    \"time\": 0.009,\n    \"error-count\": 1,\n    \"warnings\": [\n        \"table \\\"data/invalid.csv\\\" inspection has reached 1 error(s) limit\"\n    ],\n    \"preset\": \"table\",\n    \"valid\": false,\n    \"tables\": [\n        {\n            \"errors\": [\n                {\n                    \"row-number\": null,\n                    \"message\": \"header in column 3 is blank\",\n                    \"row\": null,\n                    \"column-number\": 3,\n                    \"code\": \"blank-header\"\n                }\n            ],\n            \"error-count\": 1,\n            \"headers\": [\n                \"id\",\n                \"name\",\n                \"\",\n                \"name\"\n            ],\n            \"scheme\": \"file\",\n            \"row-count\": 2,\n            \"valid\": false,\n            \"encoding\": \"utf-8\",\n            \"time\": 0.007,\n            \"schema\": null,\n            \"format\": \"csv\",\n            \"source\": \"data/invalid\"\n        }\n    ],\n    \"table-count\": 1\n}\n```\n\nthe errors are divided in one of the following categories:\n\n- `source` - data can't be loaded or parsed\n- `structure` - general tabular errors like duplicate headers\n- `schema` - error of checks against [table schema](http://specs.frictionlessdata.io/table-schema/)\n- `custom` - custom checks errors\n\n### checks\n\ncheck is a main validation actor in goodtables. the list of enabled checks can\nbe changed using `checks` and `skip_checks` arguments. let's explore the options\non an example:\n\n```python\nreport = validate('data.csv') # by default structure and schema (if available) checks\nreport = validate('data.csv', checks=['structure']) # only structure checks\nreport = validate('data.csv', checks=['schema']) # only schema (if available) checks\nreport = validate('data.csv', checks=['bad-headers']) # check only 'bad-headers'\nreport = validate('data.csv', skip_checks=['bad-headers']) # exclude 'bad-headers'\n```\n\nby default a dataset will be validated against all available data quality spec\nerrors. some checks can be unavailable for validation. for example, if the\nschema isn't provided, only the `structure` checks will be done.\n\n### presets\n\ngoodtables support different formats of tabular datasets. they're called\npresets. a tabular dataset is some data that can be split in a list of data\ntables, as:\n\n![dataset](data/dataset.png)\n\nwe can change the preset using the `preset` argument for `validate()`. by\ndefault, it'll be inferred from the source, falling back to `table`. to validate\na [data package][datapackage], we can do:\n\n```python\nreport = validate('datapackage.json') # implicit preset\nreport = validate('datapackage.json', preset='datapackage') # explicit preset\n```\n\nthis will validate all tabular resources in the datapackage.\n\nit's also possible to validate a list of files using the \"nested\" preset. to do\nso, the first argument to `validate()` should be a list of dictionaries, where\neach key in the dictionary is named after a parameter on `validate()`. for example:\n\n```python\nreport = validate([{'source': 'data1.csv'}, {'source': 'data2.csv'}]) # implicit preset\nreport = validate([{'source': 'data1.csv'}, {'source': 'data2.csv'}], preset='nested') # explicit preset\n```\n\nis similar to:\n\n```python\nreport_data1 = validate('data1.csv')\nreport_data2 = validate('data2.csv')\n```\n\nthe difference is that goodtables validates multiple tables in parallel, so\ncalling using the \"nested\" preset should run faster.\n\n### data quality errors\n\nbase report errors are standardized and described in\n[data quality spec](https://github.com/frictionlessdata/data-quality-spec/blob/master/spec.json).\n\n#### source errors\n\nthe basic checks can't be disabled, as they deal with goodtables being able to read the files.\n\n| check | description |\n| --- | --- |\n| io-error | data reading error because of io error. |\n| http-error | data reading error because of http error. |\n| source-error | data reading error because of not supported or inconsistent contents. |\n| scheme-error | data reading error because of incorrect scheme. |\n| format-error | data reading error because of incorrect format. |\n| encoding-error | data reading error because of an encoding problem. |\n\n#### structure errors\n\nthese checks validate that the structure of the file are valid.\n\n| check | description |\n| --- | --- |\n| blank-header | there is a blank header name. all cells in the header row must have a value. |\n| duplicate-header | there are multiple columns with the same name. all column names must be unique. |\n| blank-row | rows must have at least one non-blank cell. |\n| duplicate-row | rows can't be duplicated. |\n| extra-value | a row has more columns than the header. |\n| missing-value | a row has less columns than the header. |\n\n#### schema errors\n\nthese checks validate the contents of the file. to use them, you need to pass a [table schema][tableschema]. if you don't have a schema, goodtables can infer it if you use the `infer_schema` option.\n\nif your schema only covers part of the data, you can use the `infer_fields` to infer the remaining fields.\n\nlastly, if the order of the fields in the data is different than in your schema, enable the `order_fields` option.\n\n| check | description |\n| --- | --- |\n| schema-error | schema is not valid. |\n| non-matching-header | the header's name in the schema is different from what's in the data. |\n| extra-header | the data contains a header not defined in the schema. |\n| missing-header | the data doesn't contain a header defined in the schema. |\n| type-or-format-error | the value can\u2019t be cast based on the schema type and format for this field. |\n| required-constraint | this field is a required field, but it contains no value. |\n| pattern-constraint | this field value's should conform to the defined pattern. |\n| unique-constraint | this field is a unique field but it contains a value that has been used in another row. |\n| enumerable-constraint | this field value should be equal to one of the values in the enumeration constraint. |\n| minimum-constraint | this field value should be greater or equal than constraint value. |\n| maximum-constraint | this field value should be less or equal than constraint value. |\n| minimum-length-constraint | a length of this field value should be greater or equal than schema constraint value. |\n| maximum-length-constraint | a length of this field value should be less or equal than schema constraint value. |\n\n#### custom errors\n\n| check | description |\n| --- | --- |\n| [blacklisted-value](#blacklisted-value) | ensure there are no cells with the blacklisted values. |\n| [deviated-value](#deviated-value) | ensure numbers are within a number of standard deviations from the average. |\n| [foreign-key](#foreign-key) | ensure foreign keys are valid within a data package |\n| [sequential-value](#sequential-value) | ensure numbers are sequential. |\n| [truncated-value](#truncated-value) | detect values that were potentially truncated. |\n| [custom-constraint](#custom-constraint) | defines a constraint based on the values of other columns (e.g. `value * quantity == total`). |\n\n##### blacklisted-value\n\nsometimes we have to check for some values we don't want to have in out dataset. it accepts following options:\n\n| option | type | description |\n| --- | --- | --- |\n| column | int/str | column number or name |\n| blacklist | list of str | list of blacklisted values |\n\nconsider the following csv file:\n\n```csv\nid,name\n1,john\n2,bug\n3,bad\n5,alex\n```\n\nlet's check that the `name` column doesn't contain rows with `bug` or `bad`:\n\n```python\nfrom goodtables import validate\n\nreport = validate('data.csv', checks=[\n    {'blacklisted-value': {'column': 'name', 'blacklist': ['bug', 'bad']}},\n])\n# error on row 3 with code \"blacklisted-value\"\n# error on row 4 with code \"blacklisted-value\"\n```\n\n##### deviated-value\n\nthis check helps to find outlines in a column containing positive numbers. it accepts following options:\n\n| option | type | description |\n| --- | --- | --- |\n| column | int/str | column number or name |\n| average | str | average type, either \"mean\", \"median\" or \"mode\" |\n| interval | int | values must be inside range `average \u00b1 standard deviation * interval` |\n\nconsider the following csv file:\n\n```csv\ntemperature\n1\n-2\n7\n0\n1\n2\n5\n-4\n100\n8\n3\n```\n\nwe use `median` to get an average of the column values and allow interval of 3 standard deviations. for our case median is `2.0` and standard deviation is `29.73` so all valid values must be inside the `[-87.19, 91.19]` interval.\n\n```python\nreport = validate('data.csv', checks=[\n    {'deviated-value': {'column': 'temperature', 'average': 'median', 'interval': 3}},\n])\n# error on row 10 with code \"deviated-value\"\n```\n\n##### foreign-key\n\n> we support here relative paths. it must be used only for trusted data sources.\n\nthis check validate foreign keys within a data package. consider we have a data package defined below:\n\n```python\ndescriptor = {\n  'resources': [\n    {\n      'name': 'cities',\n      'data': [\n        ['id', 'name', 'next_id'],\n        [1, 'london', 2],\n        [2, 'paris', 3],\n        [3, 'rome', 4],\n        # [4, 'rio', none],\n      ],\n      'schema': {\n        'fields': [\n          {'name': 'id', 'type': 'integer'},\n          {'name': 'name', 'type': 'string'},\n          {'name': 'next_id', 'type': 'integer'},\n        ],\n        'foreignkeys': [\n          {\n            'fields': 'next_id',\n            'reference': {'resource': '', 'fields': 'id'},\n          },\n          {\n            'fields': 'id',\n            'reference': {'resource': 'people', 'fields': 'label'},\n          },\n        ],\n      },\n    }, {\n      'name': 'people',\n      'data': [\n        ['label', 'population'],\n        [1, 8],\n        [2, 2],\n        # [3, 3],\n        # [4, 6],\n      ],\n    },\n  ],\n}\n```\n\nrunning `goodtables` on it will raise a few `foreign-key` errors because we have commented some rows in the data package's data:\n\n```python\nreport = validate(descriptor, checks=['structure', 'schema', 'foreign-key'])\nprint(report)\n```\n\n```\n{'error-count': 2,\n 'preset': 'datapackage',\n 'table-count': 2,\n 'tables': [{'datapackage': '...',\n             'error-count': 2,\n             'errors': [{'code': 'foreign-key',\n                         'message': 'foreign key \"[\\'next_id\\']\" violation in '\n                                    'row 4',\n                         'message-data': {'fields': ['next_id']},\n                         'row-number': 4},\n                        {'code': 'foreign-key',\n                         'message': 'foreign key \"[\\'id\\']\" violation in row 4',\n                         'message-data': {'fields': ['id']},\n                         'row-number': 4}],\n             'format': 'inline',\n             'headers': ['id', 'name', 'next_id'],\n             'resource-name': 'cities',\n             'row-count': 4,\n             'schema': 'table-schema',\n             'source': 'inline',\n             'time': 0.031,\n             'valid': false},\n            {'datapackage': '...',\n             'error-count': 0,\n             'errors': [],\n             'format': 'inline',\n             'headers': ['label', 'population'],\n             'resource-name': 'people',\n             'row-count': 3,\n             'source': 'inline',\n             'time': 0.038,\n             'valid': true}],\n 'time': 0.117,\n 'valid': false,\n 'warnings': []}\n```\n\nit experimetally supports external resource checks, for example, for a `foreignkey` definition like these:\n\n```json\n{\"package\": \"../people/datapackage.json\", \"resource\": \"people\", \"fields\": \"label\"}\n{\"package\": \"http:/example.com/datapackage.json\", \"resource\": \"people\", \"fields\": \"label\"}\n```\n\n##### sequential-value\n\nthis checks is for pretty common case when a column should have integers that sequentially increment.  it accepts following options:\n\n| option | type | description |\n| --- | --- | --- |\n| column | int/str | column number or name |\n\nconsider the following csv file:\n\n```csv\nid,name\n1,one\n2,two\n3,three\n5,five\n```\n\nlet's check if the `id` column contains sequential integers:\n\n```python\nfrom goodtables import validate\n\nreport = validate('data.csv', checks=[\n    {'sequential-value': {'column': 'id'}},\n])\n# error on row 5 with code \"sequential-value\"\n```\n\n##### truncated-value\n\nsome database or spreadsheet software (like mysql or excel) could cutoff values on saving. there are some well-known heuristics to find this bad values. see https://github.com/propublica/guides/blob/master/data-bulletproofing.md for more detailed information.\n\nconsider the following csv file:\n\n```csv\nid,amount,comment\n1,14000000,good\n2,2147483647,bad\n3,32767,bad\n4,234234234,bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbad\n```\n\nto detect all probably truncated values we could use `truncated-value` check:\n\n```python\nreport = validate('data.csv', checks=[\n    'truncated-value',\n])\n# error on row 3 with code \"truncated-value\"\n# error on row 4 with code \"truncated-value\"\n# error on row 5 with code \"truncated-value\"\n```\n\n##### custom-constraint\n\nwith table schema we could create constraints for an individual field but sometimes it's not enough. with a custom constraint check every row could be checked against given limited python expression in which variable names resolve to column values. see list of [available operators]( https://github.com/danthedeckie/simpleeval#operators). it accepts following options:\n\n<dl>\n  <dt>constraint (str)</dt>\n  <dd>constraint definition (e.g. <code>col1 + col2 == col3</code>)</dd>\n</dl>\n\nconsider csv file like this:\n\n```csv\nid,name,salary,bonus\n1,alex,1000,200\n2,sam,2500,500\n3,ray,1350,500\n4,john,5000,1000\n```\n\nlet's say our business rule is to be shy on bonuses:\n\n```python\nreport = validate('data.csv', checks=[\n    {'custom-constraint': {'constraint': 'salary > bonus * 4'}},\n])\n# error on row 4 with code \"custom-constraint\"\n```\n\n### frequently asked questions\n\n#### how can i add a new custom check?\n\nto create a custom check user could use a `check` decorator. this way the builtin check could be overridden (use the spec error code like `duplicate-row`) or could be added a check for a custom error (use `type`, `context` and `position` arguments):\n\n```python\nfrom goodtables import validate, check, error\n\n@check('custom-check', type='custom', context='body')\ndef custom_check(cells):\n    errors = []\n    for cell in cells:\n        message = 'custom error on column {column_number} and row {row_number}'\n        error = error(\n            'custom-error',\n            cell,\n            message\n        )\n        errors.append(error)\n    return errors\n\nreport = validate('data.csv', checks=['custom-check'])\n```\n\nrecommended steps:\n- let's discuss in comment proposed checks first\n- select name for a new check like `possible-noise-text`\n- copy https://github.com/frictionlessdata/goodtables-py/blob/master/goodtables/contrib/checks/blacklisted_value.py to new check module\n- add new check module to configuration - https://github.com/frictionlessdata/goodtables-py/blob/master/goodtables/config.py\n- write actual code for the new check\n- write tests and readme for the new check\n\n#### how can i add support for a new tabular file type?\n\nto create a custom preset user could use a `preset` decorator. this way the builtin preset could be overridden or could be added a custom preset.\n\n```python\nfrom tabulator import stream\nfrom tableschema import schema\nfrom goodtables import validate\n\n@preset('custom-preset')\ndef custom_preset(source, **options):\n    warnings = []\n    tables = []\n    for table in source:\n        try:\n            tables.append({\n                'source':  str(source),\n                'stream':  stream(...),\n                'schema': schema(...),\n                'extra': {...},\n            })\n        except exception:\n            warnings.append('warning message')\n    return warnings, tables\n\nreport = validate(source, preset='custom-preset')\n```\n\nfor now this documentation section is incomplete. please see builtin presets to learn more about the dataset extraction protocol.\n\n## api reference\n\n### `cli`\n```python\ncli()\n```\ncommand-line interface\n\n```\nusage: cli.py [options] command [args]...\n\noptions:\n  --version  show the version and exit.\n  --help     show this message and exit.\n\ncommands:\n  validate*  validate tabular files (default).\n  init       init data package from list of files.\n```\n\n\n### `validate`\n```python\nvalidate(source, **options)\n```\nvalidates a source file and returns a report.\n\n__arguments__\n\n- __source (union[str, dict, list[dict], io])__:\n        the source to be validated.\n        it can be a local file path, url, dict, list of dicts, or a\n        file-like object. if it's a list of dicts and the `preset` is\n        \"nested\", each of the dict key's will be used as if it was passed\n        as a keyword argument to this method.\n\n        the file can be a csv, xls, json, and any other format supported by\n        `tabulator`_.\n- __checks (list[str])__:\n        list of checks names to be enabled. they can be\n        individual check names (e.g. `blank-headers`), or check types (e.g.\n        `structure`).\n- __skip_checks (list[str])__:\n        list of checks names to be skipped. they can\n        be individual check names (e.g. `blank-headers`), or check types\n        (e.g.  `structure`).\n- __infer_schema (bool)__:\n        infer schema if one wasn't passed as an argument.\n- __infer_fields (bool)__:\n        infer schema for columns not present in the received schema.\n- __order_fields (bool)__:\n        order source columns based on schema fields order.\n        this is useful when you don't want to validate that the data\n        columns' order is the same as the schema's.\n- __error_limit (int)__:\n        stop validation if the number of errors per table exceeds this value.\n- __table_limit (int)__:\n        maximum number of tables to validate.\n- __row_limit (int)__:\n        maximum number of rows to validate.\n- __preset (str)__:\n        dataset type could be `table` (default), `datapackage`,\n        `nested` or custom. usually, the preset can be inferred from the\n        source, so you don't need to define it.\n- __any (any)__:\n        any additional arguments not defined here will be passed on,\n        depending on the chosen `preset`. if the `preset` is `table`, the\n        extra arguments will be passed on to `tabulator`_, if it is\n        `datapackage`, they will be passed on to the `datapackage`_\n        constructor.\n\n__raises__\n- `goodtablesexception`: raised on any non-tabular error.\n\n__returns__\n\n`dict`: the validation report.\n\n\n### `preset`\n```python\npreset(name)\n```\nregister a custom preset (decorator)\n\n__example__\n\n\n```python\n@preset('custom-preset')\ndef custom_preset(source, **options):\n    # ...\n```\n\n__arguments__\n- __name (str)__: preset name\n\n\n### `check`\n```python\ncheck(name, type=none, context=none, position=none)\n```\nregister a custom check (decorator)\n\n__example__\n\n\n```python\n@check('custom-check', type='custom', context='body')\ndef custom_check(cells):\n    # ...\n```\n\n__arguments__\n- __name (str)__: preset name\n- __type (str)__: has to be `custom`\n- __context (str)__: has to be `head` or `body`\n- __position (str)__: has to be `before:<check-name>` or `after:<check-name>`\n\n\n### `error`\n```python\nerror(self, code, cell=none, row_number=none, message=none, message_substitutions=none)\n```\ndescribes a validation check error\n\n__arguments__\n- __code (str)__: the error code. must be one in the spec.\n- __cell (dict, optional)__: the cell where the error occurred.\n- __row_number (int, optional)__: the row number where the error occurs.\n- __message (str, optional)__:\n        the error message. defaults to the message from the data quality spec.\n- __message_substitutions (dict, optional)__:\n        dictionary with substitutions to be used when\n        generating the error message and description.\n\n__raises__\n- `keyerror`: raised if the error code isn't known.\n\n\n### `spec`\ndict() -> new empty dictionary\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs\ndict(iterable) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in iterable:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  for example:  dict(one=1, two=2)\n### `goodtablesexception`\n```python\ngoodtablesexception(self, /, *args, **kwargs)\n```\nbase goodtables exception\n\n## contributing\n\n> the project follows the [open knowledge international coding standards](https://github.com/okfn/coding-standards).\n\nrecommended way to get started is to create and activate a project virtual environment.\nto install package and development dependencies into active environment:\n\n```bash\n$ make install\n```\n\nto run tests with linting and coverage:\n\n```bash\n$ make test\n```\n\n## changelog\n\nhere described only breaking and the most important changes. the full changelog and documentation for all released versions could be found in nicely formatted [commit history](https://github.com/frictionlessdata/goodtables-py/commits/master).\n\n##### v2.5\n\n- added `check.check_headers_hook` to support headers check for body-contexted checks (see https://github.com/frictionlessdata/goodtables-py/tree/v3 for native support)\n\n##### v2.4\n\n- added integrity checks for data packages. if `resource.bytes` or `resource.hash` (sha256) is provided it will be verified against actual values\n\n##### v2.3\n\n- added a [foreign keys check](#foreign-key)\n\n##### v2.2\n\n- improved missing/non-matching-headers detection ([#298](https://github.com/frictionlessdata/goodtables-py/issues/298))\n\n##### v2.1\n\n- a new key added to the `error.to_dict` return: `message-data`\n\n##### v2.0\n\nbreaking changes:\n\n- checks method signature now only receives the current row's `cells` list\n- checks raise errors by returning an array of `error` objects\n- cells have the row number in the `row-number` key\n- files with zip extension are presumed to be datapackages, so `goodtables mydatapackage.zip` works\n- improvements to goodtables cli ([#233](https://github.com/frictionlessdata/goodtables-py/issues/233))\n- new `goodtables init <data paths>` command to create a new `datapackage.json` with the files passed as parameters and their inferred schemas.\n\nbug fixes:\n- fix bug with `truncated-values` check on date fields ([#250](https://github.com/frictionlessdata/goodtables-py/issues/250))\n\n##### v1.5\n\nnew api added:\n- validation `source` now could be a `pathlib.path`\n\n##### v1.4\n\nimproved behaviour:\n- rebased on data quality spec v1\n- rebased on data package spec v1\n- rebased on table schema spec v1\n- treat primary key as required/unique field\n\n##### v1.3\n\nnew advanced checks added:\n- `blacklisted-value`\n- `custom-constraint`\n- `deviated-value`\n- `sequential-value`\n- `truncated-value`\n\n##### v1.2\n\nnew api added:\n- `report.preset`\n- `report.tables[].schema`\n\n##### v1.1\n\nnew api added:\n- `report.tables[].scheme`\n- `report.tables[].format`\n- `report.tables[].encoding`\n\n##### v1.0\n\nthis version includes various big changes. a migration guide is under development and will be published here.\n\n##### v0.6\n\nfirst version of `goodtables`.\n\n[tableschema]: https://specs.frictionlessdata.io/table-schema/\n[tabulator]: https://github.com/frictionlessdata/tabulator-py/\n[datapackage]: https://specs.frictionlessdata.io/data-package/ \"data package specification\"\n[semver]: https://semver.org/ \"semantic versioning\"\n[validation-jsonschema]: goodtables/schemas/report.json \"validation report json schema\"\n\n",
  "docs_url": null,
  "keywords": "data validation,frictionless data,open data,json schema,json table schema,data package,tabular data package",
  "license": "mit",
  "name": "goodtables",
  "package_url": "https://pypi.org/project/goodtables/",
  "project_url": "https://pypi.org/project/goodtables/",
  "project_urls": {
    "Homepage": "https://github.com/frictionlessdata/goodtables"
  },
  "release_url": "https://pypi.org/project/goodtables/2.5.4/",
  "requires_dist": [
    "six (>=1.9)",
    "click (>=6.6)",
    "click-default-group",
    "requests (>=2.10)",
    "simpleeval (>=0.9)",
    "statistics (>=1.0)",
    "tabulator (>=1.40)",
    "tableschema (>=1.16.4)",
    "datapackage (>=1.10)",
    "mock ; extra == 'develop'",
    "pylama ; extra == 'develop'",
    "pytest ; extra == 'develop'",
    "pytest-cov ; extra == 'develop'",
    "pyyaml ; extra == 'develop'",
    "ezodf (>=0.3) ; extra == 'ods'",
    "lxml (>=3.0) ; extra == 'ods'"
  ],
  "requires_python": "",
  "summary": "goodtables is a framework to inspect tabular data.",
  "version": "2.5.4",
  "releases": [],
  "developers": [
    "info@okfn.org",
    "open_knowledge_international"
  ],
  "kwds": "goodtables frictionlessdata tableschema goodtablesexception tables",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_goodtables",
  "homepage": "https://github.com/frictionlessdata/goodtables",
  "release_count": 100,
  "dependency_ids": [
    "pypi_click",
    "pypi_click_default_group",
    "pypi_datapackage",
    "pypi_ezodf",
    "pypi_lxml",
    "pypi_mock",
    "pypi_pylama",
    "pypi_pytest",
    "pypi_pytest_cov",
    "pypi_pyyaml",
    "pypi_requests",
    "pypi_simpleeval",
    "pypi_six",
    "pypi_statistics",
    "pypi_tableschema",
    "pypi_tabulator"
  ],
  "documentation_summary": "Goodtables is a Python framework designed for validating tabular data, ensuring structural integrity and content accuracy. It supports various tabular formats like CSV, Excel, and LibreOffice, and offers features like parallelized validations for datasets and a command-line interface. The framework checks for empty rows, blank headers, correct data types, and format validity, among other things. Goodtables was renamed to Frictionless from version 3, with improvements and extensions for a complete data solution, but continues to support and bug-fix version 2.x under its original name. It is licensed under the MIT License and maintained by Open Knowledge International. The latest version, 2.5.4, was released on February 24, 2021.",
  "embedding": [
    0.0010977343190461397,
    -0.0002075457596220076,
    -0.00662425858899951,
    -0.029428914189338684,
    -0.009277403354644775,
    0.009848637506365776,
    -0.0037130259443074465,
    -0.033916205167770386,
    -0.0032106146682053804,
    -0.015044809319078922,
    0.022381391376256943,
    -0.0016173514304682612,
    -0.030585147440433502,
    0.02093609794974327,
    0.005994523875415325,
    0.022519037127494812,
    0.022119861096143723,
    -0.01355822291225195,
    0.0013317340053617954,
    -0.01309022307395935,
    0.022023508325219154,
    -0.0013790501980111003,
    -0.04902983829379082,
    -0.01044740155339241,
    -0.016779160127043724,
    0.05092936381697655,
    -0.0023262330796569586,
    -0.004848612938076258,
    -0.010137696750462055,
    0.02675856277346611,
    0.027873503044247627,
    -0.021982215344905853,
    -0.02583632804453373,
    -0.018596099689602852,
    -0.030832912772893906,
    -0.015154927037656307,
    -0.013895457610487938,
    0.019243041053414345,
    0.02817632630467415,
    0.02543715201318264,
    0.01604963280260563,
    0.00011506422742968425,
    -0.0066896406933665276,
    -0.0025154976174235344,
    0.008568521589040756,
    0.013454987667500973,
    0.033751025795936584,
    -0.0163111612200737,
    -0.005729553289711475,
    0.014287751168012619,
    0.013881692662835121,
    0.02441856451332569,
    -0.01971103996038437,
    -0.016063395887613297,
    0.0031848058570176363,
    -0.0003998213214799762,
    0.004786672070622444,
    0.03344820439815521,
    -0.03958725556731224,
    0.02107374556362629,
    -0.0010332122910767794,
    -0.029896913096308708,
    -0.033695969730615616,
    -4.667091343435459e-05,
    -0.016765395179390907,
    -0.001315388479270041,
    -0.017040690407156944,
    0.02759820967912674,
    -0.011968400329351425,
    0.007384757976979017,
    -0.0030471589416265488,
    0.038458552211523056,
    0.013165928423404694,
    -0.0008809403516352177,
    0.03672420233488083,
    -0.04085360839962959,
    -0.028850795701146126,
    0.0003264812985435128,
    -0.029924442991614342,
    -0.009545814245939255,
    0.006087435409426689,
    -0.017040690407156944,
    -0.02037174627184868,
    0.03622867166996002,
    0.016063395887613297,
    0.03408138081431389,
    -0.013241634704172611,
    0.01971103996038437,
    -0.004731613211333752,
    -0.015209985896945,
    -0.014893397688865662,
    0.012002812698483467,
    -0.004989701323211193,
    0.01829327642917633,
    -0.03196161612868309,
    0.028492914512753487,
    -0.01174816582351923,
    0.02547844685614109,
    -0.009649049490690231,
    0.0013781898887827992,
    -0.0216518621891737,
    0.014033104293048382,
    -0.014480456709861755,
    -0.008630462922155857,
    -0.01825198344886303,
    -0.00965593196451664,
    0.01671033725142479,
    -0.017137043178081512,
    0.0022694538347423077,
    0.004373731091618538,
    -0.008878227323293686,
    0.021679392084479332,
    -0.014631868340075016,
    -0.015265044756233692,
    -0.014700692147016525,
    0.005316612776368856,
    0.019339393824338913,
    -0.016820454970002174,
    -0.014741986058652401,
    -0.014088163152337074,
    -0.006111523602157831,
    -0.006730935070663691,
    -0.0015640131896361709,
    -0.01626986637711525,
    0.0019803952891379595,
    -0.005757082719355822,
    -0.005264995153993368,
    -0.011755047366023064,
    0.026703504845499992,
    -0.009779814630746841,
    0.03344820439815521,
    0.01821068860590458,
    0.031135736033320427,
    -0.012925046496093273,
    -0.006015170831233263,
    0.010702048428356647,
    -0.017467396333813667,
    0.02622174099087715,
    -0.0042911432683467865,
    -0.04443242773413658,
    0.007439816370606422,
    0.02187209762632847,
    -0.021500449627637863,
    3.4226904972456396e-06,
    -0.004163819830864668,
    0.0040468196384608746,
    0.01231939997524023,
    0.006975258234888315,
    0.004139731638133526,
    -0.016214808449149132,
    0.02353762462735176,
    -0.025340799242258072,
    -0.010481813922524452,
    0.026111623272299767,
    -0.0018513512331992388,
    -0.007109464146196842,
    0.00588440615683794,
    0.0040468196384608746,
    -0.0007329699001275003,
    -0.00852722767740488,
    0.00305920303799212,
    0.031135736033320427,
    -0.009724755771458149,
    -0.018196923658251762,
    -0.01609092578291893,
    0.03512749820947647,
    0.013620163314044476,
    -0.027653267607092857,
    -0.013413693755865097,
    0.009098461829125881,
    0.0034618203062564135,
    0.024404801428318024,
    -0.021679392084479332,
    0.0022057921160012484,
    0.014046869240701199,
    0.018885158002376556,
    0.03746749460697174,
    0.0017610203940421343,
    -0.02503797598183155,
    0.010378578677773476,
    0.0018926452612504363,
    0.03735737502574921,
    0.017247160896658897,
    0.03234702721238136,
    -0.028685620054602623,
    -0.025629857555031776,
    0.00108827103395015,
    0.0027546591591089964,
    0.02653832733631134,
    -0.01075710728764534,
    0.017481159418821335,
    0.018898922950029373,
    -0.010901636444032192,
    -0.025368329137563705,
    -0.5717303156852722,
    -0.026386916637420654,
    -0.005203053820878267,
    -0.013661458157002926,
    0.0074811107479035854,
    0.02481774240732193,
    0.014535515569150448,
    -0.003346540965139866,
    -0.03460443764925003,
    0.030172206461429596,
    -0.015567868016660213,
    0.01860986463725567,
    0.007942227646708488,
    -0.006018612068146467,
    0.012057870626449585,
    -0.03606349602341652,
    0.019807392731308937,
    -0.014150104485452175,
    -0.00010285881580784917,
    0.03452185168862343,
    -0.03187903016805649,
    0.04200984165072441,
    0.0006146795931272209,
    -0.0006508118822239339,
    -0.000397670577513054,
    0.02381291799247265,
    0.007013110909610987,
    0.0014203442260622978,
    0.024184565991163254,
    0.00941505003720522,
    -0.01088787242770195,
    0.01665527932345867,
    0.009187932126224041,
    -0.01426022220402956,
    0.05147995054721832,
    -0.009222344495356083,
    -0.03168632462620735,
    0.042395252734422684,
    0.02596021071076393,
    0.05225077643990517,
    -0.02441856451332569,
    -0.006300788372755051,
    -0.004019290208816528,
    0.01617351360619068,
    0.025712447240948677,
    -0.0036166731733828783,
    0.018816335126757622,
    0.012931928969919682,
    -0.01635245606303215,
    0.005468024406582117,
    -0.015099868178367615,
    -0.003071247134357691,
    -0.0004439113545231521,
    -0.020179040729999542,
    0.021982215344905853,
    -0.008362051099538803,
    0.017384806647896767,
    -0.004101878497749567,
    -5.9736616094596684e-05,
    -0.008272580802440643,
    0.009215462021529675,
    0.030337383970618248,
    0.0036269966512918472,
    -0.038596197962760925,
    -0.02213362604379654,
    0.006964934524148703,
    0.003088453086093068,
    -0.015265044756233692,
    0.004328995943069458,
    -0.017687629908323288,
    0.00919481460005045,
    -0.004700642544776201,
    -0.012656635604798794,
    -0.01665527932345867,
    0.015072339214384556,
    0.07344840466976166,
    0.016958102583885193,
    0.015636691823601723,
    0.024625035002827644,
    0.045919016003608704,
    0.007267757784575224,
    0.004889907315373421,
    -0.005966994445770979,
    -0.007013110909610987,
    0.02371656522154808,
    -0.01600833795964718,
    -0.0435514897108078,
    -0.0016663881251588464,
    -0.003599467221647501,
    -0.0019545864779502153,
    0.019518334418535233,
    0.015622926875948906,
    0.001877160044386983,
    -0.03331055864691734,
    0.018623629584908485,
    0.007116346154361963,
    -0.02403315342962742,
    0.0018496306147426367,
    -0.02631809376180172,
    -0.019766099750995636,
    -0.017315983772277832,
    -0.007556816563010216,
    0.01772892475128174,
    0.016779160127043724,
    0.013971162959933281,
    -0.002641100436449051,
    0.0006185508682392538,
    0.011259518563747406,
    -0.013344869948923588,
    -0.011954636313021183,
    6.96837596478872e-05,
    -0.02600150555372238,
    -0.039394550025463104,
    -0.01035793125629425,
    -0.010474931448698044,
    -0.036696672439575195,
    0.013145281933248043,
    -0.0036786142736673355,
    -0.0036166731733828783,
    -0.010846578516066074,
    0.007969757542014122,
    0.010461166501045227,
    -0.0004251999780535698,
    -0.01622857339680195,
    0.022188685834407806,
    0.00863734446465969,
    0.00861669797450304,
    0.01223681215196848,
    -0.028162561357021332,
    0.02940138429403305,
    0.0043152314610779285,
    0.026207976043224335,
    0.018802570179104805,
    -0.01185828261077404,
    0.013413693755865097,
    0.01582939736545086,
    -0.008912638761103153,
    0.014521751552820206,
    0.0033792320173233747,
    0.010585049167275429,
    -0.02009645104408264,
    -0.006386817432940006,
    0.013131516985595226,
    -0.03578820079565048,
    -0.009683461859822273,
    -0.006517582107335329,
    -0.017343513667583466,
    -0.004865819122642279,
    -0.023083390668034554,
    0.027515621855854988,
    -0.017522454261779785,
    -0.005209936294704676,
    -0.018017983064055443,
    -0.003298364579677582,
    -0.0016904763178899884,
    -0.010392343625426292,
    -0.010075755417346954,
    -0.018857629969716072,
    -0.010234049521386623,
    -0.009490755386650562,
    -0.004070907831192017,
    0.009160403162240982,
    -0.004865819122642279,
    -0.012360693886876106,
    -0.012911282479763031,
    -0.014631868340075016,
    -0.010557519271969795,
    0.029291266575455666,
    -0.0325397327542305,
    -0.025946445763111115,
    0.008960815146565437,
    -0.025561034679412842,
    0.008279463276267052,
    0.028327738866209984,
    0.008596050553023815,
    0.041101373732089996,
    -0.013434340246021748,
    0.0007906095706857741,
    0.000967829953879118,
    0.0002654004783835262,
    -0.002869938500225544,
    -0.00855475664138794,
    -0.01983492262661457,
    -0.03716466948390007,
    0.011342107318341732,
    0.02011021599173546,
    0.004463201854377985,
    0.01877504214644432,
    0.012560281902551651,
    0.021486686542630196,
    0.007632522378116846,
    0.004583642818033695,
    -0.022161155939102173,
    0.005805259104818106,
    -0.012980105355381966,
    0.015677984803915024,
    -0.012264341115951538,
    0.00015657338371966034,
    -0.01271857600659132,
    0.014507986605167389,
    0.014934691600501537,
    0.0015270205913111567,
    -0.010172108188271523,
    -0.019022805616259575,
    -0.01256716437637806,
    -0.004549230914562941,
    0.03152114525437355,
    -0.0325397327542305,
    -0.007426051888614893,
    -0.001074506319127977,
    0.030392441898584366,
    -0.019642217084765434,
    -0.014452927745878696,
    -0.012835576198995113,
    0.007783934008330107,
    -0.0012276385677978396,
    -0.014205163344740868,
    0.018403394147753716,
    -0.018183158710598946,
    0.0043530841358006,
    0.0002866927534341812,
    0.022381391376256943,
    0.030750324949622154,
    0.011823871172964573,
    0.011273283511400223,
    0.02107374556362629,
    -0.01386104617267847,
    0.006207876373082399,
    0.019559629261493683,
    -0.03372349962592125,
    -0.002118042204529047,
    0.007900933735072613,
    0.003410202683880925,
    -0.03108067624270916,
    0.007543051615357399,
    -0.017839042469859123,
    0.026731034740805626,
    -0.028066208586096764,
    0.01366833969950676,
    -0.046442072838544846,
    0.01587069034576416,
    0.02667597495019436,
    0.027309151366353035,
    -0.022326331585645676,
    0.006796317175030708,
    -0.005316612776368856,
    0.009373756125569344,
    0.019587157294154167,
    -0.03810067102313042,
    -0.0004049830895382911,
    -0.0061872294172644615,
    0.022890685126185417,
    -0.03108067624270916,
    -0.003062644274905324,
    0.0032673939131200314,
    -0.02627679891884327,
    -0.0011545136803761125,
    0.01573304459452629,
    0.02649703435599804,
    -0.007962875068187714,
    0.008169345557689667,
    -0.00120699149556458,
    0.013324222527444363,
    0.02904350310564041,
    0.03094303049147129,
    -0.016682807356119156,
    -0.03840349242091179,
    -0.030475029721856117,
    -0.01600833795964718,
    -0.0025499092880636454,
    -0.020991157740354538,
    -0.02587762288749218,
    -0.02121139131486416,
    0.0011622562306001782,
    0.028685620054602623,
    0.023069625720381737,
    0.005406083073467016,
    0.020619509741663933,
    -0.02375786006450653,
    0.005653847474604845,
    -0.039917610585689545,
    -0.016696572303771973,
    0.046304427087306976,
    -0.0016405793139711022,
    -0.0039022904820740223,
    -0.01613222062587738,
    -0.026386916637420654,
    -0.029428914189338684,
    -0.03135596960783005,
    -0.008534109219908714,
    -0.015182456001639366,
    0.0029095120262354612,
    -0.015086103230714798,
    -0.0013661457924172282,
    -0.009525167755782604,
    -0.01855480670928955,
    0.040055256336927414,
    -0.003633878892287612,
    0.013220987282693386,
    0.020523156970739365,
    0.012677282094955444,
    -0.016421278938651085,
    -0.013351752422749996,
    -0.01821068860590458,
    0.023289861157536507,
    -0.008602933026850224,
    0.003864437574520707,
    0.0164350438863039,
    -0.00861669797450304,
    -0.03658655285835266,
    0.020702097564935684,
    0.02045433409512043,
    -0.007832109928131104,
    -0.0008667455404065549,
    0.009662814438343048,
    0.005423289258033037,
    0.0062560527585446835,
    0.014563045464456081,
    0.04713030904531479,
    -0.01799045316874981,
    -0.03487973287701607,
    -0.03300773352384567,
    -0.005695141851902008,
    0.0003441173175815493,
    0.017426101490855217,
    0.02896091341972351,
    -0.003540967358276248,
    0.010529990307986736,
    -0.027047621086239815,
    -0.010247813537716866,
    0.0021249244455248117,
    -0.014342810027301311,
    -0.017949160188436508,
    -0.003871319815516472,
    -0.005664171185344458,
    0.0003606779791880399,
    0.01595328003168106,
    0.01781151257455349,
    0.003933261148631573,
    0.013021399267017841,
    -0.002978335367515683,
    0.018458453938364983,
    0.012216164730489254,
    0.027667032554745674,
    -0.01749492436647415,
    -0.015499044209718704,
    0.01883010007441044,
    0.030227266252040863,
    0.07251240313053131,
    -0.006975258234888315,
    0.04195478558540344,
    0.004060584586113691,
    -0.003358585061505437,
    0.010867225006222725,
    -0.017384806647896767,
    0.0032140559051185846,
    0.02159680239856243,
    0.017646336928009987,
    -0.029786795377731323,
    0.0218170378357172,
    0.03350326418876648,
    -0.0007273780065588653,
    -0.0010495578171685338,
    0.01793539524078369,
    0.023881742730736732,
    0.022161155939102173,
    0.005712347570806742,
    -0.024693859741091728,
    -0.0073709930293262005,
    -0.020179040729999542,
    -0.005079171620309353,
    0.02865809015929699,
    -0.0326223224401474,
    -0.01366833969950676,
    -1.2689326467807405e-05,
    0.023344919085502625,
    -0.03666914254426956,
    -0.01004822552204132,
    0.03534772992134094,
    -0.023110918700695038,
    -0.0040915547870099545,
    -0.026111623272299767,
    -0.011135636828839779,
    -0.03204420581459999,
    -0.0009196535684168339,
    -0.030309854075312614,
    0.007226463872939348,
    0.00014560464478563517,
    -0.0028406884521245956,
    0.010440520010888577,
    -0.020357981324195862,
    0.017783982679247856,
    -0.03986255079507828,
    0.017481159418821335,
    0.00965593196451664,
    -0.04679995775222778,
    -0.015485279262065887,
    -0.0227530375123024,
    0.01622857339680195,
    0.0032622322905808687,
    -0.003313849912956357,
    0.0010702048894017935,
    0.014060634188354015,
    -0.003263952909037471,
    -0.007426051888614893,
    -0.0413491390645504,
    0.004965613130480051,
    -0.032291971147060394,
    0.018596099689602852,
    0.003940143156796694,
    0.01284934114664793,
    0.024748917669057846,
    0.011638048104941845,
    0.01749492436647415,
    -0.0017317704623565078,
    0.009559579193592072,
    -0.01044740155339241,
    -0.019504569470882416,
    0.021225156262516975,
    0.008513462729752064,
    -0.0015218588523566723,
    0.0019408217631280422,
    0.005877523683011532,
    -0.026469504460692406,
    -0.003193408716470003,
    -0.03152114525437355,
    -0.010068872943520546,
    -0.017398571595549583,
    -0.0054577006958425045,
    -0.00025228102458640933,
    -0.023510094732046127,
    0.008699285797774792,
    0.007260875776410103,
    -0.017563749104738235,
    6.618881889153272e-05,
    -0.018623629584908485,
    0.0027701444923877716,
    0.00025550712598487735,
    -0.008692403323948383,
    -0.0073021696880459785,
    0.007116346154361963,
    0.04880960285663605,
    -0.0020870715379714966,
    -0.008210639469325542,
    0.009910578839480877,
    -0.024528682231903076,
    0.014975986443459988,
    0.034274086356163025,
    -0.0012981826439499855,
    0.027584444731473923,
    -0.011176930740475655,
    -0.022051038220524788,
    -0.02817632630467415,
    0.005660729948431253,
    0.027212798595428467,
    0.014948456548154354,
    -0.009215462021529675,
    -0.011830753646790981,
    -0.0020647039636969566,
    0.010172108188271523,
    0.010220284573733807,
    0.007721992675215006,
    -0.01373028103262186,
    0.009070932865142822,
    -0.01715080812573433,
    -0.006978699471801519,
    -0.016875512897968292,
    -0.004201672505587339,
    -0.008258815854787827,
    -0.028327738866209984,
    -0.022326331585645676,
    -0.008313874714076519,
    -0.005705465096980333,
    0.015251279808580875,
    0.011720635928213596,
    0.0025430270470678806,
    -0.031851500272750854,
    -0.005313171539455652,
    -0.009917461313307285,
    0.006858258508145809,
    -0.023647742345929146,
    0.02191339060664177,
    0.013929869048297405,
    0.03201667591929436,
    0.013716517016291618,
    0.009683461859822273,
    0.025712447240948677,
    -0.00769446324557066,
    -0.007102581672370434,
    0.011314577423036098,
    -0.022285038605332375,
    -0.013076458126306534,
    -0.01723339594900608,
    -0.007735757622867823,
    -0.03565055504441261,
    0.00797664001584053,
    -0.019064100459218025,
    -0.04289078339934349,
    -0.017866572365164757,
    0.01905033551156521,
    0.017756454646587372,
    -0.005117024760693312,
    -0.026731034740805626,
    0.0004723010351881385,
    0.008492815308272839,
    0.00015001364226918668,
    -0.008389580063521862,
    0.017907865345478058,
    -0.024363506585359573,
    -0.014397868886590004,
    0.03609102591872215,
    0.0005123046576045454,
    0.02517562359571457,
    0.021679392084479332,
    0.0271577388048172,
    0.006139053031802177,
    0.02305586077272892,
    0.004339319653809071,
    0.016366219148039818,
    -0.01554033812135458,
    -0.003468702547252178,
    -0.026565857231616974,
    -0.042257606983184814,
    -0.0033310556318610907,
    0.009903696365654469,
    0.026166681200265884,
    -0.004332437179982662,
    0.03006208874285221,
    -0.0283827967941761,
    0.02777715027332306,
    0.011238872073590755,
    -0.004559554625302553,
    -0.01300075277686119,
    -0.048424191772937775,
    -0.008547874167561531,
    -0.00729528721421957,
    -0.004191348794847727,
    -0.013372398912906647,
    -0.006307670380920172,
    -0.011238872073590755,
    0.020206568762660027,
    0.022904450073838234,
    -0.008313874714076519,
    -0.022119861096143723,
    -0.008368933573365211,
    -0.005585024133324623,
    0.03165879473090172,
    0.013097105547785759,
    0.02860303223133087,
    0.012704811990261078,
    0.008974580094218254,
    -0.00426361383870244,
    -0.012876870110630989,
    -0.007660051807761192,
    -0.026331856846809387,
    0.022642919793725014,
    0.00023378471087198704,
    -0.00430834898725152,
    -0.03050255961716175,
    -0.008437756448984146,
    -0.024170801043510437,
    -0.029291266575455666,
    -0.00938752107322216,
    0.027845973148941994,
    0.0033998792059719563,
    -0.0077564045786857605,
    -0.041596900671720505,
    0.03182397037744522,
    -0.01715080812573433,
    0.028492914512753487,
    -0.012925046496093273,
    -0.026125388219952583,
    0.014287751168012619,
    -0.026827387511730194,
    -0.01565045677125454,
    0.04297337308526039,
    0.013379281386733055,
    0.003368908539414406,
    0.019298098981380463,
    -0.01903657056391239,
    0.006317994091659784,
    -0.041817136108875275,
    0.0005213377298787236,
    0.0013764692703261971,
    0.021390333771705627,
    0.036256201565265656,
    0.0050722891464829445,
    -0.003540967358276248,
    0.03248467668890953,
    -0.006207876373082399,
    -0.025684917345643044,
    -0.0037267906591296196,
    -0.001566594117321074,
    0.041762080043554306,
    -0.004356525372713804,
    -0.0324571467936039,
    -0.0008280323236249387,
    -0.0024329095613211393,
    0.01366833969950676,
    -0.023152213543653488,
    -0.011383401229977608,
    -0.005392318591475487,
    -0.025093035772442818,
    -0.0023227918427437544,
    -0.010543755255639553,
    -0.009064050391316414,
    -0.03658655285835266,
    0.0005806979606859386,
    -0.005227142013609409,
    -0.013014516793191433,
    -0.015567868016660213,
    -0.002068145200610161,
    0.03041997179389,
    -0.007921581156551838,
    -0.02207856811583042,
    -0.006022053305059671,
    -0.018788805231451988,
    0.014480456709861755,
    -0.0011373077286407351,
    -0.0028303649742156267,
    0.009318697266280651,
    0.043441370129585266,
    -0.009821108542382717,
    0.009050285443663597,
    -0.0051376717165112495,
    0.0015924029285088181,
    -0.04002772644162178,
    -0.010481813922524452,
    -0.014618104323744774,
    0.01737104170024395,
    0.0045251427218317986,
    0.006724052596837282,
    -0.015636691823601723,
    -0.03218185156583786,
    0.011424695141613483,
    0.010674519464373589,
    0.009910578839480877,
    -0.0194908045232296,
    -0.004418466240167618,
    0.020000098273158073,
    0.012050989083945751,
    -0.014246457256376743,
    -0.013661458157002926,
    -0.003072967752814293,
    0.0011983886361122131,
    -0.001040094648487866,
    0.01317969337105751,
    -0.020289156585931778,
    0.02147292159497738,
    0.025024211034178734,
    -0.015430220402777195,
    0.028988443315029144,
    -0.037274789065122604,
    -0.0042911432683467865,
    -0.013537575490772724,
    0.0052994065918028355,
    -0.02513432875275612,
    0.017081983387470245,
    0.009710990823805332,
    0.0051824068650603294,
    -0.018981510773301125,
    0.035953376442193985,
    0.020729627460241318,
    0.0035220407880842686,
    0.013434340246021748,
    0.026331856846809387,
    -0.0014917486114427447,
    0.01554033812135458,
    0.007921581156551838,
    -0.01639374904334545,
    -0.020426804199814796,
    0.011961517855525017,
    -0.024501154199242592,
    -0.018596099689602852,
    -0.0205919798463583,
    0.03909172862768173,
    0.02137656882405281,
    -0.01106681302189827,
    -0.016682807356119156,
    0.0010822489857673645,
    -0.020357981324195862,
    -0.013964281417429447,
    -0.021803272888064384,
    0.05324183404445648,
    -0.0043427604250609875,
    -0.0040468196384608746,
    0.009532050229609013,
    0.031493619084358215,
    0.0020148069597780704,
    0.025340799242258072,
    -0.04231266677379608,
    0.01617351360619068,
    -0.0075292871333658695,
    0.014074398204684258,
    0.03041997179389,
    -0.01465939823538065,
    -0.04399196058511734,
    0.012856223620474339,
    0.007921581156551838,
    0.020302921533584595,
    0.01565045677125454,
    -0.00956646166741848,
    0.025602329522371292,
    -0.0030471589416265488,
    0.0005880104727111757,
    0.0005135951214469969,
    0.021225156262516975,
    -0.001231079688295722,
    0.016985630616545677,
    -0.008561639115214348,
    0.0072126989252865314,
    -0.0002935750817414373,
    0.032291971147060394,
    0.04679995775222778,
    -0.01829327642917633,
    -0.015664219856262207,
    -0.03545784950256348,
    0.0045939660631120205,
    -0.020302921533584595,
    -0.009091579355299473,
    0.011369636282324791,
    -0.010000049136579037,
    -0.009125991724431515,
    -0.002226439071819186,
    0.036338791251182556,
    0.01913292333483696,
    0.005953229498118162,
    -0.01595328003168106,
    -0.008754344657063484,
    0.029373854398727417,
    -0.03146608918905258,
    0.014480456709861755,
    0.018802570179104805,
    -0.033255498856306076,
    -0.0020853509195148945,
    0.0075981104746460915,
    0.03735737502574921,
    -0.0025688358582556248,
    -0.002582600573077798,
    -0.00965593196451664,
    -0.025161858648061752,
    -0.02185833267867565,
    -0.003503114450722933,
    0.02459750697016716,
    -0.010316637344658375,
    0.00033680483466014266,
    0.025863857939839363,
    0.013661458157002926,
    0.012037224136292934,
    -0.018265748396515846,
    0.002703041536733508,
    -0.03174138069152832,
    -0.014769515953958035,
    0.007322816643863916,
    0.012064753100275993,
    -0.012408871203660965,
    -0.0026961592957377434,
    0.0020526598673313856,
    -0.010633225552737713,
    0.010839696042239666,
    0.18984264135360718,
    0.012030341662466526,
    0.03730231896042824,
    0.012594694271683693,
    0.009242990985512733,
    0.014329045079648495,
    0.01860986463725567,
    0.0010220285039395094,
    -0.0052994065918028355,
    0.02697879821062088,
    -0.0011553738731890917,
    -0.015746809542179108,
    -0.0017326307715848088,
    0.0026359388139098883,
    0.007419169414788485,
    0.008382697589695454,
    -0.04324866458773613,
    -0.03072279505431652,
    0.01706821843981743,
    0.01269792951643467,
    -0.012574046850204468,
    -0.03190656006336212,
    -0.03298020362854004,
    -0.011410930193960667,
    0.03672420233488083,
    -0.003874761052429676,
    0.004552672151476145,
    -0.00963528547435999,
    0.02543715201318264,
    0.00048692600103095174,
    -0.012525870464742184,
    0.019243041053414345,
    -0.015746809542179108,
    0.00885757990181446,
    -0.03460443764925003,
    -0.008891991339623928,
    -0.0022642919793725014,
    0.006662111263722181,
    0.01749492436647415,
    0.014081280678510666,
    0.021720685064792633,
    -0.022161155939102173,
    -0.030915500596165657,
    -0.0693189948797226,
    -0.01569174975156784,
    -0.019022805616259575,
    -0.0024965712800621986,
    0.029869383201003075,
    0.006338641047477722,
    0.02529950626194477,
    -0.027694562450051308,
    0.014088163152337074,
    -0.003131467616185546,
    0.011190695688128471,
    -0.0010564401745796204,
    -0.029346326366066933,
    0.0010616019135341048,
    -5.2262817916925997e-05,
    0.02009645104408264,
    -0.02353762462735176,
    -0.016517631709575653,
    0.028327738866209984,
    -0.0073709930293262005,
    0.023303626105189323,
    -0.05070912837982178,
    -0.0002561523288022727,
    -0.04765336588025093,
    -0.006039259023964405,
    0.015265044756233692,
    -0.015595396980643272,
    -0.008754344657063484,
    -0.004800436552613974,
    -0.02243644930422306,
    -0.006059905979782343,
    -0.010688284412026405,
    -0.02265668474137783,
    0.026386916637420654,
    0.0087061682716012,
    0.007811463437974453,
    0.015347632579505444,
    -0.004848612938076258,
    0.02613915130496025,
    -0.01324851717799902,
    -0.004556113388389349,
    -0.0008499698014929891,
    -0.012360693886876106,
    0.0007884587976150215,
    -0.016297396272420883,
    -0.003406761446967721,
    -0.016118455678224564,
    -0.020798450335860252,
    -0.018582334741950035,
    0.008561639115214348,
    0.001985556911677122,
    -0.010412990115582943,
    0.011631165631115437,
    0.0050034658052027225,
    0.006083994172513485,
    -0.0050482009537518024,
    -0.011844518594443798,
    -0.0477910153567791,
    0.0476258359849453,
    0.01781151257455349,
    0.0012697929050773382,
    -0.005536847747862339,
    -0.0019889981485903263,
    -0.005812141578644514,
    0.012883752584457397,
    0.0021249244455248117,
    -0.022367626428604126,
    -0.021486686542630196,
    -0.03658655285835266,
    -0.00611840607598424,
    -0.005437053740024567,
    0.029566559940576553,
    0.010901636444032192,
    0.017302218824625015,
    -0.002656585769727826,
    0.009504520334303379,
    -0.018678687512874603,
    0.025946445763111115,
    -0.029126090928912163,
    0.036035966128110886,
    -0.008561639115214348,
    -0.002954247174784541,
    -0.028575502336025238,
    -0.019628452137112617,
    0.029015973210334778,
    -0.007178287487477064,
    -0.016256103292107582,
    0.025643622502684593,
    -0.029731737449765205,
    0.005578141659498215,
    0.013358634896576405,
    0.003181364620104432,
    -0.013833516277372837,
    -0.004487290047109127,
    -0.0037130259443074465,
    -0.00863734446465969,
    -0.006170023698359728,
    -0.0437166653573513,
    0.014081280678510666,
    0.011658694595098495,
    -0.0030196295119822025,
    0.01965598203241825,
    -0.00023098874953575432,
    -0.008121169172227383,
    0.003816261189058423,
    0.010695166885852814,
    -0.011486636474728584,
    -0.004039937164634466,
    0.01772892475128174,
    0.01269792951643467,
    -0.012381341308355331,
    0.01855480670928955,
    -0.027309151366353035,
    -0.012794282287359238,
    -0.00528908334672451,
    0.006837611086666584,
    0.004927759990096092,
    -0.03157620504498482,
    0.020000098273158073,
    0.005770847667008638,
    0.008809403516352177,
    -0.011982165277004242,
    -0.013688987120985985,
    -0.17145301401615143,
    0.027790915220975876,
    0.0028389678336679935,
    -0.034053850919008255,
    -0.0029852178413420916,
    0.005172083619982004,
    0.014728221110999584,
    0.03099808841943741,
    0.014645633287727833,
    0.0011631165398284793,
    -0.0001433463767170906,
    -0.016999395564198494,
    -0.003422246780246496,
    0.004745377693325281,
    -0.00833452120423317,
    0.01777021959424019,
    0.013688987120985985,
    0.0073709930293262005,
    0.0500759519636631,
    0.0005449958262033761,
    0.015375162474811077,
    -0.036118555814027786,
    -0.0015253000892698765,
    0.009731638245284557,
    0.0004817642620764673,
    -0.018637394532561302,
    -0.010571284219622612,
    0.021968450397253036,
    -0.009318697266280651,
    -0.02199598029255867,
    -0.015898220241069794,
    0.0015614323783665895,
    0.001243984093889594,
    -0.001136447419412434,
    -0.0032261000014841557,
    0.019821157678961754,
    -0.003850672859698534,
    -0.02433597669005394,
    -0.006197553128004074,
    0.005557494703680277,
    0.032815027981996536,
    0.025905152782797813,
    -0.010695166885852814,
    -0.01192710641771555,
    0.00782522838562727,
    0.025340799242258072,
    0.011238872073590755,
    -0.017123278230428696,
    0.018802570179104805,
    -0.013895457610487938,
    0.03997266665101051,
    -0.02940138429403305,
    0.015333867631852627,
    0.01229875348508358,
    0.015127398073673248,
    0.013062694109976292,
    -0.016242338344454765,
    0.004480407573282719,
    0.029126090928912163,
    -0.012353812344372272,
    -0.0024569977540522814,
    -0.02940138429403305,
    0.02852044440805912,
    0.0007527566631324589,
    -0.01887139491736889,
    -0.011713753454387188,
    -0.009600873105227947,
    0.02768079750239849,
    0.007274640258401632,
    0.027529386803507805,
    0.002341718412935734,
    0.015677984803915024,
    -0.009518285281956196,
    -0.005144554190337658,
    0.016063395887613297,
    0.013695869594812393,
    -0.044019486755132675,
    -0.01229875348508358,
    -0.0032828792463988066,
    -0.002825203351676464,
    -0.012601576745510101,
    0.0009626682149246335,
    -0.0010624622227624059,
    -0.010901636444032192,
    0.011032401584088802,
    -0.020027628168463707,
    0.0008921241387724876,
    0.006180346943438053,
    -0.02129398100078106,
    -0.014755751006305218,
    0.01971103996038437,
    0.01666904240846634,
    -0.02103245072066784,
    -0.0011390283470973372,
    0.0022057921160012484,
    0.023923035711050034,
    -0.009642167016863823,
    0.015774337574839592,
    1.8913011444965377e-05,
    -0.04713030904531479,
    0.029071031138300896,
    0.013434340246021748,
    -0.034631967544555664,
    0.00502411276102066,
    0.013344869948923588,
    0.029483972117304802,
    -0.04597407579421997,
    -0.003953908104449511,
    0.01789410039782524,
    0.013055811636149883,
    -0.017467396333813667,
    0.026827387511730194,
    0.02481774240732193,
    0.009559579193592072,
    0.016916807740926743,
    0.007838992401957512,
    0.005540288984775543,
    -0.008451521396636963,
    0.01899527572095394,
    -0.01807304099202156,
    0.03438420221209526,
    -0.00013614141789730638,
    -0.019821157678961754,
    0.02631809376180172,
    -0.012381341308355331,
    -0.013510046526789665,
    -0.12399235367774963,
    -0.020660804584622383,
    0.008258815854787827,
    0.02393680065870285,
    -0.018004218116402626,
    -0.026029033586382866,
    0.01121822465211153,
    0.037192199379205704,
    -0.01679292507469654,
    0.0003458379069343209,
    -0.010096401907503605,
    -0.0036545260809361935,
    -0.025629857555031776,
    0.027391739189624786,
    -0.020220333710312843,
    0.0037061437033116817,
    -0.04063337296247482,
    0.007949110120534897,
    -0.02253280207514763,
    0.010880989953875542,
    -0.028135033324360847,
    -0.0048727011308074,
    -0.005395759828388691,
    0.010674519464373589,
    0.0022539685014635324,
    0.006761905271559954,
    -0.0349072627723217,
    0.026965033262968063,
    -0.003356864443048835,
    0.010234049521386623,
    -0.0036786142736673355,
    -0.03821078687906265,
    -0.008850697427988052,
    -0.0054542594589293,
    0.0014633588725700974,
    -0.007102581672370434,
    -0.02737797424197197,
    -0.023689037188887596,
    0.01927057094871998,
    -0.03476961329579353,
    -0.00396767258644104,
    -0.008513462729752064,
    0.020963627845048904,
    -0.02239515632390976,
    0.01661398448050022,
    -0.005516200792044401,
    -0.013565105386078358,
    0.04646960273385048,
    0.01706821843981743,
    -0.008747462183237076,
    0.006393699906766415,
    -0.0008082455606199801,
    0.0024363505654037,
    -0.03631126135587692,
    0.016022102907299995,
    -0.014342810027301311,
    0.01103928405791521,
    0.011576106771826744,
    0.009841755032539368,
    0.002105998108163476,
    -0.019945040345191956,
    -0.0038782022893428802,
    0.004507937002927065,
    0.044900428503751755,
    0.009538932703435421,
    0.008981462568044662,
    -0.001100315130315721,
    -0.019229276105761528,
    0.04704771935939789,
    -0.018100570887327194,
    -0.006517582107335329,
    -0.004745377693325281,
    -0.023262331262230873,
    0.009435697458684444,
    -0.0163111612200737,
    0.013971162959933281,
    -0.011472871527075768,
    -0.010722695849835873,
    0.013014516793191433,
    -0.013516928069293499,
    -0.024941623210906982,
    0.0022987036500126123,
    -0.005474906414747238,
    -0.008995226584374905,
    0.030750324949622154,
    0.006214758846908808,
    0.012615340761840343,
    0.018279511481523514,
    0.023689037188887596,
    -0.03799055144190788,
    0.011293930932879448,
    -0.00411220220848918,
    0.027790915220975876,
    0.0027598210144788027,
    -0.003981437534093857,
    0.0011192415840923786,
    0.0027322915848344564,
    -0.0009480432490818202,
    -0.004831407219171524,
    -0.0086442269384861,
    -0.03264985233545303,
    -0.019105393439531326,
    -0.06865829229354858,
    0.025423387065529823,
    0.01018587313592434,
    0.011796342208981514,
    -0.013055811636149883,
    -0.02896091341972351,
    -0.020220333710312843,
    -0.013585751876235008,
    -0.012202400714159012,
    0.012656635604798794,
    -0.028575502336025238,
    0.004755701404064894,
    -0.014122574590146542,
    -0.00916728563606739,
    -0.02381291799247265,
    0.004766025114804506,
    0.027405504137277603,
    -0.0032467469573020935,
    0.05101195350289345,
    0.021706920117139816,
    -0.007075052242726088,
    -0.004325554706156254,
    0.025533504784107208,
    0.014301516115665436,
    0.0011287048691883683,
    0.010557519271969795,
    -0.010708930902183056,
    0.040137846022844315,
    -0.007467345800250769,
    -0.030475029721856117,
    0.01498975045979023,
    -0.0026978799141943455,
    -7.887813990237191e-05,
    0.001532182446680963,
    0.015237514860928059,
    -0.0030936147086322308,
    0.005671053659170866,
    -0.011149401776492596,
    0.036696672439575195,
    -0.0077564045786857605,
    -0.00777016906067729,
    -0.018348336219787598,
    0.037632670253515244,
    0.008141815662384033,
    -0.022725507616996765,
    0.012966340407729149,
    -0.020302921533584595,
    0.0041156429797410965,
    0.013695869594812393,
    -0.004762583877891302,
    0.03160373494029045,
    0.017825277522206306,
    -0.036751728504896164,
    -0.027515621855854988,
    0.015567868016660213,
    -0.004401260521262884,
    0.008657991886138916,
    0.014549280516803265,
    0.00821752194315195,
    -0.011342107318341732,
    0.03977996110916138,
    0.024666329845786095,
    0.005392318591475487,
    0.022229978814721107,
    0.0007032897556200624,
    -0.03366843983530998,
    -0.03157620504498482,
    -0.024005625396966934,
    -0.023909272626042366,
    -0.01749492436647415,
    0.0006357567617669702,
    -0.022670449689030647,
    0.009793578647077084,
    0.024046918377280235,
    0.020399274304509163,
    0.004642142914235592,
    -0.028410326689481735,
    0.010495578870177269,
    -0.008189992047846317,
    0.0586375929415226,
    0.03284255787730217,
    -0.025753740221261978,
    -0.03355832025408745,
    0.020137745887041092,
    0.03204420581459999,
    -0.0005174664547666907,
    -0.028272679075598717,
    0.012780517339706421,
    -0.020798450335860252,
    -0.0067584640346467495,
    -0.006259493995457888,
    0.008885109797120094,
    0.004425348713994026,
    0.001293020904995501,
    0.024845270439982414,
    0.02763950265944004,
    0.005646965466439724,
    0.005660729948431253,
    0.02381291799247265,
    0.02569868229329586,
    0.0019907187670469284,
    -0.013984927907586098,
    -0.004470083862543106,
    -0.013131516985595226,
    -0.0195733942091465,
    0.0027322915848344564,
    -0.00341708492487669,
    -0.016104690730571747,
    0.030585147440433502,
    0.03755008429288864,
    0.02635938674211502,
    0.007446698844432831,
    -0.001687035197392106,
    0.02557479962706566,
    -0.007584345992654562,
    0.00236924784258008,
    0.01317969337105751,
    -0.014507986605167389,
    -0.006087435409426689,
    0.01167934201657772,
    0.013551340438425541,
    0.016035867854952812,
    0.031135736033320427,
    -0.022463979199528694,
    0.007453581318259239,
    0.02341374196112156,
    0.017026925459504128,
    0.004896789323538542,
    -0.006214758846908808,
    -0.028685620054602623,
    -0.0062285237945616245,
    -0.008740579709410667,
    -0.00879563856869936,
    -0.010481813922524452,
    0.0005196171696297824,
    -0.0076462868601083755,
    -0.005691700614988804,
    -0.016641514375805855,
    -0.003602908458560705,
    0.09359991550445557,
    -0.002092233393341303,
    -0.012119811959564686,
    0.005743318237364292,
    -0.014783279970288277,
    0.01983492262661457,
    0.025987740606069565,
    0.0008310433477163315,
    -0.010227167047560215,
    -0.010468048974871635,
    -0.013847281225025654,
    -0.010075755417346954,
    -0.05335194990038872,
    -0.049828190356492996,
    0.0029697325080633163,
    0.03256726264953613,
    0.003840349381789565,
    -0.005502435844391584,
    -0.026552092283964157,
    0.03977996110916138,
    0.03810067102313042,
    -0.0012018297566100955,
    0.017081983387470245,
    0.011644930578768253,
    -0.017907865345478058,
    0.00015377742238342762,
    0.03518255427479744,
    0.0001575412170495838,
    0.0041328491643071175,
    -0.06717170029878616,
    0.01073646079748869,
    0.002260850742459297,
    0.007508640177547932,
    -0.008740579709410667,
    -0.010543755255639553,
    -0.024748917669057846,
    -0.013227869756519794,
    -0.020867275074124336,
    -0.006558876018971205,
    0.017839042469859123,
    0.014177633449435234,
    0.007804580964148045,
    -0.04385431110858917,
    -0.03554043918848038,
    -0.005953229498118162,
    0.01554033812135458,
    0.017137043178081512,
    -0.0003062644100282341,
    -0.044184666126966476
  ]
}
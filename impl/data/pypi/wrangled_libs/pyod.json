{
  "classifiers": [
    "development status :: 6 - mature",
    "intended audience :: developers",
    "intended audience :: education",
    "intended audience :: financial and insurance industry",
    "intended audience :: information technology",
    "intended audience :: science/research",
    "license :: osi approved :: bsd license",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.12",
    "programming language :: python :: 3.6",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9"
  ],
  "description": "a comprehensive and scalable python library for outlier detection (anomaly detection)\npython outlier detection (pyod)\r\n===============================\r\n\r\n**deployment & documentation & stats & license**\r\n\r\n.. image:: https://img.shields.io/pypi/v/pyod.svg?color=brightgreen\r\n   :target: https://pypi.org/project/pyod/\r\n   :alt: pypi version\r\n\r\n\r\n.. image:: https://anaconda.org/conda-forge/pyod/badges/version.svg\r\n   :target: https://anaconda.org/conda-forge/pyod\r\n   :alt: anaconda version\r\n\r\n\r\n.. image:: https://readthedocs.org/projects/pyod/badge/?version=latest\r\n   :target: https://pyod.readthedocs.io/en/latest/?badge=latest\r\n   :alt: documentation status\r\n\r\n\r\n.. image:: https://img.shields.io/github/stars/yzhao062/pyod.svg\r\n   :target: https://github.com/yzhao062/pyod/stargazers\r\n   :alt: github stars\r\n\r\n\r\n.. image:: https://img.shields.io/github/forks/yzhao062/pyod.svg?color=blue\r\n   :target: https://github.com/yzhao062/pyod/network\r\n   :alt: github forks\r\n\r\n\r\n.. image:: https://pepy.tech/badge/pyod\r\n   :target: https://pepy.tech/project/pyod\r\n   :alt: downloads\r\n\r\n.. image:: https://github.com/yzhao062/pyod/actions/workflows/testing.yml/badge.svg\r\n   :target: https://github.com/yzhao062/pyod/actions/workflows/testing.yml\r\n   :alt: testing\r\n\r\n\r\n.. image:: https://coveralls.io/repos/github/yzhao062/pyod/badge.svg\r\n   :target: https://coveralls.io/github/yzhao062/pyod\r\n   :alt: coverage status\r\n\r\n\r\n.. image:: https://api.codeclimate.com/v1/badges/bdc3d8d0454274c753c4/maintainability\r\n   :target: https://codeclimate.com/github/yzhao062/pyod/maintainability\r\n   :alt: maintainability\r\n\r\n\r\n.. image:: https://img.shields.io/github/license/yzhao062/pyod.svg\r\n   :target: https://github.com/yzhao062/pyod/blob/master/license\r\n   :alt: license\r\n\r\n.. image:: https://img.shields.io/badge/adbench-benchmark_results-pink\r\n   :target: https://github.com/minqi824/adbench\r\n   :alt: benchmark\r\n\r\n\r\n-----\r\n\r\n\r\nread me first\r\n^^^^^^^^^^^^^\r\n\r\nwelcome to pyod, a versatile python library for detecting anomalies in multivariate data. whether you're tackling a small-scale project or large datasets, pyod offers a range of algorithms to suit your needs.\r\n\r\n* **for time-series outlier detection**, please use `tods <https://github.com/datamllab/tods>`_.\r\n\r\n* **for graph outlier detection**, please use `pygod <https://pygod.org/>`_.\r\n\r\n* **performance comparison \\& datasets**: we have a 45-page, the most comprehensive `anomaly detection benchmark paper <https://www.andrew.cmu.edu/user/yuezhao2/papers/22-neurips-adbench.pdf>`_. the fully `open-sourced adbench <https://github.com/minqi824/adbench>`_ compares 30 anomaly detection algorithms on 57 benchmark datasets.\r\n\r\n* **learn more about anomaly detection** \\@ `anomaly detection resources <https://github.com/yzhao062/anomaly-detection-resources>`_\r\n\r\n* **pyod on distributed systems**: you could also run `pyod on databricks <https://www.databricks.com/blog/2023/03/13/unsupervised-outlier-detection-databricks.html>`_.\r\n\r\n----\r\n\r\nabout pyod\r\n^^^^^^^^^^\r\n\r\npyod, established in 2017, has become a go-to **python library** for **detecting anomalous/outlying objects** in\r\nmultivariate data. this exciting yet challenging field is commonly referred as \r\n`outlier detection <https://en.wikipedia.org/wiki/anomaly_detection>`_\r\nor `anomaly detection <https://en.wikipedia.org/wiki/anomaly_detection>`_.\r\n\r\npyod includes more than 50 detection algorithms, from classical lof (sigmod 2000) to\r\nthe cutting-edge ecod and dif (tkde 2022 and 2023). since 2017, pyod has been successfully used in numerous academic researches and\r\ncommercial products with more than `17 million downloads <https://pepy.tech/project/pyod>`_.\r\nit is also well acknowledged by the machine learning community with various dedicated posts/tutorials, including\r\n`analytics vidhya <https://www.analyticsvidhya.com/blog/2019/02/outlier-detection-python-pyod/>`_,\r\n`kdnuggets <https://www.kdnuggets.com/2019/02/outlier-detection-methods-cheat-sheet.html>`_, and\r\n`towards data science <https://towardsdatascience.com/anomaly-detection-for-dummies-15f148e559c1>`_.\r\n\r\n\r\n**pyod is featured for**:\r\n\r\n* **unified, user-friendly interface** across various algorithms.\r\n* **wide range of models**\\, from classic techniques to the latest deep learning methods.\r\n* **high performance & efficiency**, leveraging `numba <https://github.com/numba/numba>`_ and `joblib <https://github.com/joblib/joblib>`_ for jit compilation and parallel processing.\r\n* **fast training & prediction**, achieved through the suod framework [#zhao2021suod]_.\r\n\r\n\r\n**outlier detection with 5 lines of code**\\ :\r\n\r\n\r\n.. code-block:: python\r\n\r\n\r\n    # example: training an ecod detector\r\n    from pyod.models.ecod import ecod\r\n    clf = ecod()\r\n    clf.fit(x_train)\r\n    y_train_scores = clf.decision_scores_  # outlier scores for training data\r\n    y_test_scores = clf.decision_function(x_test)  # outlier scores for test data\r\n\r\n**selecting the right algorithm:**. unsure where to start? consider these robust and interpretable options:\r\n\r\n- `ecod <https://github.com/yzhao062/pyod/blob/master/examples/ecod_example.py>`_: example of using ecod for outlier detection\r\n- `isolation forest <https://github.com/yzhao062/pyod/blob/master/examples/iforest_example.py>`_: example of using isolation forest for outlier detection\r\n\r\nalternatively, explore `metaod <https://github.com/yzhao062/metaod>`_ for a data-driven approach.\r\n\r\n**citing pyod**\\ :\r\n\r\n`pyod paper <http://www.jmlr.org/papers/volume20/19-011/19-011.pdf>`_ is published in\r\n`journal of machine learning research (jmlr) <http://www.jmlr.org/>`_ (mloss track).\r\nif you use pyod in a scientific publication, we would appreciate\r\ncitations to the following paper::\r\n\r\n    @article{zhao2019pyod,\r\n        author  = {zhao, yue and nasrullah, zain and li, zheng},\r\n        title   = {pyod: a python toolbox for scalable outlier detection},\r\n        journal = {journal of machine learning research},\r\n        year    = {2019},\r\n        volume  = {20},\r\n        number  = {96},\r\n        pages   = {1-7},\r\n        url     = {http://jmlr.org/papers/v20/19-011.html}\r\n    }\r\n\r\nor::\r\n\r\n    zhao, y., nasrullah, z. and li, z., 2019. pyod: a python toolbox for scalable outlier detection. journal of machine learning research (jmlr), 20(96), pp.1-7.\r\n\r\nfor a broader perspective on anomaly detection, see our neurips papers\r\n`adbench: anomaly detection benchmark paper <https://viterbi-web.usc.edu/~yzhao010/papers/22-neurips-adbench.pdf>`_ \\& `adgym: design choices for deep anomaly detection <https://viterbi-web.usc.edu/~yzhao010/papers/23-neurips-adgym.pdf>`_::\r\n\r\n    @article{han2022adbench,\r\n        title={adbench: anomaly detection benchmark},\r\n        author={han, songqiao and hu, xiyang and huang, hailiang and jiang, minqi and zhao, yue},\r\n        journal={advances in neural information processing systems},\r\n        volume={35},\r\n        pages={32142--32159},\r\n        year={2022}\r\n    }\r\n\r\n    @article{jiang2023adgym,\r\n        title={adgym: design choices for deep anomaly detection},\r\n        author={jiang, minqi and hou, chaochuan and zheng, ao and han, songqiao and huang, hailiang and wen, qingsong and hu, xiyang and zhao, yue},\r\n        journal={advances in neural information processing systems},\r\n        volume={36},\r\n        year={2023}\r\n    }\r\n\r\n\r\n\r\n**table of contents**\\ :\r\n\r\n\r\n* `installation <#installation>`_\r\n* `api cheatsheet & reference <#api-cheatsheet--reference>`_\r\n* `adbench benchmark and datasets <#adbench-benchmark-and-datasets>`_\r\n* `model save & load <#model-save--load>`_\r\n* `fast train with suod <#fast-train-with-suod>`_\r\n* `thresholding outlier scores <#thresholding-outlier-scores>`_\r\n* `implemented algorithms <#implemented-algorithms>`_\r\n* `quick start for outlier detection <#quick-start-for-outlier-detection>`_\r\n* `how to contribute <#how-to-contribute>`_\r\n* `inclusion criteria <#inclusion-criteria>`_\r\n\r\n\r\n----\r\n\r\n\r\ninstallation\r\n^^^^^^^^^^^^\r\n\r\npyod is designed for easy installation using either **pip** or **conda**.\r\nwe recommend using the latest version of pyod due to frequent updates and enhancements:\r\n\r\n.. code-block:: bash\r\n\r\n   pip install pyod            # normal install\r\n   pip install --upgrade pyod  # or update if needed\r\n\r\n.. code-block:: bash\r\n\r\n   conda install -c conda-forge pyod\r\n\r\nalternatively, you could clone and run setup.py file:\r\n\r\n.. code-block:: bash\r\n\r\n   git clone https://github.com/yzhao062/pyod.git\r\n   cd pyod\r\n   pip install .\r\n\r\n\r\n**required dependencies**\\ :\r\n\r\n\r\n* python 3.6 or higher\r\n* joblib\r\n* matplotlib\r\n* numpy>=1.19\r\n* numba>=0.51\r\n* scipy>=1.5.1\r\n* scikit_learn>=0.22.0\r\n* six\r\n\r\n\r\n**optional dependencies (see details below)**\\ :\r\n\r\n* combo (optional, required for models/combination.py and featurebagging)\r\n* keras/tensorflow (optional, required for autoencoder, and other deep learning models)\r\n* suod (optional, required for running suod model)\r\n* xgboost (optional, required for xgbod)\r\n* pythresh (optional, required for thresholding)\r\n\r\n**warning**\\ :\r\npyod includes several neural network-based models, such as autoencoders, implemented in tensorflow and pytorch. these deep learning libraries are not automatically installed by pyod to avoid conflicts with existing installations. if you plan to use neural-net based models, please ensure these libraries are installed. see the `neural-net faq <https://github.com/yzhao062/pyod/wiki/setting-up-keras-and-tensorflow-for-neural-net-based-models>`_ for guidance. additionally, xgboost is not installed by default but is required for models like xgbod.\r\n\r\n\r\n----\r\n\r\n\r\napi cheatsheet & reference\r\n^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n\r\nthe full api reference is available at `pyod documentation <https://pyod.readthedocs.io/en/latest/pyod.html>`_. below is a quick cheatsheet for all detectors:\r\n\r\n* **fit(x)**\\ : fit the detector. the parameter y is ignored in unsupervised methods.\r\n* **decision_function(x)**\\ : predict raw anomaly scores for x using the fitted detector.\r\n* **predict(x)**\\ : determine whether a sample is an outlier or not as binary labels using the fitted detector.\r\n* **predict_proba(x)**\\ : estimate the probability of a sample being an outlier using the fitted detector.\r\n* **predict_confidence(x)**\\ : assess the model's confidence on a per-sample basis (applicable in predict and predict_proba) [#perini2020quantifying]_.\r\n\r\n\r\n**key attributes of a fitted model**:\r\n\r\n\r\n* **decision_scores_**\\ : outlier scores of the training data. higher scores typically indicate more abnormal behavior. outliers usually have higher scores.\r\n* **labels_**\\ : binary labels of the training data, where 0 indicates inliers and 1 indicates outliers/anomalies.\r\n\r\n\r\n----\r\n\r\n\r\nadbench benchmark and datasets\r\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n\r\nwe just released a 45-page, the most comprehensive `adbench: anomaly detection benchmark <https://arxiv.org/abs/2206.09426>`_ [#han2022adbench]_.\r\nthe fully `open-sourced adbench <https://github.com/minqi824/adbench>`_ compares 30 anomaly detection algorithms on 57 benchmark datasets.\r\n\r\nthe organization of **adbench** is provided below:\r\n\r\n.. image:: https://github.com/minqi824/adbench/blob/main/figs/adbench.png?raw=true\r\n   :target: https://github.com/minqi824/adbench/blob/main/figs/adbench.png?raw=true\r\n   :alt: benchmark-fig\r\n\r\n\r\nfor a simpler visualization, we make **the comparison of selected models** via\r\n`compare_all_models.py <https://github.com/yzhao062/pyod/blob/master/examples/compare_all_models.py>`_\\.\r\n\r\n.. image:: https://github.com/yzhao062/pyod/blob/development/examples/all.png?raw=true\r\n   :target: https://github.com/yzhao062/pyod/blob/development/examples/all.png?raw=true\r\n   :alt: comparison_of_all\r\n\r\n\r\n\r\n----\r\n\r\nmodel save & load\r\n^^^^^^^^^^^^^^^^^\r\n\r\npyod takes a similar approach of sklearn regarding model persistence.\r\nsee `model persistence <https://scikit-learn.org/stable/modules/model_persistence.html>`_ for clarification.\r\n\r\nin short, we recommend to use joblib or pickle for saving and loading pyod models.\r\nsee `\"examples/save_load_model_example.py\" <https://github.com/yzhao062/pyod/blob/master/examples/save_load_model_example.py>`_ for an example.\r\nin short, it is simple as below:\r\n\r\n.. code-block:: python\r\n\r\n    from joblib import dump, load\r\n\r\n    # save the model\r\n    dump(clf, 'clf.joblib')\r\n    # load the model\r\n    clf = load('clf.joblib')\r\n\r\nit is known that there are challenges in saving neural network models.\r\ncheck `#328 <https://github.com/yzhao062/pyod/issues/328#issuecomment-917192704>`_\r\nand `#88 <https://github.com/yzhao062/pyod/issues/88#issuecomment-615343139>`_\r\nfor temporary workaround.\r\n\r\n\r\n----\r\n\r\n\r\nfast train with suod\r\n^^^^^^^^^^^^^^^^^^^^\r\n\r\n**fast training and prediction**: it is possible to train and predict with\r\na large number of detection models in pyod by leveraging suod framework [#zhao2021suod]_.\r\nsee  `suod paper <https://www.andrew.cmu.edu/user/yuezhao2/papers/21-mlsys-suod.pdf>`_\r\nand  `suod example <https://github.com/yzhao062/pyod/blob/master/examples/suod_example.py>`_.\r\n\r\n\r\n.. code-block:: python\r\n\r\n    from pyod.models.suod import suod\r\n\r\n    # initialized a group of outlier detectors for acceleration\r\n    detector_list = [lof(n_neighbors=15), lof(n_neighbors=20),\r\n                     lof(n_neighbors=25), lof(n_neighbors=35),\r\n                     copod(), iforest(n_estimators=100),\r\n                     iforest(n_estimators=200)]\r\n\r\n    # decide the number of parallel process, and the combination method\r\n    # then clf can be used as any outlier detection model\r\n    clf = suod(base_estimators=detector_list, n_jobs=2, combination='average',\r\n               verbose=false)\r\n\r\n----\r\n\r\nthresholding outlier scores\r\n^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n\r\na more data based approach can be taken when setting the contamination level.\r\nby using a thresholding method, guessing an abritrary value can be replaced\r\nwith tested techniques for seperating inliers and outliers. refer to \r\n`pythresh <https://github.com/kulikdm/pythresh>`_ for\r\na more in depth look at thresholding.\r\n\r\n\r\n.. code-block:: python\r\n\r\n    from pyod.models.knn import knn\r\n    from pyod.models.thresholds import filter\r\n\r\n    # set the outlier detection and thresholding methods\r\n    clf = knn(contamination=filter())\r\n\r\n\r\n----\r\n\r\n\r\n\r\nimplemented algorithms\r\n^^^^^^^^^^^^^^^^^^^^^^\r\n\r\npyod toolkit consists of four major functional groups:\r\n\r\n**(i) individual detection algorithms** :\r\n\r\n===================  ==================  ======================================================================================================  =====  ========================================\r\ntype                 abbr                algorithm                                                                                               year   ref\r\n===================  ==================  ======================================================================================================  =====  ========================================\r\nprobabilistic        ecod                unsupervised outlier detection using empirical cumulative distribution functions                        2022   [#li2021ecod]_\r\nprobabilistic        abod                angle-based outlier detection                                                                           2008   [#kriegel2008angle]_\r\nprobabilistic        fastabod            fast angle-based outlier detection using approximation                                                  2008   [#kriegel2008angle]_\r\nprobabilistic        copod               copod: copula-based outlier detection                                                                   2020   [#li2020copod]_\r\nprobabilistic        mad                 median absolute deviation (mad)                                                                         1993   [#iglewicz1993how]_\r\nprobabilistic        sos                 stochastic outlier selection                                                                            2012   [#janssens2012stochastic]_\r\nprobabilistic        qmcd                quasi-monte carlo discrepancy outlier detection                                                         2001   [#fang2001wrap]_\r\nprobabilistic        kde                 outlier detection with kernel density functions                                                         2007   [#latecki2007outlier]_\r\nprobabilistic        sampling            rapid distance-based outlier detection via sampling                                                     2013   [#sugiyama2013rapid]_\r\nprobabilistic        gmm                 probabilistic mixture modeling for outlier analysis                                                            [#aggarwal2015outlier]_ [ch.2]\r\nlinear model         pca                 principal component analysis (the sum of weighted projected distances to the eigenvector hyperplanes)   2003   [#shyu2003a]_\r\nlinear model         kpca                kernel principal component analysis                                                                     2007   [#hoffmann2007kernel]_\r\nlinear model         mcd                 minimum covariance determinant (use the mahalanobis distances as the outlier scores)                    1999   [#hardin2004outlier]_ [#rousseeuw1999a]_\r\nlinear model         cd                  use cook's distance for outlier detection                                                               1977   [#cook1977detection]_\r\nlinear model         ocsvm               one-class support vector machines                                                                       2001   [#scholkopf2001estimating]_\r\nlinear model         lmdd                deviation-based outlier detection (lmdd)                                                                1996   [#arning1996a]_\r\nproximity-based      lof                 local outlier factor                                                                                    2000   [#breunig2000lof]_\r\nproximity-based      cof                 connectivity-based outlier factor                                                                       2002   [#tang2002enhancing]_\r\nproximity-based      (incremental) cof   memory efficient connectivity-based outlier factor (slower but reduce storage complexity)               2002   [#tang2002enhancing]_\r\nproximity-based      cblof               clustering-based local outlier factor                                                                   2003   [#he2003discovering]_\r\nproximity-based      loci                loci: fast outlier detection using the local correlation integral                                       2003   [#papadimitriou2003loci]_\r\nproximity-based      hbos                histogram-based outlier score                                                                           2012   [#goldstein2012histogram]_\r\nproximity-based      knn                 k nearest neighbors (use the distance to the kth nearest neighbor as the outlier score)                 2000   [#ramaswamy2000efficient]_\r\nproximity-based      avgknn              average knn (use the average distance to k nearest neighbors as the outlier score)                      2002   [#angiulli2002fast]_\r\nproximity-based      medknn              median knn (use the median distance to k nearest neighbors as the outlier score)                        2002   [#angiulli2002fast]_\r\nproximity-based      sod                 subspace outlier detection                                                                              2009   [#kriegel2009outlier]_\r\nproximity-based      rod                 rotation-based outlier detection                                                                        2020   [#almardeny2020a]_\r\noutlier ensembles    iforest             isolation forest                                                                                        2008   [#liu2008isolation]_\r\noutlier ensembles    inne                isolation-based anomaly detection using nearest-neighbor ensembles                                      2018   [#bandaragoda2018isolation]_\r\noutlier ensembles    dif                 deep isolation forest for anomaly detection                                                             2023   [#xu2023deep]_\r\noutlier ensembles    fb                  feature bagging                                                                                         2005   [#lazarevic2005feature]_\r\noutlier ensembles    lscp                lscp: locally selective combination of parallel outlier ensembles                                       2019   [#zhao2019lscp]_\r\noutlier ensembles    xgbod               extreme boosting based outlier detection **(supervised)**                                               2018   [#zhao2018xgbod]_\r\noutlier ensembles    loda                lightweight on-line detector of anomalies                                                               2016   [#pevny2016loda]_\r\noutlier ensembles    suod                suod: accelerating large-scale unsupervised heterogeneous outlier detection **(acceleration)**          2021   [#zhao2021suod]_\r\nneural networks      autoencoder         fully connected autoencoder (use reconstruction error as the outlier score)                                    [#aggarwal2015outlier]_ [ch.3]\r\nneural networks      vae                 variational autoencoder (use reconstruction error as the outlier score)                                 2013   [#kingma2013auto]_\r\nneural networks      beta-vae            variational autoencoder (all customized loss term by varying gamma and capacity)                        2018   [#burgess2018understanding]_\r\nneural networks      so_gaal             single-objective generative adversarial active learning                                                 2019   [#liu2019generative]_\r\nneural networks      mo_gaal             multiple-objective generative adversarial active learning                                               2019   [#liu2019generative]_\r\nneural networks      deepsvdd            deep one-class classification                                                                           2018   [#ruff2018deep]_\r\nneural networks      anogan              anomaly detection with generative adversarial networks                                                  2017   [#schlegl2017unsupervised]_\r\nneural networks      alad                adversarially learned anomaly detection                                                                 2018   [#zenati2018adversarially]_\r\ngraph-based          r-graph             outlier detection by r-graph                                                                            2017   [#you2017provable]_\r\ngraph-based          lunar               lunar: unifying local outlier detection methods via graph neural networks                               2022   [#goodge2022lunar]_\r\n===================  ==================  ======================================================================================================  =====  ========================================\r\n\r\n\r\n**(ii) outlier ensembles & outlier detector combination frameworks**:\r\n\r\n===================  ================  =====================================================================================================  =====  ========================================\r\ntype                 abbr              algorithm                                                                                              year   ref\r\n===================  ================  =====================================================================================================  =====  ========================================\r\noutlier ensembles    fb                feature bagging                                                                                        2005   [#lazarevic2005feature]_\r\noutlier ensembles    lscp              lscp: locally selective combination of parallel outlier ensembles                                      2019   [#zhao2019lscp]_\r\noutlier ensembles    xgbod             extreme boosting based outlier detection **(supervised)**                                              2018   [#zhao2018xgbod]_\r\noutlier ensembles    loda              lightweight on-line detector of anomalies                                                              2016   [#pevny2016loda]_\r\noutlier ensembles    suod              suod: accelerating large-scale unsupervised heterogeneous outlier detection **(acceleration)**         2021   [#zhao2021suod]_\r\noutlier ensembles    inne              isolation-based anomaly detection using nearest-neighbor ensembles                                     2018   [#bandaragoda2018isolation]_\r\ncombination          average           simple combination by averaging the scores                                                             2015   [#aggarwal2015theoretical]_\r\ncombination          weighted average  simple combination by averaging the scores with detector weights                                       2015   [#aggarwal2015theoretical]_\r\ncombination          maximization      simple combination by taking the maximum scores                                                        2015   [#aggarwal2015theoretical]_\r\ncombination          aom               average of maximum                                                                                     2015   [#aggarwal2015theoretical]_\r\ncombination          moa               maximization of average                                                                                2015   [#aggarwal2015theoretical]_\r\ncombination          median            simple combination by taking the median of the scores                                                  2015   [#aggarwal2015theoretical]_\r\ncombination          majority vote     simple combination by taking the majority vote of the labels (weights can be used)                     2015   [#aggarwal2015theoretical]_\r\n===================  ================  =====================================================================================================  =====  ========================================\r\n\r\n**(iii) outlier detection score thresholding methods**:\r\n\r\n==================================  ================  ================================================================ ====================================================================================================================\r\ntype                                abbr              algorithm                                                        documentation                                    \r\n==================================  ================  ================================================================ ====================================================================================================================\r\nkernel-based                        aucp              area under curve percentage                                      `aucp <https://pyod.readthedocs.io/en/latest/pyod.models.html#module-pyod.models.thresholds.aucp>`_\r\nstatistical moment-based            boot              bootstrapping                                                    `boot <https://pyod.readthedocs.io/en/latest/pyod.models.html#module-pyod.models.thresholds.boot>`_ \r\nnormality-based                     chau              chauvenet's criterion                                            `chau <https://pyod.readthedocs.io/en/latest/pyod.models.html#module-pyod.models.thresholds.chau>`_\r\nlinear model                        clf               trained linear classifier                                        `clf <https://pyod.readthedocs.io/en/latest/pyod.models.html#module-pyod.models.thresholds.clf>`_\r\ncluster-based                       clust             clustering based                                                 `clust <https://pyod.readthedocs.io/en/latest/pyod.models.html#module-pyod.models.thresholds.clust>`_\r\nkernel-based                        cpd               change point detection                                           `cpd <https://pyod.readthedocs.io/en/latest/pyod.models.html#module-pyod.models.thresholds.cpd>`_\r\ntransformation-based                decomp            decomposition                                                    `decomp <https://pyod.readthedocs.io/en/latest/pyod.models.html#module-pyod.models.thresholds.decomp>`_\r\nnormality-based                     dsn               distance shift from normal                                       `dsn <https://pyod.readthedocs.io/en/latest/pyod.models.html#module-pyod.models.thresholds.dsn>`_\r\ncurve-based                         eb                elliptical boundary                                              `eb <https://pyod.readthedocs.io/en/latest/pyod.models.html#module-pyod.models.thresholds.eb>`_\r\nkernel-based                        fgd               fixed gradient descent                                           `fgd <https://pyod.readthedocs.io/en/latest/pyod.models.html#module-pyod.models.thresholds.fgd>`_\r\nfilter-based                        filter            filtering based                                                  `filter <https://pyod.readthedocs.io/en/latest/pyod.models.html#module-pyod.models.thresholds.filter>`_\r\ncurve-based                         fwfm              full width at full minimum                                       `fwfm <https://pyod.readthedocs.io/en/latest/pyod.models.html#module-pyod.models.thresholds.fwfm>`_\r\nstatistical test-based              gesd              generalized extreme studentized deviate                          `gesd <https://pyod.readthedocs.io/en/latest/pyod.models.html#module-pyod.models.thresholds.gesd>`_\r\nfilter-based                        hist              histogram based                                                  `hist <https://pyod.readthedocs.io/en/latest/pyod.models.html#module-pyod.models.thresholds.hist>`_\r\nquantile-based                      iqr               inter-quartile region                                            `iqr <https://pyod.readthedocs.io/en/latest/pyod.models.html#module-pyod.models.thresholds.iqr>`_\r\nstatistical moment-based            karch             karcher mean (riemannian center of mass)                         `karch <https://pyod.readthedocs.io/en/latest/pyod.models.html#module-pyod.models.thresholds.karch>`_\r\nstatistical moment-based            mad               median absolute deviation                                        `mad <https://pyod.readthedocs.io/en/latest/pyod.models.html#module-pyod.models.thresholds.mad>`_\r\nstatistical test-based              mcst              monte carlo shapiro tests                                        `mcst <https://pyod.readthedocs.io/en/latest/pyod.models.html#module-pyod.models.thresholds.mcst>`_\r\nensembles-based                     meta              meta-model trained classifier                                    `meta <https://pyod.readthedocs.io/en/latest/pyod.models.html#module-pyod.models.thresholds.meta>`_\r\ntransformation-based                moll              friedrichs' mollifier                                            `moll <https://pyod.readthedocs.io/en/latest/pyod.models.html#module-pyod.models.thresholds.moll>`_\r\nstatistical test-based              mtt               modified thompson tau test                                       `mtt <https://pyod.readthedocs.io/en/latest/pyod.models.html#module-pyod.models.thresholds.mtt>`_\r\nlinear model                        ocsvm             one-class support vector machine                                 `ocsvm <https://pyod.readthedocs.io/en/latest/pyod.models.html#module-pyod.models.thresholds.ocsvm>`_\r\nquantile-based                      qmcd              quasi-monte carlo discrepancy                                    `qmcd <https://pyod.readthedocs.io/en/latest/pyod.models.html#module-pyod.models.thresholds.qmcd>`_\r\nlinear model                        regr              regression based                                                 `regr <https://pyod.readthedocs.io/en/latest/pyod.models.html#module-pyod.models.thresholds.regr>`_\r\nneural networks                     vae               variational autoencoder                                          `vae <https://pyod.readthedocs.io/en/latest/pyod.models.html#module-pyod.models.thresholds.vae>`_\r\ncurve-based                         wind              topological winding number                                       `wind <https://pyod.readthedocs.io/en/latest/pyod.models.html#module-pyod.models.thresholds.wind>`_\r\ntransformation-based                yj                yeo-johnson transformation                                       `yj <https://pyod.readthedocs.io/en/latest/pyod.models.html#module-pyod.models.thresholds.yj>`_\r\nnormality-based                     zscore            z-score                                                          `zscore <https://pyod.readthedocs.io/en/latest/pyod.models.html#module-pyod.models.thresholds.zscore>`_\r\n==================================  ================  ================================================================ ====================================================================================================================\r\n\r\n\r\n**(iv) utility functions**:\r\n\r\n===================  ======================  =====================================================================================================================================================  ======================================================================================================================================\r\ntype                 name                    function                                                                                                                                               documentation\r\n===================  ======================  =====================================================================================================================================================  ======================================================================================================================================\r\ndata                 generate_data           synthesized data generation; normal data is generated by a multivariate gaussian and outliers are generated by a uniform distribution                  `generate_data <https://pyod.readthedocs.io/en/latest/pyod.utils.html#module-pyod.utils.data.generate_data>`_\r\ndata                 generate_data_clusters  synthesized data generation in clusters; more complex data patterns can be created with multiple clusters                                              `generate_data_clusters <https://pyod.readthedocs.io/en/latest/pyod.utils.html#pyod.utils.data.generate_data_clusters>`_\r\nstat                 wpearsonr               calculate the weighted pearson correlation of two samples                                                                                              `wpearsonr <https://pyod.readthedocs.io/en/latest/pyod.utils.html#module-pyod.utils.stat_models.wpearsonr>`_\r\nutility              get_label_n             turn raw outlier scores into binary labels by assign 1 to top n outlier scores                                                                         `get_label_n <https://pyod.readthedocs.io/en/latest/pyod.utils.html#module-pyod.utils.utility.get_label_n>`_\r\nutility              precision_n_scores      calculate precision @ rank n                                                                                                                           `precision_n_scores <https://pyod.readthedocs.io/en/latest/pyod.utils.html#module-pyod.utils.utility.precision_n_scores>`_\r\n===================  ======================  =====================================================================================================================================================  ======================================================================================================================================\r\n\r\n----\r\n\r\nquick start for outlier detection\r\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n\r\npyod has been well acknowledged by the machine learning community with a few featured posts and tutorials.\r\n\r\n**analytics vidhya**: `an awesome tutorial to learn outlier detection in python using pyod library <https://www.analyticsvidhya.com/blog/2019/02/outlier-detection-python-pyod/>`_\r\n\r\n**kdnuggets**: `intuitive visualization of outlier detection methods <https://www.kdnuggets.com/2019/02/outlier-detection-methods-cheat-sheet.html>`_, `an overview of outlier detection methods from pyod <https://www.kdnuggets.com/2019/06/overview-outlier-detection-methods-pyod.html>`_\r\n\r\n**towards data science**: `anomaly detection for dummies <https://towardsdatascience.com/anomaly-detection-for-dummies-15f148e559c1>`_\r\n\r\n**computer vision news (march 2019)**: `python open source toolbox for outlier detection <https://rsipvision.com/computervisionnews-2019march/18/>`_\r\n\r\n`\"examples/knn_example.py\" <https://github.com/yzhao062/pyod/blob/master/examples/knn_example.py>`_\r\ndemonstrates the basic api of using knn detector. **it is noted that the api across all other algorithms are consistent/similar**.\r\n\r\nmore detailed instructions for running examples can be found in `examples directory <https://github.com/yzhao062/pyod/blob/master/examples>`_.\r\n\r\n\r\n#. initialize a knn detector, fit the model, and make the prediction.\r\n\r\n   .. code-block:: python\r\n\r\n\r\n       from pyod.models.knn import knn   # knn detector\r\n\r\n       # train knn detector\r\n       clf_name = 'knn'\r\n       clf = knn()\r\n       clf.fit(x_train)\r\n\r\n       # get the prediction label and outlier scores of the training data\r\n       y_train_pred = clf.labels_  # binary labels (0: inliers, 1: outliers)\r\n       y_train_scores = clf.decision_scores_  # raw outlier scores\r\n\r\n       # get the prediction on the test data\r\n       y_test_pred = clf.predict(x_test)  # outlier labels (0 or 1)\r\n       y_test_scores = clf.decision_function(x_test)  # outlier scores\r\n\r\n       # it is possible to get the prediction confidence as well\r\n       y_test_pred, y_test_pred_confidence = clf.predict(x_test, return_confidence=true)  # outlier labels (0 or 1) and confidence in the range of [0,1]\r\n\r\n#. evaluate the prediction by roc and precision @ rank n (p@n).\r\n\r\n   .. code-block:: python\r\n\r\n       from pyod.utils.data import evaluate_print\r\n       \r\n       # evaluate and print the results\r\n       print(\"\\non training data:\")\r\n       evaluate_print(clf_name, y_train, y_train_scores)\r\n       print(\"\\non test data:\")\r\n       evaluate_print(clf_name, y_test, y_test_scores)\r\n\r\n\r\n#. see a sample output & visualization.\r\n\r\n\r\n   .. code-block:: python\r\n\r\n\r\n       on training data:\r\n       knn roc:1.0, precision @ rank n:1.0\r\n\r\n       on test data:\r\n       knn roc:0.9989, precision @ rank n:0.9\r\n\r\n   .. code-block:: python\r\n\r\n\r\n       visualize(clf_name, x_train, y_train, x_test, y_test, y_train_pred,\r\n           y_test_pred, show_figure=true, save_figure=false)\r\n\r\nvisualization (\\ `knn_figure <https://raw.githubusercontent.com/yzhao062/pyod/master/examples/knn.png>`_\\ ):\r\n\r\n.. image:: https://raw.githubusercontent.com/yzhao062/pyod/master/examples/knn.png\r\n   :target: https://raw.githubusercontent.com/yzhao062/pyod/master/examples/knn.png\r\n   :alt: knn example figure\r\n\r\n----\r\n\r\nhow to contribute\r\n^^^^^^^^^^^^^^^^^\r\n\r\nyou are welcome to contribute to this exciting project:\r\n\r\n\r\n* please first check issue lists for \"help wanted\" tag and comment the one\r\n  you are interested. we will assign the issue to you.\r\n\r\n* fork the master branch and add your improvement/modification/fix.\r\n\r\n* create a pull request to **development branch** and follow the pull request template `pr template <https://github.com/yzhao062/pyod/blob/master/pull_request_template.md>`_\r\n\r\n* automatic tests will be triggered. make sure all tests are passed. please make sure all added modules are accompanied with proper test functions.\r\n\r\n\r\nto make sure the code has the same style and standard, please refer to abod.py, hbos.py, or feature_bagging.py for example.\r\n\r\nyou are also welcome to share your ideas by opening an issue or dropping me an email at zhaoy@cmu.edu :)\r\n\r\n\r\ninclusion criteria\r\n^^^^^^^^^^^^^^^^^^\r\n\r\nsimilarly to `scikit-learn <https://scikit-learn.org/stable/faq.html#what-are-the-inclusion-criteria-for-new-algorithms>`_,\r\nwe mainly consider well-established algorithms for inclusion.\r\na rule of thumb is at least two years since publication, 50+ citations, and usefulness.\r\n\r\nhowever, we encourage the author(s) of newly proposed models to share and add your implementation into pyod\r\nfor boosting ml accessibility and reproducibility.\r\nthis exception only applies if you could commit to the maintenance of your model for at least two year period.\r\n\r\n\r\n----\r\n\r\nreference\r\n^^^^^^^^^\r\n\r\n\r\n.. [#aggarwal2015outlier] aggarwal, c.c., 2015. outlier analysis. in data mining (pp. 237-263). springer, cham.\r\n\r\n.. [#aggarwal2015theoretical] aggarwal, c.c. and sathe, s., 2015. theoretical foundations and algorithms for outlier ensembles.\\ *acm sigkdd explorations newsletter*\\ , 17(1), pp.24-47.\r\n\r\n.. [#aggarwal2017outlier] aggarwal, c.c. and sathe, s., 2017. outlier ensembles: an introduction. springer.\r\n\r\n.. [#almardeny2020a] almardeny, y., boujnah, n. and cleary, f., 2020. a novel outlier detection method for multivariate data. *ieee transactions on knowledge and data engineering*.\r\n\r\n.. [#angiulli2002fast] angiulli, f. and pizzuti, c., 2002, august. fast outlier detection in high dimensional spaces. in *european conference on principles of data mining and knowledge discovery* pp. 15-27.\r\n\r\n.. [#arning1996a] arning, a., agrawal, r. and raghavan, p., 1996, august. a linear method for deviation detection in large databases. in *kdd* (vol. 1141, no. 50, pp. 972-981).\r\n\r\n.. [#bandaragoda2018isolation] bandaragoda, t. r., ting, k. m., albrecht, d., liu, f. t., zhu, y., and wells, j. r., 2018, isolation-based anomaly detection using nearest-neighbor ensembles. *computational intelligence*\\ , 34(4), pp. 968-998.\r\n\r\n.. [#breunig2000lof] breunig, m.m., kriegel, h.p., ng, r.t. and sander, j., 2000, may. lof: identifying density-based local outliers. *acm sigmod record*\\ , 29(2), pp. 93-104.\r\n\r\n.. [#burgess2018understanding] burgess, christopher p., et al. \"understanding disentangling in beta-vae.\" arxiv preprint arxiv:1804.03599 (2018).\r\n\r\n.. [#cook1977detection] cook, r.d., 1977. detection of influential observation in linear regression. technometrics, 19(1), pp.15-18.\r\n\r\n.. [#fang2001wrap] fang, k.t. and ma, c.x., 2001. wrap-around l2-discrepancy of random sampling, latin hypercube and uniform designs. journal of complexity, 17(4), pp.608-624.\r\n\r\n.. [#goldstein2012histogram] goldstein, m. and dengel, a., 2012. histogram-based outlier score (hbos): a fast unsupervised anomaly detection algorithm. in *ki-2012: poster and demo track*\\ , pp.59-63.\r\n\r\n.. [#goodge2022lunar] goodge, a., hooi, b., ng, s.k. and ng, w.s., 2022, june. lunar: unifying local outlier detection methods via graph neural networks. in proceedings of the aaai conference on artificial intelligence.\r\n\r\n.. [#gopalan2019pidforest] gopalan, p., sharan, v. and wieder, u., 2019. pidforest: anomaly detection via partial identification. in advances in neural information processing systems, pp. 15783-15793.\r\n\r\n.. [#han2022adbench] han, s., hu, x., huang, h., jiang, m. and zhao, y., 2022. adbench: anomaly detection benchmark. arxiv preprint arxiv:2206.09426.\r\n\r\n.. [#hardin2004outlier] hardin, j. and rocke, d.m., 2004. outlier detection in the multiple cluster setting using the minimum covariance determinant estimator. *computational statistics & data analysis*\\ , 44(4), pp.625-638.\r\n\r\n.. [#he2003discovering] he, z., xu, x. and deng, s., 2003. discovering cluster-based local outliers. *pattern recognition letters*\\ , 24(9-10), pp.1641-1650.\r\n\r\n.. [#hoffmann2007kernel] hoffmann, h., 2007. kernel pca for novelty detection. pattern recognition, 40(3), pp.863-874.\r\n\r\n.. [#iglewicz1993how] iglewicz, b. and hoaglin, d.c., 1993. how to detect and handle outliers (vol. 16). asq press.\r\n\r\n.. [#janssens2012stochastic] janssens, j.h.m., husz\u00e1r, f., postma, e.o. and van den herik, h.j., 2012. stochastic outlier selection. technical report ticc tr 2012-001, tilburg university, tilburg center for cognition and communication, tilburg, the netherlands.\r\n\r\n.. [#kingma2013auto] kingma, d.p. and welling, m., 2013. auto-encoding variational bayes. arxiv preprint arxiv:1312.6114.\r\n\r\n.. [#kriegel2008angle] kriegel, h.p. and zimek, a., 2008, august. angle-based outlier detection in high-dimensional data. in *kdd '08*\\ , pp. 444-452. acm.\r\n\r\n.. [#kriegel2009outlier] kriegel, h.p., kr\u00f6ger, p., schubert, e. and zimek, a., 2009, april. outlier detection in axis-parallel subspaces of high dimensional data. in *pacific-asia conference on knowledge discovery and data mining*\\ , pp. 831-838. springer, berlin, heidelberg.\r\n\r\n.. [#latecki2007outlier] latecki, l.j., lazarevic, a. and pokrajac, d., 2007, july. outlier detection with kernel density functions. in international workshop on machine learning and data mining in pattern recognition (pp. 61-75). springer, berlin, heidelberg.\r\n\r\n.. [#lazarevic2005feature] lazarevic, a. and kumar, v., 2005, august. feature bagging for outlier detection. in *kdd '05*. 2005.\r\n\r\n.. [#li2019madgan] li, d., chen, d., jin, b., shi, l., goh, j. and ng, s.k., 2019, september. mad-gan: multivariate anomaly detection for time series data with generative adversarial networks. in *international conference on artificial neural networks* (pp. 703-716). springer, cham.\r\n\r\n.. [#li2020copod] li, z., zhao, y., botta, n., ionescu, c. and hu, x. copod: copula-based outlier detection. *ieee international conference on data mining (icdm)*, 2020.\r\n\r\n.. [#li2021ecod] li, z., zhao, y., hu, x., botta, n., ionescu, c. and chen, h. g. ecod: unsupervised outlier detection using empirical cumulative distribution functions. *ieee transactions on knowledge and data engineering (tkde)*, 2022.\r\n\r\n.. [#liu2008isolation] liu, f.t., ting, k.m. and zhou, z.h., 2008, december. isolation forest. in *international conference on data mining*\\ , pp. 413-422. ieee.\r\n\r\n.. [#liu2019generative] liu, y., li, z., zhou, c., jiang, y., sun, j., wang, m. and he, x., 2019. generative adversarial active learning for unsupervised outlier detection. *ieee transactions on knowledge and data engineering*.\r\n\r\n.. [#papadimitriou2003loci] papadimitriou, s., kitagawa, h., gibbons, p.b. and faloutsos, c., 2003, march. loci: fast outlier detection using the local correlation integral. in *icde '03*, pp. 315-326. ieee.\r\n\r\n.. [#pevny2016loda] pevn\u00fd, t., 2016. loda: lightweight on-line detector of anomalies. *machine learning*, 102(2), pp.275-304.\r\n\r\n.. [#perini2020quantifying] perini, l., vercruyssen, v., davis, j. quantifying the confidence of anomaly detectors in their example-wise predictions. in *joint european conference on machine learning and knowledge discovery in databases (ecml-pkdd)*, 2020.\r\n\r\n.. [#ramaswamy2000efficient] ramaswamy, s., rastogi, r. and shim, k., 2000, may. efficient algorithms for mining outliers from large data sets. *acm sigmod record*\\ , 29(2), pp. 427-438.\r\n\r\n.. [#rousseeuw1999a] rousseeuw, p.j. and driessen, k.v., 1999. a fast algorithm for the minimum covariance determinant estimator. *technometrics*\\ , 41(3), pp.212-223.\r\n\r\n.. [#ruff2018deep] ruff, l., vandermeulen, r., goernitz, n., deecke, l., siddiqui, s.a., binder, a., m\u00fcller, e. and kloft, m., 2018, july. deep one-class classification. in *international conference on machine learning* (pp. 4393-4402). pmlr.\r\n\r\n.. [#schlegl2017unsupervised] schlegl, t., seeb\u00f6ck, p., waldstein, s.m., schmidt-erfurth, u. and langs, g., 2017, june. unsupervised anomaly detection with generative adversarial networks to guide marker discovery. in international conference on information processing in medical imaging (pp. 146-157). springer, cham.\r\n\r\n.. [#scholkopf2001estimating] scholkopf, b., platt, j.c., shawe-taylor, j., smola, a.j. and williamson, r.c., 2001. estimating the support of a high-dimensional distribution. *neural computation*, 13(7), pp.1443-1471.\r\n\r\n.. [#shyu2003a] shyu, m.l., chen, s.c., sarinnapakorn, k. and chang, l., 2003. a novel anomaly detection scheme based on principal component classifier. *miami univ coral gables fl dept of electrical and computer engineering*.\r\n\r\n.. [#sugiyama2013rapid] sugiyama, m. and borgwardt, k., 2013. rapid distance-based outlier detection via sampling. advances in neural information processing systems, 26.\r\n\r\n.. [#tang2002enhancing] tang, j., chen, z., fu, a.w.c. and cheung, d.w., 2002, may. enhancing effectiveness of outlier detections for low density patterns. in *pacific-asia conference on knowledge discovery and data mining*, pp. 535-548. springer, berlin, heidelberg.\r\n\r\n.. [#wang2020advae] wang, x., du, y., lin, s., cui, p., shen, y. and yang, y., 2019. advae: a self-adversarial variational autoencoder with gaussian anomaly prior knowledge for anomaly detection. *knowledge-based systems*.\r\n\r\n.. [#xu2023deep] xu, h., pang, g., wang, y., wang, y., 2023. deep isolation forest for anomaly detection. *ieee transactions on knowledge and data engineering*.\r\n\r\n.. [#you2017provable] you, c., robinson, d.p. and vidal, r., 2017. provable self-representation based outlier detection in a union of subspaces. in proceedings of the ieee conference on computer vision and pattern recognition.\r\n\r\n.. [#zenati2018adversarially] zenati, h., romain, m., foo, c.s., lecouat, b. and chandrasekhar, v., 2018, november. adversarially learned anomaly detection. in 2018 ieee international conference on data mining (icdm) (pp. 727-736). ieee.\r\n\r\n.. [#zhao2018xgbod] zhao, y. and hryniewicki, m.k. xgbod: improving supervised outlier detection with unsupervised representation learning. *ieee international joint conference on neural networks*\\ , 2018.\r\n\r\n.. [#zhao2019lscp] zhao, y., nasrullah, z., hryniewicki, m.k. and li, z., 2019, may. lscp: locally selective combination in parallel outlier ensembles. in *proceedings of the 2019 siam international conference on data mining (sdm)*, pp. 585-593. society for industrial and applied mathematics.\r\n\r\n.. [#zhao2021suod] zhao, y., hu, x., cheng, c., wang, c., wan, c., wang, w., yang, j., bai, h., li, z., xiao, c., wang, y., qiao, z., sun, j. and akoglu, l. (2021). suod: accelerating large-scale unsupervised heterogeneous outlier detection. *conference on machine learning and systems (mlsys)*.\r\n\r\n\r\n",
  "docs_url": null,
  "keywords": "outlier detection,anomaly detection,outlier ensembles,data mining,neural networks",
  "license": "",
  "name": "pyod",
  "package_url": "https://pypi.org/project/pyod/",
  "project_url": "https://pypi.org/project/pyod/",
  "project_urls": {
    "Download": "https://github.com/yzhao062/pyod/archive/master.zip",
    "Homepage": "https://github.com/yzhao062/pyod"
  },
  "release_url": "https://pypi.org/project/pyod/1.1.2/",
  "requires_dist": [],
  "requires_python": "",
  "summary": "a comprehensive and scalable python library for outlier detection (anomaly detection)",
  "version": "1.1.2",
  "releases": [],
  "developers": [
    "yue_zhao",
    "yzhao062@gmail.com"
  ],
  "kwds": "anomaly_detection outliers inliers detections outlier",
  "license_kwds": "",
  "libtype": "pypi",
  "id": "pypi_pyod",
  "homepage": "https://github.com/yzhao062/pyod",
  "release_count": 90,
  "dependency_ids": [],
  "documentation_summary": "PyOD version 1.1.3, released on February 9, 2024, is a comprehensive and scalable Python library for outlier detection (anomaly detection). It supports a wide range of detection algorithms, from classical methods to the latest deep learning approaches. PyOD is designed for both academic research and commercial applications, with over 17 million downloads and recognition in the machine learning community. The library features a unified interface, high performance, and efficiency, with support for JIT compilation and parallel processing. It includes more than 50 detection algorithms and offers easy installation via pip or conda. PyOD is well-documented, with extensive API references, quick start guides, and examples for users. The library is licensed under the BSD License and maintained by Yue Zhao and other contributors.",
  "embedding": [
    -0.016598578542470932,
    0.003952545113861561,
    0.004600157495588064,
    -0.00794028677046299,
    -0.004631834104657173,
    0.03508367761969566,
    0.0034932333510369062,
    -0.005451907869428396,
    -0.01807682402431965,
    -0.002020268002524972,
    0.013571696355938911,
    0.011530309915542603,
    -0.02152606099843979,
    0.03147957846522331,
    -0.0377022847533226,
    0.006247344426810741,
    0.016063595190644264,
    -0.015782024711370468,
    0.0035689054057002068,
    0.02355336770415306,
    -0.015190726146101952,
    0.012762180529534817,
    -0.03181746229529381,
    0.0030638384632766247,
    0.008066993206739426,
    0.015753867104649544,
    0.01749960333108902,
    -0.03378845378756523,
    0.01182595919817686,
    -0.0009168637916445732,
    0.02710115537047386,
    -0.02251155860722065,
    0.0002960889250971377,
    -0.00488172797486186,
    -0.03829358145594597,
    -0.01086158026009798,
    0.009883122518658638,
    -0.010509617626667023,
    0.03880040720105171,
    -0.014402328990399837,
    0.02365191839635372,
    -0.009439649060368538,
    -0.007271557115018368,
    0.0013145820703357458,
    0.0022455244325101376,
    -0.004899325780570507,
    0.011727409437298775,
    -0.02255379408597946,
    -0.01597912423312664,
    0.017091326415538788,
    0.013881423510611057,
    0.01088973693549633,
    0.0065676309168338776,
    -0.017513683065772057,
    0.008587898686528206,
    -0.003737847786396742,
    0.0068632797338068485,
    0.02852308750152588,
    -0.024637414142489433,
    -0.02183578908443451,
    -0.002220886992290616,
    -0.010917894542217255,
    -0.0524565763771534,
    0.009643788449466228,
    0.007517931051552296,
    0.002794586820527911,
    0.012572120875120163,
    0.028706107288599014,
    0.008996175602078438,
    -0.007074457593262196,
    0.04983796924352646,
    0.027087077498435974,
    -0.021343041211366653,
    0.0071870856918394566,
    0.026706958189606667,
    -0.0326058603823185,
    -0.021328961476683617,
    0.022483401000499725,
    -0.012677709572017193,
    -0.019724009558558464,
    0.0065183560363948345,
    -0.03390108421444893,
    -0.012888887897133827,
    0.015106255188584328,
    0.015852415934205055,
    0.021089626476168633,
    -0.022131437435746193,
    0.02235669456422329,
    -0.01086158026009798,
    -0.004508647136390209,
    0.01418411172926426,
    0.008193700574338436,
    0.014057405292987823,
    0.013677285052835941,
    -0.025622911751270294,
    0.03578760474920273,
    -0.011847076937556267,
    0.02993093989789486,
    -0.007271557115018368,
    -0.013050790876150131,
    -0.007560166530311108,
    0.02162461169064045,
    0.0010629284661263227,
    -0.0069759078323841095,
    -0.024482551962137222,
    -0.01462758518755436,
    0.0007114053587429225,
    -0.0035935428459197283,
    0.016514107584953308,
    0.021638689562678337,
    0.01008022204041481,
    0.0505700521171093,
    -0.008651251904666424,
    -0.03657600283622742,
    0.004994356073439121,
    -0.0031958245672285557,
    -0.001312822219915688,
    -0.018090901896357536,
    -0.025622911751270294,
    -6.637803744524717e-05,
    0.010474421083927155,
    0.02193433791399002,
    -0.011340250261127949,
    -0.01174852717667818,
    0.015430061146616936,
    -0.0025376537814736366,
    0.015232961624860764,
    -0.0242291372269392,
    0.017992351204156876,
    -0.011804841458797455,
    0.0035706653725355864,
    -0.005733478348702192,
    0.012501727789640427,
    -0.006704896222800016,
    -0.0326058603823185,
    -0.012508767656981945,
    -0.026875900104641914,
    -0.01597912423312664,
    -0.010537774302065372,
    -0.012135686352849007,
    0.008496388792991638,
    0.015401903539896011,
    -0.022173672914505005,
    -0.014212268404662609,
    -0.008834272623062134,
    0.0486835315823555,
    0.003445718437433243,
    -0.006557072047144175,
    0.0019375566625967622,
    0.0006242945091798902,
    0.02063911408185959,
    0.010404027998447418,
    -0.029902782291173935,
    0.01927349716424942,
    -0.006029127165675163,
    -0.007693912833929062,
    0.02648170106112957,
    -0.00398422172293067,
    -0.022229988127946854,
    -0.0030831964686512947,
    -0.01780933141708374,
    0.011107954196631908,
    -0.032774802297353745,
    -0.011635898612439632,
    -0.019935188814997673,
    0.016514107584953308,
    0.004378420766443014,
    -0.0024989377707242966,
    -0.011283935979008675,
    0.003514351323246956,
    -0.010763030499219894,
    0.009327021427452564,
    -0.017978273332118988,
    -0.006391649134457111,
    0.03530893474817276,
    0.010305478237569332,
    0.017091326415538788,
    0.011241700500249863,
    -0.014866920188069344,
    -0.0013189816381782293,
    0.006989986635744572,
    0.01109387632459402,
    0.023581525310873985,
    0.01371248159557581,
    0.0027382727712392807,
    0.005578614771366119,
    0.002312397351488471,
    -0.008207778446376324,
    0.007616480812430382,
    -0.0003414041711948812,
    0.016274772584438324,
    0.03108537755906582,
    -0.004716305062174797,
    0.0023968685418367386,
    -0.6009839773178101,
    -0.025313183665275574,
    -0.03739255666732788,
    -0.01963953860104084,
    -0.010171732865273952,
    0.021174097433686256,
    0.0069442312233150005,
    0.02277904935181141,
    -0.016218457370996475,
    0.030691180378198624,
    -0.005223131738603115,
    0.00929886382073164,
    -0.01828800141811371,
    -0.017485525459051132,
    -0.010087261907756329,
    -0.019357968121767044,
    -0.0030004852451384068,
    -0.016162144020199776,
    -0.0029705683700740337,
    0.005694762337952852,
    -0.034492380917072296,
    0.032408758997917175,
    -0.02605934627354145,
    0.017175797373056412,
    -0.007820619270205498,
    0.008524545468389988,
    -0.007898051291704178,
    -0.01775301806628704,
    0.0398140624165535,
    0.02025899477303028,
    0.00284562143497169,
    0.005937616806477308,
    0.002937131794169545,
    -0.012290550395846367,
    0.04155980050563812,
    -0.006374051328748465,
    0.012121608480811119,
    0.06340966373682022,
    0.022891677916049957,
    0.044009461998939514,
    0.001817889278754592,
    0.01734473928809166,
    0.007806540932506323,
    0.002171612111851573,
    -0.007686873432248831,
    0.007292674854397774,
    0.00535335810855031,
    -0.00017092206689994782,
    0.006155834067612886,
    -0.015134411863982677,
    -0.005022513214498758,
    -0.007250439375638962,
    -0.010643362998962402,
    -0.022441165521740913,
    0.0485709048807621,
    -0.005040111020207405,
    0.029283327981829643,
    -0.02225814387202263,
    0.004163722973316908,
    -0.020244915038347244,
    -0.010291400365531445,
    0.027340490370988846,
    0.015894651412963867,
    -0.015993202105164528,
    -0.021638689562678337,
    0.013233811594545841,
    -0.012431335635483265,
    0.0008367921691387892,
    0.001849565887823701,
    -0.02815704606473446,
    0.028171123936772346,
    0.017260268330574036,
    0.007144850213080645,
    -0.014951391145586967,
    0.021920260041952133,
    0.04012379050254822,
    0.040715087205171585,
    0.007148370146751404,
    -0.0006022967863827944,
    0.028438616544008255,
    0.029649369418621063,
    0.012382060289382935,
    -0.02945226989686489,
    -0.003445718437433243,
    0.035646818578243256,
    0.017358819022774696,
    -0.009552277624607086,
    0.01682383380830288,
    0.016373321413993835,
    -0.02710115537047386,
    0.015838338062167168,
    0.008376721292734146,
    0.02857940085232258,
    -0.042545296251773834,
    0.0064866794273257256,
    0.0009511801763437688,
    -0.03243691474199295,
    0.005905940197408199,
    -0.009094725362956524,
    -0.010213968344032764,
    -0.043896835297346115,
    -0.02214551717042923,
    -0.01130505371838808,
    -0.027974024415016174,
    0.019104555249214172,
    0.005846106447279453,
    0.006866799667477608,
    -0.0009432610240764916,
    0.030803807079792023,
    -0.0026784390211105347,
    -0.005015473812818527,
    -0.03212719038128853,
    0.002284240210428834,
    -0.012023058719933033,
    0.025622911751270294,
    -0.033929239958524704,
    0.023595603182911873,
    0.001170277246274054,
    -0.004051094874739647,
    -0.005701801739633083,
    -0.0006982067134231329,
    -0.01703501306474209,
    -0.008545663207769394,
    -0.010910854674875736,
    0.010995326563715935,
    0.011009404435753822,
    0.011086836457252502,
    -0.03485842049121857,
    -0.012607317417860031,
    -0.02287760004401207,
    -0.00981976930052042,
    -0.00830632820725441,
    -0.002764669945463538,
    -0.009327021427452564,
    0.04068693146109581,
    0.010045026428997517,
    0.02000558003783226,
    0.0033084528986364603,
    0.002444383455440402,
    -0.002544692950323224,
    -0.005180896259844303,
    0.015232961624860764,
    0.023440741002559662,
    -0.016471872106194496,
    0.000616375298704952,
    -0.017724860459566116,
    -0.0070463004522025585,
    0.013304203748703003,
    0.005786272697150707,
    0.015007705427706242,
    -0.025665147230029106,
    -0.014979547820985317,
    -0.032099030911922455,
    0.021793553605675697,
    -0.02314509078860283,
    -0.009108804166316986,
    -0.011495113372802734,
    -0.014557192102074623,
    -0.011157229542732239,
    0.0067506516352295876,
    0.0011051640613004565,
    0.007813580334186554,
    0.0030304021202027798,
    -0.0028086653910577297,
    -0.019991502165794373,
    -0.03787122666835785,
    -0.025918560102581978,
    0.030015410855412483,
    -0.019555067643523216,
    -0.02746719866991043,
    0.0057581160217523575,
    -0.014458643272519112,
    0.013585774227976799,
    -0.006064323708415031,
    0.010544813238084316,
    0.02998725324869156,
    -0.004132046364247799,
    -0.005159778520464897,
    -0.00436082249507308,
    -0.007961404509842396,
    0.003678014036267996,
    -0.00028531005955301225,
    -0.032831113785505295,
    -0.031676676124334335,
    0.025270948186516762,
    0.02230037935078144,
    0.0024883789010345936,
    0.020033737644553185,
    0.008503427729010582,
    0.01994926668703556,
    -0.02214551717042923,
    0.025299105793237686,
    0.0029899263754487038,
    0.023947566747665405,
    -0.0032574182841926813,
    -0.014402328990399837,
    0.0179641954600811,
    0.007377145811915398,
    0.01640147902071476,
    0.08114860206842422,
    0.008271131664514542,
    0.0011852356838062406,
    -0.005114023573696613,
    0.01329716481268406,
    -0.01514849066734314,
    0.0006748891901224852,
    0.023159170523285866,
    -0.025425812229514122,
    0.00029234931571409106,
    0.002150494372472167,
    0.019611382856965065,
    0.013494264334440231,
    -0.02846677228808403,
    -0.008580859750509262,
    -0.010770069435238838,
    0.051893435418605804,
    -0.012762180529534817,
    0.019667696207761765,
    -0.01096716895699501,
    0.0004150964377913624,
    -0.01070671621710062,
    0.007553127594292164,
    0.04488233104348183,
    -0.012184961698949337,
    -0.005747556686401367,
    -0.02632683701813221,
    0.03713914379477501,
    0.02836822345852852,
    0.021554218605160713,
    -0.010094300843775272,
    0.010608166456222534,
    0.03190193325281143,
    0.008820194751024246,
    0.005230171140283346,
    0.011635898612439632,
    -0.012121608480811119,
    0.014979547820985317,
    -0.01582426019012928,
    0.02746719866991043,
    -0.02339850552380085,
    -0.024693729355931282,
    0.009587474167346954,
    0.031310632824897766,
    -0.010213968344032764,
    -0.02031530812382698,
    -0.0023176767863333225,
    0.031564049422740936,
    0.012163843959569931,
    -0.027326412498950958,
    0.004325625952333212,
    -0.012860730290412903,
    -0.005550457630306482,
    -0.012586199678480625,
    0.019231261685490608,
    -0.007004064973443747,
    -0.02276497147977352,
    0.0028896168805658817,
    0.009650827385485172,
    0.024468472227454185,
    0.024454394355416298,
    0.01444456446915865,
    -0.013958855532109737,
    0.028945442289114,
    0.023173248395323753,
    0.04161611199378967,
    -0.01266363076865673,
    0.019076397642493248,
    -0.03153588995337486,
    0.017612231895327568,
    -0.01896377094089985,
    -0.012339824810624123,
    -0.023314034566283226,
    -0.01844286546111107,
    -0.017626309767365456,
    0.01572570949792862,
    0.014923234470188618,
    -0.0025904481299221516,
    0.037420712411403656,
    0.020230837166309357,
    0.01671120710670948,
    -0.0380401685833931,
    -0.012649552896618843,
    0.026509858667850494,
    0.01496546994894743,
    -0.009228471666574478,
    -0.01990703120827675,
    -0.02810073085129261,
    -0.008482309989631176,
    -0.01478244923055172,
    0.019597303122282028,
    0.008609016425907612,
    0.012234236113727093,
    0.0019375566625967622,
    0.01478244923055172,
    -0.0028333025984466076,
    0.007405302952975035,
    0.032718487083911896,
    -0.01020692940801382,
    0.003899750765413046,
    0.022061044350266457,
    0.02642538771033287,
    0.0018742033280432224,
    -0.004093330353498459,
    -0.018358394503593445,
    0.05135845020413399,
    0.0005591813242062926,
    0.022581949830055237,
    -0.018428785726428032,
    -0.013592814095318317,
    -0.026087502017617226,
    0.009721219539642334,
    -0.0015899931313470006,
    -0.006148794665932655,
    -0.024003881961107254,
    -0.01833023689687252,
    -0.005029552150517702,
    -0.005638448521494865,
    0.0036428177263587713,
    0.03055039420723915,
    0.006585229188203812,
    -0.006261422764509916,
    -0.009235510602593422,
    -0.020920684561133385,
    0.01900600641965866,
    0.03330978378653526,
    0.015373746864497662,
    0.014486799947917461,
    0.019160868600010872,
    -0.03254954516887665,
    0.0016612657345831394,
    -0.02648170106112957,
    -0.0005068267928436399,
    0.0018266882980242372,
    0.024510707706212997,
    -0.004346743691712618,
    0.02137119695544243,
    0.023116935044527054,
    0.023736389353871346,
    -0.008193700574338436,
    -0.005997450556606054,
    0.007440499495714903,
    -0.00775726605206728,
    -0.007109654136002064,
    0.014310818165540695,
    -0.011396564543247223,
    -0.0025851686950773,
    0.011255779303610325,
    -0.0062156678177416325,
    0.020596878603100777,
    -0.009721219539642334,
    0.027692453935742378,
    0.01807682402431965,
    -0.001222191727720201,
    0.002111778361722827,
    -0.05313234403729439,
    0.010037986561655998,
    -0.009615630842745304,
    0.020540565252304077,
    -0.017330661416053772,
    0.04575520008802414,
    0.033760298043489456,
    0.004107409156858921,
    -0.008552702143788338,
    0.016049515455961227,
    0.03978590667247772,
    -0.0062156678177416325,
    -0.01833023689687252,
    0.0085667809471488,
    -0.01942836120724678,
    -0.004526244942098856,
    0.007377145811915398,
    0.018527336418628693,
    -0.0010866859229281545,
    -0.019132712855935097,
    0.0027118753641843796,
    0.0061452751979231834,
    -0.037899382412433624,
    -0.004082771483808756,
    0.016936462372541428,
    0.00924255046993494,
    0.005765154957771301,
    -0.026312759146094322,
    -0.006067843176424503,
    -0.013015594333410263,
    -0.01671120710670948,
    -0.02549620531499386,
    -0.0018196490127593279,
    -0.016359243541955948,
    0.008524545468389988,
    0.008728683926165104,
    -0.0013779354048892856,
    5.873383634025231e-05,
    -0.01994926668703556,
    0.00016454274009447545,
    -0.004705746192485094,
    -0.04203847050666809,
    -0.01177668385207653,
    0.008235936053097248,
    0.027030764147639275,
    0.00413908576592803,
    0.01994926668703556,
    -0.016514107584953308,
    0.0061734323389828205,
    -0.01018581073731184,
    -0.0023898291401565075,
    -0.008707566186785698,
    -0.003836397547274828,
    -0.025608832016587257,
    0.010368832387030125,
    0.016795678064227104,
    -0.00672601442784071,
    0.0019639539532363415,
    0.011431760154664516,
    0.030944593250751495,
    0.021610531955957413,
    -0.0017439769580960274,
    -0.014416406862437725,
    -0.0047268639318645,
    0.010101339779794216,
    0.0062227072194218636,
    0.005877783056348562,
    0.013247889466583729,
    0.0002534133964218199,
    -0.01863996498286724,
    0.017640389502048492,
    -0.011375446803867817,
    0.003526669926941395,
    -0.015415982343256474,
    -0.0032503788825124502,
    0.011065718717873096,
    -0.011720370501279831,
    0.01057297084480524,
    -0.00796844344586134,
    0.007327870931476355,
    0.027241941541433334,
    -0.019625460729002953,
    0.008285210467875004,
    0.02037162147462368,
    0.027016684412956238,
    0.017513683065772057,
    -0.0034615567419677973,
    0.021976573392748833,
    -0.004575519822537899,
    -0.008250013925135136,
    0.0005446628201752901,
    -0.007919169031083584,
    -0.004885247442871332,
    0.001524000079371035,
    0.012607317417860031,
    0.019597303122282028,
    -0.03984221816062927,
    -0.014514956623315811,
    -0.026833664625883102,
    -0.006219187285751104,
    0.040349047631025314,
    0.019667696207761765,
    -0.0006722494727000594,
    -0.02110370621085167,
    -0.007616480812430382,
    0.008686448447406292,
    -0.011769644916057587,
    -0.01902008429169655,
    -0.03590023145079613,
    -0.018625885248184204,
    -0.004128526896238327,
    -0.021652767434716225,
    -0.014923234470188618,
    -0.00022206669382285327,
    0.013564656488597393,
    -0.01827392168343067,
    -0.0280021820217371,
    -0.00016157304344233125,
    9.761475666891783e-05,
    0.015852415934205055,
    0.012452453374862671,
    0.005955215077847242,
    -0.013979973271489143,
    -0.015782024711370468,
    -0.007363067474216223,
    0.002029067138209939,
    -0.0017809331184253097,
    0.013747677206993103,
    0.01400109101086855,
    0.04375604912638664,
    0.025369498878717422,
    -0.004885247442871332,
    0.027044842019677162,
    0.012023058719933033,
    -0.004445293452590704,
    -0.006747132167220116,
    -0.013135261833667755,
    -0.017738938331604004,
    0.004491048865020275,
    -0.021709082648158073,
    0.018724435940384865,
    -0.008580859750509262,
    0.017569996416568756,
    -0.020442014560103416,
    0.012255353853106499,
    0.005719400011003017,
    0.0024267854169011116,
    0.007433460094034672,
    -0.004550882615149021,
    -0.014824684709310532,
    0.0002613325777929276,
    -0.011269857175648212,
    0.019146790727972984,
    0.02862163633108139,
    -0.02956489846110344,
    -0.014768370427191257,
    0.02162461169064045,
    -0.002410947112366557,
    0.015049940906465054,
    -0.012917044572532177,
    0.008679409511387348,
    0.006806965917348862,
    0.004258753266185522,
    0.036069177091121674,
    0.0014720854815095663,
    -0.016795678064227104,
    0.001990351127460599,
    -0.0341544970870018,
    -0.002646762179210782,
    0.008545663207769394,
    0.012494688853621483,
    0.033197157084941864,
    0.008777959272265434,
    0.014113718643784523,
    -0.015697553753852844,
    0.037786755710840225,
    0.024735964834690094,
    -0.004959159530699253,
    0.005258328281342983,
    -0.030831964686512947,
    -0.004445293452590704,
    -0.008531584404408932,
    -0.03170483186841011,
    -0.021427512168884277,
    0.00454384321346879,
    0.008517506532371044,
    0.017485525459051132,
    0.00861605629324913,
    -0.023328112438321114,
    -0.019357968121767044,
    0.02308877743780613,
    0.016359243541955948,
    0.049753498286008835,
    0.0034721156116575003,
    0.027551669627428055,
    0.006067843176424503,
    -0.0038258384447544813,
    0.0024602217599749565,
    0.005441348999738693,
    -0.01200897991657257,
    0.011706291697919369,
    0.030156195163726807,
    -0.008686448447406292,
    -0.03170483186841011,
    -0.028072575107216835,
    -0.008468231186270714,
    -0.00705333985388279,
    -0.014303779229521751,
    -0.02976199798285961,
    0.04167242720723152,
    -0.002674919320270419,
    -0.016640814021229744,
    -0.01723211258649826,
    -0.009671945124864578,
    -0.006729533895850182,
    0.027495354413986206,
    -0.012712906114757061,
    0.013459067791700363,
    -0.009735298343002796,
    0.013979973271489143,
    -0.017457367852330208,
    0.01086158026009798,
    -0.0019217183580622077,
    0.011882273480296135,
    0.004744462203234434,
    -0.007517931051552296,
    -0.007898051291704178,
    -0.02476412057876587,
    -0.004484009463340044,
    -0.004899325780570507,
    0.008010679855942726,
    0.016894226893782616,
    0.006148794665932655,
    -0.017175797373056412,
    0.04417840391397476,
    0.019555067643523216,
    -0.00442769518122077,
    -0.008939862251281738,
    -0.036322589963674545,
    0.035590507090091705,
    -0.024116508662700653,
    -0.013937737792730331,
    -0.009629709646105766,
    -0.02241300791501999,
    -0.0038539955858141184,
    -0.00783469807356596,
    -0.03567497804760933,
    -0.005300563760101795,
    -0.022962071001529694,
    -0.008953940123319626,
    0.00960859190672636,
    -0.022708656266331673,
    -0.009735298343002796,
    0.0018442864529788494,
    -0.019836638122797012,
    -0.01985071785748005,
    -0.03176114708185196,
    -0.010023907758295536,
    -0.0008231536485254765,
    -0.019259419292211533,
    -0.022272223606705666,
    -0.010995326563715935,
    -0.023581525310873985,
    0.019808482378721237,
    0.028114810585975647,
    0.00646556168794632,
    0.008109228685498238,
    0.03511183708906174,
    -0.007848776876926422,
    0.019470596686005592,
    0.026340916752815247,
    0.013466106727719307,
    -0.04015194624662399,
    0.004857090301811695,
    -0.024060195311903954,
    0.01038995012640953,
    0.032718487083911896,
    -0.00030048846383579075,
    -0.03468947857618332,
    -0.013318282552063465,
    -0.014543114230036736,
    0.020343465730547905,
    0.02434176579117775,
    -0.01906231977045536,
    0.0035108316224068403,
    0.010136536322534084,
    0.03060670755803585,
    -0.010361792519688606,
    -0.038152795284986496,
    0.02987462468445301,
    -0.01000279001891613,
    -0.00011504792928462848,
    0.014205229468643665,
    0.00391734903678298,
    0.019470596686005592,
    0.019034162163734436,
    -0.004132046364247799,
    -0.004286910407245159,
    -0.020751742646098137,
    -0.025355419144034386,
    -0.03544972091913223,
    0.006623944733291864,
    -0.003301413496956229,
    0.009812730364501476,
    -0.004593118093907833,
    -0.018316157162189484,
    -0.01083342358469963,
    0.03671678900718689,
    0.009552277624607086,
    -0.000555221748072654,
    -0.01418411172926426,
    0.004336184822022915,
    -0.025735540315508842,
    -0.02042793668806553,
    -0.005451907869428396,
    -0.026439465582370758,
    0.0034193212632089853,
    0.017218032851815224,
    -0.0358157604932785,
    -0.011206503957509995,
    -0.021286725997924805,
    0.015049940906465054,
    0.041644271463155746,
    -0.027185628190636635,
    -0.018147215247154236,
    -0.018302079290151596,
    -0.010608166456222534,
    -0.006666180677711964,
    -0.04398130625486374,
    0.013775834813714027,
    0.014247464947402477,
    0.02475004270672798,
    0.028016259893774986,
    0.0006110958638601005,
    0.01848510093986988,
    0.0433618500828743,
    -0.010108379647135735,
    -0.01682383380830288,
    0.003945506177842617,
    -0.010326595976948738,
    0.002785787684842944,
    -0.012058254331350327,
    -0.04305212199687958,
    0.0015785543946549296,
    -0.01070671621710062,
    0.0028016259893774986,
    0.01749960333108902,
    0.028537165373563766,
    -0.02857940085232258,
    -0.012691788375377655,
    -0.014057405292987823,
    -0.014768370427191257,
    0.010192850604653358,
    -0.010910854674875736,
    -0.0007294434471987188,
    -0.007489773910492659,
    -0.024243216961622238,
    0.008038836531341076,
    0.004251713864505291,
    0.007475695572793484,
    -0.012734023854136467,
    0.015317432582378387,
    -0.02276497147977352,
    -0.0033102126326411963,
    -0.008193700574338436,
    -0.004279871005564928,
    -0.00963674858212471,
    0.012543964199721813,
    -0.012431335635483265,
    0.007201164495199919,
    0.01374063827097416,
    0.02779100462794304,
    -0.019780324772000313,
    0.02266642078757286,
    -0.0359283909201622,
    0.007567205931991339,
    -0.03911013528704643,
    0.012318707071244717,
    0.011727409437298775,
    -0.005121062509715557,
    0.016795678064227104,
    -0.019034162163734436,
    0.041644271463155746,
    -0.012656591832637787,
    0.011882273480296135,
    -0.0067612105049192905,
    -0.004202438984066248,
    -0.031198006123304367,
    0.0012556283036246896,
    0.004142605233937502,
    -0.023412583395838737,
    -0.012769220396876335,
    -0.0020660231821238995,
    0.010685598477721214,
    0.0017606952460482717,
    -0.026298681274056435,
    -0.010917894542217255,
    -0.05896085500717163,
    -0.011572545394301414,
    -0.001100764493457973,
    0.014310818165540695,
    -0.024327687919139862,
    -0.0034826744813472033,
    -0.019498754292726517,
    -0.019456518813967705,
    -0.007320831995457411,
    0.16928015649318695,
    -0.00796844344586134,
    0.03896934911608696,
    0.021427512168884277,
    0.012311668135225773,
    0.05313234403729439,
    0.004508647136390209,
    -0.01692238450050354,
    0.0013656166847795248,
    0.021483825519680977,
    0.025932637974619865,
    -0.010622245259582996,
    0.0036322588566690683,
    0.0011465196730569005,
    -0.008763880468904972,
    -0.016373321413993835,
    -0.03086012229323387,
    -0.0179641954600811,
    -0.009573395363986492,
    0.016105830669403076,
    -0.0007004064973443747,
    -0.015444139018654823,
    -0.019160868600010872,
    -0.009538198821246624,
    0.025988953188061714,
    0.009200314991176128,
    -0.00069688685471192,
    0.008496388792991638,
    0.010009829886257648,
    0.00041047693230211735,
    -0.012628435157239437,
    -0.008271131664514542,
    0.004579039290547371,
    -0.006877358537167311,
    -0.021695002913475037,
    -0.018090901896357536,
    -0.0016322287265211344,
    0.004110928624868393,
    0.019681774079799652,
    0.003818799275904894,
    -0.0024373442865908146,
    -0.021399354562163353,
    0.021441590040922165,
    -0.03868778049945831,
    -0.00520905340090394,
    -0.01141064241528511,
    -0.0006634503952227533,
    0.0019006006186828017,
    0.0009925358463078737,
    0.0006876478437334299,
    -0.0062262266874313354,
    -0.012016018852591515,
    0.01093901228159666,
    -0.009256628341972828,
    -0.025876324623823166,
    -0.03471763804554939,
    -0.00028223037952557206,
    0.035393405705690384,
    0.02230037935078144,
    0.004336184822022915,
    -0.022342614829540253,
    0.02365191839635372,
    -0.009510042145848274,
    0.002938891528174281,
    -0.04122191295027733,
    0.022793129086494446,
    -0.030015410855412483,
    -0.012135686352849007,
    -0.023623760789632797,
    -0.013620970770716667,
    0.008939862251281738,
    -0.02037162147462368,
    0.004146125167608261,
    -0.027396805584430695,
    -0.008707566186785698,
    -0.0307193361222744,
    0.02476412057876587,
    0.02538357675075531,
    0.0021047391928732395,
    0.03257770091295242,
    0.0009511801763437688,
    0.013444988988339901,
    0.0005864584818482399,
    0.013979973271489143,
    -0.042488981038331985,
    -0.008834272623062134,
    0.010713756084442139,
    -0.016739362850785255,
    -0.02272273600101471,
    0.006261422764509916,
    -0.011523270979523659,
    -0.03429528325796127,
    -0.0008372321608476341,
    0.005332240369170904,
    0.00963674858212471,
    0.008925783447921276,
    0.00919327512383461,
    -0.010608166456222534,
    -0.033084526658058167,
    -0.011558467522263527,
    -0.001728138653561473,
    0.06188918650150299,
    0.00583554757758975,
    0.020667271688580513,
    -0.013733599334955215,
    -0.008130346424877644,
    -0.021652767434716225,
    0.03370398283004761,
    0.03232428804039955,
    -0.027974024415016174,
    0.0016313488595187664,
    -0.0343797542154789,
    -0.001180836115963757,
    -0.005254808813333511,
    -0.012579159811139107,
    0.011424721218645573,
    0.016359243541955948,
    0.009615630842745304,
    -0.00043863398605026305,
    0.009052489884197712,
    0.007489773910492659,
    -0.018344314768910408,
    -0.02262418530881405,
    0.010713756084442139,
    -0.011938586831092834,
    -0.004107409156858921,
    0.0029899263754487038,
    0.010439224541187286,
    -0.0063951690681278706,
    0.0038152795750647783,
    0.015852415934205055,
    -0.039870377629995346,
    0.014303779229521751,
    0.015078097581863403,
    0.009221432730555534,
    0.002574609825387597,
    -0.013564656488597393,
    -0.007637598551809788,
    -0.011389524675905704,
    -0.029733840376138687,
    -0.018302079290151596,
    0.03018435277044773,
    0.024426236748695374,
    -0.003109593642875552,
    0.014458643272519112,
    -0.010931973345577717,
    0.010896776802837849,
    -0.016373321413993835,
    0.01566939614713192,
    0.004818374291062355,
    0.000143974888487719,
    -0.02166684716939926,
    0.006444443948566914,
    -0.004811335355043411,
    0.007257478311657906,
    -0.05268183350563049,
    -0.008221857249736786,
    -0.027875475585460663,
    0.003952545113861561,
    -0.026805507019162178,
    -0.029536740854382515,
    0.0013392195105552673,
    0.021793553605675697,
    -0.0018442864529788494,
    -0.030747493728995323,
    0.013015594333410263,
    -0.17896617949008942,
    0.007947325706481934,
    0.013937737792730331,
    -0.04308027774095535,
    0.006444443948566914,
    -0.004476970061659813,
    0.0027805082499980927,
    0.005969293415546417,
    0.008031797595322132,
    -0.015739789232611656,
    0.04972534254193306,
    0.013937737792730331,
    -0.005582134239375591,
    -0.0003495433193165809,
    0.00323102087713778,
    0.008707566186785698,
    0.008503427729010582,
    0.018724435940384865,
    0.01859772764146328,
    0.01410667970776558,
    0.026523936539888382,
    -0.02962121181190014,
    0.009031372144818306,
    0.0068316031247377396,
    0.0036322588566690683,
    -0.02187802456319332,
    -0.025946717709302902,
    0.008285210467875004,
    -0.017218032851815224,
    -0.02767837606370449,
    0.010101339779794216,
    0.012959280051290989,
    0.02925517037510872,
    0.008911704644560814,
    0.010734873823821545,
    0.008700527250766754,
    0.03432343900203705,
    -0.010727833956480026,
    -0.004110928624868393,
    0.019076397642493248,
    0.039616964757442474,
    0.03702651336789131,
    0.02548212558031082,
    -0.0006273741601034999,
    -0.0032785360235720873,
    0.019245341420173645,
    0.0009520601015537977,
    -0.03263401612639427,
    0.004607196431607008,
    -0.031198006123304367,
    0.04262976720929146,
    -0.02010413073003292,
    0.02183578908443451,
    -0.007384185213595629,
    0.005022513214498758,
    0.0016779839061200619,
    0.013128222897648811,
    0.017626309767365456,
    0.011283935979008675,
    -0.02099107764661312,
    -0.013254929333925247,
    -0.024538865312933922,
    0.028382301330566406,
    0.0034492381382733583,
    -0.033140841871500015,
    -0.005275926552712917,
    -0.002907214919105172,
    0.03049408085644245,
    -0.029593054205179214,
    0.008390799164772034,
    0.034238968044519424,
    0.02767837606370449,
    0.007363067474216223,
    0.012734023854136467,
    0.013677285052835941,
    0.03060670755803585,
    -0.022793129086494446,
    0.0033612472470849752,
    0.02152606099843979,
    -0.020287150517106056,
    -0.02418690174818039,
    0.011107954196631908,
    0.0023898291401565075,
    0.02517239935696125,
    0.005029552150517702,
    0.0015785543946549296,
    -0.0021364158019423485,
    -0.00304800015874207,
    -0.021821709349751472,
    -0.02255379408597946,
    0.022905755788087845,
    -0.02303246408700943,
    0.03353504091501236,
    0.0103406747803092,
    0.011319132521748543,
    0.019343890249729156,
    0.00749681331217289,
    3.2336607546312734e-05,
    0.022708656266331673,
    -0.006521875504404306,
    0.00030686779064126313,
    0.010143575258553028,
    -0.009932397864758968,
    0.012255353853106499,
    0.03677310049533844,
    0.0030814367346465588,
    -0.02089252695441246,
    0.002754111075773835,
    0.02501753531396389,
    -0.010741912759840488,
    -0.014824684709310532,
    -0.0009846166940405965,
    0.012712906114757061,
    0.0006088960799388587,
    -0.022441165521740913,
    0.040658771991729736,
    0.023849017918109894,
    -0.0014219308504834771,
    -0.005015473812818527,
    -0.006557072047144175,
    0.04961271584033966,
    0.016105830669403076,
    -0.004262272734194994,
    0.029001757502555847,
    -0.04386867582798004,
    -0.03159220516681671,
    -0.10665889084339142,
    -0.016443714499473572,
    0.013663206249475479,
    0.001817889278754592,
    -0.01613398641347885,
    -0.006078402046114206,
    0.007257478311657906,
    0.03722361475229263,
    -0.043164752423763275,
    0.01749960333108902,
    0.015190726146101952,
    -0.0062367855571210384,
    -0.02172316052019596,
    -0.010791188105940819,
    -0.004997875541448593,
    -0.024257294833660126,
    -0.014683899469673634,
    -0.0062543838284909725,
    -0.012269432656466961,
    -0.014219308272004128,
    -0.012508767656981945,
    -0.006859760265797377,
    0.013100065290927887,
    0.0197380892932415,
    -0.005018993280827999,
    -0.00015981323667801917,
    -0.03905382379889488,
    0.026777349412441254,
    -0.024567022919654846,
    0.014979547820985317,
    0.019991502165794373,
    -0.010671520605683327,
    -0.0008015959174372256,
    -0.00048614898696541786,
    -0.0024901386350393295,
    0.0060502453707158566,
    -0.026073424145579338,
    -0.014198190532624722,
    0.02931148372590542,
    -0.01937204785645008,
    0.0067224944941699505,
    0.002551732352003455,
    0.007623520214110613,
    0.013571696355938911,
    -0.02011820860207081,
    -0.00905952975153923,
    -0.0037448869552463293,
    0.05414599925279617,
    0.018555492162704468,
    -0.024989377707242966,
    -0.027720611542463303,
    -0.006930152885615826,
    0.0016005520010367036,
    -0.011678135022521019,
    -0.0020343465730547905,
    -0.009629709646105766,
    0.003635778557509184,
    -0.0028403420001268387,
    0.00022987587726674974,
    -0.004170762374997139,
    -0.02449662983417511,
    0.019231261685490608,
    1.3858545571565628e-05,
    0.02987462468445301,
    -0.009495963342487812,
    0.015444139018654823,
    0.023271797224879265,
    -0.021582376211881638,
    0.0215682964771986,
    -0.01823168620467186,
    -0.005627889651805162,
    -0.005244249943643808,
    -0.004269312135875225,
    0.02349705435335636,
    -0.012586199678480625,
    0.013599853031337261,
    0.0025605312548577785,
    0.017006855458021164,
    0.009524120949208736,
    0.00916511844843626,
    -0.012093450874090195,
    -0.009960554540157318,
    -0.023750467225909233,
    -0.028030339628458023,
    0.008848351426422596,
    0.007377145811915398,
    -0.008841312490403652,
    0.007482734974473715,
    -8.210638770833611e-05,
    -0.029058070853352547,
    -0.0007580404635518789,
    -0.0061030397191643715,
    0.019034162163734436,
    -0.013508342206478119,
    0.0056067719124257565,
    0.005751076620072126,
    -0.015190726146101952,
    -0.026678800582885742,
    -0.031310632824897766,
    0.026186052709817886,
    -0.037730440497398376,
    -0.017175797373056412,
    -0.07957181334495544,
    0.02261010743677616,
    0.008447113446891308,
    0.00038341977051459253,
    0.003181746229529381,
    -0.01813313737511635,
    0.005219612270593643,
    -0.024581100791692734,
    0.007060379255563021,
    0.009904241189360619,
    -0.03353504091501236,
    -0.013585774227976799,
    -0.02251155860722065,
    -0.004388979636132717,
    -0.004677589051425457,
    -0.02006189525127411,
    0.02449662983417511,
    -0.0013145820703357458,
    0.046881482005119324,
    0.022370772436261177,
    0.005480065010488033,
    0.02027307264506817,
    0.03280295804142952,
    0.019160868600010872,
    -0.04032088816165924,
    -0.022962071001529694,
    -0.024313608184456825,
    0.013937737792730331,
    -0.0023687114007771015,
    -0.010016868822276592,
    0.014895076863467693,
    -0.02981831133365631,
    -0.00498731667175889,
    0.010713756084442139,
    -0.02674919366836548,
    -0.009066568687558174,
    0.021328961476683617,
    -0.048965103924274445,
    0.005363916978240013,
    0.011657017283141613,
    -0.01548637542873621,
    -0.025144241750240326,
    0.027143392711877823,
    -0.02100515551865101,
    -0.02272273600101471,
    -0.006219187285751104,
    0.014282661490142345,
    -0.00343515956774354,
    0.02339850552380085,
    0.001544237951748073,
    0.0322679728269577,
    -0.0008196340058930218,
    -0.01952691189944744,
    -0.027861395850777626,
    0.00794028677046299,
    0.00646556168794632,
    0.019456518813967705,
    -0.005110503640025854,
    0.00924255046993494,
    0.004952120594680309,
    0.023356270045042038,
    0.005631409119814634,
    0.01182595919817686,
    0.0012547483202069998,
    -0.01274106279015541,
    -0.011706291697919369,
    -0.03159220516681671,
    -0.01597912423312664,
    -0.015711631625890732,
    -0.008820194751024246,
    -0.034971050918102264,
    -0.026411307975649834,
    0.011966744437813759,
    0.003737847786396742,
    0.041813213378190994,
    -0.033140841871500015,
    -0.014486799947917461,
    0.0024672611616551876,
    -0.01088973693549633,
    0.0016322287265211344,
    0.006806965917348862,
    0.022328536957502365,
    -0.009291824884712696,
    0.011502153240144253,
    0.03359135612845421,
    -0.004962679464370012,
    -0.027044842019677162,
    0.010509617626667023,
    0.007028702646493912,
    0.027959946542978287,
    -0.019146790727972984,
    0.006472600623965263,
    0.013050790876150131,
    -0.0015354389324784279,
    0.0013788152718916535,
    0.009629709646105766,
    -0.01101644430309534,
    -0.013276047073304653,
    -0.003190545132383704,
    0.01765446737408638,
    0.013775834813714027,
    -0.004209478385746479,
    -0.004762060474604368,
    -0.014909155666828156,
    -0.0397014357149601,
    -0.0035917831119149923,
    -0.0024778200313448906,
    -0.002785787684842944,
    -0.02218775264918804,
    0.03553419187664986,
    0.020864371210336685,
    -0.0070568593218922615,
    -0.01848510093986988,
    0.01274810265749693,
    -0.003524910192936659,
    -0.00013407593360170722,
    0.016260692849755287,
    -0.009728259406983852,
    -0.010249164886772633,
    -9.310522727901116e-05,
    0.017724860459566116,
    0.010727833956480026,
    0.009207353927195072,
    -0.02998725324869156,
    0.036322589963674545,
    0.009291824884712696,
    0.01661265641450882,
    0.00591297959908843,
    0.029705682769417763,
    -0.01628885045647621,
    -0.007750226650387049,
    -0.029649369418621063,
    -0.016232537105679512,
    -0.017415132373571396,
    0.007250439375638962,
    -0.026988528668880463,
    -0.02387717366218567,
    0.023328112438321114,
    0.005641967989504337,
    0.0828380286693573,
    -0.009221432730555534,
    -0.03024066612124443,
    -0.007292674854397774,
    -0.030212510377168655,
    0.001463286462239921,
    0.008770919404923916,
    0.0008007159922271967,
    -0.016162144020199776,
    -0.02282128483057022,
    0.00044281352893449366,
    -0.018062744289636612,
    -0.03328162804245949,
    0.003977182786911726,
    -0.007820619270205498,
    0.016880149021744728,
    -0.012177921831607819,
    -0.0027013164944946766,
    -0.0018460463033989072,
    0.0032538985833525658,
    0.02601711079478264,
    0.00046415129327215254,
    -0.009080647490918636,
    -0.014430485665798187,
    -0.02037162147462368,
    -0.006208628416061401,
    0.038152795284986496,
    -0.00011647777864709496,
    0.008728683926165104,
    -0.06712639331817627,
    0.0022772010415792465,
    -0.00032974540954455733,
    -0.014486799947917461,
    -0.02329995483160019,
    -0.008517506532371044,
    -0.003977182786911726,
    0.008841312490403652,
    -0.037814911454916,
    -0.013198615051805973,
    0.015852415934205055,
    -0.00931998249143362,
    0.006046725437045097,
    -0.03902566432952881,
    -0.035646818578243256,
    0.0032187022734433413,
    -0.002454942325130105,
    0.02166684716939926,
    -0.011741488240659237,
    -0.025791853666305542
  ]
}
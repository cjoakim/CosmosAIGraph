{
  "classifiers": [
    "development status :: 4 - beta",
    "intended audience :: developers",
    "intended audience :: information technology",
    "license :: osi approved :: mit license",
    "programming language :: python :: 2.7",
    "programming language :: python :: 3.4",
    "programming language :: python :: 3.5",
    "programming language :: python :: 3.6",
    "programming language :: python :: 3.7",
    "topic :: utilities"
  ],
  "description": "utilities to work with data packages as defined on specs.frictionlessdata.io\n# datapackage-py\n\n[![travis](https://travis-ci.org/frictionlessdata/datapackage-py.svg?branch=master)](https://travis-ci.org/frictionlessdata/datapackage-py)\n[![coveralls](https://coveralls.io/repos/github/frictionlessdata/datapackage-py/badge.svg?branch=master)](https://coveralls.io/github/frictionlessdata/datapackage-py?branch=master)\n[![pypi](https://img.shields.io/pypi/v/datapackage.svg)](https://pypi.python.org/pypi/datapackage)\n[![github](https://img.shields.io/badge/github-master-brightgreen)](https://github.com/frictionlessdata/datapackage-py)\n[![gitter](https://img.shields.io/gitter/room/frictionlessdata/chat.svg)](https://gitter.im/frictionlessdata/chat)\n\na library for working with [data packages](http://specs.frictionlessdata.io/data-package/).\n\n> **[important notice]** we have released [frictionless framework](https://github.com/frictionlessdata/frictionless-py). this framework provides improved `datapackage` functionality extended to be a complete data solution. the change in not breaking for the existing software so no actions are required. please read the [migration guide](https://framework.frictionlessdata.io/docs/development/migration) from `datapackage` to frictionless framework.\n> - we continue to bug-fix `datapackage@1.x` in this [repository](https://github.com/frictionlessdata/datapackage-py) as well as it's available on [pypi](https://pypi.org/project/datapackage/) as it was before\n> - please note that `frictionless@3.x` version's api, we're working on at the moment, is not stable\n> - we will release `frictionless@4.x` by the end of 2020 to be the first semver/stable version\n\n## features\n\n - `package` class for working with data packages\n - `resource` class for working with data resources\n - `profile` class for working with profiles\n - `validate` function for validating data package descriptors\n - `infer` function for inferring data package descriptors\n\n## contents\n\n<!--toc-->\n\n  - [getting started](#getting-started)\n    - [installation](#installation)\n  - [documentation](#documentation)\n    - [introduction](#introduction)\n    - [working with package](#working-with-package)\n    - [working with resource](#working-with-resource)\n    - [working with group](#working-with-group)\n    - [working with profile](#working-with-profile)\n    - [working with foreign keys](#working-with-foreign-keys)\n    - [working with validate/infer](#working-with-validateinfer)\n    - [frequently asked questions](#frequently-asked-questions)\n  - [api reference](#api-reference)\n    - [`cli`](#cli)\n    - [`package`](#package)\n    - [`resource`](#resource)\n    - [`group`](#group)\n    - [`profile`](#profile)\n    - [`validate`](#validate)\n    - [`infer`](#infer)\n    - [`datapackageexception`](#datapackageexception)\n    - [`tableschemaexception`](#tableschemaexception)\n    - [`loaderror`](#loaderror)\n    - [`casterror`](#casterror)\n    - [`integrityerror`](#integrityerror)\n    - [`relationerror`](#relationerror)\n    - [`storageerror`](#storageerror)\n  - [contributing](#contributing)\n  - [changelog](#changelog)\n\n<!--toc-->\n\n## getting started\n\n### installation\n\nthe package use semantic versioning. it means that major versions  could include breaking changes. it's highly recommended to specify `datapackage` version range in your `setup/requirements` file e.g. `datapackage>=1.0,<2.0`.\n\n```bash\n$ pip install datapackage\n```\n\n#### osx 10.14+\nif you receive an error about the `cchardet` package when installing datapackage on mac osx 10.14 (mojave) or higher, follow these steps:\n1. make sure you have the latest x-code by running the following in terminal: `xcode-select --install`\n2. then go to [https://developer.apple.com/download/more/](https://developer.apple.com/download/more/) and download the `command line tools`. note, this requires an apple id.\n3. then, in terminal, run `open /library/developer/commandlinetools/packages/macos_sdk_headers_for_macos_10.14.pkg`\nyou can read more about these steps in this [post.](https://stackoverflow.com/questions/52509602/cant-compile-c-program-on-a-mac-after-upgrade-to-mojave)\n\n## documentation\n\n### introduction\n\nlet's start with a simple example:\n\n```python\nfrom datapackage import package\n\npackage = package('datapackage.json')\npackage.get_resource('resource').read()\n```\n\n### working with package\n\na class for working with data packages. it provides various capabilities like loading local or remote data package, inferring a data package descriptor, saving a data package descriptor and many more.\n\nconsider we have some local csv files in a `data` directory. let's create a data package based on this data using a `package` class:\n\n> data/cities.csv\n\n```csv\ncity,location\nlondon,\"51.50,-0.11\"\nparis,\"48.85,2.30\"\nrome,\"41.89,12.51\"\n```\n\n> data/population.csv\n\n```csv\ncity,year,population\nlondon,2017,8780000\nparis,2017,2240000\nrome,2017,2860000\n```\n\nfirst we create a blank data package:\n\n```python\npackage = package()\n```\n\nnow we're ready to infer a data package descriptor based on data files we have. because we have two csv files we use glob pattern `**/*.csv`:\n\n```python\npackage.infer('**/*.csv')\npackage.descriptor\n#{ profile: 'tabular-data-package',\n#  resources:\n#   [ { path: 'data/cities.csv',\n#       profile: 'tabular-data-resource',\n#       encoding: 'utf-8',\n#       name: 'cities',\n#       format: 'csv',\n#       mediatype: 'text/csv',\n#       schema: [object] },\n#     { path: 'data/population.csv',\n#       profile: 'tabular-data-resource',\n#       encoding: 'utf-8',\n#       name: 'population',\n#       format: 'csv',\n#       mediatype: 'text/csv',\n#       schema: [object] } ] }\n```\n\nan `infer` method has found all our files and inspected it to extract useful metadata like profile, encoding, format, table schema etc. let's tweak it a little bit:\n\n```python\npackage.descriptor['resources'][1]['schema']['fields'][1]['type'] = 'year'\npackage.commit()\npackage.valid # true\n```\n\nbecause our resources are tabular we could read it as a tabular data:\n\n```python\npackage.get_resource('population').read(keyed=true)\n#[ { city: 'london', year: 2017, population: 8780000 },\n#  { city: 'paris', year: 2017, population: 2240000 },\n#  { city: 'rome', year: 2017, population: 2860000 } ]\n```\n\nlet's save our descriptor on the disk as a zip-file:\n\n```python\npackage.save('datapackage.zip')\n```\n\nto continue the work with the data package we just load it again but this time using local `datapackage.zip`:\n\n```python\npackage = package('datapackage.zip')\n# continue the work\n```\n\nit was onle basic introduction to the `package` class. to learn more let's take a look on `package` class api reference.\n\n### working with resource\n\na class for working with data resources. you can read or iterate tabular resources using the `iter/read` methods and all resource as bytes using `row_iter/row_read` methods.\n\nconsider we have some local csv file. it could be inline data or remote link - all supported by `resource` class (except local files for in-brower usage of course). but say it's `data.csv` for now:\n\n```csv\ncity,location\nlondon,\"51.50,-0.11\"\nparis,\"48.85,2.30\"\nrome,n/a\n```\n\nlet's create and read a resource. because resource is tabular we could use `resource.read` method with a `keyed` option to get an array of keyed rows:\n\n```python\nresource = resource({path: 'data.csv'})\nresource.tabular # true\nresource.read(keyed=true)\n# [\n#   {city: 'london', location: '51.50,-0.11'},\n#   {city: 'paris', location: '48.85,2.30'},\n#   {city: 'rome', location: 'n/a'},\n# ]\nresource.headers\n# ['city', 'location']\n# (reading has to be started first)\n```\n\nas we could see our locations are just a strings. but it should be geopoints. also rome's location is not available but it's also just a `n/a` string instead of python `none`. first we have to infer resource metadata:\n\n```python\nresource.infer()\nresource.descriptor\n#{ path: 'data.csv',\n#  profile: 'tabular-data-resource',\n#  encoding: 'utf-8',\n#  name: 'data',\n#  format: 'csv',\n#  mediatype: 'text/csv',\n# schema: { fields: [ [object], [object] ], missingvalues: [ '' ] } }\nresource.read(keyed=true)\n# fails with a data validation error\n```\n\nlet's fix not available location. there is a `missingvalues` property in table schema specification. as a first try we set `missingvalues` to `n/a` in `resource.descriptor.schema`. resource descriptor could be changed in-place but all changes should be commited by `resource.commit()`:\n\n```python\nresource.descriptor['schema']['missingvalues'] = 'n/a'\nresource.commit()\nresource.valid # false\nresource.errors\n# [<validationerror: \"'n/a' is not of type 'array'\">]\n```\n\nas a good citiziens we've decided to check out recource descriptor validity. and it's not valid! we should use an array for `missingvalues` property. also don't forget to have an empty string as a missing value:\n\n```python\nresource.descriptor['schema']['missingvalues'] = ['', 'n/a']\nresource.commit()\nresource.valid # true\n```\n\nall good. it looks like we're ready to read our data again:\n\n```python\nresource.read(keyed=true)\n# [\n#   {city: 'london', location: [51.50,-0.11]},\n#   {city: 'paris', location: [48.85,2.30]},\n#   {city: 'rome', location: null},\n# ]\n```\n\nnow we see that:\n- locations are arrays with numeric lattide and longitude\n- rome's location is a native javascript `null`\n\nand because there are no errors on data reading we could be sure that our data is valid againt our schema. let's save our resource descriptor:\n\n```python\nresource.save('dataresource.json')\n```\n\nlet's check newly-crated `dataresource.json`. it contains path to our data file, inferred metadata and our `missingvalues` tweak:\n\n```json\n{\n    \"path\": \"data.csv\",\n    \"profile\": \"tabular-data-resource\",\n    \"encoding\": \"utf-8\",\n    \"name\": \"data\",\n    \"format\": \"csv\",\n    \"mediatype\": \"text/csv\",\n    \"schema\": {\n        \"fields\": [\n            {\n                \"name\": \"city\",\n                \"type\": \"string\",\n                \"format\": \"default\"\n            },\n            {\n                \"name\": \"location\",\n                \"type\": \"geopoint\",\n                \"format\": \"default\"\n            }\n        ],\n        \"missingvalues\": [\n            \"\",\n            \"n/a\"\n        ]\n    }\n}\n```\n\nif we decide to improve it even more we could update the `dataresource.json` file and then open it again using local file name:\n\n```python\nresource = resource('dataresource.json')\n# continue the work\n```\n\nit was onle basic introduction to the `resource` class. to learn more let's take a look on `resource` class api reference.\n\n### working with group\n\na class representing a group of tabular resources. groups can be used to read multiple resource as one or to export them, for example, to a database as one table. to define a group add the `group: <name>` field to corresponding resources. the group's metadata will be created from the \"leading\" resource's metadata (the first resource with the group name).\n\nconsider we have a data package with two tables partitioned by a year and a shared schema stored separately:\n\n>  cars-2017.csv\n\n```csv\nname,value\nbmw,2017\ntesla,2017\nnissan,2017\n```\n\n>  cars-2018.csv\n\n```csv\nname,value\nbmw,2018\ntesla,2018\nnissan,2018\n```\n\n> cars.schema.json\n\n```json\n{\n    \"fields\": [\n        {\n            \"name\": \"name\",\n            \"type\": \"string\"\n        },\n        {\n            \"name\": \"value\",\n            \"type\": \"integer\"\n        }\n    ]\n}\n```\n\n> datapackage.json\n\n```json\n{\n    \"name\": \"datapackage\",\n    \"resources\": [\n        {\n            \"group\": \"cars\",\n            \"name\": \"cars-2017\",\n            \"path\": \"cars-2017.csv\",\n            \"profile\": \"tabular-data-resource\",\n            \"schema\": \"cars.schema.json\"\n        },\n        {\n            \"group\": \"cars\",\n            \"name\": \"cars-2018\",\n            \"path\": \"cars-2018.csv\",\n            \"profile\": \"tabular-data-resource\",\n            \"schema\": \"cars.schema.json\"\n        }\n    ]\n}\n```\n\nlet's read the resources separately:\n\n```python\npackage = package('datapackage.json')\npackage.get_resource('cars-2017').read(keyed=true) == [\n    {'name': 'bmw', 'value': 2017},\n    {'name': 'tesla', 'value': 2017},\n    {'name': 'nissan', 'value': 2017},\n]\npackage.get_resource('cars-2018').read(keyed=true) == [\n    {'name': 'bmw', 'value': 2018},\n    {'name': 'tesla', 'value': 2018},\n    {'name': 'nissan', 'value': 2018},\n]\n```\n\non the other hand, these resources defined with a `group: cars` field. it means we can treat them as a group:\n\n```python\npackage = package('datapackage.json')\npackage.get_group('cars').read(keyed=true) == [\n    {'name': 'bmw', 'value': 2017},\n    {'name': 'tesla', 'value': 2017},\n    {'name': 'nissan', 'value': 2017},\n    {'name': 'bmw', 'value': 2018},\n    {'name': 'tesla', 'value': 2018},\n    {'name': 'nissan', 'value': 2018},\n]\n```\n\nwe can use this approach when we need to save the data package to a storage, for example, to a sql database. there is the `merge_groups` flag to enable groupping behaviour:\n\n```python\npackage = package('datapackage.json')\npackage.save(storage='sql', engine=engine)\n# sql tables:\n# - cars-2017\n# - cars-2018\npackage.save(storage='sql', engine=engine, merge_groups=true)\n# sql tables:\n# - cars\n```\n\n### working with profile\n\na component to represent json schema profile from [profiles registry]( https://specs.frictionlessdata.io/schemas/registry.json):\n\n```python\nprofile = profile('data-package')\n\nprofile.name # data-package\nprofile.jsonschema # json schema contents\n\ntry:\n   valid = profile.validate(descriptor)\nexcept exceptions.validationerror as exception:\n   for error in exception.errors:\n       # handle individual error\n```\n\n### working with foreign keys\n\nthe library supports foreign keys described in the [table schema](http://specs.frictionlessdata.io/table-schema/#foreign-keys) specification. it means if your data package descriptor use `resources[].schema.foreignkeys` property for some resources a data integrity will be checked on reading operations.\n\nconsider we have a data package:\n\n```python\ndescriptor = {\n  'resources': [\n    {\n      'name': 'teams',\n      'data': [\n        ['id', 'name', 'city'],\n        ['1', 'arsenal', 'london'],\n        ['2', 'real', 'madrid'],\n        ['3', 'bayern', 'munich'],\n      ],\n      'schema': {\n        'fields': [\n          {'name': 'id', 'type': 'integer'},\n          {'name': 'name', 'type': 'string'},\n          {'name': 'city', 'type': 'string'},\n        ],\n        'foreignkeys': [\n          {\n            'fields': 'city',\n            'reference': {'resource': 'cities', 'fields': 'name'},\n          },\n        ],\n      },\n    }, {\n      'name': 'cities',\n      'data': [\n        ['name', 'country'],\n        ['london', 'england'],\n        ['madrid', 'spain'],\n      ],\n    },\n  ],\n}\n```\n\nlet's check relations for a `teams` resource:\n\n```python\nfrom datapackage import package\n\npackage = package(descriptor)\nteams = package.get_resource('teams')\nteams.check_relations()\n# tableschema.exceptions.relationerror: foreign key \"['city']\" violation in row \"4\"\n```\n\nas we could see there is a foreign key violation. that's because our lookup table `cities` doesn't have a city of `munich` but we have a team from there. we need to fix it in `cities` resource:\n\n```python\npackage.descriptor['resources'][1]['data'].append(['munich', 'germany'])\npackage.commit()\nteams = package.get_resource('teams')\nteams.check_relations()\n# true\n```\n\nfixed! but not only a check operation is available. we could use `relations` argument for `resource.iter/read` methods to dereference a resource relations:\n\n```python\nteams.read(keyed=true, relations=true)\n#[{'id': 1, 'name': 'arsenal', 'city': {'name': 'london', 'country': 'england}},\n# {'id': 2, 'name': 'real', 'city': {'name': 'madrid', 'country': 'spain}},\n# {'id': 3, 'name': 'bayern', 'city': {'name': 'munich', 'country': 'germany}}]\n```\n\ninstead of plain city name we've got a dictionary containing a city data. these `resource.iter/read` methods will fail with the same as `resource.check_relations` error if there is an integrity issue. but only if `relations=true` flag is passed.\n\n### working with validate/infer\n\na standalone function to validate a data package descriptor:\n\n```python\nfrom datapackage import validate, exceptions\n\ntry:\n    valid = validate(descriptor)\nexcept exceptions.validationerror as exception:\n   for error in exception.errors:\n       # handle individual error\n```\n\na standalone function to infer a data package descriptor.\n\n```python\ndescriptor = infer('**/*.csv')\n#{ profile: 'tabular-data-resource',\n#  resources:\n#   [ { path: 'data/cities.csv',\n#       profile: 'tabular-data-resource',\n#       encoding: 'utf-8',\n#       name: 'cities',\n#       format: 'csv',\n#       mediatype: 'text/csv',\n#       schema: [object] },\n#     { path: 'data/population.csv',\n#       profile: 'tabular-data-resource',\n#       encoding: 'utf-8',\n#       name: 'population',\n#       format: 'csv',\n#       mediatype: 'text/csv',\n#       schema: [object] } ] }\n```\n\n### frequently asked questions\n\n#### accessing data behind a proxy server?\n\nbefore the `package = package(\"https://xxx.json\")` call set these environment variables:\n\n```python\nimport os\n\nos.environ[\"http_proxy\"] = 'xxx'\nos.environ[\"https_proxy\"] = 'xxx'\n```\n\n## api reference\n\n### `cli`\n```python\ncli()\n```\ncommand-line interface\n\n```\nusage: datapackage [options] command [args]...\n\noptions:\n  --version  show the version and exit.\n  --help     show this message and exit.\n\ncommands:\n  infer\n  validate\n```\n\n\n### `package`\n```python\npackage(self,\n        descriptor=none,\n        base_path=none,\n        strict=false,\n        unsafe=false,\n        storage=none,\n        schema=none,\n        default_base_path=none,\n        **options)\n```\npackage representation\n\n__arguments__\n- __descriptor (str/dict)__: data package descriptor as local path, url or object\n- __base_path (str)__: base path for all relative paths\n- __strict (bool)__: strict flag to alter validation behavior.\n        setting it to `true` leads to throwing errors\n        on any operation with invalid descriptor\n- __unsafe (bool)__:\n        if `true` unsafe paths will be allowed. for more inforamtion\n        https://specs.frictionlessdata.io/data-resource/#data-location.\n        default to `false`\n- __storage (str/tableschema.storage)__: storage name like `sql` or storage instance\n- __options (dict)__: storage options to use for storage creation\n\n__raises__\n- `datapackageexception`: raises error if something goes wrong\n\n\n\n#### `package.base_path`\npackage's base path\n\n__returns__\n\n`str/none`: returns the data package base path\n\n\n\n#### `package.descriptor`\npackage's descriptor\n\n__returns__\n\n`dict`: descriptor\n\n\n\n#### `package.errors`\nvalidation errors\n\nalways empty in strict mode.\n\n__returns__\n\n`exception[]`: validation errors\n\n\n\n#### `package.profile`\npackage's profile\n\n__returns__\n\n`profile`: an instance of `profile` class\n\n\n\n#### `package.resource_names`\npackage's resource names\n\n__returns__\n\n`str[]`: returns an array of resource names\n\n\n\n#### `package.resources`\npackage's resources\n\n__returns__\n\n`resource[]`: returns an array of `resource` instances\n\n\n\n#### `package.valid`\nvalidation status\n\nalways true in strict mode.\n\n__returns__\n\n`bool`: validation status\n\n\n\n#### `package.get_resource`\n```python\npackage.get_resource(name)\n```\nget data package resource by name.\n\n__arguments__\n- __name (str)__: data resource name\n\n__returns__\n\n`resource/none`: returns `resource` instances or null if not found\n\n\n\n#### `package.add_resource`\n```python\npackage.add_resource(descriptor)\n```\nadd new resource to data package.\n\nthe data package descriptor will be validated with newly added resource descriptor.\n\n__arguments__\n- __descriptor (dict)__: data resource descriptor\n\n__raises__\n- `datapackageexception`: raises error if something goes wrong\n\n__returns__\n\n`resource/none`: returns added `resource` instance or null if not added\n\n\n\n#### `package.remove_resource`\n```python\npackage.remove_resource(name)\n```\nremove data package resource by name.\n\nthe data package descriptor will be validated after resource descriptor removal.\n\n__arguments__\n- __name (str)__: data resource name\n\n__raises__\n- `datapackageexception`: raises error if something goes wrong\n\n__returns__\n\n`resource/none`: returns removed `resource` instances or null if not found\n\n\n\n#### `package.get_group`\n```python\npackage.get_group(name)\n```\nreturns a group of tabular resources by name.\n\nfor more information about groups see [group](#group).\n\n__arguments__\n- __name (str)__: name of a group of resources\n\n__raises__\n- `datapackageexception`: raises error if something goes wrong\n\n__returns__\n\n`group/none`: returns a `group` instance or null if not found\n\n\n\n#### `package.infer`\n```python\npackage.infer(pattern=false)\n```\ninfer a data package metadata.\n\n> argument `pattern` works only for local files\n\nif `pattern` is not provided only existent resources will be inferred\n(added metadata like encoding, profile etc). if `pattern` is provided\nnew resoures with file names mathing the pattern will be added and inferred.\nit commits changes to data package instance.\n\n__arguments__\n- __pattern (str)__: glob pattern for new resources\n\n__returns__\n\n`dict`: returns data package descriptor\n\n\n\n#### `package.commit`\n```python\npackage.commit(strict=none)\n```\nupdate data package instance if there are in-place changes in the descriptor.\n\n__example__\n\n\n```python\npackage = package({\n    'name': 'package',\n    'resources': [{'name': 'resource', 'data': ['data']}]\n})\n\npackage.name # package\npackage.descriptor['name'] = 'renamed-package'\npackage.name # package\npackage.commit()\npackage.name # renamed-package\n```\n\n__arguments__\n- __strict (bool)__: alter `strict` mode for further work\n\n__raises__\n- `datapackageexception`: raises error if something goes wrong\n\n__returns__\n\n`bool`: returns true on success and false if not modified\n\n\n\n#### `package.save`\n```python\npackage.save(target=none,\n             storage=none,\n             merge_groups=false,\n             to_base_path=false,\n             **options)\n```\nsaves this data package\n\nit saves it to storage if `storage` argument is passed or\nsaves this data package's descriptor to json file if `target` arguments\nends with `.json` or saves this data package to zip file otherwise.\n\n__example__\n\n\nit creates a zip file into ``file_or_path`` with the contents\nof this data package and its resources. every resource which content\nlives in the local filesystem will be copied to the zip file.\nconsider the following data package descriptor:\n\n```json\n{\n    \"name\": \"gdp\",\n    \"resources\": [\n        {\"name\": \"local\", \"format\": \"csv\", \"path\": \"data.csv\"},\n        {\"name\": \"inline\", \"data\": [4, 8, 15, 16, 23, 42]},\n        {\"name\": \"remote\", \"url\": \"http://someplace.com/data.csv\"}\n    ]\n}\n```\n\nthe final structure of the zip file will be:\n\n```\n./datapackage.json\n./data/local.csv\n```\n\nwith the contents of `datapackage.json` being the same as\nreturned `datapackage.descriptor`. the resources' file names are generated\nbased on their `name` and `format` fields if they exist.\nif the resource has no `name`, it'll be used `resource-x`,\nwhere `x` is the index of the resource in the `resources` list (starting at zero).\nif the resource has `format`, it'll be lowercased and appended to the `name`,\nbecoming \"`name.format`\".\n\n__arguments__\n- __target (string/filelike)__:\n        the file path or a file-like object where\n        the contents of this data package will be saved into.\n- __storage (str/tableschema.storage)__:\n        storage name like `sql` or storage instance\n- __merge_groups (bool)__:\n        save all the group's tabular resoruces into one bucket\n        if a storage is provided (for example into one sql table).\n        read more about [group](#group).\n- __to_base_path (bool)__:\n        save the package to the package's base path\n        using the \"<base_path>/<target>\" route\n- __options (dict)__:\n        storage options to use for storage creation\n\n__raises__\n- `datapackageexception`: raises if there was some error writing the package\n\n__returns__\n\n`bool/storage`: on success return true or a `storage` instance\n\n### `resource`\n```python\nresource(self,\n         descriptor={},\n         base_path=none,\n         strict=false,\n         unsafe=false,\n         storage=none,\n         package=none,\n         **options)\n```\nresource represenation\n\n__arguments__\n- __descriptor (str/dict)__: data resource descriptor as local path, url or object\n- __base_path (str)__: base path for all relative paths\n- __strict (bool)__:\n        strict flag to alter validation behavior.  setting it to `true`\n        leads to throwing errors on any operation with invalid descriptor\n- __unsafe (bool)__:\n        if `true` unsafe paths will be allowed. for more inforamtion\n        https://specs.frictionlessdata.io/data-resource/#data-location.\n        default to `false`\n- __storage (str/tableschema.storage)__: storage name like `sql` or storage instance\n- __options (dict)__: storage options to use for storage creation\n\n__raises__\n- `datapackageexception`: raises error if something goes wrong\n\n\n\n#### `resource.data`\nreturn resource data\n\n\n#### `resource.descriptor`\npackage's descriptor\n\n__returns__\n\n`dict`: descriptor\n\n\n\n#### `resource.errors`\nvalidation errors\n\nalways empty in strict mode.\n\n__returns__\n\n`exception[]`: validation errors\n\n\n\n#### `resource.group`\ngroup name\n\n__returns__\n\n`str`: group name\n\n\n\n#### `resource.headers`\nresource's headers\n\n> only for tabular resources (reading has to be started first or it's `none`)\n\n__returns__\n\n`str[]/none`: returns data source headers\n\n\n\n#### `resource.inline`\nwhether resource inline\n\n__returns__\n\n`bool`: returns true if resource is inline\n\n\n\n#### `resource.local`\nwhether resource local\n\n__returns__\n\n`bool`: returns true if resource is local\n\n\n\n#### `resource.multipart`\nwhether resource multipart\n\n__returns__\n\n`bool`: returns true if resource is multipart\n\n\n\n#### `resource.name`\nresource name\n\n__returns__\n\n`str`: name\n\n\n\n#### `resource.package`\npackage instance if the resource belongs to some package\n\n__returns__\n\n`package/none`: a package instance if available\n\n\n\n#### `resource.profile`\nresource's profile\n\n__returns__\n\n`profile`: an instance of `profile` class\n\n\n\n#### `resource.remote`\nwhether resource remote\n\n__returns__\n\n`bool`: returns true if resource is remote\n\n\n\n#### `resource.schema`\nresource's schema\n\n> only for tabular resources\n\nfor tabular resources it returns `schema` instance to interact with data schema.\nread api documentation - [tableschema.schema](https://github.com/frictionlessdata/tableschema-py#schema).\n\n__returns__\n\n`tableschema.schema`: schema\n\n\n\n#### `resource.source`\nresource's source\n\ncombination of `resource.source` and `resource.inline/local/remote/multipart`\nprovides predictable interface to work with resource data.\n\n__returns__\n\n`list/str`: returns `data` or `path` property\n\n\n\n#### `resource.table`\nreturn resource table\n\n\n#### `resource.tabular`\nwhether resource tabular\n\n__returns__\n\n`bool`: returns true if resource is tabular\n\n\n\n#### `resource.valid`\nvalidation status\n\nalways true in strict mode.\n\n__returns__\n\n`bool`: validation status\n\n\n\n#### `resource.iter`\n```python\nresource.iter(integrity=false, relations=false, **options)\n```\niterates through the resource data and emits rows cast based on table schema.\n\n> only for tabular resources\n\n__arguments__\n\n\n    keyed (bool):\n        yield keyed rows in a form of `{header1: value1, header2: value2}`\n        (default is false; the form of rows is `[value1, value2]`)\n\n    extended (bool):\n        yield extended rows in a for of `[rownumber, [header1, header2], [value1, value2]]`\n        (default is false; the form of rows is `[value1, value2]`)\n\n    cast (bool):\n        disable data casting if false\n        (default is true)\n\n    integrity (bool):\n        if true actual size in bytes and sha256 hash of the file\n        will be checked against `descriptor.bytes` and `descriptor.hash`\n        (other hashing algorithms are not supported and will be skipped silently)\n\n    relations (bool):\n        if true foreign key fields will be checked and resolved to its references\n\n    foreign_keys_values (dict):\n        three-level dictionary of foreign key references optimized\n        to speed up validation process in a form of\n        `{resource1: {(fk_field1, fk_field2): {(value1, value2): {one_keyedrow}, ... }}}`.\n        if not provided but relations is true, it will be created\n        before the validation process by *index_foreign_keys_values* method\n\n    exc_handler (func):\n        optional custom exception handler callable.\n        can be used to defer raising errors (i.e. \"fail late\"), e.g.\n        for data validation purposes. must support the signature below\n\n__custom exception handler__\n\n\n```python\ndef exc_handler(exc, row_number=none, row_data=none, error_data=none):\n    '''custom exception handler (example)\n\n    # arguments:\n        exc(exception):\n            deferred exception instance\n        row_number(int):\n            data row number that triggers exception exc\n        row_data(ordereddict):\n            invalid data row source data\n        error_data(ordereddict):\n            data row source data field subset responsible for the error, if\n            applicable (e.g. invalid primary or foreign key fields). may be\n            identical to row_data.\n    '''\n    # ...\n```\n\n__raises__\n- `datapackageexception`: base class of any error\n- `casterror`: data cast error\n- `integrityerror`: integrity checking error\n- `uniquekeyerror`: unique key constraint violation\n- `unresolvedfkerror`: unresolved foreign key reference error\n\n__returns__\n\n`iterator[list]`: yields rows\n\n\n\n#### `resource.read`\n```python\nresource.read(integrity=false,\n              relations=false,\n              foreign_keys_values=false,\n              **options)\n```\nread the whole resource and return as array of rows\n\n> only for tabular resources\n> it has the same api as `resource.iter` except for\n\n__arguments__\n- __limit (int)__: limit count of rows to read and return\n\n__returns__\n\n`list[]`: returns rows\n\n\n\n#### `resource.check_integrity`\n```python\nresource.check_integrity()\n```\nchecks resource integrity\n\n> only for tabular resources\n\nit checks size in bytes and sha256 hash of the file\nagainst `descriptor.bytes` and `descriptor.hash`\n(other hashing algorithms are not supported and will be skipped silently).\n\n__raises__\n- `exceptions.integrityerror`: raises if there are integrity issues\n\n__returns__\n\n`bool`: returns true if no issues\n\n\n\n#### `resource.check_relations`\n```python\nresource.check_relations(foreign_keys_values=false)\n```\ncheck relations\n\n> only for tabular resources\n\nit checks foreign keys and raises an exception if there are integrity issues.\n\n__raises__\n- `exceptions.relationerror`: raises if there are relation issues\n\n__returns__\n\n`bool`: returns true if no issues\n\n\n\n#### `resource.drop_relations`\n```python\nresource.drop_relations()\n```\ndrop relations\n\n> only for tabular resources\n\nremove relations data from memory\n\n__returns__\n\n`bool`: returns true\n\n\n\n#### `resource.raw_iter`\n```python\nresource.raw_iter(stream=false)\n```\niterate over data chunks as bytes.\n\nif `stream` is true file-like object will be returned.\n\n__arguments__\n- __stream (bool)__: file-like object will be returned\n\n__returns__\n\n`bytes[]/filelike`: returns bytes[]/filelike\n\n\n\n#### `resource.raw_read`\n```python\nresource.raw_read()\n```\nreturns resource data as bytes.\n\n__returns__\n\n`bytes`: returns resource data in bytes\n\n\n\n#### `resource.infer`\n```python\nresource.infer(**options)\n```\ninfer resource metadata\n\nlike name, format, mediatype, encoding, schema and profile.\nit commits this changes into resource instance.\n\n__arguments__\n- __options__:\n        options will be passed to `tableschema.infer` call,\n        for more control on results (e.g. for setting `limit`, `confidence` etc.).\n\n__returns__\n\n`dict`: returns resource descriptor\n\n\n\n#### `resource.commit`\n```python\nresource.commit(strict=none)\n```\nupdate resource instance if there are in-place changes in the descriptor.\n\n__arguments__\n- __strict (bool)__: alter `strict` mode for further work\n\n__raises__\n- `datapackageexception`: raises error if something goes wrong\n\n__returns__\n\n`bool`: returns true on success and false if not modified\n\n\n\n#### `resource.save`\n```python\nresource.save(target, storage=none, to_base_path=false, **options)\n```\nsaves this resource\n\ninto storage if `storage` argument is passed or\nsaves this resource's descriptor to json file otherwise.\n\n__arguments__\n- __target (str)__:\n        path where to save a resource\n- __storage (str/tableschema.storage)__:\n        storage name like `sql` or storage instance\n- __to_base_path (bool)__:\n        save the resource to the resource's base path\n        using the \"<base_path>/<target>\" route\n- __options (dict)__:\n        storage options to use for storage creation\n\n__raises__\n- `datapackageexception`: raises error if something goes wrong\n\n__returns__\n\n`bool`: returns true on success\nbuilding index...\nstarted generating documentation...\n\n### `group`\n```python\ngroup(self, resources)\n```\ngroup representation\n\n__arguments__\n- __resource[]__: list of tabular resources\n\n\n\n#### `group.headers`\ngroup's headers\n\n__returns__\n\n`str[]/none`: returns headers\n\n\n\n#### `group.name`\ngroup name\n\n__returns__\n\n`str`: name\n\n\n\n#### `group.schema`\nresource's schema\n\n__returns__\n\n`tableschema.schema`: schema\n\n\n\n#### `group.iter`\n```python\ngroup.iter(**options)\n```\niterates through the group data and emits rows cast based on table schema.\n\n> it concatenates all the resources and has the same api as `resource.iter`\n\n\n\n#### `group.read`\n```python\ngroup.read(limit=none, **options)\n```\nread the whole group and return as array of rows\n\n> it concatenates all the resources and has the same api as `resource.read`\n\n\n\n#### `group.check_relations`\n```python\ngroup.check_relations()\n```\ncheck group's relations\n\nthe same as `resource.check_relations` but without the optional\nargument *foreign_keys_values*.  this method will test foreignkeys of the\nwhole group at once otpimizing the process by creating the foreign_key_values\nhashmap only once before testing the set of resources.\n\n\n### `profile`\n```python\nprofile(self, profile)\n```\nprofile representation\n\n__arguments__\n- __profile (str)__: profile name in registry or url to json schema\n\n__raises__\n- `datapackageexception`: raises error if something goes wrong\n\n\n\n#### `profile.jsonschema`\njsonschema content\n\n__returns__\n\n`dict`: returns profile's json schema contents\n\n\n\n#### `profile.name`\nprofile name\n\n__returns__\n\n`str/none`: name if available\n\n\n\n#### `profile.validate`\n```python\nprofile.validate(descriptor)\n```\nvalidate a data package `descriptor` against the profile.\n\n__arguments__\n- __descriptor (dict)__: retrieved and dereferenced data package descriptor\n\n__raises__\n- `validationerror`: raises if not valid\n__returns__\n\n`bool`: returns true if valid\n\n\n### `validate`\n```python\nvalidate(descriptor)\n```\nvalidate a data package descriptor.\n\n__arguments__\n- __descriptor (str/dict)__: package descriptor (one of):\n      - local path\n      - remote url\n      - object\n\n__raises__\n- `validationerror`: raises on invalid\n\n__returns__\n\n`bool`: returns true on valid\n\n\n### `infer`\n```python\ninfer(pattern, base_path=none)\n```\ninfer a data package descriptor.\n\n> argument `pattern` works only for local files\n\n__arguments__\n- __pattern (str)__: glob file pattern\n\n__returns__\n\n`dict`: returns data package descriptor\n\n\n### `datapackageexception`\n```python\ndatapackageexception(self, message, errors=[])\n```\nbase class for all datapackage/tableschema exceptions.\n\nif there are multiple errors, they can be read from the exception object:\n\n```python\ntry:\n    # lib action\nexcept datapackageexception as exception:\n    if exception.multiple:\n        for error in exception.errors:\n            # handle error\n```\n\n\n\n#### `datapackageexception.errors`\nlist of nested errors\n\n__returns__\n\n`datapackageexception[]`: list of nested errors\n\n\n\n#### `datapackageexception.multiple`\nwhether it's a nested exception\n\n__returns__\n\n`bool`: whether it's a nested exception\n\n\n\n### `tableschemaexception`\n```python\ntableschemaexception(self, message, errors=[])\n```\nbase class for all tableschema exceptions.\n\n\n### `loaderror`\n```python\nloaderror(self, message, errors=[])\n```\nall loading errors.\n\n\n### `casterror`\n```python\ncasterror(self, message, errors=[])\n```\nall value cast errors.\n\n\n### `integrityerror`\n```python\nintegrityerror(self, message, errors=[])\n```\nall integrity errors.\n\n\n### `relationerror`\n```python\nrelationerror(self, message, errors=[])\n```\nall relations errors.\n\n\n### `storageerror`\n```python\nstorageerror(self, message, errors=[])\n```\nall storage errors.\n\n\n## contributing\n\n> the project follows the [open knowledge international coding standards](https://github.com/okfn/coding-standards).\n\nrecommended way to get started is to create and activate a project virtual environment.\nto install package and development dependencies into active environment:\n\n```bash\n$ make install\n```\n\nto run tests with linting and coverage:\n\n```bash\n$ make test\n```\n\n## changelog\n\nhere described only breaking and the most important changes. the full changelog and documentation for all released versions could be found in nicely formatted [commit history](https://github.com/frictionlessdata/datapackage-py/commits/master).\n\n#### v1.15\n\n> warning: it can be breaking for some setups, please read the discussions below\n\n- fixed header management according to the specs:\n    - https://github.com/frictionlessdata/datapackage-py/pull/257\n    - https://github.com/frictionlessdata/datapackage-py/issues/256\n    - https://github.com/frictionlessdata/forum/issues/1\n\n#### v1.14\n\n- add experimental options for pick/skiping fileds/rows\n\n#### v1.13\n\n- add `unsafe` option to package and resource (#262)\n\n#### v1.12\n\n- use `chardet` for encoding deteciton by default. for `cchardet`: `pip install datapackage[cchardet]`\n\n#### v1.11\n\n- `resource/package.save` now accept a `to_base_path` argument (#254)\n- `package.save` now returns a `storage` instance if available\n\n#### v1.10\n\n- added an ability to check tabular resource's integrity\n\n#### v1.9\n\n- added `resource.package` property\n\n#### v1.8\n\n- added support for [groups of resources](#group)\n\n#### v1.7\n\n- added support for [compression of resources](https://frictionlessdata.io/specs/patterns/#compression-of-resources)\n\n#### v1.6\n\n- added support for custom request session\n\n#### v1.5\n\nupdated behaviour:\n- added support for python 3.7\n\n#### v1.4\n\nnew api added:\n- added `skip_rows` support to the resource descriptor\n\n#### v1.3\n\nnew api added:\n- property `package.base_path` is now publicly available\n\n#### v1.2\n\nupdated behaviour:\n- cli command `$ datapackage infer` now outputs only a json-formatted data package descriptor.\n\n#### v1.1\n\nnew api added:\n- added an integration between `package/resource` and the `tableschema.storage` - https://github.com/frictionlessdata/tableschema-py#storage. it allows to load and save data package from/to different storages like sql/bigquery/etc.\n\n",
  "docs_url": null,
  "keywords": "frictionless data,open data,json schema,table schema,data package,tabular data package",
  "license": "mit",
  "name": "datapackage",
  "package_url": "https://pypi.org/project/datapackage/",
  "project_url": "https://pypi.org/project/datapackage/",
  "project_urls": {
    "Homepage": "https://github.com/frictionlessdata/datapackage-py"
  },
  "release_url": "https://pypi.org/project/datapackage/1.15.2/",
  "requires_dist": [
    "six (>=1.10)",
    "click (>=6.7)",
    "chardet (>=3.0)",
    "requests (>=2.8)",
    "jsonschema (>=2.5)",
    "unicodecsv (>=0.14)",
    "jsonpointer (>=1.10)",
    "tableschema (>=1.12.1)",
    "tabulator (>=1.29)",
    "cchardet (>=2.0) ; extra == 'cchardet'",
    "mock ; extra == 'develop'",
    "pylama ; extra == 'develop'",
    "pytest ; extra == 'develop'",
    "pytest-cov ; extra == 'develop'",
    "httpretty ; extra == 'develop'",
    "tableschema-sql ; extra == 'develop'"
  ],
  "requires_python": "",
  "summary": "utilities to work with data packages as defined on specs.frictionlessdata.io",
  "version": "1.15.2",
  "releases": [],
  "developers": [
    "info@okfn.org",
    "open_knowledge_foundation"
  ],
  "kwds": "datapackage frictionlessdata datapackageexception row_data packages",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_datapackage",
  "homepage": "https://github.com/frictionlessdata/datapackage-py",
  "release_count": 92,
  "dependency_ids": [
    "pypi_cchardet",
    "pypi_chardet",
    "pypi_click",
    "pypi_httpretty",
    "pypi_jsonpointer",
    "pypi_jsonschema",
    "pypi_mock",
    "pypi_pylama",
    "pypi_pytest",
    "pypi_pytest_cov",
    "pypi_requests",
    "pypi_six",
    "pypi_tableschema",
    "pypi_tableschema_sql",
    "pypi_tabulator",
    "pypi_unicodecsv"
  ],
  "documentation_summary": "The `datapackage-py` library on GitHub, developed by frictionlessdata, is a Python tool for working with Data Packages. It allows users to handle data packages and resources, validate data package descriptors, and infer descriptors from data. The library supports working with profiles, foreign keys, and provides functionalities for validating and inferring data package descriptors. It also includes a migration guide from datapackage to Frictionless Framework for enhanced functionality. The library is MIT licensed and supports installation via pip, including steps for resolving potential installation issues on Mac OSX 10.14+. The documentation covers various aspects such as installation, working with packages and resources, and handling data integrity and relations.",
  "embedding": [
    -0.014331541955471039,
    0.01797853410243988,
    0.006588805466890335,
    -0.03709675371646881,
    -0.0123370923101902,
    0.015086582861840725,
    0.00139522401150316,
    -0.023434776812791824,
    0.0110407005995512,
    -0.026782602071762085,
    0.019445879384875298,
    0.01743718422949314,
    -0.02521553635597229,
    0.040572796016931534,
    0.003541928017511964,
    -0.014687693677842617,
    0.014530986547470093,
    -0.02002996765077114,
    0.008284087292850018,
    0.005726918112486601,
    0.023876406252384186,
    0.008618869818747044,
    -0.014003882184624672,
    -0.0032391990534961224,
    -0.013583623804152012,
    0.018462900072336197,
    -0.004362857434898615,
    -0.02666863426566124,
    0.009145974181592464,
    0.0066101741977036,
    0.042994625866413116,
    -0.02726696990430355,
    -0.020742271095514297,
    -0.0344184935092926,
    -0.015257536433637142,
    -0.035985562950372696,
    -0.009808416478335857,
    0.008027657866477966,
    0.012052170932292938,
    0.0020318450406193733,
    0.0012162578059360385,
    0.002640864346176386,
    -0.00948787946254015,
    0.0022099209018051624,
    -0.01245106104761362,
    -0.0001230949128512293,
    0.008967897854745388,
    -0.022893426939845085,
    -0.006777565460652113,
    0.004330804105848074,
    0.020841993391513824,
    0.016468452289700508,
    -0.01851988583803177,
    -0.02575688622891903,
    0.030372612178325653,
    -0.004369980655610561,
    0.0035828854888677597,
    0.028435146436095238,
    -0.010983716696500778,
    -0.011382605880498886,
    0.010456612333655357,
    0.010549211874604225,
    -0.024104341864585876,
    -0.01836317777633667,
    -0.025329504162073135,
    -0.007756982464343309,
    -0.0022562206722795963,
    0.02756613679230213,
    0.012935427017509937,
    0.015471227467060089,
    0.01987326145172119,
    0.043706927448511124,
    0.004501756746321917,
    -0.00428806571289897,
    0.05632894113659859,
    -0.012807212769985199,
    -0.014253188855946064,
    0.012080663815140724,
    -0.02673986554145813,
    0.00526035949587822,
    0.016881586983799934,
    -0.00763589097186923,
    -0.0010310589568689466,
    0.010178813710808754,
    0.018163733184337616,
    0.024318033829331398,
    -0.018491392955183983,
    0.013227472081780434,
    0.0030753694009035826,
    -0.033193331211805344,
    -0.007949304766952991,
    -0.0035597356036305428,
    0.005677056964486837,
    0.01813524216413498,
    -0.009680201299488544,
    0.019673816859722137,
    0.007066048216074705,
    0.03646992892026901,
    0.007301108445972204,
    -0.006898656953126192,
    -0.006496205925941467,
    0.04610026627779007,
    -0.05139980465173721,
    -0.01398251298815012,
    -0.031341344118118286,
    -0.02171100303530693,
    -0.0069627645425498486,
    -0.008177241310477257,
    0.005114337429404259,
    0.01268612127751112,
    -0.021283620968461037,
    0.041940417140722275,
    -0.005011053290218115,
    -0.030942454934120178,
    -0.0035935700871050358,
    0.0050395457074046135,
    0.0198020301759243,
    -0.024346524849534035,
    -0.015870116651058197,
    0.012251616455614567,
    0.008469285443425179,
    0.03296539559960365,
    0.02209564670920372,
    -0.009359665215015411,
    0.009530617855489254,
    -0.003935475368052721,
    0.008739961311221123,
    -0.01736595295369625,
    0.030657533556222916,
    -0.000710522523149848,
    -0.0016035727458074689,
    0.002229509176686406,
    -0.0007897662580944598,
    -0.01844865456223488,
    -0.023676959797739983,
    -0.00819148775190115,
    -0.005345835816115141,
    0.01424606516957283,
    -0.013583623804152012,
    -0.0027174369897693396,
    0.009765678085386753,
    0.0009331172914244235,
    -0.03453246131539345,
    -0.0070518022403120995,
    0.010428119450807571,
    0.024018866941332817,
    0.001837742398492992,
    -0.0038215070962905884,
    0.023263825103640556,
    -0.023562991991639137,
    0.041940417140722275,
    0.00525679811835289,
    -0.027865303680300713,
    0.004964753985404968,
    -0.016183530911803246,
    0.01013607531785965,
    0.010606195777654648,
    -0.00217252504080534,
    -0.01398251298815012,
    -0.0028723629657179117,
    -0.018933020532131195,
    0.02423255704343319,
    -0.01447400264441967,
    -0.02651192806661129,
    -0.025999069213867188,
    0.03171174228191376,
    -0.0018012368818745017,
    -0.029004989191889763,
    -0.021995924413204193,
    0.024930614978075027,
    0.009537740610539913,
    -0.0030985192861407995,
    -0.019787784665822983,
    -0.0027334638871252537,
    0.013768821954727173,
    0.015955593436956406,
    -0.0007554866606369615,
    0.011439590714871883,
    -0.03305087238550186,
    -0.0034279595129191875,
    0.015670672059059143,
    -0.027323953807353973,
    0.008932283148169518,
    0.045131534337997437,
    -0.01188834197819233,
    -0.010307027958333492,
    -0.003148380434140563,
    -0.0018876036629080772,
    -0.004373542033135891,
    0.02880554459989071,
    0.04410581663250923,
    0.015371504239737988,
    -0.009908138774335384,
    -0.015300273895263672,
    -0.5944598317146301,
    -0.02682534046471119,
    0.004312996286898851,
    -0.04641368240118027,
    -0.006261145696043968,
    0.01859111525118351,
    0.025842363014817238,
    0.04100017622113228,
    0.0010123610263690352,
    0.04413431137800217,
    -0.02782256528735161,
    0.03749564290046692,
    -0.0016133668832480907,
    -0.014773169532418251,
    -0.024560216814279556,
    -0.013697591610252857,
    0.01728047803044319,
    -0.02652617357671261,
    -0.014459756202995777,
    0.018762068822979927,
    -0.03253801167011261,
    0.043450500816106796,
    -0.026483435183763504,
    0.008654484525322914,
    -0.009580479003489017,
    0.012109155766665936,
    0.011460959911346436,
    0.01911821961402893,
    0.019602585583925247,
    0.0030753694009035826,
    -0.027466414496302605,
    0.012223124504089355,
    -0.006866603624075651,
    -0.032566506415605545,
    0.042994625866413116,
    0.0021582788322120905,
    0.0013328974600881338,
    0.04062977805733681,
    0.016867341473698616,
    0.032110631465911865,
    -0.01280009001493454,
    0.009409526363015175,
    -0.0030913962982594967,
    0.03154078871011734,
    -0.0004075710312463343,
    -0.014758924022316933,
    0.014402772299945354,
    0.026255497708916664,
    -0.016482697799801826,
    0.006026085466146469,
    0.023206841200590134,
    -0.018391670659184456,
    0.008006288670003414,
    -0.030059197917580605,
    0.020329134538769722,
    0.011247268877923489,
    -0.008056149818003178,
    -0.041484542191028595,
    0.014538109302520752,
    -0.02437501773238182,
    0.015172059647738934,
    0.009160219691693783,
    0.010791394859552383,
    -0.01636872999370098,
    -0.0068274266086518764,
    -0.00601540133357048,
    -0.0016187091823667288,
    -0.02491636760532856,
    0.0003109648823738098,
    -0.03444698452949524,
    0.007678629364818335,
    0.013305825181305408,
    0.017921550199389458,
    -0.0011833137832581997,
    0.0309994388371706,
    0.0344184935092926,
    0.03521627187728882,
    0.007571783848106861,
    -0.004312996286898851,
    0.025201288983225822,
    0.006905780173838139,
    0.010435243137180805,
    -0.00975855439901352,
    -0.020314889028668404,
    0.04686955362558365,
    0.0032961834222078323,
    -0.014915630221366882,
    -0.014388525858521461,
    0.026084545999765396,
    0.010043475776910782,
    0.017123769968748093,
    0.006033208686858416,
    0.029204433783888817,
    -0.03612802177667618,
    -0.012401199899613857,
    0.02225235477089882,
    -0.019331911578774452,
    -0.018149487674236298,
    -0.03954707831144333,
    -0.01267899852246046,
    -0.0038499992806464434,
    -0.009316926822066307,
    0.019844768568873405,
    0.010121829807758331,
    0.018548376858234406,
    -0.0065603130497038364,
    0.005737602710723877,
    0.014060866087675095,
    0.0265974048525095,
    0.005153513979166746,
    0.0030415349174290895,
    -0.04091469943523407,
    -0.020400365814566612,
    -0.014559478498995304,
    0.014929876662790775,
    -0.03202515468001366,
    0.04196890816092491,
    -0.029204433783888817,
    0.01806401088833809,
    -0.0019481494091451168,
    -0.022195369005203247,
    -0.00672058155760169,
    -0.0015688479179516435,
    -0.0032089261803776026,
    0.0009095222339965403,
    0.02903348207473755,
    0.007899443618953228,
    -0.015200551599264145,
    -0.02141183614730835,
    -0.006296760868281126,
    0.013120626099407673,
    0.007507676258683205,
    0.007493430282920599,
    -0.018790559843182564,
    0.03136983513832092,
    0.00552391167730093,
    0.014253188855946064,
    0.01318473368883133,
    -0.01253653783351183,
    -0.04213986173272133,
    -0.019317664206027985,
    -0.008483531884849072,
    0.006410729605704546,
    -0.026611650362610817,
    0.01958834007382393,
    -0.004362857434898615,
    0.0015670672291889787,
    -0.002941812388598919,
    0.01569916494190693,
    0.0075575378723442554,
    -0.02689657174050808,
    -0.00378945330157876,
    -0.010933855548501015,
    0.03008769080042839,
    0.018847543746232986,
    -0.01698130927979946,
    -0.005659249611198902,
    -0.011966695077717304,
    -0.01890452951192856,
    -0.0006780236726626754,
    -0.003014823654666543,
    -0.0064570289105176926,
    -0.02948935516178608,
    0.004106428474187851,
    -0.029774276539683342,
    -0.021198146045207977,
    0.00460860226303339,
    0.018548376858234406,
    -0.003395905951038003,
    -0.04615725204348564,
    0.008789822459220886,
    -0.014716185629367828,
    -0.018633853644132614,
    0.0014807004481554031,
    0.011624789796769619,
    0.030287135392427444,
    0.012522291392087936,
    0.016724880784749985,
    0.005794587079435587,
    -0.016739126294851303,
    -0.007269054651260376,
    -0.004854346625506878,
    -0.04154152795672417,
    -0.02202441729605198,
    0.04669860377907753,
    0.009772800840437412,
    0.025386488065123558,
    0.021881956607103348,
    -0.01874782145023346,
    0.011290007270872593,
    -0.01736595295369625,
    0.01242256909608841,
    -0.01653968170285225,
    0.015456981025636196,
    -0.014872891828417778,
    0.01306364219635725,
    0.008526270277798176,
    0.018790559843182564,
    -0.023149855434894562,
    0.023349301889538765,
    0.005192690994590521,
    0.0030059197451919317,
    0.0005783012020401657,
    -0.02102719247341156,
    0.005488296505063772,
    -0.016553927212953568,
    0.013939774595201015,
    -0.033563729375600815,
    0.011297130025923252,
    -0.0053066592663526535,
    0.03145531192421913,
    0.0021814287174493074,
    -0.024702677503228188,
    -0.02094171568751335,
    0.022807950153946877,
    -0.011745881289243698,
    0.0013640607940033078,
    0.014944122172892094,
    -0.02834966965019703,
    0.005659249611198902,
    0.024588709697127342,
    -0.00986540038138628,
    0.02552894875407219,
    -0.0009095222339965403,
    -0.01256502978503704,
    -0.003864245256409049,
    -0.008519147522747517,
    0.04122811183333397,
    0.020614055916666985,
    -0.03612802177667618,
    0.00033166620414704084,
    0.015898609533905983,
    0.011931079439818859,
    -0.016098054125905037,
    0.025400735437870026,
    -0.02025790512561798,
    0.027010539546608925,
    -0.035016827285289764,
    0.04137057438492775,
    -0.024204066023230553,
    0.015798887237906456,
    0.00654962845146656,
    0.037296198308467865,
    -0.009502125903964043,
    -0.0013070765417069197,
    -0.0005947732133790851,
    0.008170118555426598,
    0.01699555665254593,
    -0.020329134538769722,
    0.006072385236620903,
    0.010007861070334911,
    0.01116891484707594,
    0.009345418773591518,
    -0.005449119955301285,
    0.012080663815140724,
    -0.013904159888625145,
    -0.002281151246279478,
    0.030287135392427444,
    0.036156512796878815,
    0.008291210047900677,
    0.016511190682649612,
    0.00042315266910009086,
    0.00493270019069314,
    0.014046620577573776,
    0.04461867734789848,
    -0.05026011914014816,
    -0.021597035229206085,
    -0.02880554459989071,
    -0.02354874648153782,
    -0.008889544755220413,
    -0.009658832103013992,
    -0.016710635274648666,
    -0.02544347196817398,
    -0.008946528658270836,
    0.0246741846203804,
    0.0019730799831449986,
    0.007140840403735638,
    0.006813180632889271,
    0.010955224744975567,
    -0.0034172749146819115,
    -0.019460124894976616,
    -0.025172797963023186,
    0.024574462324380875,
    0.027167247608304024,
    -0.005299536511301994,
    -0.01706678606569767,
    -0.03419055789709091,
    0.027908042073249817,
    -0.012515168637037277,
    0.01918945088982582,
    -0.002639083657413721,
    0.015442734584212303,
    -0.002455665497109294,
    0.008234226144850254,
    -0.0073865847662091255,
    0.008768453262746334,
    0.023904897272586823,
    0.005324467085301876,
    0.016098054125905037,
    0.012486676685512066,
    0.00857613142579794,
    -0.0007243233849294484,
    -0.005933486390858889,
    0.005495419725775719,
    0.055787593126297,
    0.019759291782975197,
    0.0018065791809931397,
    -0.014644955284893513,
    0.007464938331395388,
    -0.028933757916092873,
    0.018391670659184456,
    0.019289173185825348,
    0.0037858919240534306,
    -0.01631174422800541,
    -0.003967529162764549,
    -0.03735318407416344,
    -0.0063466220162808895,
    0.005513227079063654,
    0.030287135392427444,
    -0.005331589840352535,
    -0.0220814011991024,
    -0.03780905902385712,
    -0.011019331403076649,
    0.026027562096714973,
    0.0025037459563463926,
    0.017494168132543564,
    0.01743718422949314,
    0.01448112539947033,
    -0.021853463724255562,
    0.0023523815907537937,
    -0.01614079251885414,
    0.010470857843756676,
    0.009430895559489727,
    -0.010983716696500778,
    -0.004163412377238274,
    0.016169283539056778,
    -0.012208878062665462,
    0.0061685461550951,
    0.014716185629367828,
    0.00021491525694727898,
    -0.00948075670748949,
    0.00487571582198143,
    -0.019061235710978508,
    -0.011817111633718014,
    -0.002888389863073826,
    -0.021468820050358772,
    0.01177437324076891,
    0.0032427606638520956,
    0.0176793672144413,
    0.029289910569787025,
    0.011681773699820042,
    0.02253727614879608,
    -0.014167712070047855,
    -0.014402772299945354,
    -0.02810748666524887,
    -0.01575614884495735,
    -0.0005244332714937627,
    0.02406160533428192,
    -0.06484808772802353,
    0.025386488065123558,
    0.04387788102030754,
    -0.008170118555426598,
    -0.00417409697547555,
    0.03527325764298439,
    0.007685752119868994,
    0.0009553767740726471,
    0.00834107119590044,
    -0.00807751901447773,
    0.008419424295425415,
    0.00019933361909352243,
    -0.020386120304465294,
    0.010698795318603516,
    0.005705549381673336,
    0.0029614008963108063,
    0.011703142896294594,
    0.007212070748209953,
    -0.029660308733582497,
    -0.0007924374076537788,
    0.03518778085708618,
    -0.009238573722541332,
    0.020599810406565666,
    -0.032879918813705444,
    0.0008293880964629352,
    -0.04128509759902954,
    0.0017576082609593868,
    0.002852774690836668,
    0.0012269424041733146,
    -0.017779089510440826,
    -0.010071968659758568,
    0.010955224744975567,
    -0.017807582393288612,
    0.017622383311390877,
    -0.031341344118118286,
    -0.012223124504089355,
    -0.009274188429117203,
    -0.039205171167850494,
    -0.03148380294442177,
    -0.010157444514334202,
    0.0027655174490064383,
    -0.005552404094487429,
    0.02065679430961609,
    0.003182214917615056,
    0.0037110999692231417,
    -0.025500457733869553,
    -0.007529045455157757,
    -0.026853833347558975,
    -0.01608380861580372,
    -0.04208287596702576,
    -0.0024912806693464518,
    0.004280942492187023,
    -0.00601540133357048,
    0.0015991207910701632,
    0.0011833137832581997,
    0.04051581025123596,
    -0.00417053559795022,
    0.012828581966459751,
    -0.008554762229323387,
    -0.013768821954727173,
    0.0007252137875184417,
    0.03860683739185333,
    -0.012123401276767254,
    0.00531734386458993,
    0.014644955284893513,
    -0.002501965267583728,
    0.01981627754867077,
    -0.007586029823869467,
    -0.019859015941619873,
    -0.01245818380266428,
    0.01256502978503704,
    0.018163733184337616,
    -0.0005150843062438071,
    0.018405916169285774,
    0.013768821954727173,
    0.003842876059934497,
    0.030657533556222916,
    -0.03572913259267807,
    -0.0028492130804806948,
    0.015343012288212776,
    0.016112299636006355,
    -0.004797362722456455,
    -0.0066101741977036,
    0.03695429489016533,
    -0.004327242262661457,
    -0.029004989191889763,
    0.0012349557364359498,
    -0.02057131752371788,
    0.014929876662790775,
    0.04835114628076553,
    -0.007721367292106152,
    0.02917594276368618,
    -0.0023256700951606035,
    -0.008177241310477257,
    -0.03282293304800987,
    -0.021511558443307877,
    0.028278440237045288,
    -0.0060225240886211395,
    -0.009744308888912201,
    -0.006635104771703482,
    0.0154997194185853,
    0.01889028213918209,
    -0.010200182907283306,
    0.009081866592168808,
    -0.00774985970929265,
    0.006859480403363705,
    0.02819296345114708,
    0.005919239949434996,
    -0.008262718096375465,
    -0.0011396852787584066,
    -0.006061700638383627,
    -0.024973353371024132,
    -0.03404809534549713,
    -0.0007470280397683382,
    0.004038759507238865,
    0.02842090092599392,
    0.010356889106333256,
    -0.009167343378067017,
    -0.026839587837457657,
    -0.023719698190689087,
    -0.009131727740168571,
    -8.302785136038437e-05,
    0.028135979548096657,
    0.01024292130023241,
    0.007771228440105915,
    0.03077150136232376,
    0.04501756653189659,
    -0.00113790447358042,
    0.01569916494190693,
    -0.010378258302807808,
    0.010420996695756912,
    -0.019915999844670296,
    0.011382605880498886,
    -0.016041070222854614,
    0.008483531884849072,
    -0.03658389672636986,
    -0.005894309375435114,
    0.007023310288786888,
    0.0020532142370939255,
    -0.0023132048081606627,
    -0.004629971459507942,
    0.024631446227431297,
    0.019531356170773506,
    -0.008120257407426834,
    -0.0056414417922496796,
    -0.03162626549601555,
    -0.00018063565948978066,
    0.004943384788930416,
    0.008141626603901386,
    0.010499349795281887,
    -0.05242552235722542,
    -0.004516002722084522,
    0.02910471148788929,
    -0.011418221518397331,
    0.005947732366621494,
    0.0002976092218887061,
    0.0015385750448331237,
    -0.010492227040231228,
    0.011439590714871883,
    0.023662714287638664,
    0.019075481221079826,
    0.006927149370312691,
    0.012358461506664753,
    -0.025842363014817238,
    -0.01683884859085083,
    -0.0008244910277426243,
    -0.004117113072425127,
    0.03994596749544144,
    -0.001763841020874679,
    0.015870116651058197,
    -0.003020165953785181,
    0.011218776926398277,
    0.016183530911803246,
    0.003541928017511964,
    0.026554666459560394,
    -0.02048584260046482,
    -0.020386120304465294,
    -0.030572056770324707,
    -0.02551470324397087,
    -0.0034137133043259382,
    0.007529045455157757,
    -0.0011957790702581406,
    -0.0011414659675210714,
    0.02195318602025509,
    -0.032879918813705444,
    -0.015585195273160934,
    0.004031636286526918,
    -0.008739961311221123,
    0.02552894875407219,
    0.017195001244544983,
    0.037524137645959854,
    0.024959105998277664,
    -0.006863041780889034,
    -0.013241717591881752,
    -0.01268612127751112,
    -0.01074153371155262,
    -0.013654853217303753,
    0.025500457733869553,
    0.025429226458072662,
    -0.011838479898869991,
    -0.04723995178937912,
    -0.017195001244544983,
    -0.007657260168343782,
    -0.012016556225717068,
    -0.012864196673035622,
    0.028292685747146606,
    0.001495836884714663,
    0.020357627421617508,
    -0.024432001635432243,
    0.030230151489377022,
    -0.016881586983799934,
    0.03726770728826523,
    -0.003971090540289879,
    -0.019260680302977562,
    0.02468843199312687,
    -0.01622626930475235,
    -0.012543660588562489,
    0.020742271095514297,
    0.0198020301759243,
    0.0166963879019022,
    0.02598482370376587,
    -0.04618574306368828,
    -0.011510821059346199,
    -0.017180755734443665,
    0.008533393032848835,
    0.008547639474272728,
    0.017323216423392296,
    0.0057554105296730995,
    0.003217830089852214,
    -0.01729472354054451,
    0.025842363014817238,
    -0.001634735963307321,
    -0.013840052299201488,
    0.015570949763059616,
    0.01691007986664772,
    0.04233930632472038,
    -0.009608970955014229,
    -0.014352911151945591,
    -0.01394689828157425,
    -0.012237370014190674,
    0.021910449489951134,
    -0.0047154477797448635,
    -0.017736351117491722,
    -0.024360772222280502,
    -0.0003472478420007974,
    -0.031797219067811966,
    -0.0009687324636615813,
    -0.02812173217535019,
    -0.02148306742310524,
    -0.00807751901447773,
    0.00987252313643694,
    -0.00487571582198143,
    -0.0159128550440073,
    -0.009722939692437649,
    0.022109894081950188,
    -0.015798887237906456,
    -0.03025864250957966,
    0.005310220643877983,
    -0.015813132748007774,
    0.007158647757023573,
    0.02931840345263481,
    0.015570949763059616,
    -0.021055685356259346,
    0.02963181585073471,
    -0.010470857843756676,
    0.03253801167011261,
    -0.004800924099981785,
    0.005100091453641653,
    -0.04450470954179764,
    -0.008747084066271782,
    -0.026782602071762085,
    -0.006898656953126192,
    0.022750966250896454,
    4.972210808773525e-05,
    -0.0528813935816288,
    -0.017038295045495033,
    0.01584162563085556,
    0.03877779096364975,
    -0.006763319484889507,
    -0.019175203517079353,
    0.0051962523721158504,
    0.0014976175734773278,
    -0.0005279948236420751,
    0.003914106637239456,
    -0.008362440392374992,
    0.014616463333368301,
    -0.020329134538769722,
    -0.004106428474187851,
    0.00428806571289897,
    -0.017992781475186348,
    0.008768453262746334,
    -0.0029311280231922865,
    -0.003914106637239456,
    0.004893523640930653,
    -0.03649841994047165,
    0.010656056925654411,
    0.0034137133043259382,
    -0.015485472977161407,
    0.005762533284723759,
    0.0248308926820755,
    0.01592710055410862,
    -0.02209564670920372,
    -0.02201017178595066,
    0.03481738269329071,
    0.019673816859722137,
    -0.004637094214558601,
    0.036840323358774185,
    0.023662714287638664,
    0.024047357961535454,
    -0.003150161122903228,
    -0.0070197489112615585,
    -0.01374745275825262,
    -0.04176946356892586,
    -0.00804190430790186,
    -0.028834035620093346,
    -0.023149855434894562,
    -0.016340237110853195,
    0.0373246930539608,
    0.022822197526693344,
    -0.02018667384982109,
    -0.03655540198087692,
    -0.03436151146888733,
    0.004918454214930534,
    -0.029745783656835556,
    -0.01218750886619091,
    0.024204066023230553,
    -0.0028901705518364906,
    0.015485472977161407,
    -0.0036309659481048584,
    0.006660035345703363,
    -0.002826063195243478,
    0.022594260051846504,
    -0.007949304766952991,
    0.0014397429767996073,
    0.017166508361697197,
    0.01131137553602457,
    0.03837890177965164,
    -0.002785105723887682,
    -0.03909120336174965,
    -0.008405178785324097,
    0.006197038572281599,
    0.011845603585243225,
    0.020386120304465294,
    0.017351707443594933,
    0.01575614884495735,
    -0.011532190255820751,
    -0.025585932657122612,
    0.007379462011158466,
    -0.006535382475703955,
    0.00763589097186923,
    0.01964532397687435,
    -0.01089111715555191,
    -0.002236632164567709,
    0.0010444147046655416,
    0.019260680302977562,
    -0.006054577883332968,
    -0.025856608524918556,
    0.0017264450434595346,
    -0.027409430593252182,
    0.007329600863158703,
    -0.01398251298815012,
    -0.004619286861270666,
    0.00710522523149848,
    -0.006047454662621021,
    0.004946946166455746,
    0.000192433173651807,
    0.013035150244832039,
    0.028891021385788918,
    0.0251443050801754,
    -0.007856705226004124,
    -0.03601405397057533,
    0.018861791118979454,
    -0.03171174228191376,
    -0.008497778326272964,
    0.010876870714128017,
    -0.010292782448232174,
    -0.010527842678129673,
    -0.010178813710808754,
    0.041484542191028595,
    -0.000990991946309805,
    -0.001871576881967485,
    0.008590377867221832,
    -0.014580847695469856,
    -0.007628768216818571,
    -0.0004937152261845767,
    -0.02621276117861271,
    -0.00845503993332386,
    0.0035152165219187737,
    -0.01115466933697462,
    0.005491858348250389,
    0.008889544755220413,
    -0.005331589840352535,
    0.00019443653582129627,
    -0.032481029629707336,
    0.014787415973842144,
    -0.009822661988437176,
    -0.02589934691786766,
    -0.022950410842895508,
    -0.005552404094487429,
    -0.013198979198932648,
    -0.003175091929733753,
    0.016397221013903618,
    0.1528317928314209,
    0.026497680693864822,
    0.0238479133695364,
    0.008362440392374992,
    -0.0007599385571666062,
    0.002081706188619137,
    0.01348390057682991,
    -0.011902587488293648,
    -0.01203792542219162,
    0.007628768216818571,
    0.0020354066509753466,
    -0.006702773738652468,
    0.0029720854945480824,
    0.0029008551500737667,
    0.0064570289105176926,
    0.009893892332911491,
    -0.03664087876677513,
    -0.023363547399640083,
    -0.0186623465269804,
    0.0050965300761163235,
    -0.011375483125448227,
    -0.020329134538769722,
    -0.017508413642644882,
    -0.01554245688021183,
    0.0027370252646505833,
    -0.001132562174461782,
    -0.03296539559960365,
    -0.00869010016322136,
    0.019217941910028458,
    0.02498759888112545,
    -0.011233022436499596,
    -0.006449906155467033,
    -0.0027138753794133663,
    -0.00368616939522326,
    -0.025728393346071243,
    -0.006656473968178034,
    0.005897871218621731,
    -0.00525323674082756,
    0.014495371840894222,
    0.009409526363015175,
    -0.020841993391513824,
    -0.03823643922805786,
    -0.006004716735333204,
    -0.024018866941332817,
    -0.010171690955758095,
    -0.01812099479138851,
    -0.010064844973385334,
    0.0044234031811356544,
    0.01010046061128378,
    0.020471595227718353,
    -0.01575614884495735,
    -0.015513964928686619,
    0.019146712496876717,
    0.010392504744231701,
    -0.023206841200590134,
    -0.01606956124305725,
    -0.018263455480337143,
    0.01974504627287388,
    0.005267482716590166,
    0.02218112349510193,
    -0.013270209543406963,
    0.033791668713092804,
    -0.01398251298815012,
    0.015257536433637142,
    -0.05530322715640068,
    0.000890824303496629,
    -0.015214798040688038,
    0.006054577883332968,
    -0.005434873979538679,
    -0.01829194836318493,
    -0.018177978694438934,
    -0.018705083057284355,
    0.004309434909373522,
    -0.011033577844500542,
    -0.013961143791675568,
    -0.029204433783888817,
    0.02931840345263481,
    -0.004605040419846773,
    -0.0038784912321716547,
    0.0447896309196949,
    0.0028100362978875637,
    0.02201017178595066,
    -0.028064748272299767,
    0.007935058325529099,
    -0.013548008166253567,
    -0.01675337366759777,
    0.021824972704052925,
    -0.03364920616149902,
    -0.024859383702278137,
    -0.015328766778111458,
    0.0050965300761163235,
    -0.022807950153946877,
    0.0006931601092219353,
    -0.019759291782975197,
    0.015300273895263672,
    0.025642918422818184,
    0.008561884984374046,
    0.0008124709129333496,
    -0.009288434870541096,
    -0.004562302492558956,
    -0.030600547790527344,
    0.07197112590074539,
    0.005776779726147652,
    0.019702307879924774,
    -0.028677329421043396,
    -0.016254760324954987,
    -0.018776314333081245,
    0.030344119295477867,
    0.0020585565362125635,
    -0.017251985147595406,
    0.008519147522747517,
    -0.03778056427836418,
    0.0029079781379550695,
    -0.0044234031811356544,
    0.00818436499685049,
    0.0037395921535789967,
    -0.011396852321922779,
    -0.019303418695926666,
    0.001596449757926166,
    0.009523495100438595,
    -0.020813502371311188,
    -0.008561884984374046,
    0.009808416478335857,
    -0.006442782934755087,
    -0.016397221013903618,
    -0.01474467758089304,
    0.005303097888827324,
    0.010200182907283306,
    -0.01267899852246046,
    -0.002420050324872136,
    0.015399997122585773,
    -0.029574831947684288,
    0.027024786919355392,
    0.013904159888625145,
    -0.021582789719104767,
    -0.01645420491695404,
    -0.023634223267436028,
    -0.000653983443044126,
    -0.011240145191550255,
    0.030116181820631027,
    -0.010527842678129673,
    0.02011544443666935,
    0.03892024978995323,
    -0.0070197489112615585,
    0.02842090092599392,
    -0.003645211923867464,
    0.012472430244088173,
    -0.0005124131566844881,
    0.010143199004232883,
    0.005730479955673218,
    0.0032391990534961224,
    0.0037645227275788784,
    0.012436815537512302,
    -0.015257536433637142,
    0.01439564861357212,
    -0.029973721131682396,
    -0.0225515216588974,
    -0.016197776421904564,
    0.007899443618953228,
    -0.021297868341207504,
    -0.0382649302482605,
    0.006104439031332731,
    0.009623217396438122,
    -0.0020656795240938663,
    -0.009537740610539913,
    -0.016240514814853668,
    -0.1814378947019577,
    0.01988750696182251,
    0.012999534606933594,
    -0.04906344786286354,
    0.013526638969779015,
    0.008946528658270836,
    0.008583254180848598,
    -0.004163412377238274,
    0.0011334526352584362,
    -0.008162995800375938,
    0.01394689828157425,
    0.01911821961402893,
    -0.008091765455901623,
    -0.021824972704052925,
    -0.0022900549229234457,
    0.0067953732796013355,
    -0.034247539937496185,
    0.006745512131601572,
    0.025813870131969452,
    0.02048584260046482,
    0.027452167123556137,
    -0.024859383702278137,
    0.01585587114095688,
    0.001307966886088252,
    0.005459804553538561,
    -0.0061364928260445595,
    -0.014488248154520988,
    -0.003223172388970852,
    -0.025942085310816765,
    0.0037217845674604177,
    -0.0024930613581091166,
    0.01126863807439804,
    0.027309706434607506,
    0.009523495100438595,
    0.026340974494814873,
    0.006143615581095219,
    0.023335054516792297,
    -0.016810357570648193,
    -0.017565399408340454,
    0.023862158879637718,
    0.009722939692437649,
    0.02293616533279419,
    -0.008469285443425179,
    -0.02787954919040203,
    0.001423716195859015,
    0.011952448636293411,
    0.015442734584212303,
    -0.01535725872963667,
    -0.010869747959077358,
    -0.034475479274988174,
    0.03404809534549713,
    -0.02323533222079277,
    -0.0010132513707503676,
    0.0017282258486375213,
    0.010997962206602097,
    -0.007457815110683441,
    0.0008841464295983315,
    0.021767988801002502,
    0.011767249554395676,
    -0.02863459102809429,
    -0.02134060673415661,
    0.001588436309248209,
    0.02162552811205387,
    -0.014124973677098751,
    -0.018092503771185875,
    -0.008426547981798649,
    -0.015186306089162827,
    0.013163364492356777,
    -0.020471595227718353,
    0.005328028462827206,
    0.03914818912744522,
    0.01332719437777996,
    -0.0020282836630940437,
    0.009929507970809937,
    0.008234226144850254,
    0.025571687147021294,
    -0.008013411425054073,
    0.023420531302690506,
    0.013512393459677696,
    -0.014659201726317406,
    -0.03199666365981102,
    0.032481029629707336,
    0.013234594836831093,
    -0.017095278948545456,
    0.04199739918112755,
    -0.00019532690930645913,
    0.005488296505063772,
    0.017494168132543564,
    -0.003604254452511668,
    -0.012429691851139069,
    0.005160637199878693,
    -0.009851153939962387,
    0.03262348845601082,
    -0.0064142909832298756,
    0.02926141768693924,
    0.003817945485934615,
    -0.015442734584212303,
    0.005092968232929707,
    0.01002210658043623,
    -0.01752266101539135,
    0.011140422895550728,
    0.016098054125905037,
    0.01333431713283062,
    0.0035383664071559906,
    0.036669373512268066,
    0.002421831013634801,
    -0.027523398399353027,
    0.009644586592912674,
    0.007023310288786888,
    -0.01950286328792572,
    -0.010926731862127781,
    0.0020603372249752283,
    0.028050502762198448,
    0.007450692355632782,
    0.0059121171943843365,
    0.052368536591529846,
    0.009922384284436703,
    -0.014830154366791248,
    0.015556703321635723,
    -0.00757890660315752,
    0.028064748272299767,
    0.01851988583803177,
    -0.0032089261803776026,
    0.01759389042854309,
    -0.047724317759275436,
    -0.01474467758089304,
    -0.09208656847476959,
    -0.013840052299201488,
    0.011254391632974148,
    -0.006357306614518166,
    -0.010485104285180569,
    -0.007358092814683914,
    -0.024503232911229134,
    0.016411466524004936,
    0.005167760420590639,
    -0.020086951553821564,
    -0.022437553852796555,
    0.012942550703883171,
    -0.011995187029242516,
    0.0014513179194182158,
    -0.014452633447945118,
    -0.004045882727950811,
    -0.022736720740795135,
    -0.010648934170603752,
    -0.022907672449946404,
    0.0019784222822636366,
    -0.013369932770729065,
    0.003703976981341839,
    -0.0013141995295882225,
    0.01857686974108219,
    0.015029598958790302,
    0.017536906525492668,
    -0.029118956997990608,
    0.027295460924506187,
    0.017195001244544983,
    -0.008177241310477257,
    0.010869747959077358,
    -0.04327954724431038,
    -0.0028901705518364906,
    -0.0032160491682589054,
    -0.006367991212755442,
    -0.00819148775190115,
    -0.02765161357820034,
    -0.031113406643271446,
    0.030344119295477867,
    -0.02735244482755661,
    -0.0023132048081606627,
    -0.0032018031924962997,
    0.03054356388747692,
    -0.011874095536768436,
    -0.001279474701732397,
    -0.0006504219491034746,
    -0.03336428478360176,
    0.026568911969661713,
    0.02323533222079277,
    -0.025728393346071243,
    -0.022124139592051506,
    0.003119888249784708,
    -0.003857122268527746,
    -0.01752266101539135,
    0.006567436270415783,
    -0.0032071454916149378,
    -0.007083856035023928,
    -0.0004625519213732332,
    0.0287200678139925,
    -0.022451799362897873,
    -0.009616093710064888,
    0.003513435833156109,
    -0.019175203517079353,
    0.020172428339719772,
    -0.021383343264460564,
    0.0036416505463421345,
    -0.004918454214930534,
    -0.020457349717617035,
    0.049091942608356476,
    -0.0063359374180436134,
    -0.010713040828704834,
    -4.543715840554796e-05,
    -0.012735982425510883,
    0.009886769577860832,
    -0.01652543619275093,
    0.007699998561292887,
    -0.009680201299488544,
    0.010990839451551437,
    0.0033976866398006678,
    -0.009658832103013992,
    -0.002824282506480813,
    0.011610543355345726,
    -0.029147449880838394,
    -0.0012598864268511534,
    0.022879181429743767,
    0.031056422740221024,
    0.016411466524004936,
    0.023890651762485504,
    0.0304865799844265,
    -0.028221456333994865,
    0.005794587079435587,
    -0.015214798040688038,
    0.04387788102030754,
    -0.02079925499856472,
    -0.010335520841181278,
    0.014459756202995777,
    0.006912903394550085,
    -0.009808416478335857,
    -0.02376243658363819,
    0.009587601758539677,
    -0.05239702761173248,
    0.0043806652538478374,
    -0.07476335018873215,
    0.027252722531557083,
    0.007785474881529808,
    0.004448333755135536,
    0.005210498347878456,
    -0.02253727614879608,
    -0.008925160393118858,
    -0.012529414147138596,
    0.00557733466848731,
    0.013042272999882698,
    -0.04655614122748375,
    -0.0005925472942180932,
    -0.013647730462253094,
    -0.005605826620012522,
    -0.007244124077260494,
    -0.01432441920042038,
    0.03678334131836891,
    -0.006588805466890335,
    0.06536094844341278,
    0.010862625204026699,
    -0.017508413642644882,
    -0.002482376992702484,
    0.030059197917580605,
    0.003910544794052839,
    -0.03122737444937229,
    -0.009495002217590809,
    -0.019175203517079353,
    0.030458087101578712,
    0.018306193873286247,
    -0.03259499743580818,
    0.0044910721480846405,
    -0.009687324054539204,
    -0.01154643576592207,
    0.00834107119590044,
    0.005897871218621731,
    0.02406160533428192,
    0.011532190255820751,
    -0.019716555252671242,
    0.02544347196817398,
    0.003470697673037648,
    -0.005157075822353363,
    0.003333579283207655,
    0.020970208570361137,
    -0.021654019132256508,
    -0.008811191655695438,
    -0.01736595295369625,
    0.017921550199389458,
    -0.015955593436956406,
    0.036840323358774185,
    0.004295188933610916,
    0.03071451745927334,
    0.007233439479023218,
    -0.031284358352422714,
    -0.022423306480050087,
    0.01880480721592903,
    -0.018192226067185402,
    0.016212021932005882,
    0.0048828390426933765,
    -0.016254760324954987,
    -0.0016391879180446267,
    0.007870950736105442,
    -0.010762901976704597,
    0.002744148252531886,
    0.005648565012961626,
    0.0003209816641174257,
    -0.01743718422949314,
    -0.04205438494682312,
    -0.004462580196559429,
    -0.0009954437846317887,
    -0.008739961311221123,
    -0.03672635555267334,
    -0.013141995295882225,
    0.03530174866318703,
    -0.005000369157642126,
    0.03296539559960365,
    -0.017650874331593513,
    -0.00933829601854086,
    -0.010164567269384861,
    -0.011582051403820515,
    0.01782182790338993,
    0.018947266042232513,
    -0.004273819737136364,
    -0.031284358352422714,
    0.025030337274074554,
    0.03641294315457344,
    -0.010599073022603989,
    -0.04199739918112755,
    0.004523125942796469,
    -0.014053743332624435,
    0.017109524458646774,
    -0.015186306089162827,
    -0.006702773738652468,
    0.019018497318029404,
    0.027637366205453873,
    0.015086582861840725,
    0.008946528658270836,
    0.0005003930418752134,
    -0.0163829755038023,
    0.026483435183763504,
    0.017394445836544037,
    -8.547639299649745e-05,
    -0.010193060152232647,
    0.019716555252671242,
    -0.017251985147595406,
    -0.01515781320631504,
    -0.009060497395694256,
    -0.002922224113717675,
    -0.02720998413860798,
    0.0004336146230343729,
    0.00975855439901352,
    0.011418221518397331,
    -0.024788154289126396,
    -0.018705083057284355,
    0.011845603585243225,
    -0.004950507543981075,
    -0.00024262830265797675,
    0.002813597908243537,
    -0.011204530484974384,
    -0.008262718096375465,
    -0.0004238204564899206,
    0.009267065674066544,
    0.03809398040175438,
    0.03154078871011734,
    -0.01089111715555191,
    0.013576500117778778,
    0.03216761723160744,
    0.024731170386075974,
    0.014495371840894222,
    0.022124139592051506,
    -0.006649351213127375,
    -0.01867659203708172,
    0.009687324054539204,
    0.008853930048644543,
    -0.021069930866360664,
    -0.016639403998851776,
    -0.007870950736105442,
    -0.015471227467060089,
    -0.01283570472151041,
    -0.0015501499874517322,
    0.0862741693854332,
    0.020742271095514297,
    0.0002802468079607934,
    0.003565077902749181,
    -0.011097684502601624,
    0.008412301540374756,
    0.0054170661605894566,
    -0.00558089604601264,
    -0.02490212209522724,
    -0.023335054516792297,
    -0.004986122716218233,
    -0.01782182790338993,
    -0.015955593436956406,
    0.002963181585073471,
    -0.0023648468777537346,
    0.02743792161345482,
    -0.02369120717048645,
    0.017779089510440826,
    -0.03205364570021629,
    0.008768453262746334,
    0.020400365814566612,
    0.016197776421904564,
    -0.0067846886813640594,
    -0.01568491756916046,
    -0.028620345517992973,
    0.0026194953825324774,
    0.025785379111766815,
    -0.008761330507695675,
    0.02065679430961609,
    -0.04154152795672417,
    0.01575614884495735,
    0.02269398234784603,
    -0.005210498347878456,
    -0.03205364570021629,
    0.004462580196559429,
    0.004031636286526918,
    -0.021354852244257927,
    -0.021540051326155663,
    -0.002270466648042202,
    0.0036541158333420753,
    -0.0015973401023074985,
    -0.014815907925367355,
    -0.036071036010980606,
    -0.030344119295477867,
    0.012465307489037514,
    0.001114754588343203,
    0.011517943814396858,
    -0.028819790109992027,
    -0.03436151146888733
  ]
}
{
  "classifiers": [
    "development status :: 2 - pre-alpha",
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "natural language :: english",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9"
  ],
  "description": "eth-tester: tools for testing ethereum applications.\n# eth-tester\n\n[![join the conversation on discord](https://img.shields.io/discord/809793915578089484?color=blue&label=chat&logo=discord&logocolor=white)](https://discord.gg/ghryrvpb84)\n[![build status](https://circleci.com/gh/ethereum/eth-tester.svg?style=shield)](https://circleci.com/gh/ethereum/eth-tester)\n[![pypi version](https://badge.fury.io/py/eth-tester.svg)](https://badge.fury.io/py/eth-tester)\n[![python versions](https://img.shields.io/pypi/pyversions/eth-tester.svg)](https://pypi.python.org/pypi/eth-tester)\n\ntools for testing ethereum applications\n\nread more in the documentation below. [view the change log](https://github.com/ethereum/eth-tester/blob/master/changelog.rst).\n\n## quick start\n\n```sh\npython -m pip install eth-tester\n```\n\n```python\n>>> from eth_tester import ethereumtester\n>>> t = ethereumtester()\n>>> t.get_accounts()\n('0x7e5f4552091a69125d5dfcb7b8c2659029395bdf',\n '0x2b5ad5c4795c026514f8317c7a215e218dccd6cf',\n '0x6813eb9362372eef6200f3b1dbc3f819671cba69',\n '0x1eff47bc3a10a45d4b230b5d10e37751fe6aa718',\n '0xe1ab8145f7e55dc933d51a18c793f901a3a0b276',\n '0xe57bfe9f44b819898f47bf37e5af72a0783e1141',\n '0xd41c057fd1c78805aac12b0a94a405c0461a6fbb',\n '0xf1f6619b38a98d6de0800f1defc0a6399eb6d30c',\n '0xf7edc8fa1ecc32967f827c9043fcae6ba73afa5c',\n '0x4cceba2d7d2b4fdce4304d3e09a1fea9fbeb1528')\n\n>>> t.get_balance('0x7e5f4552091a69125d5dfcb7b8c2659029395bdf')\n1000000000000000000000000\n\n>>> t.send_transaction({\n...     'from': '0x7e5f4552091a69125d5dfcb7b8c2659029395bdf',\n...     'to': '0x2b5ad5c4795c026514f8317c7a215e218dccd6cf',\n...     'gas': 30000,\n...     'value': 1,\n...     'max_fee_per_gas': 1000000000,\n...     'max_priority_fee_per_gas': 1000000000,\n...     'chain_id': 131277322940537,\n...     'access_list': (\n...         {\n...             'address': '0xde0b295669a9fd93d5f28d9ec85e40f4cb697bae',\n...             'storage_keys': (\n...                 '0x0000000000000000000000000000000000000000000000000000000000000003',\n...                 '0x0000000000000000000000000000000000000000000000000000000000000007',\n...             )\n...         },\n...         {\n...             'address': '0xbb9bc244d798123fde783fcc1c72d3bb8c189413',\n...             'storage_keys': ()\n...         },\n...     )\n... })\n'0xc20b90af87bc65c3d748cf0a1fa54f3a86ffc94348e0fd91a70f1c5ba6ef4109'\n\n>>> t.get_transaction_by_hash('0xc20b90af87bc65c3d748cf0a1fa54f3a86ffc94348e0fd91a70f1c5ba6ef4109')\n{'type': '0x2',\n 'hash': '0xc20b90af87bc65c3d748cf0a1fa54f3a86ffc94348e0fd91a70f1c5ba6ef4109',\n 'nonce': 0,\n 'block_hash': '0x28b95514984b0abbd91d88f1a542eaeeb810c24e0234e09891b7d6b3f94f47ed',\n 'block_number': 1,\n 'transaction_index': 0,\n 'from': '0x7e5f4552091a69125d5dfcb7b8c2659029395bdf',\n 'to': '0x2b5ad5c4795c026514f8317c7a215e218dccd6cf',\n 'value': 1,\n 'gas': 30000,\n 'data': '0x',\n 'r': 60071646517429056848243893841817235885102606421189844318110381014348740252962,\n 's': 55731679314783756278323646144996847004593793888590884914350251538533006990589,\n 'v': 0,\n 'chain_id': 131277322940537,\n 'max_fee_per_gas': 1000000000,\n 'max_priority_fee_per_gas': 1000000000,\n 'access_list': ({'address': '0xde0b295669a9fd93d5f28d9ec85e40f4cb697bae',\n   'storage_keys': ('0x0000000000000000000000000000000000000000000000000000000000000003',\n    '0x0000000000000000000000000000000000000000000000000000000000000007')},\n  {'address': '0xbb9bc244d798123fde783fcc1c72d3bb8c189413',\n   'storage_keys': ()}),\n 'gas_price': 1000000000}\n\n\n>>> t.get_transaction_receipt('0xc20b90af87bc65c3d748cf0a1fa54f3a86ffc94348e0fd91a70f1c5ba6ef4109')\n{'transaction_hash': '0xc20b90af87bc65c3d748cf0a1fa54f3a86ffc94348e0fd91a70f1c5ba6ef4109',\n 'transaction_index': 0,\n 'block_number': 1,\n 'block_hash': '0x28b95514984b0abbd91d88f1a542eaeeb810c24e0234e09891b7d6b3f94f47ed',\n 'cumulative_gas_used': 29600,\n 'gas_used': 29600,\n 'effective_gas_price': 1000000000,\n 'contract_address': none,\n 'logs': (),\n 'type': '0x2',\n 'status': 1}\n```\n\n# documentation\n\n## input and output data formats\n\nthe ethereum tester library strictly enforces the following input formats and\ntypes.\n\n- hexadecimal values **must** be text (not byte) strings.  the `0x` prefix is optional.\n- any address which contains mixed-case alpha characters will be validated as a checksummed address as specified by [eip-55](https://github.com/ethereum/eips/blob/master/eips/eip-55.md)\n- 32-byte hashes **must** be hexadecimal encoded.\n- numeric values **must** be in their integer representation.\n\nsimilarly, ethereum tester ensures that return values conform to similar rules.\n\n- 32-byte hashes will be returned in their hexadecimal encoded representation.\n- addresses will be returned in their hexadecimal representation and eip55 checksummed.\n- numeric values will be returned as integers.\n\n## block numbers\n\n<a id=\"block-numbers\"></a>\n\nany `block_number` parameter will accept the following string values.\n\n- `'latest'`: for the latest mined block.\n- `'pending'`: for the current un-mined block.\n- `'earliest'`: for the genesis block.\n- `'safe'`: for the last block that has passed 2/3 of attestations post-merge.\n- `'finalized'`: for the last finalized block post-merge.\n\n> note: these **must** be text strings (not byte strings)\n\n## `eth_tester.ethereumtester`\n\n### api\n\n### instantiation\n\n- `eth_tester.ethereumtester(backend=none, validator=none, normalizer=none, auto_mine_transactions=true, fork_blocks=none)`\n\nthe `ethereumtester` object is the sole api entrypoint.  instantiation of this\nobject accepts the following parameters.\n\n- `backend`: the chain backend being used.  see the [chain backends](#backends)\n- `validator`: the validator being used.  see the [validators](#validation)\n- `normalizer`: the normalizer being used.  see the [normalizers](#normalization)\n- `auto_mine_transactions`: if *truthy* transactions will be automatically mined at the time they are submitted.  see [`enable_auto_mine_transactions`](#api-enable_auto_mine_transactions) and [`disable_auto_mine_transactions`](#api-disable_auto_mine_transactions).\n- `fork_blocks`: configures which block numbers the various network hard fork rules will be activated.  see [fork-rules](#fork-rules)\n\n```python\n>>> from eth_tester import ethereumtester\n>>> t = ethereumtester()\n>>> t\n<eth_tester.main.ethereumtester at 0x102255710>\n```\n\n### fork rules\n\n<a id=\"fork-rules\"></a>\n\nethereum tester uses the paris (pos) fork rules, starting at block 0.\n\n### time travel\n\n<a id=\"time-travel\"></a>\n\nthe chain can only time travel forward in time.\n\n<a id=\"api-time_travel\"></a>\n\n#### `ethereumtester.time_travel(timestamp)`\n\nthe `timestamp` must be an integer, strictly greater than the current timestamp\nof the latest block.\n\n> note: time traveling will result in a new block being mined.\n\n### mining\n\nmanually mining blocks can be done with the following api.  the `coinbase`\nparameter of these methods **must** be a hexadecimal encoded address.\n\n<a id=\"api-mine_blocks\"></a>\n\n#### `ethereumtester.mine_blocks(num_blocks=1, coinbase=zero_address)`\n\nmines `num_blocks` new blocks, returning an iterable of the newly mined block hashes.\n\n<a id=\"api-mine_block\"></a>\n\n#### `ethereumtester.mine_block(coinbase=zero_address)`\n\nmines a single new block, returning the mined block's hash.\n\n<a id=\"api-auto_mine_transactions\"></a>\n\n#### auto-mining transactions\n\nby default, all transactions are mined immediately.  this means that each transaction you send will result in a new block being mined, and that all blocks will only ever have at most a single transaction.  this behavior can be controlled with the following methods.\n\n<a id=\"api-enable_auto_mine_transactions\"></a>\n\n#### `ethereumtester.enable_auto_mine_transactions()`\n\nturns on auto-mining of transactions.\n\n<a id=\"api-disable_auto_mine_transactions\"></a>\n\n#### `ethereumtester.disable_auto_mine_transactions()`\n\nturns **off** auto-mining of transactions.\n\n### accounts\n\nthe following api can be used to interact with account data.  the `account`\nparameter in these methods **must** be a hexadecimal encode address.\n\n<a id=\"api-get_accounts\"></a>\n`ethereumtester.get_accounts()`\n\nreturns an iterable of the accounts that the tester knows about.  all accounts\nin this list will be eip55 checksummed.\n\n```python\n>>> t.get_accounts()\n('0x82a978b3f5962a5b0957d9ee9eef472ee55b42f1',\n '0x7d577a597b2742b498cb5cf0c26cdcd726d39e6e',\n ...\n '0x90f0b1ebbba1c1936aff7aaf20a7878ff9e04b6c')\n```\n\n<a id=\"api-add_account\"></a>\n\n#### `ethereumtester.add_account(private_key, password=none)`\n\nadds a new account for the given private key.  returns the hex encoded address\nof the added account.\n\n```python\n>>> t.add_account('0x58d23b55bc9cdce1f18c2500f40ff4ab7245df9a89505e9b1fa4851f623d241d')\n'0xdc544d1aa88ff8bbd2f2aec754b1f1e99e1812fd'\n```\n\nby default, added accounts are unlocked and do not have a password.  if you\nwould like to add an account which has a password, you can supply the password\nas the second parameter.\n\n```python\n>>> t.add_account('0x58d23b55bc9cdce1f18c2500f40ff4ab7245df9a89505e9b1fa4851f623d241d', 'my-secret')\n'0xdc544d1aa88ff8bbd2f2aec754b1f1e99e1812fd'\n```\n\n<a id=\"api-unlock_account\"></a>\n\n#### `ethereumtester.unlock_account(account, password, unlock_seconds=none)`\n\nunlocks the given account if the provided password matches.\n\nraises a `validationerror` if:\n\n- the account is not known.\n- the password does not match.\n- the account was created without a password.\n\n```python\n>>> t.unlock_account('0xdc544d1aa88ff8bbd2f2aec754b1f1e99e1812fd', 'my-secret')\n```\n\nby default, accounts will be unlocked indefinitely.  you can however unlock an\naccount for a specified amount of time by providing the desired duration in\nseconds.\n\n```python\n# unlock for 1 hour.\n>>> t.unlock_account('0xdc544d1aa88ff8bbd2f2aec754b1f1e99e1812fd', 'my-secret', 60 * 60)\n```\n\n<a id=\"api-lock_account\"></a>\n\n#### `ethereumtester.lock_account(account)`\n\nlocks the provided account.\n\nraises a `validationerror` if:\n\n- the account is not known\n- the account does not have a password.\n\n<a id=\"api-get_balance\"></a>\n\n#### `ethereumtester.get_balance(account) -> integer`\n\nreturns the balance, in wei, for the provided account.\n\n```python\n>>> t.get_balance('0x82a978b3f5962a5b0957d9ee9eef472ee55b42f1')\n1000004999999999999999999\n```\n\n<a id=\"api-get_nonce\"></a>\n\n#### `ethereumtester.get_nonce(account) -> integer`\n\nreturns the nonce for the provided account.\n\n```python\n>>> t.get_nonce('0x82a978b3f5962a5b0957d9ee9eef472ee55b42f1')\n1\n```\n\n<a id=\"api-get_code\"></a>\n\n#### `ethereumtester.get_code(account) -> hex string`\n\nreturns the code for the given account.\n\n```python\n>>> t.get_code('0x82a978b3f5962a5b0957d9ee9eef472ee55b42f1')\n\"0x\"\n```\n\n### blocks, transactions, and receipts\n\n<a id=\"api-get_transaction_by_hash\"></a>\n\n#### `ethereumtester.get_transaction_by_hash(transaction_hash) -> transaction-object`\n\nreturns the transaction for the given hash, raising a\n[`transactionnotfound`](#errors-transactionnotfound) exception if the\ntransaction cannot be found.\n\n```python\n>>> t.get_transaction_by_hash('0x21ae665f707e12a5f1bb13ef8c706b65cc5accfd03e7067ce683d831f51122e6')\n{'type': '0x2',\n 'hash': '0x21ae665f707e12a5f1bb13ef8c706b65cc5accfd03e7067ce683d831f51122e6',\n 'nonce': 0,\n 'block_hash': '0x810731efeb7498fc0ac3bc7c72a71571b672c9fdbfbfd8b435f483e368e8ef7e',\n 'block_number': 1,\n 'transaction_index': 0,\n 'from': '0x2b5ad5c4795c026514f8317c7a215e218dccd6cf',\n 'to': '0x7e5f4552091a69125d5dfcb7b8c2659029395bdf',\n 'value': 1337,\n 'gas': 21000,\n 'data': '0x',\n 'r': 1713666669454033023988006960017431058214051587080823768269189498559514600280,\n 's': 32003859822305799628524852194521134173285969678963273753063458725692016415033,\n 'v': 0,\n 'chain_id': 131277322940537,\n 'max_fee_per_gas': 2000000000,\n 'max_priority_fee_per_gas': 500000000,\n 'access_list': (),\n 'gas_price': 1375000000}\n```\n\n> note: for unmined transaction, `transaction_index`, `block_number` and `block_hash` will all be `none`.\n\n<a id=\"api-get_block_by_number\"></a>\n\n#### `ethereumtester.get_block_by_number(block_number, full_transactions=false) -> block-object`\n\nreturns the block for the given `block_number`.  see [block\nnumbers](#block-numbers) for named block numbers you can use.  if\n`full_transactions` is truthy, then the transactions array will be populated\nwith full transaction objects as opposed to their hashes.\n\nraises [`blocknotfound`](#errors-blocknotfound) if a block for the given number\ncannot be found.\n\n```python\n>>> t.get_block_by_number(1)\n{'number': 1,\n 'hash': '0xd481955268d1f3db58ee61685a899a35e33e8fd35b9cc0812f85b9f06757140e',\n 'parent_hash': '0x5be984ab842071903ee443a5dee92603bef42de35b4e10928e753f7e88a7163a',\n 'nonce': '0x0000000000000000',\n 'sha3_uncles': '0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347',\n 'logs_bloom': 0,\n 'transactions_root': '0xef1e11d99f7db22fd93c6a10d44753d4a93e9f6ecb2f1e5030a0a91f1d3b07ac',\n 'receipts_root': '0x611e48488cf80b4c31f01ad45b6ebea533a68255a6d0240d434d9366a3582010',\n 'state_root': '0x9ce568dcaa6f130d733b333304f2c26a19334ed328a7eb9bb31707306381ba65',\n 'coinbase': '0x0000000000000000000000000000000000000000',\n 'difficulty': 0,\n 'total_difficulty': 0,\n 'mix_hash': '0x0000000000000000000000000000000000000000000000000000000000000000',\n 'size': 751,\n 'extra_data': '0x0000000000000000000000000000000000000000000000000000000000000000',\n 'gas_limit': 3141592,\n 'gas_used': 29600,\n 'timestamp': 1633669276,\n 'transactions': ('0xc20b90af87bc65c3d748cf0a1fa54f3a86ffc94348e0fd91a70f1c5ba6ef4109',),\n 'uncles': (),\n 'base_fee_per_gas': 875000000}\n```\n\n<a id=\"api-get_block_by_hash\"></a>\n\n#### `ethereumtester.get_block_by_hash(block_hash, full_transactions=true) -> block-object`\n\nreturns the block for the given `block_hash`.  the `full_transactions`\nparameter behaves the same as in\n[`get_block_by_number`](#api-get_block_by_number).\n\nraises [`blocknotfound`](#errors-blocknotfound) if a block for the given hash\ncannot be found.\n\n```python\n>>> t.get_block_by_hash('0x0f50c8ea0f67ce0b7bff51ae866159edc443bde87de2ab26010a15b777244ddd')\n{'number': 1,\n 'hash': '0xd481955268d1f3db58ee61685a899a35e33e8fd35b9cc0812f85b9f06757140e',\n 'parent_hash': '0x5be984ab842071903ee443a5dee92603bef42de35b4e10928e753f7e88a7163a',\n 'nonce': '0x0000000000000000',\n 'sha3_uncles': '0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347',\n 'logs_bloom': 0,\n 'transactions_root': '0xef1e11d99f7db22fd93c6a10d44753d4a93e9f6ecb2f1e5030a0a91f1d3b07ac',\n 'receipts_root': '0x611e48488cf80b4c31f01ad45b6ebea533a68255a6d0240d434d9366a3582010',\n 'state_root': '0x9ce568dcaa6f130d733b333304f2c26a19334ed328a7eb9bb31707306381ba65',\n 'coinbase': '0x0000000000000000000000000000000000000000',\n 'difficulty': 0,\n 'total_difficulty': 0,\n 'mix_hash': '0x0000000000000000000000000000000000000000000000000000000000000000',\n 'size': 751,\n 'extra_data': '0x0000000000000000000000000000000000000000000000000000000000000000',\n 'gas_limit': 3141592,\n 'gas_used': 29600,\n 'timestamp': 1633669276,\n 'transactions': ('0xc20b90af87bc65c3d748cf0a1fa54f3a86ffc94348e0fd91a70f1c5ba6ef4109',),\n 'uncles': (),\n 'base_fee_per_gas': 875000000}\n```\n\n<a id=\"api-get_transaction_receipt\"></a>\n\n#### `ethereumtester.get_transaction_receipt(transaction_hash)`\n\nreturns the receipt for the given `transaction_hash`, raising\n[`transactionnotfound`](#errors-transactionnotfound) if no transaction can be\nfound for the given hash.\n\n```python\n>>> t.get_transaction_receipt('0x9a7cc8b7accf54ecb1901bf4d0178f28ca457bb9f9c245692c0ca8fabef08d3b')\n {'block_hash': '0x878f779d8bb25b25fb78fc16b8d64d70a5961310ef1689571aec632e9424290c',\n 'block_number': 2,\n 'contract_address': none,\n 'cumulative_gas_used': 23154,\n 'gas_used': 23154,\n 'logs': ({'address': '0xd6f084ee15e38c4f7e091f8dd0fe6fe4a0e203ef',\n   'block_hash': '0x878f779d8bb25b25fb78fc16b8d64d70a5961310ef1689571aec632e9424290c',\n   'block_number': 2,\n   'data': '0x',\n   'log_index': 0,\n   'topics': (\n    '0xf70fe689e290d8ce2b2a388ac28db36fbb0e16a6d89c6804c461f65a1b40bb15',\n    '0x0000000000000000000000000000000000000000000000000000000000003039'),\n   'transaction_hash': '0x9a7cc8b7accf54ecb1901bf4d0178f28ca457bb9f9c245692c0ca8fabef08d3b',\n   'transaction_index': 0,\n   'type': 'mined'},),\n 'transaction_hash': '0x9a7cc8b7accf54ecb1901bf4d0178f28ca457bb9f9c245692c0ca8fabef08d3b',\n 'transaction_index': 0}\n```\n\n- receipts for unmined transactions will have all of `block_hash`, `block_number` and `transaction_index` set to `none`.\n- receipts for transactions which create a contract will have the created contract address in the `contract_address` field.\n\n### transaction sending\n\na transaction is a formatted as a dictionary with the following keys and\nvalues.\n\n- `from`: the address of the account sending the transaction (hexadecimal string).\n- `to`: the address of the account the transaction is being sent to.  empty string should be used to trigger contract creation (hexadecimal string).\n- `gas`: sets the gas limit for transaction execution (integer).\n- `value`: the amount of ether in wei that should be sent with the transaction (integer).\n- `data`: the data for the transaction (hexadecimal string).\n- `chain_id`: the integer id for the chain the transaction is meant to interact with.\n\nin addition to the above, the following parameters are added based on the type of transaction being sent:\n\n#### legacy transactions\n\n- `gas_price`: sets the price per unit of gas in wei that will be paid for transaction execution (integer).\n\n#### access list transactions (eip-2930)\n\n- `gas_price`: sets the price per unit of gas in wei that will be paid for transaction execution (integer).\n- `access_list` (optional): specifies accounts and storage slots expected to be accessed, based on the transaction, in order to\n  gain a discount on the gas for those executions (see quickstart example for usage).\n\n#### dynamic fee transactions (eip-1559)\n\n- `max_fee_per_gas`: sets the maximum fee per unit of gas in wei that will be paid for transaction execution (integer).\n- `max_priority_fee_per_gas`: sets the fee per unit of gas in wei that is sent to the coinbase address as an incentive for including the transaction (integer).\n- `access_list` (optional): specifies accounts and storage slots expected to be accessed, based on the transaction, in order to\n  gain a discount on the gas for those executions (see quickstart example for usage).\n\n### methods\n\n<a id=\"api-send_transaction\"></a>\n\n#### `ethereumtester.send_transaction(transaction) -> transaction_hash`\n\nsends the provided `transaction` object, returning the `transaction_hash` for\nthe sent transaction.\n\n<a id=\"api-call\"></a>\n\n#### `ethereumtester.call(transaction, block_number='latest')`\n\nexecutes the provided `transaction` object at the evm state from the block\ndenoted by the `block_number` parameter, returning the resulting bytes return\nvalue from the evm.\n\n<a id=\"api-estimate_gas\"></a>\n\n#### `ethereumtester.estimate_gas(transaction)`\n\nexecutes the provided `transaction` object, measuring and returning the gas\nconsumption.\n\n<a id=\"api-fee_history\"></a>\n\n#### `ethereumtester.get_fee_history(block_count=1, newest_block='latest', reward_percentiles=[])`\n\nreturn the historical gas information for the number of blocks specified as the `block_count` starting from `newest_block`.\nnote that specifying `reward_percentiles` has no effect on the response and so `reward` will always return an empty list.\n\n### logs and filters\n\n<a id=\"api-create_block_filter\"></a>\n\n#### `ethereumtester.create_block_filter() -> integer`\n\ncreates a new filter for newly mined blocks.  returns the `filter_id` which can\nbe used to retrieve the block hashes for the mined blocks.\n\n```python\n>>> filter_id = t.create_block_filter()\n>>> filter_id = t.create_block_filter()\n>>> t.mine_blocks(3)\n>>> t.get_only_filter_changes(filter_id)\n('0x07004287f82c1a7ab15d7b8baa03ac14d7e9167ab74e47e1dc4bd2213dd18431',\n '0x5e3222c506585e1202da08c7231afdc5e472c777c245b822f44f141d335c744a',\n '0x4051c3ba3dcca95da5db1be38e44f5b47fd1a855ba522123e3254fe3f8e271ea')\n>>> t.mine_blocks(2)\n>>> t.get_only_filter_changes(filter_id)\n('0x6649c3a7cb3c7ede3a4fd10ae9dd63775eccdafe39ace5f5a9ae81d360089fba',\n '0x04890a08bca0ed2f1496eb29c5dc7aa66014c85377c6d9d9c2c315f85204b39c')\n>>> t.get_all_filter_logs(filter_id)\n('0x07004287f82c1a7ab15d7b8baa03ac14d7e9167ab74e47e1dc4bd2213dd18431',\n '0x5e3222c506585e1202da08c7231afdc5e472c777c245b822f44f141d335c744a',\n '0x4051c3ba3dcca95da5db1be38e44f5b47fd1a855ba522123e3254fe3f8e271ea',\n '0x6649c3a7cb3c7ede3a4fd10ae9dd63775eccdafe39ace5f5a9ae81d360089fba',\n '0x04890a08bca0ed2f1496eb29c5dc7aa66014c85377c6d9d9c2c315f85204b39c')\n```\n\n<a id=\"api-create_pending_transaction_filter\"></a>\n\n#### `ethereumtester.create_pending_transaction_filter() -> integer`\n\ncreates a new filter for pending transactions.  returns the `filter_id` which\ncan be used to retrieve the transaction hashes for the pending transactions.\n\n```python\n>>> filter_id = t.create_pending_transaction_filter()\n>>> t.send_transaction({...})\n'0x07f20bf9586e373ac914a40e99119c4932bee343d89ba852ccfc9af1fd541566'\n>>> t.send_transaction({...})\n'0xff85f7751d132b66c03e548e736f870797b0f24f3ed41dfe5fc628eb2cbc3505'\n>>> t.get_only_filter_changes(filter_id)\n('0x07f20bf9586e373ac914a40e99119c4932bee343d89ba852ccfc9af1fd541566',\n '0xff85f7751d132b66c03e548e736f870797b0f24f3ed41dfe5fc628eb2cbc3505')\n>>> t.send_transaction({...})\n'0xb07801f7e8b1cfa52b64271fa2673c4b8d64cc21cdbc5fde51d5858c94c2d26a'\n>>> t.get_only_filter_changes(filter_id)\n('0xb07801f7e8b1cfa52b64271fa2673c4b8d64cc21cdbc5fde51d5858c94c2d26a',)\n>>> t.get_all_filter_logs(filter_id)\n('0x07f20bf9586e373ac914a40e99119c4932bee343d89ba852ccfc9af1fd541566',\n '0xff85f7751d132b66c03e548e736f870797b0f24f3ed41dfe5fc628eb2cbc3505',\n '0xb07801f7e8b1cfa52b64271fa2673c4b8d64cc21cdbc5fde51d5858c94c2d26a')\n```\n\n<a id=\"api-create_log_filter\"></a>\n\n#### `ethereumtester.create_log_filter(from_block=none, to_block=none, address=none, topics=none) -> integer`\n\ncreates a new filter for logs produced by transactions.  the parameters for\nthis function can be used to filter the log entries.\n\n```python\n>>> filter_id = t.create_log_filter()\n>>> t.send_transaction({...})  # something that produces a log entry\n'0x728bf75fc7d23845f328d2223df7fe9cafc6e7d23792457b625d5b60d2b22b7c'\n>>> t.send_transaction({...})  # something that produces a log entry\n'0x63f5b381ffd09940ce22c45a3f4e163bd743851cb6b4f43771fbf0b3c14b2f8a'\n>>> t.get_only_filter_changes(filter_id)\n({'address': '0xd6f084ee15e38c4f7e091f8dd0fe6fe4a0e203ef',\n  'block_hash': '0x68c0f318388003b652eae334efbed8bd345c469bd0ca77469183fc9693c23e13',\n  'block_number': 11,\n  'data': '0x',\n  'log_index': 0,\n  'topics': ('0xf70fe689e290d8ce2b2a388ac28db36fbb0e16a6d89c6804c461f65a1b40bb15',\n   '0x0000000000000000000000000000000000000000000000000000000000003039'),\n  'transaction_hash': '0x728bf75fc7d23845f328d2223df7fe9cafc6e7d23792457b625d5b60d2b22b7c',\n  'transaction_index': 0,\n  'type': 'mined'},\n {'address': '0xd6f084ee15e38c4f7e091f8dd0fe6fe4a0e203ef',\n  'block_hash': '0x07d7e46be6f9ba53ecd4323fb99ec656e652c4b14f4b8e8a244ee7f997464725',\n  'block_number': 12,\n  'data': '0x',\n  'log_index': 0,\n  'topics': ('0xf70fe689e290d8ce2b2a388ac28db36fbb0e16a6d89c6804c461f65a1b40bb15',\n   '0x0000000000000000000000000000000000000000000000000000000000010932'),\n  'transaction_hash': '0x63f5b381ffd09940ce22c45a3f4e163bd743851cb6b4f43771fbf0b3c14b2f8a',\n  'transaction_index': 0,\n  'type': 'mined'})\n```\n\n<a id=\"api-delete_filter\"></a>\n\n#### `ethereumtester.delete_filter(filter_id)`\n\nremoves the filter for the provided `filter_id`.  if no filter is found for the\ngiven `filter_id`, raises [`filternotfound`](#errors-filternotfound).\n\n<a id=\"api-get_only_filter_changes\"></a>\n\n#### `ethereumtester.get_only_filter_changes(filter_id) -> transaction_hash or block_hash or log_entry`\n\nreturns all new values for the provided `filter_id` that have not previously\nbeen returned through this api.  raises\n[`filternotfound`](#errors-filternotfound) if no filter is found for the given\n`filter_id`.\n\n<a id=\"api-get_only_filter_changes\"></a>\n\n#### `ethereumtester.get_all_filter_logs(filter_id) -> transaction_hash or block_hash or log_entry`\n\nreturns all values for the provided `filter_id`. raises\n[`filternotfound`](#errors-filternotfound) if no filter is found for the given\n`filter_id`.\n\n### snapshots and resetting\n\n<a id=\"api-take_snapshot\"></a>\n\n#### `ethereumtester.take_snapshot() -> snapshot_id`\n\ntakes a snapshot of the current chain state and returns the snapshot id.\n\n<a id=\"api-revert_to_snapshot\"></a>\n\n#### `ethereumtester.revert_to_snapshot(snapshot_id)`\n\nreverts the chain to the chain state associated with the given `snapshot_id`.\nraises [`snapshotnotfound`](#errors-snapshotnotfound) if no snapshot is known\nfor the given id.\n\n### errors and exceptions\n\n<a id=\"errors-transactionnotfound\"></a>\n\n#### `eth_tester.exceptions.transactionnotfound`\n\nraised in cases where a transaction cannot be found for the provided transaction hash.\n\n<a id=\"errors-blocknotfound\"></a>\n\n#### `eth_tester.exceptions.blocknotfound`\n\nraised in cases where a block cannot be found for either a provided number or\nhash.\n\n<a id=\"errors-filternotfound\"></a>\n\n#### `eth_tester.exceptions.filternotfound`\n\nraised in cases where a filter cannot be found for the provided filter id.\n\n<a id=\"errors-snapshotnotfound\"></a>\n\n#### `eth_tester.exceptions.snapshotnotfound`\n\nraised in cases where a snapshot cannot be found for the provided snapshot id.\n\n## backends\n\nethereum tester is written using a pluggable backend system.\n\n### backend dependencies\n\nethereum tester does not install any of the dependencies needed to use the\nvarious backends by default.  you can however install ethereum tester with the\nnecessary dependencies using the following method.\n\n```bash\n$ python -m pip install eth-tester[<backend-name>]\n```\n\nyou should replace `<backend-name>` with the name of the desired testing\nbackend.  available backends are:\n\n- `py-evm`: [pyevm (alpha)](https://pypi.python.org/pypi/py-evm) **(experimental)**\n\n### selecting a backend\n\nyou can select which backend in a few different ways.\n\nthe most direct way is to manually pass in the backend instance you wish to\nuse.\n\n```python\n>>> from eth_tester import ethereumtester, mockbackend\n>>> t = ethereumtester(backend=mockbackend())\n```\n\nethereum tester also supports configuration using the environment variable\n`ethereum_tester_chain_backend`.  this should be set to the import path for the\nbackend class you wish to use.\n\n### available backends\n\nethereum tester can be used with the following backends.\n\n- mockbackend\n- pyevm (experimental)\n\n#### mockbackend\n\nthis backend has limited functionality.  it cannot perform any vm computations.\nit mocks out all of the objects and interactions.\n\n```python\n>>> from eth_tester import ethereumtester, mockbackend\n>>> t = ethereumtester(mockbackend())\n```\n\n#### pyevm (experimental)\n\n> **warning** py-evm is experimental and should not be relied on for mission critical testing at this stage.\n\nuses the experimental py-evm library.\n\n```python\n>>> from eth_tester import ethereumtester, pyevmbackend\n>>> t = ethereumtester(pyevmbackend())\n```\n\n#### pyevm genesis parameters and state\n\nif you need to specify custom genesis parameters and state, you can build your own parameters `dict` to use instead of the default\nwhen initializing a backend.  only default values can be overridden or a `valueerror` will be raised.\n\n```\n# default genesis parameters\n\ndefault_genesis_params = {\n    \"coinbase\": genesis_coinbase,\n    \"difficulty\": genesis_difficulty,\n    \"extra_data\": genesis_extra_data,\n    \"gas_limit\": genesis_gas_limit,\n    \"mix_hash\": genesis_mix_hash,\n    \"nonce\": genesis_nonce,\n    \"receipt_root\": blank_root_hash,\n    \"timestamp\": int(time.time()),\n    \"transaction_root\": blank_root_hash,\n}\n```\n\nto generate a genesis parameters `dict` with an overridden parameters, pass a `genesis_overrides` `dict` \\\nto `pyevm.generate_genesis_params`.\n\n```python\n>>> from eth_tester import pyevmbackend, ethereumtester\n\n>>> genesis_overrides = {'gas_limit': 4500000}\n>>> custom_genesis_params = pyevmbackend.generate_genesis_params(overrides=genesis_overrides)\n\n# generates the following `dict`:\n\n# custom_genesis_params = {\n#     \"coinbase\": genesis_coinbase,\n#     \"difficulty\": genesis_difficulty,\n#     \"extra_data\": genesis_extra_data,\n#     \"gas_limit\": 4500000    # <<< overridden value <<<\n#     \"mix_hash\": genesis_mix_hash,\n#     \"nonce\": genesis_nonce,\n#     \"receipt_root\": blank_root_hash,\n#     \"timestamp\": int(time.time()),\n#     \"transaction_root\": blank_root_hash,\n# }\n```\n\nthen pass the generated `custom_genesis_params` `dict` to the backend's `__init__`\n\n```python\n>>> from eth_tester import pyevmbackend, ethereumtester\n>>> pyevm_backend = pyevmbackend(genesis_parameters=custom_genesis_params)\n>>> t = ethereumtester(backend=pyevm_backend)\n```\n\nsimilarly to `genesis_parameters`, override the genesis state by passing in an `overrides` `dict`\nto `pyevmbackend.generate_genesis_state`. optionally, provide `num_accounts` to set the number of accounts.\n\nfor more control on which accounts the backend generates, use the `from_mnemonic()` classmethod. give it\na `mnemonic` (and optionally the number of accounts) and it will use that information to generate the accounts.\noptionally, provide a `genesis_state_overrides` `dict` to adjust the `genesis_state`.\n\n```python\n>>> from eth_tester import pyevmbackend, ethereumtester\n>>> from eth_utils import to_wei\n>>> from hexbytes import hexbytes\n>>>\n>>> pyevm_backend = pyevmbackend.from_mnemonic(\n>>>    'test test test test test test test test test test test junk',\n>>>    genesis_state_overrides={'balance': to_wei(1000000, 'ether')}\n>>> )\n>>> t = ethereumtester(backend=pyevm_backend)\n>>> print(t.get_accounts()[0])  # outputs 0x1e59ce931b4cfea3fe4b875411e280e173cb7a9c\n>>> print(t.get_balance('0x1e59ce931b4cfea3fe4b875411e280e173cb7a9c'))  # outputs 1000000000000000000000000\n```\n\n*note: the same state is applied to all generated test accounts.*\n\n```\n# default account genesis state\n\ndefault_account_state = {\n    'balance': to_wei(1000000, 'ether'),\n    'storage': {},\n    'code': b'',\n    'nonce': 0,\n}\n```\n\nfor example, to create 3 test accounts, each with a balance of 100 eth each:\n\n```python\n>>> from eth_tester import ethereumtester, pyevmbackend\n>>>  from eth_utils import to_wei\n\n>>> state_overrides = {'balance': to_wei(100, 'ether')}\n>>> custom_genesis_state = pyevmbackend.generate_genesis_state(overrides=state_overrides, num_accounts=3)\n\n# then pass the generated `custom_genesis_state` `dict` to the backend's `__init__`\n\n>>> pyevm_backend = pyevmbackend(genesis_state=custom_genesis_state)\n>>> t = ethereumtester(backend=pyevm_backend)\n```\n\n### implementing custom backends\n\nthe base class `eth_tester.backends.base.basechainbackend` is the recommended\nbase class to begin with if you wish to write your own backend.\n\ndetails on implementation are beyond the scope of this document.\n\n## data formats\n\nethereum tester uses two formats for data.\n\n- the *normal* format is the data format the is expected as input arguments to all `ethereumtester` methods as well as the return types from all method calls.\n- the *canonical* format is the data format that is used internally by the backend class.\n\nethereum tester enforces strict validation rules on these formats.\n\n### canonical formats\n\nthe canonical format is intended for low level handling by backends.\n\n- 32 byte hashes: `bytes` of length 32\n- arbitrary length strings: `bytes`\n- addresses: `bytes` of length 20\n- integers: `int`\n- array types: `tuple`\n\n### normal formats\n\nthe normal format is intended for use by end users.\n\n- 32 byte hashes: `0x` prefixed hexadecimal encoded text strings (not byte strings)\n- arbitrary length strings: `0x` prefixed hexadecimal encoded text strings (not byte strings)\n- addresses: `0x` prefixed and eip55 checksummed hexadecimal encoded text strings (not byte strings)\n- integers: `int`\n- array types: `tuple`\n\n## normalization and validation\n\n> beware! here there be dragons...  this section of the documentation is only\n> relevant if you intend to build tooling on top of this library.\n\nthe ethereum tester provides strong guarantees that backends can be swapped out\nseamlessly without effecting the data formats of both the input arguments and\nreturn values.  this is accomplished using a two-step process of strict\n*normalization* and *validation*.\n\nall inputs to the methods of the `ethereumtester` are first validated then\nnormalized to a *canonical* format.  return values are put through this process\nas well, first validating the data returned by the backend, and then\nnormalizing it from the *canonical* format to the *normal* form before being\nreturned.\n\n<a id=\"normalization\"></a>\n\n### normalization\n\nthe `ethereumtester` delegates normalization to whatever `normalizer` was\npassed in during instantiation.  if no value was provided, the default\nnormalizer will be used from\n`eth_tester.normalization.default.defaultnormalizer`.\n\nthe specifics of this object are beyond the scope of this document.\n\n<a id=\"validation\"></a>\n\n### validation\n\nthe `ethereumtester` delegates validation to whatever `validator` was\npassed in during instantiation.  if no value was provided, the default\nvalidator will be used from\n`eth_tester.validation.default.defaultvalidator`.\n\nthe specifics of this object are beyond the scope of this document.\n\n# use with web3.py\n\nsee the [web3.py documentation](http://web3py.readthedocs.io/en/latest/) for\ninformation on the `ethereumtester` provider which integrates with this\nlibrary.\n\n## developer setup\n\nif you would like to hack on eth-tester, please check out the [snake charmers\ntactical manual](https://github.com/ethereum/snake-charmers-tactical-manual)\nfor information on how we do:\n\n- testing\n- pull requests\n- documentation\n\nwe use [pre-commit](https://pre-commit.com/) to maintain consistent code style. once\ninstalled, it will run automatically with every commit. you can also run it manually\nwith `make lint`. if you need to make a commit that skips the `pre-commit` checks, you\ncan do so with `git commit --no-verify`.\n\n### development environment setup\n\nyou can set up your dev environment with:\n\n```sh\ngit clone git@github.com:ethereum/eth-tester.git\ncd eth-tester\nvirtualenv -p python3 venv\n. venv/bin/activate\npython -m pip install -e \".[dev]\"\npre-commit install\n```\n\n### release setup\n\nto release a new version:\n\n```sh\nmake release bump=$$version_part_to_bump$$\n```\n\n#### how to bumpversion\n\nthe version format for this repo is `{major}.{minor}.{patch}` for stable, and\n`{major}.{minor}.{patch}-{stage}.{devnum}` for unstable (`stage` can be alpha or beta).\n\nto issue the next version in line, specify which part to bump,\nlike `make release bump=minor` or `make release bump=devnum`. this is typically done from the\nmaster branch, except when releasing a beta (in which case the beta is released from master,\nand the previous stable branch is released from said branch).\n\nif you are in a beta version, `make release bump=stage` will switch to a stable.\n\nto issue an unstable version when the current version is stable, specify the\nnew version explicitly, like `make release bump=\"--new-version 4.0.0-alpha.1 devnum\"`\n",
  "docs_url": null,
  "keywords": "ethereum",
  "license": "mit",
  "name": "eth-tester",
  "package_url": "https://pypi.org/project/eth-tester/",
  "project_url": "https://pypi.org/project/eth-tester/",
  "project_urls": {
    "Homepage": "https://github.com/ethereum/eth-tester"
  },
  "release_url": "https://pypi.org/project/eth-tester/0.10.0b1/",
  "requires_dist": [
    "eth-abi >=3.0.1",
    "eth-account >=0.6.0",
    "eth-keys >=0.4.0",
    "eth-utils >=2.0.0",
    "rlp >=3.0.0",
    "semantic-version >=2.6.0",
    "build >=0.9.0 ; extra == 'dev'",
    "bumpversion >=0.5.3 ; extra == 'dev'",
    "ipython ; extra == 'dev'",
    "pre-commit >=3.4.0 ; extra == 'dev'",
    "tox >=4.0.0 ; extra == 'dev'",
    "twine ; extra == 'dev'",
    "wheel ; extra == 'dev'",
    "towncrier <22,>=21 ; extra == 'dev'",
    "pytest >=7.0.0 ; extra == 'dev'",
    "pytest-xdist <3,>=2.0.0 ; extra == 'dev'",
    "eth-hash[pycryptodome] <1.0.0,>=0.1.4 ; extra == 'dev'",
    "py-evm ==0.7.0a4 ; extra == 'dev'",
    "eth-hash[pysha3] <1.0.0,>=0.1.4 ; (implementation_name == \"cpython\") and extra == 'dev'",
    "eth-hash[pycryptodome] <1.0.0,>=0.1.4 ; (implementation_name == \"pypy\") and extra == 'dev'",
    "towncrier <22,>=21 ; extra == 'docs'",
    "py-evm ==0.7.0a4 ; extra == 'py-evm'",
    "eth-hash[pysha3] <1.0.0,>=0.1.4 ; (implementation_name == \"cpython\") and extra == 'py-evm'",
    "eth-hash[pycryptodome] <1.0.0,>=0.1.4 ; (implementation_name == \"pypy\") and extra == 'py-evm'",
    "py-evm ==0.7.0a4 ; extra == 'pyevm'",
    "eth-hash[pysha3] <1.0.0,>=0.1.4 ; (implementation_name == \"cpython\") and extra == 'pyevm'",
    "eth-hash[pycryptodome] <1.0.0,>=0.1.4 ; (implementation_name == \"pypy\") and extra == 'pyevm'",
    "pytest >=7.0.0 ; extra == 'test'",
    "pytest-xdist <3,>=2.0.0 ; extra == 'test'",
    "eth-hash[pycryptodome] <1.0.0,>=0.1.4 ; extra == 'test'"
  ],
  "requires_python": ">=3.8,<4",
  "summary": "eth-tester: tools for testing ethereum applications.",
  "version": "0.10.0b1",
  "releases": [],
  "developers": [
    "snakecharmers@ethereum.org",
    "the_ethereum_foundation"
  ],
  "kwds": "ethereumtester eth_tester eth_utils ethereum_tester_chain_backend pyversions",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_eth_tester",
  "homepage": "https://github.com/ethereum/eth-tester",
  "release_count": 62,
  "dependency_ids": [
    "pypi_build",
    "pypi_bumpversion",
    "pypi_eth_abi",
    "pypi_eth_account",
    "pypi_eth_hash",
    "pypi_eth_keys",
    "pypi_eth_utils",
    "pypi_ipython",
    "pypi_pre_commit",
    "pypi_py_evm",
    "pypi_pytest",
    "pypi_pytest_xdist",
    "pypi_rlp",
    "pypi_semantic_version",
    "pypi_towncrier",
    "pypi_tox",
    "pypi_twine",
    "pypi_wheel"
  ],
  "documentation_summary": "The GitHub repository \"ethereum/eth-tester\" is a tool suite designed for testing Ethereum applications. It is publicly accessible and has garnered attention with 337 stars and 139 forks. The repository is licensed under the MIT license and includes a variety of files and folders such as `.circleci`, `.github`, `eth_tester`, and `tests`, among others. The README file provides a quick start guide, demonstrating how to install `eth-tester` using pip, and examples of how to use it to get accounts, balances, and send transactions. It also details the input and output data formats, block numbers, and the `EthereumTester` API for creating instances, managing accounts, mining, and handling transactions, blocks, and receipts. Additionally, it covers topics like snapshots, errors, backends, data formats, normalization, validation, and integration with Web3.py. The repository also includes instructions for developers on setting up a development environment and making releases.",
  "embedding": [
    -0.01224889513105154,
    -0.01005219854414463,
    0.006526108831167221,
    -0.03844574838876724,
    -0.0016004251083359122,
    0.013066436164081097,
    -0.01800011657178402,
    -0.007990573532879353,
    -0.015042752027511597,
    -0.025692110881209373,
    0.0007175698410719633,
    -0.00853086169809103,
    -0.031422004103660583,
    0.014061703346669674,
    -0.0007224573055282235,
    -0.0034656624775379896,
    0.01791480928659439,
    -0.019023820757865906,
    0.002525490475818515,
    0.013741795904934406,
    0.01426075678318739,
    0.009924235753715038,
    -0.016464563086628914,
    -0.014388719573616982,
    -0.007663556840270758,
    0.012767856009304523,
    0.019820034503936768,
    -0.035630565136671066,
    0.005409987643361092,
    -0.022052276879549026,
    0.034891221672296524,
    0.0009952671825885773,
    -0.03600023314356804,
    -0.042768049985170364,
    -0.019464582204818726,
    -0.013443215750157833,
    0.02320394292473793,
    0.008900531567633152,
    0.024824805557727814,
    0.017900589853525162,
    0.02719922922551632,
    0.013194398954510689,
    -0.010827085003256798,
    0.006447909399867058,
    -0.006504781544208527,
    0.007269004825502634,
    8.629443982499652e-06,
    -0.043990809470415115,
    -0.014744171872735023,
    0.015042752027511597,
    -0.013706250116229057,
    0.00031057666637934744,
    -0.015383986756205559,
    -0.005317570175975561,
    -0.006220419891178608,
    0.019549891352653503,
    -0.01136026345193386,
    0.023132851347327232,
    -0.015440858900547028,
    0.01585318334400654,
    -0.01618020050227642,
    0.0015213369624689221,
    -0.03230352699756622,
    -0.006415918469429016,
    0.001286738202907145,
    9.48058586800471e-05,
    -0.0070770601741969585,
    0.020445629954338074,
    -0.001348942401818931,
    -0.004283203277736902,
    0.026886431500315666,
    0.009981107898056507,
    0.039668504148721695,
    -0.0037535789888352156,
    0.00921333022415638,
    -0.02367313951253891,
    -0.03292912617325783,
    0.01314463559538126,
    -0.0007384526543319225,
    -0.020488284528255463,
    0.0014466919237747788,
    0.012284439988434315,
    -0.003476325888186693,
    0.03073953650891781,
    0.006405254825949669,
    -0.008495315909385681,
    -0.020857956260442734,
    0.01888163946568966,
    0.001684845075942576,
    -0.014011939987540245,
    0.03062579222023487,
    0.016023801639676094,
    0.014075920917093754,
    0.029602088034152985,
    0.016478780657052994,
    0.005513069219887257,
    0.0027263211086392403,
    0.015711002051830292,
    -0.010770211927592754,
    -0.0366542674601078,
    -0.014424264430999756,
    0.010151725262403488,
    -0.008559297770261765,
    -0.006341273430734873,
    -0.02024657651782036,
    -0.017886372283101082,
    -0.0029431472066789865,
    -0.004247657954692841,
    0.01755935698747635,
    0.021213408559560776,
    0.002529044868424535,
    0.022080712020397186,
    0.011665952391922474,
    -0.02316128835082054,
    0.017431393265724182,
    0.006223974283784628,
    0.04771595075726509,
    -0.008296262472867966,
    0.0007726649637334049,
    0.0045782290399074554,
    0.015497731044888496,
    0.013315252959728241,
    0.01836978830397129,
    -0.01231287606060505,
    0.0058080945163965225,
    -0.0020260794553905725,
    -0.022180238738656044,
    -0.014011939987540245,
    0.004219221882522106,
    -0.026829559355974197,
    0.017786845564842224,
    -0.0005322901997715235,
    0.004372066352516413,
    0.012668329291045666,
    -0.0218958780169487,
    -0.026459887623786926,
    -0.004748845938593149,
    -0.004489365965127945,
    0.009689636528491974,
    -0.014801044017076492,
    -0.008267826400697231,
    0.011516662314534187,
    -0.015170714817941189,
    -0.01073466707020998,
    -0.03491966053843498,
    0.02284849062561989,
    -0.002301555359736085,
    -0.0012351976474747062,
    0.03978224843740463,
    0.017758410423994064,
    0.009910017251968384,
    0.014175447635352612,
    -0.0065545449033379555,
    -0.0017825945978984237,
    -0.02985801361501217,
    0.0384741835296154,
    0.004443156998604536,
    -0.009646981954574585,
    -0.013436106964945793,
    0.025933818891644478,
    -0.027412500232458115,
    0.026886431500315666,
    -0.011786806397140026,
    -0.021227626129984856,
    0.008694369345903397,
    0.024184992536902428,
    0.01582474820315838,
    -0.004802164155989885,
    0.013962176628410816,
    -0.007073505781590939,
    0.01202140562236309,
    0.002523713046684861,
    -0.04418986290693283,
    0.02023235894739628,
    -0.012540366500616074,
    0.013983502984046936,
    0.007222795858979225,
    0.010656467638909817,
    -0.008879205211997032,
    0.0023228824138641357,
    0.011090119369328022,
    0.004908799659460783,
    0.013450324535369873,
    0.03236040100455284,
    0.005033208057284355,
    -0.030142376199364662,
    0.004023722838610411,
    0.003792678704485297,
    0.005395769607275724,
    -0.003586516249924898,
    0.010535613633692265,
    0.022635217756032944,
    0.020289231091737747,
    -0.008715696632862091,
    -0.5882881879806519,
    -0.012952690944075584,
    -0.02404281124472618,
    -0.021327152848243713,
    -0.02051672153174877,
    -0.020474066957831383,
    0.00635549146682024,
    0.022123366594314575,
    -0.017004849389195442,
    0.011474008671939373,
    -0.01758779212832451,
    0.007940810173749924,
    -0.0048234909772872925,
    -0.03247414529323578,
    -0.04871121793985367,
    -0.025564147159457207,
    0.0036398342344909906,
    -0.023929065093398094,
    0.012746528722345829,
    0.011523772031068802,
    -0.028621040284633636,
    0.02763999067246914,
    -0.012590129859745502,
    -0.006984642706811428,
    -0.006778480019420385,
    -0.0027547571808099747,
    0.02928929030895233,
    0.018071208149194717,
    0.024853242561221123,
    -0.01012328825891018,
    -0.011132773943245411,
    0.030000194907188416,
    0.0017363857477903366,
    -0.005207379814237356,
    0.03972537815570831,
    0.01801433600485325,
    -0.009696745313704014,
    0.0026410124264657497,
    0.0019603208638727665,
    0.041886527091264725,
    -0.012383966706693172,
    -0.005968048237264156,
    0.047915004193782806,
    0.019564108923077583,
    0.012490603141486645,
    -0.0021344926208257675,
    0.048910271376371384,
    0.014616209082305431,
    -0.003000019583851099,
    0.02240772917866707,
    -0.0122417863458395,
    -0.01974894478917122,
    0.02108544483780861,
    0.024227645248174667,
    0.008573515340685844,
    0.0015799866523593664,
    0.02095748297870159,
    -0.011289172805845737,
    0.0004474259039852768,
    0.010535613633692265,
    0.012846055440604687,
    0.022891145199537277,
    0.010670685209333897,
    -0.02016126923263073,
    -0.006707389838993549,
    -0.008026118390262127,
    0.0006700280355289578,
    0.004233439918607473,
    0.0015693230088800192,
    -0.0246257521212101,
    0.004002395551651716,
    0.009511910378932953,
    0.011104337871074677,
    0.0003943301853723824,
    0.011964532546699047,
    0.06341273337602615,
    0.009959780611097813,
    0.018199170008301735,
    -0.005989375524222851,
    0.02458309940993786,
    0.0019461027113720775,
    -0.0011703275376930833,
    0.011388699524104595,
    -0.038701675832271576,
    0.029658960178494453,
    -0.0037215882912278175,
    0.002018970437347889,
    -0.027796389535069466,
    0.02270630933344364,
    0.014360283501446247,
    0.015142278745770454,
    0.03491966053843498,
    -0.019564108923077583,
    -0.023047544062137604,
    0.017886372283101082,
    0.030483610928058624,
    -0.017843717709183693,
    0.020801084116101265,
    -0.003636279609054327,
    -0.008331808261573315,
    -0.006149329245090485,
    -0.01662096194922924,
    0.0038815417792648077,
    0.002838288666680455,
    -0.007628011982887983,
    0.02498120628297329,
    -0.023985939100384712,
    0.010237033478915691,
    0.0395263247191906,
    -0.00679980730637908,
    -0.025237131863832474,
    -0.011260736733675003,
    -0.010599595494568348,
    -0.0024419589899480343,
    0.014139902777969837,
    -0.0351187139749527,
    0.004173012915998697,
    0.03281537815928459,
    0.01445270050317049,
    -0.028663692995905876,
    0.0078697195276618,
    -0.02845042198896408,
    0.0035296438727527857,
    -0.007450285367667675,
    0.007436067331582308,
    0.0004780836752615869,
    0.012782073579728603,
    -0.029004927724599838,
    -0.000353008828824386,
    0.007300995290279388,
    -0.019947996363043785,
    0.016521435230970383,
    0.04564010724425316,
    -0.007350758649408817,
    0.029658960178494453,
    0.012277331203222275,
    0.03540307283401489,
    -0.005150507669895887,
    0.007286777254194021,
    -0.025635238736867905,
    0.01929396390914917,
    0.00942660216242075,
    -0.0003805563901551068,
    -0.0060249208472669125,
    -0.01972050778567791,
    -0.024398263543844223,
    -0.007300995290279388,
    2.924152613559272e-05,
    0.0015595480799674988,
    0.029260853305459023,
    -0.027298755943775177,
    0.016521435230970383,
    -0.0192370917648077,
    0.012284439988434315,
    -0.014943225309252739,
    -0.018199170008301735,
    -0.02363048493862152,
    -0.032388836145401,
    -0.006188428960740566,
    -0.04111875221133232,
    -0.008473988622426987,
    0.008928968571126461,
    -0.0267584677785635,
    -0.0031848549842834473,
    -0.021711042150855064,
    0.002461508847773075,
    0.0015320004895329475,
    0.004599555861204863,
    -0.009049821645021439,
    -0.025194477289915085,
    -0.008481098338961601,
    0.01748826541006565,
    -0.016421908512711525,
    0.017232339829206467,
    0.022450383752584457,
    0.019166002050042152,
    -0.0025023859925568104,
    -0.015711002051830292,
    -0.0029253745451569557,
    0.00045142474118620157,
    0.0002079397381749004,
    0.026033345609903336,
    -0.02097170054912567,
    0.008246499113738537,
    0.047943439334630966,
    0.009042712859809399,
    0.013109089806675911,
    0.005797431338578463,
    -0.009419492445886135,
    -0.014729953370988369,
    -0.03250258043408394,
    0.022578345611691475,
    -0.011594862677156925,
    0.01714703068137169,
    0.002774307271465659,
    0.016123328357934952,
    0.007048624102026224,
    -0.013635160401463509,
    -0.00295203342102468,
    0.03509027510881424,
    0.022450383752584457,
    0.013578287325799465,
    0.003700261004269123,
    -0.022137584164738655,
    -0.020033305510878563,
    -0.006476345472037792,
    0.013123308308422565,
    -0.011068792082369328,
    0.009476365521550179,
    -0.033071305602788925,
    0.03022768534719944,
    -0.028137624263763428,
    -0.0288911834359169,
    0.01011617947369814,
    0.0027298755012452602,
    -0.001937216380611062,
    -0.008779678493738174,
    0.014203883707523346,
    0.004322302993386984,
    0.000531845900695771,
    0.017346084117889404,
    0.006469236686825752,
    0.012447948567569256,
    -0.014829480089247227,
    -0.007414740044623613,
    0.0030231240671128035,
    0.005502405576407909,
    0.019933778792619705,
    0.010628031566739082,
    -0.018128080293536186,
    -0.014971661381423473,
    0.017701536417007446,
    0.012277331203222275,
    -0.0015204482479020953,
    0.021327152848243713,
    -0.005431314930319786,
    0.016805795952677727,
    -0.012163585983216763,
    0.016976414248347282,
    -0.0020402977243065834,
    0.015398204326629639,
    0.003657606663182378,
    0.028194496408104897,
    -0.0017985899467021227,
    0.03415188193321228,
    0.017004849389195442,
    -0.003870878368616104,
    0.02586272731423378,
    -0.004940790589898825,
    0.017274994403123856,
    0.0014893461484462023,
    0.010798648931086063,
    -0.02411390095949173,
    -0.007883938029408455,
    0.016293944790959358,
    -0.009867362678050995,
    0.00038100071833468974,
    -0.010898175649344921,
    0.05030364543199539,
    0.033440977334976196,
    0.0393841415643692,
    -0.00944081973284483,
    0.02186744101345539,
    0.009085367433726788,
    0.036170851439237595,
    -0.014758390374481678,
    0.0111754285171628,
    -0.012540366500616074,
    0.012611456215381622,
    -0.026445670053362846,
    0.016322381794452667,
    0.009021385572850704,
    0.0016928428085520864,
    0.010457414202392101,
    0.02799544297158718,
    0.01576787605881691,
    -0.0041836765594780445,
    0.024639971554279327,
    0.006639853585511446,
    -0.043535828590393066,
    -0.03537463769316673,
    -0.02407124638557434,
    0.04049315303564072,
    -0.004965672269463539,
    0.002619685372337699,
    0.005399324465543032,
    -0.0034532216377556324,
    0.0009606105159036815,
    -0.029118673875927925,
    0.001382710412144661,
    -0.007507157977670431,
    -0.023360341787338257,
    0.005669468082487583,
    -0.007261895574629307,
    -0.018270261585712433,
    4.118250944884494e-05,
    0.010372105054557323,
    -0.005541505292057991,
    0.015071188099682331,
    -0.008793896064162254,
    0.03324192389845848,
    0.005235815886408091,
    -0.004972781054675579,
    0.0033270358107984066,
    0.06614261120557785,
    0.022023839876055717,
    -0.018682586029171944,
    -0.019393490627408028,
    0.013116199523210526,
    -0.011545099318027496,
    0.009511910378932953,
    0.019962215796113014,
    -0.013564069755375385,
    -0.007226350251585245,
    0.01791480928659439,
    -0.016464563086628914,
    0.011083010584115982,
    -0.007158814463764429,
    0.038758546113967896,
    0.011118555441498756,
    -0.03426562622189522,
    -0.02586272731423378,
    -0.041374675929546356,
    0.01444559171795845,
    0.03193385899066925,
    0.02580585516989231,
    -0.0024401817936450243,
    0.006593645084649324,
    -0.010620921850204468,
    -0.01792902685701847,
    -0.043194595724344254,
    -0.0002925818844232708,
    0.0013462764909490943,
    -0.007464503403753042,
    0.002459731651470065,
    -0.008843659423291683,
    0.018511969596147537,
    -0.009092476218938828,
    0.0126967653632164,
    0.011374481953680515,
    -0.009682527743279934,
    0.009533237665891647,
    -0.004318748600780964,
    -0.018639931455254555,
    0.01838400587439537,
    -0.02274896390736103,
    0.003956187050789595,
    -0.008189626969397068,
    0.009902908466756344,
    -0.013756013475358486,
    0.009341293014585972,
    0.016421908512711525,
    0.00568013172596693,
    0.0024010820779949427,
    -0.025080733001232147,
    0.002239351160824299,
    0.012654110789299011,
    0.03022768534719944,
    -0.024455135688185692,
    0.05488187447190285,
    -0.018497750163078308,
    0.032587889581918716,
    0.009156458079814911,
    -0.01358539704233408,
    0.005004771985113621,
    0.00012729644367936999,
    0.006167101673781872,
    -0.003430117154493928,
    0.005648141261190176,
    -0.0038175603840500116,
    -0.019379273056983948,
    0.029914887621998787,
    -0.004955008625984192,
    0.011438462883234024,
    0.007933701388537884,
    0.006963315419852734,
    -0.04905245080590248,
    0.0010272578801959753,
    -0.002031411277130246,
    0.012746528722345829,
    0.015924274921417236,
    0.017274994403123856,
    -0.025279786437749863,
    -0.05380129814147949,
    -0.01701906882226467,
    -0.02452622540295124,
    -0.0024099682923406363,
    -0.027739517390727997,
    -0.004581783432513475,
    -0.006177765317261219,
    0.005530841648578644,
    -0.018682586029171944,
    -0.019464582204818726,
    -0.011118555441498756,
    -0.023857975378632545,
    -0.030568920075893402,
    -0.015369768254458904,
    0.007848392240703106,
    0.03716611862182617,
    0.008068772964179516,
    0.004514247644692659,
    0.028635257855057716,
    0.006753598339855671,
    0.006479899864643812,
    0.0023264370393007994,
    -0.009796272031962872,
    0.01011617947369814,
    -0.03110920824110508,
    0.0041161407716572285,
    0.010208597406744957,
    0.034862786531448364,
    0.004258321598172188,
    0.0017221675952896476,
    0.03369690105319023,
    -0.022208675742149353,
    -0.00037722403067164123,
    0.013421888463199139,
    -0.019450364634394646,
    -0.004898136015981436,
    0.005772549659013748,
    -0.006184874568134546,
    0.01005219854414463,
    0.00027969671646133065,
    -0.001951434533111751,
    -0.002489945152774453,
    -0.02674425020813942,
    0.010862629860639572,
    -0.023331904783844948,
    0.011296282522380352,
    -0.015654129907488823,
    -0.004855481907725334,
    0.014175447635352612,
    -0.02717079408466816,
    0.026943303644657135,
    0.010080634616315365,
    -0.01490057073533535,
    -0.013428997248411179,
    0.007055733352899551,
    0.015682566910982132,
    0.009455038234591484,
    0.005879185162484646,
    0.04347895458340645,
    -0.0161944180727005,
    -0.02498120628297329,
    -0.006423027720302343,
    -0.012007187120616436,
    0.03557369112968445,
    0.03813295066356659,
    0.015000097453594208,
    0.010009543970227242,
    0.0009135130676440895,
    0.0146730812266469,
    -0.031194515526294708,
    0.00917067565023899,
    0.00011507776071084663,
    -0.009682527743279934,
    -0.028279805555939674,
    -0.012661219574511051,
    -0.01748826541006565,
    -0.025265567004680634,
    -0.012632783502340317,
    0.016478780657052994,
    0.005431314930319786,
    -0.017744190990924835,
    -0.009575892239809036,
    0.00415879487991333,
    -0.031791675835847855,
    -0.010094852186739445,
    -0.009519019164144993,
    -0.02722766622900963,
    -0.01876789517700672,
    0.029104454442858696,
    -0.009476365521550179,
    0.005601932294666767,
    0.011075901798903942,
    0.00711260549724102,
    -0.02670159563422203,
    -0.010692012496292591,
    -0.014929006807506084,
    -0.017360303550958633,
    0.01841244287788868,
    0.010151725262403488,
    0.0060889022424817085,
    0.04566854238510132,
    0.015056970529258251,
    0.006287955678999424,
    0.01354985125362873,
    0.015099624171853065,
    -0.013976394198834896,
    -0.0042512123472988605,
    -0.02409968338906765,
    -0.0003616729809436947,
    -0.02188165858387947,
    0.00033234813599847257,
    0.0025965808890759945,
    2.632570431160275e-05,
    0.021142316982150078,
    -0.007741756737232208,
    0.012014295905828476,
    0.020459849387407303,
    0.00024659521295689046,
    0.01929396390914917,
    -0.005488187540322542,
    -0.03668270260095596,
    -0.023374559357762337,
    0.0137631231918931,
    0.0011241186875849962,
    0.0068389070220291615,
    -0.03375377506017685,
    -0.03722299262881279,
    0.045867595821619034,
    -0.02107122726738453,
    0.034436244517564774,
    -0.000594938697759062,
    0.012163585983216763,
    0.002591249067336321,
    0.0020029752049595118,
    0.02845042198896408,
    0.02151198871433735,
    0.0040770405903458595,
    0.0027707526460289955,
    -0.024312954396009445,
    -0.021199190989136696,
    0.009099585004150867,
    0.01879633031785488,
    0.010578268207609653,
    0.002619685372337699,
    0.021170753985643387,
    0.018966948613524437,
    0.03850262239575386,
    0.006714498624205589,
    -0.01050006877630949,
    0.03201916441321373,
    -0.024341391399502754,
    0.0036753793247044086,
    -0.00219314219430089,
    -0.011978751048445702,
    -0.008218063041567802,
    0.009064040146768093,
    0.0040130591951310635,
    0.006533218082040548,
    -0.0024650634732097387,
    -0.0078697195276618,
    -0.005232261493802071,
    0.003746469970792532,
    0.006223974283784628,
    0.0171043761074543,
    0.02712813951075077,
    0.02499542385339737,
    0.03773484379053116,
    0.033924393355846405,
    0.00295203342102468,
    -0.01613754592835903,
    0.0023086643777787685,
    0.003981068730354309,
    0.036625832319259644,
    0.007098387461155653,
    -0.00855218805372715,
    -0.027042830362915993,
    0.040038175880908966,
    -0.007528485264629126,
    -0.0241707731038332,
    -0.051469530910253525,
    -0.001985202543437481,
    0.017274994403123856,
    0.019805816933512688,
    -0.04020879417657852,
    -0.0015133392298594117,
    -0.014786826446652412,
    0.010812866501510143,
    -0.005520178005099297,
    0.011786806397140026,
    -0.0070166331715881824,
    -0.022023839876055717,
    8.441998215857893e-05,
    0.008146972395479679,
    -0.009476365521550179,
    0.007208577822893858,
    0.009568782523274422,
    -0.02678690478205681,
    -0.007748865522444248,
    -0.03452155366539955,
    -0.054967183619737625,
    0.01711859554052353,
    0.037706408649683,
    0.03560212627053261,
    -0.027455154806375504,
    -0.00612444756552577,
    0.02809496968984604,
    0.01927974633872509,
    -0.010379214771091938,
    -0.0027103256434202194,
    -0.011296282522380352,
    0.04086282476782799,
    -0.025251349434256554,
    0.0015337778022512794,
    -0.003298599738627672,
    -0.01625129021704197,
    0.019180219620466232,
    0.017843717709183693,
    0.0009597219177521765,
    -0.026189744472503662,
    -0.007222795858979225,
    0.007997682318091393,
    0.019166002050042152,
    -0.025720546022057533,
    -0.01354985125362873,
    -0.012988236732780933,
    0.009284420870244503,
    0.0096540916711092,
    -0.03230352699756622,
    -0.025180259719491005,
    0.028606820851564407,
    -0.03423719108104706,
    -0.009782054461538792,
    0.019507236778736115,
    -0.018071208149194717,
    0.006636299192905426,
    -0.0014840144431218505,
    0.03904290869832039,
    -0.00590406684204936,
    0.03247414529323578,
    -0.016478780657052994,
    -0.0009295084164477885,
    -0.015199150890111923,
    -0.006981088314205408,
    -0.02104279026389122,
    0.008680151775479317,
    -0.013933739624917507,
    -0.00505453534424305,
    0.007109051104635,
    -0.02491011470556259,
    -0.04131780564785004,
    -0.05115673318505287,
    -0.004866145551204681,
    0.03167793154716492,
    0.015298677608370781,
    -0.016066456213593483,
    -0.014182556420564651,
    0.010635140351951122,
    -0.004244103562086821,
    -0.008296262472867966,
    -0.017900589853525162,
    0.017431393265724182,
    -0.02456887997686863,
    -0.013094872236251831,
    0.019535671919584274,
    0.011296282522380352,
    -0.00036678259493783116,
    -0.020402977243065834,
    -0.002733430126681924,
    -0.0023690913803875446,
    0.0002912489289883524,
    -0.032587889581918716,
    0.01660674251616001,
    -0.0136067233979702,
    -0.010635140351951122,
    0.019947996363043785,
    0.0009819376282393932,
    -0.022976452484726906,
    -0.02016126923263073,
    0.021369807422161102,
    0.02499542385339737,
    -0.011537989601492882,
    -0.011971642263233662,
    0.02937459945678711,
    0.013756013475358486,
    0.002717434661462903,
    0.010364996269345284,
    -0.0038637693505734205,
    -0.022109149023890495,
    0.027398282662034035,
    -0.03764953464269638,
    -0.017815282568335533,
    -0.009710963815450668,
    0.030028631910681725,
    0.019379273056983948,
    -0.03594336286187172,
    -0.025109168142080307,
    -0.0013196176150813699,
    -0.028663692995905876,
    -0.03255945444107056,
    -0.03540307283401489,
    0.03949788957834244,
    0.003474548691883683,
    0.004492920357733965,
    0.002937815384939313,
    0.01576787605881691,
    -0.01488635316491127,
    0.020431412383913994,
    -0.03116608038544655,
    8.475322101730853e-05,
    0.019023820757865906,
    -0.006419473327696323,
    -0.004315194208174944,
    -0.02277739904820919,
    -0.03116608038544655,
    0.004546238109469414,
    -0.0023619821295142174,
    0.02893383800983429,
    0.007855501025915146,
    0.040123485028743744,
    -0.0013480538036674261,
    -0.021839004009962082,
    -0.02324659749865532,
    0.00196565268561244,
    -0.002333546057343483,
    -0.01271098293364048,
    -0.017431393265724182,
    -0.032218217849731445,
    0.009135130792856216,
    0.00491235451772809,
    -0.014559336937963963,
    -0.016407689079642296,
    -0.008459771052002907,
    -0.01791480928659439,
    -0.022450383752584457,
    0.01118253730237484,
    -0.029516780748963356,
    0.01879633031785488,
    -0.017872154712677002,
    0.005043871700763702,
    -0.014701517298817635,
    -0.015000097453594208,
    -0.009455038234591484,
    0.003995286766439676,
    0.0070059699937701225,
    -0.011374481953680515,
    -0.02580585516989231,
    0.004869699943810701,
    -0.009703855030238628,
    0.016933759674429893,
    0.007101941853761673,
    -0.013521415181457996,
    -0.013194398954510689,
    -0.016777360811829567,
    0.015895837917923927,
    0.004702637437731028,
    0.009184894151985645,
    -0.011836569756269455,
    -0.02105700969696045,
    -0.011737043038010597,
    -0.001669738325290382,
    0.005150507669895887,
    0.0070130787789821625,
    -0.025094950571656227,
    -0.0004538684734143317,
    0.021611515432596207,
    -0.0002708104148041457,
    -0.02415655553340912,
    -0.011722825467586517,
    -0.01845509745180607,
    0.03244571015238762,
    -0.008054554462432861,
    -0.012561692856252193,
    -0.03110920824110508,
    -0.0096540916711092,
    0.00711615988984704,
    -0.013471651822328568,
    0.0025663673877716064,
    0.1697072684764862,
    0.011687279678881168,
    0.01839822344481945,
    0.041488420218229294,
    0.009924235753715038,
    0.003095991676673293,
    0.003513648407533765,
    -0.004485811106860638,
    -0.01336501631885767,
    0.009995325468480587,
    0.008971622213721275,
    0.006462127435952425,
    -0.03941258043050766,
    0.00017494930943939835,
    0.012355530634522438,
    -0.01926552876830101,
    -0.027469374239444733,
    -0.00014373612066265196,
    -0.024668406695127487,
    -0.001524002873338759,
    -0.0003721143875736743,
    -0.01181524246931076,
    -0.018213389441370964,
    -0.028805874288082123,
    0.024355608969926834,
    0.0006340384716168046,
    -0.0412040613591671,
    0.003924196120351553,
    0.02940303459763527,
    0.017374521121382713,
    -0.04160216823220253,
    -0.009483474306762218,
    -0.002079397439956665,
    -0.01180102489888668,
    -0.0014369169948622584,
    -0.021213408559560776,
    0.023829538375139236,
    -0.0024135229177773,
    0.017004849389195442,
    0.018981166183948517,
    -0.009035604074597359,
    -0.017388738691806793,
    -0.013258379884064198,
    -0.03281537815928459,
    -0.00537088792771101,
    -0.0033110405784100294,
    -0.014324737712740898,
    -0.02317550592124462,
    0.009583001025021076,
    -0.008168299682438374,
    -0.03116608038544655,
    -0.0016128659481182694,
    0.029488343745470047,
    0.025166040286421776,
    -0.008502424694597721,
    -0.025265567004680634,
    0.03469216823577881,
    0.031791675835847855,
    0.029232418164610863,
    0.019820034503936768,
    0.013180180452764034,
    0.01794324442744255,
    -0.03452155366539955,
    0.02763999067246914,
    -0.062047798186540604,
    0.0131517443805933,
    -0.013393452391028404,
    0.025720546022057533,
    0.01354985125362873,
    0.02459731698036194,
    -0.00961854588240385,
    -0.016336599364876747,
    -0.008196735754609108,
    0.012142259627580643,
    -0.01964941807091236,
    -0.017829500138759613,
    0.014381609857082367,
    0.030568920075893402,
    0.009703855030238628,
    0.025621019303798676,
    0.012128041125833988,
    0.027824826538562775,
    -0.016322381794452667,
    0.0083246985450387,
    -0.009270202368497849,
    -0.026459887623786926,
    0.011218082159757614,
    -0.026203962042927742,
    -0.011488226242363453,
    -0.006081792991608381,
    -0.040976569056510925,
    -0.02590538188815117,
    -0.006067574955523014,
    -0.0146730812266469,
    0.007770192809402943,
    0.010748885571956635,
    0.003458553459495306,
    0.020388757809996605,
    0.0006415918469429016,
    0.007400522008538246,
    -0.044388916343450546,
    0.04475858435034752,
    -0.00506164412945509,
    0.008737023919820786,
    -0.02195275016129017,
    0.005601932294666767,
    -0.00657231779769063,
    0.0008508645696565509,
    -3.882208329741843e-05,
    -0.0037251426838338375,
    0.022222893312573433,
    -0.03818982094526291,
    0.0032612772192806005,
    -0.010045088827610016,
    0.014317628927528858,
    0.02461153455078602,
    0.001253858907148242,
    -0.009263093583285809,
    -0.024767933413386345,
    0.008047445677220821,
    0.01140291802585125,
    -0.0014067034935578704,
    -0.004165904130786657,
    -0.008445552550256252,
    -0.011225191876292229,
    -0.01625129021704197,
    0.003206182038411498,
    -0.035744309425354004,
    -0.005939612165093422,
    0.006920661311596632,
    0.004581783432513475,
    -0.0004132135945837945,
    0.04871121793985367,
    0.006255964748561382,
    -0.0032186228781938553,
    -0.04251212626695633,
    -0.010386323556303978,
    -0.023829538375139236,
    -0.03631303459405899,
    0.0196920707821846,
    -0.014687299728393555,
    -0.0009748286101967096,
    0.010158834047615528,
    -0.008502424694597721,
    0.00568013172596693,
    -0.04689130187034607,
    0.017445610836148262,
    0.014857917092740536,
    -0.00589695805683732,
    0.000508297176565975,
    -0.030967026948928833,
    -0.02535087615251541,
    -0.02011861465871334,
    -0.010663576424121857,
    0.007599575445055962,
    -0.025649456307291985,
    -0.008239390328526497,
    -0.02358783222734928,
    0.026061780750751495,
    -0.008786787278950214,
    -0.031763240694999695,
    -0.008047445677220821,
    0.017658883705735207,
    0.002381532220169902,
    -0.03981068730354309,
    0.004546238109469414,
    -0.18119549751281738,
    -0.0009126244112849236,
    0.017317648977041245,
    -0.04481545835733414,
    0.020801084116101265,
    -0.02055937610566616,
    0.002068733796477318,
    -0.008189626969397068,
    -0.010151725262403488,
    -0.017758410423994064,
    0.01745983026921749,
    -0.011146992444992065,
    -0.006810470949858427,
    -0.05772549286484718,
    0.01405459363013506,
    0.002985801547765732,
    -0.013080653734505177,
    -0.011061683297157288,
    0.042739614844322205,
    0.014317628927528858,
    0.04291023313999176,
    -0.0192370917648077,
    0.021128099411725998,
    -0.0031741913408041,
    0.024270299822092056,
    -0.01444559171795845,
    -0.007848392240703106,
    0.0098460353910923,
    -0.0012520815944299102,
    -0.0037109246477484703,
    -0.01706172339618206,
    0.00810431782156229,
    0.02810918726027012,
    0.004247657954692841,
    0.006853125058114529,
    -0.0009197334875352681,
    0.024384045973420143,
    -0.016478780657052994,
    0.005228707101196051,
    0.011530880816280842,
    0.008011900819838047,
    0.028194496408104897,
    -0.014929006807506084,
    -0.0038211150094866753,
    0.0054490878246724606,
    0.01293136365711689,
    0.023061761632561684,
    -0.027270320802927017,
    0.018924294039607048,
    -0.04655006527900696,
    0.026132872328162193,
    -0.02230820246040821,
    -0.008673042058944702,
    -0.020289231091737747,
    0.020431412383913994,
    0.0011596640106290579,
    -0.0006971313268877566,
    0.006604308262467384,
    0.008964513428509235,
    -0.03671114146709442,
    -0.014097248204052448,
    -0.02535087615251541,
    0.023104416206479073,
    -0.012156477198004723,
    -0.001715058577246964,
    0.008026118390262127,
    -0.021128099411725998,
    0.018241824582219124,
    -0.016919542104005814,
    -0.009575892239809036,
    0.010812866501510143,
    -0.01012328825891018,
    0.028208713978528976,
    -0.009156458079814911,
    0.0332987941801548,
    0.01421099342405796,
    -0.03193385899066925,
    0.02324659749865532,
    0.02373001165688038,
    -0.005441978573799133,
    -0.0019461027113720775,
    0.03722299262881279,
    0.028763219714164734,
    -0.0035651891957968473,
    -0.0031350916251540184,
    0.004713301081210375,
    -0.015142278745770454,
    0.008786787278950214,
    -0.014132793061435223,
    0.002159374300390482,
    0.02891962043941021,
    0.007137487176805735,
    0.010855521075427532,
    -0.0020420749206095934,
    -0.005321124568581581,
    0.005978711880743504,
    0.018668368458747864,
    -0.010030871257185936,
    0.005317570175975561,
    -0.029658960178494453,
    0.006938433740288019,
    -0.001555993570946157,
    0.004866145551204681,
    -0.0037749060429632664,
    0.05121360346674919,
    0.02242194674909115,
    -0.031023899093270302,
    0.021170753985643387,
    0.025521492585539818,
    0.010301015339791775,
    -0.04993397369980812,
    -0.005747667979449034,
    0.014509573578834534,
    0.019365055486559868,
    0.022137584164738655,
    0.013343689031898975,
    -0.007237013895064592,
    -0.03250258043408394,
    -0.007421849295496941,
    -0.009959780611097813,
    0.023573612794280052,
    0.013969285413622856,
    -0.019166002050042152,
    0.026815339922904968,
    -0.01748826541006565,
    -0.02455466240644455,
    -0.09059774875640869,
    -0.03019924834370613,
    0.005175389349460602,
    0.027782171964645386,
    0.006774925626814365,
    -0.003286158898845315,
    0.005086525809019804,
    0.03446467965841293,
    0.0002350430004298687,
    0.002317550592124462,
    -0.010784430429339409,
    0.017417175695300102,
    -0.021753696724772453,
    0.0073578679002821445,
    -0.04205714538693428,
    0.01834135130047798,
    -0.00702374242246151,
    -0.014402937144041061,
    0.0055663869716227055,
    0.023573612794280052,
    -0.002824070630595088,
    -0.009981107898056507,
    0.007165923248976469,
    0.003970405086874962,
    -0.005040317308157682,
    0.009142239578068256,
    -0.025109168142080307,
    0.03648364916443825,
    -0.008943186141550541,
    0.012056950479745865,
    0.005356669891625643,
    -0.005228707101196051,
    -0.006472791079431772,
    -0.04109031334519386,
    0.0021647061221301556,
    -0.0136067233979702,
    -0.023445650935173035,
    -0.03227509185671806,
    0.04945055767893791,
    -0.0218958780169487,
    0.012455057352781296,
    0.01488635316491127,
    0.015867402777075768,
    0.0072938865050673485,
    -0.020047523081302643,
    0.005836531054228544,
    -0.017274994403123856,
    0.0404362827539444,
    -0.0081327548250556,
    -0.018312916159629822,
    -0.053289446979761124,
    -0.014139902777969837,
    -0.0060853478498756886,
    0.006337719038128853,
    0.03855949267745018,
    0.015639912337064743,
    0.026132872328162193,
    0.015895837917923927,
    -0.018568841740489006,
    -0.02233663760125637,
    0.00024837246746756136,
    0.009767835959792137,
    0.006931324955075979,
    0.011530880816280842,
    -0.015711002051830292,
    0.0036931519862264395,
    -0.006682508159428835,
    0.000556283222977072,
    0.005477523896843195,
    -0.002745870966464281,
    -0.006643408443778753,
    0.006714498624205589,
    -0.026900649070739746,
    0.01575365662574768,
    -0.02495276927947998,
    0.0018945621559396386,
    -0.012334203347563744,
    -0.0019638752564787865,
    0.025962254032492638,
    -0.01753091998398304,
    0.004759509582072496,
    -0.004581783432513475,
    -0.02708548493683338,
    -0.01181524246931076,
    0.02151198871433735,
    0.007741756737232208,
    0.00778441084548831,
    -0.009255984798073769,
    0.023075979202985764,
    -0.03821825981140137,
    0.008928968571126461,
    0.00020960593246854842,
    0.01578209362924099,
    -0.023459868505597115,
    -0.018597276881337166,
    -0.02714235708117485,
    -0.007414740044623613,
    -0.006760707590728998,
    -0.03028455749154091,
    0.0009090699022635818,
    -0.04416142404079437,
    -0.0001039698690874502,
    -0.08183939754962921,
    0.012490603141486645,
    -0.0005660582100972533,
    -0.02985801361501217,
    0.003874432761222124,
    0.00777730206027627,
    0.019962215796113014,
    -0.028393549844622612,
    -0.003307485952973366,
    0.01229154970496893,
    -0.027497809380292892,
    -0.005488187540322542,
    0.0028702793642878532,
    -0.013535633683204651,
    -0.01579631119966507,
    -0.009035604074597359,
    0.03764953464269638,
    -0.0025023859925568104,
    0.02051672153174877,
    0.017331866547465324,
    0.007386303972452879,
    -0.0061990926042199135,
    0.019180219620466232,
    0.02023235894739628,
    -0.030085504055023193,
    0.01072755828499794,
    -0.010578268207609653,
    -0.004627992399036884,
    -0.016521435230970383,
    -0.023346124216914177,
    -0.01163751631975174,
    -0.002809852361679077,
    0.006515445187687874,
    0.02407124638557434,
    0.026587851345539093,
    0.021341370418667793,
    0.001156998099759221,
    0.021170753985643387,
    0.009803381748497486,
    0.01162329874932766,
    -0.009590109810233116,
    -0.024810587987303734,
    -0.0017888150177896023,
    -0.005441978573799133,
    -0.02631770633161068,
    -0.017303429543972015,
    0.008836550638079643,
    0.010791539214551449,
    0.014744171872735023,
    0.017417175695300102,
    0.009867362678050995,
    0.0018767894944176078,
    -0.04421829804778099,
    -0.03585805371403694,
    0.011146992444992065,
    -0.028606820851564407,
    -0.0031333141960203648,
    0.010990592651069164,
    -0.0437917560338974,
    -0.007276113610714674,
    0.04686286300420761,
    0.026076000183820724,
    0.016322381794452667,
    0.015668349340558052,
    0.01836978830397129,
    0.005303352139890194,
    -0.036568958312273026,
    -0.0018394669750705361,
    0.05121360346674919,
    -0.03156418725848198,
    -0.025137605145573616,
    -0.0340665727853775,
    -0.003318149596452713,
    0.023872192949056625,
    0.03855949267745018,
    -0.012583020143210888,
    -0.0031706367153674364,
    0.015696784481406212,
    0.009255984798073769,
    0.033981263637542725,
    0.018298696726560593,
    -0.004549792502075434,
    -0.03290068730711937,
    0.004173012915998697,
    0.03423719108104706,
    -0.022507255896925926,
    -0.011019028723239899,
    -0.001191654708236456,
    0.011019028723239899,
    0.004087704233825207,
    -0.020360322669148445,
    0.017360303550958633,
    -0.027014393359422684,
    0.0041801221668720245,
    -0.019379273056983948,
    -0.0025468175299465656,
    -0.012341313064098358,
    0.0028987156692892313,
    0.029573652893304825,
    -0.005498851183801889,
    0.011203864589333534,
    0.007162368856370449,
    0.017417175695300102,
    0.0009108471567742527,
    0.01006641611456871,
    -0.011445572599768639,
    -0.012860273011028767,
    -0.025237131863832474,
    -0.007308104541152716,
    -0.017289211973547935,
    0.013869758695363998,
    -0.013215726241469383,
    -0.018739458173513412,
    0.007194359786808491,
    -0.0042974213138222694,
    0.028578385710716248,
    0.0016635179053992033,
    -0.01293136365711689,
    0.0031830775551497936,
    -0.01202140562236309,
    -0.0032097366638481617,
    0.00809720903635025,
    0.009533237665891647,
    -0.003828224027529359,
    0.02108544483780861,
    -0.010855521075427532,
    0.026189744472503662,
    -0.01313752681016922,
    -0.005488187540322542,
    0.003838887671008706,
    0.005708567798137665,
    0.02360204979777336,
    -0.01802855357527733,
    -0.022251330316066742,
    0.015952710062265396,
    0.004596001468598843,
    -0.012874491512775421,
    -0.032218217849731445,
    -0.012611456215381622,
    0.08314745873212814,
    0.02057359367609024,
    -0.02098591811954975,
    -0.01315885316580534,
    0.009511910378932953,
    0.005260697565972805,
    0.0025948036927729845,
    0.019564108923077583,
    -0.02055937610566616,
    -0.013208616524934769,
    0.01332947053015232,
    -0.02407124638557434,
    -0.025109168142080307,
    0.019023820757865906,
    -0.0157394390553236,
    0.009511910378932953,
    -0.03108077123761177,
    0.02985801361501217,
    -0.0038495510816574097,
    0.006167101673781872,
    0.026033345609903336,
    0.016009582206606865,
    0.016464563086628914,
    -0.022151803597807884,
    -0.01797168143093586,
    -0.01354985125362873,
    0.04370644688606262,
    0.007962137460708618,
    0.0013942626537755132,
    -0.02803809754550457,
    0.016834232956171036,
    0.014772607944905758,
    -0.011950314976274967,
    -0.019947996363043785,
    -0.01973472535610199,
    -0.0032737180590629578,
    0.0011338936164975166,
    -0.003380353795364499,
    0.032388836145401,
    -0.02098591811954975,
    0.010201488621532917,
    0.004791500512510538,
    -0.011992969550192356,
    -0.03981068730354309,
    0.017815282568335533,
    -0.0024046364706009626,
    -0.01094793900847435,
    0.014097248204052448,
    -0.04242681711912155
  ]
}
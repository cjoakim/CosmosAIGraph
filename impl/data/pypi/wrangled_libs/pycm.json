{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: developers",
    "intended audience :: education",
    "intended audience :: end users/desktop",
    "intended audience :: manufacturing",
    "intended audience :: science/research",
    "license :: osi approved :: mit license",
    "natural language :: english",
    "operating system :: os independent",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.6",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: education",
    "topic :: scientific/engineering",
    "topic :: scientific/engineering :: artificial intelligence",
    "topic :: scientific/engineering :: human machine interfaces",
    "topic :: scientific/engineering :: information analysis",
    "topic :: scientific/engineering :: mathematics",
    "topic :: scientific/engineering :: physics"
  ],
  "description": "multi-class confusion matrix library in python\n\n<div align=\"center\">\n<img src=\"https://github.com/sepandhaghighi/pycm/raw/master/otherfiles/logo.png\" width=\"550\">\n<h1>pycm: python confusion matrix</h1>\n<br/>\n<a href=\"https://www.python.org/\"><img src=\"https://img.shields.io/badge/built%20with-python3-green.svg\" alt=\"built with python3\" /></a>\n<a href=\"/document\"><img src=\"https://img.shields.io/badge/doc-latest-orange.svg\"></a>\n<a href=\"https://codecov.io/gh/sepandhaghighi/pycm\">\n  <img src=\"https://codecov.io/gh/sepandhaghighi/pycm/branch/master/graph/badge.svg\" />\n</a>\n<a href=\"https://badge.fury.io/py/pycm\"><img src=\"https://badge.fury.io/py/pycm.svg\" alt=\"pypi version\" height=\"18\"></a>\n<a href=\"https://anaconda.org/sepandhaghighi/pycm\"><img src=\"https://anaconda.org/sepandhaghighi/pycm/badges/version.svg\"></a>\n<a href=\"https://colab.research.google.com/github/sepandhaghighi/pycm/blob/master\">\n  <img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"document\"/>\n</a>\n<a href=\"https://discord.com/invite/zqpu2b3j3f\">\n  <img src=\"https://img.shields.io/discord/901883546162065408.svg\" alt=\"discord channel\">\n</a>\n</div>\n\n## table of contents\n   * [overview](https://github.com/sepandhaghighi/pycm#overview)\n   * [installation](https://github.com/sepandhaghighi/pycm#installation)\n   * [usage](https://github.com/sepandhaghighi/pycm#usage)\n   * [document](https://github.com/sepandhaghighi/pycm/tree/master/document)\n   * [try pycm in your browser](https://github.com/sepandhaghighi/pycm#try-pycm-in-your-browser)\n   * [issues & bug reports](https://github.com/sepandhaghighi/pycm#issues--bug-reports)\n   * [todo](https://github.com/sepandhaghighi/pycm/blob/master/todo.md)\n   * [contribution](https://github.com/sepandhaghighi/pycm/blob/master/.github/contributing.md)\n   * [acknowledgments](https://github.com/sepandhaghighi/pycm#acknowledgments)\n   * [cite](https://github.com/sepandhaghighi/pycm#cite)\n   * [authors](https://github.com/sepandhaghighi/pycm/blob/master/authors.md)\n   * [license](https://github.com/sepandhaghighi/pycm/blob/master/license)\n   * [show your support](https://github.com/sepandhaghighi/pycm#show-your-support)\n   * [changelog](https://github.com/sepandhaghighi/pycm/blob/master/changelog.md)\n   * [code of conduct](https://github.com/sepandhaghighi/pycm/blob/master/.github/code_of_conduct.md)\n\n## overview\n\n<p align=\"justify\">\t\npycm is a multi-class confusion matrix library written in python that supports both input data vectors and direct matrix, and a proper tool for post-classification model evaluation that supports most classes and overall statistics parameters.\npycm is the swiss-army knife of confusion matrices, targeted mainly at data scientists that need a broad array of metrics for predictive models and accurate evaluation of a large variety of classifiers.\n\n</p>\n\n<div align=\"center\">\n<img src=\"https://github.com/sepandhaghighi/pycm/raw/master/otherfiles/block_diagram.jpg\">\n<p>fig1. confusionmatrix block diagram</p>\n</div>\n\n<table>\n\t<tr>\n\t\t<td align=\"center\">open hub</td>\n\t\t<td align=\"center\"><a href=\"https://www.openhub.net/p/pycm\"><img src=\"https://www.openhub.net/p/pycm/widgets/project_thin_badge.gif\"></a></td>\n\t</tr>\n\t<tr>\n\t\t<td align=\"center\">pypi counter</td>\n\t\t<td align=\"center\"><a href=\"http://pepy.tech/project/pycm\"><img src=\"http://pepy.tech/badge/pycm\"></a></td>\n\t</tr>\n\t<tr>\n\t\t<td align=\"center\">github stars</td>\n\t\t<td align=\"center\"><a href=\"https://github.com/sepandhaghighi/pycm\"><img src=\"https://img.shields.io/github/stars/sepandhaghighi/pycm.svg?style=social&label=stars\"></a></td>\n\t</tr>\n</table>\n\n\n\n<table>\n\t<tr> \n\t\t<td align=\"center\">branch</td>\n\t\t<td align=\"center\">master</td>\n\t\t<td align=\"center\">dev</td>\n\t</tr>\n    <tr>\n\t\t<td align=\"center\">ci</td>\n\t\t<td align=\"center\"><img src=\"https://github.com/sepandhaghighi/pycm/workflows/ci/badge.svg?branch=master\"></td>\n\t\t<td align=\"center\"><img src=\"https://github.com/sepandhaghighi/pycm/workflows/ci/badge.svg?branch=dev\"></td>\n\t</tr>\n</table>\n\n\n<table>\n\t<tr> \n\t\t<td align=\"center\">code quality</td>\n\t\t<td align=\"center\"><a class=\"badge-align\" href=\"https://www.codacy.com/app/sepand-haghighi/pycm?utm_source=github.com&amp;utm_medium=referral&amp;utm_content=sepandhaghighi/pycm&amp;utm_campaign=badge_grade\"><img src=\"https://api.codacy.com/project/badge/grade/5d9463998a0040d09afc2b80c389365c\"/></a></td>\n\t\t<td align=\"center\"><a href=\"https://www.codefactor.io/repository/github/sepandhaghighi/pycm/overview/dev\"><img src=\"https://www.codefactor.io/repository/github/sepandhaghighi/pycm/badge/dev\" alt=\"codefactor\" /></a></td>\n\t\t<td align=\"center\"><a href=\"https://codebeat.co/projects/github-com-sepandhaghighi-pycm-dev\"><img alt=\"codebeat badge\" src=\"https://codebeat.co/badges/f6642af1-c343-48c2-bd3e-eee802facf39\" /></a></td>\n\t</tr>\n</table>\n\n## installation\n\n\u26a0\ufe0f  pycm 3.9 is the last version to support **python 3.5**\n\n\u26a0\ufe0f  pycm 2.4 is the last version to support **python 2.7** & **python 3.4**\n\n\u26a0\ufe0f  plotting capability requires **matplotlib (>= 3.0.0)** or **seaborn (>= 0.9.1)**\n\n### source code\n- download [version 4.0](https://github.com/sepandhaghighi/pycm/archive/v4.0.zip) or [latest source ](https://github.com/sepandhaghighi/pycm/archive/dev.zip)\n- run `pip install -r requirements.txt` or `pip3 install -r requirements.txt` (need root access)\n- run `python3 setup.py install` or `python setup.py install` (need root access)\n\n### pypi\n\n- check [python packaging user guide](https://packaging.python.org/installing/)\n- run `pip install pycm==4.0` or `pip3 install pycm==4.0` (need root access)\n\n### conda\n\n- check [conda managing package](https://conda.io/)\n- update conda using `conda update conda` (need root access)\n- run `conda install -c sepandhaghighi pycm` (need root access)\n\n### easy install\n\n- run `easy_install --upgrade pycm` (need root access)\n\n### matlab\n\n- download and install [matlab](https://www.mathworks.com/products/matlab.html) (>=8.5, 64/32 bit)\n- download and install [python3.x](https://www.python.org/downloads/) (>=3.6, 64/32 bit)\n\t- [x] select `add to path` option\n\t- [x] select `install pip` option\n- run `pip install pycm` or `pip3 install pycm` (need root access)\n- configure python interpreter\n\n```matlab\n>> pyversion python_executable_full_path\n```\n\n- visit [matlab examples](https://github.com/sepandhaghighi/pycm/tree/master/matlab)\n\n## usage\n\n### from vector\n\n```pycon\n>>> from pycm import *\n>>> y_actu = [2, 0, 2, 2, 0, 1, 1, 2, 2, 0, 1, 2]\n>>> y_pred = [0, 0, 2, 1, 0, 2, 1, 0, 2, 0, 2, 2]\n>>> cm = confusionmatrix(actual_vector=y_actu, predict_vector=y_pred)\n>>> cm.classes\n[0, 1, 2]\n>>> cm.table\n{0: {0: 3, 1: 0, 2: 0}, 1: {0: 0, 1: 1, 2: 2}, 2: {0: 2, 1: 1, 2: 3}}\n>>> cm.print_matrix()\npredict 0       1       2       \nactual\n0       3       0       0       \n\n1       0       1       2       \n\n2       2       1       3   \n\n>>> cm.print_normalized_matrix()\npredict       0             1             2             \nactual\n0             1.0           0.0           0.0           \n\n1             0.0           0.33333       0.66667       \n\n2             0.33333       0.16667       0.5          \n\n>>> cm.stat(summary=true)\noverall statistics : \n\nacc macro                                                         0.72222\nf1 macro                                                          0.56515\nfpr macro                                                         0.22222\nkappa                                                             0.35484\noverall acc                                                       0.58333\nppv macro                                                         0.56667\nsoa1(landis & koch)                                               fair\ntpr macro                                                         0.61111\nzero-one loss                                                     5\n\nclass statistics :\n\nclasses                                                           0             1             2             \nacc(accuracy)                                                     0.83333       0.75          0.58333       \nauc(area under the roc curve)                                     0.88889       0.61111       0.58333       \nauci(auc value interpretation)                                    very good     fair          poor          \nf1(f1 score - harmonic mean of precision and sensitivity)         0.75          0.4           0.54545       \nfn(false negative/miss/type 2 error)                              0             2             3             \nfp(false positive/type 1 error/false alarm)                       2             1             2             \nfpr(fall-out or false positive rate)                              0.22222       0.11111       0.33333       \nn(condition negative)                                             9             9             6             \np(condition positive or support)                                  3             3             6             \npop(population)                                                   12            12            12            \nppv(precision or positive predictive value)                       0.6           0.5           0.6           \ntn(true negative/correct rejection)                               7             8             4             \nton(test outcome negative)                                        7             10            7             \ntop(test outcome positive)                                        5             2             5             \ntp(true positive/hit)                                             3             1             3             \ntpr(sensitivity, recall, hit rate, or true positive rate)         1.0           0.33333       0.5 \n\n```\n\n### direct cm\n\n```pycon\n>>> from pycm import *\n>>> cm2 = confusionmatrix(matrix={\"class1\": {\"class1\": 1, \"class2\": 2}, \"class2\": {\"class1\": 0, \"class2\": 5}})\n>>> cm2\npycm.confusionmatrix(classes: ['class1', 'class2'])\n>>> cm2.classes\n['class1', 'class2']\n>>> cm2.print_matrix()\npredict      class1       class2       \nactual\nclass1       1            2            \n\nclass2       0            5            \n\n>>> cm2.print_normalized_matrix()\npredict       class1        class2        \nactual\nclass1        0.33333       0.66667       \n\nclass2        0.0           1.0 \n\n>>> cm2.stat(summary=true)\noverall statistics : \n\nacc macro                                                         0.75\nf1 macro                                                          0.66667\nfpr macro                                                         0.33333\nkappa                                                             0.38462\noverall acc                                                       0.75\nppv macro                                                         0.85714\nsoa1(landis & koch)                                               fair\ntpr macro                                                         0.66667\nzero-one loss                                                     2\n\nclass statistics :\n\nclasses                                                           class1        class2        \nacc(accuracy)                                                     0.75          0.75          \nauc(area under the roc curve)                                     0.66667       0.66667       \nauci(auc value interpretation)                                    fair          fair          \nf1(f1 score - harmonic mean of precision and sensitivity)         0.5           0.83333       \nfn(false negative/miss/type 2 error)                              2             0             \nfp(false positive/type 1 error/false alarm)                       0             2             \nfpr(fall-out or false positive rate)                              0.0           0.66667       \nn(condition negative)                                             5             3             \np(condition positive or support)                                  3             5             \npop(population)                                                   8             8             \nppv(precision or positive predictive value)                       1.0           0.71429       \ntn(true negative/correct rejection)                               5             1             \nton(test outcome negative)                                        7             1             \ntop(test outcome positive)                                        1             7             \ntp(true positive/hit)                                             1             5             \ntpr(sensitivity, recall, hit rate, or true positive rate)         0.33333       1.0\n     \n```\n\n* `matrix()` and `normalized_matrix()` renamed to `print_matrix()` and `print_normalized_matrix()` in `version 1.5`\n\n### activation threshold\n\n`threshold` is added in `version 0.9` for real value prediction.\nfor more information visit [example3](http://www.pycm.io/doc/example3.html \"example3\")\n\n### load from file\n\n`file` is added in `version 0.9.5` in order to load saved confusion matrix with `.obj` format generated by `save_obj` method.\n\nfor more information visit [example4](http://www.pycm.io/doc/example4.html \"example4\")\n\n### sample weights\n\n`sample_weight` is added in `version 1.2`\n\nfor more information visit [example5](http://www.pycm.io/doc/example5.html \"example5\")\n\n### transpose\n\n`transpose` is added in `version 1.2` in order to transpose input matrix (only in `direct cm` mode)\n\n### relabel\n\n`relabel` method is added in `version 1.5` in order to change confusionmatrix classnames.\n\n```pycon\n>>> cm.relabel(mapping={0: \"l1\", 1: \"l2\", 2: \"l3\"})\n>>> cm\npycm.confusionmatrix(classes: ['l1', 'l2', 'l3'])\n```\n\n### position\n\n`position` method is added in `version 2.8` in order to find the indexes of observations in `predict_vector` which made tp, tn, fp, fn.\n\n```pycon\n>>> cm.position()\n{0: {'fn': [], 'fp': [0, 7], 'tp': [1, 4, 9], 'tn': [2, 3, 5, 6, 8, 10, 11]}, 1: {'fn': [5, 10], 'fp': [3], 'tp': [6], 'tn': [0, 1, 2, 4, 7, 8, 9, 11]}, 2: {'fn': [0, 3, 7], 'fp': [5, 10], 'tp': [2, 8, 11], 'tn': [1, 4, 6, 9]}}\n```\n\n### to array\n\n`to_array` method is added in `version 2.9` in order to returns the confusion matrix in the form of a numpy array. this can be helpful to apply different operations over the confusion matrix for different purposes such as aggregation, normalization, and combination.\n\n```pycon\n>>> cm.to_array()\narray([[3, 0, 0],\n       [0, 1, 2],\n       [2, 1, 3]])\n>>> cm.to_array(normalized=true)\narray([[1.     , 0.     , 0.     ],\n       [0.     , 0.33333, 0.66667],\n       [0.33333, 0.16667, 0.5    ]])\n>>> cm.to_array(normalized=true, one_vs_all=true, class_name=\"l1\")\narray([[1.     , 0.     ],\n       [0.22222, 0.77778]])\n```\n\n### combine\n\n`combine` method is added in `version 3.0` in order to merge two confusion matrices. this option will be useful in mini-batch learning.\n\n```pycon\n>>> cm_combined = cm2.combine(cm3)\n>>> cm_combined.print_matrix()\npredict      class1       class2       \nactual\nclass1       2            4            \n\nclass2       0            10           \n\n```\n\n### plot\n\n`plot` method is added in `version 3.0` in order to plot a confusion matrix using matplotlib or seaborn.\n\n```pycon\n>>> cm.plot()\n```\n\n<img src=\"https://github.com/sepandhaghighi/pycm/raw/master/otherfiles/plot1.png\">\n\n```pycon\n>>> from matplotlib import pyplot as plt\n>>> cm.plot(cmap=plt.cm.greens, number_label=true, plot_lib=\"matplotlib\")\n```\n\n<img src=\"https://github.com/sepandhaghighi/pycm/raw/master/otherfiles/plot2.png\">\t\t\n\n```pycon\n>>> cm.plot(cmap=plt.cm.reds, normalized=true, number_label=true, plot_lib=\"seaborn\")\n```\n\n<img src=\"https://github.com/sepandhaghighi/pycm/raw/master/otherfiles/plot3.png\">\n\n### roc curve\n\n`roccurve`, added in `version 3.7`, is devised to compute the receiver operating characteristic (roc) or simply roc curve. in roc curves, the y axis represents the true positive rate, and the x axis represents the false positive rate. thus, the ideal point is located at the top left of the curve, and a larger area under the curve represents better performance. roc curve is a graphical representation of binary classifiers' performance. in pycm, `roccurve` binarizes the output based on the \"one vs. rest\" strategy to provide an extension of roc for multi-class classifiers. getting the actual labels vector, the target probability estimates of the positive classes, and the list of ordered labels of classes, this method is able to compute and plot tpr-fpr pairs for different discrimination thresholds and compute the area under the roc curve.\n\n```pycon\n>>> crv = roccurve(actual_vector=np.array([1, 1, 2, 2]), probs=np.array([[0.1, 0.9], [0.4, 0.6], [0.35, 0.65], [0.8, 0.2]]), classes=[2, 1])\n>>> crv.thresholds\n[0.1, 0.2, 0.35, 0.4, 0.6, 0.65, 0.8, 0.9]\n>>> auc_trp = crv.area()\n>>> auc_trp[1]\n0.75\n>>> auc_trp[2]\n0.75\n```\n\n### precision-recall curve\n\n`prcurve`, added in `version 3.7`, is devised to compute the precision-recall curve in which the y axis represents the precision, and the x axis represents the recall of a classifier. thus, the ideal point is located at the top right of the curve, and a larger area under the curve represents better performance. precision-recall curve is a graphical representation of binary classifiers' performance. in pycm, `prcurve` binarizes the output based on the \"one vs. rest\" strategy to provide an extension of this curve for multi-class classifiers. getting the actual labels vector, the target probability estimates of the positive classes, and the list of ordered labels of classes, this method is able to compute and plot precision-recall pairs for different discrimination thresholds and compute the area under the curve.\n\n```pycon\n>>> crv = prcurve(actual_vector=np.array([1, 1, 2, 2]), probs=np.array([[0.1, 0.9], [0.4, 0.6], [0.35, 0.65], [0.8, 0.2]]), classes=[2, 1])\n>>> crv.thresholds\n[0.1, 0.2, 0.35, 0.4, 0.6, 0.65, 0.8, 0.9]\n>>> auc_trp = crv.area()\n>>> auc_trp[1]\n0.29166666666666663\n>>> auc_trp[2]\n0.29166666666666663\n```\n\n### parameter recommender\n\nthis option has been added in `version 1.9` to recommend the most related parameters considering the characteristics of the input dataset.\nthe suggested parameters are selected according to some characteristics of the input such as being balance/imbalance and binary/multi-class.\nall suggestions can be categorized into three main groups: imbalanced dataset, binary classification for a balanced dataset, and multi-class classification for a balanced dataset.\nthe recommendation lists have been gathered according to the respective paper of each parameter and the capabilities which had been claimed by the paper.\n\n```pycon\n>>> cm.imbalance\nfalse\n>>> cm.binary\nfalse\n>>> cm.recommended_list\n['mcc', 'tpr micro', 'acc', 'ppv macro', 'bcd', 'overall mcc', 'hamming loss', 'tpr macro', 'zero-one loss', 'err', 'ppv micro', 'overall acc']\n\n```\n\n`is_imbalanced` parameter has been added in `version 3.3`, so the user can indicate whether the concerned dataset is imbalanced or not. as long as the user does not provide any information in this regard, the automatic detection algorithm will be used.\n\n```pycon\n>>> cm = confusionmatrix(y_actu, y_pred, is_imbalanced=true)\n>>> cm.imbalance\ntrue\n>>> cm = confusionmatrix(y_actu, y_pred, is_imbalanced=false)\n>>> cm.imbalance\nfalse\n```\n\n### compare\n\nin `version 2.0`, a method for comparing several confusion matrices is introduced. this option is a combination of several overall and class-based benchmarks. each of the benchmarks evaluates the performance of the classification algorithm from good to poor and give them a numeric score. the score of good and poor performances are 1 and 0, respectively.\n\nafter that, two scores are calculated for each confusion matrices, overall and class-based. the overall score is the average of the score of seven overall benchmarks which are landis & koch, cramer, matthews, goodman-kruskal's lambda a, goodman-kruskal's lambda b, krippendorff's alpha, and pearson's c. in the same manner, the class-based score is the average of the score of six class-based benchmarks which are positive likelihood ratio interpretation, negative likelihood ratio interpretation, discriminant power interpretation, auc value interpretation, matthews correlation coefficient interpretation and yule's q interpretation. it should be noticed that if one of the benchmarks returns none for one of the classes, that benchmarks will be eliminated in total averaging. if the user sets weights for the classes, the averaging over the value of class-based benchmark scores will transform to a weighted average.\n\nif the user sets the value of `by_class` boolean input `true`, the best confusion matrix is the one with the maximum class-based score. otherwise, if a confusion matrix obtains the maximum of both overall and class-based scores, that will be reported as the best confusion matrix, but in any other case, the compared object doesn\u2019t select the best confusion matrix.\n\n```pycon\n>>> cm2 = confusionmatrix(matrix={0: {0: 2, 1: 50, 2: 6}, 1: {0: 5, 1: 50, 2: 3}, 2: {0: 1, 1: 7, 2: 50}})\n>>> cm3 = confusionmatrix(matrix={0: {0: 50, 1: 2, 2: 6}, 1: {0: 50, 1: 5, 2: 3}, 2: {0: 1, 1: 55, 2: 2}})\n>>> cp = compare({\"cm2\": cm2, \"cm3\": cm3})\n>>> print(cp)\nbest : cm2\n\nrank  name   class-score       overall-score\n1     cm2    0.50278           0.58095\n2     cm3    0.33611           0.52857\n\n>>> cp.best\npycm.confusionmatrix(classes: [0, 1, 2])\n>>> cp.sorted\n['cm2', 'cm3']\n>>> cp.best_name\n'cm2'\n```\n\n### multilabel confusion matrix\n\nfrom `version 4.0`, `multilabelcm` has been added to calculate class-wise or sample-wise multilabel confusion matrices. in class-wise mode, confusion matrices are calculated for each class, and in sample-wise mode, they are generated per sample. all generated confusion matrices are binarized with a one-vs-rest transformation.\n\n```pycon\n>>> mlcm = multilabelcm(actual_vector=[{\"cat\", \"bird\"}, {\"dog\"}], predict_vector=[{\"cat\"}, {\"dog\", \"bird\"}], classes=[\"cat\", \"dog\", \"bird\"])\n>>> mlcm.actual_vector_multihot\n[[1, 0, 1], [0, 1, 0]]\n>>> mlcm.predict_vector_multihot\n[[1, 0, 0], [0, 1, 1]]\n>>> mlcm.get_cm_by_class(\"cat\").print_matrix()\npredict 0       1       \nactual\n0       1       0       \n\n1       0       1       \n\n>>> mlcm.get_cm_by_sample(0).print_matrix()\npredict 0       1       \nactual\n0       1       0       \n\n1       1       1 \n\n```\n\n### online help\n\n`online_help` function is added in `version 1.1` in order to open each statistics definition in web browser\n\n```pycon\n>>> from pycm import online_help\n>>> online_help(\"j\")\n>>> online_help(\"soa1(landis & koch)\")\n>>> online_help(2)\n```\n\n* list of items are available by calling `online_help()` (without argument)\n* if pycm website is not available, set `alt_link = true` (new in `version 2.4`)\n\n### screen record\n\n<div align=\"center\">\n<a href=\"https://asciinema.org/a/171863\" target=\"_blank\"><img src=\"https://asciinema.org/a/171863.png\"/></a>\n</div>\n\n## try pycm in your browser!\n\npycm can be used online in interactive jupyter notebooks via the binder or colab services! try it out now! :\n\n[![binder](https://mybinder.org/badge_logo.svg)](https://mybinder.org/v2/gh/sepandhaghighi/pycm/master)\n\n[![google colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/github/sepandhaghighi/pycm/blob/master)\n\n* check `examples` in `document` folder\n\n## issues & bug reports\n\n1. fill an issue and describe it. we'll check it asap!\n    - please complete the issue template\n2. discord : [https://discord.com/invite/zqpu2b3j3f](https://discord.com/invite/zqpu2b3j3f)\n3. website : [https://www.pycm.io](https://www.pycm.io)\n4. mailing list : [https://mail.python.org/mailman3/lists/pycm.python.org/](https://mail.python.org/mailman3/lists/pycm.python.org/)\n5. email : [info@pycm.io](mailto:info@pycm.io \"info@pycm.io\")\n\n## acknowledgments\n\n[nlnet foundation](https://nlnet.nl) has supported the pycm project from version **3.6** to **4.0** through the [ngi assure](https://nlnet.nl/assure) fund. this fund is set up by [nlnet foundation](https://nlnet.nl) with funding from the european commission's [next generation internet program](https://ngi.eu), administered by dg communications networks, content, and technology under grant agreement [**no 957073**](https://nlnet.nl/project/pycm/).\n\n<a href=\"https://nlnet.nl\"><img src=\"https://github.com/sepandhaghighi/pycm/raw/master/otherfiles/nlnet.svg\" height=\"50px\" alt=\"nlnet foundation\"></a> &nbsp;  <a href=\"https://nlnet.nl/assure\"><img src=\"https://github.com/sepandhaghighi/pycm/raw/master/otherfiles/ngiassure.svg\" height=\"50px\" alt=\"ngi assure\"></a>\n\n[python software foundation (psf)](https://www.python.org/psf/) grants pycm library partially for version **3.7**. [psf](https://www.python.org/psf/) is the organization behind python. their mission is to promote, protect, and advance the python programming language and to support and facilitate the growth of a diverse and international community of python programmers.\n\n<a href=\"https://www.python.org/psf/\"><img src=\"https://github.com/sepandhaghighi/pycm/raw/master/otherfiles/psf.png\" height=\"55px\" alt=\"python software foundation\"></a>\n\n## cite\n\nif you use pycm in your research, we would appreciate citations to the following paper :\n\n<pre>\nhaghighi, s., jasemi, m., hessabi, s. and zolanvari, a. (2018). pycm: multiclass confusion matrix library in python. journal of open source software, 3(25), p.729.\n</pre>\n<pre>\n\n@article{haghighi2018,\n  doi = {10.21105/joss.00729},\n  url = {https://doi.org/10.21105/joss.00729},\n  year  = {2018},\n  month = {may},\n  publisher = {the open journal},\n  volume = {3},\n  number = {25},\n  pages = {729},\n  author = {sepand haghighi and masoomeh jasemi and shaahin hessabi and alireza zolanvari},\n  title = {{pycm}: multiclass confusion matrix library in python},\n  journal = {journal of open source software}\n}\n\n</pre>\n\ndownload [pycm.bib](http://www.pycm.io/pycm.bib)\n\n<table>\n\t<tr> \n\t\t<td align=\"center\">joss</td>\n\t\t<td align=\"center\"><a href=\"https://doi.org/10.21105/joss.00729\"><img src=\"http://joss.theoj.org/papers/10.21105/joss.00729/status.svg\"></a></td>\n\t</tr>\n\t<tr>\n\t\t<td align=\"center\">zenodo</td>\n\t\t<td align=\"center\"><a href=\"https://doi.org/10.5281/zenodo.1157173\"><img src=\"https://zenodo.org/badge/doi/10.5281/zenodo.1157173.svg\" alt=\"doi\"></a></td>\n\t</tr>\n\t<tr>\n\t\t<td align=\"center\">researchgate</td>\n\t\t<td align=\"center\"><a href=\"https://www.researchgate.net/project/pycm-python-confusion-matrix\"><img src=\"https://img.shields.io/badge/researchgate-pycm-yellow.svg\"></a></td>\n\t</tr>\n</table>\n\n## show your support\n\n### star this repo\n\ngive a \u2b50\ufe0f if this project helped you!\n\n### donate to our project\n\nif you do like our project and we hope that you do, can you please support us? our project is not and is never going to be working for profit. we need the money just so we can continue doing what we do ;-) .\n\n<a href=\"http://www.pycm.io/donate.html\" target=\"_blank\"><img src=\"http://www.pycm.io/images/donate-button.png\" height=\"90px\" width=\"270px\" alt=\"pycm donation\"></a>\n\n# changelog\nall notable changes to this project will be documented in this file.\n\nthe format is based on [keep a changelog](http://keepachangelog.com/en/1.0.0/)\nand this project adheres to [semantic versioning](http://semver.org/spec/v2.0.0.html).\n\n## [unreleased]\n## [4.0] - 2023-06-07\n### added\n- `pycmmultilabelerror` class\n- `multilabelcm` class\n- `get_cm_by_class` method\n- `get_cm_by_sample` method\n- `__mlcm_vector_handler__` function\n- `__mlcm_assign_classes__` function\n- `__mlcm_vectors_filter__` function\n- `__set_to_multihot__` function\n- `deprecated` function\n### changed\n- document modified\n- `readme.md` modified\n- example-4 modified\n- test system modified\n- python 3.5 support dropped\n## [3.9] - 2023-05-01\n### added\n- `overall_params` dictionary\n- `__imbalancement_handler__` function\n- `vector_serializer` function\n- npv micro/macro\n- `log_loss` method\n- 23 new distance/similarity\n\t1. dennis \n\t2. digby\n\t3. dispersion\n\t4. doolittle\n\t5. eyraud\n\t6. fager & mcgowan\n\t7. faith\n\t8. fleiss-levin-paik\n\t9. forbes i\n\t10. forbes ii\n\t11. fossum\n\t12. gilbert & wells\n\t13. goodall\n\t14. goodman & kruskal's lambda\n\t15. goodman & kruskal lambda-r\n\t16. guttman's lambda a\n\t17. guttman's lambda b\n\t18. hamann\n\t19. harris & lahey\n\t20. hawkins & dotson\n\t21. kendall's tau\n\t22. kent & foster i\n\t23. kent & foster ii\n### changed\n- `metrics_off` parameter added to confusionmatrix `__init__` method\n- `class_params` changed to a dictionary\n- code style modified\n- `sort` parameter added to `relabel` method\n- document modified\n- `contributing.md` updated\n- `codecov` removed from `dev-requirements.txt`\n- test system modified\n## [3.8] - 2023-02-01\n### added\n- `distance` method\n- `__contains__` method\n- `__getitem__` method\n- goodman-kruskal's lambda a benchmark\n- goodman-kruskal's lambda b benchmark\n- krippendorff's alpha benchmark\n- pearson's c benchmark\n- 30 new distance/similarity\n\t1. ample\n\t2. anderberg's d\n\t3. andres & marzo's delta\n\t4. baroni-urbani & buser i\n\t5. baroni-urbani & buser ii\n\t6. batagelj & bren\n\t7. baulieu i\n\t8. baulieu ii\n\t9. baulieu iii\n\t10. baulieu iv\n\t11. baulieu v\n\t12. baulieu vi\n\t13. baulieu vii\n\t14. baulieu viii\n\t15. baulieu ix\n\t16. baulieu x\n\t17. baulieu xi\n\t18. baulieu xii\n\t19. baulieu xiii\n\t20. baulieu xiv\n\t21. baulieu xv\n\t22. benini i\n\t23. benini ii\n\t24. canberra\n\t25. clement\n\t26. consonni & todeschini i\n\t27. consonni & todeschini ii\n\t28. consonni & todeschini iii\n\t29. consonni & todeschini iv\n\t30. consonni & todeschini v\n### changed\n- `relabel` method sort bug fixed\n- `readme.md` modified\n- `compare` overall benchmarks default weights updated\n- document modified\n- test system modified\n## [3.7] - 2022-12-15\n### added\n- `curve` class\n- `roccurve` class\n- `prcurve` class\n- `pycmcurveerror` class\n### changed\n- `contributing.md` updated\n- `matrix_params_calc` function optimized\n- `readme.md` modified\n- document modified\n- test system modified\n- `python 3.11` added to `test.yml`\n## [3.6] - 2022-08-17\n### added\n- hamming distance\n- braun-blanquet similarity\n### changed\n- `classes` parameter added to `matrix_params_from_table` function\n- matrices with `numpy.integer` elements are now accepted\n- arrays added to `matrix` parameter accepting formats\n- website changed to [http://www.pycm.io](http://www.pycm.io)\n- document modified\n- `readme.md` modified\n## [3.5] - 2022-04-27\n### added\n- anaconda workflow\n- custom iterating setting\n- custom casting setting\n### changed\n- `plot` method updated\n- `class_statistics` function modified\n- `overall_statistics` function modified \n- `bcd_calc` function modified\n- `contributing.md` updated\n- `code_of_conduct.md` updated\n- document modified\n## [3.4] - 2022-01-26\n### added\n- colab badge\n- discord badge\n- `brier_score` method\n### changed\n- `j (jaccard index)` section in `document.ipynb` updated\n- `save_obj` method updated\n- `python 3.10` added to `test.yml`\n- example-3 updated\n- docstrings of the functions updated\n- `contributing.md` updated\n## [3.3] - 2021-10-27\n### added\n- `__compare_weight_handler__` function\n### changed\n- `is_imbalanced` parameter added to confusionmatrix `__init__` method\n- `class_benchmark_weight` and `overall_benchmark_weight` parameters added to compare `__init__` method\n- `statistic_recommend` function modified\n- compare `weight` parameter renamed to `class_weight`\n- document modified\n- license updated\n- `authors.md` updated\n- `readme.md` modified\n- block diagrams updated\n## [3.2] - 2021-08-11\n### added\n- `classes_filter` function\n### changed\n- `classes` parameter added to `matrix_params_calc` function\n- `classes` parameter added to `__obj_vector_handler__` function\n- `classes` parameter added to confusionmatrix `__init__` method\n- `name` parameter removed from `html_init` function\n- `shortener` parameter added to `html_table` function\n- `shortener` parameter added to `save_html` method\n- document modified\n- html report modified\n## [3.1] - 2021-03-11\n### added\n- `requirements-splitter.py`\n- `sensitivity_index` method\n### changed\n- test system modified\n- `overall_statistics` function modified\n- html report modified\n- document modified\n- references format updated\n- `contributing.md` updated\n## [3.0] - 2020-10-26\n### added\n- `plot_test.py`\n- `axes_gen` function\n- `add_number_label` function\n- `plot` method\n- `combine` method\n- `matrix_combine` function\n### changed\n- document modified\n- `readme.md` modified\n- example-2 deprecated\n- example-7 deprecated\n- error messages modified\n## [2.9] - 2020-09-23\n### added\n- `notebook_check.py`\n- `to_array` method\n- `__copy__` method\n- `copy` method\n### changed\n- `average` method refactored\n## [2.8] - 2020-07-09\n### added\n- `label_map` attribute\n- `positions` attribute\n- `position` method\n- krippendorff's alpha\n- aickin's alpha\n- `weighted_alpha` method\n### changed\n- single class bug fixed\n- `class_number_error` error type changed to `pycmmatrixerror`\n- `relabel` method bug fixed\n- document modified\n- `readme.md` modified\n## [2.7] - 2020-05-11\n### added\n- `average` method\n- `weighted_average` method\n- `weighted_kappa` method\n- `pycmaverageerror` class\n- bangdiwala's b\n- matlab examples\n- github action\n### changed\n- document modified\n- `readme.md` modified\n- `relabel` method bug fixed\n- `sparse_table_print` function bug fixed\n- `matrix_check` function bug fixed\n- minor bug in `compare` class fixed\n- class names mismatch bug fixed\n## [2.6] - 2020-03-25\n### added\n- `custom_rounder` function\n- `complement` function\n- `sparse_matrix` attribute\n- `sparse_normalized_matrix` attribute \n- net benefit (nb)\n- yule's q interpretation (qi)\n- adjusted rand index (ari)\n- tnr micro/macro\n- fpr micro/macro\n- fnr micro/macro\n### changed\n- `sparse` parameter added to `print_matrix`,`print_normalized_matrix` and `save_stat` methods\n- `header` parameter added to `save_csv` method\n- handler functions moved to `pycm_handler.py`\n- error objects moved to `pycm_error.py`\n- verified tests references updated\n- verified tests moved to `verified_test.py`\n- test system modified \n- `contributing.md` updated\n- namespace optimized\n- `readme.md` modified\n- document modified\n- `print_normalized_matrix` method modified\n- `normalized_table_calc` function modified\n- `setup.py` modified\n- summary mode updated\n- dockerfile updated\n- `python 3.8` added to `.travis.yaml` and `appveyor.yml`\n### removed\n- `pc_pi_calc` function\n## [2.5] - 2019-10-16\n### added\n- `__version__` variable\n- individual classification success index (icsi)\n- classification success index (csi)\n- example-8 (confidence interval)\n- `install.sh`\n- `autopep8.sh`\n- dockerfile\n- `ci` method (supported statistics : `acc`,`auc`,`overall acc`,`kappa`,`tpr`,`tnr`,`ppv`,`npv`,`plr`,`nlr`,`pre`)\n### changed\n- `test.sh` moved to `.travis` folder\n- python 3.4 support dropped\n- python 2.7 support dropped\n- `authors.md` updated\n- `save_stat`,`save_csv` and `save_html` methods non-ascii character bug fixed\n- mixed type input vectors bug fixed\n- `contributing.md` updated\n- example-3 updated\n- `readme.md` modified\n- document modified\n- `ci` attribute renamed to `ci95`\n- `kappa_se_calc` function renamed to `kappa_se_calc`\n- `se_calc` function modified and renamed to `se_calc`\n- ci/se functions moved to `pycm_ci.py`\n- minor bug in `save_html` method fixed\n## [2.4] - 2019-07-31\n### added\n- tversky index (ti)\n- area under the pr curve (aupr)\n- `funding.yml`\n### changed\n- `auc_calc` function modified\n- document modified\n- `summary` parameter added to `save_html`,`save_stat`,`save_csv` and `stat` methods\n- `sample_weight` bug in `numpy` array format fixed\n- inputs manipulation bug fixed\n- test system modified \n- warning system modified\n- `alt_link` parameter added to `save_html` method and `online_help` function\n- `compare` class tests moved to `compare_test.py`\n- warning tests moved to `warning_test.py`\n## [2.3] - 2019-06-27\n### added\n- adjusted f-score (agf)\n- overlap coefficient (oc)\n- otsuka-ochiai coefficient (ooc)\n### changed\n- `save_stat` and `save_vector` parameters added to `save_obj` method\n- document modified\n- `readme.md` modified \n- parameters recommendation for imbalance dataset  modified\n- minor bug in `compare` class fixed\n- `pycm_help` function modified\n- benchmarks color modified\n## [2.2] - 2019-05-30\n### added\n- negative likelihood ratio interpretation (nlri)\n- cramer's benchmark (soa5)\n- matthews correlation coefficient interpretation (mcci)\n- matthews's benchmark (soa6)\n- f1 macro\n- f1 micro\n- accuracy macro\n### changed\n- `compare` class score calculation modified\n- parameters recommendation for multi-class dataset  modified\n- parameters recommendation for imbalance dataset  modified\n- `readme.md` modified \n- document modified\n- logo updated\n## [2.1] - 2019-05-06\n### added\n- adjusted geometric mean (agm)\n- yule's q (q)\n- `compare` class and parameters recommendation system block diagrams\n### changed\n- document links bug fixed\n- document modified\n## [2.0] - 2019-04-15\n### added\n- g-mean (gm)\n- index of balanced accuracy (iba)\n- optimized precision (op)\n- pearson's c (c)\n- `compare` class\n- parameters recommendation warning\n- `confusionmatrix` equal method\n\n### changed\n- document modified\n- `stat_print` function bug fixed\n- `table_print` function bug fixed\n- `beta` parameter renamed to `beta` (`f_calc` function & `f_beta` method) \n- parameters recommendation for imbalance dataset  modified\n- `normalize` parameter added to `save_html` method\n- `pycm_func.py` splitted into `pycm_class_func.py` and `pycm_overall_func.py`\n- `vector_filter`,`vector_check`,`class_check` and `matrix_check` functions moved to `pycm_util.py`\n- `racc_calc` and `raccu_calc` functions exception handler modified\n- docstrings modified\n\n## [1.9] - 2019-02-25\n### added\n- automatic/manual (am)\n- bray-curtis dissimilarity (bcd)\n- `code_of_conduct.md`\n- `issue_template.md`\n- `pull_request_template.md`\n- `contributing.md`\n- x11 color names support for `save_html` method\n- parameters recommendation system\n- warning message for high dimension matrix print\n- interactive notebooks section (binder)\n\n### changed\n- `save_matrix` and `normalize` parameters added to `save_csv` method\n- `readme.md` modified \n- document modified\n- `confusionmatrix.__init__` optimized\n- document and examples output files moved to different folders\n- test system modified \n- `relabel` method bug fixed\n\n## [1.8] - 2019-01-05\n### added\n- lift score (ls)\n- `version_check.py`\n\n### changed\n- `color` parameter added to `save_html` method\n- error messages modified\n- document modified\n- website changed to [http://www.pycm.ir](http://www.pycm.ir)\n- interpretation functions moved to `pycm_interpret.py`\n- utility functions moved to `pycm_util.py`\n- unnecessary `else` and `elif` removed\n- `==` changed to `is`\n\n## [1.7] - 2018-12-18\n### added\n- gini index (gi)\n- example-7\n- `pycm_profile.py`\n\n### changed\n- `class_name` parameter added to `stat`,`save_stat`,`save_csv` and `save_html`  methods\n- `overall_param` and `class_param` parameters empty list bug fixed \n- `matrix_params_calc`, `matrix_params_from_table` and `vector_filter` functions optimized\n- `overall_mcc_calc`, `cen_misclassification_calc` and `convex_combination` functions optimized\n- document modified\n\n## [1.6] - 2018-12-06\n### added\n- auc value interpretation (auci)\n- example-6\n- anaconda cloud package\n\n### changed\n- `overall_param` and `class_param` parameters added to `stat`,`save_stat` and `save_html`  methods\n- `class_param` parameter added to `save_csv` method\n- `_` removed from overall statistics names\n- `readme.md` modified \n- document modified\n\n## [1.5] - 2018-11-26\n### added\n- relative classifier information (rci)\n- discriminator power (dp)\n- youden's index (y)\n- discriminant power interpretation (dpi)\n- positive likelihood ratio interpretation (plri)\n- `__len__` method\n- `relabel` method\n- `__class_stat_init__` function\n- `__overall_stat_init__` function\n- `matrix` attribute as dict\n- `normalized_matrix` attribute as dict\n- `normalized_table` attribute  as dict\n\n### changed\n- `readme.md` modified\n- document modified\n- `lr+` renamed to `plr`\n- `lr-` renamed to `nlr`\n- `normalized_matrix` method renamed to `print_normalized_matrix`\n- `matrix` method renamed to `print_matrix`\n- `entropy_calc` fixed\n- `cross_entropy_calc` fixed\n- `conditional_entropy_calc` fixed\n- `print_table` bug for large numbers fixed\n- json key bug in `save_obj` fixed\n- `transpose` bug in `save_obj` fixed\n- `python 3.7` added to `.travis.yaml` and `appveyor.yml`\n\n## [1.4] - 2018-11-12\n### added\n- area under curve (auc)\n- aunu\n- aunp\n- class balance accuracy (cba)\n- global performance index (rr)\n- overall mcc\n- distance index (dind)\n- similarity index (sind)\n- `one_vs_all`\n- `dev-requirements.txt`\n\n### changed\n- `readme.md` modified\n- document modified\n- `save_stat` modified\n- `requirements.txt` modified\n\n## [1.3] - 2018-10-10\n### added\n- confusion entropy (cen)\n- overall confusion entropy (overall cen)\n- modified confusion entropy (mcen)\n- overall modified confusion entropy (overall mcen)\n- information score (is)\n\n### changed\n- `readme.md` modified\n\n## [1.2] - 2018-10-01\n### added\n- no information rate (nir)\n- p-value\n- `sample_weight`\n- `transpose`\n\n### changed\n- `readme.md` modified\n- key error in some parameters fixed\n- `osx` env added to `.travis.yml`\n\n## [1.1] - 2018-09-08\n### added\n- zero-one loss\n- support\n- `online_help` function\n\n### changed\n- `readme.md` modified\n- `html_table` function modified\n- `table_print` function modified\n- `normalized_table_print` function modified\n\n## [1.0] - 2018-08-30\n### added\n- hamming loss\n\n### changed\n- `readme.md` modified\n\n## [0.9.5] - 2018-07-08\n### added\n- obj load\n- obj save\n- example-4\n\n### changed\n- `readme.md` modified\n- block diagram updated\n\n## [0.9] - 2018-06-28\n### added\n- activation threshold\n- example-3\n- jaccard index\n- overall jaccard index\n\n### changed\n- `readme.md` modified\n- `setup.py` modified\n\n## [0.8.6] - 2018-05-31\n### added\n- example section in document\n- python 2.7 ci\n- joss paper pdf\n\n### changed\n- cite section\n- confusionmatrix docstring\n- round function changed to numpy.around\n- `readme.md` modified\n\n## [0.8.5] - 2018-05-21\n### added\n- example-1 (comparison of three different classifiers)\n- example-2 (how to plot via matplotlib)\n- joss paper\n- confusionmatrix docstring\n\n### changed\n- table size in html report\n- test system\n- `readme.md` modified\n\n## [0.8.1] - 2018-03-22\n### added\n- goodman and kruskal's lambda b\n- goodman and kruskal's lambda a \n- cross entropy\n- conditional entropy\n- joint entropy\n- reference entropy \n- response entropy\n- kullback-liebler divergence\n- direct confusionmatrix\n- kappa unbiased\n- kappa no prevalence\n- random accuracy unbiased\n- `pycmvectorerror` class\n- `pycmmatrixerror` class\n- mutual information\n- support `numpy` arrays\n\n### changed\n- notebook file updated\n\n\n### removed\n- `pycmerror` class\n\n## [0.7] - 2018-02-26\n### added\n- cramer's v\n- 95% confidence interval \n- chi-squared\n- phi-squared\n- chi-squared df\n- standard error\n- kappa standard error\n- kappa 95% confidence interval\n- cicchetti benchmark\n\n\n### changed\n- overall statistics color in html report\n- parameters description link in html report\n\n\n## [0.6] - 2018-02-21\n### added\n- csv report\n- changelog\n- output files\n- `digit` parameter to `confusionmatrix` object\n\n### changed\n- confusion matrix color in html report\n- parameters description link in html report\n- capitalize descriptions\n\n## [0.5] - 2018-02-17\n### added\n- scott's pi\n- gwet's ac1\n- bennett s score\n- html report \n\n## [0.4] - 2018-02-05\n### added\n- tpr micro/macro\n- ppv micro/macro\n- overall racc\n- error rate (err)\n- fbeta score\n- f0.5\n- f2\n- fleiss benchmark\n- altman benchmark\n- output file(.pycm)\n\n\n### changed\n- class with zero item\n- normalized matrix\n\n### removed\n- kappa and soa for each class\n\n\n## [0.3] - 2018-01-27\n### added\n- kappa\n- random accuracy\n- landis and koch benchmark\n- `overall_stat`\n\n\n## [0.2] - 2018-01-24\n### added\n- population\n- condition positive\n- condition negative\n- test outcome positive\n- test outcome negative\n- prevalence\n- g-measure\n- matrix method\n- normalized matrix method\n- params method\n\n\n### changed\n - `statistic_result` to `class_stat`\n - `params` to `stat`\n\n## [0.1] - 2018-01-22\n### added\n- acc\n- bm\n- dor\n- f1-score\n- fdr\n- fnr\n- for\n- fpr\n- lr+\n- lr-\n- mcc\n- mk\n- npv\n- ppv\n- tnr\n- tpr\n- documents and `readme.md`\n\n[unreleased]: https://github.com/sepandhaghighi/pycm/compare/v4.0...dev\n[4.0]: https://github.com/sepandhaghighi/pycm/compare/v3.9...v4.0\n[3.9]: https://github.com/sepandhaghighi/pycm/compare/v3.8...v3.9\n[3.8]: https://github.com/sepandhaghighi/pycm/compare/v3.7...v3.8\n[3.7]: https://github.com/sepandhaghighi/pycm/compare/v3.6...v3.7\n[3.6]: https://github.com/sepandhaghighi/pycm/compare/v3.5...v3.6\n[3.5]: https://github.com/sepandhaghighi/pycm/compare/v3.4...v3.5\n[3.4]: https://github.com/sepandhaghighi/pycm/compare/v3.3...v3.4\n[3.3]: https://github.com/sepandhaghighi/pycm/compare/v3.2...v3.3\n[3.2]: https://github.com/sepandhaghighi/pycm/compare/v3.1...v3.2\n[3.1]: https://github.com/sepandhaghighi/pycm/compare/v3.0...v3.1\n[3.0]: https://github.com/sepandhaghighi/pycm/compare/v2.9...v3.0\n[2.9]: https://github.com/sepandhaghighi/pycm/compare/v2.8...v2.9\n[2.8]: https://github.com/sepandhaghighi/pycm/compare/v2.7...v2.8\n[2.7]: https://github.com/sepandhaghighi/pycm/compare/v2.6...v2.7\n[2.6]: https://github.com/sepandhaghighi/pycm/compare/v2.5...v2.6\n[2.5]: https://github.com/sepandhaghighi/pycm/compare/v2.4...v2.5\n[2.4]: https://github.com/sepandhaghighi/pycm/compare/v2.3...v2.4\n[2.3]: https://github.com/sepandhaghighi/pycm/compare/v2.2...v2.3\n[2.2]: https://github.com/sepandhaghighi/pycm/compare/v2.1...v2.2\n[2.1]: https://github.com/sepandhaghighi/pycm/compare/v2.0...v2.1\n[2.0]: https://github.com/sepandhaghighi/pycm/compare/v1.9...v2.0\n[1.9]: https://github.com/sepandhaghighi/pycm/compare/v1.8...v1.9\n[1.8]: https://github.com/sepandhaghighi/pycm/compare/v1.7...v1.8\n[1.7]: https://github.com/sepandhaghighi/pycm/compare/v1.6...v1.7\n[1.6]: https://github.com/sepandhaghighi/pycm/compare/v1.5...v1.6\n[1.5]: https://github.com/sepandhaghighi/pycm/compare/v1.4...v1.5\n[1.4]: https://github.com/sepandhaghighi/pycm/compare/v1.3...v1.4\n[1.3]: https://github.com/sepandhaghighi/pycm/compare/v1.2...v1.3\n[1.2]: https://github.com/sepandhaghighi/pycm/compare/v1.1...v1.2\n[1.1]: https://github.com/sepandhaghighi/pycm/compare/v1.0...v1.1\n[1.0]: https://github.com/sepandhaghighi/pycm/compare/v0.9.5...v1.0\n[0.9.5]: https://github.com/sepandhaghighi/pycm/compare/v0.9...v0.9.5\n[0.9]: https://github.com/sepandhaghighi/pycm/compare/v0.8.6...v0.9\n[0.8.6]: https://github.com/sepandhaghighi/pycm/compare/v0.8.5...v0.8.6\n[0.8.5]: https://github.com/sepandhaghighi/pycm/compare/v0.8.1...v0.8.5\n[0.8.1]: https://github.com/sepandhaghighi/pycm/compare/v0.7...v0.8.1\n[0.7]: https://github.com/sepandhaghighi/pycm/compare/v0.6...v0.7\n[0.6]: https://github.com/sepandhaghighi/pycm/compare/v0.5...v0.6\n[0.5]: https://github.com/sepandhaghighi/pycm/compare/v0.4...v0.5\n[0.4]: https://github.com/sepandhaghighi/pycm/compare/v0.3...v0.4\n[0.3]: https://github.com/sepandhaghighi/pycm/compare/v0.2...v0.3\n[0.2]: https://github.com/sepandhaghighi/pycm/compare/v0.1...v0.2\n[0.1]: https://github.com/sepandhaghighi/pycm/compare/1e238cd...v0.1\n",
  "docs_url": null,
  "keywords": "confusion-matrix python3 python machine_learning ml",
  "license": "mit",
  "name": "pycm",
  "package_url": "https://pypi.org/project/pycm/",
  "project_url": "https://pypi.org/project/pycm/",
  "project_urls": {
    "Discord": "https://discord.com/invite/zqpU2b3J3f",
    "Download": "https://github.com/sepandhaghighi/pycm/tarball/v4.0",
    "Homepage": "https://github.com/sepandhaghighi/pycm",
    "Source": "https://github.com/sepandhaghighi/pycm",
    "Webpage": "https://www.pycm.io"
  },
  "release_url": "https://pypi.org/project/pycm/4.0/",
  "requires_dist": [],
  "requires_python": ">=3.6",
  "summary": "multi-class confusion matrix library in python",
  "version": "4.0",
  "releases": [],
  "developers": [
    "info@pycm.io",
    "pycm_development_team"
  ],
  "kwds": "confusionmatrix pycmmatrixerror print_matrix badge_logo python3",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_pycm",
  "homepage": "https://github.com/sepandhaghighi/pycm",
  "release_count": 44,
  "dependency_ids": [],
  "documentation_summary": "PyCM is a Python library designed for analyzing multi-class confusion matrices. It supports input data vectors and direct matrices, offering a comprehensive tool for post-classification model evaluation across a wide range of metrics. PyCM is particularly useful for data scientists requiring detailed predictive model assessments and classifier evaluations. The library includes features for handling direct confusion matrices, vector inputs, and offers functionalities like plotting, ROC curve analysis, and precision-recall curve analysis. It also provides recommendations for parameters based on the dataset's characteristics. PyCM supports Python versions up to 3.5 and requires Matplotlib or Seaborn for plotting capabilities. The library is open-source under the MIT license, with its latest version being 4.0 as of June 7, 2023.",
  "embedding": [
    -0.03143487125635147,
    0.017049185931682587,
    0.0004482520744204521,
    -0.04422522708773613,
    -0.00819165538996458,
    0.01427470427006483,
    0.010674815624952316,
    -0.006214837543666363,
    -0.023596961051225662,
    -0.007095735054463148,
    0.016882717609405518,
    0.01449666265398264,
    -0.026676634326577187,
    0.031740061938762665,
    -0.029548222199082375,
    -0.00017503072740510106,
    0.020336946472525597,
    -0.004244955722242594,
    -0.013872404582798481,
    0.004387148190289736,
    -0.0031056846491992474,
    0.006089985836297274,
    -0.030186353251338005,
    -0.019130045548081398,
    0.001625672448426485,
    0.0355411022901535,
    0.024373814463615417,
    -0.028382940217852592,
    0.009814726188778877,
    -0.01054996345192194,
    0.027883533388376236,
    -0.0012086333008483052,
    0.006644881796091795,
    -0.016674630343914032,
    -0.04619510844349861,
    -0.008795104920864105,
    0.03235044702887535,
    0.007907270453870296,
    0.025414245203137398,
    -0.001869306550361216,
    0.0118262255564332,
    0.007990505546331406,
    -0.0015242304652929306,
    0.01412210799753666,
    0.01609198935329914,
    -0.02398538775742054,
    0.028466174378991127,
    -0.01972655951976776,
    -0.02369406819343567,
    0.013678191229701042,
    0.026107866317033768,
    0.02560845948755741,
    -0.008233272470533848,
    -0.010473665781319141,
    -0.0015632465947419405,
    -0.0022143826354295015,
    0.0003788900503423065,
    0.030491545796394348,
    -0.008469102904200554,
    -0.009454043582081795,
    0.025067435577511787,
    0.005465727299451828,
    -0.033349260687828064,
    0.007303821388632059,
    0.036817360669374466,
    -0.03881498798727989,
    -0.00502874655649066,
    0.026371441781520844,
    0.017326634377241135,
    0.006696903612464666,
    0.03038056753575802,
    0.04860890656709671,
    -0.005857623182237148,
    -0.018519660457968712,
    0.03828783705830574,
    -0.0021606271620839834,
    -0.025816544890403748,
    0.01032106950879097,
    -0.04325415939092636,
    0.0063535613007843494,
    0.019504601135849953,
    -0.0167162474244833,
    0.0015710497973486781,
    0.016064245253801346,
    0.009731492027640343,
    0.007782419212162495,
    -0.010501410812139511,
    0.011084051802754402,
    0.020101115107536316,
    -0.02036469057202339,
    0.02208486944437027,
    0.008455230854451656,
    0.0035686760675162077,
    0.01098000817000866,
    -0.006575519684702158,
    0.033182792365550995,
    -0.0017505240393802524,
    0.03673412650823593,
    0.020225966349244118,
    -0.0031473019625991583,
    -0.005111981183290482,
    0.022334571927785873,
    -0.020725373178720474,
    -0.021862909197807312,
    -0.045806679874658585,
    -0.03038056753575802,
    -0.006135071162134409,
    -0.009565022774040699,
    0.0181728508323431,
    0.015703562647104263,
    0.0034316862002015114,
    0.019934644922614098,
    -0.009703746996819973,
    -0.03950860723853111,
    0.007449481636285782,
    0.0011843565152958035,
    0.01550934836268425,
    -0.005805601365864277,
    -0.005264577455818653,
    -0.004480786621570587,
    0.005049555562436581,
    0.009724555537104607,
    0.009301447309553623,
    -0.013678191229701042,
    0.01435793936252594,
    -0.005105045158416033,
    0.0032565470319241285,
    -0.0260662492364645,
    -0.0034108776599168777,
    -0.010002003982663155,
    0.007276076357811689,
    -0.004723554011434317,
    0.016244586557149887,
    -0.0033259091433137655,
    -0.011299073696136475,
    -0.010931454598903656,
    0.0027692788280546665,
    0.014205342158675194,
    -0.02732863835990429,
    -0.009627449326217175,
    0.0007729530334472656,
    0.034459054470062256,
    -0.006634477525949478,
    -0.004300445318222046,
    -0.02277848869562149,
    0.03135163336992264,
    0.010418175719678402,
    -0.0006220906507223845,
    -0.005878431722521782,
    -0.010438984259963036,
    0.041090063750743866,
    -0.0057570477947592735,
    -0.037344515323638916,
    0.022903339937329292,
    -0.0040091248229146,
    0.01636943779885769,
    0.030297331511974335,
    0.004435701295733452,
    -0.02854940854012966,
    -0.022292954847216606,
    -0.0230004470795393,
    0.01409436296671629,
    -0.0026877785567194223,
    -0.003766357898712158,
    0.006648350041359663,
    0.027259275317192078,
    0.009793917648494244,
    -0.03337700664997101,
    -0.004210274666547775,
    0.009350000880658627,
    0.014996069483458996,
    0.021405121311545372,
    -0.02076699025928974,
    0.006852968130260706,
    0.002883726265281439,
    -0.0010222228011116385,
    0.023375002667307854,
    0.0004690607020165771,
    -0.023194661363959312,
    -0.013178784400224686,
    0.007054117973893881,
    0.03129614517092705,
    0.0205866489559412,
    0.01386546902358532,
    -0.0011886917054653168,
    -0.012353376485407352,
    0.007317693438380957,
    -0.012068992480635643,
    0.027134424075484276,
    -2.592947566881776e-05,
    0.03137937933206558,
    0.03493071720004082,
    -0.0010447654640302062,
    -0.029908904805779457,
    -0.5873021483421326,
    -0.04261602833867073,
    -0.02352759800851345,
    -0.020156605169177055,
    0.0031594401225447655,
    0.000934653275180608,
    0.012443547137081623,
    0.006662222556769848,
    -0.03656765818595886,
    0.023735685274004936,
    -0.0027276615146547556,
    0.006183624267578125,
    -0.01213835459202528,
    0.004768639337271452,
    -0.021030565723776817,
    -0.012186907231807709,
    0.008295698091387749,
    -0.03759421780705452,
    -0.0075882053934037685,
    0.012644696980714798,
    -0.008663317188620567,
    0.02785578928887844,
    -0.022986574098467827,
    0.00980085413902998,
    -0.019976263865828514,
    -0.0002501367998775095,
    0.0034975800663232803,
    0.012922145426273346,
    0.020558904856443405,
    0.010848220437765121,
    -0.023832792416214943,
    0.01828382909297943,
    -0.00425189221277833,
    -0.023596961051225662,
    0.04017448425292969,
    0.014441173523664474,
    -0.01412210799753666,
    0.04353160783648491,
    -0.01435793936252594,
    0.018422553315758705,
    -0.008580082096159458,
    -0.013969511725008488,
    -0.0020045624114573,
    0.01620296947658062,
    -0.025511352345347404,
    0.025067435577511787,
    -0.010889837518334389,
    -0.001980285858735442,
    0.025303266942501068,
    -0.000880030682310462,
    -0.005406769923865795,
    -0.02854940854012966,
    0.001325681689195335,
    -0.004706213250756264,
    0.02825808897614479,
    0.019352003931999207,
    0.025566842406988144,
    -0.016508162021636963,
    0.004310849588364363,
    -0.01580066978931427,
    -0.025969142094254494,
    0.001162680913694203,
    0.009793917648494244,
    -0.02243167906999588,
    -0.009960386902093887,
    0.005621792282909155,
    -0.014219215139746666,
    -0.021946145221590996,
    -0.02791127935051918,
    -0.024484794586896896,
    -0.013393807224929333,
    -0.014219215139746666,
    -0.0068876491859555244,
    -0.0012753942282870412,
    0.011444734409451485,
    0.045473743230104446,
    0.05465727671980858,
    0.005410237703472376,
    0.013844660483300686,
    -0.0066864993423223495,
    0.012831974774599075,
    -0.003641506191343069,
    -0.005465727299451828,
    -0.00428310502320528,
    0.03498620539903641,
    0.01607811637222767,
    0.005441450979560614,
    0.01187477819621563,
    0.006977819837629795,
    -0.002177967457100749,
    0.002477958332747221,
    0.03620697557926178,
    0.008434422314167023,
    -0.02519228681921959,
    0.00211207359097898,
    0.014011128805577755,
    -0.007442545145750046,
    0.005198683589696884,
    -0.0049871294759213924,
    -0.022237464785575867,
    -0.02761995792388916,
    -0.019171662628650665,
    -0.01949072815477848,
    -0.0044599780812859535,
    -0.016008755192160606,
    -0.014260832220315933,
    -0.021016692742705345,
    0.01983753964304924,
    0.028910091146826744,
    -0.02265363745391369,
    -0.008233272470533848,
    -0.04641706496477127,
    0.009155787527561188,
    -0.013796106912195683,
    0.04233857989311218,
    -0.040396444499492645,
    0.038482051342725754,
    0.025400374084711075,
    -0.006721179932355881,
    -0.007574332877993584,
    -0.004799852147698402,
    -0.01863064058125019,
    -0.00899625476449728,
    0.0010612389305606484,
    0.015620327554643154,
    0.017631826922297478,
    0.01435793936252594,
    -0.005157066509127617,
    -0.024373814463615417,
    -0.0017305825604125857,
    -0.016577523201704025,
    -0.012068992480635643,
    0.01781216822564602,
    -0.01793701946735382,
    0.025580715388059616,
    -0.006457604467868805,
    0.023388873785734177,
    0.002325361827388406,
    -0.007206714246422052,
    -0.022903339937329292,
    -0.00819165538996458,
    -0.007303821388632059,
    0.005687686149030924,
    0.014260832220315933,
    -0.00853152945637703,
    -0.0001652766950428486,
    -0.001665555639192462,
    0.018783235922455788,
    0.01598101109266281,
    0.0011739522451534867,
    -0.036706384271383286,
    -0.02756446786224842,
    -0.0037351450882852077,
    0.019046811386942863,
    0.0037975709419697523,
    -0.015301262959837914,
    -0.04097908362746239,
    -0.0009181798086501658,
    -0.014926707372069359,
    -0.009814726188778877,
    0.02040630765259266,
    0.02513679675757885,
    -0.02001788094639778,
    0.003558271797373891,
    0.0035652080550789833,
    -0.0008137032273225486,
    -0.031684573739767075,
    0.024179602041840553,
    -0.012401930056512356,
    -0.024540284648537636,
    0.001244181301444769,
    -0.020142732188105583,
    0.00878816843032837,
    0.02294495701789856,
    0.000480765535030514,
    0.023222405463457108,
    0.003072737716138363,
    -0.01822834089398384,
    -0.014940580353140831,
    -0.0019247961463406682,
    0.009967322461307049,
    0.014385683462023735,
    -0.03015860728919506,
    -0.02831357903778553,
    0.0435870960354805,
    0.004577893763780594,
    0.014246960170567036,
    -0.017201781272888184,
    -0.005368620622903109,
    -0.0034195478074252605,
    -0.011541840620338917,
    0.007615950424224138,
    -0.01374755334109068,
    0.012866655364632607,
    -0.0028056937735527754,
    -0.02710667997598648,
    -0.0060310279950499535,
    0.020434051752090454,
    0.01706305891275406,
    0.050079382956027985,
    -0.008517656475305557,
    0.02935400791466236,
    0.017257271334528923,
    -0.009044808335602283,
    0.0021554247941821814,
    -0.017090803012251854,
    0.010466729290783405,
    -0.003832251764833927,
    0.01856127753853798,
    0.005077300127595663,
    0.014579897746443748,
    0.0025542564690113068,
    -0.03090771846473217,
    -0.027980640530586243,
    0.006363965570926666,
    0.02161320671439171,
    -0.01147247850894928,
    -0.000467326637590304,
    -0.002370447153225541,
    0.0143024493008852,
    -0.014871218241751194,
    0.007636758964508772,
    0.025913652032613754,
    0.004002188798040152,
    0.007858717814087868,
    -0.015814540907740593,
    0.007435609120875597,
    0.017950892448425293,
    -0.0071928417310118675,
    -0.03282210975885391,
    -0.014413428492844105,
    0.026967955753207207,
    0.007359310984611511,
    -0.0016846301732584834,
    0.018006380647420883,
    -0.007085330784320831,
    0.05182730406522751,
    -0.0022993511520326138,
    0.023596961051225662,
    -0.006037964019924402,
    -0.002073924522846937,
    0.035041693598032,
    -0.004675000440329313,
    -0.019684942439198494,
    0.01254065427929163,
    -0.018949704244732857,
    0.019629452377557755,
    0.02035081759095192,
    -0.0053131310269236565,
    -0.0028490452095866203,
    -0.022501040250062943,
    -0.0019560090731829405,
    -0.0025386500637978315,
    0.014108235947787762,
    0.0037559536285698414,
    -0.0020427117124199867,
    0.014815728180110455,
    -0.00693273451179266,
    0.06159347668290138,
    0.01678561046719551,
    -0.006194029003381729,
    -0.031046442687511444,
    0.007484162226319313,
    0.03149035945534706,
    0.04147849231958389,
    -0.017798295244574547,
    0.018367063254117966,
    -0.05102270469069481,
    -0.023902153596282005,
    -0.0387594997882843,
    -0.022181974723935127,
    -0.026260461658239365,
    0.002115541836246848,
    -0.024928711354732513,
    0.00706105399876833,
    -0.01352559495717287,
    0.0032183979637920856,
    -0.0037559536285698414,
    -0.0022664042189717293,
    0.003317238762974739,
    -0.04411424696445465,
    -0.050190359354019165,
    0.03357122093439102,
    0.013567212037742138,
    -0.011396180838346481,
    -0.012922145426273346,
    -0.019282642751932144,
    -0.0013568946160376072,
    -0.008371996693313122,
    0.013130230829119682,
    0.00824020802974701,
    0.016938205808401108,
    -0.01735437847673893,
    0.0029895033221691847,
    -0.01919940859079361,
    0.0025299799162894487,
    0.030768994241952896,
    -0.0014271236723288894,
    0.025233903899788857,
    0.021418992429971695,
    0.006856435909867287,
    -0.002718991367146373,
    -0.0057119629345834255,
    -0.019809793680906296,
    0.02623271755874157,
    0.023971514776349068,
    0.011035498231649399,
    -0.02334725670516491,
    -0.025053562596440315,
    -0.005718898959457874,
    -0.007990505546331406,
    -0.01467700395733118,
    -0.011521032080054283,
    -0.017271144315600395,
    0.01075111422687769,
    -0.0034299520775675774,
    0.02363857813179493,
    -0.013442359864711761,
    0.018006380647420883,
    -0.005167470779269934,
    -0.011895586736500263,
    -0.0320729985833168,
    -0.011763799004256725,
    0.009995067492127419,
    0.029104305431246758,
    0.02220972068607807,
    -0.002842108951881528,
    -0.005091172643005848,
    -0.049274783581495285,
    -0.013393807224929333,
    -0.037677451968193054,
    0.0014964856673032045,
    -0.0001976817729882896,
    5.3430434491019696e-05,
    -0.035263653844594955,
    0.001151409582234919,
    0.006700371392071247,
    -4.971848102286458e-05,
    0.02449866756796837,
    0.023888280615210533,
    -0.02599688619375229,
    0.006714243907481432,
    -0.010536091402173042,
    0.01057770848274231,
    0.016452671959996223,
    0.00368312350474298,
    0.027176041156053543,
    -0.016355564817786217,
    0.003762889886274934,
    0.008697997778654099,
    0.03898145630955696,
    0.004671532195061445,
    0.01553709339350462,
    -0.045695703476667404,
    -0.0260662492364645,
    0.012332567945122719,
    -0.023277895525097847,
    0.013477041386067867,
    -0.015578710474073887,
    0.04475237801671028,
    0.014774111099541187,
    0.0007053251028992236,
    -0.029215285554528236,
    0.003957103472203016,
    0.03667863830924034,
    0.004775575362145901,
    -0.0033085686154663563,
    0.008087611757218838,
    -0.023721812292933464,
    0.0029600244015455246,
    0.016577523201704025,
    0.020253710448741913,
    -0.004848405718803406,
    -0.006249518599361181,
    0.011541840620338917,
    0.008399740792810917,
    -0.03637344390153885,
    -0.011167285963892937,
    0.01989302784204483,
    -0.0011253987904638052,
    -0.009669066406786442,
    -0.01822834089398384,
    0.01222852524369955,
    0.010036684572696686,
    0.0003869100473821163,
    -0.0058957720175385475,
    -0.01473249401897192,
    -0.002006296534091234,
    -0.013477041386067867,
    0.009613576345145702,
    -0.018713874742388725,
    0.01777055114507675,
    -0.03870400786399841,
    -0.016743993386626244,
    -0.026371441781520844,
    -0.046278342604637146,
    -0.013941766694188118,
    -0.004432233516126871,
    0.020447924733161926,
    -0.003071003593504429,
    0.02849392034113407,
    0.002098201308399439,
    -0.016355564817786217,
    0.0008115356904454529,
    -0.005420641973614693,
    -0.034736502915620804,
    -0.021002821624279022,
    -0.04611187428236008,
    0.015592583455145359,
    0.004820660687983036,
    -0.017687316983938217,
    0.011208903044462204,
    -0.02566394954919815,
    0.04466914385557175,
    0.007810163777321577,
    -0.004935108125209808,
    -0.006419455166906118,
    0.0019698815885931253,
    0.007095735054463148,
    0.0009121106122620404,
    -0.021197034046053886,
    -0.008587018586695194,
    0.003835720010101795,
    -0.018935833126306534,
    0.03379317745566368,
    -0.045973148196935654,
    0.00487268203869462,
    -0.024359943345189095,
    -0.001950806938111782,
    0.0029218753334134817,
    -0.007064522244036198,
    0.01337993424385786,
    -0.00265136337839067,
    0.03132389113306999,
    0.011410052888095379,
    -0.011909459717571735,
    0.005309662781655788,
    0.020572775974869728,
    0.027231531217694283,
    0.003818379482254386,
    -0.020503414794802666,
    0.02888234704732895,
    0.02531713806092739,
    -0.01943523995578289,
    0.027065061032772064,
    -0.008156973868608475,
    -0.006329284515231848,
    0.010820475406944752,
    -0.005001001991331577,
    0.02208486944437027,
    -0.02155771665275097,
    -0.017021439969539642,
    -0.04097908362746239,
    -0.003355387831106782,
    0.017728934064507484,
    0.028271961957216263,
    0.01107017882168293,
    -0.016411054879426956,
    0.0026999167166650295,
    0.008434422314167023,
    0.003169844625517726,
    0.021876782178878784,
    -0.004324722103774548,
    -0.0067177121527493,
    -0.0024588836822658777,
    0.005538557656109333,
    -0.03143487125635147,
    -0.019185535609722137,
    -0.0030259182676672935,
    -0.030713504180312157,
    -0.006558179389685392,
    0.018658384680747986,
    0.0077199931256473064,
    0.014982197433710098,
    0.026204973459243774,
    0.003412611549720168,
    -0.025566842406988144,
    -0.009967322461307049,
    -0.0021363503765314817,
    -0.00397791201248765,
    -0.0024294049944728613,
    0.016688503324985504,
    0.01799250952899456,
    0.056821368634700775,
    0.0393143966794014,
    0.013754489831626415,
    0.022931085899472237,
    0.014385683462023735,
    0.0010178877273574471,
    0.002394723938778043,
    -0.015953265130519867,
    0.006433327682316303,
    -0.01735437847673893,
    -0.016563652083277702,
    -0.0009554618736729026,
    0.004879618529230356,
    -0.007234459277242422,
    -0.012013502418994904,
    0.004446105565875769,
    0.0022525317035615444,
    0.015828413888812065,
    0.005327003542333841,
    -0.01936587691307068,
    -0.00885059405118227,
    -0.015717435628175735,
    0.016563652083277702,
    -0.004210274666547775,
    0.031518105417490005,
    -0.04353160783648491,
    -0.015953265130519867,
    0.0034681011456996202,
    0.0028213004115968943,
    0.015218027867376804,
    0.007976632565259933,
    0.030935462564229965,
    -0.00530272675678134,
    0.027120551094412804,
    0.009911833330988884,
    0.026510166004300117,
    -0.01279729325324297,
    -0.007414800580590963,
    -0.03914792835712433,
    -0.00039124517934396863,
    0.0012779952958226204,
    0.012811166234314442,
    0.03218397870659828,
    0.020628266036510468,
    0.015842286869883537,
    -0.0223206989467144,
    0.03107418678700924,
    0.010071366094052792,
    -0.018894216045737267,
    0.04236632585525513,
    -0.0102933244779706,
    -0.029104305431246758,
    0.00804599467664957,
    -0.03223947063088417,
    -0.03640118986368179,
    -7.656917296117172e-05,
    0.008822849951684475,
    -0.006190560758113861,
    0.01516253873705864,
    -0.017395995557308197,
    -0.022986574098467827,
    0.027772555127739906,
    0.016979822888970375,
    0.04067389294505119,
    -0.007990505546331406,
    0.012124481610953808,
    0.0036345701664686203,
    -0.011625075712800026,
    0.01075111422687769,
    0.007914206944406033,
    -0.012693250551819801,
    -0.004973256960511208,
    0.045751191675662994,
    0.05476825311779976,
    -0.04244956001639366,
    -0.004026465583592653,
    -0.006266858894377947,
    -0.0030363225378096104,
    -0.0077269296161830425,
    -0.011971885338425636,
    0.02599688619375229,
    0.02202937938272953,
    0.004706213250756264,
    -0.026940209791064262,
    0.0022698722314089537,
    -0.02462351880967617,
    0.01567581668496132,
    -0.03085222840309143,
    -0.0019109237473458052,
    0.015384497120976448,
    -0.012623888440430164,
    -0.0168410986661911,
    0.022459423169493675,
    -0.008309570141136646,
    0.0025663948617875576,
    0.006558179389685392,
    -0.0473049022257328,
    -0.02738412655889988,
    -0.018242212012410164,
    -0.0026166823226958513,
    0.021946145221590996,
    0.006859904155135155,
    0.014538280665874481,
    -0.0024554156698286533,
    -0.016827227547764778,
    0.030602525919675827,
    -0.004511999897658825,
    -0.009856343269348145,
    -0.02456802874803543,
    -0.029021071270108223,
    0.034736502915620804,
    -0.008711869828402996,
    -0.009197404608130455,
    -0.01054996345192194,
    -0.014996069483458996,
    0.011493287049233913,
    -0.006631009746342897,
    -0.011583457700908184,
    -0.002221318893134594,
    -0.014538280665874481,
    -0.0180479995906353,
    0.009363872930407524,
    -0.010300260968506336,
    -0.03004762902855873,
    0.021113799884915352,
    -0.010140728205442429,
    0.01793701946735382,
    -0.03326602652668953,
    0.017076930031180382,
    -0.010106046684086323,
    -0.0008722274797037244,
    -0.018061870709061623,
    -0.004113167989999056,
    -0.016008755192160606,
    0.016646886244416237,
    0.012284014374017715,
    -0.0007655833614990115,
    -0.003974443767219782,
    0.023999260738492012,
    0.005025278776884079,
    0.03146261349320412,
    0.02005949802696705,
    -0.011375372298061848,
    -0.0462505966424942,
    0.02871587872505188,
    -0.006305008195340633,
    -0.010022812522947788,
    0.012894400395452976,
    -0.02128026820719242,
    -0.04422522708773613,
    -0.015273517929017544,
    -0.017257271334528923,
    0.036234721541404724,
    0.009571959264576435,
    -0.04808175563812256,
    -0.0072136507369577885,
    0.043975524604320526,
    0.008739614859223366,
    -0.014441173523664474,
    0.0006051836535334587,
    0.0016742259031161666,
    -0.021058309823274612,
    -0.00650268979370594,
    0.015245772898197174,
    -0.0004133543116040528,
    0.025622332468628883,
    -0.012811166234314442,
    -0.0010924518574029207,
    0.027994513511657715,
    -0.02703731693327427,
    -0.01242273859679699,
    -0.010910646058619022,
    -0.002451947657391429,
    0.009995067492127419,
    0.029603712260723114,
    -0.02456802874803543,
    -0.01032106950879097,
    -0.01374755334109068,
    0.038149114698171616,
    0.02369406819343567,
    -0.00982859916985035,
    -0.008184718899428844,
    0.0033068344928324223,
    0.0027900873683393,
    0.0067523932084441185,
    -0.019740432500839233,
    -0.03010311909019947,
    -0.011195030994713306,
    0.0045328084379434586,
    -0.020558904856443405,
    -0.009870216250419617,
    -0.022279081866145134,
    0.022181974723935127,
    0.02957596629858017,
    -0.01925489865243435,
    -0.041201043874025345,
    -0.02952047809958458,
    -0.010938391089439392,
    -0.041201043874025345,
    -0.00023843195231165737,
    0.01260307990014553,
    0.009245958179235458,
    0.03171231597661972,
    -0.014052745886147022,
    0.00965519342571497,
    0.0047825113870203495,
    0.029825670644640923,
    -0.01470474898815155,
    0.010501410812139511,
    0.013796106912195683,
    -0.002908002818003297,
    0.00010247155296383426,
    0.009981195442378521,
    -0.019795922562479973,
    -0.004612574819475412,
    0.01138230785727501,
    0.023860536515712738,
    -0.020558904856443405,
    0.045473743230104446,
    -0.00490042706951499,
    -0.013796106912195683,
    -0.0012233727611601353,
    -0.016757864505052567,
    0.011507160030305386,
    -0.007498034741729498,
    0.015661945566534996,
    -0.005018342286348343,
    -0.027078934013843536,
    -0.003006843850016594,
    -0.0033640582114458084,
    0.02230682782828808,
    -0.012845846824347973,
    0.015218027867376804,
    -0.028438430279493332,
    0.007935015484690666,
    -0.012339504435658455,
    -0.01312329526990652,
    -0.0025542564690113068,
    0.0023340322077274323,
    0.00566687760874629,
    0.030297331511974335,
    0.020101115107536316,
    0.019976263865828514,
    0.025039691478013992,
    0.009537278674542904,
    -0.037621963769197464,
    0.016272330656647682,
    0.0022126485127955675,
    -0.0075882053934037685,
    0.013914021663367748,
    0.010334941558539867,
    -0.01740986853837967,
    -0.0007967962301336229,
    0.046611279249191284,
    -0.019241025671362877,
    -0.02520615980029106,
    -0.006329284515231848,
    0.001909189741127193,
    -0.027925150468945503,
    0.02427670918405056,
    -0.003032854525372386,
    -0.009606640785932541,
    0.00560791976749897,
    -0.02259814739227295,
    -0.008365060202777386,
    -0.0012112343683838844,
    -0.0073315659537911415,
    0.006911925505846739,
    -0.010445920750498772,
    -0.011812352575361729,
    0.009065616875886917,
    0.0019143918761983514,
    -0.005431046709418297,
    -0.014524407684803009,
    -0.005403301678597927,
    -0.02422121912240982,
    0.010959199629724026,
    0.1604759842157364,
    0.012284014374017715,
    0.030547035858035088,
    0.03201751038432121,
    0.031629081815481186,
    0.00767144002020359,
    0.006239113863557577,
    -0.0006069177179597318,
    0.023083681240677834,
    0.009676001965999603,
    0.03015860728919506,
    0.00075864716200158,
    0.009717619977891445,
    0.007206714246422052,
    0.014108235947787762,
    -0.01187477819621563,
    -0.02893783710896969,
    -0.05085623636841774,
    -0.025441991165280342,
    -0.007567396853119135,
    -0.002150222659111023,
    -0.010910646058619022,
    0.007199778221547604,
    -0.0230004470795393,
    0.023153044283390045,
    0.00980085413902998,
    -0.008926892653107643,
    0.00012365948350634426,
    0.023111427202820778,
    0.016272330656647682,
    -0.021252524107694626,
    0.02709280699491501,
    0.0077893552370369434,
    -0.014260832220315933,
    -0.03523590788245201,
    0.004938575904816389,
    0.025331011041998863,
    -0.014455045573413372,
    0.02480386011302471,
    -0.004047274123877287,
    -0.030574779957532883,
    -0.010945327579975128,
    0.01666075736284256,
    -0.015897775068879128,
    -0.002833438804373145,
    -0.017826039344072342,
    -0.02248716913163662,
    0.017326634377241135,
    -0.014066618867218494,
    0.0015719168586656451,
    -0.013414615765213966,
    -0.004727021791040897,
    0.001366431824862957,
    0.014885090291500092,
    -0.0028178321663290262,
    -0.023916026577353477,
    0.011257456615567207,
    0.01075804978609085,
    0.020323073491454124,
    -0.0003270852903369814,
    -0.003856528550386429,
    0.008482975885272026,
    0.01008523814380169,
    0.023305639624595642,
    -0.029381753876805305,
    -0.006391710601747036,
    -0.020947331562638283,
    0.020156605169177055,
    0.013844660483300686,
    -0.006187092512845993,
    -0.017950892448425293,
    -0.015037686564028263,
    -0.010938391089439392,
    -0.014288577251136303,
    -0.006891116965562105,
    -0.008080676198005676,
    0.06048368662595749,
    0.015273517929017544,
    0.01833931915462017,
    0.010584644973278046,
    -0.015759052708745003,
    -0.0039987205527722836,
    -0.019241025671362877,
    -0.0035929528530687094,
    -0.031795550137758255,
    -0.025747183710336685,
    0.0059686023741960526,
    -0.026940209791064262,
    -0.0029305454809218645,
    -0.002816098276525736,
    -0.004196402616798878,
    -0.02480386011302471,
    0.003355387831106782,
    0.00028351726359687746,
    0.023916026577353477,
    0.0379549004137516,
    -0.005670345388352871,
    0.009793917648494244,
    -0.001285798498429358,
    0.003721272572875023,
    -0.03443130850791931,
    0.05909644439816475,
    0.006391710601747036,
    -0.01449666265398264,
    0.0009684672695584595,
    -0.022501040250062943,
    -0.016522035002708435,
    0.015939394012093544,
    -0.005861090961843729,
    0.002370447153225541,
    -0.02230682782828808,
    -0.02877136692404747,
    0.006305008195340633,
    0.0009155787411145866,
    -0.014926707372069359,
    0.017715061083436012,
    0.00736624700948596,
    -0.02854940854012966,
    0.018186721950769424,
    0.0013499583583325148,
    0.003627633908763528,
    -0.002113807713612914,
    -0.007948887534439564,
    -0.025691693648695946,
    0.018131233751773834,
    -0.0023791175335645676,
    -0.022445550188422203,
    -0.01115341391414404,
    -0.004962852690368891,
    0.0080182496458292,
    0.019185535609722137,
    -0.03903694823384285,
    0.02681535854935646,
    0.004564021248370409,
    0.00951647013425827,
    -0.018491916358470917,
    -0.012062055990099907,
    0.007713057100772858,
    0.0036519106943160295,
    0.00116354797501117,
    -0.018311575055122375,
    0.008808976970613003,
    -0.004896958824247122,
    -0.026440802961587906,
    0.005226428620517254,
    0.028271961957216263,
    -0.0014973527286201715,
    0.022695254534482956,
    -0.008954637683928013,
    -0.01282503828406334,
    0.007803227752447128,
    -0.012665505520999432,
    0.009530342184007168,
    -0.026565656065940857,
    0.022459423169493675,
    -0.022528786212205887,
    -0.01654977910220623,
    -0.025858161970973015,
    0.009696811437606812,
    -0.0051085129380226135,
    -0.026745997369289398,
    -0.024346070364117622,
    0.01648041605949402,
    0.013705936260521412,
    -0.01602262817323208,
    -0.005424110218882561,
    -0.17390446364879608,
    0.01294295396655798,
    0.01786765828728676,
    -0.012443547137081623,
    -0.0006784473080188036,
    0.010820475406944752,
    0.005007938016206026,
    0.016702376306056976,
    -0.010993881151080132,
    -0.021835165098309517,
    0.011701373383402824,
    0.00776854669675231,
    -0.017853785306215286,
    -0.001003148267045617,
    0.021724186837673187,
    0.018838725984096527,
    0.011916396208107471,
    0.02080860733985901,
    0.009571959264576435,
    0.028466174378991127,
    0.033127304166555405,
    -0.036012761294841766,
    0.005698090419173241,
    0.011791544035077095,
    0.005337407812476158,
    0.004695808980613947,
    -0.029187539592385292,
    0.03432032838463783,
    -0.010612390004098415,
    -0.036539915949106216,
    -0.02023983933031559,
    -0.0006879845750518143,
    0.026662761345505714,
    0.003846124280244112,
    0.004421829245984554,
    0.013948703184723854,
    0.014690876938402653,
    0.006044900510460138,
    -0.014177598059177399,
    0.0022559999488294125,
    0.026565656065940857,
    0.02449866756796837,
    0.004848405718803406,
    0.01433019433170557,
    -0.015218027867376804,
    0.018783235922455788,
    0.0014011128805577755,
    -0.02272299863398075,
    0.006325816735625267,
    -0.025469735264778137,
    0.042588282376527786,
    0.0011436063796281815,
    0.03801038861274719,
    -0.016119735315442085,
    0.026218844577670097,
    0.0034438245929777622,
    0.026510166004300117,
    -0.004425297025591135,
    0.021654823794960976,
    -0.02266751043498516,
    -0.0231252983212471,
    -0.027661575004458427,
    -0.00416518934071064,
    0.009759237058460712,
    -0.028396813198924065,
    -0.008080676198005676,
    0.00012073327525286004,
    0.03515267372131348,
    -0.017090803012251854,
    0.023250151425600052,
    0.029853414744138718,
    0.028063874691724777,
    0.022168103605508804,
    -0.0024536815471947193,
    0.027189914137125015,
    0.027065061032772064,
    -0.005583642981946468,
    0.020725373178720474,
    0.030297331511974335,
    -0.019587835296988487,
    -0.02007336914539337,
    0.02243167906999588,
    0.010328005068004131,
    -0.010924519039690495,
    0.021835165098309517,
    -0.027897406369447708,
    0.008295698091387749,
    0.0009095095447264612,
    -0.03864851966500282,
    -0.01602262817323208,
    0.017687316983938217,
    -0.036817360669374466,
    0.0038287837523967028,
    -0.00023192926892079413,
    0.015273517929017544,
    0.01649428904056549,
    -0.02877136692404747,
    -0.03892596811056137,
    0.024720625951886177,
    -0.03945311903953552,
    0.013685127720236778,
    0.01792314648628235,
    -0.04256053641438484,
    -0.00511544942855835,
    0.01673012040555477,
    0.01936587691307068,
    -0.03839881718158722,
    -0.012166098691523075,
    0.024235092103481293,
    -0.01291520893573761,
    0.003818379482254386,
    0.0037559536285698414,
    0.02254265733063221,
    0.00893382914364338,
    -0.005188279319554567,
    0.004675000440329313,
    -0.0037455493584275246,
    -0.02053115889430046,
    -0.007026372943073511,
    0.006436795927584171,
    0.03859303146600723,
    0.01724339835345745,
    0.00300510972738266,
    0.02051728591322899,
    -0.012727931141853333,
    0.004151317290961742,
    -0.11519645154476166,
    -0.020198222249746323,
    -0.005202151834964752,
    0.01810348778963089,
    -0.03149035945534706,
    0.0005930453189648688,
    -0.020919587463140488,
    0.015620327554643154,
    -0.004560553003102541,
    0.015550965443253517,
    -0.002547320444136858,
    -0.0029461518861353397,
    -0.0026045439299196005,
    -0.011167285963892937,
    -0.0004356802091933787,
    -0.02162707969546318,
    -0.014510535635054111,
    -0.010515282861888409,
    -0.00844829436391592,
    -0.01213835459202528,
    0.017035312950611115,
    0.0021346162538975477,
    0.007511907257139683,
    0.005111981183290482,
    0.01607811637222767,
    0.015315135009586811,
    -0.02491483837366104,
    0.012124481610953808,
    0.013366062194108963,
    0.032267212867736816,
    0.02161320671439171,
    -0.02628820762038231,
    0.009641321375966072,
    -0.009897961281239986,
    0.015592583455145359,
    -0.0008041659602895379,
    -0.026676634326577187,
    -0.036928340792655945,
    0.01072336919605732,
    -0.017798295244574547,
    -0.01983753964304924,
    -0.013685127720236778,
    -0.0021554247941821814,
    -0.011014689691364765,
    -0.0006615403108298779,
    0.012401930056512356,
    -0.029770180583000183,
    0.010778858326375484,
    0.01879710890352726,
    -0.04386454448103905,
    -0.024609645828604698,
    -0.006953543052077293,
    -0.006433327682316303,
    0.0024415431544184685,
    -0.010737241245806217,
    0.0006914527039043605,
    -0.006239113863557577,
    0.02040630765259266,
    -0.0007946286932565272,
    -0.01718791015446186,
    -0.015550965443253517,
    0.02237618900835514,
    -0.03010311909019947,
    0.03579080477356911,
    0.009689874947071075,
    -0.0025109052658081055,
    0.033987391740083694,
    -0.01112566888332367,
    0.034459054470062256,
    -0.042754750698804855,
    -0.005614855792373419,
    0.008371996693313122,
    -0.010931454598903656,
    0.004321254324167967,
    -0.019227152690291405,
    -0.008122293278574944,
    -0.021377375349402428,
    -0.009363872930407524,
    0.0205866489559412,
    -0.005732771474868059,
    0.007567396853119135,
    -0.011694436892867088,
    -0.012263205833733082,
    -0.009703746996819973,
    -0.011749926954507828,
    0.014025001786649227,
    0.01285971887409687,
    0.009072552435100079,
    0.0025785332545638084,
    -0.006270327139645815,
    0.023264022544026375,
    -0.003558271797373891,
    0.05074525624513626,
    -0.024137984961271286,
    -0.018034126609563828,
    -0.01839480921626091,
    0.008184718899428844,
    -0.024484794586896896,
    -0.02155771665275097,
    0.03165682777762413,
    -0.054574042558670044,
    -0.0062876674346625805,
    -0.07674214243888855,
    0.016161352396011353,
    -0.0011999630369246006,
    -0.023957643657922745,
    0.029381753876805305,
    -0.03903694823384285,
    0.018075743690133095,
    -0.02340274676680565,
    0.020614393055438995,
    0.006346625275909901,
    -0.041728194802999496,
    0.0020375095773488283,
    -0.02121090702712536,
    0.010452857241034508,
    -0.006606732960790396,
    0.012270142324268818,
    0.0344867967069149,
    -0.01427470427006483,
    0.034514542669057846,
    -0.013234274461865425,
    -0.028577154502272606,
    -0.014607642777264118,
    0.04208887740969658,
    0.003915486391633749,
    -0.016216840595006943,
    -0.018880343064665794,
    -0.015065431594848633,
    0.04408650100231171,
    -0.009107233956456184,
    -0.00035114525235258043,
    0.012152226641774178,
    0.003164642257615924,
    -0.015994882211089134,
    0.0326278954744339,
    0.005164002534002066,
    -0.00036566791823133826,
    0.0037732941564172506,
    -0.002183169825002551,
    0.036179233342409134,
    -0.00379063468426466,
    -0.02115541696548462,
    -0.024082494899630547,
    0.019116174429655075,
    -0.0006832159124314785,
    -0.0021363503765314817,
    0.005680749658495188,
    -0.004231083672493696,
    -0.009696811437606812,
    0.03038056753575802,
    0.005306195002049208,
    0.02196001634001732,
    -0.014843473210930824,
    0.00484146922826767,
    -0.041145551949739456,
    0.017049185931682587,
    -0.0028507790993899107,
    0.020212093368172646,
    -0.011978821828961372,
    0.01729888841509819,
    -0.006884180940687656,
    -0.003787166438996792,
    0.00112453184556216,
    0.005621792282909155,
    0.02265363745391369,
    0.018700001761317253,
    -0.012658569030463696,
    -0.04289347678422928,
    -0.004432233516126871,
    -0.02202937938272953,
    -0.030768994241952896,
    -0.0060830493457615376,
    -0.012034310959279537,
    0.024887094274163246,
    -0.01513479370623827,
    0.019906900823116302,
    -0.014607642777264118,
    0.015717435628175735,
    0.005989410914480686,
    -0.0067523932084441185,
    0.022459423169493675,
    0.02162707969546318,
    0.009793917648494244,
    -0.005424110218882561,
    0.008170846849679947,
    0.008087611757218838,
    0.012665505520999432,
    -0.011368435807526112,
    -0.004619510844349861,
    0.014066618867218494,
    0.012755676172673702,
    0.01568968966603279,
    0.0011488085146993399,
    0.008961573243141174,
    -0.0060830493457615376,
    0.0044599780812859535,
    0.03407062590122223,
    0.00024645193479955196,
    -0.00566687760874629,
    0.004140913020819426,
    0.02409636788070202,
    -0.0051085129380226135,
    -0.006655286066234112,
    -0.010716432705521584,
    -0.03198976442217827,
    -0.03357122093439102,
    -0.01636943779885769,
    0.00224906369112432,
    0.015661945566534996,
    0.006925798021256924,
    0.05049555376172066,
    0.0069362022913992405,
    -0.01279729325324297,
    -0.00644373195245862,
    -0.013608829118311405,
    -0.006589392200112343,
    0.02334725670516491,
    0.009051743894815445,
    0.022001633420586586,
    -0.007962760515511036,
    0.001137537183240056,
    -0.0036900597624480724,
    -0.003069269470870495,
    0.026329824700951576,
    0.005046087317168713,
    0.01404581032693386,
    0.037039320915937424,
    0.022570403292775154,
    -0.010543027892708778,
    0.04081261530518532,
    -0.0006996894371695817,
    -0.006582456175237894,
    0.006738520693033934,
    -0.020031752064824104,
    -0.011423925869166851,
    -0.00991876982152462,
    -0.001694167498499155,
    -0.008233272470533848,
    -0.005677281878888607,
    0.011181158013641834,
    0.06991691887378693,
    -0.01173605490475893,
    -0.00035548038431443274,
    -0.008406677283346653,
    -0.024346070364117622,
    -0.009107233956456184,
    0.03032507747411728,
    -0.011632011272013187,
    -0.0011193297104910016,
    -0.019005194306373596,
    -0.0016811620444059372,
    0.007886461913585663,
    -0.03648442402482033,
    -0.039342138916254044,
    0.004161721561104059,
    0.02692633867263794,
    -0.019185535609722137,
    0.007255267817527056,
    0.0007109607686288655,
    -0.014198406599462032,
    0.031185166910290718,
    -0.02438768744468689,
    0.021654823794960976,
    0.019102301448583603,
    -0.009558087214827538,
    -0.0189774502068758,
    0.017506975680589676,
    0.025344884023070335,
    -0.012443547137081623,
    -0.04025771841406822,
    0.008080676198005676,
    -0.011014689691364765,
    -0.006891116965562105,
    -0.01023783441632986,
    -0.025220032781362534,
    -0.0007257001707330346,
    0.0014843472745269537,
    0.0018242212245240808,
    0.014649259857833385,
    0.016868844628334045,
    -0.02334725670516491,
    -0.00010035817831521854,
    -0.019462984055280685,
    -0.03273887559771538,
    0.006464540492743254,
    -0.027661575004458427,
    0.009065616875886917,
    -0.0286048986017704,
    -0.0593738928437233
  ]
}
{
  "classifiers": [
    "development status :: 4 - beta",
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "natural language :: english",
    "programming language :: python",
    "programming language :: python :: 2.7",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.12",
    "programming language :: python :: 3.5",
    "programming language :: python :: 3.6",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9"
  ],
  "description": "djangoql: advanced search language for django\ndjangoql\n========\n\n.. image:: https://github.com/ivelum/djangoql/workflows/tests/badge.svg\n        :target: https://github.com/ivelum/djangoql/actions?query=workflow%3atests\n\nadvanced search language for django, with auto-completion. supports logical\noperators, parenthesis, table joins, and works with any django model. tested on\npython 2.7, 3.5 - 3.11, django 1.8 - 4.2. the auto-completion feature has been\ntested in chrome, firefox, safari, ie9+.\n\nsee a video: `djangoql demo <https://youtu.be/okvff4dhzb8>`_\n\n.. image:: https://raw.githubusercontent.com/ivelum/djangoql/master/djangoql/static/djangoql/img/completion_example_scaled.png\n\ndjangoql is used by:\n\n|logo1| |logo2| |logo3| |logo4|\n\n.. |logo1| image:: https://raw.githubusercontent.com/ivelum/djangoql/master/assets/redhat.svg\n   :width: 22%\n   :target: https://www.redhat.com\n\n.. |logo2| image:: https://raw.githubusercontent.com/ivelum/djangoql/master/assets/teamplify.svg\n   :width: 22%\n   :target: https://teamplify.com\n\n.. |logo3| image:: https://raw.githubusercontent.com/ivelum/djangoql/master/assets/police1.svg\n   :width: 22%\n   :target: https://www.police1.com\n\n.. |logo4| image:: https://raw.githubusercontent.com/ivelum/djangoql/master/assets/15-five.svg\n   :width: 22%\n   :target: https://www.15five.com\n\nis your project using djangoql? please submit a pr and let us know!\n\ncontents\n--------\n\n* `installation`_\n* `add it to your django admin`_\n* `using djangoql with the standard django admin search`_\n* `language reference`_\n* `djangoql schema`_\n* `custom search fields`_\n* `can i use it outside of django admin?`_\n* `using completion widget outside of django admin`_\n\ninstallation\n------------\n\n.. code:: shell\n\n    $ pip install djangoql\n\nadd ``'djangoql'`` to ``installed_apps`` in your ``settings.py``:\n\n.. code:: python\n\n    installed_apps = [\n        ...\n        'djangoql',\n        ...\n    ]\n\n\nadd it to your django admin\n---------------------------\n\nadding ``djangoqlsearchmixin`` to your model admin will replace the standard\ndjango search functionality with djangoql search. example:\n\n.. code:: python\n\n    from django.contrib import admin\n\n    from djangoql.admin import djangoqlsearchmixin\n\n    from .models import book\n\n\n    @admin.register(book)\n    class bookadmin(djangoqlsearchmixin, admin.modeladmin):\n        pass\n\n\nusing djangoql with the standard django admin search\n----------------------------------------------------\n\ndjangoql will recognize if you have defined ``search_fields`` in your modeladmin\nclass, and doing so will allow you to choose between an advanced search with\ndjangoql and a standard django search (as specified by search fields). example:\n\n.. code:: python\n\n    @admin.register(book)\n    class bookadmin(djangoqlsearchmixin, admin.modeladmin):\n        search_fields = ('title', 'author__name')\n\nfor the example above, a checkbox that controls search mode will appear near\nthe search input. if the checkbox is on, then djanqoql search is used. there is\nalso an option that controls if that checkbox is enabled by default -\n``djangoql_completion_enabled_by_default`` (set to ``true`` by default):\n\n.. code:: python\n\n    @admin.register(book)\n    class bookadmin(djangoqlsearchmixin, admin.modeladmin):\n        search_fields = ('title', 'author__name')\n        djangoql_completion_enabled_by_default = false\n\nif you don't want two search modes, simply remove ``search_fields`` from your\nmodeladmin class.\n\nlanguage reference\n------------------\n\ndjangoql is shipped with comprehensive syntax help, which can be found in django\nadmin (see the syntax help link in auto-completion popup). here's a quick\nsummary:\n\ndjangoql's syntax resembles python's, with some minor\ndifferences. basically you just reference model fields as you would\nin python code, then apply comparison and logical operators and\nparenthesis. djangoql is case-sensitive.\n\n- model fields: exactly as they are defined in python code. access\n  nested properties via ``.``, for example ``author.last_name``;\n- strings must be double-quoted. single quotes are not supported.\n  to escape a double quote use ``\\\"``;\n- boolean and null values: ``true``, ``false``, ``none``. please note\n  that they can be combined only with equality operators, so you can\n  write ``published = false or date_published = none``, but\n  ``published > false`` will cause an error;\n- logical operators: ``and``, ``or``;\n- comparison operators: ``=``, ``!=``, ``<``, ``<=``, ``>``, ``>=``\n  - work as you expect;\n- string-specific comparison operators: ``startswith``, ``not startswith``,\n  ``endswith``, ``not endswith`` - work as you expect. test whether or not a\n  string contains a substring: ``~`` and ``!~`` (translated into\n  ``__icontains`` under the hood).\n  example: ``name endswith \"peace\" or author.last_name ~ \"tolstoy\"``;\n- date-specific comparison operators, compare by date part: ``~`` and ``!~``.\n  example: ``date_published ~ \"2021-11\"`` - find books published in nov, 2021;\n- test a value vs. list: ``in``, ``not in``. example:\n  ``pk in (2, 3)``.\n\n\ndjangoql schema\n---------------\n\nschema defines limitations - what you can do with a djangoql query.\nif you don't specify any schema, djangoql will provide a default\nschema for you. this will walk recursively through all model fields and\nrelations and include everything it finds in the schema, so\nusers would be able to search through everything. sometimes\nthis is not what you want, either due to db performance or security\nconcerns. if you'd like to limit search models or fields, you should\ndefine a schema. here's an example:\n\n.. code:: python\n\n    class userqlschema(djangoqlschema):\n        exclude = (book,)\n        suggest_options = {\n            group: ['name'],\n        }\n\n        def get_fields(self, model):\n            if model == group:\n                return ['name']\n            return super(userqlschema, self).get_fields(model)\n\n\n    @admin.register(user)\n    class customuseradmin(djangoqlsearchmixin, useradmin):\n        djangoql_schema = userqlschema\n\nin the example above we created a schema that does 3 things:\n\n- excludes the book model from search via ``exclude`` option. instead of\n  ``exclude`` you may also use ``include``, which limits a search to\n  listed models only;\n- limits available search fields for group model to only the ``name`` field\n  , in the ``.get_fields()`` method;\n- enables completion options for group names via ``suggest_options``.\n\nan important note about ``suggest_options``: it looks for the ``choices`` model\nfield parameter first, and if it's not specified - it will synchronously pull\nall values for given model fields, so you should avoid large querysets there.\nif you'd like to define custom suggestion options, see below.\n\ncustom search fields\n--------------------\n\ndeeper search customization can be achieved with custom search fields. custom\nsearch fields can be used to search by annotations, define custom suggestion\noptions, or define fully custom search logic. in ``djangoql.schema``, djangoql\ndefines the following base field classes that you may\nsubclass to define your own behavior:\n\n* ``intfield``\n* ``floatfield``\n* ``strfield``\n* ``boolfield``\n* ``datefield``\n* ``datetimefield``\n* ``relationfield``\n\nhere are examples for common use cases:\n\n**search by queryset annotations:**\n\n.. code:: python\n\n    from djangoql.schema import djangoqlschema, intfield\n\n\n    class userqlschema(djangoqlschema):\n        def get_fields(self, model):\n            fields = super(userqlschema, self).get_fields(model)\n            if model == user:\n                fields += [intfield(name='groups_count')]\n            return fields\n\n\n    @admin.register(user)\n    class customuseradmin(djangoqlsearchmixin, useradmin):\n        djangoql_schema = userqlschema\n\n        def get_queryset(self, request):\n            qs = super(customuseradmin, self).get_queryset(request)\n            return qs.annotate(groups_count=count('groups'))\n\nlet's take a closer look at what's happening in the example above. first, we\nadd ``groups_count`` annotation to the queryset that is used by django admin\nin the ``customuseradmin.get_queryset()`` method. it would contain the number\nof groups a user belongs to. as our queryset now pulls this column, we can\nfilter by it. it just needs to be included in the schema. in\n``userqlschema.get_fields()`` we define a custom integer search field for the\n``user`` model. its name should match the name of the column in our queryset.\n\n**custom suggestion options**\n\n.. code:: python\n\n    from djangoql.schema import djangoqlschema, strfield\n\n\n    class groupnamefield(strfield):\n        model = group\n        name = 'name'\n        suggest_options = true\n\n        def get_options(self, search):\n            return super(groupnamefield, self)\\\n                .get_options(search)\\\n                .annotate(users_count=count('user'))\\\n                .order_by('-users_count')\n\n\n    class userqlschema(djangoqlschema):\n        def get_fields(self, model):\n            if model == group:\n                return ['id', groupnamefield()]\n            return super(userqlschema, self).get_fields(model)\n\n\n    @admin.register(user)\n    class customuseradmin(djangoqlsearchmixin, useradmin):\n        djangoql_schema = userqlschema\n\nin this example we've defined a custom groupnamefield that sorts suggestions\nfor group names by popularity (no. of users in a group) instead of default\nalphabetical sorting.\n\n**custom search lookup**\n\ndjangoql base fields provide two basic methods that you can override to\nsubstitute either search column, search value, or both -\n``.get_lookup_name()`` and ``.get_lookup_value(value)``:\n\n.. code:: python\n\n    class userdatejoinedyear(intfield):\n        name = 'date_joined_year'\n\n        def get_lookup_name(self):\n            return 'date_joined__year'\n\n\n    class userqlschema(djangoqlschema):\n        def get_fields(self, model):\n            fields = super(userqlschema, self).get_fields(model)\n            if model == user:\n                fields += [userdatejoinedyear()]\n            return fields\n\n\n    @admin.register(user)\n    class customuseradmin(djangoqlsearchmixin, useradmin):\n        djangoql_schema = userqlschema\n\nin this example we've defined the custom ``date_joined_year`` search field for\nusers, and used the built-in django ``__year`` filter option in\n``.get_lookup_name()`` to filter by date year only. similarly you can use\n``.get_lookup_value(value)`` hook to modify a search value before it's used in\nthe filter.\n\n**fully custom search lookup**\n\n``.get_lookup_name()`` and ``.get_lookup_value(value)`` hooks cover many\nsimple use cases, but sometimes they're not enough and you want a fully custom\nsearch logic. in such cases you can override main ``.get_lookup()`` method of\na field. example below demonstrates user ``age`` search:\n\n.. code:: python\n\n    from djangoql.schema import djangoqlschema, intfield\n\n\n    class useragefield(intfield):\n        \"\"\"\n        search by given number of full years\n        \"\"\"\n        model = user\n        name = 'age'\n\n        def get_lookup_name(self):\n            \"\"\"\n            we'll be doing comparisons vs. this model field\n            \"\"\"\n            return 'date_joined'\n\n        def get_lookup(self, path, operator, value):\n            \"\"\"\n            the lookup should support with all operators compatible with intfield\n            \"\"\"\n            if operator == 'in':\n                result = none\n                for year in value:\n                    condition = self.get_lookup(path, '=', year)\n                    result = condition if result is none else result | condition\n                return result\n            elif operator == 'not in':\n                result = none\n                for year in value:\n                    condition = self.get_lookup(path, '!=', year)\n                    result = condition if result is none else result & condition\n                return result\n\n            value = self.get_lookup_value(value)\n            search_field = '__'.join(path + [self.get_lookup_name()])\n            year_start = self.years_ago(value + 1)\n            year_end = self.years_ago(value)\n            if operator == '=':\n                return (\n                    q(**{'%s__gt' % search_field: year_start}) &\n                    q(**{'%s__lte' % search_field: year_end})\n                )\n            elif operator == '!=':\n                return (\n                    q(**{'%s__lte' % search_field: year_start}) |\n                    q(**{'%s__gt' % search_field: year_end})\n                )\n            elif operator == '>':\n                return q(**{'%s__lt' % search_field: year_start})\n            elif operator == '>=':\n                return q(**{'%s__lte' % search_field: year_end})\n            elif operator == '<':\n                return q(**{'%s__gt' % search_field: year_end})\n            elif operator == '<=':\n                return q(**{'%s__gte' % search_field: year_start})\n\n        def years_ago(self, n):\n            timestamp = now()\n            try:\n                return timestamp.replace(year=timestamp.year - n)\n            except valueerror:\n                # february 29\n                return timestamp.replace(month=2, day=28, year=timestamp.year - n)\n\n\n    class userqlschema(djangoqlschema):\n        def get_fields(self, model):\n            fields = super(userqlschema, self).get_fields(model)\n            if model == user:\n                fields += [useragefield()]\n            return fields\n\n\n    @admin.register(user)\n    class customuseradmin(djangoqlsearchmixin, useradmin):\n        djangoql_schema = userqlschema\n\n\ncan i use it outside of django admin?\n-------------------------------------\n\nsure. you can add djangoql search functionality to any django model using\n``djangoqlqueryset``:\n\n.. code:: python\n\n    from django.db import models\n\n    from djangoql.queryset import djangoqlqueryset\n\n\n    class book(models.model):\n        name = models.charfield(max_length=255)\n        author = models.foreignkey('auth.user')\n\n        objects = djangoqlqueryset.as_manager()\n\nwith the example above you can perform a search like this:\n\n.. code:: python\n\n    qs = book.objects.djangoql(\n        'name ~ \"war\" and author.last_name = \"tolstoy\"'\n    )\n\nit returns a normal queryset, so you can extend it and reuse if\nnecessary. the following code works fine:\n\n.. code:: python\n\n    print(qs.count())\n\nalternatively you can add djangoql search to any existing queryset,\neven if it's not an instance of djangoqlqueryset:\n\n.. code:: python\n\n    from django.contrib.auth.models import user\n\n    from djangoql.queryset import apply_search\n\n    qs = user.objects.all()\n    qs = apply_search(qs, 'groups = none')\n    print(qs.exists())\n\nschemas can be specified either as a queryset option, or passed\nto ``.djangoql()`` queryset method directly:\n\n.. code:: python\n\n    class bookqueryset(djangoqlqueryset):\n        djangoql_schema = bookschema\n\n\n    class book(models.model):\n        ...\n\n        objects = bookqueryset.as_manager()\n\n    # now, book.objects.djangoql() will use bookschema by default:\n    book.objects.djangoql('name ~ \"peace\")  # uses bookschema\n\n    # overriding default queryset schema with anotherschema:\n    book.objects.djangoql('name ~ \"peace\", schema=anotherschema)\n\nyou can also provide schema as an option for ``apply_search()``\n\n.. code:: python\n\n    qs = user.objects.all()\n    qs = apply_search(qs, 'groups = none', schema=customschema)\n\n\nusing completion widget outside of django admin\n-----------------------------------------------\n\nthe completion widget is not tightly coupled to django admin, so you can easily\nuse it outside of the admin if you want. the widget is\n`available on npm <https://www.npmjs.com/package/djangoql-completion>`_ as a\nstandalone package.\nsee the source code and the docs in the\n`djangoql-completion <https://github.com/ivelum/djangoql-completion>`_\nrepo on github.\n\nthe completion widget is also bundled with the\n`djangoql <https://pypi.org/project/djangoql/>`_ python package on pypi. if\nyou're not using webpack or another javascript bundler, you can use the\npre-built version that ships with the python package. here is an example:\n\ntemplate code, ``completion_demo.html``:\n\n.. code:: html\n\n    {% load static %}\n    <!doctype html>\n    <html lang=\"en\">\n    <head>\n      <meta charset=\"utf-8\">\n      <title>djangoql completion demo</title>\n      <link rel=\"stylesheet\" type=\"text/css\" href=\"{% static 'djangoql/css/completion.css' %}\" />\n      <script src=\"{% static 'djangoql/js/completion.js' %}\"></script>\n    </head>\n    <body>\n\n      <form action=\"\" method=\"get\">\n        <p style=\"color: red\">{{ error }}</p>\n        <textarea name=\"q\" cols=\"40\" rows=\"1\" autofocus>{{ q }}</textarea>\n      </form>\n\n      <ul>\n      {% for item in search_results %}\n        <li>{{ item }}</li>\n      {% endfor %}\n      </ul>\n\n      <script>\n        djangoql.domready(function () {\n          new djangoql({\n            // either js object with a result of djangoqlschema(mymodel).as_dict(),\n            // or an url from which this information could be loaded asynchronously\n            introspections: {{ introspections|safe }},\n\n            // css selector for query input or htmlelement object.\n            // it should be a textarea\n            selector: 'textarea[name=q]',\n\n            // optional, you can provide url for syntax help link here.\n            // if not specified, syntax help link will be hidden.\n            syntaxhelp: null,\n\n            // optional, enable textarea auto-resize feature. if enabled,\n            // textarea will automatically grow its height when entered text\n            // doesn't fit, and shrink back when text is removed. the purpose\n            // of this is to see full search query without scrolling, could be\n            // helpful for really long queries.\n            autoresize: true\n          });\n        });\n      </script>\n    </body>\n    </html>\n\nand in your ``views.py``:\n\n.. code:: python\n\n    import json\n\n    from django.contrib.auth.models import group, user\n    from django.shortcuts import render_to_response\n    from django.views.decorators.http import require_get\n\n    from djangoql.exceptions import djangoqlerror\n    from djangoql.queryset import apply_search\n    from djangoql.schema import djangoqlschema\n    from djangoql.serializers import djangoqlschemaserializer\n\n\n    class userqlschema(djangoqlschema):\n        include = (user, group)\n        suggest_options = {\n            group: ['name'],\n        }\n\n\n    @require_get\n    def completion_demo(request):\n        q = request.get.get('q', '')\n        error = ''\n        query = user.objects.all().order_by('username')\n        if q:\n            try:\n                query = apply_search(query, q, schema=userqlschema)\n            except djangoqlerror as e:\n                query = query.none()\n                error = str(e)\n        # you may want to use suggestionsapiserializer and an additional api\n        # endpoint (see in djangoql.views) for asynchronous suggestions loading\n        introspections = djangoqlschemaserializer().serialize(\n          userqlschema(query.model),\n        )\n        return render_to_response('completion_demo.html', {\n            'q': q,\n            'error': error,\n            'search_results': query,\n            'introspections': json.dumps(introspections),\n        })\n\n\nlicense\n-------\n\nmit\n",
  "docs_url": null,
  "keywords": "",
  "license": "mit license",
  "name": "djangoql",
  "package_url": "https://pypi.org/project/djangoql/",
  "project_url": "https://pypi.org/project/djangoql/",
  "project_urls": {
    "Homepage": "https://github.com/ivelum/djangoql/"
  },
  "release_url": "https://pypi.org/project/djangoql/0.18.0/",
  "requires_dist": [],
  "requires_python": "",
  "summary": "djangoql: advanced search language for django",
  "version": "0.18.0",
  "releases": [],
  "developers": [
    "denis_stebunov",
    "support@ivelum.com"
  ],
  "kwds": "djangoql_completion_enabled_by_default djangoql djangoqlsearchmixin djangoqlqueryset django",
  "license_kwds": "mit license",
  "libtype": "pypi",
  "id": "pypi_djangoql",
  "homepage": "https://github.com/ivelum/djangoql/",
  "release_count": 60,
  "dependency_ids": [],
  "documentation_summary": "DjangoQL is a Python package that provides an advanced search language for Django, supporting features like auto-completion, logical operators, parenthesis, table joins, and compatibility with any Django model. It is compatible with Python versions 2.7 and 3.5 through 3.12, and Django versions 1.8 through 4.2. The package allows for customization through schemas to limit search models or fields for performance or security reasons. DjangoQL can be integrated into Django admin or used outside of it with any Django model. It also offers a completion widget that can be utilized outside of Django admin. The package is licensed under the MIT License and its latest version as of January 8, 2024, is 0.18.1.",
  "embedding": [
    -0.009763102047145367,
    0.013235509395599365,
    -0.004401398357003927,
    -0.0355173721909523,
    -0.03379160538315773,
    0.0399152897298336,
    -0.02211485244333744,
    -0.038746222853660583,
    -0.044758569449186325,
    -0.017188070341944695,
    -0.0026112643536180258,
    0.010278047993779182,
    -0.01706281304359436,
    0.030618423596024513,
    0.015072614885866642,
    -0.020820528268814087,
    0.01922001875936985,
    -0.02519061230123043,
    0.015406633727252483,
    -0.006990047171711922,
    0.041724562644958496,
    -0.004015188664197922,
    0.008517488837242126,
    -0.02013857290148735,
    -9.301868703914806e-05,
    0.0347936637699604,
    0.009937070310115814,
    -0.019247854128479958,
    -0.01349298283457756,
    0.029644200578331947,
    0.020959703251719475,
    0.01543446909636259,
    -0.04923999309539795,
    -0.014501999132335186,
    -0.01892775297164917,
    0.016227765008807182,
    0.03585138916969299,
    0.0003733795019797981,
    0.04041631892323494,
    0.01153062004595995,
    0.01670095883309841,
    0.012330873869359493,
    0.003764674300327897,
    -0.026638029143214226,
    -0.03089677356183529,
    0.020235994830727577,
    -0.007557183504104614,
    -0.03100811317563057,
    -0.002106756204739213,
    0.0005936668603681028,
    0.016603536903858185,
    0.04147404804825783,
    -0.02299165353178978,
    -0.006603837478905916,
    -0.006823037285357714,
    -0.014293236657977104,
    0.031982336193323135,
    0.013033706694841385,
    0.013277261517941952,
    0.009964904747903347,
    -0.011342734098434448,
    -0.0030531438533216715,
    -0.026777204126119614,
    -0.00138217827770859,
    0.0011855941265821457,
    0.016687041148543358,
    -0.010152790695428848,
    0.03278954699635506,
    0.004752814304083586,
    0.009568257257342339,
    0.03574005141854286,
    0.03203800693154335,
    -0.0005045080906711519,
    -0.0059218816459178925,
    0.04258744418621063,
    -0.016492197290062904,
    -0.009463876485824585,
    0.02126588672399521,
    0.0055669862776994705,
    -0.014307154342532158,
    0.010987838730216026,
    -0.027264313772320747,
    -0.020486509427428246,
    0.029532860964536667,
    0.025677723810076714,
    0.02768183872103691,
    -0.009874441660940647,
    0.02262979932129383,
    -0.028725648298859596,
    -0.0010786035563796759,
    -0.01562931388616562,
    -0.0015978990122675896,
    0.044535890221595764,
    0.0280019398778677,
    -0.025065355002880096,
    0.019498368725180626,
    -0.019540121778845787,
    0.030952442437410355,
    -0.002098057884722948,
    -0.027250397950410843,
    -0.011015674099326134,
    0.014557668939232826,
    -0.03125862777233124,
    -0.021224133670330048,
    -0.04250393807888031,
    -0.02698596566915512,
    -0.004178719129413366,
    -0.005560027435421944,
    0.014265402220189571,
    0.009422124363481998,
    -0.01933135837316513,
    0.03682561218738556,
    0.0234370119869709,
    -0.02602566033601761,
    0.012929324992001057,
    -0.02402154542505741,
    0.0010786035563796759,
    -0.02768183872103691,
    -0.013868753798305988,
    -0.013444271869957447,
    0.014488081447780132,
    -0.007591977249830961,
    0.018496312201023102,
    -0.022462788969278336,
    0.005789665505290031,
    0.005187734961509705,
    0.0027191247791051865,
    0.0005471303593367338,
    -0.0076128533110022545,
    -0.022977735847234726,
    0.010681654326617718,
    0.026554523035883904,
    0.026164835318922997,
    0.004119569901376963,
    -0.0248983446508646,
    0.02258804626762867,
    -0.037215303629636765,
    -0.0022302737925201654,
    -0.028071528300642967,
    -0.01589374616742134,
    0.011377528309822083,
    0.025343704968690872,
    0.0010525083635002375,
    -0.018941670656204224,
    0.016311269253492355,
    0.022671550512313843,
    -0.0034515312872827053,
    0.003161004278808832,
    -0.003827302949503064,
    0.005424331873655319,
    0.01984630525112152,
    -0.01896950602531433,
    -0.009401247836649418,
    0.007696358487010002,
    0.020556095987558365,
    -0.00432137306779623,
    -0.010994797572493553,
    0.017452500760555267,
    -0.024188553914427757,
    0.023854535073041916,
    -0.02204526588320732,
    -0.005768789444118738,
    -0.02972770668566227,
    -0.008190427906811237,
    0.013994011096656322,
    0.017925694584846497,
    0.03529469296336174,
    -0.004978973418474197,
    -0.048126593232154846,
    -0.005963633768260479,
    -0.002800889778882265,
    0.040249310433864594,
    -0.006795202381908894,
    -0.0007859018514864147,
    -0.0037542362697422504,
    -0.019540121778845787,
    0.016408691182732582,
    0.011802010238170624,
    -0.03521118685603142,
    0.007090948522090912,
    0.01047289278358221,
    0.005998427513986826,
    0.00550087820738554,
    0.038273029029369354,
    -0.031536977738142014,
    -0.042921461164951324,
    -0.02130763977766037,
    -0.0049372208304703236,
    -0.015016945078969002,
    -0.0006867399206385016,
    0.02958853170275688,
    0.03159264475107193,
    -0.003453270997852087,
    -0.019053010269999504,
    -0.5794119238853455,
    -0.006642110180109739,
    -0.0011673273984342813,
    -0.025900403037667274,
    0.014836017973721027,
    0.0047945668920874596,
    -6.018216299708001e-05,
    0.020862281322479248,
    -0.020347334444522858,
    0.017675181850790977,
    -0.02757049910724163,
    0.021001454442739487,
    -0.01475251279771328,
    0.02328391931951046,
    0.006308091338723898,
    -0.020848363637924194,
    0.01841280609369278,
    -0.035600874572992325,
    -0.009693514555692673,
    0.012414379045367241,
    0.023590102791786194,
    0.00787032674998045,
    -0.009143774397671223,
    0.03167615085840225,
    -0.01290844939649105,
    0.03195450082421303,
    -0.012142988853156567,
    -0.03471015766263008,
    0.01991589367389679,
    -0.007800739258527756,
    -0.051745135337114334,
    0.01468292623758316,
    0.006054097320884466,
    0.007619812153279781,
    0.05692243203520775,
    -0.014961275272071362,
    -0.043255481868982315,
    0.03746581822633743,
    -0.004001271445304155,
    0.05258018523454666,
    -0.02182258479297161,
    -0.009554339572787285,
    -0.009422124363481998,
    0.004996370058506727,
    -0.011892474256455898,
    0.007132701110094786,
    0.03278954699635506,
    0.0283777117729187,
    0.007619812153279781,
    -0.03262253850698471,
    0.0011812448501586914,
    0.0013091115979477763,
    0.01297803595662117,
    -0.005212090909481049,
    0.021279804408550262,
    -0.001701410161331296,
    0.02651277184486389,
    -0.013757414184510708,
    0.0053269099444150925,
    0.0044222744181752205,
    0.010138873010873795,
    0.012525718659162521,
    0.0005032033659517765,
    -0.02573339268565178,
    -0.0014578545233234763,
    0.013889630325138569,
    0.0004199160321149975,
    -0.033151403069496155,
    0.0003353239153511822,
    -0.011941185221076012,
    0.02258804626762867,
    0.00975614320486784,
    0.0002389889705227688,
    -0.0035698297433555126,
    0.021293722093105316,
    0.037577155977487564,
    0.046038974076509476,
    0.017661264166235924,
    0.011516702361404896,
    0.014334989711642265,
    0.01908084563910961,
    -0.024355564266443253,
    0.008768003433942795,
    -0.015462303534150124,
    0.07331720739603043,
    -0.01418885588645935,
    -0.026304010301828384,
    -0.007598936092108488,
    0.0029592011123895645,
    -0.005177297163754702,
    0.0057548717595636845,
    0.02503751963376999,
    -0.02364577353000641,
    -0.028238536790013313,
    -0.021766915917396545,
    0.03526685759425163,
    -0.011934226378798485,
    -0.000531473197042942,
    0.01041722297668457,
    -0.028308125212788582,
    -0.006019303575158119,
    -0.017842190340161324,
    0.005455646198242903,
    0.015587560832500458,
    -0.002040648367255926,
    0.025635970756411552,
    -0.008183469995856285,
    -8.605995390098542e-05,
    0.016533948481082916,
    -0.010271089151501656,
    0.0009742225520312786,
    -0.02869781292974949,
    -0.022421035915613174,
    -0.0008446161518804729,
    0.0254411268979311,
    -0.03195450082421303,
    0.016993224620819092,
    0.008914136327803135,
    0.032232850790023804,
    -0.01944269984960556,
    -0.005928840022534132,
    -0.005643532145768404,
    0.0072927516885101795,
    -0.04634515941143036,
    0.007438885048031807,
    0.025162776932120323,
    0.0019014737335965037,
    0.005699201952666044,
    -0.02420247159898281,
    0.03156481310725212,
    0.0047945668920874596,
    0.005521754268556833,
    0.032817382365465164,
    -0.012525718659162521,
    0.020082902163267136,
    -0.009463876485824585,
    0.028976162895560265,
    0.01045201625674963,
    -0.016227765008807182,
    -0.011516702361404896,
    -0.005243405234068632,
    -0.003983874339610338,
    0.010779077187180519,
    -0.002559073967859149,
    -0.00017679530719760805,
    -0.007591977249830961,
    -0.03379160538315773,
    0.009018517099320889,
    -0.033374082297086716,
    -0.016408691182732582,
    -0.00911593995988369,
    0.0136391157284379,
    -0.05422244593501091,
    0.024299893528223038,
    -0.032232850790023804,
    -0.004735417664051056,
    -0.019707130268216133,
    -0.024731336161494255,
    -0.010744282975792885,
    -0.015657149255275726,
    0.015545808710157871,
    0.014418493956327438,
    -0.013618240132927895,
    -0.0021519879810512066,
    -0.014905605465173721,
    -0.007473678793758154,
    -0.014251484535634518,
    0.026262257248163223,
    -0.006130643654614687,
    -0.03276171162724495,
    0.001226476626470685,
    -0.01915043219923973,
    0.017661264166235924,
    0.008816714398562908,
    0.02584473229944706,
    0.004975493997335434,
    -0.008816714398562908,
    0.015239624306559563,
    0.021140629425644875,
    -0.009289908222854137,
    -0.000285090587567538,
    -0.002418159507215023,
    -0.028502969071269035,
    -0.022574128583073616,
    0.006360281724482775,
    0.011106137186288834,
    -0.0044570681639015675,
    0.025872567668557167,
    -0.010953045450150967,
    -0.005229487549513578,
    -0.007431926671415567,
    -0.0004196985682938248,
    -0.028753483667969704,
    0.0009977082954719663,
    -0.026679780334234238,
    0.02983904629945755,
    0.011955102905631065,
    0.0073623391799628735,
    0.007035278715193272,
    0.018037034198641777,
    -0.0061271642334759235,
    0.006656027864664793,
    0.017076730728149414,
    -0.002529499353840947,
    -0.008099964819848537,
    -0.01636693999171257,
    0.023604020476341248,
    -0.028976162895560265,
    0.030451413244009018,
    0.01158628985285759,
    0.01230303943157196,
    -0.020597849041223526,
    -0.002305080182850361,
    -0.020055066794157028,
    0.005156421102583408,
    0.011669795028865337,
    -0.013228550553321838,
    0.0022163563407957554,
    -0.021836502477526665,
    0.014710760675370693,
    0.016158176586031914,
    -0.0013856575824320316,
    0.01926177181303501,
    -0.0005184256006032228,
    -0.002084140432998538,
    0.001432629069313407,
    -0.017215903848409653,
    0.02193392440676689,
    0.0008337431354448199,
    -0.031648315489292145,
    -0.005170338321477175,
    0.013374684378504753,
    0.01036155316978693,
    -0.015072614885866642,
    0.0022633278276771307,
    0.020041149109601974,
    0.02858647331595421,
    -0.01800920069217682,
    0.019484451040625572,
    -0.033735934644937515,
    0.0009281209786422551,
    0.019066927954554558,
    0.005974072031676769,
    0.0008807146223261952,
    0.019317442551255226,
    -0.00307575985789299,
    0.009199444204568863,
    0.019651461392641068,
    -0.024759171530604362,
    0.024425150826573372,
    0.004634515848010778,
    0.017215903848409653,
    0.00037642393726855516,
    0.0028582995291799307,
    0.009992740117013454,
    -0.009241197258234024,
    0.016993224620819092,
    0.02182258479297161,
    0.029532860964536667,
    -0.011029590852558613,
    0.008955889381468296,
    0.005587862338870764,
    0.004425753839313984,
    0.03131429851055145,
    0.005862732417881489,
    -0.022421035915613174,
    -0.00977701973170042,
    -0.03529469296336174,
    -0.014119268395006657,
    -0.035489536821842194,
    -0.01670095883309841,
    -0.031091617420315742,
    0.00909506343305111,
    -0.06073581799864769,
    0.013291179202497005,
    -0.0006680383230559528,
    0.0029244073666632175,
    0.03668643906712532,
    0.0168401338160038,
    0.02258804626762867,
    -0.01670095883309841,
    -0.025455044582486153,
    0.03921941667795181,
    0.001978019718080759,
    -0.005055519286543131,
    -0.005267760716378689,
    -0.014863853342831135,
    0.013284220360219479,
    -0.0029035313054919243,
    0.007466719951480627,
    0.0005767049733549356,
    0.009603051468729973,
    0.011196601204574108,
    0.004036064725369215,
    -0.014376741833984852,
    -0.020180324092507362,
    0.04715237393975258,
    -0.005038122646510601,
    -0.03342975303530693,
    0.005142503418028355,
    0.01775868609547615,
    0.010918251238763332,
    -0.017675181850790977,
    -0.006861310452222824,
    0.046985361725091934,
    -0.009603051468729973,
    -0.01111309602856636,
    -0.016895802691578865,
    0.014585503377020359,
    -0.025830816477537155,
    -0.015935497358441353,
    0.01537879928946495,
    -0.021279804408550262,
    0.005177297163754702,
    0.020583931356668472,
    0.015643231570720673,
    0.024759171530604362,
    0.010312842205166817,
    0.045231763273477554,
    -0.018913835287094116,
    -0.0063394056633114815,
    -0.0395534373819828,
    0.02606741338968277,
    0.00926207285374403,
    0.030451413244009018,
    -0.005330389365553856,
    0.008392231538891792,
    0.02972770668566227,
    -0.04537093639373779,
    -0.00854532327502966,
    -0.03654726222157478,
    -0.0009959685849025846,
    0.02610916458070278,
    0.004582325462251902,
    -0.01658961921930313,
    0.02218443900346756,
    0.0073623391799628735,
    0.011781134642660618,
    0.028363794088363647,
    0.005118147935718298,
    0.0027765342965722084,
    0.004164801444858313,
    -0.010389387607574463,
    -0.0097909364849329,
    -0.014216691255569458,
    -0.0018614609725773335,
    0.0012003814335912466,
    -0.0050520398654043674,
    0.049407001584768295,
    -0.00739713292568922,
    0.02925451286137104,
    0.005198173224925995,
    0.0046519129537045956,
    -0.03958127275109291,
    0.005970592610538006,
    0.024661747738718987,
    0.00862186960875988,
    0.003138388507068157,
    0.005758351180702448,
    0.03543386608362198,
    0.04306063801050186,
    0.017452500760555267,
    0.0029383248183876276,
    0.013367725536227226,
    0.02804369293153286,
    0.023951957002282143,
    0.004690185654908419,
    -0.018106622621417046,
    0.020235994830727577,
    -0.036046236753463745,
    -0.027431324124336243,
    0.012817985378205776,
    -0.02548287808895111,
    -0.001127314637415111,
    0.00609584990888834,
    0.01690972037613392,
    -0.027667921036481857,
    -0.01537879928946495,
    0.02584473229944706,
    0.020625684410333633,
    0.008747126907110214,
    -0.004756293725222349,
    -0.010208460502326488,
    -0.03997096046805382,
    0.018217962235212326,
    -0.022448871284723282,
    0.021906090900301933,
    0.014989109709858894,
    -0.016993224620819092,
    0.011996855027973652,
    -0.010152790695428848,
    0.008649704977869987,
    -0.017661264166235924,
    0.009324701502919197,
    0.0035437345504760742,
    -0.03799467906355858,
    -0.0077102757059037685,
    -0.028182867914438248,
    0.026192668825387955,
    -0.004644954111427069,
    0.015587560832500458,
    0.015601478517055511,
    -0.004526655655354261,
    -0.002313778502866626,
    0.010667737573385239,
    -0.021836502477526665,
    -0.013778290711343288,
    -0.02036125212907791,
    -0.00418219855055213,
    -0.017814354971051216,
    0.007564142346382141,
    0.009874441660940647,
    -0.012045565992593765,
    0.016311269253492355,
    0.016923638060688972,
    0.010062327608466148,
    -0.007355380337685347,
    -0.0057200780138373375,
    0.0073275454342365265,
    0.011843763291835785,
    0.01028500683605671,
    0.007626770995557308,
    0.013576487079262733,
    -0.004070858471095562,
    -0.03276171162724495,
    -0.03507201373577118,
    -0.015142202377319336,
    0.010966962203383446,
    0.012964119203388691,
    -0.00894893053919077,
    0.013562570326030254,
    0.0023224770557135344,
    0.006499456241726875,
    0.004728458821773529,
    0.026930294930934906,
    -0.0046623507514595985,
    -0.0018545022467151284,
    0.013068499974906445,
    0.02507927268743515,
    -0.006241983268409967,
    -0.008552282117307186,
    0.02950502559542656,
    0.009122898802161217,
    -0.013750455342233181,
    -0.012699686922132969,
    -0.036630768328905106,
    0.02770967409014702,
    0.026596276089549065,
    -0.003397601190954447,
    0.009651762433350086,
    -0.00021539452427532524,
    0.0016231243498623371,
    -0.023075157776474953,
    0.017048895359039307,
    0.030701927840709686,
    0.007021361030638218,
    -0.02467566542327404,
    -0.005890567321330309,
    0.0032584266737103462,
    0.021405061706900597,
    -0.030256569385528564,
    0.00894893053919077,
    -0.01877466030418873,
    -0.005455646198242903,
    -0.0033123567700386047,
    -0.0015065656043589115,
    -0.008656663820147514,
    -0.013875712640583515,
    -0.0123587092384696,
    -0.028168950229883194,
    -0.005354744847863913,
    -0.012609223835170269,
    0.0014082734705880284,
    0.013339890167117119,
    -0.0259978249669075,
    0.012734481133520603,
    -0.0037959886249154806,
    -0.037437982857227325,
    -0.006429868750274181,
    -0.007097907364368439,
    -0.005615697242319584,
    -0.007877285592257977,
    0.021279804408550262,
    0.022240109741687775,
    0.030340073630213737,
    0.010458975099027157,
    0.031397800892591476,
    -0.003282782156020403,
    0.0032462486997246742,
    0.006148040294647217,
    -0.017327243462204933,
    0.019818469882011414,
    0.0006541208713315427,
    -0.007786822039633989,
    0.022267945110797882,
    0.011196601204574108,
    0.011391445063054562,
    -0.011182683520019054,
    -0.015337047167122364,
    0.02368752658367157,
    -0.006906541995704174,
    0.027069469913840294,
    -0.0031227313447743654,
    -0.013298138044774532,
    -0.011572372168302536,
    0.01852414570748806,
    0.006903062574565411,
    -0.012790150940418243,
    -0.022963818162679672,
    -0.0013412956614047289,
    0.021224133670330048,
    -0.0038934110198169947,
    0.014265402220189571,
    0.016826216131448746,
    0.002433816669508815,
    -0.026846790686249733,
    0.033735934644937515,
    0.019971562549471855,
    0.014418493956327438,
    -0.021182382479310036,
    0.008357438258826733,
    -0.02512102574110031,
    -0.015949415042996407,
    0.01402184646576643,
    0.008858466520905495,
    0.017104564234614372,
    0.0014065338764339685,
    0.003310617059469223,
    -0.0084200669080019,
    0.02496793307363987,
    0.00013178099470678717,
    -0.021613823249936104,
    0.0005053779459558427,
    -0.03727097064256668,
    -0.00018690721481107175,
    -0.024870511144399643,
    -0.03340191766619682,
    0.002084140432998538,
    0.0062071895226836205,
    0.0074597615748643875,
    0.03457098454236984,
    0.0042448267340660095,
    -0.005855773575603962,
    -0.012386543676257133,
    0.008141716942191124,
    -0.00216938485391438,
    0.04300496727228165,
    0.015086532570421696,
    0.018078787252306938,
    0.06140385568141937,
    0.0029313662089407444,
    -0.010445057414472103,
    -0.003333232831209898,
    0.007508472539484501,
    -0.006562084890902042,
    0.021405061706900597,
    0.02642926573753357,
    -0.008413108065724373,
    -0.024397317320108414,
    0.019498368725180626,
    0.014557668939232826,
    -0.032205015420913696,
    -0.022240109741687775,
    0.019066927954554558,
    0.021627740934491158,
    0.02610916458070278,
    -0.04178022965788841,
    -0.004592763725668192,
    -0.011655877344310284,
    0.015935497358441353,
    -0.027765342965722084,
    -0.006586440373212099,
    -0.00612368481233716,
    0.0029922551475465298,
    0.01709064655005932,
    0.01109221950173378,
    0.003750756848603487,
    -0.0077798631973564625,
    0.019540121778845787,
    -0.006638630758970976,
    -0.008239139802753925,
    -0.03390294685959816,
    -0.006422910373657942,
    0.009783977642655373,
    0.011217476800084114,
    0.022017430514097214,
    -0.016408691182732582,
    0.006186313461512327,
    0.033040061593055725,
    0.008113882504403591,
    0.0005793144810013473,
    0.00854532327502966,
    0.010730365291237831,
    0.03429263457655907,
    -0.01407751627266407,
    0.014418493956327438,
    -0.01910867914557457,
    -0.02541329152882099,
    -0.014919523149728775,
    0.004025626927614212,
    -0.01800920069217682,
    -0.015197872184216976,
    -0.011252271011471748,
    0.005977551452815533,
    0.007466719951480627,
    -0.009039393626153469,
    -0.011300981976091862,
    0.02024991251528263,
    -0.0036533346865326166,
    -0.014585503377020359,
    0.006228065583854914,
    -0.0033123567700386047,
    0.025983907282352448,
    -0.024550408124923706,
    -0.029866879805922508,
    -0.019540121778845787,
    -0.012017731554806232,
    0.01688188500702381,
    0.018941670656204224,
    -0.00800254289060831,
    -0.013242468237876892,
    0.027848847210407257,
    0.002501664450392127,
    0.016269516199827194,
    0.009157692082226276,
    0.012602264992892742,
    -0.0037333599757403135,
    0.01793961226940155,
    0.003540255129337311,
    -0.00798166636377573,
    0.017007142305374146,
    0.001906692748889327,
    -0.009519546292722225,
    -0.0023294356651604176,
    -0.01266489364206791,
    0.0011716765584424138,
    0.004150884225964546,
    -0.03201017156243324,
    0.0005984510062262416,
    0.026554523035883904,
    0.021725162863731384,
    0.012894531711935997,
    -0.022434953600168228,
    0.02972770668566227,
    -0.011447114869952202,
    0.01103654969483614,
    -0.0053269099444150925,
    0.01156541332602501,
    0.0018875562818720937,
    0.018691156059503555,
    0.0025938674807548523,
    -0.004801525734364986,
    -0.05817500501871109,
    -0.010521603748202324,
    -0.025983907282352448,
    -0.0019362673629075289,
    -0.0013378163566812873,
    0.027779260650277138,
    -0.028322041034698486,
    0.0124491723254323,
    -0.041863735765218735,
    0.04993586614727974,
    -0.018315384164452553,
    0.01955403946340084,
    0.02676328644156456,
    0.0170210599899292,
    -0.0037751125637441874,
    0.02573339268565178,
    -0.013868753798305988,
    -0.004116090480238199,
    -0.01400096993893385,
    0.008600994013249874,
    -0.023938041180372238,
    -0.023631855845451355,
    -0.02002723328769207,
    0.03562870994210243,
    0.03306789696216583,
    -0.019317442551255226,
    -0.01805095188319683,
    -0.018496312201023102,
    -0.020291663706302643,
    0.00676388805732131,
    -0.01782827265560627,
    0.0048293606378138065,
    0.006148040294647217,
    0.01870507374405861,
    -0.004968535155057907,
    0.03329057618975639,
    -0.0014274100540205836,
    0.008990682661533356,
    -0.0340421199798584,
    0.008058212697505951,
    -0.007139659486711025,
    0.02961636707186699,
    0.0055426303297281265,
    -0.0017248959047719836,
    -0.030562754720449448,
    -0.009512587450444698,
    -0.0034915441647171974,
    -0.014432411640882492,
    0.0068021612241864204,
    0.030145229771733284,
    -0.01647827960550785,
    -0.024619996547698975,
    0.016895802691578865,
    -0.026972047984600067,
    -0.018496312201023102,
    0.017744768410921097,
    0.006005386356264353,
    -0.007494554854929447,
    0.00418219855055213,
    -0.012511800974607468,
    0.004359646234661341,
    0.015517974272370338,
    0.013708703219890594,
    0.008559240959584713,
    -0.023924123495817184,
    0.025914320722222328,
    -0.018148375675082207,
    -0.033958613872528076,
    0.01746641844511032,
    0.01169762946665287,
    0.027027716860175133,
    -0.0069448151625692844,
    0.006617754697799683,
    0.02716689184308052,
    0.0007358859875239432,
    -0.009964904747903347,
    -0.015949415042996407,
    -0.0012499623699113727,
    -0.017118481919169426,
    0.0010594670893624425,
    -0.00042687475797720253,
    -0.039776116609573364,
    0.015531891025602818,
    -0.05224616453051567,
    0.008406149223446846,
    -0.006892624776810408,
    -0.00273652165196836,
    -0.0015135243302211165,
    0.0021537276916205883,
    -0.011433198116719723,
    0.0041021727956831455,
    0.026220504194498062,
    -0.009199444204568863,
    -0.00043013665708713233,
    0.011168765835464,
    -0.01156541332602501,
    0.0032010169234126806,
    -0.020556095987558365,
    -0.007571101188659668,
    -0.01760559342801571,
    0.0004775430425070226,
    -0.009679596871137619,
    0.00025377629208378494,
    -0.024981850758194923,
    0.002586908871307969,
    -0.017215903848409653,
    -0.013827001675963402,
    0.02833595871925354,
    0.19016824662685394,
    0.014007928781211376,
    0.022866396233439445,
    0.024884428828954697,
    0.003813385497778654,
    0.011106137186288834,
    0.020194241777062416,
    0.004213512409478426,
    -0.03924725204706192,
    0.01427931897342205,
    -0.0010664258152246475,
    -0.01926177181303501,
    -0.01845455914735794,
    -0.002332915086299181,
    0.016464361920952797,
    0.008099964819848537,
    -0.01272056344896555,
    -0.066636823117733,
    -0.014307154342532158,
    -0.0038446998223662376,
    -0.005956674925982952,
    0.007654605899006128,
    -0.004523176234215498,
    -0.018259715288877487,
    0.002360749989748001,
    -0.0034619695506989956,
    0.01928960718214512,
    -2.0971336198272184e-05,
    0.01028500683605671,
    0.009178568609058857,
    -0.0007189240423031151,
    0.012971078045666218,
    0.023492680862545967,
    0.0001526572013972327,
    -0.014070557430386543,
    -0.0181205403059721,
    0.0020371689461171627,
    -0.003736839396879077,
    0.007863367907702923,
    0.051856476813554764,
    -0.012511800974607468,
    -0.042336929589509964,
    -0.0049372208304703236,
    -0.02752874605357647,
    -0.00212763249874115,
    -0.022894229739904404,
    -0.009463876485824585,
    0.004460547585040331,
    0.0035907060373574495,
    0.009895318187773228,
    -0.01279710978269577,
    -0.013263344764709473,
    0.039302922785282135,
    0.019247854128479958,
    0.010535521432757378,
    0.010994797572493553,
    -0.01510045025497675,
    -0.004693665076047182,
    0.010159749537706375,
    0.0030392264015972614,
    -0.030367908999323845,
    0.030674094334244728,
    0.002755658235400915,
    0.018315384164452553,
    -0.03340191766619682,
    0.00670821825042367,
    -0.01947053335607052,
    0.010549439117312431,
    -0.004763252567499876,
    -0.010591191239655018,
    -0.0043944395147264,
    -0.02229577861726284,
    -0.03284521773457527,
    -0.022935982793569565,
    -0.023896288126707077,
    -0.029115337878465652,
    0.019206102937459946,
    -0.0019084324594587088,
    0.028642144054174423,
    0.020556095987558365,
    -0.02658235840499401,
    0.0012238670606166124,
    -0.008392231538891792,
    -0.01292236614972353,
    -0.008879343047738075,
    -0.004043023567646742,
    0.027876682579517365,
    -0.021349390968680382,
    -0.03008956089615822,
    -0.02687462605535984,
    -0.014390659518539906,
    -0.0006915240664966404,
    0.0023416136391460896,
    0.01050768606364727,
    0.019971562549471855,
    0.014147103764116764,
    0.0061793546192348,
    0.005267760716378689,
    -0.02313082665205002,
    -0.010786036029458046,
    -0.01724373921751976,
    0.037577155977487564,
    0.011454073712229729,
    0.025357622653245926,
    0.0019362673629075289,
    0.03201017156243324,
    0.0077798631973564625,
    0.006148040294647217,
    0.007244040723890066,
    -0.019595790654420853,
    0.02460607886314392,
    -0.013332931324839592,
    -0.0016570482403039932,
    -0.007024840451776981,
    -0.006395075470209122,
    -0.00836439710110426,
    -0.0003385858435649425,
    -0.011133972555398941,
    -0.0014769909903407097,
    0.0052921161986887455,
    0.010514644905924797,
    -0.0020737024024128914,
    0.003949080593883991,
    -0.015462303534150124,
    -0.01521178986877203,
    -0.02222619205713272,
    -0.026540607213974,
    0.017452500760555267,
    -0.01543446909636259,
    -0.017508171498775482,
    0.016464361920952797,
    -0.05539151281118393,
    0.01175329927355051,
    0.014822100289165974,
    0.02225402742624283,
    -0.004297017585486174,
    -0.021391144022345543,
    -0.021961759775877,
    0.010973921045660973,
    0.0061619579792022705,
    -0.00992315262556076,
    0.0036150615196675062,
    -0.00737625639885664,
    -0.006081932224333286,
    0.021989595144987106,
    -0.0355173721909523,
    -0.01760559342801571,
    -0.015768488869071007,
    -0.007355380337685347,
    0.0011516702361404896,
    0.007111824583262205,
    0.004109131637960672,
    0.01735507883131504,
    -0.04445238411426544,
    0.027737507596611977,
    -0.01908084563910961,
    -0.02379886619746685,
    0.005695722531527281,
    0.025789063423871994,
    0.03509984910488129,
    -0.016867967322468758,
    -0.0029400645289570093,
    0.008113882504403591,
    -0.00367073155939579,
    -0.01636693999171257,
    -0.040945183485746384,
    -0.17558273673057556,
    0.02423030696809292,
    0.017814354971051216,
    -0.04075033962726593,
    -0.00491634476929903,
    0.0022946421522647142,
    0.006701259408146143,
    -0.013840919360518456,
    -0.018078787252306938,
    -0.003635937813669443,
    -0.00023529214377049357,
    -0.021572072058916092,
    -0.026735451072454453,
    -0.01180896908044815,
    0.002816546941176057,
    -0.01211515348404646,
    -0.003834261791780591,
    0.009895318187773228,
    0.046150315552949905,
    0.009449958801269531,
    0.034403976052999496,
    -0.027208644896745682,
    0.007696358487010002,
    0.012400461360812187,
    -0.006892624776810408,
    -0.024995768442749977,
    0.00017538180691190064,
    -0.003917766269296408,
    -0.01690972037613392,
    -0.016812298446893692,
    -0.0031209916342049837,
    0.0011890734313055873,
    0.01650611311197281,
    -0.0012604004004970193,
    0.011760258115828037,
    0.00809300597757101,
    0.012727522291243076,
    -0.015490138903260231,
    -0.01654786616563797,
    0.018357137218117714,
    0.03312356770038605,
    0.04520392790436745,
    0.03824519366025925,
    -0.00043948745587840676,
    -0.019790636375546455,
    0.01984630525112152,
    0.022170521318912506,
    -0.025677723810076714,
    0.014836017973721027,
    -0.008955889381468296,
    0.03649159520864487,
    -0.015643231570720673,
    0.015128284692764282,
    -0.015142202377319336,
    0.016464361920952797,
    0.016269516199827194,
    0.004335290286689997,
    -0.006784764118492603,
    -0.0001253659138455987,
    0.007132701110094786,
    -0.010090162046253681,
    -0.0205004271119833,
    -0.0014656831044703722,
    0.004613639786839485,
    -0.017410749569535255,
    -0.0006136732408776879,
    -0.040249310433864594,
    0.034905001521110535,
    0.008294809609651566,
    5.531648639589548e-05,
    0.013145046308636665,
    0.02299165353178978,
    0.012059483677148819,
    0.02164165861904621,
    0.014641173183918,
    -0.010904334485530853,
    -0.01922001875936985,
    0.010138873010873795,
    0.014849935658276081,
    -0.018176209181547165,
    -0.007696358487010002,
    0.026846790686249733,
    0.0047945668920874596,
    0.016339104622602463,
    -0.0014187116175889969,
    0.00601234519854188,
    -0.014849935658276081,
    0.012650975957512856,
    -0.0021572071127593517,
    -0.001495257718488574,
    0.007250999566167593,
    -0.019359193742275238,
    -0.009331660345196724,
    -0.013715662062168121,
    0.0064124721102416515,
    0.025496795773506165,
    -0.006603837478905916,
    0.014460246078670025,
    -0.019303524866700172,
    -0.034682322293519974,
    0.01603291928768158,
    -0.010500727221369743,
    -0.022490624338388443,
    0.011008715257048607,
    0.014989109709858894,
    0.013221591711044312,
    -0.0384400375187397,
    0.0018771181348711252,
    0.019066927954554558,
    0.01903909258544445,
    -0.024800922721624374,
    0.01147495023906231,
    0.01330509688705206,
    0.015128284692764282,
    -0.018551981076598167,
    0.005841855891048908,
    -0.011899433098733425,
    -0.007306669373065233,
    0.006165436934679747,
    0.01874682493507862,
    0.04548227787017822,
    -0.0031662234105169773,
    -0.014849935658276081,
    0.002031950047239661,
    0.004745855461806059,
    -0.013117210939526558,
    -0.09642019867897034,
    -0.03262253850698471,
    0.04912865161895752,
    -0.0002768270787782967,
    -0.027598334476351738,
    -0.006861310452222824,
    -0.003114032791927457,
    0.03131429851055145,
    -0.03841220587491989,
    0.02182258479297161,
    0.0014978671679273248,
    0.018176209181547165,
    -0.02294990047812462,
    0.00975614320486784,
    -0.02254629321396351,
    0.02115454711019993,
    0.0017066291766241193,
    -0.02449473924934864,
    -0.0029748582746833563,
    0.017549924552440643,
    -0.007411050144582987,
    -0.003167963121086359,
    -0.0017770864069461823,
    0.014390659518539906,
    -0.03228851780295372,
    -0.017188070341944695,
    -0.031759656965732574,
    0.031286463141441345,
    0.008823673240840435,
    0.00030096518457867205,
    0.004537093918770552,
    -0.04692969471216202,
    -0.012588347308337688,
    -0.006743011996150017,
    0.008392231538891792,
    -0.013576487079262733,
    -0.018899917602539062,
    -0.0002937889948952943,
    0.05107709765434265,
    -0.023019487038254738,
    0.0037890300154685974,
    -0.020347334444522858,
    0.013353807851672173,
    -0.003862096695229411,
    0.0067743263207376,
    0.012052524834871292,
    0.004077817313373089,
    0.011231394484639168,
    0.0336802676320076,
    -0.02738957107067108,
    -0.005309512838721275,
    -0.015684982761740685,
    -0.017730850726366043,
    -0.0011438416549935937,
    0.010994797572493553,
    -0.01658961921930313,
    0.0016753148520365357,
    -0.026679780334234238,
    0.004432712681591511,
    0.019943727180361748,
    0.004467506427317858,
    -0.014460246078670025,
    -0.02624833956360817,
    -0.012678811326622963,
    0.0134512297809124,
    -0.006332446821033955,
    0.014808183535933495,
    0.001701410161331296,
    0.002793931169435382,
    -0.01537879928946495,
    -0.018037034198641777,
    -0.0025068833492696285,
    -0.012428296729922295,
    -0.002759137423709035,
    -0.014766430482268333,
    -0.008907177485525608,
    0.00023681437596678734,
    -0.017689097672700882,
    -0.007932955399155617,
    0.006001906935125589,
    -0.020987536758184433,
    0.0008976765093393624,
    -0.019233936443924904,
    -0.014947357587516308,
    0.011579331010580063,
    0.016756627708673477,
    0.0035141599364578724,
    -0.0036916076205670834,
    0.0248983446508646,
    -0.05934407189488411,
    0.007438885048031807,
    -0.0047667319886386395,
    0.04935133084654808,
    -0.0010838225716724992,
    0.005876649636775255,
    0.009470835328102112,
    -0.014919523149728775,
    -0.018760742619633675,
    0.01422364916652441,
    0.010354594327509403,
    -0.03459881991147995,
    -0.038273029029369354,
    -0.08138933777809143,
    -0.007431926671415567,
    -0.004390960093587637,
    -0.0108904168009758,
    -0.015183954499661922,
    -0.044897742569446564,
    -0.009693514555692673,
    -0.019053010269999504,
    0.009964904747903347,
    0.02159990556538105,
    -0.021808668971061707,
    0.006656027864664793,
    -0.015684982761740685,
    -0.0121708232909441,
    -0.010918251238763332,
    0.01760559342801571,
    0.027960188686847687,
    -0.008900218643248081,
    0.03529469296336174,
    0.009916193783283234,
    0.001140362350270152,
    -0.013771331869065762,
    0.017160234972834587,
    0.016937555745244026,
    -0.02141897939145565,
    0.000985530554316938,
    -0.0034898044541478157,
    0.008656663820147514,
    -0.017007142305374146,
    -0.010973921045660973,
    0.017118481919169426,
    -0.00123343535233289,
    0.0011812448501586914,
    0.015601478517055511,
    0.0015900704311206937,
    -0.022935982793569565,
    0.03974828124046326,
    0.005758351180702448,
    0.0008111272472888231,
    0.020444756373763084,
    -0.012456131167709827,
    -0.04033281281590462,
    0.024814840406179428,
    0.0003612017026171088,
    -0.026777204126119614,
    -0.0031227313447743654,
    -0.007355380337685347,
    0.011843763291835785,
    0.013005871325731277,
    0.0036463758442550898,
    0.03649159520864487,
    -0.0070422375574707985,
    -0.014348906464874744,
    -0.038022514432668686,
    0.007898161187767982,
    0.003743798239156604,
    -0.0038899315986782312,
    0.011127013713121414,
    0.0010620765388011932,
    0.013736538589000702,
    0.02335350587964058,
    0.003778591752052307,
    0.015643231570720673,
    0.007974707521498203,
    0.003900369629263878,
    -0.04333898797631264,
    -0.045120421797037125,
    -0.024522574618458748,
    0.00854532327502966,
    -0.0012604004004970193,
    -0.01103654969483614,
    -0.026554523035883904,
    0.033151403069496155,
    0.014293236657977104,
    0.004053461831063032,
    -0.012275204062461853,
    0.002035429235547781,
    -0.016353022307157516,
    -0.04345032572746277,
    0.004606680944561958,
    0.022824643179774284,
    -0.008322644047439098,
    -0.015545808710157871,
    0.02939368598163128,
    0.027375653386116028,
    0.01677054539322853,
    -0.03532252833247185,
    -0.0010464193765074015,
    0.005810541566461325,
    0.0007511082221753895,
    -0.00937341246753931,
    0.010006657801568508,
    -0.018551981076598167,
    0.011774175800383091,
    -0.013924423605203629,
    -0.026554523035883904,
    0.006656027864664793,
    -0.016339104622602463,
    -0.001637911656871438,
    0.005431290715932846,
    0.01297803595662117,
    -0.013729579746723175,
    -0.006513373926281929,
    -0.016199929639697075,
    -0.025232365354895592,
    -0.00858707632869482,
    -0.012198658660054207,
    -0.02317257970571518,
    0.018538063392043114,
    0.03445964306592941,
    0.014028805308043957,
    -0.03376377001404762,
    0.020778775215148926,
    0.026011742651462555,
    -0.01724373921751976,
    -0.0017970927292481065,
    -0.016311269253492355,
    -0.0006036700797267258,
    -0.021460730582475662,
    0.012824944220483303,
    -0.019484451040625572,
    0.005382579751312733,
    0.053359560668468475,
    -0.0134512297809124,
    0.023228250443935394,
    0.014655090868473053,
    0.006645589601248503,
    -0.0008333082078024745,
    0.00550087820738554,
    -0.001062946394085884,
    -0.004999849479645491,
    -0.0023363945074379444,
    -0.012964119203388691,
    -0.01621384732425213,
    -0.02328391931951046,
    -0.0068299961276352406,
    -0.006969170644879341,
    -0.032232850790023804,
    0.0037403188180178404,
    0.09397072345018387,
    -0.0004233953950461,
    -0.015907661989331245,
    0.021544236689805984,
    -0.019136514514684677,
    0.006642110180109739,
    0.013840919360518456,
    0.008851507678627968,
    -0.0036289789713919163,
    -0.02126588672399521,
    0.022281862795352936,
    -0.0162973515689373,
    -0.013179839588701725,
    -0.024800922721624374,
    -0.020806610584259033,
    -0.013298138044774532,
    -0.011836804449558258,
    0.003540255129337311,
    -0.01899733953177929,
    0.007160536013543606,
    -0.0013073718873783946,
    0.034431807696819305,
    -0.024439068511128426,
    -0.015796322375535965,
    -0.016687041148543358,
    -0.009164650924503803,
    0.021043207496404648,
    0.021975677460432053,
    -0.01164195965975523,
    -0.059622421860694885,
    0.03125862777233124,
    -0.002284203888848424,
    -0.01665920577943325,
    -0.01746641844511032,
    -0.0009107241639867425,
    0.004185677506029606,
    -0.007237081881612539,
    -0.026234421879053116,
    0.010605108924210072,
    0.020152490586042404,
    0.01695147342979908,
    0.017856108024716377,
    -0.016060754656791687,
    -0.012595306150615215,
    -0.01050768606364727,
    -0.032121509313583374,
    0.01621384732425213,
    -0.01643652655184269,
    -0.019971562549471855
  ]
}
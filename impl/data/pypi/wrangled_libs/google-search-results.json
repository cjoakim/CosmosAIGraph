{
  "classifiers": [
    "license :: osi approved :: mit license",
    "natural language :: english",
    "programming language :: python :: 3.5",
    "programming language :: python :: 3.6",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: utilities"
  ],
  "description": "scrape and search localized results from google, bing, baidu, yahoo, yandex, ebay, homedepot, youtube at scale using serpapi.com\n# google search results in python\n\n[![package](https://badge.fury.io/py/google-search-results.svg)](https://badge.fury.io/py/google-search-results)\n[![build](https://github.com/serpapi/google-search-results-python/actions/workflows/python-package.yml/badge.svg)](https://github.com/serpapi/google-search-results-python/actions/workflows/python-package.yml)\n\nthis python package is meant to scrape and parse search results from google, bing, baidu, yandex, yahoo, home depot, ebay and more, using [serpapi](https://serpapi.com). \n\nthe following services are provided:\n- [search api](https://serpapi.com/search-api)\n- [search archive api](https://serpapi.com/search-archive-api)\n- [account api](https://serpapi.com/account-api)\n- [location api](https://serpapi.com/locations-api) (google only)\n\nserpapi provides a [script builder](https://serpapi.com/demo) to get you started quickly.\n\n## installation\n\npython 3.7+\n```bash\npip install google-search-results\n```\n\n[link to the python package page](https://pypi.org/project/google-search-results/)\n\n## quick start\n\n```python\nfrom serpapi import googlesearch\nsearch = googlesearch({\n    \"q\": \"coffee\", \n    \"location\": \"austin,texas\",\n    \"api_key\": \"<your secret api key>\"\n  })\nresult = search.get_dict()\n```\n\nthis example runs a search for \"coffee\" using your secret api key.\n\nthe serpapi service (backend)\n- searches google using the search: q = \"coffee\"\n- parses the messy html responses\n- returns a standardized json response\nthe googlesearch class\n- formats the request\n- executes a get http request against serpapi service\n- parses the json response into a dictionary\n\net voil\u00e0...\n\nalternatively, you can search:\n- bing using bingsearch class\n- baidu using baidusearch class\n- yahoo using yahoosearch class\n- duckduckgo using duckduckgosearch class\n- ebay using ebaysearch class\n- yandex using yandexsearch class\n- homedepot using homedepotsearch class\n- googlescholar using googlescholarsearch class\n- youtube using youtubesearch class\n- walmart using walmartsearch\n- apple app store using appleappstoresearch class\n- naver using naversearch class\n\n\nsee the [playground to generate your code.](https://serpapi.com/playground)\n\n## summary\n- [google search results in python](#google-search-results-in-python)\n  - [installation](#installation)\n  - [quick start](#quick-start)\n  - [summary](#summary)\n    - [google search api capability](#google-search-api-capability)\n    - [how to set serp api key](#how-to-set-serp-api-key)\n    - [example by specification](#example-by-specification)\n    - [location api](#location-api)\n    - [search archive api](#search-archive-api)\n    - [account api](#account-api)\n    - [search bing](#search-bing)\n    - [search baidu](#search-baidu)\n    - [search yandex](#search-yandex)\n    - [search yahoo](#search-yahoo)\n    - [search ebay](#search-ebay)\n    - [search home depot](#search-home-depot)\n    - [search youtube](#search-youtube)\n    - [search google scholar](#search-google-scholar)\n    - [generic search with serpapiclient](#generic-search-with-serpapiclient)\n    - [search google images](#search-google-images)\n    - [search google news](#search-google-news)\n    - [search google shopping](#search-google-shopping)\n    - [google search by location](#google-search-by-location)\n    - [batch asynchronous searches](#batch-asynchronous-searches)\n    - [python object as a result](#python-object-as-a-result)\n    - [python paginate using iterator](#pagination-using-iterator)\n    - [error management](#error-management)\n  - [change log](#change-log)\n  - [conclusion](#conclusion)\n\n### google search api capability\nsource code.\n```python\nparams = {\n  \"q\": \"coffee\",\n  \"location\": \"location requested\", \n  \"device\": \"desktop|mobile|tablet\",\n  \"hl\": \"google ui language\",\n  \"gl\": \"google country\",\n  \"safe\": \"safe search flag\",\n  \"num\": \"number of results\",\n  \"start\": \"pagination offset\",\n  \"api_key\": \"your serp api key\", \n  # to be match\n  \"tbm\": \"nws|isch|shop\", \n  # to be search\n  \"tbs\": \"custom to be search criteria\",\n  # allow async request\n  \"async\": \"true|false\",\n  # output format\n  \"output\": \"json|html\"\n}\n\n# define the search search\nsearch = googlesearch(params)\n# override an existing parameter\nsearch.params_dict[\"location\"] = \"portland\"\n# search format return as raw html\nhtml_results = search.get_html()\n# parse results\n#  as python dictionary\ndict_results = search.get_dict()\n#  as json using json package\njson_results = search.get_json()\n#  as dynamic python object\nobject_result = search.get_object()\n```\n[link to the full documentation](https://serpapi.com/search-api)\n\nsee below for more hands-on examples.\n\n### how to set serp api key\n\nyou can get an api key here if you don't already have one: https://serpapi.com/users/sign_up\n\nthe serpapi `api_key` can be set globally:\n```python\ngooglesearch.serp_api_key = \"your private key\"\n```\nthe serpapi `api_key` can be provided for each search:\n```python\nquery = googlesearch({\"q\": \"coffee\", \"serp_api_key\": \"your private key\"})\n```\n\n### example by specification\n\nwe love true open source, continuous integration and test driven development (tdd). \n we are using rspec to test [our infrastructure around the clock](https://travis-ci.org/serpapi/google-search-results-python) to achieve the best quality of service (qos).\n \nthe directory test/ includes specification/examples.\n\nset your api key.\n```bash\nexport api_key=\"your secret key\"\n```\n\nrun test\n```python\nmake test\n```\n\n### location api\n\n```python\nfrom serpapi import googlesearch\nsearch = googlesearch({})\nlocation_list = search.get_location(\"austin\", 3)\nprint(location_list)\n```\n\nthis prints the first 3 locations matching austin (texas, texas, rochester).\n```python\n[   {   'canonical_name': 'austin,tx,texas,united states',\n        'country_code': 'us',\n        'google_id': 200635,\n        'google_parent_id': 21176,\n        'gps': [-97.7430608, 30.267153],\n        'id': '585069bdee19ad271e9bc072',\n        'keys': ['austin', 'tx', 'texas', 'united', 'states'],\n        'name': 'austin, tx',\n        'reach': 5560000,\n        'target_type': 'dma region'},\n        ...]\n```\n\n### search archive api\n\nthe search results are stored in a temporary cache.\nthe previous search can be retrieved from the cache for free.\n\n```python\nfrom serpapi import googlesearch\nsearch = googlesearch({\"q\": \"coffee\", \"location\": \"austin,texas\"})\nsearch_result = search.get_dictionary()\nassert search_result.get(\"error\") == none\nsearch_id = search_result.get(\"search_metadata\").get(\"id\")\nprint(search_id)\n```\n\nnow let's retrieve the previous search from the archive.\n\n```python\narchived_search_result = googlesearch({}).get_search_archive(search_id, 'json')\nprint(archived_search_result.get(\"search_metadata\").get(\"id\"))\n```\nthis prints the search result from the archive.\n\n### account api\n```python\nfrom serpapi import googlesearch\nsearch = googlesearch({})\naccount = search.get_account()\n```\nthis prints your account information.\n\n### search bing\n```python\nfrom serpapi import bingsearch\nsearch = bingsearch({\"q\": \"coffee\", \"location\": \"austin,texas\"})\ndata = search.get_dict()\n```\nthis code prints bing search results for coffee as a dictionary. \n\nhttps://serpapi.com/bing-search-api\n\n### search baidu\n```python\nfrom serpapi import baidusearch\nsearch = baidusearch({\"q\": \"coffee\"})\ndata = search.get_dict()\n```\nthis code prints baidu search results for coffee as a dictionary. \nhttps://serpapi.com/baidu-search-api\n\n### search yandex\n```python\nfrom serpapi import yandexsearch\nsearch = yandexsearch({\"text\": \"coffee\"})\ndata = search.get_dict()\n```\nthis code prints yandex search results for coffee as a dictionary. \n\nhttps://serpapi.com/yandex-search-api\n\n### search yahoo\n```python\nfrom serpapi import yahoosearch\nsearch = yahoosearch({\"p\": \"coffee\"})\ndata = search.get_dict()\n```\nthis code prints yahoo search results for coffee as a dictionary. \n\nhttps://serpapi.com/yahoo-search-api\n\n\n### search ebay\n```python\nfrom serpapi import ebaysearch\nsearch = ebaysearch({\"_nkw\": \"coffee\"})\ndata = search.get_dict()\n```\nthis code prints ebay search results for coffee as a dictionary. \n\nhttps://serpapi.com/ebay-search-api\n\n### search home depot\n```python\nfrom serpapi import homedepotsearch\nsearch = homedepotsearch({\"q\": \"chair\"})\ndata = search.get_dict()\n```\nthis code prints home depot search results for chair as dictionary. \n\nhttps://serpapi.com/home-depot-search-api\n\n### search youtube\n```python\nfrom serpapi import homedepotsearch\nsearch = youtubesearch({\"q\": \"chair\"})\ndata = search.get_dict()\n```\nthis code prints youtube search results for chair as dictionary. \n\nhttps://serpapi.com/youtube-search-api\n\n### search google scholar\n```python\nfrom serpapi import googlescholarsearch\nsearch = googlescholarsearch({\"q\": \"coffee\"})\ndata = search.get_dict()\n```\nthis code prints google scholar search results.\n\n### search walmart\n```python\nfrom serpapi import walmartsearch\nsearch = walmartsearch({\"query\": \"chair\"})\ndata = search.get_dict()\n```\nthis code prints walmart search results.\n\n### search youtube\n```python\nfrom serpapi import youtubesearch\nsearch = youtubesearch({\"search_query\": \"chair\"})\ndata = search.get_dict()\n```\nthis code prints youtube search results.\n\n### search apple app store\n```python\nfrom serpapi import appleappstoresearch\nsearch = appleappstoresearch({\"term\": \"coffee\"})\ndata = search.get_dict()\n```\nthis code prints apple app store search results.\n\n### search naver\n```python\nfrom serpapi import naversearch\nsearch = naversearch({\"query\": \"chair\"})\ndata = search.get_dict()\n```\nthis code prints naver search results.\n\n### generic search with serpapiclient\n```python\nfrom serpapi import serpapiclient\nquery = {\"q\": \"coffee\", \"location\": \"austin,texas\", \"engine\": \"google\"}\nsearch = serpapiclient(query)\ndata = search.get_dict()\n```\nthis class enables interaction with any search engine supported by serpapi.com \n\n### search google images\n\n```python\nfrom serpapi import googlesearch\nsearch = googlesearch({\"q\": \"coffe\", \"tbm\": \"isch\"})\nfor image_result in search.get_dict()['images_results']:\n    link = image_result[\"original\"]\n    try:\n        print(\"link: \" + link)\n        # wget.download(link, '.')\n    except:\n        pass\n```\n\nthis code prints all the image links, \n and downloads the images if you un-comment the line with wget (linux/os x tool to download files).\n\nthis tutorial covers more ground on this topic.\nhttps://github.com/serpapi/showcase-serpapi-tensorflow-keras-image-training\n\n### search google news\n\n```python\nfrom serpapi import googlesearch\nsearch = googlesearch({\n    \"q\": \"coffe\",   # search search\n    \"tbm\": \"nws\",  # news\n    \"tbs\": \"qdr:d\", # last 24h\n    \"num\": 10\n})\nfor offset in [0,1,2]:\n    search.params_dict[\"start\"] = offset * 10\n    data = search.get_dict()\n    for news_result in data['news_results']:\n        print(str(news_result['position'] + offset * 10) + \" - \" + news_result['title'])\n```\n\nthis script prints the first 3 pages of the news headlines for the last 24 hours.\n\n### search google shopping\n\n```python\nfrom serpapi import googlesearch\nsearch = googlesearch({\n    \"q\": \"coffe\",   # search search\n    \"tbm\": \"shop\",  # news\n    \"tbs\": \"p_ord:rv\", # last 24h\n    \"num\": 100\n})\ndata = search.get_dict()\nfor shopping_result in data['shopping_results']:\n    print(shopping_result['position']) + \" - \" + shopping_result['title'])\n\n```\n\nthis script prints all the shopping results, ordered by review order.\n\n### google search by location\n\nwith serpapi, we can build a google search from anywhere in the world.\nthis code looks for the best coffee shop for the given cities.\n\n```python\nfrom serpapi import googlesearch\nfor city in [\"new york\", \"paris\", \"berlin\"]:\n  location = googlesearch({}).get_location(city, 1)[0][\"canonical_name\"]\n  search = googlesearch({\n      \"q\": \"best coffee shop\",   # search search\n      \"location\": location,\n      \"num\": 1,\n      \"start\": 0\n  })\n  data = search.get_dict()\n  top_result = data[\"organic_results\"][0][\"title\"]\n```\n\n### batch asynchronous searches\n\nwe offer two ways to boost your searches thanks to the`async` parameter.\n - blocking - async=false - more compute intensive because the search needs to maintain many connections. (default) \n- non-blocking - async=true - the way to go for large batches of queries  (recommended)\n\n```python\n# operating system\nimport os\n\n# regular expression library\nimport re\n\n# safe queue (named queue in python2)\nfrom queue import queue\n\n# time utility\nimport time\n\n# serpapi search\nfrom serpapi import googlesearch\n\n# store searches\nsearch_queue = queue()\n\n# serpapi search\nsearch = googlesearch({\n    \"location\": \"austin,texas\",\n    \"async\": true,\n    \"api_key\": os.getenv(\"api_key\")\n})\n\n# loop through a list of companies\nfor company in ['amd', 'nvidia', 'intel']:\n    print(\"execute async search: q = \" + company)\n    search.params_dict[\"q\"] = company\n    result = search.get_dict()\n    if \"error\" in result:\n        print(\"oops error: \", result[\"error\"])\n        continue\n    print(\"add search to the queue where id: \", result['search_metadata'])\n    # add search to the search_queue\n    search_queue.put(result)\n\nprint(\"wait until all search statuses are cached or success\")\n\n# create regular search\nwhile not search_queue.empty():\n    result = search_queue.get()\n    search_id = result['search_metadata']['id']\n\n    # retrieve search from the archive - blocker\n    print(search_id + \": get search from archive\")\n    search_archived = search.get_search_archive(search_id)\n    print(search_id + \": status = \" +\n          search_archived['search_metadata']['status'])\n\n    # check status\n    if re.search('cached|success',\n                 search_archived['search_metadata']['status']):\n        print(search_id + \": search done with q = \" +\n              search_archived['search_parameters']['q'])\n    else:\n        # requeue search_queue\n        print(search_id + \": requeue search\")\n        search_queue.put(result)\n\n        # wait 1s\n        time.sleep(1)\n\nprint('all searches completed')\n```\n\nthis code shows how to run searches asynchronously.\nthe search parameters must have {async: true}. this indicates that the client shouldn't wait for the search to be completed.\nthe current thread that executes the search is now non-blocking, which allows it to execute thousands of searches in seconds. the serpapi backend will do the processing work.\nthe actual search result is deferred to a later call from the search archive using get_search_archive(search_id).\nin this example the non-blocking searches are persisted in a queue: search_queue.\na loop through the search_queue allows it to fetch individual search results.\nthis process can easily be multithreaded to allow a large number of concurrent search requests.\nto keep things simple, this example only explores search results one at a time (single threaded).\n\n[see example.](https://github.com/serpapi/google-search-results-python/blob/master/tests/test_example.py)\n\n### python object as a result\n\nthe search results can be automatically wrapped in dynamically generated python object.\nthis solution offers a more dynamic, fully oriented object programming approach over the regular dictionary / json data structure.\n\n```python\nfrom serpapi import googlesearch\nsearch = googlesearch({\"q\": \"coffee\", \"location\": \"austin,texas\"})\nr = search.get_object()\nassert type(r.organic_results), list\nassert r.organic_results[0].title\nassert r.search_metadata.id\nassert r.search_metadata.google_url\nassert r.search_parameters.q, \"coffee\"\nassert r.search_parameters.engine, \"google\"\n```\n\n### pagination using iterator\nlet's collect links across multiple search results pages.\n```python\n# to get 2 pages\nstart = 0\nend = 40\npage_size = 10\n\n# basic search parameters\nparameter = {\n  \"q\": \"coca cola\",\n  \"tbm\": \"nws\",\n  \"api_key\": os.getenv(\"api_key\"),\n  # optional pagination parameter\n  #  the pagination method can take argument directly\n  \"start\": start,\n  \"end\": end,\n  \"num\": page_size\n}\n\n# as proof of concept \n# urls collects\nurls = []\n\n# initialize a search\nsearch = googlesearch(parameter)\n\n# create a python generator using parameter\npages = search.pagination()\n# or set custom parameter\npages = search.pagination(start, end, page_size)\n\n# fetch one search result per iteration \n# using a basic python for loop \n# which invokes python iterator under the hood.\nfor page in pages:\n  print(f\"current page: {page['serpapi_pagination']['current']}\")\n  for news_result in page[\"news_results\"]:\n    print(f\"title: {news_result['title']}\\nlink: {news_result['link']}\\n\")\n    urls.append(news_result['link'])\n  \n# check if the total number pages is as expected\n# note: the exact number if variable depending on the search engine backend\nif len(urls) == (end - start):\n  print(\"all search results count match!\")\nif len(urls) == len(set(urls)):\n  print(\"all search results are unique!\")\n```\n\nexamples to fetch links with pagination: [test file](https://github.com/serpapi/google-search-results-python/blob/master/tests/test_example_paginate.py), [online ide](https://replit.com/@dimitryzub1/scrape-google-news-with-pagination-python-serpapi)\n\n### error management\n\nserpapi keeps error management simple.\n - backend service error or search fail\n - client error\n\nif it's a backend error, a simple error message is returned as string in the server response.\n```python\nfrom serpapi import googlesearch\nsearch = googlesearch({\"q\": \"coffee\", \"location\": \"austin,texas\", \"api_key\": \"<secret_key>\"})\ndata = search.get_json()\nassert data[\"error\"] == none\n```\nin some cases, there are more details available in the data object.\n\nif it's a client error, then a serpapiclientexception is raised.\n\n## change log\n2023-03-10 @ 2.4.2\n - change long description to readme.md\n\n2021-12-22 @ 2.4.1\n - add more search engine \n   - youtube\n   - walmart\n   - apple_app_store\n   - naver \n - raise serpapiclientexception instead of raw string in order to follow python guideline 3.5+\n - add more unit error tests for serp_api_client\n\n2021-07-26 @ 2.4.0\n - add page size support using num parameter\n - add youtube search engine\n\n2021-06-05 @ 2.3.0\n - add pagination support\n\n2021-04-28 @ 2.2.0\n - add get_response method to provide raw requests.response object\n\n2021-04-04 @ 2.1.0\n - add home depot search engine\n - get_object() returns dynamic python object\n \n2020-10-26 @ 2.0.0\n - reduce class name to <engine>search\n - add get_raw_json\n\n2020-06-30 @ 1.8.3\n - simplify import\n - improve package for python 3.5+\n - add support for python 3.5 and 3.6\n\n2020-03-25 @ 1.8\n - add support for yandex, yahoo, ebay\n - clean-up test\n\n2019-11-10 @ 1.7.1\n - increase engine parameter priority over engine value set in the class\n\n2019-09-12 @ 1.7\n - change  namespace \"from lib.\" instead: \"from serpapi import googlesearch\"\n - support for bing and baidu\n\n2019-06-25 @ 1.6\n - new search engine supported: baidu and bing\n\n## conclusion\nserpapi supports all the major search engines. google has the more advance support with all the major services available: images, news, shopping and more..\nto enable a type of search, the field tbm (to be matched) must be set to:\n\n * isch: google images api.\n * nws: google news api.\n * shop: google shopping api.\n * any other google service should work out of the box.\n * (no tbm parameter): regular google search.\n\nthe field `tbs` allows to customize the search even more.\n\n[the full documentation is available here.](https://serpapi.com/search-api)\n",
  "docs_url": null,
  "keywords": "scrape,serp,api,json,search,localized,rank,google,bing,baidu,yandex,yahoo,ebay,scale,datamining,training,machine,ml,youtube,naver,walmart,apple,store,app",
  "license": "mit",
  "name": "google-search-results",
  "package_url": "https://pypi.org/project/google-search-results/",
  "project_url": "https://pypi.org/project/google-search-results/",
  "project_urls": {
    "Homepage": "https://github.com/serpapi/google-search-results-python"
  },
  "release_url": "https://pypi.org/project/google-search-results/2.4.2/",
  "requires_dist": [],
  "requires_python": ">=3.5",
  "summary": "scrape and search localized results from google, bing, baidu, yahoo, yandex, ebay, homedepot, youtube at scale using serpapi.com",
  "version": "2.4.2",
  "releases": [],
  "developers": [
    "victor@serpapi.com",
    "vikoky"
  ],
  "kwds": "googlesearch yandexsearch api walmartsearch bingsearch",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_google_search_results",
  "homepage": "https://github.com/serpapi/google-search-results-python",
  "release_count": 41,
  "dependency_ids": [],
  "documentation_summary": "The HTML text describes the \"google-search-results\" Python package available on PyPI, which allows users to scrape and search localized results from various search engines like Google, Bing, Baidu, Yahoo, Yandex, eBay, Home Depot, and YouTube at scale using SerpApi.com. The package, last updated on March 10, 2023, requires Python 3.5 or higher and is licensed under the MIT License. It offers features like Search API, Search Archive API, Account API, and Location API (Google Only), with installation done via pip. The package supports multiple search engines and provides a standardized JSON response for parsed search results. It also includes functionalities for pagination, error management, and asynchronous searches, with examples provided for setting up and using the API key, conducting searches, and managing search results.",
  "embedding": [
    -0.01695460081100464,
    0.026886338368058205,
    0.004027409944683313,
    -0.015029200352728367,
    -0.01682993397116661,
    0.021470285952091217,
    -0.004373705014586449,
    -0.014392017386853695,
    0.004391019698232412,
    -0.048869140446186066,
    -0.0038092443719506264,
    0.013173059560358524,
    -0.03138817474246025,
    0.024434570223093033,
    0.010402699932456017,
    0.0014501099940389395,
    0.02030673436820507,
    -0.04111213609576225,
    0.0029192662332206964,
    0.0063025676645338535,
    0.022315245121717453,
    -0.010541217401623726,
    -0.0071890829131007195,
    -0.0018215113086625934,
    -0.03288416564464569,
    0.019794218242168427,
    0.022703096270561218,
    -0.038230959326028824,
    -0.012549728155136108,
    0.006299105007201433,
    -0.002358268480747938,
    -0.010492736473679543,
    -0.0339646078646183,
    -0.016552897170186043,
    -0.011961027048528194,
    0.0034958473406732082,
    0.0065380483865737915,
    -0.00047528979484923184,
    0.010818254202604294,
    -0.0015323550906032324,
    0.00848422572016716,
    0.012404284439980984,
    0.011116067878901958,
    -0.019766515120863914,
    -0.0333828330039978,
    -0.007147527299821377,
    -0.003972002770751715,
    -0.028756331652402878,
    -0.021387174725532532,
    0.022800058126449585,
    0.018090447410941124,
    0.016552897170186043,
    -0.014121907763183117,
    -0.0011133381631225348,
    0.0007220249390229583,
    0.002773822518065572,
    0.0067285108380019665,
    0.025985972955822945,
    0.0004588408046402037,
    0.0015236977487802505,
    0.016012677922844887,
    0.01713467389345169,
    -0.02847929485142231,
    -0.002450036583468318,
    -0.0002839618537109345,
    -0.012092619203031063,
    -0.009876331314444542,
    -0.010132589377462864,
    0.012466617859899998,
    0.024753162637352943,
    0.03155439347028732,
    0.029504328966140747,
    -0.010298811830580235,
    -0.00033828685991466045,
    0.05344023555517197,
    -0.023298723623156548,
    -0.010922142304480076,
    0.0190877765417099,
    -0.005973587743937969,
    -0.0030681730713695288,
    0.021276360377669334,
    -0.018367484211921692,
    0.0028240352403372526,
    0.023991312831640244,
    0.0065899924375116825,
    0.023243315517902374,
    -0.018256669864058495,
    0.01461364608258009,
    -0.019891181960701942,
    0.0018422891153022647,
    0.024822421371936798,
    0.011718620546162128,
    0.012134174816310406,
    0.010568921454250813,
    -0.01757793128490448,
    0.03465719893574715,
    -0.032634835690259933,
    0.04230339080095291,
    -0.013664797879755497,
    -0.01741170883178711,
    -0.012272692285478115,
    0.002571239834651351,
    -0.027620485052466393,
    -0.017494820058345795,
    -0.010555069893598557,
    0.00011373624147381634,
    -0.004387557040899992,
    -0.03061247244477272,
    0.013297725468873978,
    0.014239647425711155,
    -0.02149798907339573,
    0.008089449256658554,
    0.011677064932882786,
    -0.03848029300570488,
    -0.010811327956616879,
    -0.015403199009597301,
    0.02742655947804451,
    -0.03136046975851059,
    -0.00568616297096014,
    -0.020389845594763756,
    -0.012148026376962662,
    -0.0007419369067065418,
    0.012404284439980984,
    -0.009973294101655483,
    0.03227468952536583,
    -0.018838444724678993,
    -0.013747909106314182,
    -0.007916302420198917,
    8.397651981795207e-05,
    -0.031886838376522064,
    0.004983183927834034,
    -0.006905121263116598,
    0.02048680931329727,
    0.0009557740413583815,
    -0.03413083031773567,
    0.006783918011933565,
    -0.025972120463848114,
    -0.0203205868601799,
    -0.034768011420965195,
    -0.04803803190588951,
    -0.017342450097203255,
    0.013083023019134998,
    -0.004664592910557985,
    -0.01864451915025711,
    0.0025885547511279583,
    0.0314989872276783,
    -0.00013711115752812475,
    -0.0036118561401963234,
    -0.016151195392012596,
    0.008151782676577568,
    0.024282200261950493,
    -0.010035627521574497,
    -0.019766515120863914,
    0.03136046975851059,
    0.006887806113809347,
    -0.008650447241961956,
    0.013408539816737175,
    0.018838444724678993,
    0.017758004367351532,
    -0.004664592910557985,
    0.0008925751899369061,
    0.027523521333932877,
    -0.03814785182476044,
    -0.029116477817296982,
    -0.006153660826385021,
    0.023007836192846298,
    0.0391174778342247,
    -0.02757892943918705,
    -0.02817455679178238,
    -0.012445840053260326,
    -0.017397858202457428,
    0.005159794352948666,
    -0.04756707325577736,
    -0.003622245043516159,
    -0.004643815103918314,
    -0.0006977843004278839,
    0.013484724797308445,
    -0.003906206926330924,
    -0.016262009739875793,
    0.011780953966081142,
    0.022342950105667114,
    -0.0013358327560126781,
    0.014835274778306484,
    0.021137842908501625,
    0.01771644875407219,
    -0.030640175566077232,
    0.0008073000935837626,
    -0.0033452091738581657,
    0.02741270698606968,
    -0.015250829048454762,
    0.02516871504485607,
    0.029448920860886574,
    0.009398444555699825,
    -0.024309905245900154,
    -0.5647100806236267,
    -0.026429230347275734,
    -0.011192251928150654,
    -0.01401801872998476,
    0.025127161294221878,
    0.02317405678331852,
    0.009675480425357819,
    0.0159295666962862,
    0.007230638060718775,
    0.0178549662232399,
    -0.014738312922418118,
    0.014655201695859432,
    -0.019364813342690468,
    0.003930447623133659,
    -0.0036534115206450224,
    -0.015264680609107018,
    0.02622145228087902,
    -0.02198280207812786,
    0.010845957323908806,
    0.018575260415673256,
    0.0030387381557375193,
    0.029365811496973038,
    -0.0029106088913977146,
    0.028396185487508774,
    -0.03196994960308075,
    -0.005419515538960695,
    -0.0007419369067065418,
    -0.01925399899482727,
    0.008899779990315437,
    0.03169291093945503,
    -0.021248657256364822,
    0.042497314512729645,
    0.015984974801540375,
    0.012972208671271801,
    0.049617137759923935,
    -0.0015531327808275819,
    -0.007853969000279903,
    0.0345463827252388,
    0.0021002788562327623,
    0.04163850471377373,
    -0.03889584541320801,
    -0.004155539441853762,
    -0.02093006670475006,
    -0.014932237565517426,
    0.010243404656648636,
    -0.006011680234223604,
    -0.001346221542917192,
    0.019170887768268585,
    -0.024767013266682625,
    -0.013540131971240044,
    0.004214409273117781,
    -0.002036214340478182,
    -0.0004004035145044327,
    -0.028146851807832718,
    0.03191453963518143,
    0.002905414439737797,
    0.00393391028046608,
    -0.02361731417477131,
    -0.0006272267200984061,
    0.00021470285719260573,
    0.01681608147919178,
    0.016469787806272507,
    -0.016109639778733253,
    -0.02242605946958065,
    -0.008144857361912727,
    0.03590385988354683,
    0.013214615173637867,
    -0.027994481846690178,
    -0.002810183446854353,
    -0.022633837535977364,
    0.01998814381659031,
    -0.022370653226971626,
    0.010769772343337536,
    0.003954688087105751,
    0.011884842067956924,
    0.04366086423397064,
    0.04388249292969704,
    0.028673220425844193,
    -0.01409420371055603,
    0.028257666155695915,
    0.03540519252419472,
    -0.0007648789323866367,
    -0.007306823041290045,
    -0.033881496638059616,
    0.04651433601975441,
    0.00455031543970108,
    -0.01591571606695652,
    -0.008359559811651707,
    0.00931533332914114,
    0.022232135757803917,
    0.02135947160422802,
    0.01698230393230915,
    -0.0066904183477163315,
    -0.018450593575835228,
    -0.0005748496041633189,
    0.0029850623104721308,
    0.0022162876557558775,
    -0.021567247807979584,
    -0.01789652183651924,
    -0.01634512096643448,
    -0.01119917817413807,
    -0.021761173382401466,
    0.0025573880411684513,
    0.00025690754409879446,
    0.04487982392311096,
    -0.007140601519495249,
    0.016026530414819717,
    -0.0021002788562327623,
    0.011503918096423149,
    0.0068566398695111275,
    0.007292971480637789,
    -0.026747820898890495,
    -0.012175729498267174,
    -0.010478884913027287,
    -0.001302068936638534,
    -0.0172731913626194,
    -0.0028309610206633806,
    -0.032662536948919296,
    0.01804889179766178,
    0.01144851092249155,
    0.015818752348423004,
    -0.012438913807272911,
    -0.0016492296708747745,
    0.0028725164011120796,
    0.01741170883178711,
    0.018422890454530716,
    0.019350960850715637,
    -0.02151184156537056,
    -0.023991312831640244,
    -0.0021279824431985617,
    0.01577719673514366,
    -0.015652531757950783,
    0.007694673258811235,
    -0.02608293481171131,
    0.025404196232557297,
    0.034934233874082565,
    0.0004722597077488899,
    0.001106412266381085,
    0.025404196232557297,
    -0.01863066665828228,
    0.010548143647611141,
    -0.006382215768098831,
    0.009509258903563023,
    -0.009737813845276833,
    0.0004731254593934864,
    0.009066001512110233,
    0.0009670286090113223,
    0.007999412715435028,
    -0.018284372985363007,
    -0.004709611181169748,
    0.0017020396189764142,
    4.875183367403224e-05,
    -0.014073425903916359,
    0.024767013266682625,
    -0.0037261336110532284,
    0.005606514867395163,
    -0.013394688256084919,
    0.002562582492828369,
    -0.00772930309176445,
    0.0031945707742124796,
    0.030252326279878616,
    0.004072428680956364,
    0.010818254202604294,
    0.013817167840898037,
    -0.03255172446370125,
    -0.018381334841251373,
    -0.017951929941773415,
    0.045406192541122437,
    -0.005478385835886002,
    -0.03293957561254501,
    0.0022578430362045765,
    -0.020833102986216545,
    -0.008103301748633385,
    0.010658957995474339,
    0.01588801108300686,
    0.002576434286311269,
    -0.027481965720653534,
    0.005724255461245775,
    0.008809743449091911,
    -0.006202142219990492,
    -0.013401614502072334,
    0.02424064464867115,
    -0.0309172123670578,
    0.0005133822560310364,
    0.026304563507437706,
    0.013450095430016518,
    -0.008615817874670029,
    0.026609303429722786,
    -0.022204430773854256,
    -0.00037594643072225153,
    -0.014308907091617584,
    -0.001708965515717864,
    -0.006655788514763117,
    0.018533704802393913,
    0.0018093910766765475,
    -0.008657373487949371,
    0.02379738725721836,
    0.01554171647876501,
    -0.0009852091316133738,
    -0.005256757140159607,
    -1.1220767191844061e-05,
    0.025708936154842377,
    -0.025376493111252785,
    -0.01955873891711235,
    -0.006534585263580084,
    -0.0012596477754414082,
    0.01104680821299553,
    -0.02820225991308689,
    0.013062245212495327,
    -0.0005532061331905425,
    0.03227468952536583,
    -0.0333828330039978,
    -0.00885129813104868,
    -0.008678151294589043,
    -0.009052149951457977,
    0.014405868947505951,
    -0.0038438737392425537,
    0.011801731772720814,
    -0.011517769657075405,
    0.018561407923698425,
    0.017841115593910217,
    0.0067111956886947155,
    -0.0027565076015889645,
    -0.011746324598789215,
    -0.010977549478411674,
    0.012639765627682209,
    0.01800733618438244,
    0.02073614113032818,
    -0.0057900515384972095,
    -0.012459691613912582,
    -0.02199665457010269,
    0.02515486441552639,
    0.014987644739449024,
    -0.011476214043796062,
    0.031443580985069275,
    0.007895524613559246,
    0.06399530172348022,
    -0.016317417845129967,
    0.01052736584097147,
    -0.023866647854447365,
    -0.012009507976472378,
    0.01385872345417738,
    0.037676889449357986,
    -0.019669553264975548,
    0.0069397506304085255,
    0.014738312922418118,
    0.003823096165433526,
    0.002455231035128236,
    -0.023548055440187454,
    -0.003961613867431879,
    -0.021636508405208588,
    -0.008380337618291378,
    0.011864064261317253,
    0.0168022308498621,
    0.00431829784065485,
    -0.025085605680942535,
    -0.013290799222886562,
    0.016262009739875793,
    0.03501734510064125,
    -0.0063649010844528675,
    0.003577226772904396,
    -0.008290301077067852,
    0.029282700270414352,
    0.013927982188761234,
    0.05989517271518707,
    -0.004453352652490139,
    -0.015514013357460499,
    -0.018893850967288017,
    -0.002195509849116206,
    -0.017924226820468903,
    -0.005177109502255917,
    -0.028368480503559113,
    -0.015278532169759274,
    -0.02214902453124523,
    0.01893540658056736,
    0.007625414524227381,
    -0.013276947662234306,
    0.012833690270781517,
    -0.01606808416545391,
    -0.007833191193640232,
    -0.01446127612143755,
    -0.021096287295222282,
    0.023741981014609337,
    -0.014198092743754387,
    0.007175230886787176,
    0.005287923850119114,
    -0.017813410609960556,
    -0.007660043891519308,
    -0.01788267120718956,
    0.021622655913233757,
    -0.002938312478363514,
    0.03922829031944275,
    0.0033590609673410654,
    -0.0010882318019866943,
    -0.021387174725532532,
    0.023132501170039177,
    0.025237975642085075,
    0.0018388261087238789,
    0.0014492443297058344,
    -0.0013747909106314182,
    0.013450095430016518,
    -0.004127835854887962,
    -0.011019105091691017,
    0.01649749092757702,
    0.0509469099342823,
    -0.0029244606848806143,
    -0.005897402763366699,
    -0.0185060016810894,
    -0.016594452783465385,
    -0.009813998825848103,
    -0.0013358327560126781,
    0.017647190019488335,
    -0.0016171972965821624,
    0.010582773014903069,
    0.03496193513274193,
    0.016746822744607925,
    0.015444754622876644,
    -0.008290301077067852,
    0.01393490843474865,
    0.009862479753792286,
    0.0056307557970285416,
    -0.018602963536977768,
    0.015846455469727516,
    0.02577819488942623,
    0.03471260517835617,
    0.022509170696139336,
    -0.008318004198372364,
    0.008962113410234451,
    -0.02485012449324131,
    -0.0013522817753255367,
    -0.019350960850715637,
    0.005983976647257805,
    0.0006601247005164623,
    0.0021314453333616257,
    -0.012134174816310406,
    0.007424563635140657,
    0.009121408686041832,
    0.02683093212544918,
    0.016552897170186043,
    0.0012345414143055677,
    0.00026794569566845894,
    -0.006063624285161495,
    0.018450593575835228,
    0.0036915040109306574,
    0.013865649700164795,
    0.012182655744254589,
    0.00794400554150343,
    -8.210977284761611e-06,
    0.05366186425089836,
    0.013734057545661926,
    0.04017021134495735,
    0.008124079555273056,
    -0.005416052881628275,
    -0.025667380541563034,
    -0.05482541397213936,
    0.0058696991764009,
    -0.010264181531965733,
    0.03889584541320801,
    -0.01507075596600771,
    0.040696579962968826,
    0.03177602216601372,
    0.023437241092324257,
    0.015375494956970215,
    0.01166321337223053,
    0.027454262599349022,
    0.0203205868601799,
    0.00886515062302351,
    -0.013242318294942379,
    0.011981804855167866,
    -0.004782333038747311,
    0.007424563635140657,
    0.004276742693036795,
    -0.012196507304906845,
    0.0015280264196917415,
    0.010278034023940563,
    0.0066973441280424595,
    -0.038535699248313904,
    -0.021775025874376297,
    0.0375937782227993,
    0.007978634908795357,
    0.017771856859326363,
    -0.014710608869791031,
    -0.01922629401087761,
    -0.03831407055258751,
    -0.001269170898012817,
    -0.021387174725532532,
    0.011282289400696754,
    -0.0028309610206633806,
    -0.00325863528996706,
    -0.00506975781172514,
    -0.015707938000559807,
    0.007680821698158979,
    -0.01955873891711235,
    0.04560011625289917,
    0.027246486395597458,
    -0.03897895663976669,
    -0.019323257729411125,
    -0.024323755875229836,
    0.008054819889366627,
    0.015971122309565544,
    0.0080201905220747,
    -0.00610171677544713,
    0.03543289750814438,
    0.009398444555699825,
    -0.008913631550967693,
    -0.061889830976724625,
    0.012750579975545406,
    -0.02922729216516018,
    0.024503828957676888,
    0.002801526105031371,
    0.014198092743754387,
    -0.003992780577391386,
    -0.000935862073674798,
    -0.011185326613485813,
    0.004913925193250179,
    0.016109639778733253,
    0.017176229506731033,
    -0.001020704279653728,
    0.013048393651843071,
    0.019018517807126045,
    0.0168022308498621,
    0.006347586400806904,
    0.011393103748559952,
    -0.0011600879952311516,
    0.005696551874279976,
    -0.02922729216516018,
    -0.0065380483865737915,
    -0.013200762681663036,
    0.027329595759510994,
    0.011808657087385654,
    0.02346494421362877,
    -0.010541217401623726,
    -0.013276947662234306,
    0.013519354164600372,
    0.04255272075533867,
    -0.012286544777452946,
    -0.021470285952091217,
    0.0008038371452130377,
    0.007639266084879637,
    -0.005824680905789137,
    -0.02454538457095623,
    0.03706740960478783,
    0.016774525865912437,
    0.0017539839027449489,
    -0.013048393651843071,
    -0.03277335315942764,
    0.022938577458262444,
    0.025487307459115982,
    0.0056307557970285416,
    -0.013270022347569466,
    0.0035495231859385967,
    -0.013997240923345089,
    -0.026775524020195007,
    0.001542743993923068,
    -0.01143465843051672,
    -0.00465766666457057,
    -0.041749317198991776,
    -0.009647777304053307,
    -0.004120909608900547,
    -0.015943419188261032,
    -0.03077869303524494,
    -0.009412296116352081,
    -0.0071198237128555775,
    0.0027928687632083893,
    -0.03546060249209404,
    -0.024448422715067863,
    0.0003322267148178071,
    0.00455031543970108,
    -0.021082434803247452,
    -0.02178887650370598,
    0.0001803980121621862,
    0.00651727057993412,
    0.021927395835518837,
    0.031886838376522064,
    0.029919883236289024,
    0.021567247807979584,
    -0.016608305275440216,
    -0.030640175566077232,
    -0.012487395666539669,
    0.010582773014903069,
    0.00901752058416605,
    0.0036880411207675934,
    0.01129614096134901,
    0.016442082822322845,
    0.040391840040683746,
    -0.00488622160628438,
    -0.0026716655120253563,
    0.0015453411033377051,
    0.014239647425711155,
    -0.004619574639946222,
    -0.03213616833090782,
    0.014973793178796768,
    0.0064618634060025215,
    0.0070159356109797955,
    0.003146089380607009,
    0.03138817474246025,
    0.0013280410785228014,
    -0.026290711015462875,
    -0.005429904442280531,
    0.027357300743460655,
    0.010132589377462864,
    0.008470374159514904,
    -0.04366086423397064,
    -0.004300983157008886,
    -0.0093084080144763,
    0.010672809556126595,
    -0.016483638435602188,
    0.01696845144033432,
    -0.028811737895011902,
    -0.01590186357498169,
    0.03191453963518143,
    0.004761555232107639,
    0.010956771671772003,
    -0.00885129813104868,
    -0.008151782676577568,
    -0.016012677922844887,
    0.025570418685674667,
    0.025972120463848114,
    0.0061294203624129295,
    -0.027800558134913445,
    0.00946770329028368,
    -0.04587715491652489,
    -0.023575758561491966,
    -0.02001584693789482,
    -0.022689243778586388,
    0.014738312922418118,
    0.02255072630941868,
    0.025030197575688362,
    0.006094790995121002,
    0.02666470967233181,
    0.02135947160422802,
    -0.04510145261883736,
    0.00044975054333917797,
    -0.0168022308498621,
    -0.005343331024050713,
    -0.01833977922797203,
    -0.03573763743042946,
    -0.016636008396744728,
    -0.01462749857455492,
    0.0016310492064803839,
    0.007750080898404121,
    0.025127161294221878,
    -0.021096287295222282,
    -0.002209361642599106,
    -0.002727072685956955,
    -0.0018440205603837967,
    0.039339106529951096,
    0.03368757292628288,
    0.04197094589471817,
    0.04125065356492996,
    0.002559119602665305,
    0.010901364497840405,
    0.005866236053407192,
    -0.02681707963347435,
    -0.0079647833481431,
    0.020957769826054573,
    0.04094591364264488,
    -0.0027132208924740553,
    -0.0473177395761013,
    0.006759677082300186,
    -0.004207483492791653,
    -0.03485112264752388,
    -0.016705267131328583,
    0.030944915488362312,
    0.008359559811651707,
    -0.017993485555052757,
    -0.033105794340372086,
    -0.015707938000559807,
    -0.0034542919602245092,
    0.017023859545588493,
    -0.04698529839515686,
    0.02093006670475006,
    0.02544575184583664,
    -0.012563580647110939,
    -0.012556654401123524,
    0.05468689650297165,
    0.0003841709403786808,
    0.006967454217374325,
    0.021705767139792442,
    -0.009730887599289417,
    -0.015804901719093323,
    -0.01067973580211401,
    -0.023589611053466797,
    0.002768628066405654,
    0.038701921701431274,
    0.025057900696992874,
    -0.022467615082859993,
    -0.01907392591238022,
    0.029061071574687958,
    0.005983976647257805,
    -0.005897402763366699,
    0.011503918096423149,
    0.027371151372790337,
    0.04562782123684883,
    -0.018547557294368744,
    0.003175524529069662,
    -0.017093118280172348,
    -0.02850699983537197,
    -0.0007830593967810273,
    -0.021622655913233757,
    -0.012715949676930904,
    0.03210846707224846,
    -0.034463271498680115,
    0.004030873067677021,
    0.015167717821896076,
    0.012812912464141846,
    -0.010118737816810608,
    -0.012265766970813274,
    -0.0017167571932077408,
    0.007590785156935453,
    -0.0026612766087055206,
    0.00795785803347826,
    0.032634835690259933,
    -0.004408334381878376,
    -0.014585942961275578,
    -0.011413881555199623,
    -0.008131004869937897,
    0.016719119623303413,
    0.011884842067956924,
    -0.0017600440187379718,
    -0.013831019401550293,
    0.011483140289783478,
    -0.036734968423843384,
    0.014904534444212914,
    -0.009294556453824043,
    0.00915603805333376,
    -0.025127161294221878,
    -0.008518855087459087,
    0.00977244321256876,
    -0.004519148729741573,
    0.024185238406062126,
    0.010721291415393353,
    -0.034768011420965195,
    -0.01728704385459423,
    -0.002192046958953142,
    0.024586940184235573,
    0.02091621421277523,
    -0.004103594925254583,
    -0.0031651356257498264,
    0.004463741555809975,
    -0.025071753188967705,
    -0.006912047043442726,
    0.016705267131328583,
    0.024323755875229836,
    -0.000255176069913432,
    0.007026324048638344,
    0.003667263314127922,
    -0.026304563507437706,
    0.023672722280025482,
    -0.003618782153353095,
    0.00819333828985691,
    0.0063787526451051235,
    -0.06155738607048988,
    -0.006351049058139324,
    0.004661129787564278,
    -0.002150491578504443,
    0.005665385164320469,
    0.02225983887910843,
    -0.01052044052630663,
    -0.0017409977735951543,
    -0.028839442878961563,
    0.018713777884840965,
    -0.005866236053407192,
    0.004117446951568127,
    0.007971709594130516,
    0.009578517638146877,
    0.021082434803247452,
    0.0015600586775690317,
    0.012272692285478115,
    -0.011019105091691017,
    -0.022204430773854256,
    -0.000979148899205029,
    -0.02532108500599861,
    -0.024974791333079338,
    -0.018561407923698425,
    0.025265678763389587,
    0.008588114753365517,
    -0.02739885449409485,
    -0.023007836192846298,
    -0.019129332154989243,
    -0.029365811496973038,
    0.004172854125499725,
    -0.02562582492828369,
    0.03565452620387077,
    0.004674981813877821,
    0.0033642554190009832,
    0.0008847835706546903,
    -0.007154453545808792,
    -0.013235392048954964,
    0.015984974801540375,
    -0.02044525370001793,
    0.005100924521684647,
    -0.014710608869791031,
    -0.0062125311233103275,
    0.002455231035128236,
    -0.00993173848837614,
    -0.03739985451102257,
    -0.016303565353155136,
    0.016026530414819717,
    -0.007050564978271723,
    0.010825179517269135,
    0.03651333972811699,
    0.015195421874523163,
    -0.025653528049588203,
    -0.007909376174211502,
    -0.01486297883093357,
    -0.0038923551328480244,
    0.0030006456654518843,
    0.0062436978332698345,
    -0.022010507062077522,
    -0.0013566104462370276,
    -0.013962611556053162,
    0.027204930782318115,
    -0.0068566398695111275,
    0.004377168137580156,
    0.016303565353155136,
    0.008186412043869495,
    0.002278620610013604,
    -0.005907791666686535,
    -0.03285646438598633,
    -6.568781827809289e-05,
    0.0079647833481431,
    0.02500249445438385,
    -0.006981305778026581,
    0.014502831734716892,
    0.03806474059820175,
    0.019877329468727112,
    0.0007458327454514802,
    -0.04047495126724243,
    0.015500161796808243,
    0.005703477654606104,
    0.010284959338605404,
    0.005381423514336348,
    -0.0433284230530262,
    -0.006233308929949999,
    -0.02379738725721836,
    0.028562406077980995,
    0.01576334610581398,
    0.0204314012080431,
    0.013256169855594635,
    -0.013401614502072334,
    -0.02785596437752247,
    0.009197593666613102,
    0.03307809308171272,
    0.006828936282545328,
    0.014696757309138775,
    0.013373910449445248,
    -0.002396360971033573,
    -0.01606808416545391,
    -0.016913045197725296,
    -0.02392205409705639,
    -0.038397181779146194,
    0.011254585348069668,
    -0.007708525285124779,
    0.0069016581401228905,
    -0.05222127586603165,
    0.010700513608753681,
    0.00014111518976278603,
    -0.03576534241437912,
    -0.012632839381694794,
    0.18916015326976776,
    0.007521525956690311,
    0.021761173382401466,
    0.010132589377462864,
    0.027246486395597458,
    0.035377491265535355,
    -0.008124079555273056,
    0.0439101979136467,
    -0.00887207593768835,
    -0.0036741893272846937,
    0.003421393921598792,
    -0.03363216295838356,
    0.01968340389430523,
    -0.00946770329028368,
    0.019267849624156952,
    -0.009599295444786549,
    -0.019212443381547928,
    -0.037344444543123245,
    -0.014378165826201439,
    0.003698430024087429,
    0.023575758561491966,
    -0.017993485555052757,
    -0.01879688911139965,
    -0.03169291093945503,
    0.01997429132461548,
    -0.0064618634060025215,
    -0.014052648097276688,
    -0.008844372816383839,
    0.0017799559282138944,
    -0.007223712280392647,
    0.007140601519495249,
    -0.0032430521678179502,
    -0.002360000042244792,
    -0.0036014672368764877,
    -0.015680234879255295,
    0.00405857665464282,
    0.011711694300174713,
    0.005755421705543995,
    0.001586896600201726,
    0.04366086423397064,
    -0.012522025033831596,
    -0.037205927073955536,
    -0.017522523179650307,
    -0.032330095767974854,
    -0.015957269817590714,
    -0.02378353662788868,
    -0.02029288373887539,
    0.00977244321256876,
    0.03138817474246025,
    0.01605423353612423,
    -0.02922729216516018,
    -0.035100456327199936,
    0.012404284439980984,
    -0.0009973293635994196,
    -0.02241220884025097,
    -0.0079647833481431,
    0.03122195228934288,
    0.0168022308498621,
    0.02635996975004673,
    0.012598210014402866,
    -0.016331268474459648,
    0.02770359441637993,
    -0.004616111516952515,
    0.017190080136060715,
    -0.041721612215042114,
    0.016913045197725296,
    -0.035682231187820435,
    -0.028257666155695915,
    0.0066073075868189335,
    0.013443169184029102,
    0.0005155465914867818,
    -0.0029989141039550304,
    -0.03498964011669159,
    0.00253487890586257,
    0.0019236683147028089,
    -0.034601788967847824,
    0.028119148686528206,
    0.01982192136347294,
    0.04897995665669441,
    0.04302368313074112,
    1.352714633640062e-07,
    0.00833185575902462,
    -0.0060601611621677876,
    0.015209273435175419,
    -0.027066411450505257,
    -0.029061071574687958,
    0.046597447246313095,
    -0.03271794691681862,
    -0.01573564112186432,
    -0.02864551730453968,
    -0.03640252351760864,
    -0.017453264445066452,
    -0.006067087408155203,
    0.003920058719813824,
    -0.006119031459093094,
    0.02619374915957451,
    0.0011471019824966788,
    0.016012677922844887,
    -0.01090829074382782,
    -0.003965076990425587,
    -0.012009507976472378,
    0.047511667013168335,
    0.002204167190939188,
    -0.007708525285124779,
    -0.02997528947889805,
    -0.01925399899482727,
    -0.006042846478521824,
    0.004927776753902435,
    0.023561907932162285,
    -0.01696845144033432,
    0.011718620546162128,
    -0.014142685569822788,
    0.019212443381547928,
    -0.02245376445353031,
    -0.0002703264763113111,
    -0.0006480044103227556,
    0.011289214715361595,
    -0.012016434222459793,
    -0.01982192136347294,
    0.0006068818620406091,
    -0.01940636895596981,
    -0.010589699260890484,
    0.0015444754390046,
    -0.009800146333873272,
    -0.026914043352007866,
    -0.013574761338531971,
    -0.04393790289759636,
    0.020043550059199333,
    -0.011670139618217945,
    -0.016414379701018333,
    -0.01742556132376194,
    -0.012411210685968399,
    0.018409037962555885,
    -2.95703412120929e-05,
    0.0012838884722441435,
    -0.0391174778342247,
    -0.034601788967847824,
    -0.015444754622876644,
    -0.011642435565590858,
    -0.004664592910557985,
    -0.020417548716068268,
    0.019018517807126045,
    0.019877329468727112,
    -0.00685317674651742,
    -0.018132003024220467,
    0.00692936172708869,
    0.0027201466728001833,
    0.024046720936894417,
    0.0008579457062296569,
    0.02361731417477131,
    -0.009266852401196957,
    0.004546852316707373,
    0.016012677922844887,
    -0.03122195228934288,
    0.03692889213562012,
    -0.011261511594057083,
    -0.029892178252339363,
    -0.019267849624156952,
    0.022647688165307045,
    0.017799559980630875,
    -0.01189869362860918,
    -0.006967454217374325,
    0.012750579975545406,
    -0.0006575275328941643,
    -0.018575260415673256,
    -0.045683227479457855,
    -0.17264880239963531,
    0.020375994965434074,
    0.031277358531951904,
    -0.03108343295753002,
    0.013879501260817051,
    0.008539632894098759,
    -0.00431829784065485,
    -0.004093206021934748,
    -0.003462949302047491,
    -0.018741482868790627,
    0.014052648097276688,
    -0.007251415867358446,
    -0.008207189850509167,
    -0.05288616195321083,
    -0.013560909777879715,
    0.0016535583417862654,
    -0.0063406601548194885,
    0.027772853150963783,
    0.04529537633061409,
    -0.010201849043369293,
    0.03177602216601372,
    -0.019877329468727112,
    0.008823595009744167,
    0.002514101332053542,
    -0.00040797871770337224,
    0.0024154072161763906,
    -0.01982192136347294,
    -0.00700554670765996,
    -0.016178898513317108,
    -0.030557064339518547,
    -0.006828936282545328,
    0.016483638435602188,
    0.02623530477285385,
    0.010111812502145767,
    0.010014849714934826,
    0.006905121263116598,
    0.012819838710129261,
    -0.016719119623303413,
    -0.03421394154429436,
    0.027952928096055984,
    0.02483627200126648,
    0.022633837535977364,
    0.025210270658135414,
    -0.02181658148765564,
    -0.03138817474246025,
    -0.0020933528430759907,
    0.029781363904476166,
    -0.01894925907254219,
    0.010492736473679543,
    -0.0017358033219352365,
    0.025653528049588203,
    -0.020195920020341873,
    0.021414879709482193,
    -0.011483140289783478,
    0.013512428849935532,
    0.018409037962555885,
    0.01832592859864235,
    0.005111313425004482,
    0.008034042082726955,
    0.020653029903769493,
    -0.0014734849100932479,
    -0.010485810227692127,
    0.009592370130121708,
    -0.021123990416526794,
    -0.022162875160574913,
    -0.014641350135207176,
    -0.005862773396074772,
    0.03421394154429436,
    -0.004214409273117781,
    0.020569918677210808,
    0.004681907594203949,
    0.04047495126724243,
    -0.007057490758597851,
    0.015818752348423004,
    0.009689331986010075,
    0.014987644739449024,
    -0.020542215555906296,
    -0.001547072664834559,
    0.0062125311233103275,
    0.010132589377462864,
    -0.013055318966507912,
    0.04363316297531128,
    0.010575847700238228,
    0.01591571606695652,
    0.019447922706604004,
    0.018755333498120308,
    0.03410312533378601,
    -0.0013990314910188317,
    -0.003920058719813824,
    0.018215114250779152,
    0.03028002940118313,
    0.005544181913137436,
    -0.0026197212282568216,
    0.007819339632987976,
    0.0036499486304819584,
    0.010250329971313477,
    0.0020864270627498627,
    0.010859808884561062,
    0.0067285108380019665,
    -0.025944417342543602,
    0.0019738811533898115,
    0.021290212869644165,
    -0.04895225167274475,
    0.013747909106314182,
    0.03908977285027504,
    0.020846955478191376,
    -0.020043550059199333,
    0.001673470251262188,
    0.012141100130975246,
    -0.023215612396597862,
    -0.010485810227692127,
    0.012362728826701641,
    0.010624328628182411,
    0.020999325439333916,
    -0.035682231187820435,
    0.013983389362692833,
    -0.012321174144744873,
    -0.008595040068030357,
    0.02878403477370739,
    -0.001506382948718965,
    0.012764431536197662,
    -0.026789376512169838,
    -0.01573564112186432,
    0.0057069407775998116,
    -0.026900190860033035,
    -0.024157535284757614,
    -0.10333441197872162,
    -0.019018517807126045,
    0.016636008396744728,
    0.018076594918966293,
    -0.009779369458556175,
    -0.009585443884134293,
    0.002250917023047805,
    0.019323257729411125,
    0.015652531757950783,
    0.029448920860886574,
    -0.004685370717197657,
    0.0012466617627069354,
    -0.0031651356257498264,
    -0.0024309903383255005,
    0.009897109121084213,
    0.002728804014623165,
    0.006274864077568054,
    -0.004875832702964544,
    -0.010825179517269135,
    0.0027894056402146816,
    0.01220343355089426,
    0.010582773014903069,
    0.017979633063077927,
    0.024476125836372375,
    -0.0370120033621788,
    0.019004665315151215,
    -0.04055806249380112,
    0.02225983887910843,
    0.0186168160289526,
    0.00910063087940216,
    -0.004391019698232412,
    -0.027620485052466393,
    -0.034324754029512405,
    -0.0037988554686307907,
    0.0070367129519581795,
    0.0064999558962881565,
    -0.020542215555906296,
    -0.026027526706457138,
    0.04814884811639786,
    -0.011954100802540779,
    0.03451867774128914,
    -0.04186013340950012,
    0.0067285108380019665,
    -0.023146353662014008,
    -0.003085487987846136,
    0.002001584740355611,
    -0.012944504618644714,
    0.01576334610581398,
    0.0154586061835289,
    -0.029116477817296982,
    -0.01318691112101078,
    0.018602963536977768,
    -0.0017202200833708048,
    -0.014959941618144512,
    0.03075098991394043,
    0.008678151294589043,
    -0.010852883569896221,
    -0.007632340304553509,
    -0.014052648097276688,
    0.002162611810490489,
    0.007770858239382505,
    -0.008574262261390686,
    -0.03238550201058388,
    -0.00024976523127406836,
    -0.013644020073115826,
    0.005571885500103235,
    -0.014350461773574352,
    -0.016414379701018333,
    0.014225795865058899,
    -0.007916302420198917,
    -0.00462650042027235,
    0.019115479663014412,
    -0.025418048724532127,
    -0.0030872193165123463,
    -0.05393889918923378,
    0.01712082140147686,
    0.0006272267200984061,
    -0.017674893140792847,
    0.01741170883178711,
    -0.00887207593768835,
    -0.01196795329451561,
    0.008505003526806831,
    -0.03105572983622551,
    -0.023977462202310562,
    0.003781540784984827,
    -0.00910063087940216,
    0.013214615173637867,
    0.01507075596600771,
    0.015056903474032879,
    -0.06970224529504776,
    0.03241320699453354,
    -0.005197886843234301,
    0.012999911792576313,
    -0.0019219368696212769,
    -0.010395773686468601,
    0.00195137201808393,
    -0.04094591364264488,
    -0.0007752677774988115,
    -0.01620660349726677,
    0.0056757740676403046,
    -0.02756507694721222,
    0.0018163169734179974,
    -0.06948061287403107,
    -0.00879589095711708,
    0.023160206153988838,
    -0.021082434803247452,
    0.01097062323242426,
    -0.038701921701431274,
    0.022523023188114166,
    -2.286087692482397e-05,
    -0.010624328628182411,
    -0.0019271313212811947,
    -0.018076594918966293,
    0.00030300806974992156,
    -0.009730887599289417,
    -0.019918885082006454,
    -0.004997035954147577,
    0.0028863681945949793,
    0.03684578090906143,
    -0.005710403434932232,
    0.02230139449238777,
    0.0011245928471907973,
    0.012785209342837334,
    0.00026188555057160556,
    0.017093118280172348,
    0.011330770328640938,
    -0.02424064464867115,
    0.010243404656648636,
    -0.0563214085996151,
    0.013055318966507912,
    -0.01968340389430523,
    -0.03601467236876488,
    0.01608193665742874,
    0.02076384425163269,
    -0.013969537802040577,
    0.0159295666962862,
    0.008075597696006298,
    0.021636508405208588,
    0.02045910432934761,
    0.006222920026630163,
    0.011954100802540779,
    -0.012812912464141846,
    -0.04928469657897949,
    -0.02442071959376335,
    0.017799559980630875,
    -0.02304939180612564,
    -0.016899192705750465,
    0.008768187835812569,
    0.021401027217507362,
    -0.004172854125499725,
    0.002772090956568718,
    -0.017674893140792847,
    0.01832592859864235,
    0.018602963536977768,
    -0.03626400604844093,
    -0.009613147005438805,
    0.010977549478411674,
    -0.021027028560638428,
    0.026429230347275734,
    0.005506089422851801,
    -0.01982192136347294,
    0.0027582391630858183,
    0.024060571566224098,
    0.0064861043356359005,
    0.025833602994680405,
    -0.0018128539668396115,
    0.012889097444713116,
    -0.005578811280429363,
    -0.03728903830051422,
    -0.01653904654085636,
    -0.0023496111389249563,
    -0.011469288729131222,
    0.017993485555052757,
    -0.044021014124155045,
    0.00878896564245224,
    0.0159295666962862,
    0.02030673436820507,
    -0.018838444724678993,
    -0.001310726278461516,
    -0.014710608869791031,
    -0.03593156114220619,
    0.004498371388763189,
    0.014308907091617584,
    -0.004945091903209686,
    -0.025681233033537865,
    0.009710109792649746,
    0.03956073522567749,
    0.011379251256585121,
    -0.01969725638628006,
    -0.007860895246267319,
    -0.01831207610666752,
    0.0009289361769333482,
    -0.005218664649873972,
    -0.0017704328056424856,
    0.002313250210136175,
    0.011247659102082253,
    0.0006674834876321256,
    -0.002171269152313471,
    -0.0067423623986542225,
    -0.012383506633341312,
    0.018090447410941124,
    0.011697842739522457,
    0.0029781365301460028,
    -0.0012795598013326526,
    -0.005616903770714998,
    -0.04474130645394325,
    -0.03498964011669159,
    0.011919471435248852,
    0.008304152637720108,
    -0.012473543174564838,
    -0.004879295825958252,
    0.010790550149977207,
    -0.004169391002506018,
    -0.013131503947079182,
    -0.01158702839165926,
    0.03169291093945503,
    -0.010402699932456017,
    -0.007833191193640232,
    0.006267938297241926,
    -0.01638667657971382,
    -0.048702917993068695,
    0.007383008021861315,
    -0.012196507304906845,
    0.006963991094380617,
    0.023243315517902374,
    -0.002250917023047805,
    0.017300894483923912,
    0.012425062246620655,
    0.02820225991308689,
    -0.01756407879292965,
    0.016026530414819717,
    -0.02061147429049015,
    -0.013443169184029102,
    -0.02864551730453968,
    -0.028562406077980995,
    -0.025653528049588203,
    -0.018270520493388176,
    -0.007403785828500986,
    0.011649361811578274,
    0.00447413045912981,
    0.0017158914124593139,
    0.08610277622938156,
    0.01817355863749981,
    0.0013254438526928425,
    -0.0059251063503324986,
    -0.015804901719093323,
    0.012238062918186188,
    0.010742069222033024,
    0.014419721439480782,
    -0.025819750502705574,
    -0.018062744289636612,
    -0.007473044563084841,
    0.0010077182669192553,
    0.00811715330928564,
    -0.029116477817296982,
    -0.015583272092044353,
    -0.020957769826054573,
    -0.019891181960701942,
    0.01447512861341238,
    -0.004820425529032946,
    0.01818740926682949,
    0.02666470967233181,
    0.008110227063298225,
    0.005395275074988604,
    -0.015666382387280464,
    -0.016095789149403572,
    0.019808070734143257,
    -0.0037746147718280554,
    0.010845957323908806,
    -0.0036741893272846937,
    -0.04745625704526901,
    0.027675891295075417,
    0.002763433614745736,
    -0.010014849714934826,
    -0.017550228163599968,
    -0.0009427879704162478,
    0.02516871504485607,
    -0.0216642115265131,
    -0.005190961062908173,
    0.018547557294368744,
    -0.0033192369155585766,
    0.009218371473252773,
    0.011386177502572536,
    -0.02169191464781761,
    -0.03299498185515404,
    0.0016665443545207381,
    -0.013124577701091766,
    -0.008892853744328022,
    -0.005513015203177929,
    -0.03562682121992111
  ]
}
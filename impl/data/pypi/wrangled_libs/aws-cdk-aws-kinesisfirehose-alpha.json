{
  "classifiers": [
    "development status :: 4 - beta",
    "framework :: aws cdk",
    "framework :: aws cdk :: 2",
    "intended audience :: developers",
    "license :: osi approved",
    "operating system :: os independent",
    "programming language :: javascript",
    "programming language :: python :: 3 :: only",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "typing :: typed"
  ],
  "description": "the cdk construct library for aws::kinesisfirehose\n# amazon kinesis data firehose construct library\n\n<!--begin stability banner-->---\n\n\n![cdk-constructs: experimental](https://img.shields.io/badge/cdk--constructs-experimental-important.svg?style=for-the-badge)\n\n> the apis of higher level constructs in this module are experimental and under active development.\n> they are subject to non-backward compatible changes or removal in any future version. these are\n> not subject to the [semantic versioning](https://semver.org/) model and breaking changes will be\n> announced in the release notes. this means that while you may use them, you may need to update\n> your source code when upgrading to a newer version of this package.\n\n---\n<!--end stability banner-->\n\n[amazon kinesis data firehose](https://docs.aws.amazon.com/firehose/latest/dev/what-is-this-service.html)\nis a service for fully-managed delivery of real-time streaming data to storage services\nsuch as amazon s3, amazon redshift, amazon elasticsearch, splunk, or any custom http\nendpoint or third-party services such as datadog, dynatrace, logicmonitor, mongodb, new\nrelic, and sumo logic.\n\nkinesis data firehose delivery streams are distinguished from kinesis data streams in\ntheir models of consumption. whereas consumers read from a data stream by actively pulling\ndata from the stream, a delivery stream pushes data to its destination on a regular\ncadence. this means that data streams are intended to have consumers that do on-demand\nprocessing, like aws lambda or amazon ec2. on the other hand, delivery streams are\nintended to have destinations that are sources for offline processing and analytics, such\nas amazon s3 and amazon redshift.\n\nthis module is part of the [aws cloud development kit](https://github.com/aws/aws-cdk)\nproject. it allows you to define kinesis data firehose delivery streams.\n\n## defining a delivery stream\n\nin order to define a delivery stream, you must specify a destination. an s3 bucket can be\nused as a destination. more supported destinations are covered [below](#destinations).\n\n```python\nbucket = s3.bucket(self, \"bucket\")\nfirehose.deliverystream(self, \"delivery stream\",\n    destinations=[destinations.s3bucket(bucket)]\n)\n```\n\nthe above example defines the following resources:\n\n* an s3 bucket\n* a kinesis data firehose delivery stream with direct put as the source and cloudwatch\n  error logging turned on.\n* an iam role which gives the delivery stream permission to write to the s3 bucket.\n\n## sources\n\nthere are two main methods of sourcing input data: kinesis data streams and via a \"direct\nput\".\n\nsee: [sending data to a delivery stream](https://docs.aws.amazon.com/firehose/latest/dev/basic-write.html)\nin the *kinesis data firehose developer guide*.\n\n### kinesis data stream\n\na delivery stream can read directly from a kinesis data stream as a consumer of the data\nstream. configure this behaviour by providing a data stream in the `sourcestream`\nproperty when constructing a delivery stream:\n\n```python\n# destination: firehose.idestination\n\nsource_stream = kinesis.stream(self, \"source stream\")\nfirehose.deliverystream(self, \"delivery stream\",\n    source_stream=source_stream,\n    destinations=[destination]\n)\n```\n\n### direct put\n\ndata must be provided via \"direct put\", ie., by using a `putrecord` or\n`putrecordbatch` api call. there are a number of ways of doing so, such as:\n\n* kinesis agent: a standalone java application that monitors and delivers files while\n  handling file rotation, checkpointing, and retries. see: [writing to kinesis data firehose using kinesis agent](https://docs.aws.amazon.com/firehose/latest/dev/writing-with-agents.html)\n  in the *kinesis data firehose developer guide*.\n* aws sdk: a general purpose solution that allows you to deliver data to a delivery stream\n  from anywhere using java, .net, node.js, python, or ruby. see: [writing to kinesis data firehose using the aws sdk](https://docs.aws.amazon.com/firehose/latest/dev/writing-with-sdk.html)\n  in the *kinesis data firehose developer guide*.\n* cloudwatch logs: subscribe to a log group and receive filtered log events directly into\n  a delivery stream. see: [logs-destinations](https://docs.aws.amazon.com/cdk/api/latest/docs/aws-logs-destinations-readme.html).\n* eventbridge: add an event rule target to send events to a delivery stream based on the\n  rule filtering. see: [events-targets](https://docs.aws.amazon.com/cdk/api/latest/docs/aws-events-targets-readme.html).\n* sns: add a subscription to send all notifications from the topic to a delivery\n  stream. see: [sns-subscriptions](https://docs.aws.amazon.com/cdk/api/latest/docs/aws-sns-subscriptions-readme.html).\n* iot: add an action to an iot rule to send various iot information to a delivery stream\n\n## destinations\n\nthe following destinations are supported. see [kinesisfirehose-destinations](https://docs.aws.amazon.com/cdk/api/latest/docs/aws-kinesisfirehose-destinations-readme.html)\nfor the implementations of these destinations.\n\n### s3\n\ndefining a delivery stream with an s3 bucket destination:\n\n```python\n# bucket: s3.bucket\n\ns3_destination = destinations.s3bucket(bucket)\n\nfirehose.deliverystream(self, \"delivery stream\",\n    destinations=[s3_destination]\n)\n```\n\nthe s3 destination also supports custom dynamic prefixes. `dataoutputprefix`\nwill be used for files successfully delivered to s3. `erroroutputprefix` will be added to\nfailed records before writing them to s3.\n\n```python\n# bucket: s3.bucket\n\ns3_destination = destinations.s3bucket(bucket,\n    data_output_prefix=\"myfirehose/deliveredyear=!{timestamp:yyyy}/anymonth/rand=!{firehose:random-string}\",\n    error_output_prefix=\"myfirehosefailures/!{firehose:error-output-type}/!{timestamp:yyyy}/anymonth/!{timestamp:dd}\"\n)\n```\n\nsee: [custom s3 prefixes](https://docs.aws.amazon.com/firehose/latest/dev/s3-prefixes.html)\nin the *kinesis data firehose developer guide*.\n\n## server-side encryption\n\nenabling server-side encryption (sse) requires kinesis data firehose to encrypt all data\nsent to delivery stream when it is stored at rest. this means that data is encrypted\nbefore being written to the service's internal storage layer and decrypted after it is\nreceived from the internal storage layer. the service manages keys and cryptographic\noperations so that sources and destinations do not need to, as the data is encrypted and\ndecrypted at the boundaries of the service (i.e., before the data is delivered to a\ndestination). by default, delivery streams do not have sse enabled.\n\nthe key management service keys (kms keys) used for sse can either be aws-owned or\ncustomer-managed. aws-owned kms keys are created, owned and managed by aws for use in\nmultiple aws accounts. as a customer, you cannot view, use, track, or manage these keys,\nand you are not charged for their use. on the other hand, customer-managed kms keys are\ncreated and owned within your account and managed entirely by you. as a customer, you are\nresponsible for managing access, rotation, aliases, and deletion for these keys, and you\nare changed for their use.\n\nsee: [aws kms keys](https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#kms_keys)\nin the *kms developer guide*.\n\n```python\n# destination: firehose.idestination\n# sse with an customer-managed key that is explicitly specified\n# key: kms.key\n\n\n# sse with an aws-owned key\nfirehose.deliverystream(self, \"delivery stream aws owned\",\n    encryption=firehose.streamencryption.aws_owned,\n    destinations=[destination]\n)\n# sse with an customer-managed key that is created automatically by the cdk\nfirehose.deliverystream(self, \"delivery stream implicit customer managed\",\n    encryption=firehose.streamencryption.customer_managed,\n    destinations=[destination]\n)\nfirehose.deliverystream(self, \"delivery stream explicit customer managed\",\n    encryption_key=key,\n    destinations=[destination]\n)\n```\n\nsee: [data protection](https://docs.aws.amazon.com/firehose/latest/dev/encryption.html)\nin the *kinesis data firehose developer guide*.\n\n## monitoring\n\nkinesis data firehose is integrated with cloudwatch, so you can monitor the performance of\nyour delivery streams via logs and metrics.\n\n### logs\n\nkinesis data firehose will send logs to cloudwatch when data transformation or data\ndelivery fails. the cdk will enable logging by default and create a cloudwatch loggroup\nand logstream for your delivery stream.\n\nwhen you create a destination, you can specify a log group. in this log group, the cdk\nwill create log streams where log events will be sent:\n\n```python\nimport aws_cdk.aws_logs as logs\n# bucket: s3.bucket\n\n\nlog_group = logs.loggroup(self, \"log group\")\ndestination = destinations.s3bucket(bucket,\n    log_group=log_group\n)\n\nfirehose.deliverystream(self, \"delivery stream\",\n    destinations=[destination]\n)\n```\n\nlogging can also be disabled:\n\n```python\n# bucket: s3.bucket\n\ndestination = destinations.s3bucket(bucket,\n    logging=false\n)\nfirehose.deliverystream(self, \"delivery stream\",\n    destinations=[destination]\n)\n```\n\nsee: [monitoring using cloudwatch logs](https://docs.aws.amazon.com/firehose/latest/dev/monitoring-with-cloudwatch-logs.html)\nin the *kinesis data firehose developer guide*.\n\n### metrics\n\nkinesis data firehose sends metrics to cloudwatch so that you can collect and analyze the\nperformance of the delivery stream, including data delivery, data ingestion, data\ntransformation, format conversion, api usage, encryption, and resource usage. you can then\nuse cloudwatch alarms to alert you, for example, when data freshness (the age of the\noldest record in the delivery stream) exceeds the buffering limit (indicating that data is\nnot being delivered to your destination), or when the rate of incoming records exceeds the\nlimit of records per second (indicating data is flowing into your delivery stream faster\nthan it is configured to process).\n\ncdk provides methods for accessing delivery stream metrics with default configuration,\nsuch as `metricincomingbytes`, and `metricincomingrecords` (see [`ideliverystream`](https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-kinesisfirehose.ideliverystream.html)\nfor a full list). cdk also provides a generic `metric` method that can be used to produce\nmetric configurations for any metric provided by kinesis data firehose; the configurations\nare pre-populated with the correct dimensions for the delivery stream.\n\n```python\nimport aws_cdk.aws_cloudwatch as cloudwatch\n\n# delivery_stream: firehose.deliverystream\n\n\n# alarm that triggers when the per-second average of incoming bytes exceeds 90% of the current service limit\nincoming_bytes_percent_of_limit = cloudwatch.mathexpression(\n    expression=\"incomingbytes / 300 / byteperseclimit\",\n    using_metrics={\n        \"incoming_bytes\": delivery_stream.metric_incoming_bytes(statistic=cloudwatch.statistic.sum),\n        \"byte_per_sec_limit\": delivery_stream.metric(\"bytespersecondlimit\")\n    }\n)\n\ncloudwatch.alarm(self, \"alarm\",\n    metric=incoming_bytes_percent_of_limit,\n    threshold=0.9,\n    evaluation_periods=3\n)\n```\n\nsee: [monitoring using cloudwatch metrics](https://docs.aws.amazon.com/firehose/latest/dev/monitoring-with-cloudwatch-metrics.html)\nin the *kinesis data firehose developer guide*.\n\n## compression\n\nyour data can automatically be compressed when it is delivered to s3 as either a final or\nan intermediary/backup destination. supported compression formats are: gzip, snappy,\nhadoop-compatible snappy, and zip, except for redshift destinations, where snappy\n(regardless of hadoop-compatibility) and zip are not supported. by default, data is\ndelivered to s3 without compression.\n\n```python\n# compress data delivered to s3 using snappy\n# bucket: s3.bucket\n\ns3_destination = destinations.s3bucket(bucket,\n    compression=destinations.compression.snappy\n)\nfirehose.deliverystream(self, \"delivery stream\",\n    destinations=[s3_destination]\n)\n```\n\n## buffering\n\nincoming data is buffered before it is delivered to the specified destination. the\ndelivery stream will wait until the amount of incoming data has exceeded some threshold\n(the \"buffer size\") or until the time since the last data delivery occurred exceeds some\nthreshold (the \"buffer interval\"), whichever happens first. you can configure these\nthresholds based on the capabilities of the destination and your use-case. by default, the\nbuffer size is 5 mib and the buffer interval is 5 minutes.\n\n```python\n# increase the buffer interval and size to 10 minutes and 8 mib, respectively\n# bucket: s3.bucket\n\ndestination = destinations.s3bucket(bucket,\n    buffering_interval=duration.minutes(10),\n    buffering_size=size.mebibytes(8)\n)\nfirehose.deliverystream(self, \"delivery stream\",\n    destinations=[destination]\n)\n```\n\nsee: [data delivery frequency](https://docs.aws.amazon.com/firehose/latest/dev/basic-deliver.html#frequency)\nin the *kinesis data firehose developer guide*.\n\n## destination encryption\n\nyour data can be automatically encrypted when it is delivered to s3 as a final or an\nintermediary/backup destination. kinesis data firehose supports amazon s3 server-side\nencryption with aws key management service (aws kms) for encrypting delivered data in\namazon s3. you can choose to not encrypt the data or to encrypt with a key from the list\nof aws kms keys that you own. for more information,\nsee [protecting data using server-side encryption with aws kms\u2013managed keys (sse-kms)](https://docs.aws.amazon.com/amazons3/latest/dev/usingkmsencryption.html).\ndata is not encrypted by default.\n\n```python\n# bucket: s3.bucket\n# key: kms.key\n\ndestination = destinations.s3bucket(bucket,\n    encryption_key=key\n)\nfirehose.deliverystream(self, \"delivery stream\",\n    destinations=[destination]\n)\n```\n\n## backup\n\na delivery stream can be configured to back up data to s3 that it attempted to deliver to\nthe configured destination. backed up data can be all the data that the delivery stream\nattempted to deliver or just data that it failed to deliver (redshift and s3 destinations\ncan only back up all data). cdk can create a new s3 bucket where it will back up data, or\nyou can provide a bucket where data will be backed up. you can also provide a prefix under\nwhich your backed-up data will be placed within the bucket. by default, source data is not\nbacked up to s3.\n\n```python\n# enable backup of all source records (to an s3 bucket created by cdk).\n# bucket: s3.bucket\n# explicitly provide an s3 bucket to which all source records will be backed up.\n# backup_bucket: s3.bucket\n\nfirehose.deliverystream(self, \"delivery stream backup all\",\n    destinations=[\n        destinations.s3bucket(bucket,\n            s3_backup=destinations.destinations3backupprops(\n                mode=destinations.backupmode.all\n            )\n        )\n    ]\n)\nfirehose.deliverystream(self, \"delivery stream backup all explicit bucket\",\n    destinations=[\n        destinations.s3bucket(bucket,\n            s3_backup=destinations.destinations3backupprops(\n                bucket=backup_bucket\n            )\n        )\n    ]\n)\n# explicitly provide an s3 prefix under which all source records will be backed up.\nfirehose.deliverystream(self, \"delivery stream backup all explicit prefix\",\n    destinations=[\n        destinations.s3bucket(bucket,\n            s3_backup=destinations.destinations3backupprops(\n                mode=destinations.backupmode.all,\n                data_output_prefix=\"mybackup\"\n            )\n        )\n    ]\n)\n```\n\nif any data processing or transformation is configured on your delivery stream, the source\nrecords will be backed up in their original format.\n\n## data processing/transformation\n\ndata can be transformed before being delivered to destinations. there are two types of\ndata processing for delivery streams: record transformation with aws lambda, and record\nformat conversion using a schema stored in an aws glue table. if both types of data\nprocessing are configured, then the lambda transformation is performed first. by default,\nno data processing occurs. this construct library currently only supports data\ntransformation with aws lambda. see [#15501](https://github.com/aws/aws-cdk/issues/15501)\nto track the status of adding support for record format conversion.\n\n### data transformation with aws lambda\n\nto transform the data, kinesis data firehose will call a lambda function that you provide\nand deliver the data returned in place of the source record. the function must return a\nresult that contains records in a specific format, including the following fields:\n\n* `recordid` -- the id of the input record that corresponds the results.\n* `result` -- the status of the transformation of the record: \"ok\" (success), \"dropped\"\n  (not processed intentionally), or \"processingfailed\" (not processed due to an error).\n* `data` -- the transformed data, base64-encoded.\n\nthe data is buffered up to 1 minute and up to 3 mib by default before being sent to the\nfunction, but can be configured using `bufferinterval` and `buffersize`\nin the processor configuration (see: [buffering](#buffering)). if the function invocation\nfails due to a network timeout or because of hitting an invocation limit, the invocation\nis retried 3 times by default, but can be configured using `retries` in the processor\nconfiguration.\n\n```python\n# bucket: s3.bucket\n# provide a lambda function that will transform records before delivery, with custom\n# buffering and retry configuration\nlambda_function = lambda_.function(self, \"processor\",\n    runtime=lambda_.runtime.nodejs_latest,\n    handler=\"index.handler\",\n    code=lambda_.code.from_asset(path.join(__dirname, \"process-records\"))\n)\nlambda_processor = firehose.lambdafunctionprocessor(lambda_function,\n    buffer_interval=duration.minutes(5),\n    buffer_size=size.mebibytes(5),\n    retries=5\n)\ns3_destination = destinations.s3bucket(bucket,\n    processor=lambda_processor\n)\nfirehose.deliverystream(self, \"delivery stream\",\n    destinations=[s3_destination]\n)\n```\n\n```python\nimport path as path\nimport aws_cdk.aws_kinesisfirehose_alpha as firehose\nimport aws_cdk.aws_kms as kms\nimport aws_cdk.aws_lambda_nodejs as lambdanodejs\nimport aws_cdk.aws_logs as logs\nimport aws_cdk.aws_s3 as s3\nimport aws_cdk as cdk\nimport aws_cdk.aws_kinesisfirehose_destinations_alpha as destinations\n\napp = cdk.app()\n\nstack = cdk.stack(app, \"aws-cdk-firehose-delivery-stream-s3-all-properties\")\n\nbucket = s3.bucket(stack, \"bucket\",\n    removal_policy=cdk.removalpolicy.destroy,\n    auto_delete_objects=true\n)\n\nbackup_bucket = s3.bucket(stack, \"backupbucket\",\n    removal_policy=cdk.removalpolicy.destroy,\n    auto_delete_objects=true\n)\nlog_group = logs.loggroup(stack, \"loggroup\",\n    removal_policy=cdk.removalpolicy.destroy\n)\n\ndata_processor_function = lambdanodejs.nodejsfunction(stack, \"dataprocessorfunction\",\n    entry=path.join(__dirname, \"lambda-data-processor.js\"),\n    timeout=cdk.duration.minutes(1)\n)\n\nprocessor = firehose.lambdafunctionprocessor(data_processor_function,\n    buffer_interval=cdk.duration.seconds(60),\n    buffer_size=cdk.size.mebibytes(1),\n    retries=1\n)\n\nkey = kms.key(stack, \"key\",\n    removal_policy=cdk.removalpolicy.destroy\n)\n\nbackup_key = kms.key(stack, \"backupkey\",\n    removal_policy=cdk.removalpolicy.destroy\n)\n\nfirehose.deliverystream(stack, \"delivery stream\",\n    destinations=[destinations.s3bucket(bucket,\n        logging=true,\n        log_group=log_group,\n        processor=processor,\n        compression=destinations.compression.gzip,\n        data_output_prefix=\"regularprefix\",\n        error_output_prefix=\"errorprefix\",\n        buffering_interval=cdk.duration.seconds(60),\n        buffering_size=cdk.size.mebibytes(1),\n        encryption_key=key,\n        s3_backup=destinations.destinations3backupprops(\n            mode=destinations.backupmode.all,\n            bucket=backup_bucket,\n            compression=destinations.compression.zip,\n            data_output_prefix=\"backupprefix\",\n            error_output_prefix=\"backuperrorprefix\",\n            buffering_interval=cdk.duration.seconds(60),\n            buffering_size=cdk.size.mebibytes(1),\n            encryption_key=backup_key\n        )\n    )]\n)\n\napp.synth()\n```\n\nsee: [data transformation](https://docs.aws.amazon.com/firehose/latest/dev/data-transformation.html)\nin the *kinesis data firehose developer guide*.\n\n## specifying an iam role\n\nthe deliverystream class automatically creates iam service roles with all the minimum\nnecessary permissions for kinesis data firehose to access the resources referenced by your\ndelivery stream. one service role is created for the delivery stream that allows kinesis\ndata firehose to read from a kinesis data stream (if one is configured as the delivery\nstream source) and for server-side encryption. note that if the deliverystream is created\nwithout specifying `sourcestream` or `encryptionkey`, this role is not created as it is not needed.\n\nanother service role is created for each destination, which gives kinesis data firehose write\naccess to the destination resource, as well as the ability to invoke data transformers and\nread schemas for record format conversion. if you wish, you may specify your own iam role for\neither the delivery stream or the destination service role, or both. it must have the correct\ntrust policy (it must allow kinesis data firehose to assume it) or delivery stream creation or\ndata delivery will fail. other required permissions to destination resources, encryption keys, etc.,\nwill be provided automatically.\n\n```python\n# specify the roles created above when defining the destination and delivery stream.\n# bucket: s3.bucket\n# create service roles for the delivery stream and destination.\n# these can be used for other purposes and granted access to different resources.\n# they must include the kinesis data firehose service principal in their trust policies.\n# two separate roles are shown below, but the same role can be used for both purposes.\ndelivery_stream_role = iam.role(self, \"delivery stream role\",\n    assumed_by=iam.serviceprincipal(\"firehose.amazonaws.com\")\n)\ndestination_role = iam.role(self, \"destination role\",\n    assumed_by=iam.serviceprincipal(\"firehose.amazonaws.com\")\n)\ndestination = destinations.s3bucket(bucket, role=destination_role)\nfirehose.deliverystream(self, \"delivery stream\",\n    destinations=[destination],\n    role=delivery_stream_role\n)\n```\n\nsee [controlling access](https://docs.aws.amazon.com/firehose/latest/dev/controlling-access.html)\nin the *kinesis data firehose developer guide*.\n\n## granting application access to a delivery stream\n\niam roles, users or groups which need to be able to work with delivery streams should be\ngranted iam permissions.\n\nany object that implements the `igrantable` interface (i.e., has an associated principal)\ncan be granted permissions to a delivery stream by calling:\n\n* `grantputrecords(principal)` - grants the principal the ability to put records onto the\n  delivery stream\n* `grant(principal, ...actions)` - grants the principal permission to a custom set of\n  actions\n\n```python\n# give the role permissions to write data to the delivery stream\n# delivery_stream: firehose.deliverystream\nlambda_role = iam.role(self, \"role\",\n    assumed_by=iam.serviceprincipal(\"lambda.amazonaws.com\")\n)\ndelivery_stream.grant_put_records(lambda_role)\n```\n\nthe following write permissions are provided to a service principal by the\n`grantputrecords()` method:\n\n* `firehose:putrecord`\n* `firehose:putrecordbatch`\n\n## granting a delivery stream access to a resource\n\nconversely to the above, kinesis data firehose requires permissions in order for delivery\nstreams to interact with resources that you own. for example, if an s3 bucket is specified\nas a destination of a delivery stream, the delivery stream must be granted permissions to\nput and get objects from the bucket. when using the built-in aws service destinations\nfound in the `@aws-cdk/aws-kinesisfirehose-destinations-alpha` module, the cdk grants the\npermissions automatically. however, custom or third-party destinations may require custom\npermissions. in this case, use the delivery stream as an `igrantable`, as follows:\n\n```python\n# delivery_stream: firehose.deliverystream\nfn = lambda_.function(self, \"function\",\n    code=lambda_.code.from_inline(\"exports.handler = (event) => {}\"),\n    runtime=lambda_.runtime.nodejs_latest,\n    handler=\"index.handler\"\n)\nfn.grant_invoke(delivery_stream)\n```\n\n## multiple destinations\n\nthough the delivery stream allows specifying an array of destinations, only one\ndestination per delivery stream is currently allowed. this limitation is enforced at cdk\nsynthesis time and will throw an error.\n",
  "docs_url": null,
  "keywords": "",
  "license": "apache-2.0",
  "name": "aws-cdk.aws-kinesisfirehose-alpha",
  "package_url": "https://pypi.org/project/aws-cdk.aws-kinesisfirehose-alpha/",
  "project_url": "https://pypi.org/project/aws-cdk.aws-kinesisfirehose-alpha/",
  "project_urls": {
    "Homepage": "https://github.com/aws/aws-cdk",
    "Source": "https://github.com/aws/aws-cdk.git"
  },
  "release_url": "https://pypi.org/project/aws-cdk.aws-kinesisfirehose-alpha/2.116.1a0/",
  "requires_dist": [
    "aws-cdk-lib <3.0.0,>=2.116.1",
    "constructs <11.0.0,>=10.0.0",
    "jsii <2.0.0,>=1.93.0",
    "publication >=0.0.3",
    "typeguard ~=2.13.3"
  ],
  "requires_python": "~=3.8",
  "summary": "the cdk construct library for aws::kinesisfirehose",
  "version": "2.116.1a0",
  "releases": [],
  "developers": [
    "amazon_web_services"
  ],
  "kwds": "aws_kinesisfirehose_alpha aws_kinesisfirehose_destinations_alpha kinesisfirehose aws_cdk cdk_aws",
  "license_kwds": "apache-2.0",
  "libtype": "pypi",
  "id": "pypi_aws_cdk.aws_kinesisfirehose_alpha",
  "homepage": "https://github.com/aws/aws-cdk",
  "release_count": 172,
  "dependency_ids": [
    "pypi_aws_cdk_lib",
    "pypi_constructs",
    "pypi_jsii",
    "pypi_publication",
    "pypi_typeguard"
  ],
  "documentation_summary": "The HTML text is about the `aws-cdk.aws-kinesisfirehose-alpha` package version 2.131.0a0 available on PyPI, released on March 1, 2024. It is part of the AWS Cloud Development Kit (CDK) and provides a construct library for Amazon Kinesis Data Firehose, allowing users to define delivery streams for real-time streaming data to various AWS services and third-party service destinations. The module supports Python versions 3.8 and newer and is in beta development status. It requires JavaScript for some features and warns against using unsupported browsers. The package is licensed under Apache-2.0 and maintained by Amazon Web Services.",
  "embedding": [
    -0.01326355617493391,
    -0.0003291442117188126,
    -0.038745228201150894,
    -0.011706066317856312,
    -0.008271054364740849,
    0.041561514139175415,
    -0.02061007171869278,
    0.0021299920044839382,
    0.005319646093994379,
    -0.01184830255806446,
    -0.0005991713842377067,
    0.008214158937335014,
    -0.014237876050174236,
    0.04864489287137985,
    -0.0004198199894744903,
    -0.015589123591780663,
    0.031462717801332474,
    -0.02371082827448845,
    0.010425937362015247,
    -0.029926564544439316,
    0.03018259070813656,
    -0.02001267857849598,
    -0.008057699538767338,
    0.0047222524881362915,
    -0.04699494689702988,
    0.021051006391644478,
    0.027309412136673927,
    -0.02756543830037117,
    0.0072469511069357395,
    0.008007916621863842,
    0.024706484749913216,
    0.007090490777045488,
    -0.014408559538424015,
    -0.009778761304914951,
    -0.01610117405653,
    0.00970764271914959,
    0.0038546097930520773,
    0.0017219509463757277,
    0.04616997763514519,
    -0.018604537472128868,
    0.019443733617663383,
    0.003964843228459358,
    -0.007133161649107933,
    -0.009572518058121204,
    -0.02321300096809864,
    0.021122124046087265,
    0.010440160520374775,
    -0.030353274196386337,
    -0.018135156482458115,
    0.0008685317588970065,
    0.011514046229422092,
    0.027167176827788353,
    -0.01723906770348549,
    -0.0008116371463984251,
    0.020581625401973724,
    -0.007264730520546436,
    0.0018899678252637386,
    0.005084955599159002,
    0.01524775568395853,
    -0.0029247384518384933,
    0.013775607571005821,
    0.006528656464070082,
    -0.015674464404582977,
    -0.045202769339084625,
    -0.018064038828015327,
    -0.018462300300598145,
    -0.012573708780109882,
    0.0025709252804517746,
    -0.00036203640047460794,
    -0.007239839062094688,
    0.03126358985900879,
    0.015461110509932041,
    -0.01139314565807581,
    -0.00498894602060318,
    0.029186934232711792,
    -0.005291198845952749,
    -0.02228846400976181,
    0.013811166398227215,
    -0.01674123853445053,
    0.014806821942329407,
    0.009999227710068226,
    -0.005853033158928156,
    -0.017381303012371063,
    0.02392418310046196,
    0.028148608282208443,
    0.018192050978541374,
    -0.008975124917924404,
    0.0024838054087013006,
    -0.002145993523299694,
    0.012659050524234772,
    0.008647981099784374,
    -0.014806821942329407,
    0.012573708780109882,
    0.03894435986876488,
    -0.011492711491882801,
    0.02304231747984886,
    -0.00769499596208334,
    0.04409332200884819,
    0.02375349961221218,
    -0.02413753792643547,
    -0.004971166606992483,
    -0.0028571761213243008,
    -0.02016913890838623,
    -0.007008704822510481,
    -0.04397953301668167,
    -0.017267514020204544,
    -0.012275012210011482,
    0.006133950315415859,
    0.02958519756793976,
    0.00923826266080141,
    -0.03484794870018959,
    0.017537763342261314,
    0.005163185764104128,
    -0.036668576300144196,
    -0.002293563913553953,
    -0.013868060894310474,
    -0.012146999128162861,
    0.001450812560506165,
    -0.005116959102451801,
    -0.019386839121580124,
    0.0020659854635596275,
    0.026982268318533897,
    0.014579243957996368,
    -0.005508109461516142,
    0.012040321715176105,
    0.00967919547110796,
    -0.034051425755023956,
    -0.03294197842478752,
    0.007374963723123074,
    -0.037550441920757294,
    0.00013379122538026422,
    -0.013299115002155304,
    0.03265750780701637,
    -0.03407987207174301,
    -0.02311343513429165,
    0.021563056856393814,
    -0.030097248032689095,
    -0.02891668491065502,
    -0.01810671016573906,
    -0.022359581664204597,
    -0.016072727739810944,
    0.01326355617493391,
    -0.002567369258031249,
    0.005202300846576691,
    -0.0226725023239851,
    0.010561062023043633,
    0.029556749388575554,
    -0.018248945474624634,
    -0.011812743730843067,
    -0.005010281689465046,
    -0.004231536760926247,
    -0.018135156482458115,
    -0.03572981432080269,
    -0.007374963723123074,
    -0.0001883522782009095,
    0.013690265826880932,
    -0.010859758593142033,
    -0.003086532698944211,
    0.01524775568395853,
    -0.009792984463274479,
    0.008975124917924404,
    0.016883475705981255,
    -0.012424360029399395,
    -0.026712018996477127,
    0.031718745827674866,
    0.03319800645112991,
    -0.005739243701100349,
    -0.02413753792643547,
    -0.010027674958109856,
    -0.009366274811327457,
    -0.0006720675737597048,
    0.017708446830511093,
    -0.030211037024855614,
    0.01248125545680523,
    -0.01881789229810238,
    0.013114207424223423,
    0.011677619069814682,
    0.010888205841183662,
    -0.036014288663864136,
    -0.007374963723123074,
    0.034904845058918,
    0.017438197508454323,
    0.010049010626971722,
    0.0333971343934536,
    -0.020211810246109962,
    -0.013882284983992577,
    0.006066387984901667,
    -0.0016401648754253983,
    0.024834496900439262,
    0.02740897797048092,
    0.0186472088098526,
    0.028077490627765656,
    -0.008612421341240406,
    -0.018234722316265106,
    -0.5712218880653381,
    -0.038034047931432724,
    -0.011080224998295307,
    -0.05365161597728729,
    -0.008228383027017117,
    0.005191633012145758,
    0.020723862573504448,
    0.02354014478623867,
    -0.009288044646382332,
    0.033510927110910416,
    -0.0015761584509164095,
    0.025190088897943497,
    -0.001562823774293065,
    -0.001450812560506165,
    -0.021136347204446793,
    -0.0007489642011933029,
    0.003225213149562478,
    -0.014109862968325615,
    0.029073145240545273,
    -0.012431472539901733,
    0.001189452945254743,
    0.02332678996026516,
    -0.03126358985900879,
    -0.0062441835179924965,
    0.004956942982971668,
    0.014835269190371037,
    0.013484022580087185,
    -0.01718217134475708,
    0.024436235427856445,
    0.002951407805085182,
    -0.028945133090019226,
    0.011592276394367218,
    0.02317032963037491,
    0.01476415153592825,
    0.054561931639909744,
    0.0012125663924962282,
    -0.020581625401973724,
    0.031121350824832916,
    0.02191864885389805,
    0.025574127212166786,
    -0.028987804427742958,
    -0.011229573749005795,
    0.00613039406016469,
    0.01557489950209856,
    0.03925728052854538,
    0.015048624016344547,
    0.035360001027584076,
    0.0069233630783855915,
    -0.0006987369270063937,
    -0.028987804427742958,
    0.004843153525143862,
    -0.01903124712407589,
    0.03513242304325104,
    -0.009693419560790062,
    2.961408972623758e-05,
    -0.018092485144734383,
    0.03234458714723587,
    -0.0010952212614938617,
    0.015432663261890411,
    0.005917039234191179,
    -0.011976315639913082,
    0.034933291375637054,
    0.011201126500964165,
    -0.029073145240545273,
    -0.027437426149845123,
    0.01473570428788662,
    -0.008882670663297176,
    -0.04397953301668167,
    0.008455961011350155,
    0.0004609352326951921,
    0.024009525775909424,
    0.0007134050829336047,
    0.015404216013848782,
    -0.027650780975818634,
    0.03453502804040909,
    0.04767768457531929,
    0.016271857544779778,
    -0.010418825782835484,
    0.00724339485168457,
    0.015162413939833641,
    0.021122124046087265,
    0.02903047390282154,
    -0.015958938747644424,
    -0.018192050978541374,
    0.02706761099398136,
    -0.0017530651530250907,
    -0.02804904244840145,
    -0.0075812069699168205,
    -0.00381905073300004,
    -0.012602156028151512,
    0.027864135801792145,
    0.01876099780201912,
    -0.0013334674295037985,
    -0.0340229757130146,
    0.006998036988079548,
    0.043467480689287186,
    0.03157650679349899,
    0.006027272902429104,
    -0.022103555500507355,
    -0.01476415153592825,
    -0.01907391846179962,
    -0.006710008252412081,
    -0.011428704485297203,
    -0.027977924793958664,
    0.037806469947099686,
    0.017594657838344574,
    -0.02756543830037117,
    -0.0016952815931290388,
    0.02191864885389805,
    -0.04389419034123421,
    -0.0022988978307694197,
    -0.03077998384833336,
    -0.026783138513565063,
    -0.009579629637300968,
    0.012744392268359661,
    -0.03772112727165222,
    0.03297042474150658,
    0.012900852598249912,
    0.012353242374956608,
    -0.009010683745145798,
    0.02317032963037491,
    0.010610844939947128,
    0.006133950315415859,
    0.0019521963549777865,
    0.02555990405380726,
    0.023511698469519615,
    0.007022928446531296,
    -0.005966822151094675,
    0.0001506818225607276,
    0.01739552617073059,
    0.027480097487568855,
    0.0020642075687646866,
    0.007310957182198763,
    0.0009192035649903119,
    0.011357586830854416,
    -0.010909541510045528,
    0.02196132019162178,
    0.002245559124276042,
    -0.015475333668291569,
    -0.029727432876825333,
    -0.004306210670620203,
    0.0044200001284480095,
    0.018334288150072098,
    -0.018732549622654915,
    0.003049195511266589,
    -0.024436235427856445,
    -0.013156878761947155,
    -0.02354014478623867,
    -0.014337441883981228,
    -0.02625686302781105,
    -0.005621898453682661,
    -0.027707675471901894,
    -0.016599003225564957,
    0.033909186720848083,
    0.0033603378105908632,
    -0.025958165526390076,
    0.017438197508454323,
    -0.012815510854125023,
    -0.014344553463160992,
    -0.01272305753082037,
    0.01302175410091877,
    0.015973161906003952,
    -0.015176637098193169,
    0.014963282272219658,
    -0.02631375752389431,
    -0.011265132576227188,
    -0.014835269190371037,
    0.01293641235679388,
    -0.02783568762242794,
    -0.01685502752661705,
    -0.010013451799750328,
    0.0013939179480075836,
    -0.02864643558859825,
    0.005842365324497223,
    0.018632985651493073,
    0.018988575786352158,
    -0.0020784311927855015,
    0.008242606185376644,
    0.005451214965432882,
    0.021435044705867767,
    -0.0031096460297703743,
    0.016129622235894203,
    -0.031946323812007904,
    -0.006261962931603193,
    0.04349593073129654,
    0.009017795324325562,
    0.01536154467612505,
    0.015176637098193169,
    -0.021520385518670082,
    0.018248945474624634,
    -0.013910732232034206,
    -0.003061641240492463,
    -0.02679736167192459,
    0.02995501272380352,
    -0.05985312908887863,
    -0.0011992317158728838,
    0.01073885802179575,
    -0.011506934650242329,
    -0.0016366089694201946,
    0.02674046717584133,
    0.06907005608081818,
    0.009188479743897915,
    0.008071922697126865,
    -0.029044698923826218,
    0.0006485096528194845,
    -0.02142082154750824,
    0.0073891873471438885,
    0.00012923522444907576,
    0.040309831500053406,
    0.005863700527697802,
    0.01503440085798502,
    -0.018604537472128868,
    -0.0016881697811186314,
    -0.006695784628391266,
    0.004615575075149536,
    0.006802461575716734,
    -0.03627031296491623,
    0.01903124712407589,
    -0.017680000513792038,
    0.002380683785304427,
    0.01750931702554226,
    0.006532212253659964,
    -0.013804054819047451,
    -0.0033301126677542925,
    -0.005810361821204424,
    -0.019002798944711685,
    0.009800096973776817,
    0.0024464682210236788,
    0.019529074430465698,
    -0.020965663716197014,
    0.004772035405039787,
    0.010169911198318005,
    -0.0022100000642240047,
    -0.0009272043243981898,
    0.007446082308888435,
    -0.008427513763308525,
    0.03271440044045448,
    -0.004242204129695892,
    0.021975543349981308,
    -0.029755881056189537,
    0.021463491022586823,
    -0.002642043400555849,
    0.04309766739606857,
    -0.011947868391871452,
    -0.008683539927005768,
    0.007115382235497236,
    -0.00439155288040638,
    0.005629010498523712,
    -0.0009254263713955879,
    -0.01604427956044674,
    0.024606918916106224,
    0.015944713726639748,
    0.003989734686911106,
    0.0012570152757689357,
    0.010319259949028492,
    0.006724231876432896,
    0.016058504581451416,
    0.010568173602223396,
    0.019258825108408928,
    0.002147771418094635,
    -0.003260772442445159,
    0.009124472737312317,
    0.002421576762571931,
    0.0016730570932850242,
    0.02430822141468525,
    -0.024592695757746696,
    -0.03334024176001549,
    -0.017850684002041817,
    -0.011819855310022831,
    -0.012388801202178001,
    -0.015148189850151539,
    -0.008256830275058746,
    0.009060466662049294,
    -0.02217467501759529,
    0.019970007240772247,
    0.011130007915198803,
    0.036128077656030655,
    0.035530682653188705,
    0.021179018542170525,
    0.008470185101032257,
    0.002592260716482997,
    -0.024990957230329514,
    0.027921030297875404,
    0.003644810989499092,
    -0.0028073934372514486,
    -0.03806249424815178,
    -0.0006800683913752437,
    0.04116325080394745,
    -0.04033827781677246,
    0.02436511591076851,
    0.0014774819137528539,
    -0.0015308206202462316,
    0.01451523695141077,
    0.006205068435519934,
    -0.01886056363582611,
    -0.007140273693948984,
    0.04133393242955208,
    -0.026399098336696625,
    0.033141110092401505,
    0.012609267607331276,
    0.0007116271299310029,
    -0.0087262112647295,
    -0.001537932432256639,
    0.033567819744348526,
    0.06218580901622772,
    -0.0009067578357644379,
    0.00592415127903223,
    0.01293641235679388,
    0.0013459131587296724,
    -0.005131182726472616,
    0.003621697425842285,
    0.0028056155424565077,
    -0.03527465835213661,
    -0.007929686456918716,
    0.02049628272652626,
    -0.016399871557950974,
    0.011001994833350182,
    -0.012843958102166653,
    0.025687916204333305,
    -0.021520385518670082,
    -0.001253459369763732,
    0.0035274657420814037,
    -0.010177023708820343,
    0.035644471645355225,
    0.030040353536605835,
    0.0025869267992675304,
    0.00787990354001522,
    0.037977151572704315,
    -0.028091713786125183,
    -0.03715217858552933,
    -0.0364125519990921,
    -0.01583092473447323,
    0.006261962931603193,
    0.009771649725735188,
    -0.0011236685095354915,
    0.009970780462026596,
    0.009231150150299072,
    0.03800559788942337,
    -0.0063828639686107635,
    -0.008000804111361504,
    -8.828665886539966e-05,
    -0.001973531674593687,
    -0.003918616101145744,
    -0.02473493106663227,
    0.00679534999653697,
    -0.014358777552843094,
    0.04736476391553879,
    0.011890973895788193,
    0.026171520352363586,
    0.02376772277057171,
    -0.0021673289593309164,
    0.005540112499147654,
    0.0018668543780222535,
    -0.024478906765580177,
    0.0032092116307467222,
    -0.0069020274095237255,
    0.008662204258143902,
    0.005771247204393148,
    -0.01524775568395853,
    0.033567819744348526,
    0.009928109124302864,
    0.007830120623111725,
    0.004178198054432869,
    -0.01494905911386013,
    0.007040707860141993,
    -0.0052307480946183205,
    0.02157728001475334,
    -0.0005556114483624697,
    0.00022468925453722477,
    -0.034819502383470535,
    -0.0019895334262400866,
    0.01696881651878357,
    -0.02354014478623867,
    0.0201264675706625,
    0.0124528082087636,
    -0.01847652532160282,
    -0.039001256227493286,
    -0.02076653204858303,
    0.036782365292310715,
    -0.008932453580200672,
    0.0566670298576355,
    -0.013967626728117466,
    -0.0012552373809739947,
    -0.03410831838846207,
    -0.01415964588522911,
    -0.041561514139175415,
    -0.01712527684867382,
    0.009686307050287724,
    0.005522333085536957,
    -0.009202702902257442,
    -0.0022384473122656345,
    0.03746509924530983,
    0.0012579042231664062,
    -0.008199935778975487,
    -0.01652788370847702,
    0.0027718343771994114,
    -0.020866097882390022,
    -0.005589895416051149,
    0.036839261651039124,
    0.0031683186534792185,
    -0.008463073521852493,
    -0.0090249078348279,
    0.00694469828158617,
    0.006169509142637253,
    0.005661013536155224,
    -0.025261206552386284,
    -0.011229573749005795,
    -0.03214545547962189,
    -0.008406179025769234,
    -0.0022917860187590122,
    0.017438197508454323,
    0.02935761958360672,
    0.019529074430465698,
    0.030865326523780823,
    -0.01201898604631424,
    0.022601384669542313,
    0.017324408516287804,
    -0.02022603340446949,
    0.014316106215119362,
    0.016385648399591446,
    0.004139082971960306,
    0.0021228801924735308,
    0.017978696152567863,
    -0.015958938747644424,
    -0.011172679252922535,
    -0.01337734516710043,
    0.014877940528094769,
    0.009451617486774921,
    0.009359163232147694,
    -0.008911117911338806,
    0.004665357992053032,
    -0.0012063435278832912,
    -0.012495478615164757,
    0.000911202747374773,
    0.0032181013375520706,
    -0.018988575786352158,
    -0.0046049077063798904,
    -0.021648399531841278,
    -0.0025335880927741528,
    -0.0009396500536240637,
    -0.019770877435803413,
    0.01728173717856407,
    -0.01793602667748928,
    0.0022046661470085382,
    0.019045470282435417,
    -0.03496173769235611,
    0.0008076367666944861,
    0.01033348310738802,
    -0.010027674958109856,
    0.03419366106390953,
    0.012829734943807125,
    -0.014209428802132607,
    -0.047051843255758286,
    0.020965663716197014,
    0.01637142337858677,
    0.025687916204333305,
    -0.0075598713010549545,
    -0.038631439208984375,
    0.0019006355432793498,
    0.006510877050459385,
    0.010148576460778713,
    -0.01340579241514206,
    0.014934835024178028,
    -0.002170884981751442,
    -0.02082342654466629,
    -0.0108170872554183,
    0.003993290476500988,
    -0.0186472088098526,
    -0.004875157028436661,
    -0.031064456328749657,
    -0.038517650216817856,
    0.013249332085251808,
    -0.005052952561527491,
    0.0030811987817287445,
    0.00254069990478456,
    -0.0034759051632136106,
    0.005593451205641031,
    -0.016115399077534676,
    0.0032909975852817297,
    0.00595259852707386,
    0.005593451205641031,
    -0.005340981297194958,
    0.0036519228015094995,
    0.045913949608802795,
    0.04090722277760506,
    0.009856991469860077,
    0.05143272876739502,
    0.020368270576000214,
    0.004263539798557758,
    -0.010973547585308552,
    -0.01571713574230671,
    0.027010716497898102,
    -0.0214777160435915,
    0.0006151729612611234,
    0.02126436121761799,
    0.014131198637187481,
    0.003324778750538826,
    -0.01658477820456028,
    0.016214963048696518,
    0.00986410304903984,
    -0.0035683587193489075,
    -0.01217544637620449,
    -0.02354014478623867,
    -0.03328334540128708,
    -0.025033628568053246,
    -6.61177618894726e-05,
    -0.011442928574979305,
    -0.008655092678964138,
    -0.031946323812007904,
    -0.015503780916333199,
    0.029386065900325775,
    -0.017680000513792038,
    0.001822405494749546,
    0.01538999192416668,
    0.034165214747190475,
    0.017253290861845016,
    0.003929283935576677,
    0.017423974350094795,
    0.04816128686070442,
    0.0027967256028205156,
    0.00856263842433691,
    -0.025531455874443054,
    -0.004348881542682648,
    0.03271440044045448,
    -0.004964054562151432,
    0.011172679252922535,
    0.0017921802354976535,
    -0.005885036196559668,
    0.016769686713814735,
    0.007652325090020895,
    -0.013519581407308578,
    -0.012410136871039867,
    0.01163494773209095,
    -0.026982268318533897,
    -0.01615806855261326,
    -0.027906805276870728,
    -0.011976315639913082,
    -0.02588704787194729,
    0.013875173404812813,
    -0.007510088384151459,
    0.02093721553683281,
    0.032543715089559555,
    -0.016627449542284012,
    -0.0004813817504327744,
    -0.009778761304914951,
    -0.007645213045179844,
    0.0501241497695446,
    0.016599003225564957,
    0.0010614400962367654,
    0.004395108669996262,
    0.00832083635032177,
    -0.042756300419569016,
    -0.008057699538767338,
    -0.007823009043931961,
    -0.017978696152567863,
    0.027252517640590668,
    -0.012851069681346416,
    -0.00436310563236475,
    -0.019344167783856392,
    -0.005124070681631565,
    0.017480868846178055,
    -0.027963701635599136,
    -0.03393763303756714,
    0.03908659890294075,
    0.01615806855261326,
    -0.007083378732204437,
    -0.008975124917924404,
    0.01876099780201912,
    -0.0005262751365080476,
    0.010831311345100403,
    -0.023227224126458168,
    7.378519512712955e-05,
    0.02608617953956127,
    -0.020567402243614197,
    -0.017054159194231033,
    0.0027736122719943523,
    0.01935839094221592,
    0.012772839516401291,
    0.005447658710181713,
    -0.020780757069587708,
    0.01598738506436348,
    0.003100756322965026,
    -0.03669702261686325,
    0.02011224441230297,
    -0.007986580953001976,
    0.024820273742079735,
    -0.027693452313542366,
    -0.0055863396264612675,
    0.05038017779588699,
    -0.003276773961260915,
    -0.011492711491882801,
    0.015347320586442947,
    -0.010184135288000107,
    0.03524621203541756,
    -0.011684730648994446,
    -0.011208238080143929,
    -0.01974242925643921,
    -0.016229188069701195,
    -0.02619996853172779,
    -0.025744810700416565,
    -0.011179790832102299,
    0.008342172019183636,
    -0.012267900630831718,
    -0.002812727354466915,
    0.011841190978884697,
    -0.0063970875926315784,
    -0.012907964177429676,
    -0.026114625856280327,
    -0.002828728873282671,
    -0.007901239208877087,
    -0.0009089803206734359,
    0.00649665342643857,
    0.018462300300598145,
    -0.02409486658871174,
    -0.030950667336583138,
    -0.040850330144166946,
    -0.012182557955384254,
    0.009508511982858181,
    0.015631794929504395,
    -0.012822622433304787,
    0.015318873338401318,
    0.042813193053007126,
    -0.0074105230160057545,
    0.006329525262117386,
    -0.019315719604492188,
    -0.02631375752389431,
    -0.02066696621477604,
    0.003648366779088974,
    0.0009823209838941693,
    -0.00775900250300765,
    0.028831344097852707,
    -0.004956942982971668,
    -0.03991156816482544,
    -0.012488367035984993,
    0.0022277794778347015,
    0.014835269190371037,
    0.0006009493372403085,
    0.00880444049835205,
    0.007894126698374748,
    0.01223234087228775,
    -0.0038617216050624847,
    -0.015133966691792011,
    0.020140692591667175,
    0.017381303012371063,
    0.012033210135996342,
    -0.04423556104302406,
    0.03783491626381874,
    -0.012125663459300995,
    0.023725051432847977,
    -0.005732132121920586,
    -0.00676690274849534,
    0.01231768261641264,
    -0.014991729520261288,
    -0.007844344712793827,
    0.02365393377840519,
    0.007872791960835457,
    -0.03811938688158989,
    0.01810671016573906,
    0.006269074976444244,
    -0.033141110092401505,
    -0.014565019868314266,
    0.014806821942329407,
    0.023412132635712624,
    -0.0031807643827050924,
    0.04059430584311485,
    0.01913081295788288,
    0.019614417105913162,
    0.024535801261663437,
    -0.01696881651878357,
    0.0015992718981578946,
    -0.020354047417640686,
    0.003077642759308219,
    -0.03231613710522652,
    -0.010482831858098507,
    0.00577480299398303,
    0.032828189432621,
    -0.0014970394549891353,
    -0.023582816123962402,
    -0.025702139362692833,
    -0.0064148674719035625,
    -0.013661818578839302,
    -0.012630603276193142,
    -0.006005937233567238,
    0.036014288663864136,
    0.008007916621863842,
    0.03885901719331741,
    0.010340595617890358,
    -0.002727385377511382,
    0.0027504987083375454,
    0.020738085731863976,
    -0.028632212430238724,
    0.0020499839447438717,
    0.019287273287773132,
    0.01570291258394718,
    -0.0048716007731854916,
    0.0034812388475984335,
    -0.04389419034123421,
    -1.9001910914084874e-05,
    0.034279003739356995,
    0.0003515909193083644,
    0.016840804368257523,
    0.05649634823203087,
    0.007431858219206333,
    0.0029229605570435524,
    0.02038249373435974,
    0.005333869718015194,
    0.0033674496226012707,
    0.0030100804287940264,
    -0.0008480852702632546,
    -0.04935607314109802,
    -0.010653515346348286,
    -0.013384456746280193,
    0.02816283144056797,
    0.013498246669769287,
    0.024123314768075943,
    0.008576862514019012,
    -0.017039936035871506,
    -0.005611231084913015,
    0.008306613191962242,
    -0.01652788370847702,
    -0.015973161906003952,
    -0.01691192202270031,
    0.022302687168121338,
    0.017139501869678497,
    -0.00483959773555398,
    0.04403642937541008,
    0.010169911198318005,
    -0.00384749798104167,
    -0.01816360466182232,
    0.01006323378533125,
    -0.013356009498238564,
    -0.00853419117629528,
    -0.00547610642388463,
    -0.009060466662049294,
    0.008278165943920612,
    -0.03285663574934006,
    0.017523540183901787,
    0.007474529556930065,
    -0.0025727031752467155,
    0.004352437797933817,
    -0.01810671016573906,
    -0.026455992832779884,
    -0.005522333085536957,
    -0.006126838270574808,
    -0.025246983394026756,
    0.00926670990884304,
    0.013135543093085289,
    -0.0012463475577533245,
    -0.011812743730843067,
    0.008904006332159042,
    -0.009963668882846832,
    -0.007438970264047384,
    0.012495478615164757,
    -0.00817860011011362,
    -0.01947217993438244,
    -0.03126358985900879,
    0.003525687847286463,
    0.005991713609546423,
    -0.048360418528318405,
    0.01914503611624241,
    0.15304650366306305,
    0.01598738506436348,
    0.027807241305708885,
    0.01033348310738802,
    -0.009629412554204464,
    -0.006453982088714838,
    -0.012573708780109882,
    0.0364125519990921,
    -0.019273048266768456,
    0.039826225489377975,
    -0.013249332085251808,
    -0.007502976804971695,
    -0.01972820609807968,
    0.008228383027017117,
    -0.0030225261580199003,
    -0.010859758593142033,
    -0.023895736783742905,
    -0.041021015495061874,
    -0.012218117713928223,
    0.012815510854125023,
    0.01500595360994339,
    -0.02958519756793976,
    0.002121102064847946,
    -0.02093721553683281,
    0.015503780916333199,
    -0.024706484749913216,
    0.0133488979190588,
    -0.008690651506185532,
    0.0024109091609716415,
    0.017381303012371063,
    -0.050693098455667496,
    0.002899847226217389,
    0.002245559124276042,
    -0.017651552334427834,
    -0.029755881056189537,
    -0.005717908497899771,
    -0.01078864000737667,
    -0.029698986560106277,
    0.032373033463954926,
    0.009444504976272583,
    0.0008974235970526934,
    -0.028504200279712677,
    -0.0055543361231684685,
    -0.021619951352477074,
    0.00905335508286953,
    -0.02621419169008732,
    -0.011777183972299099,
    0.007623877841979265,
    -0.011620723642408848,
    0.0060699437744915485,
    -0.022587159648537636,
    -0.009224038571119308,
    0.011058890260756016,
    0.00018768553854897618,
    -0.0062548513524234295,
    -0.0020926548168063164,
    0.004149750806391239,
    0.03245837613940239,
    0.010511279106140137,
    0.027650780975818634,
    -0.014358777552843094,
    0.028191279619932175,
    -0.017978696152567863,
    0.0038154947105795145,
    -0.02571636438369751,
    0.02336946129798889,
    -0.047649234533309937,
    -0.0023273450788110495,
    0.010852647013962269,
    -0.005273418966680765,
    -0.03180408850312233,
    -0.01945795677602291,
    -0.010297924280166626,
    0.004455558955669403,
    0.0026740466710180044,
    -0.021989766508340836,
    0.037806469947099686,
    0.007186500355601311,
    0.017039936035871506,
    0.03126358985900879,
    -0.013398680835962296,
    0.004526677541434765,
    0.00249447301030159,
    -0.007865679450333118,
    0.005824585910886526,
    0.002876733662560582,
    0.0278925821185112,
    -0.033795397728681564,
    0.0004951609298586845,
    0.003408342832699418,
    -0.02577325887978077,
    -0.013981850817799568,
    -0.0014348109252750874,
    0.009878326207399368,
    -0.017253290861845016,
    -0.012644827365875244,
    -0.012104328721761703,
    0.0060379402711987495,
    0.00213354779407382,
    0.00411774730309844,
    -0.038574546575546265,
    0.06247028335928917,
    -0.006315301638096571,
    0.0033692277502268553,
    -0.011236685328185558,
    0.00264382129535079,
    0.0017752896528691053,
    0.03151961416006088,
    -0.00029447406996041536,
    -0.012673274613916874,
    -0.014493902213871479,
    -0.03169029951095581,
    0.00613039406016469,
    -0.020410941913723946,
    -0.00036870373878628016,
    0.008327948860824108,
    -0.022985422983765602,
    0.01728173717856407,
    -0.012417248450219631,
    -0.004910715855658054,
    -0.0264133233577013,
    -0.02479182556271553,
    0.00676690274849534,
    -0.0038403861690312624,
    -0.02336946129798889,
    -0.0008263053023256361,
    -0.01920193061232567,
    0.010873982682824135,
    -0.035416893661022186,
    -0.028020596131682396,
    0.007730555254966021,
    0.013818277977406979,
    0.03393763303756714,
    -0.016342977061867714,
    0.000722294847946614,
    -0.002418020972982049,
    -0.005881480406969786,
    -0.021136347204446793,
    0.0035310217645019293,
    0.01989888958632946,
    -0.01470725703984499,
    -0.0067171198315918446,
    0.02679736167192459,
    0.003758600214496255,
    0.019600193947553635,
    -0.023127658292651176,
    0.002505140844732523,
    -0.010809975676238537,
    -0.015916267409920692,
    -0.03590049967169762,
    -0.027494320645928383,
    -0.0010596620850265026,
    0.038574546575546265,
    -0.03516086935997009,
    0.007943909615278244,
    -0.029186934232711792,
    -0.019642863422632217,
    -0.029329171404242516,
    0.01881789229810238,
    0.0015032623196020722,
    -0.017694223672151566,
    0.013462686911225319,
    -0.01566024124622345,
    0.0062228478491306305,
    -0.017850684002041817,
    -0.021349702030420303,
    -0.17933180928230286,
    0.005120514892041683,
    0.003600361989811063,
    -0.04147617146372795,
    -0.0005787248373962939,
    -0.0164140947163105,
    -0.007623877841979265,
    0.03430745005607605,
    -0.00700159277766943,
    -0.010098793543875217,
    0.02045361138880253,
    -0.013092871755361557,
    -0.01679813303053379,
    -0.01962864026427269,
    -0.01446545496582985,
    -0.007680772338062525,
    -0.021491939201951027,
    -0.005796138197183609,
    0.04397953301668167,
    0.004964054562151432,
    0.020538954064249992,
    -0.022473370656371117,
    0.01530465018004179,
    0.016599003225564957,
    -0.032486822456121445,
    -0.018305839970707893,
    -0.009807208552956581,
    0.025147417560219765,
    -0.021179018542170525,
    -0.014252100139856339,
    -0.02349747344851494,
    0.010184135288000107,
    0.026228414848446846,
    0.0020802090875804424,
    0.02740897797048092,
    0.010297924280166626,
    0.007282509934157133,
    -0.03297042474150658,
    -0.036241866648197174,
    0.011215349659323692,
    0.03538844734430313,
    0.037863362580537796,
    0.017111053690314293,
    -0.01897435262799263,
    0.0011707843514159322,
    -0.007616765797138214,
    0.017267514020204544,
    0.003509686328470707,
    0.0004929384449496865,
    -0.021491939201951027,
    0.0325152687728405,
    -0.01631452888250351,
    -0.007943909615278244,
    -0.005703684873878956,
    0.017253290861845016,
    0.016286082565784454,
    0.013163990341126919,
    0.02592971920967102,
    -0.003513242118060589,
    -0.00655354792252183,
    -0.006649557501077652,
    -0.030467063188552856,
    0.00878310576081276,
    -0.020524730905890465,
    0.0013441351475194097,
    -0.001290796441026032,
    -0.008420402184128761,
    0.02924382872879505,
    -0.023853065446019173,
    0.016001608222723007,
    -0.0019504183437675238,
    -0.0007542980602011085,
    -0.01519086118787527,
    0.010696186684072018,
    0.0004804927739314735,
    0.01157805323600769,
    -0.02484872005879879,
    0.032373033463954926,
    0.026000836864113808,
    -0.020794980227947235,
    -0.021662622690200806,
    0.04927073046565056,
    -0.033624716103076935,
    0.008683539927005768,
    0.006162397563457489,
    0.0002275784354424104,
    -0.0033763395622372627,
    -0.01620073989033699,
    -0.010916653089225292,
    0.0152193084359169,
    0.018732549622654915,
    -0.014806821942329407,
    0.01903124712407589,
    -0.020354047417640686,
    0.00264382129535079,
    0.029158487915992737,
    -0.0009538736776448786,
    -0.01696881651878357,
    -0.002638487610965967,
    -0.0018988576484844089,
    0.018632985651493073,
    -0.0060379402711987495,
    -0.023469027131795883,
    0.0028713997453451157,
    0.024834496900439262,
    0.0340229757130146,
    -0.016727015376091003,
    0.023227224126458168,
    0.04170374944806099,
    0.011514046229422092,
    -0.010881094262003899,
    -0.010689075104892254,
    0.039712436497211456,
    0.017864907160401344,
    -0.001444589695893228,
    0.010091681033372879,
    0.004114191513508558,
    4.161529432167299e-05,
    0.04301232472062111,
    -0.00856263842433691,
    0.05040862411260605,
    -0.002060651546344161,
    -0.016243411228060722,
    0.017210619524121284,
    -0.02403797209262848,
    -0.03180408850312233,
    -0.12038899213075638,
    -0.04560102894902229,
    0.008719098754227161,
    -0.004380885045975447,
    -0.02887401543557644,
    -0.0035434674937278032,
    -0.020154915750026703,
    0.005828141700476408,
    -0.02354014478623867,
    -0.02278629131615162,
    -0.02305654063820839,
    0.021463491022586823,
    -0.021022558212280273,
    0.01533309742808342,
    0.008797328919172287,
    -0.009800096973776817,
    -0.030922221019864082,
    -0.004188865888863802,
    -0.014316106215119362,
    0.016243411228060722,
    -0.0033781174570322037,
    -0.010433048941195011,
    -0.017537763342261314,
    0.0029087369330227375,
    -0.022985422983765602,
    -0.006094835232943296,
    -0.04122014343738556,
    0.01112289633601904,
    0.03060930036008358,
    0.007211391814053059,
    0.009167144075036049,
    -0.029186934232711792,
    -0.009764537215232849,
    0.008171488530933857,
    -0.008015028201043606,
    -0.01918770745396614,
    -0.01886056363582611,
    -0.028561094775795937,
    0.03877367824316025,
    -0.023341013118624687,
    0.008043475449085236,
    0.005842365324497223,
    0.00724339485168457,
    0.008548415265977383,
    -0.006247739307582378,
    0.02359703928232193,
    -0.021520385518670082,
    0.03334024176001549,
    0.007566983345896006,
    -0.02555990405380726,
    -0.04312611371278763,
    -0.022316910326480865,
    -0.0005876146606169641,
    0.018462300300598145,
    0.02294275164604187,
    -0.008918230421841145,
    -0.011919421143829823,
    0.007303845603018999,
    -0.015631794929504395,
    -0.015077071264386177,
    -0.003659034613519907,
    -0.012758616358041763,
    -0.011642059311270714,
    0.00853419117629528,
    -0.0006249517318792641,
    -0.0093236044049263,
    -0.016556331887841225,
    -0.00908180233091116,
    0.02038249373435974,
    -0.006603330839425325,
    -0.0216341745108366,
    0.02767922729253769,
    -0.0201264675706625,
    0.003447457682341337,
    -0.028660660609602928,
    -0.01849074847996235,
    -0.016712792217731476,
    0.005095623433589935,
    0.019329944625496864,
    -0.012381689622998238,
    -0.007986580953001976,
    -0.0075812069699168205,
    0.0022011101245880127,
    -0.04130548611283302,
    0.009885438717901707,
    0.02305654063820839,
    0.017466645687818527,
    0.00045115649118088186,
    0.03140582516789436,
    -0.04975433647632599,
    0.00820704735815525,
    0.0022864521015435457,
    0.014664585702121258,
    0.023568592965602875,
    0.002469581551849842,
    0.01837695948779583,
    -0.002147771418094635,
    -0.0004331546660978347,
    -0.018248945474624634,
    0.01625763438642025,
    -0.022430699318647385,
    0.016442542895674706,
    -0.07436125725507736,
    0.008640868589282036,
    0.020154915750026703,
    -0.015560675412416458,
    -0.004110635723918676,
    -0.03410831838846207,
    0.010504167526960373,
    0.0013681375421583652,
    0.0198419950902462,
    0.014081415720283985,
    -0.011058890260756016,
    -0.006034384481608868,
    -0.018618760630488396,
    -0.00994944479316473,
    0.009643636643886566,
    -0.0042493161745369434,
    0.029698986560106277,
    0.0005422767717391253,
    0.033141110092401505,
    -0.0036803700495511293,
    -0.0310360100120306,
    -0.0070655993185937405,
    0.024706484749913216,
    -9.139807661995292e-05,
    -0.03638410195708275,
    -0.0064041996374726295,
    0.016599003225564957,
    0.011378921568393707,
    0.002332678996026516,
    -0.0055650039575994015,
    0.021406596526503563,
    -0.007161608897149563,
    -0.017822235822677612,
    0.01536154467612505,
    0.003833274357020855,
    -0.008143041282892227,
    -0.007325180806219578,
    0.008007916621863842,
    0.010233918204903603,
    0.003673258237540722,
    -0.0048716007731854916,
    -0.026683572679758072,
    0.008271054364740849,
    0.014088528230786324,
    -0.01729596219956875,
    0.02299964614212513,
    0.02045361138880253,
    0.003484794870018959,
    0.010383266024291515,
    0.029215382412075996,
    0.0372944176197052,
    0.02538922056555748,
    -0.003162984736263752,
    -0.014806821942329407,
    0.0005969488993287086,
    -0.011442928574979305,
    0.02533232420682907,
    -0.022601384669542313,
    -0.015432663261890411,
    0.00338345137424767,
    0.018661431968212128,
    0.00540854362770915,
    0.0005342759541235864,
    -0.0016046058153733611,
    0.014934835024178028,
    -0.025090523064136505,
    -0.03555913269519806,
    -0.01057528518140316,
    -0.02608617953956127,
    -0.004935607314109802,
    -0.011371809989213943,
    -0.026271086186170578,
    0.012907964177429676,
    0.005479662213474512,
    0.006517988629639149,
    -0.020482059568166733,
    -0.01554645225405693,
    -0.025759033858776093,
    -0.008249718695878983,
    0.01359069999307394,
    0.03277129679918289,
    -0.0069233630783855915,
    -0.02317032963037491,
    -0.0017886243294924498,
    0.0016348310746252537,
    -0.009060466662049294,
    0.008548415265977383,
    0.0016099396161735058,
    0.0074105230160057545,
    0.010127240791916847,
    -0.005344537552446127,
    -0.00793679803609848,
    0.005689460784196854,
    0.0072256154380738735,
    0.023838842287659645,
    -0.008704875595867634,
    -0.004167530220001936,
    -0.02180485986173153,
    0.014863716438412666,
    0.014330330304801464,
    0.005269863177090883,
    0.006838020868599415,
    0.007090490777045488,
    0.008278165943920612,
    -0.019913112744688988,
    -0.011698953807353973,
    0.004508897662162781,
    -0.04443468898534775,
    -0.0028322848957031965,
    0.015589123591780663,
    -0.0008671983378008008,
    -0.007289621978998184,
    0.001968197990208864,
    0.008676428347826004,
    -0.01489216461777687,
    0.010731745511293411,
    0.0029478520154953003,
    -0.015432663261890411,
    -0.005319646093994379,
    0.022544488310813904,
    0.00571079645305872,
    0.0093236044049263,
    0.030922221019864082,
    -0.0037977152969688177,
    0.014778374694287777,
    0.011841190978884697,
    0.013661818578839302,
    -0.005732132121920586,
    0.0036910378839820623,
    -0.012808399274945259,
    -0.0060734995640814304,
    0.020240256562829018,
    -0.031889427453279495,
    -0.019315719604492188,
    -0.02093721553683281,
    -0.0036910378839820623,
    0.0345919243991375,
    0.0055650039575994015,
    -0.015646018087863922,
    0.08909695595502853,
    -0.013334673829376698,
    -0.025631021708250046,
    0.025346549227833748,
    0.0027327192947268486,
    0.023611262440681458,
    0.0018028479535132647,
    0.017551986500620842,
    0.005234303884208202,
    -0.02049628272652626,
    0.015162413939833641,
    0.02261560782790184,
    -0.008854223415255547,
    -0.007830120623111725,
    -0.0038154947105795145,
    0.018362734466791153,
    -0.0042350925505161285,
    0.040964119136333466,
    0.023682381957769394,
    0.014621914364397526,
    0.0011921199038624763,
    0.014330330304801464,
    0.020866097882390022,
    -0.008299501612782478,
    -0.045743267983198166,
    -0.0062335156835615635,
    0.05120515078306198,
    0.005661013536155224,
    0.023397907614707947,
    -0.0554722435772419,
    -0.006571327336132526,
    -0.009956556372344494,
    -0.028902461752295494,
    -0.02022603340446949,
    -0.018519194796681404,
    0.03464881703257561,
    0.0033301126677542925,
    0.010027674958109856,
    0.0049142721109092236,
    -0.01016279961913824,
    0.007737666834145784,
    -0.013932067900896072,
    -0.021179018542170525,
    -0.047108735889196396,
    0.021719517186284065,
    0.024763379245996475,
    -0.0030349718872457743,
    0.000386038824217394,
    -0.01593049056828022
  ]
}
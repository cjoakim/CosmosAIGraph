{
  "classifiers": [
    "development status :: 3 - alpha",
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "programming language :: python :: 3.6",
    "topic :: software development :: build tools"
  ],
  "description": "pretrained models for pytorch\n# pretrained models for pytorch (work in progress)\n\nthe goal of this repo is:\n\n- to help to reproduce research papers results (transfer learning setups for instance),\n- to access pretrained convnets with a unique interface/api inspired by torchvision.\n\n<a href=\"https://travis-ci.org/cadene/pretrained-models.pytorch\"><img src=\"https://api.travis-ci.org/cadene/pretrained-models.pytorch.svg?branch=master\"/></a>\n\nnews:\n- 27/10/2018: fix compatibility issues, add tests, add travis\n- 04/06/2018: [polynet](https://github.com/cuhk-mmlab/polynet) and [pnasnet-5-large](https://arxiv.org/abs/1712.00559) thanks to [alex parinov](https://github.com/creafz)\n- 16/04/2018: [se-resnet* and se-resnext*](https://github.com/hujie-frank/senet) thanks to [alex parinov](https://github.com/creafz)\n- 09/04/2018: [senet154](https://github.com/hujie-frank/senet) thanks to [alex parinov](https://github.com/creafz)\n- 22/03/2018: cafferesnet101 (good for localization with fasterrcnn)\n- 21/03/2018: nasnet mobile thanks to [veronika yurchuk](https://github.com/veronikayurchuk) and [anastasiia](https://github.com/dagnyt)\n- 25/01/2018: dualpathnetworks thanks to [ross wightman](https://github.com/rwightman/pytorch-dpn-pretrained), xception thanks to [t standley](https://github.com/tstandley/xception-pytorch), improved transformimage api\n- 13/01/2018: `pip install pretrainedmodels`, `pretrainedmodels.model_names`, `pretrainedmodels.pretrained_settings`\n- 12/01/2018: `python setup.py install`\n- 08/12/2017: update data url (/!\\ `git pull` is needed)\n- 30/11/2017: improve api (`model.features(input)`, `model.logits(features)`, `model.forward(input)`, `model.last_linear`)\n- 16/11/2017: nasnet-a-large pretrained model ported by t. durand and r. cadene\n- 22/07/2017: torchvision pretrained models\n- 22/07/2017: momentum in inceptionv4 and inceptionresnetv2 to 0.1\n- 17/07/2017: model.input_range attribut\n- 17/07/2017: bninception pretrained on imagenet\n\n## summary\n\n- [installation](https://github.com/cadene/pretrained-models.pytorch#installation)\n- [quick examples](https://github.com/cadene/pretrained-models.pytorch#quick-examples)\n- [few use cases](https://github.com/cadene/pretrained-models.pytorch#few-use-cases)\n    - [compute imagenet logits](https://github.com/cadene/pretrained-models.pytorch#compute-imagenet-logits)\n    - [compute imagenet validation metrics](https://github.com/cadene/pretrained-models.pytorch#compute-imagenet-validation-metrics)\n- [evaluation on imagenet](https://github.com/cadene/pretrained-models.pytorch#evaluation-on-imagenet)\n    - [accuracy on valset](https://github.com/cadene/pretrained-models.pytorch#accuracy-on-validation-set)\n    - [reproducing results](https://github.com/cadene/pretrained-models.pytorch#reproducing-results)\n- [documentation](https://github.com/cadene/pretrained-models.pytorch#documentation)\n    - [available models](https://github.com/cadene/pretrained-models.pytorch#available-models)\n        - [alexnet](https://github.com/cadene/pretrained-models.pytorch#torchvision)\n        - [bninception](https://github.com/cadene/pretrained-models.pytorch#bninception)\n        - [cafferesnet101](https://github.com/cadene/pretrained-models.pytorch#caffe-resnet)\n        - [densenet121](https://github.com/cadene/pretrained-models.pytorch#torchvision)\n        - [densenet161](https://github.com/cadene/pretrained-models.pytorch#torchvision)\n        - [densenet169](https://github.com/cadene/pretrained-models.pytorch#torchvision)\n        - [densenet201](https://github.com/cadene/pretrained-models.pytorch#torchvision)\n        - [densenet201](https://github.com/cadene/pretrained-models.pytorch#torchvision)\n        - [dualpathnet68](https://github.com/cadene/pretrained-models.pytorch#dualpathnetworks)\n        - [dualpathnet92](https://github.com/cadene/pretrained-models.pytorch#dualpathnetworks)\n        - [dualpathnet98](https://github.com/cadene/pretrained-models.pytorch#dualpathnetworks)\n        - [dualpathnet107](https://github.com/cadene/pretrained-models.pytorch#dualpathnetworks)\n        - [dualpathnet113](https://github.com/cadene/pretrained-models.pytorch#dualpathnetworks)\n        - [fbresnet152](https://github.com/cadene/pretrained-models.pytorch#facebook-resnet)\n        - [inceptionresnetv2](https://github.com/cadene/pretrained-models.pytorch#inception)\n        - [inceptionv3](https://github.com/cadene/pretrained-models.pytorch#inception)\n        - [inceptionv4](https://github.com/cadene/pretrained-models.pytorch#inception)\n        - [nasnet-a-large](https://github.com/cadene/pretrained-models.pytorch#nasnet)\n        - [nasnet-a-mobile](https://github.com/cadene/pretrained-models.pytorch#nasnet)\n        - [pnasnet-5-large](https://github.com/cadene/pretrained-models.pytorch#pnasnet)\n        - [polynet](https://github.com/cadene/pretrained-models.pytorch#polynet)\n        - [resnext101_32x4d](https://github.com/cadene/pretrained-models.pytorch#resnext)\n        - [resnext101_64x4d](https://github.com/cadene/pretrained-models.pytorch#resnext)\n        - [resnet101](https://github.com/cadene/pretrained-models.pytorch#torchvision)\n        - [resnet152](https://github.com/cadene/pretrained-models.pytorch#torchvision)\n        - [resnet18](https://github.com/cadene/pretrained-models.pytorch#torchvision)\n        - [resnet34](https://github.com/cadene/pretrained-models.pytorch#torchvision)\n        - [resnet50](https://github.com/cadene/pretrained-models.pytorch#torchvision)\n        - [senet154](https://github.com/cadene/pretrained-models.pytorch#senet)\n        - [se-resnet50](https://github.com/cadene/pretrained-models.pytorch#senet)\n        - [se-resnet101](https://github.com/cadene/pretrained-models.pytorch#senet)\n        - [se-resnet152](https://github.com/cadene/pretrained-models.pytorch#senet)\n        - [se-resnext50_32x4d](https://github.com/cadene/pretrained-models.pytorch#senet)\n        - [se-resnext101_32x4d](https://github.com/cadene/pretrained-models.pytorch#senet)\n        - [squeezenet1_0](https://github.com/cadene/pretrained-models.pytorch#torchvision)\n        - [squeezenet1_1](https://github.com/cadene/pretrained-models.pytorch#torchvision)\n        - [vgg11](https://github.com/cadene/pretrained-models.pytorch#torchvision)\n        - [vgg13](https://github.com/cadene/pretrained-models.pytorch#torchvision)\n        - [vgg16](https://github.com/cadene/pretrained-models.pytorch#torchvision)\n        - [vgg19](https://github.com/cadene/pretrained-models.pytorch#torchvision)\n        - [vgg11_bn](https://github.com/cadene/pretrained-models.pytorch#torchvision)\n        - [vgg13_bn](https://github.com/cadene/pretrained-models.pytorch#torchvision)\n        - [vgg16_bn](https://github.com/cadene/pretrained-models.pytorch#torchvision)\n        - [vgg19_bn](https://github.com/cadene/pretrained-models.pytorch#torchvision)\n        - [xception](https://github.com/cadene/pretrained-models.pytorch#xception)\n    - [model api](https://github.com/cadene/pretrained-models.pytorch#model-api)\n        - [model.input_size](https://github.com/cadene/pretrained-models.pytorch#modelinput_size)\n        - [model.input_space](https://github.com/cadene/pretrained-models.pytorch#modelinput_space)\n        - [model.input_range](https://github.com/cadene/pretrained-models.pytorch#modelinput_range)\n        - [model.mean](https://github.com/cadene/pretrained-models.pytorch#modelmean)\n        - [model.std](https://github.com/cadene/pretrained-models.pytorch#modelstd)\n        - [model.features](https://github.com/cadene/pretrained-models.pytorch#modelfeatures)\n        - [model.logits](https://github.com/cadene/pretrained-models.pytorch#modellogits)\n        - [model.forward](https://github.com/cadene/pretrained-models.pytorch#modelforward)\n- [reproducing porting](https://github.com/cadene/pretrained-models.pytorch#reproducing)\n    - [resnet*](https://github.com/cadene/pretrained-models.pytorch#hand-porting-of-resnet152)\n    - [resnext*](https://github.com/cadene/pretrained-models.pytorch#automatic-porting-of-resnext)\n    - [inception*](https://github.com/cadene/pretrained-models.pytorch#hand-porting-of-inceptionv4-and-inceptionresnetv2)\n\n## installation\n\n1. [python3 with anaconda](https://www.continuum.io/downloads)\n2. [pytorch with/out cuda](http://pytorch.org)\n\n### install from pip\n\n3. `pip install pretrainedmodels`\n\n### install from repo\n\n3. `git clone https://github.com/cadene/pretrained-models.pytorch.git`\n4. `cd pretrained-models.pytorch`\n5. `python setup.py install`\n\n\n## quick examples\n\n- to import `pretrainedmodels`:\n\n```python\nimport pretrainedmodels\n```\n\n- to print the available pretrained models:\n\n```python\nprint(pretrainedmodels.model_names)\n> ['fbresnet152', 'bninception', 'resnext101_32x4d', 'resnext101_64x4d', 'inceptionv4', 'inceptionresnetv2', 'alexnet', 'densenet121', 'densenet169', 'densenet201', 'densenet161', 'resnet18', 'resnet34', 'resnet50', 'resnet101', 'resnet152', 'inceptionv3', 'squeezenet1_0', 'squeezenet1_1', 'vgg11', 'vgg11_bn', 'vgg13', 'vgg13_bn', 'vgg16', 'vgg16_bn', 'vgg19_bn', 'vgg19', 'nasnetalarge', 'nasnetamobile', 'cafferesnet101', 'senet154',  'se_resnet50', 'se_resnet101', 'se_resnet152', 'se_resnext50_32x4d', 'se_resnext101_32x4d', 'cafferesnet101', 'polynet', 'pnasnet5large']\n```\n\n- to print the available pretrained settings for a chosen model:\n\n```python\nprint(pretrainedmodels.pretrained_settings['nasnetalarge'])\n> {'imagenet': {'url': 'http://data.lip6.fr/cadene/pretrainedmodels/nasnetalarge-a1897284.pth', 'input_space': 'rgb', 'input_size': [3, 331, 331], 'input_range': [0, 1], 'mean': [0.5, 0.5, 0.5], 'std': [0.5, 0.5, 0.5], 'num_classes': 1000}, 'imagenet+background': {'url': 'http://data.lip6.fr/cadene/pretrainedmodels/nasnetalarge-a1897284.pth', 'input_space': 'rgb', 'input_size': [3, 331, 331], 'input_range': [0, 1], 'mean': [0.5, 0.5, 0.5], 'std': [0.5, 0.5, 0.5], 'num_classes': 1001}}\n```\n\n- to load a pretrained models from imagenet:\n\n```python\nmodel_name = 'nasnetalarge' # could be fbresnet152 or inceptionresnetv2\nmodel = pretrainedmodels.__dict__[model_name](num_classes=1000, pretrained='imagenet')\nmodel.eval()\n```\n\n**note**: by default, models will be downloaded to your `$home/.torch` folder. you can modify this behavior using the `$torch_model_zoo` variable as follow: `export torch_model_zoo=\"/local/pretrainedmodels`\n\n- to load an image and do a complete forward pass:\n\n```python\nimport torch\nimport pretrainedmodels.utils as utils\n\nload_img = utils.loadimage()\n\n# transformations depending on the model\n#\u00a0rescale, center crop, normalize, and others (ex: tobgr, torange255)\ntf_img = utils.transformimage(model) \n\npath_img = 'data/cat.jpg'\n\ninput_img = load_img(path_img)\ninput_tensor = tf_img(input_img)         # 3x400x225 -> 3x299x299 size may differ\ninput_tensor = input_tensor.unsqueeze(0) # 3x299x299 -> 1x3x299x299\ninput = torch.autograd.variable(input_tensor,\n    requires_grad=false)\n\noutput_logits = model(input) # 1x1000\n```\n\n- to extract features (beware this api is not available for all networks):\n\n```python\noutput_features = model.features(input) # 1x14x14x2048 size may differ\noutput_logits = model.logits(output_features) # 1x1000\n```\n\n## few use cases\n\n### compute imagenet logits\n\n- see [examples/imagenet_logits.py](https://github.com/cadene/pretrained-models.pytorch/blob/master/examples/imagenet_logits.py) to compute logits of classes appearance over a single image with a pretrained model on imagenet.\n\n```\n$ python examples/imagenet_logits.py -h\n> nasnetalarge, resnet152, inceptionresnetv2, inceptionv4, ...\n```\n\n```\n$ python examples/imagenet_logits.py -a nasnetalarge --path_img data/cat.png\n> 'nasnetalarge': data/cat.png' is a 'tiger cat' \n```\n\n### compute imagenet evaluation metrics\n\n- see [examples/imagenet_eval.py](https://github.com/cadene/pretrained-models.pytorch/blob/master/examples/imagenet_eval.py) to evaluate pretrained models on imagenet valset. \n\n```\n$ python examples/imagenet_eval.py /local/common-data/imagenet_2012/images -a nasnetalarge -b 20 -e\n> * acc@1 92.693, acc@5 96.13\n```\n\n\n## evaluation on imagenet\n\n### accuracy on validation set (single model)\n\nresults were obtained using (center cropped) images of the same size than during the training process.\n\nmodel | version | acc@1 | acc@5\n--- | --- | --- | ---\npnasnet-5-large | [tensorflow](https://github.com/tensorflow/models/tree/master/research/slim) | 82.858 | 96.182\n[pnasnet-5-large](https://github.com/cadene/pretrained-models.pytorch#pnasnet) | our porting | 82.736 | 95.992\nnasnet-a-large | [tensorflow](https://github.com/tensorflow/models/tree/master/research/slim) | 82.693 | 96.163\n[nasnet-a-large](https://github.com/cadene/pretrained-models.pytorch#nasnet) | our porting | 82.566 | 96.086\nsenet154 | [caffe](https://github.com/hujie-frank/senet) | 81.32 | 95.53\n[senet154](https://github.com/cadene/pretrained-models.pytorch#senet) | our porting | 81.304 | 95.498\npolynet | [caffe](https://github.com/cuhk-mmlab/polynet) | 81.29 | 95.75\n[polynet](https://github.com/cadene/pretrained-models.pytorch#polynet) | our porting | 81.002 | 95.624\ninceptionresnetv2 | [tensorflow](https://github.com/tensorflow/models/tree/master/slim) | 80.4 | 95.3\ninceptionv4 | [tensorflow](https://github.com/tensorflow/models/tree/master/slim) | 80.2 | 95.3\n[se-resnext101_32x4d](https://github.com/cadene/pretrained-models.pytorch#senet) | our porting | 80.236 | 95.028\nse-resnext101_32x4d | [caffe](https://github.com/hujie-frank/senet) | 80.19 | 95.04\n[inceptionresnetv2](https://github.com/cadene/pretrained-models.pytorch#inception) | our porting | 80.170 | 95.234\n[inceptionv4](https://github.com/cadene/pretrained-models.pytorch#inception) | our porting | 80.062 | 94.926\n[dualpathnet107_5k](https://github.com/cadene/pretrained-models.pytorch#dualpathnetworks) | our porting | 79.746 | 94.684\nresnext101_64x4d | [torch7](https://github.com/facebookresearch/resnext) | 79.6 | 94.7\n[dualpathnet131](https://github.com/cadene/pretrained-models.pytorch#dualpathnetworks) | our porting | 79.432 | 94.574\n[dualpathnet92_5k](https://github.com/cadene/pretrained-models.pytorch#dualpathnetworks) | our porting | 79.400 | 94.620\n[dualpathnet98](https://github.com/cadene/pretrained-models.pytorch#dualpathnetworks) | our porting | 79.224 | 94.488\n[se-resnext50_32x4d](https://github.com/cadene/pretrained-models.pytorch#senet) | our porting | 79.076 | 94.434\nse-resnext50_32x4d | [caffe](https://github.com/hujie-frank/senet) | 79.03 | 94.46\n[xception](https://github.com/cadene/pretrained-models.pytorch#xception) | [keras](https://github.com/keras-team/keras/blob/master/keras/applications/xception.py) | 79.000 | 94.500\n[resnext101_64x4d](https://github.com/cadene/pretrained-models.pytorch#resnext) | our porting | 78.956 | 94.252\n[xception](https://github.com/cadene/pretrained-models.pytorch#xception) | our porting | 78.888 | 94.292\nresnext101_32x4d | [torch7](https://github.com/facebookresearch/resnext) | 78.8 | 94.4\nse-resnet152 | [caffe](https://github.com/hujie-frank/senet) | 78.66 | 94.46\n[se-resnet152](https://github.com/cadene/pretrained-models.pytorch#senet) | our porting | 78.658 | 94.374\nresnet152 | [pytorch](https://github.com/pytorch/vision#models) | 78.428 | 94.110\n[se-resnet101](https://github.com/cadene/pretrained-models.pytorch#senet) | our porting | 78.396 | 94.258\nse-resnet101 | [caffe](https://github.com/hujie-frank/senet) | 78.25 | 94.28\n[resnext101_32x4d](https://github.com/cadene/pretrained-models.pytorch#resnext) | our porting | 78.188 | 93.886\nfbresnet152 | [torch7](https://github.com/facebook/fb.resnet.torch) | 77.84 | 93.84\nse-resnet50 | [caffe](https://github.com/hujie-frank/senet) | 77.63 | 93.64\n[se-resnet50](https://github.com/cadene/pretrained-models.pytorch#senet) | our porting | 77.636 | 93.752\n[densenet161](https://github.com/cadene/pretrained-models.pytorch#torchvision) | [pytorch](https://github.com/pytorch/vision#models) | 77.560 | 93.798\n[resnet101](https://github.com/cadene/pretrained-models.pytorch#torchvision) | [pytorch](https://github.com/pytorch/vision#models) | 77.438 | 93.672\n[fbresnet152](https://github.com/cadene/pretrained-models.pytorch#facebook-resnet) | our porting | 77.386 | 93.594\n[inceptionv3](https://github.com/cadene/pretrained-models.pytorch#inception) | [pytorch](https://github.com/pytorch/vision#models) | 77.294 | 93.454\n[densenet201](https://github.com/cadene/pretrained-models.pytorch#torchvision) | [pytorch](https://github.com/pytorch/vision#models) | 77.152 | 93.548\n[dualpathnet68b_5k](https://github.com/cadene/pretrained-models.pytorch#dualpathnetworks) | our porting | 77.034 | 93.590\n[cafferesnet101](https://github.com/cadene/pretrained-models.pytorch#caffe-resnet) | [caffe](https://github.com/kaiminghe/deep-residual-networks) | 76.400 | 92.900\n[cafferesnet101](https://github.com/cadene/pretrained-models.pytorch#caffe-resnet) | our porting | 76.200 | 92.766\n[densenet169](https://github.com/cadene/pretrained-models.pytorch#torchvision) | [pytorch](https://github.com/pytorch/vision#models) | 76.026 | 92.992\n[resnet50](https://github.com/cadene/pretrained-models.pytorch#torchvision) | [pytorch](https://github.com/pytorch/vision#models) | 76.002 | 92.980\n[dualpathnet68](https://github.com/cadene/pretrained-models.pytorch#dualpathnetworks) | our porting | 75.868 | 92.774\n[densenet121](https://github.com/cadene/pretrained-models.pytorch#torchvision) | [pytorch](https://github.com/pytorch/vision#models) | 74.646 | 92.136\n[vgg19_bn](https://github.com/cadene/pretrained-models.pytorch#torchvision) | [pytorch](https://github.com/pytorch/vision#models) | 74.266 | 92.066\nnasnet-a-mobile | [tensorflow](https://github.com/tensorflow/models/tree/master/research/slim) | 74.0 | 91.6\n[nasnet-a-mobile](https://github.com/veronikayurchuk/pretrained-models.pytorch/blob/master/pretrainedmodels/models/nasnet_mobile.py) | our porting | 74.080 | 91.740\n[resnet34](https://github.com/cadene/pretrained-models.pytorch#torchvision) | [pytorch](https://github.com/pytorch/vision#models) | 73.554 | 91.456\n[bninception](https://github.com/cadene/pretrained-models.pytorch#bninception) | our porting | 73.524 | 91.562\n[vgg16_bn](https://github.com/cadene/pretrained-models.pytorch#torchvision) | [pytorch](https://github.com/pytorch/vision#models) | 73.518 | 91.608\n[vgg19](https://github.com/cadene/pretrained-models.pytorch#torchvision) | [pytorch](https://github.com/pytorch/vision#models) | 72.080 | 90.822\n[vgg16](https://github.com/cadene/pretrained-models.pytorch#torchvision) | [pytorch](https://github.com/pytorch/vision#models) | 71.636 | 90.354\n[vgg13_bn](https://github.com/cadene/pretrained-models.pytorch#torchvision) | [pytorch](https://github.com/pytorch/vision#models) | 71.508 | 90.494\n[vgg11_bn](https://github.com/cadene/pretrained-models.pytorch#torchvision) | [pytorch](https://github.com/pytorch/vision#models) | 70.452 | 89.818\n[resnet18](https://github.com/cadene/pretrained-models.pytorch#torchvision) | [pytorch](https://github.com/pytorch/vision#models) | 70.142 | 89.274\n[vgg13](https://github.com/cadene/pretrained-models.pytorch#torchvision) | [pytorch](https://github.com/pytorch/vision#models) | 69.662 | 89.264\n[vgg11](https://github.com/cadene/pretrained-models.pytorch#torchvision) | [pytorch](https://github.com/pytorch/vision#models) | 68.970 | 88.746\n[squeezenet1_1](https://github.com/cadene/pretrained-models.pytorch#torchvision) | [pytorch](https://github.com/pytorch/vision#models) | 58.250 | 80.800\n[squeezenet1_0](https://github.com/cadene/pretrained-models.pytorch#torchvision) | [pytorch](https://github.com/pytorch/vision#models) | 58.108 | 80.428\n[alexnet](https://github.com/cadene/pretrained-models.pytorch#torchvision) | [pytorch](https://github.com/pytorch/vision#models) | 56.432 | 79.194\n\nnotes:\n- the pytorch version of resnet152 is not a porting of the torch7 but has been retrained by facebook.\n- for the polynet evaluation each image was resized to 378x378 without preserving the aspect ratio and then the central 331\u00d7331 patch from the resulting image was used.\n\nbeware, the accuracy reported here is not always representative of the transferable capacity of the network on other tasks and datasets. you must try them all! :p\n    \n### reproducing results\n\nplease see [compute imagenet validation metrics](https://github.com/cadene/pretrained-models.pytorch#compute-imagenet-validation-metrics)\n\n\n## documentation\n\n### available models\n\n#### nasnet*\n\nsource: [tensorflow slim repo](https://github.com/tensorflow/models/tree/master/research/slim)\n\n- `nasnetalarge(num_classes=1000, pretrained='imagenet')`\n- `nasnetalarge(num_classes=1001, pretrained='imagenet+background')`\n- `nasnetamobile(num_classes=1000, pretrained='imagenet')`\n\n#### facebook resnet*\n\nsource: [torch7 repo of facebook](https://github.com/facebook/fb.resnet.torch)\n\nthere are a bit different from the resnet* of torchvision. resnet152 is currently the only one available.\n\n- `fbresnet152(num_classes=1000, pretrained='imagenet')`\n\n#### caffe resnet*\n\nsource: [caffe repo of kaiminghe](https://github.com/kaiminghe/deep-residual-networks)\n\n- `cafferesnet101(num_classes=1000, pretrained='imagenet')`\n\n\n#### inception*\n\nsource: [tensorflow slim repo](https://github.com/tensorflow/models/tree/master/slim) and [pytorch/vision repo](https://github.com/pytorch/vision/tree/master/torchvision) for `inceptionv3`\n\n- `inceptionresnetv2(num_classes=1000, pretrained='imagenet')`\n- `inceptionresnetv2(num_classes=1001, pretrained='imagenet+background')`\n- `inceptionv4(num_classes=1000, pretrained='imagenet')`\n- `inceptionv4(num_classes=1001, pretrained='imagenet+background')`\n- `inceptionv3(num_classes=1000, pretrained='imagenet')`\n\n#### bninception\n\nsource: [trained with caffe](https://github.com/cadene/tensorflow-model-zoo.torch/pull/2) by [xiong yuanjun](http://yjxiong.me)\n\n- `bninception(num_classes=1000, pretrained='imagenet')`\n\n#### resnext*\n\nsource: [resnext repo of facebook](https://github.com/facebookresearch/resnext)\n\n- `resnext101_32x4d(num_classes=1000, pretrained='imagenet')`\n- `resnext101_62x4d(num_classes=1000, pretrained='imagenet')`\n\n#### dualpathnetworks\n\nsource: [mxnet repo of chen yunpeng](https://github.com/cypw/dpns)\n\nthe porting has been made possible by [ross wightman](http://rwightman.com) in his [pytorch repo](https://github.com/rwightman/pytorch-dpn-pretrained).\n\nas you can see [here](https://github.com/rwightman/pytorch-dpn-pretrained) dualpathnetworks allows you to try different scales. the default one in this repo is 0.875 meaning that the original input size is 256 before croping to 224.\n\n- `dpn68(num_classes=1000, pretrained='imagenet')`\n- `dpn98(num_classes=1000, pretrained='imagenet')`\n- `dpn131(num_classes=1000, pretrained='imagenet')`\n- `dpn68b(num_classes=1000, pretrained='imagenet+5k')`\n- `dpn92(num_classes=1000, pretrained='imagenet+5k')`\n- `dpn107(num_classes=1000, pretrained='imagenet+5k')`\n\n`'imagenet+5k'` means that the network has been pretrained on imagenet5k before being finetuned on imagenet1k.\n\n#### xception\n\nsource: [keras repo](https://github.com/keras-team/keras/blob/master/keras/applications/xception.py)\n\nthe porting has been made possible by [t standley](https://github.com/tstandley/xception-pytorch).\n\n- `xception(num_classes=1000, pretrained='imagenet')`\n\n\n#### senet*\n\nsource: [caffe repo of jie hu](https://github.com/hujie-frank/senet)\n\n- `senet154(num_classes=1000, pretrained='imagenet')`\n- `se_resnet50(num_classes=1000, pretrained='imagenet')`\n- `se_resnet101(num_classes=1000, pretrained='imagenet')`\n- `se_resnet152(num_classes=1000, pretrained='imagenet')`\n- `se_resnext50_32x4d(num_classes=1000, pretrained='imagenet')`\n- `se_resnext101_32x4d(num_classes=1000, pretrained='imagenet')`\n\n#### pnasnet*\n\nsource: [tensorflow slim repo](https://github.com/tensorflow/models/tree/master/research/slim)\n\n- `pnasnet5large(num_classes=1000, pretrained='imagenet')`\n- `pnasnet5large(num_classes=1001, pretrained='imagenet+background')`\n\n#### polynet\n\nsource: [caffe repo of the cuhk multimedia lab](https://github.com/cuhk-mmlab/polynet)\n\n- `polynet(num_classes=1000, pretrained='imagenet')`\n\n#### torchvision\n\nsource: [pytorch/vision repo](https://github.com/pytorch/vision/tree/master/torchvision)\n\n(`inceptionv3` included in [inception*](https://github.com/cadene/pretrained-models.pytorch#inception))\n\n- `resnet18(num_classes=1000, pretrained='imagenet')`\n- `resnet34(num_classes=1000, pretrained='imagenet')`\n- `resnet50(num_classes=1000, pretrained='imagenet')`\n- `resnet101(num_classes=1000, pretrained='imagenet')`\n- `resnet152(num_classes=1000, pretrained='imagenet')`\n- `densenet121(num_classes=1000, pretrained='imagenet')`\n- `densenet161(num_classes=1000, pretrained='imagenet')`\n- `densenet169(num_classes=1000, pretrained='imagenet')`\n- `densenet201(num_classes=1000, pretrained='imagenet')`\n- `squeezenet1_0(num_classes=1000, pretrained='imagenet')`\n- `squeezenet1_1(num_classes=1000, pretrained='imagenet')`\n- `alexnet(num_classes=1000, pretrained='imagenet')`\n- `vgg11(num_classes=1000, pretrained='imagenet')`\n- `vgg13(num_classes=1000, pretrained='imagenet')`\n- `vgg16(num_classes=1000, pretrained='imagenet')`\n- `vgg19(num_classes=1000, pretrained='imagenet')`\n- `vgg11_bn(num_classes=1000, pretrained='imagenet')`\n- `vgg13_bn(num_classes=1000, pretrained='imagenet')`\n- `vgg16_bn(num_classes=1000, pretrained='imagenet')`\n- `vgg19_bn(num_classes=1000, pretrained='imagenet')`\n\n\n### model api\n\nonce a pretrained model has been loaded, you can use it that way.\n\n**important note**: all image must be loaded using `pil` which scales the pixel values between 0 and 1.\n\n#### `model.input_size`\n\nattribut of type `list` composed of 3 numbers:\n\n- number of color channels,\n- height of the input image,\n- width of the input image.\n\nexample:\n\n- `[3, 299, 299]` for inception* networks,\n- `[3, 224, 224]` for resnet* networks.\n\n\n#### `model.input_space`\n\nattribut of type `str` representating the color space of the image. can be `rgb` or `bgr`.\n\n\n#### `model.input_range`\n\nattribut of type `list` composed of 2 numbers:\n\n- min pixel value,\n- max pixel value.\n\nexample:\n\n- `[0, 1]` for resnet* and inception* networks,\n- `[0, 255]` for bninception network.\n\n\n#### `model.mean`\n\nattribut of type `list` composed of 3 numbers which are used to normalize the input image (substract \"color-channel-wise\").\n\nexample:\n\n- `[0.5, 0.5, 0.5]` for inception* networks,\n- `[0.485, 0.456, 0.406]` for resnet* networks.\n\n\n#### `model.std`\n\nattribut of type `list` composed of 3 numbers which are used to normalize the input image (divide \"color-channel-wise\").\n\nexample:\n\n- `[0.5, 0.5, 0.5]` for inception* networks,\n- `[0.229, 0.224, 0.225]` for resnet* networks.\n\n\n#### `model.features`\n\n/!\\ work in progress (may not be available)\n\nmethod which is used to extract the features from the image.\n\nexample when the model is loaded using `fbresnet152`:\n\n```python\nprint(input_224.size())            # (1,3,224,224)\noutput = model.features(input_224) \nprint(output.size())               # (1,2048,1,1)\n\n# print(input_448.size())          # (1,3,448,448)\noutput = model.features(input_448)\n# print(output.size())             # (1,2048,7,7)\n```\n\n#### `model.logits`\n\n/!\\ work in progress (may not be available)\n\nmethod which is used to classify the features from the image.\n\nexample when the model is loaded using `fbresnet152`:\n\n```python\noutput = model.features(input_224) \nprint(output.size())               # (1,2048, 1, 1)\noutput = model.logits(output)\nprint(output.size())               # (1,1000)\n```\n\n#### `model.forward`\n\nmethod used to call `model.features` and `model.logits`. it can be overwritten as desired.\n\n**note**: a good practice is to use `model.__call__` as your function of choice to forward an input to your model. see the example bellow.\n\n```python\n# without model.__call__\noutput = model.forward(input_224)\nprint(output.size())      # (1,1000)\n\n# with model.__call__\noutput = model(input_224)\nprint(output.size())      # (1,1000)\n```\n\n#### `model.last_linear`\n\nattribut of type `nn.linear`. this module is the last one to be called during the forward pass.\n\n- can be replaced by an adapted `nn.linear` for fine tuning.\n- can be replaced by `pretrained.utils.identity` for features extraction. \n\nexample when the model is loaded using `fbresnet152`:\n\n```python\nprint(input_224.size())            # (1,3,224,224)\noutput = model.features(input_224) \nprint(output.size())               # (1,2048,1,1)\noutput = model.logits(output)\nprint(output.size())               # (1,1000)\n\n# fine tuning\ndim_feats = model.last_linear.in_features # =2048\nnb_classes = 4\nmodel.last_linear = nn.linear(dim_feats, nb_classes)\noutput = model(input_224)\nprint(output.size())               # (1,4)\n\n# features extraction\nmodel.last_linear = pretrained.utils.identity()\noutput = model(input_224)\nprint(output.size())               # (1,2048)\n```\n\n## reproducing\n\n### hand porting of resnet152\n\n```\nth pretrainedmodels/fbresnet/resnet152_dump.lua\npython pretrainedmodels/fbresnet/resnet152_load.py\n```\n\n### automatic porting of resnext\n\nhttps://github.com/clcarwin/convert_torch_to_pytorch\n\n### hand porting of nasnet, inceptionv4 and inceptionresnetv2\n\nhttps://github.com/cadene/tensorflow-model-zoo.torch\n\n\n## acknowledgement\n\nthanks to the deep learning community and especially to the contributers of the pytorch ecosystem.",
  "docs_url": null,
  "keywords": "pytorch pretrained models deep learning",
  "license": "",
  "name": "pretrainedmodels",
  "package_url": "https://pypi.org/project/pretrainedmodels/",
  "project_url": "https://pypi.org/project/pretrainedmodels/",
  "project_urls": {
    "Homepage": "https://github.com/cadene/pretrained-models.pytorch"
  },
  "release_url": "https://pypi.org/project/pretrainedmodels/0.7.4/",
  "requires_dist": [],
  "requires_python": "",
  "summary": "pretrained models for pytorch",
  "version": "0.7.4",
  "releases": [],
  "developers": [
    "remi.cadene@icloud.com",
    "remi_cadene"
  ],
  "kwds": "convert_torch_to_pytorch pnasnet inceptionresnetv2 pytorch pnasnet5large",
  "license_kwds": "",
  "libtype": "pypi",
  "id": "pypi_pretrainedmodels",
  "homepage": "https://github.com/cadene/pretrained-models.pytorch",
  "release_count": 16,
  "dependency_ids": [],
  "documentation_summary": "The GitHub repository \"Cadene/pretrained-models.pytorch\" offers a collection of pretrained Convolutional Neural Networks (ConvNets) for PyTorch, including popular models like NASNet, ResNeXt, ResNet, InceptionV4, InceptionResnetV2, Xception, DPN, and more. It aims to facilitate the reproduction of research paper results and provide easy access to pretrained ConvNets with a unified interface/API inspired by torchvision. The repository includes updates and additions over time, such as compatibility fixes, tests, and new models. It also provides installation instructions, quick examples, and use cases like computing ImageNet logits and validation metrics. The models are available under the BSD-3-Clause license, and the repository has garnered significant attention with 8.9k stars and 1.8k forks.",
  "embedding": [
    -0.01911025308072567,
    0.010959883220493793,
    0.005751156713813543,
    -0.028359392657876015,
    0.008595441468060017,
    0.0018950304947793484,
    0.014186650514602661,
    0.005240020342171192,
    0.001389109529554844,
    -0.008011285215616226,
    0.038526490330696106,
    0.028568020090460777,
    -0.023950403556227684,
    0.016690177842974663,
    0.0006971625844016671,
    -0.0018585207872092724,
    0.018762540072202682,
    -0.037080008536577225,
    -0.011064196936786175,
    -0.020473284646868706,
    0.0029329508543014526,
    -0.004767131991684437,
    -0.03694092482328415,
    -0.023783503100275993,
    0.018011482432484627,
    0.014895983040332794,
    0.0301814042031765,
    -0.025549879297614098,
    0.0075801219791173935,
    -0.012976612895727158,
    0.014492637477815151,
    0.018706906586885452,
    -0.011829162947833538,
    -0.051433563232421875,
    -0.004527210723608732,
    0.011126784607768059,
    0.0041377730667591095,
    -0.0194440558552742,
    0.0036614076234400272,
    0.017010072246193886,
    0.015800034627318382,
    0.011272823438048363,
    0.005055733025074005,
    -0.011245006695389748,
    -0.01016709953546524,
    0.010626079514622688,
    0.010299229994416237,
    -0.010897294618189335,
    -0.018234018236398697,
    0.011961293406784534,
    0.019624866545200348,
    0.024840546771883965,
    -0.014158833771944046,
    -0.008748434484004974,
    -0.03385324403643608,
    0.01575830951333046,
    -0.01822010986506939,
    0.04854059964418411,
    0.004221223760396242,
    -0.012030836194753647,
    0.017677679657936096,
    0.007809611968696117,
    -0.04559199884533882,
    -0.0013091358123347163,
    -0.003783106803894043,
    -0.010751255787909031,
    0.004628046881407499,
    0.021766772493720055,
    0.022225752472877502,
    -0.007169821765273809,
    0.03507718816399574,
    0.03374197334051132,
    0.0083798598498106,
    -0.01394325215369463,
    0.02012557163834572,
    -0.014951616525650024,
    -0.012274234555661678,
    0.005048778373748064,
    -0.03090464510023594,
    -0.0014108414761722088,
    0.004812334198504686,
    -0.023825228214263916,
    -0.004635001067072153,
    0.0212938841432333,
    0.005726817063987255,
    -0.015048976056277752,
    -0.009902838617563248,
    -0.005556438118219376,
    -0.017023980617523193,
    -0.019763952121138573,
    0.03716346248984337,
    0.009123963303864002,
    0.007781795226037502,
    0.002164507284760475,
    -0.010021060705184937,
    0.022782091051340103,
    -0.0333247184753418,
    0.020362015813589096,
    0.004697589203715324,
    -0.018192293122410774,
    -0.008991832844913006,
    0.024576285853981972,
    -0.017288241535425186,
    -0.014979434199631214,
    -0.01816447637975216,
    -0.01592520996928215,
    -0.016161654144525528,
    0.022058850154280663,
    0.0030755128245800734,
    0.021140890195965767,
    -0.0007979990914463997,
    0.03760853409767151,
    -0.015341054648160934,
    -0.042226146906614304,
    -0.010813843458890915,
    -0.006738658994436264,
    0.022267477586865425,
    -0.0014317042659968138,
    0.01727433316409588,
    -0.015327146276831627,
    0.013623356819152832,
    0.032879650592803955,
    0.027079813182353973,
    -0.00815732404589653,
    0.006220567971467972,
    0.010702576488256454,
    -0.01137018296867609,
    0.0038630806375294924,
    0.017246516421437263,
    -0.026175761595368385,
    0.0025730689521878958,
    0.0006423979648388922,
    0.010327046737074852,
    -0.013087880797684193,
    0.002581761684268713,
    0.015966936945915222,
    0.006644776556640863,
    -0.011690078303217888,
    -0.01748296059668064,
    0.004683680832386017,
    0.00547646451741457,
    0.01938842236995697,
    0.00028816633857786655,
    -0.008324225433170795,
    -0.007496671285480261,
    0.031655702739953995,
    -0.021335609257221222,
    0.0013021815102547407,
    0.014096245169639587,
    0.011460588313639164,
    0.019903035834431648,
    -0.03460429981350899,
    -0.015132427215576172,
    -0.0022775137331336737,
    0.003040741663426161,
    -0.0017802854999899864,
    0.0013882402563467622,
    0.007559259422123432,
    -0.045675452798604965,
    0.006484829355031252,
    -0.004488962236791849,
    0.02625921182334423,
    -0.03157225251197815,
    -0.009033557958900928,
    -0.0012048222124576569,
    0.0259254090487957,
    0.0431441068649292,
    0.0017620306462049484,
    -0.01988912746310234,
    -0.0004157332004979253,
    0.0006376169039867818,
    0.0038839431945234537,
    -0.045842353254556656,
    0.0038769890088588,
    0.0025504676159471273,
    0.007587076164782047,
    0.021196525543928146,
    -0.007482762914150953,
    -0.021196525543928146,
    -0.0072810896672308445,
    0.004471576772630215,
    -0.016731902956962585,
    -0.009228277020156384,
    0.03738599643111229,
    -7.030302367638797e-05,
    -0.012837528251111507,
    0.020807087421417236,
    -0.01305310893803835,
    -0.018039299175143242,
    0.01528542023152113,
    0.014617813751101494,
    0.029485980048775673,
    0.005340856499969959,
    -0.016996163874864578,
    -0.6101928949356079,
    -0.02392258681356907,
    -0.006519600283354521,
    -0.023310614749789238,
    0.009784616529941559,
    0.022990718483924866,
    0.0025608991272747517,
    -0.0052191573195159435,
    -0.04709411785006523,
    0.038749027997255325,
    -0.02492399699985981,
    -0.010542628355324268,
    -0.018790356814861298,
    -0.014144925400614738,
    -0.03427049517631531,
    -0.0166623592376709,
    -0.02788650430738926,
    -0.010966837406158447,
    -0.007441037334501743,
    0.004172544460743666,
    -0.008588487282395363,
    0.03068210929632187,
    -0.015160243958234787,
    -0.004471576772630215,
    -0.0007088978891260922,
    0.012496770359575748,
    0.007962604984641075,
    -0.0018098410218954086,
    0.022670824080705643,
    0.00872061774134636,
    -0.03794233500957489,
    0.024854455143213272,
    0.024576285853981972,
    -0.01042440626770258,
    0.03644021973013878,
    -0.013400821015238762,
    -0.0003683574323076755,
    0.042281780391931534,
    0.01545232255011797,
    0.0551888532936573,
    -0.015243695117533207,
    -0.004075184930115938,
    -0.0012691488955169916,
    0.011439725756645203,
    -0.017121339216828346,
    0.026008859276771545,
    0.014506545849144459,
    0.0003948704688809812,
    -0.004631523974239826,
    -0.004269903525710106,
    0.014110153540968895,
    -0.022323111072182655,
    -0.0028790554497390985,
    -0.022476105019450188,
    0.014131017029285431,
    -0.020362015813589096,
    0.03493810445070267,
    -0.02838720940053463,
    0.029124358668923378,
    -0.0026287029031664133,
    0.0045897988602519035,
    0.024826638400554657,
    0.0012795802904292941,
    -0.014770806767046452,
    -0.017816763371229172,
    0.002454846864566207,
    -0.019527507945895195,
    -0.003529276931658387,
    -0.013386912643909454,
    -0.021947583183646202,
    -0.0016638020751997828,
    -0.0010770380031317472,
    0.009416041895747185,
    -0.0019697886891663074,
    0.0001403887290507555,
    0.037691984325647354,
    0.008324225433170795,
    0.021210433915257454,
    -0.01137018296867609,
    0.03402014449238777,
    0.01038963533937931,
    -0.002905133878812194,
    0.010639987885951996,
    -0.022503921762108803,
    0.028178581967949867,
    0.011801346205174923,
    0.01603647880256176,
    0.0028964411467313766,
    0.007253272924572229,
    -0.001328259939327836,
    -0.0020184682216495275,
    0.005949352867901325,
    -0.0065369862131774426,
    -0.0307377427816391,
    -0.006856881082057953,
    0.03090464510023594,
    -0.013039200566709042,
    0.007447991520166397,
    -0.0212938841432333,
    -0.010382681153714657,
    0.016119929030537605,
    0.0015499263536185026,
    0.008039101958274841,
    0.008748434484004974,
    0.01257326640188694,
    0.0015612270217388868,
    -0.016551092267036438,
    0.00019591399177443236,
    0.02329670637845993,
    -0.03251802921295166,
    -0.04230959713459015,
    -0.01329650729894638,
    -0.007155913393944502,
    0.004433328285813332,
    0.015563590452075005,
    -0.029096541926264763,
    -0.006151025649160147,
    -0.002286206465214491,
    0.014179696328938007,
    -0.006603051442652941,
    -0.0018498279387131333,
    -0.019207611680030823,
    0.00032619733246974647,
    0.00851894449442625,
    0.016912713646888733,
    0.006091914605349302,
    0.009283911436796188,
    -0.024270299822092056,
    -0.002028899732977152,
    0.0038769890088588,
    0.02699636109173298,
    0.008226866833865643,
    0.022281385958194733,
    -0.016954438760876656,
    0.02570287324488163,
    0.019082436338067055,
    0.026412205770611763,
    -0.002774741966277361,
    -0.004103001672774553,
    -0.008574578911066055,
    0.005733771249651909,
    0.0032354602590203285,
    0.006710842251777649,
    -0.010667804628610611,
    -0.01777503825724125,
    0.016731902956962585,
    0.0009023126913234591,
    0.012371594086289406,
    -0.007642710115760565,
    0.017455143854022026,
    -0.013936297968029976,
    -0.011335412040352821,
    -0.011133738793432713,
    0.002065409440547228,
    0.0120377903804183,
    -0.021196525543928146,
    -0.023088078945875168,
    -0.04801207780838013,
    -0.007329769432544708,
    -0.030598657205700874,
    0.004381171427667141,
    0.03822050616145134,
    -0.031433165073394775,
    0.0032737087458372116,
    -0.02575850673019886,
    0.009019649587571621,
    -0.006794292945414782,
    0.024798821657896042,
    -0.0030442187562584877,
    -0.040473680943250656,
    0.015660949051380157,
    -0.020264657214283943,
    0.003230244619771838,
    0.023310614749789238,
    0.02212839387357235,
    0.009096146561205387,
    -0.003357159672304988,
    -0.034326132386922836,
    0.016133837401866913,
    -0.003025094512850046,
    -5.487330417963676e-05,
    -0.0032319831661880016,
    -0.029986685141921043,
    -0.012475907802581787,
    0.026606924831867218,
    0.0335194393992424,
    0.014742990024387836,
    -0.005403444636613131,
    -0.033046551048755646,
    -0.017023980617523193,
    -0.00530608557164669,
    -0.003581433789804578,
    -0.002373134484514594,
    0.02788650430738926,
    0.005313039757311344,
    0.011634443886578083,
    0.022281385958194733,
    0.00012278580106794834,
    -0.0035675254184752703,
    0.020709728822112083,
    -0.007121141999959946,
    0.029346894472837448,
    0.024910088628530502,
    -0.03157225251197815,
    -0.024798821657896042,
    -0.012809710577130318,
    0.016551092267036438,
    -0.018651273101568222,
    -0.01137018296867609,
    -0.008108644746243954,
    0.03410359472036362,
    -0.002065409440547228,
    -0.024882271885871887,
    -0.0007210678304545581,
    -0.01586957648396492,
    0.02285163477063179,
    0.008449401706457138,
    -0.0012335083447396755,
    -0.014437003061175346,
    0.021196525543928146,
    0.009492537938058376,
    -0.00851894449442625,
    0.022921176627278328,
    -0.0072810896672308445,
    -0.014012794941663742,
    0.00757316779345274,
    -0.0005189601797610521,
    0.008901427499949932,
    -0.005466032773256302,
    -0.03040394000709057,
    -0.002025422640144825,
    0.06464661657810211,
    -0.005938921123743057,
    -0.005372150801122189,
    0.0002644784690346569,
    0.004426374100148678,
    0.026245303452014923,
    -0.029179992154240608,
    0.018484370782971382,
    -0.008477219380438328,
    0.022323111072182655,
    0.014478728175163269,
    0.0009188289986923337,
    0.0016203380655497313,
    0.02431202493607998,
    0.022990718483924866,
    0.020083846524357796,
    0.03424267843365669,
    -0.018303560093045235,
    0.00445766793563962,
    -0.008199049159884453,
    0.00575463380664587,
    -0.0051496149972081184,
    0.014409186318516731,
    0.0016872725682333112,
    -0.022976810112595558,
    0.02268473245203495,
    0.006196228321641684,
    0.0414750911295414,
    0.006849926896393299,
    0.008080827072262764,
    -0.005424307659268379,
    0.02424248307943344,
    0.003294571302831173,
    0.031600069254636765,
    -0.02089053764939308,
    0.011495359241962433,
    -0.027024177834391594,
    -0.007413220126181841,
    -0.032712746411561966,
    -0.021196525543928146,
    0.0035101529210805893,
    0.01167616993188858,
    -0.012712351977825165,
    0.020932264626026154,
    0.016078203916549683,
    0.028248123824596405,
    0.004193407017737627,
    0.015160243958234787,
    0.01799757406115532,
    -0.017023980617523193,
    -0.026008859276771545,
    0.029179992154240608,
    0.029152175411581993,
    -0.0040960474871098995,
    -0.005681614391505718,
    -0.04189234599471092,
    0.00801823940128088,
    -0.005778973922133446,
    0.0017742005875334144,
    -0.005274791270494461,
    0.0077539780177176,
    -0.007628801744431257,
    -0.0010848614620044827,
    -0.030209220945835114,
    -0.013011383824050426,
    0.01586957648396492,
    -0.0076635731384158134,
    0.004311629105359316,
    -0.011377137154340744,
    0.00020547606982290745,
    -0.0005328686675056815,
    -0.005921535659581423,
    -0.006672593764960766,
    0.04244868457317352,
    -0.00980547908693552,
    -0.0015055930707603693,
    -0.0006676070624962449,
    -0.008991832844913006,
    -0.01305310893803835,
    -0.0030807284638285637,
    -0.0017941939877346158,
    0.0018950304947793484,
    -0.032323308289051056,
    0.005698999855667353,
    -0.012531541287899017,
    0.006623913999646902,
    -0.005104412324726582,
    0.03766416758298874,
    0.00046723801642656326,
    0.0012143842177465558,
    -0.03146098554134369,
    -0.017580319195985794,
    -0.00038052734453231096,
    0.046287424862384796,
    0.05415962636470795,
    -0.01251763291656971,
    0.011391045525670052,
    -0.02424248307943344,
    0.013692899607121944,
    -0.04136382043361664,
    -0.003258061595261097,
    -0.004196884110569954,
    0.005399967543780804,
    -0.019471872597932816,
    -0.013713762164115906,
    -0.0021627687383443117,
    0.019068527966737747,
    0.02603667601943016,
    -0.007162867579609156,
    0.001283057383261621,
    0.007329769432544708,
    -0.022768182680010796,
    -0.02066800184547901,
    -0.005452124401926994,
    0.00872061774134636,
    0.01764986291527748,
    -0.005420830566436052,
    0.021558145061135292,
    0.0038596035446971655,
    0.023115895688533783,
    0.03357507288455963,
    -0.008567623794078827,
    0.0001583176344865933,
    -0.022879451513290405,
    0.0028842713218182325,
    -0.008977924473583698,
    0.011245006695389748,
    -0.01755250245332718,
    0.029569430276751518,
    0.003571002511307597,
    0.028303759172558784,
    -0.010813843458890915,
    0.03034830465912819,
    0.009130917489528656,
    0.014137971214950085,
    0.0038456949405372143,
    -0.010911202989518642,
    -0.008991832844913006,
    -0.02374177612364292,
    0.0032232904341071844,
    -0.0036127278581261635,
    -0.011418863199651241,
    -0.03029267117381096,
    0.015605315566062927,
    0.015021159313619137,
    -0.040473680943250656,
    -0.034075777977705,
    0.01732996664941311,
    -0.01727433316409588,
    0.0005446039722301066,
    -0.03371415659785271,
    0.013046154752373695,
    -0.02788650430738926,
    -0.007913925684988499,
    -0.04116910323500633,
    -0.009555126540362835,
    0.007176775950938463,
    0.008087781257927418,
    0.0005211334209889174,
    -0.004603707231581211,
    0.00860239565372467,
    -0.03246239572763443,
    -0.00646744342520833,
    -0.00753144221380353,
    -0.02742752432823181,
    -0.02990323305130005,
    -0.008261637762188911,
    0.027191080152988434,
    0.018025390803813934,
    0.011968247592449188,
    0.024117305874824524,
    -0.0023783501237630844,
    0.011773529462516308,
    -0.02642611414194107,
    -0.015104610472917557,
    0.0041794986464083195,
    -0.043728262186050415,
    0.01570267416536808,
    -0.019652683287858963,
    0.004857536870986223,
    -0.006995965726673603,
    0.003541446989402175,
    0.016467642039060593,
    0.025855865329504013,
    -0.0026878139469772577,
    -0.003574479604139924,
    -0.010431360453367233,
    0.0012604560470208526,
    0.04058494791388512,
    0.01394325215369463,
    0.0038839431945234537,
    0.000234705614275299,
    -0.03079337626695633,
    0.02637048065662384,
    -0.010556536726653576,
    0.015800034627318382,
    -0.035633526742458344,
    0.016968347132205963,
    0.003456257516518235,
    0.001370854675769806,
    0.02536906860768795,
    0.0036266364622861147,
    0.016731902956962585,
    0.015341054648160934,
    -0.003685747506096959,
    0.021919766440987587,
    0.010354864411056042,
    0.012761031277477741,
    0.0011126784374937415,
    0.005160046275705099,
    0.03029267117381096,
    -0.01688489504158497,
    -0.016787536442279816,
    0.0027521406300365925,
    0.013456455431878567,
    0.022114485502243042,
    0.03146098554134369,
    -0.02364441752433777,
    0.025522062554955482,
    -0.008950107730925083,
    -0.012684534303843975,
    -0.04083529859781265,
    0.023616600781679153,
    -0.008546761237084866,
    0.04600925371050835,
    -0.025243893265724182,
    -0.016606725752353668,
    0.008664983324706554,
    -0.002249696757644415,
    -0.010480040684342384,
    0.009694211184978485,
    -0.01927715539932251,
    -0.002430506981909275,
    0.010758209973573685,
    -0.001893291948363185,
    -0.04058494791388512,
    0.008685845881700516,
    0.0057024769484996796,
    -0.024729279801249504,
    -0.0006689110305160284,
    -0.0018254881724715233,
    0.019263245165348053,
    0.027914321050047874,
    0.0016751026269048452,
    0.012364639900624752,
    -0.01721869967877865,
    -0.008581533096730709,
    -0.018359195441007614,
    -0.00877625122666359,
    0.015466230921447277,
    0.008706709370017052,
    0.032156407833099365,
    0.04336664453148842,
    0.02709372155368328,
    0.027844779193401337,
    0.020765362307429314,
    0.010973791591823101,
    -0.010187962092459202,
    0.005257405806332827,
    0.006627391092479229,
    0.0028234217315912247,
    -0.04027896001935005,
    -0.016898803412914276,
    0.003504937281832099,
    -0.008032147772610188,
    0.03207295760512352,
    -0.0035223227459937334,
    0.001153534627519548,
    0.004155158530920744,
    0.018581731244921684,
    -0.01837310381233692,
    0.00061284244293347,
    -0.02127997577190399,
    -0.013880663551390171,
    0.014687355607748032,
    -0.009346499107778072,
    0.021711139008402824,
    -0.04155854135751724,
    -0.02420075610280037,
    0.008004331029951572,
    -0.0022392654791474342,
    0.012030836194753647,
    -0.005128752440214157,
    0.00896401610225439,
    -0.010299229994416237,
    -0.014284010045230389,
    -0.002659996971487999,
    0.006074529141187668,
    -0.007496671285480261,
    0.022726457566022873,
    -0.03496592119336128,
    -0.029013091698288918,
    0.008630212396383286,
    -0.02212839387357235,
    0.01837310381233692,
    -0.003172872122377157,
    1.871668609965127e-05,
    -0.004016073886305094,
    0.004482008051127195,
    0.009033557958900928,
    0.005619026254862547,
    -0.0012761030811816454,
    -0.02134951762855053,
    -0.024451108649373055,
    0.005100935231894255,
    -0.05045996978878975,
    -0.008358997292816639,
    0.02146078646183014,
    -0.015939118340611458,
    -0.0031015912536531687,
    0.0044785309582948685,
    -0.021029623225331306,
    0.001926324563100934,
    0.01922152005136013,
    0.019402330741286278,
    0.043672628700733185,
    0.012531541287899017,
    0.03457648307085037,
    0.005733771249651909,
    0.010820798575878143,
    -0.010737347416579723,
    -0.0025313436053693295,
    -0.01827574335038662,
    0.0019315403187647462,
    0.024172939360141754,
    0.027079813182353973,
    -0.0017368216067552567,
    -0.04381171613931656,
    0.014450911432504654,
    0.0031154996249824762,
    -0.01545232255011797,
    -0.023435790091753006,
    0.025953225791454315,
    0.01949968934059143,
    0.032156407833099365,
    -0.013067018240690231,
    -0.002487879479303956,
    -0.002880793996155262,
    -0.010278367437422276,
    -0.02609230950474739,
    -0.024631919339299202,
    0.005813744850456715,
    -0.016898803412914276,
    -0.01983349397778511,
    0.023700051009655,
    -0.011912614107131958,
    0.029736332595348358,
    -0.004266426432877779,
    -0.026175761595368385,
    0.008755388669669628,
    -0.01787239871919155,
    0.008150369860231876,
    0.001231769798323512,
    0.014297918416559696,
    0.0431441068649292,
    -0.005692045670002699,
    -0.02212839387357235,
    0.040473680943250656,
    0.01195433922111988,
    -0.008706709370017052,
    0.015035067684948444,
    0.0001838527387008071,
    0.03738599643111229,
    -0.010403543710708618,
    -0.0070550767704844475,
    -0.01251763291656971,
    -0.03421486169099808,
    0.00821295753121376,
    -0.01162748970091343,
    0.0008310317061841488,
    -0.008713663555681705,
    0.0023105463478714228,
    -0.00015864361193962395,
    0.0040647536516189575,
    -0.018623456358909607,
    -0.042281780391931534,
    -0.005879810079932213,
    0.008623258210718632,
    -0.005535575561225414,
    -0.03688529133796692,
    -0.01755250245332718,
    0.011224144138395786,
    -0.031711336225271225,
    -0.0448131263256073,
    -0.004770609084516764,
    -0.010799935087561607,
    0.0038630806375294924,
    0.008908381685614586,
    0.0017263902118429542,
    0.008838839828968048,
    0.031266264617443085,
    -0.01064694207161665,
    0.008066918700933456,
    -0.00507311848923564,
    -0.017580319195985794,
    -0.03057084046304226,
    0.029068725183606148,
    -0.004461145028471947,
    0.00010616082727210596,
    0.00891533587127924,
    -0.01332432497292757,
    -0.03766416758298874,
    -0.009506446309387684,
    0.010132328607141972,
    0.01653718389570713,
    0.016773628070950508,
    -0.0155079560354352,
    0.018206201493740082,
    0.013317370787262917,
    0.0007636625086888671,
    0.012747122906148434,
    -0.030765559524297714,
    0.012441135942935944,
    0.00521220313385129,
    -0.011648353189229965,
    0.017288241535425186,
    -0.003261538688093424,
    0.01131454948335886,
    -0.019193703308701515,
    0.0029711993411183357,
    0.03507718816399574,
    -0.03632895275950432,
    -0.003623159369453788,
    -0.01764986291527748,
    0.001090077217668295,
    -0.010104510933160782,
    0.006519600283354521,
    -0.006314450409263372,
    -0.03084900975227356,
    -0.0167597196996212,
    0.04664904624223709,
    0.009158734232187271,
    0.003484074492007494,
    0.012927932664752007,
    0.018136659637093544,
    -0.006053666118532419,
    -0.011884797364473343,
    -0.018540004268288612,
    -0.03591169789433479,
    -0.014409186318516731,
    0.011961293406784534,
    -0.029458163306117058,
    0.005080072674900293,
    -0.03516063839197159,
    0.04083529859781265,
    0.043895166367292404,
    -0.014124061912298203,
    -0.0007371495012193918,
    -0.013108743354678154,
    -0.014179696328938007,
    -0.0022549123968929052,
    -0.023672234266996384,
    0.026676466688513756,
    -0.013213057070970535,
    -0.0012248156126588583,
    0.023310614749789238,
    0.011272823438048363,
    -0.011926522478461266,
    0.027566609904170036,
    -5.011942994315177e-05,
    0.033992327749729156,
    0.0010857307352125645,
    -0.0012987044174224138,
    -0.0005150484503246844,
    -0.026662558317184448,
    -0.030821193009614944,
    -0.01755250245332718,
    -0.00028186404961161315,
    0.015354963019490242,
    -0.0004311629163566977,
    0.01855391263961792,
    -0.03435394912958145,
    -0.004339445848017931,
    -0.009471675381064415,
    -0.003880466101691127,
    -0.0007975644548423588,
    -0.004475053865462542,
    0.052434973418712616,
    -0.022615190595388412,
    -0.01955532468855381,
    0.007197638973593712,
    0.020417649298906326,
    -0.005229588598012924,
    -0.02162768691778183,
    0.012594129890203476,
    0.018345287069678307,
    0.012475907802581787,
    -0.02625921182334423,
    -0.006363130174577236,
    -0.0008714532596059144,
    0.008066918700933456,
    -0.0049201250076293945,
    -0.0014890767633914948,
    -0.004833197221159935,
    0.03783106803894043,
    0.017580319195985794,
    -0.008894473314285278,
    -0.005758110899478197,
    0.016133837401866913,
    -0.006004986818879843,
    0.0025748074986040592,
    0.01064694207161665,
    -0.02240656316280365,
    -0.0029781535267829895,
    -0.0045515503734350204,
    0.04072403162717819,
    -0.022364838048815727,
    0.00022840333986096084,
    -0.0009718551300466061,
    -0.0036787930876016617,
    -0.018206201493740082,
    0.012058652937412262,
    0.011022470891475677,
    -0.009854158386588097,
    0.008929245173931122,
    0.014409186318516731,
    0.03363070636987686,
    0.014937708154320717,
    -0.014492637477815151,
    0.004836674313992262,
    -0.02771960198879242,
    0.0031328853219747543,
    0.010160145349800587,
    0.001422142144292593,
    -0.017232608050107956,
    -0.002919042482972145,
    -0.007607939187437296,
    -0.008727571927011013,
    -0.01215601246803999,
    0.17046234011650085,
    0.00023796541790943593,
    0.015619223937392235,
    0.027956046164035797,
    0.014937708154320717,
    0.008491127751767635,
    -0.008004331029951572,
    0.005591209512203932,
    -0.008970970287919044,
    0.019903035834431648,
    0.004596753045916557,
    -0.0005532967625185847,
    0.0011100706178694963,
    -0.006832541432231665,
    0.018790356814861298,
    -0.007454945705831051,
    -0.032601479440927505,
    -0.02771960198879242,
    -0.013060063123703003,
    0.007336723618209362,
    -0.03855431079864502,
    -0.01922152005136013,
    -0.004492439329624176,
    -0.028289850801229477,
    0.0008188618230633438,
    0.002201016992330551,
    -0.022865543141961098,
    0.002225356874987483,
    0.032100774347782135,
    0.004753223154693842,
    -0.015341054648160934,
    0.022879451513290405,
    -0.007169821765273809,
    -0.02737189084291458,
    -0.03168351948261261,
    -0.018331378698349,
    0.013616402633488178,
    -0.003311956999823451,
    0.01805320754647255,
    -0.011404953896999359,
    0.01059130858629942,
    -0.005243497435003519,
    0.01128673180937767,
    -0.027344074100255966,
    -0.021113073453307152,
    -0.019374513998627663,
    -0.010535674169659615,
    -0.016412006691098213,
    0.010813843458890915,
    0.009603805840015411,
    -0.027065902948379517,
    -0.003571002511307597,
    0.019096344709396362,
    0.013811121694743633,
    -0.018873808905482292,
    -0.011975201778113842,
    -0.002127997577190399,
    0.029263444244861603,
    0.04019550979137421,
    0.00504182418808341,
    0.0021366903092712164,
    0.015048976056277752,
    -0.010139282792806625,
    0.018623456358909607,
    -0.018734723329544067,
    -0.0010344432666897774,
    0.0059423986822366714,
    1.2237833288963884e-05,
    -0.0006697803037241101,
    -0.011404953896999359,
    -0.03418704494833946,
    -0.039305366575717926,
    -0.018804267048835754,
    0.007677481509745121,
    -0.031766969710588455,
    -0.01559140719473362,
    0.05493849888443947,
    0.004906216636300087,
    -0.0006758652161806822,
    0.040918752551078796,
    0.009847204200923443,
    -0.0009579466423019767,
    -0.024840546771883965,
    0.008790159597992897,
    -0.0008310317061841488,
    -0.02759442664682865,
    -0.004753223154693842,
    -0.024381566792726517,
    -0.013046154752373695,
    -8.002809772733599e-05,
    -0.013470363803207874,
    -0.029513796791434288,
    -0.02453456073999405,
    0.010660850442945957,
    0.00885970238596201,
    0.011439725756645203,
    0.004652386996895075,
    -0.002176677342504263,
    0.012489816173911095,
    -0.00245136977173388,
    -0.03207295760512352,
    0.07677481323480606,
    0.03123844787478447,
    -0.014937708154320717,
    0.0008736264426261187,
    -0.02625921182334423,
    0.004054322373121977,
    0.02112698182463646,
    0.007454945705831051,
    0.005984123796224594,
    0.003758766921237111,
    -0.02632875367999077,
    -0.012788848020136356,
    0.003737904131412506,
    0.004099524579942226,
    0.00019721791613847017,
    -0.01682926155626774,
    -0.025605512782931328,
    0.028150765225291252,
    -0.0005871986504644156,
    0.00436030887067318,
    -0.01354686077684164,
    0.0005811137380078435,
    0.004339445848017931,
    -0.012920978479087353,
    -0.02429811656475067,
    0.005872855894267559,
    0.0026669511571526527,
    -0.012997475452721119,
    -0.008094735443592072,
    0.0167597196996212,
    -0.013525997288525105,
    0.03410359472036362,
    0.015494047664105892,
    0.003412793390452862,
    -0.025271710008382797,
    -0.018762540072202682,
    -0.01394325215369463,
    -0.007246318738907576,
    0.020932264626026154,
    -0.025299526751041412,
    0.012670625932514668,
    0.016467642039060593,
    -0.01109201367944479,
    0.0173160582780838,
    -0.005959784146398306,
    -0.014012794941663742,
    0.010911202989518642,
    0.01816447637975216,
    0.016634542495012283,
    -0.004054322373121977,
    -0.005664228927344084,
    0.015827851369976997,
    -0.00028990488499403,
    0.03201732411980629,
    -0.01363726519048214,
    -0.012635855004191399,
    -0.008977924473583698,
    -0.009492537938058376,
    -0.013136560097336769,
    -0.02721889689564705,
    -0.018414828926324844,
    -0.005466032773256302,
    -0.0018428737530484796,
    -0.033435989171266556,
    -0.018039299175143242,
    -0.1770271509885788,
    0.02709372155368328,
    0.02442329190671444,
    -0.03034830465912819,
    0.02408948913216591,
    -0.004951419308781624,
    0.0280534066259861,
    0.0029816306196153164,
    -0.01777503825724125,
    -0.016231197863817215,
    0.02803949825465679,
    -0.003776152618229389,
    -0.009715073741972446,
    -0.025508154183626175,
    0.013811121694743633,
    -0.008421584963798523,
    -0.027747418731451035,
    0.028623653575778008,
    0.03688529133796692,
    0.009791570715606213,
    0.04762263968586922,
    -0.020417649298906326,
    0.016731902956962585,
    0.0068394956178963184,
    -0.028707103803753853,
    -0.031433165073394775,
    -0.0012230770662426949,
    0.028790555894374847,
    0.01905461959540844,
    -0.010034969076514244,
    0.0008488519815728068,
    -0.013922389596700668,
    0.040529314428567886,
    -0.0010240118717774749,
    0.0077539780177176,
    0.013220011256635189,
    0.020069938153028488,
    -0.02061236836016178,
    -0.019624866545200348,
    0.014423094689846039,
    0.02127997577190399,
    0.03427049517631531,
    0.0003518410958349705,
    -0.01653718389570713,
    -0.003671838901937008,
    -0.005782451014965773,
    0.012663671746850014,
    -0.026690375059843063,
    0.019972577691078186,
    -0.04178107529878616,
    0.02816467359662056,
    -0.014882074669003487,
    0.0007541004451923072,
    -0.01100856252014637,
    -0.000963162281550467,
    0.01670408621430397,
    0.017413418740034103,
    -0.004398556891828775,
    -0.00821295753121376,
    -0.022531738504767418,
    -0.017190882936120033,
    -0.019694408401846886,
    0.026801642030477524,
    0.006815155502408743,
    0.0038178779650479555,
    -0.016676269471645355,
    -0.029819782823324203,
    0.006098868791013956,
    -0.031766969710588455,
    0.02012557163834572,
    -0.0015890439972281456,
    -0.011530131101608276,
    -0.014548270963132381,
    -0.003315434092655778,
    0.03488247096538544,
    0.02179458923637867,
    -0.03905501589179039,
    0.010890340432524681,
    0.019151978194713593,
    -0.021419061347842216,
    -0.01274016872048378,
    0.045842353254556656,
    -0.005511235445737839,
    0.0038178779650479555,
    0.015549682080745697,
    -0.007900017313659191,
    0.005695522762835026,
    0.01720479130744934,
    -0.010139282792806625,
    -0.00392566854134202,
    0.0037309499457478523,
    -0.009422996081411839,
    0.013838938437402248,
    0.010466132313013077,
    -0.012427227571606636,
    0.008727571927011013,
    0.015619223937392235,
    -0.02403385564684868,
    0.02586977370083332,
    -0.023533150553703308,
    0.006846449803560972,
    -0.0040960474871098995,
    -0.01117546483874321,
    0.008790159597992897,
    0.03986170515418053,
    0.013609448447823524,
    -0.018581731244921684,
    0.02649565599858761,
    0.008192094974219799,
    -0.024228572845458984,
    0.004381171427667141,
    0.017357783392071724,
    0.005493849981576204,
    0.0024704940151423216,
    0.02084881253540516,
    0.037636350840330124,
    -0.023004626855254173,
    -0.010994654148817062,
    0.007844382897019386,
    0.006053666118532419,
    0.04553636536002159,
    0.005100935231894255,
    -0.014687355607748032,
    0.002861669985577464,
    -0.0237974114716053,
    -0.02079317905008793,
    -0.08495300263166428,
    -0.0344373993575573,
    0.029708515852689743,
    0.014617813751101494,
    -0.03329690173268318,
    0.006801247131079435,
    -0.00126827962230891,
    0.03549444302916527,
    -0.007837428711354733,
    0.0033832378685474396,
    -0.019861310720443726,
    0.006397901102900505,
    0.019750043749809265,
    0.004203838296234608,
    -0.0021297361236065626,
    -0.0155079560354352,
    -0.006324881687760353,
    0.002938166493549943,
    -0.015855668112635612,
    -0.005379104986786842,
    -0.013588585890829563,
    0.0007115057087503374,
    0.004176021553575993,
    -0.011098967865109444,
    0.0038352636620402336,
    0.013421684503555298,
    -0.032879650592803955,
    0.016022570431232452,
    0.004402033984661102,
    -0.010709530673921108,
    0.010626079514622688,
    -0.020042121410369873,
    -0.007148959208279848,
    -0.0034545189701020718,
    -0.008498081937432289,
    -0.00504182418808341,
    -0.028484567999839783,
    -0.023547058925032616,
    0.03379760682582855,
    -0.02705199457705021,
    0.0072393640875816345,
    -0.0017576842801645398,
    0.021544236689805984,
    0.007837428711354733,
    -0.049208205193281174,
    0.008192094974219799,
    -0.023380156606435776,
    0.028929639607667923,
    0.013901527039706707,
    -0.03894374519586563,
    -0.005184386391192675,
    0.007169821765273809,
    -0.017580319195985794,
    0.007406265940517187,
    0.018484370782971382,
    -0.008685845881700516,
    0.0097220279276371,
    0.010097556747496128,
    0.010987699963152409,
    -0.015035067684948444,
    -0.010751255787909031,
    0.010347910225391388,
    -0.014284010045230389,
    0.014158833771944046,
    0.01315742265433073,
    -0.0038213550578802824,
    0.010236642323434353,
    -0.005956307053565979,
    0.02386695332825184,
    -0.031377531588077545,
    -0.008936199359595776,
    0.011050287634134293,
    -0.006989011541008949,
    0.03040394000709057,
    -0.03822050616145134,
    -0.002447892678901553,
    -0.004454190842807293,
    -0.032657112926244736,
    -0.0005385190015658736,
    -0.012420273385941982,
    -0.004235132597386837,
    -0.005313039757311344,
    -0.011856979690492153,
    -0.02083490416407585,
    0.0004326841444708407,
    0.010417452082037926,
    0.012983567081391811,
    -0.020820995792746544,
    -0.02553597092628479,
    -0.024784913286566734,
    0.024409383535385132,
    -0.008025193586945534,
    0.006662162486463785,
    -0.01631464809179306,
    -0.0005154830869287252,
    -0.015480139292776585,
    -0.0053026084788143635,
    0.00927695631980896,
    -0.019805677235126495,
    0.042671218514442444,
    -0.044284604489803314,
    0.0035518782678991556,
    -0.08122552931308746,
    0.039138466119766235,
    -0.00521220313385129,
    -0.03201732411980629,
    0.015382779762148857,
    -0.0131017891690135,
    -0.012441135942935944,
    -0.018873808905482292,
    0.009179597720503807,
    0.010229688137769699,
    -0.056579701602458954,
    -0.009485583752393723,
    0.004002165514975786,
    0.005904150195419788,
    -0.013004429638385773,
    -0.008080827072262764,
    0.035633526742458344,
    -0.014756898395717144,
    0.04720538482069969,
    -0.012232508510351181,
    -0.016954438760876656,
    0.015786126255989075,
    0.04336664453148842,
    0.0076218475587666035,
    -0.03677402436733246,
    -0.014631722122430801,
    -0.022754274308681488,
    0.012322913855314255,
    0.012865344993770123,
    -0.014993342570960522,
    0.01002801489084959,
    -0.015480139292776585,
    0.014395277947187424,
    0.006091914605349302,
    -0.015396688133478165,
    0.005504281260073185,
    0.006192751228809357,
    0.0016238151583820581,
    0.011112876236438751,
    0.02079317905008793,
    -0.009353453293442726,
    -0.028707103803753853,
    -0.007288043852895498,
    -0.019930852577090263,
    0.0015829589683562517,
    -0.01721869967877865,
    -0.007475808262825012,
    -0.02290726825594902,
    0.018804267048835754,
    0.0035675254184752703,
    0.03402014449238777,
    0.019026800990104675,
    -0.0152297867462039,
    -0.03557789325714111,
    0.0022688210010528564,
    0.014798623509705067,
    0.04765045642852783,
    0.0060119410045444965,
    -0.009972380474209785,
    0.008532852865755558,
    0.013616402633488178,
    0.019819585606455803,
    0.016022570431232452,
    0.01748296059668064,
    0.014520454220473766,
    -0.014520454220473766,
    -0.033992327749729156,
    0.001117024919949472,
    -0.013178285211324692,
    -0.03246239572763443,
    -0.010187962092459202,
    -0.028762739151716232,
    0.015243695117533207,
    0.016161654144525528,
    0.0207375455647707,
    -0.008164278231561184,
    0.019624866545200348,
    -0.009464721195399761,
    0.002315761987119913,
    0.015299328602850437,
    0.010480040684342384,
    -0.008511990308761597,
    -0.029485980048775673,
    0.027705693617463112,
    0.03421486169099808,
    -0.002635657088831067,
    -0.018512187525629997,
    0.027135446667671204,
    -0.0086580291390419,
    -0.006578711327165365,
    0.0013821553438901901,
    0.026189669966697693,
    0.017677679657936096,
    0.014868166297674179,
    0.0007962605450302362,
    0.011724849231541157,
    -0.001108332071453333,
    -0.011745711788535118,
    0.022225752472877502,
    0.011105922050774097,
    0.012357685714960098,
    0.006696933414787054,
    -0.00872061774134636,
    -0.01810884289443493,
    -0.014214467257261276,
    0.0015316714998334646,
    0.005062687210738659,
    -0.03140534833073616,
    -0.008032147772610188,
    0.006623913999646902,
    0.024784913286566734,
    0.008831885643303394,
    -0.0064570121467113495,
    0.004033459350466728,
    -0.02151641994714737,
    0.03123844787478447,
    -0.010292275808751583,
    -0.022253569215536118,
    -0.017900215461850166,
    0.004739314783364534,
    0.001832442358136177,
    0.012392456643283367,
    0.03285183012485504,
    -0.007075939793139696,
    0.026022767648100853,
    0.00650916900485754,
    0.0015360178658738732,
    -0.01598084531724453,
    0.03541099280118942,
    0.016467642039060593,
    -0.02670428343117237,
    0.0020932264160364866,
    -0.00029729376547038555,
    -0.028540203347802162,
    -0.025104807689785957,
    -0.019374513998627663,
    -0.01500725094228983,
    -0.008532852865755558,
    0.007893063127994537,
    0.06804028898477554,
    -0.01500725094228983,
    -0.009610760025680065,
    -0.03335253894329071,
    -0.005403444636613131,
    0.010772118344902992,
    0.01318524032831192,
    0.01014623697847128,
    -0.012670625932514668,
    -0.004029982257634401,
    -0.01872081495821476,
    -0.008386814035475254,
    -0.037413813173770905,
    0.001256109680980444,
    -0.027024177834391594,
    -0.014339643530547619,
    -0.0333247184753418,
    0.02319934591650963,
    -0.014576087705790997,
    0.014311826787889004,
    0.028456751257181168,
    -0.011210235767066479,
    0.009520355612039566,
    -0.02223966084420681,
    -0.01764986291527748,
    -0.016954438760876656,
    0.02844284288585186,
    0.0025713304057717323,
    -0.014033657498657703,
    -0.02285163477063179,
    0.025953225791454315,
    0.033435989171266556,
    -0.019346697255969048,
    -0.018456554040312767,
    0.01354686077684164,
    0.017135247588157654,
    0.006074529141187668,
    0.015201970003545284,
    0.006787338759750128,
    0.00032663196907378733,
    0.0008588486816734076,
    -0.01402670331299305,
    -0.019569233059883118,
    -0.03168351948261261,
    0.021419061347842216,
    0.008644120767712593,
    0.016565000638365746,
    -0.02122434228658676,
    -0.016996163874864578
  ]
}
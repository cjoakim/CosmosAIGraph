{
  "classifiers": [
    "development status :: 7 - inactive",
    "framework :: aws cdk",
    "framework :: aws cdk :: 1",
    "intended audience :: developers",
    "license :: osi approved",
    "operating system :: os independent",
    "programming language :: javascript",
    "programming language :: python :: 3 :: only",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "typing :: typed"
  ],
  "description": "constructs for implementing cdk custom resources\n# aws cdk custom resources\n\n<!--begin stability banner-->---\n\n\n![end-of-support](https://img.shields.io/badge/end--of--support-critical.svg?style=for-the-badge)\n\n> aws cdk v1 has reached end-of-support on 2023-06-01.\n> this package is no longer being updated, and users should migrate to aws cdk v2.\n>\n> for more information on how to migrate, see the [*migrating to aws cdk v2* guide](https://docs.aws.amazon.com/cdk/v2/guide/migrating-v2.html).\n\n---\n<!--end stability banner-->\n\n## provider framework\n\naws cloudformation [custom resources](https://docs.aws.amazon.com/awscloudformation/latest/userguide/template-custom-resources.html) are extension points to the provisioning\nengine. when cloudformation needs to create, update or delete a custom resource,\nit sends a lifecycle event notification to a **custom resource provider**. the provider\nhandles the event (e.g. creates a resource) and sends back a response to cloudformation.\n\nthe `@aws-cdk/custom-resources.provider` construct is a \"mini-framework\" for\nimplementing providers for aws cloudformation custom resources. the framework offers a high-level api which makes it easier to implement robust\nand powerful custom resources and includes the following capabilities:\n\n* handles responses to aws cloudformation and protects against blocked\n  deployments\n* validates handler return values to help with correct handler implementation\n* supports asynchronous handlers to enable operations that require a long waiting period for a resource, which can exceed the aws lambda timeout\n* implements default behavior for physical resource ids.\n\nthe following code shows how the `provider` construct is used in conjunction\nwith a `customresource` and a user-provided aws lambda function which implements\nthe actual handler.\n\n```python\n# on_event: lambda.function\n# is_complete: lambda.function\n# my_role: iam.role\n\n\nmy_provider = cr.provider(self, \"myprovider\",\n    on_event_handler=on_event,\n    is_complete_handler=is_complete,  # optional async \"waiter\"\n    log_retention=logs.retentiondays.one_day,  # default is infinite\n    role=my_role\n)\n\ncustomresource(self, \"resource1\", service_token=my_provider.service_token)\ncustomresource(self, \"resource2\", service_token=my_provider.service_token)\n```\n\nproviders are implemented through aws lambda functions that are triggered by the\nprovider framework in response to lifecycle events.\n\nat the minimum, users must define the `onevent` handler, which is invoked by the\nframework for all resource lifecycle events (`create`, `update` and `delete`)\nand returns a result which is then submitted to cloudformation.\n\nthe following example is a skeleton for a python implementation of `onevent`:\n\n```py\ndef on_event(event, context):\n  print(event)\n  request_type = event['requesttype']\n  if request_type == 'create': return on_create(event)\n  if request_type == 'update': return on_update(event)\n  if request_type == 'delete': return on_delete(event)\n  raise exception(\"invalid request type: %s\" % request_type)\n\ndef on_create(event):\n  props = event[\"resourceproperties\"]\n  print(\"create new resource with props %s\" % props)\n\n  # add your create code here...\n  physical_id = ...\n\n  return { 'physicalresourceid': physical_id }\n\ndef on_update(event):\n  physical_id = event[\"physicalresourceid\"]\n  props = event[\"resourceproperties\"]\n  print(\"update resource %s with props %s\" % (physical_id, props))\n  # ...\n\ndef on_delete(event):\n  physical_id = event[\"physicalresourceid\"]\n  print(\"delete resource %s\" % physical_id)\n  # ...\n```\n\nusers may also provide an additional handler called `iscomplete`, for cases\nwhere the lifecycle operation cannot be completed immediately. the\n`iscomplete` handler will be retried asynchronously after `onevent` until it\nreturns `iscomplete: true`, or until the total provider timeout has expired.\n\nthe following example is a skeleton for a python implementation of `iscomplete`:\n\n```py\ndef is_complete(event, context):\n  physical_id = event[\"physicalresourceid\"]\n  request_type = event[\"requesttype\"]\n\n  # check if resource is stable based on request_type\n  is_ready = ...\n\n  return { 'iscomplete': is_ready }\n```\n\n> **security note**: the custom resource provider framework will write the value of `responseurl`,\n> which is a pre-signed s3 url used to report the success or failure of the custom resource execution\n> back to cloudformation, in a readable form to the aws step functions execution history.\n>\n> anybody who can list and read aws stepfunction executions in your account will be able to write\n> a fake response to this url and make your cloudformation deployments fail.\n>\n> do not use this library if your threat model requires that you cannot trust actors who are able\n> to list stepfunction executions in your account.\n\n### handling lifecycle events: onevent\n\nthe user-defined `onevent` aws lambda function is invoked whenever a resource\nlifecycle event occurs. the function is expected to handle the event and return\na response to the framework that, at least, includes the physical resource id.\n\nif `onevent` returns successfully, the framework will submit a \"success\" response\nto aws cloudformation for this resource operation.  if the provider is\n[asynchronous](#asynchronous-providers-iscomplete) (`iscompletehandler` is\ndefined), the framework will only submit a response based on the result of\n`iscomplete`.\n\nif `onevent` throws an error, the framework will submit a \"failed\" response to\naws cloudformation.\n\nthe input event includes the following fields derived from the [custom resource\nprovider request]:\n\n|field|type|description\n|-----|----|----------------\n|`requesttype`|string|the type of lifecycle event: `create`, `update` or `delete`.\n|`logicalresourceid`|string|the template developer-chosen name (logical id) of the custom resource in the aws cloudformation template.\n|`physicalresourceid`|string|this field will only be present for `update` and `delete` events and includes the value returned in `physicalresourceid` of the previous operation.\n|`resourceproperties`|json|this field contains the properties defined in the template for this custom resource.\n|`oldresourceproperties`|json|this field will only be present for `update` events and contains the resource properties that were declared previous to the update request.\n|`resourcetype`|string|the resource type defined for this custom resource in the template. a provider may handle any number of custom resource types.\n|`requestid`|string|a unique id for the request.\n|`stackid`|string|the arn that identifies the stack that contains the custom resource.\n\nthe return value from `onevent` must be a json object with the following fields:\n\n|field|type|required|description\n|-----|----|--------|-----------\n|`physicalresourceid`|string|no|the allocated/assigned physical id of the resource. if omitted for `create` events, the event's `requestid` will be used. for `update`, the current physical id will be used. if a different value is returned, cloudformation will follow with a subsequent `delete` for the previous id (resource replacement). for `delete`, it will always return the current physical resource id, and if the user returns a different one, an error will occur.\n|`data`|json|no|resource attributes, which can later be retrieved through `fn::getatt` on the custom resource object.\n|`noecho`|boolean|no|whether to mask the output of the custom resource when retrieved by using the `fn::getatt` function.\n|*any*|*any*|no|any other field included in the response will be passed through to `iscomplete`. this can sometimes be useful to pass state between the handlers.\n\n### asynchronous providers: iscomplete\n\nit is not uncommon for the provisioning of resources to be an asynchronous\noperation, which means that the operation does not immediately finish, and we\nneed to \"wait\" until the resource stabilizes.\n\nthe provider framework makes it easy to implement \"waiters\" by allowing users to\nspecify an additional aws lambda function in `iscompletehandler`.\n\nthe framework will repeatedly invoke the handler every `queryinterval`. when\n`iscomplete` returns with `iscomplete: true`, the framework will submit a\n\"success\" response to aws cloudformation. if `totaltimeout` expires and the\noperation has not yet completed, the framework will submit a \"failed\" response\nwith the message \"operation timed out\".\n\nif an error is thrown, the framework will submit a \"failed\" response to aws\ncloudformation.\n\nthe input event to `iscomplete` includes all request fields, combined with all\nfields returned from `onevent`. if `physicalresourceid` has not been explicitly\nreturned from `onevent`, it's value will be calculated based on the heuristics\ndescribed above.\n\nthe return value must be a json object with the following fields:\n\n|field|type|required|description\n|-----|----|--------|-----------\n|`iscomplete`|boolean|yes|indicates if the operation has finished or not.\n|`data`|json|no|may only be sent if `iscomplete` is `true` and includes additional resource attributes. these attributes will be **merged** with the ones returned from `onevent`\n\n### physical resource ids\n\nevery resource in cloudformation has a physical resource id. when a resource is\ncreated, the `physicalresourceid` returned from the `create` operation is stored\nby aws cloudformation and assigned to the logical id defined for this resource\nin the template. if a `create` operation returns without a `physicalresourceid`,\nthe framework will use `requestid` as the default. this is sufficient for\nvarious cases such as \"pseudo-resources\" which only query data.\n\nfor `update` and `delete` operations, the resource event will always include the\ncurrent `physicalresourceid` of the resource.\n\nwhen an `update` operation occurs, the default behavior is to return the current\nphysical resource id. if the `onevent` returns a `physicalresourceid` which is\ndifferent from the current one, aws cloudformation will treat this as a\n**resource replacement**, and it will issue a subsequent `delete` operation for\nthe old resource.\n\nas a rule of thumb, if your custom resource supports configuring a physical name\n(e.g. you can specify a `bucketname` when you define an `aws::s3::bucket`), you\nmust return this name in `physicalresourceid` and make sure to handle\nreplacement properly. the `s3file` example demonstrates this\nthrough the `objectkey` property.\n\n### when there are errors\n\nas mentioned above, if any of the user handlers fail (i.e. throws an exception)\nor times out (due to their aws lambda timing out), the framework will trap these\nerrors and submit a \"failed\" response to aws cloudformation, along with the error\nmessage.\n\nsince errors can occur in multiple places in the provider (framework, `onevent`,\n`iscomplete`), it is important to know that there could situations where a\nresource operation fails even though the operation technically succeeded (i.e.\niscomplete throws an error).\n\nwhen aws cloudformation receives a \"failed\" response, it will attempt to roll\nback the stack to it's last state. this has different meanings for different\nlifecycle events:\n\n* if a `create` event fails, the resource provider framework will automatically\n  ignore the subsequent `delete` operation issued by aws cloudformation. the\n  framework currently does not support customizing this behavior (see\n  https://github.com/aws/aws-cdk/issues/5524).\n* if an `update` event fails, cloudformation will issue an additional `update`\n  with the previous properties.\n* if a `delete` event fails, cloudformation will abandon this resource.\n\n### important cases to handle\n\nyou should keep the following list in mind when writing custom resources to\nmake sure your custom resource behaves correctly in all cases:\n\n* during `create`:\n\n  * if the create fails, the *provider framework* will make sure you\n    don't get a subsequent `delete` event. if your create involves multiple distinct\n    operations, it is your responsibility to catch and rethrow and clean up\n    any partial updates that have already been performed. make sure your\n    api call timeouts and lambda timeouts allow for this.\n* during `update`:\n\n  * if the update fails, you will get a subsequent `update` event\n    to roll back to the previous state (with `resourceproperties` and\n    `oldresourceproperties` reversed).\n  * if you return a different `physicalresourceid`, you will subsequently\n    receive a `delete` event to clean up the previous state of the resource.\n* during `delete`:\n\n  * if the behavior of your custom resource is tied to another aws resource\n    (for example, it exists to clean the contents of a stateful resource), keep\n    in mind that your custom resource may be deleted independently of the other\n    resource and you must confirm that it is appropriate to perform the action.\n  * (only if you are *not* using the provider framework) a `delete` event\n    may be caused by a failed `create`. you must be able to handle the case\n    where the resource you are trying to delete hasn't even been created yet.\n* if you update the code of your custom resource and change the format of the\n  resource properties, be aware that there may still be already-deployed\n  instances of your custom resource out there, and you may still receive\n  the *old* property format in `resourceproperties` (during `delete` and\n  rollback `updates`) or in `oldresourceproperties` (during rollforward\n  `update`). you must continue to handle all possible sets of properties\n  your custom resource could have ever been created with in the past.\n\n### provider framework execution policy\n\nsimilarly to any aws lambda function, if the user-defined handlers require\naccess to aws resources, you will have to define these permissions\nby calling \"grant\" methods such as `mybucket.grantread(myhandler)`), using `myhandler.addtorolepolicy`\nor specifying an `initialpolicy` when defining the function.\n\nbear in mind that in most cases, a single provider will be used for multiple\nresource instances. this means that the execution policy of the provider must\nhave the appropriate privileges.\n\nthe following example grants the `onevent` handler `s3:getobject*` permissions\nto all buckets:\n\n```python\nlambda_.function(self, \"oneventhandler\",\n    runtime=lambda_.runtime.nodejs_14_x,\n    handler=\"index.handler\",\n    code=lambda_.code.from_inline(\"my code\"),\n    initial_policy=[\n        iam.policystatement(actions=[\"s3:getobject*\"], resources=[\"*\"])\n    ]\n)\n```\n\n### timeouts\n\nusers are responsible to define the timeouts for the aws lambda functions for\nuser-defined handlers. it is recommended not to exceed a **14 minutes** timeout,\nsince all framework functions are configured to time out after 15 minutes, which\nis the maximal aws lambda timeout.\n\nif your operation takes over **14 minutes**, the recommended approach is to\nimplement an [asynchronous provider](#asynchronous-providers-iscomplete), and\nthen configure the timeouts for the asynchronous retries through the\n`queryinterval` and the `totaltimeout` options.\n\n### provider framework examples\n\nthis module includes a few examples for custom resource implementations:\n\n#### s3file\n\nprovisions an object in an s3 bucket with textual contents. see the source code\nfor the\n[construct](https://github.com/aws/aws-cdk/blob/master/packages/%40aws-cdk/custom-resources/test/provider-framework/integration-test-fixtures/s3-file.ts) and\n[handler](https://github.com/aws/aws-cdk/blob/master/packages/%40aws-cdk/custom-resources/test/provider-framework/integration-test-fixtures/s3-file-handler/index.ts).\n\nthe following example will create the file `folder/file1.txt` inside `mybucket`\nwith the contents `hello!`.\n\n```plaintext\n// this example exists only for typescript\n\ndeclare const mybucket: s3.bucket;\nnew cr.s3file(this, 'myfile', {\n  bucket: mybucket,\n  objectkey: 'folder/file1.txt', // optional\n  content: 'hello!',\n  public: true, // optional\n});\n```\n\nthis sample demonstrates the following concepts:\n\n* synchronous implementation (`iscomplete` is not defined)\n* automatically generates the physical name if `objectkey` is not defined\n* handles physical name changes\n* returns resource attributes\n* handles deletions\n* implemented in typescript\n\n#### s3assert\n\nchecks that the textual contents of an s3 object matches a certain value. the check will be retried for 5 minutes as long as the object is not found or the value is different. see the source code for the [construct](test/provider-framework/integration-test-fixtures/s3-assert.ts) and [handler](test/provider-framework/integration-test-fixtures/s3-assert-handler/index.py).\n\nthe following example defines an `s3assert` resource which waits until\n`myfile.txt` in `mybucket` exists and includes the contents `foo bar`:\n\n```plaintext\n// this example exists only for typescript\n\ndeclare const mybucket: s3.bucket;\nnew cr.s3assert(this, 'assertmyfile', {\n  bucket: mybucket,\n  objectkey: 'myfile.txt',\n  expectedcontent: 'foo bar',\n});\n```\n\nthis sample demonstrates the following concepts:\n\n* asynchronous implementation\n* non-intrinsic physical ids\n* implemented in python\n\n### customizing provider function name\n\nin multi-account environments or when the custom resource may be re-utilized across several\nstacks it may be useful to manually set a name for the provider function lambda and therefore\nhave a predefined service token arn.\n\n```python\n# on_event: lambda.function\n# is_complete: lambda.function\n# my_role: iam.role\n\nmy_provider = cr.provider(self, \"myprovider\",\n    on_event_handler=on_event,\n    is_complete_handler=is_complete,\n    log_retention=logs.retentiondays.one_day,\n    role=my_role,\n    provider_function_name=\"the-lambda-name\"\n)\n```\n\n## custom resources for aws apis\n\nsometimes a single api call can fill the gap in the cloudformation coverage. in\nthis case you can use the `awscustomresource` construct. this construct creates\na custom resource that can be customized to make specific api calls for the\n`create`, `update` and `delete` events. additionally, data returned by the api\ncall can be extracted and used in other constructs/resources (creating a real\ncloudformation dependency using `fn::getatt` under the hood).\n\nthe physical id of the custom resource can be specified or derived from the data\nreturned by the api call.\n\nthe `awscustomresource` uses the aws sdk for javascript. services, actions and\nparameters can be found in the [api documentation](https://docs.aws.amazon.com/awsjavascriptsdk/latest/index.html).\n\npath to data must be specified using a dot notation, e.g. to get the string value\nof the `title` attribute for the first item returned by `dynamodb.query` it should\nbe `items.0.title.s`.\n\nto make sure that the newest api calls are available the latest aws sdk v2 is installed\nin the lambda function implementing the custom resource. the installation takes around 60\nseconds. if you prefer to optimize for speed, you can disable the installation by setting\nthe `installlatestawssdk` prop to `false`.\n\n### custom resource execution policy\n\nyou must provide the `policy` property defining the iam policy that will be applied to the api calls.\nthe library provides two factory methods to quickly configure this:\n\n* **`awscustomresourcepolicy.fromsdkcalls`** - use this to auto-generate iam\n  policy statements based on the configured sdk calls. keep two things in mind\n  when using this policy:\n\n  * this policy variant assumes the iam policy name has the same name as the api\n    call. this is true in 99% of cases, but there are exceptions (for example,\n    s3's `putbucketlifecycleconfiguration` requires\n    `s3:putlifecycleconfiguration` permissions, lambda's `invoke` requires\n    `lambda:invokefunction` permissions). use `fromstatements` if you want to\n    do a call that requires different iam action names.\n  * you will have to either provide specific arns, or explicitly use\n    `awscustomresourcepolicy.any_resource` to allow access to any resource.\n* **`awscustomresourcepolicy.fromstatements`** - use this to specify your own\n  custom statements.\n\nthe custom resource also implements `iam.igrantable`, making it possible to use the `grantxxx()` methods.\n\nas this custom resource uses a singleton lambda function, it's important to note\nthat the function's role will eventually accumulate the permissions/grants from all\nresources.\n\nchained api calls can be achieved by creating dependencies:\n\n```python\naws_custom1 = cr.awscustomresource(self, \"api1\",\n    on_create=cr.awssdkcall(\n        service=\"...\",\n        action=\"...\",\n        physical_resource_id=cr.physicalresourceid.of(\"...\")\n    ),\n    policy=cr.awscustomresourcepolicy.from_sdk_calls(\n        resources=cr.awscustomresourcepolicy.any_resource\n    )\n)\n\naws_custom2 = cr.awscustomresource(self, \"api2\",\n    on_create=cr.awssdkcall(\n        service=\"...\",\n        action=\"...\",\n        parameters={\n            \"text\": aws_custom1.get_response_field(\"items.0.text\")\n        },\n        physical_resource_id=cr.physicalresourceid.of(\"...\")\n    ),\n    policy=cr.awscustomresourcepolicy.from_sdk_calls(\n        resources=cr.awscustomresourcepolicy.any_resource\n    )\n)\n```\n\n### physical resource id parameter\n\nsome aws apis may require passing the physical resource id in as a parameter for doing updates and deletes. you can pass it by using `physicalresourceidreference`.\n\n```python\naws_custom = cr.awscustomresource(self, \"aws-custom\",\n    on_create=cr.awssdkcall(\n        service=\"...\",\n        action=\"...\",\n        parameters={\n            \"text\": \"...\"\n        },\n        physical_resource_id=cr.physicalresourceid.of(\"...\")\n    ),\n    on_update=cr.awssdkcall(\n        service=\"...\",\n        action=\"...\",\n        parameters={\n            \"text\": \"...\",\n            \"resource_id\": cr.physicalresourceidreference()\n        }\n    ),\n    policy=cr.awscustomresourcepolicy.from_sdk_calls(\n        resources=cr.awscustomresourcepolicy.any_resource\n    )\n)\n```\n\n### handling custom resource errors\n\nevery error produced by the api call is treated as is and will cause a \"failed\" response to be submitted to cloudformation.\nyou can ignore some errors by specifying the `ignoreerrorcodesmatching` property, which accepts a regular expression that is\ntested against the `code` property of the response. if matched, a \"success\" response is submitted.\nnote that in such a case, the call response data and the `data` key submitted to cloudformation would both be an empty json object.\nsince a successful resource provisioning might or might not produce outputs, this presents us with some limitations:\n\n* `physicalresourceid.fromresponse` - since the call response data might be empty, we cannot use it to extract the physical id.\n* `getresponsefield` and `getresponsefieldreference` - since the `data` key is empty, the resource will not have any attributes, and therefore, invoking these functions will result in an error.\n\nin both the cases, you will get a synth time error if you attempt to use it in conjunction with `ignoreerrorcodesmatching`.\n\n### customizing the lambda function implementing the custom resource\n\nuse the `role`, `timeout`, `logretention` and `functionname` properties to customize\nthe lambda function implementing the custom resource:\n\n```python\n# my_role: iam.role\n\ncr.awscustomresource(self, \"customized\",\n    role=my_role,  # must be assumable by the `lambda.amazonaws.com` service principal\n    timeout=duration.minutes(10),  # defaults to 2 minutes\n    log_retention=logs.retentiondays.one_week,  # defaults to never delete logs\n    function_name=\"my-custom-name\",  # defaults to a cloudformation generated name\n    policy=cr.awscustomresourcepolicy.from_sdk_calls(\n        resources=cr.awscustomresourcepolicy.any_resource\n    )\n)\n```\n\n### restricting the output of the custom resource\n\ncloudformation imposes a hard limit of 4096 bytes for custom resources response\nobjects. if your api call returns an object that exceeds this limit, you can restrict\nthe data returned by the custom resource to specific paths in the api response:\n\n```python\ncr.awscustomresource(self, \"listobjects\",\n    on_create=cr.awssdkcall(\n        service=\"s3\",\n        action=\"listobjectsv2\",\n        parameters={\n            \"bucket\": \"my-bucket\"\n        },\n        physical_resource_id=cr.physicalresourceid.of(\"id\"),\n        output_paths=[\"contents.0.key\", \"contents.1.key\"]\n    ),\n    policy=cr.awscustomresourcepolicy.from_sdk_calls(\n        resources=cr.awscustomresourcepolicy.any_resource\n    )\n)\n```\n\nnote that even if you restrict the output of your custom resource you can still use any\npath in `physicalresourceid.fromresponse()`.\n\n### custom resource examples\n\n#### verify a domain with ses\n\n```python\nimport aws_cdk.aws_route53 as route53\n\n# zone: route53.hostedzone\n\n\nverify_domain_identity = cr.awscustomresource(self, \"verifydomainidentity\",\n    on_create=cr.awssdkcall(\n        service=\"ses\",\n        action=\"verifydomainidentity\",\n        parameters={\n            \"domain\": \"example.com\"\n        },\n        physical_resource_id=cr.physicalresourceid.from_response(\"verificationtoken\")\n    ),\n    policy=cr.awscustomresourcepolicy.from_sdk_calls(\n        resources=cr.awscustomresourcepolicy.any_resource\n    )\n)\nroute53.txtrecord(self, \"sesverificationrecord\",\n    zone=zone,\n    record_name=\"_amazonses.example.com\",\n    values=[verify_domain_identity.get_response_field(\"verificationtoken\")]\n)\n```\n\n#### get the latest version of a secure ssm parameter\n\n```python\nget_parameter = cr.awscustomresource(self, \"getparameter\",\n    on_update=cr.awssdkcall( # will also be called for a create event\n        service=\"ssm\",\n        action=\"getparameter\",\n        parameters={\n            \"name\": \"my-parameter\",\n            \"withdecryption\": true\n        },\n        physical_resource_id=cr.physicalresourceid.of(date.now().to_string())),\n    policy=cr.awscustomresourcepolicy.from_sdk_calls(\n        resources=cr.awscustomresourcepolicy.any_resource\n    )\n)\n\n# use the value in another construct with\nget_parameter.get_response_field(\"parameter.value\")\n```\n\n#### associate a privatehostedzone with vpc shared from another account\n\n```python\nget_parameter = cr.awscustomresource(self, \"associatevpcwithhostedzone\",\n    on_create=cr.awssdkcall(\n        assumed_role_arn=\"arn:aws:iam::otheraccount:role/crossaccount/managehostedzoneconnections\",\n        service=\"route53\",\n        action=\"associatevpcwithhostedzone\",\n        parameters={\n            \"hostedzoneid\": \"hz-123\",\n            \"vpc\": {\n                \"vpcid\": \"vpc-123\",\n                \"vpcregion\": \"region-for-vpc\"\n            }\n        },\n        physical_resource_id=cr.physicalresourceid.of(\"${vpcstack.sharedvpc.vpcid}-${vpcstack.region}-${privatehostedzone.hostedzoneid}\")\n    ),\n    # will ignore any resource and use the assumedrolearn as resource and 'sts:assumerole' for service:action\n    policy=cr.awscustomresourcepolicy.from_sdk_calls(\n        resources=cr.awscustomresourcepolicy.any_resource\n    )\n)\n```\n\n---\n\n\nthis module is part of the [aws cloud development kit](https://github.com/aws/aws-cdk) project.\n",
  "docs_url": null,
  "keywords": "",
  "license": "apache-2.0",
  "name": "aws-cdk.custom-resources",
  "package_url": "https://pypi.org/project/aws-cdk.custom-resources/",
  "project_url": "https://pypi.org/project/aws-cdk.custom-resources/",
  "project_urls": {
    "Homepage": "https://github.com/aws/aws-cdk",
    "Source": "https://github.com/aws/aws-cdk.git"
  },
  "release_url": "https://pypi.org/project/aws-cdk.custom-resources/1.204.0/",
  "requires_dist": [
    "aws-cdk.aws-cloudformation (==1.204.0)",
    "aws-cdk.aws-ec2 (==1.204.0)",
    "aws-cdk.aws-iam (==1.204.0)",
    "aws-cdk.aws-lambda (==1.204.0)",
    "aws-cdk.aws-logs (==1.204.0)",
    "aws-cdk.aws-sns (==1.204.0)",
    "aws-cdk.core (==1.204.0)",
    "constructs (<4.0.0,>=3.3.69)",
    "jsii (<2.0.0,>=1.84.0)",
    "publication (>=0.0.3)",
    "typeguard (~=2.13.3)"
  ],
  "requires_python": "~=3.7",
  "summary": "constructs for implementing cdk custom resources",
  "version": "1.204.0",
  "releases": [],
  "developers": [
    "amazon_web_services"
  ],
  "kwds": "aws_cdk aws_custom2 aws_custom1 aws_custom awsjavascriptsdk",
  "license_kwds": "apache-2.0",
  "libtype": "pypi",
  "id": "pypi_aws_cdk.custom_resources",
  "homepage": "https://github.com/aws/aws-cdk",
  "release_count": 248,
  "dependency_ids": [
    "pypi_aws_cdk.aws_cloudformation",
    "pypi_aws_cdk.aws_ec2",
    "pypi_aws_cdk.aws_iam",
    "pypi_aws_cdk.aws_lambda",
    "pypi_aws_cdk.aws_logs",
    "pypi_aws_cdk.aws_sns",
    "pypi_aws_cdk.core",
    "pypi_constructs",
    "pypi_jsii",
    "pypi_publication",
    "pypi_typeguard"
  ],
  "documentation_summary": "The HTML text is a PyPI (Python Package Index) page for the `aws-cdk.custom-resources` package, version 1.204.0, released on June 19, 2023. This package provides constructs for implementing custom resources in AWS Cloud Development Kit (CDK) but is marked as inactive since AWS CDK v1 reached end-of-support on June 1, 2023. Users are advised to migrate to AWS CDK v2. The package requires Python version 3.7 or newer and is licensed under the Apache-2.0 license. It includes features like handling responses to AWS CloudFormation, validating handler return values, supporting asynchronous handlers, and implementing default behavior for physical resource IDs. The documentation also covers security considerations, handling lifecycle events, and examples of custom resource implementations.",
  "embedding": [
    -0.011731316335499287,
    0.0074621220119297504,
    -0.01650276966392994,
    0.010167141444981098,
    0.0043983468785882,
    0.014321533963084221,
    0.007490822114050388,
    -0.018841857090592384,
    -0.014127805829048157,
    -0.021683204919099808,
    0.01585700921714306,
    0.017335083335638046,
    -0.012893685139715672,
    0.023218678310513496,
    -0.004150805063545704,
    0.009636182337999344,
    0.023807039484381676,
    -0.03797072172164917,
    -0.013891026377677917,
    -0.010533072054386139,
    0.01067657396197319,
    -0.010303468443453312,
    -0.009564431384205818,
    0.006672858726233244,
    -0.0119393952190876,
    0.013216565363109112,
    0.002486178185790777,
    -0.022099360823631287,
    0.019272364675998688,
    0.02446714974939823,
    0.035071972757577896,
    0.012054196558892727,
    -0.01275018323212862,
    -0.001619782648049295,
    -0.007092603482306004,
    -0.02252986840903759,
    -0.015928760170936584,
    0.009629007428884506,
    0.039549246430397034,
    0.0026852875016629696,
    0.01670367270708084,
    0.020951341837644577,
    0.009951887652277946,
    0.024567600339651108,
    -0.031025206670165062,
    0.027136292308568954,
    0.006346391048282385,
    -0.025543417781591415,
    -0.02026253007352352,
    -0.00227989349514246,
    0.013869501650333405,
    0.035990387201309204,
    -0.029130974784493446,
    -0.014378935098648071,
    0.00019025271467398852,
    -0.004552611615508795,
    -0.023735286667943,
    0.031369611620903015,
    0.01732073351740837,
    -0.03154181316494942,
    -0.0022780997678637505,
    -0.019889425486326218,
    -0.015282999724149704,
    -0.009729458950459957,
    -0.0022924498189240694,
    -0.011193182319402695,
    -0.016043562442064285,
    0.036076489835977554,
    -0.011042505502700806,
    -0.006593932863324881,
    0.041472177952528,
    0.02558646723628044,
    -0.00011738043394871056,
    -0.02311822772026062,
    0.0476427786052227,
    -0.020449083298444748,
    -0.03306293860077858,
    0.004290719982236624,
    -0.0016251640627160668,
    0.0005116755492053926,
    -0.014723340049386024,
    0.001735481433570385,
    -0.011351034976541996,
    0.03779851645231247,
    -0.005252185743302107,
    0.00032489828299731016,
    -0.0036090838257223368,
    -0.0035965275019407272,
    -0.008976071141660213,
    -0.01389820221811533,
    0.0031570515129715204,
    0.0011166275944560766,
    -0.013855150900781155,
    0.030479896813631058,
    -0.005270123481750488,
    0.018727054819464684,
    -0.01188199408352375,
    0.0297049842774868,
    0.030422497540712357,
    -0.020047277212142944,
    -0.016215763986110687,
    0.03578948602080345,
    -0.018583552911877632,
    0.0008480091346427798,
    -0.02661968395113945,
    -0.010296293534338474,
    -0.013611197471618652,
    -0.012979786843061447,
    0.01608661189675331,
    -0.0011094524525105953,
    -0.027164993807673454,
    0.023075176402926445,
    -0.029905887320637703,
    -0.009844260290265083,
    -0.015670455992221832,
    -0.018052594736218452,
    0.00927742663770914,
    -0.006296165287494659,
    -0.00867471657693386,
    -0.01160216424614191,
    3.9238922909135e-05,
    0.02944668009877205,
    0.009887311607599258,
    -0.0034691691398620605,
    0.018339598551392555,
    -0.018425701186060905,
    -0.026016974821686745,
    -0.02446714974939823,
    0.014594187960028648,
    -0.016861524432897568,
    0.015613054856657982,
    -0.026834938675165176,
    0.010454145260155201,
    -0.03076690249145031,
    -0.018052594736218452,
    0.012800408527255058,
    -0.0265622828155756,
    -0.0060270982794463634,
    -0.02208501100540161,
    -0.01176719181239605,
    0.008624490350484848,
    0.03165661543607712,
    -0.03180011734366417,
    0.02597392350435257,
    -0.017679488286376,
    0.025112910196185112,
    0.017435533925890923,
    -0.006568819750100374,
    0.0012520579621195793,
    -0.012219224125146866,
    -0.018167397007346153,
    0.019042760133743286,
    -0.006945513188838959,
    -0.009593131951987743,
    -0.013847975991666317,
    0.017980843782424927,
    -0.01647406816482544,
    -1.8708557036006823e-05,
    -0.011150131933391094,
    -0.033579546958208084,
    0.02138184942305088,
    0.04061116278171539,
    -0.02418014407157898,
    -0.010403919965028763,
    0.02176930569112301,
    0.02023383043706417,
    0.052550558000802994,
    -0.023864438757300377,
    -0.02440974861383438,
    0.0205064844340086,
    -0.0007789486553519964,
    -0.0017399658681824803,
    -0.02420884557068348,
    -0.0038135747890919447,
    -0.025873472914099693,
    0.026777537539601326,
    0.006712322123348713,
    0.001687049400061369,
    -0.03774111717939377,
    -0.0027032254729419947,
    0.02409404329955578,
    -0.0026332680135965347,
    0.020434733480215073,
    0.0236778873950243,
    -0.029274478554725647,
    -0.03197232261300087,
    0.00825138483196497,
    -0.007713250815868378,
    0.009550080634653568,
    0.009937536902725697,
    0.01964547112584114,
    0.0412425734102726,
    -0.004871904384344816,
    -0.02738024666905403,
    -0.5675804615020752,
    -0.013431819155812263,
    0.0064576053991913795,
    -0.052665360271930695,
    -0.02485460601747036,
    0.009090873412787914,
    0.019932474941015244,
    0.022960374131798744,
    -0.07502302527427673,
    0.04973791167140007,
    -0.010009288787841797,
    0.018038244917988777,
    0.0003529260866343975,
    0.007548223249614239,
    0.0021597102750092745,
    -0.004706876818090677,
    0.005442326422780752,
    -0.015598705038428307,
    0.0007740157889202237,
    -0.011193182319402695,
    0.012003971263766289,
    0.02538556419312954,
    -0.0356459803879261,
    -0.013051537796854973,
    -0.018540503457188606,
    0.006045036017894745,
    -0.0020897528156638145,
    -0.001277170842513442,
    0.02641878090798855,
    0.01600051112473011,
    0.003262884449213743,
    0.03995105251669884,
    0.00770607590675354,
    -0.009306127205491066,
    0.057400938123464584,
    0.004247669130563736,
    -0.01444351114332676,
    0.04353861138224602,
    0.016660621389746666,
    0.03286203742027283,
    -0.013410293497145176,
    0.00867471657693386,
    0.023276079446077347,
    0.016631921753287315,
    0.006651333533227444,
    -0.0037633490283042192,
    0.020578235387802124,
    0.004739164840430021,
    -0.00040696366340853274,
    -0.0025364039465785027,
    0.015039045363664627,
    -0.008825394324958324,
    0.024926356971263885,
    -0.018899258226156235,
    -0.01003081351518631,
    -0.027954256162047386,
    0.00988013669848442,
    -0.018138695508241653,
    0.013273966498672962,
    0.01994682475924492,
    -0.028126459568738937,
    0.004276369698345661,
    0.00980838481336832,
    -0.028011657297611237,
    -0.0005139177665114403,
    0.009901661425828934,
    -0.0005950862541794777,
    -0.01944456808269024,
    -0.012441652826964855,
    -0.021554050967097282,
    0.016890225932002068,
    0.028571316972374916,
    0.018196096643805504,
    -0.033636949956417084,
    0.043194204568862915,
    0.031398311257362366,
    0.0296188835054636,
    -0.011803067289292812,
    -0.00927742663770914,
    0.022285914048552513,
    0.05183304473757744,
    0.005851307883858681,
    -0.021252697333693504,
    -0.029159676283597946,
    0.014027354307472706,
    0.007157179526984692,
    -0.025098560377955437,
    -0.012405777350068092,
    -0.0029597359243780375,
    -0.011429961770772934,
    -0.005973285064101219,
    -0.001767769455909729,
    -0.015986161306500435,
    -0.03647829592227936,
    0.00268349377438426,
    0.020248180255293846,
    0.021223995834589005,
    0.007096190936863422,
    -0.03432575985789299,
    -0.011473012156784534,
    0.0024108393117785454,
    -0.0119393952190876,
    0.012499053962528706,
    -0.0019677758682519197,
    0.024926356971263885,
    0.009901661425828934,
    -0.009514205157756805,
    -0.0010305262403562665,
    0.023548735305666924,
    -0.043165504932403564,
    -0.003374098800122738,
    -0.015512603335082531,
    0.009198499843478203,
    -0.0019301065476611257,
    0.025184661149978638,
    -0.029877187684178352,
    0.026246579363942146,
    0.021166594699025154,
    0.027609851211309433,
    -0.010009288787841797,
    0.008746467530727386,
    0.0055607156828045845,
    0.0066872090101242065,
    -0.004057528916746378,
    0.04032415896654129,
    0.01773688942193985,
    -0.001032319967634976,
    -0.02709324285387993,
    -0.009980588220059872,
    0.023606134578585625,
    -0.0020215893164277077,
    -0.00972228404134512,
    0.03352214768528938,
    0.011207533068954945,
    0.03346474468708038,
    -0.005320349242538214,
    0.028815271332859993,
    0.0044665103778243065,
    -0.012872160412371159,
    -0.03162791579961777,
    -0.019329765811562538,
    0.007533872965723276,
    0.011860468424856663,
    -0.04692526534199715,
    -0.022242862731218338,
    -0.013790574856102467,
    0.0002639097801875323,
    -0.00997341237962246,
    -0.006454017944633961,
    -0.014479386620223522,
    0.005840545520186424,
    -0.020276881754398346,
    0.017607737332582474,
    0.01676107384264469,
    -0.0014834554167464375,
    0.0035911460872739553,
    -0.00976533442735672,
    -0.009184150025248528,
    -0.0036521346773952246,
    -0.013934077695012093,
    0.014687464572489262,
    -0.0036144652403891087,
    -0.02362048625946045,
    0.015512603335082531,
    -0.009837085381150246,
    0.0041328673250973225,
    -0.03349344804883003,
    0.011372560635209084,
    0.0013803131878376007,
    -0.02903052419424057,
    -0.020635636523365974,
    -0.0010287323966622353,
    -0.013360068202018738,
    0.013582496903836727,
    0.04046766087412834,
    0.009141099639236927,
    -0.013769050128757954,
    0.003585764905437827,
    0.014981644228100777,
    -0.006303340196609497,
    -0.0015883916057646275,
    0.0011632659006863832,
    -0.032661132514476776,
    -0.023964891210198402,
    0.00605221139267087,
    0.019774623215198517,
    0.017636438831686974,
    -0.010784201323986053,
    -0.0179090928286314,
    0.004857554100453854,
    -0.024955056607723236,
    0.038429927080869675,
    -0.024811554700136185,
    0.044399626553058624,
    -0.026634035632014275,
    0.00917697511613369,
    -0.008753643371164799,
    0.012111597694456577,
    -0.017779940739274025,
    0.03082430362701416,
    0.02420884557068348,
    -0.01829654909670353,
    0.011573463678359985,
    -0.0208221897482872,
    -0.020248180255293846,
    -0.018712705001235008,
    0.005883595906198025,
    -0.005173259414732456,
    0.02311822772026062,
    0.0043014828115701675,
    0.008380536921322346,
    -0.00734731974080205,
    0.009858611039817333,
    -0.008129407651722431,
    -0.0010018257889896631,
    0.005295236594974995,
    -0.01905711181461811,
    0.008925845846533775,
    -0.023936191573739052,
    -0.002726544626057148,
    0.017378132790327072,
    -0.01785169169306755,
    0.010009288787841797,
    0.002287068637087941,
    0.009600306861102581,
    -0.002376757562160492,
    -0.009406578727066517,
    0.018511801958084106,
    0.008222684264183044,
    -0.0074549466371536255,
    0.0015022901352494955,
    0.01160216424614191,
    0.005456676706671715,
    -0.02244376577436924,
    -0.01117883250117302,
    0.03168531879782677,
    0.005431563593447208,
    -0.02109484374523163,
    0.03458406403660774,
    -0.033579546958208084,
    0.03550247848033905,
    0.004373233765363693,
    0.035014573484659195,
    0.0034727565944194794,
    -0.0008417309145443141,
    0.00354092032648623,
    -0.004161567892879248,
    -0.005643229465931654,
    0.009851436130702496,
    -0.0037597613409161568,
    -0.01097075454890728,
    0.026404431089758873,
    -0.014170856215059757,
    0.013101764023303986,
    0.002966910833492875,
    0.031455714255571365,
    0.0018744993722066283,
    0.008129407651722431,
    0.03877433389425278,
    0.0017570068594068289,
    0.015986161306500435,
    0.009456804022192955,
    0.026131777092814445,
    -0.0058620707131922245,
    0.047728877514600754,
    -0.02138184942305088,
    -0.024926356971263885,
    -0.02230026386678219,
    -0.010475670918822289,
    -0.01656017079949379,
    -0.007677375338971615,
    -0.02746634930372238,
    -0.01183894369751215,
    -0.024668052792549133,
    0.0238500889390707,
    0.02141054905951023,
    0.038372527807950974,
    0.010446970351040363,
    0.0012188730761408806,
    -0.015541303902864456,
    -0.013037187978625298,
    -0.02606002613902092,
    0.05450218915939331,
    0.007142829243093729,
    -0.008337486535310745,
    -0.04847509041428566,
    -0.022128060460090637,
    0.030221592634916306,
    -0.019688520580530167,
    0.029848488047719002,
    0.0030870940536260605,
    0.03418225795030594,
    0.014056054875254631,
    -0.00010947659029625356,
    -0.004251257050782442,
    -0.00234985095448792,
    0.02905922383069992,
    -0.023276079446077347,
    0.0006950894603505731,
    0.004186681006103754,
    0.019832024350762367,
    0.009083698503673077,
    -0.011716966517269611,
    0.0353015772998333,
    0.029991989955306053,
    0.0017202342860400677,
    -0.006741022691130638,
    0.006382266525179148,
    -0.01823914796113968,
    -0.022400716319680214,
    0.0037597613409161568,
    0.016933277249336243,
    0.0058943587355315685,
    -0.012197699397802353,
    0.03154181316494942,
    -0.0015570004470646381,
    -0.016187064349651337,
    -0.006532944273203611,
    0.050139717757701874,
    0.0102532422170043,
    0.00395707692950964,
    -0.017779940739274025,
    -0.010360869579017162,
    -0.010267592966556549,
    0.019860723987221718,
    0.0016431018011644483,
    -0.0005753547302447259,
    0.02600262500345707,
    -0.03065210022032261,
    -0.015168197453022003,
    -0.029130974784493446,
    -0.012190524488687515,
    0.029303178191184998,
    -0.0015345781575888395,
    -0.009112399071455002,
    0.0014063229318708181,
    -0.002414426999166608,
    0.0003430602955631912,
    0.015756556764245033,
    0.012068547308444977,
    -0.020319931209087372,
    0.02350568398833275,
    0.006403792183846235,
    -0.010963578708469868,
    0.027078891173005104,
    -0.002470034174621105,
    0.03785591945052147,
    0.03432575985789299,
    0.019128862768411636,
    0.009514205157756805,
    0.004358883481472731,
    0.01591441035270691,
    -0.0007995771011337638,
    -0.06038578599691391,
    0.00927742663770914,
    -0.011121431365609169,
    0.012082897126674652,
    0.0354737788438797,
    -0.025342512875795364,
    0.015756556764245033,
    0.03940574452280998,
    0.025600817054510117,
    -0.0017345845699310303,
    0.012520579621195793,
    0.0006112302653491497,
    0.023448282852768898,
    0.020276881754398346,
    -0.017722539603710175,
    0.009657707996666431,
    -0.02979108691215515,
    -0.008280085399746895,
    0.01074832584708929,
    0.00605221139267087,
    0.013862326741218567,
    0.014005828648805618,
    0.005198372527956963,
    -0.041960086673498154,
    -0.01894230954349041,
    0.02911662496626377,
    -0.015067745931446552,
    0.02255856804549694,
    -0.018597902730107307,
    0.00030359713127836585,
    -0.049307405948638916,
    -0.01297261193394661,
    -0.033723048865795135,
    0.006077324040234089,
    -0.0035714146215468645,
    -0.00019137382332701236,
    -0.024639353156089783,
    -0.01776559092104435,
    0.019243665039539337,
    -0.018597902730107307,
    -0.013195040635764599,
    0.0002470930921845138,
    0.009320477023720741,
    -0.002444921061396599,
    0.02684928849339485,
    0.03096780553460121,
    0.020736088976264,
    0.01279323361814022,
    0.009428104385733604,
    -0.0055930037051439285,
    -0.028112109750509262,
    0.00323956529609859,
    -0.012520579621195793,
    -0.012599505484104156,
    -0.04345250874757767,
    0.01210442278534174,
    -0.016100963577628136,
    0.03825772553682327,
    -0.004975943826138973,
    0.0046351258642971516,
    0.04534674063324928,
    -0.017665138468146324,
    0.03059469908475876,
    0.01366142276674509,
    -0.003085300326347351,
    0.022099360823631287,
    0.003946314565837383,
    -0.007297093980014324,
    0.01729203201830387,
    0.018813157454133034,
    -0.01734943315386772,
    -0.012018321081995964,
    -0.031570516526699066,
    0.0041328673250973225,
    0.014027354307472706,
    0.011200358159840107,
    0.02294602431356907,
    -0.0008677407167851925,
    -0.016847174614667892,
    -0.017550336197018623,
    -0.014981644228100777,
    0.00867471657693386,
    -0.007892629131674767,
    0.004383996594697237,
    -0.001579422620125115,
    -0.012262275442481041,
    -0.0047355773858726025,
    -0.02087959088385105,
    0.014120630919933319,
    -0.007146416697651148,
    -0.004287132527679205,
    0.004340945743024349,
    -0.04104166850447655,
    0.011695440858602524,
    0.03154181316494942,
    0.006439667660742998,
    0.029360579326748848,
    0.00835183635354042,
    0.010992279276251793,
    -0.005940997041761875,
    0.0177942905575037,
    -0.005869245622307062,
    0.004283545073121786,
    0.015742206946015358,
    -0.012721482664346695,
    0.007440596353262663,
    0.016273165121674538,
    0.009636182337999344,
    -0.0008529420592822134,
    0.006974213756620884,
    -0.01091335341334343,
    -0.04115647077560425,
    -0.006371504161506891,
    -0.00033453982905484736,
    -0.02323302999138832,
    -0.012018321081995964,
    -0.031111307442188263,
    -0.02171190455555916,
    0.01762208715081215,
    0.00268349377438426,
    0.004627950489521027,
    -0.032431527972221375,
    0.0009910630760714412,
    -0.0175933875143528,
    0.003953489474952221,
    -0.011480187065899372,
    -0.022486817091703415,
    0.00229065609164536,
    -0.005991222802549601,
    0.04399781674146652,
    0.019042760133743286,
    0.04150087758898735,
    1.9675517251016572e-05,
    0.011817418038845062,
    0.0035337451845407486,
    0.014594187960028648,
    -0.021037442609667778,
    -0.001942662987858057,
    0.00823703408241272,
    -0.010626348666846752,
    -0.009263075888156891,
    0.012018321081995964,
    0.03228802606463432,
    -0.007871103473007679,
    -0.01541215181350708,
    0.005901533644646406,
    0.017464235424995422,
    -0.023405231535434723,
    -0.02426624670624733,
    -0.009435279294848442,
    -0.03883173316717148,
    -0.027279796078801155,
    -0.011896343901753426,
    -0.025873472914099693,
    -0.00916262436658144,
    -0.04520323872566223,
    -0.008287260308861732,
    0.008452287875115871,
    -0.012448828667402267,
    0.02059258706867695,
    0.002152535133063793,
    0.008868444710969925,
    -0.005844132974743843,
    0.016230115666985512,
    0.008947371505200863,
    0.03291943669319153,
    -0.000758320209570229,
    0.009234375320374966,
    -0.026103075593709946,
    -0.012348376214504242,
    0.02261596918106079,
    0.011946570128202438,
    0.016330566257238388,
    0.006188538391143084,
    0.0038817382883280516,
    -0.001223357510752976,
    -0.002538197673857212,
    -0.0147663913667202,
    -0.011429961770772934,
    0.021338798105716705,
    -0.051373839378356934,
    -0.005431563593447208,
    -0.021023092791438103,
    -0.014551137574017048,
    -0.028140809386968613,
    -0.0017794290324673057,
    -0.024036642163991928,
    0.015182548202574253,
    0.01602921262383461,
    -0.027021491900086403,
    -0.016201414167881012,
    0.022931674495339394,
    -0.017980843782424927,
    0.029317528009414673,
    0.006256702356040478,
    0.0297049842774868,
    0.014271307736635208,
    0.00032669203937985003,
    -0.008638841100037098,
    -0.02684928849339485,
    -0.005026169586926699,
    -0.0040001277811825275,
    0.010296293534338474,
    0.01122188288718462,
    -0.014594187960028648,
    -0.015383451245725155,
    0.0030565999913960695,
    -0.020736088976264,
    -0.04348120838403702,
    -0.017535986378788948,
    0.019846374168992043,
    0.007017264608293772,
    0.021754955872893333,
    -0.013690123334527016,
    0.0059696976095438,
    0.009829910472035408,
    0.009600306861102581,
    -0.013819275423884392,
    -0.016431018710136414,
    0.02288862317800522,
    -0.016316216439008713,
    -0.020162079483270645,
    -0.008552739396691322,
    0.02532816305756569,
    0.010619173757731915,
    0.011630864813923836,
    -0.02762420102953911,
    -0.022601619362831116,
    -0.003354367334395647,
    -0.011422786861658096,
    -0.004082641564309597,
    -3.542713966453448e-05,
    -0.008265734650194645,
    0.01279323361814022,
    -0.015684805810451508,
    0.047901082783937454,
    -0.014615713618695736,
    -0.029819786548614502,
    -0.004383996594697237,
    -0.007497997488826513,
    0.041902683675289154,
    -0.01089900266379118,
    -0.005732918623834848,
    -0.029231427237391472,
    -0.005377750378102064,
    -0.0021220408380031586,
    -0.03444056212902069,
    0.002866459311917424,
    0.003705947892740369,
    0.003503250889480114,
    -0.013008487410843372,
    -0.00021805628784932196,
    -0.0034942820202559233,
    -0.017076779156923294,
    -0.028757870197296143,
    0.012247924692928791,
    -0.010188666172325611,
    0.007799352519214153,
    0.019487617537379265,
    0.013912552036345005,
    -0.0006085396162234247,
    -0.00944245420396328,
    -0.02732284553349018,
    -0.017679488286376,
    0.014551137574017048,
    0.013144814409315586,
    -0.010561772622168064,
    -0.011028154753148556,
    0.04953701049089432,
    -0.0028126458637416363,
    0.019315415993332863,
    -0.02300342544913292,
    0.014192381873726845,
    -0.011853293515741825,
    0.01350357010960579,
    0.012233574874699116,
    -0.016832824796438217,
    0.019631121307611465,
    -0.0018978185253217816,
    -0.05697042867541313,
    -0.011860468424856663,
    -0.011860468424856663,
    0.015039045363664627,
    -0.014737690798938274,
    0.005001056473702192,
    0.006672858726233244,
    0.019932474941015244,
    -0.004046766087412834,
    -0.025084208697080612,
    -0.019229313358664513,
    0.021812357008457184,
    -0.00417591817677021,
    -0.013302667066454887,
    0.025285113602876663,
    -0.017048077657818794,
    0.01653146930038929,
    8.862390677677467e-05,
    -0.0004964284016750753,
    0.026519233360886574,
    -0.02765290066599846,
    0.015024695545434952,
    0.012986961752176285,
    0.002161504002287984,
    -0.029934588819742203,
    0.015584354288876057,
    0.00017803259834181517,
    -0.025184661149978638,
    -0.02482590451836586,
    0.02067868784070015,
    0.023749638348817825,
    -0.016603220254182816,
    0.021037442609667778,
    0.02785380557179451,
    0.010784201323986053,
    0.008229859173297882,
    -0.015383451245725155,
    -0.0013919727643951774,
    -0.03286203742027283,
    -0.014314359053969383,
    -0.02561516873538494,
    -0.014005828648805618,
    -0.021482300013303757,
    0.046982668340206146,
    0.025514716282486916,
    -0.009406578727066517,
    -0.024510201066732407,
    -0.019344115629792213,
    -0.006271052174270153,
    -0.023835739120841026,
    -0.01470899023115635,
    0.0474131740629673,
    0.028872670605778694,
    -0.0001748934737406671,
    0.026576634496450424,
    -0.005471026990562677,
    -0.020980043336749077,
    0.04244799166917801,
    -0.02317562885582447,
    0.017492935061454773,
    0.005919471848756075,
    -0.0029435919132083654,
    0.010884652845561504,
    -0.001856561517342925,
    -0.03659309819340706,
    0.01183894369751215,
    0.035416379570961,
    -0.0076845502480864525,
    0.00528806122019887,
    0.03555988147854805,
    -0.0044019343331456184,
    0.017478585243225098,
    -0.017693838104605675,
    -0.00772760109975934,
    -0.006084499415010214,
    0.027954256162047386,
    0.016359267756342888,
    -0.028155159205198288,
    -0.011896343901753426,
    0.00825138483196497,
    0.0025884234346449375,
    0.00106998928822577,
    0.017378132790327072,
    0.008402062579989433,
    -0.02264466881752014,
    -0.005958934780210257,
    0.013159165158867836,
    -0.0047929780557751656,
    0.004369646310806274,
    -0.011774367652833462,
    0.02006162703037262,
    -0.018727054819464684,
    0.006332040764391422,
    0.020190779119729996,
    0.018253497779369354,
    0.006737434770911932,
    -0.01650276966392994,
    0.012549280188977718,
    -0.022271564230322838,
    -0.0021166596561670303,
    -0.004222556483000517,
    -0.007670200429856777,
    0.005998397711664438,
    0.0027929143980145454,
    0.04379691556096077,
    -0.014938593842089176,
    -0.02967628464102745,
    -0.02311822772026062,
    0.01460136380046606,
    -0.044227421283721924,
    -0.0068594119511544704,
    -0.01673237234354019,
    -0.03986494988203049,
    0.013094589114189148,
    0.0035283637698739767,
    -0.011523238383233547,
    0.007275568787008524,
    0.00830878596752882,
    -0.01535475067794323,
    -0.007376020308583975,
    0.019258014857769012,
    0.002737307222560048,
    -0.024725453928112984,
    -0.013833626173436642,
    0.003069156315177679,
    0.010583297349512577,
    -0.010324993170797825,
    0.024007942527532578,
    0.1655443012714386,
    0.024524550884962082,
    0.008064831607043743,
    0.005359812639653683,
    0.0042297313921153545,
    -0.0008242416079156101,
    -0.0016054324805736542,
    0.021654503419995308,
    -0.05059892684221268,
    0.03168531879782677,
    -0.015282999724149704,
    0.024036642163991928,
    -0.03171401843428612,
    0.007182292174547911,
    0.0036611035466194153,
    -0.012929561547935009,
    -0.022099360823631287,
    -0.0075266980566084385,
    -0.027753353118896484,
    0.019487617537379265,
    0.05464569106698036,
    -0.017248980700969696,
    0.0017345845699310303,
    -0.019803322851657867,
    0.03409615531563759,
    -0.029848488047719002,
    0.0022763058077543974,
    0.005815432406961918,
    0.01133668515831232,
    0.03346474468708038,
    -0.03799942135810852,
    0.001091514714062214,
    -0.00032288028160110116,
    0.009959062561392784,
    -0.018138695508241653,
    -0.017837341874837875,
    0.0177942905575037,
    -0.015139496885240078,
    0.014952943660318851,
    0.0075912741012871265,
    0.009937536902725697,
    -0.029317528009414673,
    0.0054961396381258965,
    -0.03409615531563759,
    0.008107881993055344,
    -0.008739292621612549,
    -0.01930106431245804,
    -0.016373617574572563,
    -0.001697812112979591,
    0.04003715515136719,
    -0.03670790046453476,
    -0.0016206796281039715,
    0.007863928563892841,
    -0.009248726069927216,
    0.009263075888156891,
    0.01531170029193163,
    -0.0007076459005475044,
    0.0006107818335294724,
    -0.01734943315386772,
    0.004868316929787397,
    -0.022702069953083992,
    0.006357153877615929,
    -0.018196096643805504,
    0.003397417953237891,
    -0.026404431089758873,
    0.005474614445120096,
    -0.04744187369942665,
    -0.018985360860824585,
    0.0026852875016629696,
    0.0015435470268130302,
    -0.02782510407269001,
    -0.02805470861494541,
    -0.0017148529877886176,
    0.00917697511613369,
    0.012685607187449932,
    -0.01295826118439436,
    0.0055678910575807095,
    0.01448656152933836,
    0.03696620464324951,
    0.0238500889390707,
    0.005184022244066,
    0.022515516728162766,
    -0.023390881717205048,
    -0.0064576053991913795,
    0.014981644228100777,
    -0.01427848357707262,
    0.026605334132909775,
    -0.02435234747827053,
    0.021582752466201782,
    0.008545564487576485,
    0.0038171622436493635,
    0.009327651932835579,
    0.008997596800327301,
    -0.017779940739274025,
    0.00031637781648896635,
    0.005420801229774952,
    0.013438994064927101,
    -0.013596846722066402,
    -0.008100707083940506,
    0.005162496585398912,
    -0.052636660635471344,
    0.07203817367553711,
    -0.0017292032716795802,
    0.010138440877199173,
    -0.012986961752176285,
    0.0021166596561670303,
    -0.0013112527085468173,
    0.03300553932785988,
    -0.0064253173768520355,
    -0.005460264161229134,
    -0.0014951149933040142,
    -0.010281942784786224,
    -0.011846118606626987,
    0.014780741184949875,
    -0.008416412398219109,
    0.01452961191534996,
    -0.03533027693629265,
    0.012728657573461533,
    0.012068547308444977,
    -0.025399914011359215,
    -0.02197020873427391,
    -0.016459718346595764,
    0.006715909577906132,
    0.003031486878171563,
    -0.0045059737749397755,
    0.002405458129942417,
    -0.030479896813631058,
    -0.005191197153180838,
    0.0008659469312988222,
    -0.027595501393079758,
    0.013539445586502552,
    -0.0025722794234752655,
    0.017980843782424927,
    -0.012305325828492641,
    0.010324993170797825,
    -0.0047355773858726025,
    0.009564431384205818,
    -0.014314359053969383,
    0.01101380493491888,
    0.034756265580654144,
    0.006446842569857836,
    0.01597181148827076,
    -0.0030081679578870535,
    0.0012251512380316854,
    0.019214963540434837,
    -0.024452799931168556,
    -0.004240494221448898,
    0.016373617574572563,
    -0.024165794253349304,
    -0.015168197453022003,
    -0.04609295353293419,
    0.033895254135131836,
    0.029991989955306053,
    -0.007085428107529879,
    0.019803322851657867,
    -0.043165504932403564,
    -0.01384080108255148,
    -0.04267759621143341,
    0.027523748576641083,
    0.007146416697651148,
    -0.04239059239625931,
    -0.03286203742027283,
    0.006992151495069265,
    0.005557128228247166,
    -0.00927742663770914,
    -0.012491879053413868,
    -0.18138696253299713,
    0.0354737788438797,
    0.012154648080468178,
    -0.045461542904376984,
    0.022156761959195137,
    -0.007483647204935551,
    0.008732117712497711,
    0.011135782115161419,
    -0.027538100257515907,
    0.009593131951987743,
    0.044457025825977325,
    -0.011752841994166374,
    -0.0061239623464643955,
    -0.0009713314939290285,
    -0.01717722974717617,
    -0.043222904205322266,
    -0.026806237176060677,
    0.0014233638066798449,
    0.023319130763411522,
    0.02370658703148365,
    0.02143925055861473,
    -0.009851436130702496,
    -0.0024395398795604706,
    0.033550847321748734,
    0.005105095915496349,
    -0.010267592966556549,
    0.010963578708469868,
    -0.011394086293876171,
    0.010403919965028763,
    -0.01667497307062149,
    -0.029848488047719002,
    0.0038135747890919447,
    0.02488330565392971,
    0.008000255562365055,
    -0.024868955835700035,
    -0.007074665278196335,
    0.011953745037317276,
    -0.03937704116106033,
    -0.024079693481326103,
    0.00635356642305851,
    0.03469886630773544,
    0.004936480429023504,
    0.01706242933869362,
    -0.0208221897482872,
    -0.006489893421530724,
    0.013080238364636898,
    -0.007376020308583975,
    -0.0023085938300937414,
    -0.02347698248922825,
    -0.008502514101564884,
    0.0235343836247921,
    -0.0031857520807534456,
    -0.022989075630903244,
    0.01270713284611702,
    0.01470899023115635,
    0.0014269513776525855,
    0.02185540646314621,
    0.006367916241288185,
    -0.006518593989312649,
    -0.007099778391420841,
    -0.01585700921714306,
    -0.016043562442064285,
    0.01204702164977789,
    0.0026476182974874973,
    -0.003924788907170296,
    -0.004706876818090677,
    -0.018167397007346153,
    0.008502514101564884,
    -0.03073820099234581,
    0.002457477618008852,
    -0.007576923817396164,
    0.021008742973208427,
    -0.01238425262272358,
    -0.006500656250864267,
    0.015340400859713554,
    0.004136455245316029,
    -0.026547932997345924,
    0.039664048701524734,
    0.02429494634270668,
    -0.026275279000401497,
    -0.02141054905951023,
    0.039635345339775085,
    -0.02009032852947712,
    -0.0005506902234628797,
    -0.004660238511860371,
    -0.0037489987444132566,
    0.014063229784369469,
    0.010274767875671387,
    -0.004624363034963608,
    0.014881192706525326,
    0.01356097124516964,
    -0.03085300326347351,
    -0.006583170033991337,
    -0.03656439855694771,
    0.007318619638681412,
    0.031570516526699066,
    0.008861269801855087,
    -0.010906178504228592,
    0.0052593606524169445,
    -0.00980838481336832,
    -0.017579037696123123,
    0.0032216275576502085,
    -0.001571350614540279,
    -0.01911451295018196,
    0.019258014857769012,
    -0.015282999724149704,
    -0.05062762647867203,
    0.019860723987221718,
    0.03883173316717148,
    -0.01667497307062149,
    -0.0024646527599543333,
    0.01818174682557583,
    0.04379691556096077,
    0.01591441035270691,
    0.005908709019422531,
    0.006220826413482428,
    -0.002064639935269952,
    -0.002055671066045761,
    0.017378132790327072,
    -0.004394759424030781,
    0.04385431483387947,
    0.01067657396197319,
    -0.01057612244039774,
    -0.004671001341193914,
    -0.022171111777424812,
    0.007020852062851191,
    -0.1187051385641098,
    -0.01706242933869362,
    0.01373317465186119,
    -0.005209134891629219,
    -0.011372560635209084,
    -0.02238636463880539,
    -0.03802812099456787,
    -0.0007959895301610231,
    -0.020578235387802124,
    0.010037988424301147,
    -0.012872160412371159,
    0.025816071778535843,
    -0.029991989955306053,
    0.028700469061732292,
    0.0031140008941292763,
    -0.020162079483270645,
    -0.02120964601635933,
    -0.010181491263210773,
    -0.01714853011071682,
    0.010963578708469868,
    -0.005991222802549601,
    -0.020463434979319572,
    -0.0029812611173838377,
    -0.009026297368109226,
    -0.019717222079634666,
    0.008445112966001034,
    -0.041902683675289154,
    -0.013891026377677917,
    0.02029123157262802,
    0.014680289663374424,
    0.00040516990702599287,
    -0.025371214374899864,
    0.012549280188977718,
    0.02120964601635933,
    0.01410628017038107,
    -0.010518721304833889,
    -0.03268983215093613,
    -0.029905887320637703,
    0.026461832225322723,
    -0.01448656152933836,
    0.014457860961556435,
    -0.00938505306839943,
    0.027423297986388206,
    -0.008100707083940506,
    -0.018253497779369354,
    0.028700469061732292,
    -0.006371504161506891,
    0.026806237176060677,
    0.022572917863726616,
    -0.008172458037734032,
    -0.031513113528490067,
    -0.019243665039539337,
    -0.01667497307062149,
    0.004610012751072645,
    0.01325244177132845,
    -0.027925556525588036,
    0.0036718661431223154,
    0.012456003576517105,
    -0.00825138483196497,
    -0.0071535916067659855,
    0.0024915593676269054,
    0.0033113164827227592,
    -0.012599505484104156,
    0.005653992295265198,
    0.02079349011182785,
    0.026949739083647728,
    -0.010848777368664742,
    -0.012699957005679607,
    0.004405521787703037,
    -0.02821256034076214,
    -0.02947538159787655,
    0.0037597613409161568,
    0.002968704793602228,
    -0.01967417076230049,
    -0.01486684288829565,
    0.005011819303035736,
    0.005248598288744688,
    -0.004344533197581768,
    0.0071930550038814545,
    -0.027982957661151886,
    -0.005151734221726656,
    0.014070404693484306,
    0.004211793653666973,
    -0.017105478793382645,
    -0.009571606293320656,
    0.0038028121925890446,
    0.012850634753704071,
    0.0007538357167504728,
    0.012212049216032028,
    -0.04902040213346481,
    0.02914532646536827,
    -0.007799352519214153,
    0.039721447974443436,
    0.019042760133743286,
    0.01588570885360241,
    0.021166594699025154,
    -0.011020979844033718,
    0.0037095355801284313,
    -0.01273583248257637,
    -0.012743008323013783,
    -0.021281396970152855,
    0.027251094579696655,
    -0.07559703290462494,
    0.01617271453142166,
    -0.0025686919689178467,
    -0.018540503457188606,
    0.014199556782841682,
    -0.015900058671832085,
    0.0043337708339095116,
    -0.008394886739552021,
    0.0019301065476611257,
    0.026892339810729027,
    -0.008373362012207508,
    0.006145488005131483,
    0.0236491858959198,
    0.013216565363109112,
    -0.016201414167881012,
    -0.01067657396197319,
    0.013474869541823864,
    -0.006400204263627529,
    0.04032415896654129,
    0.011264934204518795,
    0.006834299303591251,
    0.0015444440068677068,
    0.020664338022470474,
    0.01877010613679886,
    -0.018784455955028534,
    -0.0018906433833763003,
    0.006109612062573433,
    0.01641666889190674,
    -0.003487106878310442,
    -0.025514716282486916,
    0.03323514387011528,
    -9.905025217449293e-05,
    0.000603606749791652,
    0.03220192715525627,
    0.02261596918106079,
    -0.007013677153736353,
    0.027495048940181732,
    0.010877477936446667,
    0.024811554700136185,
    -0.003438674844801426,
    -0.010712449438869953,
    -0.044227421283721924,
    0.002554341685026884,
    0.010224541649222374,
    -0.03154181316494942,
    -0.00605221139267087,
    -0.017550336197018623,
    0.009514205157756805,
    0.03200102224946022,
    0.025830421596765518,
    0.016890225932002068,
    0.0002544924500398338,
    -0.03461276367306709,
    -0.030508598312735558,
    -0.006210064049810171,
    -0.02020513080060482,
    0.004107754677534103,
    -0.017693838104605675,
    -0.027251094579696655,
    0.0056324671022593975,
    0.04721226915717125,
    0.01667497307062149,
    0.02729414589703083,
    -0.006561644840985537,
    0.02423754520714283,
    -0.007049552630633116,
    -0.02967628464102745,
    -0.016818474978208542,
    -0.004599249921739101,
    0.0008986834436655045,
    -0.024452799931168556,
    -0.010095389559864998,
    -0.0178803913295269,
    0.012922385707497597,
    0.008803868666291237,
    -0.04637995734810829,
    0.002724750665947795,
    -0.019430216401815414,
    -0.002328325528651476,
    0.019688520580530167,
    0.016847174614667892,
    -0.005406450945883989,
    -0.0417017824947834,
    0.041902683675289154,
    -0.003734648460522294,
    -0.019659820944070816,
    -0.019918125122785568,
    -0.005542777944356203,
    0.009600306861102581,
    -0.0056252917274832726,
    0.00855991430580616,
    0.010382394306361675,
    0.013969953171908855,
    -0.014981644228100777,
    0.015440852381289005,
    -0.006626220885664225,
    0.001115730730816722,
    0.015268648974597454,
    0.020133377984166145,
    0.025629518553614616,
    -0.0042297313921153545,
    0.016301866620779037,
    0.0087966937571764,
    -0.017894743010401726,
    -0.0012789646862074733,
    0.0006811876664869487,
    -0.011257758364081383,
    -0.02029123157262802,
    0.021754955872893333,
    0.0010287323966622353,
    0.0024718279018998146,
    -0.009571606293320656,
    -0.02250116690993309,
    0.02034863270819187,
    -0.020721739158034325,
    0.022831222042441368,
    0.0004585348360706121,
    0.001403632340952754,
    -0.018167397007346153,
    -0.0011919663520529866,
    0.004595662467181683,
    0.000553829362615943,
    0.018095646053552628,
    -0.021683204919099808,
    -0.010777025483548641,
    0.025313813239336014,
    -0.006382266525179148,
    -0.0039355517365038395,
    0.012864984571933746,
    -0.0073831956833601,
    0.003641371848061681,
    -0.014895543456077576,
    -0.04505973681807518,
    -0.0049651809968054295,
    -0.01399865373969078,
    0.00823703408241272,
    0.024567600339651108,
    -0.0018529739463701844,
    -0.0024969407822936773,
    0.09608916938304901,
    -0.0009228994604200125,
    -0.012312500737607479,
    0.015096446499228477,
    0.00550690246745944,
    0.02732284553349018,
    -0.017894743010401726,
    -0.01014561578631401,
    0.02288862317800522,
    0.009356352500617504,
    0.00046817638212814927,
    0.007074665278196335,
    -0.02264466881752014,
    0.007863928563892841,
    -0.02709324285387993,
    0.011774367652833462,
    -0.02706454135477543,
    0.0179090928286314,
    -0.004929305519908667,
    0.01653146930038929,
    0.01588570885360241,
    0.006249526981264353,
    0.028226910158991814,
    -0.017306381836533546,
    -0.04609295353293419,
    -0.004681763704866171,
    0.04009455442428589,
    0.004053940996527672,
    0.005844132974743843,
    -0.03346474468708038,
    0.005438738968223333,
    -0.009758159518241882,
    -0.022429415956139565,
    -0.019315415993332863,
    -0.014823791570961475,
    0.02773900330066681,
    -0.006454017944633961,
    -0.0007358979783020914,
    -0.009004771709442139,
    0.0058943587355315685,
    -0.0021274222526699305,
    -0.007899804040789604,
    -0.028786569833755493,
    -0.03995105251669884,
    0.01582830771803856,
    0.018626604229211807,
    0.021525351330637932,
    -0.005765206646174192,
    -0.03673660010099411
  ]
}
{
  "classifiers": [
    "environment :: web environment",
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "operating system :: os independent",
    "programming language :: python",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "programming language :: python :: implementation :: cpython",
    "programming language :: python :: implementation :: pypy",
    "topic :: internet :: www/http :: dynamic content",
    "topic :: software development :: libraries :: python modules"
  ],
  "description": "flask-cors\n==========\n\n|build status| |latest version| |supported python versions|\n|license|\n\na flask extension for handling cross origin resource sharing (cors), making cross-origin ajax possible.\n\nthis package has a simple philosophy: when you want to enable cors, you wish to enable it for all use cases on a domain. \nthis means no mucking around with different allowed headers, methods, etc. \n\nby default, submission of cookies across domains is disabled due to the security implications. \nplease see the documentation for how to enable credential'ed requests, and please make sure you add some sort of `csrf <http://en.wikipedia.org/wiki/cross-site_request_forgery>`__ protection before doing so!\n\ninstallation\n------------\n\ninstall the extension with using pip, or easy\\_install.\n\n.. code:: bash\n\n    $ pip install -u flask-cors\n\nusage\n-----\n\nthis package exposes a flask extension which by default enables cors support on all routes, for all origins and methods. \nit allows parameterization of all cors headers on a per-resource level. \nthe package also contains a decorator, for those who prefer this approach.\n\nsimple usage\n~~~~~~~~~~~~\n\nin the simplest case, initialize the flask-cors extension with default arguments in order to allow cors for all domains on all routes. \nsee the full list of options in the `documentation <https://flask-cors.corydolphin.com/en/latest/api.html#extension>`__.\n\n.. code:: python\n\n\n    from flask import flask\n    from flask_cors import cors\n\n    app = flask(__name__)\n    cors(app)\n\n    @app.route(\"/\")\n    def helloworld():\n      return \"hello, cross-origin-world!\"\n\nresource specific cors\n^^^^^^^^^^^^^^^^^^^^^^\n\nalternatively, you can specify cors options on a resource and origin level of granularity by passing a dictionary as the `resources` option, mapping paths to a set of options. \nsee the full list of options in the `documentation <https://flask-cors.corydolphin.com/en/latest/api.html#extension>`__.\n\n.. code:: python\n\n    app = flask(__name__)\n    cors = cors(app, resources={r\"/api/*\": {\"origins\": \"*\"}})\n\n    @app.route(\"/api/v1/users\")\n    def list_users():\n      return \"user example\"\n\nroute specific cors via decorator\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nthis extension also exposes a simple decorator to decorate flask routes with. \nsimply add ``@cross_origin()`` below a call to flask's ``@app.route(..)`` to allow cors on a given route. \nsee the full list of options in the `decorator documentation <https://flask-cors.corydolphin.com/en/latest/api.html#decorator>`__.\n\n.. code:: python\n\n    @app.route(\"/\")\n    @cross_origin()\n    def helloworld():\n      return \"hello, cross-origin-world!\"\n\ndocumentation\n-------------\n\nfor a full list of options, please see the full `documentation <https://flask-cors.corydolphin.com/en/latest/api.html>`__\n\ntroubleshooting\n---------------\n\nif things aren't working as you expect, enable logging to help understand what is going on under the hood, and why.\n\n.. code:: python\n\n    logging.getlogger('flask_cors').level = logging.debug\n\n\ntests\n-----\n\na simple set of tests is included in ``test/``. \nto run, install nose, and simply invoke ``nosetests`` or ``python setup.py test`` to exercise the tests.\n\nif nosetests does not work for you, due to it no longer working with newer python versions.\nyou can use pytest to run the tests instead.\n\ncontributing\n------------\n\nquestions, comments or improvements? \nplease create an issue on `github <https://github.com/corydolphin/flask-cors>`__, tweet at `@corydolphin <https://twitter.com/corydolphin>`__ or send me an email. \ni do my best to include every contribution proposed in any way that i can.\n\ncredits\n-------\n\nthis flask extension is based upon the `decorator for the http access control <https://web.archive.org/web/20190128010149/http://flask.pocoo.org/snippets/56/>`__ written by armin ronacher.\n\n.. |build status| image:: https://api.travis-ci.org/corydolphin/flask-cors.svg?branch=master\n   :target: https://travis-ci.org/corydolphin/flask-cors\n.. |latest version| image:: https://img.shields.io/pypi/v/flask-cors.svg\n   :target: https://pypi.python.org/pypi/flask-cors/\n.. |supported python versions| image:: https://img.shields.io/pypi/pyversions/flask-cors.svg\n   :target: https://img.shields.io/pypi/pyversions/flask-cors.svg\n.. |license| image:: http://img.shields.io/:license-mit-blue.svg\n   :target: https://pypi.python.org/pypi/flask-cors/\n",
  "docs_url": null,
  "keywords": "",
  "license": "mit",
  "name": "flask-cors",
  "package_url": "https://pypi.org/project/Flask-Cors/",
  "project_url": "https://pypi.org/project/Flask-Cors/",
  "project_urls": {
    "Homepage": "https://github.com/corydolphin/flask-cors"
  },
  "release_url": "https://pypi.org/project/Flask-Cors/4.0.0/",
  "requires_dist": [
    "Flask (>=0.9)"
  ],
  "requires_python": "",
  "summary": "a flask extension adding a decorator for cors support",
  "version": "4.0.0",
  "releases": [],
  "developers": [
    "cory_dolphin",
    "corydolphin@gmail.com"
  ],
  "kwds": "flask_cors flask cors site_request_forgery cross_origin",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_flask_cors",
  "homepage": "https://github.com/corydolphin/flask-cors",
  "release_count": 44,
  "dependency_ids": [
    "pypi_flask"
  ]
}
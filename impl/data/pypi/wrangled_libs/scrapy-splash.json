{
  "classifiers": [
    "development status :: 4 - beta",
    "framework :: scrapy",
    "intended audience :: developers",
    "license :: osi approved :: bsd license",
    "operating system :: os independent",
    "programming language :: python",
    "programming language :: python :: 2",
    "programming language :: python :: 2.7",
    "programming language :: python :: 3",
    "programming language :: python :: 3.4",
    "programming language :: python :: 3.5",
    "programming language :: python :: 3.6",
    "topic :: internet :: www/http",
    "topic :: software development :: libraries :: application frameworks",
    "topic :: software development :: libraries :: python modules"
  ],
  "description": "javascript support for scrapy using splash\n==============================================\nscrapy & javascript integration through splash\n==============================================\n\n.. image:: https://img.shields.io/pypi/v/scrapy-splash.svg\n   :target: https://pypi.python.org/pypi/scrapy-splash\n   :alt: pypi version\n\n.. image:: https://github.com/scrapy-plugins/scrapy-splash/workflows/tests/badge.svg\n   :target: https://github.com/scrapy-plugins/scrapy-splash/actions/workflows/tests.yml\n   :alt: test status\n\n.. image:: http://codecov.io/github/scrapy-plugins/scrapy-splash/coverage.svg?branch=master\n   :target: http://codecov.io/github/scrapy-plugins/scrapy-splash?branch=master\n   :alt: code coverage\n\nthis library provides scrapy_ and javascript integration using splash_.\nthe license is bsd 3-clause.\n\n.. _scrapy: https://github.com/scrapy/scrapy\n.. _splash: https://github.com/scrapinghub/splash\n\ninstallation\n============\n\ninstall scrapy-splash using pip::\n\n    $ pip install scrapy-splash\n\nscrapy-splash uses splash_ http api, so you also need a splash instance.\nusually to install & run splash, something like this is enough::\n\n    $ docker run -p 8050:8050 scrapinghub/splash\n\ncheck splash `install docs`_ for more info.\n\n.. _install docs: http://splash.readthedocs.org/en/latest/install.html\n\n\nconfiguration\n=============\n\n1. add the splash server address to ``settings.py`` of your scrapy project\n   like this::\n\n      splash_url = 'http://192.168.59.103:8050'\n\n2. enable the splash middleware by adding it to ``downloader_middlewares``\n   in your ``settings.py`` file and changing httpcompressionmiddleware\n   priority::\n\n      downloader_middlewares = {\n          'scrapy_splash.splashcookiesmiddleware': 723,\n          'scrapy_splash.splashmiddleware': 725,\n          'scrapy.downloadermiddlewares.httpcompression.httpcompressionmiddleware': 810,\n      }\n\n   order `723` is just before `httpproxymiddleware` (750) in default\n   scrapy settings.\n\n   httpcompressionmiddleware priority should be changed in order to allow\n   advanced response processing; see https://github.com/scrapy/scrapy/issues/1895\n   for details.\n\n3. enable ``splashdeduplicateargsmiddleware`` by adding it to\n   ``spider_middlewares`` in your ``settings.py``::\n\n      spider_middlewares = {\n          'scrapy_splash.splashdeduplicateargsmiddleware': 100,\n      }\n\n   this middleware is needed to support ``cache_args`` feature; it allows\n   to save disk space by not storing duplicate splash arguments multiple\n   times in a disk request queue. if splash 2.1+ is used the middleware\n   also allows to save network traffic by not sending these duplicate\n   arguments to splash server multiple times.\n\n4. set a custom ``dupefilter_class``::\n\n      dupefilter_class = 'scrapy_splash.splashawaredupefilter'\n\n5. if you use scrapy http cache then a custom cache storage backend\n   is required. scrapy-splash provides a subclass of\n   ``scrapy.contrib.httpcache.filesystemcachestorage``::\n\n      httpcache_storage = 'scrapy_splash.splashawarefscachestorage'\n\n   if you use other cache storage then it is necesary to subclass it and\n   replace all ``scrapy.util.request.request_fingerprint`` calls with\n   ``scrapy_splash.splash_request_fingerprint``.\n\n.. note::\n\n    steps (4) and (5) are necessary because scrapy doesn't provide a way\n    to override request fingerprints calculation algorithm globally; this\n    could change in future.\n\n\nthere are also some additional options available.\nput them into your ``settings.py`` if you want to change the defaults:\n\n* ``splash_cookies_debug`` is ``false`` by default.\n  set to ``true`` to enable debugging cookies in the ``splashcookiesmiddleware``.\n  this option is similar to ``cookies_debug``\n  for the built-in scarpy cookies middleware: it logs sent and received cookies\n  for all requests.\n* ``splash_log_400`` is ``true`` by default - it instructs to log all 400 errors\n  from splash. they are important because they show errors occurred\n  when executing the splash script. set it to ``false`` to disable this logging.\n* ``splash_slot_policy`` is ``scrapy_splash.slotpolicy.per_domain`` (as object, not just a string) by default.\n  it specifies how concurrency & politeness are maintained for splash requests,\n  and specify the default value for ``slot_policy`` argument for\n  ``splashrequest``, which is described below.\n\n\nusage\n=====\n\nrequests\n--------\n\nthe easiest way to render requests with splash is to\nuse ``scrapy_splash.splashrequest``::\n\n    yield splashrequest(url, self.parse_result,\n        args={\n            # optional; parameters passed to splash http api\n            'wait': 0.5,\n\n            # 'url' is prefilled from request url\n            # 'http_method' is set to 'post' for post requests\n            # 'body' is set to request body for post requests\n        },\n        endpoint='render.json', # optional; default is render.html\n        splash_url='<url>',     # optional; overrides splash_url\n        slot_policy=scrapy_splash.slotpolicy.per_domain,  # optional\n    )\n\nalternatively, you can use regular scrapy.request and\n``'splash'`` request `meta` key::\n\n    yield scrapy.request(url, self.parse_result, meta={\n        'splash': {\n            'args': {\n                # set rendering arguments here\n                'html': 1,\n                'png': 1,\n\n                # 'url' is prefilled from request url\n                # 'http_method' is set to 'post' for post requests\n                # 'body' is set to request body for post requests\n            },\n\n            # optional parameters\n            'endpoint': 'render.json',  # optional; default is render.json\n            'splash_url': '<url>',      # optional; overrides splash_url\n            'slot_policy': scrapy_splash.slotpolicy.per_domain,\n            'splash_headers': {},       # optional; a dict with headers sent to splash\n            'dont_process_response': true, # optional, default is false\n            'dont_send_headers': true,  # optional, default is false\n            'magic_response': false,    # optional, default is true\n        }\n    })\n\nuse ``request.meta['splash']`` api in middlewares or when scrapy.request\nsubclasses are used (there is also ``splashformrequest`` described below).\nfor example, ``meta['splash']`` allows to create a middleware which enables\nsplash for all outgoing requests by default.\n\n``splashrequest`` is a convenient utility to fill ``request.meta['splash']``;\nit should be easier to use in most cases. for each ``request.meta['splash']``\nkey there is a corresponding ``splashrequest`` keyword argument: for example,\nto set ``meta['splash']['args']`` use ``splashrequest(..., args=myargs)``.\n\n* ``meta['splash']['args']`` contains arguments sent to splash.\n  scrapy-splash adds some default keys/values to ``args``:\n\n  * 'url' is set to request.url;\n  * 'http_method' is set to 'post' for post requests;\n  * 'body' is set to to request.body for post requests.\n\n  you can override default values by setting them explicitly.\n\n  note that by default scrapy escapes url fragments using ajax escaping scheme.\n  if you want to pass a url with a fragment to splash then set ``url``\n  in ``args`` dict manually. this is handled automatically if you use\n  ``splashrequest``, but you need to keep that in mind if you use raw\n  ``meta['splash']`` api.\n\n  splash 1.8+ is required to handle post requests; in earlier splash versions\n  'http_method' and 'body' arguments are ignored. if you work with ``/execute``\n  endpoint and want to support post requests you have to handle\n  ``http_method`` and ``body`` arguments in your lua script manually.\n\n* ``meta['splash']['cache_args']`` is a list of argument names to cache\n  on splash side. these arguments are sent to splash only once, then cached\n  values are used; it allows to save network traffic and decreases request\n  queue disk memory usage. use ``cache_args`` only for large arguments\n  which don't change with each request; ``lua_source`` is a good candidate\n  (if you don't use string formatting to build it). splash 2.1+ is required\n  for this feature to work.\n\n* ``meta['splash']['endpoint']`` is the splash endpoint to use.\n  in case of splashrequest\n  `render.html <http://splash.readthedocs.org/en/latest/api.html#render-html>`_\n  is used by default. if you're using raw scrapy.request then\n  `render.json <http://splash.readthedocs.org/en/latest/api.html#render-json>`_\n  is a default (for historical reasons). it is better to always pass endpoint\n  explicitly.\n\n  see splash `http api docs`_ for a full list of available endpoints\n  and parameters.\n\n.. _http api docs: http://splash.readthedocs.org/en/latest/api.html\n\n* ``meta['splash']['splash_url']`` overrides the splash url set\n  in ``settings.py``.\n\n* ``meta['splash']['splash_headers']`` allows to add or change headers\n  which are sent to splash server. note that this option **is not** for\n  setting headers which are sent to the remote website.\n\n* ``meta['splash']['slot_policy']`` customize how\n  concurrency & politeness are maintained for splash requests.\n\n  currently there are 3 policies available:\n\n  1. ``scrapy_splash.slotpolicy.per_domain`` (default) - send splash requests to\n     downloader slots based on url being rendered. it is useful if you want\n     to maintain per-domain politeness & concurrency settings.\n\n  2. ``scrapy_splash.slotpolicy.single_slot`` - send all splash requests to\n     a single downloader slot. it is useful if you want to throttle requests\n     to splash.\n\n  3. ``scrapy_splash.slotpolicy.scrapy_default`` - don't do anything with slots.\n     it is similar to ``single_slot`` policy, but can be different if you access\n     other services on the same address as splash.\n\n* ``meta['splash']['dont_process_response']`` - when set to true,\n  splashmiddleware won't change the response to a custom scrapy.response\n  subclass. by default for splash requests one of splashresponse,\n  splashtextresponse or splashjsonresponse is passed to the callback.\n\n* ``meta['splash']['dont_send_headers']``: by default scrapy-splash passes\n  request headers to splash in 'headers' json post field. for all render.xxx\n  endpoints it means scrapy header options are respected by default\n  (http://splash.readthedocs.org/en/stable/api.html#arg-headers). in lua\n  scripts you can use ``headers`` argument of ``splash:go`` to apply the\n  passed headers: ``splash:go{url, headers=splash.args.headers}``.\n\n  set 'dont_send_headers' to true if you don't want to pass ``headers``\n  to splash.\n\n* ``meta['splash']['http_status_from_error_code']`` - set response.status\n  to http error code when ``assert(splash:go(..))`` fails; it requires\n  ``meta['splash']['magic_response']=true``. ``http_status_from_error_code``\n  option is false by default if you use raw meta api;\n  splashrequest sets it to true by default.\n\n* ``meta['splash']['magic_response']`` - when set to true and a json\n  response is received from splash, several attributes of the response\n  (headers, body, url, status code) are filled using data returned in json:\n\n  * response.headers are filled from 'headers' keys;\n  * response.url is set to the value of 'url' key;\n  * response.body is set to the value of 'html' key,\n    or to base64-decoded value of 'body' key;\n  * response.status is set to the value of 'http_status' key.\n    when ``meta['splash']['http_status_from_error_code']`` is true\n    and ``assert(splash:go(..))`` fails with an http error\n    response.status is also set to http error code.\n\n  original url, status and headers are available as ``response.real_url``,\n  ``response.splash_response_status`` and ``response.splash_response_headers``.\n\n  this option is set to true by default if you use splashrequest.\n  ``render.json`` and ``execute`` endpoints may not have all the necessary\n  keys/values in the response.\n  for non-json endpoints, only url is filled, regardless of the\n  ``magic_response`` setting.\n\n\nuse ``scrapy_splash.splashformrequest`` if you want to make a ``formrequest``\nvia splash. it accepts the same arguments as ``splashrequest``,\nand also ``formdata``, like ``formrequest`` from scrapy::\n\n    >>> splashformrequest('http://example.com', formdata={'foo': 'bar'})\n    <post http://example.com>\n\n``splashformrequest.from_response`` is also supported, and works as described\nin `scrapy documentation <http://scrapy.readthedocs.org/en/latest/topics/request-response.html#scrapy.http.formrequest.from_response>`_.\n\nresponses\n---------\n\nscrapy-splash returns response subclasses for splash requests:\n\n* splashresponse is returned for binary splash responses - e.g. for\n  /render.png responses;\n* splashtextresponse is returned when the result is text - e.g. for\n  /render.html responses;\n* splashjsonresponse is returned when the result is a json object - e.g.\n  for /render.json responses or /execute responses when script returns\n  a lua table.\n\nto use standard response classes set ``meta['splash']['dont_process_response']=true``\nor pass ``dont_process_response=true`` argument to splashrequest.\n\nall these responses set ``response.url`` to the url of the original request\n(i.e. to the url of a website you want to render), not to the url of the\nrequested splash endpoint. \"true\" url is still available as\n``response.real_url``.\n\nsplashjsonresponse provide extra features:\n\n* ``response.data`` attribute contains response data decoded from json;\n  you can access it like ``response.data['html']``.\n\n* if splash session handling is configured, you can access current cookies\n  as ``response.cookiejar``; it is a cookiejar instance.\n\n* if scrapy-splash response magic is enabled in request (default),\n  several response attributes (headers, body, url, status code)\n  are set automatically from original response body:\n\n  * response.headers are filled from 'headers' keys;\n  * response.url is set to the value of 'url' key;\n  * response.body is set to the value of 'html' key,\n    or to base64-decoded value of 'body' key;\n  * response.status is set from the value of 'http_status' key.\n\nwhen ``response.body`` is updated in splashjsonresponse\n(either from 'html' or from 'body' keys) familiar ``response.css``\nand ``response.xpath`` methods are available.\n\nto turn off special handling of json result keys either set\n``meta['splash']['magic_response']=false`` or pass ``magic_response=false``\nargument to splashrequest.\n\nsession handling\n================\n\nsplash itself is stateless - each request starts from a clean state.\nin order to support sessions the following is required:\n\n1. client (scrapy) must send current cookies to splash;\n2. splash script should make requests using these cookies and update\n   them from http response headers or javascript code;\n3. updated cookies should be sent back to the client;\n4. client should merge current cookies wiht the updated cookies.\n\nfor (2) and (3) splash provides ``splash:get_cookies()`` and\n``splash:init_cookies()`` methods which can be used in splash lua scripts.\n\nscrapy-splash provides helpers for (1) and (4): to send current cookies\nin 'cookies' field and merge cookies back from 'cookies' response field\nset ``request.meta['splash']['session_id']`` to the session\nidentifier. if you only want a single session use the same ``session_id`` for\nall request; any value like '1' or 'foo' is fine.\n\nfor scrapy-splash session handling to work you must use ``/execute`` endpoint\nand a lua script which accepts 'cookies' argument and returns 'cookies'\nfield in the result::\n\n   function main(splash)\n       splash:init_cookies(splash.args.cookies)\n\n       -- ... your script\n\n       return {\n           cookies = splash:get_cookies(),\n           -- ... other results, e.g. html\n       }\n   end\n\nsplashrequest sets ``session_id`` automatically for ``/execute`` endpoint,\ni.e. cookie handling is enabled by default if you use splashrequest,\n``/execute`` endpoint and a compatible lua rendering script.\n\nif you want to start from the same set of cookies, but then 'fork' sessions\nset ``request.meta['splash']['new_session_id']`` in addition to\n``session_id``. request cookies will be fetched from cookiejar ``session_id``,\nbut response cookies will be merged back to the ``new_session_id`` cookiejar.\n\nstandard scrapy ``cookies`` argument can be used with ``splashrequest``\nto add cookies to the current splash cookiejar.\n\nexamples\n========\n\nget html contents::\n\n    import scrapy\n    from scrapy_splash import splashrequest\n\n    class myspider(scrapy.spider):\n        start_urls = [\"http://example.com\", \"http://example.com/foo\"]\n\n        def start_requests(self):\n            for url in self.start_urls:\n                yield splashrequest(url, self.parse, args={'wait': 0.5})\n\n        def parse(self, response):\n            # response.body is a result of render.html call; it\n            # contains html processed by a browser.\n            # ...\n\nget html contents and a screenshot::\n\n    import json\n    import base64\n    import scrapy\n    from scrapy_splash import splashrequest\n\n    class myspider(scrapy.spider):\n\n        # ...\n            splash_args = {\n                'html': 1,\n                'png': 1,\n                'width': 600,\n                'render_all': 1,\n            }\n            yield splashrequest(url, self.parse_result, endpoint='render.json',\n                                args=splash_args)\n\n        # ...\n        def parse_result(self, response):\n            # magic responses are turned on by default,\n            # so the result under 'html' key is available as response.body\n            html = response.body\n\n            # you can also query the html result as usual\n            title = response.css('title').extract_first()\n\n            # full decoded json data is available as response.data:\n            png_bytes = base64.b64decode(response.data['png'])\n\n            # ...\n\nrun a simple `splash lua script`_::\n\n    import json\n    import base64\n    from scrapy_splash import splashrequest\n\n\n    class myspider(scrapy.spider):\n\n        # ...\n            script = \"\"\"\n            function main(splash)\n                assert(splash:go(splash.args.url))\n                return splash:evaljs(\"document.title\")\n            end\n            \"\"\"\n            yield splashrequest(url, self.parse_result, endpoint='execute',\n                                args={'lua_source': script})\n\n        # ...\n        def parse_result(self, response):\n            doc_title = response.text\n            # ...\n\n\nmore complex `splash lua script`_ example - get a screenshot of an html\nelement by its css selector (it requires splash 2.1+).\nnote how are arguments passed to the script::\n\n    import json\n    import base64\n    from scrapy_splash import splashrequest\n\n    script = \"\"\"\n    -- arguments:\n    -- * url - url to render;\n    -- * css - css selector to render;\n    -- * pad - screenshot padding size.\n\n    -- this function adds padding around region\n    function pad(r, pad)\n      return {r[1]-pad, r[2]-pad, r[3]+pad, r[4]+pad}\n    end\n\n    -- main script\n    function main(splash)\n\n      -- this function returns element bounding box\n      local get_bbox = splash:jsfunc([[\n        function(css) {\n          var el = document.queryselector(css);\n          var r = el.getboundingclientrect();\n          return [r.left, r.top, r.right, r.bottom];\n        }\n      ]])\n\n      assert(splash:go(splash.args.url))\n      assert(splash:wait(0.5))\n\n      -- don't crop image by a viewport\n      splash:set_viewport_full()\n\n      local region = pad(get_bbox(splash.args.css), splash.args.pad)\n      return splash:png{region=region}\n    end\n    \"\"\"\n\n    class myspider(scrapy.spider):\n\n\n        # ...\n            yield splashrequest(url, self.parse_element_screenshot,\n                endpoint='execute',\n                args={\n                    'lua_source': script,\n                    'pad': 32,\n                    'css': 'a.title'\n                }\n             )\n\n        # ...\n        def parse_element_screenshot(self, response):\n            image_data = response.body  # binary image data in png format\n            # ...\n\n\nuse a lua script to get an html response with cookies, headers, body\nand method set to correct values; ``lua_source`` argument value is cached\non splash server and is not sent with each request (it requires splash 2.1+)::\n\n    import scrapy\n    from scrapy_splash import splashrequest\n\n    script = \"\"\"\n    function main(splash)\n      splash:init_cookies(splash.args.cookies)\n      assert(splash:go{\n        splash.args.url,\n        headers=splash.args.headers,\n        http_method=splash.args.http_method,\n        body=splash.args.body,\n        })\n      assert(splash:wait(0.5))\n\n      local entries = splash:history()\n      local last_response = entries[#entries].response\n      return {\n        url = splash:url(),\n        headers = last_response.headers,\n        http_status = last_response.status,\n        cookies = splash:get_cookies(),\n        html = splash:html(),\n      }\n    end\n    \"\"\"\n\n    class myspider(scrapy.spider):\n\n\n        # ...\n            yield splashrequest(url, self.parse_result,\n                endpoint='execute',\n                cache_args=['lua_source'],\n                args={'lua_source': script},\n                headers={'x-my-header': 'value'},\n            )\n\n        def parse_result(self, response):\n            # here response.body contains result html;\n            # response.headers are filled with headers from last\n            # web page loaded to splash;\n            # cookies from all responses and from javascript are collected\n            # and put into set-cookie response header, so that scrapy\n            # can remember them.\n\n\n\n.. _splash lua script: http://splash.readthedocs.org/en/latest/scripting-tutorial.html\n\n\nhttp basic auth\n===============\n\nif you need to use http basic authentication to access splash, use the\n``splash_user`` and ``splash_pass`` optional settings::\n\n    splash_user = 'user'\n    splash_pass = 'userpass'\n\nanother option is ``meta['splash']['splash_headers']``: it allows to set\ncustom headers which are sent to splash server; add authorization header\nto ``splash_headers`` if you want to change credentials per-request::\n\n    import scrapy\n    from w3lib.http import basic_auth_header\n\n    class myspider(scrapy.spider):\n        # ...\n        def start_requests(self):\n            auth = basic_auth_header('user', 'userpass')\n            yield splashrequest(url, self.parse,\n                                splash_headers={'authorization': auth})\n\n**warning:** don't use `httpauthmiddleware`_\n(i.e. ``http_user`` / ``http_pass`` spider attributes) for splash\nauthentication: if you occasionally send a non-splash request from your spider,\nyou may expose splash credentials to a remote website, as httpauthmiddleware\nsets credentials for all requests unconditionally.\n\n.. _httpauthmiddleware: http://doc.scrapy.org/en/latest/topics/downloader-middleware.html#module-scrapy.downloadermiddlewares.httpauth\n\nwhy not use the splash http api directly?\n=========================================\n\nthe obvious alternative to scrapy-splash would be to send requests directly\nto the splash `http api`_. take a look at the example below and make\nsure to read the observations after it::\n\n    import json\n\n    import scrapy\n    from scrapy.http.headers import headers\n\n    render_html_url = \"http://127.0.0.1:8050/render.html\"\n\n    class myspider(scrapy.spider):\n        start_urls = [\"http://example.com\", \"http://example.com/foo\"]\n\n        def start_requests(self):\n            for url in self.start_urls:\n                body = json.dumps({\"url\": url, \"wait\": 0.5}, sort_keys=true)\n                headers = headers({'content-type': 'application/json'})\n                yield scrapy.request(render_html_url, self.parse, method=\"post\",\n                                     body=body, headers=headers)\n\n        def parse(self, response):\n            # response.body is a result of render.html call; it\n            # contains html processed by a browser.\n            # ...\n\n\nit works and is easy enough, but there are some issues that you should be\naware of:\n\n1. there is a bit of boilerplate.\n\n2. as seen by scrapy, we're sending requests to ``render_html_url`` instead\n   of the target urls. it affects concurrency and politeness settings:\n   ``concurrent_requests_per_domain``, ``download_delay``, etc could behave\n   in unexpected ways since delays and concurrency settings are no longer\n   per-domain.\n\n3. as seen by scrapy, response.url is an url of the splash server.\n   scrapy-splash fixes it to be an url of a requested page.\n   \"real\" url is still available as ``response.real_url``. scrapy-splash also\n   allows to handle ``response.status`` and ``response.headers`` transparently\n   on scrapy side.\n\n4. some options depend on each other - for example, if you use timeout_\n   splash option then you may want to set ``download_timeout``\n   scrapy.request meta key as well.\n\n5. it is easy to get it subtly wrong - e.g. if you won't use\n   ``sort_keys=true`` argument when preparing json body then binary post body\n   content could vary even if all keys and values are the same, and it means\n   dupefilter and cache will work incorrectly.\n\n6. default scrapy duplication filter doesn't take splash specifics in\n   account. for example, if an url is sent in a json post request body\n   scrapy will compute request fingerprint without canonicalizing this url.\n\n7. splash bad request (http 400) errors are hard to debug because by default\n   response content is not displayed by scrapy. splashmiddleware logs content\n   of http 400 splash responses by default (it can be turned off by setting\n   ``splash_log_400 = false`` option).\n\n8. cookie handling is tedious to implement, and you can't use scrapy\n   built-in cookie middleware to handle cookies when working with splash.\n\n9. large splash arguments which don't change with every request\n   (e.g. ``lua_source``) may take a lot of space when saved to scrapy disk\n   request queues. ``scrapy-splash`` provides a way to store such static\n   parameters only once.\n\n10. splash 2.1+ provides a way to save network traffic by caching large\n    static arguments on server, but it requires client support: client should\n    send proper ``save_args`` and ``load_args`` values and handle http 498\n    responses.\n\nscrapy-splash utlities allow to handle such edge cases and reduce\nthe boilerplate.\n\n.. _http api: http://splash.readthedocs.org/en/latest/api.html\n.. _timeout: http://splash.readthedocs.org/en/latest/api.html#arg-timeout\n\n\ngetting help\n============\n\n* for problems with rendering pages read \"`splash faq`_\" page\n* for scrapy-related bugs take a look at \"`reporting scrapy bugs`_\" page\n\nbest approach to get any other help is to ask a question on `stack overflow`_\n\n.. _reporting scrapy bugs: https://doc.scrapy.org/en/master/contributing.html#reporting-bugs\n.. _splash faq: http://splash.readthedocs.io/en/stable/faq.html#website-is-not-rendered-correctly\n.. _stack overflow: https://stackoverflow.com/questions/tagged/scrapy-splash?sort=frequent&pagesize=15&mixed=1\n\n\ncontributing\n============\n\nsource code and bug tracker are on github:\nhttps://github.com/scrapy-plugins/scrapy-splash\n\nto run tests, install \"tox\" python package and then run ``tox`` command\nfrom the source checkout.\n\nto run integration tests, start splash and set splash_url env variable\nto splash address before running ``tox`` command::\n\n   docker run -d --rm -p8050:8050 scrapinghub/splash:3.0\n   splash_url=http://127.0.0.1:8050 tox -e py36\n\n\nchanges\n=======\n\n0.9.0 (2023-02-03)\n------------------\n\n* removed official support for python 2.7, 3.4, 3.5 and 3.6, and added official\n  support for python 3.9, 3.10 and 3.11.\n\n* deprecated ``splashjsonresponse.body_as_unicode()``, to be replaced by\n  ``splashjsonresponse.text``.\n\n* removed calls to obsolete ``to_native_str``, removed in scrapy 2.8.\n\n0.8.0 (2021-10-05)\n------------------\n\n*   **security bug fix:**\n\n    if you use httpauthmiddleware_ (i.e. the ``http_user`` and ``http_pass``\n    spider attributes) for splash authentication, any non-splash request will\n    expose your credentials to the request target. this includes ``robots.txt``\n    requests sent by scrapy when the ``robotstxt_obey`` setting is set to\n    ``true``.\n\n    use the new ``splash_user`` and ``splash_pass`` settings instead to set\n    your splash authentication credentials safely.\n\n    .. _httpauthmiddleware: http://doc.scrapy.org/en/latest/topics/downloader-middleware.html#module-scrapy.downloadermiddlewares.httpauth\n\n*   responses now expose the http status code and headers from splash as\n    ``response.splash_response_status`` and\n    ``response.splash_response_headers`` (#158)\n\n*   the ``meta`` argument passed to the ``scrapy_splash.request.splashrequest``\n    constructor is no longer modified (#164)\n\n*   website responses with 400 or 498 as http status code are no longer\n    handled as the equivalent splash responses (#158)\n\n*   cookies are no longer sent to splash itself (#156)\n\n*   ``scrapy_splash.utils.dict_hash`` now also works with ``obj=none``\n    (``225793b``)\n\n*   our test suite now includes integration tests (#156) and tests can be run\n    in parallel (``6fb8c41``)\n\n*   there\u2019s a new \u2018getting help\u2019 section in the ``readme.rst`` file (#161,\n    #162), the documentation about ``splash_slot_policy`` has been improved\n    (#157) and a typo as been fixed (#121)\n\n*   made some internal improvements (``ee5000d``, ``25de545``, ``2aaa79d``)\n\n\n0.7.2 (2017-03-30)\n------------------\n\n* fixed issue with response type detection.\n\n0.7.1 (2016-12-20)\n------------------\n\n* scrapy 1.0.x support is back;\n* readme updates.\n\n0.7 (2016-05-16)\n----------------\n\n* ``splash_cookies_debug`` setting allows to log cookies\n  sent and received to/from splash in ``cookies`` request/response fields.\n  it is similar to scrapy's builtin ``cookies_debug``, but works for\n  splash requests;\n* readme cleanup.\n\n0.6.1 (2016-04-29)\n------------------\n\n* warning about http methods is no longer logged for non-splash requests.\n\n0.6 (2016-04-20)\n----------------\n\n* ``splashawaredupefilter`` and ``splash_request_fingerprint`` are improved:\n  they now canonicalize urls and take url fragments in account;\n* ``cache_args`` value fingerprints are now calculated faster.\n\n0.5 (2016-04-18)\n----------------\n\n* ``cache_args`` splashrequest argument and\n  ``request.meta['splash']['cache_args']`` key allow to save network traffic\n  and disk storage by not storing duplicate splash arguments in disk request\n  queues and not sending them to splash multiple times. this feature requires\n  splash 2.1+.\n\nto upgrade from v0.4 enable ``splashdeduplicateargsmiddleware`` in settings.py::\n\n  spider_middlewares = {\n      'scrapy_splash.splashdeduplicateargsmiddleware': 100,\n  }\n\n0.4 (2016-04-14)\n----------------\n\n* splashformrequest class is added; it is a variant of formrequest which uses\n  splash;\n* splash parameters are no longer stored in request.meta twice; this change\n  should decrease disk queues data size;\n* splashmiddleware now increases request priority when rescheduling the request;\n  this should decrease disk queue data size and help with stale cookie\n  problems.\n\n0.3 (2016-04-11)\n----------------\n\npackage is renamed from ``scrapyjs`` to ``scrapy-splash``.\n\nan easiest way to upgrade is to replace ``scrapyjs`` imports with\n``scrapy_splash`` and update ``settings.py`` with new defaults\n(check the readme).\n\nthere are many new helpers to handle javascript rendering transparently;\nthe recommended way is now to use ``scrapy_splash.splashrequest`` instead\nof  ``request.meta['splash']``. please make sure to read the readme if\nyou're upgrading from scrapyjs - you may be able to drop some code from your\nproject, especially if you want to access response html, handle cookies\nand headers.\n\n* new splashrequest class; it can be used as a replacement for scrapy.request\n  to provide a better integration with splash;\n* added support for post requests;\n* splashresponse, splashtextresponse and splashjsonresponse allow to\n  handle splash responses transparently, taking care of response.url,\n  response.body, response.headers and response.status. splashjsonresponse\n  allows to access decoded response json data as ``response.data``.\n* cookie handling improvements: it is possible to handle scrapy and splash\n  cookies transparently; current cookiejar is exposed as response.cookiejar;\n* headers are passed to splash by default;\n* urls with fragments are handled automatically when using splashrequest;\n* logging is improved: ``splashrequest.__repr__`` shows both requested url\n  and splash url;\n* in case of splash http 400 errors the response is logged by default;\n* an issue with dupefilters is fixed: previously the order of keys in\n  json request body could vary, making requests appear as non-duplicates;\n* it is now possible to pass custom headers to splash server itself;\n* test coverage reports are enabled.\n\n0.2 (2016-03-26)\n----------------\n\n* scrapy 1.0 and 1.1 support;\n* python 3 support;\n* documentation improvements;\n* project is moved to https://github.com/scrapy-plugins/scrapy-splash.\n\n0.1.1 (2015-03-16)\n------------------\n\nfixed fingerprint calculation for non-string meta values.\n\n0.1 (2015-02-28)\n----------------\n\ninitial release\n",
  "docs_url": null,
  "keywords": "",
  "license": "bsd",
  "name": "scrapy-splash",
  "package_url": "https://pypi.org/project/scrapy-splash/",
  "project_url": "https://pypi.org/project/scrapy-splash/",
  "project_urls": {
    "Homepage": "https://github.com/scrapy-plugins/scrapy-splash"
  },
  "release_url": "https://pypi.org/project/scrapy-splash/0.9.0/",
  "requires_dist": [],
  "requires_python": "",
  "summary": "javascript support for scrapy using splash",
  "version": "0.9.0",
  "releases": [],
  "developers": [
    "kmike84@gmail.com",
    "mikhail_korobov",
    "scrapy_developers"
  ],
  "kwds": "scrapy_splash scrapyjs scrapy scrapy_ scrapy_default",
  "license_kwds": "bsd",
  "libtype": "pypi",
  "id": "pypi_scrapy_splash",
  "homepage": "https://github.com/scrapy-plugins/scrapy-splash",
  "release_count": 11,
  "dependency_ids": [],
  "documentation_summary": "The HTML text is a PyPI (Python Package Index) page for the scrapy-splash package version 0.9.0, released on February 3, 2023. This library integrates Scrapy with JavaScript using Splash, providing support for JavaScript rendering in Scrapy projects. It includes instructions for installation, configuration, and usage, detailing how to install the package using pip, configure the Splash server, and use the SplashRequest for making requests. The page also mentions the removal of support for Python versions 2.7, 3.4, 3.5, and 3.6, and the addition of support for Python 3.9, 3.10, and 3.11 in the latest version. Additionally, it provides information on project details, including the BSD license, development status, intended audience, and programming languages supported.",
  "embedding": [
    0.006568551529198885,
    0.020772280171513557,
    0.02883123606443405,
    -0.01320892944931984,
    -0.013230477459728718,
    0.020528070628643036,
    0.005096103996038437,
    -0.016850542277097702,
    -0.011808308772742748,
    -0.03002355992794037,
    0.006827127654105425,
    -0.0014886083081364632,
    -0.028127335011959076,
    0.015313452109694481,
    0.0047010574489831924,
    0.003095730673521757,
    0.014925587922334671,
    -0.022251911461353302,
    0.016663793474435806,
    -0.004510716535151005,
    0.028745044022798538,
    -0.004410159308463335,
    -0.005336723756045103,
    -0.010141929611563683,
    -0.01184422243386507,
    0.016721254214644432,
    -0.0057317703031003475,
    -0.014070849865674973,
    -0.015931161120533943,
    0.013582427985966206,
    0.033930931240320206,
    0.017338965088129044,
    -0.03327012434601784,
    0.007322731893509626,
    -0.02885996736586094,
    -0.013963109813630581,
    -0.00018652495054993778,
    -0.022754697129130363,
    0.040883757174015045,
    -0.014968683943152428,
    -0.0024941819719970226,
    0.015414008870720863,
    -0.0045466297306120396,
    -0.023602252826094627,
    -0.03157501667737961,
    0.004151583183556795,
    0.008884962648153305,
    -0.028127335011959076,
    -0.02024076320230961,
    0.018861690536141396,
    0.02048497460782528,
    -0.007563351187855005,
    -0.009653507731854916,
    -0.03413204476237297,
    0.010213756002485752,
    -0.024392345920205116,
    -0.0040258863009512424,
    0.006299201399087906,
    0.004995546769350767,
    -0.016304660588502884,
    0.027466528117656708,
    0.017554445192217827,
    -0.04292363300919533,
    -0.001035202294588089,
    -0.013812273740768433,
    0.010407688096165657,
    -0.007872206158936024,
    -0.014358156360685825,
    -0.0011007441207766533,
    -0.008109234273433685,
    0.049790266901254654,
    0.013618341647088528,
    -0.023501694202423096,
    -0.02035568654537201,
    0.04091248661279678,
    -0.010587255470454693,
    -0.02539791911840439,
    -0.0006958211306482553,
    0.01802850142121315,
    -0.008913693018257618,
    0.00686304084956646,
    -9.023228631122038e-05,
    0.006396167445927858,
    0.045135896652936935,
    0.03697638213634491,
    0.024018846452236176,
    0.012124346569180489,
    0.03235074505209923,
    -0.02190714329481125,
    -0.0030346778221428394,
    0.004830345511436462,
    0.0004942574305459857,
    0.01101103238761425,
    -0.0025588260032236576,
    0.0029502816032618284,
    0.02729414403438568,
    -0.025441015139222145,
    0.0029071855824440718,
    -0.013927196152508259,
    -0.02035568654537201,
    -0.016706889495253563,
    0.009897719137370586,
    -0.02098776027560234,
    -0.02564213052392006,
    -0.02921910025179386,
    -0.015227260068058968,
    0.009660691022872925,
    0.01224645134061575,
    0.030310865491628647,
    0.023731540888547897,
    -0.021562375128269196,
    0.04456128180027008,
    -0.012030971236526966,
    -0.03686146065592766,
    -0.0032735017593950033,
    -0.013841004110872746,
    0.02999482862651348,
    -0.0036811181344091892,
    -0.030310865491628647,
    -0.0185600183904171,
    -0.01198787521570921,
    0.006543411873281002,
    0.012519393116235733,
    -0.022510487586259842,
    0.028874332085251808,
    -0.0009687625570222735,
    -0.003734988160431385,
    -0.000459690869320184,
    -0.0032555449288338423,
    -0.023602252826094627,
    0.02291271649301052,
    -0.00010263361764373258,
    0.007764466106891632,
    -0.01093920599669218,
    -0.03427569940686226,
    0.021921508014202118,
    -0.030425788834691048,
    -0.011671838350594044,
    -0.028400275856256485,
    -0.028558295220136642,
    0.028658851981163025,
    0.037349883466959,
    0.003438703017309308,
    -0.006162730511277914,
    -0.00035890901926904917,
    0.04249267280101776,
    -0.0004118812212254852,
    -0.019278286024928093,
    -0.03209216892719269,
    -0.0004060452920384705,
    0.0006545207579620183,
    -0.027610182762145996,
    -0.03352870047092438,
    -0.008662299253046513,
    -0.00044891686411574483,
    0.01525599043816328,
    -0.0029430987779051065,
    -0.010702177882194519,
    0.017813021317124367,
    0.022366832941770554,
    0.008454002439975739,
    0.02769637480378151,
    -0.007268861867487431,
    -0.03361489251255989,
    -0.007229357026517391,
    0.03482158109545708,
    0.03579842671751976,
    -0.021289432421326637,
    -0.01792794279754162,
    -0.004492759704589844,
    -0.002264336682856083,
    0.0147388381883502,
    -0.017482617869973183,
    0.001354831038042903,
    -0.014336608350276947,
    0.018746767193078995,
    -0.009919267147779465,
    0.008267252705991268,
    -0.004388611298054457,
    -0.0026683618780225515,
    0.004061799496412277,
    -0.005171522032469511,
    -0.02024076320230961,
    0.034218236804008484,
    -0.011212147772312164,
    -0.031115325167775154,
    -0.0038211802020668983,
    -0.010536976158618927,
    -0.013999023474752903,
    -0.0059831636026501656,
    0.01506924070417881,
    0.034189507365226746,
    -0.0009265643893741071,
    -0.019766706973314285,
    -0.5635809898376465,
    -0.0032699103467166424,
    -0.016405217349529266,
    -0.026618974283337593,
    -0.009919267147779465,
    0.029822444543242455,
    -0.0022804976906627417,
    0.021275067701935768,
    -0.013094007037580013,
    0.015816237777471542,
    -0.010163477621972561,
    0.04059644788503647,
    -0.011621559038758278,
    -0.014279147610068321,
    -0.004438889678567648,
    -0.010465149767696857,
    -0.0030077428091317415,
    -0.013740447349846363,
    -0.005624030251055956,
    0.017827386036515236,
    -0.001953686121851206,
    0.026992471888661385,
    -0.028644487261772156,
    0.022251911461353302,
    -0.0026414268650114536,
    0.004844710696488619,
    0.01647704467177391,
    -0.019350111484527588,
    0.03197724372148514,
    -0.0016565031837671995,
    -0.024895133450627327,
    -0.009452393278479576,
    0.02615928277373314,
    0.008655116893351078,
    0.06286272406578064,
    -0.010005459189414978,
    -0.01802850142121315,
    0.037005115300416946,
    0.004999137949198484,
    0.08239958435297012,
    -0.03306901082396507,
    -0.010572889819741249,
    0.015342182479798794,
    0.0018782680854201317,
    -0.004909354727715254,
    0.009818709455430508,
    0.040768831968307495,
    0.007979946210980415,
    -0.004040251486003399,
    -0.007225765846669674,
    0.012813882902264595,
    0.009919267147779465,
    -0.008231339044868946,
    0.00034903286723420024,
    0.011305522173643112,
    -0.013927196152508259,
    0.01802850142121315,
    -0.004640004597604275,
    -0.008274435065686703,
    0.026058726012706757,
    -0.010027007199823856,
    0.02368844486773014,
    0.0012183603830635548,
    -0.02653278224170208,
    -0.0008655117126181722,
    0.016261564567685127,
    -0.009107625111937523,
    -0.007261679042130709,
    0.03209216892719269,
    0.0016502183862030506,
    0.019895995035767555,
    -0.014394070021808147,
    0.01525599043816328,
    -0.020398782566189766,
    0.027538355439901352,
    0.027466528117656708,
    0.02523990161716938,
    -0.008554559201002121,
    -0.0077788312919437885,
    0.028486467897892,
    0.020700454711914062,
    0.006586507894098759,
    -0.0040833475068211555,
    -0.049646612256765366,
    0.05076710879802704,
    0.007800379302352667,
    -0.007243722211569548,
    0.02138999104499817,
    0.004754927475005388,
    -0.01333821751177311,
    0.025225535035133362,
    0.039993103593587875,
    -0.0059436592273414135,
    -0.018861690536141396,
    -0.022596679627895355,
    0.024018846452236176,
    -0.007699822075664997,
    0.0030185168143361807,
    -0.02381773293018341,
    -0.02845773659646511,
    -0.0271935872733593,
    -0.02305636927485466,
    -0.011693386361002922,
    -0.017626270651817322,
    0.022467391565442085,
    0.00021222543728072196,
    -0.019249554723501205,
    0.004478394519537687,
    -0.00531158410012722,
    -0.02651841565966606,
    0.017080388963222504,
    -0.006830718833953142,
    -0.03660288453102112,
    -0.028256623074412346,
    0.010723725892603397,
    -0.02704993449151516,
    0.01907717064023018,
    -0.008647934533655643,
    0.03801068663597107,
    0.010206573642790318,
    0.007793196476995945,
    -0.013036545366048813,
    0.010127563960850239,
    -0.0034710250329226255,
    0.0073981499299407005,
    0.019249554723501205,
    0.02163420058786869,
    -0.030310865491628647,
    -0.038441646844148636,
    -0.00805895496159792,
    0.02136125974357128,
    0.002917959587648511,
    0.010601620189845562,
    -0.018243981525301933,
    0.026446590200066566,
    0.02305636927485466,
    -0.003160374704748392,
    0.008015858940780163,
    0.012440383434295654,
    -0.00785784050822258,
    -0.0013332830276340246,
    0.019263919442892075,
    -0.004126443527638912,
    -0.010177843272686005,
    -0.002237401669844985,
    -0.007074929773807526,
    -0.0031549877021461725,
    -0.006198643706738949,
    0.0090717114508152,
    -0.015485836192965508,
    -0.008906510658562183,
    0.007735735271126032,
    -0.017870482057332993,
    0.01930701546370983,
    -0.025943802669644356,
    0.00907889474183321,
    0.019235190004110336,
    0.0051643396727740765,
    -0.009430845268070698,
    0.008252887055277824,
    0.005541429854929447,
    0.017712462693452835,
    -0.031115325167775154,
    0.007577716372907162,
    -0.037263691425323486,
    -0.001031610881909728,
    -0.003810406196862459,
    0.007218583021312952,
    -0.005146382842212915,
    -0.03436189144849777,
    -0.01741079054772854,
    -0.02294144779443741,
    -0.008568924851715565,
    0.03114405646920204,
    0.0012147689703851938,
    0.039475951343774796,
    -0.021016491577029228,
    0.009035798721015453,
    -0.002662974875420332,
    0.003918146248906851,
    0.0004399385070428252,
    -0.0034710250329226255,
    -0.037809573113918304,
    -0.01557202823460102,
    0.03450554609298706,
    0.013711716048419476,
    0.028127335011959076,
    0.024823306128382683,
    -0.016333390027284622,
    0.009236913174390793,
    -0.0017013949109241366,
    -0.006751709617674351,
    -0.00798712857067585,
    0.01114750374108553,
    -0.02049933932721615,
    0.006902545690536499,
    0.001941116526722908,
    0.011305522173643112,
    -0.006493133492767811,
    0.032781705260276794,
    0.023286214098334312,
    0.018315806984901428,
    -0.002724027493968606,
    -0.022481756284832954,
    -0.003429724834859371,
    -0.034218236804008484,
    0.037809573113918304,
    -0.019034074619412422,
    0.011312704533338547,
    0.0029843992087990046,
    0.02538355439901352,
    -0.021275067701935768,
    -0.034735389053821564,
    -0.013711716048419476,
    0.02149054780602455,
    0.0032286099158227444,
    0.004808797501027584,
    0.004647187422960997,
    -0.03309774026274681,
    0.013955927453935146,
    -0.005487559828907251,
    -0.010565707460045815,
    0.0057317703031003475,
    -0.006263287737965584,
    -0.009502671658992767,
    -0.0037637189961969852,
    0.006037033628672361,
    -0.0029125725850462914,
    -0.014573636464774609,
    -0.03533873334527016,
    -0.011161868460476398,
    0.019766706973314285,
    -0.003418950829654932,
    -0.031086593866348267,
    0.012461931444704533,
    0.03352870047092438,
    0.04151583090424538,
    -0.020944664254784584,
    0.026504050940275192,
    -0.01687927357852459,
    0.014588002115488052,
    0.0013638094533234835,
    0.03384473919868469,
    -0.0234298687428236,
    0.005290036089718342,
    0.00669424794614315,
    0.013366947881877422,
    0.0016906209057196975,
    -0.02627420611679554,
    0.00239721592515707,
    0.007735735271126032,
    0.010357409715652466,
    -0.020700454711914062,
    0.008676664903759956,
    0.015026144683361053,
    -0.007541803177446127,
    -0.0022248318418860435,
    0.017310233786702156,
    0.017999770119786263,
    0.0056671262718737125,
    0.015615124255418777,
    -0.009818709455430508,
    0.04571051150560379,
    0.006819944828748703,
    0.02831408381462097,
    -0.045020975172519684,
    -0.042320288717746735,
    -0.026949375867843628,
    -0.0063422974199056625,
    -0.022711601108312607,
    -0.021964604035019875,
    -0.03918864578008652,
    -0.00837499275803566,
    -0.03597081080079079,
    0.01063035149127245,
    -0.01649140939116478,
    0.020441878587007523,
    0.026202378794550896,
    -0.010472332127392292,
    -0.013424409553408623,
    -0.048985805362463,
    -0.02149054780602455,
    0.015026144683361053,
    -0.022984543815255165,
    0.002700683893635869,
    -0.03915991634130478,
    -0.01788484677672386,
    0.03398839384317398,
    0.018488191068172455,
    0.03571223467588425,
    0.0029089811723679304,
    -0.00041928834980353713,
    0.03243693709373474,
    0.007742918096482754,
    -0.03275297209620476,
    -0.02459346130490303,
    0.029276560992002487,
    0.00032950498280115426,
    -0.02512497827410698,
    -0.007577716372907162,
    0.02344423346221447,
    0.027021203190088272,
    -0.0018872465007007122,
    0.006554185878485441,
    0.03964833542704582,
    -0.02048497460782528,
    0.002077587181702256,
    -0.028888696804642677,
    -0.031632475554943085,
    -0.01468855980783701,
    -0.009157903492450714,
    -0.016922369599342346,
    -0.008267252705991268,
    -0.007958398200571537,
    0.01486812625080347,
    0.019752342253923416,
    0.025570303201675415,
    -0.023860828951001167,
    0.022309372201561928,
    -0.0012578649912029505,
    -0.011513819918036461,
    -0.03493650630116463,
    -0.011772395111620426,
    0.0001290635991608724,
    0.022323736920952797,
    0.02822789177298546,
    0.00958886370062828,
    -0.017554445192217827,
    -0.01959432289004326,
    -0.027897488325834274,
    -0.023903924971818924,
    0.016520140692591667,
    -0.0034063810016959906,
    -0.007218583021312952,
    -0.013165833428502083,
    0.029420215636491776,
    0.01172929909080267,
    0.028285352513194084,
    0.01791357807815075,
    0.0015568436356261373,
    0.006026259623467922,
    0.011908866465091705,
    0.016304660588502884,
    -0.01904843933880329,
    0.007329914253205061,
    -0.021964604035019875,
    0.018215250223875046,
    0.0212607029825449,
    0.026489686220884323,
    0.006227374542504549,
    0.011204964481294155,
    0.010321496054530144,
    -0.010946388356387615,
    -0.012483479455113411,
    0.005117652006447315,
    -0.011851404793560505,
    -0.0014868126017972827,
    0.016563236713409424,
    -0.025800149887800217,
    0.027093030512332916,
    0.049933917820453644,
    0.043843016028404236,
    -0.0001966255804290995,
    0.01519852876663208,
    0.03493650630116463,
    0.00896397139877081,
    -0.008252887055277824,
    0.013216111809015274,
    -0.0008942423737607896,
    -0.010608803480863571,
    -0.006162730511277914,
    -0.0028335631359368563,
    -0.032408203929662704,
    -0.012986266985535622,
    0.04005056619644165,
    0.010781187564134598,
    -0.014631098136305809,
    -0.017324598506093025,
    0.014853760600090027,
    -0.020528070628643036,
    -0.006220191717147827,
    -0.011851404793560505,
    -0.014386887662112713,
    -0.02486640214920044,
    0.008669482544064522,
    -0.026015629991889,
    -0.017468253150582314,
    -0.008511463180184364,
    -0.029937367886304855,
    -0.0035428518895059824,
    0.0014185772743076086,
    -0.017166581004858017,
    -0.013769177719950676,
    0.011420444585382938,
    0.015643853694200516,
    -0.020959030836820602,
    -0.024320518597960472,
    -0.01778429001569748,
    0.017224041745066643,
    0.010228121653199196,
    -0.02150491252541542,
    -0.003993564285337925,
    0.004686691798269749,
    -8.260070171672851e-05,
    0.01519852876663208,
    -0.027394702658057213,
    -0.009373383596539497,
    -0.023760270327329636,
    0.034476812928915024,
    -0.010199391283094883,
    0.003975607454776764,
    0.0014930973993614316,
    0.017568809911608696,
    0.02317129261791706,
    0.013295121490955353,
    0.03585588559508324,
    -0.012109980918467045,
    -0.009761247783899307,
    0.007161121815443039,
    0.006105269305408001,
    0.015212894417345524,
    -0.001685233903117478,
    0.007477159146219492,
    -0.004237775225192308,
    -0.006877406034618616,
    -0.03640177100896835,
    -0.01551456656306982,
    0.004902171902358532,
    -0.005293627735227346,
    -0.004956041928380728,
    -0.01037177536636591,
    0.003260931931436062,
    -0.00466514378786087,
    0.025282997637987137,
    0.02268287166953087,
    -0.0104220537468791,
    -0.01634775660932064,
    -0.0009615799062885344,
    0.015112336724996567,
    0.005361862946301699,
    -0.015873700380325317,
    0.037665918469429016,
    -0.005106878001242876,
    0.011686203069984913,
    0.008841866627335548,
    -0.03982071951031685,
    0.0015541501343250275,
    0.023257484659552574,
    0.014372522011399269,
    0.016074813902378082,
    0.01676435023546219,
    -0.004327558446675539,
    -0.03746480494737625,
    -0.0025139343924820423,
    0.021174510940909386,
    0.020039647817611694,
    -0.00933747086673975,
    -0.020140206441283226,
    -0.00027989965747110546,
    -0.018876055255532265,
    -0.005914928391575813,
    -0.0009930040687322617,
    -0.022970177233219147,
    -0.007355053909122944,
    -0.018473826348781586,
    -0.0006329727475531399,
    -0.008590472862124443,
    -0.016850542277097702,
    0.0029538727831095457,
    -0.0307705570012331,
    0.016462678089737892,
    -0.01805723085999489,
    0.010845831595361233,
    0.012181807309389114,
    -0.010206573642790318,
    -0.0019123858073726296,
    -0.006309975404292345,
    0.017583174630999565,
    0.005993937607854605,
    -7.076052133925259e-05,
    -0.007663908414542675,
    -0.014968683943152428,
    0.027998046949505806,
    0.03579842671751976,
    0.009904901497066021,
    0.0012372148921713233,
    0.007042607758194208,
    -0.013424409553408623,
    0.034218236804008484,
    -0.013165833428502083,
    -0.021691663190722466,
    0.009947997517883778,
    0.02151927910745144,
    0.011032580398023129,
    0.023487329483032227,
    0.03878641501069069,
    -0.010795552283525467,
    -0.029937367886304855,
    0.00572817912325263,
    0.022065160796046257,
    -0.004977589938789606,
    0.0033974028192460537,
    -0.014365339651703835,
    -0.03028213605284691,
    0.010508245788514614,
    0.005020685959607363,
    -0.011248060502111912,
    0.012785151600837708,
    -0.0317186675965786,
    -0.011801126413047314,
    0.021088318899273872,
    -0.0020308997482061386,
    0.005616847891360521,
    0.004072573501616716,
    0.02330058068037033,
    -0.02062862738966942,
    0.016778716817498207,
    0.021088318899273872,
    -0.0025893524289131165,
    0.007936850190162659,
    -0.020398782566189766,
    -0.04005056619644165,
    -0.017712462693452835,
    0.005042233970016241,
    0.002618083031848073,
    -0.008439636789262295,
    0.014659828506410122,
    0.010723725892603397,
    -0.0038283630274236202,
    0.0388726070523262,
    -6.885261973366141e-05,
    -0.00418749637901783,
    0.015054875984787941,
    0.0011896296637132764,
    -0.023472964763641357,
    -0.03361489251255989,
    -0.041774407029151917,
    -0.051083147525787354,
    0.0034027898218482733,
    -0.007434063125401735,
    0.01713784970343113,
    0.017209677025675774,
    0.005246940068900585,
    -0.004481985699385405,
    -0.008798770606517792,
    0.010637533850967884,
    0.03915991634130478,
    0.023918289691209793,
    0.039361029863357544,
    0.02216571941971779,
    0.0029341205954551697,
    0.0038319542072713375,
    -0.020298223942518234,
    -0.012088432908058167,
    -0.03206343576312065,
    0.018459461629390717,
    0.01904843933880329,
    -0.005096103996038437,
    -0.009991093538701534,
    -0.007056972943246365,
    -0.0013000632170587778,
    -0.006385393440723419,
    -0.027768200263381004,
    0.03295408934354782,
    0.0116000110283494,
    0.010917657986283302,
    -0.04594035446643829,
    -0.0271935872733593,
    -0.0011824469547718763,
    0.02371717430651188,
    -0.022697236388921738,
    -0.014099580235779285,
    0.009042981080710888,
    -0.0010567503049969673,
    -0.021275067701935768,
    0.04984772577881813,
    0.01789921335875988,
    0.0022391972597688437,
    0.009861805476248264,
    0.008612020872533321,
    -0.011722116731107235,
    -0.026762627065181732,
    -0.030081020668148994,
    -0.016563236713409424,
    0.012203355319797993,
    0.022855255752801895,
    0.011930414475500584,
    0.015428374521434307,
    0.04677354544401169,
    0.01623283326625824,
    0.0020344911608844995,
    -0.015141068026423454,
    0.013287939131259918,
    0.046428777277469635,
    -0.012885709293186665,
    0.02409067377448082,
    -0.01828707754611969,
    -0.01243320107460022,
    -0.005264896899461746,
    -0.000777972920332104,
    0.0006082823383621871,
    -0.005315175745636225,
    -0.033959660679101944,
    -0.010946388356387615,
    0.015356548130512238,
    -0.012993449345231056,
    -0.011054128408432007,
    -0.012921622954308987,
    0.002803036943078041,
    -0.0057317703031003475,
    0.024535998702049255,
    -0.008662299253046513,
    0.016146641224622726,
    -0.02561339922249317,
    -0.0048698498867452145,
    -0.028888696804642677,
    -0.003567991079762578,
    0.022438660264015198,
    0.015787508338689804,
    0.009157903492450714,
    0.007893754169344902,
    0.02845773659646511,
    -0.016304660588502884,
    0.02538355439901352,
    -0.01739642582833767,
    0.010019823908805847,
    0.00355542148463428,
    0.008238522335886955,
    0.011233695782721043,
    -0.01827271096408367,
    0.03151755407452583,
    0.00618786970153451,
    -0.03079928830265999,
    -0.01788484677672386,
    0.0020237171556800604,
    0.010249669663608074,
    0.022122623398900032,
    -0.006327931769192219,
    0.01333821751177311,
    -0.0037098489701747894,
    -0.007900936529040337,
    -0.03375854715704918,
    0.004072573501616716,
    0.013611159287393093,
    -0.010601620189845562,
    -0.010062919929623604,
    -0.003054430242627859,
    -7.104108954081312e-05,
    -0.005135608837008476,
    -0.005491151008754969,
    0.03286789730191231,
    -0.0010396913858130574,
    -0.03760845959186554,
    -0.038441646844148636,
    -0.0026162874419242144,
    -0.008640751242637634,
    -0.026633339002728462,
    0.024837670847773552,
    -0.036775268614292145,
    -0.018258346244692802,
    -0.010077285580337048,
    0.022754697129130363,
    0.01687927357852459,
    -0.027078663930296898,
    0.0022284232545644045,
    0.016290294006466866,
    0.013589611276984215,
    0.012591219507157803,
    0.006378210615366697,
    -6.329727330012247e-05,
    -0.028529563918709755,
    0.010774004273116589,
    -0.019939091056585312,
    -0.01998218707740307,
    -0.017152214422822,
    0.030224673449993134,
    0.013934379443526268,
    -0.032149627804756165,
    -0.011312704533338547,
    -0.025326093658804893,
    -0.050565995275974274,
    -0.020441878587007523,
    -0.022625409066677094,
    0.01817215420305729,
    0.01712348498404026,
    -0.00933028757572174,
    0.02614491805434227,
    0.014063667505979538,
    0.008669482544064522,
    0.053783830255270004,
    -0.0207291841506958,
    0.017870482057332993,
    0.010917657986283302,
    -0.011477906256914139,
    0.0073335058987140656,
    -0.01817215420305729,
    -0.047578003257513046,
    -0.020183302462100983,
    0.0143006956204772,
    0.0026396310422569513,
    0.013675803318619728,
    0.022826524451375008,
    -0.023113831877708435,
    -0.016261564567685127,
    -0.02022639848291874,
    -0.01634775660932064,
    -0.010694995522499084,
    -0.005735361948609352,
    0.034735389053821564,
    -0.017712462693452835,
    -0.027725104242563248,
    -0.00013287938782013953,
    0.0022787018679082394,
    -0.00027428820612840354,
    -0.011808308772742748,
    0.009236913174390793,
    -0.006069355644285679,
    -0.016951100900769234,
    -0.018358903005719185,
    -0.009775613434612751,
    0.0037709015887230635,
    -0.007121616974473,
    0.03737861290574074,
    -0.0033830374013632536,
    0.018258346244692802,
    0.014508992433547974,
    0.0023613027296960354,
    0.0020308997482061386,
    -0.02161983586847782,
    0.0044891685247421265,
    -0.015543296933174133,
    0.01764063723385334,
    0.018962247297167778,
    -0.026949375867843628,
    0.005936476401984692,
    -0.006888180039823055,
    0.023472964763641357,
    -0.009969545528292656,
    0.010917657986283302,
    -0.017482617869973183,
    -0.0086910305544734,
    -0.014236051589250565,
    0.010558524169027805,
    0.032523129135370255,
    -0.022567948326468468,
    -0.008360627107322216,
    0.011204964481294155,
    0.0036254525184631348,
    -0.023113831877708435,
    -0.0009822300635278225,
    -0.006493133492767811,
    -0.03482158109545708,
    0.01827271096408367,
    -0.009833075106143951,
    -0.006924093700945377,
    -0.03349997103214264,
    -0.00637461943551898,
    0.009703787043690681,
    0.0034225420095026493,
    0.0332413949072361,
    0.20479227602481842,
    -0.009272826835513115,
    0.02397575043141842,
    0.011003850027918816,
    0.010220939293503761,
    0.024047577753663063,
    0.019134631380438805,
    0.01919209398329258,
    -0.015141068026423454,
    0.03243693709373474,
    0.006855858024209738,
    -0.02381773293018341,
    -0.016793081536889076,
    0.0014904038980603218,
    -0.0026845228858292103,
    -0.001318019931204617,
    -0.012555306777358055,
    -0.030569441616535187,
    -0.02394702099263668,
    0.0036344309337437153,
    0.01217462494969368,
    -0.018344538286328316,
    -0.03812561184167862,
    -0.027495259419083595,
    0.02564213052392006,
    -0.008130782283842564,
    0.0011860383674502373,
    0.011851404793560505,
    0.026633339002728462,
    0.01055134180933237,
    -0.007649543229490519,
    0.021533643826842308,
    -0.004481985699385405,
    0.015801873058080673,
    -0.017295869067311287,
    -0.013065275736153126,
    0.0029736252035945654,
    -0.01422168593853712,
    0.006133999675512314,
    0.02071481943130493,
    -0.02717922255396843,
    -0.022223180159926414,
    -0.02910417690873146,
    -0.05185887590050697,
    -0.00165829889010638,
    -0.017554445192217827,
    -0.010637533850967884,
    0.0010944593232125044,
    0.018502557650208473,
    0.039849452674388885,
    -0.007337097078561783,
    -0.012181807309389114,
    0.03979199007153511,
    0.007872206158936024,
    -0.0016708684852346778,
    -0.009789979085326195,
    -0.010601620189845562,
    0.02434924989938736,
    0.015356548130512238,
    0.014401252381503582,
    -0.026575878262519836,
    0.052720796316862106,
    -0.006417715456336737,
    0.013539331965148449,
    -0.04846865311264992,
    0.02769637480378151,
    -0.002686318475753069,
    -0.008849048987030983,
    -0.0003773146017920226,
    0.002404398750513792,
    -0.024521633982658386,
    -0.03697638213634491,
    -0.019005343317985535,
    -0.008533011190593243,
    0.0021404356230050325,
    -0.02151927910745144,
    0.017425157129764557,
    0.003077773842960596,
    0.06924093514680862,
    0.03255185857415199,
    -0.00870539527386427,
    0.004643595777451992,
    0.01152818463742733,
    0.024119405075907707,
    -0.007879388518631458,
    -0.020197667181491852,
    0.02539791911840439,
    -0.017942309379577637,
    0.011039763689041138,
    -0.01050106342881918,
    -0.022883985191583633,
    -0.019795438274741173,
    2.2684329451294616e-05,
    -0.011204964481294155,
    0.004880623891949654,
    0.011736482381820679,
    0.004191087558865547,
    0.039734527468681335,
    -0.02124633640050888,
    0.016146641224622726,
    -0.02279779314994812,
    0.048497386276721954,
    0.01776992529630661,
    0.005387002136558294,
    -0.00856174249202013,
    -0.013661437667906284,
    -0.03352870047092438,
    0.015284720808267593,
    -0.006266879383474588,
    -0.013510601595044136,
    0.01649140939116478,
    -0.022496121004223824,
    0.011679020710289478,
    -0.01930701546370983,
    -0.013402861542999744,
    -0.010343044064939022,
    -0.005616847891360521,
    -0.013445957563817501,
    0.01185858715325594,
    0.022467391565442085,
    -0.012332643382251263,
    -0.01713784970343113,
    -0.010479515418410301,
    -0.020959030836820602,
    -0.0032663189340382814,
    -0.027926219627261162,
    -0.025053150951862335,
    0.008080502972006798,
    -6.722530088154599e-05,
    -0.006622421555221081,
    -0.005850284360349178,
    -0.023085100576281548,
    0.023085100576281548,
    0.003084956668317318,
    -0.009351835586130619,
    -0.021318163722753525,
    -0.02473711408674717,
    -0.0012129733804613352,
    0.008540194481611252,
    0.0003315251087769866,
    -0.014724472537636757,
    -0.03990691155195236,
    0.011305522173643112,
    0.003223222913220525,
    -0.02098776027560234,
    -0.04134344682097435,
    0.0055450210347771645,
    0.0011016419157385826,
    0.006593690719455481,
    0.012440383434295654,
    0.005070964805781841,
    0.0001714862446533516,
    0.022754697129130363,
    -0.033155202865600586,
    0.011722116731107235,
    -0.025972533971071243,
    -0.002469042781740427,
    -0.014444348402321339,
    0.00896397139877081,
    0.018100326880812645,
    -0.04220536723732948,
    0.02704993449151516,
    -0.012440383434295654,
    0.016161005944013596,
    -0.03102913312613964,
    -0.024119405075907707,
    -0.18295696377754211,
    -0.007200626190751791,
    0.016333390027284622,
    -0.021433087065815926,
    0.004453255329281092,
    0.006349479779601097,
    0.007182669825851917,
    0.011348618194460869,
    0.007182669825851917,
    -0.026432223618030548,
    0.02769637480378151,
    -0.008511463180184364,
    -0.02371717430651188,
    -0.025857610628008842,
    -0.009402114897966385,
    -0.0056024822406470776,
    -0.018373269587755203,
    0.00798712857067585,
    0.038068149238824844,
    -0.0032878669444471598,
    0.03091420978307724,
    -0.027337240055203438,
    0.009868987835943699,
    -0.011075676418840885,
    -0.006450037471950054,
    -0.005124834831804037,
    -0.013603975996375084,
    -0.005300810094922781,
    -0.010529793798923492,
    -0.02075791545212269,
    -0.001746286521665752,
    0.0073406882584095,
    4.789381637237966e-05,
    0.009222547523677349,
    0.01417140755802393,
    0.00902143307030201,
    0.014983048662543297,
    -0.005279262084513903,
    0.0038427282124757767,
    0.04160202294588089,
    0.03398839384317398,
    0.025713957846164703,
    0.039102453738451004,
    -0.003259136341512203,
    -0.0308854803442955,
    0.009301557205617428,
    0.0008278026944026351,
    -0.02473711408674717,
    0.02447853796184063,
    -0.017942309379577637,
    0.023501694202423096,
    -0.005523473024368286,
    -0.0036918921396136284,
    9.214018064085394e-05,
    0.03025340475142002,
    0.0059257023967802525,
    0.01005573756992817,
    0.0259007066488266,
    0.02896052412688732,
    0.031115325167775154,
    -0.012684594839811325,
    -0.01778429001569748,
    0.012339826673269272,
    -0.009610411711037159,
    -0.013625524006783962,
    -0.023932654410600662,
    -0.01919209398329258,
    0.04005056619644165,
    -0.004205453209578991,
    0.017180945724248886,
    0.007584899198263884,
    0.01210279855877161,
    -0.010228121653199196,
    0.006356662604957819,
    0.003156783292070031,
    0.021461816504597664,
    -0.01778429001569748,
    0.0086910305544734,
    0.02305636927485466,
    -0.011370166204869747,
    -0.018775498494505882,
    0.037522267550230026,
    -0.00798712857067585,
    0.008360627107322216,
    0.00576768396422267,
    -0.004478394519537687,
    0.009129173122346401,
    -0.026963742449879646,
    0.005466011818498373,
    0.001654707477428019,
    0.027093030512332916,
    -0.0022122622467577457,
    -0.00920818280428648,
    -0.02011147513985634,
    -0.005706631112843752,
    -0.0017848934512585402,
    0.016333390027284622,
    -0.0006042420864105225,
    -0.005900563206523657,
    -0.006133999675512314,
    -0.000114922717330046,
    0.01545710489153862,
    -0.02124633640050888,
    0.0039001896511763334,
    0.016951100900769234,
    0.021433087065815926,
    -0.012418835423886776,
    0.01551456656306982,
    0.03191978484392166,
    -0.029290927574038506,
    -0.00473337946459651,
    -0.006845084019005299,
    0.021088318899273872,
    0.01325920782983303,
    -0.043871745467185974,
    0.016908004879951477,
    0.003180126892402768,
    -0.006410532630980015,
    0.03223581984639168,
    -0.0070390161126852036,
    0.007056972943246365,
    -0.031086593866348267,
    -0.01687927357852459,
    0.0023200022988021374,
    0.004018703475594521,
    -0.023616617545485497,
    -0.091133713722229,
    -0.012971901334822178,
    0.026202378794550896,
    0.0225535836070776,
    0.009789979085326195,
    0.0003986381634604186,
    0.00509251281619072,
    0.019034074619412422,
    0.002424150938168168,
    -0.004855484701693058,
    -0.000493808533065021,
    0.018258346244692802,
    -0.029176004230976105,
    -0.014882491901516914,
    -0.010328679345548153,
    -0.0014383295783773065,
    0.01031431369483471,
    0.01204533688724041,
    0.0147388381883502,
    0.014896856620907784,
    -0.002192509826272726,
    -0.02782566286623478,
    -0.030081020668148994,
    0.013661437667906284,
    -0.0185600183904171,
    0.02161983586847782,
    -0.037148766219615936,
    0.017597541213035583,
    0.007272453047335148,
    0.024191230535507202,
    0.017942309379577637,
    -0.027983680367469788,
    0.0004242264258209616,
    -0.00268990988843143,
    0.0026234700344502926,
    -0.005997529253363609,
    -0.02873067930340767,
    -0.002838950138539076,
    0.050163764506578445,
    -0.03786703571677208,
    0.020183302462100983,
    -0.0057497271336615086,
    0.026188014075160027,
    -0.010120381601154804,
    -0.01673562079668045,
    0.0033596938010305166,
    -0.007685456424951553,
    0.03441935405135155,
    0.03079928830265999,
    -0.03309774026274681,
    -0.020197667181491852,
    0.0029628511983901262,
    -0.003510529873892665,
    -0.014279147610068321,
    0.026604607701301575,
    -0.022855255752801895,
    0.0029879906214773655,
    -0.009696603752672672,
    -0.03151755407452583,
    0.01093920599669218,
    -0.005940067581832409,
    -0.011944779194891453,
    -0.016850542277097702,
    -0.006521863862872124,
    0.013553697615861893,
    0.0013368744403123856,
    -0.016031717881560326,
    -0.0003849462082143873,
    0.0009517037542536855,
    -0.0020955437794327736,
    -0.012900074943900108,
    -0.0006931276293471456,
    -0.03243693709373474,
    0.012957535684108734,
    -0.03918864578008652,
    -0.029592599719762802,
    0.028558295220136642,
    0.008288800716400146,
    0.007872206158936024,
    -0.02769637480378151,
    -0.014631098136305809,
    0.011815491132438183,
    -0.023731540888547897,
    -0.009042981080710888,
    0.014106763526797295,
    -0.0010423848871141672,
    0.039734527468681335,
    0.01766936667263508,
    -0.0016026331577450037,
    -0.060334425419569016,
    0.015342182479798794,
    0.018617479130625725,
    0.01741079054772854,
    0.006507498677819967,
    -0.0013404657365754247,
    -0.0015056671109050512,
    0.018617479130625725,
    0.0015712089370936155,
    0.0073155490681529045,
    0.010572889819741249,
    -0.017094753682613373,
    -0.016074813902378082,
    -0.08624950051307678,
    -0.005634804256260395,
    0.01525599043816328,
    -0.023918289691209793,
    0.015888065099716187,
    -0.05421479046344757,
    0.006845084019005299,
    -0.031000401824712753,
    0.022639775648713112,
    0.0020757915917783976,
    -0.017037292942404747,
    0.0048878067173063755,
    -0.014264781959354877,
    -0.010120381601154804,
    -0.0015837786486372352,
    -0.008066138252615929,
    0.05387002229690552,
    -0.018617479130625725,
    0.025599034503102303,
    0.013252025470137596,
    -0.0021871228236705065,
    -0.010788369923830032,
    0.025800149887800217,
    -0.005419324152171612,
    -0.008805952966213226,
    0.03168993815779686,
    -0.0021224787924438715,
    0.030483249574899673,
    0.00318730971775949,
    -0.02097339555621147,
    0.009495489299297333,
    0.013014997355639935,
    -0.011707751080393791,
    -0.00030661022174172103,
    0.0254841111600399,
    0.0008700008620508015,
    0.026346031576395035,
    0.004165948368608952,
    0.009933631867170334,
    0.008015858940780163,
    -0.029592599719762802,
    -0.02924783155322075,
    -0.002618083031848073,
    -0.027006838470697403,
    -0.01390564814209938,
    0.027279779314994812,
    -0.011679020710289478,
    -0.009524219669401646,
    0.011262426152825356,
    0.017338965088129044,
    0.035252541303634644,
    -0.006557777523994446,
    -0.011025398038327694,
    -0.010917657986283302,
    0.008719760924577713,
    -0.01817215420305729,
    0.022079527378082275,
    -0.015083606354892254,
    0.003198083722963929,
    0.0022535626776516438,
    0.03246566653251648,
    0.02987990528345108,
    0.014853760600090027,
    -0.006198643706738949,
    0.0011115181259810925,
    -0.012799517251551151,
    -0.042952366173267365,
    -0.02834281511604786,
    0.006392575800418854,
    0.005239757709205151,
    -0.02240992896258831,
    -0.03246566653251648,
    0.026446590200066566,
    0.037349883466959,
    0.0029772166162729263,
    -0.013058093376457691,
    -0.00656495988368988,
    -0.010824283584952354,
    -0.045796703547239304,
    0.0173820611089468,
    0.0035751739051193,
    -0.0031513962894678116,
    -0.03482158109545708,
    0.017554445192217827,
    0.018718037754297256,
    0.0001543151738587767,
    -0.009624777361750603,
    0.011808308772742748,
    -0.0003761923289857805,
    0.01132707018405199,
    -0.02795495092868805,
    0.0010549545986577868,
    0.015083606354892254,
    0.025555938482284546,
    0.014279147610068321,
    0.0027689191047102213,
    0.009940815158188343,
    -0.0020273085683584213,
    0.018761133775115013,
    -0.008130782283842564,
    -0.0012515801936388016,
    0.0008502484997734427,
    0.006988737732172012,
    -0.018315806984901428,
    -0.008870596997439861,
    0.008533011190593243,
    -0.013381313532590866,
    -0.03364362567663193,
    0.03054071217775345,
    0.013043727725744247,
    -0.002621674444526434,
    -0.023128196597099304,
    0.002311023883521557,
    0.030052289366722107,
    -0.03272424265742302,
    -0.004578951746225357,
    0.015284720808267593,
    -0.0010100628715008497,
    -0.02098776027560234,
    0.0011160073336213827,
    0.020887203514575958,
    0.01145635824650526,
    0.027768200263381004,
    -0.019781071692705154,
    0.03387346863746643,
    0.014358156360685825,
    0.024263057857751846,
    -0.031230248510837555,
    0.005448054987937212,
    0.008331896737217903,
    -0.001580187352374196,
    -0.004165948368608952,
    -0.021303799003362656,
    -0.026719531044363976,
    -0.027351606637239456,
    -0.010917657986283302,
    0.010170659981667995,
    0.020686088129878044,
    0.02651841565966606,
    0.08889272063970566,
    0.017712462693452835,
    -0.010048555210232735,
    -0.0010289173806086183,
    0.00544087216258049,
    0.004593317396938801,
    0.010206573642790318,
    -0.0025103429798036814,
    -0.006101677659898996,
    -0.012289547361433506,
    0.01544274017214775,
    -0.011506636627018452,
    -0.011513819918036461,
    -0.04263632744550705,
    -0.004435298498719931,
    -0.0090717114508152,
    -0.02047060802578926,
    0.01647704467177391,
    -0.009143538773059845,
    0.013532149605453014,
    0.022639775648713112,
    0.016275929287075996,
    -0.0025516434106975794,
    -0.0017013949109241366,
    -0.03553985059261322,
    0.01662069745361805,
    0.027093030512332916,
    -0.008813135325908661,
    -0.0117149343714118,
    -0.04996265098452568,
    0.010853013955056667,
    0.008849048987030983,
    -0.00984743982553482,
    -0.02049933932721615,
    -0.0019698471296578646,
    0.025168074294924736,
    -0.010601620189845562,
    0.0031208698637783527,
    -0.01217462494969368,
    0.02641785889863968,
    0.0023613027296960354,
    0.0024187639355659485,
    -0.009186634793877602,
    -0.015931161120533943,
    0.01802850142121315,
    -0.0057317703031003475,
    -0.001953686121851206,
    0.00870539527386427,
    -0.020915934816002846
  ]
}
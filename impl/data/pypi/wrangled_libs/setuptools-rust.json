{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "operating system :: macos :: macos x",
    "operating system :: microsoft :: windows",
    "operating system :: posix",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: software development :: version control"
  ],
  "description": "# setuptools plugin for rust extensions\n\n[![github actions](https://github.com/pyo3/setuptools-rust/actions/workflows/ci.yml/badge.svg)](https://github.com/pyo3/setuptools-rust/actions/workflows/ci.yml)\n[![pypi package](https://badge.fury.io/py/setuptools-rust.svg)](https://pypi.org/project/setuptools-rust/)\n[![readthedocs](https://readthedocs.org/projects/pip/badge/)](https://setuptools-rust.readthedocs.io/en/latest/)\n[![ruff](https://img.shields.io/endpoint?url=https://raw.githubusercontent.com/astral-sh/ruff/main/assets/badge/v2.json)](https://github.com/astral-sh/ruff)\n\n`setuptools-rust` is a plugin for `setuptools` to build rust python extensions implemented with [pyo3](https://github.com/pyo3/pyo3) or [rust-cpython](https://github.com/dgrunwald/rust-cpython).\n\ncompile and distribute python extensions written in rust as easily as if\nthey were written in c.\n\n## quickstart\n\nthe following is a very basic tutorial that shows how to use `setuptools-rust` in `pyproject.toml`.\nit assumes that you already have a bunch of python and rust files that you want\nto distribute. you can see examples for these files in the\n[`examples/hello-world`](https://github.com/pyo3/setuptools-rust/tree/main/examples/hello-world)\ndirectory in the [github repository](https://github.com/pyo3/setuptools-rust).\nthe [pyo3 docs](https://pyo3.rs) have detailed information on how to write python\nmodules in rust.\n\n```\nhello-world\n\u251c\u2500\u2500 python\n\u2502   \u2514\u2500\u2500 hello_world\n\u2502       \u2514\u2500\u2500 __init__.py\n\u2514\u2500\u2500 rust\n    \u2514\u2500\u2500 lib.rs\n```\n\nonce the implementation files are in place, we need to add a `pyproject.toml`\nfile that tells anyone that wants to use your project how to build it.\nin this file, we use an [array of tables](https://toml.io/en/v1.0.0#array-of-tables)\n(toml jargon equivalent to python's list of dicts) for ``[[tool.setuptools-rust.ext-modules]]``,\nto specify different extension modules written in rust:\n\n\n```toml\n# pyproject.toml\n[build-system]\nrequires = [\"setuptools\", \"setuptools-rust\"]\nbuild-backend = \"setuptools.build_meta\"\n\n[project]\nname = \"hello-world\"\nversion = \"1.0\"\n\n[tool.setuptools.packages]\n# pure python packages/modules\nfind = { where = [\"python\"] }\n\n[[tool.setuptools-rust.ext-modules]]\n# private rust extension module to be nested into the python package\ntarget = \"hello_world._lib\"  # the last part of the name (e.g. \"_lib\") has to match lib.name in cargo.toml,\n                             # but you can add a prefix to nest it inside of a python package.\npath = \"cargo.toml\"      # default value, can be omitted\nbinding = \"pyo3\"         # default value, can be omitted\npy-limited-api = \"auto\"  # default value, can be omitted\n```\n\neach extension module should map directly into the corresponding `[lib]` table on the\n[cargo manifest file](https://doc.rust-lang.org/cargo/reference/manifest.html):\n\n```toml\n# cargo.toml\n[package]\nname = \"hello-world\"\nversion = \"0.1.0\"\nedition = \"2018\"\n\n[dependencies]\npyo3 = { version = \"0.19.2\", features = [\"extension-module\"] }\n\n[lib]\nname = \"_lib\"  # private module to be nested into python package,\n               # needs to match the name of the function with the `[#pymodule]` attribute\npath = \"rust/lib.rs\"\ncrate-type = [\"cdylib\"]  # required for shared library for python to import from.\n\n# see more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html\n# see also pyo3 docs on writing cargo.toml files at https://pyo3.rs\n```\n\nyou will also need to tell setuptools that the rust files are required to build your\nproject from the [source distribution](https://setuptools.pypa.io/en/latest/userguide/miscellaneous.html).\nthat can be done either via `manifest.in` (see example below) or via a plugin like\n[`setuptools-scm`](https://pypi.org/project/setuptools-scm/).\n\n```\n# manifest.in\ninclude cargo.toml\nrecursive-include rust *.rs\n```\n\nwith these files in place, you can install the project in a virtual environment\nfor testing and making sure everything is working correctly:\n\n```powershell\n# cd hello-world\npython3 -m venv .venv\nsource .venv/bin/activate  # on linux or macos\n.venv\\scripts\\activate     # on windows\npython -m pip install -e .\npython\n>>> import hello_world\n# ... try running something from your new extension module ...\n# ... better write some tests with pytest ...\n```\n\n## next steps and final remarks\n\n- when you are ready to distribute your project, have a look on\n  [the notes in the documentation about building wheels](https://setuptools-rust.readthedocs.io/en/latest/building_wheels.html).\n\n- cross-compiling is also supported, using one of\n  [`crossenv`](https://github.com/benfogle/crossenv),\n  [`cross`](https://github.com/rust-embedded/cross) or\n  [`cargo-zigbuild`](https://github.com/messense/cargo-zigbuild).\n  for examples see the `test-crossenv` and `test-cross` and `test-zigbuild` github actions jobs in\n  [`ci.yml`](https://github.com/pyo3/setuptools-rust/blob/main/.github/workflows/ci.yml).\n\n- you can also use `[[tool.setuptools-rust.bins]]` (instead of `[[tool.setuptools-rust.ext-modules]]`),\n  if you want to distribute a binary executable written in rust (instead of a library that can be imported by the python runtime).\n  note however that distributing both library and executable (or multiple executables),\n  may significantly increase the size of the\n  [wheel](https://packaging.python.org/en/latest/glossary/#term-wheel)\n  file distributed by the\n  [package index](https://packaging.python.org/en/latest/glossary/#term-package-index)\n  and therefore increase build, download and installation times.\n  another approach is to use a python entry-point that calls the rust\n  implementation (exposed via pyo3 bindings).\n  see the [hello-world](https://github.com/pyo3/setuptools-rust/tree/main/examples/hello-world)\n  example for more insights.\n\n- for a complete reference of the configuration options, see the\n  [api reference](https://setuptools-rust.readthedocs.io/en/latest/reference.html).\n  you can use any parameter defined by the `rustextension` class with\n  `[[tool.setuptools-rust.ext-modules]]` and any parameter defined by the\n  `rustbin` class with `[[tool.setuptools-rust.bins]]`; just remember to replace\n  underscore characters `_` with dashes `-` in your `pyproject.toml` file.\n\n- `cargo.toml` allow only one `[lib]` table per file.\n  if you require multiple extension modules you will need to write multiple `cargo.toml` files.\n  alternatively you can create a single private rust top-level module that exposes\n  multiple submodules (using [pyo3's submodules](https://pyo3.rs/v0.19.2/module#python-submodules)),\n  which may also reduce the size of the build artifacts.\n  you can always keep your extension modules private and wrap them in pure python\n  to have fine control over the public api.\n\n- if want to include both `[[tool.setuptools-rust.bins]]` and `[[tool.setuptools-rust.ext-modules]]`\n  in the same macos wheel, you might have to manually add an extra `build.rs` file,\n  see [pyo3/setuptools-rust#351](https://github.com/pyo3/setuptools-rust/pull/351)\n  for more information about the workaround.\n\n- for more examples, see:\n  - [`hello-world`](https://github.com/pyo3/setuptools-rust/tree/main/examples/hello-world):\n    a more complete version of the code used in this tutorial that mixes both\n    `[[tool.setuptools-rust.ext-modules]]` and `[[tool.setuptools-rust.bins]]`\n    in a single distribution.\n  - [`html-py-ever`](https://github.com/pyo3/setuptools-rust/tree/main/examples/html-py-ever):\n    a more advanced example that uses rust crates as dependencies.\n  - [`rust_with_cffi`](https://github.com/pyo3/setuptools-rust/tree/main/examples/rust_with_cffi):\n    uses both rust and [cffi](https://cffi.readthedocs.io/en/latest/).\n  - [`namespace_package`](https://github.com/pyo3/setuptools-rust/tree/main/examples/namespace_package):\n    integrates rust-written modules into pep 420 namespace packages.\n  - [`hello-world-script`](https://github.com/pyo3/setuptools-rust/tree/main/examples/hello-world-script):\n    uses rust only for creating binary executables, not library modules.\n",
  "docs_url": null,
  "keywords": "distutils,setuptools,rust",
  "license": "",
  "name": "setuptools-rust",
  "package_url": "https://pypi.org/project/setuptools-rust/",
  "project_url": "https://pypi.org/project/setuptools-rust/",
  "project_urls": {
    "Changelog": "https://github.com/PyO3/setuptools-rust/blob/main/CHANGELOG.md",
    "Documentation": "https://setuptools-rust.readthedocs.io",
    "Homepage": "https://github.com/PyO3/setuptools-rust",
    "Repository": "https://github.com/PyO3/setuptools-rust"
  },
  "release_url": "https://pypi.org/project/setuptools-rust/1.8.1/",
  "requires_dist": [
    "setuptools >=62.4",
    "semantic-version <3,>=2.8.2",
    "tomli >=1.2.1 ; python_version < \"3.11\""
  ],
  "requires_python": ">=3.8",
  "summary": "setuptools rust extension plugin",
  "version": "1.8.1",
  "releases": [],
  "developers": [
    "fafhrd91@gmail.com"
  ],
  "kwds": "rustextension rust_with_cffi rustbin rust badge",
  "license_kwds": "",
  "libtype": "pypi",
  "id": "pypi_setuptools_rust",
  "homepage": "",
  "release_count": 57,
  "dependency_ids": [
    "pypi_semantic_version",
    "pypi_setuptools",
    "pypi_tomli"
  ]
}
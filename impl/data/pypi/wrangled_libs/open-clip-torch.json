{
  "classifiers": [
    "development status :: 3 - alpha",
    "intended audience :: education",
    "intended audience :: science/research",
    "license :: osi approved :: apache software license",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: scientific/engineering",
    "topic :: scientific/engineering :: artificial intelligence",
    "topic :: software development",
    "topic :: software development :: libraries",
    "topic :: software development :: libraries :: python modules"
  ],
  "description": "openclip\n# openclip\n\n[[paper]](https://arxiv.org/abs/2212.07143) [[citations]](#citing) [[clip colab]](https://colab.research.google.com/github/mlfoundations/open_clip/blob/master/docs/interacting_with_open_clip.ipynb) [[coca colab]](https://colab.research.google.com/github/mlfoundations/open_clip/blob/master/docs/interacting_with_open_coca.ipynb)\n[![pypi](https://img.shields.io/pypi/v/open_clip_torch.svg)](https://pypi.python.org/pypi/open_clip_torch)\n\nwelcome to an open source implementation of openai's [clip](https://arxiv.org/abs/2103.00020) (contrastive language-image pre-training).\n\nusing this codebase, we have trained several models on a variety of data sources and compute budgets, ranging from [small-scale experiments](docs/low_acc.md) to larger runs including models trained on datasets such as [laion-400m](https://arxiv.org/abs/2111.02114), [laion-2b](https://arxiv.org/abs/2210.08402) and [datacomp-1b](https://arxiv.org/abs/2304.14108).\nmany of our models and their scaling properties are studied in detail in the paper [reproducible scaling laws for contrastive language-image learning](https://arxiv.org/abs/2212.07143).\nsome of our best models and their zero-shot imagenet-1k accuracy are shown below, along with the vit-l model trained by openai. \nwe provide more details about our full collection of pretrained models [here](docs/pretrained.md), and zero-shot results for 38 datasets [here](docs/openclip_results.csv).\n\n\n| model    | training data | resolution | # of samples seen | imagenet zero-shot acc. | \n| -------- | ------- |  ------- |  ------- |  ------- |  \n| convnext-base | laion-2b  | 256px | 13b | 71.5% |\n| convnext-large | laion-2b  | 320px | 29b | 76.9% |\n| convnext-xxlarge | laion-2b | 256px | 34b | 79.5% |\n| vit-b/32  | datacomp-1b  | 256px | 34b | 72.8% |\n| vit-b/16  | datacomp-1b  | 224px | 13b | 73.5% |\n| vit-l/14  | laion-2b  | 224px | 32b | 75.3% |\n| vit-h/14  | laion-2b  | 224px | 32b | 78.0% |\n| vit-l/14  | datacomp-1b  | 224px | 13b | 79.2% |\n| vit-g/14  | laion-2b  | 224px | 34b | 80.1% |\n|  |  |   |   |  |\n| vit-l/14 | openai's wit | 224px | 13b | 75.5% | \n\nmodel cards with additional model specific details can be found on the hugging face hub under the openclip library tag: https://huggingface.co/models?library=open_clip. \n\nif you found this repository useful, please consider [citing](#citing).\nwe welcome anyone to submit an issue or send an email if you have any other requests or suggestions.\n\nnote that portions of `src/open_clip/` modelling and tokenizer code are adaptations of openai's official [repository](https://github.com/openai/clip).\n\n## approach\n\n| ![clip](https://raw.githubusercontent.com/mlfoundations/open_clip/main/docs/clip.png) |\n|:--:|\n| image credit: https://github.com/openai/clip |\n\n## usage\n\n```\npip install open_clip_torch\n```\n\n```python\nimport torch\nfrom pil import image\nimport open_clip\n\nmodel, _, preprocess = open_clip.create_model_and_transforms('vit-b-32', pretrained='laion2b_s34b_b79k')\ntokenizer = open_clip.get_tokenizer('vit-b-32')\n\nimage = preprocess(image.open(\"clip.png\")).unsqueeze(0)\ntext = tokenizer([\"a diagram\", \"a dog\", \"a cat\"])\n\nwith torch.no_grad(), torch.cuda.amp.autocast():\n    image_features = model.encode_image(image)\n    text_features = model.encode_text(text)\n    image_features /= image_features.norm(dim=-1, keepdim=true)\n    text_features /= text_features.norm(dim=-1, keepdim=true)\n\n    text_probs = (100.0 * image_features @ text_features.t).softmax(dim=-1)\n\nprint(\"label probs:\", text_probs)  # prints: [[1., 0., 0.]]\n```\n\nsee also this [[clip colab]](https://colab.research.google.com/github/mlfoundations/open_clip/blob/master/docs/interacting_with_open_clip.ipynb).\n\nto compute billions of embeddings efficiently, you can use [clip-retrieval](https://github.com/rom1504/clip-retrieval) which has openclip support.\n\n### pretrained models\n\nwe offer a simple model interface to instantiate both pre-trained and untrained models.\nto see which pretrained models are available, use the following code snippet.\nmore details about our pretrained models are available [here](docs/pretrained.md).\n\n```python\n>>> import open_clip\n>>> open_clip.list_pretrained()\n```\n\nyou can find more about the models we support (e.g. number of parameters, flops) in [this table](docs/model_profile.csv).\n\nnote: many existing checkpoints use the quickgelu activation from the original openai models. this activation is actually less efficient than native torch.nn.gelu in recent versions of pytorch. the model defaults are now nn.gelu, so one should use model definitions with `-quickgelu` postfix for the openclip pretrained weights. all openai pretrained weights will always default to quickgelu. one can also use the non `-quickgelu` model definitions with pretrained weights using quickgelu but there will be an accuracy drop, for fine-tune that will likely vanish for longer runs.\nfuture trained models will use nn.gelu.\n\n### loading models\n\nmodels can be loaded with `open_clip.create_model_and_transforms`, as shown in the example below. the model name and corresponding `pretrained` keys are compatible with the outputs of `open_clip.list_pretrained()`. \n\nthe `pretrained` argument also accepts local paths, for example `/path/to/my/b32.pt`.\nyou can also load checkpoints from huggingface this way. to do so, download the `open_clip_pytorch_model.bin` file (for example, [https://huggingface.co/laion/clip-vit-l-14-datacomp.xl-s13b-b90k/tree/main](https://huggingface.co/laion/clip-vit-l-14-datacomp.xl-s13b-b90k/blob/main/open_clip_pytorch_model.bin)), and use `pretrained=/path/to/open_clip_pytorch_model.bin`.\n\n```python\n# pretrained also accepts local paths\nmodel, _, preprocess = open_clip.create_model_and_transforms('vit-b-32', pretrained='laion2b_s34b_b79k') \n```\n\n## fine-tuning on classification tasks\n\nthis repository is focused on training clip models. to fine-tune a *trained* zero-shot model on a downstream classification task such as imagenet, please see [our other repository: wise-ft](https://github.com/mlfoundations/wise-ft). the [wise-ft repository](https://github.com/mlfoundations/wise-ft) contains code for our paper on [robust fine-tuning of zero-shot models](https://arxiv.org/abs/2109.01903), in which we introduce a technique for fine-tuning zero-shot models while preserving robustness under distribution shift.\n\n## data\n\nto download datasets as webdataset, we recommend [img2dataset](https://github.com/rom1504/img2dataset).\n\n### conceptual captions\n\nsee [cc3m img2dataset example](https://github.com/rom1504/img2dataset/blob/main/dataset_examples/cc3m.md).\n\n### yfcc and other datasets\n\nin addition to specifying the training data via csv files as mentioned above, our codebase also supports [webdataset](https://github.com/webdataset/webdataset), which is recommended for larger scale datasets. the expected format is a series of `.tar` files. each of these `.tar` files should contain two files for each training example, one for the image and one for the corresponding text. both files should have the same name but different extensions. for instance, `shard_001.tar` could contain files such as `abc.jpg` and `abc.txt`. you can learn more about `webdataset` at [https://github.com/webdataset/webdataset](https://github.com/webdataset/webdataset). we use `.tar` files with 1,000 data points each, which we create using [tarp](https://github.com/webdataset/tarp).\n\nyou can download the yfcc dataset from [multimedia commons](http://mmcommons.org/).\nsimilar to openai, we used a subset of yfcc to reach the aforementioned accuracy numbers.\nthe indices of images in this subset are in [openai's clip repository](https://github.com/openai/clip/blob/main/data/yfcc100m.md).\n\n\n## training clip\n\n### install\n\nwe advise you first create a virtual environment with:\n\n```\npython3 -m venv .env\nsource .env/bin/activate\npip install -u pip\n```\n\nyou can then install openclip for training with `pip install 'open_clip_torch[training]'`.\n\n#### development\n\nif you want to make changes to contribute code, you can clone openclip then run `make install` in openclip folder (after creating a virtualenv)\n\ninstall pip pytorch as per https://pytorch.org/get-started/locally/\n\nyou may run `make install-training` to install training deps\n\n#### testing\n\ntest can be run with `make install-test` then `make test`\n\n`python -m pytest -x -s -v tests -k \"training\"` to run a specific test\n\nrunning regression tests against a specific git revision or tag:\n1. generate testing data\n    ```sh\n    python tests/util_test.py --model rn50 rn101 --save_model_list models.txt --git_revision 9d31b2ec4df6d8228f370ff20c8267ec6ba39383\n    ```\n    **_warning_: this will invoke git and modify your working tree, but will reset it to the current state after data has been generated! \\\n    don't modify your working tree while test data is being generated this way.**\n\n2. run regression tests\n    ```sh\n    open_clip_test_reg_models=models.txt python -m pytest -x -s -v -m regression_test\n    ```\n\n### sample single-process running code:\n\n```bash\npython -m training.main \\\n    --save-frequency 1 \\\n    --zeroshot-frequency 1 \\\n    --report-to tensorboard \\\n    --train-data=\"/path/to/train_data.csv\"  \\\n    --val-data=\"/path/to/validation_data.csv\"  \\\n    --csv-img-key filepath \\\n    --csv-caption-key title \\\n    --imagenet-val=/path/to/imagenet/root/val/ \\\n    --warmup 10000 \\\n    --batch-size=128 \\\n    --lr=1e-3 \\\n    --wd=0.1 \\\n    --epochs=30 \\\n    --workers=8 \\\n    --model rn50\n```\n\nnote: `imagenet-val` is the path to the *validation* set of imagenet for zero-shot evaluation, not the training set!\nyou can remove this argument if you do not want to perform zero-shot evaluation on imagenet throughout training. note that the `val` folder should contain subfolders. if it does not, please use [this script](https://raw.githubusercontent.com/soumith/imagenetloader.torch/master/valprep.sh).\n\n### multi-gpu and beyond\n\nthis code has been battle tested up to 1024 a100s and offers a variety of solutions\nfor distributed training. we include native support for slurm clusters.\n\nas the number of devices used to train increases, so does the space complexity of\nthe the logit matrix. using a na\u00efve all-gather scheme, space complexity will be\n`o(n^2)`. instead, complexity may become effectively linear if the flags\n`--gather-with-grad` and `--local-loss` are used. this alteration results in one-to-one\nnumerical results as the na\u00efve method.\n\n#### epochs\n\nfor larger datasets (eg laion2b), we recommend setting `--train-num-samples` to a lower value than the full epoch, for example `--train-num-samples 135646078` to 1/16 of an epoch in conjunction with `--dataset-resampled` to do sampling with replacement. this allows having frequent checkpoints to evaluate more often.\n\n#### patch dropout\n\n<a href=\"https://arxiv.org/abs/2212.00794\">recent research</a> has shown that one can dropout half to three-quarters of the visual tokens, leading to up to 2-3x training speeds without loss of accuracy.\n\nyou can set this on your visual transformer config with the key `patch_dropout`.\n\nin the paper, they also finetuned without the patch dropout at the end. you can do this with the command-line argument `--force-patch-dropout 0.`\n\n#### multiple data sources\n\nopenclip supports using multiple data sources, by separating different data paths with `::`.\nfor instance, to train on cc12m and on laion, one might use `--train-data \"/data/cc12m/cc12m-train-{0000..2175}.tar::/data/laion-400m/{00000..41455}.tar\"`.\nusing `--dataset-resampled` is recommended for these cases.\n\nby default, on expectation the amount of times the model will see a sample from each source is proportional to the size of the source.\nfor instance, when training on one data source with size 400m and one with size 10m, samples from the first source are 40x more likely to be seen in expectation.\n\nwe also support different weighting of the data sources, by using the `--train-data-upsampling-factors` flag.\nfor instance, using `--train-data-upsampling-factors=1::1` in the above scenario is equivalent to not using the flag, and `--train-data-upsampling-factors=1::2` is equivalent to upsampling the second data source twice.\nif you want to sample from data sources with the same frequency, the upsampling factors should be inversely proportional to the sizes of the data sources.\nfor instance, if dataset `a` has 1000 samples and dataset `b` has 100 samples, you can use `--train-data-upsampling-factors=0.001::0.01` (or analogously, `--train-data-upsampling-factors=1::10`).\n\n#### single-node\n\nwe make use of `torchrun` to launch distributed jobs. the following launches a\na job on a node of 4 gpus:\n\n```bash\ncd open_clip/src\ntorchrun --nproc_per_node 4 -m training.main \\\n    --train-data '/data/cc12m/cc12m-train-{0000..2175}.tar' \\\n    --train-num-samples 10968539 \\\n    --dataset-type webdataset \\\n    --batch-size 320 \\\n    --precision amp \\\n    --workers 4 \\\n    --imagenet-val /data/imagenet/validation/\n```\n\n#### multi-node\n\nthe same script above works, so long as users include information about the number\nof nodes and host node.\n\n```bash\ncd open_clip/src\ntorchrun --nproc_per_node=4 \\\n    --rdzv_endpoint=$hoste_node_addr \\\n    -m training.main \\\n    --train-data '/data/cc12m/cc12m-train-{0000..2175}.tar' \\\n    --train-num-samples 10968539 \\\n    --dataset-type webdataset \\\n    --batch-size 320 \\\n    --precision amp \\\n    --workers 4 \\\n    --imagenet-val /data/imagenet/validation/\n```\n\n#### slurm\n\nthis is likely the easiest solution to utilize. the following script was used to\ntrain our largest models:\n\n```bash\n#!/bin/bash -x\n#sbatch --nodes=32\n#sbatch --gres=gpu:4\n#sbatch --ntasks-per-node=4\n#sbatch --cpus-per-task=6\n#sbatch --wait-all-nodes=1\n#sbatch --job-name=open_clip\n#sbatch --account=account_name\n#sbatch --partition partition_name\n\neval \"$(/path/to/conda/bin/conda shell.bash hook)\" # init conda\nconda activate open_clip\nexport cuda_visible_devices=0,1,2,3\nexport master_port=12802\n\nmaster_addr=$(scontrol show hostnames \"$slurm_job_nodelist\" | head -n 1)\nexport master_addr=$master_addr\n\ncd /shared/open_clip\nexport pythonpath=\"$pythonpath:$pwd/src\"\nsrun --cpu_bind=v --accel-bind=gn python -u src/training/main.py \\\n    --save-frequency 1 \\\n    --report-to tensorboard \\\n    --train-data=\"/data/laion-400m/{00000..41455}.tar\" \\\n    --warmup 2000 \\\n    --batch-size=256 \\\n    --epochs=32 \\\n    --workers=8 \\\n    --model vit-b-32 \\\n    --name \"vit-b-32-vanilla\" \\\n    --seed 0 \\\n    --local-loss \\\n    --gather-with-grad\n```\n\n### resuming from a checkpoint:\n\n```bash\npython -m training.main \\\n    --train-data=\"/path/to/train_data.csv\" \\\n    --val-data=\"/path/to/validation_data.csv\"  \\\n    --resume /path/to/checkpoints/epoch_k.pt\n```\n\n### training coca:\ntraining [coca](https://arxiv.org/abs/2205.01917) models is enabled through specifying a coca config using the ```--model``` parameter of the training script. currently available configs are \"coca_base\", \"coca_vit-b-32\", and \"coca_roberta-vit-b-32\" (which uses roberta as the text encoder). coca configs are different from clip configs because they have an additional \"multimodal_cfg\" component which specifies parameters for the multimodal text decoder. here's an example from the coca_vit-b-32 config:\n```json\n\"multimodal_cfg\": {\n\t\"context_length\": 76,\n\t\"vocab_size\": 49408,\n\t\"width\": 512,\n\t\"heads\": 8,\n\t\"layers\": 12,\n\t\"latent_dim\": 512,\n\t\"attn_pooler_heads\": 8\n}\n```\ncredit to [lucidrains](https://github.com/lucidrains) for [initial code](https://github.com/lucidrains/coca-pytorch), [gpucce](https://github.com/gpucce) for adapting the code to open_clip, and [iejmac](https://github.com/iejmac) for training the models.\n\n### generating text with coca\n\n```python\nimport open_clip\nimport torch\nfrom pil import image\n\nmodel, _, transform = open_clip.create_model_and_transforms(\n  model_name=\"coca_vit-l-14\",\n  pretrained=\"mscoco_finetuned_laion2b-s13b-b90k\"\n)\n\nim = image.open(\"cat.jpg\").convert(\"rgb\")\nim = transform(im).unsqueeze(0)\n\nwith torch.no_grad(), torch.cuda.amp.autocast():\n  generated = model.generate(im)\n\nprint(open_clip.decode(generated[0]).split(\"<end_of_text>\")[0].replace(\"<start_of_text>\", \"\"))\n```\n\nsee also this [[coca colab]](https://colab.research.google.com/github/mlfoundations/open_clip/blob/master/docs/interacting_with_open_coca.ipynb)\n\n### fine tuning coca\n\nto fine-tune coca on mscoco, first create the dataset, one way is using a csvdataset and perhaps the simplest way to do it is using [clip_benchmark](https://github.com/laion-ai/clip_benchmark) which in turn uses [pycocotools](https://github.com/cocodataset/cocoapi) (that can be used also by itself).\n\n```python\nfrom clip_benchmark.datasets.builder import build_dataset\nimport pandas as pd\nimport os\n\nroot_path = \"path/to/data/dir\" # set this to smth meaningful\nds = build_dataset(\"mscoco_captions\", root=root_path, split=\"train\") # this downloads the dataset if it is not there already\ncoco = ds.coco\nimgs = coco.loadimgs(coco.getimgids())\nfuture_df = {\"filepath\":[], \"title\":[]}\nfor img in imgs:\n    caps = coco.imgtoanns[img[\"id\"]]\n    for cap in caps:\n        future_df[\"filepath\"].append(img[\"file_name\"])\n        future_df[\"title\"].append(cap[\"caption\"])\npd.dataframe.from_dict(future_df).to_csv(\n  os.path.join(root_path, \"train2014.csv\"), index=false, sep=\"\\t\"\n)\n```\nthis should create a csv dataset that one can use to fine-tune coca with open_clip\n```bash\npython -m training.main \\\n    --dataset-type \"csv\" \\\n    --train-data \"path/to/data/dir/train2014.csv\" \\\n    --warmup 1000 \\\n    --batch-size 128 \\\n    --lr 1e-5 \\\n    --wd 0.1 \\\n    --epochs 1 \\\n    --workers 3 \\\n    --model \"coca_vit-l-14\" \\\n    --report-to \"wandb\" \\\n    --coca-contrastive-loss-weight 0 \\\n    --coca-caption-loss-weight 1 \\\n    --log-every-n-steps 100\n```\n\nthis is a general setting, open_clip has very parameters that can be set, ```python -m training.main --help``` should show them. the only relevant change compared to pre-training are the two arguments\n\n```bash\n--coca-contrastive-loss-weight 0\n--coca-caption-loss-weight 1\n```\nwhich make the model only train the generative side.\n\n### training with pre-trained language models as text encoder:\n\nif you wish to use different language models as the text encoder for clip you can do so by using one of the hugging face model configs in ```src/open_clip/model_configs``` and passing in it's tokenizer as the ```--model``` and ```--hf-tokenizer-name``` parameters respectively. currently we only support roberta (\"test-roberta\" config), however adding new models should be trivial. you can also determine how many layers, from the end, to leave unfrozen with the ```--lock-text-unlocked-layers``` parameter. here's an example command to train clip with the roberta lm that has it's last 10 layers unfrozen:\n```bash\npython -m training.main \\\n         --train-data=\"pipe:aws s3 cp s3://s-mas/cc3m/{00000..00329}.tar -\" \\\n         --train-num-samples 3000000 \\\n         --val-data=\"pipe:aws s3 cp s3://s-mas/cc3m/{00330..00331}.tar -\" \\\n         --val-num-samples 10000 \\\n         --dataset-type webdataset \\\n         --batch-size 256 \\\n         --warmup 2000 \\\n         --epochs 10 \\\n         --lr 5e-4 \\\n         --precision amp \\\n         --workers 6 \\\n         --model \"roberta-vit-b-32\" \\\n         --lock-text \\\n         --lock-text-unlocked-layers 10 \\\n         --name \"10_unfrozen\" \\\n         --report-to \"tensorboard\" \\\n```\n\n### loss curves\n\nwhen run on a machine with 8 gpus the command should produce the following training curve for conceptual captions:\n\n![clip zero shot training curve](https://raw.githubusercontent.com/mlfoundations/open_clip/main/docs/clip_zeroshot.png)\n\nmore detailed curves for conceptual captions are given at [/docs/clip_conceptual_captions.md](/docs/clip_conceptual_captions.md).\n\nwhen training a rn50 on yfcc the same hyperparameters as above are used, with the exception of `lr=5e-4` and `epochs=32`.\n\nnote that to use another model, like `vit-b/32` or `rn50x4` or `rn50x16` or `vit-b/16`, specify with `--model rn50x4`.\n\n### logging\n\nfor tensorboard logging, run:\n```bash\ntensorboard --logdir=logs/tensorboard/ --port=7777\n```\n\nfor wandb logging, we recommend looking at the `step` variable instead of `step`, since the later was not properly set in earlier versions of this codebase.\nfor older runs with models trained before https://github.com/mlfoundations/open_clip/pull/613, the `step` variable should be ignored.\nfor newer runs, after that pr, the two variables are the same.\n\n## evaluation / zero-shot\n\nwe recommend https://github.com/laion-ai/clip_benchmark#how-to-use for systematic evaluation on 40 datasets.\n\n### evaluating local checkpoint:\n\n```bash\npython -m training.main \\\n    --val-data=\"/path/to/validation_data.csv\"  \\\n    --model rn101 \\\n    --pretrained /path/to/checkpoints/epoch_k.pt\n```\n\n### evaluating hosted pretrained checkpoint on imagenet zero-shot prediction:\n\n```bash\npython -m training.main \\\n    --imagenet-val /path/to/imagenet/validation \\\n    --model vit-b-32-quickgelu \\\n    --pretrained laion400m_e32\n```\n\n### model distillation\n\nyou can distill from a pre-trained by using `--distill-model` and `--distill-pretrained` to specify the model you'd like to distill from.\nfor instance, to distill from openai vit-l/14 use `--distill-model vit-l-14 --distill-pretrained openai`.\n\n### gradient accumulation\n\nto simulate larger batches use `--accum-freq k`. if per gpu batch size, `--batch-size`, is `m`, then the effective batch size will be `k * m * num_gpus`.\n\nwhen increasing `--accum-freq` from its default of 1, samples/s will remain approximately constant (batch size will double, as will time-per-batch). it is recommended to use other features to reduce batch size such as `--grad-checkpointing --local-loss --gather-with-grad` before increasing `--accum-freq`. `--accum-freq` can be used in addition to these features.\n\ninstead of 1 forward pass per example, there are now 2 forward passes per-example. however, the first is done with `torch.no_grad`.\n\nthere is some additional gpu memory required --- the features and data from all `m` batches are stored in memory.\n\nthere are also `m` loss computations instead of the usual 1.\n\nfor more information see cui et al. (https://arxiv.org/abs/2112.09331) or pham et al. (https://arxiv.org/abs/2111.10050).\n\n### int8 support\n\nwe have beta support for int8 training and inference.\nyou can enable int8 training with `--use-bnb-linear switchbacklinearglobal` or `--use-bnb-linear switchbacklinearglobalmemefficient`.\nplease see the bitsandbytes library for definitions for these layers.\nfor clip vit-huge this should currently correspond to a 10% training speedup with no accuracy loss.\nmore speedups comin when the attention layer is refactored so that linear layers man be replaced there, too.\n\nsee the tutorial https://github.com/mlfoundations/open_clip/blob/main/tutorials/int8_tutorial.ipynb or [paper](https://arxiv.org/abs/2304.13013).\n\n### support for remote loading/training\n\nit is always possible to resume directly from a remote file, e.g., a file in an s3 bucket. just set `--resume s3://<path-to-checkpoint> `.\nthis will work with any filesystem supported by `fsspec`.\n\nit is also possible to train `open_clip` models while continuously backing up to s3. this can help to avoid slow local file systems.\n\nsay that your node has a local ssd `/scratch`, an s3 bucket `s3://<path-to-bucket>`.\n\nin that case, set `--logs /scratch` and `--remote-sync s3://<path-to-bucket>`. then, a background process will sync `/scratch/<run-name>` to `s3://<path-to-bucket>/<run-name>`. after syncing, the background process will sleep for `--remote-sync-frequency` seconds, which defaults to 5 minutes.\n\nthere is also experimental support for syncing to other remote file systems, not just s3. to do so, specify `--remote-sync-protocol fsspec`. however, this is currently very slow and not recommended.\n\nalso, to optionally avoid saving too many checkpoints locally when using these features, you can use `--delete-previous-checkpoint` which deletes the previous checkpoint after saving a new one.\n\nnote: if you are using this feature with `--resume latest`, there are a few warnings. first, use with `--save-most-recent` is not supported. second, only `s3` is supported. finally, since the sync happens in the background, it is possible that the most recent checkpoint may not be finished syncing to the remote.\n\n### pushing models to hugging face hub\n\nthe module `open_clip.push_to_hf_hub` includes helpers for pushing models /w weights and config to the hf hub.\n\nthe tool can be run from command line, ex:\n`python -m open_clip.push_to_hf_hub --model convnext_large_d_320 --pretrained /train/checkpoints/epoch_12.pt --repo-id laion/clip-convnext_large_d_320.laion2b-s29b-b131k-ft`\n\n\n\n## acknowledgments\n\nwe gratefully acknowledge the gauss centre for supercomputing e.v. (www.gauss-centre.eu) for funding this part of work by providing computing time through the john von neumann institute for computing (nic) on the gcs supercomputer juwels booster at j\u00fclich supercomputing centre (jsc).\n\n## the team\n\ncurrent development of this repository is led by [ross wightman](https://rwightman.com/), [romain beaumont](https://github.com/rom1504), [cade gordon](http://cadegordon.io/), and [vaishaal shankar](http://vaishaal.com/).\n\nthe original version of this repository is from a group of researchers at uw, google, stanford, amazon, columbia, and berkeley.\n\n[gabriel ilharco*](http://gabrielilharco.com/), [mitchell wortsman*](https://mitchellnw.github.io/), [nicholas carlini](https://nicholas.carlini.com/), [rohan taori](https://www.rohantaori.com/), [achal dave](http://www.achaldave.com/), [vaishaal shankar](http://vaishaal.com/), [john miller](https://people.eecs.berkeley.edu/~miller_john/), [hongseok namkoong](https://hsnamkoong.github.io/), [hannaneh hajishirzi](https://homes.cs.washington.edu/~hannaneh/), [ali farhadi](https://homes.cs.washington.edu/~ali/), [ludwig schmidt](https://people.csail.mit.edu/ludwigs/)\n\nspecial thanks to [jong wook kim](https://jongwook.kim/) and [alec radford](https://github.com/newmu) for help with reproducing clip!\n\n## citing\n\nif you found this repository useful, please consider citing:\n```bibtex\n@software{ilharco_gabriel_2021_5143773,\n  author       = {ilharco, gabriel and\n                  wortsman, mitchell and\n                  wightman, ross and\n                  gordon, cade and\n                  carlini, nicholas and\n                  taori, rohan and\n                  dave, achal and\n                  shankar, vaishaal and\n                  namkoong, hongseok and\n                  miller, john and\n                  hajishirzi, hannaneh and\n                  farhadi, ali and\n                  schmidt, ludwig},\n  title        = {openclip},\n  month        = jul,\n  year         = 2021,\n  note         = {if you use this software, please cite it as below.},\n  publisher    = {zenodo},\n  version      = {0.1},\n  doi          = {10.5281/zenodo.5143773},\n  url          = {https://doi.org/10.5281/zenodo.5143773}\n}\n```\n\n```bibtex\n@inproceedings{cherti2023reproducible,\n  title={reproducible scaling laws for contrastive language-image learning},\n  author={cherti, mehdi and beaumont, romain and wightman, ross and wortsman, mitchell and ilharco, gabriel and gordon, cade and schuhmann, christoph and schmidt, ludwig and jitsev, jenia},\n  booktitle={proceedings of the ieee/cvf conference on computer vision and pattern recognition},\n  pages={2818--2829},\n  year={2023}\n}\n```\n\n```bibtex\n@inproceedings{radford2021learningtv,\n  title={learning transferable visual models from natural language supervision},\n  author={alec radford and jong wook kim and chris hallacy and a. ramesh and gabriel goh and sandhini agarwal and girish sastry and amanda askell and pamela mishkin and jack clark and gretchen krueger and ilya sutskever},\n  booktitle={icml},\n  year={2021}\n}\n```\n\n```bibtex\n@inproceedings{schuhmann2022laionb,\n  title={{laion}-5b: an open large-scale dataset for training next generation image-text models},\n  author={christoph schuhmann and\n          romain beaumont and\n          richard vencu and\n          cade w gordon and\n          ross wightman and\n          mehdi cherti and\n          theo coombes and\n          aarush katta and\n          clayton mullis and\n          mitchell wortsman and\n          patrick schramowski and\n          srivatsa r kundurthy and\n          katherine crowson and\n          ludwig schmidt and\n          robert kaczmarczyk and\n          jenia jitsev},\n  booktitle={thirty-sixth conference on neural information processing systems datasets and benchmarks track},\n  year={2022},\n  url={https://openreview.net/forum?id=m3y74vmsmcy}\n}\n```\n\n[![doi](https://zenodo.org/badge/390536799.svg)](https://zenodo.org/badge/latestdoi/390536799)\n\n\n",
  "docs_url": null,
  "keywords": "clip pretrained",
  "license": "",
  "name": "open-clip-torch",
  "package_url": "https://pypi.org/project/open-clip-torch/",
  "project_url": "https://pypi.org/project/open-clip-torch/",
  "project_urls": {
    "Homepage": "https://github.com/mlfoundations/open_clip"
  },
  "release_url": "https://pypi.org/project/open-clip-torch/2.23.0/",
  "requires_dist": [
    "torch >=1.9.0",
    "torchvision",
    "regex",
    "ftfy",
    "tqdm",
    "huggingface-hub",
    "sentencepiece",
    "protobuf",
    "timm",
    "torch >=1.9.0 ; extra == 'training'",
    "torchvision ; extra == 'training'",
    "webdataset >=0.2.5 ; extra == 'training'",
    "regex ; extra == 'training'",
    "ftfy ; extra == 'training'",
    "tqdm ; extra == 'training'",
    "pandas ; extra == 'training'",
    "braceexpand ; extra == 'training'",
    "huggingface-hub ; extra == 'training'",
    "transformers ; extra == 'training'",
    "timm >=0.9.8 ; extra == 'training'",
    "fsspec ; extra == 'training'"
  ],
  "requires_python": ">=3.7",
  "summary": "openclip",
  "version": "2.23.0",
  "releases": [],
  "developers": [],
  "kwds": "open_clip_pytorch_model openclip interacting_with_open_clip open_clip open_clip_torch",
  "license_kwds": "",
  "libtype": "pypi",
  "id": "pypi_open_clip_torch",
  "homepage": "https://github.com/mlfoundations/open_clip",
  "release_count": 42,
  "dependency_ids": [
    "pypi_braceexpand",
    "pypi_fsspec",
    "pypi_ftfy",
    "pypi_huggingface_hub",
    "pypi_pandas",
    "pypi_protobuf",
    "pypi_regex",
    "pypi_sentencepiece",
    "pypi_timm",
    "pypi_torch",
    "pypi_torchvision",
    "pypi_tqdm",
    "pypi_transformers",
    "pypi_webdataset"
  ],
  "documentation_summary": "The HTML text is a detailed documentation for the `open-clip-torch` package version 2.24.0, released on January 8, 2024, available on PyPI. It provides an open-source implementation of OpenAI's CLIP (Contrastive Language-Image Pre-training), supporting a variety of models trained on datasets like LAION-400M, LAION-2B, and DataComp-1B. The document includes instructions for installation, usage, training, fine-tuning, and evaluation of models, alongside details on pretrained models' performance on ImageNet zero-shot accuracy. It also covers advanced training techniques, support for int8 training, and model distillation. The package requires Python >=3.7 and is licensed under the Apache Software License.",
  "embedding": [
    -0.022347381338477135,
    -0.014946344308555126,
    0.014181714504957199,
    -0.020255470648407936,
    0.028522126376628876,
    0.035403791815042496,
    0.033557139337062836,
    0.007429891265928745,
    -0.009038498625159264,
    -0.02501637116074562,
    0.023472685366868973,
    0.017846165224909782,
    -0.0316527783870697,
    0.009204409085214138,
    -0.008475846610963345,
    0.008504700846970081,
    0.018264546990394592,
    -0.020154481753706932,
    -0.007191846147179604,
    -0.009514588862657547,
    0.008432566188275814,
    0.00992575753480196,
    -0.019952503964304924,
    -0.0043966202065348625,
    -0.003179344115778804,
    -0.007963689044117928,
    0.03133538365364075,
    -0.01842324435710907,
    -0.006329834461212158,
    -0.008439779281616211,
    0.026834169402718544,
    -0.008281082846224308,
    -0.023357268422842026,
    -0.013568568043410778,
    -0.026285944506525993,
    -0.004623844753950834,
    0.020471874624490738,
    -0.02891165390610695,
    0.043078940361738205,
    0.003641007235273719,
    0.005568811669945717,
    -0.001010789768770337,
    0.001776321092620492,
    -0.01649003103375435,
    -0.019663963466882706,
    0.02018333598971367,
    -0.005709474440664053,
    -0.014766006730496883,
    0.0024922594893723726,
    0.022304100915789604,
    -0.0026329224929213524,
    0.041693951934576035,
    0.01546571496874094,
    -0.0030062205623835325,
    0.019144592806696892,
    -0.001789846341125667,
    0.00937753263860941,
    0.02694958634674549,
    0.0014913883060216904,
    0.000798442808445543,
    0.014333197847008705,
    -0.008742745965719223,
    -0.026487922295928,
    0.001408433192409575,
    0.0018664896488189697,
    -0.013085264712572098,
    -0.01374890562146902,
    0.04229988530278206,
    0.002477832604199648,
    0.0047320472076535225,
    0.031075699254870415,
    0.02882509119808674,
    0.011418948881328106,
    -0.022318527102470398,
    0.05086950585246086,
    -0.011664208024740219,
    -0.032547250390052795,
    -0.0006866337498649955,
    0.003644614014774561,
    0.0032929566223174334,
    0.020039064809679985,
    -0.00893750973045826,
    0.005666193552315235,
    0.028651967644691467,
    0.010387420654296875,
    -0.000759670278057456,
    0.008295509032905102,
    0.013395444490015507,
    -0.03609628602862358,
    0.0032677093986421824,
    0.029950395226478577,
    -0.00031198328360915184,
    0.024035336449742317,
    0.012594747357070446,
    -0.02413632534444332,
    0.02690630406141281,
    -0.011808477342128754,
    0.02790176495909691,
    0.00881488062441349,
    -0.005377653986215591,
    -0.00036067431210540235,
    0.0032947598956525326,
    -0.0071413516998291016,
    -0.021539470180869102,
    -0.02413632534444332,
    -0.006766250357031822,
    0.008288295939564705,
    0.01410236582159996,
    0.014845355413854122,
    0.019317716360092163,
    -0.03318203613162041,
    0.05133116990327835,
    -0.019534122198820114,
    -0.03566347807645798,
    0.009168341755867004,
    -0.012688523158431053,
    0.03257610648870468,
    -0.013734478503465652,
    -0.018957043066620827,
    -0.0021748661529272795,
    0.011159263551235199,
    0.019288862124085426,
    -0.001044152188114822,
    -0.021626032888889313,
    0.02198670618236065,
    0.003924136515706778,
    -0.014188927598297596,
    -0.006784284021705389,
    0.011938320472836494,
    -0.03018122725188732,
    0.016893984749913216,
    0.017297940328717232,
    0.01712481677532196,
    0.0015166355296969414,
    -0.026011832058429718,
    0.029604148119688034,
    -0.0023732371628284454,
    -0.02565115876495838,
    -0.03101799264550209,
    -0.017269086092710495,
    0.00992575753480196,
    0.013128545135259628,
    -0.0017943547572940588,
    -0.008786026388406754,
    -0.01246490515768528,
    0.03950105234980583,
    -0.0026076752692461014,
    0.010322499088943005,
    0.0013065427774563432,
    0.013943669386208057,
    0.005713081452995539,
    -0.03958761319518089,
    -0.03404765576124191,
    0.0201112013310194,
    0.026127249002456665,
    0.008757173083722591,
    0.0045805638656020164,
    0.015855243429541588,
    -0.007559733930975199,
    -0.009399172849953175,
    0.0016374614788219333,
    0.0163746140897274,
    -0.039472199976444244,
    -0.0074371048249304295,
    0.009341465309262276,
    0.023775652050971985,
    0.01901474967598915,
    -0.03237412869930267,
    -0.00456253020092845,
    0.010336926206946373,
    0.019635111093521118,
    0.02337169647216797,
    -0.026935158297419548,
    -0.00013716895773541182,
    0.0019819054286926985,
    0.017196951434016228,
    0.014621737413108349,
    0.006178351119160652,
    -0.02018333598971367,
    -0.01998135820031166,
    0.006398362573236227,
    0.01466501783579588,
    -0.00720987981185317,
    0.04313664883375168,
    -0.003547231899574399,
    -0.021813582628965378,
    -0.0068636322394013405,
    -0.0003820893762167543,
    -0.02543475292623043,
    -0.012969848699867725,
    0.014051871374249458,
    0.030527474358677864,
    -0.018062571063637733,
    -0.006174744572490454,
    -0.580310583114624,
    -0.023818932473659515,
    -0.026935158297419548,
    -0.029431024566292763,
    -0.005410114768892527,
    0.00134802027605474,
    -0.0036031363997608423,
    -0.012133084237575531,
    -0.028767384588718414,
    0.040684062987565994,
    -0.01959182880818844,
    -0.008555195294320583,
    -0.02530490979552269,
    -0.002118961652740836,
    -0.004483181983232498,
    -0.045300696045160294,
    0.005875384900718927,
    -0.0043208785355091095,
    0.0015229473356157541,
    -0.001994529040530324,
    -0.03875084966421127,
    0.016259199008345604,
    -0.006935767363756895,
    0.02455470897257328,
    -0.006254092790186405,
    -0.005139609333127737,
    0.0029827766120433807,
    -0.016461176797747612,
    0.018019288778305054,
    -0.01244326401501894,
    -0.022130977362394333,
    0.0081873070448637,
    0.022837897762656212,
    -0.009593936614692211,
    0.05773674696683884,
    -0.013294455595314503,
    0.00024210264382418245,
    0.036788780242204666,
    0.012053735554218292,
    0.03445161134004593,
    -0.027670934796333313,
    -0.01133238710463047,
    -0.010437915101647377,
    0.0065534524619579315,
    0.00337771512567997,
    0.001815093564800918,
    0.010964499786496162,
    -0.0027807990554720163,
    0.0007619244861416519,
    -0.0008705776417627931,
    -0.004504822194576263,
    0.015970658510923386,
    0.012248500250279903,
    -0.028781810775399208,
    0.0065678795799613,
    0.000500435649883002,
    0.04628172889351845,
    -0.01653331145644188,
    0.029301181435585022,
    -0.009312611073255539,
    -0.019490839913487434,
    0.023602528497576714,
    0.0020576470997184515,
    -0.028680821880698204,
    -0.004263170529156923,
    0.0016473799478262663,
    -0.005500283557921648,
    -0.002169456100091338,
    0.0014210568042472005,
    -0.026661045849323273,
    0.014304343611001968,
    -0.033095475286245346,
    0.01591295190155506,
    -0.020991245284676552,
    0.012782298028469086,
    0.029012642800807953,
    0.017557626590132713,
    -0.00022429434466175735,
    0.01674971543252468,
    0.03349943086504936,
    0.02367466315627098,
    0.007346936035901308,
    0.009723779745399952,
    -7.427636592183262e-05,
    0.008901442401111126,
    0.0222031120210886,
    0.006845598574727774,
    -0.00041207042522728443,
    0.008555195294320583,
    0.0002955275122076273,
    0.01485978253185749,
    0.02433830313384533,
    -0.029604148119688034,
    -0.057765599340200424,
    0.007855487056076527,
    0.02488652803003788,
    -0.034134216606616974,
    -0.01741335727274418,
    -0.006135070230811834,
    -0.00992575753480196,
    -0.003848395077511668,
    -0.017225805670022964,
    -0.006362295243889093,
    0.022938886657357216,
    0.018452098593115807,
    0.021669313311576843,
    0.002488652942702174,
    0.003691501682624221,
    0.0010684976587072015,
    -0.02790176495909691,
    -0.026386933401226997,
    -0.016273625195026398,
    -0.018221266567707062,
    -0.006647227797657251,
    0.02350153960287571,
    -0.03488441929221153,
    0.020500728860497475,
    0.01817798614501953,
    0.01059661153703928,
    -0.01258753426373005,
    -0.002093714429065585,
    -0.017398929223418236,
    0.0003113070270046592,
    0.011606499552726746,
    0.019750526174902916,
    0.0025625911075621843,
    0.015667691826820374,
    -0.023818932473659515,
    -0.022563785314559937,
    -0.0019404279300943017,
    0.018524233251810074,
    0.005301912780851126,
    0.027050575241446495,
    -0.016735289245843887,
    0.02472783252596855,
    0.03257610648870468,
    0.0037546197418123484,
    0.018985897302627563,
    0.011866184882819653,
    -0.000728562125004828,
    -0.003931350074708462,
    0.011209757998585701,
    0.00696822814643383,
    -0.02031317725777626,
    -0.025319337844848633,
    -0.024670124053955078,
    0.013215106911957264,
    0.006614767014980316,
    0.012897714041173458,
    -0.0011262055486440659,
    -0.014347624965012074,
    -0.015999512746930122,
    -0.025189494714140892,
    -0.019490839913487434,
    -0.00706200348213315,
    0.00023240952577907592,
    -0.03286464512348175,
    -0.03018122725188732,
    -0.013828253373503685,
    -0.023775652050971985,
    0.00820173416286707,
    0.026964012533426285,
    0.009088993072509766,
    0.0029593328945338726,
    -0.028522126376628876,
    0.011404521763324738,
    -0.0091250604018569,
    0.036269411444664,
    -0.012977061793208122,
    -0.04051094129681587,
    0.003036877838894725,
    -0.04227102920413017,
    0.008136812597513199,
    0.03093142993748188,
    -0.006845598574727774,
    0.020168907940387726,
    -0.024525854736566544,
    0.02119322307407856,
    -0.008100745268166065,
    -0.01560998521745205,
    0.008468633517622948,
    0.011202544905245304,
    -0.011058274656534195,
    0.000664091610815376,
    0.018192412331700325,
    0.008396497927606106,
    0.015537849627435207,
    0.015999512746930122,
    -0.004403833299875259,
    0.0013525286922231317,
    -0.01855308748781681,
    0.022679202258586884,
    -0.013207893818616867,
    0.03629826381802559,
    -0.009932970628142357,
    0.0323164202272892,
    0.026834169402718544,
    0.002189293270930648,
    6.46959597361274e-05,
    0.01985151506960392,
    0.004854676313698292,
    0.03101799264550209,
    0.010466769337654114,
    -0.022145403549075127,
    -0.011613713577389717,
    -0.024482572451233864,
    0.021308640018105507,
    -0.022924460470676422,
    0.002189293270930648,
    0.013669556938111782,
    0.020717132836580276,
    -0.011130409315228462,
    -0.024670124053955078,
    -0.012385556474328041,
    0.006210811901837587,
    0.026343652978539467,
    -0.007292835041880608,
    0.013720051385462284,
    -0.017442209646105766,
    -0.007112497929483652,
    -0.0074515314772725105,
    0.0023966808803379536,
    0.013316095806658268,
    0.0004990830784663558,
    -0.004558923654258251,
    0.006571486126631498,
    0.007422677706927061,
    -0.008006970398128033,
    -0.008245015516877174,
    -0.03093142993748188,
    -0.0034823105670511723,
    0.023400550708174706,
    -0.0019061637576669455,
    -0.024684550240635872,
    0.024266168475151062,
    -0.018899334594607353,
    0.030267789959907532,
    -0.021164368838071823,
    0.04377143457531929,
    -0.020919110625982285,
    0.002111748093739152,
    0.027122709900140762,
    0.025694439187645912,
    -0.014931917190551758,
    0.015811963006854057,
    0.007217093370854855,
    -0.0057563623413443565,
    0.017398929223418236,
    -0.025203922763466835,
    -0.008988004177808762,
    -0.009319824166595936,
    0.017398929223418236,
    -0.004508429206907749,
    0.0133016686886549,
    0.009478521533310413,
    0.014787646941840649,
    -0.0007795073906891048,
    0.011317959986627102,
    0.03133538365364075,
    0.018278975039720535,
    0.0022956919856369495,
    0.0042198896408081055,
    0.003815934294834733,
    -0.004544496536254883,
    0.02840670943260193,
    -0.04097260162234306,
    -0.01091400533914566,
    -0.025319337844848633,
    -0.02009677328169346,
    -0.0012019472196698189,
    -0.020414166152477264,
    -0.03202788159251213,
    0.004609418101608753,
    -0.02237623557448387,
    0.034105364233255386,
    0.025968551635742188,
    -0.00017864649998955429,
    0.040135838091373444,
    0.02690630406141281,
    0.027093855664134026,
    -0.0074371048249304295,
    -0.04700307920575142,
    0.0312199704349041,
    0.013243961147964,
    0.00520453043282032,
    -0.0019602649845182896,
    -0.05464937537908554,
    -0.008915869519114494,
    -0.008692251518368721,
    0.02009677328169346,
    -0.0036933051887899637,
    0.014960771426558495,
    -0.00017751939594745636,
    0.00603408133611083,
    -0.013662343844771385,
    -0.012854432687163353,
    0.01809142343699932,
    -0.0021676525939255953,
    -0.0005301912315189838,
    0.0026112820487469435,
    -0.004930417984724045,
    0.001962068257853389,
    -0.03211444243788719,
    0.01472993940114975,
    0.03185475617647171,
    -0.0133016686886549,
    -0.0049087777733802795,
    0.004526462871581316,
    -0.02618495561182499,
    -0.018697356805205345,
    0.009363105520606041,
    0.010012319311499596,
    0.018711784854531288,
    -0.0058393171057105064,
    0.02602626010775566,
    0.001457124250009656,
    0.006798711139708757,
    -0.0043208785355091095,
    0.0005216252175159752,
    0.004569743759930134,
    -0.012767870910465717,
    -0.003949383739382029,
    -0.01959182880818844,
    0.0020323998760432005,
    0.028926080092787743,
    0.02791619300842285,
    -0.015148322097957134,
    0.0011406325502321124,
    -0.028810665011405945,
    -0.01070481352508068,
    -0.02606954053044319,
    -0.0030044170562177896,
    -0.027382394298911095,
    0.021914571523666382,
    -0.02195785380899906,
    -0.003942170180380344,
    0.014181714504957199,
    0.006077362224459648,
    0.024121899157762527,
    0.01269573625177145,
    0.005525530781596899,
    0.00579242967069149,
    0.028637541458010674,
    -0.008252228610217571,
    0.017860593274235725,
    0.015494569204747677,
    0.024785539135336876,
    -0.006077362224459648,
    0.03996271640062332,
    0.0036337939091026783,
    0.04812838137149811,
    0.02728140540421009,
    -0.017139244824647903,
    -0.01374169159680605,
    -0.001752877258695662,
    -0.012796725146472454,
    -0.006030474789440632,
    -0.0009494751575402915,
    -0.024280596524477005,
    -0.0008692251285538077,
    0.01281836535781622,
    0.0092332623898983,
    0.01699497364461422,
    0.012436050921678543,
    0.028724104166030884,
    0.022780191153287888,
    -0.009615577757358551,
    -0.01034413930028677,
    -0.01754319854080677,
    -0.004634664859622717,
    -0.010942858643829823,
    0.009110633283853531,
    -0.015566703863441944,
    -0.008259441703557968,
    0.012782298028469086,
    0.03000810369849205,
    -0.03580774739384651,
    -0.011952747590839863,
    0.02094796486198902,
    0.011382881551980972,
    -0.0029629396740347147,
    -0.022852325811982155,
    0.013763331808149815,
    -0.010005106218159199,
    -0.0010603824630379677,
    -0.031133407726883888,
    -0.013453152030706406,
    -0.003118029562756419,
    -0.0005094524822197855,
    0.006780677475035191,
    0.0010612842161208391,
    0.0036392039619386196,
    -0.019649537280201912,
    0.02161160483956337,
    -0.022188683971762657,
    -0.026343652978539467,
    -0.04377143457531929,
    0.0009981661569327116,
    0.012724590487778187,
    -0.0071161044761538506,
    -0.0036500240676105022,
    0.0055796317756175995,
    0.018856054171919823,
    -0.0073757898062467575,
    0.004053979646414518,
    -0.011209757998585701,
    0.006228845566511154,
    -0.04059750214219093,
    0.027930619195103645,
    -0.014239422045648098,
    0.005557991564273834,
    -0.006214418448507786,
    -0.012226860038936138,
    0.014232208952307701,
    0.020630571991205215,
    0.019029177725315094,
    -0.009651645086705685,
    -0.008418139070272446,
    0.030671745538711548,
    0.017196951434016228,
    0.006481317803263664,
    0.005136002320796251,
    0.006102609448134899,
    -0.01620149053633213,
    -0.009406386874616146,
    -0.010033959522843361,
    -0.0017159080598503351,
    -0.013395444490015507,
    0.006632800679653883,
    0.013943669386208057,
    0.0010838262969627976,
    0.019822660833597183,
    -0.013561354950070381,
    -0.013193466700613499,
    0.02068827860057354,
    -0.008713891729712486,
    0.0016627085860818624,
    -0.009406386874616146,
    -0.0005748246912844479,
    -0.012919354252517223,
    -0.023227427154779434,
    0.03277808427810669,
    0.004032338969409466,
    -0.03551920875906944,
    0.0016176243079826236,
    -0.015076186507940292,
    0.01338823139667511,
    0.011137623339891434,
    0.013215106911957264,
    0.03600972518324852,
    -0.004432687535881996,
    -0.01699497364461422,
    -0.03390338644385338,
    0.0069646211341023445,
    0.02513178624212742,
    0.0012948208022862673,
    -0.014816501177847385,
    -0.013229534029960632,
    -0.009464094415307045,
    0.008151239715516567,
    -0.006593126803636551,
    -0.008483059704303741,
    -0.01485978253185749,
    -0.0026329224929213524,
    -0.008742745965719223,
    -0.0033668947871774435,
    -0.015927378088235855,
    0.02657448500394821,
    -0.0029160520061850548,
    -0.024078618735074997,
    0.008403711952269077,
    -0.005622912663966417,
    0.02921462059020996,
    0.0030260575003921986,
    0.004508429206907749,
    0.00881488062441349,
    -0.04582006484270096,
    -0.01348921936005354,
    -0.02152504399418831,
    -0.014152860268950462,
    -0.031191116198897362,
    0.003622973570600152,
    0.015177175402641296,
    0.031191116198897362,
    0.05447624996304512,
    0.0060917893424630165,
    0.028969362378120422,
    0.022044414654374123,
    -0.0029088384471833706,
    0.0029070351738482714,
    -0.013986950740218163,
    0.010077240876853466,
    -0.02068827860057354,
    -0.0014021213864907622,
    -0.010856296867132187,
    0.006834778469055891,
    0.027339113876223564,
    -0.033845677971839905,
    0.0010964499088004231,
    0.010647105984389782,
    0.0029070351738482714,
    -0.018351109698414803,
    -0.008107959292829037,
    -0.022260818630456924,
    -0.014405332505702972,
    0.00793483480811119,
    -0.020428594201803207,
    0.017427783459424973,
    -0.026718754321336746,
    -0.037423569709062576,
    0.030700597912073135,
    0.0026581697165966034,
    0.024626843631267548,
    0.008403711952269077,
    0.01523488387465477,
    0.010358566418290138,
    0.01059661153703928,
    0.01546571496874094,
    0.016143782064318657,
    -0.014145647175610065,
    -0.009492948651313782,
    -0.03370140865445137,
    0.010906791314482689,
    0.017269086092710495,
    0.00019870900723617524,
    0.005929485894739628,
    0.008389284834265709,
    -0.013460366055369377,
    -0.014549602754414082,
    0.03898167982697487,
    0.005312732886523008,
    0.0004416006268002093,
    0.013604635372757912,
    -0.00723873358219862,
    -0.011765196919441223,
    -0.018221266567707062,
    -0.018654076382517815,
    -0.010574971325695515,
    -0.013128545135259628,
    0.002997203730046749,
    -0.00472122710198164,
    0.011346814222633839,
    -0.004136934410780668,
    -0.0008850046433508396,
    0.012493758462369442,
    0.013640702702105045,
    0.041145727038383484,
    0.01589852385222912,
    0.03139309212565422,
    0.011671421118080616,
    0.008526341058313847,
    -0.012291780672967434,
    0.0002357908379053697,
    -0.018942615017294884,
    0.0027266978286206722,
    0.022736908867955208,
    0.04356945678591728,
    -0.010560544207692146,
    -0.004887137096375227,
    0.0022325741592794657,
    -0.007942048832774162,
    -0.03326860070228577,
    -0.02602626010775566,
    0.037712108343839645,
    0.02752666361629963,
    0.02114994265139103,
    -0.045387256890535355,
    -0.006135070230811834,
    -0.0193465705960989,
    0.0023407763801515102,
    -0.020933538675308228,
    -0.007978116162121296,
    0.01708153635263443,
    -0.032460689544677734,
    -0.008504700846970081,
    0.034682441502809525,
    0.023097584024071693,
    0.009658858180046082,
    0.006802317686378956,
    -0.004017911851406097,
    0.0071449582464993,
    -0.023342842236161232,
    0.0001555408089188859,
    0.015494569204747677,
    0.02383335866034031,
    0.033557139337062836,
    -0.03312433138489723,
    0.009846408851444721,
    0.044810179620981216,
    -0.02127978578209877,
    0.005475036334246397,
    -0.009976251982152462,
    0.0014264669734984636,
    0.04128999635577202,
    -0.03554806113243103,
    0.01560998521745205,
    -0.022852325811982155,
    -0.009341465309262276,
    -0.000120036922453437,
    -0.016417894512414932,
    -0.009536229074001312,
    -0.01578310877084732,
    -0.007595801260322332,
    0.01868293061852455,
    0.026487922295928,
    -0.020255470648407936,
    -0.0305563285946846,
    0.005467822775244713,
    0.017110390588641167,
    0.005557991564273834,
    -0.016634300351142883,
    -0.011988814920186996,
    0.015436860732734203,
    -0.02182801067829132,
    -0.015335872769355774,
    -0.005229777656495571,
    -0.014282703399658203,
    0.004140541423112154,
    0.008483059704303741,
    0.0017871413147076964,
    -0.011231398209929466,
    0.04628172889351845,
    -0.040308963507413864,
    0.021265357732772827,
    0.0065029580146074295,
    0.014174501411616802,
    -0.03361484780907631,
    0.010185442864894867,
    -0.0173700749874115,
    -0.01546571496874094,
    0.026805315166711807,
    -0.022635919973254204,
    -0.027339113876223564,
    0.001302935997955501,
    -0.005759968888014555,
    0.035144105553627014,
    0.02295331470668316,
    -0.01863964833319187,
    -0.020255470648407936,
    -0.00763908214867115,
    0.005612092558294535,
    -0.02521834895014763,
    -0.005172069650143385,
    0.0027266978286206722,
    -0.014398119412362576,
    -0.0005265845102258027,
    0.021813582628965378,
    -0.007523666601628065,
    0.02521834895014763,
    -0.01569654606282711,
    0.0009639021591283381,
    0.010149375535547733,
    -0.04489674046635628,
    -0.030816014856100082,
    -0.0012821971904486418,
    -0.022837897762656212,
    -0.001291214139200747,
    0.0020846975967288017,
    0.011952747590839863,
    0.008432566188275814,
    -0.01357578206807375,
    0.013849894516170025,
    0.012198005802929401,
    -0.001238916302099824,
    0.015393580310046673,
    0.012219646014273167,
    -0.0015436861431226134,
    0.014030231162905693,
    -0.006971834693104029,
    -0.015335872769355774,
    -0.009723779745399952,
    0.01829340122640133,
    -0.027093855664134026,
    -0.03295120596885681,
    -0.01066153310239315,
    0.01491749007254839,
    0.02598297782242298,
    -0.025189494714140892,
    -0.017269086092710495,
    -0.026011832058429718,
    -0.04388685151934624,
    -0.015018478967249393,
    -0.02925790101289749,
    0.0397895909845829,
    -0.010863510891795158,
    -0.007364969700574875,
    0.01683627814054489,
    0.023097584024071693,
    0.0012686719419434667,
    0.024814393371343613,
    -0.00782663282006979,
    0.020471874624490738,
    -0.00045242084888741374,
    0.0029052316676825285,
    0.0036680579651147127,
    -0.01661987230181694,
    -0.028897227719426155,
    -0.00674460968002677,
    -0.002991793444380164,
    0.013727264478802681,
    0.018740637227892876,
    0.036702219396829605,
    -0.00422710319980979,
    -0.01147665735334158,
    -0.0057058678939938545,
    0.012262927368283272,
    0.01901474967598915,
    0.01774517633020878,
    0.025910843163728714,
    -0.04636828973889351,
    -0.022260818630456924,
    0.009269329719245434,
    0.020890256389975548,
    0.0063514746725559235,
    -0.02404976449906826,
    0.015364726074039936,
    -0.00925490353256464,
    0.0066039469093084335,
    -0.030498620122671127,
    0.00021550290693994612,
    0.013763331808149815,
    0.008923082612454891,
    0.012551466934382915,
    0.0016230344772338867,
    0.007087250705808401,
    0.016302479431033134,
    0.008165666833519936,
    -0.008951936848461628,
    -0.005251418333500624,
    0.015638839453458786,
    -0.02194342575967312,
    0.005085507873445749,
    0.040770627558231354,
    -0.02862311527132988,
    0.01653331145644188,
    -0.027844058349728584,
    0.027598800137639046,
    -0.02257821336388588,
    -0.004851069767028093,
    -0.00486910343170166,
    -0.02169816754758358,
    -0.018913760781288147,
    0.018942615017294884,
    0.014520748518407345,
    -0.010834656655788422,
    0.00555077800527215,
    0.0009593936847522855,
    0.030152373015880585,
    -0.0017835345352068543,
    -0.007260374259203672,
    0.003381321905180812,
    -0.015624411404132843,
    0.013986950740218163,
    0.004162181634455919,
    -0.021842436864972115,
    -0.03592316433787346,
    -0.013128545135259628,
    0.0012461297446861863,
    -0.0184665247797966,
    0.012984275817871094,
    0.20151595771312714,
    -0.012782298028469086,
    0.010748094879090786,
    0.030816014856100082,
    -0.010185442864894867,
    0.010639892891049385,
    0.018856054171919823,
    0.017485491931438446,
    -0.012666882015764713,
    0.019865941256284714,
    0.0012416213285177946,
    -0.018827199935913086,
    0.0002648702065926045,
    -0.005161249544471502,
    0.010380206629633904,
    0.006344261579215527,
    -0.036529093980789185,
    -0.05049440637230873,
    -0.020457448437809944,
    0.005489463452249765,
    0.009651645086705685,
    -0.008136812597513199,
    0.024612415581941605,
    -0.02299659512937069,
    0.006906913127750158,
    -0.014109579846262932,
    0.0035634622909128666,
    -0.015379153192043304,
    0.03419192507863045,
    -0.0010730060748755932,
    -0.028507698327302933,
    0.02774306945502758,
    0.011483870446681976,
    -0.008887015283107758,
    -0.026545630767941475,
    -0.006539025343954563,
    -0.005222564097493887,
    -0.012313421815633774,
    0.018408818170428276,
    0.007999756373465061,
    0.02992154285311699,
    -0.02606954053044319,
    -0.0051684631034731865,
    -0.04351175203919411,
    -0.0006158514297567308,
    -0.012969848699867725,
    -0.008093532174825668,
    0.0060917893424630165,
    0.009096206165850163,
    0.019635111093521118,
    -0.00814402662217617,
    -0.011094341985881329,
    0.03202788159251213,
    0.02207326889038086,
    -0.002479635877534747,
    -0.0152781642973423,
    -0.007108890917152166,
    0.002311922376975417,
    0.025333764031529427,
    0.00010769510117825121,
    -0.023891067132353783,
    0.025535741820931435,
    -0.008446992374956608,
    0.008901442401111126,
    -0.03321089223027229,
    0.008418139070272446,
    -0.027454528957605362,
    -0.00029597835964523256,
    -0.012082589790225029,
    0.010546117089688778,
    -0.01151993777602911,
    -0.023487111553549767,
    -0.018783919513225555,
    -0.020154481753706932,
    -0.024165179580450058,
    -0.025665584951639175,
    0.04004927724599838,
    0.02161160483956337,
    0.02380450628697872,
    0.05086950585246086,
    0.019505267962813377,
    0.0017303350614383817,
    0.0035923162940889597,
    0.01842324435710907,
    -0.017817310988903046,
    -0.035980869084596634,
    0.0028619507793337107,
    -0.026834169402718544,
    -0.020443020388484,
    -0.01628805324435234,
    -0.021755876019597054,
    -0.03950105234980583,
    -0.004223496187478304,
    0.008093532174825668,
    -0.012060949578881264,
    -0.0010964499088004231,
    -6.30052963970229e-05,
    0.023112010210752487,
    -0.005442575551569462,
    0.0016897591995075345,
    -0.034134216606616974,
    0.04443507641553879,
    0.0329800620675087,
    -0.01435483805835247,
    -0.00868503749370575,
    0.0004909679410047829,
    -0.016432322561740875,
    0.009471307508647442,
    0.003433619625866413,
    -0.007415464147925377,
    0.003280333010479808,
    -0.022102123126387596,
    -0.0028114563319832087,
    -0.006777070462703705,
    -0.007804992608726025,
    0.005226171109825373,
    -0.010394633747637272,
    0.008273868821561337,
    0.01732679456472397,
    0.00856240838766098,
    -0.004108080640435219,
    -0.018437672406435013,
    -0.0034949341788887978,
    -0.00446875486522913,
    -0.003480507293716073,
    -0.029099205508828163,
    -0.020154481753706932,
    0.022635919973254204,
    -0.020255470648407936,
    0.0035580522380769253,
    0.014816501177847385,
    -0.014304343611001968,
    0.035692330449819565,
    0.016273625195026398,
    0.006751823239028454,
    -0.0018935402622446418,
    -0.014095152728259563,
    -0.01250818558037281,
    0.0008904147543944418,
    0.002459798939526081,
    -0.02741124853491783,
    -0.00264915288425982,
    0.001994529040530324,
    -0.010928432457149029,
    0.01424663607031107,
    -0.021481763571500778,
    -0.00019713105575647205,
    -0.017355648800730705,
    0.017557626590132713,
    0.005651766899973154,
    0.003884462406858802,
    0.008403711952269077,
    0.007058396469801664,
    -0.011462230235338211,
    0.030902575701475143,
    -0.028594261035323143,
    -0.0034913273993879557,
    -0.02475668489933014,
    -0.009774274192750454,
    8.094039003481157e-06,
    -0.005045833997428417,
    0.004980912432074547,
    -0.018769491463899612,
    0.012262927368283272,
    -0.019663963466882706,
    -0.03251839801669121,
    -0.18397276103496552,
    0.005608485545963049,
    0.017774030566215515,
    -0.04994618147611618,
    0.011866184882819653,
    0.003476900514215231,
    0.016100501641631126,
    -0.00044385483488440514,
    0.001945837982930243,
    -0.021250931546092033,
    0.006239665672183037,
    -0.012313421815633774,
    -0.006784284021705389,
    -0.01190225314348936,
    -0.010567757301032543,
    0.0010423487983644009,
    -0.025607876479625702,
    -0.011368454433977604,
    0.040020424872636795,
    0.007408250588923693,
    0.030152373015880585,
    -0.028435563668608665,
    0.02169816754758358,
    0.01690841279923916,
    -0.01791829988360405,
    -0.024915382266044617,
    0.01147665735334158,
    0.03537493944168091,
    0.011418948881328106,
    -0.020587289705872536,
    -0.014138433150947094,
    -0.011548792012035847,
    0.008612902835011482,
    0.015133894979953766,
    0.014513534493744373,
    -0.005576025228947401,
    0.040943749248981476,
    -0.018322255462408066,
    -0.008634543046355247,
    0.026661045849323273,
    0.008966363966464996,
    0.027079427614808083,
    0.00403955252841115,
    -0.036702219396829605,
    -0.037452422082424164,
    0.013965309597551823,
    0.03168163448572159,
    -0.014131220057606697,
    0.012782298028469086,
    -0.0008886113646440208,
    0.047868695110082626,
    -0.01047398243099451,
    0.01573982834815979,
    -0.007898767478764057,
    -0.013294455595314503,
    0.0003735233622137457,
    -0.00043528882088139653,
    0.013503646478056908,
    0.01374169159680605,
    0.005514710210263729,
    -0.01116647757589817,
    -0.011022207327187061,
    0.00885816104710102,
    -0.00705118291079998,
    6.633026350755244e-05,
    -0.04521413519978523,
    -0.01754319854080677,
    0.008165666833519936,
    -0.023559246212244034,
    0.020154481753706932,
    -0.00010746967745944858,
    0.009572296403348446,
    -0.035028692334890366,
    -0.004425473976880312,
    0.019966930150985718,
    0.028781810775399208,
    -0.017341220751404762,
    0.007595801260322332,
    0.02908477745950222,
    0.0028132598381489515,
    -0.014701085165143013,
    0.03877970203757286,
    -0.0029088384471833706,
    -0.0006649933056905866,
    0.0061927782371640205,
    0.0023407763801515102,
    0.005796036217361689,
    -0.009384745731949806,
    -0.022967740893363953,
    0.002111748093739152,
    -0.008064677938818932,
    -0.005943913012742996,
    0.004613024648278952,
    -0.010993353091180325,
    -0.0062180254608392715,
    0.012904927134513855,
    0.005799643229693174,
    -0.004317271523177624,
    0.011007780209183693,
    -0.04293467104434967,
    0.013063624501228333,
    0.02543475292623043,
    -0.013727264478802681,
    0.0273679681122303,
    0.04235759377479553,
    0.028724104166030884,
    -0.028377855196595192,
    0.0016040990594774485,
    -0.007740071043372154,
    0.006589519791305065,
    0.0017916497308760881,
    -0.007473172154277563,
    0.014145647175610065,
    -0.0002357908379053697,
    -0.018625222146511078,
    0.017903873696923256,
    -0.02472783252596855,
    -0.010654320009052753,
    0.020342031493782997,
    0.0044471146538853645,
    0.021914571523666382,
    -0.01758648082613945,
    -0.005759968888014555,
    0.023530393838882446,
    -0.04619516804814339,
    -0.03248954191803932,
    -0.11599286645650864,
    -0.016562165692448616,
    0.011592072434723377,
    0.025420326739549637,
    -0.015220456756651402,
    -0.02026989683508873,
    -0.008648970164358616,
    0.0305563285946846,
    -0.004299237858504057,
    0.011541577987372875,
    -0.015494569204747677,
    -0.0014417956117540598,
    0.0021856864914298058,
    0.02732468768954277,
    -0.01546571496874094,
    0.0025932483840733767,
    -0.035952016711235046,
    -0.003114422783255577,
    -0.0234149768948555,
    0.019534122198820114,
    -0.011022207327187061,
    0.006470497231930494,
    0.012493758462369442,
    -0.011426162905991077,
    -0.017355648800730705,
    -0.008612902835011482,
    -0.03220100328326225,
    0.02870967611670494,
    -0.009182767942547798,
    0.01749991811811924,
    0.027209270745515823,
    -0.030816014856100082,
    -0.0057816095650196075,
    0.01320068072527647,
    0.006499351467937231,
    0.01850980706512928,
    -0.019837087020277977,
    -0.019072458148002625,
    0.018769491463899612,
    -0.04876316711306572,
    -0.010856296867132187,
    -0.009536229074001312,
    0.005878991447389126,
    0.009940184652805328,
    -0.02114994265139103,
    -0.0037546197418123484,
    -0.00027140742167830467,
    0.01466501783579588,
    0.005878991447389126,
    -0.03156621754169464,
    -0.0011676831636577845,
    0.0091250604018569,
    -0.008865375071763992,
    0.01485978253185749,
    0.008757173083722591,
    -0.003601333126425743,
    0.0008435270865447819,
    -0.013085264712572098,
    -0.006344261579215527,
    -0.026848597452044487,
    0.0011271073017269373,
    0.005107148550450802,
    -0.03075830638408661,
    -0.008836520835757256,
    0.01546571496874094,
    -0.0015995906433090568,
    -0.009355892427265644,
    -0.00893750973045826,
    0.00535240676254034,
    -0.0022650347091257572,
    -0.005518317222595215,
    0.005532744340598583,
    -0.011115983128547668,
    0.018654076382517815,
    -0.03093142993748188,
    -0.012046522460877895,
    -0.012097016908228397,
    -0.014087938703596592,
    -0.008194521069526672,
    -0.007653509266674519,
    -0.006668868474662304,
    -0.00978148728609085,
    0.006080969236791134,
    -0.008771599270403385,
    -0.022592639550566673,
    -0.006708542350679636,
    -0.004364159423857927,
    -0.0035832994617521763,
    0.007357756141573191,
    -0.06059328839182854,
    0.020760413259267807,
    0.015307018533349037,
    0.021842436864972115,
    -0.02383335866034031,
    -0.01633133366703987,
    -0.00496287876740098,
    -0.017788458615541458,
    0.02963300235569477,
    -0.0050927214324474335,
    0.0213230662047863,
    -0.013063624501228333,
    -0.010740881785750389,
    -0.08084875345230103,
    0.03860658034682274,
    0.004764507990330458,
    -0.02908477745950222,
    -0.00243455171585083,
    -0.026790888980031013,
    -0.014816501177847385,
    -0.015105040743947029,
    0.002308315597474575,
    0.012219646014273167,
    -0.03321089223027229,
    -0.010899578221142292,
    -0.021553898230195045,
    -0.004173001740127802,
    -0.008295509032905102,
    -0.01947641372680664,
    0.015768680721521378,
    -0.012428836897015572,
    0.023530393838882446,
    0.012111444026231766,
    0.0038772490806877613,
    -0.017067108303308487,
    0.0294598788022995,
    0.0211066622287035,
    -0.0404532328248024,
    -0.007339722476899624,
    -0.009853622876107693,
    0.04890744015574455,
    0.016692006960511208,
    -0.02102009952068329,
    0.03335516154766083,
    -0.008533554151654243,
    0.0017339418409392238,
    0.024064190685749054,
    0.01866850256919861,
    0.022967740893363953,
    0.025001944974064827,
    0.005803249776363373,
    0.0173700749874115,
    0.002573411213234067,
    -0.007754498161375523,
    -0.023487111553549767,
    0.004778934642672539,
    0.035403791815042496,
    -0.0033686982933431864,
    -0.020991245284676552,
    0.002793422667309642,
    -0.01560998521745205,
    0.026545630767941475,
    0.04019354656338692,
    0.04919597879052162,
    0.015595558099448681,
    -0.02875295653939247,
    -0.03675992786884308,
    0.004400226753205061,
    -0.007804992608726025,
    0.04830150678753853,
    0.002194703323766589,
    0.015191602520644665,
    -0.015667691826820374,
    0.03537493944168091,
    0.009103420190513134,
    0.018654076382517815,
    0.0047067999839782715,
    0.004937631543725729,
    -0.014131220057606697,
    -0.04281925410032272,
    -0.009247689507901669,
    -0.010308071970939636,
    -0.021121088415384293,
    -0.01269573625177145,
    -0.03843345493078232,
    0.01699497364461422,
    0.02291003242135048,
    0.021885717287659645,
    -0.004180215299129486,
    -0.02194342575967312,
    -0.007444317918270826,
    -0.017788458615541458,
    0.026718754321336746,
    -0.005536350887268782,
    -0.014506321400403976,
    -0.0018502592574805021,
    -0.007199059706181288,
    0.04535840451717377,
    0.012010455131530762,
    -0.026372507214546204,
    0.007783351931720972,
    -0.027137136086821556,
    -0.00849748682230711,
    -0.004544496536254883,
    -0.006831171922385693,
    0.001188421854749322,
    0.019880369305610657,
    0.008093532174825668,
    0.013698411174118519,
    0.010668746195733547,
    0.0043966202065348625,
    0.016966119408607483,
    0.0028349002823233604,
    0.02002463862299919,
    -0.009132273495197296,
    -0.013662343844771385,
    -0.017572052776813507,
    -0.004418260417878628,
    -0.005078294314444065,
    -0.0035869062412530184,
    -0.04994618147611618,
    -0.004714013542979956,
    0.02103452757000923,
    0.016302479431033134,
    -0.024165179580450058,
    0.005301912780851126,
    0.022780191153287888,
    -0.026285944506525993,
    0.014549602754414082,
    -0.003303776727989316,
    -0.024367157369852066,
    -0.02123650349676609,
    0.0047572944313287735,
    0.008728318847715855,
    0.001990922261029482,
    0.05029242858290672,
    0.0017086946172639728,
    0.022318527102470398,
    0.017196951434016228,
    0.012407196685671806,
    -0.017153671011328697,
    0.042617280036211014,
    0.010308071970939636,
    -0.004988125991076231,
    0.017687469720840454,
    -0.03277808427810669,
    -0.03528837487101555,
    -0.01053168997168541,
    -0.018726211041212082,
    -0.010885151103138924,
    -0.004894350655376911,
    -0.016259199008345604,
    0.09775716811418533,
    -0.0002648702065926045,
    -0.011779623106122017,
    -0.011765196919441223,
    -0.012796725146472454,
    0.021640459075570107,
    -0.009009644389152527,
    0.012832792475819588,
    0.00170238281134516,
    0.006506565026938915,
    -0.039674174040555954,
    -0.007224306929856539,
    -0.029402170330286026,
    -0.013005916029214859,
    -0.01040906086564064,
    -0.02937331795692444,
    -0.011440590023994446,
    0.011981600895524025,
    -0.002703254111111164,
    -0.0067049358040094376,
    0.03621170297265053,
    -0.005720295011997223,
    0.005305519327521324,
    -0.0039349570870399475,
    -0.03240298107266426,
    -0.009074565954506397,
    0.025781000033020973,
    0.023746797814965248,
    -0.01466501783579588,
    -0.054533958435058594,
    0.02765650674700737,
    0.008923082612454891,
    -0.009788701310753822,
    -0.03182590380311012,
    0.0006298275548033416,
    0.0036842881236225367,
    -0.02207326889038086,
    0.00012567246449179947,
    0.0037618333008140326,
    0.011418948881328106,
    0.009355892427265644,
    0.016302479431033134,
    -0.028853945434093475,
    -0.028594261035323143,
    0.0061422837898135185,
    -0.0004905170644633472,
    0.014131220057606697,
    -0.005496676545590162,
    -0.04019354656338692
  ]
}
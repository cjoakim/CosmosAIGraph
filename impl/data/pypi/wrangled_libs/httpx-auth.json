{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "natural language :: english",
    "programming language :: python",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.9",
    "topic :: software development :: build tools",
    "typing :: typed"
  ],
  "description": "authentication for httpx\n<h2 align=\"center\">authentication for httpx</h2>\n\n<p align=\"center\">\n<a href=\"https://pypi.org/project/httpx-auth/\"><img alt=\"pypi version\" src=\"https://img.shields.io/pypi/v/httpx_auth\"></a>\n<a href=\"https://github.com/colin-b/httpx_auth/actions\"><img alt=\"build status\" src=\"https://github.com/colin-b/httpx_auth/workflows/release/badge.svg\"></a>\n<a href=\"https://github.com/colin-b/httpx_auth/actions\"><img alt=\"coverage\" src=\"https://img.shields.io/badge/coverage-100%25-brightgreen\"></a>\n<a href=\"https://github.com/psf/black\"><img alt=\"code style: black\" src=\"https://img.shields.io/badge/code%20style-black-000000.svg\"></a>\n<a href=\"https://github.com/colin-b/httpx_auth/actions\"><img alt=\"number of tests\" src=\"https://img.shields.io/badge/tests-335 passed-blue\"></a>\n<a href=\"https://pypi.org/project/httpx-auth/\"><img alt=\"number of downloads\" src=\"https://img.shields.io/pypi/dm/httpx_auth\"></a>\n</p>\n\n> version 1.0.0 will be released once httpx is considered as stable (release of 1.0.0).\n>\n> however, current state can be considered as stable.\n\nprovides authentication classes to be used with [`httpx`][1] [authentication parameter][2].\n\n<p align=\"center\">\n    <a href=\"https://oauth.net/2/\"><img alt=\"oauth2\" src=\"https://oauth.net/images/oauth-2-sm.png\"></a>\n    <a href=\"https://www.okta.com\"><img alt=\"okta\" src=\"https://www.okta.com/sites/all/themes/okta/images/logos/developer/dev_logo-03_large.png\" height=\"120\"></a>\n    <a href=\"https://azure.microsoft.com/en-us/services/active-directory/\"><img alt=\"azure active directory (ad)\" src=\"https://azurecomcdn.azureedge.net/cvt-cda59ccd0aa5ced6ff5a2052417cf596b92980921e88e667127eaca2232a31ab/images/shared/services/pricing-glyph-lock.svg\" height=\"120\"></a>\n</p>\n<p align=\"center\">some of the supported authentication</p>\n\n## available authentication\n\n- [oauth2](#oauth-2)\n  - [authorization code flow](#authorization-code-flow)\n    - [okta](#okta-oauth2-authorization-code)\n    - [wakatime](#wakatime-oauth2-authorization-code)\n  - [authorization code flow with pkce](#authorization-code-flow-with-proof-key-for-code-exchange)\n    - [okta](#okta-oauth2-proof-key-for-code-exchange)\n  - [resource owner password credentials flow](#resource-owner-password-credentials-flow)\n  - [client credentials flow](#client-credentials-flow)\n    - [okta](#okta-oauth2-client-credentials)\n  - [implicit flow](#implicit-flow)\n    - [azure ad (access token)](#microsoft---azure-active-directory-oauth2-access-token)\n    - [azure ad (id token)](#microsoft---azure-active-directory-openid-connect-id-token)\n    - [okta (access token)](#okta-oauth2-implicit-access-token)\n    - [okta (id token)](#okta-openid-connect-implicit-id-token)\n  - [managing token cache](#managing-token-cache)\n- [amazon](#aws-signature-v4)\n- api key\n  - [in header](#api-key-in-header)\n  - [in query](#api-key-in-query)\n- [basic](#basic)\n- [multiple authentication at once](#multiple-authentication-at-once)\n\n## oauth 2\n\nmost of [oauth2](https://oauth.net/2/) flows are supported.\n\nif the one you are looking for is not yet supported, feel free to [ask for its implementation](https://github.com/colin-b/httpx_auth/issues/new).\n\n### authorization code flow\n\nauthorization code grant is implemented following [rfc6749](https://tools.ietf.org/html/rfc6749#section-4.1).\n\nuse `httpx_auth.oauth2authorizationcode` to configure this kind of authentication.\n\n```python\nimport httpx\nfrom httpx_auth import oauth2authorizationcode\n\nwith httpx.client() as client:\n    client.get('https://www.example.com', auth=oauth2authorizationcode('https://www.authorization.url', 'https://www.token.url'))\n```\n\n#### parameters\n\n| name                    | description                | mandatory | default value |\n|:------------------------|:---------------------------|:----------|:--------------|\n| `authorization_url`     | oauth 2 authorization url. | mandatory |               |\n| `token_url`             | oauth 2 token url.         | mandatory |               |\n| `redirect_uri_endpoint` | custom endpoint that will be used as redirect_uri the following way: http://localhost:<redirect_uri_port>/<redirect_uri_endpoint>. | optional | ''             |\n| `redirect_uri_port`     | the port on which the server listening for the oauth 2 code will be started. | optional | 5000 |\n| `timeout`               | maximum amount of seconds to wait for a code or a token to be received once requested. | optional | 60 |\n| `success_display_time`  | in case a code is successfully received, this is the maximum amount of milliseconds the success page will be displayed in your browser. | optional | 1 |\n| `failure_display_time`  | in case received code is not valid, this is the maximum amount of milliseconds the failure page will be displayed in your browser. | optional | 5000 |\n| `header_name`           | name of the header field used to send token. | optional | authorization |\n| `header_value`          | format used to send the token value. \"{token}\" must be present as it will be replaced by the actual token. | optional | bearer {token} |\n| `response_type`         | value of the response_type query parameter if not already provided in authorization url. | optional | code |\n| `token_field_name`      | field name containing the token. | optional | access_token |\n| `early_expiry`          | number of seconds before actual token expiry where token will be considered as expired. used to ensure token will not expire between the time of retrieval and the time the request reaches the actual server. set it to 0 to deactivate this feature and use the same token until actual expiry. | optional  | 30.0  |\n| `code_field_name`       | field name containing the code. | optional | code |\n| `username`              | user name in case basic authentication should be used to retrieve token. | optional |  |\n| `password`              | user password in case basic authentication should be used to retrieve token. | optional |  |\n| `client`                | `httpx.client` instance that will be used to request the token. use it to provide a custom proxying rule for instance. | optional |  |\n\nany other parameter will be put as query parameter in the authorization url and as body parameters in the token url.        \n\nusual extra parameters are:\n        \n| name            | description                                                          |\n|:----------------|:---------------------------------------------------------------------|\n| `client_id`     | corresponding to your application id (in microsoft azure app portal) |\n| `client_secret` | if client is not authenticated with the authorization server         |\n| `nonce`         | refer to [openid id token specifications][3] for more details        |\n\n#### common providers\n\nmost of [oauth2](https://oauth.net/2/) authorization code grant providers are supported.\n\nif the one you are looking for is not yet supported, feel free to [ask for its implementation](https://github.com/colin-b/httpx_auth/issues/new).\n\n##### okta (oauth2 authorization code)\n\n[okta authorization code grant](https://developer.okta.com/docs/guides/implement-auth-code/overview/) providing access tokens is supported.\n\nuse `httpx_auth.oktaauthorizationcode` to configure this kind of authentication.\n\n```python\nimport httpx\nfrom httpx_auth import oktaauthorizationcode\n\n\nokta = oktaauthorizationcode(instance='testserver.okta-emea.com', client_id='54239d18-c68c-4c47-8bdd-ce71ea1d50cd')\nwith httpx.client() as client:\n    client.get('https://www.example.com', auth=okta)\n```\n\n###### parameters\n\n| name                    | description                | mandatory | default value |\n|:------------------------|:---------------------------|:----------|:--------------|\n| `instance`              | okta instance (like \"testserver.okta-emea.com\"). | mandatory |               |\n| `client_id`             | okta application identifier (formatted as an universal unique identifier). | mandatory |               |\n| `response_type`         | value of the response_type query parameter if not already provided in authorization url. | optional | token |\n| `token_field_name`      | field name containing the token. | optional | access_token |\n| `early_expiry`          | number of seconds before actual token expiry where token will be considered as expired. used to ensure token will not expire between the time of retrieval and the time the request reaches the actual server. set it to 0 to deactivate this feature and use the same token until actual expiry. | optional  | 30.0  |\n| `nonce`                 | refer to [openid id token specifications][3] for more details. | optional | newly generated universal unique identifier. |\n| `scope`                 | scope parameter sent in query. can also be a list of scopes. | optional | openid |\n| `authorization_server`  | okta authorization server. | optional | 'default' |\n| `redirect_uri_endpoint` | custom endpoint that will be used as redirect_uri the following way: http://localhost:<redirect_uri_port>/<redirect_uri_endpoint>. | optional | ''             |\n| `redirect_uri_port`     | the port on which the server listening for the oauth 2 token will be started. | optional | 5000 |\n| `timeout`               | maximum amount of seconds to wait for a token to be received once requested. | optional | 60 |\n| `success_display_time`  | in case a token is successfully received, this is the maximum amount of milliseconds the success page will be displayed in your browser. | optional | 1 |\n| `failure_display_time`  | in case received token is not valid, this is the maximum amount of milliseconds the failure page will be displayed in your browser. | optional | 5000 |\n| `header_name`           | name of the header field used to send token. | optional | authorization |\n| `header_value`          | format used to send the token value. \"{token}\" must be present as it will be replaced by the actual token. | optional | bearer {token} |\n| `client`                | `httpx.client` instance that will be used to request the token. use it to provide a custom proxying rule for instance. | optional |  |\n\nany other parameter will be put as query parameter in the authorization url.        \n\nusual extra parameters are:\n        \n| name            | description                                                          |\n|:----------------|:---------------------------------------------------------------------|\n| `prompt`        | none to avoid prompting the user if a session is already opened.     |\n\n##### wakatime (oauth2 authorization code)\n\n[wakatime authorization code grant](https://wakatime.com/developers#authentication) providing access tokens is supported.\n\nuse `httpx_auth.wakatimeauthorizationcode` to configure this kind of authentication.\n\n```python\nimport httpx\nfrom httpx_auth import wakatimeauthorizationcode\n\n\nwaka_time = wakatimeauthorizationcode(client_id=\"apjqv0op6pu3b66mwdi9b1wb\", client_secret=\"waka_sec_0c5mb\", scope=\"email\")\nwith httpx.client() as client:\n    client.get('https://wakatime.com/api/v1/users/current', auth=waka_time)\n```\n\n###### parameters\n\n| name                    | description                | mandatory | default value                                |\n|:------------------------|:---------------------------|:----------|:---------------------------------------------|\n| `client_id`             | wakatime application identifier (formatted as an universal unique identifier). | mandatory |                                              |\n| `client_secret`         | wakatime application secret (formatted as waka_sec_ followed by an universal unique identifier). | mandatory |                                              |\n| `scope`                 | scope parameter sent in query. can also be a list of scopes. | mandatory |                                              |\n| `response_type`         | value of the response_type query parameter if not already provided in authorization url. | optional  | token                                        |\n| `token_field_name`      | field name containing the token. | optional  | access_token                                 |\n| `early_expiry`          | number of seconds before actual token expiry where token will be considered as expired. used to ensure token will not expire between the time of retrieval and the time the request reaches the actual server. set it to 0 to deactivate this feature and use the same token until actual expiry. | optional  | 30.0                                         |\n| `nonce`                 | refer to [openid id token specifications][3] for more details. | optional  | newly generated universal unique identifier. |\n| `redirect_uri_endpoint` | custom endpoint that will be used as redirect_uri the following way: http://localhost:<redirect_uri_port>/<redirect_uri_endpoint>. | optional  | ''                                           |\n| `redirect_uri_port`     | the port on which the server listening for the oauth 2 token will be started. | optional  | 5000                                         |\n| `timeout`               | maximum amount of seconds to wait for a token to be received once requested. | optional  | 60                                           |\n| `success_display_time`  | in case a token is successfully received, this is the maximum amount of milliseconds the success page will be displayed in your browser. | optional  | 1                                            |\n| `failure_display_time`  | in case received token is not valid, this is the maximum amount of milliseconds the failure page will be displayed in your browser. | optional  | 5000                                         |\n| `header_name`           | name of the header field used to send token. | optional  | authorization                                |\n| `header_value`          | format used to send the token value. \"{token}\" must be present as it will be replaced by the actual token. | optional  | bearer {token}                               |\n| `client`                | `httpx.client` instance that will be used to request the token. use it to provide a custom proxying rule for instance. | optional  |                                              |\n\nany other parameter will be put as query parameter in the authorization url.\n\n### authorization code flow with proof key for code exchange\n\nproof key for code exchange is implemented following [rfc7636](https://tools.ietf.org/html/rfc7636).\n\nuse `httpx_auth.oauth2authorizationcodepkce` to configure this kind of authentication.\n\n```python\nimport httpx\nfrom httpx_auth import oauth2authorizationcodepkce\n\nwith httpx.client() as client:\n    client.get('https://www.example.com', auth=oauth2authorizationcodepkce('https://www.authorization.url', 'https://www.token.url'))\n```\n\n#### parameters \n\n| name                    | description                | mandatory | default value |\n|:------------------------|:---------------------------|:----------|:--------------|\n| `authorization_url`     | oauth 2 authorization url. | mandatory |               |\n| `token_url`             | oauth 2 token url.         | mandatory |               |\n| `redirect_uri_endpoint` | custom endpoint that will be used as redirect_uri the following way: http://localhost:<redirect_uri_port>/<redirect_uri_endpoint>. | optional | ''             |\n| `redirect_uri_port`     | the port on which the server listening for the oauth 2 code will be started. | optional | 5000 |\n| `timeout`               | maximum amount of seconds to wait for a code or a token to be received once requested. | optional | 60 |\n| `success_display_time`  | in case a code is successfully received, this is the maximum amount of milliseconds the success page will be displayed in your browser. | optional | 1 |\n| `failure_display_time`  | in case received code is not valid, this is the maximum amount of milliseconds the failure page will be displayed in your browser. | optional | 5000 |\n| `header_name`           | name of the header field used to send token. | optional | authorization |\n| `header_value`          | format used to send the token value. \"{token}\" must be present as it will be replaced by the actual token. | optional | bearer {token} |\n| `response_type`         | value of the response_type query parameter if not already provided in authorization url. | optional | code |\n| `token_field_name`      | field name containing the token. | optional | access_token |\n| `early_expiry`          | number of seconds before actual token expiry where token will be considered as expired. used to ensure token will not expire between the time of retrieval and the time the request reaches the actual server. set it to 0 to deactivate this feature and use the same token until actual expiry. | optional  | 30.0  |\n| `code_field_name`       | field name containing the code. | optional | code |\n| `client`                | `httpx.client` instance that will be used to request the token. use it to provide a custom proxying rule for instance. | optional |  |\n\nany other parameter will be put as query parameter in the authorization url and as body parameters in the token url.        \n\nusual extra parameters are:\n        \n| name            | description                                                          |\n|:----------------|:---------------------------------------------------------------------|\n| `client_id`     | corresponding to your application id (in microsoft azure app portal) |\n| `client_secret` | if client is not authenticated with the authorization server         |\n| `nonce`         | refer to [openid id token specifications][3] for more details        |\n\n#### common providers\n\nmost of [oauth2](https://oauth.net/2/) proof key for code exchange providers are supported.\n\nif the one you are looking for is not yet supported, feel free to [ask for its implementation](https://github.com/colin-b/httpx_auth/issues/new).\n\n##### okta (oauth2 proof key for code exchange)\n\n[okta proof key for code exchange](https://developer.okta.com/docs/guides/implement-auth-code-pkce/overview/) providing access tokens is supported.\n\nuse `httpx_auth.oktaauthorizationcodepkce` to configure this kind of authentication.\n\n```python\nimport httpx\nfrom httpx_auth import oktaauthorizationcodepkce\n\n\nokta = oktaauthorizationcodepkce(instance='testserver.okta-emea.com', client_id='54239d18-c68c-4c47-8bdd-ce71ea1d50cd')\nwith httpx.client() as client:\n    client.get('https://www.example.com', auth=okta)\n```\n\n###### parameters\n\n| name                    | description                | mandatory | default value |\n|:------------------------|:---------------------------|:----------|:--------------|\n| `instance`              | okta instance (like \"testserver.okta-emea.com\"). | mandatory |               |\n| `client_id`             | okta application identifier (formatted as an universal unique identifier). | mandatory |               |\n| `response_type`         | value of the response_type query parameter if not already provided in authorization url. | optional | code |\n| `token_field_name`      | field name containing the token. | optional | access_token |\n| `early_expiry`          | number of seconds before actual token expiry where token will be considered as expired. used to ensure token will not expire between the time of retrieval and the time the request reaches the actual server. set it to 0 to deactivate this feature and use the same token until actual expiry. | optional  | 30.0  |\n| `code_field_name`      | field name containing the code. | optional | code |\n| `nonce`                 | refer to [openid id token specifications][3] for more details. | optional | newly generated universal unique identifier. |\n| `scope`                 | scope parameter sent in query. can also be a list of scopes. | optional | openid |\n| `authorization_server`  | okta authorization server. | optional | 'default' |\n| `redirect_uri_endpoint` | custom endpoint that will be used as redirect_uri the following way: http://localhost:<redirect_uri_port>/<redirect_uri_endpoint>. | optional | ''             |\n| `redirect_uri_port`     | the port on which the server listening for the oauth 2 token will be started. | optional | 5000 |\n| `timeout`               | maximum amount of seconds to wait for a token to be received once requested. | optional | 60 |\n| `success_display_time`  | in case a token is successfully received, this is the maximum amount of milliseconds the success page will be displayed in your browser. | optional | 1 |\n| `failure_display_time`  | in case received token is not valid, this is the maximum amount of milliseconds the failure page will be displayed in your browser. | optional | 5000 |\n| `header_name`           | name of the header field used to send token. | optional | authorization |\n| `header_value`          | format used to send the token value. \"{token}\" must be present as it will be replaced by the actual token. | optional | bearer {token} |\n| `client`                | `httpx.client` instance that will be used to request the token. use it to provide a custom proxying rule for instance. | optional |  |\n\nany other parameter will be put as query parameter in the authorization url and as body parameters in the token url.        \n\nusual extra parameters are:\n        \n| name            | description                                                          |\n|:----------------|:---------------------------------------------------------------------|\n| `client_secret`        | if client is not authenticated with the authorization server     |\n| `nonce`        | refer to [openid id token specifications][3] for more details     |\n\n### resource owner password credentials flow\n\nresource owner password credentials grant is implemented following [rfc6749](https://tools.ietf.org/html/rfc6749#section-4.3).\n\nuse `httpx_auth.oauth2resourceownerpasswordcredentials` to configure this kind of authentication.\n\n```python\nimport httpx\nfrom httpx_auth import oauth2resourceownerpasswordcredentials\n\nwith httpx.client() as client:\n    client.get('https://www.example.com', auth=oauth2resourceownerpasswordcredentials('https://www.token.url', 'user name', 'user password'))\n```\n\n#### parameters\n\n| name                 | description                                                                                                                                                                                                                                                                                       | mandatory | default value |\n|:---------------------|:--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|:----------|:--------------|\n| `token_url`          | oauth 2 token url.                                                                                                                                                                                                                                                                                | mandatory |               |\n| `username`           | resource owner user name.                                                                                                                                                                                                                                                                         | mandatory |               |\n| `password`           | resource owner password.                                                                                                                                                                                                                                                                          | mandatory |               |\n| `client_auth`        | client authentication if the client type is confidential or the client was issued client credentials (or assigned other authentication requirements). can be a tuple or any httpx authentication class instance.                                                                                  | optional  |               |\n| `timeout`            | maximum amount of seconds to wait for a token to be received once requested.                                                                                                                                                                                                                      | optional  | 60            |\n| `header_name`        | name of the header field used to send token.                                                                                                                                                                                                                                                      | optional  | authorization |\n| `header_value`       | format used to send the token value. \"{token}\" must be present as it will be replaced by the actual token.                                                                                                                                                                                        | optional  | bearer {token} |\n| `scope`              | scope parameter sent to token url as body. can also be a list of scopes.                                                                                                                                                                                                                          | optional  |  |\n| `token_field_name`   | field name containing the token.                                                                                                                                                                                                                                                                  | optional  | access_token  |\n| `early_expiry`       | number of seconds before actual token expiry where token will be considered as expired. used to ensure token will not expire between the time of retrieval and the time the request reaches the actual server. set it to 0 to deactivate this feature and use the same token until actual expiry. | optional  | 30.0  |\n| `client`             | `httpx.client` instance that will be used to request the token. use it to provide a custom proxying rule for instance.                                                                                                                                                                            | optional  |  |\n\nany other parameter will be put as body parameter in the token url.\n\n#### common providers\n\nmost of [oauth2](https://oauth.net/2/) resource owner password credentials providers are supported.\n\nif the one you are looking for is not yet supported, feel free to [ask for its implementation](https://github.com/colin-b/httpx_auth/issues/new).\n\n##### okta (oauth2 resource owner password credentials)\n\n[okta resource owner password credentials](https://developer.okta.com/docs/guides/implement-grant-type/ropassword/main/) providing access tokens is supported.\n\nuse `httpx_auth.oktaresourceownerpasswordcredentials` to configure this kind of authentication.\n\n```python\nimport httpx\nfrom httpx_auth import oktaresourceownerpasswordcredentials\n\n\nokta = oktaresourceownerpasswordcredentials(instance='testserver.okta-emea.com', username='user name', password='user password', client_id='54239d18-c68c-4c47-8bdd-ce71ea1d50cd', client_secret=\"0c5mb\")\nwith httpx.client() as client:\n    client.get('https://www.example.com', auth=okta)\n```\n\n###### parameters\n\n| name                    | description                | mandatory | default value |\n|:------------------------|:---------------------------|:----------|:--------------|\n| `instance`              | okta instance (like \"testserver.okta-emea.com\"). | mandatory |               |\n| `username`           | resource owner user name.                                                                                                                                                                                                                                                                         | mandatory |               |\n| `password`           | resource owner password.                                                                                                                                                                                                                                                                          | mandatory |               |\n| `client_id`             | okta application identifier (formatted as an universal unique identifier). | mandatory |               |\n| `client_secret`        | resource owner password.     | mandatory |               |\n| `timeout`               | maximum amount of seconds to wait for a token to be received once requested. | optional | 60 |\n| `header_name`           | name of the header field used to send token. | optional | authorization |\n| `header_value`          | format used to send the token value. \"{token}\" must be present as it will be replaced by the actual token. | optional | bearer {token} |\n| `scope`                 | scope parameter sent in query. can also be a list of scopes. | optional | openid |\n| `token_field_name`      | field name containing the token. | optional | access_token |\n| `early_expiry`          | number of seconds before actual token expiry where token will be considered as expired. used to ensure token will not expire between the time of retrieval and the time the request reaches the actual server. set it to 0 to deactivate this feature and use the same token until actual expiry. | optional  | 30.0  |\n| `client`                | `httpx.client` instance that will be used to request the token. use it to provide a custom proxying rule for instance. | optional |  |\n\nany other parameter will be put as body parameters in the token url.        \n\n\n### client credentials flow\n\nclient credentials grant is implemented following [rfc6749](https://tools.ietf.org/html/rfc6749#section-4.4).\n\nuse `httpx_auth.oauth2clientcredentials` to configure this kind of authentication.\n\n```python\nimport httpx\nfrom httpx_auth import oauth2clientcredentials\n\nwith httpx.client() as client:\n    client.get('https://www.example.com', auth=oauth2clientcredentials('https://www.token.url', client_id='id', client_secret='secret'))\n```\n\n#### parameters\n\n| name               | description                                  | mandatory | default value |\n|:-------------------|:---------------------------------------------|:----------|:--------------|\n| `token_url`        | oauth 2 token url.                           | mandatory |               |\n| `client_id`         | resource owner user name.                    | mandatory |               |\n| `client_secret`         | resource owner password.                     | mandatory |               |\n| `timeout`          | maximum amount of seconds to wait for a token to be received once requested. | optional | 60            |\n| `header_name`      | name of the header field used to send token. | optional  | authorization |\n| `header_value`     | format used to send the token value. \"{token}\" must be present as it will be replaced by the actual token. | optional | bearer {token} |\n| `scope`            | scope parameter sent to token url as body. can also be a list of scopes. | optional |  |\n| `token_field_name` | field name containing the token.             | optional  | access_token  |\n| `early_expiry`     | number of seconds before actual token expiry where token will be considered as expired. used to ensure token will not expire between the time of retrieval and the time the request reaches the actual server. set it to 0 to deactivate this feature and use the same token until actual expiry. | optional  | 30.0  |\n| `client`           | `httpx.client` instance that will be used to request the token. use it to provide a custom proxying rule for instance. | optional |  |\n\nany other parameter will be put as body parameter in the token url.\n\n#### common providers\n\nmost of [oauth2](https://oauth.net/2/) client credentials grant providers are supported.\n\nif the one you are looking for is not yet supported, feel free to [ask for its implementation](https://github.com/colin-b/httpx_auth/issues/new).\n\n##### okta (oauth2 client credentials)\n\n[okta client credentials grant](https://developer.okta.com/docs/guides/implement-client-creds/overview/) providing access tokens is supported.\n\nuse `httpx_auth.oktaclientcredentials` to configure this kind of authentication.\n\n```python\nimport httpx\nfrom httpx_auth import oktaclientcredentials\n\n\nokta = oktaclientcredentials(instance='testserver.okta-emea.com', client_id='54239d18-c68c-4c47-8bdd-ce71ea1d50cd', client_secret=\"secret\")\nwith httpx.client() as client:\n    client.get('https://www.example.com', auth=okta)\n```\n\n###### parameters\n\n| name                    | description                | mandatory | default value |\n|:------------------------|:---------------------------|:----------|:--------------|\n| `instance`              | okta instance (like \"testserver.okta-emea.com\"). | mandatory |               |\n| `client_id`             | okta application identifier (formatted as an universal unique identifier). | mandatory |               |\n| `client_secret`         | resource owner password.                     | mandatory |               |\n| `authorization_server`  | okta authorization server. | optional | 'default' |\n| `timeout`               | maximum amount of seconds to wait for a token to be received once requested. | optional | 60 |\n| `header_name`           | name of the header field used to send token. | optional | authorization |\n| `header_value`          | format used to send the token value. \"{token}\" must be present as it will be replaced by the actual token. | optional | bearer {token} |\n| `scope`                 | scope parameter sent in query. can also be a list of scopes. | optional | openid |\n| `token_field_name`      | field name containing the token. | optional | access_token |\n| `early_expiry`          | number of seconds before actual token expiry where token will be considered as expired. used to ensure token will not expire between the time of retrieval and the time the request reaches the actual server. set it to 0 to deactivate this feature and use the same token until actual expiry. | optional  | 30.0  |\n| `client`                | `httpx.client` instance that will be used to request the token. use it to provide a custom proxying rule for instance. | optional |  |\n\nany other parameter will be put as query parameter in the token url.        \n\n### implicit flow\n\nimplicit grant is implemented following [rfc6749](https://tools.ietf.org/html/rfc6749#section-4.2).\n\nuse `httpx_auth.oauth2implicit` to configure this kind of authentication.\n\n```python\nimport httpx\nfrom httpx_auth import oauth2implicit\n\nwith httpx.client() as client:\n    client.get('https://www.example.com', auth=oauth2implicit('https://www.authorization.url'))\n```\n\n#### parameters\n\n| name                    | description                | mandatory | default value |\n|:------------------------|:---------------------------|:----------|:--------------|\n| `authorization_url`     | oauth 2 authorization url. | mandatory |               |\n| `response_type`         | value of the response_type query parameter if not already provided in authorization url. | optional | token |\n| `token_field_name`      | field name containing the token. | optional | id_token if response_type is id_token, otherwise access_token |\n| `early_expiry`          | number of seconds before actual token expiry where token will be considered as expired. used to ensure token will not expire between the time of retrieval and the time the request reaches the actual server. set it to 0 to deactivate this feature and use the same token until actual expiry. | optional  | 30.0  |\n| `redirect_uri_endpoint` | custom endpoint that will be used as redirect_uri the following way: http://localhost:<redirect_uri_port>/<redirect_uri_endpoint>. | optional | ''             |\n| `redirect_uri_port`     | the port on which the server listening for the oauth 2 token will be started. | optional | 5000 |\n| `timeout`               | maximum amount of seconds to wait for a token to be received once requested. | optional | 60 |\n| `success_display_time`  | in case a token is successfully received, this is the maximum amount of milliseconds the success page will be displayed in your browser. | optional | 1 |\n| `failure_display_time`  | in case received token is not valid, this is the maximum amount of milliseconds the failure page will be displayed in your browser. | optional | 5000 |\n| `header_name`           | name of the header field used to send token. | optional | authorization |\n| `header_value`          | format used to send the token value. \"{token}\" must be present as it will be replaced by the actual token. | optional | bearer {token} |\n\nany other parameter will be put as query parameter in the authorization url.        \n\nusual extra parameters are:\n        \n| name            | description                                                          |\n|:----------------|:---------------------------------------------------------------------|\n| `client_id`     | corresponding to your application id (in microsoft azure app portal) |\n| `nonce`         | refer to [openid id token specifications][3] for more details        |\n| `prompt`        | none to avoid prompting the user if a session is already opened.     |\n\n#### common providers\n\nmost of [oauth2](https://oauth.net/2/) implicit grant providers are supported.\n\nif the one you are looking for is not yet supported, feel free to [ask for its implementation](https://github.com/colin-b/httpx_auth/issues/new).\n\n##### microsoft - azure active directory (oauth2 access token)\n\n[microsoft identity platform access tokens](https://docs.microsoft.com/en-us/azure/active-directory/develop/access-tokens) are supported.\n\nuse `httpx_auth.azureactivedirectoryimplicit` to configure this kind of authentication.\n\n```python\nimport httpx\nfrom httpx_auth import azureactivedirectoryimplicit\n\n\naad = azureactivedirectoryimplicit(tenant_id='45239d18-c68c-4c47-8bdd-ce71ea1d50cd', client_id='54239d18-c68c-4c47-8bdd-ce71ea1d50cd')\nwith httpx.client() as client:\n    client.get('https://www.example.com', auth=aad)\n```\n\nyou can retrieve microsoft azure active directory application information thanks to the [application list on azure portal](https://portal.azure.com/#blade/microsoft_aad_iam/startboardapplicationsmenublade/allapps/menuid/).\n\n###### parameters\n\n| name                    | description                | mandatory | default value |\n|:------------------------|:---------------------------|:----------|:--------------|\n| `tenant_id`             | microsoft tenant identifier (formatted as an universal unique identifier). | mandatory |               |\n| `client_id`             | microsoft application identifier (formatted as an universal unique identifier). | mandatory |               |\n| `response_type`         | value of the response_type query parameter if not already provided in authorization url. | optional | token |\n| `token_field_name`      | field name containing the token. | optional | access_token |\n| `early_expiry`          | number of seconds before actual token expiry where token will be considered as expired. used to ensure token will not expire between the time of retrieval and the time the request reaches the actual server. set it to 0 to deactivate this feature and use the same token until actual expiry. | optional  | 30.0  |\n| `nonce`                 | refer to [openid id token specifications][3] for more details | optional | newly generated universal unique identifier. |\n| `redirect_uri_endpoint` | custom endpoint that will be used as redirect_uri the following way: http://localhost:<redirect_uri_port>/<redirect_uri_endpoint>. | optional | ''             |\n| `redirect_uri_port`     | the port on which the server listening for the oauth 2 token will be started. | optional | 5000 |\n| `timeout`               | maximum amount of seconds to wait for a token to be received once requested. | optional | 60 |\n| `success_display_time`  | in case a token is successfully received, this is the maximum amount of milliseconds the success page will be displayed in your browser. | optional | 1 |\n| `failure_display_time`  | in case received token is not valid, this is the maximum amount of milliseconds the failure page will be displayed in your browser. | optional | 5000 |\n| `header_name`           | name of the header field used to send token. | optional | authorization |\n| `header_value`          | format used to send the token value. \"{token}\" must be present as it will be replaced by the actual token. | optional | bearer {token} |\n\nany other parameter will be put as query parameter in the authorization url.        \n\nusual extra parameters are:\n        \n| name            | description                                                          |\n|:----------------|:---------------------------------------------------------------------|\n| `prompt`        | none to avoid prompting the user if a session is already opened.     |\n\n##### microsoft - azure active directory (openid connect id token)\n\n[microsoft identity platform id tokens](https://docs.microsoft.com/en-us/azure/active-directory/develop/id-tokens) are supported.\n\nuse `httpx_auth.azureactivedirectoryimplicitidtoken` to configure this kind of authentication.\n\n```python\nimport httpx\nfrom httpx_auth import azureactivedirectoryimplicitidtoken\n\n\naad = azureactivedirectoryimplicitidtoken(tenant_id='45239d18-c68c-4c47-8bdd-ce71ea1d50cd', client_id='54239d18-c68c-4c47-8bdd-ce71ea1d50cd')\nwith httpx.client() as client:\n    client.get('https://www.example.com', auth=aad)\n```\n\nyou can retrieve microsoft azure active directory application information thanks to the [application list on azure portal](https://portal.azure.com/#blade/microsoft_aad_iam/startboardapplicationsmenublade/allapps/menuid/).\n\n###### parameters\n\n| name                    | description                | mandatory | default value |\n|:------------------------|:---------------------------|:----------|:--------------|\n| `tenant_id`             | microsoft tenant identifier (formatted as an universal unique identifier). | mandatory |               |\n| `client_id`             | microsoft application identifier (formatted as an universal unique identifier). | mandatory |               |\n| `response_type`         | value of the response_type query parameter if not already provided in authorization url. | optional | id_token |\n| `token_field_name`      | field name containing the token. | optional | id_token |\n| `early_expiry`          | number of seconds before actual token expiry where token will be considered as expired. used to ensure token will not expire between the time of retrieval and the time the request reaches the actual server. set it to 0 to deactivate this feature and use the same token until actual expiry. | optional  | 30.0  |\n| `nonce`                 | refer to [openid id token specifications][3] for more details | optional | newly generated universal unique identifier. |\n| `redirect_uri_endpoint` | custom endpoint that will be used as redirect_uri the following way: http://localhost:<redirect_uri_port>/<redirect_uri_endpoint>. | optional | ''             |\n| `redirect_uri_port`     | the port on which the server listening for the oauth 2 token will be started. | optional | 5000 |\n| `timeout`               | maximum amount of seconds to wait for a token to be received once requested. | optional | 60 |\n| `success_display_time`  | in case a token is successfully received, this is the maximum amount of milliseconds the success page will be displayed in your browser. | optional | 1 |\n| `failure_display_time`  | in case received token is not valid, this is the maximum amount of milliseconds the failure page will be displayed in your browser. | optional | 5000 |\n| `header_name`           | name of the header field used to send token. | optional | authorization |\n| `header_value`          | format used to send the token value. \"{token}\" must be present as it will be replaced by the actual token. | optional | bearer {token} |\n\nany other parameter will be put as query parameter in the authorization url.        \n\nusual extra parameters are:\n        \n| name            | description                                                          |\n|:----------------|:---------------------------------------------------------------------|\n| `prompt`        | none to avoid prompting the user if a session is already opened.     |\n\n##### okta (oauth2 implicit access token)\n\n[okta implicit grant](https://developer.okta.com/docs/guides/implement-implicit/overview/) providing access tokens is supported.\n\nuse `httpx_auth.oktaimplicit` to configure this kind of authentication.\n\n```python\nimport httpx\nfrom httpx_auth import oktaimplicit\n\n\nokta = oktaimplicit(instance='testserver.okta-emea.com', client_id='54239d18-c68c-4c47-8bdd-ce71ea1d50cd')\nwith httpx.client() as client:\n    client.get('https://www.example.com', auth=okta)\n```\n\n###### parameters\n\n| name                    | description                | mandatory | default value |\n|:------------------------|:---------------------------|:----------|:--------------|\n| `instance`              | okta instance (like \"testserver.okta-emea.com\"). | mandatory |               |\n| `client_id`             | okta application identifier (formatted as an universal unique identifier). | mandatory |               |\n| `response_type`         | value of the response_type query parameter if not already provided in authorization url. | optional | token |\n| `token_field_name`      | field name containing the token. | optional | access_token |\n| `early_expiry`          | number of seconds before actual token expiry where token will be considered as expired. used to ensure token will not expire between the time of retrieval and the time the request reaches the actual server. set it to 0 to deactivate this feature and use the same token until actual expiry. | optional  | 30.0  |\n| `nonce`                 | refer to [openid id token specifications][3] for more details. | optional | newly generated universal unique identifier. |\n| `scope`                 | scope parameter sent in query. can also be a list of scopes. | optional | ['openid', 'profile', 'email'] |\n| `authorization_server`  | okta authorization server. | optional | 'default' |\n| `redirect_uri_endpoint` | custom endpoint that will be used as redirect_uri the following way: http://localhost:<redirect_uri_port>/<redirect_uri_endpoint>. | optional | ''             |\n| `redirect_uri_port`     | the port on which the server listening for the oauth 2 token will be started. | optional | 5000 |\n| `timeout`               | maximum amount of seconds to wait for a token to be received once requested. | optional | 60 |\n| `success_display_time`  | in case a token is successfully received, this is the maximum amount of milliseconds the success page will be displayed in your browser. | optional | 1 |\n| `failure_display_time`  | in case received token is not valid, this is the maximum amount of milliseconds the failure page will be displayed in your browser. | optional | 5000 |\n| `header_name`           | name of the header field used to send token. | optional | authorization |\n| `header_value`          | format used to send the token value. \"{token}\" must be present as it will be replaced by the actual token. | optional | bearer {token} |\n\nany other parameter will be put as query parameter in the authorization url.        \n\nusual extra parameters are:\n        \n| name            | description                                                          |\n|:----------------|:---------------------------------------------------------------------|\n| `prompt`        | none to avoid prompting the user if a session is already opened.     |\n\n##### okta (openid connect implicit id token)\n\n[okta implicit grant](https://developer.okta.com/docs/guides/implement-implicit/overview/) providing id tokens is supported.\n\nuse `httpx_auth.oktaimplicitidtoken` to configure this kind of authentication.\n\n```python\nimport httpx\nfrom httpx_auth import oktaimplicitidtoken\n\n\nokta = oktaimplicitidtoken(instance='testserver.okta-emea.com', client_id='54239d18-c68c-4c47-8bdd-ce71ea1d50cd')\nwith httpx.client() as client:\n    client.get('https://www.example.com', auth=okta)\n```\n\n###### parameters\n\n| name                    | description                | mandatory | default value |\n|:------------------------|:---------------------------|:----------|:--------------|\n| `instance`              | okta instance (like \"testserver.okta-emea.com\"). | mandatory |               |\n| `client_id`             | okta application identifier (formatted as an universal unique identifier). | mandatory |               |\n| `response_type`         | value of the response_type query parameter if not already provided in authorization url. | optional | id_token |\n| `token_field_name`      | field name containing the token. | optional | id_token |\n| `early_expiry`          | number of seconds before actual token expiry where token will be considered as expired. used to ensure token will not expire between the time of retrieval and the time the request reaches the actual server. set it to 0 to deactivate this feature and use the same token until actual expiry. | optional  | 30.0  |\n| `nonce`                 | refer to [openid id token specifications][3] for more details. | optional | newly generated universal unique identifier. |\n| `scope`                 | scope parameter sent in query. can also be a list of scopes. | optional | ['openid', 'profile', 'email'] |\n| `authorization_server`  | okta authorization server. | optional | 'default' |\n| `redirect_uri_endpoint` | custom endpoint that will be used as redirect_uri the following way: http://localhost:<redirect_uri_port>/<redirect_uri_endpoint>. | optional | ''             |\n| `redirect_uri_port`     | the port on which the server listening for the oauth 2 token will be started. | optional | 5000 |\n| `timeout`               | maximum amount of seconds to wait for a token to be received once requested. | optional | 60 |\n| `success_display_time`  | in case a token is successfully received, this is the maximum amount of milliseconds the success page will be displayed in your browser. | optional | 1 |\n| `failure_display_time`  | in case received token is not valid, this is the maximum amount of milliseconds the failure page will be displayed in your browser. | optional | 5000 |\n| `header_name`           | name of the header field used to send token. | optional | authorization |\n| `header_value`          | format used to send the token value. \"{token}\" must be present as it will be replaced by the actual token. | optional | bearer {token} |\n\nany other parameter will be put as query parameter in the authorization url.        \n\nusual extra parameters are:\n        \n| name            | description                                                          |\n|:----------------|:---------------------------------------------------------------------|\n| `prompt`        | none to avoid prompting the user if a session is already opened.     |\n\n### managing token cache\n\nto avoid asking for a new token every new request, a token cache is used.\n\ndefault cache is in memory but it is also possible to use a physical cache.\n\nyou need to provide the location of your token cache file. it can be a full or relative path.\n\nif the file already exists it will be used, if the file do not exists it will be created.\n\n```python\nfrom httpx_auth import oauth2, jsontokenfilecache\n\noauth2.token_cache = jsontokenfilecache('path/to/my_token_cache.json')\n```\n\n## aws signature v4\n\namazon web service signature version 4 is implemented following [amazon s3 documentation](https://docs.aws.amazon.com/amazons3/latest/api/sigv4-auth-using-authorization-header.html) and [request-aws4auth](https://github.com/sam-washington/requests-aws4auth).\n\nuse `httpx_auth.aws4auth` to configure this kind of authentication.\n\n```python\nimport httpx\nfrom httpx_auth import aws4auth\n\naws = aws4auth(access_id=\"my-access-id\", secret_key=\"my-secret-key\", region=\"eu-west-1\", service=\"s3\")\nwith httpx.client() as client:\n    client.get('http://s3-eu-west-1.amazonaws.com', auth=aws)\n```\n\n### parameters\n\n| name             | description                | mandatory | default value |\n|:-----------------|:---------------------------|:----------|:--------------|\n| `access_id`      | aws access id. | mandatory | |\n| `secret_key`     | aws secret access key. | mandatory | |\n| `region`         | the region you are connecting to, as per [this list](http://docs.aws.amazon.com/general/latest/gr/rande.html#s3_region). for services which do not require a region (e.g. iam), use us-east-1. | mandatory | |\n| `service`        | the name of the service you are connecting to, as per [this list](http://docs.aws.amazon.com/general/latest/gr/rande.html). e.g. elasticbeanstalk. | mandatory | |\n| `security_token` | used for the `x-amz-security-token` header, for use with sts temporary credentials. | optional | |\n\n## api key in header\n\nyou can send an api key inside the header of your request using `httpx_auth.headerapikey`.\n\n```python\nimport httpx\nfrom httpx_auth import headerapikey\n\nwith httpx.client() as client:\n    client.get('https://www.example.com', auth=headerapikey('my_api_key'))\n```\n\n### parameters\n\n| name                    | description                    | mandatory | default value |\n|:------------------------|:-------------------------------|:----------|:--------------|\n| `api_key`               | the api key that will be sent. | mandatory |               |\n| `header_name`           | name of the header field.      | optional  | \"x-api-key\"   |\n\n## api key in query\n\nyou can send an api key inside the query parameters of your request using `httpx_auth.queryapikey`.\n\n```python\nimport httpx\nfrom httpx_auth import queryapikey\n\nwith httpx.client() as client:\n    client.get('https://www.example.com', auth=queryapikey('my_api_key'))\n```\n\n### parameters\n\n| name                    | description                    | mandatory | default value |\n|:------------------------|:-------------------------------|:----------|:--------------|\n| `api_key`               | the api key that will be sent. | mandatory |               |\n| `query_parameter_name`  | name of the query parameter.   | optional  | \"api_key\"     |\n\n## basic\n\nyou can use basic authentication using `httpx_auth.basic`.\n\nthe only advantage of using this class instead of `httpx` native support of basic authentication, is to be able to use it in [multiple authentication](#multiple-authentication-at-once).\n\n```python\nimport httpx\nfrom httpx_auth import basic\n\nwith httpx.client() as client:\n    client.get('https://www.example.com', auth=basic('username', 'password'))\n```\n\n### parameters\n\n| name                    | description                    | mandatory | default value |\n|:------------------------|:-------------------------------|:----------|:--------------|\n| `username`              | user name.                     | mandatory |               |\n| `password`              | user password.                 | mandatory |               |\n\n## multiple authentication at once\n\nyou can also use a combination of authentication using `+`or `&`  as in the following sample:\n\n```python\nimport httpx\nfrom httpx_auth import headerapikey, oauth2implicit\n\napi_key = headerapikey('my_api_key')\noauth2 = oauth2implicit('https://www.example.com')\nwith httpx.client() as client:\n    client.get('https://www.example.com', auth=api_key + oauth2)\n```\n\n## available pytest fixtures\n\ntesting the code using `httpx_auth` authentication classes can be achieved using provided [`pytest`][6] fixtures.\n\n### token_cache_mock\n\n```python\nfrom httpx_auth.testing import token_cache_mock, token_mock\n\ndef test_something(token_cache_mock):\n    # perform code using authentication\n    pass\n```\n\nuse this fixture to mock authentication success for any of the following classes:\n * oauth2authorizationcodepkce\n * oktaauthorizationcodepkce\n * oauth2implicit\n * oktaimplicit\n * oktaimplicitidtoken\n * azureactivedirectoryimplicit\n * azureactivedirectoryimplicitidtoken\n * oauth2authorizationcode\n * oktaauthorizationcode\n * oauth2clientcredentials\n * oktaclientcredentials\n * oauth2resourceownerpasswordcredentials,\n\nby default, an access token with value `2yotnfzfejr1zcsicmwpaa` is generated.\n\nyou can however return your custom token by providing your own `token_mock` fixture as in the following sample:\n\n```python\nimport pytest\n\nfrom httpx_auth.testing import token_cache_mock\n\n\n@pytest.fixture\ndef token_mock() -> str:\n    return \"mycustomtokenvalue\"\n\n\ndef test_something(token_cache_mock):\n    # perform code using authentication\n    pass\n```\n\nyou can even return a more complex token by using the `create_token` function.\n\nnote that [`pyjwt`](https://pypi.org/project/pyjwt/) is a required dependency in this case as it is used to generate the token returned by the authentication.\n\n```python\nimport pytest\nfrom httpx_auth.testing import token_cache_mock, create_token\n\n\n@pytest.fixture\ndef token_mock() -> str:\n    expiry = none  # todo compute your expiry\n    return create_token(expiry)\n\n\ndef test_something(token_cache_mock):\n    # perform code using authentication\n    pass\n```\n\n### advanced testing\n\n#### token_cache\n\nthis [`pytest`][6] fixture will return the token cache and ensure it is reset at the end of the test case.\n\n```python\nfrom httpx_auth.testing import token_cache\n\ndef test_something(token_cache):\n    # perform code using authentication\n    pass\n```\n\n#### browser_mock\n\nthis [`pytest`][6] fixture will allow to mock the behavior of a web browser.\n\nwith this [`pytest`][6] fixture you will be allowed to fine tune your authentication related failures handling.\n\n[`pyjwt`](https://pypi.org/project/pyjwt/) is a required dependency if you use `create_token` helper function.\n\n```python\nimport datetime\n\nfrom httpx_auth.testing import browser_mock, browsermock, create_token\n\ndef test_something(browser_mock: browsermock):\n    token_expiry = datetime.datetime.utcnow() + datetime.timedelta(hours=1)\n    token = create_token(token_expiry)\n    tab = browser_mock.add_response(\n        opened_url=\"http://url_opened_by_browser?state=1234\",\n        reply_url=f\"http://localhost:5000#access_token={token}&state=1234\",\n    )\n\n    # perform code using authentication\n\n    tab.assert_success(\n        \"you are now authenticated on 1234 you may close this tab.\"\n    )\n```\n\n[1]: https://pypi.python.org/pypi/httpx \"httpx module\"\n[2]: https://www.python-httpx.org/advanced/#customizing-authentication \"authentication parameter on httpx module\"\n[3]: https://openid.net/specs/openid-connect-core-1_0.html#idtoken \"openid id token specifications\"\n[6]: https://docs.pytest.org/en/latest/ \"pytest module\"\n",
  "docs_url": null,
  "keywords": "authentication,oauth2,aws,okta,aad",
  "license": "mit license  copyright (c) 2023 colin bounouar  permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"software\"), to deal in the software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the software, and to permit persons to whom the software is furnished to do so, subject to the following conditions:  the above copyright notice and this permission notice shall be included in all copies or substantial portions of the software.  the software is provided \"as is\", without warranty of any kind, express or implied, including but not limited to the warranties of merchantability, fitness for a particular purpose and noninfringement. in no event shall the authors or copyright holders be liable for any claim, damages or other liability, whether in an action of contract, tort or otherwise, arising from, out of or in connection with the software or the use or other dealings in the software. ",
  "name": "httpx-auth",
  "package_url": "https://pypi.org/project/httpx-auth/",
  "project_url": "https://pypi.org/project/httpx-auth/",
  "project_urls": {
    "changelog": "https://github.com/Colin-b/httpx_auth/blob/master/CHANGELOG.md",
    "documentation": "https://colin-b.github.io/httpx_auth/",
    "issues": "https://github.com/Colin-b/httpx_auth/issues",
    "repository": "https://github.com/Colin-b/httpx_auth"
  },
  "release_url": "https://pypi.org/project/httpx-auth/0.18.0/",
  "requires_dist": [
    "httpx ==0.25.*",
    "pyjwt ==2.* ; extra == 'testing'",
    "pytest-httpx ==0.25.* ; extra == 'testing'",
    "pytest-cov ==4.* ; extra == 'testing'"
  ],
  "requires_python": ">=3.9",
  "summary": "authentication for httpx",
  "version": "0.18.0",
  "releases": [],
  "developers": [
    "colin.bounouar.dev@gmail.com"
  ],
  "kwds": "httpx_auth authorization_url aws4auth oauth2 auth",
  "license_kwds": "copyright license liable liability noninfringement",
  "libtype": "pypi",
  "id": "pypi_httpx_auth",
  "homepage": "",
  "release_count": 22,
  "dependency_ids": [
    "pypi_httpx",
    "pypi_pyjwt",
    "pypi_pytest_cov",
    "pypi_pytest_httpx"
  ],
  "documentation_summary": "The HTML text provides detailed information about the `httpx-auth` package version 0.22.0, released on March 2, 2024, available on PyPI for authentication with HTTPX. It supports various authentication methods including OAuth2, AWS, Okta, Microsoft Entra, and basic authentication, among others. The package is compatible with Python versions 3.9 and above and is licensed under the MIT License. The author and maintainer of the package is Colin Bounouar. The document also includes instructions for installation, usage examples for different authentication flows (like OAuth2 Authorization Code Flow, Client Credentials Flow, Implicit Flow, etc.), managing token cache, and configuring web browser interaction for authentication. Additionally, it mentions support for multiple authentications at once and provides information on testing with provided pytest fixtures.",
  "embedding": [
    0.01123756729066372,
    0.028395483270287514,
    0.008575491607189178,
    -0.013816454447805882,
    -0.00840217899531126,
    0.014045226387679577,
    -0.006506142672151327,
    -0.00803475733846426,
    0.018925700336694717,
    -0.0015372798079624772,
    0.030281120911240578,
    -0.021601641550660133,
    -0.018759319558739662,
    0.010190761648118496,
    -0.022059185430407524,
    -0.010398736223578453,
    0.01407988928258419,
    -0.012436888180673122,
    -0.0003695884079206735,
    -0.020381523296236992,
    0.022974275052547455,
    0.00024826981825754046,
    -0.026953523978590965,
    -0.004890872165560722,
    -0.024790586903691292,
    0.008575491607189178,
    0.005584121216088533,
    -0.029698790982365608,
    0.030724799260497093,
    -0.012658728286623955,
    0.019064350053668022,
    -0.0017201242735609412,
    -0.04838878661394119,
    -0.02650984562933445,
    0.0036083615850657225,
    -0.01855134591460228,
    0.0026724752970039845,
    0.0074662924744188786,
    0.01941097527742386,
    0.0035061072558164597,
    0.018482020124793053,
    0.014031361788511276,
    0.021560046821832657,
    0.011702044866979122,
    -0.013539155013859272,
    0.000693249108735472,
    -0.0030242991633713245,
    -0.04006979614496231,
    0.0013483695220202208,
    0.01586153917014599,
    0.017331227660179138,
    -0.0006442883750423789,
    -0.017150983214378357,
    -0.03477337583899498,
    0.030392039567232132,
    -0.007771322038024664,
    -0.004235751926898956,
    0.010225423611700535,
    -0.010939470492303371,
    0.004280813038349152,
    0.030392039567232132,
    0.007639605086296797,
    -0.023320898413658142,
    -0.01516828965395689,
    -0.004065905697643757,
    -0.007909972220659256,
    -0.027965668588876724,
    0.019369378685951233,
    -0.017040062695741653,
    0.016485463827848434,
    0.014863260090351105,
    0.012221981771290302,
    0.00647494662553072,
    -0.013268787413835526,
    0.03593803197145462,
    -0.013345045037567616,
    -0.04270414263010025,
    -0.01092560589313507,
    -0.007646537385880947,
    -0.020312197506427765,
    0.01048192661255598,
    -0.0017443880205973983,
    0.02856186218559742,
    0.040236178785562515,
    0.03485656529664993,
    0.005909948609769344,
    -0.02075587771832943,
    0.012388361617922783,
    0.001714058336801827,
    0.003656888846307993,
    0.04384107142686844,
    -0.009989718906581402,
    0.027688369154930115,
    0.03089118003845215,
    -0.01220118347555399,
    0.03513386473059654,
    -0.027591314166784286,
    0.033109575510025024,
    0.0010884010698646307,
    -0.012284373864531517,
    -0.007112735416740179,
    0.019216865301132202,
    -0.019937843084335327,
    -0.012374496087431908,
    -0.043147824704647064,
    -0.024360772222280502,
    -0.02473512664437294,
    0.005802494939416647,
    0.0235981997102499,
    0.018925700336694717,
    -0.017830366268754005,
    0.025608621537685394,
    -0.020381523296236992,
    -0.03186172619462013,
    -0.0025008961092680693,
    -0.006433351431041956,
    0.033165037631988525,
    0.0017617192352190614,
    -0.013199462555348873,
    0.007708929944783449,
    0.0032184089068323374,
    0.03513386473059654,
    -0.0015858073020353913,
    -0.012901365756988525,
    -7.706980250077322e-05,
    -0.009906529448926449,
    -0.006987950764596462,
    -0.016568653285503387,
    0.04395199194550514,
    -0.005223631858825684,
    0.012825108133256435,
    -0.00010609960736474022,
    0.01857907511293888,
    -0.0037574099842458963,
    -0.01060671079903841,
    0.024748992174863815,
    -0.02354273945093155,
    -0.007091938052326441,
    0.0045303828082978725,
    -0.009906529448926449,
    0.026523709297180176,
    0.017303496599197388,
    -0.023833904415369034,
    0.011195972561836243,
    -0.0066517251543700695,
    0.025359051302075386,
    -0.01324105728417635,
    -0.016610248014330864,
    0.0038648636545985937,
    0.004131764639168978,
    0.024901507422327995,
    -0.0023899762891232967,
    -0.02002103440463543,
    -0.014211606234312057,
    -0.00979560986161232,
    0.026870334520936012,
    -0.024776723235845566,
    0.02736947312951088,
    -0.02298814058303833,
    0.013657007366418839,
    -0.006991417147219181,
    0.03801777958869934,
    -0.011008795350790024,
    -0.044367942959070206,
    -0.007091938052326441,
    0.025456106290221214,
    0.0052374969236552715,
    -0.0035702327731996775,
    -0.022766299545764923,
    0.005826758686453104,
    0.0034298498649150133,
    0.006582400295883417,
    -0.0352725125849247,
    -0.018565211445093155,
    0.02329316921532154,
    0.02626027539372444,
    0.0034645122941583395,
    0.01791355572640896,
    -0.028145913034677505,
    -0.0040416419506073,
    0.010981065221130848,
    0.005792096257209778,
    -0.0050399210304021835,
    0.039626117795705795,
    -0.03774048015475273,
    0.007286048028618097,
    -0.011057322844862938,
    -0.007403900381177664,
    0.0007612741319462657,
    0.016388408839702606,
    0.029310571029782295,
    0.05559857562184334,
    0.007604942657053471,
    -0.008208069019019604,
    -0.5954177975654602,
    -0.016887547448277473,
    -0.009684689342975616,
    -0.03851692005991936,
    0.01320639532059431,
    0.005864887498319149,
    0.013587682507932186,
    0.008984507992863655,
    -0.021435262635350227,
    0.04264868423342705,
    -0.027133768424391747,
    0.03186172619462013,
    -0.0033657243475317955,
    -0.015514914877712727,
    -0.012048669159412384,
    -0.018814779818058014,
    0.0021629370748996735,
    -0.020922256633639336,
    0.007764389738440514,
    0.009331132285296917,
    -0.003695017658174038,
    0.024513287469744682,
    -0.04764007776975632,
    0.01778877153992653,
    0.0235150083899498,
    -0.0005108379409648478,
    0.00955297239124775,
    -0.0030970904044806957,
    0.007937702350318432,
    0.002336249453946948,
    0.013871913775801659,
    0.03263816609978676,
    0.02742493338882923,
    -0.018024476245045662,
    0.046419959515333176,
    -0.014121484011411667,
    -0.014738475903868675,
    0.027452664449810982,
    -0.007577212527394295,
    0.06915853172540665,
    -0.01794128678739071,
    0.0054732016287744045,
    -0.010412600822746754,
    -0.008395246230065823,
    0.00692555820569396,
    0.018842510879039764,
    0.027508122846484184,
    0.02420825883746147,
    -0.006686387583613396,
    -0.020631093531847,
    -0.008887453004717827,
    -0.00912315770983696,
    0.023584334179759026,
    -0.02788247913122177,
    0.0020814803428947926,
    -0.0063536278903484344,
    0.017719445750117302,
    -0.0007127466960810125,
    -0.026093896478414536,
    0.008471503853797913,
    -0.020949987694621086,
    0.043757881969213486,
    -0.01949416473507881,
    -0.013033082708716393,
    -0.012485415674746037,
    -0.0012521811295300722,
    -0.006523474119603634,
    0.015306939370930195,
    0.008076352067291737,
    -0.014821665361523628,
    0.016124973073601723,
    0.03158442676067352,
    -0.02788247913122177,
    -0.003258270677179098,
    0.01619429886341095,
    0.021435262635350227,
    0.027785424143075943,
    0.01748374104499817,
    -0.008686411194503307,
    0.0383782684803009,
    -0.009268740192055702,
    -0.005989672150462866,
    -9.580919140717015e-05,
    -0.03205583617091179,
    0.08862496167421341,
    0.00490473723039031,
    -0.03266589716076851,
    -0.01812153123319149,
    0.014100686646997929,
    -0.02121342159807682,
    0.014530500397086143,
    0.0011204638285562396,
    -0.008908250369131565,
    -0.03036431036889553,
    -0.010648305527865887,
    0.03241632878780365,
    -0.016291353851556778,
    -0.01331731490790844,
    -0.02947695180773735,
    -0.01304001547396183,
    0.0024263719096779823,
    0.009206348098814487,
    0.0009497512364760041,
    0.01426706649363041,
    0.01925846002995968,
    0.015542644076049328,
    -0.009760946966707706,
    -0.013934306800365448,
    0.008707208558917046,
    0.005677709821611643,
    -0.018163125962018967,
    -0.024998562410473824,
    -0.015986323356628418,
    0.009844137355685234,
    -0.020589496940374374,
    -0.026870334520936012,
    0.016443869099020958,
    0.009698554873466492,
    0.00910929311066866,
    -0.00847843661904335,
    0.013220259919762611,
    -0.03469018265604973,
    -0.0005338017945177853,
    -0.005216699559241533,
    0.010364074259996414,
    0.02889462187886238,
    0.01895342953503132,
    -0.03455153480172157,
    -0.04092942550778389,
    0.00301909982226789,
    0.006097125820815563,
    -0.0020156216342002153,
    0.036104410886764526,
    -0.005188969429582357,
    0.036659013479948044,
    -0.0008418643847107887,
    0.039016056805849075,
    -0.012568606063723564,
    -0.003747011302039027,
    -0.01339357253164053,
    -0.029033271595835686,
    0.004138696938753128,
    -0.0183988306671381,
    -0.023833904415369034,
    0.007182060740888119,
    -0.004984460771083832,
    -0.0044922539964318275,
    0.020118089392781258,
    -0.00036785530392080545,
    0.03180626779794693,
    -0.01207639928907156,
    0.013254922814667225,
    -0.03804551064968109,
    0.02093612216413021,
    -0.01172284223139286,
    -0.02785474807024002,
    0.014475041069090366,
    -0.018495885655283928,
    0.0018977693980559707,
    0.011140513233840466,
    0.00038756956928409636,
    0.034357424825429916,
    0.00420802179723978,
    -0.01588926836848259,
    -0.03857237845659256,
    0.0012149190297350287,
    0.010260086506605148,
    0.023986417800188065,
    0.00841604359447956,
    -0.03571619465947151,
    0.010364074259996414,
    -0.01120290532708168,
    -0.012499281205236912,
    -0.003336261259391904,
    0.014170011505484581,
    0.036048952490091324,
    -0.0035026411060243845,
    0.006828503683209419,
    0.0012131859548389912,
    -0.002622214611619711,
    0.007986229844391346,
    0.01880091428756714,
    -0.03707496076822281,
    -0.025636350736021996,
    -0.0017331227427348495,
    -0.0033379944507032633,
    -0.011140513233840466,
    0.022211700677871704,
    -0.03319276496767998,
    0.0015147492522373796,
    -0.011015728116035461,
    0.008637883700430393,
    -0.0002948475012090057,
    0.03970930725336075,
    -0.004214954562485218,
    -0.014211606234312057,
    0.01346983015537262,
    0.0044298614375293255,
    0.01294989325106144,
    0.0257472712546587,
    0.011376217938959599,
    0.00507458345964551,
    0.01631908304989338,
    -0.02531745657324791,
    0.011189039796590805,
    -0.012478483840823174,
    0.00797236431390047,
    -0.02149072103202343,
    0.00936579518020153,
    -0.015223749913275242,
    0.027078310027718544,
    -0.015501049347221851,
    -0.02549770101904869,
    -0.02397255413234234,
    0.0161665678024292,
    0.019092079252004623,
    -0.02268311008810997,
    0.017442146316170692,
    -0.027591314166784286,
    0.003514772979542613,
    0.009227145463228226,
    0.015528779476881027,
    0.02917192131280899,
    0.00552519503980875,
    -0.0176917165517807,
    -0.010280883871018887,
    0.009934259578585625,
    0.017858097329735756,
    -0.006495743989944458,
    -0.004915135912597179,
    0.006013935897499323,
    0.007577212527394295,
    0.008339786902070045,
    -0.04711320623755455,
    0.016277488321065903,
    -0.008825060911476612,
    0.0003544235951267183,
    -0.02883916161954403,
    0.034606993198394775,
    -0.020076492801308632,
    0.023778444156050682,
    -0.012450753711163998,
    0.02323770895600319,
    -0.03147350996732712,
    0.02602457068860531,
    0.01708165742456913,
    0.013247990049421787,
    0.01690141297876835,
    0.013365842401981354,
    0.004305076785385609,
    0.030170200392603874,
    0.03682539239525795,
    -0.003923789598047733,
    -0.004488787613809109,
    0.019632814452052116,
    -0.004086703527718782,
    -0.005570256616920233,
    0.0013128404971212149,
    0.048721544444561005,
    -0.0010866679949685931,
    0.024846047163009644,
    -0.005008724518120289,
    0.03471791371703148,
    0.010710698552429676,
    0.03499521315097809,
    -0.012159588746726513,
    -0.03865556791424751,
    -0.033442337065935135,
    -0.01723417267203331,
    -0.029338302090764046,
    0.012111061252653599,
    -0.025691810995340347,
    0.00020364191732369363,
    -0.014156145974993706,
    0.02972652018070221,
    0.00638135802000761,
    0.01588926836848259,
    0.023944823071360588,
    -0.009774812497198582,
    -0.0018128463998436928,
    -0.03571619465947151,
    -0.04542167857289314,
    0.032887738198041916,
    0.022696975618600845,
    0.004571977537125349,
    -0.0114039471372962,
    0.002615282079204917,
    0.008665613830089569,
    0.0030312316957861185,
    0.020852932706475258,
    0.027161499485373497,
    -0.008069419302046299,
    0.018079936504364014,
    0.0073207104578614235,
    -0.0037400787696242332,
    -0.0037574099842458963,
    0.03541116416454315,
    -0.0113900825381279,
    -0.022336484864354134,
    -0.021754156798124313,
    0.01355995237827301,
    0.017594661563634872,
    0.022211700677871704,
    0.010398736223578453,
    0.044035181403160095,
    0.014918720349669456,
    -0.009837204590439796,
    -0.02237807959318161,
    -0.013698602095246315,
    -0.020839067175984383,
    0.014655285514891148,
    0.00116119219455868,
    0.0011845893459394574,
    -0.02286335453391075,
    0.00999665167182684,
    0.010488858446478844,
    -0.008686411194503307,
    -0.020187413319945335,
    0.02440236695110798,
    -0.020159684121608734,
    -0.003298132447525859,
    -0.03036431036889553,
    -0.018759319558739662,
    0.002554622944444418,
    0.02103317715227604,
    0.010911740362644196,
    -0.0034229173325002193,
    0.010939470492303371,
    -0.0250678863376379,
    0.007771322038024664,
    -0.023917093873023987,
    -0.0033587918151170015,
    -0.0018128463998436928,
    -0.01183376181870699,
    -0.012256643734872341,
    0.02736947312951088,
    -0.0012885767500847578,
    0.03455153480172157,
    0.039875686168670654,
    0.005899549927562475,
    0.0033102643210440874,
    0.010863212868571281,
    -0.023251574486494064,
    0.0002801159571390599,
    -0.012790445238351822,
    -0.017220307141542435,
    0.005109245888888836,
    0.00655813654884696,
    0.03496748208999634,
    0.013005352579057217,
    0.019521893933415413,
    0.02323770895600319,
    0.013192529790103436,
    -0.01720644161105156,
    0.006738380994647741,
    -0.022114645689725876,
    -0.0011265297653153539,
    -0.007417765446007252,
    -0.037019502371549606,
    0.02605229988694191,
    0.006793841253966093,
    0.0063778916373848915,
    -0.0004913402954116464,
    -0.0022669245954602957,
    0.0169568732380867,
    0.004731425084173679,
    -0.015611969865858555,
    0.0199239794164896,
    0.00927567295730114,
    -0.04483935236930847,
    -0.0033258625771850348,
    0.023404089733958244,
    0.003688085125759244,
    -0.007341507822275162,
    -0.008596288971602917,
    0.018163125962018967,
    -0.022142374888062477,
    -0.03241632878780365,
    0.016859818249940872,
    -0.014391850680112839,
    0.03125166893005371,
    -0.0034246505238115788,
    -0.015750618651509285,
    -0.026218680664896965,
    -0.024138933047652245,
    -0.043120093643665314,
    -0.014918720349669456,
    -0.02045084722340107,
    -0.008499233983457088,
    0.018357235938310623,
    0.0012227180413901806,
    -0.003247871994972229,
    -0.005826758686453104,
    -0.0021975995041429996,
    0.0050399210304021835,
    -0.03094663843512535,
    -0.014225470833480358,
    0.010752293281257153,
    0.04090169444680214,
    0.005909948609769344,
    -0.0028388549108058214,
    -0.00612138956785202,
    0.023556603118777275,
    0.008069419302046299,
    -0.009081562981009483,
    -0.029061000794172287,
    -0.0020381524227559566,
    -0.019147539511322975,
    0.011369285173714161,
    -0.013019218109548092,
    0.00803475733846426,
    -0.0038405999075621367,
    0.03150123730301857,
    0.026301870122551918,
    0.0011637918651103973,
    -0.00860322080552578,
    0.0012582470662891865,
    -0.04417383298277855,
    0.0035061072558164597,
    0.021421397104859352,
    0.008748803287744522,
    0.01455823052674532,
    0.021199557930231094,
    -0.007487090304493904,
    -0.03119620867073536,
    -0.02316838502883911,
    0.007750524673610926,
    -0.0198407880961895,
    0.02179575152695179,
    0.008429909124970436,
    0.009837204590439796,
    0.030197929590940475,
    -0.024943102151155472,
    -0.002772996434941888,
    0.015196019783616066,
    -0.0012998420279473066,
    0.004908203613013029,
    0.024818317964673042,
    0.00018414428632240742,
    0.0009280872181989253,
    -0.0023986417800188065,
    0.03319276496767998,
    -0.021102502942085266,
    -0.013351977802813053,
    0.0017885826528072357,
    -0.03333141654729843,
    0.001572808832861483,
    0.018662264570593834,
    -0.014904855750501156,
    0.02565021626651287,
    -0.012922163121402264,
    -0.024818317964673042,
    -0.01692914217710495,
    0.014225470833480358,
    0.024499421939253807,
    0.010994930751621723,
    -0.003923789598047733,
    -0.01294989325106144,
    0.0014627556083723903,
    0.014086821116507053,
    -0.03347006440162659,
    0.0031768139451742172,
    -0.017164846882224083,
    -0.021712562069296837,
    -0.005310288164764643,
    0.005192435812205076,
    -0.0074662924744188786,
    -0.0003793372306972742,
    -0.00463783647865057,
    -0.028021128848195076,
    -0.025885920971632004,
    -0.00831205677241087,
    -0.00028336557443253696,
    0.017428282648324966,
    -0.010509655810892582,
    0.0031404183246195316,
    -0.008977575227618217,
    -0.012859770096838474,
    -0.012131858617067337,
    -0.013553019613027573,
    -0.0176639873534441,
    -0.001984425587579608,
    0.011972411535680294,
    0.03360871598124504,
    0.01751147210597992,
    -0.01778877153992653,
    0.01873159036040306,
    0.0013137069763615727,
    0.02387549914419651,
    -0.01548718474805355,
    -0.02090839296579361,
    0.0021473390515893698,
    -4.1378305468242615e-05,
    -0.0061803157441318035,
    -0.0057470351457595825,
    0.02448555827140808,
    0.007757457438856363,
    0.001523414859548211,
    -0.004984460771083832,
    -0.0008994906675070524,
    0.009871866554021835,
    0.002083213534206152,
    -0.022766299545764923,
    -0.026579169556498528,
    0.011937749572098255,
    -0.008367516100406647,
    -0.015251480042934418,
    0.01918913424015045,
    -0.036353982985019684,
    -0.011916952207684517,
    0.029033271595835686,
    0.0008786932448856533,
    0.02455488219857216,
    0.009393525309860706,
    0.032249946147203445,
    -0.0028440544847398996,
    0.0066274614073336124,
    0.007272182963788509,
    0.0077158622443675995,
    -0.014572096057236195,
    0.00856855884194374,
    -0.006149119231849909,
    -0.014960315078496933,
    0.036104410886764526,
    0.012263576500117779,
    0.028395483270287514,
    -0.0033067981712520123,
    0.0035736991558223963,
    0.0035043740645051003,
    0.022738570347428322,
    -0.0007838047458790243,
    -0.014821665361523628,
    0.0053484165109694,
    -0.00788224209100008,
    -0.018759319558739662,
    -0.01515442505478859,
    -0.03954292833805084,
    -0.03091890923678875,
    -0.008970643393695354,
    0.0015138826565816998,
    0.011008795350790024,
    0.023209979757666588,
    -0.01845429092645645,
    -0.028811432421207428,
    0.026579169556498528,
    -0.013740196824073792,
    0.02354273945093155,
    -0.005327619146555662,
    0.06560909003019333,
    0.01591699942946434,
    0.009823339991271496,
    6.478900104411878e-06,
    -0.023930957540869713,
    -0.026288004592061043,
    -0.015196019783616066,
    0.02326544001698494,
    0.034939754754304886,
    0.000696715316735208,
    -0.013005352579057217,
    -0.009864934720098972,
    0.009116225875914097,
    -0.010877078399062157,
    -0.004367469344288111,
    0.030253389850258827,
    0.030419770628213882,
    0.01112664770334959,
    -0.02329316921532154,
    -0.004162960685789585,
    -0.0073623051866889,
    0.0038024713285267353,
    -0.01252007856965065,
    -0.019535759463906288,
    0.01563969999551773,
    -0.017067791894078255,
    -0.028353888541460037,
    0.03150123730301857,
    0.016485463827848434,
    -0.012284373864531517,
    0.023154519498348236,
    -0.00955297239124775,
    -0.003500907914713025,
    -0.03568846359848976,
    -0.017650121822953224,
    -0.01586153917014599,
    0.01713711768388748,
    0.024998562410473824,
    -0.0008111014030873775,
    0.016443869099020958,
    0.016610248014330864,
    0.020547902211546898,
    0.00024003749422263354,
    0.008741870522499084,
    0.017497606575489044,
    0.03621533140540123,
    -0.0099619897082448,
    -0.009747082367539406,
    -0.01898116059601307,
    -0.015196019783616066,
    0.006232309155166149,
    -0.0047418237663805485,
    -0.008360584266483784,
    -0.017164846882224083,
    -0.013962036930024624,
    -0.003726213937625289,
    0.02623254619538784,
    -0.015625834465026855,
    -0.027771558612585068,
    -0.017774906009435654,
    -0.008651748299598694,
    -0.007112735416740179,
    -0.009767879731953144,
    -0.010433399118483067,
    0.017497606575489044,
    -0.012312103994190693,
    -0.01227744109928608,
    -0.028423212468624115,
    -0.028506401926279068,
    0.010800820775330067,
    0.013657007366418839,
    0.014176944270730019,
    -0.0028440544847398996,
    0.026495980098843575,
    -0.013060812838375568,
    0.018592940643429756,
    0.019521893933415413,
    0.005455870181322098,
    -0.024804452434182167,
    -0.010987997986376286,
    0.0057019735686481,
    0.017220307141542435,
    0.031695347279310226,
    0.010967200621962547,
    -0.036076683551073074,
    -0.02754971943795681,
    0.011979344300925732,
    0.031362589448690414,
    0.017899692058563232,
    -0.010946403257548809,
    0.009268740192055702,
    -0.00832592137157917,
    0.008984507992863655,
    0.011591124348342419,
    -0.016859818249940872,
    0.03970930725336075,
    -0.0033986535854637623,
    -0.002192400163039565,
    -0.002899514278396964,
    0.02075587771832943,
    -0.002871784381568432,
    -0.014121484011411667,
    0.026426654309034348,
    -0.014655285514891148,
    -0.009095427580177784,
    -0.0191336739808321,
    -0.018079936504364014,
    0.001766918576322496,
    -0.013858049176633358,
    -0.006388290319591761,
    -0.04065212607383728,
    -0.021906672045588493,
    -0.006443750113248825,
    0.03480110317468643,
    0.014807800762355328,
    -0.00039428542368113995,
    -0.0003115287981927395,
    0.02323770895600319,
    0.009067698381841183,
    0.0057227713987231255,
    -0.006897828541696072,
    -0.028950082138180733,
    -0.005937678273767233,
    0.009137023240327835,
    -0.014322525821626186,
    -0.03208356723189354,
    -0.01227744109928608,
    0.02807658724486828,
    0.011230635456740856,
    -0.017594661563634872,
    -0.012478483840823174,
    -0.043757881969213486,
    -0.02626027539372444,
    -0.010676035657525063,
    -0.03599349409341812,
    0.022170105949044228,
    0.0016637977678328753,
    0.00481461500748992,
    0.00735537288710475,
    0.021809617057442665,
    -0.001277311472222209,
    0.02106090635061264,
    -0.004991393536329269,
    0.01918913424015045,
    0.008450706489384174,
    -0.011487137526273727,
    0.01713711768388748,
    0.003258270677179098,
    -0.03324822708964348,
    -0.005719305016100407,
    -0.0020554836373776197,
    -0.006766111124306917,
    0.002058949787169695,
    0.03566073253750801,
    0.002783395117148757,
    -0.00389952608384192,
    -0.021989861503243446,
    0.00541774183511734,
    0.00515777338296175,
    0.015057370066642761,
    0.010052111931145191,
    -0.007487090304493904,
    -0.006526940036565065,
    0.006461081560701132,
    0.007459360174834728,
    -0.0028596525080502033,
    -0.005247895605862141,
    0.016693437471985817,
    -0.009150887839496136,
    0.017677851021289825,
    -0.029865169897675514,
    -0.03848918899893761,
    -0.008242731913924217,
    -0.006727982312440872,
    0.016887547448277473,
    0.01622202806174755,
    0.03624306246638298,
    0.03471791371703148,
    -0.006492277607321739,
    0.031972646713256836,
    -0.019549624994397163,
    0.016402272507548332,
    -0.024360772222280502,
    -0.005095380824059248,
    1.2009998499706853e-05,
    -0.02154618129134178,
    0.0007192459306679666,
    -0.0049012708477675915,
    0.02405574358999729,
    0.01060671079903841,
    0.002034686040133238,
    0.002970572328194976,
    -0.0023951756302267313,
    0.009414322674274445,
    -0.00927567295730114,
    -0.003298132447525859,
    -0.0036360914818942547,
    -0.011639651842415333,
    0.010523521341383457,
    0.03560527414083481,
    0.011015728116035461,
    -0.009788677096366882,
    -0.016735032200813293,
    -0.00840217899531126,
    0.01989624835550785,
    -0.002131741028279066,
    -0.0024090404622256756,
    -0.035494353622198105,
    0.00010642456618370488,
    -0.016818223521113396,
    -0.0025424910709261894,
    0.01961894892156124,
    0.15440043807029724,
    0.01748374104499817,
    0.01809380203485489,
    0.00037998714833520353,
    0.0005671643884852529,
    -0.010897875763475895,
    -0.018634535372257233,
    0.02402801252901554,
    -0.02149072103202343,
    0.02341795340180397,
    0.020242873579263687,
    0.006242707837373018,
    -0.008020891807973385,
    0.0001351835671812296,
    0.00971935223788023,
    -0.00823579914867878,
    -0.028506401926279068,
    -0.02972652018070221,
    -0.0025355585385113955,
    -0.013996698893606663,
    -0.02476285770535469,
    0.006280836649239063,
    0.007611874956637621,
    -0.033442337065935135,
    0.02742493338882923,
    -0.011785234324634075,
    -0.009670824743807316,
    -0.015514914877712727,
    0.02519267238676548,
    0.0034003867767751217,
    0.003076292807236314,
    0.0040971022099256516,
    0.009338065050542355,
    -0.013150935061275959,
    -0.028326157480478287,
    -0.021560046821832657,
    0.002279056468978524,
    0.020118089392781258,
    0.02666235901415348,
    0.027591314166784286,
    -0.01814926043152809,
    -0.03188945725560188,
    -0.0026083497796207666,
    -0.049941662698984146,
    0.006284303031861782,
    -0.0059584761038422585,
    -0.007036478258669376,
    -0.008693343959748745,
    -0.003937654662877321,
    0.03064160980284214,
    -0.016762763261795044,
    0.012097196653485298,
    0.01971600390970707,
    0.010142234154045582,
    -0.013670871965587139,
    -0.022918814793229103,
    0.0015537445433437824,
    -0.0009298203513026237,
    -0.001424626912921667,
    0.01215265691280365,
    -0.009012238122522831,
    0.01977146416902542,
    -0.01576448418200016,
    0.0065754675306379795,
    -0.04675271734595299,
    0.0413176454603672,
    -0.006922092288732529,
    -0.009663891978561878,
    -0.014974180608987808,
    0.027896342799067497,
    -0.021116366609930992,
    -0.01986851915717125,
    -0.006388290319591761,
    -0.00012500147568061948,
    -0.006637860089540482,
    -0.016554787755012512,
    0.029061000794172287,
    0.0382673479616642,
    0.0006750512984581292,
    0.03713042289018631,
    -0.008111014030873775,
    0.014835530892014503,
    0.011896153911948204,
    -0.0007300779689103365,
    0.007729727309197187,
    -0.03471791371703148,
    0.02754971943795681,
    -0.0008782599470578134,
    -0.019785329699516296,
    -0.017178712412714958,
    0.007265250198543072,
    -0.02565021626651287,
    -0.008596288971602917,
    -0.049082037061452866,
    0.01227744109928608,
    0.019369378685951233,
    0.011944681406021118,
    0.007039944641292095,
    -0.020839067175984383,
    0.03860010951757431,
    -0.007140465546399355,
    0.0559590645134449,
    -0.008762668818235397,
    0.008838925510644913,
    -0.0035840978380292654,
    -0.005067650694400072,
    -0.038433730602264404,
    0.0024818317033350468,
    0.00795849971473217,
    -0.012457686476409435,
    0.017982881516218185,
    -0.032610438764095306,
    -0.021296611055731773,
    -0.018440425395965576,
    -0.0035598340909928083,
    0.004187224432826042,
    -0.006062463391572237,
    -0.005126576870679855,
    0.0035944965202361345,
    0.01576448418200016,
    -0.0012149190297350287,
    -0.021532315760850906,
    0.00955297239124775,
    -0.004114433191716671,
    0.002424638718366623,
    -0.02947695180773735,
    -0.020339928567409515,
    0.005227098241448402,
    -0.004152562003582716,
    -0.011826829053461552,
    0.026884200051426888,
    2.010693060583435e-05,
    0.03801777958869934,
    -0.004495720379054546,
    -0.004187224432826042,
    -0.03277681767940521,
    0.006804239936172962,
    -0.022447405382990837,
    0.0007127466960810125,
    0.017456011846661568,
    -0.032582707703113556,
    -0.005993138533085585,
    0.021255016326904297,
    -0.0040589733980596066,
    0.029560141265392303,
    -0.04364696145057678,
    -0.007327642757445574,
    -0.02323770895600319,
    0.004395199008285999,
    0.01123756729066372,
    -0.009067698381841183,
    -0.004842344671487808,
    0.0070468769408762455,
    0.0007170794997364283,
    0.02372298389673233,
    -0.005012190900743008,
    -0.0044922539964318275,
    -0.0014298262540251017,
    0.030558420345187187,
    0.015182155184447765,
    -0.02797953225672245,
    -0.006987950764596462,
    0.023930957540869713,
    -0.004488787613809109,
    -0.027161499485373497,
    -0.012270509265363216,
    -0.17558613419532776,
    -4.435710798134096e-05,
    0.008117946796119213,
    -0.0456712506711483,
    -0.020714282989501953,
    -0.03036431036889553,
    0.012984555214643478,
    -0.009712419472634792,
    -0.017164846882224083,
    -0.011514867655932903,
    0.03005927987396717,
    -3.766833833651617e-05,
    -0.013164800591766834,
    -0.021892806515097618,
    0.005916880909353495,
    -0.006384823936969042,
    0.018537480384111404,
    0.004481855314224958,
    0.03502294421195984,
    -0.011348487809300423,
    0.055820416659116745,
    -0.020284468308091164,
    0.03061387874186039,
    0.00098528026137501,
    -0.012256643734872341,
    -0.014696880243718624,
    -0.01647159829735756,
    0.014364121481776237,
    -0.018995024263858795,
    -0.005982739385217428,
    -0.013005352579057217,
    0.013247990049421787,
    0.03033657930791378,
    0.023487279191613197,
    0.003882194869220257,
    -0.010634440928697586,
    0.018176991492509842,
    -0.01383725181221962,
    -0.004748756065964699,
    0.030281120911240578,
    0.012478483840823174,
    0.027327878400683403,
    0.019147539511322975,
    -0.02078360691666603,
    -0.01428093109279871,
    0.0019254992948845029,
    0.006606663577258587,
    -0.02772996388375759,
    0.018911834806203842,
    -0.03202810883522034,
    0.01385111641138792,
    -0.031972646713256836,
    0.005206300411373377,
    0.001154259778559208,
    0.02405574358999729,
    -0.011175175197422504,
    0.0183988306671381,
    0.005667311139404774,
    0.012298238463699818,
    0.010211559012532234,
    0.011695112101733685,
    -0.02534518577158451,
    0.008658681064844131,
    -0.008166474290192127,
    -0.016540924087166786,
    -0.032527245581150055,
    -0.023473413661122322,
    -0.0006291235331445932,
    -0.013324247673153877,
    0.012027871794998646,
    0.0022270625922828913,
    -0.00346277910284698,
    0.011861491948366165,
    0.0002027753507718444,
    0.030807988718152046,
    0.013400505296885967,
    -0.028423212468624115,
    0.023944823071360588,
    0.03829507902264595,
    -0.00832592137157917,
    -0.018995024263858795,
    0.02225329540669918,
    -0.021407531574368477,
    0.012734985910356045,
    0.013539155013859272,
    -0.003968851175159216,
    -0.012228913605213165,
    -0.004831945989280939,
    0.002492230385541916,
    -0.00847843661904335,
    0.0073623051866889,
    -0.02164323627948761,
    -0.02617708593606949,
    -0.0114039471372962,
    -0.009116225875914097,
    -0.01680435799062252,
    -0.015279210172593594,
    0.000854862795677036,
    0.02311292476952076,
    -0.009573769755661488,
    -0.007923836819827557,
    -0.018995024263858795,
    -0.006974085699766874,
    -0.01821858622133732,
    0.020076492801308632,
    0.011715909466147423,
    -0.01888410560786724,
    -0.0015606769593432546,
    0.010357141494750977,
    -0.029976090416312218,
    -0.01268645841628313,
    -0.009338065050542355,
    0.03676993027329445,
    0.026315735653042793,
    -0.04350831359624863,
    0.0339692048728466,
    0.0002677674638107419,
    -0.005185503046959639,
    -0.0005823292303830385,
    -0.010038246400654316,
    0.026440519839525223,
    0.016637977212667465,
    -0.031140748411417007,
    0.012908297590911388,
    -0.014364121481776237,
    -0.024748992174863815,
    -0.07254158705472946,
    -0.01683208718895912,
    0.016485463827848434,
    -0.004870074801146984,
    -0.010142234154045582,
    0.009261807426810265,
    0.005639581475406885,
    0.01741441711783409,
    0.005019123200327158,
    -0.006093659438192844,
    -0.005677709821611643,
    0.017220307141542435,
    -0.02060336247086525,
    -0.025386782363057137,
    -0.003079758957028389,
    0.020339928567409515,
    -0.0075425500981509686,
    0.003273868700489402,
    0.01677662879228592,
    0.004312009084969759,
    -0.034052394330501556,
    -0.013608479872345924,
    -0.012637930922210217,
    0.004575443919748068,
    -0.023584334179759026,
    0.005663845222443342,
    -0.029643330723047256,
    0.030835719779133797,
    0.008097149431705475,
    0.002909912960603833,
    -0.004312009084969759,
    -0.002772996434941888,
    -0.019813058897852898,
    -0.014544365927577019,
    0.029976090416312218,
    0.0017547867028042674,
    -0.01726190187036991,
    -0.026288004592061043,
    0.02552543208003044,
    -0.010856281034648418,
    0.0019480299670249224,
    0.00438480032607913,
    0.027910208329558372,
    -0.013566884212195873,
    -0.011542596854269505,
    -0.01677662879228592,
    -0.020589496940374374,
    -0.0012712455354630947,
    0.034329693764448166,
    -0.037269070744514465,
    -0.025386782363057137,
    0.016124973073601723,
    -0.0051369755528867245,
    -0.024388503283262253,
    0.007681199815124273,
    -0.007195925340056419,
    -0.01253394316881895,
    0.01741441711783409,
    -0.030281120911240578,
    0.008762668818235397,
    -0.0017374554881826043,
    -0.040458016097545624,
    -0.018689995631575584,
    0.03721361234784126,
    0.005528661422431469,
    -0.009712419472634792,
    0.023126790300011635,
    0.02108863741159439,
    0.02146299183368683,
    -0.009511377662420273,
    -0.02262764982879162,
    0.02197599597275257,
    -0.013871913775801659,
    0.020797472447156906,
    -0.03036431036889553,
    -0.011043458245694637,
    0.006076328456401825,
    -0.0147246103733778,
    0.01601405441761017,
    -0.007348440121859312,
    -0.016138838604092598,
    0.0012547808000817895,
    -0.02571954019367695,
    -0.006048598326742649,
    0.007119668181985617,
    -0.001533813658170402,
    0.0184265598654747,
    0.014793935231864452,
    -0.0019982904195785522,
    -0.04733504727482796,
    0.019785329699516296,
    -0.004745290149003267,
    0.02552543208003044,
    0.016887547448277473,
    -0.012069466523826122,
    0.00014677383296657354,
    0.0054732016287744045,
    -0.0015034839743748307,
    -0.04009752720594406,
    0.003227074397727847,
    -0.04739050939679146,
    -0.007140465546399355,
    -0.08618472516536713,
    0.01659638248383999,
    0.018662264570593834,
    -0.0018960362067446113,
    0.009691622108221054,
    -0.002544224262237549,
    0.016027918085455894,
    -0.02727241814136505,
    0.003428116673603654,
    0.037296801805496216,
    -0.026717819273471832,
    -0.0007231454364955425,
    -0.007341507822275162,
    0.007591077592223883,
    0.004315475467592478,
    0.004357070662081242,
    0.039016056805849075,
    -0.003968851175159216,
    0.041650403290987015,
    0.005781697575002909,
    -0.0035026411060243845,
    -0.022447405382990837,
    0.0339692048728466,
    -0.004003513604402542,
    -0.0042565492913126945,
    0.014932584948837757,
    -0.006526940036565065,
    0.023501144722104073,
    -0.000138974777655676,
    -0.014960315078496933,
    0.01320639532059431,
    -0.026925794780254364,
    -0.0060797943733632565,
    0.03299865499138832,
    -0.010287816636264324,
    0.01781650073826313,
    -0.010169964283704758,
    -0.0009523509070277214,
    -0.00010864513023989275,
    0.028242968022823334,
    -0.028672782704234123,
    -0.028977811336517334,
    0.015903133898973465,
    -0.029005542397499084,
    0.024416232481598854,
    -0.007154330611228943,
    -0.018135396763682365,
    0.006679454818367958,
    0.0213382076472044,
    0.013975901529192924,
    0.03710269182920456,
    -0.0024870310444384813,
    -0.04148402437567711,
    -0.031029829755425453,
    0.0032028108835220337,
    -0.034634724259376526,
    0.0339692048728466,
    -0.018897969275712967,
    -0.001854441361501813,
    -0.0006273904000408947,
    0.02075587771832943,
    0.004922068677842617,
    0.008790398016571999,
    -0.02443009801208973,
    -0.012644863687455654,
    -0.041983164846897125,
    -0.059952180832624435,
    -0.015570374205708504,
    0.027286283671855927,
    -0.02197599597275257,
    -0.04117899388074875,
    -0.023612063378095627,
    0.010211559012532234,
    0.014197741635143757,
    0.03125166893005371,
    0.0013639675453305244,
    0.0037955387961119413,
    0.0113900825381279,
    -0.03510613366961479,
    0.023917093873023987,
    0.014835530892014503,
    -0.020076492801308632,
    -0.03507840260863304,
    0.0257750004529953,
    0.026343464851379395,
    0.009428187273442745,
    -0.028353888541460037,
    -0.002065882319584489,
    -0.002776462584733963,
    0.021421397104859352,
    -0.003022565972059965,
    -0.0013570351293310523,
    -2.7865364245371893e-05,
    -0.010336344130337238,
    0.02235035039484501,
    0.004405598156154156,
    -0.009989718906581402,
    -0.012901365756988525,
    0.0019965574610978365,
    0.007459360174834728,
    0.027993397787213326,
    -0.009469782933592796,
    0.010981065221130848,
    -0.014683015644550323,
    -0.007237520534545183,
    -0.0161665678024292,
    -0.011972411535680294,
    -0.023279303684830666,
    -0.018190855160355568,
    0.003036431036889553,
    -0.005296423099935055,
    -0.029393760487437248,
    0.005421207752078772,
    0.01705392822623253,
    -0.02883916161954403,
    0.017608527094125748,
    0.008561626076698303,
    0.012221981771290302,
    -0.019674409180879593,
    0.011140513233840466,
    -0.007091938052326441,
    0.0014549564803019166,
    0.04525529965758324,
    -0.032527245581150055,
    0.008929048664867878,
    0.006249640602618456,
    0.0183711014688015,
    -0.010495791211724281,
    0.010350208729505539,
    0.012228913605213165,
    -0.00019205166609026492,
    0.02050630748271942,
    -0.029671061784029007,
    -0.022170105949044228,
    0.0003708882723003626,
    0.013081610202789307,
    -0.005313754081726074,
    -0.00030849582981318235,
    0.01548718474805355,
    0.07570280134677887,
    -0.005459336563944817,
    -0.015667429193854332,
    -0.0016317350091412663,
    0.009116225875914097,
    -0.007833714596927166,
    0.022045321762561798,
    0.005573722533881664,
    0.0018249782733619213,
    -0.006935956887900829,
    0.008429909124970436,
    -0.000454078137408942,
    -0.023057464510202408,
    -0.01880091428756714,
    -0.031667619943618774,
    0.006890895776450634,
    -0.01179909985512495,
    0.0019081680802628398,
    0.014738475903868675,
    -0.00621497817337513,
    0.01652705855667591,
    0.03721361234784126,
    -0.013532222248613834,
    -0.033386874943971634,
    -0.03155669942498207,
    -0.0034645122941583395,
    0.03119620867073536,
    0.0014679549494758248,
    -0.021712562069296837,
    -0.026981255039572716,
    0.0169568732380867,
    0.02485991269350052,
    -0.027341743931174278,
    -0.026801010593771935,
    0.016138838604092598,
    0.00021620705956593156,
    -0.022322621196508408,
    -0.008069419302046299,
    0.010273951105773449,
    0.003729680087417364,
    0.0006243574316613376,
    0.006568535231053829,
    -0.012436888180673122,
    -0.012901365756988525,
    0.024319177493453026,
    -0.025608621537685394,
    0.004339739214628935,
    -0.007431630045175552,
    -0.025261996313929558
  ]
}
{
  "classifiers": [
    "development status :: 5 - production/stable",
    "environment :: console",
    "intended audience :: developers",
    "intended audience :: education",
    "intended audience :: science/research",
    "license :: osi approved :: apache software license",
    "operating system :: os independent",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "programming language :: unix shell",
    "topic :: database :: database engines/servers",
    "topic :: internet :: www/http :: indexing/search",
    "topic :: multimedia :: video",
    "topic :: scientific/engineering",
    "topic :: scientific/engineering :: artificial intelligence",
    "topic :: scientific/engineering :: image recognition",
    "topic :: scientific/engineering :: mathematics",
    "topic :: software development",
    "topic :: software development :: libraries",
    "topic :: software development :: libraries :: python modules"
  ],
  "description": "multimodal ai services & pipelines with cloud-native stack: grpc, kubernetes, docker, opentelemetry, prometheus, jaeger, etc.\n<p align=\"center\">\n<a href=\"https://docs.jina.ai\"><img src=\"https://github.com/jina-ai/jina/blob/master/docs/_static/logo-light.svg?raw=true\" alt=\"jina logo: build multimodal ai services via cloud native technologies \u00b7 model serving \u00b7 generative ai \u00b7 neural search \u00b7 cloud native\" width=\"150px\"></a>\n</p>\n\n<p align=\"center\">\n<b>build multimodal ai applications with cloud-native technologies</b>\n</p>\n\n<p align=center>\n<a href=\"https://pypi.org/project/jina/\"><img alt=\"pypi\" src=\"https://img.shields.io/pypi/v/jina?label=release&style=flat-square\"></a>\n<!--<a href=\"https://codecov.io/gh/jina-ai/jina\"><img alt=\"codecov branch\" src=\"https://img.shields.io/codecov/c/github/jina-ai/jina/master?&logo=codecov&logocolor=white&style=flat-square\"></a>-->\n<a href=\"https://discord.jina.ai\"><img src=\"https://img.shields.io/discord/1106542220112302130?logo=discord&logocolor=white&style=flat-square\"></a>\n<a href=\"https://pypistats.org/packages/jina\"><img alt=\"pypi - downloads from official pypistats\" src=\"https://img.shields.io/pypi/dm/jina?style=flat-square\"></a>\n<a href=\"https://github.com/jina-ai/jina/actions/workflows/cd.yml\"><img alt=\"github cd status\" src=\"https://github.com/jina-ai/jina/actions/workflows/cd.yml/badge.svg\"></a>\n</p>\n\n<!-- start jina-description -->\n\njina lets you build multimodal [**ai services**](#build-ai-models) and [**pipelines**](#build-a-pipeline) that communicate via grpc, http and websockets, then scale them up and deploy to production. you can focus on your logic and algorithms, without worrying about the infrastructure complexity.\n\n![](./.github/images/build-deploy.png)\n\njina provides a smooth pythonic experience for serving ml models transitioning from local deployment to advanced orchestration frameworks like docker-compose, kubernetes, or jina ai cloud. jina makes advanced solution engineering and cloud-native technologies accessible to every developer.\n\n- build and serve models for any [data type](https://docs.docarray.org/data_types/first_steps/) and any mainstream [deep learning framework](https://docarray.org/docarray/how_to/multimodal_training_and_serving/).\n- design high-performance services, with [easy scaling](https://docs.jina.ai/concepts/orchestration/scale-out/), duplex client-server streaming, batching, [dynamic batching](https://docs.jina.ai/concepts/serving/executor/dynamic-batching/), async/non-blocking data processing and any [protocol](https://docs.jina.ai/concepts/serving/gateway/#set-protocol-in-python).\n- serve [llm models while streaming their output](https://github.com/jina-ai/jina#streaming-for-llms).\n- docker container integration via [executor hub](https://cloud.jina.ai), opentelemetry/prometheus observability.\n- streamlined cpu/gpu hosting via [jina ai cloud](https://cloud.jina.ai).\n- deploy to your own cloud or system with our [kubernetes](https://docs.jina.ai/cloud-nativeness/k8s/) and [docker compose](https://docs.jina.ai/cloud-nativeness/docker-compose/) integration.\n\n<details>\n    <summary><strong>wait, how is jina different from fastapi?</strong></summary>\njina's value proposition may seem quite similar to that of fastapi. however, there are several fundamental differences:\n\n **data structure and communication protocols**\n  - fastapi communication relies on pydantic and jina relies on [docarray](https://github.com/docarray/docarray) allowing jina to support multiple protocols\n  to expose its services. the support for grpc protocol is specially useful for data intensive applications as for embedding services\n  where the embeddings and tensors can be more efficiently serialized.\n\n **advanced orchestration and scaling capabilities**\n  - jina allows you to easily containerize and orchestrate your services and models, providing concurrency and scalability.\n  - jina lets you deploy applications formed from multiple microservices that can be containerized and scaled independently.\n\n **journey to the cloud**\n  - jina provides a smooth transition from local development (using [docarray](https://github.com/docarray/docarray)) to local serving using [deployment](https://docs.jina.ai/concepts/orchestration/deployment/) and [flow](https://docs.jina.ai/concepts/orchestration/flow/)\n  to having production-ready services by using kubernetes capacity to orchestrate the lifetime of containers.\n  - by using [jina ai cloud](https://cloud.jina.ai) you have access to scalable and serverless deployments of your applications in one command.\n</details>\n\n<!-- end jina-description -->\n\n## [documentation](https://docs.jina.ai)\n\n## install \n\n```bash\npip install jina\n```\n\nfind more install options on [apple silicon](https://docs.jina.ai/get-started/install/apple-silicon-m1-m2/)/[windows](https://docs.jina.ai/get-started/install/windows/).\n\n## get started\n\n### basic concepts\n\njina has three fundamental layers:\n\n- data layer: [**basedoc**](https://docarray.docs.org/) and [**doclist**](https://docarray.docs.org/) (from [docarray](https://github.com/docarray/docarray)) are the input/output formats in jina.\n- serving layer: an [**executor**](https://docs.jina.ai/concepts/serving/executor/) is a python class that transforms and processes documents. by simply wrapping your models into an executor, you allow them to be served and scaled by jina. [**gateway**](https://docs.jina.ai/concepts/serving/gateway/) is the service making sure connecting all executors inside a flow.\n- orchestration layer:  [**deployment**](https://docs.jina.ai/concepts/orchestration/deployment) serves a single executor, while a [**flow**](https://docs.jina.ai/concepts/orchestration/flow/) serves executors chained into a pipeline.\n\n\n[the full glossary is explained here](https://docs.jina.ai/concepts/preliminaries/#).\n\n### serve ai models\n<!-- start build-ai-services -->\n\nlet's build a fast, reliable and scalable grpc-based ai service. in jina we call this an **[executor](https://docs.jina.ai/concepts/serving/executor/)**. our simple executor will wrap the [stablelm](https://huggingface.co/stabilityai/stablelm-base-alpha-3b) llm from stability ai. we'll then use a **deployment** to serve it.\n\n![](./.github/images/deployment-diagram.png)\n\n> **note**\n> a deployment serves just one executor. to combine multiple executors into a pipeline and serve that, use a [flow](#build-a-pipeline).\n\nlet's implement the service's logic:\n\n<table>\n<tr>\n<th><code>executor.py</code></th> \n<tr>\n<td>\n\n```python\nfrom jina import executor, requests\nfrom docarray import doclist, basedoc\n\nfrom transformers import pipeline\n\n\nclass prompt(basedoc):\n    text: str\n\n\nclass generation(basedoc):\n    prompt: str\n    text: str\n\n\nclass stablelm(executor):\n    def __init__(self, **kwargs):\n        super().__init__(**kwargs)\n        self.generator = pipeline(\n            'text-generation', model='stabilityai/stablelm-base-alpha-3b'\n        )\n\n    @requests\n    def generate(self, docs: doclist[prompt], **kwargs) -> doclist[generation]:\n        generations = doclist[generation]()\n        prompts = docs.text\n        llm_outputs = self.generator(prompts)\n        for prompt, output in zip(prompts, llm_outputs):\n            generations.append(generation(prompt=prompt, text=output))\n        return generations\n```\n\n</td>\n</tr>\n</table>\n\nthen we deploy it with either the python api or yaml:\n<div class=\"table-wrapper\">\n<table>\n<tr>\n<th> python api: <code>deployment.py</code> </th> \n<th> yaml: <code>deployment.yml</code> </th>\n</tr>\n<tr>\n<td>\n\n```python\nfrom jina import deployment\nfrom executor import stablelm\n\ndep = deployment(uses=stablelm, timeout_ready=-1, port=12345)\n\nwith dep:\n    dep.block()\n```\n\n</td>\n<td>\n\n```yaml\njtype: deployment\nwith:\n  uses: stablelm\n  py_modules:\n    - executor.py\n  timeout_ready: -1\n  port: 12345\n```\n\nand run the yaml deployment with the cli: `jina deployment --uses deployment.yml`\n\n</td>\n</tr>\n</table>\n</div>\n\nuse [jina client](https://docs.jina.ai/concepts/client/) to make requests to the service:\n\n```python\nfrom jina import client\nfrom docarray import doclist, basedoc\n\n\nclass prompt(basedoc):\n    text: str\n\n\nclass generation(basedoc):\n    prompt: str\n    text: str\n\n\nprompt = prompt(\n    text='suggest an interesting image generation prompt for a mona lisa variant'\n)\n\nclient = client(port=12345)  # use port from output above\nresponse = client.post(on='/', inputs=[prompt], return_type=doclist[generation])\n\nprint(response[0].text)\n```\n\n```text\na steampunk version of the mona lisa, incorporating mechanical gears, brass elements, and victorian era clothing details\n```\n\n<!-- end build-ai-services -->\n\n> **note**\n> in a notebook, you can't use `deployment.block()` and then make requests to the client. please refer to the colab link above for reproducible jupyter notebook code snippets.\n\n### build a pipeline\n\n<!-- start build-pipelines -->\n\nsometimes you want to chain microservices together into a pipeline. that's where a [flow](https://docs.jina.ai/concepts/orchestration/flow/) comes in.\n\na flow is a [dag](https://en.wikipedia.org/wiki/directed_acyclic_graph) pipeline, composed of a set of steps, it orchestrates a set of [executors](https://docs.jina.ai/concepts/serving/executor/) and a [gateway](https://docs.jina.ai/concepts/serving/gateway/) to offer an end-to-end service.\n\n> **note**\n> if you just want to serve a single executor, you can use a [deployment](#build-ai--ml-services).\n\nfor instance, let's combine [our stablelm language model](#build-ai--ml-services) with a stable diffusion image generation model. chaining these services together into a [flow](https://docs.jina.ai/concepts/orchestration/flow/) will give us a service that will generate images based on a prompt generated by the llm.\n\n\n<table>\n<tr>\n<th><code>text_to_image.py</code></th> \n<tr>\n<td>\n\n```python\nimport numpy as np\nfrom jina import executor, requests\nfrom docarray import basedoc, doclist\nfrom docarray.documents import imagedoc\n\n\nclass generation(basedoc):\n    prompt: str\n    text: str\n\n\nclass texttoimage(executor):\n    def __init__(self, **kwargs):\n        super().__init__(**kwargs)\n        from diffusers import stablediffusionpipeline\n        import torch\n\n        self.pipe = stablediffusionpipeline.from_pretrained(\n            \"compvis/stable-diffusion-v1-4\", torch_dtype=torch.float16\n        ).to(\"cuda\")\n\n    @requests\n    def generate_image(self, docs: doclist[generation], **kwargs) -> doclist[imagedoc]:\n        result = doclist[imagedoc]()\n        images = self.pipe(\n            docs.text\n        ).images  # image here is in [pil format](https://pillow.readthedocs.io/en/stable/)\n        result.tensor = np.array(images)\n        return result\n```\n\n</td>\n</tr>\n</table>\n\n\n![](./.github/images/flow-diagram.png)\n\nbuild the flow with either python or yaml:\n\n<div class=\"table-wrapper\">\n<table>\n<tr>\n<th> python api: <code>flow.py</code> </th> \n<th> yaml: <code>flow.yml</code> </th>\n</tr>\n<tr>\n<td>\n\n```python\nfrom jina import flow\nfrom executor import stablelm\nfrom text_to_image import texttoimage\n\nflow = (\n    flow(port=12345)\n    .add(uses=stablelm, timeout_ready=-1)\n    .add(uses=texttoimage, timeout_ready=-1)\n)\n\nwith flow:\n    flow.block()\n```\n\n</td>\n<td>\n\n```yaml\njtype: flow\nwith:\n    port: 12345\nexecutors:\n  - uses: stablelm\n    timeout_ready: -1\n    py_modules:\n      - executor.py\n  - uses: texttoimage\n    timeout_ready: -1\n    py_modules:\n      - text_to_image.py\n```\n\nthen run the yaml flow with the cli: `jina flow --uses flow.yml`\n\n</td>\n</tr>\n</table>\n</div>\n\nthen, use [jina client](https://docs.jina.ai/concepts/client/) to make requests to the flow:\n\n```python\nfrom jina import client\nfrom docarray import doclist, basedoc\nfrom docarray.documents import imagedoc\n\n\nclass prompt(basedoc):\n    text: str\n\n\nprompt = prompt(\n    text='suggest an interesting image generation prompt for a mona lisa variant'\n)\n\nclient = client(port=12345)  # use port from output above\nresponse = client.post(on='/', inputs=[prompt], return_type=doclist[imagedoc])\n\nresponse[0].display()\n```\n\n![](./.github/images/mona-lisa.png)\n\n<!-- end build-pipelines -->\n\n### easy scalability and concurrency\n\nwhy not just use standard python to build that service and pipeline? jina accelerates time to market of your application by making it more scalable and cloud-native. jina also handles the infrastructure complexity in production and other day-2 operations so that you can focus on the data application itself.\n\nincrease your application's throughput with scalability features out of the box, like [replicas](https://docs.jina.ai/concepts/orchestration/scale-out/#replicate-executors), [shards](https://docs.jina.ai/concepts/orchestration/scale-out/#customize-polling-behaviors) and [dynamic batching](https://docs.jina.ai/concepts/serving/executor/dynamic-batching/).\n\nlet's scale a stable diffusion executor deployment with replicas and dynamic batching:\n\n![](./.github/images/scaled-deployment.png)\n\n* create two replicas, with [a gpu assigned for each](https://docs.jina.ai/concepts/orchestration/scale-out/#replicate-on-multiple-gpus).\n* enable dynamic batching to process incoming parallel requests together with the same model inference.\n\n\n<div class=\"table-wrapper\">\n<table>\n<tr>\n<th> normal deployment </th> \n<th> scaled deployment </th>\n</tr>\n<tr>\n<td>\n\n```yaml\njtype: deployment\nwith:\n  uses: texttoimage\n  timeout_ready: -1\n  py_modules:\n    - text_to_image.py\n```\n\n</td>\n<td>\n\n```yaml\njtype: deployment\nwith:\n  uses: texttoimage\n  timeout_ready: -1\n  py_modules:\n    - text_to_image.py\n  env:\n   cuda_visible_devices: rr\n  replicas: 2\n  uses_dynamic_batching: # configure dynamic batching\n    /default:\n      preferred_batch_size: 10\n      timeout: 200\n```\n\n</td>\n</tr>\n</table>\n</div>\n\nassuming your machine has two gpus, using the scaled deployment yaml will give better throughput compared to the normal deployment.\n\nthese features apply to both [deployment yaml](https://docs.jina.ai/concepts/orchestration/yaml-spec/#example-yaml) and [flow yaml](https://docs.jina.ai/concepts/orchestration/yaml-spec/#example-yaml). thanks to the yaml syntax, you can inject deployment configurations regardless of executor code.\n\n## deploy to the cloud\n\n### containerize your executor\n\nin order to deploy your solutions to the cloud, you need to containerize your services. jina provides the [executor hub](https://docs.jina.ai/concepts/serving/executor/hub/create-hub-executor/), the perfect tool\nto streamline this process taking a lot of the troubles with you. it also lets you share these executors publicly or privately.\n\nyou just need to structure your executor in a folder:\n\n```shell script\ntexttoimage/\n\u251c\u2500\u2500 executor.py\n\u251c\u2500\u2500 config.yml\n\u251c\u2500\u2500 requirements.txt\n```\n<div class=\"table-wrapper\">\n<table>\n<tr>\n<th> <code>config.yml</code> </th>\n<th> <code>requirements.txt</code> </th>\n</tr>\n<tr>\n<td>\n\n```yaml\njtype: texttoimage\npy_modules:\n  - executor.py\nmetas:\n  name: texttoimage\n  description: text to image generation executor based on stablediffusion\n  url:\n  keywords: []\n```\n\n</td>\n<td>\n\n```requirements.txt\ndiffusers\naccelerate\ntransformers\n```\n\n</td>\n</tr>\n</table>\n</div>\n\n\nthen push the executor to the hub by doing: `jina hub push texttoimage`.\n\nthis will give you a url that you can use in your `deployment` and `flow` to use the pushed executors containers.\n\n\n```yaml\njtype: flow\nwith:\n    port: 12345\nexecutors:\n  - uses: jinai+docker://<user-id>/stablelm\n  - uses: jinai+docker://<user-id>/texttoimage\n```\n\n\n### get on the fast lane to cloud-native\n\nusing kubernetes with jina is easy:\n\n```bash\njina export kubernetes flow.yml ./my-k8s\nkubectl apply -r -f my-k8s\n```\n\nand so is docker compose:\n\n```bash\njina export docker-compose flow.yml docker-compose.yml\ndocker-compose up\n```\n\n> **note**\n> you can also export deployment yaml to [kubernetes](https://docs.jina.ai/concepts/serving/executor/serve/#serve-via-kubernetes) and [docker compose](https://docs.jina.ai/concepts/serving/executor/serve/#serve-via-docker-compose).\n\nthat's not all. we also support [opentelemetry, prometheus, and jaeger](https://docs.jina.ai/cloud-nativeness/opentelemetry/).\n\nwhat cloud-native technology is still challenging to you? [tell us](https://github.com/jina-ai/jina/issues) and we'll handle the complexity and make it easy for you.\n\n### deploy to jcloud\n\nyou can also deploy a flow to jcloud, where you can easily enjoy autoscaling, monitoring and more with a single command. \n\nfirst, turn the `flow.yml` file into a [jcloud-compatible yaml](https://docs.jina.ai/yaml-spec/) by specifying resource requirements and using containerized hub executors.\n\nthen, use `jina cloud deploy` command to deploy to the cloud:\n\n```shell\nwget https://raw.githubusercontent.com/jina-ai/jina/master/.github/getting-started/jcloud-flow.yml\njina cloud deploy jcloud-flow.yml\n```\n\n> **warning**\n>\n> make sure to delete/clean up the flow once you are done with this tutorial to save resources and credits.\n\nread more about [deploying flows to jcloud](https://docs.jina.ai/concepts/jcloud/#deploy).\n\n### streaming for llms\n<!-- start llm-streaming-intro -->\nlarge language models can power a wide range of applications from chatbots to assistants and intelligent systems.\nhowever, these models can be heavy and slow and your users want systems that are both intelligent _and_ fast!\n\nlarge language models work by turning your questions into tokens and then generating new token one at a \ntime until it decides that generation should stop.\nthis means you want to **stream** the output tokens generated by a large language model to the client. \nin this tutorial, we will discuss how to achieve this with streaming endpoints in jina.\n<!-- end llm-streaming-intro -->\n\n#### service schemas\n<!-- start llm-streaming-schemas -->\nthe first step is to define the streaming service schemas, as you would do in any other service framework.\nthe input to the service is the prompt and the maximum number of tokens to generate, while the output is simply the \ntoken id:\n```python\nfrom docarray import basedoc\n\n\nclass promptdocument(basedoc):\n    prompt: str\n    max_tokens: int\n\n\nclass modeloutputdocument(basedoc):\n    token_id: int\n    generated_text: str\n```\n<!-- end llm-streaming-schemas -->\n\n#### service initialization\n<!-- start llm-streaming-init -->\nour service depends on a large language model. as an example, we will use the `gpt2` model. this is how you would load \nsuch a model in your executor\n```python\nfrom jina import executor, requests\nfrom transformers import gpt2tokenizer, gpt2lmheadmodel\nimport torch\n\ntokenizer = gpt2tokenizer.from_pretrained('gpt2')\n\n\nclass tokenstreamingexecutor(executor):\n    def __init__(self, **kwargs):\n        super().__init__(**kwargs)\n        self.model = gpt2lmheadmodel.from_pretrained('gpt2')\n```\n<!-- end llm-streaming-init -->\n\n\n#### implement the streaming endpoint\n<!-- start llm-streaming-endpoint -->\nour streaming endpoint accepts a `promptdocument` as input and streams `modeloutputdocument`s. to stream a document back to \nthe client, use the `yield` keyword in the endpoint implementation. therefore, we use the model to generate \nup to `max_tokens` tokens and yield them until the generation stops: \n```python\nclass tokenstreamingexecutor(executor):\n    ...\n\n    @requests(on='/stream')\n    async def task(self, doc: promptdocument, **kwargs) -> modeloutputdocument:\n        input = tokenizer(doc.prompt, return_tensors='pt')\n        input_len = input['input_ids'].shape[1]\n        for _ in range(doc.max_tokens):\n            output = self.model.generate(**input, max_new_tokens=1)\n            if output[0][-1] == tokenizer.eos_token_id:\n                break\n            yield modeloutputdocument(\n                token_id=output[0][-1],\n                generated_text=tokenizer.decode(\n                    output[0][input_len:], skip_special_tokens=true\n                ),\n            )\n            input = {\n                'input_ids': output,\n                'attention_mask': torch.ones(1, len(output[0])),\n            }\n```\n\nlearn more about [streaming endpoints](https://docs.jina.ai/concepts/serving/executor/add-endpoints/#streaming-endpoints) from the `executor` documentation.\n<!-- end llm-streaming-endpoint -->\n\n\n#### serve and send requests\n<!-- start llm-streaming-serve -->\n\nthe final step is to serve the executor and send requests using the client.\nto serve the executor using grpc:\n```python\nfrom jina import deployment\n\nwith deployment(uses=tokenstreamingexecutor, port=12345, protocol='grpc') as dep:\n    dep.block()\n```\n\nto send requests from a client:\n```python\nimport asyncio\nfrom jina import client\n\n\nasync def main():\n    client = client(port=12345, protocol='grpc', asyncio=true)\n    async for doc in client.stream_doc(\n        on='/stream',\n        inputs=promptdocument(prompt='what is the capital of france ?', max_tokens=10),\n        return_type=modeloutputdocument,\n    ):\n        print(doc.generated_text)\n\n\nasyncio.run(main())\n```\n\n```text\nthe\nthe capital\nthe capital of\nthe capital of france\nthe capital of france is\nthe capital of france is paris\nthe capital of france is paris.\n```\n\n<!-- end llm-streaming-serve -->\n\n<!-- start support-pitch -->\n\n## support\n\n- join our [discord community](https://discord.jina.ai) and chat with other community members about ideas.\n- subscribe to the latest video tutorials on our [youtube channel](https://youtube.com/c/jina-ai)\n\n## join us\n\njina is backed by [jina ai](https://jina.ai) and licensed under [apache-2.0](./license).\n\n<!-- end support-pitch -->\n",
  "docs_url": null,
  "keywords": "jina cloud-native cross-modal multimodal neural-search query search index elastic neural-network encoding embedding serving docker container image video audio deep-learning mlops",
  "license": "apache 2.0",
  "name": "jina",
  "package_url": "https://pypi.org/project/jina/",
  "project_url": "https://pypi.org/project/jina/",
  "project_urls": {
    "Documentation": "https://docs.jina.ai",
    "Download": "https://github.com/jina-ai/jina/tags",
    "Homepage": "https://github.com/jina-ai/jina/",
    "Source": "https://github.com/jina-ai/jina/",
    "Tracker": "https://github.com/jina-ai/jina/issues"
  },
  "release_url": "https://pypi.org/project/jina/3.23.2/",
  "requires_dist": [
    "numpy",
    "protobuf >=3.19.0",
    "urllib3 <2.0.0,>=1.25.9",
    "fastapi >=0.76.0",
    "jcloud >=0.0.35",
    "opentelemetry-sdk <1.20.0,>=1.14.0",
    "opentelemetry-api >=1.12.0",
    "jina-hubble-sdk >=0.30.4",
    "docker",
    "pyyaml >=5.3.1",
    "python-multipart",
    "aiofiles",
    "grpcio <=1.57.0,>=1.46.0",
    "opentelemetry-exporter-otlp >=1.12.0",
    "pathspec",
    "pydantic <2.0.0",
    "opentelemetry-instrumentation-fastapi >=0.33b0",
    "prometheus-client >=0.12.0",
    "aiohttp",
    "packaging >=20.0",
    "opentelemetry-instrumentation-grpc >=0.35b0",
    "grpcio-reflection <=1.57.0,>=1.46.0",
    "opentelemetry-exporter-prometheus >=0.33b0",
    "docarray >=0.16.4",
    "uvicorn[standard] <=0.23.1",
    "opentelemetry-exporter-otlp-proto-grpc >=1.13.0",
    "opentelemetry-instrumentation-aiohttp-client >=0.33b0",
    "grpcio-health-checking <=1.57.0,>=1.46.0",
    "websockets",
    "requests",
    "filelock",
    "uvloop ; platform_system != \"Windows\"",
    "Pillow ; extra == 'pillow'",
    "aiofiles ; extra == 'aiofiles'",
    "aiohttp ; extra == 'aiohttp'",
    "numpy ; extra == 'all'",
    "requests-mock ; extra == 'all'",
    "protobuf >=3.19.0 ; extra == 'all'",
    "strawberry-graphql >=0.96.0 ; extra == 'all'",
    "urllib3 <2.0.0,>=1.25.9 ; extra == 'all'",
    "fastapi >=0.76.0 ; extra == 'all'",
    "jcloud >=0.0.35 ; extra == 'all'",
    "opentelemetry-sdk <1.20.0,>=1.14.0 ; extra == 'all'",
    "scipy >=1.6.1 ; extra == 'all'",
    "opentelemetry-api >=1.12.0 ; extra == 'all'",
    "jina-hubble-sdk >=0.30.4 ; extra == 'all'",
    "docker ; extra == 'all'",
    "sgqlc ; extra == 'all'",
    "pyyaml >=5.3.1 ; extra == 'all'",
    "python-multipart ; extra == 'all'",
    "prometheus-api-client >=0.5.1 ; extra == 'all'",
    "coverage ==6.2 ; extra == 'all'",
    "pytest-reraise ; extra == 'all'",
    "pytest-timeout ; extra == 'all'",
    "aiofiles ; extra == 'all'",
    "grpcio <=1.57.0,>=1.46.0 ; extra == 'all'",
    "pytest-repeat ; extra == 'all'",
    "pytest-custom-exit-code ; extra == 'all'",
    "opentelemetry-exporter-otlp >=1.12.0 ; extra == 'all'",
    "pathspec ; extra == 'all'",
    "pydantic <2.0.0 ; extra == 'all'",
    "opentelemetry-instrumentation-fastapi >=0.33b0 ; extra == 'all'",
    "torch ; extra == 'all'",
    "prometheus-client >=0.12.0 ; extra == 'all'",
    "flaky ; extra == 'all'",
    "aiohttp ; extra == 'all'",
    "packaging >=20.0 ; extra == 'all'",
    "portforward <0.4.3,>=0.2.4 ; extra == 'all'",
    "tensorflow >=2.0 ; extra == 'all'",
    "pytest-asyncio <0.23.0 ; extra == 'all'",
    "opentelemetry-instrumentation-grpc >=0.35b0 ; extra == 'all'",
    "Pillow ; extra == 'all'",
    "grpcio-reflection <=1.57.0,>=1.46.0 ; extra == 'all'",
    "black ==22.3.0 ; extra == 'all'",
    "psutil ; extra == 'all'",
    "opentelemetry-exporter-prometheus >=0.33b0 ; extra == 'all'",
    "jsonschema ; extra == 'all'",
    "mock ; extra == 'all'",
    "docarray >=0.16.4 ; extra == 'all'",
    "uvicorn[standard] <=0.23.1 ; extra == 'all'",
    "kubernetes >=18.20.0 ; extra == 'all'",
    "filelock ; extra == 'all'",
    "pytest-kind ==22.11.1 ; extra == 'all'",
    "opentelemetry-exporter-otlp-proto-grpc >=1.13.0 ; extra == 'all'",
    "grpcio-health-checking <=1.57.0,>=1.46.0 ; extra == 'all'",
    "opentelemetry-instrumentation-aiohttp-client >=0.33b0 ; extra == 'all'",
    "websockets ; extra == 'all'",
    "opentelemetry-test-utils >=0.33b0 ; extra == 'all'",
    "pytest-lazy-fixture ; extra == 'all'",
    "pytest-mock ; extra == 'all'",
    "pytest ; extra == 'all'",
    "pytest-cov ==3.0.0 ; extra == 'all'",
    "requests ; extra == 'all'",
    "bs4 ; extra == 'all'",
    "watchfiles >=0.18.0 ; extra == 'all'",
    "uvloop ; (platform_system != \"Windows\") and extra == 'all'",
    "black ==22.3.0 ; extra == 'black'",
    "bs4 ; extra == 'bs4'",
    "sgqlc ; extra == 'cicd'",
    "strawberry-graphql >=0.96.0 ; extra == 'cicd'",
    "jsonschema ; extra == 'cicd'",
    "torch ; extra == 'cicd'",
    "bs4 ; extra == 'cicd'",
    "portforward <0.4.3,>=0.2.4 ; extra == 'cicd'",
    "tensorflow >=2.0 ; extra == 'cicd'",
    "numpy ; extra == 'core'",
    "grpcio-health-checking <=1.57.0,>=1.46.0 ; extra == 'core'",
    "jina-hubble-sdk >=0.30.4 ; extra == 'core'",
    "protobuf >=3.19.0 ; extra == 'core'",
    "pyyaml >=5.3.1 ; extra == 'core'",
    "opentelemetry-instrumentation-grpc >=0.35b0 ; extra == 'core'",
    "grpcio-reflection <=1.57.0,>=1.46.0 ; extra == 'core'",
    "urllib3 <2.0.0,>=1.25.9 ; extra == 'core'",
    "grpcio <=1.57.0,>=1.46.0 ; extra == 'core'",
    "docarray >=0.16.4 ; extra == 'core'",
    "pydantic <2.0.0 ; extra == 'core'",
    "jcloud >=0.0.35 ; extra == 'core'",
    "packaging >=20.0 ; extra == 'core'",
    "opentelemetry-api >=1.12.0 ; extra == 'core'",
    "coverage ==6.2 ; extra == 'coverage'",
    "strawberry-graphql >=0.96.0 ; extra == 'devel'",
    "fastapi >=0.76.0 ; extra == 'devel'",
    "opentelemetry-sdk <1.20.0,>=1.14.0 ; extra == 'devel'",
    "docker ; extra == 'devel'",
    "sgqlc ; extra == 'devel'",
    "python-multipart ; extra == 'devel'",
    "aiofiles ; extra == 'devel'",
    "opentelemetry-exporter-otlp >=1.12.0 ; extra == 'devel'",
    "pathspec ; extra == 'devel'",
    "opentelemetry-instrumentation-fastapi >=0.33b0 ; extra == 'devel'",
    "prometheus-client >=0.12.0 ; extra == 'devel'",
    "aiohttp ; extra == 'devel'",
    "opentelemetry-exporter-prometheus >=0.33b0 ; extra == 'devel'",
    "uvicorn[standard] <=0.23.1 ; extra == 'devel'",
    "opentelemetry-exporter-otlp-proto-grpc >=1.13.0 ; extra == 'devel'",
    "opentelemetry-instrumentation-aiohttp-client >=0.33b0 ; extra == 'devel'",
    "websockets ; extra == 'devel'",
    "requests ; extra == 'devel'",
    "filelock ; extra == 'devel'",
    "watchfiles >=0.18.0 ; extra == 'devel'",
    "uvloop ; (platform_system != \"Windows\") and extra == 'devel'",
    "docarray >=0.16.4 ; extra == 'docarray'",
    "docker ; extra == 'docker'",
    "fastapi >=0.76.0 ; extra == 'fastapi'",
    "filelock ; extra == 'filelock'",
    "flaky ; extra == 'flaky'",
    "grpcio <=1.57.0,>=1.46.0 ; extra == 'grpcio'",
    "grpcio-health-checking <=1.57.0,>=1.46.0 ; extra == 'grpcio-health-checking'",
    "grpcio-reflection <=1.57.0,>=1.46.0 ; extra == 'grpcio-reflection'",
    "jcloud >=0.0.35 ; extra == 'jcloud'",
    "jina-hubble-sdk >=0.30.4 ; extra == 'jina-hubble-sdk'",
    "jsonschema ; extra == 'jsonschema'",
    "kubernetes >=18.20.0 ; extra == 'kubernetes'",
    "mock ; extra == 'mock'",
    "numpy ; extra == 'numpy'",
    "opentelemetry-api >=1.12.0 ; extra == 'opentelemetry-api'",
    "opentelemetry-exporter-otlp >=1.12.0 ; extra == 'opentelemetry-exporter-otlp'",
    "opentelemetry-exporter-otlp-proto-grpc >=1.13.0 ; extra == 'opentelemetry-exporter-otlp-proto-grpc'",
    "opentelemetry-exporter-prometheus >=0.33b0 ; extra == 'opentelemetry-exporter-prometheus'",
    "opentelemetry-instrumentation-aiohttp-client >=0.33b0 ; extra == 'opentelemetry-instrumentation-aiohttp-client'",
    "opentelemetry-instrumentation-fastapi >=0.33b0 ; extra == 'opentelemetry-instrumentation-fastapi'",
    "opentelemetry-instrumentation-grpc >=0.35b0 ; extra == 'opentelemetry-instrumentation-grpc'",
    "opentelemetry-sdk <1.20.0,>=1.14.0 ; extra == 'opentelemetry-sdk'",
    "opentelemetry-test-utils >=0.33b0 ; extra == 'opentelemetry-test-utils'",
    "packaging >=20.0 ; extra == 'packaging'",
    "pathspec ; extra == 'pathspec'",
    "opentelemetry-exporter-otlp-proto-grpc >=1.13.0 ; extra == 'perf'",
    "opentelemetry-instrumentation-aiohttp-client >=0.33b0 ; extra == 'perf'",
    "uvloop ; extra == 'perf'",
    "opentelemetry-exporter-prometheus >=0.33b0 ; extra == 'perf'",
    "opentelemetry-exporter-otlp >=1.12.0 ; extra == 'perf'",
    "opentelemetry-instrumentation-fastapi >=0.33b0 ; extra == 'perf'",
    "prometheus-client >=0.12.0 ; extra == 'perf'",
    "opentelemetry-sdk <1.20.0,>=1.14.0 ; extra == 'perf'",
    "portforward <0.4.3,>=0.2.4 ; extra == 'portforward'",
    "prometheus-api-client >=0.5.1 ; extra == 'prometheus-api-client'",
    "prometheus-client >=0.12.0 ; extra == 'prometheus_client'",
    "protobuf >=3.19.0 ; extra == 'protobuf'",
    "psutil ; extra == 'psutil'",
    "pydantic <2.0.0 ; extra == 'pydantic'",
    "pytest ; extra == 'pytest'",
    "pytest-asyncio <0.23.0 ; extra == 'pytest-asyncio'",
    "pytest-cov ==3.0.0 ; extra == 'pytest-cov'",
    "pytest-custom-exit-code ; extra == 'pytest-custom_exit_code'",
    "pytest-kind ==22.11.1 ; extra == 'pytest-kind'",
    "pytest-lazy-fixture ; extra == 'pytest-lazy-fixture'",
    "pytest-mock ; extra == 'pytest-mock'",
    "pytest-repeat ; extra == 'pytest-repeat'",
    "pytest-reraise ; extra == 'pytest-reraise'",
    "pytest-timeout ; extra == 'pytest-timeout'",
    "python-multipart ; extra == 'python-multipart'",
    "pyyaml >=5.3.1 ; extra == 'pyyaml'",
    "requests ; extra == 'requests'",
    "requests-mock ; extra == 'requests-mock'",
    "scipy >=1.6.1 ; extra == 'scipy'",
    "sgqlc ; extra == 'sgqlc'",
    "opentelemetry-instrumentation-aiohttp-client >=0.33b0 ; extra == 'standard'",
    "docker ; extra == 'standard'",
    "websockets ; extra == 'standard'",
    "python-multipart ; extra == 'standard'",
    "uvloop ; extra == 'standard'",
    "requests ; extra == 'standard'",
    "aiofiles ; extra == 'standard'",
    "fastapi >=0.76.0 ; extra == 'standard'",
    "opentelemetry-exporter-prometheus >=0.33b0 ; extra == 'standard'",
    "opentelemetry-exporter-otlp >=1.12.0 ; extra == 'standard'",
    "pathspec ; extra == 'standard'",
    "uvicorn[standard] <=0.23.1 ; extra == 'standard'",
    "opentelemetry-instrumentation-fastapi >=0.33b0 ; extra == 'standard'",
    "prometheus-client >=0.12.0 ; extra == 'standard'",
    "opentelemetry-sdk <1.20.0,>=1.14.0 ; extra == 'standard'",
    "filelock ; extra == 'standard'",
    "aiohttp ; extra == 'standard'",
    "opentelemetry-exporter-otlp-proto-grpc >=1.13.0 ; extra == 'standrad'",
    "strawberry-graphql >=0.96.0 ; extra == 'strawberry-graphql'",
    "tensorflow >=2.0 ; extra == 'tensorflow'",
    "requests-mock ; extra == 'test'",
    "scipy >=1.6.1 ; extra == 'test'",
    "prometheus-api-client >=0.5.1 ; extra == 'test'",
    "coverage ==6.2 ; extra == 'test'",
    "pytest-reraise ; extra == 'test'",
    "pytest-timeout ; extra == 'test'",
    "pytest-repeat ; extra == 'test'",
    "pytest-custom-exit-code ; extra == 'test'",
    "flaky ; extra == 'test'",
    "pytest-asyncio <0.23.0 ; extra == 'test'",
    "Pillow ; extra == 'test'",
    "black ==22.3.0 ; extra == 'test'",
    "psutil ; extra == 'test'",
    "mock ; extra == 'test'",
    "kubernetes >=18.20.0 ; extra == 'test'",
    "pytest-kind ==22.11.1 ; extra == 'test'",
    "opentelemetry-test-utils >=0.33b0 ; extra == 'test'",
    "pytest-lazy-fixture ; extra == 'test'",
    "pytest-mock ; extra == 'test'",
    "pytest ; extra == 'test'",
    "pytest-cov ==3.0.0 ; extra == 'test'",
    "torch ; extra == 'torch'",
    "urllib3 <2.0.0,>=1.25.9 ; extra == 'urllib3'",
    "uvicorn[standard] <=0.23.1 ; extra == 'uvicorn_standard_'",
    "uvloop ; extra == 'uvloop'",
    "watchfiles >=0.18.0 ; extra == 'watchfiles'",
    "websockets ; extra == 'websockets'"
  ],
  "requires_python": "",
  "summary": "multimodal ai services & pipelines with cloud-native stack: grpc, kubernetes, docker, opentelemetry, prometheus, jaeger, etc.",
  "version": "3.23.2",
  "releases": [],
  "developers": [
    "hello@jina.ai",
    "jina_ai"
  ],
  "kwds": "jina multimodal multimodal_training_and_serving jinai cloud",
  "license_kwds": "apache 2.0",
  "libtype": "pypi",
  "id": "pypi_jina",
  "homepage": "https://github.com/jina-ai/jina/",
  "release_count": 2398,
  "dependency_ids": [
    "pypi_aiofiles",
    "pypi_aiohttp",
    "pypi_black",
    "pypi_bs4",
    "pypi_coverage",
    "pypi_docarray",
    "pypi_docker",
    "pypi_fastapi",
    "pypi_filelock",
    "pypi_flaky",
    "pypi_grpcio",
    "pypi_grpcio_health_checking",
    "pypi_grpcio_reflection",
    "pypi_jcloud",
    "pypi_jina_hubble_sdk",
    "pypi_jsonschema",
    "pypi_kubernetes",
    "pypi_mock",
    "pypi_numpy",
    "pypi_opentelemetry_api",
    "pypi_opentelemetry_exporter_otlp",
    "pypi_opentelemetry_exporter_otlp_proto_grpc",
    "pypi_opentelemetry_exporter_prometheus",
    "pypi_opentelemetry_instrumentation_aiohttp_client",
    "pypi_opentelemetry_instrumentation_fastapi",
    "pypi_opentelemetry_instrumentation_grpc",
    "pypi_opentelemetry_sdk",
    "pypi_opentelemetry_test_utils",
    "pypi_packaging",
    "pypi_pathspec",
    "pypi_pillow",
    "pypi_portforward",
    "pypi_prometheus_api_client",
    "pypi_prometheus_client",
    "pypi_protobuf",
    "pypi_psutil",
    "pypi_pydantic",
    "pypi_pytest",
    "pypi_pytest_asyncio",
    "pypi_pytest_cov",
    "pypi_pytest_custom_exit_code",
    "pypi_pytest_kind",
    "pypi_pytest_lazy_fixture",
    "pypi_pytest_mock",
    "pypi_pytest_repeat",
    "pypi_pytest_reraise",
    "pypi_pytest_timeout",
    "pypi_python_multipart",
    "pypi_pyyaml",
    "pypi_requests",
    "pypi_requests_mock",
    "pypi_scipy",
    "pypi_sgqlc",
    "pypi_strawberry_graphql",
    "pypi_tensorflow",
    "pypi_torch",
    "pypi_urllib3",
    "pypi_uvicorn",
    "pypi_uvloop",
    "pypi_watchfiles",
    "pypi_websockets"
  ],
  "documentation_summary": "Jina AI's GitHub repository, jina-ai/jina, focuses on building multimodal AI applications using a cloud-native stack. It allows developers to create AI services and pipelines that support various data types and deep learning frameworks, facilitating easy scaling and deployment. Jina provides a Pythonic experience for serving ML models, supporting gRPC, HTTP, and WebSocket communication. It differentiates itself from FastAPI by offering advanced orchestration, scaling capabilities, and support for multiple communication protocols, including gRPC. The repository includes detailed documentation on installing Jina, basic concepts, serving AI models, building pipelines, scalability, concurrency, cloud deployment, and streaming for large language models (LLMs). It emphasizes ease of use in transitioning from local development to production with Kubernetes and Jina AI Cloud, aiming to make advanced engineering and cloud-native technologies accessible to all developers.",
  "embedding": [
    -0.020812656730413437,
    0.0009838647674769163,
    0.004562346264719963,
    -0.0024100332520902157,
    -0.001668216660618782,
    0.012892981059849262,
    0.0014958226820454001,
    -0.0017753099091351032,
    -0.0014287804951891303,
    -0.046473242342472076,
    0.006056427489966154,
    0.014850262552499771,
    -0.023807784542441368,
    -0.002013004617765546,
    -0.01100535411387682,
    0.004450899548828602,
    0.020366869866847992,
    -0.011597414501011372,
    0.0016821475001052022,
    -0.002918508369475603,
    0.016856301575899124,
    0.015505011193454266,
    -0.005269335582852364,
    -0.02623174898326397,
    -0.02063155546784401,
    0.024810804054141045,
    0.021314166486263275,
    -0.03309964761137962,
    -0.0024605325888842344,
    0.0038065987173467875,
    0.01996287703514099,
    -0.0016386136412620544,
    -0.01876482553780079,
    0.00623404560610652,
    0.004510105587542057,
    0.005941498093307018,
    0.02191319316625595,
    0.0015480632428079844,
    0.03507782518863678,
    0.004099145997315645,
    0.011095904745161533,
    -0.007731609512120485,
    -0.0005110872443765402,
    -0.008344565518200397,
    -0.02248435653746128,
    0.015379633754491806,
    -0.008177395910024643,
    -0.005182268097996712,
    -0.011228247545659542,
    -0.00714651495218277,
    0.011346659623086452,
    0.024142125621438026,
    0.0030943851452320814,
    -0.002577203093096614,
    -0.006557937245815992,
    -0.004736481700092554,
    -0.018569793552160263,
    0.015212464146316051,
    0.0029150256887078285,
    0.008414220064878464,
    0.006916656158864498,
    0.006735555361956358,
    -0.01883447915315628,
    -5.108423920319183e-06,
    -0.007787332870066166,
    -0.005603675730526447,
    -0.01654982380568981,
    0.020896241068840027,
    0.0012259128270670772,
    -0.020436525344848633,
    0.035022102296352386,
    0.018235454335808754,
    0.006669383961707354,
    -0.023584891110658646,
    0.02630140259861946,
    -0.015003501437604427,
    -0.011402382515370846,
    -0.0023560512345284224,
    -0.008894833736121655,
    0.011047146283090115,
    0.012523814104497433,
    -0.018945926800370216,
    0.012154647149145603,
    0.025117283686995506,
    0.014822401106357574,
    -0.009284896776080132,
    -0.015491080470383167,
    0.0035453957971185446,
    0.016117967665195465,
    -0.007898779585957527,
    0.00363246351480484,
    -0.004760860465466976,
    0.017413534224033356,
    0.02288835123181343,
    -0.00424541998654604,
    0.026830773800611496,
    -0.0015158482128754258,
    0.024406811222434044,
    0.004259350709617138,
    -0.00856049358844757,
    -0.016466239467263222,
    -0.0003626368707045913,
    -0.019628535956144333,
    -0.018040422350168228,
    -0.02320875972509384,
    -0.01809614524245262,
    0.007989330217242241,
    0.0033329506404697895,
    0.027179045602679253,
    0.015240325592458248,
    -0.02061762474477291,
    0.02231718599796295,
    -0.008191326633095741,
    -0.05154406279325485,
    0.016772717237472534,
    -0.025967063382267952,
    0.015769697725772858,
    -0.0024030678905546665,
    0.010016265325248241,
    -0.014794539660215378,
    0.0038692874368280172,
    0.014557715505361557,
    0.0074529931880533695,
    0.0059066712856292725,
    0.005272818263620138,
    0.014515922404825687,
    -0.002336896490305662,
    -0.018235454335808754,
    -0.0071291010826826096,
    -0.02215001732110977,
    0.01100535411387682,
    -0.00653355848044157,
    0.0033834497444331646,
    0.010329709388315678,
    -0.026677535846829414,
    -0.00820525735616684,
    0.007118653040379286,
    0.007362442556768656,
    -0.013631314970552921,
    -0.009674959816038609,
    -0.008525666780769825,
    0.025284452363848686,
    -0.018151868134737015,
    -0.0047329990193247795,
    -0.008504770696163177,
    0.034715622663497925,
    0.010838184505701065,
    -0.012600434012711048,
    0.015505011193454266,
    0.0263849887996912,
    0.025883479043841362,
    -0.02776413969695568,
    -0.03630373626947403,
    -0.011158592998981476,
    0.00647783512249589,
    0.007682851515710354,
    0.019684260711073875,
    0.024699358269572258,
    -0.01801256090402603,
    0.02371026948094368,
    0.001912006177008152,
    0.02160671353340149,
    -0.025451622903347015,
    0.0008959263795986772,
    0.01425123680382967,
    0.036665938794612885,
    -0.0016168467700481415,
    -0.0007392045808956027,
    -0.03549575060606003,
    -0.02201070822775364,
    0.00909683108329773,
    0.03011845052242279,
    -0.04123524948954582,
    0.006874863523989916,
    0.0035941535606980324,
    0.0027304422110319138,
    0.02377992309629917,
    0.00991178397089243,
    -0.024169987067580223,
    0.00525888754054904,
    0.04377065971493721,
    0.006059910170733929,
    -0.020116114988923073,
    0.02589740976691246,
    -0.018931996077299118,
    -0.013505937531590462,
    -0.008866972289979458,
    -0.006498731207102537,
    -0.013303941115736961,
    0.032681722193956375,
    0.02371026948094368,
    0.029839834198355675,
    -0.0038274950347840786,
    0.0011815082980319858,
    -0.586209237575531,
    -0.020575832575559616,
    0.0045310016721487045,
    -0.03619229048490524,
    0.022944074124097824,
    0.005203164182603359,
    0.0003918045258615166,
    0.0040712845511734486,
    -0.003393898019567132,
    0.031400084495544434,
    -0.030424928292632103,
    -0.0012302662944421172,
    -0.02021363191306591,
    0.005850947927683592,
    0.0014853745233267546,
    -0.027987033128738403,
    0.022358978167176247,
    -0.023570960387587547,
    -0.02288835123181343,
    -0.013262148015201092,
    -0.03307178616523743,
    0.032040905207395554,
    -0.015532873570919037,
    -0.0006438654381781816,
    -0.02209429256618023,
    -0.008267946541309357,
    0.013471110723912716,
    -0.0014897278742864728,
    0.007501750718802214,
    0.004719067830592394,
    -0.05636413022875786,
    0.02745766192674637,
    0.024880459532141685,
    -0.025479484349489212,
    0.06430470198392868,
    0.00012581278861034662,
    -0.02483866550028324,
    0.05488746240735054,
    -0.0010552601888775826,
    0.02298586629331112,
    -0.027624832466244698,
    -0.014794539660215378,
    0.01632693037390709,
    -0.0029341806657612324,
    0.01315766666084528,
    0.016675200313329697,
    0.023724200204014778,
    0.004374280106276274,
    0.000798410561401397,
    -0.0007261444116011262,
    -0.0007370278472080827,
    0.010740668512880802,
    0.019391711801290512,
    -0.03176228702068329,
    0.013505937531590462,
    -0.010051092132925987,
    0.024128194898366928,
    -0.013464145362377167,
    -0.00400163047015667,
    -0.010378466919064522,
    0.012837258167564869,
    0.02468542754650116,
    -0.01376365777105093,
    -0.012872084975242615,
    -0.026942221447825432,
    0.0005245827487669885,
    0.0031535911839455366,
    -0.03911776468157768,
    0.012677053920924664,
    -0.013101943768560886,
    0.021578852087259293,
    0.011576518416404724,
    0.023807784542441368,
    -0.022790834307670593,
    0.03758537396788597,
    0.047782741487026215,
    0.022526148706674576,
    0.035189270973205566,
    -0.0013321354053914547,
    0.020840518176555634,
    0.018973788246512413,
    -0.007355477195233107,
    0.0028453716076910496,
    -0.026858637109398842,
    0.019029511138796806,
    0.010211297310888767,
    0.0009464255999773741,
    -0.014460199512541294,
    0.003597636241465807,
    -0.02347344532608986,
    0.013415386900305748,
    0.03596939891576767,
    -0.016912024468183517,
    -0.03580222651362419,
    0.008581389673054218,
    0.015031363815069199,
    -0.0061051854863762856,
    -0.006018117535859346,
    -0.014104963280260563,
    -0.01916882023215294,
    -0.0004005113150924444,
    -0.01712098717689514,
    0.002862785244360566,
    0.015491080470383167,
    0.002187140053138137,
    0.011172523722052574,
    -0.024880459532141685,
    -0.011339694261550903,
    -0.00941723957657814,
    -0.01486419327557087,
    -0.00869283638894558,
    -0.020520109683275223,
    -0.01452985405921936,
    -0.01242629811167717,
    0.008623182773590088,
    -0.027624832466244698,
    0.03192945942282677,
    0.0029411460272967815,
    0.012084993533790112,
    -0.0018336452776566148,
    0.008664974942803383,
    -0.02485259622335434,
    -0.0021662437357008457,
    0.01209892425686121,
    0.010650117881596088,
    0.00696541415527463,
    0.009946610778570175,
    -0.027179045602679253,
    -0.03257027640938759,
    0.008191326633095741,
    -0.006456938572227955,
    -0.013359664008021355,
    0.017761806026101112,
    0.0015715715708211064,
    0.03318323194980621,
    0.0026782017666846514,
    0.026747189462184906,
    0.01851407065987587,
    0.017162779346108437,
    -0.005349438171833754,
    -0.008010226301848888,
    0.01234271377325058,
    0.036582354456186295,
    0.0003478353610262275,
    -0.014961709268391132,
    -0.013833312317728996,
    -0.03443700820207596,
    0.011465071700513363,
    -0.004416072275489569,
    -0.02128630504012108,
    -0.025103352963924408,
    -0.004012078512459993,
    -0.030424928292632103,
    0.014599507674574852,
    0.006951482966542244,
    -0.004099145997315645,
    -0.0073206499218940735,
    -0.021244512870907784,
    -0.026691466569900513,
    -0.029421908780932426,
    0.013115874491631985,
    0.021411683410406113,
    -0.0015837609535083175,
    0.019614605233073235,
    -0.02972838655114174,
    0.0023525685537606478,
    -0.010845149867236614,
    0.0340748056769371,
    -0.015881143510341644,
    -0.010608325712382793,
    -0.007153480313718319,
    -0.0178593210875988,
    0.007181341759860516,
    -0.0026329264510422945,
    0.0035262408200651407,
    -0.010190400294959545,
    -0.018221523612737656,
    0.003848391119390726,
    0.005944980774074793,
    0.0007910098065622151,
    -0.016619477421045303,
    0.010058057494461536,
    -0.01858372427523136,
    -0.024128194898366928,
    0.03613656759262085,
    0.008539597503840923,
    0.030954299494624138,
    0.023988885805010796,
    -0.011409347876906395,
    0.0190713033080101,
    0.011889961548149586,
    0.027318352833390236,
    -0.011395417153835297,
    0.04262833297252655,
    -0.026858637109398842,
    -0.006133046932518482,
    0.0166334081441164,
    0.020478317514061928,
    -0.01294870488345623,
    0.010294881649315357,
    0.00041596582741476595,
    0.007641059346497059,
    -0.004621552303433418,
    -0.007891814224421978,
    -0.019753914326429367,
    -0.0018911098595708609,
    0.009229173883795738,
    -0.013025323860347271,
    0.010698876343667507,
    -0.003931976389139891,
    0.028112411499023438,
    0.005816120654344559,
    -0.010232193395495415,
    -0.011820307932794094,
    0.009312758222222328,
    0.020924104377627373,
    -0.010949631221592426,
    -0.003956355154514313,
    -0.03346185013651848,
    0.0064708697609603405,
    0.0023839129135012627,
    0.018709102645516396,
    0.0014592541847378016,
    -0.006192252971231937,
    -0.0019137475173920393,
    0.014710954390466213,
    0.003426983719691634,
    0.004046905320137739,
    0.025967063382267952,
    -0.023974955081939697,
    -0.009124692529439926,
    0.045999594032764435,
    5.215897908783518e-05,
    -0.010991423390805721,
    0.015254256315529346,
    0.0067564514465630054,
    0.016870232298970222,
    -0.013324837200343609,
    0.03805902227759361,
    -0.030592098832130432,
    0.01720457337796688,
    0.013387525454163551,
    0.022191809490323067,
    -0.03053637407720089,
    0.039340659976005554,
    -0.0012990497052669525,
    0.01590900495648384,
    0.001651673810556531,
    -0.013547730632126331,
    -0.006039014086127281,
    -0.0025806857738643885,
    0.005042959935963154,
    -0.002256794134154916,
    0.001054389518685639,
    0.02184353768825531,
    -0.02777807042002678,
    -0.004259350709617138,
    -0.007108204998075962,
    0.009368482045829296,
    0.007432096637785435,
    0.016368722543120384,
    0.018862340599298477,
    0.03566291928291321,
    0.003925010561943054,
    0.03237524256110191,
    -0.028377097100019455,
    -0.021063411608338356,
    -0.030007002875208855,
    0.012112854979932308,
    -0.011576518416404724,
    -0.00495240930467844,
    -0.03789185360074043,
    0.03315537050366402,
    -0.042906951159238815,
    0.010343640111386776,
    0.012635260820388794,
    0.023264482617378235,
    0.0470861978828907,
    -0.019990738481283188,
    0.012454160489141941,
    -0.006934069562703371,
    -0.04204323887825012,
    0.028613921254873276,
    -0.003355588298290968,
    0.0043847281485795975,
    -0.026663605123758316,
    -0.031205054372549057,
    0.003587188199162483,
    -0.011715826578438282,
    0.003137919120490551,
    -0.00682262284681201,
    0.00036677258322015405,
    -0.014933847822248936,
    -0.0010726737091317773,
    -0.02111913450062275,
    0.01267008762806654,
    0.03343398869037628,
    -0.01497563999146223,
    0.004586725030094385,
    -0.007731609512120485,
    0.014543784782290459,
    0.0015672181034460664,
    -0.013707934878766537,
    -0.0003920221934095025,
    0.04034367948770523,
    -0.0215091984719038,
    -0.021620644256472588,
    0.0062270802445709705,
    -0.0055305385030806065,
    -0.02039473131299019,
    0.007599266711622477,
    -0.004423038102686405,
    -0.018931996077299118,
    -0.02297193557024002,
    0.03393549844622612,
    -0.0030142830219119787,
    0.015337841585278511,
    -0.010538671165704727,
    0.019294196739792824,
    0.013485041446983814,
    -0.006763416808098555,
    -0.011715826578438282,
    -0.007675886154174805,
    0.028042756021022797,
    0.0446622334420681,
    0.026245679706335068,
    -0.017079195007681847,
    0.00363246351480484,
    -0.0280148945748806,
    -0.005666364450007677,
    -0.02143954485654831,
    0.0021784331183880568,
    0.005231026094406843,
    0.011715826578438282,
    -0.0202972162514925,
    0.009883922524750233,
    0.015936866402626038,
    0.007787332870066166,
    0.026259610429406166,
    0.00700372364372015,
    -0.007731609512120485,
    -0.011200386099517345,
    0.0019102648366242647,
    0.015797559171915054,
    0.040650155395269394,
    -0.009758545085787773,
    -0.006018117535859346,
    0.018973788246512413,
    0.04326914995908737,
    0.017093125730752945,
    0.03184587135910988,
    0.004266316071152687,
    -0.0011014060582965612,
    -0.032208073884248734,
    0.015505011193454266,
    -0.007059447001665831,
    0.008860006928443909,
    -0.006157426163554192,
    -0.014021378010511398,
    0.03028561919927597,
    0.007188307121396065,
    0.010859080590307713,
    -0.033406127244234085,
    0.00868587102741003,
    0.011910857632756233,
    0.03273744508624077,
    -0.01600652188062668,
    -0.030424928292632103,
    -0.005767362657934427,
    -0.024991905316710472,
    -0.03485492989420891,
    0.011283970437943935,
    -0.022930143401026726,
    0.006369871087372303,
    0.04070587828755379,
    0.01973998360335827,
    -0.029672663658857346,
    -0.01599259115755558,
    0.03516140952706337,
    0.02103555016219616,
    0.010141642764210701,
    -0.027499454095959663,
    0.00410262867808342,
    -0.025953132659196854,
    -0.016299068927764893,
    -0.03092643804848194,
    -0.004203627351671457,
    -0.016354791820049286,
    0.01344324927777052,
    -0.0075226472690701485,
    -0.028279580175876617,
    0.013847243040800095,
    -0.02022756263613701,
    -0.01461343839764595,
    -0.010503844358026981,
    -0.026844706386327744,
    -0.030424928292632103,
    -0.00908986572176218,
    0.014501991681754589,
    0.00844208151102066,
    0.016340861096978188,
    -0.0015898557612672448,
    0.012962635606527328,
    -0.014641299843788147,
    0.020506178960204124,
    -0.0292268767952919,
    0.002906318986788392,
    -0.03758537396788597,
    -0.01087997667491436,
    -0.0255769994109869,
    -0.003278968622907996,
    0.007773402146995068,
    -0.0036150498781353235,
    0.0009725459385663271,
    -0.0010108556598424911,
    0.01486419327557087,
    0.017357811331748962,
    -0.010664048604667187,
    0.021941054612398148,
    0.031455811113119125,
    0.016382653266191483,
    -0.01639658398926258,
    0.0017221985617652535,
    -0.025939201936125755,
    -0.021063411608338356,
    -0.04471795633435249,
    -0.00905503798276186,
    -0.027248699218034744,
    0.011548656038939953,
    -0.021718161180615425,
    0.00555840041488409,
    -0.009479928761720657,
    -0.018541932106018066,
    -0.0068086921237409115,
    -0.0031483671627938747,
    -0.0072788577526807785,
    -0.011680998839437962,
    -0.010301847010850906,
    -0.0022045534569770098,
    0.011346659623086452,
    -0.0007126489072106779,
    0.004746929742395878,
    0.002103555016219616,
    0.012565607205033302,
    0.027973102405667305,
    -0.022595802322030067,
    0.03092643804848194,
    0.026858637109398842,
    0.020436525344848633,
    0.023724200204014778,
    0.0047747911885380745,
    -0.014947778545320034,
    -0.038922734558582306,
    0.004513588268309832,
    0.013868139125406742,
    0.004085215274244547,
    -0.0071291010826826096,
    -0.00812167301774025,
    0.008038087747991085,
    -0.026008855551481247,
    -0.027889518067240715,
    -0.01283029280602932,
    -0.006432559806853533,
    -0.02240077219903469,
    -0.025479484349489212,
    -0.012321817688643932,
    0.0019973325543105602,
    -0.01026702020317316,
    -0.005182268097996712,
    -0.027067597955465317,
    -0.02663574367761612,
    0.020269354805350304,
    -0.0017291640397161245,
    0.009967507794499397,
    -0.002714770147576928,
    -0.0032998649403452873,
    -0.012398436665534973,
    -0.03415839001536369,
    -0.012697950005531311,
    0.021732091903686523,
    0.0070768604055047035,
    0.0021836573723703623,
    0.031065747141838074,
    0.032040905207395554,
    0.030731406062841415,
    -0.006237528286874294,
    0.024392880499362946,
    0.00835849717259407,
    -0.010580464266240597,
    -0.032681722193956375,
    -0.008497805334627628,
    -0.007418165914714336,
    -0.004788721911609173,
    -0.007773402146995068,
    0.024866528809070587,
    0.021704230457544327,
    0.007480854634195566,
    -0.006167874205857515,
    -0.006112150847911835,
    0.009849095717072487,
    -0.007355477195233107,
    -0.009187380783259869,
    -0.02483866550028324,
    -0.03906204178929329,
    -0.021160928532481194,
    0.0009028917993418872,
    -0.012377540580928326,
    0.00958441011607647,
    -0.020325077697634697,
    -0.004081732593476772,
    0.03215235099196434,
    -0.0162433460354805,
    0.04424430802464485,
    0.007550508715212345,
    0.03672166168689728,
    -0.018124006688594818,
    0.031790148466825485,
    0.027011875063180923,
    0.015727905556559563,
    -0.008052018471062183,
    0.008052018471062183,
    -0.031706564128398895,
    -0.004259350709617138,
    0.02240077219903469,
    0.00023051166499499232,
    0.012565607205033302,
    0.005116096697747707,
    0.006679832004010677,
    0.001964246854186058,
    0.01933598890900612,
    -0.0047329990193247795,
    -0.024295363575220108,
    -0.0009568737586960196,
    -0.024699358269572258,
    -0.04271191731095314,
    -0.04441148042678833,
    -0.01590900495648384,
    -0.02986769564449787,
    0.01343628391623497,
    0.009688890539109707,
    0.017079195007681847,
    0.002162761054933071,
    -0.00783609040081501,
    -0.005805672612041235,
    0.006857450120151043,
    -0.01778966747224331,
    0.03190159425139427,
    0.017998630180954933,
    0.010657083243131638,
    0.020116114988923073,
    0.01412585936486721,
    -0.005655915942043066,
    -0.00958441011607647,
    -0.0022219670936465263,
    -0.014697023667395115,
    -0.0036150498781353235,
    0.01982356794178486,
    -0.020854448899626732,
    -0.016424445435404778,
    0.014111928641796112,
    0.009020211175084114,
    -0.02453218773007393,
    -0.013812416233122349,
    0.02053404040634632,
    0.02191319316625595,
    -0.007125618401914835,
    -0.02752731554210186,
    -0.024169987067580223,
    0.01039936300367117,
    0.023515237495303154,
    -0.011520794592797756,
    0.009563513100147247,
    -0.002457049675285816,
    -0.015156741254031658,
    -0.015449288301169872,
    0.021801745519042015,
    0.03198518231511116,
    0.004308108706027269,
    0.012105889618396759,
    -0.007891814224421978,
    0.009514755569398403,
    -0.014104963280260563,
    -0.01461343839764595,
    0.012370575219392776,
    0.015950797125697136,
    0.046891167759895325,
    -0.007829125039279461,
    -0.003420018358156085,
    0.05382872000336647,
    -0.001343454234302044,
    -0.002841888926923275,
    0.006035531405359507,
    0.018444417044520378,
    0.035440027713775635,
    -0.02185746841132641,
    0.017678219825029373,
    -0.01632693037390709,
    -0.020339008420705795,
    0.023501306772232056,
    -0.03396335989236832,
    -0.011750653386116028,
    0.01590900495648384,
    -0.0005202293395996094,
    -0.00045449327444657683,
    -0.00424541998654604,
    -0.022289324551820755,
    -0.013749727047979832,
    -0.016939885914325714,
    -0.0032093145418912172,
    -0.015282118692994118,
    -0.0069305868819355965,
    0.0016551564913243055,
    0.02794524095952511,
    -0.02776413969695568,
    -0.01654982380568981,
    -0.00029820678173564374,
    -0.03209662809967995,
    0.002399585209786892,
    0.02369633875787258,
    -0.008149534463882446,
    -0.006585799157619476,
    0.030062727630138397,
    -0.0014923400012776256,
    0.017747875303030014,
    -0.0038274950347840786,
    -0.007578370627015829,
    -0.02697008289396763,
    0.0348827950656414,
    0.0025684963911771774,
    -0.00032476242631673813,
    0.020840518176555634,
    -0.00287323328666389,
    -0.029756247997283936,
    -0.0056106410920619965,
    -0.008212222717702389,
    0.022428633645176888,
    0.008644078858196735,
    0.020408663898706436,
    -0.007000240962952375,
    0.0017178452108055353,
    -0.021007688716053963,
    -0.015421426855027676,
    0.001166706788353622,
    0.01989322155714035,
    0.0004257609252817929,
    -0.007536577992141247,
    0.02185746841132641,
    -0.0026660121511667967,
    0.016034383326768875,
    -0.010698876343667507,
    0.021244512870907784,
    -0.0014897278742864728,
    -0.03761323541402817,
    -0.029923418536782265,
    0.011945685371756554,
    -0.012210370972752571,
    0.0018615068402141333,
    0.029589079320430756,
    0.014139790087938309,
    -0.025967063382267952,
    -0.03449273109436035,
    0.017413534224033356,
    0.020283285528421402,
    0.003219762584194541,
    0.005680295173078775,
    0.00525888754054904,
    0.02093803510069847,
    -0.004106111358851194,
    0.0013391008833423257,
    -0.03321109339594841,
    -0.032291658222675323,
    0.005795224569737911,
    -0.03566291928291321,
    -0.016020452603697777,
    -0.00313617754727602,
    0.05505463108420372,
    0.013450214639306068,
    -0.02453218773007393,
    -0.024657566100358963,
    -0.01400048192590475,
    -0.016354791820049286,
    -0.015212464146316051,
    -0.009890887886285782,
    0.016215484589338303,
    0.001835386618040502,
    0.032681722193956375,
    0.010566532611846924,
    0.006871380843222141,
    -0.013652211055159569,
    0.030313482508063316,
    -0.004914099350571632,
    0.007627128157764673,
    0.0033712603617459536,
    -0.024810804054141045,
    -0.0008658880251459777,
    -0.021885329857468605,
    -0.032932478934526443,
    -0.01982356794178486,
    0.016034383326768875,
    0.008581389673054218,
    -0.004572794307023287,
    0.025047628208994865,
    -0.01590900495648384,
    -0.023013727739453316,
    0.0009037624695338309,
    -0.0036080845165997744,
    0.01473881583660841,
    0.015853282064199448,
    0.01851407065987587,
    -0.03270958364009857,
    -0.0028836813289672136,
    -0.0006569256074726582,
    -0.01802649162709713,
    0.007682851515710354,
    0.014641299843788147,
    0.01641051471233368,
    0.004255868028849363,
    0.004064319189637899,
    -0.015449288301169872,
    0.004255868028849363,
    -0.003998147789388895,
    -0.009159519337117672,
    0.02897612191736698,
    -0.01649410091340542,
    0.014850262552499771,
    0.04034367948770523,
    -0.008713732473552227,
    -0.009883922524750233,
    -0.013728830963373184,
    0.008539597503840923,
    -0.01100535411387682,
    -0.017747875303030014,
    0.027555176988244057,
    -0.030814992263913155,
    -0.005979808047413826,
    -0.023403791710734367,
    0.021314166486263275,
    -0.01809614524245262,
    -0.015323910862207413,
    -0.00687834620475769,
    0.019029511138796806,
    -0.004468312952667475,
    -0.019140956923365593,
    -0.0062967343255877495,
    -0.017162779346108437,
    0.006091254763305187,
    0.015156741254031658,
    0.006112150847911835,
    -0.00550267705693841,
    -0.016521962359547615,
    0.002686908468604088,
    -0.03922921046614647,
    0.023013727739453316,
    0.021411683410406113,
    0.006042496766895056,
    -0.03020203486084938,
    0.00483399722725153,
    0.018151868134737015,
    -0.015546804293990135,
    0.008553528226912022,
    0.19703763723373413,
    0.02964480221271515,
    0.016758786514401436,
    0.01429302990436554,
    0.0013129805447533727,
    -0.006791278719902039,
    0.010608325712382793,
    0.01706526428461075,
    -0.01876482553780079,
    0.020255424082279205,
    -0.0030108001083135605,
    -0.032486692070961,
    0.0053146108984947205,
    -0.007017654832452536,
    0.029533354565501213,
    -0.024406811222434044,
    -0.033656880259513855,
    -0.07316470891237259,
    -0.014850262552499771,
    -0.0017013023607432842,
    0.015658250078558922,
    -0.00880428310483694,
    0.004433486144989729,
    -0.019391711801290512,
    -0.014697023667395115,
    0.008017191663384438,
    0.004872307181358337,
    -0.003341657342389226,
    0.024615773931145668,
    0.0077385748736560345,
    -0.021564921364188194,
    0.02729049138724804,
    0.008267946541309357,
    0.011646172031760216,
    -0.018723033368587494,
    -0.009876957163214684,
    -0.01087997667491436,
    -0.0018824031576514244,
    0.010065022855997086,
    0.011332728900015354,
    0.01356166135519743,
    -0.00941723957657814,
    0.003251106943935156,
    -0.011597414501011372,
    0.003432207740843296,
    -0.007418165914714336,
    -0.029282599687576294,
    -0.009619236923754215,
    0.01473881583660841,
    0.012189474888145924,
    -0.02834923565387726,
    0.009354551322758198,
    0.015087086707353592,
    0.005025546066462994,
    0.007473889272660017,
    0.0009220466599799693,
    -0.029672663658857346,
    0.02312517538666725,
    0.021732091903686523,
    0.02736014686524868,
    -0.026273541152477264,
    0.02046438679099083,
    -0.01088694203644991,
    0.0251590758562088,
    -0.05132117122411728,
    -0.003444397123530507,
    -0.030759267508983612,
    -0.0011788962874561548,
    -0.0012398436665534973,
    -0.00835849717259407,
    -0.014724885113537312,
    -0.013220355845987797,
    -0.028474612161517143,
    -0.01671699434518814,
    -0.0031135401222854853,
    -0.025103352963924408,
    0.03922921046614647,
    0.02589740976691246,
    0.030564237385988235,
    0.0503181517124176,
    0.006133046932518482,
    0.009159519337117672,
    0.0034774828236550093,
    0.01222430169582367,
    -0.013505937531590462,
    -0.012050165794789791,
    0.03307178616523743,
    -0.030480651184916496,
    -0.020102184265851974,
    -0.025674516335129738,
    -0.020673349499702454,
    -0.018137937411665916,
    0.0014157204423099756,
    -0.017817528918385506,
    -0.002013004617765546,
    0.009856061078608036,
    0.02631533332169056,
    0.00884607620537281,
    -0.0050777867436409,
    0.008581389673054218,
    -0.02621781826019287,
    0.05446953698992729,
    0.035997260361909866,
    -0.014683092944324017,
    -0.02362668514251709,
    0.01681450940668583,
    -0.012314852327108383,
    -0.00337996706366539,
    0.012440229766070843,
    -0.027151184156537056,
    -0.0038588393945246935,
    -0.019015580415725708,
    0.008156499825417995,
    -0.024657566100358963,
    -0.012997462414205074,
    0.010232193395495415,
    -0.00978640653192997,
    0.006530075799673796,
    0.028781089931726456,
    0.002577203093096614,
    -0.012746707536280155,
    -0.01752498187124729,
    -0.009006280452013016,
    -0.001520201563835144,
    -0.030982160940766335,
    -0.022554010152816772,
    0.0005167466588318348,
    0.011680998839437962,
    -0.011660102754831314,
    0.0027443731669336557,
    0.011660102754831314,
    -0.04159745201468468,
    0.01809614524245262,
    0.0015280377119779587,
    0.0022358978167176247,
    0.011646172031760216,
    0.007933606393635273,
    0.009626202285289764,
    -0.004416072275489569,
    0.006300217006355524,
    -0.03669380024075508,
    0.0011458105873316526,
    -0.001266834675334394,
    -0.008741594851016998,
    0.014091032557189465,
    -0.015658250078558922,
    0.022275393828749657,
    0.017956838011741638,
    -0.004691206384450197,
    -0.017566774040460587,
    0.00684003671631217,
    -0.013380560092628002,
    0.011583483777940273,
    0.006853967439383268,
    0.014892054721713066,
    -0.02379385381937027,
    -0.02453218773007393,
    -0.006254941690713167,
    0.019363850355148315,
    0.004318556748330593,
    -0.027471592649817467,
    -0.019363850355148315,
    -0.004053871147334576,
    0.007285823114216328,
    -0.03148367255926132,
    -0.02663574367761612,
    -0.17586277425289154,
    0.0032737446017563343,
    -0.002450084313750267,
    -0.01615975983440876,
    0.024560049176216125,
    -0.0012293956242501736,
    -0.008281877264380455,
    -0.00418273126706481,
    -0.007627128157764673,
    -0.024991905316710472,
    0.024016747251152992,
    0.0017848872812464833,
    -0.01234271377325058,
    -0.024615773931145668,
    -0.002390878275036812,
    -0.012816362082958221,
    -0.0018371279584243894,
    0.016744855791330338,
    0.03524499386548996,
    -0.00653355848044157,
    0.022205740213394165,
    -0.030257757753133774,
    0.0013260407140478492,
    -0.01851407065987587,
    -0.017650358378887177,
    -0.010629221796989441,
    -0.01278849970549345,
    0.016703063622117043,
    -0.00032519776141270995,
    -0.026733258739113808,
    -0.018291177228093147,
    -0.026607882231473923,
    0.03173442557454109,
    0.004022526554763317,
    0.03184587135910988,
    0.01486419327557087,
    0.016131898388266563,
    -0.010315777733922005,
    -0.009187380783259869,
    0.024309294298291206,
    0.031316500157117844,
    0.026050647720694542,
    -0.0018127489602193236,
    -0.01851407065987587,
    -0.008156499825417995,
    -0.006996758282184601,
    -0.0017100091790780425,
    -0.012245197780430317,
    0.011172523722052574,
    -0.013241251930594444,
    0.023153036832809448,
    -0.03218021243810654,
    -0.012732776813209057,
    0.006735555361956358,
    0.02476901188492775,
    -0.0023612752556800842,
    0.004893203265964985,
    0.023919232189655304,
    0.02102161943912506,
    -0.022623663768172264,
    -0.007055964320898056,
    -0.012133751064538956,
    0.006801726762205362,
    -0.017566774040460587,
    -0.01197354681789875,
    -0.0012084993068128824,
    -0.014878123998641968,
    0.04424430802464485,
    -0.021537059918045998,
    0.015518942847847939,
    0.014766677282750607,
    0.01497563999146223,
    -0.0015410978812724352,
    -0.00014703553461004049,
    0.007237065117806196,
    0.020171839743852615,
    0.004785239230841398,
    0.03452059254050255,
    0.016508031636476517,
    0.00513351010158658,
    -0.022303255274891853,
    0.038922734558582306,
    -0.007863952778279781,
    -4.7125380660872906e-05,
    -0.0037160483188927174,
    -0.01510101743042469,
    0.012245197780430317,
    -0.003303347621113062,
    -0.0013852467527613044,
    0.004994201939553022,
    0.03206876665353775,
    -0.009145588614046574,
    0.004095663316547871,
    0.011263074353337288,
    0.005763879977166653,
    0.00459020771086216,
    0.02428143285214901,
    -0.025228729471564293,
    0.0048792725428938866,
    -0.009410274215042591,
    -0.009068968705832958,
    0.01351986825466156,
    -0.019461367279291153,
    0.015700042247772217,
    0.0560297891497612,
    0.0365544930100441,
    -0.012614364735782146,
    0.011353624984622002,
    0.019391711801290512,
    -0.0034478800371289253,
    -0.023264482617378235,
    0.013861173763871193,
    0.011144662275910378,
    0.022623663768172264,
    -0.01497563999146223,
    0.019795706495642662,
    0.005307645536959171,
    -0.006575350649654865,
    0.03053637407720089,
    0.01184816937893629,
    0.02712332271039486,
    -0.0095426170155406,
    -0.03867197781801224,
    0.014961709268391132,
    -0.006119116209447384,
    -0.029616940766572952,
    -0.11261681467294693,
    -0.013094978407025337,
    0.023320205509662628,
    0.013206425122916698,
    -0.015059225261211395,
    0.017413534224033356,
    -0.02004646137356758,
    0.02809848077595234,
    -0.03078712895512581,
    0.011339694261550903,
    -0.01522639486938715,
    0.0013260407140478492,
    -0.021314166486263275,
    0.015142809599637985,
    -0.008734629489481449,
    -0.017678219825029373,
    -0.01400048192590475,
    -0.004537967033684254,
    -0.02078479528427124,
    0.004677275661379099,
    -0.015727905556559563,
    0.0005002038087695837,
    0.012690984643995762,
    -0.015017432160675526,
    -0.02337593026459217,
    -0.008421185426414013,
    -0.02695615217089653,
    0.019043441861867905,
    0.013728830963373184,
    0.0062688724137842655,
    0.018207592889666557,
    -0.018890202045440674,
    -0.011318798176944256,
    0.005130027420818806,
    0.0067390380427241325,
    0.0012468091445043683,
    -0.02103555016219616,
    -0.025883479043841362,
    0.03028561919927597,
    -0.015393564477562904,
    0.0010857338784262538,
    -0.025563068687915802,
    0.021077342331409454,
    0.009918749332427979,
    -0.004642448388040066,
    0.025758100673556328,
    -0.0008393324096687138,
    0.015978660434484482,
    0.002789648249745369,
    -0.02419784851372242,
    -0.03101002238690853,
    -0.006867898162454367,
    -0.002014745958149433,
    0.005405161064118147,
    0.023752061650156975,
    0.0166612695902586,
    0.012851188890635967,
    0.008233119733631611,
    0.003097867825999856,
    -0.006951482966542244,
    -0.013854208402335644,
    -0.008511736057698727,
    -0.016675200313329697,
    0.01859765499830246,
    0.013025323860347271,
    -0.0072788577526807785,
    -0.022024638950824738,
    0.021467406302690506,
    0.00824008509516716,
    -0.006314147729426622,
    -0.022512217983603477,
    0.004078249912708998,
    -0.012182509526610374,
    0.008351531811058521,
    -0.03134436160326004,
    -0.025033697485923767,
    -0.0007631481857970357,
    -0.00739030446857214,
    0.010845149867236614,
    0.005795224569737911,
    -0.020004669204354286,
    0.010246124118566513,
    -0.00319886626675725,
    -0.02501976676285267,
    0.011095904745161533,
    -0.0002255052822874859,
    0.013429318554699421,
    -0.00115190539509058,
    0.01193175371736288,
    -0.054776016622781754,
    0.020520109683275223,
    -0.014557715505361557,
    0.012802431359887123,
    -0.0013948241248726845,
    0.0020234526600688696,
    -0.006906208116561174,
    -0.014710954390466213,
    -0.003970285877585411,
    -0.02215001732110977,
    0.02858605980873108,
    -0.017747875303030014,
    -0.01026702020317316,
    -0.07088005542755127,
    0.007132583763450384,
    0.025632724165916443,
    -0.002206294797360897,
    0.020088253542780876,
    -0.0349106565117836,
    0.009570478461682796,
    -0.027903448790311813,
    0.00298293842934072,
    0.029115431010723114,
    -0.05056890472769737,
    -0.0016621219692751765,
    -0.003193642245605588,
    -0.00021919286518823355,
    0.006763416808098555,
    -0.009897853247821331,
    0.04806135594844818,
    -0.007087308913469315,
    0.039089903235435486,
    -0.019447436556220055,
    -0.008400289341807365,
    0.0019781775772571564,
    0.02185746841132641,
    0.022832626476883888,
    -0.02436501905322075,
    -0.014334822073578835,
    -0.03156725689768791,
    0.02143954485654831,
    -0.007167411036789417,
    -0.02467149682343006,
    0.00783609040081501,
    -0.004092180635780096,
    -0.03312750905752182,
    -0.0016246828017756343,
    0.01728815771639347,
    -0.007000240962952375,
    0.026914360001683235,
    0.02111913450062275,
    -0.003970285877585411,
    0.015602527186274529,
    -0.013457180000841618,
    -0.04772701486945152,
    0.01452985405921936,
    0.0006112150731496513,
    -0.007028102874755859,
    0.0003288981388323009,
    0.00434641819447279,
    -0.01535177230834961,
    0.00525888754054904,
    0.011513829231262207,
    0.051516201347112656,
    0.010482948273420334,
    -0.0357186421751976,
    -0.0340748056769371,
    0.005011615343391895,
    -0.008107742294669151,
    0.026203887537121773,
    0.0017692151013761759,
    -0.0017822752706706524,
    0.01416765246540308,
    0.05951249599456787,
    0.00010197801748290658,
    0.002672977512702346,
    0.008386358618736267,
    0.015978660434484482,
    -0.04296267405152321,
    -0.030898576602339745,
    -0.015811489894986153,
    0.02312517538666725,
    -0.03318323194980621,
    -0.026050647720694542,
    -0.03449273109436035,
    0.013700969517230988,
    -0.00031039625173434615,
    0.018555862829089165,
    0.0070350682362914085,
    0.007578370627015829,
    -0.029282599687576294,
    -0.01478060893714428,
    0.05368941277265549,
    0.016201553866267204,
    -0.016842370852828026,
    -0.003681221278384328,
    0.013046220876276493,
    0.023153036832809448,
    -0.020492248237133026,
    -0.007108204998075962,
    3.205178654752672e-05,
    0.0012520331656560302,
    -0.005819603335112333,
    -0.0019346437184140086,
    0.00849083997309208,
    0.012210370972752571,
    0.017009541392326355,
    0.021258443593978882,
    -0.005182268097996712,
    -0.020826587453484535,
    -0.0012633519945666194,
    0.024406811222434044,
    0.005102165974676609,
    0.026371058076620102,
    0.0016952076693996787,
    0.009229173883795738,
    -0.0030961264856159687,
    -0.011889961548149586,
    -0.0008567459299229085,
    -0.018402623012661934,
    -0.028558196499943733,
    0.011325763538479805,
    0.0162294153124094,
    -0.00799629557877779,
    0.0015384858706966043,
    -0.009361516684293747,
    0.015059225261211395,
    -0.0017970767803490162,
    0.03872770071029663,
    0.008908764459192753,
    -0.043324876576662064,
    -0.022136086598038673,
    0.025312313809990883,
    0.01673092506825924,
    0.01654982380568981,
    0.03128863871097565,
    -0.017413534224033356,
    0.024490395560860634,
    0.03761323541402817,
    0.0046285176649689674,
    -0.011660102754831314,
    0.016842370852828026,
    -0.0040886979550123215,
    -0.016925955191254616,
    -0.0021766917780041695,
    -0.028474612161517143,
    -0.02564665488898754,
    -0.01957281306385994,
    -0.009849095717072487,
    0.007968433201313019,
    -0.0060250828973948956,
    0.009396343491971493,
    0.1169075071811676,
    -0.029839834198355675,
    -0.008456012234091759,
    0.013296975754201412,
    -0.005694225896149874,
    -0.0005820473888888955,
    -0.006693762727081776,
    0.019795706495642662,
    0.005035994108766317,
    -0.010078954510390759,
    -0.019363850355148315,
    -0.005561883095651865,
    -0.029087569564580917,
    -0.012690984643995762,
    -0.010914803482592106,
    0.006906208116561174,
    -0.026928290724754333,
    0.025799892842769623,
    -0.011590449139475822,
    0.0036533595994114876,
    0.020199701189994812,
    0.014362683519721031,
    -0.004976788070052862,
    -0.016062244772911072,
    -0.050457458943128586,
    0.02444860339164734,
    0.04151386767625809,
    0.005492229014635086,
    -0.004005113150924444,
    -0.05017884075641632,
    0.04430003464221954,
    -0.0017918527591973543,
    -0.008344565518200397,
    -0.035690780729055405,
    -0.01461343839764595,
    0.02070121094584465,
    -0.006676349323242903,
    -0.01306711696088314,
    0.005875326693058014,
    0.00991178397089243,
    0.019057372584939003,
    -0.0025615310296416283,
    -0.03126077726483345,
    -0.034715622663497925,
    0.023807784542441368,
    0.035272855311632156,
    -0.010496878996491432,
    -0.022958004847168922,
    -0.026176026090979576
  ]
}
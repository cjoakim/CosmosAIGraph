{
  "classifiers": [
    "development status :: 7 - inactive",
    "framework :: aws cdk",
    "framework :: aws cdk :: 1",
    "intended audience :: developers",
    "license :: osi approved",
    "operating system :: os independent",
    "programming language :: javascript",
    "programming language :: python :: 3 :: only",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "typing :: typed"
  ],
  "description": "the cdk construct library for aws::cloudfront\n# amazon cloudfront construct library\n\n<!--begin stability banner-->---\n\n\n![end-of-support](https://img.shields.io/badge/end--of--support-critical.svg?style=for-the-badge)\n\n> aws cdk v1 has reached end-of-support on 2023-06-01.\n> this package is no longer being updated, and users should migrate to aws cdk v2.\n>\n> for more information on how to migrate, see the [*migrating to aws cdk v2* guide](https://docs.aws.amazon.com/cdk/v2/guide/migrating-v2.html).\n\n---\n<!--end stability banner-->\n\namazon cloudfront is a web service that speeds up distribution of your static and dynamic web content, such as .html, .css, .js, and image files, to\nyour users. cloudfront delivers your content through a worldwide network of data centers called edge locations. when a user requests content that\nyou're serving with cloudfront, the user is routed to the edge location that provides the lowest latency, so that content is delivered with the best\npossible performance.\n\n## distribution api\n\nthe `distribution` api is currently being built to replace the existing `cloudfrontwebdistribution` api. the `distribution` api is optimized for the\nmost common use cases of cloudfront distributions (e.g., single origin and behavior, few customizations) while still providing the ability for more\nadvanced use cases. the api focuses on simplicity for the common use cases, and convenience methods for creating the behaviors and origins necessary\nfor more complex use cases.\n\n### creating a distribution\n\ncloudfront distributions deliver your content from one or more origins; an origin is the location where you store the original version of your\ncontent. origins can be created from s3 buckets or a custom origin (http server). constructs to define origins are in the `@aws-cdk/aws-cloudfront-origins` module.\n\neach distribution has a default behavior which applies to all requests to that distribution, and routes requests to a primary origin.\nadditional behaviors may be specified for an origin with a given url path pattern. behaviors allow routing with multiple origins,\ncontrolling which http methods to support, whether to require users to use https, and what query strings or cookies to forward to your origin,\namong other settings.\n\n#### from an s3 bucket\n\nan s3 bucket can be added as an origin. if the bucket is configured as a website endpoint, the distribution can use s3 redirects and s3 custom error\ndocuments.\n\n```python\n# creates a distribution from an s3 bucket.\nmy_bucket = s3.bucket(self, \"mybucket\")\ncloudfront.distribution(self, \"mydist\",\n    default_behavior=cloudfront.behavioroptions(origin=origins.s3origin(my_bucket))\n)\n```\n\nthe above will treat the bucket differently based on if `ibucket.iswebsite` is set or not. if the bucket is configured as a website, the bucket is\ntreated as an http origin, and the built-in s3 redirects and error pages can be used. otherwise, the bucket is handled as a bucket origin and\ncloudfront's redirect and error handling will be used. in the latter case, the origin will create an origin access identity and grant it access to the\nunderlying bucket. this can be used in conjunction with a bucket that is not public to require that your users access your content using cloudfront\nurls and not s3 urls directly.\n\n#### elbv2 load balancer\n\nan elastic load balancing (elb) v2 load balancer may be used as an origin. in order for a load balancer to serve as an origin, it must be publicly\naccessible (`internetfacing` is true). both application and network load balancers are supported.\n\n```python\n# creates a distribution from an elbv2 load balancer\n# vpc: ec2.vpc\n\n# create an application load balancer in a vpc. 'internetfacing' must be 'true'\n# for cloudfront to access the load balancer and use it as an origin.\nlb = elbv2.applicationloadbalancer(self, \"lb\",\n    vpc=vpc,\n    internet_facing=true\n)\ncloudfront.distribution(self, \"mydist\",\n    default_behavior=cloudfront.behavioroptions(origin=origins.loadbalancerv2origin(lb))\n)\n```\n\n#### from an http endpoint\n\norigins can also be created from any other http endpoint, given the domain name, and optionally, other origin properties.\n\n```python\n# creates a distribution from an http endpoint\ncloudfront.distribution(self, \"mydist\",\n    default_behavior=cloudfront.behavioroptions(origin=origins.httporigin(\"www.example.com\"))\n)\n```\n\n### domain names and certificates\n\nwhen you create a distribution, cloudfront assigns a domain name for the distribution, for example: `d111111abcdef8.cloudfront.net`; this value can\nbe retrieved from `distribution.distributiondomainname`. cloudfront distributions use a default certificate (`*.cloudfront.net`) to support https by\ndefault. if you want to use your own domain name, such as `www.example.com`, you must associate a certificate with your distribution that contains\nyour domain name, and provide one (or more) domain names from the certificate for the distribution.\n\nthe certificate must be present in the aws certificate manager (acm) service in the us east (n. virginia) region; the certificate\nmay either be created by acm, or created elsewhere and imported into acm. when a certificate is used, the distribution will support https connections\nfrom sni only and a minimum protocol version of tlsv1.2_2021 if the `@aws-cdk/aws-cloudfront:defaultsecuritypolicytlsv1.2_2021` feature flag is set, and tlsv1.2_2019 otherwise.\n\n```python\n# to use your own domain name in a distribution, you must associate a certificate\nimport aws_cdk.aws_certificatemanager as acm\nimport aws_cdk.aws_route53 as route53\n\n# hosted_zone: route53.hostedzone\n\n# my_bucket: s3.bucket\n\nmy_certificate = acm.dnsvalidatedcertificate(self, \"mysitecert\",\n    domain_name=\"www.example.com\",\n    hosted_zone=hosted_zone\n)\ncloudfront.distribution(self, \"mydist\",\n    default_behavior=cloudfront.behavioroptions(origin=origins.s3origin(my_bucket)),\n    domain_names=[\"www.example.com\"],\n    certificate=my_certificate\n)\n```\n\nhowever, you can customize the minimum protocol version for the certificate while creating the distribution using `minimumprotocolversion` property.\n\n```python\n# create a distribution with a custom domain name and a minimum protocol version.\n# my_bucket: s3.bucket\n\ncloudfront.distribution(self, \"mydist\",\n    default_behavior=cloudfront.behavioroptions(origin=origins.s3origin(my_bucket)),\n    domain_names=[\"www.example.com\"],\n    minimum_protocol_version=cloudfront.securitypolicyprotocol.tls_v1_2016,\n    ssl_support_method=cloudfront.sslmethod.sni\n)\n```\n\n### multiple behaviors & origins\n\neach distribution has a default behavior which applies to all requests to that distribution; additional behaviors may be specified for a\ngiven url path pattern. behaviors allow routing with multiple origins, controlling which http methods to support, whether to require users to\nuse https, and what query strings or cookies to forward to your origin, among others.\n\nthe properties of the default behavior can be adjusted as part of the distribution creation. the following example shows configuring the http\nmethods and viewer protocol policy of the cache.\n\n```python\n# create a distribution with configured http methods and viewer protocol policy of the cache.\n# my_bucket: s3.bucket\n\nmy_web_distribution = cloudfront.distribution(self, \"mydist\",\n    default_behavior=cloudfront.behavioroptions(\n        origin=origins.s3origin(my_bucket),\n        allowed_methods=cloudfront.allowedmethods.allow_all,\n        viewer_protocol_policy=cloudfront.viewerprotocolpolicy.redirect_to_https\n    )\n)\n```\n\nadditional behaviors can be specified at creation, or added after the initial creation. each additional behavior is associated with an origin,\nand enable customization for a specific set of resources based on a url path pattern. for example, we can add a behavior to `mywebdistribution` to\noverride the default viewer protocol policy for all of the images.\n\n```python\n# add a behavior to a distribution after initial creation.\n# my_bucket: s3.bucket\n# my_web_distribution: cloudfront.distribution\n\nmy_web_distribution.add_behavior(\"/images/*.jpg\", origins.s3origin(my_bucket),\n    viewer_protocol_policy=cloudfront.viewerprotocolpolicy.redirect_to_https\n)\n```\n\nthese behaviors can also be specified at distribution creation time.\n\n```python\n# create a distribution with additional behaviors at creation time.\n# my_bucket: s3.bucket\n\nbucket_origin = origins.s3origin(my_bucket)\ncloudfront.distribution(self, \"mydist\",\n    default_behavior=cloudfront.behavioroptions(\n        origin=bucket_origin,\n        allowed_methods=cloudfront.allowedmethods.allow_all,\n        viewer_protocol_policy=cloudfront.viewerprotocolpolicy.redirect_to_https\n    ),\n    additional_behaviors={\n        \"/images/*.jpg\": cloudfront.behavioroptions(\n            origin=bucket_origin,\n            viewer_protocol_policy=cloudfront.viewerprotocolpolicy.redirect_to_https\n        )\n    }\n)\n```\n\n### customizing cache keys and ttls with cache policies\n\nyou can use a cache policy to improve your cache hit ratio by controlling the values (url query strings, http headers, and cookies)\nthat are included in the cache key, and/or adjusting how long items remain in the cache via the time-to-live (ttl) settings.\ncloudfront provides some predefined cache policies, known as managed policies, for common use cases. you can use these managed policies,\nor you can create your own cache policy that\u2019s specific to your needs.\nsee https://docs.aws.amazon.com/amazoncloudfront/latest/developerguide/controlling-the-cache-key.html for more details.\n\n```python\n# using an existing cache policy for a distribution\n# bucket_origin: origins.s3origin\n\ncloudfront.distribution(self, \"mydistmanagedpolicy\",\n    default_behavior=cloudfront.behavioroptions(\n        origin=bucket_origin,\n        cache_policy=cloudfront.cachepolicy.caching_optimized\n    )\n)\n```\n\n```python\n# creating a custom cache policy for a distribution -- all parameters optional\n# bucket_origin: origins.s3origin\n\nmy_cache_policy = cloudfront.cachepolicy(self, \"mycachepolicy\",\n    cache_policy_name=\"mypolicy\",\n    comment=\"a default policy\",\n    default_ttl=duration.days(2),\n    min_ttl=duration.minutes(1),\n    max_ttl=duration.days(10),\n    cookie_behavior=cloudfront.cachecookiebehavior.all(),\n    header_behavior=cloudfront.cacheheaderbehavior.allow_list(\"x-customheader\"),\n    query_string_behavior=cloudfront.cachequerystringbehavior.deny_list(\"username\"),\n    enable_accept_encoding_gzip=true,\n    enable_accept_encoding_brotli=true\n)\ncloudfront.distribution(self, \"mydistcustompolicy\",\n    default_behavior=cloudfront.behavioroptions(\n        origin=bucket_origin,\n        cache_policy=my_cache_policy\n    )\n)\n```\n\n### customizing origin requests with origin request policies\n\nwhen cloudfront makes a request to an origin, the url path, request body (if present), and a few standard headers are included.\nother information from the viewer request, such as url query strings, http headers, and cookies, is not included in the origin request by default.\nyou can use an origin request policy to control the information that\u2019s included in an origin request.\ncloudfront provides some predefined origin request policies, known as managed policies, for common use cases. you can use these managed policies,\nor you can create your own origin request policy that\u2019s specific to your needs.\nsee https://docs.aws.amazon.com/amazoncloudfront/latest/developerguide/controlling-origin-requests.html for more details.\n\n```python\n# using an existing origin request policy for a distribution\n# bucket_origin: origins.s3origin\n\ncloudfront.distribution(self, \"mydistmanagedpolicy\",\n    default_behavior=cloudfront.behavioroptions(\n        origin=bucket_origin,\n        origin_request_policy=cloudfront.originrequestpolicy.cors_s3_origin\n    )\n)\n```\n\n```python\n# creating a custom origin request policy for a distribution -- all parameters optional\n# bucket_origin: origins.s3origin\n\nmy_origin_request_policy = cloudfront.originrequestpolicy(self, \"originrequestpolicy\",\n    origin_request_policy_name=\"mypolicy\",\n    comment=\"a default policy\",\n    cookie_behavior=cloudfront.originrequestcookiebehavior.none(),\n    header_behavior=cloudfront.originrequestheaderbehavior.all(\"cloudfront-is-android-viewer\"),\n    query_string_behavior=cloudfront.originrequestquerystringbehavior.allow_list(\"username\")\n)\n\ncloudfront.distribution(self, \"mydistcustompolicy\",\n    default_behavior=cloudfront.behavioroptions(\n        origin=bucket_origin,\n        origin_request_policy=my_origin_request_policy\n    )\n)\n```\n\n### customizing response headers with response headers policies\n\nyou can configure cloudfront to add one or more http headers to the responses that it sends to viewers (web browsers or other clients), without making any changes to the origin or writing any code.\nto specify the headers that cloudfront adds to http responses, you use a response headers policy. cloudfront adds the headers regardless of whether it serves the object from the cache or has to retrieve the object from the origin. if the origin response includes one or more of the headers that\u2019s in a response headers policy, the policy can specify whether cloudfront uses the header it received from the origin or overwrites it with the one in the policy.\nsee https://docs.aws.amazon.com/amazoncloudfront/latest/developerguide/adding-response-headers.html\n\n```python\n# using an existing managed response headers policy\n# bucket_origin: origins.s3origin\n\ncloudfront.distribution(self, \"mydistmanagedpolicy\",\n    default_behavior=cloudfront.behavioroptions(\n        origin=bucket_origin,\n        response_headers_policy=cloudfront.responseheaderspolicy.cors_allow_all_origins\n    )\n)\n\n# creating a custom response headers policy -- all parameters optional\nmy_response_headers_policy = cloudfront.responseheaderspolicy(self, \"responseheaderspolicy\",\n    response_headers_policy_name=\"mypolicy\",\n    comment=\"a default policy\",\n    cors_behavior=cloudfront.responseheaderscorsbehavior(\n        access_control_allow_credentials=false,\n        access_control_allow_headers=[\"x-custom-header-1\", \"x-custom-header-2\"],\n        access_control_allow_methods=[\"get\", \"post\"],\n        access_control_allow_origins=[\"*\"],\n        access_control_expose_headers=[\"x-custom-header-1\", \"x-custom-header-2\"],\n        access_control_max_age=duration.seconds(600),\n        origin_override=true\n    ),\n    custom_headers_behavior=cloudfront.responsecustomheadersbehavior(\n        custom_headers=[cloudfront.responsecustomheader(header=\"x-amz-date\", value=\"some-value\", override=true), cloudfront.responsecustomheader(header=\"x-amz-security-token\", value=\"some-value\", override=false)\n        ]\n    ),\n    security_headers_behavior=cloudfront.responsesecurityheadersbehavior(\n        content_security_policy=cloudfront.responseheaderscontentsecuritypolicy(content_security_policy=\"default-src https:;\", override=true),\n        content_type_options=cloudfront.responseheaderscontenttypeoptions(override=true),\n        frame_options=cloudfront.responseheadersframeoptions(frame_option=cloudfront.headersframeoption.deny, override=true),\n        referrer_policy=cloudfront.responseheadersreferrerpolicy(referrer_policy=cloudfront.headersreferrerpolicy.no_referrer, override=true),\n        strict_transport_security=cloudfront.responseheadersstricttransportsecurity(access_control_max_age=duration.seconds(600), include_subdomains=true, override=true),\n        xss_protection=cloudfront.responseheadersxssprotection(protection=true, mode_block=true, report_uri=\"https://example.com/csp-report\", override=true)\n    )\n)\ncloudfront.distribution(self, \"mydistcustompolicy\",\n    default_behavior=cloudfront.behavioroptions(\n        origin=bucket_origin,\n        response_headers_policy=my_response_headers_policy\n    )\n)\n```\n\n### validating signed urls or signed cookies with trusted key groups\n\ncloudfront distribution supports validating signed urls or signed cookies using key groups.\nwhen a cache behavior contains trusted key groups, cloudfront requires signed urls or signed\ncookies for all requests that match the cache behavior.\n\n```python\n# validating signed urls or signed cookies with trusted key groups\n\n# public key in pem format\n# public_key: str\n\npub_key = cloudfront.publickey(self, \"mypubkey\",\n    encoded_key=public_key\n)\n\nkey_group = cloudfront.keygroup(self, \"mykeygroup\",\n    items=[pub_key\n    ]\n)\n\ncloudfront.distribution(self, \"dist\",\n    default_behavior=cloudfront.behavioroptions(\n        origin=origins.httporigin(\"www.example.com\"),\n        trusted_key_groups=[key_group\n        ]\n    )\n)\n```\n\n### lambda@edge\n\nlambda@edge is an extension of aws lambda, a compute service that lets you execute\nfunctions that customize the content that cloudfront delivers. you can author node.js\nor python functions in the us east (n. virginia) region, and then execute them in aws\nlocations globally that are closer to the viewer, without provisioning or managing servers.\nlambda@edge functions are associated with a specific behavior and event type. lambda@edge\ncan be used to rewrite urls, alter responses based on headers or cookies, or authorize\nrequests based on headers or authorization tokens.\n\nthe following shows a lambda@edge function added to the default behavior and triggered\non every request:\n\n```python\n# my_bucket: s3.bucket\n# a lambda@edge function added to default behavior of a distribution\n# and triggered on every request\nmy_func = cloudfront.experimental.edgefunction(self, \"myfunction\",\n    runtime=lambda_.runtime.nodejs_14_x,\n    handler=\"index.handler\",\n    code=lambda_.code.from_asset(path.join(__dirname, \"lambda-handler\"))\n)\ncloudfront.distribution(self, \"mydist\",\n    default_behavior=cloudfront.behavioroptions(\n        origin=origins.s3origin(my_bucket),\n        edge_lambdas=[cloudfront.edgelambda(\n            function_version=my_func.current_version,\n            event_type=cloudfront.lambdaedgeeventtype.viewer_request\n        )\n        ]\n    )\n)\n```\n\n> **note:** lambda@edge functions must be created in the `us-east-1` region, regardless of the region of the cloudfront distribution and stack.\n> to make it easier to request functions for lambda@edge, the `edgefunction` construct can be used.\n> the `edgefunction` construct will automatically request a function in `us-east-1`, regardless of the region of the current stack.\n> `edgefunction` has the same interface as `function` and can be created and used interchangeably.\n> please note that using `edgefunction` requires that the `us-east-1` region has been bootstrapped.\n> see https://docs.aws.amazon.com/cdk/latest/guide/bootstrapping.html for more about bootstrapping regions.\n\nif the stack is in `us-east-1`, a \"normal\" `lambda.function` can be used instead of an `edgefunction`.\n\n```python\n# using a lambda function instead of an edgefunction for stacks in `us-east-`.\nmy_func = lambda_.function(self, \"myfunction\",\n    runtime=lambda_.runtime.nodejs_14_x,\n    handler=\"index.handler\",\n    code=lambda_.code.from_asset(path.join(__dirname, \"lambda-handler\"))\n)\n```\n\nif the stack is not in `us-east-1`, and you need references from different applications on the same account,\nyou can also set a specific stack id for each lambda@edge.\n\n```python\n# setting stackids for edgefunctions that can be referenced from different applications\n# on the same account.\nmy_func1 = cloudfront.experimental.edgefunction(self, \"myfunction1\",\n    runtime=lambda_.runtime.nodejs_14_x,\n    handler=\"index.handler\",\n    code=lambda_.code.from_asset(path.join(__dirname, \"lambda-handler1\")),\n    stack_id=\"edge-lambda-stack-id-1\"\n)\n\nmy_func2 = cloudfront.experimental.edgefunction(self, \"myfunction2\",\n    runtime=lambda_.runtime.nodejs_14_x,\n    handler=\"index.handler\",\n    code=lambda_.code.from_asset(path.join(__dirname, \"lambda-handler2\")),\n    stack_id=\"edge-lambda-stack-id-2\"\n)\n```\n\nlambda@edge functions can also be associated with additional behaviors,\neither at or after distribution creation time.\n\n```python\n# associating a lambda@edge function with additional behaviors.\n\n# my_func: cloudfront.experimental.edgefunction\n# assigning at distribution creation\n# my_bucket: s3.bucket\n\nmy_origin = origins.s3origin(my_bucket)\nmy_distribution = cloudfront.distribution(self, \"mydist\",\n    default_behavior=cloudfront.behavioroptions(origin=my_origin),\n    additional_behaviors={\n        \"images/*\": cloudfront.behavioroptions(\n            origin=my_origin,\n            edge_lambdas=[cloudfront.edgelambda(\n                function_version=my_func.current_version,\n                event_type=cloudfront.lambdaedgeeventtype.origin_request,\n                include_body=true\n            )\n            ]\n        )\n    }\n)\n\n# assigning after creation\nmy_distribution.add_behavior(\"images/*\", my_origin,\n    edge_lambdas=[cloudfront.edgelambda(\n        function_version=my_func.current_version,\n        event_type=cloudfront.lambdaedgeeventtype.viewer_response\n    )\n    ]\n)\n```\n\nadding an existing lambda@edge function created in a different stack to a cloudfront distribution.\n\n```python\n# adding an existing lambda@edge function created in a different stack\n# to a cloudfront distribution.\n# s3_bucket: s3.bucket\n\nfunction_version = lambda_.version.from_version_arn(self, \"version\", \"arn:aws:lambda:us-east-1:123456789012:function:functionname:1\")\n\ncloudfront.distribution(self, \"distro\",\n    default_behavior=cloudfront.behavioroptions(\n        origin=origins.s3origin(s3_bucket),\n        edge_lambdas=[cloudfront.edgelambda(\n            function_version=function_version,\n            event_type=cloudfront.lambdaedgeeventtype.viewer_request\n        )\n        ]\n    )\n)\n```\n\n### cloudfront function\n\nyou can also deploy cloudfront functions and add them to a cloudfront distribution.\n\n```python\n# s3_bucket: s3.bucket\n# add a cloudfront function to a distribution\ncf_function = cloudfront.function(self, \"function\",\n    code=cloudfront.functioncode.from_inline(\"function handler(event) { return event.request }\")\n)\ncloudfront.distribution(self, \"distro\",\n    default_behavior=cloudfront.behavioroptions(\n        origin=origins.s3origin(s3_bucket),\n        function_associations=[cloudfront.functionassociation(\n            function=cf_function,\n            event_type=cloudfront.functioneventtype.viewer_request\n        )]\n    )\n)\n```\n\nit will auto-generate the name of the function and deploy it to the `live` stage.\n\nadditionally, you can load the function's code from a file using the `functioncode.fromfile()` method.\n\n### logging\n\nyou can configure cloudfront to create log files that contain detailed information about every user request that cloudfront receives.\nthe logs can go to either an existing bucket, or a bucket will be created for you.\n\n```python\n# configure logging for distributions\n\n# simplest form - creates a new bucket and logs to it.\ncloudfront.distribution(self, \"mydist\",\n    default_behavior=cloudfront.behavioroptions(origin=origins.httporigin(\"www.example.com\")),\n    enable_logging=true\n)\n\n# you can optionally log to a specific bucket, configure whether cookies are logged, and give the log files a prefix.\ncloudfront.distribution(self, \"mydist\",\n    default_behavior=cloudfront.behavioroptions(origin=origins.httporigin(\"www.example.com\")),\n    enable_logging=true,  # optional, this is implied if logbucket is specified\n    log_bucket=s3.bucket(self, \"logbucket\"),\n    log_file_prefix=\"distribution-access-logs/\",\n    log_includes_cookies=true\n)\n```\n\n### importing distributions\n\nexisting distributions can be imported as well; note that like most imported constructs, an imported distribution cannot be modified.\nhowever, it can be used as a reference for other higher-level constructs.\n\n```python\n# using a reference to an imported distribution\ndistribution = cloudfront.distribution.from_distribution_attributes(self, \"importeddist\",\n    domain_name=\"d111111abcdef8.cloudfront.net\",\n    distribution_id=\"012345abcdef\"\n)\n```\n\n## migrating from the original cloudfrontwebdistribution to the newer distribution construct\n\nit's possible to migrate a distribution from the original to the modern api.\nthe changes necessary are the following:\n\n### the distribution\n\nreplace `new cloudfrontwebdistribution` with `new distribution`. some\nconfiguration properties have been changed:\n\n| old api                        | new api                                                                                        |\n|--------------------------------|------------------------------------------------------------------------------------------------|\n| `originconfigs`                | `defaultbehavior`; use `additionalbehaviors` if necessary                                      |\n| `viewercertificate`            | `certificate`; use `domainnames` for aliases                                                   |\n| `errorconfigurations`          | `errorresponses`                                                                               |\n| `loggingconfig`                | `enablelogging`; configure with `logbucket` `logfileprefix` and `logincludescookies`           |\n| `viewerprotocolpolicy`         | removed; set on each behavior instead. default changed from `redirect_to_https` to `allow_all` |\n\nafter switching constructs, you need to maintain the same logical id for the underlying [cfndistribution](https://docs.aws.amazon.com/cdk/api/v1/docs/@aws-cdk_aws-cloudfront.cfndistribution.html) if you wish to avoid the deletion and recreation of your distribution.\nto do this, use [escape hatches](https://docs.aws.amazon.com/cdk/v2/guide/cfn_layer.html) to override the logical id created by the new distribution construct with the logical id created by the old construct.\n\nexample:\n\n```python\n# source_bucket: s3.bucket\n\n\nmy_distribution = cloudfront.distribution(self, \"mycfwebdistribution\",\n    default_behavior=cloudfront.behavioroptions(\n        origin=origins.s3origin(source_bucket)\n    )\n)\ncfn_distribution = my_distribution.node.default_child\ncfn_distribution.override_logical_id(\"mydistributioncfdistribution3h55ti9q\")\n```\n\n### behaviors\n\nthe modern api makes use of the [cloudfront origins](https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.aws_cloudfront_origins-readme.html) module to easily configure your origin. replace your origin configuration with the relevant cloudfront origins class. for example, here's a behavior with an s3 origin:\n\n```python\n# source_bucket: s3.bucket\n# oai: cloudfront.originaccessidentity\n\n\ncloudfront.cloudfrontwebdistribution(self, \"mycfwebdistribution\",\n    origin_configs=[cloudfront.sourceconfiguration(\n        s3_origin_source=cloudfront.s3originconfig(\n            s3_bucket_source=source_bucket,\n            origin_access_identity=oai\n        ),\n        behaviors=[cloudfront.behavior(is_default_behavior=true)]\n    )\n    ]\n)\n```\n\nbecomes:\n\n```python\n# source_bucket: s3.bucket\n\n\ndistribution = cloudfront.distribution(self, \"mycfwebdistribution\",\n    default_behavior=cloudfront.behavioroptions(\n        origin=origins.s3origin(source_bucket)\n    )\n)\n```\n\nin the original api all behaviors are defined in the `originconfigs` property. the new api is optimized for a single origin and behavior, so the default behavior and additional behaviors will be defined separately.\n\n```python\n# source_bucket: s3.bucket\n# oai: cloudfront.originaccessidentity\n\n\ncloudfront.cloudfrontwebdistribution(self, \"mycfwebdistribution\",\n    origin_configs=[cloudfront.sourceconfiguration(\n        s3_origin_source=cloudfront.s3originconfig(\n            s3_bucket_source=source_bucket,\n            origin_access_identity=oai\n        ),\n        behaviors=[cloudfront.behavior(is_default_behavior=true)]\n    ), cloudfront.sourceconfiguration(\n        custom_origin_source=cloudfront.customoriginconfig(\n            domain_name=\"myalias\"\n        ),\n        behaviors=[cloudfront.behavior(path_pattern=\"/somewhere\")]\n    )\n    ]\n)\n```\n\nbecomes:\n\n```python\n# source_bucket: s3.bucket\n\n\ndistribution = cloudfront.distribution(self, \"mycfwebdistribution\",\n    default_behavior=cloudfront.behavioroptions(\n        origin=origins.s3origin(source_bucket)\n    ),\n    additional_behaviors={\n        \"/somewhere\": cloudfront.behavioroptions(\n            origin=origins.httporigin(\"myalias\")\n        )\n    }\n)\n```\n\n### certificates\n\nif you are using an acm certificate, you can pass the certificate directly to the `certificate` prop.\nany aliases used before in the `viewercertificate` class should be passed in to the `domainnames` prop in the modern api.\n\n```python\nimport aws_cdk.aws_certificatemanager as acm\n# certificate: acm.certificate\n# source_bucket: s3.bucket\n\n\nviewer_certificate = cloudfront.viewercertificate.from_acm_certificate(certificate,\n    aliases=[\"myalias\"]\n)\n\ncloudfront.cloudfrontwebdistribution(self, \"mycfwebdistribution\",\n    origin_configs=[cloudfront.sourceconfiguration(\n        s3_origin_source=cloudfront.s3originconfig(\n            s3_bucket_source=source_bucket\n        ),\n        behaviors=[cloudfront.behavior(is_default_behavior=true)]\n    )\n    ],\n    viewer_certificate=viewer_certificate\n)\n```\n\nbecomes:\n\n```python\nimport aws_cdk.aws_certificatemanager as acm\n# certificate: acm.certificate\n# source_bucket: s3.bucket\n\n\ndistribution = cloudfront.distribution(self, \"mycfwebdistribution\",\n    default_behavior=cloudfront.behavioroptions(\n        origin=origins.s3origin(source_bucket)\n    ),\n    domain_names=[\"myalias\"],\n    certificate=certificate\n)\n```\n\niam certificates aren't directly supported by the new api, but can be easily configured through [escape hatches](https://docs.aws.amazon.com/cdk/v2/guide/cfn_layer.html)\n\n```python\n# source_bucket: s3.bucket\n\nviewer_certificate = cloudfront.viewercertificate.from_iam_certificate(\"myiamroleidentifier\",\n    aliases=[\"myalias\"]\n)\n\ncloudfront.cloudfrontwebdistribution(self, \"mycfwebdistribution\",\n    origin_configs=[cloudfront.sourceconfiguration(\n        s3_origin_source=cloudfront.s3originconfig(\n            s3_bucket_source=source_bucket\n        ),\n        behaviors=[cloudfront.behavior(is_default_behavior=true)]\n    )\n    ],\n    viewer_certificate=viewer_certificate\n)\n```\n\nbecomes:\n\n```python\n# source_bucket: s3.bucket\n\ndistribution = cloudfront.distribution(self, \"mycfwebdistribution\",\n    default_behavior=cloudfront.behavioroptions(\n        origin=origins.s3origin(source_bucket)\n    ),\n    domain_names=[\"myalias\"]\n)\n\ncfn_distribution = distribution.node.default_child\n\ncfn_distribution.add_property_override(\"viewercertificate.iamcertificateid\", \"myiamroleidentifier\")\ncfn_distribution.add_property_override(\"viewercertificate.sslsupportmethod\", \"sni-only\")\n```\n\n### other changes\n\na number of default settings have changed on the new api when creating a new distribution, behavior, and origin.\nafter making the major changes needed for the migration, run `cdk diff` to see what settings have changed.\nif no changes are desired during migration, you will at the least be able to use [escape hatches](https://docs.aws.amazon.com/cdk/v2/guide/cfn_layer.html) to override what the cdk synthesizes, if you can't change the properties directly.\n\n## cloudfrontwebdistribution api\n\n> the `cloudfrontwebdistribution` construct is the original construct written for working with cloudfront distributions.\n> users are encouraged to use the newer `distribution` instead, as it has a simpler interface and receives new features faster.\n\nexample usage:\n\n```python\n# using a cloudfrontwebdistribution construct.\n\n# source_bucket: s3.bucket\n\ndistribution = cloudfront.cloudfrontwebdistribution(self, \"mydistribution\",\n    origin_configs=[cloudfront.sourceconfiguration(\n        s3_origin_source=cloudfront.s3originconfig(\n            s3_bucket_source=source_bucket\n        ),\n        behaviors=[cloudfront.behavior(is_default_behavior=true)]\n    )\n    ]\n)\n```\n\n### viewer certificate\n\nby default, cloudfront web distributions will answer https requests with cloudfront's default certificate,\nonly containing the distribution `domainname` (e.g. d111111abcdef8.cloudfront.net).\nyou can customize the viewer certificate property to provide a custom certificate and/or list of domain name aliases to fit your needs.\n\nsee [using alternate domain names and https](https://docs.aws.amazon.com/amazoncloudfront/latest/developerguide/using-https-alternate-domain-names.html) in the cloudfront user guide.\n\n#### default certificate\n\nyou can customize the default certificate aliases. this is intended to be used in combination with cname records in your dns zone.\n\nexample:\n\n```python\ns3_bucket_source = s3.bucket(self, \"bucket\")\n\ndistribution = cloudfront.cloudfrontwebdistribution(self, \"anamazingwebsiteprobably\",\n    origin_configs=[cloudfront.sourceconfiguration(\n        s3_origin_source=cloudfront.s3originconfig(s3_bucket_source=s3_bucket_source),\n        behaviors=[cloudfront.behavior(is_default_behavior=true)]\n    )],\n    viewer_certificate=cloudfront.viewercertificate.from_cloud_front_default_certificate(\"www.example.com\")\n)\n```\n\n#### acm certificate\n\nyou can change the default certificate by one stored aws certificate manager, or acm.\nthose certificate can either be generated by aws, or purchased by another ca imported into acm.\n\nfor more information, see\n[the aws-certificatemanager module documentation](https://docs.aws.amazon.com/cdk/api/latest/docs/aws-certificatemanager-readme.html)\nor [importing certificates into aws certificate manager](https://docs.aws.amazon.com/acm/latest/userguide/import-certificate.html)\nin the aws certificate manager user guide.\n\nexample:\n\n```python\ns3_bucket_source = s3.bucket(self, \"bucket\")\n\ncertificate = certificatemanager.certificate(self, \"certificate\",\n    domain_name=\"example.com\",\n    subject_alternative_names=[\"*.example.com\"]\n)\n\ndistribution = cloudfront.cloudfrontwebdistribution(self, \"anamazingwebsiteprobably\",\n    origin_configs=[cloudfront.sourceconfiguration(\n        s3_origin_source=cloudfront.s3originconfig(s3_bucket_source=s3_bucket_source),\n        behaviors=[cloudfront.behavior(is_default_behavior=true)]\n    )],\n    viewer_certificate=cloudfront.viewercertificate.from_acm_certificate(certificate,\n        aliases=[\"example.com\", \"www.example.com\"],\n        security_policy=cloudfront.securitypolicyprotocol.tls_v1,  # default\n        ssl_method=cloudfront.sslmethod.sni\n    )\n)\n```\n\n#### iam certificate\n\nyou can also import a certificate into the iam certificate store.\n\nsee [importing an ssl/tls certificate](https://docs.aws.amazon.com/amazoncloudfront/latest/developerguide/cnames-and-https-procedures.html#cnames-and-https-uploading-certificates) in the cloudfront user guide.\n\nexample:\n\n```python\ns3_bucket_source = s3.bucket(self, \"bucket\")\n\ndistribution = cloudfront.cloudfrontwebdistribution(self, \"anamazingwebsiteprobably\",\n    origin_configs=[cloudfront.sourceconfiguration(\n        s3_origin_source=cloudfront.s3originconfig(s3_bucket_source=s3_bucket_source),\n        behaviors=[cloudfront.behavior(is_default_behavior=true)]\n    )],\n    viewer_certificate=cloudfront.viewercertificate.from_iam_certificate(\"certificateid\",\n        aliases=[\"example.com\"],\n        security_policy=cloudfront.securitypolicyprotocol.ssl_v3,  # default\n        ssl_method=cloudfront.sslmethod.sni\n    )\n)\n```\n\n### trusted key groups\n\ncloudfront web distributions supports validating signed urls or signed cookies using key groups.\nwhen a cache behavior contains trusted key groups, cloudfront requires signed urls or signed cookies for all requests that match the cache behavior.\n\nexample:\n\n```python\n# using trusted key groups for cloudfront web distributions.\n# source_bucket: s3.bucket\n# public_key: str\n\npub_key = cloudfront.publickey(self, \"mypubkey\",\n    encoded_key=public_key\n)\n\nkey_group = cloudfront.keygroup(self, \"mykeygroup\",\n    items=[pub_key\n    ]\n)\n\ncloudfront.cloudfrontwebdistribution(self, \"anamazingwebsiteprobably\",\n    origin_configs=[cloudfront.sourceconfiguration(\n        s3_origin_source=cloudfront.s3originconfig(\n            s3_bucket_source=source_bucket\n        ),\n        behaviors=[cloudfront.behavior(\n            is_default_behavior=true,\n            trusted_key_groups=[key_group\n            ]\n        )\n        ]\n    )\n    ]\n)\n```\n\n### restrictions\n\ncloudfront supports adding restrictions to your distribution.\n\nsee [restricting the geographic distribution of your content](https://docs.aws.amazon.com/amazoncloudfront/latest/developerguide/georestrictions.html) in the cloudfront user guide.\n\nexample:\n\n```python\n# adding restrictions to a cloudfront web distribution.\n# source_bucket: s3.bucket\n\ncloudfront.cloudfrontwebdistribution(self, \"mydistribution\",\n    origin_configs=[cloudfront.sourceconfiguration(\n        s3_origin_source=cloudfront.s3originconfig(\n            s3_bucket_source=source_bucket\n        ),\n        behaviors=[cloudfront.behavior(is_default_behavior=true)]\n    )\n    ],\n    geo_restriction=cloudfront.georestriction.allowlist(\"us\", \"gb\")\n)\n```\n\n### connection behaviors between cloudfront and your origin\n\ncloudfront provides you even more control over the connection behaviors between cloudfront and your origin.\nyou can now configure the number of connection attempts cloudfront will make to your origin and the origin connection timeout for each attempt.\n\nsee [origin connection attempts](https://docs.aws.amazon.com/amazoncloudfront/latest/developerguide/distribution-web-values-specify.html#origin-connection-attempts)\n\nsee [origin connection timeout](https://docs.aws.amazon.com/amazoncloudfront/latest/developerguide/distribution-web-values-specify.html#origin-connection-timeout)\n\nexample usage:\n\n```python\n# configuring connection behaviors between cloudfront and your origin\ndistribution = cloudfront.cloudfrontwebdistribution(self, \"mydistribution\",\n    origin_configs=[cloudfront.sourceconfiguration(\n        connection_attempts=3,\n        connection_timeout=duration.seconds(10),\n        behaviors=[cloudfront.behavior(\n            is_default_behavior=true\n        )\n        ]\n    )\n    ]\n)\n```\n\n#### origin fallback\n\nin case the origin source is not available and answers with one of the\nspecified status codes the failover origin source will be used.\n\n```python\n# configuring origin fallback options for the cloudfrontwebdistribution\ncloudfront.cloudfrontwebdistribution(self, \"adistribution\",\n    origin_configs=[cloudfront.sourceconfiguration(\n        s3_origin_source=cloudfront.s3originconfig(\n            s3_bucket_source=s3.bucket.from_bucket_name(self, \"abucket\", \"myoriginbucket\"),\n            origin_path=\"/\",\n            origin_headers={\n                \"myheader\": \"42\"\n            },\n            origin_shield_region=\"us-west-2\"\n        ),\n        failover_s3_origin_source=cloudfront.s3originconfig(\n            s3_bucket_source=s3.bucket.from_bucket_name(self, \"abucketfallback\", \"myoriginbucketfallback\"),\n            origin_path=\"/somewhere\",\n            origin_headers={\n                \"myheader2\": \"21\"\n            },\n            origin_shield_region=\"us-east-1\"\n        ),\n        failover_criteria_status_codes=[cloudfront.failoverstatuscode.internal_server_error],\n        behaviors=[cloudfront.behavior(\n            is_default_behavior=true\n        )\n        ]\n    )\n    ]\n)\n```\n\n## keygroup & publickey api\n\nyou can create a key group to use with cloudfront signed urls and signed cookies\nyou can add public keys to use with cloudfront features such as signed urls, signed cookies, and field-level encryption.\n\nthe following example command uses openssl to generate an rsa key pair with a length of 2048 bits and save to the file named `private_key.pem`.\n\n```bash\nopenssl genrsa -out private_key.pem 2048\n```\n\nthe resulting file contains both the public and the private key. the following example command extracts the public key from the file named `private_key.pem` and stores it in `public_key.pem`.\n\n```bash\nopenssl rsa -pubout -in private_key.pem -out public_key.pem\n```\n\nnote: don't forget to copy/paste the contents of `public_key.pem` file including `-----begin public key-----` and `-----end public key-----` lines into `encodedkey` parameter when creating a `publickey`.\n\nexample:\n\n```python\n# create a key group to use with cloudfront signed urls and signed cookies.\ncloudfront.keygroup(self, \"mykeygroup\",\n    items=[\n        cloudfront.publickey(self, \"mypublickey\",\n            encoded_key=\"...\"\n        )\n    ]\n)\n```\n\nsee:\n\n* https://docs.aws.amazon.com/amazoncloudfront/latest/developerguide/privatecontent.html\n* https://docs.aws.amazon.com/amazoncloudfront/latest/developerguide/private-content-trusted-signers.html\n",
  "docs_url": null,
  "keywords": "",
  "license": "apache-2.0",
  "name": "aws-cdk.aws-cloudfront",
  "package_url": "https://pypi.org/project/aws-cdk.aws-cloudfront/",
  "project_url": "https://pypi.org/project/aws-cdk.aws-cloudfront/",
  "project_urls": {
    "Homepage": "https://github.com/aws/aws-cdk",
    "Source": "https://github.com/aws/aws-cdk.git"
  },
  "release_url": "https://pypi.org/project/aws-cdk.aws-cloudfront/1.204.0/",
  "requires_dist": [
    "aws-cdk.aws-certificatemanager (==1.204.0)",
    "aws-cdk.aws-cloudwatch (==1.204.0)",
    "aws-cdk.aws-ec2 (==1.204.0)",
    "aws-cdk.aws-iam (==1.204.0)",
    "aws-cdk.aws-kms (==1.204.0)",
    "aws-cdk.aws-lambda (==1.204.0)",
    "aws-cdk.aws-s3 (==1.204.0)",
    "aws-cdk.aws-ssm (==1.204.0)",
    "aws-cdk.core (==1.204.0)",
    "aws-cdk.cx-api (==1.204.0)",
    "constructs (<4.0.0,>=3.3.69)",
    "jsii (<2.0.0,>=1.84.0)",
    "publication (>=0.0.3)",
    "typeguard (~=2.13.3)"
  ],
  "requires_python": "~=3.7",
  "summary": "the cdk construct library for aws::cloudfront",
  "version": "1.204.0",
  "releases": [],
  "developers": [
    "amazon_web_services"
  ],
  "kwds": "aws_cloudfront_origins cloudfront cloudfrontwebdistribution amazoncloudfront aws_cdk",
  "license_kwds": "apache-2.0",
  "libtype": "pypi",
  "id": "pypi_aws_cdk.aws_cloudfront",
  "homepage": "https://github.com/aws/aws-cdk",
  "release_count": 258,
  "dependency_ids": [
    "pypi_aws_cdk.aws_certificatemanager",
    "pypi_aws_cdk.aws_cloudwatch",
    "pypi_aws_cdk.aws_ec2",
    "pypi_aws_cdk.aws_iam",
    "pypi_aws_cdk.aws_kms",
    "pypi_aws_cdk.aws_lambda",
    "pypi_aws_cdk.aws_s3",
    "pypi_aws_cdk.aws_ssm",
    "pypi_aws_cdk.core",
    "pypi_aws_cdk.cx_api",
    "pypi_constructs",
    "pypi_jsii",
    "pypi_publication",
    "pypi_typeguard"
  ],
  "documentation_summary": "The HTML text provides information about the `aws-cdk.aws-cloudfront` package version 1.204.0, released on June 19, 2023, available on PyPI for installation. This package, part of the AWS Cloud Development Kit (CDK), facilitates the deployment and management of AWS CloudFront distributions. It requires Python version 3.7 or newer and is licensed under the Apache-2.0 license. The package is now inactive as AWS CDK v1 has reached end-of-support on June 1, 2023, and users are encouraged to migrate to AWS CDK v2. The document details various features of CloudFront distributions, such as creating distributions, configuring behaviors, origins, cache policies, and integrating with Lambda@Edge for content customization. It also covers logging, importing existing distributions, and migrating from the original CloudFrontWebDistribution to the newer Distribution construct.",
  "embedding": [
    -0.014515635557472706,
    0.028593476861715317,
    -0.00911844614893198,
    -0.013660567812621593,
    0.020918386057019234,
    0.017580199986696243,
    -0.021643484011292458,
    -0.021014153957366943,
    0.0018999612657353282,
    -0.00028174492763355374,
    0.005961534567177296,
    0.009200532920658588,
    -0.0115263182669878,
    0.021725570783019066,
    -0.027964146807789803,
    0.006525879725813866,
    0.01636258326470852,
    -0.031521230936050415,
    -0.017689649015665054,
    -0.008940592408180237,
    0.013982073403894901,
    -0.015186008997261524,
    -0.018688367679715157,
    -0.015322820283472538,
    -0.0078392643481493,
    0.01151947770267725,
    0.002395900897681713,
    -0.029359618201851845,
    0.011649447493255138,
    -0.0012355734361335635,
    0.0352698490023613,
    0.0021376702934503555,
    -0.014050479047000408,
    -0.015131285414099693,
    -0.024188166484236717,
    -0.02332625724375248,
    -0.00031680273241363466,
    -0.005024380050599575,
    0.027772611007094383,
    -0.00863276794552803,
    0.00774349644780159,
    0.011156928725540638,
    0.0022881622426211834,
    -0.0032595195807516575,
    0.0005746057722717524,
    0.009056881070137024,
    0.02184869907796383,
    -0.01744338870048523,
    -0.018401065841317177,
    0.005256958771497011,
    0.021903423592448235,
    0.03354603052139282,
    -0.0008610535878688097,
    -0.028005190193653107,
    0.0027789713349193335,
    -0.012230893597006798,
    -0.004706294741481543,
    0.030043672770261765,
    0.01580165885388851,
    -0.012613964267075062,
    0.02028905600309372,
    0.004326644353568554,
    -0.015938470140099525,
    -0.020740531384944916,
    -0.013571640476584435,
    -0.0025669143069535494,
    -0.02617192454636097,
    0.017881184816360474,
    -0.004319803789258003,
    0.0030406222213059664,
    0.042384013533592224,
    0.03521512448787689,
    0.0013330511283129454,
    -0.010767017491161823,
    0.005742637440562248,
    0.0025976968463510275,
    -0.034476347267627716,
    0.02079525589942932,
    -0.01834634132683277,
    -0.0011064581340178847,
    0.00664216885343194,
    0.008475434966385365,
    0.03160331770777702,
    0.03732201084494591,
    0.009207373484969139,
    0.01883886009454727,
    -0.000961096549872309,
    0.022300176322460175,
    -0.00011992330109933391,
    -0.007757177576422691,
    -0.010534439235925674,
    -0.016225771978497505,
    0.010301860049366951,
    0.029250169172883034,
    -0.019044077023863792,
    0.011471593752503395,
    -0.019071439281105995,
    0.02998894825577736,
    0.0021496412809938192,
    -0.02658235654234886,
    -0.0016639624955132604,
    0.01733393967151642,
    -0.022861100733280182,
    -0.0015528036747127771,
    -0.029195444658398628,
    -0.017101362347602844,
    -0.017032956704497337,
    0.016731971874833107,
    0.013503235764801502,
    0.0013860653853043914,
    -0.029469067230820656,
    0.018209530040621758,
    -0.012333502061665058,
    -0.02323048934340477,
    -0.003358707530423999,
    -0.028976548463106155,
    -0.0016058179317042232,
    -0.004501078277826309,
    -0.01577429659664631,
    -0.006727675907313824,
    -0.011882026679813862,
    0.03784189373254776,
    0.010513917542994022,
    -0.016307858750224113,
    -0.016731971874833107,
    -0.004241137765347958,
    -0.036035988479852676,
    -0.014002595096826553,
    0.011533158831298351,
    -0.033874377608299255,
    0.006731096189469099,
    0.0036767928395420313,
    0.014077841304242611,
    -0.0549158938229084,
    -0.027403222396969795,
    0.01293546985834837,
    -0.012983353808522224,
    0.014324100688099861,
    -0.027225367724895477,
    -0.015651166439056396,
    0.008749056607484818,
    0.03048146702349186,
    -0.007209934294223785,
    -0.014324100688099861,
    -0.015008155256509781,
    0.03537929803133011,
    0.007688772398978472,
    -0.009392067790031433,
    0.019947027787566185,
    -0.011806780472397804,
    0.016690928488969803,
    0.023367300629615784,
    -0.030508829280734062,
    -0.013934189453721046,
    0.013058600015938282,
    0.027676844969391823,
    -0.004377948585897684,
    0.004357426892966032,
    -0.015829021111130714,
    -0.011635766364634037,
    0.017771735787391663,
    0.02804623357951641,
    -0.007921351119875908,
    -0.027225367724895477,
    0.027512671425938606,
    0.032588355243206024,
    0.009816181845963001,
    -0.0353245735168457,
    -0.008051320910453796,
    0.003769140224903822,
    0.024735409766435623,
    0.002835405757650733,
    -0.043861571699380875,
    -0.00033582799369469285,
    -0.014337781816720963,
    0.014187289401888847,
    0.006231736391782761,
    0.016786696389317513,
    -0.014009435661137104,
    -0.012025677599012852,
    0.027758929878473282,
    0.0029294632840901613,
    -0.002216336550191045,
    0.018879903480410576,
    -0.007244137115776539,
    -0.011738374829292297,
    0.009994035586714745,
    -0.0013595583150163293,
    0.007593004498630762,
    0.01533650141209364,
    0.01221037283539772,
    0.04643361642956734,
    -0.00011479289241833612,
    -0.02138354256749153,
    -0.598027765750885,
    -0.009494676254689693,
    -0.019947027787566185,
    -0.05595565587282181,
    -0.024625960737466812,
    -0.0030132599640637636,
    0.015623804181814194,
    0.04178204759955406,
    -0.024844858795404434,
    0.036610595881938934,
    -0.020371142774820328,
    0.042493462562561035,
    -0.013797379098832607,
    -0.018592599779367447,
    -0.025911983102560043,
    -0.005404030438512564,
    -0.014296738430857658,
    -0.0024215527810156345,
    -0.0027191166300326586,
    0.008571202866733074,
    -0.009597284719347954,
    0.024625960737466812,
    -0.039839331060647964,
    -0.0019290336640551686,
    0.013441670686006546,
    0.021588759496808052,
    -0.0010508786654099822,
    -0.01860628090798855,
    0.0191124826669693,
    0.009180011227726936,
    -0.022696927189826965,
    0.041426338255405426,
    0.015664847567677498,
    -0.004193253815174103,
    0.04071492329239845,
    0.006289880722761154,
    -0.02784101665019989,
    0.020124882459640503,
    -0.0015143256168812513,
    0.04498342052102089,
    -0.025323696434497833,
    0.020535314455628395,
    -0.000982473255135119,
    0.0033245047088712454,
    0.004415571689605713,
    0.0038751685060560703,
    0.02411976084113121,
    0.006843965034931898,
    -0.0034955183509737253,
    -0.03130233287811279,
    0.015623804181814194,
    -0.028183044865727425,
    0.02067212574183941,
    -0.017703330144286156,
    0.0036802131216973066,
    -0.016704609617590904,
    0.03157595545053482,
    -0.013920508325099945,
    0.01510392315685749,
    0.0063822283409535885,
    -0.02069948799908161,
    0.023093679919838905,
    -0.022395944222807884,
    -0.02432497777044773,
    -0.01038394682109356,
    -0.01587006449699402,
    0.009932471439242363,
    -0.018387384712696075,
    0.00827705953270197,
    -0.0007020109333097935,
    -0.008201813325285912,
    0.011136407032608986,
    -0.010356584563851357,
    0.002551523270085454,
    0.031521230936050415,
    0.01648571342229843,
    0.033080875873565674,
    -0.02324417047202587,
    -0.0018024835735559464,
    0.03247890621423721,
    0.030016310513019562,
    0.0031415200792253017,
    -0.008099204860627651,
    -0.020357461646199226,
    0.018209530040621758,
    -0.01872941106557846,
    -0.001308254199102521,
    -0.023586198687553406,
    -0.023558836430311203,
    -0.015651166439056396,
    0.003486967645585537,
    0.024584917351603508,
    0.0032150561455637217,
    -0.029441704973578453,
    -0.009138967841863632,
    0.025761490687727928,
    0.018948309123516083,
    0.003252679016441107,
    -0.05280900374054909,
    -0.007647729013115168,
    -0.006820023059844971,
    -0.0016237742966040969,
    -0.012661848217248917,
    -0.008160769939422607,
    0.051030464470386505,
    0.02225913293659687,
    -0.01524073351174593,
    -0.0002584443427622318,
    0.034941501915454865,
    -0.02952379174530506,
    -0.025214247405529022,
    -0.02020696923136711,
    -0.004832844715565443,
    0.0002772558364085853,
    0.030125759541988373,
    -0.019933346658945084,
    0.002043612767010927,
    0.004182992968708277,
    0.003021810669451952,
    0.016116322949528694,
    0.004182992968708277,
    0.00042261742055416107,
    0.021301455795764923,
    -0.015295458026230335,
    0.02324417047202587,
    0.0058178831823170185,
    0.0041282689198851585,
    -0.029277531430125237,
    -0.023463068529963493,
    0.008981634862720966,
    0.01440618745982647,
    0.02853875234723091,
    0.03461315482854843,
    -0.005205654539167881,
    0.040933821350336075,
    -0.0018999612657353282,
    0.047008223831653595,
    0.0034749966580420732,
    0.0023086839355528355,
    -0.036720044910907745,
    -0.024147123098373413,
    0.010746495798230171,
    0.00497649610042572,
    -0.018647324293851852,
    0.00315007078461349,
    -0.0002505349402781576,
    -0.013209091499447823,
    -0.00037879517185501754,
    -0.013113324530422688,
    0.015008155256509781,
    -0.005814462900161743,
    -0.0015305718407034874,
    -0.02421552874147892,
    0.033463943749666214,
    -0.0027738409116864204,
    -0.020357461646199226,
    0.004569483920931816,
    -0.029934223741292953,
    0.010596003383398056,
    -0.006635328289121389,
    0.01883886009454727,
    0.004466875921934843,
    -0.015076560899615288,
    -0.008803781121969223,
    -0.027676844969391823,
    0.015500674024224281,
    -0.010992755182087421,
    0.031138159334659576,
    -0.016595162451267242,
    -0.04501078277826309,
    -0.006228316109627485,
    -0.0015878614503890276,
    -0.019646044820547104,
    0.016786696389317513,
    0.034941501915454865,
    0.023887181654572487,
    0.010062441229820251,
    0.014036797918379307,
    0.01998807117342949,
    -0.004145370330661535,
    -0.003546822350472212,
    0.011252695694565773,
    -0.026308735832571983,
    -0.024297615513205528,
    0.021629802882671356,
    0.01714240573346615,
    0.004446354229003191,
    0.012846543453633785,
    -0.04334169253706932,
    -0.006854225881397724,
    -0.022204408422112465,
    0.005516899283975363,
    -0.008926911279559135,
    0.02784101665019989,
    -0.02618560567498207,
    -0.003192824311554432,
    -0.009282619692385197,
    0.009932471439242363,
    0.009398908354341984,
    0.029441704973578453,
    0.009775138460099697,
    0.027020152658224106,
    0.004179572686553001,
    -0.009180011227726936,
    -0.008708013221621513,
    -0.01363320555537939,
    0.016704609617590904,
    -0.013599002733826637,
    0.014857662841677666,
    0.00808552373200655,
    0.028005190193653107,
    0.0009072272223420441,
    -0.01734762080013752,
    -0.036309611052274704,
    0.014939749613404274,
    0.002616508398205042,
    -0.015186008997261524,
    -0.00669347308576107,
    -0.015924789011478424,
    0.007921351119875908,
    0.007620366755872965,
    0.010219774208962917,
    0.021506672725081444,
    -0.027280092239379883,
    -0.01235402375459671,
    -0.006084664724767208,
    0.004641309846192598,
    0.007791380397975445,
    0.007004717830568552,
    -0.027293773368000984,
    -0.0025652043987065554,
    0.015131285414099693,
    0.008379667066037655,
    -0.02224545180797577,
    0.001270631211809814,
    -0.0134758735075593,
    0.02491326443850994,
    -0.03568028286099434,
    0.03767772018909454,
    -0.014967111870646477,
    0.029879499226808548,
    -0.0032475485932081938,
    0.05029168352484703,
    -0.011581041850149632,
    -0.0026780732441693544,
    0.013195411302149296,
    0.0030354917980730534,
    0.008359145373106003,
    0.026596037670969963,
    -0.012586602009832859,
    0.0004719975986517966,
    -0.0007370687089860439,
    0.0054519143886864185,
    0.013660567812621593,
    0.014187289401888847,
    0.013790538534522057,
    0.0067789796739816666,
    -0.00531852338463068,
    0.026705486699938774,
    0.02038482390344143,
    0.0015998324379324913,
    0.005886288825422525,
    0.03972988575696945,
    0.009166330099105835,
    0.03989405557513237,
    -0.028702925890684128,
    -0.02048059180378914,
    -0.035050950944423676,
    -0.02135618031024933,
    -0.019372422248125076,
    0.0006147939711809158,
    -0.022505391389131546,
    0.02949642948806286,
    -0.03097398579120636,
    0.01764860562980175,
    0.02109624072909355,
    0.021602440625429153,
    0.019659725949168205,
    0.006057302467525005,
    0.00715520977973938,
    -0.008126567117869854,
    -0.0362548865377903,
    0.019947027787566185,
    0.011608404107391834,
    -0.003218476427718997,
    0.00026934646302834153,
    -0.007620366755872965,
    0.03379229083657265,
    -0.026828616857528687,
    0.041508425027132034,
    -0.0015981222968548536,
    0.012812340632081032,
    0.007681931834667921,
    -0.0038751685060560703,
    -0.023887181654572487,
    -0.007565642707049847,
    0.00450791884213686,
    -0.004805482923984528,
    -0.010944871231913567,
    -0.0007614381611347198,
    0.008926911279559135,
    -0.007148369215428829,
    0.020124882459640503,
    0.020220650359988213,
    0.05362987145781517,
    0.01210776437073946,
    -0.009781979024410248,
    0.004863627254962921,
    -0.0018879903946071863,
    -0.016143685206770897,
    -0.00911160558462143,
    0.002707145642489195,
    -0.004374528303742409,
    -0.014953430742025375,
    0.006727675907313824,
    -0.00647115521132946,
    0.011622085236012936,
    -0.02903127111494541,
    0.030016310513019562,
    -0.014255695044994354,
    -0.005985476542264223,
    -0.016499394550919533,
    -4.807085861102678e-05,
    0.015842702239751816,
    0.025556275621056557,
    0.007045761216431856,
    0.0005878593074157834,
    0.022984230890870094,
    -0.025802534073591232,
    -0.015021836385130882,
    -0.03992141783237457,
    -0.013188570737838745,
    0.011485274881124496,
    -0.0069841961376369,
    -0.019139844924211502,
    -0.003358707530423999,
    0.010787539184093475,
    0.0035947063006460667,
    0.0166772473603487,
    0.012422429397702217,
    0.0020521634723991156,
    0.005975215695798397,
    -0.014132565818727016,
    -0.027799973264336586,
    -0.008201813325285912,
    0.011676809750497341,
    0.0333271324634552,
    0.015965832397341728,
    0.00524327764287591,
    0.02608983777463436,
    -0.010171890258789062,
    0.007346745114773512,
    -0.003011549822986126,
    -0.025173204019665718,
    0.0012697761412709951,
    -0.01831897906959057,
    0.002895260462537408,
    0.04979916661977768,
    -0.02362724207341671,
    0.040140315890312195,
    0.007346745114773512,
    0.013585321605205536,
    0.0051611908711493015,
    -0.010999595746397972,
    0.012914948165416718,
    -0.005236437078565359,
    0.0005228741210885346,
    0.008803781121969223,
    0.01431041955947876,
    -0.01852419599890709,
    0.006218055263161659,
    0.018948309123516083,
    -0.007442512549459934,
    0.0013587032444775105,
    0.02030273713171482,
    0.009084243327379227,
    -0.044545628130435944,
    -0.018961990252137184,
    0.015213371254503727,
    -0.015186008997261524,
    0.03959307447075844,
    0.005287741310894489,
    0.00829074066132307,
    -0.053082626312971115,
    -0.017894865944981575,
    -0.021985510364174843,
    -0.021233050152659416,
    -0.008783259429037571,
    -0.0042992825619876385,
    -0.007223615422844887,
    0.01535018254071474,
    0.029003910720348358,
    0.0028747390024363995,
    -0.028484027832746506,
    -0.01073281466960907,
    -0.025747811421751976,
    -0.020015433430671692,
    0.017511794343590736,
    0.029003910720348358,
    0.005838404875248671,
    0.01279181893914938,
    0.004206934943795204,
    0.012655007652938366,
    -0.025063756853342056,
    -0.0007674235966987908,
    -0.01901671476662159,
    -0.00912528671324253,
    -0.053192075341939926,
    -0.014625084586441517,
    -0.011307420209050179,
    0.010137687437236309,
    -0.0038101833779364824,
    0.028073595836758614,
    0.04531176760792732,
    -0.02469436638057232,
    0.018277935683727264,
    0.012873905710875988,
    -0.028374578803777695,
    0.02235490083694458,
    0.02333993837237358,
    0.008892708458006382,
    0.007127847522497177,
    0.006378808058798313,
    -0.02410607971251011,
    -0.005085945129394531,
    0.0115263182669878,
    0.02079525589942932,
    0.00297905714251101,
    0.032998789101839066,
    0.0041180080734193325,
    -0.0005014974158257246,
    -0.005773419979959726,
    -0.014515635557472706,
    -0.0036254888400435448,
    0.00691579096019268,
    -0.022327538579702377,
    0.007859786041080952,
    0.006772139109671116,
    0.028292493894696236,
    0.009268938563764095,
    -0.011888867244124413,
    0.023285213857889175,
    -0.006679791957139969,
    -0.004973075818270445,
    0.013995754532516003,
    -0.038662757724523544,
    0.014967111870646477,
    0.017525475472211838,
    -0.017115043476223946,
    0.051522981375455856,
    -0.012265096418559551,
    -0.0026199286803603172,
    -0.028100958094000816,
    -0.002040192484855652,
    0.014638765715062618,
    0.008694332093000412,
    0.007921351119875908,
    -0.004689193330705166,
    0.013612683862447739,
    -0.005694753490388393,
    0.03310823813080788,
    -0.005691333208233118,
    -0.01348271407186985,
    -0.022669564932584763,
    -0.0196050014346838,
    0.0014886735007166862,
    0.0016212090849876404,
    -0.0035844454541802406,
    -0.010561801493167877,
    -0.02216336503624916,
    -0.018866222351789474,
    0.01842842809855938,
    0.02773156762123108,
    0.013667408376932144,
    -0.014296738430857658,
    0.01589742675423622,
    -0.010500236414372921,
    0.0036118077114224434,
    -0.0009003867162391543,
    -0.003512619761750102,
    0.026212967932224274,
    0.0005818738136440516,
    0.01686878316104412,
    0.03551610931754112,
    0.03855330869555473,
    -0.0021325398702174425,
    0.01706031896173954,
    0.006378808058798313,
    -0.005612667184323072,
    -0.03614543750882149,
    -0.012661848217248917,
    0.011252695694565773,
    -0.008947432972490788,
    -0.028894461691379547,
    0.024283934384584427,
    0.02108255960047245,
    0.02135618031024933,
    -0.002696884796023369,
    0.024571236222982407,
    0.025132160633802414,
    -0.007449353113770485,
    -0.023175764828920364,
    -0.021123602986335754,
    -0.017689649015665054,
    -0.008735375478863716,
    -0.01348271407186985,
    -0.016294177621603012,
    0.015008155256509781,
    -0.04695349931716919,
    -0.011656288057565689,
    0.024954307824373245,
    0.000228303179028444,
    0.003912791609764099,
    -0.007093644700944424,
    0.03693894296884537,
    0.0072509776800870895,
    -0.0032389978878200054,
    0.03677476942539215,
    0.035543471574783325,
    -0.014050479047000408,
    -0.003974356688559055,
    -0.011745215393602848,
    -0.00912528671324253,
    0.03713047876954079,
    0.020562676712870598,
    0.01597951166331768,
    0.0036015468649566174,
    0.0161710474640131,
    0.005646869540214539,
    0.02881237491965294,
    0.0027670003473758698,
    -0.0156785286962986,
    0.029386980459094048,
    -0.03537929803133011,
    -0.019960708916187286,
    -0.009166330099105835,
    -0.03480469062924385,
    -0.03242418169975281,
    0.03157595545053482,
    -0.022177046164870262,
    0.014912387356162071,
    0.03215055912733078,
    -0.013010716065764427,
    0.0011594723910093307,
    0.01535018254071474,
    0.005157770588994026,
    0.03863539546728134,
    0.017689649015665054,
    0.007647729013115168,
    0.016731971874833107,
    0.006888428702950478,
    -0.02410607971251011,
    -0.023257851600646973,
    -0.007729815784841776,
    -0.016827739775180817,
    0.022902144119143486,
    0.019331378862261772,
    -0.018784135580062866,
    0.001766570727340877,
    -0.013735814020037651,
    0.01558276079595089,
    -0.005339045077562332,
    -0.021014153957366943,
    0.030536191537976265,
    0.021123602986335754,
    -0.000875589728821069,
    -0.007613526191562414,
    -8.74841571203433e-05,
    0.008790099993348122,
    0.017429707571864128,
    -0.015391225926578045,
    -0.028210407122969627,
    0.022204408422112465,
    -0.014077841304242611,
    -0.003618648275732994,
    -0.0010431830305606127,
    0.005899969954043627,
    0.007483555935323238,
    0.013270656578242779,
    -0.015719572082161903,
    -0.004292441997677088,
    -0.015035517513751984,
    -0.014501955360174179,
    -0.010650727897882462,
    -0.015172327868640423,
    0.031329695135354996,
    -0.014269376173615456,
    -0.00383412535302341,
    0.03951098769903183,
    0.016020555049180984,
    -0.030262570828199387,
    0.006060722749680281,
    -0.003837545635178685,
    0.03351866826415062,
    -0.0038580673281103373,
    -0.003550242632627487,
    -0.011882026679813862,
    -0.010171890258789062,
    0.012073561549186707,
    -0.0063822283409535885,
    0.008365985937416553,
    -0.020713169127702713,
    -0.0031517809256911278,
    -0.026295054703950882,
    0.007189412601292133,
    -0.03028993308544159,
    -0.025761490687727928,
    -0.014693490229547024,
    0.013222772628068924,
    -0.024393383413553238,
    -0.007045761216431856,
    -0.010951711796224117,
    0.0027191166300326586,
    -0.016348902136087418,
    -0.01509024202823639,
    -0.008735375478863716,
    -0.009631486609578133,
    0.0137289734557271,
    0.009911949746310711,
    0.0016425858484581113,
    0.004921772051602602,
    0.04421728104352951,
    -0.03179485350847244,
    0.008304421789944172,
    -0.006912370678037405,
    -0.01166312862187624,
    -0.03048146702349186,
    0.008345464244484901,
    0.012525037862360477,
    -0.0025720447301864624,
    0.034859415143728256,
    -0.007579323370009661,
    -0.04265763610601425,
    -0.031247608363628387,
    0.021109921857714653,
    0.020904704928398132,
    0.00911160558462143,
    -0.023203127086162567,
    -0.002315524499863386,
    0.020726850256323814,
    0.013311699964106083,
    -0.004374528303742409,
    -0.031028710305690765,
    0.02922280691564083,
    4.032180368085392e-05,
    -0.018360022455453873,
    0.03409327566623688,
    -0.006050461903214455,
    0.02784101665019989,
    -0.023764053359627724,
    0.009439951740205288,
    0.01648571342229843,
    -0.02178029529750347,
    -0.011245855130255222,
    -0.010363425128161907,
    0.0014920937828719616,
    -0.01834634132683277,
    0.017101362347602844,
    -0.030043672770261765,
    -0.030563553795218468,
    -0.01883886009454727,
    0.024092398583889008,
    0.01823689229786396,
    -0.015199690125882626,
    0.04418991878628731,
    0.03803342953324318,
    -0.0015681949444115162,
    0.0024335237685590982,
    -0.019550276920199394,
    -0.027676844969391823,
    -0.028484027832746506,
    -0.016499394550919533,
    -0.03414800018072128,
    -0.01025397703051567,
    -0.007298861164599657,
    0.03286197781562805,
    0.009255257435142994,
    -0.016827739775180817,
    -0.014720852486789227,
    -0.005075684282928705,
    -0.022300176322460175,
    -0.006891848985105753,
    -0.015569079667329788,
    0.032396819442510605,
    0.009351024404168129,
    0.01589742675423622,
    0.000238991531659849,
    0.01417360920459032,
    -0.012627645395696163,
    0.042493462562561035,
    -0.007127847522497177,
    0.004364267457276583,
    0.005130408797413111,
    -0.00016224916907958686,
    0.004607107024639845,
    -0.028593476861715317,
    -0.017320258542895317,
    0.0016485713422298431,
    0.010342903435230255,
    0.019345059990882874,
    0.00842755101621151,
    0.02372300997376442,
    -0.011102204211056232,
    -0.001846947125159204,
    -0.008448072709143162,
    -0.0069397324696183205,
    -0.006241997238248587,
    0.012121445499360561,
    0.006187272723764181,
    -0.01842842809855938,
    -0.01548699289560318,
    -0.006139388773590326,
    0.0030132599640637636,
    0.005776840262115002,
    -0.0001577600633027032,
    0.0004531861050054431,
    -0.029386980459094048,
    0.0029243328608572483,
    0.0021171486005187035,
    -0.03450370952486992,
    -0.007257817778736353,
    -0.004306123126298189,
    0.013708451762795448,
    0.0014878184301778674,
    0.012914948165416718,
    0.03349130600690842,
    0.006638748571276665,
    -0.012887585908174515,
    -0.02812832035124302,
    0.004131689202040434,
    -0.03502358868718147,
    -0.0060025779530406,
    -0.003632329171523452,
    -0.004377948585897684,
    -0.01489870622754097,
    -0.0003668242134153843,
    0.019577639177441597,
    -0.004719975870102644,
    -0.018866222351789474,
    0.0020846559200435877,
    0.010130846872925758,
    -0.048184797167778015,
    0.012648167088627815,
    -0.00030141149181872606,
    0.005034640897065401,
    0.008742216043174267,
    0.02254643477499485,
    -0.012121445499360561,
    0.001874309265986085,
    0.004138529766350985,
    0.0022454087156802416,
    -0.01645835116505623,
    0.012867065146565437,
    0.0033706785179674625,
    -0.03614543750882149,
    -0.0284293033182621,
    0.007620366755872965,
    -0.0069841961376369,
    -0.010609684512019157,
    0.02706119418144226,
    0.1636258363723755,
    0.022902144119143486,
    0.007517758756875992,
    0.02049427293241024,
    0.007791380397975445,
    0.004932032898068428,
    0.001889700535684824,
    0.016034236177802086,
    -0.029386980459094048,
    0.03242418169975281,
    -0.012367704883217812,
    0.005024380050599575,
    -0.024721728637814522,
    0.011813621036708355,
    0.006241997238248587,
    -0.005178292281925678,
    -0.028073595836758614,
    -0.024256572127342224,
    -0.020918386057019234,
    0.0050209597684443,
    0.024078717455267906,
    -0.006997877266258001,
    -0.002481407718732953,
    -0.022724289447069168,
    0.016786696389317513,
    -0.039675161242485046,
    -0.00842755101621151,
    0.01406416017562151,
    0.000622062012553215,
    0.020521635189652443,
    -0.01833266019821167,
    0.015131285414099693,
    -0.0023787994869053364,
    -0.014023116789758205,
    -0.04580428823828697,
    -0.02253275364637375,
    -0.00524327764287591,
    0.0032389978878200054,
    0.0166498851031065,
    0.04235665500164032,
    -0.021547716110944748,
    -0.05658498778939247,
    -0.005937593057751656,
    -0.03814287856221199,
    0.004514759406447411,
    -0.01587006449699402,
    -0.015500674024224281,
    0.001222747378051281,
    -0.01578797772526741,
    0.015281776897609234,
    -0.01607527956366539,
    -0.0006806342280469835,
    0.005752898287028074,
    0.030262570828199387,
    -0.012504516169428825,
    -0.00433690520003438,
    0.022696927189826965,
    0.011471593752503395,
    0.013106483966112137,
    0.004094066098332405,
    -0.033983826637268066,
    0.02292950637638569,
    -0.0191261637955904,
    -0.004511339124292135,
    -0.027211686596274376,
    0.008639607578516006,
    -0.030262570828199387,
    0.005841825157403946,
    -0.006881588138639927,
    0.016937188804149628,
    -0.025419464334845543,
    -0.026035113260149956,
    0.008831143379211426,
    0.00037024449557065964,
    0.016636203974485397,
    -0.021137284114956856,
    0.03401118889451027,
    0.0003758024249691516,
    0.00955624133348465,
    0.04252082481980324,
    -0.013947870582342148,
    0.018004313111305237,
    -0.027430584654211998,
    -0.007278339471668005,
    0.013099643401801586,
    -0.014542997814714909,
    0.027895741164684296,
    -0.00502780033275485,
    0.002626769244670868,
    -0.009043199941515923,
    -0.017197130247950554,
    -0.00610518641769886,
    0.006820023059844971,
    -0.015281776897609234,
    0.019167207181453705,
    0.028210407122969627,
    -0.006553241983056068,
    8.330233868036885e-06,
    -0.0025583638343960047,
    0.024721728637814522,
    -0.02234121970832348,
    0.06742040812969208,
    0.014337781816720963,
    0.02509111911058426,
    -0.004668671637773514,
    0.0039982981979846954,
    -0.009857225231826305,
    0.01766228675842285,
    -0.003225316759198904,
    -0.015760615468025208,
    -0.0033706785179674625,
    -0.0230389554053545,
    -0.006590865086764097,
    0.0004484832170419395,
    -0.009569922462105751,
    0.0020846559200435877,
    -0.03108343482017517,
    -0.0027618699241429567,
    -0.010719133540987968,
    -0.0066763716749846935,
    -0.014187289401888847,
    -0.02020696923136711,
    0.011396347545087337,
    0.01396155171096325,
    -0.006881588138639927,
    0.0014664417831227183,
    -0.005742637440562248,
    0.005554522387683392,
    -0.0156922098249197,
    -0.02559731900691986,
    0.01421465165913105,
    -0.013640046119689941,
    0.03537929803133011,
    0.0028849998489022255,
    -0.0083317831158638,
    -0.010664409026503563,
    -0.001580165815539658,
    -0.004627628717571497,
    0.0031517809256911278,
    0.04178204759955406,
    -0.00843439158052206,
    -0.00473023671656847,
    0.006477995775640011,
    -0.019440827891230583,
    0.010226614773273468,
    -0.03206847235560417,
    0.011382666416466236,
    -0.021233050152659416,
    -0.02138354256749153,
    -0.010363425128161907,
    -0.001270631211809814,
    -0.008365985937416553,
    0.01892094686627388,
    -0.002972216811031103,
    0.01597951166331768,
    -0.004285601433366537,
    -0.014009435661137104,
    -0.021725570783019066,
    0.02567940577864647,
    0.012189851142466068,
    -0.040331851691007614,
    -0.02275165170431137,
    0.0021581919863820076,
    5.8198071201331913e-05,
    -0.01981021836400032,
    0.0050688437186181545,
    -0.17216283082962036,
    0.005681072361767292,
    0.004805482923984528,
    -0.028785012662410736,
    -0.004377948585897684,
    -0.032889340072870255,
    0.013899986632168293,
    0.018086399883031845,
    -0.017197130247950554,
    -0.001846947125159204,
    0.02470804750919342,
    0.022272814065217972,
    -0.009734095074236393,
    -0.014679809100925922,
    -0.009638327173888683,
    -0.006806341931223869,
    -0.032697804272174835,
    0.01881149783730507,
    0.018154805526137352,
    0.012395067140460014,
    0.0372399240732193,
    -0.021150965243577957,
    0.019823899492621422,
    0.010609684512019157,
    -0.01535018254071474,
    -0.009433111175894737,
    -0.010424990206956863,
    0.001735788187943399,
    -0.0003952552215196192,
    -0.005954694002866745,
    -0.015172327868640423,
    0.0076066856272518635,
    0.012497675605118275,
    -0.004542121663689613,
    0.024461787194013596,
    -0.004668671637773514,
    0.015760615468025208,
    -0.026035113260149956,
    -0.01872941106557846,
    0.023586198687553406,
    0.04027712717652321,
    0.016198409721255302,
    0.024174485355615616,
    -0.01548699289560318,
    -0.017826460301876068,
    0.016827739775180817,
    -0.0041658915579319,
    -0.011923069134354591,
    -0.010226614773273468,
    -0.024461787194013596,
    0.04914247244596481,
    -0.02618560567498207,
    0.004644729662686586,
    0.010281338356435299,
    0.007353585679084063,
    0.005581884644925594,
    0.009679370559751987,
    0.011266376823186874,
    -0.010336062870919704,
    -0.03548874706029892,
    -0.008557521738111973,
    -0.02028905600309372,
    0.006501937750726938,
    -0.01190938800573349,
    -0.021520353853702545,
    -0.00027362178661860526,
    -0.015541717410087585,
    0.020029114559292793,
    -0.027758929878473282,
    0.001580165815539658,
    0.017183449119329453,
    -0.00438820943236351,
    -0.003177433041855693,
    0.009152648970484734,
    -0.008311261422932148,
    0.01931769773364067,
    -0.04539385437965393,
    0.02998894825577736,
    0.036419060081243515,
    -0.027129599824547768,
    -0.015172327868640423,
    0.02892182394862175,
    -0.004251398611813784,
    0.023982949554920197,
    0.02019328810274601,
    -0.021410904824733734,
    -0.012046199291944504,
    -0.0032646500039845705,
    -0.006546401418745518,
    0.00467893248423934,
    0.0166772473603487,
    -0.027581077069044113,
    0.014707171358168125,
    -0.011102204211056232,
    0.0026729428209364414,
    0.015144966542720795,
    -0.010650727897882462,
    -0.014679809100925922,
    -0.006707154214382172,
    -0.0035707643255591393,
    -0.00106712500564754,
    -0.013311699964106083,
    -0.01861996203660965,
    -0.02873028814792633,
    0.04304070770740509,
    0.020412186160683632,
    -0.022286495193839073,
    0.029168082401156425,
    0.03483205288648605,
    -0.02782733552157879,
    0.0017853821627795696,
    0.005226176232099533,
    0.04271236062049866,
    -0.015021836385130882,
    0.0031090276315808296,
    0.010466033592820168,
    0.008913230150938034,
    -0.008372826501727104,
    0.011300579644739628,
    -0.0014493403723463416,
    0.031192883849143982,
    0.007257817778736353,
    -0.016608843579888344,
    0.0078392643481493,
    -0.026992790400981903,
    -0.024160804226994514,
    -0.09729991108179092,
    -0.024831177666783333,
    0.014953430742025375,
    -0.012757616117596626,
    -0.035133037716150284,
    -0.011252695694565773,
    -0.03655587136745453,
    0.0019666566513478756,
    -0.0033091134391725063,
    -0.015021836385130882,
    -0.0115126371383667,
    0.024297615513205528,
    -0.015062879770994186,
    0.03261571750044823,
    0.0034835473634302616,
    -0.022861100733280182,
    -0.009590444155037403,
    -0.003902530763298273,
    -0.009487835690379143,
    -0.006532720290124416,
    0.0022556695621460676,
    -0.009268938563764095,
    -0.007025239523500204,
    -0.01949555240571499,
    -0.01785382255911827,
    -0.0021222790237516165,
    -0.016786696389317513,
    0.0029927382711321115,
    0.04350586608052254,
    0.02067212574183941,
    -0.004959395155310631,
    -0.01083542313426733,
    0.007784539833664894,
    0.007996596395969391,
    -0.017498113214969635,
    -0.031521230936050415,
    -0.028401941061019897,
    -0.01038394682109356,
    0.042876534163951874,
    -0.01695086993277073,
    0.0021581919863820076,
    -0.007688772398978472,
    0.017703330144286156,
    -0.012155648320913315,
    -0.023271532729268074,
    0.01533650141209364,
    -0.01763492450118065,
    0.029140720143914223,
    0.005752898287028074,
    -0.033272407948970795,
    -0.03070036508142948,
    -0.026295054703950882,
    -0.009918790310621262,
    -0.010192411951720715,
    -0.005335624795407057,
    0.005034640897065401,
    -0.016321539878845215,
    0.002289872383698821,
    -0.004750758409500122,
    -0.014118884690105915,
    -0.025419464334845543,
    -0.0073330639861524105,
    -0.013263816013932228,
    0.028183044865727425,
    0.006265939213335514,
    0.021547716110944748,
    0.03551610931754112,
    -0.0018247152911499143,
    0.01706031896173954,
    -0.02873028814792633,
    -0.01892094686627388,
    0.022491710260510445,
    -0.017032956704497337,
    0.011054320260882378,
    -0.021397223696112633,
    -0.010431830771267414,
    -0.008550681173801422,
    -0.005291161593049765,
    0.004644729662686586,
    -0.0235177930444479,
    -0.019345059990882874,
    0.009289459325373173,
    -0.007298861164599657,
    -0.013770016841590405,
    0.026746530085802078,
    0.014693490229547024,
    0.014242013916373253,
    -0.006170171312987804,
    0.025624681264162064,
    -0.032205283641815186,
    0.022300176322460175,
    -0.008051320910453796,
    0.03160331770777702,
    0.017908547073602676,
    -0.010212933644652367,
    -0.00886534620076418,
    0.01558276079595089,
    -0.014789258129894733,
    -0.033983826637268066,
    0.013674248941242695,
    -0.05382140725851059,
    0.012634485960006714,
    -0.08608141541481018,
    0.027717886492609978,
    -4.024164081783965e-05,
    -0.0068679070100188255,
    0.012826021760702133,
    -0.01939978450536728,
    0.004514759406447411,
    -0.022218089550733566,
    0.01558276079595089,
    0.02588462084531784,
    -0.035242486745119095,
    -0.0006472865352407098,
    -0.007189412601292133,
    0.03247890621423721,
    -0.016909826546907425,
    0.0006887573399581015,
    0.02686966024339199,
    0.0022984230890870094,
    0.04194622114300728,
    -0.010849104262888432,
    0.0013441670453175902,
    -0.012312980368733406,
    0.04851314425468445,
    -0.0008678940939716995,
    -0.028867099434137344,
    0.012360864318907261,
    -0.006159910466521978,
    0.013564799912273884,
    0.0036562711466103792,
    -0.00038221542490646243,
    0.015418588183820248,
    -0.004203514661639929,
    -0.006625067442655563,
    0.03256099298596382,
    0.008140248246490955,
    0.005099626258015633,
    -0.003632329171523452,
    0.019755493849515915,
    0.005472435615956783,
    -0.00345789548009634,
    -0.0005113307270221412,
    -0.023257851600646973,
    0.013072281144559383,
    0.007572483271360397,
    0.01259344257414341,
    -0.004360847175121307,
    0.004350586328655481,
    0.002888420131057501,
    0.04988125339150429,
    0.019290335476398468,
    0.026226649060845375,
    0.0022385683842003345,
    -0.02087734267115593,
    -0.032588355243206024,
    0.010158209130167961,
    -0.0021496412809938192,
    0.04071492329239845,
    -0.022587478160858154,
    -0.023681966587901115,
    0.002806333592161536,
    0.002334335818886757,
    -0.0017272375989705324,
    0.013934189453721046,
    0.008974794298410416,
    0.01406416017562151,
    -0.014036797918379307,
    -0.03688421845436096,
    -0.013161208480596542,
    -0.004997017793357372,
    -0.002209495985880494,
    -0.020562676712870598,
    -0.02812832035124302,
    0.021616121754050255,
    -0.003946994431316853,
    0.025829896330833435,
    -0.03669268265366554,
    -0.009501516819000244,
    -0.018688367679715157,
    -0.00784610491245985,
    0.01338694617152214,
    0.01524073351174593,
    0.012141967192292213,
    -0.02930489368736744,
    0.014324100688099861,
    0.007189412601292133,
    -0.01406416017562151,
    -0.017197130247950554,
    -0.025556275621056557,
    -0.007018398959189653,
    0.017990631982684135,
    -0.007237296551465988,
    0.002493378473445773,
    0.016499394550919533,
    0.030016310513019562,
    0.015049198642373085,
    -0.0008696042350493371,
    -0.005605826620012522,
    -0.024256572127342224,
    0.009487835690379143,
    0.02048059180378914,
    -0.0038888496346771717,
    -0.0011021827813237906,
    0.003909371327608824,
    -0.001612658379599452,
    -0.015993192791938782,
    -0.007257817778736353,
    0.019960708916187286,
    -0.047062948346138,
    0.007442512549459934,
    0.010561801493167877,
    0.006895269267261028,
    -0.0240239929407835,
    0.017128724604845047,
    0.011642606928944588,
    -0.01753915660083294,
    0.011553680524230003,
    -0.007216774858534336,
    0.011936750262975693,
    -0.027074875310063362,
    0.002460886025801301,
    -0.0017905125860124826,
    0.009200532920658588,
    0.03986669331789017,
    -0.003374098800122738,
    0.0033894898369908333,
    0.00268149352632463,
    0.009474154561758041,
    -0.004124848637729883,
    0.015528036281466484,
    0.002684913808479905,
    -0.009850384667515755,
    0.012169329449534416,
    -0.0230526365339756,
    0.0023138143587857485,
    -0.009932471439242363,
    -0.004624208435416222,
    0.014529316686093807,
    0.011348463594913483,
    -0.01533650141209364,
    0.07929559797048569,
    0.0021017573308199644,
    -0.01844210922718048,
    0.0024489150382578373,
    -0.010062441229820251,
    0.018373703584074974,
    0.018360022455453873,
    -0.027102237567305565,
    0.016841420903801918,
    -0.00922105461359024,
    0.009330502711236477,
    0.013995754532516003,
    -0.0195913203060627,
    0.004073544405400753,
    -0.026910703629255295,
    0.008646448142826557,
    -0.014597722329199314,
    0.02529633417725563,
    -0.0083317831158638,
    0.012525037862360477,
    0.016526756808161736,
    0.02755371481180191,
    0.011457912623882294,
    -0.01989230327308178,
    -0.056530263274908066,
    -0.011977793648838997,
    0.03215055912733078,
    0.022423306480050087,
    -0.006837124470621347,
    -0.047883812338113785,
    0.006231736391782761,
    0.014542997814714909,
    -0.019358741119503975,
    -0.029852136969566345,
    -0.0038785887882113457,
    0.01764860562980175,
    -0.018770454451441765,
    -0.013441670686006546,
    -0.0016135134501382709,
    -0.007305701728910208,
    0.002226597396656871,
    0.008201813325285912,
    -0.02608983777463436,
    -0.02488590218126774,
    0.028785012662410736,
    -0.005164611153304577,
    0.016239453107118607,
    -0.009864065796136856,
    -0.02968796342611313
  ]
}
{
  "classifiers": [
    "development status :: 7 - inactive",
    "framework :: aws cdk",
    "framework :: aws cdk :: 1",
    "intended audience :: developers",
    "license :: osi approved",
    "operating system :: os independent",
    "programming language :: javascript",
    "programming language :: python :: 3 :: only",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "typing :: typed"
  ],
  "description": "the cdk construct library for aws::appsync\n# aws appsync construct library\n\n<!--begin stability banner-->---\n\n\n![end-of-support](https://img.shields.io/badge/end--of--support-critical.svg?style=for-the-badge)\n\n> aws cdk v1 has reached end-of-support on 2023-06-01.\n> this package is no longer being updated, and users should migrate to aws cdk v2.\n>\n> for more information on how to migrate, see the [*migrating to aws cdk v2* guide](https://docs.aws.amazon.com/cdk/v2/guide/migrating-v2.html).\n\n---\n<!--end stability banner-->\n\nthe `@aws-cdk/aws-appsync` package contains constructs for building flexible\napis that use graphql.\n\n```python\nimport aws_cdk.aws_appsync as appsync\n```\n\n## example\n\n### dynamodb\n\nexample of a graphql api with `aws_iam` [authorization](#authorization) resolving into a dynamodb\nbackend data source.\n\ngraphql schema file `schema.graphql`:\n\n```gql\ntype demo {\n  id: string!\n  version: string!\n}\ntype query {\n  getdemos: [ demo! ]\n}\ninput demoinput {\n  version: string!\n}\ntype mutation {\n  adddemo(input: demoinput!): demo\n}\n```\n\ncdk stack file `app-stack.ts`:\n\n```python\napi = appsync.graphqlapi(self, \"api\",\n    name=\"demo\",\n    schema=appsync.schema.from_asset(path.join(__dirname, \"schema.graphql\")),\n    authorization_config=appsync.authorizationconfig(\n        default_authorization=appsync.authorizationmode(\n            authorization_type=appsync.authorizationtype.iam\n        )\n    ),\n    xray_enabled=true\n)\n\ndemo_table = dynamodb.table(self, \"demotable\",\n    partition_key=dynamodb.attribute(\n        name=\"id\",\n        type=dynamodb.attributetype.string\n    )\n)\n\ndemo_ds = api.add_dynamo_db_data_source(\"demodatasource\", demo_table)\n\n# resolver for the query \"getdemos\" that scans the dynamodb table and returns the entire list.\ndemo_ds.create_resolver(\n    type_name=\"query\",\n    field_name=\"getdemos\",\n    request_mapping_template=appsync.mappingtemplate.dynamo_db_scan_table(),\n    response_mapping_template=appsync.mappingtemplate.dynamo_db_result_list()\n)\n\n# resolver for the mutation \"adddemo\" that puts the item into the dynamodb table.\ndemo_ds.create_resolver(\n    type_name=\"mutation\",\n    field_name=\"adddemo\",\n    request_mapping_template=appsync.mappingtemplate.dynamo_db_put_item(\n        appsync.primarykey.partition(\"id\").auto(),\n        appsync.values.projecting(\"input\")),\n    response_mapping_template=appsync.mappingtemplate.dynamo_db_result_item()\n)\n```\n\n### aurora serverless\n\nappsync provides a data source for executing sql commands against amazon aurora\nserverless clusters. you can use appsync resolvers to execute sql statements\nagainst the data api with graphql queries, mutations, and subscriptions.\n\n```python\n# build a data source for appsync to access the database.\n# api: appsync.graphqlapi\n# create username and password secret for db cluster\nsecret = rds.databasesecret(self, \"aurorasecret\",\n    username=\"clusteradmin\"\n)\n\n# the vpc to place the cluster in\nvpc = ec2.vpc(self, \"auroravpc\")\n\n# create the serverless cluster, provide all values needed to customise the database.\ncluster = rds.serverlesscluster(self, \"auroracluster\",\n    engine=rds.databaseclusterengine.aurora_mysql,\n    vpc=vpc,\n    credentials={\"username\": \"clusteradmin\"},\n    cluster_identifier=\"db-endpoint-test\",\n    default_database_name=\"demos\"\n)\nrds_ds = api.add_rds_data_source(\"rds\", cluster, secret, \"demos\")\n\n# set up a resolver for an rds query.\nrds_ds.create_resolver(\n    type_name=\"query\",\n    field_name=\"getdemosrds\",\n    request_mapping_template=appsync.mappingtemplate.from_string(\"\"\"\n          {\n            \"version\": \"2018-05-29\",\n            \"statements\": [\n              \"select * from demos\"\n            ]\n          }\n          \"\"\"),\n    response_mapping_template=appsync.mappingtemplate.from_string(\"\"\"\n            $utils.tojson($utils.rds.tojsonobject($ctx.result)[0])\n          \"\"\")\n)\n\n# set up a resolver for an rds mutation.\nrds_ds.create_resolver(\n    type_name=\"mutation\",\n    field_name=\"adddemords\",\n    request_mapping_template=appsync.mappingtemplate.from_string(\"\"\"\n          {\n            \"version\": \"2018-05-29\",\n            \"statements\": [\n              \"insert into demos values (:id, :version)\",\n              \"select * where id = :id\"\n            ],\n            \"variablemap\": {\n              \":id\": $util.tojson($util.autoid()),\n              \":version\": $util.tojson($ctx.args.version)\n            }\n          }\n          \"\"\"),\n    response_mapping_template=appsync.mappingtemplate.from_string(\"\"\"\n            $utils.tojson($utils.rds.tojsonobject($ctx.result)[1][0])\n          \"\"\")\n)\n```\n\n### http endpoints\n\ngraphql schema file `schema.graphql`:\n\n```gql\ntype job {\n  id: string!\n  version: string!\n}\n\ninput demoinput {\n  version: string!\n}\n\ntype mutation {\n  callstepfunction(input: demoinput!): job\n}\n```\n\ngraphql request mapping template `request.vtl`:\n\n```json\n{\n  \"version\": \"2018-05-29\",\n  \"method\": \"post\",\n  \"resourcepath\": \"/\",\n  \"params\": {\n    \"headers\": {\n      \"content-type\": \"application/x-amz-json-1.0\",\n      \"x-amz-target\":\"awsstepfunctions.startexecution\"\n    },\n    \"body\": {\n      \"statemachinearn\": \"<your step functions arn>\",\n      \"input\": \"{ \\\"id\\\": \\\"$context.arguments.id\\\" }\"\n    }\n  }\n}\n```\n\ngraphql response mapping template `response.vtl`:\n\n```json\n{\n  \"id\": \"${context.result.id}\"\n}\n```\n\ncdk stack file `app-stack.ts`:\n\n```python\napi = appsync.graphqlapi(self, \"api\",\n    name=\"api\",\n    schema=appsync.schema.from_asset(path.join(__dirname, \"schema.graphql\"))\n)\n\nhttp_ds = api.add_http_data_source(\"ds\", \"https://states.amazonaws.com\",\n    name=\"httpdswithstepf\",\n    description=\"from appsync to stepfunctions workflow\",\n    authorization_config=appsync.awsiamconfig(\n        signing_region=\"us-east-1\",\n        signing_service_name=\"states\"\n    )\n)\n\nhttp_ds.create_resolver(\n    type_name=\"mutation\",\n    field_name=\"callstepfunction\",\n    request_mapping_template=appsync.mappingtemplate.from_file(\"request.vtl\"),\n    response_mapping_template=appsync.mappingtemplate.from_file(\"response.vtl\")\n)\n```\n\n### amazon opensearch service\n\nappsync has builtin support for amazon opensearch service (successor to amazon\nelasticsearch service) from domains that are provisioned through your aws account. you can\nuse appsync resolvers to perform graphql operations such as queries, mutations, and\nsubscriptions.\n\n```python\nimport aws_cdk.aws_opensearchservice as opensearch\n\n# api: appsync.graphqlapi\n\n\nuser = iam.user(self, \"user\")\ndomain = opensearch.domain(self, \"domain\",\n    version=opensearch.engineversion.opensearch_1_2,\n    removal_policy=removalpolicy.destroy,\n    fine_grained_access_control=opensearch.advancedsecurityoptions(master_user_arn=user.user_arn),\n    encryption_at_rest=opensearch.encryptionatrestoptions(enabled=true),\n    node_to_node_encryption=true,\n    enforce_https=true\n)\nds = api.add_open_search_data_source(\"ds\", domain)\n\nds.create_resolver(\n    type_name=\"query\",\n    field_name=\"gettests\",\n    request_mapping_template=appsync.mappingtemplate.from_string(json.stringify({\n        \"version\": \"2017-02-28\",\n        \"operation\": \"get\",\n        \"path\": \"/id/post/_search\",\n        \"params\": {\n            \"headers\": {},\n            \"query_string\": {},\n            \"body\": {\"from\": 0, \"size\": 50}\n        }\n    })),\n    response_mapping_template=appsync.mappingtemplate.from_string(\"\"\"[\n            #foreach($entry in $context.result.hits.hits)\n            #if( $velocitycount > 1 ) , #end\n            $utils.tojson($entry.get(\"_source\"))\n            #end\n          ]\"\"\")\n)\n```\n\n## custom domain names\n\nfor many use cases you may want to associate a custom domain name with your\ngraphql api. this can be done during the api creation.\n\n```python\nimport aws_cdk.aws_certificatemanager as acm\nimport aws_cdk.aws_route53 as route53\n\n# hosted zone and route53 features\n# hosted_zone_id: str\nzone_name = \"example.com\"\n\n\nmy_domain_name = \"api.example.com\"\ncertificate = acm.certificate(self, \"cert\", domain_name=my_domain_name)\napi = appsync.graphqlapi(self, \"api\",\n    name=\"myapi\",\n    domain_name=appsync.domainoptions(\n        certificate=certificate,\n        domain_name=my_domain_name\n    )\n)\n\n# hosted zone for adding appsync domain\nzone = route53.hostedzone.from_hosted_zone_attributes(self, \"hostedzone\",\n    hosted_zone_id=hosted_zone_id,\n    zone_name=zone_name\n)\n\n# create a cname to the appsync domain. will map to something like xxxx.cloudfront.net\nroute53.cnamerecord(self, \"cnameapirecord\",\n    record_name=\"api\",\n    zone=zone,\n    domain_name=my_domain_name\n)\n```\n\n## schema\n\nevery graphql api needs a schema to define the api. cdk offers `appsync.schema`\nfor static convenience methods for various types of schema declaration: code-first\nor schema-first.\n\n### code-first\n\nwhen declaring your graphql api, cdk defaults to a code-first approach if the\n`schema` property is not configured.\n\n```python\napi = appsync.graphqlapi(self, \"api\", name=\"myapi\")\n```\n\ncdk will declare a `schema` class that will give your api access functions to\ndefine your schema code-first: `addtype`, `addtoschema`, etc.\n\nyou can also declare your `schema` class outside of your cdk stack, to define\nyour schema externally.\n\n```python\nschema = appsync.schema()\nschema.add_type(appsync.objecttype(\"demo\",\n    definition={\"id\": appsync.graphqltype.id()}\n))\napi = appsync.graphqlapi(self, \"api\",\n    name=\"myapi\",\n    schema=schema\n)\n```\n\nsee the [code-first schema](#code-first-schema) section for more details.\n\n### schema-first\n\nyou can define your graphql schema from a file on disk. for convenience, use\nthe `appsync.schema.fromasset` to specify the file representing your schema.\n\n```python\napi = appsync.graphqlapi(self, \"api\",\n    name=\"myapi\",\n    schema=appsync.schema.from_asset(path.join(__dirname, \"schema.graphl\"))\n)\n```\n\n## imports\n\nany graphql api that has been created outside the stack can be imported from\nanother stack into your cdk app. utilizing the `fromxxx` function, you have\nthe ability to add data sources and resolvers through a `igraphqlapi` interface.\n\n```python\n# api: appsync.graphqlapi\n# table: dynamodb.table\n\nimported_api = appsync.graphqlapi.from_graphql_api_attributes(self, \"iapi\",\n    graphql_api_id=api.api_id,\n    graphql_api_arn=api.arn\n)\nimported_api.add_dynamo_db_data_source(\"tabledatasource\", table)\n```\n\nif you don't specify `graphqlarn` in `fromxxxattributes`, cdk will autogenerate\nthe expected `arn` for the imported api, given the `apiid`. for creating data\nsources and resolvers, an `apiid` is sufficient.\n\n## authorization\n\nthere are multiple authorization types available for graphql api to cater to different\naccess use cases. they are:\n\n* api keys (`authorizationtype.api_key`)\n* amazon cognito user pools (`authorizationtype.user_pool`)\n* openid connect (`authorizationtype.openid_connect`)\n* aws identity and access management (`authorizationtype.aws_iam`)\n* aws lambda (`authorizationtype.aws_lambda`)\n\nthese types can be used simultaneously in a single api, allowing different types of clients to\naccess data. when you specify an authorization type, you can also specify the corresponding\nauthorization mode to finish defining your authorization. for example, this is a graphql api\nwith aws lambda authorization.\n\n```python\nimport aws_cdk.aws_lambda as lambda_\n# auth_function: lambda.function\n\n\nappsync.graphqlapi(self, \"api\",\n    name=\"api\",\n    schema=appsync.schema.from_asset(path.join(__dirname, \"appsync.test.graphql\")),\n    authorization_config=appsync.authorizationconfig(\n        default_authorization=appsync.authorizationmode(\n            authorization_type=appsync.authorizationtype.lambda,\n            lambda_authorizer_config=appsync.lambdaauthorizerconfig(\n                handler=auth_function\n            )\n        )\n    )\n)\n```\n\n## permissions\n\nwhen using `aws_iam` as the authorization type for graphql api, an iam role\nwith correct permissions must be used for access to api.\n\nwhen configuring permissions, you can specify specific resources to only be\naccessible by `iam` authorization. for example, if you want to only allow mutability\nfor `iam` authorized access you would configure the following.\n\nin `schema.graphql`:\n\n```gql\ntype mutation {\n  updateexample(...): ...\n    @aws_iam\n}\n```\n\nin `iam`:\n\n```json\n{\n  \"version\": \"2012-10-17\",\n  \"statement\": [\n    {\n      \"effect\": \"allow\",\n      \"action\": [\n        \"appsync:graphql\"\n      ],\n      \"resource\": [\n        \"arn:aws:appsync:region:account_id:apis/graphql_id/types/mutation/fields/updateexample\"\n      ]\n    }\n  ]\n}\n```\n\nsee [documentation](https://docs.aws.amazon.com/appsync/latest/devguide/security.html#aws-iam-authorization) for more details.\n\nto make this easier, cdk provides `grant` api.\n\nuse the `grant` function for more granular authorization.\n\n```python\n# api: appsync.graphqlapi\nrole = iam.role(self, \"role\",\n    assumed_by=iam.serviceprincipal(\"lambda.amazonaws.com\")\n)\n\napi.grant(role, appsync.iamresource.custom(\"types/mutation/fields/updateexample\"), \"appsync:graphql\")\n```\n\n### iamresource\n\nin order to use the `grant` functions, you need to use the class `iamresource`.\n\n* `iamresource.custom(...arns)` permits custom arns and requires an argument.\n* `iamresouce.oftype(type, ...fields)` permits arns for types and their fields.\n* `iamresource.all()` permits all resources.\n\n### generic permissions\n\nalternatively, you can use more generic `grant` functions to accomplish the same usage.\n\nthese include:\n\n* grantmutation (use to grant access to mutation fields)\n* grantquery (use to grant access to query fields)\n* grantsubscription (use to grant access to subscription fields)\n\n```python\n# api: appsync.graphqlapi\n# role: iam.role\n\n\n# for generic types\napi.grant_mutation(role, \"updateexample\")\n\n# for custom types and granular design\napi.grant(role, appsync.iamresource.of_type(\"mutation\", \"updateexample\"), \"appsync:graphql\")\n```\n\n## pipeline resolvers and appsync functions\n\nappsync functions are local functions that perform certain operations onto a\nbackend data source. developers can compose operations (functions) and execute\nthem in sequence with pipeline resolvers.\n\n```python\n# api: appsync.graphqlapi\n\n\nappsync_function = appsync.appsyncfunction(self, \"function\",\n    name=\"appsync_function\",\n    api=api,\n    data_source=api.add_none_data_source(\"none\"),\n    request_mapping_template=appsync.mappingtemplate.from_file(\"request.vtl\"),\n    response_mapping_template=appsync.mappingtemplate.from_file(\"response.vtl\")\n)\n```\n\nappsync functions are used in tandem with pipeline resolvers to compose multiple\noperations.\n\n```python\n# api: appsync.graphqlapi\n# appsync_function: appsync.appsyncfunction\n\n\npipeline_resolver = appsync.resolver(self, \"pipeline\",\n    api=api,\n    data_source=api.add_none_data_source(\"none\"),\n    type_name=\"typename\",\n    field_name=\"fieldname\",\n    request_mapping_template=appsync.mappingtemplate.from_file(\"beforerequest.vtl\"),\n    pipeline_config=[appsync_function],\n    response_mapping_template=appsync.mappingtemplate.from_file(\"afterresponse.vtl\")\n)\n```\n\nlearn more about pipeline resolvers and appsync functions [here](https://docs.aws.amazon.com/appsync/latest/devguide/pipeline-resolvers.html).\n\n## code-first schema\n\ncdk offers the ability to generate your schema in a code-first approach.\na code-first approach offers a developer workflow with:\n\n* **modularity**: organizing schema type definitions into different files\n* **reusability**: simplifying down boilerplate/repetitive code\n* **consistency**: resolvers and schema definition will always be synced\n\nthe code-first approach allows for **dynamic** schema generation. you can generate your schema based on variables and templates to reduce code duplication.\n\n### code-first example\n\nto showcase the code-first approach. let's try to model the following schema segment.\n\n```gql\ninterface node {\n  id: string\n}\n\ntype query {\n  allfilms(after: string, first: int, before: string, last: int): filmconnection\n}\n\ntype filmnode implements node {\n  filmname: string\n}\n\ntype filmconnection {\n  edges: [filmedge]\n  films: [film]\n  totalcount: int\n}\n\ntype filmedge {\n  node: film\n  cursor: string\n}\n```\n\nabove we see a schema that allows for generating paginated responses. for example,\nwe can query `allfilms(first: 100)` since `filmconnection` acts as an intermediary\nfor holding `filmedges` we can write a resolver to return the first 100 films.\n\nin a separate file, we can declare our object types and related functions.\nwe will call this file `object-types.ts` and we will have created it in a way that\nallows us to generate other `xxxconnection` and `xxxedges` in the future.\n\n```python\nimport aws_cdk.aws_appsync as appsync\npluralize = require(\"pluralize\")\n\nargs = {\n    \"after\": appsync.graphqltype.string(),\n    \"first\": appsync.graphqltype.int(),\n    \"before\": appsync.graphqltype.string(),\n    \"last\": appsync.graphqltype.int()\n}\n\nnode = appsync.interfacetype(\"node\",\n    definition={\"id\": appsync.graphqltype.string()}\n)\nfilmnode = appsync.objecttype(\"filmnode\",\n    interface_types=[node],\n    definition={\"film_name\": appsync.graphqltype.string()}\n)\n\ndef generate_edge_and_connection(base):\n    edge = appsync.objecttype(f\"{base.name}edge\",\n        definition={\"node\": base.attribute(), \"cursor\": appsync.graphqltype.string()}\n    )\n    connection = appsync.objecttype(f\"{base.name}connection\",\n        definition={\n            \"edges\": edge.attribute(is_list=true),\n            \"pluralize(base.name)\": base.attribute(is_list=true),\n            \"total_count\": appsync.graphqltype.int()\n        }\n    )\n    return {\"edge\": edge, \"connection\": connection}\n```\n\nfinally, we will go to our `cdk-stack` and combine everything together\nto generate our schema.\n\n```python\n# dummy_request: appsync.mappingtemplate\n# dummy_response: appsync.mappingtemplate\n\n\napi = appsync.graphqlapi(self, \"api\",\n    name=\"demo\"\n)\n\nobject_types = [node, filmnode]\n\nfilm_connections = generate_edge_and_connection(filmnode)\n\napi.add_query(\"allfilms\", appsync.resolvablefield(\n    return_type=film_connections.connection.attribute(),\n    args=args,\n    data_source=api.add_none_data_source(\"none\"),\n    request_mapping_template=dummy_request,\n    response_mapping_template=dummy_response\n))\n\napi.add_type(node)\napi.add_type(filmnode)\napi.add_type(film_connections.edge)\napi.add_type(film_connections.connection)\n```\n\nnotice how we can utilize the `generateedgeandconnection` function to generate\nobject types. in the future, if we wanted to create more object types, we can simply\ncreate the base object type (i.e. film) and from there we can generate its respective\n`connections` and `edges`.\n\ncheck out a more in-depth example [here](https://github.com/bryanpan342/starwars-code-first).\n\n## graphql types\n\none of the benefits of graphql is its strongly typed nature. we define the\ntypes within an object, query, mutation, interface, etc. as **graphql types**.\n\ngraphql types are the building blocks of types, whether they are scalar, objects,\ninterfaces, etc. graphql types can be:\n\n* [**scalar types**](https://docs.aws.amazon.com/appsync/latest/devguide/scalars.html): id, int, string, awsdate, etc.\n* [**object types**](#object-types): types that you generate (i.e. `demo` from the example above)\n* [**interface types**](#interface-types): abstract types that define the base implementation of other\n  intermediate types\n\nmore concretely, graphql types are simply the types appended to variables.\nreferencing the object type `demo` in the previous example, the graphql types\nis `string!` and is applied to both the names `id` and `version`.\n\n### directives\n\n`directives` are attached to a field or type and affect the execution of queries,\nmutations, and types. with appsync, we use `directives` to configure authorization.\ncdk provides static functions to add directives to your schema.\n\n* `directive.iam()` sets a type or field's authorization to be validated through `iam`\n* `directive.apikey()` sets a type or field's authorization to be validated through a `api key`\n* `directive.oidc()` sets a type or field's authorization to be validated through `openid connect`\n* `directive.cognito(...groups: string[])` sets a type or field's authorization to be validated\n  through `cognito user pools`\n\n  * `groups` the name of the cognito groups to give access\n\nto learn more about authorization and directives, read these docs [here](https://docs.aws.amazon.com/appsync/latest/devguide/security.html).\n\n### field and resolvable fields\n\nwhile `graphqltype` is a base implementation for graphql fields, we have abstractions\non top of `graphqltype` that provide finer grain support.\n\n### field\n\n`field` extends `graphqltype` and will allow you to define arguments. [**interface types**](#interface-types) are not resolvable and this class will allow you to define arguments,\nbut not its resolvers.\n\nfor example, if we want to create the following type:\n\n```gql\ntype node {\n  test(argument: string): string\n}\n```\n\nthe cdk code required would be:\n\n```python\nfield = appsync.field(\n    return_type=appsync.graphqltype.string(),\n    args={\n        \"argument\": appsync.graphqltype.string()\n    }\n)\ntype = appsync.interfacetype(\"node\",\n    definition={\"test\": field}\n)\n```\n\n### resolvable fields\n\n`resolvablefield` extends `field` and will allow you to define arguments and its resolvers.\n[**object types**](#object-types) can have fields that resolve and perform operations on\nyour backend.\n\nyou can also create resolvable fields for object types.\n\n```gql\ntype info {\n  node(id: string): string\n}\n```\n\nthe cdk code required would be:\n\n```python\n# api: appsync.graphqlapi\n# dummy_request: appsync.mappingtemplate\n# dummy_response: appsync.mappingtemplate\n\ninfo = appsync.objecttype(\"info\",\n    definition={\n        \"node\": appsync.resolvablefield(\n            return_type=appsync.graphqltype.string(),\n            args={\n                \"id\": appsync.graphqltype.string()\n            },\n            data_source=api.add_none_data_source(\"none\"),\n            request_mapping_template=dummy_request,\n            response_mapping_template=dummy_response\n        )\n    }\n)\n```\n\nto nest resolvers, we can also create top level query types that call upon\nother types. building off the previous example, if we want the following graphql\ntype definition:\n\n```gql\ntype query {\n  get(argument: string): info\n}\n```\n\nthe cdk code required would be:\n\n```python\n# api: appsync.graphqlapi\n# dummy_request: appsync.mappingtemplate\n# dummy_response: appsync.mappingtemplate\n\nquery = appsync.objecttype(\"query\",\n    definition={\n        \"get\": appsync.resolvablefield(\n            return_type=appsync.graphqltype.string(),\n            args={\n                \"argument\": appsync.graphqltype.string()\n            },\n            data_source=api.add_none_data_source(\"none\"),\n            request_mapping_template=dummy_request,\n            response_mapping_template=dummy_response\n        )\n    }\n)\n```\n\nlearn more about fields and resolvers [here](https://docs.aws.amazon.com/appsync/latest/devguide/resolver-mapping-template-reference-overview.html).\n\n### intermediate types\n\nintermediate types are defined by graphql types and fields. they have a set of defined\nfields, where each field corresponds to another type in the system. intermediate\ntypes will be the meat of your graphql schema as they are the types defined by you.\n\nintermediate types include:\n\n* [**interface types**](#interface-types)\n* [**object types**](#object-types)\n* [**enum types**](#enum-types)\n* [**input types**](#input-types)\n* [**union types**](#union-types)\n\n#### interface types\n\n**interface types** are abstract types that define the implementation of other\nintermediate types. they are useful for eliminating duplication and can be used\nto generate object types with less work.\n\nyou can create interface types ***externally***.\n\n```python\nnode = appsync.interfacetype(\"node\",\n    definition={\n        \"id\": appsync.graphqltype.string(is_required=true)\n    }\n)\n```\n\nto learn more about **interface types**, read the docs [here](https://graphql.org/learn/schema/#interfaces).\n\n#### object types\n\n**object types** are types that you declare. for example, in the [code-first example](#code-first-example)\nthe `demo` variable is an **object type**. **object types** are defined by\ngraphql types and are only usable when linked to a graphql api.\n\nyou can create object types in two ways:\n\n1. object types can be created ***externally***.\n\n   ```python\n   api = appsync.graphqlapi(self, \"api\",\n       name=\"demo\"\n   )\n   demo = appsync.objecttype(\"demo\",\n       definition={\n           \"id\": appsync.graphqltype.string(is_required=true),\n           \"version\": appsync.graphqltype.string(is_required=true)\n       }\n   )\n\n   api.add_type(demo)\n   ```\n\n   > this method allows for reusability and modularity, ideal for larger projects.\n   > for example, imagine moving all object type definition outside the stack.\n\n   `object-types.ts` - a file for object type definitions\n\n   ```python\n   import aws_cdk.aws_appsync as appsync\n   demo = appsync.objecttype(\"demo\",\n       definition={\n           \"id\": appsync.graphqltype.string(is_required=true),\n           \"version\": appsync.graphqltype.string(is_required=true)\n       }\n   )\n   ```\n\n   `cdk-stack.ts` - a file containing our cdk stack\n\n   ```python\n   # api: appsync.graphqlapi\n\n   api.add_type(demo)\n   ```\n2. object types can be created ***externally*** from an interface type.\n\n   ```python\n   node = appsync.interfacetype(\"node\",\n       definition={\n           \"id\": appsync.graphqltype.string(is_required=true)\n       }\n   )\n   demo = appsync.objecttype(\"demo\",\n       interface_types=[node],\n       definition={\n           \"version\": appsync.graphqltype.string(is_required=true)\n       }\n   )\n   ```\n\n   > this method allows for reusability and modularity, ideal for reducing code duplication.\n\nto learn more about **object types**, read the docs [here](https://graphql.org/learn/schema/#object-types-and-fields).\n\n#### enum types\n\n**enum types** are a special type of intermediate type. they restrict a particular\nset of allowed values for other intermediate types.\n\n```gql\nenum episode {\n  newhope\n  empire\n  jedi\n}\n```\n\n> this means that wherever we use the type episode in our schema, we expect it to\n> be exactly one of newhope, empire, or jedi.\n\nthe above graphql enumeration type can be expressed in cdk as the following:\n\n```python\n# api: appsync.graphqlapi\n\nepisode = appsync.enumtype(\"episode\",\n    definition=[\"newhope\", \"empire\", \"jedi\"\n    ]\n)\napi.add_type(episode)\n```\n\nto learn more about **enum types**, read the docs [here](https://graphql.org/learn/schema/#enumeration-types).\n\n#### input types\n\n**input types** are special types of intermediate types. they give users an\neasy way to pass complex objects for top level mutation and queries.\n\n```gql\ninput review {\n  stars: int!\n  commentary: string\n}\n```\n\nthe above graphql input type can be expressed in cdk as the following:\n\n```python\n# api: appsync.graphqlapi\n\nreview = appsync.inputtype(\"review\",\n    definition={\n        \"stars\": appsync.graphqltype.int(is_required=true),\n        \"commentary\": appsync.graphqltype.string()\n    }\n)\napi.add_type(review)\n```\n\nto learn more about **input types**, read the docs [here](https://graphql.org/learn/schema/#input-types).\n\n#### union types\n\n**union types** are a special type of intermediate type. they are similar to\ninterface types, but they cannot specify any common fields between types.\n\n**note:** the fields of a union type need to be `object types`. in other words, you\ncan't create a union type out of interfaces, other unions, or inputs.\n\n```gql\nunion search = human | droid | starship\n```\n\nthe above graphql union type encompasses the object types of human, droid and starship. it\ncan be expressed in cdk as the following:\n\n```python\n# api: appsync.graphqlapi\n\nstring = appsync.graphqltype.string()\nhuman = appsync.objecttype(\"human\", definition={\"name\": string})\ndroid = appsync.objecttype(\"droid\", definition={\"name\": string})\nstarship = appsync.objecttype(\"starship\", definition={\"name\": string})\nsearch = appsync.uniontype(\"search\",\n    definition=[human, droid, starship]\n)\napi.add_type(search)\n```\n\nto learn more about **union types**, read the docs [here](https://graphql.org/learn/schema/#union-types).\n\n### query\n\nevery schema requires a top level query type. by default, the schema will look\nfor the `object type` named `query`. the top level `query` is the **only** exposed\ntype that users can access to perform `get` operations on your api.\n\nto add fields for these queries, we can simply run the `addquery` function to add\nto the schema's `query` type.\n\n```python\n# api: appsync.graphqlapi\n# film_connection: appsync.interfacetype\n# dummy_request: appsync.mappingtemplate\n# dummy_response: appsync.mappingtemplate\n\n\nstring = appsync.graphqltype.string()\nint = appsync.graphqltype.int()\napi.add_query(\"allfilms\", appsync.resolvablefield(\n    return_type=film_connection.attribute(),\n    args={\"after\": string, \"first\": int, \"before\": string, \"last\": int},\n    data_source=api.add_none_data_source(\"none\"),\n    request_mapping_template=dummy_request,\n    response_mapping_template=dummy_response\n))\n```\n\nto learn more about top level operations, check out the docs [here](https://docs.aws.amazon.com/appsync/latest/devguide/graphql-overview.html).\n\n### mutation\n\nevery schema **can** have a top level mutation type. by default, the schema will look\nfor the `objecttype` named `mutation`. the top level `mutation` type is the only exposed\ntype that users can access to perform `mutable` operations on your api.\n\nto add fields for these mutations, we can simply run the `addmutation` function to add\nto the schema's `mutation` type.\n\n```python\n# api: appsync.graphqlapi\n# film_node: appsync.objecttype\n# dummy_request: appsync.mappingtemplate\n# dummy_response: appsync.mappingtemplate\n\n\nstring = appsync.graphqltype.string()\nint = appsync.graphqltype.int()\napi.add_mutation(\"addfilm\", appsync.resolvablefield(\n    return_type=film_node.attribute(),\n    args={\"name\": string, \"film_number\": int},\n    data_source=api.add_none_data_source(\"none\"),\n    request_mapping_template=dummy_request,\n    response_mapping_template=dummy_response\n))\n```\n\nto learn more about top level operations, check out the docs [here](https://docs.aws.amazon.com/appsync/latest/devguide/graphql-overview.html).\n\n### subscription\n\nevery schema **can** have a top level subscription type. the top level `subscription` type\nis the only exposed type that users can access to invoke a response to a mutation. `subscriptions`\nnotify users when a mutation specific mutation is called. this means you can make any data source\nreal time by specify a graphql schema directive on a mutation.\n\n**note**: the aws appsync client sdk automatically handles subscription connection management.\n\nto add fields for these subscriptions, we can simply run the `addsubscription` function to add\nto the schema's `subscription` type.\n\n```python\n# api: appsync.graphqlapi\n# film: appsync.interfacetype\n\n\napi.add_subscription(\"addedfilm\", appsync.field(\n    return_type=film.attribute(),\n    args={\"id\": appsync.graphqltype.id(is_required=true)},\n    directives=[appsync.directive.subscribe(\"addfilm\")]\n))\n```\n\nto learn more about top level operations, check out the docs [here](https://docs.aws.amazon.com/appsync/latest/devguide/real-time-data.html).\n",
  "docs_url": null,
  "keywords": "",
  "license": "apache-2.0",
  "name": "aws-cdk.aws-appsync",
  "package_url": "https://pypi.org/project/aws-cdk.aws-appsync/",
  "project_url": "https://pypi.org/project/aws-cdk.aws-appsync/",
  "project_urls": {
    "Homepage": "https://github.com/aws/aws-cdk",
    "Source": "https://github.com/aws/aws-cdk.git"
  },
  "release_url": "https://pypi.org/project/aws-cdk.aws-appsync/1.204.0/",
  "requires_dist": [
    "aws-cdk.aws-certificatemanager (==1.204.0)",
    "aws-cdk.aws-cognito (==1.204.0)",
    "aws-cdk.aws-dynamodb (==1.204.0)",
    "aws-cdk.aws-ec2 (==1.204.0)",
    "aws-cdk.aws-elasticsearch (==1.204.0)",
    "aws-cdk.aws-iam (==1.204.0)",
    "aws-cdk.aws-lambda (==1.204.0)",
    "aws-cdk.aws-opensearchservice (==1.204.0)",
    "aws-cdk.aws-rds (==1.204.0)",
    "aws-cdk.aws-s3-assets (==1.204.0)",
    "aws-cdk.aws-secretsmanager (==1.204.0)",
    "aws-cdk.core (==1.204.0)",
    "constructs (<4.0.0,>=3.3.69)",
    "jsii (<2.0.0,>=1.84.0)",
    "publication (>=0.0.3)",
    "typeguard (~=2.13.3)"
  ],
  "requires_python": "~=3.7",
  "summary": "the cdk construct library for aws::appsync",
  "version": "1.204.0",
  "releases": [],
  "developers": [
    "amazon_web_services"
  ],
  "kwds": "aws_appsync aws_cdk from_graphql_api_attributes aws_lambda graphql_api_arn",
  "license_kwds": "apache-2.0",
  "libtype": "pypi",
  "id": "pypi_aws_cdk.aws_appsync",
  "homepage": "https://github.com/aws/aws-cdk",
  "release_count": 258,
  "dependency_ids": [
    "pypi_aws_cdk.aws_certificatemanager",
    "pypi_aws_cdk.aws_cognito",
    "pypi_aws_cdk.aws_dynamodb",
    "pypi_aws_cdk.aws_ec2",
    "pypi_aws_cdk.aws_elasticsearch",
    "pypi_aws_cdk.aws_iam",
    "pypi_aws_cdk.aws_lambda",
    "pypi_aws_cdk.aws_opensearchservice",
    "pypi_aws_cdk.aws_rds",
    "pypi_aws_cdk.aws_s3_assets",
    "pypi_aws_cdk.aws_secretsmanager",
    "pypi_aws_cdk.core",
    "pypi_constructs",
    "pypi_jsii",
    "pypi_publication",
    "pypi_typeguard"
  ],
  "documentation_summary": "The HTML text provides information about the `aws-cdk.aws-appsync` package version 1.204.0, released on June 19, 2023, available on PyPI (Python Package Index). It is part of the AWS Cloud Development Kit (CDK) and is designed for building flexible APIs using GraphQL. The package has reached its end-of-support on June 1, 2023, and is no longer being updated. Users are encouraged to migrate to AWS CDK v2. The package requires Python version 3.7 or newer and is licensed under the Apache-2.0 license. It includes detailed documentation on how to use various features such as DynamoDB, Aurora Serverless, HTTP Endpoints, Amazon OpenSearch Service, and custom domain names for GraphQL APIs. Additionally, it covers authorization types, permissions, pipeline resolvers, AppSync functions, and schema definitions using both code-first and schema-first approaches.",
  "embedding": [
    -0.004105573985725641,
    0.020459860563278198,
    -0.026258492842316628,
    -0.028964519500732422,
    -0.022822266444563866,
    0.03610900789499283,
    -0.01971534639596939,
    -0.007853208109736443,
    -0.004964630585163832,
    -0.020216461271047592,
    0.02114710584282875,
    -0.0034451743122190237,
    0.003468440379947424,
    0.015205299481749535,
    -0.013000387698411942,
    -0.0004876935272477567,
    0.011396816000342369,
    -0.028391815721988678,
    -0.0034040112514048815,
    0.020001698285341263,
    0.010752523317933083,
    -0.020803483203053474,
    -0.008962822146713734,
    -0.006271112244576216,
    -0.013186517171561718,
    0.040318384766578674,
    0.009392350912094116,
    -0.03579401969909668,
    0.0015534604899585247,
    0.0029995387885719538,
    0.053719665855169296,
    0.01164737343788147,
    -0.012298825196921825,
    -0.011919408105313778,
    -0.010838429443538189,
    -0.010144025087356567,
    0.0023820919450372458,
    0.011754755862057209,
    0.023008394986391068,
    -0.008225465193390846,
    -0.0018899241695180535,
    0.008805328980088234,
    -0.010501964949071407,
    0.00013512242003344,
    -0.009642908349633217,
    0.02601509355008602,
    0.006138674449175596,
    -0.03934478759765625,
    -0.018841972574591637,
    -0.00218522478826344,
    0.003937342204153538,
    0.042437389492988586,
    -0.043468255549669266,
    -0.00864783488214016,
    0.01688046008348465,
    -0.011826343834400177,
    -0.010759682394564152,
    0.014675548300147057,
    0.012212919071316719,
    -0.004753445740789175,
    0.009521208703517914,
    0.01307197567075491,
    -0.00894850492477417,
    -0.028148416429758072,
    -0.013558774255216122,
    -0.002883208217099309,
    -0.015190981328487396,
    0.02704596146941185,
    -0.007910477928817272,
    -0.004381188191473484,
    0.03570811450481415,
    0.02980925887823105,
    0.004008930176496506,
    -0.025413753464818,
    0.030582409352064133,
    -0.02176276408135891,
    -0.033130943775177,
    0.012227237224578857,
    -0.0026523368433117867,
    0.0100724371150136,
    -0.018068820238113403,
    -0.001603572047315538,
    -0.0014747135573998094,
    0.04515773430466652,
    0.019557852298021317,
    0.029250873252749443,
    -0.002838465617969632,
    -0.0015713574830442667,
    -0.0024250447750091553,
    -0.007140906993299723,
    0.008440230041742325,
    -0.004069779999554157,
    0.0008635307312943041,
    0.019543534144759178,
    -0.018884925171732903,
    0.01994442753493786,
    -0.019099688157439232,
    0.04953892156481743,
    0.007337774150073528,
    -0.013050499372184277,
    -0.0007798621663823724,
    0.02066030725836754,
    -0.019686710089445114,
    -0.006818760652095079,
    -0.03570811450481415,
    -0.018369490280747414,
    -0.0034541229251772165,
    0.018541302531957626,
    0.05655455216765404,
    -0.005780734121799469,
    -0.016594108194112778,
    0.01616457849740982,
    -0.003951659891754389,
    -0.043983690440654755,
    -0.0038049041759222746,
    -0.012356095016002655,
    0.007996384054422379,
    -0.0033717965707182884,
    -0.007191018667072058,
    0.0011293012648820877,
    -0.008612041361629963,
    0.044069595634937286,
    0.023967675864696503,
    -0.007731507997959852,
    0.01316503994166851,
    0.0050827506929636,
    -0.03547903150320053,
    -0.0009557002922520041,
    0.013451392762362957,
    -0.03201417252421379,
    0.013716268353164196,
    -0.0009664384997449815,
    0.013852285221219063,
    -0.023709958419203758,
    -0.014045572839677334,
    0.011697485111653805,
    -0.008397276513278484,
    0.0036796252243220806,
    -0.022593185305595398,
    -0.022736361250281334,
    -0.0012939537409693003,
    0.027289360761642456,
    -0.006861713714897633,
    0.014174431562423706,
    0.0010791897075250745,
    0.011296592652797699,
    0.02706027776002884,
    0.0007055895985104144,
    0.016637060791254044,
    -0.0023284009657800198,
    0.003004907863214612,
    -0.0010648720199242234,
    -0.03232915699481964,
    -0.01779678650200367,
    -0.01159010361880064,
    -0.0031999852508306503,
    -0.016837507486343384,
    -0.006561043672263622,
    -0.009735973551869392,
    -0.006256794556975365,
    0.0021959631703794003,
    0.032271888107061386,
    -0.0252276249229908,
    -0.016808871179819107,
    0.014210226014256477,
    0.0252276249229908,
    0.0152482520788908,
    -0.017725197598338127,
    -0.04226557910442352,
    0.004832192789763212,
    0.005823686718940735,
    0.012033949606120586,
    -0.024239709600806236,
    0.00498252734541893,
    -0.021920258179306984,
    0.013143563643097878,
    0.013336851261556149,
    0.014310449361801147,
    -0.049367111176252365,
    -0.00854761153459549,
    0.038170743733644485,
    0.012162807397544384,
    0.01679455302655697,
    0.046131331473588943,
    -0.02066030725836754,
    -0.003126607509329915,
    0.011919408105313778,
    0.036366723477840424,
    0.008876916952431202,
    0.005097068380564451,
    0.002852783305570483,
    0.040203843265771866,
    -0.001540932571515441,
    -0.01544869877398014,
    -0.5804930925369263,
    -0.016193214803934097,
    -0.01716681197285652,
    -0.06408561021089554,
    -0.00391228636726737,
    0.0036796252243220806,
    0.013129246421158314,
    0.009743131697177887,
    -0.03353183716535568,
    0.02369564026594162,
    -0.017624974250793457,
    0.01831221953034401,
    0.008905552327632904,
    0.007588332053273916,
    -0.017410211265087128,
    -0.015992768108844757,
    0.02043122611939907,
    -0.02776184119284153,
    0.010201295837759972,
    0.012291666120290756,
    -0.0022138601634651423,
    0.024554697796702385,
    -0.020803483203053474,
    0.0014532371424138546,
    -0.007094374392181635,
    0.013558774255216122,
    -0.010938651859760284,
    -0.010437536053359509,
    -0.005326149985194206,
    0.016851823776960373,
    -0.042236942797899246,
    0.036051735281944275,
    0.009829037822782993,
    0.009191904217004776,
    0.04587361589074135,
    0.01676591858267784,
    -0.024440156295895576,
    0.048651229590177536,
    0.005097068380564451,
    0.028005240485072136,
    -0.014410671778023243,
    -0.002215649699792266,
    -0.029952434822916985,
    0.02359541691839695,
    0.022249562665820122,
    -0.0020563662983477116,
    0.03988885506987572,
    0.004875145386904478,
    0.011769073083996773,
    -0.025886233896017075,
    0.012842894531786442,
    -0.011990996077656746,
    0.026487573981285095,
    0.0020384693052619696,
    -0.004721231292933226,
    -0.021805716678500175,
    0.027389584109187126,
    -0.01149703934788704,
    0.018655842170119286,
    0.018283585086464882,
    0.017825420945882797,
    0.04008930176496506,
    -0.013759220950305462,
    -0.02499854378402233,
    -0.018269266933202744,
    -0.0029530066531151533,
    0.004374029114842415,
    -0.014482259750366211,
    -0.01606435514986515,
    -0.017868373543024063,
    0.021275965496897697,
    0.013437074609100819,
    4.45747391495388e-05,
    -0.022750679403543472,
    0.022249562665820122,
    0.03367501497268677,
    0.0400320328772068,
    0.0006554779829457402,
    0.0010013376595452428,
    0.027718888595700264,
    0.039516597986221313,
    0.009034410119056702,
    -0.010938651859760284,
    -0.04802125692367554,
    0.03510677441954613,
    0.0030210153199732304,
    -0.032586876302957535,
    -0.001838022843003273,
    -0.007509585469961166,
    -0.012885847128927708,
    0.0006545831565745175,
    0.020159192383289337,
    -0.008168195374310017,
    -0.04447048902511597,
    0.0004208034370094538,
    0.03934478759765625,
    0.009435303509235382,
    -0.0017539069522172213,
    -0.020459860563278198,
    -0.007810255046933889,
    0.0015829905169084668,
    0.009836196899414062,
    -0.023566782474517822,
    0.014675548300147057,
    0.03453407064080238,
    0.009650067426264286,
    -0.03135555982589722,
    -0.00209573982283473,
    0.03722577914595604,
    -0.04117744043469429,
    -0.02023077942430973,
    -0.021820034831762314,
    -0.01438919547945261,
    -0.020603038370609283,
    0.009528367780148983,
    -0.03742622584104538,
    0.024454474449157715,
    0.009077363647520542,
    0.024039262905716896,
    -0.000332660652929917,
    -0.0021369028836488724,
    0.01281425915658474,
    0.021576635539531708,
    -0.002158379415050149,
    0.018326537683606148,
    -0.00772434938699007,
    -8.976468961918727e-05,
    -0.01861288957297802,
    -0.002111847046762705,
    0.026158269494771957,
    0.010237089358270168,
    0.016422295942902565,
    0.03459133952856064,
    0.004893042612820864,
    0.04352552816271782,
    -0.00914895161986351,
    0.01831221953034401,
    0.004241591319441795,
    0.0002200213639298454,
    -0.030152881518006325,
    -0.017123859375715256,
    0.00788900163024664,
    0.012663924135267735,
    -0.010544918477535248,
    -0.00037964031798765063,
    -0.017410211265087128,
    -0.04217967391014099,
    -0.006969095673412085,
    0.0020116239320486784,
    -0.014704182744026184,
    -0.02003033272922039,
    0.007881843484938145,
    -0.003411170095205307,
    0.019887156784534454,
    -0.00579505180940032,
    -0.006493035238236189,
    -0.012764147482812405,
    -0.0229654423892498,
    -0.021390505135059357,
    -0.003203564789146185,
    0.0267309732735157,
    0.02734663151204586,
    0.001243842183612287,
    -0.004674698691815138,
    -0.030754221603274345,
    0.0015919390134513378,
    -0.04054746404290199,
    0.03608037158846855,
    -0.006650528870522976,
    -0.02103256620466709,
    -0.0188276544213295,
    0.0012420524144545197,
    -0.026516210287809372,
    -0.00199551647529006,
    0.030983302742242813,
    0.006793704815208912,
    -0.025413753464818,
    0.00986483134329319,
    0.01964375749230385,
    0.001736904843710363,
    -0.005412055645138025,
    0.013859444297850132,
    -0.02703164331614971,
    -0.017367258667945862,
    0.024640602990984917,
    0.0288642980158329,
    0.019199911504983902,
    -0.005956124980002642,
    -0.020087603479623795,
    0.019371723756194115,
    -0.011933726258575916,
    0.03805620223283768,
    -0.02421107515692711,
    0.022092068567872047,
    -0.045100465416908264,
    -0.002879628911614418,
    0.0026344398502260447,
    -0.004527943208813667,
    -0.005659034475684166,
    0.021605269983410835,
    0.0165654718875885,
    0.014611118473112583,
    0.016007086262106895,
    -0.009743131697177887,
    0.0010675566736608744,
    -0.030353328213095665,
    0.008361482992768288,
    -0.005508699454367161,
    0.02063167281448841,
    0.009213380515575409,
    0.01768224500119686,
    -0.01027288381010294,
    -0.0015033488161861897,
    -0.012742671184241772,
    0.012835735455155373,
    0.003908706828951836,
    -0.0089413458481431,
    0.007380726747214794,
    -0.03230052441358566,
    0.01438919547945261,
    0.003797745332121849,
    0.004910939373075962,
    0.008597723208367825,
    -0.013193675316870213,
    0.006367756053805351,
    0.0005803105304948986,
    0.009693020023405552,
    0.01709522306919098,
    0.002027731155976653,
    -0.018025867640972137,
    -0.0018398126121610403,
    0.009635750204324722,
    -0.00010559235670370981,
    -0.01821199618279934,
    0.014016938395798206,
    0.017553387209773064,
    0.02257886715233326,
    -0.03293049708008766,
    0.04664676636457443,
    -0.029866529628634453,
    0.0314987376332283,
    -0.01108898688107729,
    0.02927950769662857,
    -0.02226388081908226,
    -0.0004355684795882553,
    0.0025288474280387163,
    -0.000994178932160139,
    0.011446927674114704,
    0.010043801739811897,
    -0.001620574272237718,
    -0.013816491700708866,
    0.0267309732735157,
    0.0025879074819386005,
    0.009435303509235382,
    0.026902785524725914,
    -0.0007977592176757753,
    0.0047999778762459755,
    0.018254950642585754,
    0.023151570931077003,
    0.011933726258575916,
    0.0023284009657800198,
    0.024855367839336395,
    0.026301445439457893,
    0.015720732510089874,
    0.02257886715233326,
    -0.0059489659033715725,
    -0.02299407869577408,
    -0.030439233407378197,
    -0.013723427429795265,
    -0.015434381552040577,
    -0.015004852786660194,
    -0.020402591675519943,
    0.012656765058636665,
    -0.03579401969909668,
    0.027289360761642456,
    0.0008398171630688012,
    0.02184866927564144,
    0.03367501497268677,
    0.005397737957537174,
    0.007216074503958225,
    -0.008118083700537682,
    -0.03734032064676285,
    0.023953357711434364,
    0.002722135279327631,
    -0.005444270558655262,
    -0.020302368327975273,
    -0.02381018176674843,
    0.03728305175900459,
    -0.0127713056281209,
    0.020416907966136932,
    -0.020259415730834007,
    0.021934574469923973,
    0.007373568136245012,
    -0.0022228085435926914,
    -0.02479809708893299,
    0.000762860057875514,
    0.029751988127827644,
    -0.010380265302956104,
    0.00724470941349864,
    -0.003962398041039705,
    -0.01128943357616663,
    0.023037031292915344,
    0.005054115317761898,
    0.029437001794576645,
    0.050483886152505875,
    0.003055019536986947,
    -0.008855440653860569,
    -0.007881843484938145,
    -0.006779387127608061,
    -0.025757376104593277,
    -0.013136405497789383,
    -0.002190594095736742,
    -0.024769460782408714,
    -0.0023284009657800198,
    0.02574305795133114,
    -0.016594108194112778,
    -0.013150722719728947,
    -0.006052768789231777,
    0.036653075367212296,
    -0.012821417301893234,
    0.0002282987261423841,
    -0.02634439803659916,
    -0.015835274010896683,
    -0.0006465294864028692,
    0.013744903728365898,
    0.004005350638180971,
    -0.003590140026062727,
    0.012821417301893234,
    -0.0237815473228693,
    0.003033543238416314,
    -0.03934478759765625,
    -0.013759220950305462,
    -0.0022764995228499174,
    0.003414749400690198,
    -0.030381962656974792,
    -0.0012313142651692033,
    0.007337774150073528,
    0.021805716678500175,
    0.005787892732769251,
    0.02482673153281212,
    -0.0022926069796085358,
    0.013279581442475319,
    -0.025399435311555862,
    -0.008783852681517601,
    0.004280964843928814,
    0.011518515646457672,
    0.02441152185201645,
    0.022321149706840515,
    0.03874344751238823,
    0.023767229169607162,
    0.0010281831491738558,
    -0.010215613059699535,
    -0.007373568136245012,
    -0.05432100221514702,
    -0.0005668877856805921,
    -0.01224871352314949,
    0.01699499972164631,
    0.01811177283525467,
    0.0014970848569646478,
    0.03152737393975258,
    0.013680473901331425,
    0.023323383182287216,
    -0.015190981328487396,
    0.011711803264915943,
    0.01554892212152481,
    -0.006886769086122513,
    0.011074669659137726,
    -0.010029484517872334,
    -0.0009413827210664749,
    -0.03424771875143051,
    -0.014704182744026184,
    0.002280079061165452,
    -0.0033055776730179787,
    0.01244916021823883,
    0.006464399863034487,
    0.013895238749682903,
    -0.02499854378402233,
    -0.011225004680454731,
    0.02816273458302021,
    -0.003776269033551216,
    0.03444816544651985,
    -0.016422295942902565,
    0.011826343834400177,
    -0.041836049407720566,
    0.001629522768780589,
    -0.014933264814317226,
    -0.0013082714285701513,
    0.013279581442475319,
    0.0029261610470712185,
    -0.010015166364610195,
    -0.007566855754703283,
    0.02479809708893299,
    -0.008912710472941399,
    0.0006492140237241983,
    -0.02013055607676506,
    -0.01698068343102932,
    -0.003962398041039705,
    -0.01287152897566557,
    0.040404289960861206,
    0.011396816000342369,
    0.023738592863082886,
    0.012599495239555836,
    -0.003704681061208248,
    -0.0011543571017682552,
    8.668864029459655e-05,
    -0.016436614096164703,
    -0.006672005169093609,
    -0.04240875318646431,
    -0.010645140893757343,
    -0.02684551477432251,
    0.033130943775177,
    0.01056639477610588,
    0.0059346482157707214,
    0.037168510258197784,
    -0.011654532514512539,
    0.0317564532160759,
    0.015334158204495907,
    -0.018985148519277573,
    0.008776693604886532,
    0.013651838526129723,
    0.010344471782445908,
    0.011561468243598938,
    0.023981992155313492,
    0.012270189821720123,
    -0.02644462138414383,
    -0.009778926149010658,
    0.009084521792829037,
    0.013551616109907627,
    0.019271500408649445,
    0.003191036870703101,
    0.016221849247813225,
    0.009335080161690712,
    -0.0015266148839145899,
    -0.016851823776960373,
    -0.00013601727550849319,
    0.0005042482516728342,
    -0.0010416059521958232,
    0.009327921085059643,
    0.008096607401967049,
    0.0010523442178964615,
    -0.008003543131053448,
    0.019371723756194115,
    -0.015434381552040577,
    -0.014704182744026184,
    0.013880920596420765,
    -0.0363953597843647,
    0.01778246834874153,
    0.01676591858267784,
    -0.000780757050961256,
    0.039717044681310654,
    -0.005583866965025663,
    0.002915422897785902,
    -0.019142640754580498,
    -0.0035668739583343267,
    0.007287662476301193,
    0.010022325441241264,
    -0.0061780475080013275,
    -0.012456318363547325,
    0.014002620242536068,
    0.011439768597483635,
    -0.011461244896054268,
    -0.014704182744026184,
    0.00828989502042532,
    0.000489930622279644,
    -0.02154799923300743,
    0.0017950700130313635,
    0.0006134199793450534,
    -0.02744685485959053,
    -0.016637060791254044,
    -0.0317564532160759,
    -0.009750290773808956,
    -0.009800402447581291,
    0.008977140299975872,
    0.012298825196921825,
    -0.005394158884882927,
    0.01036594808101654,
    -0.016393661499023438,
    -0.008805328980088234,
    -0.015276887454092503,
    0.007939113304018974,
    0.00317671918310225,
    -0.0017154284287244081,
    0.026058046147227287,
    0.01889924146234989,
    0.04435594752430916,
    0.005551652517169714,
    0.024053581058979034,
    0.004592372570186853,
    0.021533681079745293,
    -0.024368569254875183,
    -0.017023636028170586,
    0.014904629439115524,
    -0.012850052677094936,
    -0.012169966474175453,
    0.00653240829706192,
    0.015505969524383545,
    0.03161327913403511,
    -0.010179819539189339,
    0.003212513169273734,
    0.02439720369875431,
    -0.0029619550332427025,
    -0.013394122011959553,
    -0.01310777012258768,
    -0.025370800867676735,
    -0.027504123747348785,
    -0.006539567373692989,
    -0.017338622361421585,
    0.0027418218087404966,
    -0.029437001794576645,
    -0.007305559236556292,
    0.02532784827053547,
    0.005701987072825432,
    0.022621819749474525,
    -0.027919335290789604,
    0.0380275659263134,
    0.006167309358716011,
    0.04238012060523033,
    0.02236410416662693,
    0.03693942725658417,
    -0.026100998744368553,
    0.010795475915074348,
    -0.02776184119284153,
    -0.014217384159564972,
    0.02989516407251358,
    0.014360560104250908,
    0.01668001338839531,
    0.010494806803762913,
    -0.000676954397931695,
    0.018670160323381424,
    0.005258141551166773,
    -0.00452436413615942,
    -0.014625436626374722,
    0.006421447265893221,
    -0.03948796167969704,
    -0.008826805278658867,
    -0.028849979862570763,
    -0.026802562177181244,
    -0.041435156017541885,
    0.02003033272922039,
    0.01597844995558262,
    0.005830845795571804,
    0.010194136761128902,
    -0.015119393356144428,
    0.01017266046255827,
    0.018670160323381424,
    -0.003631303319707513,
    0.04252329468727112,
    0.03072558529675007,
    0.019071053713560104,
    0.01149703934788704,
    0.00834716483950615,
    -0.03630945459008217,
    -0.023824499920010567,
    -0.012162807397544384,
    -0.011926567181944847,
    0.026516210287809372,
    0.008075131103396416,
    -0.01587822660803795,
    -0.02653052657842636,
    0.020474178716540337,
    -0.005254562012851238,
    -0.028291592374444008,
    -0.0027149764355272055,
    0.009170427918434143,
    0.0088482815772295,
    0.0054550087079405785,
    -0.022392738610506058,
    0.003668887075036764,
    0.008340006694197655,
    0.03089739754796028,
    -0.01231314241886139,
    0.004774922039359808,
    0.02664506807923317,
    -0.016837507486343384,
    -0.01046617142856121,
    0.00391228636726737,
    0.011110463179647923,
    0.020975295454263687,
    0.022407056763768196,
    -0.025370800867676735,
    -0.011998155154287815,
    -0.02318020723760128,
    -0.011640215292572975,
    0.017524752765893936,
    0.011074669659137726,
    0.009750290773808956,
    -0.015334158204495907,
    0.02226388081908226,
    0.041750144213438034,
    -0.010222772136330605,
    0.0016688961768522859,
    0.00798922497779131,
    0.019343087449669838,
    0.04034701734781265,
    -0.007162383291870356,
    -0.004252329468727112,
    -0.03155600652098656,
    -0.013358327560126781,
    0.004599531646817923,
    -0.0321287102997303,
    -0.011361021548509598,
    -9.507786307949573e-05,
    -0.009385191835463047,
    -0.01033015362918377,
    0.00038970739115029573,
    -0.029150649905204773,
    -0.007312718313187361,
    -0.031183749437332153,
    0.0100724371150136,
    -0.005530175752937794,
    -0.016937730833888054,
    0.03547903150320053,
    0.028749756515026093,
    -0.023709958419203758,
    -0.03484905883669853,
    -0.02236410416662693,
    -0.015577557496726513,
    0.0044993082992732525,
    0.01336548663675785,
    -0.027375265955924988,
    -0.007974907755851746,
    0.04779217392206192,
    -0.006185206584632397,
    0.001493505435064435,
    -0.008511818014085293,
    0.008898393251001835,
    -0.020416907966136932,
    0.007115851156413555,
    0.002861731918528676,
    -0.02044554427266121,
    0.004255909007042646,
    0.00424517085775733,
    -0.042952824383974075,
    -0.02521330676972866,
    0.008554770611226559,
    0.01066661812365055,
    -0.01449657790362835,
    -0.013580250553786755,
    0.017123859375715256,
    0.03304503858089447,
    0.0010425008367747068,
    -0.020717578008770943,
    -0.007051421795040369,
    0.017152493819594383,
    -0.00701920734718442,
    -0.02584328129887581,
    0.008454547263681889,
    -0.00045234692515805364,
    0.017410211265087128,
    -0.015190981328487396,
    -0.014102843590080738,
    0.015692098066210747,
    -0.03470588102936745,
    0.001297533162869513,
    0.0003628618724178523,
    0.011368180625140667,
    -0.006092142313718796,
    0.014747136272490025,
    -0.01851266622543335,
    -0.011217845603823662,
    -0.021290281787514687,
    0.013866603374481201,
    0.006589679047465324,
    -0.010852746665477753,
    0.023981992155313492,
    0.012721194885671139,
    0.01738157495856285,
    0.02594350464642048,
    -0.011926567181944847,
    0.007226812653243542,
    -0.015806639567017555,
    -0.01205542590469122,
    -0.019658075645565987,
    -0.011812026612460613,
    -0.0060706655494868755,
    0.02154799923300743,
    0.012563700787723064,
    -0.023824499920010567,
    -0.02054576762020588,
    -0.014918947592377663,
    -0.023022713139653206,
    -0.0043561323545873165,
    -0.009914943017065525,
    0.03396136686205864,
    0.01708090677857399,
    0.005039798095822334,
    0.018856288865208626,
    0.00798206590116024,
    -0.002573590027168393,
    0.019185595214366913,
    -0.025757376104593277,
    0.0014648702926933765,
    0.006228159181773663,
    0.02116142399609089,
    0.018240632489323616,
    -0.005386999808251858,
    -0.034104540944099426,
    0.006525249686092138,
    0.027990922331809998,
    0.008755217306315899,
    0.009499732404947281,
    0.04321053996682167,
    -0.011511356569826603,
    -0.010967287234961987,
    -0.003908706828951836,
    -0.017954280599951744,
    -0.03427635133266449,
    0.01403841469436884,
    0.0017646451015025377,
    -0.0429241880774498,
    -0.007745825685560703,
    -0.010344471782445908,
    0.010845587588846684,
    0.01688046008348465,
    0.013429916463792324,
    0.01063082367181778,
    -0.02206343412399292,
    0.007108692079782486,
    -0.009950737468898296,
    -0.03195689991116524,
    -0.008862598799169064,
    -0.010702411644160748,
    0.023924723267555237,
    0.007473791018128395,
    0.021075518801808357,
    0.027003008872270584,
    0.005945386830717325,
    -0.020688943564891815,
    -0.010995922610163689,
    0.010294360108673573,
    -0.03547903150320053,
    0.012234395369887352,
    0.006994151510298252,
    -0.013880920596420765,
    0.008597723208367825,
    -0.02318020723760128,
    0.030267423018813133,
    0.001302902353927493,
    -0.03324548527598381,
    0.005437111482024193,
    0.006782966665923595,
    -0.027003008872270584,
    0.0009744921699166298,
    -0.0019257182721048594,
    -0.009542685933411121,
    0.009929261170327663,
    0.01317219901829958,
    0.009027251973748207,
    0.00551585853099823,
    0.015606192871928215,
    0.007574014365673065,
    -0.005981180816888809,
    0.015291204676032066,
    0.007652761414647102,
    -0.006521670147776604,
    -0.025986457243561745,
    -0.013444233685731888,
    0.0018308641156181693,
    -0.02674529142677784,
    0.01749611645936966,
    0.17994369566440582,
    0.049768004566431046,
    0.014095684513449669,
    0.01726703532040119,
    -0.0011624108301475644,
    0.010022325441241264,
    -0.004184321034699678,
    0.026158269494771957,
    -0.05228790268301964,
    0.041836049407720566,
    -0.01224871352314949,
    -0.014532371424138546,
    -0.010910017415881157,
    0.0018720271764323115,
    0.00914895161986351,
    -0.02584328129887581,
    -0.03974567726254463,
    -0.040203843265771866,
    -0.004216535482555628,
    0.0018648684490472078,
    0.03862890601158142,
    -0.016808871179819107,
    0.0015239303465932608,
    -0.021619588136672974,
    0.024841049686074257,
    -0.025041496381163597,
    -0.009943578392267227,
    -0.020087603479623795,
    0.016135944053530693,
    0.03109784424304962,
    -0.028005240485072136,
    0.004338235128670931,
    0.009599955752491951,
    -0.00043802932486869395,
    -0.025284895673394203,
    -0.00874805822968483,
    -0.00308723421767354,
    -0.020159192383289337,
    0.008440230041742325,
    0.03527858480811119,
    -0.02552829496562481,
    -0.04862259700894356,
    -0.01194804348051548,
    -0.0007069318671710789,
    0.004975368734449148,
    -0.02297976054251194,
    -0.024468790739774704,
    -0.022306833416223526,
    0.024583332240581512,
    0.022206610068678856,
    -0.034619975835084915,
    0.010552076622843742,
    0.013537297956645489,
    0.003239358775317669,
    0.017539069056510925,
    0.008433070965111256,
    0.0005592815577983856,
    -0.0036563591565936804,
    -0.004792819265276194,
    0.029637448489665985,
    -0.029551541432738304,
    0.023838816210627556,
    -0.00013400385796558112,
    0.010781158693134785,
    -0.019142640754580498,
    -0.011819184757769108,
    -0.03161327913403511,
    0.008697946555912495,
    0.009442462585866451,
    -0.027088914066553116,
    -0.03333139047026634,
    -0.04112016782164574,
    -0.022650456055998802,
    0.00209573982283473,
    -0.010380265302956104,
    -0.006342700216919184,
    0.00808944832533598,
    0.01567777991294861,
    0.006260374095290899,
    0.03295913338661194,
    -0.011203528381884098,
    0.011897931806743145,
    0.005093488842248917,
    6.767307058908045e-05,
    0.015720732510089874,
    -0.012928799726068974,
    0.045902252197265625,
    -0.024554697796702385,
    2.9166532840463333e-05,
    -0.010079596191644669,
    -0.023051347583532333,
    -0.0006787441088818014,
    -0.0014988745097070932,
    -0.0059346482157707214,
    0.0012107327347621322,
    -0.007609808351844549,
    0.0045351022854447365,
    0.0022228085435926914,
    -0.018426761031150818,
    0.01214849017560482,
    -0.02949427254498005,
    0.07954862713813782,
    -0.002833096543326974,
    0.020803483203053474,
    -0.016508201137185097,
    0.0034075905568897724,
    -0.00037002068711444736,
    0.030954668298363686,
    0.010194136761128902,
    0.009771767072379589,
    -0.003072916530072689,
    -0.026287127286195755,
    -0.008905552327632904,
    -0.015935497358441353,
    -0.00500400410965085,
    0.027375265955924988,
    -0.029351096600294113,
    0.005254562012851238,
    -0.0012581597547978163,
    0.004828613251447678,
    -0.011353862471878529,
    -0.01627911999821663,
    0.0008617410203441978,
    -0.002639808924868703,
    -0.032672781497240067,
    -0.005308253224939108,
    -0.009650067426264286,
    -0.005075592081993818,
    -0.0029225817415863276,
    -0.04638905078172684,
    0.01688046008348465,
    -0.019271500408649445,
    0.016536837443709373,
    0.008762376382946968,
    -0.0029082640539854765,
    0.0005069327889941633,
    0.006457241252064705,
    -0.025599882006645203,
    0.021419141441583633,
    0.01586390845477581,
    0.002978062490001321,
    0.011933726258575916,
    0.014124319888651371,
    -0.0014040203532204032,
    0.012756988406181335,
    -0.01789700984954834,
    0.003650990081951022,
    0.01159010361880064,
    -0.025771694257855415,
    -0.010229930281639099,
    -0.0071480656042695045,
    0.024683555588126183,
    0.022321149706840515,
    -0.0015364582650363445,
    0.0036617282312363386,
    -0.010738206095993519,
    -0.0029583757277578115,
    -0.01489031221717596,
    0.001834443537518382,
    -0.002244285074993968,
    -0.011883614584803581,
    -0.012241554446518421,
    -0.0019310873467475176,
    0.007681396324187517,
    -0.007502426393330097,
    -0.0406620055437088,
    -0.1823490560054779,
    0.01678023673593998,
    -0.0013413808774203062,
    -0.04137788712978363,
    0.008633517660200596,
    -0.009599955752491951,
    -0.0038406981620937586,
    0.004280964843928814,
    0.002110057510435581,
    -0.009943578392267227,
    0.027289360761642456,
    -0.0009078258299268782,
    -0.014081367291510105,
    -0.010637982748448849,
    -0.0020867912098765373,
    -0.01994442753493786,
    -0.01564914546906948,
    -0.0023928300943225622,
    0.028849979862570763,
    -0.0005176709964871407,
    0.008798169903457165,
    -0.03679625317454338,
    0.009943578392267227,
    0.025141719728708267,
    -0.016622742637991905,
    -0.012692559510469437,
    0.006450082175433636,
    0.0067471726797521114,
    -0.007416520733386278,
    -0.010179819539189339,
    -0.025499658659100533,
    0.01567777991294861,
    0.020187826827168465,
    0.015105076134204865,
    0.006346279755234718,
    -0.0008049180032685399,
    0.018985148519277573,
    -0.027174819260835648,
    -0.02734663151204586,
    0.013888079673051834,
    0.03467724472284317,
    0.012885847128927708,
    0.005737781524658203,
    -0.016221849247813225,
    0.005780734121799469,
    -0.0011767284013330936,
    -0.00020167692855466157,
    -0.006099300924688578,
    -0.00022997657652013004,
    -0.0013798594009131193,
    0.017696563154459,
    -0.023137254640460014,
    -0.002297976054251194,
    -0.003001328557729721,
    0.002960165496915579,
    0.016909094527363777,
    0.00951405055820942,
    0.007659920025616884,
    -0.0011480931425467134,
    -0.004878724925220013,
    -0.0188276544213295,
    -0.01577800326049328,
    0.002816989319398999,
    -0.007838889956474304,
    -0.019443310797214508,
    -0.00997221376746893,
    -0.018383808434009552,
    0.03748349845409393,
    -0.019973061978816986,
    0.029637448489665985,
    0.010917175561189651,
    0.01972966268658638,
    -0.01251358911395073,
    -0.016193214803934097,
    0.013322534039616585,
    -0.002713186666369438,
    -0.030754221603274345,
    0.028534991666674614,
    0.015520286746323109,
    -0.01617889665067196,
    -0.02237842045724392,
    0.027117548510432243,
    -0.023939039558172226,
    0.0150907589122653,
    -0.0056482963263988495,
    -0.011103305034339428,
    -0.009292127564549446,
    -0.013515821658074856,
    -0.018541302531957626,
    0.01347286906093359,
    0.006120777223259211,
    -0.021619588136672974,
    0.0013771748635917902,
    -0.025442389771342278,
    0.0014299710746854544,
    0.03759803622961044,
    -0.018884925171732903,
    -0.016193214803934097,
    -0.0002876944199670106,
    -0.011160574853420258,
    0.010229930281639099,
    0.0021547998767346144,
    -0.014675548300147057,
    0.00859056506305933,
    0.03923024609684944,
    0.009821878746151924,
    -0.014059890992939472,
    0.010616506449878216,
    0.03144146502017975,
    -0.010602188296616077,
    -0.013279581442475319,
    0.023323383182287216,
    0.026616433635354042,
    0.01586390845477581,
    -0.006203103344887495,
    0.02797660604119301,
    0.015792321413755417,
    0.008919869549572468,
    0.01300754677504301,
    0.013637521304190159,
    0.0478208102285862,
    0.006535987835377455,
    0.0071838595904409885,
    0.0050290594808757305,
    -0.013279581442475319,
    -0.012470636516809464,
    -0.10858473926782608,
    -0.019600804895162582,
    0.015105076134204865,
    0.013279581442475319,
    -0.018469713628292084,
    -0.022106386721134186,
    -0.026673702523112297,
    0.014088526368141174,
    -0.009893466718494892,
    -0.0015659882919862866,
    -0.009234856814146042,
    0.00924917496740818,
    -0.0317564532160759,
    0.011661691591143608,
    -0.020918024703860283,
    -0.0024572594556957483,
    -0.033188216388225555,
    -0.004348973277956247,
    -0.01499053556472063,
    0.002348087728023529,
    -0.008225465193390846,
    0.013895238749682903,
    -0.006031292024999857,
    0.004127050284296274,
    -0.02949427254498005,
    -0.0023731435649096966,
    -0.02227819710969925,
    0.025900552049279213,
    0.028721120208501816,
    0.03069695085287094,
    -0.000994178932160139,
    -0.019042417407035828,
    0.003726157359778881,
    0.014088526368141174,
    0.007395044434815645,
    -0.01869879476726055,
    -0.022034797817468643,
    -0.02197752706706524,
    0.057184524834156036,
    -0.022936807945370674,
    0.0010881382040679455,
    0.020058969035744667,
    0.020216461271047592,
    -0.03416181355714798,
    -0.030238786712288857,
    0.008561929687857628,
    0.0057198842987418175,
    0.020789166912436485,
    0.018455395475029945,
    -0.01033015362918377,
    -0.02471219003200531,
    -0.013787856325507164,
    -0.010738206095993519,
    -0.0010084965033456683,
    0.022893855348229408,
    -0.018283585086464882,
    -0.01708090677857399,
    -0.02154799923300743,
    -0.012885847128927708,
    -0.010337312705814838,
    -0.006657687481492758,
    -0.022807948291301727,
    -0.004674698691815138,
    -0.007212494965642691,
    0.014203066937625408,
    0.020001698285341263,
    -0.017753833904862404,
    0.006335541605949402,
    0.023251794278621674,
    -0.02073189616203308,
    -0.03029605746269226,
    0.014181590639054775,
    -0.016608424484729767,
    -0.007248288951814175,
    -0.018169043585658073,
    -0.0018630786798894405,
    -0.003022804856300354,
    0.0013530139112845063,
    0.01052344124764204,
    -0.017624974250793457,
    -0.017152493819594383,
    0.0018362331902608275,
    -0.010337312705814838,
    -0.017739515751600266,
    0.016135944053530693,
    0.016393661499023438,
    0.01666569523513317,
    0.006471558474004269,
    0.031584642827510834,
    -0.04985390976071358,
    0.014933264814317226,
    -0.004402664490044117,
    0.035536304116249084,
    0.006271112244576216,
    0.00536194397136569,
    0.0069404602982103825,
    -0.003545397659763694,
    0.0028241481631994247,
    -0.022850902751088142,
    0.013401281088590622,
    -0.05523733049631119,
    -0.005884536541998386,
    -0.0892273336648941,
    0.010652299970388412,
    0.010244248434901237,
    0.012241554446518421,
    0.002342718653380871,
    -0.029308142140507698,
    -0.0003921682364307344,
    -0.027733206748962402,
    0.015706416219472885,
    0.01373058557510376,
    -0.020488496869802475,
    -0.03281595557928085,
    0.0007145380950532854,
    -0.0029726934153586626,
    0.004273805767297745,
    -0.003933762665838003,
    0.04323917627334595,
    -0.009821878746151924,
    0.04086245223879814,
    0.015105076134204865,
    -0.010151184163987637,
    -0.00029731407994404435,
    -0.000126173923490569,
    0.015720732510089874,
    -0.019271500408649445,
    -0.00394450081512332,
    -0.016608424484729767,
    -0.007194597739726305,
    -0.018025867640972137,
    -0.014833041466772556,
    0.03221461921930313,
    -0.012585177086293697,
    -0.023309065029025078,
    0.029351096600294113,
    0.022507280111312866,
    -0.003271573456004262,
    0.01657979004085064,
    0.006238897331058979,
    0.04349689185619354,
    0.01336548663675785,
    -0.010809794068336487,
    -0.04999708756804466,
    0.013293898664414883,
    -0.00528319738805294,
    -0.024254027754068375,
    0.001656368258409202,
    -0.007695714011788368,
    0.010952970013022423,
    0.02064599096775055,
    0.00014373536396306008,
    0.05300378426909447,
    -0.003779848339036107,
    -0.012477794662117958,
    -0.02056008391082287,
    0.0010290780337527394,
    -0.02960881218314171,
    0.031040573492646217,
    -0.010895699262619019,
    -0.018942195922136307,
    0.02998107112944126,
    0.03072558529675007,
    0.0019615122582763433,
    0.024268345907330513,
    -0.010480488650500774,
    0.002423255005851388,
    -0.02584328129887581,
    -0.054865073412656784,
    -0.03101193904876709,
    -0.006221000570803881,
    -0.008039336651563644,
    -0.012141331098973751,
    -0.03905843570828438,
    0.023137254640460014,
    0.005132862366735935,
    0.0069762542843818665,
    -0.03281595557928085,
    -0.014088526368141174,
    -0.03353183716535568,
    -0.009485415183007717,
    0.019672393798828125,
    0.023352017626166344,
    -0.00848318263888359,
    -0.01468986552208662,
    0.03424771875143051,
    0.024139486253261566,
    -0.004019668325781822,
    -0.009535526856780052,
    0.0010970867006108165,
    -0.003740475047379732,
    -0.013522980734705925,
    -0.007516744080930948,
    0.00040626211557537317,
    0.003650990081951022,
    0.005655454937368631,
    -0.001463975408114493,
    -0.015921179205179214,
    -0.013852285221219063,
    0.0007060370407998562,
    0.005089909769594669,
    0.016407977789640427,
    -0.014475101605057716,
    0.002659495687112212,
    0.008869757875800133,
    0.010050960816442966,
    -0.005086330231279135,
    -0.0049073598347604275,
    -0.0003082759794779122,
    -0.041034262627363205,
    -0.009571320377290249,
    0.013344010338187218,
    -0.0019346667686477304,
    -0.0036832045298069715,
    0.0012071533128619194,
    0.012585177086293697,
    -0.023452240973711014,
    -0.0025753797963261604,
    -0.005326149985194206,
    0.010000849142670631,
    -0.020259415730834007,
    -0.0016518939519301057,
    0.009199063293635845,
    0.010967287234961987,
    0.03653853386640549,
    0.017209764569997787,
    0.003794166026636958,
    0.014503736980259418,
    -0.016493884846568108,
    -0.016336390748620033,
    0.015276887454092503,
    -0.008511818014085293,
    -0.001959722489118576,
    -0.004674698691815138,
    -0.03416181355714798,
    -0.008418753743171692,
    -0.03699669986963272,
    0.010322995483875275,
    0.012570859864354134,
    -0.0027525601908564568,
    -0.009764608927071095,
    0.09214812517166138,
    -0.010995922610163689,
    -0.0239104051142931,
    0.009141792543232441,
    -0.0031838780269026756,
    0.02216365747153759,
    -0.006958357524126768,
    -0.009843355044722557,
    0.017954280599951744,
    -0.028807027265429497,
    0.0029798520263284445,
    0.001790595822967589,
    -0.013973984867334366,
    0.0013404859928414226,
    -0.040833815932273865,
    0.01668001338839531,
    -0.022249562665820122,
    0.012685400433838367,
    0.0062639531679451466,
    0.021304599940776825,
    -0.007502426393330097,
    0.006475138012319803,
    -0.010773999616503716,
    -0.01149703934788704,
    -0.03957386687397957,
    -0.01291448250412941,
    0.030038341879844666,
    0.03851436451077461,
    0.008461706340312958,
    -0.05543777719140053,
    -0.0013879131292924285,
    -0.01726703532040119,
    -0.018641525879502296,
    -0.01819767989218235,
    -0.004488570149987936,
    0.025284895673394203,
    0.001223260653205216,
    -0.01676591858267784,
    0.0009807561291381717,
    -0.01972966268658638,
    0.004760604351758957,
    -0.018999464809894562,
    -0.02431129850447178,
    -0.03785575553774834,
    0.03224325180053711,
    -0.00030715743196196854,
    0.006475138012319803,
    -0.0113896569237113,
    -0.02602941170334816
  ]
}
{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: developers",
    "license :: osi approved :: apache software license",
    "natural language :: english",
    "programming language :: python",
    "programming language :: python :: 3",
    "programming language :: python :: implementation :: cpython"
  ],
  "description": "==================================================\npython bindings for tree sitter with all languages\n==================================================\n\nbinary python wheels for all tree sitter languages.\n\n`py-tree-sitter`_ is a fantastic library that provides python bindings for the\neven more fantastic `tree-sitter`_ parsing library.\n\n`py-tree-sitter-languages`_ provides binary python wheels for all tree sitter\nlanguages. the binary wheels remove the need to download and compile support\nfor individual languages.\n\n.. _`py-tree-sitter-languages`: https://github.com/grantjenks/py-tree-sitter-languages\n\n\ninstall\n=======\n\n::\n\n   pip install tree_sitter_languages\n\nsource installs are not supported. to see how the binary wheels are built, look\nat:\n\n1. setup.py \u2014 python package setup.\n\n2. repos.txt \u2014 text file that contains a list of included language repositories and their commit hashes.\n\n3. build.py \u2014 python script to download and build the language repositories.\n\n4. .github/workflows/release.yml \u2014 github action to invoke `cibuildwheel`_ and\n   release to pypi.\n\n.. _`cibuildwheel`: https://github.com/pypa/cibuildwheel\n\n\nusage\n=====\n\n::\n\n   from tree_sitter_languages import get_language, get_parser\n\n   language = get_language('python')\n   parser = get_parser('python')\n\nthat's the whole api!\n\nrefer to `py-tree-sitter`_ for the language and parser api. notice the\n``language.build_library(...)`` step can be skipped! the binary wheel includes\nthe language binary.\n\n.. _`py-tree-sitter`: https://github.com/tree-sitter/py-tree-sitter\n\n\ndemo\n====\n\nwant to know something crazy? python lacks multi-line comments. whhaaa!?!\n\nit's really not such a big deal. instead of writing::\n\n   \"\"\"\n   my awesome\n   multi-line\n   comment.\n   \"\"\"\n\nsimply write::\n\n   # my awesome\n   # multi-line\n   # comment.\n\nso multi-line comments are made by putting multiple single-line comments in\nsequence. amazing!\n\nnow, how to find all the strings being used as comments?\n\nstart with some example python code::\n\n   example = \"\"\"\n   #!shebang\n   # license blah blah (apache 2.0)\n   \"this is a module docstring.\"\n\n   a = 1\n\n   '''this\n   is\n   not\n   a\n   multiline\n   comment.'''\n\n   b = 2\n\n   class test:\n       \"this is a class docstring.\"\n\n       'this is bogus.'\n\n       def test(self):\n           \"this is a function docstring.\"\n\n           \"please, no.\"\n\n           return 1\n\n   c = 3\n   \"\"\"\n\nnotice a couple things:\n\n1. python has module, class, and function docstrings that bare a striking\n   resemblance to the phony string comments.\n\n2. python supports single-quoted, double-quoted, triple-single-quoted, and\n   triple-double-quoted strings (not to mention prefixes for raw strings,\n   unicode strings, and more).\n\ncreating a regular expression to capture the phony string comments would be\nexceedingly difficult!\n\nenter `tree-sitter`_::\n\n   from tree_sitter_languages import get_language, get_parser\n\n   language = get_language('python')\n   parser = get_parser('python')\n\ntree-sitter creates an abstract syntax tree (actually, a `concrete syntax\ntree`_) and supports queries::\n\n   tree = parser.parse(example.encode())\n   node = tree.root_node\n   print(node.sexp())\n\n.. _`concrete syntax tree`: https://stackoverflow.com/q/1888854/232571\n\nlook for statements that are a single string expression::\n\n   stmt_str_pattern = '(expression_statement (string)) @stmt_str'\n   stmt_str_query = language.query(stmt_str_pattern)\n   stmt_strs = stmt_str_query.captures(node)\n   stmt_str_points = set(\n       (node.start_point, node.end_point) for node, _ in stmt_strs\n   )\n   print(stmt_str_points)\n\nnow, find those statement string expressions that are actually module, class,\nor function docstrings::\n\n   doc_str_pattern = \"\"\"\n       (module . (comment)* . (expression_statement (string)) @module_doc_str)\n\n       (class_definition\n           body: (block . (expression_statement (string)) @class_doc_str))\n\n       (function_definition\n           body: (block . (expression_statement (string)) @function_doc_str))\n   \"\"\"\n   doc_str_query = language.query(doc_str_pattern)\n   doc_strs = doc_str_query.captures(node)\n   doc_str_points = set(\n       (node.start_point, node.end_point) for node, _ in doc_strs\n   )\n\nwith the set of string expression statements and the set of docstring\nstatements, the locations of all phony string comments is::\n\n   comment_strs = stmt_str_points - doc_str_points\n   print(sorted(comment_strs))\n\n\nlicense\n=======\n\ncopyright 2022-2023 grant jenks\n\nlicensed under the apache license, version 2.0 (the \"license\"); you may not use\nthis file except in compliance with the license.  you may obtain a copy of the\nlicense at\n\n    http://www.apache.org/licenses/license-2.0\n\nunless required by applicable law or agreed to in writing, software distributed\nunder the license is distributed on an \"as is\" basis, without warranties or\nconditions of any kind, either express or implied. see the license for the\nspecific language governing permissions and limitations under the license.\n\nthe project also includes the following other projects distributed in binary\nform:\n\n* https://github.com/tree-sitter/tree-sitter \u2014 licensed under the mit license.\n\n* https://github.com/abstractmachineslab/tree-sitter-erlang \u2014 licensed under\n  the apache license, version 2.0.\n\n* https://github.com/azganoth/tree-sitter-lua \u2014 licensed under the mit\n  license.\n\n* https://github.com/wilfred/tree-sitter-elisp \u2014 licensed under the mit\n  license.\n\n* https://github.com/alemuller/tree-sitter-make \u2014 licensed under the mit\n  license.\n\n* https://github.com/camdencheek/tree-sitter-dockerfile \u2014 licensed under the\n  mit license.\n\n* https://github.com/camdencheek/tree-sitter-go-mod \u2014 licensed under the mit\n  license.\n\n* https://github.com/elixir-lang/tree-sitter-elixir \u2014 licensed under the\n  apache license, version 2.0.\n\n* https://github.com/elm-tooling/tree-sitter-elm \u2014 licensed under the mit\n  license.\n\n* https://github.com/fwcd/tree-sitter-kotlin \u2014 licensed under the mit license.\n\n* https://github.com/ganezdragon/tree-sitter-perl \u2014 licensed under the mit\n  license.\n\n* https://github.com/ikatyang/tree-sitter-markdown \u2014 licensed under the mit\n  license.\n\n* https://github.com/ikatyang/tree-sitter-yaml \u2014 licensed under the mit\n  license.\n\n* https://github.com/jiyee/tree-sitter-objc \u2014 licensed under the mit license.\n\n* https://github.com/m-novikov/tree-sitter-sql \u2014 licensed under the mit\n  license.\n\n* https://github.com/r-lib/tree-sitter-r \u2014 licensed under the mit license.\n\n* https://github.com/rydesun/tree-sitter-dot \u2014 licensed under the mit license.\n\n* https://github.com/slackhq/tree-sitter-hack \u2014 licensed under the mit\n  license.\n\n* https://github.com/thehamsta/tree-sitter-commonlisp \u2014 licensed under the mit\n  license.\n\n* https://github.com/tree-sitter/tree-sitter-bash \u2014 licensed under the mit\n  license.\n\n* https://github.com/tree-sitter/tree-sitter-c \u2014 licensed under the mit\n  license.\n\n* https://github.com/tree-sitter/tree-sitter-c-sharp \u2014 licensed under the mit\n  license.\n\n* https://github.com/tree-sitter/tree-sitter-cpp \u2014 licensed under the mit\n  license.\n\n* https://github.com/tree-sitter/tree-sitter-css \u2014 licensed under the mit\n  license.\n\n* https://github.com/tree-sitter/tree-sitter-embedded-template \u2014 licensed\n  under the mit license.\n\n* https://github.com/tree-sitter/tree-sitter-go \u2014 licensed under the mit\n  license.\n\n* https://github.com/tree-sitter/tree-sitter-haskell \u2014 licensed under the mit\n  license.\n\n* https://github.com/tree-sitter/tree-sitter-html \u2014 licensed under the mit\n  license.\n\n* https://github.com/tree-sitter/tree-sitter-java \u2014 licensed under the mit\n  license.\n\n* https://github.com/tree-sitter/tree-sitter-javascript \u2014 licensed under the\n  mit license.\n\n* https://github.com/tree-sitter/tree-sitter-jsdoc \u2014 licensed under the mit\n  license.\n\n* https://github.com/tree-sitter/tree-sitter-json \u2014 licensed under the mit\n  license.\n\n* https://github.com/tree-sitter/tree-sitter-julia \u2014 licensed under the mit\n  license.\n\n* https://github.com/tree-sitter/tree-sitter-ocaml \u2014 licensed under the mit\n  license.\n\n* https://github.com/tree-sitter/tree-sitter-php \u2014 licensed under the mit\n  license.\n\n* https://github.com/tree-sitter/tree-sitter-python \u2014 licensed under the mit\n  license.\n\n* https://github.com/tree-sitter/tree-sitter-ql \u2014 licensed under the mit\n  license.\n\n* https://github.com/tree-sitter/tree-sitter-regex \u2014 licensed under the mit\n  license.\n\n* https://github.com/tree-sitter/tree-sitter-ruby \u2014 licensed under the mit\n  license.\n\n* https://github.com/tree-sitter/tree-sitter-rust \u2014 licensed under the mit\n  license.\n\n* https://github.com/tree-sitter/tree-sitter-scala \u2014 licensed under the mit\n  license.\n\n* https://github.com/dhcmrlchtdj/tree-sitter-sqlite - licensed under the mit\n  license.\n\n* https://github.com/tree-sitter/tree-sitter-toml \u2014 licensed under the mit\n  license.\n\n* https://github.com/tree-sitter/tree-sitter-tsq \u2014 licensed under the mit\n  license.\n\n* https://github.com/tree-sitter/tree-sitter-typescript \u2014 licensed under the\n  mit license.\n\n* https://github.com/stsewd/tree-sitter-rst - licensed under the mit license.\n\n* https://github.com/mitchellh/tree-sitter-hcl - licensed under the mit license.\n\n* https://github.com/stadelmanma/tree-sitter-fortran - licensed under the mit\n  license.\n\n* https://github.com/stadelmanma/tree-sitter-fixed-form-fortran - licensed under\n  the mit license.\n\n.. _`tree-sitter`: https://tree-sitter.github.io/\n",
  "docs_url": null,
  "keywords": "",
  "license": "apache 2.0",
  "name": "tree-sitter-languages",
  "package_url": "https://pypi.org/project/tree-sitter-languages/",
  "project_url": "https://pypi.org/project/tree-sitter-languages/",
  "project_urls": {
    "Documentation": "https://github.com/grantjenks/py-tree-sitter-languages",
    "Homepage": "https://github.com/grantjenks/py-tree-sitter-languages",
    "Source": "https://github.com/grantjenks/py-tree-sitter-languages",
    "Tracker": "https://github.com/grantjenks/py-tree-sitter-languages/issues"
  },
  "release_url": "https://pypi.org/project/tree-sitter-languages/1.8.0/",
  "requires_dist": [
    "tree-sitter"
  ],
  "requires_python": "",
  "summary": "binary python wheels for all tree sitter languages.",
  "version": "1.8.0",
  "releases": [],
  "developers": [
    "contact@grantjenks.com",
    "grant_jenks"
  ],
  "kwds": "tree_sitter_languages tree python sitter parser",
  "license_kwds": "apache 2.0",
  "libtype": "pypi",
  "id": "pypi_tree_sitter_languages",
  "homepage": "https://github.com/grantjenks/py-tree-sitter-languages",
  "release_count": 11,
  "dependency_ids": [
    "pypi_tree_sitter"
  ]
}
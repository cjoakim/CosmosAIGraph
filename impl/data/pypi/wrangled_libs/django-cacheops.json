{
  "classifiers": [
    "development status :: 5 - production/stable",
    "environment :: web environment",
    "framework :: django",
    "framework :: django :: 3.2",
    "framework :: django :: 4.0",
    "framework :: django :: 4.1",
    "framework :: django :: 4.2",
    "intended audience :: developers",
    "license :: osi approved :: bsd license",
    "operating system :: os independent",
    "programming language :: python",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: internet :: www/http",
    "topic :: software development :: libraries :: python modules"
  ],
  "description": "a slick orm cache with automatic granular event-driven invalidation for django.\ncacheops \n========\n\na slick app that supports automatic or manual queryset caching and `automatic\ngranular event-driven invalidation <http://suor.github.io/blog/2014/03/09/on-orm-cache-invalidation/>`_.\n\nit uses `redis <http://redis.io/>`_ as backend for orm cache and redis or\nfilesystem for simple time-invalidated one.\n\nand there is more to it:\n\n- decorators to cache any user function or view as a queryset or by time\n- extensions for django and jinja2 templates\n- transparent transaction support\n- dog-pile prevention mechanism\n- a couple of hacks to make django faster\n\n.. contents:: contents\n    :local:\n    :backlinks: top\n\nrequirements\n++++++++++++\n\npython 3.7+, django 3.2+ and redis 4.0+.\n\n\ninstallation\n++++++++++++\n\nusing pip:\n\n.. code:: bash\n\n    $ pip install django-cacheops\n\n    # or from github directly\n    $ pip install git+https://github.com/suor/django-cacheops.git@master\n\n\nsetup\n+++++\n\nadd ``cacheops`` to your ``installed_apps``.\n\nsetup redis connection and enable caching for desired models:\n\n.. code:: python\n\n    cacheops_redis = {\n        'host': 'localhost', # redis-server is on same machine\n        'port': 6379,        # default redis port\n        'db': 1,             # select non-default redis database\n                             # using separate redis db or redis instance\n                             # is highly recommended\n\n        'socket_timeout': 3,   # connection timeout in seconds, optional\n        'password': '...',     # optional\n        'unix_socket_path': '' # replaces host and port\n    }\n\n    # alternatively the redis connection can be defined using a url:\n    cacheops_redis = \"redis://localhost:6379/1\"\n    # or\n    cacheops_redis = \"unix://path/to/socket?db=1\"\n    # or with password (note a colon)\n    cacheops_redis = \"redis://:password@localhost:6379/1\"\n\n    # if you want to use sentinel, specify this variable\n    cacheops_sentinel = {\n        'locations': [('localhost', 26379)], # sentinel locations, required\n        'service_name': 'mymaster',          # sentinel service name, required\n        'socket_timeout': 0.1,               # connection timeout in seconds, optional\n        'db': 0                              # redis database, default: 0\n        ...                                  # everything else is passed to sentinel()\n    }\n\n    # use your own redis client class, should be compatible or subclass redis.redis\n    cacheops_client_class = 'your.redis.clientclass'\n\n    cacheops = {\n        # automatically cache any user.objects.get() calls for 15 minutes\n        # this also includes .first() and .last() calls,\n        # as well as request.user or post.author access,\n        # where post.author is a foreign key to auth.user\n        'auth.user': {'ops': 'get', 'timeout': 60*15},\n\n        # automatically cache all gets and queryset fetches\n        # to other django.contrib.auth models for an hour\n        'auth.*': {'ops': {'fetch', 'get'}, 'timeout': 60*60},\n\n        # cache all queries to permission\n        # 'all' is an alias for {'get', 'fetch', 'count', 'aggregate', 'exists'}\n        'auth.permission': {'ops': 'all', 'timeout': 60*60},\n\n        # enable manual caching on all other models with default timeout of an hour\n        # use post.objects.cache().get(...)\n        #  or tags.objects.filter(...).order_by(...).cache()\n        # to cache particular orm request.\n        # invalidation is still automatic\n        '*.*': {'ops': (), 'timeout': 60*60},\n\n        # and since ops is empty by default you can rewrite last line as:\n        '*.*': {'timeout': 60*60},\n\n        # note: binding signals has its overhead, like preventing fast mass deletes,\n        #       you might want to only register whatever you cache and dependencies.\n\n        # finally you can explicitely forbid even manual caching with:\n        'some_app.*': none,\n    }\n\nyou can configure default profile setting with ``cacheops_defaults``. this way you can rewrite the config above:\n\n.. code:: python\n\n    cacheops_defaults = {\n        'timeout': 60*60\n    }\n    cacheops = {\n        'auth.user': {'ops': 'get', 'timeout': 60*15},\n        'auth.*': {'ops': ('fetch', 'get')},\n        'auth.permission': {'ops': 'all'},\n        '*.*': {},\n    }\n\nusing ``'*.*'`` with non-empty ``ops`` is **not recommended**\nsince it will easily cache something you don't intent to or even know about like migrations tables.\nthe better approach will be restricting by app with ``'app_name.*'``.\n\nbesides ``ops`` and ``timeout`` options you can also use:\n\n``local_get: true``\n    to cache simple gets for this model in process local memory.\n    this is very fast, but is not invalidated in any way until process is restarted.\n    still could be useful for extremely rarely changed things.\n\n``cache_on_save=true | 'field_name'``\n    to write an instance to cache upon save.\n    cached instance will be retrieved on ``.get(field_name=...)`` request.\n    setting to ``true`` causes caching by primary key.\n\nadditionally, you can tell cacheops to degrade gracefully on redis fail with:\n\n.. code:: python\n\n    cacheops_degrade_on_failure = true\n\nthere is also a possibility to make all cacheops methods and decorators no-op, e.g. for testing:\n\n.. code:: python\n\n    from django.test import override_settings\n\n    @override_settings(cacheops_enabled=false)\n    def test_something():\n        # ...\n        assert cond\n\n\nusage\n+++++\n\n| **automatic caching**\n\nit's automatic you just need to set it up.\n\n\n| **manual caching**\n\nyou can force any queryset to use cache by calling its ``.cache()`` method:\n\n.. code:: python\n\n    article.objects.filter(tag=2).cache()\n\n\nhere you can specify which ops should be cached for the queryset, for example, this code:\n\n.. code:: python\n\n    qs = article.objects.filter(tag=2).cache(ops=['count'])\n    paginator = paginator(objects, ipp)\n    articles = list(pager.page(page_num)) # hits database\n\n\nwill cache count call in ``paginator`` but not later articles fetch.\nthere are five possible actions - ``get``, ``fetch``, ``count``, ``aggregate`` and ``exists``.\nyou can pass any subset of this ops to ``.cache()`` method even empty - to turn off caching.\nthere is, however, a shortcut for the latter:\n\n.. code:: python\n\n    qs = article.objects.filter(visible=true).nocache()\n    qs1 = qs.filter(tag=2)       # hits database\n    qs2 = qs.filter(category=3)  # hits it once more\n\n\nit is useful when you want to disable automatic caching on particular queryset.\n\nyou can also override default timeout for particular queryset with ``.cache(timeout=...)``.\n\n\n| **function caching**\n\nyou can cache and invalidate result of a function the same way as a queryset.\ncached results of the next function will be invalidated on any ``article`` change,\naddition or deletion:\n\n.. code:: python\n\n    from cacheops import cached_as\n\n    @cached_as(article, timeout=120)\n    def article_stats():\n        return {\n            'tags': list(article.objects.values('tag').annotate(count('id')))\n            'categories': list(article.objects.values('category').annotate(count('id')))\n        }\n\n\nnote that we are using list on both querysets here, it's because we don't want\nto cache queryset objects but their results.\n\nalso note that if you want to filter queryset based on arguments,\ne.g. to make invalidation more granular, you can use a local function:\n\n.. code:: python\n\n    def articles_block(category, count=5):\n        qs = article.objects.filter(category=category)\n\n        @cached_as(qs, extra=count)\n        def _articles_block():\n            articles = list(qs.filter(photo=true)[:count])\n            if len(articles) < count:\n                articles += list(qs.filter(photo=false)[:count-len(articles)])\n            return articles\n\n        return _articles_block()\n\nwe added ``extra`` here to make different keys for calls with same ``category`` but different\n``count``. cache key will also depend on function arguments, so we could just pass ``count`` as\nan argument to inner function. we also omitted ``timeout`` here, so a default for the model\nwill be used.\n\nanother possibility is to make function cache invalidate on changes to any one of several models:\n\n.. code:: python\n\n    @cached_as(article.objects.filter(public=true), tag)\n    def article_stats():\n        return {...}\n\nas you can see, we can mix querysets and models here.\n\n\n| **view caching**\n\nyou can also cache and invalidate a view as a queryset. this works mostly the same way as function\ncaching, but only path of the request parameter is used to construct cache key:\n\n.. code:: python\n\n    from cacheops import cached_view_as\n\n    @cached_view_as(news)\n    def news_index(request):\n        # ...\n        return render(...)\n\nyou can pass ``timeout``, ``extra`` and several samples the same way as to ``@cached_as()``. note that you can pass a function as ``extra``:\n\n.. code:: python\n\n    @cached_view_as(news, extra=lambda req: req.user.is_staff)\n    def news_index(request):\n        # ... add extra things for staff\n        return render(...)\n\na function passed as ``extra`` receives the same arguments as the cached function.\n\nclass based views can also be cached:\n\n.. code:: python\n\n    class newsindex(listview):\n        model = news\n\n    news_index = cached_view_as(news, ...)(newsindex.as_view())\n\n\ninvalidation\n++++++++++++\n\ncacheops uses both time and event-driven invalidation. the event-driven one\nlistens on model signals and invalidates appropriate caches on ``model.save()``, ``.delete()``\nand m2m changes.\n\ninvalidation tries to be granular which means it won't invalidate a queryset\nthat cannot be influenced by added/updated/deleted object judging by query\nconditions. most of the time this will do what you want, if it won't you can use\none of the following:\n\n.. code:: python\n\n    from cacheops import invalidate_obj, invalidate_model, invalidate_all\n\n    invalidate_obj(some_article)  # invalidates queries affected by some_article\n    invalidate_model(article)     # invalidates all queries for model\n    invalidate_all()              # flush redis cache database\n\nand last there is ``invalidate`` command::\n\n    ./manage.py invalidate articles.article.34  # same as invalidate_obj\n    ./manage.py invalidate articles.article     # same as invalidate_model\n    ./manage.py invalidate articles   # invalidate all models in articles\n\nand the one that flushes cacheops redis database::\n\n    ./manage.py invalidate all\n\ndon't use that if you share redis database for both cache and something else.\n\n\n| **turning off and postponing invalidation**\n\nthere is also a way to turn off invalidation for a while:\n\n.. code:: python\n\n    from cacheops import no_invalidation\n\n    with no_invalidation:\n        # ... do some changes\n        obj.save()\n\nalso works as decorator:\n\n.. code:: python\n\n    @no_invalidation\n    def some_work(...):\n        # ... do some changes\n        obj.save()\n\ncombined with ``try ... finally`` it could be used to postpone invalidation:\n\n.. code:: python\n\n    try:\n        with no_invalidation:\n            # ...\n    finally:\n        invalidate_obj(...)\n        # ... or\n        invalidate_model(...)\n\npostponing invalidation can speed up batch jobs.\n\n\n| **mass updates**\n\nnormally `qs.update(...)` doesn't emit any events and thus doesn't trigger invalidation.\nand there is no transparent and efficient way to do that: trying to act on conditions will\ninvalidate too much if update conditions are orthogonal to many queries conditions,\nand to act on specific objects we will need to fetch all of them,\nwhich `queryset.update()` users generally try to avoid.\n\nin the case you actually want to perform the latter cacheops provides a shortcut:\n\n.. code:: python\n\n    qs.invalidated_update(...)\n\nnote that all the updated objects are fetched twice, prior and post the update.\n\ncomponents\n++++++++++\n\n\nsimple time-invalidated cache\n-----------------------------\n\nto cache result of a function call or a view for some time use:\n\n.. code:: python\n\n    from cacheops import cached, cached_view\n\n    @cached(timeout=number_of_seconds)\n    def top_articles(category):\n        return ... # some costly queries\n\n    @cached_view(timeout=number_of_seconds)\n    def top_articles(request, category=none):\n        # some costly queries\n        return httpresponse(...)\n\n\n``@cached()`` will generate separate entry for each combination of decorated function and its\narguments. also you can use ``extra`` same way as in ``@cached_as()``, most useful for nested\nfunctions:\n\n.. code:: python\n\n    @property\n    def articles_json(self):\n        @cached(timeout=10*60, extra=self.category_id)\n        def _articles_json():\n            ...\n            return json.dumps(...)\n\n        return _articles_json()\n\n\nyou can manually invalidate or update a result of a cached function:\n\n.. code:: python\n\n    top_articles.invalidate(some_category)\n    top_articles.key(some_category).set(new_value)\n\n\nto invalidate cached view you can pass absolute uri instead of request:\n\n.. code:: python\n\n    top_articles.invalidate('http://example.com/page', some_category)\n\n\ncacheops also provides get/set primitives for simple cache:\n\n.. code:: python\n\n    from cacheops import cache\n\n    cache.set(cache_key, data, timeout=none)\n    cache.get(cache_key)\n    cache.delete(cache_key)\n\n\n``cache.get`` will raise ``cachemiss`` if nothing is stored for given key:\n\n.. code:: python\n\n    from cacheops import cache, cachemiss\n\n    try:\n        result = cache.get(key)\n    except cachemiss:\n        ... # deal with it\n\n\nfile cache\n----------\n\nfile based cache can be used the same way as simple time-invalidated one:\n\n.. code:: python\n\n    from cacheops import file_cache\n\n    @file_cache.cached(timeout=number_of_seconds)\n    def top_articles(category):\n        return ... # some costly queries\n\n    @file_cache.cached_view(timeout=number_of_seconds)\n    def top_articles(request, category):\n        # some costly queries\n        return httpresponse(...)\n\n    # later, on appropriate event\n    top_articles.invalidate(some_category)\n    # or\n    top_articles.key(some_category).set(some_value)\n\n    # primitives\n    file_cache.set(cache_key, data, timeout=none)\n    file_cache.get(cache_key)\n    file_cache.delete(cache_key)\n\n\nit has several improvements upon django built-in file cache, both about high load.\nfirst, it's safe against concurrent writes. second, it's invalidation is done as separate task,\nyou'll need to call this from crontab for that to work::\n\n    /path/manage.py cleanfilecache\n    /path/manage.py cleanfilecache /path/to/non-default/cache/dir\n\n\ndjango templates integration\n----------------------------\n\ncacheops provides tags to cache template fragments. they mimic ``@cached_as``\nand ``@cached`` decorators, however, they require explicit naming of each fragment:\n\n.. code:: django\n\n    {% load cacheops %}\n\n    {% cached_as <queryset> <timeout> <fragment_name> [<extra1> <extra2> ...] %}\n        ... some template code ...\n    {% endcached_as %}\n\n    {% cached <timeout> <fragment_name> [<extra1> <extra2> ...] %}\n        ... some template code ...\n    {% endcached %}\n\nyou can use ``none`` for timeout in ``@cached_as`` to use it's default value for model.\n\nto invalidate cached fragment use:\n\n.. code:: python\n\n    from cacheops import invalidate_fragment\n\n    invalidate_fragment(fragment_name, extra1, ...)\n\nif you have more complex fragment caching needs, cacheops provides a helper to\nmake your own template tags which decorate a template fragment in a way\nanalogous to decorating a function with ``@cached`` or ``@cached_as``.\nthis is **experimental** feature for now.\n\nto use it create ``myapp/templatetags/mycachetags.py`` and add something like this there:\n\n.. code:: python\n\n    from cacheops import cached_as, cacheopslibrary\n\n    register = cacheopslibrary()\n\n    @register.decorator_tag(takes_context=true)\n    def cache_menu(context, menu_name):\n        from django.utils import translation\n        from myapp.models import flag, menuitem\n\n        request = context.get('request')\n        if request and request.user.is_staff():\n            # use noop decorator to bypass caching for staff\n            return lambda func: func\n\n        return cached_as(\n            # invalidate cache if any menu item or a flag for menu changes\n            menuitem,\n            flag.objects.filter(name='menu'),\n            # vary for menu name and language, also stamp it as \"menu\" to be safe\n            extra=(\"menu\", menu_name, translation.get_language()),\n            timeout=24 * 60 * 60\n        )\n\n``@decorator_tag`` here creates a template tag behaving the same as returned decorator\nupon wrapped template fragment. resulting template tag could be used as follows:\n\n.. code:: django\n\n    {% load mycachetags %}\n\n    {% cache_menu \"top\" %}\n        ... the top menu template code ...\n    {% endcache_menu %}\n\n    ... some template code ..\n\n    {% cache_menu \"bottom\" %}\n        ... the bottom menu template code ...\n    {% endcache_menu %}\n\n\njinja2 extension\n----------------\n\nadd ``cacheops.jinja2.cache`` to your extensions and use:\n\n.. code:: jinja\n\n    {% cached_as <queryset> [, timeout=<timeout>] [, extra=<key addition>] %}\n        ... some template code ...\n    {% endcached_as %}\n\nor\n\n.. code:: jinja\n\n    {% cached [timeout=<timeout>] [, extra=<key addition>] %}\n        ...\n    {% endcached %}\n\ntags work the same way as corresponding decorators.\n\n\nspecial topics\n++++++++++++++\n\ntransactions\n------------\n\ncacheops transparently supports transactions. this is implemented by following simple rules:\n\n1. once transaction is dirty (has changes) caching turns off. the reason is that the state of database at this point is only visible to current transaction and should not affect other users and vice versa.\n\n2. any invalidating calls are scheduled to run on the outer commit of transaction.\n\n3. savepoints and rollbacks are also handled appropriately.\n\nmind that simple and file cache don't turn itself off in transactions but work as usual.\n\n\ndog-pile effect prevention\n--------------------------\n\nthere is optional locking mechanism to prevent several threads or processes simultaneously performing same heavy task. it works with ``@cached_as()`` and querysets:\n\n.. code:: python\n\n    @cached_as(qs, lock=true)\n    def heavy_func(...):\n        # ...\n\n    for item in qs.cache(lock=true):\n        # ...\n\nit is also possible to specify ``lock: true`` in ``cacheops`` setting but that would probably be a waste. locking has no overhead on cache hit though.\n\n\nmultiple database support\n-------------------------\n\nby default cacheops considers query result is same for same query, not depending\non database queried. that could be changed with ``db_agnostic`` cache profile option:\n\n.. code:: python\n\n    cacheops = {\n        'some.model': {'ops': 'get', 'db_agnostic': false, 'timeout': ...}\n    }\n\n\nsharing redis instance\n----------------------\n\ncacheops provides a way to share a redis instance by adding prefix to cache keys:\n\n.. code:: python\n\n    cacheops_prefix = lambda query: ...\n    # or\n    cacheops_prefix = 'some.module.cacheops_prefix'\n\na most common usage would probably be a prefix by host name:\n\n.. code:: python\n\n    # get_request() returns current request saved to threadlocal by some middleware\n    cacheops_prefix = lambda _: get_request().get_host()\n\na ``query`` object passed to callback also enables reflection on used databases and tables:\n\n.. code:: python\n\n    def cacheops_prefix(query):\n        query.dbs    # a list of databases queried\n        query.tables # a list of tables query is invalidated on\n\n        if set(query.tables) <= helper_tables:\n            return 'helper:'\n        if query.tables == ['blog_post']:\n            return 'blog:'\n\n\ncustom serialization\n--------------------\n\ncacheops uses ``pickle`` by default, employing it's default protocol. but you can specify your own\nit might be any module or a class having ``.dumps()`` and ``.loads()`` functions. for example you can use ``dill`` instead, which can serialize more things like anonymous functions:\n\n.. code:: python\n\n    cacheops_serializer = 'dill'\n\none less obvious use is to fix pickle protocol, to use cacheops cache across python versions:\n\n.. code:: python\n\n    import pickle\n\n    class cacheops_serializer:\n        dumps = lambda data: pickle.dumps(data, 3)\n        loads = pickle.loads\n\n\nusing memory limit\n------------------\n\ncacheops offers an \"insideout\" mode, which idea is instead of conj sets contatining cache keys, cache values contain a checksum of random stamps stored in conj keys, which are checked on each read to stay the same. to use that add to settings:\n\n.. code:: python\n\n    cacheops_insideout = true  # might become default in future\n\nand set up ``maxmemory`` and ``maxmemory-policy`` in redis config::\n\n    maxmemory 4gb\n    maxmemory-policy volatile-lru  # or other volatile-*\n\nnote that using any of ``allkeys-*`` policies might drop important invalidation structures of cacheops and lead to stale cache.\n\n\nmemory usage cleanup\n--------------------\n\n**this does not apply to \"insideout\" mode. this issue doesn't happen there.**\n\nin some cases, cacheops may leave some conjunction keys of expired cache keys in redis without being able to invalidate them. those will still expire with age, but in the meantime may cause issues like slow invalidation (even \"busy redis ...\") and extra memory usage. to prevent that it is advised to not cache complex queries, see `perfomance tips <#performance-tips>`_, 5.\n\ncacheops ships with a ``cacheops.reap_conjs`` function that can clean up these keys,\nignoring conjunction sets with some reasonable size. it can be called using the ``reapconjs`` management command::\n\n    ./manage.py reapconjs --chunk-size=100 --min-conj-set-size=10000  # with custom values\n    ./manage.py reapconjs                                             # with default values (chunks=1000, min size=1000)\n\nthe command is a small wrapper that calls a function with the main logic. you can also call it from your code, for example from a celery task:\n\n.. code:: python\n\n    from cacheops import reap_conjs\n\n    @app.task\n    def reap_conjs_task():\n        reap_conjs(\n            chunk_size=2000,\n            min_conj_set_size=100,\n        )\n\n\nkeeping stats\n-------------\n\ncacheops provides ``cache_read`` and ``cache_invalidated`` signals for you to keep track.\n\ncache read signal is emitted immediately after each cache lookup. passed arguments are: ``sender`` - model class if queryset cache is fetched,\n``func`` - decorated function and ``hit`` - fetch success as boolean value.\n\nhere is a simple stats implementation:\n\n.. code:: python\n\n    from cacheops.signals import cache_read\n    from statsd.defaults.django import statsd\n\n    def stats_collector(sender, func, hit, **kwargs):\n        event = 'hit' if hit else 'miss'\n        statsd.incr('cacheops.%s' % event)\n\n    cache_read.connect(stats_collector)\n\ncache invalidation signal is emitted after object, model or global invalidation passing ``sender`` and ``obj_dict`` args. note that during normal operation cacheops only uses object invalidation, calling it once for each model create/delete and twice for update: passing old and new object dictionary.\n\n\ntroubleshooting\n+++++++++++++++\n\ncaveats\n-------\n\n1. conditions other than ``__exact``, ``__in`` and ``__isnull=true`` don't make invalidation\n   more granular.\n2. conditions on textfields, filefields and binaryfields don't make it either.\n   one should not test on their equality anyway. see `cacheops_skip_fields` though.\n3. update of \"selected_related\" object does not invalidate cache for queryset.\n   use ``.prefetch_related()`` instead.\n4. mass updates don't trigger invalidation by default. but see ``.invalidated_update()``.\n5. sliced queries are invalidated as non-sliced ones.\n6. doesn't work with ``.raw()`` and other sql queries.\n7. conditions on subqueries don't affect invalidation.\n8. doesn't work right with multi-table inheritance.\n\nhere 1, 2, 3, 5 are part of the design compromise, trying to solve them will make\nthings complicated and slow. 7 can be implemented if needed, but it's\nprobably counter-productive since one can just break queries into simpler ones,\nwhich cache better. 4 is a deliberate choice, making it \"right\" will flush\ncache too much when update conditions are orthogonal to most queries conditions,\nsee, however, `.invalidated_update()`. 8 is postponed until it will gain\nmore interest or a champion willing to implement it emerges.\n\nall unsupported things could still be used easily enough with the help of ``@cached_as()``.\n\n\nperformance tips\n----------------\n\nhere come some performance tips to make cacheops and django orm faster.\n\n1. when you use cache you pickle and unpickle lots of django model instances, which could be slow. you can optimize django models serialization with `django-pickling <http://github.com/suor/django-pickling>`_.\n\n2. constructing querysets is rather slow in django, mainly because most of ``queryset`` methods clone self, then change it and return the clone. original queryset is usually thrown away. cacheops adds ``.inplace()`` method, which makes queryset mutating, preventing useless cloning:\n\n   .. code:: python\n\n    items = item.objects.inplace().filter(category=12).order_by('-date')[:20]\n\n   you can revert queryset to cloning state using ``.cloning()`` call. note that this is a micro-optimization technique. using it is only desirable in the hottest places, not everywhere.\n\n3. use template fragment caching when possible, it's way more fast because you don't need to generate anything. also pickling/unpickling a string is much faster than a list of model instances.\n\n4. run separate redis instance for cache with disabled `persistence <http://redis.io/topics/persistence>`_. you can manually call `save <http://redis.io/commands/save>`_ or `bgsave <http://redis.io/commands/bgsave>`_ to stay hot upon server restart.\n\n5. if you filter queryset on many different or complex conditions cache could degrade performance (comparing to uncached db calls) in consequence of frequent cache misses. disable cache in such cases entirely or on some heuristics which detect if this request would be probably hit. e.g. enable cache if only some primary fields are used in filter.\n\n   caching querysets with large amount of filters also slows down all subsequent invalidation on that model (negligable for \"insideout\" mode). you can disable caching if more than some amount of fields is used in filter simultaneously.\n\n6. split database queries into smaller ones when you cache them. this goes against usual approach, but this allows invalidation to be more granular: smaller parts will be invalidated independently and each part will invalidate more precisely.\n\n   .. code:: python\n\n    post.objects.filter(category__slug=\"foo\")\n    # a single database query, but will be invalidated not only on\n    # any category with .slug == \"foo\" change, but also for any post change\n\n    post.objects.filter(category=category.objects.get(slug=\"foo\"))\n    # two queries, each invalidates only on a granular event:\n    # either category.slug == \"foo\" or post with .category_id == <whatever is there>\n\n\nwriting a test\n--------------\n\nwriting a test for an issue you are experiencing can speed up its resolution a lot.\nhere is how you do that. i suppose you have some application code causing it.\n\n1. make a fork.\n2. install all from ``requirements-test.txt``.\n3. ensure you can run tests with ``pytest``.\n4. copy relevant models code to ``tests/models.py``.\n5. go to ``tests/tests.py`` and paste code causing exception to ``issuetests.test_{issue_number}``.\n6. execute ``pytest -k {issue_number}`` and see it failing.\n7. cut down model and test code until error disappears and make a step back.\n8. commit changes and make a pull request.\n\n\ntodo\n++++\n\n- faster .get() handling for simple cases such as get by pk/id, with simple key calculation\n- integrate previous one with prefetch_related()\n- shard cache between multiple redises\n- respect subqueries?\n- respect headers in @cached_view*?\n- group invalidate_obj() calls?\n- a postpone invalidation context manager/decorator?\n- fast mode: store cache in local memory, but check in with redis if it's valid\n- an interface for complex fields to extract exact on parts or transforms: arrayfield.len => field__len=?, arrayfield[0] => field__0=?, jsonfield['some_key'] => field__some_key=?\n- custom cache eviction strategy in lua\n- cache a string directly (no pickle) for direct serving (custom key function?)\n\n\n.. |build status| image:: https://github.com/suor/django-cacheops/actions/workflows/ci.yml/badge.svg\n   :target: https://github.com/suor/django-cacheops/actions/workflows/ci.yml?query=branch%3amaster\n",
  "docs_url": null,
  "keywords": "",
  "license": "bsd",
  "name": "django-cacheops",
  "package_url": "https://pypi.org/project/django-cacheops/",
  "project_url": "https://pypi.org/project/django-cacheops/",
  "project_urls": {
    "Homepage": "http://github.com/Suor/django-cacheops"
  },
  "release_url": "https://pypi.org/project/django-cacheops/7.0.2/",
  "requires_dist": [],
  "requires_python": ">=3.7",
  "summary": "a slick orm cache with automatic granular event-driven invalidation for django.",
  "version": "7.0.2",
  "releases": [],
  "developers": [
    "alexander_schepanovski",
    "suor.web@gmail.com"
  ],
  "kwds": "cacheops caching cacheops_redis cache caches",
  "license_kwds": "bsd",
  "libtype": "pypi",
  "id": "pypi_django_cacheops",
  "homepage": "http://github.com/suor/django-cacheops",
  "release_count": 62,
  "dependency_ids": [],
  "documentation_summary": "The GitHub repository \"Suor/django-cacheops\" offers a sophisticated ORM cache for Django with automatic, granular, event-driven invalidation. It supports automatic and manual queryset caching, utilizing Redis as the backend for ORM cache and either Redis or the filesystem for simple time-invalidated caching. The package includes features like function and view caching, transparent transaction support, dog-pile effect prevention, and more. It requires Python 3.7+, Django 3.2+, and Redis 4.0+. Installation can be done via pip, and setup involves adding 'cacheops' to INSTALLED_APPS, configuring the Redis connection, and specifying caching rules for models. The package is licensed under BSD-3-Clause.",
  "embedding": [
    -0.007457423955202103,
    -0.010368156246840954,
    0.0006488949875347316,
    -0.042775724083185196,
    -0.01807345263659954,
    0.027775892987847328,
    0.0008427667780779302,
    -0.014844026416540146,
    -0.030084649100899696,
    -0.010849736630916595,
    0.00859763752669096,
    -0.0022149186115711927,
    -0.029489755630493164,
    0.02604786679148674,
    -0.005198242142796516,
    -0.01247861422598362,
    0.01851254142820835,
    -0.018923301249742508,
    0.009667030535638332,
    -0.010212350636720657,
    0.012584845535457134,
    -0.007691132370382547,
    -0.03563699498772621,
    -0.008059400133788586,
    0.00034657897776924074,
    0.002710663713514805,
    0.010056545026600361,
    -0.008647211827337742,
    -0.006264094263315201,
    0.016628708690404892,
    0.03288915008306503,
    -0.0002892584598157555,
    -0.03249255567789078,
    -0.010297335684299469,
    -0.010396484285593033,
    -0.003597693517804146,
    0.01879582367837429,
    -0.028314130380749702,
    0.0311894528567791,
    0.010495633818209171,
    0.024702273309230804,
    -0.01575053296983242,
    -0.011423384770751,
    -0.012599009089171886,
    0.004164259415119886,
    0.02090628258883953,
    0.010722259990870953,
    -0.03382398560643196,
    -0.006724429316818714,
    -0.012336972169578075,
    0.002315838122740388,
    0.04079274460673332,
    -0.019858134910464287,
    -0.016232112422585487,
    0.03172769024968147,
    -0.032464224845170975,
    0.0019564228132367134,
    0.022110234946012497,
    -0.020920446142554283,
    -0.007195387035608292,
    0.03019796311855316,
    0.006575705483555794,
    -0.02982969582080841,
    0.006154322065412998,
    -0.008611802011728287,
    0.01410749088972807,
    -0.004695415031164885,
    0.01661454513669014,
    0.0012349366443231702,
    -0.00874636135995388,
    0.038498152047395706,
    0.04308733716607094,
    -0.009574963711202145,
    -0.006965219508856535,
    0.023413335904479027,
    -0.03985791280865669,
    -0.032549209892749786,
    0.016642874106764793,
    0.010191104374825954,
    -0.00334627996198833,
    0.0007506998372264206,
    -0.020155582576990128,
    -0.0148723553866148,
    0.0442487969994545,
    0.010240678675472736,
    0.05167081207036972,
    0.005963106174021959,
    0.017761841416358948,
    -0.006816496141254902,
    0.0063526201993227005,
    0.009893656708300114,
    -0.010162776336073875,
    0.012103264220058918,
    0.005973729304969311,
    -0.012896456755697727,
    0.03416392579674721,
    -0.00947581510990858,
    0.030679544433951378,
    -0.0275775957852602,
    -0.0013340857112780213,
    -0.0052938503213226795,
    0.028469936922192574,
    -0.011855391785502434,
    -0.0177760049700737,
    -0.03351237252354622,
    -0.015693875029683113,
    0.027450118213891983,
    -0.0011889031156897545,
    0.025212183594703674,
    0.02025473117828369,
    -0.02277594991028309,
    0.04801645874977112,
    -0.0042917365208268166,
    -0.01740773767232895,
    0.012117428705096245,
    0.0132363960146904,
    0.011508369818329811,
    -0.022889262065291405,
    -0.0018076993292197585,
    -0.017223604023456573,
    -0.005092011298984289,
    0.02678440324962139,
    0.021005431190133095,
    -0.012662747874855995,
    0.0019103894010186195,
    -0.0159771591424942,
    -0.006281799636781216,
    0.011310071684420109,
    -0.000618796213530004,
    -0.02735096961259842,
    0.015297279693186283,
    0.026147017255425453,
    -0.0051486678421497345,
    -0.0042917365208268166,
    -0.024277349933981895,
    0.015863845124840736,
    -0.012818553484976292,
    0.02481558732688427,
    -0.022733457386493683,
    -0.016302933916449547,
    0.0004517035267781466,
    0.028781548142433167,
    -0.003888058476150036,
    -0.005651494953781366,
    0.0036933014634996653,
    0.054163701832294464,
    -0.012974359095096588,
    -0.007846937514841557,
    -0.01800263114273548,
    -0.003590611508116126,
    0.010269006714224815,
    -0.015580561943352222,
    -0.024319840595126152,
    0.0018678969936445355,
    0.029149815440177917,
    -0.01410749088972807,
    -0.0050282725133001804,
    -0.007719460409134626,
    -0.005980811547487974,
    0.004900794941931963,
    0.020651327446103096,
    0.02835662290453911,
    -0.02089211717247963,
    -0.016005486249923706,
    -0.013831290416419506,
    0.01712445542216301,
    0.02931978553533554,
    0.009497061371803284,
    -0.01610463671386242,
    0.021019594743847847,
    0.02270512841641903,
    0.015722203999757767,
    -0.03271917998790741,
    0.008321437053382397,
    -0.016147129237651825,
    0.008491406217217445,
    0.0035286431666463614,
    0.012174084782600403,
    -0.008441831916570663,
    -0.014001259580254555,
    0.013477186672389507,
    0.005796677432954311,
    0.008505570702254772,
    0.04753487929701805,
    -0.024489810690283775,
    -0.03685511276125908,
    -0.015538070350885391,
    0.004780399613082409,
    -0.010870982892811298,
    -0.005233652424067259,
    6.561983900610358e-05,
    0.011756242252886295,
    0.008215205743908882,
    -0.01611880026757717,
    -0.5760841965675354,
    0.008491406217217445,
    -0.010899311862885952,
    -0.04999944195151329,
    0.0027991896495223045,
    0.010021134279668331,
    0.019546523690223694,
    0.02669941820204258,
    -0.03033960424363613,
    0.014213722199201584,
    -0.03688343986868858,
    0.03076452948153019,
    0.0083426833152771,
    -0.0006515507702715695,
    -0.012195331044495106,
    -0.04753487929701805,
    0.020792968571186066,
    -0.013285970315337181,
    -0.015254787169396877,
    0.017648527398705482,
    -0.0004008011019323021,
    0.02192610129714012,
    -0.04739323630928993,
    0.031387750059366226,
    -0.009497061371803284,
    0.023979902267456055,
    0.003884517587721348,
    0.0011481812689453363,
    0.005994975566864014,
    6.141485937405378e-05,
    -0.02400822937488556,
    0.02344166487455368,
    0.0333990603685379,
    -0.004525445401668549,
    0.06866778433322906,
    -0.025991210713982582,
    -0.018229257315397263,
    0.04897962138056755,
    -0.0052938503213226795,
    0.03507043048739433,
    0.0034348058979958296,
    -0.00900131557136774,
    -0.0029284374322742224,
    0.012861046008765697,
    0.014454512856900692,
    -0.01858336105942726,
    0.012705240398645401,
    0.012931866571307182,
    -0.006685477681457996,
    -0.015254787169396877,
    0.010141530074179173,
    -0.005162831861525774,
    0.002252099569886923,
    -0.012839799746870995,
    0.008781771175563335,
    -0.01980147883296013,
    -0.00718476390466094,
    0.007570737041532993,
    0.02155783213675022,
    0.012705240398645401,
    0.010715177282691002,
    0.03147273510694504,
    -0.0057754311710596085,
    -0.028384951874613762,
    -0.03345571830868721,
    0.029546411707997322,
    -0.02147284708917141,
    -0.01922074891626835,
    0.00979450810700655,
    -0.007620311342179775,
    0.028540758416056633,
    -0.009015480056405067,
    0.0001954209728864953,
    -0.025452973321080208,
    0.003240048885345459,
    0.02698270045220852,
    0.013902110978960991,
    0.01440493855625391,
    0.003863271325826645,
    0.02713850699365139,
    0.009079218842089176,
    0.012683994136750698,
    -0.018328407779335976,
    -0.03169936314225197,
    0.03560866788029671,
    0.00947581510990858,
    -0.019829805940389633,
    -0.003427723655477166,
    0.011203840374946594,
    -0.019036615267395973,
    0.011508369818329811,
    0.03257754072546959,
    -0.014036670327186584,
    -0.021203728392720222,
    -0.0011101150885224342,
    0.011147184297442436,
    -0.012648583389818668,
    0.018243422731757164,
    -0.025198018178343773,
    -0.04178423434495926,
    -0.005410704296082258,
    -0.013229314237833023,
    -0.025637106969952583,
    0.0166853666305542,
    0.0020945232827216387,
    -0.0031550638377666473,
    -0.007280372083187103,
    -0.0060374680906534195,
    0.028710726648569107,
    -0.007783199194818735,
    0.014263296499848366,
    -0.02720932848751545,
    0.005269062705338001,
    -0.000330201699398458,
    -0.006848365534096956,
    -0.019716493785381317,
    0.02169947326183319,
    0.016274604946374893,
    0.027124343439936638,
    -0.006267635151743889,
    -0.0174219012260437,
    -0.007113943342119455,
    0.0159629937261343,
    -0.02858324907720089,
    0.02627449296414852,
    -0.0009224401437677443,
    0.02147284708917141,
    0.0037322528660297394,
    -0.016132963821291924,
    -0.0004251457576174289,
    0.008477242663502693,
    -0.022223547101020813,
    -0.0002939060505013913,
    -0.03019796311855316,
    0.044022172689437866,
    -0.0013057573232799768,
    0.006565082352608442,
    0.007492834236472845,
    0.005821464583277702,
    -0.018555033951997757,
    -0.014206640422344208,
    0.02009892463684082,
    -0.00421029282733798,
    -0.024050721898674965,
    -0.015523905865848064,
    -0.014744877815246582,
    -0.003022274933755398,
    0.00698292488232255,
    -0.026033703237771988,
    -0.006869611795991659,
    -0.010722259990870953,
    0.014858190901577473,
    -0.026501120999455452,
    0.0014288084348663688,
    -0.011147184297442436,
    -0.0057506440207362175,
    -0.014440348371863365,
    -0.021161235868930817,
    -0.016444575041532516,
    0.0022875098511576653,
    0.025920391082763672,
    0.017294423654675484,
    0.0009622767684049904,
    0.0023441663943231106,
    -0.05280394107103348,
    -0.005357588641345501,
    -0.01230156235396862,
    0.03252088278532028,
    -0.008264780044555664,
    -0.025523794814944267,
    -0.015580561943352222,
    -0.031217781826853752,
    0.004157177172601223,
    -0.006685477681457996,
    0.003429494332522154,
    -0.006334914825856686,
    -0.009227941744029522,
    0.002271575154736638,
    0.0010375238489359617,
    -0.0039765844121575356,
    0.03099115565419197,
    0.01784682646393776,
    -0.03861146792769432,
    -0.014114572666585445,
    0.022577650845050812,
    0.02439066208899021,
    -0.007535326760262251,
    0.02488640695810318,
    -0.025778748095035553,
    0.011579190380871296,
    -0.015948830172419548,
    0.006915645208209753,
    -0.024433154612779617,
    -0.008909248746931553,
    -0.019999776035547256,
    0.03002799302339554,
    0.007057286333292723,
    0.0018271750304847956,
    0.014376609586179256,
    0.030679544433951378,
    0.009199613705277443,
    -0.010977214202284813,
    0.010325663723051548,
    -0.023158380761742592,
    -0.012159920297563076,
    -0.017960138618946075,
    0.0384698249399662,
    -0.020297223702073097,
    0.030056321993470192,
    -0.0159771591424942,
    0.018965793773531914,
    0.0014296936569735408,
    -0.023696618154644966,
    -0.02002810500562191,
    -0.019121598452329636,
    0.022237712517380714,
    0.0012517565628513694,
    -0.004369639325886965,
    -0.007131648249924183,
    -0.003119653556495905,
    0.004334229044616222,
    -0.0013385119382292032,
    0.007142271380871534,
    -0.007092697080224752,
    0.0016155980993062258,
    -0.009022561833262444,
    0.020283060148358345,
    0.019135763868689537,
    0.03113279677927494,
    -0.038356512784957886,
    -0.022577650845050812,
    0.04396551474928856,
    0.013427612371742725,
    -0.0020077680237591267,
    0.03314410522580147,
    0.01582135260105133,
    0.019716493785381317,
    -0.015438920818269253,
    0.0163312628865242,
    -0.033257417380809784,
    0.029489755630493164,
    0.024730602279305458,
    0.027195163071155548,
    -0.03390897065401077,
    -0.016005486249923706,
    -0.0007617655792273581,
    0.025778748095035553,
    0.007740706671029329,
    -0.020212238654494286,
    -0.008328518830239773,
    0.012117428705096245,
    0.015438920818269253,
    -0.01705363392829895,
    0.005531099624931812,
    -0.005757725797593594,
    -0.004323605913668871,
    0.03150106593966484,
    0.008335600607097149,
    0.01995728351175785,
    0.007769035175442696,
    0.030792856588959694,
    0.007209551054984331,
    0.007733624428510666,
    2.506390228518285e-05,
    0.030651215463876724,
    -0.024758929386734962,
    -0.02516969107091427,
    -0.0192349124699831,
    0.004996403120458126,
    -0.023739110678434372,
    -0.007308700121939182,
    -0.05999932810664177,
    -0.022011086344718933,
    -0.033767327666282654,
    0.010920558124780655,
    0.017025304958224297,
    0.002333543263375759,
    0.030679544433951378,
    0.008137302473187447,
    -0.011345482431352139,
    -0.0051805367693305016,
    -0.028710726648569107,
    0.029999664053320885,
    -0.005339883733540773,
    -0.012351136654615402,
    0.005825005937367678,
    -0.014305789023637772,
    0.007149353623390198,
    0.001921012531965971,
    0.004380262456834316,
    0.01842755638062954,
    0.02002810500562191,
    8.194180554710329e-05,
    0.010899311862885952,
    -0.02467394433915615,
    -0.013002687133848667,
    0.038356512784957886,
    -0.0021210811100900173,
    -0.030509574338793755,
    0.0006590755074284971,
    0.00848432444036007,
    0.0027832549531012774,
    -0.015070653520524502,
    0.005640871822834015,
    0.03923469036817551,
    0.010353991761803627,
    -0.004936205223202705,
    -0.007429095450788736,
    -0.00024742993991822004,
    -0.006887316703796387,
    0.00964578427374363,
    0.004079274367541075,
    -0.029999664053320885,
    -0.010863901115953922,
    0.0214020274579525,
    0.005286768078804016,
    0.003424182767048478,
    -0.0025902683846652508,
    0.03286082297563553,
    0.011048034764826298,
    -0.012386547401547432,
    -0.019121598452329636,
    -0.02626032941043377,
    -0.005417786538600922,
    0.026671089231967926,
    0.012726486660540104,
    -0.006281799636781216,
    0.0293764416128397,
    -0.04504198953509331,
    -0.025778748095035553,
    -0.0038172376807779074,
    0.00446170661598444,
    0.03158605098724365,
    6.589648546651006e-05,
    -0.009695359505712986,
    0.02031138725578785,
    -0.006922726985067129,
    -0.00600205734372139,
    0.02379576861858368,
    0.008647211827337742,
    -0.018030960112810135,
    0.0023671831004321575,
    0.0037924505304545164,
    -0.026897717267274857,
    0.006827119272202253,
    -0.007085614837706089,
    0.00622514309361577,
    0.03212428838014603,
    0.05869622901082039,
    0.008675540797412395,
    0.018994122743606567,
    0.030367933213710785,
    -0.014355363324284554,
    -0.04082107171416283,
    -0.016855334863066673,
    -0.0072414204478263855,
    0.013824207708239555,
    0.003468445735052228,
    -0.0005931236664764583,
    -0.0018484212923794985,
    0.03235091269016266,
    0.03470216318964958,
    0.02263430878520012,
    0.02103376016020775,
    0.03393729776144028,
    0.003495003329589963,
    0.0020608834456652403,
    -0.008703868836164474,
    0.007896512746810913,
    -0.014164147898554802,
    0.00325775402598083,
    0.040679432451725006,
    -0.013151410967111588,
    -0.01375338714569807,
    0.015495577827095985,
    0.013972931541502476,
    -0.048951294273138046,
    -0.00906505435705185,
    0.025084706023335457,
    -0.0076982141472399235,
    0.0163170974701643,
    -0.011125938035547733,
    -0.005449655931442976,
    -0.041982535272836685,
    -0.0050566005520522594,
    -0.0007033384754322469,
    -0.011380892246961594,
    0.0034418879076838493,
    -0.008066481910645962,
    -0.014886518940329552,
    -0.022039413452148438,
    0.0001673139922786504,
    -0.02052384987473488,
    0.008703868836164474,
    0.006533212959766388,
    -0.033115778118371964,
    -0.0021812787745147943,
    -0.00540716340765357,
    0.029914679005742073,
    -0.006919186096638441,
    -0.006310127675533295,
    0.0017660921439528465,
    -0.014426184818148613,
    0.004911418072879314,
    0.004309441894292831,
    -0.022591816261410713,
    -0.007733624428510666,
    -0.029348114505410194,
    3.433837491684244e-06,
    -0.006795249879360199,
    0.03382398560643196,
    0.006600492633879185,
    -0.012974359095096588,
    0.0362885445356369,
    0.018625853583216667,
    0.003909304738044739,
    0.02511303313076496,
    0.005577133037149906,
    0.0042881956323981285,
    -0.0032382782083004713,
    0.009305845014750957,
    -0.003363985102623701,
    0.02893735282123089,
    0.0026593187358230352,
    -0.005761267151683569,
    0.022464338690042496,
    -0.0391780324280262,
    0.007854020223021507,
    -0.013002687133848667,
    0.00276732025668025,
    -0.009964478202164173,
    -0.011097609996795654,
    -0.013958767056465149,
    0.007960250601172447,
    0.00830727256834507,
    0.004504199139773846,
    -0.007234338205307722,
    -0.008264780044555664,
    -0.002970929956063628,
    0.009532471187412739,
    -0.015183966606855392,
    0.043059010058641434,
    -0.015538070350885391,
    0.011805817484855652,
    0.0021529505029320717,
    -0.02771923691034317,
    -0.0009613915462978184,
    0.006334914825856686,
    0.020991267636418343,
    0.0066359033808112144,
    -0.012938949279487133,
    -0.024645617231726646,
    -0.03271917998790741,
    0.018923301249742508,
    0.021373698487877846,
    0.009674113243818283,
    -0.026940207928419113,
    -0.026430299505591393,
    -0.010113201104104519,
    0.010729341767728329,
    -0.01291062030941248,
    -0.002834599930793047,
    0.010467304848134518,
    -0.0033002463169395924,
    -0.011982869356870651,
    -0.0261186882853508,
    0.016047978773713112,
    -0.02640197053551674,
    0.004854761529713869,
    -0.023328350856900215,
    -0.0028735515661537647,
    -0.011345482431352139,
    -0.004536068066954613,
    -0.00953955389559269,
    0.004670627880841494,
    -0.013455940410494804,
    -0.014362446032464504,
    -0.029206471517682076,
    -0.004245703108608723,
    -0.011997032910585403,
    0.013661320321261883,
    -0.012082017958164215,
    0.016444575041532516,
    0.0297447107732296,
    0.00815854873508215,
    0.017464393749833107,
    0.012124510481953621,
    0.017251931130886078,
    0.021430354565382004,
    -0.0017200587317347527,
    -0.007170599885284901,
    -0.004999944008886814,
    -0.007740706671029329,
    -0.014603235758841038,
    0.004833515267819166,
    0.00997155997902155,
    0.011883719824254513,
    -0.03861146792769432,
    -0.013448858633637428,
    0.02162865363061428,
    0.0022397057618945837,
    -0.014759042300283909,
    -0.017152782529592514,
    -0.034362222999334335,
    -0.008059400133788586,
    0.0016908451216295362,
    0.004582101944833994,
    0.0002374707837589085,
    -0.025863733142614365,
    -0.0022857394069433212,
    0.023399172350764275,
    0.0026681714225560427,
    0.0326341949403286,
    -0.013668402098119259,
    -0.002103375969454646,
    -0.032690852880477905,
    0.0195890162140131,
    0.02946142666041851,
    -0.0027620086912065744,
    0.005672741215676069,
    -0.016047978773713112,
    -0.027025192975997925,
    0.025523794814944267,
    0.0032365077640861273,
    -0.00256548123434186,
    -0.003799532540142536,
    -0.01858336105942726,
    0.0038738944567739964,
    -0.012436121702194214,
    0.03592027723789215,
    0.004192587919533253,
    -0.013661320321261883,
    0.011947458609938622,
    -0.028781548142433167,
    -0.004780399613082409,
    -0.010099037550389767,
    -0.026359478011727333,
    -0.027535103261470795,
    0.02997133694589138,
    0.00827186182141304,
    0.013774633407592773,
    0.015991322696208954,
    0.0018342571565881371,
    0.00023968394089024514,
    0.004674168769270182,
    -0.019249076023697853,
    0.03235091269016266,
    -0.0018501917365938425,
    0.038271527737379074,
    0.027960026636719704,
    0.026232002303004265,
    -0.010311499238014221,
    -0.004220915958285332,
    0.00548152532428503,
    0.005757725797593594,
    0.023597469553351402,
    0.02182695083320141,
    -0.008123138919472694,
    0.010566454380750656,
    0.006997088901698589,
    -0.012485696002840996,
    -0.030594559386372566,
    -0.01008487306535244,
    0.02764841541647911,
    0.01433411706238985,
    0.021132908761501312,
    -0.026387806981801987,
    -0.0009188990807160735,
    -0.005233652424067259,
    -0.01143046747893095,
    -0.018300078809261322,
    -0.006285340525209904,
    0.016628708690404892,
    -0.007861101999878883,
    -0.02206774242222309,
    0.022025249898433685,
    0.030849512666463852,
    0.00947581510990858,
    0.012216577306389809,
    -0.01247861422598362,
    -0.01393752172589302,
    -0.04535359889268875,
    -0.004270490724593401,
    0.009192531928420067,
    0.0032329666428267956,
    0.014029588550329208,
    0.003902222728356719,
    -0.002749615116044879,
    0.045240286737680435,
    -0.00968119502067566,
    0.01067268569022417,
    -0.006972301751375198,
    -0.025778748095035553,
    0.03795991465449333,
    0.014482840895652771,
    -0.009277516975998878,
    -0.02337084338068962,
    -0.005545263644307852,
    -0.011083445511758327,
    -0.0057116923853755,
    -0.02409321442246437,
    -0.008781771175563335,
    0.0036791374441236258,
    -0.004794564098119736,
    -0.003760581137612462,
    -0.006246388889849186,
    -0.014454512856900692,
    0.013540925458073616,
    -0.006267635151743889,
    -0.0192349124699831,
    -0.003372837556526065,
    -0.0243056770414114,
    0.03317243233323097,
    -0.033115778118371964,
    -0.02771923691034317,
    -0.023682454600930214,
    -0.004723743069916964,
    0.0069510554894804955,
    0.013909192755818367,
    0.007372438907623291,
    0.0008826034609228373,
    0.04447542503476143,
    -0.005290308967232704,
    0.013682566583156586,
    0.005559428129345179,
    0.005223029293119907,
    -0.008087728172540665,
    0.03897973522543907,
    -0.020991267636418343,
    -0.007882348261773586,
    0.04620344936847687,
    0.012584845535457134,
    -0.02082129754126072,
    -0.03379565477371216,
    -0.006125994026660919,
    0.008916330523788929,
    0.01844171993434429,
    -0.00903672631829977,
    0.008965905755758286,
    0.0024946604389697313,
    0.02837078832089901,
    -0.0041394722647964954,
    -0.018045123666524887,
    0.024362333118915558,
    -0.03606192022562027,
    0.003927010111510754,
    0.028484100475907326,
    0.0029603068251162767,
    0.005067223682999611,
    0.004543150309473276,
    0.022676799446344376,
    0.01951819472014904,
    -0.020580505952239037,
    -0.030934497714042664,
    -0.0050034853629767895,
    6.147018575575203e-05,
    -0.009518307633697987,
    0.02226603962481022,
    -0.016671201214194298,
    0.018115945160388947,
    -0.015764696523547173,
    0.03198264539241791,
    0.00024211840354837477,
    0.016784515231847763,
    0.00185904442332685,
    -0.0025955799501389265,
    -0.0052938503213226795,
    0.015183966606855392,
    -0.006016221828758717,
    0.012903538532555103,
    -0.026359478011727333,
    0.005768348928540945,
    -0.030962826684117317,
    -0.031076140701770782,
    -0.038923077285289764,
    0.026571940630674362,
    0.02490057237446308,
    -0.0007936349138617516,
    -0.03090617060661316,
    0.01320806797593832,
    -0.013810044154524803,
    0.007584901060909033,
    -0.03470216318964958,
    0.02814416214823723,
    0.015835516154766083,
    -0.01026192493736744,
    0.014914847910404205,
    0.005931236781179905,
    0.005789595190435648,
    0.013130164705216885,
    -0.01352676097303629,
    0.007818609476089478,
    -0.040367819368839264,
    0.009659948758780956,
    0.014773205853998661,
    -0.016869500279426575,
    -0.033993955701589584,
    -0.005400081165134907,
    0.0012216577306389809,
    0.0053221783600747585,
    0.04164259508252144,
    0.043710559606552124,
    -0.020509686321020126,
    -0.008795935660600662,
    -0.0038526481948792934,
    -0.015906337648630142,
    -0.003348050406202674,
    0.035806965082883835,
    0.024404825642704964,
    -0.03294580802321434,
    -0.012308644130825996,
    0.0326341949403286,
    0.0021458682604134083,
    -0.002128163119778037,
    0.0008662261534482241,
    0.0005745332455262542,
    -0.015722203999757767,
    0.020877953618764877,
    -0.011557944118976593,
    -0.013130164705216885,
    -0.0009454568498767912,
    0.006168486084789038,
    0.00888800248503685,
    -0.0012473302194848657,
    0.008980069309473038,
    0.01317265722900629,
    0.007131648249924183,
    -0.02264847233891487,
    -0.02859741449356079,
    0.01501399651169777,
    -0.042407456785440445,
    -0.0014836944174021482,
    0.007014794275164604,
    -0.01203952543437481,
    0.024036558344960213,
    -0.012117428705096245,
    0.0326341949403286,
    0.0017271407414227724,
    -0.022662635892629623,
    -0.012761897407472134,
    0.005247816909104586,
    -0.013392201624810696,
    -0.014617400243878365,
    0.03039626032114029,
    -0.017209438607096672,
    0.019036615267395973,
    0.0243056770414114,
    0.010920558124780655,
    -0.00363664492033422,
    0.006607574876397848,
    0.0018059287685900927,
    -0.03178434818983078,
    0.0010649668984115124,
    -0.0009941461030393839,
    0.0021458682604134083,
    -0.04215250164270401,
    -0.01041064877063036,
    -0.0032612949144095182,
    -0.0059241545386612415,
    0.026741910725831985,
    0.19478535652160645,
    0.0045998068526387215,
    0.002211377490311861,
    0.02277594991028309,
    -0.008201041258871555,
    0.018809987232089043,
    0.00929168052971363,
    0.0020520309917628765,
    -0.032690852880477905,
    0.044078826904296875,
    0.004670627880841494,
    -0.01967400126159191,
    -0.022322697564959526,
    0.0006564197246916592,
    -0.00727328984066844,
    0.015608890913426876,
    -0.003486150875687599,
    -0.05014108121395111,
    0.0061578634195029736,
    -0.004107602871954441,
    0.017294423654675484,
    0.011423384770751,
    -0.036458514630794525,
    -0.0035835292655974627,
    0.016161292791366577,
    -0.027336804196238518,
    0.005371753126382828,
    -0.017506886273622513,
    0.014943175949156284,
    -0.008116056211292744,
    -0.017379408702254295,
    0.005325719714164734,
    0.010885147377848625,
    -0.0038774353452026844,
    -0.01936239004135132,
    -0.014497005380690098,
    -0.0009224401437677443,
    -0.038356512784957886,
    -0.0020360962953418493,
    0.013392201624810696,
    -0.002124622231349349,
    -0.02648695558309555,
    0.008498488925397396,
    -0.03053790144622326,
    -0.0008542751311324537,
    -0.010757669806480408,
    -7.248060137499124e-05,
    0.0011720831971615553,
    0.019135763868689537,
    0.014929011464118958,
    -0.021727802231907845,
    -0.032974135130643845,
    0.017011141404509544,
    -0.004688332788646221,
    0.010736423544585705,
    -0.008363929577171803,
    -0.016274604946374893,
    -0.016203785315155983,
    0.008548063226044178,
    -0.007429095450788736,
    -0.011274661868810654,
    0.03764830529689789,
    -0.008321437053382397,
    0.0018147814553231,
    -0.05594838410615921,
    0.014773205853998661,
    -0.03277583792805672,
    0.0058710393495857716,
    -0.00953955389559269,
    -0.017818497493863106,
    -0.023243365809321404,
    -0.017209438607096672,
    -0.04600515216588974,
    -0.024220691993832588,
    0.011522534303367138,
    -0.0024503974709659815,
    0.007620311342179775,
    0.018158437684178352,
    0.024560632184147835,
    0.03946131467819214,
    -0.02618950977921486,
    0.016444575041532516,
    -0.007032499182969332,
    0.027662580832839012,
    0.008682622574269772,
    -0.02474476583302021,
    0.04906460642814636,
    -0.0022892802953720093,
    0.008689704351127148,
    -0.022974247112870216,
    -0.023965738713741302,
    -0.007036040537059307,
    -0.003590611508116126,
    -0.0024734141770750284,
    0.011083445511758327,
    -0.0035410369746387005,
    -0.007407849188894033,
    0.024914735928177834,
    -0.0018838316900655627,
    6.525328899442684e-06,
    -0.01023359689861536,
    0.04804478958249092,
    0.01262733805924654,
    -0.01885247975587845,
    -0.017620200291275978,
    0.025353824719786644,
    -0.009482896886765957,
    -0.0013137246714904904,
    -0.006678395438939333,
    -0.004528986290097237,
    0.010651439428329468,
    -0.03597693517804146,
    -0.012344054877758026,
    -0.005446114577353001,
    0.004957451485097408,
    -0.0034649046137928963,
    -0.01367548480629921,
    -0.003493232885375619,
    0.00011541567073436454,
    0.0030629970133304596,
    0.028923189267516136,
    -0.025877898558974266,
    -0.006696100812405348,
    -0.012683994136750698,
    -0.015495577827095985,
    -0.011040952987968922,
    -0.02750677429139614,
    0.02931978553533554,
    -0.01995728351175785,
    -0.02184111624956131,
    0.018597526475787163,
    -0.026076195761561394,
    0.01922074891626835,
    0.021458683535456657,
    0.004479411523789167,
    0.004812269005924463,
    -0.014900683425366879,
    -0.026373643428087234,
    0.007811527233570814,
    0.006674854550510645,
    -0.020948775112628937,
    -0.003057685447856784,
    0.016954485327005386,
    0.007931922562420368,
    0.014298707246780396,
    -0.0479031465947628,
    0.014603235758841038,
    -0.012967277318239212,
    0.0006714691407978535,
    -0.0028009600937366486,
    -0.017506886273622513,
    0.015042324550449848,
    0.03186933323740959,
    -0.03694009780883789,
    0.015906337648630142,
    -0.02458896115422249,
    -0.01944737508893013,
    -0.017166946083307266,
    0.002354789525270462,
    0.018909137696027756,
    -0.017011141404509544,
    -0.00038088278961367905,
    -0.0005147782503627241,
    0.0159629937261343,
    -0.01756354235112667,
    -0.03824319690465927,
    -0.17903482913970947,
    0.005722315516322851,
    -0.002682335441932082,
    -0.015382264740765095,
    0.007684050127863884,
    -0.015580561943352222,
    0.024716436862945557,
    -1.5381379853351973e-05,
    0.003714547725394368,
    0.0020006857812404633,
    -0.0009684736141934991,
    0.0011641158489510417,
    0.0006564197246916592,
    -0.032605867832899094,
    0.012818553484976292,
    -0.017209438607096672,
    -0.013852536678314209,
    -0.007407849188894033,
    0.008208123967051506,
    0.004617512226104736,
    0.044305454939603806,
    -0.04365390166640282,
    0.037336692214012146,
    0.005208865273743868,
    -0.02097710222005844,
    -0.029121488332748413,
    0.00040168638224713504,
    -0.008781771175563335,
    -0.008548063226044178,
    -0.032322585582733154,
    -0.024249020963907242,
    0.0033958544954657555,
    0.028923189267516136,
    0.01436952780932188,
    -0.007769035175442696,
    0.00718476390466094,
    0.02829996682703495,
    -0.006681936793029308,
    0.004497116897255182,
    0.03053790144622326,
    0.04028283432126045,
    0.02982969582080841,
    0.0008941118139773607,
    -0.016444575041532516,
    -0.01821509376168251,
    0.007485751993954182,
    0.030056321993470192,
    -0.008123138919472694,
    0.013725059106945992,
    -0.026940207928419113,
    0.04249244183301926,
    -0.007790280971676111,
    0.0032719180453568697,
    0.005640871822834015,
    0.004359016660600901,
    0.01346302218735218,
    0.024546468630433083,
    -0.020778805017471313,
    0.007606147322803736,
    0.0002352576411794871,
    -0.00958204548805952,
    -0.013689648360013962,
    0.0028009600937366486,
    0.006480097770690918,
    -0.025410480797290802,
    -0.022605979815125465,
    -0.017365245148539543,
    0.020212238654494286,
    -0.008675540797412395,
    0.03053790144622326,
    0.010750588029623032,
    0.04929123446345329,
    0.007007712032645941,
    0.0016350738005712628,
    0.022945920005440712,
    0.004606889095157385,
    -0.011940376833081245,
    0.008689704351127148,
    0.02728014811873436,
    0.001381889684125781,
    -0.0008250615792348981,
    0.039149705320596695,
    -0.010906393639743328,
    0.013710894621908665,
    -0.0007905364618636668,
    -0.01837090030312538,
    0.0035428074188530445,
    -0.010361073538661003,
    -0.003445429028943181,
    -0.007974415086209774,
    0.008533898741006851,
    -0.01334970910102129,
    0.017535215243697166,
    -0.0013801191234961152,
    0.009688276797533035,
    0.014603235758841038,
    -0.004475870635360479,
    0.002043178305029869,
    0.026458628475666046,
    -0.007917758077383041,
    0.0007573392940685153,
    0.006763380486518145,
    -0.019787313416600227,
    -0.00429881876334548,
    0.011373810470104218,
    0.01638791896402836,
    -0.02633115090429783,
    -0.005453196819871664,
    0.02291759103536606,
    0.008201041258871555,
    -0.0014031358296051621,
    0.018767494708299637,
    0.03252088278532028,
    0.008399339392781258,
    -0.032407570630311966,
    0.01110469177365303,
    0.01556639838963747,
    0.0006727970321662724,
    0.003990748431533575,
    -0.010162776336073875,
    0.05138752609491348,
    -0.013703812845051289,
    -0.021217893809080124,
    0.01895163021981716,
    0.017025304958224297,
    -0.014787370339035988,
    -0.11648595333099365,
    -0.06475847959518433,
    0.016926156356930733,
    0.017521049827337265,
    -0.027535103261470795,
    -0.006179109215736389,
    0.013597581535577774,
    0.011465877294540405,
    -0.03155772015452385,
    0.014015424065291882,
    0.0007148468284867704,
    -0.010970132425427437,
    -0.00805231835693121,
    0.02423485741019249,
    -0.02763425186276436,
    0.0007290109642781317,
    -0.010623110458254814,
    -0.022294368594884872,
    0.016147129237651825,
    0.01865418255329132,
    -0.002618596889078617,
    -0.01262733805924654,
    0.001075589912943542,
    0.007414931431412697,
    -0.026685254648327827,
    0.0013163804542273283,
    -0.032407570630311966,
    0.030452918261289597,
    0.00015746548888273537,
    0.025311332195997238,
    0.033342402428388596,
    -0.00740076694637537,
    -0.033484045416116714,
    -0.008569309487938881,
    0.010658521205186844,
    0.0011410991428419948,
    -0.021232057362794876,
    -0.020792968571186066,
    0.036826785653829575,
    -0.01559472642838955,
    0.008980069309473038,
    -0.002931978553533554,
    -0.004107602871954441,
    -0.004525445401668549,
    -0.0016412705881521106,
    -0.007004171144217253,
    0.028540758416056633,
    0.020268894731998444,
    0.02205357700586319,
    -0.016232112422585487,
    0.0130593441426754,
    -0.017521049827337265,
    -0.007733624428510666,
    0.006483638659119606,
    0.009553717449307442,
    -0.03829985484480858,
    0.011600436642765999,
    0.012386547401547432,
    0.003909304738044739,
    -0.005722315516322851,
    0.0056337895803153515,
    0.011515451595187187,
    -0.004851220641285181,
    0.035438697785139084,
    0.021147072315216064,
    -0.006699641700834036,
    0.022747620940208435,
    0.005715233739465475,
    0.011557944118976593,
    -0.00698292488232255,
    -0.015863845124840736,
    0.0006289766752161086,
    -0.04456041008234024,
    0.0057471031323075294,
    -0.02779005840420723,
    0.0028151243459433317,
    0.01878166012465954,
    -0.018328407779335976,
    -0.008895084261894226,
    -0.006717347074300051,
    -0.01255651656538248,
    0.0009277516510337591,
    -0.00813022069633007,
    -0.02141619101166725,
    0.007028958294540644,
    -0.0036331037990748882,
    0.024702273309230804,
    0.026685254648327827,
    0.021897772327065468,
    -0.04011286795139313,
    0.0041430131532251835,
    -0.01827174983918667,
    0.013002687133848667,
    -0.018838316202163696,
    -0.015368100255727768,
    0.013916275463998318,
    -0.01302393339574337,
    0.0239515732973814,
    -0.028469936922192574,
    0.015198130160570145,
    -0.022960083559155464,
    -0.02416403591632843,
    -0.07580652087926865,
    0.0027372215408831835,
    0.008795935660600662,
    -0.003286082297563553,
    0.01573636755347252,
    -0.03694009780883789,
    -0.014631564728915691,
    -0.03175601735711098,
    0.0004251457576174289,
    0.012747732922434807,
    -0.0148723553866148,
    0.020792968571186066,
    -0.012400710955262184,
    -0.015509741380810738,
    0.00958204548805952,
    0.009454568848013878,
    0.044985331594944,
    -0.007584901060909033,
    0.016373755410313606,
    0.014574907720088959,
    -0.04195420444011688,
    0.005665658973157406,
    0.007825691252946854,
    0.00900131557136774,
    -0.018909137696027756,
    -0.009801589883863926,
    0.0018643559888005257,
    0.036316875368356705,
    -0.009348337538540363,
    -0.001404906390234828,
    -0.00247695529833436,
    -0.01262025535106659,
    0.004585642833262682,
    0.00787526648491621,
    0.016812842339277267,
    0.00557005126029253,
    0.017436066642403603,
    0.01556639838963747,
    0.030226290225982666,
    0.005081388168036938,
    -0.04093438759446144,
    -0.047789834439754486,
    0.035523682832717896,
    -0.008640130050480366,
    -0.012776060961186886,
    -0.021883608773350716,
    -0.007769035175442696,
    0.007861101999878883,
    0.01922074891626835,
    0.00947581510990858,
    0.04555189982056618,
    0.009546635672450066,
    -0.03546702489256859,
    -0.04657171666622162,
    0.003965961281210184,
    -0.0019723575096577406,
    0.015722203999757767,
    0.015198130160570145,
    -0.04246411472558975,
    -0.006483638659119606,
    -0.0003184720117133111,
    0.010623110458254814,
    0.012018279172480106,
    -0.009128793142735958,
    -0.0015137932496145368,
    -0.013739223591983318,
    -0.04948953166604042,
    -0.02917814441025257,
    -0.006203896831721067,
    -0.013257642276585102,
    -0.003240048885345459,
    -0.018172601237893105,
    0.05305889621376991,
    0.016657037660479546,
    0.025367988273501396,
    -0.02053801342844963,
    -0.0036242513451725245,
    -0.011288825422525406,
    -0.028484100475907326,
    0.020566342398524284,
    0.016798678785562515,
    -0.01828591525554657,
    -0.007337028626352549,
    0.019050778821110725,
    0.04042447730898857,
    0.006501343566924334,
    -0.02750677429139614,
    0.021430354565382004,
    -0.008838428184390068,
    0.01364007405936718,
    -0.014008342288434505,
    0.004539609421044588,
    -0.017152782529592514,
    -0.011423384770751,
    -0.002650466049090028,
    -0.0017483870033174753,
    -0.0148723553866148,
    -0.014142901636660099,
    -0.0012322808615863323,
    0.019574852660298347,
    0.018399227410554886,
    -0.003401166060939431,
    -0.0021352453622967005,
    -0.0032524424605071545,
    -0.019461538642644882,
    0.0128822922706604,
    -0.0304812453687191,
    -0.030962826684117317,
    0.0028416821733117104,
    0.03767663240432739,
    0.0018130108946934342,
    -0.020155582576990128,
    0.030452918261289597,
    0.036175232380628586,
    -0.007223715074360371,
    0.02575042098760605,
    0.014157065190374851,
    -0.026897717267274857,
    0.0007086499826982617,
    -0.007733624428510666,
    0.00046963003114797175,
    0.00260266219265759,
    0.02946142666041851,
    0.0007334372494369745,
    0.0275775957852602,
    0.034078940749168396,
    0.001014507026411593,
    -0.006324291694909334,
    -0.019135763868689537,
    0.0072591258212924,
    0.010368156246840954,
    -0.019475702196359634,
    -0.012641501612961292,
    -0.025934554636478424,
    -0.0181301087141037,
    -0.006189732346683741,
    0.018809987232089043,
    -0.0048901718109846115,
    -0.016345426440238953,
    0.08424834907054901,
    0.004334229044616222,
    -0.018668346107006073,
    0.009312926791608334,
    0.007521162275224924,
    0.0003138243919238448,
    -4.058360354974866e-05,
    -0.01575053296983242,
    -0.0006767807062715292,
    -0.006972301751375198,
    0.013717977330088615,
    -0.013625909574329853,
    -0.016628708690404892,
    -0.03229425847530365,
    -0.0022184597328305244,
    0.009709523059427738,
    -0.021600324660539627,
    -0.0022627227008342743,
    -0.010091954842209816,
    -0.00363664492033422,
    -0.011444631032645702,
    0.02705352194607258,
    -0.012195331044495106,
    -0.010205267928540707,
    0.002246788004413247,
    -0.014730713330209255,
    0.017577707767486572,
    0.013774633407592773,
    -0.0033356568310409784,
    -0.0631721019744873,
    0.016671201214194298,
    0.001362413982860744,
    -0.021671146154403687,
    -0.0053434246219694614,
    -0.020113090053200722,
    0.010658521205186844,
    -0.0005431065219454467,
    -0.02110457979142666,
    0.01393043901771307,
    0.0293764416128397,
    -0.023399172350764275,
    -0.006186191458255053,
    -0.025198018178343773,
    -0.014589072205126286,
    0.018923301249742508,
    0.009702441282570362,
    0.019192419946193695,
    0.012159920297563076,
    -0.035948608070611954
  ]
}
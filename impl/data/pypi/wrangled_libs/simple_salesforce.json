{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: developers",
    "intended audience :: system administrators",
    "license :: osi approved :: apache software license",
    "operating system :: os independent",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.6",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "programming language :: python :: implementation :: pypy",
    "topic :: internet :: www/http"
  ],
  "description": "*****************\nsimple salesforce\n*****************\n\n.. image:: https://app.travis-ci.com/simple-salesforce/simple-salesforce.svg?branch=master\n   :target: https://travis-ci.org/simple-salesforce/simple-salesforce\n\n.. image:: https://readthedocs.org/projects/simple-salesforce/badge/?version=latest\n   :target: http://simple-salesforce.readthedocs.io/en/latest/?badge=latest\n   :alt: documentation status\n\nsimple salesforce is a basic salesforce.com rest api client built for python 3.6, 3.7 3.8, 3.9, 3.10, and 3.11. the goal is to provide a very low-level interface to the rest resource and apex api, returning a dictionary of the api json response.\nyou can find out more regarding the format of the results in the `official salesforce.com rest api documentation`_\n\n.. _official salesforce.com rest api documentation: http://www.salesforce.com/us/developer/docs/api_rest/index.htm\n\n\n\n=============\n\ndocumentation\n--------------------------------\n\n.. _official simple salesforce documentation: http://simple-salesforce.readthedocs.io/en/latest/\n\n`official simple salesforce documentation`_\n\nexamples\n--------------------------\nthere are two ways to gain access to salesforce\n\nthe first is to simply pass the domain of your salesforce instance and an access token straight to ``salesforce()``\n\nfor example:\n\n.. code-block:: python\n\n    from simple_salesforce import salesforce\n    sf = salesforce(instance='na1.salesforce.com', session_id='')\n\nif you have the full url of your instance (perhaps including the schema, as is included in the oauth2 request process), you can pass that in instead using ``instance_url``:\n\n.. code-block:: python\n\n    from simple_salesforce import salesforce\n    sf = salesforce(instance_url='https://na1.salesforce.com', session_id='')\n\nthere are also four means of authentication, one that uses username, password and security token; one that uses ip filtering, username, password  and organizationid, one that uses a private key to sign a jwt, and one for connected apps that uses username, password, consumer key, and consumer secret;\n\nto login using the security token method, simply include the salesforce method and pass in your salesforce username, password and token (this is usually provided when you change your password):\n\n.. code-block:: python\n\n    from simple_salesforce import salesforce\n    sf = salesforce(username='myemail@example.com', password='password', security_token='token')\n\nto login using ip-whitelist organization id method, simply use your salesforce username, password and organizationid:\n\n.. code-block:: python\n\n    from simple_salesforce import salesforce\n    sf = salesforce(password='password', username='myemail@example.com', organizationid='orgid')\n\nto login using the jwt method, use your salesforce username, consumer key from your app, and private key (`how to <https://developer.salesforce.com/docs/atlas.en-us.sfdx_dev.meta/sfdx_dev/sfdx_dev_auth_jwt_flow.htm#sfdx_dev_auth_jwt_flow>`_):\n\n.. code-block:: python\n\n    from simple_salesforce import salesforce\n    sf = salesforce(username='myemail@example.com', consumer_key='xyz', privatekey_file='filename.key')\n\nto login using a connected app, simply include the salesforce method and pass in your salesforce username, password, consumer_key and consumer_secret (the consumer key and consumer secret are provided when you setup your connected app):\n\n.. code-block:: python\n\n    from simple_salesforce import salesforce\n    sf = salesforce(username='myemail@example.com', password='password', consumer_key='consumer_key', consumer_secret='consumer_secret')\n\n\nif you'd like to enter a sandbox, simply add ``domain='test'`` to your ``salesforce()`` call.\n\nfor example:\n\n.. code-block:: python\n\n    from simple_salesforce import salesforce\n    sf = salesforce(username='myemail@example.com.sandbox', password='password', security_token='token', domain='test')\n\nnote that specifying if you want to use a domain is only necessary if you are using the built-in username/password/security token authentication and is used exclusively during the authentication step.\n\nif you'd like to keep track where your api calls are coming from, simply add ``client_id='my app'`` to your ``salesforce()`` call.\n\n.. code-block:: python\n\n    from simple_salesforce import salesforce\n    sf = salesforce(username='myemail@example.com.sandbox', password='password', security_token='token', client_id='my app', domain='test')\n\nif you view the api calls in your salesforce instance by client id it will be prefixed with ``simple-salesforce/``, for example ``simple-salesforce/my app``.\n\nwhen instantiating a `salesforce` object, it's also possible to include an\ninstance of `requests.session`. this is to allow for specialized\nsession handling not otherwise exposed by simple_salesforce.\n\nfor example:\n\n.. code-block:: python\n\n   from simple_salesforce import salesforce\n   import requests\n\n   session = requests.session()\n   # manipulate the session instance (optional)\n   sf = salesforce(\n      username='user@example.com', password='password', organizationid='orgid',\n      session=session)\n\nrecord management\n--------------------------\n\nto create a new 'contact' in salesforce:\n\n.. code-block:: python\n\n    sf.contact.create({'lastname':'smith','email':'example@example.com'})\n\nthis will return a dictionary such as ``{u'errors': [], u'id': u'003e0000003gunxaa0', u'success': true}``\n\nto get a dictionary with all the information regarding that record, use:\n\n.. code-block:: python\n\n    contact = sf.contact.get('003e0000003gunxaa0')\n\nto get a dictionary with all the information regarding that record, using a **custom** field that was defined as external id:\n\n.. code-block:: python\n\n    contact = sf.contact.get_by_custom_id('my_custom_id__c', '22')\n\nto change that contact's last name from 'smith' to 'jones' and add a first name of 'john' use:\n\n.. code-block:: python\n\n    sf.contact.update('003e0000003gunxaa0',{'lastname': 'jones', 'firstname': 'john'})\n\nto delete the contact:\n\n.. code-block:: python\n\n    sf.contact.delete('003e0000003gunxaa0')\n\nto retrieve a list of contact records deleted over the past 10 days (datetimes are required to be in utc):\n\n.. code-block:: python\n\n    import pytz\n    import datetime\n    end = datetime.datetime.now(pytz.utc)  # we need to use utc as salesforce api requires this!\n    sf.contact.deleted(end - datetime.timedelta(days=10), end)\n\nto retrieve a list of contact records updated over the past 10 days (datetimes are required to be in utc):\n\n.. code-block:: python\n\n    import pytz\n    import datetime\n    end = datetime.datetime.now(pytz.utc) # we need to use utc as salesforce api requires this\n    sf.contact.updated(end - datetime.timedelta(days=10), end)\n\nnote that update, delete and upsert actions return the associated `salesforce http status code`_\n\nuse the same format to create any record, including 'account', 'opportunity', and 'lead'.\nmake sure to have all the required fields for any entry. the `salesforce api`_ has all objects found under 'reference -> standard objects' and the required fields can be found there.\n\n.. _salesforce http status code: http://www.salesforce.com/us/developer/docs/api_rest/content/errorcodes.htm\n.. _salesforce api: https://www.salesforce.com/developer/docs/api/\n\nqueries\n--------------------------\n\nit's also possible to write select queries in salesforce object query language (soql) and search queries in salesforce object search language (sosl).\n\nall soql queries are supported and parent/child relationships can be queried using the standard format (parent__r.fieldname). soql queries are done via:\n\n.. code-block:: python\n\n    sf.query(\"select id, email, parentaccount.name from contact where lastname = 'jones'\")\n\nif, due to an especially large result, salesforce adds a ``nextrecordsurl`` to your query result, such as ``\"nextrecordsurl\" : \"/services/data/v26.0/query/01gd0000002hu6kiaw-2000\"``, you can pull the additional results with either the id or the full url (if using the full url, you must pass 'true' as your second argument)\n\n.. code-block:: python\n\n    sf.query_more(\"01gd0000002hu6kiaw-2000\")\n    sf.query_more(\"/services/data/v26.0/query/01gd0000002hu6kiaw-2000\", true)\n\nas a convenience, to retrieve all of the results in a single local method call use\n\n.. code-block:: python\n\n    sf.query_all(\"select id, email from contact where lastname = 'jones'\")\n\nwhile ``query_all`` materializes the whole result into a python list, ``query_all_iter`` returns an iterator, which allows you to lazily process each element separately\n\n.. code-block:: python\n\n    data = sf.query_all_iter(\"select id, email from contact where lastname = 'jones'\")\n    for row in data:\n      process(row)\n\nvalues used in soql queries can be quoted and escaped using ``format_soql``:\n\n.. code-block:: python\n\n    sf.query(format_soql(\"select id, email from contact where lastname = {}\", \"jones\"))\n    sf.query(format_soql(\"select id, email from contact where lastname = {last_name}\", last_name=\"jones\"))\n    sf.query(format_soql(\"select id, email from contact where lastname in {names}\", names=[\"smith\", \"jones\"]))\n\nto skip quoting and escaping for one value while still using the format string, use ``:literal``:\n\n.. code-block:: python\n\n    sf.query(format_soql(\"select id, email from contact where income > {:literal}\", \"usd100\"))\n\nto escape a substring used in a like expression while being able to use % around it, use ``:like``:\n\n.. code-block:: python\n\n    sf.query(format_soql(\"select id, email from contact where name like '{:like}%'\", \"jones\"))\n\nsosl queries are done via:\n\n.. code-block:: python\n\n    sf.search(\"find {jones}\")\n\nthere is also 'quick search', which inserts your query inside the {} in the sosl syntax. be careful, there is no escaping!\n\n.. code-block:: python\n\n    sf.quick_search(\"jones\")\n\nsearch and quick search return ``none`` if there are no records, otherwise they return a dictionary of search results.\n\nmore details about syntax is available on the `salesforce query language documentation developer website`_\n\n.. _salesforce query language documentation developer website: http://www.salesforce.com/us/developer/docs/soql_sosl/index.htm\n\ncrud metadata api calls\n_______________________\n\nyou can use simple_salesforce to make crud (create, read, update and delete) api calls to the metadata api.\n\nfirst, get the metadata api object:\n\n.. code-block:: python\n\n    mdapi = sf.mdapi\n\nto create a new metadata component in salesforce, define the metadata component using the metadata types reference\ngiven in salesforce's `metadata api documentation`_\n\n.. _metadata api documentation: https://developer.salesforce.com/docs/atlas.en-us.api_meta.meta/api_meta/meta_types_list.htm\n\n.. code-block:: python\n\n    custom_object = mdapi.customobject(\n        fullname = \"customobject__c\",\n        label = \"custom object\",\n        plurallabel = \"custom objects\",\n        namefield = mdapi.customfield(\n            label = \"name\",\n            type = mdapi.fieldtype(\"text\")\n        ),\n        deploymentstatus = mdapi.deploymentstatus(\"deployed\"),\n        sharingmodel = mdapi.sharingmodel(\"read\")\n    )\n\nthis custom object metadata can then be created in salesforce using the createmetadata api call:\n\n.. code-block:: python\n\n    mdapi.customobject.create(custom_object)\n\nsimilarly, any metadata type can be created in salesforce using the syntax :code:`mdapi.metadatatype.create()`. it is\nalso possible to create more than one metadata component in salesforce with a single createmetadata api call. this can\nbe done by passing a list of metadata definitions to :code:`mdapi.metadatatype.create()`. up to 10 metadata components\nof the same metadata type can be created in a single api call (this limit is 200 in the case of custommetadata and\ncustomapplication).\n\nreadmetadata, updatemetadata, upsertmetadata, deletemetadata, renamemetadata and describevaluetype api calls can be\nperformed with similar syntax to createmetadata:\n\n.. code-block:: python\n\n    describe_response = mdapi.customobject.describe()\n    custom_object = mdapi.customobject.read(\"customobject__c\")\n    custom_object.sharingmodel = mdapi.sharingmodel(\"readwrite\")\n    mdapi.customobject.update(custom_object)\n    mdapi.customobject.rename(\"customobject__c\", \"customobject2__c\")\n    mdapi.customobject.delete(\"customobject2__c\")\n\nthe describe method returns a `describevaluetyperesult`_ object.\n\n.. _describevaluetyperesult: https://developer.salesforce.com/docs/atlas.en-us.api_meta.meta/api_meta/meta_describevaluetyperesult.htm\n\njust like with the createmetadata api call, multiple metadata components can be dealt with in a single api call for all\ncrud operations by passing a list to their respective methods. in the case of readmetadata, if multiple components are\nread in a single api call, a list will be returned.\n\nsimple_salesforce validates the response received from salesforce. create, update, upsert, delete and rename\nmethods return :code:`none`, but raise an exception with error message (from salesforce) if salesforce does not return\nsuccess. so, error handling can be done by catching the python exception.\n\nsimple_salesforce also supports describemetadata and listmetadata api calls as follows. describemetadata uses the api\nversion set for the salesforce object and will return a describemetadataresult object.\n\n.. code-block:: python\n\n    mdapi.describe()\n    query = mdapi.listmetadataquery(type='customobject')\n    query_response = mdapi.list_metadata(query)\n\nup to 3 listmetadataquery objects can be submitted in one list_metadata api call by passing a list. the list_metadata\nmethod returns a list of `fileproperties`_ objects.\n\n.. _fileproperties: https://developer.salesforce.com/docs/atlas.en-us.api_meta.meta/api_meta/meta_retrieveresult.htm#retrieveresult_fileproperties\n\nfile based metadata api calls\n-----------------------------\n\nyou can use simple_salesforce to make file-based calls to the metadata api, to deploy a zip file to an org.\n\nfirst, convert and zip the file with:\n\n.. code-block::\n\n   sfdx force:source:convert -r src/folder_name -d dx\n\nthen navigate into the converted folder and zip it up:\n\n.. code-block::\n\n   zip -r -x package.zip *\n\nthen you can use this to deploy that zipfile:\n\n.. code-block:: python\n\n   result = sf.deploy(\"path/to/zip\", sandbox=false, **kwargs)\n   asyncid = result.get('asyncid')\n   state = result.get('state')\n\nboth deploy and checkdeploystatus take keyword arguments. the single package argument is not currently available to be set for deployments. more details on the deploy options can be found at https://developer.salesforce.com/docs/atlas.en-us.api_meta.meta/api_meta/meta_deploy.htm\n\nyou can check on the progress of the deploy which returns a dictionary with status, state_detail, deployment_detail, unit_test_detail:\n\n.. code-block:: python\n\n   sf.checkdeploystatus(asyncid)\n\nexample of a use-case:\n\n.. code-block:: python\n\n   from simple_salesforce import salesforce\n\n   deployment_finished = false\n   successful = false\n\n   sf = salesforce(session_id=\"id\", instance=\"instance\")\n   sf.deploy(\"path/to/zip\", sandbox=false ,**kwargs)\n\n   while not deployment_finished:\n       result = sf.checkdeploystatus(asyncid)\n       if result.get('status') in [\"succeeded\", \"completed\", \"error\", \"failed\", none]:\n           deployment_finished = true\n       if result.get('status') in [\"succeeded\", \"completed\"]:\n           successful = true\n\n   if successful:\n       print(\"\u2705\")\n   else:\n       print(\"\ud83e\udd54\")\n\nother options\n--------------------------\n\nto insert or update (upsert) a record using an external id, use:\n\n.. code-block:: python\n\n    sf.contact.upsert('customextidfield__c/11999',{'lastname': 'smith','email': 'smith@example.com'})\n\nto format an external id that could contain non-url-safe characters, use:\n\n.. code-block:: python\n\n    external_id = format_external_id('customextidfield__c', 'this/that & the other')\n\nto retrieve basic metadata use:\n\n.. code-block:: python\n\n    sf.contact.metadata()\n\nto retrieve a description of the object, use:\n\n.. code-block:: python\n\n    sf.contact.describe()\n\nto retrieve a description of the record layout of an object by its record layout unique id, use:\n\n.. code-block:: python\n\n    sf.contact.describe_layout('39wmxcw9r23r492')\n\nto retrieve a list of top level description of instance metadata, user:\n\n.. code-block:: python\n\n    sf.describe()\n\n    for x in sf.describe()[\"sobjects\"]:\n      print x[\"label\"]\n\n\nusing bulk\n--------------------------\n\nyou can use this library to access bulk api functions. the data element can be a list of records of any size and by default batch sizes are 10,000 records and run in parallel concurrency mode. to set the batch size for insert, upsert, delete, hard_delete, and update use the batch_size argument. to set the concurrency mode for the salesforce job the use_serial argument can be set to use_serial=true.\n\ncreate new records:\n\n.. code-block:: python\n\n    data = [\n          {'lastname':'smith','email':'example@example.com'},\n          {'lastname':'jones','email':'test@test.com'}\n        ]\n\n    sf.bulk.contact.insert(data,batch_size=10000,use_serial=true)\n\nupdate existing records:\n\n.. code-block:: python\n\n    data = [\n          {'id': '0000000000aaaaa', 'email': 'examplenew@example.com'},\n          {'id': '0000000000bbbbb', 'email': 'testnew@test.com'}\n        ]\n\n    sf.bulk.contact.update(data,batch_size=10000,use_serial=true)\n\nupdate existing records and update lookup fields from an external id field:\n\n.. code-block:: python\n\n    data = [\n          {'id': '0000000000aaaaa', 'custom_object__r': {'email__c':'examplenew@example.com'}},\n          {'id': '0000000000bbbbb', 'custom_object__r': {'email__c': 'testnew@test.com'}}\n        ]\n\n    sf.bulk.contact.update(data,batch_size=10000,use_serial=true)\n\nupsert records:\n\n.. code-block:: python\n\n    data = [\n          {'id': '0000000000aaaaa', 'email': 'examplenew2@example.com'},\n          {'email': 'foo@foo.com'}\n        ]\n\n    sf.bulk.contact.upsert(data, 'id', batch_size=10000, use_serial=true)\n\n\nquery records:\n\n.. code-block:: python\n\n    query = 'select id, name from account limit 10'\n\n    sf.bulk.account.query(query)\n\nto retrieve large amounts of data, use\n\n.. code-block:: python\n\n    query = 'select id, name from account'\n\n    # generator on the results page\n    fetch_results = sf.bulk.account.query(query, lazy_operation=true)\n\n    # the generator provides the list of results for every call to next()\n    all_results = []\n    for list_results in fetch_results:\n      all_results.extend(list_results)\n\nquery all records:\n\nqueryall will return records that have been deleted because of a merge or delete. queryall will also return information about archived task and event records.\n\n.. code-block:: python\n\n    query = 'select id, name from account limit 10'\n\n    sf.bulk.account.query_all(query)\n\nto retrieve large amounts of data, use\n\n.. code-block:: python\n\n    query = 'select id, name from account'\n\n    # generator on the results page\n    fetch_results = sf.bulk.account.query_all(query, lazy_operation=true)\n\n    # the generator provides the list of results for every call to next()\n    all_results = []\n    for list_results in fetch_results:\n      all_results.extend(list_results)\n\ndelete records (soft deletion):\n\n.. code-block:: python\n\n    data = [{'id': '0000000000aaaaa'}]\n\n    sf.bulk.contact.delete(data,batch_size=10000,use_serial=true)\n\nhard deletion:\n\n.. code-block:: python\n\n    data = [{'id': '0000000000bbbbb'}]\n\n    sf.bulk.contact.hard_delete(data,batch_size=10000,use_serial=true)\n\n\nusing bulk 2.0\n--------------------------\n\nyou can use this library to access bulk 2.0 api functions.\n\ncreate new records:\n\n.. code-block:: text\n\n    \"custom_id__c\",\"accountid\",\"email\",\"firstname\",\"lastname\"\n    \"customid1\",\"id-13\",\"contact1@example.com\",\"bob\",\"x\"\n    \"customid2\",\"id-24\",\"contact2@example.com\",\"alice\",\"y\"\n    ...\n\n.. code-block:: python\n\n    sf.bulk2.contact.insert(\"./sample.csv\", batch_size=10000)\n\n\ncreate new records concurrently:\n\n.. code-block:: python\n\n    sf.bulk2.contact.insert(\"./sample.csv\", batch_size=10000, concurrency=10)\n\n\nupdate existing records:\n\n.. code-block:: text\n\n    \"custom_id__c\",\"accountid\",\"email\",\"firstname\",\"lastname\"\n    \"customid1\",\"id-13\",\"contact1@example.com\",\"bob\",\"x\"\n    \"customid2\",\"id-24\",\"contact2@example.com\",\"alice\",\"y\"\n    ...\n\n.. code-block:: python\n\n    sf.bulk2.contact.update(\"./sample.csv\")\n\n\nupsert records:\n\n.. code-block:: text\n\n    \"custom_id__c\",\"lastname\"\n    \"customid1\",\"x\"\n    \"customid2\",\"y\"\n    ...\n\n.. code-block:: python\n\n    sf.bulk2.contact.upsert(\"./sample.csv\", 'custom_id__c')\n\n\nquery records:\n\n.. code-block:: python\n\n    query = 'select id, name from account limit 100000'\n\n    results = sf.bulk2.account.query(\n        query, max_records=50000, column_delimiter=\"comm\", line_ending=\"lf\"\n    )\n    for i, data in enumerate(results):\n        with open(f\"results/part-{1}.csv\", \"w\") as bos:\n            bos.write(data)\n\n\ndownload records(low memory usage):\n\n.. code-block:: python\n\n    query = 'select id, name from account'\n\n    sf.bulk2.account.download(\n        query, path=\"results/\", max_records=200000\n    )\n\n\ndelete records (soft deletion):\n\n.. code-block:: text\n\n    \"id\"\n    \"0000000000aaaaa\"\n    \"0000000000bbbbb\"\n    ...\n\n\n.. code-block:: python\n\n    sf.bulk2.contact.delete(\"./sample.csv\")\n\n\nhard deletion:\n\n.. code-block:: python\n\n    sf.bulk2.contact.hard_delete(\"./sample.csv\")\n\n\nretrieve failed/successful/unprocessed records for ingest(insert,update...) job:\n\n.. code-block:: python\n\n    results = sf.bulk2.contact.insert(\"./sample.csv\")\n    # [{\"numberrecordsfailed\": 123, \"numberrecordsprocessed\": 2000, \"numberrecordstotal\": 2000, \"job_id\": \"job-1\"}, ...]\n    for result in results:\n        job_id = result['job_id']\n        # also available: get_unprocessed_records, get_successful_records\n        data = sf.bulk2.contact.get_failed_records(job_id)\n        # or save to file\n        sf.bulk2.contact.get_failed_records(job_id, file=f'{job_id}.csv')\n\n\nusing apex\n--------------------------\n\nyou can also use this library to call custom apex methods:\n\n.. code-block:: python\n\n    payload = {\n      \"activity\": [\n        {\"user\": \"12345\", \"action\": \"update page\", \"time\": \"2014-04-21t13:00:15z\"}\n      ]\n    }\n    result = sf.apexecute('user/activity', method='post', data=payload)\n\nthis would call the endpoint ``https://<instance>.salesforce.com/services/apexrest/user/activity`` with ``data=`` as\nthe body content encoded with ``json.dumps``\n\nyou can read more about apex on the `force.com apex code developer's guide`_\n\n.. _force.com apex code developer's guide: https://developer.salesforce.com/docs/atlas.en-us.apexcode.meta/apexcode/apex_dev_guide.htm\n\nadditional features\n--------------------------\n\nthere are a few helper classes that are used internally and available to you.\n\nincluded in them are ``salesforcelogin``, which takes in a username, password, security token, optional version and optional domain and returns a tuple of ``(session_id, sf_instance)`` where `session_id` is the session id to use for authentication to salesforce and ``sf_instance`` is the domain of the instance of salesforce to use for the session.\n\nfor example, to use salesforcelogin for a sandbox account you'd use:\n\n.. code-block:: python\n\n    from simple_salesforce import salesforcelogin\n    session_id, instance = salesforcelogin(\n        username='myemail@example.com.sandbox',\n        password='password',\n        security_token='token',\n        domain='test')\n\nsimply leave off the final domain if you do not wish to use a sandbox.\n\nalso exposed is the ``sftype`` class, which is used internally by the ``__getattr__()`` method in the ``salesforce()`` class and represents a specific sobject type. ``sftype`` requires ``object_name`` (i.e. ``contact``), ``session_id`` (an authentication id), ``sf_instance`` (hostname of your salesforce instance), and an optional ``sf_version``\n\nto add a contact using the default version of the api you'd use:\n\n.. code-block:: python\n\n    from simple_salesforce import sftype\n    contact = sftype('contact','sesssionid','na1.salesforce.com')\n    contact.create({'lastname':'smith','email':'example@example.com'})\n\nto use a proxy server between your client and the salesforce endpoint, use the proxies argument when creating salesforce object.\nthe proxy argument is the same as what requests uses, a map of scheme to proxy url:\n\n.. code-block:: python\n\n    proxies = {\n      \"http\": \"http://10.10.1.10:3128\",\n      \"https\": \"http://10.10.1.10:1080\",\n    }\n    salesforce(instance='na1.salesforce.com', session_id='', proxies=proxies)\n\nall results are returned as json converted ordereddict to preserve order of keys from rest responses.\n\nhelpful datetime resources\n--------------------------\na list of helpful resources when working with datetime/dates from salesforce\n\nconvert sfdc datetime to datetime or date object\n.. code-block:: python\n\n    import datetime\n    # formatting to sfdc datetime\n    formatted_datetime =  datetime.datetime.strptime(x, \"%y-%m-%dt%h:%m:%s.%f%z\")\n\n    #formatting to sfdc date\n    formatted_date = datetime.strptime(x, \"%y-%m-%d\")\n\nhelpful pandas resources\n--------------------------\na list of helpful resources when working with pandas and simple-salesforce\n\ngenerate list for sfdc query \"in\" operations from a pandas dataframe\n\n.. code-block:: python\n\n import pandas as pd\n\n df = pd.dataframe([{'id':1},{'id':2},{'id':3}])\n    def dataframe_to_sfdc_list(df,column):\n      df_list = df[column].unique()\n      df_list = [str(x) for x in df_list]\n      df_list = ','.join(\"'\"+item+\"'\" for item in df_list)\n      return df_list\n\n   sf.query(format_soql(\"select id, email from contact where id in ({})\", dataframe_to_sfdc_list(df,column)))\n\ngenerate pandas dataframe from sfdc api query (ex.query,query_all)\n\n.. code-block:: python\n\n   import pandas as pd\n\n   sf.query(\"select id, email from contact\")\n\n   df = pd.dataframe(data['records']).drop(['attributes'],axis=1)\n\ngenerate pandas dataframe from sfdc api query (ex.query,query_all) and append related fields from query to data frame\n\n.. code-block:: python\n\n   import pandas as pd\n\n   def sf_api_query(data):\n    df = pd.dataframe(data['records']).drop('attributes', axis=1)\n    listcolumns = list(df.columns)\n    for col in listcolumns:\n        if any (isinstance (df[col].values[i], dict) for i in range(0, len(df[col].values))):\n            df = pd.concat([df.drop(columns=[col]),df[col].apply(pd.series).drop('attributes',axis=1).add_prefix(col+'.')],axis=1)\n            new_columns = np.setdiff1d(df.columns, listcolumns)\n            for i in new_columns:\n                listcolumns.append(i)\n    return df\n\n   df = sf_api_query(sf.query(\"select id, email,parentaccount.name from contact\"))\n\ngenerate pandas dataframe from sfdc bulk api query (ex.bulk.account.query)\n\n.. code-block:: python\n\n   import pandas as pd\n\n   sf.bulk.account.query(\"select id, email from contact\")\n   df = pd.dataframe.from_dict(data,orient='columns').drop('attributes',axis=1)\n\n\nyoutube tutorial\n--------------------------\nhere is a helpful  `youtube tutorial`_  which shows how you can manage records in bulk using a jupyter notebook, simple-salesforce and pandas.\n\nthis can be a effective way to manage records, and perform simple operations like reassigning accounts, deleting test records, inserting new records, etc...\n\n.. _youtube tutorial: https://youtu.be/npqfugsk6oo?t=282\n\nauthors & license\n--------------------------\n\nthis package is released under an open source apache 2.0 license. simple-salesforce was originally written by `nick catalano`_ but most newer features and bugfixes come from `community contributors`_. pull requests submitted to the `github repo`_ are highly encouraged!\n\nauthentication mechanisms were adapted from dave wingate's `restforce`_ and licensed under a mit license\n\nthe latest build status can be found at `travis ci`_\n\n.. _nick catalano: https://github.com/nickcatal\n.. _community contributors: https://github.com/simple-salesforce/simple-salesforce/graphs/contributors\n.. _restforce: http://pypi.python.org/pypi/restforce/\n.. _github repo: https://github.com/simple-salesforce/simple-salesforce\n.. _travis ci: https://travis-ci.com/simple-salesforce/simple-salesforce\n\n\n",
  "docs_url": null,
  "keywords": "python salesforce salesforce.com",
  "license": "apache 2.0",
  "name": "simple-salesforce",
  "package_url": "https://pypi.org/project/simple-salesforce/",
  "project_url": "https://pypi.org/project/simple-salesforce/",
  "project_urls": {
    "Homepage": "https://github.com/simple-salesforce/simple-salesforce"
  },
  "release_url": "https://pypi.org/project/simple-salesforce/1.12.5/",
  "requires_dist": [
    "requests (>=2.22.0)",
    "cryptography",
    "zeep",
    "pyjwt",
    "more-itertools",
    "pendulum"
  ],
  "requires_python": "",
  "summary": "a basic salesforce.com rest api client.",
  "version": "1.12.5",
  "releases": [],
  "developers": [
    "jonathan_wobken",
    "jonathanwobken@gmail.com",
    "nick_catalano",
    "nickcatal@gmail.com"
  ],
  "kwds": "api_rest _restforce restforce api sf_api_query",
  "license_kwds": "apache 2.0",
  "libtype": "pypi",
  "id": "pypi_simple_salesforce",
  "homepage": "https://github.com/simple-salesforce/simple-salesforce",
  "release_count": 46,
  "dependency_ids": [
    "pypi_cryptography",
    "pypi_more_itertools",
    "pypi_pendulum",
    "pypi_pyjwt",
    "pypi_requests",
    "pypi_zeep"
  ]
}
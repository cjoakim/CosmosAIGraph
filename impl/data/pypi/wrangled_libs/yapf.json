{
  "classifiers": [
    "development status :: 4 - beta",
    "environment :: console",
    "intended audience :: developers",
    "license :: osi approved :: apache software license",
    "operating system :: os independent",
    "programming language :: python",
    "programming language :: python :: 3 :: only",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: software development :: libraries :: python modules",
    "topic :: software development :: quality assurance"
  ],
  "description": "a formatter for python code\n# yapf\n\n<p align=\"center\">\n<a href=\"https://badge.fury.io/py/yapf\"><img alt=\"pypi version\" src=\"https://badge.fury.io/py/yapf.svg\"></a>\n<a href=\"https://github.com/google/yapf/actions/workflows/ci.yml\"><img alt=\"build status\" src=\"https://github.com/google/yapf/actions/workflows/ci.yml/badge.svg\"></a>\n<a href=\"https://github.com/google/yapf/actions/workflows/pre-commit.yml\"><img alt=\"actions status\" src=\"https://github.com/google/yapf/actions/workflows/pre-commit.yml/badge.svg\"></a>\n<a href=\"https://coveralls.io/github/google/yapf?branch=main\"><img alt=\"coverage status\" src=\"https://coveralls.io/repos/github/google/yapf/badge.svg?branch=main\"></a>\n</p>\n\n\n## introduction\n\nyapf is a python formatter based off of [`clang-format`](https://clang.llvm.org/docs/clangformat.html)\n(developed by daniel jasper). in essence, the algorithm takes the code and\ncalculates the best formatting that conforms to the configured style. it takes\naway a lot of the drudgery of maintaining your code.\n\nthe ultimate goal is that the code yapf produces is as good as the code that a\nprogrammer would write if they were following the style guide.\n\n> **note**\n> yapf is not an official google product (experimental or otherwise), it is\n> just code that happens to be owned by google.\n\n\n## installation\n\nto install yapf from pypi:\n\n```bash\n$ pip install yapf\n```\n\nyapf is still considered in \"beta\" stage, and the released version may change\noften; therefore, the best way to keep up-to-date with the latest development\nis to clone this repository.\n\nnote that if you intend to use yapf as a command-line tool rather than as a\nlibrary, installation is not necessary. yapf supports being run as a directory\nby the python interpreter. if you cloned/unzipped yapf into `dir`, it's\npossible to run:\n\n```bash\n$ pythonpath=dir python dir/yapf [options] ...\n```\n\n\n## required python versions\n\nyapf supports python 3.7+.\n\n> **note**\n> yapf requires the code it formats to be valid python for the version yapf\n> itself runs under.\n\n\n## usage\n\n```console\nusage: yapf [-h] [-v] [-d | -i | -q] [-r | -l start-end] [-e pattern]\n            [--style style] [--style-help] [--no-local-style] [-p] [-m] [-vv]\n            [files ...]\n\nformatter for python code.\n\npositional arguments:\n  files                 reads from stdin when no files are specified.\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -v, --version         show program's version number and exit\n  -d, --diff            print the diff for the fixed source\n  -i, --in-place        make changes to files in place\n  -q, --quiet           output nothing and set return value\n  -r, --recursive       run recursively over directories\n  -l start-end, --lines start-end\n                        range of lines to reformat, one-based\n  -e pattern, --exclude pattern\n                        patterns for files to exclude from formatting\n  --style style         specify formatting style: either a style name (for\n                        example \"pep8\" or \"google\"), or the name of a file\n                        with style settings. the default is pep8 unless a\n                        .style.yapf or setup.cfg or pyproject.toml file\n                        located in the same directory as the source or one of\n                        its parent directories (for stdin, the current\n                        directory is used).\n  --style-help          show style settings and exit; this output can be saved\n                        to .style.yapf to make your settings permanent\n  --no-local-style      don't search for local style definition\n  -p, --parallel        run yapf in parallel when formatting multiple files.\n  -m, --print-modified  print out file names of modified files\n  -vv, --verbose        print out file names while processing\n```\n\n### using yapf within your favorite editor\nyapf is supported by multiple editors via community extensions or plugins. see [editor support](editor%20support.md) for more info.\n\n### return codes\n\nnormally yapf returns zero on successful program termination and non-zero\notherwise.\n\nif `--diff` is supplied, yapf returns zero when no changes were necessary,\nnon-zero otherwise (including program error). you can use this in a ci workflow\nto test that code has been yapf-formatted.\n\n### excluding files from formatting (.yapfignore or pyproject.toml)\n\nin addition to exclude patterns provided on commandline, yapf looks for\nadditional patterns specified in a file named `.yapfignore` or `pyproject.toml`\nlocated in the working directory from which yapf is invoked.\n\n`.yapfignore`'s syntax is similar to unix's filename pattern matching:\n\n```\n*       matches everything\n?       matches any single character\n[seq]   matches any character in seq\n[!seq]  matches any character not in seq\n```\n\nnote that no entry should begin with `./`.\n\nif you use `pyproject.toml`, exclude patterns are specified by `ignore_patterns` key\nin `[tool.yapfignore]` section. for example:\n\n```ini\n[tool.yapfignore]\nignore_patterns = [\n  \"temp/**/*.py\",\n  \"temp2/*.py\"\n]\n```\n\n\nformatting style\n================\n\nthe formatting style used by yapf is configurable and there are many \"knobs\"\nthat can be used to tune how yapf does formatting. see the `style.py` module\nfor the full list.\n\nto control the style, run yapf with the `--style` argument. it accepts one of\nthe predefined styles (e.g., `pep8` or `google`), a path to a configuration\nfile that specifies the desired style, or a dictionary of key/value pairs.\n\nthe config file is a simple listing of (case-insensitive) `key = value` pairs\nwith a `[style]` heading. for example:\n\n```ini\n[style]\nbased_on_style = pep8\nspaces_before_comment = 4\nsplit_before_logical_operator = true\n```\n\nthe `based_on_style` setting determines which of the predefined styles this\ncustom style is based on (think of it like subclassing). four\nstyles are predefined:\n\n- `pep8` (default)\n- `google` (based off of the [google python style guide](https://github.com/google/styleguide/blob/gh-pages/pyguide.md))\n- `yapf` (for use with google open source projects)\n- `facebook`\n\nsee `_style_name_to_factory` in [`style.py`](https://github.com/google/yapf/blob/main/yapf/yapflib/style.py) for details.\n\nit's also possible to do the same on the command line with a dictionary. for\nexample:\n\n```bash\n--style='{based_on_style: pep8, indent_width: 2}'\n```\n\nthis will take the `pep8` base style and modify it to have two space\nindentations.\n\nyapf will search for the formatting style in the following manner:\n\n1. specified on the command line\n2. in the `[style]` section of a `.style.yapf` file in either the current\n   directory or one of its parent directories.\n3. in the `[yapf]` section of a `setup.cfg` file in either the current\n   directory or one of its parent directories.\n4. in the `[tool.yapf]` section of a `pyproject.toml` file in either the current\n   directory or one of its parent directories.\n5. in the `[style]` section of a `~/.config/yapf/style` file in your home\n   directory.\n\nif none of those files are found, the default style pep8 is used.\n\n\nexample\n=======\n\nan example of the type of formatting that yapf can do, it will take this ugly\ncode:\n\n```python\nx = {  'a':37,'b':42,\n\n'c':927}\n\ny = 'hello ''world'\nz = 'hello '+'world'\na = 'hello {}'.format('world')\nclass foo  (     object  ):\n  def f    (self   ):\n    return       37*-+2\n  def g(self, x,y=42):\n      return y\ndef f  (   a ) :\n  return      37+-+a[42-x :  y**3]\n```\n\nand reformat it into:\n\n```python\nx = {'a': 37, 'b': 42, 'c': 927}\n\ny = 'hello ' 'world'\nz = 'hello ' + 'world'\na = 'hello {}'.format('world')\n\n\nclass foo(object):\n    def f(self):\n        return 37 * -+2\n\n    def g(self, x, y=42):\n        return y\n\n\ndef f(a):\n    return 37 + -+a[42 - x:y**3]\n```\n\n\n## example as a module\n\nthe two main apis for calling yapf are `formatcode` and `formatfile`, these\nshare several arguments which are described below:\n\n```python\n>>> from yapf.yapflib.yapf_api import formatcode  # reformat a string of code\n\n>>> formatted_code, changed = formatcode(\"f ( a = 1, b = 2 )\")\n>>> formatted_code\n'f(a=1, b=2)\\n'\n>>> changed\ntrue\n```\n\na `style_config` argument: either a style name or a path to a file that\ncontains formatting style settings. if none is specified, use the default style\nas set in `style.default_style_factory`.\n\n```python\n>>> formatcode(\"def g():\\n  return true\", style_config='pep8')[0]\n'def g():\\n    return true\\n'\n```\n\na `lines` argument: a list of tuples of lines (ints), [start, end], that we\nwant to format. the lines are 1-based indexed. it can be used by third-party\ncode (e.g., ides) when reformatting a snippet of code rather than a whole file.\n\n```python\n>>> formatcode(\"def g( ):\\n    a=1\\n    b = 2\\n    return a==b\", lines=[(1, 1), (2, 3)])[0]\n'def g():\\n    a = 1\\n    b = 2\\n    return a==b\\n'\n```\n\na `print_diff` (bool): instead of returning the reformatted source, return a\ndiff that turns the formatted source into reformatted source.\n\n```diff\n>>> print(formatcode(\"a==b\", filename=\"foo.py\", print_diff=true)[0])\n--- foo.py (original)\n+++ foo.py (reformatted)\n@@ -1 +1 @@\n-a==b\n+a == b\n```\n\nnote: the `filename` argument for `formatcode` is what is inserted into the\ndiff, the default is `<unknown>`.\n\n`formatfile` returns reformatted code from the passed file along with its encoding:\n\n```python\n>>> from yapf.yapflib.yapf_api import formatfile  # reformat a file\n\n>>> print(open(\"foo.py\").read())  # contents of file\na==b\n\n>>> reformatted_code, encoding, changed = formatfile(\"foo.py\")\n>>> formatted_code\n'a == b\\n'\n>>> encoding\n'utf-8'\n>>> changed\ntrue\n```\n\nthe `in_place` argument saves the reformatted code back to the file:\n\n```python\n>>> formatfile(\"foo.py\", in_place=true)[:2]\n(none, 'utf-8')\n\n>>> print(open(\"foo.py\").read())  # contents of file (now fixed)\na == b\n```\n\n\n## formatting diffs\n\noptions:\n\n```console\nusage: yapf-diff [-h] [-i] [-p num] [--regex pattern] [--iregex pattern][-v]\n                 [--style style] [--binary binary]\n\nthis script reads input from a unified diff and reformats all the changed\nlines. this is useful to reformat all the lines touched by a specific patch.\nexample usage for git/svn users:\n\n  git diff -u0 --no-color --relative head^ | yapf-diff -i\n  svn diff --diff-cmd=diff -x-u0 | yapf-diff -p0 -i\n\nit should be noted that the filename contained in the diff is used\nunmodified to determine the source file to update. users calling this script\ndirectly should be careful to ensure that the path in the diff is correct\nrelative to the current working directory.\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -i, --in-place        apply edits to files instead of displaying a diff\n  -p num, --prefix num  strip the smallest prefix containing p slashes\n  --regex pattern       custom pattern selecting file paths to reformat\n                        (case sensitive, overrides -iregex)\n  --iregex pattern      custom pattern selecting file paths to reformat\n                        (case insensitive, overridden by -regex)\n  -v, --verbose         be more verbose, ineffective without -i\n  --style style         specify formatting style: either a style name (for\n                        example \"pep8\" or \"google\"), or the name of a file\n                        with style settings. the default is pep8 unless a\n                        .style.yapf or setup.cfg or pyproject.toml file\n                        located in the same directory as the source or one of\n                        its parent directories (for stdin, the current\n                        directory is used).\n  --binary binary       location of binary to use for yapf\n```\n\n\n## knobs\n\n#### `align_closing_bracket_with_visual_indent`\n\n>    align closing bracket with visual indentation.\n\n#### `allow_multiline_lambdas`\n\n>    allow lambdas to be formatted on more than one line.\n\n#### `allow_multiline_dictionary_keys`\n\n>    allow dictionary keys to exist on multiple lines. for example:\n\n```python\n    x = {\n        ('this is the first element of a tuple',\n         'this is the second element of a tuple'):\n             value,\n    }\n```\n\n#### `allow_split_before_default_or_named_assigns`\n\n>    allow splitting before a default / named assignment in an argument list.\n\n#### `allow_split_before_dict_value`\n\n>    allow splits before the dictionary value.\n\n#### `arithmetic_precedence_indication`\n\n>    let spacing indicate operator precedence. for example:\n\n```python\n    a = 1 * 2 + 3 / 4\n    b = 1 / 2 - 3 * 4\n    c = (1 + 2) * (3 - 4)\n    d = (1 - 2) / (3 + 4)\n    e = 1 * 2 - 3\n    f = 1 + 2 + 3 + 4\n```\n\n>    will be formatted as follows to indicate precedence:\n\n```python\n    a = 1*2 + 3/4\n    b = 1/2 - 3*4\n    c = (1+2) * (3-4)\n    d = (1-2) / (3+4)\n    e = 1*2 - 3\n    f = 1 + 2 + 3 + 4\n```\n\n#### `blank_lines_around_top_level_definition`\n\n>    sets the number of desired blank lines surrounding top-level function and\n>    class definitions. for example:\n\n```python\n    class foo:\n        pass\n                       # <------ having two blank lines here\n                       # <------ is the default setting\n    class bar:\n        pass\n```\n\n#### `blank_line_before_class_docstring`\n\n>    insert a blank line before a class-level docstring.\n\n#### `blank_line_before_module_docstring`\n\n>    insert a blank line before a module docstring.\n\n#### `blank_line_before_nested_class_or_def`\n\n>    insert a blank line before a `def` or `class` immediately nested within\n>    another `def` or `class`. for example:\n\n```python\n    class foo:\n                       # <------ this blank line\n        def method():\n            pass\n```\n\n#### `blank_lines_between_top_level_imports_and_variables`\n\n>    sets the number of desired blank lines between top-level imports and\n>    variable definitions. useful for compatibility with tools like isort.\n\n#### `coalesce_brackets`\n\n>    do not split consecutive brackets. only relevant when\n>    `dedent_closing_brackets` or `indent_closing_brackets` is set. for example:\n\n```python\n    call_func_that_takes_a_dict(\n        {\n            'key1': 'value1',\n            'key2': 'value2',\n        }\n    )\n```\n\n>    would reformat to:\n\n```python\n    call_func_that_takes_a_dict({\n        'key1': 'value1',\n        'key2': 'value2',\n    })\n```\n\n#### `column_limit`\n\n>    the column limit (or max line-length)\n\n#### `continuation_align_style`\n\n>    the style for continuation alignment. possible values are:\n\n>    - `space`: use spaces for continuation alignment. this is default\n>      behavior.\n>    - `fixed`: use fixed number (`continuation_indent_width`) of columns\n>      (i.e. `continuation_indent_width`/`indent_width` tabs or\n>      `continuation_indent_width` spaces) for continuation alignment.\n>    - `valign-right`: vertically align continuation lines to multiple of\n>      `indent_width` columns. slightly right (one tab or a few spaces) if cannot\n>      vertically align continuation lines with indent characters.\n\n#### `continuation_indent_width`\n\n>    indent width used for line continuations.\n\n#### `dedent_closing_brackets`\n\n>    put closing brackets on a separate line, dedented, if the bracketed\n>    expression can't fit in a single line. applies to all kinds of brackets,\n>    including function definitions and calls. for example:\n\n```python\n    config = {\n        'key1': 'value1',\n        'key2': 'value2',\n    }  # <--- this bracket is dedented and on a separate line\n\n    time_series = self.remote_client.query_entity_counters(\n        entity='dev3246.region1',\n        key='dns.query_latency_tcp',\n        transform=transformation.average(window=timedelta(seconds=60)),\n        start_ts=now()-timedelta(days=3),\n        end_ts=now(),\n    )  # <--- this bracket is dedented and on a separate line\n```\n\n#### `disable_ending_comma_heuristic`\n\n>    disable the heuristic which places each list element on a separate line if\n>    the list is comma-terminated.\n\n#### `each_dict_entry_on_separate_line`\n\n>    place each dictionary entry onto its own line.\n\n#### `force_multiline_dict`\n\n>    respect `each_dict_entry_on_separate_line` even if the line is shorter than\n>    `column_limit`.\n\n#### `i18n_comment`\n\n>    the regex for an internationalization comment. the presence of this comment\n>    stops reformatting of that line, because the comments are required to be\n>    next to the string they translate.\n\n#### `i18n_function_call`\n\n>    the internationalization function call names. the presence of this function\n>    stops reformatting on that line, because the string it has cannot be moved\n>    away from the i18n comment.\n\n#### `indent_blank_lines`\n\n>    set to `true` to prefer indented blank lines rather than empty\n\n#### `indent_closing_brackets`\n\n>    put closing brackets on a separate line, indented, if the bracketed\n>    expression can't fit in a single line. applies to all kinds of brackets,\n>    including function definitions and calls. for example:\n\n```python\n    config = {\n        'key1': 'value1',\n        'key2': 'value2',\n        }  # <--- this bracket is indented and on a separate line\n\n    time_series = self.remote_client.query_entity_counters(\n        entity='dev3246.region1',\n        key='dns.query_latency_tcp',\n        transform=transformation.average(window=timedelta(seconds=60)),\n        start_ts=now()-timedelta(days=3),\n        end_ts=now(),\n        )  # <--- this bracket is indented and on a separate line\n```\n\n#### `indent_dictionary_value`\n\n>    indent the dictionary value if it cannot fit on the same line as the\n>    dictionary key. for example:\n\n```python\n    config = {\n        'key1':\n            'value1',\n        'key2': value1 +\n                value2,\n    }\n```\n\n#### `indent_width`\n\n>    the number of columns to use for indentation.\n\n#### `join_multiple_lines`\n\n>    join short lines into one line. e.g., single line `if` statements.\n\n#### `no_spaces_around_selected_binary_operators`\n\n>    do not include spaces around selected binary operators. for example:\n\n```python\n    1 + 2 * 3 - 4 / 5\n```\n\n>    will be formatted as follows when configured with `*`, `/`:\n\n```python\n    1 + 2*3 - 4/5\n```\n\n#### `space_between_ending_comma_and_closing_bracket`\n\n>    insert a space between the ending comma and closing bracket of a list, etc.\n\n#### `space_inside_brackets`\n\n    use spaces inside brackets, braces, and parentheses.  for example:\n\n```python\n        method_call( 1 )\n        my_dict[ 3 ][ 1 ][ get_index( *args, **kwargs ) ]\n        my_set = { 1, 2, 3 }\n```\n\n#### `spaces_around_default_or_named_assign`\n\n>    set to `true` to prefer spaces around the assignment operator for default\n>    or keyword arguments.\n\n#### `spaces_around_dict_delimiters`\n\n>    adds a space after the opening '{' and before the ending '}' dict delimiters.\n\n```python\n        {1: 2}\n```\n\n>    will be formatted as:\n\n```python\n        { 1: 2 }\n```\n\n#### `spaces_around_list_delimiters`\n\n>    adds a space after the opening '[' and before the ending ']' list delimiters.\n\n```python\n    [1, 2]\n```\n\n>    will be formatted as:\n\n```python\n    [ 1, 2 ]\n```\n\n#### `spaces_around_power_operator`\n\n>    set to `true` to prefer using spaces around `**`.\n\n#### `spaces_around_subscript_colon`\n\n>    use spaces around the subscript / slice operator.  for example:\n\n```python\n    my_list[1 : 10 : 2]\n```\n\n##### `spaces_around_tuple_delimiters`\n\n>    adds a space after the opening '(' and before the ending ')' tuple delimiters.\n\n```python\n    (1, 2, 3)\n```\n\n>    will be formatted as:\n\n```python\n    ( 1, 2, 3 )\n```\n\n#### `spaces_before_comment`\n\n>    the number of spaces required before a trailing comment.\n>    this can be a single value (representing the number of spaces\n>    before each trailing comment) or list of values (representing\n>    alignment column values; trailing comments within a block will\n>    be aligned to the first column value that is greater than the maximum\n>    line length within the block).\n\n> **note:** lists of values may need to be quoted in some contexts\n> (eg. shells or editor config files).\n\n>    for example, with `spaces_before_comment=5`:\n\n```python\n    1 + 1 # adding values\n```\n\n>    will be formatted as:\n\n```python\n    1 + 1     # adding values <-- 5 spaces between the end of the statement and comment\n```\n\n>    with `spaces_before_comment=\"15, 20\"`:\n\n```python\n    1 + 1 # adding values\n    two + two # more adding\n\n    longer_statement # this is a longer statement\n    short # this is a shorter statement\n\n    a_very_long_statement_that_extends_beyond_the_final_column # comment\n    short # this is a shorter statement\n```\n\n>    will be formatted as:\n\n```python\n    1 + 1          # adding values <-- end of line comments in block aligned to col 15\n    two + two      # more adding\n\n    longer_statement    # this is a longer statement <-- end of line comments in block aligned to col 20\n    short               # this is a shorter statement\n\n    a_very_long_statement_that_extends_beyond_the_final_column  # comment <-- the end of line comments are aligned based on the line length\n    short                                                       # this is a shorter statement\n```\n\n#### `split_all_comma_separated_values`\n\n>    if a comma separated list (`dict`, `list`, `tuple`, or function `def`) is\n>    on a line that is too long, split such that each element is on a separate\n>    line.\n\n#### `split_all_top_level_comma_separated_values`\n\n>    variation on `split_all_comma_separated_values` in which, if a\n>    subexpression with a comma fits in its starting line, then the\n>    subexpression is not split. this avoids splits like the one for\n>    `b` in this code:\n\n```python\n    abcdef(\n        areallylongthing: int,\n        b: [int,\n            int])\n```\n\n>    with the new knob this is split as:\n\n```python\n    abcdef(\n        areallylongthing: int,\n        b: [int, int])\n```\n\n#### `split_arguments_when_comma_terminated`\n\n>    split before arguments if the argument list is terminated by a comma.\n\n#### `split_before_arithmetic_operator`\n\n>    set to `true` to prefer splitting before `+`, `-`, `*`, `/`, `//`, or `@`\n>    rather than after.\n\n#### `split_before_bitwise_operator`\n\n>    set to `true` to prefer splitting before `&`, `|` or `^` rather than after.\n\n#### `split_before_closing_bracket`\n\n>    split before the closing bracket if a `list` or `dict` literal doesn't fit\n>    on a single line.\n\n#### `split_before_dict_set_generator`\n\n>    split before a dictionary or set generator (`comp_for`). for example, note\n>    the split before the `for`:\n\n```python\n    foo = {\n        variable: 'hello world, have a nice day!'\n        for variable in bar if variable != 42\n    }\n```\n\n#### `split_before_dot`\n\n>    split before the `.` if we need to split a longer expression:\n\n```python\n    foo = ('this is a really long string: {}, {}, {}, {}'.format(a, b, c, d))\n```\n\n>    would reformat to something like:\n\n```python\n    foo = ('this is a really long string: {}, {}, {}, {}'\n           .format(a, b, c, d))\n```\n\n#### `split_before_expression_after_opening_paren`\n\n>    split after the opening paren which surrounds an expression if it doesn't\n>    fit on a single line.\n\n#### `split_before_first_argument`\n\n>    if an argument / parameter list is going to be split, then split before the\n>    first argument.\n\n#### `split_before_logical_operator`\n\n>    set to `true` to prefer splitting before `and` or `or` rather than after.\n\n#### `split_before_named_assigns`\n\n>    split named assignments onto individual lines.\n\n#### `split_complex_comprehension`\n\n>    for list comprehensions and generator expressions with multiple clauses\n>    (e.g multiple `for` calls, `if` filter expressions) and which need to be\n>    reflowed, split each clause onto its own line. for example:\n\n```python\n    result = [\n        a_var + b_var for a_var in xrange(1000) for b_var in xrange(1000)\n        if a_var % b_var]\n```\n\n>    would reformat to something like:\n\n```python\n    result = [\n        a_var + b_var\n        for a_var in xrange(1000)\n        for b_var in xrange(1000)\n        if a_var % b_var]\n```\n\n#### `split_penalty_after_opening_bracket`\n\n>    the penalty for splitting right after the opening bracket.\n\n#### `split_penalty_after_unary_operator`\n\n>    the penalty for splitting the line after a unary operator.\n\n#### `split_penalty_arithmetic_operator`\n\n>    the penalty of splitting the line around the `+`, `-`, `*`, `/`, `//`, `%`,\n>    and `@` operators.\n\n#### `split_penalty_before_if_expr`\n\n>    the penalty for splitting right before an `if` expression.\n\n#### `split_penalty_bitwise_operator`\n\n>    the penalty of splitting the line around the `&`, `|`, and `^` operators.\n\n#### `split_penalty_comprehension`\n\n>    the penalty for splitting a list comprehension or generator expression.\n\n#### `split_penalty_excess_character`\n\n>    the penalty for characters over the column limit.\n\n#### `split_penalty_for_added_line_split`\n\n>    the penalty incurred by adding a line split to the logical line. the more\n>    line splits added the higher the penalty.\n\n#### `split_penalty_import_names`\n\n>    the penalty of splitting a list of `import as` names. for example:\n\n```python\n    from a_very_long_or_indented_module_name_yada_yad import (long_argument_1,\n                                                              long_argument_2,\n                                                              long_argument_3)\n```\n\n>    would reformat to something like:\n\n```python\n    from a_very_long_or_indented_module_name_yada_yad import (\n        long_argument_1, long_argument_2, long_argument_3)\n```\n\n#### `split_penalty_logical_operator`\n\n>    the penalty of splitting the line around the `and` and `or` operators.\n\n#### `use_tabs`\n\n>    use the tab character for indentation.\n\n\n## (potentially) frequently asked questions\n\n### why does yapf destroy my awesome formatting?\n\nyapf tries very hard to get the formatting correct. but for some code, it won't\nbe as good as hand-formatting. in particular, large data literals may become\nhorribly disfigured under yapf.\n\nthe reasons for this are manyfold. in short, yapf is simply a tool to help\nwith development. it will format things to coincide with the style guide, but\nthat may not equate with readability.\n\nwhat can be done to alleviate this situation is to indicate regions yapf should\nignore when reformatting something:\n\n```python\n# yapf: disable\nfoo = {\n    # ... some very large, complex data literal.\n}\n\nbar = [\n    # ... another large data literal.\n]\n# yapf: enable\n```\n\nyou can also disable formatting for a single literal like this:\n\n```python\nbaz = {\n    (1, 2, 3, 4),\n    (5, 6, 7, 8),\n    (9, 10, 11, 12),\n}  # yapf: disable\n```\n\nto preserve the nice dedented closing brackets, use the\n`dedent_closing_brackets` in your style. note that in this case all\nbrackets, including function definitions and calls, are going to use\nthat style.  this provides consistency across the formatted codebase.\n\n### why not improve existing tools?\n\nwe wanted to use clang-format's reformatting algorithm. it's very powerful and\ndesigned to come up with the best formatting possible. existing tools were\ncreated with different goals in mind, and would require extensive modifications\nto convert to using clang-format's algorithm.\n\n### can i use yapf in my program?\n\nplease do! yapf was designed to be used as a library as well as a command line\ntool. this means that a tool or ide plugin is free to use yapf.\n\n### i still get non-pep8 compliant code! why?\n\nyapf tries very hard to be fully pep 8 compliant. however, it is paramount\nto not risk altering the semantics of your code. thus, yapf tries to be as\nsafe as possible and does not change the token stream\n(e.g., by adding parentheses).\nall these cases however, can be easily fixed manually. for instance,\n\n```python\nfrom my_package import my_function_1, my_function_2, my_function_3, my_function_4, my_function_5\n\nfoo = my_variable_1 + my_variable_2 + my_variable_3 + my_variable_4 + my_variable_5 + my_variable_6 + my_variable_7 + my_variable_8\n```\n\nwon't be split, but you can easily get it right by just adding parentheses:\n\n```python\nfrom my_package import (my_function_1, my_function_2, my_function_3,\n                        my_function_4, my_function_5)\n\nfoo = (my_variable_1 + my_variable_2 + my_variable_3 + my_variable_4 +\n       my_variable_5 + my_variable_6 + my_variable_7 + my_variable_8)\n```\n\n\n## gory details\n\n### algorithm design\n\nthe main data structure in yapf is the `logicalline` object. it holds a list\nof `formattoken`\\s, that we would want to place on a single line if there\nwere no column limit. an exception being a comment in the middle of an\nexpression statement will force the line to be formatted on more than one line.\nthe formatter works on one `logicalline` object at a time.\n\nan `logicalline` typically won't affect the formatting of lines before or\nafter it. there is a part of the algorithm that may join two or more\n`logicalline`\\s into one line. for instance, an if-then statement with a\nshort body can be placed on a single line:\n\n```python\nif a == 42: continue\n```\n\nyapf's formatting algorithm creates a weighted tree that acts as the solution\nspace for the algorithm. each node in the tree represents the result of a\nformatting decision --- i.e., whether to split or not to split before a token.\neach formatting decision has a cost associated with it. therefore, the cost is\nrealized on the edge between two nodes. (in reality, the weighted tree doesn't\nhave separate edge objects, so the cost resides on the nodes themselves.)\n\nfor example, take the following python code snippet. for the sake of this\nexample, assume that line (1) violates the column limit restriction and needs to\nbe reformatted.\n\n```python\ndef xxxxxxxxxxx(aaaaaaaaaaaa, bbbbbbbbb, cccccccc, dddddddd, eeeeee):  # 1\n    pass                                                               # 2\n```\n\nfor line (1), the algorithm will build a tree where each node (a\n`formattingdecisionstate` object) is the state of the line at that token given\nthe decision to split before the token or not. note: the `formatdecisionstate`\nobjects are copied by value so each node in the graph is unique and a change in\none doesn't affect other nodes.\n\nheuristics are used to determine the costs of splitting or not splitting.\nbecause a node holds the state of the tree up to a token's insertion, it can\neasily determine if a splitting decision will violate one of the style\nrequirements. for instance, the heuristic is able to apply an extra penalty to\nthe edge when not splitting between the previous token and the one being added.\n\nthere are some instances where we will never want to split the line, because\ndoing so will always be detrimental (i.e., it will require a backslash-newline,\nwhich is very rarely desirable). for line (1), we will never want to split the\nfirst three tokens: `def`, `xxxxxxxxxxx`, and `(`. nor will we want to\nsplit between the `)` and the `:` at the end. these regions are said to be\n\"unbreakable.\" this is reflected in the tree by there not being a \"split\"\ndecision (left hand branch) within the unbreakable region.\n\nnow that we have the tree, we determine what the \"best\" formatting is by finding\nthe path through the tree with the lowest cost.\n\nand that's it!\n",
  "docs_url": null,
  "keywords": "",
  "license": " apache license version 2.0, january 2004 http://www.apache.org/licenses/  terms and conditions for use, reproduction, and distribution  1. definitions.  \"license\" shall mean the terms and conditions for use, reproduction, and distribution as defined by sections 1 through 9 of this document.  \"licensor\" shall mean the copyright owner or entity authorized by the copyright owner that is granting the license.  \"legal entity\" shall mean the union of the acting entity and all other entities that control, are controlled by, or are under common control with that entity. for the purposes of this definition, \"control\" means (i) the power, direct or indirect, to cause the direction or management of such entity, whether by contract or otherwise, or (ii) ownership of fifty percent (50%) or more of the outstanding shares, or (iii) beneficial ownership of such entity.  \"you\" (or \"your\") shall mean an individual or legal entity exercising permissions granted by this license.  \"source\" form shall mean the preferred form for making modifications, including but not limited to software source code, documentation source, and configuration files.  \"object\" form shall mean any form resulting from mechanical transformation or translation of a source form, including but not limited to compiled object code, generated documentation, and conversions to other media types.  \"work\" shall mean the work of authorship, whether in source or object form, made available under the license, as indicated by a copyright notice that is included in or attached to the work (an example is provided in the appendix below).  \"derivative works\" shall mean any work, whether in source or object form, that is based on (or derived from) the work and for which the editorial revisions, annotations, elaborations, or other modifications represent, as a whole, an original work of authorship. for the purposes of this license, derivative works shall not include works that remain separable from, or merely link (or bind by name) to the interfaces of, the work and derivative works thereof.  \"contribution\" shall mean any work of authorship, including the original version of the work and any modifications or additions to that work or derivative works thereof, that is intentionally submitted to licensor for inclusion in the work by the copyright owner or by an individual or legal entity authorized to submit on behalf of the copyright owner. for the purposes of this definition, \"submitted\" means any form of electronic, verbal, or written communication sent to the licensor or its representatives, including but not limited to communication on electronic mailing lists, source code control systems, and issue tracking systems that are managed by, or on behalf of, the licensor for the purpose of discussing and improving the work, but excluding communication that is conspicuously marked or otherwise designated in writing by the copyright owner as \"not a contribution.\"  \"contributor\" shall mean licensor and any individual or legal entity on behalf of whom a contribution has been received by licensor and subsequently incorporated within the work.  2. grant of copyright license. subject to the terms and conditions of this license, each contributor hereby grants to you a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable copyright license to reproduce, prepare derivative works of, publicly display, publicly perform, sublicense, and distribute the work and such derivative works in source or object form.  3. grant of patent license. subject to the terms and conditions of this license, each contributor hereby grants to you a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable (except as stated in this section) patent license to make, have made, use, offer to sell, sell, import, and otherwise transfer the work, where such license applies only to those patent claims licensable by such contributor that are necessarily infringed by their contribution(s) alone or by combination of their contribution(s) with the work to which such contribution(s) was submitted. if you institute patent litigation against any entity (including a cross-claim or counterclaim in a lawsuit) alleging that the work or a contribution incorporated within the work constitutes direct or contributory patent infringement, then any patent licenses granted to you under this license for that work shall terminate as of the date such litigation is filed.  4. redistribution. you may reproduce and distribute copies of the work or derivative works thereof in any medium, with or without modifications, and in source or object form, provided that you meet the following conditions:  (a) you must give any other recipients of the work or derivative works a copy of this license; and  (b) you must cause any modified files to carry prominent notices stating that you changed the files; and  (c) you must retain, in the source form of any derivative works that you distribute, all copyright, patent, trademark, and attribution notices from the source form of the work, excluding those notices that do not pertain to any part of the derivative works; and  (d) if the work includes a \"notice\" text file as part of its distribution, then any derivative works that you distribute must include a readable copy of the attribution notices contained within such notice file, excluding those notices that do not pertain to any part of the derivative works, in at least one of the following places: within a notice text file distributed as part of the derivative works; within the source form or documentation, if provided along with the derivative works; or, within a display generated by the derivative works, if and wherever such third-party notices normally appear. the contents of the notice file are for informational purposes only and do not modify the license. you may add your own attribution notices within derivative works that you distribute, alongside or as an addendum to the notice text from the work, provided that such additional attribution notices cannot be construed as modifying the license.  you may add your own copyright statement to your modifications and may provide additional or different license terms and conditions for use, reproduction, or distribution of your modifications, or for any such derivative works as a whole, provided your use, reproduction, and distribution of the work otherwise complies with the conditions stated in this license.  5. submission of contributions. unless you explicitly state otherwise, any contribution intentionally submitted for inclusion in the work by you to the licensor shall be under the terms and conditions of this license, without any additional terms or conditions. notwithstanding the above, nothing herein shall supersede or modify the terms of any separate license agreement you may have executed with licensor regarding such contributions.  6. trademarks. this license does not grant permission to use the trade names, trademarks, service marks, or product names of the licensor, except as required for reasonable and customary use in describing the origin of the work and reproducing the content of the notice file.  7. disclaimer of warranty. unless required by applicable law or agreed to in writing, licensor provides the work (and each contributor provides its contributions) on an \"as is\" basis, without warranties or conditions of any kind, either express or implied, including, without limitation, any warranties or conditions of title, non-infringement, merchantability, or fitness for a particular purpose. you are solely responsible for determining the appropriateness of using or redistributing the work and assume any risks associated with your exercise of permissions under this license.  8. limitation of liability. in no event and under no legal theory, whether in tort (including negligence), contract, or otherwise, unless required by applicable law (such as deliberate and grossly negligent acts) or agreed to in writing, shall any contributor be liable to you for damages, including any direct, indirect, special, incidental, or consequential damages of any character arising as a result of this license or out of the use or inability to use the work (including but not limited to damages for loss of goodwill, work stoppage, computer failure or malfunction, or any and all other commercial damages or losses), even if such contributor has been advised of the possibility of such damages.  9. accepting warranty or additional liability. while redistributing the work or derivative works thereof, you may choose to offer, and charge a fee for, acceptance of support, warranty, indemnity, or other liability obligations and/or rights consistent with this license. however, in accepting such obligations, you may act only on your own behalf and on your sole responsibility, not on behalf of any other contributor, and only if you agree to indemnify, defend, and hold each contributor harmless for any liability incurred by, or claims asserted against, such contributor by reason of your accepting any such warranty or additional liability.  end of terms and conditions  appendix: how to apply the apache license to your work.  to apply the apache license to your work, attach the following boilerplate notice, with the fields enclosed by brackets \"[]\" replaced with your own identifying information. (don't include the brackets!)  the text should be enclosed in the appropriate comment syntax for the file format. we also recommend that a file or class name and description of purpose be included on the same \"printed page\" as the copyright notice for easier identification within third-party archives.  copyright [yyyy] [name of copyright owner]  licensed under the apache license, version 2.0 (the \"license\"); you may not use this file except in compliance with the license. you may obtain a copy of the license at  http://www.apache.org/licenses/license-2.0  unless required by applicable law or agreed to in writing, software distributed under the license is distributed on an \"as is\" basis, without warranties or conditions of any kind, either express or implied. see the license for the specific language governing permissions and limitations under the license. ",
  "name": "yapf",
  "package_url": "https://pypi.org/project/yapf/",
  "project_url": "https://pypi.org/project/yapf/",
  "project_urls": {
    "changelog": "https://github.com/google/yapf/blob/main/CHANGELOG.md",
    "url": "https://github.com/google/yapf"
  },
  "release_url": "https://pypi.org/project/yapf/0.40.2/",
  "requires_dist": [
    "importlib-metadata >=6.6.0",
    "platformdirs >=3.5.1",
    "tomli >=2.0.1"
  ],
  "requires_python": ">=3.7",
  "summary": "a formatter for python code",
  "version": "0.40.2",
  "releases": [],
  "developers": [
    "google_inc",
    "morbo@google.com"
  ],
  "kwds": "yapf_api badge yapflib yml yapfignore",
  "license_kwds": "licenses license apache ownership licensed",
  "libtype": "pypi",
  "id": "pypi_yapf",
  "homepage": "",
  "release_count": 71,
  "dependency_ids": [
    "pypi_importlib_metadata",
    "pypi_platformdirs",
    "pypi_tomli"
  ],
  "documentation_summary": "YAPF (Yet Another Python Formatter) version 0.40.2, released on September 22, 2023, is a tool for formatting Python code to conform to a style guide. It's not an official Google product but is developed by Google Inc. YAPF aims to produce code that looks like it was written by humans adhering to a style guide. It supports Python versions 3.7 and above. The tool can be installed via pip and is still considered in beta, with frequent updates. YAPF can be used as a command-line tool or integrated into various editors through plugins. It offers extensive configuration options to adjust the formatting style, including predefined styles like PEP8 and Google. The tool also provides features for excluding files from formatting and generating diffs of formatting changes.",
  "embedding": [
    0.002262587659060955,
    0.0008154706447385252,
    -0.009390536695718765,
    -0.016073763370513916,
    -0.002671873429790139,
    0.029255950823426247,
    -0.016385599970817566,
    -0.021615952253341675,
    -0.004596047569066286,
    -0.011693875305354595,
    0.03501075506210327,
    0.0009071612730622292,
    0.0010303013259544969,
    0.028788195922970772,
    -0.007197048980742693,
    0.0010258718393743038,
    0.01359324436634779,
    -0.016442297026515007,
    0.017009273171424866,
    0.018710201606154442,
    0.01666908897459507,
    0.018993688747286797,
    -0.0239405520260334,
    -0.025287119671702385,
    -0.014479144476354122,
    0.034500475972890854,
    -0.0013368226354941726,
    -0.012912873178720474,
    0.0018249533604830503,
    -0.0017948327586054802,
    0.015180776827037334,
    0.0005820360966026783,
    -0.020000070333480835,
    0.02133246324956417,
    -0.014854765497148037,
    -0.006233190186321735,
    -0.005907178856432438,
    -0.026917176321148872,
    0.02700222097337246,
    -0.019730757921934128,
    0.04113409295678139,
    -0.0002967763866763562,
    -0.0034603241365402937,
    -0.0004039702471345663,
    -0.002654155483469367,
    0.0019064560765400529,
    0.008157364092767239,
    -0.03228927031159401,
    -0.028533056378364563,
    0.017207715660333633,
    0.03155220299959183,
    -0.015492613427340984,
    -0.008143189363181591,
    -0.011084376834332943,
    0.009929163381457329,
    -0.014443708583712578,
    0.0205386970192194,
    0.03339487314224243,
    -0.012423857115209103,
    -0.005308310966938734,
    -7.735011604381725e-05,
    -0.00787387602031231,
    -0.01396886631846428,
    0.003866066224873066,
    0.023401925340294838,
    -0.012267938815057278,
    -0.003359331516548991,
    0.02021268755197525,
    -0.00601703068241477,
    -0.011743485927581787,
    0.02525877207517624,
    0.04447925090789795,
    -0.005457141902297735,
    -0.0062296465039253235,
    0.03651323914527893,
    -0.01754789985716343,
    -0.022962519899010658,
    0.013508197851479053,
    -0.020382778719067574,
    0.00851881131529808,
    0.014472057111561298,
    -0.001587532227858901,
    0.013529459945857525,
    0.018483411520719528,
    0.021289940923452377,
    0.0061835795640945435,
    0.006867494434118271,
    0.03750544786453247,
    -0.005818589124828577,
    -0.008150276727974415,
    0.026236804202198982,
    0.029709530994296074,
    0.0199008509516716,
    0.039149679243564606,
    0.0035329677630215883,
    0.012430944480001926,
    0.017065972089767456,
    0.011573392897844315,
    0.02885906770825386,
    -0.01854010857641697,
    -0.01822827197611332,
    0.030191460624337196,
    0.006481241900473833,
    -0.0032193593215197325,
    -0.020637918263673782,
    -0.020000070333480835,
    0.019858326762914658,
    -0.016087938100099564,
    0.025343818590044975,
    0.009837029501795769,
    -0.010666231624782085,
    0.041587673127651215,
    0.017264412716031075,
    -0.027271535247564316,
    0.01872437447309494,
    -0.020623743534088135,
    0.031070273369550705,
    -0.03875279426574707,
    -0.022353019565343857,
    0.01604541391134262,
    -0.0008185713086277246,
    0.021686824038624763,
    0.01655569300055504,
    -0.009801593609154224,
    0.022806601598858833,
    -0.02781016193330288,
    -0.013238884508609772,
    -0.010637883096933365,
    -0.01971658319234848,
    -0.019560664892196655,
    0.045443110167980194,
    -0.007090740837156773,
    0.026095060631632805,
    0.002271446632221341,
    -0.0186676774173975,
    -0.0020021332893520594,
    -0.017009273171424866,
    -0.017803039401769638,
    -0.02841966040432453,
    -0.018511759117245674,
    0.016782483085989952,
    0.02282077632844448,
    -0.02830626629292965,
    -0.023160960525274277,
    -0.02843383513391018,
    0.020042594522237778,
    0.02619428187608719,
    0.0010728244669735432,
    0.018256619572639465,
    -0.00626862607896328,
    0.029567787423729897,
    -0.02500363253057003,
    0.0021686824038624763,
    0.029652833938598633,
    -0.017136843875050545,
    0.014826416969299316,
    -0.009092873893678188,
    0.0091708330437541,
    -0.0174203310161829,
    0.001936576678417623,
    -0.0048299250192940235,
    0.022126229479908943,
    -0.025287119671702385,
    0.016002891585230827,
    -0.011219033040106297,
    0.015662705525755882,
    0.02968118153512478,
    -0.013869645074009895,
    -0.02917090430855751,
    -0.010524488054215908,
    0.01505320705473423,
    0.010240999981760979,
    -0.0199150238186121,
    -0.007306900341063738,
    0.012395508587360382,
    -0.012976658530533314,
    0.014004302211105824,
    -0.008866083808243275,
    -0.005152392666786909,
    0.010815063491463661,
    0.004900796804577112,
    0.006190666928887367,
    0.022593984380364418,
    0.03886618837714195,
    -0.006796622183173895,
    -0.03520919755101204,
    0.023288531228899956,
    0.0014360434142872691,
    -0.003010287182405591,
    0.007951835170388222,
    0.01784556359052658,
    0.030871830880641937,
    -0.014160220511257648,
    -0.019007863476872444,
    -0.5814903378486633,
    -0.025740699842572212,
    -0.005279961973428726,
    -0.021176544949412346,
    0.022494764998555183,
    0.0001610122708370909,
    -0.017023447901010513,
    0.015606008470058441,
    -0.04269327595829964,
    0.026463594287633896,
    -0.020552871748805046,
    0.03645654395222664,
    -0.0014324997318908572,
    -0.014408271759748459,
    0.004284210968762636,
    -0.022126229479908943,
    0.01411769725382328,
    -0.037902332842350006,
    -0.02445083111524582,
    0.013841296546161175,
    0.003502847393974662,
    0.04660540819168091,
    -0.02215457893908024,
    -0.002287392970174551,
    -0.0211481973528862,
    0.011403300799429417,
    0.005411074962466955,
    -0.0015937335556373,
    0.02557060867547989,
    0.01710849441587925,
    -0.03109862096607685,
    0.044932831078767776,
    -0.0009806909365579486,
    -0.016201332211494446,
    0.05641409009695053,
    0.004053876735270023,
    0.018256619572639465,
    0.02905750833451748,
    0.010963894426822662,
    0.035917915403842926,
    -0.01579027622938156,
    0.0037101476918905973,
    -0.0025336730759590864,
    0.0015520962188020349,
    0.01934804953634739,
    -0.027285709977149963,
    0.012586862780153751,
    -0.01069458108395338,
    -0.0015476667322218418,
    -0.014351574704051018,
    -0.00802270695567131,
    0.0025389883667230606,
    0.007462818641215563,
    -0.015960369259119034,
    0.025641480460762978,
    0.010907196439802647,
    -0.0032547954469919205,
    -0.02661951258778572,
    -0.01004964578896761,
    -0.020056769251823425,
    0.009709460660815239,
    0.02494693547487259,
    0.0015042576706036925,
    -0.02164429984986782,
    -0.006066640838980675,
    0.016584042459726334,
    0.001581330900080502,
    -0.018582630902528763,
    -0.01947561837732792,
    -0.02661951258778572,
    0.0048299250192940235,
    -0.007774655241519213,
    -0.008355805650353432,
    -0.05170819163322449,
    0.021431684494018555,
    0.04337364807724953,
    0.01995754800736904,
    0.007902225479483604,
    0.001732819713652134,
    0.018951166421175003,
    -0.0030705281533300877,
    -0.0064068264327943325,
    -0.031070273369550705,
    -0.009560628794133663,
    0.019674059003591537,
    0.008660554885864258,
    0.0027303427923470736,
    0.014968160539865494,
    0.008582595735788345,
    -0.015634357929229736,
    0.015279997140169144,
    0.019263003021478653,
    -0.009163746610283852,
    -0.04056711867451668,
    0.001591961714439094,
    0.0017000414663925767,
    -0.024365784600377083,
    -0.006346585229039192,
    0.012898699380457401,
    -0.032572757452726364,
    -0.007299813441932201,
    -0.00696671474725008,
    -0.022990867495536804,
    0.001430728007107973,
    0.002299795625731349,
    0.01914960704743862,
    0.008972391486167908,
    -0.001936576678417623,
    -0.01349402405321598,
    -0.014613800682127476,
    -0.015209125354886055,
    -0.04178611561655998,
    -0.011793096549808979,
    -0.01766129583120346,
    0.019078735262155533,
    -0.0385827012360096,
    0.023416100069880486,
    0.005230351816862822,
    0.013890907168388367,
    0.011056027375161648,
    0.01841253787279129,
    -0.018398365005850792,
    -0.010559923946857452,
    0.0034426061902195215,
    0.021601777523756027,
    0.01624385640025139,
    0.013451500795781612,
    -0.013479849323630333,
    -0.03245936334133148,
    0.024039773270487785,
    -0.0061835795640945435,
    0.005974507424980402,
    0.03776058554649353,
    -0.0032725133933126926,
    0.011261556297540665,
    0.023160960525274277,
    0.008554247207939625,
    0.02077966183423996,
    -0.009907902218401432,
    -0.007639998570084572,
    -0.024861888960003853,
    0.02232467196881771,
    0.023274356499314308,
    0.005414618644863367,
    -0.016399774700403214,
    -0.014883114024996758,
    -0.01624385640025139,
    0.0023883855901658535,
    -0.005432336591184139,
    0.017448680475354195,
    -0.02134663797914982,
    0.006105620414018631,
    -0.04085060581564903,
    0.019801629707217216,
    -0.019234653562307358,
    -0.0007277666009031236,
    -0.0013607419095933437,
    -0.03180734068155289,
    -0.008377066813409328,
    -0.027569197118282318,
    0.019744932651519775,
    0.02083636075258255,
    -0.0015538680600002408,
    -0.005807958077639341,
    -0.020496174693107605,
    0.006396195385605097,
    -0.014124784618616104,
    0.03353661671280861,
    0.02076548896729946,
    -0.029624484479427338,
    -0.0019135433249175549,
    0.0053650084882974625,
    -0.02294834516942501,
    0.014146045781672001,
    -0.02263650856912136,
    0.015166602097451687,
    -0.018185747787356377,
    -0.0017912890762090683,
    -0.033820103853940964,
    -0.01885194517672062,
    -0.0029500459786504507,
    0.018766898661851883,
    -0.03302634134888649,
    -0.027654243633151054,
    0.021445859223604202,
    0.028646452352404594,
    -0.004865360911935568,
    0.007129720412194729,
    0.004681093618273735,
    0.021318290382623672,
    -0.003338069887831807,
    0.004588960204273462,
    -0.020694615319371223,
    0.024110645055770874,
    -0.020042594522237778,
    -0.0008619803702458739,
    -0.005191372241824865,
    0.0012783532729372382,
    0.005765434820204973,
    0.03475561738014221,
    0.02650611847639084,
    0.01474137045443058,
    0.00923461839556694,
    -0.017746342346072197,
    -0.0067151193507015705,
    -0.01914960704743862,
    0.02500363253057003,
    -0.02008511684834957,
    0.011545044369995594,
    -0.006796622183173895,
    0.0005687475786544383,
    -0.015606008470058441,
    -0.03557772934436798,
    0.011700962670147419,
    -0.004411780275404453,
    0.0065379394218325615,
    -0.009107048623263836,
    0.03583287075161934,
    -0.00818571262061596,
    0.026208456605672836,
    0.0009541139588691294,
    0.009496844373643398,
    0.009447233751416206,
    -0.012402595020830631,
    0.03464221954345703,
    0.012714431621134281,
    -0.006116251461207867,
    0.02245224080979824,
    -0.00842667743563652,
    -0.029511090368032455,
    -0.0014794524759054184,
    0.017306935042142868,
    0.003277828684076667,
    -0.025216247886419296,
    0.019263003021478653,
    0.006587550044059753,
    0.023671239614486694,
    -0.019574839621782303,
    0.03988674655556679,
    -0.02520207315683365,
    0.029879624024033546,
    0.012927047908306122,
    0.039971791207790375,
    -0.011304079554975033,
    0.02973788045346737,
    0.010496139526367188,
    0.028972461819648743,
    0.01484059076756239,
    -0.009312577545642853,
    -0.007292726077139378,
    -0.030701739713549614,
    0.016683261841535568,
    0.0021775413770228624,
    0.0025602499954402447,
    0.001964925555512309,
    0.015067381784319878,
    0.006750555243343115,
    -0.014557103626430035,
    0.01953231543302536,
    -0.0014387010596692562,
    -0.008036881685256958,
    -0.020354431122541428,
    0.0261234100908041,
    0.014642150141298771,
    0.03155220299959183,
    -0.02761172130703926,
    -0.0037703888956457376,
    -0.045074574649333954,
    0.0002471659972798079,
    -0.01767547056078911,
    -0.027413278818130493,
    -0.018327493220567703,
    -0.011573392897844315,
    -0.007313987705856562,
    0.013033355586230755,
    0.023104263469576836,
    0.0016699208645150065,
    0.045754946768283844,
    -0.015506788156926632,
    -0.011438736692070961,
    -0.030304856598377228,
    -0.007104915101081133,
    0.024606749415397644,
    -0.002811845624819398,
    0.01356489583849907,
    0.02474849298596382,
    -0.020382778719067574,
    -0.002285621128976345,
    -0.00849046278744936,
    0.01371372677385807,
    -0.014727195724844933,
    -0.0010905425297096372,
    0.012927047908306122,
    0.005602429620921612,
    -0.006566288415342569,
    0.0031927824020385742,
    0.013408977538347244,
    -0.020567046478390694,
    -0.003364647040143609,
    0.0016894106520339847,
    0.004858273547142744,
    -0.0030563538894057274,
    -0.014684672467410564,
    0.006272169761359692,
    0.04280667006969452,
    -0.0028898047748953104,
    0.0090220021083951,
    -0.0180440042167902,
    0.0027126248460263014,
    -0.019121257588267326,
    0.0021988030057400465,
    0.005843393970280886,
    -0.0013527687406167388,
    0.014670498669147491,
    0.02320348471403122,
    0.002985481871291995,
    0.007363597862422466,
    -0.003306177444756031,
    0.029879624024033546,
    0.004457847215235233,
    -0.013175100088119507,
    -0.014507493004202843,
    -0.0027427454479038715,
    0.0055634500458836555,
    0.032884594053030014,
    0.022480590268969536,
    0.013706639409065247,
    0.008596770465373993,
    -0.018058178946375847,
    0.00024605862563475966,
    0.002074776915833354,
    0.006279256660491228,
    0.0017213030951097608,
    0.00747699337080121,
    -0.003334526438266039,
    0.009914988651871681,
    0.0033699623309075832,
    0.008568421937525272,
    0.017065972089767456,
    -0.000615257304161787,
    -0.009418885223567486,
    -0.0051382179372012615,
    0.014507493004202843,
    0.010396918281912804,
    0.0005160365835763514,
    0.012267938815057278,
    0.012572688050568104,
    -0.011119812726974487,
    0.027654243633151054,
    0.0019790998194366693,
    0.028476359322667122,
    0.03271450474858284,
    -0.0035843499936163425,
    -0.04552815482020378,
    -0.012714431621134281,
    0.010623708367347717,
    0.018823595717549324,
    0.01817157305777073,
    -0.004865360911935568,
    0.030333204194903374,
    0.007126176729798317,
    0.00973780918866396,
    0.022990867495536804,
    0.016470646485686302,
    0.019447268918156624,
    0.02406812272965908,
    -0.01026226207613945,
    -0.029766228049993515,
    -0.00043431230005808175,
    -0.01909290999174118,
    -0.01359324436634779,
    -0.008880258537828922,
    0.00024738747742958367,
    -0.013543633744120598,
    0.013827121816575527,
    0.00015259621432051063,
    -0.02388385497033596,
    -0.023557843640446663,
    0.02680378034710884,
    0.0019932743161916733,
    -0.00030563538894057274,
    -0.018270794302225113,
    -0.005432336591184139,
    -0.04635027050971985,
    -0.009688198566436768,
    -0.04510292410850525,
    0.0261375829577446,
    0.001564498757943511,
    0.015464264899492264,
    0.0211481973528862,
    -0.008979478850960732,
    -0.0012092530960217118,
    -0.011211946606636047,
    0.016640739515423775,
    0.01716519147157669,
    -0.03254441171884537,
    -0.03192073851823807,
    -0.03365001454949379,
    -0.011389126069843769,
    0.0016052501741796732,
    -0.007753394078463316,
    -0.0074982549995183945,
    0.023742111399769783,
    0.0030847026500850916,
    0.0174203310161829,
    -0.020198512822389603,
    -0.013331018388271332,
    -0.029652833938598633,
    0.01922047883272171,
    0.016895879060029984,
    0.012459293007850647,
    0.0005466000875458121,
    -0.0174203310161829,
    0.021190719678997993,
    -0.007817178964614868,
    0.014486230909824371,
    -0.004780314397066832,
    -0.02793773263692856,
    -0.0038270866498351097,
    0.018313318490982056,
    -0.0023653521202504635,
    -0.009702373296022415,
    0.005620147567242384,
    0.008256585337221622,
    0.005691019352525473,
    -0.027342407032847404,
    -0.015960369259119034,
    -0.016839180141687393,
    0.003958199638873339,
    0.01502485852688551,
    0.02338775061070919,
    -0.00037894357228651643,
    -0.024039773270487785,
    -0.00883064791560173,
    0.013536547310650349,
    -0.02781016193330288,
    -0.004581873305141926,
    0.036173056811094284,
    0.032629456371068954,
    -0.006467067636549473,
    -0.010630795732140541,
    0.02979457750916481,
    0.011261556297540665,
    -0.006601724307984114,
    0.01916378177702427,
    -0.037902332842350006,
    0.021941963583230972,
    0.0307867843657732,
    0.02164429984986782,
    0.011793096549808979,
    0.006435174960643053,
    -0.02184274233877659,
    -0.013848383910953999,
    0.017902260646224022,
    0.0012748095905408263,
    0.018511759117245674,
    -0.008745601400732994,
    -0.016442297026515007,
    -0.030446600168943405,
    -3.410713543416932e-05,
    -0.014004302211105824,
    0.009581890888512135,
    -0.020311906933784485,
    -0.0030404075514525175,
    -0.020311906933784485,
    -0.019078735262155533,
    -0.02127576619386673,
    -0.021913614124059677,
    -0.01960318721830845,
    -0.0245642252266407,
    0.007097828201949596,
    -0.009780332446098328,
    -0.0009992948034778237,
    0.004794489126652479,
    -0.004234600346535444,
    0.00011472400365164503,
    -0.021119847893714905,
    -0.014422446489334106,
    -0.033564966171979904,
    0.00892986822873354,
    0.000879698374774307,
    -0.01275695487856865,
    0.004712986294180155,
    0.03569112718105316,
    0.008851909078657627,
    0.01228211261332035,
    -0.004620852880179882,
    0.012813652865588665,
    0.008632206358015537,
    0.00674701202660799,
    -0.01946144364774227,
    -0.003183923428878188,
    -0.008121928200125694,
    0.011325341649353504,
    -0.018256619572639465,
    0.01890864223241806,
    -0.002801214810460806,
    -0.05715116113424301,
    0.009681111201643944,
    0.021615952253341675,
    -0.005372095387428999,
    0.011516695842146873,
    -0.010446528904139996,
    -0.008256585337221622,
    -0.013231797143816948,
    -0.005854025017470121,
    -0.015223300084471703,
    0.01995754800736904,
    -0.023486971855163574,
    -0.018114876002073288,
    0.009390536695718765,
    0.005021279212087393,
    0.02843383513391018,
    0.013210535980761051,
    -0.018199922516942024,
    -0.006059553939849138,
    0.024337435141205788,
    0.02606671117246151,
    0.02072296477854252,
    -0.0236428901553154,
    0.015464264899492264,
    -0.042835019528865814,
    -0.025797398760914803,
    -0.006669052876532078,
    0.020850535482168198,
    0.029142554849386215,
    0.008136102929711342,
    -0.0012783532729372382,
    -0.00041150039760395885,
    0.025216247886419296,
    0.016201332211494446,
    -0.013997214846313,
    0.03177899122238159,
    -0.03209082782268524,
    -0.003162661800161004,
    -0.03540763631463051,
    0.00973780918866396,
    -0.03228927031159401,
    -0.009631501510739326,
    -0.021289940923452377,
    0.02252311259508133,
    0.019263003021478653,
    0.024394134059548378,
    -0.019376397132873535,
    0.006523765157908201,
    -0.011807270348072052,
    0.03475561738014221,
    0.012898699380457401,
    0.0295394379645586,
    0.03135376051068306,
    0.0017310479888692498,
    -0.0009647447150200605,
    0.008632206358015537,
    -0.025613131001591682,
    0.0037668454460799694,
    0.007831352762877941,
    0.001377573935315013,
    0.0035630883648991585,
    -0.010524488054215908,
    0.002097810385748744,
    0.006084358785301447,
    -0.05255865678191185,
    -0.0267470832914114,
    0.02630767598748207,
    0.011899404227733612,
    0.026704559102654457,
    -0.0289157647639513,
    0.0009009599452838302,
    0.015166602097451687,
    0.005414618644863367,
    -0.002475203713402152,
    0.006219015456736088,
    0.01150960847735405,
    -0.018015654757618904,
    -0.021871091797947884,
    0.03311138600111008,
    0.007618736941367388,
    -0.015719404444098473,
    0.015563485212624073,
    0.013082966208457947,
    -0.011063114739954472,
    -0.05108451843261719,
    -0.01306170504540205,
    -0.0036056116223335266,
    0.028717324137687683,
    0.027781814336776733,
    0.006208384875208139,
    0.0033876802772283554,
    0.018752723932266235,
    -0.006725750397890806,
    -0.02773929014801979,
    -0.004574785940349102,
    0.005857568699866533,
    0.03342322260141373,
    -0.026534466072916985,
    0.007810091599822044,
    -0.0186676774173975,
    -0.02089305780827999,
    0.002305110916495323,
    -0.013642854988574982,
    -0.013777511194348335,
    0.008072317577898502,
    -0.022849123924970627,
    0.03370670974254608,
    0.008582595735788345,
    -0.014060999266803265,
    -0.01817157305777073,
    3.515914431773126e-05,
    0.001763826236128807,
    0.013954691588878632,
    0.0021793132182210684,
    0.007158069405704737,
    0.04260823130607605,
    -0.020567046478390694,
    -0.01734945923089981,
    -0.013586157001554966,
    -0.0044259545393288136,
    -0.007958922535181046,
    -0.0058256760239601135,
    -0.0028933482244610786,
    -0.017590424045920372,
    0.04124748706817627,
    -0.013238884508609772,
    0.02252311259508133,
    -0.0063749342225492,
    0.027016395702958107,
    -0.03912132978439331,
    0.01574775204062462,
    -0.026038363575935364,
    -0.008603857830166817,
    0.017406156286597252,
    0.007391946855932474,
    -0.006449349690228701,
    0.01978745497763157,
    0.0058717429637908936,
    0.03875279426574707,
    0.009149571880698204,
    -0.01964571140706539,
    -0.0025017806328833103,
    0.023671239614486694,
    -0.0018887381302192807,
    -0.015067381784319878,
    -0.006778904236853123,
    -0.0099504254758358,
    0.0026665579061955214,
    -0.0009058323921635747,
    0.01940474659204483,
    -0.016328902915120125,
    0.026520293205976486,
    0.023600367829203606,
    0.008788124658167362,
    0.025485562160611153,
    -0.040652163326740265,
    -0.026024188846349716,
    -0.004861817229539156,
    -0.021006453782320023,
    -0.010567011311650276,
    0.007689609192311764,
    0.005074433516710997,
    0.0030829308088868856,
    -0.021502556279301643,
    0.021304115653038025,
    0.012693170458078384,
    0.005308310966938734,
    -0.001242031343281269,
    0.03342322260141373,
    -0.011949014849960804,
    0.012480554170906544,
    0.00842667743563652,
    -0.033876802772283554,
    0.009808680973947048,
    0.009043264202773571,
    -0.017760517075657845,
    -0.0366833321750164,
    -0.04365713521838188,
    0.01673996075987816,
    0.022112054750323296,
    -0.017576249316334724,
    -0.012608123943209648,
    -0.022197101265192032,
    -0.00985829159617424,
    -0.005946158431470394,
    -0.041332535445690155,
    0.027795987203717232,
    0.0069631715305149555,
    0.003727865871042013,
    -0.007076566573232412,
    0.019305525347590446,
    0.008759776130318642,
    0.03781728446483612,
    0.002810073783621192,
    0.003176836296916008,
    0.009794507175683975,
    0.008887345902621746,
    -0.016952576115727425,
    -0.026732908561825752,
    -0.003954655956476927,
    -0.015620183199644089,
    0.012934135273098946,
    -0.016442297026515007,
    0.0192913506180048,
    0.029014986008405685,
    0.004135379567742348,
    -0.011141073890030384,
    -0.012820740230381489,
    0.006878125015646219,
    0.004287754185497761,
    0.011056027375161648,
    0.0038908713031560183,
    -0.019206304103136063,
    -0.01277821697294712,
    0.004549980629235506,
    0.02649194374680519,
    0.009461408481001854,
    -0.01296957116574049,
    0.012459293007850647,
    -0.015124078840017319,
    -0.0015379218384623528,
    -0.010127604939043522,
    -0.030758436769247055,
    -0.0167966578155756,
    -0.006669052876532078,
    0.04827798902988434,
    -0.024096470326185226,
    0.004262949340045452,
    0.017391981557011604,
    0.02377045899629593,
    -0.009844116866588593,
    -0.01471302192658186,
    0.018327493220567703,
    -0.03880949318408966,
    0.02120489440858364,
    0.015705229714512825,
    -0.010836324654519558,
    0.001760282670147717,
    -0.0018019198905676603,
    0.054656464606523514,
    -0.010418180376291275,
    -0.024096470326185226,
    -0.030503297224640846,
    -0.041332535445690155,
    0.0017762287752702832,
    0.015379218384623528,
    0.014514580368995667,
    -0.00534729054197669,
    0.014273615553975105,
    -0.013997214846313,
    0.005729998927563429,
    0.009340926073491573,
    -0.028788195922970772,
    -0.009404710493981838,
    -0.031126970425248146,
    0.016456471756100655,
    0.00026975644868798554,
    -0.011743485927581787,
    -0.04090730473399162,
    -0.003166205482557416,
    0.009227531030774117,
    -0.012147456407546997,
    0.002643524669110775,
    0.19084404408931732,
    0.010411093011498451,
    0.0301631111651659,
    0.01306170504540205,
    -0.005602429620921612,
    0.033820103853940964,
    0.019631536677479744,
    -0.0021881721913814545,
    -0.03260110691189766,
    0.01526582334190607,
    0.0011915350332856178,
    0.008065230213105679,
    -0.007654173299670219,
    -0.004099943675100803,
    0.01947561837732792,
    -0.006484785582870245,
    -0.02985127456486225,
    -0.03776058554649353,
    -0.04090730473399162,
    0.019192131236195564,
    0.013961778953671455,
    -0.01246638037264347,
    -0.024479178711771965,
    -0.003688886296004057,
    0.03282789885997772,
    0.011530869640409946,
    -0.019985895603895187,
    -0.01474137045443058,
    0.029029160737991333,
    0.00778882997110486,
    -0.006605267990380526,
    0.011353690177202225,
    -0.014911463484168053,
    -0.0022608160506933928,
    -0.038100771605968475,
    -0.011183597147464752,
    0.0004708556807599962,
    0.000780034635681659,
    0.025797398760914803,
    0.008823560550808907,
    0.006789534818381071,
    -0.04921349883079529,
    -0.011998625472187996,
    -0.04175776615738869,
    0.0010090396972373128,
    -0.02022686041891575,
    -0.0068710376508533955,
    -0.0021669105626642704,
    -0.018426712602376938,
    0.04762596637010574,
    -0.02021268755197525,
    -0.02474849298596382,
    0.03886618837714195,
    -0.00020730051619466394,
    0.003968830686062574,
    -0.02015598863363266,
    -0.0014962845016270876,
    0.0083983289077878,
    -0.0020074485801160336,
    -0.005549275316298008,
    -0.0036251014098525047,
    0.0295394379645586,
    -0.031949084252119064,
    0.006488329265266657,
    -0.05975924804806709,
    0.015506788156926632,
    -0.021445859223604202,
    -0.018582630902528763,
    0.009135397151112556,
    0.015010683797299862,
    -0.012799478136003017,
    0.00603120494633913,
    -0.028320441022515297,
    -0.006091446150094271,
    -0.03115531988441944,
    -0.026917176321148872,
    0.03407524526119232,
    0.03594626486301422,
    0.025187898427248,
    0.041587673127651215,
    0.0013164469273760915,
    -0.013465674594044685,
    0.015776101499795914,
    0.0002095152740366757,
    0.01484059076756239,
    -0.03433038294315338,
    0.030616693198680878,
    -0.01591784507036209,
    -0.0042735799215734005,
    -0.043883927166461945,
    -0.012395508587360382,
    -0.035549383610486984,
    0.0011383810779079795,
    -0.0016716927057132125,
    -0.00042434592614881694,
    0.010985155589878559,
    -0.009177920408546925,
    0.00491497153416276,
    -0.0289157647639513,
    0.026109235361218452,
    -0.03223257511854172,
    0.0391780287027359,
    0.01791643537580967,
    0.004007810261100531,
    -0.008249497972428799,
    0.012530164793133736,
    0.013132576830685139,
    0.014613800682127476,
    -0.004238144028931856,
    -0.016995098441839218,
    -0.0053862701170146465,
    -0.007505341898649931,
    0.02165847457945347,
    -0.006633616518229246,
    0.018072353675961494,
    -0.00849046278744936,
    0.003109507728368044,
    0.003862522542476654,
    0.016470646485686302,
    0.002618719357997179,
    -0.022551462054252625,
    -0.017278587445616722,
    0.008008533157408237,
    -0.02773929014801979,
    -0.02121906913816929,
    -0.009532280266284943,
    -0.043940622359514236,
    0.02351532131433487,
    -0.02555643394589424,
    0.006144599989056587,
    -0.0012021658476442099,
    0.003130769357085228,
    0.021757695823907852,
    0.008462113328278065,
    -0.01723606325685978,
    -0.013820034451782703,
    -0.03243101388216019,
    -0.032629456371068954,
    0.01927717588841915,
    -0.005421706009656191,
    -0.02375628612935543,
    0.01655569300055504,
    0.013720814138650894,
    -0.004688180983066559,
    0.0005926668527536094,
    -0.010134692303836346,
    0.015421741642057896,
    -0.02562730573117733,
    0.003166205482557416,
    -0.020751314237713814,
    -0.01729276217520237,
    -0.00768252182751894,
    -0.009681111201643944,
    -0.027214838191866875,
    0.011020591482520103,
    -0.03764719143509865,
    0.007526603527367115,
    -0.028320441022515297,
    0.02182856760919094,
    0.001389976590871811,
    -0.03818581998348236,
    -0.007866788655519485,
    -0.003338069887831807,
    -0.012218328192830086,
    -0.0006511362735182047,
    -0.035917915403842926,
    -0.17961792647838593,
    0.01934804953634739,
    0.00457124225795269,
    -0.010680406354367733,
    0.03345157206058502,
    0.026888826861977577,
    0.02134663797914982,
    -0.0028915766160935163,
    0.0076045626774430275,
    0.0002755147870630026,
    0.010659145191311836,
    -0.021927788853645325,
    -0.011502521112561226,
    -0.01365702971816063,
    0.006020574364811182,
    0.026860477402806282,
    -0.01611628755927086,
    0.007455731742084026,
    0.02395472675561905,
    0.021941963583230972,
    0.027399104088544846,
    -0.028646452352404594,
    0.02107732556760311,
    0.02089305780827999,
    -0.009397624060511589,
    -0.010340221226215363,
    -0.01971658319234848,
    -0.01753372699022293,
    -0.013890907168388367,
    -0.021743521094322205,
    -0.011098550632596016,
    0.008894432336091995,
    0.016017066314816475,
    -0.010439441539347172,
    0.021743521094322205,
    -0.011814357712864876,
    -0.0006808139150962234,
    -0.019631536677479744,
    -0.008958217687904835,
    0.01797313243150711,
    0.029397694393992424,
    0.012834914028644562,
    -0.007335249334573746,
    -0.026265153661370277,
    -0.005375639069825411,
    0.004946863744407892,
    -0.00279235583730042,
    -0.02619428187608719,
    0.018440887331962585,
    -0.00494332006201148,
    0.022990867495536804,
    -0.04875991865992546,
    -0.010177215561270714,
    0.011162335984408855,
    0.01914960704743862,
    0.004564154893159866,
    0.009681111201643944,
    -0.002957133110612631,
    -0.0007166928262449801,
    -0.016910051926970482,
    -0.014408271759748459,
    -0.010949719697237015,
    -0.001071052742190659,
    0.03552103415131569,
    -0.011048940941691399,
    -0.03084348328411579,
    -0.019319700077176094,
    0.02959613688290119,
    -0.020822186022996902,
    0.009879552759230137,
    0.02059539593756199,
    0.00383417378179729,
    0.024110645055770874,
    0.0032512517645955086,
    0.01598871685564518,
    -0.002957133110612631,
    -0.023727936670184135,
    0.009000740945339203,
    0.006176492664963007,
    -0.010779627598822117,
    -0.040652163326740265,
    0.04172941669821739,
    0.010581186041235924,
    -0.02841966040432453,
    0.007533690892159939,
    0.014032650738954544,
    -0.013749162666499615,
    -0.018738549202680588,
    -0.02121906913816929,
    -0.01878107339143753,
    0.025967491790652275,
    0.00883064791560173,
    -0.011063114739954472,
    -0.008894432336091995,
    -0.0036268732510507107,
    0.024025598540902138,
    0.0030528102070093155,
    -0.008766863495111465,
    -0.005878830328583717,
    -0.025485562160611153,
    0.018483411520719528,
    0.023657064884901047,
    -0.027696767821907997,
    0.009014914743602276,
    0.025329643860459328,
    0.003844804596155882,
    -0.047002293169498444,
    0.02164429984986782,
    0.020170163363218307,
    -0.017519552260637283,
    -0.004053876735270023,
    0.04212630167603493,
    0.00212261569686234,
    -0.0054925777949392796,
    -0.01213328167796135,
    0.005528013687580824,
    0.022664856165647507,
    -0.021601777523756027,
    0.037930678576231,
    -0.02555643394589424,
    0.04530136659741402,
    -0.01593201979994774,
    -0.022664856165647507,
    0.013883819803595543,
    -0.0037739325780421495,
    -0.023401925340294838,
    -0.11515278369188309,
    -0.014479144476354122,
    0.019319700077176094,
    -0.0006192438886500895,
    -0.0001058650086633861,
    -0.024535877630114555,
    3.551903864718042e-05,
    0.03943316638469696,
    -0.012728606350719929,
    0.02911420725286007,
    0.013777511194348335,
    0.0037739325780421495,
    -0.01883777044713497,
    0.005354377441108227,
    -0.012367159128189087,
    -0.01091428380459547,
    -0.010127604939043522,
    -0.006215472240000963,
    -0.031070273369550705,
    0.02693134918808937,
    0.01079380139708519,
    -0.0016575183253735304,
    0.011814357712864876,
    0.012012799270451069,
    -0.02437995932996273,
    0.025967491790652275,
    -0.030956877395510674,
    0.01228211261332035,
    -0.012204153463244438,
    0.014316138811409473,
    -0.0102693485096097,
    -0.0385543517768383,
    -0.0014945127768442035,
    -0.020822186022996902,
    0.023855505511164665,
    0.0046740067191421986,
    -0.0032370772678405046,
    -0.036796730011701584,
    0.043572090566158295,
    -0.017094319686293602,
    -0.014004302211105824,
    -0.024039773270487785,
    -0.008093579672276974,
    -0.00849046278744936,
    -0.004815750755369663,
    0.005963876377791166,
    -6.0248098634474445e-06,
    0.030956877395510674,
    0.007236028555780649,
    -0.0046775504015386105,
    -0.028476359322667122,
    -0.010907196439802647,
    -0.015124078840017319,
    0.010063820518553257,
    0.027980254963040352,
    -0.021871091797947884,
    0.001397949643433094,
    0.0008858996443450451,
    0.001384661183692515,
    -0.015421741642057896,
    -0.014146045781672001,
    0.011807270348072052,
    -0.004397606011480093,
    0.013855470344424248,
    0.015591833740472794,
    0.005308310966938734,
    -0.006211928557604551,
    -0.009000740945339203,
    0.016031241044402122,
    -0.009681111201643944,
    -0.023005042225122452,
    0.025145376101136208,
    -0.014422446489334106,
    0.03478396311402321,
    -0.006573375314474106,
    0.003993635531514883,
    -0.01284908875823021,
    0.0022182927932590246,
    -4.958269710186869e-05,
    -0.004996473900973797,
    -0.027526674792170525,
    -0.008462113328278065,
    -0.003653450170531869,
    -0.0011844479013234377,
    -0.014656323939561844,
    0.024408306926488876,
    0.0189653392881155,
    -0.01380586065351963,
    0.029255950823426247,
    -0.03129706159234047,
    -0.0021633668802678585,
    0.018327493220567703,
    0.03639984503388405,
    -0.020297734066843987,
    -0.009822855703532696,
    -0.0009058323921635747,
    0.008773949928581715,
    0.0003113937273155898,
    -0.03379175812005997,
    0.014436621218919754,
    -0.03713691234588623,
    -0.015251648612320423,
    -0.06883086264133453,
    0.0032087285071611404,
    0.01598871685564518,
    -0.015407566912472248,
    0.014982335269451141,
    -0.0254997368901968,
    0.027342407032847404,
    -0.007767568342387676,
    0.019886676222085953,
    0.01828496903181076,
    -0.03285624831914902,
    0.011162335984408855,
    -0.017094319686293602,
    -0.04090730473399162,
    -0.002087179571390152,
    -0.01672578603029251,
    0.016031241044402122,
    -0.01593201979994774,
    0.03535094112157822,
    0.0015520962188020349,
    0.02153090573847294,
    -0.0035542293917387724,
    0.03279954940080643,
    0.00035148070310242474,
    -0.027101442217826843,
    -0.012934135273098946,
    -0.030616693198680878,
    0.021885264664888382,
    -0.002976622898131609,
    -0.02165847457945347,
    -0.009255879558622837,
    0.0007406121003441513,
    -0.018894467502832413,
    0.005467772949486971,
    0.02917090430855751,
    0.012806565500795841,
    0.027342407032847404,
    -0.006187123246490955,
    0.016017066314816475,
    0.004776771180331707,
    -0.02990797348320484,
    -0.029340997338294983,
    0.02663368731737137,
    -0.020808011293411255,
    -0.001234058290719986,
    -0.013784598559141159,
    -0.009369274601340294,
    0.02661951258778572,
    0.010758365504443645,
    -8.316383173223585e-05,
    0.025981664657592773,
    -0.0013261918211355805,
    -0.011871055699884892,
    0.0035329677630215883,
    -0.00036786982673220336,
    -0.025471387431025505,
    0.0035985244903713465,
    -0.008015620522201061,
    -0.010354395024478436,
    -0.01191357895731926,
    0.033309828490018845,
    0.0001460627099731937,
    0.0063855648040771484,
    0.005279961973428726,
    0.0008531213970854878,
    -0.005467772949486971,
    -0.032260920852422714,
    -0.013047530315816402,
    -0.01557765994220972,
    -0.01791643537580967,
    -0.013125489465892315,
    -0.01150960847735405,
    -0.0004518088244367391,
    0.014670498669147491,
    0.03311138600111008,
    0.017080144956707954,
    -0.023983076214790344,
    0.017448680475354195,
    -0.022168753668665886,
    0.014925637282431126,
    0.028476359322667122,
    -0.022608159109950066,
    0.004620852880179882,
    0.0007813635165803134,
    0.03129706159234047,
    -0.012168717570602894,
    -0.02351532131433487,
    -0.02034025639295578,
    -0.012530164793133736,
    0.03141045942902565,
    -0.007576214149594307,
    -0.002507096156477928,
    -0.004099943675100803,
    0.040397025644779205,
    0.017618771642446518,
    0.0032920031808316708,
    0.011800183914601803,
    -0.009900814853608608,
    0.00491497153416276,
    -0.00010093719174619764,
    -0.013635767623782158,
    -0.0239405520260334,
    0.017264412716031075,
    -0.008858996443450451,
    -0.01567688025534153,
    0.016215506941080093,
    0.0021881721913814545,
    -0.01965988613665104,
    0.015662705525755882,
    0.025726526975631714,
    0.016966750845313072,
    -0.01977328024804592,
    -0.018256619572639465,
    0.009418885223567486,
    -0.006987976375967264,
    0.022721555083990097,
    0.005893004592508078,
    -0.018809420987963676,
    -0.008695990778505802,
    -0.011219033040106297,
    0.007232484873384237,
    0.0037951942067593336,
    0.03302634134888649,
    -0.023033391684293747,
    0.009865378960967064,
    0.019050385802984238,
    0.02134663797914982,
    0.00827784650027752,
    -0.010063820518553257,
    -0.015549310483038425,
    -0.012175804935395718,
    -0.00638910848647356,
    -0.01897951401770115,
    -0.01754789985716343,
    -0.016272205859422684,
    -0.008299107663333416,
    -0.0024114188272506,
    0.00019279391563031822,
    -0.026605337858200073,
    0.09202016890048981,
    -0.01526582334190607,
    -0.014486230909824371,
    0.02450752817094326,
    7.790380186634138e-05,
    0.01685335487127304,
    -0.0034160290379077196,
    -0.01710849441587925,
    -0.008788124658167362,
    -0.02039695344865322,
    -0.01642812415957451,
    -0.014415359124541283,
    -0.035124149173498154,
    -0.019688233733177185,
    -0.00945432111620903,
    0.004372800700366497,
    -0.010396918281912804,
    0.004309015814214945,
    -0.00942597258836031,
    -0.0007073908927850425,
    0.04138923063874245,
    0.016626564785838127,
    0.0008052827906794846,
    -0.00789513811469078,
    -0.027569197118282318,
    0.011211946606636047,
    0.040397025644779205,
    0.029879624024033546,
    0.010907196439802647,
    -0.031013576313853264,
    0.008788124658167362,
    -0.018483411520719528,
    0.0049397763796150684,
    -0.017703818157315254,
    0.01082214992493391,
    -0.007519516162574291,
    -0.016215506941080093,
    -0.033876802772283554,
    0.007406121119856834,
    0.04311851039528847,
    0.007973097264766693,
    0.010900109075009823,
    -0.01692422665655613,
    -0.02493276074528694,
    0.027158139273524284,
    0.018880292773246765,
    0.014479144476354122,
    0.008908607065677643,
    -0.055960509926080704
  ]
}
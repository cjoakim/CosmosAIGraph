{
  "classifiers": [
    "development status :: 5 - production/stable",
    "license :: osi approved :: mit license",
    "programming language :: python",
    "programming language :: python :: 3 :: only",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9"
  ],
  "description": "microsoft azure monitor query client library for python\n# azure monitor query client library for python\n\nthe azure monitor query client library is used to execute read-only queries against [azure monitor][azure_monitor_overview]'s two data platforms:\n\n- [logs](https://learn.microsoft.com/azure/azure-monitor/logs/data-platform-logs) - collects and organizes log and performance data from monitored resources. data from different sources such as platform logs from azure services, log and performance data from virtual machines agents, and usage and performance data from apps can be consolidated into a single [azure log analytics workspace](https://learn.microsoft.com/azure/azure-monitor/logs/data-platform-logs#log-analytics-and-workspaces). the various data types can be analyzed together using the [kusto query language][kusto_query_language].\n- [metrics](https://learn.microsoft.com/azure/azure-monitor/essentials/data-platform-metrics) - collects numeric data from monitored resources into a time series database. metrics are numerical values that are collected at regular intervals and describe some aspect of a system at a particular time. metrics are lightweight and capable of supporting near real-time scenarios, making them useful for alerting and fast detection of issues.\n\n**resources:**\n\n- [source code][source]\n- [package (pypi)][package]\n- [package (conda)](https://anaconda.org/microsoft/azure-monitor-query/)\n- [api reference documentation][python-query-ref-docs]\n- [service documentation][azure_monitor_overview]\n- [samples][samples]\n- [change log][changelog]\n\n## getting started\n\n### prerequisites\n\n- python 3.7 or later\n- an [azure subscription][azure_subscription]\n- a [tokencredential](https://learn.microsoft.com/python/api/azure-core/azure.core.credentials.tokencredential?view=azure-python) implementation, such as an [azure identity library credential type](https://learn.microsoft.com/python/api/overview/azure/identity-readme?view=azure-python#credential-classes).\n- to query logs, you need an [azure log analytics workspace][azure_monitor_create_using_portal].\n- to query metrics, you need an azure resource of any kind (storage account, key vault, cosmos db, etc.).\n\n### install the package\n\ninstall the azure monitor query client library for python with [pip][pip]:\n\n```bash\npip install azure-monitor-query\n```\n\n### create the client\n\nan authenticated client is required to query logs or metrics. the library includes both synchronous and asynchronous forms of the clients. to authenticate, create an instance of a token credential. use that instance when creating a `logsqueryclient` or `metricsqueryclient`. the following examples use `defaultazurecredential` from the [azure-identity](https://pypi.org/project/azure-identity/) package.\n\n#### synchronous clients\n\nconsider the following example, which creates synchronous clients for both logs and metrics querying:\n\n```python\nfrom azure.identity import defaultazurecredential\nfrom azure.monitor.query import logsqueryclient, metricsqueryclient\n\ncredential = defaultazurecredential()\nlogs_client = logsqueryclient(credential)\nmetrics_client = metricsqueryclient(credential)\n```\n\n#### asynchronous clients\n\nthe asynchronous forms of the query client apis are found in the `.aio`-suffixed namespace. for example:\n\n```python\nfrom azure.identity.aio import defaultazurecredential\nfrom azure.monitor.query.aio import logsqueryclient, metricsqueryclient\n\ncredential = defaultazurecredential()\nasync_logs_client = logsqueryclient(credential)\nasync_metrics_client = metricsqueryclient(credential)\n```\n\n#### configure clients for non-public azure clouds\n\nby default, `logsqueryclient` and `metricsqueryclient` are configured to connect to the public azure cloud. these can be configured to connect to non-public azure clouds by passing in the correct `endpoint` argument: for example:\n\n```python\nlogs_client = logsqueryclient(credential, endpoint=\"https://api.loganalytics.azure.cn/v1\")\nmetrics_client = metricsqueryclient(credential, endpoint=\"https://management.chinacloudapi.cn\")\n```\n\n**note**: currently, `metricsqueryclient` uses the azure resource manager (arm) endpoint for querying metrics, so you will need the corresponding management endpoint for your cloud when using this client. this is subject to change in the future.\n\n### execute the query\n\nfor examples of logs and metrics queries, see the [examples](#examples) section.\n\n## key concepts\n\n### logs query rate limits and throttling\n\nthe log analytics service applies throttling when the request rate is too high. limits, such as the maximum number of rows returned, are also applied on the kusto queries. for more information, see [query api](https://learn.microsoft.com/azure/azure-monitor/service-limits#la-query-api).\n\nif you're executing a batch logs query, a throttled request will return a `logsqueryerror` object. that object's `code` value will be `throttlederror`.\n\n### metrics data structure\n\neach set of metric values is a time series with the following characteristics:\n\n- the time the value was collected\n- the resource associated with the value\n- a namespace that acts like a category for the metric\n- a metric name\n- the value itself\n- some metrics may have multiple dimensions as described in multi-dimensional metrics. custom metrics can have up to 10 dimensions.\n\n## examples\n\n- [logs query](#logs-query)\n  - [specify timespan](#specify-timespan)\n  - [handle logs query response](#handle-logs-query-response)\n- [batch logs query](#batch-logs-query)\n- [resource logs query](#resource-logs-query)\n- [advanced logs query scenarios](#advanced-logs-query-scenarios)\n  - [set logs query timeout](#set-logs-query-timeout)\n  - [query multiple workspaces](#query-multiple-workspaces)\n  - [include statistics](#include-statistics)\n  - [include visualization](#include-visualization)\n- [metrics query](#metrics-query)\n  - [handle metrics query response](#handle-metrics-query-response)\n  - [example of handling response](#example-of-handling-response)\n\n### logs query\n\nthis example shows how to query a log analytics workspace. to handle the response and view it in a tabular form, the [pandas](https://pypi.org/project/pandas/) library is used. see the [samples][samples] if you choose not to use pandas.\n\n#### specify timespan\n\nthe `timespan` parameter specifies the time duration for which to query the data. this value can be one of the following:\n\n- a `timedelta`\n- a `timedelta` and a start datetime\n- a start datetime/end datetime\n\nfor example:\n\n```python\nimport os\nimport pandas as pd\nfrom datetime import datetime, timezone\nfrom azure.monitor.query import logsqueryclient, logsquerystatus\nfrom azure.identity import defaultazurecredential\nfrom azure.core.exceptions import httpresponseerror\n\ncredential = defaultazurecredential()\nclient = logsqueryclient(credential)\n\nquery = \"\"\"apprequests | take 5\"\"\"\n\nstart_time=datetime(2021, 7, 2, tzinfo=timezone.utc)\nend_time=datetime(2021, 7, 4, tzinfo=timezone.utc)\n\ntry:\n    response = client.query_workspace(\n        workspace_id=os.environ['log_workspace_id'],\n        query=query,\n        timespan=(start_time, end_time)\n        )\n    if response.status == logsquerystatus.partial:\n        error = response.partial_error\n        data = response.partial_data\n        print(error)\n    elif response.status == logsquerystatus.success:\n        data = response.tables\n    for table in data:\n        df = pd.dataframe(data=table.rows, columns=table.columns)\n        print(df)\nexcept httpresponseerror as err:\n    print(\"something fatal happened\")\n    print(err)\n```\n\n#### handle logs query response\n\nthe `query_workspace` api returns either a `logsqueryresult` or a `logsquerypartialresult` object. the `batch_query` api returns a list that may contain `logsqueryresult`, `logsquerypartialresult`, and `logsqueryerror` objects. here's a hierarchy of the response:\n\n```\nlogsqueryresult\n|---statistics\n|---visualization\n|---tables (list of `logstable` objects)\n    |---name\n    |---rows\n    |---columns\n    |---columns_types\n\nlogsquerypartialresult\n|---statistics\n|---visualization\n|---partial_error (a `logsqueryerror` object)\n    |---code\n    |---message\n    |---details\n    |---status\n|---partial_data (list of `logstable` objects)\n    |---name\n    |---rows\n    |---columns\n    |---columns_types\n```\n\nthe `logsqueryresult` directly iterates over the table as a convenience. for example, to handle a logs query response with tables and display it using pandas:\n\n```python\nresponse = client.query(...)\nfor table in response:\n    df = pd.dataframe(table.rows, columns=[col.name for col in table.columns])\n```\n\na full sample can be found [here](https://github.com/azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-query/samples/sample_logs_single_query.py).\n\nin a similar fashion, to handle a batch logs query response:\n\n```python\nfor result in response:\n    if result.status == logsquerystatus.success:\n        for table in result:\n            df = pd.dataframe(table.rows, columns=table.columns)\n            print(df)\n```\n\na full sample can be found [here](https://github.com/azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-query/samples/sample_batch_query.py).\n\n### batch logs query\n\nthe following example demonstrates sending multiple queries at the same time using the batch query api. the queries can either be represented as a list of `logsbatchquery` objects or a dictionary. this example uses the former approach.\n\n```python\nimport os\nfrom datetime import timedelta, datetime, timezone\nimport pandas as pd\nfrom azure.monitor.query import logsqueryclient, logsbatchquery, logsquerystatus\nfrom azure.identity import defaultazurecredential\n\ncredential = defaultazurecredential()\nclient = logsqueryclient(credential)\nrequests = [\n    logsbatchquery(\n        query=\"azureactivity | summarize count()\",\n        timespan=timedelta(hours=1),\n        workspace_id=os.environ['log_workspace_id']\n    ),\n    logsbatchquery(\n        query= \"\"\"bad query\"\"\",\n        timespan=timedelta(days=1),\n        workspace_id=os.environ['log_workspace_id']\n    ),\n    logsbatchquery(\n        query= \"\"\"let weight = 92233720368547758;\n        range x from 1 to 3 step 1\n        | summarize percentilesw(x, weight * 100, 50)\"\"\",\n        workspace_id=os.environ['log_workspace_id'],\n        timespan=(datetime(2021, 6, 2, tzinfo=timezone.utc), datetime(2021, 6, 5, tzinfo=timezone.utc)), # (start, end)\n        include_statistics=true\n    ),\n]\nresults = client.query_batch(requests)\n\nfor res in results:\n    if res.status == logsquerystatus.failure:\n        # this will be a logsqueryerror\n        print(res.message)\n    elif res.status == logsquerystatus.partial:\n        ## this will be a logsquerypartialresult\n        print(res.partial_error)\n        for table in res.partial_data:\n            df = pd.dataframe(table.rows, columns=table.columns)\n            print(df)\n    elif res.status == logsquerystatus.success:\n        ## this will be a logsqueryresult\n        table = res.tables[0]\n        df = pd.dataframe(table.rows, columns=table.columns)\n        print(df)\n\n```\n\n### resource logs query\n\nthe following example demonstrates how to query logs directly from an azure resource without the use of a log analytics workspace. here, the `query_resource` method is used instead of `query_workspace`, and instead of a workspace id, an azure resource identifier is passed in (e.g. `/subscriptions/{subscription-id}/resourcegroups/{resource-group-name}/providers/{resource-provider}/{resource-type}/{resource-name}`).\n\n```python\nimport os\nimport pandas as pd\nfrom datetime import timedelta\nfrom azure.monitor.query import logsqueryclient, logsquerystatus\nfrom azure.core.exceptions import httpresponseerror\nfrom azure.identity import defaultazurecredential\n\ncredential  = defaultazurecredential()\nclient = logsqueryclient(credential)\n\nquery = \"\"\"azureactivity | take 5\"\"\"\n\ntry:\n    response = client.query_resource(os.environ['logs_resource_id'], query, timespan=timedelta(days=1))\n    if response.status == logsquerystatus.partial:\n        error = response.partial_error\n        data = response.partial_data\n        print(error)\n    elif response.status == logsquerystatus.success:\n        data = response.tables\n    for table in data:\n        df = pd.dataframe(data=table.rows, columns=table.columns)\n        print(df)\nexcept httpresponseerror as err:\n    print(\"something fatal happened\")\n    print(err)\n```\n\n### advanced logs query scenarios\n\n#### set logs query timeout\n\nthe following example shows setting a server timeout in seconds. a gateway timeout is raised if the query takes more time than the mentioned timeout. the default is 180 seconds and can be set up to 10 minutes (600 seconds).\n\n```python\nimport os\nfrom azure.monitor.query import logsqueryclient\nfrom azure.identity import defaultazurecredential\n\ncredential = defaultazurecredential()\nclient = logsqueryclient(credential)\n\nresponse = client.query_workspace(\n    os.environ['log_workspace_id'],\n    \"range x from 1 to 10000000000 step 1 | count\",\n    timespan=timedelta(days=1),\n    server_timeout=600 # sets the timeout to 10 minutes\n    )\n```\n\n#### query multiple workspaces\n\nthe same logs query can be executed across multiple log analytics workspaces. in addition to the kusto query, the following parameters are required:\n\n- `workspace_id` - the first (primary) workspace id.\n- `additional_workspaces` - a list of workspaces, excluding the workspace provided in the `workspace_id` parameter. the parameter's list items may consist of the following identifier formats:\n  - qualified workspace names\n  - workspace ids\n  - azure resource ids\n\nfor example, the following query executes in three workspaces:\n\n```python\nclient.query_workspace(\n    <workspace_id>,\n    query,\n    timespan=timedelta(days=1),\n    additional_workspaces=['<workspace 2>', '<workspace 3>']\n    )\n```\n\na full sample can be found [here](https://github.com/azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-query/samples/sample_log_query_multiple_workspaces.py).\n\n#### include statistics\n\nto get logs query execution statistics, such as cpu and memory consumption:\n\n1. set the `include_statistics` parameter to `true`.\n2. access the `statistics` field inside the `logsqueryresult` object.\n\nthe following example prints the query execution time:\n\n```python\nquery = \"azureactivity | top 10 by timegenerated\"\nresult = client.query_workspace(\n    <workspace_id>,\n    query,\n    timespan=timedelta(days=1),\n    include_statistics=true\n    )\n\nexecution_time = result.statistics.get(\"query\", {}).get(\"executiontime\")\nprint(f\"query execution time: {execution_time}\")\n```\n\nthe `statistics` field is a `dict` that corresponds to the raw json response, and its structure can vary by query. the statistics are found within the `query` property. for example:\n\n```python\n{\n  \"query\": {\n    \"executiontime\": 0.0156478,\n    \"resourceusage\": {...},\n    \"inputdatasetstatistics\": {...},\n    \"datasetstatistics\": [{...}]\n  }\n}\n```\n#### include visualization\n\nto get visualization data for logs queries using the [render operator](https://docs.microsoft.com/azure/data-explorer/kusto/query/renderoperator?pivots=azuremonitor):\n\n1. set the `include_visualization` property to `true`.\n1. access the `visualization` field inside the `logsqueryresult` object.\n\nfor example:\n\n```python\nquery = (\n    \"stormevents\"\n    \"| summarize event_count = count() by state\"\n    \"| where event_count > 10\"\n    \"| project state, event_count\"\n    \"| render columnchart\"\n)\nresult = client.query_workspace(\n    <workspace_id>,\n    query,\n    timespan=timedelta(days=1),\n    include_visualization=true\n    )\n\nprint(f\"visualization result: {result.visualization}\")\n```\n\nthe `visualization` field is a `dict` that corresponds to the raw json response, and its structure can vary by query. for example:\n\n```python\n{\n  \"visualization\": \"columnchart\",\n  \"title\": \"the chart title\",\n  \"accumulate\": false,\n  \"isquerysorted\": false,\n  \"kind\": none,\n  \"legend\": none,\n  \"series\": none,\n  \"ymin\": \"nan\",\n  \"ymax\": \"nan\",\n  \"xaxis\": none,\n  \"xcolumn\": none,\n  \"xtitle\": \"x axis title\",\n  \"yaxis\": none,\n  \"ycolumns\": none,\n  \"ysplit\": none,\n  \"ytitle\": none,\n  \"anomalycolumns\": none\n}\n```\n\n### metrics query\n\nthe following example gets metrics for an event grid subscription. the resource uri is that of an event grid topic.\n\nthe resource uri must be that of the resource for which metrics are being queried. it's normally of the format `/subscriptions/<id>/resourcegroups/<rg-name>/providers/<source>/topics/<resource-name>`.\n\nto find the resource uri:\n\n1. navigate to your resource's page in the azure portal.\n2. from the **overview** blade, select the **json view** link.\n3. in the resulting json, copy the value of the `id` property.\n\n**note**: the metrics are returned in the order of the metric_names sent.\n\n```python\nimport os\nfrom datetime import timedelta, datetime\nfrom azure.monitor.query import metricsqueryclient\nfrom azure.identity import defaultazurecredential\n\ncredential = defaultazurecredential()\nclient = metricsqueryclient(credential)\nstart_time = datetime(2021, 5, 25)\nduration = timedelta(days=1)\nmetrics_uri = os.environ['metrics_resource_uri']\nresponse = client.query_resource(\n    metrics_uri,\n    metric_names=[\"publishsuccesscount\"],\n    timespan=(start_time, duration)\n    )\n\nfor metric in response.metrics:\n    print(metric.name)\n    for time_series_element in metric.timeseries:\n        for metric_value in time_series_element.data:\n            print(metric_value.time_stamp)\n```\n\n#### handle metrics query response\n\nthe metrics query api returns a `metricsqueryresult` object. the `metricsqueryresult` object contains properties such as a list of `metric`-typed objects, `granularity`, `namespace`, and `timespan`. the `metric` objects list can be accessed using the `metrics` param. each `metric` object in this list contains a list of `timeserieselement` objects. each `timeserieselement` object contains `data` and `metadata_values` properties. in visual form, the object hierarchy of the response resembles the following structure:\n\n```\nmetricsqueryresult\n|---granularity\n|---timespan\n|---cost\n|---namespace\n|---resource_region\n|---metrics (list of `metric` objects)\n    |---id\n    |---type\n    |---name\n    |---unit\n    |---timeseries (list of `timeserieselement` objects)\n        |---metadata_values\n        |---data (list of data points represented by `metricvalue` objects)\n```\n\n#### example of handling response\n\n```python\nimport os\nfrom azure.monitor.query import metricsqueryclient, metricaggregationtype\nfrom azure.identity import defaultazurecredential\n\ncredential = defaultazurecredential()\nclient = metricsqueryclient(credential)\n\nmetrics_uri = os.environ['metrics_resource_uri']\nresponse = client.query_resource(\n    metrics_uri,\n    metric_names=[\"matchedeventcount\"],\n    aggregations=[metricaggregationtype.count]\n    )\n\nfor metric in response.metrics:\n    print(metric.name)\n    for time_series_element in metric.timeseries:\n        for metric_value in time_series_element.data:\n            if metric_value.count != 0:\n                print(\n                    \"there are {} matched events at {}\".format(\n                        metric_value.count,\n                        metric_value.time_stamp\n                    )\n                )\n```\n\n## troubleshooting\n\nsee our [troubleshooting guide][troubleshooting_guide] for details on how to diagnose various failure scenarios.\n\n## next steps\n\nto learn more about azure monitor, see the [azure monitor service documentation][azure_monitor_overview].\n\n### samples\n\nthe following code samples show common scenarios with the azure monitor query client library.\n\n#### logs query samples\n\n- [send a single query with logsqueryclient and handle the response as a table](https://github.com/azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-query/samples/sample_logs_single_query.py) ([async sample](https://github.com/azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-query/samples/async_samples/sample_log_query_async.py))\n- [send a single query with logsqueryclient and handle the response in key-value form](https://github.com/azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-query/samples/sample_logs_query_key_value_form.py)\n- [send a single query with logsqueryclient without pandas](https://github.com/azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-query/samples/sample_single_log_query_without_pandas.py)\n- [send a single query with logsqueryclient across multiple workspaces](https://github.com/azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-query/samples/sample_log_query_multiple_workspaces.py)\n- [send multiple queries with logsqueryclient](https://github.com/azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-query/samples/sample_batch_query.py)\n- [send a single query with logsqueryclient using server timeout](https://github.com/azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-query/samples/sample_server_timeout.py)\n\n#### metrics query samples\n\n- [send a query using metricsqueryclient](https://github.com/azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-query/samples/sample_metrics_query.py) ([async sample](https://github.com/azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-query/samples/async_samples/sample_metrics_query_async.py))\n- [get a list of metric namespaces](https://github.com/azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-query/samples/sample_metric_namespaces.py) ([async sample](https://github.com/azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-query/samples/async_samples/sample_metric_namespaces_async.py))\n- [get a list of metric definitions](https://github.com/azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-query/samples/sample_metric_definitions.py) ([async sample](https://github.com/azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-query/samples/async_samples/sample_metric_definitions_async.py))\n\n## contributing\n\nthis project welcomes contributions and suggestions. most contributions require you to agree to a contributor license agreement (cla) declaring that you have the right to, and actually do, grant us the rights to use your contribution. for details, visit [cla.microsoft.com][cla].\n\nwhen you submit a pull request, a cla-bot will automatically determine whether you need to provide a cla and decorate the pr appropriately (e.g., label, comment). simply follow the instructions provided by the bot. you will only need to do this once across all repositories using our cla.\n\nthis project has adopted the [microsoft open source code of conduct][code_of_conduct]. for more information see the [code of conduct faq][coc_faq] or contact [opencode@microsoft.com][coc_contact] with any additional questions or comments.\n\n<!-- links -->\n\n[azure_core_exceptions]: https://aka.ms/azsdk/python/core/docs#module-azure.core.exceptions\n[azure_core_ref_docs]: https://aka.ms/azsdk/python/core/docs\n[azure_monitor_create_using_portal]: https://learn.microsoft.com/azure/azure-monitor/logs/quick-create-workspace\n[azure_monitor_overview]: https://learn.microsoft.com/azure/azure-monitor/\n[azure_subscription]: https://azure.microsoft.com/free/python/\n[changelog]: https://github.com/azure/azure-sdk-for-python/tree/main/sdk/monitor/azure-monitor-query/changelog.md\n[kusto_query_language]: https://learn.microsoft.com/azure/data-explorer/kusto/query/\n[package]: https://aka.ms/azsdk-python-monitor-query-pypi\n[pip]: https://pypi.org/project/pip/\n[python_logging]: https://docs.python.org/3/library/logging.html\n[python-query-ref-docs]: https://aka.ms/azsdk/python/monitor-query/docs\n[samples]: https://github.com/azure/azure-sdk-for-python/tree/main/sdk/monitor/azure-monitor-query/samples\n[source]: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-query/\n[troubleshooting_guide]: https://github.com/azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-query/troubleshooting.md\n\n[cla]: https://cla.microsoft.com\n[code_of_conduct]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n[coc_contact]: mailto:opencode@microsoft.com\n\n\n# release history\n\n## 1.2.0 (2023-05-09)\n\n### features added\n\n- add the `query_resource` method to `logsqueryclient` to allow users to query azure resources directly without the context of a workspace. ([#29365](https://github.com/azure/azure-sdk-for-python/pull/29365))\n\n### bugs fixed\n\n- fixed an inconsistent keyword argument name in the `logstable` constructor, changing `column_types` to `columns_types`. note that this is a class that is typically only instantiated internally, and not by users. ([#29076](https://github.com/azure/azure-sdk-for-python/pull/29076))\n\n### other changes\n\n- improved client configuration logic for non-public azure clouds where credential scope will be determined based on the configured endpoint. ([#29602](https://github.com/azure/azure-sdk-for-python/pull/29602))\n\n## 1.1.1 (2023-02-13)\n\n### bugs fixed\n\n- fixed a bug where the incorrect key `time_stamp` (should be `timestamp`) was used in the creation of `metricvalue` objects (thanks @jamespic).  ([#28777](https://github.com/azure/azure-sdk-for-python/pull/28777))\n\n## 1.1.0 (2023-02-07)\n\n### bugs fixed\n\n* error details are now propagated inside the `logsqueryerror` object. ([#25137](https://github.com/azure/azure-sdk-for-python/issues/25137))\n\n### other changes\n\n* python 3.6 is no longer supported. please use python version 3.7 or later. for more details, see [azure sdk for python version support policy](https://github.com/azure/azure-sdk-for-python/wiki/azure-sdks-python-version-support-policy).\n* removed `msrest` dependency.\n* bumped minimum dependency on `azure-core` to `>=1.24.0`.\n* added requirement for `isodate>=0.6.0` (`isodate` was required by `msrest`).\n* added requirement for `typing-extensions>=4.0.1`.\n\n## 1.0.3 (2022-07-07)\n\n### bugs fixed\n\n- fixed a bug where `query_resource` in metrics client is throwing an error with unexpected `metric_namespace` argument.\n\n## 1.0.2 (2022-05-06)\n\n- this version and all future versions will require python 3.6+. python 2.7 is no longer supported.\n\n### bugs fixed\n\n- fixed a bug where having a none value in datetime throws\n\n## 1.0.1 (2021-11-09)\n\n### bugs fixed\n\n- fixed a bug where metadata values in timestamp don't show up sometimes.\n\n## 1.0.0 (2021-10-06)\n\n### features added\n\n- added `logsquerypartialresult` and `logsqueryerror` to handle errors.\n- added `status` attribute to `logsqueryresult`.\n- added `logsquerystatus` enum to describe the status of a result.\n- added a new `logstablerow` type that represents a single row in a table.\n- items in `metrics` list in `metricsqueryresult` can now be accessed by metric names.\n\n### breaking changes\n\n- `logsqueryresult` now iterates over the tables directly as a convenience.\n- `query` api in logs is renamed to `query_workspace`\n- `query` api in metrics is renamed to `query_resource`\n- `query_workspace` api now returns a union of `logsquerypartialresult` and `logsqueryresult`.\n- `query_batch` api now returns a union of `logsquerypartialresult`, `logsqueryerror` and `logsqueryresult`.\n- `metric_namespace` is renamed to `namespace` and is a keyword-only argument in `list_metric_definitions` api.\n- `metricsresult` is renamed to `metricsqueryresult`.\n\n## 1.0.0b4 (2021-09-09)\n\n### features added\n\n- added additional `display_description` attribute to the `metric` type.\n- added a `metricclass` enum to provide the class of a metric.\n- added a `metric_class` attribute to the `metricdefinition` type.\n- added a `metricnamespaceclassification` enum to support the `namespace_classification` attribute on `metricnamespace` type.\n- added a `metricunit` enum to describe the unit of the metric.\n\n### breaking changes\n\n- rename `batch_query` to `query_batch`.\n- rename `logsbatchqueryrequest` to `logsbatchquery`.\n- `include_render` is now renamed to `include_visualization` in the query api.\n- `logsqueryresult` now returns `visualization` instead of `render`.\n- `start_time`, `duration` and `end_time` are now replaced with a single param called `timespan`\n- `resourceregion` is renamed to `resource_region` in the metricresult type.\n- `top` is renamed to `max_results` in the metric's `query` api.\n- `metric_namespace_name` is renamed to `fully_qualified_namespace`\n- `is_dimension_required` is renamed to `dimension_required`\n- `interval`  and `time_grain` are renamed to `granularity`\n- `orderby` is renamed to `order_by`\n- `logsqueryresult` now returns `datetime` objects for a time values.\n- `logsbatchquery` doesn't accept a `request_id` anymore.\n- `metricsmetadatavalues` is removed. a dictionary is used instead.\n- `time_stamp` is renamed to `timestamp` in `metricvalue` type.\n- `aggregationtype` is renamed to `metricaggregationtype`.\n- removed `logsbatchresulterror` type.\n- `logsqueryresulttable` is named to `logstable`\n- `logstablecolumn` is now removed. column labels are strings instead.\n- `start_time` in `list_metric_namespaces` api is now a datetime.\n- the order of params in `logsbatchquery` is changed. also, `headers` is no longer accepted.\n- `timespan` is now a required keyword-only argument in logs apis.\n- batch api now returns a list of `logsqueryresult` objects.\n\n### bugs fixed\n\n- `include_statistics` and `include_visualization` args can now work together.\n\n## 1.0.0b3 (2021-08-09)\n\n### features added\n\n- added enum `aggregationtype` which can be used to specify aggregations in the query api.\n- added `logsbatchqueryresult` model that is returned for a logs batch query.\n- added `error` attribute to `logsqueryresult`.\n\n### breaking changes\n\n- `aggregation` param in the query api is renamed to `aggregations`\n- `batch_query` api now returns a list of responses.\n- `logsbatchresults` model is now removed.\n- `logsqueryrequest` is renamed to `logsbatchqueryrequest`\n- `logsqueryresults` is now renamed to `logsqueryresult`\n- `logsbatchqueryresult` now has 4 additional attributes - `tables`, `error`, `statistics` and `render` instead of `body` attribute.\n\n## 1.0.0b2 (2021-07-06)\n\n### breaking changes\n\n- `workspaces`, `workspace_ids`, `qualified_names` and `azure_resource_ids` are now merged into a single `additional_workspaces` list in the query api.\n- the `logqueryrequest` object now takes in a `workspace_id` and `additional_workspaces` instead of `workspace`.\n- `aggregation` param is now a list instead of a string in the `query` method.\n- `duration` must now be provided as a timedelta instead of a string.\n\n\n## 1.0.0b1 (2021-06-10)\n\n  **features**\n  - version (1.0.0b1) is the first preview of our efforts to create a user-friendly and pythonic client library for azure monitor query.\n  for more information about this, and preview releases of other azure sdk libraries, please visit https://azure.github.io/azure-sdk/releases/latest/python.html.\n  - added `~azure.monitor.query.logsqueryclient` to query log analytics along with `~azure.monitor.query.aio.logsqueryclient`.\n  - implements the `~azure.monitor.query.metricsqueryclient` for querying metrics, listing namespaces and metric definitions along with `~azure.monitor.query.aio.metricsqueryclient`.\n",
  "docs_url": null,
  "keywords": "",
  "license": "mit license",
  "name": "azure-monitor-query",
  "package_url": "https://pypi.org/project/azure-monitor-query/",
  "project_url": "https://pypi.org/project/azure-monitor-query/",
  "project_urls": {
    "Homepage": "https://github.com/Azure/azure-sdk-for-python"
  },
  "release_url": "https://pypi.org/project/azure-monitor-query/1.2.0/",
  "requires_dist": [],
  "requires_python": ">=3.7",
  "summary": "microsoft azure monitor query client library for python",
  "version": "1.2.0",
  "releases": [],
  "developers": [
    "azpysdkhelp@microsoft.com",
    "microsoft_corporation"
  ],
  "kwds": "azure_monitor_overview azuremonitor azure azure_monitor_create_using_portal azure_subscription",
  "license_kwds": "mit license",
  "libtype": "pypi",
  "id": "pypi_azure_monitor_query",
  "homepage": "https://github.com/azure/azure-sdk-for-python",
  "release_count": 13,
  "dependency_ids": [],
  "documentation_summary": "The HTML text is a PyPI (Python Package Index) page for the `azure-monitor-query` package, version 1.2.1, released on January 31, 2024. This Microsoft Azure Monitor Query Client Library for Python allows users to execute read-only queries against Azure Monitor's data platforms, including Logs and Metrics. It requires Python version 3.7 or later and is licensed under the MIT License. The package supports both synchronous and asynchronous client forms for querying Logs or Metrics, with authentication through Azure Identity library credentials. It also includes features for handling logs query responses, executing batch logs queries, querying metrics, and troubleshooting. The package has undergone several updates, with the latest version fixing certain keyword arguments issues and making internal updates to generated code.",
  "embedding": [
    -0.010464776307344437,
    0.004800672642886639,
    -0.005715908948332071,
    -0.04246695712208748,
    0.0006704536499455571,
    0.04371029883623123,
    -0.001239022589288652,
    -0.028513923287391663,
    -0.031304530799388885,
    -0.027284398674964905,
    0.011915339156985283,
    -0.00031623136601410806,
    -0.016425898298621178,
    0.025419389829039574,
    -0.027021916583180428,
    -0.01907835714519024,
    0.014491815119981766,
    -0.01789027638733387,
    0.01142491027712822,
    -0.02812710776925087,
    0.011887709610164165,
    -0.006427375599741936,
    -0.004520921502262354,
    -0.009021120145916939,
    -0.02736728824675083,
    -0.0065344409085810184,
    0.011970598250627518,
    -0.02345767617225647,
    0.004683246370404959,
    0.013766533695161343,
    0.025598982349038124,
    -0.017572535201907158,
    -0.041002579033374786,
    -0.002156849019229412,
    -0.012806398794054985,
    -0.003165335627272725,
    0.007736335974186659,
    0.01860865019261837,
    0.04766135662794113,
    0.0016292930813506246,
    0.018511947244405746,
    0.017033753916621208,
    -0.0005642517353408039,
    0.021868964657187462,
    -0.026717988774180412,
    0.002324354602023959,
    0.017724499106407166,
    -0.02572331763803959,
    -0.023830678313970566,
    -0.011832449585199356,
    0.02287745103240013,
    -0.008910601027309895,
    -0.025336500257253647,
    0.001275286660529673,
    0.012771861627697945,
    -0.012350508011877537,
    -0.0004887015675194561,
    0.04335111007094383,
    -0.013877052813768387,
    -0.008060986176133156,
    0.014947705902159214,
    -0.013068881817162037,
    -0.0047523207031190395,
    -0.022476818412542343,
    -0.0026213745586574078,
    0.00593694718554616,
    -0.029591485857963562,
    -0.0004576180945150554,
    0.014326036907732487,
    -0.012122562155127525,
    0.032603129744529724,
    0.02428656816482544,
    -0.007069767918437719,
    -0.003410549834370613,
    0.03865405172109604,
    -0.02704954706132412,
    -0.012440304271876812,
    0.014629963785409927,
    -0.01748964563012123,
    -0.0019427182851359248,
    0.009780938737094402,
    -0.02148214727640152,
    -0.04724691063165665,
    0.03694100305438042,
    0.01946517452597618,
    0.03677522391080856,
    0.004510560072958469,
    0.004431124776601791,
    -0.0041617341339588165,
    -0.021026255562901497,
    0.0222695954144001,
    -0.003909612540155649,
    0.030558526515960693,
    0.020998626947402954,
    -0.010174663737416267,
    0.04509178549051285,
    -0.021495962515473366,
    0.01950661838054657,
    0.012226173654198647,
    -0.008772452361881733,
    -0.007301167119294405,
    0.027035731822252274,
    -0.024272754788398743,
    -0.014450370334088802,
    -0.05257945507764816,
    0.004165187943726778,
    -0.01677127182483673,
    -0.02435564436018467,
    0.037300191819667816,
    -0.0012994626304134727,
    -0.02359582483768463,
    0.032382093369960785,
    0.001435884740203619,
    -0.022946525365114212,
    -0.011286761611700058,
    0.012440304271876812,
    0.022905079647898674,
    0.0037196578923612833,
    0.004116836003959179,
    -0.009863828308880329,
    -0.009850013069808483,
    -0.007529112510383129,
    -0.016218675300478935,
    0.0023502574767917395,
    0.015224004164338112,
    0.003429545322433114,
    0.0018201111815869808,
    -0.018056055530905724,
    0.0034640824887901545,
    -0.0224491897970438,
    -0.011611411347985268,
    0.0053359996527433395,
    0.017558719962835312,
    -0.007508390583097935,
    -0.005014803726226091,
    0.003940696362406015,
    -0.02018354833126068,
    -0.0042618922889232635,
    -0.019921064376831055,
    -0.017227161675691605,
    -0.023582009598612785,
    0.04067102447152138,
    0.004897376988083124,
    0.001126776565797627,
    -0.019700026139616966,
    0.04476023092865944,
    0.0010283455485478044,
    0.01089994516223669,
    -0.018277093768119812,
    -0.012101840227842331,
    0.004855932202190161,
    -0.023250453174114227,
    -0.027215324342250824,
    -0.005688279401510954,
    0.010506220161914825,
    -0.00993290264159441,
    -0.022532079368829727,
    -0.00029550903127528727,
    -0.02231104113161564,
    -0.015182559378445148,
    0.005501778330653906,
    0.039096128195524216,
    -0.020487476140260696,
    -0.0088898791000247,
    -0.0018632827559486032,
    0.02202092856168747,
    0.00940793752670288,
    -0.015472671948373318,
    -0.03395698964595795,
    0.009601345285773277,
    -0.0014298406895250082,
    0.002939116908237338,
    0.0032447713892906904,
    -0.010229922831058502,
    0.016688382253050804,
    0.022656412795186043,
    0.007536020129919052,
    -0.0024141513276845217,
    -0.028513923287391663,
    0.0012977358419448137,
    0.029011260718107224,
    0.005664103198796511,
    -0.01125913206487894,
    0.030448008328676224,
    -0.0023139934055507183,
    -0.014491815119981766,
    0.008827712386846542,
    0.018691539764404297,
    0.016867974773049355,
    0.007062860298901796,
    0.016909420490264893,
    0.04616934806108475,
    -0.012523193843662739,
    -0.03804619610309601,
    -0.5707205533981323,
    -0.024507606402039528,
    -0.007163018453866243,
    -0.0032067804131656885,
    0.005049340892583132,
    -0.0029805616941303015,
    0.02015591785311699,
    0.0112245948985219,
    -0.006023290101438761,
    0.01731005124747753,
    -0.01214328408241272,
    0.04329585283994675,
    -0.013220845721662045,
    0.0007308938074856997,
    -0.0001827234518714249,
    0.0049699051305651665,
    0.008910601027309895,
    -0.022103816270828247,
    -0.0006268504657782614,
    -0.019354654476046562,
    -0.01961713843047619,
    0.0308900848031044,
    0.0007032640278339386,
    0.020570365712046623,
    -0.018042240291833878,
    -0.0006138989701867104,
    -0.014933891594409943,
    0.005032072309404612,
    0.01885731890797615,
    0.024935869500041008,
    -0.03138741850852966,
    0.02751925215125084,
    0.02123347856104374,
    0.006689858622848988,
    0.045533861964941025,
    -0.01226761844009161,
    -0.017517274245619774,
    0.041941992938518524,
    -0.012495564296841621,
    0.02518453635275364,
    -0.017047569155693054,
    -0.0022293771617114544,
    0.014408925548195839,
    0.0036333149764686823,
    0.005688279401510954,
    0.01508585549890995,
    0.021205849945545197,
    0.009262881241738796,
    -0.008896786719560623,
    5.310096821631305e-05,
    0.023899752646684647,
    -0.0006648413836956024,
    0.01746201515197754,
    -0.02278074622154236,
    0.046031199395656586,
    0.012675157748162746,
    0.00457963440567255,
    -0.01874680072069168,
    -0.007049045525491238,
    0.0003209802380297333,
    -0.0240655317902565,
    -0.010008884593844414,
    -0.008019541390240192,
    -0.03718967363238335,
    -0.043986596167087555,
    0.02126110903918743,
    -0.0029149409383535385,
    -0.0186777263879776,
    0.007259722333401442,
    -0.02033551223576069,
    0.04522993415594101,
    -0.0031981461215764284,
    0.028182366862893105,
    -0.033459652215242386,
    0.03495166078209877,
    0.022241966798901558,
    0.03235446289181709,
    0.006834914907813072,
    0.012371229939162731,
    0.023512935265898705,
    0.02305704355239868,
    0.008420173078775406,
    -0.01503059547394514,
    -0.032492611557245255,
    0.059790823608636856,
    -0.00576426088809967,
    -0.01811131462454796,
    -0.0013719908893108368,
    0.01598382368683815,
    -0.005284193903207779,
    -0.005346360616385937,
    0.010430239140987396,
    -0.006261596921831369,
    -0.0657588541507721,
    0.005677917972207069,
    0.026317358016967773,
    -0.011770282872021198,
    0.005857511423528194,
    -0.019478989765048027,
    -0.014395111240446568,
    -0.022034741938114166,
    -0.00909019447863102,
    0.017379125580191612,
    -0.011279853992164135,
    0.026717988774180412,
    -0.014920076355338097,
    0.005525954067707062,
    -0.0011932607740163803,
    -0.012488656677305698,
    -0.022545892745256424,
    -0.009269787929952145,
    -0.03028222918510437,
    -0.006261596921831369,
    0.0017303144559264183,
    0.012046580202877522,
    -0.027602141723036766,
    0.019092172384262085,
    -0.003957964945584536,
    0.010071051307022572,
    0.025944355875253677,
    0.0032240489963442087,
    -0.0024279661010950804,
    0.0032015996985137463,
    0.019175061956048012,
    0.02197948284447193,
    0.0014453823678195477,
    0.003930334933102131,
    -0.007349519059062004,
    -0.004182456526905298,
    0.0038508994039148092,
    0.01242648996412754,
    -0.00028320515411905944,
    0.023430045694112778,
    -0.0024745913688093424,
    0.03964872285723686,
    -0.0016275661764666438,
    0.02255970798432827,
    -0.018277093768119812,
    -0.004051215015351772,
    -0.010948296636343002,
    -0.012219266034662724,
    -0.00023226276971399784,
    0.005619204603135586,
    -0.01824946328997612,
    0.0003427818592172116,
    -0.03912375494837761,
    -0.014111905358731747,
    0.005049340892583132,
    -0.015900934115052223,
    -0.0177797582000494,
    -0.030420377850532532,
    -0.01431222166866064,
    -0.019382284954190254,
    0.02485297992825508,
    -0.01223308127373457,
    -0.00966351293027401,
    0.006783108692616224,
    -0.019548064097762108,
    -0.004755774512887001,
    0.0030669046100229025,
    -0.0021879326086491346,
    0.001177718979306519,
    -0.004662523977458477,
    0.012150191701948643,
    -0.018843503668904305,
    -0.02080521732568741,
    -0.01384942326694727,
    0.03221631422638893,
    -0.024507606402039528,
    -0.02554372325539589,
    0.01598382368683815,
    -0.01116933487355709,
    -0.0003116983571089804,
    -0.000638506724499166,
    0.04343400150537491,
    0.008185319602489471,
    -0.03224394470453262,
    0.020819032564759254,
    0.006890174467116594,
    -0.002947751199826598,
    0.008758637122809887,
    0.04227355122566223,
    -0.02482534945011139,
    -0.018581021577119827,
    0.04539571329951286,
    0.021565036848187447,
    0.003674759529531002,
    0.028928371146321297,
    -0.019769102334976196,
    8.261949551524594e-05,
    -0.006548255681991577,
    0.01713045872747898,
    -0.03456484526395798,
    0.004413856193423271,
    -0.013676736503839493,
    0.012578453868627548,
    -0.005867872852832079,
    0.010520035400986671,
    0.004793765489012003,
    0.010457868687808514,
    0.03779752552509308,
    0.022048557177186012,
    -0.00917999166995287,
    0.00031774237868376076,
    -0.02704954706132412,
    -0.017089013010263443,
    0.026013430207967758,
    -0.030226970091462135,
    0.021136775612831116,
    0.010747981257736683,
    0.034785881638526917,
    -0.006489542778581381,
    -0.0013262290740385652,
    -0.013455698266625404,
    -0.006434283219277859,
    -0.001300326082855463,
    -0.005774622317403555,
    0.013013622723519802,
    -0.04550623521208763,
    -0.011107168160378933,
    0.013193216174840927,
    0.012799491174519062,
    0.004033946432173252,
    -0.030669046565890312,
    -0.009559900499880314,
    0.0042687999084591866,
    0.021868964657187462,
    0.03185712546110153,
    0.008040263317525387,
    0.017033753916621208,
    0.011445633135735989,
    0.019769102334976196,
    0.031415048986673355,
    -0.009401029907166958,
    0.023692529648542404,
    0.010533850640058517,
    0.049484919756650925,
    -0.01731005124747753,
    0.008302746340632439,
    -0.030309859663248062,
    -0.01800079643726349,
    0.0021464878227561712,
    0.01964476704597473,
    -0.020321696996688843,
    0.01784883253276348,
    -0.011804820038378239,
    -0.004500199109315872,
    0.02148214727640152,
    0.00514604477211833,
    -0.005463787354528904,
    -0.011210779659450054,
    0.01269587967544794,
    0.002186205703765154,
    -0.00047143298434093595,
    0.004531282465904951,
    -0.031138751655817032,
    -0.004061576444655657,
    0.007183740381151438,
    0.023319527506828308,
    -0.0039821406826376915,
    0.002383067738264799,
    0.009912180714309216,
    0.022766930982470512,
    -0.0043482352048158646,
    0.057027846574783325,
    -0.022297225892543793,
    -0.0007861533667892218,
    -0.01820801943540573,
    -0.001296008937060833,
    -0.010098681785166264,
    -0.03086245432496071,
    -0.03495166078209877,
    -0.01577659882605076,
    -0.028679702430963516,
    0.017033753916621208,
    0.0037611026782542467,
    0.023001784458756447,
    0.03149794042110443,
    0.005415435414761305,
    0.017365312203764915,
    -0.00677965534850955,
    -0.010112496092915535,
    0.018525762483477592,
    -0.0032482249662280083,
    0.009780938737094402,
    -0.03050326742231846,
    -0.037410710006952286,
    0.013151771388947964,
    -0.005947308149188757,
    0.02812710776925087,
    0.0037990936543792486,
    -0.00016297248657792807,
    -0.012454119510948658,
    -0.007466945797204971,
    -0.028513923287391663,
    -0.012309063225984573,
    0.01327610481530428,
    0.0012260711519047618,
    -0.007142296060919762,
    0.002478045178577304,
    0.007529112510383129,
    0.00921452883630991,
    -0.02848629467189312,
    0.03152557089924812,
    0.02410697564482689,
    -0.0023606186732649803,
    0.0036125925835222006,
    -0.021855149418115616,
    -0.010637462139129639,
    -0.039068497717380524,
    0.011846264824271202,
    -5.590711589320563e-05,
    -0.005474148318171501,
    0.004362049978226423,
    0.02213144674897194,
    0.006282319314777851,
    0.021578852087259293,
    -0.011114075779914856,
    0.024328013882040977,
    0.007763965986669064,
    -0.007653446868062019,
    -0.02179989032447338,
    -0.006513718515634537,
    0.005491416901350021,
    0.02859681285917759,
    0.012771861627697945,
    -0.00029572489438578486,
    0.008040263317525387,
    -0.0413065068423748,
    -0.015210188925266266,
    -0.03862642124295235,
    0.0073978714644908905,
    0.019520433619618416,
    0.010720351710915565,
    -0.028569184243679047,
    -0.001799388905055821,
    -0.00941484421491623,
    0.014920076355338097,
    0.026234468445181847,
    0.0009549539536237717,
    -0.014588518999516964,
    0.014588518999516964,
    0.015072040259838104,
    0.014215517789125443,
    0.026386432349681854,
    0.016826530918478966,
    0.012481749057769775,
    0.006157985422760248,
    0.026676544919610023,
    0.021316368132829666,
    0.0323268324136734,
    0.001049067941494286,
    -0.008606674149632454,
    -0.034067507833242416,
    -0.00880008190870285,
    -0.01045096106827259,
    -0.007439315784722567,
    0.0323268324136734,
    -0.015514116734266281,
    0.07454512268304825,
    0.009380307048559189,
    -0.006689858622848988,
    0.003351836698129773,
    0.006068188697099686,
    0.00751529773697257,
    0.008385635912418365,
    -0.015182559378445148,
    -0.0031325253657996655,
    0.0081715052947402,
    -0.021454516798257828,
    -0.031055863946676254,
    0.01113479770720005,
    0.0017648516222834587,
    0.010623646900057793,
    0.028182366862893105,
    -0.002046329900622368,
    -0.0668087899684906,
    -0.019023098051548004,
    0.016660751774907112,
    0.009152362123131752,
    -0.019119800999760628,
    -0.022297225892543793,
    -0.013200122863054276,
    -0.026358801871538162,
    -0.01045096106827259,
    -0.01950661838054657,
    -0.0011077811941504478,
    0.01907835714519024,
    -0.018705355003476143,
    -0.02090192213654518,
    -0.005878233816474676,
    0.011811727657914162,
    -0.020017769187688828,
    0.03003356233239174,
    0.005494870711117983,
    -0.0019133617170155048,
    -0.017448199912905693,
    0.0009333682246506214,
    0.03569766506552696,
    0.017434386536478996,
    0.0010542484233155847,
    0.011991321109235287,
    0.010713444091379642,
    0.008385635912418365,
    0.020266437903046608,
    -0.027574511244893074,
    -0.008516876958310604,
    -0.04978884756565094,
    0.005947308149188757,
    -0.017586350440979004,
    0.03257549926638603,
    0.026842322200536728,
    0.0064101070165634155,
    0.024479977786540985,
    -0.028431035578250885,
    0.012516286224126816,
    0.005892048589885235,
    -0.007819225080311298,
    0.033349134027957916,
    0.011272946372628212,
    -0.008337283506989479,
    -0.009166176430881023,
    0.0075774649158120155,
    0.0007464355439879,
    -0.02349912002682686,
    -0.02341623045504093,
    0.0053359996527433395,
    -0.0060060215182602406,
    0.003296577138826251,
    0.0021896592807024717,
    0.04078154265880585,
    0.004918099381029606,
    -0.017047569155693054,
    0.007964281365275383,
    0.018954023718833923,
    -0.010747981257736683,
    -0.02669035829603672,
    -0.017144273966550827,
    0.009559900499880314,
    -0.03890271857380867,
    -0.005411981604993343,
    0.01871917024254799,
    -0.007563650142401457,
    -0.023872122168540955,
    0.03467536345124245,
    -0.019548064097762108,
    0.018221834674477577,
    -0.010167756117880344,
    -0.0006160575430840254,
    0.037769898772239685,
    0.005985299125313759,
    0.01057529542595148,
    -0.043489258736371994,
    0.0012640620116144419,
    0.007508390583097935,
    -0.011321298778057098,
    -0.007770873140543699,
    -0.03790804743766785,
    -0.01158378180116415,
    0.01275113970041275,
    -0.007052499335259199,
    0.01115552056580782,
    0.00621324498206377,
    0.004192817956209183,
    -0.027353473007678986,
    0.0035348839592188597,
    -0.011369651183485985,
    0.004116836003959179,
    -0.0031411596573889256,
    -0.024521421641111374,
    0.0007921973592601717,
    0.005505232140421867,
    0.0038957977667450905,
    0.007915929891169071,
    -0.004113382194191217,
    0.01065127644687891,
    -0.013773441314697266,
    -0.0441800057888031,
    -0.02349912002682686,
    0.008309653960168362,
    -0.007404778618365526,
    -0.010823963209986687,
    0.02141307294368744,
    0.018304724246263504,
    0.037051524966955185,
    0.007342611905187368,
    0.023803047835826874,
    0.008696470409631729,
    -0.0013288193149492145,
    -0.015652265399694443,
    -0.009635882452130318,
    0.014056646265089512,
    0.03348728269338608,
    -0.028292885050177574,
    0.0070317769423127174,
    -0.006886720657348633,
    5.833551404066384e-05,
    -0.03998027741909027,
    -0.03318335488438606,
    0.029094148427248,
    0.007929744198918343,
    0.021744629368185997,
    -0.02267022803425789,
    -0.02747780829668045,
    0.00021952716633677483,
    0.03243735060095787,
    -0.005947308149188757,
    0.015196374617516994,
    -0.036664705723524094,
    -0.034178026020526886,
    0.015748970210552216,
    -0.024783905595541,
    0.01537596806883812,
    -0.00038530578603968024,
    -0.006600061431527138,
    -0.017503460869193077,
    0.02446616254746914,
    0.015306893736124039,
    0.008164597675204277,
    -0.014001386240124702,
    0.029094148427248,
    -0.036084480583667755,
    -0.00238479464314878,
    -0.022891266271471977,
    0.017765942960977554,
    0.014657593332231045,
    0.014699038118124008,
    0.016840346157550812,
    0.025985799729824066,
    0.030226970091462135,
    0.0016733279917389154,
    -0.0184981320053339,
    0.0009186898823827505,
    -0.0348411425948143,
    -0.02352675050497055,
    -0.00736333429813385,
    0.002581656677648425,
    0.0049699051305651665,
    -0.007142296060919762,
    0.01298599224537611,
    0.029480965808033943,
    0.018871134147047997,
    -0.016508787870407104,
    0.006717488169670105,
    0.014740482904016972,
    -0.017406756058335304,
    0.05686207115650177,
    0.014616149477660656,
    -0.0036056851968169212,
    0.02823762595653534,
    -0.0035400644410401583,
    -0.006023290101438761,
    -0.013690551742911339,
    -0.03718967363238335,
    -0.013621477410197258,
    0.013545495457947254,
    0.03724493086338043,
    -0.0206532534211874,
    -0.020321696996688843,
    0.010520035400986671,
    -0.01623249053955078,
    -0.013994479551911354,
    -0.017544904723763466,
    0.023333342745900154,
    0.018056055530905724,
    0.003940696362406015,
    -0.03768700733780861,
    -0.03152557089924812,
    0.0054603335447609425,
    0.037051524966955185,
    -0.03307283669710159,
    0.010796332731842995,
    0.018014611676335335,
    -0.01979673095047474,
    -0.013649106957018375,
    0.04511941596865654,
    0.011632134206593037,
    0.015348337590694427,
    0.013061974197626114,
    -0.007107758894562721,
    -0.019409913569688797,
    -0.0036333149764686823,
    -0.03138741850852966,
    -0.00527037912979722,
    0.0016551959561184049,
    0.008192227222025394,
    -0.035117439925670624,
    0.0015317254001274705,
    0.0675271600484848,
    -0.01298599224537611,
    -0.018332352861762047,
    -0.004365503787994385,
    -0.012157099321484566,
    0.02619302272796631,
    -0.009670419618487358,
    0.005660649389028549,
    -0.019561877474188805,
    -0.025557538494467735,
    0.019271764904260635,
    -0.018995467573404312,
    -0.00820604246109724,
    0.010969019494950771,
    0.01659167744219303,
    0.008164597675204277,
    0.019423728808760643,
    -0.02327808178961277,
    -0.008634303696453571,
    -0.008737915195524693,
    0.009767124429345131,
    -0.012523193843662739,
    0.00653789471834898,
    0.018083686009049416,
    -0.0006285773124545813,
    -0.02115059085190296,
    -0.013338272459805012,
    -0.004862839821726084,
    -0.028431035578250885,
    0.019230321049690247,
    0.010623646900057793,
    -0.005380897782742977,
    -0.01508585549890995,
    0.053076792508363724,
    0.002769884653389454,
    0.010658184066414833,
    -0.01699231006205082,
    0.018083686009049416,
    -0.04009079933166504,
    0.0176001638174057,
    -0.022601153701543808,
    0.004144465550780296,
    0.01932702586054802,
    0.03818434476852417,
    -0.049125734716653824,
    -0.014201702550053596,
    0.004738505929708481,
    0.02981252409517765,
    0.009767124429345131,
    -0.018995467573404312,
    0.0004943138919770718,
    0.017337681725621223,
    -0.003757648868486285,
    -0.013379717245697975,
    0.0022656412329524755,
    0.0224491897970438,
    -0.0006946297362446785,
    -0.006209791172295809,
    0.0016785085899755359,
    -0.0005422342801466584,
    0.026165394112467766,
    -0.011936061084270477,
    0.01802842505276203,
    -0.007833040319383144,
    -0.030226970091462135,
    -0.006441190373152494,
    -0.01602526754140854,
    0.013600754551589489,
    -0.01964476704597473,
    0.028154736384749413,
    -0.006600061431527138,
    -0.026372617110610008,
    -0.024079345166683197,
    0.04467733949422836,
    0.013573125004768372,
    0.0013590393355116248,
    0.011355835944414139,
    0.021426888182759285,
    0.02626209706068039,
    0.003954511135816574,
    0.009359585121273994,
    -0.02144070342183113,
    -0.006631145253777504,
    0.0033121188171207905,
    -0.017613979056477547,
    -0.013137956149876118,
    -0.005857511423528194,
    0.008786267600953579,
    0.008523784577846527,
    -0.022573523223400116,
    -0.023222822695970535,
    -0.012074209749698639,
    -0.009552993811666965,
    0.004154826980084181,
    -0.00882080476731062,
    0.028569184243679047,
    0.014008293859660625,
    0.0301717109978199,
    0.013124141842126846,
    0.0036091390065848827,
    -0.012467934750020504,
    0.017558719962835312,
    -0.031912386417388916,
    0.009746401570737362,
    0.0036125925835222006,
    -0.00676238676533103,
    -0.013649106957018375,
    -0.0032361368648707867,
    -0.02754688262939453,
    -0.004417309537529945,
    -0.000268526840955019,
    0.0010145306587219238,
    -0.0029512050095945597,
    0.07410304993391037,
    0.009919088333845139,
    -0.035752926021814346,
    -0.020749958232045174,
    -0.026137763634324074,
    -0.01532070804387331,
    -0.0012217540061101317,
    -0.010333534330129623,
    -0.029619114473462105,
    0.01372508890926838,
    -0.005239295307546854,
    0.004607264418154955,
    -0.0005724543007090688,
    0.01775212772190571,
    0.0488494373857975,
    -0.02593054063618183,
    0.0073840562254190445,
    -0.02213144674897194,
    -0.02399645559489727,
    0.004634893964976072,
    0.005550130270421505,
    0.03050326742231846,
    0.004683246370404959,
    0.024590495973825455,
    0.03550425544381142,
    0.007902114652097225,
    -0.011438725516200066,
    -0.03630552068352699,
    0.031166382133960724,
    -0.002205201191827655,
    0.018194204196333885,
    0.022352484986186028,
    -0.03450958430767059,
    -0.0016862794291228056,
    -0.03437143564224243,
    0.021178219467401505,
    0.01896783895790577,
    0.0053670830093324184,
    0.004672884941101074,
    0.010464776307344437,
    -0.02431419864296913,
    -0.015569375827908516,
    0.007819225080311298,
    -0.03075193613767624,
    0.02284982055425644,
    -0.0052427491173148155,
    0.005474148318171501,
    0.009836198762059212,
    -0.019009282812476158,
    -0.028458664193749428,
    -0.03851590305566788,
    -0.013220845721662045,
    -0.0008789721177890897,
    0.020280253142118454,
    -0.02568187192082405,
    -0.0036782133392989635,
    -0.019589507952332497,
    -0.02137162908911705,
    0.003533157054334879,
    0.1680995225906372,
    0.029840152710676193,
    0.01537596806883812,
    -0.010374979116022587,
    0.025129277259111404,
    0.02072232775390148,
    -0.013048159889876842,
    0.013656014576554298,
    -0.010609832592308521,
    0.039786871522665024,
    -0.01645352877676487,
    -0.02280837669968605,
    0.009587530978024006,
    0.006057827267795801,
    0.0027836994268000126,
    -0.003947603516280651,
    -0.002854500664398074,
    -0.0283757746219635,
    -0.00384399201720953,
    -0.007460038177669048,
    0.0005612297100014985,
    -0.02686995267868042,
    0.007874485105276108,
    -0.0013624931452795863,
    0.026676544919610023,
    -0.0006691585294902325,
    0.017227161675691605,
    -0.005671010352671146,
    0.02482534945011139,
    0.022228151559829712,
    -0.013911589980125427,
    0.016287749633193016,
    -0.0008181002922356129,
    -0.011832449585199356,
    -0.03724493086338043,
    -0.000809897668659687,
    0.00687981303781271,
    -0.004607264418154955,
    0.009490826167166233,
    0.05492798611521721,
    -0.0018667364493012428,
    -0.02018354833126068,
    -0.006164892576634884,
    -0.034399066120386124,
    -0.00665532099083066,
    -0.020487476140260696,
    -0.015334523282945156,
    0.015403597615659237,
    0.0301717109978199,
    0.04174858331680298,
    -0.016729826107621193,
    -0.0013970303116366267,
    0.009394122287631035,
    -0.002319173887372017,
    -0.012219266034662724,
    -0.007321889512240887,
    -0.0034278184175491333,
    0.020915737375617027,
    -0.01652260310947895,
    0.012212359346449375,
    -0.013628385029733181,
    0.020708514377474785,
    -0.011231502518057823,
    0.012350508011877537,
    -0.020390771329402924,
    0.007314981892704964,
    -0.02385830692946911,
    0.03688574582338333,
    -0.015721339732408524,
    0.01561082061380148,
    -0.01802842505276203,
    0.007460038177669048,
    -0.0416656956076622,
    -0.015362152829766273,
    0.013932311907410622,
    -0.01710282824933529,
    0.05053485184907913,
    0.01295145507901907,
    0.018332352861762047,
    0.014029016718268394,
    0.006233967375010252,
    0.03926190361380577,
    -0.00919380597770214,
    0.006941980216652155,
    -0.03486877307295799,
    -0.0002721964265219867,
    0.025585168972611427,
    -0.00621324498206377,
    0.019064541906118393,
    -0.006423921789973974,
    -0.01728242263197899,
    -0.02500494383275509,
    0.014339851215481758,
    0.01304125227034092,
    0.00326031306758523,
    0.01408427581191063,
    0.0021050432696938515,
    0.004776496905833483,
    -0.02808566205203533,
    -0.029177037999033928,
    -0.009048749692738056,
    0.05780148133635521,
    0.015887118875980377,
    0.0028113292064517736,
    -0.022946525365114212,
    -0.011708115227520466,
    -0.02323663793504238,
    0.007425501011312008,
    -0.010236830450594425,
    -0.015707524493336678,
    0.01070653647184372,
    0.001158723491244018,
    -0.009034935384988785,
    0.0047454130835831165,
    -0.019713841378688812,
    0.011777190491557121,
    -0.01116933487355709,
    -0.005432703997939825,
    -0.0007662944262847304,
    0.0020117927342653275,
    0.009822383522987366,
    0.0059507619589567184,
    0.012419582344591618,
    -0.005874780006706715,
    -0.022228151559829712,
    -0.029536224901676178,
    -0.01824946328997612,
    -0.007812317926436663,
    -0.010271367616951466,
    -0.011597596108913422,
    0.0024918599519878626,
    -0.041720956563949585,
    0.018871134147047997,
    -0.006845275871455669,
    -0.00021186422964092344,
    0.015168744139373302,
    -0.014174073003232479,
    -0.018263278529047966,
    7.080128852976486e-05,
    -0.00327758165076375,
    -0.012910010293126106,
    -0.002911487128585577,
    -0.01002269983291626,
    -0.012633712962269783,
    0.03567003458738327,
    -0.017047569155693054,
    0.0036989357322454453,
    0.0161634162068367,
    -0.010499313473701477,
    0.005260017700493336,
    -0.006703673396259546,
    0.015942377969622612,
    0.007321889512240887,
    -0.016660751774907112,
    0.026027245447039604,
    -0.01710282824933529,
    -0.013331364840269089,
    -0.024258939549326897,
    -0.018290909007191658,
    0.03210579603910446,
    -0.012806398794054985,
    -0.008537599816918373,
    -0.008130060508847237,
    -0.013379717245697975,
    -0.0008953773067332804,
    -0.013013622723519802,
    -0.1720782220363617,
    0.008737915195524693,
    0.03426091745495796,
    -0.04246695712208748,
    0.005470694974064827,
    0.0019202691037207842,
    0.008088615722954273,
    -0.044483933597803116,
    -0.02525361068546772,
    -0.0032913964241743088,
    0.017337681725621223,
    0.011770282872021198,
    -0.011901523917913437,
    -0.003106622491031885,
    -0.002514309249818325,
    -0.013897774741053581,
    0.0012735597556456923,
    -0.024479977786540985,
    0.018442872911691666,
    -0.0033881007693707943,
    0.03254787251353264,
    -0.012212359346449375,
    0.008779359981417656,
    0.008806989528238773,
    0.005277286283671856,
    -0.026372617110610008,
    -0.015472671948373318,
    0.01584567315876484,
    0.0008595449035055935,
    -0.02036314085125923,
    -0.019050726667046547,
    0.005722816567867994,
    0.007902114652097225,
    0.026897583156824112,
    0.01789027638733387,
    0.02956385537981987,
    0.02018354833126068,
    -0.03779752552509308,
    -0.0301717109978199,
    0.01746201515197754,
    0.034537214785814285,
    0.03384647145867348,
    0.024576682597398758,
    -0.02464575693011284,
    -0.025225982069969177,
    0.005615751259028912,
    0.031663719564676285,
    -0.010153940878808498,
    -0.00540507398545742,
    -0.014201702550053596,
    0.04329585283994675,
    -0.022324854508042336,
    0.013669829815626144,
    -0.020528919994831085,
    0.017006123438477516,
    -0.002552300225943327,
    0.013580032624304295,
    0.003757648868486285,
    -0.000833210302516818,
    -0.008648118004202843,
    -0.005636473186314106,
    -0.013531680218875408,
    0.001704411581158638,
    -0.004655616357922554,
    -0.0017976620001718402,
    -0.0229879692196846,
    -0.02197948284447193,
    0.027035731822252274,
    -0.0009765397408045828,
    0.012129469774663448,
    0.023692529648542404,
    -0.00459690298885107,
    -0.020846663042902946,
    -0.011314391158521175,
    0.02521216683089733,
    0.017544904723763466,
    -0.008869156241416931,
    0.029978301376104355,
    0.047329798340797424,
    -0.012350508011877537,
    -0.018083686009049416,
    0.041251249611377716,
    -0.005256563890725374,
    0.03638840839266777,
    0.024991128593683243,
    -0.02008684352040291,
    -0.0039890483021736145,
    -0.02619302272796631,
    0.0003134252328891307,
    -0.025889094918966293,
    0.009850013069808483,
    -0.02873496152460575,
    0.015555561520159245,
    -0.025488464161753654,
    -0.016867974773049355,
    0.011708115227520466,
    0.014823372475802898,
    0.011797912418842316,
    0.015956193208694458,
    -0.01584567315876484,
    -0.008606674149632454,
    0.024189865216612816,
    -0.034537214785814285,
    0.018553391098976135,
    0.040643393993377686,
    0.01881587505340576,
    -0.025101646780967712,
    0.0022552800364792347,
    0.01331064198166132,
    -0.010969019494950771,
    -0.017323866486549377,
    0.024618126451969147,
    0.02152359113097191,
    0.0199348796159029,
    -0.011307483538985252,
    0.0044863843359053135,
    -0.0049699051305651665,
    -0.010823963209986687,
    0.007093943655490875,
    0.007729428354650736,
    0.03497929126024246,
    -0.01710282824933529,
    -0.016080526635050774,
    0.0023727065417915583,
    -0.007287352345883846,
    -0.016108157113194466,
    -0.09703575819730759,
    -0.016895605251193047,
    0.025239795446395874,
    -0.010409516282379627,
    -0.003363924566656351,
    -0.0003106190706603229,
    7.571879336865095e-07,
    0.011742652393877506,
    0.0208328478038311,
    0.0019755286630243063,
    -0.014574704691767693,
    0.021343998610973358,
    -3.394360464881174e-05,
    -0.014864817261695862,
    -0.0028907647356390953,
    -0.031995274126529694,
    -0.007245907559990883,
    -0.014464185573160648,
    -0.009269787929952145,
    -0.005222026724368334,
    0.014933891594409943,
    -0.005674464162439108,
    0.014864817261695862,
    0.03144267946481705,
    -0.021040070801973343,
    -0.014091183431446552,
    -0.043627407401800156,
    0.023319527506828308,
    0.02069469913840294,
    0.010803240351378918,
    0.021040070801973343,
    -0.03287942707538605,
    -0.003899251576513052,
    0.008862249553203583,
    0.016467344015836716,
    0.0077501507475972176,
    -0.03354254364967346,
    -0.008689562790095806,
    0.01009177416563034,
    -0.01125913206487894,
    0.005916224792599678,
    0.02718769572675228,
    0.022076187655329704,
    -0.014284592121839523,
    -0.011480170302093029,
    0.009863828308880329,
    -0.0055604916997253895,
    0.009615160524845123,
    0.024051716551184654,
    -0.017683053389191628,
    -0.017586350440979004,
    0.007501482963562012,
    0.0014091182965785265,
    -0.015127300284802914,
    0.018705355003476143,
    -0.002721532480791211,
    -0.006727849133312702,
    0.0035953240003436804,
    -0.01036116387695074,
    -0.011811727657914162,
    -0.015237819403409958,
    -0.007349519059062004,
    -0.0048835622146725655,
    0.025129277259111404,
    -0.0024521423038095236,
    0.008958953432738781,
    -0.015624635852873325,
    0.004807580262422562,
    0.025225982069969177,
    -0.004824848845601082,
    -0.02036314085125923,
    0.029508596286177635,
    -0.004365503787994385,
    -0.00627886550500989,
    -0.02482534945011139,
    0.011970598250627518,
    0.010934482328593731,
    -0.02942570671439171,
    -0.0006993786082603037,
    0.0004934504395350814,
    -0.010754888877272606,
    0.0096082529053092,
    -0.04232880845665932,
    -0.013766533695161343,
    -0.002244918840005994,
    0.03431617468595505,
    -0.01214328408241272,
    0.0029546585865318775,
    0.020266437903046608,
    -0.04318533092737198,
    0.03014408051967621,
    0.011777190491557121,
    0.01411881297826767,
    0.015472671948373318,
    0.0016707377508282661,
    -0.01641208492219448,
    -0.012764954008162022,
    -0.010962111875414848,
    -0.015748970210552216,
    0.01065127644687891,
    -0.012398859485983849,
    -0.01656404882669449,
    -0.07857906818389893,
    0.009097102098166943,
    0.014353666454553604,
    -0.011970598250627518,
    0.01695086434483528,
    -0.043489258736371994,
    0.023623455315828323,
    -0.015348337590694427,
    -0.006979971192777157,
    0.014015201479196548,
    -0.04978884756565094,
    -0.007059406489133835,
    -0.0147266685962677,
    -0.013669829815626144,
    0.0041686417534947395,
    -0.001972074853256345,
    0.041223619133234024,
    -0.0026213745586574078,
    0.03365306183695793,
    0.005933493375778198,
    -0.0010499312775209546,
    -0.011328206397593021,
    0.032603129744529724,
    0.007639631628990173,
    -0.027988959103822708,
    0.00574699230492115,
    -0.016646936535835266,
    0.00846161786466837,
    -0.0022742755245417356,
    -0.031304530799388885,
    0.02195185422897339,
    0.01577659882605076,
    -0.02004539966583252,
    0.024728644639253616,
    0.01291691791266203,
    -0.016867974773049355,
    0.011887709610164165,
    -0.007045591715723276,
    0.002800968009978533,
    0.010837777517735958,
    -0.01233669277280569,
    -0.015956193208694458,
    0.024189865216612816,
    -0.021827518939971924,
    -0.012778769247233868,
    0.013510958291590214,
    0.007522205356508493,
    0.00989836547523737,
    0.012385045178234577,
    0.015928562730550766,
    0.029536224901676178,
    -0.0006726122228428721,
    -0.017904091626405716,
    -0.03542136773467064,
    0.022324854508042336,
    -0.016011452302336693,
    0.005705547984689474,
    0.017696868628263474,
    -0.018594836816191673,
    0.002004885347560048,
    0.0359187014400959,
    0.004503652919083834,
    0.009021120145916939,
    0.005360175855457783,
    0.015099669806659222,
    -0.03147030994296074,
    -0.04257747903466225,
    -0.015748970210552216,
    -0.014132628217339516,
    -0.013711273670196533,
    -0.012930733151733875,
    -0.043406371027231216,
    0.02812710776925087,
    0.010195385664701462,
    0.050451964139938354,
    -0.034426696598529816,
    0.005978391971439123,
    -0.01503059547394514,
    0.007266629952937365,
    0.015721339732408524,
    0.03003356233239174,
    -0.018097499385476112,
    -0.03064141608774662,
    0.008351098746061325,
    0.022034741938114166,
    0.01331064198166132,
    -0.024369457736611366,
    -0.0028044218197464943,
    -0.007715613581240177,
    -0.002296724822372198,
    -0.0008129196939989924,
    -0.015818044543266296,
    -0.003971779718995094,
    0.009421751834452152,
    -0.003426091745495796,
    0.00973258726298809,
    0.004721237346529961,
    -0.00928360316902399,
    0.013193216174840927,
    0.014560889452695847,
    0.018912578001618385,
    -0.010374979116022587,
    0.015458856709301472,
    -0.03218868374824524,
    -0.012992899864912033,
    -0.004855932202190161,
    0.006610422860831022,
    -0.03387409821152687,
    -0.00482139503583312,
    0.002958112396299839,
    -0.008033355697989464,
    0.0009955351706594229,
    -0.0034899855963885784,
    0.024300383403897285,
    -0.01692323572933674,
    0.012371229939162731,
    0.003816362237557769,
    -0.008703378029167652,
    -0.024051716551184654,
    -0.007991911843419075,
    -0.0005577760166488588,
    0.01089994516223669,
    0.0377146378159523,
    -0.0183185376226902,
    0.015887118875980377,
    0.033349134027957916,
    -0.007618909701704979,
    -0.006831461098045111,
    0.019520433619618416,
    -0.0029891959857195616,
    0.0030202793423086405,
    0.006306495517492294,
    -0.02291889488697052,
    -0.026538396254181862,
    -0.028099477291107178,
    -0.026386432349681854,
    -0.028762592002749443,
    -0.03221631422638893,
    -0.01178409717977047,
    0.0948253720998764,
    -0.006765840109437704,
    -0.02209000289440155,
    0.015127300284802914,
    -0.016909420490264893,
    0.019340839236974716,
    0.010851592756807804,
    -0.009483919478952885,
    -0.026358801871538162,
    -0.021786075085401535,
    -0.01453325990587473,
    -0.007556742522865534,
    -0.013055066578090191,
    -0.037162043154239655,
    -0.028762592002749443,
    0.0032482249662280083,
    -0.009394122287631035,
    -0.007252815179526806,
    0.008827712386846542,
    0.014837187714874744,
    0.02377541922032833,
    0.007584372069686651,
    -0.005916224792599678,
    -0.014146442525088787,
    -0.02392738126218319,
    -0.007929744198918343,
    0.027284398674964905,
    0.027864623814821243,
    -0.014070461504161358,
    -0.051280856132507324,
    0.04285377636551857,
    -0.01086540799587965,
    -0.017503460869193077,
    -0.0341227687895298,
    0.008026449009776115,
    0.007681076414883137,
    0.0006812465726397932,
    -0.024949682876467705,
    0.008295838721096516,
    0.029978301376104355,
    -0.0005042433040216565,
    0.011645948514342308,
    -0.02691139653325081,
    -0.013089604675769806,
    0.008330375887453556,
    0.009960532188415527,
    0.009007305838167667,
    -0.014056646265089512,
    -0.03379121050238609
  ]
}
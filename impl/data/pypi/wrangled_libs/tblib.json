{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: developers",
    "license :: osi approved :: bsd license",
    "operating system :: microsoft :: windows",
    "operating system :: posix",
    "operating system :: unix",
    "programming language :: python",
    "programming language :: python :: 3",
    "programming language :: python :: 3 :: only",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.12",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "programming language :: python :: implementation :: cpython",
    "programming language :: python :: implementation :: pypy",
    "topic :: utilities"
  ],
  "description": "traceback serialization library.\n========\noverview\n========\n\n\n\nserialization library for exceptions and tracebacks.\n\n* free software: bsd license\n\nit allows you to:\n\n* `pickle <https://docs.python.org/3/library/pickle.html>`_ tracebacks and raise exceptions\n  with pickled tracebacks in different processes. this allows better error handling when running\n  code over multiple processes (imagine multiprocessing, billiard, futures, celery etc).\n* create traceback objects from strings (the ``from_string`` method). *no pickling is used*.\n* serialize tracebacks to/from plain dicts (the ``from_dict`` and ``to_dict`` methods). *no pickling is used*.\n* raise the tracebacks created from the aforementioned sources.\n* pickle an exception together with its traceback and exception chain\n  (``raise ... from ...``) *(python 3 only)*\n\n**again, note that using the pickle support is completely optional. you are solely responsible for\nsecurity problems should you decide to use the pickle support.**\n\ninstallation\n============\n\n::\n\n    pip install tblib\n\ndocumentation\n=============\n\n.. contents::\n   :local:\n\npickling tracebacks\n~~~~~~~~~~~~~~~~~~~\n\n**note**: the traceback objects that come out are stripped of some attributes (like variables). but you'll be able to raise exceptions with\nthose tracebacks or print them - that should cover 99% of the usecases.\n\n::\n\n    >>> from tblib import pickling_support\n    >>> pickling_support.install()\n    >>> import pickle, sys\n    >>> def inner_0():\n    ...     raise exception('fail')\n    ...\n    >>> def inner_1():\n    ...     inner_0()\n    ...\n    >>> def inner_2():\n    ...     inner_1()\n    ...\n    >>> try:\n    ...     inner_2()\n    ... except:\n    ...     s1 = pickle.dumps(sys.exc_info())\n    ...\n    >>> len(s1) > 1\n    true\n    >>> try:\n    ...     inner_2()\n    ... except:\n    ...     s2 = pickle.dumps(sys.exc_info(), protocol=pickle.highest_protocol)\n    ...\n    >>> len(s2) > 1\n    true\n\n    >>> try:\n    ...     import cpickle\n    ... except importerror:\n    ...     import pickle as cpickle\n    >>> try:\n    ...     inner_2()\n    ... except:\n    ...     s3 = cpickle.dumps(sys.exc_info(), protocol=pickle.highest_protocol)\n    ...\n    >>> len(s3) > 1\n    true\n\nunpickling tracebacks\n~~~~~~~~~~~~~~~~~~~~~\n\n::\n\n    >>> pickle.loads(s1)\n    (<...exception'>, exception('fail'...), <traceback object at ...>)\n\n    >>> pickle.loads(s2)\n    (<...exception'>, exception('fail'...), <traceback object at ...>)\n\n    >>> pickle.loads(s3)\n    (<...exception'>, exception('fail'...), <traceback object at ...>)\n\nraising\n~~~~~~~\n\n::\n\n    >>> from six import reraise\n    >>> reraise(*pickle.loads(s1))\n    traceback (most recent call last):\n      ...\n      file \"<doctest readme.rst[14]>\", line 1, in <module>\n        reraise(*pickle.loads(s2))\n      file \"<doctest readme.rst[8]>\", line 2, in <module>\n        inner_2()\n      file \"<doctest readme.rst[5]>\", line 2, in inner_2\n        inner_1()\n      file \"<doctest readme.rst[4]>\", line 2, in inner_1\n        inner_0()\n      file \"<doctest readme.rst[3]>\", line 2, in inner_0\n        raise exception('fail')\n    exception: fail\n    >>> reraise(*pickle.loads(s2))\n    traceback (most recent call last):\n      ...\n      file \"<doctest readme.rst[14]>\", line 1, in <module>\n        reraise(*pickle.loads(s2))\n      file \"<doctest readme.rst[8]>\", line 2, in <module>\n        inner_2()\n      file \"<doctest readme.rst[5]>\", line 2, in inner_2\n        inner_1()\n      file \"<doctest readme.rst[4]>\", line 2, in inner_1\n        inner_0()\n      file \"<doctest readme.rst[3]>\", line 2, in inner_0\n        raise exception('fail')\n    exception: fail\n    >>> reraise(*pickle.loads(s3))\n    traceback (most recent call last):\n      ...\n      file \"<doctest readme.rst[14]>\", line 1, in <module>\n        reraise(*pickle.loads(s2))\n      file \"<doctest readme.rst[8]>\", line 2, in <module>\n        inner_2()\n      file \"<doctest readme.rst[5]>\", line 2, in inner_2\n        inner_1()\n      file \"<doctest readme.rst[4]>\", line 2, in inner_1\n        inner_0()\n      file \"<doctest readme.rst[3]>\", line 2, in inner_0\n        raise exception('fail')\n    exception: fail\n\npickling exceptions together with their traceback and chain (python 3 only)\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n::\n\n    >>> try:  # doctest: +skip\n    ...     try:\n    ...         1 / 0\n    ...     except exception as e:\n    ...         raise exception(\"foo\") from e\n    ... except exception as e:\n    ...     s = pickle.dumps(e)\n    >>> raise pickle.loads(s)  # doctest: +skip\n    traceback (most recent call last):\n      file \"<doctest readme.rst[16]>\", line 3, in <module>\n        1 / 0\n    zerodivisionerror: division by zero\n\n    the above exception was the direct cause of the following exception:\n\n    traceback (most recent call last):\n      file \"<doctest readme.rst[17]>\", line 1, in <module>\n        raise pickle.loads(s)\n      file \"<doctest readme.rst[16]>\", line 5, in <module>\n        raise exception(\"foo\") from e\n    exception: foo\n\nbaseexception subclasses defined after calling ``pickling_support.install()`` will\n**not** retain their traceback and exception chain pickling.\nto cover custom exceptions, there are three options:\n\n1. use ``@pickling_support.install`` as a decorator for each custom exception\n\n    .. code-block:: python\n\n        >>> from tblib import pickling_support\n        >>> # declare all imports of your package's dependencies\n        >>> import numpy  # doctest: +skip\n\n        >>> pickling_support.install()  # install for all modules imported so far\n\n        >>> @pickling_support.install\n        ... class customerror(exception):\n        ...     pass\n\n   eventual subclasses of ``customerror`` will need to be decorated again.\n\n2. invoke ``pickling_support.install()`` after all modules have been imported and all\n   exception subclasses have been declared\n\n    .. code-block:: python\n\n        >>> # declare all imports of your package's dependencies\n        >>> import numpy  # doctest: +skip\n        >>> from tblib import pickling_support\n\n        >>> # declare your own custom exceptions\n        >>> class customerror(exception):\n        ...     pass\n\n        >>> # finally, install tblib\n        >>> pickling_support.install()\n\n3. selectively install tblib for exception instances just before they are pickled\n\n    .. code-block:: python\n\n       pickling_support.install(<exception instance>, [exception instance], ...)\n\n   the above will install tblib pickling for all listed exceptions as well as any other\n   exceptions in their exception chains.\n\n   for example, one could write a wrapper to be used with\n   `processpoolexecutor <https://docs.python.org/3/library/concurrent.futures.html>`_,\n   `dask.distributed <https://distributed.dask.org/>`_, or similar libraries:\n\n::\n\n    >>> from tblib import pickling_support\n    >>> def wrapper(func, *args, **kwargs):\n    ...     try:\n    ...         return func(*args, **kwargs)\n    ...     except exception as e:\n    ...         pickling_support.install(e)\n    ...         raise\n\nwhat if we have a local stack, does it show correctly ?\n-------------------------------------------------------\n\nyes it does::\n\n    >>> exc_info = pickle.loads(s3)\n    >>> def local_0():\n    ...     reraise(*exc_info)\n    ...\n    >>> def local_1():\n    ...     local_0()\n    ...\n    >>> def local_2():\n    ...     local_1()\n    ...\n    >>> local_2()\n    traceback (most recent call last):\n      file \"...doctest.py\", line ..., in __run\n        compileflags, 1) in test.globs\n      file \"<doctest readme.rst[24]>\", line 1, in <module>\n        local_2()\n      file \"<doctest readme.rst[23]>\", line 2, in local_2\n        local_1()\n      file \"<doctest readme.rst[22]>\", line 2, in local_1\n        local_0()\n      file \"<doctest readme.rst[21]>\", line 2, in local_0\n        reraise(*exc_info)\n      file \"<doctest readme.rst[11]>\", line 2, in <module>\n        inner_2()\n      file \"<doctest readme.rst[5]>\", line 2, in inner_2\n        inner_1()\n      file \"<doctest readme.rst[4]>\", line 2, in inner_1\n        inner_0()\n      file \"<doctest readme.rst[3]>\", line 2, in inner_0\n        raise exception('fail')\n    exception: fail\n\nit also supports more contrived scenarios\n-----------------------------------------\n\nlike tracebacks with syntax errors::\n\n    >>> from tblib import traceback\n    >>> from examples import bad_syntax\n    >>> try:\n    ...     bad_syntax()\n    ... except:\n    ...     et, ev, tb = sys.exc_info()\n    ...     tb = traceback(tb)\n    ...\n    >>> reraise(et, ev, tb.as_traceback())\n    traceback (most recent call last):\n      ...\n      file \"<doctest readme.rst[58]>\", line 1, in <module>\n        reraise(et, ev, tb.as_traceback())\n      file \"<doctest readme.rst[57]>\", line 2, in <module>\n        bad_syntax()\n      file \"...tests...examples.py\", line 18, in bad_syntax\n        import badsyntax\n      file \"...tests...badsyntax.py\", line 5\n        is very bad\n         ^\n    syntaxerror: invalid syntax\n\nor other import failures::\n\n    >>> from examples import bad_module\n    >>> try:\n    ...     bad_module()\n    ... except:\n    ...     et, ev, tb = sys.exc_info()\n    ...     tb = traceback(tb)\n    ...\n    >>> reraise(et, ev, tb.as_traceback())\n    traceback (most recent call last):\n      ...\n      file \"<doctest readme.rst[61]>\", line 1, in <module>\n        reraise(et, ev, tb.as_traceback())\n      file \"<doctest readme.rst[60]>\", line 2, in <module>\n        bad_module()\n      file \"...tests...examples.py\", line 23, in bad_module\n        import badmodule\n      file \"...tests...badmodule.py\", line 3, in <module>\n        raise exception(\"boom!\")\n    exception: boom!\n\nor a traceback that's caused by exceeding the recursion limit (here we're\nforcing the type and value to have consistency across platforms)::\n\n    >>> def f(): f()\n    >>> try:\n    ...    f()\n    ... except runtimeerror:\n    ...    et, ev, tb = sys.exc_info()\n    ...    tb = traceback(tb)\n    ...\n    >>> reraise(runtimeerror, runtimeerror(\"maximum recursion depth exceeded\"), tb.as_traceback())\n    traceback (most recent call last):\n      ...\n      file \"<doctest readme.rst[32]>\", line 1, in f\n        def f(): f()\n      file \"<doctest readme.rst[32]>\", line 1, in f\n        def f(): f()\n      file \"<doctest readme.rst[32]>\", line 1, in f\n        def f(): f()\n      ...\n    runtimeerror: maximum recursion depth exceeded\n\nreference\n~~~~~~~~~\n\ntblib.traceback\n---------------\n\nit is used by the ``pickling_support``. you can use it too if you want more flexibility::\n\n    >>> from tblib import traceback\n    >>> try:\n    ...     inner_2()\n    ... except:\n    ...     et, ev, tb = sys.exc_info()\n    ...     tb = traceback(tb)\n    ...\n    >>> reraise(et, ev, tb.as_traceback())\n    traceback (most recent call last):\n      ...\n      file \"<doctest readme.rst[21]>\", line 6, in <module>\n        reraise(et, ev, tb.as_traceback())\n      file \"<doctest readme.rst[21]>\", line 2, in <module>\n        inner_2()\n      file \"<doctest readme.rst[5]>\", line 2, in inner_2\n        inner_1()\n      file \"<doctest readme.rst[4]>\", line 2, in inner_1\n        inner_0()\n      file \"<doctest readme.rst[3]>\", line 2, in inner_0\n        raise exception('fail')\n    exception: fail\n\ntblib.traceback.to_dict\n```````````````````````\n\nyou can use the ``to_dict`` method and the ``from_dict`` classmethod to\nconvert a traceback into and from a dictionary serializable by the stdlib\njson.jsondecoder::\n\n    >>> import json\n    >>> from pprint import pprint\n    >>> try:\n    ...     inner_2()\n    ... except:\n    ...     et, ev, tb = sys.exc_info()\n    ...     tb = traceback(tb)\n    ...     tb_dict = tb.to_dict()\n    ...     pprint(tb_dict)\n    {'tb_frame': {'f_code': {'co_filename': '<doctest readme.rst[...]>',\n                             'co_name': '<module>'},\n                  'f_globals': {'__name__': '__main__'},\n                  'f_lineno': 5},\n     'tb_lineno': 2,\n     'tb_next': {'tb_frame': {'f_code': {'co_filename': ...,\n                                         'co_name': 'inner_2'},\n                              'f_globals': {'__name__': '__main__'},\n                              'f_lineno': 2},\n                 'tb_lineno': 2,\n                 'tb_next': {'tb_frame': {'f_code': {'co_filename': ...,\n                                                     'co_name': 'inner_1'},\n                                          'f_globals': {'__name__': '__main__'},\n                                          'f_lineno': 2},\n                             'tb_lineno': 2,\n                             'tb_next': {'tb_frame': {'f_code': {'co_filename': ...,\n                                                                 'co_name': 'inner_0'},\n                                                      'f_globals': {'__name__': '__main__'},\n                                                      'f_lineno': 2},\n                                         'tb_lineno': 2,\n                                         'tb_next': none}}}}\n\ntblib.traceback.from_dict\n`````````````````````````\n\nbuilding on the previous example::\n\n    >>> tb_json = json.dumps(tb_dict)\n    >>> tb = traceback.from_dict(json.loads(tb_json))\n    >>> reraise(et, ev, tb.as_traceback())\n    traceback (most recent call last):\n      ...\n      file \"<doctest readme.rst[21]>\", line 6, in <module>\n        reraise(et, ev, tb.as_traceback())\n      file \"<doctest readme.rst[21]>\", line 2, in <module>\n        inner_2()\n      file \"<doctest readme.rst[5]>\", line 2, in inner_2\n        inner_1()\n      file \"<doctest readme.rst[4]>\", line 2, in inner_1\n        inner_0()\n      file \"<doctest readme.rst[3]>\", line 2, in inner_0\n        raise exception('fail')\n    exception: fail\n\ntblib.traceback.from_string\n```````````````````````````\n\n::\n\n    >>> tb = traceback.from_string(\"\"\"\n    ... file \"skipped.py\", line 123, in func_123\n    ... traceback (most recent call last):\n    ...   file \"tests/examples.py\", line 2, in func_a\n    ...     func_b()\n    ...   file \"tests/examples.py\", line 6, in func_b\n    ...     func_c()\n    ...   file \"tests/examples.py\", line 10, in func_c\n    ...     func_d()\n    ...   file \"tests/examples.py\", line 14, in func_d\n    ... doesn't: matter\n    ... \"\"\")\n    >>> reraise(et, ev, tb.as_traceback())\n    traceback (most recent call last):\n      ...\n      file \"<doctest readme.rst[42]>\", line 6, in <module>\n        reraise(et, ev, tb.as_traceback())\n      file \"...examples.py\", line 2, in func_a\n        func_b()\n      file \"...examples.py\", line 6, in func_b\n        func_c()\n      file \"...examples.py\", line 10, in func_c\n        func_d()\n      file \"...examples.py\", line 14, in func_d\n        raise exception(\"guessing time !\")\n    exception: fail\n\n\nif you use the ``strict=false`` option then parsing is a bit more lax::\n\n    >>> tb = traceback.from_string(\"\"\"\n    ... file \"bogus.py\", line 123, in bogus\n    ... traceback (most recent call last):\n    ...  file \"tests/examples.py\", line 2, in func_a\n    ...   func_b()\n    ...    file \"tests/examples.py\", line 6, in func_b\n    ...     func_c()\n    ...    file \"tests/examples.py\", line 10, in func_c\n    ...   func_d()\n    ...  file \"tests/examples.py\", line 14, in func_d\n    ... doesn't: matter\n    ... \"\"\", strict=false)\n    >>> reraise(et, ev, tb.as_traceback())\n    traceback (most recent call last):\n      ...\n      file \"<doctest readme.rst[42]>\", line 6, in <module>\n        reraise(et, ev, tb.as_traceback())\n      file \"bogus.py\", line 123, in bogus\n      file \"...examples.py\", line 2, in func_a\n        func_b()\n      file \"...examples.py\", line 6, in func_b\n        func_c()\n      file \"...examples.py\", line 10, in func_c\n        func_d()\n      file \"...examples.py\", line 14, in func_d\n        raise exception(\"guessing time !\")\n    exception: fail\n\ntblib.decorators.return_error\n-----------------------------\n\n::\n\n    >>> from tblib.decorators import return_error\n    >>> inner_2r = return_error(inner_2)\n    >>> e = inner_2r()\n    >>> e\n    <tblib.decorators.error object at ...>\n    >>> e.reraise()\n    traceback (most recent call last):\n      ...\n      file \"<doctest readme.rst[26]>\", line 1, in <module>\n        e.reraise()\n      file \"...tblib...decorators.py\", line 19, in reraise\n        reraise(self.exc_type, self.exc_value, self.traceback)\n      file \"...tblib...decorators.py\", line 25, in return_exceptions_wrapper\n        return func(*args, **kwargs)\n      file \"<doctest readme.rst[5]>\", line 2, in inner_2\n        inner_1()\n      file \"<doctest readme.rst[4]>\", line 2, in inner_1\n        inner_0()\n      file \"<doctest readme.rst[3]>\", line 2, in inner_0\n        raise exception('fail')\n    exception: fail\n\nhow's this useful? imagine you're using multiprocessing like this::\n\n    # note that python 3.4 and later will show the remote traceback (but as a string sadly) so we skip testing this.\n    >>> import traceback\n    >>> from multiprocessing import pool\n    >>> from examples import func_a\n    >>> pool = pool()  # doctest: +skip\n    >>> try:  # doctest: +skip\n    ...     for i in pool.map(func_a, range(5)):\n    ...         print(i)\n    ... except:\n    ...     print(traceback.format_exc())\n    ...\n    traceback (most recent call last):\n      file \"<doctest readme.rst[...]>\", line 2, in <module>\n        for i in pool.map(func_a, range(5)):\n      file \"...multiprocessing...pool.py\", line ..., in map\n        ...\n      file \"...multiprocessing...pool.py\", line ..., in get\n        ...\n    exception: guessing time !\n    <blankline>\n    >>> pool.terminate()  # doctest: +skip\n\nnot very useful is it? let's sort this out::\n\n    >>> from tblib.decorators import apply_with_return_error, error\n    >>> from itertools import repeat\n    >>> pool = pool()\n    >>> try:\n    ...     for i in pool.map(apply_with_return_error, zip(repeat(func_a), range(5))):\n    ...         if isinstance(i, error):\n    ...             i.reraise()\n    ...         else:\n    ...             print(i)\n    ... except:\n    ...     print(traceback.format_exc())\n    ...\n    traceback (most recent call last):\n      file \"<doctest readme.rst[...]>\", line 4, in <module>\n        i.reraise()\n      file \"...tblib...decorators.py\", line ..., in reraise\n        reraise(self.exc_type, self.exc_value, self.traceback)\n      file \"...tblib...decorators.py\", line ..., in return_exceptions_wrapper\n        return func(*args, **kwargs)\n      file \"...tblib...decorators.py\", line ..., in apply_with_return_error\n        return args[0](*args[1:])\n      file \"...examples.py\", line 2, in func_a\n        func_b()\n      file \"...examples.py\", line 6, in func_b\n        func_c()\n      file \"...examples.py\", line 10, in func_c\n        func_d()\n      file \"...examples.py\", line 14, in func_d\n        raise exception(\"guessing time !\")\n    exception: guessing time !\n    <blankline>\n    >>> pool.terminate()\n\nmuch better !\n\nwhat if we have a local call stack ?\n````````````````````````````````````\n\n::\n\n    >>> def local_0():\n    ...     pool = pool()\n    ...     try:\n    ...         for i in pool.map(apply_with_return_error, zip(repeat(func_a), range(5))):\n    ...             if isinstance(i, error):\n    ...                 i.reraise()\n    ...             else:\n    ...                 print(i)\n    ...     finally:\n    ...         pool.close()\n    ...\n    >>> def local_1():\n    ...     local_0()\n    ...\n    >>> def local_2():\n    ...     local_1()\n    ...\n    >>> try:\n    ...     local_2()\n    ... except:\n    ...     print(traceback.format_exc())\n    traceback (most recent call last):\n      file \"<doctest readme.rst[...]>\", line 2, in <module>\n        local_2()\n      file \"<doctest readme.rst[...]>\", line 2, in local_2\n        local_1()\n      file \"<doctest readme.rst[...]>\", line 2, in local_1\n        local_0()\n      file \"<doctest readme.rst[...]>\", line 6, in local_0\n        i.reraise()\n      file \"...tblib...decorators.py\", line 20, in reraise\n        reraise(self.exc_type, self.exc_value, self.traceback)\n      file \"...tblib...decorators.py\", line 27, in return_exceptions_wrapper\n        return func(*args, **kwargs)\n      file \"...tblib...decorators.py\", line 47, in apply_with_return_error\n        return args[0](*args[1:])\n      file \"...tests...examples.py\", line 2, in func_a\n        func_b()\n      file \"...tests...examples.py\", line 6, in func_b\n        func_c()\n      file \"...tests...examples.py\", line 10, in func_c\n        func_d()\n      file \"...tests...examples.py\", line 14, in func_d\n        raise exception(\"guessing time !\")\n    exception: guessing time !\n    <blankline>\n\nother weird stuff\n`````````````````\n\nclearing traceback works (python 3.4 and up)::\n\n    >>> tb = traceback.from_string(\"\"\"\n    ... file \"skipped.py\", line 123, in func_123\n    ... traceback (most recent call last):\n    ...   file \"tests/examples.py\", line 2, in func_a\n    ...     func_b()\n    ...   file \"tests/examples.py\", line 6, in func_b\n    ...     func_c()\n    ...   file \"tests/examples.py\", line 10, in func_c\n    ...     func_d()\n    ...   file \"tests/examples.py\", line 14, in func_d\n    ... doesn't: matter\n    ... \"\"\")\n    >>> import traceback, sys\n    >>> if sys.version_info > (3, 4):\n    ...     traceback.clear_frames(tb)\n\ncredits\n=======\n\n* `mitsuhiko/jinja2 <https://github.com/mitsuhiko/jinja2>`_ for figuring a way to create traceback objects.\n\n\nchangelog\n=========\n\n3.0.0 (2023-10-22)\n~~~~~~~~~~~~~~~~~~\n\n* added support for  ``__context__``, ``__suppress_context__`` and ``__notes__``.\n  contributed by tim maxwell in `#72 <https://github.com/ionelmc/python-tblib/pull/72>`_.\n* added the ``get_locals`` argument to ``tblib.pickling_support.install()``, ``tblib.traceback`` and ``tblib.frame``.\n  fixes `#41 <https://github.com/ionelmc/python-tblib/issues/41>`_.\n* dropped support for now-eol python 3.7 and added 3.12 in the test grid.\n\n2.0.0 (2023-06-22)\n~~~~~~~~~~~~~~~~~~\n\n* removed support for legacy pythons (2.7 and 3.6) and added python 3.11 in the test grid.\n* some cleanups and refactors (mostly from ruff).\n\n1.7.0 (2020-07-24)\n~~~~~~~~~~~~~~~~~~\n\n* add more attributes to ``frame`` and ``code`` objects for pytest compatibility. contributed by ivanq in\n  `#58 <https://github.com/ionelmc/python-tblib/pull/58>`_.\n\n1.6.0 (2019-12-07)\n~~~~~~~~~~~~~~~~~~\n\n* when pickling an exception, also pickle its traceback and the exception chain\n  (``raise ... from ...``). contributed by guido imperiale in\n  `#53 <https://github.com/ionelmc/python-tblib/issues/53>`_.\n\n1.5.0 (2019-10-23)\n~~~~~~~~~~~~~~~~~~\n\n* added support for python 3.8. contributed by victor stinner in\n  `#42 <https://github.com/ionelmc/python-tblib/issues/42>`_.\n* removed support for end of life python 3.4.\n* few ci improvements and fixes.\n\n1.4.0 (2019-05-02)\n~~~~~~~~~~~~~~~~~~\n\n* removed support for end of life python 3.3.\n* fixed tests for python 3.7. contributed by elliott sales de andrade in\n  `#36 <https://github.com/ionelmc/python-tblib/issues/36>`_.\n* fixed compatibility issue with twised (``twisted.python.failure.failure`` expected a ``co_code`` attribute).\n\n1.3.2 (2017-04-09)\n~~~~~~~~~~~~~~~~~~\n\n* add support for pypy3.5-5.7.1-beta. previously ``attributeerror:\n  'frame' object has no attribute 'clear'``  could be raised. see pypy\n  issue `#2532 <https://foss.heptapod.net/pypy/pypy/-/issues/2532>`_.\n\n1.3.1 (2017-03-27)\n~~~~~~~~~~~~~~~~~~\n\n* fixed handling for tracebacks due to exceeding the recursion limit.\n  fixes `#15 <https://github.com/ionelmc/python-tblib/issues/15>`_.\n\n1.3.0 (2016-03-08)\n~~~~~~~~~~~~~~~~~~\n\n* added ``traceback.from_string``.\n\n1.2.0 (2015-12-18)\n~~~~~~~~~~~~~~~~~~\n\n* fixed handling for tracebacks from generators and other internal improvements\n  and optimizations. contributed by drayx in `#10 <https://github.com/ionelmc/python-tblib/issues/10>`_\n  and `#11 <https://github.com/ionelmc/python-tblib/pull/11>`_.\n\n1.1.0 (2015-07-27)\n~~~~~~~~~~~~~~~~~~\n\n* added support for python 2.6. contributed by arcadiy ivanov in\n  `#8 <https://github.com/ionelmc/python-tblib/pull/8>`_.\n\n1.0.0 (2015-03-30)\n~~~~~~~~~~~~~~~~~~\n\n* added ``to_dict`` method and ``from_dict`` classmethod on tracebacks.\n  contributed by beckjake in `#5 <https://github.com/ionelmc/python-tblib/pull/5>`_.\n",
  "docs_url": null,
  "keywords": "traceback,debugging,exceptions",
  "license": "bsd-2-clause",
  "name": "tblib",
  "package_url": "https://pypi.org/project/tblib/",
  "project_url": "https://pypi.org/project/tblib/",
  "project_urls": {
    "Changelog": "https://python-tblib.readthedocs.io/en/latest/changelog.html",
    "Documentation": "https://python-tblib.readthedocs.io/",
    "Homepage": "https://github.com/ionelmc/python-tblib",
    "Issue Tracker": "https://github.com/ionelmc/python-tblib/issues"
  },
  "release_url": "https://pypi.org/project/tblib/3.0.0/",
  "requires_dist": [],
  "requires_python": ">=3.8",
  "summary": "traceback serialization library.",
  "version": "3.0.0",
  "releases": [],
  "developers": [
    "contact@ionelmc.ro"
  ],
  "kwds": "tracebacks traceback pickling_support return_exceptions_wrapper pythons",
  "license_kwds": "bsd-2-clause",
  "libtype": "pypi",
  "id": "pypi_tblib",
  "homepage": "https://github.com/ionelmc/python-tblib",
  "release_count": 17,
  "dependency_ids": [],
  "documentation_summary": "The GitHub repository \"ionelmc/python-tblib\" is a serialization library for exceptions and tracebacks, designed to enhance error handling across multiple processes. It allows for the pickling of tracebacks and exceptions, including their chains (for Python 3), and supports creating traceback objects from strings or dictionaries without pickling. This functionality is particularly useful in distributed computing scenarios, such as with multiprocessing or Celery, where standard error propagation mechanisms may fall short. The library is open-source under the BSD-2-Clause license and supports various advanced use cases, including handling syntax errors, import failures, and recursion limit exceedances. Installation is straightforward via pip, and the library offers comprehensive documentation for its features.",
  "embedding": [
    -0.025931505486369133,
    -0.00523066520690918,
    0.010275287553668022,
    -0.05506867170333862,
    0.010253820568323135,
    0.012457712553441525,
    -0.009337917901575565,
    -0.019305519759655,
    0.000868945149704814,
    -0.012450557202100754,
    -0.004676114302128553,
    0.006701118778437376,
    -0.005627795122563839,
    0.0252445787191391,
    0.004354117438197136,
    -0.0001776574645191431,
    0.023069309070706367,
    -0.013022996485233307,
    0.015255510807037354,
    0.0007647432503290474,
    0.04021386802196503,
    0.004765558056533337,
    -0.021638209000229836,
    -0.0012808331521227956,
    0.001840750453993678,
    0.02052195370197296,
    0.017230426892638206,
    -0.02610323764383793,
    -0.0036493013612926006,
    0.003595635062083602,
    0.02631790190935135,
    0.0008054401259869337,
    -0.01715887151658535,
    -0.01197113934904337,
    -0.023484326899051666,
    -0.03128381446003914,
    -0.0025688218884170055,
    0.008822722360491753,
    0.014869113452732563,
    0.011548965238034725,
    0.016886962577700615,
    0.00021052801457699388,
    -0.0017620400758460164,
    0.005724394228309393,
    -0.006729740649461746,
    0.006232433952391148,
    0.03884001448750496,
    -0.007080359850078821,
    -0.010740394704043865,
    -0.015813639387488365,
    0.016772475093603134,
    -0.012278825044631958,
    0.02159527689218521,
    -0.011205501854419708,
    0.010540041141211987,
    -0.01836099475622177,
    -0.017115937545895576,
    -0.0010751127265393734,
    0.009845958091318607,
    -0.0035437578335404396,
    0.0010402296902611852,
    -0.013681301847100258,
    -0.03723718225955963,
    -0.008522192016243935,
    -0.011563275940716267,
    0.010196576826274395,
    -0.004425672348588705,
    0.0076349107548594475,
    0.005423863418400288,
    -0.004547315649688244,
    0.026088926941156387,
    0.028435928747057915,
    -0.013158950954675674,
    -0.01628590188920498,
    0.02717656083405018,
    -0.041158393025398254,
    -0.02040746435523033,
    0.023713301867246628,
    -0.016142791137099266,
    -0.026260657235980034,
    0.00566357234492898,
    0.0035419687628746033,
    -0.0073272245936095715,
    0.04238913953304291,
    0.01695851795375347,
    0.017330603674054146,
    -0.004801335744559765,
    0.017073005437850952,
    -0.04313331097364426,
    -0.004880046006292105,
    0.01661505363881588,
    0.012901353649795055,
    0.0014284151839092374,
    0.005792371463030577,
    -0.013609747402369976,
    0.024872492998838425,
    -0.022496869787573814,
    0.04579515382647514,
    0.0004022728535346687,
    -0.033058375120162964,
    0.0007531156297773123,
    0.014074853621423244,
    0.003835343988612294,
    -0.00757766654714942,
    -0.019792092964053154,
    -0.0060106138698756695,
    0.027219494804739952,
    -0.006332611199468374,
    0.02189580723643303,
    0.012693843804299831,
    -0.03755202516913414,
    0.03680785372853279,
    -0.017459401860833168,
    -0.03076861798763275,
    0.020851105451583862,
    0.031112082302570343,
    0.03769513592123985,
    -0.014518494717776775,
    -0.015255510807037354,
    -0.01106239203363657,
    0.0003025431651622057,
    -0.019305519759655,
    0.0015223310329020023,
    -0.0160855483263731,
    0.014575738459825516,
    -0.004293295554816723,
    -0.00916618574410677,
    0.004690425470471382,
    -0.008107173256576061,
    -0.0003913160180673003,
    0.0070732044987380505,
    0.009588359855115414,
    -0.011799407191574574,
    -0.008586591109633446,
    0.01067599467933178,
    -0.024643516167998314,
    -0.007584822364151478,
    -0.011391544714570045,
    -0.024128321558237076,
    -0.03809584304690361,
    0.00830752681940794,
    -0.0005004372796975076,
    -0.015412931330502033,
    -0.019563116133213043,
    0.0027960087172687054,
    0.037065450102090836,
    0.011241278611123562,
    0.01511240005493164,
    -0.011513187550008297,
    -0.008422015234827995,
    0.010897815227508545,
    -0.023140862584114075,
    -0.04631035029888153,
    -0.01714456081390381,
    -0.00971000362187624,
    0.017402159050107002,
    -0.03551986441016197,
    0.0061072129756212234,
    -0.006479298695921898,
    -0.001883683493360877,
    -0.01267953310161829,
    0.01358828041702509,
    -0.010282442905008793,
    -5.6573113397462294e-05,
    0.008443481288850307,
    0.046653810888528824,
    0.013874500058591366,
    -0.014425473287701607,
    -0.0011672397376969457,
    -0.00010414596181362867,
    0.017287669703364372,
    0.014640137553215027,
    -0.034374985843896866,
    -0.004701158497482538,
    0.004432827699929476,
    0.015455864369869232,
    0.01598536968231201,
    0.0032575379591435194,
    -0.022310826927423477,
    0.02073661796748638,
    -0.015727773308753967,
    0.04379161447286606,
    0.01182087417691946,
    0.05409552529454231,
    -0.015255510807037354,
    -0.006568742450326681,
    0.009287829510867596,
    -0.011763629503548145,
    -0.0072234696708619595,
    0.008071395568549633,
    0.014597205445170403,
    0.015484485775232315,
    0.0071268705651164055,
    -0.01408200990408659,
    -0.5486259460449219,
    -0.02361312508583069,
    -0.020808173343539238,
    -0.04691141098737717,
    -0.0051412214525043964,
    0.010990836657583714,
    -0.0015259088249877095,
    0.013953210785984993,
    -0.0615372359752655,
    0.020321598276495934,
    -0.016471944749355316,
    0.04922978952527046,
    0.03486156091094017,
    -0.02784917689859867,
    -0.013137484900653362,
    -0.030625509098172188,
    -0.03136967867612839,
    -0.021709764376282692,
    -0.0015652640722692013,
    0.015012223273515701,
    -0.03872552514076233,
    0.02461489476263523,
    0.0014114208752289414,
    0.013988988474011421,
    -0.007005227264016867,
    0.020894039422273636,
    0.037838246673345566,
    -0.024028144776821136,
    -0.00034637056523934007,
    0.002897974569350481,
    -0.0379527322947979,
    0.011298523284494877,
    -0.0006453359965234995,
    -0.029652360826730728,
    0.04848561808466911,
    -0.00010118314094142988,
    -0.027877800166606903,
    0.0673188716173172,
    0.02925165370106697,
    0.03726580739021301,
    -0.006425632629543543,
    -0.02159527689218521,
    0.0016511299181729555,
    0.018318060785531998,
    0.04694003239274025,
    0.004457871895283461,
    0.007048160303384066,
    0.022382380440831184,
    -0.006558008957654238,
    -0.01671523042023182,
    0.011040925048291683,
    -0.004271829035133123,
    -0.00912325270473957,
    -0.004769135732203722,
    0.022611357271671295,
    0.019563116133213043,
    0.01484049204736948,
    -0.0007982846582308412,
    0.029938580468297005,
    -0.008085706271231174,
    -0.004940867889672518,
    0.022167716175317764,
    0.028035219758749008,
    -0.007456023246049881,
    -0.02438591979444027,
    -0.004665381275117397,
    0.002826419658958912,
    -0.035119157284498215,
    0.01856134831905365,
    -0.03583470731973648,
    0.03981316089630127,
    -0.0014597205445170403,
    -0.022296514362096786,
    -0.028407305479049683,
    0.03551986441016197,
    0.07928285747766495,
    -0.002182425232604146,
    0.01035399828106165,
    -0.004250362515449524,
    0.03159865736961365,
    0.00840770360082388,
    0.01440400630235672,
    -0.015169644728302956,
    -0.04227465018630028,
    0.059419211000204086,
    0.004321917425841093,
    -0.00875116791576147,
    -0.00042843513074330986,
    0.0050553553737699986,
    0.013953210785984993,
    -0.006028502713888884,
    -0.003225338412448764,
    -0.017402159050107002,
    -0.020779550075531006,
    0.00593190360814333,
    0.036321282386779785,
    -0.0016734908567741513,
    -0.01122696790844202,
    -0.020908350124955177,
    -0.014726003631949425,
    -0.004937289748340845,
    -0.04098666086792946,
    -0.011348611675202847,
    0.0015509530203416944,
    -0.0009302140679210424,
    0.014547116123139858,
    -0.011305678635835648,
    -0.016457632184028625,
    0.01780286617577076,
    0.005248554050922394,
    0.01824650540947914,
    -0.03288664296269417,
    -0.013080240227282047,
    -0.020350221544504166,
    0.03451809659600258,
    -0.03142692521214485,
    0.021495100110769272,
    0.0031537835020571947,
    0.006815606728196144,
    -0.013817256316542625,
    0.004493649583309889,
    0.01661505363881588,
    0.0027870642952620983,
    0.028536105528473854,
    -0.001501759048551321,
    0.025230268016457558,
    0.040414221584796906,
    -0.007166225928813219,
    -0.04330504313111305,
    0.003620679257437587,
    -0.021638209000229836,
    0.01192820630967617,
    0.027434159070253372,
    -0.008815567009150982,
    0.01760251261293888,
    0.016672298312187195,
    0.018647214397788048,
    -0.010289598256349564,
    -0.009194808080792427,
    -0.0028532526921480894,
    -0.011534654535353184,
    0.02201029472053051,
    0.014060542918741703,
    -0.014003299176692963,
    -0.035577110946178436,
    -0.023770546540617943,
    -0.006658185739070177,
    0.0012343224370852113,
    -0.0006475721020251513,
    0.007080359850078821,
    0.010046311654150486,
    -0.008057084865868092,
    -0.031455546617507935,
    0.021294746547937393,
    -0.00804277416318655,
    -0.010332531295716763,
    -0.031226569786667824,
    -0.03763789311051369,
    -0.01867583580315113,
    -0.0056063286028802395,
    0.012507800944149494,
    0.007799487095326185,
    0.02006400190293789,
    0.015928126871585846,
    -0.017073005437850952,
    -0.05340859666466713,
    -0.02213909476995468,
    0.02826419658958912,
    0.005148376803845167,
    -0.03154141083359718,
    0.008608058094978333,
    -0.030883105471730232,
    0.01662936434149742,
    -0.0060106138698756695,
    -0.008472103625535965,
    0.027663134038448334,
    -0.0049909562803804874,
    0.023827791213989258,
    -0.008085706271231174,
    -0.0033147819340229034,
    -0.004354117438197136,
    0.005753016099333763,
    -0.05026017874479294,
    -0.009795869700610638,
    0.008629524149000645,
    0.008722545579075813,
    -0.01554173044860363,
    0.0009409472695551813,
    -0.003164516529068351,
    0.025516487658023834,
    -0.005244975909590721,
    0.02696189656853676,
    -0.03208522871136665,
    0.003781677922233939,
    -0.01474031526595354,
    0.013051618821918964,
    -0.016443321481347084,
    -0.005971258506178856,
    0.01660074293613434,
    0.03483293950557709,
    0.012965752743184566,
    0.014768936671316624,
    0.008386237546801567,
    0.0034829359501600266,
    -0.0053952415473759174,
    -0.026489634066820145,
    0.017187492921948433,
    -0.017445091158151627,
    0.002359523670747876,
    0.010590129531919956,
    0.023913657292723656,
    0.005091133061796427,
    -0.024858182296156883,
    -0.029194410890340805,
    0.015799328684806824,
    0.045279957354068756,
    0.005348730832338333,
    0.005906859412789345,
    -0.02253980189561844,
    0.011785096488893032,
    -0.005370197352021933,
    0.002606388181447983,
    0.016013992950320244,
    0.02146647870540619,
    -0.002826419658958912,
    0.00742024602368474,
    0.006142990663647652,
    0.0014749258989468217,
    0.0238421019166708,
    -0.021953051909804344,
    -0.00496233394369483,
    0.027992287650704384,
    0.018046151846647263,
    -0.013938900083303452,
    0.016987139359116554,
    0.007663532625883818,
    0.03723718225955963,
    -0.02222496084868908,
    0.03841068595647812,
    -0.027977976948022842,
    -0.004797757603228092,
    0.011634831316769123,
    0.006636719219386578,
    -0.009359383955597878,
    -0.014983601868152618,
    0.028421616181731224,
    0.007266402710229158,
    0.006593786645680666,
    -0.01973484829068184,
    0.005452485289424658,
    -0.0016967462142929435,
    0.02221064828336239,
    -0.022081850096583366,
    0.013860189355909824,
    0.001025918754749,
    -0.010003378614783287,
    -0.005781637970358133,
    0.02362743765115738,
    0.02223927155137062,
    -0.0023237462155520916,
    -0.0030357176437973976,
    0.0030625509098172188,
    0.038353439420461655,
    -0.0038174553774297237,
    0.021838564425706863,
    -0.034689828753471375,
    -0.0016046192031353712,
    -0.023455705493688583,
    -0.0062574781477451324,
    -0.0036153127439320087,
    -0.008672457188367844,
    -0.03526226803660393,
    -0.008808411657810211,
    0.0016171413008123636,
    0.03606368228793144,
    0.01910516619682312,
    0.011413010768592358,
    0.03884001448750496,
    -0.013573969714343548,
    -0.005241398233920336,
    -0.02588857151567936,
    -0.034060146659612656,
    0.025401998311281204,
    -0.0009391584317199886,
    -0.010153643786907196,
    -0.030081691220402718,
    -0.02113732509315014,
    0.0021072926465421915,
    -0.0069336723536252975,
    0.0018479059217497706,
    0.020307287573814392,
    0.024128321558237076,
    0.017731310799717903,
    0.015670528635382652,
    0.01983502507209778,
    -0.015899505466222763,
    0.03989902883768082,
    -0.019148098304867744,
    -0.012980063445866108,
    0.0017083738930523396,
    -0.009230585768818855,
    -0.0018335949862375855,
    -0.013624058105051517,
    0.02039315365254879,
    0.030511021614074707,
    -0.020307287573814392,
    0.004783446900546551,
    0.02060781978070736,
    -0.04301882162690163,
    -0.035577110946178436,
    0.014210808090865612,
    0.007684999145567417,
    -0.0033398261293768883,
    -0.01715887151658535,
    -0.02072230726480484,
    0.019305519759655,
    0.027806244790554047,
    0.0006001669680699706,
    0.02341277152299881,
    0.0022861799225211143,
    -0.018318060785531998,
    -0.032743535935878754,
    -0.024571962654590607,
    0.012414779514074326,
    0.023012064397335052,
    0.02623203583061695,
    -0.004994533956050873,
    0.012722466140985489,
    -0.033831167966127396,
    -0.01484049204736948,
    0.015355687588453293,
    -0.0035831129644066095,
    0.006883583962917328,
    0.0034382143057882786,
    0.004032120108604431,
    0.012965752743184566,
    0.017516646534204483,
    0.015842260792851448,
    -0.015198266133666039,
    0.020350221544504166,
    -0.00965991523116827,
    0.008572280406951904,
    0.020579196512699127,
    -0.005488262977451086,
    0.021237501874566078,
    -0.004286140203475952,
    0.0004570570890791714,
    0.005838882178068161,
    0.018060462549328804,
    0.015484485775232315,
    0.02525888942182064,
    0.019348451867699623,
    0.006368388421833515,
    -0.03440360724925995,
    -0.006246745120733976,
    0.013423704542219639,
    0.005323686636984348,
    0.012607977725565434,
    -0.02148078940808773,
    0.029180098325014114,
    0.02774900011718273,
    0.01803184114396572,
    0.010597284883260727,
    -0.00496233394369483,
    0.03849655017256737,
    0.024471784010529518,
    0.022411003708839417,
    0.0062217009253799915,
    0.005212776362895966,
    -0.01811770722270012,
    -0.018275128677487373,
    0.015899505466222763,
    -0.011126791127026081,
    0.014826180413365364,
    0.037838246673345566,
    0.019792092964053154,
    -0.042160164564847946,
    -0.03108346089720726,
    0.031140703707933426,
    -0.003581324126571417,
    0.000729413004592061,
    -0.02482955902814865,
    -0.004307606723159552,
    -0.012321758083999157,
    5.059157047071494e-05,
    -0.032113850116729736,
    0.013802945613861084,
    0.0015080200973898172,
    0.034260500222444534,
    0.016429010778665543,
    -0.0020822484511882067,
    0.019777782261371613,
    -0.0343177430331707,
    0.00628610048443079,
    -0.006042813416570425,
    -0.04021386802196503,
    -0.03245731443166733,
    -0.026060303673148155,
    0.011205501854419708,
    -0.012214425951242447,
    0.011713541112840176,
    0.0033720259089022875,
    -0.007513267453759909,
    0.005881814751774073,
    0.02352725900709629,
    -0.040528710931539536,
    -0.01931983046233654,
    -0.04696865379810333,
    -0.003166305599734187,
    -0.005881814751774073,
    0.028765080496668816,
    -0.0017906620632857084,
    -0.0013953211018815637,
    0.016328833997249603,
    0.01213571522384882,
    0.0018157062586396933,
    0.013108862563967705,
    -0.013137484900653362,
    0.015785016119480133,
    0.023140862584114075,
    0.017101626843214035,
    0.00720200315117836,
    0.004454294219613075,
    -0.0251587126404047,
    0.0044399830512702465,
    -0.023326905444264412,
    -0.017731310799717903,
    0.0003398859116714448,
    -0.015570351853966713,
    -0.011184034869074821,
    -0.03477569296956062,
    0.024099700152873993,
    -0.00296952947974205,
    0.019133787602186203,
    0.02988133765757084,
    -0.017545267939567566,
    0.006311144679784775,
    0.03537675738334656,
    0.002302279695868492,
    -0.00036135237314738333,
    -0.0196346715092659,
    0.0013058774638921022,
    0.004708314314484596,
    -0.02913716621696949,
    -0.009581204503774643,
    -0.03946969658136368,
    0.013008685782551765,
    0.015928126871585846,
    -0.0001819060416892171,
    0.00890143308788538,
    0.00246685603633523,
    -0.033945657312870026,
    -0.01824650540947914,
    0.013244817033410072,
    0.025516487658023834,
    0.03740891441702843,
    -0.01715887151658535,
    -0.001473137061111629,
    -0.009974757209420204,
    0.012786865234375,
    -0.004733358509838581,
    0.016013992950320244,
    -0.005137643776834011,
    -0.015441552735865116,
    -0.01267953310161829,
    -0.0006931883399374783,
    -0.0018765279091894627,
    -0.021609587594866753,
    -0.026790164411067963,
    -0.024972669780254364,
    -0.00409651966765523,
    0.007727932184934616,
    0.011005147360265255,
    0.022797400131821632,
    0.004683270119130611,
    -0.004032120108604431,
    -0.018818946555256844,
    0.01063306163996458,
    -0.015928126871585846,
    -0.002008904470130801,
    -0.010060622356832027,
    -0.001889050006866455,
    0.023069309070706367,
    0.017645444720983505,
    0.010783327743411064,
    0.012064160779118538,
    -0.006357655394822359,
    0.0055097294971346855,
    0.007613444235175848,
    0.009538271464407444,
    -0.0182321947067976,
    0.017130250111222267,
    -0.007055315654724836,
    0.003931943327188492,
    -0.0027512868400663137,
    0.013674146495759487,
    -0.0118781179189682,
    -0.03789548948407173,
    -0.007928285747766495,
    0.008486414328217506,
    0.007763709407299757,
    0.00830037146806717,
    -0.012235892005264759,
    -0.009395161643624306,
    -0.012865575961768627,
    0.0025401997845619917,
    -0.007108982186764479,
    0.01284410897642374,
    -0.02666136622428894,
    0.00525928707793355,
    0.014697382226586342,
    -0.020436087623238564,
    0.025945816189050674,
    0.03271491080522537,
    0.026561189442873,
    -0.010668839327991009,
    0.021280435845255852,
    0.01440400630235672,
    -0.007770865224301815,
    0.004375583957880735,
    -0.020421776920557022,
    -0.04573790729045868,
    -0.03380254656076431,
    0.0005934586515650153,
    0.024858182296156883,
    -0.005513307172805071,
    -0.023999521508812904,
    0.009309295564889908,
    -0.020106934010982513,
    0.014497027732431889,
    0.002105503808706999,
    -0.0005465007270686328,
    0.01983502507209778,
    0.00900876522064209,
    -0.03073999658226967,
    -0.025745462626218796,
    -0.040958039462566376,
    -0.02880801260471344,
    0.007692154496908188,
    0.010912125930190086,
    0.010339686647057533,
    0.012099938467144966,
    0.0018997832667082548,
    -0.0016690186457708478,
    0.006139412522315979,
    -0.005545506719499826,
    0.04270397871732712,
    0.02288326621055603,
    0.011498876847326756,
    0.02448609657585621,
    -0.0007052632281556726,
    0.010325375944375992,
    -0.02178131975233555,
    0.0046403370797634125,
    0.0003094750572927296,
    0.028192641213536263,
    0.010339686647057533,
    -0.01289419736713171,
    -0.030367910861968994,
    0.022496869787573814,
    -0.012586511671543121,
    -0.0150980893522501,
    0.0008416648488491774,
    0.03823895379900932,
    0.020979903638362885,
    -7.339970034081489e-05,
    -0.03849655017256737,
    -0.009752936661243439,
    -0.01598536968231201,
    0.007534733973443508,
    -0.022368069738149643,
    -0.005491840653121471,
    0.029623739421367645,
    -0.0034722029231488705,
    -0.010804793797433376,
    0.046138618141412735,
    0.0037423225585371256,
    0.008214505389332771,
    -0.00011538231774466112,
    -0.027562957257032394,
    -0.008887121453881264,
    -0.011763629503548145,
    -0.002692254027351737,
    -0.024657826870679855,
    -0.001638607820495963,
    0.03471845015883446,
    0.0017817176412791014,
    0.01424658577889204,
    0.030997594818472862,
    -0.022639978677034378,
    -0.026689987629652023,
    -0.017445091158151627,
    -0.008293216116726398,
    0.04799904301762581,
    -0.03886863589286804,
    0.020564885810017586,
    -0.03612092509865761,
    0.007692154496908188,
    -0.020464709028601646,
    -0.005101866088807583,
    0.0003810299967881292,
    -0.0035455466713756323,
    -0.018203573301434517,
    -0.008078550919890404,
    0.01705869473516941,
    -0.0014257319271564484,
    -0.02082248404622078,
    -0.01046848576515913,
    0.0024722227826714516,
    -0.016242967918515205,
    -0.022711534053087234,
    -0.0037959888577461243,
    0.008715390227735043,
    -0.026418078690767288,
    -0.006157301366329193,
    -0.04490787163376808,
    0.003075073007494211,
    0.020321598276495934,
    0.004865734837949276,
    -0.010862037539482117,
    -0.008758323267102242,
    0.06674643605947495,
    -0.030138935893774033,
    0.008565125055611134,
    -0.017788555473089218,
    0.006844228599220514,
    -0.022826021537184715,
    -0.0009695692569948733,
    -0.01554173044860363,
    -0.0034292698837816715,
    0.015556041151285172,
    -0.0018389616161584854,
    -0.009888891130685806,
    -0.037494782358407974,
    -0.007108982186764479,
    0.0168297179043293,
    -0.002767386846244335,
    -0.030911728739738464,
    0.015183955430984497,
    0.009223430417478085,
    0.03703682869672775,
    -0.03228558227419853,
    -0.01919103041291237,
    0.02882232517004013,
    0.0030589730013161898,
    -0.005173420999199152,
    0.00452942680567503,
    0.0004208324244245887,
    -0.001117151346988976,
    0.008972987532615662,
    0.010811949148774147,
    -0.030367910861968994,
    -0.02555941976606846,
    -0.024357296526432037,
    0.010153643786907196,
    -0.018833257257938385,
    -0.023670369759202003,
    0.017301980406045914,
    0.03128381446003914,
    -0.01214287057518959,
    0.009638448245823383,
    -0.006150146014988422,
    -0.007921130396425724,
    -5.7914767239708453e-05,
    0.0027852754574269056,
    0.0427326038479805,
    0.017187492921948433,
    0.02073661796748638,
    0.011591898277401924,
    0.005016000475734472,
    7.859861216275021e-05,
    -0.011441633105278015,
    -0.032428693026304245,
    -0.03666474297642708,
    0.0009767247829586267,
    0.021981673315167427,
    0.0055097294971346855,
    -0.016242967918515205,
    0.007599133066833019,
    -0.0031859830487519503,
    -0.03529088944196701,
    -0.015942437574267387,
    -0.014912046492099762,
    0.00528790894895792,
    0.01887618936598301,
    0.010189421474933624,
    0.03832481801509857,
    0.009931824170053005,
    0.0006676969351246953,
    0.041387367993593216,
    -0.01867583580315113,
    -0.011735008098185062,
    0.004278984386473894,
    0.016314523294568062,
    0.03294388949871063,
    0.0132805947214365,
    -0.04210291802883148,
    -0.03368806093931198,
    0.017931664362549782,
    0.001242372440174222,
    0.01801753044128418,
    0.01725904829800129,
    0.009638448245823383,
    0.014110631309449673,
    0.006686808075755835,
    -0.009151875041425228,
    -0.008429170586168766,
    0.01638607867062092,
    0.005917592439800501,
    -0.03343046084046364,
    -0.02882232517004013,
    0.00841485895216465,
    0.02394227869808674,
    0.014275208115577698,
    -0.02245393581688404,
    0.014361074194312096,
    -0.003336248453706503,
    0.03142692521214485,
    -0.02083679474890232,
    -0.01354534737765789,
    0.03391703590750694,
    0.018003219738602638,
    0.024357296526432037,
    0.010117867030203342,
    0.00815010629594326,
    0.030253423377871513,
    -0.007058893330395222,
    -0.011083858087658882,
    -0.04336228594183922,
    0.02555941976606846,
    -0.02029297687113285,
    -0.0021949473302811384,
    0.002710142871364951,
    -0.022496869787573814,
    0.01715887151658535,
    0.005016000475734472,
    0.012006917037069798,
    0.009094631299376488,
    0.00921627413481474,
    -0.01132714468985796,
    -0.020550575107336044,
    -0.03248593583703041,
    0.0016403966583311558,
    0.013044463470578194,
    -0.02364174835383892,
    -0.002253980142995715,
    -0.00825743842869997,
    -0.02331259474158287,
    0.013037307187914848,
    -0.01640038937330246,
    -3.7454530684044585e-05,
    -0.02956649474799633,
    -0.014232275076210499,
    -0.008328993804752827,
    0.030940350145101547,
    -0.041158393025398254,
    -0.006693963427096605,
    0.00647214287891984,
    -0.026289280503988266,
    -0.0036743455566465855,
    0.1803184151649475,
    0.004708314314484596,
    0.025287510827183723,
    -0.006100057624280453,
    -0.016901273280382156,
    0.02232513763010502,
    0.015427242033183575,
    0.01062590628862381,
    0.0048872013576328754,
    0.033716682344675064,
    0.021509410813450813,
    -0.03116932511329651,
    -0.0011636619456112385,
    0.011591898277401924,
    -0.00528790894895792,
    -0.0037423225585371256,
    -0.02082248404622078,
    -0.048829082399606705,
    -0.013352149166166782,
    0.0206221304833889,
    -0.003527657827362418,
    -0.025316132232546806,
    -0.022496869787573814,
    -0.03265766799449921,
    0.02956649474799633,
    0.012014072388410568,
    0.005391663871705532,
    -0.003924787510186434,
    0.0038675437681376934,
    -0.017416469752788544,
    -0.016056925058364868,
    -0.007906819693744183,
    -0.015498797409236431,
    -0.041072528809309006,
    -0.032228339463472366,
    -0.01920534297823906,
    0.0039390986785292625,
    -0.02298344299197197,
    0.00018112341058440506,
    0.009724314324557781,
    0.02060781978070736,
    -0.02750571444630623,
    -0.01857565902173519,
    -0.04920116811990738,
    -0.005416708067059517,
    0.010683150961995125,
    -0.019133787602186203,
    0.012421934865415096,
    0.005921170115470886,
    0.0072306254878640175,
    -0.008085706271231174,
    -0.03182763233780861,
    0.00555624021217227,
    0.020636441186070442,
    0.00603923574090004,
    -0.012607977725565434,
    0.0002359076461289078,
    -0.007606288883835077,
    0.015899505466222763,
    0.00201248237863183,
    -0.026890341192483902,
    0.017430780455470085,
    -0.0349760465323925,
    0.01122696790844202,
    -0.06777682900428772,
    0.004919401369988918,
    -0.02460058405995369,
    0.01359543576836586,
    0.003205660730600357,
    -0.037924110889434814,
    -0.015498797409236431,
    -0.02199598401784897,
    -0.028736459091305733,
    -0.012815487571060658,
    -0.0141893420368433,
    -0.007971218787133694,
    0.03726580739021301,
    0.0023398459888994694,
    0.0011144679738208652,
    0.0315127894282341,
    -0.006486454047262669,
    -0.01474031526595354,
    -0.0027459203265607357,
    0.0334877073764801,
    -0.027262426912784576,
    -0.011727852746844292,
    0.023112241178750992,
    -0.005846037529408932,
    0.006865695118904114,
    -0.010454175062477589,
    -0.007456023246049881,
    -0.0029480629600584507,
    0.013910277746617794,
    -0.001989227021113038,
    0.014332451857626438,
    -0.003692234167829156,
    -0.001720895990729332,
    0.04175945371389389,
    -0.023155175149440765,
    -0.00642205448821187,
    -0.03500467166304588,
    0.06405597180128098,
    0.004729780834168196,
    -0.024901114404201508,
    -0.01660074293613434,
    0.008443481288850307,
    0.0010608017910271883,
    -0.010811949148774147,
    0.011091013438999653,
    -0.020006757229566574,
    -0.008665301837027073,
    -0.02762020193040371,
    0.005656416993588209,
    -0.008980142883956432,
    0.020479019731283188,
    -0.01834668405354023,
    -0.002663632156327367,
    0.002404245547950268,
    0.027977976948022842,
    -0.0029355408623814583,
    0.006075013428926468,
    -0.019577428698539734,
    0.005244975909590721,
    -0.012650910764932632,
    -0.009953290224075317,
    0.008243127726018429,
    -0.018733080476522446,
    0.03989902883768082,
    0.019305519759655,
    -0.01692989654839039,
    0.00960267148911953,
    0.005030311178416014,
    0.008028462529182434,
    0.013058774173259735,
    -0.023870723322033882,
    -0.013337838463485241,
    -0.023112241178750992,
    -0.007058893330395222,
    0.012278825044631958,
    0.018818946555256844,
    -0.019792092964053154,
    -0.0023398459888994694,
    -0.012593667022883892,
    -0.007778020575642586,
    -0.0026815207675099373,
    -0.01182087417691946,
    -0.00402496475726366,
    -0.02633221261203289,
    -0.017960285767912865,
    -0.005173420999199152,
    -0.018518414348363876,
    -0.0029409073758870363,
    -0.0038961656391620636,
    -2.8021020625601523e-05,
    0.020364532247185707,
    -0.044879250228405,
    -0.01209278218448162,
    -0.026704298332333565,
    0.012751087546348572,
    0.013802945613861084,
    -0.034374985843896866,
    0.012379002757370472,
    -0.004683270119130611,
    0.006983760744333267,
    -0.009388006292283535,
    -0.02253980189561844,
    -0.18008944392204285,
    -0.0024525451008230448,
    -0.00890143308788538,
    -0.02936614118516445,
    0.02427143044769764,
    -0.016486255452036858,
    0.016328833997249603,
    -0.007584822364151478,
    -0.01056866254657507,
    -0.012643755413591862,
    0.005831726361066103,
    -0.020679373294115067,
    -0.04241776093840599,
    -0.03786686807870865,
    -0.015913816168904305,
    -0.02460058405995369,
    0.022310826927423477,
    -0.025931505486369133,
    0.04064319655299187,
    0.0014972868375480175,
    0.025874260812997818,
    -0.042475003749132156,
    0.04525133594870567,
    -0.006937250029295683,
    0.002921229926869273,
    0.012600822374224663,
    -0.01994951441884041,
    -0.03440360724925995,
    0.006729740649461746,
    -0.027462780475616455,
    -0.004973067436367273,
    0.018647214397788048,
    0.005273598246276379,
    -0.012171492911875248,
    0.02093697153031826,
    0.024543339386582375,
    0.014461250975728035,
    0.003595635062083602,
    0.0004718152922578156,
    0.02321241796016693,
    0.004300450906157494,
    0.016586432233452797,
    0.03649301081895828,
    -0.005803104490041733,
    -0.01846117153763771,
    0.027648823335766792,
    -0.005076821893453598,
    -0.029509251937270164,
    0.008543658070266247,
    -0.01577070541679859,
    0.036836475133895874,
    -0.012099938467144966,
    0.007599133066833019,
    0.012693843804299831,
    0.008665301837027073,
    0.010547196492552757,
    0.0013031940907239914,
    -0.012808332219719887,
    0.016328833997249603,
    0.02105145901441574,
    -0.016142791137099266,
    -0.042560871690511703,
    0.02331259474158287,
    0.004561626352369785,
    -0.01565621793270111,
    -0.001492814626544714,
    -0.017216116189956665,
    0.018046151846647263,
    -0.00884418934583664,
    0.020350221544504166,
    -0.018275128677487373,
    0.014375384896993637,
    -0.020364532247185707,
    0.011155413463711739,
    -0.015398620627820492,
    0.018690146505832672,
    -0.018303750082850456,
    0.005720816552639008,
    0.010017689317464828,
    -0.030167557299137115,
    -0.026732919737696648,
    0.03225696086883545,
    0.011670608073472977,
    -0.0012888831552118063,
    0.009881735779345036,
    7.177853694884107e-05,
    -0.005749438423663378,
    -0.0005066983285360038,
    -0.015570351853966713,
    -0.04264673590660095,
    0.012357535772025585,
    -0.005280753597617149,
    0.0074417125433683395,
    -0.016872651875019073,
    0.016314523294568062,
    0.01836099475622177,
    -0.01474031526595354,
    0.004812068771570921,
    -0.01348094828426838,
    -0.03746616095304489,
    0.014318141154944897,
    0.016157101839780807,
    0.004275406710803509,
    0.006579475477337837,
    0.032743535935878754,
    0.04410645738244057,
    -0.03343046084046364,
    -0.010497108101844788,
    0.026375146582722664,
    0.0008439008961431682,
    -0.0005974836531095207,
    0.008615213446319103,
    0.00986742414534092,
    0.015384308993816376,
    -0.024428851902484894,
    0.022496869787573814,
    -0.0020983482245355844,
    0.00493371207267046,
    -0.01181371882557869,
    -0.016328833997249603,
    0.04490787163376808,
    0.0011448787990957499,
    -0.025659596547484398,
    0.014883425086736679,
    0.01824650540947914,
    -0.034575339406728745,
    -0.10635924339294434,
    -0.018733080476522446,
    0.005824571009725332,
    -0.001347915967926383,
    -0.024686450138688087,
    -0.0072306254878640175,
    0.0016251913039013743,
    -0.0018532725516706705,
    0.009731469675898552,
    0.02578839473426342,
    -0.013273438438773155,
    0.02397090010344982,
    -0.013760012574493885,
    0.013531036674976349,
    -0.020536264404654503,
    0.025316132232546806,
    -0.021423544734716415,
    0.017001450061798096,
    -0.01122696790844202,
    0.025859950110316277,
    0.01187096256762743,
    0.030081691220402718,
    -0.018103396520018578,
    0.005620639305561781,
    0.00033317762427031994,
    0.010890659876167774,
    -0.04585239663720131,
    0.015026534907519817,
    -0.006060702260583639,
    0.013445170596241951,
    -0.013788633979856968,
    -0.002572399564087391,
    -0.009903201833367348,
    -0.012407624162733555,
    -0.0018192840507254004,
    0.02397090010344982,
    -0.03474707156419754,
    -0.00831468217074871,
    0.016915583983063698,
    -0.026031682267785072,
    -0.005123332608491182,
    0.0003398859116714448,
    0.03411738947033882,
    -0.00631472235545516,
    0.0034006477799266577,
    -0.011713541112840176,
    -0.012829798273742199,
    0.034260500222444534,
    0.06651745736598969,
    -0.024629205465316772,
    -0.003960565198212862,
    -0.022425314411520958,
    -0.008972987532615662,
    -0.008786944672465324,
    0.01834668405354023,
    -0.006139412522315979,
    -0.006425632629543543,
    0.00982449110597372,
    -0.006325455382466316,
    -0.021409234032034874,
    -0.010590129531919956,
    0.021509410813450813,
    0.022725844755768776,
    0.022611357271671295,
    0.011212657205760479,
    -0.00982449110597372,
    0.02321241796016693,
    0.01811770722270012,
    0.02709069475531578,
    -0.03443223237991333,
    -0.007413090206682682,
    0.009287829510867596,
    -0.05452485382556915,
    0.011606208980083466,
    -0.01953449472784996,
    0.008715390227735043,
    -0.011641986668109894,
    0.0021448589395731688,
    0.004461449570953846,
    -0.01577070541679859,
    -0.015427242033183575,
    0.0021072926465421915,
    -0.03208522871136665,
    -0.01811770722270012,
    0.004794179927557707,
    0.014640137553215027,
    0.0069157835096120834,
    0.01197829470038414,
    0.0025831328239291906,
    -0.02168114297091961,
    0.025602351874113083,
    0.0069336723536252975,
    0.008006996475160122,
    -0.0027995863929390907,
    -0.004160918761044741,
    -0.007363001815974712,
    0.003484725020825863,
    0.01919103041291237,
    0.0011878118384629488,
    0.0025312555953860283,
    -0.035577110946178436,
    -0.001407843199558556,
    -0.08483552187681198,
    0.021924428641796112,
    0.014060542918741703,
    -0.011155413463711739,
    0.011484566144645214,
    -0.03142692521214485,
    -0.00513048842549324,
    -0.023484326899051666,
    -0.00460813706740737,
    0.006207389757037163,
    -0.015498797409236431,
    -0.009774402715265751,
    0.009345073252916336,
    -0.005012422800064087,
    0.012758243829011917,
    -0.01289419736713171,
    0.014811869710683823,
    -0.015441552735865116,
    0.03417463228106499,
    0.023555882275104523,
    -0.007302180398255587,
    -0.004751247353851795,
    0.012421934865415096,
    0.03486156091094017,
    -0.008744011633098125,
    -0.0013532825978472829,
    -0.0005066983285360038,
    0.03746616095304489,
    -0.02547355368733406,
    -0.021767009049654007,
    0.021938741207122803,
    -0.006139412522315979,
    -0.006146568339318037,
    -0.009473872371017933,
    -0.010783327743411064,
    0.0024346564896404743,
    0.03829619660973549,
    0.006375543773174286,
    0.0358060859143734,
    0.010711772367358208,
    -0.029308898374438286,
    -0.015412931330502033,
    0.027477091178297997,
    -0.018389616161584854,
    0.01628590188920498,
    0.003685078816488385,
    0.008286060765385628,
    0.022911887615919113,
    0.022854642942547798,
    -0.00676909601315856,
    0.032743535935878754,
    0.021609587594866753,
    -0.02753433585166931,
    -0.005062511190772057,
    -0.007971218787133694,
    0.0022754466626793146,
    0.010089244693517685,
    0.0066259861923754215,
    -0.0038675437681376934,
    -0.0008506092126481235,
    0.024843869730830193,
    -0.017888732254505157,
    -0.006218123249709606,
    0.018833257257938385,
    0.0018801057012751698,
    -0.0035741685424000025,
    -0.04276122525334358,
    -0.019677605479955673,
    0.012593667022883892,
    0.004815646447241306,
    -0.009523960761725903,
    -0.016257278621196747,
    0.036521635949611664,
    0.005058933515101671,
    0.024357296526432037,
    0.022411003708839417,
    -0.01887618936598301,
    0.013988988474011421,
    -0.036407146602869034,
    -0.0004322364693507552,
    0.020679373294115067,
    -0.023341216146945953,
    -0.008443481288850307,
    -0.006837073247879744,
    0.0475124716758728,
    0.006708274595439434,
    -0.01824650540947914,
    0.01128421165049076,
    0.0022271471098065376,
    0.010167955420911312,
    -0.017287669703364372,
    0.015141022391617298,
    -0.008243127726018429,
    0.0027477091643959284,
    0.014454095624387264,
    0.016457632184028625,
    -0.010339686647057533,
    0.006536542437970638,
    0.031799010932445526,
    -0.0012575777946040034,
    0.009144719690084457,
    -0.020021067932248116,
    0.009624137543141842,
    -0.017545267939567566,
    -0.03612092509865761,
    0.004207429476082325,
    -0.02578839473426342,
    -0.007878197357058525,
    -0.0008470314205624163,
    0.03560573235154152,
    -0.00674762949347496,
    -0.019706226885318756,
    -0.013681301847100258,
    0.01821788400411606,
    -0.03852517157793045,
    0.02893681265413761,
    0.020479019731283188,
    0.01661505363881588,
    -0.02105145901441574,
    0.03420325368642807,
    0.009967600926756859,
    0.019620360806584358,
    0.04032835736870766,
    -0.01791735365986824,
    -0.007985529489815235,
    0.03531951084733009,
    0.0013693823711946607,
    -0.026732919737696648,
    -0.009144719690084457,
    -0.0031287390738725662,
    -0.004382739309221506,
    0.020693683996796608,
    -0.031684521585702896,
    -0.0068191844038665295,
    0.008715390227735043,
    -0.002960585057735443,
    -0.012128559872508049,
    0.008371926844120026,
    0.008450636640191078,
    0.0759054645895958,
    -0.026031682267785072,
    -0.007463179063051939,
    -0.004812068771570921,
    0.001735206926241517,
    0.010497108101844788,
    0.02083679474890232,
    0.0033487705513834953,
    0.024886803701519966,
    -0.028221262618899345,
    0.009888891130685806,
    -0.008006996475160122,
    -0.002152014523744583,
    -0.03411738947033882,
    -0.002985629253089428,
    0.0283786840736866,
    -0.019462939351797104,
    -0.010733239352703094,
    -0.005566973239183426,
    0.02784917689859867,
    0.015699150040745735,
    0.026146169751882553,
    0.011355767026543617,
    -0.0048514241352677345,
    -0.023355528712272644,
    0.014654449187219143,
    0.031884875148534775,
    0.023770546540617943,
    0.008443481288850307,
    -0.04874321445822716,
    0.013717079535126686,
    -0.017931664362549782,
    -0.0012531057000160217,
    -0.009781558066606522,
    0.004686847794800997,
    -0.01257935632020235,
    -0.03818170726299286,
    -0.0007718987762928009,
    0.011584742926061153,
    -0.0068191844038665295,
    -0.0006346027366816998,
    0.013108862563967705,
    -0.021938741207122803,
    -0.027920732274651527,
    0.039097610861063004,
    -0.008171572349965572,
    0.0033827591687440872,
    -0.00910894200205803,
    -0.06960863620042801
  ]
}
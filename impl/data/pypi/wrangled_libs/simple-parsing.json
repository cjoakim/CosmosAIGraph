{
  "classifiers": [
    "license :: osi approved :: mit license",
    "operating system :: os independent",
    "programming language :: python :: 3"
  ],
  "description": "![build status](https://github.com/lebrice/simpleparsing/actions/workflows/build.yml/badge.svg) [![pypi version](https://badge.fury.io/py/simple-parsing.svg)](https://badge.fury.io/py/simple-parsing)\n\n\n# simple, elegant, typed argument parsing <!-- omit in toc -->\n\n`simple-parsing` allows you to transform your ugly `argparse` scripts into beautifully structured, strongly typed little works of art. this isn't a fancy, complicated new command-line tool either, ***this simply adds new features to plain-old argparse!***\nusing [dataclasses](https://docs.python.org/3.7/library/dataclasses.html), `simple-parsing` makes it easier to share and reuse command-line arguments - ***no more copy pasting!***\n\nsupports inheritance, **nesting**, easy serialization to json/yaml, automatic help strings from comments, and much more!\n\n```python\n# examples/demo.py\nfrom dataclasses import dataclass\nfrom simple_parsing import argumentparser\n\nparser = argumentparser()\nparser.add_argument(\"--foo\", type=int, default=123, help=\"foo help\")\n\n@dataclass\nclass options:\n    \"\"\" help string for this group of command-line arguments \"\"\"\n    log_dir: str                # help string for a required str argument\n    learning_rate: float = 1e-4 # help string for a float argument\n\nparser.add_arguments(options, dest=\"options\")\n\nargs = parser.parse_args()\nprint(\"foo:\", args.foo)\nprint(\"options:\", args.options)\n```\n```console\n$ python examples/demo.py --log_dir logs --foo 123\nfoo: 123\noptions: options(log_dir='logs', learning_rate=0.0001)\n```\n```console\n$ python examples/demo.py --help\nusage: demo.py [-h] [--foo int] --log_dir str [--learning_rate float]\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --foo int             foo help (default: 123)\n\noptions ['options']:\n   help string for this group of command-line arguments\n\n  --log_dir str         help string for a required str argument (default:\n                        none)\n  --learning_rate float\n                        help string for a float argument (default: 0.0001)\n```\n\n### (*new*) simplified api:\n\nfor a simple use-case, where you only want to parse a single dataclass, you can use the `simple_parsing.parse` or `simple_parsing.parse_known_args` functions:\n\n```python\noptions: options = simple_parsing.parse(options)\n# or:\noptions, leftover_args = simple_parsing.parse_known_args(options)\n```\n\n\n## installation\n\n`pip install simple-parsing`\n\n## [examples](https://github.com/lebrice/simpleparsing/tree/master/examples/readme.md)\n\n## [api documentation](https://github.com/lebrice/simpleparsing/tree/master/docs/readme.md) (under construction)\n\n## features\n- ### [automatic \"--help\" strings](https://github.com/lebrice/simpleparsing/tree/master/examples/docstrings/readme.md)\n\n    as developers, we want to make it easy for people coming into our projects to understand how to run them. however, a user-friendly `--help` message is often hard to write and to maintain, especially as the number of arguments increases.\n\n    with `simple-parsing`, your arguments and their descriptions are defined in the same place, making your code easier to read, write, and maintain.\n\n- ### modular, reusable, cleanly grouped arguments\n\n    *(no more copy-pasting)*\n\n    when you need to add a new group of command-line arguments similar to an existing one, instead of copy-pasting a block of `argparse` code and renaming variables, you can reuse your argument class, and let the `argumentparser` take care of adding relevant prefixes to the arguments for you:\n\n    ```python\n    parser.add_arguments(options, dest=\"train\")\n    parser.add_arguments(options, dest=\"valid\")\n    args = parser.parse_args()\n    train_options: options = args.train\n    valid_options: options = args.valid\n    print(train_options)\n    print(valid_options)\n    ```\n    ```console\n    $ python examples/demo.py \\\n        --train.log_dir \"training\" \\\n        --valid.log_dir \"validation\"\n    options(log_dir='training', learning_rate=0.0001)\n    options(log_dir='validation', learning_rate=0.0001)\n    ```\n\n    these prefixes can also be set explicitly, or not be used at all. for more info, take a look at the [prefixing guide](https://github.com/lebrice/simpleparsing/tree/master/examples/prefixing/readme.md)\n\n- ### [argument subgroups](https://github.com/lebrice/simpleparsing/tree/master/examples/subgroups/readme.md)\n\n    it's easy to choose between different argument groups of arguments, with the `subgroups`\n    function!\n\n- ### [setting defaults from configuration files](https://github.com/lebrice/simpleparsing/tree/master/examples/config_files/readme.md)\n\n    default values for command-line arguments can easily be read from many different formats, including json/yaml!\n\n- ### [**easy serialization**](https://github.com/lebrice/simpleparsing/tree/master/examples/serialization/readme.md):\n\n    easily save/load configs to `json` or `yaml`!.\n\n- ### [**inheritance**!](https://github.com/lebrice/simpleparsing/tree/master/examples/inheritance/readme.md)\n\n    you can easily customize an existing argument class by extending it and adding your own attributes, which helps promote code reuse across projects. for more info, take a look at the [inheritance example](https://github.com/lebrice/simpleparsing/tree/master/examples/inheritance_example.py)\n\n- ### [**nesting**!](https://github.com/lebrice/simpleparsing/tree/master/examples/nesting/readme.md):\n\n    dataclasses can be nested within dataclasses, as deep as you need!\n\n- ### [easier parsing of lists and tuples](https://github.com/lebrice/simpleparsing/tree/master/examples/container_types/readme.md) :\n    this is sometimes tricky to do with regular `argparse`, but `simple-parsing` makes it a lot easier by using the python's builtin type annotations to automatically convert the values to the right type for you.\n    as an added feature, by using these type annotations, `simple-parsing` allows you to parse nested lists or tuples, as can be seen in [this example](https://github.com/lebrice/simpleparsing/tree/master/examples/merging/readme.md)\n\n- ### [enums support](https://github.com/lebrice/simpleparsing/tree/master/examples/enums/readme.md)\n\n- (more to come!)\n\n\n## examples:\nadditional examples for all the features mentioned above can be found in the [examples folder](https://github.com/lebrice/simpleparsing/tree/master/examples/readme.md)\n",
  "docs_url": null,
  "keywords": "",
  "license": "",
  "name": "simple-parsing",
  "package_url": "https://pypi.org/project/simple-parsing/",
  "project_url": "https://pypi.org/project/simple-parsing/",
  "project_urls": {
    "Homepage": "https://github.com/lebrice/SimpleParsing"
  },
  "release_url": "https://pypi.org/project/simple-parsing/0.1.4/",
  "requires_dist": [
    "docstring-parser ~=0.15",
    "typing-extensions >=4.5.0",
    "pyyaml ; extra == 'all'",
    "pytest-regressions ; extra == 'all'",
    "pytest-xdist ; extra == 'all'",
    "pytest ; extra == 'all'",
    "numpy ; extra == 'all'",
    "pytest-benchmark ; extra == 'all'",
    "pytest ; extra == 'test'",
    "pytest-xdist ; extra == 'test'",
    "pytest-regressions ; extra == 'test'",
    "pytest-benchmark ; extra == 'test'",
    "numpy ; extra == 'test'",
    "pyyaml ; extra == 'yaml'"
  ],
  "requires_python": ">=3.7",
  "summary": "a small utility for simplifying and cleaning up argument parsing scripts.",
  "version": "0.1.4",
  "releases": [],
  "developers": [
    "fabrice.normandin@gmail.com",
    "fabrice_normandin"
  ],
  "kwds": "argparse parse_args parse_known_args argumentparser simple_parsing",
  "license_kwds": "",
  "libtype": "pypi",
  "id": "pypi_simple_parsing",
  "homepage": "https://github.com/lebrice/simpleparsing",
  "release_count": 69,
  "dependency_ids": [
    "pypi_docstring_parser",
    "pypi_numpy",
    "pypi_pytest",
    "pypi_pytest_benchmark",
    "pypi_pytest_regressions",
    "pypi_pytest_xdist",
    "pypi_pyyaml",
    "pypi_typing_extensions"
  ]
}
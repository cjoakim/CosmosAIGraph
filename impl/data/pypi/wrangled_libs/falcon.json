{
  "classifiers": [
    "development status :: 5 - production/stable",
    "environment :: web environment",
    "intended audience :: developers",
    "intended audience :: system administrators",
    "license :: osi approved :: apache software license",
    "natural language :: english",
    "operating system :: macos :: macos x",
    "operating system :: microsoft :: windows",
    "operating system :: posix",
    "programming language :: cython",
    "programming language :: python",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.12",
    "programming language :: python :: 3.5",
    "programming language :: python :: 3.6",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "programming language :: python :: implementation :: cpython",
    "programming language :: python :: implementation :: pypy",
    "topic :: internet :: www/http :: wsgi",
    "topic :: software development :: libraries :: application frameworks"
  ],
  "description": "the ultra-reliable, fast asgi+wsgi framework for building data plane apis at scale.\n|build status| |docs| |codecov.io| |blue|\n\nthe falcon web framework\n========================\n\n`falcon <https://falconframework.org>`__ is a minimalist asgi/wsgi framework for\nbuilding mission-critical rest apis and microservices, with a focus on\nreliability, correctness, and performance at scale.\n\nwhen it comes to building http apis, other frameworks weigh you down with tons\nof dependencies and unnecessary abstractions. falcon cuts to the chase with a\nclean design that embraces http and the rest architectural style.\n\nfalcon apps work with any `wsgi <https://www.python.org/dev/peps/pep-3333/>`_\nor `asgi <https://asgi.readthedocs.io/en/latest/>`_ server, and run like a\nchamp under cpython 3.5+ and pypy 3.5+ (3.6+ required for asgi).\n\nquick links\n-----------\n\n* `read the docs <https://falcon.readthedocs.io/en/stable>`_\n  (`faq <https://falcon.readthedocs.io/en/stable/user/faq.html>`_ -\n  `getting help <https://falcon.readthedocs.io/en/stable/community/help.html>`_ -\n  `reference <https://falcon.readthedocs.io/en/stable/api/index.html>`_)\n* `falcon add-ons and complementary packages <https://github.com/falconry/falcon/wiki>`_\n* `falcon articles, talks and podcasts <https://github.com/falconry/falcon/wiki/articles,-talks-and-podcasts>`_\n* `falconry/user for falcon users <https://gitter.im/falconry/user>`_ @ gitter\n* `falconry/dev for falcon contributors <https://gitter.im/falconry/dev>`_ @ gitter\n\nwhat people are saying\n----------------------\n\n\"falcon is rock solid and it's fast.\"\n\n\"we have been using falcon as a replacement for [another framework] and\nwe simply love the performance (three times faster) and code base size (easily\nhalf of our [original] code).\"\n\n\"i'm loving #falconframework! super clean and simple, i finally\nhave the speed and flexibility i need!\"\n\n\"falcon looks great so far. i hacked together a quick test for a\ntiny server of mine and was ~40% faster with only 20 minutes of\nwork.\"\n\n\"i feel like i'm just talking http at last, with nothing in the\nmiddle. falcon seems like the requests of backend.\"\n\n\"the source code for falcon is so good, i almost prefer it to\ndocumentation. it basically can't be wrong.\"\n\n\"what other framework has integrated support for 786 try it now ?\"\n\nfeatures\n--------\n\nfalcon tries to do as little as possible while remaining highly effective.\n\n- asgi, wsgi, and websocket support\n- native ``asyncio`` support\n- no reliance on magic globals for routing and state management\n- stable interfaces with an emphasis on backwards-compatibility\n- simple api modeling through centralized restful routing\n- highly-optimized, extensible code base\n- easy access to headers and bodies through request and response\n  classes\n- dry request processing via middleware components and hooks\n- strict adherence to rfcs\n- idiomatic http error responses\n- straightforward exception handling\n- snappy testing with wsgi/asgi helpers and mocks\n- cpython 3.5+ and pypy 3.5+ support\n\nsupport falcon development\n--------------------------\n\nhas falcon helped you make an awesome app? show your support today with a one-time donation or by becoming a patron. supporters get cool gear, an opportunity to promote their brand to python developers, and\nprioritized support.\n\n* `learn how to support falcon development <https://falconframework.org/#sectionsupportfalcondevelopment>`_\n\nthanks!\n\nhow is falcon different?\n------------------------\n\n    perfection is finally attained not when there is no longer anything\n    to add, but when there is no longer anything to take away.\n\n    *- antoine de saint-exup\u00e9ry*\n\nwe designed falcon to support the demanding needs of large-scale\nmicroservices and responsive app backends. falcon complements more\ngeneral python web frameworks by providing bare-metal performance,\nreliability, and flexibility wherever you need it.\n\n**reliable.** we go to great lengths to avoid introducing breaking changes, and\nwhen we do they are fully documented and only introduced (in the spirit of\n`semver <http://semver.org/>`_) with a major version increment. the code is\nrigorously tested with numerous inputs and we require 100% coverage at all\ntimes. falcon has no dependencies outside the standard library, helping\nminimize your app's attack surface while avoiding transitive bugs and breaking\nchanges.\n\n**debuggable.** falcon eschews magic. it's easy to tell which inputs lead to\nwhich outputs. unhandled exceptions are never encapsulated or masked.\npotentially surprising behaviors, such as automatic request body parsing, are\nwell-documented and disabled by default. finally, when it comes to the\nframework itself, we take care to keep logic paths simple and understandable.\nall this makes it easier to reason about the code and to debug edge cases in\nlarge-scale deployments.\n\n**fast.** same hardware, more requests. falcon turns around requests\nsignificantly faster than other popular python frameworks like django and\nflask. for an extra speed boost, falcon compiles itself with cython when\navailable, and also works well with `pypy <https://pypy.org>`_. considering a\nmove to another programming language? benchmark with falcon+pypy first!\n\n**flexible.** falcon leaves a lot of decisions and implementation details to\nyou, the api developer. this gives you a lot of freedom to customize and tune\nyour implementation. it also helps you understand your apps at a deeper level,\nmaking them easier to tune, debug, and refactor over the long run. falcon's\nminimalist design provides space for python community members to independently\ninnovate on `falcon add-ons and complementary packages\n<https://github.com/falconry/falcon/wiki>`_.\n\nwho's using falcon?\n-------------------\n\nfalcon is used around the world by a growing number of organizations,\nincluding:\n\n- 7ideas\n- cronitor\n- emc\n- hurricane electric\n- leadpages\n- openstack\n- rackspace\n- shiftgig\n- tempfil.es\n- opera software\n\nif you are using the falcon framework for a community or commercial\nproject, please consider adding your information to our wiki under\n`who's using falcon? <https://github.com/falconry/falcon/wiki/who's-using-falcon%3f>`_\n\ncommunity\n---------\n\na number of falcon add-ons, templates, and complementary packages are\navailable for use in your projects. we've listed several of these on the\n`falcon wiki <https://github.com/falconry/falcon/wiki>`_ as a starting\npoint, but you may also wish to search pypi for additional resources.\n\nthe falconry community on gitter is a great place to ask questions and\nshare your ideas. you can find us in `falconry/user\n<https://gitter.im/falconry/user>`_. we also have a\n`falconry/dev <https://gitter.im/falconry/dev>`_ room for discussing\nthe design and development of the framework itself.\n\nper our\n`code of conduct <https://github.com/falconry/falcon/blob/master/codeofconduct.md>`_,\nwe expect everyone who participates in community discussions to act\nprofessionally, and lead by example in encouraging constructive\ndiscussions. each individual in the community is responsible for\ncreating a positive, constructive, and productive culture.\n\ninstallation\n------------\n\npypy\n^^^^\n\n`pypy <http://pypy.org/>`__ is the fastest way to run your falcon app.\npypy3.5+ is supported as of pypy v5.10.\n\n.. code:: bash\n\n    $ pip install falcon\n\nor, to install the latest beta or release candidate, if any:\n\n.. code:: bash\n\n    $ pip install --pre falcon\n\ncpython\n^^^^^^^\n\nfalcon also fully supports\n`cpython <https://www.python.org/downloads/>`__ 3.5+.\n\nthe latest stable version of falcon can be installed directly from pypi:\n\n.. code:: bash\n\n    $ pip install falcon\n\nor, to install the latest beta or release candidate, if any:\n\n.. code:: bash\n\n    $ pip install --pre falcon\n\nin order to provide an extra speed boost, falcon can compile itself with\ncython. wheels containing pre-compiled binaries are available from pypi for\nseveral common platforms. however, if a wheel for your platform of choice is not\navailable, you can install the source distribution. the installation process\nwill automatically try to cythonize falcon for your environment, falling back to\na normal pure-python install if any issues are encountered during the\ncythonization step:\n\n.. code:: bash\n\n    $ pip install --no-binary :all: falcon\n\nif you want to verify that cython is being invoked, simply\npass the verbose flag `-v` to pip in order to echo the compilation commands.\n\nthe cythonization step is only active when using the ``cpython`` python\nimplementation, so installing using ``pypy`` will skip it.\nif you want to skip cython compilation step and install\nthe pure-python version directly you can set the environment variable\n``falcon_disable_cython`` to a non empty value before install:\n\n.. code:: bash\n\n    $ falcon_disable_cython=y pip install -v --no-binary :all: falcon\n\nplease note that ``pip>=10`` is required to be able to install falcon from\nsource.\n\n**installing on os x**\n\nxcode command line tools are required to compile cython. install them\nwith this command:\n\n.. code:: bash\n\n    $ xcode-select --install\n\nthe clang compiler treats unrecognized command-line options as\nerrors, for example:\n\n.. code:: bash\n\n    clang: error: unknown argument: '-mno-fused-madd' [-wunused-command-line-argument-hard-error-in-future]\n\nyou might also see warnings about unused functions. you can work around\nthese issues by setting additional clang c compiler flags as follows:\n\n.. code:: bash\n\n    $ export cflags=\"-qunused-arguments -wno-unused-function\"\n\ndependencies\n^^^^^^^^^^^^\n\nfalcon does not require the installation of any other packages, although if\ncython has been installed into the environment, it will be used to optimize\nthe framework as explained above.\n\nwsgi server\n-----------\n\nfalcon speaks `wsgi <https://www.python.org/dev/peps/pep-3333/>`_ (or\n`asgi <https://asgi.readthedocs.io/en/latest/>`_; see also below). in order to\nserve a falcon app, you will need a wsgi server. gunicorn and uwsgi are some of\nthe more popular ones out there, but anything that can load a wsgi app will do.\n\n.. code:: bash\n\n    $ pip install [gunicorn|uwsgi]\n\nasgi server\n-----------\n\nin order to serve a falcon asgi app, you will need an asgi server. uvicorn\nis a popular choice:\n\n.. code:: bash\n\n    $ pip install uvicorn\n\nsource code\n-----------\n\nfalcon `lives on github <https://github.com/falconry/falcon>`_, making the\ncode easy to browse, download, fork, etc. pull requests are always welcome! also,\nplease remember to star the project if it makes you happy. :)\n\nonce you have cloned the repo or downloaded a tarball from github, you\ncan install falcon like this:\n\n.. code:: bash\n\n    $ cd falcon\n    $ pip install .\n\nor, if you want to edit the code, first fork the main repo, clone the fork\nto your desktop, and then run the following to install it using symbolic\nlinking, so that when you change your code, the changes will be automagically\navailable to your app without having to reinstall the package:\n\n.. code:: bash\n\n    $ cd falcon\n    $ pip install -e .\n\nyou can manually test changes to the falcon framework by switching to the\ndirectory of the cloned repo and then running pytest:\n\n.. code:: bash\n\n    $ cd falcon\n    $ pip install -r requirements/tests\n    $ pytest tests\n\nor, to run the default set of tests:\n\n.. code:: bash\n\n    $ pip install tox && tox\n\nsee also the `tox.ini <https://github.com/falconry/falcon/blob/master/tox.ini>`_\nfile for a full list of available environments.\n\nread the docs\n-------------\n\nthe docstrings in the falcon code base are quite extensive, and we\nrecommend keeping a repl running while learning the framework so that\nyou can query the various modules and classes as you have questions.\n\nonline docs are available at: https://falcon.readthedocs.io\n\nyou can build the same docs locally as follows:\n\n.. code:: bash\n\n    $ pip install tox && tox -e docs\n\nonce the docs have been built, you can view them by opening the following\nindex page in your browser. on os x it's as simple as::\n\n    $ open docs/_build/html/index.html\n\nor on linux:\n\n.. code:: bash\n\n    $ xdg-open docs/_build/html/index.html\n\ngetting started\n---------------\n\nhere is a simple, contrived example showing how to create a falcon-based\nwsgi app (the asgi version is included further down):\n\n.. code:: python\n\n    # examples/things.py\n\n    # let's get this party started!\n    from wsgiref.simple_server import make_server\n\n    import falcon\n\n\n    # falcon follows the rest architectural style, meaning (among\n    # other things) that you think in terms of resources and state\n    # transitions, which map to http verbs.\n    class thingsresource:\n        def on_get(self, req, resp):\n            \"\"\"handles get requests\"\"\"\n            resp.status = falcon.http_200  # this is the default status\n            resp.content_type = falcon.media_text  # default is json, so override\n            resp.text = ('\\ntwo things awe me most, the starry sky '\n                         'above me and the moral law within me.\\n'\n                         '\\n'\n                         '    ~ immanuel kant\\n\\n')\n\n\n    # falcon.app instances are callable wsgi apps...\n    # in larger applications the app is created in a separate file\n    app = falcon.app()\n\n    # resources are represented by long-lived class instances\n    things = thingsresource()\n\n    # things will handle all requests to the '/things' url path\n    app.add_route('/things', things)\n\n    if __name__ == '__main__':\n        with make_server('', 8000, app) as httpd:\n            print('serving on port 8000...')\n\n            # serve until process is killed\n            httpd.serve_forever()\n\nyou can run the above example directly using the included wsgiref server:\n\n.. code:: bash\n\n    $ pip install falcon\n    $ python things.py\n\nthen, in another terminal:\n\n.. code:: bash\n\n    $ curl localhost:8000/things\n\nthe asgi version of the example is similar:\n\n.. code:: python\n\n    # examples/things_asgi.py\n\n    import falcon\n    import falcon.asgi\n\n\n    # falcon follows the rest architectural style, meaning (among\n    # other things) that you think in terms of resources and state\n    # transitions, which map to http verbs.\n    class thingsresource:\n        async def on_get(self, req, resp):\n            \"\"\"handles get requests\"\"\"\n            resp.status = falcon.http_200  # this is the default status\n            resp.content_type = falcon.media_text  # default is json, so override\n            resp.text = ('\\ntwo things awe me most, the starry sky '\n                         'above me and the moral law within me.\\n'\n                         '\\n'\n                         '    ~ immanuel kant\\n\\n')\n\n\n    # falcon.asgi.app instances are callable asgi apps...\n    # in larger applications the app is created in a separate file\n    app = falcon.asgi.app()\n\n    # resources are represented by long-lived class instances\n    things = thingsresource()\n\n    # things will handle all requests to the '/things' url path\n    app.add_route('/things', things)\n\nyou can run the asgi version with uvicorn or any other asgi server:\n\n.. code:: bash\n\n    $ pip install falcon uvicorn\n    $ uvicorn things_asgi:app\n\na more complex example (wsgi)\n-----------------------------\n\nhere is a more involved example that demonstrates reading headers and query\nparameters, handling errors, and working with request and response bodies.\nnote that this example assumes that the\n`requests <https://pypi.org/project/requests/>`_ package has been installed.\n\n(for the equivalent asgi app, see: `a more complex example (asgi)`_).\n\n.. code:: python\n\n    # examples/things_advanced.py\n\n    import json\n    import logging\n    import uuid\n    from wsgiref import simple_server\n\n    import falcon\n    import requests\n\n\n    class storageengine:\n\n        def get_things(self, marker, limit):\n            return [{'id': str(uuid.uuid4()), 'color': 'green'}]\n\n        def add_thing(self, thing):\n            thing['id'] = str(uuid.uuid4())\n            return thing\n\n\n    class storageerror(exception):\n\n        @staticmethod\n        def handle(ex, req, resp, params):\n            # todo: log the error, clean up, etc. before raising\n            raise falcon.httpinternalservererror()\n\n\n    class sinkadapter:\n\n        engines = {\n            'ddg': 'https://duckduckgo.com',\n            'y': 'https://search.yahoo.com/search',\n        }\n\n        def __call__(self, req, resp, engine):\n            url = self.engines[engine]\n            params = {'q': req.get_param('q', true)}\n            result = requests.get(url, params=params)\n\n            resp.status = str(result.status_code) + ' ' + result.reason\n            resp.content_type = result.headers['content-type']\n            resp.text = result.text\n\n\n    class authmiddleware:\n\n        def process_request(self, req, resp):\n            token = req.get_header('authorization')\n            account_id = req.get_header('account-id')\n\n            challenges = ['token type=\"fernet\"']\n\n            if token is none:\n                description = ('please provide an auth token '\n                               'as part of the request.')\n\n                raise falcon.httpunauthorized(title='auth token required',\n                                              description=description,\n                                              challenges=challenges,\n                                              href='http://docs.example.com/auth')\n\n            if not self._token_is_valid(token, account_id):\n                description = ('the provided auth token is not valid. '\n                               'please request a new token and try again.')\n\n                raise falcon.httpunauthorized(title='authentication required',\n                                              description=description,\n                                              challenges=challenges,\n                                              href='http://docs.example.com/auth')\n\n        def _token_is_valid(self, token, account_id):\n            return true  # suuuuuure it's valid...\n\n\n    class requirejson:\n\n        def process_request(self, req, resp):\n            if not req.client_accepts_json:\n                raise falcon.httpnotacceptable(\n                    description='this api only supports responses encoded as json.',\n                    href='http://docs.examples.com/api/json')\n\n            if req.method in ('post', 'put'):\n                if 'application/json' not in req.content_type:\n                    raise falcon.httpunsupportedmediatype(\n                        title='this api only supports requests encoded as json.',\n                        href='http://docs.examples.com/api/json')\n\n\n    class jsontranslator:\n        # note: normally you would simply use req.media and resp.media for\n        # this particular use case; this example serves only to illustrate\n        # what is possible.\n\n        def process_request(self, req, resp):\n            # req.stream corresponds to the wsgi wsgi.input environ variable,\n            # and allows you to read bytes from the request body.\n            #\n            # see also: pep 3333\n            if req.content_length in (none, 0):\n                # nothing to do\n                return\n\n            body = req.stream.read()\n            if not body:\n                raise falcon.httpbadrequest(title='empty request body',\n                                            description='a valid json document is required.')\n\n            try:\n                req.context.doc = json.loads(body.decode('utf-8'))\n\n            except (valueerror, unicodedecodeerror):\n                description = ('could not decode the request body. the '\n                               'json was incorrect or not encoded as '\n                               'utf-8.')\n\n                raise falcon.httpbadrequest(title='malformed json',\n                                            description=description)\n\n        def process_response(self, req, resp, resource, req_succeeded):\n            if not hasattr(resp.context, 'result'):\n                return\n\n            resp.text = json.dumps(resp.context.result)\n\n\n    def max_body(limit):\n\n        def hook(req, resp, resource, params):\n            length = req.content_length\n            if length is not none and length > limit:\n                msg = ('the size of the request is too large. the body must not '\n                       'exceed ' + str(limit) + ' bytes in length.')\n\n                raise falcon.httppayloadtoolarge(\n                    title='request body is too large', description=msg)\n\n        return hook\n\n\n    class thingsresource:\n\n        def __init__(self, db):\n            self.db = db\n            self.logger = logging.getlogger('thingsapp.' + __name__)\n\n        def on_get(self, req, resp, user_id):\n            marker = req.get_param('marker') or ''\n            limit = req.get_param_as_int('limit') or 50\n\n            try:\n                result = self.db.get_things(marker, limit)\n            except exception as ex:\n                self.logger.error(ex)\n\n                description = ('aliens have attacked our base! we will '\n                               'be back as soon as we fight them off. '\n                               'we appreciate your patience.')\n\n                raise falcon.httpserviceunavailable(\n                    title='service outage',\n                    description=description,\n                    retry_after=30)\n\n            # note: normally you would use resp.media for this sort of thing;\n            # this example serves only to demonstrate how the context can be\n            # used to pass arbitrary values between middleware components,\n            # hooks, and resources.\n            resp.context.result = result\n\n            resp.set_header('powered-by', 'falcon')\n            resp.status = falcon.http_200\n\n        @falcon.before(max_body(64 * 1024))\n        def on_post(self, req, resp, user_id):\n            try:\n                doc = req.context.doc\n            except attributeerror:\n                raise falcon.httpbadrequest(\n                    title='missing thing',\n                    description='a thing must be submitted in the request body.')\n\n            proper_thing = self.db.add_thing(doc)\n\n            resp.status = falcon.http_201\n            resp.location = '/%s/things/%s' % (user_id, proper_thing['id'])\n\n    # configure your wsgi server to load \"things.app\" (app is a wsgi callable)\n    app = falcon.app(middleware=[\n        authmiddleware(),\n        requirejson(),\n        jsontranslator(),\n    ])\n\n    db = storageengine()\n    things = thingsresource(db)\n    app.add_route('/{user_id}/things', things)\n\n    # if a responder ever raises an instance of storageerror, pass control to\n    # the given handler.\n    app.add_error_handler(storageerror, storageerror.handle)\n\n    # proxy some things to another service; this example shows how you might\n    # send parts of an api off to a legacy system that hasn't been upgraded\n    # yet, or perhaps is a single cluster that all data centers have to share.\n    sink = sinkadapter()\n    app.add_sink(sink, r'/search/(?p<engine>ddg|y)\\z')\n\n    # useful for debugging problems in your api; works with pdb.set_trace(). you\n    # can also use gunicorn to host your app. gunicorn can be configured to\n    # auto-restart workers when it detects a code change, and it also works\n    # with pdb.\n    if __name__ == '__main__':\n        httpd = simple_server.make_server('127.0.0.1', 8000, app)\n        httpd.serve_forever()\n\nagain this code uses wsgiref, but you can also run the above example using\nany wsgi server, such as uwsgi or gunicorn. for example:\n\n.. code:: bash\n\n    $ pip install requests gunicorn\n    $ gunicorn things:app\n\non windows you can run gunicorn and uwsgi via wsl, or you might try waitress:\n\n.. code:: bash\n\n    $ pip install requests waitress\n    $ waitress-serve --port=8000 things:app\n\nto test this example, open another terminal and run:\n\n.. code:: bash\n\n    $ http localhost:8000/1/things authorization:custom-token\n\nyou can also view the application configuration from the cli via the\n``falcon-inspect-app`` script that is bundled with the framework:\n\n.. code:: bash\n\n    falcon-inspect-app things_advanced:app\n\na more complex example (asgi)\n-----------------------------\n\nhere's the asgi version of the app from above. note that it uses the\n`httpx <https://pypi.org/project/httpx/>`_ package in lieu of\n`requests <https://pypi.org/project/requests/>`_.\n\n.. code:: python\n\n    # examples/things_advanced_asgi.py\n\n    import json\n    import logging\n    import uuid\n\n    import falcon\n    import falcon.asgi\n    import httpx\n\n\n    class storageengine:\n\n        async def get_things(self, marker, limit):\n            return [{'id': str(uuid.uuid4()), 'color': 'green'}]\n\n        async def add_thing(self, thing):\n            thing['id'] = str(uuid.uuid4())\n            return thing\n\n\n    class storageerror(exception):\n\n        @staticmethod\n        async def handle(ex, req, resp, params):\n            # todo: log the error, clean up, etc. before raising\n            raise falcon.httpinternalservererror()\n\n\n    class sinkadapter:\n\n        engines = {\n            'ddg': 'https://duckduckgo.com',\n            'y': 'https://search.yahoo.com/search',\n        }\n\n        async def __call__(self, req, resp, engine):\n            url = self.engines[engine]\n            params = {'q': req.get_param('q', true)}\n\n            async with httpx.asyncclient() as client:\n                result = await client.get(url, params=params)\n\n            resp.status = result.status_code\n            resp.content_type = result.headers['content-type']\n            resp.text = result.text\n\n\n    class authmiddleware:\n\n        async def process_request(self, req, resp):\n            token = req.get_header('authorization')\n            account_id = req.get_header('account-id')\n\n            challenges = ['token type=\"fernet\"']\n\n            if token is none:\n                description = ('please provide an auth token '\n                               'as part of the request.')\n\n                raise falcon.httpunauthorized(title='auth token required',\n                                              description=description,\n                                              challenges=challenges,\n                                              href='http://docs.example.com/auth')\n\n            if not self._token_is_valid(token, account_id):\n                description = ('the provided auth token is not valid. '\n                               'please request a new token and try again.')\n\n                raise falcon.httpunauthorized(title='authentication required',\n                                              description=description,\n                                              challenges=challenges,\n                                              href='http://docs.example.com/auth')\n\n        def _token_is_valid(self, token, account_id):\n            return true  # suuuuuure it's valid...\n\n\n    class requirejson:\n\n        async def process_request(self, req, resp):\n            if not req.client_accepts_json:\n                raise falcon.httpnotacceptable(\n                    description='this api only supports responses encoded as json.',\n                    href='http://docs.examples.com/api/json')\n\n            if req.method in ('post', 'put'):\n                if 'application/json' not in req.content_type:\n                    raise falcon.httpunsupportedmediatype(\n                        description='this api only supports requests encoded as json.',\n                        href='http://docs.examples.com/api/json')\n\n\n    class jsontranslator:\n        # note: normally you would simply use req.get_media() and resp.media for\n        # this particular use case; this example serves only to illustrate\n        # what is possible.\n\n        async def process_request(self, req, resp):\n            # note: test explicitly for 0, since this property could be none in\n            # the case that the content-length header is missing (in which case we\n            # can't know if there is a body without actually attempting to read\n            # it from the request stream.)\n            if req.content_length == 0:\n                # nothing to do\n                return\n\n            body = await req.stream.read()\n            if not body:\n                raise falcon.httpbadrequest(title='empty request body',\n                                            description='a valid json document is required.')\n\n            try:\n                req.context.doc = json.loads(body.decode('utf-8'))\n\n            except (valueerror, unicodedecodeerror):\n                description = ('could not decode the request body. the '\n                               'json was incorrect or not encoded as '\n                               'utf-8.')\n\n                raise falcon.httpbadrequest(title='malformed json',\n                                            description=description)\n\n        async def process_response(self, req, resp, resource, req_succeeded):\n            if not hasattr(resp.context, 'result'):\n                return\n\n            resp.text = json.dumps(resp.context.result)\n\n\n    def max_body(limit):\n\n        async def hook(req, resp, resource, params):\n            length = req.content_length\n            if length is not none and length > limit:\n                msg = ('the size of the request is too large. the body must not '\n                       'exceed ' + str(limit) + ' bytes in length.')\n\n                raise falcon.httppayloadtoolarge(\n                    title='request body is too large', description=msg)\n\n        return hook\n\n\n    class thingsresource:\n\n        def __init__(self, db):\n            self.db = db\n            self.logger = logging.getlogger('thingsapp.' + __name__)\n\n        async def on_get(self, req, resp, user_id):\n            marker = req.get_param('marker') or ''\n            limit = req.get_param_as_int('limit') or 50\n\n            try:\n                result = await self.db.get_things(marker, limit)\n            except exception as ex:\n                self.logger.error(ex)\n\n                description = ('aliens have attacked our base! we will '\n                               'be back as soon as we fight them off. '\n                               'we appreciate your patience.')\n\n                raise falcon.httpserviceunavailable(\n                    title='service outage',\n                    description=description,\n                    retry_after=30)\n\n            # note: normally you would use resp.media for this sort of thing;\n            # this example serves only to demonstrate how the context can be\n            # used to pass arbitrary values between middleware components,\n            # hooks, and resources.\n            resp.context.result = result\n\n            resp.set_header('powered-by', 'falcon')\n            resp.status = falcon.http_200\n\n        @falcon.before(max_body(64 * 1024))\n        async def on_post(self, req, resp, user_id):\n            try:\n                doc = req.context.doc\n            except attributeerror:\n                raise falcon.httpbadrequest(\n                    title='missing thing',\n                    description='a thing must be submitted in the request body.')\n\n            proper_thing = await self.db.add_thing(doc)\n\n            resp.status = falcon.http_201\n            resp.location = '/%s/things/%s' % (user_id, proper_thing['id'])\n\n\n    # the app instance is an asgi callable\n    app = falcon.asgi.app(middleware=[\n        # authmiddleware(),\n        requirejson(),\n        jsontranslator(),\n    ])\n\n    db = storageengine()\n    things = thingsresource(db)\n    app.add_route('/{user_id}/things', things)\n\n    # if a responder ever raises an instance of storageerror, pass control to\n    # the given handler.\n    app.add_error_handler(storageerror, storageerror.handle)\n\n    # proxy some things to another service; this example shows how you might\n    # send parts of an api off to a legacy system that hasn't been upgraded\n    # yet, or perhaps is a single cluster that all data centers have to share.\n    sink = sinkadapter()\n    app.add_sink(sink, r'/search/(?p<engine>ddg|y)\\z')\n\nyou can run the asgi version with any asgi server, such as uvicorn:\n\n.. code:: bash\n\n    $ pip install falcon httpx uvicorn\n    $ uvicorn things_advanced_asgi:app\n\ncontributing\n------------\n\nthanks for your interest in the project! we welcome pull requests from\ndevelopers of all skill levels. to get started, simply fork the master branch\non github to your personal account and then clone the fork into your\ndevelopment environment.\n\nif you would like to contribute but don't already have something in mind,\nwe invite you to take a look at the issues listed under our\n`next milestone <https://github.com/falconry/falcon/milestones>`_.\nif you see one you'd like to work on, please leave a quick comment so that we don't\nend up with duplicated effort. thanks in advance!\n\nplease note that all contributors and maintainers of this project are subject to our `code of conduct <https://github.com/falconry/falcon/blob/master/codeofconduct.md>`_.\n\nbefore submitting a pull request, please ensure you have added/updated\nthe appropriate tests (and that all existing tests still pass with your\nchanges), and that your coding style follows pep 8 and doesn't cause\npyflakes to complain.\n\ncommit messages should be formatted using `angularjs\nconventions <https://github.com/angular/angular.js/blob/master/developers.md#-git-commit-guidelines>`__.\n\ncomments follow `google's style guide <https://google.github.io/styleguide/pyguide.html?showone=comments#comments>`__,\nwith the additional requirement of prefixing inline comments using your\ngithub nick and an appropriate prefix:\n\n- todo(riker): damage report!\n- note(riker): well, that's certainly good to know.\n- perf(riker): travel time to the nearest starbase?\n- appsec(riker): in all trust, there is the possibility for betrayal.\n\nthe core falcon project maintainers are:\n\n- kurt griffiths, project lead (**kgriffs** on gh, gitter, and twitter)\n- john vrbanac (**jmvrbanac** on gh, gitter, and twitter)\n- vytautas liuolia (**vytas7** on gh and gitter, and **vliuolia** on twitter)\n- nick zaccardi (**nzac** on gh and gitter)\n- federico caselli (**caselit** on gh and gitter)\n\nplease don't hesitate to reach out if you have any questions, or just need a\nlittle help getting started. you can find us in\n`falconry/dev <https://gitter.im/falconry/dev>`_ on gitter.\n\nsee also: `contributing.md <https://github.com/falconry/falcon/blob/master/contributing.md>`__\n\nlegal\n-----\n\ncopyright 2013-2023 by individual and corporate contributors as\nnoted in the individual source files.\n\nlicensed under the apache license, version 2.0 (the \"license\"); you may\nnot use any portion of the falcon framework except in compliance with\nthe license. contributors agree to license their work under the same\nlicense. you may obtain a copy of the license at\nhttp://www.apache.org/licenses/license-2.0\n\nunless required by applicable law or agreed to in writing, software\ndistributed under the license is distributed on an \"as is\" basis,\nwithout warranties or conditions of any kind, either express or implied.\nsee the license for the specific language governing permissions and\nlimitations under the license.\n\n.. |docs| image:: https://readthedocs.org/projects/falcon/badge/?version=stable\n    :target: https://falcon.readthedocs.io/en/stable/?badge=stable\n    :alt: falcon web framework docs\n.. |build status| image:: https://github.com/falconry/falcon/workflows/run%20tests/badge.svg\n   :target: https://github.com/falconry/falcon/actions?query=workflow%3a%22run+tests%22\n.. |codecov.io| image:: https://codecov.io/gh/falconry/falcon/branch/master/graphs/badge.svg\n   :target: http://codecov.io/gh/falconry/falcon\n.. |blue| image:: https://img.shields.io/badge/code%20style-blue-blue.svg\n    :target: https://blue.readthedocs.io/\n    :alt: code style: blue\n",
  "docs_url": null,
  "keywords": "asgi,wsgi,web,api,framework,rest,http,cloud",
  "license": "apache 2.0",
  "name": "falcon",
  "package_url": "https://pypi.org/project/falcon/",
  "project_url": "https://pypi.org/project/falcon/",
  "project_urls": {
    "Chat": "https://gitter.im/falconry/user",
    "Documentation": "https://falcon.readthedocs.io/en/stable/",
    "Funding": "https://opencollective.com/falcon",
    "Homepage": "https://falconframework.org",
    "Issue Tracker": "https://github.com/falconry/falcon/issues",
    "Release Notes": "https://falcon.readthedocs.io/en/stable/changes/",
    "Source": "https://github.com/falconry/falcon"
  },
  "release_url": "https://pypi.org/project/falcon/3.1.3/",
  "requires_dist": [],
  "requires_python": ">=3.5",
  "summary": "the ultra-reliable, fast asgi+wsgi framework for building data plane apis at scale.",
  "version": "3.1.3",
  "releases": [],
  "developers": [
    "kurt_griffiths",
    "mail@kgriffs.com"
  ],
  "kwds": "wsgi asgi things_advanced_asgi django things_asgi",
  "license_kwds": "apache 2.0",
  "libtype": "pypi",
  "id": "pypi_falcon",
  "homepage": "https://falconframework.org",
  "release_count": 80,
  "dependency_ids": [],
  "documentation_summary": "Falcon is a minimal, fast, and secure web framework for Python, designed for building robust app backends and microservices. It supports both asyncio (ASGI) and gevent/meinheld (WSGI), making it highly reliable and used by companies like LinkedIn and PayPal. Falcon emphasizes RESTful architecture, stability, performance, and flexibility, allowing developers to customize their implementations. It has no dependencies outside the standard library, ensuring minimal attack surface and high debuggability. Falcon is extensible with various add-ons and compatible with CPython 3.5+ and PyPy for enhanced performance. It is an Apache-licensed community project, supported by volunteers and open for contributions.",
  "embedding": [
    0.006658175494521856,
    0.003654434345662594,
    0.003096948377788067,
    -0.008068596944212914,
    0.010952751152217388,
    -0.0013233695644885302,
    -0.013956492766737938,
    -0.018303826451301575,
    0.007115419488400221,
    -0.03849290683865547,
    0.01506794709712267,
    0.019823284819722176,
    -0.011445167474448681,
    0.017698857933282852,
    0.00837811641395092,
    -0.0045337495394051075,
    0.027195462957024574,
    -0.0261121466755867,
    -0.00641196733340621,
    -0.0027065323665738106,
    0.04158809781074524,
    0.020822186022996902,
    -0.013675111345946789,
    -0.019598178565502167,
    -0.01790989376604557,
    0.02991078980267048,
    0.0027346706483513117,
    -0.00837811641395092,
    0.006535071413964033,
    0.009320742450654507,
    0.04099719598889351,
    -0.02220095321536064,
    -0.0028718437533825636,
    0.005029683467000723,
    -0.00222290912643075,
    -0.014188631437718868,
    0.020611150190234184,
    -0.01570105366408825,
    0.023059165105223656,
    -0.007224454544484615,
    0.026660839095711708,
    0.016488920897245407,
    0.0017401649383828044,
    -0.0018377689411863685,
    -0.02310137078166008,
    0.009869434870779514,
    0.012802830897271633,
    -0.011874273419380188,
    0.0017595099052414298,
    0.000915367214474827,
    0.013843939639627934,
    -0.0011343167861923575,
    -0.0031391556840389967,
    -0.018641484901309013,
    0.01826162077486515,
    0.011867239139974117,
    -0.013492213562130928,
    0.021975846961140633,
    0.0005381409428082407,
    -0.01824755035340786,
    0.0013611800968647003,
    0.010797991417348385,
    -0.02553531527519226,
    0.0012345586437731981,
    -0.003858435433357954,
    0.00499802827835083,
    -0.004751819651573896,
    0.010368886403739452,
    -0.008272598497569561,
    0.007157626561820507,
    0.024508275091648102,
    0.015771398320794106,
    0.01800837740302086,
    -0.004203127231448889,
    0.043501485139131546,
    -0.01710795797407627,
    -0.011578823439776897,
    0.01696726866066456,
    -0.007843492552638054,
    -0.01120599452406168,
    0.008406254462897778,
    -0.01964038610458374,
    -0.03280901163816452,
    0.0469343326985836,
    0.02023128606379032,
    0.0005900205578655005,
    -0.0034680194221436977,
    0.021891433745622635,
    -0.011874273419380188,
    0.0038267802447080612,
    -0.009960883297026157,
    0.021680397912859917,
    0.003501433413475752,
    0.01838824152946472,
    -0.00505782151594758,
    0.02206026203930378,
    -0.015293051488697529,
    -0.00505782151594758,
    0.0036087098997086287,
    -0.009876469150185585,
    -0.010523645207285881,
    0.012880210764706135,
    -0.017515961080789566,
    -0.00358408922329545,
    -0.02957313135266304,
    -0.025000693276524544,
    0.01547594927251339,
    -0.012964624911546707,
    0.03987167403101921,
    -0.0006076068966649473,
    -0.02044232189655304,
    0.03579165041446686,
    0.006200931500643492,
    -0.036101169884204865,
    0.004255886189639568,
    -0.00797714851796627,
    0.026548286899924278,
    -0.0023389786947518587,
    0.004885475616902113,
    0.007252592593431473,
    0.005708514712750912,
    -0.0016284919111058116,
    0.003999126143753529,
    0.0015871641226112843,
    0.01930272951722145,
    -0.027884846553206444,
    -0.006665209773927927,
    0.005704997573047876,
    0.0038267802447080612,
    -0.019471557810902596,
    0.04184133931994438,
    -0.00015113232075236738,
    0.016010573133826256,
    -0.01685471646487713,
    -0.014870979823172092,
    -0.007759077940136194,
    -0.026126215234398842,
    0.012753589078783989,
    -0.011557720601558685,
    0.005251270718872547,
    0.0021613570861518383,
    0.018979141488671303,
    -0.03218997269868851,
    0.016109056770801544,
    -0.017150165513157845,
    0.03266832232475281,
    0.008392184972763062,
    -0.007210385520011187,
    0.0034943989012390375,
    -0.009341845288872719,
    0.02923547476530075,
    -0.005216098390519619,
    0.00748473173007369,
    -0.026069939136505127,
    -0.005413064733147621,
    0.0099327452480793,
    -0.030811207368969917,
    0.008863498456776142,
    -0.008990119211375713,
    0.0059723095037043095,
    0.009137844666838646,
    0.02470524236559868,
    -0.020175009965896606,
    -0.016840646043419838,
    -0.006200931500643492,
    0.03325922042131424,
    0.026914082467556,
    -0.00039920915151014924,
    -0.026857806369662285,
    -0.002430427586659789,
    -0.00196614908054471,
    0.011234132573008537,
    0.00455837044864893,
    0.021399017423391342,
    0.0029773616697639227,
    0.0010762818856164813,
    0.006710934452712536,
    0.020287562161684036,
    -0.03612930700182915,
    -0.0032306043431162834,
    -0.0013040245976299047,
    -0.001775337615981698,
    0.01838824152946472,
    0.03626999631524086,
    -0.02553531527519226,
    -0.0014658186119049788,
    0.002201805589720607,
    -0.01495539490133524,
    -0.006742589641362429,
    0.02912292256951332,
    -0.002827877877280116,
    0.010453300550580025,
    -0.007372179534286261,
    -0.025253934785723686,
    -0.5888739228248596,
    0.0026379458140581846,
    0.008469564840197563,
    -0.029713822528719902,
    -0.008765014819800854,
    0.011874273419380188,
    0.0004018470935989171,
    0.010439231060445309,
    -0.0225104708224535,
    -0.0024849451147019863,
    -0.0285179540514946,
    0.018796244636178017,
    -0.016798438504338264,
    -0.003585847793146968,
    -0.007386248558759689,
    0.0009311949252150953,
    -0.004294576123356819,
    -0.028700850903987885,
    -0.04054698720574379,
    -0.01754409819841385,
    -0.029038507491350174,
    0.05242126062512398,
    -0.01976700872182846,
    0.0003756874648388475,
    -0.011276339180767536,
    0.00585975730791688,
    0.015658846125006676,
    -0.008145976811647415,
    0.02089253067970276,
    0.0025834282860159874,
    -0.027462774887681007,
    0.023481234908103943,
    0.01847265660762787,
    -0.006929004564881325,
    0.06781279295682907,
    0.001872941618785262,
    -0.02438165433704853,
    0.0344410203397274,
    0.01408311352133751,
    0.03233066573739052,
    -0.00601099943742156,
    -0.0014834048924967647,
    0.001333041931502521,
    -0.00918708648532629,
    -0.007737974636256695,
    0.0077520436607301235,
    0.02912292256951332,
    -0.0036087098997086287,
    0.00919412076473236,
    -0.03339991346001625,
    0.02000618167221546,
    -0.0019942871294915676,
    0.0058069983497262,
    -0.031261418014764786,
    0.0005763911758549511,
    -0.00837811641395092,
    0.03593233972787857,
    -0.004182023461908102,
    -0.006974728778004646,
    0.02193364128470421,
    0.0063943807035684586,
    0.030079618096351624,
    -0.0074214208871126175,
    -0.02044232189655304,
    -0.012901313602924347,
    0.02460675872862339,
    0.013646973296999931,
    -0.008793152868747711,
    0.01999211311340332,
    -0.021328670904040337,
    0.029404303058981895,
    0.005912516266107559,
    0.009095637127757072,
    -0.03005147911608219,
    0.026154354214668274,
    0.048116132616996765,
    0.010375920683145523,
    -0.0022510471753776073,
    0.005377892404794693,
    0.029516855254769325,
    0.02782857045531273,
    0.005740170367062092,
    -0.019218314439058304,
    -0.028954094275832176,
    0.025479039177298546,
    -0.0030336377676576376,
    -0.02424096316099167,
    -0.006563209462910891,
    0.02068149484694004,
    -0.006390863563865423,
    0.017712926492094994,
    0.01677030138671398,
    -0.01812092959880829,
    -0.02010466530919075,
    -0.0024462551809847355,
    0.02218688279390335,
    -0.01143813319504261,
    -0.017966169863939285,
    -0.004804578609764576,
    -0.027181394398212433,
    0.016334161162376404,
    -0.029432442039251328,
    0.018163137137889862,
    -0.003988574258983135,
    0.02208840101957321,
    0.013661042787134647,
    -0.009658399038016796,
    -0.013330419547855854,
    -0.0059089986607432365,
    -0.022341642528772354,
    7.84857604685385e-07,
    -0.03790200501680374,
    -0.026548286899924278,
    -0.0013893181458115578,
    0.014076079241931438,
    -0.025943318381905556,
    0.007315903436392546,
    0.00476237153634429,
    0.01919017732143402,
    0.004326231312006712,
    -0.0027803948614746332,
    -0.02228536643087864,
    -0.005061338655650616,
    0.02553531527519226,
    0.007351075764745474,
    0.019359005615115166,
    -0.0051070633344352245,
    -0.020751841366291046,
    -0.010537714697420597,
    0.007034522481262684,
    0.002908774884417653,
    -0.00831480510532856,
    0.02207433059811592,
    -0.0017208200879395008,
    0.03323108330368996,
    -0.004611129406839609,
    0.012894279323518276,
    0.013435937464237213,
    0.01154365111142397,
    -0.02681559883058071,
    -0.021230189129710197,
    0.0034715367946773767,
    0.01171951461583376,
    0.0008160045836120844,
    -0.012781727127730846,
    -0.013703249394893646,
    -0.019429350271821022,
    -0.0058069983497262,
    0.008096734993159771,
    -0.0025904627982527018,
    -0.010439231060445309,
    -0.015264913439750671,
    -0.024114342406392097,
    0.012711381539702415,
    0.0142589770257473,
    -0.0022809437941759825,
    0.0011694893473759294,
    -0.046737365424633026,
    -0.0107346810400486,
    -0.021173913031816483,
    0.002623876789584756,
    0.007182247471064329,
    -8.941537089413032e-05,
    0.011881308630108833,
    -0.013893181458115578,
    0.013766560703516006,
    -0.02621063031256199,
    0.03871801123023033,
    -0.010565852746367455,
    -0.03154279664158821,
    -0.026914082467556,
    -0.005240719299763441,
    0.014575530774891376,
    0.027434637770056725,
    0.03027658350765705,
    -0.0040483674965798855,
    -0.011979791335761547,
    0.00696417735889554,
    -0.009735778905451298,
    -0.006907900795340538,
    0.006250173319131136,
    0.022735577076673508,
    -0.026970358565449715,
    -0.02090660110116005,
    0.016657749190926552,
    0.01091757882386446,
    -0.0020065975841134787,
    0.022003985941410065,
    -0.025338349863886833,
    0.014688082970678806,
    0.0060532065108418465,
    -0.003664986230432987,
    -0.025718213990330696,
    0.017867686226963997,
    -0.02739243023097515,
    0.0027786362916231155,
    0.002034735633060336,
    0.001712026889435947,
    -0.009102672338485718,
    0.029657546430826187,
    0.0024462551809847355,
    -0.011262270621955395,
    0.009616192430257797,
    -0.005525617394596338,
    -0.01779734157025814,
    -0.01235262118279934,
    0.032752737402915955,
    0.0006836676620878279,
    0.000655969197396189,
    -0.01276765763759613,
    0.020245354622602463,
    0.0004576836072374135,
    0.005933619569987059,
    -0.004280506633222103,
    0.020639289170503616,
    0.008772049099206924,
    0.0005311064305715263,
    0.020512666553258896,
    -0.03626999631524086,
    -0.0010358333820477128,
    0.0107346810400486,
    0.014941325411200523,
    0.010277437046170235,
    0.01063619740307331,
    0.013027935288846493,
    -0.021891433745622635,
    -0.005145753268152475,
    0.0387742854654789,
    0.025605661794543266,
    -0.03975912183523178,
    -0.022383850067853928,
    0.03674834594130516,
    0.016010573133826256,
    -0.015307120978832245,
    0.03393453732132912,
    0.0032517078798264265,
    0.015630709007382393,
    -0.03294970095157623,
    0.030473550781607628,
    -0.03525702655315399,
    0.017530029639601707,
    -0.010861302725970745,
    0.030586102977395058,
    -0.01837417297065258,
    0.021061360836029053,
    -0.01595429703593254,
    0.014350425451993942,
    0.021216118708252907,
    -0.024986622855067253,
    -0.012451104819774628,
    -0.008181149140000343,
    0.015855813398957253,
    0.011684341356158257,
    0.006696865428239107,
    0.022707438096404076,
    -0.009496605023741722,
    -0.004618164151906967,
    -0.007759077940136194,
    0.01675623282790184,
    0.005497479345649481,
    0.031824178993701935,
    0.004400093574076891,
    0.03646696358919144,
    0.0058281016536056995,
    0.004639267455786467,
    0.0037071933038532734,
    -0.03157093748450279,
    -0.050901804119348526,
    0.0025623247493058443,
    -0.008919774554669857,
    -0.002681911690160632,
    -0.023523442447185516,
    -0.011128614656627178,
    -0.028095882385969162,
    0.027772294357419014,
    0.009229293093085289,
    0.006988797802478075,
    0.05636059492826462,
    -0.00404485035687685,
    0.006021551322191954,
    -0.029488718137145042,
    -0.026196561753749847,
    0.016910992562770844,
    0.0017014751210808754,
    -0.002618600847199559,
    -0.04369845241308212,
    -0.03559468314051628,
    0.022679300978779793,
    -0.017178304493427277,
    0.01941528171300888,
    -0.01132558099925518,
    -0.009137844666838646,
    0.0021437706891447306,
    -0.00557134160771966,
    -0.02135680988430977,
    0.011585858650505543,
    0.03511633723974228,
    -0.011684341356158257,
    -0.02032976970076561,
    -0.007576180621981621,
    0.004846785683184862,
    0.0036051927600055933,
    -0.016699956730008125,
    0.024986622855067253,
    0.05247753858566284,
    -0.013654007576406002,
    -0.002036494202911854,
    -0.017867686226963997,
    0.006521002389490604,
    -0.02308730222284794,
    0.0072666616179049015,
    0.020484529435634613,
    -0.016094986349344254,
    -0.019499696791172028,
    0.020948806777596474,
    0.014631806872785091,
    -0.00779425073415041,
    -0.006763693410903215,
    0.03370943292975426,
    -0.008026390336453915,
    0.007766112685203552,
    -0.008237425237894058,
    -0.015053877606987953,
    -0.019133901223540306,
    0.05098621919751167,
    -0.006626519840210676,
    0.011979791335761547,
    0.003112776204943657,
    -0.00531458156183362,
    0.0006783917779102921,
    -0.023143578320741653,
    -0.003501433413475752,
    0.01525084488093853,
    -0.017600374296307564,
    -0.000996264279820025,
    0.01335152331739664,
    0.010882406495511532,
    0.0009417466935701668,
    0.011269304901361465,
    0.014294149354100227,
    -0.014477047137916088,
    -0.015419673174619675,
    -0.002613325137645006,
    -0.027687879279255867,
    0.0064506568014621735,
    -0.006482312455773354,
    0.014899118803441525,
    0.008286667056381702,
    0.05475672334432602,
    0.011853170581161976,
    0.00577534269541502,
    0.014603668823838234,
    -0.019935837015509605,
    -0.02934802696108818,
    -0.00658431276679039,
    -0.007801285479217768,
    -0.002993189264088869,
    0.016137193888425827,
    0.004509128630161285,
    0.013407799415290356,
    0.021314602345228195,
    0.011417029425501823,
    0.011494409292936325,
    0.010439231060445309,
    0.028095882385969162,
    0.02231350541114807,
    -0.006098930723965168,
    0.002935154363512993,
    0.011944619007408619,
    -0.01790989376604557,
    -0.026646770536899567,
    0.013112349435687065,
    0.0016830094391480088,
    -0.038408491760492325,
    0.035172611474990845,
    0.008448461070656776,
    -0.03404708951711655,
    -0.02021721750497818,
    0.03759248927235603,
    -0.013907250948250294,
    0.030698655173182487,
    -0.004512646235525608,
    -0.019598178565502167,
    -0.02494441717863083,
    -0.020020250231027603,
    -0.015208637341856956,
    -0.004132782109081745,
    -0.006302931811660528,
    0.008364046923816204,
    0.0063943807035684586,
    -0.00747769745066762,
    0.010425162501633167,
    -0.004266437608748674,
    0.009946814738214016,
    0.018317896872758865,
    -0.01363993901759386,
    0.0035330888349562883,
    0.00047922684461809695,
    0.02231350541114807,
    0.0032429147977381945,
    -0.004245334304869175,
    -0.01213455107063055,
    0.004801061470061541,
    -0.006995832547545433,
    0.03601675480604172,
    -0.011599927209317684,
    -0.008947912603616714,
    -0.02832098677754402,
    -0.011016062460839748,
    -0.023382753133773804,
    0.02841947041451931,
    0.001579250325448811,
    -0.006763693410903215,
    0.007400317583233118,
    -0.012120481580495834,
    0.011888342909514904,
    0.002615083707496524,
    -0.02656235732138157,
    0.0027487396728247404,
    0.031120726838707924,
    0.0038443664088845253,
    -0.008652462624013424,
    0.016474850475788116,
    -0.019963974133133888,
    -0.0021455292589962482,
    -0.028250642120838165,
    0.008357012644410133,
    -0.010326678864657879,
    -0.002198288217186928,
    0.014308218844234943,
    0.009763916954398155,
    0.011972757056355476,
    -0.03759248927235603,
    6.842172297183424e-05,
    0.024747449904680252,
    -0.022932542487978935,
    0.003397674299776554,
    0.01734713278710842,
    0.007519904524087906,
    0.016699956730008125,
    0.006211483385413885,
    0.034131500869989395,
    -0.0014895601198077202,
    -0.015405603684484959,
    0.01767072081565857,
    -0.04713129997253418,
    0.02425503358244896,
    0.022918473929166794,
    -0.012556622736155987,
    0.01653112843632698,
    0.009081568568944931,
    -0.0014526288723573089,
    -0.03269645944237709,
    0.01985142193734646,
    -5.8914123655995354e-05,
    0.022721506655216217,
    -0.0027118083089590073,
    -0.025718213990330696,
    0.00278567080385983,
    -0.0032429147977381945,
    -0.007998252287507057,
    -0.010572887025773525,
    -0.0258729737251997,
    -0.011276339180767536,
    -0.04063140228390694,
    -0.01558850146830082,
    0.008617290295660496,
    -0.01662961021065712,
    -0.027687879279255867,
    -0.02460675872862339,
    -0.019429350271821022,
    0.022665230557322502,
    -0.0001894924498628825,
    0.012570691294968128,
    -0.022904405370354652,
    -0.0038443664088845253,
    -0.007815354503691196,
    -0.010270402766764164,
    0.0011985067976638675,
    0.02089253067970276,
    0.01305607333779335,
    -0.02438165433704853,
    0.03325922042131424,
    0.01699540577828884,
    0.03590420261025429,
    0.004502094350755215,
    0.03936518728733063,
    -0.006352173630148172,
    -0.0017322511412203312,
    -0.013013866730034351,
    -0.03705786541104317,
    -0.005634652450680733,
    -0.0004625198489520699,
    0.003724779700860381,
    0.011972757056355476,
    0.02621063031256199,
    -0.013731387443840504,
    -0.026590494439005852,
    0.002504289848729968,
    0.034497298300266266,
    0.005785894580185413,
    -0.014589599333703518,
    -0.01790989376604557,
    -0.029826374724507332,
    -0.0016531127039343119,
    0.028588298708200455,
    0.007920872420072556,
    0.00941219087690115,
    -0.03095189854502678,
    -0.01427304558455944,
    0.007737974636256695,
    -0.013442972674965858,
    0.012415931560099125,
    0.013013866730034351,
    0.007287765387445688,
    0.000491976912599057,
    0.013534421101212502,
    0.008096734993159771,
    0.0029421888757497072,
    -0.003619261784479022,
    -0.00837811641395092,
    -0.02909478358924389,
    -0.017600374296307564,
    -0.003995608538389206,
    0.014983532950282097,
    0.013724353164434433,
    -0.0048643723130226135,
    0.014927256852388382,
    -0.03061424195766449,
    0.02355158142745495,
    0.005142235662788153,
    -0.001306662568822503,
    0.001324248849414289,
    -0.025718213990330696,
    -0.004878441337496042,
    -0.029601270332932472,
    -0.03745179623365402,
    -0.029038507491350174,
    0.007337006740272045,
    -0.011339650489389896,
    -0.0036227789241820574,
    0.0126551054418087,
    0.006594864651560783,
    -0.02404399774968624,
    0.0045337495394051075,
    -0.008891636505723,
    0.05360306054353714,
    0.006105965469032526,
    0.042910587042570114,
    0.02010466530919075,
    0.013794698752462864,
    -0.009109706617891788,
    -0.030670518055558205,
    -0.008568048477172852,
    -0.02010466530919075,
    0.006577278487384319,
    0.02737836167216301,
    0.0010850750841200352,
    -0.0033185358624905348,
    -0.003978022374212742,
    0.01916203834116459,
    -0.01973886974155903,
    -0.015461879782378674,
    0.03168348968029022,
    0.039083804935216904,
    0.033568739891052246,
    -0.04265734180808067,
    0.002142012119293213,
    0.00024027290055528283,
    0.013618835248053074,
    -0.00948253646492958,
    -0.022102469578385353,
    0.019260521978139877,
    -0.03787386789917946,
    -0.004224230535328388,
    0.013175660744309425,
    0.018064653500914574,
    0.002708291169255972,
    0.016123125329613686,
    0.0030230858828872442,
    0.002819084795191884,
    -0.03050168976187706,
    -0.033568739891052246,
    -0.01686878502368927,
    0.011937584728002548,
    0.01823348179459572,
    -0.005177408456802368,
    -0.014315253123641014,
    0.03902753069996834,
    -0.003028361825272441,
    -0.02622469887137413,
    0.015771398320794106,
    0.004312162287533283,
    0.03106445074081421,
    -0.022496402263641357,
    -0.012521449476480484,
    -0.026140285655856133,
    -0.03165534883737564,
    0.010551783256232738,
    -0.026548286899924278,
    0.0003092991537414491,
    0.006102448329329491,
    -0.01536339707672596,
    -1.6184896594495513e-05,
    0.018655553460121155,
    -0.024001790210604668,
    -0.025690075010061264,
    -0.00436140364035964,
    0.003095189807936549,
    -0.011452202685177326,
    -0.011923515237867832,
    -0.015236775390803814,
    0.035876065492630005,
    -0.02000618167221546,
    -0.03210556134581566,
    -0.03421591594815254,
    -0.02946057915687561,
    0.003399432869628072,
    0.015982434153556824,
    -0.015264913439750671,
    -0.007224454544484615,
    0.024564551189541817,
    -0.0018553552217781544,
    0.02680153027176857,
    -0.008645428344607353,
    0.013316350989043713,
    -0.0198654904961586,
    0.024409793317317963,
    0.006485829595476389,
    0.003897125367075205,
    0.01584174484014511,
    0.01172654889523983,
    -0.028222503140568733,
    -0.022665230557322502,
    0.0006761934491805732,
    0.024114342406392097,
    0.02865864336490631,
    -0.012296345084905624,
    0.018908796831965446,
    0.03083934634923935,
    0.0009514191769994795,
    -0.033090393990278244,
    -0.00759728392586112,
    0.003643882693722844,
    0.0027135671116411686,
    -0.0010921095963567495,
    0.0172205101698637,
    -0.006848107557743788,
    0.019724801182746887,
    0.03553840517997742,
    0.00901825726032257,
    0.00693252170458436,
    -0.02334054559469223,
    -0.017515961080789566,
    -0.01525084488093853,
    -0.005237201694399118,
    -0.01919017732143402,
    0.006791831459850073,
    -0.014758427627384663,
    -0.035988617688417435,
    -0.014913187362253666,
    0.017136096954345703,
    0.0031039828900247812,
    -0.007002866826951504,
    0.010572887025773525,
    -0.005624100565910339,
    0.018739966675639153,
    0.008342943154275417,
    -0.009552881121635437,
    -0.026984427124261856,
    -0.0032657769042998552,
    0.007723905611783266,
    -0.031008174642920494,
    -0.030867483466863632,
    -0.011564754880964756,
    0.04594950005412102,
    0.0318804569542408,
    -0.015025739558041096,
    -0.0024286687839776278,
    -0.021975846961140633,
    -0.03314666822552681,
    0.0040483674965798855,
    -0.021441224962472916,
    0.036917172372341156,
    0.016094986349344254,
    0.007632456719875336,
    0.004980441648513079,
    0.02819436602294445,
    0.004006160423159599,
    0.022791853174567223,
    -0.00849066860973835,
    0.01519456785172224,
    -0.00166894041467458,
    0.018866589292883873,
    -0.015419673174619675,
    -0.019893629476428032,
    -0.032977841794490814,
    -0.00747769745066762,
    0.027701949700713158,
    -0.013091245666146278,
    -0.00430161040276289,
    0.035847924649715424,
    0.007449559401720762,
    0.008117838762700558,
    -0.030360998585820198,
    -0.01731899380683899,
    -0.013020901009440422,
    0.012233034707605839,
    0.014209735207259655,
    -0.01768478937447071,
    -0.00684107281267643,
    0.01768478937447071,
    0.006549140438437462,
    0.03173976391553879,
    -0.0012583001516759396,
    0.00470961257815361,
    -0.0033923983573913574,
    0.014420771040022373,
    -0.010073436424136162,
    -0.020653357729315758,
    0.019316798076033592,
    0.001626733341254294,
    0.045808810740709305,
    -0.008807222358882427,
    0.01584174484014511,
    0.030783070251345634,
    0.009974952787160873,
    0.003759952262043953,
    -0.014315253123641014,
    0.025127314031124115,
    -0.024395722895860672,
    0.03452543541789055,
    0.015377465635538101,
    -0.025802627205848694,
    -0.007386248558759689,
    -0.015855813398957253,
    0.04195389151573181,
    -0.012795796617865562,
    -0.011571789160370827,
    -0.0008819532231427729,
    -0.008181149140000343,
    -0.02540869452059269,
    0.010840198956429958,
    0.007400317583233118,
    -0.0054869274608790874,
    -0.0060532065108418465,
    0.011248201131820679,
    0.022271297872066498,
    -0.010579921305179596,
    -0.007315903436392546,
    -0.0019010796677321196,
    -0.010945716872811317,
    0.010073436424136162,
    0.008258529007434845,
    -0.002287978306412697,
    -0.05475672334432602,
    0.007351075764745474,
    0.0040483674965798855,
    -0.0035788132809102535,
    0.011522547341883183,
    0.19606620073318481,
    0.015208637341856956,
    0.02946057915687561,
    0.032640185207128525,
    -0.0025781523436307907,
    0.01685471646487713,
    -0.003700158791616559,
    0.015053877606987953,
    -0.01896507292985916,
    0.05073297396302223,
    -0.012472208589315414,
    -0.019119832664728165,
    -0.02497255429625511,
    -0.0017955618677660823,
    0.005339202471077442,
    0.0032798461616039276,
    -0.006362725514918566,
    -0.05672638863325119,
    -0.023143578320741653,
    0.001950321369804442,
    0.00907453428953886,
    -0.01826162077486515,
    -0.014230838976800442,
    -0.029066646471619606,
    0.012507380917668343,
    -0.002530669327825308,
    -0.006791831459850073,
    -0.01848672516644001,
    0.01592615805566311,
    0.01664368063211441,
    0.004924165550619364,
    0.008652462624013424,
    0.0016918026376515627,
    0.019612248986959457,
    -0.04299500212073326,
    -0.011016062460839748,
    0.02599959447979927,
    0.0014508701860904694,
    0.020991014316678047,
    0.007766112685203552,
    0.0016372851096093655,
    -0.03868987411260605,
    0.0007931424188427627,
    -0.029207337647676468,
    0.021652258932590485,
    -0.03930890932679176,
    -0.019344937056303024,
    0.0033484327141195536,
    0.0024638413451611996,
    0.03821152448654175,
    -0.015560363419353962,
    0.0054869274608790874,
    0.014434839598834515,
    -0.013562559150159359,
    -0.018655553460121155,
    -0.009384052827954292,
    0.0058069983497262,
    0.004730716347694397,
    -0.002797981258481741,
    0.010045298375189304,
    0.0023829443380236626,
    0.04507721960544586,
    -0.015053877606987953,
    0.025844834744930267,
    -0.053321678191423416,
    0.024550482630729675,
    -0.02494441717863083,
    -0.00043636022019200027,
    0.016474850475788116,
    0.009538812562823296,
    0.0019397694850340486,
    -0.017839549109339714,
    -0.0328371487557888,
    0.004681474529206753,
    -0.012880210764706135,
    -0.015377465635538101,
    0.019105762243270874,
    -0.002010114723816514,
    0.017783273011446,
    0.044767700135707855,
    -0.010017159394919872,
    -9.177853644359857e-05,
    0.001997804269194603,
    0.017586305737495422,
    -0.019555972889065742,
    0.006257207598537207,
    0.04941048473119736,
    -0.026534218341112137,
    -0.023861099034547806,
    -0.04586508497595787,
    -0.006390863563865423,
    -0.003040672279894352,
    0.010038263164460659,
    -0.015574432909488678,
    0.015025739558041096,
    -0.002750498242676258,
    0.009496605023741722,
    0.03854918107390404,
    0.009081568568944931,
    -0.007878664880990982,
    -0.03131769225001335,
    0.03157093748450279,
    0.014294149354100227,
    0.016671817749738693,
    -0.006397898308932781,
    -0.007695767562836409,
    -0.015419673174619675,
    0.03739552199840546,
    -0.006130586378276348,
    -0.023748546838760376,
    -0.015222706831991673,
    -0.024747449904680252,
    0.004122230224311352,
    -0.009158948436379433,
    0.02829284965991974,
    -0.01294352114200592,
    -0.0071857646107673645,
    0.00941219087690115,
    0.00632051844149828,
    -0.015883952379226685,
    -0.0031162933446466923,
    -0.0206674262881279,
    0.017375269904732704,
    -0.02068149484694004,
    -0.029629407450556755,
    -0.02576042152941227,
    -0.04254478961229324,
    -0.006422518752515316,
    -0.0003134759026579559,
    -0.02137087844312191,
    0.015025739558041096,
    -0.02529614232480526,
    0.004941752180457115,
    0.0031532247085124254,
    0.009862400591373444,
    -0.010987923480570316,
    -0.0033449153415858746,
    -0.016657749190926552,
    0.0007685215678066015,
    4.055841782246716e-05,
    -0.018683690577745438,
    0.011923515237867832,
    0.016249746084213257,
    -0.0028331538196653128,
    0.010896475054323673,
    0.006084861699491739,
    -0.005300512537360191,
    -0.010565852746367455,
    0.002103322185575962,
    0.001243351842276752,
    -0.022735577076673508,
    -0.0014403184177353978,
    0.014462977647781372,
    -0.01941528171300888,
    0.010094539262354374,
    -0.024761518463492393,
    -0.004034298472106457,
    -0.014631806872785091,
    0.018346033990383148,
    -0.01838824152946472,
    -0.04783475026488304,
    -0.0029861547518521547,
    0.01850079372525215,
    -0.004804578609764576,
    -0.015771398320794106,
    -0.03646696358919144,
    -0.17884570360183716,
    0.02864457480609417,
    0.00232490967027843,
    -0.017290856689214706,
    0.019710730761289597,
    -0.012866141274571419,
    0.02727987803518772,
    -0.003577054711058736,
    0.0012530243257060647,
    0.005114097613841295,
    0.00415740255266428,
    -0.023607857525348663,
    -0.027927054092288017,
    -0.0277160182595253,
    0.004255886189639568,
    -0.007759077940136194,
    -0.012915383093059063,
    0.0015994745772331953,
    0.032049283385276794,
    0.02311544120311737,
    0.024170618504285812,
    -0.04724385216832161,
    0.013900215737521648,
    0.005645204335451126,
    0.0029861547518521547,
    -0.024339446797966957,
    -0.008969016373157501,
    0.0027557741850614548,
    -0.008462530560791492,
    -0.02991078980267048,
    -0.022341642528772354,
    -0.004259403329342604,
    0.035060059279203415,
    -0.0012125758221372962,
    0.007308868691325188,
    0.018571138381958008,
    0.006383828818798065,
    -0.008054528385400772,
    -0.014420771040022373,
    0.035763513296842575,
    0.030923759564757347,
    0.04170065000653267,
    0.02725173905491829,
    -0.014997601509094238,
    -0.007885699160397053,
    -0.0014315253356471658,
    0.017530029639601707,
    0.008406254462897778,
    0.006753141526132822,
    0.0008415047195740044,
    0.032977841794490814,
    -0.010495507158339024,
    -0.007956044748425484,
    0.0032939151860773563,
    0.00759728392586112,
    0.014111251570284367,
    0.0075832149013876915,
    0.00585975730791688,
    0.02794112265110016,
    0.001136954640969634,
    -0.0015766123542562127,
    0.002138494746759534,
    0.007196316495537758,
    -0.01316862553358078,
    -0.017698857933282852,
    -0.04530232399702072,
    -0.0471031628549099,
    0.01661554165184498,
    -0.019260521978139877,
    0.007871630601584911,
    0.014026837423443794,
    0.018078722059726715,
    0.009341845288872719,
    -0.005089476704597473,
    0.0037705039139837027,
    0.021173913031816483,
    -0.03928077220916748,
    0.03705786541104317,
    0.022383850067853928,
    0.00889867078512907,
    -0.005272374488413334,
    0.026773391291499138,
    0.0016144228866323829,
    0.013435937464237213,
    0.029207337647676468,
    -0.012197861447930336,
    0.00109035091008991,
    0.0036016753874719143,
    -0.023298338055610657,
    0.011311511509120464,
    0.030192170292139053,
    -0.003355467226356268,
    -0.007829423062503338,
    -0.0030230858828872442,
    0.011754686944186687,
    0.0253102108836174,
    0.02182108908891678,
    0.0038443664088845253,
    0.0004761492309626192,
    -0.027153255417943,
    -0.005557272583246231,
    0.008525840938091278,
    -0.03404708951711655,
    -0.00013365592167247087,
    0.04035001993179321,
    0.039562154561281204,
    -0.02909478358924389,
    0.01826162077486515,
    0.01916203834116459,
    -0.01202199887484312,
    0.011691376566886902,
    0.018022445961833,
    0.021989917382597923,
    -0.002342495834454894,
    -0.02761753462255001,
    0.016474850475788116,
    0.029770098626613617,
    -0.01767072081565857,
    -0.006049689371138811,
    -0.022608954459428787,
    0.03387825936079025,
    0.016840646043419838,
    -0.026520149782299995,
    0.008364046923816204,
    -0.019541902467608452,
    -0.022932542487978935,
    -0.1054052859544754,
    -0.02968568354845047,
    0.01800837740302086,
    0.014547391794621944,
    -0.00837811641395092,
    0.012809865176677704,
    -0.0107346810400486,
    0.0056487214751541615,
    -0.02381889335811138,
    0.011494409292936325,
    0.0074214208871126175,
    -0.0006436588009819388,
    -0.006443622522056103,
    0.005356788635253906,
    -0.004962855484336615,
    -0.015602570958435535,
    0.0021701501682400703,
    -0.014688082970678806,
    -0.007850526832044125,
    0.02114577405154705,
    -0.012380759231746197,
    0.0036685033701360226,
    -0.008455496281385422,
    0.00867356639355421,
    -0.03596047684550285,
    0.002142012119293213,
    -0.03776131570339203,
    -0.01091757882386446,
    0.004836234264075756,
    0.01836010254919529,
    0.020428253337740898,
    -0.020132802426815033,
    -0.004976924508810043,
    -0.008568048477172852,
    0.011895377188920975,
    -0.025830766186118126,
    -0.04248851537704468,
    -0.03162721171975136,
    0.034834954887628555,
    -0.003823262872174382,
    -0.004456370137631893,
    -0.002819084795191884,
    -0.001997804269194603,
    -0.025394625961780548,
    -0.029544994235038757,
    0.021117636933922768,
    -0.005845688283443451,
    0.014223803766071796,
    0.02643573470413685,
    -0.005951205734163523,
    -0.014730289578437805,
    -0.04352962598204613,
    -0.014301183633506298,
    -0.02460675872862339,
    0.026280974969267845,
    0.0006700382800772786,
    -0.008237425237894058,
    -0.006542105693370104,
    -0.007815354503691196,
    0.013738421723246574,
    -0.003394156927242875,
    -0.001063971547409892,
    0.0026854288298636675,
    0.0025711178313940763,
    0.010572887025773525,
    0.0072666616179049015,
    0.005040235351771116,
    0.015644777566194534,
    0.01776920258998871,
    -0.02773008681833744,
    -0.005159822292625904,
    0.007526938803493977,
    -0.032049283385276794,
    0.00948253646492958,
    -0.024578621610999107,
    -0.0010331955272704363,
    -0.0011809204006567597,
    0.015236775390803814,
    0.01941528171300888,
    0.000975160684902221,
    -0.013442972674965858,
    -0.00777314743027091,
    -0.007562111597508192,
    -0.021652258932590485,
    -0.0036931242793798447,
    0.025704145431518555,
    0.04386728256940842,
    0.0010200057877227664,
    0.018177205696702003,
    -0.05152084305882454,
    0.013154556974768639,
    -0.014343391172587872,
    0.04910096526145935,
    -0.006088379304856062,
    -0.029657546430826187,
    5.858438089489937e-05,
    0.018064653500914574,
    -0.006165758706629276,
    -0.017079820856451988,
    0.028236573562026024,
    -0.029741959646344185,
    0.00373884872533381,
    -0.08711552619934082,
    0.00849066860973835,
    -0.007231488823890686,
    -0.01605278067290783,
    0.015771398320794106,
    -0.04009677842259407,
    -0.012549587525427341,
    -0.021778881549835205,
    -0.003745883237570524,
    0.035510268062353134,
    -0.028503885492682457,
    -4.657623139792122e-05,
    0.014575530774891376,
    -0.018430449068546295,
    0.00958805438131094,
    0.01080502662807703,
    0.033202946186065674,
    -0.00948253646492958,
    0.043388932943344116,
    0.0039850571192801,
    -0.016939129680395126,
    0.011761721223592758,
    -0.012711381539702415,
    -0.0055115483701229095,
    -0.045780669897794724,
    -0.004565405193716288,
    0.0011431098682805896,
    0.031599074602127075,
    -0.005251270718872547,
    -0.029066646471619606,
    0.01103013101965189,
    0.004551336169242859,
    -0.013998699374496937,
    0.004822165239602327,
    0.010572887025773525,
    -0.004523197654634714,
    0.039899811148643494,
    -0.0053427196107804775,
    0.00820225290954113,
    0.0018430448835715652,
    -0.013105315156280994,
    -0.024550482630729675,
    0.020836254581809044,
    -0.016249746084213257,
    -0.003501433413475752,
    0.007716870866715908,
    0.005363823380321264,
    -0.009208189323544502,
    0.029488718137145042,
    0.018782174214720726,
    0.010643232613801956,
    -0.011529582552611828,
    -0.02470524236559868,
    -0.0185852088034153,
    0.001737526967190206,
    -0.007287765387445688,
    0.020962877199053764,
    -0.010425162501633167,
    -0.010551783256232738,
    -0.008800187148153782,
    0.008842394687235355,
    0.015011670999228954,
    0.0038725044578313828,
    -0.005356788635253906,
    0.022679300978779793,
    -0.011853170581161976,
    -0.04113788530230522,
    -0.002483186312019825,
    0.010375920683145523,
    -0.001346231671050191,
    -0.025676006451249123,
    -0.03787386789917946,
    0.028236573562026024,
    0.012563657015562057,
    0.00988350436091423,
    -0.0014992326032370329,
    -0.0071787298657000065,
    -0.002418117132037878,
    -0.021567845717072487,
    0.018655553460121155,
    0.007808319758623838,
    -0.025450902059674263,
    -0.015490017831325531,
    0.020273493602871895,
    0.02090660110116005,
    -0.002912292256951332,
    -0.021807018667459488,
    -0.00012969900853931904,
    0.013499248772859573,
    0.010136746801435947,
    -0.017881756648421288,
    0.018739966675639153,
    -0.005873826332390308,
    0.007956044748425484,
    0.0018324931152164936,
    -0.0038267802447080612,
    -0.016362298280000687,
    -0.0012046619085595012,
    0.018289757892489433,
    0.0009558157180435956,
    -0.012085309252142906,
    -0.022735577076673508,
    0.016826577484607697,
    0.004023746587336063,
    -0.04994510859251022,
    -0.01653112843632698,
    0.0034275709185749292,
    -0.027111049741506577,
    -0.0133374547585845,
    0.01861334592103958,
    0.006211483385413885,
    -0.022665230557322502,
    -0.0003901961608789861,
    0.02840540185570717,
    -0.01525084488093853,
    0.010150815360248089,
    0.007850526832044125,
    -0.008371081203222275,
    -0.010889440774917603,
    -0.007379213813692331,
    0.0036896069068461657,
    0.014104217290878296,
    0.038886841386556625,
    -0.017825480550527573,
    -0.009989021345973015,
    0.03950587660074234,
    0.004941752180457115,
    0.005293478257954121,
    -0.036663930863142014,
    0.0010287988698109984,
    0.0006898228311911225,
    -0.02124425768852234,
    -0.030642379075288773,
    -0.019457489252090454,
    -0.009405156597495079,
    -0.01478656567633152,
    0.004839751403778791,
    -0.009320742450654507,
    0.0014324046205729246,
    0.07653560489416122,
    -0.001964390277862549,
    -0.008068596944212914,
    -0.013597731478512287,
    0.004843268543481827,
    -0.006950107868760824,
    -0.005420099478214979,
    -0.015152361243963242,
    0.032161835581064224,
    -0.033202946186065674,
    -0.0011914721690118313,
    -0.012331517413258553,
    -0.010643232613801956,
    -0.021877365186810493,
    -0.02321392297744751,
    -0.014505185186862946,
    -0.012000895105302334,
    0.014181597158312798,
    -0.015419673174619675,
    0.02090660110116005,
    0.02161005325615406,
    0.006883280351758003,
    0.0031620177906006575,
    -0.02702663466334343,
    -0.03151465952396393,
    0.004751819651573896,
    0.019935837015509605,
    0.02415654994547367,
    -0.013175660744309425,
    -0.04057512432336807,
    0.009848331101238728,
    0.021187981590628624,
    -0.02127239480614662,
    -0.02404399774968624,
    -0.0005627617938444018,
    0.01896507292985916,
    0.009904607199132442,
    -0.025239866226911545,
    0.0225104708224535,
    0.03418777883052826,
    -0.0033466739114373922,
    -0.011304477229714394,
    -0.034159641712903976,
    -0.019147969782352448,
    0.037367381155490875,
    0.01581360585987568,
    0.008293702267110348,
    -0.006513967644423246,
    -0.03314666822552681
  ]
}
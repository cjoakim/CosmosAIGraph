{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: developers",
    "license :: osi approved :: apache software license",
    "programming language :: python",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: database",
    "topic :: software development",
    "topic :: software development :: libraries",
    "topic :: software development :: libraries :: application frameworks",
    "topic :: software development :: libraries :: python modules"
  ],
  "description": "dashvector client python sdk library\n# dashvector client python library\n\ndashvector is a scalable and fully-managed vector-database service for building various machine learning applications. the dashvector client sdk is your gateway to access the dashvector service.\n\nfor more information about dashvector, please visit: https://help.aliyun.com/document_detail/2510225.html\n\n## installation\nto install the dashvector client python sdk, simply run:\n```shell\npip install dashvector\n```\n\n## quickstart\n\n```python\nimport numpy as np\nimport dashvector\n\n# use dashvector `client` api to communicate with the backend vectordb service.\nclient = dashvector.client(api_key='your-dashvector-api-key')\n\n# create a collection named \"quickstart\" with dimension of 4, using the default cosine distance metric\nrsp = client.create(name='quickstart', dimension=4)\nassert rsp\n\n# get a collection by name\ncollection = client.get(name='quickstart')\n\n# operations on 'collection' includes inert/query/upsert/update/delete/fetch of docs\n# here we insert sample data (4-dimensional vectors) in batches of 16\ncollection.insert(\n    [\n        dashvector.doc(id=str(i), vector=np.random.rand(4), fields={'anykey': 'anyvalue'}) \n        for i in range(16)\n    ]\n)\n\n# query a vector from the collection\ndocs = collection.query([0.1, 0.2, 0.3, 0.4], topk=5)\nprint(docs)\n\n# get statistics about collection\nstats = collection.stats()\nprint(stats)\n\n# delete a collection by name\nclient.delete(name='quickstart')\n```\n\n## reference\n\n### create a client\n`client` host various apis for interacting with dashvector `collection`.\n\n```python\ndashvector.client(\n    api_key: str,\n    endpoint: str = 'dashvector.cn-hangzhou.aliyuncs.com',\n    protocal: dashvector.dashvectorprotocol = dashvector.dashvectorprotocol.grpc, \n    timeout: float = 10.0\n) -> client\n```\n\n| parameters | type               | required | description                                                                                  |\n|------------|--------------------|----------|----------------------------------------------------------------------------------------------|\n| api_key    | str                | yes      | your dashvector api-key                                                                      |\n| endpoint   | str                | no       | service endpoint. <br/>default value: `dashvector.cn-hangzhou.aliyuncs.com`                  |\n| protocol   | dashvectorprotocol | no       | communication protocol, support http and grpc. <br/>default value: `dashvectorprotocol.grpc` |\n| timeout    | float              | no       | timeout period (in seconds), -1 means no timeout. <br/>default value: `10.0`                 |\n\nexample:\n```python\nimport dashvector\n\nclient = dashvector.client(api_key='your-dashvector-api-key')\nassert client\n```\n\n### create collection\n```python\nclient.create(\n    name: str,\n    dimension: int,\n    dtype: union[type[int], type[float]] = float,\n    fields_schema: optional[dict[str, union[type[str], type[int], type[float], type[bool]]]] = none,\n    metric: str = 'cosine',\n    timeout: optional[int] = none\n) -> dashvectorresponse\n```\n\n| parameters     | type                                                                       | required | description                                                                                                      |\n|----------------|----------------------------------------------------------------------------|----------|------------------------------------------------------------------------------------------------------------------|\n| name           | str                                                                        | yes      | the name of the collection to create.                                                                            |\n| dimension      | int                                                                        | yes      | the dimensions of the collection's vectors. valid values:  1-20,000                                              |\n| dtype          | union[type[int], type[float]]                                              | no       | the date type of the collection's vectors.<br/>default value: `type[float]`                                      |\n| fields_schema  | optional[dict[str, union[type[str], type[int], type[float], type[bool]]]]  | no       | fields schema of the collection.<br/>default value: `none`<br/>e.g. `{\"name\": str, \"age\": int}`                  |\n| metric         | str                                                                        | no       | vector similarity metric. for `cosine`, dtype must be `float`.<br/>valid values:<br/> 1. (default)`cosine`<br/>2. `dotproduct`<br/>3. `euclidean`    |\n| timeout        | optional[int]                                                              | no       | timeout period (in seconds), -1 means asynchronous creation collection.<br/>default value: `none`                |\n\n\nexample:\n```python\nimport dashvector\n\nclient = dashvector.client(api_key='your-dashvector-api-key')\n\nrsp = client.create('your-collection-name', dimension=4)\nassert rsp\n```\n\n### list collections\n`client.list() -> dashvectorresponse`\n\nexample:\n```python\nimport dashvector\n\nclient = dashvector.client(api_key='your-dashvector-api-key')\n\ncollections = client.list()\n\nfor collection in collections:\n    print(collection)\n# outputs:\n# 'quickstart'\n```\n\n### describe collection\n`client.describe(name: str) -> dashvectorresponse`\n\n| parameters | type  | required | description                             |\n|------------|-------|----------|-----------------------------------------|\n| name       | str   | yes      | the name of the collection to describe. |\n\nexample:\n```python\nimport dashvector\n\nclient = dashvector.client(api_key='your-dashvector-api-key')\nrsp = client.describe('your-collection-name')\n\nprint(rsp)\n# example output:\n# {\n#   \"request_id\": \"8d3ac14e-5382-4736-b77c-4318761ddfab\",\n#   \"code\": 0,\n#   \"message\": \"\",\n#   \"output\": {\n#     \"name\": \"quickstart\",\n#     \"dimension\": 4,\n#     \"dtype\": \"float\",\n#     \"metric\": \"dotproduct\",\n#     \"fields_schema\": {\n#       \"name\": \"string\",\n#       \"age\": \"int\",\n#       \"height\": \"float\"\n#     },\n#     \"status\": \"serving\",\n#     \"partitions\": {\n#       \"default\": \"serving\"\n#     }\n#   }\n# }\n```\n\n### delete collection\n`client.delete(name: str) -> dashvectorresponse`\n\n| parameters | type  | required | description                           |\n|------------|-------|----------|---------------------------------------|\n| name       | str   | yes      | the name of the collection to delete. |\n\nexample:\n```python\nimport dashvector\n\nclient = dashvector.client(api_key='your-dashvector-api-key')\nclient.delete('your-collection-name')\n```\n\n### get a collection instance\n`collection` provides apis for accessing `doc` and `partition`\n\n`client.get(name: str) -> collection`\n\n| parameters | type  | required | description                        |\n|------------|-------|----------|------------------------------------|\n| name       | str   | yes      | the name of the collection to get. |\n\nexample:\n```python\nimport dashvector\n\nclient = dashvector.client(api_key='your-dashvector-api-key')\ncollection = client.get('your-collection-name')\nassert collection\n```\n\n### describe collection statistics\n`collection.stats() -> dashvectorresponse`\n\nexample:\n```python\nimport dashvector\n\nclient = dashvector.client(api_key='your-dashvector-api-key')\ncollection = client.get('your-collection-name')\nrsp = collection.stats()\n\nprint(rsp)\n# example output:\n# {\n#   \"request_id\": \"14448bcb-c9a3-49a8-9152-0de3990bce59\",\n#   \"code\": 0,\n#   \"message\": \"success\",\n#   \"output\": {\n#     \"total_doc_count\": \"26\",\n#     \"index_completeness\": 1.0,\n#     \"partitions\": {\n#       \"default\": {\n#         \"total_doc_count\": \"26\"\n#       }\n#     }\n#   }\n# }\n```\n\n### insert/update/upsert docs\n```python\ncollection.insert(\n    docs: union[doc, list[doc], tuple, list[tuple]],\n    partition: optional[str] = none,\n    async_req: false\n) -> dashvectorresponse\n```\n\n| parameters | type                                      | required | description                                                            |\n|------------|-------------------------------------------|----------|------------------------------------------------------------------------|\n| docs       | union[doc, list[doc], tuple, list[tuple]] | yes      | the docs to insert/update/upsert.                                      |\n| partition  | optional[str]                             | no       | name of the partition to insert/update/upsert.<br/>default value: `none` |\n| async_req  | bool                                      | no       | enable async request or not.<br/>default value: `false`                  |\n\nexample:\n```python\nimport dashvector\nimport numpy as np\n\nclient = dashvector.client(api_key='your-dashvector-api-key')\ncollection = client.get('your-collection-name')\n\n# insert a doc with tuple\ncollection.insert(('your-doc-id1', [0.1, 0.2, 0.3, 0.4]))\ncollection.insert(('your-doc-id2', [0.2, 0.3, 0.4, 0.5], {'age': 30, 'name': 'alice', 'anykey': 'anyvalue'}))\n\n# insert a doc with dashvector.doc\ncollection.insert(\n    dashvector.doc(\n        id='your-doc-id3', \n        vector=[0.3, 0.4, 0.5, 0.6], \n        fields={'foo': 'bar'}\n    )\n)\n\n# insert in batches\nret = collection.insert(\n    [\n        ('your-doc-id4', [0.2, 0.7, 0.8, 1.3], {'age': 1}),\n        ('your-doc-id4', [0.3, 0.6, 0.9, 1.2], {'age': 2}),\n        ('your-doc-id6', [0.4, 0.5, 1.0, 1.1], {'age': 3})\n    ]\n)\n\n# insert in batches\nret = collection.insert(\n    [\n        dashvector.doc(id=str(i), vector=np.random.rand(4)) for i in range(10)\n    ]\n)\n\n# async insert\nret_funture = collection.insert(\n    [\n        dashvector.doc(id=str(i+10), vector=np.random.rand(4)) for i in range(10)\n    ],\n    async_req=true\n)\nret = ret_funture.get()\n```\n\n### query a collection\n```python\ncollection.query(\n    vector: optional[union[list[union[int, float]], np.ndarray]] = none,\n    id: optional[str] = none,\n    topk: int = 10,\n    filter: optional[str] = none,\n    include_vector: bool = false,\n    partition: optional[str] = none,\n    output_fields: optional[list[str]] = none,\n    async_req: false\n) -> dashvectorresponse\n```\n\n| parameters      | type                                                 | required | description                                                                                                  |\n|-----------------|------------------------------------------------------|----------|--------------------------------------------------------------------------------------------------------------|\n| vector          | optional[union[list[union[int, float]], np.ndarray]] | no       | the vector to query                                                                                          |\n| id              | optional[str]                                        | no       | the doc id to query.<br/>setting `id` means searching by vector corresponding to the id                      |\n| topk            | optional[str]                                        | no       | number of similarity results to return.<br/>default value: `10`                                              |\n| filter          | optional[str]                                        | no       | expression used to filter results <br/>default value: none <br/>e.g. `age>20`                                |\n| include_vector  | bool                                                 | no       | return vector details or not.<br/>default value: `false`                                                     |\n| partition       | optional[str]                                        | no       | name of the partition to query.<br/>default value: `none`                                                    |\n| output_fields   | optional[list[str]]                                  | no       | list of field names to return.<br/>default value: `none`, means return all fields<br/>e.g. `['name', 'age']` |\n| async_req       | bool                                                 | no       | enable async request or not.<br/>default value: `false`                                                      |\n\nexample:\n```python\nimport dashvector\n\nclient = dashvector.client(api_key='your-dashvector-api-key')\ncollection = client.get('your-collection-name')\nmatch_docs = collection.query([0.1, 0.2, 0.3, 0.4], topk=100, filter='age>20', include_vector=true, output_fields=['age','name','foo'])\nif match_docs:\n    for doc in match_docs:\n        print(doc.id)\n        print(doc.vector)\n        print(doc.fields)\n        print(doc.score)\n```\n\n### delete docs\n```python\ncollection.delete(\n    ids: union[str, list[str]],\n    delete_all: bool = false,\n    partition: optional[str] = none,\n    async_req: bool = false\n) -> dashvectorresponse\n```\n\n| parameters | type                  | required | description                                                     |\n|------------|-----------------------|----------|-----------------------------------------------------------------|\n| ids        | union[str, list[str]] | yes      | the id (or list of ids) for the doc(s) to delete                |\n| delete_all | bool                  | no       | delete all vectors from partition.<br/>default value: `false`    |\n| partition  | optional[str]         | no       | name of the partition to delete from.<br/>default value: `none` |\n| async_req  | bool                  | no       | enable async request or not.<br/>default value: `false`         |\n\nexample:\n```python\nimport dashvector\n\nclient = dashvector.client(api_key='your-dashvector-api-key')\ncollection = client.get('your-collection-name')\ncollection.delete(['your-doc-id1','your-doc-id2'])\n```\n\n### fetch docs\n```python\ncollection.fetch(\n    ids: union[str, list[str]],\n    partition: optional[str] = none,\n    async_req: bool = false\n) -> dashvectorresponse\n```\n\n| parameters | type                  | required | description                                                    |\n|------------|-----------------------|----------|----------------------------------------------------------------|\n| ids        | union[str, list[str]] | yes      | the id (or list of ids) for the doc(s) to fetch                |\n| partition  | optional[str]         | no       | name of the partition to fetch from.<br/>default value: `none` |\n| async_req  | bool                  | no       | enable async request or not.<br/>default value: `false`        |\n\nexample:\n```python\nimport dashvector\n\nclient = dashvector.client(api_key='your-dashvector-api-key')\ncollection = client.get('your-collection-name')\nfetch_docs = collection.fetch(['your-doc-id1', 'your-doc-id2'])\nif fetch_docs:\n    for doc_id in fetch_docs:\n        doc = fetch_docs[doc_id]\n        print(doc.id)\n        print(doc.vector)\n        print(doc.fields)\n```\n\n### create collection partition\n`collection.create_partition(name: str) -> dashvectorresponse`\n\n| parameters | type           | required | description                                                                                           |\n|------------|----------------|----------|-------------------------------------------------------------------------------------------------------|\n| name       | str            | yes      | the name of the partition to create.                                                                  |\n| timeout    | optional[int]  | no       | timeout period (in seconds), -1 means asynchronous creation partition.<br/>default value: `none`      |\n\nexample:\n```python\nimport dashvector\n\nclient = dashvector.client(api_key='your-dashvector-api-key')\ncollection = client.get('your-collection-name')\nrsp = collection.create_partition('your-partition-name')\nassert rsp\n```\n\n### delete collection partition\n`collection.delete_partition(name: str) -> dashvectorresponse`\n\n| parameters | type  | required | description                          |\n|------------|-------|----------|--------------------------------------|\n| name       | str   | yes      | the name of the partition to delete. |\n\nexample:\n```python\nimport dashvector\n\nclient = dashvector.client(api_key='your-dashvector-api-key')\ncollection = client.get('your-collection-name')\nrsp = collection.delete_partition('your-partition-name')\nassert rsp\n```\n\n### list collection partitions\n`collection.list_partitions() -> dashvectorresponse`\n\nexample:\n```python\nimport dashvector\n\nclient = dashvector.client(api_key='your-dashvector-api-key')\ncollection = client.get('your-collection-name')\npartitions = collection.list_partitions()\n\nassert partitions\nfor pt in partitions:\n    print(pt)\n```\n\n### describe collection partition\n`collection.describe_partition(name: str) -> dashvectorresponse`\n\n| parameters | type  | required | description                            |\n|------------|-------|----------|----------------------------------------|\n| name       | str   | yes      | the name of the partition to describe. |\n\nexample:\n```python\nimport dashvector\n\nclient = dashvector.client(api_key='your-dashvector-api-key')\ncollection = client.get('your-collection-name')\n\nrsp = collection.describe_partition('shoes')\nprint(rsp)\n# example output:\n# {\"request_id\":\"296267a7-68e2-483a-87e6-5992d85a5806\",\"code\":0,\"message\":\"\",\"output\":\"serving\"}\n```\n\n### statistics for collection partition\n`collection.stats_partition(name: str) -> dashvectorresponse`\n\n| parameters | type  | required | description                                  |\n|------------|-------|----------|----------------------------------------------|\n| name       | str   | yes      | the name of the partition to get statistics. |\n\nexample:\n```python\nimport dashvector\n\nclient = dashvector.client(api_key='your-dashvector-api-key')\ncollection = client.get('your-collection-name')\n\nrsp = collection.stats_partition('shoes')\nprint(rsp)\n# example outptut:\n# {\n#     \"code\":0,\n#     \"message\":\"\",\n#     \"requests_id\":\"330a2bcb-e4a7-4fc6-a711-2fe5f8a24e8c\",\n#     \"output\":{\n#         \"total_doc_count\":0\n#     }\n# }\n```\n\n\n## class\n### dashvector.doc\n```python\n@dataclass(frozen=true)\nclass doc(object):\n    id: str\n    vector: union[list[int], list[float], numpy.ndarray]\n    fields: optional[dict[str, union[type[str], type[int], type[float], type[bool]]]] = none \n    score: float = 0.0\n```\n\n### dashvector.dashvectorresponse\n\n```python\nclass dashvectorresponse(object):\n    code: dashvectorcode\n    message: str\n    request_id: str\n    output: any\n```\n\n## license\nthis project is licensed under the apache license (version 2.0).",
  "docs_url": null,
  "keywords": "dashvector,vector,database,cloud",
  "license": "apache-2.0",
  "name": "dashvector",
  "package_url": "https://pypi.org/project/dashvector/",
  "project_url": "https://pypi.org/project/dashvector/",
  "project_urls": {
    "Documentation": "https://help.aliyun.com/document_detail/2510225.html",
    "Homepage": "https://github.com/alibaba/proxima"
  },
  "release_url": "https://pypi.org/project/dashvector/1.0.9/",
  "requires_dist": [
    "aiohttp (>=3.1.0,<4.0.0)",
    "numpy",
    "protobuf (>=3.8.0,<4.0.0)",
    "grpcio (<=1.56.0) ; sys_platform == \"win32\"",
    "grpcio (>=1.22.0) ; python_version < \"3.11\"",
    "grpcio (>=1.49.1) ; python_version >= \"3.11\"",
    "certifi (>=2023.7.22,<2024.0.0)"
  ],
  "requires_python": ">=3.7,<4.0",
  "summary": "dashvector client python sdk library",
  "version": "1.0.9",
  "releases": [],
  "developers": [
    "alibaba"
  ],
  "kwds": "dashvector dashvectorcode dashvectorprotocol dashvectorresponse vectordb",
  "license_kwds": "apache-2.0",
  "libtype": "pypi",
  "id": "pypi_dashvector",
  "homepage": "https://github.com/alibaba/proxima",
  "release_count": 9,
  "dependency_ids": [
    "pypi_aiohttp",
    "pypi_certifi",
    "pypi_grpcio",
    "pypi_numpy",
    "pypi_protobuf"
  ],
  "documentation_summary": "The HTML text provides information about \"dashvector,\" a Python SDK library for the DashVector service, which is a scalable and fully-managed vector-database service designed for building various machine learning applications. The library, compatible with Python versions 3.7 to 3.11, is licensed under the Apache Software License (Apache-2.0) and is developed by Alibaba. It offers functionalities for creating, querying, updating, and managing collections within the DashVector database, including operations on documents and partitions. The latest version, 1.0.11, was released on February 6, 2024. Installation instructions, usage examples, and detailed API documentation are provided, emphasizing the library's role in facilitating access to the DashVector service for developers.",
  "embedding": [
    -0.03669975325465202,
    0.01152486726641655,
    -0.00878668949007988,
    -0.024629976600408554,
    0.002593435812741518,
    0.010257949121296406,
    0.0273817777633667,
    -0.008657272905111313,
    -0.007029351778328419,
    -0.03863418847322464,
    -0.010278383269906044,
    0.00809192843735218,
    -0.044328510761260986,
    0.021401379257440567,
    -0.0029476277995854616,
    -0.008180475793778896,
    0.005037020891904831,
    -0.049995582550764084,
    0.0230497345328331,
    0.005268608219921589,
    0.01717831939458847,
    -0.005605771671980619,
    -0.02175557054579258,
    -0.01642906665802002,
    -0.004948473069816828,
    0.0036134410183876753,
    0.016415443271398544,
    -0.0029578448738902807,
    0.022150631994009018,
    0.016687899827957153,
    0.014426518231630325,
    -0.01527113001793623,
    -0.006825010292232037,
    -0.018063798546791077,
    -0.023308567702770233,
    0.019712155684828758,
    0.02108805440366268,
    -0.018540596589446068,
    0.04184916242957115,
    -0.020352425053715706,
    0.024902431294322014,
    0.024425635114312172,
    0.0016773041570559144,
    0.017559757456183434,
    0.0029118680395185947,
    0.0051902770064771175,
    0.011211543343961239,
    -0.036182090640068054,
    -0.0029254909604787827,
    0.0129552586004138,
    0.008132796734571457,
    0.03713568300008774,
    -0.012948447838425636,
    -0.00908639095723629,
    0.0028028858359903097,
    0.003902924945577979,
    0.003097478300333023,
    0.020951827988028526,
    -0.00514600332826376,
    -0.024629976600408554,
    0.006014455109834671,
    0.023812610656023026,
    -0.011075315997004509,
    -0.029234474524855614,
    -0.04067760705947876,
    -0.006596828810870647,
    -0.010353309102356434,
    -0.00028458828455768526,
    0.004396750591695309,
    0.024888809770345688,
    0.03686323016881943,
    0.016497179865837097,
    -0.011497621424496174,
    -0.002002547960728407,
    0.025052282959222794,
    -0.0223277285695076,
    -0.014017835259437561,
    0.026251086965203285,
    -0.012539763934910297,
    0.00813960749655962,
    -0.006198362447321415,
    0.00021594225836452097,
    0.00393357640132308,
    0.016647031530737877,
    0.030950944870710373,
    0.03481981158256531,
    -0.03209525719285011,
    0.027327286079525948,
    -0.03697220981121063,
    -0.008085116744041443,
    0.006600234191864729,
    -0.021564852446317673,
    0.005568309221416712,
    0.013261770829558372,
    0.0008658976294100285,
    0.04086832329630852,
    0.006406109780073166,
    0.017995685338974,
    0.004808839410543442,
    -0.021523984149098396,
    -0.013459301553666592,
    -0.001977005274966359,
    -0.03580065071582794,
    -0.01886754296720028,
    -0.029779385775327682,
    -0.015189393423497677,
    -0.013472924008965492,
    -0.01994374208152294,
    0.016538048163056374,
    0.020897336304187775,
    -0.025951385498046875,
    -0.002477642148733139,
    -0.025706175714731216,
    -0.04231233894824982,
    0.012791785411536694,
    -0.03223148360848427,
    0.003131535369902849,
    -0.00042996881529688835,
    -0.006658131256699562,
    0.005527440924197435,
    0.0069067468866705894,
    0.017832212150096893,
    0.020597634837031364,
    -0.029043756425380707,
    0.0011502730194479227,
    -0.001656018546782434,
    0.03307609632611275,
    -0.0028624855913221836,
    -9.668977145338431e-05,
    -0.018526973202824593,
    0.011306903325021267,
    0.04304796829819679,
    0.014535500667989254,
    -0.02268191985785961,
    -0.020025478675961494,
    -0.017559757456183434,
    -0.006535526365041733,
    0.0009953139815479517,
    -0.03528298810124397,
    -0.010346497409045696,
    -0.009270298294723034,
    0.04795216768980026,
    -0.0060655404813587666,
    -0.005064266733825207,
    -0.013581906445324421,
    0.04154946282505989,
    0.018431615084409714,
    0.012798597104847431,
    -0.01615661010146141,
    0.0047781881876289845,
    0.02352653257548809,
    0.00997187104076147,
    -0.027572495862841606,
    0.0019395425915718079,
    -0.020870091393589973,
    -0.02334943599998951,
    0.010475913994014263,
    -0.0032337061129510403,
    -0.007465280592441559,
    -0.015203016810119152,
    0.0005385252879932523,
    0.02858058176934719,
    -0.02822638861835003,
    -0.013091486878693104,
    0.012464839033782482,
    0.02969764918088913,
    -0.01826814003288746,
    -0.031032681465148926,
    -0.024207670241594315,
    -0.006147277075797319,
    -0.008378006517887115,
    -0.0035317044239491224,
    -0.03247669339179993,
    -0.005752216558903456,
    -0.007308618631213903,
    -0.013629586435854435,
    0.028635071590542793,
    0.024289406836032867,
    -0.030460523441433907,
    0.006004238035529852,
    0.02130601927638054,
    -0.005067672114819288,
    0.008418874815106392,
    0.04351114109158516,
    -0.01213789265602827,
    -0.022000780329108238,
    -0.003315442707389593,
    -0.018077421933412552,
    0.020257066935300827,
    0.008582348003983498,
    0.032749149948358536,
    0.0332668162882328,
    0.003599818330258131,
    -0.04503689333796501,
    -0.5793493390083313,
    -0.030978189781308174,
    0.0028250229079276323,
    -0.021701080724596977,
    0.007635565008968115,
    -0.0008356720791198313,
    0.01931709423661232,
    0.009917380288243294,
    -0.025202132761478424,
    0.010925465263426304,
    -0.01886754296720028,
    0.0058475760743021965,
    -0.0317683108150959,
    0.005895255599170923,
    -0.0008109807968139648,
    -0.016374574974179268,
    0.015598077327013016,
    -0.021128922700881958,
    -0.007267750333994627,
    0.004819056484848261,
    -0.013350319117307663,
    0.04013269394636154,
    -0.012369479052722454,
    0.028090162202715874,
    0.004335448145866394,
    0.010503158904612064,
    -0.013064241036772728,
    0.022423086687922478,
    0.020270688459277153,
    0.008711764588952065,
    -0.030378786846995354,
    0.0033341741655021906,
    0.00040634183096699417,
    0.0077581703662872314,
    0.048006657510995865,
    0.011906305328011513,
    -0.013316262513399124,
    0.04637192562222481,
    -0.004178786184638739,
    0.033866219222545624,
    -0.0111911091953516,
    -0.019712155684828758,
    -0.0047100745141506195,
    0.008548291400074959,
    0.006075757555663586,
    -0.001774366362951696,
    0.014208554290235043,
    -0.0007658553658984601,
    -0.0014542312128469348,
    -0.02051589824259281,
    0.0006083420594222844,
    -0.012723671272397041,
    0.006634291261434555,
    -0.007833095267415047,
    0.01745077408850193,
    -0.0047645652666687965,
    0.01961679570376873,
    -0.013684077188372612,
    0.021401379257440567,
    -0.0012754322960972786,
    0.009038710966706276,
    0.012458027340471745,
    0.006276693660765886,
    -0.025052282959222794,
    -0.006286910735070705,
    0.008514233864843845,
    -0.014494632370769978,
    -0.016674276441335678,
    -0.0008458891534246504,
    -0.02367638237774372,
    0.007519771810621023,
    0.02663252502679825,
    0.00777860451489687,
    -0.01595226861536503,
    0.026741506531834602,
    0.032721903175115585,
    0.04577252268791199,
    0.008616404607892036,
    -0.0055819321423769,
    0.031059926375746727,
    0.01597951538860798,
    -0.002252866281196475,
    -0.008098739199340343,
    -0.017982061952352524,
    0.017532510682940483,
    0.02310422621667385,
    -0.019507814198732376,
    0.0007300956058315933,
    0.015298375859856606,
    -0.013261770829558372,
    0.017941193655133247,
    0.041113533079624176,
    -0.01239672489464283,
    -0.04492790997028351,
    0.01054402720183134,
    0.02713656798005104,
    0.0046181208454072475,
    -0.015965892001986504,
    -0.0346018485724926,
    -0.001309489249251783,
    -0.0008795203757472336,
    -0.016987599432468414,
    -0.022137008607387543,
    2.1086032120365417e-06,
    0.012914390303194523,
    -0.021946290507912636,
    -0.02701396308839321,
    -0.0014065514551475644,
    -0.0056296116672456264,
    0.005670479964464903,
    -0.017505265772342682,
    -0.029806630685925484,
    -0.007615130860358477,
    -0.0036474978551268578,
    0.00637205271050334,
    -0.029615912586450577,
    0.04146772623062134,
    0.010114910081028938,
    0.013534226454794407,
    0.013990589417517185,
    0.0010344794718548656,
    -0.015339244157075882,
    0.022572938352823257,
    0.014739842154085636,
    0.01834987662732601,
    -0.004580657929182053,
    -0.008296269923448563,
    -0.002411231165751815,
    -0.024262161925435066,
    -0.005885038524866104,
    0.0048939818516373634,
    -0.0037496688310056925,
    0.020679371431469917,
    -0.01326858252286911,
    0.02352653257548809,
    -0.01790032535791397,
    0.01715107262134552,
    0.008146419189870358,
    -0.022940753027796745,
    -0.017314545810222626,
    0.02608761377632618,
    0.0013716431567445397,
    0.0029016509652137756,
    -0.014235799200832844,
    -0.009767529554665089,
    5.6772646530589554e-06,
    -0.00988332275301218,
    0.0035521385725587606,
    -0.02650992013514042,
    -0.007955700159072876,
    -0.0077445474453270435,
    -0.010891408659517765,
    0.006436761002987623,
    -0.004873547703027725,
    -0.011681529693305492,
    -0.0006555960280820727,
    0.013077863492071629,
    -0.021564852446317673,
    -0.003916547633707523,
    -0.007833095267415047,
    -0.00361003540456295,
    0.013084675185382366,
    0.005002963822335005,
    -0.0011690043611451983,
    -0.02163296565413475,
    -0.0462084524333477,
    -0.026469051837921143,
    0.019657664000988007,
    -0.006818198598921299,
    -0.03313058987259865,
    -0.005299259442836046,
    -0.02885303646326065,
    -0.001309489249251783,
    0.0036304695531725883,
    0.018254518508911133,
    0.006150682922452688,
    -0.015788795426487923,
    0.017491642385721207,
    -0.01030562911182642,
    -0.016265593469142914,
    -0.0018850514898076653,
    0.01531199924647808,
    -0.026128482073545456,
    -0.013486547395586967,
    0.041631199419498444,
    0.010312440805137157,
    0.017505265772342682,
    0.02260018326342106,
    0.004025530070066452,
    -0.006484440993517637,
    -0.025174887850880623,
    0.01346611324697733,
    -0.027926689013838768,
    0.017042091116309166,
    -0.01645631156861782,
    0.005125569179654121,
    0.011688340455293655,
    0.03953329101204872,
    3.7143345252843574e-05,
    0.01262150052934885,
    0.01859508827328682,
    0.02439839020371437,
    -0.012022098526358604,
    0.0027092292439192533,
    0.030269805341959,
    -0.02230048179626465,
    0.0040663983672857285,
    -0.013575094752013683,
    0.014031457714736462,
    0.0050881062634289265,
    0.04127700626850128,
    0.012458027340471745,
    -0.00931116659194231,
    -0.002242649206891656,
    -0.007444846443831921,
    -0.010496348142623901,
    -0.006794359069317579,
    0.0037871312815696,
    -0.014767087996006012,
    0.023717250674962997,
    -0.004154946189373732,
    0.004011907149106264,
    0.01988925039768219,
    -0.004733914043754339,
    0.00246742507442832,
    -0.004771376959979534,
    0.022641051560640335,
    0.02701396308839321,
    0.014426518231630325,
    -0.02728641778230667,
    -0.008589159697294235,
    0.014317535795271397,
    0.015529963187873363,
    -0.04073209688067436,
    0.005970180965960026,
    -0.014794332906603813,
    0.028389861807227135,
    -0.027000339701771736,
    0.02307698130607605,
    -0.028144652023911476,
    -0.007587885484099388,
    0.02945243939757347,
    0.03059675171971321,
    -0.034465618431568146,
    0.008309892378747463,
    -0.009168127551674843,
    -0.024112312123179436,
    0.017082959413528442,
    -0.011558924801647663,
    -0.002448693849146366,
    -0.012246874161064625,
    0.0002526598982512951,
    -0.005885038524866104,
    -0.004154946189373732,
    -0.017791343852877617,
    -0.046044979244470596,
    -0.005268608219921589,
    -0.0012422268046066165,
    0.026945848017930984,
    0.013874796219170094,
    0.02482069469988346,
    0.00382799981161952,
    0.011361394077539444,
    0.008684518747031689,
    0.03901562839746475,
    -0.01558445394039154,
    -0.015243885107338428,
    -0.018009308725595474,
    -0.012042532674968243,
    -0.011075315997004509,
    0.0032285975757986307,
    -0.05618032440543175,
    0.003421019297093153,
    -0.03509226813912392,
    0.02548821084201336,
    0.0076287537813186646,
    0.029942858964204788,
    0.02680961973965168,
    -0.004410373512655497,
    0.015775173902511597,
    -0.017191940918564796,
    -0.030133577063679695,
    0.007158767897635698,
    0.01499867532402277,
    0.01829538680613041,
    -0.028662318363785744,
    -0.016565294936299324,
    0.03149585425853729,
    0.0030957756098359823,
    0.02527024783194065,
    0.009999116882681847,
    0.022218745201826096,
    0.00646060099825263,
    -0.006899935193359852,
    -0.02723192609846592,
    0.016197478398680687,
    0.040813833475112915,
    -0.007519771810621023,
    -0.015175770968198776,
    0.017491642385721207,
    -0.00028543968801386654,
    0.004250305704772472,
    0.01991649717092514,
    -0.014794332906603813,
    0.048333603888750076,
    0.010162590071558952,
    0.004355882294476032,
    -0.012682802975177765,
    -9.206015965901315e-05,
    -0.020529521629214287,
    -0.0019974394235759974,
    -0.030950944870710373,
    -0.021973535418510437,
    0.004212843254208565,
    0.02915273793041706,
    0.003701989073306322,
    -0.010782426223158836,
    -0.010775614529848099,
    0.01775047555565834,
    0.00045210582902655005,
    -0.01742352917790413,
    0.0020723645575344563,
    -0.0020468218717724085,
    0.0007939523202367127,
    0.031087171286344528,
    0.024534616619348526,
    -0.020229820162057877,
    -0.005854387301951647,
    -0.0374898761510849,
    -0.011497621424496174,
    -0.03002459555864334,
    -0.023267699405550957,
    -0.002256272127851844,
    0.006218796595931053,
    -0.03255842998623848,
    0.003548732725903392,
    0.011879059486091137,
    0.00581351900473237,
    0.008800312876701355,
    0.04362012445926666,
    2.9054825063212775e-05,
    0.02163296565413475,
    0.014821578748524189,
    -0.01618385687470436,
    0.014767087996006012,
    -0.003701989073306322,
    0.014453764073550701,
    0.013207280077040195,
    0.025651684030890465,
    0.0030702329240739346,
    0.0031366439070552588,
    0.01230817660689354,
    0.004965501371771097,
    -0.02325407601892948,
    -0.01269642636179924,
    0.019153621047735214,
    0.004938255995512009,
    0.039042871445417404,
    -0.02003910206258297,
    0.04124976322054863,
    0.021551229059696198,
    0.028117407113313675,
    0.019930118694901466,
    0.01841799169778824,
    0.03155034780502319,
    0.006440166849642992,
    -0.011014013551175594,
    0.005820330698043108,
    0.009822020307183266,
    -0.006194956600666046,
    -0.018540596589446068,
    -0.005983803886920214,
    -0.019357962533831596,
    0.033021606504917145,
    0.006406109780073166,
    0.020570389926433563,
    -0.04244856536388397,
    -0.005670479964464903,
    0.010176212526857853,
    0.012076590210199356,
    0.017859457060694695,
    -0.029179982841014862,
    -0.011565735563635826,
    -0.044573720544576645,
    -0.011409074068069458,
    -0.008813935332000256,
    0.0021268557757139206,
    -0.0008395034819841385,
    -0.02394883707165718,
    -0.018009308725595474,
    0.00014176199329085648,
    0.009787963703274727,
    0.006862472742795944,
    -0.017437152564525604,
    -0.005575120449066162,
    0.01159979309886694,
    0.0064912522211670876,
    -0.01757337898015976,
    0.04263928532600403,
    -0.008916106075048447,
    0.008057870902121067,
    0.00944739393889904,
    -0.001956571126356721,
    0.011375016532838345,
    0.0013767516938969493,
    -0.03689047321677208,
    0.004035747144371271,
    -0.02653716504573822,
    -0.0012643637601286173,
    0.0001859295880421996,
    0.005830547772347927,
    0.01162703800946474,
    0.005479760933667421,
    0.00713152252137661,
    -0.005571715068072081,
    -0.008337138220667839,
    0.0009382686112076044,
    0.00389270787127316,
    0.03193178400397301,
    0.020924581214785576,
    -0.014072326011955738,
    -0.0022017809096723795,
    0.01615661010146141,
    -0.0027398804668337107,
    -0.022668296471238136,
    -0.020257066935300827,
    -0.005391213111579418,
    -0.0022579748183488846,
    0.02394883707165718,
    -0.009256675839424133,
    0.0019310283241793513,
    0.011211543343961239,
    -0.007254127413034439,
    -0.002487859223037958,
    -0.0016049331752583385,
    -0.007485714741051197,
    -0.013275394216179848,
    -0.03250394016504288,
    0.0029016509652137756,
    -0.004161757882684469,
    0.005248174071311951,
    -0.002692200941964984,
    0.0020842845551669598,
    0.002988496096804738,
    0.015747927129268646,
    -0.014671728014945984,
    -0.0006062134634703398,
    0.02885303646326065,
    -0.005432081408798695,
    0.05944978818297386,
    0.016170233488082886,
    -0.018458859995007515,
    -0.027695100754499435,
    0.019412454217672348,
    0.021142546087503433,
    0.006184739526361227,
    -0.007083842996507883,
    0.007397166453301907,
    -0.00756745133548975,
    -0.007070220075547695,
    -0.0027228521648794413,
    -0.0022000782191753387,
    -0.0028709997422993183,
    -0.030215313658118248,
    -0.0245209950953722,
    -0.0025440531317144632,
    0.011286469176411629,
    -0.015611699782311916,
    -0.0016773041570559144,
    -0.023540154099464417,
    -0.03669975325465202,
    0.01000592764467001,
    0.004744131118059158,
    0.009406525641679764,
    -0.0302425604313612,
    -0.011742832139134407,
    -0.019684908911585808,
    -0.0446554571390152,
    -0.022886261343955994,
    0.018853919580578804,
    -0.013125543482601643,
    0.005738593637943268,
    0.023703627288341522,
    0.036182090640068054,
    0.04062311351299286,
    -0.006562771741300821,
    0.02536560595035553,
    -0.0029731704853475094,
    0.0151349026709795,
    0.006668348331004381,
    -0.003100884146988392,
    0.018935656175017357,
    0.011000390164554119,
    -0.011497621424496174,
    0.03193178400397301,
    -0.012669180519878864,
    -0.002450396539643407,
    -0.023812610656023026,
    -0.018540596589446068,
    0.014685351401567459,
    0.015461849048733711,
    0.012417159043252468,
    -0.02494329959154129,
    -0.028335371986031532,
    -0.020529521629214287,
    -0.0100808534771204,
    0.0003905904886778444,
    0.019725777208805084,
    -0.03770783916115761,
    0.004590875003486872,
    0.023812610656023026,
    -0.015870532020926476,
    0.031277891248464584,
    -0.002484453609213233,
    0.002603652887046337,
    0.0019735994283109903,
    0.01814553514122963,
    0.015461849048733711,
    0.019807513803243637,
    -0.014807956293225288,
    0.01314597763121128,
    -0.029071001335978508,
    -0.009181750006973743,
    0.006317561957985163,
    0.010428234003484249,
    0.01787308044731617,
    0.020652126520872116,
    0.03721741959452629,
    -0.028744054958224297,
    0.0071247112937271595,
    -0.01083010621368885,
    -0.04089557006955147,
    0.008343949913978577,
    -0.02593776397407055,
    -0.03552819788455963,
    -0.020120838657021523,
    -0.03686323016881943,
    -0.0446009635925293,
    -0.021019941195845604,
    0.004635149147361517,
    0.003558949800208211,
    0.026373691856861115,
    -0.01648355834186077,
    0.02078835479915142,
    0.018281763419508934,
    -0.007363109849393368,
    0.03926083818078041,
    -0.0014993565855547786,
    0.03269466012716293,
    0.027640609070658684,
    -0.010475913994014263,
    -0.019412454217672348,
    -0.018935656175017357,
    -0.00493485014885664,
    -0.014222176745533943,
    0.030732979997992516,
    0.029370702803134918,
    -0.04958689957857132,
    -0.011238789185881615,
    0.01702846772968769,
    -0.02422129362821579,
    -0.031577590852975845,
    -0.02606036886572838,
    0.026101237162947655,
    0.021646589040756226,
    0.014222176745533943,
    -0.020652126520872116,
    -0.005469543859362602,
    -0.01805017702281475,
    0.030923698097467422,
    -0.01625197008252144,
    0.004134512040764093,
    0.0013180034002289176,
    -0.003572572721168399,
    -0.029179982841014862,
    0.002692200941964984,
    0.011715586297214031,
    0.030487770214676857,
    0.02230048179626465,
    0.016674276441335678,
    -0.012880333699285984,
    -0.017355414107441902,
    -0.012989316135644913,
    0.012853087857365608,
    0.005149408709257841,
    0.03032429702579975,
    -0.01720556430518627,
    -0.009774341247975826,
    0.05282912030816078,
    0.015925023704767227,
    -0.020924581214785576,
    0.0052822306752204895,
    6.715601921314374e-05,
    0.046562645584344864,
    -0.02048865333199501,
    -0.021265150979161263,
    -0.009256675839424133,
    -0.030079087242484093,
    0.02969764918088913,
    -0.002823319984599948,
    -0.006487846374511719,
    -0.012893956154584885,
    -0.009590432979166508,
    -0.007696867920458317,
    0.0051357862539589405,
    0.0025253219064325094,
    0.0002286071830894798,
    0.008405252359807491,
    -0.008112362585961819,
    -0.022273236885666847,
    -0.01889478787779808,
    0.007615130860358477,
    0.0201617069542408,
    -0.028062915429472923,
    -0.016946731135249138,
    -0.012165137566626072,
    -0.027245549485087395,
    -0.018826674669981003,
    0.016197478398680687,
    0.02569255232810974,
    -0.004648772068321705,
    0.03803478553891182,
    -0.013554660603404045,
    0.006218796595931053,
    -0.0009680684306658804,
    0.024752581492066383,
    -0.05133061483502388,
    0.015243885107338428,
    -0.0062494478188455105,
    0.015516340732574463,
    0.02319958619773388,
    0.025311116129159927,
    -0.012505707331001759,
    -0.02969764918088913,
    -0.017110204324126244,
    0.032994359731674194,
    0.011245600879192352,
    0.01633370667695999,
    0.0012498896103352308,
    0.0013222605921328068,
    0.010509970597922802,
    -0.014113194309175014,
    -0.018962902948260307,
    0.0035146758891642094,
    -0.015502717345952988,
    -0.00236184848472476,
    -0.005612583365291357,
    -0.005459326785057783,
    0.014235799200832844,
    -0.03059675171971321,
    0.02031155675649643,
    -0.0022852204274386168,
    -0.02593776397407055,
    -0.02337668091058731,
    0.0044001564383506775,
    0.006000832188874483,
    -0.0032268946524709463,
    0.022191500291228294,
    -0.03757161274552345,
    -0.01847248338162899,
    -0.04040515050292015,
    0.03293986991047859,
    0.008262213319540024,
    -0.011967607773840427,
    0.02999735064804554,
    0.024016952142119408,
    0.02151036076247692,
    -0.0029084624256938696,
    -0.0015785390278324485,
    -0.023839855566620827,
    -0.008602782152593136,
    -0.001346100470982492,
    -0.011654283851385117,
    -0.01039417739957571,
    0.0015913103707134724,
    0.01271004881709814,
    0.04351114109158516,
    -0.019099129363894463,
    -0.021796438843011856,
    -0.011654283851385117,
    -0.03193178400397301,
    0.01457636896520853,
    -0.005619394592940807,
    0.02512039616703987,
    -0.008813935332000256,
    0.0332668162882328,
    0.007363109849393368,
    0.0025014819111675024,
    -0.007846718654036522,
    0.05506325513124466,
    -0.02013446018099785,
    0.019058261066675186,
    -0.014344781637191772,
    -0.007056597154587507,
    0.014589991420507431,
    -0.0009442285518161952,
    -0.0432114414870739,
    -0.007465280592441559,
    0.006535526365041733,
    0.02593776397407055,
    -0.0037598859053105116,
    0.01994374208152294,
    0.013329884968698025,
    -0.03498328477144241,
    -0.015938647091388702,
    -0.0007122156675904989,
    -0.012355856597423553,
    0.0005466138245537877,
    -0.010993579402565956,
    -0.02003910206258297,
    -0.03383897244930267,
    -0.008691330440342426,
    0.0008220493327826262,
    0.012117458507418633,
    0.005748810712248087,
    0.014916938729584217,
    -0.017014846205711365,
    0.00020923730335198343,
    -0.011688340455293655,
    -0.0166061632335186,
    -0.005002963822335005,
    0.011211543343961239,
    0.007942077703773975,
    0.006951021030545235,
    0.0461539626121521,
    0.05451834574341774,
    -0.0047884052619338036,
    0.016211101785302162,
    -0.00689652981236577,
    0.010237514972686768,
    -0.02078835479915142,
    -0.0008684518979862332,
    0.014412895776331425,
    -0.014807956293225288,
    0.013799870386719704,
    -0.031632084399461746,
    0.01958955079317093,
    -0.009685792960226536,
    0.013684077188372612,
    0.004873547703027725,
    -0.019480567425489426,
    -0.016197478398680687,
    0.011204732581973076,
    -0.02277727983891964,
    -0.010278383269906044,
    0.01595226861536503,
    0.005033615045249462,
    -0.01720556430518627,
    -0.001854400266893208,
    0.0013043807120993733,
    0.007676433771848679,
    -0.02571979910135269,
    -0.0019940335769206285,
    0.005285636521875858,
    0.0012694722972810268,
    -0.04157670959830284,
    0.004124294966459274,
    0.005663668736815453,
    -0.007022540550678968,
    -0.017505265772342682,
    0.18603260815143585,
    0.029833877459168434,
    0.029370702803134918,
    0.024575484916567802,
    0.015475472435355186,
    0.03253118693828583,
    -9.301801037508994e-05,
    0.0017522294074296951,
    -0.010816482827067375,
    0.0046998574398458,
    0.02551545761525631,
    -0.007969323545694351,
    -0.009590432979166508,
    0.00700210640206933,
    0.005803301930427551,
    -0.004379722289741039,
    -0.00809192843735218,
    -0.046044979244470596,
    -0.00021381370606832206,
    0.008929728530347347,
    -0.0015334135387092829,
    -0.01149081066250801,
    -0.0059361238963902,
    -0.02975214086472988,
    -0.0007931009167805314,
    -0.0035248929634690285,
    -0.018390746787190437,
    -0.00537077896296978,
    0.013289016671478748,
    0.0187994297593832,
    -0.014794332906603813,
    0.02006634697318077,
    0.031277891248464584,
    -0.00170199538115412,
    -0.018404368311166763,
    -0.006862472742795944,
    -0.01627921499311924,
    0.02404419705271721,
    -7.737310079392046e-05,
    0.04623569920659065,
    -0.00039271905552595854,
    -0.021701080724596977,
    -0.007022540550678968,
    -0.02599225379526615,
    0.005139191634953022,
    -0.01499867532402277,
    -0.029861122369766235,
    0.004744131118059158,
    0.02484794147312641,
    0.0489330068230629,
    -0.002566190203651786,
    -0.007036163005977869,
    -0.010462290607392788,
    0.016619784757494926,
    -0.021646589040756226,
    0.0009484856855124235,
    0.009706227108836174,
    0.009665358811616898,
    0.0031247239094227552,
    0.014412895776331425,
    -0.021741949021816254,
    0.05067672207951546,
    -0.0040766154415905476,
    0.02551545761525631,
    -0.018240895122289658,
    -0.017832212150096893,
    -0.01849972829222679,
    0.012076590210199356,
    -0.0049961525946855545,
    0.02247757837176323,
    0.009304354898631573,
    -0.012103835120797157,
    -0.025447342544794083,
    0.0012430781498551369,
    -0.014167685993015766,
    -0.041086290031671524,
    0.027790460735559464,
    0.0023601457942277193,
    -0.002879513893276453,
    0.028744054958224297,
    0.009672170504927635,
    0.011708774603903294,
    -0.008241779170930386,
    0.010489536449313164,
    -0.023989705368876457,
    -0.00035546926665119827,
    0.012376290746033192,
    -0.019970986992120743,
    -0.02106080949306488,
    0.0008982517174445093,
    -0.02548821084201336,
    -0.03084196150302887,
    0.0006079163285903633,
    -0.003899519331753254,
    -0.0037224232219159603,
    0.017559757456183434,
    0.000732224143575877,
    0.022736411541700363,
    -0.007165579590946436,
    -0.007819472812116146,
    -0.047189291566610336,
    0.05315606668591499,
    0.02693222649395466,
    0.010571273043751717,
    -0.015747927129268646,
    0.0006879501161165535,
    -0.02106080949306488,
    0.001553847687318921,
    -0.007444846443831921,
    -0.01871769316494465,
    -0.008337138220667839,
    -0.018635956570506096,
    0.00929754413664341,
    -0.005524035077542067,
    -0.009072767570614815,
    0.011204732581973076,
    0.00569431995972991,
    0.004968907218426466,
    0.0031792151276022196,
    0.010203458368778229,
    0.01937158592045307,
    -0.014085949398577213,
    0.007465280592441559,
    0.007601508405059576,
    -0.014862447045743465,
    -0.010135344229638577,
    -0.03285813331604004,
    0.017614247277379036,
    0.00809192843735218,
    -0.007635565008968115,
    0.010659821331501007,
    -0.016360951587557793,
    0.015461849048733711,
    -0.010114910081028938,
    0.00613024877384305,
    -0.005619394592940807,
    -0.006596828810870647,
    -0.015066788531839848,
    -0.012280931696295738,
    -0.008391628973186016,
    -0.011647472158074379,
    -0.008984220214188099,
    0.032394956797361374,
    -0.0050881062634289265,
    0.011014013551175594,
    0.008207721635699272,
    0.01829538680613041,
    -0.012839465402066708,
    0.010380554012954235,
    -0.010646198876202106,
    -0.022491201758384705,
    0.004345665220171213,
    0.009651736356317997,
    -0.026591656729578972,
    -0.02003910206258297,
    -0.027667855843901634,
    -0.02046140842139721,
    -0.029833877459168434,
    0.01096633356064558,
    -0.003599818330258131,
    -0.022886261343955994,
    -0.021769193932414055,
    0.004730508662760258,
    0.00026713410625234246,
    -0.016524426639080048,
    -0.01053040474653244,
    -0.16946731507778168,
    0.019902873784303665,
    0.04724378138780594,
    -0.03528298810124397,
    0.00857553631067276,
    0.003037878777831793,
    0.007288184482604265,
    -0.014508254826068878,
    -0.01039417739957571,
    0.0013733459636569023,
    0.04152221605181694,
    0.0075742625631392,
    0.004774782340973616,
    -0.02066574990749359,
    0.010366931557655334,
    0.0022613806650042534,
    -0.006464006379246712,
    -0.014848824590444565,
    0.030923698097467422,
    0.02967040427029133,
    0.03323956951498985,
    -0.02013446018099785,
    -0.006494658067822456,
    0.014167685993015766,
    -0.006194956600666046,
    -0.022218745201826096,
    -0.0025917328894138336,
    0.00101574813015759,
    -0.0032507346477359533,
    -0.032449450343847275,
    0.024030575528740883,
    -0.017682362347841263,
    0.01871769316494465,
    0.002896542428061366,
    0.030460523441433907,
    0.01595226861536503,
    0.03212250396609306,
    -9.190051787300035e-05,
    -0.004597686696797609,
    0.02202802710235119,
    0.022709164768457413,
    0.04212161898612976,
    0.011858625337481499,
    -0.035337477922439575,
    0.012784973718225956,
    0.0259105172008276,
    0.0018118290463462472,
    -0.03345753625035286,
    -0.0072949957102537155,
    -0.015870532020926476,
    0.04157670959830284,
    -0.02663252502679825,
    0.023185962811112404,
    0.01060533057898283,
    0.04386533424258232,
    0.014862447045743465,
    -0.020556766539812088,
    0.00591909559443593,
    0.003044690238311887,
    -0.02115616947412491,
    -0.005759027786552906,
    -0.017587002366781235,
    -0.014767087996006012,
    -0.023036111146211624,
    0.00203149626031518,
    -0.013316262513399124,
    -0.022695543244481087,
    0.027177436277270317,
    -0.01820002682507038,
    0.02118341438472271,
    0.003712206147611141,
    0.021687457337975502,
    -0.024984169751405716,
    0.023839855566620827,
    0.009767529554665089,
    0.004059586673974991,
    -0.00043933448614552617,
    0.0007249870686791837,
    0.02446650341153145,
    -0.04070485010743141,
    -0.029316211119294167,
    0.00869814120233059,
    0.004018718376755714,
    0.013452489860355854,
    0.031577590852975845,
    -0.019099129363894463,
    0.015393735840916634,
    -0.02581515721976757,
    0.013833927921950817,
    0.012893956154584885,
    -0.004383127670735121,
    -0.03133238106966019,
    -0.007962511852383614,
    0.0032677631825208664,
    -0.006072351709008217,
    0.016360951587557793,
    -0.006116625852882862,
    0.004744131118059158,
    0.011715586297214031,
    0.009842454455792904,
    0.0013316262047737837,
    0.013724945485591888,
    -0.02484794147312641,
    -0.0011409074068069458,
    0.01456274650990963,
    0.026795998215675354,
    -0.03585514426231384,
    -0.0013776030391454697,
    0.0060655404813587666,
    -0.006235824897885323,
    -0.014780710451304913,
    0.0008991031209006906,
    0.0332123264670372,
    0.024425635114312172,
    0.00038207625038921833,
    0.02317233942449093,
    -0.0122604975476861,
    0.018881166353821754,
    0.037653349339962006,
    0.01814553514122963,
    0.018881166353821754,
    -0.016647031530737877,
    -0.010475913994014263,
    0.016102120280265808,
    -0.0005117054679431021,
    -0.015625322237610817,
    -0.09094564616680145,
    -0.026169350370764732,
    0.026428183540701866,
    0.007812661118805408,
    -0.027763213962316513,
    8.301378693431616e-05,
    -0.021197037771344185,
    0.01021708082407713,
    -0.015257507562637329,
    0.014208554290235043,
    -0.01075518038123846,
    0.0003022553282789886,
    -0.02394883707165718,
    0.022668296471238136,
    0.0009084687917493284,
    -0.030923698097467422,
    0.002928896574303508,
    -0.0083167040720582,
    -0.01612936519086361,
    0.039070118218660355,
    -0.00743803521618247,
    -0.014399273321032524,
    -0.009154504165053368,
    -0.010435045696794987,
    -0.01739628240466118,
    0.015298375859856606,
    -0.023717250674962997,
    0.012859899550676346,
    0.016115741804242134,
    0.0017377552576363087,
    0.020570389926433563,
    -0.012022098526358604,
    -0.0018492916133254766,
    0.0010370337404310703,
    -0.012131080962717533,
    -0.0053537506610155106,
    -0.056670743972063065,
    -0.015638945624232292,
    0.028962019830942154,
    -0.029179982841014862,
    -0.0014899909729138017,
    -0.0039506047032773495,
    -0.006382269784808159,
    -0.004842896480113268,
    -0.013772625476121902,
    -0.0003539792960509658,
    -0.0059361238963902,
    0.015611699782311916,
    0.013656831346452236,
    -0.022995242848992348,
    -0.008173665031790733,
    -0.01457636896520853,
    -0.018976524472236633,
    0.00692036934196949,
    0.02967040427029133,
    0.02563806250691414,
    0.004839490633457899,
    0.019684908911585808,
    -0.006685376632958651,
    -0.026073990389704704,
    -0.016796881332993507,
    0.025896895676851273,
    -0.0317683108150959,
    0.0274362675845623,
    -0.0008718575700186193,
    -0.013350319117307663,
    -0.022613806650042534,
    0.016211101785302162,
    0.015911400318145752,
    -0.024984169751405716,
    -0.014167685993015766,
    0.029043756425380707,
    -0.01412681769579649,
    -0.00306853000074625,
    -0.014344781637191772,
    0.021891798824071884,
    -0.008555102162063122,
    0.010400988161563873,
    0.021115301176905632,
    -0.02464359998703003,
    -0.0062971278093755245,
    -0.00191399990580976,
    -0.005248174071311951,
    -0.009195373393595219,
    0.010707501322031021,
    0.024425635114312172,
    0.0018169375834986567,
    -0.006746679078787565,
    0.01318003423511982,
    -0.05127612501382828,
    0.02693222649395466,
    -0.0151212802156806,
    0.015529963187873363,
    -0.028062915429472923,
    0.005667074117809534,
    0.005602366290986538,
    -0.004737319890409708,
    0.0006040849257260561,
    -0.021128922700881958,
    0.007267750333994627,
    -0.017655115574598312,
    0.00019572096061892807,
    -0.07939352840185165,
    0.00953594222664833,
    0.015189393423497677,
    -0.017818588763475418,
    0.019821137189865112,
    -0.044846173375844955,
    -0.00257300166413188,
    -0.012880333699285984,
    0.014985051937401295,
    0.010584895499050617,
    -0.016524426639080048,
    -0.016238346695899963,
    0.00415154080837965,
    0.00361003540456295,
    -0.018540596589446068,
    -0.01642906665802002,
    0.05500876531004906,
    0.0028727026656270027,
    0.03247669339179993,
    0.03626382723450661,
    -0.008732198737561703,
    0.006811387371271849,
    0.025747044011950493,
    -0.008051060140132904,
    -0.01792757213115692,
    0.004423995967954397,
    0.027763213962316513,
    0.04435575380921364,
    -0.01371813379228115,
    -0.01826814003288746,
    0.022041648626327515,
    -0.005874821450561285,
    -0.01087778527289629,
    0.0067671132273972034,
    0.03231322020292282,
    -0.020979072898626328,
    0.02058401331305504,
    0.019807513803243637,
    0.01140226237475872,
    -0.0024725336115807295,
    -0.039424311369657516,
    -0.025706175714731216,
    0.022014403715729713,
    -0.002593435812741518,
    -0.021741949021816254,
    0.005261796526610851,
    0.00047083714161999524,
    -0.007955700159072876,
    0.021973535418510437,
    -0.008480177260935307,
    0.02307698130607605,
    0.00436950521543622,
    -0.0073426757007837296,
    -0.04250305891036987,
    0.01487607043236494,
    -0.014317535795271397,
    0.035364724695682526,
    -0.004093643743544817,
    0.0066989995539188385,
    0.013752191327512264,
    0.019276225939393044,
    0.0028880282770842314,
    0.019630419090390205,
    0.013118731789290905,
    -0.017668738961219788,
    -0.02728641778230667,
    -0.06669710576534271,
    -0.01655167154967785,
    -0.011034447699785233,
    -0.013820304535329342,
    -0.03253118693828583,
    -0.031223399564623833,
    0.016674276441335678,
    -0.006957832258194685,
    0.00406299252063036,
    -0.030487770214676857,
    0.0014031458413228393,
    -0.01657891646027565,
    -0.01457636896520853,
    0.008950162678956985,
    0.018458859995007515,
    -0.004165163263678551,
    -0.02648267336189747,
    -0.0122604975476861,
    0.02362189069390297,
    0.033348552882671356,
    -0.04874228686094284,
    -0.004601092077791691,
    0.022967997938394547,
    0.004713479895144701,
    -0.013438867405056953,
    0.023812610656023026,
    0.007833095267415047,
    0.019330717623233795,
    0.005466138478368521,
    0.004379722289741039,
    -0.022559314966201782,
    0.022831769660115242,
    0.027000339701771736,
    0.008922917768359184,
    0.017246432602405548,
    -0.00461130915209651,
    0.0018067205091938376,
    -0.01705571450293064,
    -0.017804967239499092,
    -0.016469934955239296,
    -0.003804159816354513,
    0.0010591706959530711,
    -0.012798597104847431,
    0.002259677741676569,
    0.003051501465961337,
    -0.024779826402664185,
    -0.0018084233161062002,
    0.02825363539159298,
    -0.00036802777322009206,
    0.004301391076296568,
    0.0166061632335186,
    0.01283265370875597,
    -0.03667251020669937,
    -0.0012115755816921592,
    -0.020393293350934982,
    0.01657891646027565,
    0.02536560595035553,
    -0.016619784757494926,
    0.0345473550260067,
    0.0345473550260067,
    0.0014823281671851873,
    -0.0009544456261210144,
    0.013125543482601643,
    0.007662810850888491,
    -0.016674276441335678,
    0.004567035008221865,
    -0.022736411541700363,
    0.0029442221857607365,
    0.0018884571036323905,
    -0.0071928249672055244,
    -0.009093201719224453,
    -0.005558092147111893,
    -0.009420149028301239,
    0.08609593659639359,
    -0.00929754413664341,
    0.009597244672477245,
    -0.0033494997769594193,
    -0.028498845174908638,
    -3.131641642539762e-05,
    0.0360458604991436,
    -0.013411621563136578,
    -0.001071942038834095,
    -0.005408241413533688,
    0.01262150052934885,
    0.012274120002985,
    -0.0166334081441164,
    -0.038252752274274826,
    -0.026073990389704704,
    0.0072200708091259,
    -0.02997010387480259,
    0.030215313658118248,
    -0.0036372807808220387,
    0.022041648626327515,
    0.031059926375746727,
    0.02409868873655796,
    -0.00922261830419302,
    0.010993579402565956,
    -0.04691683501005173,
    -0.0003209866408724338,
    -0.002269894815981388,
    0.012941636145114899,
    -0.012335422448813915,
    -0.04579976946115494,
    0.019698532298207283,
    0.03833448886871338,
    -0.03983299434185028,
    -0.02066574990749359,
    -0.015993136912584305,
    0.019058261066675186,
    -0.0011434616753831506,
    -0.01739628240466118,
    -3.2699979783501476e-05,
    0.0004895684542134404,
    5.816286284243688e-05,
    -0.0049280389212071896,
    -0.019957365468144417,
    -0.036754246801137924,
    0.013486547395586967,
    -0.01501229777932167,
    -0.019357962533831596,
    -0.016783257946372032,
    -0.027395399287343025
  ]
}
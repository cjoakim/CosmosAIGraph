{
  "classifiers": [
    "license :: osi approved :: mit license",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.12",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9"
  ],
  "description": "easily serialize dataclasses to and from json.\n# dataclasses json\n\n![](https://github.com/lidatong/dataclasses-json/workflows/dataclasses-json/badge.svg)\n\nthis library provides a simple api for encoding and decoding [dataclasses](https://docs.python.org/3/library/dataclasses.html) to and from json.\n\nit's very easy to get started.\n\n[readme / documentation website](https://lidatong.github.io/dataclasses-json). features a navigation bar and search functionality, and should mirror this readme exactly -- take a look!\n\n## quickstart\n\n`pip install dataclasses-json`\n\n```python\nfrom dataclasses import dataclass\nfrom dataclasses_json import dataclass_json\n\n\n@dataclass_json\n@dataclass\nclass person:\n    name: str\n\n\nperson = person(name='lidatong')\nperson.to_json()  # '{\"name\": \"lidatong\"}' <- this is a string\nperson.to_dict()  # {'name': 'lidatong'} <- this is a dict\nperson.from_json('{\"name\": \"lidatong\"}')  # person(1)\nperson.from_dict({'name': 'lidatong'})  # person(1)\n\n# you can also apply _schema validation_ using an alternative api\n# this can be useful for \"typed\" python code\n\nperson.from_json('{\"name\": 42}')  # this is ok. 42 is not a `str`, but\n                                  # dataclass creation does not validate types\nperson.schema().loads('{\"name\": 42}')  # error! raises `validationerror`\n```\n\n**what if you want to work with camelcase json?**\n\n```python\n# same imports as above, with the additional `lettercase` import\nfrom dataclasses import dataclass\nfrom dataclasses_json import dataclass_json, lettercase\n\n@dataclass_json(letter_case=lettercase.camel)  # now all fields are encoded/decoded from camelcase\n@dataclass\nclass configuredsimpleexample:\n    int_field: int\n\nconfiguredsimpleexample(1).to_json()  # {\"intfield\": 1}\nconfiguredsimpleexample.from_json('{\"intfield\": 1}')  # configuredsimpleexample(1)\n```\n\n## supported types\n\nit's recursive (see caveats below), so you can easily work with nested dataclasses.\nin addition to the supported types in the \n[py to json table](https://docs.python.org/3/library/json.html#py-to-json-table), this library supports the following:\n\n- any arbitrary [collection](https://docs.python.org/3/library/collections.abc.html#collections.abc.collection) type is supported.\n[mapping](https://docs.python.org/3/library/collections.abc.html#collections.abc.mapping) types are encoded as json objects and `str` types as json strings. \nany other collection types are encoded into json arrays, but decoded into the original collection types.\n\n- [datetime](https://docs.python.org/3/library/datetime.html#available-types) \nobjects. `datetime` objects are encoded to `float` (json number) using \n[timestamp](https://docs.python.org/3/library/datetime.html#datetime.datetime.timestamp).\nas specified in the `datetime` docs, if your `datetime` object is naive, it will \nassume your system local timezone when calling `.timestamp()`. json numbers \ncorresponding to a `datetime` field in your dataclass are decoded \ninto a datetime-aware object, with `tzinfo` set to your system local timezone.\nthus, if you encode a datetime-naive object, you will decode into a \ndatetime-aware object. this is important, because encoding and decoding won't \nstrictly be inverses. see [this section](#overriding) if you want to override this default\nbehavior (for example, if you want to use iso).\n\n- [uuid](https://docs.python.org/3/library/uuid.html#uuid.uuid) objects. they \nare encoded as `str` (json string).\n\n- [decimal](https://docs.python.org/3/library/decimal.html) objects. they are\nalso encoded as `str`.\n\n**the [latest release](https://github.com/lidatong/dataclasses-json/releases/latest) is compatible with both python 3.7 and python 3.6 (with the dataclasses backport).**\n\n## usage\n\n#### approach 1: class decorator\n\n```python\nfrom dataclasses import dataclass\nfrom dataclasses_json import dataclass_json\n\n@dataclass_json\n@dataclass\nclass person:\n    name: str\n\nlidatong = person('lidatong')\n\n# encoding to json\nlidatong.to_json()  # '{\"name\": \"lidatong\"}'\n\n# decoding from json\nperson.from_json('{\"name\": \"lidatong\"}')  # person(name='lidatong')\n```\n\nnote that the `@dataclass_json` decorator must be stacked above the `@dataclass`\ndecorator (order matters!)\n\n#### approach 2: inherit from a mixin\n\n```python\nfrom dataclasses import dataclass\nfrom dataclasses_json import dataclassjsonmixin\n\n@dataclass\nclass person(dataclassjsonmixin):\n    name: str\n\nlidatong = person('lidatong')\n\n# a different example from approach 1 above, but usage is the exact same\nassert person.from_json(lidatong.to_json()) == lidatong\n```\n\npick whichever approach suits your taste. note that there is better support for\n the mixin approach when using _static analysis_ tools (e.g. linting, typing),\n but the differences in implementation will be invisible in _runtime_ usage.\n\n## how do i...\n\n\n\n### use my dataclass with json arrays or objects?\n\n```python\nfrom dataclasses import dataclass\nfrom dataclasses_json import dataclass_json\n\n@dataclass_json\n@dataclass\nclass person:\n    name: str\n```\n\n**encode into a json array containing instances of my data class**\n\n```python\npeople_json = [person('lidatong')]\nperson.schema().dumps(people_json, many=true)  # '[{\"name\": \"lidatong\"}]'\n```\n\n**decode a json array containing instances of my data class**\n\n```python\npeople_json = '[{\"name\": \"lidatong\"}]'\nperson.schema().loads(people_json, many=true)  # [person(name='lidatong')]\n```\n\n**encode as part of a larger json object containing my data class (e.g. an http \nrequest/response)**\n\n```python\nimport json\n\nresponse_dict = {\n    'response': {\n        'person': person('lidatong').to_dict()\n    }\n}\n\nresponse_json = json.dumps(response_dict)\n```\n\nin this case, we do two steps. first, we encode the dataclass into a \n**python dictionary** rather than a json string, using `.to_dict`. \n\nsecond, we leverage the built-in `json.dumps` to serialize our `dataclass` into \na json string.\n\n**decode as part of a larger json object containing my data class (e.g. an http \nresponse)**\n\n```python\nimport json\n\nresponse_dict = json.loads('{\"response\": {\"person\": {\"name\": \"lidatong\"}}}')\n\nperson_dict = response_dict['response']\n\nperson = person.from_dict(person_dict)\n```\n\nin a similar vein to encoding above, we leverage the built-in `json` module.\n\nfirst, call `json.loads` to read the entire json object into a \ndictionary. we then access the key of the value containing the encoded dict of \nour `person` that we want to decode (`response_dict['response']`).\n\nsecond, we load in the dictionary using `person.from_dict`.\n\n\n### encode or decode into python lists/dictionaries rather than json?\n\nthis can be by calling `.schema()` and then using the corresponding \nencoder/decoder methods, ie. `.load(...)`/`.dump(...)`.\n\n**encode into a single python dictionary**\n\n```python\nperson = person('lidatong')\nperson.to_dict()  # {'name': 'lidatong'}\n```\n\n**encode into a list of python dictionaries**\n\n```python\npeople = [person('lidatong')]\nperson.schema().dump(people, many=true)  # [{'name': 'lidatong'}]\n```\n\n**decode a dictionary into a single dataclass instance**\n\n```python\nperson_dict = {'name': 'lidatong'}\nperson.from_dict(person_dict)  # person(name='lidatong')\n```\n\n**decode a list of dictionaries into a list of dataclass instances**\n\n```python\npeople_dicts = [{\"name\": \"lidatong\"}]\nperson.schema().load(people_dicts, many=true)  # [person(name='lidatong')]\n```\n\n### encode or decode from camelcase (or kebab-case)?\n\njson letter case by convention is camelcase, in python members are by convention snake_case.\n\nyou can configure it to encode/decode from other casing schemes at both the class level and the field level.\n\n```python\nfrom dataclasses import dataclass, field\n\nfrom dataclasses_json import lettercase, config, dataclass_json\n\n\n# changing casing at the class level\n@dataclass_json(letter_case=lettercase.camel)\n@dataclass\nclass person:\n    given_name: str\n    family_name: str\n    \nperson('alice', 'liddell').to_json()  # '{\"givenname\": \"alice\"}'\nperson.from_json('{\"givenname\": \"alice\", \"familyname\": \"liddell\"}')  # person('alice', 'liddell')\n\n# at the field level\n@dataclass_json\n@dataclass\nclass person:\n    given_name: str = field(metadata=config(letter_case=lettercase.camel))\n    family_name: str\n    \nperson('alice', 'liddell').to_json()  # '{\"givenname\": \"alice\"}'\n# notice how the `family_name` field is still snake_case, because it wasn't configured above\nperson.from_json('{\"givenname\": \"alice\", \"family_name\": \"liddell\"}')  # person('alice', 'liddell')\n```\n\n**this library assumes your field follows the python convention of snake_case naming.**\nif your field is not `snake_case` to begin with and you attempt to parameterize `lettercase`, \nthe behavior of encoding/decoding is undefined (most likely it will result in subtle bugs).\n\n### encode or decode using a different name\n\n```python\nfrom dataclasses import dataclass, field\n\nfrom dataclasses_json import config, dataclass_json\n\n@dataclass_json\n@dataclass\nclass person:\n    given_name: str = field(metadata=config(field_name=\"overriddengivenname\"))\n\nperson(given_name=\"alice\")  # person('alice')\nperson.from_json('{\"overriddengivenname\": \"alice\"}')  # person('alice')\nperson('alice').to_json()  # {\"overriddengivenname\": \"alice\"}\n```\n\n### handle missing or optional field values when decoding?\n\nby default, any fields in your dataclass that use `default` or \n`default_factory` will have the values filled with the provided default, if the\ncorresponding field is missing from the json you're decoding.\n\n**decode json with missing field**\n\n```python\n@dataclass_json\n@dataclass\nclass student:\n    id: int\n    name: str = 'student'\n\nstudent.from_json('{\"id\": 1}')  # student(id=1, name='student')\n```\n\nnotice `from_json` filled the field `name` with the specified default 'student'\nwhen it was missing from the json.\n\nsometimes you have fields that are typed as `optional`, but you don't \nnecessarily want to assign a default. in that case, you can use the \n`infer_missing` kwarg to make `from_json` infer the missing field value as `none`.\n\n**decode optional field without default**\n\n```python\n@dataclass_json\n@dataclass\nclass tutor:\n    id: int\n    student: optional[student] = none\n\ntutor.from_json('{\"id\": 1}')  # tutor(id=1, student=none)\n```\n\npersonally i recommend you leverage dataclass defaults rather than using \n`infer_missing`, but if for some reason you need to decouple the behavior of \njson decoding from the field's default value, this will allow you to do so.\n\n\n### handle unknown / extraneous fields in json?\n\nby default, it is up to the implementation what happens when a `json_dataclass` receives input parameters that are not defined.\n(the `from_dict` method ignores them, when loading using `schema()` a validationerror is raised.)\nthere are three ways to customize this behavior.\n\nassume you want to instantiate a dataclass with the following dictionary:\n```python\ndump_dict = {\"endpoint\": \"some_api_endpoint\", \"data\": {\"foo\": 1, \"bar\": \"2\"}, \"undefined_field_name\": [1, 2, 3]}\n```\n\n1. you can enforce to always raise an error by setting the `undefined` keyword to `undefined.raise`\n (`'raise'` as a case-insensitive string works as well). of course it works normally if you don't pass any undefined parameters.\n    \n```python\nfrom dataclasses_json import undefined\n\n@dataclass_json(undefined=undefined.raise)\n@dataclass()\nclass exactapidump:\n    endpoint: str\n    data: dict[str, any]\n\ndump = exactapidump.from_dict(dump_dict)  # raises undefinedparametererror\n```\n\n2. you can simply ignore any undefined parameters by setting the `undefined` keyword to `undefined.exclude`\n (`'exclude'` as a case-insensitive string works as well). note that you will not be able to retrieve them using `to_dict`:\n    \n```python\nfrom dataclasses_json import undefined\n\n@dataclass_json(undefined=undefined.exclude)\n@dataclass()\nclass dontcareapidump:\n    endpoint: str\n    data: dict[str, any]\n\ndump = dontcareapidump.from_dict(dump_dict)  # dontcareapidump(endpoint='some_api_endpoint', data={'foo': 1, 'bar': '2'})\ndump.to_dict()  # {\"endpoint\": \"some_api_endpoint\", \"data\": {\"foo\": 1, \"bar\": \"2\"}}\n```\n\n3. you can save them in a catch-all field and do whatever needs to be done later. simply set the `undefined`\nkeyword to `undefined.include` (`'include'` as a case-insensitive string works as well) and define a field\nof type `catchall` where all unknown values will end up.\n this simply represents a dictionary that can hold anything. \n if there are no undefined parameters, this will be an empty dictionary.\n    \n```python\nfrom dataclasses_json import undefined, catchall\n\n@dataclass_json(undefined=undefined.include)\n@dataclass()\nclass unknownapidump:\n    endpoint: str\n    data: dict[str, any]\n    unknown_things: catchall\n\ndump = unknownapidump.from_dict(dump_dict)  # unknownapidump(endpoint='some_api_endpoint', data={'foo': 1, 'bar': '2'}, unknown_things={'undefined_field_name': [1, 2, 3]})\ndump.to_dict()  # {'endpoint': 'some_api_endpoint', 'data': {'foo': 1, 'bar': '2'}, 'undefined_field_name': [1, 2, 3]}\n```\n\nnotes:\n- when using `undefined.include`, an `undefinedparametererror` will be raised if you don't specify\nexactly one field of type `catchall`.\n- note that `lettercase` does not affect values written into the `catchall` field, they will be as they are given.\n- when specifying a default (or a default factory) for the the `catchall`-field, e.g. `unknown_things: catchall = none`, the default value will be used instead of an empty dict if there are no undefined parameters.\n- calling __init__ with non-keyword arguments resolves the arguments to the defined fields and writes everything else into the catch-all field.\n\n4. all 3 options work as well using `schema().loads` and `schema().dumps`, as long as you don't overwrite it by specifying `schema(unknown=<a marshmallow value>)`.\nmarshmallow uses the same 3 keywords ['include', 'exclude', 'raise'](https://marshmallow.readthedocs.io/en/stable/quickstart.html#handling-unknown-fields).\n\n5. all 3 operations work as well using `__init__`, e.g. `unknownapidump(**dump_dict)` will **not** raise a `typeerror`, but write all unknown values to the field tagged as `catchall`.\n   classes tagged with `exclude` will also simply ignore unknown parameters. note that classes tagged as `raise` still raise a `typeerror`, and **not** a `undefinedparametererror` if supplied with unknown keywords.\n\n\n### override the default encode / decode / marshmallow field of a specific field?\n\nsee [overriding](#overriding)\n\n### handle recursive dataclasses?\nobject hierarchies where fields are of the type that they are declared within require a small\ntype hinting trick to declare the forward reference.\n```python\nfrom typing import optional\nfrom dataclasses import dataclass\nfrom dataclasses_json import dataclass_json\n\n@dataclass_json\n@dataclass\nclass tree():\n    value: str\n    left: optional['tree']\n    right: optional['tree']\n```\n\navoid using\n```python\nfrom __future__ import annotations\n```\nas it will cause problems with the way dataclasses_json accesses the type annotations.\n\n### use numpy or pandas types?\ndata types specific to libraries commonly used in data analysis and machine learning like [numpy](https://github.com/numpy/numpy) and [pandas](https://github.com/pandas-dev/pandas) are not supported by default, but you can easily enable them by using custom decoders and encoders. below are two examples for `numpy` and `pandas` types.\n\n```python\nfrom dataclasses import field, dataclass\nfrom dataclasses_json import config, dataclass_json\nimport numpy as np\nimport pandas as pd\n\n@dataclass_json\n@dataclass\nclass datawithnumpy:\n    my_int: np.int64 = field(metadata=config(decoder=np.int64))\n    my_float: np.float64 = field(metadata=config(decoder=np.float64))\n    my_array: np.ndarray = field(metadata=config(decoder=np.asarray))\ndatawithnumpy.from_json(\"{\\\"my_int\\\": 42, \\\"my_float\\\": 13.37, \\\"my_array\\\": [1,2,3]}\")\n\n@dataclass_json\n@dataclass\nclass datawithpandas:\n    my_df: pd.dataframe = field(metadata=config(decoder=pd.dataframe.from_records, encoder=lambda x: x.to_dict(orient=\"records\")))\ndata = datawithpandas.from_dict({\"my_df\": [{\"col1\": 1, \"col2\": 2}, {\"col1\": 3, \"col2\": 4}]})\n# my_df results in:\n# col1  col2\n# 1    2    \n# 3    4\ndata.to_dict()\n# {\"my_df\": [{\"col1\": 1, \"col2\": 2}, {\"col1\": 3, \"col2\": 4}]}\n```\n\n## marshmallow interop\n\nusing the `dataclass_json` decorator or mixing in `dataclassjsonmixin` will\nprovide you with an additional method `.schema()`.\n\n`.schema()` generates a schema exactly equivalent to manually creating a\nmarshmallow schema for your dataclass. you can reference the [marshmallow api docs](https://marshmallow.readthedocs.io/en/3.0/api_reference.html#schema)\nto learn other ways you can use the schema returned by `.schema()`.\n\nyou can pass in the exact same arguments to `.schema()` that you would when\nconstructing a `personschema` instance, e.g. `.schema(many=true)`, and they will\nget passed through to the marshmallow schema.\n\n\n```python\nfrom dataclasses import dataclass\nfrom dataclasses_json import dataclass_json\n\n@dataclass_json\n@dataclass\nclass person:\n    name: str\n\n# you don't need to do this - it's generated for you by `.schema()`!\nfrom marshmallow import schema, fields\n\nclass personschema(schema):\n    name = fields.str()\n```\n\nbriefly, on what's going on under the hood in the above examples: calling \n`.schema()` will have this library generate a\n[marshmallow schema]('https://marshmallow.readthedocs.io/en/3.0/api_reference.html#schema)\nfor you. it also fills in the corresponding object hook, so that marshmallow\nwill create an instance of your data class on `load` (e.g.\n`person.schema().load` returns a `person`) rather than a `dict`, which it does\nby default in marshmallow.\n\n**performance note**\n\n`.schema()` is not cached (it generates the schema on every call), so if you\nhave a nested data class you may want to save the result to a variable to \navoid re-generation of the schema on every usage.\n\n```python\nperson_schema = person.schema()\nperson_schema.dump(people, many=true)\n\n# later in the code...\n\nperson_schema.dump(person)\n```\n\n## overriding / extending\n\n#### overriding\n\nfor example, you might want to encode/decode `datetime` objects using iso format\nrather than the default `timestamp`.\n\n```python\nfrom dataclasses import dataclass, field\nfrom dataclasses_json import dataclass_json, config\nfrom datetime import datetime\nfrom marshmallow import fields\n\n@dataclass_json\n@dataclass\nclass dataclasswithisodatetime:\n    created_at: datetime = field(\n        metadata=config(\n            encoder=datetime.isoformat,\n            decoder=datetime.fromisoformat,\n            mm_field=fields.datetime(format='iso')\n        )\n    )\n```\n\n#### extending\n\nsimilarly, you might want to extend `dataclasses_json` to encode `date` objects.\n\n```python\nfrom dataclasses import dataclass, field\nfrom dataclasses_json import dataclass_json, config\nfrom datetime import date\nfrom marshmallow import fields\n\ndataclasses_json.cfg.global_config.encoders[date] = date.isoformat\ndataclasses_json.cfg.global_config.decoders[date] = date.fromisoformat\n\n@dataclass_json\n@dataclass\nclass dataclasswithisodatetime:\n    created_at: date\n    modified_at: date\n    accessed_at: date\n```\n\nas you can see, you can **override** or **extend** the default codecs by providing a \"hook\" via a \ncallable:\n- `encoder`: a callable, which will be invoked to convert the field value when encoding to json\n- `decoder`: a callable, which will be invoked to convert the json value when decoding from json\n- `mm_field`: a marshmallow field, which will affect the behavior of any operations involving `.schema()`\n\nnote that these hooks will be invoked regardless if you're using \n`.to_json`/`dump`/`dumps`\nand `.from_json`/`load`/`loads`. so apply overrides / extensions judiciously, making sure to \ncarefully consider whether the interaction of the encode/decode/mm_field is consistent with what you expect!\n\n\n#### what if i have other dataclass field extensions that rely on `metadata`\n\nall the `dataclasses_json.config` does is return a mapping, namespaced under the key `'dataclasses_json'`.\n\nsay there's another module, `other_dataclass_package` that uses metadata. here's how you solve your problem:\n\n```python\nmetadata = {'other_dataclass_package': 'some metadata...'}  # pre-existing metadata for another dataclass package\ndataclass_json_config = config(\n            encoder=datetime.isoformat,\n            decoder=datetime.fromisoformat,\n            mm_field=fields.datetime(format='iso')\n        )\nmetadata.update(dataclass_json_config)\n\n@dataclass_json\n@dataclass\nclass dataclasswithisodatetime:\n    created_at: datetime = field(metadata=metadata)\n```\n\nyou can also manually specify the dataclass_json configuration mapping.\n\n```python\n@dataclass_json\n@dataclass\nclass dataclasswithisodatetime:\n    created_at: date = field(\n        metadata={'dataclasses_json': {\n            'encoder': date.isoformat,\n            'decoder': date.fromisoformat,\n            'mm_field': fields.datetime(format='iso')\n        }}\n    )\n```\n\n## a larger example\n\n```python\nfrom dataclasses import dataclass\nfrom dataclasses_json import dataclass_json\n\nfrom typing import list\n\n@dataclass_json\n@dataclass(frozen=true)\nclass minion:\n    name: str\n\n\n@dataclass_json\n@dataclass(frozen=true)\nclass boss:\n    minions: list[minion]\n\nboss = boss([minion('evil minion'), minion('very evil minion')])\nboss_json = \"\"\"\n{\n    \"minions\": [\n        {\n            \"name\": \"evil minion\"\n        },\n        {\n            \"name\": \"very evil minion\"\n        }\n    ]\n}\n\"\"\".strip()\n\nassert boss.to_json(indent=4) == boss_json\nassert boss.from_json(boss_json) == boss\n```\n\n## performance\n\ntake a look at [this issue](https://github.com/lidatong/dataclasses-json/issues/228)\n\n## versioning\n\nnote this library is still pre-1.0.0 (semver).\n\nthe current convention is:\n- **patch** version upgrades for bug fixes and minor feature additions.\n- **minor** version upgrades for big api features and breaking changes.\n\nonce this library is 1.0.0, it will follow standard semver conventions.\n\n### python compatibility \n\nany version that is not listed in the table below we do not test against, though you might still be able to install the library. for future python versions, please open an issue and/or a pull request, adding them to the ci suite.\n\n\n| python version range | compatible dataclasses-json version |\n|----------------------|:-----------------------------------:|\n| 3.7.x - 3.12.x       |            0.5.x - 0.6.x            |\n| >= 3.13.x            |         no official support (yet)   |\n\n\n## roadmap\n\ncurrently the focus is on investigating and fixing bugs in this library, working\non performance, and finishing [this issue](https://github.com/lidatong/dataclasses-json/issues/31).\n\nthat said, if you think there's a feature missing / something new needed in the\nlibrary, please see the contributing section below.\n\n\n## contributing\n\nfirst of all, thank you for being interested in contributing to this library.\ni really appreciate you taking the time to work on this project.\n\n- if you're just interested in getting into the code, a good place to start are \nissues tagged as bugs.\n- if introducing a new feature, especially one that modifies the public api, \nconsider submitting an issue for discussion before a pr. please also take a look \nat existing issues / prs to see what you're proposing has  already been covered \nbefore / exists.\n- i like to follow the commit conventions documented [here](https://www.conventionalcommits.org/en/v1.0.0/#summary)\n\n### setting up your environment\n\nthis project uses [poetry](https://python-poetry.org/) for dependency and venv management. it is quite simple to get ready for your first commit:\n- [install](https://python-poetry.org/docs/#installation) latest stable poetry\n- navigate to where you cloned `dataclasses-json`\n- run `poetry install`\n- create a branch and start writing code!\n\n",
  "docs_url": null,
  "keywords": "",
  "license": "mit",
  "name": "dataclasses-json",
  "package_url": "https://pypi.org/project/dataclasses-json/",
  "project_url": "https://pypi.org/project/dataclasses-json/",
  "project_urls": {
    "Homepage": "https://github.com/lidatong/dataclasses-json",
    "Repository": "https://github.com/lidatong/dataclasses-json",
    "changelog": "https://github.com/lidatong/dataclasses-json/releases",
    "documentation": "https://lidatong.github.io/dataclasses-json/",
    "issues": "https://github.com/lidatong/dataclasses-json/issues"
  },
  "release_url": "https://pypi.org/project/dataclasses-json/0.6.3/",
  "requires_dist": [
    "marshmallow (>=3.18.0,<4.0.0)",
    "typing-inspect (>=0.4.0,<1)"
  ],
  "requires_python": ">=3.7,<4.0",
  "summary": "easily serialize dataclasses to and from json.",
  "version": "0.6.3",
  "releases": [],
  "developers": [
    "charles.dt.li@gmail.com",
    "charles_li"
  ],
  "kwds": "dataclasses_json dataclass_json json_dataclass dataclassjsonmixin json",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_dataclasses_json",
  "homepage": "https://github.com/lidatong/dataclasses-json",
  "release_count": 73,
  "dependency_ids": [
    "pypi_marshmallow",
    "pypi_typing_inspect"
  ],
  "documentation_summary": "The GitHub repository \"lidatong/dataclasses-json\" provides a library for easy serialization of Data Classes to and from JSON in Python. It offers a simple API that supports encoding and decoding, including handling of camelCase JSON, and works with Python 3.7 and newer versions. The library supports various types, including collections, datetime, UUID, and Decimal objects. Users can choose between a class decorator or a mixin approach for usage. It also allows for customization, such as handling missing or optional field values, dealing with unknown fields, and overriding default encode/decode behaviors. The project is licensed under the MIT license and welcomes contributions.",
  "embedding": [
    -0.02099250815808773,
    0.01591256819665432,
    0.02080029435455799,
    -0.04385223612189293,
    -0.003235029289498925,
    0.030918985605239868,
    0.01521236076951027,
    -0.02487797662615776,
    -0.006562733091413975,
    -0.024521006271243095,
    0.007462019566446543,
    0.013551082462072372,
    -0.028310367837548256,
    0.009418482892215252,
    0.004582243040204048,
    -0.0029896132182329893,
    0.018232865259051323,
    -0.02107488550245762,
    0.030397262424230576,
    -0.010365823283791542,
    0.022338006645441055,
    0.013729567639529705,
    -0.012768497690558434,
    -0.0102491220459342,
    -0.018768317997455597,
    0.02376588061451912,
    0.0020662997849285603,
    0.004891158547252417,
    -0.016049863770604134,
    0.014251290820538998,
    0.02844766341149807,
    -0.02388944663107395,
    -0.02796712890267372,
    -0.02766507863998413,
    -0.009734262712299824,
    -0.032786205410957336,
    0.004269895609468222,
    0.011011112481355667,
    0.03860754147171974,
    0.008416224271059036,
    0.007976878434419632,
    0.001250248751603067,
    -0.014924039132893085,
    -0.0258802343159914,
    -0.015047606080770493,
    0.020827753469347954,
    -0.0026069015730172396,
    -0.03602638468146324,
    -0.006041009444743395,
    -0.0012931536184623837,
    0.044209204614162445,
    0.03152308613061905,
    0.005189776420593262,
    -0.03220956400036812,
    0.00920567475259304,
    -0.02169271558523178,
    -0.009013460949063301,
    0.02555072493851185,
    0.00019768431957345456,
    -0.010461930185556412,
    0.03204480931162834,
    0.017450280487537384,
    -0.05192522332072258,
    -0.008862435817718506,
    0.0016423994675278664,
    -0.019619552418589592,
    -0.022255629301071167,
    -0.0027373323682695627,
    0.015747813507914543,
    0.010709062218666077,
    0.017161959782242775,
    0.034378837794065475,
    0.00497010350227356,
    0.0066794343292713165,
    0.04832807555794716,
    -0.018479997292160988,
    -0.01302935928106308,
    -0.002975883660838008,
    -0.020937589928507805,
    -0.0036452000495046377,
    0.012555689550936222,
    -0.02696486935019493,
    -0.013063683174550533,
    0.04258911684155464,
    -0.0020971912890672684,
    0.036273516714572906,
    -0.020511973649263382,
    0.01679125986993313,
    -0.009899018332362175,
    -0.012953846715390682,
    0.005872822366654873,
    0.0056909057311713696,
    0.01014615036547184,
    0.0001052778898156248,
    -0.011539701372385025,
    0.030067753046751022,
    -0.005605095997452736,
    0.029079223051667213,
    0.008958542719483376,
    -0.008718275465071201,
    -0.012548824772238731,
    0.021019967272877693,
    -0.021610338240861893,
    -0.02019619382917881,
    -0.018768317997455597,
    -0.020662998780608177,
    0.02636076882481575,
    0.008690816350281239,
    0.03308825567364693,
    0.034461215138435364,
    -0.03144070878624916,
    0.07622655481100082,
    0.0013043088838458061,
    -0.027006058022379875,
    -0.008931083604693413,
    -0.013173519633710384,
    0.012466447427868843,
    -1.810050343920011e-05,
    -0.00039751388248987496,
    0.005986091215163469,
    -0.011107220314443111,
    0.02744540572166443,
    0.005533015355467796,
    -0.0033071094658225775,
    0.00430078711360693,
    -0.004263030830770731,
    -0.006751514505594969,
    -0.007626774720847607,
    -0.007818988524377346,
    -5.073504144093022e-05,
    0.006168007850646973,
    0.009047784842550755,
    0.020237382501363754,
    0.0018346133874729276,
    0.0002243926137452945,
    0.0038545760326087475,
    0.010997382923960686,
    0.002328877802938223,
    -0.018383890390396118,
    -0.013070547953248024,
    -0.0008786923135630786,
    0.022351736202836037,
    -0.00890362448990345,
    -0.0022482166532427073,
    -0.024630842730402946,
    0.026196014136075974,
    0.012761632911860943,
    -0.0065695978701114655,
    -0.005962064489722252,
    -0.004973535891622305,
    0.020814023911952972,
    -0.003183543449267745,
    -0.0008529493352398276,
    0.005412881728261709,
    -0.024699490517377853,
    0.029710782691836357,
    0.007249211426824331,
    0.015857649967074394,
    0.0025434023700654507,
    0.02177509292960167,
    -0.017464010044932365,
    0.033253010362386703,
    -0.02935381419956684,
    -0.01791708543896675,
    -0.006507814861834049,
    0.030589476227760315,
    0.02038840763270855,
    -0.02715708315372467,
    -0.017340444028377533,
    0.015088794752955437,
    -0.014113995246589184,
    0.027486594393849373,
    -0.022900918498635292,
    0.012789092026650906,
    -0.02478186972439289,
    0.03415916487574577,
    0.027829833328723907,
    0.0084986025467515,
    -0.035669416189193726,
    0.007606180384755135,
    0.01788962632417679,
    0.012452717870473862,
    0.013901187106966972,
    0.035751793533563614,
    -0.038937050849199295,
    -0.002176136476919055,
    -0.007784664630889893,
    0.0009576373267918825,
    -1.9548544514691457e-05,
    0.02804950624704361,
    0.015061335638165474,
    0.024191496893763542,
    -0.02386198751628399,
    -0.02636076882481575,
    -0.5852090716362,
    -0.015637977048754692,
    -0.002244784263893962,
    -0.017477739602327347,
    -0.0027424809522926807,
    0.004541054368019104,
    -0.005653149448335171,
    0.013750161975622177,
    -0.002557131927460432,
    0.015047606080770493,
    -0.013585406355559826,
    0.03528498858213425,
    0.03322555124759674,
    -0.02099250815808773,
    -0.02150050178170204,
    -0.018562374636530876,
    0.044319044798612595,
    -0.035971466451883316,
    -0.02298329584300518,
    0.0017084729624912143,
    -0.016681423410773277,
    0.04841045290231705,
    -0.04061206057667732,
    0.02427387423813343,
    -0.016173429787158966,
    0.006349924951791763,
    0.011745644733309746,
    0.016585316509008408,
    0.008072985336184502,
    -0.010853222571313381,
    -0.04041984677314758,
    0.013468705117702484,
    0.006130251567810774,
    -0.029518568888306618,
    0.05165063217282295,
    0.014594529755413532,
    -0.023106861859560013,
    0.04953628033399582,
    0.007846447639167309,
    0.0407768152654171,
    -0.006971187889575958,
    -0.012363474816083908,
    -0.016063593327999115,
    0.03742679953575134,
    0.006538706365972757,
    0.0039541153237223625,
    0.011532836593687534,
    0.02008635737001896,
    -0.004163491073995829,
    -0.006243520881980658,
    0.007269805762916803,
    -0.002047421643510461,
    0.019537175074219704,
    -0.02715708315372467,
    0.03166038170456886,
    -0.007997472770512104,
    0.021514231339097023,
    -0.0014132873620837927,
    0.003211002564057708,
    0.0031509357504546642,
    0.016448020935058594,
    0.01466317754238844,
    0.015473222360014915,
    -0.014045347459614277,
    -0.011834886856377125,
    0.01610478200018406,
    0.008230875246226788,
    -0.028282908722758293,
    -0.009892153553664684,
    -0.02397182397544384,
    0.007805258966982365,
    -0.0005852227914147079,
    0.020333489403128624,
    -0.02239292487502098,
    0.037042371928691864,
    0.027294378727674484,
    0.005399152170866728,
    0.0008782632648944855,
    -0.005838498473167419,
    0.03289604187011719,
    0.007606180384755135,
    0.009349835105240345,
    -0.010420741513371468,
    -0.04041984677314758,
    0.03602638468146324,
    0.018562374636530876,
    0.0017453712644055486,
    -0.002860898617655039,
    0.015404574573040009,
    0.002428417094051838,
    0.01680498942732811,
    0.019770577549934387,
    0.0016484061488881707,
    -0.033857110887765884,
    0.003034234279766679,
    0.03836040943861008,
    0.013736432418227196,
    -0.0022825405467301607,
    -0.023628585040569305,
    -0.009912747889757156,
    0.009665614925324917,
    -0.010255986824631691,
    0.0034169459249824286,
    -0.01701093465089798,
    -0.00733158877119422,
    0.0231892392039299,
    0.0025863072369247675,
    0.022132061421871185,
    0.001127540715970099,
    -0.021418124437332153,
    -0.022434113547205925,
    -0.043797317892313004,
    -0.018562374636530876,
    -0.0006246953271329403,
    -0.014896580018103123,
    -0.04140837490558624,
    0.02785729244351387,
    0.017573846504092216,
    0.027637619525194168,
    -0.013063683174550533,
    -0.02159660868346691,
    -0.003410081146284938,
    -0.017491469159722328,
    0.025784127414226532,
    -0.00920567475259304,
    0.011704456061124802,
    0.015885109081864357,
    -0.01149164792150259,
    -0.005914011038839817,
    -0.0010537442285567522,
    0.004149761516600847,
    0.02368350327014923,
    0.01791708543896675,
    -0.02196730673313141,
    0.040749356150627136,
    0.0059483349323272705,
    0.012555689550936222,
    0.021665256470441818,
    -0.013338274322450161,
    -0.01159461960196495,
    -0.0035113368649035692,
    0.010407011955976486,
    0.009137026965618134,
    -0.0433579720556736,
    -0.0034941749181598425,
    -0.004297354724258184,
    -0.014127724803984165,
    -0.012569419108331203,
    0.00115070934407413,
    0.005351098719984293,
    -0.03190751373767853,
    -0.0019221394322812557,
    -0.022420383989810944,
    0.02226935885846615,
    0.00013107445556670427,
    -0.0032384616788476706,
    -0.02089640125632286,
    -0.014978958293795586,
    -0.019166475161910057,
    -0.011340622790157795,
    0.0132353026419878,
    0.019537175074219704,
    -0.0040536546148359776,
    0.021926118060946465,
    -0.04069443792104721,
    -0.022612597793340683,
    -0.02097877860069275,
    0.01949598453938961,
    0.0002685846702661365,
    -0.022214440628886223,
    -0.021898658946156502,
    -0.007359047885984182,
    -0.000377134041627869,
    -0.006703461054712534,
    0.010434471070766449,
    0.029683323577046394,
    -0.025440888479351997,
    0.009768587537109852,
    -0.0003443117893766612,
    -0.018328972160816193,
    -0.004571945872157812,
    0.01283028069883585,
    -0.02445235848426819,
    -0.0027596428990364075,
    0.028804631903767586,
    0.005155452527105808,
    -0.005381990224123001,
    0.013400057330727577,
    0.0035731198731809855,
    0.025825316086411476,
    0.010331499390304089,
    0.006892242934554815,
    -0.019139016047120094,
    0.012445853091776371,
    0.002483335556462407,
    0.019743118435144424,
    0.007571856491267681,
    -0.016434291377663612,
    0.0029878970235586166,
    0.006507814861834049,
    -0.0014613408129662275,
    0.00356968748383224,
    -0.006113089621067047,
    -0.01158775482326746,
    0.007516938261687756,
    -0.025193756446242332,
    0.02388944663107395,
    -0.031578004360198975,
    0.015377115458250046,
    -0.004434650298207998,
    0.03072677180171013,
    -0.024905435740947723,
    -0.01679125986993313,
    -0.02626466192305088,
    0.02526240423321724,
    0.02793966978788376,
    0.005907146260142326,
    0.022338006645441055,
    -0.014038482680916786,
    -0.002668684581294656,
    0.019564634189009666,
    0.008368170820176601,
    0.003597146598622203,
    0.004070816561579704,
    0.015171172097325325,
    0.01541830413043499,
    -0.009651885367929935,
    -0.0012227896368131042,
    -0.010619820095598698,
    -0.039348941296339035,
    0.0031646653078496456,
    0.01782097853720188,
    0.003216151148080826,
    -0.011814292520284653,
    0.02169271558523178,
    0.009521454572677612,
    0.008114174008369446,
    -0.008759464137256145,
    0.035669416189193726,
    -0.028392745181918144,
    0.009267457760870457,
    0.003988439217209816,
    0.02586650475859642,
    -0.012713579460978508,
    0.0016012107953429222,
    0.01620088890194893,
    -0.010235392488539219,
    0.0270609762519598,
    -0.014113995246589184,
    0.013805080205202103,
    -0.00815536268055439,
    0.006192035041749477,
    0.0003235029289498925,
    -0.003132057609036565,
    0.021665256470441818,
    -0.005093669518828392,
    -0.007105051074177027,
    0.03124849498271942,
    0.04324813559651375,
    -0.0023408911656588316,
    -0.0028471690602600574,
    -0.0114847831428051,
    0.029902996495366096,
    -0.0037756310775876045,
    0.03533990681171417,
    -0.016489209607243538,
    -0.031989891082048416,
    -0.02725319005548954,
    0.0009147324017249048,
    0.0189879909157753,
    -0.02516629733145237,
    -0.02995791658759117,
    -0.032978419214487076,
    -0.027102164924144745,
    0.026182284578680992,
    -0.003706983057782054,
    0.011251380667090416,
    0.031275954097509384,
    0.01416891347616911,
    0.018356431275606155,
    -0.01631072536110878,
    -0.019125286489725113,
    0.0003159945772495121,
    -0.00023018477077130228,
    0.012905793264508247,
    -0.020553162321448326,
    -0.044209204614162445,
    0.015006417408585548,
    -0.011127814650535583,
    0.010818898677825928,
    0.016544127836823463,
    0.02438371069729328,
    0.023230427876114845,
    -0.019729388877749443,
    0.00475043011829257,
    0.004884293768554926,
    0.02734929695725441,
    -0.0008439393131993711,
    -0.005491826683282852,
    -0.001651838538236916,
    0.02406793087720871,
    0.008272063918411732,
    -0.0081484979018569,
    0.01168386172503233,
    0.031495627015829086,
    -0.007970013655722141,
    -0.01418264303356409,
    0.01661277562379837,
    -0.016077322885394096,
    -0.03333538770675659,
    0.003059977199882269,
    0.008093579672276974,
    -0.015775272622704506,
    0.016859907656908035,
    0.0013918349286541343,
    0.001832897192798555,
    0.029106682166457176,
    -0.010887546464800835,
    0.017464010044932365,
    -0.02018246427178383,
    -0.01188294030725956,
    -0.02913414128124714,
    -0.02030603028833866,
    0.018383890390396118,
    0.014443504624068737,
    0.011917264200747013,
    -0.00239752558991313,
    -0.003916359040886164,
    -0.04747684299945831,
    -0.015006417408585548,
    -0.005708067677915096,
    0.018631022423505783,
    -0.008203416131436825,
    -0.012823415920138359,
    -0.01093559991568327,
    0.01819167658686638,
    0.012226179242134094,
    0.0022894053254276514,
    0.019619552418589592,
    0.01228796225041151,
    -0.024411169812083244,
    -0.002598320599645376,
    0.0030462476424872875,
    -0.011450459249317646,
    0.007413966115564108,
    -0.008883030153810978,
    0.03890959173440933,
    0.014127724803984165,
    0.048080943524837494,
    0.012761632911860943,
    0.028694795444607735,
    0.014855391345918179,
    -0.006576462648808956,
    -0.01352362334728241,
    0.02358739636838436,
    0.01108662597835064,
    0.009583237580955029,
    0.013413786888122559,
    -0.03064439445734024,
    0.02147304266691208,
    0.012699849903583527,
    0.02535851113498211,
    0.019921602681279182,
    0.013365733437240124,
    0.025427158921957016,
    0.021816281601786613,
    -0.004527324810624123,
    -0.0064117079600691795,
    0.008395629934966564,
    -0.013722702860832214,
    -0.016846178099513054,
    0.0027836698573082685,
    0.020237382501363754,
    -0.01128570456057787,
    0.02158287912607193,
    0.010475659742951393,
    -0.025990070775151253,
    -0.024191496893763542,
    0.0256605613976717,
    -0.022942107170820236,
    0.0005358821945264935,
    -0.014731825329363346,
    -0.006552435923367739,
    -0.011951588094234467,
    -0.0030840039253234863,
    -0.003617740934714675,
    0.00299647799693048,
    -0.012809686362743378,
    -0.009473401121795177,
    0.005351098719984293,
    -0.013935511000454426,
    0.03830549120903015,
    -0.026937410235404968,
    0.014704366214573383,
    -0.007304129656404257,
    -0.030067753046751022,
    0.005491826683282852,
    -0.023944364860653877,
    0.013461840339004993,
    0.012219314463436604,
    0.010963059030473232,
    -0.009315511211752892,
    0.03608130291104317,
    -0.009741127490997314,
    0.022420383989810944,
    -0.03553212061524391,
    -0.015692895278334618,
    -0.03742679953575134,
    0.012651796452701092,
    -0.017464010044932365,
    0.022818541154265404,
    -0.0027287513948976994,
    -0.006205764599144459,
    0.03503785654902458,
    -0.004832807462662458,
    0.01093559991568327,
    0.013612865470349789,
    0.002148677362129092,
    -0.005131425801664591,
    0.003597146598622203,
    0.0003348727186676115,
    0.0017196283442899585,
    0.0001926429831655696,
    -0.014237561263144016,
    -0.0044861361384391785,
    -0.0029999103862792253,
    -0.006432302296161652,
    -0.010098096914589405,
    -0.0011206759372726083,
    -0.006452896632254124,
    0.005611960776150227,
    0.026539253070950508,
    -0.0014373140875250101,
    0.013805080205202103,
    0.014429775066673756,
    -0.008718275465071201,
    -0.019358688965439796,
    0.015102524310350418,
    0.008553520776331425,
    0.006603921763598919,
    -0.03182513639330864,
    0.004077681340277195,
    -0.0189879909157753,
    0.007475749123841524,
    0.008121038787066936,
    -0.048575207591056824,
    0.026196014136075974,
    0.024946624413132668,
    -0.00555017776787281,
    0.03319809213280678,
    0.0036452000495046377,
    -0.01761503517627716,
    -0.01821913570165634,
    0.02714335359632969,
    0.03344522416591644,
    0.012610607780516148,
    -0.007262940984219313,
    -0.004534189589321613,
    -0.022338006645441055,
    0.0017196283442899585,
    0.003501039696857333,
    0.014718095771968365,
    0.007894501090049744,
    0.0034117973409593105,
    -0.0024215523153543472,
    -0.015033876523375511,
    -0.017367903143167496,
    -0.02156914956867695,
    -0.005076507572084665,
    -0.030891526490449905,
    -0.012692985124886036,
    0.00621949415653944,
    0.011848616413772106,
    0.02435625158250332,
    -0.007214887533336878,
    -0.010887546464800835,
    -0.01407280657440424,
    -0.025646831840276718,
    -0.002234487095847726,
    0.02913414128124714,
    0.0043282462283968925,
    0.006329330615699291,
    0.011107220314443111,
    0.007084456738084555,
    0.049481358379125595,
    -0.018946802243590355,
    -0.006216061767190695,
    0.0063224658370018005,
    0.01168386172503233,
    0.010956194251775742,
    -0.0038339816965162754,
    -0.00268413033336401,
    -0.005097101908177137,
    0.0043968940153717995,
    -0.02636076882481575,
    0.025495806708931923,
    -0.005131425801664591,
    -0.013839404098689556,
    -0.015665436163544655,
    0.0021881498396396637,
    -0.015432033687829971,
    -0.010475659742951393,
    -0.012253638356924057,
    -0.03731696307659149,
    -0.0009207390830852091,
    0.0216789860278368,
    0.012789092026650906,
    0.008443683385848999,
    -0.028667336329817772,
    -0.015953756868839264,
    0.04374239966273308,
    -0.008532926440238953,
    0.035065315663814545,
    0.0006109657697379589,
    0.012342880479991436,
    -0.012898928485810757,
    0.013468705117702484,
    0.004019330721348524,
    0.003017072333022952,
    0.008862435817718506,
    0.006353357341140509,
    -0.02935381419956684,
    -0.021555420011281967,
    0.005035318899899721,
    0.0038236845284700394,
    0.02725319005548954,
    0.026484334841370583,
    0.009281187318265438,
    -0.01600867509841919,
    0.03234685957431793,
    -0.0030874363146722317,
    -0.021527960896492004,
    0.003888899926096201,
    -0.03166038170456886,
    -0.019042909145355225,
    -0.04041984677314758,
    -0.030095212161540985,
    -0.034680888056755066,
    0.0002664394269231707,
    0.006068468559533358,
    0.01878204755485058,
    0.017985733225941658,
    -0.01672261208295822,
    0.005560474935919046,
    0.000441062351455912,
    -0.007805258966982365,
    0.04190263897180557,
    0.00900659617036581,
    0.021912388503551483,
    0.03339030593633652,
    -0.008423089049756527,
    -0.018466267734766006,
    -0.00845741294324398,
    1.9441282347543165e-05,
    -0.02019619382917881,
    0.016832448542118073,
    0.01760130561888218,
    -0.0040227631106972694,
    -0.014265020377933979,
    0.029463650658726692,
    -0.017175689339637756,
    -0.015775272622704506,
    0.005440340843051672,
    0.012411529198288918,
    0.02607244811952114,
    -0.0038442788645625114,
    -0.04577437788248062,
    -0.014827932231128216,
    0.010427606292068958,
    0.0011258245212957263,
    -0.019235122948884964,
    -0.009013460949063301,
    0.010173609480261803,
    -0.016887366771697998,
    -0.032484155148267746,
    0.044730931520462036,
    0.02954602800309658,
    0.013592271134257317,
    0.025125108659267426,
    0.0023769312538206577,
    -0.010393282398581505,
    -0.04486822709441185,
    -0.015775272622704506,
    0.013750161975622177,
    0.01788962632417679,
    0.014155183918774128,
    -0.007324723992496729,
    -0.007345318328589201,
    0.04604896903038025,
    -0.00959010235965252,
    -0.024301333352923393,
    0.012459582649171352,
    -0.008944813162088394,
    0.04011779651045799,
    -0.021047426387667656,
    -0.007626774720847607,
    -0.010393282398581505,
    0.009411618113517761,
    -0.0007079308270476758,
    -0.0006598773179575801,
    -0.019633281975984573,
    -0.027692537754774094,
    -0.01790335588157177,
    -0.010908140800893307,
    0.005467799957841635,
    -0.02932635508477688,
    0.016242077574133873,
    0.010523713193833828,
    0.01044133584946394,
    -0.007228617090731859,
    -0.008567250333726406,
    0.001779695157893002,
    0.01502014696598053,
    -0.031880054622888565,
    -0.013406922109425068,
    -0.01908409781754017,
    -0.02445235848426819,
    -0.0042012473568320274,
    0.0010091231670230627,
    -0.018274053931236267,
    -0.012898928485810757,
    0.029463650658726692,
    -0.018878154456615448,
    0.03413170576095581,
    -0.017477739602327347,
    0.0033912030048668385,
    -0.02546834759414196,
    -0.008718275465071201,
    -0.010503118857741356,
    -0.016077322885394096,
    0.008814382366836071,
    0.016393102705478668,
    -0.03094644472002983,
    -0.024919165298342705,
    0.0011601484147831798,
    0.005872822366654873,
    -0.005069642793387175,
    -0.028310367837548256,
    0.012761632911860943,
    0.011017977260053158,
    0.023299075663089752,
    -0.007688557729125023,
    -0.022626327350735664,
    0.021665256470441818,
    -0.027019787579774857,
    6.585901428479701e-05,
    -0.00022396356507670134,
    -0.027610160410404205,
    -0.0026429416611790657,
    0.0034684319980442524,
    -0.00584536325186491,
    0.0012322287075221539,
    -0.03660302609205246,
    -0.026003800332546234,
    -2.5836792701738887e-05,
    -0.022997025400400162,
    0.00425616605207324,
    0.03690507635474205,
    0.005622257944196463,
    0.0016123660607263446,
    -0.013942375779151917,
    0.00845741294324398,
    -0.004757294896990061,
    0.003065125783905387,
    0.003362027695402503,
    0.015171172097325325,
    0.02417776733636856,
    0.024246415123343468,
    0.0073796422220766544,
    -0.015253549441695213,
    -0.03687761723995209,
    -0.009233133867383003,
    -0.021527960896492004,
    -0.031495627015829086,
    -0.011340622790157795,
    0.01581646129488945,
    0.01610478200018406,
    -0.0007907372782938182,
    -0.005481529515236616,
    -0.010228527709841728,
    -0.016475480049848557,
    -0.01779351942241192,
    -0.026113636791706085,
    0.019166475161910057,
    0.008759464137256145,
    -0.005388855002820492,
    0.01158089004456997,
    0.008443683385848999,
    0.01437485683709383,
    0.034461215138435364,
    -0.027225730940699577,
    -0.01456707064062357,
    -0.006054739002138376,
    0.018933072686195374,
    0.022324277088046074,
    -0.0016612776089459658,
    -0.03234685957431793,
    0.0018294648034498096,
    0.004884293768554926,
    0.011443594470620155,
    -0.0031492195557802916,
    0.03792106360197067,
    0.00479505117982626,
    -0.0135304881259799,
    -0.012706714682281017,
    -2.130496250174474e-05,
    -0.03630097582936287,
    0.008395629934966564,
    0.0081484979018569,
    -0.05560474842786789,
    -0.023436371237039566,
    0.0017187702469527721,
    0.0022688109893351793,
    0.009610696695744991,
    -0.01377075631171465,
    0.007736611180007458,
    -0.018644751980900764,
    0.008958542719483376,
    0.00018534915579948574,
    -0.019015450030565262,
    0.013818809762597084,
    -0.00035203469451516867,
    0.01283028069883585,
    0.004736700560897589,
    0.009123297408223152,
    0.04269895330071449,
    -0.0044964333064854145,
    -0.009548913687467575,
    -0.028722254559397697,
    0.017161959782242775,
    0.019756847992539406,
    0.0019907872192561626,
    0.026484334841370583,
    -0.02129455842077732,
    0.01562424749135971,
    -0.012219314463436604,
    0.03687761723995209,
    -0.00984410010278225,
    0.015061335638165474,
    -0.010455065406858921,
    0.013757026754319668,
    -0.0229695662856102,
    0.01108662597835064,
    0.004166923463344574,
    -0.047888729721307755,
    0.00402962788939476,
    0.008642762899398804,
    -0.015171172097325325,
    -0.009040920063853264,
    -0.01333140954375267,
    0.023903176188468933,
    -0.022722434252500534,
    -0.005268721375614405,
    0.005213803146034479,
    -6.0817692428827286e-05,
    -0.03750917688012123,
    0.00028016898431815207,
    -0.010084367357194424,
    -0.0031595167238265276,
    -0.004987265449017286,
    0.1947401762008667,
    0.004108572844415903,
    0.04247928038239479,
    0.01361973024904728,
    -0.0014948066091164947,
    0.01611851155757904,
    -0.00010356169514125213,
    0.0031595167238265276,
    -0.0005513279465958476,
    0.0342140831053257,
    0.0049598063342273235,
    -0.01139554101973772,
    0.011917264200747013,
    0.002541686175391078,
    0.016063593327999115,
    0.0037310097832232714,
    -0.017752330750226974,
    -0.06507814675569534,
    -0.0011833170428872108,
    -0.008834976702928543,
    0.005745823960751295,
    -0.012116342782974243,
    -0.022818541154265404,
    -0.021431853994727135,
    0.02187119983136654,
    -0.014388586394488811,
    0.005975794047117233,
    0.004712673835456371,
    0.02268124558031559,
    0.02059435099363327,
    -0.020965049043297768,
    -0.010791439563035965,
    0.006727487780153751,
    -0.004644026048481464,
    -0.04283624887466431,
    -0.013043088838458061,
    0.0256605613976717,
    -0.013098007068037987,
    -0.0011086625745519996,
    0.045801836997270584,
    -0.004259598441421986,
    -0.06853800266981125,
    -0.01033836416900158,
    -0.03808581829071045,
    0.004163491073995829,
    -0.006813297513872385,
    -0.008340711705386639,
    0.021610338240861893,
    0.012342880479991436,
    0.05288629233837128,
    -0.017258066684007645,
    -0.015047606080770493,
    0.02279108203947544,
    3.68177643395029e-05,
    0.01486912090331316,
    -0.03553212061524391,
    0.003669226774945855,
    0.012239908799529076,
    0.015308467671275139,
    -0.007667963393032551,
    -0.018123028799891472,
    0.04069443792104721,
    0.006734352558851242,
    0.01466317754238844,
    -0.053874820470809937,
    -0.0003874312387779355,
    -0.02973824180662632,
    -0.010180474258959293,
    0.00016218051314353943,
    -0.0063224658370018005,
    -0.0076748281717300415,
    -0.0025382537860423326,
    -0.02368350327014923,
    -0.01572035439312458,
    -0.006353357341140509,
    -0.0189879909157753,
    0.04020017385482788,
    -0.001549724955111742,
    0.036273516714572906,
    0.04596659168601036,
    -0.0037138478364795446,
    0.006216061767190695,
    -0.004963238723576069,
    0.009377294220030308,
    -0.026223473250865936,
    -0.036163680255413055,
    0.03577925264835358,
    -0.03520261123776436,
    -0.017573846504092216,
    -0.02298329584300518,
    -0.00239752558991313,
    -0.016928555443882942,
    0.01661277562379837,
    -0.008766328915953636,
    -0.002704724669456482,
    0.004424353130161762,
    0.012658661231398582,
    0.026511793956160545,
    0.020772835239768028,
    -0.005450638011097908,
    -0.03240177780389786,
    0.0503600537776947,
    0.002912384457886219,
    -0.014690636657178402,
    -0.019743118435144424,
    0.011189597658813,
    -0.03550466150045395,
    -0.00044449474080465734,
    -0.0035422283690422773,
    -0.0026806979440152645,
    0.019441066309809685,
    -0.026621630415320396,
    -0.017683682963252068,
    -0.011560295708477497,
    0.01053744275122881,
    -0.01830151304602623,
    0.018534915521740913,
    -0.0019804900512099266,
    -0.006119954399764538,
    0.01496522780507803,
    -0.0039266562089324,
    -0.028584958985447884,
    -0.011766239069402218,
    0.006257250439375639,
    -0.010612955316901207,
    -0.0028042641934007406,
    -0.018328972160816193,
    0.027980858460068703,
    0.017436550930142403,
    -0.014251290820538998,
    0.0018981127068400383,
    -0.014155183918774128,
    0.019344959408044815,
    0.006899107713252306,
    -0.0019066936802119017,
    -0.002939843572676182,
    -0.0038236845284700394,
    0.004784754011780024,
    0.011347487568855286,
    0.01632445491850376,
    -0.03363743796944618,
    -0.013729567639529705,
    0.023642314597964287,
    -0.011333758011460304,
    0.0003842133446596563,
    -0.014855391345918179,
    0.024342522025108337,
    -0.018562374636530876,
    0.01702466420829296,
    0.0004090981965418905,
    -0.014525881968438625,
    0.016365643590688705,
    0.0069643231108784676,
    -0.02745913527905941,
    -0.0028197099454700947,
    -0.02258513867855072,
    -0.0054060169495642185,
    -0.03229194134473801,
    -0.004324813839048147,
    -0.007599315606057644,
    -0.015253549441695213,
    0.012219314463436604,
    0.011429864913225174,
    0.003346581943333149,
    -0.006857919041067362,
    -0.041023947298526764,
    -0.17112532258033752,
    0.016750071197748184,
    0.007599315606057644,
    -0.04821823909878731,
    0.011320028454065323,
    0.006549003534018993,
    0.013853133656084538,
    -0.0015814745565876365,
    -0.012157531455159187,
    -0.003528498811647296,
    0.01790335588157177,
    -0.010915005579590797,
    -0.025523265823721886,
    -0.011072896420955658,
    -0.024740679189562798,
    -0.014038482680916786,
    0.000639282981865108,
    -0.01632445491850376,
    0.03053455799818039,
    0.028310367837548256,
    0.01820540614426136,
    -0.031056281179189682,
    0.013454975560307503,
    -0.00713937496766448,
    0.006130251567810774,
    0.0050284541212022305,
    -0.019235122948884964,
    0.019976520910859108,
    -0.015486951917409897,
    -0.03580671176314354,
    -0.015308467671275139,
    -0.006171440239995718,
    0.04011779651045799,
    -0.0026120501570403576,
    0.028227990493178368,
    0.03638335317373276,
    0.02954602800309658,
    -0.00984410010278225,
    -0.026978598907589912,
    0.01611851155757904,
    0.005103966686874628,
    0.02148677222430706,
    -0.009686209261417389,
    -0.019619552418589592,
    -0.01188294030725956,
    0.004956373944878578,
    0.010166744701564312,
    -0.009130162186920643,
    -0.012130072340369225,
    -0.010228527709841728,
    0.02338145300745964,
    -0.03879975527524948,
    0.020841483026742935,
    0.013537352904677391,
    0.022942107170820236,
    0.02159660868346691,
    0.01158775482326746,
    0.02995791658759117,
    0.00900659617036581,
    -0.012789092026650906,
    -0.00554331298917532,
    -0.02744540572166443,
    0.005526150576770306,
    0.007647369056940079,
    -0.009040920063853264,
    -0.0008941380656324327,
    -0.017862167209386826,
    0.0063911136239767075,
    0.013640324585139751,
    0.00805925577878952,
    -0.01322157308459282,
    0.015583058819174767,
    -0.008759464137256145,
    0.01788962632417679,
    -0.007839582860469818,
    0.0044964333064854145,
    -0.013249032199382782,
    0.011917264200747013,
    0.02288718894124031,
    0.021061155945062637,
    -0.02018246427178383,
    0.01670888252556324,
    -0.013791350647807121,
    7.808691589161754e-05,
    0.00845054816454649,
    -0.009981395676732063,
    0.0025245242286473513,
    -0.009576372802257538,
    -0.00805925577878952,
    0.012974441051483154,
    0.02089640125632286,
    -0.029491109773516655,
    0.005649717058986425,
    -0.00022675238142255694,
    -0.008951677940785885,
    0.01197904720902443,
    -0.013901187106966972,
    0.0036246057134121656,
    -0.016557857394218445,
    -0.024905435740947723,
    0.01312546618282795,
    0.02943619154393673,
    -0.02228308841586113,
    -0.002380363643169403,
    0.020470784977078438,
    0.03602638468146324,
    -0.03122103586792946,
    0.007125645410269499,
    0.01878204755485058,
    0.004537621978670359,
    0.00869768112897873,
    0.016049863770604134,
    0.026704007759690285,
    0.005629122722893953,
    -0.020168734714388847,
    0.030918985605239868,
    -0.014553341083228588,
    -0.011416135355830193,
    0.007873906753957272,
    -0.008992866612970829,
    0.02695113979279995,
    0.004692079499363899,
    -0.015253549441695213,
    -0.013557947240769863,
    0.010509983636438847,
    -0.023944364860653877,
    -0.11741525679826736,
    -0.030616935342550278,
    -0.0027115894481539726,
    0.010564901866018772,
    -0.0010709062917158008,
    0.00371728022582829,
    -0.003607443766668439,
    0.02586650475859642,
    -0.02586650475859642,
    0.014292479492723942,
    -0.013104871846735477,
    0.003607443766668439,
    -0.01801319234073162,
    0.00449986569583416,
    -0.007482613902539015,
    -0.00919880997389555,
    -0.01981176622211933,
    0.017285525798797607,
    -0.017354173585772514,
    0.01589883863925934,
    -0.02110234461724758,
    0.004235571715980768,
    -0.008217145688831806,
    0.010976788587868214,
    -0.007208022754639387,
    -0.007420830894261599,
    -0.03621859848499298,
    0.011189597658813,
    0.010599225759506226,
    0.017148230224847794,
    0.005241262260824442,
    -0.01871339976787567,
    -0.016475480049848557,
    -0.002582874847576022,
    -0.012644931674003601,
    0.02932635508477688,
    -0.023916905745863914,
    -0.025042731314897537,
    0.05310596525669098,
    -0.031001362949609756,
    0.012651796452701092,
    0.011464188806712627,
    0.0013763890601694584,
    -0.011210191994905472,
    -0.003399783978238702,
    0.01208888366818428,
    -0.014731825329363346,
    0.04118870198726654,
    0.015500681474804878,
    -0.03174275904893875,
    -0.022241899743676186,
    -0.019070368260145187,
    -0.014498422853648663,
    -0.013063683174550533,
    0.033170633018016815,
    -0.012054559774696827,
    -0.01701093465089798,
    -0.004225274082273245,
    -0.017985733225941658,
    0.004091410897672176,
    0.0008061830303631723,
    0.0012322287075221539,
    -0.0004792477120645344,
    0.008313252590596676,
    0.011361217126250267,
    0.0006864783354103565,
    -0.028200531378388405,
    0.0033174066338688135,
    0.022502761334180832,
    -0.007818988524377346,
    -0.023024484515190125,
    -0.009981395676732063,
    -0.023930635303258896,
    0.004441515076905489,
    -0.01909782737493515,
    -0.013413786888122559,
    0.0011687293881550431,
    0.0162969958037138,
    0.01669515296816826,
    -0.009212539531290531,
    0.01950971409678459,
    0.007407101336866617,
    -0.03363743796944618,
    -0.0037035506684333086,
    0.015445763245224953,
    0.005684040952473879,
    0.018878154456615448,
    0.01632445491850376,
    -0.00013311245129443705,
    -0.058323200792074203,
    -0.004084546118974686,
    0.013091142289340496,
    0.0258802343159914,
    0.007304129656404257,
    -0.02556445449590683,
    0.0015145428478717804,
    -0.011134679429233074,
    0.0036246057134121656,
    -0.00594147015362978,
    0.009082108736038208,
    -0.02128082886338234,
    -0.02338145300745964,
    -0.06683553010225296,
    0.022543950006365776,
    0.0032487588468939066,
    -0.017834708094596863,
    0.02298329584300518,
    -0.026498064398765564,
    -0.016448020935058594,
    -0.029381273314356804,
    0.027829833328723907,
    0.008814382366836071,
    -0.022351736202836037,
    0.005426611285656691,
    -0.0005363112431950867,
    -0.018040651455521584,
    -0.007462019566446543,
    -0.0004955515614710748,
    0.03448867425322533,
    -0.005467799957841635,
    0.016736341640353203,
    6.113947893027216e-05,
    -0.00723548186942935,
    0.0022928377147763968,
    0.03761901333928108,
    0.002720170421525836,
    -0.03363743796944618,
    -0.006785838399082422,
    -0.013310815207660198,
    0.023299075663089752,
    -0.002745913341641426,
    -0.030205048620700836,
    0.02406793087720871,
    0.008677086792886257,
    0.005457502789795399,
    0.014038482680916786,
    0.019633281975984573,
    0.0144709637388587,
    0.03970590978860855,
    0.0034478376619517803,
    0.03295096009969711,
    0.010990518145263195,
    -0.017546387389302254,
    -0.02516629733145237,
    0.0019804900512099266,
    0.005254991818219423,
    -0.014484693296253681,
    -0.0009859545389190316,
    0.006871648598462343,
    0.007372777443379164,
    0.010331499390304089,
    -0.021006237715482712,
    0.03978828713297844,
    0.014539611525833607,
    -0.02855749987065792,
    -0.018370160833001137,
    -0.008265199139714241,
    -0.010661008767783642,
    0.0237796101719141,
    0.013475569896399975,
    -0.015679165720939636,
    -0.004743565339595079,
    0.04923422634601593,
    -0.02187119983136654,
    -0.013290220871567726,
    0.00537512544542551,
    -0.008045526221394539,
    -0.001255397335626185,
    -0.042039934545755386,
    -0.01610478200018406,
    -0.006308736279606819,
    -0.0023837960325181484,
    -0.026031259447336197,
    -0.009013460949063301,
    0.0165166687220335,
    0.010372688062489033,
    0.01742282137274742,
    0.0010374403791502118,
    -0.00994020700454712,
    -0.009088973514735699,
    -0.014292479492723942,
    0.03879975527524948,
    0.016132241114974022,
    -0.010853222571313381,
    -0.007983743213117123,
    0.012699849903583527,
    0.04464855417609215,
    -0.007173698861151934,
    -0.022379195317626,
    0.008423089049756527,
    0.0069334316067397594,
    0.01179369818419218,
    -0.008395629934966564,
    0.002876344369724393,
    -0.0172168780118227,
    0.011265110224485397,
    0.017464010044932365,
    0.0058590928092598915,
    -0.007592450827360153,
    -0.017834708094596863,
    0.019125286489725113,
    0.006885378155857325,
    0.002630928298458457,
    -0.022365465760231018,
    0.010358958505094051,
    -0.02597634121775627,
    -0.016846178099513054,
    -0.01581646129488945,
    -0.04020017385482788,
    -0.024521006271243095,
    -0.009233133867383003,
    0.01015301514416933,
    0.0020765969529747963,
    -0.04956373944878578,
    -0.04761413857340813,
    0.01243212353438139,
    -0.004661187995225191,
    0.004293922334909439,
    0.017354173585772514,
    0.013290220871567726,
    -0.008169092237949371,
    0.005914011038839817,
    0.011347487568855286,
    0.010276581160724163,
    0.03229194134473801,
    0.0006281277164816856,
    0.01771114207804203,
    0.04187517985701561,
    0.005855660419911146,
    -0.015102524310350418,
    -0.012205584906041622,
    -0.002704724669456482,
    -0.005344233941286802,
    0.005268721375614405,
    -0.0067480821162462234,
    -0.027225730940699577,
    -0.022214440628886223,
    -0.01094246469438076,
    -0.0026446578558534384,
    -0.006772108841687441,
    -0.024685760959982872,
    0.07754459232091904,
    -0.014731825329363346,
    -0.030369803309440613,
    0.016173429787158966,
    0.00910956785082817,
    0.02594888210296631,
    0.0019135584589093924,
    -0.007702287286520004,
    0.008780058473348618,
    -0.0009928193176165223,
    -0.007716016843914986,
    -0.01418264303356409,
    -0.032566532492637634,
    -0.03330792859196663,
    0.0009473401587456465,
    -0.0013798214495182037,
    -0.025907693430781364,
    0.007091321516782045,
    0.006267547607421875,
    0.015281008556485176,
    0.00929491687566042,
    0.01970192976295948,
    -0.00733845354989171,
    -0.015445763245224953,
    -0.024630842730402946,
    0.008594709448516369,
    0.035861629992723465,
    0.03520261123776436,
    0.0011824589455500245,
    -0.013269626535475254,
    0.02177509292960167,
    -0.001127540715970099,
    -0.017848437651991844,
    -0.0068544866517186165,
    -0.009137026965618134,
    -0.004987265449017286,
    -0.004887726157903671,
    -0.026594171300530434,
    -0.01217812579125166,
    -0.004115437623113394,
    -0.019537175074219704,
    -0.009260592982172966,
    -0.009439077228307724,
    -0.05403957515954971,
    0.024191496893763542,
    0.011457324028015137,
    0.024726949632167816,
    -0.019015450030565262,
    -0.04736700654029846
  ]
}
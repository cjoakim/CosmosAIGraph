{
  "classifiers": [
    "development status :: 6 - mature",
    "intended audience :: developers",
    "license :: osi approved :: python software foundation license",
    "operating system :: os independent",
    "programming language :: c",
    "programming language :: python :: 2",
    "programming language :: python :: 2.7",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.12",
    "programming language :: python :: 3.5",
    "programming language :: python :: 3.6",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: utilities"
  ],
  "description": "efficient arrays of booleans -- c extension\nbitarray: efficient arrays of booleans\n======================================\n\nthis library provides an object type which efficiently represents an array\nof booleans.  bitarrays are sequence types and behave very much like usual\nlists.  eight bits are represented by one byte in a contiguous block of\nmemory.  the user can select between two representations: little-endian\nand big-endian.  all functionality is implemented in c.\nmethods for accessing the machine representation are provided, including the\nability to import and export buffers.  this allows creating bitarrays that\nare mapped to other objects, including memory-mapped files.\n\n\nroadmap\n-------\n\nin 2024 (probably around july), we are planning the release of bitarray 3.0.\nthe 3.0 release will:\n\n* remove python 2.7 support.\n* rename ``.itersearch()`` to ``.search()`` and ``.iterdecode()``\n  to ``.decode()`` (and remove their non-iterator counterpart).\n* remove ``util.rindex()``, use ``.index(..., right=1)`` instead\n* remove ``util.make_endian()``, use ``bitarray(..., endian=...)`` instead\n* remove hackish support for ``bitarray()`` handling unpickling,\n  see detailed explaination in `#207 <https://github.com/ilanschnell/bitarray/pull/207>`__.  this will close `#206 <https://github.com/ilanschnell/bitarray/issues/206>`__.\n\n\nkey features\n------------\n\n* the bit-endianness can be specified for each bitarray object, see below.\n* sequence methods: slicing (including slice assignment and deletion),\n  operations ``+``, ``*``, ``+=``, ``*=``, the ``in`` operator, ``len()``\n* bitwise operations: ``~``, ``&``, ``|``, ``^``, ``<<``, ``>>`` (as well as\n  their in-place versions ``&=``, ``|=``, ``^=``, ``<<=``, ``>>=``).\n* fast methods for encoding and decoding variable bit length prefix codes.\n* bitarray objects support the buffer protocol (both importing and\n  exporting buffers).\n* packing and unpacking to other binary data formats, e.g. ``numpy.ndarray``.\n* pickling and unpickling of bitarray objects.\n* immutable ``frozenbitarray`` objects which are hashable\n* sequential search\n* type hinting\n* extensive test suite with about 500 unittests.\n* utility module ``bitarray.util``:\n\n  * conversion to and from hexadecimal strings\n  * (de-) serialization\n  * pretty printing\n  * conversion to and from integers\n  * creating huffman codes\n  * compression of sparse bitarrays\n  * various count functions\n  * other helpful functions\n\n\ninstallation\n------------\n\npython wheels are are available on pypi for all mayor platforms and python\nversions.  which means you can simply:\n\n.. code-block:: shell-session\n\n    $ pip install bitarray\n\nin addition, conda packages are available (both the default anaconda\nrepository as well as conda-forge support bitarray):\n\n.. code-block:: shell-session\n\n    $ conda install bitarray\n\nonce you have installed the package, you may want to test it:\n\n.. code-block:: shell-session\n\n    $ python -c 'import bitarray; bitarray.test()'\n    bitarray is installed in: /users/ilan/bitarray/bitarray\n    bitarray version: 2.9.1\n    sys.version: 3.11.0 (main, oct 25 2022) [clang 14.0.4]\n    sys.prefix: /users/ilan/mini3/envs/py311\n    pointer size: 64 bit\n    sizeof(size_t): 8\n    sizeof(bitarrayobject): 80\n    have_builtin_bswap64: 1\n    default bit-endianness: big\n    machine byte-order: little\n    debug: 0\n    .........................................................................\n    .........................................................................\n    ................................................................\n    ----------------------------------------------------------------------\n    ran 502 tests in 0.416s\n\n    ok\n\nthe ``test()`` function is part of the api.  it will return\na ``unittest.runner.texttestresult`` object, such that one can verify that\nall tests ran successfully by:\n\n.. code-block:: python\n\n    import bitarray\n    assert bitarray.test().wassuccessful()\n\n\nusage\n-----\n\nas mentioned above, bitarray objects behave very much like lists, so\nthere is not too much to learn.  the biggest difference from list\nobjects (except that bitarray are obviously homogeneous) is the ability\nto access the machine representation of the object.\nwhen doing so, the bit-endianness is of importance; this issue is\nexplained in detail in the section below.  here, we demonstrate the\nbasic usage of bitarray objects:\n\n.. code-block:: python\n\n    >>> from bitarray import bitarray\n    >>> a = bitarray()         # create empty bitarray\n    >>> a.append(1)\n    >>> a.extend([1, 0])\n    >>> a\n    bitarray('110')\n    >>> x = bitarray(2 ** 20)  # bitarray of length 1048576 (initialized to 0)\n    >>> len(x)\n    1048576\n    >>> bitarray('1001 011')   # initialize from string (whitespace is ignored)\n    bitarray('1001011')\n    >>> lst = [1, 0, false, true, true]\n    >>> a = bitarray(lst)      # initialize from iterable\n    >>> a\n    bitarray('10011')\n    >>> a[2]    # indexing a single item will always return an integer\n    0\n    >>> a[2:4]  # whereas indexing a slice will always return a bitarray\n    bitarray('01')\n    >>> a[2:3]  # even when the slice length is just one\n    bitarray('0')\n    >>> a.count(1)\n    3\n    >>> a.remove(0)            # removes first occurrence of 0\n    >>> a\n    bitarray('1011')\n\nlike lists, bitarray objects support slice assignment and deletion:\n\n.. code-block:: python\n\n    >>> a = bitarray(50)\n    >>> a.setall(0)            # set all elements in a to 0\n    >>> a[11:37:3] = 9 * bitarray('1')\n    >>> a\n    bitarray('00000000000100100100100100100100100100000000000000')\n    >>> del a[12::3]\n    >>> a\n    bitarray('0000000000010101010101010101000000000')\n    >>> a[-6:] = bitarray('10011')\n    >>> a\n    bitarray('000000000001010101010101010100010011')\n    >>> a += bitarray('000111')\n    >>> a[9:]\n    bitarray('001010101010101010100010011000111')\n\nin addition, slices can be assigned to booleans, which is easier (and\nfaster) than assigning to a bitarray in which all values are the same:\n\n.. code-block:: python\n\n    >>> a = 20 * bitarray('0')\n    >>> a[1:15:3] = true\n    >>> a\n    bitarray('01001001001001000000')\n\nthis is easier and faster than:\n\n.. code-block:: python\n\n    >>> a = 20 * bitarray('0')\n    >>> a[1:15:3] = 5 * bitarray('1')\n    >>> a\n    bitarray('01001001001001000000')\n\nnote that in the latter we have to create a temporary bitarray whose length\nmust be known or calculated.  another example of assigning slices to booleans,\nis setting ranges:\n\n.. code-block:: python\n\n    >>> a = bitarray(30)\n    >>> a[:] = 0         # set all elements to 0 - equivalent to a.setall(0)\n    >>> a[10:25] = 1     # set elements in range(10, 25) to 1\n    >>> a\n    bitarray('000000000011111111111111100000')\n\nas of bitarray version 2.8, indices may also be lists of arbitrary\nindices (like in numpy), or bitarrays that are treated as masks,\nsee `bitarray indexing <https://github.com/ilanschnell/bitarray/blob/master/doc/indexing.rst>`__.\n\n\nbitwise operators\n-----------------\n\nbitarray objects support the bitwise operators ``~``, ``&``, ``|``, ``^``,\n``<<``, ``>>`` (as well as their in-place versions ``&=``, ``|=``, ``^=``,\n``<<=``, ``>>=``).  the behavior is very much what one would expect:\n\n.. code-block:: python\n\n    >>> a = bitarray('101110001')\n    >>> ~a  # invert\n    bitarray('010001110')\n    >>> b = bitarray('111001011')\n    >>> a ^ b\n    bitarray('010111010')\n    >>> a &= b\n    >>> a\n    bitarray('101000001')\n    >>> a <<= 2   # in-place left shift by 2\n    >>> a\n    bitarray('100000100')\n    >>> b >> 1\n    bitarray('011100101')\n\nthe c language does not specify the behavior of negative shifts and\nof left shifts larger or equal than the width of the promoted left operand.\nthe exact behavior is compiler/machine specific.\nthis python bitarray library specifies the behavior as follows:\n\n* the length of the bitarray is never changed by any shift operation\n* blanks are filled by 0\n* negative shifts raise ``valueerror``\n* shifts larger or equal to the length of the bitarray result in\n  bitarrays with all values 0\n\nit is worth noting that (regardless of bit-endianness) the bitarray left\nshift (``<<``) always shifts towards lower indices, and the right\nshift (``>>``) always shifts towards higher indices.\n\n\nbit-endianness\n--------------\n\nunless explicitly converting to machine representation, using\nthe ``.tobytes()``, ``.frombytes()``, ``.tofile()`` and ``.fromfile()``\nmethods, as well as using ``memoryview``, the bit-endianness will have no\neffect on any computation, and one can skip this section.\n\nsince bitarrays allows addressing individual bits, where the machine\nrepresents 8 bits in one byte, there are two obvious choices for this\nmapping: little-endian and big-endian.\n\nwhen dealing with the machine representation of bitarray objects, it is\nrecommended to always explicitly specify the endianness.\n\nby default, bitarrays use big-endian representation:\n\n.. code-block:: python\n\n    >>> a = bitarray()\n    >>> a.endian()\n    'big'\n    >>> a.frombytes(b'a')\n    >>> a\n    bitarray('01000001')\n    >>> a[6] = 1\n    >>> a.tobytes()\n    b'c'\n\nbig-endian means that the most-significant bit comes first.\nhere, ``a[0]`` is the lowest address (index) and most significant bit,\nand ``a[7]`` is the highest address and least significant bit.\n\nwhen creating a new bitarray object, the endianness can always be\nspecified explicitly:\n\n.. code-block:: python\n\n    >>> a = bitarray(endian='little')\n    >>> a.frombytes(b'a')\n    >>> a\n    bitarray('10000010')\n    >>> a.endian()\n    'little'\n\nhere, the low-bit comes first because little-endian means that increasing\nnumeric significance corresponds to an increasing address.\nso ``a[0]`` is the lowest address and least significant bit,\nand ``a[7]`` is the highest address and most significant bit.\n\nthe bit-endianness is a property of the bitarray object.\nthe endianness cannot be changed once a bitarray object is created.\nwhen comparing bitarray objects, the endianness (and hence the machine\nrepresentation) is irrelevant; what matters is the mapping from indices\nto bits:\n\n.. code-block:: python\n\n    >>> bitarray('11001', endian='big') == bitarray('11001', endian='little')\n    true\n\nbitwise operations (``|``, ``^``, ``&=``, ``|=``, ``^=``, ``~``) are\nimplemented efficiently using the corresponding byte operations in c, i.e. the\noperators act on the machine representation of the bitarray objects.\ntherefore, it is not possible to perform bitwise operators on bitarrays\nwith different endianness.\n\nwhen converting to and from machine representation, using\nthe ``.tobytes()``, ``.frombytes()``, ``.tofile()`` and ``.fromfile()``\nmethods, the endianness matters:\n\n.. code-block:: python\n\n    >>> a = bitarray(endian='little')\n    >>> a.frombytes(b'\\x01')\n    >>> a\n    bitarray('10000000')\n    >>> b = bitarray(endian='big')\n    >>> b.frombytes(b'\\x80')\n    >>> b\n    bitarray('10000000')\n    >>> a == b\n    true\n    >>> a.tobytes() == b.tobytes()\n    false\n\nas mentioned above, the endianness can not be changed once an object is\ncreated.  however, you can create a new bitarray with different endianness:\n\n.. code-block:: python\n\n    >>> a = bitarray('111000', endian='little')\n    >>> b = bitarray(a, endian='big')\n    >>> b\n    bitarray('111000')\n    >>> a == b\n    true\n\n\nbuffer protocol\n---------------\n\nbitarray objects support the buffer protocol.  they can both export their\nown buffer, as well as import another object's buffer.  to learn more about\nthis topic, please read `buffer protocol <https://github.com/ilanschnell/bitarray/blob/master/doc/buffer.rst>`__.  there is also an example that shows how\nto memory-map a file to a bitarray: `mmapped-file.py <https://github.com/ilanschnell/bitarray/blob/master/examples/mmapped-file.py>`__\n\n\nvariable bit length prefix codes\n--------------------------------\n\nthe ``.encode()`` method takes a dictionary mapping symbols to bitarrays\nand an iterable, and extends the bitarray object with the encoded symbols\nfound while iterating.  for example:\n\n.. code-block:: python\n\n    >>> d = {'h':bitarray('111'), 'e':bitarray('0'),\n    ...      'l':bitarray('110'), 'o':bitarray('10')}\n    ...\n    >>> a = bitarray()\n    >>> a.encode(d, 'hello')\n    >>> a\n    bitarray('111011011010')\n\nnote that the string ``'hello'`` is an iterable, but the symbols are not\nlimited to characters, in fact any immutable python object can be a symbol.\ntaking the same dictionary, we can apply the ``.decode()`` method which will\nreturn a list of the symbols:\n\n.. code-block:: python\n\n    >>> a.decode(d)\n    ['h', 'e', 'l', 'l', 'o']\n    >>> ''.join(a.decode(d))\n    'hello'\n\nsince symbols are not limited to being characters, it is necessary to return\nthem as elements of a list, rather than simply returning the joined string.\nthe above dictionary ``d`` can be efficiently constructed using the function\n``bitarray.util.huffman_code()``.  i also wrote `huffman coding in python\nusing bitarray <http://ilan.schnell-web.net/prog/huffman/>`__ for more\nbackground information.\n\nwhen the codes are large, and you have many decode calls, most time will\nbe spent creating the (same) internal decode tree objects.  in this case,\nit will be much faster to create a ``decodetree`` object, which can be\npassed to bitarray's ``.decode()`` and ``.iterdecode()`` methods, instead\nof passing the prefix code dictionary to those methods itself:\n\n.. code-block:: python\n\n    >>> from bitarray import bitarray, decodetree\n    >>> t = decodetree({'a': bitarray('0'), 'b': bitarray('1')})\n    >>> a = bitarray('0110')\n    >>> a.decode(t)\n    ['a', 'b', 'b', 'a']\n    >>> ''.join(a.iterdecode(t))\n    'abba'\n\nthe sole purpose of the immutable ``decodetree`` object is to be passed\nto bitarray's ``.decode()`` and ``.iterdecode()`` methods.\n\n\nfrozenbitarrays\n---------------\n\na ``frozenbitarray`` object is very similar to the bitarray object.\nthe difference is that this a ``frozenbitarray`` is immutable, and hashable,\nand can therefore be used as a dictionary key:\n\n.. code-block:: python\n\n    >>> from bitarray import frozenbitarray\n    >>> key = frozenbitarray('1100011')\n    >>> {key: 'some value'}\n    {frozenbitarray('1100011'): 'some value'}\n    >>> key[3] = 1\n    traceback (most recent call last):\n        ...\n    typeerror: frozenbitarray is immutable\n\n\nreference\n=========\n\nbitarray version: 2.9.1 -- `change log <https://github.com/ilanschnell/bitarray/blob/master/doc/changelog.rst>`__\n\nin the following, ``item`` and ``value`` are usually a single bit -\nan integer 0 or 1.\n\nalso, ``sub_bitarray`` refers to either a bitarray, or an ``item``.\n\n\nthe bitarray object:\n--------------------\n\n``bitarray(initializer=0, /, endian='big', buffer=none)`` -> bitarray\n   return a new bitarray object whose items are bits initialized from\n   the optional initial object, and endianness.\n   the initializer may be of the following types:\n\n   ``int``: create a bitarray of given integer length.  the initial values are\n   all ``0``.\n\n   ``str``: create bitarray from a string of ``0`` and ``1``.\n\n   ``iterable``: create bitarray from iterable or sequence of integers 0 or 1.\n\n   optional keyword arguments:\n\n   ``endian``: specifies the bit-endianness of the created bitarray object.\n   allowed values are ``big`` and ``little`` (the default is ``big``).\n   the bit-endianness effects the buffer representation of the bitarray.\n\n   ``buffer``: any object which exposes a buffer.  when provided, ``initializer``\n   cannot be present (or has to be ``none``).  the imported buffer may be\n   read-only or writable, depending on the object type.\n\n   new in version 2.3: optional ``buffer`` argument.\n\n\nbitarray methods:\n-----------------\n\n``all()`` -> bool\n   return true when all bits in bitarray are true.\n   note that ``a.all()`` is faster than ``all(a)``.\n\n\n``any()`` -> bool\n   return true when any bit in bitarray is true.\n   note that ``a.any()`` is faster than ``any(a)``.\n\n\n``append(item, /)``\n   append ``item`` to the end of the bitarray.\n\n\n``buffer_info()`` -> tuple\n   return a tuple containing:\n\n   0. memory address of buffer\n   1. buffer size (in bytes)\n   2. bit-endianness as a string\n   3. number of pad bits\n   4. allocated memory for the buffer (in bytes)\n   5. memory is read-only\n   6. buffer is imported\n   7. number of buffer exports\n\n\n``bytereverse(start=0, stop=<end of buffer>, /)``\n   for each byte in byte-range(start, stop) reverse bits in-place.\n   the start and stop indices are given in terms of bytes (not bits).\n   also note that this method only changes the buffer; it does not change the\n   endianness of the bitarray object.  padbits are left unchanged such that\n   two consecutive calls will always leave the bitarray unchanged.\n\n   new in version 2.2.5: optional start and stop arguments.\n\n\n``clear()``\n   remove all items from the bitarray.\n\n   new in version 1.4.\n\n\n``copy()`` -> bitarray\n   return a copy of the bitarray.\n\n\n``count(value=1, start=0, stop=<end>, step=1, /)`` -> int\n   number of occurrences of ``value`` bitarray within ``[start:stop:step]``.\n   optional arguments ``start``, ``stop`` and ``step`` are interpreted in\n   slice notation, meaning ``a.count(value, start, stop, step)`` equals\n   ``a[start:stop:step].count(value)``.\n   the ``value`` may also be a sub-bitarray.  in this case non-overlapping\n   occurrences are counted within ``[start:stop]`` (``step`` must be 1).\n\n   new in version 1.1.0: optional start and stop arguments.\n\n   new in version 2.3.7: optional step argument.\n\n   new in version 2.9: add non-overlapping sub-bitarray count.\n\n\n``decode(code, /)`` -> list\n   given a prefix code (a dict mapping symbols to bitarrays, or ``decodetree``\n   object), decode content of bitarray and return it as a list of symbols.\n\n\n``encode(code, iterable, /)``\n   given a prefix code (a dict mapping symbols to bitarrays),\n   iterate over the iterable object with symbols, and extend bitarray\n   with corresponding bitarray for each symbol.\n\n\n``endian()`` -> str\n   return the bit-endianness of the bitarray as a string (``little`` or ``big``).\n\n\n``extend(iterable, /)``\n   append all items from ``iterable`` to the end of the bitarray.\n   if the iterable is a string, each ``0`` and ``1`` are appended as\n   bits (ignoring whitespace and underscore).\n\n\n``fill()`` -> int\n   add zeros to the end of the bitarray, such that the length will be\n   a multiple of 8, and return the number of bits added [0..7].\n\n\n``find(sub_bitarray, start=0, stop=<end>, /, right=false)`` -> int\n   return lowest (or rightmost when ``right=true``) index where sub_bitarray\n   is found, such that sub_bitarray is contained within ``[start:stop]``.\n   return -1 when sub_bitarray is not found.\n\n   new in version 2.1.\n\n   new in version 2.9: add optional keyword argument ``right``.\n\n\n``frombytes(bytes, /)``\n   extend bitarray with raw bytes from a bytes-like object.\n   each added byte will add eight bits to the bitarray.\n\n   new in version 2.5.0: allow bytes-like argument.\n\n\n``fromfile(f, n=-1, /)``\n   extend bitarray with up to ``n`` bytes read from file object ``f`` (or any\n   other binary stream what supports a ``.read()`` method, e.g. ``io.bytesio``).\n   each read byte will add eight bits to the bitarray.  when ``n`` is omitted or\n   negative, all bytes until eof are read.  when ``n`` is non-negative but\n   exceeds the data available, ``eoferror`` is raised (but the available data\n   is still read and appended).\n\n\n``index(sub_bitarray, start=0, stop=<end>, /, right=false)`` -> int\n   return lowest (or rightmost when ``right=true``) index where sub_bitarray\n   is found, such that sub_bitarray is contained within ``[start:stop]``.\n   raises ``valueerror`` when the sub_bitarray is not present.\n\n   new in version 2.9: add optional keyword argument ``right``.\n\n\n``insert(index, value, /)``\n   insert ``value`` into bitarray before ``index``.\n\n\n``invert(index=<all bits>, /)``\n   invert all bits in bitarray (in-place).\n   when the optional ``index`` is given, only invert the single bit at index.\n\n   new in version 1.5.3: optional index argument.\n\n\n``iterdecode(code, /)`` -> iterator\n   given a prefix code (a dict mapping symbols to bitarrays, or ``decodetree``\n   object), decode content of bitarray and return an iterator over\n   the symbols.\n\n\n``itersearch(sub_bitarray, start=0, stop=<end>, /, right=false)`` -> iterator\n   return iterator over indices where sub_bitarray is found, such that\n   sub_bitarray is contained within ``[start:stop]``.\n   the indices are iterated in ascending order (from lowest to highest),\n   unless ``right=true``, which will iterate in descending oder (starting with\n   rightmost match).\n\n   new in version 2.9: optional start and stop arguments - add optional keyword argument ``right``.\n\n\n``pack(bytes, /)``\n   extend bitarray from a bytes-like object, where each byte corresponds\n   to a single bit.  the byte ``b'\\x00'`` maps to bit 0 and all other bytes\n   map to bit 1.\n\n   this method, as well as the ``.unpack()`` method, are meant for efficient\n   transfer of data between bitarray objects to other python objects (for\n   example numpy's ndarray object) which have a different memory view.\n\n   new in version 2.5.0: allow bytes-like argument.\n\n\n``pop(index=-1, /)`` -> item\n   remove and return item at ``index`` (default last).\n   raises ``indexerror`` if index is out of range.\n\n\n``remove(value, /)``\n   remove the first occurrence of ``value``.\n   raises ``valueerror`` if value is not present.\n\n\n``reverse()``\n   reverse all bits in bitarray (in-place).\n\n\n``search(sub_bitarray, limit=<none>, /)`` -> list\n   searches for given sub_bitarray in self, and return list of start\n   positions.\n   the optional argument limits the number of search results to the integer\n   specified.  by default, all search results are returned.\n\n\n``setall(value, /)``\n   set all elements in bitarray to ``value``.\n   note that ``a.setall(value)`` is equivalent to ``a[:] = value``.\n\n\n``sort(reverse=false)``\n   sort all bits in bitarray (in-place).\n\n\n``to01()`` -> str\n   return a string containing '0's and '1's, representing the bits in the\n   bitarray.\n\n\n``tobytes()`` -> bytes\n   return the bitarray buffer in bytes (pad bits are set to zero).\n\n\n``tofile(f, /)``\n   write byte representation of bitarray to file object f.\n\n\n``tolist()`` -> list\n   return bitarray as list of integer items.\n   ``a.tolist()`` is equal to ``list(a)``.\n\n   note that the list object being created will require 32 or 64 times more\n   memory (depending on the machine architecture) than the bitarray object,\n   which may cause a memory error if the bitarray is very large.\n\n\n``unpack(zero=b'\\x00', one=b'\\x01')`` -> bytes\n   return bytes containing one character for each bit in the bitarray,\n   using specified mapping.\n\n\nbitarray data descriptors:\n--------------------------\n\ndata descriptors were added in version 2.6.\n\n``nbytes`` -> int\n   buffer size in bytes\n\n\n``padbits`` -> int\n   number of pad bits\n\n\n``readonly`` -> bool\n   bool indicating whether buffer is read-only\n\n\nother objects:\n--------------\n\n``frozenbitarray(initializer=0, /, endian='big', buffer=none)`` -> frozenbitarray\n   return a ``frozenbitarray`` object.  initialized the same way a ``bitarray``\n   object is initialized.  a ``frozenbitarray`` is immutable and hashable,\n   and may therefore be used as a dictionary key.\n\n   new in version 1.1.\n\n\n``decodetree(code, /)`` -> decodetree\n   given a prefix code (a dict mapping symbols to bitarrays),\n   create a binary tree object to be passed to ``.decode()`` or ``.iterdecode()``.\n\n   new in version 1.6.\n\n\nfunctions defined in the `bitarray` module:\n-------------------------------------------\n\n``bits2bytes(n, /)`` -> int\n   return the number of bytes necessary to store n bits.\n\n\n``get_default_endian()`` -> str\n   return the default endianness for new bitarray objects being created.\n   unless ``_set_default_endian('little')`` was called, the default endianness\n   is ``big``.\n\n   new in version 1.3.\n\n\n``test(verbosity=1)`` -> texttestresult\n   run self-test, and return unittest.runner.texttestresult object.\n\n\nfunctions defined in `bitarray.util` module:\n--------------------------------------------\n\nthis sub-module was added in version 1.2.\n\n``zeros(length, /, endian=none)`` -> bitarray\n   create a bitarray of length, with all values 0, and optional\n   endianness, which may be 'big', 'little'.\n\n\n``ones(length, /, endian=none)`` -> bitarray\n   create a bitarray of length, with all values 1, and optional\n   endianness, which may be 'big', 'little'.\n\n   new in version 2.9.\n\n\n``urandom(length, /, endian=none)`` -> bitarray\n   return a bitarray of ``length`` random bits (uses ``os.urandom``).\n\n   new in version 1.7.\n\n\n``pprint(bitarray, /, stream=none, group=8, indent=4, width=80)``\n   prints the formatted representation of object on ``stream`` (which defaults\n   to ``sys.stdout``).  by default, elements are grouped in bytes (8 elements),\n   and 8 bytes (64 elements) per line.\n   non-bitarray objects are printed by the standard library\n   function ``pprint.pprint()``.\n\n   new in version 1.8.\n\n\n``make_endian(bitarray, /, endian)`` -> bitarray\n   when the endianness of the given bitarray is different from ``endian``,\n   return a new bitarray, with endianness ``endian`` and the same elements\n   as the original bitarray.\n   otherwise (endianness is already ``endian``) the original bitarray is returned\n   unchanged.\n\n   new in version 1.3.\n\n   new in version 2.9: deprecated - use ``bitarray()``.\n\n\n``rindex(bitarray, sub_bitarray=1, start=0, stop=<end>, /)`` -> int\n   return rightmost (highest) index where sub_bitarray (or item - defaults\n   to 1) is found in bitarray (``a``), such that sub_bitarray is contained\n   within ``a[start:stop]``.\n   raises ``valueerror`` when the sub_bitarray is not present.\n\n   new in version 2.3.0: optional start and stop arguments.\n\n   new in version 2.9: deprecated - use ``.index(..., right=1)``.\n\n\n``strip(bitarray, /, mode='right')`` -> bitarray\n   return a new bitarray with zeros stripped from left, right or both ends.\n   allowed values for mode are the strings: ``left``, ``right``, ``both``\n\n\n``count_n(a, n, value=1, /)`` -> int\n   return lowest index ``i`` for which ``a[:i].count(value) == n``.\n   raises ``valueerror`` when ``n`` exceeds total count (``a.count(value)``).\n\n   new in version 2.3.6: optional value argument.\n\n\n``parity(a, /)`` -> int\n   return parity of bitarray ``a``.\n   ``parity(a)`` is equivalent to ``a.count() % 2`` but more efficient.\n\n   new in version 1.9.\n\n\n``count_and(a, b, /)`` -> int\n   return ``(a & b).count()`` in a memory efficient manner,\n   as no intermediate bitarray object gets created.\n\n\n``count_or(a, b, /)`` -> int\n   return ``(a | b).count()`` in a memory efficient manner,\n   as no intermediate bitarray object gets created.\n\n\n``count_xor(a, b, /)`` -> int\n   return ``(a ^ b).count()`` in a memory efficient manner,\n   as no intermediate bitarray object gets created.\n\n   this is also known as the hamming distance.\n\n\n``any_and(a, b, /)`` -> bool\n   efficient implementation of ``any(a & b)``.\n\n   new in version 2.7.\n\n\n``subset(a, b, /)`` -> bool\n   return ``true`` if bitarray ``a`` is a subset of bitarray ``b``.\n   ``subset(a, b)`` is equivalent to ``a | b == b`` (and equally ``a & b == a``) but\n   more efficient as no intermediate bitarray object is created and the buffer\n   iteration is stopped as soon as one mismatch is found.\n\n\n``intervals(bitarray, /)`` -> iterator\n   compute all uninterrupted intervals of 1s and 0s, and return an\n   iterator over tuples ``(value, start, stop)``.  the intervals are guaranteed\n   to be in order, and their size is always non-zero (``stop - start > 0``).\n\n   new in version 2.7.\n\n\n``ba2hex(bitarray, /)`` -> hexstr\n   return a string containing the hexadecimal representation of\n   the bitarray (which has to be multiple of 4 in length).\n\n\n``hex2ba(hexstr, /, endian=none)`` -> bitarray\n   bitarray of hexadecimal representation.  hexstr may contain any number\n   (including odd numbers) of hex digits (upper or lower case).\n\n\n``ba2base(n, bitarray, /)`` -> str\n   return a string containing the base ``n`` ascii representation of\n   the bitarray.  allowed values for ``n`` are 2, 4, 8, 16, 32 and 64.\n   the bitarray has to be multiple of length 1, 2, 3, 4, 5 or 6 respectively.\n   for ``n=16`` (hexadecimal), ``ba2hex()`` will be much faster, as ``ba2base()``\n   does not take advantage of byte level operations.\n   for ``n=32`` the rfc 4648 base32 alphabet is used, and for ``n=64`` the\n   standard base 64 alphabet is used.\n\n   see also: `bitarray representations <https://github.com/ilanschnell/bitarray/blob/master/doc/represent.rst>`__\n\n   new in version 1.9.\n\n\n``base2ba(n, asciistr, /, endian=none)`` -> bitarray\n   bitarray of base ``n`` ascii representation.\n   allowed values for ``n`` are 2, 4, 8, 16, 32 and 64.\n   for ``n=16`` (hexadecimal), ``hex2ba()`` will be much faster, as ``base2ba()``\n   does not take advantage of byte level operations.\n   for ``n=32`` the rfc 4648 base32 alphabet is used, and for ``n=64`` the\n   standard base 64 alphabet is used.\n\n   see also: `bitarray representations <https://github.com/ilanschnell/bitarray/blob/master/doc/represent.rst>`__\n\n   new in version 1.9.\n\n\n``ba2int(bitarray, /, signed=false)`` -> int\n   convert the given bitarray to an integer.\n   the bit-endianness of the bitarray is respected.\n   ``signed`` indicates whether two's complement is used to represent the integer.\n\n\n``int2ba(int, /, length=none, endian=none, signed=false)`` -> bitarray\n   convert the given integer to a bitarray (with given endianness,\n   and no leading (big-endian) / trailing (little-endian) zeros), unless\n   the ``length`` of the bitarray is provided.  an ``overflowerror`` is raised\n   if the integer is not representable with the given number of bits.\n   ``signed`` determines whether two's complement is used to represent the integer,\n   and requires ``length`` to be provided.\n\n\n``serialize(bitarray, /)`` -> bytes\n   return a serialized representation of the bitarray, which may be passed to\n   ``deserialize()``.  it efficiently represents the bitarray object (including\n   its bit-endianness) and is guaranteed not to change in future releases.\n\n   see also: `bitarray representations <https://github.com/ilanschnell/bitarray/blob/master/doc/represent.rst>`__\n\n   new in version 1.8.\n\n\n``deserialize(bytes, /)`` -> bitarray\n   return a bitarray given a bytes-like representation such as returned\n   by ``serialize()``.\n\n   see also: `bitarray representations <https://github.com/ilanschnell/bitarray/blob/master/doc/represent.rst>`__\n\n   new in version 1.8.\n\n   new in version 2.5.0: allow bytes-like argument.\n\n\n``sc_encode(bitarray, /)`` -> bytes\n   compress a sparse bitarray and return its binary representation.\n   this representation is useful for efficiently storing sparse bitarrays.\n   use ``sc_decode()`` for decompressing (decoding).\n\n   see also: `compression of sparse bitarrays <https://github.com/ilanschnell/bitarray/blob/master/doc/sparse_compression.rst>`__\n\n   new in version 2.7.\n\n\n``sc_decode(stream)`` -> bitarray\n   decompress binary stream (an integer iterator, or bytes-like object) of a\n   sparse compressed (``sc``) bitarray, and return the decoded  bitarray.\n   this function consumes only one bitarray and leaves the remaining stream\n   untouched.  use ``sc_encode()`` for compressing (encoding).\n\n   see also: `compression of sparse bitarrays <https://github.com/ilanschnell/bitarray/blob/master/doc/sparse_compression.rst>`__\n\n   new in version 2.7.\n\n\n``vl_encode(bitarray, /)`` -> bytes\n   return variable length binary representation of bitarray.\n   this representation is useful for efficiently storing small bitarray\n   in a binary stream.  use ``vl_decode()`` for decoding.\n\n   see also: `variable length bitarray format <https://github.com/ilanschnell/bitarray/blob/master/doc/variable_length.rst>`__\n\n   new in version 2.2.\n\n\n``vl_decode(stream, /, endian=none)`` -> bitarray\n   decode binary stream (an integer iterator, or bytes-like object), and\n   return the decoded bitarray.  this function consumes only one bitarray and\n   leaves the remaining stream untouched.  use ``vl_encode()`` for encoding.\n\n   see also: `variable length bitarray format <https://github.com/ilanschnell/bitarray/blob/master/doc/variable_length.rst>`__\n\n   new in version 2.2.\n\n\n``huffman_code(dict, /, endian=none)`` -> dict\n   given a frequency map, a dictionary mapping symbols to their frequency,\n   calculate the huffman code, i.e. a dict mapping those symbols to\n   bitarrays (with given endianness).  note that the symbols are not limited\n   to being strings.  symbols may may be any hashable object (such as ``none``).\n\n\n``canonical_huffman(dict, /)`` -> tuple\n   given a frequency map, a dictionary mapping symbols to their frequency,\n   calculate the canonical huffman code.  returns a tuple containing:\n\n   0. the canonical huffman code as a dict mapping symbols to bitarrays\n   1. a list containing the number of symbols of each code length\n   2. a list of symbols in canonical order\n\n   note: the two lists may be used as input for ``canonical_decode()``.\n\n   see also: `canonical huffman coding <https://github.com/ilanschnell/bitarray/blob/master/doc/canonical.rst>`__\n\n   new in version 2.5.\n\n\n``canonical_decode(bitarray, count, symbol, /)`` -> iterator\n   decode bitarray using canonical huffman decoding tables\n   where ``count`` is a sequence containing the number of symbols of each length\n   and ``symbol`` is a sequence of symbols in canonical order.\n\n   see also: `canonical huffman coding <https://github.com/ilanschnell/bitarray/blob/master/doc/canonical.rst>`__\n\n   new in version 2.5.\n\n\n",
  "docs_url": null,
  "keywords": "",
  "license": "psf",
  "name": "bitarray",
  "package_url": "https://pypi.org/project/bitarray/",
  "project_url": "https://pypi.org/project/bitarray/",
  "project_urls": {
    "Homepage": "https://github.com/ilanschnell/bitarray"
  },
  "release_url": "https://pypi.org/project/bitarray/2.9.1/",
  "requires_dist": [],
  "requires_python": "",
  "summary": "efficient arrays of booleans -- c extension",
  "version": "2.9.1",
  "releases": [],
  "developers": [
    "ilan_schnell",
    "ilanschnell@gmail.com"
  ],
  "kwds": "bitarrays bitarray sub_bitarray bitarrayobject binary",
  "license_kwds": "psf",
  "libtype": "pypi",
  "id": "pypi_bitarray",
  "homepage": "https://github.com/ilanschnell/bitarray",
  "release_count": 95,
  "dependency_ids": [],
  "documentation_summary": "The GitHub repository \"ilanschnell/bitarray\" provides an efficient way to represent arrays of booleans in Python. It offers a bitarray object type that behaves similarly to lists but is more memory-efficient, as it stores eight booleans per byte. Users can choose between little-endian and big-endian representations. The library, written in C for performance, supports various methods including slicing, bitwise operations, encoding/decoding, and supports the buffer protocol. It's planned to release version 3.0 in July 2024, which will drop Python 2.7 support and make several API changes. The library can be installed via pip or conda and includes a comprehensive test suite. It also features a utility module for additional functionalities like conversion to/from hexadecimal strings, compression, and more.",
  "embedding": [
    -0.037206124514341354,
    0.013350347988307476,
    0.00339133245870471,
    -0.04609202221035957,
    -0.010949721559882164,
    0.028019249439239502,
    -0.014919713139533997,
    -0.015435668639838696,
    -0.027488961815834045,
    -0.021899443119764328,
    -0.002323591150343418,
    0.034569017589092255,
    -0.020967857912182808,
    0.016023283824324608,
    0.006929568946361542,
    -0.025238823145627975,
    0.02422124333679676,
    -0.02086753211915493,
    0.010161456651985645,
    0.037091467529535294,
    -0.015421336516737938,
    0.004242300521582365,
    -0.011379685252904892,
    -0.03287782892584801,
    0.01046243030577898,
    0.017872124910354614,
    0.0036439355462789536,
    -0.01458290871232748,
    -0.0011062587145715952,
    -0.019190678372979164,
    0.02596975862979889,
    0.006155635695904493,
    -0.028635529801249504,
    -0.004220802336931229,
    -0.03227588161826134,
    -0.025668784976005554,
    0.013486502692103386,
    0.013995292596518993,
    0.052426811307668686,
    0.026557374745607376,
    0.026700695976614952,
    0.017370501533150673,
    -0.007054974790662527,
    0.013823307119309902,
    -0.009000556543469429,
    0.00605531083419919,
    0.0006749521708115935,
    -0.012067625299096107,
    -0.03431104123592377,
    0.006764749530702829,
    0.011852644383907318,
    0.025726113468408585,
    -0.016596568748354912,
    -0.015220686793327332,
    -0.010928223840892315,
    0.017585482448339462,
    -0.004736757837235928,
    0.02499517612159252,
    -0.02125450037419796,
    -0.0010946139227598906,
    0.03597356379032135,
    0.005990816280245781,
    -0.028148237615823746,
    0.0018398829270154238,
    -0.0019043773645535111,
    -0.015492997132241726,
    -0.016223933547735214,
    0.013808974996209145,
    0.012203780934214592,
    0.014231772162020206,
    0.02713065966963768,
    0.03307848051190376,
    -0.007624675519764423,
    0.008040306158363819,
    0.03405306115746498,
    -0.017671475186944008,
    -0.017829127609729767,
    0.029524119570851326,
    -0.006406447384506464,
    -0.01679721660912037,
    0.003326837904751301,
    0.0009808528702706099,
    0.03158793970942497,
    0.020552227273583412,
    0.032591186463832855,
    0.015450000762939453,
    -0.021842116490006447,
    0.016510576009750366,
    -0.03273450955748558,
    -0.00624879403039813,
    0.01954898051917553,
    0.0025278236716985703,
    0.018101438879966736,
    0.03015473112463951,
    -0.003203223692253232,
    0.03213256224989891,
    -0.013027875684201717,
    0.02251572348177433,
    0.0026603955775499344,
    0.002961369464173913,
    -0.013407676480710506,
    0.014310598373413086,
    -0.024264240637421608,
    -0.015836967155337334,
    -0.028205566108226776,
    -0.035228293389081955,
    -0.019792625680565834,
    0.004109728615731001,
    0.021111179143190384,
    0.03376641869544983,
    -0.012476090341806412,
    0.02602708712220192,
    -0.008176460862159729,
    -0.029810762032866478,
    0.023647960275411606,
    0.00968849752098322,
    0.012927551753818989,
    -0.012590747326612473,
    0.007305786479264498,
    -0.00411689467728138,
    0.006578432396054268,
    0.014862384647130966,
    0.02635672688484192,
    0.0006825661403127015,
    0.012060459703207016,
    0.012103456072509289,
    -0.01652490720152855,
    -0.029122820124030113,
    0.012963381595909595,
    -0.019978942349553108,
    0.023375650867819786,
    0.006890155375003815,
    0.0004796773719135672,
    0.003016906324774027,
    0.01523501891642809,
    -0.016596568748354912,
    -0.012784230522811413,
    0.0016007160302251577,
    -0.033537108451128006,
    -0.003944909665733576,
    0.02827722765505314,
    0.018961364403367043,
    -0.02224341407418251,
    -0.010992717929184437,
    -0.010799234732985497,
    0.05294276401400566,
    -0.012325603514909744,
    0.009129545651376247,
    -0.011272193863987923,
    -0.01921934261918068,
    0.016653897240757942,
    -0.0037657583598047495,
    0.00174403702840209,
    0.022444063797593117,
    0.004349791444838047,
    -0.006123388186097145,
    -0.007295037154108286,
    0.0017395582981407642,
    -0.023031679913401604,
    -0.0033035483211278915,
    -0.020193925127387047,
    0.020251253619790077,
    -0.013543831184506416,
    0.0037585922982543707,
    0.011945802718400955,
    0.02854953706264496,
    -0.016596568748354912,
    -0.04058849811553955,
    -0.012289772741496563,
    -0.005725672468543053,
    0.015450000762939453,
    0.012232444249093533,
    -0.03597356379032135,
    -0.00247049517929554,
    0.006316871847957373,
    0.006531853228807449,
    0.01768580824136734,
    -0.008219457231462002,
    -0.03597356379032135,
    0.018803711980581284,
    0.017427830025553703,
    0.00439278781414032,
    0.018961364403367043,
    0.03545760735869408,
    -0.0011761276982724667,
    -0.0023737535811960697,
    0.01603761687874794,
    0.010806401260197163,
    0.00790415145456791,
    0.022974351420998573,
    0.033193137496709824,
    0.018818043172359467,
    0.006657259073108435,
    -0.01570797897875309,
    -0.5787873864173889,
    -0.00615205243229866,
    -0.030985994264483452,
    -0.029194481670856476,
    0.016338590532541275,
    0.019133349880576134,
    0.011085877195000648,
    0.026944343000650406,
    -0.015521660447120667,
    0.00999663770198822,
    0.006442277692258358,
    0.010405102744698524,
    0.0038553341291844845,
    -0.02274503745138645,
    -0.025883767753839493,
    -0.007467022631317377,
    0.017012199386954308,
    -0.019921613857150078,
    0.0033232548739761114,
    0.00821229163557291,
    -0.022759370505809784,
    0.026557374745607376,
    -0.0030599026940762997,
    0.0020279916934669018,
    0.0008697791490703821,
    0.04844248667359352,
    0.015636317431926727,
    0.0032569689210504293,
    0.0029452459421008825,
    0.019534647464752197,
    -0.009416187182068825,
    0.022931354120373726,
    0.009186874143779278,
    0.006635760888457298,
    0.052971430122852325,
    -0.021942440420389175,
    -0.013629823923110962,
    0.020509229972958565,
    0.005098643247038126,
    0.04420018568634987,
    -0.009874815121293068,
    -0.03712012991309166,
    0.004235134460031986,
    0.009538010694086552,
    -0.004751089960336685,
    0.018158767372369766,
    -0.022501392289996147,
    0.03975723683834076,
    -0.007567347027361393,
    -0.036002226173877716,
    0.001288992934860289,
    -0.006671591196209192,
    -0.015994619578123093,
    -0.026887014508247375,
    0.023275325074791908,
    0.0021551891695708036,
    0.03433970361948013,
    -0.0048406654968857765,
    0.016825880855321884,
    -0.014554244466125965,
    -0.04382755234837532,
    0.007033476606011391,
    0.00048370828153565526,
    -0.02317500114440918,
    -0.010913891717791557,
    0.005155971739441156,
    0.0028072993736714125,
    -0.02955278381705284,
    -0.00723412586376071,
    -0.015736643224954605,
    0.00617713388055563,
    0.018646057695150375,
    -0.0072771222330629826,
    -0.014948377385735512,
    0.023963265120983124,
    0.03683348745107651,
    0.02895083650946617,
    0.002620982239022851,
    -0.013092370703816414,
    0.006908070761710405,
    0.008111966773867607,
    -0.004822750575840473,
    -0.014690399169921875,
    -0.003683348884806037,
    0.045547403395175934,
    0.03250519558787346,
    -0.0013024293584749103,
    -0.01609494537115097,
    0.011795315891504288,
    -0.00030993157997727394,
    0.03454035520553589,
    0.03915528953075409,
    -0.0049481564201414585,
    -0.037320781499147415,
    0.020494898781180382,
    0.01741349697113037,
    -0.013121034950017929,
    -0.00436770636588335,
    -0.018846707418560982,
    -0.015163358300924301,
    -0.016610899940133095,
    -0.0064530265517532825,
    -0.01446825172752142,
    0.01122919749468565,
    0.01241159625351429,
    -0.009760158136487007,
    0.003282050136476755,
    -0.006872240453958511,
    0.00480483565479517,
    -0.02059522271156311,
    -0.0019814122933894396,
    -0.0501910038292408,
    0.010311943478882313,
    0.007033476606011391,
    0.005589517764747143,
    -0.04362690448760986,
    0.025941094383597374,
    0.003120813984423876,
    0.024679871276021004,
    -0.012203780934214592,
    0.0024310818407684565,
    -0.004930241499096155,
    0.013651322573423386,
    -0.008878733962774277,
    0.019248006865382195,
    0.009122380055487156,
    0.01446825172752142,
    -0.008835737593472004,
    -0.025238823145627975,
    0.007481354754418135,
    0.009022055193781853,
    0.011759485118091106,
    0.015450000762939453,
    0.00452894251793623,
    0.03439703211188316,
    0.013135367073118687,
    0.023490305989980698,
    0.008835737593472004,
    0.0038983302656561136,
    -0.016152273863554,
    0.012956216000020504,
    0.019018692895770073,
    0.0136799868196249,
    -0.031817253679037094,
    -0.00590124074369669,
    -0.00274459645152092,
    -0.00829111784696579,
    -0.0003285185375716537,
    -0.02020825631916523,
    0.029122820124030113,
    0.0070764729753136635,
    -0.010147124528884888,
    -0.03124397061765194,
    0.02811957336962223,
    0.029180148616433144,
    -0.032763171941041946,
    -0.019563311710953712,
    -0.012347101233899593,
    -0.012906053103506565,
    0.000282163149677217,
    0.008377110585570335,
    0.01648191176354885,
    0.009272866882383823,
    -0.019076021388173103,
    -0.014848052524030209,
    -0.0046794298104941845,
    -0.018703386187553406,
    0.033250465989112854,
    0.02844921313226223,
    -0.0317312628030777,
    0.014905381016433239,
    -0.0011062587145715952,
    -0.016553571447730064,
    -0.005349454935640097,
    -0.01745649427175522,
    0.010491094551980495,
    -0.013672820292413235,
    -0.007567347027361393,
    -0.002912998665124178,
    -0.005224049091339111,
    0.00021453357476275414,
    0.016080612316727638,
    -0.019362661987543106,
    -0.01724151335656643,
    0.02136915549635887,
    0.008076136931777,
    -0.002092486247420311,
    0.0008881421526893973,
    0.008778409101068974,
    -0.0019688718020915985,
    0.004220802336931229,
    0.016381585970520973,
    -0.005894074682146311,
    0.015364008024334908,
    -0.008061804808676243,
    0.030269388109445572,
    0.008964726701378822,
    0.017399165779352188,
    0.011379685252904892,
    0.020451901480555534,
    0.013457839377224445,
    0.010082630440592766,
    -0.0041957213543355465,
    -0.02854953706264496,
    0.0171841848641634,
    -0.03201790526509285,
    0.020451901480555534,
    -0.006642926950007677,
    0.01307087205350399,
    -0.013250023126602173,
    0.025883767753839493,
    -0.010426600463688374,
    -0.013916466385126114,
    0.0103836040943861,
    0.027001669630408287,
    0.007359531708061695,
    -0.0033501277212053537,
    0.030985994264483452,
    0.01888970285654068,
    -0.005335123278200626,
    0.018416743725538254,
    -0.009752991609275341,
    0.002076362492516637,
    0.012612245045602322,
    -0.019806958734989166,
    0.0023092590272426605,
    0.019205009564757347,
    0.009867648594081402,
    0.012777063995599747,
    -0.04141975939273834,
    -0.007395362015813589,
    0.013579661957919598,
    0.005224049091339111,
    -0.03218989074230194,
    0.020523563027381897,
    -0.025296151638031006,
    0.06598497182130814,
    -0.03112931363284588,
    0.027689611539244652,
    0.008656586520373821,
    0.012970547191798687,
    0.02619907259941101,
    0.015492997132241726,
    -0.018302088603377342,
    0.02092486061155796,
    0.03499897941946983,
    0.02333265356719494,
    0.04299629107117653,
    -0.008455936796963215,
    0.018918367102742195,
    0.005550104659050703,
    0.010340607725083828,
    -0.024192579090595245,
    0.012146452441811562,
    0.025611456483602524,
    -0.01818743161857128,
    0.025568461045622826,
    0.014977041631937027,
    0.03497031703591347,
    -0.0005343185039237142,
    0.024063590914011,
    0.0041240607388317585,
    0.005041315220296383,
    0.009409021586179733,
    0.010362106375396252,
    -0.008248121477663517,
    0.0006700255325995386,
    -0.04420018568634987,
    -0.008341280743479729,
    -0.014948377385735512,
    -0.00633120397105813,
    -0.01056992169469595,
    -0.012375765480101109,
    -0.018603062257170677,
    0.02399192936718464,
    0.010261781513690948,
    -0.005657595116645098,
    0.02860686555504799,
    0.004453699104487896,
    -0.026399722322821617,
    -0.018975695595145226,
    -0.040674492716789246,
    0.027431633323431015,
    0.026170408353209496,
    -0.009165375493466854,
    -0.019405659288167953,
    0.0024310818407684565,
    0.014590074308216572,
    -0.014690399169921875,
    0.009315863251686096,
    0.0013964837417006493,
    0.02619907259941101,
    -0.0058044991455972195,
    0.02267337776720524,
    -0.008971892297267914,
    0.017370501533150673,
    0.03221855312585831,
    -0.004192138556391001,
    0.014045454561710358,
    -0.022057097405195236,
    0.014289100654423237,
    -0.007617509458214045,
    -0.005173887126147747,
    0.0027858014218509197,
    0.039011966437101364,
    0.013242857530713081,
    -0.012182282283902168,
    -0.003962824586778879,
    -0.0005562644801102579,
    -0.030240723863244057,
    -0.0062882076017558575,
    -0.025611456483602524,
    -0.020853200927376747,
    -0.007968645542860031,
    0.01148000918328762,
    -0.0028252145275473595,
    0.025468135252594948,
    0.02208576165139675,
    0.019305335357785225,
    0.0014269393868744373,
    -0.005976484157145023,
    -0.025554127991199493,
    -0.012812894769012928,
    0.03909796103835106,
    0.027746940031647682,
    0.044687479734420776,
    -0.006456609815359116,
    0.0011340271448716521,
    -0.04058849811553955,
    0.004016570281237364,
    -0.02103951759636402,
    0.0012621203204616904,
    0.010491094551980495,
    -0.020666884258389473,
    0.022257747128605843,
    0.000711678178049624,
    0.023819945752620697,
    -0.004478780087083578,
    -0.003787256544455886,
    -0.0004675846721511334,
    0.0019473736174404621,
    -0.0007242187857627869,
    -0.003353710751980543,
    -0.014289100654423237,
    0.020566558465361595,
    0.02619907259941101,
    0.006266709417104721,
    0.0072054616175591946,
    0.004310378339141607,
    -0.011179035529494286,
    0.024579545482993126,
    0.016223933547735214,
    0.013966628350317478,
    -0.006202214863151312,
    -0.007853989489376545,
    0.000688836385961622,
    0.015851298347115517,
    0.028033580631017685,
    -0.025339147076010704,
    0.042910296469926834,
    0.013436340726912022,
    0.003081400878727436,
    0.00595856923609972,
    -0.0017476200591772795,
    0.02521015889942646,
    -0.008183627389371395,
    -0.010870895348489285,
    0.004210053477436304,
    -0.014102783054113388,
    -0.03339378535747528,
    -0.012884555384516716,
    0.015779638662934303,
    -0.011659161187708378,
    0.025124166160821915,
    0.010455264709889889,
    0.005388868506997824,
    -0.03861067071557045,
    -0.01428193412721157,
    0.011444179341197014,
    0.018373748287558556,
    -0.018646057695150375,
    -0.014819388277828693,
    0.00672533642500639,
    -0.018244760110974312,
    -0.019262338057160378,
    -0.029667440801858902,
    -0.006890155375003815,
    -0.011795315891504288,
    0.006166384555399418,
    -0.005259879399091005,
    -0.016954870894551277,
    0.005743587855249643,
    -0.03562959283590317,
    -0.019591975957155228,
    -0.0004138392978347838,
    -0.028377551585435867,
    -0.0257117822766304,
    0.015636317431926727,
    0.02823423035442829,
    -0.008792741224169731,
    0.0011017799843102694,
    0.007219793740659952,
    0.011444179341197014,
    -0.012870223261415958,
    -0.018818043172359467,
    -0.03640352562069893,
    0.013078038580715656,
    -0.0475538969039917,
    0.03537161648273468,
    -0.007123052142560482,
    0.009616836905479431,
    -0.02108251489698887,
    0.01976396143436432,
    0.03881131857633591,
    0.012884555384516716,
    0.005510691087692976,
    0.01999327540397644,
    -0.01133668888360262,
    -0.009989471174776554,
    0.06306122243404388,
    -0.00531362509354949,
    0.014575742185115814,
    -0.015421336516737938,
    -0.01370148453861475,
    0.034569017589092255,
    -0.0032802587375044823,
    0.00564326299354434,
    -0.02823423035442829,
    -0.010010969825088978,
    -0.0025941096246242523,
    -0.010498261079192162,
    0.022472728043794632,
    -0.010648747906088829,
    -0.00042570807272568345,
    0.008713915012776852,
    -0.01395229622721672,
    -0.022171754390001297,
    0.02036590874195099,
    -0.005302875768393278,
    0.02823423035442829,
    -0.006718170363456011,
    0.010433766059577465,
    -0.0030473622027784586,
    -0.013235691003501415,
    0.0062165469862520695,
    -0.01712685637176037,
    0.0038302529137581587,
    0.020451901480555534,
    -0.039900556206703186,
    0.024507885798811913,
    -0.014905381016433239,
    -0.028922172263264656,
    -0.005754336714744568,
    0.019634973257780075,
    0.012375765480101109,
    0.021770454943180084,
    0.01070607639849186,
    0.00031306673190556467,
    0.002780426759272814,
    -0.01180248148739338,
    -0.010089796036481857,
    -0.013106702826917171,
    -0.021827783435583115,
    -0.0006574849248863757,
    -0.010082630440592766,
    0.015550324693322182,
    0.017929453402757645,
    0.0019760378636419773,
    -0.02565445378422737,
    -0.02075287699699402,
    -0.03883998095989227,
    0.023447310552001,
    -0.0015729475999251008,
    0.02443622425198555,
    0.0019366246415302157,
    0.0016213183989748359,
    -0.005632514134049416,
    -0.024837523698806763,
    0.011831145733594894,
    -0.004808418452739716,
    0.0117236552760005,
    -0.01719851605594158,
    0.03703413903713226,
    0.02135482430458069,
    0.020896196365356445,
    -0.013056539930403233,
    0.027918925508856773,
    0.008169295266270638,
    0.0012773481430485845,
    -0.01148000918328762,
    -0.011594666168093681,
    0.0043032122775912285,
    -0.015937291085720062,
    -0.020824536681175232,
    0.01625259779393673,
    0.009717161767184734,
    0.00993930920958519,
    0.008061804808676243,
    0.01910468563437462,
    0.01019012089818716,
    0.0001733287936076522,
    0.004783337470144033,
    -0.033479779958724976,
    -0.011028548702597618,
    -0.0274029690772295,
    -0.02399192936718464,
    0.017757467925548553,
    0.001161795575171709,
    -0.048901114612817764,
    -0.02207142859697342,
    0.01133668888360262,
    -0.008305449970066547,
    0.022816698998212814,
    0.010863729752600193,
    -0.0011483592679724097,
    -0.0017933036433532834,
    0.022802365943789482,
    0.010598585940897465,
    0.021612802520394325,
    -0.00886440183967352,
    3.485050910967402e-05,
    -0.02695867419242859,
    -0.005578768905252218,
    0.009323028847575188,
    0.014310598373413086,
    0.0002537229156587273,
    -0.004808418452739716,
    0.004385621752589941,
    -0.000294927682261914,
    0.016883209347724915,
    0.0003930129751097411,
    -0.01570797897875309,
    0.012081957422196865,
    -0.0014806847320869565,
    -0.020552227273583412,
    -0.03247653320431709,
    -0.05623914673924446,
    -0.027001669630408287,
    -0.02389160543680191,
    0.006614262703806162,
    0.016510576009750366,
    0.02631372958421707,
    -0.001983203925192356,
    0.005858244374394417,
    0.011938637122511864,
    0.003676182823255658,
    0.03244786709547043,
    0.022386735305190086,
    0.037320781499147415,
    0.016653897240757942,
    -0.02268770895898342,
    -0.025181494653224945,
    -0.0336230993270874,
    0.020666884258389473,
    0.006173550616949797,
    0.03313580900430679,
    0.007968645542860031,
    -0.023217996582388878,
    0.009602504782378674,
    0.013751646503806114,
    -0.027216652408242226,
    -0.02042323723435402,
    -0.009717161767184734,
    0.01452558021992445,
    -0.002651437884196639,
    0.001159108360297978,
    -0.01458290871232748,
    0.0049804034642875195,
    -0.026055751368403435,
    -0.006997646298259497,
    -0.005926322191953659,
    -0.02164146676659584,
    -0.001258537289686501,
    -0.011795315891504288,
    -0.010720408521592617,
    0.0014985998859629035,
    0.007982977665960789,
    0.019749630242586136,
    0.009065051563084126,
    -0.01051975879818201,
    -0.0028144654352217913,
    -0.015679314732551575,
    -0.018531400710344315,
    0.013550997711718082,
    -0.0020351577550172806,
    0.0217561237514019,
    -0.015435668639838696,
    -0.029409462586045265,
    0.03471233695745468,
    0.027703942731022835,
    -0.018001113086938858,
    -0.0003278467047493905,
    -0.0033590851817280054,
    0.03697681054472923,
    -0.03416771814227104,
    -0.00525629660114646,
    -0.018574398010969162,
    -0.0191190168261528,
    0.010691744275391102,
    0.00452894251793623,
    -0.020881865173578262,
    -0.013063706457614899,
    0.009437685832381248,
    0.00019012422126252204,
    0.019147681072354317,
    -0.01471906341612339,
    0.003518529701977968,
    -0.038954637944698334,
    -0.009452017955482006,
    0.008878733962774277,
    -0.021426483988761902,
    -0.00119493855163455,
    0.030240723863244057,
    -0.012583580799400806,
    -0.003493448719382286,
    -0.034741003066301346,
    -0.02492351643741131,
    -0.004726008977741003,
    0.028033580631017685,
    0.016023283824324608,
    0.010354939848184586,
    0.04265232011675835,
    -0.041763730347156525,
    0.009595339186489582,
    0.016883209347724915,
    0.0070155612193048,
    -0.03926994651556015,
    0.031817253679037094,
    0.002556487685069442,
    0.01620960235595703,
    0.0185027364641428,
    -0.004880079068243504,
    -0.0046400162391364574,
    -0.04328293353319168,
    -0.022143090143799782,
    0.0306993518024683,
    0.017040863633155823,
    -0.043684232980012894,
    -0.011085877195000648,
    0.007639007642865181,
    0.016238266602158546,
    -0.015163358300924301,
    -0.04563339799642563,
    0.031329963356256485,
    -0.03201790526509285,
    0.007162465248256922,
    -0.006223713047802448,
    -0.0006453922251239419,
    -0.015091697685420513,
    -0.02020825631916523,
    0.02371961995959282,
    -0.027316976338624954,
    -0.050993598997592926,
    -0.029337802901864052,
    0.020179592072963715,
    -0.013293019495904446,
    -0.01427476853132248,
    0.025052504613995552,
    -0.017384832724928856,
    -0.01268390566110611,
    -0.01878937892615795,
    0.03373775631189346,
    0.005983650218695402,
    0.0007197399972938001,
    0.00691881962120533,
    0.020466234534978867,
    0.005342288874089718,
    0.003203223692253232,
    -0.017384832724928856,
    -0.013235691003501415,
    -0.014396591112017632,
    0.00018374195497017354,
    -0.014102783054113388,
    -0.0023379232734441757,
    -0.021168507635593414,
    0.04437217116355896,
    0.006481690797954798,
    0.0018577980808913708,
    -0.020638220012187958,
    -0.011623330414295197,
    -0.012397264130413532,
    6.908518844284117e-05,
    -0.010440932586789131,
    0.03497031703591347,
    -0.009889147244393826,
    0.010218785144388676,
    0.0280622448772192,
    0.004313961137086153,
    -0.01046243030577898,
    0.027001669630408287,
    -0.028363220393657684,
    0.02212875708937645,
    0.020394572988152504,
    -0.0016920831985771656,
    0.01166632678359747,
    0.007058557588607073,
    -0.0422796867787838,
    -0.02296001836657524,
    0.014339262619614601,
    -0.012368599884212017,
    -0.018158767372369766,
    0.029409462586045265,
    -0.009452017955482006,
    -0.03580157831311226,
    -0.002416749717667699,
    0.012440260499715805,
    -0.00499831885099411,
    -0.004410702735185623,
    0.01546433288604021,
    -0.02191377617418766,
    -0.012404429726302624,
    -0.007058557588607073,
    0.013722983188927174,
    0.01933399774134159,
    -0.0211398433893919,
    -0.021125510334968567,
    0.02048056572675705,
    -0.020566558465361595,
    -0.02899383194744587,
    -0.016023283824324608,
    0.007209044881165028,
    -0.013880635611712933,
    -0.010713241994380951,
    0.03184591978788376,
    0.024249907582998276,
    0.03161660581827164,
    -0.0022895524743944407,
    -0.011716488748788834,
    -0.016940537840127945,
    0.0007918483461253345,
    -0.011680658906698227,
    -0.0009701037779450417,
    0.022587385028600693,
    0.006374199874699116,
    -0.015607653185725212,
    0.0015218895860016346,
    0.02086753211915493,
    -0.0016284844605252147,
    0.018904035910964012,
    -0.014905381016433239,
    -0.023963265120983124,
    -0.022659044712781906,
    -0.007918483577668667,
    0.01134385447949171,
    -0.01076340489089489,
    -0.0024292904417961836,
    -0.0029147902969270945,
    -0.002336131874471903,
    0.0207672081887722,
    -0.018717719241976738,
    -0.007216210942715406,
    -0.016668228432536125,
    0.027101995423436165,
    0.011372518725693226,
    -0.01139401737600565,
    -0.03580157831311226,
    0.012956216000020504,
    0.0035382364876568317,
    -0.013293019495904446,
    -0.0045755221508443356,
    0.14893914759159088,
    -0.013350347988307476,
    0.02662903629243374,
    0.04027319326996803,
    -0.011773817241191864,
    -0.00770350219681859,
    0.007090805098414421,
    -0.02515283040702343,
    -0.011623330414295197,
    0.005994399543851614,
    -0.008520431816577911,
    -0.0037155961617827415,
    -0.0120317954570055,
    -0.00020669570949394256,
    0.015450000762939453,
    -0.018001113086938858,
    -0.008907398208975792,
    -0.03998655080795288,
    -0.028477877378463745,
    0.009752991609275341,
    -0.02164146676659584,
    -0.0329638235270977,
    -0.024894852191209793,
    -0.02394893392920494,
    0.028678525239229202,
    -0.017599815502762794,
    -0.012669573538005352,
    0.01153017207980156,
    0.014647402800619602,
    -0.010620083659887314,
    -0.015793969854712486,
    -0.007445524446666241,
    0.004245883785188198,
    -0.02664336748421192,
    -0.046264007687568665,
    -0.02174179069697857,
    0.010870895348489285,
    0.015836967155337334,
    0.0052527133375406265,
    0.019591975957155228,
    -0.008771243505179882,
    -0.017642810940742493,
    0.00999663770198822,
    -0.011515839956700802,
    0.004754673223942518,
    -0.01878937892615795,
    -0.01084223110228777,
    -0.005041315220296383,
    0.017485158517956734,
    0.009330195374786854,
    -0.0014905381249263883,
    -0.027890261262655258,
    0.01641025021672249,
    0.02296001836657524,
    0.004041651263833046,
    -0.04855714365839958,
    0.03124397061765194,
    0.02373395301401615,
    0.026600372046232224,
    0.024292904883623123,
    0.0036511016078293324,
    0.023633627220988274,
    -0.018717719241976738,
    0.04712393507361412,
    -0.01691187359392643,
    0.01625259779393673,
    -0.02399192936718464,
    0.04543274641036987,
    -0.011186202056705952,
    0.005378119181841612,
    -0.016238266602158546,
    -0.022759370505809784,
    -0.01972096599638462,
    0.0006771915941499174,
    -0.029309138655662537,
    -0.025496799498796463,
    0.06409313529729843,
    0.03227588161826134,
    0.013730148784816265,
    0.017642810940742493,
    -0.012132120318710804,
    -0.007796660531312227,
    -0.01795811764895916,
    0.04431484267115593,
    -0.03388107568025589,
    -0.022272078320384026,
    0.014324930496513844,
    -0.01471906341612339,
    -0.02284536324441433,
    -0.004435784183442593,
    0.004141976125538349,
    -0.016596568748354912,
    0.02371961995959282,
    -0.0003925650962628424,
    0.010591419413685799,
    0.006478108000010252,
    0.011945802718400955,
    0.014346429146826267,
    -0.025568461045622826,
    0.0004102562670595944,
    -0.02164146676659584,
    0.04196437820792198,
    0.006481690797954798,
    -0.01867472194135189,
    0.023318322375416756,
    -0.027933256700634956,
    -0.03147328644990921,
    0.0054318648763000965,
    0.016897542402148247,
    -0.01613794080913067,
    0.004729591775685549,
    -0.0382380336523056,
    -0.013185529038310051,
    -0.0070048123598098755,
    0.020738543942570686,
    -0.006617845501750708,
    0.011408349499106407,
    -0.014919713139533997,
    0.01768580824136734,
    0.0017852417659014463,
    -0.0037084301002323627,
    0.002603067085146904,
    0.011494341306388378,
    -0.02109684608876705,
    -0.0227880347520113,
    -0.001286305719986558,
    -0.038954637944698334,
    0.021842116490006447,
    -0.018273424357175827,
    -0.01927667111158371,
    0.023963265120983124,
    -0.025783441960811615,
    0.01565065048635006,
    0.013035042211413383,
    -0.026328062638640404,
    -0.023490305989980698,
    -0.031501948833465576,
    -0.029638776555657387,
    -0.014905381016433239,
    -0.0037442604079842567,
    -0.010641582310199738,
    -0.006456609815359116,
    0.004668680485337973,
    -0.038582004606723785,
    0.02394893392920494,
    -0.01933399774134159,
    0.02371961995959282,
    0.01082073338329792,
    0.02784726396203041,
    -0.010720408521592617,
    -0.0014968083705753088,
    -0.018144434317946434,
    0.02306034415960312,
    -0.0030007828027009964,
    0.003034821478649974,
    -0.019892949610948563,
    -0.003375208703801036,
    -0.023905936628580093,
    0.008527597412467003,
    0.004446533042937517,
    -0.015722310170531273,
    0.00015328625158872455,
    0.012425928376615047,
    -0.004518193658441305,
    -0.023203665390610695,
    -0.006259543355554342,
    -0.18218961358070374,
    0.011508673429489136,
    0.01696920208632946,
    -0.040215864777565,
    0.008699582889676094,
    -0.022157421335577965,
    -0.0010435557924211025,
    -0.0022841780446469784,
    -0.007373863831162453,
    -0.028520872816443443,
    0.010906726121902466,
    0.01778613217175007,
    -0.0034361202269792557,
    -0.031215306371450424,
    0.015020037069916725,
    -0.01383763924241066,
    -0.01381614152342081,
    0.008248121477663517,
    0.04084647446870804,
    0.0003497927391435951,
    0.029180148616433144,
    -0.05408933386206627,
    0.02860686555504799,
    0.008226623758673668,
    0.0070012290962040424,
    -0.026672031730413437,
    -0.010655914433300495,
    -0.01001813542097807,
    -0.009136712178587914,
    -0.030068738386034966,
    0.03909796103835106,
    0.013773145154118538,
    0.01630992628633976,
    -0.0005585039034485817,
    0.01910468563437462,
    0.015278015285730362,
    0.005675510503351688,
    -0.0038553341291844845,
    -0.006768332794308662,
    0.01653924025595188,
    0.026815352961421013,
    0.028750186786055565,
    -0.0128558911383152,
    0.00033434093347750604,
    -0.000231329002417624,
    0.03671883046627045,
    0.011114541441202164,
    -0.02360496297478676,
    -0.0185027364641428,
    -0.026872681453824043,
    0.019677968695759773,
    -0.03433970361948013,
    0.04789786785840988,
    0.005790167022496462,
    0.03777940571308136,
    0.0026532295159995556,
    -0.001777180004864931,
    0.00922987051308155,
    -0.0011671701213344932,
    -0.014747727662324905,
    0.003344753058627248,
    -0.03250519558787346,
    -0.009967973455786705,
    -0.0037335113156586885,
    -0.003737094346433878,
    -0.022530056536197662,
    -0.007115886081010103,
    0.00892173033207655,
    -0.00911521352827549,
    0.01362265832722187,
    0.00503773195669055,
    -0.016940537840127945,
    0.012103456072509289,
    -0.00884290412068367,
    0.03299248591065407,
    0.007140967063605785,
    -0.03947059437632561,
    0.001560406992211938,
    -0.0006050831871107221,
    0.004478780087083578,
    -0.029294805601239204,
    0.046550650149583817,
    0.005990816280245781,
    -0.00782532524317503,
    0.03141595795750618,
    -0.021598469465970993,
    -0.0010104128159582615,
    -0.007216210942715406,
    -0.006890155375003815,
    -0.02614174410700798,
    0.017284508794546127,
    -0.018216095864772797,
    0.004915909375995398,
    0.008004476316273212,
    0.013472171500325203,
    0.005284960847347975,
    -0.010412268340587616,
    -0.006205798126757145,
    0.009924977086484432,
    -0.02916581742465496,
    0.012103456072509289,
    0.017370501533150673,
    0.009452017955482006,
    -0.010577087290585041,
    0.04299629107117653,
    0.03975723683834076,
    -0.04354090988636017,
    -0.01691187359392643,
    0.03640352562069893,
    0.014066953212022781,
    -0.012784230522811413,
    0.009638335555791855,
    0.013293019495904446,
    0.00011185753828613088,
    -0.008140631020069122,
    0.030412709340453148,
    -0.004815584514290094,
    -0.040617164224386215,
    0.01496270950883627,
    -0.016395919024944305,
    0.020681215450167656,
    -0.005224049091339111,
    -0.025410808622837067,
    0.005453363060951233,
    -0.016066281124949455,
    -0.024077922105789185,
    -0.09940742701292038,
    -0.039900556206703186,
    0.0016249014297500253,
    0.023877274245023727,
    -0.029810762032866478,
    -0.0015442834701389074,
    -0.018545733764767647,
    0.020079268142580986,
    0.005646846257150173,
    0.013651322573423386,
    -0.003427162766456604,
    0.0003643487871158868,
    -0.021068181842565536,
    -0.00256723677739501,
    -0.021555474027991295,
    -0.01109304279088974,
    -0.03207523375749588,
    0.019033024087548256,
    0.0045719388872385025,
    0.02443622425198555,
    -0.0016696893144398928,
    -0.0036797658540308475,
    0.001085656345821917,
    -0.018689054995775223,
    -0.0016741680447012186,
    0.003751426236703992,
    -0.04798385873436928,
    0.026829686015844345,
    0.016983535140752792,
    0.016883209347724915,
    -0.017857791855931282,
    -0.03425371274352074,
    -0.005944237112998962,
    0.009050719439983368,
    0.011558836326003075,
    -0.018087105825543404,
    -0.011809648014605045,
    -0.022988682612776756,
    0.04041651263833046,
    -0.007939981296658516,
    -0.0015165150398388505,
    -0.00523121515288949,
    0.007531516719609499,
    -0.003737094346433878,
    0.021784787997603416,
    0.00823378935456276,
    -0.012382932007312775,
    0.01751382276415825,
    0.03399573266506195,
    -0.01729883998632431,
    -0.011300858110189438,
    -0.009136712178587914,
    -0.015937291085720062,
    -0.010921058245003223,
    -0.003337586997076869,
    -0.015851298347115517,
    0.00032874246244318783,
    0.017542487010359764,
    -0.009831818751990795,
    -0.012404429726302624,
    -0.003124397015199065,
    0.01648191176354885,
    -0.024808859452605247,
    0.04849981516599655,
    0.02367662452161312,
    0.005607432685792446,
    0.014418089762330055,
    -0.001868547173216939,
    0.024565214291214943,
    -0.014109949581325054,
    -0.04635000228881836,
    0.03531428799033165,
    -0.012218112125992775,
    0.016983535140752792,
    -0.01714118756353855,
    0.006775498855859041,
    0.0039843227714300156,
    -0.018029777333140373,
    0.018918367102742195,
    -0.017327504232525826,
    -0.010534090921282768,
    0.011451344937086105,
    -0.013457839377224445,
    -0.005442613735795021,
    0.005170303862541914,
    0.022945687174797058,
    0.0015192022547125816,
    -0.01062725018709898,
    0.01592295989394188,
    -0.022487059235572815,
    0.007746498566120863,
    -0.0076891700737178326,
    0.009874815121293068,
    -0.026514379307627678,
    -0.006542602088302374,
    -0.00872824713587761,
    -0.011143205687403679,
    0.012189448811113834,
    -0.012382932007312775,
    -0.006134137511253357,
    -0.06776215136051178,
    -0.01648191176354885,
    -0.07481354475021362,
    0.04526076093316078,
    0.01205329317599535,
    -0.03746410086750984,
    0.01813010312616825,
    -0.00513447355479002,
    -0.0072412919253110886,
    -0.02218608558177948,
    0.01510602980852127,
    -0.0012262900127097964,
    -0.019849954172968864,
    -0.01735616847872734,
    -0.009430519305169582,
    -0.01620960235595703,
    -0.019792625680565834,
    -0.02498084492981434,
    0.0224153995513916,
    0.0015675730537623167,
    0.06437978148460388,
    0.02003627084195614,
    -0.008362778462469578,
    0.02301734685897827,
    0.0023647958878427744,
    -0.003876832313835621,
    -0.033250465989112854,
    -0.026672031730413437,
    -0.02437889762222767,
    0.032161224633455276,
    -0.02750329300761223,
    -0.02608441561460495,
    0.0021748957224190235,
    0.009652667678892612,
    -0.0008823196985758841,
    -0.0021444400772452354,
    0.002753554144874215,
    0.009301531128585339,
    0.021182838827371597,
    0.002386294072493911,
    0.013629823923110962,
    -0.0067002554424107075,
    0.005650429055094719,
    -0.001875713118351996,
    0.005596683826297522,
    -0.01109304279088974,
    -0.009989471174776554,
    -0.02757495455443859,
    0.012196614407002926,
    0.0012442051665857434,
    0.038696661591529846,
    0.012812894769012928,
    0.015077365562319756,
    0.018717719241976738,
    -0.02119717188179493,
    -0.027761271223425865,
    0.006728919688612223,
    1.4402077795239165e-05,
    0.00480483565479517,
    -0.0020047021098434925,
    -0.013880635611712933,
    0.013909299857914448,
    0.02141215279698372,
    0.003930577542632818,
    0.021885111927986145,
    0.032304547727108,
    -0.004177806433290243,
    -0.02323232963681221,
    -0.03221855312585831,
    -0.004618518054485321,
    0.011881308630108833,
    -0.014575742185115814,
    -0.009495014324784279,
    -0.03064202331006527,
    0.019864285364747047,
    -0.004238717723637819,
    0.014625905081629753,
    -0.005424698814749718,
    0.018875371664762497,
    -0.006578432396054268,
    0.0016338590066879988,
    0.015478665009140968,
    0.015550324693322182,
    -0.006632177624851465,
    -0.029466791078448296,
    -0.005213300231844187,
    0.03783673420548439,
    -0.009050719439983368,
    -0.011558836326003075,
    0.005679093301296234,
    -0.014554244466125965,
    0.0022035599686205387,
    0.007861155085265636,
    0.017442161217331886,
    -0.007083639036864042,
    -0.008814239874482155,
    -0.01883237436413765,
    0.018631726503372192,
    -0.020021939650177956,
    0.014418089762330055,
    0.00436770636588335,
    0.004862163681536913,
    0.003581232624128461,
    0.007639007642865181,
    -0.00018553347035776824,
    -0.017857791855931282,
    -0.03313580900430679,
    0.010304777882993221,
    0.007262790109962225,
    0.006169967819005251,
    -0.011372518725693226,
    0.015836967155337334,
    0.011064378544688225,
    -0.014432421885430813,
    -0.03519963100552559,
    -0.003111856523901224,
    -0.020179592072963715,
    0.004167057108134031,
    -0.02422124333679676,
    0.013522333465516567,
    -0.021569805219769478,
    0.014203107915818691,
    -0.01504870131611824,
    0.002932705217972398,
    0.02889350801706314,
    -0.007982977665960789,
    -0.0015765306307002902,
    0.010261781513690948,
    -0.004306795075535774,
    0.01906168833374977,
    -0.023819945752620697,
    -0.004543274641036987,
    -0.028148237615823746,
    -0.00752435065805912,
    -0.03674749657511711,
    -0.02536781132221222,
    0.01565065048635006,
    -0.002511699916794896,
    -0.004206470213830471,
    3.4766530006891116e-05,
    0.01523501891642809,
    0.07498553395271301,
    0.01817309856414795,
    -0.00026783105568028986,
    0.004618518054485321,
    0.0031154395546764135,
    0.008663752116262913,
    0.02016526088118553,
    0.006223713047802448,
    0.021455148234963417,
    -0.015851298347115517,
    0.006603513844311237,
    -0.02833455614745617,
    0.001492329640313983,
    -0.031931910663843155,
    -0.013042207807302475,
    0.005069979466497898,
    -0.024909185245633125,
    0.03021205961704254,
    -0.017599815502762794,
    0.016997866332530975,
    0.01101421657949686,
    0.01943432353436947,
    0.0018318211659789085,
    -0.014203107915818691,
    -0.03603089228272438,
    -0.007119469344615936,
    0.012519086711108685,
    -0.006116222124546766,
    -0.018531400710344315,
    -0.04179239273071289,
    0.011967300437390804,
    -0.0087354127317667,
    -0.0395565889775753,
    -0.025009509176015854,
    -0.008635088801383972,
    -0.002798341913148761,
    0.0008881421526893973,
    -0.012182282283902168,
    0.02267337776720524,
    -0.0055357725359499454,
    -0.019577644765377045,
    0.004887245129793882,
    -0.01696920208632946,
    -0.04749656841158867,
    0.04778321087360382,
    -0.009752991609275341,
    0.027030333876609802,
    0.009043552912771702,
    -0.052426811307668686
  ]
}
{
  "classifiers": [
    "development status :: 4 - beta",
    "intended audience :: developers",
    "intended audience :: information technology",
    "license :: osi approved :: mit license",
    "operating system :: os independent",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.12",
    "programming language :: python :: 3.6",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: software development :: libraries :: python modules"
  ],
  "description": "mutable variant of namedtuple -- recordclass, which support assignments, compact dataclasses and other memory saving variants.\n# recordclass library\r\n\r\n**recordclass** is [mit licensed](http://opensource.org/licenses/mit) python library.\r\nit was started as a \"proof of concept\" for the problem of fast \"mutable\"\r\nalternative of `namedtuple` (see [question](https://stackoverflow.com/questions/29290359/existence-of-mutable-named-tuple-in-python) on [stackoverflow](https://stackoverflow.com)).\r\nit was evolved further in order to provide more memory saving, fast and flexible types.\r\n\r\n**recordclass** library provide record/data-like classes that do not participate in cyclic *garbage collection* (gc) mechanism by default, but support only *reference counting* for garbage collection.\r\nthe instances of such classes havn't `pygc_head` prefix in the memory, which decrease their size and have a little faster path for the instance creation and deallocation.\r\nthis may make sense in cases where it is necessary to limit the size of the objects as much as possible, provided that they will never be part of references cycles in the application.\r\nfor example, when an object represents a record with fields with values of simple types by convention (`int`, `float`, `str`, `date`/`time`/`datetime`, `timedelta`, etc.).\r\n\r\nin order to illustrate this, consider a simple class with type hints:\r\n\r\n    class point:\r\n        x: int\r\n        y: int\r\n\r\nby tacit agreement instances of the class `point` is supposed to have attributes `x` and `y` with values of `int` type. assigning other types of values, which are not subclass of `int`, should be considered as a violation of the agreement.\r\n\r\nother examples are non-recursive data structures in which all leaf elements represent a value of an atomic type.\r\nof course, in python, nothing prevent you from \u201cshooting yourself in the foot\" by creating the reference cycle in the script or application code.\r\nbut in many cases, this can still be avoided provided that the developer understands what he is doing and uses such classes in the codebase with care.\r\nanother option is to use static code analyzers along with type annotations to monitor compliance with typehints.\r\n\r\nthe library is built on top of the base class `dataobject`. the type of `dataobject` is special metaclass `datatype`.\r\n   it control creation  of subclasses, which  will not participate in cyclic gc and do not contain `pygc_head`-prefix, `__dict__`  and `__weakref__`  by default.\r\n   as the result the instance of such class need less memory.\r\n   it's memory footprint is similar to memory footprint of instances of the classes with `__slots__` but without `pygc_head`. so the difference in memory size is equal to the size of `pygc_head`.\r\n   it also tunes `basicsize` of the instances, creates descriptors for the fields and etc.\r\n   all subclasses of `dataobject` created by `class statement` support `attrs`/`dataclasses`-like api.\r\n   for example:\r\n\r\n        from recordclass import dataobject, astuple, asdict\r\n        class point(dataobject):\r\n            x:int\r\n            y:int\r\n\r\n        >>> p = point(1, 2)\r\n        >>> astuple(p)\r\n        (1, 2)\r\n        >>> asdict(p)\r\n        {'x':1, 'y':2}\r\n\r\nthe `recordclass` factory create dataobject-based subclass with specified fields and the support of `namedtuple`-like api.\r\n   by default it will not participate in cyclic gc too.\r\n\r\n        >>> from recordclass import recordclass\r\n        >>> point = recordclass('point', 'x y')\r\n        >>> p = point(1, 2)\r\n        >>> p.y = -1\r\n        >>> print(p._astuple)\r\n        (1, -1)\r\n        >>> x, y = p\r\n        >>> print(p._asdict)\r\n        {'x':1, 'y':-1}\r\n\r\nit also provide a factory function `make_dataclass` for creation of subclasses of `dataobject` with the specified field names.\r\n   these subclasses support `attrs`/`dataclasses`-like api. it's equivalent to creating subclasses of dataobject using `class statement`.\r\n   for example:\r\n\r\n        >>> point = make_dataclass('point', 'x y')\r\n        >>> p = point(1, 2)\r\n        >>> p.y = -1\r\n        >>> print(p.x, p.y)\r\n        1 -1\r\n\r\n   if one want to use some sequence for initialization then:\r\n\r\n        >>> p = point(*sequence)\r\n\r\n\r\nthere is also a factory function `make_arrayclass` for creation of the subclass of `dataobject`, which can be considered as a compact array of simple objects.\r\n   for example:\r\n\r\n        >>> pair = make_arrayclass(2)\r\n        >>> p = pair(2, 3)\r\n        >>> p[1] = -1\r\n        >>> print(p)\r\n        pair(2, -1)\r\n\r\nthe library provide in addition the classes `lightlist` (immutable) and `litetuple`, which considers as list-like and tuple-like *light* containers in order to save memory. they do not supposed to participate in cyclic gc too. mutable variant of litetuple is called by `mutabletuple`.\r\n    for example:\r\n\r\n        >>> lt = litetuple(1, 2, 3)\r\n        >>> mt = mutabletuple(1, 2, 3)\r\n        >>> lt == mt\r\n        true\r\n        >>> mt[-1] = -3\r\n        >>> lt == mt\r\n        false\r\n        >>> print(sys.getsizeof((1,2,3)), sys.getsizeof(litetuple(1,2,3)))\r\n        64 48\r\n\r\nnote if one like create `litetuple` or `mutabletuple` from some iterable then:\r\n\r\n        >>> seq = [1,2,3]\r\n        >>> lt = litetuple(*seq)\r\n        >>> mt = mutabletuple(*seq)\r\n\r\n### memory footprint\r\n\r\nthe following table explain memory footprints of the  `dataobject`-based objects and litetuples:\r\n\r\n<table border=\"1\" class=\"dataframe\">\r\n  <thead>\r\n    <tr style=\"text-align: right;\">\r\n      <th>tuple/namedtuple</th>\r\n      <th>class with __slots__</th>\r\n      <th>recordclass/dataobject</th>\r\n      <th>litetuple/mutabletuple</th>\r\n    </tr>\r\n  </thead>\r\n  <tbody>\r\n    <tr>\r\n      <td>g+b+s+n&times;p</td>\r\n      <td>g+b+n&times;p</td>\r\n      <td>b+n&times;p</td>\r\n      <td>b+s+n&times;p</td>\r\n    </tr>\r\n  </tbody>\r\n</table>\r\n\r\nwhere:\r\n\r\n * b = sizeof(pyobject)\r\n * s = sizeof(py_ssize_t)\r\n * n = number of items\r\n * p = sizeof(pyobject*)\r\n * g = sizeof(pygc_head)\r\n\r\nthis is useful in that case when you absolutely sure that reference cycle isn't supposed.\r\nfor example, when all field values are instances of atomic types.\r\nas a result the size of the instance is decreased by 24-32 bytes for cpython 3.4-3.7 and by 16 bytes for cpython >=3.8.\r\n\r\n### performance counters\r\n\r\nhere is the table with performance counters, which was measured using `tools/perfcounts.py` script:\r\n\r\n* recordclass 0.21, python 3.10, debian/testing linux, x86-64:\r\n\r\n<table border=\"1\" class=\"dataframe\">\r\n  <thead>\r\n    <tr style=\"text-align: right;\">\r\n      <th>id</th>\r\n      <th>size</th>\r\n      <th>new</th>\r\n      <th>getattr</th>\r\n      <th>setattr</th>\r\n      <th>getitem</th>\r\n      <th>setitem</th>\r\n      <th>getkey</th>\r\n      <th>setkey</th>\r\n      <th>iterate</th>\r\n      <th>copy</th>\r\n    </tr>\r\n  </thead>\r\n  <tbody>\r\n    <tr>\r\n      <td>litetuple</td>\r\n      <td>48</td>\r\n      <td>0.18</td>\r\n      <td></td>\r\n      <td></td>\r\n      <td>0.2</td>\r\n      <td></td>\r\n      <td></td>\r\n      <td></td>\r\n      <td>0.33</td>\r\n      <td>0.19</td>\r\n    </tr>\r\n    <tr>\r\n      <td>mutabletuple</td>\r\n      <td>48</td>\r\n      <td>0.18</td>\r\n      <td></td>\r\n      <td></td>\r\n      <td>0.21</td>\r\n      <td>0.21</td>\r\n      <td></td>\r\n      <td></td>\r\n      <td>0.33</td>\r\n      <td>0.18</td>\r\n    </tr>\r\n    <tr>\r\n      <td>tuple</td>\r\n      <td>64</td>\r\n      <td>0.24</td>\r\n      <td></td>\r\n      <td></td>\r\n      <td>0.21</td>\r\n      <td></td>\r\n      <td></td>\r\n      <td></td>\r\n      <td>0.37</td>\r\n      <td>0.16</td>\r\n    </tr>\r\n    <tr>\r\n      <td>namedtuple</td>\r\n      <td>64</td>\r\n      <td>0.75</td>\r\n      <td>0.23</td>\r\n      <td></td>\r\n      <td>0.21</td>\r\n      <td></td>\r\n      <td></td>\r\n      <td></td>\r\n      <td>0.33</td>\r\n      <td>0.21</td>\r\n    </tr>\r\n    <tr>\r\n      <td>class+slots</td>\r\n      <td>56</td>\r\n      <td>0.68</td>\r\n      <td>0.29</td>\r\n      <td>0.33</td>\r\n      <td></td>\r\n      <td></td>\r\n      <td></td>\r\n      <td></td>\r\n      <td></td>\r\n      <td></td>\r\n    </tr>\r\n    <tr>\r\n      <td>dataobject</td>\r\n      <td>40</td>\r\n      <td>0.25</td>\r\n      <td>0.23</td>\r\n      <td>0.29</td>\r\n      <td>0.2</td>\r\n      <td>0.22</td>\r\n      <td></td>\r\n      <td></td>\r\n      <td>0.33</td>\r\n      <td>0.2</td>\r\n    </tr>\r\n    <tr>\r\n      <td>dataobject+gc</td>\r\n      <td>56</td>\r\n      <td>0.27</td>\r\n      <td>0.22</td>\r\n      <td>0.29</td>\r\n      <td>0.19</td>\r\n      <td>0.21</td>\r\n      <td></td>\r\n      <td></td>\r\n      <td>0.35</td>\r\n      <td>0.22</td>\r\n    </tr>\r\n    <tr>\r\n      <td>dict</td>\r\n      <td>232</td>\r\n      <td>0.32</td>\r\n      <td></td>\r\n      <td></td>\r\n      <td></td>\r\n      <td></td>\r\n      <td>0.2</td>\r\n      <td>0.24</td>\r\n      <td>0.35</td>\r\n      <td>0.25</td>\r\n    </tr>\r\n    <tr>\r\n      <td>dataobject+map</td>\r\n      <td>40</td>\r\n      <td>0.25</td>\r\n      <td>0.23</td>\r\n      <td>0.3</td>\r\n      <td></td>\r\n      <td></td>\r\n      <td>0.29</td>\r\n      <td>0.29</td>\r\n      <td>0.32</td>\r\n      <td>0.2</td>\r\n    </tr>\r\n  </tbody>\r\n</table>\r\n\r\n* recordclass 0.21, python 3.11, debian/testing linux, x86-64:\r\n\r\n<table>\r\n    <thead>\r\n        <tr>\r\n            <th>id</th>\r\n            <th>size</th>\r\n            <th>new</th>\r\n            <th>getattr</th>\r\n            <th>setattr</th>\r\n            <th>getitem</th>\r\n            <th>setitem</th>\r\n            <th>getkey</th>\r\n            <th>setkey</th>\r\n            <th>iterate</th>\r\n            <th>copy</th>\r\n        </tr>\r\n    </thead>\r\n    <tbody>\r\n        <tr>\r\n            <td>litetuple</td>\r\n            <td>48</td>\r\n            <td>0.11</td>\r\n            <td> </td>\r\n            <td> </td>\r\n            <td>0.11</td>\r\n            <td> </td>\r\n            <td> </td>\r\n            <td> </td>\r\n            <td>0.18</td>\r\n            <td>0.09</td>\r\n        </tr>\r\n        <tr>\r\n            <td>mutabletuple</td>\r\n            <td>48</td>\r\n            <td>0.11</td>\r\n            <td> </td>\r\n            <td> </td>\r\n            <td>0.11</td>\r\n            <td>0.12</td>\r\n            <td> </td>\r\n            <td> </td>\r\n            <td>0.18</td>\r\n            <td>0.08</td>\r\n        </tr>\r\n        <tr>\r\n            <td>tuple</td>\r\n            <td>64</td>\r\n            <td>0.1</td>\r\n            <td> </td>\r\n            <td> </td>\r\n            <td>0.08</td>\r\n            <td> </td>\r\n            <td> </td>\r\n            <td> </td>\r\n            <td>0.17</td>\r\n            <td>0.1</td>\r\n        </tr>\r\n        <tr>\r\n            <td>namedtuple</td>\r\n            <td>64</td>\r\n            <td>0.49</td>\r\n            <td>0.13</td>\r\n            <td> </td>\r\n            <td>0.11</td>\r\n            <td> </td>\r\n            <td> </td>\r\n            <td> </td>\r\n            <td>0.17</td>\r\n            <td>0.13</td>\r\n        </tr>\r\n        <tr>\r\n            <td>class+slots</td>\r\n            <td>56</td>\r\n            <td>0.31</td>\r\n            <td>0.06</td>\r\n            <td>0.06</td>\r\n            <td> </td>\r\n            <td> </td>\r\n            <td> </td>\r\n            <td> </td>\r\n            <td> </td>\r\n            <td> </td>\r\n        </tr>\r\n        <tr>\r\n            <td>dataobject</td>\r\n            <td>40</td>\r\n            <td>0.13</td>\r\n            <td>0.06</td>\r\n            <td>0.06</td>\r\n            <td>0.11</td>\r\n            <td>0.12</td>\r\n            <td> </td>\r\n            <td> </td>\r\n            <td>0.16</td>\r\n            <td>0.12</td>\r\n        </tr>\r\n        <tr>\r\n            <td>dataobject+gc</td>\r\n            <td>56</td>\r\n            <td>0.14</td>\r\n            <td>0.06</td>\r\n            <td>0.06</td>\r\n            <td>0.1</td>\r\n            <td>0.12</td>\r\n            <td> </td>\r\n            <td> </td>\r\n            <td>0.16</td>\r\n            <td>0.14</td>\r\n        </tr>\r\n        <tr>\r\n            <td>dict</td>\r\n            <td>184</td>\r\n            <td>0.2</td>\r\n            <td> </td>\r\n            <td> </td>\r\n            <td> </td>\r\n            <td> </td>\r\n            <td>0.12</td>\r\n            <td>0.13</td>\r\n            <td>0.19</td>\r\n            <td>0.13</td>\r\n        </tr>\r\n        <tr>\r\n            <td>dataobject+map</td>\r\n            <td>40</td>\r\n            <td>0.12</td>\r\n            <td>0.07</td>\r\n            <td>0.06</td>\r\n            <td> </td>\r\n            <td> </td>\r\n            <td>0.15</td>\r\n            <td>0.16</td>\r\n            <td>0.16</td>\r\n            <td>0.12</td>\r\n        </tr>\r\n        <tr>\r\n            <td>class</td>\r\n            <td>56</td>\r\n            <td>0.35</td>\r\n            <td>0.06</td>\r\n            <td>0.06</td>\r\n            <td> </td>\r\n            <td> </td>\r\n            <td> </td>\r\n            <td> </td>\r\n            <td> </td>\r\n            <td> </td>\r\n        </tr>\r\n    </tbody>\r\n</table>\r\n\r\n* recordclas 0.21, python3.12, debian/testing linux, x86-64:\r\n\r\n<table>\r\n    <thead>\r\n        <tr>\r\n            <th>id</th>\r\n            <th>size</th>\r\n            <th>new</th>\r\n            <th>getattr</th>\r\n            <th>setattr</th>\r\n            <th>getitem</th>\r\n            <th>setitem</th>\r\n            <th>getkey</th>\r\n            <th>setkey</th>\r\n            <th>iterate</th>\r\n            <th>copy</th>\r\n        </tr>\r\n    </thead>\r\n    <tbody>\r\n        <tr>\r\n            <td>litetuple</td>\r\n            <td>48</td>\r\n            <td>0.13</td>\r\n            <td> </td>\r\n            <td> </td>\r\n            <td>0.12</td>\r\n            <td> </td>\r\n            <td> </td>\r\n            <td> </td>\r\n            <td>0.19</td>\r\n            <td>0.09</td>\r\n        </tr>\r\n        <tr>\r\n            <td>mutabletuple</td>\r\n            <td>48</td>\r\n            <td>0.13</td>\r\n            <td> </td>\r\n            <td> </td>\r\n            <td>0.11</td>\r\n            <td>0.12</td>\r\n            <td> </td>\r\n            <td> </td>\r\n            <td>0.18</td>\r\n            <td>0.09</td>\r\n        </tr>\r\n        <tr>\r\n            <td>tuple</td>\r\n            <td>64</td>\r\n            <td>0.11</td>\r\n            <td> </td>\r\n            <td> </td>\r\n            <td>0.09</td>\r\n            <td> </td>\r\n            <td> </td>\r\n            <td> </td>\r\n            <td>0.16</td>\r\n            <td>0.09</td>\r\n        </tr>\r\n        <tr>\r\n            <td>namedtuple</td>\r\n            <td>64</td>\r\n            <td>0.52</td>\r\n            <td>0.13</td>\r\n            <td> </td>\r\n            <td>0.11</td>\r\n            <td> </td>\r\n            <td> </td>\r\n            <td> </td>\r\n            <td>0.16</td>\r\n            <td>0.12</td>\r\n        </tr>\r\n        <tr>\r\n            <td>class+slots</td>\r\n            <td>56</td>\r\n            <td>0.34</td>\r\n            <td>0.08</td>\r\n            <td>0.07</td>\r\n            <td> </td>\r\n            <td> </td>\r\n            <td> </td>\r\n            <td> </td>\r\n            <td> </td>\r\n            <td> </td>\r\n        </tr>\r\n        <tr>\r\n            <td>dataobject</td>\r\n            <td>40</td>\r\n            <td>0.14</td>\r\n            <td>0.08</td>\r\n            <td>0.08</td>\r\n            <td>0.11</td>\r\n            <td>0.12</td>\r\n            <td> </td>\r\n            <td> </td>\r\n            <td>0.17</td>\r\n            <td>0.12</td>\r\n        </tr>\r\n        <tr>\r\n            <td>dataobject+gc</td>\r\n            <td>56</td>\r\n            <td>0.15</td>\r\n            <td>0.08</td>\r\n            <td>0.07</td>\r\n            <td>0.12</td>\r\n            <td>0.12</td>\r\n            <td> </td>\r\n            <td> </td>\r\n            <td>0.17</td>\r\n            <td>0.13</td>\r\n        </tr>\r\n        <tr>\r\n            <td>dict</td>\r\n            <td>184</td>\r\n            <td>0.19</td>\r\n            <td> </td>\r\n            <td> </td>\r\n            <td> </td>\r\n            <td> </td>\r\n            <td>0.11</td>\r\n            <td>0.14</td>\r\n            <td>0.2</td>\r\n            <td>0.12</td>\r\n        </tr>\r\n        <tr>\r\n            <td>dataobject+map</td>\r\n            <td>40</td>\r\n            <td>0.14</td>\r\n            <td>0.08</td>\r\n            <td>0.08</td>\r\n            <td> </td>\r\n            <td> </td>\r\n            <td>0.16</td>\r\n            <td>0.17</td>\r\n            <td>0.17</td>\r\n            <td>0.12</td>\r\n        </tr>\r\n        <tr>\r\n            <td>class</td>\r\n            <td>48</td>\r\n            <td>0.41</td>\r\n            <td>0.08</td>\r\n            <td>0.08</td>\r\n            <td> </td>\r\n            <td> </td>\r\n            <td> </td>\r\n            <td> </td>\r\n            <td> </td>\r\n            <td> </td>\r\n        </tr>\r\n    </tbody>\r\n</table>\r\n\r\n\r\nmain repository for `recordclass` is on [github](https://github.com/intellimath/recordclass).\r\n\r\nhere is also a simple [example](https://github.com/intellimath/recordclass/blob/main/examples/what_is_recordclass.ipynb).\r\n\r\nmore examples can be found in the folder [examples](https://github.com/intellimath/recordclass/tree/main/examples).\r\n\r\n## quick start\r\n\r\n### installation\r\n\r\n#### installation from directory with sources\r\n\r\ninstall:\r\n\r\n    >>> python3 setup.py install\r\n\r\nrun tests:\r\n\r\n    >>> python3 test_all.py\r\n\r\n#### installation from pypi\r\n\r\ninstall:\r\n\r\n    >>> pip3 install recordclass\r\n\r\nrun tests:\r\n\r\n    >>> python3 -c \"from recordclass.test import *; test_all()\"\r\n\r\n### quick start with dataobject\r\n\r\n`dataobject` is the base class for creation of data classes with fast instance creation and small memory footprint. they provide `dataclass`-like api.\r\n\r\nfirst load inventory:\r\n\r\n    >>> from recordclass import dataobject, asdict, astuple, as_dataclass, as_record\r\n\r\ndefine class one of the ways:\r\n\r\n    class point(dataobject):\r\n        x: int\r\n        y: int\r\n\r\nor\r\n\r\n    @as_dataclass()\r\n    class point:\r\n        x: int\r\n        y: int\r\n\r\nor\r\n\r\n    @as_record\r\n    def point(x:int, y:int): pass\r\n\r\nor\r\n\r\n    >>> point = make_dataclass(\"point\", [(\"x\",int), (\"y\",int)])\r\n\r\nor\r\n\r\n    >>> point = make_dataclass(\"point\", {\"x\":int, \"y\",int})\r\n\r\nannotations of the fields are defined as a dict in `__annotations__`:\r\n\r\n    >>> print(point.__annotations__)\r\n    {'x': <class 'int'>, 'y': <class 'int'>}\r\n\r\nthere is default text representation:\r\n\r\n    >>> p = point(1, 2)\r\n    >>> print(p)\r\n    point(x=1, y=2)\r\n\r\nthe instances has a minimum memory footprint that is possible for cpython object, which contain only python objects:\r\n\r\n    >>> sys.getsizeof(p) # the output below for python 3.8+ (64bit)\r\n    40\r\n    >>> p.__sizeof__() == sys.getsizeof(p) # no additional space for cyclic gc support\r\n    true\r\n\r\nthe instance is mutable by default:\r\n\r\n    >>> p_id = id(p)\r\n    >>> p.x, p.y = 10, 20\r\n    >>> id(p) == p_id\r\n    true\r\n    >>> print(p)\r\n    point(x=10, y=20)\r\n\r\nthere are functions `asdict` and `astuple` for converting to `dict` and to `tuple`:\r\n\r\n    >>> asdict(p)\r\n    {'x':10, 'y':20}\r\n    >>> astuple(p)\r\n    (10, 20)\r\n\r\nby default subclasses of dataobject are mutable. if one want make it immutable then there is the option `readonly=true`:\r\n\r\n    class point(dataobject, readonly=true):\r\n        x: int\r\n        y: int\r\n\r\n    >>> p = point(1,2)\r\n    >>> p.x = -1\r\n    . . . . . . . . . . . . .\r\n    typeerror: item is readonly\r\n\r\nby default subclasses of dataobject are not iterable by default.\r\nif one want make it iterable then there is the option `iterable=true`:\r\n\r\n    class point(dataobject, iterable=true):\r\n        x: int\r\n        y: int\r\n\r\n    >>> p = point(1,2)\r\n    >>> for x in p: print(x)\r\n    1\r\n    2\r\n\r\ndefault values are also supported::\r\n\r\n    class cpoint(dataobject):\r\n        x: int\r\n        y: int\r\n        color: str = 'white'\r\n\r\nor\r\n\r\n    >>> cpoint = make_dataclass(\"cpoint\", [(\"x\",int), (\"y\",int), (\"color\",str)], defaults=(\"white\",))\r\n\r\n    >>> p = cpoint(1,2)\r\n    >>> print(p)\r\n    point(x=1, y=2, color='white')\r\n\r\nbut\r\n\r\n    class pointinvaliddefaults(dataobject):\r\n        x:int = 0\r\n        y:int\r\n\r\nis not allowed. a fields without default value may not appear after a field with default value.\r\n\r\nthere is an option `copy_default` (starting from 0.21) in order to assign a copy of the default value when creating an instance:\r\n\r\n     class polygon(dataobject, copy_default=true):\r\n        points: list = []\r\n\r\n    >>> pg1 = polygon()\r\n    >>> pg2 = polygon()\r\n    >>> assert pg1.points == pg2.points\r\n    true\r\n    >>> assert id(pg1.points) != id(pg2.points)\r\n    true\r\n\r\na `factory` (starting from 0.21) allows you to setup a factory function to calculate the default value:\r\n\r\n    from recordclass import factory\r\n\r\n    class a(dataobject, copy_default=true):\r\n        x: tuple = factory( lambda: (list(), dict()) )\r\n\r\n    >>> a = a()\r\n    >>> b = a()\r\n    >>> assert a.x == b.x\r\n    true\r\n    >>> assert id(a.x[0]) != id(b.x[0])\r\n    true\r\n    >>> assert id(a.x[1]) != id(b.x[1])\r\n    true\r\n\r\nif someone wants to define a class attribute, then there is a `classvar` trick:\r\n\r\n    class point(dataobject):\r\n        x:int\r\n        y:int\r\n        color:classvar[int] = 0\r\n\r\n    >>> print(point.__fields__)\r\n    ('x', 'y')\r\n    >>> print(point.color)\r\n    0\r\n\r\nif the default value for the `classvar`-attribute is not specified, \r\nit will just be excluded from the `__fields___`.\r\n\r\nstarting with python 3.10 `__match_args__` is specified by default so that `__match_args__` == `__fields`.\r\nuser can define it's own during definition:\r\n\r\n    class user(dataobject):\r\n        first_name: str\r\n        last_name: str\r\n        age: int\r\n        __match_args__ = 'first_name', 'last_name'\r\n\r\nor        \r\n\r\n    from recordclass import match\r\n    class user(dataobject):\r\n        first_name: str\r\n        last_name: str\r\n        _: match\r\n        age: int\r\n\r\nor\r\n\r\n    user = make_dataclass(\"user\", \"first_name last_name * age\")\r\n\r\n### quick start with recordclass\r\n\r\nthe `recordclass` factory function is designed to create classes that support `namedtuple`'s api, can be mutable and immutable, provide fast creation of the instances and have a minimum memory footprint.\r\n\r\nfirst load inventory:\r\n\r\n    >>> from recordclass import recordclass\r\n\r\nexample with `recordclass`:\r\n\r\n    >>> point = recordclass('point', 'x y')\r\n    >>> p = point(1,2)\r\n    >>> print(p)\r\n    point(1, 2)\r\n    >>> print(p.x, p.y)\r\n    1 2\r\n    >>> p.x, p.y = 1, 2\r\n    >>> print(p)\r\n    point(1, 2)\r\n    >>> sys.getsizeof(p) # the output below is for 64bit cpython3.8+\r\n    32\r\n\r\nexample with class statement and typehints:\r\n\r\n    >>> from recordclass import recordclass\r\n\r\n    class point(recordclass):\r\n       x: int\r\n       y: int\r\n\r\n    >>> print(point.__annotations__)\r\n    {'x': <class 'int'>, 'y': <class 'int'>}\r\n    >>> p = point(1, 2)\r\n    >>> print(p)\r\n    point(1, 2)\r\n    >>> print(p.x, p.y)\r\n    1 2\r\n    >>> p.x, p.y = 1, 2\r\n    >>> print(p)\r\n    point(1, 2)\r\n\r\nby default `recordclass`-based class instances doesn't participate in cyclic gc and therefore they are smaller than `namedtuple`-based ones. if one want to use it in scenarios with reference cycles then one have to use option `gc=true` (`gc=false` by default):\r\n\r\n    >>> node = recordclass('node', 'root children', gc=true)\r\n\r\nor\r\n\r\n    class node(recordclass, gc=true):\r\n         root: 'node'\r\n         chilren: list\r\n\r\nthe `recordclass` factory can also specify type of the fields:\r\n\r\n    >>> point = recordclass('point', [('x',int), ('y',int)])\r\n\r\nor\r\n\r\n    >>> point = recordclass('point', {'x':int, 'y':int})\r\n\r\n### using dataobject-based classes with mapping protocol\r\n\r\n    class fastmapingpoint(dataobject, mapping=true):\r\n        x: int\r\n        y: int\r\n\r\nor\r\n\r\n    fastmapingpoint = make_dataclass(\"fastmapingpoint\", [(\"x\", int), (\"y\", int)], mapping=true)\r\n\r\n    >>> p = fastmappingpoint(1,2)\r\n    >>> print(p['x'], p['y'])\r\n    1 2\r\n    >>> sys.getsizeof(p) # the output below for python 3.10 (64bit)\r\n    32\r\n\r\n### using dataobject-based classes for recursive data without reference cycles\r\n\r\nthere is the option `deep_dealloc` (default value is `false`) for deallocation of recursive datastructures.\r\nlet consider simple example:\r\n\r\n    class linkeditem(dataobject):\r\n        val: object\r\n        next: 'linkeditem'\r\n\r\n    class linkedlist(dataobject, deep_dealloc=true):\r\n        start: linkeditem = none\r\n        end: linkeditem = none\r\n\r\n        def append(self, val):\r\n            link = linkeditem(val, none)\r\n            if self.start is none:\r\n                self.start = link\r\n            else:\r\n                self.end.next = link\r\n            self.end = link\r\n\r\nwithout `deep_dealloc=true` deallocation of the instance of `linkedlist` will be failed if the length of the linked list is too large.\r\nbut it can be resolved with `__del__` method for clearing the linked list:\r\n\r\n    def __del__(self):\r\n        curr = self.start\r\n        while curr is not none:\r\n            next = curr.next\r\n            curr.next = none\r\n            curr = next\r\n\r\nthere is builtin more fast deallocation method using finalization mechanizm when `deep_dealloc=true`. in such case one don't need `__del__`  method for clearing the linked list.\r\n\r\n> note that for classes with `gc=true` this method is disabled: the python's cyclic gc is used in these cases.\r\n\r\nfor more details see notebook [example_datatypes](https://github.com/intellimath/recordclass/tree/main/examples/example_datatypes.ipynb).\r\n\r\n### changes:\r\n\r\n#### 0.21.1\r\n\r\n* allow to specify `__match_args__`. for example,\r\n\r\n         class user(dataobject):\r\n             first_name: str\r\n             last_name: str\r\n             age: int\r\n             __match_args__ = 'first_name', 'last_name'\r\n\r\n  or\r\n\r\n          user = make_dataclass(\"user\", \"first_name last_name * age\")\r\n  \r\n* add `@as_record` adapter for `def`-style decalarations of dataclasses\r\n  that are considered as just a struct. for example:\r\n\r\n        @as_record()\r\n        def point(x:float, y:float, meta=none): pass\r\n\r\n        >>> p = point(1,2)\r\n        >>> print(p)\r\n        point(x=1, y=2, meta=none)\r\n\r\n  it's almost equivalent to:\r\n  \r\n        point = make_dataclass('point', [('x':float), ('y',float),'meta'], (none,))\r\n\r\n* the option `fast_new` will be removed in 0.22. it will be always as `fast_new=true` by creation.\r\n\r\n        class point(dataobject):\r\n            x:int\r\n            y:int\r\n\r\n            def __new__(cls, x=0, y=0):\r\n                 return dataobject.__new__(cls, x, y)\r\n* fix issues with `_pyunicodewriter` for python3.13.\r\n\r\n#### 0.21\r\n\r\n* add a new option `copy_default` (default `false`) to allow assigning a copy of the default\r\n  value for the field. for example:\r\n  \r\n       class a(dataobject, copy_default=true):\r\n            l: list = []\r\n\r\n       a = a()\r\n       b = a()\r\n       assert(a.l == b.l)\r\n       assert(id(a.l) != id(b.l))\r\n\r\n* allow to inherit the options: `copy_default`, `gc`, `iterable`. for example:\r\n  \r\n       class base(dataobject, copy_default=true):\r\n          pass\r\n\r\n      class a(base):\r\n            l: list = []\r\n\r\n       a = a()\r\n       b = a()\r\n       assert a.l == b.l\r\n       assert id(a.l) != id(b.l)\r\n\r\n* add `factory` to specify factory function for default values. for example:\r\n\r\n        from recordclass import factory\r\n        class a(dataobject):\r\n            x: tuple = factory(lambda: (list(), dict()))\r\n\r\n        a = a()\r\n        b = a()\r\n        assert a.x == ([],{})\r\n        assert id(a.x) != id(b.x)\r\n        assert id(a.x[0]) != id(b.x[0])\r\n        assert id(a.x[1]) != id(b.x[1])\r\n\r\n        from recordclass import factory\r\n        class a(dataobject, copy_default=true):\r\n            l: list = []\r\n            x: tuple = factory(lambda: (list(), dict()))\r\n\r\n        a = a()\r\n        b = a()\r\n        assert a.x == ([],{})\r\n        assert id(a.x) != id(b.x)\r\n        assert a.l == []\r\n        assert id(a.l) != id(b.l)\r\n\r\n  * recordclass supports python 3.12 (tested on linux/debian 11/12 and windows via appveyor).\r\n  \r\n#### 0.20.1\r\n\r\n* improve row_factory for `sqlite` on the ground of `dataobject`-based classes.\r\n* move recordclass repository to [github](https://github.com/intellimath/recordclass) from [bitbucket](hhtps://bitbucket.org).\r\n\r\n#### 0.20\r\n\r\n* library codebase is compatible with python 3.12\r\n  (tested for linux only, windows until python3.12 support on appveyor).\r\n* fix error with update of readonly attribute via `update` function.\r\n\r\n#### 0.19.2\r\n\r\n* exception message for cls(**kwargs) with invalid kweyword argument is more precise (#37).\r\n* add parameter `immutable_type` for python >= 3.11. if `immutable_type=true` then a generated class\r\n  (not an instance) will be immutable. if class do not contain user defuned `__init__` and `__new__`\r\n  then instance creation will be faster (via vectorcall protocol).\r\n\r\n#### 0.19.1\r\n\r\n* fix regression with `c.attr=value` (with immutable class by default).\r\n\r\n#### 0.19\r\n\r\n* add vectorcall protocal to `litetuple` and `mutabletuple`.\r\n* add vectorcall protocal to `dataobject`.\r\n* now dataobject's `op.__hash__` return `id(op)` by default.\r\n  the option `hashable=true` make dataobject hashably by value.\r\n* now `dataobject`-based classes, `litetuple` and `mutabletuple` are support\r\n  bytecode specializations since python 3.11 for instance creation and for getattr/setattr.\r\n* fix `make` function for cases, when subclass have nontrivial `__init__`.\r\n* note for `dataobject`-based subclasses with non-trivial `__init__` one may want define also `__reduce__`.\r\n  for example:\r\n\r\n      def __reduce__(self):\r\n        from recordclass import dataobject, make\r\n        tp, args = dataobject.__reduce__(self)\r\n        return make, (tp, args)\r\n\r\n\r\n#### 0.18.4\r\n\r\n* fix a bug #35 with duplicating the field name during inheritance and mixing it with class level attributes.\r\n* allow use of classvar to define class level field.\r\n\r\n#### 0.18.3\r\n\r\n* fix bug with a tuple as default value of the field.\r\n* fix defaults propagtion to subclasses.\r\n* fix some issues with pickling in the context of dill.\r\n\r\n#### 0.18.2\r\n\r\n* slightly improve performance in the default `__init__`  when fields have default values or kwargs.\r\n* remove experimental pypy support: slow and difficult to predict memory footprint.\r\n* exclude experimental cython modules.\r\n\r\n#### 0.18.1.1\r\n\r\n* repackage 0.18.1 with `use_cython=0`\r\n\r\n#### 0.18.1\r\n\r\n* allow to initialize fields in the user defined `__init__`  method instead of `__new__`  (issue 29).\r\n  if `__init__`  is defined by user then it's responsible for initialization of all fields.\r\n  note that this feature only work for mutable fields.\r\n  instances of the class with `readonly=true` must be initialized only in the default `__new__`.\r\n  for example:\r\n\r\n        class a(dataobject):\r\n              x:int\r\n              y:int\r\n\r\n              def __init__(self, x, y):\r\n                  self.x = x\r\n                  self.y = y\r\n\r\n* `fast_new=true` by default.\r\n* add `make_row_factory` for `sqlite3` :\r\n\r\n        class planet(dataobject):\r\n            name:str\r\n            radius:int\r\n\r\n        >>> con = sql.connect(\":memory:\")\r\n        >>> cur = con.execute(\"select 'earth' as name, 6378 as radius\")\r\n        >>> cur.row_factory = make_row_factory(planet)\r\n        >>> row = cur.fetchone()\r\n        >>> print(row)\r\n        planet(name='earth', radius=6378)\r\n\r\n#### 0.18.0.1\r\n\r\n* exclude test_dataobject_match.py (for testing `match` statement) for python < 3.10.\r\n\r\n#### 0.18\r\n\r\n* python 3.11 support.\r\n* adapt data object to take benefit from bytecode specialization in 3.11.\r\n* fix issue for argument with default value in `__new__`, which havn't `__repr__`\r\n  that can be interpreted as valid python expression\r\n  for creation of the default value.\r\n* add support for typing.classvar.\r\n* add `py_tpflags_sequence`  and `py_tpflags_mapping`.\r\n* add `__match_args__`  to support match protocol for dataobject-based subclasses.\r\n\r\n#### 0.17.5\r\n\r\n* make to compile, to build and to test successfully for python 3.11.\r\n\r\n#### 0.17.4\r\n\r\n* fixed error with missing `_pyobject_gc_malloc` in 3.11.\r\n\r\n#### 0.17.3\r\n\r\n* fix compatibility issue: restore gnu98 c-syntax.\r\n* fix remained issues with use of \"py_size(op)\" and \"py_type(op)\" as l-value.\r\n\r\n#### 0.17.2\r\n\r\n* add support for python 3.10.\r\n* there are no use of \"py_size(op)\" and \"py_type(op)\" as l-value.\r\n\r\n#### 0.17.1\r\n\r\n* fix packaging issue with cython=1 in setup.py\r\n\r\n#### 0.17\r\n\r\n* now recordclass library may be compiled for pypy3, but there is still no complete runtime compatibility with pypy3.\r\n* slighly imporove performance of `litetuple` / `mutabletuple`.\r\n* slighly imporove performance of `dataobject`-based subclasses.\r\n* add adapter `as_dataclass`. for example:\r\n\r\n        @as_dataclass()\r\n        class point:\r\n            x:int\r\n            y:int\r\n\r\n* module _litelist is implemented in pure c.\r\n* make dataobject.__copy__ faster.\r\n\r\n#### 0.16.3\r\n\r\n* add possibility for recordclasses to assighn values by key:\r\n\r\n        a = recordclass(\"a\", \"x y\", mapping=true)\r\n        a = a(1,2)\r\n        a['x'] = 100\r\n        a['y'] = 200\r\n\r\n#### 0.16.2\r\n\r\n* fix the packaging bug in 0.16.1.\r\n\r\n#### 0.16.1\r\n\r\n* add `dictclass` factory function to generate class with `dict-like` api and without attribute access to the fields.\r\n  features: fast instance creation, small memory footprint.\r\n\r\n#### 0.16\r\n\r\n* `recordclass` started to be a direct subclass of dataobject with `sequence=true` and support\r\n  of `namedtuple`-like api.\r\n  insted of `recordclass(name, fields, **kw)` for class creation\r\n  use factory function `recordclass(name, fields, **kw)`\r\n  (it allows to specify types).\r\n* add option api='dict'  to `make_dataclass` for creating class that support dict-like api.\r\n* now one can't remove dataobject's property from it's class using del or builting delattr.\r\n  for example:\r\n\r\n        >>> point = make_dataclass(\"point\", \"x y\")\r\n        >>> del point.x\r\n        ...........\r\n        attributeerror: attribute x of the class point can't be deleted\r\n\r\n* now one can't delete field's value using del or builting delattr.\r\n  for example:\r\n\r\n        >>> p = point(1, 2)\r\n        >>> del p.x\r\n        ...........\r\n        attributeerror: the value can't be deleted\"\r\n  insted one can use assighnment to none:\r\n\r\n        >>> p = point(1, 2)\r\n        >>> p.x = none\r\n\r\n* slightly improve performance of the access by index of dataobject-based classes with option `sequence=true`.\r\n\r\n\r\n#### 0.15.1\r\n\r\n* options `readonly` and `iterable` now can be sspecified via keyword arguments in class statement.\r\n  for example:\r\n\r\n        class point(dataobject, readonly=true, iterable=true):\r\n             x:int\r\n             y:int\r\n\r\n* add `update(cls, **kwargs)` function to update attribute values.`\r\n\r\n\r\n#### 0.15\r\n\r\n* now library supports only python >= 3.6\r\n* 'gc' and 'fast_new' options now can be specified as kwargs in class statement.\r\n* add a function `astuple(ob)` for transformation dataobject instance `ob` to a tuple.\r\n* drop datatuple based classes.\r\n* add function `make(cls, args, **kwargs)` to create instance of the class `cls`.\r\n* add function `clone(ob, **kwargs)` to clone dataobject instance `ob`.\r\n* make structclass as alias of make_dataclass.\r\n* add option 'deep_dealloc' (@clsconfig(deep_dealloc=true)) for deallocation\r\n  instances of dataobject-based recursive subclasses.\r\n\r\n#### 0.14.3:\r\n\r\n* subclasses of `dataobject` now support iterable and hashable protocols by default.\r\n\r\n#### 0.14.2:\r\n\r\n* fix compilation issue for python 3.9.\r\n\r\n#### 0.14.1:\r\n\r\n* fix issue with __hash__ when subclassing recordclass-based classes.\r\n\r\n#### 0.14:\r\n\r\n* add __doc__ to generated  `dataobject`-based class in order to support `inspect.signature`.\r\n* add `fast_new` argument/option for fast instance creation.\r\n* fix refleak in `litelist`.\r\n* fix sequence protocol ability for `dataobject`/`datatuple`.\r\n* fix typed interface for `structclass`.\r\n\r\n#### 0.13.2\r\n\r\n* fix issue #14 with deepcopy of dataobjects.\r\n\r\n#### 0.13.1\r\n\r\n* restore ``join_classes` and add new function `join_dataclasses`.\r\n\r\n#### 0.13.0.1\r\n\r\n* remove redundant debug code.\r\n\r\n\r\n#### 0.13\r\n\r\n* make `recordclass` compiled and work with cpython 3.8.\r\n* move repository to **git** instead of mercurial since bitbucket will drop support of mercurial repositories.\r\n* fix some potential reference leaks.\r\n\r\n\r\n#### 0.12.0.1\r\n\r\n* fix missing .h files.\r\n\r\n#### 0.12\r\n\r\n* `clsconfig` now become the main decorator for tuning dataobject-based classes.\r\n* fix concatenation of mutabletuples (issue `#10`).\r\n\r\n#### 0.11.1:\r\n\r\n* `dataobject` instances may be deallocated faster now.\r\n\r\n#### 0.11:\r\n\r\n* rename `memoryslots` to `mutabletuple`.\r\n* `mutabletuple` and `immutabletuple` dosn't participate in cyclic garbage collection.\r\n* add `litelist` type for list-like objects, which doesn't participate in cyglic garbage collection.\r\n\r\n#### 0.10.3:\r\n\r\n* introduce dataclassstorage and recordclassstorage.\r\n  they allow cache classes and used them without creation of new one.\r\n* add `iterable` decorator and argument. now dataobject with fields isn't iterable by default.\r\n* move `astuple` to `dataobject.c`.\r\n\r\n#### 0.10.2\r\n\r\n* fix error with dataobject's `__copy__`.\r\n* fix error with pickling of recordclasses and structclasses, which was appeared since 0.8.5\r\n  (thanks to connor wolf).\r\n\r\n#### 0.10.1\r\n\r\n* now by default sequence protocol is not supported by default if dataobject has fields,\r\n  but iteration is supported.\r\n* by default argsonly=false for usability reasons.\r\n\r\n#### 0.10\r\n\r\n* invent new factory function `make_class` for creation of different kind of dataobject classes\r\n  without gc support by default.\r\n* invent new metaclass `datatype` and new base class `dataobject` for creation dataobject class using\r\n  `class` statement.\r\n  it have disabled gc support, but could be enabled by decorator `dataobject.enable_gc`.\r\n  it support type hints (for python >= 3.6) and default values.\r\n  it may not specify sequence of field names in `__fields__` when type hints are applied to all\r\n  data attributes (for python >= 3.6).\r\n* now `recordclass`-based classes may not support cyclic garbage collection too.\r\n  this reduces the memory footprint by the size of `pygc_head`.\r\n  now by default recordclass-based classes doesn't support cyclic garbage collection.\r\n\r\n#### 0.9\r\n\r\n* change version to 0.9 to indicate a step forward.\r\n* cleanup `dataobject.__cinit__`.\r\n\r\n#### 0.8.5\r\n\r\n* make `arrayclass`-based objects support setitem/getitem and `structclass`-based objects able\r\n  to not support them. by default, as before `structclass`-based objects support setitem/getitem protocol.\r\n* now only instances of `dataobject` are comparable to 'arrayclass'-based and `structclass`-based instances.\r\n* now generated classes can be hashable.\r\n\r\n\r\n#### 0.8.4\r\n\r\n* improve support for readonly mode for structclass and arrayclass.\r\n* add tests for arrayclass.\r\n\r\n#### 0.8.3\r\n\r\n* add typehints support to structclass-based classes.\r\n\r\n\r\n#### 0.8.2\r\n\r\n* remove `usedict`, `gc`, `weaklist` from the class `__dict__`.\r\n\r\n#### 0.8.1\r\n\r\n* remove cython dependence by default for building `recordclass` from the sources [issue #7].\r\n\r\n#### 0.8\r\n\r\n* add `structclass` factory function. it's analog of `recordclass` but with less memory\r\n  footprint for it's instances (same as for instances of classes with `__slots__`) in the camparison\r\n  with `recordclass` and `namedtuple`\r\n  (it currently implemented with `cython`).\r\n* add `arrayclass` factory function which produce a class for creation fixed size array.\r\n  the benefit of such approach is also less memory footprint\r\n  (it currently currently implemented with `cython`).\r\n* `structclass` factory has argument `gc` now. if `gc=false` (by default) support of cyclic garbage collection\r\n  will switched off for instances of the created class.\r\n* add function `join(c1, c2)` in order to join two `structclass`-based classes c1 and c2.\r\n* add `sequenceproxy` function for creation of immutable and hashable proxy object from class instances,\r\n  which implement access by index\r\n  (it currently currently implemented with `cython`).\r\n* add support for access to recordclass object attributes by idiom: `ob['attrname']` (issue #5).\r\n* add argument `readonly` to recordclass factory to produce immutable namedtuple.\r\n  in contrast to `collection.namedtuple` it use same descriptors as for\r\n  regular recordclasses for performance increasing.\r\n\r\n#### 0.7\r\n\r\n* make mutabletuple objects creation faster. as a side effect: when number of fields >= 8\r\n  recordclass instance creation time is not biger than creation time of instaces of\r\n  dataclasses with `__slots__`.\r\n* recordclass factory function now create new recordclass classes in the same way as namedtuple in 3.7\r\n  (there is no compilation of generated python source of class).\r\n\r\n#### 0.6\r\n\r\n* add support for default values in recordclass factory function in correspondence\r\n  to same addition to namedtuple in python 3.7.\r\n\r\n#### 0.5\r\n\r\n* change version to 0.5\r\n\r\n#### 0.4.4\r\n\r\n* add support for default values in recordclass (patches from pedro von hertwig)\r\n* add tests for recorclass (adopted from python tests for namedtuple)\r\n\r\n#### 0.4.3\r\n\r\n* add support for typing for python 3.6 (patches from vladimir bolshakov).\r\n* resolve memory leak issue.\r\n\r\n#### 0.4.2\r\n\r\n* fix memory leak in property getter/setter\r\n\r\n\r\n",
  "docs_url": null,
  "keywords": "namedtuple,recordclass,dataclass,dataobject",
  "license": "mit license",
  "name": "recordclass",
  "package_url": "https://pypi.org/project/recordclass/",
  "project_url": "https://pypi.org/project/recordclass/",
  "project_urls": {
    "Download": "https://pypi.org/project/recordclass/#files",
    "Homepage": "https://github.com/intellimath/recordclass"
  },
  "release_url": "https://pypi.org/project/recordclass/0.21.1/",
  "requires_dist": [],
  "requires_python": "",
  "summary": "mutable variant of namedtuple -- recordclass, which support assignments, compact dataclasses and other memory saving variants.",
  "version": "0.21.1",
  "releases": [],
  "developers": [
    "szport@gmail.com",
    "zaur_shibzukhov"
  ],
  "kwds": "recordclasses what_is_recordclass recordclass dataclasses namedtuple",
  "license_kwds": "mit license",
  "libtype": "pypi",
  "id": "pypi_recordclass",
  "homepage": "https://github.com/intellimath/recordclass",
  "release_count": 58,
  "dependency_ids": [],
  "documentation_summary": "The GitHub repository \"intellimath/recordclass\" introduces a mutable variant of namedtuple called recordclass, designed for Python. It supports assignments, creating compact dataclasses, and other memory-efficient variants. The library aims to provide fast, mutable alternatives to namedtuple and dataclasses that do not participate in cyclic garbage collection by default, thus saving memory. It includes features like compact array classes, light list and tuple variants, and supports type hints and default values. The recordclass library is MIT Licensed and offers a range of functionalities including mutable and immutable types, fast instance creation, and small memory footprints for objects. It's suitable for scenarios where limiting object size is crucial and reference cycles are not a concern. The library has been tested on various Python versions and platforms, demonstrating improved performance and reduced memory usage compared to standard Python data structures.",
  "embedding": [
    -0.018245767802000046,
    0.013838646002113819,
    -0.01682457886636257,
    -0.02242320030927658,
    -0.006596325896680355,
    0.008268734440207481,
    -0.00475882925093174,
    -0.0027400951366871595,
    -0.020269883796572685,
    -0.026198681443929672,
    0.005839076358824968,
    0.017039909958839417,
    -0.0014857882633805275,
    0.02871088497340679,
    0.0058175427839159966,
    -0.009374103508889675,
    0.01658053509891033,
    -0.03000287525355816,
    0.006266150623559952,
    0.001052433392032981,
    0.0364341139793396,
    0.020643126219511032,
    -0.03247201070189476,
    -0.006111829541623592,
    0.0074002305045723915,
    0.009697101078927517,
    0.015274190343916416,
    -0.009079817682504654,
    0.023456793278455734,
    0.017312662675976753,
    0.03531438857316971,
    -0.005910853389650583,
    -0.01619293913245201,
    -0.02957221120595932,
    -0.02338501624763012,
    -0.009388458915054798,
    0.009130061604082584,
    -0.004270744044333696,
    0.018001724034547806,
    0.010716337710618973,
    0.016149872913956642,
    0.00879270862787962,
    -0.005831898655742407,
    0.005261269398033619,
    -0.011699685826897621,
    0.03120873123407364,
    0.00869939848780632,
    -0.01524547953158617,
    -0.014771750196814537,
    0.0010739665012806654,
    0.03296009451150894,
    0.05101924017071724,
    -0.005157192703336477,
    -0.011900661513209343,
    -0.0018285245168954134,
    -0.022494977340102196,
    0.026887742802500725,
    0.03807063400745392,
    -0.03841516375541687,
    -0.012352857738733292,
    0.021619295701384544,
    -0.005261269398033619,
    -0.02608383819460869,
    -0.033074937760829926,
    -0.012374390847980976,
    -0.0038903248496353626,
    -0.03097904473543167,
    0.006485071033239365,
    -0.01850416511297226,
    0.029457367956638336,
    0.024562161415815353,
    0.036319270730018616,
    0.0036157770082354546,
    0.01420470979064703,
    0.02232271246612072,
    -0.013214184902608395,
    -0.004001579713076353,
    0.02473442628979683,
    -0.0009174025035463274,
    0.01469279546290636,
    -0.0004338035359978676,
    -0.00874964240938425,
    -0.0016122956294566393,
    0.02199253812432289,
    0.032156191766262054,
    0.016695380210876465,
    0.004539908841252327,
    0.008864485658705235,
    0.0034740171395242214,
    -0.018432388082146645,
    0.023370660841464996,
    0.014944015070796013,
    0.027749070897698402,
    0.02763422578573227,
    -0.006366638466715813,
    0.030404826626181602,
    -0.0011870156740769744,
    0.02184898406267166,
    0.0166236013174057,
    -0.021533163264393806,
    -0.005752943456172943,
    0.026586279273033142,
    -0.020470861345529556,
    -0.01846109889447689,
    -0.029830608516931534,
    -0.02314097248017788,
    -0.0032443299423903227,
    0.0249354038387537,
    0.0001395169529132545,
    0.019006606191396713,
    -0.013580248691141605,
    0.03987941890954971,
    0.003761125961318612,
    -0.019408557564020157,
    0.0017666165949776769,
    -0.0033591734245419502,
    0.01524547953158617,
    -0.01942291297018528,
    -0.008979328908026218,
    -0.013321850448846817,
    0.008318978361785412,
    0.03445306047797203,
    0.02836635336279869,
    -0.02131783217191696,
    0.018389321863651276,
    0.004902383778244257,
    -0.03227103501558304,
    0.00209589465521276,
    0.011943727731704712,
    -0.009876544587314129,
    0.01241745799779892,
    0.0044573647901415825,
    -0.012805054895579815,
    -0.009187483228743076,
    0.0005755635211244226,
    0.002688056556507945,
    0.006075941026210785,
    0.02734711766242981,
    -0.022308357059955597,
    -0.007044933270663023,
    -0.02634223736822605,
    0.030089007690548897,
    -0.013910423964262009,
    0.02039908431470394,
    -0.033850133419036865,
    0.00343633396551013,
    -0.007515074219554663,
    0.011685330420732498,
    0.01091731432825327,
    0.00328021845780313,
    0.019164515659213066,
    -0.0032784240320324898,
    -0.009754522703588009,
    0.01666666939854622,
    -0.011182889342308044,
    0.004597330465912819,
    -0.013946312479674816,
    0.005164370406419039,
    -0.028294576331973076,
    -0.0005589650245383382,
    0.0006679766811430454,
    0.01442004181444645,
    -0.016537468880414963,
    -0.009058283641934395,
    0.003804192179813981,
    0.03594602644443512,
    0.004755240399390459,
    -0.03672122210264206,
    -0.01007752027362585,
    0.021030722185969353,
    -0.0017639249563217163,
    0.023112261667847633,
    -0.030031586065888405,
    -0.008232845924794674,
    0.017901236191391945,
    0.028337642550468445,
    0.02624174766242504,
    -0.003167169401422143,
    -0.020714903250336647,
    0.003186908084899187,
    0.025150734931230545,
    -0.0024153031408786774,
    0.008153891190886497,
    0.03034740500152111,
    -0.010673271492123604,
    0.007917026057839394,
    0.028107956051826477,
    0.012403102591633797,
    0.0006966875516809523,
    0.03666380047798157,
    0.020872812718153,
    0.023944877088069916,
    -0.0054407124407589436,
    -0.016307782381772995,
    -0.5843239426612854,
    0.0011762490030378103,
    -0.023026129230856895,
    -0.02685903199017048,
    0.013608959503471851,
    0.002217915840446949,
    0.006808068603277206,
    0.02115992270410061,
    -0.015259834937751293,
    0.033993687480688095,
    -0.012948608957231045,
    0.028136666864156723,
    0.02009761892259121,
    -0.008175424300134182,
    -0.04343956708908081,
    -0.02681596577167511,
    0.0084840664640069,
    -0.03425208479166031,
    -0.013400805182754993,
    0.008132358081638813,
    -0.012998852878808975,
    0.023327594622969627,
    -0.023844389244914055,
    0.021231699734926224,
    -0.005867787171155214,
    0.01758541725575924,
    -0.011663797311484814,
    0.008534310385584831,
    -0.010745048522949219,
    0.002716767368838191,
    -0.027088720351457596,
    0.0002451640320941806,
    0.014714328572154045,
    -0.00971145648509264,
    0.05644559860229492,
    0.013982200995087624,
    -0.016221649944782257,
    0.051191508769989014,
    0.027117431163787842,
    0.030462248250842094,
    -0.002359675941988826,
    -0.01724088564515114,
    -0.013687914237380028,
    0.00847688876092434,
    -0.006499426439404488,
    -0.012525123544037342,
    -0.015073214657604694,
    0.03451048210263252,
    0.0024763138499110937,
    -0.05213896557688713,
    0.003197674872353673,
    -0.004155900329351425,
    0.010989091359078884,
    -0.010960380546748638,
    0.019064027816057205,
    -0.01590583100914955,
    0.022193513810634613,
    0.019537756219506264,
    -0.0023076373618096113,
    -0.03942004591226578,
    -0.024763137102127075,
    0.0051248930394649506,
    0.01510192546993494,
    -0.037812236696481705,
    0.0012713539181277156,
    0.0043855877593159676,
    -0.01333620585501194,
    0.015819696709513664,
    -0.005092593375593424,
    -0.03927649185061455,
    -0.007407408207654953,
    0.013853001408278942,
    -0.006456360220909119,
    -0.016451336443424225,
    0.013544360175728798,
    0.04622452333569527,
    0.0074720075353980064,
    -0.0171547532081604,
    0.000690407061483711,
    0.03387884423136711,
    0.016451336443424225,
    -0.024921048432588577,
    -0.004048234783113003,
    -0.011398221366107464,
    0.022983063012361526,
    -0.0038113698828965425,
    0.007866782136261463,
    -0.01946597918868065,
    -0.007924203760921955,
    -0.004970571957528591,
    0.02324146032333374,
    0.019121449440717697,
    0.01126184407621622,
    -0.02579673007130623,
    0.0020348839461803436,
    0.022624177858233452,
    -0.02344243787229061,
    -0.004719351883977652,
    -0.026586279273033142,
    -0.015345968306064606,
    -0.002268159994855523,
    -0.017068620771169662,
    -0.00084697111742571,
    0.0015028354246169329,
    -0.017226530238986015,
    0.010666093789041042,
    -0.0034704282879829407,
    0.012955786660313606,
    0.016838934272527695,
    -0.0038113698828965425,
    0.004812662024050951,
    -0.06092449650168419,
    -0.0013718419941142201,
    0.030376115813851357,
    -0.017599772661924362,
    -0.03695090860128403,
    0.06345105171203613,
    0.017183464020490646,
    0.009115706197917461,
    0.021131211891770363,
    0.003495550248771906,
    -0.006438415963202715,
    0.01971002295613289,
    0.019753089174628258,
    0.0015548738883808255,
    0.0070808217860758305,
    0.011024979874491692,
    0.008900374174118042,
    -0.01452052965760231,
    -0.007629917468875647,
    0.036462824791669846,
    0.020183751359581947,
    0.026457080617547035,
    -0.004812662024050951,
    0.033218491822481155,
    -0.017743326723575592,
    0.0368073545396328,
    -0.010931669734418392,
    -0.014348264783620834,
    -0.01391760166734457,
    -0.005289980676025152,
    0.010981913655996323,
    0.009704278782010078,
    -0.03870227187871933,
    -0.023715190589427948,
    -0.011678152717649937,
    -0.00874964240938425,
    -0.0070305778644979,
    -0.017915591597557068,
    -0.0010111614828929305,
    -0.0024117142893373966,
    0.010350273922085762,
    -0.011154178529977798,
    0.02077232487499714,
    -0.004432242829352617,
    -0.024777494370937347,
    -0.03097904473543167,
    -0.01792994700372219,
    -0.03798450157046318,
    -0.0008783736266195774,
    0.01579098589718342,
    0.01850416511297226,
    -0.008799886330962181,
    0.014915304258465767,
    -0.005720643792301416,
    -0.01995406486093998,
    -0.029299458488821983,
    0.024404251947999,
    0.004091301001608372,
    -0.03396497666835785,
    0.01350847166031599,
    -0.020556993782520294,
    -0.008232845924794674,
    -0.02136089839041233,
    0.004902383778244257,
    0.019681312143802643,
    -0.018575942143797874,
    0.007816538214683533,
    -0.013486937619745731,
    -0.02816537767648697,
    -0.037467703223228455,
    0.014728683978319168,
    -0.026471436023712158,
    -0.019193226471543312,
    0.0122954361140728,
    0.0010425640502944589,
    0.005074648652225733,
    -0.009122883901000023,
    -0.005275625269860029,
    0.027806492522358894,
    0.014118577353656292,
    0.011915016919374466,
    -0.03169681504368782,
    0.025624465197324753,
    0.0022304768208414316,
    0.005925208795815706,
    0.009869366884231567,
    -0.0029895207844674587,
    0.018432388082146645,
    0.04487511143088341,
    -0.010307207703590393,
    0.02753373794257641,
    0.002334553748369217,
    -0.028208443894982338,
    0.02082974649965763,
    -0.018977895379066467,
    0.027318406850099564,
    -0.004012346267700195,
    0.0014857882633805275,
    0.0059646861627697945,
    0.03330462798476219,
    0.01556129939854145,
    -0.0215905848890543,
    -0.02846684120595455,
    0.020844101905822754,
    0.023413727059960365,
    0.011290555819869041,
    0.030663223937153816,
    -0.00635228306055069,
    -0.000974375638179481,
    0.019824866205453873,
    0.020700547844171524,
    0.013989378698170185,
    0.018575942143797874,
    0.007317686919122934,
    -0.008369223214685917,
    0.02232271246612072,
    -0.0103430962190032,
    -0.0060544079169631,
    -0.045391909778118134,
    -0.0008402419625781476,
    -0.0028818550053983927,
    0.027189208194613457,
    -0.017413152381777763,
    0.027648581191897392,
    -0.021088145673274994,
    0.05417744070291519,
    -0.02276773191988468,
    0.026902098208665848,
    0.002557063242420554,
    -0.009682745672762394,
    0.005835487507283688,
    -0.000665733648929745,
    -0.030892912298440933,
    0.010960380546748638,
    -0.009725811891257763,
    0.03956359997391701,
    0.010838358663022518,
    -0.0003315210051368922,
    0.02726098522543907,
    0.01197961624711752,
    0.005261269398033619,
    -0.0059790415689349174,
    0.009000862017273903,
    0.009610968641936779,
    -0.009223371744155884,
    -0.005106948781758547,
    0.02526557818055153,
    0.008584554307162762,
    0.014089866541326046,
    -0.009137239307165146,
    -0.006513781845569611,
    -0.0005284597282297909,
    0.003954924177378416,
    0.03784094750881195,
    -0.01831754483282566,
    0.0022645709104835987,
    -0.017901236191391945,
    0.011850417591631413,
    0.000910224742256105,
    -0.013888890855014324,
    -0.019982775673270226,
    -0.04168820381164551,
    -0.008232845924794674,
    0.009984210133552551,
    0.0005558247794397175,
    0.022394489496946335,
    0.017169108614325523,
    0.001826730091124773,
    -0.01225236989557743,
    0.009130061604082584,
    -0.05478036776185036,
    0.02401665411889553,
    0.04720069468021393,
    0.005261269398033619,
    -0.017082976177334785,
    -0.021576229482889175,
    0.004755240399390459,
    -0.01676715724170208,
    0.026600634679198265,
    0.026729833334684372,
    0.019494690001010895,
    0.015719208866357803,
    0.026356592774391174,
    -0.002914154902100563,
    0.012374390847980976,
    0.06098191812634468,
    -0.012998852878808975,
    -0.024921048432588577,
    -0.007931381464004517,
    0.0012300820089876652,
    -0.0014552829088643193,
    0.019509045407176018,
    0.04263566434383392,
    0.038874536752700806,
    0.02014068514108658,
    -0.009316681884229183,
    0.008412289433181286,
    -0.0012363624991849065,
    -0.009115706197917461,
    0.01374533586204052,
    -0.01627907156944275,
    -0.014664084650576115,
    -0.0008267837692983449,
    0.008369223214685917,
    -0.007680161856114864,
    0.025452198460698128,
    0.019107094034552574,
    -0.006223084405064583,
    -0.005724232643842697,
    -0.01251794584095478,
    -0.013400805182754993,
    -0.05538329482078552,
    0.018274478614330292,
    0.03425208479166031,
    0.04435831680893898,
    -0.025251222774386406,
    0.012503590434789658,
    -0.04458800330758095,
    -0.008728109300136566,
    -0.027749070897698402,
    -0.012654322199523449,
    0.03161068260669708,
    -0.016982488334178925,
    -0.005752943456172943,
    -0.0005840870435349643,
    0.007888315245509148,
    0.008462533354759216,
    -0.004565030802041292,
    0.007335631176829338,
    -0.03353431448340416,
    0.008153891190886497,
    -0.009654034860432148,
    -0.02473442628979683,
    0.020040197297930717,
    0.0045327311381697655,
    0.029974164441227913,
    0.01682457886636257,
    0.008304622955620289,
    -0.014161643572151661,
    0.015690498054027557,
    0.014089866541326046,
    0.011419754475355148,
    -0.016939422115683556,
    0.003167169401422143,
    0.008641975931823254,
    0.02299741841852665,
    0.010572783648967743,
    -0.019824866205453873,
    0.016451336443424225,
    0.019537756219506264,
    0.0065568480640649796,
    -0.005390468519181013,
    -0.009008039720356464,
    0.009697101078927517,
    -0.001345822704024613,
    0.014585128985345364,
    0.02395923249423504,
    0.00806775875389576,
    -0.012374390847980976,
    0.01384582370519638,
    0.010149297304451466,
    0.003486578119918704,
    -0.015044503845274448,
    -0.007873959839344025,
    0.0018446743488311768,
    -0.03634798154234886,
    -0.01666666939854622,
    -0.0034237729851156473,
    -0.012525123544037342,
    0.017470574006438255,
    -0.022782087326049805,
    0.0105297164991498,
    -0.015202413313090801,
    -0.030404826626181602,
    -0.026169970631599426,
    0.00641329400241375,
    0.0028172554448246956,
    0.007005455903708935,
    0.019968420267105103,
    0.0007267442415468395,
    0.00833333469927311,
    -0.0343095064163208,
    0.02391616627573967,
    -0.011347977444529533,
    -0.02199253812432289,
    -0.016106806695461273,
    -0.019193226471543312,
    0.025150734931230545,
    0.0019559289794415236,
    0.011046512983739376,
    -0.00035866175312548876,
    -0.0073858750984072685,
    -0.012130348943173885,
    0.007195665501058102,
    -0.028524264693260193,
    -0.005293569527566433,
    -0.041286252439022064,
    0.013465404510498047,
    0.003221002407371998,
    -0.017815103754401207,
    -0.00755096273496747,
    0.006998278200626373,
    0.05601493641734123,
    -0.008692220784723759,
    -0.006937267724424601,
    0.03763996809720993,
    -0.010472294874489307,
    -0.005401235073804855,
    0.03227103501558304,
    -0.00826155673712492,
    0.016882000491023064,
    -0.01856158673763275,
    -0.0033466124441474676,
    0.0037431814707815647,
    0.016063740476965904,
    -0.006761413533240557,
    -0.020858457311987877,
    0.01579098589718342,
    -0.01748492941260338,
    -0.0012919898144900799,
    0.04435831680893898,
    -0.018145279958844185,
    0.01152024231851101,
    0.044817689806222916,
    -0.024720070883631706,
    0.015475166961550713,
    0.0026414014864712954,
    0.0005522359278984368,
    0.03875969350337982,
    -0.018202701583504677,
    0.002138960873708129,
    0.007665805984288454,
    -0.015733564272522926,
    0.0014705356443300843,
    -0.014814816415309906,
    0.0063415165059268475,
    0.022724665701389313,
    -0.024418607354164124,
    0.03850129619240761,
    -0.006642980966717005,
    -0.01981051079928875,
    -0.018863052129745483,
    -0.006657336372882128,
    0.019250648096203804,
    0.022624177858233452,
    -0.005085415672510862,
    -0.013156763277947903,
    0.008110824972391129,
    -0.012697388418018818,
    0.011039335280656815,
    0.0005360860377550125,
    -0.013623314909636974,
    0.002863910747691989,
    -0.011391043663024902,
    0.002291487529873848,
    0.009532013908028603,
    -0.015633076429367065,
    -0.016035029664635658,
    -0.01909273862838745,
    -0.007098766043782234,
    0.013458226807415485,
    0.013128052465617657,
    0.022250935435295105,
    0.014900948852300644,
    0.00230045965872705,
    0.01246770191937685,
    -0.01870514079928398,
    0.017556706443428993,
    0.02072925865650177,
    0.007378697395324707,
    -0.004055412486195564,
    0.020987655967473984,
    -0.010178009048104286,
    0.027031298726797104,
    0.022049959748983383,
    0.025983350351452827,
    0.00043245768756605685,
    0.0073715196922421455,
    -0.0051536038517951965,
    -0.002074361313134432,
    -0.007809360511600971,
    -0.019250648096203804,
    -0.02091587893664837,
    -0.003285601967945695,
    -0.004098478704690933,
    -0.0027418895624578,
    -0.004859317094087601,
    0.014362620189785957,
    0.01613551750779152,
    0.0040231128223240376,
    0.022150447592139244,
    -0.02924203686416149,
    -0.032012637704610825,
    -0.023858744651079178,
    0.008828597143292427,
    0.023743901401758194,
    0.02144703082740307,
    -0.03973586484789848,
    -0.022882575169205666,
    0.004227677825838327,
    -0.028423774987459183,
    0.022437555715441704,
    -0.0023919756058603525,
    0.00879270862787962,
    0.0009061872842721641,
    0.02097330056130886,
    0.00263242912478745,
    0.03405110910534859,
    -0.005250502843409777,
    0.029356880113482475,
    -0.03367786854505539,
    -0.018331900238990784,
    -0.000744239951018244,
    -0.016551824286580086,
    0.028294576331973076,
    0.010852714069187641,
    0.03238587826490402,
    0.006818835157901049,
    0.01007752027362585,
    -0.017341373488307,
    -0.04286535084247589,
    0.024763137102127075,
    0.010099053382873535,
    -0.012474879622459412,
    -0.008634798228740692,
    -0.03175423666834831,
    -0.013680736534297466,
    0.0055591450072824955,
    0.002951837843284011,
    0.02463393844664097,
    0.01292707584798336,
    -0.023169683292508125,
    -0.0024655472952872515,
    0.014757394790649414,
    -0.02701694332063198,
    0.04364054650068283,
    0.012360035441815853,
    0.017700260505080223,
    0.04369796812534332,
    -0.014714328572154045,
    -0.014405686408281326,
    -0.025825440883636475,
    0.01442004181444645,
    -0.01899225078523159,
    0.030232561752200127,
    0.017556706443428993,
    -0.026945164427161217,
    -0.011398221366107464,
    0.005810365080833435,
    -0.004389176610857248,
    -0.0036785821430385113,
    -0.01092449203133583,
    0.017657194286584854,
    0.01836061105132103,
    0.005853431764990091,
    -0.04542062059044838,
    0.005157192703336477,
    -0.03792707994580269,
    -0.004934683442115784,
    -0.01080247014760971,
    -0.008161068893969059,
    0.024921048432588577,
    0.001977462088689208,
    -0.04332472383975983,
    0.0166236013174057,
    0.005307924933731556,
    0.032213613390922546,
    0.008864485658705235,
    -0.024131499230861664,
    0.006696813739836216,
    -0.03290267288684845,
    -0.012884009629487991,
    -0.008218490518629551,
    0.013250073418021202,
    0.021576229482889175,
    -0.003398651024326682,
    -0.01946597918868065,
    0.02938559092581272,
    -0.010709160007536411,
    0.0027185617946088314,
    -0.006230262108147144,
    -0.02449038438498974,
    0.03804192319512367,
    -0.051966700702905655,
    -0.025911573320627213,
    -0.0048054843209683895,
    -0.010508183389902115,
    -0.004159489180892706,
    -0.02779213711619377,
    -0.014513351954519749,
    -0.01566178724169731,
    0.02411714382469654,
    -0.009460236877202988,
    0.02207867056131363,
    -0.012726099230349064,
    0.0009322065161541104,
    0.003840080928057432,
    0.004482486750930548,
    0.010350273922085762,
    -0.012194948270916939,
    -0.013149585574865341,
    -0.004313810262829065,
    -0.02328452654182911,
    -0.007515074219554663,
    -0.013013208284974098,
    0.0006011341465637088,
    0.011010624468326569,
    -0.02473442628979683,
    0.019078383222222328,
    -0.015374679118394852,
    0.03083549067378044,
    -0.04102785512804985,
    0.010788114741444588,
    -0.028093600645661354,
    0.001699325512163341,
    -0.04131496325135231,
    0.023356305435299873,
    3.720639142557047e-05,
    -0.012589722871780396,
    0.038156766444444656,
    -0.006183606572449207,
    -0.024088433012366295,
    -0.050129204988479614,
    -0.010407695546746254,
    0.007917026057839394,
    0.0018464687746018171,
    -0.0027777780778706074,
    -0.0014750217087566853,
    0.026256104931235313,
    0.021202988922595978,
    0.005333046894520521,
    -0.024375541135668755,
    0.030175140127539635,
    -0.027275340631604195,
    0.0005495442892424762,
    0.0055017233826220036,
    -0.03692219778895378,
    0.002252009930089116,
    -0.03571633994579315,
    -0.0043999431654810905,
    0.023011773824691772,
    -0.017169108614325523,
    -0.01658053509891033,
    -0.0023219927679747343,
    -0.017800748348236084,
    -0.007070055231451988,
    0.026198681443929672,
    0.015360323712229729,
    0.0052397362887859344,
    -0.005788831971585751,
    -0.0025929517578333616,
    0.0016517731128260493,
    -0.009460236877202988,
    0.010328740812838078,
    0.010974735952913761,
    0.051966700702905655,
    0.001478610560297966,
    -0.019753089174628258,
    -0.012029861100018024,
    -0.0176859050989151,
    -0.007881137542426586,
    -0.023643413558602333,
    -0.011663797311484814,
    0.003832902992144227,
    0.01748492941260338,
    0.016350848600268364,
    -0.005709877237677574,
    -0.05038760229945183,
    0.012884009629487991,
    -0.043956365436315536,
    -0.02695951983332634,
    0.0010587138822302222,
    0.01024260837584734,
    0.007224376313388348,
    0.01012058649212122,
    0.006524548400193453,
    0.022380134090781212,
    -0.01792994700372219,
    0.017915591597557068,
    -0.038013212382793427,
    0.011118290014564991,
    0.016164228320121765,
    0.017312662675976753,
    0.013644848018884659,
    -0.006233850959688425,
    -0.030376115813851357,
    -0.0039046802558004856,
    0.014233420602977276,
    0.014269310049712658,
    -0.0036157770082354546,
    0.03847258538007736,
    -0.010630205273628235,
    -0.007464829832315445,
    -0.03318978101015091,
    -0.007960093207657337,
    -0.016322137787938118,
    0.01658053509891033,
    -0.0009133650455623865,
    -0.013759691268205643,
    -0.03789836913347244,
    6.145923543954268e-05,
    0.013135230168700218,
    -0.011922194622457027,
    -0.004934683442115784,
    -0.015188057906925678,
    -0.0037826590705662966,
    0.019652601331472397,
    0.0007155290804803371,
    -0.03169681504368782,
    0.03270169720053673,
    0.000915608077775687,
    0.012474879622459412,
    0.01778639294207096,
    0.004249210935086012,
    0.03804192319512367,
    -0.016494402661919594,
    -0.0025319410488009453,
    -0.03359173610806465,
    -0.0037072929553687572,
    -0.009331037290394306,
    -0.012474879622459412,
    -0.0014319553738459945,
    -0.006036463659256697,
    -0.012618433684110641,
    -0.006843957118690014,
    0.03947746753692627,
    -0.002422480843961239,
    -0.007012633606791496,
    0.00879270862787962,
    -0.007795005105435848,
    -0.02358599193394184,
    -0.01251794584095478,
    -0.012474879622459412,
    -0.008362045511603355,
    0.0019559289794415236,
    -0.01589147374033928,
    -0.007873959839344025,
    0.011391043663024902,
    -0.0031258976086974144,
    0.01666666939854622,
    0.0066752806305885315,
    0.01174275204539299,
    0.0003714470658451319,
    -0.027088720351457596,
    -0.028811372816562653,
    -0.00047417820314876735,
    -0.017901236191391945,
    -0.004328165668994188,
    -0.005035171285271645,
    0.17077234387397766,
    0.027275340631604195,
    0.005429945886135101,
    0.018231412395834923,
    -0.013228540308773518,
    -0.013063452206552029,
    0.011678152717649937,
    0.0022843098267912865,
    -0.01556129939854145,
    0.025925928726792336,
    0.01590583100914955,
    0.007830893620848656,
    0.003560149809345603,
    0.013041919097304344,
    0.006201551295816898,
    0.012769166380167007,
    -0.027146141976118088,
    -0.054722946137189865,
    -0.03517083451151848,
    -0.015216768719255924,
    0.007759116590023041,
    -0.015762275084853172,
    -0.026026416569948196,
    -0.04610968008637428,
    0.006470715627074242,
    -0.013443871401250362,
    -0.010824003256857395,
    0.008469711057841778,
    0.009187483228743076,
    0.021719783544540405,
    -0.022236580029129982,
    -0.008641975931823254,
    -0.005598622374236584,
    -0.030950333923101425,
    -0.023212749511003494,
    -0.019078383222222328,
    -0.016365204006433487,
    -0.002147933002561331,
    0.004529141820967197,
    0.007224376313388348,
    0.0008056992082856596,
    -0.038817115128040314,
    0.02091587893664837,
    -0.01705426536500454,
    0.00862762052565813,
    -0.007608384359627962,
    -0.006861901376396418,
    0.024806205183267593,
    1.9920980776078068e-05,
    0.0058175427839159966,
    -0.02213609218597412,
    -0.029026703909039497,
    0.0003970176912844181,
    -0.004995693918317556,
    0.02232271246612072,
    -0.020083263516426086,
    -0.00010861911141546443,
    0.03209877014160156,
    0.011218777857720852,
    -0.005684755276888609,
    -0.011175711639225483,
    0.01261125598102808,
    0.008046225644648075,
    0.00677576893940568,
    -0.02054263837635517,
    0.01952340081334114,
    -0.02507895790040493,
    0.012072927318513393,
    -0.004590152762830257,
    0.006251795217394829,
    -0.008376400917768478,
    -0.022983063012361526,
    -0.012489235028624535,
    -0.024605227634310722,
    -0.019078383222222328,
    -0.01870514079928398,
    0.04108527675271034,
    0.004661929793655872,
    0.013616137206554413,
    0.03261556476354599,
    -0.006696813739836216,
    -0.007565318141132593,
    -0.017958657816052437,
    0.004970571957528591,
    -0.026112549006938934,
    -0.003133075311779976,
    0.014872238039970398,
    -0.014348264783620834,
    -0.026500146836042404,
    0.005555556155741215,
    -0.0066752806305885315,
    -0.018719496205449104,
    0.002928510308265686,
    -0.009058283641934395,
    0.007274620234966278,
    0.007830893620848656,
    0.00843382254242897,
    0.017657194286584854,
    0.00976170040667057,
    0.006018519401550293,
    -0.03379271179437637,
    0.04053976759314537,
    -0.0003649422724265605,
    0.003305340651422739,
    -0.0030289983842521906,
    -0.005106948781758547,
    -0.02144703082740307,
    0.0007720536086708307,
    -0.024605227634310722,
    -0.011225955560803413,
    0.0049095614813268185,
    -0.026844676584005356,
    -0.011168533936142921,
    0.0023578815162181854,
    -0.015877118334174156,
    0.0007944839890114963,
    0.0026988231111317873,
    -0.0001272923982469365,
    0.029457367956638336,
    0.011419754475355148,
    0.005670399870723486,
    -0.0069803339429199696,
    -0.001345822704024613,
    -0.008039047941565514,
    -0.011319266632199287,
    -0.02242320030927658,
    -0.004744473844766617,
    0.02595463953912258,
    -0.005250502843409777,
    -0.021662361919879913,
    0.011154178529977798,
    -0.015073214657604694,
    0.03448177129030228,
    -0.024074077606201172,
    -0.009417169727385044,
    -0.02367212437093258,
    0.008943440392613411,
    -0.0006832293584011495,
    -0.022796442732214928,
    0.005056704394519329,
    -0.02362905815243721,
    -0.01807350106537342,
    0.01917887106537819,
    -0.008979328908026218,
    0.011175711639225483,
    -0.01541774533689022,
    -0.0004371680843178183,
    -0.010931669734418392,
    -0.0028280222322791815,
    -0.011613552458584309,
    0.00893626268953085,
    -0.019982775673270226,
    -0.001678689499385655,
    -0.0030056708492338657,
    -0.003662432311102748,
    -0.010099053382873535,
    -0.021246055141091347,
    -0.022695954889059067,
    -0.007615562062710524,
    0.0025875684805214405,
    -0.04197531193494797,
    0.015331611968576908,
    0.01324289571493864,
    0.004317399114370346,
    -0.04154464974999428,
    -0.021719783544540405,
    -0.18283091485500336,
    0.020413439720869064,
    0.009316681884229183,
    -0.035773761570453644,
    0.010996269062161446,
    -0.025495264679193497,
    -0.00947459228336811,
    0.0029966984875500202,
    -0.03695090860128403,
    -0.014484641142189503,
    0.026256104931235313,
    0.012618433684110641,
    -0.0318116620182991,
    -0.02914154715836048,
    0.0029320991598069668,
    -0.016207294538617134,
    -0.027806492522358894,
    0.0016706145834177732,
    -0.0017863553948700428,
    0.025165090337395668,
    0.025423487648367882,
    -0.043468277901411057,
    0.02487798221409321,
    0.011218777857720852,
    -0.0019702843856066465,
    -0.010623027570545673,
    0.005433534737676382,
    -0.004733707290142775,
    -0.019293714314699173,
    -0.01564743183553219,
    0.009919610805809498,
    -0.0039621018804609776,
    0.03132357448339462,
    0.010544072836637497,
    0.007995981723070145,
    0.03496985882520676,
    0.011233133263885975,
    -0.00646353792399168,
    -0.014671262353658676,
    0.023255815729498863,
    0.009969854727387428,
    0.02667241171002388,
    0.004245622083544731,
    -0.0009223371744155884,
    -0.02164800651371479,
    0.026701122522354126,
    0.021289121359586716,
    -0.027002587914466858,
    0.012639966793358326,
    -0.045391909778118134,
    0.007256675977259874,
    -0.01850416511297226,
    0.010084697976708412,
    -0.014032444916665554,
    0.027088720351457596,
    -0.014771750196814537,
    -0.005343813449144363,
    0.014168821275234222,
    -0.010393340140581131,
    -0.012374390847980976,
    -0.021002011373639107,
    -0.04521964490413666,
    0.009718634188175201,
    0.020987655967473984,
    -0.01060867216438055,
    -0.006843957118690014,
    -0.008778353221714497,
    0.004780362360179424,
    -0.015015793032944202,
    0.01142693217843771,
    0.0032838075421750546,
    0.013716625049710274,
    -0.0037037041038274765,
    0.030175140127539635,
    0.004984927363693714,
    0.013357738964259624,
    -0.010709160007536411,
    0.0036193658597767353,
    -0.005146426148712635,
    -0.01084553636610508,
    -0.026198681443929672,
    0.030519669875502586,
    -0.009417169727385044,
    -0.011893483810126781,
    0.03387884423136711,
    -0.018374966457486153,
    -0.006136951502412558,
    -0.006948034279048443,
    -0.0008846541168168187,
    -0.016508758068084717,
    -0.014800461009144783,
    -0.04441573843359947,
    0.006596325896680355,
    -0.0008900374523364007,
    -0.0014525912702083588,
    0.023901810869574547,
    -0.02014068514108658,
    -0.0032927796710282564,
    -0.004579386208206415,
    -0.055354584008455276,
    0.000744239951018244,
    0.020470861345529556,
    -0.007960093207657337,
    -0.006183606572449207,
    0.03175423666834831,
    0.013888890855014324,
    -0.014843527227640152,
    -0.0028029000386595726,
    0.019824866205453873,
    -0.0007864090730436146,
    0.007306920364499092,
    0.008857307955622673,
    0.024605227634310722,
    0.017341373488307,
    -0.010745048522949219,
    0.02416021004319191,
    -0.026543213054537773,
    -0.0028029000386595726,
    0.011663797311484814,
    -0.008074936456978321,
    0.05202412232756615,
    -0.002668317873030901,
    0.014348264783620834,
    0.0022986652329564095,
    -0.014814816415309906,
    -0.0006666308618150651,
    -0.09445881098508835,
    -0.033505603671073914,
    -0.009029572829604149,
    0.0031223087571561337,
    -0.03453919291496277,
    -0.011182889342308044,
    -0.019982775673270226,
    0.014068333432078362,
    -0.013608959503471851,
    0.003416595282033086,
    0.008304622955620289,
    0.009000862017273903,
    -0.016896355897188187,
    -0.007859604433178902,
    -0.011606374755501747,
    -0.007723228074610233,
    -0.030117718502879143,
    0.010422050952911377,
    -0.02275337651371956,
    0.04306632652878761,
    -0.005447890143841505,
    0.0049095614813268185,
    -0.009646857157349586,
    -0.008929084986448288,
    -0.0070808217860758305,
    0.012410280294716358,
    -0.04188917949795723,
    0.020327305421233177,
    0.015733564272522926,
    0.024289408698678017,
    0.008756820112466812,
    -0.018662074580788612,
    -0.0024565751664340496,
    -0.0010569194564595819,
    -0.009043928235769272,
    -0.002594746183604002,
    -0.00992678850889206,
    -0.019982775673270226,
    0.02773471549153328,
    -0.025983350351452827,
    0.003969279583543539,
    0.015058859251439571,
    0.007845249027013779,
    0.004292277153581381,
    0.006205140147358179,
    0.012855298817157745,
    -0.012259547598659992,
    0.03057709150016308,
    0.018619008362293243,
    -0.026643700897693634,
    -0.022408844903111458,
    -0.014900948852300644,
    -0.022437555715441704,
    -0.013092163018882275,
    0.006948034279048443,
    -0.013343383558094501,
    -0.017470574006438255,
    0.010414873249828815,
    -0.025165090337395668,
    -0.004568619653582573,
    -0.013924779370427132,
    -0.013372094370424747,
    -0.01956646703183651,
    0.015216768719255924,
    0.023471148684620857,
    -0.0036893486976623535,
    0.011534597724676132,
    0.00403387937694788,
    0.03812805563211441,
    -0.027289696037769318,
    -0.03330462798476219,
    0.028825728222727776,
    -0.013494115322828293,
    0.010450761765241623,
    0.0074576521292328835,
    0.02546655386686325,
    -0.02773471549153328,
    -0.014405686408281326,
    0.029600922018289566,
    -0.009589435532689095,
    0.00790267065167427,
    0.013436693698167801,
    -0.008993684314191341,
    -0.007830893620848656,
    0.009855011478066444,
    0.028883149847388268,
    -0.002277132123708725,
    0.004733707290142775,
    0.007723228074610233,
    -0.01360178180038929,
    -0.035974737256765366,
    -0.011032157577574253,
    0.0201550405472517,
    0.0026073071639984846,
    -0.004134367220103741,
    0.006628625560551882,
    0.011175711639225483,
    -0.0021604939829558134,
    -0.02571059763431549,
    0.007716050371527672,
    -0.05523974075913429,
    -0.02726098522543907,
    -0.06953776627779007,
    0.03178294748067856,
    -0.014857882633805275,
    -0.020111974328756332,
    0.030404826626181602,
    -0.01091731432825327,
    0.02271031029522419,
    -0.023686479777097702,
    0.013185474090278149,
    -0.015403389930725098,
    -0.04590870440006256,
    0.008972151204943657,
    0.010902957990765572,
    0.011642263270914555,
    -0.006477893330156803,
    -0.02077232487499714,
    0.03807063400745392,
    -0.020844101905822754,
    0.06029285863041878,
    0.026227392256259918,
    0.00023664049513172358,
    0.009266437962651253,
    0.029342524707317352,
    0.008929084986448288,
    -0.013063452206552029,
    -0.03390755504369736,
    -0.006930089555680752,
    0.011986793950200081,
    -0.012618433684110641,
    -0.022107381373643875,
    0.004450187087059021,
    -0.012532301247119904,
    0.01089578028768301,
    0.04435831680893898,
    0.026055127382278442,
    0.0140611557289958,
    0.043410856276750565,
    0.017800748348236084,
    0.029974164441227913,
    0.0055591450072824955,
    -0.01133362203836441,
    -0.0368073545396328,
    0.030548380687832832,
    0.0010811442043632269,
    -0.0052863918244838715,
    -0.024562161415815353,
    -0.010113408789038658,
    0.009969854727387428,
    0.021346542984247208,
    0.0036050104536116123,
    0.021174278110265732,
    0.0017603361047804356,
    0.00698392279446125,
    -0.008598909713327885,
    0.008807064034044743,
    0.0025839796289801598,
    0.03247201070189476,
    -0.008563021197915077,
    -0.0219351164996624,
    0.011958083137869835,
    0.01324289571493864,
    -0.011491531506180763,
    0.004015935119241476,
    0.007242320571094751,
    0.002138960873708129,
    -0.056416887789964676,
    -0.011513064615428448,
    0.0018769741291180253,
    -0.0023381425999104977,
    -0.024404251947999,
    -0.010630205273628235,
    -0.002530146623030305,
    0.031237442046403885,
    -0.009984210133552551,
    0.018518520519137383,
    -0.012166237458586693,
    0.020126329734921455,
    -0.014857882633805275,
    -0.019451623782515526,
    0.02971576526761055,
    0.01370226964354515,
    -0.0085773766040802,
    -0.01999713107943535,
    0.005634510889649391,
    0.02885443903505802,
    -0.003343023592606187,
    -0.0286534633487463,
    0.009309504181146622,
    0.0049382722936570644,
    0.00956790242344141,
    0.018130924552679062,
    0.03987941890954971,
    -0.009388458915054798,
    0.0067183468490839005,
    0.017355728894472122,
    0.00038557819789275527,
    -0.02532299980521202,
    -0.0311225987970829,
    0.028064889833331108,
    0.02222222462296486,
    0.005508901085704565,
    0.0014400302898138762,
    -0.004173845052719116,
    -0.01333620585501194,
    -0.01927935890853405,
    0.0007173235062509775,
    -0.007917026057839394,
    -0.012948608957231045,
    -0.008412289433181286,
    0.02904105931520462,
    0.03195521607995033,
    -0.02924203686416149,
    -0.011613552458584309,
    -0.0010246196761727333,
    -0.032500721514225006,
    0.011096756905317307,
    -0.00397286843508482,
    0.0015755097847431898,
    -0.03178294748067856,
    0.02009761892259121,
    0.012632789090275764,
    0.0032048525754362345,
    0.04366925731301308,
    0.016982488334178925,
    0.019738733768463135,
    0.008412289433181286,
    -0.0021820273250341415,
    -0.026543213054537773,
    0.010414873249828815,
    0.020700547844171524,
    -0.004285099450498819,
    0.015044503845274448,
    -0.011714041233062744,
    -0.018188346177339554,
    -0.00666810292750597,
    -0.018188346177339554,
    -0.00013402150943875313,
    0.02097330056130886,
    -0.03410853073000908,
    0.07441861182451248,
    0.00838357862085104,
    -0.008799886330962181,
    0.00302720395848155,
    -0.007479185238480568,
    0.022265290841460228,
    0.031524550169706345,
    -0.004127189517021179,
    0.015690498054027557,
    -0.013853001408278942,
    -3.238385761505924e-05,
    -0.00016194733325392008,
    -0.004780362360179424,
    -0.0008402419625781476,
    -0.01725524105131626,
    0.005706288386136293,
    -0.012991675175726414,
    0.04542062059044838,
    -0.001943367999047041,
    -0.011197244748473167,
    0.013637670315802097,
    -0.0036749932914972305,
    -0.00460450816899538,
    0.004529141820967197,
    -0.013587426394224167,
    0.008060581050813198,
    0.010974735952913761,
    0.0034596615005284548,
    -0.008082114160060883,
    -0.020083263516426086,
    0.012790699489414692,
    0.010809647850692272,
    -0.040568478405475616,
    -0.01695377752184868,
    0.004410709720104933,
    -0.014068333432078362,
    -0.0037144706584513187,
    -0.00847688876092434,
    0.0012749427696689963,
    -0.010479472577571869,
    -0.022337067872285843,
    -0.03247201070189476,
    -0.017470574006438255,
    -0.036749932914972305,
    0.019394202157855034,
    -0.00019043391512241215,
    0.005752943456172943,
    -0.02807924523949623,
    -0.047143273055553436
  ]
}
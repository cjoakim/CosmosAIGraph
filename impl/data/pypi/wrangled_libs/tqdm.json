{
  "classifiers": [
    "development status :: 5 - production/stable",
    "environment :: console",
    "environment :: macos x",
    "environment :: other environment",
    "environment :: win32 (ms windows)",
    "environment :: x11 applications",
    "framework :: ipython",
    "framework :: jupyter",
    "intended audience :: developers",
    "intended audience :: education",
    "intended audience :: end users/desktop",
    "intended audience :: other audience",
    "intended audience :: system administrators",
    "license :: osi approved :: mit license",
    "license :: osi approved :: mozilla public license 2.0 (mpl 2.0)",
    "operating system :: macos",
    "operating system :: macos :: macos x",
    "operating system :: microsoft",
    "operating system :: microsoft :: ms-dos",
    "operating system :: microsoft :: windows",
    "operating system :: posix",
    "operating system :: posix :: bsd",
    "operating system :: posix :: bsd :: freebsd",
    "operating system :: posix :: linux",
    "operating system :: posix :: sunos/solaris",
    "operating system :: unix",
    "programming language :: python",
    "programming language :: python :: 3",
    "programming language :: python :: 3 :: only",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "programming language :: python :: implementation",
    "programming language :: python :: implementation :: ironpython",
    "programming language :: python :: implementation :: pypy",
    "programming language :: unix shell",
    "topic :: desktop environment",
    "topic :: education :: computer aided instruction (cai)",
    "topic :: education :: testing",
    "topic :: office/business",
    "topic :: other/nonlisted topic",
    "topic :: software development :: build tools",
    "topic :: software development :: libraries",
    "topic :: software development :: libraries :: python modules",
    "topic :: software development :: pre-processors",
    "topic :: software development :: user interfaces",
    "topic :: system :: installation/setup",
    "topic :: system :: logging",
    "topic :: system :: monitoring",
    "topic :: system :: shells",
    "topic :: terminals",
    "topic :: utilities"
  ],
  "description": "fast, extensible progress meter\n|logo|\n\ntqdm\n====\n\n|py-versions| |versions| |conda-forge-status| |docker| |snapcraft|\n\n|build-status| |coverage-status| |branch-coverage-status| |codacy-grade| |libraries-rank| |pypi-downloads|\n\n|licence| |openhub-status| |binder-demo| |awesome-python|\n\n``tqdm`` derives from the arabic word *taqaddum* (\u062a\u0642\u062f\u0651\u0645) which can mean \"progress,\"\nand is an abbreviation for \"i love you so much\" in spanish (*te quiero demasiado*).\n\ninstantly make your loops show a smart progress meter - just wrap any\niterable with ``tqdm(iterable)``, and you're done!\n\n.. code:: python\n\n    from tqdm import tqdm\n    for i in tqdm(range(10000)):\n        ...\n\n``76%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 | 7568/10000 [00:33<00:10, 229.00it/s]``\n\n``trange(n)`` can be also used as a convenient shortcut for\n``tqdm(range(n))``.\n\n|screenshot|\n    |video| |slides| |merch|\n\nit can also be executed as a module with pipes:\n\n.. code:: sh\n\n    $ seq 9999999 | tqdm --bytes | wc -l\n    75.2mb [00:00, 217mb/s]\n    9999999\n\n    $ tar -zcf - docs/ | tqdm --bytes --total `du -sb docs/ | cut -f1` \\\n        > backup.tgz\n     32%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258d                      | 8.89g/27.9g [00:42<01:31, 223mb/s]\n\noverhead is low -- about 60ns per iteration (80ns with ``tqdm.gui``), and is\nunit tested against performance regression.\nby comparison, the well-established\n`progressbar <https://github.com/niltonvolpato/python-progressbar>`__ has\nan 800ns/iter overhead.\n\nin addition to its low overhead, ``tqdm`` uses smart algorithms to predict\nthe remaining time and to skip unnecessary iteration displays, which allows\nfor a negligible overhead in most cases.\n\n``tqdm`` works on any platform\n(linux, windows, mac, freebsd, netbsd, solaris/sunos),\nin any console or in a gui, and is also friendly with ipython/jupyter notebooks.\n\n``tqdm`` does not require any dependencies (not even ``curses``!), just\npython and an environment supporting ``carriage return \\r`` and\n``line feed \\n`` control characters.\n\n------------------------------------------\n\n.. contents:: table of contents\n   :backlinks: top\n   :local:\n\n\ninstallation\n------------\n\nlatest pypi stable release\n~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n|versions| |pypi-downloads| |libraries-dependents|\n\n.. code:: sh\n\n    pip install tqdm\n\nlatest development release on github\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n|github-status| |github-stars| |github-commits| |github-forks| |github-updated|\n\npull and install pre-release ``devel`` branch:\n\n.. code:: sh\n\n    pip install \"git+https://github.com/tqdm/tqdm.git@devel#egg=tqdm\"\n\nlatest conda release\n~~~~~~~~~~~~~~~~~~~~\n\n|conda-forge-status|\n\n.. code:: sh\n\n    conda install -c conda-forge tqdm\n\nlatest snapcraft release\n~~~~~~~~~~~~~~~~~~~~~~~~\n\n|snapcraft|\n\nthere are 3 channels to choose from:\n\n.. code:: sh\n\n    snap install tqdm  # implies --stable, i.e. latest tagged release\n    snap install tqdm  --candidate  # master branch\n    snap install tqdm  --edge  # devel branch\n\nnote that ``snap`` binaries are purely for cli use (not ``import``-able), and\nautomatically set up ``bash`` tab-completion.\n\nlatest docker release\n~~~~~~~~~~~~~~~~~~~~~\n\n|docker|\n\n.. code:: sh\n\n    docker pull tqdm/tqdm\n    docker run -i --rm tqdm/tqdm --help\n\nother\n~~~~~\n\nthere are other (unofficial) places where ``tqdm`` may be downloaded, particularly for cli use:\n\n|repology|\n\n.. |repology| image:: https://repology.org/badge/tiny-repos/python:tqdm.svg\n   :target: https://repology.org/project/python:tqdm/versions\n\nchangelog\n---------\n\nthe list of all changes is available either on github's releases:\n|github-status|, on the\n`wiki <https://github.com/tqdm/tqdm/wiki/releases>`__, or on the\n`website <https://tqdm.github.io/releases>`__.\n\n\nusage\n-----\n\n``tqdm`` is very versatile and can be used in a number of ways.\nthe three main ones are given below.\n\niterable-based\n~~~~~~~~~~~~~~\n\nwrap ``tqdm()`` around any iterable:\n\n.. code:: python\n\n    from tqdm import tqdm\n    from time import sleep\n\n    text = \"\"\n    for char in tqdm([\"a\", \"b\", \"c\", \"d\"]):\n        sleep(0.25)\n        text = text + char\n\n``trange(i)`` is a special optimised instance of ``tqdm(range(i))``:\n\n.. code:: python\n\n    from tqdm import trange\n\n    for i in trange(100):\n        sleep(0.01)\n\ninstantiation outside of the loop allows for manual control over ``tqdm()``:\n\n.. code:: python\n\n    pbar = tqdm([\"a\", \"b\", \"c\", \"d\"])\n    for char in pbar:\n        sleep(0.25)\n        pbar.set_description(\"processing %s\" % char)\n\nmanual\n~~~~~~\n\nmanual control of ``tqdm()`` updates using a ``with`` statement:\n\n.. code:: python\n\n    with tqdm(total=100) as pbar:\n        for i in range(10):\n            sleep(0.1)\n            pbar.update(10)\n\nif the optional variable ``total`` (or an iterable with ``len()``) is\nprovided, predictive stats are displayed.\n\n``with`` is also optional (you can just assign ``tqdm()`` to a variable,\nbut in this case don't forget to ``del`` or ``close()`` at the end:\n\n.. code:: python\n\n    pbar = tqdm(total=100)\n    for i in range(10):\n        sleep(0.1)\n        pbar.update(10)\n    pbar.close()\n\nmodule\n~~~~~~\n\nperhaps the most wonderful use of ``tqdm`` is in a script or on the command\nline. simply inserting ``tqdm`` (or ``python -m tqdm``) between pipes will pass\nthrough all ``stdin`` to ``stdout`` while printing progress to ``stderr``.\n\nthe example below demonstrate counting the number of lines in all python files\nin the current directory, with timing information included.\n\n.. code:: sh\n\n    $ time find . -name '*.py' -type f -exec cat \\{} \\; | wc -l\n    857365\n\n    real    0m3.458s\n    user    0m0.274s\n    sys     0m3.325s\n\n    $ time find . -name '*.py' -type f -exec cat \\{} \\; | tqdm | wc -l\n    857366it [00:03, 246471.31it/s]\n    857365\n\n    real    0m3.585s\n    user    0m0.862s\n    sys     0m3.358s\n\nnote that the usual arguments for ``tqdm`` can also be specified.\n\n.. code:: sh\n\n    $ find . -name '*.py' -type f -exec cat \\{} \\; |\n        tqdm --unit loc --unit_scale --total 857366 >> /dev/null\n    100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 857k/857k [00:04<00:00, 246kloc/s]\n\nbacking up a large directory?\n\n.. code:: sh\n\n    $ tar -zcf - docs/ | tqdm --bytes --total `du -sb docs/ | cut -f1` \\\n      > backup.tgz\n     44%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258a                   | 153m/352m [00:14<00:18, 11.0mb/s]\n\nthis can be beautified further:\n\n.. code:: sh\n\n    $ bytes=$(du -sb docs/ | cut -f1)\n    $ tar -cf - docs/ \\\n      | tqdm --bytes --total \"$bytes\" --desc processing | gzip \\\n      | tqdm --bytes --total \"$bytes\" --desc compressed --position 1 \\\n      > ~/backup.tgz\n    processing: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 352m/352m [00:14<00:00, 30.2mb/s]\n    compressed:  42%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258e            | 148m/352m [00:14<00:19, 10.9mb/s]\n\nor done on a file level using 7-zip:\n\n.. code:: sh\n\n    $ 7z a -bd -r backup.7z docs/ | grep compressing \\\n      | tqdm --total $(find docs/ -type f | wc -l) --unit files \\\n      | grep -v compressing\n    100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2589| 15327/15327 [01:00<00:00, 712.96files/s]\n\npre-existing cli programs already outputting basic progress information will\nbenefit from ``tqdm``'s ``--update`` and ``--update_to`` flags:\n\n.. code:: sh\n\n    $ seq 3 0.1 5 | tqdm --total 5 --update_to --null\n    100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 5.0/5 [00:00<00:00, 9673.21it/s]\n    $ seq 10 | tqdm --update --null  # 1 + 2 + ... + 10 = 55 iterations\n    55it [00:00, 90006.52it/s]\n\nfaq and known issues\n--------------------\n\n|github-issues|\n\nthe most common issues relate to excessive output on multiple lines, instead\nof a neat one-line progress bar.\n\n- consoles in general: require support for carriage return (``cr``, ``\\r``).\n\n  * some cloud logging consoles which don't support ``\\r`` properly\n    (`cloudwatch <https://github.com/tqdm/tqdm/issues/966>`__,\n    `k8s <https://github.com/tqdm/tqdm/issues/1319>`__) may benefit from\n    ``export tqdm_position=-1``.\n\n- nested progress bars:\n\n  * consoles in general: require support for moving cursors up to the\n    previous line. for example,\n    `idle <https://github.com/tqdm/tqdm/issues/191#issuecomment-230168030>`__,\n    `conemu <https://github.com/tqdm/tqdm/issues/254>`__ and\n    `pycharm <https://github.com/tqdm/tqdm/issues/203>`__ (also\n    `here <https://github.com/tqdm/tqdm/issues/208>`__,\n    `here <https://github.com/tqdm/tqdm/issues/307>`__, and\n    `here <https://github.com/tqdm/tqdm/issues/454#issuecomment-335416815>`__)\n    lack full support.\n  * windows: additionally may require the python module ``colorama``\n    to ensure nested bars stay within their respective lines.\n\n- unicode:\n\n  * environments which report that they support unicode will have solid smooth\n    progressbars. the fallback is an ``ascii``-only bar.\n  * windows consoles often only partially support unicode and thus\n    `often require explicit ascii=true <https://github.com/tqdm/tqdm/issues/454#issuecomment-335416815>`__\n    (also `here <https://github.com/tqdm/tqdm/issues/499>`__). this is due to\n    either normal-width unicode characters being incorrectly displayed as\n    \"wide\", or some unicode characters not rendering.\n\n- wrapping generators:\n\n  * generator wrapper functions tend to hide the length of iterables.\n    ``tqdm`` does not.\n  * replace ``tqdm(enumerate(...))`` with ``enumerate(tqdm(...))`` or\n    ``tqdm(enumerate(x), total=len(x), ...)``.\n    the same applies to ``numpy.ndenumerate``.\n  * replace ``tqdm(zip(a, b))`` with ``zip(tqdm(a), b)`` or even\n    ``zip(tqdm(a), tqdm(b))``.\n  * the same applies to ``itertools``.\n  * some useful convenience functions can be found under ``tqdm.contrib``.\n\n- `no intermediate output in docker-compose <https://github.com/tqdm/tqdm/issues/771>`__:\n  use ``docker-compose run`` instead of ``docker-compose up`` and ``tty: true``.\n\n- overriding defaults via environment variables:\n  e.g. in ci/cloud jobs, ``export tqdm_mininterval=5`` to avoid log spam.\n  this override logic is handled by the ``tqdm.utils.envwrap`` decorator\n  (useful independent of ``tqdm``).\n\nif you come across any other difficulties, browse and file |github-issues|.\n\ndocumentation\n-------------\n\n|py-versions| |readme-hits| (since 19 may 2016)\n\n.. code:: python\n\n    class tqdm():\n      \"\"\"\n      decorate an iterable object, returning an iterator which acts exactly\n      like the original iterable, but prints a dynamically updating\n      progressbar every time a value is requested.\n      \"\"\"\n\n      @envwrap(\"tqdm_\")  # override defaults via env vars\n      def __init__(self, iterable=none, desc=none, total=none, leave=true,\n                   file=none, ncols=none, mininterval=0.1,\n                   maxinterval=10.0, miniters=none, ascii=none, disable=false,\n                   unit='it', unit_scale=false, dynamic_ncols=false,\n                   smoothing=0.3, bar_format=none, initial=0, position=none,\n                   postfix=none, unit_divisor=1000, write_bytes=false,\n                   lock_args=none, nrows=none, colour=none, delay=0):\n\nparameters\n~~~~~~~~~~\n\n* iterable  : iterable, optional  \n    iterable to decorate with a progressbar.\n    leave blank to manually manage the updates.\n* desc  : str, optional  \n    prefix for the progressbar.\n* total  : int or float, optional  \n    the number of expected iterations. if unspecified,\n    len(iterable) is used if possible. if float(\"inf\") or as a last\n    resort, only basic progress statistics are displayed\n    (no eta, no progressbar).\n    if ``gui`` is true and this parameter needs subsequent updating,\n    specify an initial arbitrary large positive number,\n    e.g. 9e9.\n* leave  : bool, optional  \n    if [default: true], keeps all traces of the progressbar\n    upon termination of iteration.\n    if ``none``, will leave only if ``position`` is ``0``.\n* file  : ``io.textiowrapper`` or ``io.stringio``, optional  \n    specifies where to output the progress messages\n    (default: sys.stderr). uses ``file.write(str)`` and ``file.flush()``\n    methods.  for encoding, see ``write_bytes``.\n* ncols  : int, optional  \n    the width of the entire output message. if specified,\n    dynamically resizes the progressbar to stay within this bound.\n    if unspecified, attempts to use environment width. the\n    fallback is a meter width of 10 and no limit for the counter and\n    statistics. if 0, will not print any meter (only stats).\n* mininterval  : float, optional  \n    minimum progress display update interval [default: 0.1] seconds.\n* maxinterval  : float, optional  \n    maximum progress display update interval [default: 10] seconds.\n    automatically adjusts ``miniters`` to correspond to ``mininterval``\n    after long display update lag. only works if ``dynamic_miniters``\n    or monitor thread is enabled.\n* miniters  : int or float, optional  \n    minimum progress display update interval, in iterations.\n    if 0 and ``dynamic_miniters``, will automatically adjust to equal\n    ``mininterval`` (more cpu efficient, good for tight loops).\n    if > 0, will skip display of specified number of iterations.\n    tweak this and ``mininterval`` to get very efficient loops.\n    if your progress is erratic with both fast and slow iterations\n    (network, skipping items, etc) you should set miniters=1.\n* ascii  : bool or str, optional  \n    if unspecified or false, use unicode (smooth blocks) to fill\n    the meter. the fallback is to use ascii characters \" 123456789#\".\n* disable  : bool, optional  \n    whether to disable the entire progressbar wrapper\n    [default: false]. if set to none, disable on non-tty.\n* unit  : str, optional  \n    string that will be used to define the unit of each iteration\n    [default: it].\n* unit_scale  : bool or int or float, optional  \n    if 1 or true, the number of iterations will be reduced/scaled\n    automatically and a metric prefix following the\n    international system of units standard will be added\n    (kilo, mega, etc.) [default: false]. if any other non-zero\n    number, will scale ``total`` and ``n``.\n* dynamic_ncols  : bool, optional  \n    if set, constantly alters ``ncols`` and ``nrows`` to the\n    environment (allowing for window resizes) [default: false].\n* smoothing  : float, optional  \n    exponential moving average smoothing factor for speed estimates\n    (ignored in gui mode). ranges from 0 (average speed) to 1\n    (current/instantaneous speed) [default: 0.3].\n* bar_format  : str, optional  \n    specify a custom bar string formatting. may impact performance.\n    [default: '{l_bar}{bar}{r_bar}'], where\n    l_bar='{desc}: {percentage:3.0f}%|' and\n    r_bar='| {n_fmt}/{total_fmt} [{elapsed}<{remaining}, '\n    '{rate_fmt}{postfix}]'\n    possible vars: l_bar, bar, r_bar, n, n_fmt, total, total_fmt,\n    percentage, elapsed, elapsed_s, ncols, nrows, desc, unit,\n    rate, rate_fmt, rate_noinv, rate_noinv_fmt,\n    rate_inv, rate_inv_fmt, postfix, unit_divisor,\n    remaining, remaining_s, eta.\n    note that a trailing \": \" is automatically removed after {desc}\n    if the latter is empty.\n* initial  : int or float, optional  \n    the initial counter value. useful when restarting a progress\n    bar [default: 0]. if using float, consider specifying ``{n:.3f}``\n    or similar in ``bar_format``, or specifying ``unit_scale``.\n* position  : int, optional  \n    specify the line offset to print this bar (starting from 0)\n    automatic if unspecified.\n    useful to manage multiple bars at once (eg, from threads).\n* postfix  : dict or ``*``, optional  \n    specify additional stats to display at the end of the bar.\n    calls ``set_postfix(**postfix)`` if possible (dict).\n* unit_divisor  : float, optional  \n    [default: 1000], ignored unless ``unit_scale`` is true.\n* write_bytes  : bool, optional  \n    whether to write bytes. if (default: false) will write unicode.\n* lock_args  : tuple, optional  \n    passed to ``refresh`` for intermediate output\n    (initialisation, iterating, and updating).\n* nrows  : int, optional  \n    the screen height. if specified, hides nested bars outside this\n    bound. if unspecified, attempts to use environment height.\n    the fallback is 20.\n* colour  : str, optional  \n    bar colour (e.g. 'green', '#00ff00').\n* delay  : float, optional  \n    don't display until [default: 0] seconds have elapsed.\n\nextra cli options\n~~~~~~~~~~~~~~~~~\n\n* delim  : chr, optional  \n    delimiting character [default: '\\n']. use '\\0' for null.\n    n.b.: on windows systems, python converts '\\n' to '\\r\\n'.\n* buf_size  : int, optional  \n    string buffer size in bytes [default: 256]\n    used when ``delim`` is specified.\n* bytes  : bool, optional  \n    if true, will count bytes, ignore ``delim``, and default\n    ``unit_scale`` to true, ``unit_divisor`` to 1024, and ``unit`` to 'b'.\n* tee  : bool, optional  \n    if true, passes ``stdin`` to both ``stderr`` and ``stdout``.\n* update  : bool, optional  \n    if true, will treat input as newly elapsed iterations,\n    i.e. numbers to pass to ``update()``. note that this is slow\n    (~2e5 it/s) since every input must be decoded as a number.\n* update_to  : bool, optional  \n    if true, will treat input as total elapsed iterations,\n    i.e. numbers to assign to ``self.n``. note that this is slow\n    (~2e5 it/s) since every input must be decoded as a number.\n* null  : bool, optional  \n    if true, will discard input (no stdout).\n* manpath  : str, optional  \n    directory in which to install tqdm man pages.\n* comppath  : str, optional  \n    directory in which to place tqdm completion.\n* log  : str, optional  \n    critical|fatal|error|warn(ing)|[default: 'info']|debug|notset.\n\nreturns\n~~~~~~~\n\n* out  : decorated iterator.  \n\n.. code:: python\n\n    class tqdm():\n      def update(self, n=1):\n          \"\"\"\n          manually update the progress bar, useful for streams\n          such as reading files.\n          e.g.:\n          >>> t = tqdm(total=filesize) # initialise\n          >>> for current_buffer in stream:\n          ...    ...\n          ...    t.update(len(current_buffer))\n          >>> t.close()\n          the last line is highly recommended, but possibly not necessary if\n          ``t.update()`` will be called in such a way that ``filesize`` will be\n          exactly reached and printed.\n\n          parameters\n          ----------\n          n  : int or float, optional\n              increment to add to the internal counter of iterations\n              [default: 1]. if using float, consider specifying ``{n:.3f}``\n              or similar in ``bar_format``, or specifying ``unit_scale``.\n\n          returns\n          -------\n          out  : bool or none\n              true if a ``display()`` was triggered.\n          \"\"\"\n\n      def close(self):\n          \"\"\"cleanup and (if leave=false) close the progressbar.\"\"\"\n\n      def clear(self, nomove=false):\n          \"\"\"clear current bar display.\"\"\"\n\n      def refresh(self):\n          \"\"\"\n          force refresh the display of this bar.\n\n          parameters\n          ----------\n          nolock  : bool, optional\n              if ``true``, does not lock.\n              if [default: ``false``]: calls ``acquire()`` on internal lock.\n          lock_args  : tuple, optional\n              passed to internal lock's ``acquire()``.\n              if specified, will only ``display()`` if ``acquire()`` returns ``true``.\n          \"\"\"\n\n      def unpause(self):\n          \"\"\"restart tqdm timer from last print time.\"\"\"\n\n      def reset(self, total=none):\n          \"\"\"\n          resets to 0 iterations for repeated use.\n\n          consider combining with ``leave=true``.\n\n          parameters\n          ----------\n          total  : int or float, optional. total to use for the new bar.\n          \"\"\"\n\n      def set_description(self, desc=none, refresh=true):\n          \"\"\"\n          set/modify description of the progress bar.\n\n          parameters\n          ----------\n          desc  : str, optional\n          refresh  : bool, optional\n              forces refresh [default: true].\n          \"\"\"\n\n      def set_postfix(self, ordered_dict=none, refresh=true, **tqdm_kwargs):\n          \"\"\"\n          set/modify postfix (additional stats)\n          with automatic formatting based on datatype.\n\n          parameters\n          ----------\n          ordered_dict  : dict or ordereddict, optional\n          refresh  : bool, optional\n              forces refresh [default: true].\n          kwargs  : dict, optional\n          \"\"\"\n\n      @classmethod\n      def write(cls, s, file=sys.stdout, end=\"\\n\"):\n          \"\"\"print a message via tqdm (without overlap with bars).\"\"\"\n\n      @property\n      def format_dict(self):\n          \"\"\"public api for read-only member access.\"\"\"\n\n      def display(self, msg=none, pos=none):\n          \"\"\"\n          use ``self.sp`` to display ``msg`` in the specified ``pos``.\n\n          consider overloading this function when inheriting to use e.g.:\n          ``self.some_frontend(**self.format_dict)`` instead of ``self.sp``.\n\n          parameters\n          ----------\n          msg  : str, optional. what to display (default: ``repr(self)``).\n          pos  : int, optional. position to ``moveto``\n            (default: ``abs(self.pos)``).\n          \"\"\"\n\n      @classmethod\n      @contextmanager\n      def wrapattr(cls, stream, method, total=none, bytes=true, **tqdm_kwargs):\n          \"\"\"\n          stream  : file-like object.\n          method  : str, \"read\" or \"write\". the result of ``read()`` and\n              the first argument of ``write()`` should have a ``len()``.\n\n          >>> with tqdm.wrapattr(file_obj, \"read\", total=file_obj.size) as fobj:\n          ...     while true:\n          ...         chunk = fobj.read(chunk_size)\n          ...         if not chunk:\n          ...             break\n          \"\"\"\n\n      @classmethod\n      def pandas(cls, *targs, **tqdm_kwargs):\n          \"\"\"registers the current `tqdm` class with `pandas`.\"\"\"\n\n    def trange(*args, **tqdm_kwargs):\n        \"\"\"shortcut for `tqdm(range(*args), **tqdm_kwargs)`.\"\"\"\n\nconvenience functions\n~~~~~~~~~~~~~~~~~~~~~\n\n.. code:: python\n\n    def tqdm.contrib.tenumerate(iterable, start=0, total=none,\n                                tqdm_class=tqdm.auto.tqdm, **tqdm_kwargs):\n        \"\"\"equivalent of `numpy.ndenumerate` or builtin `enumerate`.\"\"\"\n\n    def tqdm.contrib.tzip(iter1, *iter2plus, **tqdm_kwargs):\n        \"\"\"equivalent of builtin `zip`.\"\"\"\n\n    def tqdm.contrib.tmap(function, *sequences, **tqdm_kwargs):\n        \"\"\"equivalent of builtin `map`.\"\"\"\n\nsubmodules\n~~~~~~~~~~\n\n.. code:: python\n\n    class tqdm.notebook.tqdm(tqdm.tqdm):\n        \"\"\"ipython/jupyter notebook widget.\"\"\"\n\n    class tqdm.auto.tqdm(tqdm.tqdm):\n        \"\"\"automatically chooses beween `tqdm.notebook` and `tqdm.tqdm`.\"\"\"\n\n    class tqdm.asyncio.tqdm(tqdm.tqdm):\n      \"\"\"asynchronous version.\"\"\"\n      @classmethod\n      def as_completed(cls, fs, *, loop=none, timeout=none, total=none,\n                       **tqdm_kwargs):\n          \"\"\"wrapper for `asyncio.as_completed`.\"\"\"\n\n    class tqdm.gui.tqdm(tqdm.tqdm):\n        \"\"\"matplotlib gui version.\"\"\"\n\n    class tqdm.tk.tqdm(tqdm.tqdm):\n        \"\"\"tkinter gui version.\"\"\"\n\n    class tqdm.rich.tqdm(tqdm.tqdm):\n        \"\"\"`rich.progress` version.\"\"\"\n\n    class tqdm.keras.tqdmcallback(keras.callbacks.callback):\n        \"\"\"keras callback for epoch and batch progress.\"\"\"\n\n    class tqdm.dask.tqdmcallback(dask.callbacks.callback):\n        \"\"\"dask callback for task progress.\"\"\"\n\n\n``contrib``\n+++++++++++\n\nthe ``tqdm.contrib`` package also contains experimental modules:\n\n- ``tqdm.contrib.itertools``: thin wrappers around ``itertools``\n- ``tqdm.contrib.concurrent``: thin wrappers around ``concurrent.futures``\n- ``tqdm.contrib.slack``: posts to `slack <https://slack.com>`__ bots\n- ``tqdm.contrib.discord``: posts to `discord <https://discord.com>`__ bots\n- ``tqdm.contrib.telegram``: posts to `telegram <https://telegram.org>`__ bots\n- ``tqdm.contrib.bells``: automagically enables all optional features\n\n  * ``auto``, ``pandas``, ``slack``, ``discord``, ``telegram``\n\nexamples and advanced usage\n---------------------------\n\n- see the `examples <https://github.com/tqdm/tqdm/tree/master/examples>`__\n  folder;\n- import the module and run ``help()``;\n- consult the `wiki <https://github.com/tqdm/tqdm/wiki>`__;\n\n  * this has an\n    `excellent article <https://github.com/tqdm/tqdm/wiki/how-to-make-a-great-progress-bar>`__\n    on how to make a **great** progressbar;\n\n- check out the `slides from pydata london <https://tqdm.github.io/pydata2019/slides.html>`__, or\n- run the |binder-demo|.\n\ndescription and additional stats\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\ncustom information can be displayed and updated dynamically on ``tqdm`` bars\nwith the ``desc`` and ``postfix`` arguments:\n\n.. code:: python\n\n    from tqdm import tqdm, trange\n    from random import random, randint\n    from time import sleep\n\n    with trange(10) as t:\n        for i in t:\n            # description will be displayed on the left\n            t.set_description('gen %i' % i)\n            # postfix will be displayed on the right,\n            # formatted automatically based on argument's datatype\n            t.set_postfix(loss=random(), gen=randint(1,999), str='h',\n                          lst=[1, 2])\n            sleep(0.1)\n\n    with tqdm(total=10, bar_format=\"{postfix[0]} {postfix[1][value]:>8.2g}\",\n              postfix=[\"batch\", {\"value\": 0}]) as t:\n        for i in range(10):\n            sleep(0.1)\n            t.postfix[1][\"value\"] = i / 2\n            t.update()\n\npoints to remember when using ``{postfix[...]}`` in the ``bar_format`` string:\n\n- ``postfix`` also needs to be passed as an initial argument in a compatible\n  format, and\n- ``postfix`` will be auto-converted to a string if it is a ``dict``-like\n  object. to prevent this behaviour, insert an extra item into the dictionary\n  where the key is not a string.\n\nadditional ``bar_format`` parameters may also be defined by overriding\n``format_dict``, and the bar itself may be modified using ``ascii``:\n\n.. code:: python\n\n    from tqdm import tqdm\n    class tqdmextraformat(tqdm):\n        \"\"\"provides a `total_time` format parameter\"\"\"\n        @property\n        def format_dict(self):\n            d = super(tqdmextraformat, self).format_dict\n            total_time = d[\"elapsed\"] * (d[\"total\"] or 0) / max(d[\"n\"], 1)\n            d.update(total_time=self.format_interval(total_time) + \" in total\")\n            return d\n\n    for i in tqdmextraformat(\n          range(9), ascii=\" .oo0\",\n          bar_format=\"{total_time}: {percentage:.0f}%|{bar}{r_bar}\"):\n        if i == 4:\n            break\n\n.. code::\n\n    00:00 in total: 44%|0000.     | 4/9 [00:00<00:00, 962.93it/s]\n\nnote that ``{bar}`` also supports a format specifier ``[width][type]``.\n\n- ``width``\n\n  * unspecified (default): automatic to fill ``ncols``\n  * ``int >= 0``: fixed width overriding ``ncols`` logic\n  * ``int < 0``: subtract from the automatic default\n\n- ``type``\n\n  * ``a``: ascii (``ascii=true`` override)\n  * ``u``: unicode (``ascii=false`` override)\n  * ``b``: blank (``ascii=\"  \"`` override)\n\nthis means a fixed bar with right-justified text may be created by using:\n``bar_format=\"{l_bar}{bar:10}|{bar:-10b}right-justified\"``\n\nnested progress bars\n~~~~~~~~~~~~~~~~~~~~\n\n``tqdm`` supports nested progress bars. here's an example:\n\n.. code:: python\n\n    from tqdm.auto import trange\n    from time import sleep\n\n    for i in trange(4, desc='1st loop'):\n        for j in trange(5, desc='2nd loop'):\n            for k in trange(50, desc='3rd loop', leave=false):\n                sleep(0.01)\n\nfor manual control over positioning (e.g. for multi-processing use),\nyou may specify ``position=n`` where ``n=0`` for the outermost bar,\n``n=1`` for the next, and so on.\nhowever, it's best to check if ``tqdm`` can work without manual ``position``\nfirst.\n\n.. code:: python\n\n    from time import sleep\n    from tqdm import trange, tqdm\n    from multiprocessing import pool, rlock, freeze_support\n\n    l = list(range(9))\n\n    def progresser(n):\n        interval = 0.001 / (n + 2)\n        total = 5000\n        text = \"#{}, est. {:<04.2}s\".format(n, interval * total)\n        for _ in trange(total, desc=text, position=n):\n            sleep(interval)\n\n    if __name__ == '__main__':\n        freeze_support()  # for windows support\n        tqdm.set_lock(rlock())  # for managing output contention\n        p = pool(initializer=tqdm.set_lock, initargs=(tqdm.get_lock(),))\n        p.map(progresser, l)\n\nnote that in python 3, ``tqdm.write`` is thread-safe:\n\n.. code:: python\n\n    from time import sleep\n    from tqdm import tqdm, trange\n    from concurrent.futures import threadpoolexecutor\n\n    l = list(range(9))\n\n    def progresser(n):\n        interval = 0.001 / (n + 2)\n        total = 5000\n        text = \"#{}, est. {:<04.2}s\".format(n, interval * total)\n        for _ in trange(total, desc=text):\n            sleep(interval)\n        if n == 6:\n            tqdm.write(\"n == 6 completed.\")\n            tqdm.write(\"`tqdm.write()` is thread-safe in py3!\")\n\n    if __name__ == '__main__':\n        with threadpoolexecutor() as p:\n            p.map(progresser, l)\n\nhooks and callbacks\n~~~~~~~~~~~~~~~~~~~\n\n``tqdm`` can easily support callbacks/hooks and manual updates.\nhere's an example with ``urllib``:\n\n**``urllib.urlretrieve`` documentation**\n\n    | [...]\n    | if present, the hook function will be called once\n    | on establishment of the network connection and once after each block read\n    | thereafter. the hook will be passed three arguments; a count of blocks\n    | transferred so far, a block size in bytes, and the total size of the file.\n    | [...]\n\n.. code:: python\n\n    import urllib, os\n    from tqdm import tqdm\n    urllib = getattr(urllib, 'request', urllib)\n\n    class tqdmupto(tqdm):\n        \"\"\"provides `update_to(n)` which uses `tqdm.update(delta_n)`.\"\"\"\n        def update_to(self, b=1, bsize=1, tsize=none):\n            \"\"\"\n            b  : int, optional\n                number of blocks transferred so far [default: 1].\n            bsize  : int, optional\n                size of each block (in tqdm units) [default: 1].\n            tsize  : int, optional\n                total size (in tqdm units). if [default: none] remains unchanged.\n            \"\"\"\n            if tsize is not none:\n                self.total = tsize\n            return self.update(b * bsize - self.n)  # also sets self.n = b * bsize\n\n    eg_link = \"https://caspersci.uk.to/matryoshka.zip\"\n    with tqdmupto(unit='b', unit_scale=true, unit_divisor=1024, miniters=1,\n                  desc=eg_link.split('/')[-1]) as t:  # all optional kwargs\n        urllib.urlretrieve(eg_link, filename=os.devnull,\n                           reporthook=t.update_to, data=none)\n        t.total = t.n\n\ninspired by `twine#242 <https://github.com/pypa/twine/pull/242>`__.\nfunctional alternative in\n`examples/tqdm_wget.py <https://github.com/tqdm/tqdm/blob/master/examples/tqdm_wget.py>`__.\n\nit is recommend to use ``miniters=1`` whenever there is potentially\nlarge differences in iteration speed (e.g. downloading a file over\na patchy connection).\n\n**wrapping read/write methods**\n\nto measure throughput through a file-like object's ``read`` or ``write``\nmethods, use ``callbackiowrapper``:\n\n.. code:: python\n\n    from tqdm.auto import tqdm\n    from tqdm.utils import callbackiowrapper\n\n    with tqdm(total=file_obj.size,\n              unit='b', unit_scale=true, unit_divisor=1024) as t:\n        fobj = callbackiowrapper(t.update, file_obj, \"read\")\n        while true:\n            chunk = fobj.read(chunk_size)\n            if not chunk:\n                break\n        t.reset()\n        # ... continue to use `t` for something else\n\nalternatively, use the even simpler ``wrapattr`` convenience function,\nwhich would condense both the ``urllib`` and ``callbackiowrapper`` examples\ndown to:\n\n.. code:: python\n\n    import urllib, os\n    from tqdm import tqdm\n\n    eg_link = \"https://caspersci.uk.to/matryoshka.zip\"\n    response = getattr(urllib, 'request', urllib).urlopen(eg_link)\n    with tqdm.wrapattr(open(os.devnull, \"wb\"), \"write\",\n                       miniters=1, desc=eg_link.split('/')[-1],\n                       total=getattr(response, 'length', none)) as fout:\n        for chunk in response:\n            fout.write(chunk)\n\nthe ``requests`` equivalent is nearly identical:\n\n.. code:: python\n\n    import requests, os\n    from tqdm import tqdm\n\n    eg_link = \"https://caspersci.uk.to/matryoshka.zip\"\n    response = requests.get(eg_link, stream=true)\n    with tqdm.wrapattr(open(os.devnull, \"wb\"), \"write\",\n                       miniters=1, desc=eg_link.split('/')[-1],\n                       total=int(response.headers.get('content-length', 0))) as fout:\n        for chunk in response.iter_content(chunk_size=4096):\n            fout.write(chunk)\n\n**custom callback**\n\n``tqdm`` is known for intelligently skipping unnecessary displays. to make a\ncustom callback take advantage of this, simply use the return value of\n``update()``. this is set to ``true`` if a ``display()`` was triggered.\n\n.. code:: python\n\n    from tqdm.auto import tqdm as std_tqdm\n\n    def external_callback(*args, **kwargs):\n        ...\n\n    class tqdmext(std_tqdm):\n        def update(self, n=1):\n            displayed = super(tqdmext, self).update(n)\n            if displayed:\n                external_callback(**self.format_dict)\n            return displayed\n\n``asyncio``\n~~~~~~~~~~~\n\nnote that ``break`` isn't currently caught by asynchronous iterators.\nthis means that ``tqdm`` cannot clean up after itself in this case:\n\n.. code:: python\n\n    from tqdm.asyncio import tqdm\n\n    async for i in tqdm(range(9)):\n        if i == 2:\n            break\n\ninstead, either call ``pbar.close()`` manually or use the context manager syntax:\n\n.. code:: python\n\n    from tqdm.asyncio import tqdm\n\n    with tqdm(range(9)) as pbar:\n        async for i in pbar:\n            if i == 2:\n                break\n\npandas integration\n~~~~~~~~~~~~~~~~~~\n\ndue to popular demand we've added support for ``pandas`` -- here's an example\nfor ``dataframe.progress_apply`` and ``dataframegroupby.progress_apply``:\n\n.. code:: python\n\n    import pandas as pd\n    import numpy as np\n    from tqdm import tqdm\n\n    df = pd.dataframe(np.random.randint(0, 100, (100000, 6)))\n\n    # register `pandas.progress_apply` and `pandas.series.map_apply` with `tqdm`\n    # (can use `tqdm.gui.tqdm`, `tqdm.notebook.tqdm`, optional kwargs, etc.)\n    tqdm.pandas(desc=\"my bar!\")\n\n    # now you can use `progress_apply` instead of `apply`\n    # and `progress_map` instead of `map`\n    df.progress_apply(lambda x: x**2)\n    # can also groupby:\n    # df.groupby(0).progress_apply(lambda x: x**2)\n\nin case you're interested in how this works (and how to modify it for your\nown callbacks), see the\n`examples <https://github.com/tqdm/tqdm/tree/master/examples>`__\nfolder or import the module and run ``help()``.\n\nkeras integration\n~~~~~~~~~~~~~~~~~\n\na ``keras`` callback is also available:\n\n.. code:: python\n\n    from tqdm.keras import tqdmcallback\n\n    ...\n\n    model.fit(..., verbose=0, callbacks=[tqdmcallback()])\n\ndask integration\n~~~~~~~~~~~~~~~~\n\na ``dask`` callback is also available:\n\n.. code:: python\n\n    from tqdm.dask import tqdmcallback\n\n    with tqdmcallback(desc=\"compute\"):\n        ...\n        arr.compute()\n\n    # or use callback globally\n    cb = tqdmcallback(desc=\"global\")\n    cb.register()\n    arr.compute()\n\nipython/jupyter integration\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nipython/jupyter is supported via the ``tqdm.notebook`` submodule:\n\n.. code:: python\n\n    from tqdm.notebook import trange, tqdm\n    from time import sleep\n\n    for i in trange(3, desc='1st loop'):\n        for j in tqdm(range(100), desc='2nd loop'):\n            sleep(0.01)\n\nin addition to ``tqdm`` features, the submodule provides a native jupyter\nwidget (compatible with ipython v1-v4 and jupyter), fully working nested bars\nand colour hints (blue: normal, green: completed, red: error/interrupt,\nlight blue: no eta); as demonstrated below.\n\n|screenshot-jupyter1|\n|screenshot-jupyter2|\n|screenshot-jupyter3|\n\nthe ``notebook`` version supports percentage or pixels for overall width\n(e.g.: ``ncols='100%'`` or ``ncols='480px'``).\n\nit is also possible to let ``tqdm`` automatically choose between\nconsole or notebook versions by using the ``autonotebook`` submodule:\n\n.. code:: python\n\n    from tqdm.autonotebook import tqdm\n    tqdm.pandas()\n\nnote that this will issue a ``tqdmexperimentalwarning`` if run in a notebook\nsince it is not meant to be possible to distinguish between ``jupyter notebook``\nand ``jupyter console``. use ``auto`` instead of ``autonotebook`` to suppress\nthis warning.\n\nnote that notebooks will display the bar in the cell where it was created.\nthis may be a different cell from the one where it is used.\nif this is not desired, either\n\n- delay the creation of the bar to the cell where it must be displayed, or\n- create the bar with ``display=false``, and in a later cell call\n  ``display(bar.container)``:\n\n.. code:: python\n\n    from tqdm.notebook import tqdm\n    pbar = tqdm(..., display=false)\n\n.. code:: python\n\n    # different cell\n    display(pbar.container)\n\nthe ``keras`` callback has a ``display()`` method which can be used likewise:\n\n.. code:: python\n\n    from tqdm.keras import tqdmcallback\n    cbk = tqdmcallback(display=false)\n\n.. code:: python\n\n    # different cell\n    cbk.display()\n    model.fit(..., verbose=0, callbacks=[cbk])\n\nanother possibility is to have a single bar (near the top of the notebook)\nwhich is constantly re-used (using ``reset()`` rather than ``close()``).\nfor this reason, the notebook version (unlike the cli version) does not\nautomatically call ``close()`` upon ``exception``.\n\n.. code:: python\n\n    from tqdm.notebook import tqdm\n    pbar = tqdm()\n\n.. code:: python\n\n    # different cell\n    iterable = range(100)\n    pbar.reset(total=len(iterable))  # initialise with new `total`\n    for i in iterable:\n        pbar.update()\n    pbar.refresh()  # force print final status but don't `close()`\n\ncustom integration\n~~~~~~~~~~~~~~~~~~\n\nto change the default arguments (such as making ``dynamic_ncols=true``),\nsimply use built-in python magic:\n\n.. code:: python\n\n    from functools import partial\n    from tqdm import tqdm as std_tqdm\n    tqdm = partial(std_tqdm, dynamic_ncols=true)\n\nfor further customisation,\n``tqdm`` may be inherited from to create custom callbacks (as with the\n``tqdmupto`` example `above <#hooks-and-callbacks>`__) or for custom frontends\n(e.g. guis such as notebook or plotting packages). in the latter case:\n\n1. ``def __init__()`` to call ``super().__init__(..., gui=true)`` to disable\n   terminal ``status_printer`` creation.\n2. redefine: ``close()``, ``clear()``, ``display()``.\n\nconsider overloading ``display()`` to use e.g.\n``self.frontend(**self.format_dict)`` instead of ``self.sp(repr(self))``.\n\nsome submodule examples of inheritance:\n\n- `tqdm/notebook.py <https://github.com/tqdm/tqdm/blob/master/tqdm/notebook.py>`__\n- `tqdm/gui.py <https://github.com/tqdm/tqdm/blob/master/tqdm/gui.py>`__\n- `tqdm/tk.py <https://github.com/tqdm/tqdm/blob/master/tqdm/tk.py>`__\n- `tqdm/contrib/slack.py <https://github.com/tqdm/tqdm/blob/master/tqdm/contrib/slack.py>`__\n- `tqdm/contrib/discord.py <https://github.com/tqdm/tqdm/blob/master/tqdm/contrib/discord.py>`__\n- `tqdm/contrib/telegram.py <https://github.com/tqdm/tqdm/blob/master/tqdm/contrib/telegram.py>`__\n\ndynamic monitor/meter\n~~~~~~~~~~~~~~~~~~~~~\n\nyou can use a ``tqdm`` as a meter which is not monotonically increasing.\nthis could be because ``n`` decreases (e.g. a cpu usage monitor) or ``total``\nchanges.\n\none example would be recursively searching for files. the ``total`` is the\nnumber of objects found so far, while ``n`` is the number of those objects which\nare files (rather than folders):\n\n.. code:: python\n\n    from tqdm import tqdm\n    import os.path\n\n    def find_files_recursively(path, show_progress=true):\n        files = []\n        # total=1 assumes `path` is a file\n        t = tqdm(total=1, unit=\"file\", disable=not show_progress)\n        if not os.path.exists(path):\n            raise ioerror(\"cannot find:\" + path)\n\n        def append_found_file(f):\n            files.append(f)\n            t.update()\n\n        def list_found_dir(path):\n            \"\"\"returns os.listdir(path) assuming os.path.isdir(path)\"\"\"\n            listing = os.listdir(path)\n            # subtract 1 since a \"file\" we found was actually this directory\n            t.total += len(listing) - 1\n            # fancy way to give info without forcing a refresh\n            t.set_postfix(dir=path[-10:], refresh=false)\n            t.update(0)  # may trigger a refresh\n            return listing\n\n        def recursively_search(path):\n            if os.path.isdir(path):\n                for f in list_found_dir(path):\n                    recursively_search(os.path.join(path, f))\n            else:\n                append_found_file(path)\n\n        recursively_search(path)\n        t.set_postfix(dir=path)\n        t.close()\n        return files\n\nusing ``update(0)`` is a handy way to let ``tqdm`` decide when to trigger a\ndisplay refresh to avoid console spamming.\n\nwriting messages\n~~~~~~~~~~~~~~~~\n\nthis is a work in progress (see\n`#737 <https://github.com/tqdm/tqdm/issues/737>`__).\n\nsince ``tqdm`` uses a simple printing mechanism to display progress bars,\nyou should not write any message in the terminal using ``print()`` while\na progressbar is open.\n\nto write messages in the terminal without any collision with ``tqdm`` bar\ndisplay, a ``.write()`` method is provided:\n\n.. code:: python\n\n    from tqdm.auto import tqdm, trange\n    from time import sleep\n\n    bar = trange(10)\n    for i in bar:\n        # print using tqdm class method .write()\n        sleep(0.1)\n        if not (i % 3):\n            tqdm.write(\"done task %i\" % i)\n        # can also use bar.write()\n\nby default, this will print to standard output ``sys.stdout``. but you can\nspecify any file-like object using the ``file`` argument. for example, this\ncan be used to redirect the messages writing to a log file or class.\n\nredirecting writing\n~~~~~~~~~~~~~~~~~~~\n\nif using a library that can print messages to the console, editing the library\nby  replacing ``print()`` with ``tqdm.write()`` may not be desirable.\nin that case, redirecting ``sys.stdout`` to ``tqdm.write()`` is an option.\n\nto redirect ``sys.stdout``, create a file-like class that will write\nany input string to ``tqdm.write()``, and supply the arguments\n``file=sys.stdout, dynamic_ncols=true``.\n\na reusable canonical example is given below:\n\n.. code:: python\n\n    from time import sleep\n    import contextlib\n    import sys\n    from tqdm import tqdm\n    from tqdm.contrib import dummytqdmfile\n\n\n    @contextlib.contextmanager\n    def std_out_err_redirect_tqdm():\n        orig_out_err = sys.stdout, sys.stderr\n        try:\n            sys.stdout, sys.stderr = map(dummytqdmfile, orig_out_err)\n            yield orig_out_err[0]\n        # relay exceptions\n        except exception as exc:\n            raise exc\n        # always restore sys.stdout/err if necessary\n        finally:\n            sys.stdout, sys.stderr = orig_out_err\n\n    def some_fun(i):\n        print(\"fee, fi, fo,\".split()[i])\n\n    # redirect stdout to tqdm.write() (don't forget the `as save_stdout`)\n    with std_out_err_redirect_tqdm() as orig_stdout:\n        # tqdm needs the original stdout\n        # and dynamic_ncols=true to autodetect console width\n        for i in tqdm(range(3), file=orig_stdout, dynamic_ncols=true):\n            sleep(.5)\n            some_fun(i)\n\n    # after the `with`, printing is restored\n    print(\"done!\")\n\nredirecting ``logging``\n~~~~~~~~~~~~~~~~~~~~~~~\n\nsimilar to ``sys.stdout``/``sys.stderr`` as detailed above, console ``logging``\nmay also be redirected to ``tqdm.write()``.\n\nwarning: if also redirecting ``sys.stdout``/``sys.stderr``, make sure to\nredirect ``logging`` first if needed.\n\nhelper methods are available in ``tqdm.contrib.logging``. for example:\n\n.. code:: python\n\n    import logging\n    from tqdm import trange\n    from tqdm.contrib.logging import logging_redirect_tqdm\n\n    log = logging.getlogger(__name__)\n\n    if __name__ == '__main__':\n        logging.basicconfig(level=logging.info)\n        with logging_redirect_tqdm():\n            for i in trange(9):\n                if i == 4:\n                    log.info(\"console logging redirected to `tqdm.write()`\")\n        # logging restored\n\nmonitoring thread, intervals and miniters\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n``tqdm`` implements a few tricks to increase efficiency and reduce overhead.\n\n- avoid unnecessary frequent bar refreshing: ``mininterval`` defines how long\n  to wait between each refresh. ``tqdm`` always gets updated in the background,\n  but it will display only every ``mininterval``.\n- reduce number of calls to check system clock/time.\n- ``mininterval`` is more intuitive to configure than ``miniters``.\n  a clever adjustment system ``dynamic_miniters`` will automatically adjust\n  ``miniters`` to the amount of iterations that fit into time ``mininterval``.\n  essentially, ``tqdm`` will check if it's time to print without actually\n  checking time. this behaviour can be still be bypassed by manually setting\n  ``miniters``.\n\nhowever, consider a case with a combination of fast and slow iterations.\nafter a few fast iterations, ``dynamic_miniters`` will set ``miniters`` to a\nlarge number. when iteration rate subsequently slows, ``miniters`` will\nremain large and thus reduce display update frequency. to address this:\n\n- ``maxinterval`` defines the maximum time between display refreshes.\n  a concurrent monitoring thread checks for overdue updates and forces one\n  where necessary.\n\nthe monitoring thread should not have a noticeable overhead, and guarantees\nupdates at least every 10 seconds by default.\nthis value can be directly changed by setting the ``monitor_interval`` of\nany ``tqdm`` instance (i.e. ``t = tqdm.tqdm(...); t.monitor_interval = 2``).\nthe monitor thread may be disabled application-wide by setting\n``tqdm.tqdm.monitor_interval = 0`` before instantiation of any ``tqdm`` bar.\n\n\nmerch\n-----\n\nyou can buy `tqdm branded merch <https://tqdm.github.io/merch>`__ now!\n\ncontributions\n-------------\n\n|github-commits| |github-issues| |github-prs| |openhub-status| |github-contributions| |cii best practices|\n\nall source code is hosted on `github <https://github.com/tqdm/tqdm>`__.\ncontributions are welcome.\n\nsee the\n`contributing <https://github.com/tqdm/tqdm/blob/master/contributing.md>`__\nfile for more information.\n\ndevelopers who have made significant contributions, ranked by *sloc*\n(surviving lines of code,\n`git fame <https://github.com/casperdcl/git-fame>`__ ``-wmc --excl '\\.(png|gif|jpg)$'``),\nare:\n\n==================== ======================================================== ==== ================================\nname                 id                                                       sloc notes\n==================== ======================================================== ==== ================================\ncasper da costa-luis `casperdcl <https://github.com/casperdcl>`__             ~80% primary maintainer |gift-casper|\nstephen larroque     `lrq3000 <https://github.com/lrq3000>`__                 ~9%  team member\nmartin zugnoni       `martinzugnoni <https://github.com/martinzugnoni>`__     ~3%\ndaniel ecer          `de-code <https://github.com/de-code>`__                 ~2%\nrichard sheridan     `richardsheridan <https://github.com/richardsheridan>`__ ~1%\nguangshuo chen       `chengs <https://github.com/chengs>`__                   ~1%\nhelio machado        `0x2b3bfa0 <https://github.com/0x2b3bfa0>`__             ~1%\nkyle altendorf       `altendky <https://github.com/altendky>`__               <1%\nnoam yorav-raphael   `noamraph <https://github.com/noamraph>`__               <1%  original author\nmatthew stevens      `mjstevens777 <https://github.com/mjstevens777>`__       <1%\nhadrien mary         `hadim <https://github.com/hadim>`__                     <1%  team member\nmikhail korobov      `kmike <https://github.com/kmike>`__                     <1%  team member\n==================== ======================================================== ==== ================================\n\nports to other languages\n~~~~~~~~~~~~~~~~~~~~~~~~\n\na list is available on\n`this wiki page <https://github.com/tqdm/tqdm/wiki/tqdm-ports>`__.\n\n\nlicence\n-------\n\nopen source (osi approved): |licence|\n\ncitation information: |doi|\n\n|readme-hits| (since 19 may 2016)\n\n.. |logo| image:: https://tqdm.github.io/img/logo.gif\n.. |screenshot| image:: https://tqdm.github.io/img/tqdm.gif\n.. |video| image:: https://tqdm.github.io/img/video.jpg\n   :target: https://tqdm.github.io/video\n.. |slides| image:: https://tqdm.github.io/img/slides.jpg\n   :target: https://tqdm.github.io/pydata2019/slides.html\n.. |merch| image:: https://tqdm.github.io/img/merch.jpg\n   :target: https://tqdm.github.io/merch\n.. |build-status| image:: https://img.shields.io/github/actions/workflow/status/tqdm/tqdm/test.yml?branch=master&label=tqdm&logo=github\n   :target: https://github.com/tqdm/tqdm/actions/workflows/test.yml\n.. |coverage-status| image:: https://img.shields.io/coveralls/github/tqdm/tqdm/master?logo=coveralls\n   :target: https://coveralls.io/github/tqdm/tqdm\n.. |branch-coverage-status| image:: https://codecov.io/gh/tqdm/tqdm/branch/master/graph/badge.svg\n   :target: https://codecov.io/gh/tqdm/tqdm\n.. |codacy-grade| image:: https://app.codacy.com/project/badge/grade/3f965571598f44549c7818f29cdcf177\n   :target: https://www.codacy.com/gh/tqdm/tqdm/dashboard\n.. |cii best practices| image:: https://bestpractices.coreinfrastructure.org/projects/3264/badge\n   :target: https://bestpractices.coreinfrastructure.org/projects/3264\n.. |github-status| image:: https://img.shields.io/github/tag/tqdm/tqdm.svg?maxage=86400&logo=github&logocolor=white\n   :target: https://github.com/tqdm/tqdm/releases\n.. |github-forks| image:: https://img.shields.io/github/forks/tqdm/tqdm.svg?logo=github&logocolor=white\n   :target: https://github.com/tqdm/tqdm/network\n.. |github-stars| image:: https://img.shields.io/github/stars/tqdm/tqdm.svg?logo=github&logocolor=white\n   :target: https://github.com/tqdm/tqdm/stargazers\n.. |github-commits| image:: https://img.shields.io/github/commit-activity/y/tqdm/tqdm.svg?logo=git&logocolor=white\n   :target: https://github.com/tqdm/tqdm/graphs/commit-activity\n.. |github-issues| image:: https://img.shields.io/github/issues-closed/tqdm/tqdm.svg?logo=github&logocolor=white\n   :target: https://github.com/tqdm/tqdm/issues?q=\n.. |github-prs| image:: https://img.shields.io/github/issues-pr-closed/tqdm/tqdm.svg?logo=github&logocolor=white\n   :target: https://github.com/tqdm/tqdm/pulls\n.. |github-contributions| image:: https://img.shields.io/github/contributors/tqdm/tqdm.svg?logo=github&logocolor=white\n   :target: https://github.com/tqdm/tqdm/graphs/contributors\n.. |github-updated| image:: https://img.shields.io/github/last-commit/tqdm/tqdm/master.svg?logo=github&logocolor=white&label=pushed\n   :target: https://github.com/tqdm/tqdm/pulse\n.. |gift-casper| image:: https://img.shields.io/badge/dynamic/json.svg?color=ff69b4&label=gifts%20received&prefix=%c2%a3&query=%24..sum&url=https%3a%2f%2fcaspersci.uk.to%2fgifts.json\n   :target: https://cdcl.ml/sponsor\n.. |versions| image:: https://img.shields.io/pypi/v/tqdm.svg\n   :target: https://tqdm.github.io/releases\n.. |pypi-downloads| image:: https://img.shields.io/pypi/dm/tqdm.svg?label=pypi%20downloads&logo=pypi&logocolor=white\n   :target: https://pepy.tech/project/tqdm\n.. |py-versions| image:: https://img.shields.io/pypi/pyversions/tqdm.svg?logo=python&logocolor=white\n   :target: https://pypi.org/project/tqdm\n.. |conda-forge-status| image:: https://img.shields.io/conda/v/conda-forge/tqdm.svg?label=conda-forge&logo=conda-forge\n   :target: https://anaconda.org/conda-forge/tqdm\n.. |snapcraft| image:: https://img.shields.io/badge/snap-install-82bea0.svg?logo=snapcraft\n   :target: https://snapcraft.io/tqdm\n.. |docker| image:: https://img.shields.io/badge/docker-pull-blue.svg?logo=docker&logocolor=white\n   :target: https://hub.docker.com/r/tqdm/tqdm\n.. |libraries-rank| image:: https://img.shields.io/librariesio/sourcerank/pypi/tqdm.svg?logo=koding&logocolor=white\n   :target: https://libraries.io/pypi/tqdm\n.. |libraries-dependents| image:: https://img.shields.io/librariesio/dependent-repos/pypi/tqdm.svg?logo=koding&logocolor=white\n    :target: https://github.com/tqdm/tqdm/network/dependents\n.. |openhub-status| image:: https://www.openhub.net/p/tqdm/widgets/project_thin_badge?format=gif\n   :target: https://www.openhub.net/p/tqdm?ref=thin+badge\n.. |awesome-python| image:: https://awesome.re/mentioned-badge.svg\n   :target: https://github.com/vinta/awesome-python\n.. |licence| image:: https://img.shields.io/pypi/l/tqdm.svg\n   :target: https://raw.githubusercontent.com/tqdm/tqdm/master/licence\n.. |doi| image:: https://img.shields.io/badge/doi-10.5281/zenodo.595120-blue.svg\n   :target: https://doi.org/10.5281/zenodo.595120\n.. |binder-demo| image:: https://mybinder.org/badge_logo.svg\n   :target: https://mybinder.org/v2/gh/tqdm/tqdm/master?filepath=demo.ipynb\n.. |screenshot-jupyter1| image:: https://tqdm.github.io/img/jupyter-1.gif\n.. |screenshot-jupyter2| image:: https://tqdm.github.io/img/jupyter-2.gif\n.. |screenshot-jupyter3| image:: https://tqdm.github.io/img/jupyter-3.gif\n.. |readme-hits| image:: https://caspersci.uk.to/cgi-bin/hits.cgi?q=tqdm&style=social&r=https://github.com/tqdm/tqdm&l=https://tqdm.github.io/img/favicon.png&f=https://tqdm.github.io/img/logo.gif\n   :target: https://caspersci.uk.to/cgi-bin/hits.cgi?q=tqdm&a=plot&r=https://github.com/tqdm/tqdm&l=https://tqdm.github.io/img/favicon.png&f=https://tqdm.github.io/img/logo.gif&style=social\n",
  "docs_url": null,
  "keywords": "progressbar,progressmeter,progress,bar,meter,rate,eta,console,terminal,time",
  "license": "mpl-2.0 and mit",
  "name": "tqdm",
  "package_url": "https://pypi.org/project/tqdm/",
  "project_url": "https://pypi.org/project/tqdm/",
  "project_urls": {
    "changelog": "https://tqdm.github.io/releases",
    "homepage": "https://tqdm.github.io",
    "repository": "https://github.com/tqdm/tqdm",
    "wiki": "https://github.com/tqdm/tqdm/wiki"
  },
  "release_url": "https://pypi.org/project/tqdm/4.66.1/",
  "requires_dist": [
    "colorama ; platform_system == \"Windows\"",
    "pytest >=6 ; extra == 'dev'",
    "pytest-cov ; extra == 'dev'",
    "pytest-timeout ; extra == 'dev'",
    "pytest-xdist ; extra == 'dev'",
    "ipywidgets >=6 ; extra == 'notebook'",
    "slack-sdk ; extra == 'slack'",
    "requests ; extra == 'telegram'"
  ],
  "requires_python": ">=3.7",
  "summary": "fast, extensible progress meter",
  "version": "4.66.1",
  "releases": [],
  "developers": [
    "devs@tqdm.ml"
  ],
  "kwds": "progress_map progressmeter progressbar progressbars show_progress",
  "license_kwds": "mpl-2.0 and mit",
  "libtype": "pypi",
  "id": "pypi_tqdm",
  "homepage": "",
  "release_count": 133,
  "dependency_ids": [
    "pypi_colorama",
    "pypi_ipywidgets",
    "pypi_pytest",
    "pypi_pytest_cov",
    "pypi_pytest_timeout",
    "pypi_pytest_xdist",
    "pypi_requests",
    "pypi_slack_sdk"
  ],
  "documentation_summary": "The HTML text provides detailed information about `tqdm`, a Python library available on PyPI for adding progress meters to loops. The latest version, 4.66.2, was released on February 10, 2024. `tqdm` is described as a fast, extensible progress meter that works on any platform and in various environments, including consoles, terminals, and IPython/Jupyter notebooks. It requires Python version 3.7 or higher and is licensed under both the MIT License and Mozilla Public License 2.0. The library is designed for developers, educators, end-users, and system administrators, offering features like nested progress bars, hooks, callbacks, and integration with Pandas, Keras, Dask, and asyncio. Installation instructions are provided for different platforms, including PyPI, GitHub, Conda, Snapcraft, and Docker. The document also includes usage examples, advanced features, and information on contributing to the project.",
  "embedding": [
    -0.026959894225001335,
    0.0040092747658491135,
    0.005199307110160589,
    -0.039951078593730927,
    0.012785762548446655,
    0.0049974266439676285,
    -0.006010370794683695,
    -0.02426815591752529,
    -0.02030138112604618,
    -0.019975539296865463,
    0.024083983153104782,
    0.00977526418864727,
    -0.001159041770733893,
    0.03249921277165413,
    -0.029722468927502632,
    -0.007288946770131588,
    0.015612088143825531,
    -0.0030636244919151068,
    -0.015286246314644814,
    -0.023163124918937683,
    0.017368802800774574,
    0.010774041526019573,
    -0.017765479162335396,
    -0.00816730409860611,
    -0.015838760882616043,
    0.029977476224303246,
    0.02106640301644802,
    -0.0215764157474041,
    0.005365769844502211,
    0.01613627001643181,
    0.004671584349125624,
    -0.003508115652948618,
    -0.03170585632324219,
    -0.03329256549477577,
    -0.02214309759438038,
    -0.01956469565629959,
    0.009166081435978413,
    0.024395659565925598,
    0.0432378351688385,
    -0.019593030214309692,
    0.007678540889173746,
    0.01438663899898529,
    0.007041023578494787,
    0.0022596444468945265,
    -0.0291274543851614,
    -0.022808950394392014,
    0.01428746897727251,
    -0.02047138661146164,
    -0.021378077566623688,
    -0.007246445864439011,
    0.025245681405067444,
    0.009024410508573055,
    -0.021463079378008842,
    -0.01333119347691536,
    0.002909557893872261,
    -0.00521347438916564,
    0.0025235055945813656,
    0.030374154448509216,
    -0.010561535134911537,
    -0.011135300621390343,
    0.02331896312534809,
    -0.010370280593633652,
    -0.026903226971626282,
    -0.01362870167940855,
    -0.0038144781719893217,
    -0.004671584349125624,
    -0.04604291170835495,
    0.018558835610747337,
    0.025982368737459183,
    0.002550069009885192,
    0.04468287527561188,
    0.02966580167412758,
    -0.0028953906148672104,
    0.011404475197196007,
    0.03997941315174103,
    -0.022653112187981606,
    -0.029410794377326965,
    0.02537318505346775,
    -0.004919508006423712,
    -0.0037613515742123127,
    0.01599459908902645,
    -0.0225822776556015,
    0.002496942412108183,
    0.03742934390902519,
    0.01615043543279171,
    0.023177292197942734,
    -0.015810426324605942,
    0.019663864746689796,
    -0.007961881347000599,
    -0.028702441602945328,
    0.013883708044886589,
    0.012559088878333569,
    0.023007288575172424,
    0.056243184953927994,
    0.006028079427778721,
    0.013394945301115513,
    -0.017198797315359116,
    0.024764003232121468,
    -0.004625541623681784,
    -0.02102390117943287,
    0.003375299507752061,
    0.02088223025202751,
    -0.015257912687957287,
    -0.01593792997300625,
    -0.047827959060668945,
    -0.03289588913321495,
    0.00044670476927421987,
    0.010809458792209625,
    0.009916934184730053,
    0.010462366044521332,
    -0.02370147407054901,
    0.02986413985490799,
    0.00728186359629035,
    -0.019607195630669594,
    -0.012134077958762646,
    0.014273302629590034,
    0.01913968287408352,
    -0.014988738112151623,
    0.011347807012498379,
    -0.0015884804306551814,
    0.011234470643103123,
    0.008110635913908482,
    0.019777201116085052,
    -0.0040376088581979275,
    -0.007150818128138781,
    0.0011856049532070756,
    0.017354635521769524,
    0.00455116480588913,
    0.005627860315144062,
    -0.01193573884665966,
    0.020797228440642357,
    0.021491413936018944,
    0.0037188504356890917,
    -0.012948683463037014,
    -0.018261326476931572,
    -0.002105577616021037,
    -0.009527340531349182,
    -0.005029302556067705,
    -0.031054172664880753,
    -0.009654844179749489,
    0.00180806964635849,
    0.03669265657663345,
    -0.008514396846294403,
    -0.005468481220304966,
    -0.021831423044204712,
    0.02671905606985092,
    -0.003658640431240201,
    -0.0025571524165570736,
    0.009633593261241913,
    -0.011468226090073586,
    0.03873271495103836,
    0.012006574310362339,
    -0.016490446403622627,
    -7.315952825592831e-05,
    -0.006091831251978874,
    0.00930066779255867,
    0.015668757259845734,
    0.007791877258569002,
    -0.028149927034974098,
    0.007657290436327457,
    0.011411557905375957,
    0.03482260927557945,
    -0.00818147137761116,
    -0.017765479162335396,
    0.00968317873775959,
    0.04717627540230751,
    0.017241299152374268,
    -0.014252051711082458,
    -0.017354635521769524,
    -0.01578209362924099,
    -0.001213053590618074,
    0.027469908818602562,
    -0.005280767567455769,
    -0.002564236056059599,
    0.004565331619232893,
    0.001793902600184083,
    0.016065433621406555,
    0.011709066107869148,
    0.0022454774007201195,
    0.013543698936700821,
    0.01634877547621727,
    0.022681446745991707,
    -0.003927814308553934,
    0.03156418725848198,
    -0.028489936143159866,
    -0.01745380461215973,
    0.007331448141485453,
    -0.002318083541467786,
    0.011333639733493328,
    0.01249533798545599,
    0.01957886293530464,
    0.026818225160241127,
    0.006938312668353319,
    -0.02215726487338543,
    -0.5938827395439148,
    0.0012741490500047803,
    -0.041991133242845535,
    -0.026761556044220924,
    -0.01287076435983181,
    -0.008578148670494556,
    0.011730317026376724,
    0.03927106037735939,
    -0.008493145927786827,
    0.025231514126062393,
    -0.011177802458405495,
    0.013402028940618038,
    -0.01389787532389164,
    -0.015697089955210686,
    -0.01918218471109867,
    -0.008741069585084915,
    -0.014804566279053688,
    -0.012382001616060734,
    -0.04009275138378143,
    0.009073995053768158,
    -0.017057128250598907,
    0.026804057881236076,
    -0.009817765094339848,
    0.020003873854875565,
    0.0003701141686178744,
    0.007480202242732048,
    -0.002181725576519966,
    0.010271110571920872,
    0.010398614220321178,
    0.004487412981688976,
    -0.04337950423359871,
    0.01400412805378437,
    0.0015946784988045692,
    -0.020995566621422768,
    0.04641125351190567,
    -0.018091322854161263,
    -0.026903226971626282,
    0.02423982135951519,
    -0.005557025317102671,
    0.047431282699108124,
    -0.01712796278297901,
    0.0006113967392593622,
    0.01297701708972454,
    -0.003655098844319582,
    0.0014654041733592749,
    0.024877339601516724,
    0.026010703295469284,
    -0.0008668463560752571,
    0.006290169898420572,
    -0.008981909602880478,
    -0.018530501052737236,
    -0.021321410313248634,
    0.0026403837837278843,
    -0.0011909175664186478,
    0.021349743008613586,
    0.022978954017162323,
    0.03179085999727249,
    0.008507313206791878,
    0.008875656872987747,
    -0.014308719895780087,
    0.013593283481895924,
    0.014393722638487816,
    0.001640721457079053,
    0.001107686199247837,
    -0.0169012900441885,
    0.0038605208974331617,
    -0.018728839233517647,
    -0.017992151901125908,
    0.0031521685887128115,
    -0.01651877909898758,
    -0.012155328877270222,
    -0.010306528769433498,
    0.017595475539565086,
    -0.0028883072081953287,
    0.049726344645023346,
    0.04757295176386833,
    0.02572736144065857,
    -0.017184630036354065,
    0.02836243249475956,
    0.030345819890499115,
    0.010880294255912304,
    -0.010752790607511997,
    0.03210253268480301,
    -0.003091958584263921,
    0.04842297360301018,
    0.0015211869031190872,
    0.002861744025722146,
    0.005702237598598003,
    0.027767416089773178,
    0.024083983153104782,
    -0.008946491405367851,
    0.01748213917016983,
    0.010561535134911537,
    -0.005510982125997543,
    -0.017595475539565086,
    0.031280845403671265,
    0.007926464080810547,
    -0.014875401742756367,
    -0.04468287527561188,
    -0.013784538954496384,
    -0.008698568679392338,
    -0.02877327799797058,
    0.0007287175976671278,
    -0.002348188543692231,
    0.018658004701137543,
    0.019989706575870514,
    -0.02253977581858635,
    0.012785762548446655,
    0.023715641349554062,
    -0.00239246035926044,
    -0.02836243249475956,
    -0.0469212681055069,
    -0.012077409774065018,
    -0.013054936192929745,
    0.011489477008581161,
    -0.027115732431411743,
    0.02839076705276966,
    0.014875401742756367,
    0.010264026932418346,
    0.009236915968358517,
    0.005309101659804583,
    -0.007253529503941536,
    0.01878550834953785,
    0.02048555389046669,
    0.02066972479224205,
    0.00947775598615408,
    0.03346256911754608,
    -0.008486062288284302,
    -0.04063109681010246,
    -0.008726902306079865,
    -0.00958400871604681,
    0.016292106360197067,
    0.027469908818602562,
    -0.007458951324224472,
    0.031450849026441574,
    0.0034833233803510666,
    0.031280845403671265,
    0.004051776137202978,
    -0.012013657949864864,
    -0.02593986690044403,
    -0.011043215170502663,
    -0.00131487927865237,
    0.003881771583110094,
    -0.003934897948056459,
    -0.002422565361484885,
    -0.039554402232170105,
    -0.01097946334630251,
    -0.00029374490259215236,
    -0.0004267823533155024,
    -0.02139224484562874,
    -0.025982368737459183,
    -0.008280640468001366,
    -0.014705397188663483,
    0.023333130404353142,
    0.012134077958762646,
    -0.015456250868737698,
    -0.02839076705276966,
    -0.011340723372995853,
    -0.006091831251978874,
    0.0028635149355977774,
    -0.0004564446280710399,
    0.014499975368380547,
    0.0008916386868804693,
    -0.00956984143704176,
    -0.020627224817872047,
    -0.012814096175134182,
    -0.032612547278404236,
    0.01575375907123089,
    -0.0016708263428881764,
    -0.02499067597091198,
    -0.017892982810735703,
    -0.029609132558107376,
    0.0059926616959273815,
    0.006577052641659975,
    0.04043275862932205,
    0.023814810439944267,
    0.00656996900215745,
    -0.014025378972291946,
    -0.014960404485464096,
    -0.011871987022459507,
    0.006562885828316212,
    0.00789813045412302,
    -0.01861550286412239,
    -0.0356726311147213,
    0.02593986690044403,
    0.00484513072296977,
    0.017524641007184982,
    0.013444529846310616,
    0.01129113882780075,
    -0.009449422359466553,
    0.004675126168876886,
    0.00502221891656518,
    -0.01599459908902645,
    0.020754726603627205,
    -0.015300413593649864,
    -0.0051497225649654865,
    0.020046375691890717,
    0.0009571613045409322,
    0.01260159071534872,
    0.0394693985581398,
    0.029070785269141197,
    0.02727157063782215,
    -0.010589869692921638,
    -0.00166639918461442,
    -0.02235560491681099,
    0.0030069563072174788,
    0.03547429293394089,
    -0.026223208755254745,
    0.014917902648448944,
    0.028135759755969048,
    0.01707129366695881,
    1.905080716824159e-05,
    -0.03496427834033966,
    -0.021491413936018944,
    0.006959563121199608,
    0.04020608589053154,
    -0.00666559673845768,
    0.013069103471934795,
    -0.01154614519327879,
    0.005397645756602287,
    -0.0050930543802678585,
    0.024395659565925598,
    0.005712862592190504,
    -0.010476533323526382,
    -0.010242776945233345,
    -0.008634816855192184,
    -0.004724711179733276,
    0.02292228676378727,
    -0.011595729738473892,
    -0.023403964936733246,
    -0.01156031247228384,
    0.020712226629257202,
    0.0038357286248356104,
    -0.013734954409301281,
    0.010391530580818653,
    -0.015668757259845734,
    0.022780615836381912,
    -0.0007229622569866478,
    0.03519095107913017,
    -0.008351475931704044,
    -0.005337435752153397,
    -0.007494369056075811,
    0.008854405954480171,
    -0.01711379550397396,
    0.00409073568880558,
    0.020768893882632256,
    0.04116944596171379,
    -0.0018735922640189528,
    -0.006045788526535034,
    -0.0032371708657592535,
    -0.0007712187361903489,
    0.01800631918013096,
    -0.017765479162335396,
    -0.00030680515919812024,
    0.005886408966034651,
    -0.02836243249475956,
    0.007246445864439011,
    0.0079902159050107,
    0.025599857792258263,
    -0.003045915625989437,
    0.006541634909808636,
    -0.004862839821726084,
    0.009711512364447117,
    -0.00265277992002666,
    0.03062916174530983,
    -0.034312594681978226,
    0.009739846922457218,
    -0.05301309749484062,
    -0.0059643276035785675,
    -0.036720991134643555,
    -0.008344392292201519,
    -0.006835601292550564,
    0.0013352443929761648,
    -0.0413677841424942,
    0.020173877477645874,
    -0.0067151812836527824,
    -0.0028883072081953287,
    0.02195892669260502,
    -0.0019993248861283064,
    0.01483290083706379,
    -0.011007796972990036,
    -0.030147481709718704,
    0.03453926742076874,
    -0.0016699410043656826,
    -0.010115273296833038,
    0.004122611600905657,
    -0.02049972116947174,
    0.010207358747720718,
    -0.011404475197196007,
    0.028419101610779762,
    0.023248128592967987,
    0.01090862788259983,
    0.0039526065811514854,
    0.022412272170186043,
    -0.02514651231467724,
    -0.002927266526967287,
    0.01938052289187908,
    0.014450390823185444,
    -0.016207104548811913,
    -0.010065688751637936,
    0.027512410655617714,
    0.018856342881917953,
    0.0034284258726984262,
    0.003550616791471839,
    0.04071610048413277,
    0.007954798638820648,
    0.0022313103545457125,
    -0.013749121688306332,
    -0.003672807477414608,
    -0.017878815531730652,
    -0.007728125434368849,
    -0.007260612677782774,
    -0.010349029675126076,
    -0.0077422927133738995,
    -0.0041899047791957855,
    0.011921572498977184,
    0.03703266754746437,
    -0.008726902306079865,
    0.01879967376589775,
    -0.0034284258726984262,
    0.010086938738822937,
    -0.01915385015308857,
    0.0038782297633588314,
    0.014471640810370445,
    0.035615961998701096,
    0.02106640301644802,
    0.010660705156624317,
    0.008379809558391571,
    -0.02705906517803669,
    0.0034000917803496122,
    -0.03961107134819031,
    0.002624445827677846,
    0.011723233386874199,
    0.009640676900744438,
    -0.01156031247228384,
    -0.01504540629684925,
    -0.0007149932789616287,
    -0.008585232309997082,
    0.006708098109811544,
    -0.0037932274863123894,
    0.003157481085509062,
    -0.008408144116401672,
    0.0059855785220861435,
    -0.013125771656632423,
    0.01165239792317152,
    -0.007136651314795017,
    0.012056158855557442,
    -0.0028351808432489634,
    0.014131631702184677,
    0.004696377087384462,
    0.03247087821364403,
    0.007154359947890043,
    0.010795291513204575,
    -0.026988228783011436,
    -0.00019269400218036026,
    0.004554706625640392,
    -0.017156297340989113,
    0.02742740698158741,
    -0.03272588551044464,
    0.03986607864499092,
    0.02932579256594181,
    0.014230800792574883,
    0.00563848577439785,
    0.010101106017827988,
    0.012240330688655376,
    0.031479183584451675,
    -0.0019585946574807167,
    0.025302350521087646,
    0.0006556687294505537,
    -0.007543953601270914,
    -0.0013538387138396502,
    0.008620649576187134,
    -0.01108571607619524,
    -0.009066911414265633,
    0.007012689486145973,
    0.012332416139543056,
    -0.03876104578375816,
    -0.023772308602929115,
    0.021647252142429352,
    0.01656128093600273,
    0.001153729041106999,
    -0.027469908818602562,
    0.00521347438916564,
    -0.04587290436029434,
    -0.0008929668110795319,
    -0.034085921943187714,
    -0.017340468242764473,
    -0.014457473531365395,
    0.00521347438916564,
    0.020910564810037613,
    0.016490446403622627,
    0.008670234121382236,
    -0.01391204260289669,
    -0.007324364501982927,
    -0.010639454238116741,
    -0.026194874197244644,
    -0.01419538352638483,
    -0.0042182388715445995,
    0.03530428558588028,
    -0.006091831251978874,
    0.014932069927453995,
    0.007586454972624779,
    0.004632625263184309,
    0.0008836697088554502,
    -0.014344137161970139,
    -0.02275228127837181,
    -0.0017885899869725108,
    -0.02895744889974594,
    0.0017726520309224725,
    -0.01844549924135208,
    -0.006499134004116058,
    -0.002300374675542116,
    -0.00040199002251029015,
    0.041594456881284714,
    0.004915966186672449,
    -0.0028440351597964764,
    0.009272334165871143,
    -0.028050757944583893,
    0.013125771656632423,
    0.012559088878333569,
    -0.001298055867664516,
    0.008613565936684608,
    0.0016416067956015468,
    -0.005688070319592953,
    -0.0013281608698889613,
    -0.03133751451969147,
    0.0038746879436075687,
    -0.0029591424390673637,
    0.02779575064778328,
    -0.019493859261274338,
    -0.010929878801107407,
    0.007218111772090197,
    -0.010101106017827988,
    -0.01326035801321268,
    0.03275422006845474,
    -0.007437700871378183,
    -0.0040482343174517155,
    0.03320756554603577,
    0.03482260927557945,
    0.0028918490279465914,
    0.012176578864455223,
    0.029949141666293144,
    -0.0026616344694048166,
    -0.017694644629955292,
    -0.007579371333122253,
    -0.012714927084743977,
    0.016192937269806862,
    0.02086806297302246,
    0.0034780106507241726,
    0.026449881494045258,
    -0.007097691763192415,
    -0.02331896312534809,
    -0.025472354143857956,
    -0.0026616344694048166,
    0.04391785338521004,
    -0.0017097857780754566,
    -0.01974886655807495,
    -0.010859043337404728,
    0.010731539689004421,
    -0.017595475539565086,
    -0.009229832328855991,
    0.0206838920712471,
    -0.004434286616742611,
    -0.0008650754461996257,
    -0.010540285147726536,
    0.027696581557393074,
    -0.011942822486162186,
    -0.006846226751804352,
    -0.004767212085425854,
    -0.023049788549542427,
    -0.014471640810370445,
    0.0021923508029431105,
    0.020542221143841743,
    0.023602304980158806,
    0.0023871478624641895,
    0.012877847999334335,
    0.0042465729638934135,
    -0.013267441652715206,
    0.005758905783295631,
    -0.0014503516722470522,
    0.01193573884665966,
    0.001139561994932592,
    0.00667976401746273,
    0.03830770030617714,
    0.018898844718933105,
    0.014946237206459045,
    0.018856342881917953,
    -0.008301891386508942,
    0.002918412210419774,
    0.0023304796777665615,
    -0.019678032025694847,
    4.358028036222095e-06,
    0.0011767505202442408,
    -0.021307243034243584,
    0.00788396317511797,
    0.004044692497700453,
    -0.012403251603245735,
    -0.028504103422164917,
    0.011411557905375957,
    0.011971157044172287,
    0.01089446060359478,
    0.01483290083706379,
    -0.009874433279037476,
    -0.033519238233566284,
    0.0005139982677064836,
    0.007157901767641306,
    -0.00549681531265378,
    0.032385874539613724,
    -0.05088804289698601,
    -0.01766631007194519,
    0.016391275450587273,
    0.026010703295469284,
    0.024579830467700958,
    0.032612547278404236,
    0.00628662807866931,
    0.016617948189377785,
    0.020542221143841743,
    0.032244205474853516,
    0.03213086724281311,
    0.0043032411485910416,
    -0.011390307918190956,
    -0.035219285637140274,
    -0.023219794034957886,
    0.020797228440642357,
    0.014223718084394932,
    -0.00026054089539684355,
    0.0011227387003600597,
    0.011199052445590496,
    0.002705906517803669,
    0.032442543655633926,
    0.018686337396502495,
    -0.02516067959368229,
    0.02364480495452881,
    -0.012509504333138466,
    -0.02406981773674488,
    -0.013564949855208397,
    -0.03595597296953201,
    -0.021123070269823074,
    0.017977986484766006,
    -0.0059643276035785675,
    0.012353667058050632,
    0.0005626974743790925,
    -0.01231824979186058,
    -0.005815573967993259,
    0.017340468242764473,
    0.014733731746673584,
    0.030515825375914574,
    0.017878815531730652,
    0.003945523407310247,
    0.023729808628559113,
    0.005535774398595095,
    0.010568618774414062,
    -0.012459919787943363,
    -0.003325714962556958,
    -0.00021316982747521251,
    0.045929573476314545,
    0.005546399857848883,
    0.00038892976590432227,
    -0.008578148670494556,
    0.010738623328506947,
    0.011815318837761879,
    -0.028801610693335533,
    -0.027186566963791847,
    0.01802048645913601,
    0.014337054453790188,
    -0.0009009357891045511,
    -0.034680936485528946,
    0.001649575773626566,
    -0.03207419812679291,
    0.023956481367349625,
    -0.019593030214309692,
    -0.023828977718949318,
    0.013097437098622322,
    0.012438669800758362,
    -0.012807012535631657,
    0.027937421575188637,
    -0.015002905391156673,
    -0.01004443783313036,
    -0.0037932274863123894,
    -0.03281088545918465,
    -0.01898384653031826,
    -0.032045867294073105,
    -0.048196300864219666,
    -0.005362228024750948,
    -0.008195637725293636,
    0.037514347583055496,
    0.007164985407143831,
    -0.006265377625823021,
    0.03853437304496765,
    0.0013910271227359772,
    -0.01295576710253954,
    -0.027696581557393074,
    -0.0010961754014715552,
    0.04114111140370369,
    -0.038987718522548676,
    -0.004005733411759138,
    -0.013742038048803806,
    -0.03584263473749161,
    -0.014329970814287663,
    0.00023530583712272346,
    -0.006573510821908712,
    -0.02275228127837181,
    -0.016490446403622627,
    -0.005865158513188362,
    -0.012594507075846195,
    -0.020032208412885666,
    -0.007643123157322407,
    0.006081205792725086,
    -0.006566427182406187,
    -0.011886154301464558,
    -0.029269123449921608,
    -0.023418132215738297,
    0.027894919738173485,
    -0.01745380461215973,
    -0.035785965621471405,
    -0.027370739728212357,
    -0.005461397580802441,
    0.017170464619994164,
    0.02143474668264389,
    0.023446466773748398,
    0.0077706268057227135,
    0.04791296273469925,
    -0.006693930830806494,
    0.03397258371114731,
    -0.0145637271925807,
    0.0033735285978764296,
    -0.02652071602642536,
    -0.010030270554125309,
    -0.02234143763780594,
    -0.02140641212463379,
    0.022213933989405632,
    -0.01970636658370495,
    -0.023899812251329422,
    -0.031450849026441574,
    -0.0010164858540520072,
    0.020570555701851845,
    -0.009166081435978413,
    -0.03133751451969147,
    -0.01539958268404007,
    0.020329715684056282,
    0.019947204738855362,
    -0.0025181930977851152,
    -0.02235560491681099,
    0.052333079278469086,
    -0.004388243425637484,
    0.009052744135260582,
    0.014903736300766468,
    0.009378586895763874,
    0.006573510821908712,
    -0.01844549924135208,
    -0.010072772391140461,
    0.0094069205224514,
    -0.034114256501197815,
    -0.023007288575172424,
    -0.026237376034259796,
    -0.008096468634903431,
    -0.03213086724281311,
    0.019465526565909386,
    -0.03292422369122505,
    -0.013699537143111229,
    -0.04377618432044983,
    0.04774295538663864,
    0.001530041336081922,
    -0.0004657417593989521,
    -0.001640721457079053,
    0.025429854169487953,
    -0.02181725576519966,
    -0.017142130061984062,
    -0.010086938738822937,
    -0.020938899368047714,
    -0.0077210417948663235,
    0.019805535674095154,
    -0.034114256501197815,
    -0.03456760197877884,
    -0.01504540629684925,
    0.020372217521071434,
    0.03680599480867386,
    -0.0337742455303669,
    -0.02406981773674488,
    0.004855756182223558,
    -0.027229068800807,
    -0.012190746143460274,
    -0.02307812310755253,
    0.029920808970928192,
    0.0077777099795639515,
    0.0039915661327540874,
    -0.000779187714215368,
    0.018516333773732185,
    -0.000589260715059936,
    0.01042694877833128,
    -0.02762574702501297,
    -0.018941344693303108,
    0.004175737965852022,
    0.0028404933400452137,
    -0.011206136085093021,
    -0.027200734242796898,
    -0.011794068850576878,
    -0.014861234463751316,
    0.005061178468167782,
    0.025316517800092697,
    -0.012105743400752544,
    0.026619885116815567,
    -0.012183662503957748,
    -0.008231055922806263,
    -0.0008225743076764047,
    -0.0188138410449028,
    -0.011234470643103123,
    -0.003242483362555504,
    0.011964073404669762,
    0.0049301330000162125,
    -0.02482067048549652,
    0.004830963909626007,
    0.0037046833895146847,
    0.002020575338974595,
    -0.005075345281511545,
    -0.00274840765632689,
    -0.00033469655318185687,
    -0.0034160297363996506,
    -0.020613057538866997,
    -0.04153778776526451,
    0.01042694877833128,
    0.0012670655269175768,
    0.016235439106822014,
    -0.007242904044687748,
    -0.002318083541467786,
    0.007862712256610394,
    -0.010561535134911537,
    -0.007643123157322407,
    -0.01634877547621727,
    0.024168986827135086,
    -0.03235753998160362,
    -0.009470672346651554,
    -0.000391143374145031,
    -0.036522652953863144,
    -0.025231514126062393,
    -0.0032123783603310585,
    0.0375426821410656,
    0.007062274031341076,
    -0.006623095832765102,
    0.011029047891497612,
    -0.05414646118879318,
    -0.03796769306063652,
    -0.00488054845482111,
    0.01193573884665966,
    -0.0011245094938203692,
    -0.011206136085093021,
    0.011999490670859814,
    0.01089446060359478,
    0.012169495224952698,
    -0.01802048645913601,
    -0.015385415405035019,
    -0.024126484990119934,
    -0.008061051368713379,
    -0.02031554840505123,
    0.007968964986503124,
    -0.02292228676378727,
    -0.0012945141643285751,
    -0.009909851476550102,
    -0.016830455511808395,
    0.019833868369460106,
    0.19312521815299988,
    0.007317280862480402,
    0.011567396111786366,
    0.036550987511873245,
    -0.0009571613045409322,
    0.012835347093641758,
    0.017524641007184982,
    -0.0012528984807431698,
    -0.011709066107869148,
    0.018700504675507545,
    0.015102074481546879,
    -0.0015592608833685517,
    -0.008946491405367851,
    0.00248808809556067,
    0.009243999607861042,
    -0.002165787620469928,
    -0.02181725576519966,
    -0.01802048645913601,
    -0.01991887204349041,
    -0.005217015743255615,
    -0.005153264384716749,
    -0.017807980999350548,
    -0.02724323607981205,
    -0.02368730679154396,
    0.017326300963759422,
    0.0015601463383063674,
    0.008202721364796162,
    -0.0028086176607757807,
    0.020343882963061333,
    0.0026085078716278076,
    -0.014322887174785137,
    -0.004724711179733276,
    -0.019423024728894234,
    -0.017354635521769524,
    -0.04434286430478096,
    -0.019692199304699898,
    0.008613565936684608,
    -0.007480202242732048,
    0.010866126976907253,
    0.03502094745635986,
    -0.010419865138828754,
    -0.015512919053435326,
    -0.017028793692588806,
    -0.027172401547431946,
    0.00018339688540436327,
    -0.008089384995400906,
    -0.006272461265325546,
    0.019975539296865463,
    -0.0017301508923992515,
    0.004097818862646818,
    -0.008705652318894863,
    -0.020343882963061333,
    0.04471120983362198,
    0.0038321868050843477,
    -0.0225256085395813,
    -0.029354127123951912,
    -0.013812873512506485,
    0.017028793692588806,
    0.020995566621422768,
    0.016079600900411606,
    -0.012382001616060734,
    0.03717433661222458,
    -0.007041023578494787,
    0.0003703355323523283,
    -0.04643958806991577,
    0.0014981654239818454,
    -0.009931101463735104,
    0.023517301306128502,
    -0.015158742666244507,
    0.021151404827833176,
    -0.022794783115386963,
    -0.010965296067297459,
    -0.0077210417948663235,
    -0.01593792997300625,
    -0.006396422628313303,
    -0.020995566621422768,
    0.045164555311203,
    0.0014769148547202349,
    0.0319325290620327,
    0.0375710166990757,
    -0.01435830444097519,
    -0.004388243425637484,
    -0.02120807208120823,
    -0.007458951324224472,
    0.0014538934919983149,
    0.0027873669750988483,
    0.01896967925131321,
    -0.005595984403043985,
    -0.011036131531000137,
    -0.008174387738108635,
    -0.02140641212463379,
    -0.02045721933245659,
    0.0014149340568110347,
    0.010108189657330513,
    -0.007905213162302971,
    0.03082749992609024,
    -0.005532232578843832,
    0.006187458988279104,
    0.007529786787927151,
    -0.024664832279086113,
    -0.022043928503990173,
    0.04224614053964615,
    0.02500484138727188,
    -0.0012360750697553158,
    -0.010419865138828754,
    -0.002224226715043187,
    -0.01650461181998253,
    0.00036945007741451263,
    0.014988738112151623,
    -0.018686337396502495,
    0.007891046814620495,
    -0.021873924881219864,
    0.0067151812836527824,
    -0.005868700332939625,
    -0.016462111845612526,
    0.005270142573863268,
    -0.010363196954131126,
    0.0049584670923650265,
    -0.0004949612775817513,
    0.011468226090073586,
    0.029382459819316864,
    -0.014329970814287663,
    -0.005758905783295631,
    -0.028815777972340584,
    -0.02217143215239048,
    -0.015654589980840683,
    8.478093513986096e-05,
    -0.00023464176047127694,
    -0.017949651926755905,
    0.025118177756667137,
    0.007002064026892185,
    -0.04391785338521004,
    -1.0064969728773576e-06,
    0.00220474717207253,
    -0.015909597277641296,
    -0.03170585632324219,
    -0.03079916536808014,
    -0.01136905699968338,
    -0.010604036040604115,
    0.01081654243171215,
    -0.03252754732966423,
    0.016122102737426758,
    -0.014804566279053688,
    0.010681955143809319,
    0.0253873523324728,
    -0.04717627540230751,
    0.010823626071214676,
    -0.00788396317511797,
    0.0007096806075423956,
    -0.010490699671208858,
    -0.01576792635023594,
    -0.01428038626909256,
    -0.000935025280341506,
    -0.021293075755238533,
    0.014117464423179626,
    -0.007303114049136639,
    -0.013685369864106178,
    -0.004625541623681784,
    0.016221271827816963,
    0.003771976800635457,
    -0.03249921277165413,
    -0.019678032025694847,
    -0.003065395401790738,
    -0.008124803192913532,
    -0.029609132558107376,
    0.013203689828515053,
    -0.1805448830127716,
    0.018162157386541367,
    0.031309179961681366,
    -0.026549050584435463,
    -0.008656066842377186,
    -0.012799928896129131,
    0.021179739385843277,
    0.00484513072296977,
    -0.029637467116117477,
    0.002374751726165414,
    0.00022113879094831645,
    -0.006410589907318354,
    -0.017807980999350548,
    -0.008691485039889812,
    -0.00625121034681797,
    -0.006917061749845743,
    -0.0010209130123257637,
    -0.0010147149441763759,
    0.020896397531032562,
    0.01674545183777809,
    0.020783061161637306,
    -0.007480202242732048,
    0.005599526222795248,
    0.016235439106822014,
    0.009647760540246964,
    -0.00043939988245256245,
    -0.020386384800076485,
    0.008316057734191418,
    0.0013511823490262032,
    -0.019054681062698364,
    -0.018303828313946724,
    0.0011457601794973016,
    0.010915711522102356,
    -0.00027227296959608793,
    0.031479183584451675,
    0.0094069205224514,
    0.01950802654027939,
    -0.02051388844847679,
    -0.0043244920670986176,
    0.015668757259845734,
    0.00206838920712471,
    0.04530622437596321,
    0.05020802468061447,
    -0.01913968287408352,
    0.007508536335080862,
    0.009945268742740154,
    -0.007926464080810547,
    -0.041991133242845535,
    0.0025057969614863396,
    -0.023035623133182526,
    0.039356064051389694,
    -0.03893105313181877,
    -0.0037613515742123127,
    -0.02497650869190693,
    0.002312770811840892,
    -0.004862839821726084,
    -0.003012268804013729,
    0.003159251995384693,
    0.012998268008232117,
    -0.018176324665546417,
    -0.0048734648153185844,
    -0.027115732431411743,
    0.013402028940618038,
    0.008903990499675274,
    -0.03026081807911396,
    -0.023177292197942734,
    -0.04522122070193291,
    0.017807980999350548,
    -0.006892269477248192,
    0.0038782297633588314,
    0.010441115126013756,
    -0.0028635149355977774,
    0.0027448658365756273,
    0.01138322427868843,
    -0.005323268938809633,
    0.01562625542283058,
    -0.0026935103815048933,
    0.01476206537336111,
    0.015229578129947186,
    -0.014393722638487816,
    -0.0178504828363657,
    0.042756155133247375,
    -0.0011687815422192216,
    0.01474789809435606,
    0.028064925223588943,
    0.011779901571571827,
    -0.0009279417572543025,
    0.005588901229202747,
    -0.012360750697553158,
    -0.013557866215705872,
    0.013664118945598602,
    -0.0029538297094404697,
    0.026449881494045258,
    -0.01768047735095024,
    0.004062401596456766,
    0.010604036040604115,
    0.0007636924856342375,
    -0.01743963733315468,
    0.014691229909658432,
    -0.0357009656727314,
    0.0060316212475299835,
    0.016617948189377785,
    -0.0027218444738537073,
    0.013054936192929745,
    0.034114256501197815,
    0.04731794446706772,
    -0.03159252181649208,
    0.022638944908976555,
    0.0300624780356884,
    0.007193319499492645,
    -0.017538806423544884,
    -0.002643925603479147,
    -0.007002064026892185,
    -0.013380778022110462,
    0.004933674819767475,
    0.026251543313264847,
    0.01053320150822401,
    0.002681114012375474,
    -0.004604291170835495,
    0.008613565936684608,
    0.04176446050405502,
    -0.013579117134213448,
    -0.02650654874742031,
    0.016192937269806862,
    -0.0009217436308972538,
    -0.04411619156599045,
    -0.09514590352773666,
    -0.013543698936700821,
    0.029779138043522835,
    0.01956469565629959,
    0.0026368419639766216,
    0.012353667058050632,
    -0.012665342539548874,
    -0.001076695742085576,
    0.012367834337055683,
    0.013189523480832577,
    0.0013299317797645926,
    0.025075677782297134,
    0.008330225013196468,
    -0.01578209362924099,
    0.008096468634903431,
    -0.02177475579082966,
    0.013161188922822475,
    0.0005874898051843047,
    -0.014188299886882305,
    0.03136584907770157,
    -0.021746421232819557,
    -0.011390307918190956,
    0.024098150432109833,
    0.0005941306590102613,
    -0.00950609054416418,
    -0.004023442044854164,
    -0.03723100572824478,
    0.012509504333138466,
    0.007444784510880709,
    0.024381492286920547,
    0.0034673854243010283,
    -0.01820465922355652,
    0.005925368517637253,
    -0.00667976401746273,
    -0.006095373071730137,
    0.0021764130797237158,
    -0.029722468927502632,
    -0.02592569962143898,
    0.0413961187005043,
    -0.013848290778696537,
    -0.016972124576568604,
    -0.004317408427596092,
    0.01751047372817993,
    0.010632370598614216,
    0.007211028132587671,
    0.008486062288284302,
    -0.011213219724595547,
    0.03062916174530983,
    0.017425470054149628,
    -0.045929573476314545,
    -0.05675319954752922,
    -0.0024154819548130035,
    -0.01972053200006485,
    -0.008939407765865326,
    -6.175947783049196e-05,
    -0.016844620928168297,
    0.014365388080477715,
    0.016575448215007782,
    -0.01935219019651413,
    0.013586200773715973,
    -0.011319472454488277,
    -0.002969767665490508,
    -0.012233247049152851,
    0.011666565202176571,
    0.00451574707403779,
    -0.01936635747551918,
    0.023446466773748398,
    0.017255466431379318,
    0.029750803485512733,
    -0.02745574153959751,
    -0.01109988335520029,
    0.0009837244870141149,
    -0.028249096125364304,
    0.006658513098955154,
    -0.011928655207157135,
    0.004558247979730368,
    -0.016490446403622627,
    -0.003093729494139552,
    0.004126152954995632,
    -0.003910105675458908,
    -0.006318503990769386,
    -0.005518065765500069,
    -0.03496427834033966,
    0.018658004701137543,
    0.013798706233501434,
    0.0005263944040052593,
    -0.025259848684072495,
    0.010689038783311844,
    0.021831423044204712,
    -0.03640931844711304,
    -0.011446976102888584,
    -0.000182068717549555,
    0.0319608636200428,
    0.0037082252092659473,
    -0.00451574707403779,
    0.01879967376589775,
    0.022270601242780685,
    -0.0036232229322195053,
    -0.023559803143143654,
    0.008308974094688892,
    -0.03657932206988335,
    -0.00996651966124773,
    -0.08239556103944778,
    0.01691545732319355,
    -0.0026138206012547016,
    -0.027668246999382973,
    0.024083983153104782,
    -0.01913968287408352,
    -0.0018718213541433215,
    -0.01352244894951582,
    0.015017072670161724,
    -0.006460174452513456,
    -0.03893105313181877,
    0.009243999607861042,
    -0.01674545183777809,
    -0.007143734488636255,
    -0.028659941628575325,
    0.0034691563341766596,
    0.0413961187005043,
    0.002433190820738673,
    0.04683626443147659,
    0.004441369790583849,
    -0.030515825375914574,
    -0.006353921722620726,
    0.039724405854940414,
    0.005482648033648729,
    0.006460174452513456,
    -0.012403251603245735,
    -0.0020648473873734474,
    0.009895684197545052,
    -0.007947714999318123,
    -0.010596953332424164,
    0.027356572449207306,
    0.025259848684072495,
    -0.0030246649403125048,
    0.008436477743089199,
    -0.015527086332440376,
    0.01803465373814106,
    0.017765479162335396,
    0.018473831936717033,
    0.005858074873685837,
    0.023630637675523758,
    -0.01636294275522232,
    -0.01173740066587925,
    0.020825562998652458,
    -0.019989706575870514,
    -0.005727029871195555,
    -0.0039030220359563828,
    -0.004165112506598234,
    -0.015739591792225838,
    0.028674108907580376,
    0.024310657754540443,
    0.03397258371114731,
    0.001518530654720962,
    -0.01731213368475437,
    -0.020244713872671127,
    0.01633460819721222,
    -0.0021073485258966684,
    0.027880752459168434,
    0.0006468143546953797,
    -0.01593792997300625,
    -0.015909597277641296,
    0.016292106360197067,
    -0.0010005478980019689,
    -0.0010182566475123167,
    0.026166539639234543,
    0.012615757063031197,
    -0.029467463493347168,
    -0.04454120248556137,
    -0.02310645766556263,
    0.0028528894763439894,
    -0.0272574033588171,
    -0.0145637271925807,
    -0.032414209097623825,
    0.02633654512465,
    -0.01004443783313036,
    0.014932069927453995,
    -0.020202212035655975,
    -0.012134077958762646,
    -0.016773786395788193,
    -0.02013137750327587,
    0.005858074873685837,
    0.01651877909898758,
    -0.00019180856179445982,
    -0.020981399342417717,
    0.002063076477497816,
    0.03026081807911396,
    -0.0025128803681582212,
    -0.01484706811606884,
    0.00046884079347364604,
    0.0103277787566185,
    0.024934006854891777,
    -0.0041155279614031315,
    -0.005248891655355692,
    0.012552006170153618,
    0.01915385015308857,
    -0.003910105675458908,
    0.011156551539897919,
    0.008110635913908482,
    -0.010596953332424164,
    0.006566427182406187,
    0.021477246657013893,
    0.02479233592748642,
    -0.026067370548844337,
    0.005270142573863268,
    0.00020597562252078205,
    -0.004933674819767475,
    -0.005776614416390657,
    0.002468608319759369,
    -0.01454955991357565,
    0.005089512560516596,
    0.03309422731399536,
    -0.004763670265674591,
    -0.006077664438635111,
    -0.007678540889173746,
    0.008528564125299454,
    -0.03621097654104233,
    0.011064465157687664,
    -0.005737654864788055,
    -0.0018434872617945075,
    -0.02780991792678833,
    0.026464048773050308,
    0.007062274031341076,
    0.0005671246908605099,
    0.03215920180082321,
    -0.017992151901125908,
    0.012785762548446655,
    0.01843133196234703,
    0.016051266342401505,
    -0.014252051711082458,
    0.01004443783313036,
    0.008705652318894863,
    -0.012552006170153618,
    0.034652601927518845,
    -0.012296998873353004,
    -0.02479233592748642,
    0.009293584153056145,
    -0.019493859261274338,
    -0.013054936192929745,
    0.003256650408729911,
    0.029014118015766144,
    0.0582549087703228,
    0.025444021448493004,
    -0.007912296801805496,
    0.028999950736761093,
    0.011786985211074352,
    -0.0011856049532070756,
    0.032980892807245255,
    0.008379809558391571,
    -0.01751047372817993,
    -0.017921317368745804,
    0.020202212035655975,
    -0.012013657949864864,
    -0.029920808970928192,
    0.007111859042197466,
    -0.027569077908992767,
    0.009527340531349182,
    0.002937891986221075,
    0.02465066686272621,
    -0.03459593653678894,
    0.0032513379119336605,
    0.018162157386541367,
    0.017354635521769524,
    -0.004168654326349497,
    -0.004225322511047125,
    -0.036720991134643555,
    -0.006198083981871605,
    0.03487927466630936,
    0.04567456617951393,
    -0.00956984143704176,
    -0.04380451515316963,
    0.023970646783709526,
    0.008202721364796162,
    -0.010809458792209625,
    -0.01804882101714611,
    0.002969767665490508,
    -0.011050298810005188,
    -0.01615043543279171,
    0.002960913348942995,
    -0.00642829854041338,
    -0.0008491375483572483,
    0.00025235055363737047,
    -0.008386893197894096,
    -0.02479233592748642,
    -0.00465741753578186,
    0.003934897948056459,
    0.011567396111786366,
    -0.006633720826357603,
    -0.0018682796508073807,
    -0.0394693985581398
  ]
}
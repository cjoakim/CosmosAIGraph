<!DOCTYPE html>
<html lang="en">
<head>
<title>Graph Visualization</title>

<style type="text/css">
  html,
  body {
    font: 11pt arial;
  }
  #graph_viz {
    width: 100%;
    height: 768px;
    border: 1px solid lightgray;
  }
</style>

<script
  type="text/javascript"
  src="https://unpkg.com/vis-network/standalone/umd/vis-network.min.js">
</script>

<script type="text/javascript">
  var nodes = null;
  var edges = null;
  var network = null;

  function draw() {
    var nodes = {{ nodes_json | tojson }};
    var edges = {{ edges_json | tojson }};
    var container = document.getElementById("graph_viz");
    var data = {
      nodes: nodes,
      edges: edges,
    };

    // https://visjs.github.io/vis-network/docs/network/nodes.html#
    // https://visjs.github.io/vis-network/docs/network/edges.html#

    var options = {
      edges: {
        width: 0.1,
        widthConstraint: true,
        dashes: false
      },
      nodes: {
        //shape: "dot",
        color: {
          border: '#2B7CE9',
          background: '#FFFFFF',
          highlight: {
            border: '#2B7CE9',
            background: '#D2E5FF'
          },
          hover: {
            border: '#00FF00',
            background: '#D2E5FF'
          }
        },
        font: {
          color: '#343434',
          size: 12, // px
          //face: 'arial',
          background: 'none',
          //strokeWidth: 0,
          //strokeColor: '#ffffff'
        },
        scalingg: {
          customScalingFunction: function (min, max, total, value) {
            return value / total;
          },
          min: 1,
          max: 50,
        },
      },
    };

    var x = {
      edges:{
        arrows: {
          to: {
            enabled: true,
            scaleFactor: 1,
            type: "arrow"
          },
          middle: {
            enabled: false,
            imageHeight: 32,
            imageWidth: 32,
            scaleFactor: 1,
            src: "https://visjs.org/images/visjs_logo.png",
            type: "image"
          },
          from: {
            enabled: false,
            scaleFactor: 1,
            type: "arrow"
          }
        },
        endPointOffset: {
          from: 0,
          to: 0
        },
        arrowStrikethrough: true,
        chosen: true,
        color: {
          color:'#848484',
          highlight:'#848484',
          hover: '#848484',
          inherit: 'from',
          opacity:1.0
        },
        dashes: false,
        font: {
          color: '#343434',
          size: 14, // px
          face: 'arial',
          background: 'none',
          strokeWidth: 2, // px
          strokeColor: '#ffffff',
          align: 'horizontal',
          multi: false,
          vadjust: 0,
          bold: {
            color: '#343434',
            size: 14, // px
            face: 'arial',
            vadjust: 0,
            mod: 'bold'
          },
          ital: {
            color: '#343434',
            size: 14, // px
            face: 'arial',
            vadjust: 0,
            mod: 'italic',
          },
          boldital: {
            color: '#343434',
            size: 14, // px
            face: 'arial',
            vadjust: 0,
            mod: 'bold italic'
          },
          mono: {
            color: '#343434',
            size: 15, // px
            face: 'courier new',
            vadjust: 2,
            mod: ''
          }
        },
        hidden: false,
        hoverWidth: 1.5,
        label: undefined,
        labelHighlightBold: true,
        length: undefined,
        physics: true,
        scaling:{
          min: 1,
          max: 15,
          label: {
            enabled: true,
            min: 14,
            max: 30,
            maxVisible: 30,
            drawThreshold: 5
          },
          customScalingFunction: function (min,max,total,value) {
            if (max === min) {
              return 0.5;
            }
            else {
              var scale = 1 / (max - min);
              return Math.max(0,(value - min)*scale);
            }
          }
        },
        selectionWidth: 1,
        selfReference:{
            size: 20,
            angle: Math.PI / 4,
            renderBehindTheNode: true
        },
        shadow:{
          enabled: false,
          color: 'rgba(0,0,0,0.5)',
          size:10,
          x:5,
          y:5
        },
        smooth: {
          enabled: true,
          type: "dynamic",
          roundness: 0.5
        },
        title:undefined,
        value: undefined,
        width: 1,
        widthConstraint: false
      }
    };

    var opts = {
      edges: {
        width: 0.1,
        
        dashes: false
      }
    }
    network = new vis.Network(container, data, opts);
  }
  // widthConstraint: true,
</script>
</head>

<body onload="draw()">
  <div id="graph_viz"></div>
</body>
</html>
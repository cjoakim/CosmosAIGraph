{
  "libtype": "npm",
  "libname": "seedrandom",
  "url": "http://davidbau.com/archives/2010/01/30/random_seeds_coded_hints_and_quintillions.html",
  "html": "<!DOCTYPE html><head><meta http-equiv=\"Content-Type\" content=\"text/html; charset=iso-8859-1\" /><meta name=\"viewport\" content=\"width=device-width, initial-scale=0.5\"><title>davidbau.com Random Seeds, Coded Hints, and Quintillions</title><link rel=\"stylesheet\" href=\"http://davidbau.com/styles-site.css\" type=\"text/css\" /><link rel=\"alternate\" type=\"application/rss+xml\" title=\"RSS\" href=\"http://davidbau.com/index.rdf\" /><link rel=\"start\" href=\"http://davidbau.com/\" title=\"Home\" /><link rel=\"prev\" href=\"http://davidbau.com/archives/2010/01/24/xinhua_we_report_you_decide.html\" title=\"Xinhua: We Report, You Decide\" /><link rel=\"next\" href=\"http://davidbau.com/archives/2010/02/01/reading_jquery_sources.html\" title=\"Reading JQuery Sources\" /><script type=\"text/javascript\" language=\"javascript\"><!--function OpenTrackback (c) {    window.open(c,                    'trackback',                    'width=480,height=480,scrollbars=yes,status=yes');}var HOST = 'davidbau.com';// Copyright (c) 1996-1997 Athenia Associates.// http://www.webreference.com/js/// License is granted if and only if this entire// copyright notice is included. By Tomer Shiran.function setCookie (name, value, expires, path, domain, secure) {    var curCookie = name + \"=\" + escape(value) + ((expires) ? \"; expires=\" + expires.toGMTString() : \"\") + ((path) ? \"; path=\" + path : \"\") + ((domain) ? \"; domain=\" + domain : \"\") + ((secure) ? \"; secure\" : \"\");    document.cookie = curCookie;}function getCookie (name) {    var prefix = name + '=';    var c = document.cookie;    var nullstring = '';    var cookieStartIndex = c.indexOf(prefix);    if (cookieStartIndex == -1)        return nullstring;    var cookieEndIndex = c.indexOf(\";\", cookieStartIndex + prefix.length);    if (cookieEndIndex == -1)        cookieEndIndex = c.length;    return unescape(c.substring(cookieStartIndex + prefix.length, cookieEndIndex));}function deleteCookie (name, path, domain) {    if (getCookie(name))        document.cookie = name + \"=\" + ((path) ? \"; path=\" + path : \"\") + ((domain) ? \"; domain=\" + domain : \"\") + \"; expires=Thu, 01-Jan-70 00:00:01 GMT\";}function fixDate (date) {    var base = new Date(0);    var skew = base.getTime();    if (skew > 0)        date.setTime(date.getTime() - skew);}function rememberMe (f) {    var now = new Date();    fixDate(now);    now.setTime(now.getTime() + 365 * 24 * 60 * 60 * 1000);    setCookie('mtcmtauth', f.author.value, now, '', HOST, '');    setCookie('mtcmtmail', f.email.value, now, '', HOST, '');    setCookie('mtcmthome', f.url.value, now, '', HOST, '');}function forgetMe (f) {    deleteCookie('mtcmtmail', '', HOST);    deleteCookie('mtcmthome', '', HOST);    deleteCookie('mtcmtauth', '', HOST);    f.email.value = '';    f.author.value = '';    f.url.value = '';}//--></script></head><body><div id=\"banner\"><h1><a href=\"http://davidbau.com/\" accesskey=\"1\">davidbau.com</a></h1><span class=\"description\">A Dabbler's Weblog</span></div><div id=\"container\"><table><tr><td class=\"blog\"><div id=\"menu\"><a href=\"http://davidbau.com/archives/2010/01/24/xinhua_we_report_you_decide.html\">&laquo; Xinhua: We Report, You Decide</a> |<a href=\"http://davidbau.com/\">Main</a>| <a href=\"http://davidbau.com/archives/2010/02/01/reading_jquery_sources.html\">Reading JQuery Sources &raquo;</a></div></td></tr><tr><td class=\"blog\"><h2 class=\"date\">January 30, 2010</h2><div class=\"blogbody\"><h3 class=\"title\">Random Seeds, Coded Hints, and Quintillions</h3><p><a href=\"http://davidbau.com/encode/seedrandom.js\">Here is a seedable random number generator in Javascript</a> that you can set up to produce a determinstic sequence of pseudorandom numbers.  Browsers do not provide a built-in way to seed Math.random(), so this solution is handy both when you need a repeatable pseudorandom sequence that is <b>completely predictable</b>, and when you need a robust seed that is <b>much more unpredictable</b> than your browser's built-in random number generator.</p><p><b>Update:</b> <a href=\"https://github.com/davidbau/seedrandom\">seedrandom is checked in at github</a>, <a href=\"https://npmjs.org/package/seedrandom\">available as a node package</a>, <a href=\"http://bower.io/search/?q=seedrandom\">available as a bower package</a>, and <a href=\"http://cdnjs.com/libraries/seedrandom\">available on cdnjs</a>.  It can be used directly as a modern AMD script with require.js, or as a node.js package.</p><p><a href=\"http://boards.ign.com/pokemon/b5012/183936419/p1/?5\">Many</a> <a href=\"http://www.gamespot.com/gba/rpg/goldensunthelostage/show_msgs.php?topic_id=m-1-52923213&pid=561356\">games</a> <a href=\"http://www.gamefaqs.com/boards/genmessage.php?board=960099&topic=51504283&page=1\">that use</a> <a href=\"http://www.gamespot.com/ps2/rpg/finalfantasy12/show_msgs.php?topic_id=m-1-52499053&pid=459841\">weak random number generators</a> have been <a href=\"http://www.cigital.com/papers/download/developer_gambling.php\">cracked by exploiting their lack of randomness</a>, and recently it has even been shown that it is <a href=\"http://arstechnica.com/tech-policy/news/2009/07/social-insecurity-numbers-open-to-hacking.ars\">possible to guess your 'random' Social Security Number</a> given information about the time and location of your birth. To <a href=\"http://en.wikipedia.org/wiki/Random_number_generator_attack\">resist this type of attack</a>, you want do better than a <a href=\"http://www.reteam.org/papers/e59.pdf\">linear congruential PRNG</a> seeded with the <a href=\"http://www.guyrutenberg.com/2007/09/03/seeding-srand/\">current time</a>.  Explanations below.</p><a name=\"more\"></a><p><b>A Math.seedrandom Function</b></p><p><a href=\"http://davidbau.com/archives/2010/01/30/random_seeds_coded_hints_and_quintillions.html\"><img align=right class=imgright src=/images/art/random-digits.gif border=0></a><a href=\"/encode/seedrandom.js\">This script defines a function Math.seedrandom()</a> that replaces Math.random with a seeded sequence of your choice.  You use it by including <a href=\"/encode/seedrandom.js\">seedrandom.js</a> and then calling <style>pre.code { background: #CFECE2; padding: 4px 8px; }</style></p><pre class=code><b>Math.seedrandom('any string you like');</b></pre><p>Next time you call <b>Math.random()</b>, you will get a deterministic sequence of results that can be reproduced at any time on any browser by calling seedrandom with the same string (with the example seed above, you will always get 0.4514661562021821, 0.06749172707294095, 0.8393296727715214, etc). <script src=/encode/seedrandom.min.js></script></p><table align=right><tr><td><form onsubmit=\"if(this.seed.value)Math.seedrandom(this.seed.value);else Math.seedrandom();this.randvalue.value=Math.random()+'\\n'+Math.random()+'\\n'+Math.random();return false;\"><p>Seed: <input name=seed value=\"any string you like\"> <input type=submit value=\"Try It\"><p><textarea name=randvalue rows=3 cols=28>Generated random numbers</textarea></form></td></tr></table><p>The code uses <a href=\"http://en.wikipedia.org/wiki/RC4\">RC4</a> as the pseudorandom number generator, so the randomness is a bit better than what you get from most browsers' built-in Math.random.  But since it does all the computation in javascript, it is also is 3-10x slower than the native function (though still plenty fast - less than 0.002 milliseconds per call for me).</p><p>A <a href=\"/encode/seedrandom.min.js\">minified version of seedrandom.js</a> (using <a href=\"http://marijnhaverbeke.nl/uglifyjs\">uglifyjs</a>) is about 1K.</p><p>The code also supports automatic seeding.</p><p><b>Local Entropy Seeding</b></p><p>If you don't want to think of a seed but just need an arbitrary unpredictable seed, <a href=\"/encode/seedrandom.js\">seedrandom.js</a> can also do automatic seeding from local entropy that is good enough for non-adversarial use.</p><p>If you call <b>Math.seedrandom()</b> without an argument, a seed is derived from available local data.  The DOM contains several candidate sources of entropy such as the cookie, the browse history, the scroll position, the clock, the native random number generator, etc.</p><p>Much of this information is collected by seedrandom using a recursive traversal of selected dom objects:</p><pre class=code>function flatten(obj, depth) {  var result = [], typ = (typeof obj), prop;  if (depth && typ == 'object') {    for (prop in obj) {      try { result.push(flatten(obj[prop], depth - 1)); } catch (e) {}    }  }  return (result.length ? result : typ == 'string' ? obj : obj + '\\0');}</pre><p><b>Update:</b> in version 2.1, autoseeding is done more quickly and more thoroughly using window.crypto, if present; in version 2.2, non-crypto seeding was modified to include window.navigator.plugins because it tends to differ broadly between instances.</p><pre class=code>function autoseed() {  try {    var seed = new Uint8Array(width);    global.crypto.getRandomValues(seed);    return tostring(seed);  } catch (e) {    return [+new Date, window, window.navigator.plugins,            window.screen, tostring(pool)];  }}&nbsp;seed = '' + flatten(autoseed(), 3);</pre><p>Since the underlying RC4 generator uses a 256-byte seed, any explicit and DOM-derived seeds are smeared into a 256-byte array like this:</p><pre class=code>var smear = 0;for (var j = 0; j < seed.length; ++j)    key[j & 255] = ((smear ^= key[j & 255] * 19) +        seed.charCodeAt(j)) & 255;shortseed = '';for (j in key) shortseed += String.fromCharCode(key[j]);return shortseed;</pre><p>The shortened seed string is returned from Math.seedrandom() so that you can record and replay an autogenerated seed if needed.</p><p><b>Entropy Accumulation</b></p><p>Unfortunately, while local seeding is pretty fast, the amount of unpredictability that can be collected quickly from the DOM ends up being pretty thin and not enough to protect you against a determined hacker who is trying to <a href=\"http://www.cigital.com/papers/download/developer_gambling.php\">beat your online poker game</a> by using brute force to deduce your seed.</p><p>You can add entropy by calling Math.seedrandom with sources of unpredictable bits such as mouse positions over time.  The script maintains an \"entropy\" variable that accumulates new bits of information every time Math.seedrandom() is called, so if you call Math.seedrandom(data) with explicit seeds several times and then finish with a call to Math.seedrandom() without arguments, all the previously-supplied explicit entropy will be mixed together with DOM state to build a now-more-unpredictable automatic seed.</p><p>Available local browser entropy <a href=\"http://crypto.stanford.edu/sjcl/jscrypto.pdf\">has been studied</a>, and because of the coarseness of timers and limited access to physical devices, it is probably necessary to collect about a minute of user-interface event observations to build an attack-proof pool of local entropy.</p><p>If you need robust unpredictability and you do not have a whole minute to wait, you need to find a source of entropy that is not local.</p><p><b>Network Entropy Seeding</b></p><p>One option for quick robust entropy is to use an online source of random bits like <a href=\"http://www.random.org/\">random.org</a>.  <a href=\"http://www.random.org/\">Random.org</a> provides a high-volume online stream of unpredictable bits that are derived from atmospheric noise detected by <a href=\"http://www.random.org/statistics/information-entropy/\">an array of radio receivers in Dublin and Copenhagen</a>, all built and run by Trinity College professor <a href=\"http://www.random.org/mads/\">Mads Haahr</a>.  His service will happily ship a few of these physically generated bits to you over https for free.</p><p>Ideally after loading <a href=\"/encode/seedrandom.js\">seedrandom.js</a>, you would like be able to run some code like the following that supplies random strings that come from random.org:</p><pre class=code>Math.seedrandom({'results':['pcPKzEptrHN3wkgTZJJe', '9uM6b5j5vKZzpVVds2ZT', 'zpHSar2s2a7kLnewGFFh']});</pre><p>You can get very close to this by using <a href=\"http://developer.yahoo.com/yql/\">YQL</a> to reformat data from <a href=\"https://www.random.org/passwords/?num=50&len=9\">a random.org download page</a>.  The query you want <a href=\"http://developer.yahoo.com/yql/console/#h=select%20*%20from%20html%0A%20%20where%20url%20%3D%20%22https%3A//www.random.org/passwords/%3Fnum%3D50%26len%3D9%22%0A%20%20and%20xpath%20%3D%20%22//ul%5B@class%3D%27data%27%5D//p/text%28%29%22\">is this</a>:</p><pre class=code>select * from html  where url = \"https://www.random.org/passwords/?num=50&len=9\"  and xpath = \"//ul[@class='data']//p/text()\"</pre><p>The YQL above can be invoked as <a href=\"https://query.yahooapis.com/v1/public/yql?q=select*from+html+where+url=%22https://www.random.org/passwords/%3Fnum=50%26len=9%22and%20xpath='//ul[@class=%22data%22]//p/text()'&callback=Math.seedrandom\">a URL</a> that returns the results as <a href=\"http://bob.pythonmac.org/archives/2005/12/05/remote-json-jsonp/\">JSONP</a> for convenient use as a cross-domain script include.  The format of the random data can be cleaned up a bit by using <a href=\"http://developer.yahoo.com/yql/guide/yql-execute-chapter.html\">YQL execute scripts</a>, which I have done using <a href=\"http://davidbau.com/encode/srandom.xml\">this xml file</a>. To make usage easy, I have posted a shortened url to <a href=\"http://bit.ly/srandom-256\">http://bit.ly/srandom-256</a>.  So to make a random.org-seeded PRNG in Javascript, you can <a href=\"http://davidbau.com/encode/entropy.html\">just write</a>:</p><pre class=code>&lt;script src=\"http://davidbau.com/encode/seedrandom.min.js\">&lt;/script><b>&lt;script src=\"http://bit.ly/srandom-256\">&lt;/script></b>&lt;p>The following number is very hard to guess:&lt;script>document.write(Math.random());&lt;/script></pre><p>There are two main disadvantages when seeding using a network source.  Frst, it introduces a series of intermediaries that you must trust to pass untampered random bits to you, including in this case, bit.ly, Yahoo, davidbau.com, and random.org.  Second, there will be a delay of a few hundred milliseconds to load the data.</p><p>You could use multiple sources (e.g., see <a href=\"http://www.fourmilab.ch/hotbits/\">HotBits</a>), seed asynchronously, or create your own source of network randomness to avoid these issues.  For example, I have posted a Google App Engine-hosted service at call.jsonlib.com that uses a Google-supplied urandom to provide faster network seeding in one roundtrip.  It's faster than the random.org method and shares none of the same intermediaries.  Use it alone for speed, or mix it with bits from random.org to satisfy your paranoia:</p><pre class=code>&lt;script src=\"https://jsonlib.appspot.com/urandom?callback=Math.seedrandom\">&lt;/script></pre><p><b>A Secret Decoder Ring</b></p><p>Sometimes an unpredictable seed is not what you want - sometimes you want to specify an explicit nonrandom seed.</p><p>What is an explicitly seeded PRNG good for?  It is good for knowing the future with certainty while everybody else is left guessing!  For example, you can use a PRNG for a really easy-to-implement <a href=\"/encode\">javascript secret decoder ring</a>.</p><p>The one I have linked here is useful for pencil-and-paper written clues, the sort that you might want to hide in a kid's treasure hunt.  In our family we have used it for exactly that purpose many times.</p><p>The secret encoder encrypts letters as normal letters and preserves spaces, capitalization and so on, so you can easily transcribe the ciphertext.  It is fully symmetric, by which I mean that the algorithm for going from ciphertext to cleartext is <em>exactly the same</em> as the one in the other direction, so that kids won't get frustrated when they mix up encryption and decryption.  The case-insensitivity and space-insensitivity of the code is helpful for the same reason.</p><p><a href=\"http://davidbau.com/encode\">davidbau.com/encode your treasure hunt hints here</a>.</p><p><b>Wichmann-Hill</b></p><p>The RC4 algorithm generates discrete random integers.  But Math.random() is supposed to return a uniformly distributed floating-point value in the range [0, 1).  What is the right way to get from integers to the floats?</p><p>Most floating-point PRNG code that I have seen fails to do this correctly, in my opinion.</p><p>For example, the widely-used <a href=\"http://www2.imperial.ac.uk/~hohs/S9/2007-2008/wichmannhill.pdf\">1982 Wichman-Hill algorithm<a/> (<a href=\"http://www.google.com/codesearch/p?hl=en#8OwxVSbvdlI/mmap/Lib/random.py\">that used to be used by python</a>) goes something like this:</p><pre class=code>x = (171 * x) % 30269y = (172 * y) % 30307z = (170 * z) % 30323return (x/30269.0 + y/30307.0 + z/30323.0) % 1.0</pre><p>The three generators have period 30268, 30306, and 30322, which have LCM about 6.9 trillion.  This corresponds to a gap between numbers that can be generated on the order of 10<sup>-13</sup>.  This gap is about 1000 times larger than the gap between numbers near 1.0 in the IEEE 754 double representation which is about 10<sup>-16</sup>.</p><p>In other words, Wichman-Hill can only generate about 0.1% of the 52-bit mantissas that are possible in a double-precision floating point value.  Generating the whole set of 2<sup>52</sup> different numbers is not a particularly impressive problem by modern standards, and so Wichman-Hill, with its relatively short period and coarse resolution, is no longer the right algorithm to use.</p><p><b>Generating Quadrillions of Uniform Doubles</b></p><p>The more modern approach to generating a double precision floating point value (used by <a href=\"http://www.google.com/codesearch/p?hl=en#8OwxVSbvdlI/mmap/Modules/_randommodule.c\">python since 2.3</a> and <a href=\"http://www.boost.org/doc/libs/1_41_0/boost/random/uniform_01.hpp\">Boost C++ libraries</a>) is to simply use a long-period integer generator to directly build an integer with 52 bits of randomness, and then divide the number by 2<sup>52</sup> in order to fill up the 52-bit mantissa of an IEEE 754 double, something like this:</p><pre class=code>function random() { return get_randint_up_to(1 << 52) / (double)(1 << 52); }</pre><p>But when we are using an underlying PRNG like RC4 that has a period around 10<sup>100</sup>, it seems like a shame to limit the the granularity at the low end of the sample set to 2<sup>-52</sup>.  After all, if we can generate randomness that does not repeat in a sextillion sextillion sextillion sextillion cycles, why do we limit ourselves to a mere quadrillion different values?</p><p>A 64-bit floating-point value naturally cannot represent more than 2<sup>64</sup> different values.  But it has very high resolution near zero, and that should be exploited.</p><p><b>Noticing One Event in a Quintillion</b></p><p>The following code is a natural way to simulate a one-in-a-quintillion event:</p><pre class=code>if (random() * (1.0e+18) < 1.0) { one_in_a_quintillion = true; }</pre><p>Unfortunately, using the current regime of random number generators, the code above will not do what it appears to promise, because the coarse 2<sup>-52</sup> rounding will ensure that the number will actually fire about 220 times too frequently.</p><p>This is not just a one-in-a-quintillion issue.  If a typical modern PRNG happens to generate a population of numbers smaller than one billionth (which it can do in a few seconds on a modern CPU) then more than half of the random-looking digits in the floating-point representation of those small random numbers are a deception.  The very smallest digits are not random at all: they are determined by the leading digits.  If you were to choose to use those least-significant digits for hashing or subsampling, you would run into trouble.</p><p>IEEE 754 floating-point representations are specifically designed to provide telescoping high resolution near zero so that things like very small probabilities can be dealt with accurately.  A double precision value has no problems representing accurate values with full precision down to about 10<sup>-96</sup>, which, we might notice, is a nice match for the power of the 10<sup>100</sup> period of RC4.</p><p>I have not seen a previous PRNG that takes advantage of that power.</p><p><b>Building an Exponentially Correct IEEE 754 Double</b></p><p>So to scratch this pet peeve, the uniform [0, 1) generator included in <a href=\"/encode/seedrandom.js\">seedrandom.js</a> has the following code to smoothly utilize all the available exponents in the floating point representation (note that in javascript, all those large integers bigger than 2<sup>32</sup> are implicitly interpreted as IEEE 754 doubles):</p><pre class=code>math['random'] = function random() {  // Closure to return a random double:  var n = arc4.g(6);                  // Start with a numerator <= 2 ^ 48  var d = denom;                      //   and denominator = 2 ^ 48.  var x = 0;                          //   and no 'extra last byte'.  while (n < significance) {          // Fill up all significant digits by    n = (n + x) * 256;                //   shifting numerator and    d *= 256;                         //   denominator and generating a    x = arc4.g(1);                    //   new least-significant-byte.  }  while (n >= overflow) {             // To avoid rounding up, before adding    n /= 2;                           //   last byte, shift everything    d /= 2;                           //   right using integer math until    x >>>= 1;                         //   we have exactly the desired bits.  }  return (n + x) / d;                 // Form the number within [0, 1).}</pre><p>The code above scales up the exponent by increasing d as long as the mantissa does not fill the full 52 bits available in the floating-point representation (\"significance\" is set to 2<sup>52</sup> and \"overflow\" is set to 2<sup>53</sup>).  If the least-significant byte is partially significant, the only the topmost bits are used.</p><p>By adding the scaling loop for small numbers, this uniform variate generator uses not only the whole mantissa, but the whole exponent as well.  One-in-quintillion simulations are now possible using the ordinary uniform distribution.</p><p><b>Some Limits</b></p><p>At the limits of resolution, there are a couple things to note.  There are only 53 significant digits, so if you multiply 2<sup>54</sup> by any number more than 0.5, obviously you will get an even number 100% of the time.</p><p>In Javascript IEEE 754 round-to-even mode is used, so we need to take care to avoid rounding at the limits of resolution by shifting off any bits beyond the least significant digit.  This achieves a last digit that is not the result of rounding which is equally likely to be even or odd when you multiply by 2<sup>53</sup>.  <b>Update 2/9/2010:</b> note that the change to seedrandom.js to keep this last digit fair has changed the PRNG sequence between seedrandom 0.0 and seedrandom 1.0.  The old seedrandom sequence, which suffers from a slight bias-towards-even in the last digit, is still available <a href=\"/encode/seedrandom-0.0.js\">here</a>.</p><p>Once you have gone to all this trouble, the other set of issues to recognize are <a href=\"http://www.ipa.go.jp/security/enc/CRYPTREC/fy15/doc/1043_IPA-RC4_%20report_final.pdf\">limits of the underlying RC4 algorithm</a>.  For example, the period of RC4 is recognized to be about 10<sup>100</sup>, one googol.  This sounds like a big number, but keep in mind that the number of arrangments of a simple 52-card deck is about 8.1&times;10<sup>67</sup>.  A two-deck shuffle has about 2.2&times;10<sup>150</sup> arrangements, and so the RC4 generator would <em>not</em> be able to produce every possible permutation of two decks shuffled together.  Reseeding occasionally could help solve this problem: the seed space of RC4 is about 10<sup>507</sup>.</p><p><b>Shuffling an Eight Deck Shoe</b></p><p>Never assume you have enough randomness without looking at the numbers.  In Las Vegas it is common <a href=\"http://www.averagejoeblackjack.com/countingdoesntwork.html\">to deal blackjack out of an eight-deck shoe</a> to make it harder for card counters to beat the house.  But there are about 10<sup>671</sup> distinguishable ways to shuffle eight decks of cards together, so matter how much you reseed an 8-bit RC4 generator with its 10<sup>507</sup> states, there is no way you can achieve every possible shuffle.</p><p>With ordinary RC4, you will be limited to a subset of shuffles that represent less than one quintillionth quintillionth quintillionth quintillionth of the possible shuffles that you could do with a physical shoe of eight decks!  In other words, after you have dealt out one full shoe of eight decks, you will have provided a distinctive fingerprint about your shuffling algorithm.</p><p>To shuffle several decks together using a PRNG without revealing a lot of information about the shuffle algorithm you happen to be using, you would need to switch to a generator with a much larger state space than 8-bit RC4.  For example, the <a href=\"http://davidbau.com/encode/seedrandom-10.js\">10-bit version of RC4</a> has 10<sup>2639</sup> states.  If you seed with a <a href=\"http://bit.ly/srandom-2048\">sufficiently large number of physically random bits</a> it could pass as an unpredictable shuffler for an eight-deck shoe of cards.</p><p>It is hard to be a good card dealer.</p><p><b>Update 4/2/2011</b>: I have released version 2.0 of <a href=\"http://davidbau.com/encode/seedrandom.js\">seedrandom.js</a>, which changes the random sequence for non-string keys.  In particular, Math.seedrandom(1) is no longer equivalent to Math.seedrandom(11).  For more details, see the comments below.  The old version is still available at seedrandom-1.0.js.</p><p><b>Update 3/15/2013</b>: I have released version 2.1 of <a href=\"http://davidbau.com/encode/seedrandom.js\">seedrandom.js</a>.  It autoseeds more quickly, using the javascript crypto api if available, and draws on DOM entropy in a targeted way if not.  ARC4 has been coded more compactly, so the <a href=\"http://davidbau.com/encode/seedrandom.min.js\">minified</a> size is still about the same, at 1078 bytes. The pseudorandom sequence is unchanged.  The old version is still available at seedrandom-2.0.js.</p><p><b>Update 11/10/2013</b>: I am getting ready to release a version 2.3 (same random sequence) designed to be slightly friendlier to use in node.js, and I got a chance to test the PRNG quality using the <a href=\"http://www.phy.duke.edu/~rgb/General/dieharder.php\">dieharder</a> random number test suite, which collects billions of outputs and tests for non-random patterns.  To provide input data to dieharder, I just called seedrandom from node.js and tested the output stream of 32-bit numbers generated by Math.floor(Math.random() * 4294967296).</p><p><a href=\"https://github.com/davidbau/seedrandom/blob/master/test/dieharder-report.txt\">Here is the dieharder analysis of the sequence starting with Math.seedrandom(1).</a>  Note that the \"WEAK\" asessment is given for tests that result in a p that is near zero or near one, but because more than a hundred tests were run, we expect occasional tests to come in big or small - indeed if no tests were reported \"WEAK\", it would be an indication of a problem.  Overall, the performance of this little javascript PRNG is pretty robust.</p><p><b>Update 1/1/2014</b>: seedrandom is now available as a package in npm and bower.  The current version number is 2.3.1.</p><p><b>Update 5/14/2014</b>: seedrandom is now at 2.3.6.  Versions from 2.1 to 2.3.2 had a bug on IE8 that produced a different sequence on that browser; users should upgrade to the latest.</p><span class=\"posted\">Posted by David at January 30, 2010 08:06 PM<br /></span></div><div class=\"comments-head\"><a name=\"comments\"></a>Comments</div><div class=\"comments-body\"><p>What is the licensing on your code: seedrandom.js </p><p>There is no copyright or license information (e.g. MIT, BSD, LGPL, GPL, Public Domain, etc).  I would like to use it, but without any licensing info its not very usable.</p><p>Thanks<br />Brad<br /></p><span class=\"comments-post\">Posted by: <a href=\"mailto&#58;brad&#64;bcs-mail&#46;net\" rel=\"nofollow\">Brad</a> at March  9, 2010 07:31 PM</span></div><div class=\"comments-body\"><p>I've posted a version under BSD license now.  This version also:</p><p>- adds an optional second argument, which, if set, lets you mix an explicit seed with the entropy pool without the slowness of other local entropy.<br />- changes the smearing multiplier to 19 which loses fewer bits of information if you initialize it with a long hexidecimal ASCII string.</p><p>On initializing without losing bits - a good way to initialize with a truly random string seed is to not limit yourself to printable characters but to use the full range of character values, i.e., Math.seedrandom('\\xF9\\x7F\\x00\\x1E...').</p><span class=\"comments-post\">Posted by: <a href=\"http://davidbau.com/mt/mt-docomment.cgi?__mode=red&amp;id=1788\" rel=\"nofollow\">David</a> at March 11, 2010 06:40 AM</span></div><div class=\"comments-body\"><p>Very interesting article David .. very.</p><p>I have used the seeded random number principle extensively in my own \"dabbling\" code, however I bumped into a small issue that I wonder if you might be able to give me some advice on?</p><p>Data is being randomly generated from a seed (a name). That data is useful and in the main what I want, Using the name as the seed means I only have to store the name to get back the added detail the randomness generates. Basically I am using the seed almost like a Hash.</p><p>Very occasionally I want to alter the data (alter one or two of the random numbers generated, but not all of them). Can you think of a way to take the stream of random numbers (including the changes) and generate a seed, working backwards if you will?</p><p>Thanks</p><p>David</p><span class=\"comments-post\">Posted by: <a href=\"mailto&#58;d&#46;w&#46;johnston&#64;gmail&#46;com\" rel=\"nofollow\">David Johnston</a> at June  4, 2010 10:44 AM</span></div><div class=\"comments-body\"><p>Since seedrandom.js uses RC4 which is a cryptographically strong generator, it is designed very difficult to reverse.  In other words, even if you know the sequence of generated bits, it is hard to go backwards to figure out the seed, and it is hard to go forward to predict the next random bits.</p><p>There are some cases where RC4 keys can be partially deduced from parts of the output sequence.  The worst weaknesses are mostly eliminated by priming RC4 by discarding the first few values (seedrandom.js does this).  If you discover any new cases where it is possible to deduce a key by analyzing the output, it could be publication-worthy.</p><span class=\"comments-post\">Posted by: <a href=\"http://davidbau.com/mt/mt-docomment.cgi?__mode=red&amp;id=1829\" rel=\"nofollow\">David</a> at June  6, 2010 11:31 AM</span></div><div class=\"comments-body\"><p>This code is wonderful.  Having a repeatable series of numbers is so helpful for many areas, especially in making repeatable test cases.</p><p>Anyways, when using the Closure Compiler, which I see you use too, I get this warning:</p><p>WARNING - Suspicious code. This code lacks side-effects. Is there a bug?<br />    Math.seedrandom(1);<br />                   ^<br />Any ideas?  Is there an annotation we can add to help?  I don't understand javascript/your code/closure compiler enough yet to figure it out.  Obviously state is being set but the compiler can't figure it out.  Or maybe the compiler's built in extern for Math.seedrandom() is causing confusion?<br /></p><span class=\"comments-post\">Posted by: <a href=\"mailto&#58;aidembb&#64;yahoo&#46;com\" rel=\"nofollow\">Roger Flores</a> at December 15, 2010 12:31 AM</span></div><div class=\"comments-body\"><p>Hi David,</p><p>thank you for this very handy set of functions.<br />I'm just missing one thing desperatly:<br />To get and set the current prng, but not a copy of the whole random-function. In detail:</p><p>You suggest in your documentation:<br />var rng1 = Math.random; //remember<br />... set and use new seed ...<br />Math.random = rng1; //continue</p><p>The problem with that is: rng1 is the whole function and so it cant be stored via JSON.</p><p>So what I'd need would be something like<br />var rng1 = Math.rememberRandom();<br />...  set and use new seed ...<br />Math.continueRandom(rng1);</p><p>where rng1 is typeof string,number,array... anything but a function.</p><p>I'd be really gratefull for this functionality added.</p><p>Greetings,<br />cbFloor<br /></p><span class=\"comments-post\">Posted by: <a href=\"mailto&#58;Jottiestrash&#64;gmx&#46;de\" rel=\"nofollow\">cbFloor</a> at December 20, 2010 03:28 PM</span></div><div class=\"comments-body\"><p>I found out myself:<br />insert the following lines inside seedrandom-definition behind the \"arc4 = new ARC4(key);\" line:</p><p>// remember and restore PRNG state<br />math['getPrng'] = function(){return [arc4.i,arc4.j,arc4.S.slice(0)];};<br />math['setPrng'] = function(prng){arc4.i = prng[0]; arc4.j = prng[1]; arc4.S = prng[2]; }; </p><span class=\"comments-post\">Posted by: <a href=\"mailto&#58;Jottiestrash&#64;gmx&#46;de\" rel=\"nofollow\">cbFloor</a> at December 21, 2010 04:49 AM</span></div><div class=\"comments-body\"><p>Sorry, better clone S on setting, too:<br />  // remember and restore PRNG state<br />  math['getPrng'] = function(){return [arc4.i,arc4.j,arc4.S.slice(0)];}; //copies of i,j and S  <br />  math['setPrng'] = function(prng){arc4.i = prng[0]; arc4.j = prng[1]; arc4.S = prng[2].slice(0); }; </p><span class=\"comments-post\">Posted by: <a href=\"mailto&#58;Jottiestrash&#64;gmx&#46;de\" rel=\"nofollow\">cbFloor</a> at December 21, 2010 04:54 AM</span></div><div class=\"comments-body\"><p>Hi David,</p><p>I'm working with some code that uses seedrandom.js. Seeds in this application are an increasing series of unpadded integers. I noticed that I got the same sequence for any seed that matches /^.+$/. For example, 1, 11, 111, 1111, etc all return the same sequence.</p><p>I think this is caused by a bug in seedrandom. You state above that RC4 needs a 256-byte key, but mixkey does not always return a 256-byte array - instead it returns an array of size min(seed.length, 256).</p><p>I think the key needs to be padded out to 256 bytes if the seed string is too small. You can do this by initializing key to be 256 bytes long, or by changing the loop in mixkey like this:</p><p>-for (j = 0; j &lt; seed.length; j++) {<br />+var padded = Math.max(seed.length, width);<br />+for (j = 0; j &lt; padded; j++) {</p><p>This seems to work for me, but I'd appreciate if you can confirm this fix makes sense. I don't really know anything about RC4/crypto beyond what I discovered while investigating this issue :)</p><span class=\"comments-post\">Posted by: <a href=\"http://davidbau.com/mt/mt-docomment.cgi?__mode=red&amp;id=1959\" rel=\"nofollow\">Desmond Brand</a> at April  2, 2011 01:05 AM</span></div><div class=\"comments-body\"><p>Hi Desmond,</p><p>Thanks for the bug report!</p><p>I am using the standard RC4 key scheduling algorithm, which has the property that for short keys, \"A\" is equivalent to \"AA\".</p><p>However, I agree people should expect that Math.seedrandom(num) should treat the numeric seeds 1 and 11 differently, so I have changed the way seedrandom converts from non-strings to strings.</p><p>I am releasing version 2.0 (rc1) of seedrandom.js today.</p><p>In this version, I have changed Math.seedrandom(num) to be equivalent to Math.seedrandom(num + '\\0') when num is not a string.  The key \"1\\0\" is not equivalent to \"11\\0\", so you will not get key collisions for small numeric keys.</p><p>The behavior for strings is unchanged, so you still need to be aware that Math.seedrandom('A') is equivalent to Math.seedrandom('AA').  If you are working with short variable-length strings and you want to avoid collisions, it is probably best to add a terminator yourself.  Math.seedrandom will only do this automaticaly for you when you use a non-string seed.</p><p>If you are using numeric seeds and want to keep the old behavior while using the latest seedrandom, then you can just convert to strings yourself by saying Math.seedrandom(num + '').</p><span class=\"comments-post\">Posted by: <a href=\"http://davidbau.com/mt/mt-docomment.cgi?__mode=red&amp;id=1960\" rel=\"nofollow\">David</a> at April  2, 2011 07:03 AM</span></div><div class=\"comments-body\"><p>Hi David. I am very interested in this topic and I see that you know what your are talking about. </p><p>I have a couple of questions. The option to use mouse positions, keyboard keys, and etc, I could see no hints of that in the code. Although I see the window object and flatten. The flatten method could be improved further.</p><p>Are your intentions that we collect that data on our own and then pass that data to seedrandom as seed?</p><p>You should also consider making things more extensible. The flatten method should be able to be replaced by outsiders. </p><p>// Each time seedrandom('arg') is called, entropy from the passed seed<br />// is accumulated in a pool to help generate future seeds for the</p><p>What if you want to clear the old seed, because too much data is in it now?</p><p>You should create your own namespace, or return an object as a class with all functions and properties in order for them to be able to override or add certain features. </p><p>Thanks, and great job! </p><span class=\"comments-post\">Posted by: <a href=\"mailto&#58;moe1234512345&#64;gmail&#46;com\" rel=\"nofollow\">Moe</a> at September 24, 2011 06:58 AM</span></div><div class=\"comments-body\"><p>Hi David. Thanks for the nice piece of code. Just wanted to clarify shuffling of 8-deck shoe. </p><p>Generating every possible permutation is actually not the good way this is done in software. Better way is this: numerate all cards in first deck from 1 to 52, in second deck from 53 to 104 etc. Then when you need first card, you say \"give me number between 1 and 416\". Say for example you got number 28. Then when you need second card you say \"give me number between 1 nad 416, but not 28\". Say you got 199 this time. For N cards, simply repeat this operation N times.</p><p>That way, you can \"shuffle\" very large number of decks with simple RNG.</p><p>Best regards!</p><span class=\"comments-post\">Posted by: Ivan at December 22, 2011 12:10 PM</span></div><div class=\"comments-body\"><p>Will this return identical results regardless of Javascript implementation (different browsers, Rhino etc)?</p><span class=\"comments-post\">Posted by:  at March 26, 2012 08:08 AM</span></div><div class=\"comments-body\"><p>Yes, this returns perfectly identical results regardless of Javascript implementation.</p><span class=\"comments-post\">Posted by: <a href=\"http://davidbau.com/mt/mt-docomment.cgi?__mode=red&amp;id=2080\" rel=\"nofollow\">David</a> at April 13, 2012 04:18 AM</span></div><div class=\"comments-body\"><p>Just wondering what the best way to get random ints out of this is. I'm looking at adding a Math.randomInt(n) feature where you get a random number between 0 (inclusive) and n (exclusive). From what I've been reading doing a simple %n isn't good because of potential uneven distribution.</p><span class=\"comments-post\">Posted by: <a href=\"mailto&#58;eric&#46;dalquist&#64;gmail&#46;com\" rel=\"nofollow\">Eric Dalquist</a> at January 29, 2013 02:59 PM</span></div><div class=\"comments-body\"><p>Ok I think I figured something out for my Math.randomInt feature, this is based on the Java Random.nextInt implementation to ensure equal distribution within the constrained range:</p><p>    math['randomInt'] = function randomInt(n) {<br />        var counts = Math.ceil(n / width);            // Determine the number of counts needed to generate a the number<br />        var maxRnd = Math.pow(width, counts);         // Calculate the maximum random number possible for the counts<br />        var maxValid = n * Math.floor(maxRnd / n);    // Calculate the maximum valid random number to prevent uneven distribution <br />        var rnd;<br />        do {<br />            rnd = arc4.g(counts);<br />        } while (rnd >= maxValid);    // Ignore numbers that are outside of the valid range<br />        <br />        return rnd % n;<br />    };</p><span class=\"comments-post\">Posted by: <a href=\"mailto&#58;eric&#46;dalquist&#64;gmail&#46;com\" rel=\"nofollow\">Eric Dalquist</a> at January 29, 2013 03:55 PM</span></div><div class=\"comments-body\"><p>Thanks for providing seedrandom.js. Given:</p><p>Math.seedrandom('hello.');<br />alert( Math.random() );</p><p>Is there some way to get IE browser to return the same answer as FireFox browser?</p><p>FireFox : 0.9282578795792454 ( as described in source comments and same under Chrome, Opera and Safari</p><p>IE : 0.6362644381117817  ( same under IIS asp</p><p>Good health!<br />Blair</p><span class=\"comments-post\">Posted by: <a href=\"mailto&#58;delphiajones&#64;yahoo&#46;com\" rel=\"nofollow\">Blair</a> at January 30, 2014 10:38 AM</span></div><div class=\"comments-body\"><p>Seedrandom has been tested to perform identically on IE as is does with other browsers.  Can you post an example page that you are finding that works differently on IE?  If there is a missing case or a bug, I will fix it.</p><p>Here is a sample page that I have just retested.  It prints 0.9282578795792454 on IE (version 11):</p><p>http://david.pencilcode.net/home/testing/seedrandom.html</p><span class=\"comments-post\">Posted by: <a href=\"http://davidbau.com/mt/mt-docomment.cgi?__mode=red&amp;id=2225\" rel=\"nofollow\">David</a> at January 31, 2014 10:03 AM</span></div><div class=\"comments-body\"><p>Update - I have followed up with Blair.  He was seeing the problem on IE8, and I was able to see and fix the bug in that environment.  The PRNG sequence has been incorrect on IE8 since seedrandom 2.1 (2.0 was correct).</p><p>There will be a new release soon that will fix the IE8 problem.  As a bonus, it is also 5 bytes smaller. It will also switch to the MIT license.<br /></p><span class=\"comments-post\">Posted by: <a href=\"http://davidbau.com/mt/mt-docomment.cgi?__mode=red&amp;id=2226\" rel=\"nofollow\">David</a> at February  1, 2014 06:35 PM</span></div><div class=\"comments-body\"><p>Hi David,</p><p>Why is it that if I do</p><p>var r = Math.random<br />Math.seedrandom('asdf');<br />r()</p><p>I get different numbers every time I run that code. But if I just call Math.random() directly it is consistent. I am using a library that points to Math.random like that. The end result is that I am getting strange behaviour where the randomness isn't entirely random and the seeding doesn't make things entirely consistent either.</p><p>Thanks.</p><span class=\"comments-post\">Posted by: <a href=\"mailto&#58;lomacar&#64;gmail&#46;com\" rel=\"nofollow\">Moss</a> at September  2, 2014 08:09 PM</span></div><div class=\"comments-body\"><p>In modern browsers, you can generate a random floating point from random bytes number much saner by using Uint8Array and Float64Array with the same buffer.</p><p>var f64 = new Float64Array(1);<br />var u8 = new Uint8Array(f64.buffer);</p><p>// fill mantissa with randomness<br />u8[0] = randbyte(); // 0..7<br />u8[1] = randbyte();<br />u8[2] = randbyte();<br />u8[3] = randbyte(); // 24..31<br />u8[4] = randbyte(); // 32..40<br />u8[5] = randbyte(); // 40..48<br />u8[6] = randbyte(); // 48..55</p><p><br />u8[6] |= 0xf0; // set exponent bytes to 0x3ff, which corresponds to an exponent of 0<br />u8[7]  = 0x3f; </p><p>console.log(f64[0] - 1); // result in [0,1)</p><p><br />Note: Not endianness-aware. A completely random floating point number (including all NaN and Infinity combinations) can be generated by filling u8 completely.</p><span class=\"comments-post\">Posted by: <a href=\"http://davidbau.com/mt/mt-docomment.cgi?__mode=red&amp;id=2283\" rel=\"nofollow\">copy</a> at September  7, 2014 02:04 AM</span></div><div class=\"comments-body\"><p>Hi David,</p><p>I saw seedrandom.js code. i am planning to use to convert Math.random() to securerandom in my javascript code.I try one example as alert(Math.seedrandom()).it is throwing  junk characters.am i doing something wrong?.My issue is to change all Math.random() into securerandom.my code below</p><p><br />function parseBigInt(B, A) {<br />    return new BigInteger(B, A)<br />}</p><p>function pkcs1pad2B(C, H) {<br />    var G = C.length;<br />    if (G > H - 11 - 4) {<br />        throw \"104\"<br />    }<br />    var A = [0, 2, 255, 255, 255, 255];<br />    var B = H - G - 3 - 4;<br />    var F = randomBytes(B);<br />    var D = A.concat(F, [0], C);<br />    var E = new BigInteger(D);<br />    return E<br />}</p><p>function randomBytes(C) {<br />    var A = [];<br />    var B = 0;<br />    for (B = 0; B  0 && A.length > 0) {<br />        this.n = parseBigInt(B, 16);<br />        this.e = parseInt(A, 16)<br />    } else {<br />        alert(\"Invalid RSA public key\")<br />    }<br />};<br />RSAKey.prototype.doPublic = function(A) {<br />    return A.modPowInt(this.e, this.n)<br />};<br />RSAKey.prototype.encrypt = function(B) {<br />    var A = pkcs1pad2(B, (this.n.bitLength() + 7) >> 3);<br />    if (A == null) {<br />        return null<br />    }<br />    var D = this.doPublic(A);<br />    if (D == null) {<br />        return null<br />    }<br />    var C = D.toString(16);<br />    if ((C.length & 1) == 0) {<br />        return C<br />    } else {<br />        return \"0\" + C<br />    }<br />};<br />RSAKey.prototype.encryptB = function(B) {<br />    var A = pkcs1pad2B(B, (this.n.bitLength() + 7) >> 3);<br />    if (A == null) {<br />        return null<br />    }<br />    var D = this.doPublic(A);<br />    if (D == null) {<br />        return null<br />    }<br />    var C = D.toString(16);<br />    if ((C.length & 1) == 0) {<br />        return C<br />    } else {<br />        return \"0\" + C<br />    }<br />};</p><p>It would be great if i get help from you.</p><span class=\"comments-post\">Posted by: <a href=\"mailto&#58;thoppeyashok&#64;gmail&#46;com\" rel=\"nofollow\">Ashok</a> at January 11, 2016 07:14 AM</span></div><div class=\"comments-body\"><p>need to convert Math.ceil(Math.random() * 255) to secure random code<br />function randomBytes(C) {<br />    var A = [];<br />    var B = 0;<br />    for (B = 0; B &lt; C; B++) {<br />        A[B] = Math.ceil(Math.random() * 255)<br />    }<br />    return A<br />}</p><span class=\"comments-post\">Posted by:  at January 11, 2016 07:16 AM</span></div><div class=\"comments-body\"><p>Basically I want to convert Math.ceil(Math.random() * 255) or Math.floor(Math.random() * 255) to securerandom in javascript</p><span class=\"comments-post\">Posted by: <a href=\"mailto&#58;thoppeyashok&#64;gmail&#46;com\" rel=\"nofollow\">Ashok</a> at January 11, 2016 07:18 AM</span></div><div class=\"comments-body\"><p>Hi David,</p><p>    I've been using your seedrandom.js library (version 2.0, author: David Bau 4/2/2011) for years, but lately Chrome has been saying</p><p>'webkitIndexedDB' is deprecated. Please use 'indexedDB' instead.</p><p>AND</p><p>'Performance.onwebkitresourcetimingbufferfull' is deprecated. Please use 'Performance.onresourcetimingbufferfull' instead.</p><p>    It points to line 222, yet I can't find the string 'webkit' anywhere in seedrandom.js. Do you have any idea how I can lose these warnings?</p><p>    My copy of your library is here: http://www.rosenfels.org/seedrandom.js</p><p>Dean Hannotte</p><span class=\"comments-post\">Posted by: <a href=\"http://davidbau.com/mt/mt-docomment.cgi?__mode=red&amp;id=2399\" rel=\"nofollow\">Dean Hannotte</a> at December  8, 2016 04:01 PM</span></div><div class=\"comments-body\"><p>Hi Dean -</p><p>Any problems in seedrandom should be filed as a bug on the github repo here:</p><p>https://github.com/davidbau/seedrandom</p><p>By the way, I don't see the symptoms that you're describing. Still having the problem?</p><span class=\"comments-post\">Posted by: <a href=\"http://davidbau.com/mt/mt-docomment.cgi?__mode=red&amp;id=2401\" rel=\"nofollow\">David</a> at February  2, 2017 01:45 PM</span></div><div class=\"comments-body\"><p>Very helpful ! Thank you !</p><span class=\"comments-post\">Posted by: <a href=\"mailto&#58;denis&#46;tassin&#64;gmail&#46;com\" rel=\"nofollow\">Denis T</a> at August  9, 2018 09:21 AM</span></div><div class=\"comments-body\"><p>Hello, </p><p>I was wondering why the function Math.seedrandom returns the seed as a string instead of a number.</p><p>With kind regards, </p><p>Aydin Biber.</p><span class=\"comments-post\">Posted by: <a href=\"mailto&#58;abiber&#64;deventit&#46;nl\" rel=\"nofollow\">Aydin</a> at April  2, 2019 11:06 AM</span></div><div class=\"comments-head\">Post a comment</div><div class=\"comments-body\"><form method=\"post\" action=\"/mt/mt-hitme.cgi\" name=\"comments_form\" onsubmit=\"urchinTracker('/submit_comment'); if (this.bakecookie[0].checked) rememberMe(this)\"><input type=\"hidden\" name=\"static\" value=\"1\" /><input type=\"hidden\" name=\"entry_id\" value=\"358\" /><div style=\"width:180px; padding-right:15px; margin-right:15px; float:left; text-align:left; border-right:1px dotted #bbb;\"><label for=\"author\">Name:</label><br /><input tabindex=\"1\" id=\"author\" name=\"author\" /><br /><br /><label for=\"email\">Email Address:</label><br /><input tabindex=\"2\" id=\"email\" name=\"email\" /><br /><br /><label for=\"url\">URL:</label><br /><input tabindex=\"3\" id=\"url\" name=\"url\" /><br /><br /></div>Remember personal info?<br /><input type=\"radio\" id=\"bakecookie\" name=\"bakecookie\" /><label for=\"bakecookie\">Yes</label><input type=\"radio\" id=\"forget\" name=\"bakecookie\" onclick=\"forgetMe(this.form)\" value=\"Forget Info\" style=\"margin-left: 15px;\" /><label for=\"forget\">No</label><br style=\"clear: both;\" /><label for=\"text\">Comments:</label><br /><textarea tabindex=\"4\" id=\"text\" name=\"text\" rows=\"10\" cols=\"50\"></textarea><br /><br /><input type=\"submit\" name=\"preview\" value=\"&nbsp;Preview&nbsp;\" /><input style=\"font-weight: bold;\" type=\"submit\" name=\"post\" value=\"&nbsp;Post&nbsp;\" /><br /><br /></form><script type=\"text/javascript\" language=\"javascript\"><!--document.comments_form.action=  \"http://davidbau.com/mt/\" +  \"mt-docomment.cgi\";document.comments_form.email.value = getCookie(\"mtcmtmail\");document.comments_form.author.value = getCookie(\"mtcmtauth\");document.comments_form.url.value = getCookie(\"mtcmthome\");if (getCookie(\"mtcmtauth\")) {    document.comments_form.bakecookie[0].checked = true;} else {    document.comments_form.bakecookie[1].checked = true;}//--></script></div></td></tr><tr><td class=\"copyright\">Copyright 2010 &copy; David Bau. All Rights Reserved.</td></tr></table></div><script src=\"http://www.google-analytics.com/urchin.js\" type=\"text/javascript\"></script><script type=\"text/javascript\">_uacct = \"UA-242212-1\";urchinTracker();</script></body></html>",
  "embeddings": []
}
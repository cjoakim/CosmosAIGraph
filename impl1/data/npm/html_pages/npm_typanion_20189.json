{
  "libtype": "npm",
  "libname": "typanion",
  "url": "https://mael.dev/typanion/",
  "html": "<!doctype html><html lang=\"en\" dir=\"ltr\"><head><meta charset=\"UTF-8\"><meta name=\"viewport\" content=\"width=device-width,initial-scale=1\"><meta name=\"generator\" content=\"Docusaurus v2.0.0-beta.14\"><link rel=\"search\" type=\"application/opensearchdescription+xml\" title=\"Typanion\" href=\"/typanion/opensearch.xml\"><title data-react-helmet=\"true\">Typanion | Typanion</title><meta data-react-helmet=\"true\" property=\"og:title\" content=\"Typanion | Typanion\"><meta data-react-helmet=\"true\" name=\"twitter:card\" content=\"summary_large_image\"><meta data-react-helmet=\"true\" name=\"description\" content=\"Type-safe runtime type validation with no dependencies\"><meta data-react-helmet=\"true\" property=\"og:description\" content=\"Type-safe runtime type validation with no dependencies\"><meta data-react-helmet=\"true\" property=\"og:url\" content=\"https://mael.dev/typanion//typanion/\"><meta data-react-helmet=\"true\" name=\"docsearch:language\" content=\"en\"><meta data-react-helmet=\"true\" name=\"docsearch:docusaurus_tag\" content=\"default\"><link data-react-helmet=\"true\" rel=\"icon\" href=\"/typanion/logo.svg\"><link data-react-helmet=\"true\" rel=\"canonical\" href=\"https://mael.dev/typanion//typanion/\"><link data-react-helmet=\"true\" rel=\"alternate\" href=\"https://mael.dev/typanion//typanion/\" hreflang=\"en\"><link data-react-helmet=\"true\" rel=\"alternate\" href=\"https://mael.dev/typanion//typanion/\" hreflang=\"x-default\"><link data-react-helmet=\"true\" rel=\"preconnect\" href=\"https://BH4D9OD16A-dsn.algolia.net\" crossorigin=\"anonymous\"><script data-react-helmet=\"true\">function maybeInsertBanner(){window.__DOCUSAURUS_INSERT_BASEURL_BANNER&&insertBanner()}function insertBanner(){var n=document.getElementById(\"docusaurus-base-url-issue-banner-container\");if(n){n.innerHTML='\\n<div id=\"docusaurus-base-url-issue-banner\" style=\"border: thick solid red; background-color: rgb(255, 230, 179); margin: 20px; padding: 20px; font-size: 20px;\">\\n   <p style=\"font-weight: bold; font-size: 30px;\">Your Docusaurus site did not load properly.</p>\\n   <p>A very common reason is a wrong site <a href=\"https://docusaurus.io/docs/docusaurus.config.js/#baseurl\" style=\"font-weight: bold;\">baseUrl configuration</a>.</p>\\n   <p>Current configured baseUrl = <span style=\"font-weight: bold; color: red;\">/typanion/</span> </p>\\n   <p>We suggest trying baseUrl = <span id=\"docusaurus-base-url-issue-banner-suggestion-container\" style=\"font-weight: bold; color: green;\"></span></p>\\n</div>\\n';var e=document.getElementById(\"docusaurus-base-url-issue-banner-suggestion-container\"),s=window.location.pathname,r=\"/\"===s.substr(-1)?s:s+\"/\";e.innerHTML=r}}window.__DOCUSAURUS_INSERT_BASEURL_BANNER=!0,document.addEventListener(\"DOMContentLoaded\",maybeInsertBanner)</script><link rel=\"stylesheet\" href=\"/typanion/assets/css/styles.8f98103e.css\"><link rel=\"preload\" href=\"/typanion/assets/js/runtime~main.98a08f33.js\" as=\"script\"><link rel=\"preload\" href=\"/typanion/assets/js/main.440ac69a.js\" as=\"script\"></head><body><script>!function(){function t(t){document.documentElement.setAttribute(\"data-theme\",t)}var e=function(){var t=null;try{t=localStorage.getItem(\"theme\")}catch(t){}return t}();t(null!==e?e:\"light\")}()</script><div id=\"__docusaurus\"><div id=\"docusaurus-base-url-issue-banner-container\"></div><div><a href=\"#\" class=\"skipToContent_IT51\">Skip to main content</a></div><nav class=\"navbar navbar--fixed-top\"><div class=\"navbar__inner\"><div class=\"navbar__items\"><button aria-label=\"Navigation bar toggle\" class=\"navbar__toggle clean-btn\" type=\"button\" tabindex=\"0\"><svg width=\"30\" height=\"30\" viewBox=\"0 0 30 30\" aria-hidden=\"true\"><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" d=\"M4 7h22M4 15h22M4 23h22\"></path></svg></button><a class=\"navbar__brand\" href=\"/typanion/\"><div class=\"navbar__logo\"><img src=\"/typanion/logo.svg\" alt=\"Typanion Logo\" class=\"themedImage_CfFQ themedImage--light_FNiS\"><img src=\"/typanion/logo.svg\" alt=\"Typanion Logo\" class=\"themedImage_CfFQ themedImage--dark_da2N\"></div><b class=\"navbar__title\">Typanion</b></a><a class=\"navbar__item navbar__link\" href=\"/typanion/docs/\">Docs</a><a href=\"https://mael.dev/packages\" target=\"_self\" rel=\"noopener noreferrer\" class=\"navbar__item navbar__link\"><span>See Also<svg width=\"13.5\" height=\"13.5\" aria-hidden=\"true\" viewBox=\"0 0 24 24\" class=\"iconExternalLink_5zKM\"><path fill=\"currentColor\" d=\"M21 13v10h-21v-19h12v2h-10v15h17v-8h2zm3-12h-10.988l4.035 4-6.977 7.07 2.828 2.828 6.977-7.07 4.125 4.172v-11z\"></path></svg></span></a></div><div class=\"navbar__items navbar__items--right\"><a href=\"https://github.com/arcanis/typanion\" target=\"_blank\" rel=\"noopener noreferrer\" class=\"navbar__item navbar__link\"><span>GitHub<svg width=\"13.5\" height=\"13.5\" aria-hidden=\"true\" viewBox=\"0 0 24 24\" class=\"iconExternalLink_5zKM\"><path fill=\"currentColor\" d=\"M21 13v10h-21v-19h12v2h-10v15h17v-8h2zm3-12h-10.988l4.035 4-6.977 7.07 2.828 2.828 6.977-7.07 4.125 4.172v-11z\"></path></svg></span></a><div class=\"toggle_jVUx toggle_96GA toggleDisabled_pcQk\"><div class=\"toggleTrack_8sce\" role=\"button\" tabindex=\"-1\"><div class=\"toggleTrackCheck_aQ+s\"><span class=\"toggleIcon_mOJ+\">\ud83c\udf1c</span></div><div class=\"toggleTrackX_Zly+\"><span class=\"toggleIcon_mOJ+\">\ud83c\udf1e</span></div><div class=\"toggleTrackThumb_OTNa\"></div></div><input type=\"checkbox\" class=\"toggleScreenReader_m9zi\" aria-label=\"Switch between dark and light mode\"></div><div class=\"searchBox_qlx4\"><button type=\"button\" class=\"DocSearch DocSearch-Button\" aria-label=\"Search\"><span class=\"DocSearch-Button-Container\"><svg width=\"20\" height=\"20\" class=\"DocSearch-Search-Icon\" viewBox=\"0 0 20 20\"><path d=\"M14.386 14.386l4.0877 4.0877-4.0877-4.0877c-2.9418 2.9419-7.7115 2.9419-10.6533 0-2.9419-2.9418-2.9419-7.7115 0-10.6533 2.9418-2.9419 7.7115-2.9419 10.6533 0 2.9419 2.9418 2.9419 7.7115 0 10.6533z\" stroke=\"currentColor\" fill=\"none\" fill-rule=\"evenodd\" stroke-linecap=\"round\" stroke-linejoin=\"round\"></path></svg><span class=\"DocSearch-Button-Placeholder\">Search</span></span><span class=\"DocSearch-Button-Keys\"></span></button></div></div></div><div role=\"presentation\" class=\"navbar-sidebar__backdrop\"></div></nav><div class=\"main-wrapper\"><header class=\"hero hero--primary heroBanner_etFc\" style=\"background-image:url(&#x27;data:image/svg+xml,%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20fill%3D%22%23000000%22%20fill-opacity%3D%220.05%22%20width%3D%2252%22%20height%3D%2252%22%20viewBox%3D%220%200%2052%2052%22%3E%3Cpath%20d%3D%22M0%2017.83V0h17.83a3%203%200%200%201-5.66%202H5.9A5%205%200%200%201%202%205.9v6.27a3%203%200%200%201-2%205.66zm0%2018.34a3%203%200%200%201%202%205.66v6.27A5%205%200%200%201%205.9%2052h6.27a3%203%200%200%201%205.66%200H0V36.17zM36.17%2052a3%203%200%200%201%205.66%200h6.27a5%205%200%200%201%203.9-3.9v-6.27a3%203%200%200%201%200-5.66V52H36.17zM0%2031.93v-9.78a5%205%200%200%201%203.8.72l4.43-4.43a3%203%200%201%201%201.42%201.41L5.2%2024.28a5%205%200%200%201%200%205.52l4.44%204.43a3%203%200%201%201-1.42%201.42L3.8%2031.2a5%205%200%200%201-3.8.72zm52-14.1a3%203%200%200%201%200-5.66V5.9A5%205%200%200%201%2048.1%202h-6.27a3%203%200%200%201-5.66-2H52v17.83zm0%2014.1a4.97%204.97%200%200%201-1.72-.72l-4.43%204.44a3%203%200%201%201-1.41-1.42l4.43-4.43a5%205%200%200%201%200-5.52l-4.43-4.43a3%203%200%201%201%201.41-1.41l4.43%204.43c.53-.35%201.12-.6%201.72-.72v9.78zM22.15%200h9.78a5%205%200%200%201-.72%203.8l4.44%204.43a3%203%200%201%201-1.42%201.42L29.8%205.2a5%205%200%200%201-5.52%200l-4.43%204.44a3%203%200%201%201-1.41-1.42l4.43-4.43a5%205%200%200%201-.72-3.8zm0%2052c.13-.6.37-1.19.72-1.72l-4.43-4.43a3%203%200%201%201%201.41-1.41l4.43%204.43a5%205%200%200%201%205.52%200l4.43-4.43a3%203%200%201%201%201.42%201.41l-4.44%204.43c.36.53.6%201.12.72%201.72h-9.78zm9.75-24a5%205%200%200%201-3.9%203.9v6.27a3%203%200%201%201-2%200V31.9a5%205%200%200%201-3.9-3.9h-6.27a3%203%200%201%201%200-2h6.27a5%205%200%200%201%203.9-3.9v-6.27a3%203%200%201%201%202%200v6.27a5%205%200%200%201%203.9%203.9h6.27a3%203%200%201%201%200%202H31.9z%22%2F%3E%3C%2Fsvg%3E&#x27;)\"><div class=\"container\"><div class=\"heroContainer_S8D4\"><div class=\"heroInfo_uHiW\"><h1 class=\"hero__title\">Typanion</h1><p class=\"hero__subtitle\">Type-safe runtime type validation with no dependencies</p><div class=\"buttons_+YzY\"><a class=\"button button--outline button--secondary button--lg getStarted_1ic1\" href=\"/typanion/docs\">Overview</a><a class=\"button button--outline button--secondary button--lg getStarted_1ic1\" href=\"/typanion/docs/getting-started\">Get Started</a></div></div><div class=\"heroCode_0s2g\"><div class=\"shiki-twoslash-fragment\"><pre class=\"shiki min-light twoslash lsp\" style=\"background-color:#ffffff;color:#24292eff\"><div class=\"language-id\">ts</div><div class=\"code-container\"><code><div class=\"line\"><span style=\"color:#D32F2F\">import</span><span style=\"color:#24292EFF\"> </span><span style=\"color:#1976D2\">*</span><span style=\"color:#24292EFF\"> </span><span style=\"color:#D32F2F\">as</span><span style=\"color:#24292EFF\"> <data-lsp lsp=\"import t\">t</data-lsp> </span><span style=\"color:#D32F2F\">from</span><span style=\"color:#24292EFF\"> </span><span style=\"color:#22863A\">&#x27;typanion&#x27;</span><span style=\"color:#24292EFF\">;</span></div><div class=\"line\">\u00a0</div><div class=\"line\"><span style=\"color:#D32F2F\">const</span><span style=\"color:#24292EFF\"> </span><span style=\"color:#1976D2\"><data-lsp lsp=\"const isPort: t.StrictValidator&lt;unknown, number&gt;\">isPort</data-lsp></span><span style=\"color:#24292EFF\"> </span><span style=\"color:#D32F2F\">=</span><span style=\"color:#24292EFF\"> </span><span style=\"color:#1976D2\"><data-lsp lsp=\"import t\">t</data-lsp></span><span style=\"color:#6F42C1\">.<data-lsp lsp=\"Create a validator that runs the provided spec before applying a series offollowup validation on the refined type. This is useful when you not onlywish to validate the data type itself, but also its format.For example, the following would validate that a value is a valid port:  t.cascade(t.isNumber(), t.isInteger(), t.isInInclusiveRange(1, 655356))And the following would validate that a value is base64:  t.cascade(t.isString(), t.isBase64())function cascade&lt;t.StrictValidator&lt;unknown, number&gt;&gt;(spec: t.StrictValidator&lt;unknown, number&gt;, followups: (t.LooseTest&lt;number&gt; | t.StrictTest&lt;number, number&gt;)[]): t.StrictValidator&lt;unknown, number&gt; (+1 overload)\">cascade</data-lsp></span><span style=\"color:#24292EFF\">(</span><span style=\"color:#1976D2\"><data-lsp lsp=\"import t\">t</data-lsp></span><span style=\"color:#6F42C1\">.<data-lsp lsp=\"Create a validator that only returns true when the tested value is anumber (including floating numbers; use `cascade` and `isInteger` torestrict the range further). Refines the type to `number`.Supports coercion.function isNumber(): t.StrictValidator&lt;unknown, number&gt;\">isNumber</data-lsp></span><span style=\"color:#24292EFF\">()</span><span style=\"color:#212121\">,</span><span style=\"color:#24292EFF\"> [</span></div><div class=\"line\"><span style=\"color:#24292EFF\">    </span><span style=\"color:#1976D2\"><data-lsp lsp=\"import t\">t</data-lsp></span><span style=\"color:#6F42C1\">.<data-lsp lsp=\"Create a validator that checks that the tested number is an integer.By default Typanion will also check that it&#x27;s a *safe* integer. For example,2^53 wouldn&#x27;t be a safe integer because 2^53+1 would be rounded to 2^53,which could put your applications at risk when used in loops.function isInteger({ unsafe, }?: {    unsafe?: boolean | undefined;}): t.LooseValidator&lt;number, number&gt;\">isInteger</data-lsp></span><span style=\"color:#24292EFF\">()</span><span style=\"color:#212121\">,</span></div><div class=\"line\"><span style=\"color:#24292EFF\">    </span><span style=\"color:#1976D2\"><data-lsp lsp=\"import t\">t</data-lsp></span><span style=\"color:#6F42C1\">.<data-lsp lsp=\"Create a validator that checks that the tested number is between thespecified references (including the upper boundary).function isInInclusiveRange(a: number, b: number): t.LooseValidator&lt;number, number&gt;\">isInInclusiveRange</data-lsp></span><span style=\"color:#24292EFF\">(</span><span style=\"color:#1976D2\">1</span><span style=\"color:#212121\">,</span><span style=\"color:#24292EFF\"> </span><span style=\"color:#1976D2\">65535</span><span style=\"color:#24292EFF\">)</span><span style=\"color:#212121\">,</span></div><div class=\"line\"><span style=\"color:#24292EFF\">]);</span></div><div class=\"line\">\u00a0</div><div class=\"line\"><span style=\"color:#D32F2F\">if</span><span style=\"color:#24292EFF\"> (</span><span style=\"color:#6F42C1\"><data-lsp lsp=\"const isPort: (value: unknown, test?: t.ValidationState | undefined) =&gt; value is number\">isPort</data-lsp></span><span style=\"color:#24292EFF\">(<data-lsp lsp=\"const value: unknown\">value</data-lsp>)) {</span></div><div class=\"line\"><span style=\"color:#24292EFF\">    </span><span style=\"color:#1976D2\"><data-lsp lsp=\"const server: Server\">server</data-lsp></span><span style=\"color:#6F42C1\">.<data-lsp lsp=\"Start a server listening for connections. A `net.Server` can be a TCP oran `IPC` server depending on what it listens to.Possible signatures:* `server.listen(handle[, backlog][, callback])`* `server.listen(options[, callback])`* `server.listen(path[, backlog][, callback])` for `IPC` servers* `server.listen([port[, host[, backlog]]][, callback])` for TCP serversThis function is asynchronous. When the server starts listening, the `&#x27;listening&#x27;` event will be emitted. The last parameter `callback`will be added as a listener for the `&#x27;listening&#x27;`event.All `listen()` methods can take a `backlog` parameter to specify the maximumlength of the queue of pending connections. The actual length will be determinedby the OS through sysctl settings such as `tcp_max_syn_backlog` and `somaxconn`on Linux. The default value of this parameter is 511 (not 512).All {@link Socket} are set to `SO_REUSEADDR` (see [`socket(7)`](https://man7.org/linux/man-pages/man7/socket.7.html) fordetails).The `server.listen()` method can be called again if and only if there was anerror during the first `server.listen()` call or `server.close()` has beencalled. Otherwise, an `ERR_SERVER_ALREADY_LISTEN` error will be thrown.One of the most common errors raised when listening is `EADDRINUSE`.This happens when another server is already listening on the requested`port`/`path`/`handle`. One way to handle this would be to retryafter a certain amount of time:```jsserver.on(&#x27;error&#x27;, (e) =&gt; {  if (e.code === &#x27;EADDRINUSE&#x27;) {    console.log(&#x27;Address in use, retrying...&#x27;);    setTimeout(() =&gt; {      server.close();      server.listen(PORT, HOST);    }, 1000);  }});```(method) Server.listen(port?: number | undefined, hostname?: string | undefined, backlog?: number | undefined, listeningListener?: (() =&gt; void) | undefined): Server (+8 overloads)\">listen</data-lsp></span><span style=\"color:#24292EFF\">(<data-lsp lsp=\"const value: number\">value</data-lsp>);</span></div><div class=\"line\"><span style=\"color:#24292EFF\">}</span></div></code></div></pre><pre class=\"shiki nord twoslash lsp\" style=\"background-color:#2e3440ff;color:#d8dee9ff\"><div class=\"language-id\">ts</div><div class=\"code-container\"><code><div class=\"line\"><span style=\"color:#81A1C1\">import</span><span style=\"color:#D8DEE9FF\"> </span><span style=\"color:#81A1C1\">*</span><span style=\"color:#D8DEE9FF\"> </span><span style=\"color:#81A1C1\">as</span><span style=\"color:#D8DEE9FF\"> </span><span style=\"color:#D8DEE9\"><data-lsp lsp=\"import t\">t</data-lsp></span><span style=\"color:#D8DEE9FF\"> </span><span style=\"color:#81A1C1\">from</span><span style=\"color:#D8DEE9FF\"> </span><span style=\"color:#ECEFF4\">&#x27;</span><span style=\"color:#A3BE8C\">typanion</span><span style=\"color:#ECEFF4\">&#x27;</span><span style=\"color:#81A1C1\">;</span></div><div class=\"line\">\u00a0</div><div class=\"line\"><span style=\"color:#81A1C1\">const</span><span style=\"color:#D8DEE9FF\"> </span><span style=\"color:#D8DEE9\"><data-lsp lsp=\"const isPort: t.StrictValidator&lt;unknown, number&gt;\">isPort</data-lsp></span><span style=\"color:#D8DEE9FF\"> </span><span style=\"color:#81A1C1\">=</span><span style=\"color:#D8DEE9FF\"> </span><span style=\"color:#D8DEE9\"><data-lsp lsp=\"import t\">t</data-lsp></span><span style=\"color:#ECEFF4\">.</span><span style=\"color:#88C0D0\"><data-lsp lsp=\"Create a validator that runs the provided spec before applying a series offollowup validation on the refined type. This is useful when you not onlywish to validate the data type itself, but also its format.For example, the following would validate that a value is a valid port:  t.cascade(t.isNumber(), t.isInteger(), t.isInInclusiveRange(1, 655356))And the following would validate that a value is base64:  t.cascade(t.isString(), t.isBase64())function cascade&lt;t.StrictValidator&lt;unknown, number&gt;&gt;(spec: t.StrictValidator&lt;unknown, number&gt;, followups: (t.LooseTest&lt;number&gt; | t.StrictTest&lt;number, number&gt;)[]): t.StrictValidator&lt;unknown, number&gt; (+1 overload)\">cascade</data-lsp></span><span style=\"color:#D8DEE9FF\">(</span><span style=\"color:#D8DEE9\"><data-lsp lsp=\"import t\">t</data-lsp></span><span style=\"color:#ECEFF4\">.</span><span style=\"color:#88C0D0\"><data-lsp lsp=\"Create a validator that only returns true when the tested value is anumber (including floating numbers; use `cascade` and `isInteger` torestrict the range further). Refines the type to `number`.Supports coercion.function isNumber(): t.StrictValidator&lt;unknown, number&gt;\">isNumber</data-lsp></span><span style=\"color:#D8DEE9FF\">()</span><span style=\"color:#ECEFF4\">,</span><span style=\"color:#D8DEE9FF\"> [</span></div><div class=\"line\"><span style=\"color:#D8DEE9FF\">    </span><span style=\"color:#D8DEE9\"><data-lsp lsp=\"import t\">t</data-lsp></span><span style=\"color:#ECEFF4\">.</span><span style=\"color:#88C0D0\"><data-lsp lsp=\"Create a validator that checks that the tested number is an integer.By default Typanion will also check that it&#x27;s a *safe* integer. For example,2^53 wouldn&#x27;t be a safe integer because 2^53+1 would be rounded to 2^53,which could put your applications at risk when used in loops.function isInteger({ unsafe, }?: {    unsafe?: boolean | undefined;}): t.LooseValidator&lt;number, number&gt;\">isInteger</data-lsp></span><span style=\"color:#D8DEE9FF\">()</span><span style=\"color:#ECEFF4\">,</span></div><div class=\"line\"><span style=\"color:#D8DEE9FF\">    </span><span style=\"color:#D8DEE9\"><data-lsp lsp=\"import t\">t</data-lsp></span><span style=\"color:#ECEFF4\">.</span><span style=\"color:#88C0D0\"><data-lsp lsp=\"Create a validator that checks that the tested number is between thespecified references (including the upper boundary).function isInInclusiveRange(a: number, b: number): t.LooseValidator&lt;number, number&gt;\">isInInclusiveRange</data-lsp></span><span style=\"color:#D8DEE9FF\">(</span><span style=\"color:#B48EAD\">1</span><span style=\"color:#ECEFF4\">,</span><span style=\"color:#D8DEE9FF\"> </span><span style=\"color:#B48EAD\">65535</span><span style=\"color:#D8DEE9FF\">)</span><span style=\"color:#ECEFF4\">,</span></div><div class=\"line\"><span style=\"color:#D8DEE9FF\">])</span><span style=\"color:#81A1C1\">;</span></div><div class=\"line\">\u00a0</div><div class=\"line\"><span style=\"color:#81A1C1\">if</span><span style=\"color:#D8DEE9FF\"> (</span><span style=\"color:#88C0D0\"><data-lsp lsp=\"const isPort: (value: unknown, test?: t.ValidationState | undefined) =&gt; value is number\">isPort</data-lsp></span><span style=\"color:#D8DEE9FF\">(</span><span style=\"color:#D8DEE9\"><data-lsp lsp=\"const value: unknown\">value</data-lsp></span><span style=\"color:#D8DEE9FF\">)) </span><span style=\"color:#ECEFF4\">{</span></div><div class=\"line\"><span style=\"color:#D8DEE9FF\">    </span><span style=\"color:#D8DEE9\"><data-lsp lsp=\"const server: Server\">server</data-lsp></span><span style=\"color:#ECEFF4\">.</span><span style=\"color:#88C0D0\"><data-lsp lsp=\"Start a server listening for connections. A `net.Server` can be a TCP oran `IPC` server depending on what it listens to.Possible signatures:* `server.listen(handle[, backlog][, callback])`* `server.listen(options[, callback])`* `server.listen(path[, backlog][, callback])` for `IPC` servers* `server.listen([port[, host[, backlog]]][, callback])` for TCP serversThis function is asynchronous. When the server starts listening, the `&#x27;listening&#x27;` event will be emitted. The last parameter `callback`will be added as a listener for the `&#x27;listening&#x27;`event.All `listen()` methods can take a `backlog` parameter to specify the maximumlength of the queue of pending connections. The actual length will be determinedby the OS through sysctl settings such as `tcp_max_syn_backlog` and `somaxconn`on Linux. The default value of this parameter is 511 (not 512).All {@link Socket} are set to `SO_REUSEADDR` (see [`socket(7)`](https://man7.org/linux/man-pages/man7/socket.7.html) fordetails).The `server.listen()` method can be called again if and only if there was anerror during the first `server.listen()` call or `server.close()` has beencalled. Otherwise, an `ERR_SERVER_ALREADY_LISTEN` error will be thrown.One of the most common errors raised when listening is `EADDRINUSE`.This happens when another server is already listening on the requested`port`/`path`/`handle`. One way to handle this would be to retryafter a certain amount of time:```jsserver.on(&#x27;error&#x27;, (e) =&gt; {  if (e.code === &#x27;EADDRINUSE&#x27;) {    console.log(&#x27;Address in use, retrying...&#x27;);    setTimeout(() =&gt; {      server.close();      server.listen(PORT, HOST);    }, 1000);  }});```(method) Server.listen(port?: number | undefined, hostname?: string | undefined, backlog?: number | undefined, listeningListener?: (() =&gt; void) | undefined): Server (+8 overloads)\">listen</data-lsp></span><span style=\"color:#D8DEE9FF\">(</span><span style=\"color:#D8DEE9\"><data-lsp lsp=\"const value: number\">value</data-lsp></span><span style=\"color:#D8DEE9FF\">)</span><span style=\"color:#81A1C1\">;</span></div><div class=\"line\"><span style=\"color:#ECEFF4\">}</span></div></code></div></pre></div></div></div></div></header><main><section class=\"features_n4mZ\"><div class=\"container\"><div class=\"row\"><div class=\"col col--4\"><h3>TypeScript integration</h3><p>Typanion provides strong type inference; if your validator functions pass, TypeScript will refine values accordingly.</p></div><div class=\"col col--4\"><h3>Feature complete</h3><p>Despite being very small, Typanion supports error messages, coercions, and various utilities outside of pure JSON validation.</p></div><div class=\"col col--4\"><h3>Tree-shakeable</h3><p>Typanion uses a functional approach that lends itself very well to being optimized away by most bundlers.</p></div></div></div></section></main></div><footer class=\"footer footer--dark\"><div class=\"container container-fluid\"><div class=\"row footer__links\"><div class=\"col footer__col\"><div class=\"footer__title\">Community</div><ul class=\"footer__items\"><li class=\"footer__item\"><a href=\"https://discordapp.com/invite/yarnpkg\" target=\"_blank\" rel=\"noopener noreferrer\" class=\"footer__link-item\"><span>Discord<svg width=\"13.5\" height=\"13.5\" aria-hidden=\"true\" viewBox=\"0 0 24 24\" class=\"iconExternalLink_5zKM\"><path fill=\"currentColor\" d=\"M21 13v10h-21v-19h12v2h-10v15h17v-8h2zm3-12h-10.988l4.035 4-6.977 7.07 2.828 2.828 6.977-7.07 4.125 4.172v-11z\"></path></svg></span></a></li><li class=\"footer__item\"><a href=\"https://twitter.com/arcanis\" target=\"_blank\" rel=\"noopener noreferrer\" class=\"footer__link-item\"><span>Twitter<svg width=\"13.5\" height=\"13.5\" aria-hidden=\"true\" viewBox=\"0 0 24 24\" class=\"iconExternalLink_5zKM\"><path fill=\"currentColor\" d=\"M21 13v10h-21v-19h12v2h-10v15h17v-8h2zm3-12h-10.988l4.035 4-6.977 7.07 2.828 2.828 6.977-7.07 4.125 4.172v-11z\"></path></svg></span></a></li></ul></div><div class=\"col footer__col\"><div class=\"footer__title\">More</div><ul class=\"footer__items\"><li class=\"footer__item\"><a href=\"https://github.com/arcanis/typanion\" target=\"_blank\" rel=\"noopener noreferrer\" class=\"footer__link-item\"><span>GitHub<svg width=\"13.5\" height=\"13.5\" aria-hidden=\"true\" viewBox=\"0 0 24 24\" class=\"iconExternalLink_5zKM\"><path fill=\"currentColor\" d=\"M21 13v10h-21v-19h12v2h-10v15h17v-8h2zm3-12h-10.988l4.035 4-6.977 7.07 2.828 2.828 6.977-7.07 4.125 4.172v-11z\"></path></svg></span></a></li><li class=\"footer__item\"><a href=\"https://mael.dev/packages\" target=\"_blank\" rel=\"noopener noreferrer\" class=\"footer__link-item\"><span>See Also<svg width=\"13.5\" height=\"13.5\" aria-hidden=\"true\" viewBox=\"0 0 24 24\" class=\"iconExternalLink_5zKM\"><path fill=\"currentColor\" d=\"M21 13v10h-21v-19h12v2h-10v15h17v-8h2zm3-12h-10.988l4.035 4-6.977 7.07 2.828 2.828 6.977-7.07 4.125 4.172v-11z\"></path></svg></span></a></li></ul></div><div class=\"col footer__col\"><div class=\"footer__title\"></div><ul class=\"footer__items\"></ul></div></div><div class=\"footer__bottom text--center\"><div class=\"footer__copyright\">Copyright \u00a9 2023 Ma\u00ebl Nison. Documentation built with Docusaurus.</div></div></div></footer></div><script src=\"/typanion/assets/js/runtime~main.98a08f33.js\"></script><script src=\"/typanion/assets/js/main.440ac69a.js\"></script></body></html>",
  "embeddings": []
}
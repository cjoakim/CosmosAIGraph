{
  "libtype": "npm",
  "libname": "args-js",
  "url": "http://joebain.github.io/args.js/",
  "html": "<head><link href='http://fonts.googleapis.com/css?family=PT+Sans:400,400italic|Arvo:700' rel='stylesheet' type='text/css'><title>Args.js - Optional and Default Parameters for JavaScript</title><link rel=\"stylesheet\" href=\"site/style.css\" /><script src=\"site/prism.js\"></script><link rel=\"stylesheet\" href=\"site/prism.css\" /></head><body><div class=content><div class=side-links><a href=\"https://travis-ci.org/joebain/args.js\" id=travis-status><img alt=\"Travis CI\" src=\"https://travis-ci.org/joebain/args.js.png?branch=master\"></a><iframe src=\"http://ghbtns.com/github-btn.html?user=joebain&repo=args.js&type=fork&count=true\"allowtransparency=\"true\" frameborder=\"0\" scrolling=\"0\" width=\"90\" height=\"20\"></iframe><iframe src=\"http://ghbtns.com/github-btn.html?user=joebain&repo=args.js&type=watch&count=true\"allowtransparency=\"true\" frameborder=\"0\" scrolling=\"0\" width=\"90\" height=\"20\"></iframe></div><h1>Args.js</h1>Args.js lets you easily create functions with optional parameters, default parameters, parameter groups and named parameters. It checks types and will trigger exceptions if a function is called incorrectly.<div class=col-container><div class=col><h3>More of this</h3><pre><code class=\"language-javascript\">var args = Args([{elements:  Args.ARRAY    | Args.Required},{qualifier: Args.FUNCTION | Args.Optional},{node:      Args.DOM_EL   | Args.Optional}{regex:     Args.STRING   | Args.Optional},{index:     Args.INT      | Args.Optional,_default: 0}], arguments);</code></pre></div><div class=col><h3>Less of this</h3><pre><code class=\"language-javascript\">// set a default value for qualifierqualifier = qualifier || 0;if ( jQuery.isFunction( qualifier ) ) {// treat qualifier as function} else if ( qualifier.nodeType ) {// treat qualifier as a DOM node} else if ( typeof qualifier === \"string\" ) {// treat qualifier as a regular expression} else {// treat qualifier as an index}</code></pre><a href=\"https://github.com/jquery/jquery/blob/master/src/traversing/findFilter.js#L11\"><i>Based on actual code in jQuery</i></a></div></div><h2>Example</h2>Clearly and safely specify the arguments your function takes. Have flexibility without writing spaghetti code.<pre><code class=\"language-javascript\">function addBook() {var args = Args([{title:       Args.STRING | Args.Required},{description: Args.STRING | Args.Optional},{rating:      Args.INT    | Args.Optional}], arguments);args.title === \"Frankenstein\";args.description === undefined;args.rating === 5;}addBook(\"Frankenstein\", 5);</code></pre><h2>Download</h2><p><a class=button href=\"https://raw2.github.com/joebain/args.js/master/dist/Args.js\">Full</a> (12.0k) <a class=button href=\"https://raw2.github.com/joebain/args.js/master/dist/Args.min.js\">Minified</a> (4.1k)</p><p>&nbsp;</p><p>Or install with <a href=\"https://npmjs.org/package/args-js\">NPM</a>:</p><pre><code class=\"language-clike\">npm install args-js</code></pre><p>Or <a href=\"http://bower.io/\">Bower</a>:</p><pre><code class=\"language-clike\">bower install args-js</code></pre><h2>Source</h2>The code is on <a href=\"http://github.com/joebain/Args.js\">GitHub</a> and is MIT licensed. It works like <code>&lt;script src=...&gt;</code> in a browser or with <a href=\"http://requirejs.org/\">AMD</a> or <a href=\"http://nodejs.org/api/modules.html\">Node.js's <code>require()</code></a>. There are over 50 tests (so far) which can be run using <a href=\"http://visionmedia.github.io/mocha/\">mocha</a>.<h2>Features</h2><h3>Optional & Required Arguments</h3>Arguments can be specified as optional or required. If a required argument is absent an exception is thrown.<pre><code class=\"language-javascript\">var args = Args([{title:       Args.STRING | Args.Required},{description: Args.STRING | Args.Optional},{rating:      Args.INT    | Args.Optional}], arguments);</code></pre><h3>Default Arguments</h3>Optional arguments can have default values if no value is passed.<pre><code class=\"language-javascript\">var args = Args([{description: Args.STRING | Args.Optional,_default: \"Description missing\"},{rating:      Args.INT    | Args.Optional,_default: 3}], arguments);</code></pre><h3>Custom Types</h3>Args.js can work with your custom class hierarchy.<pre><code class=\"language-javascript\">var args = Args([{title: Args.STRING | Args.Required},{book:  Args.OBJECT | Args.Required,_type: MyBook}], arguments);</code></pre><h3>Argument Groups</h3>Specify an argument group when one of serveral types can be passed.<pre><code class=\"language-javascript\">function myFunc() {var args = Args([{title: Args.STRING | Args.Required},[{description: Args.STRING},{myBook:      Args.OBJECT, _type: MyBook}]], arguments);}myFunc(\"Wuthering Heights\", wutherBookObject);// ormyFunc(\"Wuthering Heights\", \"A book about love and rain.\");</code></pre>        It is also possible to make an argument group optional by including an <code>Args.Optional</code> in the group, this means a positional argument will be taken if possible, but the group is skipped otherwise:<pre><code class=\"language-javascript\">[ {description: Args.STRING}, {myBook: Args.OBJECT}, Args.Optional ]</code></pre><h3>Named Arguments</h3>You can call your functions with named arguments too.<pre><code class=\"language-javascript\">function myFunc() {var args = Args([{title:       Args.STRING | Args.Required},{description: Args.STRING | Args.Optional},{rating:      Args.INT    | Args.Optional}], arguments);}myFunc(\"Frankenstein\", \"A book about monsters\", 5);// ormyFunc(\"Frankenstein\", {description: \"A book about monsters\",rating: 5  });// ormyFunc({title: \"Frankenstein\",description: \"A book about monsters\",rating: 5});</code></pre>        <b>Note:</b> If the last argument you pass is a simple object which has a property with the same name and type of one of your other arguments Args.js will assume you are trying to use named arguments. So for example, this will cause problems:<pre><code class=\"language-javascript\">function myFunc() {var args = Args([{book:        Args.OBJECT | Args.Required},{description: Args.STRING | Args.Optional}], arguments);}var myBook = {title: \"Frankenstein\", description: \"A book about a monster\"};// THIS WILL THROW AN ERROR!myFunc(myBook);</code></pre>        To get around this you can make sure your book has a proper type, or it does not share property names with your arguments.<h3>Mixed Order Arguments</h3>Your first and third arguments are optional but the second and fourth aren't? No problem.<pre><code class=\"language-javascript\">function addBook() {var args = Args([{author:   Args.OBJECT   | Args.Optional, _type: MyAuthor},{title:    Args.STRING   | Args.Required},{rating:   Args.INT      | Args.Optional},{callback: Args.FUNCTION | Args.Required}], arguments);}// you can now calladdBook(new MyAuthor(\"Mary Shelley\"), \"Frankenstein\", 5, function(book) { /* ... */ });// oraddBook(\"Frankenstein\", function(book) { /* ... */ });</code></pre><h3>Custom Checks</h3>You can write custom check functions to guarantee the right arguments get through.<pre><code class=\"language-javascript\">var args = Args([{author:   Args.OBJECT   | Args.Required, _check:function(author) { return author.name === \"Mary Shelley\"; }},{title:    Args.STRING   | Args.Required}], arguments);</code></pre><h3>Regex Checks</h3>        For arguments which have a sensible <code>toString()</code> representation you can pass a regular expression as a custom checker. This trys to match the regex to the string value of an argument.<pre><code class=\"language-javascript\">var args = Args([{author:   Args.OBJECT   | Args.Required, _check: /(Mary|Percy Bysshe) Shelley/ },{title:    Args.STRING   | Args.Required}], arguments);</code></pre><h3>Argument Precedence</h3>Args.js gives first precedence to named arguments, other arguments will be shifted to the right:<pre><code class=\"language-javascript\">function addBook() {var args = Args([{author:   Args.STRING   | Args.Required},{title:    Args.STRING   | Args.Required}], arguments);}addBook(\"Frankenstein\", {author: \"Mary Shelley\"});// args.author === \"Mary Shelley\" // args.title === \"Frankenstein\" </code></pre>It also prefers <code>Required</code> arguments over <code>Optional</code> ones:<pre><code class=\"language-javascript\">function addBook() {var args = Args([{author:   Args.STRING   | Args.Optional},{title:    Args.STRING   | Args.Required}], arguments);}addBook(\"Frankenstein\");// args.author === undefined // args.title === \"Frankenstein\" </code></pre><h2>Types</h2>Args.js includes the following type constants for you to use in function signatures:<pre><code class=\"language-javascript\">Args.ANYArgs.STRING       Args.FUNCTION     Args.INT          Args.FLOAT        Args.ARRAY_BUFFER Args.OBJECT       Args.DATE         Args.BOOL         Args.DOM_EL       Args.ARRAY        </code></pre><h2>See Also</h2><ul><li><a href=\"https://github.com/theshock/args-js\">args-js</a> &dash; which does default values, casting and type hinting.</li><li><a href=\"https://github.com/andrey-p/arg-err\">arg-err</a> &dash; a lightweight library to check for type errors.</li><li><a href=\"https://github.com/zefhemel/argspecjs\">argspecjs</a> &dash; handles optional arguments in any position in the argument list and allows custom property checkers.</li><li><a href=\"https://github.com/k0nserv/Strict.js\">Strict.js</a> &dash; A fuller type checking library for writing object definitions as well as function definitions.</li><li><a href=\"https://github.com/stretchr/over.js\">over.js</a> &dash; A different approach to the same problem, this is an elegant library for function overloading.</li></ul><h2>Credits</h2>By <a href=\"http://joeba.in\">Joe Bain</a></div></body>",
  "embeddings": []
}
{
  "libtype": "npm",
  "libname": "cbor",
  "url": "https://github.com/hildjj/node-cbor/tree/main/packages/cbor",
  "html": "{\"payload\":{\"allShortcutsEnabled\":false,\"path\":\"packages/cbor\",\"repo\":{\"id\":17293537,\"defaultBranch\":\"main\",\"name\":\"node-cbor\",\"ownerLogin\":\"hildjj\",\"currentUserCanPush\":false,\"isFork\":false,\"isEmpty\":false,\"createdAt\":\"2014-02-28T17:14:07.000Z\",\"ownerAvatar\":\"https://avatars.githubusercontent.com/u/93963?v=4\",\"public\":true,\"private\":false,\"isOrgOwned\":false},\"currentUser\":null,\"refInfo\":{\"name\":\"main\",\"listCacheKey\":\"v0:1706717313.0\",\"canEdit\":false,\"refType\":\"branch\",\"currentOid\":\"1967cd4540e9aab60093fcd711cd97edee542043\"},\"tree\":{\"items\":[{\"name\":\"lib\",\"path\":\"packages/cbor/lib\",\"contentType\":\"directory\"},{\"name\":\"test\",\"path\":\"packages/cbor/test\",\"contentType\":\"directory\"},{\"name\":\"types\",\"path\":\"packages/cbor/types\",\"contentType\":\"directory\"},{\"name\":\"vendor/binary-parse-stream\",\"path\":\"packages/cbor/vendor/binary-parse-stream\",\"contentType\":\"directory\",\"hasSimplifiedPath\":true},{\"name\":\".dockerignore\",\"path\":\"packages/cbor/.dockerignore\",\"contentType\":\"file\"},{\"name\":\".eslintrc.js\",\"path\":\"packages/cbor/.eslintrc.js\",\"contentType\":\"file\"},{\"name\":\".npmignore\",\"path\":\"packages/cbor/.npmignore\",\"contentType\":\"file\"},{\"name\":\".npmrc\",\"path\":\"packages/cbor/.npmrc\",\"contentType\":\"file\"},{\"name\":\"Dockerfile\",\"path\":\"packages/cbor/Dockerfile\",\"contentType\":\"file\"},{\"name\":\"LICENSE.md\",\"path\":\"packages/cbor/LICENSE.md\",\"contentType\":\"file\"},{\"name\":\"README.md\",\"path\":\"packages/cbor/README.md\",\"contentType\":\"file\"},{\"name\":\"package.json\",\"path\":\"packages/cbor/package.json\",\"contentType\":\"file\"},{\"name\":\"tsconfig.json\",\"path\":\"packages/cbor/tsconfig.json\",\"contentType\":\"file\"}],\"templateDirectorySuggestionUrl\":null,\"readme\":{\"displayName\":\"README.md\",\"richText\":\"<article class=\\\"markdown-body entry-content container-lg\\\" itemprop=\\\"text\\\"><div class=\\\"markdown-heading\\\" dir=\\\"auto\\\"><h1 tabindex=\\\"-1\\\" class=\\\"heading-element\\\" dir=\\\"auto\\\">cbor</h1><a id=\\\"user-content-cbor\\\" class=\\\"anchor-element\\\" aria-label=\\\"Permalink: cbor\\\" href=\\\"#cbor\\\"><svg class=\\\"octicon octicon-link\\\" viewBox=\\\"0 0 16 16\\\" version=\\\"1.1\\\" width=\\\"16\\\" height=\\\"16\\\" aria-hidden=\\\"true\\\"><path d=\\\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\\\"></path></svg></a></div>\\n<p dir=\\\"auto\\\">Encode and parse data in the Concise Binary Object Representation (CBOR) data format (<a href=\\\"https://www.rfc-editor.org/rfc/rfc8949.html\\\" rel=\\\"nofollow\\\">RFC8949</a>).</p>\\n<div class=\\\"markdown-heading\\\" dir=\\\"auto\\\"><h2 tabindex=\\\"-1\\\" class=\\\"heading-element\\\" dir=\\\"auto\\\">Supported Node.js versions</h2><a id=\\\"user-content-supported-nodejs-versions\\\" class=\\\"anchor-element\\\" aria-label=\\\"Permalink: Supported Node.js versions\\\" href=\\\"#supported-nodejs-versions\\\"><svg class=\\\"octicon octicon-link\\\" viewBox=\\\"0 0 16 16\\\" version=\\\"1.1\\\" width=\\\"16\\\" height=\\\"16\\\" aria-hidden=\\\"true\\\"><path d=\\\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\\\"></path></svg></a></div>\\n<p dir=\\\"auto\\\">This project now only supports versions of Node that the Node team is\\n<a href=\\\"https://github.com/nodejs/Release#release-schedule\\\">currently supporting</a>.\\nAva's <a href=\\\"https://github.com/avajs/ava/blob/main/docs/support-statement.md\\\">support\\nstatement</a>\\nis what we will be using as well.  Currently, that means Node <code>10</code>+ is\\nrequired.  If you need to support an older version of Node (back to version\\n6), use cbor version 5.2.x, which will get nothing but security updates from\\nhere on out.</p>\\n<div class=\\\"markdown-heading\\\" dir=\\\"auto\\\"><h2 tabindex=\\\"-1\\\" class=\\\"heading-element\\\" dir=\\\"auto\\\">Installation:</h2><a id=\\\"user-content-installation\\\" class=\\\"anchor-element\\\" aria-label=\\\"Permalink: Installation:\\\" href=\\\"#installation\\\"><svg class=\\\"octicon octicon-link\\\" viewBox=\\\"0 0 16 16\\\" version=\\\"1.1\\\" width=\\\"16\\\" height=\\\"16\\\" aria-hidden=\\\"true\\\"><path d=\\\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\\\"></path></svg></a></div>\\n<div class=\\\"highlight highlight-source-shell notranslate position-relative overflow-auto\\\" dir=\\\"auto\\\" data-snippet-clipboard-copy-content=\\\"$ npm install --save cbor\\\"><pre>$ npm install --save cbor</pre></div>\\n<p dir=\\\"auto\\\"><strong>NOTE</strong>\\nIf you are going to use this on the web, use <a href=\\\"/hildjj/node-cbor/blob/main/packages/cbor-web\\\">cbor-web</a> instead.</p>\\n<p dir=\\\"auto\\\">If you need support for encoding and decoding BigDecimal fractions (tag 4) or\\nBigFloats (tag 5), please see <a href=\\\"/hildjj/node-cbor/blob/main/packages/cbor-bigdecimal\\\">cbor-bigdecimal</a>.</p>\\n<div class=\\\"markdown-heading\\\" dir=\\\"auto\\\"><h2 tabindex=\\\"-1\\\" class=\\\"heading-element\\\" dir=\\\"auto\\\">Documentation:</h2><a id=\\\"user-content-documentation\\\" class=\\\"anchor-element\\\" aria-label=\\\"Permalink: Documentation:\\\" href=\\\"#documentation\\\"><svg class=\\\"octicon octicon-link\\\" viewBox=\\\"0 0 16 16\\\" version=\\\"1.1\\\" width=\\\"16\\\" height=\\\"16\\\" aria-hidden=\\\"true\\\"><path d=\\\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\\\"></path></svg></a></div>\\n<p dir=\\\"auto\\\">See the full API <a href=\\\"http://hildjj.github.io/node-cbor/\\\" rel=\\\"nofollow\\\">documentation</a>.</p>\\n<p dir=\\\"auto\\\">For a command-line interface, see <a href=\\\"/hildjj/node-cbor/blob/main/packages/cbor-cli\\\">cbor-cli</a>.</p>\\n<p dir=\\\"auto\\\">Example:</p>\\n<div class=\\\"highlight highlight-source-js notranslate position-relative overflow-auto\\\" dir=\\\"auto\\\" data-snippet-clipboard-copy-content=\\\"const cbor = require('cbor')\\nconst assert = require('assert')\\n\\nlet encoded = cbor.encode(true) // Returns &lt;Buffer f5&gt;\\ncbor.decodeFirst(encoded, (error, obj) =&gt; {\\n  // If there was an error, error != null\\n  // obj is the unpacked object\\n  assert.ok(obj === true)\\n})\\n\\n// Use integers as keys?\\nconst m = new Map()\\nm.set(1, 2)\\nencoded = cbor.encode(m) // &lt;Buffer a1 01 02&gt;\\\"><pre><span class=\\\"pl-k\\\">const</span> <span class=\\\"pl-s1\\\">cbor</span> <span class=\\\"pl-c1\\\">=</span> <span class=\\\"pl-en\\\">require</span><span class=\\\"pl-kos\\\">(</span><span class=\\\"pl-s\\\">'cbor'</span><span class=\\\"pl-kos\\\">)</span>\\n<span class=\\\"pl-k\\\">const</span> <span class=\\\"pl-s1\\\">assert</span> <span class=\\\"pl-c1\\\">=</span> <span class=\\\"pl-en\\\">require</span><span class=\\\"pl-kos\\\">(</span><span class=\\\"pl-s\\\">'assert'</span><span class=\\\"pl-kos\\\">)</span>\\n\\n<span class=\\\"pl-k\\\">let</span> <span class=\\\"pl-s1\\\">encoded</span> <span class=\\\"pl-c1\\\">=</span> <span class=\\\"pl-s1\\\">cbor</span><span class=\\\"pl-kos\\\">.</span><span class=\\\"pl-en\\\">encode</span><span class=\\\"pl-kos\\\">(</span><span class=\\\"pl-c1\\\">true</span><span class=\\\"pl-kos\\\">)</span> <span class=\\\"pl-c\\\">// Returns &lt;Buffer f5&gt;</span>\\n<span class=\\\"pl-s1\\\">cbor</span><span class=\\\"pl-kos\\\">.</span><span class=\\\"pl-en\\\">decodeFirst</span><span class=\\\"pl-kos\\\">(</span><span class=\\\"pl-s1\\\">encoded</span><span class=\\\"pl-kos\\\">,</span> <span class=\\\"pl-kos\\\">(</span><span class=\\\"pl-s1\\\">error</span><span class=\\\"pl-kos\\\">,</span> <span class=\\\"pl-s1\\\">obj</span><span class=\\\"pl-kos\\\">)</span> <span class=\\\"pl-c1\\\">=&gt;</span> <span class=\\\"pl-kos\\\">{</span>\\n  <span class=\\\"pl-c\\\">// If there was an error, error != null</span>\\n  <span class=\\\"pl-c\\\">// obj is the unpacked object</span>\\n  <span class=\\\"pl-s1\\\">assert</span><span class=\\\"pl-kos\\\">.</span><span class=\\\"pl-en\\\">ok</span><span class=\\\"pl-kos\\\">(</span><span class=\\\"pl-s1\\\">obj</span> <span class=\\\"pl-c1\\\">===</span> <span class=\\\"pl-c1\\\">true</span><span class=\\\"pl-kos\\\">)</span>\\n<span class=\\\"pl-kos\\\">}</span><span class=\\\"pl-kos\\\">)</span>\\n\\n<span class=\\\"pl-c\\\">// Use integers as keys?</span>\\n<span class=\\\"pl-k\\\">const</span> <span class=\\\"pl-s1\\\">m</span> <span class=\\\"pl-c1\\\">=</span> <span class=\\\"pl-k\\\">new</span> <span class=\\\"pl-v\\\">Map</span><span class=\\\"pl-kos\\\">(</span><span class=\\\"pl-kos\\\">)</span>\\n<span class=\\\"pl-s1\\\">m</span><span class=\\\"pl-kos\\\">.</span><span class=\\\"pl-en\\\">set</span><span class=\\\"pl-kos\\\">(</span><span class=\\\"pl-c1\\\">1</span><span class=\\\"pl-kos\\\">,</span> <span class=\\\"pl-c1\\\">2</span><span class=\\\"pl-kos\\\">)</span>\\n<span class=\\\"pl-s1\\\">encoded</span> <span class=\\\"pl-c1\\\">=</span> <span class=\\\"pl-s1\\\">cbor</span><span class=\\\"pl-kos\\\">.</span><span class=\\\"pl-en\\\">encode</span><span class=\\\"pl-kos\\\">(</span><span class=\\\"pl-s1\\\">m</span><span class=\\\"pl-kos\\\">)</span> <span class=\\\"pl-c\\\">// &lt;Buffer a1 01 02&gt;</span></pre></div>\\n<p dir=\\\"auto\\\">Allows streaming as well:</p>\\n<div class=\\\"highlight highlight-source-js notranslate position-relative overflow-auto\\\" dir=\\\"auto\\\" data-snippet-clipboard-copy-content=\\\"const cbor = require('cbor')\\nconst fs = require('fs')\\n\\nconst d = new cbor.Decoder()\\nd.on('data', obj =&gt; {\\n  console.log(obj)\\n})\\n\\nconst s = fs.createReadStream('foo')\\ns.pipe(d)\\n\\nconst d2 = new cbor.Decoder({input: '00', encoding: 'hex'})\\nd.on('data', obj =&gt; {\\n  console.log(obj)\\n})\\\"><pre><span class=\\\"pl-k\\\">const</span> <span class=\\\"pl-s1\\\">cbor</span> <span class=\\\"pl-c1\\\">=</span> <span class=\\\"pl-en\\\">require</span><span class=\\\"pl-kos\\\">(</span><span class=\\\"pl-s\\\">'cbor'</span><span class=\\\"pl-kos\\\">)</span>\\n<span class=\\\"pl-k\\\">const</span> <span class=\\\"pl-s1\\\">fs</span> <span class=\\\"pl-c1\\\">=</span> <span class=\\\"pl-en\\\">require</span><span class=\\\"pl-kos\\\">(</span><span class=\\\"pl-s\\\">'fs'</span><span class=\\\"pl-kos\\\">)</span>\\n\\n<span class=\\\"pl-k\\\">const</span> <span class=\\\"pl-s1\\\">d</span> <span class=\\\"pl-c1\\\">=</span> <span class=\\\"pl-k\\\">new</span> <span class=\\\"pl-s1\\\">cbor</span><span class=\\\"pl-kos\\\">.</span><span class=\\\"pl-c1\\\">Decoder</span><span class=\\\"pl-kos\\\">(</span><span class=\\\"pl-kos\\\">)</span>\\n<span class=\\\"pl-s1\\\">d</span><span class=\\\"pl-kos\\\">.</span><span class=\\\"pl-en\\\">on</span><span class=\\\"pl-kos\\\">(</span><span class=\\\"pl-s\\\">'data'</span><span class=\\\"pl-kos\\\">,</span> <span class=\\\"pl-s1\\\">obj</span> <span class=\\\"pl-c1\\\">=&gt;</span> <span class=\\\"pl-kos\\\">{</span>\\n  <span class=\\\"pl-smi\\\">console</span><span class=\\\"pl-kos\\\">.</span><span class=\\\"pl-en\\\">log</span><span class=\\\"pl-kos\\\">(</span><span class=\\\"pl-s1\\\">obj</span><span class=\\\"pl-kos\\\">)</span>\\n<span class=\\\"pl-kos\\\">}</span><span class=\\\"pl-kos\\\">)</span>\\n\\n<span class=\\\"pl-k\\\">const</span> <span class=\\\"pl-s1\\\">s</span> <span class=\\\"pl-c1\\\">=</span> <span class=\\\"pl-s1\\\">fs</span><span class=\\\"pl-kos\\\">.</span><span class=\\\"pl-en\\\">createReadStream</span><span class=\\\"pl-kos\\\">(</span><span class=\\\"pl-s\\\">'foo'</span><span class=\\\"pl-kos\\\">)</span>\\n<span class=\\\"pl-s1\\\">s</span><span class=\\\"pl-kos\\\">.</span><span class=\\\"pl-en\\\">pipe</span><span class=\\\"pl-kos\\\">(</span><span class=\\\"pl-s1\\\">d</span><span class=\\\"pl-kos\\\">)</span>\\n\\n<span class=\\\"pl-k\\\">const</span> <span class=\\\"pl-s1\\\">d2</span> <span class=\\\"pl-c1\\\">=</span> <span class=\\\"pl-k\\\">new</span> <span class=\\\"pl-s1\\\">cbor</span><span class=\\\"pl-kos\\\">.</span><span class=\\\"pl-c1\\\">Decoder</span><span class=\\\"pl-kos\\\">(</span><span class=\\\"pl-kos\\\">{</span><span class=\\\"pl-c1\\\">input</span>: <span class=\\\"pl-s\\\">'00'</span><span class=\\\"pl-kos\\\">,</span> <span class=\\\"pl-c1\\\">encoding</span>: <span class=\\\"pl-s\\\">'hex'</span><span class=\\\"pl-kos\\\">}</span><span class=\\\"pl-kos\\\">)</span>\\n<span class=\\\"pl-s1\\\">d</span><span class=\\\"pl-kos\\\">.</span><span class=\\\"pl-en\\\">on</span><span class=\\\"pl-kos\\\">(</span><span class=\\\"pl-s\\\">'data'</span><span class=\\\"pl-kos\\\">,</span> <span class=\\\"pl-s1\\\">obj</span> <span class=\\\"pl-c1\\\">=&gt;</span> <span class=\\\"pl-kos\\\">{</span>\\n  <span class=\\\"pl-smi\\\">console</span><span class=\\\"pl-kos\\\">.</span><span class=\\\"pl-en\\\">log</span><span class=\\\"pl-kos\\\">(</span><span class=\\\"pl-s1\\\">obj</span><span class=\\\"pl-kos\\\">)</span>\\n<span class=\\\"pl-kos\\\">}</span><span class=\\\"pl-kos\\\">)</span></pre></div>\\n<p dir=\\\"auto\\\">There is also support for synchronous decodes:</p>\\n<div class=\\\"highlight highlight-source-js notranslate position-relative overflow-auto\\\" dir=\\\"auto\\\" data-snippet-clipboard-copy-content=\\\"try {\\n  console.log(cbor.decodeFirstSync('02')) // 2\\n  console.log(cbor.decodeAllSync('0202')) // [2, 2]\\n} catch (e) {\\n  // Throws on invalid input\\n}\\\"><pre><span class=\\\"pl-k\\\">try</span> <span class=\\\"pl-kos\\\">{</span>\\n  <span class=\\\"pl-smi\\\">console</span><span class=\\\"pl-kos\\\">.</span><span class=\\\"pl-en\\\">log</span><span class=\\\"pl-kos\\\">(</span><span class=\\\"pl-s1\\\">cbor</span><span class=\\\"pl-kos\\\">.</span><span class=\\\"pl-en\\\">decodeFirstSync</span><span class=\\\"pl-kos\\\">(</span><span class=\\\"pl-s\\\">'02'</span><span class=\\\"pl-kos\\\">)</span><span class=\\\"pl-kos\\\">)</span> <span class=\\\"pl-c\\\">// 2</span>\\n  <span class=\\\"pl-smi\\\">console</span><span class=\\\"pl-kos\\\">.</span><span class=\\\"pl-en\\\">log</span><span class=\\\"pl-kos\\\">(</span><span class=\\\"pl-s1\\\">cbor</span><span class=\\\"pl-kos\\\">.</span><span class=\\\"pl-en\\\">decodeAllSync</span><span class=\\\"pl-kos\\\">(</span><span class=\\\"pl-s\\\">'0202'</span><span class=\\\"pl-kos\\\">)</span><span class=\\\"pl-kos\\\">)</span> <span class=\\\"pl-c\\\">// [2, 2]</span>\\n<span class=\\\"pl-kos\\\">}</span> <span class=\\\"pl-k\\\">catch</span> <span class=\\\"pl-kos\\\">(</span><span class=\\\"pl-s1\\\">e</span><span class=\\\"pl-kos\\\">)</span> <span class=\\\"pl-kos\\\">{</span>\\n  <span class=\\\"pl-c\\\">// Throws on invalid input</span>\\n<span class=\\\"pl-kos\\\">}</span></pre></div>\\n<p dir=\\\"auto\\\">The sync encoding and decoding are exported as a\\n<a href=\\\"https://github.com/Level/levelup#custom_encodings\\\">leveldb encoding</a>, as\\n<code>cbor.leveldb</code>.</p>\\n<div class=\\\"markdown-heading\\\" dir=\\\"auto\\\"><h2 tabindex=\\\"-1\\\" class=\\\"heading-element\\\" dir=\\\"auto\\\">highWaterMark</h2><a id=\\\"user-content-highwatermark\\\" class=\\\"anchor-element\\\" aria-label=\\\"Permalink: highWaterMark\\\" href=\\\"#highwatermark\\\"><svg class=\\\"octicon octicon-link\\\" viewBox=\\\"0 0 16 16\\\" version=\\\"1.1\\\" width=\\\"16\\\" height=\\\"16\\\" aria-hidden=\\\"true\\\"><path d=\\\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\\\"></path></svg></a></div>\\n<p dir=\\\"auto\\\">The synchronous routines for encoding and decoding will have problems with\\nobjects that are larger than 16kB, which the default buffer size for Node\\nstreams.  There are a few ways to fix this:</p>\\n<ol dir=\\\"auto\\\">\\n<li>pass in a <code>highWaterMark</code> option with the value of the largest buffer size you think you will need:</li>\\n</ol>\\n<div class=\\\"highlight highlight-source-js notranslate position-relative overflow-auto\\\" dir=\\\"auto\\\" data-snippet-clipboard-copy-content=\\\"cbor.encodeOne(new ArrayBuffer(40000), {highWaterMark: 65535})\\\"><pre><span class=\\\"pl-s1\\\">cbor</span><span class=\\\"pl-kos\\\">.</span><span class=\\\"pl-en\\\">encodeOne</span><span class=\\\"pl-kos\\\">(</span><span class=\\\"pl-k\\\">new</span> <span class=\\\"pl-v\\\">ArrayBuffer</span><span class=\\\"pl-kos\\\">(</span><span class=\\\"pl-c1\\\">40000</span><span class=\\\"pl-kos\\\">)</span><span class=\\\"pl-kos\\\">,</span> <span class=\\\"pl-kos\\\">{</span><span class=\\\"pl-c1\\\">highWaterMark</span>: <span class=\\\"pl-c1\\\">65535</span><span class=\\\"pl-kos\\\">}</span><span class=\\\"pl-kos\\\">)</span></pre></div>\\n<ol start=\\\"2\\\" dir=\\\"auto\\\">\\n<li>use stream mode.  Catch the <code>data</code>, <code>finish</code>, and <code>error</code> events.  Make sure to call <code>end()</code> when you're done.</li>\\n</ol>\\n<div class=\\\"highlight highlight-source-js notranslate position-relative overflow-auto\\\" dir=\\\"auto\\\" data-snippet-clipboard-copy-content=\\\"const enc = new cbor.Encoder()\\nenc.on('data', buf =&gt; /* Send the data somewhere */ null)\\nenc.on('error', console.error)\\nenc.on('finish', () =&gt; /* Tell the consumer we are finished */ null)\\n\\nenc.end(['foo', 1, false])\\\"><pre><span class=\\\"pl-k\\\">const</span> <span class=\\\"pl-s1\\\">enc</span> <span class=\\\"pl-c1\\\">=</span> <span class=\\\"pl-k\\\">new</span> <span class=\\\"pl-s1\\\">cbor</span><span class=\\\"pl-kos\\\">.</span><span class=\\\"pl-c1\\\">Encoder</span><span class=\\\"pl-kos\\\">(</span><span class=\\\"pl-kos\\\">)</span>\\n<span class=\\\"pl-s1\\\">enc</span><span class=\\\"pl-kos\\\">.</span><span class=\\\"pl-en\\\">on</span><span class=\\\"pl-kos\\\">(</span><span class=\\\"pl-s\\\">'data'</span><span class=\\\"pl-kos\\\">,</span> <span class=\\\"pl-s1\\\">buf</span> <span class=\\\"pl-c1\\\">=&gt;</span> <span class=\\\"pl-c\\\">/* Send the data somewhere */</span> <span class=\\\"pl-c1\\\">null</span><span class=\\\"pl-kos\\\">)</span>\\n<span class=\\\"pl-s1\\\">enc</span><span class=\\\"pl-kos\\\">.</span><span class=\\\"pl-en\\\">on</span><span class=\\\"pl-kos\\\">(</span><span class=\\\"pl-s\\\">'error'</span><span class=\\\"pl-kos\\\">,</span> <span class=\\\"pl-smi\\\">console</span><span class=\\\"pl-kos\\\">.</span><span class=\\\"pl-c1\\\">error</span><span class=\\\"pl-kos\\\">)</span>\\n<span class=\\\"pl-s1\\\">enc</span><span class=\\\"pl-kos\\\">.</span><span class=\\\"pl-en\\\">on</span><span class=\\\"pl-kos\\\">(</span><span class=\\\"pl-s\\\">'finish'</span><span class=\\\"pl-kos\\\">,</span> <span class=\\\"pl-kos\\\">(</span><span class=\\\"pl-kos\\\">)</span> <span class=\\\"pl-c1\\\">=&gt;</span> <span class=\\\"pl-c\\\">/* Tell the consumer we are finished */</span> <span class=\\\"pl-c1\\\">null</span><span class=\\\"pl-kos\\\">)</span>\\n\\n<span class=\\\"pl-s1\\\">enc</span><span class=\\\"pl-kos\\\">.</span><span class=\\\"pl-en\\\">end</span><span class=\\\"pl-kos\\\">(</span><span class=\\\"pl-kos\\\">[</span><span class=\\\"pl-s\\\">'foo'</span><span class=\\\"pl-kos\\\">,</span> <span class=\\\"pl-c1\\\">1</span><span class=\\\"pl-kos\\\">,</span> <span class=\\\"pl-c1\\\">false</span><span class=\\\"pl-kos\\\">]</span><span class=\\\"pl-kos\\\">)</span></pre></div>\\n<ol start=\\\"3\\\" dir=\\\"auto\\\">\\n<li>use <code>encodeAsync()</code>, which uses the approach from approach 2 to return a memory-inefficient promise for a Buffer.</li>\\n</ol>\\n<div class=\\\"markdown-heading\\\" dir=\\\"auto\\\"><h2 tabindex=\\\"-1\\\" class=\\\"heading-element\\\" dir=\\\"auto\\\">Supported types</h2><a id=\\\"user-content-supported-types\\\" class=\\\"anchor-element\\\" aria-label=\\\"Permalink: Supported types\\\" href=\\\"#supported-types\\\"><svg class=\\\"octicon octicon-link\\\" viewBox=\\\"0 0 16 16\\\" version=\\\"1.1\\\" width=\\\"16\\\" height=\\\"16\\\" aria-hidden=\\\"true\\\"><path d=\\\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\\\"></path></svg></a></div>\\n<p dir=\\\"auto\\\">The following types are supported for encoding:</p>\\n<ul dir=\\\"auto\\\">\\n<li>boolean</li>\\n<li>number (including -0, NaN, and \u00b1Infinity)</li>\\n<li>string</li>\\n<li>Array, Set (encoded as Array)</li>\\n<li>Object (including null), Map</li>\\n<li>undefined</li>\\n<li>Buffer</li>\\n<li>Date,</li>\\n<li>RegExp</li>\\n<li>URL</li>\\n<li>TypedArrays, ArrayBuffer, DataView</li>\\n<li>Map, Set</li>\\n<li>BigInt</li>\\n</ul>\\n<p dir=\\\"auto\\\">Decoding supports the above types, including the following CBOR tag numbers:</p>\\n<table>\\n<thead>\\n<tr>\\n<th>Tag</th>\\n<th>Generated Type</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>0</td>\\n<td>Date</td>\\n</tr>\\n<tr>\\n<td>1</td>\\n<td>Date</td>\\n</tr>\\n<tr>\\n<td>2</td>\\n<td>BigInt</td>\\n</tr>\\n<tr>\\n<td>3</td>\\n<td>BigInt</td>\\n</tr>\\n<tr>\\n<td>21</td>\\n<td>Tagged, with toJSON</td>\\n</tr>\\n<tr>\\n<td>22</td>\\n<td>Tagged, with toJSON</td>\\n</tr>\\n<tr>\\n<td>23</td>\\n<td>Tagged, with toJSON</td>\\n</tr>\\n<tr>\\n<td>32</td>\\n<td>URL</td>\\n</tr>\\n<tr>\\n<td>33</td>\\n<td>Tagged</td>\\n</tr>\\n<tr>\\n<td>34</td>\\n<td>Tagged</td>\\n</tr>\\n<tr>\\n<td>35</td>\\n<td>RegExp</td>\\n</tr>\\n<tr>\\n<td>64</td>\\n<td>Uint8Array</td>\\n</tr>\\n<tr>\\n<td>65</td>\\n<td>Uint16Array</td>\\n</tr>\\n<tr>\\n<td>66</td>\\n<td>Uint32Array</td>\\n</tr>\\n<tr>\\n<td>67</td>\\n<td>BigUint64Array</td>\\n</tr>\\n<tr>\\n<td>68</td>\\n<td>Uint8ClampedArray</td>\\n</tr>\\n<tr>\\n<td>69</td>\\n<td>Uint16Array</td>\\n</tr>\\n<tr>\\n<td>70</td>\\n<td>Uint32Array</td>\\n</tr>\\n<tr>\\n<td>71</td>\\n<td>BigUint64Array</td>\\n</tr>\\n<tr>\\n<td>72</td>\\n<td>Int8Array</td>\\n</tr>\\n<tr>\\n<td>73</td>\\n<td>Int16Array</td>\\n</tr>\\n<tr>\\n<td>74</td>\\n<td>Int32Array</td>\\n</tr>\\n<tr>\\n<td>75</td>\\n<td>BigInt64Array</td>\\n</tr>\\n<tr>\\n<td>77</td>\\n<td>Int16Array</td>\\n</tr>\\n<tr>\\n<td>78</td>\\n<td>Int32Array</td>\\n</tr>\\n<tr>\\n<td>79</td>\\n<td>BigInt64Array</td>\\n</tr>\\n<tr>\\n<td>81</td>\\n<td>Float32Array</td>\\n</tr>\\n<tr>\\n<td>82</td>\\n<td>Float64Array</td>\\n</tr>\\n<tr>\\n<td>85</td>\\n<td>Float32Array</td>\\n</tr>\\n<tr>\\n<td>86</td>\\n<td>Float64Array</td>\\n</tr>\\n<tr>\\n<td>258</td>\\n<td>Set</td>\\n</tr>\\n</tbody>\\n</table>\\n<div class=\\\"markdown-heading\\\" dir=\\\"auto\\\"><h2 tabindex=\\\"-1\\\" class=\\\"heading-element\\\" dir=\\\"auto\\\">Adding new Encoders</h2><a id=\\\"user-content-adding-new-encoders\\\" class=\\\"anchor-element\\\" aria-label=\\\"Permalink: Adding new Encoders\\\" href=\\\"#adding-new-encoders\\\"><svg class=\\\"octicon octicon-link\\\" viewBox=\\\"0 0 16 16\\\" version=\\\"1.1\\\" width=\\\"16\\\" height=\\\"16\\\" aria-hidden=\\\"true\\\"><path d=\\\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\\\"></path></svg></a></div>\\n<p dir=\\\"auto\\\">There are several ways to add a new encoder:</p>\\n<div class=\\\"markdown-heading\\\" dir=\\\"auto\\\"><h3 tabindex=\\\"-1\\\" class=\\\"heading-element\\\" dir=\\\"auto\\\"><code>encodeCBOR</code> method</h3><a id=\\\"user-content-encodecbor-method\\\" class=\\\"anchor-element\\\" aria-label=\\\"Permalink: encodeCBOR method\\\" href=\\\"#encodecbor-method\\\"><svg class=\\\"octicon octicon-link\\\" viewBox=\\\"0 0 16 16\\\" version=\\\"1.1\\\" width=\\\"16\\\" height=\\\"16\\\" aria-hidden=\\\"true\\\"><path d=\\\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\\\"></path></svg></a></div>\\n<p dir=\\\"auto\\\">This is the easiest approach, if you can modify the class being encoded.  Add an\\n<code>encodeCBOR</code> method to your class, which takes a single parameter of the encoder\\ncurrently being used.  Your method should return <code>true</code> on success, else <code>false</code>.\\nYour method may call <code>encoder.push(buffer)</code> or <code>encoder.pushAny(any)</code> as needed.</p>\\n<p dir=\\\"auto\\\">For example:</p>\\n<div class=\\\"highlight highlight-source-js notranslate position-relative overflow-auto\\\" dir=\\\"auto\\\" data-snippet-clipboard-copy-content=\\\"class Foo {\\n  constructor() {\\n    this.one = 1\\n    this.two = 2\\n  }\\n\\n  encodeCBOR(encoder) {\\n    const tagged = new Tagged(64000, [this.one, this.two])\\n    return encoder.pushAny(tagged)\\n  }\\n}\\\"><pre><span class=\\\"pl-k\\\">class</span> <span class=\\\"pl-v\\\">Foo</span> <span class=\\\"pl-kos\\\">{</span>\\n  <span class=\\\"pl-en\\\">constructor</span><span class=\\\"pl-kos\\\">(</span><span class=\\\"pl-kos\\\">)</span> <span class=\\\"pl-kos\\\">{</span>\\n    <span class=\\\"pl-smi\\\">this</span><span class=\\\"pl-kos\\\">.</span><span class=\\\"pl-c1\\\">one</span> <span class=\\\"pl-c1\\\">=</span> <span class=\\\"pl-c1\\\">1</span>\\n    <span class=\\\"pl-smi\\\">this</span><span class=\\\"pl-kos\\\">.</span><span class=\\\"pl-c1\\\">two</span> <span class=\\\"pl-c1\\\">=</span> <span class=\\\"pl-c1\\\">2</span>\\n  <span class=\\\"pl-kos\\\">}</span>\\n\\n  <span class=\\\"pl-en\\\">encodeCBOR</span><span class=\\\"pl-kos\\\">(</span><span class=\\\"pl-s1\\\">encoder</span><span class=\\\"pl-kos\\\">)</span> <span class=\\\"pl-kos\\\">{</span>\\n    <span class=\\\"pl-k\\\">const</span> <span class=\\\"pl-s1\\\">tagged</span> <span class=\\\"pl-c1\\\">=</span> <span class=\\\"pl-k\\\">new</span> <span class=\\\"pl-v\\\">Tagged</span><span class=\\\"pl-kos\\\">(</span><span class=\\\"pl-c1\\\">64000</span><span class=\\\"pl-kos\\\">,</span> <span class=\\\"pl-kos\\\">[</span><span class=\\\"pl-smi\\\">this</span><span class=\\\"pl-kos\\\">.</span><span class=\\\"pl-c1\\\">one</span><span class=\\\"pl-kos\\\">,</span> <span class=\\\"pl-smi\\\">this</span><span class=\\\"pl-kos\\\">.</span><span class=\\\"pl-c1\\\">two</span><span class=\\\"pl-kos\\\">]</span><span class=\\\"pl-kos\\\">)</span>\\n    <span class=\\\"pl-k\\\">return</span> <span class=\\\"pl-s1\\\">encoder</span><span class=\\\"pl-kos\\\">.</span><span class=\\\"pl-en\\\">pushAny</span><span class=\\\"pl-kos\\\">(</span><span class=\\\"pl-s1\\\">tagged</span><span class=\\\"pl-kos\\\">)</span>\\n  <span class=\\\"pl-kos\\\">}</span>\\n<span class=\\\"pl-kos\\\">}</span></pre></div>\\n<p dir=\\\"auto\\\">You can also modify an existing type by monkey-patching an <code>encodeCBOR</code> function\\nonto its prototype, but this isn't recommended.</p>\\n<div class=\\\"markdown-heading\\\" dir=\\\"auto\\\"><h3 tabindex=\\\"-1\\\" class=\\\"heading-element\\\" dir=\\\"auto\\\"><code>addSemanticType</code></h3><a id=\\\"user-content-addsemantictype\\\" class=\\\"anchor-element\\\" aria-label=\\\"Permalink: addSemanticType\\\" href=\\\"#addsemantictype\\\"><svg class=\\\"octicon octicon-link\\\" viewBox=\\\"0 0 16 16\\\" version=\\\"1.1\\\" width=\\\"16\\\" height=\\\"16\\\" aria-hidden=\\\"true\\\"><path d=\\\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\\\"></path></svg></a></div>\\n<p dir=\\\"auto\\\">Sometimes, you want to support an existing type without modification to that\\ntype.  In this case, call <code>addSemanticType(type, encodeFunction)</code> on an existing\\n<code>Encoder</code> instance. The <code>encodeFunction</code> takes an encoder and an object to\\nencode, for example:</p>\\n<div class=\\\"highlight highlight-source-js notranslate position-relative overflow-auto\\\" dir=\\\"auto\\\" data-snippet-clipboard-copy-content=\\\"class Bar {\\n  constructor() {\\n    this.three = 3\\n  }\\n}\\nconst enc = new Encoder()\\nenc.addSemanticType(Bar, (encoder, b) =&gt; {\\n  encoder.pushAny(b.three)\\n})\\\"><pre><span class=\\\"pl-k\\\">class</span> <span class=\\\"pl-v\\\">Bar</span> <span class=\\\"pl-kos\\\">{</span>\\n  <span class=\\\"pl-en\\\">constructor</span><span class=\\\"pl-kos\\\">(</span><span class=\\\"pl-kos\\\">)</span> <span class=\\\"pl-kos\\\">{</span>\\n    <span class=\\\"pl-smi\\\">this</span><span class=\\\"pl-kos\\\">.</span><span class=\\\"pl-c1\\\">three</span> <span class=\\\"pl-c1\\\">=</span> <span class=\\\"pl-c1\\\">3</span>\\n  <span class=\\\"pl-kos\\\">}</span>\\n<span class=\\\"pl-kos\\\">}</span>\\n<span class=\\\"pl-k\\\">const</span> <span class=\\\"pl-s1\\\">enc</span> <span class=\\\"pl-c1\\\">=</span> <span class=\\\"pl-k\\\">new</span> <span class=\\\"pl-v\\\">Encoder</span><span class=\\\"pl-kos\\\">(</span><span class=\\\"pl-kos\\\">)</span>\\n<span class=\\\"pl-s1\\\">enc</span><span class=\\\"pl-kos\\\">.</span><span class=\\\"pl-en\\\">addSemanticType</span><span class=\\\"pl-kos\\\">(</span><span class=\\\"pl-v\\\">Bar</span><span class=\\\"pl-kos\\\">,</span> <span class=\\\"pl-kos\\\">(</span><span class=\\\"pl-s1\\\">encoder</span><span class=\\\"pl-kos\\\">,</span> <span class=\\\"pl-s1\\\">b</span><span class=\\\"pl-kos\\\">)</span> <span class=\\\"pl-c1\\\">=&gt;</span> <span class=\\\"pl-kos\\\">{</span>\\n  <span class=\\\"pl-s1\\\">encoder</span><span class=\\\"pl-kos\\\">.</span><span class=\\\"pl-en\\\">pushAny</span><span class=\\\"pl-kos\\\">(</span><span class=\\\"pl-s1\\\">b</span><span class=\\\"pl-kos\\\">.</span><span class=\\\"pl-c1\\\">three</span><span class=\\\"pl-kos\\\">)</span>\\n<span class=\\\"pl-kos\\\">}</span><span class=\\\"pl-kos\\\">)</span></pre></div>\\n<div class=\\\"markdown-heading\\\" dir=\\\"auto\\\"><h2 tabindex=\\\"-1\\\" class=\\\"heading-element\\\" dir=\\\"auto\\\">Adding new decoders</h2><a id=\\\"user-content-adding-new-decoders\\\" class=\\\"anchor-element\\\" aria-label=\\\"Permalink: Adding new decoders\\\" href=\\\"#adding-new-decoders\\\"><svg class=\\\"octicon octicon-link\\\" viewBox=\\\"0 0 16 16\\\" version=\\\"1.1\\\" width=\\\"16\\\" height=\\\"16\\\" aria-hidden=\\\"true\\\"><path d=\\\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\\\"></path></svg></a></div>\\n<p dir=\\\"auto\\\">Most of the time, you will want to add support for decoding a new tag type.  If\\nthe Decoder class encounters a tag it doesn't support, it will generate a <code>Tagged</code>\\ninstance that you can handle or ignore as needed.  To have a specific type\\ngenerated instead, pass a <code>tags</code> option to the <code>Decoder</code>'s constructor, consisting\\nof an object with tag number keys and function values.  The function will be\\npassed the decoded value associated with the tag, and should return the decoded\\nvalue.  For the <code>Foo</code> example above, this might look like:</p>\\n<div class=\\\"highlight highlight-source-js notranslate position-relative overflow-auto\\\" dir=\\\"auto\\\" data-snippet-clipboard-copy-content=\\\"const d = new Decoder({\\n  tags: {\\n    64000: val =&gt; {\\n      // Check val to make sure it's an Array as expected, etc.\\n      const foo = new Foo()\\n      ;[foo.one, foo.two] = val\\n      return foo\\n    },\\n  },\\n})\\\"><pre><span class=\\\"pl-k\\\">const</span> <span class=\\\"pl-s1\\\">d</span> <span class=\\\"pl-c1\\\">=</span> <span class=\\\"pl-k\\\">new</span> <span class=\\\"pl-v\\\">Decoder</span><span class=\\\"pl-kos\\\">(</span><span class=\\\"pl-kos\\\">{</span>\\n  <span class=\\\"pl-c1\\\">tags</span>: <span class=\\\"pl-kos\\\">{</span>\\n    <span class=\\\"pl-c1\\\">64000</span>: <span class=\\\"pl-s1\\\">val</span> <span class=\\\"pl-c1\\\">=&gt;</span> <span class=\\\"pl-kos\\\">{</span>\\n      <span class=\\\"pl-c\\\">// Check val to make sure it's an Array as expected, etc.</span>\\n      <span class=\\\"pl-k\\\">const</span> <span class=\\\"pl-s1\\\">foo</span> <span class=\\\"pl-c1\\\">=</span> <span class=\\\"pl-k\\\">new</span> <span class=\\\"pl-v\\\">Foo</span><span class=\\\"pl-kos\\\">(</span><span class=\\\"pl-kos\\\">)</span>\\n      <span class=\\\"pl-kos\\\">;</span><span class=\\\"pl-kos\\\">[</span><span class=\\\"pl-s1\\\">foo</span><span class=\\\"pl-kos\\\">.</span><span class=\\\"pl-c1\\\">one</span><span class=\\\"pl-kos\\\">,</span> <span class=\\\"pl-s1\\\">foo</span><span class=\\\"pl-kos\\\">.</span><span class=\\\"pl-c1\\\">two</span><span class=\\\"pl-kos\\\">]</span> <span class=\\\"pl-c1\\\">=</span> <span class=\\\"pl-s1\\\">val</span>\\n      <span class=\\\"pl-k\\\">return</span> <span class=\\\"pl-s1\\\">foo</span>\\n    <span class=\\\"pl-kos\\\">}</span><span class=\\\"pl-kos\\\">,</span>\\n  <span class=\\\"pl-kos\\\">}</span><span class=\\\"pl-kos\\\">,</span>\\n<span class=\\\"pl-kos\\\">}</span><span class=\\\"pl-kos\\\">)</span></pre></div>\\n<p dir=\\\"auto\\\">You can also replace the default decoders by passing in an appropriate tag\\nfunction.  For example:</p>\\n<div class=\\\"highlight highlight-source-js notranslate position-relative overflow-auto\\\" dir=\\\"auto\\\" data-snippet-clipboard-copy-content=\\\"cbor.decodeFirstSync(input, {\\n  tags: {\\n    // Replace the Tag 0 (RFC3339 Date/Time string) decoder.\\n    // See https://tc39.es/proposal-temporal/docs/ for the upcoming\\n    // Temporal built-in, which supports nanosecond time:\\n    0: x =&gt; Temporal.Instant.from(x),\\n  },\\n})\\\"><pre><span class=\\\"pl-s1\\\">cbor</span><span class=\\\"pl-kos\\\">.</span><span class=\\\"pl-en\\\">decodeFirstSync</span><span class=\\\"pl-kos\\\">(</span><span class=\\\"pl-s1\\\">input</span><span class=\\\"pl-kos\\\">,</span> <span class=\\\"pl-kos\\\">{</span>\\n  <span class=\\\"pl-c1\\\">tags</span>: <span class=\\\"pl-kos\\\">{</span>\\n    <span class=\\\"pl-c\\\">// Replace the Tag 0 (RFC3339 Date/Time string) decoder.</span>\\n    <span class=\\\"pl-c\\\">// See https://tc39.es/proposal-temporal/docs/ for the upcoming</span>\\n    <span class=\\\"pl-c\\\">// Temporal built-in, which supports nanosecond time:</span>\\n    <span class=\\\"pl-c1\\\">0</span>: <span class=\\\"pl-s1\\\">x</span> <span class=\\\"pl-c1\\\">=&gt;</span> <span class=\\\"pl-v\\\">Temporal</span><span class=\\\"pl-kos\\\">.</span><span class=\\\"pl-c1\\\">Instant</span><span class=\\\"pl-kos\\\">.</span><span class=\\\"pl-en\\\">from</span><span class=\\\"pl-kos\\\">(</span><span class=\\\"pl-s1\\\">x</span><span class=\\\"pl-kos\\\">)</span><span class=\\\"pl-kos\\\">,</span>\\n  <span class=\\\"pl-kos\\\">}</span><span class=\\\"pl-kos\\\">,</span>\\n<span class=\\\"pl-kos\\\">}</span><span class=\\\"pl-kos\\\">)</span></pre></div>\\n<div class=\\\"markdown-heading\\\" dir=\\\"auto\\\"><h2 tabindex=\\\"-1\\\" class=\\\"heading-element\\\" dir=\\\"auto\\\">Developers</h2><a id=\\\"user-content-developers\\\" class=\\\"anchor-element\\\" aria-label=\\\"Permalink: Developers\\\" href=\\\"#developers\\\"><svg class=\\\"octicon octicon-link\\\" viewBox=\\\"0 0 16 16\\\" version=\\\"1.1\\\" width=\\\"16\\\" height=\\\"16\\\" aria-hidden=\\\"true\\\"><path d=\\\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\\\"></path></svg></a></div>\\n<p dir=\\\"auto\\\">The tests for this package use a set of test vectors from RFC 8949 appendix A\\nby importing a machine readable version of them from\\n<a href=\\\"https://github.com/cbor/test-vectors\\\">https://github.com/cbor/test-vectors</a>. For these tests to work, you will need\\nto use the command <code>git submodule update --init</code> after cloning or pulling this\\ncode.   See <a href=\\\"https://gist.github.com/gitaarik/8735255#file-git_submodules-md\\\">https://gist.github.com/gitaarik/8735255#file-git_submodules-md</a>\\nfor more information.</p>\\n<p dir=\\\"auto\\\">Get a list of build steps with <code>npm run</code>.  I use <code>npm run dev</code>, which rebuilds,\\nruns tests, and refreshes a browser window with coverage metrics every time I\\nsave a <code>.js</code> file.  If you don't want to run the fuzz tests every time, set\\na <code>NO_GARBAGE</code> environment variable:</p>\\n<div class=\\\"snippet-clipboard-content notranslate position-relative overflow-auto\\\" data-snippet-clipboard-copy-content=\\\"env NO_GARBAGE=1 npm run dev\\\"><pre class=\\\"notranslate\\\"><code>env NO_GARBAGE=1 npm run dev\\n</code></pre></div>\\n<p dir=\\\"auto\\\"><a href=\\\"https://github.com/hildjj/node-cbor/actions?query=workflow%3ATests\\\"><img src=\\\"https://github.com/hildjj/node-cbor/workflows/Tests/badge.svg\\\" alt=\\\"Build Status\\\" style=\\\"max-width: 100%;\\\"></a>\\n<a href=\\\"https://coveralls.io/r/hildjj/node-cbor?branch=main\\\" rel=\\\"nofollow\\\"><img src=\\\"https://camo.githubusercontent.com/ba4a6d69bb8b4c8cba8bb74a21281316c87f33522ad58657aa3d09b1f8037e47/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f68696c646a6a2f6e6f64652d63626f722f62616467652e7376673f6272616e63683d6d61696e\\\" alt=\\\"Coverage Status\\\" data-canonical-src=\\\"https://coveralls.io/repos/hildjj/node-cbor/badge.svg?branch=main\\\" style=\\\"max-width: 100%;\\\"></a></p>\\n</article>\",\"errorMessage\":null,\"headerInfo\":{\"toc\":[{\"level\":1,\"text\":\"cbor\",\"anchor\":\"cbor\",\"htmlText\":\"cbor\"},{\"level\":2,\"text\":\"Supported Node.js versions\",\"anchor\":\"supported-nodejs-versions\",\"htmlText\":\"Supported Node.js versions\"},{\"level\":2,\"text\":\"Installation:\",\"anchor\":\"installation\",\"htmlText\":\"Installation:\"},{\"level\":2,\"text\":\"Documentation:\",\"anchor\":\"documentation\",\"htmlText\":\"Documentation:\"},{\"level\":2,\"text\":\"highWaterMark\",\"anchor\":\"highwatermark\",\"htmlText\":\"highWaterMark\"},{\"level\":2,\"text\":\"Supported types\",\"anchor\":\"supported-types\",\"htmlText\":\"Supported types\"},{\"level\":2,\"text\":\"Adding new Encoders\",\"anchor\":\"adding-new-encoders\",\"htmlText\":\"Adding new Encoders\"},{\"level\":3,\"text\":\"encodeCBOR method\",\"anchor\":\"encodecbor-method\",\"htmlText\":\"encodeCBOR method\"},{\"level\":3,\"text\":\"addSemanticType\",\"anchor\":\"addsemantictype\",\"htmlText\":\"addSemanticType\"},{\"level\":2,\"text\":\"Adding new decoders\",\"anchor\":\"adding-new-decoders\",\"htmlText\":\"Adding new decoders\"},{\"level\":2,\"text\":\"Developers\",\"anchor\":\"developers\",\"htmlText\":\"Developers\"}],\"siteNavLoginPath\":\"/login?return_to=https%3A%2F%2Fgithub.com%2Fhildjj%2Fnode-cbor%2Ftree%2Fmain%2Fpackages%2Fcbor\"}},\"totalCount\":13,\"showBranchInfobar\":false},\"fileTree\":{\"packages\":{\"items\":[{\"name\":\"browserify-demo\",\"path\":\"packages/browserify-demo\",\"contentType\":\"directory\"},{\"name\":\"cbor-bigdecimal\",\"path\":\"packages/cbor-bigdecimal\",\"contentType\":\"directory\"},{\"name\":\"cbor-cli\",\"path\":\"packages/cbor-cli\",\"contentType\":\"directory\"},{\"name\":\"cbor-rn-prereqs\",\"path\":\"packages/cbor-rn-prereqs\",\"contentType\":\"directory\"},{\"name\":\"cbor-web\",\"path\":\"packages/cbor-web\",\"contentType\":\"directory\"},{\"name\":\"cbor\",\"path\":\"packages/cbor\",\"contentType\":\"directory\"},{\"name\":\"parcel-demo\",\"path\":\"packages/parcel-demo\",\"contentType\":\"directory\"},{\"name\":\"plain-demo\",\"path\":\"packages/plain-demo\",\"contentType\":\"directory\"},{\"name\":\"puppeteer-demo\",\"path\":\"packages/puppeteer-demo\",\"contentType\":\"directory\"},{\"name\":\"webpack-demo\",\"path\":\"packages/webpack-demo\",\"contentType\":\"directory\"}],\"totalCount\":10},\"\":{\"items\":[{\"name\":\".github\",\"path\":\".github\",\"contentType\":\"directory\"},{\"name\":\"docs\",\"path\":\"docs\",\"contentType\":\"directory\"},{\"name\":\"packages\",\"path\":\"packages\",\"contentType\":\"directory\"},{\"name\":\"test-vectors\",\"path\":\"test-vectors\",\"contentType\":\"submodule\",\"submoduleUrl\":\"/hildjj/test-vectors/tree/cbab23c3fa16a0c9323e1bdc4783e6bbc3a2966d\",\"submoduleDisplayName\":\"test-vectors @ cbab23c\"},{\"name\":\"test\",\"path\":\"test\",\"contentType\":\"directory\"},{\"name\":\".editorconfig\",\"path\":\".editorconfig\",\"contentType\":\"file\"},{\"name\":\".eslintrc.js\",\"path\":\".eslintrc.js\",\"contentType\":\"file\"},{\"name\":\".gitattributes\",\"path\":\".gitattributes\",\"contentType\":\"file\"},{\"name\":\".gitignore\",\"path\":\".gitignore\",\"contentType\":\"file\"},{\"name\":\".gitmodules\",\"path\":\".gitmodules\",\"contentType\":\"file\"},{\"name\":\".jsdoc.conf\",\"path\":\".jsdoc.conf\",\"contentType\":\"file\"},{\"name\":\".ncurc.js\",\"path\":\".ncurc.js\",\"contentType\":\"file\"},{\"name\":\".npmrc\",\"path\":\".npmrc\",\"contentType\":\"file\"},{\"name\":\".yarnrc.yml\",\"path\":\".yarnrc.yml\",\"contentType\":\"file\"},{\"name\":\"LICENSE.md\",\"path\":\"LICENSE.md\",\"contentType\":\"file\"},{\"name\":\"README.md\",\"path\":\"README.md\",\"contentType\":\"file\"},{\"name\":\"ava.config.cjs\",\"path\":\"ava.config.cjs\",\"contentType\":\"file\"},{\"name\":\"lerna.json\",\"path\":\"lerna.json\",\"contentType\":\"file\"},{\"name\":\"package.json\",\"path\":\"package.json\",\"contentType\":\"file\"}],\"totalCount\":19}},\"fileTreeProcessingTime\":8.438619,\"foldersToFetch\":[],\"treeExpanded\":true,\"symbolsExpanded\":false,\"csrf_tokens\":{\"/hildjj/node-cbor/branches\":{\"post\":\"QxtmS8RQwtxgfUi9YFb7BDg1shSVpYlaYMe8jhCfqrHXv6chh4aaqLFKhL_4yTZk5iA5pO8V4zIWrxftAv4WjA\"},\"/hildjj/node-cbor/branches/fetch_and_merge/main\":{\"post\":\"bKstmew-olU_Dc7V3whZimaCoVxvBj-yqEhCvEXYDELSnP_WAqfHzxXu5LI2sxmNx4HNKYHUTmaDVrrZMqTRdQ\"},\"/hildjj/node-cbor/branches/fetch_and_merge/main?discard_changes=true\":{\"post\":\"ZIjVVYpeYMhFtX2JcokObC_6VF-2ucQtYdMrv_uJdR3avwcaZMcFUm9WV-6bMk5rjvk4KlhrtflKzdPajPWoKg\"}}},\"title\":\"node-cbor/packages/cbor at main \u00b7 hildjj/node-cbor\"}",
  "embeddings": []
}
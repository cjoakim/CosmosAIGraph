{
  "libtype": "npm",
  "libname": "yeoman-test",
  "url": "http://yeoman.io/authoring/testing.html",
  "html": "<!DOCTYPE html><html lang=en data-version=66e8df7><head><meta charset=utf-8><title>Testing Generators | Yeoman</title><meta name=viewport content=\"width=device-width\"><link rel=icon type=image/x-icon href=/static/favicon.b25e58c4b8.ico><meta name=google-site-verification content=fBQRJ6h7MV7_TJ7grbgq4P-d-07NRfDWPe4pqEEoH5w><link href=\"//fonts.googleapis.com/css?family=Roboto+Slab:400,700%7CRoboto:400,700,700italic,400italic\" rel=stylesheet><link rel=stylesheet href=/static/bundle-5020.fcd928b29d.css><link href=/blog/atom.xml type=application/atom+xml rel=alternate title=\"Yeoman Blog Atom Feed\"><link rel=stylesheet href=https://cdn.jsdelivr.net/npm/docsearch.js@2/dist/cdn/docsearch.min.css></head><body><header class=page-header><div class=container><div class=mobile-bar><h1 class=logo><a href=/ ><img src=/static/logo.2a54d87108.png alt=Yeoman></a></h1><button class=\"mobile-menu-toggle ir\">open</button></div><nav class=main-menu><ul class=main-nav><li><a href=/learning/ >Using Yeoman</a><ul> <li><a href='/learning/'>Getting started</a></li> <li><a href='/codelab/'>Tutorial (codelab)</a></li> <li><a href='/learning/resources'>Resources</a></li> <li><a href='/learning/deployment'>Deployment</a></li> <li><a href='/learning/faq'>FAQ</a></li> <li><a href='/learning/support'>Support</a></li></ul></li><li><a href=/generators/ >Discovering generators</a></li> <li><a href=/authoring/ class=active>Creating a generator</a><ul> <li><a href='/authoring/'>Getting started</a></li> <li><a href='/authoring/running-context'>Running Context</a></li> <li><a href='/authoring/user-interactions'>User Interactions</a></li> <li><a href='/authoring/composability'>Composability</a></li> <li><a href='/authoring/dependencies'>Managing Dependencies</a></li> <li><a href='/authoring/file-system'>Interacting with the file system</a></li> <li><a href='/authoring/storage'>Storing user configs</a></li> <li><a href='/authoring/testing'>Unit testing</a></li> <li><a href='/authoring/debugging'>Debugging Generators</a></li> <li><a href='/authoring/integrating-yeoman'>Integrating Yeoman in other tools</a></li> <li><a href=https://yeoman.github.io/generator/ >Full API documentation</a></li></ul></li><li><a href=/blog/ >Blog</a></li> <li><a href=/contributing/ >Contributing</a><ul> <li><a href='/contributing/'>Contributing</a></li> <li><a href='/contributing/opening-issues'>How to open an issue</a></li> <li><a href='/contributing/pull-request'>How to submit a PR</a></li> <li><a href='/contributing/style-guide'>Style Guide</a></li> <li><a href='/contributing/testing-guidelines'>Testing Guidelines</a></li> <li><a href='/contributing/ticketing'>Issue system overview</a></li></ul></li></ul></nav></div></header><div class=SiteWrapper><div id=content><h2 class=page-title><span class=container>Testing Generators</span></h2><div class=\"container clearfix has-sidebar\"><nav class=context-nav><input id=q placeholder=\"Search the doc\"><ul> <li><a href='/authoring/'>Getting started</a></li> <li><a href='/authoring/running-context'>Running Context</a></li> <li><a href='/authoring/user-interactions'>User Interactions</a></li> <li><a href='/authoring/composability'>Composability</a></li> <li><a href='/authoring/dependencies'>Managing Dependencies</a></li> <li><a href='/authoring/file-system'>Interacting with the file system</a></li> <li><a href='/authoring/storage'>Storing user configs</a></li> <li><a href='/authoring/testing'>Unit testing</a></li> <li><a href='/authoring/debugging'>Debugging Generators</a></li> <li><a href='/authoring/integrating-yeoman'>Integrating Yeoman in other tools</a></li> <li><a href=https://yeoman.github.io/generator/ >Full API documentation</a></li></ul></nav><article class=main><section class=content-chunk><p>Read on to learn more about the testing helpers Yeoman add to ease the pain of unit testing a generator.</p><p>The examples below assume you use <a href=http://mochajs.org/ >Mocha</a> in BDD mode. The global concept should apply easily to your unit testing framework of choice.</p><h2 id=organizing-your-tests>Organizing your tests</h2><p>It is important to keep your tests simple and easily editable.</p><p>Usually the best way to organize your tests is to separate each generator and sub-generator into its own <code class=highlighter-rouge>describe</code> block. Then, add a <code class=highlighter-rouge>describe</code> block for each option your generator accepts. And then, use an <code class=highlighter-rouge>it</code> block for each assertion (or related assertion).</p><p>In code, you should end up with a structure similar to this:</p><div class=\"language-js highlighter-rouge\"><div class=highlight><pre class=highlight><code><span class=nx>describe</span><span class=p>(</span><span class=s1>'backbone:app'</span><span class=p>,</span> <span class=kd>function</span> <span class=p>()</span> <span class=p>{</span>  <span class=nx>it</span><span class=p>(</span><span class=s1>'generates a project with require.js'</span><span class=p>,</span> <span class=kd>function</span> <span class=p>()</span> <span class=p>{</span>      <span class=c1>// assert the file exist</span>      <span class=c1>// assert the file uses AMD definition</span>  <span class=p>});</span>  <span class=nx>it</span><span class=p>(</span><span class=s1>'generates a project with webpack'</span><span class=p>);</span><span class=p>});</span></code></pre></div></div><h2 id=test-helpers>Test helpers</h2><p>Yeoman provide test helpers methods. They\u2019re contained inside the <code class=highlighter-rouge>yeoman-test</code> package.</p><div class=\"language-js highlighter-rouge\"><div class=highlight><pre class=highlight><code><span class=kd>var</span> <span class=nx>helpers</span> <span class=o>=</span> <span class=nx>require</span><span class=p>(</span><span class=s1>'yeoman-test'</span><span class=p>);</span></code></pre></div></div><p>You can check <a href=https://github.com/yeoman/yeoman-test>the full helpers API here</a>.</p><p>The most useful method when unit testing a generator is <code class=highlighter-rouge>helpers.run()</code>. This method will return a <a href=https://github.com/yeoman/yeoman-test/blob/master/lib/run-context.js>RunContext</a> instance on which you can call method to setup a directory, mock prompt, mock arguments, etc.</p><div class=\"language-js highlighter-rouge\"><div class=highlight><pre class=highlight><code><span class=kd>var</span> <span class=nx>path</span> <span class=o>=</span> <span class=nx>require</span><span class=p>(</span><span class=s1>'path'</span><span class=p>);</span><span class=nx>it</span><span class=p>(</span><span class=s1>'generate a project'</span><span class=p>,</span> <span class=kd>function</span> <span class=p>()</span> <span class=p>{</span>  <span class=c1>// The object returned acts like a promise, so return it to wait until the process is done</span>  <span class=k>return</span> <span class=nx>helpers</span><span class=p>.</span><span class=nx>run</span><span class=p>(</span><span class=nx>path</span><span class=p>.</span><span class=nx>join</span><span class=p>(</span><span class=nx>__dirname</span><span class=p>,</span> <span class=s1>'../app'</span><span class=p>))</span>    <span class=p>.</span><span class=nx>withOptions</span><span class=p>({</span> <span class=na>foo</span><span class=p>:</span> <span class=s1>'bar'</span> <span class=p>})</span>      <span class=c1>// Mock options passed in</span>    <span class=p>.</span><span class=nx>withArguments</span><span class=p>([</span><span class=s1>'name-x'</span><span class=p>])</span>        <span class=c1>// Mock the arguments</span>    <span class=p>.</span><span class=nx>withPrompts</span><span class=p>({</span> <span class=na>coffee</span><span class=p>:</span> <span class=kc>false</span> <span class=p>})</span>   <span class=c1>// Mock the prompt answers</span>    <span class=p>.</span><span class=nx>withLocalConfig</span><span class=p>({</span> <span class=na>lang</span><span class=p>:</span> <span class=s1>'en'</span> <span class=p>})</span> <span class=c1>// Mock the local config</span>    <span class=p>.</span><span class=nx>then</span><span class=p>(</span><span class=kd>function</span><span class=p>()</span> <span class=p>{</span>      <span class=c1>// assert something about the generator</span>    <span class=p>});</span><span class=p>})</span></code></pre></div></div><p>Sometimes you may want to construct a test scenario for the generator to run with existing contents in the target directory. In which case, you could invoke <code class=highlighter-rouge>inTmpDir()</code> with a callback function, like so:</p><div class=\"language-js highlighter-rouge\"><div class=highlight><pre class=highlight><code><span class=kd>var</span> <span class=nx>path</span> <span class=o>=</span> <span class=nx>require</span><span class=p>(</span><span class=s1>'path'</span><span class=p>);</span><span class=kd>var</span> <span class=nx>fs</span> <span class=o>=</span> <span class=nx>require</span><span class=p>(</span><span class=s1>'fs-extra'</span><span class=p>);</span><span class=nx>helpers</span><span class=p>.</span><span class=nx>run</span><span class=p>(</span><span class=nx>path</span><span class=p>.</span><span class=nx>join</span><span class=p>(</span><span class=nx>__dirname</span><span class=p>,</span> <span class=s1>'../app'</span><span class=p>))</span>  <span class=p>.</span><span class=nx>inTmpDir</span><span class=p>(</span><span class=kd>function</span> <span class=p>(</span><span class=nx>dir</span><span class=p>)</span> <span class=p>{</span>    <span class=c1>// `dir` is the path to the new temporary directory</span>    <span class=nx>fs</span><span class=p>.</span><span class=nx>copySync</span><span class=p>(</span><span class=nx>path</span><span class=p>.</span><span class=nx>join</span><span class=p>(</span><span class=nx>__dirname</span><span class=p>,</span> <span class=s1>'../templates/common'</span><span class=p>),</span> <span class=nx>dir</span><span class=p>)</span>  <span class=p>})</span>  <span class=p>.</span><span class=nx>withPrompts</span><span class=p>({</span> <span class=na>coffee</span><span class=p>:</span> <span class=kc>false</span> <span class=p>})</span>  <span class=p>.</span><span class=nx>then</span><span class=p>(</span><span class=kd>function</span> <span class=p>()</span> <span class=p>{</span>    <span class=nx>assert</span><span class=p>.</span><span class=nx>file</span><span class=p>(</span><span class=s1>'common/file.txt'</span><span class=p>);</span>  <span class=p>});</span></code></pre></div></div><p>You can also perform asynchronous task in your callback:</p><div class=\"language-js highlighter-rouge\"><div class=highlight><pre class=highlight><code><span class=kd>var</span> <span class=nx>path</span> <span class=o>=</span> <span class=nx>require</span><span class=p>(</span><span class=s1>'path'</span><span class=p>);</span><span class=kd>var</span> <span class=nx>fs</span> <span class=o>=</span> <span class=nx>require</span><span class=p>(</span><span class=s1>'fs-extra'</span><span class=p>);</span><span class=nx>helpers</span><span class=p>.</span><span class=nx>run</span><span class=p>(</span><span class=nx>path</span><span class=p>.</span><span class=nx>join</span><span class=p>(</span><span class=nx>__dirname</span><span class=p>,</span> <span class=s1>'../app'</span><span class=p>))</span>  <span class=p>.</span><span class=nx>inTmpDir</span><span class=p>(</span><span class=kd>function</span> <span class=p>(</span><span class=nx>dir</span><span class=p>)</span> <span class=p>{</span>    <span class=kd>var</span> <span class=nx>done</span> <span class=o>=</span> <span class=k>this</span><span class=p>.</span><span class=k>async</span><span class=p>();</span> <span class=c1>// `this` is the RunContext object.</span>    <span class=nx>fs</span><span class=p>.</span><span class=nx>copy</span><span class=p>(</span><span class=nx>path</span><span class=p>.</span><span class=nx>join</span><span class=p>(</span><span class=nx>__dirname</span><span class=p>,</span> <span class=s1>'../templates/common'</span><span class=p>),</span> <span class=nx>dir</span><span class=p>,</span> <span class=nx>done</span><span class=p>);</span>  <span class=p>})</span>  <span class=p>.</span><span class=nx>withPrompts</span><span class=p>({</span> <span class=na>coffee</span><span class=p>:</span> <span class=kc>false</span> <span class=p>});</span></code></pre></div></div><p>The run Promise will resolve with the directory that the generator was run in. This can be useful if you want to use a temporary directory that the generator was run in:</p><div class=\"language-js highlighter-rouge\"><div class=highlight><pre class=highlight><code><span class=nx>helpers</span><span class=p>.</span><span class=nx>run</span><span class=p>(</span><span class=nx>path</span><span class=p>.</span><span class=nx>join</span><span class=p>(</span><span class=nx>__dirname</span><span class=p>,</span> <span class=s1>'../app'</span><span class=p>))</span>  <span class=p>.</span><span class=nx>inTmpDir</span><span class=p>(</span><span class=kd>function</span> <span class=p>(</span><span class=nx>dir</span><span class=p>)</span> <span class=p>{</span>    <span class=kd>var</span> <span class=nx>done</span> <span class=o>=</span> <span class=k>this</span><span class=p>.</span><span class=k>async</span><span class=p>();</span> <span class=c1>// `this` is the RunContext object.</span>    <span class=nx>fs</span><span class=p>.</span><span class=nx>copy</span><span class=p>(</span><span class=nx>path</span><span class=p>.</span><span class=nx>join</span><span class=p>(</span><span class=nx>__dirname</span><span class=p>,</span> <span class=s1>'../templates/common'</span><span class=p>),</span> <span class=nx>dir</span><span class=p>,</span> <span class=nx>done</span><span class=p>);</span>  <span class=p>})</span>  <span class=p>.</span><span class=nx>withPrompts</span><span class=p>({</span> <span class=na>coffee</span><span class=p>:</span> <span class=kc>false</span> <span class=p>})</span>  <span class=p>.</span><span class=nx>then</span><span class=p>(</span><span class=kd>function</span> <span class=p>(</span><span class=nx>dir</span><span class=p>)</span> <span class=p>{</span>    <span class=c1>// assert something about the stuff in `dir`</span>  <span class=p>});</span></code></pre></div></div><p>If your generator calls <code class=highlighter-rouge>composeWith()</code>, you may want to mock those dependent generators. Using <code class=highlighter-rouge>#withGenerators()</code>, pass in array of arrays that use <code class=highlighter-rouge>#createDummyGenerator()</code> as the first item and a namespace for the mocked generator as a second item:</p><div class=\"language-js highlighter-rouge\"><div class=highlight><pre class=highlight><code><span class=kd>var</span> <span class=nx>deps</span> <span class=o>=</span> <span class=p>[</span>  <span class=p>[</span><span class=nx>helpers</span><span class=p>.</span><span class=nx>createDummyGenerator</span><span class=p>(),</span> <span class=s1>'karma:app'</span><span class=p>]</span><span class=p>];</span><span class=k>return</span> <span class=nx>helpers</span><span class=p>.</span><span class=nx>run</span><span class=p>(</span><span class=nx>path</span><span class=p>.</span><span class=nx>join</span><span class=p>(</span><span class=nx>__dirname</span><span class=p>,</span> <span class=s1>'../app'</span><span class=p>)).</span><span class=nx>withGenerators</span><span class=p>(</span><span class=nx>deps</span><span class=p>);</span></code></pre></div></div><p>If you hate promises, you can use the <code class=highlighter-rouge>'ready'</code>, <code class=highlighter-rouge>'error'</code>, and <code class=highlighter-rouge>'end'</code> Events emitted:</p><div class=\"language-js highlighter-rouge\"><div class=highlight><pre class=highlight><code><span class=nx>helpers</span><span class=p>.</span><span class=nx>run</span><span class=p>(</span><span class=nx>path</span><span class=p>.</span><span class=nx>join</span><span class=p>(</span><span class=nx>__dirname</span><span class=p>,</span> <span class=s1>'../app'</span><span class=p>))</span>  <span class=p>.</span><span class=nx>on</span><span class=p>(</span><span class=s1>'error'</span><span class=p>,</span> <span class=kd>function</span> <span class=p>(</span><span class=nx>error</span><span class=p>)</span> <span class=p>{</span>    <span class=nx>console</span><span class=p>.</span><span class=nx>log</span><span class=p>(</span><span class=s1>'Oh Noes!'</span><span class=p>,</span> <span class=nx>error</span><span class=p>);</span>  <span class=p>})</span>  <span class=p>.</span><span class=nx>on</span><span class=p>(</span><span class=s1>'ready'</span><span class=p>,</span> <span class=kd>function</span> <span class=p>(</span><span class=nx>generator</span><span class=p>)</span> <span class=p>{</span>    <span class=c1>// This is called right before `generator.run()` is called</span>  <span class=p>})</span>  <span class=p>.</span><span class=nx>on</span><span class=p>(</span><span class=s1>'end'</span><span class=p>,</span> <span class=nx>done</span><span class=p>);</span></code></pre></div></div><p>You can also run a generator importing it as a module. This is usefull if the source code of your generator is transpiled.</p><p>You will need to provide the following settings to <code class=highlighter-rouge>run</code>:</p><ul><li><code class=highlighter-rouge>resolved</code>: Path to the generator, e.g. <code class=highlighter-rouge>../src/app/index.js</code></li> <li><code class=highlighter-rouge>namespace</code>: Namespace of the generator, e.g. <code class=highlighter-rouge>mygenerator:app</code></li></ul><div class=\"language-js highlighter-rouge\"><div class=highlight><pre class=highlight><code><span class=kd>var</span> <span class=nx>MyGenerator</span> <span class=o>=</span> <span class=nx>require</span><span class=p>(</span><span class=s1>'../src/app'</span><span class=p>);</span><span class=nx>helpers</span><span class=p>.</span><span class=nx>run</span><span class=p>(</span><span class=nx>MyGenerator</span><span class=p>,</span> <span class=p>{</span>   <span class=na>resolved</span><span class=p>:</span> <span class=nx>require</span><span class=p>.</span><span class=nx>resolve</span><span class=p>(</span><span class=nx>__dirname</span><span class=p>,</span> <span class=s1>'../src/app/index.js'</span><span class=p>),</span>  <span class=na>namespace</span><span class=p>:</span> <span class=s1>'mygenerator:app'</span><span class=p>});</span></code></pre></div></div><h2 id=assertions-helpers>Assertions helpers</h2><p>Yeoman extends the <a href=https://nodejs.org/api/assert.html>native assert module</a> with generator related assertions helpers. You can see the full list of assertions helpers on the <a href=https://github.com/yeoman/yeoman-assert><code class=highlighter-rouge>yeoman-assert</code> repository</a>.</p><p>Require the assertion helpers:</p><div class=\"language-js highlighter-rouge\"><div class=highlight><pre class=highlight><code><span class=kd>var</span> <span class=nx>assert</span> <span class=o>=</span> <span class=nx>require</span><span class=p>(</span><span class=s1>'yeoman-assert'</span><span class=p>);</span></code></pre></div></div><h3 id=assert-files-exists>Assert files exists</h3><div class=\"language-js highlighter-rouge\"><div class=highlight><pre class=highlight><code><span class=nx>assert</span><span class=p>.</span><span class=nx>file</span><span class=p>([</span><span class=s1>'Gruntfile.js'</span><span class=p>,</span> <span class=s1>'app/router.js'</span><span class=p>,</span> <span class=s1>'app/views/main.js'</span><span class=p>]);</span></code></pre></div></div><p><code class=highlighter-rouge>assert.noFile()</code> assert the contrary.</p><h3 id=assert-a-file-content>Assert a file content</h3><div class=\"language-js highlighter-rouge\"><div class=highlight><pre class=highlight><code><span class=nx>assert</span><span class=p>.</span><span class=nx>fileContent</span><span class=p>(</span><span class=s1>'controllers/user.js'</span><span class=p>,</span> <span class=sr>/App</span><span class=se>\\.</span><span class=sr>UserController = Ember</span><span class=se>\\.</span><span class=sr>ObjectController</span><span class=se>\\.</span><span class=sr>extend/</span><span class=p>);</span></code></pre></div></div><p><code class=highlighter-rouge>assert.noFileContent()</code> assert the contrary.</p></section></article></div></div><footer class=SiteFooter><div class=SiteFooter-donation><div class=Donation><div class=Donation-sticker-clipping><img src=/static/yeoman-character-sticker.51cef7e007.png class=Donation-sticker width=190 height=294 alt=Stickers!></div><div class=Donation-text><a href=https://yeoman.threadless.com/ >Show your love for <strong>Yeoman</strong>, <br> wear our <strong>merch</strong>!</a></div></div></div><ul class=SiteFooter-links><li><a href=https://twitter.com/yeoman class=icon><img src=/static/social-twitter.c359540fc8.svg class=SiteFooter-icon alt=Twitter></a></li> <li><a href=https://github.com/yeoman/yeoman class=icon><img src=/static/social-github.89959ef390.svg class=SiteFooter-icon alt=GitHub></a></li> <li><a href=/blog/atom.xml class=icon><img src=/static/social-feed.ad4bea7819.svg class=SiteFooter-icon alt=Feed></a></li> <li class=mobile-ln></li> <li><a href=https://yeoman.github.io/generator/ class=\"SiteFooter-button SiteFooter-button--light\">API</a></li> <li><a href=https://github.com/yeoman/yeoman.github.io/blob/source/app/authoring/testing.md class=SiteFooter-button title=\"Edit this page on GitHub to help improve the site\">Improve this page</a></li></ul></footer><script src=//ajax.googleapis.com/ajax/libs/jquery/2.1.0/jquery.min.js></script><script src=/static/bundle-5079.e1452d0305.js async></script><script>!function(a,b,c){'undefined'!=typeof c.module&&c.module.exports?c.module.exports=b():'undefined'!=typeof c.define&&'function'==c.define&&c.define.amd?define(a,b):c[a]=b()}('$script',function(){function a(a,b){for(var c=0,d=a.length;c<d;++c)if(!b(a[c]))return m;return 1}function b(b,c){a(b,function(a){return!c(a)})}function c(f,g,m){function o(a){return a.call?a():i[a]}function p(){if(!--t){i[s]=1,r&&r();for(var c in k)a(c.split('|'),o)&&!b(k[c],o)&&(k[c]=[])}}f=f[n]?f:[f];var q=g&&g.call,r=q?g:m,s=q?f.join(''):g,t=f.length;return setTimeout(function(){b(f,function(a){return l[a]?(s&&(j[s]=1),2==l[a]&&p()):(l[a]=1,s&&(j[s]=1),d(!h.test(a)&&e?e+a+'.js':a,p),void 0)})},0),c}function d(a,b){var c=f.createElement('script'),d=m;c.onload=c.onerror=c[r]=function(){c[p]&&!/^c|loade/.test(c[p])||d||(c.onload=c[r]=null,d=1,l[a]=2,b())},c.async=1,c.src=a,g.insertBefore(c,g.firstChild)}var e,f=document,g=f.getElementsByTagName('head')[0],h=/^https?:\\/\\//,i={},j={},k={},l={},m=!1,n='push',o='DOMContentLoaded',p='readyState',q='addEventListener',r='onreadystatechange';return!f[p]&&f[q]&&(f[q](o,function s(){f.removeEventListener(o,s,m),f[p]='complete'},m),f[p]='loading'),c.get=d,c.order=function(a,b,d){!function e(f){f=a.shift(),a.length?c(f,e):c(f,b,d)}()},c.path=function(a){e=a},c.ready=function(d,e,f){d=d[n]?d:[d];var g=[];return!b(d,function(a){i[a]||g[n](a)})&&a(d,function(a){return i[a]})?e():!function(a){k[a]=k[a]||[],k[a][n](e),f&&f(g)}(d.join('|')),c},c},this);var _gaq=[['_setAccount','UA-32956520-1'],['_setDomainName','.yeoman.io'],['_trackPageview'],['_trackPageLoadTime']];$script('https://www.google-analytics.com/ga.js'),$script('https://apis.google.com/js/plusone.js'),$script('//platform.twitter.com/widgets.js')//# sourceMappingURL=../static/-5166.f5cbe7e97e.map </script></div><script src=https://cdn.jsdelivr.net/npm/docsearch.js@2/dist/cdn/docsearch.min.js></script><script>docsearch({apiKey:'9df58ffd00f1dfb0eb2c5c6eaff8d971',indexName:'yeoman',inputSelector:'#q'})//# sourceMappingURL=../static/-5167.08d99b6657.map </script></body></html>",
  "embeddings": []
}
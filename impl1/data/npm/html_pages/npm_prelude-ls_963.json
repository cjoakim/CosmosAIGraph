{
  "libtype": "npm",
  "libname": "prelude-ls",
  "url": "http://preludels.com",
  "html": "<!doctype html><html><head>  <meta charset='utf-8'>  <title>prelude.ls - a functionally oriented utility library in LiveScript</title>  <meta name='description' content=\"prelude.ls is a functionally oriented utility library - powerful and flexible, almost all of functions are curried. It is written in, and is the recommended base library for, LiveScript.\">  <link rel=\"canonical\" href=\"http://www.preludels.com/\">  <link rel=\"icon\" type=\"image/png\" href=\"images/icon.png\">  <link href=\"google-code-prettify/prettify.css\" rel=\"stylesheet\">  <link href=\"normalize.css\" rel=\"stylesheet\">  <link href=\"styles.css\" rel=\"stylesheet\"></head><body><div id=\"site-container\">  <div id=\"sidebar\">    <h1><a href=\"#\">prelude.ls</a><i></i></h1>    <nav>      <ul>        <li><a href=\"#overview\">Overview</a></li>        <li><a href=\"#installation\">Installation</a></li>      </ul>      <div class=\"mini-action-buttons\">        <div>          <iframe src=\"http://ghbtns.com/github-btn.html?user=gkz&repo=prelude-ls&type=watch&size=small&count=true\" allowtransparency=\"true\" frameborder=\"0\" scrolling=\"0\" width=\"100\" height=\"25\"></iframe>        </div>        <div>          <a href=\"https://twitter.com/share\" class=\"twitter-share-button\" data-url=\"http://preludels.com\" data-text=\"prelude.ls - a functional programming library for JavaScript - the LiveScript standard library\" data-related=\"gkzahariev:The Creator\" data-via=\"gkzahariev\">Tweet</a>        </div>      </div>      <hr>      <ul>        <li><a href=\"#id\">id</a></li>        <li><a href=\"#is-type\">is-type</a></li>        <li><a href=\"#replicate\">replicate</a></li>      </ul>      <a class=\"module-heading\" href=\"#list\">List</a>      <ul>        <li><a href=\"#each\">each</a></li>        <li><a href=\"#map\">map</a></li>        <li><a href=\"#compact\">compact</a></li>        <li><a href=\"#filter\">filter</a></li>        <li><a href=\"#reject\">reject</a></li>        <li><a href=\"#partition\">partition</a></li>        <li><a href=\"#find\">find</a></li>        <li><a href=\"#head\">head</a></li>        <li><a href=\"#head\">first</a></li>        <li><a href=\"#tail\">tail</a></li>        <li><a href=\"#last\">last</a></li>        <li><a href=\"#initial\">initial</a></li>        <li><a href=\"#empty\">empty</a></li>        <li><a href=\"#reverse\">reverse</a></li>        <li><a href=\"#unique\">unique</a></li>        <li><a href=\"#unique-by\">unique-by</a></li>        <li><a href=\"#fold\">fold</a></li>        <li><a href=\"#foldl\">foldl</a></li>        <li><a href=\"#fold1\">fold1</a></li>        <li><a href=\"#foldl1\">foldl1</a></li>        <li><a href=\"#foldr\">foldr</a></li>        <li><a href=\"#foldr1\">foldr1</a></li>        <li><a href=\"#unfoldr\">unfoldr</a></li>        <li><a href=\"#concat\">concat</a></li>        <li><a href=\"#concat-map\">concat-map</a></li>        <li><a href=\"#flatten\">flatten</a></li>        <li><a href=\"#difference\">difference</a></li>        <li><a href=\"#intersection\">intersection</a></li>        <li><a href=\"#union\">union</a></li>        <li><a href=\"#count-by\">count-by</a></li>        <li><a href=\"#group-by\">group-by</a></li>        <li><a href=\"#and-list\">and-list</a></li>        <li><a href=\"#or-list\">or-list</a></li>        <li><a href=\"#any\">any</a></li>        <li><a href=\"#all\">all</a></li>        <li><a href=\"#sort\">sort</a></li>        <li><a href=\"#sort-with\">sort-with</a></li>        <li><a href=\"#sort-by\">sort-by</a></li>        <li><a href=\"#sum\">sum</a></li>        <li><a href=\"#product\">product</a></li>        <li><a href=\"#mean\">mean</a></li>        <li><a href=\"#mean\">average</a></li>        <li><a href=\"#maximum\">maximum</a></li>        <li><a href=\"#minimum\">minimum</a></li>        <li><a href=\"#maximum-by\">maximum-by</a></li>        <li><a href=\"#minimum-by\">minimum-by</a></li>        <li><a href=\"#scan\">scan</a></li>        <li><a href=\"#scan\">scanl</a></li>        <li><a href=\"#scan1\">scan1</a></li>        <li><a href=\"#scan1\">scanl1</a></li>        <li><a href=\"#scanr\">scanr</a></li>        <li><a href=\"#scanr1\">scanr1</a></li>        <li><a href=\"#slice\">slice</a></li>        <li><a href=\"#take\">take</a></li>        <li><a href=\"#drop\">drop</a></li>        <li><a href=\"#split-at\">split-at</a></li>        <li><a href=\"#take-while\">take-while</a></li>        <li><a href=\"#drop-while\">drop-while</a></li>        <li><a href=\"#span\">span</a></li>        <li><a href=\"#break-list\">break-list</a></li>        <li><a href=\"#zip\">zip</a></li>        <li><a href=\"#zip-with\">zip-with</a></li>        <li><a href=\"#zip-all\">zip-all</a></li>        <li><a href=\"#zip-all-with\">zip-all-with</a></li>        <li><a href=\"#at\">at</a></li>        <li><a href=\"#elem-index\">elem-index</a></li>        <li><a href=\"#elem-indices\">elem-indices</a></li>        <li><a href=\"#find-index\">find-index</a></li>        <li><a href=\"#find-indices\">find-indices</a></li>      </ul>      <a class=\"module-heading\" href=\"#obj\">Obj</a>      <ul>        <li><a href=\"#keys\">keys</a></li>        <li><a href=\"#values\">values</a></li>        <li><a href=\"#pairs-to-obj\">pairs-to-obj</a></li>        <li><a href=\"#obj-to-pairs\">obj-to-pairs</a></li>        <li><a href=\"#lists-to-obj\">lists-to-obj</a></li>        <li><a href=\"#obj-to-lists\">obj-to-lists</a></li>        <li><a href=\"#obj-empty\">empty</a></li>        <li><a href=\"#obj-each\">each</a></li>        <li><a href=\"#obj-map\">map</a></li>        <li><a href=\"#obj-filter\">filter</a></li>        <li><a href=\"#obj-compact\">compact</a></li>        <li><a href=\"#obj-reject\">reject</a></li>        <li><a href=\"#obj-partition\">partition</a></li>        <li><a href=\"#obj-find\">find</a></li>      </ul>      <a class=\"module-heading\" href=\"#str\">Str</a>      <ul>        <li><a href=\"#split\">split</a></li>        <li><a href=\"#join\">join</a></li>        <li><a href=\"#lines\">lines</a></li>        <li><a href=\"#unlines\">unlines</a></li>        <li><a href=\"#words\">words</a></li>        <li><a href=\"#unwords\">unwords</a></li>        <li><a href=\"#chars\">chars</a></li>        <li><a href=\"#unchars\">unchars</a></li>        <li><a href=\"#repeat\">repeat</a></li>        <li><a href=\"#capitalize\">capitalize</a></li>        <li><a href=\"#camelize\">camelize</a></li>        <li><a href=\"#dasherize\">dasherize</a></li>        <li><a href=\"#str-empty\">empty</a></li>        <li><a href=\"#str-reverse\">reverse</a></li>        <li><a href=\"#str-slice\">slice</a></li>        <li><a href=\"#str-take\">take</a></li>        <li><a href=\"#str-drop\">drop</a></li>        <li><a href=\"#str-split-at\">split-at</a></li>        <li><a href=\"#str-take-while\">take-while</a></li>        <li><a href=\"#str-drop-while\">drop-while</a></li>        <li><a href=\"#str-span\">span</a></li>        <li><a href=\"#str-break-str\">break-str</a></li>      </ul>      <a class=\"module-heading\" href=\"#func\">Func</a>      <ul>        <li><a href=\"#apply\">apply</a></li>        <li><a href=\"#curry\">curry</a></li>        <li><a href=\"#flip\">flip</a></li>        <li><a href=\"#fix\">fix</a></li>        <li><a href=\"#over\">over</a></li>        <li><a href=\"#memoize\">memoize</a></li>      </ul>      <a class=\"module-heading\" href=\"#num\">Num</a>      <ul>        <li><a href=\"#max\">max</a></li>        <li><a href=\"#min\">min</a></li>        <li><a href=\"#negate\">negate</a></li>        <li><a href=\"#abs\">abs</a></li>        <li><a href=\"#signum\">signum</a></li>        <li><a href=\"#quot\">quot</a></li>        <li><a href=\"#rem\">rem</a></li>        <li><a href=\"#div\">div</a></li>        <li><a href=\"#mod\">mod</a></li>        <li><a href=\"#recip\">recip</a></li>        <li><a href=\"#pi\">pi</a></li>        <li><a href=\"#tau\">tau</a></li>        <li><a href=\"#exp\">exp</a></li>        <li><a href=\"#sqrt\">sqrt</a></li>        <li><a href=\"#ln\">ln</a></li>        <li><a href=\"#pow\">pow</a></li>        <li><a href=\"#sin\">sin</a></li>        <li><a href=\"#cos\">cos</a></li>        <li><a href=\"#tan\">tan</a></li>        <li><a href=\"#asin\">asin</a></li>        <li><a href=\"#acos\">acos</a></li>        <li><a href=\"#atan\">atan</a></li>        <li><a href=\"#atan2\">atan2</a></li>        <li><a href=\"#truncate\">truncate</a></li>        <li><a href=\"#round\">round</a></li>        <li><a href=\"#ceiling\">ceiling</a></li>        <li><a href=\"#floor\">floor</a></li>        <li><a href=\"#is-it-NaN\">is-it-NaN</a></li>        <li><a href=\"#even\">even</a></li>        <li><a href=\"#odd\">odd</a></li>        <li><a href=\"#gcd\">gcd</a></li>        <li><a href=\"#lcm\">lcm</a></li>      </ul>    </nav>  </div>  <div id=\"content\">    <div id=\"overview\" class=\"section\">      <ul class=\"intro\">        <li><strong>prelude.ls</strong> is a functionally oriented utility library.        <li>It is powerful and flexible.        <li>Almost all of its functions are <a href=\"#curried-functions\">curried</a>.        <li>It is written in, and is the recommended base library for, <a href=\"http://livescript.net/\">LiveScript</a>.      </ul><pre class=\"prettyprint example lang-ls\">[1 to 5] |> map (^2) |> filter even |> fold (+), 0 #=> 20</pre>      <div class=\"major-actions\">        <h3>1.2.1</h3>        <a href=\"prelude-browser-min.js\">prelude-browser-min.js</a>        <a class=\"primary\" href=\"https://github.com/gkz/prelude-ls\">View project on GitHub</a>        <iframe src=\"http://ghbtns.com/github-btn.html?user=gkz&repo=prelude-ls&type=watch&size=large&count=true\" allowtransparency=\"true\" frameborder=\"0\" scrolling=\"0\" width=\"140\" height=\"40\"></iframe>        <a href=\"https://twitter.com/share\" class=\"twitter-share-button\" data-url=\"http://preludels.com\" data-text=\"prelude.ls - functionally oriented utility library in LiveScript\" data-size=\"large\" data-related=\"gkzahariev:The Creator\" data-via=\"gkzahariev\">Tweet</a>      </div>      <p>Install via <a href=\"http://npmjs.org\">npm</a>: <strong><code>npm install prelude-ls</code></strong>. <a href=\"https://github.com/gkz/prelude-ls/blob/master/LICENSE\">MIT License</a>. <a href=\"https://github.com/gkz/prelude-ls/blob/master/CHANGELOG.md\">Changelog</a>.      <p><a href=\"https://twitter.com/gkzahariev\" class=\"twitter-follow-button\" data-show-count=\"false\" data-size=\"large\">Follow @gkzahariev</a>      for updates on prelude.ls releases.      <p>You can report bugs and discuss features on the <a href=\"https://github.com/gkz/prelude-ls/issues\">issue page</a>.      <h3 id=\"curried-functions\">Curried functions</h3>      <p>Calling with less than the full number of arguments returns a partially applied function.<pre class=\"prettyprint example lang-ls\">fold (+), 0, [1 2 3] #=> 6sum = fold (+), 0sum [1 2 3] #=> 6sum [4 5 6] #=> 15</pre>    </div>    <div id=\"installation\" class=\"section\">      <h2>Installation</h2>      <p>Install via <a href=\"http://npmjs.org\">npm</a>: <code>npm install prelude-ls</code>.      <p>For use in the browser, just include the <code>prelude-browser-min.js</code> file, and then use <code>prelude = require 'prelude-ls'</code>      <p>If you wish, you may use an underscore to refer to the library, <code>_ = require 'prelude-ls'</code>, and then <code>_.map f, xs</code>      <p>However, the preferred way to use the library is to grab what you need from it using object deconstruction: <code>{map, filter, lines} = require 'prelude-ls'</code>, and then simply <code>map f, xs</code>    </div>    <hr>    <div class=\"section\">      <h2>Function Reference</h2>      <p>The prelude object has several sub-modules, <code>List</code>, <code>Obj</code>, <code>Str</code>, <code>Func</code>, and <code>Num</code>.</p>      <p>Almost all the functions in these modules are added to the main object which you recieve when you require prelude. However, in some cases, especially where the names conflict, you will have to use the functions through the module, eg. <code>Obj.map</code> conflicts with <code>List.map</code>, so <code>map</code> refers to <code>List.map</code> and you must use <code>Obj.map</code> to use the version which operates on objects.</p>      <div id=\"id\" class=\"func\">        <a href=\"#id\" class=\"func-name\">id</a>        <div class=\"func-type\">a &rarr; a</div>        <p>A function which does nothing: it simply returns its single argument. Useful as a placeholder.<pre class=\"prettyprint example lang-ls\">id 5  #=> 5id {} #=> {}</pre>      </div>      <div id=\"is-type\" class=\"func\">        <a href=\"#is-type\" class=\"func-name\">is-type</a>        <div class=\"func-type\">String &rarr; a &rarr; Boolean</div>        <p>Takes a string (type name) and a value, and returns if the value is of that type. Uses LiveScript's <code>typeof!</code> operator.<pre class=\"prettyprint example lang-ls\">is-type 'Undefined' void #=> trueis-type 'Boolean' true   #=> trueis-type 'Number' 1       #=> trueis-type 'String' 'hi'    #=> trueis-type 'Object' {}      #=> trueis-type 'Array' []       #=> trueis-type 'HTMLBodyElement' (document.query-selector 'body') #=> true</pre>      </div>      <div id=\"replicate\" class=\"func\">        <a href=\"#replicate\" class=\"func-name\">replicate</a>        <div class=\"func-type\">Number &rarr; a &rarr; [a]</div>        <p>Takes its second argument, and replicates it n times to create a new list.<pre class=\"prettyprint example lang-ls\">replicate 4 3   #=> [3, 3, 3, 3]replicate 4 'a' #=> ['a', 'a', 'a', 'a']replicate 0 'a' #=> []</pre>      </div>      <a class=\"module-heading\" id=\"list\" href=\"#list\">List</a>      <div id=\"each\" class=\"func\">        <a href=\"#each\" class=\"func-name\">each</a>        <div class=\"func-type\">(a &rarr; Undefined) &rarr; [a] &rarr; [a]</div>        <p>Applies a function to each item in the list and returns the original list. Used for side effects.<pre class=\"prettyprint example lang-ls\">each (.push \\boom), [['a'] ['b'] ['c']]#=> [['a', 'boom'], ['b', 'boom'], ['c', 'boom']]</pre>      </div>      <div id=\"map\" class=\"func\">        <a href=\"#map\" class=\"func-name\">map</a>        <div class=\"func-type\">(a &rarr; b) &rarr; [a] &rarr; [b]</div>        <p>Applies a function to each item in the list, and produces a new list with the results. The length of the result is the same length as the input.<pre class=\"prettyprint example lang-ls\">map (* 2), [1 to 5]                 #=> [2, 4, 6, 8, 10]map (.to-upper-case!), ['ha', 'ma'] #=> ['HA', 'MA']map (.num), [{num: 3}, {num: 1}]    #=> [3, 1]</pre>      </div>      <div id=\"compact\" class=\"func\">        <a href=\"#compact\" class=\"func-name\">compact</a>        <div class=\"func-type\">[a] &rarr; [a]</div>        <p>Returns a new list which contains only the truthy values of the inputted list.<pre class=\"prettyprint example lang-ls\">compact [0 1 false true '' 'ha'] #=> [1, true, 'ha']</pre>      </div>      <div id=\"filter\" class=\"func\">        <a href=\"#filter\" class=\"func-name\">filter</a>        <div class=\"func-type\">(a &rarr; Boolean) &rarr; [a] &rarr; [a]</div>        <p>Returns a new list composed of the items which pass the supplied function's test.<pre class=\"prettyprint example lang-ls\">filter (< 3), [1 to 5] #=> [1, 2]filter even, [3, 4, 0] #=> [4, 0]</pre>      </div>      <div id=\"reject\" class=\"func\">        <a href=\"#reject\" class=\"func-name\">reject</a>        <div class=\"func-type\">(a &rarr; Boolean) &rarr; [a] &rarr; [a]</div>        <p>Like <code>filter</code>, but the new list is composed of all the items which fail the function's test.<pre class=\"prettyprint example lang-ls\">reject odd, [1 to 5] #=> [2, 4]</pre>      </div>      <div id=\"partition\" class=\"func\">        <a href=\"#partition\" class=\"func-name\">partition</a>        <div class=\"func-type\">(a &rarr; Boolean) &rarr; [a] &rarr; [[a], [a]]</div>        <p>Equivalent to <code>[(filter f, xs), (reject f, xs)]</code>, but more efficient, using only one loop.<pre class=\"prettyprint example lang-ls\">partition (> 60), [49 58 76 43 88 77 90] #=> [[76 88 77 90],[49 58 43]]</pre>      </div>      <div id=\"find\" class=\"func\">        <a href=\"#find\" class=\"func-name\">find</a>        <div class=\"func-type\">(a &rarr; Boolean) &rarr; [a] &rarr; Maybe a</div>        <p>Returns the first item in list to pass the function's test. Returns undefined if all items fail the test.<pre class=\"prettyprint example lang-ls\">find odd, [2 4 6 7 8 9 10] #=> 7</pre>      </div>      <div id=\"head\" class=\"func\">        <a href=\"#head\" class=\"func-name\">head</a>        <div class=\"alias\">alias: first</div>        <div class=\"func-type\">[a] &rarr; Maybe a</div>        <p>The first item of the list. Returns <code>undefined</code> if the list is empty.<pre class=\"prettyprint example lang-ls\">head [1 to 5] #=> 1</pre>      </div>      <div id=\"tail\" class=\"func\">        <a href=\"#tail\" class=\"func-name\">tail</a>        <div class=\"func-type\">[a] &rarr; [a]</div>        <p>Everything but the first item of the list.<pre class=\"prettyprint example lang-ls\">tail [1 to 5] #=> [2, 3, 4, 5]</pre>      </div>      <div id=\"last\" class=\"func\">        <a href=\"#last\" class=\"func-name\">last</a>        <div class=\"func-type\">[a] &rarr; Maybe a</div>        <p>The last item of the list. Returns <code>undefined</code> if the list is empty.<pre class=\"prettyprint example lang-ls\">last [1 to 5] #=> 5</pre>      </div>      <div id=\"initial\" class=\"func\">        <a href=\"#initial\" class=\"func-name\">initial</a>        <div class=\"func-type\">[a] &rarr; [a]</div>        <p>Everything but the last item of the list.<pre class=\"prettyprint example lang-ls\">initial [1 to 5] #=> [1, 2, 3, 4]</pre>      </div>      <div id=\"empty\" class=\"func\">        <a href=\"#empty\" class=\"func-name\">empty</a>        <div class=\"func-type\">[a] &rarr; Boolean</div>        <p>Whether the list is empty.<pre class=\"prettyprint example lang-ls\">empty [] #=> true</pre>      </div>      <div id=\"reverse\" class=\"func\">        <a href=\"#reverse\" class=\"func-name\">reverse</a>        <div class=\"func-type\">[a] &rarr; [a]</div>        <p>Returns a new list which is the reverse of the inputted one.<pre class=\"prettyprint example lang-ls\">reverse [1 2 3] #=> [3, 2, 1]</pre>      </div>      <div id=\"unique\" class=\"func\">        <a href=\"#unique\" class=\"func-name\">unique</a>        <div class=\"func-type\">[a] &rarr; [a]</div>        <p>Returns a new list which contains each value of the inputted list only once.<pre class=\"prettyprint example lang-ls\">unique [1 1 1 3 3 6 7 8] #=> [1 3 6 7 8]</pre>      </div>      <div id=\"unique-by\" class=\"func\">        <a href=\"#unique-by\" class=\"func-name\">unique-by</a>        <div class=\"func-type\">(a &rarr; b) &rarr; [a] &rarr; [a]</div>        <p>Returns a new list which contains each item which has a unique value when applied to the supplied function. If there are multiple different items with the same value when the function is applied, the first item is taken.<pre class=\"prettyprint example lang-ls\">unique-by (.length), <[ and here are some words ]> #=> ['and', 'here', 'words']</pre>      </div>      <div id=\"fold\" class=\"func\">        <a href=\"#fold\" class=\"func-name\">fold</a>        <div class=\"alias\">alias: foldl</div>        <div class=\"func-type\">(a &rarr; b &rarr; a) &rarr; a &rarr; [b] &rarr; a</div>        <p>Takes a list of items, and using the binary function supplied, folds them into a single value. Requires an initial value (the second argument), which will be the starting point, and result in case of an empty list.<pre class=\"prettyprint example lang-ls\">fold (+), 0, [1 to 5] #=> 15product = fold (*), 1</pre>      </div>      <div id=\"fold1\" class=\"func\">        <a href=\"#fold1\" class=\"func-name\">fold1</a>        <div class=\"alias\">alias: foldl1</div>        <div class=\"func-type\">(a &rarr; a &rarr; a) &rarr; [a] &rarr; a</div>        <p>Like <code>fold</code>, except assumes a non-empty list, and thus doesn't require an initial value.<pre class=\"prettyprint example lang-ls\">fold1 (+), [1 to 3] #=> 6</pre>      </div>      <div id=\"foldr\" class=\"func\">        <a href=\"#foldr\" class=\"func-name\">foldr</a>        <div class=\"func-type\">(a &rarr; b &rarr; b) &rarr; b &rarr; [a] &rarr; b</div>        <p>Like <code>fold</code>, except folding from the right instead of the left.<pre class=\"prettyprint example lang-ls\">foldr (-), 9, [1 2 3 4]       #=> 7foldr (+), 'e', <[ a b c d ]> #=> 'abcde'</pre>      </div>      <div id=\"foldr1\" class=\"func\">        <a href=\"#foldr1\" class=\"func-name\">foldr1</a>        <div class=\"func-type\">(a &rarr; a &rarr; a) &rarr; [a] &rarr; a</div>        <p>Like <code>foldr</code>, except assumes a non-empty list, and thus doesn't require an initial value.<pre class=\"prettyprint example lang-ls\">foldr1 (-), [1 2 3 4 9] #=> 7</pre>      </div>      <div id=\"unfoldr\" class=\"func\">        <a href=\"#unfoldr\" class=\"func-name\">unfoldr</a>        <div class=\"func-type\">(b &rarr; Maybe [a, b]) &rarr; b &rarr; [a]</div>        <p>Unfoldr builds a list from a seed value (the second argument). It takes a function which either returns <code>null</code> if it is done producing the list, or returns <code>[x, y]</code>, <code>x</code> which is prepended to the list, and <code>y</code> is used as the next element in the recursive call.<pre class=\"prettyprint example lang-ls\">unfoldr (-> if it == 0 then null else [it, it - 1]), 10#=> [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]</pre>      </div>      <div id=\"concat\" class=\"func\">        <a href=\"#concat\" class=\"func-name\">concat</a>        <div class=\"func-type\">[[a]] &rarr; [a]</div>        <p>Concatenates a list of lists together.<pre class=\"prettyprint example lang-ls\">concat [[1] [2 3] [4]]   #=> [1, 2, 3, 4]</pre>      </div>      <div id=\"concat-map\" class=\"func\">        <a href=\"#concat-map\" class=\"func-name\">concat-map</a>        <div class=\"func-type\">(a &rarr; [b]) &rarr; [a] &rarr; [b]</div>        <p>Like <code>map</code>, except concatenates the output.<pre class=\"prettyprint example lang-ls\">concat-map (-> [1 to it]), [1 2 3] #=> [1, 1, 2, 1, 2, 3]</pre>      </div>      <div id=\"flatten\" class=\"func\">        <a href=\"#flatten\" class=\"func-name\">flatten</a>        <div class=\"func-type\">List &rarr; List</div>        <p>Flattens a list which contains sub lists and elements of arbitrary depth into a list of elements with no sub lists.<pre class=\"prettyprint example lang-ls\">flatten [1, [[2], 3], [4, [[5]]]] #=> [1, 2, 3, 4, 5]</pre>      </div>      <div id=\"difference\" class=\"func\">        <a href=\"#difference\" class=\"func-name\">difference</a>        <div class=\"func-type\">([a], [a], ...) &rarr; [a]</div>        <p>Returns a new list containing the elements which are present in the first list and not in the others. This function is not curried as it takes a variable number of arguments.<pre class=\"prettyprint example lang-ls\">difference [1 2 3] [1]              #=> [2, 3]difference [1 2 3 4 5] [5 2 10] [9] #=> [1, 3, 4]</pre>      </div>      <div id=\"intersection\" class=\"func\">        <a href=\"#intersection\" class=\"func-name\">intersection</a>        <div class=\"func-type\">([a], [a], ...) &rarr; [a]</div>        <p>Produces a new list containing all the items which are present in all the lists. This function is not curried as it takes a variable number of arguments.<pre class=\"prettyprint example lang-ls\">intersection [2 3] [9 8] [12 1] [99]               #=> []intersection [1 2 3] [101 2 1 10] [2 1] [-1 0 1 2] #=> [1, 2]intersection [1 2 3] [2 1 3] [3 1 2]               #=> [1, 2, 3]</pre>      </div>      <div id=\"union\" class=\"func\">        <a href=\"#union\" class=\"func-name\">union</a>        <div class=\"func-type\">([a], [a], ...) &rarr; [a]</div>        <p>Produces a new list containing all the elements of all the inputted lists only once. This function is not curried as it takes a variable number of arguments.<pre class=\"prettyprint example lang-ls\">union [1 5 7] [3 5] [] #=> [1 5 7 3]</pre>      </div>      <div id=\"count-by\" class=\"func\">        <a href=\"#count-by\" class=\"func-name\">count-by</a>        <div class=\"func-type\">(a &rarr; b) &rarr; [a] &rarr; {b: Number}</div>        <p>Takes a list of items, and a function, and produces an object whose keys are the result of applying the function to the inputted list, and whose values are the number of its occurrences.<pre class=\"prettyprint example lang-ls\">count-by floor, [4.2, 6.1, 6.4]         #=> {4: 1, 6: 2}count-by (.length), <[ one two three ]> #=> {3: 2, 5: 1}</pre>      </div>      <div id=\"group-by\" class=\"func\">        <a href=\"#group-by\" class=\"func-name\">group-by</a>        <div class=\"func-type\">(a &rarr; b) &rarr; [a] &rarr; {b: [a]}</div>        <p>Takes a list of items, and a function, and produces an object whose keys are the result of applying the function to the inputted list, and whose values are a list of all the occurrences.<pre class=\"prettyprint example lang-ls\">group-by floor, [4.2, 6.1, 6.4]         #=> {4: [4.2], 6: [6.1, 6.4]}group-by (.length), <[ one two three ]> #=> {3: ['one', 'two'], 5: ['three']}</pre>      </div>      <div id=\"and-list\" class=\"func\">        <a href=\"#and-list\" class=\"func-name\">and-list</a>        <div class=\"func-type\">[a] &rarr; Boolean</div>        <p>Returns <code>false</code> if any item in the list is <code>false</code>, otherwise returns <code>true</code>.<pre class=\"prettyprint example lang-ls\">and-list [true, 2 + 2 == 4] #=> trueand-list [true true false ] #=> falseand-list []                 #=> true</pre>      </div>      <div id=\"or-list\" class=\"func\">        <a href=\"#or-list\" class=\"func-name\">or-list</a>        <div class=\"func-type\">[a] &rarr; Boolean</div>        <p>Returns <code>true</code> if any item in the list is <code>true</code>, otherwise returns <code>false</code>.<pre class=\"prettyprint example lang-ls\">or-list [false false true false] #=> trueor-list []                       #=> false</pre>      </div>      <div id=\"any\" class=\"func\">        <a href=\"#any\" class=\"func-name\">any</a>        <div class=\"func-type\">(a &rarr; Boolean) &rarr; [a] &rarr; Boolean</div>        <p>Returns <code>true</code> if any of the items in the list are <code>true</code> when applied to the test.<pre class=\"prettyprint example lang-ls\">any even, [3, 5, 7, 8, 9] #=> trueany even, []              #=> false</pre>      </div>      <div id=\"all\" class=\"func\">        <a href=\"#all\" class=\"func-name\">all</a>        <div class=\"func-type\">(a &rarr; Boolean) &rarr; [a] &rarr; Boolean</div>        <p>Returns <code>true</code> if all the items in the list are <code>true</code> when applied to the test.<pre class=\"prettyprint example lang-ls\">all (is-type 'String'), <[ ha ma la ]> #=> trueall (is-type 'String'), []             #=> true</pre>      </div>      <div id=\"sort\" class=\"func\">        <a href=\"#sort\" class=\"func-name\">sort</a>        <div class=\"func-type\">[a] &rarr; [a]</div>        <p>Sorts a list. Does not modify the input.<pre class=\"prettyprint example lang-ls\">sort [3 1 5 2 4 6] #=> [1, 2, 3, 4, 5, 6]</pre>      </div>      <div id=\"sort-with\" class=\"func\">        <a href=\"#sort-with\" class=\"func-name\">sort-with</a>        <div class=\"func-type\">(a &rarr; a &rarr; Number) &rarr; [a] &rarr; [a]</div>        <p>Takes a binary function which compares two items and returns either a positive number, <code>0</code>, or a negative number, and sorts the inputted list using that function. The original list is not modified.<pre class=\"prettyprint example lang-ls\">f = (x, y) ->  | x.length > y.length => 1  | x.length < y.length => -1  | otherwise           => 0sort-with f, <[ three one two ]> #=> ['one','two','three']</pre>      </div>      <div id=\"sort-by\" class=\"func\">        <a href=\"#sort-by\" class=\"func-name\">sort-by</a>        <div class=\"func-type\">(a &rarr; b) &rarr; [a] &rarr; [a]</div>        <p>Sorts a list using the inputted function for making the comparison between the items.<pre class=\"prettyprint example lang-ls\">sort-by (.length), arr #=> ['a', 'ha', 'hey', 'there']table =  * id: 1    name: 'george'  * id: 2    name: 'mike'  * id: 3    name: 'donald'sort-by (.name), table#=> [{\"id\":3,\"name\":\"donald\"},{\"id\":1,\"name\":\"george\"},{\"id\":2,\"name\":\"mike\"}]</pre>      </div>      <div id=\"sum\" class=\"func\">        <a href=\"#sum\" class=\"func-name\">sum</a>        <div class=\"func-type\">[Number] &rarr; Number</div>        <p>Sums up the values in the list.<pre class=\"prettyprint example lang-ls\">sum [1 to 5] #=> 15sum []       #=> 0</pre>      </div>      <div id=\"product\" class=\"func\">        <a href=\"#product\" class=\"func-name\">product</a>        <div class=\"func-type\">[Number] &rarr; Number</div>        <p>Gets the product of all the items in the list.<pre class=\"prettyprint example lang-ls\">product [1 2 3] #=> 6product []      #=> 1</pre>      </div>      <div id=\"mean\" class=\"func\">        <a href=\"#mean\" class=\"func-name\">mean</a>        <div class=\"alias\">alias: average</div>        <div class=\"func-type\">[Number] &rarr; Number</div>        <p>Gets the mean of the values in the list.<pre class=\"prettyprint example lang-ls\">mean [1 to 5] #=> 3</pre>      </div>      <div id=\"maximum\" class=\"func\">        <a href=\"#maximum\" class=\"func-name\">maximum</a>        <div class=\"func-type\">[a] &rarr; a</div>        <p>Takes a list of comparable items, and returns the largest of them.<pre class=\"prettyprint example lang-ls\">maximum [4 1 9 3] #=> 9</pre>      </div>      <div id=\"minimum\" class=\"func\">        <a href=\"#minimum\" class=\"func-name\">minimum</a>        <div class=\"func-type\">[a] &rarr; a</div>        <p>Takes a list of comparable items, and returns the smallest of them.<pre class=\"prettyprint example lang-ls\">minimum ['c', 'e', 'a', 'd', 'b'] #=> 'a'</pre>      </div>      <div id=\"maximum-by\" class=\"func\">        <a href=\"#maximum-by\" class=\"func-name\">maximum-by</a>        <div class=\"func-type\">(a &rarr; b) &rarr; [a] &rarr; a</div>        <p>Takes a list of items, and returns the item with the largest value resulting from applying the supplied function to that item.<pre class=\"prettyprint example lang-ls\">maximum-by (.length), <[ hi there I am looooong ]> #=> 'looooong'</pre>      </div>      <div id=\"minimum-by\" class=\"func\">        <a href=\"#minimum-by\" class=\"func-name\">minimum-by</a>        <div class=\"func-type\">(a &rarr; b) &rarr; [a] &rarr; a</div>        <p>Takes a list of items, and returns the item with the smallest value resulting from applying the supplied function to that item.<pre class=\"prettyprint example lang-ls\">minimum-by (.length), <[ hi there I am looooong ]> #=> 'I'</pre>      </div>      <div id=\"scan\" class=\"func\">        <a href=\"#scan\" class=\"func-name\">scan</a>        <div class=\"alias\">alias: scanl</div>        <div class=\"func-type\">(a &rarr; b &rarr; a) &rarr; a &rarr; [b] &rarr; [a]</div>        <p>Like <code>fold</code>, except instead of just returning the final value, returns a list composed of the initial value, the intermediate values, and then the final value. Requires an initial value (the second argument), which is used case of an empty list.<pre class=\"prettyprint example lang-ls\">scan (+), 0, [1 to 3] #=> [0, 1, 3, 6]</pre>      </div>      <div id=\"scan1\" class=\"func\">        <a href=\"#scan1\" class=\"func-name\">scan1</a>        <div class=\"alias\">alias: scanl1</div>        <div class=\"func-type\">(a &rarr; a &rarr; a) &rarr; [a] &rarr; [a]</div>        <p>Like <code>scan</code>, except assumes non-empty list, and thus doesn't require an initial value.<pre class=\"prettyprint example lang-ls\">scan1 (+), [1 to 3] #=> [1, 3, 6]</pre>      </div>      <div id=\"scanr\" class=\"func\">        <a href=\"#scanr\" class=\"func-name\">scanr</a>        <div class=\"func-type\">(a &rarr; b &rarr; b) &rarr; b &rarr; [a] &rarr; [b]</div>        <p>Like <code>scan</code>, except from the right.<pre class=\"prettyprint example lang-ls\">scanr (+), 0, [1 to 3] #=> [6, 5, 3, 0]</pre>      </div>      <div id=\"scanr1\" class=\"func\">        <a href=\"#scanr1\" class=\"func-name\">scanr1</a>        <div class=\"func-type\">(a &rarr; a &rarr; a) &rarr; [a] &rarr; [a]</div>        <p>Like <code>scanr</code>, except assumes non-empty list, and thus doesn't require an initial value.<pre class=\"prettyprint example lang-ls\">scanr1 (+), [1 to 3] #=> [6, 5, 3]</pre>      </div>      <div id=\"slice\" class=\"func\">        <a href=\"#slice\" class=\"func-name\">slice</a>        <div class=\"func-type\">Number &rarr; Number &rarr; [a] &rarr; [a]</div>        <p>Returns a slice of a list.<pre class=\"prettyprint example lang-ls\">slice 2 4 [1 2 3 4 5] #=> [3, 4]</pre>      </div>      <div id=\"take\" class=\"func\">        <a href=\"#take\" class=\"func-name\">take</a>        <div class=\"func-type\">Number &rarr; [a] &rarr; [a]</div>        <p>Returns the first n items in the list.<pre class=\"prettyprint example lang-ls\">take 2 [1 to 5] #=> [1, 2]</pre>      </div>      <div id=\"drop\" class=\"func\">        <a href=\"#drop\" class=\"func-name\">drop</a>        <div class=\"func-type\">Number &rarr; [a] &rarr; [a]</div>        <p>Returns the result of dropping the first n items of the list.<pre class=\"prettyprint example lang-ls\">drop 2 [1 to 5] #=> [3, 4, 5]</pre>      </div>      <div id=\"split-at\" class=\"func\">        <a href=\"#split-at\" class=\"func-name\">split-at</a>        <div class=\"func-type\">Number &rarr; [a] &rarr; [[a], [a]]</div>        <p>Equivalent to <code>[(take n, xs), (drop n, xs)]</code><pre class=\"prettyprint example lang-ls\">split-at 2 [1 to 5] #=> [[1, 2], [3, 4, 5]]</pre>      </div>      <div id=\"take-while\" class=\"func\">        <a href=\"#take-while\" class=\"func-name\">take-while</a>        <div class=\"func-type\">(a &rarr; Boolean) &rarr; [a] &rarr; [a]</div>        <p>Takes the first items of the list which pass the test.<pre class=\"prettyprint example lang-ls\">take-while odd, [1 3 5 4 8 7 9] #=> [1, 3, 5]</pre>      </div>      <div id=\"drop-while\" class=\"func\">        <a href=\"#drop-while\" class=\"func-name\">drop-while</a>        <div class=\"func-type\">(a &rarr; Boolean) &rarr; [a] &rarr; [a]</div>        <p>Drops the first items of the list which pass the test.<pre class=\"prettyprint example lang-ls\">drop-while even, [2 4 5 6] #=> [5, 6]</pre>      </div>      <div id=\"span\" class=\"func\">        <a href=\"#span\" class=\"func-name\">span</a>        <div class=\"func-type\">(a &rarr; Boolean) &rarr; [a] &rarr; [[a], [a]]</div>        <p>Equivalent to <code>[(take-while f, xs), (drop-while f, xs)]</code><pre class=\"prettyprint example lang-ls\">span even, [2 4 5 6] #=> [[2, 4], [5, 6]]</pre>      </div>      <div id=\"break-list\" class=\"func\">        <a href=\"#break-list\" class=\"func-name\">break-list</a>        <div class=\"func-type\">(a &rarr; Boolean) &rarr; [a] &rarr; [[a], [a]]</div>        <p>Equivalent to <code>span (not) << f, xs</code><pre class=\"prettyprint example lang-ls\">break-list (== 3), [1 to 5] #=> [[1, 2], [3, 4, 5]]</pre>      </div>      <div id=\"zip\" class=\"func\">        <a href=\"#zip\" class=\"func-name\">zip</a>        <div class=\"func-type\">[a] &rarr; [b] &rarr; [[a, b]]</div>        <p>Zips together its two arguments into a list of lists.<pre class=\"prettyprint example lang-ls\">zip [1 2 3] [4 5 6] #=> [[1, 4], [2, 5], [3, 6]]</pre>      </div>      <div id=\"zip-with\" class=\"func\">        <a href=\"#zip-with\" class=\"func-name\">zip-with</a>        <div class=\"func-type\">(a &rarr; b &rarr; c) &rarr; [a] &rarr; [b] &rarr; [c]</div>        <p>Zips together its two arguments using a function into a list of resulting values.<pre class=\"prettyprint example lang-ls\">zip-with (+), [1 2 3] [4 5 6] #=> [5, 7, 9]</pre>      </div>      <div id=\"zip-all\" class=\"func\">        <a href=\"#zip-all\" class=\"func-name\">zip-all</a>        <div class=\"func-type\">([a], [b], [c], ...) &rarr; [[a, b, c, ...]]</div>        <p>Zips together its arguments into a list of lists. This function is not curried as it takes a variable number of arguments.<pre class=\"prettyprint example lang-ls\">zip-all [1 2 3] [4 5 6] [7 8 9] #=> [[1, 4, 7], [2, 5, 8], [3, 6, 9]]</pre>      </div>      <div id=\"zip-all-with\" class=\"func\">        <a href=\"#zip-all-with\" class=\"func-name\">zip-all-with</a>        <div class=\"func-type\">((a, b, c, ... &rarr; d), [a], [b], [c], ...) &rarr; [d]</div>        <p>As <code>zip-all</code>, but applies the supplied function to the lists and creates a list of the results. The supplied function must take in as many arguments as there are lists being inputed. This function is not curried as it takes a variable number of arguments.<pre class=\"prettyprint example lang-ls\">zip-all-with (-> &0 + &1 + &2), [1 2 3], [3 2 1] [1 1 1] #=> [5, 5, 5]</pre>      </div>      <div id=\"at\" class=\"func\">        <a href=\"#at\" class=\"func-name\">at</a>        <div class=\"func-type\">Number &rarr; [a] &rarr; a</div>        <p>Gets the element at the nth index (the first argument). If negative, will work from the end.<pre class=\"prettyprint example lang-ls\">at 2, [1 2 3 4] #=> 3at -3, [1 2 3 4] #=> 2</pre>      </div>      <div id=\"elem-index\" class=\"func\">        <a href=\"#elem-index\" class=\"func-name\">elem-index</a>        <div class=\"func-type\">a &rarr; [a] &rarr; Number</div>        <p>Returns the index of the first occurrence of the supplied element in the list. Returns <code>undefined</code> if the element is not found.<pre class=\"prettyprint example lang-ls\">elem-index 'a', <[ c a b a ]> #=> 1</pre>      </div>      <div id=\"elem-indices\" class=\"func\">        <a href=\"#elem-indices\" class=\"func-name\">elem-indices</a>        <div class=\"func-type\">a &rarr; [a] &rarr; [Number]</div>        <p>Returns an array of all the indices of the supplied element in the list. Returns an empty list if the element is not found at all.<pre class=\"prettyprint example lang-ls\">elem-indices 'a', <[ c a b a ]> #=> [1, 3]</pre>      </div>      <div id=\"find-index\" class=\"func\">        <a href=\"#find-index\" class=\"func-name\">find-index</a>        <div class=\"func-type\">(a &rarr; Boolean) &rarr; [a] &rarr; Number</div>        <p>Returns the index of the first element to pass the predicate. Returns <code>undefined</code> if the predicate never passes.<pre class=\"prettyprint example lang-ls\">find-index even, [1 2 3 4] #=> 1</pre>      </div>      <div id=\"find-indices\" class=\"func\">        <a href=\"#find-indices\" class=\"func-name\">find-indices</a>        <div class=\"func-type\">(a &rarr; Boolean) &rarr; [a] &rarr; [Number]</div>        <p>Returns an array of all the indices of the elements which pass the predicate. Returns an empty list if the predicate never passes.<pre class=\"prettyprint example lang-ls\">find-indices even, [1 2 3 4] #=> [1, 3]</pre>      </div>      <a class=\"module-heading\" id=\"obj\" href=\"#obj\">Obj</a>      <div id=\"keys\" class=\"func\">        <a href=\"#keys\" class=\"func-name\">keys</a>        <div class=\"func-type\">{a: b} &rarr; [a]</div>        <p>Returns a list of the keys of the object.<pre class=\"prettyprint example lang-ls\">keys a: 2, b: 3, c: 9 #=> ['a', 'b', 'c']</pre>      </div>      <div id=\"values\" class=\"func\">        <a href=\"#values\" class=\"func-name\">values</a>        <div class=\"func-type\">{a: b} &rarr; [b]</div>        <p>Returns a list of the values of the object.<pre class=\"prettyprint example lang-ls\">values a: 2, b: 3, c: 9 #=> [2, 3, 9]</pre>      </div>      <div id=\"pairs-to-obj\" class=\"func\">        <a href=\"#pairs-to-obj\" class=\"func-name\">pairs-to-obj</a>        <div class=\"func-type\">[[a, b]] &rarr; {a: b}</div>        <p>Takes a list of pairs and turns them into an object.<pre class=\"prettyprint example lang-ls\">pairs-to-obj [['a' 'b'] ['c' 'd'] ['e' 1]] #=> {a: 'b', c: 'd', e: 1}</pre>      </div>      <div id=\"obj-to-pairs\" class=\"func\">        <a href=\"#obj-to-pairs\" class=\"func-name\">obj-to-pairs</a>        <div class=\"func-type\">{a: b} &rarr; [[a, b]]</div>        <p>Takes an object and returns a list of pairs.<pre class=\"prettyprint example lang-ls\">obj-to-pairs {a: 'b', c: 'd', e: 1} #=> [['a', 'b'], ['c', 'd'], ['e', 1]]</pre>      </div>      <div id=\"lists-to-obj\" class=\"func\">        <a href=\"#lists-to-obj\" class=\"func-name\">lists-to-obj</a>        <div class=\"func-type\">[a] &rarr; [b] &rarr; {a: b}</div>        <p>Takes two lists and zips them up into an object.<pre class=\"prettyprint example lang-ls\">lists-to-obj <[ a b c ]> [1 2 3] #=> {a: 1, b: 2, c: 3}</pre>      </div>      <div id=\"obj-to-lists\" class=\"func\">        <a href=\"#obj-to-lists\" class=\"func-name\">obj-to-lists</a>        <div class=\"func-type\">{a: b} &rarr; [[a], [b]]</div>        <p>Takes an object and returns a list with two lists, one of its keys, one with its values.<pre class=\"prettyprint example lang-ls\">obj-to-lists {a: 1, b: 2, c: 3} #=> [['a', 'b', 'c'], [1, 2, 3]]</pre>      </div>      <div id=\"obj-empty\" class=\"func\">        <a href=\"#obj-empty\" class=\"func-name\">Obj.empty</a>        <div class=\"func-type\">Object &rarr; Boolean</div>        <p>Whether the object is empty (has no enumerable keys).<pre class=\"prettyprint example lang-ls\">Obj.empty {} #=> true</pre>      </div>      <div id=\"obj-each\" class=\"func\">        <a href=\"#obj-each\" class=\"func-name\">Obj.each</a>        <div class=\"func-type\">(b &rarr; Undefined) &rarr; {a: b} &rarr; {a: b}</div>        <p>Applies a function to each value in the object, and returns the original object. Used for side effects.<pre class=\"prettyprint example lang-ls\">count = 4Obj.each (-> count += it), {a: 1, b: 2, c: 3}count #=> 10</pre>      </div>      <div id=\"obj-map\" class=\"func\">        <a href=\"#obj-map\" class=\"func-name\">Obj.map</a>        <div class=\"func-type\">(b &rarr; c) &rarr; {a: b} &rarr; {a: c}</div>        <p>Applies a function to each value of the object, and produces a new object with the same keys and the new values. The size of the result is the same size as the input.<pre class=\"prettyprint example lang-ls\">Obj.map (+ 2), {a: 2, b: 3, c: 4} #=> {a: 4, b: 5, c: 6}</pre>      </div>      <div id=\"obj-compact\" class=\"func\">        <a href=\"#obj-compact\" class=\"func-name\">Obj.compact</a>        <div class=\"func-type\">{a: b} &rarr; {a: b}</div>        <p>Returns a new object which contains only the truthy values of the inputted object.<pre class=\"prettyprint example lang-ls\">Obj.compact {a: 0, b: 1, c: false, d: '', e: 'ha'} #=> {b: 1, e: 'ha'}</pre>      </div>      <div id=\"obj-filter\" class=\"func\">        <a href=\"#obj-filter\" class=\"func-name\">Obj.filter</a>        <div class=\"func-type\">(b &rarr; Boolean) &rarr; {a: b} &rarr; {a: b}</div>        <p>Returns a new object composed of the values which pass the supplied function's test.<pre class=\"prettyprint example lang-ls\">Obj.filter even, {a: 3, b: 4, c: 0} #=> {b: 4, c: 0}</pre>      </div>      <div id=\"obj-reject\" class=\"func\">        <a href=\"#obj-reject\" class=\"func-name\">Obj.reject</a>        <div class=\"func-type\">(b &rarr; Boolean) &rarr; {a: b} &rarr; {a: b}</div>        <p>Like <code>filter</code>, but the new object is composed of all the values which fail the function's test.<pre class=\"prettyprint example lang-ls\">Obj.reject (== 2), {a:1, b:2} #=> {a: 1}</pre>      </div>      <div id=\"obj-partition\" class=\"func\">        <a href=\"#obj-partition\" class=\"func-name\">Obj.partition</a>        <div class=\"func-type\">(b &rarr; Boolean) &rarr; {a: b} &rarr; [{a: b}, {a: b}]</div>        <p>Equivalent to <code>[(Obj.filter f, xs), (Obj.reject f, xs)]</code>, but more efficient, only using one loop.<pre class=\"prettyprint example lang-ls\">Obj.partition (== 2), {a:1, b:2, c:3} #=> [{b: 2}, {a: 1, c: 3}]</pre>      </div>      <div id=\"obj-find\" class=\"func\">        <a href=\"#obj-find\" class=\"func-name\">Obj.find</a>        <div class=\"func-type\">(b &rarr; Boolean) &rarr; {a: b} &rarr; b</div>        <p>Returns the first value to pass the test.<pre class=\"prettyprint example lang-ls\">Obj.find even, {a:1, b:2, c:3, d:4} #=> 2</pre>      </div>      <a class=\"module-heading\" id=\"str\" href=\"#str\">Str</a>      <div id=\"split\" class=\"func\">        <a href=\"#split\" class=\"func-name\">split</a>        <div class=\"func-type\">String &rarr; String &rarr; [String]</div>        <p>Splits a string on a separator into a list of strings.<pre class=\"prettyprint example lang-ls\">split '|' '1|2|3' #=> ['1', '2', '3']</pre>      </div>      <div id=\"join\" class=\"func\">        <a href=\"#join\" class=\"func-name\">join</a>        <div class=\"func-type\">String &rarr; [String] &rarr; String</div>        <p>Joins a list with the specified separator.<pre class=\"prettyprint example lang-ls\">join '|' [1 til 4] #=> '1|2|3'</pre>      </div>      <div id=\"lines\" class=\"func\">        <a href=\"#lines\" class=\"func-name\">lines</a>        <div class=\"func-type\">String &rarr; [String]</div>        <p>Splits a string at newlines into a list.<pre class=\"prettyprint example lang-ls\">lines '''one         two         three'''#=> ['one', 'two', 'three']</pre>      </div>      <div id=\"unlines\" class=\"func\">        <a href=\"#unlines\" class=\"func-name\">unlines</a>        <div class=\"func-type\">[String] &rarr; String</div>        <p>Joins a list of strings into a single string using newlines.<pre class=\"prettyprint example lang-ls\">unlines [\\one \\two \\three]#=> 'one#    two#    three'</pre>      </div>      <div id=\"words\" class=\"func\">        <a href=\"#words\" class=\"func-name\">words</a>        <div class=\"func-type\">String &rarr; [String]</div>        <p>Splits a string at spaces (one or more), returning a list of strings.<pre class=\"prettyprint example lang-ls\">words 'hello, what is that?'#=> ['hello,', 'what', 'is', 'that?']</pre>      </div>      <div id=\"unwords\" class=\"func\">        <a href=\"#unwords\" class=\"func-name\">unwords</a>        <div class=\"func-type\">[String] &rarr; String</div>        <p>Joins a list of strings into a single string using spaces.<pre class=\"prettyprint example lang-ls\">unwords ['one' 'two' 'three'] #=> 'one two three'</pre>      </div>      <div id=\"chars\" class=\"func\">        <a href=\"#chars\" class=\"func-name\">chars</a>        <div class=\"func-type\">String &rarr; [String]</div>        <p>Splits a string at every character, returning a list of one character strings.<pre class=\"prettyprint example lang-ls\">chars 'hello' #=> ['h', 'e', 'l', 'l', 'o']</pre>      </div>      <div id=\"unchars\" class=\"func\">        <a href=\"#unchars\" class=\"func-name\">unchars</a>        <div class=\"func-type\">[String] &rarr; String</div>        <p>Joins a list of strings into a single string using no separator.<pre class=\"prettyprint example lang-ls\">unchars ['t' 'h' 'e' 'r' 'e'] #=> 'there'unchars ['ma', 'ma']          #=> 'mama'</pre>      </div>      <div id=\"repeat\" class=\"func\">        <a href=\"#repeat\" class=\"func-name\">repeat</a>        <div class=\"func-type\">Number &rarr; String &rarr; String</div>        <p>Takes its second argument, and repeats it n times to create a new, single, string.<pre class=\"prettyprint example lang-ls\">repeat 4 'a'  #=> 'aaaa'repeat 2 'ha' #=> 'haha'</pre>      </div>      <div id=\"capitalize\" class=\"func\">        <a href=\"#capitalize\" class=\"func-name\">capitalize</a>        <div class=\"func-type\">String &rarr; String</div>        <p>Capitalizes a string.<pre class=\"prettyprint example lang-ls\">capitalize 'hi there' #=> 'Hi there'</pre>      </div>      <div id=\"camelize\" class=\"func\">        <a href=\"#camelize\" class=\"func-name\">camelize</a>        <div class=\"func-type\">String &rarr; String</div>        <p>Camelizes a string.<pre class=\"prettyprint example lang-ls\">camelize 'hi-there' #=> 'hiThere'camelize 'hi_there' #=> 'hiThere'</pre>      </div>      <div id=\"dasherize\" class=\"func\">        <a href=\"#dasherize\" class=\"func-name\">dasherize</a>        <div class=\"func-type\">String &rarr; String</div>        <p>Dasherizes a string.<pre class=\"prettyprint example lang-ls\">dasherize 'hiThere' #=> 'hi-there'dasherize 'FooBar' #=> 'foo-bar'dasherize 'innerHTML' #=> 'inner-HTML'</pre>      </div>      <div id=\"str-empty\" class=\"func\">        <a href=\"#str-empty\" class=\"func-name\">Str.empty</a>        <div class=\"func-type\">String &rarr; Boolean</div>        <p>Whether the string is empty.<pre class=\"prettyprint example lang-ls\">empty '' #=> true</pre>      </div>      <div id=\"str-reverse\" class=\"func\">        <a href=\"#str-reverse\" class=\"func-name\">Str.reverse</a>        <div class=\"func-type\">String &rarr; String</div>        <p>Reverses a string.<pre class=\"prettyprint example lang-ls\">reverse 'goat'   #=> 'taog'</pre>      </div>      <div id=\"str-slice\" class=\"func\">        <a href=\"#str-slice\" class=\"func-name\">Str.slice</a>        <div class=\"func-type\">Number &rarr; Number &rarr; String &rarr; String</div>        <p>Returns a slice of the inputted string.<pre class=\"prettyprint example lang-ls\">slice 2 4 'hello' #=> 'll'</pre>      </div>      <div id=\"str-take\" class=\"func\">        <a href=\"#str-take\" class=\"func-name\">Str.take</a>        <div class=\"func-type\">Number &rarr; String &rarr; String</div>        <p>Returns the first n items in string.<pre class=\"prettyprint example lang-ls\">take 4 'hello'   #=> 'hell'</pre>      </div>      <div id=\"str-drop\" class=\"func\">        <a href=\"#str-drop\" class=\"func-name\">Str.drop</a>        <div class=\"func-type\">Number &rarr; String &rarr; String</div>        <p>Returns the result of dropping the first n items of the string.<pre class=\"prettyprint example lang-ls\">drop 1 'goat'   #=> 'oat'</pre>      </div>      <div id=\"str-split-at\" class=\"func\">        <a href=\"#str-split-at\" class=\"func-name\">Str.split-at</a>        <div class=\"func-type\">Number &rarr; String &rarr; [String, String]</div>        <p>Equivalent to <code>[(Str.take n, xs), (Str.drop n, xs)]</code><pre class=\"prettyprint example lang-ls\">split-at 4 'hello' #=> ['hell', 'o']</pre>      </div>      <div id=\"str-take-while\" class=\"func\">        <a href=\"#str-take-while\" class=\"func-name\">Str.take-while</a>        <div class=\"func-type\">(String &rarr; Boolean) &rarr; String &rarr; String</div>        <p>Takes the first items of the string which pass the test.<pre class=\"prettyprint example lang-ls\">take-while (in [\\a to \\d]), 'cabdek' #=> 'cabd'</pre>      </div>      <div id=\"str-drop-while\" class=\"func\">        <a href=\"#str-drop-while\" class=\"func-name\">Str.drop-while</a>        <div class=\"func-type\">(String &rarr; Boolean) &rarr; String &rarr; String</div>        <p>Drops the first items of the string which pass the test.<pre class=\"prettyprint example lang-ls\">drop-while (is \\m), 'mmmmmhmm' #=> 'hmm'</pre>      </div>      <div id=\"str-span\" class=\"func\">        <a href=\"#str-span\" class=\"func-name\">Str.span</a>        <div class=\"func-type\">(String &rarr; Boolean) &rarr; String &rarr; [String, String]</div>        <p>Equivalent to <code>[(take-while f, xs), (drop-while f, xs)]</code><pre class=\"prettyprint example lang-ls\">span (is \\m), 'mmmmmhmm' #=> ['mmmmm', 'hmm']</pre>      </div>      <div id=\"str-break-str\" class=\"func\">        <a href=\"#str-break-str\" class=\"func-name\">Str.break-str</a>        <div class=\"func-type\">(String &rarr; Boolean) &rarr; String &rarr; [String, String]</div>        <p>Equivalent to <code>span (not) << f, xs</code><pre class=\"prettyprint example lang-ls\">Str.break-str (is \\h), 'mmmmmhmm' #=> ['mmmmm', 'hmm']</pre>      </div>      <a class=\"module-heading\" id=\"func\" href=\"#func\">Func</a>      <div id=\"apply\" class=\"func\">        <a href=\"#apply\" class=\"func-name\">apply</a>        <div class=\"func-type\">(a &rarr; b &rarr; c &rarr; ... &rarr; d) &rarr; [a, b, c, ...] &rarr; d</div>        <p>Returns the application of the supplied list as arguments to the supplied function.<pre class=\"prettyprint example lang-ls\">apply (+), [2 3] #=> 5</pre>      </div>      <div id=\"curry\" class=\"func\">        <a href=\"#curry\" class=\"func-name\">curry</a>        <div class=\"func-type\">Function &rarr; Function</div>        <p>Returns a curried version of the supplied function. Useful for currying functions from non-LiveScript libraries.<pre class=\"prettyprint example lang-ls\">add = (x, y) -> x + yadd-curried = curry addadd-four = add-curried 4add-four 2 #=> 6</pre>      </div>      <div id=\"flip\" class=\"func\">        <a href=\"#flip\" class=\"func-name\">flip</a>        <div class=\"func-type\">(a &rarr; b &rarr; c) &rarr; (b &rarr; a &rarr; c)</div>        <p>Returns a function with the arguments flipped.<pre class=\"prettyprint example lang-ls\">inverted-power = flip (^)inverted-power 2 3 #=> 9</pre>      </div>      <div id=\"fix\" class=\"func\">        <a href=\"#fix\" class=\"func-name\">fix</a>        <div class=\"func-type\">(Function &rarr; Function) &rarr; Function</div>        <p>Fix-point function for anonymous recursion, implemented with the <a href=\"https://en.wikipedia.org/wiki/Fixed-point_combinator#Y_combinator\">Y combinator</a>.<pre class=\"prettyprint example lang-ls\">(fix (fib) -> (n) ->   | n <= 1      => 1   | otherwise   => fib(n-1) + fib(n-2))(9) #=> 55</pre>      </div>      <div id=\"over\" class=\"func\">        <a href=\"#over\" class=\"func-name\">over</a>        <div class=\"func-type\">(b &rarr; c) &rarr; (a &rarr; b) &rarr; a &rarr; a &rarr; (a &rarr; c)</div>        <p>Combines two functions: <code>(f, g, x, y) --> f (g x), (g y)</code>. Looks nice when applied infix.<pre class=\"prettyprint example lang-ls\">same-length = (==) `over` (.length)same-length 'hi', 'me'    #=> truesame-length 'one', 'boom' #=> false</pre>      </div>      <div id=\"memoize\" class=\"func\">        <a href=\"#memoize\" class=\"func-name\">memoize</a>        <div class=\"func-type\">Function &rarr; Function</div>        <p>Caches computed results, speeding up later calls with the same arguments.<pre class=\"prettyprint example lang-ls\">f = memoize expensive-functionf 2 # slow, but result is then cachedf 2 # fast</pre>      </div>      <a class=\"module-heading\" id=\"num\" href=\"#num\">Num</a>      <div id=\"max\" class=\"func\">        <a href=\"#max\" class=\"func-name\">max</a>        <div class=\"func-type\">Comparable &rarr; Comparable &rarr; Value</div>        <p>Takes two arguments which can be compared using <code>&gt;</code>, returns the larger one.<pre class=\"prettyprint example lang-ls\">max 3 1     #=> 3max 'a' 'c' #=> 'c'</pre>      </div>      <div id=\"min\" class=\"func\">        <a href=\"#min\" class=\"func-name\">min</a>        <div class=\"func-type\">Comparable &rarr; Comparable &rarr; Value</div>        <p>Takes two arguments which can be compared using <code>&gt;</code>, returns the smaller one.<pre class=\"prettyprint example lang-ls\">min 3 1     #=> 1min 'a' 'c' #=> 'a'</pre>      </div>      <div id=\"negate\" class=\"func\">        <a href=\"#negate\" class=\"func-name\">negate</a>        <div class=\"func-type\">Number &rarr; Number</div>        <p>The negation of the inputted number.<pre class=\"prettyprint example lang-ls\">negate 3  #=> -3negate -2 #=>  2</pre>      </div>      <div id=\"abs\" class=\"func\">        <a href=\"#abs\" class=\"func-name\">abs</a>        <div class=\"func-type\">Number &rarr; Number</div>        <p>Takes a number and returns its absolute value.<pre class=\"prettyprint example lang-ls\">abs -2 #=>  2abs 2  #=> 2</pre>      </div>      <div id=\"signum\" class=\"func\">        <a href=\"#signum\" class=\"func-name\">signum</a>        <div class=\"func-type\">Number &rarr; (-1 | 0 | 1)</div>        <p>Takes a number and returns either -1, 0, or 1 depending on the sign of the number.<pre class=\"prettyprint example lang-ls\">signum -5 #=> -1signum  0 #=>  0signum  9 #=>  1</pre>      </div>      <div id=\"quot\" class=\"func\">        <a href=\"#quot\" class=\"func-name\">quot</a>        <div class=\"func-type\">Number &rarr; Number &rarr; Number</div>        <p>Division truncated toward 0.<pre class=\"prettyprint example lang-ls\">quot -20 3 #=> -6</pre>      </div>      <div id=\"rem\" class=\"func\">        <a href=\"#rem\" class=\"func-name\">rem</a>        <div class=\"func-type\">Number &rarr; Number &rarr; Number</div>        <p>Remainder, like the <code>%</code> operator.<pre class=\"prettyprint example lang-ls\">rem -20 3 #=> -2</pre>      </div>      <div id=\"div\" class=\"func\">        <a href=\"#div\" class=\"func-name\">div</a>        <div class=\"func-type\">Number &rarr; Number &rarr; Number</div>        <p>Division truncated down toward negative infinity.<pre class=\"prettyprint example lang-ls\">div -20 3 #=> -7</pre>      </div>      <div id=\"mod\" class=\"func\">        <a href=\"#mod\" class=\"func-name\">mod</a>        <div class=\"func-type\">Number &rarr; Number &rarr; Number</div>        <p>Remainder, like the <code>%%</code> operator in LiveScript.<pre class=\"prettyprint example lang-ls\">mod -20 3 #=> 1</pre>      </div>      <div id=\"recip\" class=\"func\">        <a href=\"#recip\" class=\"func-name\">recip</a>        <div class=\"func-type\">Number &rarr; Number</div>        <p>One over the number, ie <code>1 / x</code><pre class=\"prettyprint example lang-ls\">recip 4 #=> 0.25</pre>      </div>      <div id=\"pi\" class=\"func\">        <a href=\"#pi\" class=\"func-name\">pi</a>        <div class=\"func-type\">Number</div>        <p>&pi;<pre class=\"prettyprint example lang-ls\">pi #=> 3.141592653589793</pre>      </div>      <div id=\"tau\" class=\"func\">        <a href=\"#tau\" class=\"func-name\">tau</a>        <div class=\"func-type\">Number</div>        <p>&tau; (2&pi;)<pre class=\"prettyprint example lang-ls\">tau #=> 6.283185307179586</pre>      </div>      <div id=\"exp\" class=\"func\">        <a href=\"#exp\" class=\"func-name\">exp</a>        <div class=\"func-type\">Number &rarr; Number</div>        <p>Returns e to the argument.<pre class=\"prettyprint example lang-ls\">exp 1 #=> 2.718281828459045</pre>      </div>      <div id=\"sqrt\" class=\"func\">        <a href=\"#sqrt\" class=\"func-name\">sqrt</a>        <div class=\"func-type\">Number &rarr; Number</div>        <p>Square root.<pre class=\"prettyprint example lang-ls\">sqrt 4 #=> 2</pre>      </div>      <div id=\"ln\" class=\"func\">        <a href=\"#ln\" class=\"func-name\">ln</a>        <p>Natural log.        <div class=\"func-type\">Number &rarr; Number</div><pre class=\"prettyprint example lang-ls\">ln 10 #=> 2.302585092994046</pre>      </div>      <div id=\"pow\" class=\"func\">        <a href=\"#pow\" class=\"func-name\">pow</a>        <div class=\"func-type\">Number &rarr; Number &rarr; Number</div>        <p>Power. Equivalent to <code>x ^ y</code> or <code>x ** y</code> in LiveScript.<pre class=\"prettyprint example lang-ls\">pow -2 2 #=> 4</pre>      </div>      <div id=\"sin\" class=\"func\">        <a href=\"#sin\" class=\"func-name\">sin</a>        <div class=\"func-type\">Number &rarr; Number</div><pre class=\"prettyprint example lang-ls\">sin pi/2 #=> 1</pre>      </div>      <div id=\"cos\" class=\"func\">        <a href=\"#cos\" class=\"func-name\">cos</a>        <div class=\"func-type\">Number &rarr; Number</div><pre class=\"prettyprint example lang-ls\">cos pi #=> -1</pre>      </div>      <div id=\"tan\" class=\"func\">        <a href=\"#tan\" class=\"func-name\">tan</a>        <div class=\"func-type\">Number &rarr; Number</div><pre class=\"prettyprint example lang-ls\">tan pi/4 #=> 1</pre>      </div>      <div id=\"asin\" class=\"func\">        <a href=\"#asin\" class=\"func-name\">asin</a>        <div class=\"func-type\">Number &rarr; Number</div><pre class=\"prettyprint example lang-ls\">asin 0 #=> 0</pre>      </div>      <div id=\"acos\" class=\"func\">        <a href=\"#acos\" class=\"func-name\">acos</a>        <div class=\"func-type\">Number &rarr; Number</div><pre class=\"prettyprint example lang-ls\">acos 1 #=> 0</pre>      </div>      <div id=\"atan\" class=\"func\">        <a href=\"#atan\" class=\"func-name\">atan</a>        <div class=\"func-type\">Number &rarr; Number</div><pre class=\"prettyprint example lang-ls\">atan 0 #=> 0</pre>      </div>      <div id=\"atan2\" class=\"func\">        <a href=\"#atan2\" class=\"func-name\">atan2</a>        <div class=\"func-type\">Number &rarr; Number &rarr; Number</div><pre class=\"prettyprint example lang-ls\">atan2 1 0 #=> 1.5707963267948966</pre>      </div>      <div id=\"truncate\" class=\"func\">        <a href=\"#truncate\" class=\"func-name\">truncate</a>        <div class=\"func-type\">Number &rarr; Number</div>        <p>Number truncated toward 0.<pre class=\"prettyprint example lang-ls\">truncate -1.5 #=> -1truncate  1.5 #=>  1</pre>      </div>      <div id=\"round\" class=\"func\">        <a href=\"#round\" class=\"func-name\">round</a>        <div class=\"func-type\">Number &rarr; Number</div>        <p>Number rounded to nearest whole number.<pre class=\"prettyprint example lang-ls\">round 0.6 #=> 1round 0.5 #=> 1round 0.4 #=> 0</pre>      </div>      <div id=\"ceiling\" class=\"func\">        <a href=\"#ceiling\" class=\"func-name\">ceiling</a>        <div class=\"func-type\">Number &rarr; Number</div>        <p>Number rounded up.<pre class=\"prettyprint example lang-ls\">ceiling 0.1 #=> 1</pre>      </div>      <div id=\"floor\" class=\"func\">        <a href=\"#floor\" class=\"func-name\">floor</a>        <div class=\"func-type\">Number &rarr; Number</div>        <p>Number rounded down.<pre class=\"prettyprint example lang-ls\">floor 0.9 #=> 0</pre>      </div>      <div id=\"is-it-NaN\" class=\"func\">        <a href=\"#is-it-NaN\" class=\"func-name\">is-it-NaN</a>        <div class=\"func-type\">Number &rarr; Boolean</div>        <p>Is it <code>NaN</code> (not a number)? More accurate than the native <code>isNaN</code> function.<pre class=\"prettyprint example lang-ls\">is-it-NaN sqrt -1 #=> true</pre>      </div>      <div id=\"even\" class=\"func\">        <a href=\"#even\" class=\"func-name\">even</a>        <div class=\"func-type\">Number &rarr; Boolean</div>        <p>Is the number even?<pre class=\"prettyprint example lang-ls\">even 4 #=> trueeven 0 #=> true</pre>      </div>      <div id=\"odd\" class=\"func\">        <a href=\"#odd\" class=\"func-name\">odd</a>        <div class=\"func-type\">Number &rarr; Boolean</div>        <p>Is the number odd?<pre class=\"prettyprint example lang-ls\">odd 3 #=> true</pre>      </div>      <div id=\"gcd\" class=\"func\">        <a href=\"#gcd\" class=\"func-name\">gcd</a>        <div class=\"func-type\">Number &rarr; Number &rarr; Number</div>        <p>Greatest common denominator.<pre class=\"prettyprint example lang-ls\">gcd 12 18 #=> 6</pre>      </div>      <div id=\"lcm\" class=\"func\">        <a href=\"#lcm\" class=\"func-name\">lcm</a>        <div class=\"func-type\">Number &rarr; Number &rarr; Number</div>        <p>Least common multiple.<pre class=\"prettyprint example lang-ls\">lcm 12 18 #=> 36</pre>      </div>    </div>  </div></div><script src=\"google-code-prettify/prettify.js\"></script><script src=\"lang-ls.js\"></script><script src=\"prelude-browser.js\"></script><script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0];if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=\"//platform.twitter.com/widgets.js\";fjs.parentNode.insertBefore(js,fjs);}}(document,\"script\",\"twitter-wjs\");</script><script>  prettyPrint();  window.prelude = require('prelude-ls');  var _gaq = _gaq || [];  _gaq.push(['_setAccount', 'UA-7402515-6']);  _gaq.push(['_trackPageview']);  (function() {    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);  })();</script></body></html>",
  "embeddings": []
}
{
  "libtype": "npm",
  "libname": "lil-gui",
  "url": "https://lil-gui.georgealways.com",
  "html": "<!doctype html><html lang=\"en\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><title>lil-gui 0.19.2</title><link rel=\"stylesheet\" href=\"homepage/homepage.css\"></head><body><script type=\"module\" src=\"homepage/homepage.js\"></script><div id=\"container\"><button id=\"toc-button\"><div>Table of Contents</div></button><div id=\"toc-container\"><nav id=\"toc\"><h1><a href=\"#\">lil-gui 0.19.2</a></h1><h2><a href=\"#Examples\">Examples</a></h2><h2><a href=\"#Guide\">Guide</a></h2><ol><li><a href=\"#Guide#Installation\">Installation</a></li><li><a href=\"#Guide#Adding-Controllers\">Adding Controllers</a></li><li><a href=\"#Guide#Numbers-and-Sliders\">Numbers and Sliders</a></li><li><a href=\"#Guide#Dropdowns\">Dropdowns</a></li><li><a href=\"#Guide#Colors\">Colors</a></li><li><a href=\"#Guide#Folders\">Folders</a></li><li><a href=\"#Guide#Change-Events\">Change Events</a></li><li><a href=\"#Guide#Saving\">Saving</a></li><li><a href=\"#Guide#Styling\">Styling</a></li></ol><h2><a href=\"#Migrating\">Migrating</a></h2><h2><a href=\"#API\">API</a></h2><div class=\"api-index\"><div class=\"class\"><h3><a href=\"#GUI\"><strong>GUI</strong> (Class)</a></h3><ul><li><a href=\"#GUI#constructor\"><strong>constructor</strong></a></li><li><a href=\"#GUI#add\"><strong>add()</strong></a></li><li><a href=\"#GUI#addColor\"><strong>addColor()</strong></a></li><li><a href=\"#GUI#addFolder\"><strong>addFolder()</strong></a></li><li><a href=\"#GUI#load\"><strong>load()</strong></a></li><li><a href=\"#GUI#save\"><strong>save()</strong></a></li><li><a href=\"#GUI#open\"><strong>open()</strong></a></li><li><a href=\"#GUI#close\"><strong>close()</strong></a></li><li><a href=\"#GUI#show\"><strong>show()</strong></a></li><li><a href=\"#GUI#hide\"><strong>hide()</strong></a></li><li><a href=\"#GUI#title\"><strong>title()</strong></a></li><li><a href=\"#GUI#reset\"><strong>reset()</strong></a></li><li><a href=\"#GUI#onChange\"><strong>onChange()</strong></a></li><li><a href=\"#GUI#onFinishChange\"><strong>onFinishChange()</strong></a></li><li><a href=\"#GUI#onOpenClose\"><strong>onOpenClose()</strong></a></li><li><a href=\"#GUI#destroy\"><strong>destroy()</strong></a></li><li><a href=\"#GUI#controllersRecursive\"><strong>controllersRecursive()</strong></a></li><li><a href=\"#GUI#foldersRecursive\"><strong>foldersRecursive()</strong></a></li><li><a href=\"#GUI#children\">children</a></li><li><a href=\"#GUI#controllers\">controllers</a></li><li><a href=\"#GUI#domElement\">domElement</a></li><li><a href=\"#GUI#folders\">folders</a></li><li><a href=\"#GUI#parent\">parent</a></li><li><a href=\"#GUI#root\">root</a></li><li><a href=\"#GUI#$children\">$children</a></li><li><a href=\"#GUI#$title\">$title</a></li><li><a href=\"#GUI#_closed\">_closed</a></li><li><a href=\"#GUI#_hidden\">_hidden</a></li><li><a href=\"#GUI#_onChange\">_onChange</a></li><li><a href=\"#GUI#_onFinishChange\">_onFinishChange</a></li><li><a href=\"#GUI#_title\">_title</a></li></ul></div><div class=\"class\"><h3><a href=\"#Controller\"><strong>Controller</strong> (Class)</a></h3><ul><li><a href=\"#Controller#name\"><strong>name()</strong></a></li><li><a href=\"#Controller#onChange\"><strong>onChange()</strong></a></li><li><a href=\"#Controller#onFinishChange\"><strong>onFinishChange()</strong></a></li><li><a href=\"#Controller#reset\"><strong>reset()</strong></a></li><li><a href=\"#Controller#enable\"><strong>enable()</strong></a></li><li><a href=\"#Controller#disable\"><strong>disable()</strong></a></li><li><a href=\"#Controller#show\"><strong>show()</strong></a></li><li><a href=\"#Controller#hide\"><strong>hide()</strong></a></li><li><a href=\"#Controller#options\"><strong>options()</strong></a></li><li><a href=\"#Controller#min\"><strong>min()</strong></a></li><li><a href=\"#Controller#max\"><strong>max()</strong></a></li><li><a href=\"#Controller#step\"><strong>step()</strong></a></li><li><a href=\"#Controller#decimals\"><strong>decimals()</strong></a></li><li><a href=\"#Controller#listen\"><strong>listen()</strong></a></li><li><a href=\"#Controller#getValue\"><strong>getValue()</strong></a></li><li><a href=\"#Controller#setValue\"><strong>setValue()</strong></a></li><li><a href=\"#Controller#updateDisplay\"><strong>updateDisplay()</strong></a></li><li><a href=\"#Controller#destroy\"><strong>destroy()</strong></a></li><li><a href=\"#Controller#domElement\">domElement</a></li><li><a href=\"#Controller#initialValue\">initialValue</a></li><li><a href=\"#Controller#object\">object</a></li><li><a href=\"#Controller#parent\">parent</a></li><li><a href=\"#Controller#property\">property</a></li><li><a href=\"#Controller#$disable\">$disable</a></li><li><a href=\"#Controller#$name\">$name</a></li><li><a href=\"#Controller#$widget\">$widget</a></li><li><a href=\"#Controller#_disabled\">_disabled</a></li><li><a href=\"#Controller#_hidden\">_hidden</a></li><li><a href=\"#Controller#_listening\">_listening</a></li><li><a href=\"#Controller#_name\">_name</a></li><li><a href=\"#Controller#_onChange\">_onChange</a></li><li><a href=\"#Controller#_onFinishChange\">_onFinishChange</a></li></ul></div></div></nav></div><main><a name=\"\"></a><section id=\"section-readme\"><h1>lil-gui</h1><p>Makes a floating panel for controllers on the web. Works as a drop-in replacement for dat.gui in most projects. See <a href=\"#Migrating\">Migrating</a> for a list of breaking changes.</p><p><a href=\"examples/basic/\"><strong>Basic Demo</strong></a> \u2022<a href=\"#Examples\">Examples</a> \u2022<a href=\"#Guide\">Guide</a> \u2022<a href=\"#API\">API</a> \u2022<a target=\"_blank\" href=\"https://github.com/georgealways/lil-gui\">GitHub</a></p><pre><code class=\"language-js\"><span class=\"hljs-keyword\">import</span> GUI <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;lil-gui&#x27;</span>; <span class=\"hljs-keyword\">const</span> gui = <span class=\"hljs-keyword\">new</span> GUI();<span class=\"hljs-keyword\">const</span> myObject = {<span class=\"hljs-attr\">myBoolean</span>: <span class=\"hljs-literal\">true</span>,<span class=\"hljs-attr\">myFunction</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{ ... },<span class=\"hljs-attr\">myString</span>: <span class=\"hljs-string\">&#x27;lil-gui&#x27;</span>,<span class=\"hljs-attr\">myNumber</span>: <span class=\"hljs-number\">1</span>};gui.add( myObject, <span class=\"hljs-string\">&#x27;myBoolean&#x27;</span> );  <span class=\"hljs-comment\">// Checkbox</span>gui.add( myObject, <span class=\"hljs-string\">&#x27;myFunction&#x27;</span> ); <span class=\"hljs-comment\">// Button</span>gui.add( myObject, <span class=\"hljs-string\">&#x27;myString&#x27;</span> );   <span class=\"hljs-comment\">// Text Field</span>gui.add( myObject, <span class=\"hljs-string\">&#x27;myNumber&#x27;</span> );   <span class=\"hljs-comment\">// Number Field</span><span class=\"hljs-comment\">// Add sliders to number fields by passing min and max</span>gui.add( myObject, <span class=\"hljs-string\">&#x27;myNumber&#x27;</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span> );gui.add( myObject, <span class=\"hljs-string\">&#x27;myNumber&#x27;</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">100</span>, <span class=\"hljs-number\">2</span> ); <span class=\"hljs-comment\">// snap to even numbers</span><span class=\"hljs-comment\">// Create dropdowns by passing an array or object of named values</span>gui.add( myObject, <span class=\"hljs-string\">&#x27;myNumber&#x27;</span>, [ <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span> ] );gui.add( myObject, <span class=\"hljs-string\">&#x27;myNumber&#x27;</span>, { <span class=\"hljs-attr\">Label1</span>: <span class=\"hljs-number\">0</span>, <span class=\"hljs-attr\">Label2</span>: <span class=\"hljs-number\">1</span>, <span class=\"hljs-attr\">Label3</span>: <span class=\"hljs-number\">2</span> } );<span class=\"hljs-comment\">// Chainable methods</span>gui.add( myObject, <span class=\"hljs-string\">&#x27;myProperty&#x27;</span> ).name( <span class=\"hljs-string\">&#x27;Custom Name&#x27;</span> ).onChange( <span class=\"hljs-function\"><span class=\"hljs-params\">value</span> =&gt;</span> {<span class=\"hljs-built_in\">console</span>.log( value );} );<span class=\"hljs-comment\">// Create color pickers for multiple color formats</span><span class=\"hljs-keyword\">const</span> colorFormats = {<span class=\"hljs-attr\">string</span>: <span class=\"hljs-string\">&#x27;#ffffff&#x27;</span>,<span class=\"hljs-attr\">int</span>: <span class=\"hljs-number\">0xffffff</span>,<span class=\"hljs-attr\">object</span>: { <span class=\"hljs-attr\">r</span>: <span class=\"hljs-number\">1</span>, <span class=\"hljs-attr\">g</span>: <span class=\"hljs-number\">1</span>, <span class=\"hljs-attr\">b</span>: <span class=\"hljs-number\">1</span> },<span class=\"hljs-attr\">array</span>: [ <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span> ]};gui.addColor( colorFormats, <span class=\"hljs-string\">&#x27;string&#x27;</span> );</code></pre><a href=\"dist/lil-gui.esm.js\">Built Source</a> \u2022<a href=\"dist/lil-gui.esm.min.js\">Minified</a> = 29.9kb, <strong>8.5kb</strong> gzipped</section><section id=\"section-examples\"><a name=\"Examples\"></a><h1>Examples</h1><ul><li><a href=\"examples/basic\"><strong>Basic Demo</strong></a></li><li><a href=\"examples/kitchen-sink\"><strong>Kitchen Sink</strong></a> - Exhaustive demonstration of features and styles.</li><li><a target=\"_blank\" href=\"https://threejs.org/examples/\">three.js examples</a> - Many three.js examples feature lil-gui.</li><li><a target=\"_blank\" href=\"https://filters.pixijs.download/main/demo/index.html\">PixiJS Filters Demo</a> - Procedurally creates a lil-gui for every filter in PixiJS.</li></ul></section><section id=\"section-guide\"><a name=\"Guide\"></a><h1>Guide</h1><p><strong>lil-gui</strong> gives you an interface for changing the properties of any JavaScript object at runtime.It's intended as a drop-in replacement for <a target=\"_blank\" href=\"https://github.com/dataarts/dat.gui\">dat.gui</a>,implemented with more modern web standards and some new quality of life features.</p><p>The <a href=\"#Migrating\">Migrating</a> section lists any breaking changes between the two libraries. The changes are limited to the lesser-used portions of the API, but you should read it before moving a project to lil-gui.</p><p>If you've used dat.gui before, the beginning of this guide will be review. New features are introduced beginning in the <a href=\"/#Guide#Change-Events\">Change Events</a> section.</p><a name=\"Guide#Installation\"></a><h2>Installation</h2><p>You can install lil-gui with npm for use with a bundler.</p><pre><code class=\"language-sh\">$ npm install lil-gui --save-dev</code></pre><pre><code class=\"language-js\"><span class=\"hljs-keyword\">import</span> GUI <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;lil-gui&#x27;</span>;</code></pre><p>For quick sketches, you can import lil-gui directly from a CDN.</p><pre><code class=\"language-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;module&quot;</span>&gt;</span><span class=\"javascript\"><span class=\"hljs-keyword\">import</span> GUI <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;https://cdn.jsdelivr.net/npm/lil-gui@0.19/+esm&#x27;</span>;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></code></pre><p>The library is also available in UMD format under the namespace <code>lil</code>.</p><pre><code class=\"language-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;https://cdn.jsdelivr.net/npm/lil-gui@0.19&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"><span class=\"hljs-keyword\">var</span> GUI = lil.GUI;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></code></pre><a name=\"Guide#Adding-Controllers\"></a><h2>Adding Controllers</h2><p>This code creates an input that lets you change this page's title.</p><pre><code class=\"language-js\"><span class=\"hljs-keyword\">const</span> gui = <span class=\"hljs-keyword\">new</span> GUI();gui.add( <span class=\"hljs-built_in\">document</span>, <span class=\"hljs-string\">&#x27;title&#x27;</span> );</code></pre><p>lil-gui will choose an appropriate controller based on the property's data type. Since <code>document.title</code> is a string, a text field is created.</p><p>Here are some more of the data types you can control:</p><pre><code class=\"language-js\">obj = {<span class=\"hljs-attr\">myBoolean</span>: <span class=\"hljs-literal\">true</span>,<span class=\"hljs-attr\">myString</span>: <span class=\"hljs-string\">&#x27;lil-gui&#x27;</span>,<span class=\"hljs-attr\">myNumber</span>: <span class=\"hljs-number\">1</span>,<span class=\"hljs-attr\">myFunction</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{ alert( <span class=\"hljs-string\">&#x27;hi&#x27;</span> ) }}gui.add( obj, <span class=\"hljs-string\">&#x27;myBoolean&#x27;</span> ); <span class=\"hljs-comment\">// checkbox</span>gui.add( obj, <span class=\"hljs-string\">&#x27;myString&#x27;</span> ); <span class=\"hljs-comment\">// text field</span>gui.add( obj, <span class=\"hljs-string\">&#x27;myNumber&#x27;</span> ); <span class=\"hljs-comment\">// number field</span>gui.add( obj, <span class=\"hljs-string\">&#x27;myFunction&#x27;</span> ); <span class=\"hljs-comment\">// button</span></code></pre><a name=\"Guide#Numbers-and-Sliders\"></a><h2>Numbers and Sliders</h2><p>Numbers can be constrained to a range using <code>min()</code> and <code>max()</code>. You can use <code>step()</code> to round values to multiples of a given number.</p><pre><code class=\"language-js\">obj = { <span class=\"hljs-attr\">hasMin</span>: <span class=\"hljs-number\">1</span>, <span class=\"hljs-attr\">hasMax</span>: <span class=\"hljs-number\">99</span>, <span class=\"hljs-attr\">hasStep</span>: <span class=\"hljs-number\">50</span> }gui.add( obj, <span class=\"hljs-string\">&#x27;hasMin&#x27;</span> ).min( <span class=\"hljs-number\">0</span> );gui.add( obj, <span class=\"hljs-string\">&#x27;hasMax&#x27;</span> ).max( <span class=\"hljs-number\">100</span> );gui.add( obj, <span class=\"hljs-string\">&#x27;hasStep&#x27;</span> ).step( <span class=\"hljs-number\">10</span> );</code></pre><p>Number controllers with a minimum and a maximum automatically become sliders. You can use anabbreviated syntax to define them both at once.</p><pre><code class=\"language-js\">obj = { <span class=\"hljs-attr\">number1</span>: <span class=\"hljs-number\">1</span>, <span class=\"hljs-attr\">number2</span>: <span class=\"hljs-number\">50</span> }gui.add( obj, <span class=\"hljs-string\">&#x27;number1&#x27;</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span> ); <span class=\"hljs-comment\">// min, max</span>gui.add( obj, <span class=\"hljs-string\">&#x27;number2&#x27;</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">100</span>, <span class=\"hljs-number\">10</span> ); <span class=\"hljs-comment\">// min, max, step</span></code></pre><a name=\"Guide#Dropdowns\"></a><h2>Dropdowns</h2><p>You can create a dropdown for any data type by providing an array of accepted values. If you pass anobject, its keys will be used as labels for the options.</p><pre><code class=\"language-js\">obj = { <span class=\"hljs-attr\">size</span>: <span class=\"hljs-string\">&#x27;Medium&#x27;</span>, <span class=\"hljs-attr\">speed</span>: <span class=\"hljs-number\">1</span> }gui.add( obj, <span class=\"hljs-string\">&#x27;size&#x27;</span>, [ <span class=\"hljs-string\">&#x27;Small&#x27;</span>, <span class=\"hljs-string\">&#x27;Medium&#x27;</span>, <span class=\"hljs-string\">&#x27;Large&#x27;</span> ] )gui.add( obj, <span class=\"hljs-string\">&#x27;speed&#x27;</span>, { <span class=\"hljs-attr\">Slow</span>: <span class=\"hljs-number\">0.1</span>, <span class=\"hljs-attr\">Normal</span>: <span class=\"hljs-number\">1</span>, <span class=\"hljs-attr\">Fast</span>: <span class=\"hljs-number\">5</span> } )</code></pre><a name=\"Guide#Colors\"></a><h2>Colors</h2><p>lil-gui recognizes colors in a number of formats: CSS strings, RGB objects or integer hex values toname a few. You can use <code>addColor()</code> to create a color picker for controlling these values.</p><pre><code class=\"language-js\">obj = {<span class=\"hljs-attr\">color1</span>: <span class=\"hljs-string\">&#x27;#AA00FF&#x27;</span>,<span class=\"hljs-attr\">color2</span>: <span class=\"hljs-string\">&#x27;#a0f&#x27;</span>,<span class=\"hljs-attr\">color3</span>: <span class=\"hljs-string\">&#x27;rgb(170, 0, 255)&#x27;</span>,<span class=\"hljs-attr\">color4</span>: <span class=\"hljs-number\">0xaa00ff</span>}gui.addColor( obj, <span class=\"hljs-string\">&#x27;color1&#x27;</span> );gui.addColor( obj, <span class=\"hljs-string\">&#x27;color2&#x27;</span> );gui.addColor( obj, <span class=\"hljs-string\">&#x27;color3&#x27;</span> );gui.addColor( obj, <span class=\"hljs-string\">&#x27;color4&#x27;</span> );</code></pre><p>lil-gui uses an <code>rrggbb</code> format for display, but it honors the original <em>data type</em> when writing colors (numbers remain numbers, strings remain strings). However, all string-based colors are normalized to <code>#rrggbb</code> format on update.</p><h3>RGB Objects &amp; Arrays</h3><p>Some libraries use objects or arrays of RGB values to describe colors. These can also be controlledby <code>addColor()</code>. The color channels are assumed to be between 0 and 1, but you can also set yourown range. Color objects and arrays are never replaced\u2014only their components are modified.</p><pre><code class=\"language-js\">obj = {<span class=\"hljs-attr\">colorObject</span>: { <span class=\"hljs-attr\">r</span>: <span class=\"hljs-number\">0.667</span>, <span class=\"hljs-attr\">g</span>: <span class=\"hljs-number\">0</span>, <span class=\"hljs-attr\">b</span>: <span class=\"hljs-number\">1</span> },<span class=\"hljs-attr\">colorArray</span>: [ <span class=\"hljs-number\">0.667</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span> ]}gui.addColor( obj, <span class=\"hljs-string\">&#x27;colorObject&#x27;</span> );gui.addColor( obj, <span class=\"hljs-string\">&#x27;colorArray&#x27;</span> );</code></pre><h3>RGB Channel Ranges</h3><p>The channel range for RGB objects and arrays can be overriden per controller by passing a thirdparameter to <code>addColor()</code>. If your colors are coming out too bright, you might need to set this to 255.</p><pre><code class=\"language-js\">obj = {<span class=\"hljs-attr\">colorObject</span>: { <span class=\"hljs-attr\">r</span>: <span class=\"hljs-number\">170</span>, <span class=\"hljs-attr\">g</span>: <span class=\"hljs-number\">0</span>, <span class=\"hljs-attr\">b</span>: <span class=\"hljs-number\">255</span> },<span class=\"hljs-attr\">colorArray</span>: [ <span class=\"hljs-number\">170</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">255</span> ]}gui.addColor( obj, <span class=\"hljs-string\">&#x27;colorObject&#x27;</span>, <span class=\"hljs-number\">255</span> );gui.addColor( obj, <span class=\"hljs-string\">&#x27;colorArray&#x27;</span>, <span class=\"hljs-number\">255</span> );</code></pre><a name=\"Guide#Folders\"></a><h2>Folders</h2><p>You can organize controllers in collapsible groups using <code>addFolder()</code>. The method returns a new GUIinstance representing the folder. You can add controllers to the folder just like you would with any GUI.</p><pre><code class=\"language-js\"><span class=\"hljs-comment\">// top level controller</span>gui.add( obj, <span class=\"hljs-string\">&#x27;scale&#x27;</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span> );<span class=\"hljs-comment\">// nested controllers</span><span class=\"hljs-keyword\">const</span> folder = gui.addFolder( <span class=\"hljs-string\">&#x27;Position&#x27;</span> );folder.add( obj, <span class=\"hljs-string\">&#x27;x&#x27;</span> );folder.add( obj, <span class=\"hljs-string\">&#x27;y&#x27;</span> );folder.add( obj, <span class=\"hljs-string\">&#x27;z&#x27;</span> );</code></pre><a name=\"Guide#Change-Events\"></a><h2>Change Events</h2><p>If you want to call a function every time a controller is changed, you can pass it to the controller's<code>onChange</code> method. The new value will be passed to your function after every change (so long as itoriginates from that controller and not from code elsewhere).</p><pre><code class=\"language-js\">gui.add( params, <span class=\"hljs-string\">&#x27;foo&#x27;</span> ).onChange( <span class=\"hljs-function\"><span class=\"hljs-params\">value</span> =&gt;</span> {<span class=\"hljs-built_in\">console</span>.log( value );} );</code></pre><p>The <code>onFinishChange</code> handler fires after a controller changes and loses focus. This comes in handy if you're using a slow function with a controller that produces continuous change events (like a slider or color picker).</p><pre><code class=\"language-js\">gui.add( params, <span class=\"hljs-string\">&#x27;foo&#x27;</span> )   .onFinishChange( complexFunction );</code></pre><h3>Global Change Handlers</h3><p>GUI also provides an <code>onChange</code> handler that fires after changes to any of its children.These handlers receive an event object with details about the controller that was modified.</p><pre><code class=\"language-js\">gui.onChange( <span class=\"hljs-function\"><span class=\"hljs-params\">event</span> =&gt;</span> {event.object     <span class=\"hljs-comment\">// object that was modified</span>event.property   <span class=\"hljs-comment\">// string, name of property</span>event.value      <span class=\"hljs-comment\">// new value of controller</span>event.controller <span class=\"hljs-comment\">// controller that was modified</span>} );</code></pre><p><code>GUI.onChange</code> events bubble upward. A handler applied to the root GUI will fire after every change.Handlers applied to folders will only be called after changes to that folder or its descendents.</p><p><code>GUI.onFinishChange</code> works just like <code>GUI.onChange</code>, but it only fires at the end of change events.</p><h3>Listening and Updating</h3><p>If a value controlled by the GUI is changed in code anywhere outside of the GUI, the new value won'tbe reflected by the controller's display. You can call <code>listen()</code> to update the controller's displayevery frame.</p><pre><code class=\"language-js\">gui.add( params, <span class=\"hljs-string\">&#x27;feedback&#x27;</span>, -<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span> )   .listen()   .disable();<span class=\"hljs-function\"><span class=\"hljs-title\">animate</span>(<span class=\"hljs-params\"></span>)</span> {params.feedback = <span class=\"hljs-built_in\">Math</span>.sin( <span class=\"hljs-built_in\">Date</span>.now() / <span class=\"hljs-number\">1000</span> );}</code></pre><p>You can also call <code>controller.updateDisplay()</code> at any time to manage this behavior yourself.</p><a name=\"Guide#Saving\"></a><h2>Saving</h2><p>Using <code>gui.save()</code>, you can create an object that saves the current value of all propertiesadded to the GUI. You can pass that object to <code>gui.load()</code> to restore the saved values.</p><p>The following creates a GUI that can save a preset. Press the savePreset button, then modify anycontroller. Pressing the loadPreset button restores the values you saved.</p><pre><code class=\"language-js\"><span class=\"hljs-keyword\">let</span> preset = {};<span class=\"hljs-keyword\">const</span> obj = {<span class=\"hljs-attr\">value1</span>: <span class=\"hljs-string\">&#x27;original&#x27;</span>,<span class=\"hljs-attr\">value2</span>: <span class=\"hljs-number\">1996</span>,<span class=\"hljs-function\"><span class=\"hljs-title\">savePreset</span>(<span class=\"hljs-params\"></span>)</span> {<span class=\"hljs-comment\">// save current values to an object</span>preset = gui.save();loadButton.enable();},<span class=\"hljs-function\"><span class=\"hljs-title\">loadPreset</span>(<span class=\"hljs-params\"></span>)</span> {gui.load( preset );}}gui.add( obj, <span class=\"hljs-string\">&#x27;value1&#x27;</span> );gui.add( obj, <span class=\"hljs-string\">&#x27;value2&#x27;</span> );gui.add( obj, <span class=\"hljs-string\">&#x27;savePreset&#x27;</span> );<span class=\"hljs-keyword\">const</span> loadButton = gui.add( obj, <span class=\"hljs-string\">&#x27;loadPreset&#x27;</span> );loadButton.disable();</code></pre><h3>Save Object Format</h3><p>The following is an example of an object returned by <code>gui.save()</code>. The object will be JSON compatible.It can be saved to disk, <em>unless</em> you're using non-primitive data types in a dropdown (color objectsand arrays are fine).</p><pre><code class=\"language-js\">{<span class=\"hljs-attr\">controllers</span>: {<span class=\"hljs-attr\">value1</span>: <span class=\"hljs-string\">&#x27;original&#x27;</span>,<span class=\"hljs-attr\">value2</span>: <span class=\"hljs-number\">1996</span>,},<span class=\"hljs-attr\">folders</span>: {<span class=\"hljs-comment\">// if GUI has folders ...</span><span class=\"hljs-attr\">folderName1</span>: { controllers, folders },<span class=\"hljs-attr\">folderName2</span>: { controllers, folders }...}}</code></pre><p>Both save and load accept a <code>recursive</code> parameter, which is true by default. Use <code>save( false )</code> and<code>load( data, false )</code> to ignore any folders within the GUI. The saved object will contain an emptyfolders object.</p><h3>Name Collisions</h3><p><code>save()</code> will throw an error if the GUI contains more than one controller or folder with the samename. You can avoid these collisions by renaming the controllers with <code>name()</code>.</p><pre><code class=\"language-js\">gui.add( position, <span class=\"hljs-string\">&#x27;x&#x27;</span> ).name( <span class=\"hljs-string\">&#x27;position.x&#x27;</span> );gui.add( rotation, <span class=\"hljs-string\">&#x27;x&#x27;</span> ).name( <span class=\"hljs-string\">&#x27;rotation.x&#x27;</span> );</code></pre><a name=\"Guide#Styling\"></a><h2>Styling</h2><p>By default, the GUI is added to <code>document.body</code> and attached to the top right of the window withfixed positioning. You can add the GUI to a different element by passing a <code>container</code> parameter tothe constructor.</p><pre><code class=\"language-js\"><span class=\"hljs-keyword\">const</span> gui = <span class=\"hljs-keyword\">new</span> GUI( { <span class=\"hljs-attr\">container</span>: $(<span class=\"hljs-string\">&#x27;#gui&#x27;</span>) } );</code></pre><h3>Width and Long Names</h3><p>The GUI can be made wider by passing a pixel width to the constructor. This is usually done whencontroller names are too long to fit within the panel.</p><pre><code class=\"language-js\"><span class=\"hljs-keyword\">const</span> gui = <span class=\"hljs-keyword\">new</span> GUI( { <span class=\"hljs-attr\">width</span>: <span class=\"hljs-number\">400</span> } );</code></pre><p>The library provides a few ways to manage this using CSS variables as well.</p><pre><code>.lil-gui { --width: 400px;--name-width: 65%;}</code></pre><p>The <code>--width</code> property does the same thing as the one in the constructor, but allows us to use any validCSS value. Adjusting <code>--name-width</code> allows you to increase the size of names relative to controllers,which might be better than enlarging the entire panel.</p><h3>CSS Variables and Custom Stylesheets</h3><p>lil-gui exposes a number of CSS variables that allow you to customize colors and dimensions. You cansee an exhaustive list of these variables in the <a href=\"examples/kitchen-sink\">Kitchen Sink</a> demo.</p><pre><code>.lil-gui { --background-color: #000;--widget-color: #0af;--padding: 2px;}</code></pre><p>If you want to start a new stylesheet from scratch, the default styles can be left out entirely withthe <code>injectStyles</code> parameter.</p><pre><code class=\"language-js\"><span class=\"hljs-keyword\">new</span> GUI( { <span class=\"hljs-attr\">injectStyles</span>: <span class=\"hljs-literal\">false</span> } );</code></pre><h3>Touch Styles</h3><p>Controllers are larger on touch devices to make them easier to use. By default, these styles areapplied using a CSS query: <code>@media (pointer: coarse)</code>. You can disable this behavior with the <code>touchStyles</code> parameter.</p><pre><code class=\"language-js\">gui = <span class=\"hljs-keyword\">new</span> GUI( { <span class=\"hljs-attr\">touchStyles</span>: <span class=\"hljs-literal\">false</span> } );gui.domElement.classList.add( <span class=\"hljs-string\">&#x27;force-touch-styles&#x27;</span> );</code></pre><p>You can then apply these styles at a time of your choosing by adding the <code>.force-touch-styles</code> CSS classto the GUI's root element.</p></section><section id=\"section-migrating\"><a name=\"Migrating\"></a><h1>Migrating</h1><p>For most projects, moving from dat.gui to lil-gui should be as simple as changingthe import URL. The API is designed to be as backwards-compatible as is reasonably possible, but thissection aims to address any breaking changes.</p><h2>API Changes</h2><ul><li><code>gui.__controllers</code> is now <code>gui.controllers</code>.</li><li><code>gui.__folders</code> is now <code>gui.folders</code> and it's an array, not a map.</li><li><code>gui.remove( controller )</code> is now <code>controller.destroy()</code>.</li><li><code>gui.removeFolder( folder )</code> is now <code>folder.destroy()</code>.</li><li>Folders are open by default.</li></ul><h2>DOM Structure</h2><p>The DOM structure of the GUI has changed, so code that interacts with dat.gui's inner DOM elementsis likely to break.</p><ul><li><code>gui.__ul</code> is now <code>gui.$children</code>.</li><li><code>gui.__closeButton</code> is now <code>gui.$title</code>.</li><li><code>domElement</code> is still <code>domElement</code> for both Controller and GUI.</li></ul><p>CSS class names are also different:</p><ul><li><code>.dg.ac</code> is now <code>.lil-gui.autoPlace</code>.</li></ul><h2>Color Controller Changes</h2><p>There's one major difference in the way dat.gui and lil-gui handle color controllers: channel rangesfor RGB objects and RGB arrays are assumed to be in the range of <code>[0-255]</code> in dat.gui and <code>[0-1]</code> inlil-gui.</p><p>In general, this shouldn't have much of an impact, as it's common practice to use hex valuesand an <code>onChange</code> handler when using dat.gui with a library like three.js that expects RGB <code>[0-1]</code>.</p><pre><code class=\"language-js\"><span class=\"hljs-comment\">// common three.js + dat.gui color pattern</span>params = { <span class=\"hljs-attr\">color</span>: color.getHex() };dat_gui.addColor( params, <span class=\"hljs-string\">&#x27;color&#x27;</span> ).onChange( <span class=\"hljs-function\"><span class=\"hljs-params\">v</span> =&gt;</span> {    color.setHex( v ) } );</code></pre><p>Since lil-gui and three.js agree on RGB ranges, this code can be simplified:</p><pre><code class=\"language-js\">params = { color };lil_gui.addColor( params, <span class=\"hljs-string\">&#x27;color&#x27;</span> );</code></pre><p>The other differences in color handling are fairly minor:</p><ul><li>lil-gui always writes to <code>#rrggbb</code> format for strings, even those defined as <code>rgb()</code> or <code>#RGB</code>.</li><li>lil-gui uses the native HTML <code>input[type=color]</code> tag instead of a custom color picker.</li><li>lil-gui doesn't support any HSL or alpha color formats.</li></ul><h2>Removed</h2><ul><li>&quot;Presets&quot; and <code>gui.remember()</code> are gone in favor of <code>save/load()</code>, which also removesmention of <code>localStorage</code>.</li><li>The static <code>GUI.toggleHide()</code> method and the <key>H</key> to hide hotkey.</li></ul></section><section id=\"section-api\"><a name=\"API\"></a><!-- generated by scripts/api.js --><h1>API</h1><div class=\"api-index\"><div class=\"class\"><h2><a href=\"#GUI\"><strong>GUI</strong> (Class)</a></h2><ul><li><a href=\"#GUI#constructor\"><strong>constructor</strong></a></li><li><a href=\"#GUI#add\"><strong>add()</strong></a></li><li><a href=\"#GUI#addColor\"><strong>addColor()</strong></a></li><li><a href=\"#GUI#addFolder\"><strong>addFolder()</strong></a></li><li><a href=\"#GUI#load\"><strong>load()</strong></a></li><li><a href=\"#GUI#save\"><strong>save()</strong></a></li><li><a href=\"#GUI#open\"><strong>open()</strong></a></li><li><a href=\"#GUI#close\"><strong>close()</strong></a></li><li><a href=\"#GUI#show\"><strong>show()</strong></a></li><li><a href=\"#GUI#hide\"><strong>hide()</strong></a></li><li><a href=\"#GUI#title\"><strong>title()</strong></a></li><li><a href=\"#GUI#reset\"><strong>reset()</strong></a></li><li><a href=\"#GUI#onChange\"><strong>onChange()</strong></a></li><li><a href=\"#GUI#onFinishChange\"><strong>onFinishChange()</strong></a></li><li><a href=\"#GUI#onOpenClose\"><strong>onOpenClose()</strong></a></li><li><a href=\"#GUI#destroy\"><strong>destroy()</strong></a></li><li><a href=\"#GUI#controllersRecursive\"><strong>controllersRecursive()</strong></a></li><li><a href=\"#GUI#foldersRecursive\"><strong>foldersRecursive()</strong></a></li><li><a href=\"#GUI#children\">children</a></li><li><a href=\"#GUI#controllers\">controllers</a></li><li><a href=\"#GUI#domElement\">domElement</a></li><li><a href=\"#GUI#folders\">folders</a></li><li><a href=\"#GUI#parent\">parent</a></li><li><a href=\"#GUI#root\">root</a></li><li><a href=\"#GUI#$children\">$children</a></li><li><a href=\"#GUI#$title\">$title</a></li><li><a href=\"#GUI#_closed\">_closed</a></li><li><a href=\"#GUI#_hidden\">_hidden</a></li><li><a href=\"#GUI#_onChange\">_onChange</a></li><li><a href=\"#GUI#_onFinishChange\">_onFinishChange</a></li><li><a href=\"#GUI#_title\">_title</a></li></ul></div><div class=\"class\"><h2><a href=\"#Controller\"><strong>Controller</strong> (Class)</a></h2><ul><li><a href=\"#Controller#name\"><strong>name()</strong></a></li><li><a href=\"#Controller#onChange\"><strong>onChange()</strong></a></li><li><a href=\"#Controller#onFinishChange\"><strong>onFinishChange()</strong></a></li><li><a href=\"#Controller#reset\"><strong>reset()</strong></a></li><li><a href=\"#Controller#enable\"><strong>enable()</strong></a></li><li><a href=\"#Controller#disable\"><strong>disable()</strong></a></li><li><a href=\"#Controller#show\"><strong>show()</strong></a></li><li><a href=\"#Controller#hide\"><strong>hide()</strong></a></li><li><a href=\"#Controller#options\"><strong>options()</strong></a></li><li><a href=\"#Controller#min\"><strong>min()</strong></a></li><li><a href=\"#Controller#max\"><strong>max()</strong></a></li><li><a href=\"#Controller#step\"><strong>step()</strong></a></li><li><a href=\"#Controller#decimals\"><strong>decimals()</strong></a></li><li><a href=\"#Controller#listen\"><strong>listen()</strong></a></li><li><a href=\"#Controller#getValue\"><strong>getValue()</strong></a></li><li><a href=\"#Controller#setValue\"><strong>setValue()</strong></a></li><li><a href=\"#Controller#updateDisplay\"><strong>updateDisplay()</strong></a></li><li><a href=\"#Controller#destroy\"><strong>destroy()</strong></a></li><li><a href=\"#Controller#domElement\">domElement</a></li><li><a href=\"#Controller#initialValue\">initialValue</a></li><li><a href=\"#Controller#object\">object</a></li><li><a href=\"#Controller#parent\">parent</a></li><li><a href=\"#Controller#property\">property</a></li><li><a href=\"#Controller#$disable\">$disable</a></li><li><a href=\"#Controller#$name\">$name</a></li><li><a href=\"#Controller#$widget\">$widget</a></li><li><a href=\"#Controller#_disabled\">_disabled</a></li><li><a href=\"#Controller#_hidden\">_hidden</a></li><li><a href=\"#Controller#_listening\">_listening</a></li><li><a href=\"#Controller#_name\">_name</a></li><li><a href=\"#Controller#_onChange\">_onChange</a></li><li><a href=\"#Controller#_onFinishChange\">_onFinishChange</a></li></ul></div></div><!--endtoc--><a name=\"GUI\"></a><h1>GUI (Class)</h1><a name=\"GUI#constructor\"></a><h2>new <strong>GUI</strong>( { autoPlace, container, width, title, closeFolders, injectStyles, touchStyles, parent } )</h2><p>Creates a panel that holds controllers. <small>(<a target=\"_blank\" href=\"https://github.com/georgealways/gui/blob/master/src/GUI.js#L52\">GUI.js:52</a>)</small></p><pre><code class=\"language-js\"><span class=\"hljs-keyword\">new</span> GUI();<span class=\"hljs-keyword\">new</span> GUI( { <span class=\"hljs-attr\">container</span>: <span class=\"hljs-built_in\">document</span>.getElementById( <span class=\"hljs-string\">&#x27;custom&#x27;</span> ) } );</code></pre><ul><li><p><strong>autoPlace</strong> - Adds the GUI to <code>document.body</code> and fixes it to the top right of the page.<br><small>Default: <code>true</code></small></p></li><li><p><strong>container</strong> - Adds the GUI to this DOM element. Overrides <code>autoPlace</code>.<br><small>Optional:<code>HTMLElement</code></small></p></li><li><p><strong>width</strong> - Width of the GUI in pixels, usually set when name labels become too long. Note that you can makename labels wider in CSS with <code>.lil\u2011gui { \u2011\u2011name\u2011width: 55% }</code>.<br><small>Default: <code>245</code></small></p></li><li><p><strong>title</strong> - Name to display in the title bar.<br><small>Default: <code>Controls</code></small></p></li><li><p><strong>closeFolders</strong> - Pass <code>true</code> to close all folders in this GUI by default.<br><small>Optional:<code>boolean</code></small></p></li><li><p><strong>injectStyles</strong> - Injects the default stylesheet into the page if this is the first GUI.Pass <code>false</code> to use your own stylesheet.<br><small>Default: <code>true</code></small></p></li><li><p><strong>touchStyles</strong> - Makes controllers larger on touch devices. Pass <code>false</code> to disable touch styles.<br><small>Default: <code>true</code></small></p></li><li><p><strong>parent</strong> - Adds this GUI as a child in another GUI. Usually this is done for you by <code>addFolder()</code>.<br><small>Optional:<code>GUI</code></small></p></li></ul><a name=\"GUI#add\"></a><h2>gui.<strong>add</strong>( object, property, [$1], [max], [step] )</h2><p>Adds a controller to the GUI, inferring controller type using the <code>typeof</code> operator. <small>(<a target=\"_blank\" href=\"https://github.com/georgealways/gui/blob/master/src/GUI.js#L203\">GUI.js:203</a>)</small></p><pre><code class=\"language-js\">gui.add( object, <span class=\"hljs-string\">&#x27;property&#x27;</span> );gui.add( object, <span class=\"hljs-string\">&#x27;number&#x27;</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">100</span>, <span class=\"hljs-number\">1</span> );gui.add( object, <span class=\"hljs-string\">&#x27;options&#x27;</span>, [ <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span> ] );</code></pre><ul><li><p><strong>object</strong> - The object the controller will modify.<br><small>Required:<code>object</code></small></p></li><li><p><strong>property</strong> - Name of the property to control.<br><small>Required:<code>string</code></small></p></li><li><p><strong>$1</strong> - Minimum value for number controllers, or the set ofselectable values for a dropdown.<br><small>Optional:<code>number</code> or <code>object</code> or <code>Array</code></small></p></li><li><p><strong>max</strong> - Maximum value for number controllers.<br><small>Optional:<code>number</code></small></p></li><li><p><strong>step</strong> - Step value for number controllers.<br><small>Optional:<code>number</code></small></p></li></ul><p><strong>Returns</strong>: <code>Controller</code></p><a name=\"GUI#addColor\"></a><h2>gui.<strong>addColor</strong>( object, property, rgbScale=1 )</h2><p>Adds a color controller to the GUI. <small>(<a target=\"_blank\" href=\"https://github.com/georgealways/gui/blob/master/src/GUI.js#L260\">GUI.js:260</a>)</small></p><pre><code class=\"language-js\">params = {<span class=\"hljs-attr\">cssColor</span>: <span class=\"hljs-string\">&#x27;#ff00ff&#x27;</span>,<span class=\"hljs-attr\">rgbColor</span>: { <span class=\"hljs-attr\">r</span>: <span class=\"hljs-number\">0</span>, <span class=\"hljs-attr\">g</span>: <span class=\"hljs-number\">0.2</span>, <span class=\"hljs-attr\">b</span>: <span class=\"hljs-number\">0.4</span> },<span class=\"hljs-attr\">customRange</span>: [ <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">127</span>, <span class=\"hljs-number\">255</span> ],};gui.addColor( params, <span class=\"hljs-string\">&#x27;cssColor&#x27;</span> );gui.addColor( params, <span class=\"hljs-string\">&#x27;rgbColor&#x27;</span> );gui.addColor( params, <span class=\"hljs-string\">&#x27;customRange&#x27;</span>, <span class=\"hljs-number\">255</span> );</code></pre><ul><li><p><strong>object</strong> - The object the controller will modify.<br><small>Required:<code>object</code></small></p></li><li><p><strong>property</strong> - Name of the property to control.<br><small>Required:<code>string</code></small></p></li><li><p><strong>rgbScale</strong> - Maximum value for a color channel when using an RGB color. You mayneed to set this to 255 if your colors are too bright.<br><small>Default: <code>1</code></small></p></li></ul><p><strong>Returns</strong>: <code>Controller</code></p><a name=\"GUI#addFolder\"></a><h2>gui.<strong>addFolder</strong>( title )</h2><p>Adds a folder to the GUI, which is just another GUI. This method returnsthe nested GUI so you can add controllers to it. <small>(<a target=\"_blank\" href=\"https://github.com/georgealways/gui/blob/master/src/GUI.js#L276\">GUI.js:276</a>)</small></p><pre><code class=\"language-js\"><span class=\"hljs-keyword\">const</span> folder = gui.addFolder( <span class=\"hljs-string\">&#x27;Position&#x27;</span> );folder.add( position, <span class=\"hljs-string\">&#x27;x&#x27;</span> );folder.add( position, <span class=\"hljs-string\">&#x27;y&#x27;</span> );folder.add( position, <span class=\"hljs-string\">&#x27;z&#x27;</span> );</code></pre><ul><li><strong>title</strong> - Name to display in the folder's title bar.<br><small>Required:<code>string</code></small></li></ul><p><strong>Returns</strong>: <code>GUI</code></p><a name=\"GUI#load\"></a><h2>gui.<strong>load</strong>( obj, recursive=true )</h2><p>Recalls values that were saved with <code>gui.save()</code>. <small>(<a target=\"_blank\" href=\"https://github.com/georgealways/gui/blob/master/src/GUI.js#L288\">GUI.js:288</a>)</small></p><ul><li><p><strong>obj</strong><br><small>Required:<code>object</code></small></p></li><li><p><strong>recursive</strong> - Pass false to exclude folders descending from this GUI.<br><small>Default: <code>true</code></small></p></li></ul><p><strong>Returns</strong>: <code>this</code></p><a name=\"GUI#save\"></a><h2>gui.<strong>save</strong>( recursive=true )</h2><p>Returns an object mapping controller names to values. The object can be passed to <code>gui.load()</code> torecall these values. <small>(<a target=\"_blank\" href=\"https://github.com/georgealways/gui/blob/master/src/GUI.js#L340\">GUI.js:340</a>)</small></p><pre><code class=\"language-js\">{<span class=\"hljs-attr\">controllers</span>: {<span class=\"hljs-attr\">prop1</span>: <span class=\"hljs-number\">1</span>,<span class=\"hljs-attr\">prop2</span>: <span class=\"hljs-string\">&#x27;value&#x27;</span>,...},<span class=\"hljs-attr\">folders</span>: {<span class=\"hljs-attr\">folderName1</span>: { controllers, folders },<span class=\"hljs-attr\">folderName2</span>: { controllers, folders }...}}</code></pre><ul><li><strong>recursive</strong> - Pass false to exclude folders descending from this GUI.<br><small>Default: <code>true</code></small></li></ul><p><strong>Returns</strong>: <code>object</code></p><a name=\"GUI#open\"></a><h2>gui.<strong>open</strong>( open=true )</h2><p>Opens a GUI or folder. GUI and folders are open by default. <small>(<a target=\"_blank\" href=\"https://github.com/georgealways/gui/blob/master/src/GUI.js#L386\">GUI.js:386</a>)</small></p><pre><code class=\"language-js\">gui.open(); <span class=\"hljs-comment\">// open</span>gui.open( <span class=\"hljs-literal\">false</span> ); <span class=\"hljs-comment\">// close</span>gui.open( gui._closed ); <span class=\"hljs-comment\">// toggle</span></code></pre><ul><li><strong>open</strong> - Pass false to close.<br><small>Default: <code>true</code></small></li></ul><p><strong>Returns</strong>: <code>this</code></p><a name=\"GUI#close\"></a><h2>gui.<strong>close</strong>()</h2><p>Closes the GUI. <small>(<a target=\"_blank\" href=\"https://github.com/georgealways/gui/blob/master/src/GUI.js#L401\">GUI.js:401</a>)</small></p><p><strong>Returns</strong>: <code>this</code></p><a name=\"GUI#show\"></a><h2>gui.<strong>show</strong>( show=true )</h2><p>Shows the GUI after it's been hidden. <small>(<a target=\"_blank\" href=\"https://github.com/georgealways/gui/blob/master/src/GUI.js#L420\">GUI.js:420</a>)</small></p><pre><code class=\"language-js\">gui.show();gui.show( <span class=\"hljs-literal\">false</span> ); <span class=\"hljs-comment\">// hide</span>gui.show( gui._hidden ); <span class=\"hljs-comment\">// toggle</span></code></pre><ul><li><strong>show</strong><br><small>Default: <code>true</code></small></li></ul><p><strong>Returns</strong>: <code>this</code></p><a name=\"GUI#hide\"></a><h2>gui.<strong>hide</strong>()</h2><p>Hides the GUI. <small>(<a target=\"_blank\" href=\"https://github.com/georgealways/gui/blob/master/src/GUI.js#L434\">GUI.js:434</a>)</small></p><p><strong>Returns</strong>: <code>this</code></p><a name=\"GUI#title\"></a><h2>gui.<strong>title</strong>( title )</h2><p>Change the title of this GUI. <small>(<a target=\"_blank\" href=\"https://github.com/georgealways/gui/blob/master/src/GUI.js#L483\">GUI.js:483</a>)</small></p><ul><li><strong>title</strong><br><small>Required:<code>string</code></small></li></ul><p><strong>Returns</strong>: <code>this</code></p><a name=\"GUI#reset\"></a><h2>gui.<strong>reset</strong>( recursive=true )</h2><p>Resets all controllers to their initial values. <small>(<a target=\"_blank\" href=\"https://github.com/georgealways/gui/blob/master/src/GUI.js#L498\">GUI.js:498</a>)</small></p><ul><li><strong>recursive</strong> - Pass false to exclude folders descending from this GUI.<br><small>Default: <code>true</code></small></li></ul><p><strong>Returns</strong>: <code>this</code></p><a name=\"GUI#onChange\"></a><h2>gui.<strong>onChange</strong>( callback )</h2><p>Pass a function to be called whenever a controller in this GUI changes. <small>(<a target=\"_blank\" href=\"https://github.com/georgealways/gui/blob/master/src/GUI.js#L516\">GUI.js:516</a>)</small></p><pre><code class=\"language-js\">gui.onChange( <span class=\"hljs-function\"><span class=\"hljs-params\">event</span> =&gt;</span> {event.object     <span class=\"hljs-comment\">// object that was modified</span>event.property   <span class=\"hljs-comment\">// string, name of property</span>event.value      <span class=\"hljs-comment\">// new value of controller</span>event.controller <span class=\"hljs-comment\">// controller that was modified</span>} );</code></pre><ul><li><strong>callback</strong><br><small>Required:<code>function</code></small></li></ul><p><strong>Returns</strong>: <code>this</code></p><a name=\"GUI#onFinishChange\"></a><h2>gui.<strong>onFinishChange</strong>( callback )</h2><p>Pass a function to be called whenever a controller in this GUI has finished changing. <small>(<a target=\"_blank\" href=\"https://github.com/georgealways/gui/blob/master/src/GUI.js#L554\">GUI.js:554</a>)</small></p><pre><code class=\"language-js\">gui.onFinishChange( <span class=\"hljs-function\"><span class=\"hljs-params\">event</span> =&gt;</span> {event.object     <span class=\"hljs-comment\">// object that was modified</span>event.property   <span class=\"hljs-comment\">// string, name of property</span>event.value      <span class=\"hljs-comment\">// new value of controller</span>event.controller <span class=\"hljs-comment\">// controller that was modified</span>} );</code></pre><ul><li><strong>callback</strong><br><small>Required:<code>function</code></small></li></ul><p><strong>Returns</strong>: <code>this</code></p><a name=\"GUI#onOpenClose\"></a><h2>gui.<strong>onOpenClose</strong>( callback )</h2><p>Pass a function to be called when this GUI or its descendants are opened or closed. <small>(<a target=\"_blank\" href=\"https://github.com/georgealways/gui/blob/master/src/GUI.js#L589\">GUI.js:589</a>)</small></p><pre><code class=\"language-js\">gui.onOpenClose( <span class=\"hljs-function\"><span class=\"hljs-params\">changedGUI</span> =&gt;</span> {<span class=\"hljs-built_in\">console</span>.log( changedGUI._closed );} );</code></pre><ul><li><strong>callback</strong><br><small>Required:<code>function</code></small></li></ul><p><strong>Returns</strong>: <code>this</code></p><a name=\"GUI#destroy\"></a><h2>gui.<strong>destroy</strong>()</h2><p>Destroys all DOM elements and event listeners associated with this GUI. <small>(<a target=\"_blank\" href=\"https://github.com/georgealways/gui/blob/master/src/GUI.js#L607\">GUI.js:607</a>)</small></p><a name=\"GUI#controllersRecursive\"></a><h2>gui.<strong>controllersRecursive</strong>()</h2><p>Returns an array of controllers contained by this GUI and its descendents. <small>(<a target=\"_blank\" href=\"https://github.com/georgealways/gui/blob/master/src/GUI.js#L626\">GUI.js:626</a>)</small></p><p><strong>Returns</strong>: <code>Controller[]</code></p><a name=\"GUI#foldersRecursive\"></a><h2>gui.<strong>foldersRecursive</strong>()</h2><p>Returns an array of folders contained by this GUI and its descendents. <small>(<a target=\"_blank\" href=\"https://github.com/georgealways/gui/blob/master/src/GUI.js#L638\">GUI.js:638</a>)</small></p><p><strong>Returns</strong>: <code>GUI[]</code></p><a name=\"GUI#children\"></a><h2>gui.<strong>children</strong> : Array&lt;GUI|Controller&gt;</h2><p>The list of controllers and folders contained by this GUI. <small>(<a target=\"_blank\" href=\"https://github.com/georgealways/gui/blob/master/src/GUI.js#L79\">GUI.js:79</a>)</small></p><a name=\"GUI#controllers\"></a><h2>gui.<strong>controllers</strong> : Controller[]</h2><p>The list of controllers contained by this GUI. <small>(<a target=\"_blank\" href=\"https://github.com/georgealways/gui/blob/master/src/GUI.js#L85\">GUI.js:85</a>)</small></p><a name=\"GUI#domElement\"></a><h2>gui.<strong>domElement</strong> : HTMLElement</h2><p>The outermost container element. <small>(<a target=\"_blank\" href=\"https://github.com/georgealways/gui/blob/master/src/GUI.js#L109\">GUI.js:109</a>)</small></p><a name=\"GUI#folders\"></a><h2>gui.<strong>folders</strong> : GUI[]</h2><p>The list of folders contained by this GUI. <small>(<a target=\"_blank\" href=\"https://github.com/georgealways/gui/blob/master/src/GUI.js#L91\">GUI.js:91</a>)</small></p><a name=\"GUI#parent\"></a><h2>gui.<strong>parent</strong> : GUI</h2><p>The GUI containing this folder, or <code>undefined</code> if this is the root GUI. <small>(<a target=\"_blank\" href=\"https://github.com/georgealways/gui/blob/master/src/GUI.js#L67\">GUI.js:67</a>)</small></p><a name=\"GUI#root\"></a><h2>gui.<strong>root</strong> : GUI</h2><p>The top level GUI containing this folder, or <code>this</code> if this is the root GUI. <small>(<a target=\"_blank\" href=\"https://github.com/georgealways/gui/blob/master/src/GUI.js#L73\">GUI.js:73</a>)</small></p><a name=\"GUI#$children\"></a><h2>gui.<strong>$children</strong> : HTMLElement</h2><p>The DOM element that contains children. <small>(<a target=\"_blank\" href=\"https://github.com/georgealways/gui/blob/master/src/GUI.js#L137\">GUI.js:137</a>)</small></p><a name=\"GUI#$title\"></a><h2>gui.<strong>$title</strong> : HTMLElement</h2><p>The DOM element that contains the title. <small>(<a target=\"_blank\" href=\"https://github.com/georgealways/gui/blob/master/src/GUI.js#L116\">GUI.js:116</a>)</small></p><a name=\"GUI#_closed\"></a><h2>gui.<strong>_closed</strong> : boolean</h2><p>Used to determine if the GUI is closed. Use <code>gui.open()</code> or <code>gui.close()</code> to change this. <small>(<a target=\"_blank\" href=\"https://github.com/georgealways/gui/blob/master/src/GUI.js#L97\">GUI.js:97</a>)</small></p><a name=\"GUI#_hidden\"></a><h2>gui.<strong>_hidden</strong> : boolean</h2><p>Used to determine if the GUI is hidden. Use <code>gui.show()</code> or <code>gui.hide()</code> to change this. <small>(<a target=\"_blank\" href=\"https://github.com/georgealways/gui/blob/master/src/GUI.js#L103\">GUI.js:103</a>)</small></p><a name=\"GUI#_onChange\"></a><h2>gui.<strong>_onChange</strong> : function</h2><p>Used to access the function bound to <code>onChange</code> events. Don't modify this valuedirectly. Use the <code>gui.onChange( callback )</code> method instead. <small>(<a target=\"_blank\" href=\"https://github.com/georgealways/gui/blob/master/src/GUI.js#L522\">GUI.js:522</a>)</small></p><a name=\"GUI#_onFinishChange\"></a><h2>gui.<strong>_onFinishChange</strong> : function</h2><p>Used to access the function bound to <code>onFinishChange</code> events. Don't modify this valuedirectly. Use the <code>gui.onFinishChange( callback )</code> method instead. <small>(<a target=\"_blank\" href=\"https://github.com/georgealways/gui/blob/master/src/GUI.js#L560\">GUI.js:560</a>)</small></p><a name=\"GUI#_title\"></a><h2>gui.<strong>_title</strong> : string</h2><p>Current title of the GUI. Use <code>gui.title( 'Title' )</code> to modify this value. <small>(<a target=\"_blank\" href=\"https://github.com/georgealways/gui/blob/master/src/GUI.js#L488\">GUI.js:488</a>)</small></p><a name=\"Controller\"></a><h1>Controller (Class)</h1><a name=\"Controller#name\"></a><h2>controller.<strong>name</strong>( name )</h2><p>Sets the name of the controller and its label in the GUI. <small>(<a target=\"_blank\" href=\"https://github.com/georgealways/gui/blob/master/src/Controller.js#L102\">Controller.js:102</a>)</small></p><ul><li><strong>name</strong><br><small>Required:<code>string</code></small></li></ul><p><strong>Returns</strong>: <code>this</code></p><a name=\"Controller#onChange\"></a><h2>controller.<strong>onChange</strong>( callback )</h2><p>Pass a function to be called whenever the value is modified by this controller.The function receives the new value as its first parameter. The value of <code>this</code> will be thecontroller.</p><p>For function controllers, the <code>onChange</code> callback will be fired on click, after the functionexecutes. <small>(<a target=\"_blank\" href=\"https://github.com/georgealways/gui/blob/master/src/Controller.js#L129\">Controller.js:129</a>)</small></p><pre><code class=\"language-js\"><span class=\"hljs-keyword\">const</span> controller = gui.add( object, <span class=\"hljs-string\">&#x27;property&#x27;</span> );controller.onChange( <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"> v </span>) </span>{<span class=\"hljs-built_in\">console</span>.log( <span class=\"hljs-string\">&#x27;The value is now &#x27;</span> + v );<span class=\"hljs-built_in\">console</span>.assert( <span class=\"hljs-built_in\">this</span> === controller );} );</code></pre><ul><li><strong>callback</strong><br><small>Required:<code>function</code></small></li></ul><p><strong>Returns</strong>: <code>this</code></p><a name=\"Controller#onFinishChange\"></a><h2>controller.<strong>onFinishChange</strong>( callback )</h2><p>Pass a function to be called after this controller has been modified and loses focus. <small>(<a target=\"_blank\" href=\"https://github.com/georgealways/gui/blob/master/src/Controller.js#L167\">Controller.js:167</a>)</small></p><pre><code class=\"language-js\"><span class=\"hljs-keyword\">const</span> controller = gui.add( object, <span class=\"hljs-string\">&#x27;property&#x27;</span> );controller.onFinishChange( <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"> v </span>) </span>{<span class=\"hljs-built_in\">console</span>.log( <span class=\"hljs-string\">&#x27;Changes complete: &#x27;</span> + v );<span class=\"hljs-built_in\">console</span>.assert( <span class=\"hljs-built_in\">this</span> === controller );} );</code></pre><ul><li><strong>callback</strong><br><small>Required:<code>function</code></small></li></ul><p><strong>Returns</strong>: <code>this</code></p><a name=\"Controller#reset\"></a><h2>controller.<strong>reset</strong>()</h2><p>Sets the controller back to its initial value. <small>(<a target=\"_blank\" href=\"https://github.com/georgealways/gui/blob/master/src/Controller.js#L201\">Controller.js:201</a>)</small></p><p><strong>Returns</strong>: <code>this</code></p><a name=\"Controller#enable\"></a><h2>controller.<strong>enable</strong>( enabled=true )</h2><p>Enables this controller. <small>(<a target=\"_blank\" href=\"https://github.com/georgealways/gui/blob/master/src/Controller.js#L216\">Controller.js:216</a>)</small></p><pre><code class=\"language-js\">controller.enable();controller.enable( <span class=\"hljs-literal\">false</span> ); <span class=\"hljs-comment\">// disable</span>controller.enable( controller._disabled ); <span class=\"hljs-comment\">// toggle</span></code></pre><ul><li><strong>enabled</strong><br><small>Default: <code>true</code></small></li></ul><p><strong>Returns</strong>: <code>this</code></p><a name=\"Controller#disable\"></a><h2>controller.<strong>disable</strong>( disabled=true )</h2><p>Disables this controller. <small>(<a target=\"_blank\" href=\"https://github.com/georgealways/gui/blob/master/src/Controller.js#L229\">Controller.js:229</a>)</small></p><pre><code class=\"language-js\">controller.disable();controller.disable( <span class=\"hljs-literal\">false</span> ); <span class=\"hljs-comment\">// enable</span>controller.disable( !controller._disabled ); <span class=\"hljs-comment\">// toggle</span></code></pre><ul><li><strong>disabled</strong><br><small>Default: <code>true</code></small></li></ul><p><strong>Returns</strong>: <code>this</code></p><a name=\"Controller#show\"></a><h2>controller.<strong>show</strong>( show=true )</h2><p>Shows the Controller after it's been hidden. <small>(<a target=\"_blank\" href=\"https://github.com/georgealways/gui/blob/master/src/Controller.js#L251\">Controller.js:251</a>)</small></p><pre><code class=\"language-js\">controller.show();controller.show( <span class=\"hljs-literal\">false</span> ); <span class=\"hljs-comment\">// hide</span>controller.show( controller._hidden ); <span class=\"hljs-comment\">// toggle</span></code></pre><ul><li><strong>show</strong><br><small>Default: <code>true</code></small></li></ul><p><strong>Returns</strong>: <code>this</code></p><a name=\"Controller#hide\"></a><h2>controller.<strong>hide</strong>()</h2><p>Hides the Controller. <small>(<a target=\"_blank\" href=\"https://github.com/georgealways/gui/blob/master/src/Controller.js#L265\">Controller.js:265</a>)</small></p><p><strong>Returns</strong>: <code>this</code></p><a name=\"Controller#options\"></a><h2>controller.<strong>options</strong>( options )</h2><p>Changes this controller into a dropdown of options.</p><p>Calling this method on an option controller will simply update the options. However, if thiscontroller was not already an option controller, old references to this controller aredestroyed, and a new controller is added to the end of the GUI. <small>(<a target=\"_blank\" href=\"https://github.com/georgealways/gui/blob/master/src/Controller.js#L295\">Controller.js:295</a>)</small></p><pre><code class=\"language-js\"><span class=\"hljs-comment\">// safe usage</span>gui.add( obj, <span class=\"hljs-string\">&#x27;prop1&#x27;</span> ).options( [ <span class=\"hljs-string\">&#x27;a&#x27;</span>, <span class=\"hljs-string\">&#x27;b&#x27;</span>, <span class=\"hljs-string\">&#x27;c&#x27;</span> ] );gui.add( obj, <span class=\"hljs-string\">&#x27;prop2&#x27;</span> ).options( { <span class=\"hljs-attr\">Big</span>: <span class=\"hljs-number\">10</span>, <span class=\"hljs-attr\">Small</span>: <span class=\"hljs-number\">1</span> } );gui.add( obj, <span class=\"hljs-string\">&#x27;prop3&#x27;</span> );<span class=\"hljs-comment\">// danger</span><span class=\"hljs-keyword\">const</span> ctrl1 = gui.add( obj, <span class=\"hljs-string\">&#x27;prop1&#x27;</span> );gui.add( obj, <span class=\"hljs-string\">&#x27;prop2&#x27;</span> );<span class=\"hljs-comment\">// calling options out of order adds a new controller to the end...</span><span class=\"hljs-keyword\">const</span> ctrl2 = ctrl1.options( [ <span class=\"hljs-string\">&#x27;a&#x27;</span>, <span class=\"hljs-string\">&#x27;b&#x27;</span>, <span class=\"hljs-string\">&#x27;c&#x27;</span> ] );<span class=\"hljs-comment\">// ...and ctrl1 now references a controller that doesn&#x27;t exist</span>assert( ctrl2 !== ctrl1 )</code></pre><ul><li><strong>options</strong><br><small>Required:<code>object</code> or <code>Array</code></small></li></ul><p><strong>Returns</strong>: <code>Controller</code></p><a name=\"Controller#min\"></a><h2>controller.<strong>min</strong>( min )</h2><p>Sets the minimum value. Only works on number controllers. <small>(<a target=\"_blank\" href=\"https://github.com/georgealways/gui/blob/master/src/Controller.js#L308\">Controller.js:308</a>)</small></p><ul><li><strong>min</strong><br><small>Required:<code>number</code></small></li></ul><p><strong>Returns</strong>: <code>this</code></p><a name=\"Controller#max\"></a><h2>controller.<strong>max</strong>( max )</h2><p>Sets the maximum value. Only works on number controllers. <small>(<a target=\"_blank\" href=\"https://github.com/georgealways/gui/blob/master/src/Controller.js#L318\">Controller.js:318</a>)</small></p><ul><li><strong>max</strong><br><small>Required:<code>number</code></small></li></ul><p><strong>Returns</strong>: <code>this</code></p><a name=\"Controller#step\"></a><h2>controller.<strong>step</strong>( step )</h2><p>Values set by this controller will be rounded to multiples of <code>step</code>. Only works on numbercontrollers. <small>(<a target=\"_blank\" href=\"https://github.com/georgealways/gui/blob/master/src/Controller.js#L329\">Controller.js:329</a>)</small></p><ul><li><strong>step</strong><br><small>Required:<code>number</code></small></li></ul><p><strong>Returns</strong>: <code>this</code></p><a name=\"Controller#decimals\"></a><h2>controller.<strong>decimals</strong>( decimals )</h2><p>Rounds the displayed value to a fixed number of decimals, without affecting the actual valuelike <code>step()</code>. Only works on number controllers. <small>(<a target=\"_blank\" href=\"https://github.com/georgealways/gui/blob/master/src/Controller.js#L342\">Controller.js:342</a>)</small></p><pre><code class=\"language-js\">gui.add( object, <span class=\"hljs-string\">&#x27;property&#x27;</span> ).listen().decimals( <span class=\"hljs-number\">4</span> );</code></pre><ul><li><strong>decimals</strong><br><small>Required:<code>number</code></small></li></ul><p><strong>Returns</strong>: <code>this</code></p><a name=\"Controller#listen\"></a><h2>controller.<strong>listen</strong>( listen=true )</h2><p>Calls <code>updateDisplay()</code> every animation frame. Pass <code>false</code> to stop listening. <small>(<a target=\"_blank\" href=\"https://github.com/georgealways/gui/blob/master/src/Controller.js#L351\">Controller.js:351</a>)</small></p><ul><li><strong>listen</strong><br><small>Default: <code>true</code></small></li></ul><p><strong>Returns</strong>: <code>this</code></p><a name=\"Controller#getValue\"></a><h2>controller.<strong>getValue</strong>()</h2><p>Returns <code>object[ property ]</code>. <small>(<a target=\"_blank\" href=\"https://github.com/georgealways/gui/blob/master/src/Controller.js#L395\">Controller.js:395</a>)</small></p><p><strong>Returns</strong>: <code>any</code></p><a name=\"Controller#setValue\"></a><h2>controller.<strong>setValue</strong>( value )</h2><p>Sets the value of <code>object[ property ]</code>, invokes any <code>onChange</code> handlers and updates the display. <small>(<a target=\"_blank\" href=\"https://github.com/georgealways/gui/blob/master/src/Controller.js#L404\">Controller.js:404</a>)</small></p><ul><li><strong>value</strong><br><small>Required:<code>any</code></small></li></ul><p><strong>Returns</strong>: <code>this</code></p><a name=\"Controller#updateDisplay\"></a><h2>controller.<strong>updateDisplay</strong>()</h2><p>Updates the display to keep it in sync with the current value. Useful for updating yourcontrollers when their values have been modified outside of the GUI. <small>(<a target=\"_blank\" href=\"https://github.com/georgealways/gui/blob/master/src/Controller.js#L423\">Controller.js:423</a>)</small></p><p><strong>Returns</strong>: <code>this</code></p><a name=\"Controller#destroy\"></a><h2>controller.<strong>destroy</strong>()</h2><p>Destroys this controller and removes it from the parent GUI. <small>(<a target=\"_blank\" href=\"https://github.com/georgealways/gui/blob/master/src/Controller.js#L440\">Controller.js:440</a>)</small></p><a name=\"Controller#domElement\"></a><h2>controller.<strong>domElement</strong> : HTMLElement</h2><p>The outermost container DOM element for this controller. <small>(<a target=\"_blank\" href=\"https://github.com/georgealways/gui/blob/master/src/Controller.js#L52\">Controller.js:52</a>)</small></p><a name=\"Controller#initialValue\"></a><h2>controller.<strong>initialValue</strong> : any</h2><p>The value of <code>object[ property ]</code> when the controller was created. <small>(<a target=\"_blank\" href=\"https://github.com/georgealways/gui/blob/master/src/Controller.js#L46\">Controller.js:46</a>)</small></p><a name=\"Controller#object\"></a><h2>controller.<strong>object</strong> : object</h2><p>The object this controller will modify. <small>(<a target=\"_blank\" href=\"https://github.com/georgealways/gui/blob/master/src/Controller.js#L20\">Controller.js:20</a>)</small></p><a name=\"Controller#parent\"></a><h2>controller.<strong>parent</strong> : GUI</h2><p>The GUI that contains this controller. <small>(<a target=\"_blank\" href=\"https://github.com/georgealways/gui/blob/master/src/Controller.js#L14\">Controller.js:14</a>)</small></p><a name=\"Controller#property\"></a><h2>controller.<strong>property</strong> : string</h2><p>The name of the property to control. <small>(<a target=\"_blank\" href=\"https://github.com/georgealways/gui/blob/master/src/Controller.js#L26\">Controller.js:26</a>)</small></p><a name=\"Controller#$disable\"></a><h2>controller.<strong>$disable</strong> : HTMLElement</h2><p>The DOM element that receives the disabled attribute when using disable(). <small>(<a target=\"_blank\" href=\"https://github.com/georgealways/gui/blob/master/src/Controller.js#L77\">Controller.js:77</a>)</small></p><a name=\"Controller#$name\"></a><h2>controller.<strong>$name</strong> : HTMLElement</h2><p>The DOM element that contains the controller's name. <small>(<a target=\"_blank\" href=\"https://github.com/georgealways/gui/blob/master/src/Controller.js#L60\">Controller.js:60</a>)</small></p><a name=\"Controller#$widget\"></a><h2>controller.<strong>$widget</strong> : HTMLElement</h2><p>The DOM element that contains the controller's &quot;widget&quot; (which differs by controller type). <small>(<a target=\"_blank\" href=\"https://github.com/georgealways/gui/blob/master/src/Controller.js#L70\">Controller.js:70</a>)</small></p><a name=\"Controller#_disabled\"></a><h2>controller.<strong>_disabled</strong> : boolean</h2><p>Used to determine if the controller is disabled.Use <code>controller.disable( true|false )</code> to modify this value. <small>(<a target=\"_blank\" href=\"https://github.com/georgealways/gui/blob/master/src/Controller.js#L33\">Controller.js:33</a>)</small></p><a name=\"Controller#_hidden\"></a><h2>controller.<strong>_hidden</strong> : boolean</h2><p>Used to determine if the Controller is hidden.Use <code>controller.show()</code> or <code>controller.hide()</code> to change this. <small>(<a target=\"_blank\" href=\"https://github.com/georgealways/gui/blob/master/src/Controller.js#L40\">Controller.js:40</a>)</small></p><a name=\"Controller#_listening\"></a><h2>controller.<strong>_listening</strong> : boolean</h2><p>Used to determine if the controller is currently listening. Don't modify this valuedirectly. Use the <code>controller.listen( true|false )</code> method instead. <small>(<a target=\"_blank\" href=\"https://github.com/georgealways/gui/blob/master/src/Controller.js#L358\">Controller.js:358</a>)</small></p><a name=\"Controller#_name\"></a><h2>controller.<strong>_name</strong> : string</h2><p>The controller's name. Use <code>controller.name( 'Name' )</code> to modify this value. <small>(<a target=\"_blank\" href=\"https://github.com/georgealways/gui/blob/master/src/Controller.js#L107\">Controller.js:107</a>)</small></p><a name=\"Controller#_onChange\"></a><h2>controller.<strong>_onChange</strong> : function</h2><p>Used to access the function bound to <code>onChange</code> events. Don't modify this value directly.Use the <code>controller.onChange( callback )</code> method instead. <small>(<a target=\"_blank\" href=\"https://github.com/georgealways/gui/blob/master/src/Controller.js#L135\">Controller.js:135</a>)</small></p><a name=\"Controller#_onFinishChange\"></a><h2>controller.<strong>_onFinishChange</strong> : function</h2><p>Used to access the function bound to <code>onFinishChange</code> events. Don't modify this valuedirectly. Use the <code>controller.onFinishChange( callback )</code> method instead. <small>(<a target=\"_blank\" href=\"https://github.com/georgealways/gui/blob/master/src/Controller.js#L173\">Controller.js:173</a>)</small></p></section></main></div></body></html>",
  "embeddings": []
}
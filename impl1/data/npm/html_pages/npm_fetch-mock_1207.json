{
  "libtype": "npm",
  "libname": "fetch-mock",
  "url": "http://www.wheresrhys.co.uk/fetch-mock",
  "html": "<!DOCTYPE html><html lang=\"en\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"initial-scale=1.0, minimum-scale=1.0, maximum-scale=1.0, user-scalable=no\"><!-- Begin Jekyll SEO tag v2.8.0 --><title>API Docs | fetch-mock</title><meta name=\"generator\" content=\"Jekyll v3.9.3\" /><meta property=\"og:title\" content=\"API Docs\" /><meta property=\"og:locale\" content=\"en_US\" /><meta name=\"description\" content=\"Mock http requests using fetch\" /><meta property=\"og:description\" content=\"Mock http requests using fetch\" /><link rel=\"canonical\" href=\"https://www.wheresrhys.co.uk/fetch-mock-docs-workspace/fetch-mock/\" /><meta property=\"og:url\" content=\"https://www.wheresrhys.co.uk/fetch-mock-docs-workspace/fetch-mock/\" /><meta property=\"og:site_name\" content=\"fetch-mock\" /><meta property=\"og:type\" content=\"website\" /><meta name=\"twitter:card\" content=\"summary\" /><meta property=\"twitter:title\" content=\"API Docs\" /><script type=\"application/ld+json\">{\"@context\":\"https://schema.org\",\"@type\":\"WebSite\",\"description\":\"Mock http requests using fetch\",\"headline\":\"API Docs\",\"name\":\"fetch-mock\",\"url\":\"https://www.wheresrhys.co.uk/fetch-mock-docs-workspace/fetch-mock/\"}</script><!-- End Jekyll SEO tag --><link rel=\"stylesheet\" href=\"/fetch-mock/css/style.css\"><link rel=\"icon\" type=\"image/png\" href=\"/favicon.png\"><script>window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;ga('create', '', 'auto');ga('send', 'pageview');</script><script async src='https://www.google-analytics.com/analytics.js'></script><script src=\"https://ajax.googleapis.com/ajax/libs/jquery/1.11.2/jquery.min.js\"></script><script src=\"/fetch-mock/js/main.js\"></script></head><body><div class=\"navigation\"><header><h1 class=\"site-title\"><button type=\"button\" class=\"open-nav\" id=\"open-nav\"></button><a href=\"/fetch-mock/\"><span>fetch</span><span>-</span><span>mock</span></a></h1></header><nav><section><h1>About</h1><ul><li><a href=\"#aboutintroduction\">Introduction</a></li><li><a href=\"#aboutquickstart\">Quickstart</a></li><li><a href=\"#aboutprevious-versions\">Previous versions</a></li><li><a href=\"https://github.com/wheresrhys/fetch-mock/blob/master/docs/cheatsheet.md\">Cheatsheet</a></li><li><a class=\"github-link\" href=\"https://github.com/wheresrhys/fetch-mock\">Github project</a></li><li><a href=\"/\">Blog</a></li><li><a href=\"https://www.refugeesupport.eu/donate/\">Donate</a></li></ul></section><section><h1>Usage</h1><ul><li><a href=\"#usagerequirements\">Requirements</a></li><li><a href=\"#usageinstallation\">Installation</a></li><li class=\"parameter\"><a href=\"#usageglobal-non-global\">Global or non-global</a></li><li class=\"parameter\"><a href=\"#usageimporting\">Importing the correct version</a></li><li class=\"parameter\"><a href=\"#usagepolyfilling\">Polyfilling fetch</a></li><li class=\"parameter\"><a href=\"#usagecustom-classes\">Custom subclasses</a></li><li class=\"parameter\"><a href=\"#usageusage-with-jest\">Usage with Jest</a></li><li><a href=\"#usageconfiguration\">Configuration</a></li><li><a href=\"#usagedebug-mode\">Debugging</a></li></ul></section><section><h1>Mocking API</h1><ul><li><a href=\"#api-mockingmock\">.mock()</a></li><li class=\"parameter\"><a href=\"#api-mockingmock_matcher\">matcher<span class=\"endpoint parameter\"></span></a></li><li class=\"parameter\"><a href=\"#api-mockingmock_response\">response<span class=\"endpoint parameter\"></span></a></li><li class=\"parameter\"><a href=\"#api-mockingmock_options\">options<span class=\"endpoint parameter\"></span></a></li><li><a href=\"#api-mockingget_post\">.get(), .post() ...</a></li><li><a href=\"#api-mockingmock_once\">.once()</a></li><li><a href=\"#api-mockingmock_sticky\">.sticky()</a></li><li><a href=\"#api-mockingmock_any\">.any()</a></li><li><a href=\"#api-mockingcombined-shorthands\">... more shorthands</a></li><li><a href=\"#api-mockingcatch\">.catch()</a></li><li><a href=\"#api-mockingadd-matcher\">.addMatcher()</a></li><li><a href=\"#api-mockingspy\">.spy()</a></li><li><a href=\"#api-mockingcookies\">cookies</a></li></ul></section><section><h1>Inspection methods</h1><ul><li><a href=\"#api-inspectionfundamentals\">Inspection fundamentals</a></li><li><a href=\"#api-inspectioncalled\">.called()</a></li><li><a href=\"#api-inspectioncalls\">.calls()</a></li><li><a href=\"#api-inspectionlastCall\">.lastCall()</a></li><li><a href=\"#api-inspectionlastUrl\">.lastUrl()</a></li><li><a href=\"#api-inspectionlastOptions\">.lastOptions()</a></li><li><a href=\"#api-inspectionlastResponse\">.lastResponse()</a></li><li><a href=\"#api-inspectiondone\">.done()</a></li></ul></section><section><h1>Lifecycle methods</h1><ul><li><a href=\"#api-lifecyclesandbox\">.sandbox()</a></li><li><a href=\"#api-lifecycleflush\">.flush()</a></li><li><a href=\"#api-lifecyclerestore_reset\">.restore(), .reset()</a></li><li><a href=\"#api-lifecycleresetHistory\">.resetHistory()</a></li><li><a href=\"#api-lifecycleresetBehavior\">.resetBehavior()</a></li></ul></section><section><h1>Troubleshooting</h1><ul><li><a href=\"#troubleshootingtroubleshooting\">General</a></li></ul></section></nav></div><main><div class=\"docs\"></div><div class=\"docs\"><section><h3><a id=\"aboutintroduction\">Introduction</a></h3><div class=\"types-zone\"></div><p>fetch-mock allows mocking http requests made using <a href=\"https://fetch.spec.whatwg.org/\">fetch</a> or a library imitating its api, such as <a href=\"https://www.npmjs.com/package/node-fetch\">node-fetch</a> or <a href=\"https://www.npmjs.com/package/fetch-ponyfill\">fetch-ponyfill</a>.</p><p>It supports most JavaScript environments, including Node.js, web workers, service workers, and any browser that either supports <code class=\"language-plaintext highlighter-rouge\">fetch</code> natively or that can have a <code class=\"language-plaintext highlighter-rouge\">fetch</code> polyfill installed.</p><p>As well as shorthand methods for the simplest use cases, it offers a flexible API for customising all aspects of mocking behaviour.</p><div class=\"code-blocks\"><div title=\"Example\" class=\"language-javascript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nx\">fetchMock</span><span class=\"p\">.</span><span class=\"nx\">mock</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">http://example.com</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"mi\">200</span><span class=\"p\">);</span><span class=\"kd\">const</span> <span class=\"nx\">res</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"nx\">fetch</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">http://example.com</span><span class=\"dl\">'</span><span class=\"p\">);</span><span class=\"nx\">assert</span><span class=\"p\">(</span><span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">ok</span><span class=\"p\">);</span><span class=\"nx\">fetchMock</span><span class=\"p\">.</span><span class=\"nx\">restore</span><span class=\"p\">();</span></code></pre></div></div></div></section><section><h3><a id=\"aboutquickstart\">Quickstart</a></h3><div class=\"types-zone\"></div><h4 id=\"setting-up-your-mock\">Setting up your mock</h4><ul>  <li>The commonest use case is <code class=\"language-plaintext highlighter-rouge\">fetchMock.mock(matcher, response)</code>, where <code class=\"language-plaintext highlighter-rouge\">matcher</code> is an exact url or regex to match, and <code class=\"language-plaintext highlighter-rouge\">response</code> is a status code, string or object literal.</li>  <li>You can also use <code class=\"language-plaintext highlighter-rouge\">fetchMock.once()</code> to limit to a single call or <code class=\"language-plaintext highlighter-rouge\">fetchMock.get()</code>, <code class=\"language-plaintext highlighter-rouge\">fetchMock.post()</code> etc. to limit to a method.</li>  <li>All these methods are chainable so you can easily define several mocks in a single test.</li></ul><div class=\"language-javascript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nx\">fetchMock</span>  <span class=\"p\">.</span><span class=\"kd\">get</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">http://good.com/</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"mi\">200</span><span class=\"p\">)</span>  <span class=\"p\">.</span><span class=\"nx\">post</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">http://good.com/</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"mi\">400</span><span class=\"p\">)</span>  <span class=\"p\">.</span><span class=\"kd\">get</span><span class=\"p\">(</span><span class=\"sr\">/bad</span><span class=\"se\">\\.</span><span class=\"sr\">com/</span><span class=\"p\">,</span> <span class=\"mi\">500</span><span class=\"p\">)</span></code></pre></div></div><h4 id=\"analysing-calls-to-your-mock\">Analysing calls to your mock</h4><ul>  <li><code class=\"language-plaintext highlighter-rouge\">fetchMock.called(matcher)</code> reports if any calls matched your mock (or leave <code class=\"language-plaintext highlighter-rouge\">matcher</code> out if you just want to check <code class=\"language-plaintext highlighter-rouge\">fetch</code> was called at all).</li>  <li><code class=\"language-plaintext highlighter-rouge\">fetchMock.lastCall()</code>, <code class=\"language-plaintext highlighter-rouge\">fetchMock.lastUrl()</code> or <code class=\"language-plaintext highlighter-rouge\">fetchMock.lastOptions()</code> give you access to the parameters last passed in to <code class=\"language-plaintext highlighter-rouge\">fetch</code>.</li>  <li><code class=\"language-plaintext highlighter-rouge\">fetchMock.done()</code> will tell you if <code class=\"language-plaintext highlighter-rouge\">fetch</code> was called the expected number of times.</li></ul><h4 id=\"tearing-down-your-mock\">Tearing down your mock</h4><ul>  <li><code class=\"language-plaintext highlighter-rouge\">fetchMock.resetHistory()</code> resets the call history.</li>  <li><code class=\"language-plaintext highlighter-rouge\">fetchMock.reset()</code> or <code class=\"language-plaintext highlighter-rouge\">fetchMock.restore()</code> will also restore <code class=\"language-plaintext highlighter-rouge\">fetch()</code> to its native implementation</li></ul><h4 id=\"example\">Example</h4><p>Example with Node.js: suppose we have a file <code class=\"language-plaintext highlighter-rouge\">make-request.js</code> with a function that calls <code class=\"language-plaintext highlighter-rouge\">fetch</code>:</p><div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">isomorphic-fetch</span><span class=\"dl\">'</span><span class=\"p\">);</span><span class=\"nx\">module</span><span class=\"p\">.</span><span class=\"nx\">exports</span> <span class=\"o\">=</span> <span class=\"kd\">function</span> <span class=\"nx\">makeRequest</span><span class=\"p\">()</span> <span class=\"p\">{</span>  <span class=\"k\">return</span> <span class=\"nx\">fetch</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">http://httpbin.org/my-url</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"p\">{</span>    <span class=\"na\">headers</span><span class=\"p\">:</span> <span class=\"p\">{</span>      <span class=\"na\">user</span><span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">me</span><span class=\"dl\">'</span>    <span class=\"p\">}</span>  <span class=\"p\">}).</span><span class=\"nx\">then</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">response</span><span class=\"p\">)</span> <span class=\"p\">{</span>    <span class=\"k\">return</span> <span class=\"nx\">response</span><span class=\"p\">.</span><span class=\"nx\">json</span><span class=\"p\">();</span>  <span class=\"p\">});</span><span class=\"p\">};</span></code></pre></div></div><p>We can use fetch-mock to mock <code class=\"language-plaintext highlighter-rouge\">fetch</code>. In <code class=\"language-plaintext highlighter-rouge\">mocked.js</code>:</p><div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">var</span> <span class=\"nx\">makeRequest</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">./make-request</span><span class=\"dl\">'</span><span class=\"p\">);</span><span class=\"kd\">var</span> <span class=\"nx\">fetchMock</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">fetch-mock</span><span class=\"dl\">'</span><span class=\"p\">);</span><span class=\"c1\">// Mock the fetch() global to return a response </span><span class=\"nx\">fetchMock</span><span class=\"p\">.</span><span class=\"kd\">get</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">http://httpbin.org/my-url</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"p\">{</span> <span class=\"na\">hello</span><span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">world</span><span class=\"dl\">'</span> <span class=\"p\">},</span> <span class=\"p\">{</span>  <span class=\"na\">delay</span><span class=\"p\">:</span> <span class=\"mi\">1000</span><span class=\"p\">,</span> <span class=\"c1\">// fake a slow network</span>  <span class=\"na\">headers</span><span class=\"p\">:</span> <span class=\"p\">{</span>    <span class=\"na\">user</span><span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">me</span><span class=\"dl\">'</span> <span class=\"c1\">// only match requests with certain headers</span>  <span class=\"p\">}</span><span class=\"p\">});</span><span class=\"nx\">makeRequest</span><span class=\"p\">().</span><span class=\"nx\">then</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">data</span><span class=\"p\">)</span> <span class=\"p\">{</span>  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">got data</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"nx\">data</span><span class=\"p\">);</span><span class=\"p\">});</span><span class=\"c1\">// Unmock.</span><span class=\"nx\">fetchMock</span><span class=\"p\">.</span><span class=\"nx\">reset</span><span class=\"p\">();</span></code></pre></div></div><p>Result:</p><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nv\">$ </span>node mocked.js<span class=\"s1\">'got data'</span> <span class=\"o\">{</span> hello: <span class=\"s1\">'world'</span> <span class=\"o\">}</span></code></pre></div></div></section><section><h3><a id=\"aboutprevious-versions\">Previous versions</a></h3><div class=\"types-zone\"></div><p>v7, v8 &amp; v9 are practically identical, only differing in their treatment of a few edge cases, or in compatibility with other libraries and environments. For clarity, each section of the documentation tells you which version a feature was added with a <small class=\"version-added\">version</small> label.</p><p>For previous versions follow the documentation below:</p><ul>  <li><a href=\"https://github.com/wheresrhys/fetch-mock/blob/master/docs/v6-v7-upgrade-guide.md\">v7 upgrade guide</a></li>  <li><a href=\"https://github.com/wheresrhys/fetch-mock/tree/4231044aa94e234b53e296181ca5b6b4cecb6e3f/docs\">v6 docs</a></li>  <li><a href=\"https://github.com/wheresrhys/fetch-mock/tree/b8270640d5711feffb01d1bf85bb7da95179c4de/docs\">v5 docs</a></li></ul></section></div><div class=\"docs\"><h2>Usage</h2><section><h3><a id=\"usagerequirements\">Requirements</a></h3><div class=\"types-zone\"></div><p>fetch-mock requires the following to run:</p><ul>  <li><a href=\"https://Node.js.org/\">Node.js</a> 8+ for full feature operation</li>  <li><a href=\"https://Node.js.org/\">Node.js</a> 0.12+ with <a href=\"http://www.wheresrhys.co.uk/fetch-mock/installation\">limitations</a></li>  <li><a href=\"https://www.npmjs.com/package/npm\">npm</a> (normally comes with Node.js)</li>  <li>Either    <ul>      <li><a href=\"https://www.npmjs.com/package/node-fetch\">node-fetch</a> when testing in Node.js. To allow users a choice over which version to use, <code class=\"language-plaintext highlighter-rouge\">node-fetch</code> is not included as a dependency of <code class=\"language-plaintext highlighter-rouge\">fetch-mock</code>.</li>      <li>A browser that supports the <code class=\"language-plaintext highlighter-rouge\">fetch</code> API either natively or via a <a href=\"https://ponyfoo.com/articles/polyfills-or-ponyfills\">polyfill/ponyfill</a></li>    </ul>  </li></ul><p class=\"info\">Check out the new <a href=\"https://github.com/wheresrhys/fetch-mock/blob/master/docs/cheatsheet.md\">cheatsheet</a></p></section><section><h3><a id=\"usageinstallation\">Installation</a></h3><div class=\"types-zone\"></div><p>Install fetch-mock using</p><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>npm <span class=\"nb\">install</span> <span class=\"nt\">--save-dev</span> fetch-mock</code></pre></div></div><p>fetch-mock supports both <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Modules\">ES modules</a> and <a href=\"https://requirejs.org/docs/commonjs.html\">commonjs</a>. The following should work in most environments. Check the <a href=\"#usageimporting\">importing the correct version</a> section of the docs if you experience problems.</p><h2 id=\"es-modules\">ES modules</h2><div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">import</span> <span class=\"nx\">fetchMock</span> <span class=\"k\">from</span> <span class=\"dl\">'</span><span class=\"s1\">fetch-mock</span><span class=\"dl\">'</span><span class=\"p\">;</span></code></pre></div></div><h2 id=\"commonjs\">Commonjs</h2><div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">const</span> <span class=\"nx\">fetchMock</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">fetch-mock</span><span class=\"dl\">'</span><span class=\"p\">);</span></code></pre></div></div></section><section><h3><a id=\"usageglobal-non-global\">Global or non-global</a></h3><div class=\"types-zone\"></div><p class=\"warning\"><code class=\"language-plaintext highlighter-rouge\">fetch</code> can be used by your code globally or locally. It\u2019s important to determine which one applies to your codebase as it will impact how you use <code class=\"language-plaintext highlighter-rouge\">fetch-mock</code></p><h4 id=\"global-fetch\">Global fetch</h4><p>In the following scenarios <code class=\"language-plaintext highlighter-rouge\">fetch</code> will be a global</p><ul>  <li>When using native <code class=\"language-plaintext highlighter-rouge\">fetch</code> (or a polyfill) in the browser</li>  <li>When <code class=\"language-plaintext highlighter-rouge\">node-fetch</code> has been assigned to <code class=\"language-plaintext highlighter-rouge\">global</code> in your Node.js process (a pattern sometimes used in isomorphic codebases)</li></ul><p>By default fetch-mock assumes <code class=\"language-plaintext highlighter-rouge\">fetch</code> is a global so no more setup is required once you\u2019ve required <code class=\"language-plaintext highlighter-rouge\">fetch-mock</code>.</p><h4 id=\"non-global-fetch-library\">Non-global fetch library</h4><p>In the following scenarios <code class=\"language-plaintext highlighter-rouge\">fetch</code> will not be a global</p><ul>  <li>Using <a href=\"https://www.npmjs.com/package/node-fetch\">node-fetch</a> in Node.js without assigning to <code class=\"language-plaintext highlighter-rouge\">global</code></li>  <li>Using <a href=\"https://www.npmjs.com/package/fetch-ponyfill\">fetch-ponyfill</a> in the browser</li>  <li>Using libraries which use fetch-ponyfill internally</li>  <li>Some build setups result in a non-global <code class=\"language-plaintext highlighter-rouge\">fetch</code>, though it may not always be obvious that this is the case</li></ul><p>The <code class=\"language-plaintext highlighter-rouge\">sandbox()</code> method returns a function that can be used as a drop-in replacement for <code class=\"language-plaintext highlighter-rouge\">fetch</code>. Pass this into your mocking library of choice. The function returned by <code class=\"language-plaintext highlighter-rouge\">sandbox()</code> has all the methods of <code class=\"language-plaintext highlighter-rouge\">fetch-mock</code> exposed on it, e.g.</p><div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">const</span> <span class=\"nx\">fetchMock</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">fetch-mock</span><span class=\"dl\">'</span><span class=\"p\">);</span><span class=\"kd\">const</span> <span class=\"nx\">myMock</span> <span class=\"o\">=</span> <span class=\"nx\">fetchMock</span><span class=\"p\">.</span><span class=\"nx\">sandbox</span><span class=\"p\">().</span><span class=\"nx\">mock</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">/home</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"mi\">200</span><span class=\"p\">);</span><span class=\"c1\">// pass myMock in to your application code, instead of fetch, run it, then...</span><span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">myMock</span><span class=\"p\">.</span><span class=\"nx\">called</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">/home</span><span class=\"dl\">'</span><span class=\"p\">)).</span><span class=\"nx\">to</span><span class=\"p\">.</span><span class=\"nx\">be</span><span class=\"p\">.</span><span class=\"kc\">true</span><span class=\"p\">;</span></code></pre></div></div></section><section><h3><a id=\"usageimporting\">Importing the correct version</a></h3><div class=\"types-zone\"></div><p>The JS ecosystem is in a transitional period between module systems, and there are also a number of different build tools available, all with their own idosyncratic opinions about how JS should be compiled. The following detail may help debug any problems, and a few known workarounds are listed below.</p><h4 id=\"built-files\">Built files</h4><p>In general <code class=\"language-plaintext highlighter-rouge\">server</code> refers to the version of the source code designed for running in nodejs, whereas <code class=\"language-plaintext highlighter-rouge\">client</code> refers to the version designed to run in the browser. As well as this distinction, fetch-mock builds several versions of itself:</p><ul>  <li><code class=\"language-plaintext highlighter-rouge\">/cjs</code> directory - this contains a copy of the source files (which are currently written as commonjs modules). They are copied here in order to prevent direct requires from <code class=\"language-plaintext highlighter-rouge\">/src</code>, which could make migrating the src to ES modules troublesome. <code class=\"language-plaintext highlighter-rouge\">client.js</code> and <code class=\"language-plaintext highlighter-rouge\">server.js</code> are the entry points. The directory also contains a <code class=\"language-plaintext highlighter-rouge\">package.json</code> file specifying that the directory contains commonjs modules.</li>  <li><code class=\"language-plaintext highlighter-rouge\">/esm</code> directory - This contains builds of fetch-mock, exported as ES modules. <code class=\"language-plaintext highlighter-rouge\">client.js</code> and <code class=\"language-plaintext highlighter-rouge\">server.js</code> are the entry points. The bundling tool used is <a href=\"https://rollupjs.org\">rollup</a>.</li>  <li><code class=\"language-plaintext highlighter-rouge\">/es5</code> directory - This contains builds of fetch-mock which do not use any JS syntax not included in the <a href=\"https://es5.github.io/\">ES5 standard</a>, i.e. excludes recent additions to the language. It contains 4 entry points:    <ul>      <li><code class=\"language-plaintext highlighter-rouge\">client.js</code> and <code class=\"language-plaintext highlighter-rouge\">server.js</code>, both of which are commonjs modules</li>      <li><code class=\"language-plaintext highlighter-rouge\">client-legacy.js</code>, which is the same as <code class=\"language-plaintext highlighter-rouge\">client.js</code>, but includes some babel polyfill bootstrapping to ease running it in older environments</li>      <li><code class=\"language-plaintext highlighter-rouge\">client-bundle.js</code>, <code class=\"language-plaintext highlighter-rouge\">client-legacy-bundle.js</code>, which are standalone <a href=\"https://github.com/umdjs/umd\">UMD</a> bundles of the es5 client code that can be included in the browser using an ordinary script tag. The bundling tool used is <a href=\"https://rollupjs.org\">rollup</a>.</li>    </ul>  </li></ul><h4 id=\"importing-the-right-file\">Importing the right file</h4><p>The package.json file references a selection of the above built files:</p><div class=\"language-json highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"p\">{</span><span class=\"w\">  </span><span class=\"nl\">\"main\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"./cjs/server.js\"</span><span class=\"p\">,</span><span class=\"w\">  </span><span class=\"nl\">\"browser\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"./esm/client.js\"</span><span class=\"p\">,</span><span class=\"w\">  </span><span class=\"nl\">\"module\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"./esm/server.js\"</span><span class=\"p\">,</span><span class=\"w\"></span><span class=\"p\">}</span><span class=\"w\"></span></code></pre></div></div><p>These are intended to target the most common use cases at the moment:</p><ul>  <li>nodejs using commonjs</li>  <li>nodejs using ES modules</li>  <li>bundling tools such as webpack</li></ul><p>In most cases, your environment &amp; tooling will use the config in package.json to import the correct file when you <code class=\"language-plaintext highlighter-rouge\">import</code> or <code class=\"language-plaintext highlighter-rouge\">require</code> <code class=\"language-plaintext highlighter-rouge\">fetch-mock</code> by its name only.</p><p>However, <code class=\"language-plaintext highlighter-rouge\">import</code>/<code class=\"language-plaintext highlighter-rouge\">require</code> will sometimes get it wrong. Below are a few scenarios where you may need to directly reference a different entry point.</p><ul>  <li>If your client-side code or tests do not use a loader that respects the <code class=\"language-plaintext highlighter-rouge\">browser</code> field of <code class=\"language-plaintext highlighter-rouge\">package.json</code> use <code class=\"language-plaintext highlighter-rouge\">require('fetch-mock/es5/client')</code> or <code class=\"language-plaintext highlighter-rouge\">import fetchMock from 'fetch-mock/esm/client'</code>.</li>  <li>When not using any bundler in the browser, use one of the following as the src of a script tag: <code class=\"language-plaintext highlighter-rouge\">node_modules/fetch-mock/es5/client-bundle.js</code>, <code class=\"language-plaintext highlighter-rouge\">node_modules/fetch-mock/es5/client-legacy-bundle.js</code>. This loads fetch-mock into the <code class=\"language-plaintext highlighter-rouge\">fetchMock</code> global variable.</li>  <li>For Node.js 6 or lower use <code class=\"language-plaintext highlighter-rouge\">require('fetch-mock/es5/server')</code></li></ul></section><section><h3><a id=\"usagepolyfilling\">Polyfilling fetch</a></h3><div class=\"types-zone\"></div><p>Many older browsers require polyfilling the <code class=\"language-plaintext highlighter-rouge\">fetch</code> global. The following approaches can be used:</p><ul>  <li>    <p>Add the following <a href=\"https://polyfill.io/v2/docs/\">polyfill.io</a> script to your test page <br /><code class=\"language-plaintext highlighter-rouge\">&lt;script src=\"https://polyfill.io/v2/polyfill?features=fetch\"&gt;&lt;/script&gt;</code></p>  </li>  <li>    <p><code class=\"language-plaintext highlighter-rouge\">npm install whatwg-fetch</code> and load <code class=\"language-plaintext highlighter-rouge\">./node_modules/whatwg-fetch/fetch.js</code> into the page, either in a script tag or by referencing in your test runner config.</p>  </li></ul></section><section><h3><a id=\"usagecustom-classes\">Custom subclasses</a><small class=\"version-added\" title=\"Added in version 5.9.0\">v5.9.0</small></h3><div class=\"types-zone\"></div><p><code class=\"language-plaintext highlighter-rouge\">fetch-mock</code> uses <code class=\"language-plaintext highlighter-rouge\">Request</code>, <code class=\"language-plaintext highlighter-rouge\">Response</code> and <code class=\"language-plaintext highlighter-rouge\">Headers</code> constructors internally, and obtains these from <code class=\"language-plaintext highlighter-rouge\">node-fetch</code> in Node.js, or <code class=\"language-plaintext highlighter-rouge\">window</code> in the browser. If you are using an alternative implementation of <code class=\"language-plaintext highlighter-rouge\">fetch</code> you will need to configure <code class=\"language-plaintext highlighter-rouge\">fetch-mock</code> to use its implementations of these constructors instead. These should be set on the <code class=\"language-plaintext highlighter-rouge\">fetchMock.config</code> object, e.g.</p><div class=\"language-javascript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">const</span> <span class=\"nx\">ponyfill</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">fetch-ponyfill</span><span class=\"dl\">'</span><span class=\"p\">)();</span><span class=\"nb\">Object</span><span class=\"p\">.</span><span class=\"nx\">assign</span><span class=\"p\">(</span><span class=\"nx\">fetchMock</span><span class=\"p\">.</span><span class=\"nx\">config</span><span class=\"p\">,</span> <span class=\"p\">{</span>    <span class=\"na\">Headers</span><span class=\"p\">:</span> <span class=\"nx\">ponyfill</span><span class=\"p\">.</span><span class=\"nx\">Headers</span><span class=\"p\">,</span>    <span class=\"na\">Request</span><span class=\"p\">:</span> <span class=\"nx\">ponyfill</span><span class=\"p\">.</span><span class=\"nx\">Request</span><span class=\"p\">,</span>    <span class=\"na\">Response</span><span class=\"p\">:</span> <span class=\"nx\">ponyfill</span><span class=\"p\">.</span><span class=\"nx\">Response</span><span class=\"p\">,</span>    <span class=\"na\">fetch</span><span class=\"p\">:</span> <span class=\"nx\">ponyfill</span><span class=\"p\">})</span></code></pre></div></div></section><section><h3><a id=\"usageusage-with-jest\">Usage with Jest</a></h3><div class=\"types-zone\"></div><p class=\"info\">Please try out the new jest-friendly wrapper for fetch-mock, <a href=\"https://github.com/wheresrhys/fetch-mock-jest\">fetch-mock-jest</a>, and <a href=\"https://github.com/wheresrhys/fetch-mock-jest/issues\">feedback</a></p><p>Jest has rapidly become a very popular, full-featured testing library. Usage of fetch-mock with Jest is sufficiently different to previous libraries that it deserves some examples of its own:</p><p>If using global <code class=\"language-plaintext highlighter-rouge\">fetch</code>, then no special treatment is required.</p><p>For non-global uses of <code class=\"language-plaintext highlighter-rouge\">node-fetch</code> use something like:</p><div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nx\">jest</span><span class=\"p\">.</span><span class=\"nx\">mock</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">node-fetch</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">fetch-mock</span><span class=\"dl\">'</span><span class=\"p\">).</span><span class=\"nx\">sandbox</span><span class=\"p\">())</span></code></pre></div></div><p>if you need to fallback to the network (or have some other use case for giving <code class=\"language-plaintext highlighter-rouge\">fetch-mock</code> <a href=\"#usagecustom-classes\">access to <code class=\"language-plaintext highlighter-rouge\">node-fetch</code> internals</a> you will need to use <code class=\"language-plaintext highlighter-rouge\">jest.requireActual('node-fetch')</code>, e.g.</p><div class=\"language-javascript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nx\">jest</span><span class=\"p\">.</span><span class=\"nx\">mock</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">node-fetch</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>  <span class=\"kd\">const</span> <span class=\"nx\">nodeFetch</span> <span class=\"o\">=</span> <span class=\"nx\">jest</span><span class=\"p\">.</span><span class=\"nx\">requireActual</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">node-fetch</span><span class=\"dl\">'</span><span class=\"p\">);</span>  <span class=\"kd\">const</span> <span class=\"nx\">fetchMock</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">fetch-mock</span><span class=\"dl\">'</span><span class=\"p\">).</span><span class=\"nx\">sandbox</span><span class=\"p\">();</span>  <span class=\"nb\">Object</span><span class=\"p\">.</span><span class=\"nx\">assign</span><span class=\"p\">(</span><span class=\"nx\">fetchMock</span><span class=\"p\">.</span><span class=\"nx\">config</span><span class=\"p\">,</span> <span class=\"p\">{</span>    <span class=\"na\">fetch</span><span class=\"p\">:</span> <span class=\"nx\">nodeFetch</span>  <span class=\"p\">});</span>  <span class=\"k\">return</span> <span class=\"nx\">fetchMock</span><span class=\"p\">;</span><span class=\"p\">})</span></code></pre></div></div><p>The content of the above function (exporting <code class=\"language-plaintext highlighter-rouge\">fetchMock</code>) can also be used in a <a href=\"https://jestjs.io/docs/en/manual-mocks\">manual mock</a>.</p><p>Once mocked, you should require <code class=\"language-plaintext highlighter-rouge\">node-fetch</code>, <em>not</em> <code class=\"language-plaintext highlighter-rouge\">fetch-mock</code>, in your test files - all the <code class=\"language-plaintext highlighter-rouge\">fetch-mock</code> methods will be available on it.</p><p>When using a webpack based compilation step, something like the following may be necessary instead</p><div class=\"language-javascript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">const</span> <span class=\"nx\">fetchMock</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">fetch-mock</span><span class=\"dl\">'</span><span class=\"p\">).</span><span class=\"nx\">sandbox</span><span class=\"p\">();</span><span class=\"kd\">const</span> <span class=\"nx\">nodeFetch</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">node-fetch</span><span class=\"dl\">'</span><span class=\"p\">);</span><span class=\"nx\">nodeFetch</span><span class=\"p\">.</span><span class=\"k\">default</span> <span class=\"o\">=</span> <span class=\"nx\">fetchMock</span><span class=\"p\">;</span></code></pre></div></div></section><section><h3><a id=\"usageconfiguration\">Configuration</a><small class=\"version-added\" title=\"Added in version 6.0.0\">v6.0.0</small></h3><div class=\"types-zone\"></div><p class=\"description\"><p>On any <code class=\"language-plaintext highlighter-rouge\">fetch-mock</code> instance, set configuration options directly on the <code class=\"language-plaintext highlighter-rouge\">fetchMock.config</code> object. e.g.</p><div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">const</span> <span class=\"nx\">fetchMock</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">fetch-mock</span><span class=\"dl\">'</span><span class=\"p\">);</span><span class=\"nx\">fetchMock</span><span class=\"p\">.</span><span class=\"nx\">config</span><span class=\"p\">.</span><span class=\"nx\">sendAsJson</span> <span class=\"o\">=</span> <span class=\"kc\">false</span><span class=\"p\">;</span></code></pre></div></div></p><h4>Options</h4><dl class=\"parameters\"><dt>sendAsJson<sup>\u2020</sup><small class=\"version-added\" title=\"Added in version 4.1.0\">v4.1.0</small><div class=\"types-zone\"><code>Boolean</code><span class=\"default\">[default&nbsp;<code>true</code>]</span></div></dt><dd><p>Always convert objects passed to <code class=\"language-plaintext highlighter-rouge\">.mock()</code> to JSON strings before building reponses. Can be useful to set to <code class=\"language-plaintext highlighter-rouge\">false</code> globally if e.g. dealing with a lot of <code class=\"language-plaintext highlighter-rouge\">ArrayBuffer</code>s. When <code class=\"language-plaintext highlighter-rouge\">true</code> the <code class=\"language-plaintext highlighter-rouge\">Content-Type: application/json</code> header will also be set on each response.</p></dd><dt>includeContentLength<sup>\u2020</sup><small class=\"version-added\" title=\"Added in version 5.13.0\">v5.13.0</small><div class=\"types-zone\"><code>Boolean</code><span class=\"default\">[default&nbsp;<code>true</code>]</span></div></dt><dd><p>Sets a <code class=\"language-plaintext highlighter-rouge\">Content-Length</code> header on each response.</p></dd><dt>fallbackToNetwork<small class=\"version-added\" title=\"Added in version 6.5.0. 'always' option added in v6.5.0\">v6.5.0</small><div class=\"types-zone\"><code>Boolean</code>|<code>String</code><span class=\"default\">[default&nbsp;<code>false</code>]</span></div></dt><dd><ul>  <li><code class=\"language-plaintext highlighter-rouge\">true</code>: Unhandled calls fall through to the network</li>  <li><code class=\"language-plaintext highlighter-rouge\">false</code>: Unhandled calls throw an error</li>  <li><code class=\"language-plaintext highlighter-rouge\">'always'</code>: All calls fall through to the network, effectively disabling fetch-mock.</li></ul></dd><dt>overwriteRoutes<sup>\u2020</sup><small class=\"version-added\" title=\"Added in version 6.0.0\">v6.0.0</small><div class=\"types-zone\"><code>Boolean</code><span class=\"default\">[default&nbsp;<code>undefined</code>]</span></div></dt><dd><p>Configures behaviour when attempting to add a new route with the same name (or inferred name) as an existing one</p><ul>  <li><code class=\"language-plaintext highlighter-rouge\">undefined</code>: An error will be thrown</li>  <li><code class=\"language-plaintext highlighter-rouge\">true</code>: Overwrites the existing route</li>  <li><code class=\"language-plaintext highlighter-rouge\">false</code>: Appends the new route to the list of routes</li></ul></dd><dt>matchPartialBody<small class=\"version-added\" title=\"Added in version 9.1.0\">v9.1.0</small><div class=\"types-zone\"><code>Boolean</code></div></dt><dd><p>Match calls that only partially match a specified body json. Uses the <a href=\"https://www.npmjs.com/package/is-subset\">is-subset</a> library under the hood, which implements behaviour the same as jest\u2019s <a href=\"https://jestjs.io/docs/en/expect#expectobjectcontainingobject\">.objectContainig()</a> method.</p></dd><dt>warnOnFallback<small class=\"version-added\" title=\"Added in version 6.0.0\">v6.0.0</small><div class=\"types-zone\"><code>Boolean</code><span class=\"default\">[default&nbsp;<code>true</code>]</span></div></dt><dd><p>Print a warning if any call is caught by a fallback handler (set using <code class=\"language-plaintext highlighter-rouge\">catch()</code>, <code class=\"language-plaintext highlighter-rouge\">spy()</code> or the <code class=\"language-plaintext highlighter-rouge\">fallbackToNetwork</code> option)</p></dd><dt>Promise<small class=\"version-added\" title=\"Added in version 5.9.0\">v5.9.0</small><div class=\"types-zone\"><code>Constructor</code></div></dt><dd><p>A custom <code class=\"language-plaintext highlighter-rouge\">Promise</code> constructor, if your application uses one</p></dd><dt>fetch<div class=\"types-zone\"><code>Function</code></div></dt><dd><p>A custom <code class=\"language-plaintext highlighter-rouge\">fetch</code> implementation, if your application uses one</p></dd><dt>Headers<small class=\"version-added\" title=\"Added in version 5.9.0\">v5.9.0</small><div class=\"types-zone\"><code>Constructor</code></div></dt><dd><p>The <code class=\"language-plaintext highlighter-rouge\">Headers</code> constructor of a custom <code class=\"language-plaintext highlighter-rouge\">fetch</code> implementation, if your application uses one</p></dd><dt>Request<small class=\"version-added\" title=\"Added in version 5.9.0\">v5.9.0</small><div class=\"types-zone\"><code>Constructor</code></div></dt><dd><p>The <code class=\"language-plaintext highlighter-rouge\">Request</code> constructor of a custom <code class=\"language-plaintext highlighter-rouge\">fetch</code> implementation, if your application uses one</p></dd><dt>Response<small class=\"version-added\" title=\"Added in version 5.0.0\">v5.0.0</small><div class=\"types-zone\"><code>Constructor</code></div></dt><dd><p>The <code class=\"language-plaintext highlighter-rouge\">Response</code> constructor of a custom <code class=\"language-plaintext highlighter-rouge\">fetch</code> implementation, if your application uses one</p></dd></dl><p>Options marked with a <code class=\"language-plaintext highlighter-rouge\">\u2020</code> can also be overridden for individual calls to <code class=\"language-plaintext highlighter-rouge\">.mock(matcher, response, options)</code> by setting as properties on the <code class=\"language-plaintext highlighter-rouge\">options</code> parameter</p></section><section><h3><a id=\"usagedebug-mode\">Debugging</a></h3><div class=\"types-zone\"></div><p>The first  step when debugging tests should be to run with the environment variable <code class=\"language-plaintext highlighter-rouge\">DEBUG=fetch-mock*</code>. This will output additional logs for debugging purposes.</p></section></div><div class=\"docs\"><h2>Mocking API</h2><section><h3><a id=\"api-mockingmock\">.mock(matcher, response, options)</a><small class=\"version-added\" title=\"Added in version 2.0.0. Callable with no arguments since v7.6.0\">v2.0.0</small></h3><div class=\"types-zone\"></div><p class=\"description\"><p class=\"info\">Check out the new <a href=\"https://github.com/wheresrhys/fetch-mock/blob/master/docs/cheatsheet.md\">cheatsheet</a></p><p>Initialises or extends a stub implementation of fetch, applying a <code class=\"language-plaintext highlighter-rouge\">route</code> that matches <code class=\"language-plaintext highlighter-rouge\">matcher</code>, delivers a <code class=\"language-plaintext highlighter-rouge\">Response</code> configured using <code class=\"language-plaintext highlighter-rouge\">response</code>, and that respects the additional <code class=\"language-plaintext highlighter-rouge\">options</code>. The stub will record its calls so they can be inspected later. If <code class=\"language-plaintext highlighter-rouge\">.mock</code> is called on the top level <code class=\"language-plaintext highlighter-rouge\">fetch-mock</code> instance, this stub function will also replace <code class=\"language-plaintext highlighter-rouge\">fetch</code> globally. Calling <code class=\"language-plaintext highlighter-rouge\">.mock()</code> with no arguments will carry out this stubbing without defining any mock responses.</p><p class=\"warning\">In the documentation, <strong>route</strong> is often used to refer to the combination of matching and responding behaviour set up using a single call to <code class=\"language-plaintext highlighter-rouge\">mock()</code></p></p><h4>Parameters</h4><dl class=\"parameters\"><dt>matcher<small class=\"version-added\" title=\"Added in version 2.0.0\">v2.0.0</small><div class=\"types-zone\"><code>String</code>|<code>Regex</code>|<code>Function</code>|<code>Object</code></div></dt><dd><p>Criteria for which calls to <code class=\"language-plaintext highlighter-rouge\">fetch</code> should match this route</p></dd><dt>response<small class=\"version-added\" title=\"Added in version 2.0.0\">v2.0.0</small><div class=\"types-zone\"><code>String</code>|<code>Object</code>|<code>Function</code>|<code>Promise</code>|<code>Response</code></div></dt><dd><p>Response to send when a call is matched</p></dd><dt>options<small class=\"version-added\" title=\"Added in version 2.0.0\">v2.0.0</small><div class=\"types-zone\"><code>Object</code></div></dt><dd><p>More options to configure matching and responding behaviour</p></dd></dl><p>Alternatively a single parameter, <code class=\"language-plaintext highlighter-rouge\">options</code>, an Object with <code class=\"language-plaintext highlighter-rouge\">matcher</code>, <code class=\"language-plaintext highlighter-rouge\">response</code> and other options defined, can be passed in.</p><p>For complex matching (e.g. matching on headers in addition to url), there are 4 patterns to choose from:</p><ol>  <li>Use an object as the first argument, e.g.    <div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nx\">fetchMock</span>  <span class=\"p\">.</span><span class=\"nx\">mock</span><span class=\"p\">({</span><span class=\"nx\">url</span><span class=\"p\">,</span> <span class=\"nx\">headers</span><span class=\"p\">},</span> <span class=\"nx\">response</span><span class=\"p\">)</span></code></pre></div>    </div>    <p>This has the advantage of keeping all the matching criteria in one place.</p>  </li>  <li>Pass in options in a third parameter e.g.    <div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nx\">fetchMock</span>  <span class=\"p\">.</span><span class=\"nx\">mock</span><span class=\"p\">(</span><span class=\"nx\">url</span><span class=\"p\">,</span> <span class=\"nx\">response</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"nx\">headers</span><span class=\"p\">})</span></code></pre></div>    </div>    <p>This splits matching criteria between two parameters, which is arguably harder to read. However, if most of your tests only match on url, then this provides a convenient way to create a variant of an existing test.</p>  </li>  <li>Use a single object, e.g.    <div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nx\">fetchMock</span>  <span class=\"p\">.</span><span class=\"nx\">mock</span><span class=\"p\">({</span><span class=\"nx\">url</span><span class=\"p\">,</span> <span class=\"nx\">response</span><span class=\"p\">,</span> <span class=\"nx\">headers</span><span class=\"p\">})</span></code></pre></div>    </div>    <p>Nothing wrong with doing this, but keeping response configuration in a separate argument to the matcher config feels like a good split.</p>  </li>  <li>Use a function matcher e.g.    <div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nx\">fetchMock</span>  <span class=\"p\">.</span><span class=\"nx\">mock</span><span class=\"p\">((</span><span class=\"nx\">url</span><span class=\"p\">,</span> <span class=\"nx\">options</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>  <span class=\"c1\">// write your own logic </span><span class=\"p\">},</span> <span class=\"nx\">response</span><span class=\"p\">)</span></code></pre></div>    </div>    <p>Avoid using this unless you need to match on some criteria fetch-mock does not support.</p>  </li></ol><div class=\"code-blocks\"><div title=\"Strings\" class=\"language-javascript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nx\">fetchMock</span>  <span class=\"p\">.</span><span class=\"nx\">mock</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">http://it.at.here/route</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"mi\">200</span><span class=\"p\">)</span>  <span class=\"p\">.</span><span class=\"nx\">mock</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">begin:http://it</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"mi\">200</span><span class=\"p\">)</span>  <span class=\"p\">.</span><span class=\"nx\">mock</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">end:here/route</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"mi\">200</span><span class=\"p\">)</span>  <span class=\"p\">.</span><span class=\"nx\">mock</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">path:/route</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"mi\">200</span><span class=\"p\">)</span>  <span class=\"p\">.</span><span class=\"nx\">mock</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">*</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"mi\">200</span><span class=\"p\">)</span></code></pre></div></div><div title=\"Complex Matchers\" class=\"language-javascript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nx\">fetchMock</span>  <span class=\"p\">.</span><span class=\"nx\">mock</span><span class=\"p\">(</span><span class=\"sr\">/.*</span><span class=\"se\">\\.</span><span class=\"sr\">here.*/</span><span class=\"p\">,</span> <span class=\"mi\">200</span><span class=\"p\">)</span>  <span class=\"p\">.</span><span class=\"nx\">mock</span><span class=\"p\">((</span><span class=\"nx\">url</span><span class=\"p\">,</span> <span class=\"nx\">opts</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">opts</span><span class=\"p\">.</span><span class=\"nx\">method</span> <span class=\"o\">===</span> <span class=\"dl\">'</span><span class=\"s1\">patch</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"mi\">200</span><span class=\"p\">)</span>  <span class=\"p\">.</span><span class=\"nx\">mock</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">express:/:type/:id</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"mi\">200</span><span class=\"p\">,</span> <span class=\"p\">{</span>    <span class=\"na\">params</span><span class=\"p\">:</span> <span class=\"p\">{</span>      <span class=\"na\">type</span><span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">shoe</span><span class=\"dl\">'</span>    <span class=\"p\">}</span>  <span class=\"p\">})</span>  <span class=\"p\">.</span><span class=\"nx\">mock</span><span class=\"p\">({</span>    <span class=\"na\">headers</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"dl\">'</span><span class=\"s1\">Authorization</span><span class=\"dl\">'</span><span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">Bearer 123</span><span class=\"dl\">'</span><span class=\"p\">},</span>    <span class=\"na\">method</span><span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">POST</span><span class=\"dl\">'</span>  <span class=\"p\">},</span> <span class=\"mi\">200</span><span class=\"p\">)</span></code></pre></div></div><div title=\"Responses\" class=\"language-javascript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nx\">fetchMock</span>  <span class=\"p\">.</span><span class=\"nx\">mock</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">*</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"dl\">'</span><span class=\"s1\">ok</span><span class=\"dl\">'</span><span class=\"p\">)</span>  <span class=\"p\">.</span><span class=\"nx\">mock</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">*</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"mi\">404</span><span class=\"p\">)</span>  <span class=\"p\">.</span><span class=\"nx\">mock</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">*</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"na\">results</span><span class=\"p\">:</span> <span class=\"p\">[]})</span>  <span class=\"p\">.</span><span class=\"nx\">mock</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">*</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"na\">throw</span><span class=\"p\">:</span> <span class=\"k\">new</span> <span class=\"nb\">Error</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">Bad kitty</span><span class=\"dl\">'</span><span class=\"p\">)))</span>  <span class=\"p\">.</span><span class=\"nx\">mock</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">*</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"k\">new</span> <span class=\"nb\">Promise</span><span class=\"p\">(</span><span class=\"nx\">res</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">setTimeout</span><span class=\"p\">(</span><span class=\"nx\">res</span><span class=\"p\">,</span> <span class=\"mi\">1000</span><span class=\"p\">,</span> <span class=\"mi\">404</span><span class=\"p\">)))</span>  <span class=\"p\">.</span><span class=\"nx\">mock</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">*</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nx\">url</span><span class=\"p\">,</span> <span class=\"nx\">opts</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>    <span class=\"na\">status</span><span class=\"p\">:</span> <span class=\"mi\">302</span><span class=\"p\">,</span>     <span class=\"na\">headers</span><span class=\"p\">:</span> <span class=\"p\">{</span>      <span class=\"na\">Location</span><span class=\"p\">:</span> <span class=\"nx\">url</span><span class=\"p\">.</span><span class=\"nx\">replace</span><span class=\"p\">(</span><span class=\"sr\">/^http/</span><span class=\"p\">,</span> <span class=\"dl\">'</span><span class=\"s1\">https</span><span class=\"dl\">'</span><span class=\"p\">)</span>    <span class=\"p\">},</span>   <span class=\"p\">}))</span></code></pre></div></div><div title=\"End to end example\" class=\"language-javascript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nx\">fetchMock</span>  <span class=\"p\">.</span><span class=\"nx\">mock</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">begin:http://it.at.here/api</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"mi\">403</span><span class=\"p\">)</span>  <span class=\"p\">.</span><span class=\"nx\">mock</span><span class=\"p\">({</span>    <span class=\"na\">url</span><span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">begin:http://it.at.here/api</span><span class=\"dl\">'</span><span class=\"p\">,</span>    <span class=\"na\">headers</span><span class=\"p\">:</span> <span class=\"p\">{</span>      <span class=\"na\">authorization</span><span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">Basic dummy-token</span><span class=\"dl\">'</span>    <span class=\"p\">}</span>  <span class=\"p\">},</span> <span class=\"mi\">200</span><span class=\"p\">)</span>  <span class=\"nx\">callApi</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">/endpoint</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"dl\">'</span><span class=\"s1\">dummy-token</span><span class=\"dl\">'</span><span class=\"p\">)</span>  <span class=\"p\">.</span><span class=\"nx\">then</span><span class=\"p\">(</span><span class=\"nx\">res</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>    <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">status</span><span class=\"p\">).</span><span class=\"nx\">to</span><span class=\"p\">.</span><span class=\"nx\">equal</span><span class=\"p\">(</span><span class=\"mi\">200</span><span class=\"p\">)</span>  <span class=\"p\">})</span></code></pre></div></div></div></section><section><h3><a id=\"api-mockingmock_matcher\">matcher</a>&nbsp;<span class=\"endpoint\">parameter for <a href=\"#api-mockingmock\">mock()</a></span><small class=\"version-added\" title=\"Added in version 1.0.0\">v1.0.0</small></h3><div class=\"types-zone\"><code class=\"name\">String</code>|<code class=\"name\">RegExp</code>|<code class=\"name\">Function</code>|<code class=\"name\">URL</code>|<code class=\"name\">Object</code></div><p class=\"description\"><p>Criteria for deciding which requests to mock.</p><p class=\"warning\">Note that if you use matchers that target anything other than the url string, you may also need to add a <code class=\"language-plaintext highlighter-rouge\">name</code> to your matcher object so that a) you can add multiple mocks on the same url that differ only in other properties (e.g. query strings or headers) b) if you <a href=\"#api-inspectionfundamentals\">inspect</a> the result of the fetch calls, retrieving the correct results will be easier.</p></p><h4>Argument values</h4><dl class=\"parameters\"><dt>*<small class=\"version-added\" title=\"Added in version 5.0.0\">v5.0.0</small><div class=\"types-zone\"><code>String</code></div></dt><dd><p>Match any url</p><div class=\"language-javascript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"dl\">\"</span><span class=\"s2\">*</span><span class=\"dl\">\"</span></code></pre></div></div></dd><dt>url<small class=\"version-added\" title=\"Added in version 1.0.0. URL instances only supported since v8.1.0\">v1.0.0</small><div class=\"types-zone\"><code>String</code>|<code>URL</code></div></dt><dd><p>Match an exact url. Can be defined using a string or a <code class=\"language-plaintext highlighter-rouge\">URL</code> instance</p><div class=\"language-javascript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"dl\">\"</span><span class=\"s2\">http://www.site.com/page.html</span><span class=\"dl\">\"</span></code></pre></div></div></dd><dt>begin:...<small class=\"version-added\" title=\"Added in version 5.7.0\">v5.7.0</small><div class=\"types-zone\"><code>String</code></div></dt><dd><p>Match a url beginning with a string</p><div class=\"language-javascript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"dl\">\"</span><span class=\"s2\">begin:http://www.site.com</span><span class=\"dl\">\"</span></code></pre></div></div></dd><dt>end:...<small class=\"version-added\" title=\"Added in version 5.7.0\">v5.7.0</small><div class=\"types-zone\"><code>String</code></div></dt><dd><p>Match a url ending with a string</p><div class=\"language-javascript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"dl\">\"</span><span class=\"s2\">end:.jpg</span><span class=\"dl\">\"</span></code></pre></div></div></dd><dt>path:...<small class=\"version-added\" title=\"Added in version 7.0.0\">v7.0.0</small><div class=\"types-zone\"><code>String</code></div></dt><dd><p>Match a url which has a given path</p><div class=\"language-javascript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"dl\">\"</span><span class=\"s2\">path:/posts/2018/7/3</span><span class=\"dl\">\"</span></code></pre></div></div></dd><dt>glob:...<small class=\"version-added\" title=\"Added in version 5.7.0\">v5.7.0</small><div class=\"types-zone\"><code>String</code></div></dt><dd><p>Match a url using a glob pattern</p><div class=\"language-javascript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"dl\">\"</span><span class=\"s2\">glob:http://*.*</span><span class=\"dl\">\"</span></code></pre></div></div></dd><dt>express:...<small class=\"version-added\" title=\"Added in version 5.7.0\">v5.7.0</small><div class=\"types-zone\"><code>String</code></div></dt><dd><p>Match a url that satisfies an <a href=\"https://www.npmjs.com/package/path-to-regexp\">express style path</a></p><div class=\"language-javascript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"dl\">\"</span><span class=\"s2\">express:/user/:user</span><span class=\"dl\">\"</span></code></pre></div></div></dd><dt><div class=\"types-zone\"><code class=\"name\">RegExp</code><small class=\"version-added\" title=\"Added in version 1.0.0\">v1.0.0</small></div></dt><dd><p>Match a url that satisfies a regular expression</p><div class=\"language-javascript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"o\">/</span><span class=\"p\">(</span><span class=\"nx\">article</span><span class=\"o\">|</span><span class=\"nx\">post</span><span class=\"p\">)</span><span class=\"err\">\\</span><span class=\"o\">/</span><span class=\"err\">\\</span><span class=\"nx\">d</span><span class=\"o\">+</span><span class=\"sr\">/</span><span class=\"err\"></span></code></pre></div></div></dd><dt><div class=\"types-zone\"><code class=\"name\">Function</code><small class=\"version-added\" title=\"Added in version 1.0.0\">v1.0.0</small></div></dt><dd><p>Match if a function returns something truthy. The function will be passed the <code class=\"language-plaintext highlighter-rouge\">url</code> and <code class=\"language-plaintext highlighter-rouge\">options</code> <code class=\"language-plaintext highlighter-rouge\">fetch</code> was called with. If <code class=\"language-plaintext highlighter-rouge\">fetch</code> was called with a <code class=\"language-plaintext highlighter-rouge\">Request</code> instance, it will be passed <code class=\"language-plaintext highlighter-rouge\">url</code> and <code class=\"language-plaintext highlighter-rouge\">options</code> inferred from the <code class=\"language-plaintext highlighter-rouge\">Request</code> instance, with the original <code class=\"language-plaintext highlighter-rouge\">Request</code> will be passed as a third argument.</p><p>This can also be set as a <code class=\"language-plaintext highlighter-rouge\">functionMatcher</code> in the <a href=\"#api-mockingmock_options\">options parameter</a>, and in this way powerful arbitrary matching criteria can be combined with the ease of the declarative matching rules above.</p><div class=\"language-javascript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"p\">(</span><span class=\"nx\">url</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"nx\">headers</span><span class=\"p\">})</span> <span class=\"o\">=&gt;</span> <span class=\"o\">!!</span><span class=\"nx\">headers</span><span class=\"p\">.</span><span class=\"nx\">Authorization</span></code></pre></div></div><div class=\"language-javascript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"p\">(</span><span class=\"nx\">_</span><span class=\"p\">,</span> <span class=\"nx\">_</span><span class=\"p\">,</span> <span class=\"nx\">request</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"o\">!!</span><span class=\"nx\">request</span><span class=\"p\">.</span><span class=\"nx\">headers</span><span class=\"p\">.</span><span class=\"kd\">get</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">Authorization</span><span class=\"dl\">'</span><span class=\"p\">)</span></code></pre></div></div></dd><dt><div class=\"types-zone\"><code class=\"name\">Object</code><small class=\"version-added\" title=\"Added in version 2.0.0\">v2.0.0</small></div></dt><dd><p>The url and function matchers described above can be combined with other criteria for matching a request by passing an an object which may have one or more of the properties described below. All these options can also be define on the third <code class=\"language-plaintext highlighter-rouge\">options</code> parameters of the <code class=\"language-plaintext highlighter-rouge\">mock()</code> method.</p><div class=\"language-javascript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"p\">{</span><span class=\"nl\">url</span><span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">end:/user/profile</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"nx\">headers</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"nl\">Authorization</span><span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">Basic 123</span><span class=\"dl\">'</span><span class=\"p\">}}</span></code></pre></div></div><div class=\"language-javascript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"p\">{</span><span class=\"nl\">query</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"na\">search</span><span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">abc</span><span class=\"dl\">'</span><span class=\"p\">},</span> <span class=\"nx\">method</span><span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">POST</span><span class=\"dl\">'</span><span class=\"p\">}</span></code></pre></div></div><dl class=\"options\"><dt>url<small class=\"version-added\" title=\"Added in version 8.3.0. Prior to v8.3.0 this was set using the (now deprecated) `matcher` property\">v8.3.0</small><div class=\"types-zone\"><code>String</code>|<code>RegExp</code></div></dt><dd><p>Use any of the <code class=\"language-plaintext highlighter-rouge\">String</code> or <code class=\"language-plaintext highlighter-rouge\">RegExp</code> matchers described above. <em>Note that the property name \u2018matcher\u2019 can be used instead of \u2018url\u2019, but this is deprecated and support will be dropped in the next major version, so prefer to use \u2018url\u2019</em></p></dd><dt>functionMatcher<small class=\"version-added\" title=\"Added in version 7.3.0\">v7.3.0</small><div class=\"types-zone\"><code>Function</code></div></dt><dd><p>Use a function matcher, as described above</p></dd><dt>method<small class=\"version-added\" title=\"Added in version 2.1.0\">v2.1.0</small><div class=\"types-zone\"><code>String</code></div></dt><dd><p>Match only requests using this http method. Not case-sensitive</p><div class=\"language-javascript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">get</span><span class=\"p\">,</span> <span class=\"nx\">POST</span></code></pre></div></div></dd><dt>headers<small class=\"version-added\" title=\"Added in version 1.0.0\">v1.0.0</small><div class=\"types-zone\"><code>Object</code>|<code>Headers</code></div></dt><dd><p>Match only requests that have these headers set</p><div class=\"language-javascript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"p\">{</span><span class=\"dl\">\"</span><span class=\"s2\">Accepts</span><span class=\"dl\">\"</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">text/html</span><span class=\"dl\">\"</span><span class=\"p\">}</span></code></pre></div></div></dd><dt>body<small class=\"version-added\" title=\"Added in version 7.4.0\">v7.4.0</small><div class=\"types-zone\"><code>Object</code></div></dt><dd><p>Match only requests that send a JSON body with the exact structure and properties as the one provided here.</p><p class=\"warning\">Note that if matching on body <em>and</em> using <code class=\"language-plaintext highlighter-rouge\">Request</code> instances in your source code, this forces fetch-mock into an asynchronous flow <em>before</em> it is able to route requests effectively. This means no <a href=\"#api-inspectionfundamentals\">inspection methods</a> can be used synchronously. You must first either await the fetches to resolve, or <code class=\"language-plaintext highlighter-rouge\">await fetchMock.flush()</code>. The popular library <a href=\"https://github.com/sindresorhus/ky\">Ky</a> uses <code class=\"language-plaintext highlighter-rouge\">Request</code> instances internally, and so also triggers this mode.</p><div class=\"language-javascript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"p\">{</span> <span class=\"dl\">\"</span><span class=\"s2\">key1</span><span class=\"dl\">\"</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">value1</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"dl\">\"</span><span class=\"s2\">key2</span><span class=\"dl\">\"</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">value2</span><span class=\"dl\">\"</span> <span class=\"p\">}</span></code></pre></div></div></dd><dt>matchPartialBody<small class=\"version-added\" title=\"Added in version 9.1.0\">v9.1.0</small><div class=\"types-zone\"><code>Boolean</code></div></dt><dd><p>Match calls that only partially match a specified body json. See <a href=\"#usageconfiguration\">global configuration</a> for details.</p></dd><dt>query<small class=\"version-added\" title=\"Added in version 6.0.0\">v6.0.0</small><div class=\"types-zone\"><code>Object</code></div></dt><dd><p>Match only requests that have these query parameters set (in any order). Query parameters are matched by using Node.js <a href=\"https://nodejs.org/api/querystring.html\">querystring</a> module. In summary the bahaviour is as follows</p><ul>  <li>strings, numbers and booleans are coerced to strings</li>  <li>arrays of values are coerced to repetitions of the key</li>  <li>all other values, including <code class=\"language-plaintext highlighter-rouge\">undefined</code>, are coerced to an empty stringThe request will be matched whichever order keys appear in the query string. Any query parameters sent in the request which are not included in the keys of the object provided will be ignored.</li></ul><div class=\"language-javascript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"p\">{</span><span class=\"dl\">\"</span><span class=\"s2\">q</span><span class=\"dl\">\"</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">cute+kittenz</span><span class=\"dl\">\"</span><span class=\"p\">}</span> <span class=\"c1\">// matches '?q=cute kittenz' or ?q=cute+kittenz' or ?q=cute+kittenz&amp;mode=big'</span></code></pre></div></div><div class=\"language-javascript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"p\">{</span><span class=\"dl\">\"</span><span class=\"s2\">tags</span><span class=\"dl\">\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"dl\">\"</span><span class=\"s2\">cute</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"dl\">\"</span><span class=\"s2\">kittenz</span><span class=\"dl\">\"</span><span class=\"p\">]}</span> <span class=\"c1\">// matches `?q=cute&amp;q=kittenz`</span></code></pre></div></div><div class=\"language-javascript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"p\">{</span><span class=\"dl\">\"</span><span class=\"s2\">q</span><span class=\"dl\">\"</span><span class=\"p\">:</span> <span class=\"kc\">undefined</span><span class=\"p\">,</span> <span class=\"nx\">inform</span><span class=\"p\">:</span> <span class=\"kc\">true</span><span class=\"p\">}</span> <span class=\"c1\">// matches `?q=&amp;inform=true`</span></code></pre></div></div></dd><dt>params<small class=\"version-added\" title=\"Added in version 6.0.0\">v6.0.0</small><div class=\"types-zone\"><code>Object</code></div></dt><dd><p>When the <code class=\"language-plaintext highlighter-rouge\">express:</code> keyword is used in a string matcher, match only requests with these express parameters</p><div class=\"language-javascript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"p\">{</span><span class=\"dl\">\"</span><span class=\"s2\">section</span><span class=\"dl\">\"</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">feed</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"dl\">\"</span><span class=\"s2\">user</span><span class=\"dl\">\"</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">geoff</span><span class=\"dl\">\"</span><span class=\"p\">}</span></code></pre></div></div></dd><dt>repeat<small class=\"version-added\" title=\"Added in version 6.0.0\">v6.0.0</small><div class=\"types-zone\"><code>Integer</code></div></dt><dd><p>Limits the number of times the route can be used. If the route has already been called <code class=\"language-plaintext highlighter-rouge\">repeat</code> times, the call to <code class=\"language-plaintext highlighter-rouge\">fetch()</code> will fall through to be handled by any other routes defined (which may eventually result in an error if nothing matches it)</p></dd><dt>name<small class=\"version-added\" title=\"Added in version 1.0.0\">v1.0.0</small><div class=\"types-zone\"><code>String</code></div></dt><dd><p>A unique string naming the route. Used to subsequently retrieve references to the calls handled by it. Only needed for advanced use cases.</p></dd><dt>overwriteRoutes<small class=\"version-added\" title=\"Added in version 6.0.0\">v6.0.0</small><div class=\"types-zone\"><code>Boolean</code></div></dt><dd><p>See <a href=\"#usageconfiguration\">global configuration</a></p></dd><dt>response<small class=\"version-added\" title=\"Added in version 2.0.0\">v2.0.0</small><div class=\"types-zone\"></div></dt><dd><p>Instead of defining the response as the second argument of <code class=\"language-plaintext highlighter-rouge\">mock()</code>, it can be passed as a property on the first argument. See the <a href=\"#usageapimock_response\">response documentation</a> for valid values.</p></dd></dl></dd></dl><p class=\"warning\">Note that if using <code class=\"language-plaintext highlighter-rouge\">end:</code> or an exact url matcher, fetch-mock (<a href=\"https://url.spec.whatwg.org/#url-equivalence\">for good reason</a>) is unable to distinguish whether URLs without a path end in a trailing slash or not i.e. <code class=\"language-plaintext highlighter-rouge\">http://thing</code> is treated the same as <code class=\"language-plaintext highlighter-rouge\">http://thing/</code></p><p class=\"warning\">If multiple mocks use the same <code class=\"language-plaintext highlighter-rouge\">matcher</code> but use different options, such as <code class=\"language-plaintext highlighter-rouge\">headers</code>, you will need to use the <code class=\"language-plaintext highlighter-rouge\">overwriteRoutes: false</code> option.</p><p class=\"warning\">Before v8.3.0 some of the options above had to be passed in as properties on a third parameter of <code class=\"language-plaintext highlighter-rouge\">.mock()</code></p></section><section><h3><a id=\"api-mockingmock_response\">response</a>&nbsp;<span class=\"endpoint\">parameter for <a href=\"#api-mockingmock\">mock()</a></span></h3><div class=\"types-zone\"><code class=\"name\">String</code>|<code class=\"name\">Object</code>|<code class=\"name\">Function</code>|<code class=\"name\">Promise</code>|<code class=\"name\">Response</code></div><p class=\"description\"><p>Configures the http response returned by the mock. Accepts any of the following values or a <code class=\"language-plaintext highlighter-rouge\">Promise</code> for any of them (useful when testing race conditions, loading transitions etc.). Unless otherwise stated, all responses have a <code class=\"language-plaintext highlighter-rouge\">200</code> status</p></p><h4>Argument values</h4><dl class=\"parameters\"><dt><div class=\"types-zone\"><code class=\"name\">Response</code><small class=\"version-added\" title=\"Added in version 5.0.0\">v5.0.0</small></div></dt><dd><p>A <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Response/Response\"><code class=\"language-plaintext highlighter-rouge\">Response</code></a> instance to return unaltered.</p><p>Note that it must use the same constructor as that used in the <code class=\"language-plaintext highlighter-rouge\">fetch</code> implementation your application uses. <a href=\"#usagecustom-classes\">See how to configure this</a></p><div class=\"language-javascript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">new</span> <span class=\"nx\">Response</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">ok</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"na\">status</span><span class=\"p\">:</span> <span class=\"mi\">200</span><span class=\"p\">})</span></code></pre></div></div></dd><dt>status code<small class=\"version-added\" title=\"Added in version 1.2.0\">v1.2.0</small><div class=\"types-zone\"><code>Integer</code></div></dt><dd><p>Return a <code class=\"language-plaintext highlighter-rouge\">Response</code> with the given status code. The response\u2019s <code class=\"language-plaintext highlighter-rouge\">statusText</code> will also be set to the <a href=\"https://fetch.spec.whatwg.org/#dom-response-statustext\">default value corresponding to the status</a></p><div class=\"language-javascript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"mi\">200</span><span class=\"p\">,</span> <span class=\"mi\">404</span><span class=\"p\">,</span> <span class=\"mi\">503</span></code></pre></div></div></dd><dt><div class=\"types-zone\"><code class=\"name\">String</code><small class=\"version-added\" title=\"Added in version 1.0.0\">v1.0.0</small></div></dt><dd><p>Return a 200 <code class=\"language-plaintext highlighter-rouge\">Response</code> with the string as the response body</p><div class=\"language-javascript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nx\">Server</span> <span class=\"nx\">responded</span> <span class=\"nx\">ok</span></code></pre></div></div><div class=\"language-javascript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nx\">Bad</span> <span class=\"nx\">Response</span></code></pre></div></div></dd><dt>config<small class=\"version-added\" title=\"Added in version 1.0.0\">v1.0.0</small><div class=\"types-zone\"><code>Object</code></div></dt><dd><p>If an object <em>only</em> contains properties from among those listed below it is used to configure a <code class=\"language-plaintext highlighter-rouge\">Response</code> to return</p><dl class=\"options\"><dt>body<small class=\"version-added\" title=\"Added in version 1.0.0\">v1.0.0</small><div class=\"types-zone\"><code>String</code>|<code>Object</code></div></dt><dd><p>Set the <code class=\"language-plaintext highlighter-rouge\">Response</code> body. See the non-config <code class=\"language-plaintext highlighter-rouge\">Object</code> section of the docs below for behaviour when passed an <code class=\"language-plaintext highlighter-rouge\">Object</code></p><div class=\"language-javascript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nx\">Server</span> <span class=\"nx\">responded</span> <span class=\"nx\">ok</span></code></pre></div></div><div class=\"language-javascript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"p\">{</span> <span class=\"nl\">token</span><span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">abcdef</span><span class=\"dl\">'</span> <span class=\"p\">}</span></code></pre></div></div></dd><dt>status<small class=\"version-added\" title=\"Added in version 1.0.0\">v1.0.0</small><div class=\"types-zone\"><code>Integer</code></div></dt><dd><p>Set the <code class=\"language-plaintext highlighter-rouge\">Response</code> status</p><div class=\"language-javascript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"mi\">200</span><span class=\"p\">,</span> <span class=\"mi\">404</span><span class=\"p\">,</span> <span class=\"mi\">503</span></code></pre></div></div></dd><dt>headers<small class=\"version-added\" title=\"Added in version 1.0.0\">v1.0.0</small><div class=\"types-zone\"><code>Object</code></div></dt><dd><p>Set the <code class=\"language-plaintext highlighter-rouge\">Response</code> headers</p><div class=\"language-javascript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"p\">{</span><span class=\"dl\">'</span><span class=\"s1\">Content-Type</span><span class=\"dl\">'</span><span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">text/html</span><span class=\"dl\">'</span><span class=\"p\">}</span></code></pre></div></div></dd><dt>redirectUrl<small class=\"version-added\" title=\"Added in version 6.0.0\">v6.0.0</small><div class=\"types-zone\"><code>String</code></div></dt><dd><p>The url from which the <code class=\"language-plaintext highlighter-rouge\">Response</code> should claim to originate from (to imitate followed directs). Will also set <code class=\"language-plaintext highlighter-rouge\">redirected: true</code> on the response</p></dd><dt>throws<small class=\"version-added\" title=\"Added in version 1.0.0\">v1.0.0</small><div class=\"types-zone\"><code>Error</code></div></dt><dd><p>Force <code class=\"language-plaintext highlighter-rouge\">fetch</code> to return a <code class=\"language-plaintext highlighter-rouge\">Promise</code> rejected with the value of <code class=\"language-plaintext highlighter-rouge\">throws</code></p><div class=\"language-javascript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">new</span> <span class=\"nx\">TypeError</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">Failed to fetch</span><span class=\"dl\">'</span><span class=\"p\">)</span></code></pre></div></div></dd></dl></dd><dt><div class=\"types-zone\"><code class=\"name\">Object</code>|<code class=\"name\">ArrayBuffer</code>|<code class=\"name\">...</code><small class=\"version-added\" title=\"Added in version 1.0.0\">v1.0.0</small></div></dt><dd><p>If the <code class=\"language-plaintext highlighter-rouge\">sendAsJson</code> option is set to <code class=\"language-plaintext highlighter-rouge\">true</code>, any object that does not meet the criteria above will be converted to a <code class=\"language-plaintext highlighter-rouge\">JSON</code> string and set as the response <code class=\"language-plaintext highlighter-rouge\">body</code>. Otherwise, the object will be set as the response <code class=\"language-plaintext highlighter-rouge\">body</code> (useful for <code class=\"language-plaintext highlighter-rouge\">ArrayBuffer</code>s etc.)</p></dd><dt><div class=\"types-zone\"><code class=\"name\">Promise</code><small class=\"version-added\" title=\"Added in version 4.2.0\">v4.2.0</small></div></dt><dd><p>A <code class=\"language-plaintext highlighter-rouge\">Promise</code> that resolves to any of the options documented above</p><div class=\"language-javascript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">new</span> <span class=\"nb\">Promise</span><span class=\"p\">(</span><span class=\"nx\">res</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">setTimeout</span><span class=\"p\">(()</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">res</span><span class=\"p\">(</span><span class=\"mi\">200</span><span class=\"p\">),</span> <span class=\"mi\">50</span><span class=\"p\">))</span></code></pre></div></div></dd><dt><div class=\"types-zone\"><code class=\"name\">Function</code><small class=\"version-added\" title=\"Added in version 1.0.0\">v1.0.0</small></div></dt><dd><p>A function that returns any of the options documented above. The function will be passed the <code class=\"language-plaintext highlighter-rouge\">url</code> and <code class=\"language-plaintext highlighter-rouge\">options</code> <code class=\"language-plaintext highlighter-rouge\">fetch</code> was called with. If <code class=\"language-plaintext highlighter-rouge\">fetch</code> was called with a <code class=\"language-plaintext highlighter-rouge\">Request</code> instance, it will be passed <code class=\"language-plaintext highlighter-rouge\">url</code> and <code class=\"language-plaintext highlighter-rouge\">options</code> inferred from the <code class=\"language-plaintext highlighter-rouge\">Request</code> instance, with the original <code class=\"language-plaintext highlighter-rouge\">Request</code> will be passed as a third argument.</p><div class=\"language-javascript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"p\">(</span><span class=\"nx\">url</span><span class=\"p\">,</span> <span class=\"nx\">opts</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">opts</span><span class=\"p\">.</span><span class=\"nx\">headers</span><span class=\"p\">.</span><span class=\"nx\">Authorization</span> <span class=\"p\">?</span> <span class=\"mi\">200</span> <span class=\"p\">:</span> <span class=\"mi\">403</span></code></pre></div></div><div class=\"language-javascript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"p\">(</span><span class=\"nx\">_</span><span class=\"p\">,</span> <span class=\"nx\">_</span><span class=\"p\">,</span> <span class=\"nx\">request</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">request</span><span class=\"p\">.</span><span class=\"nx\">headers</span><span class=\"p\">.</span><span class=\"kd\">get</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">Authorization</span><span class=\"dl\">'</span><span class=\"p\">)</span> <span class=\"p\">?</span>  <span class=\"mi\">200</span> <span class=\"p\">:</span> <span class=\"mi\">403</span></code></pre></div></div></dd></dl></section><section><h3><a id=\"api-mockingmock_options\">options</a>&nbsp;<span class=\"endpoint\">parameter for <a href=\"#api-mockingmock\">mock()</a></span><small class=\"version-added\" title=\"Added in version 5.0.0\">v5.0.0</small></h3><div class=\"types-zone\"><code class=\"name\">Object</code></div><p class=\"description\"><p>An object containing further options for configuring mocking behaviour.</p><p>In addition to all the options listed below, all the options available for use when using an options object as the first argument to <code class=\"language-plaintext highlighter-rouge\">.mock()</code> can also be passed in on the third argument. These include:</p><ul>  <li><code class=\"language-plaintext highlighter-rouge\">repeat</code> - defining how many times a mock should match calls</li>  <li><code class=\"language-plaintext highlighter-rouge\">header</code>, <code class=\"language-plaintext highlighter-rouge\">query</code>, <code class=\"language-plaintext highlighter-rouge\">params</code>, <code class=\"language-plaintext highlighter-rouge\">method</code>, <code class=\"language-plaintext highlighter-rouge\">body</code> - matching calls on criteria other than the url</li></ul></p><h4>Response options</h4><dl class=\"parameters\"><dt>delay<small class=\"version-added\" title=\"Added in version 7.7.0\">v7.7.0</small><div class=\"types-zone\"><code>Integer</code></div></dt><dd><p>Delays responding for the number of milliseconds specified.</p></dd><dt>sticky<small class=\"version-added\" title=\"Added in version 9.7.0\">v9.7.0</small><div class=\"types-zone\"><code>Boolean</code></div></dt><dd><p>Avoids a route being removed when <code class=\"language-plaintext highlighter-rouge\">reset()</code>, <code class=\"language-plaintext highlighter-rouge\">restore()</code> or <code class=\"language-plaintext highlighter-rouge\">resetBehavior()</code> are called. <em>Note - this does not preserve the history of calls to the route</em></p></dd><dt>sendAsJson<small class=\"version-added\" title=\"Added in version 4.1.0\">v4.1.0</small><div class=\"types-zone\"><code>Boolean</code><span class=\"default\">[default&nbsp;<code>true</code>]</span></div></dt><dd><p>See <a href=\"#usageconfiguration\">global configuration</a></p></dd><dt>includeContentLength<small class=\"version-added\" title=\"Added in version 5.13.0\">v5.13.0</small><div class=\"types-zone\"><code>Boolean</code><span class=\"default\">[default&nbsp;<code>true</code>]</span></div></dt><dd><p>See <a href=\"#usageconfiguration\">global configuration</a></p></dd></dl></section><section><h3><a id=\"api-mockingget_post\">.get(), .post(), .put(), .delete(), .head(), .patch()</a><small class=\"version-added\" title=\"Added in version 5.0.0\">v5.0.0</small></h3><div class=\"types-zone\"></div><p class=\"description\"><p>Shorthands for <code class=\"language-plaintext highlighter-rouge\">mock()</code> that create routes that only respond to requests using a particular http method.</p></p><p>If you use some other method a lot you can easily define your own shorthands e.g.</p><div class=\"language-javascript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nx\">fetchMock</span><span class=\"p\">.</span><span class=\"nx\">purge</span> <span class=\"o\">=</span> <span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">matcher</span><span class=\"p\">,</span> <span class=\"nx\">response</span><span class=\"p\">,</span> <span class=\"nx\">options</span><span class=\"p\">)</span> <span class=\"p\">{</span>    <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">mock</span><span class=\"p\">(</span>      <span class=\"nx\">matcher</span><span class=\"p\">,</span>      <span class=\"nx\">response</span><span class=\"p\">,</span>      <span class=\"nb\">Object</span><span class=\"p\">.</span><span class=\"nx\">assign</span><span class=\"p\">({},</span> <span class=\"nx\">options</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"na\">method</span><span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">PURGE</span><span class=\"dl\">'</span><span class=\"p\">})</span>    <span class=\"p\">);</span><span class=\"p\">}</span></code></pre></div></div></section><section><h3><a id=\"api-mockingmock_once\">.once()</a><small class=\"version-added\" title=\"Added in version 5.3.0\">v5.3.0</small></h3><div class=\"types-zone\"></div><p class=\"description\"><p>Shorthand for <code class=\"language-plaintext highlighter-rouge\">mock()</code> which creates a route that can only mock a single request. (see <code class=\"language-plaintext highlighter-rouge\">repeat</code> option above)</p></p></section><section><h3><a id=\"api-mockingmock_sticky\">.sticky()</a><small class=\"version-added\" title=\"Added in version 9.7.0\">v9.7.0</small></h3><div class=\"types-zone\"></div><p class=\"description\"><p>Shorthand for <code class=\"language-plaintext highlighter-rouge\">mock()</code> which creates a route that persists even when <code class=\"language-plaintext highlighter-rouge\">restore()</code>, <code class=\"language-plaintext highlighter-rouge\">reset()</code> or <code class=\"language-plaintext highlighter-rouge\">resetbehavior()</code> are called;</p></p><p>This method is particularly useful for setting up fixtures that must remain in place for all tests, e.g.</p><div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nx\">fetchMock</span><span class=\"p\">.</span><span class=\"nx\">sticky</span><span class=\"p\">(</span><span class=\"sr\">/config-hub.com/</span><span class=\"p\">,</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">./fixtures/start-up-config.json</span><span class=\"dl\">'</span><span class=\"p\">))</span></code></pre></div></div></section><section><h3><a id=\"api-mockingmock_any\">.any(response, options)</a><small class=\"version-added\" title=\"Added in version 9.2.0\">v9.2.0</small></h3><div class=\"types-zone\"></div><p class=\"description\"><p>Shorthand for <code class=\"language-plaintext highlighter-rouge\">mock()</code> which creates a route that will return a response to any fetch request.</p></p></section><section><h3><a id=\"api-mockingcombined-shorthands\">More shorthands</a></h3><div class=\"types-zone\"></div><p class=\"description\"><p>The atomic shorthand methods - <code class=\"language-plaintext highlighter-rouge\">.once()</code>, <code class=\"language-plaintext highlighter-rouge\">any()</code>, and <code class=\"language-plaintext highlighter-rouge\">.get()</code>, <code class=\"language-plaintext highlighter-rouge\">.post()</code>, etc. are combined into a variety of shorthand methods that blend their behaviours.</p></p><h4>Methods</h4><dl class=\"parameters\"><dt>Any once<small class=\"version-added\" title=\"Added in version 9.2.0\">v9.2.0</small><div class=\"types-zone\"></div></dt><dd><p>Create a route that responds to any single request: <code class=\"language-plaintext highlighter-rouge\">.anyOnce(response, options)</code></p></dd><dt>Method once<small class=\"version-added\" title=\"Added in version 5.3.0\">v5.3.0</small><div class=\"types-zone\"></div></dt><dd><p>Create a route that only responds to a single request using a particular http method: <code class=\"language-plaintext highlighter-rouge\">.getOnce()</code>, <code class=\"language-plaintext highlighter-rouge\">.postOnce()</code>, <code class=\"language-plaintext highlighter-rouge\">.putOnce()</code>, <code class=\"language-plaintext highlighter-rouge\">.deleteOnce()</code>, <code class=\"language-plaintext highlighter-rouge\">.headOnce()</code>, <code class=\"language-plaintext highlighter-rouge\">.patchOnce()</code></p></dd><dt>Method any<small class=\"version-added\" title=\"Added in version 9.2.0\">v9.2.0</small><div class=\"types-zone\"></div></dt><dd><p>Create a route that responds to any requests using a particular http method: <code class=\"language-plaintext highlighter-rouge\">.getAny()</code>, <code class=\"language-plaintext highlighter-rouge\">.postAny()</code>, <code class=\"language-plaintext highlighter-rouge\">.putAny()</code>, <code class=\"language-plaintext highlighter-rouge\">.deleteAny()</code>, <code class=\"language-plaintext highlighter-rouge\">.headAny()</code>, <code class=\"language-plaintext highlighter-rouge\">.patchAny()</code></p></dd><dt>Method any once<small class=\"version-added\" title=\"Added in version 9.2.0\">v9.2.0</small><div class=\"types-zone\"></div></dt><dd><p>Create a route that responds to any single request using a particular http method: <code class=\"language-plaintext highlighter-rouge\">.getAnyOnce()</code>, <code class=\"language-plaintext highlighter-rouge\">.postAnyOnce()</code>, <code class=\"language-plaintext highlighter-rouge\">.putAnyOnce()</code>, <code class=\"language-plaintext highlighter-rouge\">.deleteAnyOnce()</code>, <code class=\"language-plaintext highlighter-rouge\">.headAnyOnce()</code>, <code class=\"language-plaintext highlighter-rouge\">.patchAnyOnce()</code></p></dd></dl></section><section><h3><a id=\"api-mockingcatch\">.catch(response)</a><small class=\"version-added\" title=\"Added in version 5.0.0\">v5.0.0</small></h3><div class=\"types-zone\"></div><p class=\"description\"><p>Specifies how to respond to calls to <code class=\"language-plaintext highlighter-rouge\">fetch</code> that don\u2019t match any mocks.</p></p><p>It accepts any valid <a href=\"#api-mockingmock_response\">fetch-mock response</a>, and can also take an arbitrary function to completely customise behaviour. If no argument is passed, then every unmatched call will receive a <code class=\"language-plaintext highlighter-rouge\">200</code> response</p></section><section><h3><a id=\"api-mockingadd-matcher\">.addMatcher({name, usesBody, matcher})</a><small class=\"version-added\" title=\"Added in version 9.3.0\">v9.3.0</small></h3><div class=\"types-zone\"></div><p class=\"description\"><p>Allows adding your own, reusable custom matchers to fetch-mock, for example a matcher for interacting with GraphQL queries, or an <code class=\"language-plaintext highlighter-rouge\">isAuthorized</code> matcher that encapsulates the exact authorization conditions for the API you are mocking, and only requires a <code class=\"language-plaintext highlighter-rouge\">true</code> or <code class=\"language-plaintext highlighter-rouge\">false</code> to be input</p></p><h4>Option values</h4><dl class=\"parameters\"><dt>name<div class=\"types-zone\"><code>String</code></div></dt><dd><p>The name of your matcher. This will be the name of the property used to hold any input to your matcher.</p><div class=\"language-javascript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"dl\">\"</span><span class=\"s2\">*</span><span class=\"dl\">\"</span></code></pre></div></div></dd><dt>usesBody<div class=\"types-zone\"><code>Boolean</code></div></dt><dd><p>If your matcher requires access to the body of the request set this to true; because body can, in some cases, only be accessed by fetch-mock asynchronously, you will need to provide this hint in order to make sure the correct code paths are followed.</p></dd><dt>matcher<div class=\"types-zone\"><code>Function</code></div></dt><dd><p>A function which takes a route definition object as input, and returns a function of the signature <code class=\"language-plaintext highlighter-rouge\">(url, options, request) =&gt; Boolean</code>. See the examples below for more detail. The function is passed the fetchMock instance as a second parameter in case you need to access any config.</p></dd></dl><p class=\"info\">One intent behind this functionality is to allow companies or publishers of particular toolsets to provide packages that extend fetch-mock to provide a more user friendly experience for developers using fetch to interact with their APIs. The GraphQL use case is a good example of this - the things which a developer might want to match on are buried in the request body, and written in a non-javascript query language. Please get in touch if you\u2019d liek to collaborate on writing such a package.</p><div class=\"code-blocks\"><div title=\"Authorization example\" class=\"language-javascript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nx\">fetchMock</span>  <span class=\"p\">.</span><span class=\"nx\">addMatcher</span><span class=\"p\">({</span>    <span class=\"na\">name</span><span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">isAuthorized</span><span class=\"dl\">'</span><span class=\"p\">,</span>    <span class=\"na\">matcher</span><span class=\"p\">:</span> <span class=\"p\">({</span><span class=\"nx\">isAuthorized</span><span class=\"p\">})</span> <span class=\"o\">=&gt;</span> <span class=\"p\">(</span><span class=\"nx\">url</span><span class=\"p\">,</span> <span class=\"nx\">options</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>        <span class=\"kd\">const</span> <span class=\"nx\">actuallyIsAuthorized</span> <span class=\"o\">=</span> <span class=\"nx\">options</span><span class=\"p\">.</span><span class=\"nx\">headers</span> <span class=\"o\">&amp;&amp;</span> <span class=\"nx\">options</span><span class=\"p\">.</span><span class=\"nx\">headers</span><span class=\"p\">.</span><span class=\"nx\">auth</span><span class=\"p\">;</span>        <span class=\"k\">return</span> <span class=\"nx\">isAuthorized</span> <span class=\"p\">?</span> <span class=\"nx\">actuallyIsAuthorized</span> <span class=\"p\">:</span> <span class=\"o\">!</span><span class=\"nx\">actuallyIsAuthorized</span><span class=\"p\">;</span>    <span class=\"p\">}</span>   <span class=\"p\">})</span>  <span class=\"p\">.</span><span class=\"nx\">mock</span><span class=\"p\">({</span><span class=\"na\">isAuthorized</span><span class=\"p\">:</span> <span class=\"kc\">true</span><span class=\"p\">},</span> <span class=\"mi\">200</span><span class=\"p\">)</span>  <span class=\"p\">.</span><span class=\"nx\">mock</span><span class=\"p\">({</span><span class=\"na\">isAuthorized</span><span class=\"p\">:</span> <span class=\"kc\">false</span><span class=\"p\">},</span> <span class=\"mi\">401</span><span class=\"p\">)</span></code></pre></div></div><div title=\"GraphQL example\" class=\"language-javascript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nx\">fetchMock</span>  <span class=\"p\">.</span><span class=\"nx\">addMatcher</span><span class=\"p\">({</span>    <span class=\"na\">name</span><span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">graphqlVariables</span><span class=\"dl\">'</span><span class=\"p\">,</span>    <span class=\"na\">matcher</span><span class=\"p\">:</span> <span class=\"p\">({</span><span class=\"nx\">graphqlVariables</span><span class=\"p\">})</span> <span class=\"o\">=&gt;</span> <span class=\"p\">(</span><span class=\"nx\">url</span><span class=\"p\">,</span> <span class=\"nx\">options</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"sr\">/</span><span class=\"se\">\\/</span><span class=\"sr\">graphql$/</span><span class=\"p\">.</span><span class=\"nx\">test</span><span class=\"p\">(</span><span class=\"nx\">url</span><span class=\"p\">))</span> <span class=\"p\">{</span>            <span class=\"k\">return</span> <span class=\"kc\">false</span><span class=\"p\">;</span>        <span class=\"p\">}</span>        <span class=\"kd\">const</span> <span class=\"nx\">body</span> <span class=\"o\">=</span> <span class=\"nx\">JSON</span><span class=\"p\">.</span><span class=\"nx\">parse</span><span class=\"p\">(</span><span class=\"nx\">options</span><span class=\"p\">.</span><span class=\"nx\">body</span><span class=\"p\">)</span>        <span class=\"k\">return</span> <span class=\"nx\">body</span><span class=\"p\">.</span><span class=\"nx\">variables</span> <span class=\"o\">&amp;&amp;</span> <span class=\"nb\">Object</span><span class=\"p\">.</span><span class=\"nx\">keys</span><span class=\"p\">(</span><span class=\"nx\">body</span><span class=\"p\">.</span><span class=\"nx\">variables</span><span class=\"p\">).</span><span class=\"nx\">length</span> <span class=\"o\">===</span> <span class=\"nb\">Object</span><span class=\"p\">.</span><span class=\"nx\">keys</span><span class=\"p\">(</span><span class=\"nx\">body</span><span class=\"p\">.</span><span class=\"nx\">graphqlVariables</span><span class=\"p\">).</span><span class=\"nx\">length</span> <span class=\"o\">&amp;&amp;</span> <span class=\"nb\">Object</span><span class=\"p\">.</span><span class=\"nx\">entries</span><span class=\"p\">(</span><span class=\"nx\">graphqlVariables</span><span class=\"p\">).</span><span class=\"nx\">every</span><span class=\"p\">(([</span><span class=\"nx\">key</span><span class=\"p\">,</span> <span class=\"nx\">val</span><span class=\"p\">])</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">body</span><span class=\"p\">.</span><span class=\"nx\">variables</span><span class=\"p\">[</span><span class=\"nx\">key</span><span class=\"p\">]</span> <span class=\"o\">===</span> <span class=\"nx\">val</span><span class=\"p\">)</span>    <span class=\"p\">}</span>   <span class=\"p\">})</span>  <span class=\"p\">.</span><span class=\"nx\">mock</span><span class=\"p\">({</span><span class=\"na\">graphqlVariables</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"na\">owner</span><span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">wheresrhys</span><span class=\"dl\">'</span><span class=\"p\">}},</span> <span class=\"p\">{</span><span class=\"na\">data</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"na\">account</span><span class=\"p\">:</span> <span class=\"p\">{</span>    <span class=\"na\">name</span><span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">wheresrhys</span><span class=\"dl\">'</span><span class=\"p\">,</span>    <span class=\"na\">repos</span><span class=\"p\">:</span> <span class=\"p\">[</span> <span class=\"p\">...</span> <span class=\"p\">]</span>    <span class=\"p\">}}})</span></code></pre></div></div><div title=\"Example using fetch-mock options\" class=\"language-javascript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// TODO - can't think of a good use case yet</span><span class=\"c1\">// Raise a PR if you can :-) </span></code></pre></div></div></div></section><section><h3><a id=\"api-mockingspy\">.spy(matcher)</a><small class=\"version-added\" title=\"Added in version 5.5.0. Filtering by matcher added in v9.5.0\">v5.5.0</small></h3><div class=\"types-zone\"></div><p class=\"description\"><p>Records call history while passing each call on to <code class=\"language-plaintext highlighter-rouge\">fetch</code> to be handled by the network. Optionally pass in a <code class=\"language-plaintext highlighter-rouge\">matcher</code> to scope this to only matched calls, e.g. to fetch a specific resource from the network.</p></p><p>To use <code class=\"language-plaintext highlighter-rouge\">.spy()</code> on a sandboxed <code class=\"language-plaintext highlighter-rouge\">fetchMock</code>, <code class=\"language-plaintext highlighter-rouge\">fetchMock.config.fetch</code> must be set to the same <code class=\"language-plaintext highlighter-rouge\">fetch</code> implementation used in your application. <a href=\"#usagecustom-classes\">See how to configure this</a>. By default this will be the locally installed version of <code class=\"language-plaintext highlighter-rouge\">node-fetch</code></p></section><section><h3><a id=\"api-mockingcookies\">Setting cookies in the browser</a></h3><div class=\"types-zone\"></div><p>The <code class=\"language-plaintext highlighter-rouge\">Set-Cookie</code> header is used to set cookies in the browser. This behaviour is part of the <a href=\"https://tools.ietf.org/html/rfc6265#section-4.1\">browser/http spec</a>, not the fetch spec. As fetch-mock prevents requests getting out of js and into the browser, <code class=\"language-plaintext highlighter-rouge\">Set-Cookie</code> will have no effect.</p><p>The following code samples demonstrate how to replicate the normal cookie setting behaviour when using fetch-mock.</p><div class=\"code-blocks\"><div title=\"Set up\" class=\"language-javascript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nx\">fetchMock</span><span class=\"p\">.</span><span class=\"kd\">get</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">https://mydomain.com</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>  <span class=\"kd\">const</span> <span class=\"nx\">cookieString</span> <span class=\"o\">=</span> <span class=\"dl\">'</span><span class=\"s1\">mycookie=hello; Max-Age=3600; Path=/;</span><span class=\"dl\">'</span><span class=\"p\">;</span>  <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">cookie</span> <span class=\"o\">=</span> <span class=\"nx\">cookieString</span><span class=\"p\">;</span>  <span class=\"k\">return</span> <span class=\"p\">{</span> <span class=\"na\">status</span><span class=\"p\">:</span> <span class=\"mi\">200</span><span class=\"p\">,</span> <span class=\"na\">headers</span><span class=\"p\">:</span> <span class=\"p\">{</span> <span class=\"dl\">'</span><span class=\"s1\">Set-Cookie</span><span class=\"dl\">'</span><span class=\"p\">:</span> <span class=\"nx\">cookieString</span> <span class=\"p\">}};</span><span class=\"p\">})</span></code></pre></div></div><div title=\"Tear down\" class=\"language-javascript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nx\">fetchMock</span><span class=\"p\">.</span><span class=\"nx\">reset</span><span class=\"p\">();</span><span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">cookie</span> <span class=\"o\">=</span> <span class=\"dl\">'</span><span class=\"s1\">mycookie=; Max-Age=0</span><span class=\"dl\">'</span></code></pre></div></div></div></section></div><div class=\"docs\"><h2>Inspection methods</h2><section><h3><a id=\"api-inspectionfundamentals\">Inspection fundamentals</a></h3><div class=\"types-zone\"></div><p class=\"description\"><p class=\"info\">Check out the new <a href=\"https://github.com/wheresrhys/fetch-mock/blob/master/docs/cheatsheet.md\">cheatsheet</a></p><p><code class=\"language-plaintext highlighter-rouge\">fetch-mock</code>\u2019s inspection methods allow information about how <code class=\"language-plaintext highlighter-rouge\">fetch</code> was called to be retrieved after your application code has run. Most inspection methods take two arguments \u2014 <code class=\"language-plaintext highlighter-rouge\">filter</code> and <code class=\"language-plaintext highlighter-rouge\">options</code> \u2014 which allow individual, or groups of, <code class=\"language-plaintext highlighter-rouge\">fetch</code> calls to be extracted and examined.</p></p><h4>Parameters</h4><dl class=\"parameters\"><dt>filter<div class=\"types-zone\"></div></dt><dd><p>Filter calls to <code class=\"language-plaintext highlighter-rouge\">fetch</code> using one of the following criteria:</p><dl class=\"options\"><dt><div class=\"types-zone\"><code class=\"name\">undefined</code><small class=\"version-added\" title=\"Added in version 6.0.0\">v6.0.0</small></div></dt><dd><p>Retrieve all calls made to <code class=\"language-plaintext highlighter-rouge\">fetch</code></p></dd><dt><div class=\"types-zone\"><code class=\"name\">true</code><small class=\"version-added\" title=\"Added in version 6.0.0\">v6.0.0</small></div></dt><dd><p>Retrieve all calls to <code class=\"language-plaintext highlighter-rouge\">fetch</code> matched by some route defined by <code class=\"language-plaintext highlighter-rouge\">fetch-mock</code>. The string <code class=\"language-plaintext highlighter-rouge\">'matched'</code> can be used instead of <code class=\"language-plaintext highlighter-rouge\">true</code> to make tests more readable</p><div class=\"language-javascript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">const</span> <span class=\"p\">{</span><span class=\"nx\">MATCHED</span><span class=\"p\">,</span> <span class=\"nx\">fetchMock</span><span class=\"p\">}</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">fetch-mock</span><span class=\"dl\">'</span><span class=\"p\">);</span><span class=\"p\">...</span><span class=\"nx\">fetchMock</span><span class=\"p\">.</span><span class=\"nx\">calls</span><span class=\"p\">(</span><span class=\"nx\">MATCHED</span><span class=\"p\">)</span></code></pre></div></div></dd><dt><div class=\"types-zone\"><code class=\"name\">false</code><small class=\"version-added\" title=\"Added in version 6.0.0\">v6.0.0</small></div></dt><dd><p>Retrieve all calls to <code class=\"language-plaintext highlighter-rouge\">fetch</code> not matched by some route defined by <code class=\"language-plaintext highlighter-rouge\">fetch-mock</code>. The string <code class=\"language-plaintext highlighter-rouge\">'unmatched'</code> can be used instead of <code class=\"language-plaintext highlighter-rouge\">false</code> to make tests more readable</p><div class=\"language-javascript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">const</span> <span class=\"p\">{</span><span class=\"nx\">UNMATCHED</span><span class=\"p\">,</span> <span class=\"nx\">fetchMock</span><span class=\"p\">}</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">fetch-mock</span><span class=\"dl\">'</span><span class=\"p\">);</span><span class=\"p\">...</span><span class=\"nx\">fetchMock</span><span class=\"p\">.</span><span class=\"nx\">calls</span><span class=\"p\">(</span><span class=\"nx\">UNMATCHED</span><span class=\"p\">)</span></code></pre></div></div></dd><dt><div class=\"types-zone\"><code class=\"name\">\"matched\"</code>|<code class=\"name\">\"unmatched\"</code><small class=\"version-added\" title=\"Added in version 9.0.0\">v9.0.0</small></div></dt><dd><p>Aliases for <code class=\"language-plaintext highlighter-rouge\">true</code> and <code class=\"language-plaintext highlighter-rouge\">false</code></p></dd><dt>routeIdentifier<small class=\"version-added\" title=\"Added in version 2.0.0\">v2.0.0</small><div class=\"types-zone\"><code>String</code>|<code>RegExp</code>|<code>function</code></div></dt><dd><p>All routes have an identifier:</p><ul>  <li>If it\u2019s a <a href=\"#api-mockingmock_options\">named route</a>, the identifier is the route\u2019s <code class=\"language-plaintext highlighter-rouge\">name</code></li>  <li>If the route is unnamed, the identifier is the value of the <code class=\"language-plaintext highlighter-rouge\">matcher</code> argument that was passed in to <code class=\"language-plaintext highlighter-rouge\">.mock()</code></li></ul><p>All calls that were handled by the route with the given identifier will be retrieved</p></dd><dt>matcher<small class=\"version-added\" title=\"Added in version 7.0.0\">v7.0.0</small><div class=\"types-zone\"><code>String</code>|<code>RegExp</code>|<code>function</code></div></dt><dd><p>Any matcher compatible with the <a href=\"#api-mockingmock_matcher\">mocking api</a> can be passed in to filter the calls arbitrarily. The matcher will be executed using exactly the same rules as the mocking api</p></dd></dl></dd><dt>options<small class=\"version-added\" title=\"Added in version 7.0.0\">v7.0.0</small><div class=\"types-zone\"><code>Object</code>|<code>String</code></div></dt><dd><p>Either an object compatible with the <a href=\"#api-mockingmock_options\">mocking api</a> or a string specifying a http method to filter by. This will be used to filter the list of calls further</p></dd></dl><p>The filtering API is powerful, but potentially confusing. If in doubt, <a href=\"#api-mockingmock_options\">add a <code class=\"language-plaintext highlighter-rouge\">name</code> to your route</a>, and pass that name in to retrieve exactly the calls you want.</p><h4 id=\"a-note-on-regular-expression-and-function-matchers\">A note on Regular Expression and Function matchers</h4><p>To retrieve calls handled by a route with a <code class=\"language-plaintext highlighter-rouge\">RegExp</code> or <code class=\"language-plaintext highlighter-rouge\">function</code> matcher, use a reference to the exact <code class=\"language-plaintext highlighter-rouge\">RegExp</code>|<code class=\"language-plaintext highlighter-rouge\">function</code> you used in your mock, e.g.</p><div class=\"language-javascript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">const</span> <span class=\"nx\">matcherRX</span> <span class=\"o\">=</span> <span class=\"sr\">/user</span><span class=\"se\">\\/</span><span class=\"sr\">biff/</span><span class=\"nx\">fm</span><span class=\"p\">.</span><span class=\"nx\">mock</span><span class=\"p\">(</span><span class=\"nx\">matcherRX</span><span class=\"p\">,</span> <span class=\"mi\">200</span><span class=\"p\">)</span><span class=\"p\">...</span><span class=\"nx\">fm</span><span class=\"p\">.</span><span class=\"nx\">called</span><span class=\"p\">(</span><span class=\"nx\">matcherRX</span><span class=\"p\">)</span></code></pre></div></div><p>not</p><div class=\"language-javascript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nx\">fm</span><span class=\"p\">.</span><span class=\"nx\">mock</span><span class=\"p\">(</span><span class=\"sr\">/user</span><span class=\"se\">\\/</span><span class=\"sr\">biff/</span><span class=\"p\">,</span> <span class=\"mi\">200</span><span class=\"p\">)</span><span class=\"p\">...</span><span class=\"nx\">fm</span><span class=\"p\">.</span><span class=\"nx\">called</span><span class=\"p\">(</span><span class=\"sr\">/user</span><span class=\"se\">\\/</span><span class=\"sr\">biff/</span><span class=\"p\">)</span></code></pre></div></div><p>The second example <em>will</em> retrieve the expected calls in simple test scenarios because if no routes match using the identifier the <code class=\"language-plaintext highlighter-rouge\">RegExp</code> will be executed as a <code class=\"language-plaintext highlighter-rouge\">RegExp</code> matcher. But in more complex scenarios where e.g. there are several routes handling similar paths, it might retrieve calls that were actually handled by different, similar route e.g.</p><div class=\"language-javascript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">const</span> <span class=\"nx\">matcherRX</span> <span class=\"o\">=</span> <span class=\"sr\">/user</span><span class=\"se\">\\/</span><span class=\"sr\">biff/</span><span class=\"nx\">fm</span>  <span class=\"p\">.</span><span class=\"nx\">mock</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">end:user/biff</span><span class=\"dl\">'</span><span class=\"p\">)</span>  <span class=\"p\">.</span><span class=\"nx\">mock</span><span class=\"p\">(</span><span class=\"nx\">matcherRX</span><span class=\"p\">,</span> <span class=\"mi\">200</span><span class=\"p\">)</span><span class=\"p\">...</span><span class=\"c1\">// this will retrieve calls handled by either route</span><span class=\"nx\">fm</span><span class=\"p\">.</span><span class=\"nx\">called</span><span class=\"p\">(</span><span class=\"sr\">/user</span><span class=\"se\">\\/</span><span class=\"sr\">biff/</span><span class=\"p\">)</span><span class=\"c1\">// this will retrieve only calls handled by the second route</span><span class=\"nx\">fm</span><span class=\"p\">.</span><span class=\"nx\">called</span><span class=\"p\">(</span><span class=\"nx\">matcherRX</span><span class=\"p\">)</span></code></pre></div></div></section><section><h3><a id=\"api-inspectioncalled\">.called(filter, options)</a><small class=\"version-added\" title=\"Added in version 1.0.0\">v1.0.0</small></h3><div class=\"types-zone\"></div><p class=\"description\"><p>Returns a Boolean indicating whether any calls to <code class=\"language-plaintext highlighter-rouge\">fetch</code> matched the given <code class=\"language-plaintext highlighter-rouge\">filter</code> and <code class=\"language-plaintext highlighter-rouge\">options</code></p></p></section><section><h3><a id=\"api-inspectioncalls\">.calls(filter, options)</a><small class=\"version-added\" title=\"Added in version 1.0.0\">v1.0.0</small></h3><div class=\"types-zone\"></div><p class=\"description\"><p>Returns an array of all calls to fetch matching the given <code class=\"language-plaintext highlighter-rouge\">filter</code> and <code class=\"language-plaintext highlighter-rouge\">options</code>. Each call is returned as a <code class=\"language-plaintext highlighter-rouge\">[url, options]</code> array. If <code class=\"language-plaintext highlighter-rouge\">fetch</code> was called using a <code class=\"language-plaintext highlighter-rouge\">Request</code> instance, the <code class=\"language-plaintext highlighter-rouge\">url</code> and <code class=\"language-plaintext highlighter-rouge\">options</code> will be inferred from it, and the original <code class=\"language-plaintext highlighter-rouge\">Request</code> will be available as a <code class=\"language-plaintext highlighter-rouge\">request</code> property on this array.</p></p></section><section><h3><a id=\"api-inspectionlastCall\">.lastCall(filter, options)</a><small class=\"version-added\" title=\"Added in version 4.0.0\">v4.0.0</small></h3><div class=\"types-zone\"></div><p class=\"description\"><p>Returns the arguments for the last call to <code class=\"language-plaintext highlighter-rouge\">fetch</code> matching the given <code class=\"language-plaintext highlighter-rouge\">filter</code> and <code class=\"language-plaintext highlighter-rouge\">options</code>. The call is returned as a <code class=\"language-plaintext highlighter-rouge\">[url, options]</code> array. If <code class=\"language-plaintext highlighter-rouge\">fetch</code> was called using a <code class=\"language-plaintext highlighter-rouge\">Request</code> instance, the <code class=\"language-plaintext highlighter-rouge\">url</code> and <code class=\"language-plaintext highlighter-rouge\">options</code> will be inferred from it, and the original <code class=\"language-plaintext highlighter-rouge\">Request</code> will be available as a <code class=\"language-plaintext highlighter-rouge\">request</code> property on this array.</p></p></section><section><h3><a id=\"api-inspectionlastUrl\">.lastUrl(filter, options)</a><small class=\"version-added\" title=\"Added in version 4.0.0\">v4.0.0</small></h3><div class=\"types-zone\"></div><p class=\"description\"><p>Returns the url for the last call to <code class=\"language-plaintext highlighter-rouge\">fetch</code> matching the given <code class=\"language-plaintext highlighter-rouge\">filter</code> and <code class=\"language-plaintext highlighter-rouge\">options</code>. If <code class=\"language-plaintext highlighter-rouge\">fetch</code> was last called using a <code class=\"language-plaintext highlighter-rouge\">Request</code> instance, the url will be inferred from this</p></p></section><section><h3><a id=\"api-inspectionlastOptions\">.lastOptions(filter, options)</a><small class=\"version-added\" title=\"Added in version 4.0.0\">v4.0.0</small></h3><div class=\"types-zone\"></div><p class=\"description\"><p>Returns the options for the last call to <code class=\"language-plaintext highlighter-rouge\">fetch</code> matching the given <code class=\"language-plaintext highlighter-rouge\">filter</code> and <code class=\"language-plaintext highlighter-rouge\">options</code>. If <code class=\"language-plaintext highlighter-rouge\">fetch</code> was last called using a <code class=\"language-plaintext highlighter-rouge\">Request</code> instance, a set of <code class=\"language-plaintext highlighter-rouge\">options</code> inferred from the <code class=\"language-plaintext highlighter-rouge\">Request</code> will be returned</p></p></section><section><h3><a id=\"api-inspectionlastResponse\">.lastResponse(filter, options)</a><small class=\"version-added\" title=\"Added in version 9.10.0\">v9.10.0</small></h3><div class=\"types-zone\"></div><p class=\"description\"><p>Returns the <code class=\"language-plaintext highlighter-rouge\">Response</code> for the last call to <code class=\"language-plaintext highlighter-rouge\">fetch</code> matching the given <code class=\"language-plaintext highlighter-rouge\">filter</code> and <code class=\"language-plaintext highlighter-rouge\">options</code>. This is an experimental feature, very difficult to implement well given fetch\u2019s very private treatment of response bodies.</p><p class=\"warning\">If <code class=\"language-plaintext highlighter-rouge\">.lastResponse()</code> is called before fetch has been resolved then it will return <code class=\"language-plaintext highlighter-rouge\">undefined</code></p><p>When doing all the following:</p><ul class=\"warning\">  <li>using node-fetch</li>  <li>responding with a real network response (using spy() or fallbackToNetwork)</li>  <li>using `fetchMock.LastResponse()`</li>  <li>awaiting the body content<br />  \u2026 the response will hang unless your source code also awaits the response body.  This is an unavoidable consequence of the nodejs implementation of streams.</li></ul><p class=\"info\">To obtain json/text responses await the <code class=\"language-plaintext highlighter-rouge\">.json()/.text()</code> methods of the response</p></p></section><section><h3><a id=\"api-inspectiondone\">.done(filter)</a><small class=\"version-added\" title=\"Added in version 5.3.0\">v5.3.0</small></h3><div class=\"types-zone\"></div><p class=\"description\"><p>Returns a Boolean indicating whether <code class=\"language-plaintext highlighter-rouge\">fetch</code> was called the expected number of times (or has been called at least once if <code class=\"language-plaintext highlighter-rouge\">repeat</code> is undefined for the route). It does not take into account whether the <code class=\"language-plaintext highlighter-rouge\">fetches</code> completed successfully.</p></p><h4>Parameters</h4><dl class=\"parameters\"><dt>matcherOrName<div class=\"types-zone\"></div></dt><dd><p>Rule for matching calls to <code class=\"language-plaintext highlighter-rouge\">fetch</code>.</p><dl class=\"options\"><dt><div class=\"types-zone\"><code class=\"name\">undefined</code>|<code class=\"name\">true</code></div></dt><dd><p>Returns true if all routes have been called the expected number of times</p></dd><dt>routeIdentifier<div class=\"types-zone\"><code>String|RegExp|function</code></div></dt><dd><p>All routes have an identifier:</p><ul>  <li>If it\u2019s a named route, the identifier is the route\u2019s name</li>  <li>If the route is unnamed, the identifier is the <code class=\"language-plaintext highlighter-rouge\">matcher</code> passed in to <code class=\"language-plaintext highlighter-rouge\">.mock()</code></li></ul><p>Returns true if the routes specified by the identifier has been called the expected number of times</p></dd></dl></dd></dl><p>If several routes have the same matcher/url, but use <a href=\"#apimockingmock_options\">mocking options</a>, the recommended way to handle this is to <a href=\"#api-mockingmock_options\">name each route</a> and filter using those names</p></section></div><div class=\"docs\"><h2>Lifecycle methods</h2><section><h3><a id=\"api-lifecyclesandbox\">.sandbox()</a><small class=\"version-added\" title=\"Added in version 5.6.0\">v5.6.0</small></h3><div class=\"types-zone\"></div><p class=\"description\"><p>Returns a function that can be used as a drop-in replacement for <code class=\"language-plaintext highlighter-rouge\">fetch</code>. Pass this into your mocking library of choice. The function returned by <code class=\"language-plaintext highlighter-rouge\">sandbox()</code> has all the methods of <code class=\"language-plaintext highlighter-rouge\">fetch-mock</code> exposed on it and maintains its own state independent of other instances, so tests can be run in parallel.</p></p><div class=\"code-blocks\"><div title=\"Example\" class=\"language-javascript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nx\">fetchMock</span>  <span class=\"p\">.</span><span class=\"nx\">sandbox</span><span class=\"p\">()</span>  <span class=\"p\">.</span><span class=\"nx\">mock</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">http://domain.com</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"mi\">200</span><span class=\"p\">)</span></code></pre></div></div></div></section><section><h3><a id=\"api-lifecycleflush\">.flush(waitForBody)</a><small class=\"version-added\" title=\"Added in version 5.11.0\">v5.11.0</small></h3><div class=\"types-zone\"></div><p class=\"description\"><p>Returns a <code class=\"language-plaintext highlighter-rouge\">Promise</code> that resolves once all fetches handled by fetch-mock have resolved</p></p><p>Useful for testing code that uses <code class=\"language-plaintext highlighter-rouge\">fetch</code> but doesn\u2019t return a promise.</p><p>If <code class=\"language-plaintext highlighter-rouge\">waitForBody</code> is <code class=\"language-plaintext highlighter-rouge\">true</code>, the promise will wait for all body parsing methods (<code class=\"language-plaintext highlighter-rouge\">res.json()</code>, <code class=\"language-plaintext highlighter-rouge\">res.text()</code>, etc.) to resolve too.</p></section><section><h3><a id=\"api-lifecyclerestore_reset\">.restore(), .reset()</a><small class=\"version-added\" title=\"Added in version 7.0.0\">v7.0.0</small></h3><div class=\"types-zone\"></div><p class=\"description\"><p>Resets <code class=\"language-plaintext highlighter-rouge\">fetch()</code> to its unstubbed state and clears all data recorded for its calls. <code class=\"language-plaintext highlighter-rouge\">restore()</code> is an alias for <code class=\"language-plaintext highlighter-rouge\">reset()</code>. Optionally pass in a <code class=\"language-plaintext highlighter-rouge\">{sticky: true}</code> option to remove even sticky routes.</p></p><p>Both methods are bound to fetchMock, and can be used directly as callbacks e.g. <code class=\"language-plaintext highlighter-rouge\">afterEach(fetchMock.reset)</code> will work just fine. There is no need for <code class=\"language-plaintext highlighter-rouge\">afterEach(() =&gt; fetchMock.reset())</code></p></section><section><h3><a id=\"api-lifecycleresetHistory\">.resetHistory()</a><small class=\"version-added\" title=\"Added in version 7.0.0\">v7.0.0</small></h3><div class=\"types-zone\"></div><p class=\"description\"><p>Clears all data recorded for <code class=\"language-plaintext highlighter-rouge\">fetch</code>\u2019s calls. It <em>will not</em> restore fetch to its default implementation</p></p><p><code class=\"language-plaintext highlighter-rouge\">resetHistory()</code> is bound to fetchMock, and can be used directly as a callback e.g. <code class=\"language-plaintext highlighter-rouge\">afterEach(fetchMock.resetHistory)</code> will work just fine. There is no need for <code class=\"language-plaintext highlighter-rouge\">afterEach(() =&gt; fetchMock.resetHistory())</code></p></section><section><h3><a id=\"api-lifecycleresetBehavior\">.resetBehavior()</a><small class=\"version-added\" title=\"Added in version 7.0.0\">v7.0.0</small></h3><div class=\"types-zone\"></div><p class=\"description\"><p>Removes all mock routes from the instance of <code class=\"language-plaintext highlighter-rouge\">fetch-mock</code>, and restores <code class=\"language-plaintext highlighter-rouge\">fetch</code> to its original implementation if mocking globally. Will not clear data recorded for <code class=\"language-plaintext highlighter-rouge\">fetch</code>\u2019s calls. Optionally pass in a <code class=\"language-plaintext highlighter-rouge\">{sticky: true}</code> option to remove even sticky routes.</p></p></section></div><div class=\"docs\"><h2>Troubleshooting</h2><section><h3><a id=\"troubleshootingtroubleshooting\">General</a></h3><div class=\"types-zone\"></div><p>The first  step when debugging tests should be to run with the environment variable <code class=\"language-plaintext highlighter-rouge\">DEBUG=fetch-mock*</code>. This will output additional logs for debugging purposes.</p><h3 id=\"fetch-is-assigned-to-a-local-variable-not-a-global\"><code class=\"language-plaintext highlighter-rouge\">fetch</code> is assigned to a local variable, not a global</h3><p>First of all, consider whether you could just use <code class=\"language-plaintext highlighter-rouge\">fetch</code> as a global. Here are 3 reasons why this is a good idea:</p><ul>  <li>The <code class=\"language-plaintext highlighter-rouge\">fetch</code> standard defines it as a global (and in some cases it won\u2019t work unless bound to <code class=\"language-plaintext highlighter-rouge\">window</code>), so to write isomorphic code it\u2019s probably best to stick to this pattern</li>  <li><a href=\"https://www.npmjs.com/package/isomorphic-fetch\"><code class=\"language-plaintext highlighter-rouge\">isomorphic-fetch</code></a> takes care of installing it as a global in Node.js or the browser, so there\u2019s no effort on your part to do so.</li>  <li><code class=\"language-plaintext highlighter-rouge\">fetch-mock</code> is primarily designed to work with <code class=\"language-plaintext highlighter-rouge\">fetch</code> as a global and your experience of using it will be far more straightforward if you follow this pattern</li></ul><p>Still not convinced?</p><p>In that case <code class=\"language-plaintext highlighter-rouge\">fetchMock.sandbox()</code> can be used to generate a function which you can pass in to a mock loading library such as <a href=\"https://www.npmjs.com/package/mockery\"><code class=\"language-plaintext highlighter-rouge\">mockery</code></a> instead of <code class=\"language-plaintext highlighter-rouge\">fetch</code></p><h3 id=\"fetch-doesnt-seem-to-be-getting-mocked\"><code class=\"language-plaintext highlighter-rouge\">fetch</code> doesn\u2019t seem to be getting mocked?</h3><ul>  <li>If using a mock loading library such as <code class=\"language-plaintext highlighter-rouge\">mockery</code>, are you requiring the module you\u2019re testing after registering <code class=\"language-plaintext highlighter-rouge\">fetch-mock</code> with the mock loader? You probably should be (<a href=\"https://github.com/wheresrhys/fetch-mock/issues/70\">Example incorrect usage</a>). If you\u2019re using ES6 <code class=\"language-plaintext highlighter-rouge\">import</code> it may not be possible to do this without reverting to using <code class=\"language-plaintext highlighter-rouge\">require()</code> sometimes.</li>  <li>If using <code class=\"language-plaintext highlighter-rouge\">isomorphic-fetch</code> in your source, are you assigning it to a <code class=\"language-plaintext highlighter-rouge\">fetch</code> variable? You <em>shouldn\u2019t</em> be i.e.    <ul>      <li><code class=\"language-plaintext highlighter-rouge\">import 'isomorphic-fetch'</code>, not <code class=\"language-plaintext highlighter-rouge\">import fetch from 'isomorphic-fetch'</code></li>      <li><code class=\"language-plaintext highlighter-rouge\">require('isomorphic-fetch')</code>, not <code class=\"language-plaintext highlighter-rouge\">const fetch = require('isomorphic-fetch')</code></li>    </ul>  </li></ul><h3 id=\"environment-doesnt-support-requiring-fetch-mock\">Environment doesn\u2019t support requiring fetch-mock?</h3><ul>  <li>If your client-side code or tests do not use a loader that respects the browser field of package.json use <code class=\"language-plaintext highlighter-rouge\">require('fetch-mock/es5/client')</code>.</li>  <li>If you need to use fetch-mock without commonjs, you can include the precompiled <code class=\"language-plaintext highlighter-rouge\">node_modules/fetch-mock/es5/client-browserified.js</code> in a script tag. This loads fetch-mock into the <code class=\"language-plaintext highlighter-rouge\">fetchMock</code> global variable.</li>  <li>For server side tests running in Node.js 0.12 or lower use <code class=\"language-plaintext highlighter-rouge\">require('fetch-mock/es5/server')</code></li></ul><h3 id=\"matching-request-objects-in-node-fails\">Matching <code class=\"language-plaintext highlighter-rouge\">Request</code> objects in node fails</h3><p>In node, if your <code class=\"language-plaintext highlighter-rouge\">Request</code> object is not an instance of the <code class=\"language-plaintext highlighter-rouge\">Request</code>constructor used by fetch-mock, you need to set a reference to your customrequest class. This needs to be done if you are mocking the <code class=\"language-plaintext highlighter-rouge\">Request</code> objectfor a test or you are running npm with a version below 3.</p><ul>  <li>use <code class=\"language-plaintext highlighter-rouge\">fetchMock.config.Request = myRequest</code>, where <code class=\"language-plaintext highlighter-rouge\">myRequest</code> is a reference to the Request constructor used in your application code.</li></ul></section></div></main><script>document.getElementById(\"open-nav\").addEventListener(\"click\", function () {document.body.classList.toggle(\"nav-open\");});</script></body></html>",
  "embeddings": []
}
{
  "libtype": "npm",
  "libname": "standard",
  "url": "https://standardjs.com",
  "html": "<!DOCTYPE html><html>  <head>    <title>JavaScript Standard Style</title>    <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, viewport-fit=cover\" />    <link type=\"text/css\" rel=\"stylesheet\" href=\"main.css\" />    <link rel=\"apple-touch-icon\" sizes=\"57x57\" href=\"apple-touch-icon-57x57.png\">    <link rel=\"apple-touch-icon\" sizes=\"60x60\" href=\"apple-touch-icon-60x60.png\">    <link rel=\"apple-touch-icon\" sizes=\"72x72\" href=\"apple-touch-icon-72x72.png\">    <link rel=\"apple-touch-icon\" sizes=\"76x76\" href=\"apple-touch-icon-76x76.png\">    <link rel=\"apple-touch-icon\" sizes=\"114x114\" href=\"apple-touch-icon-114x114.png\">    <link rel=\"apple-touch-icon\" sizes=\"120x120\" href=\"apple-touch-icon-120x120.png\">    <link rel=\"apple-touch-icon\" sizes=\"144x144\" href=\"apple-touch-icon-144x144.png\">    <link rel=\"apple-touch-icon\" sizes=\"152x152\" href=\"apple-touch-icon-152x152.png\">    <link rel=\"apple-touch-icon\" sizes=\"180x180\" href=\"apple-touch-icon-180x180.png\">    <link rel=\"icon\" type=\"image/png\" href=\"favicon-32x32.png\" sizes=\"32x32\">    <link rel=\"icon\" type=\"image/png\" href=\"android-chrome-192x192.png\" sizes=\"192x192\">    <link rel=\"icon\" type=\"image/png\" href=\"favicon-96x96.png\" sizes=\"96x96\">    <link rel=\"icon\" type=\"image/png\" href=\"favicon-16x16.png\" sizes=\"16x16\">    <link rel=\"manifest\" href=\"manifest.json\">    <link rel=\"mask-icon\" href=\"safari-pinned-tab.svg\" color=\"#f3df49\">    <link rel=\"shortcut icon\" href=\"favicon.ico\">    <meta name=\"msapplication-TileColor\" content=\"#603cba\">    <meta name=\"msapplication-TileImage\" content=\"/mstile-144x144.png\">    <meta name=\"msapplication-config\" content=\"/browserconfig.xml\">    <meta name=\"theme-color\" content=\"#f3df49\">    <link href='https://fonts.googleapis.com/css?family=Source+Sans+Pro:400,700,400italic,700italic' rel='stylesheet' type='text/css'>  </head><body class=\"readme\"><script async type=\"text/javascript\" src=\"//cdn.carbonads.com/carbon.js?serve=CE7DT2QU&placement=standardjscom\" id=\"_carbonads_js\"></script><nav><ul>    <li><a href='/'>Home</a></li>    <li><a href='/demo'>Try It Out</a></li>    <li><a href='/#install'>Install</a></li>    <li><a href='/rules'>Rules</a></li>    <li><a href='/#why-should-i-use-javascript-standard-style'>FAQ</a></li>    <li><a href='/awesome'>Ecosystem</a></li>    <li><a href='/changelog'>Change Log</a></li>    <li><a href='/authors'>Authors</a></li>    <li><a href=\"https://github.com/standard/standard\">GitHub</a></ul></nav><div class=\"content\"><h1 align=\"center\">  <a href=\"https://standardjs.com\"><img src=\"https://cdn.rawgit.com/standard/standard/master/sticker.svg\" alt=\"Standard - JavaScript Style Guide\" width=\"200\"></a>  <br>  JavaScript Standard Style  <br>  <br></h1><p align=\"center\">  <a href=\"https://discord.gg/ZegqCBr\"><img src=\"https://img.shields.io/discord/612704110008991783?logo=discord&#x26;logoColor=white&#x26;label=Discord&#x26;color=5865F2\" alt=\"discord\"></a>  <a href=\"https://github.com/standard/standard/actions/workflows/test-external.yml\"><img src=\"https://github.com/standard/standard/actions/workflows/test-external.yml/badge.svg?branch=master\" alt=\"External tests\"></a>  <a href=\"https://github.com/standard/standard/actions/workflows/test-internal.yml\"><img src=\"https://github.com/standard/standard/actions/workflows/test-internal.yml/badge.svg?branch=master\" alt=\"Internal tests\"></a>  <a href=\"https://github.com/standard/standard/actions?query=workflow%3A%22Old+test%22\"><img src=\"https://github.com/standard/standard/workflows/Old%20test/badge.svg\" alt=\"status badge old Node test\"></a>  <a href=\"https://www.npmjs.com/package/standard\"><img src=\"https://img.shields.io/npm/v/standard.svg\" alt=\"npm version\"></a>  <a href=\"https://www.npmjs.com/package/eslint-config-standard\"><img src=\"https://img.shields.io/npm/dm/eslint-config-standard.svg\" alt=\"npm downloads\"></a>  <a href=\"https://standardjs.com\"><img src=\"https://img.shields.io/badge/code_style-standard-brightgreen.svg\" alt=\"Standard - JavaScript Style Guide\"></a></p><h5 align=\"center\">  Sponsored by\u00a0\u00a0\u00a0\u00a0<a href=\"https://socket.dev\"><img src=\"https://cdn.rawgit.com/standard/standard/master/docs/logos/socket.png\" alt=\"Socket \u2013 Supply Chain Dependency Security for JavaScript and npm\" height=\"50\" valign=\"middle\"></a>\u00a0\u00a0\u00a0\u00a0<a href=\"https://wormhole.app/?utm_medium=sponsorship&#x26;utm_source=standard&#x26;utm_campaign=feross\"><img src=\"https://cdn.rawgit.com/standard/standard/master/docs/logos/wormhole.png\" alt=\"Wormhole\" height=\"50\" valign=\"middle\"></a></h5><p align=\"center\">  <a href='/readme-en'>English</a> \u2022  <a href='/readme-esla'>Espa\u00f1ol (Latinoam\u00e9rica)</a> \u2022  <a href='/readme-fr'>Fran\u00e7ais</a> \u2022  <a href='/readme-id'>Bahasa Indonesia</a> \u2022  <a href='/readme-iteu'>Italiano (Italian)</a> \u2022  <a href='/readme-ja'>\u65e5\u672c\u8a9e (Japanese)</a> \u2022  <a href='/readme-kokr'>\ud55c\uad6d\uc5b4 (Korean)</a> \u2022  <a href='/readme-ptbr'>Portugu\u00eas (Brasil)</a> \u2022  <a href='/readme-zhcn'>\u7b80\u4f53\u4e2d\u6587 (Simplified Chinese)</a> \u2022  <a href='/readme-zhtw'>\u7e41\u9ad4\u4e2d\u6587 (Taiwanese Mandarin)</a></p><h2 id=\"javascript-style-guide-linter-and-formatter\"><a href=\"#javascript-style-guide-linter-and-formatter\">JavaScript style guide, linter, and formatter</a></h2><p>This module saves you (and others!) time in three ways:</p><ul><li><strong>No configuration.</strong> The easiest way to enforce code quality in yourproject. No decisions to make. No <code>.eslintrc</code> files to manage. It just works.</li><li><strong>Automatically format code.</strong> Just run <code>standard --fix</code> and say goodbye tomessy or inconsistent code.</li><li><strong>Catch style issues &#x26; programmer errors early.</strong> Save precious code reviewtime by eliminating back-and-forth between reviewer &#x26; contributor.</li></ul><p>Give it a try by running <code>npx standard --fix</code> right now!</p><h2 id=\"table-of-contents\"><a href=\"#table-of-contents\">Table of Contents</a></h2><ul><li>Quick start<ul><li><a href=\"#install\">Install</a></li><li><a href=\"#usage\">Usage</a></li><li><a href=\"#what-you-might-do-if-youre-clever\">What you might do if you're clever</a></li></ul></li><li>FAQ<ul><li><a href=\"#why-should-i-use-javascript-standard-style\">Why should I use JavaScript Standard Style?</a></li><li><a href=\"#who-uses-javascript-standard-style\">Who uses JavaScript Standard Style?</a></li><li><a href=\"#are-there-text-editor-plugins\">Are there text editor plugins?</a></li><li><a href=\"#is-there-a-readme-badge\">Is there a readme badge?</a></li><li><a href=\"#i-disagree-with-rule-x-can-you-change-it\">I disagree with rule X, can you change it?</a></li><li><a href=\"#but-this-isnt-a-real-web-standard\">But this isn't a real web standard!</a></li><li><a href=\"#is-there-an-automatic-formatter\">Is there an automatic formatter?</a></li><li><a href=\"#how-do-i-ignore-files\">How do I ignore files?</a></li><li><a href=\"#how-do-i-disable-a-rule\">How do I disable a rule?</a></li><li><a href=\"#i-use-a-library-that-pollutes-the-global-namespace-how-do-i-prevent-variable-is-not-defined-errors\">I use a library that pollutes the global namespace. How do I prevent \"variable is not defined\" errors?</a></li><li><a href=\"#how-do-i-use-experimental-javascript-es-next-features\">How do I use experimental JavaScript (ES Next) features?</a></li><li><a href=\"#can-i-use-a-javascript-language-variant-like-flow-or-typescript\">Can I use a JavaScript language variant, like Flow or TypeScript?</a></li><li><a href=\"#what-about-mocha-jest-jasmine-qunit-etc\">What about Mocha, Jest, Jasmine, QUnit, etc?</a></li><li><a href=\"#what-about-web-workers-and-service-workers\">What about Web Workers and Service Workers?</a></li><li><a href=\"#what-is-the-difference-between-warnings-and-errors\">What is the difference between warnings and errors?</a></li><li><a href=\"#can-i-check-code-inside-of-markdown-or-html-files\">Can I check code inside of Markdown or HTML files?</a></li><li><a href=\"#is-there-a-git-pre-commit-hook\">Is there a Git <code>pre-commit</code> hook?</a></li><li><a href=\"#how-do-i-make-the-output-all-colorful-and-pretty\">How do I make the output all colorful and pretty?</a></li><li><a href=\"#is-there-a-nodejs-api\">Is there a Node.js API?</a></li><li><a href=\"#how-do-i-contribute-to-standardjs\">How do I contribute to StandardJS?</a></li></ul></li></ul><h2 id=\"install\"><a href=\"#install\">Install</a></h2><p>The easiest way to use JavaScript Standard Style is to install it globally as aNode command line program. Run the following command in Terminal:</p><pre><code class=\"hljs language-bash\">$ npm install standard --global</code></pre><p>Or, you can install <code>standard</code> locally, for use in a single project:</p><pre><code class=\"hljs language-bash\">$ npm install standard --save-dev</code></pre><p><em>Note: To run the preceding commands, <a href=\"http://nodejs.org\">Node.js</a> and <a href=\"https://npmjs.com\">npm</a> must be installed.</em></p><h2 id=\"usage\"><a href=\"#usage\">Usage</a></h2><p>After you've installed <code>standard</code>, you should be able to use the <code>standard</code> program. Thesimplest use case would be checking the style of all JavaScript files in thecurrent working directory:</p><pre><code class=\"hljs language-bash\">$ standardError: Use JavaScript Standard Style  lib/torrent.js:950:11: Expected <span class=\"string\">'==='</span> and instead saw <span class=\"string\">'=='</span>.</code></pre><p>If you've installed <code>standard</code> locally, run with <code>npx</code> instead:</p><pre><code class=\"hljs language-bash\">$ npx standard</code></pre><p>You can optionally pass in a directory (or directories) using the glob pattern. Besure to quote paths containing glob patterns so that they are expanded by<code>standard</code> instead of your shell:</p><pre><code class=\"hljs language-bash\">$ standard <span class=\"string\">\"src/util/**/*.js\"</span> <span class=\"string\">\"test/**/*.js\"</span></code></pre><p><strong>Note:</strong> by default <code>standard</code> will look for all files matching the patterns:<code>**/*.js</code>, <code>**/*.jsx</code>.</p><h2 id=\"what-you-might-do-if-youre-clever\"><a href=\"#what-you-might-do-if-youre-clever\">What you might do if you're clever</a></h2><ol><li><p>Add it to <code>package.json</code></p><pre><code class=\"hljs language-json\">{  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"my-cool-package\"</span>,  <span class=\"attr\">\"devDependencies\"</span>: {    <span class=\"attr\">\"standard\"</span>: <span class=\"string\">\"*\"</span>  },  <span class=\"attr\">\"scripts\"</span>: {    <span class=\"attr\">\"test\"</span>: <span class=\"string\">\"standard &#x26;&#x26; node my-tests.js\"</span>  }}</code></pre></li><li><p>Style is checked automatically when you run <code>npm test</code></p><pre><code class=\"hljs language-bash\">$ npm <span class=\"built_in\">test</span>Error: Use JavaScript Standard Style  lib/torrent.js:950:11: Expected <span class=\"string\">'==='</span> and instead saw <span class=\"string\">'=='</span>.</code></pre></li><li><p>Never give style feedback on a pull request again!</p></li></ol><h2 id=\"why-should-i-use-javascript-standard-style\"><a href=\"#why-should-i-use-javascript-standard-style\">Why should I use JavaScript Standard Style?</a></h2><p>The beauty of JavaScript Standard Style is that it's simple. No one wants tomaintain multiple hundred-line style configuration files for every module/projectthey work on. Enough of this madness!</p><p>This module saves you (and others!) time in three ways:</p><ul><li><strong>No configuration.</strong> The easiest way to enforce consistent style in yourproject. Just drop it in.</li><li><strong>Automatically format code.</strong> Just run <code>standard --fix</code> and say goodbye tomessy or inconsistent code.</li><li><strong>Catch style issues &#x26; programmer errors early.</strong> Save precious code reviewtime by eliminating back-and-forth between reviewer &#x26; contributor.</li></ul><p>Adopting <code>standard</code> style means ranking the importance of code clarity andcommunity conventions higher than personal style. This might not make sense for100% of projects and development cultures, however open source can be a hostileplace for newbies. Setting up clear, automated contributor expectations makes aproject healthier.</p><p>For more info, see the conference talk <a href=\"https://www.youtube.com/watch?v=kuHfMw8j4xk\">\"Write Perfect Code with Standard andESLint\"</a>. In this talk, you'll learnabout linting, when to use <code>standard</code> versus <code>eslint</code>, and how <code>prettier</code> comparesto <code>standard</code>.</p><h2 id=\"who-uses-javascript-standard-style\"><a href=\"#who-uses-javascript-standard-style\">Who uses JavaScript Standard Style?</a></h2><table><thead><tr><th><a href=\"https://nodejs.org\"><img width=\"190\" src=\"https://cdn.rawgit.com/standard/standard/master/docs/logos/nodejs.png\"></a></th><th><a href=\"https://www.npmjs.com\"><img width=\"190\" src=\"https://cdn.rawgit.com/standard/standard/master/docs/logos/npm.png\"></a></th><th><a href=\"https://github.com\"><img width=\"190\" src=\"https://cdn.rawgit.com/standard/standard/master/docs/logos/github.png\"></a></th><th><a href=\"https://wormhole.app\"><img width=\"190\" src=\"https://cdn.rawgit.com/standard/standard/master/docs/logos/wormhole.png\"></a></th></tr></thead><tbody></tbody></table><table><thead><tr><th><a href=\"http://expressjs.com\"><img width=\"190\" src=\"https://cdn.rawgit.com/standard/standard/master/docs/logos/express.png\"></a></th><th><a href=\"http://electron.atom.io\"><img width=\"190\" src=\"https://cdn.rawgit.com/standard/standard/master/docs/logos/electron.png\"></a></th><th><a href=\"https://nuxtjs.org/\"><img width=\"190\" src=\"https://cdn.rawgit.com/standard/standard/master/docs/logos/nuxtjs.png\"></a></th><th><a href=\"https://www.elastic.co\"><img width=\"190\" src=\"https://cdn.rawgit.com/standard/standard/master/docs/logos/elastic.png\"></a></th></tr></thead><tbody></tbody></table><table><thead><tr><th><a href=\"https://www.mongodb.com\"><img width=\"190\" src=\"https://cdn.rawgit.com/standard/standard/master/docs/logos/mongodb.jpg\"></a></th><th><a href=\"https://www.zendesk.com\"><img width=\"190\" src=\"https://cdn.rawgit.com/standard/standard/master/docs/logos/zendesk.png\"></a></th><th><a href=\"https://www.brave.com\"><img width=\"190\" src=\"https://cdn.rawgit.com/standard/standard/master/docs/logos/brave.png\"></a></th><th><a href=\"https://vercel.com\"><img width=\"190\" src=\"https://assets.vercel.com/image/upload/v1621541666/front/assets/logotype-black-on-white.png\"></a></th></tr></thead><tbody></tbody></table><table><thead><tr><th><a href=\"https://socket.dev\"><img width=\"190\" src=\"https://cdn.rawgit.com/standard/standard/master/docs/logos/socket.png\"></a></th><th><a href=\"http://www.nearform.com\"><img width=\"190\" src=\"https://cdn.rawgit.com/standard/standard/master/docs/logos/nearform.png\"></a></th><th><a href=\"https://www.typeform.com\"><img width=\"190\" src=\"https://cdn.rawgit.com/standard/standard/master/docs/logos/typeform.png\"></a></th><th><a href=\"https://gds.blog.gov.uk\"><img width=\"190\" src=\"https://cdn.rawgit.com/standard/standard/master/docs/logos/gov-uk.png\"></a></th></tr></thead><tbody></tbody></table><table><thead><tr><th><a href=\"https://www.heroku.com\"><img width=\"190\" src=\"https://cdn.rawgit.com/standard/standard/master/docs/logos/heroku.png\"></a></th><th><a href=\"https://saucelabs.com\"><img width=\"190\" src=\"https://cdn.rawgit.com/standard/standard/master/docs/logos/saucelabs.png\"></a></th><th><a href=\"https://automattic.com\"><img width=\"190\" src=\"https://cdn.rawgit.com/standard/standard/master/docs/logos/automattic.png\"></a></th><th><a href=\"https://www.godaddy.com\"><img width=\"190\" src=\"https://cdn.rawgit.com/standard/standard/master/docs/logos/godaddy.png\"></a></th></tr></thead><tbody></tbody></table><table><thead><tr><th><a href=\"https://webtorrent.io\"><img width=\"190\" src=\"https://cdn.rawgit.com/standard/standard/master/docs/logos/webtorrent.png\"></a></th><th><a href=\"https://ipfs.io\"><img width=\"190\" src=\"https://cdn.rawgit.com/standard/standard/master/docs/logos/ipfs.png\"></a></th><th><a href=\"https://datproject.org\"><img width=\"190\" src=\"https://cdn.rawgit.com/standard/standard/master/docs/logos/dat.png\"></a></th><th><a href=\"https://bitcoinjs.org\"><img width=\"190\" src=\"https://cdn.rawgit.com/standard/standard/master/docs/logos/bitcoinjs.png\"></a></th></tr></thead><tbody></tbody></table><table><thead><tr><th><a href=\"https://voltra.co\"><img width=\"190\" src=\"https://cdn.rawgit.com/standard/standard/master/docs/logos/voltra.png\"></a></th><th><a href=\"https://www.treasuredata.com\"><img width=\"190\" src=\"https://cdn.rawgit.com/standard/standard/master/docs/logos/treasuredata.png\"></a></th><th><a href=\"https://bitmidi.com\"><img alt=\"Free MIDIs, MIDI file downloads\" width=\"190\" src=\"https://cdn.rawgit.com/standard/standard/master/docs/logos/bitmidi.png\"></a></th><th><a href=\"https://www.apstudynotes.org\"><img width=\"190\" alt=\"College essays, AP notes\" src=\"https://cdn.rawgit.com/standard/standard/master/docs/logos/studynotes.jpg\"></a></th></tr></thead><tbody></tbody></table><table><thead><tr><th><a href=\"https://www.optiopay.com\"><img width=\"190\" src=\"https://cdn.rawgit.com/standard/standard/master/docs/logos/optiopay.png\"></a></th><th><a href=\"https://www.jlrtechincubator.com/jlrti/\"><img width=\"190\" src=\"https://cdn.rawgit.com/standard/standard/master/docs/logos/jaguar-landrover.png\"></a></th><th><a href=\"https://www.bustle.com\"><img width=\"190\" src=\"https://cdn.rawgit.com/standard/standard/master/docs/logos/bustle.jpg\"></a></th><th><a href=\"https://www.zentrick.com\"><img width=\"190\" src=\"https://cdn.rawgit.com/standard/standard/master/docs/logos/zentrick.png\"></a></th></tr></thead><tbody></tbody></table><table><thead><tr><th><a href=\"https://greenkeeper.io\"><img width=\"190\" src=\"https://cdn.rawgit.com/standard/standard/master/docs/logos/greenkeeper.png\"></a></th><th><a href=\"https://karma-runner.github.io\"><img width=\"190\" src=\"https://cdn.rawgit.com/standard/standard/master/docs/logos/karma.png\"></a></th><th><a href=\"https://www.taser.com\"><img width=\"190\" src=\"https://cdn.rawgit.com/standard/standard/master/docs/logos/taser.png\"></a></th><th><a href=\"https://www.neo4j.com\"><img width=\"190\" src=\"https://cdn.rawgit.com/standard/standard/master/docs/logos/neo4j.png\"></a></th></tr></thead><tbody></tbody></table><table><thead><tr><th><a href=\"https://rentograph.com\"><img width=\"190\" src=\"https://cdn.rawgit.com/standard/standard/master/docs/logos/rentograph.png\"></a></th><th><a href=\"https://www.eaze.com\"><img width=\"190\" src=\"https://cdn.rawgit.com/standard/standard/master/docs/logos/eaze.png\"></a></th><th><a href=\"https://www.ctrlaltdeseat.com\"><img width=\"190\" src=\"https://cdn.rawgit.com/standard/standard/master/docs/logos/ctrl-alt-deseat.png\"></a></th><th><a href=\"https://clevertech.biz\"><img width=\"190\" src=\"https://cdn.rawgit.com/standard/standard/master/docs/logos/clevertech.png\"></a></th></tr></thead><tbody></tbody></table><table><thead><tr><th><a href=\"https://aragon.org\"><img width=\"190\" src=\"https://cdn.rawgit.com/standard/standard/master/docs/logos/aragon.png\"></a></th><th><a href=\"https://www.flowsent.com\"><img width=\"190\" src=\"https://cdn.rawgit.com/standard/standard/master/docs/logos/flowsent.png\"></a></th><th><a href=\"https://www.pumabrowser.com/\"><img width=\"190\" src=\"https://cdn.rawgit.com/standard/standard/master/docs/logos/puma-browser.png\"></a></th><th><a href=\"https://www.jetbrains.com/webstorm/\"><img width=\"190\" src=\"https://cdn.rawgit.com/standard/standard/master/docs/logos/webstorm.png\"></a></th></tr></thead><tbody></tbody></table><table><thead><tr><th><a href=\"https://www.fastify.io\"><img width=\"190\" src=\"https://cdn.rawgit.com/standard/standard/master/docs/logos/fastify.png\"></a></th><th><a href=\"https://www.scuttlebutt.nz\"><img width=\"190\" src=\"https://cdn.rawgit.com/standard/standard/master/docs/logos/scuttlebutt.png\"></a></th><th><a href=\"https://solid.inrupt.com\"><img width=\"190\" src=\"https://cdn.rawgit.com/standard/standard/master/docs/logos/solid.png\"></a></th><th><a href=\"https://www.grab.com\"><img width=\"190\" src=\"https://cdn.rawgit.com/standard/standard/master/docs/logos/grab.png\"></a></th></tr></thead><tbody></tbody></table><table><thead><tr><th><a href=\"https://jublia.com/\"><img width=\"190\" src=\"https://cdn.rawgit.com/standard/standard/master/docs/logos/jublia.png\"></a></th><th><a href=\"https://atom.io\"><img width=\"190\" src=\"https://cdn.rawgit.com/standard/standard/master/docs/logos/atom.png\"></a></th><th><a href=\"https://www.peek.com\"><img width=\"190\" src=\"https://cdn.rawgit.com/standard/standard/master/docs/logos/peek.png\"></a></th><th><a href=\"https://www.dotenv.org\"><img width=\"190\" src=\"https://cdn.rawgit.com/standard/standard/master/docs/logos/dotenv.png\"></a></th></tr></thead><tbody></tbody></table><table><thead><tr><th><a href=\"https://nodesource.com\"><img width=\"190\" src=\"https://cdn.rawgit.com/standard/standard/master/docs/logos/nodesource.png\"></a></th><th><a href=\"https://www.searchapi.io/\"><img width=\"190\" src=\"https://cdn.rawgit.com/standard/standard/master/docs/logos/searchapi.png\"></a></th><th>Your Logo Here</th><th></th></tr></thead><tbody></tbody></table><p>In addition to companies, many community members use <code>standard</code> on packages thatare <a href=\"https://raw.githubusercontent.com/standard/standard-packages/master/all.json\">too numerous</a>to list here.</p><p><code>standard</code> is also the top-starred linter in GitHub's<a href=\"https://github.com/showcases/clean-code-linters\">Clean Code Linter</a> showcase.</p><h2 id=\"are-there-text-editor-plugins\"><a href=\"#are-there-text-editor-plugins\">Are there text editor plugins?</a></h2><p>First, install <code>standard</code>. Then, install the appropriate plugin for your editor:</p><h3 id=\"sublime-text\"><a href=\"#sublime-text\">Sublime Text</a></h3><p>Using <strong><a href=\"https://packagecontrol.io/\">Package Control</a></strong>, install <strong><a href=\"http://www.sublimelinter.com/en/latest/\">SublimeLinter</a></strong> and<strong><a href=\"https://packagecontrol.io/packages/SublimeLinter-contrib-standard\">SublimeLinter-contrib-standard</a></strong>.</p><p>For automatic formatting on save, install <strong><a href=\"https://packagecontrol.io/packages/StandardFormat\">StandardFormat</a></strong>.</p><h3 id=\"atom\"><a href=\"#atom\">Atom</a></h3><p>Install <strong><a href=\"https://atom.io/packages/linter-js-standard\">linter-js-standard</a></strong>.</p><p>Alternatively, you can install <strong><a href=\"https://atom.io/packages/linter-js-standard-engine\">linter-js-standard-engine</a></strong>. Instead ofbundling a version of <code>standard</code> it will automatically use the version installedin your current project. It will also work out of the box with other linters basedon <strong><a href=\"https://github.com/standard/standard-engine\">standard-engine</a></strong>.</p><p>For automatic formatting, install <strong><a href=\"https://atom.io/packages/standard-formatter\">standard-formatter</a></strong>. For snippets,install <strong><a href=\"https://atom.io/packages/standardjs-snippets\">standardjs-snippets</a></strong>.</p><h3 id=\"visual-studio-code\"><a href=\"#visual-studio-code\">Visual Studio Code</a></h3><p>Install <strong><a href=\"https://marketplace.visualstudio.com/items?itemName=standard.vscode-standard\">vscode-standard</a></strong>. (Includes support for automatic formatting.)</p><p>For JS snippets, install: <strong><a href=\"https://marketplace.visualstudio.com/items?itemName=capaj.vscode-standardjs-snippets\">vscode-standardjs-snippets</a></strong>. For React snippets, install <strong><a href=\"https://marketplace.visualstudio.com/items?itemName=TimonVS.ReactSnippetsStandard\">vscode-react-standard</a></strong>.</p><h3 id=\"vim\"><a href=\"#vim\">Vim</a></h3><p>Install <strong><a href=\"https://github.com/w0rp/ale\">ale</a></strong>. And add these lines to your <code>.vimrc</code> file.</p><pre><code class=\"hljs language-vim\"><span class=\"keyword\">let</span> <span class=\"variable\">g:ale_linters</span> = {\\   <span class=\"string\">'javascript'</span>: [<span class=\"string\">'standard'</span>],\\}<span class=\"keyword\">let</span> <span class=\"variable\">g:ale_fixers</span> = {<span class=\"string\">'javascript'</span>: [<span class=\"string\">'standard'</span>]}</code></pre><p>This sets standard as your only linter and fixer for javascript files and so prevents conflicts with eslint. For linting and automatic fixing on save, add these lines to <code>.vimrc</code>:</p><pre><code class=\"hljs language-vim\"><span class=\"keyword\">let</span> <span class=\"variable\">g:ale_lint_on_save</span> = <span class=\"number\">1</span><span class=\"keyword\">let</span> <span class=\"variable\">g:ale_fix_on_save</span> = <span class=\"number\">1</span></code></pre><p>Alternative plugins to consider include <a href=\"https://github.com/neomake/neomake\">neomake</a> and <a href=\"https://github.com/vim-syntastic/syntastic\">syntastic</a>, both of which have built-in support for <code>standard</code> (though configuration may be necessary).</p><h3 id=\"emacs\"><a href=\"#emacs\">Emacs</a></h3><p>Install <strong><a href=\"http://www.flycheck.org\">Flycheck</a></strong> and check out the <strong><a href=\"http://www.flycheck.org/en/latest/user/installation.html\">manual</a></strong> to learnhow to enable it in your projects.</p><h3 id=\"brackets\"><a href=\"#brackets\">Brackets</a></h3><p>Search the extension registry for <strong><a href=\"https://github.com/ishamf/brackets-standard/\">\"Standard Code Style\"</a></strong> and click \"Install\".</p><h3 id=\"webstorm-phpstorm-intellij-rubymine-jetbrains-etc\"><a href=\"#webstorm-phpstorm-intellij-rubymine-jetbrains-etc\">WebStorm (PhpStorm, IntelliJ, RubyMine, JetBrains, etc.)</a></h3><p>WebStorm <a href=\"https://blog.jetbrains.com/webstorm/2017/01/webstorm-2017-1-eap-171-2272/\">recently announced native support</a>for <code>standard</code> directly in the IDE.</p><p>If you still prefer to configure <code>standard</code> manually, <a href='/webstorm'>follow this guide</a>. This applies to all JetBrains products, including PhpStorm, IntelliJ, RubyMine, etc.</p><h2 id=\"is-there-a-readme-badge\"><a href=\"#is-there-a-readme-badge\">Is there a readme badge?</a></h2><p>Yes! If you use <code>standard</code> in your project, you can include one of these badges inyour readme to let people know that your code is using the standard style.</p><p><a href=\"https://github.com/standard/standard\"><img src=\"https://cdn.rawgit.com/standard/standard/master/badge.svg\" alt=\"JavaScript Style Guide\"></a></p><pre><code class=\"hljs language-md\">[<span class=\"string\">![JavaScript Style Guide</span>](<span class=\"link\">https://cdn.rawgit.com/standard/standard/master/badge.svg</span>)](<span class=\"link\">https://github.com/standard/standard</span>)</code></pre><p><a href=\"https://standardjs.com\"><img src=\"https://img.shields.io/badge/code_style-standard-brightgreen.svg\" alt=\"JavaScript Style Guide\"></a></p><pre><code class=\"hljs language-md\">[<span class=\"string\">![JavaScript Style Guide</span>](<span class=\"link\">https://img.shields.io/badge/code_style-standard-brightgreen.svg</span>)](<span class=\"link\">https://standardjs.com</span>)</code></pre><h2 id=\"i-disagree-with-rule-x-can-you-change-it\"><a href=\"#i-disagree-with-rule-x-can-you-change-it\">I disagree with rule X, can you change it?</a></h2><p>No. The whole point of <code>standard</code> is to save you time by avoiding<a href=\"https://docs.freebsd.org/en/books/faq/#bikeshed-painting\">bikeshedding</a> about code style. There are lots of debates online abouttabs vs. spaces, etc. that will never be resolved. These debates just distract fromgetting stuff done. At the end of the day you have to 'just pick something', andthat's the whole philosophy of <code>standard</code> -- its a bunch of sensible 'just picksomething' opinions. Hopefully, users see the value in that over defending theirown opinions.</p><p>There are a couple of similar packages for anyone who does not want to completely accept <code>standard</code>:</p><ul><li><a href=\"https://github.com/standard/semistandard\">semistandard</a> - standard, with semicolons</li><li><a href=\"https://github.com/standard/standardx\">standardx</a> - standard, with custom tweaks</li></ul><p>If you really want to configure hundreds of ESLint rules individually, you canalways use <code>eslint</code> directly with<a href=\"https://github.com/standard/eslint-config-standard\">eslint-config-standard</a> tolayer your changes on top.<a href=\"https://github.com/josephfrazier/standard-eject\"><code>standard-eject</code></a> can helpyou migrate from <code>standard</code> to <code>eslint</code> and <code>eslint-config-standard</code>.</p><p>Pro tip: Just use <code>standard</code> and move on. There are actual real problems that youcould spend your time solving! :P</p><h2 id=\"but-this-isnt-a-real-web-standard\"><a href=\"#but-this-isnt-a-real-web-standard\">But this isn't a real web standard!</a></h2><p>Of course it's not! The style laid out here is not affiliated with any official webstandards groups, which is why this repo is called <code>standard/standard</code> and not<code>ECMA/standard</code>.</p><p>The word \"standard\" has more meanings than just \"web standard\" :-) For example:</p><ul><li>This module helps hold our code to a high <em>standard of quality</em>.</li><li>This module ensures that new contributors follow some basic <em>style standards</em>.</li></ul><h2 id=\"is-there-an-automatic-formatter\"><a href=\"#is-there-an-automatic-formatter\">Is there an automatic formatter?</a></h2><p>Yes! You can use <code>standard --fix</code> to fix most issues automatically.</p><p><code>standard --fix</code> is built into <code>standard</code> for maximum convenience. Most problemsare fixable, but some errors (like forgetting to handle errors) must be fixedmanually.</p><p>To save you time, <code>standard</code> outputs the message \"<code>Run standard --fix to automatically fix some problems</code>\" when it detects problems that can be fixedautomatically.</p><h2 id=\"how-do-i-ignore-files\"><a href=\"#how-do-i-ignore-files\">How do I ignore files?</a></h2><p>Certain paths (<code>node_modules/</code>, <code>coverage/</code>, <code>vendor/</code>, <code>*.min.js</code>,and files/folders that begin with <code>.</code> like <code>.git/</code>) are automatically ignored.</p><p>Paths in a project's root <code>.gitignore</code> file are also automatically ignored.</p><p>Sometimes you need to ignore additional folders or specific minified files. To dothat, add a <code>standard.ignore</code> property to <code>package.json</code>:</p><pre><code class=\"hljs language-json\"><span class=\"string\">\"standard\"</span>: {  <span class=\"attr\">\"ignore\"</span>: [    <span class=\"string\">\"**/out/\"</span>,    <span class=\"string\">\"/lib/select2/\"</span>,    <span class=\"string\">\"/lib/ckeditor/\"</span>,    <span class=\"string\">\"tmp.js\"</span>  ]}</code></pre><h2 id=\"how-do-i-disable-a-rule\"><a href=\"#how-do-i-disable-a-rule\">How do I disable a rule?</a></h2><p>In rare cases, you'll need to break a rule and hide the error generated by<code>standard</code>.</p><p>JavaScript Standard Style uses <a href=\"http://eslint.org/\">ESLint</a> under-the-hood andyou can hide errors as you normally would if you used ESLint directly.</p><p>Disable <strong>all rules</strong> on a specific line:</p><pre><code class=\"hljs language-js\">file = <span class=\"string\">'I know what I am doing'</span> <span class=\"comment\">// eslint-disable-line</span></code></pre><p>Or, disable <strong>only</strong> the <code>\"no-use-before-define\"</code> rule:</p><pre><code class=\"hljs language-js\">file = <span class=\"string\">'I know what I am doing'</span> <span class=\"comment\">// eslint-disable-line no-use-before-define</span></code></pre><p>Or, disable the <code>\"no-use-before-define\"</code> rule for <strong>multiple lines</strong>:</p><pre><code class=\"hljs language-js\"><span class=\"comment\">/* eslint-disable no-use-before-define */</span><span class=\"built_in\">console</span>.log(<span class=\"string\">'offending code goes here...'</span>)<span class=\"built_in\">console</span>.log(<span class=\"string\">'offending code goes here...'</span>)<span class=\"built_in\">console</span>.log(<span class=\"string\">'offending code goes here...'</span>)<span class=\"comment\">/* eslint-enable no-use-before-define */</span></code></pre><h2 id=\"i-use-a-library-that-pollutes-the-global-namespace-how-do-i-prevent-variable-is-not-defined-errors\"><a href=\"#i-use-a-library-that-pollutes-the-global-namespace-how-do-i-prevent-variable-is-not-defined-errors\">I use a library that pollutes the global namespace. How do I prevent \"variable is not defined\" errors?</a></h2><p>Some packages (e.g. <code>mocha</code>) put their functions (e.g. <code>describe</code>, <code>it</code>) on theglobal object (poor form!). Since these functions are not defined or <code>require</code>'danywhere in your code, <code>standard</code> will warn that you're using a variable that isnot defined (usually, this rule is really useful for catching typos!). But we wantto disable it for these global variables.</p><p>To let <code>standard</code> (as well as humans reading your code) know that certain variablesare global in your code, add this to the top of your file:</p><pre><code class=\"hljs language-js\"><span class=\"comment\">/* global myVar1, myVar2 */</span></code></pre><p>If you have hundreds of files, it may be desirable to avoid adding comments toevery file. In this case, run:</p><pre><code class=\"hljs language-bash\">$ standard --global myVar1 --global myVar2</code></pre><p>Or, add this to <code>package.json</code>:</p><pre><code class=\"hljs language-json\">{  <span class=\"attr\">\"standard\"</span>: {    <span class=\"attr\">\"globals\"</span>: [ <span class=\"string\">\"myVar1\"</span>, <span class=\"string\">\"myVar2\"</span> ]  }}</code></pre><p><em>Note: <code>global</code> and <code>globals</code> are equivalent.</em></p><h2 id=\"how-do-i-use-experimental-javascript-es-next-features\"><a href=\"#how-do-i-use-experimental-javascript-es-next-features\">How do I use experimental JavaScript (ES Next) features?</a></h2><p><code>standard</code> supports the latest ECMAScript features, ES8 (ES2017), includinglanguage feature proposals that are in \"Stage 4\" of the proposal process.</p><p>To support experimental language features, <code>standard</code> supports specifying acustom JavaScript parser. Before using a custom parser, consider whether the addedcomplexity is worth it.</p><p>To use a custom parser, first install it from npm:</p><pre><code class=\"hljs language-bash\">npm install @babel/eslint-parser --save-dev</code></pre><p>Then run:</p><pre><code class=\"hljs language-bash\">$ standard --parser @babel/eslint-parser</code></pre><p>Or, add this to <code>package.json</code>:</p><pre><code class=\"hljs language-json\">{  <span class=\"attr\">\"standard\"</span>: {    <span class=\"attr\">\"parser\"</span>: <span class=\"string\">\"@babel/eslint-parser\"</span>  }}</code></pre><h2 id=\"can-i-use-a-javascript-language-variant-like-flow-or-typescript\"><a href=\"#can-i-use-a-javascript-language-variant-like-flow-or-typescript\">Can I use a JavaScript language variant, like Flow or TypeScript?</a></h2><p><code>standard</code> supports the latest ECMAScript features. However, Flow and TypeScript add newsyntax to the language, so they are not supported out-of-the-box.</p><p>For TypeScript, an official variant <code>ts-standard</code> is supported and maintained that provides a verysimilar experience to <code>standard</code>.</p><p>For other JavaScript language variants, <code>standard</code> supports specifying a custom JavaScriptparser as well as an ESLint plugin to handle the changed syntax. Before using a JavaScriptlanguage variant, consider whether the added complexity is worth it.</p><h3 id=\"typescript\"><a href=\"#typescript\">TypeScript</a></h3><p><a href=\"https://github.com/standard/ts-standard\"><code>ts-standard</code></a> is the officially supported variant forTypeScript. <code>ts-standard</code> supports all the same rules and options as <code>standard</code> and includesadditional TypeScript specific rules. <code>ts-standard</code> will even lint regular <code>javascript</code> filesby setting the configuration in <code>tsconfig.json</code>.</p><pre><code class=\"hljs language-bash\">npm install ts-standard --save-dev</code></pre><p>Then run (where <code>tsconfig.json</code> is located in the working directory):</p><pre><code class=\"hljs language-bash\">$ ts-standard</code></pre><p>Or, add this to <code>package.json</code>:</p><pre><code class=\"hljs language-json\">{  <span class=\"attr\">\"ts-standard\"</span>: {    <span class=\"attr\">\"project\"</span>: <span class=\"string\">\"./tsconfig.json\"</span>  }}</code></pre><p><em>Note: To include additional files in linting such as test files, create a <code>tsconfig.eslint.json</code> file to use instead.</em></p><p>If you really want to configure hundreds of ESLint rules individually, you can always use eslintdirectly with <a href=\"https://github.com/standard/eslint-config-standard-with-typescript\"><code>eslint-config-standard-with-typescript</code></a>to layer your changes on top.</p><h3 id=\"flow\"><a href=\"#flow\">Flow</a></h3><p>To use Flow, you need to run <code>standard</code> with <code>@babel/eslint-parser</code> as the parser and<code>eslint-plugin-flowtype</code> as a plugin.</p><pre><code class=\"hljs language-bash\">npm install @babel/eslint-parser eslint-plugin-flowtype --save-dev</code></pre><p>Then run:</p><pre><code class=\"hljs language-bash\">$ standard --parser @babel/eslint-parser --plugin flowtype</code></pre><p>Or, add this to <code>package.json</code>:</p><pre><code class=\"hljs language-json\">{  <span class=\"attr\">\"standard\"</span>: {    <span class=\"attr\">\"parser\"</span>: <span class=\"string\">\"@babel/eslint-parser\"</span>,    <span class=\"attr\">\"plugins\"</span>: [ <span class=\"string\">\"flowtype\"</span> ]  }}</code></pre><p><em>Note: <code>plugin</code> and <code>plugins</code> are equivalent.</em></p><h2 id=\"what-about-mocha-jest-jasmine-qunit-etc\"><a href=\"#what-about-mocha-jest-jasmine-qunit-etc\">What about Mocha, Jest, Jasmine, QUnit, etc?</a></h2><p>To support mocha in test files, add this to the top of the test files:</p><pre><code class=\"hljs language-js\"><span class=\"comment\">/* eslint-env mocha */</span></code></pre><p>Or, run:</p><pre><code class=\"hljs language-bash\">$ standard --env mocha</code></pre><p>Where <code>mocha</code> can be one of <code>jest</code>, <code>jasmine</code>, <code>qunit</code>, <code>phantomjs</code>, and so on. To see afull list, check ESLint's<a href=\"https://eslint.org/docs/latest/use/configure/language-options#specifying-environments\">specifying environments</a>documentation. For a list of what globals are available for these environments,check the<a href=\"https://github.com/sindresorhus/globals/blob/master/globals.json\">globals</a> npmmodule.</p><p><em>Note: <code>env</code> and <code>envs</code> are equivalent.</em></p><h2 id=\"what-about-web-workers-and-service-workers\"><a href=\"#what-about-web-workers-and-service-workers\">What about Web Workers and Service Workers?</a></h2><p>Add this to the top of web worker files:</p><pre><code class=\"hljs language-js\"><span class=\"comment\">/* eslint-env worker */</span></code></pre><p>This lets <code>standard</code> (as well as humans reading the code) know that <code>self</code> is aglobal in web worker code.</p><p>For Service workers, add this instead:</p><pre><code class=\"hljs language-js\"><span class=\"comment\">/* eslint-env serviceworker */</span></code></pre><h2 id=\"what-is-the-difference-between-warnings-and-errors\"><a href=\"#what-is-the-difference-between-warnings-and-errors\">What is the difference between warnings and errors?</a></h2><p><code>standard</code> treats all rule violations as errors, which means that <code>standard</code>will exit with a non-zero (error) exit code.</p><p>However, we may occasionally release a new major version of <code>standard</code>which changes a rule that affects the majority of <code>standard</code> users (for example,transitioning from <code>var</code> to <code>let</code>/<code>const</code>). We do this only when we think theadvantage is worth the cost and only when the rule is<a href=\"#is-there-an-automatic-formatter\">auto-fixable</a>.</p><p>In these situations, we have a \"transition period\" where the rule change is onlya \"warning\". Warnings don't cause <code>standard</code> to return a non-zero (error)exit code. However, a warning message will still print to the console. Duringthe transition period, <code>using standard --fix</code> will update your code so that it'sready for the next major version.</p><p>The slow and careful approach is what we strive for with <code>standard</code>. We'regenerally extremely conservative in enforcing the usage of new languagefeatures. We want using <code>standard</code> to be light and fun and so we're carefulabout making changes that may get in your way. As always, you can<a href=\"#how-do-i-disable-a-rule\">disable a rule</a> at any time, if necessary.</p><h2 id=\"can-i-check-code-inside-of-markdown-or-html-files\"><a href=\"#can-i-check-code-inside-of-markdown-or-html-files\">Can I check code inside of Markdown or HTML files?</a></h2><p>To check code inside Markdown files, use <a href=\"https://www.npmjs.com/package/standard-markdown\"><code>standard-markdown</code></a>.</p><p>Alternatively, there are ESLint plugins that can check code inside Markdown, HTML,and many other types of language files:</p><p>To check code inside Markdown files, use an ESLint plugin:</p><pre><code class=\"hljs language-bash\">$ npm install eslint-plugin-markdown</code></pre><p>Then, to check JS that appears inside code blocks, run:</p><pre><code class=\"hljs language-bash\">$ standard --plugin markdown <span class=\"string\">'**/*.md'</span></code></pre><p>To check code inside HTML files, use an ESLint plugin:</p><pre><code class=\"hljs language-bash\">$ npm install eslint-plugin-html</code></pre><p>Then, to check JS that appears inside <code>&#x3C;script></code> tags, run:</p><pre><code class=\"hljs language-bash\">$ standard --plugin html <span class=\"string\">'**/*.html'</span></code></pre><h2 id=\"is-there-a-git-pre-commit-hook\"><a href=\"#is-there-a-git-pre-commit-hook\">Is there a Git <code>pre-commit</code> hook?</a></h2><p>Yes! Hooks are great for ensuring that unstyled code never even makes it into your repo.Never give style feedback on a pull request again!</p><p>You even have a choice...</p><h3 id=\"install-your-own-hook\"><a href=\"#install-your-own-hook\">Install your own hook</a></h3><pre><code class=\"hljs language-bash\"><span class=\"meta\">#!/bin/bash</span><span class=\"comment\"># Ensure all JavaScript files staged for commit pass standard code style</span><span class=\"keyword\">function</span> xargs-<span class=\"function\"><span class=\"title\">r</span></span>() {  <span class=\"comment\"># Portable version of \"xargs -r\". The -r flag is a GNU extension that</span>  <span class=\"comment\"># prevents xargs from running if there are no input files.</span>  <span class=\"keyword\">if</span> IFS= <span class=\"built_in\">read</span> -r -d $<span class=\"string\">'\\n'</span> path; <span class=\"keyword\">then</span>    <span class=\"built_in\">echo</span> <span class=\"string\">\"<span class=\"variable\">$path</span>\"</span> | cat - | xargs <span class=\"string\">\"<span class=\"variable\">$@</span>\"</span>  <span class=\"keyword\">fi</span>}git diff --name-only --cached --relative | grep <span class=\"string\">'\\.jsx\\?$'</span> | sed <span class=\"string\">'s/[^[:alnum:]]/\\\\&#x26;/g'</span> | xargs-r -E <span class=\"string\">''</span> -t standard<span class=\"keyword\">if</span> [[ $? -ne 0 ]]; <span class=\"keyword\">then</span>  <span class=\"built_in\">echo</span> <span class=\"string\">'JavaScript Standard Style errors were detected. Aborting commit.'</span>  <span class=\"built_in\">exit</span> 1<span class=\"keyword\">fi</span></code></pre><h3 id=\"use-a-pre-commit-hook\"><a href=\"#use-a-pre-commit-hook\">Use a <code>pre-commit</code> hook</a></h3><p>The <a href=\"https://pre-commit.com/\">pre-commit</a> library allows hooks to be declared within a <code>.pre-commit-config.yaml</code> configuration file in the repo, and therefore more easily maintained across a team.</p><p>Users of pre-commit can simply add <code>standard</code> to their <code>.pre-commit-config.yaml</code> file, which will automatically fix <code>.js</code>, <code>.jsx</code>, <code>.mjs</code> and <code>.cjs</code> files:</p><pre><code class=\"hljs language-yaml\">  <span class=\"bullet\">-</span> <span class=\"attr\">repo:</span> <span class=\"string\">https://github.com/standard/standard</span>    <span class=\"attr\">rev:</span> <span class=\"string\">master</span>    <span class=\"attr\">hooks:</span>      <span class=\"bullet\">-</span> <span class=\"attr\">id:</span> <span class=\"string\">standard</span></code></pre><p>Alternatively, for more advanced styling configurations, use <code>standard</code> within the <a href=\"https://github.com/pre-commit/mirrors-eslint\">eslint hook</a>:</p><pre><code class=\"hljs language-yaml\">  <span class=\"bullet\">-</span> <span class=\"attr\">repo:</span> <span class=\"string\">https://github.com/pre-commit/mirrors-eslint</span>    <span class=\"attr\">rev:</span> <span class=\"string\">master</span>    <span class=\"attr\">hooks:</span>      <span class=\"bullet\">-</span> <span class=\"attr\">id:</span> <span class=\"string\">eslint</span>        <span class=\"attr\">files:</span> <span class=\"string\">\\.[jt]sx?$</span>  <span class=\"comment\"># *.js, *.jsx, *.ts and *.tsx</span>        <span class=\"attr\">types:</span> [<span class=\"string\">file</span>]        <span class=\"attr\">additional_dependencies:</span>          <span class=\"bullet\">-</span> <span class=\"string\">eslint@latest</span>          <span class=\"bullet\">-</span> <span class=\"string\">eslint-config-standard@latest</span>          <span class=\"comment\"># and whatever other plugins...</span></code></pre><h2 id=\"how-do-i-make-the-output-all-colorful-and-pretty\"><a href=\"#how-do-i-make-the-output-all-colorful-and-pretty\">How do I make the output all colorful and pretty?</a></h2><p>The built-in output is simple and straightforward, but if you like shiny things,install <a href=\"https://www.npmjs.com/package/snazzy\">snazzy</a>:</p><pre><code class=\"hljs language-bash\">$ npm install snazzy</code></pre><p>And run:</p><pre><code class=\"hljs language-bash\">$ standard | snazzy</code></pre><p>There's also <a href=\"https://www.npmjs.com/package/standard-tap\">standard-tap</a>,<a href=\"https://www.npmjs.com/package/standard-json\">standard-json</a>,<a href=\"https://www.npmjs.com/package/standard-reporter\">standard-reporter</a>, and<a href=\"https://www.npmjs.com/package/standard-summary\">standard-summary</a>.</p><h2 id=\"is-there-a-nodejs-api\"><a href=\"#is-there-a-nodejs-api\">Is there a Node.js API?</a></h2><p>Yes!</p><h3 id=\"async-standardlinttexttext-opts\"><a href=\"#async-standardlinttexttext-opts\"><code>async standard.lintText(text, [opts])</code></a></h3><p>Lint the provided source <code>text</code>. An <code>opts</code> object may be provided:</p><pre><code class=\"hljs language-js\">{  <span class=\"comment\">// unique to lintText</span>  <span class=\"attr\">filename</span>: <span class=\"string\">''</span>,         <span class=\"comment\">// path of file containing the text being linted</span>  <span class=\"comment\">// common to lintText and lintFiles</span>  <span class=\"attr\">cwd</span>: <span class=\"string\">''</span>,              <span class=\"comment\">// current working directory (default: process.cwd())</span>  <span class=\"attr\">fix</span>: <span class=\"literal\">false</span>,           <span class=\"comment\">// automatically fix problems</span>  <span class=\"attr\">extensions</span>: [],       <span class=\"comment\">// file extensions to lint (has sane defaults)</span>  <span class=\"attr\">globals</span>: [],          <span class=\"comment\">// custom global variables to declare</span>  <span class=\"attr\">plugins</span>: [],          <span class=\"comment\">// custom eslint plugins</span>  <span class=\"attr\">envs</span>: [],             <span class=\"comment\">// custom eslint environment</span>  <span class=\"attr\">parser</span>: <span class=\"string\">''</span>,           <span class=\"comment\">// custom js parser (e.g. babel-eslint)</span>  <span class=\"attr\">usePackageJson</span>: <span class=\"literal\">true</span>, <span class=\"comment\">// use options from nearest package.json?</span>  <span class=\"attr\">useGitIgnore</span>: <span class=\"literal\">true</span>    <span class=\"comment\">// use file ignore patterns from .gitignore?</span>}</code></pre><p>All options are optional, though some ESLint plugins require the <code>filename</code> option.</p><p>Additional options may be loaded from a <code>package.json</code> if it's found for the current working directory. See below for further details.</p><p>Returns a <code>Promise</code> resolving to the <code>results</code> or rejected with an <code>Error</code>.</p><p>The <code>results</code> object will contain the following properties:</p><pre><code class=\"hljs language-js\"><span class=\"keyword\">const</span> results = {  <span class=\"attr\">results</span>: [    {      <span class=\"attr\">filePath</span>: <span class=\"string\">''</span>,      <span class=\"attr\">messages</span>: [        { <span class=\"attr\">ruleId</span>: <span class=\"string\">''</span>, <span class=\"attr\">message</span>: <span class=\"string\">''</span>, <span class=\"attr\">line</span>: <span class=\"number\">0</span>, <span class=\"attr\">column</span>: <span class=\"number\">0</span> }      ],      <span class=\"attr\">errorCount</span>: <span class=\"number\">0</span>,      <span class=\"attr\">warningCount</span>: <span class=\"number\">0</span>,      <span class=\"attr\">output</span>: <span class=\"string\">''</span> <span class=\"comment\">// fixed source code (only present with {fix: true} option)</span>    }  ],  <span class=\"attr\">errorCount</span>: <span class=\"number\">0</span>,  <span class=\"attr\">warningCount</span>: <span class=\"number\">0</span>}</code></pre><h3 id=\"async-standardlintfilesfiles-opts\"><a href=\"#async-standardlintfilesfiles-opts\"><code>async standard.lintFiles(files, [opts])</code></a></h3><p>Lint the provided <code>files</code> globs. An <code>opts</code> object may be provided:</p><pre><code class=\"hljs language-js\">{  <span class=\"comment\">// unique to lintFiles</span>  <span class=\"attr\">ignore</span>: [],           <span class=\"comment\">// file globs to ignore (has sane defaults)</span>  <span class=\"comment\">// common to lintText and lintFiles</span>  <span class=\"attr\">cwd</span>: <span class=\"string\">''</span>,              <span class=\"comment\">// current working directory (default: process.cwd())</span>  <span class=\"attr\">fix</span>: <span class=\"literal\">false</span>,           <span class=\"comment\">// automatically fix problems</span>  <span class=\"attr\">extensions</span>: [],       <span class=\"comment\">// file extensions to lint (has sane defaults)</span>  <span class=\"attr\">globals</span>: [],          <span class=\"comment\">// custom global variables to declare</span>  <span class=\"attr\">plugins</span>: [],          <span class=\"comment\">// custom eslint plugins</span>  <span class=\"attr\">envs</span>: [],             <span class=\"comment\">// custom eslint environment</span>  <span class=\"attr\">parser</span>: <span class=\"string\">''</span>,           <span class=\"comment\">// custom js parser (e.g. babel-eslint)</span>  <span class=\"attr\">usePackageJson</span>: <span class=\"literal\">true</span>, <span class=\"comment\">// use options from nearest package.json?</span>  <span class=\"attr\">useGitIgnore</span>: <span class=\"literal\">true</span>    <span class=\"comment\">// use file ignore patterns from .gitignore?</span>}</code></pre><p>Additional options may be loaded from a <code>package.json</code> if it's found for the current working directory. See below for further details.</p><p>Both <code>ignore</code> and <code>files</code> patterns are resolved relative to the current working directory.</p><p>Returns a <code>Promise</code> resolving to the <code>results</code> or rejected with an <code>Error</code> (same as above).</p><h2 id=\"how-do-i-contribute-to-standardjs\"><a href=\"#how-do-i-contribute-to-standardjs\">How do I contribute to StandardJS?</a></h2><p>Contributions are welcome! Check out the <a href=\"https://github.com/standard/standard/issues\">issues</a> or the <a href=\"https://github.com/standard/standard/pulls\">PRs</a>, and make your own if you want something that you don't see there.</p><p>Want to chat? <a href=\"https://discord.gg/Jxjejujpmc\">Join contributors on Discord</a>.</p><p>Here are some important packages in the <code>standard</code> ecosystem:</p><ul><li><strong><a href=\"https://github.com/standard/standard\">standard</a></strong> - this repo<ul><li><strong><a href=\"https://github.com/standard/standard-engine\">standard-engine</a></strong> - cli engine for arbitrary eslint rules</li><li><strong><a href=\"https://github.com/standard/eslint-config-standard\">eslint-config-standard</a></strong> - eslint rules for standard</li><li><strong><a href=\"https://github.com/standard/eslint-config-standard-jsx\">eslint-config-standard-jsx</a></strong> - eslint rules for standard (JSX)</li><li><strong><a href=\"https://github.com/eslint/eslint\">eslint</a></strong> - the linter that powers standard</li></ul></li><li><strong><a href=\"https://github.com/standard/snazzy\">snazzy</a></strong> - pretty terminal output for standard</li><li><strong><a href=\"https://github.com/standard/standard-www\">standard-www</a></strong> - code for <a href=\"https://standardjs.com\">https://standardjs.com</a></li><li><strong><a href=\"https://github.com/standard/semistandard\">semistandard</a></strong> - standard, with semicolons (if you must)</li><li><strong><a href=\"https://github.com/standard/standardx\">standardx</a></strong> - standard, with custom tweaks</li></ul><p>There are also many <strong><a href=\"#are-there-text-editor-plugins\">editor plugins</a></strong>, a list of<strong><a href=\"https://github.com/standard/standard-packages\">npm packages that use <code>standard</code></a></strong>,and an awesome list of<strong><a href=\"https://github.com/standard/awesome-standard\">packages in the <code>standard</code> ecosystem</a></strong>.</p><h2 id=\"security-policies-and-procedures\"><a href=\"#security-policies-and-procedures\">Security Policies and Procedures</a></h2><p>The <code>standard</code> team and community take all security bugs in <code>standard</code> seriously. Please see our <a href=\"https://github.com/standard/.github/blob/master/SECURITY.md\">security policies and procedures</a> document to learn how to report issues.</p><h2 id=\"license\"><a href=\"#license\">License</a></h2><p><a href=\"LICENSE\">MIT</a>. Copyright (c) <a href=\"https://feross.org\">Feross Aboukhadijeh</a>.</p></div><script src=\"standard-www.js\"></script><!-- Google Analytics --><script>  window.ga = window.ga || function () {    (ga.q = ga.q || []).push(arguments)  }  ga.l = +new Date  ga('create', 'UA-3898076-21', 'auto')  ga('send', 'pageview')</script><script async src=\"//www.google-analytics.com/analytics.js\"></script></body></html>",
  "embeddings": []
}
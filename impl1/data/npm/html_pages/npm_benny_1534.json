{
  "libtype": "npm",
  "libname": "benny",
  "url": "https://caderek.github.io/benny/",
  "html": "<!DOCTYPE html><html lang=\"en-US\">  <head>    <meta charset=\"UTF-8\">    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"><!-- Begin Jekyll SEO tag v2.7.1 --><title>Benny - a dead simple benchmarking framework | benny</title><meta name=\"generator\" content=\"Jekyll v3.9.0\" /><meta property=\"og:title\" content=\"Benny - a dead simple benchmarking framework\" /><meta property=\"og:locale\" content=\"en_US\" /><meta name=\"description\" content=\"A dead simple benchmarking framework for JS/TS libs\" /><meta property=\"og:description\" content=\"A dead simple benchmarking framework for JS/TS libs\" /><link rel=\"canonical\" href=\"https://caderek.github.io/benny/\" /><meta property=\"og:url\" content=\"https://caderek.github.io/benny/\" /><meta property=\"og:site_name\" content=\"benny\" /><meta name=\"twitter:card\" content=\"summary\" /><meta property=\"twitter:title\" content=\"Benny - a dead simple benchmarking framework\" /><script type=\"application/ld+json\">{\"description\":\"A dead simple benchmarking framework for JS/TS libs\",\"url\":\"https://caderek.github.io/benny/\",\"@type\":\"WebSite\",\"headline\":\"Benny - a dead simple benchmarking framework\",\"name\":\"benny\",\"@context\":\"https://schema.org\"}</script><!-- End Jekyll SEO tag -->    <link rel=\"stylesheet\" href=\"/benny/assets/css/style.css?v=\">    <!-- start custom head snippets, customize with your own _includes/head-custom.html file --><!-- Setup Google Analytics --><!-- You can set your favicon here --><!-- link rel=\"shortcut icon\" type=\"image/x-icon\" href=\"/benny/favicon.ico\" --><!-- end custom head snippets -->  </head>  <body>    <div class=\"container-lg px-3 my-5 markdown-body\">            <h1><a href=\"https://caderek.github.io/benny/\">benny</a></h1>            <h1 id=\"benny---a-dead-simple-benchmarking-framework\">Benny - a dead simple benchmarking framework</h1><p><img src=\"https://img.shields.io/npm/v/benny\" alt=\"npm\" /><img src=\"https://img.shields.io/circleci/build/github/caderek/benny\" alt=\"CircleCI\" /><img src=\"https://img.shields.io/codecov/c/github/caderek/benny\" alt=\"Codecov\" /><img src=\"https://img.shields.io/snyk/vulnerabilities/npm/benny\" alt=\"Snyk Vulnerabilities for npm package\" /><img src=\"https://img.shields.io/github/license/caderek/benny\" alt=\"GitHub\" /></p><p><img src=\"https://raw.githubusercontent.com/caderek/benny/master/benny.gif\" alt=\"Example\" /></p><h2 id=\"table-of-contents\">Table of contents</h2><ol>  <li><a href=\"#overview\">Overview</a></li>  <li><a href=\"#installation\">Installation</a></li>  <li><a href=\"#quick-example\">Quick example</a></li>  <li><a href=\"#api\">API</a></li>  <li><a href=\"#many-suites\">Working with many suites</a></li>  <li><a href=\"#async-code\">Working with async code</a></li>  <li><a href=\"#tweaking\">Tweaking benchmarks</a></li>  <li><a href=\"#code-reuse\">Code reuse</a></li>  <li><a href=\"#snippets\">Snippets</a></li>  <li><a href=\"#additional-examples\">Additional examples</a></li>  <li><a href=\"#license\">License</a></li></ol><p><a id=\"overview\"></a></p><h2 id=\"overview\">Overview</h2><p>Benny builds on top of the excellent (but complex) <a href=\"https://www.npmjs.com/package/benchmark\">benchmark</a> package.</p><p>Benny provides an improved API that allows you to:</p><ul>  <li>easily prepare benchmarks for synchronous, as well as async code,</li>  <li>prepare local setup (sync or async) for each case,</li>  <li>skip or run only selected cases,</li>  <li>save results to a JSON / CSV / HTML (table or chart) file,</li>  <li>pretty-print results without additional setup,</li>  <li>use suite results as Promises.</li></ul><p>Additionally, it provides sound defaults suitable for most use cases (that you can tweak if you need) and excellent IDE support with built-in type definitions.</p><p><a id=\"installation\"></a></p><h2 id=\"installation\">Installation</h2><p>Using NPM:</p><div class=\"language-sh highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>npm i benny <span class=\"nt\">-D</span></code></pre></div></div><p>Using Yarn:</p><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>yarn add benny -D</code></pre></div></div><p><a id=\"quick-example\"></a></p><h2 id=\"quick-example\">Quick example</h2><div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"cm\">/* benchmark.js */</span><span class=\"kd\">const</span> <span class=\"nx\">b</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">benny</span><span class=\"dl\">'</span><span class=\"p\">)</span><span class=\"nx\">b</span><span class=\"p\">.</span><span class=\"nx\">suite</span><span class=\"p\">(</span>  <span class=\"dl\">'</span><span class=\"s1\">Example</span><span class=\"dl\">'</span><span class=\"p\">,</span>  <span class=\"nx\">b</span><span class=\"p\">.</span><span class=\"nx\">add</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">Reduce two elements</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>    <span class=\"p\">;[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">].</span><span class=\"nx\">reduce</span><span class=\"p\">((</span><span class=\"nx\">a</span><span class=\"p\">,</span> <span class=\"nx\">b</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">a</span> <span class=\"o\">+</span> <span class=\"nx\">b</span><span class=\"p\">)</span>  <span class=\"p\">}),</span>  <span class=\"nx\">b</span><span class=\"p\">.</span><span class=\"nx\">add</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">Reduce five elements</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>    <span class=\"p\">;[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">].</span><span class=\"nx\">reduce</span><span class=\"p\">((</span><span class=\"nx\">a</span><span class=\"p\">,</span> <span class=\"nx\">b</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">a</span> <span class=\"o\">+</span> <span class=\"nx\">b</span><span class=\"p\">)</span>  <span class=\"p\">}),</span>  <span class=\"nx\">b</span><span class=\"p\">.</span><span class=\"nx\">cycle</span><span class=\"p\">(),</span>  <span class=\"nx\">b</span><span class=\"p\">.</span><span class=\"nx\">complete</span><span class=\"p\">(),</span>  <span class=\"nx\">b</span><span class=\"p\">.</span><span class=\"nx\">save</span><span class=\"p\">({</span> <span class=\"na\">file</span><span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">reduce</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"na\">version</span><span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">1.0.0</span><span class=\"dl\">'</span> <span class=\"p\">}),</span>  <span class=\"nx\">b</span><span class=\"p\">.</span><span class=\"nx\">save</span><span class=\"p\">({</span> <span class=\"na\">file</span><span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">reduce</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"na\">format</span><span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">chart.html</span><span class=\"dl\">'</span> <span class=\"p\">}),</span><span class=\"p\">)</span></code></pre></div></div><hr /><p>Execute:</p><div class=\"language-sh highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>node benchmark.js</code></pre></div></div><hr /><p>Output:</p><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>Running \"Example\" suite...Progress: 100%  Reduce two elements:    213 985 744 ops/s, \u00b10.61%   | fastest  Reduce five elements:    109 395 371 ops/s, \u00b10.66%   | slowest, 48.88% slowerFinished 2 cases!  Fastest: Reduce two elements  Slowest: Reduce five elementsSaved to: benchmark/results/reduce.jsonSaved to: benchmark/results/reduce.chart.html</code></pre></div></div><hr /><p>JSON file content:</p><div class=\"language-json highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"p\">{</span><span class=\"w\">  </span><span class=\"nl\">\"name\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"Example\"</span><span class=\"p\">,</span><span class=\"w\">  </span><span class=\"nl\">\"date\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"2021-10-02T03:00:10.907Z\"</span><span class=\"p\">,</span><span class=\"w\">  </span><span class=\"nl\">\"version\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"1.0.0\"</span><span class=\"p\">,</span><span class=\"w\">  </span><span class=\"nl\">\"results\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"w\">    </span><span class=\"p\">{</span><span class=\"w\">      </span><span class=\"nl\">\"name\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"Reduce two elements\"</span><span class=\"p\">,</span><span class=\"w\">      </span><span class=\"nl\">\"ops\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">213985744</span><span class=\"p\">,</span><span class=\"w\">      </span><span class=\"nl\">\"margin\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mf\">0.61</span><span class=\"p\">,</span><span class=\"w\">      </span><span class=\"nl\">\"percentSlower\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\">    </span><span class=\"p\">},</span><span class=\"w\">    </span><span class=\"p\">{</span><span class=\"w\">      </span><span class=\"nl\">\"name\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"Reduce five elements\"</span><span class=\"p\">,</span><span class=\"w\">      </span><span class=\"nl\">\"ops\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">109395371</span><span class=\"p\">,</span><span class=\"w\">      </span><span class=\"nl\">\"margin\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mf\">0.66</span><span class=\"p\">,</span><span class=\"w\">      </span><span class=\"nl\">\"percentSlower\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mf\">48.88</span><span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\">  </span><span class=\"p\">],</span><span class=\"w\">  </span><span class=\"nl\">\"fastest\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">    </span><span class=\"nl\">\"name\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"Reduce two elements\"</span><span class=\"p\">,</span><span class=\"w\">    </span><span class=\"nl\">\"index\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\">  </span><span class=\"p\">},</span><span class=\"w\">  </span><span class=\"nl\">\"slowest\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">    </span><span class=\"nl\">\"name\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"Reduce five elements\"</span><span class=\"p\">,</span><span class=\"w\">    </span><span class=\"nl\">\"index\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\">  </span><span class=\"p\">}</span><span class=\"w\"></span><span class=\"p\">}</span><span class=\"w\"></span></code></pre></div></div><p>Note: If you use the <code class=\"language-plaintext highlighter-rouge\">{ details: true }</code> option in your save function, you will get the result similar to this one:</p><details><summary>click to expand</summary><pre lang=\"json\">{  \"name\": \"Example\",  \"date\": \"2021-10-02T03:29:32.520Z\",  \"version\": \"1.0.0\",  \"results\": [    {      \"name\": \"Reduce two elements\",      \"ops\": 213928866,      \"margin\": 0.68,      \"options\": {        \"delay\": 0.005,        \"initCount\": 1,        \"minTime\": 0.05,        \"maxTime\": 5,        \"minSamples\": 5      },      \"samples\": 92,      \"promise\": false,      \"details\": {        \"min\": 4.430438606424907e-9,        \"max\": 5.0581801724029255e-9,        \"mean\": 4.6744509956552405e-9,        \"median\": 4.656646139027003e-9,        \"standardDeviation\": 1.5617421028409467e-10,        \"marginOfError\": 3.191328246925009e-11,        \"relativeMarginOfError\": 0.6827172324389006,        \"standardErrorOfMean\": 1.628228697410719e-11,        \"sampleVariance\": 2.439038395786062e-20,        \"sampleResults\": [          4.430438606424907e-9,          ...other         ]      },      \"completed\": true,      \"percentSlower\": 0    },    {      \"name\": \"Reduce five elements\",      \"ops\": 109203399,      \"margin\": 0.92,      \"options\": {        \"delay\": 0.005,        \"initCount\": 1,        \"minTime\": 0.05,        \"maxTime\": 5,        \"minSamples\": 5      },      \"samples\": 90,      \"promise\": false,      \"details\": {        \"min\": 8.963947485831316e-9,        \"max\": 1.2164955890034665e-8,        \"mean\": 9.15722416437813e-9,        \"median\": 9.072483556407842e-9,        \"standardDeviation\": 4.0880731896036814e-10,        \"marginOfError\": 8.446046713469782e-11,        \"relativeMarginOfError\": 0.9223370053913447,        \"standardErrorOfMean\": 4.309207506872338e-11,        \"sampleVariance\": 1.6712342403556417e-19,        \"sampleResults\": [          8.963947485831316e-9,          ...other         ]      },      \"completed\": true,      \"percentSlower\": 48.95    }  ],  \"fastest\": {    \"name\": \"Reduce two elements\",    \"index\": 0  },  \"slowest\": {    \"name\": \"Reduce five elements\",    \"index\": 1  }}</pre></details><hr /><p>HTML chart (it uses Chart.js on canvas, so you can save it as PNG by right-clicking on it):</p><p><img src=\"https://raw.githubusercontent.com/caderek/benny/master/chart.png\" alt=\"chart\" /></p><p><a id=\"api\"></a></p><h2 id=\"api\">API</h2><div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// You can also use ES Modules syntax and default imports</span><span class=\"kd\">const</span> <span class=\"p\">{</span> <span class=\"nx\">add</span><span class=\"p\">,</span> <span class=\"nx\">complete</span><span class=\"p\">,</span> <span class=\"nx\">cycle</span><span class=\"p\">,</span> <span class=\"nx\">save</span><span class=\"p\">,</span> <span class=\"nx\">suite</span> <span class=\"p\">}</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">benny</span><span class=\"dl\">'</span><span class=\"p\">)</span><span class=\"nx\">suite</span><span class=\"p\">(</span>  <span class=\"cm\">/**   * Name of the suite - required   */</span>  <span class=\"dl\">\"</span><span class=\"s2\">My suite</span><span class=\"dl\">\"</span><span class=\"p\">,</span>  <span class=\"cm\">/**   * If the code that you want to benchmark has no setup,   * you can run it directly:   */</span>  <span class=\"nx\">add</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">My first case</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>    <span class=\"nx\">myFunction</span><span class=\"p\">()</span>  <span class=\"p\">}),</span>  <span class=\"cm\">/**   * If the code that you want to benchmark requires setup,   * you should return it wrapped in a function:   */</span>  <span class=\"nx\">add</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">My second case</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>    <span class=\"c1\">// Some setup:</span>    <span class=\"kd\">const</span> <span class=\"nx\">testArr</span> <span class=\"o\">=</span> <span class=\"nb\">Array</span><span class=\"p\">.</span><span class=\"k\">from</span><span class=\"p\">({</span> <span class=\"na\">length</span><span class=\"p\">:</span> <span class=\"mi\">1000</span> <span class=\"p\">},</span> <span class=\"p\">(</span><span class=\"nx\">_</span><span class=\"p\">,</span> <span class=\"nx\">index</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">index</span><span class=\"p\">)</span>    <span class=\"c1\">// Benchmarked code wrapped in a function:</span>    <span class=\"k\">return</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">myOtherFunction</span><span class=\"p\">(</span><span class=\"nx\">testArr</span><span class=\"p\">)</span>  <span class=\"p\">}),</span>  <span class=\"cm\">/**   * This benchmark will be skipped:   */</span>  <span class=\"nx\">add</span><span class=\"p\">.</span><span class=\"nx\">skip</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">My third case</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>    <span class=\"mi\">1</span> <span class=\"o\">+</span> <span class=\"mi\">1</span>  <span class=\"p\">}),</span>  <span class=\"cm\">/**   * This benchmark will be the only one that runs   * (unless there are other cases marked by .only)   */</span>  <span class=\"nx\">add</span><span class=\"p\">.</span><span class=\"nx\">only</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">My fourth case</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>    <span class=\"nb\">Math</span><span class=\"p\">.</span><span class=\"nx\">max</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">)</span>  <span class=\"p\">}),</span>  <span class=\"cm\">/**   * This will run after each benchmark in the suite.   *   * You can pass a function that takes:   *   - as a first argument: an object with the current result   *   - as a second argument: an object with all cases (even unfinished ones)   * If you return a value, it will be logged,   * replacing in-place the previous cycle output.   *   * You can use this function multiple times with different handlers.   *   * By default, it pretty-prints case results   */</span>  <span class=\"nx\">cycle</span><span class=\"p\">(),</span>  <span class=\"cm\">/**   * This will run after all benchmarks in the suite.   *   * You can pass a function that takes an object with all results.   *   * You can use this function multiple times with different handlers.   *   * By default, it pretty-prints a simple summary.   */</span>  <span class=\"nx\">complete</span><span class=\"p\">(),</span>  <span class=\"cm\">/**   * This will set the config for the whole suite.   *   * All entries are optional.   */</span>  <span class=\"nx\">configure</span><span class=\"p\">({</span>    <span class=\"cm\">/**     * Benchmark options for every case.     *     * Can be overridden by each individual case (as a third parameter to the `add` method).     *     * See: \"Tweaking benchmarks\" section.     */</span>    <span class=\"na\">cases</span><span class=\"p\">:</span> <span class=\"p\">{</span>      <span class=\"p\">...</span><span class=\"nx\">optionsForEveryTestCase</span><span class=\"p\">,</span>    <span class=\"p\">},</span>    <span class=\"cm\">/**     * Other general setting for the whole suite.     */</span>    <span class=\"cm\">/**     * The minimum precision (decimal places) of the results displayed     * by the default `cycle`, `complete` and `save` functions.     *     * This precision will be automatically increased if needed.     *     * Default: 0 (no decimal places, unless required to differentiate cases)     */</span>    <span class=\"na\">minDisplayPrecision</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span>  <span class=\"p\">}),</span>  <span class=\"cm\">/**   * This will save the results to a file.   * You can pass an options object.   *   * You can use this function multiple times   * if you need multiple output files with different options.   *   * By default saves to benchmark/results/&lt;ISO-DATE-TIME&gt;.json   */</span>  <span class=\"nx\">save</span><span class=\"p\">({</span>    <span class=\"cm\">/**     * String or function that produces a string,     * if function, then results object will be passed as argument:     */</span>    <span class=\"na\">file</span><span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">myFileNameWithoutExtension</span><span class=\"dl\">'</span>    <span class=\"cm\">/**     * Destination folder (can be nested), will be created if not exists:     */</span>    <span class=\"na\">folder</span><span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">myFolder</span><span class=\"dl\">'</span><span class=\"p\">,</span>    <span class=\"cm\">/**     * Version string - if provided will be included in the file content     */</span>    <span class=\"na\">version</span><span class=\"p\">:</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">package.json</span><span class=\"dl\">'</span><span class=\"p\">).</span><span class=\"nx\">version</span><span class=\"p\">,</span>    <span class=\"cm\">/**     * A flag that indicates whether detailed or simplified result will be saved     * Default: false (simplified results)     */</span>    <span class=\"na\">details</span><span class=\"p\">:</span> <span class=\"kc\">true</span><span class=\"p\">,</span>    <span class=\"cm\">/**     * Output format, currently supported:     *   'json' | 'csv' | 'table.html' | 'chart.html'     * Default: 'json'     */</span>    <span class=\"na\">format</span><span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">csv</span><span class=\"dl\">'</span><span class=\"p\">,</span>  <span class=\"p\">}),</span><span class=\"p\">)</span></code></pre></div></div><p>All methods are optional - use the ones you need.</p><p>Additionally, each suite returns a <code class=\"language-plaintext highlighter-rouge\">Promise</code> that resolves with results object (the same as passed to the <code class=\"language-plaintext highlighter-rouge\">complete</code> method).</p><p><a id=\"many-suites\"></a></p><h2 id=\"working-with-many-suites\">Working with many suites</h2><p>You can create as many suites as you want. It is a good practice to define each suite in a separate file, so you can run them independently if you need. To run multiple suites, create the main file, where you import all your suites.</p><p>Example:</p><div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"cm\">/* suites/suite-one.js */</span><span class=\"kd\">const</span> <span class=\"nx\">b</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">benny</span><span class=\"dl\">'</span><span class=\"p\">)</span><span class=\"nx\">module</span><span class=\"p\">.</span><span class=\"nx\">exports</span> <span class=\"o\">=</span> <span class=\"nx\">b</span><span class=\"p\">.</span><span class=\"nx\">suite</span><span class=\"p\">(</span>  <span class=\"dl\">'</span><span class=\"s1\">Suite one</span><span class=\"dl\">'</span><span class=\"p\">,</span>  <span class=\"nx\">b</span><span class=\"p\">.</span><span class=\"nx\">add</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">Reduce two elements</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>    <span class=\"p\">;[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">].</span><span class=\"nx\">reduce</span><span class=\"p\">((</span><span class=\"nx\">a</span><span class=\"p\">,</span> <span class=\"nx\">b</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">a</span> <span class=\"o\">+</span> <span class=\"nx\">b</span><span class=\"p\">)</span>  <span class=\"p\">}),</span>  <span class=\"nx\">b</span><span class=\"p\">.</span><span class=\"nx\">add</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">Reduce five elements</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>    <span class=\"p\">;[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">].</span><span class=\"nx\">reduce</span><span class=\"p\">((</span><span class=\"nx\">a</span><span class=\"p\">,</span> <span class=\"nx\">b</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">a</span> <span class=\"o\">+</span> <span class=\"nx\">b</span><span class=\"p\">)</span>  <span class=\"p\">}),</span>  <span class=\"nx\">b</span><span class=\"p\">.</span><span class=\"nx\">cycle</span><span class=\"p\">(),</span>  <span class=\"nx\">b</span><span class=\"p\">.</span><span class=\"nx\">complete</span><span class=\"p\">(),</span>  <span class=\"nx\">b</span><span class=\"p\">.</span><span class=\"nx\">save</span><span class=\"p\">({</span> <span class=\"na\">file</span><span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">reduce</span><span class=\"dl\">'</span> <span class=\"p\">}),</span><span class=\"p\">)</span></code></pre></div></div><div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"cm\">/* suites/suite-two.js */</span><span class=\"kd\">const</span> <span class=\"nx\">b</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">benny</span><span class=\"dl\">'</span><span class=\"p\">)</span><span class=\"nx\">module</span><span class=\"p\">.</span><span class=\"nx\">exports</span> <span class=\"o\">=</span> <span class=\"nx\">b</span><span class=\"p\">.</span><span class=\"nx\">suite</span><span class=\"p\">(</span>  <span class=\"dl\">'</span><span class=\"s1\">Suite two</span><span class=\"dl\">'</span><span class=\"p\">,</span>  <span class=\"nx\">b</span><span class=\"p\">.</span><span class=\"nx\">add</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">Multiple two numbers</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>    <span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"mi\">2</span>  <span class=\"p\">}),</span>  <span class=\"nx\">b</span><span class=\"p\">.</span><span class=\"nx\">add</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">Multiply three numbers</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>    <span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"mi\">2</span>  <span class=\"p\">}),</span>  <span class=\"nx\">b</span><span class=\"p\">.</span><span class=\"nx\">cycle</span><span class=\"p\">(),</span>  <span class=\"nx\">b</span><span class=\"p\">.</span><span class=\"nx\">complete</span><span class=\"p\">(),</span>  <span class=\"nx\">b</span><span class=\"p\">.</span><span class=\"nx\">save</span><span class=\"p\">({</span> <span class=\"na\">file</span><span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">add</span><span class=\"dl\">'</span> <span class=\"p\">}),</span><span class=\"p\">)</span></code></pre></div></div><div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"cm\">/* benchmark.js */</span><span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">./suites/suite-one</span><span class=\"dl\">'</span><span class=\"p\">)</span><span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">./suites/suite-two</span><span class=\"dl\">'</span><span class=\"p\">)</span></code></pre></div></div><p>Run:</p><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>node benchmark.js</code></pre></div></div><h3 id=\"multiple-async-suites\">Multiple async suites</h3><p>If your suites contain async benchmarks, you should wrap them in a function (so they wont execute immediately), and use await when calling each of them. That way the results of many suites won\u2019t interfere with each other.</p><div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"cm\">/* suites/async-suite-one.js */</span><span class=\"kd\">const</span> <span class=\"nx\">b</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">benny</span><span class=\"dl\">'</span><span class=\"p\">)</span><span class=\"nx\">module</span><span class=\"p\">.</span><span class=\"nx\">exports</span> <span class=\"o\">=</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">b</span><span class=\"p\">.</span><span class=\"nx\">suite</span><span class=\"p\">(</span><span class=\"cm\">/* ...your async benchmarks */</span><span class=\"p\">)</span></code></pre></div></div><div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"cm\">/* suites/async-suite-two.js */</span><span class=\"kd\">const</span> <span class=\"nx\">b</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">benny</span><span class=\"dl\">'</span><span class=\"p\">)</span><span class=\"nx\">module</span><span class=\"p\">.</span><span class=\"nx\">exports</span> <span class=\"o\">=</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">b</span><span class=\"p\">.</span><span class=\"nx\">suite</span><span class=\"p\">(</span><span class=\"cm\">/* ...your async benchmarks */</span><span class=\"p\">)</span></code></pre></div></div><div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"cm\">/* async-benchmark.js */</span><span class=\"kd\">const</span> <span class=\"nx\">asyncSuite1</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">./suites/async-suite-one</span><span class=\"dl\">'</span><span class=\"p\">)</span><span class=\"kd\">const</span> <span class=\"nx\">asyncSuite2</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">./suites/async-suite-two</span><span class=\"dl\">'</span><span class=\"p\">)</span><span class=\"kd\">const</span> <span class=\"nx\">main</span> <span class=\"o\">=</span> <span class=\"k\">async</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>  <span class=\"k\">await</span> <span class=\"nx\">asyncSuite1</span><span class=\"p\">()</span>  <span class=\"k\">await</span> <span class=\"nx\">asyncSuite2</span><span class=\"p\">()</span><span class=\"p\">}</span><span class=\"nx\">main</span><span class=\"p\">()</span></code></pre></div></div><p>Run:</p><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>node async-benchmark.js</code></pre></div></div><p><a id=\"async-code\"></a></p><h2 id=\"working-with-async-code\">Working with async code</h2><p>Benny handles Promises out of the box. You can have async benchmarks, async setup, or both.</p><p>To demonstrate how this work, I will use the <code class=\"language-plaintext highlighter-rouge\">delay</code> function that simulates a long-pending promise:</p><div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">const</span> <span class=\"nx\">delay</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"nx\">seconds</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span>  <span class=\"k\">new</span> <span class=\"nb\">Promise</span><span class=\"p\">((</span><span class=\"nx\">resolve</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">setTimeout</span><span class=\"p\">(</span><span class=\"nx\">resolve</span><span class=\"p\">,</span> <span class=\"nx\">seconds</span> <span class=\"o\">*</span> <span class=\"mi\">1000</span><span class=\"p\">))</span></code></pre></div></div><h3 id=\"async-benchmark-without-setup\">Async benchmark without setup</h3><div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nx\">add</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">Async benchmark without setup</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"k\">async</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>  <span class=\"c1\">// You can use await or return - works the same,</span>  <span class=\"c1\">// (async function always returns a Promise)</span>  <span class=\"k\">await</span> <span class=\"nx\">delay</span><span class=\"p\">(</span><span class=\"mf\">0.5</span><span class=\"p\">)</span> <span class=\"c1\">// Resulting in 2 ops/s</span><span class=\"p\">})</span></code></pre></div></div><p>If a benchmark has many async operations you should await every statement that you want to be completed before the next iteration:</p><div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nx\">add</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">Async benchmark without setup - many async operations</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"k\">async</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>  <span class=\"k\">await</span> <span class=\"nx\">delay</span><span class=\"p\">(</span><span class=\"mf\">0.5</span><span class=\"p\">)</span>  <span class=\"k\">await</span> <span class=\"nx\">delay</span><span class=\"p\">(</span><span class=\"mf\">0.5</span><span class=\"p\">)</span>  <span class=\"c1\">// Resulting in 1 ops/s</span><span class=\"p\">})</span></code></pre></div></div><h3 id=\"async-benchmark-with-setup---return-a-promise-wrapped-in-a-function\">Async benchmark with setup - return a promise wrapped in a function</h3><div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nx\">add</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">Async benchmark with some setup</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"k\">async</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>  <span class=\"k\">await</span> <span class=\"nx\">delay</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"c1\">// Setup can be async, it will not affect the results</span>  <span class=\"k\">return</span> <span class=\"k\">async</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>    <span class=\"k\">await</span> <span class=\"nx\">delay</span><span class=\"p\">(</span><span class=\"mf\">0.5</span><span class=\"p\">)</span> <span class=\"c1\">// Still 2 ops/s</span>  <span class=\"p\">}</span><span class=\"p\">})</span></code></pre></div></div><h3 id=\"synchronous-benchmark-with-async-setup\">Synchronous benchmark with async setup</h3><div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nx\">add</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">Sync benchmark with some async setup</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"k\">async</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>  <span class=\"k\">await</span> <span class=\"nx\">delay</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"c1\">// Setup can be async, it will not affect the results</span>  <span class=\"k\">return</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>    <span class=\"mi\">1</span> <span class=\"o\">+</span> <span class=\"mi\">1</span> <span class=\"c1\">// High ops, not affected by slow, async setup</span>  <span class=\"p\">}</span><span class=\"p\">})</span></code></pre></div></div><p>If we add these cases to a suite and execute it, we will get results that would look similar to this:</p><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>Running \"Async madness\" suite...  Async benchmark without setup:    2 ops/s, \u00b10.02%             | 100% slower  Async benchmark without setup - many async operations:    1 ops/s, \u00b10.05%             | slowest, 100% slower  Async benchmark with some setup:    2 ops/s, \u00b10.11%             | 100% slower  Sync benchmark with some async setup:    674 553 637 ops/s, \u00b12.13%   | fastestFinished 4 cases!  Fastest: Sync benchmark with some async setup  Slowest: Async benchmark without setup - many async operationsSaved to: benchmark/results/async-madness.json</code></pre></div></div><p><em>Note: If you look closely, because of the <code class=\"language-plaintext highlighter-rouge\">async</code> keyword, the last two examples return not a function, but a Promise, that resolves to a function, that returns either another Promise or other value (undefined in the last case). Benny is smart enough to get your intent and build proper async or sync benchmark for you.</em></p><p><a id=\"tweaking\"></a></p><h2 id=\"tweaking-benchmarks\">Tweaking benchmarks</h2><p>If the default results are not optimal (high error margin, etc.), you can change parameters for each case by providing an options object as a third parameter to the <code class=\"language-plaintext highlighter-rouge\">add</code> function.</p><p>You can also provide non-default, general settings for every case under <code class=\"language-plaintext highlighter-rouge\">cases</code> key in the <code class=\"language-plaintext highlighter-rouge\">configure</code> function.</p><p>Priority of the options:</p><ol>  <li>options passed to the <code class=\"language-plaintext highlighter-rouge\">add</code> function,</li>  <li>options passed to the <code class=\"language-plaintext highlighter-rouge\">configure</code> function,</li>  <li>library defaults</li></ol><p>Available options:</p><div class=\"language-typescript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"cm\">/** * The delay between test cycles (secs). * * @default 0.005 */</span><span class=\"nx\">delay</span><span class=\"p\">:</span> <span class=\"kr\">number</span><span class=\"cm\">/** * The default number of times to execute a test on a benchmark's first cycle. * * @default 1 */</span><span class=\"nx\">initCount</span><span class=\"p\">:</span> <span class=\"kr\">number</span><span class=\"cm\">/** * The maximum time a benchmark is allowed to run before finishing (secs). * * Note: Cycle delays aren't counted toward the maximum time. * * @default 5 */</span><span class=\"nx\">maxTime</span><span class=\"p\">:</span> <span class=\"kr\">number</span><span class=\"cm\">/** * The minimum sample size required to perform statistical analysis. * * @default 5 */</span><span class=\"nx\">minSamples</span><span class=\"p\">:</span> <span class=\"kr\">number</span><span class=\"cm\">/** * The time needed to reduce the percent uncertainty of measurement to 1% (secs). * * @default 0 */</span><span class=\"nx\">minTime</span><span class=\"p\">:</span> <span class=\"kr\">number</span></code></pre></div></div><p>Example usage:</p><div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">const</span> <span class=\"nx\">b</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">benny</span><span class=\"dl\">'</span><span class=\"p\">)</span><span class=\"kd\">const</span> <span class=\"nx\">options</span> <span class=\"o\">=</span> <span class=\"p\">{</span>  <span class=\"na\">minSamples</span><span class=\"p\">:</span> <span class=\"mi\">10</span><span class=\"p\">,</span>  <span class=\"na\">maxTime</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"p\">}</span><span class=\"nx\">b</span><span class=\"p\">.</span><span class=\"nx\">suite</span><span class=\"p\">(</span>  <span class=\"dl\">'</span><span class=\"s1\">My suite</span><span class=\"dl\">'</span><span class=\"p\">,</span>  <span class=\"nx\">b</span><span class=\"p\">.</span><span class=\"nx\">add</span><span class=\"p\">(</span>    <span class=\"dl\">'</span><span class=\"s1\">Reduce two elements</span><span class=\"dl\">'</span><span class=\"p\">,</span>    <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>      <span class=\"p\">;[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">].</span><span class=\"nx\">reduce</span><span class=\"p\">((</span><span class=\"nx\">a</span><span class=\"p\">,</span> <span class=\"nx\">b</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">a</span> <span class=\"o\">+</span> <span class=\"nx\">b</span><span class=\"p\">)</span>    <span class=\"p\">},</span>    <span class=\"nx\">options</span><span class=\"p\">,</span>  <span class=\"p\">),</span>  <span class=\"c1\">// ...other methods</span><span class=\"p\">)</span></code></pre></div></div><p><a id=\"code-reuse\"></a></p><h2 id=\"code-reuse\">Code reuse</h2><p>You may wonder why I chose functions over chainable methods - it allows you to better reuse your code while keeping the API minimal and instead leveraging the language itself.</p><h3 id=\"reusing-benchmark-options\">Reusing benchmark options</h3><p>If you have many cases, where default benchmarking options are not optimal, you can decorate the <code class=\"language-plaintext highlighter-rouge\">add</code> function and use the new function instead, for example:</p><div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"cm\">/** * Let's import and add `function` and rename it to `rawAdd`. * You can also import it unchanged, and give the decorating function * a different name - that would be a better approach * if you want to use a decorated version only in some cases. */</span><span class=\"kd\">const</span> <span class=\"p\">{</span> <span class=\"nx\">add</span> <span class=\"p\">}</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">benny</span><span class=\"dl\">'</span><span class=\"p\">)</span><span class=\"kd\">const</span> <span class=\"nx\">customAdd</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"nx\">caseName</span><span class=\"p\">,</span> <span class=\"nx\">fn</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span>  <span class=\"nx\">add</span><span class=\"p\">(</span><span class=\"nx\">caseName</span><span class=\"p\">,</span> <span class=\"nx\">fn</span><span class=\"p\">,</span> <span class=\"p\">{</span>    <span class=\"cm\">/* custom options */</span>  <span class=\"p\">})</span></code></pre></div></div><p>You can now use this new function instead of the original version in your benchmark suite.</p><p><em>TIP: If you want to provide custom options for every case in the suite, you can use <code class=\"language-plaintext highlighter-rouge\">configure</code> function instead of this.</em></p><h3 id=\"reusing-handlers\">Reusing handlers</h3><p>If you use custom handlers for <code class=\"language-plaintext highlighter-rouge\">cycle</code> and <code class=\"language-plaintext highlighter-rouge\">complete</code> functions (or you have custom options for <code class=\"language-plaintext highlighter-rouge\">save</code> function) you can set up them once, and reuse everywhere you need.</p><p>For example:</p><div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"cm\">/* helpers/handlers.js */</span><span class=\"kd\">const</span> <span class=\"p\">{</span> <span class=\"nx\">complete</span><span class=\"p\">,</span> <span class=\"nx\">cycle</span><span class=\"p\">,</span> <span class=\"nx\">save</span> <span class=\"p\">}</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">benny</span><span class=\"dl\">'</span><span class=\"p\">)</span><span class=\"kd\">const</span> <span class=\"nx\">handlers</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"nx\">fileName</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>  <span class=\"k\">return</span> <span class=\"p\">[</span>    <span class=\"nx\">cycle</span><span class=\"p\">((</span><span class=\"nx\">currentResult</span><span class=\"p\">,</span> <span class=\"nx\">summary</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>      <span class=\"cm\">/* your custom cycle handling goes here */</span>    <span class=\"p\">}),</span>    <span class=\"nx\">complete</span><span class=\"p\">((</span><span class=\"nx\">summary</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>      <span class=\"cm\">/* your custom complete handling goes here */</span>    <span class=\"p\">}),</span>    <span class=\"nx\">save</span><span class=\"p\">({</span> <span class=\"na\">file</span><span class=\"p\">:</span> <span class=\"nx\">fileName</span> <span class=\"cm\">/* other custom save options */</span> <span class=\"p\">}),</span>  <span class=\"p\">]</span><span class=\"p\">}</span><span class=\"nx\">module</span><span class=\"p\">.</span><span class=\"nx\">exports</span> <span class=\"o\">=</span> <span class=\"nx\">handlers</span></code></pre></div></div><p>You can now reuse it, using the spread operator:</p><div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">const</span> <span class=\"p\">{</span> <span class=\"nx\">add</span><span class=\"p\">,</span> <span class=\"nx\">suite</span> <span class=\"p\">}</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">benny</span><span class=\"dl\">'</span><span class=\"p\">)</span><span class=\"kd\">const</span> <span class=\"nx\">handlers</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">./helpers/handlers</span><span class=\"dl\">'</span><span class=\"p\">)</span><span class=\"nx\">module</span><span class=\"p\">.</span><span class=\"nx\">exports</span> <span class=\"o\">=</span> <span class=\"nx\">suite</span><span class=\"p\">(</span>  <span class=\"dl\">'</span><span class=\"s1\">My suite</span><span class=\"dl\">'</span><span class=\"p\">,</span>  <span class=\"nx\">add</span><span class=\"p\">(</span><span class=\"cm\">/* benchmark setup */</span><span class=\"p\">),</span>  <span class=\"nx\">add</span><span class=\"p\">(</span><span class=\"cm\">/* benchmark setup */</span><span class=\"p\">),</span>  <span class=\"nx\">add</span><span class=\"p\">(</span><span class=\"cm\">/* benchmark setup */</span><span class=\"p\">),</span>  <span class=\"p\">...</span><span class=\"nx\">handlers</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">my-suite</span><span class=\"dl\">'</span><span class=\"p\">),</span><span class=\"p\">)</span></code></pre></div></div><h3 id=\"parameterized-cases\">Parameterized cases</h3><p>There will often be the case, that you want to run very similar benchmarks, that differ very slightly, and can be parameterized, for example, let\u2019s say that we want to check the performance of our code for different size of the array:</p><p>Instead of:</p><div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">const</span> <span class=\"p\">{</span> <span class=\"nx\">add</span><span class=\"p\">,</span> <span class=\"nx\">cycle</span><span class=\"p\">,</span> <span class=\"nx\">suite</span> <span class=\"p\">}</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">benny</span><span class=\"dl\">'</span><span class=\"p\">)</span><span class=\"nx\">suite</span><span class=\"p\">(</span>  <span class=\"dl\">'</span><span class=\"s1\">Reduce</span><span class=\"dl\">'</span><span class=\"p\">,</span>  <span class=\"nx\">add</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">Raw JS 10 elements</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>    <span class=\"kd\">const</span> <span class=\"nx\">input</span> <span class=\"o\">=</span> <span class=\"nb\">Array</span><span class=\"p\">.</span><span class=\"k\">from</span><span class=\"p\">({</span> <span class=\"na\">length</span><span class=\"p\">:</span> <span class=\"mi\">10</span> <span class=\"p\">},</span> <span class=\"p\">(</span><span class=\"nx\">_</span><span class=\"p\">,</span> <span class=\"nx\">i</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">i</span><span class=\"p\">)</span>    <span class=\"k\">return</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">input</span><span class=\"p\">.</span><span class=\"nx\">reduce</span><span class=\"p\">((</span><span class=\"nx\">a</span><span class=\"p\">,</span> <span class=\"nx\">b</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">a</span> <span class=\"o\">+</span> <span class=\"nx\">b</span><span class=\"p\">)</span>  <span class=\"p\">}),</span>  <span class=\"nx\">add</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">Raw JS 1000 elements</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>    <span class=\"kd\">const</span> <span class=\"nx\">input</span> <span class=\"o\">=</span> <span class=\"nb\">Array</span><span class=\"p\">.</span><span class=\"k\">from</span><span class=\"p\">({</span> <span class=\"na\">length</span><span class=\"p\">:</span> <span class=\"mi\">1000</span> <span class=\"p\">},</span> <span class=\"p\">(</span><span class=\"nx\">_</span><span class=\"p\">,</span> <span class=\"nx\">i</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">i</span><span class=\"p\">)</span>    <span class=\"k\">return</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">input</span><span class=\"p\">.</span><span class=\"nx\">reduce</span><span class=\"p\">((</span><span class=\"nx\">a</span><span class=\"p\">,</span> <span class=\"nx\">b</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">a</span> <span class=\"o\">+</span> <span class=\"nx\">b</span><span class=\"p\">)</span>  <span class=\"p\">}),</span>  <span class=\"nx\">add</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">Raw JS 1000000 elements</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>    <span class=\"kd\">const</span> <span class=\"nx\">input</span> <span class=\"o\">=</span> <span class=\"nb\">Array</span><span class=\"p\">.</span><span class=\"k\">from</span><span class=\"p\">({</span> <span class=\"na\">length</span><span class=\"p\">:</span> <span class=\"mi\">1000000</span> <span class=\"p\">},</span> <span class=\"p\">(</span><span class=\"nx\">_</span><span class=\"p\">,</span> <span class=\"nx\">i</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">i</span><span class=\"p\">)</span>    <span class=\"k\">return</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">input</span><span class=\"p\">.</span><span class=\"nx\">reduce</span><span class=\"p\">((</span><span class=\"nx\">a</span><span class=\"p\">,</span> <span class=\"nx\">b</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">a</span> <span class=\"o\">+</span> <span class=\"nx\">b</span><span class=\"p\">)</span>  <span class=\"p\">}),</span>  <span class=\"nx\">cycle</span><span class=\"p\">(),</span><span class=\"p\">)</span></code></pre></div></div><p>You can auto-generate cases like this:</p><div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">const</span> <span class=\"p\">{</span> <span class=\"nx\">add</span><span class=\"p\">,</span> <span class=\"nx\">cycle</span><span class=\"p\">,</span> <span class=\"nx\">suite</span> <span class=\"p\">}</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">benny</span><span class=\"dl\">'</span><span class=\"p\">)</span><span class=\"kd\">const</span> <span class=\"nx\">testManySizes</span> <span class=\"o\">=</span> <span class=\"p\">(...</span><span class=\"nx\">sizes</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span>  <span class=\"nx\">sizes</span><span class=\"p\">.</span><span class=\"nx\">map</span><span class=\"p\">((</span><span class=\"nx\">size</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>    <span class=\"k\">return</span> <span class=\"nx\">add</span><span class=\"p\">(</span><span class=\"s2\">`Raw JS </span><span class=\"p\">${</span><span class=\"nx\">size</span><span class=\"p\">}</span><span class=\"s2\"> elements`</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>      <span class=\"kd\">const</span> <span class=\"nx\">input</span> <span class=\"o\">=</span> <span class=\"nb\">Array</span><span class=\"p\">.</span><span class=\"k\">from</span><span class=\"p\">({</span> <span class=\"na\">length</span><span class=\"p\">:</span> <span class=\"nx\">size</span> <span class=\"p\">},</span> <span class=\"p\">(</span><span class=\"nx\">_</span><span class=\"p\">,</span> <span class=\"nx\">i</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">i</span><span class=\"p\">)</span>      <span class=\"k\">return</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">input</span><span class=\"p\">.</span><span class=\"nx\">reduce</span><span class=\"p\">((</span><span class=\"nx\">a</span><span class=\"p\">,</span> <span class=\"nx\">b</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">a</span> <span class=\"o\">+</span> <span class=\"nx\">b</span><span class=\"p\">)</span>    <span class=\"p\">})</span>  <span class=\"p\">})</span><span class=\"nx\">module</span><span class=\"p\">.</span><span class=\"nx\">exports</span> <span class=\"o\">=</span> <span class=\"nx\">suite</span><span class=\"p\">(</span>  <span class=\"dl\">'</span><span class=\"s1\">Reduce</span><span class=\"dl\">'</span><span class=\"p\">,</span>  <span class=\"p\">...</span><span class=\"nx\">testManySizes</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">1000</span><span class=\"p\">,</span> <span class=\"mi\">1000000</span><span class=\"p\">),</span>  <span class=\"nx\">cycle</span><span class=\"p\">(),</span><span class=\"p\">)</span></code></pre></div></div><p>Similarly, you can test many implementations of the same function:</p><p>Instead of:</p><div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">const</span> <span class=\"p\">{</span> <span class=\"nx\">add</span><span class=\"p\">,</span> <span class=\"nx\">cycle</span><span class=\"p\">,</span> <span class=\"nx\">suite</span> <span class=\"p\">}</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">benny</span><span class=\"dl\">'</span><span class=\"p\">)</span><span class=\"kd\">const</span> <span class=\"nx\">A</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">@arrows/array</span><span class=\"dl\">'</span><span class=\"p\">)</span><span class=\"kd\">const</span> <span class=\"nx\">R</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">ramda</span><span class=\"dl\">'</span><span class=\"p\">)</span><span class=\"kd\">const</span> <span class=\"nx\">_</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">lodash/fp</span><span class=\"dl\">'</span><span class=\"p\">)</span><span class=\"kd\">const</span> <span class=\"nx\">input</span> <span class=\"o\">=</span> <span class=\"nb\">Array</span><span class=\"p\">.</span><span class=\"k\">from</span><span class=\"p\">({</span> <span class=\"na\">length</span><span class=\"p\">:</span> <span class=\"mi\">100</span> <span class=\"p\">},</span> <span class=\"p\">(</span><span class=\"nx\">_</span><span class=\"p\">,</span> <span class=\"nx\">i</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">i</span><span class=\"p\">)</span><span class=\"nx\">module</span><span class=\"p\">.</span><span class=\"nx\">exports</span> <span class=\"o\">=</span> <span class=\"nx\">suite</span><span class=\"p\">(</span>  <span class=\"dl\">'</span><span class=\"s1\">Reduce</span><span class=\"dl\">'</span><span class=\"p\">,</span>  <span class=\"nx\">add</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">Ramda</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>    <span class=\"nx\">R</span><span class=\"p\">.</span><span class=\"nx\">reduce</span><span class=\"p\">((</span><span class=\"nx\">a</span><span class=\"p\">,</span> <span class=\"nx\">b</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">a</span> <span class=\"o\">+</span> <span class=\"nx\">b</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)(</span><span class=\"nx\">input</span><span class=\"p\">)</span>  <span class=\"p\">}),</span>  <span class=\"nx\">add</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">Arrows</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>    <span class=\"nx\">A</span><span class=\"p\">.</span><span class=\"nx\">reduce</span><span class=\"p\">((</span><span class=\"nx\">a</span><span class=\"p\">,</span> <span class=\"nx\">b</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">a</span> <span class=\"o\">+</span> <span class=\"nx\">b</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)(</span><span class=\"nx\">input</span><span class=\"p\">)</span>  <span class=\"p\">}),</span>  <span class=\"nx\">add</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">Lodash</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>    <span class=\"nx\">_</span><span class=\"p\">.</span><span class=\"nx\">reduce</span><span class=\"p\">((</span><span class=\"nx\">a</span><span class=\"p\">,</span> <span class=\"nx\">b</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">a</span> <span class=\"o\">+</span> <span class=\"nx\">b</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)(</span><span class=\"nx\">input</span><span class=\"p\">)</span>  <span class=\"p\">}),</span>  <span class=\"nx\">cycle</span><span class=\"p\">(),</span><span class=\"p\">)</span></code></pre></div></div><p>You can auto-generate cases like this:</p><div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">const</span> <span class=\"p\">{</span> <span class=\"nx\">add</span><span class=\"p\">,</span> <span class=\"nx\">cycle</span><span class=\"p\">,</span> <span class=\"nx\">suite</span> <span class=\"p\">}</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">benny</span><span class=\"dl\">'</span><span class=\"p\">)</span><span class=\"kd\">const</span> <span class=\"nx\">A</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">@arrows/array</span><span class=\"dl\">'</span><span class=\"p\">)</span><span class=\"kd\">const</span> <span class=\"nx\">R</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">ramda</span><span class=\"dl\">'</span><span class=\"p\">)</span><span class=\"kd\">const</span> <span class=\"nx\">_</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">lodash/fp</span><span class=\"dl\">'</span><span class=\"p\">)</span><span class=\"kd\">const</span> <span class=\"nx\">input</span> <span class=\"o\">=</span> <span class=\"nb\">Array</span><span class=\"p\">.</span><span class=\"k\">from</span><span class=\"p\">({</span> <span class=\"na\">length</span><span class=\"p\">:</span> <span class=\"mi\">100</span> <span class=\"p\">},</span> <span class=\"p\">(</span><span class=\"nx\">_</span><span class=\"p\">,</span> <span class=\"nx\">i</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">i</span><span class=\"p\">)</span><span class=\"kd\">const</span> <span class=\"nx\">testManyImplementations</span> <span class=\"o\">=</span> <span class=\"p\">(...</span><span class=\"nx\">cases</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span>  <span class=\"nx\">cases</span><span class=\"p\">.</span><span class=\"nx\">map</span><span class=\"p\">(([</span><span class=\"nx\">name</span><span class=\"p\">,</span> <span class=\"nx\">fn</span><span class=\"p\">])</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>    <span class=\"k\">return</span> <span class=\"nx\">add</span><span class=\"p\">(</span><span class=\"nx\">name</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>      <span class=\"nx\">fn</span><span class=\"p\">((</span><span class=\"nx\">a</span><span class=\"p\">,</span> <span class=\"nx\">b</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">a</span> <span class=\"o\">+</span> <span class=\"nx\">b</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)(</span><span class=\"nx\">input</span><span class=\"p\">)</span>    <span class=\"p\">})</span>  <span class=\"p\">})</span><span class=\"nx\">module</span><span class=\"p\">.</span><span class=\"nx\">exports</span> <span class=\"o\">=</span> <span class=\"nx\">suite</span><span class=\"p\">(</span>  <span class=\"dl\">'</span><span class=\"s1\">Reduce</span><span class=\"dl\">'</span><span class=\"p\">,</span>  <span class=\"p\">...</span><span class=\"nx\">testManyImplementations</span><span class=\"p\">(</span>    <span class=\"p\">[</span><span class=\"dl\">'</span><span class=\"s1\">Ramda</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"nx\">R</span><span class=\"p\">.</span><span class=\"nx\">reduce</span><span class=\"p\">],</span>    <span class=\"p\">[</span><span class=\"dl\">'</span><span class=\"s1\">Arrows</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"nx\">A</span><span class=\"p\">.</span><span class=\"nx\">reduce</span><span class=\"p\">],</span>    <span class=\"p\">[</span><span class=\"dl\">'</span><span class=\"s1\">Lodash</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"nx\">_</span><span class=\"p\">.</span><span class=\"nx\">reduce</span><span class=\"p\">],</span>  <span class=\"p\">),</span>  <span class=\"nx\">cycle</span><span class=\"p\">(),</span><span class=\"p\">)</span></code></pre></div></div><hr /><p>These are the three most useful techniques - you can combine them together to achieve less repetition in your benchmark code. Just remember to not overuse them - benchmarks, just like tests, should remain straightforward.</p><p><a id=\"snippets\"></a></p><h2 id=\"snippets\">Snippets</h2><p>If you are using Visual Studio Code or <a href=\"https://github.com/VSCodium/vscodium\">VSCodium</a>, you can use following code snippets -&gt; <a href=\"/benny/snippets.json\">click</a></p><p>To add them, open <code class=\"language-plaintext highlighter-rouge\">File -&gt; Preferences -&gt; User Snippets</code>, chose a language (JS, TS or both) and paste additional keys from the snippets file.</p><p>You can see how they work in the demo GIF.</p><p><a id=\"additional-examples\"></a></p><h2 id=\"additional-examples\">Additional examples</h2><p>For more examples check out the <a href=\"examples\">/examples</a> folder.</p><p>You can run all the examples locally if you want. Just remember to run <code class=\"language-plaintext highlighter-rouge\">npm i</code> or <code class=\"language-plaintext highlighter-rouge\">yarn</code> in the examples folder first.</p><p><a id=\"license\"></a></p><h2 id=\"license\">License</h2><p>Project is under open, non-restrictive <a href=\"/benny/LICENSE.md\">ISC license</a>.</p>            <div class=\"footer border-top border-gray-light mt-5 pt-3 text-right text-gray\">        This site is open source. <a href=\"https://github.com/caderek/benny/edit/master/README.md\">Improve this page</a>.      </div>          </div>    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/anchor-js/4.1.0/anchor.min.js\" integrity=\"sha256-lZaRhKri35AyJSypXXs4o6OPFTbTmUoltBbDCbdzegg=\" crossorigin=\"anonymous\"></script>    <script>anchors.add();</script>  </body></html>",
  "embeddings": []
}
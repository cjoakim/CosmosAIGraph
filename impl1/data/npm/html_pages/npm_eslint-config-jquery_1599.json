{
  "libtype": "npm",
  "libname": "eslint-config-jquery",
  "url": "https://contribute.jquery.org/style-guide/js/",
  "html": "<!doctype html><html class=\"no-js\" lang=\"en-US\"><head><meta charset=\"utf-8\"><meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"><title>JavaScript Style Guide | Contribute to jQuery</title><meta name=\"author\" content=\"OpenJS Foundation - openjsf.org\"><meta name=\"description\" content=\"\"><meta name=\"viewport\" content=\"width=device-width\"><link rel=\"shortcut icon\" href=\"https://contribute.jquery.org/wp-content/themes/contribute.jquery.org/i/favicon.ico\"><link rel=\"stylesheet\" href=\"https://contribute.jquery.org/wp-content/themes/jquery/lib/typesense-minibar/typesense-minibar.css\"><link rel=\"stylesheet\" href=\"https://contribute.jquery.org/wp-content/themes/jquery/css/base.css?v=10\"><link rel=\"stylesheet\" href=\"https://contribute.jquery.org/wp-content/themes/contribute.jquery.org/style.css?v=6\"><script src=\"https://code.jquery.com/jquery-3.7.1.min.js\"></script><script src=\"https://contribute.jquery.org/wp-content/themes/jquery/js/main.js\"></script><meta name='robots' content='max-image-preview:large' /><link rel=\"https://api.w.org/\" href=\"https://contribute.jquery.org/wp-json/\" /><link rel=\"alternate\" type=\"application/json\" href=\"https://contribute.jquery.org/wp-json/wp/v2/pages/42\" /><meta name=\"generator\" content=\"WordPress 6.4.3\" /><link rel=\"canonical\" href=\"https://contribute.jquery.org/style-guide/js/\" /><link rel=\"alternate\" type=\"application/json+oembed\" href=\"https://contribute.jquery.org/wp-json/oembed/1.0/embed?url=https%3A%2F%2Fcontribute.jquery.org%2Fstyle-guide%2Fjs%2F\" /><link rel=\"alternate\" type=\"text/xml+oembed\" href=\"https://contribute.jquery.org/wp-json/oembed/1.0/embed?url=https%3A%2F%2Fcontribute.jquery.org%2Fstyle-guide%2Fjs%2F&#038;format=xml\" /></head><body class=\"jquery-foundation page-template-default page page-id-42 page-child parent-pageid-26 page-slug-js single-author singular\"><header><section id=\"global-nav\"><nav><div class=\"constrain\"><ul class=\"projects\"><li class=\"project jquery\"><a href=\"https://jquery.com/\" title=\"jQuery\">jQuery</a></li><li class=\"project jquery-ui\"><a href=\"https://jqueryui.com/\" title=\"jQuery UI\">jQuery UI</a></li><li class=\"project jquery-mobile\"><a href=\"https://jquerymobile.com/\" title=\"jQuery Mobile\">jQuery Mobile</a></li><li class=\"project sizzlejs\"><a href=\"https://sizzlejs.com/\" title=\"Sizzle\">Sizzle</a></li><li class=\"project qunitjs\"><a href=\"https://qunitjs.com/\" title=\"QUnit\">QUnit</a></li></ul><ul class=\"links\"><li><a href=\"https://plugins.jquery.com/\">Plugins</a></li><li class=\"dropdown\"><a href=\"https://contribute.jquery.org/\">Contribute</a><ul><li><a href=\"https://cla.openjsf.org/\">CLA</a></li><li><a href=\"https://contribute.jquery.org/style-guide/\">Style Guides</a></li><li><a href=\"https://contribute.jquery.org/triage/\">Bug Triage</a></li><li><a href=\"https://contribute.jquery.org/code/\">Code</a></li><li><a href=\"https://contribute.jquery.org/documentation/\">Documentation</a></li><li><a href=\"https://contribute.jquery.org/web-sites/\">Web Sites</a></li></ul></li><li class=\"dropdown\"><a href=\"https://js.foundation/events\">Events</a><ul class=\"wide\"></ul></li><li class=\"dropdown\"><a href=\"https://jquery.org/support/\">Support</a><ul><li><a href=\"https://learn.jquery.com/\">Learning Center</a></li><li><a href=\"https://irc.jquery.org/\">IRC/Chat</a></li><li><a href=\"https://forum.jquery.com/\">Forums</a></li><li><a href=\"https://stackoverflow.com/tags/jquery/info\">Stack Overflow</a></li><li><a href=\"https://jquery.org/support/\">Commercial Support</a></li></ul></li><li class=\"dropdown\"><a href=\"https://openjsf.org/\">OpenJS Foundation</a><ul><li><a href=\"https://openjsf.org/about/join/\">Join</a></li><li><a href=\"https://openjsf.org/about/members/\">Members</a></li><li><a href=\"https://jquery.com/team\">jQuery Team</a></li><li><a href=\"https://openjsf.org/about/governance/\">Governance</a></li><li><a href=\"https://code-of-conduct.openjsf.org/\">Conduct</a></li><li><a href=\"https://openjsf.org/about/project-funding-opportunities/\">Donate</a></li></ul></li></ul></div></nav></section></header><div id=\"container\"><div id=\"logo-events\" class=\"constrain clearfix\"><h2 class=\"logo\"><a href=\"/\" title=\"Contribute to jQuery\">Contribute to jQuery</a></h2><aside id=\"broadcast\"></aside></div><nav id=\"main\" class=\"constrain clearfix\"><div class=\"menu-top-container\"><button hidden id=\"menu-trigger\" class=\"button menu-trigger\" aria-expanded=\"false\" aria-haspopup=\"menu\">Navigation</button><ul id=\"menu-top\" class=\"menu\" role=\"menu\" aria-labelledby=\"menu-trigger\"><li class=\"menu-item\"><a href=\"https://cla.openjsf.org/\">CLA</a></li><li class=\"menu-item current\"><a href=\"https://contribute.jquery.org/style-guide/\">Style Guides</a></li><li class=\"menu-item\"><a href=\"https://contribute.jquery.org/markup-conventions/\">Markup Conventions</a></li><li class=\"menu-item\"><a href=\"https://contribute.jquery.org/commits-and-pull-requests/\">Commits &amp; Pull Requests</a></li></ul></div><form role=\"search\" class=\"searchform tsmb-form\" action=\"https://contribute.jquery.org/\" method=\"get\"><input type=\"search\" name=\"s\" aria-label=\"Search Contribute to jQuery\" value=\"\" placeholder=\"Search\" autocomplete=\"off\"><button type=\"submit\" class=\"visuallyhidden\"></button></form></nav><div id=\"content-wrapper\" class=\"clearfix row\"><div class=\"content-right twelve columns\"><div id=\"content\"><h1 class=\"entry-title\">JavaScript Style Guide</h1><hr><ul><li><a href=\"#linting\">Linting</a></li><li><a href=\"#spacing\">Spacing</a><ul><li><a href=\"#bad-examples\">Bad Examples</a></li><li><a href=\"#good-examples\">Good Examples</a></li><li><a href=\"#object-and-array-expressions\">Object and Array Expressions</a></li><li><a href=\"#multi-line-statements\">Multi-line Statements</a></li><li><a href=\"#chained-method-calls\">Chained Method Calls</a></li><li><a href=\"#full-file-closures\">Full File Closures</a></li></ul></li><li><a href=\"#constructors\">Constructors</a></li><li><a href=\"#equality\">Equality</a></li><li><a href=\"#type-checks\">Type Checks</a></li><li><a href=\"#comments\">Comments</a></li><li><a href=\"#quotes\">Quotes</a></li><li><a href=\"#semicolons\">Semicolons</a></li><li><a href=\"#naming-conventions\">Naming Conventions</a></li><li><a href=\"#global-variables\">Global Variables</a></li><li><a href=\"#dom-node-rules\">DOM Node Rules</a></li><li><a href=\"#switch-statements\">Switch Statements</a></li></ul><h2 class=\"toc-linked\"><a href=\"#linting\" id=\"linting\" class=\"icon-link toc-link\"><span class=\"visuallyhidden\">link</span></a> Linting</h2><p>Use JSHint to detect errors and potential problems. Every jQuery project has a Grunt task for linting all JavaScript files: <code>grunt jshint</code>. The options for JSHint are stored in a <code>.jshintrc</code> file; many repositories will have multiple <code>.jshintrc</code> files based on the type of code in each directory.</p><p>Each <code>.jshintrc</code> file follows a specific format. All options must be alphabetized and grouped:</p><div class=\"syntaxhighlighter javascript\"><table><tbody><tr><td class=\"gutter\"><div class=\"line n1\">1</div><div class=\"line n2\">2</div><div class=\"line n3\">3</div><div class=\"line n4\">4</div><div class=\"line n5\">5</div><div class=\"line n6\">6</div><div class=\"line n7\">7</div><div class=\"line n8\">8</div><div class=\"line n9\">9</div><div class=\"line n10\">10</div><div class=\"line n11\">11</div><div class=\"line n12\">12</div></td><td class=\"code\"><pre><div class=\"container\"><div class=\"line\"><code>{</code></div></div><div class=\"container\"><div class=\"line\"><code>    <span class=\"hljs-string\">&quot;common1&quot;</span>: <span class=\"hljs-literal\">true</span>,</code></div></div><div class=\"container\"><div class=\"line\"><code>    <span class=\"hljs-string\">&quot;common2&quot;</span>: <span class=\"hljs-literal\">true</span>,</code></div></div><div class=\"container\"><div class=\"line\"><code> </code></div></div><div class=\"container\"><div class=\"line\"><code>    <span class=\"hljs-string\">&quot;repoSpecific1&quot;</span>: <span class=\"hljs-literal\">true</span>,</code></div></div><div class=\"container\"><div class=\"line\"><code>    <span class=\"hljs-string\">&quot;repoSpecific2&quot;</span>: <span class=\"hljs-literal\">true</span>,</code></div></div><div class=\"container\"><div class=\"line\"><code> </code></div></div><div class=\"container\"><div class=\"line\"><code>    <span class=\"hljs-string\">&quot;globals&quot;</span>: {</code></div></div><div class=\"container\"><div class=\"line\"><code>        <span class=\"hljs-string\">&quot;repoGlobal1&quot;</span>: <span class=\"hljs-literal\">true</span>,</code></div></div><div class=\"container\"><div class=\"line\"><code>        <span class=\"hljs-string\">&quot;repoGlobal2&quot;</span>: <span class=\"hljs-literal\">false</span></code></div></div><div class=\"container\"><div class=\"line\"><code>    }</code></div></div><div class=\"container\"><div class=\"line\"><code>}</code></div></div></pre></td></tr></tbody></table></div><p>The following common options must be used in all projects:</p><div class=\"syntaxhighlighter javascript\"><table><tbody><tr><td class=\"gutter\"><div class=\"line n1\">1</div><div class=\"line n2\">2</div><div class=\"line n3\">3</div><div class=\"line n4\">4</div><div class=\"line n5\">5</div><div class=\"line n6\">6</div><div class=\"line n7\">7</div><div class=\"line n8\">8</div><div class=\"line n9\">9</div><div class=\"line n10\">10</div><div class=\"line n11\">11</div><div class=\"line n12\">12</div><div class=\"line n13\">13</div><div class=\"line n14\">14</div></td><td class=\"code\"><pre><div class=\"container\"><div class=\"line\"><code>{</code></div></div><div class=\"container\"><div class=\"line\"><code>    <span class=\"hljs-string\">&quot;boss&quot;</span>: <span class=\"hljs-literal\">true</span>,</code></div></div><div class=\"container\"><div class=\"line\"><code>    <span class=\"hljs-string\">&quot;curly&quot;</span>: <span class=\"hljs-literal\">true</span>,</code></div></div><div class=\"container\"><div class=\"line\"><code>    <span class=\"hljs-string\">&quot;eqeqeq&quot;</span>: <span class=\"hljs-literal\">true</span>,</code></div></div><div class=\"container\"><div class=\"line\"><code>    <span class=\"hljs-string\">&quot;eqnull&quot;</span>: <span class=\"hljs-literal\">true</span>,</code></div></div><div class=\"container\"><div class=\"line\"><code>    <span class=\"hljs-string\">&quot;expr&quot;</span>: <span class=\"hljs-literal\">true</span>,</code></div></div><div class=\"container\"><div class=\"line\"><code>    <span class=\"hljs-string\">&quot;immed&quot;</span>: <span class=\"hljs-literal\">true</span>,</code></div></div><div class=\"container\"><div class=\"line\"><code>    <span class=\"hljs-string\">&quot;noarg&quot;</span>: <span class=\"hljs-literal\">true</span>,</code></div></div><div class=\"container\"><div class=\"line\"><code>    <span class=\"hljs-string\">&quot;quotmark&quot;</span>: <span class=\"hljs-string\">&quot;double&quot;</span>,</code></div></div><div class=\"container\"><div class=\"line\"><code>    <span class=\"hljs-string\">&quot;smarttabs&quot;</span>: <span class=\"hljs-literal\">true</span>,</code></div></div><div class=\"container\"><div class=\"line\"><code>    <span class=\"hljs-string\">&quot;trailing&quot;</span>: <span class=\"hljs-literal\">true</span>,</code></div></div><div class=\"container\"><div class=\"line\"><code>    <span class=\"hljs-string\">&quot;undef&quot;</span>: <span class=\"hljs-literal\">true</span>,</code></div></div><div class=\"container\"><div class=\"line\"><code>    <span class=\"hljs-string\">&quot;unused&quot;</span>: <span class=\"hljs-literal\">true</span></code></div></div><div class=\"container\"><div class=\"line\"><code>}</code></div></div></pre></td></tr></tbody></table></div><p><em>If the project supports browsers which do not implement ES5, then the <code>es3</code> option must be included with the repo-specific options.</em></p><h2 class=\"toc-linked\"><a href=\"#spacing\" id=\"spacing\" class=\"icon-link toc-link\"><span class=\"visuallyhidden\">link</span></a> Spacing</h2><p>In general, the jQuery style guide encourages liberal spacing for improved human readability. The minification process creates a file that is optimized for browsers to read and process.</p><ul><li>Indentation with tabs.</li><li>No whitespace at the end of line or on blank lines.</li><li>Lines should be no longer than 80 characters, and must not exceed 100 (counting tabs as 4 spaces). There are 2 exceptions, both allowing the line to exceed 100 characters:<ul><li>If the line contains a comment with a long URL.</li><li>If the line contains a regex literal. This prevents having to use the regex constructor which requires otherwise unnecessary string escaping.</li></ul></li><li><code>if</code>/<code>else</code>/<code>for</code>/<code>while</code>/<code>try</code> always have braces and always go on multiple lines.</li><li>Unary special-character operators (e.g., <code>!</code>, <code>++</code>) must not have space next to their operand.</li><li>Any <code>,</code> and <code>;</code> must not have preceding space.</li><li>Any <code>;</code> used as a statement terminator must be at the end of the line.</li><li>Any <code>:</code> after a property name in an object definition must not have preceding space.</li><li>The <code>?</code> and <code>:</code> in a ternary conditional must have space on both sides.</li><li>No filler spaces in empty constructs (e.g., <code>{}</code>, <code>[]</code>, <code>fn()</code>)</li><li>New line at the end of each file.</li><li>If the entire file is wrapped in a closure, the function body is not indented. See <a href=\"#full-file-closures\">full file closures</a> for examples.</li></ul><h3 class=\"toc-linked\"><a href=\"#bad-examples\" id=\"bad-examples\" class=\"icon-link toc-link\"><span class=\"visuallyhidden\">link</span></a> Bad Examples</h3><div class=\"syntaxhighlighter javascript\"><table><tbody><tr><td class=\"gutter\"><div class=\"line n1\">1</div><div class=\"line n2\">2</div><div class=\"line n3\">3</div><div class=\"line n4\">4</div></td><td class=\"code\"><pre><div class=\"container\"><div class=\"line\"><code><span class=\"hljs-comment\">// Bad</span></code></div></div><div class=\"container\"><div class=\"line\"><code><span class=\"hljs-keyword\">if</span>(condition) doSomething();</code></div></div><div class=\"container\"><div class=\"line\"><code><span class=\"hljs-keyword\">while</span>(!condition) iterating++;</code></div></div><div class=\"container\"><div class=\"line\"><code><span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">var</span> i=<span class=\"hljs-number\">0</span>;i&lt;<span class=\"hljs-number\">100</span>;i++) object[array[i]] = someFn(i);</code></div></div></pre></td></tr></tbody></table></div><h3 class=\"toc-linked\"><a href=\"#good-examples\" id=\"good-examples\" class=\"icon-link toc-link\"><span class=\"visuallyhidden\">link</span></a> Good Examples</h3><div class=\"syntaxhighlighter javascript\"><table><tbody><tr><td class=\"gutter\"><div class=\"line n1\">1</div><div class=\"line n2\">2</div><div class=\"line n3\">3</div><div class=\"line n4\">4</div><div class=\"line n5\">5</div><div class=\"line n6\">6</div><div class=\"line n7\">7</div><div class=\"line n8\">8</div><div class=\"line n9\">9</div><div class=\"line n10\">10</div><div class=\"line n11\">11</div><div class=\"line n12\">12</div><div class=\"line n13\">13</div><div class=\"line n14\">14</div><div class=\"line n15\">15</div><div class=\"line n16\">16</div><div class=\"line n17\">17</div><div class=\"line n18\">18</div><div class=\"line n19\">19</div><div class=\"line n20\">20</div><div class=\"line n21\">21</div><div class=\"line n22\">22</div><div class=\"line n23\">23</div><div class=\"line n24\">24</div><div class=\"line n25\">25</div><div class=\"line n26\">26</div><div class=\"line n27\">27</div><div class=\"line n28\">28</div><div class=\"line n29\">29</div><div class=\"line n30\">30</div><div class=\"line n31\">31</div><div class=\"line n32\">32</div><div class=\"line n33\">33</div><div class=\"line n34\">34</div><div class=\"line n35\">35</div><div class=\"line n36\">36</div><div class=\"line n37\">37</div><div class=\"line n38\">38</div><div class=\"line n39\">39</div><div class=\"line n40\">40</div><div class=\"line n41\">41</div><div class=\"line n42\">42</div><div class=\"line n43\">43</div><div class=\"line n44\">44</div><div class=\"line n45\">45</div><div class=\"line n46\">46</div><div class=\"line n47\">47</div><div class=\"line n48\">48</div><div class=\"line n49\">49</div><div class=\"line n50\">50</div><div class=\"line n51\">51</div><div class=\"line n52\">52</div><div class=\"line n53\">53</div><div class=\"line n54\">54</div></td><td class=\"code\"><pre><div class=\"container\"><div class=\"line\"><code><span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>;</code></div></div><div class=\"container\"><div class=\"line\"><code> </code></div></div><div class=\"container\"><div class=\"line\"><code><span class=\"hljs-keyword\">if</span> ( condition ) {</code></div></div><div class=\"container\"><div class=\"line\"><code>    doSomething();</code></div></div><div class=\"container\"><div class=\"line\"><code>} <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> ( otherCondition ) {</code></div></div><div class=\"container\"><div class=\"line\"><code>    somethingElse();</code></div></div><div class=\"container\"><div class=\"line\"><code>} <span class=\"hljs-keyword\">else</span> {</code></div></div><div class=\"container\"><div class=\"line\"><code>    otherThing();</code></div></div><div class=\"container\"><div class=\"line\"><code>}</code></div></div><div class=\"container\"><div class=\"line\"><code> </code></div></div><div class=\"container\"><div class=\"line\"><code><span class=\"hljs-keyword\">while</span> ( !condition ) {</code></div></div><div class=\"container\"><div class=\"line\"><code>    iterating++;</code></div></div><div class=\"container\"><div class=\"line\"><code>}</code></div></div><div class=\"container\"><div class=\"line\"><code> </code></div></div><div class=\"container\"><div class=\"line\"><code><span class=\"hljs-keyword\">for</span> ( ; i &lt; <span class=\"hljs-number\">100</span>; i++ ) {</code></div></div><div class=\"container\"><div class=\"line\"><code>    object[ array[ i ] ] = someFn( i );</code></div></div><div class=\"container\"><div class=\"line\"><code>}</code></div></div><div class=\"container\"><div class=\"line\"><code> </code></div></div><div class=\"container\"><div class=\"line\"><code><span class=\"hljs-keyword\">try</span> {</code></div></div><div class=\"container\"><div class=\"line\"><code> </code></div></div><div class=\"container\"><div class=\"line\"><code>    <span class=\"hljs-comment\">// Expressions</span></code></div></div><div class=\"container\"><div class=\"line\"><code>} <span class=\"hljs-keyword\">catch</span> ( e ) {</code></div></div><div class=\"container\"><div class=\"line\"><code> </code></div></div><div class=\"container\"><div class=\"line\"><code>    <span class=\"hljs-comment\">// Expressions</span></code></div></div><div class=\"container\"><div class=\"line\"><code>}</code></div></div><div class=\"container\"><div class=\"line\"><code> </code></div></div><div class=\"container\"><div class=\"line\"><code>array = [ <span class=\"hljs-string\">&quot;*&quot;</span> ];</code></div></div><div class=\"container\"><div class=\"line\"><code> </code></div></div><div class=\"container\"><div class=\"line\"><code>array = [ a, b ];</code></div></div><div class=\"container\"><div class=\"line\"><code> </code></div></div><div class=\"container\"><div class=\"line\"><code>foo( arg );</code></div></div><div class=\"container\"><div class=\"line\"><code> </code></div></div><div class=\"container\"><div class=\"line\"><code>foo( options, object[ property ] );</code></div></div><div class=\"container\"><div class=\"line\"><code> </code></div></div><div class=\"container\"><div class=\"line\"><code>foo( [ a, b ], <span class=\"hljs-string\">&quot;property&quot;</span>, { <span class=\"hljs-attr\">c</span>: d } );</code></div></div><div class=\"container\"><div class=\"line\"><code> </code></div></div><div class=\"container\"><div class=\"line\"><code>foo( { <span class=\"hljs-attr\">a</span>: <span class=\"hljs-string\">&quot;alpha&quot;</span>, <span class=\"hljs-attr\">b</span>: <span class=\"hljs-string\">&quot;beta&quot;</span> } );</code></div></div><div class=\"container\"><div class=\"line\"><code> </code></div></div><div class=\"container\"><div class=\"line\"><code>foo( [ a, b ] );</code></div></div><div class=\"container\"><div class=\"line\"><code> </code></div></div><div class=\"container\"><div class=\"line\"><code>foo( {</code></div></div><div class=\"container\"><div class=\"line\"><code>    <span class=\"hljs-attr\">a</span>: <span class=\"hljs-string\">&quot;alpha&quot;</span>,</code></div></div><div class=\"container\"><div class=\"line\"><code>    <span class=\"hljs-attr\">b</span>: <span class=\"hljs-string\">&quot;beta&quot;</span></code></div></div><div class=\"container\"><div class=\"line\"><code>} );</code></div></div><div class=\"container\"><div class=\"line\"><code> </code></div></div><div class=\"container\"><div class=\"line\"><code>foo( <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{</code></div></div><div class=\"container\"><div class=\"line\"><code> </code></div></div><div class=\"container\"><div class=\"line\"><code>    <span class=\"hljs-comment\">// Do stuff</span></code></div></div><div class=\"container\"><div class=\"line\"><code>}, options );</code></div></div><div class=\"container\"><div class=\"line\"><code> </code></div></div><div class=\"container\"><div class=\"line\"><code>foo( data, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{</code></div></div><div class=\"container\"><div class=\"line\"><code> </code></div></div><div class=\"container\"><div class=\"line\"><code>    <span class=\"hljs-comment\">// Do stuff</span></code></div></div><div class=\"container\"><div class=\"line\"><code>} );</code></div></div></pre></td></tr></tbody></table></div><h3 class=\"toc-linked\"><a href=\"#object-and-array-expressions\" id=\"object-and-array-expressions\" class=\"icon-link toc-link\"><span class=\"visuallyhidden\">link</span></a> Object and Array Expressions</h3><p>Object and array expressions can be on one line if they are short (remember the line length limits). When an expression is too long to fit on one line, there must be one property or element per line, with the opening and closing braces each on their own lines. Property names only need to be quoted if they are reserved words or contain special characters:</p><div class=\"syntaxhighlighter javascript\"><table><tbody><tr><td class=\"gutter\"><div class=\"line n1\">1</div><div class=\"line n2\">2</div><div class=\"line n3\">3</div><div class=\"line n4\">4</div><div class=\"line n5\">5</div><div class=\"line n6\">6</div><div class=\"line n7\">7</div><div class=\"line n8\">8</div><div class=\"line n9\">9</div><div class=\"line n10\">10</div><div class=\"line n11\">11</div><div class=\"line n12\">12</div><div class=\"line n13\">13</div><div class=\"line n14\">14</div><div class=\"line n15\">15</div><div class=\"line n16\">16</div><div class=\"line n17\">17</div><div class=\"line n18\">18</div><div class=\"line n19\">19</div><div class=\"line n20\">20</div><div class=\"line n21\">21</div><div class=\"line n22\">22</div><div class=\"line n23\">23</div><div class=\"line n24\">24</div><div class=\"line n25\">25</div><div class=\"line n26\">26</div><div class=\"line n27\">27</div><div class=\"line n28\">28</div><div class=\"line n29\">29</div><div class=\"line n30\">30</div><div class=\"line n31\">31</div><div class=\"line n32\">32</div><div class=\"line n33\">33</div><div class=\"line n34\">34</div><div class=\"line n35\">35</div><div class=\"line n36\">36</div><div class=\"line n37\">37</div><div class=\"line n38\">38</div><div class=\"line n39\">39</div><div class=\"line n40\">40</div><div class=\"line n41\">41</div><div class=\"line n42\">42</div><div class=\"line n43\">43</div><div class=\"line n44\">44</div><div class=\"line n45\">45</div><div class=\"line n46\">46</div><div class=\"line n47\">47</div><div class=\"line n48\">48</div><div class=\"line n49\">49</div><div class=\"line n50\">50</div><div class=\"line n51\">51</div><div class=\"line n52\">52</div><div class=\"line n53\">53</div><div class=\"line n54\">54</div><div class=\"line n55\">55</div><div class=\"line n56\">56</div><div class=\"line n57\">57</div><div class=\"line n58\">58</div><div class=\"line n59\">59</div></td><td class=\"code\"><pre><div class=\"container\"><div class=\"line\"><code><span class=\"hljs-comment\">// Bad</span></code></div></div><div class=\"container\"><div class=\"line\"><code>map = { <span class=\"hljs-attr\">ready</span>: <span class=\"hljs-number\">9</span>,</code></div></div><div class=\"container\"><div class=\"line\"><code>    <span class=\"hljs-attr\">when</span>: <span class=\"hljs-number\">4</span>, <span class=\"hljs-string\">&quot;you are&quot;</span>: <span class=\"hljs-number\">15</span> };</code></div></div><div class=\"container\"><div class=\"line\"><code> </code></div></div><div class=\"container\"><div class=\"line\"><code>array = [ <span class=\"hljs-number\">9</span>,</code></div></div><div class=\"container\"><div class=\"line\"><code>    <span class=\"hljs-number\">4</span>,</code></div></div><div class=\"container\"><div class=\"line\"><code>    <span class=\"hljs-number\">15</span> ];</code></div></div><div class=\"container\"><div class=\"line\"><code> </code></div></div><div class=\"container\"><div class=\"line\"><code>array = [ {</code></div></div><div class=\"container\"><div class=\"line\"><code>    <span class=\"hljs-attr\">key</span>: val</code></div></div><div class=\"container\"><div class=\"line\"><code>} ];</code></div></div><div class=\"container\"><div class=\"line\"><code> </code></div></div><div class=\"container\"><div class=\"line\"><code>array = [ {</code></div></div><div class=\"container\"><div class=\"line\"><code>    <span class=\"hljs-attr\">key</span>: val</code></div></div><div class=\"container\"><div class=\"line\"><code>}, {</code></div></div><div class=\"container\"><div class=\"line\"><code>    <span class=\"hljs-attr\">key2</span>: val2</code></div></div><div class=\"container\"><div class=\"line\"><code>} ];</code></div></div><div class=\"container\"><div class=\"line\"><code> </code></div></div><div class=\"container\"><div class=\"line\"><code><span class=\"hljs-comment\">// Good</span></code></div></div><div class=\"container\"><div class=\"line\"><code>map = { <span class=\"hljs-attr\">ready</span>: <span class=\"hljs-number\">9</span>, <span class=\"hljs-attr\">when</span>: <span class=\"hljs-number\">4</span>, <span class=\"hljs-string\">&quot;you are&quot;</span>: <span class=\"hljs-number\">15</span> };</code></div></div><div class=\"container\"><div class=\"line\"><code> </code></div></div><div class=\"container\"><div class=\"line\"><code>array = [ <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">15</span> ];</code></div></div><div class=\"container\"><div class=\"line\"><code> </code></div></div><div class=\"container\"><div class=\"line\"><code>array = [ { <span class=\"hljs-attr\">key</span>: val } ];</code></div></div><div class=\"container\"><div class=\"line\"><code> </code></div></div><div class=\"container\"><div class=\"line\"><code>array = [ { <span class=\"hljs-attr\">key</span>: val }, { <span class=\"hljs-attr\">key2</span>: val2 } ];</code></div></div><div class=\"container\"><div class=\"line\"><code> </code></div></div><div class=\"container\"><div class=\"line\"><code>array = [</code></div></div><div class=\"container\"><div class=\"line\"><code>    { <span class=\"hljs-attr\">key</span>: val },</code></div></div><div class=\"container\"><div class=\"line\"><code>    { <span class=\"hljs-attr\">key2</span>: val2 }</code></div></div><div class=\"container\"><div class=\"line\"><code>];</code></div></div><div class=\"container\"><div class=\"line\"><code> </code></div></div><div class=\"container\"><div class=\"line\"><code><span class=\"hljs-comment\">// Good as well</span></code></div></div><div class=\"container\"><div class=\"line\"><code>map = {</code></div></div><div class=\"container\"><div class=\"line\"><code>    <span class=\"hljs-attr\">ready</span>: <span class=\"hljs-number\">9</span>,</code></div></div><div class=\"container\"><div class=\"line\"><code>    <span class=\"hljs-attr\">when</span>: <span class=\"hljs-number\">4</span>,</code></div></div><div class=\"container\"><div class=\"line\"><code>    <span class=\"hljs-string\">&quot;you are&quot;</span>: <span class=\"hljs-number\">15</span></code></div></div><div class=\"container\"><div class=\"line\"><code>};</code></div></div><div class=\"container\"><div class=\"line\"><code> </code></div></div><div class=\"container\"><div class=\"line\"><code>array = [</code></div></div><div class=\"container\"><div class=\"line\"><code>    <span class=\"hljs-number\">9</span>,</code></div></div><div class=\"container\"><div class=\"line\"><code>    <span class=\"hljs-number\">4</span>,</code></div></div><div class=\"container\"><div class=\"line\"><code>    <span class=\"hljs-number\">15</span></code></div></div><div class=\"container\"><div class=\"line\"><code>];</code></div></div><div class=\"container\"><div class=\"line\"><code> </code></div></div><div class=\"container\"><div class=\"line\"><code>array = [</code></div></div><div class=\"container\"><div class=\"line\"><code>    {</code></div></div><div class=\"container\"><div class=\"line\"><code>        <span class=\"hljs-attr\">key</span>: val</code></div></div><div class=\"container\"><div class=\"line\"><code>    }</code></div></div><div class=\"container\"><div class=\"line\"><code>];</code></div></div><div class=\"container\"><div class=\"line\"><code> </code></div></div><div class=\"container\"><div class=\"line\"><code>array = [</code></div></div><div class=\"container\"><div class=\"line\"><code>    {</code></div></div><div class=\"container\"><div class=\"line\"><code>        <span class=\"hljs-attr\">key</span>: val</code></div></div><div class=\"container\"><div class=\"line\"><code>    },</code></div></div><div class=\"container\"><div class=\"line\"><code>    {</code></div></div><div class=\"container\"><div class=\"line\"><code>        <span class=\"hljs-attr\">key2</span>: val2</code></div></div><div class=\"container\"><div class=\"line\"><code>    }</code></div></div><div class=\"container\"><div class=\"line\"><code>];</code></div></div></pre></td></tr></tbody></table></div><h3 class=\"toc-linked\"><a href=\"#multi-line-statements\" id=\"multi-line-statements\" class=\"icon-link toc-link\"><span class=\"visuallyhidden\">link</span></a> Multi-line Statements</h3><p>When a statement is too long to fit on one line, line breaks must occur after an operator.</p><div class=\"syntaxhighlighter javascript\"><table><tbody><tr><td class=\"gutter\"><div class=\"line n1\">1</div><div class=\"line n2\">2</div><div class=\"line n3\">3</div><div class=\"line n4\">4</div><div class=\"line n5\">5</div><div class=\"line n6\">6</div><div class=\"line n7\">7</div></td><td class=\"code\"><pre><div class=\"container\"><div class=\"line\"><code><span class=\"hljs-comment\">// Bad</span></code></div></div><div class=\"container\"><div class=\"line\"><code><span class=\"hljs-keyword\">var</span> html = <span class=\"hljs-string\">&quot;&lt;p&gt;The sum of &quot;</span> + a + <span class=\"hljs-string\">&quot; and &quot;</span> + b + <span class=\"hljs-string\">&quot; plus &quot;</span> + c</code></div></div><div class=\"container\"><div class=\"line\"><code>    + <span class=\"hljs-string\">&quot; is &quot;</span> + ( a + b + c );</code></div></div><div class=\"container\"><div class=\"line\"><code> </code></div></div><div class=\"container\"><div class=\"line\"><code><span class=\"hljs-comment\">// Good</span></code></div></div><div class=\"container\"><div class=\"line\"><code><span class=\"hljs-keyword\">var</span> html = <span class=\"hljs-string\">&quot;&lt;p&gt;The sum of &quot;</span> + a + <span class=\"hljs-string\">&quot; and &quot;</span> + b + <span class=\"hljs-string\">&quot; plus &quot;</span> + c +</code></div></div><div class=\"container\"><div class=\"line\"><code>    <span class=\"hljs-string\">&quot; is &quot;</span> + ( a + b + c );</code></div></div></pre></td></tr></tbody></table></div><p>Lines should be broken into logical groups if it improves readability, such as splitting each expression of a ternary operator onto its own line even if both will fit on a single line.</p><div class=\"syntaxhighlighter javascript\"><table><tbody><tr><td class=\"gutter\"><div class=\"line n1\">1</div><div class=\"line n2\">2</div><div class=\"line n3\">3</div></td><td class=\"code\"><pre><div class=\"container\"><div class=\"line\"><code><span class=\"hljs-keyword\">var</span> baz = firstCondition( foo ) &amp;&amp; secondCondition( bar ) ?</code></div></div><div class=\"container\"><div class=\"line\"><code>    qux( foo, bar ) :</code></div></div><div class=\"container\"><div class=\"line\"><code>    foo;</code></div></div></pre></td></tr></tbody></table></div><p>When a conditional is too long to fit on one line, successive lines must be indented one extra level to distinguish them from the body.</p><div class=\"syntaxhighlighter javascript\"><table><tbody><tr><td class=\"gutter\"><div class=\"line n1\">1</div><div class=\"line n2\">2</div><div class=\"line n3\">3</div><div class=\"line n4\">4</div></td><td class=\"code\"><pre><div class=\"container\"><div class=\"line\"><code>    <span class=\"hljs-keyword\">if</span> ( firstCondition() &amp;&amp; secondCondition() &amp;&amp;</code></div></div><div class=\"container\"><div class=\"line\"><code>            thirdCondition() ) {</code></div></div><div class=\"container\"><div class=\"line\"><code>        doStuff();</code></div></div><div class=\"container\"><div class=\"line\"><code>    }</code></div></div></pre></td></tr></tbody></table></div><h3 class=\"toc-linked\"><a href=\"#chained-method-calls\" id=\"chained-method-calls\" class=\"icon-link toc-link\"><span class=\"visuallyhidden\">link</span></a> Chained Method Calls</h3><p>When a chain of method calls is too long to fit on one line, there must be one call per line, with the first call on a separate line from the object the methods are called on. If the method changes the context, an extra level of indentation must be used.</p><div class=\"syntaxhighlighter javascript\"><table><tbody><tr><td class=\"gutter\"><div class=\"line n1\">1</div><div class=\"line n2\">2</div><div class=\"line n3\">3</div><div class=\"line n4\">4</div><div class=\"line n5\">5</div><div class=\"line n6\">6</div></td><td class=\"code\"><pre><div class=\"container\"><div class=\"line\"><code>elements</code></div></div><div class=\"container\"><div class=\"line\"><code>    .addClass( <span class=\"hljs-string\">&quot;foo&quot;</span> )</code></div></div><div class=\"container\"><div class=\"line\"><code>    .children()</code></div></div><div class=\"container\"><div class=\"line\"><code>        .html( <span class=\"hljs-string\">&quot;hello&quot;</span> )</code></div></div><div class=\"container\"><div class=\"line\"><code>    .end()</code></div></div><div class=\"container\"><div class=\"line\"><code>    .appendTo( <span class=\"hljs-string\">&quot;body&quot;</span> );</code></div></div></pre></td></tr></tbody></table></div><h3 class=\"toc-linked\"><a href=\"#full-file-closures\" id=\"full-file-closures\" class=\"icon-link toc-link\"><span class=\"visuallyhidden\">link</span></a> Full File Closures</h3><p>When an entire file is wrapped in a closure, the body of the closure is not indented.</p><div class=\"syntaxhighlighter javascript\"><table><tbody><tr><td class=\"gutter\"><div class=\"line n1\">1</div><div class=\"line n2\">2</div><div class=\"line n3\">3</div><div class=\"line n4\">4</div><div class=\"line n5\">5</div></td><td class=\"code\"><pre><div class=\"container\"><div class=\"line\"><code>( <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"> $ </span>) </span>{</code></div></div><div class=\"container\"><div class=\"line\"><code> </code></div></div><div class=\"container\"><div class=\"line\"><code><span class=\"hljs-comment\">// This doesn&apos;t get indented</span></code></div></div><div class=\"container\"><div class=\"line\"><code> </code></div></div><div class=\"container\"><div class=\"line\"><code>} )( jQuery );</code></div></div></pre></td></tr></tbody></table></div><div class=\"syntaxhighlighter javascript\"><table><tbody><tr><td class=\"gutter\"><div class=\"line n1\">1</div><div class=\"line n2\">2</div><div class=\"line n3\">3</div><div class=\"line n4\">4</div><div class=\"line n5\">5</div></td><td class=\"code\"><pre><div class=\"container\"><div class=\"line\"><code><span class=\"hljs-built_in\">module</span>.exports = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"> grunt </span>) </span>{</code></div></div><div class=\"container\"><div class=\"line\"><code> </code></div></div><div class=\"container\"><div class=\"line\"><code><span class=\"hljs-comment\">// This doesn&apos;t get indented</span></code></div></div><div class=\"container\"><div class=\"line\"><code> </code></div></div><div class=\"container\"><div class=\"line\"><code>};</code></div></div></pre></td></tr></tbody></table></div><p>The same applies to AMD wrappers.</p><div class=\"syntaxhighlighter javascript\"><table><tbody><tr><td class=\"gutter\"><div class=\"line n1\">1</div><div class=\"line n2\">2</div><div class=\"line n3\">3</div><div class=\"line n4\">4</div><div class=\"line n5\">5</div><div class=\"line n6\">6</div><div class=\"line n7\">7</div><div class=\"line n8\">8</div><div class=\"line n9\">9</div></td><td class=\"code\"><pre><div class=\"container\"><div class=\"line\"><code>define( [</code></div></div><div class=\"container\"><div class=\"line\"><code>    <span class=\"hljs-string\">&quot;foo&quot;</span>,</code></div></div><div class=\"container\"><div class=\"line\"><code>    <span class=\"hljs-string\">&quot;bar&quot;</span>,</code></div></div><div class=\"container\"><div class=\"line\"><code>    <span class=\"hljs-string\">&quot;baz&quot;</span></code></div></div><div class=\"container\"><div class=\"line\"><code>], <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"> foo, bar, baz </span>) </span>{</code></div></div><div class=\"container\"><div class=\"line\"><code> </code></div></div><div class=\"container\"><div class=\"line\"><code><span class=\"hljs-comment\">// This doesn&apos;t get indented</span></code></div></div><div class=\"container\"><div class=\"line\"><code> </code></div></div><div class=\"container\"><div class=\"line\"><code>} );</code></div></div></pre></td></tr></tbody></table></div><p>For UMD, the factory is indented to visually differentiate it from the body.</p><div class=\"syntaxhighlighter javascript\"><table><tbody><tr><td class=\"gutter\"><div class=\"line n1\">1</div><div class=\"line n2\">2</div><div class=\"line n3\">3</div><div class=\"line n4\">4</div><div class=\"line n5\">5</div><div class=\"line n6\">6</div><div class=\"line n7\">7</div><div class=\"line n8\">8</div><div class=\"line n9\">9</div><div class=\"line n10\">10</div><div class=\"line n11\">11</div><div class=\"line n12\">12</div><div class=\"line n13\">13</div><div class=\"line n14\">14</div><div class=\"line n15\">15</div><div class=\"line n16\">16</div><div class=\"line n17\">17</div></td><td class=\"code\"><pre><div class=\"container\"><div class=\"line\"><code>( <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"> factory </span>) </span>{</code></div></div><div class=\"container\"><div class=\"line\"><code>    <span class=\"hljs-keyword\">if</span> ( <span class=\"hljs-keyword\">typeof</span> define === <span class=\"hljs-string\">&quot;function&quot;</span> &amp;&amp; define.amd ) {</code></div></div><div class=\"container\"><div class=\"line\"><code> </code></div></div><div class=\"container\"><div class=\"line\"><code>        <span class=\"hljs-comment\">// AMD. Register as an anonymous module.</span></code></div></div><div class=\"container\"><div class=\"line\"><code>        define( [</code></div></div><div class=\"container\"><div class=\"line\"><code>            <span class=\"hljs-string\">&quot;jquery&quot;</span></code></div></div><div class=\"container\"><div class=\"line\"><code>        ], factory );</code></div></div><div class=\"container\"><div class=\"line\"><code>    } <span class=\"hljs-keyword\">else</span> {</code></div></div><div class=\"container\"><div class=\"line\"><code> </code></div></div><div class=\"container\"><div class=\"line\"><code>        <span class=\"hljs-comment\">// Browser globals</span></code></div></div><div class=\"container\"><div class=\"line\"><code>        factory( jQuery );</code></div></div><div class=\"container\"><div class=\"line\"><code>    }</code></div></div><div class=\"container\"><div class=\"line\"><code>}( <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"> $ </span>) </span>{</code></div></div><div class=\"container\"><div class=\"line\"><code> </code></div></div><div class=\"container\"><div class=\"line\"><code><span class=\"hljs-comment\">// This doesn&apos;t get indented</span></code></div></div><div class=\"container\"><div class=\"line\"><code> </code></div></div><div class=\"container\"><div class=\"line\"><code>} ) );</code></div></div></pre></td></tr></tbody></table></div><h2 class=\"toc-linked\"><a href=\"#constructors\" id=\"constructors\" class=\"icon-link toc-link\"><span class=\"visuallyhidden\">link</span></a> Constructors</h2><p>Constructor functions should always be invoked with argument lists, even when such lists are empty.</p><div class=\"syntaxhighlighter javascript\"><table><tbody><tr><td class=\"gutter\"><div class=\"line n1\">1</div><div class=\"line n2\">2</div></td><td class=\"code\"><pre><div class=\"container\"><div class=\"line\"><code><span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Error</span>();</code></div></div><div class=\"container\"><div class=\"line\"><code>when = time || <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>();</code></div></div></pre></td></tr></tbody></table></div><p>When property access or method invocation is immediately performed on the result of a constructor function, clarify precedence with wrapping parentheses.</p><div class=\"syntaxhighlighter javascript\"><table><tbody><tr><td class=\"gutter\"><div class=\"line n1\">1</div><div class=\"line n2\">2</div></td><td class=\"code\"><pre><div class=\"container\"><div class=\"line\"><code>detachedMode = ( <span class=\"hljs-keyword\">new</span> TemplateFactory( settings ) ).nodeType === <span class=\"hljs-number\">11</span>;</code></div></div><div class=\"container\"><div class=\"line\"><code>match = ( <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">RegExp</span>( pattern ) ).exec( input );</code></div></div></pre></td></tr></tbody></table></div><h2 class=\"toc-linked\"><a href=\"#equality\" id=\"equality\" class=\"icon-link toc-link\"><span class=\"visuallyhidden\">link</span></a> Equality</h2><p>Strict equality checks (<code>===</code>) must be used in favor of abstract equality checks (<code>==</code>). The <em>only</em> exception is when checking for <code>undefined</code> and <code>null</code> by way of <code>null</code>. The use of <code>== null</code> is also acceptable in cases where only one of <code>null</code> or <code>undefined</code> may be logically encountered, such as uninitialized variables.</p><div class=\"syntaxhighlighter javascript\"><table><tbody><tr><td class=\"gutter\"><div class=\"line n1\">1</div><div class=\"line n2\">2</div></td><td class=\"code\"><pre><div class=\"container\"><div class=\"line\"><code><span class=\"hljs-comment\">// Check for both undefined and null values, for some important reason.</span></code></div></div><div class=\"container\"><div class=\"line\"><code>undefOrNull == <span class=\"hljs-literal\">null</span>;</code></div></div></pre></td></tr></tbody></table></div><h2 class=\"toc-linked\"><a href=\"#type-checks\" id=\"type-checks\" class=\"icon-link toc-link\"><span class=\"visuallyhidden\">link</span></a> Type Checks</h2><ul><li>String: <code>typeof object === &quot;string&quot;</code></li><li>Number: <code>typeof object === &quot;number&quot;</code></li><li>Boolean: <code>typeof object === &quot;boolean&quot;</code></li><li>Object: <code>typeof object === &quot;object&quot;</code></li><li>Plain Object: <code>jQuery.isPlainObject( object )</code></li><li>Function: <code>jQuery.isFunction( object )</code></li><li>Array: <code>jQuery.isArray( object )</code></li><li>Element: <code>object.nodeType</code></li><li>null: <code>object === null</code></li><li>null or undefined: <code>object == null</code></li><li>undefined:<ul><li>Global Variables: <code>typeof variable === &quot;undefined&quot;</code></li><li>Local Variables: <code>variable === undefined</code></li><li>Properties: <code>object.prop === undefined</code></li></ul></li></ul><h2 class=\"toc-linked\"><a href=\"#comments\" id=\"comments\" class=\"icon-link toc-link\"><span class=\"visuallyhidden\">link</span></a> Comments</h2><p>Comments are always preceded by a blank line. Comments start with a capital first letter, but don&apos;t require a period at the end, unless you&apos;re writing full sentences. There must be a single space between the comment token and the comment text.</p><p>Single line comments go <strong>over</strong> the line they refer to:</p><div class=\"syntaxhighlighter javascript\"><table><tbody><tr><td class=\"gutter\"><div class=\"line n1\">1</div><div class=\"line n2\">2</div><div class=\"line n3\">3</div><div class=\"line n4\">4</div><div class=\"line n5\">5</div><div class=\"line n6\">6</div></td><td class=\"code\"><pre><div class=\"container\"><div class=\"line\"><code><span class=\"hljs-comment\">// We need an explicit &quot;bar&quot;, because later in the code foo is checked.</span></code></div></div><div class=\"container\"><div class=\"line\"><code><span class=\"hljs-keyword\">var</span> foo = <span class=\"hljs-string\">&quot;bar&quot;</span>;</code></div></div><div class=\"container\"><div class=\"line\"><code> </code></div></div><div class=\"container\"><div class=\"line\"><code><span class=\"hljs-comment\">// Even long comments that span</span></code></div></div><div class=\"container\"><div class=\"line\"><code><span class=\"hljs-comment\">// multiple lines use the single</span></code></div></div><div class=\"container\"><div class=\"line\"><code><span class=\"hljs-comment\">// line comment form.</span></code></div></div></pre></td></tr></tbody></table></div><p>Multi-line comments are only used for file and function headers.</p><p>Inline comments are allowed as an exception when used to annotate special arguments in formal parameter lists or when needed to support a specific development tool:</p><div class=\"syntaxhighlighter javascript\"><table><tbody><tr><td class=\"gutter\"><div class=\"line n1\">1</div><div class=\"line n2\">2</div><div class=\"line n3\">3</div><div class=\"line n4\">4</div></td><td class=\"code\"><pre><div class=\"container\"><div class=\"line\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">foo</span>(<span class=\"hljs-params\"> types, selector, data, fn, <span class=\"hljs-comment\">/* INTERNAL */</span> one </span>) </span>{</code></div></div><div class=\"container\"><div class=\"line\"><code> </code></div></div><div class=\"container\"><div class=\"line\"><code>    <span class=\"hljs-comment\">// Do stuff</span></code></div></div><div class=\"container\"><div class=\"line\"><code>}</code></div></div></pre></td></tr></tbody></table></div><p>Do not write API documentation in comments. API documentation lives in its own repository.</p><h2 class=\"toc-linked\"><a href=\"#quotes\" id=\"quotes\" class=\"icon-link toc-link\"><span class=\"visuallyhidden\">link</span></a> Quotes</h2><p>jQuery uses double quotes.</p><div class=\"syntaxhighlighter javascript\"><table><tbody><tr><td class=\"gutter\"><div class=\"line n1\">1</div></td><td class=\"code\"><pre><div class=\"container\"><div class=\"line\"><code><span class=\"hljs-keyword\">var</span> double = <span class=\"hljs-string\">&quot;I am wrapped in double quotes&quot;</span>;</code></div></div></pre></td></tr></tbody></table></div><p>Strings that require inner quoting must use double outside and single inside.</p><div class=\"syntaxhighlighter javascript\"><table><tbody><tr><td class=\"gutter\"><div class=\"line n1\">1</div></td><td class=\"code\"><pre><div class=\"container\"><div class=\"line\"><code><span class=\"hljs-keyword\">var</span> html = <span class=\"hljs-string\">&quot;&lt;div id=&apos;my-id&apos;&gt;&lt;/div&gt;&quot;</span>;</code></div></div></pre></td></tr></tbody></table></div><h2 class=\"toc-linked\"><a href=\"#semicolons\" id=\"semicolons\" class=\"icon-link toc-link\"><span class=\"visuallyhidden\">link</span></a> Semicolons</h2><p>Use them. Never rely on ASI.</p><h2 class=\"toc-linked\"><a href=\"#naming-conventions\" id=\"naming-conventions\" class=\"icon-link toc-link\"><span class=\"visuallyhidden\">link</span></a> Naming Conventions</h2><p>Variable and function names should be full words, using camel case with a lowercase first letter. Names should be descriptive but not excessively so. Exceptions are allowed for iterators, such as the use of <code>i</code> to represent the index in a loop. Constructors do not need a capital first letter.</p><h2 class=\"toc-linked\"><a href=\"#global-variables\" id=\"global-variables\" class=\"icon-link toc-link\"><span class=\"visuallyhidden\">link</span></a> Global Variables</h2><p>Each project may expose at most one global variable.</p><h2 class=\"toc-linked\"><a href=\"#dom-node-rules\" id=\"dom-node-rules\" class=\"icon-link toc-link\"><span class=\"visuallyhidden\">link</span></a> DOM Node Rules</h2><p><code>.nodeName</code> must always be used in favor of <code>.tagName</code>.</p><p><code>.nodeType</code> must be used to determine the classification of a node (not <code>.nodeName</code>).</p><h2 class=\"toc-linked\"><a href=\"#switch-statements\" id=\"switch-statements\" class=\"icon-link toc-link\"><span class=\"visuallyhidden\">link</span></a> Switch Statements</h2><p>The usage of <code>switch</code> statements is generally discouraged, but can be useful when there are a large number of cases - especially when multiple cases can be handled by the same block, or fall-through logic (the <code>default</code> case) can be leveraged.</p><p>When using <code>switch</code> statements:</p><ul><li>Use a <code>break</code> for each case other than <code>default</code>.</li><li>Align <code>case</code> statements with the <code>switch</code>.</li></ul><div class=\"syntaxhighlighter javascript\"><table><tbody><tr><td class=\"gutter\"><div class=\"line n1\">1</div><div class=\"line n2\">2</div><div class=\"line n3\">3</div><div class=\"line n4\">4</div><div class=\"line n5\">5</div><div class=\"line n6\">6</div><div class=\"line n7\">7</div><div class=\"line n8\">8</div><div class=\"line n9\">9</div><div class=\"line n10\">10</div><div class=\"line n11\">11</div></td><td class=\"code\"><pre><div class=\"container\"><div class=\"line\"><code><span class=\"hljs-keyword\">switch</span> ( event.keyCode ) {</code></div></div><div class=\"container\"><div class=\"line\"><code><span class=\"hljs-keyword\">case</span> $.ui.keyCode.ENTER:</code></div></div><div class=\"container\"><div class=\"line\"><code><span class=\"hljs-keyword\">case</span> $.ui.keyCode.SPACE:</code></div></div><div class=\"container\"><div class=\"line\"><code>    x();</code></div></div><div class=\"container\"><div class=\"line\"><code>    <span class=\"hljs-keyword\">break</span>;</code></div></div><div class=\"container\"><div class=\"line\"><code><span class=\"hljs-keyword\">case</span> $.ui.keyCode.ESCAPE:</code></div></div><div class=\"container\"><div class=\"line\"><code>    y();</code></div></div><div class=\"container\"><div class=\"line\"><code>    <span class=\"hljs-keyword\">break</span>;</code></div></div><div class=\"container\"><div class=\"line\"><code><span class=\"hljs-keyword\">default</span>:</code></div></div><div class=\"container\"><div class=\"line\"><code>    z();</code></div></div><div class=\"container\"><div class=\"line\"><code>}</code></div></div></pre></td></tr></tbody></table></div></div><div id=\"sidebar\" class=\"widget-area\" role=\"complementary\"><aside class=\"widget\"><h3 class=\"widget-title\">Contributing to &hellip;</h3><ul><li><a href=\"/triage/\">Bug Triage</a></li><li><a href=\"/code/\">Code</a></li><li><a href=\"/community/\">Community</a></li><li><a href=\"/documentation/\">Documentation</a></li><li><a href=\"/open-source/\">Open Source</a></li><li><a href=\"/support/\">Support</a></li><li><a href=\"/web-sites/\">Web Sites</a></li></ul><h3 class=\"widget-title\">For maintainers &hellip;</h3><ul><li><a href=\"/repo-maintainers-guide/\">Maintainers Guide</a></li></ul></aside></div></div></div></div><footer class=\"clearfix simple\"><div class=\"constrain\"><div class=\"row\"><div class=\"six columns offset-by-three\"><h3><span>Books</span></h3><ul class=\"books\"><li><a href=\"https://www.packtpub.com/web-development/learning-jquery-fourth-edition\"><img src=\"https://contribute.jquery.org/wp-content/themes/jquery/content/books/learning-jquery-4th-ed.jpg\" alt=\"Learning jQuery 4th Edition by Karl Swedberg and Jonathan Chaffer\" width=\"92\" height=\"114\" loading=\"lazy\">Learning jQuery Fourth Edition<cite>Karl Swedberg and Jonathan Chaffer</cite></a></li><li><a href=\"https://www.manning.com/books/jquery-in-action-third-edition\"><img src=\"https://contribute.jquery.org/wp-content/themes/jquery/content/books/jquery-in-action.jpg\" alt=\"jQuery in Action by Bear Bibeault, Yehuda Katz, and Aurelio De Rosa\" width=\"92\" height=\"114\" loading=\"lazy\">jQuery in Action<cite>Bear Bibeault, Yehuda Katz, and Aurelio De Rosa</cite></a></li><li><a href=\"https://www.syncfusion.com/ebooks/jquery\"><img src=\"https://contribute.jquery.org/wp-content/themes/jquery/content/books/jquery-succinctly.jpg\" alt=\"jQuery Succinctly by Cody Lindley\" width=\"92\" height=\"114\" loading=\"lazy\">jQuery Succinctly<cite>Cody Lindley</cite></a></li></ul></div></div><div id=\"legal\" class=\"legal\"><ul class=\"footer-site-links\"><li><a class=\"icon-pencil\" href=\"https://learn.jquery.com/\">Learning Center</a></li><li><a class=\"icon-group\" href=\"https://forum.jquery.com/\">Forum</a></li><li><a class=\"icon-twitter\" href=\"https://twitter.com/jquery\">Twitter</a></li><li><a class=\"icon-comments\" href=\"https://irc.jquery.org/\">IRC</a></li><li><a class=\"icon-github\" href=\"https://github.com/jquery\">GitHub</a></li></ul><p class=\"copyright\">Copyright 2024 <a href=\"https://openjsf.org/\">OpenJS Foundation</a> and jQuery contributors. All rights reserved. See <a href=\"https://jquery.org/license/\">jQuery License</a> for more information. The <a href=\"https://openjsf.org/\">OpenJS Foundation</a> has registered trademarks and uses trademarks. For a list of trademarks of the <a href=\"https://openjsf.org/\">OpenJS Foundation</a>, please see our <a href=\"https://trademark-policy.openjsf.org/\">Trademark Policy</a> and <a href=\"https://trademark-list.openjsf.org/\">Trademark List</a>. Trademarks and logos not indicated on the <a href=\"https://trademark-list.openjsf.org/\">list of OpenJS Foundation trademarks</a> are trademarks\u2122 or registered\u00ae trademarks of their respective holders. Use of them does not imply any affiliation with or endorsement by them. OpenJS Foundation <a href=\"https://terms-of-use.openjsf.org/\">Terms of Use</a>, <a href=\"https://privacy-policy.openjsf.org/\">Privacy</a>, and <a href=\"https://www.linuxfoundation.org/cookies\">Cookie</a> Policies also apply.</p><p><a href=\"https://www.digitalocean.com\" class=\"do-link\">Web hosting by Digital Ocean</a> | <a href=\"https://www.fastly.com/\">CDN by Fastly</a> | <a href=\"https://wordpress.org/\" class=\"wp-link\">Powered by WordPress</a></p></div></div></footer></body></html>",
  "embeddings": []
}
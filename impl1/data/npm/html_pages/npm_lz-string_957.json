{
  "libtype": "npm",
  "libname": "lz-string",
  "url": "http://pieroxy.net/blog/pages/lz-string/index.html",
  "html": "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\"><html xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:fb=\"http://www.facebook.com/2008/fbml\" xmlns:og=\"http://ogp.me/ns#\">  <head>                                                                          <base href=\"https://pieroxy.net/blog/\" />    <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\"/>    <meta name=\"description\" content=\"lz-string: JavaScript compression, fast! - pieroxy.net\" />    <meta name=\"keywords\" content=\"compression, javascript\" />    <meta name=\"abstract\" content=\"tech, dev, web & other stuff\" />    <meta name=\"author\" content=\"Pieroxy\" />    <meta name=\"generator\" content=\"Pebble (http://pebble.sourceforge.net)\" />    <title>lz-string: JavaScript compression, fast! - pieroxy.net</title>    <link rel=\"alternate\" type=\"application/rss+xml\" title=\"RSS\" href=\"https://pieroxy.net/blog/rss.xml\" />    <link rel=\"alternate\" type=\"application/rdf+xml\" title=\"RDF\" href=\"https://pieroxy.net/blog/rdf.xml\" />    <link rel=\"alternate\" type=\"application/atom+xml\" title=\"Atom\" href=\"https://pieroxy.net/blog/atom.xml\" />    <link rel=\"stylesheet\" href=\"pebble.css\" type=\"text/css\" media=\"screen\" />    <link rel=\"stylesheet\" href=\"themes/_pebble/handheld.css\" type=\"text/css\" media=\"handheld\" />    <link rel=\"stylesheet\" href=\"themes/user-pieroxy.net/screen.css\" type=\"text/css\" media=\"screen\" />    <link rel=\"stylesheet\" href=\"themes/user-pieroxy.net/print.css\" type=\"text/css\" media=\"print\" />    <link rel=\"shortcut icon\" href=\"/blog/themes/user-pieroxy.net/images/favicon.ico\" type=\"image/x-icon\" />    <script type=\"text/javascript\" src=\"/blog/FCKeditor/fckeditor.js\"></script>    <script type=\"text/javascript\" src=\"/blog/scripts/pebble.js\"></script>    <script type=\"text/javascript\" src=\"/blog/scripts/prototype.js\"></script>    <script type=\"text/javascript\" src=\"/blog/scripts/scriptaculous.js\"></script>    <script type='text/javascript' src='/blog/scripts/dwr-engine.js'></script>    <script type='text/javascript' src='/blog/dwr/util.js'></script>    <script type='text/javascript' src='/blog/dwr/interface/Pebble.js'></script>            <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0, viewport-fit=cover\"/>    <meta name=\"format-detection\" content=\"telephone=no\">    <script type=\"text/javascript\" src=\"/blog.js\"></script>    <link rel=\"stylesheet\" href=\"/blog.css\" type=\"text/css\"/><!--[if IE 6]>    <link rel=\"stylesheet\" href=\"themes/user-default/screen_ie6.css\" type=\"text/css\" media=\"screen\" /><![endif]--><!--[if lte IE 8]>    <link rel=\"stylesheet\" href=\"themes/user-default/screen_ie678.css\" type=\"text/css\" media=\"screen\" /><![endif]--><!--[if lte IE 7]>    <link rel=\"stylesheet\" href=\"themes/user-default/screen_ie67.css\" type=\"text/css\" media=\"screen\" /><![endif]--><meta name=\"google-site-verification\" content=\"WIhZQDqqIneUuvRaGWX1ImMYXepeZ2wyImJELK2J-4I\" />    <meta property=\"og:locale\" content=\"en_US\"/>    <meta property=\"og:title\" content=\"lz-string: JavaScript compression, fast!\"/>    <meta property=\"og:type\" content=\"article\"/>    <meta property=\"og:description\" content=\"Goal lz-string was designed to fulfill the need of storing large amounts of data in localStorage, specifically on mobile devices. localStorage being usually limited to 5MB, all you can compress is that much more data you can store. You don&#039;t care about ...\"/>    <meta property=\"og:image\" content=\"\"/>    <meta property=\"og:site_name\" content=\"pieroxy.net\"/>    <meta property=\"og:url\" content=\"https://pieroxy.net/blog/pages/lz-string/index.html\" />        <meta property=\"article:tag\" content=\"compression\" />    <meta property=\"article:tag\" content=\"javascript\" />         <meta property=\"article:published_time\" content=\"2013-05-08T07:52:42PDT\"/>    <meta property=\"article:modified_time\" content=\"2013-05-08T07:52:42PDT\"/>    <meta name=\"twitter:site\" content=\"pieroxy.net\" />    <meta name=\"twitter:title\" content=\"lz-string: JavaScript compression, fast!\"/>    <meta name=\"twitter:card\" content=\"summary\"/>    <meta name=\"twitter:description\" content=\"Goal lz-string was designed to fulfill the need of storing large amounts of data in localStorage, specifically on mobile devices. localStorage being usually limited to 5MB, all you can compress is that much more data you can store. You don&#039;t care about ...\" />    <meta name=\"twitter:image\" content=\"\" />    <meta name=\"twitter:url\" content=\"https://pieroxy.net/blog/pages/lz-string/index.html\" />  </head>  <body>        <div id=\"body\">    <div id=\"header\">      <a id=\"headerLogo\" href=\"http://pieroxy.net/blog/\"></a>      <span id=\"blogTitle\"><span>tech, dev, web & other stuff</span></span>      <div id=\"mobileMenu\"><span id=\"mmMenu\" onclick=\"showMobileMenu()\">Menu</span></div>    </div>    <!-- div id=\"blogDescription\"><a href=\"http://pieroxy.net/blog/\">tech, dev, web & other stuff</a></div --><div id=\"stickyFooter\">  <form name=\"searchForm\" method=\"post\" action=\"search.action\" accept-charset=\"UTF-8\">    <input id=\"sf\" type=\"text\" name=\"query\" size=\"15\" value=\"\">    <input id=\"sb\" type=\"submit\" value=\"Search\">  </form>  <div><a class=\"popupMenuHolder\" id=\"pm1\" href=\"\" onclick=\"togglePM(this); return false;\">Navigation</a>    <div id=\"pm1_menu\" class=\"popupMenu\">      <span>Syndication and navigation</span>      <a href=\"/blog/\">Home</a>       <a href=\"categories\">Categories</a>       <a href=\"tags\">Tags</a>      <a title=\"Subscribe to blog via RSS feed\" href=\"http://pieroxy.net/blog/rss.xml\">RSS</a>      <a title=\"Subscribe to blog via Atom feed\" href=\"http://pieroxy.net/blog/atom.xml\">Atom</a>      <a title=\"Subscribe to blog via email\" href=\"http://pieroxy.net/blog/subscribe.action\">E-mail</a>      <a title=\"Why not?\" href=\"http://google.com\">Google</a>    </div>  </div>  <div><a class=\"popupMenuHolder\" id=\"pm2\" href=\"\" onclick=\"togglePM(this); return false;\">Articles</a>    <div id=\"pm2_menu\" class=\"popupMenu\">      <span>Of interest, in this blog</span>      <a href=\"/blog/2012/10/22/index_of_the_media_queries_articles.html\" title=\"The CSS3 media queries are the basis for responsive design. Understanding their behavior on the various devices out there is key in modern web development.\">CSS Media Queries</a>      <a href=\"/blog/pages/bookmarks.html\" title=\"Here are my bookmarks, related to programming and web design. You will find useful resources on the web on CSS, JavaScript and HTML, web design and programming in general.\">My Bookmarks</a>      <a href=\"/blog/pages/lz-string/index.html\" title=\"LZ-String is a JavaScript library to reduce the size of data, aka, compress it, based on LZW.\">LZ-String</a>      <a href=\"http://pieroxy.net/user-agent/lib.html\" title=\"A library to parse user-agent strings in Java.\">User-Agent detection</a>      <a href=\"/blog/pages/color-finder/index.html\" title=\"Color Finder is a small JS library allowing to determine the most prominent color in an image.\">Color Finder</a>    </div>  </div>  <div><a class=\"popupMenuHolder\" id=\"pm3\" href=\"\" onclick=\"togglePM(this); return false;\">Mine</a>    <div id=\"pm3_menu\" class=\"popupMenu\">      <span>Other websites and blogs</span>      <a href=\"http://france.pieroxy.net/\" title=\"My French blog\">france.pieroxy.net</a>      <a href=\"http://sousculture.pieroxy.net/blog/\" title=\"My French blog about culture\">sousculture.pieroxy.net</a>      <a href=\"http://ignatzmouse.net/\" title=\"About Krazy Kat, Ignatz Mouse and George Herriman, their father.\">ignatzmouse.net</a>      <a href=\"http://lamaisonsourire.over-blog.com/\" title=\"My wife's blog\">La maison Sourire</a>      <a href=\"http://pieroxy.net/blog/pages/friends.html\">Some of my friend's websites</a>      <a href=\"https://github.com/pieroxy\" rel=\"me\">On GitHub</a>    </div>  </div></div>           <div id=\"linearNavigation\">                    <a href=\"https://pieroxy.net/blog/\" title=\"https://pieroxy.net/blog/\">Home</a>                        </div>            <div id=\"content\">      <div class=\"contentItem\">  <div class=\"contentItemLinks\">      </div>  <a name=\"a1368024762418\"></a>    <h1 class=\"contentItemTitle\">    <a href=\"https://pieroxy.net/blog/pages/lz-string/index.html\" class=\"social\" title=\"lz-string: JavaScript compression, fast!\" onclick=\"share(this, event); return false;\"></a>    <a href=\"https://pieroxy.net/blog/pages/lz-string/index.html\">lz-string: JavaScript compression, fast!</a>  </h1>  <h2 class=\"contentItemSubtitle\"></h2>    <div class=\"contentItemBody\">    <div id=\"inlineMenu\"></div><h2>Goal</h2><p><span class=\"code\">lz-string</span> was designed to fulfill the need of storing large amounts of data in <span class=\"code\">localStorage</span>, specifically on mobile devices. <span class=\"code\">localStorage</span> being usually limited to 5MB, all you can compress is that much more data you can store.<p>You don't care about the blah-blah?<ul><li><a href=\"/blog/pages/lz-string/demo.html\">The demo</a>.</li><li><a href=\"https://github.com/pieroxy/lz-string/\">The GitHub repository</a>.</li><li><a href=\"/blog/pages/lz-string/guide.html\">The user guide</a>.</li></ul><h2>What about other libraries?</h2><p>All I could find was:<ul>  <li><a href=\"http://rosettacode.org/wiki/LZW_compression#JavaScript\">some LZW implementations</a> which gives you back arrays of numbers (terribly inefficient to store as tokens take 64bits) and don't support any character above 255.</li>  <li><a href=\"https://gist.github.com/revolunet/843889\">some other LZW implementations</a> which gives you back a string (less terribly inefficient to store but still, all tokens take 16 bits) and don't support any character above 255.</li>  <li><a href=\"https://github.com/nmrugg/LZMA-JS\">an LZMA implementation</a> that is asynchronous and very slow - but hey, it's LZMA, not the implementation that is slow.</li>  <li><a href=\"https://github.com/beatgammit/gzip-js\">a GZip implementation</a> not really meant for browsers but meant for <span class=\"code\">node.js</span>, which weighted 70kb (with <span class=\"code\">deflate.js</span> and <span class=\"code\">crc32.js</span> on which it depends).</li></ul>My needs were:<ul>  <li>Working on mobile I needed something <i>fast</i>.</li>  <li>Working with Strings gathered from outside my website, I needed something that can take any kind of string as an input, including any UTF characters above 255.</li>  <li>The library not taking 70kb was a definitive plus.</li>  <li>Something that produces strings as compact as possible to store in <span class=\"code\">localStorage</span>.</li></ul>So none of the libraries I could find online worked well for my needs. <h2>Is this LZ-based?</h2><p>I started out from an LZW implementation (no more patents on that), which is very simple. What I did was:<ul><li><span class=\"code\">localStorage</span> can only contain JavaScript strings. Strings in JavaScript are stored internally in UTF-16, meaning every character weight 16 bits. I modified the implementation to work with a 16bit-wide token space.</li><li>I had to remove the default dictionary initialization, totally useless on a 16bit-wide token space.</li><li>I initialize the dictionary with three tokens:  <ul>    <li>An entry that produces a 16-bit token.</li>    <li>An entry that produces an 8-bit token, because most of what I will store is in the <span class=\"code\">iso-latin-1</span> space, meaning tokens below 256.</li>    <li>An entry that mark the end of the stream.</li>  </ul></li><li>The output is processed by a bit stream that stores effectively 16 bits per character in the output string.</li><li>Each token is stored with just as many bits that are needed according to the size of the dictionary. Hence, the first token takes 2 bits, the second to 7th three bits, etc....</li></ul><h2>How does it work</h2><p>Very simple. <ul><li>First, download the file <span class=\"code\">lz-string.js</span> <a href=\"https://github.com/pieroxy/lz-string/\">from the GitHub repository</a>.</li><li>Second, import it in the page where you want to use it: <div class=\"code\">&lt;script language=\"javascript\" src=\"lz-string.js\"&gt;&lt;/script&gt;</div></li><li>At last, call <span class=\"code\">compress</span> and <span class=\"code\">decompress</span> on the <span class=\"code\">LZString</span> object:<div class=\"code\">var string = \"This is my compression test.\";alert(\"Size of sample is: \" + string.length);var compressed = LZString.compress(string);alert(\"Size of compressed sample is: \" + compressed.length);string = LZString.decompress(compressed);alert(\"Sample is: \" + string);</div></li></ul>For more details/options, see <a href=\"/blog/pages/lz-string/guide.html\">the user guide</a>.<h2>Browser support &amp; Stability</h2>No extensive and exhaustive testing has been done, but only basic JavaScript types are used and nothing too fancy either. So it should work on pretty much any JavaScript engine. It has been tested on IE6 and up, Chrome, Firefox, Opera (pre and post blink), Safari, iOS and the default browser on Android along with Chrome and Firefox. For desktop Chrome, Firefox and Safari, it was originally tested on all current versions (as of may 2013) and it's been working until then. <p>Of course, if you use the <span class=\"code\">compressToUint8Array</span>, you need an engine that support unit8arrays and the list of engine is thus greatly reduced. You can find <a href=\"http://caniuse.com/#feat=typedarrays\">the compatible browsers on caniuse.com</a>.<p>It also works on node.js.<p>As far as stability goes, extensive testing has been done on this program, on an iPhone, Desktop Chrome, Desktop Firefox and Android's browser. So far, so good. Additionally, it would look as if quite aplenty of other people are using it, so I assume it works for them as well. In fact, the one time where I introduced a new functionality that was bugy in the library (I'm more careful now, and unit tests were added since then) it was spotted very quickly. I take this as a good sign that this library is widely in use, and hence, that it is stable.<h2>Performance</h2><p>For performace comparison, I use LZMA level 1 as a comparison point.<ul>  <li>For strings smaller than 750 characters, this program is 10x faster than LZMA level 1. It produces smaller output.</li>  <li>For strings smaller than 100&nbsp000 characters, this program is 10x faster than LZMA level 1. It produces bigger output.</li>  <li>For strings bigger than 750&nbsp;000 characters, this program is slower than LZMA level 1. It produces bigger output.</li></ul><p>Come and <a href=\"/blog/pages/lz-string/demo.html\">have a look for yourself at the demo</a>.Also another page for developers: <a href=\"/blog/pages/lz-string/testing.html\">Performance experiments</a>, which try to optimize the whole things to hunt for CPU cycles. Already some results.<h2>What can I do with the output produced from this library?</h2><p>Well, this lib produces stuff that isn't really a string. By using all 16 bits of the UTF-16 bitspace, those strings aren't exactly valid UTF-16. By version 1.3.0, I added two helper encoders to produce stuff that we can do something with:<ul>  <li><span class=\"code\">compress</span> produces invalid UTF-16 strings. Those can be stored in <span class=\"code\">localStorage</span> only on webkit browsers (Tested on Android, Chrome, Safari). Can be decompressed with <span class=\"code\">decompress</span></li>  <li><span class=\"code\">compressToUTF16</span> produces \"valid\" UTF-16 strings in the sense that all browsers can store them safely. So they can be stored in <span class=\"code\">localStorage</span> on all browsers tested (IE9-10, Firefox, Android, Chrome, Safari). Can be decompressed with <span class=\"code\">decompressFromUTF16</span>. This works by using only 15bits of storage per character. The strings produced are therefore 6.66% bigger than those produced by <span class=\"code\">compress</span></li>  <li><span class=\"code\">compressToBase64</span> produces ASCII UTF-16 strings representing the original string encoded in Base64. Can be decompressed with <span class=\"code\">decompressFromBase64</span>. This works by using only 6bits of storage per character. The strings produced are therefore 166% bigger than those produced by <span class=\"code\">compress</span>. It can still reduce significantly some JSON compressed objects.</li>  <li><span class=\"code\">compressToEncodedURIComponent</span> produces ASCII strings representing the original string encoded in Base64 with a few tweaks to make these URI safe. Hence, you can send them to the server without thinking about URL encoding them. This saves bandwidth and CPU. These strings can be decompressed with <span class=\"code\">decompressFromEncodedURIComponent</span>. See the bullet point above for considerations about size.</li>  <li><span class=\"code\">compressToUint8Array</span> produces an uint8Array. Can be decompressed with <span class=\"code\">decompressFromUint8Array</span>. Works starting with version 1.3.4.</li></ul><h2>Only JavaScript? Porting to other languages</h2><b>NOTE:</b> Go to <a href=\"https://github.com/pieroxy/lz-string/\">GitHub</a> to see the up-to-date list (scroll down the page).<p>LZ-String was originally meant for <span class=\"code\">localStorage</span> so it works only in JavaScript. Others have ported the algorithm to other languages:<ul><li>Diogo Duailibe did an implementation in Java:<a class=\"longLink\" href=\"https://github.com/diogoduailibe/lzstring4j\">https://github.com/diogoduailibe/lzstring4j</a></li><li>Another implementation in Java, with base64 support and better performances by rufushuang <a class=\"longLink\"  href=\"https://github.com/rufushuang/lz-string4java\">https://github.com/rufushuang/lz-string4java</a></li><li>Jawa-the-Hutt did an implementation in C#:<a class=\"longLink\" href=\"https://github.com/jawa-the-hutt/lz-string-csharp\">https://github.com/jawa-the-hutt/lz-string-csharp</a></li><li>kreudom did another implementation in C#, more up to date:<a class=\"longLink\" href=\"https://github.com/kreudom/lz-string-csharp\">https://github.com/kreudom/lz-string-csharp</a></li><li>nullpunkt released a php version: <a class=\"longLink\" href=\"https://github.com/nullpunkt/lz-string-php\">https://github.com/nullpunkt/lz-string-php</a></li><li>eduardtomasek did an implementation in python 3: <a class=\"longLink\" href=\"https://github.com/eduardtomasek/lz-string-python\">https://github.com/eduardtomasek/lz-string-python</a></li><li>I helped a friend to write a Go implementation of the decompression algorithm: <a class=\"longLink\" href=\"https://github.com/pieroxy/lz-string-go\">https://github.com/pieroxy/lz-string-go</a><li>Here is an Elixir version, by Michael Shapiro: <a class=\"longLink\" href=\"https://github.com/koudelka/elixir-lz-string\">https://github.com/koudelka/elixir-lz-string</a><li>Here is a C++/Qt version, by AmiArt: <a class=\"longLink\" href=\"https://github.com/AmiArt/qt-lzstring\">https://github.com/AmiArt/qt-lzstring</a><li>Here is a VB.NET version, by gsemac: <a class=\"longLink\" href=\"https://github.com/gsemac/lz-string-vb\">https://github.com/gsemac/lz-string-vb</a><li>Here is a Ruby version, by Altivi: <a class=\"longLink\" href=\"https://github.com/Altivi/lz_string\">https://github.com/Altivi/lz_string</a></ul><p>If you want to port the library to another language, here are some tips:<ul><li>Port the <span class=\"code\">compress</span> and/or <span class=\"code\">decompress</span> methods from the version 1.0.2. All versions are binary-compatible and further versions just incorporate ugly optimizations for JavaScript, so you shouldn't bother. The version 1.0.2 can be found in the <span class=\"code\">reference</span> directory of <a href=\"https://github.com/pieroxy/lz-string\">the GitHub repo</a></li><li>Port the <span class=\"code\">(de)compressToBase64</span> and/or <span class=\"code\">(de)compressToBaseUTF16</span> from the latest version depending on your needs.</li><li>Be aware that <span class=\"code\">compress</span> and <span class=\"code\">decompress</span> work on invalit UTF characters in conjunction with <span class=\"code\">(de)compressToBase64</span> and/or <span class=\"code\">(de)compressToBaseUTF16</span>. You may want to transfer stuff from byte arrays instead.</li><li>To test/debug your implementation, just start with simple strings like \"ABC\". If the results of the compression (or decompression) aren't the same as the JS version, just go step by step in the JS version and then step by step into yours. Spotting problems should be really easy and straightforward. Repeat with strings slightly more complex and with repeating patterns: \"ABCABC\", \"AAAA\", etc.</li><li>Post a message <a href=\"https://pieroxy.net/blog/2013/05/09/just_released_lz_string.html\">on the blog</a> so I can link to your implementation.</li></ul><h2>Feedback</h2><p>To get in touch, the simplest is to leave me a comment <a href=\"https://pieroxy.net/blog/2013/05/09/just_released_lz_string.html\">on the blog</a>. For issues, you may go to <a href=\"https://github.com/pieroxy/lz-string\">the GitHub project</a>.<h2>How does it look? How can I inspect localStorage with this?</h2><p>So, this program generates strings that actually contain binary data. What's the look of them? Well, here is a glimpse of my localStorage:<br><img src=\"/blog/images/general/localStorageWithLZStringO.png\"><p>This was first meant to be a joke, but then <a href=\"https://github.com/kriserickson\">Kris Erickson</a> released a <a href=\"https://chrome.google.com/webstore/detail/lzipped-local-storage/beicplgjaeliclenmidelkloajghllll\">Chrome Extension</a> to be able to view the decompressed version directly in the inspector tool in Chrome. Many thanks. <a href=\"https://github.com/kriserickson/lz-localstorage-chrome-extension\">The GitHub</a>.<h2>License</h2><p>Ahhhh, here we go. This software is copyrighted to Pieroxy (2013) and all versions are currently licensed under <a href=\"https://github.com/pieroxy/lz-string/blob/master/LICENSE\">The MIT license</a>.<h2>Changelog</h2><ul>  <li>More recent changes can be found <a href=\"https://github.com/pieroxy/lz-string/releases\">on GitHub</a>.</li>  <li>Feb 18, 2015: version 1.3.9 includes a fix for <span class=\"code\">decompressFromUint8Array</span> on Safari/Mac.</li>  <li>Feb 15, 2015: version 1.3.8 includes small performance improvements.</li>  <li>Jan 16, 2015: version 1.3.7 is a minor release, fixing <span class=\"code\">bower.json</span>.</li>  <li>Dec 18, 2014: version 1.3.6 is a bugfix on <span class=\"code\">compressToEncodedURIComponent</span> and <span class=\"code\">decompressFromEncodedURIComponent</span>.</li>  <li>Nov 30, 2014: version 1.3.5 has been pushed. It allows compression to produce URI safe strings (ie: no need to URL encode them) through the method <span class=\"code\">compressToEncodedURIComponent</span>.</li>  <li>July 29, 2014: version 1.3.4 has been pushed. It allows compression to produce <span class=\"code\">uint8array</span> instead of Strings.</li>  <li>Some things happened in the meantime, giving birth to versions 1.3.1, 1.3.2 and 1.3.3. Version 1.3.3 was promoted the winner later on. And I forgot about the changelog. <a href=\"https://github.com/pieroxy/lz-string/commits/master\">The gory details are on GitHub</a>.</li>  <li>July 17, 2013: version 1.3.0 now stable.</li>  <li>June 12, 2013: version 1.3.0-rc1 just released. Introduced two new methods: <span class=\"code\">compressToUTF16</span> and <span class=\"code\">decompressFromUTF16</span>. These allow lz-string to produce something that you can store in <span class=\"code\">localStorage</span> on IE and Firefox.</li>  <li>June 12, 2013: version 1.2.0-rc1 is now stable and promoted to the 1.2.0 version number.</li>  <li>May 27, 2013: version 1.1.0-rc1 is now stable and promoted to the 1.1.0 version number. Two files can be downloaded: <span class=\"code\">lz-string-1.1.0.js</span> and <span class=\"code\">lz-string-1.1.0-min.js</span>, its minified evil twin weighting a mere 3455 bytes.</li>  <li>May 27, 2013: version 1.2.0: Introduced two new methods: <span class=\"code\">compressToBase64</span> and <span class=\"code\">decompressFromBase64</span>. These allow lz-string to produce something that you can send through the network.  <li>May 27, 2013: Released <span class=\"code\">base64-string-v1.0.0.js</span>.   <li>May 23, 2013: version 1.1.0-rc1 Optimized implementation: 10-20% faster compression, twice as fast decompression on most browsers (no change on Chrome)</li>  <li>May 19, 2013: version 1.0.1 Thanks to jeff-mccoy, a fix for Chrome on Mac throwing an error because of the use of a variable not declared. JavaScript is so great!</li>  <li>May 10, 2013: version 1.0 Added license</li>  <li>May 08, 2013: version 1.0 First release</li></ul><h2>Credits</h2><p>I'd like to thank the following people, without which LZ-String wouldn't be in the state it's in right now.<ul><li><a href=\"https://github.com/carlansley\">Carl Ansley</a> for his bugfixes.</li><li><a href=\"https://github.com/oculus42\">Samuel Rouse</a> for various performance improvements.</li><li><a href=\"https://github.com/lsching17\">lsching17</a> for the uint8array implementation.</li><li><a href=\"https://github.com/jhermsmeier\">Jonas Hermsmeier</a> for the node.js support.</li><li><a href=\"https://github.com/J0eCool\">J0eCool</a> for some robustness checking in case of a truncated input.</li><li><a href=\"https://github.com/Oletus\">Olli Etuaho</a> for setting up unit tests and various improvements.</li><li><a href=\"https://github.com/zenyr\">zenyr</a> for various optimizations.</li></ul><br><br><script>window.drawMenu(\"inlineMenu\");</script>  </div></div>    </div>      <div id=\"linearNavigation\">                    <a href=\"https://pieroxy.net/blog/\" title=\"https://pieroxy.net/blog/\">Home</a>                        </div><div style=\"text-align:center\"><script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script><!-- pieroxy.net --><ins class=\"adsbygoogle\"     style=\"display:inline-block;width:300px;height:250px\"     data-ad-client=\"ca-pub-5302646218011179\"     data-ad-slot=\"4782065439\"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></div>        <div id=\"footer\">      Powered by <a title=\"Powered by Pebble 2.6.5-SNAPSHOT\" href=\"http://pebble.sourceforge.net/\">Pebble 2.6.5-SNAPSHOT</a>            |      <a href=\"https://pieroxy.net/blog/login.secureaction\">Login</a>                  <div>All that is in there is just stuff I made up for the most part. However, the chances that some truth found its way in it are non negligible so this possibility should not be discarded. After all, I usually link to my sources. That said, those sources are most likely probably completely made up as well. You want to make sure it's going to work? Try it out for yourself. Ah, as well, those parts that are not blatantly stolen to others are &copy; Pieroxy. Obviously. And last, but not least, thanks to David Vignoni for his icon set <a href=\"http://www.icon-king.com/projects/nuvola/\">nuvola</a>, to Manfred Klein for his font <a href=\"http://www.dafont.com/fr/stampede.font?fpp=100\">Stampede</a> and to George Herriman for the work of his life, <a href=\"http://ignatzmouse.net/\">Krazy Kat</a>.</div><!-- a href=\"http://hyp20.com\">20</a><a href=\"http://hyp21.com\">21</a><a href=\"http://hyp22.com\">22</a><a href=\"http://hyp23.com\">23</a><a href=\"http://hyp24.com\">24</a -->    </div>  </div><SCRIPT type=\"text/javascript\" src=\"https://stats.palmdrive.net/stats.js\"></SCRIPT>    </body></html>",
  "embeddings": []
}
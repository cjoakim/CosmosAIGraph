{
  "libtype": "npm",
  "libname": "json2csv",
  "url": "http://zemirco.github.io/json2csv",
  "html": "<!DOCTYPE html><html lang=\"en\">  <head>    <meta charset=\"utf-8\">    <link rel=\"stylesheet\" href=\"assets/style.css?t=90051322\">    <script src=\"assets/script.js?t=93f1a66c\"></script>    <title>json2csv</title>    <meta name=\"viewport\" content=\"width=device-width\">  </head>  <body class=\"-menu-visible\">    <div class=\"doc-layout\">      <div class=\"toggle menu-toggle js-menu-toggle\"></div>      <div class=\"menu toc-menu\">        <ul>          <li class=\"menu-item -level-0 -parent\">            <ul class=\"submenu\">              <li class=\"menu-item -level-1\"><a class=\"link title -active link-index\" href=\"index.html\">json2csv</a>              </li>              <li class=\"menu-item -level-1\"><a class=\"link title link-features\" href=\"#features\">Features</a>              </li>              <li class=\"menu-item -level-1\"><a class=\"link title link-how-to-install\" href=\"#how-to-install\">How to install</a>              </li>              <li class=\"menu-item -level-1 -parent\"><a class=\"link title link-command-line-interface\" href=\"#command-line-interface\">Command Line Interface</a>                <ul class=\"submenu\">                  <li class=\"menu-item -level-2\"><a class=\"link title link-cli-examples\" href=\"#cli-examples\">CLI examples</a>                  </li>                </ul>              </li>              <li class=\"menu-item -level-1 -parent\"><a class=\"link title link-javascript-module\" href=\"#javascript-module\">Javascript module</a>                <ul class=\"submenu\">                  <li class=\"menu-item -level-2\"><a class=\"link title link-available-options\" href=\"#available-options\">Available Options</a>                  </li>                  <li class=\"menu-item -level-2\"><a class=\"link title link-json2csv-parser-(synchronous-api)\" href=\"#json2csv-parser-(synchronous-api)\">json2csv parser (Synchronous API)</a>                  </li>                  <li class=\"menu-item -level-2\"><a class=\"link title link-json2csv-async-parser-(streaming-api)\" href=\"#json2csv-async-parser-(streaming-api)\">json2csv async parser (Streaming API)</a>                  </li>                  <li class=\"menu-item -level-2\"><a class=\"link title link-json2csv-transform-(streaming-api)\" href=\"#json2csv-transform-(streaming-api)\">json2csv transform (Streaming API)</a>                  </li>                  <li class=\"menu-item -level-2\"><a class=\"link title link-data-transforms\" href=\"#data-transforms\">Data transforms</a>                  </li>                  <li class=\"menu-item -level-2\"><a class=\"link title link-javascript-module-examples\" href=\"#javascript-module-examples\">Javascript module examples</a>                  </li>                  <li class=\"menu-item -level-2\"><a class=\"link title link-migrations\" href=\"#migrations\">Migrations</a>                  </li>                </ul>              </li>              <li class=\"menu-item -level-1 -parent\"><a class=\"link title link-known-gotchas\" href=\"#known-gotchas\">Known Gotchas</a>                <ul class=\"submenu\">                  <li class=\"menu-item -level-2\"><a class=\"link title link-excel-support\" href=\"#excel-support\">Excel support</a>                  </li>                  <li class=\"menu-item -level-2\"><a class=\"link title link-powershell-escaping\" href=\"#powershell-escaping\">PowerShell escaping</a>                  </li>                </ul>              </li>              <li class=\"menu-item -level-1\"><a class=\"link title link-building\" href=\"#building\">Building</a>              </li>              <li class=\"menu-item -level-1\"><a class=\"link title link-testing\" href=\"#testing\">Testing</a>              </li>              <li class=\"menu-item -level-1\"><a class=\"link title link-contributors\" href=\"#contributors\">Contributors</a>              </li>              <li class=\"menu-item -level-1\"><a class=\"link title link-license\" href=\"#license\">License</a>              </li>            </ul>          </li>        </ul>      </div>      <div class=\"body page-index\">        <div class=\"header-nav\">          <div class=\"right\">          </div>        </div>        <div class=\"markdown-body\"><h1 id=\"json2csv\">json2csv</h1><p>Converts json into csv with column titles and proper line endings.<br>Can be used as a module and from the command line.</p><p><a href=\"http://badge.fury.io/js/json2csv\"><img src=\"https://badge.fury.io/js/json2csv.svg\" alt=\"npm version\"></a><a href=\"https://travis-ci.org/zemirco/json2csv\"><img src=\"https://travis-ci.org/zemirco/json2csv.svg\" alt=\"Build Status\"></a><a href=\"https://coveralls.io/r/zemirco/json2csv?branch=master\"><img src=\"https://coveralls.io/repos/zemirco/json2csv/badge.svg?branch=master\" alt=\"Coverage Status\"></a></p><p>See the <a href=\"https://github.com/zemirco/json2csv/blob/master/CHANGELOG.md\">CHANGELOG</a> for details about the latest release.</p><h2 id=\"features\">Features</h2><ul><li>Fast and lightweight</li><li>Scalable to infinitely large datasets (using stream processing)</li><li>Support for standard JSON as well as NDJSON</li><li>Advanced data selection (automatic field discovery, underscore-like selectors, custom data getters, default values for missing fields, transforms, etc.)</li><li>Highly customizable (supportting custom quotation marks, delimiters, eol values, etc.)</li><li>Automatic escaping (preserving new lines, quotes, etc. in them)</li><li>Optional headers</li><li>Unicode encoding support</li><li>Pretty printing in table format to stdout</li></ul><h2 id=\"how-to-install\">How to install</h2><p>You can install json2csv as a dependency using NPM.<br>Requires <strong>Node v10</strong> or higher.</p><pre><code class=\"lang-sh\"><span class=\"pl-c\"># Global so it can be called from anywhere</span>$ npm install -g json2csv<span class=\"pl-c\"># or as a dependency of a project</span>$ npm install json2csv --save</code></pre><p>Also, if you are loading json2csv directly to the browser you can pull it directly from the CDN.</p><pre><code class=\"lang-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"pl-s\">&quot;https://cdn.jsdelivr.net/npm/json2csv&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></code></pre><p>By default, the above script will get the latest release of json2csv. You can also specify a specific version:</p><pre><code class=\"lang-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"pl-s\">&quot;https://cdn.jsdelivr.net/npm/json2csv@4.2.1&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></code></pre><h2 id=\"command-line-interface\">Command Line Interface</h2><p><code>json2csv</code> can be called from the command line if installed globally (using the <code>-g</code> flag).</p><pre><code class=\"lang-bash\">Usage: json2csv [options]Options:  -V, --version                       output the version number  -i, --input &lt;input&gt;                 Path and name of the incoming json file. Defaults to stdin.  -o, --output &lt;output&gt;               Path and name of the resulting csv file. Defaults to stdout.  -c, --config &lt;path&gt;                 Specify a file with a valid JSON configuration.  -n, --ndjson                        Treat the input as NewLine-Delimited JSON.  -s, --no-streaming                  Process the whole JSON array <span class=\"pl-k\">in</span> memory instead of doing it line by line.  -f, --fields &lt;fields&gt;               List of fields to process. Defaults to field auto-detection.  -v, --default-value &lt;defaultValue&gt;  Default value to use <span class=\"pl-k\">for</span> missing fields.  -q, --quote &lt;quote&gt;                 Character(s) to use as quote mark. Defaults to <span class=\"pl-s\">&apos;&quot;&apos;</span>.  -Q, --escaped-quote &lt;escapedQuote&gt;  Character(s) to use as a escaped quote. Defaults to a double `quote`, <span class=\"pl-s\">&apos;&quot;&quot;&apos;</span>.  -d, --delimiter &lt;delimiter&gt;         Character(s) to use as delimiter. Defaults to <span class=\"pl-s\">&apos;,&apos;</span>. (default: <span class=\"pl-s\">&quot;,&quot;</span>)  -e, --eol &lt;eol&gt;                     Character(s) to use as End-of-Line <span class=\"pl-k\">for</span> separating rows. Defaults to <span class=\"pl-s\">&apos;\\n&apos;</span>. (default: <span class=\"pl-s\">&quot;\\n&quot;</span>)  -E, --excel-strings                 Wraps string data to force Excel to interpret it as string even <span class=\"pl-k\">if</span> it contains a number.  -H, --no-header                     Disable the column name header.  -a, --include-empty-rows            Includes empty rows <span class=\"pl-k\">in</span> the resulting CSV output.  -b, --with-bom                      Includes BOM character at the beginning of the CSV.  -p, --pretty                        Print output as a pretty table. Use only when printing to console.  --unwind [paths]                    Creates multiple rows from a single JSON document similar to MongoDB unwind.  --unwind-blank                      When unwinding, blank out instead of repeating data. Defaults to <span class=\"pl-c1\">false</span>. (default: <span class=\"pl-c1\">false</span>)  --flatten-objects                   Flatten nested objects. Defaults to <span class=\"pl-c1\">false</span>. (default: <span class=\"pl-c1\">false</span>)  --flatten-arrays                    Flatten nested arrays. Defaults to <span class=\"pl-c1\">false</span>. (default: <span class=\"pl-c1\">false</span>)  --flatten-separator &lt;separator&gt;     Flattened keys separator. Defaults to <span class=\"pl-s\">&apos;.&apos;</span>. (default: <span class=\"pl-s\">&quot;.&quot;</span>)  -h, --<span class=\"pl-c1\">help</span>                          output usage information</code></pre><p>If no input <code>-i</code> is specified the result is expected from to the console standard input.If no output <code>-o</code> is specified the result is printed to the console standard output.If no fields <code>-f</code> or config <code>-c</code> are passed the fields of the first element are used since json2csv CLI process the items one at a time. You can use the <code>--no-streaming</code> flag to load the entire JSON in memory and get all the headers. However, keep in mind that this is slower and requires much more memory.Use <code>-p</code> to show the result as a table in the console.</p><p>Any option passed through the config file <code>-c</code> will be overriden if a specific flag is passed as well. For example, the fields option of the config will be overriden if the fields flag <code>-f</code> is used.</p><h3 id=\"cli-examples\">CLI examples</h3><p>All examples use this example <a href=\"https://github.com/zemirco/json2csv/blob/master/test/fixtures/json/default.json\">input file</a>.</p><h4 id=\"input-file-and-specify-fields\">Input file and specify fields</h4><pre><code class=\"lang-sh\">$ json2csv -i input.json -f carModel,price,colorcarModel,price,color<span class=\"pl-s\">&quot;Audi&quot;</span>,10000,<span class=\"pl-s\">&quot;blue&quot;</span><span class=\"pl-s\">&quot;BMW&quot;</span>,15000,<span class=\"pl-s\">&quot;red&quot;</span><span class=\"pl-s\">&quot;Mercedes&quot;</span>,20000,<span class=\"pl-s\">&quot;yellow&quot;</span><span class=\"pl-s\">&quot;Porsche&quot;</span>,30000,<span class=\"pl-s\">&quot;green&quot;</span></code></pre><h4 id=\"input-file-specify-fields-and-use-pretty-logging\">Input file, specify fields and use pretty logging</h4><pre><code class=\"lang-sh\">$ json2csv -i input.json -f carModel,price,color -p</code></pre><p><img src=\"https://s3.amazonaws.com/zeMirco/github/json2csv/json2csv-pretty.png\" alt=\"Screenshot\"></p><h4 id=\"generating-csv-containing-only-specific-fields\">Generating CSV containing only specific fields</h4><pre><code class=\"lang-sh\">$ json2csv -i input.json -f carModel,price,color -o out.csv$ cat out.csvcarModel,price,color<span class=\"pl-s\">&quot;Audi&quot;</span>,10000,<span class=\"pl-s\">&quot;blue&quot;</span><span class=\"pl-s\">&quot;BMW&quot;</span>,15000,<span class=\"pl-s\">&quot;red&quot;</span><span class=\"pl-s\">&quot;Mercedes&quot;</span>,20000,<span class=\"pl-s\">&quot;yellow&quot;</span><span class=\"pl-s\">&quot;Porsche&quot;</span>,30000,<span class=\"pl-s\">&quot;green&quot;</span></code></pre><p>Same result will be obtained passing the fields config as a file.</p><pre><code class=\"lang-sh\">$ json2csv -i input.json -c fieldsConfig.json -o out.csv</code></pre><p>where the file <code>fieldsConfig.json</code> contains</p><pre><code class=\"lang-json\">[  <span class=\"pl-s\">&quot;carModel&quot;</span>,  <span class=\"pl-s\">&quot;price&quot;</span>,  <span class=\"pl-s\">&quot;color&quot;</span>]</code></pre><h4 id=\"read-input-from-stdin\">Read input from stdin</h4><pre><code class=\"lang-sh\">$ json2csv -f price[{<span class=\"pl-s\">&quot;price&quot;</span>:1000},{<span class=\"pl-s\">&quot;price&quot;</span>:2000}]</code></pre><p>Hit <kbd>Enter</kbd> and afterwards <kbd>CTRL</kbd> + <kbd>D</kbd> to end reading from stdin. The terminal should show</p><pre><code>price10002000</code></pre><h4 id=\"appending-to-existing-csv\">Appending to existing CSV</h4><p>Sometimes you want to add some additional rows with the same columns.This is how you can do that.</p><pre><code class=\"lang-sh\"><span class=\"pl-c\"># Initial creation of csv with headings</span>$ json2csv -i test.json -f name,version &gt; test.csv<span class=\"pl-c\"># Append additional rows</span>$ json2csv -i test.json -f name,version --no-header &gt;&gt; test.csv</code></pre><h2 id=\"javascript-module\">Javascript module</h2><p><code>json2csv</code> can also be use programatically from you javascript codebase.</p><h3 id=\"available-options\">Available Options</h3><p>The programatic APIs take a configuration object very equivalent to the CLI options.</p><ul><li><code>fields</code> - Array of Objects/Strings. Defaults to toplevel JSON attributes. See example below.</li><li><code>ndjson</code> - Only effective on the streaming API. Indicates that data coming through the stream is NDJSON.</li><li><code>transforms</code> - Array of transforms to be applied to each data item. A transform is simply a function that receives a data item and returns the transformed item.</li><li><code>defaultValue</code> - String, default value to use when missing data. Defaults to <code>&lt;empty&gt;</code> if not specified. (Overridden by <code>fields[].default</code>)</li><li><code>quote</code> - String, quote around cell values and column names. Defaults to <code>&quot;</code> if not specified.</li><li><code>escapedQuote</code> - String, the value to replace escaped quotes in strings. Defaults to 2x<code>quotes</code> (for example <code>&quot;&quot;</code>) if not specified.</li><li><code>delimiter</code> - String, delimiter of columns. Defaults to <code>,</code> if not specified.</li><li><code>eol</code> - String, overrides the default OS line ending (i.e. <code>\\n</code> on Unix and <code>\\r\\n</code> on Windows).</li><li><code>excelStrings</code> - Boolean, converts string data into normalized Excel style data.</li><li><code>header</code> - Boolean, determines whether or not CSV file will contain a title column. Defaults to <code>true</code> if not specified.</li><li><code>includeEmptyRows</code> - Boolean, includes empty rows. Defaults to <code>false</code>.</li><li><code>withBOM</code> - Boolean, with BOM character. Defaults to <code>false</code>.</li></ul><h3 id=\"json2csv-parser-(synchronous-api)\">json2csv parser (Synchronous API)</h3><p><code>json2csv</code> can also be used programatically as a synchronous converter using its <code>parse</code> method.</p><pre><code class=\"lang-js\"><span class=\"pl-k\">const</span> { Parser } = <span class=\"pl-c1\">require</span>(<span class=\"pl-s\">&apos;json2csv&apos;</span>);<span class=\"pl-k\">const</span> fields = [<span class=\"pl-s\">&apos;field1&apos;</span>, <span class=\"pl-s\">&apos;field2&apos;</span>, <span class=\"pl-s\">&apos;field3&apos;</span>];<span class=\"pl-k\">const</span> opts = { fields };<span class=\"pl-k\">try</span> {  <span class=\"pl-k\">const</span> parser = <span class=\"pl-k\">new</span> Parser(opts);  <span class=\"pl-k\">const</span> csv = parser.parse(myData);  <span class=\"pl-c1\">console</span>.log(csv);} <span class=\"pl-k\">catch</span> (err) {  <span class=\"pl-c1\">console</span>.error(err);}</code></pre><p>you can also use the convenience method <code>parse</code></p><pre><code class=\"lang-js\"><span class=\"pl-k\">const</span> { parse } = <span class=\"pl-c1\">require</span>(<span class=\"pl-s\">&apos;json2csv&apos;</span>);<span class=\"pl-k\">const</span> fields = [<span class=\"pl-s\">&apos;field1&apos;</span>, <span class=\"pl-s\">&apos;field2&apos;</span>, <span class=\"pl-s\">&apos;field3&apos;</span>];<span class=\"pl-k\">const</span> opts = { fields };<span class=\"pl-k\">try</span> {  <span class=\"pl-k\">const</span> csv = parse(myData, opts);  <span class=\"pl-c1\">console</span>.log(csv);} <span class=\"pl-k\">catch</span> (err) {  <span class=\"pl-c1\">console</span>.error(err);}</code></pre><p>Both of the methods above load the entire JSON in memory and do the whole processing in-memory while blocking Javascript event loop. For that reason is rarely a good reason to use it until your data is very small or your application doesn&apos;t do anything else.</p><h3 id=\"json2csv-async-parser-(streaming-api)\">json2csv async parser (Streaming API)</h3><p>The synchronous API has the downside of loading the entire JSON array in memory and blocking javascript&apos;s event loop while processing the data. This means that your server won&apos;t be able to process more request or your UI will become irresponsive while data is being processed. For those reasons, is rarely a good reason to use it unless your data is very small or your application doesn&apos;t do anything else.</p><p>The async parser process the data as a non-blocking stream. This approach ensures a consistent memory footprint and avoid blocking javascript&apos;s event loop. Thus, it&apos;s better suited for large datasets or system with high concurrency.</p><p>One very important difference between the asynchronous and the synchronous APIs is that using the asynchronous API json objects are processed one by one. In practice, this means that only the fields in the first object of the array are automatically detected and other fields are just ignored. To avoid this, it&apos;s advisable to ensure that all the objects contain exactly the same fields or provide the list of fields using the <code>fields</code> option.</p><p>The async API uses takes a second options arguments that&apos;s directly passed to the underlying streams and accept the same options as the standard <a href=\"https://nodejs.org/api/stream.html#stream_new_stream_duplex_options\">Node.js streams</a>.</p><p>Instances of <code>AsyncParser</code> expose three objects:</p><ul><li><em>input:</em> Which allows to push more data</li><li><em>processor:</em> A readable string representing the whole data processing. You can listen to all the standard events of Node.js streams.</li><li><em>transform:</em> The json2csv transform. See bellow for more details.</li></ul><pre><code class=\"lang-js\"><span class=\"pl-k\">const</span> { AsyncParser } = <span class=\"pl-c1\">require</span>(<span class=\"pl-s\">&apos;json2csv&apos;</span>);<span class=\"pl-k\">const</span> fields = [<span class=\"pl-s\">&apos;field1&apos;</span>, <span class=\"pl-s\">&apos;field2&apos;</span>, <span class=\"pl-s\">&apos;field3&apos;</span>];<span class=\"pl-k\">const</span> opts = { fields };<span class=\"pl-k\">const</span> transformOpts = { <span class=\"hljs-attr\">highWaterMark</span>: <span class=\"hljs-number\">8192</span> };<span class=\"pl-k\">const</span> asyncParser = <span class=\"pl-k\">new</span> AsyncParser(opts, transformOpts);<span class=\"pl-k\">let</span> csv = <span class=\"pl-s\">&apos;&apos;</span>;asyncParser.processor  .on(<span class=\"pl-s\">&apos;data&apos;</span>, chunk =&gt; (csv += chunk.toString()))  .on(<span class=\"pl-s\">&apos;end&apos;</span>, () =&gt; <span class=\"pl-c1\">console</span>.log(csv))  .on(<span class=\"pl-s\">&apos;error&apos;</span>, err =&gt; <span class=\"pl-c1\">console</span>.error(err));  <span class=\"pl-c\">// You can also listen for events on the conversion and see how the header or the lines are coming out.</span>asyncParser.transform  .on(<span class=\"pl-s\">&apos;header&apos;</span>, header =&gt; <span class=\"pl-c1\">console</span>.log(header))  .on(<span class=\"pl-s\">&apos;line&apos;</span>, line =&gt; <span class=\"pl-c1\">console</span>.log(line))  .on(<span class=\"pl-s\">&apos;error&apos;</span>, err =&gt; <span class=\"pl-c1\">console</span>.log(err));asyncParser.input.push(data); <span class=\"pl-c\">// This data might come from an HTTP request, etc.</span>asyncParser.input.push(<span class=\"pl-c1\">null</span>); <span class=\"pl-c\">// Sending `null` to a stream signal that no more data is expected and ends it.</span></code></pre><p><code>AsyncParser</code> also exposes some convenience methods:</p><ul><li><code>fromInput</code> allows you to set the input stream.</li><li><code>throughTransform</code> allows you to add transforms to the stream.</li><li><code>toOutput</code> allows you to set the output stream.</li><li><code>promise</code> returns a promise that resolves when the stream ends or errors. Takes a boolean parameter to indicate if the resulting CSV should be kept in-memory and be resolved by the promise.</li></ul><pre><code class=\"lang-js\"><span class=\"pl-k\">const</span> { createReadStream, createWriteStream } = <span class=\"pl-c1\">require</span>(<span class=\"pl-s\">&apos;fs&apos;</span>);<span class=\"pl-k\">const</span> { AsyncParser } = <span class=\"pl-c1\">require</span>(<span class=\"pl-s\">&apos;json2csv&apos;</span>);<span class=\"pl-k\">const</span> fields = [<span class=\"pl-s\">&apos;field1&apos;</span>, <span class=\"pl-s\">&apos;field2&apos;</span>, <span class=\"pl-s\">&apos;field3&apos;</span>];<span class=\"pl-k\">const</span> opts = { fields };<span class=\"pl-k\">const</span> transformOpts = { <span class=\"hljs-attr\">highWaterMark</span>: <span class=\"hljs-number\">8192</span> };<span class=\"pl-c\">// Using the promise API</span><span class=\"pl-k\">const</span> input = createReadStream(inputPath, { <span class=\"hljs-attr\">encoding</span>: <span class=\"pl-s\">&apos;utf8&apos;</span> });<span class=\"pl-k\">const</span> asyncParser = <span class=\"pl-k\">new</span> JSON2CSVAsyncParser(opts, transformOpts);<span class=\"pl-k\">const</span> parsingProcessor = asyncParser.fromInput(input);parsingProcessor.promise()  .then(<span class=\"hljs-function\"><span class=\"hljs-params\">csv</span> =&gt;</span> <span class=\"pl-c1\">console</span>.log(csv))  .catch(<span class=\"hljs-function\"><span class=\"hljs-params\">err</span> =&gt;</span> <span class=\"pl-c1\">console</span>.error(err));<span class=\"pl-c\">// Using the promise API just to know when the process finnish</span><span class=\"pl-c\">// but not actually load the CSV in memory</span><span class=\"pl-k\">const</span> input = createReadStream(inputPath, { <span class=\"hljs-attr\">encoding</span>: <span class=\"pl-s\">&apos;utf8&apos;</span> });<span class=\"pl-k\">const</span> output = createWriteStream(outputPath, { <span class=\"hljs-attr\">encoding</span>: <span class=\"pl-s\">&apos;utf8&apos;</span> });<span class=\"pl-k\">const</span> asyncParser = <span class=\"pl-k\">new</span> JSON2CSVAsyncParser(opts, transformOpts);<span class=\"pl-k\">const</span> parsingProcessor = asyncParser.fromInput(input).toOutput(output);parsingProcessor.promise(<span class=\"pl-c1\">false</span>).catch(<span class=\"hljs-function\"><span class=\"hljs-params\">err</span> =&gt;</span> <span class=\"pl-c1\">console</span>.error(err));</code></pre><p>you can also use the convenience method <code>parseAsync</code> which accept both JSON arrays/objects and readable streams and returns a promise.</p><pre><code class=\"lang-js\"><span class=\"pl-k\">const</span> { parseAsync } = <span class=\"pl-c1\">require</span>(<span class=\"pl-s\">&apos;json2csv&apos;</span>);<span class=\"pl-k\">const</span> fields = [<span class=\"pl-s\">&apos;field1&apos;</span>, <span class=\"pl-s\">&apos;field2&apos;</span>, <span class=\"pl-s\">&apos;field3&apos;</span>];<span class=\"pl-k\">const</span> opts = { fields };parseAsync(myData, opts)  .then(<span class=\"hljs-function\"><span class=\"hljs-params\">csv</span> =&gt;</span> <span class=\"pl-c1\">console</span>.log(csv))  .catch(<span class=\"hljs-function\"><span class=\"hljs-params\">err</span> =&gt;</span> <span class=\"pl-c1\">console</span>.error(err));</code></pre><h3 id=\"json2csv-transform-(streaming-api)\">json2csv transform (Streaming API)</h3><p>json2csv also exposes the raw stream transform so you can pipe your json content into it. This is the same Transform that <code>AsyncParser</code> uses under the hood.</p><pre><code class=\"lang-js\"><span class=\"pl-k\">const</span> { createReadStream, createWriteStream } = <span class=\"pl-c1\">require</span>(<span class=\"pl-s\">&apos;fs&apos;</span>);<span class=\"pl-k\">const</span> { Transform } = <span class=\"pl-c1\">require</span>(<span class=\"pl-s\">&apos;json2csv&apos;</span>);<span class=\"pl-k\">const</span> fields = [<span class=\"pl-s\">&apos;field1&apos;</span>, <span class=\"pl-s\">&apos;field2&apos;</span>, <span class=\"pl-s\">&apos;field3&apos;</span>];<span class=\"pl-k\">const</span> opts = { fields };<span class=\"pl-k\">const</span> transformOpts = { <span class=\"hljs-attr\">highWaterMark</span>: <span class=\"hljs-number\">16384</span>, <span class=\"hljs-attr\">encoding</span>: <span class=\"pl-s\">&apos;utf-8&apos;</span> };<span class=\"pl-k\">const</span> input = createReadStream(inputPath, { <span class=\"hljs-attr\">encoding</span>: <span class=\"pl-s\">&apos;utf8&apos;</span> });<span class=\"pl-k\">const</span> output = createWriteStream(outputPath, { <span class=\"hljs-attr\">encoding</span>: <span class=\"pl-s\">&apos;utf8&apos;</span> });<span class=\"pl-k\">const</span> json2csv = <span class=\"pl-k\">new</span> Transform(opts, transformOpts);<span class=\"pl-k\">const</span> processor = input.pipe(json2csv).pipe(output);<span class=\"pl-c\">// You can also listen for events on the conversion and see how the header or the lines are coming out.</span>json2csv  .on(<span class=\"pl-s\">&apos;header&apos;</span>, header =&gt; <span class=\"pl-c1\">console</span>.log(header))  .on(<span class=\"pl-s\">&apos;line&apos;</span>, line =&gt; <span class=\"pl-c1\">console</span>.log(line))  .on(<span class=\"pl-s\">&apos;error&apos;</span>, err =&gt; <span class=\"pl-c1\">console</span>.log(err));</code></pre><p>The stream API can also work on object mode. This is useful when you have an input stream in object mode or if you are getting JSON objects one by one and want to convert them to CSV as they come.</p><pre><code class=\"lang-js\"><span class=\"pl-k\">const</span> { Transform } = <span class=\"pl-c1\">require</span>(<span class=\"pl-s\">&quot;json2csv&quot;</span>);<span class=\"pl-k\">const</span> { Readable } = <span class=\"pl-c1\">require</span>(<span class=\"pl-s\">&apos;stream&apos;</span>);<span class=\"pl-k\">const</span> input = <span class=\"pl-k\">new</span> Readable({ <span class=\"hljs-attr\">objectMode</span>: <span class=\"pl-c1\">true</span> });input._read = <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> {};<span class=\"pl-c\">// myObjectEmitter is just a fake example representing anything that emit objects.</span>myObjectEmitter.on(<span class=\"pl-s\">&apos;object&apos;</span>, obj =&gt; input.push(obj));<span class=\"pl-c\">// Pushing a null close the stream</span>myObjectEmitter.end(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> input.push(<span class=\"pl-c1\">null</span>));<span class=\"pl-k\">const</span> output = process.stdout;<span class=\"pl-k\">const</span> opts = {};<span class=\"pl-k\">const</span> transformOpts = { <span class=\"hljs-attr\">objectMode</span>: <span class=\"pl-c1\">true</span> };<span class=\"pl-k\">const</span> json2csv = <span class=\"pl-k\">new</span> Transform(opts, transformOpts);<span class=\"pl-k\">const</span> processor = input.pipe(json2csv).pipe(output);</code></pre><h3 id=\"data-transforms\">Data transforms</h3><p>json2csv supports data transforms. A transform is simply a function that receives a data item and returns the transformed item.</p><h4 id=\"custom-transforms\">Custom transforms</h4><pre><code class=\"lang-js\"><span class=\"hljs-function\"><span class=\"pl-k\">function</span> (<span class=\"hljs-params\">item</span>) </span>{  <span class=\"pl-c\">// apply tranformations or create new object</span>  <span class=\"pl-k\">return</span> transformedItem;}</code></pre><p>or using ES6</p><pre><code class=\"lang-js\">(item) =&gt; {  <span class=\"pl-c\">// apply tranformations or create new object</span>  <span class=\"pl-k\">return</span> transformedItem;}</code></pre><p>For example, let&apos;s add a line counter to our CSV, capitalize the car field and change the price to be in Ks (1000s).</p><pre><code class=\"lang-js\"><span class=\"pl-k\">let</span> counter = <span class=\"hljs-number\">1</span>;<span class=\"hljs-function\">(<span class=\"hljs-params\">item</span>) =&gt;</span> ({ <span class=\"hljs-attr\">counter</span>: counter++, ...item, <span class=\"hljs-attr\">car</span>: item.car.toUpperCase(), <span class=\"hljs-attr\">price</span>: item.price / <span class=\"hljs-number\">1000</span> });</code></pre><h4 id=\"built-in-transforms\">Built-in transforms</h4><p>There is a number of built-in transform provider by the library.</p><pre><code class=\"lang-js\"><span class=\"pl-k\">const</span> { <span class=\"hljs-attr\">transforms</span>: { unwind, flatten } } = <span class=\"pl-c1\">require</span>(<span class=\"pl-s\">&apos;json2csv&apos;</span>);</code></pre><h5 id=\"unwind\">Unwind</h5><p>The unwind transform deconstructs an array field from the input item to output a row for each element. Is&apos;s similar to MongoDB&apos;s $unwind aggregation.</p><p>The transform needs to be instantiated and takes an options object as arguments containing:</p><ul><li><code>paths</code> - Array of String, list the paths to the fields to be unwound. It&apos;s mandatory and should not be empty.</li><li><code>blankOut</code> - Boolean, unwind using blank values instead of repeating data. Defaults to <code>false</code>.</li></ul><pre><code class=\"lang-js\"><span class=\"pl-c\">// Default</span>unwind({ <span class=\"hljs-attr\">paths</span>: [<span class=\"pl-s\">&apos;fieldToUnwind&apos;</span>] });<span class=\"pl-c\">// Blanking out repeated data</span>unwind({ <span class=\"hljs-attr\">paths</span>: [<span class=\"pl-s\">&apos;fieldToUnwind&apos;</span>], <span class=\"hljs-attr\">blankOut</span>: <span class=\"pl-c1\">true</span> });</code></pre><h5 id=\"flatten\">Flatten</h5><p>Flatten nested javascript objects into a single level object.</p><p>The transform needs to be instantiated and takes an options object as arguments containing:</p><ul><li><code>objects</code> - Boolean, whether to flatten JSON objects or not. Defaults to <code>true</code>.</li><li><code>arrays</code>- Boolean, whether to flatten Arrays or not. Defaults to <code>false</code>.</li><li><code>separator</code> - String, separator to use between nested JSON keys when flattening a field. Defaults to <code>.</code>.</li></ul><pre><code class=\"lang-js\"><span class=\"pl-c\">// Default</span>flatten();<span class=\"pl-c\">// Custom separator &apos;__&apos;</span>flatten({ <span class=\"hljs-attr\">separator</span>: <span class=\"pl-s\">&apos;_&apos;</span> });<span class=\"pl-c\">// Flatten only arrays</span>flatten({ <span class=\"hljs-attr\">objects</span>: <span class=\"pl-c1\">false</span>, <span class=\"hljs-attr\">arrays</span>: <span class=\"pl-c1\">true</span> });</code></pre><h3 id=\"javascript-module-examples\">Javascript module examples</h3><h4 id=\"example-fields-option\">Example <code>fields</code> option</h4><pre><code class=\"lang-js\">{  <span class=\"hljs-attr\">fields</span>: [    <span class=\"pl-c\">// Supports pathname -&gt; pathvalue</span>    <span class=\"pl-s\">&apos;simplepath&apos;</span>, <span class=\"pl-c\">// equivalent to {value:&apos;simplepath&apos;}</span>    <span class=\"pl-s\">&apos;path.to.value&apos;</span> <span class=\"pl-c\">// also equivalent to {value:&apos;path.to.value&apos;}</span>    <span class=\"pl-c\">// Supports label -&gt; simple path</span>    {      <span class=\"hljs-attr\">label</span>: <span class=\"pl-s\">&apos;some label&apos;</span>, <span class=\"pl-c\">// Optional, column will be labeled &apos;path.to.something&apos; if not defined)</span>      <span class=\"hljs-attr\">value</span>: <span class=\"pl-s\">&apos;path.to.something&apos;</span>, <span class=\"pl-c\">// data.path.to.something</span>      <span class=\"hljs-attr\">default</span>: <span class=\"pl-s\">&apos;NULL&apos;</span> <span class=\"pl-c\">// default if value is not found (Optional, overrides `defaultValue` for column)</span>    },    <span class=\"pl-c\">// Supports label -&gt; derived value</span>    {      <span class=\"hljs-attr\">label</span>: <span class=\"pl-s\">&apos;some label&apos;</span>, <span class=\"pl-c\">// Optional, column will be labeled with the function name or empty if the function is anonymous</span>      <span class=\"hljs-attr\">value</span>: <span class=\"hljs-function\">(<span class=\"hljs-params\">row, field</span>) =&gt;</span> row[field.label].toLowerCase() ||field.default,      <span class=\"hljs-attr\">default</span>: <span class=\"pl-s\">&apos;NULL&apos;</span> <span class=\"pl-c\">// default if value function returns null or undefined</span>    },    <span class=\"pl-c\">// Supports label -&gt; derived value</span>    {      <span class=\"hljs-attr\">value</span>: <span class=\"hljs-function\">(<span class=\"hljs-params\">row</span>) =&gt;</span> row.arrayField.join(<span class=\"pl-s\">&apos;,&apos;</span>)    },    <span class=\"pl-c\">// Supports label -&gt; derived value</span>    {      <span class=\"hljs-attr\">value</span>: <span class=\"hljs-function\">(<span class=\"hljs-params\">row</span>) =&gt;</span> <span class=\"pl-s\">`&quot;<span class=\"hljs-subst\">${row.arrayField.join(<span class=\"pl-s\">&apos;,&apos;</span>)}</span>&quot;`</span>    },  ]}</code></pre><h4 id=\"example-1\">Example 1</h4><pre><code class=\"lang-js\"><span class=\"pl-k\">const</span> { Parser } = <span class=\"pl-c1\">require</span>(<span class=\"pl-s\">&apos;json2csv&apos;</span>);<span class=\"pl-k\">const</span> myCars = [  {    <span class=\"pl-s\">&quot;car&quot;</span>: <span class=\"pl-s\">&quot;Audi&quot;</span>,    <span class=\"pl-s\">&quot;price&quot;</span>: <span class=\"hljs-number\">40000</span>,    <span class=\"pl-s\">&quot;color&quot;</span>: <span class=\"pl-s\">&quot;blue&quot;</span>  }, {    <span class=\"pl-s\">&quot;car&quot;</span>: <span class=\"pl-s\">&quot;BMW&quot;</span>,    <span class=\"pl-s\">&quot;price&quot;</span>: <span class=\"hljs-number\">35000</span>,    <span class=\"pl-s\">&quot;color&quot;</span>: <span class=\"pl-s\">&quot;black&quot;</span>  }, {    <span class=\"pl-s\">&quot;car&quot;</span>: <span class=\"pl-s\">&quot;Porsche&quot;</span>,    <span class=\"pl-s\">&quot;price&quot;</span>: <span class=\"hljs-number\">60000</span>,    <span class=\"pl-s\">&quot;color&quot;</span>: <span class=\"pl-s\">&quot;green&quot;</span>  }];<span class=\"pl-k\">const</span> json2csvParser = <span class=\"pl-k\">new</span> Parser();<span class=\"pl-k\">const</span> csv = json2csvParser.parse(myCars);<span class=\"pl-c1\">console</span>.log(csv);</code></pre><p>will output to console</p><pre><code>&quot;car&quot;, &quot;price&quot;, &quot;color&quot;&quot;Audi&quot;, 40000, &quot;blue&quot;&quot;BMW&quot;, 35000, &quot;black&quot;&quot;Porsche&quot;, 60000, &quot;green&quot;</code></pre><h4 id=\"example-2\">Example 2</h4><p>You can choose which fields to include in the CSV.</p><pre><code class=\"lang-js\"><span class=\"pl-k\">const</span> { Parser } = <span class=\"pl-c1\">require</span>(<span class=\"pl-s\">&apos;json2csv&apos;</span>);<span class=\"pl-k\">const</span> fields = [<span class=\"pl-s\">&apos;car&apos;</span>, <span class=\"pl-s\">&apos;color&apos;</span>];<span class=\"pl-k\">const</span> json2csvParser = <span class=\"pl-k\">new</span> Parser({ fields });<span class=\"pl-k\">const</span> csv = json2csvParser.parse(myCars);<span class=\"pl-c1\">console</span>.log(csv);</code></pre><p>will output to console</p><pre><code>&quot;car&quot;, &quot;color&quot;&quot;Audi&quot;, &quot;blue&quot;&quot;BMW&quot;, &quot;black&quot;&quot;Porsche&quot;, &quot;green&quot;</code></pre><h4 id=\"example-3\">Example 3</h4><p>You can choose custom column names for the exported file.</p><pre><code class=\"lang-js\"><span class=\"pl-k\">const</span> { Parser } = <span class=\"pl-c1\">require</span>(<span class=\"pl-s\">&apos;json2csv&apos;</span>);<span class=\"pl-k\">const</span> fields = [{  <span class=\"hljs-attr\">label</span>: <span class=\"pl-s\">&apos;Car Name&apos;</span>,  <span class=\"hljs-attr\">value</span>: <span class=\"pl-s\">&apos;car&apos;</span>},{  <span class=\"hljs-attr\">label</span>: <span class=\"pl-s\">&apos;Price USD&apos;</span>,  <span class=\"hljs-attr\">value</span>: <span class=\"pl-s\">&apos;price&apos;</span>}];<span class=\"pl-k\">const</span> json2csvParser = <span class=\"pl-k\">new</span> Parser({ fields });<span class=\"pl-k\">const</span> csv = json2csvParser.parse(myCars);<span class=\"pl-c1\">console</span>.log(csv);</code></pre><p>will output to console</p><pre><code>&quot;Car Name&quot;, &quot;Price USD&quot;&quot;Audi&quot;, 40000&quot;BMW&quot;, 35000&quot;Porsche&quot;, 60000</code></pre><h4 id=\"example-4\">Example 4</h4><p>You can also specify nested properties using dot notation.</p><pre><code class=\"lang-js\"><span class=\"pl-k\">const</span> { Parser } = <span class=\"pl-c1\">require</span>(<span class=\"pl-s\">&apos;json2csv&apos;</span>);<span class=\"pl-k\">const</span> myCars = [  {    <span class=\"pl-s\">&quot;car&quot;</span>: { <span class=\"pl-s\">&quot;make&quot;</span>: <span class=\"pl-s\">&quot;Audi&quot;</span>, <span class=\"pl-s\">&quot;model&quot;</span>: <span class=\"pl-s\">&quot;A3&quot;</span> },    <span class=\"pl-s\">&quot;price&quot;</span>: <span class=\"hljs-number\">40000</span>,    <span class=\"pl-s\">&quot;color&quot;</span>: <span class=\"pl-s\">&quot;blue&quot;</span>  }, {    <span class=\"pl-s\">&quot;car&quot;</span>: { <span class=\"pl-s\">&quot;make&quot;</span>: <span class=\"pl-s\">&quot;BMW&quot;</span>, <span class=\"pl-s\">&quot;model&quot;</span>: <span class=\"pl-s\">&quot;F20&quot;</span> },    <span class=\"pl-s\">&quot;price&quot;</span>: <span class=\"hljs-number\">35000</span>,    <span class=\"pl-s\">&quot;color&quot;</span>: <span class=\"pl-s\">&quot;black&quot;</span>  }, {    <span class=\"pl-s\">&quot;car&quot;</span>: { <span class=\"pl-s\">&quot;make&quot;</span>: <span class=\"pl-s\">&quot;Porsche&quot;</span>, <span class=\"pl-s\">&quot;model&quot;</span>: <span class=\"pl-s\">&quot;9PA AF1&quot;</span> },    <span class=\"pl-s\">&quot;price&quot;</span>: <span class=\"hljs-number\">60000</span>,    <span class=\"pl-s\">&quot;color&quot;</span>: <span class=\"pl-s\">&quot;green&quot;</span>  }];<span class=\"pl-k\">const</span> fields = [<span class=\"pl-s\">&apos;car.make&apos;</span>, <span class=\"pl-s\">&apos;car.model&apos;</span>, <span class=\"pl-s\">&apos;price&apos;</span>, <span class=\"pl-s\">&apos;color&apos;</span>];<span class=\"pl-k\">const</span> json2csvParser = <span class=\"pl-k\">new</span> Parser({ fields });<span class=\"pl-k\">const</span> csv = json2csvParser.parse(myCars);<span class=\"pl-c1\">console</span>.log(csv);</code></pre><p>will output to console</p><pre><code>&quot;car.make&quot;, &quot;car.model&quot;, &quot;price&quot;, &quot;color&quot;&quot;Audi&quot;, &quot;A3&quot;, 40000, &quot;blue&quot;&quot;BMW&quot;, &quot;F20&quot;, 35000, &quot;black&quot;&quot;Porsche&quot;, &quot;9PA AF1&quot;, 60000, &quot;green&quot;</code></pre><h4 id=\"example-5\">Example 5</h4><p>Use a custom delimiter to create tsv files using the delimiter option:</p><pre><code class=\"lang-js\"><span class=\"pl-k\">const</span> { Parser } = <span class=\"pl-c1\">require</span>(<span class=\"pl-s\">&apos;json2csv&apos;</span>);<span class=\"pl-k\">const</span> json2csvParser = <span class=\"pl-k\">new</span> Parser({ <span class=\"hljs-attr\">delimiter</span>: <span class=\"pl-s\">&apos;\\t&apos;</span> });<span class=\"pl-k\">const</span> tsv = json2csvParser.parse(myCars);<span class=\"pl-c1\">console</span>.log(tsv);</code></pre><p>will output to console</p><pre><code>&quot;car&quot; &quot;price&quot; &quot;color&quot;&quot;Audi&quot;  10000 &quot;blue&quot;&quot;BMW&quot; 15000 &quot;red&quot;&quot;Mercedes&quot;  20000 &quot;yellow&quot;&quot;Porsche&quot; 30000 &quot;green&quot;</code></pre><p>If no delimiter is specified, the default <code>,</code> is used.</p><h4 id=\"example-6\">Example 6</h4><p>You can choose custom quotation marks.</p><pre><code class=\"lang-js\"><span class=\"pl-k\">const</span> { Parser } = <span class=\"pl-c1\">require</span>(<span class=\"pl-s\">&apos;json2csv&apos;</span>);<span class=\"pl-k\">const</span> json2csvParser = <span class=\"pl-k\">new</span> Parser({ <span class=\"hljs-attr\">quote</span>: <span class=\"pl-s\">&apos;&apos;</span> });<span class=\"pl-k\">const</span> csv = json2csvParser.parse(myCars);<span class=\"pl-c1\">console</span>.log(csv);</code></pre><p>will output to console</p><pre><code>car, price, colorAudi, 40000, blueBMW&quot;, 35000, blackPorsche&quot;, 60000, green</code></pre><h4 id=\"example-7\">Example 7</h4><p>You can unwind arrays similar to MongoDB&apos;s $unwind operation using the <code>unwind</code> transform.</p><pre><code class=\"lang-js\"><span class=\"pl-k\">const</span> { Parser, <span class=\"hljs-attr\">transforms</span>: { unwind } } = <span class=\"pl-c1\">require</span>(<span class=\"pl-s\">&apos;json2csv&apos;</span>);<span class=\"pl-k\">const</span> myCars = [  {    <span class=\"pl-s\">&quot;carModel&quot;</span>: <span class=\"pl-s\">&quot;Audi&quot;</span>,    <span class=\"pl-s\">&quot;price&quot;</span>: <span class=\"hljs-number\">0</span>,    <span class=\"pl-s\">&quot;colors&quot;</span>: [<span class=\"pl-s\">&quot;blue&quot;</span>,<span class=\"pl-s\">&quot;green&quot;</span>,<span class=\"pl-s\">&quot;yellow&quot;</span>]  }, {    <span class=\"pl-s\">&quot;carModel&quot;</span>: <span class=\"pl-s\">&quot;BMW&quot;</span>,    <span class=\"pl-s\">&quot;price&quot;</span>: <span class=\"hljs-number\">15000</span>,    <span class=\"pl-s\">&quot;colors&quot;</span>: [<span class=\"pl-s\">&quot;red&quot;</span>,<span class=\"pl-s\">&quot;blue&quot;</span>]  }, {    <span class=\"pl-s\">&quot;carModel&quot;</span>: <span class=\"pl-s\">&quot;Mercedes&quot;</span>,    <span class=\"pl-s\">&quot;price&quot;</span>: <span class=\"hljs-number\">20000</span>,    <span class=\"pl-s\">&quot;colors&quot;</span>: <span class=\"pl-s\">&quot;yellow&quot;</span>  }, {    <span class=\"pl-s\">&quot;carModel&quot;</span>: <span class=\"pl-s\">&quot;Porsche&quot;</span>,    <span class=\"pl-s\">&quot;price&quot;</span>: <span class=\"hljs-number\">30000</span>,    <span class=\"pl-s\">&quot;colors&quot;</span>: [<span class=\"pl-s\">&quot;green&quot;</span>,<span class=\"pl-s\">&quot;teal&quot;</span>,<span class=\"pl-s\">&quot;aqua&quot;</span>]  }];<span class=\"pl-k\">const</span> fields = [<span class=\"pl-s\">&apos;carModel&apos;</span>, <span class=\"pl-s\">&apos;price&apos;</span>, <span class=\"pl-s\">&apos;colors&apos;</span>];<span class=\"pl-k\">const</span> transforms = [unwind({ <span class=\"hljs-attr\">paths</span>: [<span class=\"pl-s\">&apos;colors&apos;</span>] })];<span class=\"pl-k\">const</span> json2csvParser = <span class=\"pl-k\">new</span> Parser({ fields, transforms });<span class=\"pl-k\">const</span> csv = json2csvParser.parse(myCars);<span class=\"pl-c1\">console</span>.log(csv);</code></pre><p>will output to console</p><pre><code>&quot;carModel&quot;,&quot;price&quot;,&quot;colors&quot;&quot;Audi&quot;,0,&quot;blue&quot;&quot;Audi&quot;,0,&quot;green&quot;&quot;Audi&quot;,0,&quot;yellow&quot;&quot;BMW&quot;,15000,&quot;red&quot;&quot;BMW&quot;,15000,&quot;blue&quot;&quot;Mercedes&quot;,20000,&quot;yellow&quot;&quot;Porsche&quot;,30000,&quot;green&quot;&quot;Porsche&quot;,30000,&quot;teal&quot;&quot;Porsche&quot;,30000,&quot;aqua&quot;</code></pre><h4 id=\"example-8\">Example 8</h4><p>You can also unwind arrays multiple times or with nested objects.</p><pre><code class=\"lang-js\"><span class=\"pl-k\">const</span> { Parser, <span class=\"hljs-attr\">transforms</span>: { unwind } } = <span class=\"pl-c1\">require</span>(<span class=\"pl-s\">&apos;json2csv&apos;</span>);<span class=\"pl-k\">const</span> myCars = [  {    <span class=\"pl-s\">&quot;carModel&quot;</span>: <span class=\"pl-s\">&quot;BMW&quot;</span>,    <span class=\"pl-s\">&quot;price&quot;</span>: <span class=\"hljs-number\">15000</span>,    <span class=\"pl-s\">&quot;items&quot;</span>: [      {        <span class=\"pl-s\">&quot;name&quot;</span>: <span class=\"pl-s\">&quot;airbag&quot;</span>,        <span class=\"pl-s\">&quot;color&quot;</span>: <span class=\"pl-s\">&quot;white&quot;</span>      }, {        <span class=\"pl-s\">&quot;name&quot;</span>: <span class=\"pl-s\">&quot;dashboard&quot;</span>,        <span class=\"pl-s\">&quot;color&quot;</span>: <span class=\"pl-s\">&quot;black&quot;</span>      }    ]  }, {    <span class=\"pl-s\">&quot;carModel&quot;</span>: <span class=\"pl-s\">&quot;Porsche&quot;</span>,    <span class=\"pl-s\">&quot;price&quot;</span>: <span class=\"hljs-number\">30000</span>,    <span class=\"pl-s\">&quot;items&quot;</span>: [      {        <span class=\"pl-s\">&quot;name&quot;</span>: <span class=\"pl-s\">&quot;airbag&quot;</span>,        <span class=\"pl-s\">&quot;items&quot;</span>: [          {            <span class=\"pl-s\">&quot;position&quot;</span>: <span class=\"pl-s\">&quot;left&quot;</span>,            <span class=\"pl-s\">&quot;color&quot;</span>: <span class=\"pl-s\">&quot;white&quot;</span>          }, {            <span class=\"pl-s\">&quot;position&quot;</span>: <span class=\"pl-s\">&quot;right&quot;</span>,            <span class=\"pl-s\">&quot;color&quot;</span>: <span class=\"pl-s\">&quot;gray&quot;</span>          }        ]      }, {        <span class=\"pl-s\">&quot;name&quot;</span>: <span class=\"pl-s\">&quot;dashboard&quot;</span>,        <span class=\"pl-s\">&quot;items&quot;</span>: [          {            <span class=\"pl-s\">&quot;position&quot;</span>: <span class=\"pl-s\">&quot;left&quot;</span>,            <span class=\"pl-s\">&quot;color&quot;</span>: <span class=\"pl-s\">&quot;gray&quot;</span>          }, {            <span class=\"pl-s\">&quot;position&quot;</span>: <span class=\"pl-s\">&quot;right&quot;</span>,            <span class=\"pl-s\">&quot;color&quot;</span>: <span class=\"pl-s\">&quot;black&quot;</span>          }        ]      }    ]  }];<span class=\"pl-k\">const</span> fields = [<span class=\"pl-s\">&apos;carModel&apos;</span>, <span class=\"pl-s\">&apos;price&apos;</span>, <span class=\"pl-s\">&apos;items.name&apos;</span>, <span class=\"pl-s\">&apos;items.color&apos;</span>, <span class=\"pl-s\">&apos;items.items.position&apos;</span>, <span class=\"pl-s\">&apos;items.items.color&apos;</span>];<span class=\"pl-k\">const</span> transforms = [unwind({ <span class=\"hljs-attr\">paths</span>: [<span class=\"pl-s\">&apos;items&apos;</span>, <span class=\"pl-s\">&apos;items.items&apos;</span>] })];<span class=\"pl-k\">const</span> json2csvParser = <span class=\"pl-k\">new</span> Parser({ fields, transforms });<span class=\"pl-k\">const</span> csv = json2csvParser.parse(myCars);<span class=\"pl-c1\">console</span>.log(csv);</code></pre><p>will output to console</p><pre><code>&quot;carModel&quot;,&quot;price&quot;,&quot;items.name&quot;,&quot;items.color&quot;,&quot;items.items.position&quot;,&quot;items.items.color&quot;&quot;BMW&quot;,15000,&quot;airbag&quot;,&quot;white&quot;,,&quot;BMW&quot;,15000,&quot;dashboard&quot;,&quot;black&quot;,,&quot;Porsche&quot;,30000,&quot;airbag&quot;,,&quot;left&quot;,&quot;white&quot;&quot;Porsche&quot;,30000,&quot;airbag&quot;,,&quot;right&quot;,&quot;gray&quot;&quot;Porsche&quot;,30000,&quot;dashboard&quot;,,&quot;left&quot;,&quot;gray&quot;&quot;Porsche&quot;,30000,&quot;dashboard&quot;,,&quot;right&quot;,&quot;black&quot;</code></pre><h4 id=\"example-9\">Example 9</h4><p>You can also unwind arrays blanking the repeated fields.</p><pre><code class=\"lang-js\"><span class=\"pl-k\">const</span> { Parser, <span class=\"hljs-attr\">transforms</span>: { unwind }  } = <span class=\"pl-c1\">require</span>(<span class=\"pl-s\">&apos;json2csv&apos;</span>);<span class=\"pl-k\">const</span> myCars = [  {    <span class=\"pl-s\">&quot;carModel&quot;</span>: <span class=\"pl-s\">&quot;BMW&quot;</span>,    <span class=\"pl-s\">&quot;price&quot;</span>: <span class=\"hljs-number\">15000</span>,    <span class=\"pl-s\">&quot;items&quot;</span>: [      {        <span class=\"pl-s\">&quot;name&quot;</span>: <span class=\"pl-s\">&quot;airbag&quot;</span>,        <span class=\"pl-s\">&quot;color&quot;</span>: <span class=\"pl-s\">&quot;white&quot;</span>      }, {        <span class=\"pl-s\">&quot;name&quot;</span>: <span class=\"pl-s\">&quot;dashboard&quot;</span>,        <span class=\"pl-s\">&quot;color&quot;</span>: <span class=\"pl-s\">&quot;black&quot;</span>      }    ]  }, {    <span class=\"pl-s\">&quot;carModel&quot;</span>: <span class=\"pl-s\">&quot;Porsche&quot;</span>,    <span class=\"pl-s\">&quot;price&quot;</span>: <span class=\"hljs-number\">30000</span>,    <span class=\"pl-s\">&quot;items&quot;</span>: [      {        <span class=\"pl-s\">&quot;name&quot;</span>: <span class=\"pl-s\">&quot;airbag&quot;</span>,        <span class=\"pl-s\">&quot;items&quot;</span>: [          {            <span class=\"pl-s\">&quot;position&quot;</span>: <span class=\"pl-s\">&quot;left&quot;</span>,            <span class=\"pl-s\">&quot;color&quot;</span>: <span class=\"pl-s\">&quot;white&quot;</span>          }, {            <span class=\"pl-s\">&quot;position&quot;</span>: <span class=\"pl-s\">&quot;right&quot;</span>,            <span class=\"pl-s\">&quot;color&quot;</span>: <span class=\"pl-s\">&quot;gray&quot;</span>          }        ]      }, {        <span class=\"pl-s\">&quot;name&quot;</span>: <span class=\"pl-s\">&quot;dashboard&quot;</span>,        <span class=\"pl-s\">&quot;items&quot;</span>: [          {            <span class=\"pl-s\">&quot;position&quot;</span>: <span class=\"pl-s\">&quot;left&quot;</span>,            <span class=\"pl-s\">&quot;color&quot;</span>: <span class=\"pl-s\">&quot;gray&quot;</span>          }, {            <span class=\"pl-s\">&quot;position&quot;</span>: <span class=\"pl-s\">&quot;right&quot;</span>,            <span class=\"pl-s\">&quot;color&quot;</span>: <span class=\"pl-s\">&quot;black&quot;</span>          }        ]      }    ]  }];<span class=\"pl-k\">const</span> fields = [<span class=\"pl-s\">&apos;carModel&apos;</span>, <span class=\"pl-s\">&apos;price&apos;</span>, <span class=\"pl-s\">&apos;items.name&apos;</span>, <span class=\"pl-s\">&apos;items.color&apos;</span>, <span class=\"pl-s\">&apos;items.items.position&apos;</span>, <span class=\"pl-s\">&apos;items.items.color&apos;</span>];<span class=\"pl-k\">const</span> transforms = [unwind({ <span class=\"hljs-attr\">paths</span>: [<span class=\"pl-s\">&apos;items&apos;</span>, <span class=\"pl-s\">&apos;items.items&apos;</span>], <span class=\"hljs-attr\">blankOut</span>: <span class=\"pl-c1\">true</span> })];<span class=\"pl-k\">const</span> json2csvParser = <span class=\"pl-k\">new</span> Parser({ fields, transforms });<span class=\"pl-k\">const</span> csv = json2csvParser.parse(myCars);<span class=\"pl-c1\">console</span>.log(csv);</code></pre><p>will output to console</p><pre><code>&quot;carModel&quot;,&quot;price&quot;,&quot;items.name&quot;,&quot;items.color&quot;,&quot;items.items.position&quot;,&quot;items.items.color&quot;&quot;BMW&quot;,15000,&quot;airbag&quot;,&quot;white&quot;,,,,&quot;dashboard&quot;,&quot;black&quot;,,&quot;Porsche&quot;,30000,&quot;airbag&quot;,,&quot;left&quot;,&quot;white&quot;,,,,&quot;right&quot;,&quot;gray&quot;,,&quot;dashboard&quot;,,&quot;left&quot;,&quot;gray&quot;,,,,&quot;right&quot;,&quot;black&quot;</code></pre><h3 id=\"migrations\">Migrations</h3><h4 id=\"migrating-from-3.x-to-4.x\">Migrating from 3.X to 4.X</h4><p>What in 3.X used to be</p><pre><code class=\"lang-js\"><span class=\"pl-k\">const</span> json2csv = <span class=\"pl-c1\">require</span>(<span class=\"pl-s\">&apos;json2csv&apos;</span>);<span class=\"pl-k\">const</span> csv = json2csv({ <span class=\"hljs-attr\">data</span>: myData, <span class=\"hljs-attr\">fields</span>: myFields, <span class=\"hljs-attr\">unwindPath</span>: paths, ... });</code></pre><p>should be replaced by</p><pre><code class=\"lang-js\"><span class=\"pl-k\">const</span> { Parser } = <span class=\"pl-c1\">require</span>(<span class=\"pl-s\">&apos;json2csv&apos;</span>);<span class=\"pl-k\">const</span> json2csvParser = <span class=\"pl-k\">new</span> Parser({ <span class=\"hljs-attr\">fields</span>: myFields, <span class=\"hljs-attr\">unwind</span>: paths, ... });<span class=\"pl-k\">const</span> csv = json2csvParser.parse(myData);</code></pre><p>or the convenience method</p><pre><code class=\"lang-js\"><span class=\"pl-k\">const</span> json2csv = <span class=\"pl-c1\">require</span>(<span class=\"pl-s\">&apos;json2csv&apos;</span>);<span class=\"pl-k\">const</span> csv = json2csv.parse(myData, { <span class=\"hljs-attr\">fields</span>: myFields, <span class=\"hljs-attr\">unwind</span>: paths, ... });</code></pre><p>Please note that many of the configuration parameters have been slightly renamed. Please check one by one that all your parameters are correct.You can se the documentation for json2csv 3.11.5 <a href=\"https://github.com/zemirco/json2csv/blob/v3.11.5/README.md\">here</a>.</p><h4 id=\"migrating-from-4.x-to-5.x\">Migrating from 4.X to 5.X</h4><p>In the CLI, the config file option, <code>-c</code>, used to be a list of fields and now it&apos;s expected to be a full configuration object.</p><p>The <code>stringify</code> option hass been removed.</p><p><code>doubleQuote</code> has been renamed to <code>escapedQuote</code>.</p><p>The <code>unwind</code> and <code>flatten</code> -related options has been moved to their own transforms.</p><p>What used to be</p><pre><code class=\"lang-js\"><span class=\"pl-k\">const</span> { Parser } = <span class=\"pl-c1\">require</span>(<span class=\"pl-s\">&apos;json2csv&apos;</span>);<span class=\"pl-k\">const</span> json2csvParser = <span class=\"pl-k\">new</span> Parser({ <span class=\"hljs-attr\">unwind</span>: paths, <span class=\"hljs-attr\">unwindBlank</span>: <span class=\"pl-c1\">true</span>, <span class=\"hljs-attr\">flatten</span>: <span class=\"pl-c1\">true</span>, <span class=\"hljs-attr\">flattenSeparator</span>: <span class=\"pl-s\">&apos;__&apos;</span> });<span class=\"pl-k\">const</span> csv = json2csvParser.parse(myData);</code></pre><p>should be replaced by</p><pre><code class=\"lang-js\"><span class=\"pl-k\">const</span> { Parser, <span class=\"hljs-attr\">transforms</span>: { unwind, flatten } } = <span class=\"pl-c1\">require</span>(<span class=\"pl-s\">&apos;json2csv&apos;</span>);<span class=\"pl-k\">const</span> json2csvParser = <span class=\"pl-k\">new</span> Parser({ <span class=\"hljs-attr\">transforms</span>: [unwind({ paths, <span class=\"hljs-attr\">blankOut</span>: <span class=\"pl-c1\">true</span> }), flatten(<span class=\"pl-s\">&apos;__&apos;</span>)] });<span class=\"pl-k\">const</span> csv = json2csvParser.parse(myData);</code></pre><p>You can se the documentation for json2csv v4.X.X <a href=\"https://github.com/zemirco/json2csv/blob/v4/README.md\">here</a>.</p><h2 id=\"known-gotchas\">Known Gotchas</h2><h3 id=\"excel-support\">Excel support</h3><h4 id=\"avoiding-excel-autoformatting\">Avoiding excel autoformatting</h4><p>Excel tries to automatically detect the format of every field (number, date, string, etc.) regardless of whether the field is quoted or not.</p><p>This might produce few undesired effects with, for example, serial numbers:</p><ul><li>Large numbers are displayed using scientific notation</li><li>Leading zeros are stripped.</li></ul><p>Enabling the <code>excelString</code> option produces an Excel-specific CSV file that forces Excel to interpret string fields as strings. Please note that the CSV will look incorrect if viewing it somewhere else than Excel.</p><h4 id=\"avoiding-csv-injection\">Avoiding CSV injection</h4><p>As part of Excel automatically format detection, fields regarded as formulas (starting with <code>=</code>, <code>+</code>, <code>-</code> or <code>@</code>) are interpreted regardless of whether the field is quoted or not, creating a security risk (see <a href=\"https://www.owasp.org/index.php/CSV_Injection\">CSV Injection</a>.</p><p>This issue has nothing to do with the CSV format, since CSV knows nothing about formulas, but with how Excel parses CSV files.</p><p>Enabling the <code>excelString</code> option produces an Excel-specific CSV file that forces Excel to interpret string fields as strings. Please note that the CSV will look incorrect if viewing it somewhere else than Excel.</p><h4 id=\"preserving-new-lines\">Preserving new lines</h4><p>Excel only recognizes <code>\\r\\n</code> as valid new line inside a cell.</p><h4 id=\"unicode-support\">Unicode Support</h4><p>Excel can display Unicode correctly (just setting the <code>withBOM</code> option to true). However, Excel can&apos;t save unicode so, if you perform any changes to the CSV and save it from Excel, the Unicode characters will not be displayed correctly.</p><h3 id=\"powershell-escaping\">PowerShell escaping</h3><p>PowerShell do some estrange double quote escaping escaping which results on each line of the CSV missing the first and last quote if outputting the result directly to stdout. Instead of that, it&apos;s advisable that you write the result directly to a file.</p><h2 id=\"building\">Building</h2><p>json2csv is packaged using <code>rollup</code>. You can generate the packages running:</p><pre><code class=\"lang-sh\">npm run build</code></pre><p>which generates 3 files under the <code>dist folder</code>:</p><ul><li><code>json2csv.umd.js</code> UMD module transpiled to ES5</li><li><code>json2csv.esm.js</code> ES5 module (import/export)</li><li><code>json2csv.cjs.js</code> CommonJS module</li></ul><p>When you use packaging tools like webpack and such, they know which version to use depending on your configuration.</p><h2 id=\"testing\">Testing</h2><p>Run the folowing command to check the code style.</p><pre><code class=\"lang-sh\">$ npm run lint</code></pre><p>Run the following command to run the tests and return coverage</p><pre><code class=\"lang-sh\">$ npm run <span class=\"pl-c1\">test</span>-with-coverage</code></pre><h2 id=\"contributors\">Contributors</h2><p>After you clone the repository you just need to install the required packages for development by runnning following command under json2csv dir.</p><pre><code class=\"lang-sh\">$ npm install</code></pre><p>Before making any pull request please ensure sure that your code is formatted, test are passing and test coverage haven&apos;t decreased. (See <a href=\"#testing\">Testing</a>)</p><h2 id=\"license\">License</h2><p>See <a href=\"https://github.com/zemirco/json2csv/blob/master/LICENSE.md\">LICENSE.md</a>.</p>        </div>      </div>    </div>  </body></html>",
  "embeddings": []
}
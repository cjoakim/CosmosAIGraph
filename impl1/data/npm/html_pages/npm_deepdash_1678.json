{
  "libtype": "npm",
  "libname": "deepdash",
  "url": "https://deepdash.io",
  "html": "<!DOCTYPE html><html lang=\"en\" dir=\"ltr\"><head><meta charSet=\"utf-8\"/><meta name=\"theme-color\" content=\"#184469\"/><script async=\"\" src=\"https://www.googletagmanager.com/gtag/js?id=UA-134243932-1\"></script><link rel=\"stylesheet\" href=\"https://fonts.googleapis.com/css?family=Roboto:300,400,500\"/><script async=\"\" src=\"https://www.googletagmanager.com/gtag/js?id=UA-134243932-1\"></script><script>            window.dataLayer = window.dataLayer || [];            function gtag(){dataLayer.push(arguments);}            gtag('js', new Date());            gtag('config', 'UA-134243932-1');          </script><meta charSet=\"utf-8\"/><meta name=\"viewport\" content=\"minimum-scale=1, initial-scale=1, width=device-width, shrink-to-fit=no\"/><title>Deepdash - easy search, filter and process deep nested data</title><link rel=\"icon\" type=\"image/png\" href=\"/favicon.png\"/><link rel=\"stylesheet\" href=\"https://fonts.googleapis.com/css?family=Roboto:300,400,500\"/><link rel=\"stylesheet\" href=\"https://fonts.googleapis.com/icon?family=Material+Icons\"/><meta name=\"next-head-count\" content=\"6\"/><link rel=\"preload\" href=\"/_next/static/css/ac44fd87a7b93bd125b2.css\" as=\"style\"/><link rel=\"stylesheet\" href=\"/_next/static/css/ac44fd87a7b93bd125b2.css\"/><link rel=\"preload\" href=\"/_next/static/css/598aaa2d1ecad83c94de.css\" as=\"style\"/><link rel=\"stylesheet\" href=\"/_next/static/css/598aaa2d1ecad83c94de.css\"/><link rel=\"preload\" href=\"/_next/static/chunks/main-ee8140d3c2c9a56c2c3b.js\" as=\"script\"/><link rel=\"preload\" href=\"/_next/static/chunks/webpack-a2db5744fee61346eaac.js\" as=\"script\"/><link rel=\"preload\" href=\"/_next/static/chunks/framework.52d24885832babe89a39.js\" as=\"script\"/><link rel=\"preload\" href=\"/_next/static/chunks/29107295.bb4a59f3aaca2a61324a.js\" as=\"script\"/><link rel=\"preload\" href=\"/_next/static/chunks/commons.0589e97004bfde00fcd5.js\" as=\"script\"/><link rel=\"preload\" href=\"/_next/static/chunks/d847c5461cf61e090c725137ce8decfd2990fa67.e73073d02f7dff5ff747.js\" as=\"script\"/><link rel=\"preload\" href=\"/_next/static/chunks/pages/_app-4fb5b0e2811f031bbb19.js\" as=\"script\"/><link rel=\"preload\" href=\"/_next/static/chunks/a13dfd38eed438bfd13ab633581e751d2d291663.b803e64f08d2d9b78420.js\" as=\"script\"/><link rel=\"preload\" href=\"/_next/static/chunks/pages/index-ae4fa1df72e7b4847c83.js\" as=\"script\"/><style id=\"jss-server-side\">html {  box-sizing: border-box;  -webkit-font-smoothing: antialiased;  -moz-osx-font-smoothing: grayscale;}*, *::before, *::after {  box-sizing: inherit;}strong, b {  font-weight: 700;}body {  color: rgba(0, 0, 0, 0.87);  margin: 0;  font-size: 1rem;  font-family: Times New Roman;  font-weight: 400;  line-height: 1.43;  background-color: #fafafa;}@media print {  body {    background-color: #fff;  }}body::backdrop {  background-color: #fafafa;}.MuiList-root {  margin: 0;  padding: 0;  position: relative;  list-style: none;}.MuiList-padding {  padding-top: 8px;  padding-bottom: 8px;}.MuiList-subheader {  padding-top: 0;}.MuiButtonBase-root {  color: inherit;  border: 0;  cursor: pointer;  margin: 0;  display: inline-flex;  outline: 0;  padding: 0;  position: relative;  align-items: center;  user-select: none;  border-radius: 0;  vertical-align: middle;  -moz-appearance: none;  justify-content: center;  text-decoration: none;  background-color: transparent;  -webkit-appearance: none;  -webkit-tap-highlight-color: transparent;}.MuiButtonBase-root::-moz-focus-inner {  border-style: none;}.MuiButtonBase-root.Mui-disabled {  cursor: default;  pointer-events: none;}@media print {  .MuiButtonBase-root {    color-adjust: exact;  }}  .MuiListItem-root {    width: 100%;    display: flex;    position: relative;    box-sizing: border-box;    text-align: left;    align-items: center;    padding-top: 8px;    padding-bottom: 8px;    justify-content: flex-start;    text-decoration: none;  }  .MuiListItem-root.Mui-focusVisible {    background-color: rgba(0, 0, 0, 0.08);  }  .MuiListItem-root.Mui-selected, .MuiListItem-root.Mui-selected:hover {    background-color: rgba(0, 0, 0, 0.08);  }  .MuiListItem-root.Mui-disabled {    opacity: 0.5;  }  .MuiListItem-container {    position: relative;  }  .MuiListItem-dense {    padding-top: 4px;    padding-bottom: 4px;  }  .MuiListItem-alignItemsFlexStart {    align-items: flex-start;  }  .MuiListItem-divider {    border-bottom: 1px solid rgba(0, 0, 0, 0.12);    background-clip: padding-box;  }  .MuiListItem-gutters {    padding-left: 16px;    padding-right: 16px;  }  .MuiListItem-button {    transition: background-color 150ms cubic-bezier(0.4, 0, 0.2, 1) 0ms;  }  .MuiListItem-button:hover {    text-decoration: none;    background-color: rgba(0, 0, 0, 0.04);  }@media (hover: none) {  .MuiListItem-button:hover {    background-color: transparent;  }}  .MuiListItem-secondaryAction {    padding-right: 48px;  }  .MuiListItemIcon-root {    color: rgba(0, 0, 0, 0.54);    display: inline-flex;    min-width: 56px;    flex-shrink: 0;  }  .MuiListItemIcon-alignItemsFlexStart {    margin-top: 8px;  }  .MuiTypography-root {    margin: 0;  }  .MuiTypography-body2 {    font-size: 1rem;    font-family: Times New Roman;    font-weight: 400;    line-height: 1.43;  }  .MuiTypography-body1 {    font-size: 1.1428571428571428rem;    font-family: Times New Roman;    font-weight: 400;    line-height: 1.5;  }  .MuiTypography-caption {    font-size: 0.8571428571428571rem;    font-family: Times New Roman;    font-weight: 400;    line-height: 1.66;  }  .MuiTypography-button {    font-size: 1rem;    font-family: Times New Roman;    font-weight: 500;    line-height: 1.75;    text-transform: uppercase;  }  .MuiTypography-h1 {    font-size: 6.857142857142857rem;    font-family: Times New Roman;    font-weight: 300;    line-height: 1.167;  }  .MuiTypography-h2 {    font-size: 4.285714285714286rem;    font-family: Times New Roman;    font-weight: 300;    line-height: 1.2;  }  .MuiTypography-h3 {    font-size: 3.4285714285714284rem;    font-family: Times New Roman;    font-weight: 400;    line-height: 1.167;  }  .MuiTypography-h4 {    font-size: 2.4285714285714284rem;    font-family: Times New Roman;    font-weight: 400;    line-height: 1.235;  }  .MuiTypography-h5 {    font-size: 1.7142857142857142rem;    font-family: Times New Roman;    font-weight: 400;    line-height: 1.334;  }  .MuiTypography-h6 {    font-size: 1.4285714285714286rem;    font-family: Times New Roman;    font-weight: 500;    line-height: 1.6;  }  .MuiTypography-subtitle1 {    font-size: 1.1428571428571428rem;    font-family: Times New Roman;    font-weight: 400;    line-height: 1.75;  }  .MuiTypography-subtitle2 {    font-size: 1rem;    font-family: Times New Roman;    font-weight: 500;    line-height: 1.57;  }  .MuiTypography-overline {    font-size: 0.8571428571428571rem;    font-family: Times New Roman;    font-weight: 400;    line-height: 2.66;    text-transform: uppercase;  }  .MuiTypography-srOnly {    width: 1px;    height: 1px;    overflow: hidden;    position: absolute;  }  .MuiTypography-alignLeft {    text-align: left;  }  .MuiTypography-alignCenter {    text-align: center;  }  .MuiTypography-alignRight {    text-align: right;  }  .MuiTypography-alignJustify {    text-align: justify;  }  .MuiTypography-noWrap {    overflow: hidden;    white-space: nowrap;    text-overflow: ellipsis;  }  .MuiTypography-gutterBottom {    margin-bottom: 0.35em;  }  .MuiTypography-paragraph {    margin-bottom: 16px;  }  .MuiTypography-colorInherit {    color: inherit;  }  .MuiTypography-colorPrimary {    color: #184469;  }  .MuiTypography-colorSecondary {    color: rgba(52, 146, 255, 1);  }  .MuiTypography-colorTextPrimary {    color: rgba(0, 0, 0, 0.87);  }  .MuiTypography-colorTextSecondary {    color: rgba(0, 0, 0, 0.54);  }  .MuiTypography-colorError {    color: rgba(244, 54, 120, 1);  }  .MuiTypography-displayInline {    display: inline;  }  .MuiTypography-displayBlock {    display: block;  }  .MuiListItemText-root {    flex: 1 1 auto;    min-width: 0;    margin-top: 4px;    margin-bottom: 4px;  }  .MuiListItemText-multiline {    margin-top: 6px;    margin-bottom: 6px;  }  .MuiListItemText-inset {    padding-left: 56px;  }  .MuiSvgIcon-root {    fill: currentColor;    width: 1em;    height: 1em;    display: inline-block;    font-size: 1.7142857142857142rem;    transition: fill 200ms cubic-bezier(0.4, 0, 0.2, 1) 0ms;    flex-shrink: 0;    user-select: none;  }  .MuiSvgIcon-colorPrimary {    color: #184469;  }  .MuiSvgIcon-colorSecondary {    color: rgba(52, 146, 255, 1);  }  .MuiSvgIcon-colorAction {    color: rgba(0, 0, 0, 0.54);  }  .MuiSvgIcon-colorError {    color: rgba(244, 54, 120, 1);  }  .MuiSvgIcon-colorDisabled {    color: rgba(0, 0, 0, 0.26);  }  .MuiSvgIcon-fontSizeInherit {    font-size: inherit;  }  .MuiSvgIcon-fontSizeSmall {    font-size: 1.4285714285714286rem;  }  .MuiSvgIcon-fontSizeLarge {    font-size: 2.5rem;  }  .MuiPaper-root {    color: rgba(0, 0, 0, 0.87);    transition: box-shadow 300ms cubic-bezier(0.4, 0, 0.2, 1) 0ms;    background-color: #fff;  }  .MuiPaper-rounded {    border-radius: 4px;  }  .MuiPaper-outlined {    border: 1px solid rgba(0, 0, 0, 0.12);  }  .MuiPaper-elevation0 {    box-shadow: none;  }  .MuiPaper-elevation1 {    box-shadow: 0px 2px 1px -1px rgba(0,0,0,0.2),0px 1px 1px 0px rgba(0,0,0,0.14),0px 1px 3px 0px rgba(0,0,0,0.12);  }  .MuiPaper-elevation2 {    box-shadow: 0px 3px 1px -2px rgba(0,0,0,0.2),0px 2px 2px 0px rgba(0,0,0,0.14),0px 1px 5px 0px rgba(0,0,0,0.12);  }  .MuiPaper-elevation3 {    box-shadow: 0px 3px 3px -2px rgba(0,0,0,0.2),0px 3px 4px 0px rgba(0,0,0,0.14),0px 1px 8px 0px rgba(0,0,0,0.12);  }  .MuiPaper-elevation4 {    box-shadow: 0px 2px 4px -1px rgba(0,0,0,0.2),0px 4px 5px 0px rgba(0,0,0,0.14),0px 1px 10px 0px rgba(0,0,0,0.12);  }  .MuiPaper-elevation5 {    box-shadow: 0px 3px 5px -1px rgba(0,0,0,0.2),0px 5px 8px 0px rgba(0,0,0,0.14),0px 1px 14px 0px rgba(0,0,0,0.12);  }  .MuiPaper-elevation6 {    box-shadow: 0px 3px 5px -1px rgba(0,0,0,0.2),0px 6px 10px 0px rgba(0,0,0,0.14),0px 1px 18px 0px rgba(0,0,0,0.12);  }  .MuiPaper-elevation7 {    box-shadow: 0px 4px 5px -2px rgba(0,0,0,0.2),0px 7px 10px 1px rgba(0,0,0,0.14),0px 2px 16px 1px rgba(0,0,0,0.12);  }  .MuiPaper-elevation8 {    box-shadow: 0px 5px 5px -3px rgba(0,0,0,0.2),0px 8px 10px 1px rgba(0,0,0,0.14),0px 3px 14px 2px rgba(0,0,0,0.12);  }  .MuiPaper-elevation9 {    box-shadow: 0px 5px 6px -3px rgba(0,0,0,0.2),0px 9px 12px 1px rgba(0,0,0,0.14),0px 3px 16px 2px rgba(0,0,0,0.12);  }  .MuiPaper-elevation10 {    box-shadow: 0px 6px 6px -3px rgba(0,0,0,0.2),0px 10px 14px 1px rgba(0,0,0,0.14),0px 4px 18px 3px rgba(0,0,0,0.12);  }  .MuiPaper-elevation11 {    box-shadow: 0px 6px 7px -4px rgba(0,0,0,0.2),0px 11px 15px 1px rgba(0,0,0,0.14),0px 4px 20px 3px rgba(0,0,0,0.12);  }  .MuiPaper-elevation12 {    box-shadow: 0px 7px 8px -4px rgba(0,0,0,0.2),0px 12px 17px 2px rgba(0,0,0,0.14),0px 5px 22px 4px rgba(0,0,0,0.12);  }  .MuiPaper-elevation13 {    box-shadow: 0px 7px 8px -4px rgba(0,0,0,0.2),0px 13px 19px 2px rgba(0,0,0,0.14),0px 5px 24px 4px rgba(0,0,0,0.12);  }  .MuiPaper-elevation14 {    box-shadow: 0px 7px 9px -4px rgba(0,0,0,0.2),0px 14px 21px 2px rgba(0,0,0,0.14),0px 5px 26px 4px rgba(0,0,0,0.12);  }  .MuiPaper-elevation15 {    box-shadow: 0px 8px 9px -5px rgba(0,0,0,0.2),0px 15px 22px 2px rgba(0,0,0,0.14),0px 6px 28px 5px rgba(0,0,0,0.12);  }  .MuiPaper-elevation16 {    box-shadow: 0px 8px 10px -5px rgba(0,0,0,0.2),0px 16px 24px 2px rgba(0,0,0,0.14),0px 6px 30px 5px rgba(0,0,0,0.12);  }  .MuiPaper-elevation17 {    box-shadow: 0px 8px 11px -5px rgba(0,0,0,0.2),0px 17px 26px 2px rgba(0,0,0,0.14),0px 6px 32px 5px rgba(0,0,0,0.12);  }  .MuiPaper-elevation18 {    box-shadow: 0px 9px 11px -5px rgba(0,0,0,0.2),0px 18px 28px 2px rgba(0,0,0,0.14),0px 7px 34px 6px rgba(0,0,0,0.12);  }  .MuiPaper-elevation19 {    box-shadow: 0px 9px 12px -6px rgba(0,0,0,0.2),0px 19px 29px 2px rgba(0,0,0,0.14),0px 7px 36px 6px rgba(0,0,0,0.12);  }  .MuiPaper-elevation20 {    box-shadow: 0px 10px 13px -6px rgba(0,0,0,0.2),0px 20px 31px 3px rgba(0,0,0,0.14),0px 8px 38px 7px rgba(0,0,0,0.12);  }  .MuiPaper-elevation21 {    box-shadow: 0px 10px 13px -6px rgba(0,0,0,0.2),0px 21px 33px 3px rgba(0,0,0,0.14),0px 8px 40px 7px rgba(0,0,0,0.12);  }  .MuiPaper-elevation22 {    box-shadow: 0px 10px 14px -6px rgba(0,0,0,0.2),0px 22px 35px 3px rgba(0,0,0,0.14),0px 8px 42px 7px rgba(0,0,0,0.12);  }  .MuiPaper-elevation23 {    box-shadow: 0px 11px 14px -7px rgba(0,0,0,0.2),0px 23px 36px 3px rgba(0,0,0,0.14),0px 9px 44px 8px rgba(0,0,0,0.12);  }  .MuiPaper-elevation24 {    box-shadow: 0px 11px 15px -7px rgba(0,0,0,0.2),0px 24px 38px 3px rgba(0,0,0,0.14),0px 9px 46px 8px rgba(0,0,0,0.12);  }  .MuiAppBar-root {    width: 100%;    display: flex;    z-index: 1100;    box-sizing: border-box;    flex-shrink: 0;    flex-direction: column;  }  .MuiAppBar-positionFixed {    top: 0;    left: auto;    right: 0;    position: fixed;  }@media print {  .MuiAppBar-positionFixed {    position: absolute;  }}  .MuiAppBar-positionAbsolute {    top: 0;    left: auto;    right: 0;    position: absolute;  }  .MuiAppBar-positionSticky {    top: 0;    left: auto;    right: 0;    position: sticky;  }  .MuiAppBar-positionStatic {    position: static;  }  .MuiAppBar-positionRelative {    position: relative;  }  .MuiAppBar-colorDefault {    color: rgba(0, 0, 0, 0.87);    background-color: #f5f5f5;  }  .MuiAppBar-colorPrimary {    color: #fff;    background-color: #184469;  }  .MuiAppBar-colorSecondary {    color: #fff;    background-color: rgba(52, 146, 255, 1);  }  .MuiAppBar-colorInherit {    color: inherit;  }  .MuiAppBar-colorTransparent {    color: inherit;    background-color: transparent;  }  .MuiToolbar-root {    display: flex;    position: relative;    align-items: center;  }  .MuiToolbar-gutters {    padding-left: 16px;    padding-right: 16px;  }@media (min-width:600px) {  .MuiToolbar-gutters {    padding-left: 24px;    padding-right: 24px;  }}  .MuiToolbar-regular {    min-height: 56px;  }@media (min-width:0px) and (orientation: landscape) {  .MuiToolbar-regular {    min-height: 48px;  }}@media (min-width:600px) {  .MuiToolbar-regular {    min-height: 64px;  }}  .MuiToolbar-dense {    min-height: 48px;  }  .MuiIconButton-root {    flex: 0 0 auto;    color: rgba(0, 0, 0, 0.54);    padding: 12px;    overflow: visible;    font-size: 1.7142857142857142rem;    text-align: center;    transition: background-color 150ms cubic-bezier(0.4, 0, 0.2, 1) 0ms;    border-radius: 50%;  }  .MuiIconButton-root:hover {    background-color: rgba(0, 0, 0, 0.04);  }  .MuiIconButton-root.Mui-disabled {    color: rgba(0, 0, 0, 0.26);    background-color: transparent;  }@media (hover: none) {  .MuiIconButton-root:hover {    background-color: transparent;  }}  .MuiIconButton-edgeStart {    margin-left: -12px;  }  .MuiIconButton-sizeSmall.MuiIconButton-edgeStart {    margin-left: -3px;  }  .MuiIconButton-edgeEnd {    margin-right: -12px;  }  .MuiIconButton-sizeSmall.MuiIconButton-edgeEnd {    margin-right: -3px;  }  .MuiIconButton-colorInherit {    color: inherit;  }  .MuiIconButton-colorPrimary {    color: #184469;  }  .MuiIconButton-colorPrimary:hover {    background-color: rgba(24, 68, 105, 0.04);  }@media (hover: none) {  .MuiIconButton-colorPrimary:hover {    background-color: transparent;  }}  .MuiIconButton-colorSecondary {    color: rgba(52, 146, 255, 1);  }  .MuiIconButton-colorSecondary:hover {    background-color: rgba(52, 146, 255, 0.04);  }@media (hover: none) {  .MuiIconButton-colorSecondary:hover {    background-color: transparent;  }}  .MuiIconButton-sizeSmall {    padding: 3px;    font-size: 1.2857142857142858rem;  }  .MuiIconButton-label {    width: 100%;    display: flex;    align-items: inherit;    justify-content: inherit;  }@keyframes mui-auto-fill {}@keyframes mui-auto-fill-cancel {}  .MuiInputBase-root {    color: rgba(0, 0, 0, 0.87);    cursor: text;    display: inline-flex;    position: relative;    font-size: 1.1428571428571428rem;    box-sizing: border-box;    align-items: center;    font-family: Times New Roman;    font-weight: 400;    line-height: 1.1876em;  }  .MuiInputBase-root.Mui-disabled {    color: rgba(0, 0, 0, 0.38);    cursor: default;  }  .MuiInputBase-multiline {    padding: 6px 0 7px;  }  .MuiInputBase-multiline.MuiInputBase-marginDense {    padding-top: 3px;  }  .MuiInputBase-fullWidth {    width: 100%;  }  .MuiInputBase-input {    font: inherit;    color: currentColor;    width: 100%;    border: 0;    height: 1.1876em;    margin: 0;    display: block;    padding: 6px 0 7px;    min-width: 0;    background: none;    box-sizing: content-box;    animation-name: mui-auto-fill-cancel;    letter-spacing: inherit;    animation-duration: 10ms;    -webkit-tap-highlight-color: transparent;  }  .MuiInputBase-input::-webkit-input-placeholder {    color: currentColor;    opacity: 0.42;    transition: opacity 200ms cubic-bezier(0.4, 0, 0.2, 1) 0ms;  }  .MuiInputBase-input::-moz-placeholder {    color: currentColor;    opacity: 0.42;    transition: opacity 200ms cubic-bezier(0.4, 0, 0.2, 1) 0ms;  }  .MuiInputBase-input:-ms-input-placeholder {    color: currentColor;    opacity: 0.42;    transition: opacity 200ms cubic-bezier(0.4, 0, 0.2, 1) 0ms;  }  .MuiInputBase-input::-ms-input-placeholder {    color: currentColor;    opacity: 0.42;    transition: opacity 200ms cubic-bezier(0.4, 0, 0.2, 1) 0ms;  }  .MuiInputBase-input:focus {    outline: 0;  }  .MuiInputBase-input:invalid {    box-shadow: none;  }  .MuiInputBase-input::-webkit-search-decoration {    -webkit-appearance: none;  }  .MuiInputBase-input.Mui-disabled {    opacity: 1;  }  .MuiInputBase-input:-webkit-autofill {    animation-name: mui-auto-fill;    animation-duration: 5000s;  }  label[data-shrink=false] + .MuiInputBase-formControl .MuiInputBase-input::-webkit-input-placeholder {    opacity: 0 !important;  }  label[data-shrink=false] + .MuiInputBase-formControl .MuiInputBase-input::-moz-placeholder {    opacity: 0 !important;  }  label[data-shrink=false] + .MuiInputBase-formControl .MuiInputBase-input:-ms-input-placeholder {    opacity: 0 !important;  }  label[data-shrink=false] + .MuiInputBase-formControl .MuiInputBase-input::-ms-input-placeholder {    opacity: 0 !important;  }  label[data-shrink=false] + .MuiInputBase-formControl .MuiInputBase-input:focus::-webkit-input-placeholder {    opacity: 0.42;  }  label[data-shrink=false] + .MuiInputBase-formControl .MuiInputBase-input:focus::-moz-placeholder {    opacity: 0.42;  }  label[data-shrink=false] + .MuiInputBase-formControl .MuiInputBase-input:focus:-ms-input-placeholder {    opacity: 0.42;  }  label[data-shrink=false] + .MuiInputBase-formControl .MuiInputBase-input:focus::-ms-input-placeholder {    opacity: 0.42;  }  .MuiInputBase-inputMarginDense {    padding-top: 3px;  }  .MuiInputBase-inputMultiline {    height: auto;    resize: none;    padding: 0;  }  .MuiInputBase-inputTypeSearch {    -moz-appearance: textfield;    -webkit-appearance: textfield;  }  .jss6 {    color: #FFF;    opacity: 0.9;    z-index: 1199;  }  .jss6:hover {    opacity: 1;  }  .jss7 {    flex-grow: 1;  }  .jss8 {    margin-left: -12px;    margin-right: 0;  }  .jss9 {    top: 4px;    height: 24px;    display: none;    position: relative;    margin-right: 0px;  }@media (min-width:960px) {  .jss9 {    display: block;  }}  .jss10 {    top: 2px;    height: 24px;    display: block;    position: relative;    margin-right: 0px;  }@media (min-width:960px) {  .jss10 {    display: none;  }}  .MuiDivider-root {    border: none;    height: 1px;    margin: 0;    flex-shrink: 0;    background-color: rgba(0, 0, 0, 0.12);  }  .MuiDivider-absolute {    left: 0;    width: 100%;    bottom: 0;    position: absolute;  }  .MuiDivider-inset {    margin-left: 72px;  }  .MuiDivider-light {    background-color: rgba(0, 0, 0, 0.08);  }  .MuiDivider-middle {    margin-left: 16px;    margin-right: 16px;  }  .MuiDivider-vertical {    width: 1px;    height: 100%;  }  .MuiDivider-flexItem {    height: auto;    align-self: stretch;  }  .MuiInput-root {    position: relative;  }  label + .MuiInput-formControl {    margin-top: 16px;  }  .MuiInput-colorSecondary.MuiInput-underline:after {    border-bottom-color: rgba(52, 146, 255, 1);  }  .MuiInput-underline:after {    left: 0;    right: 0;    bottom: 0;    content: \"\";    position: absolute;    transform: scaleX(0);    transition: transform 200ms cubic-bezier(0.0, 0, 0.2, 1) 0ms;    border-bottom: 2px solid #184469;    pointer-events: none;  }  .MuiInput-underline.Mui-focused:after {    transform: scaleX(1);  }  .MuiInput-underline.Mui-error:after {    transform: scaleX(1);    border-bottom-color: rgba(244, 54, 120, 1);  }  .MuiInput-underline:before {    left: 0;    right: 0;    bottom: 0;    content: \"\\00a0\";    position: absolute;    transition: border-bottom-color 200ms cubic-bezier(0.4, 0, 0.2, 1) 0ms;    border-bottom: 1px solid rgba(0, 0, 0, 0.42);    pointer-events: none;  }  .MuiInput-underline:hover:not(.Mui-disabled):before {    border-bottom: 2px solid rgba(0, 0, 0, 0.87);  }  .MuiInput-underline.Mui-disabled:before {    border-bottom-style: dotted;  }@media (hover: none) {  .MuiInput-underline:hover:not(.Mui-disabled):before {    border-bottom: 1px solid rgba(0, 0, 0, 0.42);  }}  .MuiNativeSelect-select {    cursor: pointer;    min-width: 16px;    user-select: none;    border-radius: 0;    -moz-appearance: none;    -webkit-appearance: none;  }  .MuiNativeSelect-select:focus {    border-radius: 0;    background-color: rgba(0, 0, 0, 0.05);  }  .MuiNativeSelect-select::-ms-expand {    display: none;  }  .MuiNativeSelect-select.Mui-disabled {    cursor: default;  }  .MuiNativeSelect-select[multiple] {    height: auto;  }  .MuiNativeSelect-select:not([multiple]) option, .MuiNativeSelect-select:not([multiple]) optgroup {    background-color: #fff;  }  .MuiNativeSelect-select.MuiNativeSelect-select {    padding-right: 24px;  }  .MuiNativeSelect-filled.MuiNativeSelect-filled {    padding-right: 32px;  }  .MuiNativeSelect-outlined {    border-radius: 4px;  }  .MuiNativeSelect-outlined.MuiNativeSelect-outlined {    padding-right: 32px;  }  .MuiNativeSelect-selectMenu {    height: auto;    overflow: hidden;    min-height: 1.1876em;    white-space: nowrap;    text-overflow: ellipsis;  }  .MuiNativeSelect-icon {    top: calc(50% - 12px);    color: rgba(0, 0, 0, 0.54);    right: 0;    position: absolute;    pointer-events: none;  }  .MuiNativeSelect-icon.Mui-disabled {    color: rgba(0, 0, 0, 0.26);  }  .MuiNativeSelect-iconOpen {    transform: rotate(180deg);  }  .MuiNativeSelect-iconFilled {    right: 7px;  }  .MuiNativeSelect-iconOutlined {    right: 7px;  }  .MuiNativeSelect-nativeInput {    left: 0;    width: 100%;    bottom: 0;    opacity: 0;    position: absolute;    pointer-events: none;  }  .jss14 {    top: 0;    left: 0;    bottom: 0;    opacity: 0.95;    z-index: 1200;    overflow: auto;    position: fixed;    box-shadow: 0px 0px 15px rgba(0,0,0,1);    flex-shrink: 0;    background-color: #fafafa;  }@media (min-width:600px) {  .jss14 {    opacity: 1;  }}  .jss15 {    transition: transform 195ms cubic-bezier(0.4, 0, 0.6, 1) 0ms;  }  .jss16 {    float: left;    margin-top: 14px;    margin-left: 24px;  }  .jss17 {    margin: 10px;    text-align: right;    margin-bottom: 9px;  }  .jss19 {    padding-left: 20px;  }  .jss21>* {    padding: 0 15px 0 48px;  }  .jss21 li code:first-of-type {    font-weight: bold;  }  .jss21 details {    border-top: 1px dashed #CCC;    padding-top: 10px;    border-bottom: 1px dashed #CCC;    padding-bottom: 10px;  }  .jss21 summary {    cursor: pointer;    outline: none;  }  .jss21 blockquote {    color: #6a737d;    margin: 0;    display: inline-block;    padding: 0 1em;    border-left: .25em solid #dfe2e5;  }  .jss21 pre {    color: #FFF;    width: auto;    border: 1px solid #001e36;    display: block;    padding: 15px 15px 15px 48px;    overflow: auto;    background-color: #192e40;  }  .jss21 .hljs {    padding: 0;    overflow: visible;    background: transparent;    padding-right: 20px;  }  .jss21 .hljs-comment {    color: #3bffcc;  }  .jss21 h6 a i.material-icons {    font-size: 18px;    transform: translateY(8px);    margin-right: 8px;  }  .jss21 h5 a i.material-icons {    font-size: 19px;    transform: translateY(7px);    margin-right: 7px;  }  .jss21 h4 a i.material-icons {    font-size: 20px;    transform: translateY(6px);    margin-right: 6px;  }  .jss21 h3 a i.material-icons {    font-size: 21px;    transform: translateY(5px);    margin-right: 5px;  }  .jss21 h2 a i.material-icons {    font-size: 22px;    transform: translateY(4px);    margin-right: 4px;  }  .jss21 h1 a i.material-icons {    font-size: 23px;    transform: translateY(3px);    margin-right: 3px;  }  .jss21 pre::-webkit-scrollbar {    width: 6px;    height: 6px;  }  .jss21 pre::-webkit-scrollbar-button {    width: 0;    height: 0;  }  .jss21 pre::-webkit-scrollbar-thumb {    border: 0 none #ffffff;    background: #0078dc;    border-radius: 50px;  }  .jss21 pre::-webkit-scrollbar-thumb:hover {    background: #44aaff;  }  .jss21 pre::-webkit-scrollbar-thumb:active {    background: #6dbdff;  }  .jss21 pre::-webkit-scrollbar-track {    border: 0 none #ffffff;    background: #192e40;    border-radius: 50px;  }  .jss21 pre::-webkit-scrollbar-track:hover {    background: #192e40;  }  .jss21 pre::-webkit-scrollbar-track:active {    background: #192e40;  }  .jss21 pre::-webkit-scrollbar-corner {    background: transparent;  }  .jss21 blockquote p {    margin: 0.5em 0;  }  .jss21 details:hover {    border-color: #888;  }  .jss22 {    padding-left: 20px;  }  .jss12>* {    padding: 0 15px 0 48px;  }  .jss12 li code:first-of-type {    font-weight: bold;  }  .jss12 details {    border-top: 1px dashed #CCC;    padding-top: 10px;    border-bottom: 1px dashed #CCC;    padding-bottom: 10px;  }  .jss12 summary {    cursor: pointer;    outline: none;  }  .jss12 blockquote {    color: #6a737d;    margin: 0;    display: inline-block;    padding: 0 1em;    border-left: .25em solid #dfe2e5;  }  .jss12 pre {    color: #FFF;    width: auto;    border: 1px solid #001e36;    display: block;    padding: 15px 15px 15px 48px;    overflow: auto;    background-color: #192e40;  }  .jss12 .hljs {    padding: 0;    overflow: visible;    background: transparent;    padding-right: 20px;  }  .jss12 .hljs-comment {    color: #3bffcc;  }  .jss12 h6 a i.material-icons {    font-size: 18px;    transform: translateY(8px);    margin-right: 8px;  }  .jss12 h5 a i.material-icons {    font-size: 19px;    transform: translateY(7px);    margin-right: 7px;  }  .jss12 h4 a i.material-icons {    font-size: 20px;    transform: translateY(6px);    margin-right: 6px;  }  .jss12 h3 a i.material-icons {    font-size: 21px;    transform: translateY(5px);    margin-right: 5px;  }  .jss12 h2 a i.material-icons {    font-size: 22px;    transform: translateY(4px);    margin-right: 4px;  }  .jss12 h1 a i.material-icons {    font-size: 23px;    transform: translateY(3px);    margin-right: 3px;  }  .jss12 pre::-webkit-scrollbar {    width: 6px;    height: 6px;  }  .jss12 pre::-webkit-scrollbar-button {    width: 0;    height: 0;  }  .jss12 pre::-webkit-scrollbar-thumb {    border: 0 none #ffffff;    background: #0078dc;    border-radius: 50px;  }  .jss12 pre::-webkit-scrollbar-thumb:hover {    background: #44aaff;  }  .jss12 pre::-webkit-scrollbar-thumb:active {    background: #6dbdff;  }  .jss12 pre::-webkit-scrollbar-track {    border: 0 none #ffffff;    background: #192e40;    border-radius: 50px;  }  .jss12 pre::-webkit-scrollbar-track:hover {    background: #192e40;  }  .jss12 pre::-webkit-scrollbar-track:active {    background: #192e40;  }  .jss12 pre::-webkit-scrollbar-corner {    background: transparent;  }  .jss12 blockquote p {    margin: 0.5em 0;  }  .jss12 details:hover {    border-color: #888;  }  .jss13 {    padding-left: 20px;  }  .jss2 {    width: 100%;  }@media (min-width:600px) {  .jss2 {    position: relative;  }}@media (min-width:600px) {  .jss3 {    transition: transform 195ms cubic-bezier(0.4, 0, 0.6, 1) 0ms;  }}@media (min-width:600px) {  .jss4 {    width: calc(100% - 240px);    transform: translateX(240px);    transition: transform 195ms cubic-bezier(0.4, 0, 0.6, 1) 0ms, width 0ms linear 195ms;  }}  .jss5 {    position: relative;    max-width: 100%;    background-color: #fafafa;  }</style></head><body><div id=\"__next\"><div class=\"jss2 jss4\"><header class=\"header_logo__1b2k8\"><div class=\"header_sand__3uGPk\"></div><h1><img src=\"/static/deepdash.full.svg\" alt=\"Deepdash logo\"/></h1></header><header class=\"MuiPaper-root MuiAppBar-root MuiAppBar-positionSticky MuiAppBar-colorPrimary jss6 MuiPaper-elevation4\"><div class=\"MuiToolbar-root MuiToolbar-regular MuiToolbar-gutters\"><button class=\"MuiButtonBase-root MuiIconButton-root jss8 MuiIconButton-colorInherit\" tabindex=\"0\" type=\"button\" id=\"btOpenDrawer\" aria-label=\"Open drawer\"><span class=\"MuiIconButton-label\"><svg class=\"MuiSvgIcon-root\" focusable=\"false\" viewBox=\"0 0 24 24\" aria-hidden=\"true\"><path d=\"M3 18h18v-2H3v2zm0-5h18v-2H3v2zm0-7v2h18V6H3z\"></path></svg></span></button><a class=\"MuiButtonBase-root MuiIconButton-root\" tabindex=\"0\" aria-disabled=\"false\" href=\"/\"><span class=\"MuiIconButton-label\"><img class=\"jss9\" src=\"/static/deepdash.white.full.svg\" alt=\"Deepdash logo\"/><img class=\"jss10\" src=\"/static/deepdash.white.svg\" alt=\"Deepdash logo\"/></span></a><a class=\"MuiButtonBase-root MuiIconButton-root MuiIconButton-colorInherit\" tabindex=\"0\" aria-disabled=\"false\" href=\"https://github.com/YuriGor/deepdash\"><span class=\"MuiIconButton-label\"><svg class=\"MuiSvgIcon-root\" focusable=\"false\" viewBox=\"0 0 24 24\" aria-hidden=\"true\"><path d=\"M12,2A10,10 0 0,0 2,12C2,16.42 4.87,20.17 8.84,21.5C9.34,21.58 9.5,21.27 9.5,21C9.5,20.77 9.5,20.14 9.5,19.31C6.73,19.91 6.14,17.97 6.14,17.97C5.68,16.81 5.03,16.5 5.03,16.5C4.12,15.88 5.1,15.9 5.1,15.9C6.1,15.97 6.63,16.93 6.63,16.93C7.5,18.45 8.97,18 9.54,17.76C9.63,17.11 9.89,16.67 10.17,16.42C7.95,16.17 5.62,15.31 5.62,11.5C5.62,10.39 6,9.5 6.65,8.79C6.55,8.54 6.2,7.5 6.75,6.15C6.75,6.15 7.59,5.88 9.5,7.17C10.29,6.95 11.15,6.84 12,6.84C12.85,6.84 13.71,6.95 14.5,7.17C16.41,5.88 17.25,6.15 17.25,6.15C17.8,7.5 17.45,8.54 17.35,8.79C18,9.5 18.38,10.39 18.38,11.5C18.38,15.32 16.04,16.16 13.81,16.41C14.17,16.72 14.5,17.33 14.5,18.26C14.5,19.6 14.5,20.68 14.5,21C14.5,21.27 14.66,21.59 15.17,21.5C19.14,20.16 22,16.42 22,12A10,10 0 0,0 12,2Z\"></path></svg></span></a><a class=\"MuiButtonBase-root MuiIconButton-root MuiIconButton-colorInherit\" tabindex=\"0\" aria-disabled=\"false\" href=\"https://www.npmjs.com/package/deepdash\"><span class=\"MuiIconButton-label\"><svg class=\"MuiSvgIcon-root\" focusable=\"false\" viewBox=\"0 0 24 24\" aria-hidden=\"true\"><path d=\"M5.12,5L5.93,4H17.93L18.87,5M12,17.5L6.5,12H10V10H14V12H17.5L12,17.5M20.54,5.23L19.15,3.55C18.88,3.21 18.47,3 18,3H6C5.53,3 5.12,3.21 4.84,3.55L3.46,5.23C3.17,5.57 3,6 3,6.5V19A2,2 0 0,0 5,21H19A2,2 0 0,0 21,19V6.5C21,6 20.83,5.57 20.54,5.23Z\"></path></svg></span></a><a class=\"MuiButtonBase-root MuiIconButton-root MuiIconButton-colorInherit\" tabindex=\"0\" aria-disabled=\"false\" href=\"https://www.jsdelivr.com/package/npm/deepdash\"><span class=\"MuiIconButton-label\"><svg class=\"MuiSvgIcon-root\" focusable=\"false\" viewBox=\"0 0 24 24\" aria-hidden=\"true\"><path d=\"M8,13H10.55V10H13.45V13H16L12,17L8,13M19.35,10.04C21.95,10.22 24,12.36 24,15A5,5 0 0,1 19,20H6A6,6 0 0,1 0,14C0,10.91 2.34,8.36 5.35,8.04C6.6,5.64 9.11,4 12,4C15.64,4 18.67,6.59 19.35,10.04M19,18A3,3 0 0,0 22,15C22,13.45 20.78,12.14 19.22,12.04L17.69,11.93L17.39,10.43C16.88,7.86 14.62,6 12,6C9.94,6 8.08,7.14 7.13,8.97L6.63,9.92L5.56,10.03C3.53,10.24 2,11.95 2,14A4,4 0 0,0 6,18H19Z\"></path></svg></span></a><div class=\"jss7\"></div><a class=\"MuiButtonBase-root MuiIconButton-root MuiIconButton-colorInherit\" tabindex=\"0\" aria-disabled=\"false\" href=\"#deepdash\"><span class=\"MuiIconButton-label\"><svg class=\"MuiSvgIcon-root\" focusable=\"false\" viewBox=\"0 0 24 24\" aria-hidden=\"true\" aria-label=\"Scroll to Top\"><path d=\"M7.41 15.41L12 10.83l4.59 4.58L18 14l-6-6-6 6z\"></path></svg></span></a></div></header><main class=\"jss5\"><section><div class=\"jss12\"><h1 id=\"deepdash\"><a href=\"#deepdash\" aria-hidden=\"true\" tabindex=\"-1\"><i class=\"material-icons\">link</i></a>Deepdash</h1><blockquote><p>v5.1.0 - <a href=\"/changelog#v5-1-0\">see changes</a></p></blockquote><p>eachDeep, filterDeep, findDeep, someDeep, omitDeep, pickDeep, keysDeep etc..Tree traversal library written in Underscore/Lodash fashion.Standalone or as a Lodash mixin extension</p><blockquote><p>Deepdash lib is used in <a href=\"https://planzed.org/\">PlanZed.org</a> - awesome cloud mind map app created by the author of deepdash.Plz check it, it's free and I need <a href=\"https://github.com/YuriGor/PlanZed.org\">feedback</a> \ud83d\ude09</p></blockquote><h2 id=\"list-of-methods\"><a href=\"#list-of-methods\" aria-hidden=\"true\" tabindex=\"-1\"><i class=\"material-icons\">link</i></a>List of Methods</h2><ul><li><a href=\"#condense\">condense</a> - condense sparse array</li><li><a href=\"#condensedeep\">condenseDeep</a> - condense all the nested arrays</li><li><a href=\"#eachdeep-foreachdeep\">eachDeep</a> - (forEachDeep) iterate over all the children and sub-children</li><li><a href=\"#exists\">exists</a> - like a <code>_.has</code> but returns <code>false</code> for empty array slots</li><li><a href=\"#filterdeep\">filterDeep</a> - deep filter object</li><li><a href=\"/#finddeep\">findDeep</a> - returns first matching deep meta-value</li><li><a href=\"/#findvaluedeep\">findValueDeep</a> - returns first matching deep value</li><li><a href=\"/#findpathdeep\">findPathDeep</a> returns path of the first matching deep value</li><li><a href=\"#index\">index</a> - get an object with all the paths as keys and corresponding values</li><li><a href=\"#paths-keysdeep\">paths</a> - (keysDeep) get an array of paths</li><li><a href=\"#mapdeep\">mapDeep</a> - produce an array of deep values processed by iteratee.</li><li><a href=\"#mapvaluesdeep\">mapValuesDeep</a> - produce an object with the same structure but with values trasformed thru iteratee.</li><li><a href=\"#mapkeysdeep\">mapKeysDeep</a> - produce an object with the same values but with keys trasformed thru iteratee.</li><li><a href=\"#reducedeep\">reduceDeep</a> - like reduce but deep</li><li><a href=\"/#somedeep\">someDeep</a>  - returns true if found some matching deep value, otherwise false</li><li><a href=\"#pickdeep\">pickDeep</a> - get object only with keys specified by names or regexes</li><li><a href=\"#omitdeep\">omitDeep</a> - get object without keys specified by names or regexes</li><li><a href=\"#pathtostring\">pathToString</a> - convert an array to string path (opposite to _.toPath)</li></ul><h3 id=\"installation\"><a href=\"#installation\" aria-hidden=\"true\" tabindex=\"-1\"><i class=\"material-icons\">link</i></a>Installation</h3><h4 id=\"in-a-browser\"><a href=\"#in-a-browser\" aria-hidden=\"true\" tabindex=\"-1\"><i class=\"material-icons\">link</i></a>In a browser</h4><p>Load <a href=\"https://cdn.jsdelivr.net/npm/deepdash/browser/deepdash.min.js\">script</a> after Lodash, then pass a lodash instance to the deepdash function:</p><pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"https://cdn.jsdelivr.net/npm/lodash/lodash.min.js\"</span>></span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">script</span>></span><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"https://cdn.jsdelivr.net/npm/deepdash/browser/deepdash.min.js\"</span>></span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">script</span>></span><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">script</span>></span><span class=\"javascript\">  deepdash(_);  <span class=\"hljs-built_in\">console</span>.log(_.eachDeep); <span class=\"hljs-comment\">// --> new methods mixed into Lodash</span></span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">script</span>></span></code></pre><p>If you don't use Lodash - there is a standalone version:</p><pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"https://cdn.jsdelivr.net/npm/deepdash/browser/deepdash.standalone.min.js\"</span>></span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">script</span>></span><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">script</span>></span><span class=\"javascript\">  <span class=\"hljs-built_in\">console</span>.log(deepdash.eachDeep); <span class=\"hljs-comment\">// --> all the methods just work</span></span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">script</span>></span></code></pre><p>Standalone Deepdash weighs more then \"dry\" version, because it includes some of cherry-picked Lodash methods it depends on.But it's better to use Standalone version, than include full Lodash just as dependency, if you don't need Lodash.</p><h4 id=\"using-npm\"><a href=\"#using-npm\" aria-hidden=\"true\" tabindex=\"-1\"><i class=\"material-icons\">link</i></a>Using npm:</h4><pre><code>npm i --save deepdash</code></pre><p>In Node.js:</p><pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// load Lodash if you need it</span><span class=\"hljs-keyword\">const</span> _ = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'lodash'</span>);<span class=\"hljs-comment\">//mixin all the methods into Lodash object</span><span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'deepdash'</span>)(_);<span class=\"hljs-comment\">// or cherry-pick method you only need and mix it into Lodash</span><span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'deepdash/addFilterDeep'</span>)(_);<span class=\"hljs-comment\">// or cherry-pick method separately if you don't want to mutate Lodash instance</span><span class=\"hljs-keyword\">const</span> filterDeep = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'deepdash/getFilterDeep'</span>)(_);<span class=\"hljs-comment\">// If you don't need Lodash - there is standalone version</span><span class=\"hljs-keyword\">const</span> deepdash = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'deepdash/standalone'</span>); <span class=\"hljs-comment\">// full</span><span class=\"hljs-keyword\">const</span> filterDeep = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'deepdash/filterDeep'</span>); <span class=\"hljs-comment\">// or separate standalone methods</span></code></pre><p>There is also deepdash as ES6 module</p><pre><code>npm i --save deepdash-es</code></pre><pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> lodash <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'lodash-es'</span>;<span class=\"hljs-keyword\">import</span> deepdash <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'deepdash-es'</span>;<span class=\"hljs-keyword\">const</span> _ = deepdash(lodash);</code></pre><p>in the ES package there are same cherry-pick and/or standalone methods as in the main package.</p><pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> filterDeep <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'deepdash-es/filterDeep'</span>;</code></pre><p>or</p><pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> { filterDeep } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'deepdash-es/standalone'</span>;</code></pre><p>or</p><pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> _ <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'lodash-es'</span>;<span class=\"hljs-keyword\">import</span> getFilterDeep <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'deepdash-es/getFilterDeep'</span>;<span class=\"hljs-keyword\">const</span> filterDeep = getFilterDeep(_);</code></pre><p>or</p><pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> _ <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'lodash-es'</span>;<span class=\"hljs-keyword\">import</span> addFilterDeep <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'deepdash-es/addFilterDeep'</span>;addFilterDeep(_);<span class=\"hljs-comment\">// --> _.filterDeep</span></code></pre><h1 id=\"usage\"><a href=\"#usage\" aria-hidden=\"true\" tabindex=\"-1\"><i class=\"material-icons\">link</i></a>Usage</h1><details>  <summary><i>let obj = {/* expand to see */};</i></summary><pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">let</span> obj = {  <span class=\"hljs-attr\">a</span>: {    <span class=\"hljs-attr\">b</span>: {      <span class=\"hljs-attr\">c</span>: {        <span class=\"hljs-attr\">d</span>: [          { <span class=\"hljs-attr\">i</span>: <span class=\"hljs-number\">0</span> },          { <span class=\"hljs-attr\">i</span>: <span class=\"hljs-number\">1</span> },          { <span class=\"hljs-attr\">i</span>: <span class=\"hljs-number\">2</span> },          { <span class=\"hljs-attr\">i</span>: <span class=\"hljs-number\">3</span> },          { <span class=\"hljs-attr\">i</span>: <span class=\"hljs-number\">4</span> },          { <span class=\"hljs-attr\">i</span>: <span class=\"hljs-number\">5</span> },          {            <span class=\"hljs-attr\">o</span>: {              <span class=\"hljs-attr\">d</span>: <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>(),              <span class=\"hljs-attr\">f</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{},              <span class=\"hljs-attr\">skip</span>: {                <span class=\"hljs-attr\">please</span>: {                  <span class=\"hljs-attr\">dont</span>: {                    <span class=\"hljs-attr\">go</span>: {                      <span class=\"hljs-attr\">here</span>: <span class=\"hljs-string\">'skip it'</span>,                    },                  },                },              },            },          },        ],        <span class=\"hljs-attr\">s</span>: <span class=\"hljs-string\">'hello'</span>,      },      <span class=\"hljs-attr\">b</span>: <span class=\"hljs-literal\">true</span>,    },    <span class=\"hljs-attr\">n</span>: <span class=\"hljs-number\">12345</span>,    <span class=\"hljs-attr\">u</span>: <span class=\"hljs-literal\">undefined</span>,  },  <span class=\"hljs-attr\">nl</span>: <span class=\"hljs-literal\">null</span>,};</code></pre></details><pre><code class=\"hljs language-js\">_.eachDeep(obj, <span class=\"hljs-function\">(<span class=\"hljs-params\">value, key, parent, context</span>) =></span> {  <span class=\"hljs-built_in\">console</span>.log(    _.repeat(<span class=\"hljs-string\">'  '</span>, context.depth) +      key +      <span class=\"hljs-string\">':'</span> +      (value === <span class=\"hljs-literal\">null</span> ? <span class=\"hljs-string\">'null'</span> : <span class=\"hljs-keyword\">typeof</span> value),    context.parent &#x26;&#x26; context.parent.path &#x26;&#x26; <span class=\"hljs-string\">' @'</span> + context.parent.path  );  <span class=\"hljs-keyword\">if</span> (key == <span class=\"hljs-string\">'skip'</span>) {    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>; <span class=\"hljs-comment\">// return false explicitly to skip iteration over current value's children</span>  }});</code></pre><details>  <summary>Console:</summary><pre><code>a:object  b:object  @a    c:object  @a.b      d:object  @a.b.c        0:object  @a.b.c.d          i:number  @a.b.c.d[0]        1:object  @a.b.c.d          i:number  @a.b.c.d[1]        2:object  @a.b.c.d          i:number  @a.b.c.d[2]        3:object  @a.b.c.d          i:number  @a.b.c.d[3]        4:object  @a.b.c.d          i:number  @a.b.c.d[4]        5:object  @a.b.c.d          i:number  @a.b.c.d[5]        6:object  @a.b.c.d          o:object  @a.b.c.d[6]            d:object  @a.b.c.d[6].o            f:function  @a.b.c.d[6].o            skip:object  @a.b.c.d[6].o      s:string  @a.b.c    b:boolean  @a.b  n:number  @a  u:undefined  @anl:null</code></pre></details><p><a href=\"https://codepen.io/yurigor/pen/OGKRNv?editors=0010\">Try it yourself \u203a\u203a\u203a</a></p><p>Chaining works too:</p><pre><code class=\"hljs language-js\">  _(obj).eachDeep(<span class=\"hljs-function\">(<span class=\"hljs-params\">value, key, parent, context</span>) =></span> {<span class=\"hljs-comment\">/* do */</span>}).value();</code></pre><h2 id=\"demo\"><a href=\"#demo\" aria-hidden=\"true\" tabindex=\"-1\"><i class=\"material-icons\">link</i></a>Demo</h2><p><a href=\"https://codesandbox.io/s/github/YuriGor/deepdash-example-comments/\">Example react+redux app</a> with nested comments filtered by Deepdash.(<a href=\"https://github.com/YuriGor/deepdash-example-comments/tree/master/\">source is here</a>)</p><h1 id=\"methods\"><a href=\"#methods\" aria-hidden=\"true\" tabindex=\"-1\"><i class=\"material-icons\">link</i></a>Methods</h1><h2 id=\"condense\"><a href=\"#condense\" aria-hidden=\"true\" tabindex=\"-1\"><i class=\"material-icons\">link</i></a>condense</h2><p>Makes sparse array non-sparse. This method mutates object.</p><pre><code class=\"hljs language-js\">_.condense( arr ) => array</code></pre><ul><li><code>arr</code> - array to condense</li><li><code>returns</code> - 'condensed' array without holes.</li></ul><p><strong>Example:</strong></p><pre><code class=\"hljs language-js\">  <span class=\"hljs-keyword\">let</span> arr = [<span class=\"hljs-string\">'a'</span>, <span class=\"hljs-string\">'b'</span>, <span class=\"hljs-string\">'c'</span>, <span class=\"hljs-string\">'d'</span>, <span class=\"hljs-string\">'e'</span>];  <span class=\"hljs-keyword\">delete</span> arr[<span class=\"hljs-number\">1</span>];  <span class=\"hljs-built_in\">console</span>.log(arr);  <span class=\"hljs-keyword\">delete</span> arr[<span class=\"hljs-number\">3</span>];  <span class=\"hljs-built_in\">console</span>.log(arr);  _.condense(arr);  <span class=\"hljs-built_in\">console</span>.log(arr);</code></pre><p>Console:</p><pre><code>  [ 'a', &#x3C;1 empty item>, 'c', 'd', 'e' ]  [ 'a', &#x3C;1 empty item>, 'c', &#x3C;1 empty item>, 'e' ]  [ 'a', 'c', 'e' ]</code></pre><p><a href=\"https://codepen.io/yurigor/pen/oOKGXE?editors=0010\">Try it yourself \u203a\u203a\u203a</a></p><h2 id=\"condensedeep\"><a href=\"#condensedeep\" aria-hidden=\"true\" tabindex=\"-1\"><i class=\"material-icons\">link</i></a>condenseDeep</h2><p>Makes all the arrays in the object non-sparse.</p><pre><code class=\"hljs language-js\">_.condenseDeep( obj, options = { <span class=\"hljs-attr\">checkCircular</span>: <span class=\"hljs-literal\">false</span> } ) => object</code></pre><ul><li><code>obj</code> - The object/array to iterate over.</li><li><code>options</code><ul><li><code>checkCircular</code> (false) - Check each value to not be one of the parents, to avoid circular references.</li></ul></li><li><code>returns</code> - 'condensed' object/array without holes.</li></ul><p><strong>Example:</strong></p><pre><code class=\"hljs language-js\">  <span class=\"hljs-keyword\">let</span> obj = { <span class=\"hljs-attr\">arr</span>: [<span class=\"hljs-string\">'a'</span>, <span class=\"hljs-string\">'b'</span>, { <span class=\"hljs-attr\">c</span>: [<span class=\"hljs-number\">1</span>, , <span class=\"hljs-number\">2</span>, , <span class=\"hljs-number\">3</span>] }, <span class=\"hljs-string\">'d'</span>, <span class=\"hljs-string\">'e'</span>] };  <span class=\"hljs-keyword\">delete</span> obj.arr[<span class=\"hljs-number\">1</span>];  <span class=\"hljs-keyword\">delete</span> obj.arr[<span class=\"hljs-number\">3</span>];  _.condenseDeep(obj);  <span class=\"hljs-built_in\">console</span>.log(obj);</code></pre><p>Console:</p><pre><code>  { arr: [ 'a', { c: [ 1, 2, 3 ] }, 'e' ] }</code></pre><p><a href=\"https://codepen.io/yurigor/pen/mgNBOa?editors=0010\">Try it yourself \u203a\u203a\u203a</a></p><h2 id=\"eachdeep-foreachdeep\"><a href=\"#eachdeep-foreachdeep\" aria-hidden=\"true\" tabindex=\"-1\"><i class=\"material-icons\">link</i></a>eachDeep (forEachDeep)</h2><p>Invokes given callback for each field and element of given object or array, nested too.</p><pre><code class=\"hljs language-js\">_.eachDeep( obj, iteratee=_.identity, options={    <span class=\"hljs-attr\">callbackAfterIterate</span>: <span class=\"hljs-literal\">false</span>,    <span class=\"hljs-attr\">checkCircular</span>: <span class=\"hljs-literal\">false</span>,    <span class=\"hljs-attr\">childrenPath</span>: <span class=\"hljs-literal\">undefined</span>,    <span class=\"hljs-attr\">includeRoot</span>: !_.isArray(obj),    <span class=\"hljs-attr\">leavesOnly</span>: <span class=\"hljs-literal\">false</span>,    <span class=\"hljs-attr\">pathFormat</span>: <span class=\"hljs-string\">'string'</span>,    <span class=\"hljs-attr\">rootIsChildren</span>: !includeRoot &#x26;&#x26; _.isArray(obj)  }) => object</code></pre><ul><li><code>obj</code> - The object/array to iterate over.</li><li><code>iteratee</code> (_.identity) - The function invoked per iteration. Should return <code>false</code> explicitly to skip children of current node.</li><li><code>options</code><ul><li><code>callbackAfterIterate</code> (false) - invoke <code>iteratee</code> twice, before and after iteration over children. On second run <code>context</code> iteratee's argument will have <code>afterIterate</code> flag set to the <code>true</code>. By default, <code>iteratee</code> invoked before it's children only.</li><li><code>checkCircular</code> (false) - Check each value to not be one of the parents, to avoid circular references.</li><li><code>leavesOnly</code> (false) - Call iteratee for childless values only.</li><li><code>pathFormat</code> ('string') - specifies <code>'string'</code> or <code>'array'</code> format of paths passed to the iteratee.</li><li><code>includeRoot</code> (!_.isArray(obj)) - treat given object as a valid part of the tree, so it will be passed into iteratee with undefined key/path/parent. By default true if obj is not array.</li><li><code>childrenPath</code> (undefined) - children collection's field name, path or array of any of this. Only elements of such collections will be passed into iteratee, if specified.</li><li><code>rootIsChildren</code> (!includeRoot &#x26;&#x26; _.isArray(obj)) - treat <code>obj</code> as a top-level children collection, so its elements will be passed into iteratee without parent path check. Considered only if <code>childrenPath</code> specified. By default true for arrays if not <code>includeRoot</code>.</li></ul></li><li><code>returns</code> - source object</li></ul><h3 id=\"iteratee\"><a href=\"#iteratee\" aria-hidden=\"true\" tabindex=\"-1\"><i class=\"material-icons\">link</i></a>iteratee</h3><p>a callback function which will be invoked for each child of the object.</p><pre><code class=\"hljs language-js\">(value, key, parentValue, context) => boolean</code></pre><p><strong>iteratee arguments</strong></p><ul><li><code>value</code> - current field or element (or child only, if childrenPath specified)</li><li><code>key|index</code> - field name or array index of the value</li><li><code>parentValue</code> - an object or an array which contains current value</li><li><code>context</code> - an object with fields:<ul><li><code>path</code> - path to the current value</li><li><code>parent</code> - an object of the current parent<ul><li><code>value</code> - value of the parent, equivalent of <code>parentValue</code> argument.</li><li><code>key</code> - parent key|index</li><li><code>path</code> - parent path</li><li><code>parent</code> - grandparent with the same structure.</li><li><code>childrenPath</code> - contains matched <code>childrenPath</code> path of this parent node, chosen from <code>childrenPath</code> array, if it was specified.</li></ul></li><li><code>childrenPath</code> - contains matched <code>childrenPath</code> path of current value, chosen from <code>childrenPath</code> array, if it was specified.</li><li><code>parents</code> - an array with all parent objects starting from the root level. <code>parent</code> object described above is just the last element of this array</li><li><code>obj</code> - source object</li><li><code>depth</code> - current value's nesting level</li><li><code>afterIterate</code> - this flag will be true if it's a second invocation of the <code>iteratee</code>. See <code>options.callbackAfterIterate</code> for details.</li><li><code>break</code> - method to abort the iteration, no matter how deep is process currently. Works in eachDeep/forEachDeep only, not supported by filterDeep etc.</li></ul></li><li>next three fields are available if <code>options.checkCircular</code> was <code>true</code>, otherwise they will be <code>undefined</code><ul><li><code>isCircular</code> - true if the current value is a circular reference.</li><li><code>circularParent</code> - parent object from <code>parents</code> array referenced by current value or null if not <code>isCircular</code>.</li><li><code>circularParentIndex</code> - index of <code>circularParent</code> in the parents array or <code>-1</code></li></ul></li><li><code>returns</code> - return <code>false</code> explicitly to prevent iteration over current value's children</li></ul><p><strong>Example:</strong></p><pre><code class=\"hljs language-js\">  <span class=\"hljs-keyword\">let</span> circular = { <span class=\"hljs-attr\">a</span>: { <span class=\"hljs-attr\">b</span>: { <span class=\"hljs-attr\">c</span>: {} } } };  circular.a.b.c = circular.a;  _.eachDeep(circular, <span class=\"hljs-function\">(<span class=\"hljs-params\">value, key, parent, ctx</span>) =></span> {    <span class=\"hljs-keyword\">if</span> (ctx.isCircular) {      <span class=\"hljs-built_in\">console</span>.log(        <span class=\"hljs-string\">\"Circular reference to \"</span>+ctx.circularParent.path+<span class=\"hljs-string\">\" skipped at \"</span> + ctx.path      );      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>; <span class=\"hljs-comment\">// explicit `false` will skip children of current value</span>    }    <span class=\"hljs-comment\">//do your job here</span>  },{ <span class=\"hljs-attr\">checkCircular</span>: <span class=\"hljs-literal\">true</span> });</code></pre><p>Console:</p><pre><code>  Circular reference to a skipped at a.b.c</code></pre><pre><code class=\"hljs language-js\">  <span class=\"hljs-keyword\">let</span> children = [    {      <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'grand 1'</span>,      <span class=\"hljs-attr\">children</span>: [        {          <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'parent 1.1'</span>,          <span class=\"hljs-attr\">children</span>: [{ <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'child 1.1.1'</span> }, { <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'child 1.1.2'</span> }],        },        {          <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'parent 1.2'</span>,          <span class=\"hljs-attr\">children</span>: [{ <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'child 1.2.1'</span> }, { <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'child 1.2.2'</span> }],        },      ],    },    {      <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'grand 2'</span>,      <span class=\"hljs-attr\">children</span>: [        {          <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'parent 2.1'</span>,          <span class=\"hljs-attr\">children</span>: [{ <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'child 2.1.1'</span> }, { <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'child 2.1.2'</span> }],        },        {          <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'parent 2.2'</span>,          <span class=\"hljs-attr\">children</span>: [{ <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'child 2.2.1'</span> }, { <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'child 2.2.2'</span> }],        },      ],    },  ];  <span class=\"hljs-keyword\">let</span> total = <span class=\"hljs-number\">0</span>;  _.eachDeep(    children,    <span class=\"hljs-function\">(<span class=\"hljs-params\">child, i, parent, ctx</span>) =></span> {      <span class=\"hljs-built_in\">console</span>.log(_.repeat(<span class=\"hljs-string\">'  '</span>, ctx.depth) + child.name);      total++;    },    { <span class=\"hljs-attr\">childrenPath</span>: <span class=\"hljs-string\">'children'</span> }  );  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'total nodes: '</span> + total);</code></pre><p>Console:</p><pre><code>  grand 1      parent 1.1          child 1.1.1          child 1.1.2      parent 1.2          child 1.2.1          child 1.2.2  grand 2      parent 2.1          child 2.1.1          child 2.1.2      parent 2.2          child 2.2.1          child 2.2.2  total nodes: 14</code></pre><p><a href=\"https://codepen.io/yurigor/pen/MRNEEJ?editors=0010\">Try it yourself \u203a\u203a\u203a</a></p><p><code>eachDeep</code> method has no builtin way to stop the iteration.When you return <code>false</code> - only children of the current value will be skipped.To stop iteration as fast as possible you will need to continuously return <code>false</code> from the rest of callbacks.</p><pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">let</span> breakLoop = <span class=\"hljs-literal\">false</span>;_.eachDeep({ <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">1</span>, <span class=\"hljs-attr\">children</span>: [ {<span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-attr\">children</span>: [ { <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">3</span>, <span class=\"hljs-attr\">children</span>: []}]}]},  <span class=\"hljs-function\">(<span class=\"hljs-params\">v,k, parent, context</span>) =></span> {  <span class=\"hljs-keyword\">if</span>(breakLoop || v == <span class=\"hljs-number\">2</span>) {    breakLoop = <span class=\"hljs-literal\">true</span>;    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;  }  <span class=\"hljs-built_in\">console</span>.log(k);});</code></pre><p><a href=\"https://codepen.io/yurigor/pen/NVrjRx?editors=0010\">Try it yourself \u203a\u203a\u203a</a></p><h2 id=\"exists\"><a href=\"#exists\" aria-hidden=\"true\" tabindex=\"-1\"><i class=\"material-icons\">link</i></a>exists</h2><p>Check if path exists in the object considering sparse arrays.Unlike Lodash's <code>has</code> - <code>exists</code> returns false for empty array slots.</p><pre><code class=\"hljs language-js\">_.exists( obj, path ) => boolean</code></pre><ul><li><code>obj</code> - object to inspect</li><li><code>path</code> - path(string|array) to check for existense</li><li><code>returns</code> - <code>true</code> if path exists, otherwise <code>false</code>.</li></ul><p><strong>Example:</strong></p><pre><code class=\"hljs language-js\">  <span class=\"hljs-keyword\">var</span> obj = [,{<span class=\"hljs-attr\">a</span>:[,<span class=\"hljs-string\">'b'</span>]}];  _.exists(obj, <span class=\"hljs-number\">0</span>); <span class=\"hljs-comment\">// false</span>  _.exists(obj, <span class=\"hljs-number\">1</span>); <span class=\"hljs-comment\">// true</span>  _.exists(obj, <span class=\"hljs-string\">'[1].a[0]'</span>); <span class=\"hljs-comment\">// false</span>  _.exists(obj, <span class=\"hljs-string\">'[1].a[1]'</span>); <span class=\"hljs-comment\">// true</span></code></pre><p><a href=\"https://codepen.io/yurigor/pen/MRNOQB?editors=0010\">Try it yourself \u203a\u203a\u203a</a></p><h2 id=\"filterdeep\"><a href=\"#filterdeep\" aria-hidden=\"true\" tabindex=\"-1\"><i class=\"material-icons\">link</i></a>filterDeep</h2><p>Returns an object with childs of your choice only</p><pre><code class=\"hljs language-js\">_.filterDeep( obj, predicate, options={    <span class=\"hljs-attr\">checkCircular</span>: <span class=\"hljs-literal\">false</span>,    <span class=\"hljs-attr\">cloneDeep</span>: _.cloneDeep,    <span class=\"hljs-attr\">condense</span>: <span class=\"hljs-literal\">true</span>,    <span class=\"hljs-attr\">keepCircular</span>: <span class=\"hljs-literal\">true</span>,    <span class=\"hljs-attr\">leavesOnly</span>: childrenPath!==<span class=\"hljs-literal\">undefined</span>,    <span class=\"hljs-attr\">pathFormat</span>: <span class=\"hljs-string\">'string'</span>,    <span class=\"hljs-comment\">// replaceCircularBy: &#x3C;value>,</span>    <span class=\"hljs-attr\">includeRoot</span>: !_.isArray(obj),    <span class=\"hljs-attr\">childrenPath</span>: <span class=\"hljs-literal\">undefined</span>,    <span class=\"hljs-attr\">rootIsChildren</span>: !includeRoot &#x26;&#x26; _.isArray(obj),    <span class=\"hljs-attr\">onTrue</span>: {      <span class=\"hljs-attr\">skipChildren</span>: <span class=\"hljs-literal\">true</span>,   <span class=\"hljs-comment\">// false if childrenPath</span>      <span class=\"hljs-attr\">cloneDeep</span>: <span class=\"hljs-literal\">true</span>,      <span class=\"hljs-comment\">// true if childrenPath</span>      <span class=\"hljs-attr\">keepIfEmpty</span>: <span class=\"hljs-literal\">true</span> },    <span class=\"hljs-attr\">onUndefined</span>: {      <span class=\"hljs-attr\">skipChildren</span>: <span class=\"hljs-literal\">false</span>,  <span class=\"hljs-comment\">// false if childrenPath</span>      <span class=\"hljs-attr\">cloneDeep</span>: <span class=\"hljs-literal\">false</span>,     <span class=\"hljs-comment\">// true if childrenPath</span>      <span class=\"hljs-attr\">keepIfEmpty</span>: <span class=\"hljs-literal\">false</span> },    <span class=\"hljs-attr\">onFalse</span>: {      <span class=\"hljs-attr\">skipChildren</span>: <span class=\"hljs-literal\">true</span>,   <span class=\"hljs-comment\">// false if childrenPath</span>      <span class=\"hljs-attr\">cloneDeep</span>: <span class=\"hljs-literal\">false</span>,     <span class=\"hljs-comment\">// true if childrenPath</span>      <span class=\"hljs-attr\">keepIfEmpty</span>: <span class=\"hljs-literal\">false</span> },  }) => object</code></pre><ul><li><code>obj</code> - The object/array to iterate over.</li><li><code>predicate</code> - The predicate is invoked with same arguments as described in <a href=\"#iteratee\">iteratee subsection</a><ul><li>If returns <code>true</code> - it means this is good value and you want it in the result object. See <code>onTrue</code> option for detailed behaviour description.</li><li>If returns <code>undefined</code> - it means you don't know yet if you need this and will see if some children are good. See <code>options.onUndefined</code> for details.</li><li>If returns <code>false</code> - current value will be completely excluded from the result object, iteration over children of this value will be skipped. See <code>options.onFalse</code> option.</li><li>You can also return an object with <code>skipChildren</code>, <code>cloneDeep</code> and <code>keepIfEmpty</code> boolean fields to control the filtering process directly.</li></ul></li><li><code>options</code><ul><li><code>checkCircular</code> (false) - Check each value to not be one of the parents, to avoid circular references.</li><li><code>keepCircular</code> (true) - The result object will contain circular references, if they passed the filter.</li><li><code>replaceCircularBy</code> (no defaults) - Specify the value to replace circular references by. Can be <code>undefined</code> too.</li><li><code>condense</code> (true) - excluding some paths from the object may produce sparse arrays. By default result object will be deeply condensed, but if you need consistent source and result paths - you can switch it off.</li><li><code>cloneDeep</code> (_.cloneDeep)- Method to use for deep cloning values, Lodash cloneDeep by default.</li><li><code>pathFormat</code> ('string') - specifies <code>'string'</code> or <code>'array'</code> format of paths passed to the iteratee.</li><li><code>leavesOnly</code> (options.childrenPath === undefined) - Call predicate for childless values only.</li><li><code>includeRoot</code> (!_.isArray(obj)) - treat given object as a valid part of the tree, so it will be passed into iteratee with undefined key/path/parent. By default true if obj is not array.</li><li><code>childrenPath</code> (undefined) - children collection's field name, path or array of any of this. Only elements of such collections will be passed into predicate, if specified.</li><li><code>rootIsChildren</code> (!includeRoot &#x26;&#x26; _.isArray(obj)) - treat <code>obj</code> as a top-level children collection, so its elements will be passed into predicate without parent path check. Considered only if <code>childrenPath</code> specified. By default true for arrays if not <code>includeRoot</code>.</li><li><code>onTrue</code> (object) - Describes how current value should be processed if predicate returns <code>true</code><ul><li><code>skipChildren</code> (childrenPath===undefined) - if 'true' - skip iteration over value's children. By default true for 'object' mode and false in the 'tree' mode.</li><li><code>cloneDeep</code> (childrenPath!==undefined) - deeply clone current value into result or copy primitives only and create empty array/object without nested data. In the 'tree' mode whole child will be deeply cloned to the result.</li><li><code>keepIfEmpty</code> (true) - keep empty array/object in the result, if all the children were filtered out/not exist.</li></ul></li><li><code>onUndefined</code> (object) - Describes how current value should be processed if iteratee returns <code>undefined</code><ul><li><code>skipChildren</code> (false) - on undefined answer children will be still checked by default</li><li><code>cloneDeep</code> (childrenPath!==undefined) - copy only primitives for 'object' mode and cloneDeep for 'tree' mode. In the tree mode only children count considered to decide if value empty or not, other cloned fields doesn't matter.</li><li><code>keepIfEmpty</code> (false) - remove such value from result if no children passed the filter by default.</li></ul></li><li><code>onFalse</code> (object) - Describes how current value should be processed if iteratee returns <code>false</code><ul><li><code>skipChildren</code> (childrenPath===undefined) - by default reject value completely in the 'object' mode, but give children a chance in the 'tree' mode</li><li><code>cloneDeep</code> (childrenPath!==undefined) - no need to clone if we rejected value in 'object' mode, but in the 'tree' mode we will possibly need other fields of the value, if some children will be welcome.</li><li><code>keepIfEmpty</code> (false) - remove from result if no children passed the filter by default.</li></ul></li></ul></li><li><code>returns</code> - deeply filtered object/array/any type of given source obj or null if everything was rejected.</li></ul><p><strong>Example(fields iteration):</strong></p><pre><code class=\"hljs language-js\">  <span class=\"hljs-keyword\">let</span> things = {    <span class=\"hljs-attr\">things</span>: [      { <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'something'</span>, <span class=\"hljs-attr\">good</span>: <span class=\"hljs-literal\">false</span> },      {        <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'another thing'</span>, <span class=\"hljs-attr\">good</span>: <span class=\"hljs-literal\">true</span>,        <span class=\"hljs-attr\">children</span>: [          { <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'child thing 1'</span>, <span class=\"hljs-attr\">good</span>: <span class=\"hljs-literal\">false</span> },          { <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'child thing 2'</span>, <span class=\"hljs-attr\">good</span>: <span class=\"hljs-literal\">true</span> },          { <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'child thing 3'</span>, <span class=\"hljs-attr\">good</span>: <span class=\"hljs-literal\">false</span> },        ],      },      {        <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'something else'</span>, <span class=\"hljs-attr\">good</span>: <span class=\"hljs-literal\">true</span>,        <span class=\"hljs-attr\">subItem</span>: { <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'sub-item'</span>, <span class=\"hljs-attr\">good</span>: <span class=\"hljs-literal\">false</span> },        <span class=\"hljs-attr\">subItem2</span>: { <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'sub-item-2'</span>, <span class=\"hljs-attr\">good</span>: <span class=\"hljs-literal\">true</span> },      },    ],  };  <span class=\"hljs-keyword\">let</span> filtrate = _.filterDeep(    things,    <span class=\"hljs-function\">(<span class=\"hljs-params\">value, key, parent</span>) =></span> {      <span class=\"hljs-keyword\">if</span> (key == <span class=\"hljs-string\">'name'</span> &#x26;&#x26; parent.good) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;      <span class=\"hljs-keyword\">if</span> (key == <span class=\"hljs-string\">'good'</span> &#x26;&#x26; value == <span class=\"hljs-literal\">true</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;    }  );  <span class=\"hljs-built_in\">console</span>.log(filtrate);</code></pre><p>Console:</p><pre><code>  { things:   [ { name: 'another thing',       good: true,       children: [ { name: 'child thing 2', good: true } ] },     { name: 'something else',       good: true,       subItem2: { name: 'sub-item-2', good: true } } ] }</code></pre><p><a href=\"https://codepen.io/yurigor/pen/GaKvNm?editors=0010\">Try it yourself \u203a\u203a\u203a</a></p><p><strong>Example (tree mode)</strong></p><pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">let</span> badChildren = [  {    <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'1'</span>,    <span class=\"hljs-attr\">bad</span>: <span class=\"hljs-literal\">false</span>,    <span class=\"hljs-attr\">children</span>: [      { <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'1.1'</span>, <span class=\"hljs-attr\">bad</span>: <span class=\"hljs-literal\">false</span> },      { <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'1.2'</span> },      { <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'1.3'</span>, <span class=\"hljs-attr\">bad</span>: <span class=\"hljs-literal\">true</span> },    ],  },  {    <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'2'</span>,    <span class=\"hljs-attr\">children</span>: [      { <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'2.1'</span>, <span class=\"hljs-attr\">bad</span>: <span class=\"hljs-literal\">false</span> },      { <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'2.2'</span> },      { <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'2.3'</span>, <span class=\"hljs-attr\">bad</span>: <span class=\"hljs-literal\">true</span> },    ],  },  {    <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'3'</span>,    <span class=\"hljs-attr\">bad</span>: <span class=\"hljs-literal\">true</span>,    <span class=\"hljs-attr\">children</span>: [      { <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'3.1'</span>, <span class=\"hljs-attr\">bad</span>: <span class=\"hljs-literal\">false</span> },      { <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'3.2'</span> },      { <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'3.3'</span>, <span class=\"hljs-attr\">bad</span>: <span class=\"hljs-literal\">true</span> },    ],  },  ];<span class=\"hljs-keyword\">let</span> reallyBad = _.filterDeep(badChildren, <span class=\"hljs-string\">'bad'</span>, { <span class=\"hljs-attr\">childrenPath</span>: <span class=\"hljs-string\">'children'</span> });<span class=\"hljs-built_in\">console</span>.log(reallyBad);</code></pre><p>Console:</p><pre><code>[  {    \"name\": \"1\",    \"bad\": false,    \"children\": [      {        \"name\": \"1.3\",        \"bad\": true      }    ]  },  {    \"name\": \"2\",    \"children\": [      {        \"name\": \"2.3\",        \"bad\": true      }    ]  },  {    \"name\": \"3\",    \"bad\": true,    \"children\": [      {        \"name\": \"3.3\",        \"bad\": true      }    ]  }]</code></pre><p><a href=\"https://codepen.io/yurigor/pen/wbwoqL?editors=0010\">Try it yourself \u203a\u203a\u203a</a></p><h2 id=\"finddeep\"><a href=\"#finddeep\" aria-hidden=\"true\" tabindex=\"-1\"><i class=\"material-icons\">link</i></a>findDeep</h2><p>Returns first matching deep meta-value</p><pre><code class=\"hljs language-js\">_.findDeep( obj, predicate, options={    <span class=\"hljs-attr\">checkCircular</span>: <span class=\"hljs-literal\">false</span>,    <span class=\"hljs-attr\">leavesOnly</span>: childrenPath!==<span class=\"hljs-literal\">undefined</span>,    <span class=\"hljs-attr\">pathFormat</span>: <span class=\"hljs-string\">'string'</span>,    <span class=\"hljs-attr\">includeRoot</span>: !_.isArray(obj),    <span class=\"hljs-attr\">childrenPath</span>: <span class=\"hljs-literal\">undefined</span>,    <span class=\"hljs-attr\">rootIsChildren</span>: !includeRoot &#x26;&#x26; _.isArray(obj),  }) => {value, key, parent, context}</code></pre><ul><li><code>obj</code> - The object/array to iterate over.</li><li><code>predicate</code> - The predicate is invoked with same arguments as described in <a href=\"#iteratee\">iteratee subsection</a><ul><li>If returns <code>true</code> - all the arguments passed into predicate will be returned as an object and search will be stopped.</li></ul></li><li><code>options</code><ul><li><code>checkCircular</code> (false) - Check each value to not be one of the parents, to avoid circular references.</li><li><code>pathFormat</code> ('string') - specifies <code>'string'</code> or <code>'array'</code> format of paths passed to the iteratee.</li><li><code>leavesOnly</code> (options.childrenPath === undefined) - Call predicate for childless values only.</li><li><code>includeRoot</code> (!_.isArray(obj)) - treat given object as a valid part of the tree, so it will be passed into iteratee with undefined key/path/parent. By default true if obj is not array.</li><li><code>childrenPath</code> (undefined) - children collection's field name, path or array of any of this. Only elements of such collections will be passed into predicate, if specified.</li><li><code>rootIsChildren</code> (!includeRoot &#x26;&#x26; _.isArray(obj)) - treat <code>obj</code> as a top-level children collection, so its elements will be passed into predicate without parent path check. Considered only if <code>childrenPath</code> specified. By default true for arrays if not <code>includeRoot</code>.</li></ul></li><li><code>returns</code> - and object with found value, key, parent and context or undefined if nothing found</li></ul><p><a href=\"https://codepen.io/yurigor\">Try it yourself (no yet) \u203a\u203a\u203a</a></p><h2 id=\"findvaluedeep\"><a href=\"#findvaluedeep\" aria-hidden=\"true\" tabindex=\"-1\"><i class=\"material-icons\">link</i></a>findValueDeep</h2><p>Returns first matching deep value.</p><pre><code class=\"hljs language-js\">_.findValueDeep( obj, predicate, options={    <span class=\"hljs-attr\">checkCircular</span>: <span class=\"hljs-literal\">false</span>,    <span class=\"hljs-attr\">leavesOnly</span>: childrenPath!==<span class=\"hljs-literal\">undefined</span>,    <span class=\"hljs-attr\">pathFormat</span>: <span class=\"hljs-string\">'string'</span>,    <span class=\"hljs-attr\">includeRoot</span>: !_.isArray(obj),    <span class=\"hljs-attr\">childrenPath</span>: <span class=\"hljs-literal\">undefined</span>,    <span class=\"hljs-attr\">rootIsChildren</span>: !includeRoot &#x26;&#x26; _.isArray(obj),  }) => value | <span class=\"hljs-literal\">undefined</span></code></pre><ul><li><code>obj</code> - The object/array to iterate over.</li><li><code>predicate</code> - The predicate is invoked with same arguments as described in <a href=\"#iteratee\">iteratee subsection</a><ul><li>If returns <code>true</code> - the value passed into predicate will be returned and search will be stopped.</li></ul></li><li><code>options</code><ul><li><code>checkCircular</code> (false) - Check each value to not be one of the parents, to avoid circular references.</li><li><code>pathFormat</code> ('string') - specifies <code>'string'</code> or <code>'array'</code> format of paths passed to the iteratee.</li><li><code>leavesOnly</code> (options.childrenPath === undefined) - Call predicate for childless values only.</li><li><code>includeRoot</code> (!_.isArray(obj)) - treat given object as a valid part of the tree, so it will be passed into iteratee with undefined key/path/parent. By default true if obj is not array.</li><li><code>childrenPath</code> (undefined) - children collection's field name, path or array of any of this. Only elements of such collections will be passed into predicate, if specified.</li><li><code>rootIsChildren</code> (!includeRoot &#x26;&#x26; _.isArray(obj)) - treat <code>obj</code> as a top-level children collection, so its elements will be passed into predicate without parent path check. Considered only if <code>childrenPath</code> specified. By default true for arrays if not <code>includeRoot</code>.</li></ul></li><li><code>returns</code> - found value or undefined if nothing found. Be carefull, deep value may also be undefined</li></ul><p><a href=\"https://codepen.io/yurigor\">Try it yourself (no yet) \u203a\u203a\u203a</a></p><h2 id=\"findpathdeep\"><a href=\"#findpathdeep\" aria-hidden=\"true\" tabindex=\"-1\"><i class=\"material-icons\">link</i></a>findPathDeep</h2><p>Returns the path of the first matching deep value.</p><pre><code class=\"hljs language-js\">_.findPathDeep( obj, predicate, options={    <span class=\"hljs-attr\">checkCircular</span>: <span class=\"hljs-literal\">false</span>,    <span class=\"hljs-attr\">leavesOnly</span>: childrenPath!==<span class=\"hljs-literal\">undefined</span>,    <span class=\"hljs-attr\">pathFormat</span>: <span class=\"hljs-string\">'string'</span>,    <span class=\"hljs-attr\">includeRoot</span>: !_.isArray(obj),    <span class=\"hljs-attr\">childrenPath</span>: <span class=\"hljs-literal\">undefined</span>,    <span class=\"hljs-attr\">rootIsChildren</span>: !includeRoot &#x26;&#x26; _.isArray(obj),  }) => path | <span class=\"hljs-literal\">undefined</span></code></pre><ul><li><code>obj</code> - The object/array to iterate over.</li><li><code>predicate</code> - The predicate is invoked with same arguments as described in <a href=\"#iteratee\">iteratee subsection</a><ul><li>If returns <code>true</code> - current path will be returned and search will be stopped.</li></ul></li><li><code>options</code><ul><li><code>checkCircular</code> (false) - Check each value to not be one of the parents, to avoid circular references.</li><li><code>pathFormat</code> ('string') - specifies <code>'string'</code> or <code>'array'</code> format of paths passed to the iteratee.</li><li><code>leavesOnly</code> (options.childrenPath === undefined) - Call predicate for childless values only.</li><li><code>includeRoot</code> (!_.isArray(obj)) - treat given object as a valid part of the tree, so it will be passed into iteratee with undefined key/path/parent. By default true if obj is not array.</li><li><code>childrenPath</code> (undefined) - children collection's field name, path or array of any of this. Only elements of such collections will be passed into predicate, if specified.</li><li><code>rootIsChildren</code> (!includeRoot &#x26;&#x26; _.isArray(obj)) - treat <code>obj</code> as a top-level children collection, so its elements will be passed into predicate without parent path check. Considered only if <code>childrenPath</code> specified. By default true for arrays if not <code>includeRoot</code>.</li></ul></li><li><code>returns</code> - the path of the found value or undefined if nothing found. Be carefull, path may also be undefined for datasource object itself, if includeRoot == true</li></ul><p><a href=\"https://codepen.io/yurigor\">Try it yourself (no yet) \u203a\u203a\u203a</a></p><h2 id=\"index\"><a href=\"#index\" aria-hidden=\"true\" tabindex=\"-1\"><i class=\"material-icons\">link</i></a>index</h2><p>Creates an 'index' flat object with paths as keys and corresponding values.</p><pre><code class=\"hljs language-js\">_.index( obj, options={    <span class=\"hljs-attr\">checkCircular</span>: <span class=\"hljs-literal\">false</span>,    <span class=\"hljs-attr\">includeCircularPath</span>: <span class=\"hljs-literal\">true</span>,    <span class=\"hljs-attr\">leavesOnly</span>: <span class=\"hljs-literal\">true</span>,    <span class=\"hljs-attr\">includeRoot</span>: !_.isArray(obj),    <span class=\"hljs-attr\">childrenPath</span>: <span class=\"hljs-literal\">undefined</span>,    <span class=\"hljs-attr\">rootIsChildren</span>: !includeRoot &#x26;&#x26; _.isArray(obj),  }) => object</code></pre><ul><li><code>obj</code> - The object to iterate over.</li><li><code>options</code><ul><li><code>checkCircular</code> (false) - Check each value to not be one of the parents, to avoid circular references.</li><li><code>includeCircularPath</code> (true) - If found some circular reference - include a path to it into the result or skip it. Option ignored if <code>checkCircular=false</code></li><li><code>leavesOnly</code> (true) - Return paths to childless values only.</li><li><code>includeRoot</code> (!_.isArray(obj)) - in the <code>index</code> method this option affects only <code>rootIsChildren</code> default value.</li><li><code>childrenPath</code> (undefined) - children collection's field name, path or array of any of this. Only elements of such collections will be listed in the index object, if specified.</li><li><code>rootIsChildren</code> (!includeRoot &#x26;&#x26; _.isArray(obj)) - treat <code>obj</code> as a top-level children collection, so its elements will be listed as children too. Considered only if <code>childrenPath</code> specified. By default true for arrays if not <code>includeRoot</code>.</li></ul></li><li><code>returns</code> - 'index' object</li></ul><p><strong>Example:</strong></p><pre><code class=\"hljs language-js\">  <span class=\"hljs-keyword\">let</span> index = _.index(    {      <span class=\"hljs-attr\">a</span>: {        <span class=\"hljs-attr\">b</span>: {          <span class=\"hljs-attr\">c</span>: [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>],          <span class=\"hljs-string\">'hello world'</span>: {},        },      },    },    { <span class=\"hljs-attr\">leavesOnly</span>: <span class=\"hljs-literal\">true</span> }  );  <span class=\"hljs-built_in\">console</span>.log(index);</code></pre><p>Console:</p><pre><code>  { 'a.b.c[0]': 1,    'a.b.c[1]': 2,    'a.b.c[2]': 3,    'a.b[\"hello world\"]': {} }</code></pre><p><a href=\"https://codepen.io/yurigor/pen/rgBzdB?editors=0010\">Try it yourself \u203a\u203a\u203a</a></p><h2 id=\"paths-keysdeep\"><a href=\"#paths-keysdeep\" aria-hidden=\"true\" tabindex=\"-1\"><i class=\"material-icons\">link</i></a>paths (keysDeep)</h2><p>Creates an array with all the paths to each nested value.</p><pre><code class=\"hljs language-js\">_.paths( obj, options={    <span class=\"hljs-attr\">checkCircular</span>: <span class=\"hljs-literal\">false</span>,    <span class=\"hljs-attr\">includeCircularPath</span>: <span class=\"hljs-literal\">true</span>,    <span class=\"hljs-attr\">pathFormat</span>: <span class=\"hljs-string\">'string'</span>,    <span class=\"hljs-attr\">leavesOnly</span>: <span class=\"hljs-literal\">true</span>,    <span class=\"hljs-attr\">includeRoot</span>: !_.isArray(obj),    <span class=\"hljs-attr\">childrenPath</span>: <span class=\"hljs-literal\">undefined</span>,    <span class=\"hljs-attr\">rootIsChildren</span>: !includeRoot &#x26;&#x26; _.isArray(obj)  }) => array</code></pre><ul><li><code>obj</code> - The object to iterate over.</li><li><code>options</code><ul><li><code>checkCircular</code> (false) - Check each value to not be one of the parents, to avoid circular references.</li><li><code>includeCircularPath</code> (true) - If found some circular reference - include a path to it into the result or skip it. Option ignored if <code>checkCircular:false</code></li><li><code>pathFormat</code> ('string') - specifies <code>'string'</code> or <code>'array'</code> format of paths passed to the iteratee.</li><li><code>leavesOnly</code> (true) - Return paths to childless values only.</li><li><code>includeRoot</code> (!_.isArray(obj)) - in the <code>paths</code> method this option affects only <code>rootIsChildren</code> default value.</li><li><code>childrenPath</code> (undefined) - children collection's field name, path or array of any of this. Only paths to elements of such collections will be listed in the result array, if specified.</li><li><code>rootIsChildren</code> (!includeRoot &#x26;&#x26; _.isArray(obj)) - treat <code>obj</code> as a top-level children collection, so its elements will be listed as children too. Considered only if <code>childrenPath</code> specified. By default true for arrays if not <code>includeRoot</code>.</li></ul></li><li><code>returns</code> - array with paths of the object, formatted as strings or as arrays</li></ul><p><strong>Example:</strong></p><pre><code class=\"hljs language-js\">  <span class=\"hljs-keyword\">let</span> paths = _.paths({    <span class=\"hljs-attr\">a</span>: {      <span class=\"hljs-attr\">b</span>: {        <span class=\"hljs-attr\">c</span>: [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>],        <span class=\"hljs-string\">\"hello world\"</span>:{}      },    },  },{ <span class=\"hljs-attr\">leavesOnly</span>: <span class=\"hljs-literal\">false</span> });  <span class=\"hljs-built_in\">console</span>.log(paths);  paths = _.paths({    <span class=\"hljs-attr\">a</span>: {      <span class=\"hljs-attr\">b</span>: {        <span class=\"hljs-attr\">c</span>: [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>],        <span class=\"hljs-string\">\"hello world\"</span>:{}      },    },  });  <span class=\"hljs-built_in\">console</span>.log(paths);</code></pre><p>Console:</p><pre><code>  [ 'a',    'a.b',    'a.b.c',    'a.b.c[0]',    'a.b.c[1]',    'a.b.c[2]',    'a.b[\"hello world\"]' ]  [    'a.b.c[0]',    'a.b.c[1]',    'a.b.c[2]',    'a.b[\"hello world\"]' ]</code></pre><p><a href=\"https://codepen.io/yurigor/pen/mYbByL?editors=0010\">Try it yourself \u203a\u203a\u203a</a></p><h2 id=\"mapdeep\"><a href=\"#mapdeep\" aria-hidden=\"true\" tabindex=\"-1\"><i class=\"material-icons\">link</i></a>mapDeep</h2><p>returns an array of deep values processed by iteratee.previous implemetation with object structure preserved renamed to <a href=\"/#mapvaluesdeep\">mapValuesDeep</a></p><pre><code class=\"hljs language-js\">_.mapDeep( obj, iteratee, options) => object</code></pre><ul><li><code>obj</code> - The object/array to iterate over.</li><li><code>iteratee</code> (_.identity) - The function invoked per iteration with four arguments (see <a href=\"#iteratee\">iteratee subsection</a> for details)<ul><li><code>value</code></li><li><code>key|index</code></li><li><code>parentValue</code></li><li><code>context</code></li><li><code>returns</code> - desired value instead of initial to be added to result array</li></ul></li><li><code>options</code> - (see <a href=\"#eachdeep\">eachDeep options</a> for details)<ul><li><code>callbackAfterIterate</code> (false)</li><li><code>checkCircular</code> (false)</li><li><code>leavesOnly</code> (false)</li><li><code>pathFormat</code> ('string')</li><li><code>includeRoot</code> (!_.isArray(obj))</li><li><code>childrenPath</code> (undefined)</li><li><code>rootIsChildren</code> (!includeRoot &#x26;&#x26; _.isArray(obj))</li></ul></li><li><code>returns</code> - array of deep values processed by iteratee.</li></ul><p><strong>Example:</strong></p><pre><code class=\"hljs language-js\">  <span class=\"hljs-keyword\">let</span> res = _.mapDeep(    { <span class=\"hljs-attr\">hello</span>: { <span class=\"hljs-attr\">from</span>: { <span class=\"hljs-attr\">the</span>: <span class=\"hljs-string\">'deep world'</span>, <span class=\"hljs-attr\">and</span>: <span class=\"hljs-string\">'deepdash'</span> } } },    <span class=\"hljs-function\">(<span class=\"hljs-params\">v</span>) =></span> v.toUpperCase(),    { <span class=\"hljs-attr\">leavesOnly</span>: <span class=\"hljs-literal\">true</span> }  );  <span class=\"hljs-comment\">// res -> ['DEEP WORLD','DEEPDASH']</span></code></pre><p><a href=\"https://codepen.io/yurigor\">Try it yourself (no yet) \u203a\u203a\u203a</a></p><h2 id=\"mapvaluesdeep\"><a href=\"#mapvaluesdeep\" aria-hidden=\"true\" tabindex=\"-1\"><i class=\"material-icons\">link</i></a>mapValuesDeep</h2><p>returns an object with the same structure with values trasformed thru iteratee.if some value changed type from/to array - children will be skipped and given value will be used as is</p><pre><code class=\"hljs language-js\">_.mapValuesDeep( obj, iteratee, options) => object</code></pre><ul><li><code>obj</code> - The object/array to iterate over.</li><li><code>iteratee</code> (_.identity) - The function invoked per iteration with four arguments (see <a href=\"#iteratee\">iteratee subsection</a> for details)<ul><li><code>value</code></li><li><code>key|index</code></li><li><code>parentValue</code></li><li><code>context</code><ul><li><code>skipChildren(boolean)</code> - use this method to override default skip children behavior. Note: children values will be placed by original paths even if parent changed type from / to array.</li></ul></li><li><code>returns</code> - desired value instead of initial to be set at the same path</li></ul></li><li><code>options</code> - (see <a href=\"#eachdeep\">eachDeep options</a> for details)<ul><li><code>callbackAfterIterate</code> (false)</li><li><code>checkCircular</code> (false)</li><li><code>leavesOnly</code> (false)</li><li><code>pathFormat</code> ('string')</li><li><code>includeRoot</code> (!_.isArray(obj))</li><li><code>childrenPath</code> (undefined)</li><li><code>rootIsChildren</code> (!includeRoot &#x26;&#x26; _.isArray(obj))</li></ul></li><li><code>returns</code> - object or array with the same paths, but transformed values.</li></ul><p><strong>Example:</strong></p><pre><code class=\"hljs language-js\">  <span class=\"hljs-keyword\">let</span> res = _.mapValuesDeep(    { <span class=\"hljs-attr\">hello</span>: { <span class=\"hljs-attr\">from</span>: { <span class=\"hljs-attr\">the</span>: <span class=\"hljs-string\">'deep world'</span> } } },    <span class=\"hljs-function\">(<span class=\"hljs-params\">v</span>) =></span> v.toUpperCase(),    { <span class=\"hljs-attr\">leavesOnly</span>: <span class=\"hljs-literal\">true</span> }  );  <span class=\"hljs-comment\">// res -> { hello: { from: { the: 'DEEP WORLD' } } }</span></code></pre><p><a href=\"https://codepen.io/yurigor/pen/yWBzGV?editors=0010\">Try it yourself \u203a\u203a\u203a</a></p><h2 id=\"mapkeysdeep\"><a href=\"#mapkeysdeep\" aria-hidden=\"true\" tabindex=\"-1\"><i class=\"material-icons\">link</i></a>mapKeysDeep</h2><p>returns an object with the same values but kyes trasformed thru iteratee.</p><pre><code class=\"hljs language-js\">_.mapKeysDeep( obj, iteratee, options) => object</code></pre><ul><li><code>obj</code> - The object/array to iterate over.</li><li><code>iteratee</code> (_.identity) - The function invoked per iteration with four arguments (see <a href=\"#iteratee\">iteratee subsection</a> for details)<ul><li><code>value</code></li><li><code>key|index</code></li><li><code>parentValue</code></li><li><code>context</code></li><li><code>returns</code> - desired key instead of initial</li></ul></li><li><code>options</code> - (see <a href=\"#eachdeep\">eachDeep options</a> for details)<ul><li><code>callbackAfterIterate</code> (false)</li><li><code>checkCircular</code> (false)</li><li><code>leavesOnly</code> (false)</li><li><code>pathFormat</code> ('string')</li><li><code>includeRoot</code> (!_.isArray(obj))</li><li><code>childrenPath</code> (undefined)</li><li><code>rootIsChildren</code> (!includeRoot &#x26;&#x26; _.isArray(obj))</li></ul></li><li><code>returns</code> - object or array with the same values, but transformed keys.</li></ul><p><strong>Example:</strong></p><pre><code class=\"hljs language-js\">  <span class=\"hljs-keyword\">let</span> res = _.mapKeysDeep(    { <span class=\"hljs-attr\">hello</span>: { <span class=\"hljs-attr\">from</span>: { <span class=\"hljs-attr\">the</span>: <span class=\"hljs-string\">'deep world'</span> } } },    <span class=\"hljs-function\">(<span class=\"hljs-params\">v, k</span>) =></span> k.toUpperCase()  );  <span class=\"hljs-comment\">// res -> { HELLO: { FROM: { THE: 'deep world' } } }</span></code></pre><p><a href=\"https://codepen.io/yurigor\">Try it yourself (no yet) \u203a\u203a\u203a</a></p><h2 id=\"pickdeep\"><a href=\"#pickdeep\" aria-hidden=\"true\" tabindex=\"-1\"><i class=\"material-icons\">link</i></a>pickDeep</h2><p>returns an object only with given path endings or regexes</p><pre><code class=\"hljs language-js\">_.pickDeep( obj, paths, options={    <span class=\"hljs-attr\">checkCircular</span>: <span class=\"hljs-literal\">false</span>,    <span class=\"hljs-attr\">keepCircular</span>: <span class=\"hljs-literal\">true</span>,    <span class=\"hljs-comment\">// replaceCircularBy: &#x3C;value>,</span>    <span class=\"hljs-attr\">condense</span>: <span class=\"hljs-literal\">true</span>,    <span class=\"hljs-attr\">onMatch</span>: {      <span class=\"hljs-attr\">cloneDeep</span>: <span class=\"hljs-literal\">false</span>,      <span class=\"hljs-attr\">skipChildren</span>: <span class=\"hljs-literal\">false</span>,      <span class=\"hljs-attr\">keepIfEmpty</span>: <span class=\"hljs-literal\">true</span>,    },    <span class=\"hljs-attr\">onNotMatch</span>: {      <span class=\"hljs-attr\">cloneDeep</span>: <span class=\"hljs-literal\">false</span>,      <span class=\"hljs-attr\">skipChildren</span>: <span class=\"hljs-literal\">false</span>,      <span class=\"hljs-attr\">keepIfEmpty</span>: <span class=\"hljs-literal\">false</span>,    }  }) => object</code></pre><ul><li><code>obj</code> - The object/array to pick from.</li><li><code>paths</code> - array or single path criteria to pick. Can be string or regex. In case if string every path will be tested if it's end equal to given criteria, key by key from the end.</li><li><code>options</code><ul><li><code>checkCircular</code> (false) - Check each value to not be one of the parents, to avoid circular references.</li><li><code>keepCircular</code> (true) - The result object will contain circular references if they passed the filter.</li><li><code>replaceCircularBy</code> (no defaults) - Specify the value to replace circular references by.</li><li><code>condense</code> (true) - Condense the result object, since excluding some paths may produce sparse arrays.</li><li><code>onMatch</code> (object) - describes how current value should be processed, if current path matches the criteria. By default it will be copied into result object without deep cloning, and all it's deeper children will be inspected.<ul><li><code>skipChildren</code> (false) - skip or iterate over value's children</li><li><code>cloneDeep</code> (false) - deeply clone current value into result or copy primitives only and create empty array/object without nested data.</li><li><code>keepIfEmpty</code> (true) - keep empty array/object in the result, if all the children were filtered out/not exist.</li></ul></li><li><code>onNotMatch</code> (object) - describes how current value should be processed, if current path NOT matches the criteria. By default it will be completely excluded from the result object and deeper children check will be skiped.<ul><li><code>cloneDeep</code> (false)</li><li><code>skipChildren</code> (false)</li><li><code>keepIfEmpty</code> (false)</li></ul></li></ul></li><li><code>returns</code> - object/array with picked values only</li></ul><p><strong>Example:</strong></p><pre><code class=\"hljs language-js\">  <span class=\"hljs-keyword\">let</span> obj = {    <span class=\"hljs-attr\">good1</span>: <span class=\"hljs-literal\">true</span>,    <span class=\"hljs-attr\">bad1</span>: <span class=\"hljs-literal\">false</span>,    <span class=\"hljs-attr\">good2</span>: { <span class=\"hljs-attr\">good3</span>: <span class=\"hljs-literal\">true</span>, <span class=\"hljs-attr\">bad3</span>: <span class=\"hljs-literal\">true</span> },    <span class=\"hljs-attr\">bad2</span>: { <span class=\"hljs-attr\">good</span>: <span class=\"hljs-literal\">true</span> },    <span class=\"hljs-attr\">good4</span>: [{ <span class=\"hljs-attr\">good5</span>: <span class=\"hljs-literal\">true</span>, <span class=\"hljs-attr\">bad5</span>: <span class=\"hljs-literal\">true</span> }],    <span class=\"hljs-attr\">bad4</span>: [],  };  <span class=\"hljs-keyword\">let</span> clean = _.pickDeep(obj, [<span class=\"hljs-string\">'good'</span>, <span class=\"hljs-string\">'good1'</span>, <span class=\"hljs-string\">'good2'</span>, <span class=\"hljs-string\">'good3'</span>, <span class=\"hljs-string\">'good4'</span>, <span class=\"hljs-string\">'good5'</span>]);  <span class=\"hljs-built_in\">console</span>.log(clean);  clean = _.pickDeep(obj, <span class=\"hljs-regexp\">/\\.?good\\d*$/</span>);  <span class=\"hljs-built_in\">console</span>.log(clean);</code></pre><p>Console(x2):</p><pre><code>{ good1: true,  good2: { good3: true },  bad2: { good: true },  good4: [ { good5: true } ] }</code></pre><p><a href=\"https://codepen.io/yurigor/pen/MdgqmL?editors=0010\">Try it yourself \u203a\u203a\u203a</a></p><h2 id=\"omitdeep\"><a href=\"#omitdeep\" aria-hidden=\"true\" tabindex=\"-1\"><i class=\"material-icons\">link</i></a>omitDeep</h2><p>returns an object without given path endings or regexes</p><pre><code class=\"hljs language-js\">_.omitDeep( obj, paths, options={    <span class=\"hljs-attr\">checkCircular</span>: <span class=\"hljs-literal\">false</span>,    <span class=\"hljs-attr\">keepCircular</span>: <span class=\"hljs-literal\">true</span>,    <span class=\"hljs-comment\">// replaceCircularBy: &#x3C;value>,</span>    <span class=\"hljs-attr\">condense</span>: <span class=\"hljs-literal\">true</span>,    <span class=\"hljs-attr\">onMatch</span>: {      <span class=\"hljs-attr\">cloneDeep</span>: <span class=\"hljs-literal\">false</span>,      <span class=\"hljs-attr\">skipChildren</span>: <span class=\"hljs-literal\">false</span>,      <span class=\"hljs-attr\">keepIfEmpty</span>: <span class=\"hljs-literal\">false</span>,    },    <span class=\"hljs-attr\">onNotMatch</span>: {      <span class=\"hljs-attr\">cloneDeep</span>: <span class=\"hljs-literal\">false</span>,      <span class=\"hljs-attr\">skipChildren</span>: <span class=\"hljs-literal\">false</span>,      <span class=\"hljs-attr\">keepIfEmpty</span>: <span class=\"hljs-literal\">true</span>,    }  }) => object</code></pre><ul><li><code>obj</code> - The object to exclude from.</li><li><code>paths</code> -  - array or single path criteria to omit. Can be string or regex. In case if string every path will be tested if it's end equal to given criteria, key by key from the end.</li><li><code>options</code><ul><li><code>checkCircular</code> (false) - Check each value to not be one of the parents, to avoid circular references.</li><li><code>keepCircular</code> (true) - The result object will contain circular references if they passed the filter.</li><li><code>replaceCircularBy</code> (no defaults) - Specify the value to replace circular references by.</li><li><code>condense</code> (true) - Condense the result object, since excluding some paths may produce sparse arrays</li><li><code>onMatch</code> (object) - describes how current value should be processed, if current path matches the criteria. By default it will be completely excluded from the result object and deeper children check will be skiped.<ul><li><code>skipChildren</code> (false) - skip or iterate over value's children</li><li><code>cloneDeep</code> (false) - deeply clone current value into result or copy primitives only and create empty array/object without nested data.</li><li><code>keepIfEmpty</code> (false) - keep empty array/object in the result, if all the children were filtered out/not exist.</li></ul></li><li><code>onNotMatch</code> (object) - describes how current value should be processed, if current path NOT matches the criteria. By default it will be copied into result object without deep cloning, and all it's deeper children will be inspected.<ul><li><code>cloneDeep</code> (false)</li><li><code>skipChildren</code> (false)</li><li><code>keepIfEmpty</code> (true)</li></ul></li></ul></li><li><code>returns</code> - object without specified values.</li></ul><p><strong>Example:</strong></p><pre><code class=\"hljs language-js\">  <span class=\"hljs-keyword\">let</span> obj = {    <span class=\"hljs-attr\">good1</span>: <span class=\"hljs-literal\">true</span>,    <span class=\"hljs-attr\">bad1</span>: <span class=\"hljs-literal\">false</span>,    <span class=\"hljs-attr\">good2</span>: { <span class=\"hljs-attr\">good3</span>: <span class=\"hljs-literal\">true</span>, <span class=\"hljs-attr\">bad3</span>: <span class=\"hljs-literal\">false</span> },    <span class=\"hljs-attr\">bad2</span>: { <span class=\"hljs-attr\">good</span>: <span class=\"hljs-literal\">true</span> },    <span class=\"hljs-attr\">good4</span>: [{ <span class=\"hljs-attr\">good5</span>: <span class=\"hljs-literal\">true</span>, <span class=\"hljs-attr\">bad5</span>: <span class=\"hljs-literal\">false</span> }],    <span class=\"hljs-attr\">bad4</span>: [],  };  <span class=\"hljs-keyword\">var</span> clean = _.omitDeep(obj, [<span class=\"hljs-string\">'bad1'</span>, <span class=\"hljs-string\">'bad2'</span>, <span class=\"hljs-string\">'bad3'</span>, <span class=\"hljs-string\">'bad4'</span>, <span class=\"hljs-string\">'bad5'</span>]);  <span class=\"hljs-built_in\">console</span>.log(clean);  clean = _.omitDeep(obj, <span class=\"hljs-regexp\">/\\.?bad\\d*$/</span>);  <span class=\"hljs-built_in\">console</span>.log(clean);</code></pre><p>Console:</p><pre><code>{ good1: true,  good2: { good3: true },  bad2: { good: true },  good4: [{ good5: true }] }</code></pre><p><a href=\"https://codepen.io/yurigor/pen/zQOMNj?editors=0010\">Try it yourself \u203a\u203a\u203a</a></p><h2 id=\"reducedeep\"><a href=\"#reducedeep\" aria-hidden=\"true\" tabindex=\"-1\"><i class=\"material-icons\">link</i></a>reduceDeep</h2><p>Reduces object to a value which is the accumulated result of running each nested property/element in the object thru iteratee, where each invocation is supplied the return value of the previous.If accumulator is not given, the first value will be used as the initial value and will not be passed into ieratee.The iteratee is invoked with five arguments:(accumulator, value, key, parentValue, context).</p><pre><code class=\"hljs language-js\">_.reduceDeep( obj, iteratee, accumulator, options) => object</code></pre><ul><li><code>obj</code> - The object/array to iterate over.</li><li><code>iteratee</code> (_.identity) - The function invoked per iteration with five arguments (see <a href=\"#iteratee\">iteratee subsection</a> for details)<ul><li><code>accumulator</code> - most recent returned iteratee result or initial value or first value</li><li><code>value</code></li><li><code>key|index</code></li><li><code>parentValue</code></li><li><code>context</code></li></ul></li><li><code>accumulator</code> - initial accumulator value. The very first iterated value will be used if undefined. In this case such value will not be passed into iteratee.</li><li><code>options</code> - (see <a href=\"#eachdeep\">eachDeep options</a> for details)<ul><li><code>callbackAfterIterate</code> (false)</li><li><code>checkCircular</code> (false)</li><li><code>leavesOnly</code> (false)</li><li><code>pathFormat</code> ('string')</li><li><code>includeRoot</code> (!_.isArray(obj))</li><li><code>childrenPath</code> (undefined)</li><li><code>rootIsChildren</code> (!includeRoot &#x26;&#x26; _.isArray(obj))</li></ul></li><li><code>returns</code> - final <code>accumulator</code> value</li></ul><p><strong>Example:</strong></p><pre><code class=\"hljs language-js\">  <span class=\"hljs-keyword\">let</span> max = _.reduceDeep({ <span class=\"hljs-attr\">a</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-attr\">b</span>: <span class=\"hljs-number\">3</span>, <span class=\"hljs-attr\">c</span>: { <span class=\"hljs-attr\">d</span>: <span class=\"hljs-number\">6</span>, <span class=\"hljs-attr\">e</span>: [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">8</span>] } },    <span class=\"hljs-function\">(<span class=\"hljs-params\">acc, value, key, parent, ctx</span>) =></span> {      <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> value == <span class=\"hljs-string\">'number'</span> &#x26;&#x26; (<span class=\"hljs-keyword\">typeof</span> acc != <span class=\"hljs-string\">'number'</span> || value > acc))        <span class=\"hljs-keyword\">return</span> value;      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">undefined</span>;    }  );  <span class=\"hljs-comment\">// max == 8</span></code></pre><p><a href=\"https://codepen.io/yurigor/pen/ZNzmmR?editors=0010\">Try it yourself \u203a\u203a\u203a</a></p><h2 id=\"somedeep\"><a href=\"#somedeep\" aria-hidden=\"true\" tabindex=\"-1\"><i class=\"material-icons\">link</i></a>someDeep</h2><p>Returns true if some matching deep value found otherwise returns false.</p><pre><code class=\"hljs language-js\">_.someDeep( obj, predicate, options={    <span class=\"hljs-attr\">checkCircular</span>: <span class=\"hljs-literal\">false</span>,    <span class=\"hljs-attr\">leavesOnly</span>: childrenPath!==<span class=\"hljs-literal\">undefined</span>,    <span class=\"hljs-attr\">pathFormat</span>: <span class=\"hljs-string\">'string'</span>,    <span class=\"hljs-attr\">includeRoot</span>: !_.isArray(obj),    <span class=\"hljs-attr\">childrenPath</span>: <span class=\"hljs-literal\">undefined</span>,    <span class=\"hljs-attr\">rootIsChildren</span>: !includeRoot &#x26;&#x26; _.isArray(obj),  }) => boolean</code></pre><ul><li><code>obj</code> - The object/array to iterate over.</li><li><code>predicate</code> - The predicate is invoked with same arguments as described in <a href=\"#iteratee\">iteratee subsection</a><ul><li>If returns <code>true</code> for some deep value - true will be returned by someDeep and search will be stopped.</li></ul></li><li><code>options</code><ul><li><code>checkCircular</code> (false) - Check each value to not be one of the parents, to avoid circular references.</li><li><code>pathFormat</code> ('string') - specifies <code>'string'</code> or <code>'array'</code> format of paths passed to the iteratee.</li><li><code>leavesOnly</code> (options.childrenPath === undefined) - Call predicate for childless values only.</li><li><code>includeRoot</code> (!_.isArray(obj)) - treat given object as a valid part of the tree, so it will be passed into iteratee with undefined key/path/parent. By default true if obj is not array.</li><li><code>childrenPath</code> (undefined) - children collection's field name, path or array of any of this. Only elements of such collections will be passed into predicate, if specified.</li><li><code>rootIsChildren</code> (!includeRoot &#x26;&#x26; _.isArray(obj)) - treat <code>obj</code> as a top-level children collection, so its elements will be passed into predicate without parent path check. Considered only if <code>childrenPath</code> specified. By default true for arrays if not <code>includeRoot</code>.</li></ul></li><li><code>returns</code> - true if some deep value found or false if not.</li></ul><p><a href=\"https://codepen.io/yurigor\">Try it yourself (no yet) \u203a\u203a\u203a</a></p><h2 id=\"pathtostring\"><a href=\"#pathtostring\" aria-hidden=\"true\" tabindex=\"-1\"><i class=\"material-icons\">link</i></a>pathToString</h2><p>Converts given path from array to string format.</p><pre><code class=\"hljs language-js\">_.pathToString( path, ...prefixes ) => string;</code></pre><ul><li><code>path</code> - path in array format</li><li><code>...prefixes</code> - any number of string prefixes to prepend result path correctly (with or without dots)</li><li><code>returns</code> - path in string format</li></ul><p><strong>Example:</strong></p><pre><code class=\"hljs language-js\">  <span class=\"hljs-built_in\">console</span>.log(_.pathToString([<span class=\"hljs-string\">'a'</span>, <span class=\"hljs-string\">'b'</span>, <span class=\"hljs-string\">'c'</span>, <span class=\"hljs-string\">'defg'</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-string\">'1'</span>, <span class=\"hljs-number\">2.3</span>]));</code></pre><p>Console:</p><pre><code>  a.b.c.defg[0][1][\"2.3\"]</code></pre><p><a href=\"https://codepen.io/yurigor/pen/joNXGv?editors=0010\">Try it yourself \u203a\u203a\u203a</a></p><h2 id=\"other-traversal-methods\"><a href=\"#other-traversal-methods\" aria-hidden=\"true\" tabindex=\"-1\"><i class=\"material-icons\">link</i></a>Other traversal methods</h2><p>Feel free <a href=\"https://github.com/YuriGor/deepdash/issues/new\">to request</a> other methods implementation.</p></div></section></main></div><div class=\"hide-till-mounted-sm jss14\" style=\"width:240px;transform:translate3d(0px,0,0)\"><div class=\"MuiInputBase-root MuiInput-root MuiInput-underline jss16\"><select class=\"MuiNativeSelect-root MuiNativeSelect-select MuiInputBase-input MuiInput-input\" name=\"age\"><option selected=\"\" value=\"/\">v5.1.0</option><option value=\"/v4.6.0\">v4.6.0</option><option value=\"/v3.1.0\">v3.1.0</option><option value=\"/v2.1.0\">v2.1.0</option><option value=\"/v2.0.0\">v2.0.0</option><option value=\"/v1.9.5\">v1.9.5</option></select><svg class=\"MuiSvgIcon-root MuiNativeSelect-icon\" focusable=\"false\" viewBox=\"0 0 24 24\" aria-hidden=\"true\"><path d=\"M7 10l5 5 5-5z\"></path></svg></div><div class=\"jss17\"><button class=\"MuiButtonBase-root MuiIconButton-root\" tabindex=\"0\" type=\"button\" aria-label=\"Close Sidebar\"><span class=\"MuiIconButton-label\"><svg class=\"MuiSvgIcon-root MuiSvgIcon-fontSizeSmall\" focusable=\"false\" viewBox=\"0 0 24 24\" aria-hidden=\"true\"><path d=\"M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z\"></path></svg></span></button></div><hr class=\"MuiDivider-root\"/><a class=\"MuiButtonBase-root MuiListItem-root MuiListItem-gutters MuiListItem-button\" tabindex=\"0\" aria-disabled=\"false\" href=\"/\"><div class=\"MuiListItemIcon-root\"><svg class=\"MuiSvgIcon-root\" focusable=\"false\" viewBox=\"0 0 24 24\" aria-hidden=\"true\"><path d=\"M19,2L14,6.5V17.5L19,13V2M6.5,5C4.55,5 2.45,5.4 1,6.5V21.16C1,21.41 1.25,21.66 1.5,21.66C1.6,21.66 1.65,21.59 1.75,21.59C3.1,20.94 5.05,20.5 6.5,20.5C8.45,20.5 10.55,20.9 12,22C13.35,21.15 15.8,20.5 17.5,20.5C19.15,20.5 20.85,20.81 22.25,21.56C22.35,21.61 22.4,21.59 22.5,21.59C22.75,21.59 23,21.34 23,21.09V6.5C22.4,6.05 21.75,5.75 21,5.5V7.5L21,13V19C19.9,18.65 18.7,18.5 17.5,18.5C15.8,18.5 13.35,19.15 12,20V13L12,8.5V6.5C10.55,5.4 8.45,5 6.5,5V5Z\"></path></svg></div><div class=\"MuiListItemText-root\"><span class=\"MuiTypography-root MuiListItemText-primary MuiTypography-body1 MuiTypography-displayBlock\">Docs</span></div></a><ul class=\"MuiList-root jss18 MuiList-padding\"><a class=\"MuiButtonBase-root MuiListItem-root MuiListItem-gutters MuiListItem-button\" tabindex=\"0\" aria-disabled=\"false\" href=\"#installation\"><div class=\"MuiListItemIcon-root\"><svg class=\"MuiSvgIcon-root\" focusable=\"false\" viewBox=\"0 0 24 24\" aria-hidden=\"true\"><path d=\"M12,17L7,12H10V8H14V12H17L12,17M21,16.5C21,16.88 20.79,17.21 20.47,17.38L12.57,21.82C12.41,21.94 12.21,22 12,22C11.79,22 11.59,21.94 11.43,21.82L3.53,17.38C3.21,17.21 3,16.88 3,16.5V7.5C3,7.12 3.21,6.79 3.53,6.62L11.43,2.18C11.59,2.06 11.79,2 12,2C12.21,2 12.41,2.06 12.57,2.18L20.47,6.62C20.79,6.79 21,7.12 21,7.5V16.5M12,4.15L5,8.09V15.91L12,19.85L19,15.91V8.09L12,4.15Z\"></path></svg></div><div class=\"MuiListItemText-root\"><span class=\"MuiTypography-root MuiListItemText-primary MuiTypography-body1 MuiTypography-displayBlock\">Installation</span></div></a><a class=\"MuiButtonBase-root MuiListItem-root MuiListItem-gutters MuiListItem-button\" tabindex=\"0\" aria-disabled=\"false\" href=\"#usage\"><div class=\"MuiListItemIcon-root\"><svg class=\"MuiSvgIcon-root\" focusable=\"false\" viewBox=\"0 0 24 24\" aria-hidden=\"true\"><path d=\"M10 16.5l6-4.5-6-4.5v9zM12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8z\"></path></svg></div><div class=\"MuiListItemText-root\"><span class=\"MuiTypography-root MuiListItemText-primary MuiTypography-body1 MuiTypography-displayBlock\">Usage</span></div></a><a class=\"MuiButtonBase-root MuiListItem-root MuiListItem-gutters MuiListItem-button\" tabindex=\"0\" aria-disabled=\"false\" href=\"#methods\"><div class=\"MuiListItemIcon-root\"><svg class=\"MuiSvgIcon-root\" focusable=\"false\" viewBox=\"0 0 24 24\" aria-hidden=\"true\"><path d=\"M12.42,5.29C11.32,5.19 10.35,6 10.25,7.11L10,10H12.82V12H9.82L9.38,17.07C9.18,19.27 7.24,20.9 5.04,20.7C3.79,20.59 2.66,19.9 2,18.83L3.5,17.33C3.83,18.38 4.96,18.97 6,18.63C6.78,18.39 7.33,17.7 7.4,16.89L7.82,12H4.82V10H8L8.27,6.93C8.46,4.73 10.39,3.1 12.6,3.28C13.86,3.39 15,4.09 15.66,5.17L14.16,6.67C13.91,5.9 13.23,5.36 12.42,5.29M22,13.65L20.59,12.24L17.76,15.07L14.93,12.24L13.5,13.65L16.35,16.5L13.5,19.31L14.93,20.72L17.76,17.89L20.59,20.72L22,19.31L19.17,16.5L22,13.65Z\"></path></svg></div><div class=\"MuiListItemText-root\"><span class=\"MuiTypography-root MuiListItemText-primary MuiTypography-body1 MuiTypography-displayBlock\">Methods</span></div></a><ul class=\"MuiList-root jss22 MuiList-padding\"><a class=\"MuiButtonBase-root MuiListItem-root MuiListItem-gutters MuiListItem-button\" tabindex=\"0\" aria-disabled=\"false\" href=\"#condense\"><div class=\"MuiListItemIcon-root\"><svg class=\"MuiSvgIcon-root\" focusable=\"false\" viewBox=\"0 0 24 24\" aria-hidden=\"true\"><path d=\"M13,20V4H15.03V20H13M10,20V4H12.03V20H10M5,8L9.03,12L5,16V13H2V11H5V8M20,16L16,12L20,8V11H23V13H20V16Z\"></path></svg></div><div class=\"MuiListItemText-root\"><span class=\"MuiTypography-root MuiListItemText-primary MuiTypography-body1 MuiTypography-displayBlock\">condense</span></div></a><a class=\"MuiButtonBase-root MuiListItem-root MuiListItem-gutters MuiListItem-button\" tabindex=\"0\" aria-disabled=\"false\" href=\"#condensedeep\"><div class=\"MuiListItemIcon-root\"><svg class=\"MuiSvgIcon-root\" focusable=\"false\" viewBox=\"0 0 24 24\" aria-hidden=\"true\"><path d=\"M19.5,3.09L20.91,4.5L16.41,9H20V11H13V4H15V7.59L19.5,3.09M20.91,19.5L19.5,20.91L15,16.41V20H13V13H20V15H16.41L20.91,19.5M4.5,3.09L9,7.59V4H11V11H4V9H7.59L3.09,4.5L4.5,3.09M3.09,19.5L7.59,15H4V13H11V20H9V16.41L4.5,20.91L3.09,19.5Z\"></path></svg></div><div class=\"MuiListItemText-root\"><span class=\"MuiTypography-root MuiListItemText-primary MuiTypography-body1 MuiTypography-displayBlock\">condenseDeep</span></div></a><a class=\"MuiButtonBase-root MuiListItem-root MuiListItem-gutters MuiListItem-button\" tabindex=\"0\" aria-disabled=\"false\" href=\"#eachdeep-foreachdeep\"><div class=\"MuiListItemIcon-root\"><svg class=\"MuiSvgIcon-root\" focusable=\"false\" viewBox=\"0 0 24 24\" aria-hidden=\"true\"><path d=\"M3,3H9V7H3V3M15,10H21V14H15V10M15,17H21V21H15V17M13,13H7V18H13V20H7L5,20V9H7V11H13V13Z\"></path></svg></div><div class=\"MuiListItemText-root\"><span class=\"MuiTypography-root MuiListItemText-primary MuiTypography-body1 MuiTypography-displayBlock\">(for)eachDeep</span></div></a><ul class=\"MuiList-root jss22 MuiList-padding\"><a class=\"MuiButtonBase-root MuiListItem-root MuiListItem-gutters MuiListItem-button\" tabindex=\"0\" aria-disabled=\"false\" href=\"#iteratee\"><div class=\"MuiListItemIcon-root\"><svg class=\"MuiSvgIcon-root\" focusable=\"false\" viewBox=\"0 0 24 24\" aria-hidden=\"true\"><path d=\"M13.5,7A6.5,6.5 0 0,1 20,13.5A6.5,6.5 0 0,1 13.5,20H10V18H13.5C16,18 18,16 18,13.5C18,11 16,9 13.5,9H7.83L10.91,12.09L9.5,13.5L4,8L9.5,2.5L10.92,3.91L7.83,7H13.5M6,18H8V20H6V18Z\"></path></svg></div><div class=\"MuiListItemText-root\"><span class=\"MuiTypography-root MuiListItemText-primary MuiTypography-body1 MuiTypography-displayBlock\">iteratee</span></div></a></ul><a class=\"MuiButtonBase-root MuiListItem-root MuiListItem-gutters MuiListItem-button\" tabindex=\"0\" aria-disabled=\"false\" href=\"#exists\"><div class=\"MuiListItemIcon-root\"><svg class=\"MuiSvgIcon-root\" focusable=\"false\" viewBox=\"0 0 24 24\" aria-hidden=\"true\"><path d=\"M15,20A1,1 0 0,0 14,19H13V17H17A2,2 0 0,0 19,15V5A2,2 0 0,0 17,3H7A2,2 0 0,0 5,5V15A2,2 0 0,0 7,17H11V19H10A1,1 0 0,0 9,20H2V22H9A1,1 0 0,0 10,23H14A1,1 0 0,0 15,22H22V20H15M7,15V5H17V15H7M11.95,6C11.17,6 10.55,6.18 10.07,6.5C9.61,6.89 9.38,7.4 9.39,8.1L9.4,8.13H11.11C11.12,7.86 11.2,7.65 11.36,7.5C11.5,7.38 11.72,7.31 11.95,7.31C12.22,7.31 12.45,7.4 12.61,7.56C12.77,7.73 12.85,7.96 12.85,8.22C12.85,8.5 12.78,8.75 12.64,8.95C12.5,9.16 12.33,9.33 12.1,9.5C11.65,9.78 11.34,10.05 11.17,10.29C11,10.5 10.89,10.89 10.89,11.33H12.67C12.67,11.06 12.7,10.84 12.78,10.68C12.86,10.5 13,10.36 13.24,10.21C13.64,10 13.97,9.74 14.22,9.39C14.5,9.03 14.62,8.67 14.62,8.22C14.62,7.55 14.38,7 13.9,6.61C13.42,6.2 12.77,6 11.95,6M10.89,12.22V14H12.67V12.22H10.89Z\"></path></svg></div><div class=\"MuiListItemText-root\"><span class=\"MuiTypography-root MuiListItemText-primary MuiTypography-body1 MuiTypography-displayBlock\">exists</span></div></a><a class=\"MuiButtonBase-root MuiListItem-root MuiListItem-gutters MuiListItem-button\" tabindex=\"0\" aria-disabled=\"false\" href=\"#filterdeep\"><div class=\"MuiListItemIcon-root\"><svg class=\"MuiSvgIcon-root\" focusable=\"false\" viewBox=\"0 0 24 24\" aria-hidden=\"true\"><path d=\"M15,19.88C15.04,20.18 14.94,20.5 14.71,20.71C14.32,21.1 13.69,21.1 13.3,20.71L9.29,16.7C9.06,16.47 8.96,16.16 9,15.87V10.75L4.21,4.62C3.87,4.19 3.95,3.56 4.38,3.22C4.57,3.08 4.78,3 5,3V3H19V3C19.22,3 19.43,3.08 19.62,3.22C20.05,3.56 20.13,4.19 19.79,4.62L15,10.75V19.88M7.04,5L11,10.06V15.58L13,17.58V10.05L16.96,5H7.04Z\"></path></svg></div><div class=\"MuiListItemText-root\"><span class=\"MuiTypography-root MuiListItemText-primary MuiTypography-body1 MuiTypography-displayBlock\">filterDeep</span></div></a><a class=\"MuiButtonBase-root MuiListItem-root MuiListItem-gutters MuiListItem-button\" tabindex=\"0\" aria-disabled=\"false\" href=\"#finddeep\"><div class=\"MuiListItemIcon-root\"><svg class=\"MuiSvgIcon-root\" focusable=\"false\" viewBox=\"0 0 24 24\" aria-hidden=\"true\"><path d=\"M19.31 18.9C19.75 18.21 20 17.38 20 16.5C20 14 18 12 15.5 12S11 14 11 16.5 13 21 15.5 21C16.37 21 17.19 20.75 17.88 20.32L21 23.39L22.39 22L19.31 18.9M15.5 19C14.12 19 13 17.88 13 16.5S14.12 14 15.5 14 18 15.12 18 16.5 16.88 19 15.5 19M21 9H19V7H21V9M21 5H19V3H20C20.55 3 21 3.45 21 4V5M19 11.03V11H21V13H20.97C20.46 12.21 19.79 11.54 19 11.03M17 5H15V3H17V5M13 5H11V3H13V5M3 7H5V9H3V7M7 19H9V21H7V19M3 11H5V13H3V11M4 3H5V5H3V4C3 3.45 3.45 3 4 3M9 5H7V3H9V5M3 19H5V21H4C3.45 21 3 20.55 3 20V19M3 15H5V17H3V15Z\"></path></svg></div><div class=\"MuiListItemText-root\"><span class=\"MuiTypography-root MuiListItemText-primary MuiTypography-body1 MuiTypography-displayBlock\">findDeep</span></div></a><a class=\"MuiButtonBase-root MuiListItem-root MuiListItem-gutters MuiListItem-button\" tabindex=\"0\" aria-disabled=\"false\" href=\"#findvaluedeep\"><div class=\"MuiListItemIcon-root\"><svg class=\"MuiSvgIcon-root\" focusable=\"false\" viewBox=\"0 0 24 24\" aria-hidden=\"true\"><path d=\"M19.31 18.9C19.75 18.21 20 17.38 20 16.5C20 14 18 12 15.5 12S11 14 11 16.5 13 21 15.5 21C16.37 21 17.19 20.75 17.88 20.32L21 23.39L22.39 22L19.31 18.9M15.5 19C14.12 19 13 17.88 13 16.5S14.12 14 15.5 14 18 15.12 18 16.5 16.88 19 15.5 19M9.59 19.2L3 14.07L4.62 12.81L9 16.22C9 16.32 9 16.41 9 16.5C9 17.46 9.22 18.38 9.59 19.2M9.5 14.04L3 9L12 2L21 9L18.66 10.82C17.96 10.44 17.19 10.18 16.37 10.07L17.74 9L12 4.53L6.26 9L10.53 12.32C10.1 12.84 9.74 13.42 9.5 14.04Z\"></path></svg></div><div class=\"MuiListItemText-root\"><span class=\"MuiTypography-root MuiListItemText-primary MuiTypography-body1 MuiTypography-displayBlock\">findValueDeep</span></div></a><a class=\"MuiButtonBase-root MuiListItem-root MuiListItem-gutters MuiListItem-button\" tabindex=\"0\" aria-disabled=\"false\" href=\"#findpathdeep\"><div class=\"MuiListItemIcon-root\"><svg class=\"MuiSvgIcon-root\" focusable=\"false\" viewBox=\"0 0 24 24\" aria-hidden=\"true\"><path d=\"M15.5,12C18,12 20,14 20,16.5C20,17.38 19.75,18.2 19.31,18.9L22.39,22L21,23.39L17.88,20.32C17.19,20.75 16.37,21 15.5,21C13,21 11,19 11,16.5C11,14 13,12 15.5,12M15.5,14A2.5,2.5 0 0,0 13,16.5A2.5,2.5 0 0,0 15.5,19A2.5,2.5 0 0,0 18,16.5A2.5,2.5 0 0,0 15.5,14M19.5,2A0.5,0.5 0 0,1 20,2.5V11.81C19.42,11.26 18.75,10.81 18,10.5V4.7L15,5.86V10C14.3,10.07 13.62,10.24 13,10.5V5.87L9,4.47V16.13H9V16.5C9,17.14 9.09,17.76 9.26,18.34L8,17.9L2.66,19.97L2.5,20A0.5,0.5 0 0,1 2,19.5V4.38C2,4.15 2.15,3.97 2.36,3.9L8,2L14,4.1L19.34,2.03L19.5,2M4,5.46V17.31L7,16.15V4.45L4,5.46Z\"></path></svg></div><div class=\"MuiListItemText-root\"><span class=\"MuiTypography-root MuiListItemText-primary MuiTypography-body1 MuiTypography-displayBlock\">findPathDeep</span></div></a><a class=\"MuiButtonBase-root MuiListItem-root MuiListItem-gutters MuiListItem-button\" tabindex=\"0\" aria-disabled=\"false\" href=\"#index\"><div class=\"MuiListItemIcon-root\"><svg class=\"MuiSvgIcon-root\" focusable=\"false\" viewBox=\"0 0 24 24\" aria-hidden=\"true\"><path d=\"M7,5H21V7H7V5M7,13V11H21V13H7M4,4.5A1.5,1.5 0 0,1 5.5,6A1.5,1.5 0 0,1 4,7.5A1.5,1.5 0 0,1 2.5,6A1.5,1.5 0 0,1 4,4.5M4,10.5A1.5,1.5 0 0,1 5.5,12A1.5,1.5 0 0,1 4,13.5A1.5,1.5 0 0,1 2.5,12A1.5,1.5 0 0,1 4,10.5M7,19V17H21V19H7M4,16.5A1.5,1.5 0 0,1 5.5,18A1.5,1.5 0 0,1 4,19.5A1.5,1.5 0 0,1 2.5,18A1.5,1.5 0 0,1 4,16.5Z\"></path></svg></div><div class=\"MuiListItemText-root\"><span class=\"MuiTypography-root MuiListItemText-primary MuiTypography-body1 MuiTypography-displayBlock\">index</span></div></a><a class=\"MuiButtonBase-root MuiListItem-root MuiListItem-gutters MuiListItem-button\" tabindex=\"0\" aria-disabled=\"false\" href=\"#paths-keysdeep\"><div class=\"MuiListItemIcon-root\"><svg class=\"MuiSvgIcon-root\" focusable=\"false\" viewBox=\"0 0 24 24\" aria-hidden=\"true\"><path d=\"M12,16A2,2 0 0,1 14,18A2,2 0 0,1 12,20A2,2 0 0,1 10,18A2,2 0 0,1 12,16M12,10A2,2 0 0,1 14,12A2,2 0 0,1 12,14A2,2 0 0,1 10,12A2,2 0 0,1 12,10M12,4A2,2 0 0,1 14,6A2,2 0 0,1 12,8A2,2 0 0,1 10,6A2,2 0 0,1 12,4Z\"></path></svg></div><div class=\"MuiListItemText-root\"><span class=\"MuiTypography-root MuiListItemText-primary MuiTypography-body1 MuiTypography-displayBlock\">paths(keysDeep)</span></div></a><a class=\"MuiButtonBase-root MuiListItem-root MuiListItem-gutters MuiListItem-button\" tabindex=\"0\" aria-disabled=\"false\" href=\"#pickdeep\"><div class=\"MuiListItemIcon-root\"><svg class=\"MuiSvgIcon-root\" focusable=\"false\" viewBox=\"0 0 24 24\" aria-hidden=\"true\"><path d=\"M2,16H10V14H2M18,14V10H16V14H12V16H16V20H18V16H22V14M14,6H2V8H14M14,10H2V12H14V10Z\"></path></svg></div><div class=\"MuiListItemText-root\"><span class=\"MuiTypography-root MuiListItemText-primary MuiTypography-body1 MuiTypography-displayBlock\">pickDeep</span></div></a><a class=\"MuiButtonBase-root MuiListItem-root MuiListItem-gutters MuiListItem-button\" tabindex=\"0\" aria-disabled=\"false\" href=\"#omitdeep\"><div class=\"MuiListItemIcon-root\"><svg class=\"MuiSvgIcon-root\" focusable=\"false\" viewBox=\"0 0 24 24\" aria-hidden=\"true\"><path d=\"M2,6V8H14V6H2M2,10V12H11V10H2M14.17,10.76L12.76,12.17L15.59,15L12.76,17.83L14.17,19.24L17,16.41L19.83,19.24L21.24,17.83L18.41,15L21.24,12.17L19.83,10.76L17,13.59L14.17,10.76M2,14V16H11V14H2Z\"></path></svg></div><div class=\"MuiListItemText-root\"><span class=\"MuiTypography-root MuiListItemText-primary MuiTypography-body1 MuiTypography-displayBlock\">omitDeep</span></div></a><a class=\"MuiButtonBase-root MuiListItem-root MuiListItem-gutters MuiListItem-button\" tabindex=\"0\" aria-disabled=\"false\" href=\"#mapdeep\"><div class=\"MuiListItemIcon-root\"><svg class=\"MuiSvgIcon-root\" focusable=\"false\" viewBox=\"0 0 24 24\" aria-hidden=\"true\"><path d=\"M2,2H11V6H9V4H4V9H6V11H2V2M22,13V22H13V18H15V20H20V15H18V13H22M8,8H16V16H8V8Z\"></path></svg></div><div class=\"MuiListItemText-root\"><span class=\"MuiTypography-root MuiListItemText-primary MuiTypography-body1 MuiTypography-displayBlock\">mapDeep</span></div></a><a class=\"MuiButtonBase-root MuiListItem-root MuiListItem-gutters MuiListItem-button\" tabindex=\"0\" aria-disabled=\"false\" href=\"#mapvaluesdeep\"><div class=\"MuiListItemIcon-root\"><svg class=\"MuiSvgIcon-root\" focusable=\"false\" viewBox=\"0 0 24 24\" aria-hidden=\"true\"><path d=\"M15,2C16.94,2 18.59,2.7 19.95,4.05C21.3,5.41 22,7.06 22,9C22,10.56 21.5,11.96 20.58,13.2C19.64,14.43 18.44,15.27 16.97,15.7L17,15.38V15C17,12.81 16.23,10.93 14.65,9.35C13.07,7.77 11.19,7 9,7H8.63L8.3,7.03C8.73,5.56 9.57,4.36 10.8,3.42C12.04,2.5 13.44,2 15,2M9,8A7,7 0 0,1 16,15A7,7 0 0,1 9,22A7,7 0 0,1 2,15A7,7 0 0,1 9,8M9,10A5,5 0 0,0 4,15A5,5 0 0,0 9,20A5,5 0 0,0 14,15A5,5 0 0,0 9,10Z\"></path></svg></div><div class=\"MuiListItemText-root\"><span class=\"MuiTypography-root MuiListItemText-primary MuiTypography-body1 MuiTypography-displayBlock\">mapValuesDeep</span></div></a><a class=\"MuiButtonBase-root MuiListItem-root MuiListItem-gutters MuiListItem-button\" tabindex=\"0\" aria-disabled=\"false\" href=\"#mapkeysdeep\"><div class=\"MuiListItemIcon-root\"><svg class=\"MuiSvgIcon-root\" focusable=\"false\" viewBox=\"0 0 24 24\" aria-hidden=\"true\"><path d=\"M15,12C15,10.7 14.16,9.6 13,9.18V6.82C14.16,6.4 15,5.3 15,4A3,3 0 0,0 12,1A3,3 0 0,0 9,4C9,5.3 9.84,6.4 11,6.82V9.19C9.84,9.6 9,10.7 9,12C9,13.3 9.84,14.4 11,14.82V17.18C9.84,17.6 9,18.7 9,20A3,3 0 0,0 12,23A3,3 0 0,0 15,20C15,18.7 14.16,17.6 13,17.18V14.82C14.16,14.4 15,13.3 15,12M12,3A1,1 0 0,1 13,4A1,1 0 0,1 12,5A1,1 0 0,1 11,4A1,1 0 0,1 12,3M12,21A1,1 0 0,1 11,20A1,1 0 0,1 12,19A1,1 0 0,1 13,20A1,1 0 0,1 12,21Z\"></path></svg></div><div class=\"MuiListItemText-root\"><span class=\"MuiTypography-root MuiListItemText-primary MuiTypography-body1 MuiTypography-displayBlock\">mapKeysDeep</span></div></a><a class=\"MuiButtonBase-root MuiListItem-root MuiListItem-gutters MuiListItem-button\" tabindex=\"0\" aria-disabled=\"false\" href=\"#reducedeep\"><div class=\"MuiListItemIcon-root\"><svg class=\"MuiSvgIcon-root\" focusable=\"false\" viewBox=\"0 0 24 24\" aria-hidden=\"true\"><path d=\"M12,22A2,2 0 0,1 10,20A2,2 0 0,1 12,18A2,2 0 0,1 14,20A2,2 0 0,1 12,22M13,2V13L17.5,8.5L18.92,9.92L12,16.84L5.08,9.92L6.5,8.5L11,13V2H13Z\"></path></svg></div><div class=\"MuiListItemText-root\"><span class=\"MuiTypography-root MuiListItemText-primary MuiTypography-body1 MuiTypography-displayBlock\">reduceDeep</span></div></a><a class=\"MuiButtonBase-root MuiListItem-root MuiListItem-gutters MuiListItem-button\" tabindex=\"0\" aria-disabled=\"false\" href=\"#somedeep\"><div class=\"MuiListItemIcon-root\"><svg class=\"MuiSvgIcon-root\" focusable=\"false\" viewBox=\"0 0 24 24\" aria-hidden=\"true\"><path d=\"M0 3H18V5C16.9 5 16 5.9 16 7V19C16 20.11 15.11 21 14 21H4C2.9 21 2 20.11 2 19V7C2 5.9 1.11 5 0 5V3M4 5V7H9V8H4V9H7V10H4V11H7V12H4V13H9V14H4V15H7V16H4V19H14V5H4M21.5 15.5V17H20V15.5H21.5M19.5 10.5H18V10C18 8.34 19.34 7 21 7C22.66 7 24 8.34 24 10C24 10.97 23.5 11.88 22.71 12.41L22.41 12.6C21.84 13 21.5 13.62 21.5 14.3V14.5H20V14.3C20 13.11 20.6 12 21.59 11.35L21.88 11.16C22.27 10.9 22.5 10.47 22.5 10C22.5 9.18 21.83 8.5 21 8.5C20.17 8.5 19.5 9.17 19.5 10V10.5Z\"></path></svg></div><div class=\"MuiListItemText-root\"><span class=\"MuiTypography-root MuiListItemText-primary MuiTypography-body1 MuiTypography-displayBlock\">someDeep</span></div></a><a class=\"MuiButtonBase-root MuiListItem-root MuiListItem-gutters MuiListItem-button\" tabindex=\"0\" aria-disabled=\"false\" href=\"#pathtostring\"><div class=\"MuiListItemIcon-root\"><svg class=\"MuiSvgIcon-root\" focusable=\"false\" viewBox=\"0 0 24 24\" aria-hidden=\"true\"><path d=\"M18,15A3,3 0 0,1 21,18A3,3 0 0,1 18,21C16.69,21 15.58,20.17 15.17,19H14V17H15.17C15.58,15.83 16.69,15 18,15M18,17A1,1 0 0,0 17,18A1,1 0 0,0 18,19A1,1 0 0,0 19,18A1,1 0 0,0 18,17M18,8A1.43,1.43 0 0,0 19.43,6.57C19.43,5.78 18.79,5.14 18,5.14C17.21,5.14 16.57,5.78 16.57,6.57A1.43,1.43 0 0,0 18,8M18,2.57A4,4 0 0,1 22,6.57C22,9.56 18,14 18,14C18,14 14,9.56 14,6.57A4,4 0 0,1 18,2.57M8.83,17H10V19H8.83C8.42,20.17 7.31,21 6,21A3,3 0 0,1 3,18C3,16.69 3.83,15.58 5,15.17V14H7V15.17C7.85,15.47 8.53,16.15 8.83,17M6,17A1,1 0 0,0 5,18A1,1 0 0,0 6,19A1,1 0 0,0 7,18A1,1 0 0,0 6,17M6,3A3,3 0 0,1 9,6C9,7.31 8.17,8.42 7,8.83V10H5V8.83C3.83,8.42 3,7.31 3,6A3,3 0 0,1 6,3M6,5A1,1 0 0,0 5,6A1,1 0 0,0 6,7A1,1 0 0,0 7,6A1,1 0 0,0 6,5M11,19V17H13V19H11M7,13H5V11H7V13Z\"></path></svg></div><div class=\"MuiListItemText-root\"><span class=\"MuiTypography-root MuiListItemText-primary MuiTypography-body1 MuiTypography-displayBlock\">pathToString</span></div></a></ul><a class=\"MuiButtonBase-root MuiListItem-root MuiListItem-gutters MuiListItem-button\" tabindex=\"0\" aria-disabled=\"false\" href=\"/changelog\"><div class=\"MuiListItemIcon-root\"><svg class=\"MuiSvgIcon-root\" focusable=\"false\" viewBox=\"0 0 24 24\" aria-hidden=\"true\"><path d=\"M10,18H6V16H10V18M10,14H6V12H10V14M10,1V2H6C4.89,2 4,2.89 4,4V20A2,2 0 0,0 6,22H10V23H12V1H10M20,8V20C20,21.11 19.11,22 18,22H14V20H18V11H14V9H18.5L14,4.5V2L20,8M16,14H14V12H16V14M16,18H14V16H16V18Z\"></path></svg></div><div class=\"MuiListItemText-root\"><span class=\"MuiTypography-root MuiListItemText-primary MuiTypography-body1 MuiTypography-displayBlock\">Change Log</span></div></a></ul><hr class=\"MuiDivider-root\"/><li class=\"MuiListItem-root MuiListItem-gutters\"><div class=\"MuiListItemIcon-root\"><svg class=\"MuiSvgIcon-root\" focusable=\"false\" viewBox=\"0 0 24 24\" aria-hidden=\"true\"><path d=\"M20,2H4A2,2 0 0,0 2,4V22L6,18H20A2,2 0 0,0 22,16V4C22,2.89 21.1,2 20,2Z\"></path></svg></div><div class=\"MuiListItemText-root\"><span class=\"MuiTypography-root MuiListItemText-primary MuiTypography-body1 MuiTypography-displayBlock\">Contact</span></div></li><ul class=\"MuiList-root jss19 MuiList-padding\"><a class=\"MuiButtonBase-root MuiListItem-root MuiListItem-gutters MuiListItem-button\" tabindex=\"0\" aria-disabled=\"false\" href=\"https://spectrum.chat/deepdash\"><div class=\"MuiListItemIcon-root\"><svg class=\"MuiSvgIcon-root\" focusable=\"false\" viewBox=\"0 0 24 24\" aria-hidden=\"true\"><path d=\"M17,12V3A1,1 0 0,0 16,2H3A1,1 0 0,0 2,3V17L6,13H16A1,1 0 0,0 17,12M21,6H19V15H6V17A1,1 0 0,0 7,18H18L22,22V7A1,1 0 0,0 21,6Z\"></path></svg></div><div class=\"MuiListItemText-root\"><span class=\"MuiTypography-root MuiListItemText-primary MuiTypography-body1 MuiTypography-displayBlock\">Chat</span></div></a><a class=\"MuiButtonBase-root MuiListItem-root MuiListItem-gutters MuiListItem-button\" tabindex=\"0\" aria-disabled=\"false\" href=\"https://github.com/YuriGor/deepdash/issues\"><div class=\"MuiListItemIcon-root\"><svg class=\"MuiSvgIcon-root\" focusable=\"false\" viewBox=\"0 0 24 24\" aria-hidden=\"true\"><path d=\"M12,2A10,10 0 0,0 2,12C2,16.42 4.87,20.17 8.84,21.5C9.34,21.58 9.5,21.27 9.5,21C9.5,20.77 9.5,20.14 9.5,19.31C6.73,19.91 6.14,17.97 6.14,17.97C5.68,16.81 5.03,16.5 5.03,16.5C4.12,15.88 5.1,15.9 5.1,15.9C6.1,15.97 6.63,16.93 6.63,16.93C7.5,18.45 8.97,18 9.54,17.76C9.63,17.11 9.89,16.67 10.17,16.42C7.95,16.17 5.62,15.31 5.62,11.5C5.62,10.39 6,9.5 6.65,8.79C6.55,8.54 6.2,7.5 6.75,6.15C6.75,6.15 7.59,5.88 9.5,7.17C10.29,6.95 11.15,6.84 12,6.84C12.85,6.84 13.71,6.95 14.5,7.17C16.41,5.88 17.25,6.15 17.25,6.15C17.8,7.5 17.45,8.54 17.35,8.79C18,9.5 18.38,10.39 18.38,11.5C18.38,15.32 16.04,16.16 13.81,16.41C14.17,16.72 14.5,17.33 14.5,18.26C14.5,19.6 14.5,20.68 14.5,21C14.5,21.27 14.66,21.59 15.17,21.5C19.14,20.16 22,16.42 22,12A10,10 0 0,0 12,2Z\"></path></svg></div><div class=\"MuiListItemText-root\"><span class=\"MuiTypography-root MuiListItemText-primary MuiTypography-body1 MuiTypography-displayBlock\">Deepdash</span></div></a><a class=\"MuiButtonBase-root MuiListItem-root MuiListItem-gutters MuiListItem-button\" tabindex=\"0\" aria-disabled=\"false\" href=\"https://github.com/YuriGor/deepdash.io/issues\"><div class=\"MuiListItemIcon-root\"><svg class=\"MuiSvgIcon-root\" focusable=\"false\" viewBox=\"0 0 24 24\" aria-hidden=\"true\"><path d=\"M8.95 13.4H6.58A5.5 5.5 0 0 1 6.58 10.6H8.95A11.56 11.56 0 0 0 8.85 12A11.56 11.56 0 0 0 8.95 13.4M7.16 9.2H9.2A12.06 12.06 0 0 1 10.18 6.71A5.55 5.55 0 0 0 7.16 9.2M16.84 9.2A5.59 5.59 0 0 0 13.81 6.71A10.95 10.95 0 0 1 14.78 9.2M12 17.57A9.5 9.5 0 0 0 13.34 14.8H10.66A9.5 9.5 0 0 0 12 17.57M12 6.42A9.53 9.53 0 0 0 10.66 9.2H13.34A9.53 9.53 0 0 0 12 6.42M7.16 14.8A5.61 5.61 0 0 0 10.18 17.29A12.06 12.06 0 0 1 9.2 14.8M21 5V19A2 2 0 0 1 19 21H5A2 2 0 0 1 3 19V5A2 2 0 0 1 5 3H19A2 2 0 0 1 21 5M19 12A7 7 0 1 0 12 19A7 7 0 0 0 19 12M15.15 12A11.56 11.56 0 0 1 15.05 13.4H17.42A5.5 5.5 0 0 0 17.42 10.6H15.05A11.56 11.56 0 0 1 15.15 12M13.81 17.29A5.62 5.62 0 0 0 16.84 14.8H14.78A10.95 10.95 0 0 1 13.81 17.29M10.36 10.6A8.81 8.81 0 0 0 10.36 13.4H13.64A10.3 10.3 0 0 0 13.75 12A10.21 10.21 0 0 0 13.64 10.6Z\"></path></svg></div><div class=\"MuiListItemText-root\"><span class=\"MuiTypography-root MuiListItemText-primary MuiTypography-body1 MuiTypography-displayBlock\">Site</span></div></a><a class=\"MuiButtonBase-root MuiListItem-root MuiListItem-gutters MuiListItem-button\" tabindex=\"0\" aria-disabled=\"false\" href=\"https://twitter.com/gor_yuri\"><div class=\"MuiListItemIcon-root\"><svg class=\"MuiSvgIcon-root\" focusable=\"false\" viewBox=\"0 0 24 24\" aria-hidden=\"true\"><path d=\"M22.46,6C21.69,6.35 20.86,6.58 20,6.69C20.88,6.16 21.56,5.32 21.88,4.31C21.05,4.81 20.13,5.16 19.16,5.36C18.37,4.5 17.26,4 16,4C13.65,4 11.73,5.92 11.73,8.29C11.73,8.63 11.77,8.96 11.84,9.27C8.28,9.09 5.11,7.38 3,4.79C2.63,5.42 2.42,6.16 2.42,6.94C2.42,8.43 3.17,9.75 4.33,10.5C3.62,10.5 2.96,10.3 2.38,10C2.38,10 2.38,10 2.38,10.03C2.38,12.11 3.86,13.85 5.82,14.24C5.46,14.34 5.08,14.39 4.69,14.39C4.42,14.39 4.15,14.36 3.89,14.31C4.43,16 6,17.26 7.89,17.29C6.43,18.45 4.58,19.13 2.56,19.13C2.22,19.13 1.88,19.11 1.54,19.07C3.44,20.29 5.7,21 8.12,21C16,21 20.33,14.46 20.33,8.79C20.33,8.6 20.33,8.42 20.32,8.23C21.16,7.63 21.88,6.87 22.46,6Z\"></path></svg></div><div class=\"MuiListItemText-root\"><span class=\"MuiTypography-root MuiListItemText-primary MuiTypography-body1 MuiTypography-displayBlock\">Twitter</span></div></a><a class=\"MuiButtonBase-root MuiListItem-root MuiListItem-gutters MuiListItem-button\" tabindex=\"0\" aria-disabled=\"false\" href=\"http://yurigor.com/contact-me/\"><div class=\"MuiListItemIcon-root\"><svg class=\"MuiSvgIcon-root\" focusable=\"false\" viewBox=\"0 0 24 24\" aria-hidden=\"true\"><path d=\"M22 6C22 4.9 21.1 4 20 4H4C2.9 4 2 4.9 2 6V18C2 19.1 2.9 20 4 20H20C21.1 20 22 19.1 22 18V6M20 6L12 11L4 6H20M20 18H4V8L12 13L20 8V18Z\"></path></svg></div><div class=\"MuiListItemText-root\"><span class=\"MuiTypography-root MuiListItemText-primary MuiTypography-body1 MuiTypography-displayBlock\">Message</span></div></a></ul></div></div><script id=\"__NEXT_DATA__\" type=\"application/json\">{\"props\":{\"pageProps\":{\"isFromServer\":true}},\"page\":\"/\",\"query\":{},\"buildId\":\"owHw7hId53C_QD4-l9kff\",\"nextExport\":true,\"isFallback\":false,\"gip\":true}</script><script nomodule=\"\" src=\"/_next/static/chunks/polyfills-19dc816a22da91149d66.js\"></script><script src=\"/_next/static/chunks/main-ee8140d3c2c9a56c2c3b.js\" async=\"\"></script><script src=\"/_next/static/chunks/webpack-a2db5744fee61346eaac.js\" async=\"\"></script><script src=\"/_next/static/chunks/framework.52d24885832babe89a39.js\" async=\"\"></script><script src=\"/_next/static/chunks/29107295.bb4a59f3aaca2a61324a.js\" async=\"\"></script><script src=\"/_next/static/chunks/commons.0589e97004bfde00fcd5.js\" async=\"\"></script><script src=\"/_next/static/chunks/d847c5461cf61e090c725137ce8decfd2990fa67.e73073d02f7dff5ff747.js\" async=\"\"></script><script src=\"/_next/static/chunks/pages/_app-4fb5b0e2811f031bbb19.js\" async=\"\"></script><script src=\"/_next/static/chunks/a13dfd38eed438bfd13ab633581e751d2d291663.b803e64f08d2d9b78420.js\" async=\"\"></script><script src=\"/_next/static/chunks/pages/index-ae4fa1df72e7b4847c83.js\" async=\"\"></script><script src=\"/_next/static/owHw7hId53C_QD4-l9kff/_buildManifest.js\" async=\"\"></script><script src=\"/_next/static/owHw7hId53C_QD4-l9kff/_ssgManifest.js\" async=\"\"></script></body></html>",
  "embeddings": []
}
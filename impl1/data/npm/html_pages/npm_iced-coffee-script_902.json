{
  "libtype": "npm",
  "libname": "iced-coffee-script",
  "url": "http://maxtaco.github.io/coffee-script",
  "html": "<!DOCTYPE html><html><head>  <meta http-equiv=\"content-type\" content=\"text/html;charset=UTF-8\" />  <title>IcedCoffeeScript</title>  <link href='http://fonts.googleapis.com/css?family=Open+Sans:300italic,700italic,800italic,300,700,800' rel='stylesheet' type='text/css'>  <link rel=\"stylesheet\" type=\"text/css\" href=\"documentation/css/docs.css\" />  <link rel=\"stylesheet\" type=\"text/css\" href=\"documentation/css/idle.css\" />  <link rel=\"shortcut icon\" href=\"documentation/images/favicon.ico\" />  <!--[if IE]>  <style type=\"text/css\">    div.code:before {background: none;}    body { font-family: Helvetica, Arial, sans-serif; }    #error:before { display:none; }  </style>  <![endif]--></head><body>  <div id=\"flybar\">    <a id=\"logo\" href=\"#top\">IcedCoffeeScript</a>    <div class=\"navigation toc\">      <div class=\"button\">        Table of Contents      </div>      <div class=\"contents menu\">        <a href=\"#installation\">Installation</a>        <a href=\"#iced\">ICS By Example</a>        <a href=\"#iced_basics\">ICS Basics</a>        <a href=\"#iced_control\">ICS Control Flow</a>        <a href=\"#iced_finish\">ICS: Tutorial Conclusion</a>        <a href=\"#iced_more\">ICS: Read More</a>        <a href=\"#usage\">Usage</a>        <a href=\"#overview\">Overview</a>        <a href=\"#language\">Language Reference</a>        <a href=\"#literals\">Literals: Functions, Objects and Arrays</a>        <a href=\"#lexical_scope\">Lexical Scoping and Variable Safety</a>        <a href=\"#conditionals\">If, Else, Unless, and Conditional Assignment</a>        <a href=\"#splats\">Splats...</a>        <a href=\"#loops\">Loops and Comprehensions</a>        <a href=\"#slices\">Array Slicing and Splicing</a>        <a href=\"#expressions\">Everything is an Expression</a>        <a href=\"#operators\">Operators and Aliases</a>        <a href=\"#classes\">Classes, Inheritance, and Super</a>        <a href=\"#destructuring\">Destructuring Assignment</a>        <a href=\"#fat_arrow\">Function Binding</a>        <a href=\"#embedded\">Embedded JavaScript</a>        <a href=\"#switch\">Switch and Try/Catch</a>        <a href=\"#comparisons\">Chained Comparisons</a>        <a href=\"#strings\">String Interpolation, Block Strings, and Block Comments</a>        <a href=\"#regexes\">Block Regular Expressions</a>        <a href=\"#cake\">Cake, and Cakefiles</a>        <a href=\"#scripts\">\"text/coffeescript\" Script Tags</a>        <a href=\"#resources\">Books, Screencasts, Examples and Resources</a>        <a href=\"#changelog\">Change Log</a>      </div>    </div>    <div class=\"navigation try\">      <div class=\"button\">        Try It        <div class=\"repl_bridge\"></div>      </div>      <div class=\"contents repl_wrapper\">        <div class=\"code\">          <div class=\"screenshadow tl\"></div>          <div class=\"screenshadow tr\"></div>          <div class=\"screenshadow bl\"></div>          <div class=\"screenshadow br\"></div>          <div id=\"repl_source_wrap\">            <textarea id=\"repl_source\" rows=\"100\" spellcheck=\"false\">alert \"Hello CoffeeScript!\"</textarea>          </div>          <div id=\"repl_results_wrap\"><pre id=\"repl_results\"></pre></div>          <div class=\"minibutton dark run\" title=\"Ctrl-Enter\">Run</div>          <a class=\"minibutton permalink\" id=\"repl_permalink\">Link</a>          <br class=\"clear\" />        </div>      </div>    </div>    <div class=\"navigation annotated\">      <div class=\"button\">        Annotated Source      </div>      <div class=\"contents menu\">        <a href=\"documentation/docs/grammar.html\">Grammar Rules &mdash; src/grammar</a>        <a href=\"documentation/docs/lexer.html\">Lexing Tokens &mdash; src/lexer</a>        <a href=\"documentation/docs/rewriter.html\">The Rewriter &mdash; src/rewriter</a>        <a href=\"documentation/docs/nodes.html\">The Syntax Tree &mdash; src/nodes</a>        <a href=\"documentation/docs/sourcemap.html\">SourceMaps &mdash; src/sourcemap</a>        <a href=\"documentation/docs/scope.html\">Lexical Scope &mdash; src/scope</a>        <a href=\"documentation/docs/helpers.html\">Helpers &amp; Utility Functions &mdash; src/helpers</a>        <a href=\"documentation/docs/coffee-script.html\">The CoffeeScript Module &mdash; src/coffee-script</a>        <a href=\"documentation/docs/cake.html\">Cake &amp; Cakefiles &mdash; src/cake</a>        <a href=\"documentation/docs/command.html\">\"iced\" Command-Line Utility &mdash; src/command</a>        <a href=\"documentation/docs/optparse.html\">Option Parsing &mdash; src/optparse</a>        <a href=\"documentation/docs/repl.html\">Interactive REPL &mdash; src/repl</a>        <a href=\"documentation/docs/iced.html\">The Iced Runtime &mdash; src/iced</a>        <a href=\"documentation/docs/icedlib.html\">The Iced Advanced Library&mdash; src/icedlib</a>      </div>    </div>    <div class=\"navigation iced\">     <div class=\"button\">       Iced Features     </div>      <div class=\"contents menu\">        <a href=\"#iced\">ICS by Example</a>        <a href=\"#iced_basics\">ICS Basics</a>        <a href=\"#iced_control\">ICS Control Flow</a>        <a href=\"#iced_finish\">ICS: Tutorial Conclusion</a>        <a href=\"#iced_more\">ICS: Read More</a>      </div>    </div>    <div id=\"error\" style=\"display:none;\"></div>  </div>  <div class=\"container\">    <span class=\"bookmark\" id=\"top\"></span>    <p>      <b>Iced</b>CoffeeScript is a superset of      <a href=\"http://coffeescript.org\">CoffeeScript</a>.      The <tt>iced</tt> interpreter is a drop-in replacement      for the standard <tt>coffee</tt> interpreter;      it will interpret almost all existing CoffeeScript programs.    </p>     <p>IcedCoffeeScript (ICS) adds two new keywords: <tt>await</tt>      and <tt>defer</tt>.  These additions simply and powerfully      streamline asynchronous control flow, both on the server and on      the browser. Say goodbye to callback pyramids; say adios to      massive code rewrites when synchronization requirements change      slightly.  Say hello to clean, readable, maintainable control      flow for network and asynchronous operations!    </p>    <p>      The golden rule of CoffeeScript was: <i>\"It's just      JavaScript\"</i>.  ICS is doing something deeper.  It's      selectively running code through a      continuation-passing style conversion.  Original-style      CoffeeScript will compile as before, but code using the new ICS      features will be less recognizable.  Still, the compiled output      is readable and pretty-printed, passes through      <a href=\"http://www.javascriptlint.com/\">JavaScript Lint</a>      without warnings.    </p>    <p>      <b>Latest Version:</b>      <a href=\"http://github.com/maxtaco/coffee-script/tarball/iced2\">1.8.0-a</a>    </p>    <h2>      <span id=\"installation\" class=\"bookmark\"></span>      Installation    </h2>    <p>      The CoffeeScript compiler is itself      <a href=\"documentation/docs/grammar.html\">written in CoffeeScript</a>,      using the <a href=\"http://jison.org\">Jison parser generator</a>. The      command-line version of <tt>iced</tt> is available as a      <a href=\"http://nodejs.org/\">Node.js</a> utility. The      <a href=\"extras/iced-coffee-script-1.8.0-a.js\">core compiler</a> however, does not      depend on Node, and can be run in any JavaScript environment, or in the      browser (see \"Try It\", above).    </p>    <p>      To install, first make sure you have a working copy of the latest stable version of      <a href=\"http://nodejs.org/\">Node.js</a>, and <a href=\"http://npmjs.org\">npm</a>      (the Node Package Manager). You can then install CoffeeScript with npm:    </p>    <pre>npm install -g iced-coffee-script</pre>    <p>      (Leave off the <tt>-g</tt> if you don't wish to install globally.)    </p>    <p>      If you'd prefer to install the latest master version of CoffeeScript, you      can clone the CoffeeScript      <a href=\"https://github.com/maxtaco/coffee-script\">source repository</a>      from GitHub, or download      <a href=\"https://github.com/maxtaco/coffee-script/tarball/iced2\">the source</a> directly.      To install the CoffeeScript compiler system-wide      under <tt>/usr/local</tt>, open the directory and run:    </p>  <pre>sudo bin/cake install</pre>    <h1>ICS: Clean, Powerful Async Control Flow for CoffeeScript</h1>    <p>     <span id =\"iced\" class = \"bookmark\"></span>     We're going to introduce ICS by a working browser-based example.     We want to write a little program that uses the      <a href=\"http://twitter.com\">Twitter</a> API to search for what     to eat given today's weather.  The strategy is as follows: search     for four different foods, and see which has the most recent activity;     search for four different weather patterns, and see which has the     most recent activity; then search for both in one joint search.     Do as much as possible in parallel.    </p>    <p>     <span id=\"iced_basics\" class=\"bookmark\"></span>     <b class=\"header\">ICS Basics</b>     The first basic primitive is used to do a Twitter search for a      single keyword.  On the left is the ICS version, on the right     is hand-rolled vanilla (hot) CoffeeScript.    </p>    <p>     <div class='code'><pre class='tomorrow'><code><span class=\"comment\"># Search for 'keyword' on twitter, then callback 'cb'</span><span class=\"comment\"># with the results found.</span><span class=\"function\"><span class=\"title\">search</span></span> = (keyword, cb) -&gt;  host = <span class=\"string\">\"http://search.twitter.com/\"</span>  url = <span class=\"string\">\"<span class=\"subst\">#{host}</span>/search.json?q=<span class=\"subst\">#{keyword}</span>&amp;callback=?\"</span>  await $.getJSON url, defer json  cb json.results</code></pre><pre class='tomorrow'><code><span class=\"comment\"># Search for 'keyword' on twitter, then callback 'cb'</span><span class=\"comment\"># with the results found.</span><span class=\"function\"><span class=\"title\">search</span></span> = (keyword, cb) -&gt;  host = <span class=\"string\">\"http://search.twitter.com/\"</span>  url = <span class=\"string\">\"<span class=\"subst\">#{host}</span>/search.json?q=<span class=\"subst\">#{keyword}</span>&amp;callback=?\"</span>  $.getJSON url, (json) -&gt;    cb json.results</code></pre><script>window.example1 = \"# Search for 'keyword' on twitter, then callback 'cb'\\n# with the results found.\\nsearch = (keyword, cb) ->\\n  host = \\\"http://search.twitter.com/\\\"\\n  url = \\\"#{host}/search.json?q=#{keyword}&callback=?\\\"\\n  await $.getJSON url, defer json\\n  cb json.results\\n\\n\\n\"</script><div class='minibutton load' onclick='javascript: loadConsole(example1);'>load</div><br class='clear' /></div>    </p>    <p>     There is one new language addition here, the <tt>await { ... }</tt>      block, and also one new primitive function, <tt>defer</tt>.       The two work in concert.  A function must \"wait\" at the close of      an await block until all deferrals made in that await block are      fulfilled.  The function <tt>defer</tt> returns a callback,      and a callee in an await block can fulfill a deferral by simply      calling the callback it was given.    </p>    <p>In the code above, there is      only one deferral produced, and it's handed as an argument to      <tt>$.getJSON</tt>.  This is the standard      <a href=\"http://api.jquery.com/jQuery.getJSON/\">jQuery getJSON</a>      call, which makes an Ajax request to the URL given, and then calls     the passed callback with the JSON object it fetched. When     the jQuery library does this, it will fulfill the      deferral, and in so doing it will populate <tt>json</tt>     with the data it fetched.  Then, the function continues     calling the final <tt>cb json.results</tt>.    </p>    <p>The right hand side shows the same code in standard     CoffeeScript, and as we can see, there's not much difference...yet.     Read on, dear reader!    </p>    <p>     <span id=\"iced_control\" class=\"bookmark\"></span>     <b class=\"header\">ICS and Standard Control Flow</b>     What's so great about <tt>await</tt> and <tt>defer</tt> is that     they integrate seamlessly with existing CoffeeScript control structures,     the tried-and-true favorites like <tt>for</tt>, <tt>if</tt> and     <tt>else</tt>.    </p>      <p>The next step in our working example is to make multiple     requests to the Twitter API, either in parallel or in serial.     Recall, we want to lookup results for multiple food items (or weather     conditions), so we can compare them to each other.  Here is     the code in ICS and standard CoffeeScript:    </p>    <p>     <div class='code'><pre class='tomorrow'><code><span class=\"comment\"># Search for 'keywords' in parallel, then callback</span><span class=\"comment\"># 'cb' with an array of the parallel results</span><span class=\"function\"><span class=\"title\">parallelSearch</span></span> = (keywords, cb) -&gt;  out = []  await     <span class=\"keyword\">for</span> k,i <span class=\"keyword\">in</span> keywords      search k, defer out[i]  cb out</code></pre><pre class='tomorrow'><code><span class=\"comment\"># Search for 'keywords' in parallel, then callback</span><span class=\"comment\"># 'cb' with an array of the parallel results</span><span class=\"function\"><span class=\"title\">parallelSearch</span></span> = (keywords, cb) -&gt;  results = []  n_out = <span class=\"number\">0</span>  <span class=\"function\"><span class=\"title\">cb_generator</span></span> = (i) -&gt;    n_out++    (json) -&gt;      results[i] = json      <span class=\"keyword\">if</span> n_out-- <span class=\"keyword\">is</span> <span class=\"number\">0</span>        cb results  <span class=\"keyword\">for</span> k,i <span class=\"keyword\">in</span> keywords    search k, cb_generator i</code></pre><script>window.example2 = \"# Search for 'keywords' in parallel, then callback\\n# 'cb' with an array of the parallel results\\nparallelSearch = (keywords, cb) ->\\n  out = []\\n  await \\n    for k,i in keywords\\n      search k, defer out[i]\\n  cb out\\n\"</script><div class='minibutton load' onclick='javascript: loadConsole(example2);'>load</div><br class='clear' /></div>    </p>    <p>     Look at the ICS code (on the left) first.  Recall the rule:     control stops in an <tt>await</tt> block until all <tt>defer</tt>rals     created in that block have fulfilled.  This code launches many     searches in parallel, and only continues outside of the <tt>await</tt>     block when all have completed.  At that point <tt>cb out</tt> is     called and <tt>parallelSearch</tt> is done.    </p>        <p>     The right side is significantly hairier. We need to introduce a     new function <tt>cb_generator</tt> that keeps track of how many     searches we have outstanding.  Only once all have come back should     we continue and call the given callback.  A big problem with this     code is that it's significantly less readable.  Control is weirdly     inverted, so that it's no longer possible to follow the code top to      bottom. It's also error-prone and difficult to modify.    </p>    <p>Let's say, for instance, that Twitter changes their ToS and we     now have to issue these searches in serial, rather than in parallel.     How does the code change?    <p>    <p>     <div class='code'><pre class='tomorrow'><code><span class=\"comment\"># Search for 'keywords' in serial, then callback</span><span class=\"comment\"># 'cb' with an array of the parallel results</span><span class=\"function\"><span class=\"title\">serialSearch</span></span> = (keywords, cb) -&gt;  out = []  <span class=\"keyword\">for</span> k,i <span class=\"keyword\">in</span> keywords    await search k, defer out[i]  cb out</code></pre><pre class='tomorrow'><code><span class=\"comment\"># Search for 'keywords' in serial, then callback</span><span class=\"comment\"># 'cb' with an array of the parallel results</span><span class=\"function\"><span class=\"title\">serialSearch</span></span> = (keywords, cb) -&gt;  result = []  i = <span class=\"number\">0</span>  launch = () -&gt;    <span class=\"keyword\">if</span> i &lt; keywords.length       j = i++       search keywords[j], cb_generator j     <span class=\"keyword\">else</span>       cb results  <span class=\"function\"><span class=\"title\">cb_generator</span></span> = (i) -&gt;    (json) -&gt;      results[i] = json      launch()  launch()</code></pre><script>window.example3 = \"# Search for 'keywords' in serial, then callback\\n# 'cb' with an array of the parallel results\\nserialSearch = (keywords, cb) ->\\n  out = []\\n  for k,i in keywords\\n    await search k, defer out[i]\\n  cb out\\n\"</script><div class='minibutton load' onclick='javascript: loadConsole(example3);'>load</div><br class='clear' /></div>    </p>    <p>The ICS code barely changed!  We just exchanged the <tt>await</tt>     and <tt>for</tt> statements.  The hand-rolled CoffeeScript needed     a major rewrite.  Moreover it's difficult to look at this code     and recognize it as a sequential loop.    </p>    <p>     <span id=\"iced_finish\" class=\"bookmark\"></span>     <b class=\"header\">Closing out the Tutorial</b>     There's really not much more to it.  The ICS constructs     also work with <tt>while</tt>, <tt>until</tt>     <tt>if</tt>, <tt>else</tt>, <tt>unless</tt>, and      <tt>switch</tt> constructs. The only exception is <tt>try</tt>,     which doesn't catch exceptions when called from event handlers     the main loop, for the same reason hand-rolled asynchronous code     and <tt>try</tt> do not work well together.    </p>    <p>Finishing up our little example, here is code to     rank the results we fetched from Twitter:    </p>        <p>     <div class='code'><pre class='tomorrow'><code><span class=\"comment\"># Do a parallel search on 'keywords', and call 'cb' with</span><span class=\"comment\"># the keywords sorted in decreasing popular order.</span><span class=\"comment\"># Determine popularity based on the time of the least</span><span class=\"comment\"># recent tweet (since we always get 15 from Twitter).</span><span class=\"function\"><span class=\"title\">rankPopularity</span></span> = (keywords, cb) -&gt;  await parallelSearch keywords, defer results  times = <span class=\"keyword\">for</span> r,i <span class=\"keyword\">in</span> results    last = r[r.length - <span class=\"number\">1</span>]    [(<span class=\"keyword\">new</span> Date last.created_at).getTime(), i]  times = times.sort (a,b) -&gt; b[<span class=\"number\">0</span>] - a[<span class=\"number\">0</span>]  cb (keywords[tuple[<span class=\"number\">1</span>]] <span class=\"keyword\">for</span> tuple <span class=\"keyword\">in</span> times)</code></pre><pre class='tomorrow'><code><span class=\"comment\"># Do a parallel search on 'keywords', and call 'cb' with</span><span class=\"comment\"># the keywords sorted in decreasing popular order.</span><span class=\"comment\"># Determine popularity based on the time of the least</span><span class=\"comment\"># recent tweet (since we always get 15 from Twitter).</span><span class=\"function\"><span class=\"title\">rankPopularity</span></span> = (keywords, cb) -&gt;  parallelSearch keywords, (results) -&gt;    times = <span class=\"keyword\">for</span> r,i <span class=\"keyword\">in</span> results      last = r[r.length - <span class=\"number\">1</span>]      [(<span class=\"keyword\">new</span> Date last.created_at).getTime(), i]    times = times.sort (a,b) -&gt; b[<span class=\"number\">0</span>] - a[<span class=\"number\">0</span>]    cb (keywords[tuple[<span class=\"number\">1</span>]] <span class=\"keyword\">for</span> tuple <span class=\"keyword\">in</span> times)</code></pre><script>window.example4 = \"# Do a parallel search on 'keywords', and call 'cb' with\\n# the keywords sorted in decreasing popular order.\\n# Determine popularity based on the time of the least\\n# recent tweet (since we always get 15 from Twitter).\\nrankPopularity = (keywords, cb) ->\\n  await parallelSearch keywords, defer results\\n  times = for r,i in results\\n    last = r[r.length - 1]\\n    [(new Date last.created_at).getTime(), i]\\n  times = times.sort (a,b) -> b[0] - a[0]\\n  cb (keywords[tuple[1]] for tuple in times)\\n\\n\\n\\n\"</script><div class='minibutton load' onclick='javascript: loadConsole(example4);'>load</div><br class='clear' /></div>    </p>    <p>And a main block of code:</p>    <p>     <div class='code'><pre class='tomorrow'><code><span class=\"comment\"># Search for the most popular food and the most</span><span class=\"comment\"># popular weather pattern in parallel.</span>w_list = [ <span class=\"string\">\"sun\"</span>, <span class=\"string\">\"rain\"</span>, <span class=\"string\">\"snow\"</span>, <span class=\"string\">\"sleet\"</span> ]f_list = [ <span class=\"string\">\"tacos\"</span>, <span class=\"string\">\"burritos\"</span>, <span class=\"string\">\"pizza\"</span>, <span class=\"string\">\"shrooms\"</span> ]await  rankPopularity w_list, defer weather  rankPopularity f_list, defer food<span class=\"comment\"># If we got results for both, do a final search</span><span class=\"keyword\">if</span> weather.length <span class=\"keyword\">and</span> food.length  await search <span class=\"string\">\"<span class=\"subst\">#{weather[<span class=\"number\">0</span>]}</span>+<span class=\"subst\">#{food[<span class=\"number\">0</span>]}</span>\"</span>, defer tweets  msg = tweets[<span class=\"number\">0</span>]?.text<span class=\"comment\"># Alert the results to the browser</span>alert <span class=\"keyword\">if</span> msg? <span class=\"keyword\">then</span> msg <span class=\"keyword\">else</span> <span class=\"string\">\"&lt;nothing found&gt;\"</span></code></pre><pre class='tomorrow'><code><span class=\"comment\"># Search for the most popular food and the most</span><span class=\"comment\"># popular weather pattern in parallel.</span>w_list = [ <span class=\"string\">\"sun\"</span>, <span class=\"string\">\"rain\"</span>, <span class=\"string\">\"snow\"</span>, <span class=\"string\">\"sleet\"</span> ]f_list = [ <span class=\"string\">\"tacos\"</span>, <span class=\"string\">\"burritos\"</span>, <span class=\"string\">\"pizza\"</span>, <span class=\"string\">\"shrooms\"</span> ]o = {}n_out = <span class=\"number\">0</span>nothing = <span class=\"string\">\"&lt;nothing found&gt;\"</span>  <span class=\"function\"><span class=\"title\">cb_generator</span></span> = (field) -&gt;  n_out++  (json) -&gt;    o[field] = json    <span class=\"keyword\">if</span> --n_out <span class=\"keyword\">is</span> <span class=\"number\">0</span>      <span class=\"comment\"># If we got results for both, do a final search</span>      <span class=\"keyword\">if</span> o.weather.length <span class=\"keyword\">and</span> o.food.length        search <span class=\"string\">\"<span class=\"subst\">#{o.weather[<span class=\"number\">0</span>]}</span>+<span class=\"subst\">#{o.food[<span class=\"number\">0</span>]}</span>\"</span>, (tweets) -&gt;          <span class=\"comment\"># Alert the results to the browser</span>          msg = tweets[<span class=\"number\">0</span>]?.text          alert <span class=\"keyword\">if</span> msg? <span class=\"keyword\">then</span> msg <span class=\"keyword\">else</span> nothing      <span class=\"keyword\">else</span>        alert nothingrankPopularity w_list, cb_generator <span class=\"string\">\"weather\"</span>rankPopularity f_list, cb_generator <span class=\"string\">\"food\"</span></code></pre><script>window.example5 = \"# Search for the most popular food and the most\\n# popular weather pattern in parallel.\\nw_list = [ \\\"sun\\\", \\\"rain\\\", \\\"snow\\\", \\\"sleet\\\" ]\\nf_list = [ \\\"tacos\\\", \\\"burritos\\\", \\\"pizza\\\", \\\"shrooms\\\" ]\\n\\nawait\\n  rankPopularity w_list, defer weather\\n  rankPopularity f_list, defer food\\n\\n# If we got results for both, do a final search\\nif weather.length and food.length\\n  await search \\\"#{weather[0]}+#{food[0]}\\\", defer tweets\\n  msg = tweets[0]?.text\\n\\n# Alert the results to the browser\\nalert if msg? then msg else \\\"<nothing found>\\\"\\n\"</script><div class='minibutton load' onclick='javascript: loadConsole(example5);'>load</div><br class='clear' /></div>    </p>    <p>Again, let's ask the question, what happens if the synchronization     requirements change slightly?  As written, the two calls to     <tt>rankPopularity</tt> fire in parallel, to minimize the latency     the end-user experiences.  Imagine the goal becomes     to reduce server load?  Then, we only want to     issue the second call if the first succeeded.  The code would be     updated as follows:    </p>    <p>     <div class='code'><pre class='tomorrow'><code>w_list = [ <span class=\"string\">\"sun\"</span>, <span class=\"string\">\"rain\"</span>, <span class=\"string\">\"snow\"</span>, <span class=\"string\">\"sleet\"</span> ]f_list = [ <span class=\"string\">\"tacos\"</span>, <span class=\"string\">\"burritos\"</span>, <span class=\"string\">\"pizza\"</span>, <span class=\"string\">\"shrooms\"</span> ]await rankPopularity w_list, defer weather<span class=\"keyword\">if</span> weather.length  await rankPopularity f_list, defer food<span class=\"keyword\">if</span> weather.length <span class=\"keyword\">and</span> food.length  await search <span class=\"string\">\"<span class=\"subst\">#{weather[<span class=\"number\">0</span>]}</span>+<span class=\"subst\">#{food[<span class=\"number\">0</span>]}</span>\"</span>, defer tweets  msg = tweets[<span class=\"number\">0</span>]?.textalert <span class=\"keyword\">if</span> msg? <span class=\"keyword\">then</span> msg <span class=\"keyword\">else</span> <span class=\"string\">\"&lt;nothing found&gt;\"</span></code></pre><pre class='tomorrow'><code>w_list = [ <span class=\"string\">\"sun\"</span>, <span class=\"string\">\"rain\"</span>, <span class=\"string\">\"snow\"</span>, <span class=\"string\">\"sleet\"</span> ]f_list = [ <span class=\"string\">\"tacos\"</span>, <span class=\"string\">\"burritos\"</span>, <span class=\"string\">\"pizza\"</span>, <span class=\"string\">\"shrooms\"</span> ]nothing = <span class=\"string\">\"&lt;nothing found&gt;\"</span>rankPopularity w_list, (weather) -&gt;  <span class=\"keyword\">if</span> weather.length    rankPopularity f_list, (food) -&gt;      <span class=\"keyword\">if</span> weather.length <span class=\"keyword\">and</span> food.length        search <span class=\"string\">\"<span class=\"subst\">#{weather[<span class=\"number\">0</span>]}</span>+<span class=\"subst\">#{food[<span class=\"number\">0</span>]}</span>\"</span>, (tweets)-&gt;          msg = tweets[<span class=\"number\">0</span>]?.text          alert <span class=\"keyword\">if</span> msg? <span class=\"keyword\">then</span> msg <span class=\"keyword\">else</span> nothing      <span class=\"keyword\">else</span>        alert nothing  <span class=\"keyword\">else</span>    alert nothing</code></pre><script>window.example6 = \"w_list = [ \\\"sun\\\", \\\"rain\\\", \\\"snow\\\", \\\"sleet\\\" ]\\nf_list = [ \\\"tacos\\\", \\\"burritos\\\", \\\"pizza\\\", \\\"shrooms\\\" ]\\nawait rankPopularity w_list, defer weather\\nif weather.length\\n  await rankPopularity f_list, defer food\\nif weather.length and food.length\\n  await search \\\"#{weather[0]}+#{food[0]}\\\", defer tweets\\n  msg = tweets[0]?.text\\nalert if msg? then msg else \\\"<nothing found>\\\"\\n\"</script><div class='minibutton load' onclick='javascript: loadConsole(example6);'>load</div><br class='clear' /></div>    </p>        <p>     The code on the right changed a lot more than the code on the left.     Keep in mind, the more code you have to change, the more likely     you are to introduce a (subtle) bug.  The ICS compiler      automatically manages the synchronization subtleties for you.    </p>   <p>     Putting it all together, we have code that works in     your browser!    </p>   <div class='code'><pre class='tomorrow'><code><span class=\"function\"><span class=\"title\">search</span></span> = (keyword, cb) -&gt;  host = <span class=\"string\">\"http://search.twitter.com/\"</span>  url = <span class=\"string\">\"<span class=\"subst\">#{host}</span>/search.json?q=<span class=\"subst\">#{keyword}</span>&amp;callback=?\"</span>  await $.getJSON url, defer json  cb json.results<span class=\"function\"><span class=\"title\">parallelSearch</span></span> = (keywords, cb) -&gt;  out = []  await     <span class=\"keyword\">for</span> k,i <span class=\"keyword\">in</span> keywords      search k, defer out[i]  cb out<span class=\"function\"><span class=\"title\">rankPopularity</span></span> = (keywords, cb) -&gt;  await parallelSearch keywords, defer results  times = <span class=\"keyword\">for</span> r,i <span class=\"keyword\">in</span> results    last = r[r.length - <span class=\"number\">1</span>]    [(<span class=\"keyword\">new</span> Date last.created_at).getTime(), i]  times = times.sort (a,b) -&gt; b[<span class=\"number\">0</span>] - a[<span class=\"number\">0</span>]  cb (keywords[tuple[<span class=\"number\">1</span>]] <span class=\"keyword\">for</span> tuple <span class=\"keyword\">in</span> times)w_list = [ <span class=\"string\">\"sun\"</span>, <span class=\"string\">\"rain\"</span>, <span class=\"string\">\"snow\"</span>, <span class=\"string\">\"sleet\"</span> ]f_list = [ <span class=\"string\">\"tacos\"</span>, <span class=\"string\">\"burritos\"</span>, <span class=\"string\">\"pizza\"</span>, <span class=\"string\">\"shrooms\"</span> ]await  rankPopularity w_list, defer weather  rankPopularity f_list, defer food<span class=\"keyword\">if</span> weather.length <span class=\"keyword\">and</span> food.length  await search <span class=\"string\">\"<span class=\"subst\">#{weather[<span class=\"number\">0</span>]}</span>+<span class=\"subst\">#{food[<span class=\"number\">0</span>]}</span>\"</span>, defer tweets  msg = tweets[<span class=\"number\">0</span>]?.textalert <span class=\"keyword\">if</span> msg? <span class=\"keyword\">then</span> msg <span class=\"keyword\">else</span> <span class=\"string\">\"&lt;nothing found&gt;\"</span></code></pre><pre class='tomorrow'><code><span class=\"reserved\">var</span> f_list, food, msg, parallelSearch, rankPopularity, search, tweets, w_list, weather, __iced_deferrals, __iced_k, __iced_k_noop,  _<span class=\"keyword\">this</span> = <span class=\"keyword\">this</span>;__iced_k = __iced_k_noop = <span class=\"reserved\">function</span>() {};search = <span class=\"reserved\">function</span>(keyword, cb) {  <span class=\"reserved\">var</span> host, json, url, ___iced_passed_deferral, __iced_deferrals, __iced_k,    _<span class=\"keyword\">this</span> = <span class=\"keyword\">this</span>;  __iced_k = __iced_k_noop;  ___iced_passed_deferral = iced.findDeferral(arguments);  host = <span class=\"string\">\"http://search.twitter.com/\"</span>;  url = <span class=\"string\">\"\"</span> + host + <span class=\"string\">\"/search.json?q=\"</span> + keyword + <span class=\"string\">\"&amp;callback=?\"</span>;  (<span class=\"reserved\">function</span>(__iced_k) {    __iced_deferrals = <span class=\"keyword\">new</span> iced.Deferrals(__iced_k, {      parent: ___iced_passed_deferral,      filename: <span class=\"string\">\"documentation/coffee/iced_tw_full.coffee\"</span>,      funcname: <span class=\"string\">\"search\"</span>    });    $.getJSON(url, __iced_deferrals.defer({      assign_fn: (<span class=\"reserved\">function</span>() {        <span class=\"keyword\">return</span> <span class=\"reserved\">function</span>() {          <span class=\"keyword\">return</span> json = arguments[<span class=\"number\">0</span>];        };      })(),      lineno: <span class=\"number\">3</span>    }));    __iced_deferrals._fulfill();  })(<span class=\"reserved\">function</span>() {    <span class=\"keyword\">return</span> cb(json.results);  });};parallelSearch = <span class=\"reserved\">function</span>(keywords, cb) {  <span class=\"reserved\">var</span> i, k, out, ___iced_passed_deferral, __iced_deferrals, __iced_k,    _<span class=\"keyword\">this</span> = <span class=\"keyword\">this</span>;  __iced_k = __iced_k_noop;  ___iced_passed_deferral = iced.findDeferral(arguments);  out = [];  (<span class=\"reserved\">function</span>(__iced_k) {    <span class=\"reserved\">var</span> _i, _len;    __iced_deferrals = <span class=\"keyword\">new</span> iced.Deferrals(__iced_k, {      parent: ___iced_passed_deferral,      filename: <span class=\"string\">\"documentation/coffee/iced_tw_full.coffee\"</span>,      funcname: <span class=\"string\">\"parallelSearch\"</span>    });    <span class=\"keyword\">for</span> (i = _i = <span class=\"number\">0</span>, _len = keywords.length; _i &lt; _len; i = ++_i) {      k = keywords[i];      search(k, __iced_deferrals.defer({        assign_fn: (<span class=\"reserved\">function</span>(__slot_1, __slot_2) {          <span class=\"keyword\">return</span> <span class=\"reserved\">function</span>() {            <span class=\"keyword\">return</span> __slot_1[__slot_2] = arguments[<span class=\"number\">0</span>];          };        })(out, i),        lineno: <span class=\"number\">10</span>      }));    }    __iced_deferrals._fulfill();  })(<span class=\"reserved\">function</span>() {    <span class=\"keyword\">return</span> cb(out);  });};rankPopularity = <span class=\"reserved\">function</span>(keywords, cb) {  <span class=\"reserved\">var</span> i, last, r, results, times, tuple, ___iced_passed_deferral, __iced_deferrals, __iced_k,    _<span class=\"keyword\">this</span> = <span class=\"keyword\">this</span>;  __iced_k = __iced_k_noop;  ___iced_passed_deferral = iced.findDeferral(arguments);  (<span class=\"reserved\">function</span>(__iced_k) {    __iced_deferrals = <span class=\"keyword\">new</span> iced.Deferrals(__iced_k, {      parent: ___iced_passed_deferral,      filename: <span class=\"string\">\"documentation/coffee/iced_tw_full.coffee\"</span>,      funcname: <span class=\"string\">\"rankPopularity\"</span>    });    parallelSearch(keywords, __iced_deferrals.defer({      assign_fn: (<span class=\"reserved\">function</span>() {        <span class=\"keyword\">return</span> <span class=\"reserved\">function</span>() {          <span class=\"keyword\">return</span> results = arguments[<span class=\"number\">0</span>];        };      })(),      lineno: <span class=\"number\">14</span>    }));    __iced_deferrals._fulfill();  })(<span class=\"reserved\">function</span>() {    times = (<span class=\"reserved\">function</span>() {      <span class=\"reserved\">var</span> _i, _len, _results;      _results = [];      <span class=\"keyword\">for</span> (i = _i = <span class=\"number\">0</span>, _len = results.length; _i &lt; _len; i = ++_i) {        r = results[i];        last = r[r.length - <span class=\"number\">1</span>];        _results.push([(<span class=\"keyword\">new</span> Date(last.created_at)).getTime(), i]);      }      <span class=\"keyword\">return</span> _results;    })();    times = times.sort(<span class=\"reserved\">function</span>(a, b) {      <span class=\"keyword\">return</span> b[<span class=\"number\">0</span>] - a[<span class=\"number\">0</span>];    });    <span class=\"keyword\">return</span> cb((<span class=\"reserved\">function</span>() {      <span class=\"reserved\">var</span> _i, _len, _results;      _results = [];      <span class=\"keyword\">for</span> (_i = <span class=\"number\">0</span>, _len = times.length; _i &lt; _len; _i++) {        tuple = times[_i];        _results.push(keywords[tuple[<span class=\"number\">1</span>]]);      }      <span class=\"keyword\">return</span> _results;    })());  });};w_list = [<span class=\"string\">\"sun\"</span>, <span class=\"string\">\"rain\"</span>, <span class=\"string\">\"snow\"</span>, <span class=\"string\">\"sleet\"</span>];f_list = [<span class=\"string\">\"tacos\"</span>, <span class=\"string\">\"burritos\"</span>, <span class=\"string\">\"pizza\"</span>, <span class=\"string\">\"shrooms\"</span>];(<span class=\"reserved\">function</span>(__iced_k) {  __iced_deferrals = <span class=\"keyword\">new</span> iced.Deferrals(__iced_k, {    filename: <span class=\"string\">\"documentation/coffee/iced_tw_full.coffee\"</span>  });  rankPopularity(w_list, __iced_deferrals.defer({    assign_fn: (<span class=\"reserved\">function</span>() {      <span class=\"keyword\">return</span> <span class=\"reserved\">function</span>() {        <span class=\"keyword\">return</span> weather = arguments[<span class=\"number\">0</span>];      };    })(),    lineno: <span class=\"number\">24</span>  }));  rankPopularity(f_list, __iced_deferrals.defer({    assign_fn: (<span class=\"reserved\">function</span>() {      <span class=\"keyword\">return</span> <span class=\"reserved\">function</span>() {        <span class=\"keyword\">return</span> food = arguments[<span class=\"number\">0</span>];      };    })(),    lineno: <span class=\"number\">25</span>  }));  __iced_deferrals._fulfill();})(<span class=\"reserved\">function</span>() {  (<span class=\"reserved\">function</span>(__iced_k) {    <span class=\"keyword\">if</span> (weather.length &amp;&amp; food.length) {      (<span class=\"reserved\">function</span>(__iced_k) {        __iced_deferrals = <span class=\"keyword\">new</span> iced.Deferrals(__iced_k, {          filename: <span class=\"string\">\"documentation/coffee/iced_tw_full.coffee\"</span>        });        search(<span class=\"string\">\"\"</span> + weather[<span class=\"number\">0</span>] + <span class=\"string\">\"+\"</span> + food[<span class=\"number\">0</span>], __iced_deferrals.defer({          assign_fn: (<span class=\"reserved\">function</span>() {            <span class=\"keyword\">return</span> <span class=\"reserved\">function</span>() {              <span class=\"keyword\">return</span> tweets = arguments[<span class=\"number\">0</span>];            };          })(),          lineno: <span class=\"number\">28</span>        }));        __iced_deferrals._fulfill();      })(<span class=\"reserved\">function</span>() {        <span class=\"reserved\">var</span> _ref;        <span class=\"keyword\">return</span> __iced_k(msg = (_ref = tweets[<span class=\"number\">0</span>]) != <span class=\"literal\">null</span> ? _ref.text : <span class=\"reserved\">void</span> <span class=\"number\">0</span>);      });    } <span class=\"keyword\">else</span> {      <span class=\"keyword\">return</span> __iced_k();    }  })(<span class=\"reserved\">function</span>() {    <span class=\"keyword\">return</span> alert(<span class=\"keyword\">typeof</span> msg !== <span class=\"string\">\"undefined\"</span> &amp;&amp; msg !== <span class=\"literal\">null</span> ? msg : <span class=\"string\">\"&lt;nothing found&gt;\"</span>);  });});</code></pre><script>window.example7 = \"search = (keyword, cb) ->\\n  host = \\\"http://search.twitter.com/\\\"\\n  url = \\\"#{host}/search.json?q=#{keyword}&callback=?\\\"\\n  await $.getJSON url, defer json\\n  cb json.results\\n\\nparallelSearch = (keywords, cb) ->\\n  out = []\\n  await \\n    for k,i in keywords\\n      search k, defer out[i]\\n  cb out\\n\\nrankPopularity = (keywords, cb) ->\\n  await parallelSearch keywords, defer results\\n  times = for r,i in results\\n    last = r[r.length - 1]\\n    [(new Date last.created_at).getTime(), i]\\n  times = times.sort (a,b) -> b[0] - a[0]\\n  cb (keywords[tuple[1]] for tuple in times)\\n\\nw_list = [ \\\"sun\\\", \\\"rain\\\", \\\"snow\\\", \\\"sleet\\\" ]\\nf_list = [ \\\"tacos\\\", \\\"burritos\\\", \\\"pizza\\\", \\\"shrooms\\\" ]\\nawait\\n  rankPopularity w_list, defer weather\\n  rankPopularity f_list, defer food\\n\\nif weather.length and food.length\\n  await search \\\"#{weather[0]}+#{food[0]}\\\", defer tweets\\n  msg = tweets[0]?.text\\n\\nalert if msg? then msg else \\\"<nothing found>\\\"\\n\"</script><div class='minibutton load' onclick='javascript: loadConsole(example7);'>load</div><div class='minibutton ok' onclick='javascript: var f_list, food, msg, parallelSearch, rankPopularity, search, tweets, w_list, weather, __iced_deferrals, __iced_k, __iced_k_noop,  _this = this;__iced_k = __iced_k_noop = function() {};search = function(keyword, cb) {  var host, json, url, ___iced_passed_deferral, __iced_deferrals, __iced_k,    _this = this;  __iced_k = __iced_k_noop;  ___iced_passed_deferral = iced.findDeferral(arguments);  host = \"http://search.twitter.com/\";  url = \"\" + host + \"/search.json?q=\" + keyword + \"&callback=?\";  (function(__iced_k) {    __iced_deferrals = new iced.Deferrals(__iced_k, {      parent: ___iced_passed_deferral,      filename: \"documentation/coffee/iced_tw_full.coffee\",      funcname: \"search\"    });    $.getJSON(url, __iced_deferrals.defer({      assign_fn: (function() {        return function() {          return json = arguments[0];        };      })(),      lineno: 3    }));    __iced_deferrals._fulfill();  })(function() {    return cb(json.results);  });};parallelSearch = function(keywords, cb) {  var i, k, out, ___iced_passed_deferral, __iced_deferrals, __iced_k,    _this = this;  __iced_k = __iced_k_noop;  ___iced_passed_deferral = iced.findDeferral(arguments);  out = [];  (function(__iced_k) {    var _i, _len;    __iced_deferrals = new iced.Deferrals(__iced_k, {      parent: ___iced_passed_deferral,      filename: \"documentation/coffee/iced_tw_full.coffee\",      funcname: \"parallelSearch\"    });    for (i = _i = 0, _len = keywords.length; _i < _len; i = ++_i) {      k = keywords[i];      search(k, __iced_deferrals.defer({        assign_fn: (function(__slot_1, __slot_2) {          return function() {            return __slot_1[__slot_2] = arguments[0];          };        })(out, i),        lineno: 10      }));    }    __iced_deferrals._fulfill();  })(function() {    return cb(out);  });};rankPopularity = function(keywords, cb) {  var i, last, r, results, times, tuple, ___iced_passed_deferral, __iced_deferrals, __iced_k,    _this = this;  __iced_k = __iced_k_noop;  ___iced_passed_deferral = iced.findDeferral(arguments);  (function(__iced_k) {    __iced_deferrals = new iced.Deferrals(__iced_k, {      parent: ___iced_passed_deferral,      filename: \"documentation/coffee/iced_tw_full.coffee\",      funcname: \"rankPopularity\"    });    parallelSearch(keywords, __iced_deferrals.defer({      assign_fn: (function() {        return function() {          return results = arguments[0];        };      })(),      lineno: 14    }));    __iced_deferrals._fulfill();  })(function() {    times = (function() {      var _i, _len, _results;      _results = [];      for (i = _i = 0, _len = results.length; _i < _len; i = ++_i) {        r = results[i];        last = r[r.length - 1];        _results.push([(new Date(last.created_at)).getTime(), i]);      }      return _results;    })();    times = times.sort(function(a, b) {      return b[0] - a[0];    });    return cb((function() {      var _i, _len, _results;      _results = [];      for (_i = 0, _len = times.length; _i < _len; _i++) {        tuple = times[_i];        _results.push(keywords[tuple[1]]);      }      return _results;    })());  });};w_list = [\"sun\", \"rain\", \"snow\", \"sleet\"];f_list = [\"tacos\", \"burritos\", \"pizza\", \"shrooms\"];(function(__iced_k) {  __iced_deferrals = new iced.Deferrals(__iced_k, {    filename: \"documentation/coffee/iced_tw_full.coffee\"  });  rankPopularity(w_list, __iced_deferrals.defer({    assign_fn: (function() {      return function() {        return weather = arguments[0];      };    })(),    lineno: 24  }));  rankPopularity(f_list, __iced_deferrals.defer({    assign_fn: (function() {      return function() {        return food = arguments[0];      };    })(),    lineno: 25  }));  __iced_deferrals._fulfill();})(function() {  (function(__iced_k) {    if (weather.length && food.length) {      (function(__iced_k) {        __iced_deferrals = new iced.Deferrals(__iced_k, {          filename: \"documentation/coffee/iced_tw_full.coffee\"        });        search(\"\" + weather[0] + \"+\" + food[0], __iced_deferrals.defer({          assign_fn: (function() {            return function() {              return tweets = arguments[0];            };          })(),          lineno: 28        }));        __iced_deferrals._fulfill();      })(function() {        var _ref;        return __iced_k(msg = (_ref = tweets[0]) != null ? _ref.text : void 0);      });    } else {      return __iced_k();    }  })(function() {    return alert(typeof msg !== \"undefined\" && msg !== null ? msg : \"<nothing found>\");  });});;'>run</div><br class='clear' /></div>   <p>When thinking about hand-rolled asynchronous code, like the     code on the right in these examples, we suggest asking two     important questions: (1) is it sensible to read top-to-bottom;     and (2) how much work is it to change if the synchronization     requirements change.    <p>    <span id=\"iced_more\" class=\"bookmark\"></span>     <b class=\"header\">ICS: Read More</b>      To learn more about the ICS implementation strategy, and extra     features of the API, see the detailed documentation     on <a href=\"https://github.com/maxtaco/coffee-script/blob/iced2/iced.md\">github</a>.   </p>   <h1>Vanilla CoffeeScript Reference</h1>    <h2>      <span id=\"overview\" class=\"bookmark\"></span>      Overview    </h2>    <p><i>CoffeeScript on the left, compiled JavaScript output on the right.</i></p>    <div class='code'><pre class='tomorrow'><code><span class=\"comment\"># Assignment:</span>number   = <span class=\"number\">42</span>opposite = <span class=\"literal\">true</span><span class=\"comment\"># Conditions:</span>number = -<span class=\"number\">42</span> <span class=\"keyword\">if</span> opposite<span class=\"comment\"># Functions:</span><span class=\"function\"><span class=\"title\">square</span></span> = (x) -&gt; x * x<span class=\"comment\"># Arrays:</span>list = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]<span class=\"comment\"># Objects:</span>math =  root:   Math.sqrt  square: square  cube:   (x) -&gt; x * square x<span class=\"comment\"># Splats:</span><span class=\"function\"><span class=\"title\">race</span></span> = (winner, runners...) -&gt;  print winner, runners<span class=\"comment\"># Existence:</span>alert <span class=\"string\">\"I knew it!\"</span> <span class=\"keyword\">if</span> elvis?<span class=\"comment\"># Array comprehensions:</span>cubes = (math.cube num <span class=\"keyword\">for</span> num <span class=\"keyword\">in</span> list)</code></pre><pre class='tomorrow'><code><span class=\"reserved\">var</span> cubes, list, math, num, number, opposite, race, square,  __slice = [].slice;number = <span class=\"number\">42</span>;opposite = <span class=\"literal\">true</span>;<span class=\"keyword\">if</span> (opposite) {  number = -<span class=\"number\">42</span>;}square = <span class=\"reserved\">function</span>(x) {  <span class=\"keyword\">return</span> x * x;};list = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];math = {  root: Math.sqrt,  square: square,  cube: <span class=\"reserved\">function</span>(x) {    <span class=\"keyword\">return</span> x * square(x);  }};race = <span class=\"reserved\">function</span>() {  <span class=\"reserved\">var</span> runners, winner;  winner = arguments[<span class=\"number\">0</span>], runners = <span class=\"number\">2</span> &lt;= arguments.length ? __slice.call(arguments, <span class=\"number\">1</span>) : [];  <span class=\"keyword\">return</span> print(winner, runners);};<span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> elvis !== <span class=\"string\">\"undefined\"</span> &amp;&amp; elvis !== <span class=\"literal\">null</span>) {  alert(<span class=\"string\">\"I knew it!\"</span>);}cubes = (<span class=\"reserved\">function</span>() {  <span class=\"reserved\">var</span> _i, _len, _results;  _results = [];  <span class=\"keyword\">for</span> (_i = <span class=\"number\">0</span>, _len = list.length; _i &lt; _len; _i++) {    num = list[_i];    _results.push(math.cube(num));  }  <span class=\"keyword\">return</span> _results;})();</code></pre><script>window.example8 = \"# Assignment:\\nnumber   = 42\\nopposite = true\\n\\n# Conditions:\\nnumber = -42 if opposite\\n\\n# Functions:\\nsquare = (x) -> x * x\\n\\n# Arrays:\\nlist = [1, 2, 3, 4, 5]\\n\\n# Objects:\\nmath =\\n  root:   Math.sqrt\\n  square: square\\n  cube:   (x) -> x * square x\\n\\n# Splats:\\nrace = (winner, runners...) ->\\n  print winner, runners\\n\\n# Existence:\\nalert \\\"I knew it!\\\" if elvis?\\n\\n# Array comprehensions:\\ncubes = (math.cube num for num in list)\\n\"</script><div class='minibutton ok' onclick='javascript: var cubes, list, math, num, number, opposite, race, square,  __slice = [].slice;number = 42;opposite = true;if (opposite) {  number = -42;}square = function(x) {  return x * x;};list = [1, 2, 3, 4, 5];math = {  root: Math.sqrt,  square: square,  cube: function(x) {    return x * square(x);  }};race = function() {  var runners, winner;  winner = arguments[0], runners = 2 <= arguments.length ? __slice.call(arguments, 1) : [];  return print(winner, runners);};if (typeof elvis !== \"undefined\" && elvis !== null) {  alert(\"I knew it!\");}cubes = (function() {  var _i, _len, _results;  _results = [];  for (_i = 0, _len = list.length; _i < _len; _i++) {    num = list[_i];    _results.push(math.cube(num));  }  return _results;})();;alert(cubes);'>run: cubes</div><br class='clear' /></div>    <h2>      <span id=\"usage\" class=\"bookmark\"></span>      Usage    </h2>    <p>      Once installed, you should have access to the <tt>iced</tt> command,      which can execute scripts, compile <tt>.iced</tt> files into <tt>.js</tt>,      and provide an interactive REPL. (Note that the <tt>iced</tt> command      will also accept the <tt>.coffee</tt> extension).      The <tt>iced</tt> command takes the following options:    </p>    <table>      <tr>        <td><code>-c, --compile</code></td>        <td>          Compile a <tt>.iced</tt> script into a <tt>.js</tt> JavaScript file          of the same name.        </td>      </tr>      <tr>        <td width=\"25%\"><code>-i, --interactive</code></td>        <td>          Launch an interactive CoffeeScript session to try short snippets.          Identical to calling <tt>iced</tt> with no arguments.        </td>      </tr>      <tr>        <td><code>-o, --output [DIR]</code></td>        <td>          Write out all compiled JavaScript files into the specified directory.          Use in conjunction with <tt>--compile</tt> or <tt>--watch</tt>.        </td>      </tr>      <tr>        <td><code>-j, --join [FILE]</code></td>        <td>          Before compiling, concatenate all scripts together in the order they          were passed, and write them into the specified file.          Useful for building large projects.        </td>      </tr>      <tr>        <td><code>-w, --watch</code></td>        <td>          Watch files for changes, rerunning the specified command when any          file is updated.        </td>      </tr>      <tr>        <td><code>-p, --print</code></td>        <td>          Instead of writing out the JavaScript as a file, print it          directly to <b>stdout</b>.        </td>      </tr>      <tr>        <td><code>-l, --lint</code></td>        <td>          If the <tt>jsl</tt>          (<a href=\"http://www.javascriptlint.com/\">JavaScript Lint</a>)          command is installed, use it          to check the compilation of a CoffeeScript file. (Handy in          conjunction with <br /> <tt>--watch</tt>)        </td>      </tr>      <tr>        <td><code>-s, --stdio</code></td>        <td>          Pipe in CoffeeScript to STDIN and get back JavaScript over STDOUT.          Good for use with processes written in other languages. An example:<br />          <tt>cat src/cake.coffee | iced -sc</tt>        </td>      </tr>      <tr>        <td><code>-e, --eval</code></td>        <td>          Compile and print a little snippet of CoffeeScript directly from the          command line. For example:<br /><tt>iced -e \"console.log num for num in [10..1]\"</tt>        </td>      </tr>      <tr>        <td><code>-r, --require</code></td>        <td>          Load a library before compiling or executing your script. Can be used          to hook in to the compiler (to add Growl notifications, for example).        </td>      </tr>      <tr>        <td><code>-b, --bare</code></td>        <td>          Compile the JavaScript without the           <a href=\"#lexical_scope\">top-level function safety wrapper</a>.        </td>      </tr>      <tr>        <td><code>-t, --tokens</code></td>        <td>          Instead of parsing the CoffeeScript, just lex it, and print out the          token stream: <tt>[IDENTIFIER square] [ASSIGN =] [PARAM_START (]</tt> ...        </td>      </tr>      <tr>        <td><code>-n, --nodes</code></td>        <td>          Instead of compiling the CoffeeScript, just lex and parse it, and print          out the parse tree:<pre class=\"no_bar\">Expressions  Assign    Value \"square\"    Code \"x\"      Op *        Value \"x\"        Value \"x\"</pre>        </td>      </tr>      <tr>       <td><code>-I, --runtime [MODE]</code></td>       <td>         An <b>IcedCoffeeScript</b> addition, specify how the Iced         runtime is included in the output JavaScript file.         <i>mode</i> can be one of         <tt>node</tt>, <tt>inline</tt>, <tt>none</tt>, or <tt>window</tt>,         and the default is <tt>node</tt>.  In <tt>node</tt> mode,         emit a Node.js <tt>iced = require('iced-coffee-script').iced</tt>         fragment.  If <tt>inline</tt> is specified, then paste a simplified         version of the runtime directly into the file (but only if there's         Iced code in the input file).  If <tt>none</tt> is specified, do          nothing.  If <tt>window</tt> is specified, make inline a runtime         and assigned it to <tt>window.iced</tt>, so that other fragments         later in the file don't need it.       </td>      </tr>      <tr>        <td><code>--nodejs</code></td>        <td>          The <tt>node</tt> executable has some useful options you can set,          such as<br /> <tt>--debug</tt>, <tt>--debug-brk</tt> and <tt>--max-stack-size</tt>. Use this          flag to forward options directly to Node.js.        </td>      </tr>    </table>    <p>      <b>Examples:</b>    </p>    <ul>      <li>        Compile a directory tree of <tt>.iced</tt> files in <tt>src</tt> into a parallel        tree of <tt>.js</tt> files in <tt>lib</tt>:<br />        <tt>iced --compile --output lib/ src/</tt>      </li>      <li>        Watch a file for changes, and recompile it every time the file is saved:<br />        <tt>iced --watch --compile experimental.iced</tt>      </li>      <li>        Concatenate a list of files into a single script:<br />        <tt>iced --join project.js --compile src/*.iced</tt>      </li>      <li>        Print out the compiled JS from a one-liner:<br />        <tt>iced -bpe \"alert i for i in [0..10]\"</tt>      </li>      <li>        All together now, watch and recompile an entire project as you work on it:<br />        <tt>iced -o lib/ -cw src/</tt>      </li>      <li>        Start the CoffeeScript REPL:<br />        <tt>iced</tt>      </li>    </ul>    <h2>      <span id=\"language\" class=\"bookmark\"></span>      Language Reference    </h2>    <p>      <i>        This reference is structured so that it can be read from top to bottom,        if you like. <b>Early sections focus on new/forked ICS features</b>.        Later sections use ideas and syntax previously introduced.        Familiarity with JavaScript is assumed.        In all of the following examples, the source CoffeeScript is provided on        the left, and the direct compilation into JavaScript is on the right.      </i>    </p>    <p>      <i>        Many of the examples can be run (where it makes sense) by pressing the <b>run</b>        button on the right, and can be loaded into the \"Try It\"        console by pressing the <b>load</b> button on the left.      </i>    <p>      First, the basics: CoffeeScript uses significant whitespace to delimit blocks of code.      You don't need to use semicolons <tt>;</tt> to terminate expressions,      ending the line will do just as well (although semicolons can still      be used to fit multiple expressions onto a single line).      Instead of using curly braces      <tt>{ }</tt> to surround blocks of code in <a href=\"#literals\">functions</a>,      <a href=\"#conditionals\">if-statements</a>,      <a href=\"#switch\">switch</a>, and <a href=\"#try\">try/catch</a>,      use indentation.    </p>    <p>      You don't need to use parentheses to invoke a function if you're passing      arguments. The implicit call wraps forward to the end of the line or block expression.<br />      <tt>console.log sys.inspect object</tt> &rarr; <tt>console.log(sys.inspect(object));</tt>    </p>    <p>      <span id=\"literals\" class=\"bookmark\"></span>      <b class=\"header\">Functions</b>      Functions are defined by an optional list of parameters in parentheses,      an arrow, and the function body. The empty function looks like this:      <tt>-></tt>    </p>    <div class='code'><pre class='tomorrow'><code><span class=\"function\"><span class=\"title\">square</span></span> = (x) -&gt; x * x<span class=\"function\"><span class=\"title\">cube</span></span>   = (x) -&gt; square(x) * x</code></pre><pre class='tomorrow'><code><span class=\"reserved\">var</span> cube, square;square = <span class=\"reserved\">function</span>(x) {  <span class=\"keyword\">return</span> x * x;};cube = <span class=\"reserved\">function</span>(x) {  <span class=\"keyword\">return</span> square(x) * x;};</code></pre><script>window.example9 = \"square = (x) -> x * x\\ncube   = (x) -> square(x) * x\\n\"</script><div class='minibutton load' onclick='javascript: loadConsole(example9);'>load</div><div class='minibutton ok' onclick='javascript: var cube, square;square = function(x) {  return x * x;};cube = function(x) {  return square(x) * x;};;alert(cube(5));'>run: cube(5)</div><br class='clear' /></div>    <p>      Functions may also have default values for arguments. Override the default      value by passing a non-null argument.    </p>    <div class='code'><pre class='tomorrow'><code><span class=\"function\"><span class=\"title\">fill</span></span> = (container, liquid = <span class=\"string\">\"coffee\"</span>) -&gt;  <span class=\"string\">\"Filling the <span class=\"subst\">#{container}</span> with <span class=\"subst\">#{liquid}</span>...\"</span></code></pre><pre class='tomorrow'><code><span class=\"reserved\">var</span> fill;fill = <span class=\"reserved\">function</span>(container, liquid) {  <span class=\"keyword\">if</span> (liquid == <span class=\"literal\">null</span>) {    liquid = <span class=\"string\">\"coffee\"</span>;  }  <span class=\"keyword\">return</span> <span class=\"string\">\"Filling the \"</span> + container + <span class=\"string\">\" with \"</span> + liquid + <span class=\"string\">\"...\"</span>;};</code></pre><script>window.example10 = \"fill = (container, liquid = \\\"coffee\\\") ->\\n  \\\"Filling the #{container} with #{liquid}...\\\"\\n\\n\\n\\n\\n\\n\\n\"</script><div class='minibutton load' onclick='javascript: loadConsole(example10);'>load</div><div class='minibutton ok' onclick='javascript: var fill;fill = function(container, liquid) {  if (liquid == null) {    liquid = \"coffee\";  }  return \"Filling the \" + container + \" with \" + liquid + \"...\";};;alert(fill(\"cup\"));'>run: fill(\"cup\")</div><br class='clear' /></div>    <p>      <span id=\"objects_and_arrays\" class=\"bookmark\"></span>      <b class=\"header\">Objects and Arrays</b>      The CoffeeScript literals for objects and arrays look very similar to      their JavaScript cousins. When each property is listed on its own line,      the commas are optional. Objects may be created using indentation instead      of explicit braces, similar to <a href=\"http://yaml.org\">YAML</a>.    </p>    <div class='code'><pre class='tomorrow'><code>song = [<span class=\"string\">\"do\"</span>, <span class=\"string\">\"re\"</span>, <span class=\"string\">\"mi\"</span>, <span class=\"string\">\"fa\"</span>, <span class=\"string\">\"so\"</span>]singers = {Jagger: <span class=\"string\">\"Rock\"</span>, Elvis: <span class=\"string\">\"Roll\"</span>}bitlist = [  <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>  <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>  <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>]kids =  brother:    name: <span class=\"string\">\"Max\"</span>    age:  <span class=\"number\">11</span>  sister:    name: <span class=\"string\">\"Ida\"</span>    age:  <span class=\"number\">9</span></code></pre><pre class='tomorrow'><code><span class=\"reserved\">var</span> bitlist, kids, singers, song;song = [<span class=\"string\">\"do\"</span>, <span class=\"string\">\"re\"</span>, <span class=\"string\">\"mi\"</span>, <span class=\"string\">\"fa\"</span>, <span class=\"string\">\"so\"</span>];singers = {  Jagger: <span class=\"string\">\"Rock\"</span>,  Elvis: <span class=\"string\">\"Roll\"</span>};bitlist = [<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>];kids = {  brother: {    name: <span class=\"string\">\"Max\"</span>,    age: <span class=\"number\">11</span>  },  sister: {    name: <span class=\"string\">\"Ida\"</span>,    age: <span class=\"number\">9</span>  }};</code></pre><script>window.example11 = \"song = [\\\"do\\\", \\\"re\\\", \\\"mi\\\", \\\"fa\\\", \\\"so\\\"]\\n\\nsingers = {Jagger: \\\"Rock\\\", Elvis: \\\"Roll\\\"}\\n\\nbitlist = [\\n  1, 0, 1\\n  0, 0, 1\\n  1, 1, 0\\n]\\n\\nkids =\\n  brother:\\n    name: \\\"Max\\\"\\n    age:  11\\n  sister:\\n    name: \\\"Ida\\\"\\n    age:  9\\n\\n\\n\"</script><div class='minibutton load' onclick='javascript: loadConsole(example11);'>load</div><div class='minibutton ok' onclick='javascript: var bitlist, kids, singers, song;song = [\"do\", \"re\", \"mi\", \"fa\", \"so\"];singers = {  Jagger: \"Rock\",  Elvis: \"Roll\"};bitlist = [1, 0, 1, 0, 0, 1, 1, 1, 0];kids = {  brother: {    name: \"Max\",    age: 11  },  sister: {    name: \"Ida\",    age: 9  }};;alert(song.join(\" ... \"));'>run: song.join(\" ... \")</div><br class='clear' /></div>    <p>      In JavaScript, you can't use reserved words, like <tt>class</tt>, as properties      of an object, without quoting them as strings. CoffeeScript notices reserved words      used as keys in objects and quotes them for you, so you don't have to worry      about it (say, when using jQuery).    </p>    <div class='code'><pre class='tomorrow'><code>$(<span class=\"string\">'.account'</span>).attr class: <span class=\"string\">'active'</span>log object.<span class=\"class\"><span class=\"keyword\">class</span></span></code></pre><pre class='tomorrow'><code>$(<span class=\"string\">'.account'</span>).attr({  <span class=\"string\">\"class\"</span>: <span class=\"string\">'active'</span>});log(object[<span class=\"string\">\"class\"</span>]);</code></pre><script>window.example12 = \"$('.account').attr class: 'active'\\n\\nlog object.class\\n\\n\\n\"</script><div class='minibutton load' onclick='javascript: loadConsole(example12);'>load</div><div class='minibutton ok' onclick='javascript: $('.account').attr({  \"class\": 'active'});log(object[\"class\"]);;alert(false);'>run: false</div><br class='clear' /></div>    <p>      <span id=\"lexical_scope\" class=\"bookmark\"></span>      <b class=\"header\">Lexical Scoping and Variable Safety</b>      The CoffeeScript compiler takes care to make sure that all of your variables      are properly declared within lexical scope &mdash; you never need to write      <tt>var</tt> yourself.    </p>    <div class='code'><pre class='tomorrow'><code>outer = <span class=\"number\">1</span><span class=\"function\"><span class=\"title\">changeNumbers</span></span> = -&gt;  inner = -<span class=\"number\">1</span>  outer = <span class=\"number\">10</span>inner = changeNumbers()</code></pre><pre class='tomorrow'><code><span class=\"reserved\">var</span> changeNumbers, inner, outer;outer = <span class=\"number\">1</span>;changeNumbers = <span class=\"reserved\">function</span>() {  <span class=\"reserved\">var</span> inner;  inner = -<span class=\"number\">1</span>;  <span class=\"keyword\">return</span> outer = <span class=\"number\">10</span>;};inner = changeNumbers();</code></pre><script>window.example13 = \"outer = 1\\nchangeNumbers = ->\\n  inner = -1\\n  outer = 10\\ninner = changeNumbers()\"</script><div class='minibutton load' onclick='javascript: loadConsole(example13);'>load</div><div class='minibutton ok' onclick='javascript: var changeNumbers, inner, outer;outer = 1;changeNumbers = function() {  var inner;  inner = -1;  return outer = 10;};inner = changeNumbers();;alert(inner);'>run: inner</div><br class='clear' /></div>    <p>      Notice how all of the variable declarations have been pushed up to      the top of the closest scope, the first time they appear.      <b>outer</b> is not redeclared within the inner function, because it's      already in scope; <b>inner</b> within the function, on the other hand,      should not be able to change the value of the external variable of the same name, and      therefore has a declaration of its own.    </p>    <p>      This behavior is effectively identical to Ruby's scope for local variables.      Because you don't have direct access to the <tt>var</tt> keyword,      it's impossible to shadow an outer variable on purpose, you may only refer      to it. So be careful that you're not reusing the name of an external      variable accidentally, if you're writing a deeply nested function.    </p>    <p>      Although suppressed within this documentation for clarity, all      CoffeeScript output is wrapped in an anonymous function:      <tt>(function(){ ... })();</tt> This safety wrapper, combined with the      automatic generation of the <tt>var</tt> keyword, make it exceedingly difficult      to pollute the global namespace by accident.    </p>    <p>      If you'd like to create top-level variables for other scripts to use,      attach them as properties on <b>window</b>, or on the <b>exports</b>      object in CommonJS. The <b>existential operator</b> (covered below), gives you a      reliable way to figure out where to add them; if you're targeting both      CommonJS and the browser: <tt>exports ? this</tt>    </p>    <p>      <span id=\"conditionals\" class=\"bookmark\"></span>      <b class=\"header\">If, Else, Unless, and Conditional Assignment</b>      <b>If/else</b> statements can be written without the use of parentheses and      curly brackets. As with functions and other block expressions,      multi-line conditionals are delimited by indentation. There's also a handy      postfix form, with the <tt>if</tt> or <tt>unless</tt> at the end.    </p>    <p>      CoffeeScript can compile <b>if</b> statements into JavaScript expressions,      using the ternary operator when possible, and closure wrapping otherwise. There      is no explicit ternary statement in CoffeeScript &mdash; you simply use      a regular <b>if</b> statement on a single line.    </p>    <div class='code'><pre class='tomorrow'><code>mood = greatlyImproved <span class=\"keyword\">if</span> singing<span class=\"keyword\">if</span> happy <span class=\"keyword\">and</span> knowsIt  clapsHands()  chaChaCha()<span class=\"keyword\">else</span>  showIt()date = <span class=\"keyword\">if</span> friday <span class=\"keyword\">then</span> sue <span class=\"keyword\">else</span> jill</code></pre><pre class='tomorrow'><code><span class=\"reserved\">var</span> date, mood;<span class=\"keyword\">if</span> (singing) {  mood = greatlyImproved;}<span class=\"keyword\">if</span> (happy &amp;&amp; knowsIt) {  clapsHands();  chaChaCha();} <span class=\"keyword\">else</span> {  showIt();}date = friday ? sue : jill;</code></pre><script>window.example14 = \"mood = greatlyImproved if singing\\n\\nif happy and knowsIt\\n  clapsHands()\\n  chaChaCha()\\nelse\\n  showIt()\\n\\ndate = if friday then sue else jill\\n\\n\\n\\n\"</script><div class='minibutton load' onclick='javascript: loadConsole(example14);'>load</div><div class='minibutton ok' onclick='javascript: var date, mood;if (singing) {  mood = greatlyImproved;}if (happy && knowsIt) {  clapsHands();  chaChaCha();} else {  showIt();}date = friday ? sue : jill;;alert(false);'>run: false</div><br class='clear' /></div>    <p>      <span id=\"splats\" class=\"bookmark\"></span>      <b class=\"header\">Splats...</b>      The JavaScript <b>arguments object</b> is a useful way to work with      functions that accept variable numbers of arguments. CoffeeScript provides      splats <tt>...</tt>, both for function definition as well as invocation,      making variable numbers of arguments a little bit more palatable.    </p>    <div class='code'><pre class='tomorrow'><code>gold = silver = rest = <span class=\"string\">\"unknown\"</span><span class=\"function\"><span class=\"title\">awardMedals</span></span> = (first, second, others...) -&gt;  gold   = first  silver = second  rest   = otherscontenders = [  <span class=\"string\">\"Michael Phelps\"</span>  <span class=\"string\">\"Liu Xiang\"</span>  <span class=\"string\">\"Yao Ming\"</span>  <span class=\"string\">\"Allyson Felix\"</span>  <span class=\"string\">\"Shawn Johnson\"</span>  <span class=\"string\">\"Roman Sebrle\"</span>  <span class=\"string\">\"Guo Jingjing\"</span>  <span class=\"string\">\"Tyson Gay\"</span>  <span class=\"string\">\"Asafa Powell\"</span>  <span class=\"string\">\"Usain Bolt\"</span>]awardMedals contenders...alert <span class=\"string\">\"Gold: \"</span> + goldalert <span class=\"string\">\"Silver: \"</span> + silveralert <span class=\"string\">\"The Field: \"</span> + rest</code></pre><pre class='tomorrow'><code><span class=\"reserved\">var</span> awardMedals, contenders, gold, rest, silver,  __slice = [].slice;gold = silver = rest = <span class=\"string\">\"unknown\"</span>;awardMedals = <span class=\"reserved\">function</span>() {  <span class=\"reserved\">var</span> first, others, second;  first = arguments[<span class=\"number\">0</span>], second = arguments[<span class=\"number\">1</span>], others = <span class=\"number\">3</span> &lt;= arguments.length ? __slice.call(arguments, <span class=\"number\">2</span>) : [];  gold = first;  silver = second;  <span class=\"keyword\">return</span> rest = others;};contenders = [<span class=\"string\">\"Michael Phelps\"</span>, <span class=\"string\">\"Liu Xiang\"</span>, <span class=\"string\">\"Yao Ming\"</span>, <span class=\"string\">\"Allyson Felix\"</span>, <span class=\"string\">\"Shawn Johnson\"</span>, <span class=\"string\">\"Roman Sebrle\"</span>, <span class=\"string\">\"Guo Jingjing\"</span>, <span class=\"string\">\"Tyson Gay\"</span>, <span class=\"string\">\"Asafa Powell\"</span>, <span class=\"string\">\"Usain Bolt\"</span>];awardMedals.apply(<span class=\"literal\">null</span>, contenders);alert(<span class=\"string\">\"Gold: \"</span> + gold);alert(<span class=\"string\">\"Silver: \"</span> + silver);alert(<span class=\"string\">\"The Field: \"</span> + rest);</code></pre><script>window.example15 = \"gold = silver = rest = \\\"unknown\\\"\\n\\nawardMedals = (first, second, others...) ->\\n  gold   = first\\n  silver = second\\n  rest   = others\\n\\ncontenders = [\\n  \\\"Michael Phelps\\\"\\n  \\\"Liu Xiang\\\"\\n  \\\"Yao Ming\\\"\\n  \\\"Allyson Felix\\\"\\n  \\\"Shawn Johnson\\\"\\n  \\\"Roman Sebrle\\\"\\n  \\\"Guo Jingjing\\\"\\n  \\\"Tyson Gay\\\"\\n  \\\"Asafa Powell\\\"\\n  \\\"Usain Bolt\\\"\\n]\\n\\nawardMedals contenders...\\n\\nalert \\\"Gold: \\\" + gold\\nalert \\\"Silver: \\\" + silver\\nalert \\\"The Field: \\\" + rest\\n\\n\\n\"</script><div class='minibutton load' onclick='javascript: loadConsole(example15);'>load</div><div class='minibutton ok' onclick='javascript: var awardMedals, contenders, gold, rest, silver,  __slice = [].slice;gold = silver = rest = \"unknown\";awardMedals = function() {  var first, others, second;  first = arguments[0], second = arguments[1], others = 3 <= arguments.length ? __slice.call(arguments, 2) : [];  gold = first;  silver = second;  return rest = others;};contenders = [\"Michael Phelps\", \"Liu Xiang\", \"Yao Ming\", \"Allyson Felix\", \"Shawn Johnson\", \"Roman Sebrle\", \"Guo Jingjing\", \"Tyson Gay\", \"Asafa Powell\", \"Usain Bolt\"];awardMedals.apply(null, contenders);alert(\"Gold: \" + gold);alert(\"Silver: \" + silver);alert(\"The Field: \" + rest);;'>run</div><br class='clear' /></div>    <p>      <span id=\"loops\" class=\"bookmark\"></span>      <b class=\"header\">Loops and Comprehensions</b>      Most of the loops you'll write in CoffeeScript will be <b>comprehensions</b>      over arrays, objects, and ranges. Comprehensions replace (and compile into)      <b>for</b> loops, with optional guard clauses and the value of the current array index.      Unlike for loops, array comprehensions are expressions, and can be returned      and assigned.    </p>    <div class='code'><pre class='tomorrow'><code><span class=\"comment\"># Eat lunch.</span>eat food <span class=\"keyword\">for</span> food <span class=\"keyword\">in</span> [<span class=\"string\">'toast'</span>, <span class=\"string\">'cheese'</span>, <span class=\"string\">'wine'</span>]<span class=\"comment\"># Fine five course dining.</span>courses = [<span class=\"string\">'greens'</span>, <span class=\"string\">'caviar'</span>, <span class=\"string\">'truffles'</span>, <span class=\"string\">'roast'</span>, <span class=\"string\">'cake'</span>]menu i + <span class=\"number\">1</span>, dish <span class=\"keyword\">for</span> dish, i <span class=\"keyword\">in</span> courses<span class=\"comment\"># Health conscious meal.</span>foods = [<span class=\"string\">'broccoli'</span>, <span class=\"string\">'spinach'</span>, <span class=\"string\">'chocolate'</span>]eat food <span class=\"keyword\">for</span> food <span class=\"keyword\">in</span> foods <span class=\"keyword\">when</span> food <span class=\"keyword\">isnt</span> <span class=\"string\">'chocolate'</span></code></pre><pre class='tomorrow'><code><span class=\"reserved\">var</span> courses, dish, food, foods, i, _i, _j, _k, _len, _len1, _len2, _ref;_ref = [<span class=\"string\">'toast'</span>, <span class=\"string\">'cheese'</span>, <span class=\"string\">'wine'</span>];<span class=\"keyword\">for</span> (_i = <span class=\"number\">0</span>, _len = _ref.length; _i &lt; _len; _i++) {  food = _ref[_i];  eat(food);}courses = [<span class=\"string\">'greens'</span>, <span class=\"string\">'caviar'</span>, <span class=\"string\">'truffles'</span>, <span class=\"string\">'roast'</span>, <span class=\"string\">'cake'</span>];<span class=\"keyword\">for</span> (i = _j = <span class=\"number\">0</span>, _len1 = courses.length; _j &lt; _len1; i = ++_j) {  dish = courses[i];  menu(i + <span class=\"number\">1</span>, dish);}foods = [<span class=\"string\">'broccoli'</span>, <span class=\"string\">'spinach'</span>, <span class=\"string\">'chocolate'</span>];<span class=\"keyword\">for</span> (_k = <span class=\"number\">0</span>, _len2 = foods.length; _k &lt; _len2; _k++) {  food = foods[_k];  <span class=\"keyword\">if</span> (food !== <span class=\"string\">'chocolate'</span>) {    eat(food);  }}</code></pre><script>window.example16 = \"# Eat lunch.\\neat food for food in ['toast', 'cheese', 'wine']\\n\\n# Fine five course dining.\\ncourses = ['greens', 'caviar', 'truffles', 'roast', 'cake']\\nmenu i + 1, dish for dish, i in courses\\n\\n# Health conscious meal.\\nfoods = ['broccoli', 'spinach', 'chocolate']\\neat food for food in foods when food isnt 'chocolate'\\n\"</script><div class='minibutton load' onclick='javascript: loadConsole(example16);'>load</div><div class='minibutton ok' onclick='javascript: var courses, dish, food, foods, i, _i, _j, _k, _len, _len1, _len2, _ref;_ref = ['toast', 'cheese', 'wine'];for (_i = 0, _len = _ref.length; _i < _len; _i++) {  food = _ref[_i];  eat(food);}courses = ['greens', 'caviar', 'truffles', 'roast', 'cake'];for (i = _j = 0, _len1 = courses.length; _j < _len1; i = ++_j) {  dish = courses[i];  menu(i + 1, dish);}foods = ['broccoli', 'spinach', 'chocolate'];for (_k = 0, _len2 = foods.length; _k < _len2; _k++) {  food = foods[_k];  if (food !== 'chocolate') {    eat(food);  }};alert(false);'>run: false</div><br class='clear' /></div>    <p>      Comprehensions should be able to handle most places where you otherwise      would use a loop, <b>each</b>/<b>forEach</b>, <b>map</b>, or <b>select</b>/<b>filter</b>, for example:      <tt>shortNames = (name for name in list when name.length &lt; 5)</tt><br />      If you know the start and end of your loop, or would like to step through      in fixed-size increments, you can use a range to specify the start and      end of your comprehension.    </p>    <div class='code'><pre class='tomorrow'><code>countdown = (num <span class=\"keyword\">for</span> num <span class=\"keyword\">in</span> [<span class=\"number\">10.</span><span class=\"number\">.1</span>])</code></pre><pre class='tomorrow'><code><span class=\"reserved\">var</span> countdown, num;countdown = (<span class=\"reserved\">function</span>() {  <span class=\"reserved\">var</span> _i, _results;  _results = [];  <span class=\"keyword\">for</span> (num = _i = <span class=\"number\">10</span>; _i &gt;= <span class=\"number\">1</span>; num = --_i) {    _results.push(num);  }  <span class=\"keyword\">return</span> _results;})();</code></pre><script>window.example17 = \"countdown = (num for num in [10..1])\\n\\n\"</script><div class='minibutton load' onclick='javascript: loadConsole(example17);'>load</div><div class='minibutton ok' onclick='javascript: var countdown, num;countdown = (function() {  var _i, _results;  _results = [];  for (num = _i = 10; _i >= 1; num = --_i) {    _results.push(num);  }  return _results;})();;alert(countdown);'>run: countdown</div><br class='clear' /></div>    <p>      Note how because we are assigning the value of the comprehensions to a      variable in the example above, CoffeeScript is collecting the result of      each iteration into an array. Sometimes functions end with loops that are      intended to run only for their side-effects. Be careful that you're not      accidentally returning the results of the comprehension in these cases,      by adding a meaningful return value &mdash; like <tt>true</tt> &mdash; or <tt>null</tt>,      to the bottom of your function.    </p>    <p>      To step through a range comprehension in fixed-size chunks,      use <tt>by</tt>, for example:<br />      <tt>evens = (x for x in [0..10] by 2)</tt>    </p>    <p>      Comprehensions can also be used to iterate over the keys and values in      an object. Use <tt>of</tt> to signal comprehension over the properties of      an object instead of the values in an array.    </p>    <div class='code'><pre class='tomorrow'><code>yearsOld = max: <span class=\"number\">10</span>, ida: <span class=\"number\">9</span>, tim: <span class=\"number\">11</span>ages = <span class=\"keyword\">for</span> child, age <span class=\"keyword\">of</span> yearsOld  <span class=\"string\">\"<span class=\"subst\">#{child}</span> is <span class=\"subst\">#{age}</span>\"</span></code></pre><pre class='tomorrow'><code><span class=\"reserved\">var</span> age, ages, child, yearsOld;yearsOld = {  max: <span class=\"number\">10</span>,  ida: <span class=\"number\">9</span>,  tim: <span class=\"number\">11</span>};ages = (<span class=\"reserved\">function</span>() {  <span class=\"reserved\">var</span> _results;  _results = [];  <span class=\"keyword\">for</span> (child <span class=\"keyword\">in</span> yearsOld) {    age = yearsOld[child];    _results.push(<span class=\"string\">\"\"</span> + child + <span class=\"string\">\" is \"</span> + age);  }  <span class=\"keyword\">return</span> _results;})();</code></pre><script>window.example18 = \"yearsOld = max: 10, ida: 9, tim: 11\\n\\nages = for child, age of yearsOld\\n  \\\"#{child} is #{age}\\\"\\n\"</script><div class='minibutton load' onclick='javascript: loadConsole(example18);'>load</div><div class='minibutton ok' onclick='javascript: var age, ages, child, yearsOld;yearsOld = {  max: 10,  ida: 9,  tim: 11};ages = (function() {  var _results;  _results = [];  for (child in yearsOld) {    age = yearsOld[child];    _results.push(\"\" + child + \" is \" + age);  }  return _results;})();;alert(ages.join(\", \"));'>run: ages.join(\", \")</div><br class='clear' /></div>    <p>      If you would like to iterate over just the keys that are defined on the      object itself, by adding a <tt>hasOwnProperty</tt>      check to avoid properties that may be inherited from the prototype, use<br />      <tt>for own key, value of object</tt>    </p>    <p>      The only low-level loop that CoffeeScript provides is the <b>while</b> loop. The      main difference from JavaScript is that the <b>while</b> loop can be used      as an expression, returning an array containing the result of each iteration      through the loop.    </p>    <div class='code'><pre class='tomorrow'><code><span class=\"comment\"># Econ 101</span><span class=\"keyword\">if</span> <span class=\"keyword\">this</span>.studyingEconomics  buy()  <span class=\"keyword\">while</span> supply &gt; demand  sell() <span class=\"keyword\">until</span> supply &gt; demand<span class=\"comment\"># Nursery Rhyme</span>num = <span class=\"number\">6</span>lyrics = <span class=\"keyword\">while</span> num -= <span class=\"number\">1</span>  <span class=\"string\">\"<span class=\"subst\">#{num}</span> little monkeys, jumping on the bed.    One fell out and bumped his head.\"</span></code></pre><pre class='tomorrow'><code><span class=\"reserved\">var</span> lyrics, num;<span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.studyingEconomics) {  <span class=\"keyword\">while</span> (supply &gt; demand) {    buy();  }  <span class=\"keyword\">while</span> (!(supply &gt; demand)) {    sell();  }}num = <span class=\"number\">6</span>;lyrics = (<span class=\"reserved\">function</span>() {  <span class=\"reserved\">var</span> _results;  _results = [];  <span class=\"keyword\">while</span> (num -= <span class=\"number\">1</span>) {    _results.push(<span class=\"string\">\"\"</span> + num + <span class=\"string\">\" little monkeys, jumping on the bed.    One fell out and bumped his head.\"</span>);  }  <span class=\"keyword\">return</span> _results;})();</code></pre><script>window.example19 = \"# Econ 101\\nif this.studyingEconomics\\n  buy()  while supply > demand\\n  sell() until supply > demand\\n\\n# Nursery Rhyme\\nnum = 6\\nlyrics = while num -= 1\\n  \\\"#{num} little monkeys, jumping on the bed.\\n    One fell out and bumped his head.\\\"\\n\"</script><div class='minibutton load' onclick='javascript: loadConsole(example19);'>load</div><div class='minibutton ok' onclick='javascript: var lyrics, num;if (this.studyingEconomics) {  while (supply > demand) {    buy();  }  while (!(supply > demand)) {    sell();  }}num = 6;lyrics = (function() {  var _results;  _results = [];  while (num -= 1) {    _results.push(\"\" + num + \" little monkeys, jumping on the bed.    One fell out and bumped his head.\");  }  return _results;})();;alert(lyrics.join(\"\"));'>run: lyrics.join(\"\")</div><br class='clear' /></div>    <p>      For readability, the <b>until</b> keyword is equivalent to <tt>while not</tt>,      and the <b>loop</b> keyword is equivalent to <tt>while true</tt>.    </p>    <p>      When using a JavaScript loop to generate functions, it's common to insert      a closure wrapper in order to ensure that loop variables are closed over,      and all the generated functions don't just share the final values. CoffeeScript      provides the <tt>do</tt> keyword, which immediately invokes a passed function,      forwarding any arguments.    </p>    <div class='code'><pre class='tomorrow'><code><span class=\"keyword\">for</span> filename <span class=\"keyword\">in</span> list  <span class=\"keyword\">do</span> (filename) -&gt;    fs.readFile filename, (err, contents) -&gt;      compile filename, contents.toString()</code></pre><pre class='tomorrow'><code><span class=\"reserved\">var</span> filename, _fn, _i, _len;_fn = <span class=\"reserved\">function</span>(filename) {  <span class=\"keyword\">return</span> fs.readFile(filename, <span class=\"reserved\">function</span>(err, contents) {    <span class=\"keyword\">return</span> compile(filename, contents.toString());  });};<span class=\"keyword\">for</span> (_i = <span class=\"number\">0</span>, _len = list.length; _i &lt; _len; _i++) {  filename = list[_i];  _fn(filename);}</code></pre><script>window.example20 = \"for filename in list\\n  do (filename) ->\\n    fs.readFile filename, (err, contents) ->\\n      compile filename, contents.toString()\"</script><div class='minibutton load' onclick='javascript: loadConsole(example20);'>load</div><div class='minibutton ok' onclick='javascript: var filename, _fn, _i, _len;_fn = function(filename) {  return fs.readFile(filename, function(err, contents) {    return compile(filename, contents.toString());  });};for (_i = 0, _len = list.length; _i < _len; _i++) {  filename = list[_i];  _fn(filename);};alert(false);'>run: false</div><br class='clear' /></div>    <p>      <span id=\"slices\" class=\"bookmark\"></span>      <b class=\"header\">Array Slicing and Splicing with Ranges</b>      Ranges can also be used to extract slices of arrays.      With two dots (<tt>3..6</tt>), the range is inclusive (<tt>3, 4, 5, 6</tt>);      with three dots (<tt>3...6</tt>), the range excludes the end (<tt>3, 4, 5</tt>).    </p>    <div class='code'><pre class='tomorrow'><code>numbers = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>]start   = numbers[<span class=\"number\">0.</span><span class=\"number\">.2</span>]middle  = numbers[<span class=\"number\">3.</span>.<span class=\"number\">.6</span>]end     = numbers[<span class=\"number\">6.</span>.]copy    = numbers[..]</code></pre><pre class='tomorrow'><code><span class=\"reserved\">var</span> copy, end, middle, numbers, start;numbers = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>];start = numbers.slice(<span class=\"number\">0</span>, <span class=\"number\">3</span>);middle = numbers.slice(<span class=\"number\">3</span>, <span class=\"number\">6</span>);end = numbers.slice(<span class=\"number\">6</span>);copy = numbers.slice(<span class=\"number\">0</span>);</code></pre><script>window.example21 = \"numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]\\n\\nstart   = numbers[0..2]\\n\\nmiddle  = numbers[3...6]\\n\\nend     = numbers[6..]\\n\\ncopy    = numbers[..]\\n\"</script><div class='minibutton load' onclick='javascript: loadConsole(example21);'>load</div><div class='minibutton ok' onclick='javascript: var copy, end, middle, numbers, start;numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9];start = numbers.slice(0, 3);middle = numbers.slice(3, 6);end = numbers.slice(6);copy = numbers.slice(0);;alert(middle);'>run: middle</div><br class='clear' /></div>    <p>      The same syntax can be used with assignment to replace a segment of an array      with new values, splicing it.    </p>    <div class='code'><pre class='tomorrow'><code>numbers = [<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>]numbers[<span class=\"number\">3.</span><span class=\"number\">.6</span>] = [-<span class=\"number\">3</span>, -<span class=\"number\">4</span>, -<span class=\"number\">5</span>, -<span class=\"number\">6</span>] </code></pre><pre class='tomorrow'><code><span class=\"reserved\">var</span> numbers, _ref;numbers = [<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>];[].splice.apply(numbers, [<span class=\"number\">3</span>, <span class=\"number\">4</span>].concat(_ref = [-<span class=\"number\">3</span>, -<span class=\"number\">4</span>, -<span class=\"number\">5</span>, -<span class=\"number\">6</span>])), _ref;</code></pre><script>window.example22 = \"numbers = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\\n\\nnumbers[3..6] = [-3, -4, -5, -6]\\n\\n\\n\\n \"</script><div class='minibutton load' onclick='javascript: loadConsole(example22);'>load</div><div class='minibutton ok' onclick='javascript: var numbers, _ref;numbers = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];[].splice.apply(numbers, [3, 4].concat(_ref = [-3, -4, -5, -6])), _ref;;alert(numbers);'>run: numbers</div><br class='clear' /></div>    <p>      Note that JavaScript strings are immutable, and can't be spliced.    </p>    <p>      <span id=\"expressions\" class=\"bookmark\"></span>      <b class=\"header\">Everything is an Expression (at least, as much as possible)</b>      You might have noticed how even though we don't add return statements      to CoffeeScript functions, they nonetheless return their final value.      The CoffeeScript compiler tries to make sure that all statements in the      language can be used as expressions. Watch how the <tt>return</tt> gets      pushed down into each possible branch of execution in the function      below.    </p>    <div class='code'><pre class='tomorrow'><code><span class=\"function\"><span class=\"title\">grade</span></span> = (student) -&gt;  <span class=\"keyword\">if</span> student.excellentWork    <span class=\"string\">\"A+\"</span>  <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> student.okayStuff    <span class=\"keyword\">if</span> student.triedHard <span class=\"keyword\">then</span> <span class=\"string\">\"B\"</span> <span class=\"keyword\">else</span> <span class=\"string\">\"B-\"</span>  <span class=\"keyword\">else</span>    <span class=\"string\">\"C\"</span>eldest = <span class=\"keyword\">if</span> <span class=\"number\">24</span> &gt; <span class=\"number\">21</span> <span class=\"keyword\">then</span> <span class=\"string\">\"Liz\"</span> <span class=\"keyword\">else</span> <span class=\"string\">\"Ike\"</span></code></pre><pre class='tomorrow'><code><span class=\"reserved\">var</span> eldest, grade;grade = <span class=\"reserved\">function</span>(student) {  <span class=\"keyword\">if</span> (student.excellentWork) {    <span class=\"keyword\">return</span> <span class=\"string\">\"A+\"</span>;  } <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (student.okayStuff) {    <span class=\"keyword\">if</span> (student.triedHard) {      <span class=\"keyword\">return</span> <span class=\"string\">\"B\"</span>;    } <span class=\"keyword\">else</span> {      <span class=\"keyword\">return</span> <span class=\"string\">\"B-\"</span>;    }  } <span class=\"keyword\">else</span> {    <span class=\"keyword\">return</span> <span class=\"string\">\"C\"</span>;  }};eldest = <span class=\"number\">24</span> &gt; <span class=\"number\">21</span> ? <span class=\"string\">\"Liz\"</span> : <span class=\"string\">\"Ike\"</span>;</code></pre><script>window.example23 = \"grade = (student) ->\\n  if student.excellentWork\\n    \\\"A+\\\"\\n  else if student.okayStuff\\n    if student.triedHard then \\\"B\\\" else \\\"B-\\\"\\n  else\\n    \\\"C\\\"\\n\\neldest = if 24 > 21 then \\\"Liz\\\" else \\\"Ike\\\"\"</script><div class='minibutton load' onclick='javascript: loadConsole(example23);'>load</div><div class='minibutton ok' onclick='javascript: var eldest, grade;grade = function(student) {  if (student.excellentWork) {    return \"A+\";  } else if (student.okayStuff) {    if (student.triedHard) {      return \"B\";    } else {      return \"B-\";    }  } else {    return \"C\";  }};eldest = 24 > 21 ? \"Liz\" : \"Ike\";;alert(eldest);'>run: eldest</div><br class='clear' /></div>    <p>      Even though functions will always return their final value, it's both possible      and encouraged to return early from a function body writing out the explicit      return (<tt>return value</tt>), when you know that you're done.    </p>    <p>      Because variable declarations occur at the top of scope, assignment can      be used within expressions, even for variables that haven't been seen before:    </p>    <div class='code'><pre class='tomorrow'><code>six = (one = <span class=\"number\">1</span>) + (two = <span class=\"number\">2</span>) + (three = <span class=\"number\">3</span>)</code></pre><pre class='tomorrow'><code><span class=\"reserved\">var</span> one, six, three, two;six = (one = <span class=\"number\">1</span>) + (two = <span class=\"number\">2</span>) + (three = <span class=\"number\">3</span>);</code></pre><script>window.example24 = \"six = (one = 1) + (two = 2) + (three = 3)\\n\\n\\n\"</script><div class='minibutton load' onclick='javascript: loadConsole(example24);'>load</div><div class='minibutton ok' onclick='javascript: var one, six, three, two;six = (one = 1) + (two = 2) + (three = 3);;alert(six);'>run: six</div><br class='clear' /></div>    <p>      Things that would otherwise be statements in JavaScript, when used      as part of an expression in CoffeeScript, are converted into expressions      by wrapping them in a closure. This lets you do useful things, like assign      the result of a comprehension to a variable:    </p>    <div class='code'><pre class='tomorrow'><code><span class=\"comment\"># The first ten global properties.</span>globals = (name <span class=\"keyword\">for</span> name <span class=\"keyword\">of</span> window)[<span class=\"number\">0.</span>.<span class=\"number\">.10</span>]</code></pre><pre class='tomorrow'><code><span class=\"reserved\">var</span> globals, name;globals = ((<span class=\"reserved\">function</span>() {  <span class=\"reserved\">var</span> _results;  _results = [];  <span class=\"keyword\">for</span> (name <span class=\"keyword\">in</span> window) {    _results.push(name);  }  <span class=\"keyword\">return</span> _results;})()).slice(<span class=\"number\">0</span>, <span class=\"number\">10</span>);</code></pre><script>window.example25 = \"# The first ten global properties.\\n\\nglobals = (name for name of window)[0...10]\"</script><div class='minibutton load' onclick='javascript: loadConsole(example25);'>load</div><div class='minibutton ok' onclick='javascript: var globals, name;globals = ((function() {  var _results;  _results = [];  for (name in window) {    _results.push(name);  }  return _results;})()).slice(0, 10);;alert(globals);'>run: globals</div><br class='clear' /></div>    <p>      As well as silly things, like passing a <b>try/catch</b> statement directly      into a function call:    </p>    <div class='code'><pre class='tomorrow'><code>alert(  <span class=\"keyword\">try</span>    nonexistent / <span class=\"literal\">undefined</span>  <span class=\"keyword\">catch</span> error    <span class=\"string\">\"And the error is ... <span class=\"subst\">#{error}</span>\"</span>)</code></pre><pre class='tomorrow'><code><span class=\"reserved\">var</span> error;alert((<span class=\"reserved\">function</span>() {  <span class=\"keyword\">try</span> {    <span class=\"keyword\">return</span> nonexistent / <span class=\"reserved\">void</span> <span class=\"number\">0</span>;  } <span class=\"keyword\">catch</span> (_error) {    error = _error;    <span class=\"keyword\">return</span> <span class=\"string\">\"And the error is ... \"</span> + error;  }})());</code></pre><script>window.example26 = \"alert(\\n  try\\n    nonexistent / undefined\\n  catch error\\n    \\\"And the error is ... #{error}\\\"\\n)\\n\\n\"</script><div class='minibutton load' onclick='javascript: loadConsole(example26);'>load</div><div class='minibutton ok' onclick='javascript: var error;alert((function() {  try {    return nonexistent / void 0;  } catch (_error) {    error = _error;    return \"And the error is ... \" + error;  }})());;'>run</div><br class='clear' /></div>    <p>      There are a handful of statements in JavaScript that can't be meaningfully      converted into expressions, namely <tt>break</tt>, <tt>continue</tt>,      and <tt>return</tt>. If you make use of them within a block of code,      CoffeeScript won't try to perform the conversion.    </p>    <p>      <span id=\"operators\" class=\"bookmark\"></span>      <b class=\"header\">Operators and Aliases</b>      Because the <tt>==</tt> operator frequently causes undesirable coercion,      is intransitive, and has a different meaning than in other languages,      CoffeeScript compiles <tt>==</tt> into <tt>===</tt>, and <tt>!=</tt> into      <tt>!==</tt>.      In addition, <tt>is</tt> compiles into <tt>===</tt>,      and <tt>isnt</tt> into <tt>!==</tt>.    </p>    <p>      You can use <tt>not</tt> as an alias for <tt>!</tt>.    </p>    <p>      For logic, <tt>and</tt> compiles to <tt>&amp;&amp;</tt>, and <tt>or</tt>      into <tt>||</tt>.    </p>    <p>      Instead of a newline or semicolon, <tt>then</tt> can be used to separate      conditions from expressions, in <b>while</b>,      <b>if</b>/<b>else</b>, and <b>switch</b>/<b>when</b> statements.    </p>    <p>      As in <a href=\"http://yaml.org/\">YAML</a>, <tt>on</tt> and <tt>yes</tt>      are the same as boolean <tt>true</tt>, while <tt>off</tt> and <tt>no</tt> are boolean <tt>false</tt>.    </p>    <p>      <tt>unless</tt> can be used as the inverse of <tt>if</tt>.    </p>    <p>      As a shortcut for <tt>this.property</tt>, you can use <tt>@property</tt>.    </p>    <p>      You can use <tt>in</tt> to test for array presence, and <tt>of</tt> to      test for JavaScript object-key presence.    </p>    <p>      All together now:    </p>    <table class=\"definitions\">      <tr><th>CoffeeScript</th><th>JavaScript</th></tr>      <tr><td><tt>is</tt></td><td><tt>===</tt></td></tr>      <tr><td><tt>isnt</tt></td><td><tt>!==</tt></td></tr>      <tr><td><tt>not</tt></td><td><tt>!</tt></td></tr>      <tr><td><tt>and</tt></td><td><tt>&amp;&amp;</tt></td></tr>      <tr><td><tt>or</tt></td><td><tt>||</tt></td></tr>      <tr><td><tt>true, yes, on</tt></td><td><tt>true</tt></td></tr>      <tr><td><tt>false, no, off</tt></td><td><tt>false</tt></td></tr>      <tr><td><tt>@, this</tt></td><td><tt>this</tt></td></tr>      <tr><td><tt>of</tt></td><td><tt>in</tt></td></tr>      <tr><td><tt>in</tt></td><td><i><small>no JS equivalent</small></i></td></tr>    </table>    <div class='code'><pre class='tomorrow'><code>launch() <span class=\"keyword\">if</span> ignition <span class=\"keyword\">is</span> <span class=\"literal\">on</span>volume = <span class=\"number\">10</span> <span class=\"keyword\">if</span> band <span class=\"keyword\">isnt</span> SpinalTapletTheWildRumpusBegin() <span class=\"keyword\">unless</span> answer <span class=\"keyword\">is</span> <span class=\"literal\">no</span><span class=\"keyword\">if</span> car.speed &lt; limit <span class=\"keyword\">then</span> accelerate()winner = <span class=\"literal\">yes</span> <span class=\"keyword\">if</span> pick <span class=\"keyword\">in</span> [<span class=\"number\">47</span>, <span class=\"number\">92</span>, <span class=\"number\">13</span>]print inspect <span class=\"string\">\"My name is <span class=\"subst\">#{@name}</span>\"</span></code></pre><pre class='tomorrow'><code><span class=\"reserved\">var</span> volume, winner;<span class=\"keyword\">if</span> (ignition === <span class=\"literal\">true</span>) {  launch();}<span class=\"keyword\">if</span> (band !== SpinalTap) {  volume = <span class=\"number\">10</span>;}<span class=\"keyword\">if</span> (answer !== <span class=\"literal\">false</span>) {  letTheWildRumpusBegin();}<span class=\"keyword\">if</span> (car.speed &lt; limit) {  accelerate();}<span class=\"keyword\">if</span> (pick === <span class=\"number\">47</span> || pick === <span class=\"number\">92</span> || pick === <span class=\"number\">13</span>) {  winner = <span class=\"literal\">true</span>;}print(inspect(<span class=\"string\">\"My name is \"</span> + <span class=\"keyword\">this</span>.name));</code></pre><script>window.example27 = \"launch() if ignition is on\\n\\nvolume = 10 if band isnt SpinalTap\\n\\nletTheWildRumpusBegin() unless answer is no\\n\\nif car.speed < limit then accelerate()\\n\\nwinner = yes if pick in [47, 92, 13]\\n\\nprint inspect \\\"My name is #{@name}\\\"\\n\"</script><div class='minibutton load' onclick='javascript: loadConsole(example27);'>load</div><div class='minibutton ok' onclick='javascript: var volume, winner;if (ignition === true) {  launch();}if (band !== SpinalTap) {  volume = 10;}if (answer !== false) {  letTheWildRumpusBegin();}if (car.speed < limit) {  accelerate();}if (pick === 47 || pick === 92 || pick === 13) {  winner = true;}print(inspect(\"My name is \" + this.name));;alert(false);'>run: false</div><br class='clear' /></div>    <p>      <b class=\"header\">The Existential Operator</b>      It's a little difficult to check for the existence of a variable in      JavaScript. <tt>if (variable) ...</tt> comes close, but fails for zero,      the empty string, and false. CoffeeScript's existential operator <tt>?</tt> returns true unless      a variable is <b>null</b> or <b>undefined</b>, which makes it analogous      to Ruby's <tt>nil?</tt>    </p>    <p>      It can also be used for safer conditional assignment than <tt>||=</tt>      provides, for cases where you may be handling numbers or strings.    </p>    <div class='code'><pre class='tomorrow'><code>solipsism = <span class=\"literal\">true</span> <span class=\"keyword\">if</span> mind? <span class=\"keyword\">and</span> <span class=\"keyword\">not</span> world?speed = <span class=\"number\">0</span>speed ?= <span class=\"number\">15</span>footprints = yeti ? <span class=\"string\">\"bear\"</span> </code></pre><pre class='tomorrow'><code><span class=\"reserved\">var</span> footprints, solipsism, speed;<span class=\"keyword\">if</span> ((<span class=\"keyword\">typeof</span> mind !== <span class=\"string\">\"undefined\"</span> &amp;&amp; mind !== <span class=\"literal\">null</span>) &amp;&amp; (<span class=\"keyword\">typeof</span> world === <span class=\"string\">\"undefined\"</span> || world === <span class=\"literal\">null</span>)) {  solipsism = <span class=\"literal\">true</span>;}speed = <span class=\"number\">0</span>;<span class=\"keyword\">if</span> (speed == <span class=\"literal\">null</span>) {  speed = <span class=\"number\">15</span>;}footprints = <span class=\"keyword\">typeof</span> yeti !== <span class=\"string\">\"undefined\"</span> &amp;&amp; yeti !== <span class=\"literal\">null</span> ? yeti : <span class=\"string\">\"bear\"</span>;</code></pre><script>window.example28 = \"solipsism = true if mind? and not world?\\n\\nspeed = 0\\nspeed ?= 15\\n\\nfootprints = yeti ? \\\"bear\\\"\\n\\n\\n\\n\\n\\n\\n \"</script><div class='minibutton load' onclick='javascript: loadConsole(example28);'>load</div><div class='minibutton ok' onclick='javascript: var footprints, solipsism, speed;if ((typeof mind !== \"undefined\" && mind !== null) && (typeof world === \"undefined\" || world === null)) {  solipsism = true;}speed = 0;if (speed == null) {  speed = 15;}footprints = typeof yeti !== \"undefined\" && yeti !== null ? yeti : \"bear\";;alert(footprints);'>run: footprints</div><br class='clear' /></div>    <p>      The accessor variant of the existential operator <tt>?.</tt> can be used to soak      up null references in a chain of properties. Use it instead      of the dot accessor <tt>.</tt> in cases where the base value may be <b>null</b>      or <b>undefined</b>. If all of the properties exist then you'll get the expected      result, if the chain is broken, <b>undefined</b> is returned instead of      the <b>TypeError</b> that would be raised otherwise.    </p>    <div class='code'><pre class='tomorrow'><code>zip = lottery.drawWinner?().address?.zipcode</code></pre><pre class='tomorrow'><code><span class=\"reserved\">var</span> zip, _ref;zip = <span class=\"keyword\">typeof</span> lottery.drawWinner === <span class=\"string\">\"function\"</span> ? (_ref = lottery.drawWinner().address) != <span class=\"literal\">null</span> ? _ref.zipcode : <span class=\"reserved\">void</span> <span class=\"number\">0</span> : <span class=\"reserved\">void</span> <span class=\"number\">0</span>;</code></pre><script>window.example29 = \"zip = lottery.drawWinner?().address?.zipcode\\n\"</script><div class='minibutton load' onclick='javascript: loadConsole(example29);'>load</div><div class='minibutton ok' onclick='javascript: var zip, _ref;zip = typeof lottery.drawWinner === \"function\" ? (_ref = lottery.drawWinner().address) != null ? _ref.zipcode : void 0 : void 0;;alert(false);'>run: false</div><br class='clear' /></div>    <p>      Soaking up nulls is similar to Ruby's      <a href=\"http://andand.rubyforge.org/\">andand gem</a>, and to the      <a href=\"http://groovy.codehaus.org/Operators#Operators-SafeNavigationOperator%28%3F.%29\">safe navigation operator</a>      in Groovy.    </p>    <p>      <span id=\"classes\" class=\"bookmark\"></span>      <b class=\"header\">Classes, Inheritance, and Super</b>      JavaScript's prototypal inheritance has always been a bit of a      brain-bender, with a whole family tree of libraries that provide a cleaner      syntax for classical inheritance on top of JavaScript's prototypes:      <a href=\"http://code.google.com/p/base2/\">Base2</a>,      <a href=\"http://prototypejs.org/\">Prototype.js</a>,      <a href=\"http://jsclass.jcoglan.com/\">JS.Class</a>, etc.      The libraries provide syntactic sugar, but the built-in inheritance would      be completely usable if it weren't for a couple of small exceptions:      it's awkward to call <b>super</b> (the prototype object's      implementation of the current function), and it's awkward to correctly      set the prototype chain.    </p>    <p>      Instead of repetitively attaching functions to a prototype, CoffeeScript      provides a basic <tt>class</tt> structure that allows you to name your class,      set the superclass, assign prototypal properties, and define the constructor,      in a single assignable expression.    </p>    <p>      Constructor functions are named, to better support helpful stack traces.      In the first class in the example below, <tt>this.constructor.name is \"Animal\"</tt>.    </p>    <div class='code'><pre class='tomorrow'><code><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Animal</span></span>  constructor: (<span class=\"property\">@name</span>) -&gt;  move: (meters) -&gt;    alert <span class=\"property\">@name</span> + <span class=\"string\">\" moved <span class=\"subst\">#{meters}</span>m.\"</span><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Snake</span> <span class=\"keyword\">extends</span> <span class=\"title\">Animal</span></span>  move: -&gt;    alert <span class=\"string\">\"Slithering...\"</span>    <span class=\"keyword\">super</span> <span class=\"number\">5</span><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Horse</span> <span class=\"keyword\">extends</span> <span class=\"title\">Animal</span></span>  move: -&gt;    alert <span class=\"string\">\"Galloping...\"</span>    <span class=\"keyword\">super</span> <span class=\"number\">45</span>sam = <span class=\"keyword\">new</span> Snake <span class=\"string\">\"Sammy the Python\"</span>tom = <span class=\"keyword\">new</span> Horse <span class=\"string\">\"Tommy the Palomino\"</span>sam.move()tom.move()</code></pre><pre class='tomorrow'><code><span class=\"reserved\">var</span> Animal, Horse, Snake, sam, tom, _ref, _ref1,  __hasProp = {}.hasOwnProperty,  __extends = <span class=\"reserved\">function</span>(child, parent) { <span class=\"keyword\">for</span> (<span class=\"reserved\">var</span> key <span class=\"keyword\">in</span> parent) { <span class=\"keyword\">if</span> (__hasProp.call(parent, key)) child[key] = parent[key]; } <span class=\"reserved\">function</span> ctor() { <span class=\"keyword\">this</span>.constructor = child; } ctor.prototype = parent.prototype; child.prototype = <span class=\"keyword\">new</span> ctor(); child.__super__ = parent.prototype; <span class=\"keyword\">return</span> child; };Animal = (<span class=\"reserved\">function</span>() {  <span class=\"reserved\">function</span> Animal(name) {    <span class=\"keyword\">this</span>.name = name;  }  Animal.prototype.move = <span class=\"reserved\">function</span>(meters) {    <span class=\"keyword\">return</span> alert(<span class=\"keyword\">this</span>.name + (<span class=\"string\">\" moved \"</span> + meters + <span class=\"string\">\"m.\"</span>));  };  <span class=\"keyword\">return</span> Animal;})();Snake = (<span class=\"reserved\">function</span>(_<span class=\"keyword\">super</span>) {  __extends(Snake, _<span class=\"keyword\">super</span>);  <span class=\"reserved\">function</span> Snake() {    _ref = Snake.__super__.constructor.apply(<span class=\"keyword\">this</span>, arguments);    <span class=\"keyword\">return</span> _ref;  }  Snake.prototype.move = <span class=\"reserved\">function</span>() {    alert(<span class=\"string\">\"Slithering...\"</span>);    <span class=\"keyword\">return</span> Snake.__super__.move.call(<span class=\"keyword\">this</span>, <span class=\"number\">5</span>);  };  <span class=\"keyword\">return</span> Snake;})(Animal);Horse = (<span class=\"reserved\">function</span>(_<span class=\"keyword\">super</span>) {  __extends(Horse, _<span class=\"keyword\">super</span>);  <span class=\"reserved\">function</span> Horse() {    _ref1 = Horse.__super__.constructor.apply(<span class=\"keyword\">this</span>, arguments);    <span class=\"keyword\">return</span> _ref1;  }  Horse.prototype.move = <span class=\"reserved\">function</span>() {    alert(<span class=\"string\">\"Galloping...\"</span>);    <span class=\"keyword\">return</span> Horse.__super__.move.call(<span class=\"keyword\">this</span>, <span class=\"number\">45</span>);  };  <span class=\"keyword\">return</span> Horse;})(Animal);sam = <span class=\"keyword\">new</span> Snake(<span class=\"string\">\"Sammy the Python\"</span>);tom = <span class=\"keyword\">new</span> Horse(<span class=\"string\">\"Tommy the Palomino\"</span>);sam.move();tom.move();</code></pre><script>window.example30 = \"class Animal\\n  constructor: (@name) ->\\n\\n  move: (meters) ->\\n    alert @name + \\\" moved #{meters}m.\\\"\\n\\nclass Snake extends Animal\\n  move: ->\\n    alert \\\"Slithering...\\\"\\n    super 5\\n\\nclass Horse extends Animal\\n  move: ->\\n    alert \\\"Galloping...\\\"\\n    super 45\\n\\nsam = new Snake \\\"Sammy the Python\\\"\\ntom = new Horse \\\"Tommy the Palomino\\\"\\n\\nsam.move()\\ntom.move()\\n\\n\\n\\n\\n\"</script><div class='minibutton load' onclick='javascript: loadConsole(example30);'>load</div><div class='minibutton ok' onclick='javascript: var Animal, Horse, Snake, sam, tom, _ref, _ref1,  __hasProp = {}.hasOwnProperty,  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };Animal = (function() {  function Animal(name) {    this.name = name;  }  Animal.prototype.move = function(meters) {    return alert(this.name + (\" moved \" + meters + \"m.\"));  };  return Animal;})();Snake = (function(_super) {  __extends(Snake, _super);  function Snake() {    _ref = Snake.__super__.constructor.apply(this, arguments);    return _ref;  }  Snake.prototype.move = function() {    alert(\"Slithering...\");    return Snake.__super__.move.call(this, 5);  };  return Snake;})(Animal);Horse = (function(_super) {  __extends(Horse, _super);  function Horse() {    _ref1 = Horse.__super__.constructor.apply(this, arguments);    return _ref1;  }  Horse.prototype.move = function() {    alert(\"Galloping...\");    return Horse.__super__.move.call(this, 45);  };  return Horse;})(Animal);sam = new Snake(\"Sammy the Python\");tom = new Horse(\"Tommy the Palomino\");sam.move();tom.move();;'>run</div><br class='clear' /></div>    <p>      If structuring your prototypes classically isn't your cup of tea, CoffeeScript      provides a couple of lower-level conveniences. The <tt>extends</tt> operator      helps with proper prototype setup, and can be used to create an inheritance      chain between any pair of constructor functions; <tt>::</tt> gives you      quick access to an object's prototype; and <tt>super()</tt>      is converted into a call against the immediate ancestor's method of the same name.    </p>    <div class='code'><pre class='tomorrow'><code>String::<span class=\"function\"><span class=\"title\">dasherize</span></span> = -&gt;  <span class=\"keyword\">this</span>.replace <span class=\"regexp\">/_/g</span>, <span class=\"string\">\"-\"</span></code></pre><pre class='tomorrow'><code>String.prototype.dasherize = <span class=\"reserved\">function</span>() {  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.replace(<span class=\"regexp\">/_/g</span>, <span class=\"string\">\"-\"</span>);};</code></pre><script>window.example31 = \"String::dasherize = ->\\n  this.replace /_/g, \\\"-\\\"\\n\\n\"</script><div class='minibutton load' onclick='javascript: loadConsole(example31);'>load</div><div class='minibutton ok' onclick='javascript: String.prototype.dasherize = function() {  return this.replace(/_/g, \"-\");};;alert(\"one_two\".dasherize());'>run: \"one_two\".dasherize()</div><br class='clear' /></div>    <p>      Finally, class definitions are blocks of executable code, which make for interesting      metaprogramming possibilities. Because in the context of a class definition,      <tt>this</tt> is the class object itself (the constructor function), you      can assign static properties by using <br /><tt>@property: value</tt>, and call      functions defined in parent classes: <tt>@attr 'title', type: 'text'</tt>    </p>    <p>      <span id=\"destructuring\" class=\"bookmark\"></span>      <b class=\"header\">Destructuring Assignment</b>      To make extracting values from complex arrays and objects more convenient,      CoffeeScript implements ECMAScript Harmony's proposed      <a href=\"http://wiki.ecmascript.org/doku.php?id=harmony:destructuring\">destructuring assignment</a>      syntax. When you assign an array or object literal to a value, CoffeeScript      breaks up and matches both sides against each other, assigning the values      on the right to the variables on the left. In the simplest case, it can be      used for parallel assignment:    </p>    <div class='code'><pre class='tomorrow'><code>theBait   = <span class=\"number\">1000</span>theSwitch = <span class=\"number\">0</span>[theBait, theSwitch] = [theSwitch, theBait] </code></pre><pre class='tomorrow'><code><span class=\"reserved\">var</span> theBait, theSwitch, _ref;theBait = <span class=\"number\">1000</span>;theSwitch = <span class=\"number\">0</span>;_ref = [theSwitch, theBait], theBait = _ref[<span class=\"number\">0</span>], theSwitch = _ref[<span class=\"number\">1</span>];</code></pre><script>window.example32 = \"theBait   = 1000\\ntheSwitch = 0\\n\\n[theBait, theSwitch] = [theSwitch, theBait]\\n\\n\\n\\n\\n \"</script><div class='minibutton load' onclick='javascript: loadConsole(example32);'>load</div><div class='minibutton ok' onclick='javascript: var theBait, theSwitch, _ref;theBait = 1000;theSwitch = 0;_ref = [theSwitch, theBait], theBait = _ref[0], theSwitch = _ref[1];;alert(theBait);'>run: theBait</div><br class='clear' /></div>    <p>      But it's also helpful for dealing with functions that return multiple      values.    </p>    <div class='code'><pre class='tomorrow'><code><span class=\"function\"><span class=\"title\">weatherReport</span></span> = (location) -&gt;  <span class=\"comment\"># Make an Ajax request to fetch the weather...</span>  [location, <span class=\"number\">72</span>, <span class=\"string\">\"Mostly Sunny\"</span>][city, temp, forecast] = weatherReport <span class=\"string\">\"Berkeley, CA\"</span></code></pre><pre class='tomorrow'><code><span class=\"reserved\">var</span> city, forecast, temp, weatherReport, _ref;weatherReport = <span class=\"reserved\">function</span>(location) {  <span class=\"keyword\">return</span> [location, <span class=\"number\">72</span>, <span class=\"string\">\"Mostly Sunny\"</span>];};_ref = weatherReport(<span class=\"string\">\"Berkeley, CA\"</span>), city = _ref[<span class=\"number\">0</span>], temp = _ref[<span class=\"number\">1</span>], forecast = _ref[<span class=\"number\">2</span>];</code></pre><script>window.example33 = \"weatherReport = (location) ->\\n  # Make an Ajax request to fetch the weather...\\n  [location, 72, \\\"Mostly Sunny\\\"]\\n\\n[city, temp, forecast] = weatherReport \\\"Berkeley, CA\\\"\\n\\n\\n\\n\\n\"</script><div class='minibutton load' onclick='javascript: loadConsole(example33);'>load</div><div class='minibutton ok' onclick='javascript: var city, forecast, temp, weatherReport, _ref;weatherReport = function(location) {  return [location, 72, \"Mostly Sunny\"];};_ref = weatherReport(\"Berkeley, CA\"), city = _ref[0], temp = _ref[1], forecast = _ref[2];;alert(forecast);'>run: forecast</div><br class='clear' /></div>    <p>      Destructuring assignment can be used with any depth of array and object nesting,      to help pull out deeply nested properties.    </p>    <div class='code'><pre class='tomorrow'><code>futurists =  sculptor: <span class=\"string\">\"Umberto Boccioni\"</span>  painter:  <span class=\"string\">\"Vladimir Burliuk\"</span>  poet:    name:   <span class=\"string\">\"F.T. Marinetti\"</span>    address: [      <span class=\"string\">\"Via Roma 42R\"</span>      <span class=\"string\">\"Bellagio, Italy 22021\"</span>    ]{poet: {name, address: [street, city]}} = futurists</code></pre><pre class='tomorrow'><code><span class=\"reserved\">var</span> city, futurists, name, street, _ref, _ref1;futurists = {  sculptor: <span class=\"string\">\"Umberto Boccioni\"</span>,  painter: <span class=\"string\">\"Vladimir Burliuk\"</span>,  poet: {    name: <span class=\"string\">\"F.T. Marinetti\"</span>,    address: [<span class=\"string\">\"Via Roma 42R\"</span>, <span class=\"string\">\"Bellagio, Italy 22021\"</span>]  }};_ref = futurists.poet, name = _ref.name, (_ref1 = _ref.address, street = _ref1[<span class=\"number\">0</span>], city = _ref1[<span class=\"number\">1</span>]);</code></pre><script>window.example34 = \"futurists =\\n  sculptor: \\\"Umberto Boccioni\\\"\\n  painter:  \\\"Vladimir Burliuk\\\"\\n  poet:\\n    name:   \\\"F.T. Marinetti\\\"\\n    address: [\\n      \\\"Via Roma 42R\\\"\\n      \\\"Bellagio, Italy 22021\\\"\\n    ]\\n\\n{poet: {name, address: [street, city]}} = futurists\\n\\n\\n\\n\"</script><div class='minibutton load' onclick='javascript: loadConsole(example34);'>load</div><div class='minibutton ok' onclick='javascript: var city, futurists, name, street, _ref, _ref1;futurists = {  sculptor: \"Umberto Boccioni\",  painter: \"Vladimir Burliuk\",  poet: {    name: \"F.T. Marinetti\",    address: [\"Via Roma 42R\", \"Bellagio, Italy 22021\"]  }};_ref = futurists.poet, name = _ref.name, (_ref1 = _ref.address, street = _ref1[0], city = _ref1[1]);;alert(name + \" - \" + street);'>run: name + \" - \" + street</div><br class='clear' /></div>    <p>      Destructuring assignment can even be combined with splats.    </p>    <div class='code'><pre class='tomorrow'><code>tag = <span class=\"string\">\"&lt;impossible&gt;\"</span>[open, contents..., close] = tag.split(<span class=\"string\">\"\"</span>)</code></pre><pre class='tomorrow'><code><span class=\"reserved\">var</span> close, contents, open, tag, _i, _ref,  __slice = [].slice;tag = <span class=\"string\">\"&lt;impossible&gt;\"</span>;_ref = tag.split(<span class=\"string\">\"\"</span>), open = _ref[<span class=\"number\">0</span>], contents = <span class=\"number\">3</span> &lt;= _ref.length ? __slice.call(_ref, <span class=\"number\">1</span>, _i = _ref.length - <span class=\"number\">1</span>) : (_i = <span class=\"number\">1</span>, []), close = _ref[_i++];</code></pre><script>window.example35 = \"tag = \\\"<impossible>\\\"\\n\\n[open, contents..., close] = tag.split(\\\"\\\")\\n\\n\\n\\n\\n\\n\\n\"</script><div class='minibutton load' onclick='javascript: loadConsole(example35);'>load</div><div class='minibutton ok' onclick='javascript: var close, contents, open, tag, _i, _ref,  __slice = [].slice;tag = \"<impossible>\";_ref = tag.split(\"\"), open = _ref[0], contents = 3 <= _ref.length ? __slice.call(_ref, 1, _i = _ref.length - 1) : (_i = 1, []), close = _ref[_i++];;alert(contents.join(\"\"));'>run: contents.join(\"\")</div><br class='clear' /></div>    <p>      <span id=\"fat_arrow\" class=\"bookmark\"></span>      <b class=\"header\">Function binding</b>      In JavaScript, the <tt>this</tt> keyword is dynamically scoped to mean the      object that the current function is attached to. If you pass a function as      a callback or attach it to a different object, the original value of <tt>this</tt>      will be lost. If you're not familiar with this behavior,      <a href=\"http://www.digital-web.com/articles/scope_in_javascript/\">this Digital Web article</a>      gives a good overview of the quirks.    </p>    <p>      The fat arrow <tt>=&gt;</tt> can be used to both define a function, and to bind      it to the current value of <tt>this</tt>, right on the spot. This is helpful      when using callback-based libraries like Prototype or jQuery, for creating      iterator functions to pass to <tt>each</tt>, or event-handler functions      to use with <tt>bind</tt>. Functions created with the fat arrow are able to access      properties of the <tt>this</tt> where they're defined.    </p>    <div class='code'><pre class='tomorrow'><code><span class=\"function\"><span class=\"title\">Account</span></span> = (customer, cart) -&gt;  <span class=\"property\">@customer</span> = customer  <span class=\"property\">@cart</span> = cart  $(<span class=\"string\">'.shopping_cart'</span>).bind <span class=\"string\">'click'</span>, (event) =&gt;    <span class=\"property\">@customer</span>.purchase <span class=\"property\">@cart</span></code></pre><pre class='tomorrow'><code><span class=\"reserved\">var</span> Account;Account = <span class=\"reserved\">function</span>(customer, cart) {  <span class=\"reserved\">var</span> _<span class=\"keyword\">this</span> = <span class=\"keyword\">this</span>;  <span class=\"keyword\">this</span>.customer = customer;  <span class=\"keyword\">this</span>.cart = cart;  <span class=\"keyword\">return</span> $(<span class=\"string\">'.shopping_cart'</span>).bind(<span class=\"string\">'click'</span>, <span class=\"reserved\">function</span>(event) {    <span class=\"keyword\">return</span> _<span class=\"keyword\">this</span>.customer.purchase(_<span class=\"keyword\">this</span>.cart);  });};</code></pre><script>window.example36 = \"Account = (customer, cart) ->\\n  @customer = customer\\n  @cart = cart\\n\\n  $('.shopping_cart').bind 'click', (event) =>\\n    @customer.purchase @cart\"</script><div class='minibutton load' onclick='javascript: loadConsole(example36);'>load</div><div class='minibutton ok' onclick='javascript: var Account;Account = function(customer, cart) {  var _this = this;  this.customer = customer;  this.cart = cart;  return $('.shopping_cart').bind('click', function(event) {    return _this.customer.purchase(_this.cart);  });};;alert(false);'>run: false</div><br class='clear' /></div>    <p>      If we had used <tt>-&gt;</tt> in the callback above, <tt>@customer</tt> would      have referred to the undefined \"customer\" property of the DOM element,      and trying to call <tt>purchase()</tt> on it would have raised an exception.    </p>    <p>      When used in a class definition, methods declared with the fat arrow will      be automatically bound to each instance of the class when the instance is      constructed.    </p>    <p>      <span id=\"embedded\" class=\"bookmark\"></span>      <b class=\"header\">Embedded JavaScript</b>      Hopefully, you'll never need to use it, but if you ever need to intersperse      snippets of JavaScript within your CoffeeScript, you can      use backticks to pass it straight through.    </p>    <div class='code'><pre class='tomorrow'><code>hi = `<span class=\"javascript\"><span class=\"keyword\">function</span>() {  <span class=\"keyword\">return</span> [document.title, <span class=\"string\">\"Hello JavaScript\"</span>].join(<span class=\"string\">\": \"</span>);}</span>`</code></pre><pre class='tomorrow'><code><span class=\"reserved\">var</span> hi;hi = <span class=\"reserved\">function</span>() {  <span class=\"keyword\">return</span> [document.title, <span class=\"string\">\"Hello JavaScript\"</span>].join(<span class=\"string\">\": \"</span>);};</code></pre><script>window.example37 = \"hi = `function() {\\n  return [document.title, \\\"Hello JavaScript\\\"].join(\\\": \\\");\\n}`\\n\\n\\n\\n\"</script><div class='minibutton load' onclick='javascript: loadConsole(example37);'>load</div><div class='minibutton ok' onclick='javascript: var hi;hi = function() {  return [document.title, \"Hello JavaScript\"].join(\": \");};;alert(hi());'>run: hi()</div><br class='clear' /></div>    <p>      <span id=\"switch\" class=\"bookmark\"></span>      <b class=\"header\">Switch/When/Else</b>      <b>Switch</b> statements in JavaScript are a bit awkward. You need to      remember to <b>break</b> at the end of every <b>case</b> statement to      avoid accidentally falling through to the default case.      CoffeeScript prevents accidental fall-through, and can convert the <tt>switch</tt>      into a returnable, assignable expression. The format is: <tt>switch</tt> condition,      <tt>when</tt> clauses, <tt>else</tt> the default case.    </p>    <p>      As in Ruby, <b>switch</b> statements in CoffeeScript can take multiple      values for each <b>when</b> clause. If any of the values match, the clause      runs.    </p>    <div class='code'><pre class='tomorrow'><code><span class=\"keyword\">switch</span> day  <span class=\"keyword\">when</span> <span class=\"string\">\"Mon\"</span> <span class=\"keyword\">then</span> go work  <span class=\"keyword\">when</span> <span class=\"string\">\"Tue\"</span> <span class=\"keyword\">then</span> go relax  <span class=\"keyword\">when</span> <span class=\"string\">\"Thu\"</span> <span class=\"keyword\">then</span> go iceFishing  <span class=\"keyword\">when</span> <span class=\"string\">\"Fri\"</span>, <span class=\"string\">\"Sat\"</span>    <span class=\"keyword\">if</span> day <span class=\"keyword\">is</span> bingoDay      go bingo      go dancing  <span class=\"keyword\">when</span> <span class=\"string\">\"Sun\"</span> <span class=\"keyword\">then</span> go church  <span class=\"keyword\">else</span> go work</code></pre><pre class='tomorrow'><code><span class=\"keyword\">switch</span> (day) {  <span class=\"reserved\">case</span> <span class=\"string\">\"Mon\"</span>:    go(work);    <span class=\"keyword\">break</span>;  <span class=\"reserved\">case</span> <span class=\"string\">\"Tue\"</span>:    go(relax);    <span class=\"keyword\">break</span>;  <span class=\"reserved\">case</span> <span class=\"string\">\"Thu\"</span>:    go(iceFishing);    <span class=\"keyword\">break</span>;  <span class=\"reserved\">case</span> <span class=\"string\">\"Fri\"</span>:  <span class=\"reserved\">case</span> <span class=\"string\">\"Sat\"</span>:    <span class=\"keyword\">if</span> (day === bingoDay) {      go(bingo);      go(dancing);    }    <span class=\"keyword\">break</span>;  <span class=\"reserved\">case</span> <span class=\"string\">\"Sun\"</span>:    go(church);    <span class=\"keyword\">break</span>;  <span class=\"reserved\">default</span>:    go(work);}</code></pre><script>window.example38 = \"switch day\\n  when \\\"Mon\\\" then go work\\n  when \\\"Tue\\\" then go relax\\n  when \\\"Thu\\\" then go iceFishing\\n  when \\\"Fri\\\", \\\"Sat\\\"\\n    if day is bingoDay\\n      go bingo\\n      go dancing\\n  when \\\"Sun\\\" then go church\\n  else go work\"</script><div class='minibutton load' onclick='javascript: loadConsole(example38);'>load</div><div class='minibutton ok' onclick='javascript: switch (day) {  case \"Mon\":    go(work);    break;  case \"Tue\":    go(relax);    break;  case \"Thu\":    go(iceFishing);    break;  case \"Fri\":  case \"Sat\":    if (day === bingoDay) {      go(bingo);      go(dancing);    }    break;  case \"Sun\":    go(church);    break;  default:    go(work);};alert(false);'>run: false</div><br class='clear' /></div>    <p>      <span id=\"try\" class=\"bookmark\"></span>      <b class=\"header\">Try/Catch/Finally</b>      Try/catch statements are just about the same as JavaScript (although      they work as expressions).    </p>    <div class='code'><pre class='tomorrow'><code><span class=\"keyword\">try</span>  allHellBreaksLoose()  catsAndDogsLivingTogether()<span class=\"keyword\">catch</span> error  print error<span class=\"keyword\">finally</span>  cleanUp()</code></pre><pre class='tomorrow'><code><span class=\"reserved\">var</span> error;<span class=\"keyword\">try</span> {  allHellBreaksLoose();  catsAndDogsLivingTogether();} <span class=\"keyword\">catch</span> (_error) {  error = _error;  print(error);} <span class=\"keyword\">finally</span> {  cleanUp();}</code></pre><script>window.example39 = \"try\\n  allHellBreaksLoose()\\n  catsAndDogsLivingTogether()\\ncatch error\\n  print error\\nfinally\\n  cleanUp()\\n\\n\"</script><div class='minibutton load' onclick='javascript: loadConsole(example39);'>load</div><div class='minibutton ok' onclick='javascript: var error;try {  allHellBreaksLoose();  catsAndDogsLivingTogether();} catch (_error) {  error = _error;  print(error);} finally {  cleanUp();};alert(false);'>run: false</div><br class='clear' /></div>    <p>      <span id=\"comparisons\" class=\"bookmark\"></span>      <b class=\"header\">Chained Comparisons</b>      CoffeeScript borrows      <a href=\"http://docs.python.org/reference/expressions.html#notin\">chained comparisons</a>      from Python &mdash; making it easy to test if a value falls within a      certain range.    </p>    <div class='code'><pre class='tomorrow'><code>cholesterol = <span class=\"number\">127</span>healthy = <span class=\"number\">200</span> &gt; cholesterol &gt; <span class=\"number\">60</span></code></pre><pre class='tomorrow'><code><span class=\"reserved\">var</span> cholesterol, healthy;cholesterol = <span class=\"number\">127</span>;healthy = (<span class=\"number\">200</span> &gt; cholesterol &amp;&amp; cholesterol &gt; <span class=\"number\">60</span>);</code></pre><script>window.example40 = \"cholesterol = 127\\n\\nhealthy = 200 > cholesterol > 60\\n\\n\\n\"</script><div class='minibutton load' onclick='javascript: loadConsole(example40);'>load</div><div class='minibutton ok' onclick='javascript: var cholesterol, healthy;cholesterol = 127;healthy = (200 > cholesterol && cholesterol > 60);;alert(healthy);'>run: healthy</div><br class='clear' /></div>    <p>      <span id=\"strings\" class=\"bookmark\"></span>      <b class=\"header\">String Interpolation, Block Strings, and Block Comments</b>      Ruby-style string interpolation is included in CoffeeScript. Double-quoted      strings allow for interpolated values, using <tt>#{ ... }</tt>,      and single-quoted strings are literal.    </p>    <div class='code'><pre class='tomorrow'><code>author = <span class=\"string\">\"Wittgenstein\"</span>quote  = <span class=\"string\">\"A picture is a fact. -- <span class=\"subst\">#{ author }</span>\"</span>sentence = <span class=\"string\">\"<span class=\"subst\">#{ <span class=\"number\">22</span> / <span class=\"number\">7</span> }</span> is a decent approximation of \u03c0\"</span></code></pre><pre class='tomorrow'><code><span class=\"reserved\">var</span> author, quote, sentence;author = <span class=\"string\">\"Wittgenstein\"</span>;quote = <span class=\"string\">\"A picture is a fact. -- \"</span> + author;sentence = <span class=\"string\">\"\"</span> + (<span class=\"number\">22</span> / <span class=\"number\">7</span>) + <span class=\"string\">\" is a decent approximation of \u03c0\"</span>;</code></pre><script>window.example41 = \"author = \\\"Wittgenstein\\\"\\nquote  = \\\"A picture is a fact. -- #{ author }\\\"\\n\\nsentence = \\\"#{ 22 / 7 } is a decent approximation of \u03c0\\\"\\n\\n\\n\\n\\n\\n\"</script><div class='minibutton load' onclick='javascript: loadConsole(example41);'>load</div><div class='minibutton ok' onclick='javascript: var author, quote, sentence;author = \"Wittgenstein\";quote = \"A picture is a fact. -- \" + author;sentence = \"\" + (22 / 7) + \" is a decent approximation of \u03c0\";;alert(sentence);'>run: sentence</div><br class='clear' /></div>    <p>      Multiline strings are allowed in CoffeeScript.    </p>    <div class='code'><pre class='tomorrow'><code>mobyDick = <span class=\"string\">\"Call me Ishmael. Some years ago -- never mind how long precisely -- having little or no money in my purse, and nothing particular to interest me on shore, I thought I would sail about a little and see the watery part of the world...\"</span></code></pre><pre class='tomorrow'><code><span class=\"reserved\">var</span> mobyDick;mobyDick = <span class=\"string\">\"Call me Ishmael. Some years ago -- never mind how long precisely -- having little or no money in my purse, and nothing particular to interest me on shore, I thought I would sail about a little and see the watery part of the world...\"</span>;</code></pre><script>window.example42 = \"mobyDick = \\\"Call me Ishmael. Some years ago --\\n never mind how long precisely -- having little\\n or no money in my purse, and nothing particular\\n to interest me on shore, I thought I would sail\\n about a little and see the watery part of the\\n world...\\\"\\n\\n\\n\"</script><div class='minibutton load' onclick='javascript: loadConsole(example42);'>load</div><div class='minibutton ok' onclick='javascript: var mobyDick;mobyDick = \"Call me Ishmael. Some years ago -- never mind how long precisely -- having little or no money in my purse, and nothing particular to interest me on shore, I thought I would sail about a little and see the watery part of the world...\";;alert(mobyDick);'>run: mobyDick</div><br class='clear' /></div>    <p>      Block strings can be used to hold formatted or indentation-sensitive text      (or, if you just don't feel like escaping quotes and apostrophes). The      indentation level that begins the block is maintained throughout, so      you can keep it all aligned with the body of your code.    </p>    <div class='code'><pre class='tomorrow'><code>html = <span class=\"string\">\"\"\"       &lt;strong&gt;         cup of coffeescript       &lt;/strong&gt;       \"\"\"</span>       </code></pre><pre class='tomorrow'><code><span class=\"reserved\">var</span> html;html = <span class=\"string\">\"&lt;strong&gt;\\n  cup of coffeescript\\n&lt;/strong&gt;\"</span>;</code></pre><script>window.example43 = \"html = \\\"\\\"\\\"\\n       <strong>\\n         cup of coffeescript\\n       </strong>\\n       \\\"\\\"\\\"\\n       \\n\"</script><div class='minibutton load' onclick='javascript: loadConsole(example43);'>load</div><div class='minibutton ok' onclick='javascript: var html;html = \"<strong>\\n  cup of coffeescript\\n</strong>\";;alert(html);'>run: html</div><br class='clear' /></div>    <p>      Double-quoted block strings, like other double-quoted strings, allow interpolation.    </p>    <p>      Sometimes you'd like to pass a block comment through to the generated      JavaScript. For example, when you need to embed a licensing header at      the top of a file. Block comments, which mirror the syntax for block strings,      are preserved in the generated code.    </p>    <div class='code'><pre class='tomorrow'><code><span class=\"comment\">###SkinnyMochaHalfCaffScript Compiler v1.0Released under the MIT License###</span></code></pre><pre class='tomorrow'><code>/*SkinnyMochaHalfCaffScript Compiler v1<span class=\"number\">.0</span>Released under the MIT License*/</code></pre><script>window.example44 = \"###\\nSkinnyMochaHalfCaffScript Compiler v1.0\\nReleased under the MIT License\\n###\\n\\n\\n\"</script><div class='minibutton load' onclick='javascript: loadConsole(example44);'>load</div><div class='minibutton ok' onclick='javascript: /*SkinnyMochaHalfCaffScript Compiler v1.0Released under the MIT License*/;alert(false);'>run: false</div><br class='clear' /></div>    <p>      <span id=\"regexes\" class=\"bookmark\"></span>      <b class=\"header\">Block Regular Expressions</b>      Similar to block strings and comments, CoffeeScript supports block regexes &mdash;      extended regular expressions that ignore internal whitespace and can contain      comments and interpolation. Modeled after Perl's <tt>/x</tt> modifier, CoffeeSctipt's      block regexes are delimited by <tt>///</tt> and go a long way towards making complex      regular expressions readable. To quote from the CoffeeScript source:    </p>    <div class='code'><pre class='tomorrow'><code>OPERATOR = <span class=\"regexp\">/// ^ (  ?: [-=]&gt;             <span class=\"comment\"># function</span>   | [-+*/%&lt;&gt;&amp;|^!?=]=  <span class=\"comment\"># compound assign / compare</span>   | &gt;&gt;&gt;=?             <span class=\"comment\"># zero-fill right shift</span>   | ([-+:])\\1         <span class=\"comment\"># doubles</span>   | ([&amp;|&lt;&gt;])\\2=?      <span class=\"comment\"># logic / shift</span>   | \\?\\.              <span class=\"comment\"># soak access</span>   | \\.{2,3}           <span class=\"comment\"># range or splat</span>) ///</span></code></pre><pre class='tomorrow'><code><span class=\"reserved\">var</span> OPERATOR;OPERATOR = <span class=\"regexp\">/^(?:[-=]&gt;|[-+*\\/%&lt;&gt;&amp;|^!?=]=|&gt;&gt;&gt;=?|([-+:])\\1|([&amp;|&lt;&gt;])\\2=?|\\?\\.|\\.{2,3})/</span>;</code></pre><script>window.example45 = \"OPERATOR = /// ^ (\\n  ?: [-=]>             # function\\n   | [-+*/%<>&|^!?=]=  # compound assign / compare\\n   | >>>=?             # zero-fill right shift\\n   | ([-+:])\\\\1         # doubles\\n   | ([&|<>])\\\\2=?      # logic / shift\\n   | \\\\?\\\\.              # soak access\\n   | \\\\.{2,3}           # range or splat\\n) ///\\n\\n\\n\"</script><div class='minibutton load' onclick='javascript: loadConsole(example45);'>load</div><div class='minibutton ok' onclick='javascript: var OPERATOR;OPERATOR = /^(?:[-=]>|[-+*\\/%<>&|^!?=]=|>>>=?|([-+:])\\1|([&|<>])\\2=?|\\?\\.|\\.{2,3})/;;alert(false);'>run: false</div><br class='clear' /></div>    <h2>      <span id=\"cake\" class=\"bookmark\"></span>      Cake, and Cakefiles    </h2>    <p>      CoffeeScript includes a (very) simple build system similar to      <a href=\"http://www.gnu.org/software/make/\">Make</a> and      <a href=\"http://rake.rubyforge.org/\">Rake</a>. Naturally,      it's called Cake, and is used for the tasks that build and test the CoffeeScript      language itself. Tasks are defined in a file named <tt>Cakefile</tt>, and      can be invoked by running <tt>cake [task]</tt> from within the directory.      To print a list of all the tasks and options, just type <tt>cake</tt>.    </p>    <p>      Task definitions are written in CoffeeScript, so you can put arbitrary code      in your Cakefile. Define a task with a name, a long description, and the      function to invoke when the task is run. If your task takes a command-line      option, you can define the option with short and long flags, and it will      be made available in the <tt>options</tt> object. Here's a task that uses      the Node.js API to rebuild CoffeeScript's parser:    </p>    <div class='code'><pre class='tomorrow'><code>fs = require <span class=\"string\">'fs'</span>option <span class=\"string\">'-o'</span>, <span class=\"string\">'--output [DIR]'</span>, <span class=\"string\">'directory for compiled code'</span>task <span class=\"string\">'build:parser'</span>, <span class=\"string\">'rebuild the Jison parser'</span>, (options) -&gt;  require <span class=\"string\">'jison'</span>  code = require(<span class=\"string\">'./lib/grammar'</span>).parser.generate()  dir  = options.output <span class=\"keyword\">or</span> <span class=\"string\">'lib'</span>  fs.writeFile <span class=\"string\">\"<span class=\"subst\">#{dir}</span>/parser.js\"</span>, code</code></pre><pre class='tomorrow'><code><span class=\"reserved\">var</span> fs;fs = require(<span class=\"string\">'fs'</span>);option(<span class=\"string\">'-o'</span>, <span class=\"string\">'--output [DIR]'</span>, <span class=\"string\">'directory for compiled code'</span>);task(<span class=\"string\">'build:parser'</span>, <span class=\"string\">'rebuild the Jison parser'</span>, <span class=\"reserved\">function</span>(options) {  <span class=\"reserved\">var</span> code, dir;  require(<span class=\"string\">'jison'</span>);  code = require(<span class=\"string\">'./lib/grammar'</span>).parser.generate();  dir = options.output || <span class=\"string\">'lib'</span>;  <span class=\"keyword\">return</span> fs.writeFile(<span class=\"string\">\"\"</span> + dir + <span class=\"string\">\"/parser.js\"</span>, code);});</code></pre><script>window.example46 = \"fs = require 'fs'\\n\\noption '-o', '--output [DIR]', 'directory for compiled code'\\n\\ntask 'build:parser', 'rebuild the Jison parser', (options) ->\\n  require 'jison'\\n  code = require('./lib/grammar').parser.generate()\\n  dir  = options.output or 'lib'\\n  fs.writeFile \\\"#{dir}/parser.js\\\", code\"</script><div class='minibutton load' onclick='javascript: loadConsole(example46);'>load</div><div class='minibutton ok' onclick='javascript: var fs;fs = require('fs');option('-o', '--output [DIR]', 'directory for compiled code');task('build:parser', 'rebuild the Jison parser', function(options) {  var code, dir;  require('jison');  code = require('./lib/grammar').parser.generate();  dir = options.output || 'lib';  return fs.writeFile(\"\" + dir + \"/parser.js\", code);});;alert(false);'>run: false</div><br class='clear' /></div>    <p>      If you need to invoke one task before another &mdash; for example, running      <tt>build</tt> before <tt>test</tt>, you can use the <tt>invoke</tt> function:      <tt>invoke 'build'</tt>. Cake tasks are a minimal way to expose your      CoffeeScript functions to the command line, so      <a href=\"documentation/docs/cake.html\">don't expect any fanciness built-in</a>.      If you need dependencies, or async callbacks, it's best to put them in your      code itself &mdash; not the cake task.    </p>    <h2>      <span id=\"scripts\" class=\"bookmark\"></span>      \"text/coffeescript\" Script Tags    </h2>    <p>      While it's not recommended for serious use, CoffeeScripts may be included      directly within the browser using <tt>&lt;script type=\"text/coffeescript\"&gt;</tt>      tags. The source includes a compressed and minified version of the compiler      (<a href=\"extras/coffee-script.js\">Download current version here, 39k when gzipped</a>)      as <tt>extras/coffee-script.js</tt>. Include this file on a page with      inline CoffeeScript tags, and it will compile and evaluate them in order.    </p>    <p>      In fact, the little bit of glue script that runs \"Try It\" above,      as well as the jQuery for the menu, is implemented in just this way.      View source and look at the bottom of the page to see the example.      Including the script also gives you access to <tt>CoffeeScript.compile()</tt>      so you can pop open Firebug and try compiling some strings.    </p>    <p>      The usual caveats about CoffeeScript apply &mdash; your inline scripts will      run within a closure wrapper, so if you want to expose global variables or      functions, attach them to the <tt>window</tt> object.    </p>    <h2>      <span id=\"resources\" class=\"bookmark\"></span>      Books    </h2>    <p>      There are a number of excellent resources to help you get      started with CoffeeScript, some of which are freely available online.    </p>    <ul>      <li>        <a href=\"http://arcturo.github.com/library/coffeescript/\">The Little Book on CoffeeScript</a>        is a brief 5-chapter introduction to CoffeeScript, written with great        clarity and precision by        <a href=\"http://alexmaccaw.co.uk/\">Alex MacCaw</a>.      </li>      <li>        <a href=\"http://autotelicum.github.com/Smooth-CoffeeScript/\">Smooth CoffeeScript</a>        is a reimagination of the excellent book        <a href=\"http://eloquentjavascript.net/\">Eloquent JavaScript</a>, as if        it had been written in CoffeeScript instead. Covers language features        as well a the functional and object oriented programming styles. By        <a href=\"https://github.com/autotelicum\">E. Hoigaard</a>.      </li>      <li>        <a href=\"http://pragprog.com/book/tbcoffee/coffeescript\">CoffeeScript: Accelerated JavaScript Development</a>        is <a href=\"http://trevorburnham.com/\">Trevor Burnham</a>'s thorough        introduction to the language. By the end of the book, you'll have built        a fast-paced multiplayer word game, writing both the client-side and Node.js        portions in CoffeeScript.      </li>    </ul>        <h2>      Screencasts    </h2>        <ul>      <li>        <a href=\"http://coffeescript.codeschool.com\">A Sip of CoffeeScript</a> is a <a href=\"http://www.codeschool.com\">Code School Course</a>        which combines 6 screencasts with in-browser coding to make learning fun.  The first level is free to try out.      </li>      <li>        <a href=\"http://peepcode.com/products/coffeescript\">Meet CoffeeScript</a>        is a 75-minute long screencast by <a href=\"http://peepcode.com/\">PeepCode</a>.        Highly memorable for its animations which demonstrate transforming CoffeeScript        into the equivalent JS.      </li>      <li>        If you're looking for less of a time commitment, RailsCasts'        <a href=\"http://railscasts.com/episodes/267-coffeescript-basics\">CoffeeScript Basics</a>        should have you covered, hitting all of the important notes about CoffeeScript        in 11 minutes.      </li>    </ul>    <h2>      Examples    </h2>        <p>      The <a href=\"https://github.com/languages/coffeescript\">best list of       open-source CoffeeScript examples</a> can be found on GitHub. But just      to throw out few more:    </p>    <ul>      <li>        <b>github</b>'s <a href=\"http://hubot.github.com/\">Hubot</a>,        a friendly IRC robot that can perform any number of useful and useless tasks.      </li>      <li>        <b>sstephenson</b>'s <a href=\"http://pow.cx/\">Pow</a>,        a zero-configuration Rack server, with comprehensive annotated source.      </li>      <li>        <b>frank06</b>'s <a href=\"http://riakjs.org/\">riak-js</a>, a Node.js client for        <a href=\"http://www.basho.com/Riak.html\">Riak</a>, with support for HTTP        and Protocol Buffers.      </li>      <li>        <b>technoweenie</b>'s <a href=\"https://github.com/technoweenie/coffee-resque\">Coffee-Resque</a>,        a port of <a href=\"https://github.com/defunkt/resque\">Resque</a> for Node.js.      </li>      <li>        <b>assaf</b>'s <a href=\"http://zombie.labnotes.org/\">Zombie.js</a>,        a headless, full-stack, faux-browser testing library for Node.js.      </li>      <li>        <b>jashkenas</b>' <a href=\"documentation/docs/underscore.html\">Underscore.coffee</a>, a port        of the <a href=\"http://documentcloud.github.com/underscore/\">Underscore.js</a>        library of helper functions.      </li>      <li>        <b>stephank</b>'s <a href=\"https://github.com/stephank/orona\">Orona</a>, a remake of        the Bolo tank game for modern browsers.      </li>      <li>        <b>josh</b>'s <a href=\"http://josh.github.com/nack/\">nack</a>, a Node.js-powered        <a href=\"http://rack.rubyforge.org/\">Rack</a> server.      </li>    </ul>    <h2>      Resources    </h2>    <ul>      <li>        <a href=\"https://github.com/maxtaco/coffee-script/\">Source Code</a><br />        Use <tt>bin/coffee</tt> to test your changes,<br />        <tt>bin/cake test</tt> to run the test suite,<br />        <tt>bin/cake build</tt> to rebuild the CoffeeScript compiler, and <br />        <tt>bin/cake build:parser</tt> to regenerate the Jison parser if you're        working on the grammar. <br /><br />        <tt>git checkout lib &amp;&amp; bin/cake build:full</tt> is a good command to run when you're working        on the core language. It'll refresh the lib directory        (in case you broke something), build your altered compiler, use that to        rebuild itself (a good sanity test) and then run all of the tests. If        they pass, there's a good chance you've made a successful change.      </li>      <li>        <a href=\"http://github.com/maxtaco/coffee-script/issues\">CoffeeScript Issues</a><br />        Bug reports, feature proposals, and ideas for changes to the language belong here.      </li>      <li>        <a href=\"https://groups.google.com/forum/#!forum/coffeescript\">CoffeeScript Google Group</a><br />        If you'd like to ask a question, the mailing list is a good place to get help.      </li>      <li>        <a href=\"http://github.com/maxtaco/coffee-script/wiki\">The CoffeeScript Wiki</a><br />        If you've ever learned a neat CoffeeScript tip or trick, or ran into a gotcha &mdash; share it on the wiki.        The wiki also serves as a directory of handy        <a href=\"http://github.com/jashkenas/coffee-script/wiki/Text-editor-plugins\">text editor extensions</a>,        <a href=\"http://github.com/jashkenas/coffee-script/wiki/Web-framework-plugins\">web framework plugins</a>,        and general <a href=\"http://github.com/jashkenas/coffee-script/wiki/Build-tools\">CoffeeScript build tools</a>.      </li>      <li>        <a href=\"http://github.com/jashkenas/coffee-script/wiki/FAQ\">The FAQ</a><br />        Perhaps your CoffeeScript-related question has been asked before. Check the FAQ first.      </li>      <li>        <a href=\"https://github.com/jashkenas/coffee-script/downloads\">High-Rez Logo</a><br />        The CoffeeScript logo is available in Illustrator, EPS and PSD formats, for use        in presentations.      </li>    </ul>    <h2>      <span id=\"webchat\" class=\"bookmark\"></span>      Web Chat (IRC)    </h2>    <p>      Quick help and advice can usually be found in the CoffeeScript IRC room.      Join <tt>#coffeescript</tt> on <tt>irc.freenode.net</tt>, or click the      button below to open a webchat session on this page.    </p>    <p>      <button id=\"open_webchat\">click to open #coffeescript</button>    </p>    <h2>      <span id=\"changelog\" class=\"bookmark\"></span>      Change Log    </h2>        <p>      <b class=\"header\" style=\"margin-top: 20px;\">        <a href=\"https://github.com/jashkenas/coffee-script/compare/1.1.3...1.2.0\">1.2.0</a>        <span class=\"timestamp\"> &ndash; <small>Dec. 18, 2011</small></span>      </b>      <ul>        <li>          Multiple improvements to <tt>coffee --watch</tt> and <tt>--join</tt>.          You may now use both together, as well as add and remove          files and directories within a <tt>--watch</tt>'d folder.        </li>        <li>          The <tt>throw</tt> statement can now be used as part of an expression.        </li>        <li>          Block comments at the top of the file will now appear outside of the          safety closure wrapper.        </li>        <li>          Fixed a number of minor 1.1.3 regressions having to do with trailing          operators and unfinished lines, and a more major 1.1.3 regression that          caused bound functions <i>within</i> bound class functions to have the incorrect          <tt>this</tt>.        </li>      </ul>    </p>        <p>      <b class=\"header\" style=\"margin-top: 20px;\">        <a href=\"https://github.com/jashkenas/coffee-script/compare/1.1.2...1.1.3\">1.1.3</a>        <span class=\"timestamp\"> &ndash; <small>Nov. 8, 2011</small></span>      </b>      <ul>        <li>          Ahh, whitespace. CoffeeScript's compiled JS now tries to space things          out and keep it readable, as you can see in the examples on this page.        </li>        <li>          You can now call <tt>super</tt> in class level methods in class bodies,           and bound class methods now preserve their correct context.        </li>        <li>          JavaScript has always supported octal numbers <tt>010 is 8</tt>,          and hexadecimal numbers <tt>0xf is 15</tt>, but CoffeeScript now          also supports binary numbers: <tt>0b10 is 2</tt>.        </li>        <li>          The CoffeeScript module has been nested under a subdirectory to make           it easier to <tt>require</tt> individual components separately, without          having to use <b>npm</b>. For example, after adding the CoffeeScript          folder to your path: <tt>require('coffee-script/lexer')</tt>        </li>        <li>          There's a new \"link\" feature in Try CoffeeScript on this webpage. Use          it to get a shareable permalink for your example script.        </li>        <li>          The <tt>coffee --watch</tt> feature now only works on Node.js 0.6.0           and higher, but now also works properly on Windows.        </li>        <li>          Lots of small bug fixes from           <b><a href=\"https://github.com/michaelficarra\">@michaelficarra</a></b>,          <b><a href=\"https://github.com/geraldalewis\">@geraldalewis</a></b>,          <b><a href=\"https://github.com/satyr\">@satyr</a></b>, and          <b><a href=\"https://github.com/trevorburnham\">@trevorburnham</a></b>.        </li>      </ul>    </p>    <p>      <b class=\"header\" style=\"margin-top: 20px;\">        <a href=\"https://github.com/jashkenas/coffee-script/compare/1.1.1...1.1.2\">1.1.2</a>        <span class=\"timestamp\"> &ndash; <small>August 4, 2011</small></span>      </b>      Fixes for block comment formatting, <tt>?=</tt> compilation, implicit calls      against control structures, implicit invocation of a try/catch block,      variadic arguments leaking from local scope, line numbers in syntax errors      following heregexes, property access on parenthesized number literals,      bound class methods and super with reserved names, a REPL overhaul,      consecutive compiled semicolons, block comments in implicitly called objects,      and a Chrome bug.    </p>    <p>      <b class=\"header\" style=\"margin-top: 20px;\">1.1.1        <span class=\"timestamp\"> &ndash; <small>May 10, 2011</small></span>      </b>      Bugfix release for classes with external constructor functions, see      issue #1182.    </p>    <p>      <b class=\"header\" style=\"margin-top: 20px;\">1.1.0        <span class=\"timestamp\"> &ndash; <small>May 1, 2011</small></span>      </b>      When running via the <tt>coffee</tt> executable, <tt>process.argv</tt> and      friends now report <tt>coffee</tt> instead of <tt>node</tt>.      Better compatibility with <b>Node.js 0.4.x</b> module lookup changes.      The output in the REPL is now colorized, like Node's is.      Giving your concatenated CoffeeScripts a name when using <tt>--join</tt> is now mandatory.      Fix for lexing compound division <tt>/=</tt> as a regex accidentally.      All <tt>text/coffeescript</tt> tags should now execute in the order they're included.      Fixed an issue with extended subclasses using external constructor functions.      Fixed an edge-case infinite loop in <tt>addImplicitParentheses</tt>.      Fixed exponential slowdown with long chains of function calls.      Globals no longer leak into the CoffeeScript REPL.      Splatted parameters are declared local to the function.    </p>    <p>      <b class=\"header\" style=\"margin-top: 20px;\">1.0.1        <span class=\"timestamp\"> &ndash; <small>Jan 31, 2011</small></span>      </b>      Fixed a lexer bug with Unicode identifiers. Updated REPL for compatibility      with Node.js 0.3.7. Fixed requiring relative paths in the REPL. Trailing      <tt>return</tt> and <tt>return undefined</tt> are now optimized away.      Stopped requiring the core Node.js <tt>\"util\"</tt> module for      back-compatibility with Node.js 0.2.5. Fixed a case where a      conditional <tt>return</tt> would cause fallthrough in a <tt>switch</tt>      statement. Optimized empty objects in destructuring assignment.    </p>    <p>      <b class=\"header\" style=\"margin-top: 20px;\">1.0.0        <span class=\"timestamp\"> &ndash; <small>Dec 24, 2010</small></span>      </b>      CoffeeScript loops no longer try to preserve block scope when functions      are being generated within the loop body. Instead, you can use the      <tt>do</tt> keyword to create a convenient closure wrapper.      Added a <tt>--nodejs</tt> flag for passing through options directly      to the <tt>node</tt> executable.      Better behavior around the use of pure statements within expressions.      Fixed inclusive slicing through <tt>-1</tt>, for all browsers, and splicing      with arbitrary expressions as endpoints.    </p>    <p>      <b class=\"header\" style=\"margin-top: 20px;\">0.9.6        <span class=\"timestamp\"> &ndash; <small>Dec 6, 2010</small></span>      </b>      The REPL now properly formats stacktraces, and stays alive through      asynchronous exceptions. Using <tt>--watch</tt> now prints timestamps as      files are compiled. Fixed some accidentally-leaking variables within      plucked closure-loops. Constructors now maintain their declaration      location within a class body. Dynamic object keys were removed.      Nested classes are now supported. Fixes execution context for naked      splatted functions. Bugfix for inversion of chained comparisons.      Chained class instantiation now works properly with splats.    </p>    <p>      <b class=\"header\" style=\"margin-top: 20px;\">0.9.5        <span class=\"timestamp\"> &ndash; <small>Nov 21, 2010</small></span>      </b>      0.9.5 should be considered the first release candidate for CoffeeScript 1.0.      There have been a large number of internal changes since the previous release,      many contributed from <b>satyr</b>'s <a href=\"http://github.com/satyr/coco\">Coco</a>      dialect of CoffeeScript. Heregexes (extended regexes) were added. Functions      can now have default arguments. Class bodies are now executable code.      Improved syntax errors for invalid CoffeeScript. <tt>undefined</tt> now      works like <tt>null</tt>, and cannot be assigned a new value.      There was a precedence change with respect to single-line comprehensions:      <tt>result = i for i in list</tt><br /> used to parse as <tt>result = (i for i in list)</tt>      by default ... it now parses as <br /><tt>(result = i) for i in list</tt>.    </p>    <p>      <b class=\"header\" style=\"margin-top: 20px;\">0.9.4        <span class=\"timestamp\"> &ndash; <small>Sep 21, 2010</small></span>      </b>      CoffeeScript now uses appropriately-named temporary variables, and recycles      their references after use. Added <tt>require.extensions</tt> support for      <b>Node.js 0.3</b>. Loading CoffeeScript in the browser now adds just a      single <tt>CoffeeScript</tt> object to global scope.      Fixes for implicit object and block comment edge cases.    </p>    <p>      <b class=\"header\" style=\"margin-top: 20px;\">0.9.3        <span class=\"timestamp\"> &ndash; <small>Sep 16, 2010</small></span>      </b>      CoffeeScript <tt>switch</tt> statements now compile into JS <tt>switch</tt>      statements &mdash; they previously compiled into <tt>if/else</tt> chains      for JavaScript 1.3 compatibility.      Soaking a function invocation is now supported. Users of the RubyMine      editor should now be able to use <tt>--watch</tt> mode.    </p>    <p>      <b class=\"header\" style=\"margin-top: 20px;\">0.9.2        <span class=\"timestamp\"> &ndash; <small>Aug 23, 2010</small></span>      </b>      Specifying the start and end of a range literal is now optional, eg. <tt>array[3..]</tt>.      You can now say <tt>a not instanceof b</tt>.      Fixed important bugs with nested significant and non-significant indentation (Issue #637).      Added a <tt>--require</tt> flag that allows you to hook into the <tt>coffee</tt> command.      Added a custom <tt>jsl.conf</tt> file for our preferred JavaScriptLint setup.      Sped up Jison grammar compilation time by flattening rules for operations.      Block comments can now be used with JavaScript-minifier-friendly syntax.      Added JavaScript's compound assignment bitwise operators. Bugfixes to      implicit object literals with leading number and string keys, as the subject      of implicit calls, and as part of compound assignment.    </p>    <p>      <b class=\"header\" style=\"margin-top: 20px;\">0.9.1        <span class=\"timestamp\"> &ndash; <small>Aug 11, 2010</small></span>      </b>      Bugfix release for <b>0.9.1</b>. Greatly improves the handling of mixed      implicit objects, implicit function calls, and implicit indentation.      String and regex interpolation is now strictly <tt>#{ ... }</tt> (Ruby style).      The compiler now takes a <tt>--require</tt> flag, which specifies scripts      to run before compilation.    </p>    <p>      <b class=\"header\" style=\"margin-top: 20px;\">0.9.0        <span class=\"timestamp\"> &ndash; <small>Aug 4, 2010</small></span>      </b>      The CoffeeScript <b>0.9</b> series is considered to be a release candidate      for <b>1.0</b>; let's give her a shakedown cruise. <b>0.9.0</b> introduces a massive      backwards-incompatible change: Assignment now uses <tt>=</tt>, and object      literals use <tt>:</tt>, as in JavaScript. This allows us to have implicit      object literals, and YAML-style object definitions. Half assignments are      removed, in favor of <tt>+=</tt>, <tt>or=</tt>, and friends.      Interpolation now uses a hash mark <tt>#</tt> instead of the dollar sign      <tt>$</tt> &mdash; because dollar signs may be part of a valid JS identifier.      Downwards range comprehensions are now safe again, and are optimized to      straight for loops when created with integer endpoints.      A fast, unguarded form of object comprehension was added:      <tt>for all key, value of object</tt>. Mentioning the <tt>super</tt> keyword      with no arguments now forwards all arguments passed to the function,      as in Ruby. If you extend class <tt>B</tt> from parent class <tt>A</tt>, if      <tt>A</tt> has an <tt>extended</tt> method defined, it will be called, passing in <tt>B</tt> &mdash;      this enables static inheritance, among other things. Cleaner output for      functions bound with the fat arrow. <tt>@variables</tt> can now be used      in parameter lists, with the parameter being automatically set as a property      on the object &mdash; useful in constructors and setter functions.      Constructor functions can now take splats.    </p>    <p>      <b class=\"header\" style=\"margin-top: 20px;\">0.7.2        <span class=\"timestamp\"> &ndash; <small>Jul 12, 2010</small></span>      </b>      Quick bugfix (right after 0.7.1) for a problem that prevented <tt>coffee</tt>      command-line options from being parsed in some circumstances.    </p>    <p>      <b class=\"header\" style=\"margin-top: 20px;\">0.7.1        <span class=\"timestamp\"> &ndash; <small>Jul 11, 2010</small></span>      </b>      Block-style comments are now passed through and printed as JavaScript block      comments -- making them useful for licenses and copyright headers. Better      support for running coffee scripts standalone via hashbangs.      Improved syntax errors for tokens that are not in the grammar.    </p>    <p>      <b class=\"header\" style=\"margin-top: 20px;\">0.7.0        <span class=\"timestamp\"> &ndash; <small>Jun 28, 2010</small></span>      </b>      Official CoffeeScript variable style is now camelCase, as in JavaScript.      Reserved words are now allowed as object keys, and will be quoted for you.      Range comprehensions now generate cleaner code, but you have to specify <tt>by -1</tt>      if you'd like to iterate downward. Reporting of syntax errors is greatly      improved from the previous release. Running <tt>coffee</tt> with no arguments      now launches the REPL, with Readline support. The <tt>&lt;-</tt> bind operator      has been removed from CoffeeScript. The <tt>loop</tt> keyword was added,      which is equivalent to a <tt>while true</tt> loop. Comprehensions that contain      closures will now close over their variables, like the semantics of a <tt>forEach</tt>.      You can now use bound function in class definitions (bound to the instance).      For consistency, <tt>a in b</tt> is now an array presence check, and <tt>a of b</tt>      is an object-key check. Comments are no longer passed through to the generated      JavaScript.    </p>    <p>      <b class=\"header\" style=\"margin-top: 20px;\">0.6.2        <span class=\"timestamp\"> &ndash; <small>May 15, 2010</small></span>      </b>      The <tt>coffee</tt> command will now preserve directory structure when      compiling a directory full of scripts. Fixed two omissions that were preventing      the CoffeeScript compiler from running live within Internet Explorer.      There's now a syntax for block comments, similar in spirit to CoffeeScript's heredocs.      ECMA Harmony DRY-style pattern matching is now supported, where the name      of the property is the same as the name of the value: <tt>{name, length}: func</tt>.      Pattern matching is now allowed within comprehension variables. <tt>unless</tt>      is now allowed in block form. <tt>until</tt> loops were added, as the inverse      of <tt>while</tt> loops. <tt>switch</tt> statements are now allowed without      switch object clauses. Compatible      with Node.js <b>v0.1.95</b>.    </p>    <p>      <b class=\"header\" style=\"margin-top: 20px;\">0.6.1        <span class=\"timestamp\"> &ndash; <small>Apr 12, 2010</small></span>      </b>      Upgraded CoffeeScript for compatibility with the new Node.js <b>v0.1.90</b>      series.    </p>    <p>      <b class=\"header\" style=\"margin-top: 20px;\">0.6.0        <span class=\"timestamp\"> &ndash; <small>Apr 3, 2010</small></span>      </b>      Trailing commas are now allowed, a-la Python. Static      properties may be assigned directly within class definitions,      using <tt>@property</tt> notation.    </p>    <p>      <b class=\"header\" style=\"margin-top: 20px;\">0.5.6        <span class=\"timestamp\"> &ndash; <small>Mar 23, 2010</small></span>      </b>      Interpolation can now be used within regular expressions and heredocs, as well as      strings. Added the <tt>&lt;-</tt> bind operator.      Allowing assignment to half-expressions instead of special <tt>||=</tt>-style      operators. The arguments object is no longer automatically converted into      an array. After requiring <tt>coffee-script</tt>, Node.js can now directly      load <tt>.coffee</tt> files, thanks to <b>registerExtension</b>. Multiple      splats can now be used in function calls, arrays, and pattern matching.    </p>    <p>      <b class=\"header\" style=\"margin-top: 20px;\">0.5.5        <span class=\"timestamp\"> &ndash; <small>Mar 8, 2010</small></span>      </b>      String interpolation, contributed by      <a href=\"http://github.com/StanAngeloff\">Stan Angeloff</a>.      Since <tt>--run</tt> has been the default since <b>0.5.3</b>, updating      <tt>--stdio</tt> and <tt>--eval</tt> to run by default, pass <tt>--compile</tt>      as well if you'd like to print the result.    </p>    <p>      <b class=\"header\" style=\"margin-top: 20px;\">0.5.4        <span class=\"timestamp\"> &ndash; <small>Mar 3, 2010</small></span>      </b>      Bugfix that corrects the Node.js global constants <tt>__filename</tt> and      <tt>__dirname</tt>. Tweaks for more flexible parsing of nested function      literals and improperly-indented comments. Updates for the latest Node.js API.    </p>    <p>      <b class=\"header\" style=\"margin-top: 20px;\">0.5.3        <span class=\"timestamp\"> &ndash; <small>Feb 27, 2010</small></span>      </b>      CoffeeScript now has a syntax for defining classes. Many of the core      components (Nodes, Lexer, Rewriter, Scope, Optparse) are using them.      Cakefiles can use <tt>optparse.coffee</tt> to define options for tasks.      <tt>--run</tt> is now the default flag for the <tt>coffee</tt> command,      use <tt>--compile</tt> to save JavaScripts. Bugfix for an ambiguity between      RegExp literals and chained divisions.    </p>    <p>      <b class=\"header\" style=\"margin-top: 20px;\">0.5.2        <span class=\"timestamp\"> &ndash; <small>Feb 25, 2010</small></span>      </b>      Added a compressed version of the compiler for inclusion in web pages as      <br  /><tt>extras/coffee-script.js</tt>. It'll automatically run any script tags      with type <tt>text/coffeescript</tt> for you. Added a <tt>--stdio</tt> option      to the <tt>coffee</tt> command, for piped-in compiles.    </p>    <p>      <b class=\"header\" style=\"margin-top: 20px;\">0.5.1        <span class=\"timestamp\"> &ndash; <small>Feb 24, 2010</small></span>      </b>      Improvements to null soaking with the existential operator, including      soaks on indexed properties. Added conditions to <tt>while</tt> loops,      so you can use them as filters with <tt>when</tt>, in the same manner as      comprehensions.    </p>    <p>      <b class=\"header\" style=\"margin-top: 20px;\">0.5.0        <span class=\"timestamp\"> &ndash; <small>Feb 21, 2010</small></span>      </b>      CoffeeScript 0.5.0 is a major release, While there are no language changes,      the Ruby compiler has been removed in favor of a self-hosting      compiler written in pure CoffeeScript.    </p>    <p>      <b class=\"header\" style=\"margin-top: 20px;\">0.3.2        <span class=\"timestamp\"> &ndash; <small>Feb 8, 2010</small></span>      </b>      <tt>@property</tt> is now a shorthand for <tt>this.property</tt>.<br />      Switched the default JavaScript engine from Narwhal to Node.js. Pass      the <tt>--narwhal</tt> flag if you'd like to continue using it.    </p>    <p>      <b class=\"header\" style=\"margin-top: 20px;\">0.3.0        <span class=\"timestamp\"> &ndash; <small>Jan 26, 2010</small></span>      </b>      CoffeeScript 0.3 includes major syntax changes:      <br />      The function symbol was changed to      <tt>-></tt>, and the bound function symbol is now <tt>=></tt>.      <br />      Parameter lists in function definitions must now be wrapped in parentheses.      <br />      Added property soaking, with the <tt>?.</tt> operator.      <br />      Made parentheses optional, when invoking functions with arguments.      <br />      Removed the obsolete block literal syntax.    </p>    <p>      <b class=\"header\" style=\"margin-top: 20px;\">0.2.6        <span class=\"timestamp\"> &ndash; <small>Jan 17, 2010</small></span>      </b>      Added Python-style chained comparisons, the conditional existence      operator <tt>?=</tt>, and some examples from <i>Beautiful Code</i>.      Bugfixes relating to statement-to-expression conversion, arguments-to-array      conversion, and the TextMate syntax highlighter.    </p>    <p>      <b class=\"header\" style=\"margin-top: 20px;\">0.2.5        <span class=\"timestamp\"> &ndash; <small>Jan 13, 2010</small></span>      </b>      The conditions in switch statements can now take multiple values at once &mdash;      If any of them are true, the case will run. Added the long arrow <tt>==></tt>,      which defines and immediately binds a function to <tt>this</tt>. While loops can      now be used as expressions, in the same way that comprehensions can. Splats      can be used within pattern matches to soak up the rest of an array.    </p>    <p>      <b class=\"header\" style=\"margin-top: 20px;\">0.2.4        <span class=\"timestamp\"> &ndash; <small>Jan 12, 2010</small></span>      </b>      Added ECMAScript Harmony style destructuring assignment, for dealing with      extracting values from nested arrays and objects. Added indentation-sensitive      heredocs for nicely formatted strings or chunks of code.    </p>    <p>      <b class=\"header\" style=\"margin-top: 20px;\">0.2.3        <span class=\"timestamp\"> &ndash; <small>Jan 11, 2010</small></span>      </b>      Axed the unsatisfactory <tt>ino</tt> keyword, replacing it with <tt>of</tt> for      object comprehensions. They now look like: <tt>for prop, value of object</tt>.    </p>    <p>      <b class=\"header\" style=\"margin-top: 20px;\">0.2.2        <span class=\"timestamp\"> &ndash; <small>Jan 10, 2010</small></span>      </b>      When performing a comprehension over an object, use <tt>ino</tt>, instead      of <tt>in</tt>, which helps us generate smaller, more efficient code at      compile time.      <br />      Added <tt>::</tt> as a shorthand for saying <tt>.prototype.</tt>      <br />      The \"splat\" symbol has been changed from a prefix asterisk <tt>*</tt>, to      a postfix ellipsis <tt>...</tt>      <br />      Added JavaScript's <tt>in</tt> operator,      empty <tt>return</tt> statements, and empty <tt>while</tt> loops.      <br />      Constructor functions that start with capital letters now include a      safety check to make sure that the new instance of the object is returned.      <br />      The <tt>extends</tt> keyword now functions identically to <tt>goog.inherits</tt>      in Google's Closure Library.    </p>    <p>      <b class=\"header\" style=\"margin-top: 20px;\">0.2.1        <span class=\"timestamp\"> &ndash; <small>Jan 5, 2010</small></span>      </b>      Arguments objects are now converted into real arrays when referenced.    </p>    <p>      <b class=\"header\" style=\"margin-top: 20px;\">0.2.0        <span class=\"timestamp\"> &ndash; <small>Jan 5, 2010</small></span>      </b>      Major release. Significant whitespace. Better statement-to-expression      conversion. Splats. Splice literals. Object comprehensions. Blocks.      The existential operator. Many thanks to all the folks who posted issues,      with special thanks to      <a href=\"http://github.com/liamoc\">Liam O'Connor-Davis</a> for whitespace      and expression help.    </p>    <p>      <b class=\"header\" style=\"margin-top: 20px;\">0.1.6        <span class=\"timestamp\"> &ndash; <small>Dec 27, 2009</small></span>      </b>      Bugfix for running <tt>coffee --interactive</tt> and <tt>--run</tt>      from outside of the CoffeeScript directory. Bugfix for nested      function/if-statements.    </p>    <p>      <b class=\"header\" style=\"margin-top: 20px;\">0.1.5        <span class=\"timestamp\"> &ndash; <small>Dec 26, 2009</small></span>      </b>      Array slice literals and array comprehensions can now both take Ruby-style      ranges to specify the start and end. JavaScript variable declaration is      now pushed up to the top of the scope, making all assignment statements into      expressions. You can use <tt>\\</tt> to escape newlines.      The <tt>coffee-script</tt> command is now called <tt>coffee</tt>.    </p>    <p>      <b class=\"header\" style=\"margin-top: 20px;\">0.1.4        <span class=\"timestamp\"> &ndash; <small>Dec 25, 2009</small></span>      </b>      The official CoffeeScript extension is now <tt>.coffee</tt> instead of      <tt>.cs</tt>, which properly belongs to      <a href=\"http://en.wikipedia.org/wiki/C_Sharp_(programming_language)\">C#</a>.      Due to popular demand, you can now also use <tt>=</tt> to assign. Unlike      JavaScript, <tt>=</tt> can also be used within object literals, interchangeably      with <tt>:</tt>. Made a grammatical fix for chained function calls      like <tt>func(1)(2)(3)(4)</tt>. Inheritance and super no longer use      <tt>__proto__</tt>, so they should be IE-compatible now.    </p>    <p>      <b class=\"header\" style=\"margin-top: 20px;\">0.1.3        <span class=\"timestamp\"> &ndash; <small>Dec 25, 2009</small></span>      </b>      The <tt>coffee</tt> command now includes <tt>--interactive</tt>,      which launches an interactive CoffeeScript session, and <tt>--run</tt>,      which directly compiles and executes a script. Both options depend on a      working installation of Narwhal.      The <tt>aint</tt> keyword has been replaced by <tt>isnt</tt>, which goes      together a little smoother with <tt>is</tt>.      Quoted strings are now allowed as identifiers within object literals: eg.      <tt>{\"5+5\": 10}</tt>.      All assignment operators now use a colon: <tt>+:</tt>, <tt>-:</tt>,      <tt>*:</tt>, etc.    </p>    <p>      <b class=\"header\" style=\"margin-top: 20px;\">0.1.2        <span class=\"timestamp\"> &ndash; <small>Dec 24, 2009</small></span>      </b>      Fixed a bug with calling <tt>super()</tt> through more than one level of      inheritance, with the re-addition of the <tt>extends</tt> keyword.      Added experimental <a href=\"http://narwhaljs.org/\">Narwhal</a>      support (as a Tusk package), contributed by      <a href=\"http://tlrobinson.net/\">Tom Robinson</a>, including      <b>bin/cs</b> as a CoffeeScript REPL and interpreter.      New <tt>--no-wrap</tt> option to suppress the safety function      wrapper.    </p>    <p>      <b class=\"header\" style=\"margin-top: 20px;\">0.1.1        <span class=\"timestamp\"> &ndash; <small>Dec 24, 2009</small></span>      </b>      Added <tt>instanceof</tt> and <tt>typeof</tt> as operators.    </p>    <p>      <b class=\"header\" style=\"margin-top: 20px;\">0.1.0        <span class=\"timestamp\"> &ndash; <small>Dec 24, 2009</small></span>      </b>      Initial CoffeeScript release.    </p>  </div>  <script type=\"text/coffeescript\">    sourceFragment = \"try:\"    # Set up the compilation function, to run when you stop typing.    compileSource = ->      source = $('#repl_source').val()      window.compiledJS = ''      try        window.compiledJS = CoffeeScript.compile source, bare: on        el = $('#repl_results')[0]        if el.innerText          el.innerText = window.compiledJS        else          $(el).text window.compiledJS        $('#error').hide()      catch error        $('#error').text(error.message).show()      # Update permalink      $('#repl_permalink').attr 'href', \"##{sourceFragment}#{encodeURIComponent source}\"    # Listen for keypresses and recompile.    $('#repl_source').keyup -> compileSource()    # Eval the compiled js.    evalJS = ->      try        eval window.compiledJS      catch error then alert error    # Load the console with a string of CoffeeScript.    window.loadConsole = (coffee) ->      $('#repl_source').val coffee      compileSource()      $('.navigation.try').addClass('active')      false    # Helper to hide the menus.    closeMenus = ->      $('.navigation.active').removeClass 'active'    $('.minibutton.run').click -> evalJS()    window.showAcsTab = ->       closeMenus()      await setTimeout defer(), 10      $('.navigation.iced').addClass 'active'    # Bind navigation buttons to open the menus.    $('.navigation').click (e) ->      return if e.target.tagName.toLowerCase() is 'a'      return false if $(e.target).closest('.repl_wrapper').length      if $(this).hasClass('active')        closeMenus()      else        closeMenus()        $(this).addClass 'active'      false    # Dismiss console if Escape pressed or click falls outside console    # Trigger Run button on Ctrl-Enter    $(document.body)      .keydown (e) ->        closeMenus() if e.which == 27        evalJS() if e.which == 13 and (e.metaKey or e.ctrlKey) and $('.minibutton.run:visible').length      .click (e) ->        return false if $(e.target).hasClass('minibutton')        closeMenus()    $('#open_webchat').click ->      $(this).replaceWith $('<iframe src=\"http://webchat.freenode.net/?channels=coffeescript\" width=\"625\" height=\"400\"></iframe>')    $(\"#repl_permalink\").click (e) ->        window.location = $(this).attr(\"href\")        false    # If source code is included in location.hash, display it.    hash = decodeURIComponent location.hash.replace(/^#/, '')    if hash.indexOf(sourceFragment) == 0        src = hash.substr sourceFragment.length        loadConsole src    compileSource()    window.slowAlert = (w,s,cb) ->      await setTimeout defer(), w      alert s      cb()    window.add = (a,b,cb) ->      await setTimeout defer(), 10      cb(a+b)  </script>  <script src=\"documentation/vendor/jquery-1.6.4.js\"></script>  <script src=\"extras/iced-coffee-script-1.8.0-a.js\"></script></body></html>",
  "embeddings": []
}
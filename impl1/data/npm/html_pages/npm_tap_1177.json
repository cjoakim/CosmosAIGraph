{
  "libtype": "npm",
  "libname": "tap",
  "url": "http://www.node-tap.org/",
  "html": "<!doctype html><html><head>    <meta charset=\"utf-8\">    <link href=\"/pagefind/pagefind-ui.css\" rel=\"stylesheet\">    <link rel=\"stylesheet\" href=\"/static/opensans/style.css\">    <link rel=\"stylesheet\" href=\"/static/Fira_Code_v6/fira_code.css\">    <link rel=\"stylesheet\" href=\"/static/prismjs-tomorrow.css\">    <link rel=\"stylesheet\" href=\"/static/index.css\">    <link rel=\"stylesheet\" href=\"/static/tap-format.css\">    <link rel=\"icon\" href=\"/static/favicon.ico\" type=\"image/x-icon\">    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">    <title>node-tap</title>    <meta name=\"description\" content=\"A Test-Anything-Protocol library for JavaScript\">  </head>  <body class=\"index\">    <div id=\"top\">  <div id=\"top-inner\">    <h1><a href=\"/\"><span>Node TAP</span> <small><span>18.7.0</span></small></a></h1>    <div id=\"site-nav\">      <nav>                <ul>          <li>            <a href=\"/cli/\">CLI</a>          </li>          <li>            <a href=\"/basics/\">Docs</a>          </li>          <li>            <a href=\"/upgrading-from-16/\">Upgrading</a>          </li>          <li>            <a href=\"/changelog/\">Changelog</a>          </li>          <li>            <a href=\"https://tapjs.github.io/tapjs\">TypeDocs</a>          </li>          <li>            <a href=\"https://github.com/tapjs/tapjs\">GitHub</a>          </li>          <li>            <a href=\"https://matrix.to/#/#tapjs:matrix.org\">Chat</a>          </li>          <li>            <a href=\"https://github.com/sponsors/tapjs\">\u2764\ufe0f Sponsor</a>          </li>        </ul>      </nav>    </div>  </div>  <div id=\"search\" class=\"search\"></div>  <script src=\"/pagefind/pagefind-ui.js\" onload=\"    new PagefindUI({ element: '#search', showImages: false })  \"></script>  <script>    {      const search = document.getElementById('search')      // make the whole search result clickable      // could probably hack the search results template to do this      // without JS, but this works.      search.addEventListener('click', e => {        let p = e.target        if (p.tagName === 'A') return true        while (p && p !== search && p.tagName !== 'LI')          p = p.parentElement        if (p?.tagName === 'LI') {          const a = p.getElementsByTagName('A')[0]          if (a && a.href) location.href = a.href        }      })    }  </script></div>    <main>      <section class=\"hero__Container\">  <div class=\"hero__Content\">    <div class=\"hero__Circles\">      <div class=\"hero__OuterCircle\">        <div class=\"hero__InnerCircle\"></div>      </div>    </div>    <div class=\"hero__InnerBits\">      <img src=\"/static/big-logo.gif\" alt=\"tap logo\" class=\"hero__Logo\">      <h1 class=\"hero__Title\">        A Test-Anything-Protocol library for JavaScript      </h1>      <a class=\"button-link\" href=\"/basics\">Get Started</a>    </div>  </div></section><section class=\"features\">  <div class=\"features__Content\">    <h2>Node-Tap Features</h2>    <div class=\"features__Columns\">      <section class=\"no-fancy-dsl\">        <img src=\"/static/brain.gif\" alt=\"brain\">        <div><h3 id=\"no-fancy-dsl-to-learn\" tabindex=\"-1\">No Fancy DSL to Learn</h3><p>The API is simple, but powerful. <code>t.test()</code> and a few<a href=\"/plugins/asserts/\">assertions</a> are all you really need.Everything is statically typed, so your editor can tellyou what's available. Remember less, just write some tests.</p><p>(And there is actualy a <a href=\"/plugins/mocha-globals\">fancy DSL</a>, ifyou're into that.)</p></div>      </section>      <section class=\"batteries-included\">        <img src=\"/static/batteries.gif\" alt=\"batteries\">        <div>          <h3 id=\"batteries-included\" tabindex=\"-1\">Batteries Included</h3><p>An easily extensible <a href=\"/tap-format\"><abbr title=\"Test AnythingProtocol\">TAP</abbr></a> test framework, withoutstanding <a href=\"/plugins/typescript/\">TypeScript</a> support, a<a href=\"/cli/\">CLI</a>, <a href=\"/plugins/asserts/\">plenty of assertionmethods</a>,<a href=\"/plugins/snapshot/\">snapshots</a>, <a href=\"/plugins/intercept/\">object/methodspies</a>, <a href=\"/plugins/mock/\">modulemocking</a>, <a href=\"/plugins/fixture/\">file systemfixtures</a>, <a href=\"/plugins/lifecycle/\">lifecyclehooks</a>, <a href=\"/plugins/filter/\">testfiltering</a>, comprehensive <a href=\"/coverage/\">code coverageanalysis</a>, color-accessible <a href=\"/reporter/\">testreporters</a>, and <a href=\"/plugins/\">more</a>!</p>        </div>      </section>    </div>    <a class=\"button-link\" href=\"/basics\">Get Started</a>  </div></section><section class=\"why-tap\">  <div class=\"why-tap__Content\">    <div class=\"EncircledImage__GreyCircle\">      <div class=\"EncircledImage__WhiteCircle\">        <img src=\"/static/question-mark.gif\" alt=\"(?)\">      </div>    </div>    <h2 id=\"why-tap%3F\" tabindex=\"-1\">Why TAP?</h2><p>Why should you use this thing!? <strong>LET ME TELL YOU!</strong></p><p>Just kidding.</p><p>Most frameworks spend a lot of their documentation telling youwhy they're the greatest. This isn't that. It's good, but it isopinionated.</p><h3 id=\"tutti-i-gusti-sono-gusti\" tabindex=\"-1\"><i lang=\"it\" title=\"all tastes are tastes\">tutti i gusti sono gusti</i></h3><p>Software testing is a software and user experience designchallenge that balances on the intersection of many conflictingdemands.</p><p>Node-tap is based on <a href=\"http://izs.me\">my</a> opinions about how atest framework should work, and what it should let you do. I do<em>not</em> have any opinion about whether or not you share thoseopinions. If you do share them, you will probably enjoy this testlibrary.</p><p>Here are the design principles that shape this test framework.</p><h3 id=\"test-files-are-%22normal%22-programs\" tabindex=\"-1\">Test files are \"normal\" programs</h3><p>Any TAP test can be run directly as a plain old JavaScriptprogram. Of course, if it's written in TypeScript, you'llhave to run it with a TypeScript loader, but otherwise, theyshould be just like normal programs that run in a normalenvironment.</p><p>The <a href=\"/cli\">runner</a> is a good way to run tests, but it's optional.Tests don't execute in a special simulated memory space withinjected globals, and so on. Because each test runs in its ownprocess, there's no chance of tests becoming dependent on oneanother's leaked globals or causing other confusing situations.</p><h3 id=\"tests-should-fun-and-helpful\" tabindex=\"-1\">Tests should fun and helpful</h3><p>The goal of tests is to help you write code. They add reliabilityto your program by adding a layer of \"yes, this does what I thinkit does\". Whether you're doing strict Red-Green-Refactor styleTDD, or just finger-painting until it feels right and thenwriting tests to verify what you did, writing the tests shouldfeel empowering and straightforward, <em>reducing</em> cognitive loadrather than increasing it.</p><p>Software tests should be a security blanket and a qualityratchet, giving you the support to undertake massive refactoringand fix bugs without worrying. It shouldn't be a purificationrite or a hazing ritual. It should be fun, because making stuffis fun, and it helps you make better stuff.</p><h3 id=\"type-information-must-be-accurate-and-complete\" tabindex=\"-1\">Type information must be accurate and complete</h3><p>This is simply not reasonable to do with a hand-edited typedefinitions in <code>.d.ts</code> files.</p><p>TAP's exported types are built up from its set of plugins andinternal classes, assembled into the <a href=\"/api\"><code>Test</code> class</a> thatyour test programs interact with. When a plugin is added orremoved, the <code>t</code> in your editor can accurately tell you its newshape.</p><p>If you have to look at the docs too often, that's a bug. Leaninto the beautiful power of code completion.</p><h3 id=\"typescript%2C-esm%2C-and-commonjs-supported-out-of-the-box\" tabindex=\"-1\">TypeScript, ESM, and CommonJS supported out of the box</h3><p>Your tests should be written just like your program, with as fewbarriers as possible. If you can do it in CommonJS, you can do itin ESM, and vice versa (at least as far as TAP is concerned).Whatever is in your <code>tsconfig.json</code> or <code>package.json</code>, it shouldJust Work.</p><h3 id=\"anything-that-can-be-a-plugin-is-a-plugin\" tabindex=\"-1\">Anything that <em>can</em> be a plugin <em>is</em> a plugin</h3><p>The plugin system is leveraged for anything that does notabsolutely need to be included in the core.</p><p>Basic <a href=\"/tap-format\">TAP</a> generation and flow control, errorhandling, config loading, and process management are all includedin the core. But <a href=\"/plugins/typescript\">TypeScript support</a>,<a href=\"/plugins/mock\">mocking</a>, almost all <a href=\"/plugins/asserts\">assertionmethods</a>, <a href=\"/plugins/intercept\">method and propertyspying</a>,<a href=\"/plugins/spawn\">spawning</a>/<a href=\"/plugins/worker\">forking</a> subtests,creating <a href=\"/plugins/fixture\">fixtures</a>,<a href=\"/plugins/snapshot\">snapshots</a>, and attaching <a href=\"/plugins/lifecycle\">lifecyclemethods</a> (among others) are all relegated toplugins.</p><p>This means that features can be switched on or off or extendedvery easily.</p><h3 id=\"plugins-must-be-powerful-and-trivial-to-write-correctly\" tabindex=\"-1\">Plugins must be powerful and trivial to write correctly</h3><p>The <a href=\"/plugins\">plugin interface</a> is extremely simple. Export a<code>plugin</code> function that returns an object. That's it, that's aplugin.</p><p>Plugins <em>can</em> also export configuration definitions, which arefolded into the set of fields that TAP knows how to parse fromthe command line or from your <code>.taprc</code> file, or export a <code>loader</code>string, which will be invoked when spawning test processes,making them an extremely powerful way to make your test frameworkwork for you.</p><h3 id=\"high-signal%2C-low-noise\" tabindex=\"-1\">High Signal, Low Noise</h3><p>It is important to give a lot of information about test failures,throws, and so on, so that you can easily jump straight to theappropriate place in the code to fix the problem. And, it'susually helpful to see which tests are actually running.</p><p>However, a screen full of green checkmarks and <code>100% Covered!</code>isn't very useful. It should be just enough to know what happenedand easily diagnose any problems, and otherwise fairly quiet.</p><p>TAP tries to show you exactly what you need to see, and nothingelse. Low information output has been trimmed down as much as possible.Coverage information is only shown when it has something relevantto say. Stack traces have noisy internals trimmed out, so it'seasier to see exactly where in <em>your</em> code the problem happened.Source maps are always enabled, because you need to know wherethe actual code is, not just which built artifact failed.</p><p>And if the default reporter isn't terse enough for your liking,try <code>tap -Rterse</code>.</p><h3 id=\"assertions-don't-throw-(but-throws-are-handled-nicely)\" tabindex=\"-1\">Assertions don't throw (but throws are handled nicely)</h3><p>I frequently write programs that have many hundreds of assertionsbased on some list of test cases. If the first failure throws,then I don't know if I've failed 100 tests or 1, without wrappingeverything in a try-catch.</p><p>Basically, it should be your decision whether you want to throwor not. The test framework shouldn't force that on you, andshould make either case easy.</p><h3 id=\"test-reporting-should-be-useful%2C-extensible%2C-and-accessible\" tabindex=\"-1\">Test reporting should be useful, extensible, and accessible</h3><p>The <a href=\"/tap-format/\">raw test output</a> is machine-parseable andhuman-intelligible, and the reporter consumes that test outputto turn it into a <a href=\"/reporter/\">pretty summarized report</a>. Thismeans that test data can be stored and parsed later, dug into foradditional details, and so on.</p><p>Red and green are the conventional colors meaning \"removed\" and\"added\", but they're also exactly the same color for many people.All of the color choices in the reporter are tested rigorouslyagainst simulators for protanopia, deuteranopia, tritanopia, andmonochromicity.</p><h3 id=\"test-coverage-is-always-on\" tabindex=\"-1\">Test coverage is always on</h3><p>Running tests with coverage changes the way that you think aboutyour programs, and provides much deeper insight. TAP uses V8'sinternal coverage mechanisms directly, and verifies that testsprovide 100% coverage of all lines, branches, functions, andstatements in the system under test. It uses<a href=\"https://npmjs.com/c8\">C8</a> to analyze the V8 coverage data andgenerate coverage reports.</p><p>Missing coverage means that you are relying on untested code, sothis is treated as a test failure. If you have some bit of codewhich is actually <em>impossible</em> to test for some reason, wrap itin the appropriate <code>/* c8 ignore start */</code> / <code>/* c8 ignore end */</code> comments to exclude those lines from the analysis. But thinkcarefully about whether that's really the case. Usually, if youhave to coverage-ignore something, it's a sign that you need toeither delete that code or refactor it into a more easily testedmodule.</p><hr><p>There are many opinions left off of this list! Reasonable peoplecan disagree. But if you find yourself nodding along, <a href=\"/basics/\">maybe tapis for you</a>.</p>  </div></section><footer><p>Node-tap is created and maintained by <a href=\"https://izs.me\">Isaac Z. Schlueter</a>.</p><p>Website design by <a href=\"https://tanyabrassie.com\">Tanya Brassie</a>.</p></footer>    </main>  </body></html>",
  "embeddings": []
}
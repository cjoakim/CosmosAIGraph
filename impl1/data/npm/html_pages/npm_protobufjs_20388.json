{
  "libtype": "npm",
  "libname": "protobufjs",
  "url": "https://protobufjs.github.io/protobuf.js/",
  "html": "<!DOCTYPE html><html><head>    <meta charset=\"utf-8\">    <title>Index</title>            <script src=\"scripts/prettify/prettify.js\"></script>    <script src=\"scripts/prettify/lang-css.js\"></script>    <script src=\"scripts/jquery.min.js\"></script>    <!--[if lt IE 9]>      <script src=\"//html5shiv.googlecode.com/svn/trunk/html5.js\"></script>    <![endif]-->    <link type=\"text/css\" rel=\"stylesheet\" href=\"styles/prettify-tomorrow.css\">    <link type=\"text/css\" rel=\"stylesheet\" href=\"styles/bootstrap.min.css\">    <link type=\"text/css\" rel=\"stylesheet\" href=\"styles/jaguar.css\">            <script>    var config = {\"monospaceLinks\":false,\"cleverLinks\":false,\"default\":{\"outputSourceFiles\":false},\"applicationName\":\"protobuf.js\",\"googleAnalytics\":\"UA-40277577-3\",\"linenums\":true};    </script>            <script type=\"text/javascript\">      var _gaq = _gaq || [];      _gaq.push(['_setAccount', config.googleAnalytics]);      _gaq.push(['_trackPageview']);          (function() {        var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;        ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';        var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);      })();    </script>    </head><body><div id=\"wrap\" class=\"clearfix\">    <div class=\"navigation\">    <h3 class=\"applicationName\"><a href=\"index.html\">protobuf.js</a></h3>    <p class=\"applicationSubtitle\">API documentation</p>    <div class=\"search\">        <input id=\"search\" type=\"text\" class=\"form-control input-sm\" placeholder=\"Search ...\">    </div>    <ul class=\"list\">        <li class=\"item\" data-name=\"global\">            <span class=\"title\">                <a href=\"global.html\">[ top level ]</a>                <span class=\"static\">static</span>            </span>        </li>            <li class=\"item\" data-name=\"converter\">            <span class=\"title\">                <a href=\"converter.html\">converter</a>                                <span class=\"static\">static</span>                            </span>            <ul class=\"members itemMembers\">                        </ul>            <ul class=\"typedefs itemMembers\">                        </ul>            <ul class=\"methods itemMembers\">                        <span class=\"subtitle\">Methods</span>                            <li data-name=\"converter.fromObject\"><a href=\"converter.html#.fromObject\">fromObject</a></li>                            <li data-name=\"converter.toObject\"><a href=\"converter.html#.toObject\">toObject</a></li>                        </ul>            <ul class=\"events itemMembers\">                        </ul>        </li>            <li class=\"item\" data-name=\"rpc\">            <span class=\"title\">                <a href=\"rpc.html\">rpc</a>                                <span class=\"static\">static</span>                            </span>            <ul class=\"members itemMembers\">                        </ul>            <ul class=\"typedefs itemMembers\">                        <span class=\"subtitle\">Typedefs</span>                            <li data-name=\"rpc.ServiceMethod\"><a href=\"rpc.html#.ServiceMethod\">ServiceMethod</a></li>                            <li data-name=\"rpc.ServiceMethodCallback\"><a href=\"rpc.html#.ServiceMethodCallback\">ServiceMethodCallback</a></li>                        </ul>            <ul class=\"methods itemMembers\">                        </ul>            <ul class=\"events itemMembers\">                        </ul>        </li>            <li class=\"item\" data-name=\"types\">            <span class=\"title\">                <a href=\"types.html\">types</a>                                <span class=\"static\">static</span>                            </span>            <ul class=\"members itemMembers\">                        <span class=\"subtitle\">Members</span>                            <li data-name=\"types.basic\"><a href=\"types.html#.basic\">basic</a></li>                            <li data-name=\"types.defaults\"><a href=\"types.html#.defaults\">defaults</a></li>                            <li data-name=\"types.long\"><a href=\"types.html#.long\">long</a></li>                            <li data-name=\"types.mapKey\"><a href=\"types.html#.mapKey\">mapKey</a></li>                            <li data-name=\"types.packed\"><a href=\"types.html#.packed\">packed</a></li>                        </ul>            <ul class=\"typedefs itemMembers\">                        </ul>            <ul class=\"methods itemMembers\">                        </ul>            <ul class=\"events itemMembers\">                        </ul>        </li>            <li class=\"item\" data-name=\"util\">            <span class=\"title\">                <a href=\"util.html\">util</a>                                <span class=\"static\">static</span>                            </span>            <ul class=\"members itemMembers\">                        <span class=\"subtitle\">Members</span>                            <li data-name=\"util.Array\"><a href=\"util.html#.Array\">Array</a></li>                            <li data-name=\"util.Buffer\"><a href=\"util.html#.Buffer\">Buffer</a></li>                            <li data-name=\"util.decorateRoot\"><a href=\"util.html#.decorateRoot\">decorateRoot</a></li>                            <li data-name=\"util.emptyArray\"><a href=\"util.html#.emptyArray\">emptyArray</a></li>                            <li data-name=\"util.emptyObject\"><a href=\"util.html#.emptyObject\">emptyObject</a></li>                            <li data-name=\"util.fs\"><a href=\"util.html#.fs\">fs</a></li>                            <li data-name=\"util.isNode\"><a href=\"util.html#.isNode\">isNode</a></li>                            <li data-name=\"util.key2Re\"><a href=\"util.html#.key2Re\">key2Re</a></li>                            <li data-name=\"util.key32Re\"><a href=\"util.html#.key32Re\">key32Re</a></li>                            <li data-name=\"util.key64Re\"><a href=\"util.html#.key64Re\">key64Re</a></li>                            <li data-name=\"util.Long\"><a href=\"util.html#.Long\">Long</a></li>                            <li data-name=\"util.toJSONOptions\"><a href=\"util.html#.toJSONOptions\">toJSONOptions</a></li>                        </ul>            <ul class=\"typedefs itemMembers\">                        </ul>            <ul class=\"methods itemMembers\">                        <span class=\"subtitle\">Methods</span>                            <li data-name=\"util.asPromise\"><a href=\"util.html#.asPromise\">asPromise</a></li>                            <li data-name=\"util.camelCase\"><a href=\"util.html#.camelCase\">camelCase</a></li>                            <li data-name=\"util.codegen\"><a href=\"util.html#.codegen\">codegen</a></li>                            <li data-name=\"util.codegen(2)\"><a href=\"util.html#.codegen2\">codegen</a></li>                            <li data-name=\"util.compareFieldsById\"><a href=\"util.html#.compareFieldsById\">compareFieldsById</a></li>                            <li data-name=\"util.decorateEnum\"><a href=\"util.html#.decorateEnum\">decorateEnum</a></li>                            <li data-name=\"util.decorateType\"><a href=\"util.html#.decorateType\">decorateType</a></li>                            <li data-name=\"util.fetch\"><a href=\"util.html#.fetch\">fetch</a></li>                            <li data-name=\"util.fetch(2)\"><a href=\"util.html#.fetch2\">fetch</a></li>                            <li data-name=\"util.fetch(3)\"><a href=\"util.html#.fetch3\">fetch</a></li>                            <li data-name=\"util.inquire\"><a href=\"util.html#.inquire\">inquire</a></li>                            <li data-name=\"util.isInteger\"><a href=\"util.html#.isInteger\">isInteger</a></li>                            <li data-name=\"util.isObject\"><a href=\"util.html#.isObject\">isObject</a></li>                            <li data-name=\"util.isReserved\"><a href=\"util.html#.isReserved\">isReserved</a></li>                            <li data-name=\"util.isset\"><a href=\"util.html#.isset\">isset</a></li>                            <li data-name=\"util.isSet\"><a href=\"util.html#.isSet\">isSet</a></li>                            <li data-name=\"util.isString\"><a href=\"util.html#.isString\">isString</a></li>                            <li data-name=\"util.lcFirst\"><a href=\"util.html#.lcFirst\">lcFirst</a></li>                            <li data-name=\"util.longFromHash\"><a href=\"util.html#.longFromHash\">longFromHash</a></li>                            <li data-name=\"util.longToHash\"><a href=\"util.html#.longToHash\">longToHash</a></li>                            <li data-name=\"util.merge\"><a href=\"util.html#.merge\">merge</a></li>                            <li data-name=\"util.newBuffer\"><a href=\"util.html#.newBuffer\">newBuffer</a></li>                            <li data-name=\"util.newError\"><a href=\"util.html#.newError\">newError</a></li>                            <li data-name=\"util.oneOfGetter\"><a href=\"util.html#.oneOfGetter\">oneOfGetter</a></li>                            <li data-name=\"util.oneOfSetter\"><a href=\"util.html#.oneOfSetter\">oneOfSetter</a></li>                            <li data-name=\"util.pool\"><a href=\"util.html#.pool\">pool</a></li>                            <li data-name=\"util.safeProp\"><a href=\"util.html#.safeProp\">safeProp</a></li>                            <li data-name=\"util.toArray\"><a href=\"util.html#.toArray\">toArray</a></li>                            <li data-name=\"util.toObject\"><a href=\"util.html#.toObject\">toObject</a></li>                            <li data-name=\"util.ucFirst\"><a href=\"util.html#.ucFirst\">ucFirst</a></li>                        </ul>            <ul class=\"events itemMembers\">                        </ul>        </li>            <li class=\"item\" data-name=\"util.base64\">            <span class=\"title\">                <a href=\"util.base64.html\">util.base64</a>                                <span class=\"static\">static</span>                            </span>            <ul class=\"members itemMembers\">                        </ul>            <ul class=\"typedefs itemMembers\">                        </ul>            <ul class=\"methods itemMembers\">                        <span class=\"subtitle\">Methods</span>                            <li data-name=\"util.base64.decode\"><a href=\"util.base64.html#.decode\">decode</a></li>                            <li data-name=\"util.base64.encode\"><a href=\"util.base64.html#.encode\">encode</a></li>                            <li data-name=\"util.base64.length\"><a href=\"util.base64.html#.length\">length</a></li>                            <li data-name=\"util.base64.test\"><a href=\"util.base64.html#.test\">test</a></li>                        </ul>            <ul class=\"events itemMembers\">                        </ul>        </li>            <li class=\"item\" data-name=\"util.path\">            <span class=\"title\">                <a href=\"util.path.html\">util.path</a>                                <span class=\"static\">static</span>                            </span>            <ul class=\"members itemMembers\">                        </ul>            <ul class=\"typedefs itemMembers\">                        </ul>            <ul class=\"methods itemMembers\">                        <span class=\"subtitle\">Methods</span>                            <li data-name=\"util.path.isAbsolute\"><a href=\"util.path.html#.isAbsolute\">isAbsolute</a></li>                            <li data-name=\"util.path.normalize\"><a href=\"util.path.html#.normalize\">normalize</a></li>                            <li data-name=\"util.path.resolve\"><a href=\"util.path.html#.resolve\">resolve</a></li>                        </ul>            <ul class=\"events itemMembers\">                        </ul>        </li>            <li class=\"item\" data-name=\"util.utf8\">            <span class=\"title\">                <a href=\"util.utf8.html\">util.utf8</a>                                <span class=\"static\">static</span>                            </span>            <ul class=\"members itemMembers\">                        </ul>            <ul class=\"typedefs itemMembers\">                        </ul>            <ul class=\"methods itemMembers\">                        <span class=\"subtitle\">Methods</span>                            <li data-name=\"util.utf8.length\"><a href=\"util.utf8.html#.length\">length</a></li>                            <li data-name=\"util.utf8.read\"><a href=\"util.utf8.html#.read\">read</a></li>                            <li data-name=\"util.utf8.write\"><a href=\"util.utf8.html#.write\">write</a></li>                        </ul>            <ul class=\"events itemMembers\">                        </ul>        </li>            <li class=\"item\" data-name=\"BufferReader\">            <span class=\"title\">                <a href=\"BufferReader.html\">BufferReader</a>                            </span>            <ul class=\"members itemMembers\">                        <span class=\"subtitle\">Members</span>                            <li data-name=\"BufferReader#buf\"><a href=\"BufferReader.html#buf\">buf</a></li>                            <li data-name=\"BufferReader#len\"><a href=\"BufferReader.html#len\">len</a></li>                            <li data-name=\"BufferReader#pos\"><a href=\"BufferReader.html#pos\">pos</a></li>                        </ul>            <ul class=\"typedefs itemMembers\">                        </ul>            <ul class=\"methods itemMembers\">                        <span class=\"subtitle\">Methods</span>                            <li data-name=\"BufferReader#bool\"><a href=\"BufferReader.html#bool\">bool</a></li>                            <li data-name=\"BufferReader#bytes\"><a href=\"BufferReader.html#bytes\">bytes</a></li>                            <li data-name=\"BufferReader#double\"><a href=\"BufferReader.html#double\">double</a></li>                            <li data-name=\"BufferReader#fixed32\"><a href=\"BufferReader.html#fixed32\">fixed32</a></li>                            <li data-name=\"BufferReader#fixed64\"><a href=\"BufferReader.html#fixed64\">fixed64</a></li>                            <li data-name=\"BufferReader#float\"><a href=\"BufferReader.html#float\">float</a></li>                            <li data-name=\"BufferReader#int32\"><a href=\"BufferReader.html#int32\">int32</a></li>                            <li data-name=\"BufferReader#int64\"><a href=\"BufferReader.html#int64\">int64</a></li>                            <li data-name=\"BufferReader#sfixed32\"><a href=\"BufferReader.html#sfixed32\">sfixed32</a></li>                            <li data-name=\"BufferReader#sfixed64\"><a href=\"BufferReader.html#sfixed64\">sfixed64</a></li>                            <li data-name=\"BufferReader#sint32\"><a href=\"BufferReader.html#sint32\">sint32</a></li>                            <li data-name=\"BufferReader#sint64\"><a href=\"BufferReader.html#sint64\">sint64</a></li>                            <li data-name=\"BufferReader#skip\"><a href=\"BufferReader.html#skip\">skip</a></li>                            <li data-name=\"BufferReader#skipType\"><a href=\"BufferReader.html#skipType\">skipType</a></li>                            <li data-name=\"BufferReader#string\"><a href=\"BufferReader.html#string\">string</a></li>                            <li data-name=\"BufferReader#uint32\"><a href=\"BufferReader.html#uint32\">uint32</a></li>                            <li data-name=\"BufferReader#uint64\"><a href=\"BufferReader.html#uint64\">uint64</a></li>                        </ul>            <ul class=\"events itemMembers\">                        </ul>        </li>            <li class=\"item\" data-name=\"BufferWriter\">            <span class=\"title\">                <a href=\"BufferWriter.html\">BufferWriter</a>                            </span>            <ul class=\"members itemMembers\">                        <span class=\"subtitle\">Members</span>                            <li data-name=\"BufferWriter#head\"><a href=\"BufferWriter.html#head\">head</a></li>                            <li data-name=\"BufferWriter#len\"><a href=\"BufferWriter.html#len\">len</a></li>                            <li data-name=\"BufferWriter#states\"><a href=\"BufferWriter.html#states\">states</a></li>                            <li data-name=\"BufferWriter#tail\"><a href=\"BufferWriter.html#tail\">tail</a></li>                        </ul>            <ul class=\"typedefs itemMembers\">                        </ul>            <ul class=\"methods itemMembers\">                        <span class=\"subtitle\">Methods</span>                            <li data-name=\"BufferWriter.alloc\"><a href=\"BufferWriter.html#.alloc\">alloc</a></li>                            <li data-name=\"BufferWriter#bool\"><a href=\"BufferWriter.html#bool\">bool</a></li>                            <li data-name=\"BufferWriter#bytes\"><a href=\"BufferWriter.html#bytes\">bytes</a></li>                            <li data-name=\"BufferWriter#double\"><a href=\"BufferWriter.html#double\">double</a></li>                            <li data-name=\"BufferWriter#finish\"><a href=\"BufferWriter.html#finish\">finish</a></li>                            <li data-name=\"BufferWriter#fixed32\"><a href=\"BufferWriter.html#fixed32\">fixed32</a></li>                            <li data-name=\"BufferWriter#fixed64\"><a href=\"BufferWriter.html#fixed64\">fixed64</a></li>                            <li data-name=\"BufferWriter#float\"><a href=\"BufferWriter.html#float\">float</a></li>                            <li data-name=\"BufferWriter#fork\"><a href=\"BufferWriter.html#fork\">fork</a></li>                            <li data-name=\"BufferWriter#int32\"><a href=\"BufferWriter.html#int32\">int32</a></li>                            <li data-name=\"BufferWriter#int64\"><a href=\"BufferWriter.html#int64\">int64</a></li>                            <li data-name=\"BufferWriter#ldelim\"><a href=\"BufferWriter.html#ldelim\">ldelim</a></li>                            <li data-name=\"BufferWriter#reset\"><a href=\"BufferWriter.html#reset\">reset</a></li>                            <li data-name=\"BufferWriter#sfixed32\"><a href=\"BufferWriter.html#sfixed32\">sfixed32</a></li>                            <li data-name=\"BufferWriter#sfixed64\"><a href=\"BufferWriter.html#sfixed64\">sfixed64</a></li>                            <li data-name=\"BufferWriter#sint32\"><a href=\"BufferWriter.html#sint32\">sint32</a></li>                            <li data-name=\"BufferWriter#sint64\"><a href=\"BufferWriter.html#sint64\">sint64</a></li>                            <li data-name=\"BufferWriter#string\"><a href=\"BufferWriter.html#string\">string</a></li>                            <li data-name=\"BufferWriter#uint32\"><a href=\"BufferWriter.html#uint32\">uint32</a></li>                            <li data-name=\"BufferWriter#uint64\"><a href=\"BufferWriter.html#uint64\">uint64</a></li>                        </ul>            <ul class=\"events itemMembers\">                        </ul>        </li>            <li class=\"item\" data-name=\"Enum\">            <span class=\"title\">                <a href=\"Enum.html\">Enum</a>                            </span>            <ul class=\"members itemMembers\">                        <span class=\"subtitle\">Members</span>                            <li data-name=\"Enum#comment\"><a href=\"Enum.html#comment\">comment</a></li>                            <li data-name=\"Enum#comments\"><a href=\"Enum.html#comments\">comments</a></li>                            <li data-name=\"Enum#filename\"><a href=\"Enum.html#filename\">filename</a></li>                            <li data-name=\"Enum#fullName\"><a href=\"Enum.html#fullName\">fullName</a></li>                            <li data-name=\"Enum#name\"><a href=\"Enum.html#name\">name</a></li>                            <li data-name=\"Enum#options\"><a href=\"Enum.html#options\">options</a></li>                            <li data-name=\"Enum#parent\"><a href=\"Enum.html#parent\">parent</a></li>                            <li data-name=\"Enum#reserved\"><a href=\"Enum.html#reserved\">reserved</a></li>                            <li data-name=\"Enum#resolved\"><a href=\"Enum.html#resolved\">resolved</a></li>                            <li data-name=\"Enum#root\"><a href=\"Enum.html#root\">root</a></li>                            <li data-name=\"Enum#values\"><a href=\"Enum.html#values\">values</a></li>                            <li data-name=\"Enum#valuesById\"><a href=\"Enum.html#valuesById\">valuesById</a></li>                        </ul>            <ul class=\"typedefs itemMembers\">                        </ul>            <ul class=\"methods itemMembers\">                        <span class=\"subtitle\">Methods</span>                            <li data-name=\"Enum.fromJSON\"><a href=\"Enum.html#.fromJSON\">fromJSON</a></li>                            <li data-name=\"Enum#add\"><a href=\"Enum.html#add\">add</a></li>                            <li data-name=\"Enum#getOption\"><a href=\"Enum.html#getOption\">getOption</a></li>                            <li data-name=\"Enum#isReservedId\"><a href=\"Enum.html#isReservedId\">isReservedId</a></li>                            <li data-name=\"Enum#isReservedName\"><a href=\"Enum.html#isReservedName\">isReservedName</a></li>                            <li data-name=\"Enum#onAdd\"><a href=\"Enum.html#onAdd\">onAdd</a></li>                            <li data-name=\"Enum#onRemove\"><a href=\"Enum.html#onRemove\">onRemove</a></li>                            <li data-name=\"Enum#remove\"><a href=\"Enum.html#remove\">remove</a></li>                            <li data-name=\"Enum#resolve\"><a href=\"Enum.html#resolve\">resolve</a></li>                            <li data-name=\"Enum#setOption\"><a href=\"Enum.html#setOption\">setOption</a></li>                            <li data-name=\"Enum#setOptions\"><a href=\"Enum.html#setOptions\">setOptions</a></li>                            <li data-name=\"Enum#toJSON\"><a href=\"Enum.html#toJSON\">toJSON</a></li>                            <li data-name=\"Enum#toString\"><a href=\"Enum.html#toString\">toString</a></li>                        </ul>            <ul class=\"events itemMembers\">                        </ul>        </li>            <li class=\"item\" data-name=\"Field\">            <span class=\"title\">                <a href=\"Field.html\">Field</a>                            </span>            <ul class=\"members itemMembers\">                        <span class=\"subtitle\">Members</span>                            <li data-name=\"Field#bytes\"><a href=\"Field.html#bytes\">bytes</a></li>                            <li data-name=\"Field#comment\"><a href=\"Field.html#comment\">comment</a></li>                            <li data-name=\"Field#declaringField\"><a href=\"Field.html#declaringField\">declaringField</a></li>                            <li data-name=\"Field#defaultValue\"><a href=\"Field.html#defaultValue\">defaultValue</a></li>                            <li data-name=\"Field#extend\"><a href=\"Field.html#extend\">extend</a></li>                            <li data-name=\"Field#extensionField\"><a href=\"Field.html#extensionField\">extensionField</a></li>                            <li data-name=\"Field#filename\"><a href=\"Field.html#filename\">filename</a></li>                            <li data-name=\"Field#fullName\"><a href=\"Field.html#fullName\">fullName</a></li>                            <li data-name=\"Field#id\"><a href=\"Field.html#id\">id</a></li>                            <li data-name=\"Field#long\"><a href=\"Field.html#long\">long</a></li>                            <li data-name=\"Field#map\"><a href=\"Field.html#map\">map</a></li>                            <li data-name=\"Field#message\"><a href=\"Field.html#message\">message</a></li>                            <li data-name=\"Field#name\"><a href=\"Field.html#name\">name</a></li>                            <li data-name=\"Field#optional\"><a href=\"Field.html#optional\">optional</a></li>                            <li data-name=\"Field#options\"><a href=\"Field.html#options\">options</a></li>                            <li data-name=\"Field#packed\"><a href=\"Field.html#packed\">packed</a></li>                            <li data-name=\"Field#parent\"><a href=\"Field.html#parent\">parent</a></li>                            <li data-name=\"Field#partOf\"><a href=\"Field.html#partOf\">partOf</a></li>                            <li data-name=\"Field#repeated\"><a href=\"Field.html#repeated\">repeated</a></li>                            <li data-name=\"Field#required\"><a href=\"Field.html#required\">required</a></li>                            <li data-name=\"Field#resolved\"><a href=\"Field.html#resolved\">resolved</a></li>                            <li data-name=\"Field#resolvedType\"><a href=\"Field.html#resolvedType\">resolvedType</a></li>                            <li data-name=\"Field#root\"><a href=\"Field.html#root\">root</a></li>                            <li data-name=\"Field#rule\"><a href=\"Field.html#rule\">rule</a></li>                            <li data-name=\"Field#type\"><a href=\"Field.html#type\">type</a></li>                            <li data-name=\"Field#typeDefault\"><a href=\"Field.html#typeDefault\">typeDefault</a></li>                        </ul>            <ul class=\"typedefs itemMembers\">                        </ul>            <ul class=\"methods itemMembers\">                        <span class=\"subtitle\">Methods</span>                            <li data-name=\"Field.d\"><a href=\"Field.html#.d\">d</a></li>                            <li data-name=\"Field.d(2)\"><a href=\"Field.html#.d2\">d</a></li>                            <li data-name=\"Field.fromJSON\"><a href=\"Field.html#.fromJSON\">fromJSON</a></li>                            <li data-name=\"Field#getOption\"><a href=\"Field.html#getOption\">getOption</a></li>                            <li data-name=\"Field#onAdd\"><a href=\"Field.html#onAdd\">onAdd</a></li>                            <li data-name=\"Field#onRemove\"><a href=\"Field.html#onRemove\">onRemove</a></li>                            <li data-name=\"Field#resolve\"><a href=\"Field.html#resolve\">resolve</a></li>                            <li data-name=\"Field#setOption\"><a href=\"Field.html#setOption\">setOption</a></li>                            <li data-name=\"Field#setOptions\"><a href=\"Field.html#setOptions\">setOptions</a></li>                            <li data-name=\"Field#toJSON\"><a href=\"Field.html#toJSON\">toJSON</a></li>                            <li data-name=\"Field#toString\"><a href=\"Field.html#toString\">toString</a></li>                        </ul>            <ul class=\"events itemMembers\">                        </ul>        </li>            <li class=\"item\" data-name=\"FieldBase\">            <span class=\"title\">                <a href=\"FieldBase.html\">FieldBase</a>                            </span>            <ul class=\"members itemMembers\">                        <span class=\"subtitle\">Members</span>                            <li data-name=\"FieldBase#bytes\"><a href=\"FieldBase.html#bytes\">bytes</a></li>                            <li data-name=\"FieldBase#comment\"><a href=\"FieldBase.html#comment\">comment</a></li>                            <li data-name=\"FieldBase#declaringField\"><a href=\"FieldBase.html#declaringField\">declaringField</a></li>                            <li data-name=\"FieldBase#defaultValue\"><a href=\"FieldBase.html#defaultValue\">defaultValue</a></li>                            <li data-name=\"FieldBase#extend\"><a href=\"FieldBase.html#extend\">extend</a></li>                            <li data-name=\"FieldBase#extensionField\"><a href=\"FieldBase.html#extensionField\">extensionField</a></li>                            <li data-name=\"FieldBase#filename\"><a href=\"FieldBase.html#filename\">filename</a></li>                            <li data-name=\"FieldBase#fullName\"><a href=\"FieldBase.html#fullName\">fullName</a></li>                            <li data-name=\"FieldBase#id\"><a href=\"FieldBase.html#id\">id</a></li>                            <li data-name=\"FieldBase#long\"><a href=\"FieldBase.html#long\">long</a></li>                            <li data-name=\"FieldBase#map\"><a href=\"FieldBase.html#map\">map</a></li>                            <li data-name=\"FieldBase#message\"><a href=\"FieldBase.html#message\">message</a></li>                            <li data-name=\"FieldBase#name\"><a href=\"FieldBase.html#name\">name</a></li>                            <li data-name=\"FieldBase#optional\"><a href=\"FieldBase.html#optional\">optional</a></li>                            <li data-name=\"FieldBase#options\"><a href=\"FieldBase.html#options\">options</a></li>                            <li data-name=\"FieldBase#parent\"><a href=\"FieldBase.html#parent\">parent</a></li>                            <li data-name=\"FieldBase#partOf\"><a href=\"FieldBase.html#partOf\">partOf</a></li>                            <li data-name=\"FieldBase#repeated\"><a href=\"FieldBase.html#repeated\">repeated</a></li>                            <li data-name=\"FieldBase#required\"><a href=\"FieldBase.html#required\">required</a></li>                            <li data-name=\"FieldBase#resolved\"><a href=\"FieldBase.html#resolved\">resolved</a></li>                            <li data-name=\"FieldBase#resolvedType\"><a href=\"FieldBase.html#resolvedType\">resolvedType</a></li>                            <li data-name=\"FieldBase#root\"><a href=\"FieldBase.html#root\">root</a></li>                            <li data-name=\"FieldBase#rule\"><a href=\"FieldBase.html#rule\">rule</a></li>                            <li data-name=\"FieldBase#type\"><a href=\"FieldBase.html#type\">type</a></li>                            <li data-name=\"FieldBase#typeDefault\"><a href=\"FieldBase.html#typeDefault\">typeDefault</a></li>                        </ul>            <ul class=\"typedefs itemMembers\">                        </ul>            <ul class=\"methods itemMembers\">                        <span class=\"subtitle\">Methods</span>                            <li data-name=\"FieldBase#getOption\"><a href=\"FieldBase.html#getOption\">getOption</a></li>                            <li data-name=\"FieldBase#onAdd\"><a href=\"FieldBase.html#onAdd\">onAdd</a></li>                            <li data-name=\"FieldBase#onRemove\"><a href=\"FieldBase.html#onRemove\">onRemove</a></li>                            <li data-name=\"FieldBase#resolve\"><a href=\"FieldBase.html#resolve\">resolve</a></li>                            <li data-name=\"FieldBase#setOption\"><a href=\"FieldBase.html#setOption\">setOption</a></li>                            <li data-name=\"FieldBase#setOptions\"><a href=\"FieldBase.html#setOptions\">setOptions</a></li>                            <li data-name=\"FieldBase#toJSON\"><a href=\"FieldBase.html#toJSON\">toJSON</a></li>                            <li data-name=\"FieldBase#toString\"><a href=\"FieldBase.html#toString\">toString</a></li>                        </ul>            <ul class=\"events itemMembers\">                        </ul>        </li>            <li class=\"item\" data-name=\"MapField\">            <span class=\"title\">                <a href=\"MapField.html\">MapField</a>                            </span>            <ul class=\"members itemMembers\">                        <span class=\"subtitle\">Members</span>                            <li data-name=\"MapField#bytes\"><a href=\"MapField.html#bytes\">bytes</a></li>                            <li data-name=\"MapField#comment\"><a href=\"MapField.html#comment\">comment</a></li>                            <li data-name=\"MapField#declaringField\"><a href=\"MapField.html#declaringField\">declaringField</a></li>                            <li data-name=\"MapField#defaultValue\"><a href=\"MapField.html#defaultValue\">defaultValue</a></li>                            <li data-name=\"MapField#extend\"><a href=\"MapField.html#extend\">extend</a></li>                            <li data-name=\"MapField#extensionField\"><a href=\"MapField.html#extensionField\">extensionField</a></li>                            <li data-name=\"MapField#filename\"><a href=\"MapField.html#filename\">filename</a></li>                            <li data-name=\"MapField#fullName\"><a href=\"MapField.html#fullName\">fullName</a></li>                            <li data-name=\"MapField#id\"><a href=\"MapField.html#id\">id</a></li>                            <li data-name=\"MapField#keyType\"><a href=\"MapField.html#keyType\">keyType</a></li>                            <li data-name=\"MapField#long\"><a href=\"MapField.html#long\">long</a></li>                            <li data-name=\"MapField#map\"><a href=\"MapField.html#map\">map</a></li>                            <li data-name=\"MapField#message\"><a href=\"MapField.html#message\">message</a></li>                            <li data-name=\"MapField#name\"><a href=\"MapField.html#name\">name</a></li>                            <li data-name=\"MapField#optional\"><a href=\"MapField.html#optional\">optional</a></li>                            <li data-name=\"MapField#options\"><a href=\"MapField.html#options\">options</a></li>                            <li data-name=\"MapField#parent\"><a href=\"MapField.html#parent\">parent</a></li>                            <li data-name=\"MapField#partOf\"><a href=\"MapField.html#partOf\">partOf</a></li>                            <li data-name=\"MapField#repeated\"><a href=\"MapField.html#repeated\">repeated</a></li>                            <li data-name=\"MapField#required\"><a href=\"MapField.html#required\">required</a></li>                            <li data-name=\"MapField#resolved\"><a href=\"MapField.html#resolved\">resolved</a></li>                            <li data-name=\"MapField#resolvedKeyType\"><a href=\"MapField.html#resolvedKeyType\">resolvedKeyType</a></li>                            <li data-name=\"MapField#resolvedType\"><a href=\"MapField.html#resolvedType\">resolvedType</a></li>                            <li data-name=\"MapField#root\"><a href=\"MapField.html#root\">root</a></li>                            <li data-name=\"MapField#rule\"><a href=\"MapField.html#rule\">rule</a></li>                            <li data-name=\"MapField#type\"><a href=\"MapField.html#type\">type</a></li>                            <li data-name=\"MapField#typeDefault\"><a href=\"MapField.html#typeDefault\">typeDefault</a></li>                        </ul>            <ul class=\"typedefs itemMembers\">                        </ul>            <ul class=\"methods itemMembers\">                        <span class=\"subtitle\">Methods</span>                            <li data-name=\"MapField.d\"><a href=\"MapField.html#.d\">d</a></li>                            <li data-name=\"MapField.fromJSON\"><a href=\"MapField.html#.fromJSON\">fromJSON</a></li>                            <li data-name=\"MapField#getOption\"><a href=\"MapField.html#getOption\">getOption</a></li>                            <li data-name=\"MapField#onAdd\"><a href=\"MapField.html#onAdd\">onAdd</a></li>                            <li data-name=\"MapField#onRemove\"><a href=\"MapField.html#onRemove\">onRemove</a></li>                            <li data-name=\"MapField#resolve\"><a href=\"MapField.html#resolve\">resolve</a></li>                            <li data-name=\"MapField#setOption\"><a href=\"MapField.html#setOption\">setOption</a></li>                            <li data-name=\"MapField#setOptions\"><a href=\"MapField.html#setOptions\">setOptions</a></li>                            <li data-name=\"MapField#toJSON\"><a href=\"MapField.html#toJSON\">toJSON</a></li>                            <li data-name=\"MapField#toString\"><a href=\"MapField.html#toString\">toString</a></li>                        </ul>            <ul class=\"events itemMembers\">                        </ul>        </li>            <li class=\"item\" data-name=\"Message\">            <span class=\"title\">                <a href=\"Message.html\">Message</a>                            </span>            <ul class=\"members itemMembers\">                        <span class=\"subtitle\">Members</span>                            <li data-name=\"Message.$type\"><a href=\"Message.html#.$type\">$type</a></li>                            <li data-name=\"Message#$type\"><a href=\"Message.html#$type\">$type</a></li>                        </ul>            <ul class=\"typedefs itemMembers\">                        </ul>            <ul class=\"methods itemMembers\">                        <span class=\"subtitle\">Methods</span>                            <li data-name=\"Message.create\"><a href=\"Message.html#.create\">create</a></li>                            <li data-name=\"Message.decode\"><a href=\"Message.html#.decode\">decode</a></li>                            <li data-name=\"Message.decodeDelimited\"><a href=\"Message.html#.decodeDelimited\">decodeDelimited</a></li>                            <li data-name=\"Message.encode\"><a href=\"Message.html#.encode\">encode</a></li>                            <li data-name=\"Message.encodeDelimited\"><a href=\"Message.html#.encodeDelimited\">encodeDelimited</a></li>                            <li data-name=\"Message.fromObject\"><a href=\"Message.html#.fromObject\">fromObject</a></li>                            <li data-name=\"Message.toObject\"><a href=\"Message.html#.toObject\">toObject</a></li>                            <li data-name=\"Message.verify\"><a href=\"Message.html#.verify\">verify</a></li>                            <li data-name=\"Message#toJSON\"><a href=\"Message.html#toJSON\">toJSON</a></li>                        </ul>            <ul class=\"events itemMembers\">                        </ul>        </li>            <li class=\"item\" data-name=\"Method\">            <span class=\"title\">                <a href=\"Method.html\">Method</a>                            </span>            <ul class=\"members itemMembers\">                        <span class=\"subtitle\">Members</span>                            <li data-name=\"Method#comment\"><a href=\"Method.html#comment\">comment</a></li>                            <li data-name=\"Method#filename\"><a href=\"Method.html#filename\">filename</a></li>                            <li data-name=\"Method#fullName\"><a href=\"Method.html#fullName\">fullName</a></li>                            <li data-name=\"Method#name\"><a href=\"Method.html#name\">name</a></li>                            <li data-name=\"Method#options\"><a href=\"Method.html#options\">options</a></li>                            <li data-name=\"Method#parent\"><a href=\"Method.html#parent\">parent</a></li>                            <li data-name=\"Method#requestStream\"><a href=\"Method.html#requestStream\">requestStream</a></li>                            <li data-name=\"Method#requestType\"><a href=\"Method.html#requestType\">requestType</a></li>                            <li data-name=\"Method#resolved\"><a href=\"Method.html#resolved\">resolved</a></li>                            <li data-name=\"Method#resolvedRequestType\"><a href=\"Method.html#resolvedRequestType\">resolvedRequestType</a></li>                            <li data-name=\"Method#resolvedResponseType\"><a href=\"Method.html#resolvedResponseType\">resolvedResponseType</a></li>                            <li data-name=\"Method#responseStream\"><a href=\"Method.html#responseStream\">responseStream</a></li>                            <li data-name=\"Method#responseType\"><a href=\"Method.html#responseType\">responseType</a></li>                            <li data-name=\"Method#root\"><a href=\"Method.html#root\">root</a></li>                            <li data-name=\"Method#type\"><a href=\"Method.html#type\">type</a></li>                        </ul>            <ul class=\"typedefs itemMembers\">                        </ul>            <ul class=\"methods itemMembers\">                        <span class=\"subtitle\">Methods</span>                            <li data-name=\"Method.fromJSON\"><a href=\"Method.html#.fromJSON\">fromJSON</a></li>                            <li data-name=\"Method#getOption\"><a href=\"Method.html#getOption\">getOption</a></li>                            <li data-name=\"Method#onAdd\"><a href=\"Method.html#onAdd\">onAdd</a></li>                            <li data-name=\"Method#onRemove\"><a href=\"Method.html#onRemove\">onRemove</a></li>                            <li data-name=\"Method#resolve\"><a href=\"Method.html#resolve\">resolve</a></li>                            <li data-name=\"Method#setOption\"><a href=\"Method.html#setOption\">setOption</a></li>                            <li data-name=\"Method#setOptions\"><a href=\"Method.html#setOptions\">setOptions</a></li>                            <li data-name=\"Method#toJSON\"><a href=\"Method.html#toJSON\">toJSON</a></li>                            <li data-name=\"Method#toString\"><a href=\"Method.html#toString\">toString</a></li>                        </ul>            <ul class=\"events itemMembers\">                        </ul>        </li>            <li class=\"item\" data-name=\"Namespace\">            <span class=\"title\">                <a href=\"Namespace.html\">Namespace</a>                            </span>            <ul class=\"members itemMembers\">                        <span class=\"subtitle\">Members</span>                            <li data-name=\"Namespace#comment\"><a href=\"Namespace.html#comment\">comment</a></li>                            <li data-name=\"Namespace#filename\"><a href=\"Namespace.html#filename\">filename</a></li>                            <li data-name=\"Namespace#fullName\"><a href=\"Namespace.html#fullName\">fullName</a></li>                            <li data-name=\"Namespace#name\"><a href=\"Namespace.html#name\">name</a></li>                            <li data-name=\"Namespace#nested\"><a href=\"Namespace.html#nested\">nested</a></li>                            <li data-name=\"Namespace#nestedArray\"><a href=\"Namespace.html#nestedArray\">nestedArray</a></li>                            <li data-name=\"Namespace#options\"><a href=\"Namespace.html#options\">options</a></li>                            <li data-name=\"Namespace#parent\"><a href=\"Namespace.html#parent\">parent</a></li>                            <li data-name=\"Namespace#resolved\"><a href=\"Namespace.html#resolved\">resolved</a></li>                            <li data-name=\"Namespace#root\"><a href=\"Namespace.html#root\">root</a></li>                        </ul>            <ul class=\"typedefs itemMembers\">                        </ul>            <ul class=\"methods itemMembers\">                        <span class=\"subtitle\">Methods</span>                            <li data-name=\"Namespace.arrayToJSON\"><a href=\"Namespace.html#.arrayToJSON\">arrayToJSON</a></li>                            <li data-name=\"Namespace.fromJSON\"><a href=\"Namespace.html#.fromJSON\">fromJSON</a></li>                            <li data-name=\"Namespace.isReservedId\"><a href=\"Namespace.html#.isReservedId\">isReservedId</a></li>                            <li data-name=\"Namespace.isReservedName\"><a href=\"Namespace.html#.isReservedName\">isReservedName</a></li>                            <li data-name=\"Namespace#add\"><a href=\"Namespace.html#add\">add</a></li>                            <li data-name=\"Namespace#addJSON\"><a href=\"Namespace.html#addJSON\">addJSON</a></li>                            <li data-name=\"Namespace#define\"><a href=\"Namespace.html#define\">define</a></li>                            <li data-name=\"Namespace#get\"><a href=\"Namespace.html#get\">get</a></li>                            <li data-name=\"Namespace#getEnum\"><a href=\"Namespace.html#getEnum\">getEnum</a></li>                            <li data-name=\"Namespace#getOption\"><a href=\"Namespace.html#getOption\">getOption</a></li>                            <li data-name=\"Namespace#lookup\"><a href=\"Namespace.html#lookup\">lookup</a></li>                            <li data-name=\"Namespace#lookup(2)\"><a href=\"Namespace.html#lookup2\">lookup</a></li>                            <li data-name=\"Namespace#lookupEnum\"><a href=\"Namespace.html#lookupEnum\">lookupEnum</a></li>                            <li data-name=\"Namespace#lookupService\"><a href=\"Namespace.html#lookupService\">lookupService</a></li>                            <li data-name=\"Namespace#lookupType\"><a href=\"Namespace.html#lookupType\">lookupType</a></li>                            <li data-name=\"Namespace#lookupTypeOrEnum\"><a href=\"Namespace.html#lookupTypeOrEnum\">lookupTypeOrEnum</a></li>                            <li data-name=\"Namespace#onAdd\"><a href=\"Namespace.html#onAdd\">onAdd</a></li>                            <li data-name=\"Namespace#onRemove\"><a href=\"Namespace.html#onRemove\">onRemove</a></li>                            <li data-name=\"Namespace#remove\"><a href=\"Namespace.html#remove\">remove</a></li>                            <li data-name=\"Namespace#resolve\"><a href=\"Namespace.html#resolve\">resolve</a></li>                            <li data-name=\"Namespace#resolveAll\"><a href=\"Namespace.html#resolveAll\">resolveAll</a></li>                            <li data-name=\"Namespace#setOption\"><a href=\"Namespace.html#setOption\">setOption</a></li>                            <li data-name=\"Namespace#setOptions\"><a href=\"Namespace.html#setOptions\">setOptions</a></li>                            <li data-name=\"Namespace#toJSON\"><a href=\"Namespace.html#toJSON\">toJSON</a></li>                            <li data-name=\"Namespace#toString\"><a href=\"Namespace.html#toString\">toString</a></li>                        </ul>            <ul class=\"events itemMembers\">                        </ul>        </li>            <li class=\"item\" data-name=\"NamespaceBase\">            <span class=\"title\">                <a href=\"NamespaceBase.html\">NamespaceBase</a>                            </span>            <ul class=\"members itemMembers\">                        <span class=\"subtitle\">Members</span>                            <li data-name=\"NamespaceBase#comment\"><a href=\"NamespaceBase.html#comment\">comment</a></li>                            <li data-name=\"NamespaceBase#filename\"><a href=\"NamespaceBase.html#filename\">filename</a></li>                            <li data-name=\"NamespaceBase#fullName\"><a href=\"NamespaceBase.html#fullName\">fullName</a></li>                            <li data-name=\"NamespaceBase#name\"><a href=\"NamespaceBase.html#name\">name</a></li>                            <li data-name=\"NamespaceBase#nested\"><a href=\"NamespaceBase.html#nested\">nested</a></li>                            <li data-name=\"NamespaceBase#nestedArray\"><a href=\"NamespaceBase.html#nestedArray\">nestedArray</a></li>                            <li data-name=\"NamespaceBase#options\"><a href=\"NamespaceBase.html#options\">options</a></li>                            <li data-name=\"NamespaceBase#parent\"><a href=\"NamespaceBase.html#parent\">parent</a></li>                            <li data-name=\"NamespaceBase#resolved\"><a href=\"NamespaceBase.html#resolved\">resolved</a></li>                            <li data-name=\"NamespaceBase#root\"><a href=\"NamespaceBase.html#root\">root</a></li>                        </ul>            <ul class=\"typedefs itemMembers\">                        </ul>            <ul class=\"methods itemMembers\">                        <span class=\"subtitle\">Methods</span>                            <li data-name=\"NamespaceBase#add\"><a href=\"NamespaceBase.html#add\">add</a></li>                            <li data-name=\"NamespaceBase#addJSON\"><a href=\"NamespaceBase.html#addJSON\">addJSON</a></li>                            <li data-name=\"NamespaceBase#define\"><a href=\"NamespaceBase.html#define\">define</a></li>                            <li data-name=\"NamespaceBase#get\"><a href=\"NamespaceBase.html#get\">get</a></li>                            <li data-name=\"NamespaceBase#getEnum\"><a href=\"NamespaceBase.html#getEnum\">getEnum</a></li>                            <li data-name=\"NamespaceBase#getOption\"><a href=\"NamespaceBase.html#getOption\">getOption</a></li>                            <li data-name=\"NamespaceBase#lookup\"><a href=\"NamespaceBase.html#lookup\">lookup</a></li>                            <li data-name=\"NamespaceBase#lookup(2)\"><a href=\"NamespaceBase.html#lookup2\">lookup</a></li>                            <li data-name=\"NamespaceBase#lookupEnum\"><a href=\"NamespaceBase.html#lookupEnum\">lookupEnum</a></li>                            <li data-name=\"NamespaceBase#lookupService\"><a href=\"NamespaceBase.html#lookupService\">lookupService</a></li>                            <li data-name=\"NamespaceBase#lookupType\"><a href=\"NamespaceBase.html#lookupType\">lookupType</a></li>                            <li data-name=\"NamespaceBase#lookupTypeOrEnum\"><a href=\"NamespaceBase.html#lookupTypeOrEnum\">lookupTypeOrEnum</a></li>                            <li data-name=\"NamespaceBase#onAdd\"><a href=\"NamespaceBase.html#onAdd\">onAdd</a></li>                            <li data-name=\"NamespaceBase#onRemove\"><a href=\"NamespaceBase.html#onRemove\">onRemove</a></li>                            <li data-name=\"NamespaceBase#remove\"><a href=\"NamespaceBase.html#remove\">remove</a></li>                            <li data-name=\"NamespaceBase#resolve\"><a href=\"NamespaceBase.html#resolve\">resolve</a></li>                            <li data-name=\"NamespaceBase#resolveAll\"><a href=\"NamespaceBase.html#resolveAll\">resolveAll</a></li>                            <li data-name=\"NamespaceBase#setOption\"><a href=\"NamespaceBase.html#setOption\">setOption</a></li>                            <li data-name=\"NamespaceBase#setOptions\"><a href=\"NamespaceBase.html#setOptions\">setOptions</a></li>                            <li data-name=\"NamespaceBase#toJSON\"><a href=\"NamespaceBase.html#toJSON\">toJSON</a></li>                            <li data-name=\"NamespaceBase#toString\"><a href=\"NamespaceBase.html#toString\">toString</a></li>                        </ul>            <ul class=\"events itemMembers\">                        </ul>        </li>            <li class=\"item\" data-name=\"OneOf\">            <span class=\"title\">                <a href=\"OneOf.html\">OneOf</a>                            </span>            <ul class=\"members itemMembers\">                        <span class=\"subtitle\">Members</span>                            <li data-name=\"OneOf#comment\"><a href=\"OneOf.html#comment\">comment</a></li>                            <li data-name=\"OneOf#fieldsArray\"><a href=\"OneOf.html#fieldsArray\">fieldsArray</a></li>                            <li data-name=\"OneOf#filename\"><a href=\"OneOf.html#filename\">filename</a></li>                            <li data-name=\"OneOf#fullName\"><a href=\"OneOf.html#fullName\">fullName</a></li>                            <li data-name=\"OneOf#name\"><a href=\"OneOf.html#name\">name</a></li>                            <li data-name=\"OneOf#oneof\"><a href=\"OneOf.html#oneof\">oneof</a></li>                            <li data-name=\"OneOf#options\"><a href=\"OneOf.html#options\">options</a></li>                            <li data-name=\"OneOf#parent\"><a href=\"OneOf.html#parent\">parent</a></li>                            <li data-name=\"OneOf#resolved\"><a href=\"OneOf.html#resolved\">resolved</a></li>                            <li data-name=\"OneOf#root\"><a href=\"OneOf.html#root\">root</a></li>                        </ul>            <ul class=\"typedefs itemMembers\">                        </ul>            <ul class=\"methods itemMembers\">                        <span class=\"subtitle\">Methods</span>                            <li data-name=\"OneOf.d\"><a href=\"OneOf.html#.d\">d</a></li>                            <li data-name=\"OneOf.fromJSON\"><a href=\"OneOf.html#.fromJSON\">fromJSON</a></li>                            <li data-name=\"OneOf#add\"><a href=\"OneOf.html#add\">add</a></li>                            <li data-name=\"OneOf#getOption\"><a href=\"OneOf.html#getOption\">getOption</a></li>                            <li data-name=\"OneOf#onAdd\"><a href=\"OneOf.html#onAdd\">onAdd</a></li>                            <li data-name=\"OneOf#onRemove\"><a href=\"OneOf.html#onRemove\">onRemove</a></li>                            <li data-name=\"OneOf#remove\"><a href=\"OneOf.html#remove\">remove</a></li>                            <li data-name=\"OneOf#resolve\"><a href=\"OneOf.html#resolve\">resolve</a></li>                            <li data-name=\"OneOf#setOption\"><a href=\"OneOf.html#setOption\">setOption</a></li>                            <li data-name=\"OneOf#setOptions\"><a href=\"OneOf.html#setOptions\">setOptions</a></li>                            <li data-name=\"OneOf#toJSON\"><a href=\"OneOf.html#toJSON\">toJSON</a></li>                            <li data-name=\"OneOf#toString\"><a href=\"OneOf.html#toString\">toString</a></li>                        </ul>            <ul class=\"events itemMembers\">                        </ul>        </li>            <li class=\"item\" data-name=\"Reader\">            <span class=\"title\">                <a href=\"Reader.html\">Reader</a>                            </span>            <ul class=\"members itemMembers\">                        <span class=\"subtitle\">Members</span>                            <li data-name=\"Reader#buf\"><a href=\"Reader.html#buf\">buf</a></li>                            <li data-name=\"Reader#len\"><a href=\"Reader.html#len\">len</a></li>                            <li data-name=\"Reader#pos\"><a href=\"Reader.html#pos\">pos</a></li>                        </ul>            <ul class=\"typedefs itemMembers\">                        </ul>            <ul class=\"methods itemMembers\">                        <span class=\"subtitle\">Methods</span>                            <li data-name=\"Reader.create\"><a href=\"Reader.html#.create\">create</a></li>                            <li data-name=\"Reader#bool\"><a href=\"Reader.html#bool\">bool</a></li>                            <li data-name=\"Reader#bytes\"><a href=\"Reader.html#bytes\">bytes</a></li>                            <li data-name=\"Reader#double\"><a href=\"Reader.html#double\">double</a></li>                            <li data-name=\"Reader#fixed32\"><a href=\"Reader.html#fixed32\">fixed32</a></li>                            <li data-name=\"Reader#fixed64\"><a href=\"Reader.html#fixed64\">fixed64</a></li>                            <li data-name=\"Reader#float\"><a href=\"Reader.html#float\">float</a></li>                            <li data-name=\"Reader#int32\"><a href=\"Reader.html#int32\">int32</a></li>                            <li data-name=\"Reader#int64\"><a href=\"Reader.html#int64\">int64</a></li>                            <li data-name=\"Reader#sfixed32\"><a href=\"Reader.html#sfixed32\">sfixed32</a></li>                            <li data-name=\"Reader#sfixed64\"><a href=\"Reader.html#sfixed64\">sfixed64</a></li>                            <li data-name=\"Reader#sint32\"><a href=\"Reader.html#sint32\">sint32</a></li>                            <li data-name=\"Reader#sint64\"><a href=\"Reader.html#sint64\">sint64</a></li>                            <li data-name=\"Reader#skip\"><a href=\"Reader.html#skip\">skip</a></li>                            <li data-name=\"Reader#skipType\"><a href=\"Reader.html#skipType\">skipType</a></li>                            <li data-name=\"Reader#string\"><a href=\"Reader.html#string\">string</a></li>                            <li data-name=\"Reader#uint32\"><a href=\"Reader.html#uint32\">uint32</a></li>                            <li data-name=\"Reader#uint64\"><a href=\"Reader.html#uint64\">uint64</a></li>                        </ul>            <ul class=\"events itemMembers\">                        </ul>        </li>            <li class=\"item\" data-name=\"ReflectionObject\">            <span class=\"title\">                <a href=\"ReflectionObject.html\">ReflectionObject</a>                            </span>            <ul class=\"members itemMembers\">                        <span class=\"subtitle\">Members</span>                            <li data-name=\"ReflectionObject#comment\"><a href=\"ReflectionObject.html#comment\">comment</a></li>                            <li data-name=\"ReflectionObject#filename\"><a href=\"ReflectionObject.html#filename\">filename</a></li>                            <li data-name=\"ReflectionObject#fullName\"><a href=\"ReflectionObject.html#fullName\">fullName</a></li>                            <li data-name=\"ReflectionObject#name\"><a href=\"ReflectionObject.html#name\">name</a></li>                            <li data-name=\"ReflectionObject#options\"><a href=\"ReflectionObject.html#options\">options</a></li>                            <li data-name=\"ReflectionObject#parent\"><a href=\"ReflectionObject.html#parent\">parent</a></li>                            <li data-name=\"ReflectionObject#resolved\"><a href=\"ReflectionObject.html#resolved\">resolved</a></li>                            <li data-name=\"ReflectionObject#root\"><a href=\"ReflectionObject.html#root\">root</a></li>                        </ul>            <ul class=\"typedefs itemMembers\">                        </ul>            <ul class=\"methods itemMembers\">                        <span class=\"subtitle\">Methods</span>                            <li data-name=\"ReflectionObject#getOption\"><a href=\"ReflectionObject.html#getOption\">getOption</a></li>                            <li data-name=\"ReflectionObject#onAdd\"><a href=\"ReflectionObject.html#onAdd\">onAdd</a></li>                            <li data-name=\"ReflectionObject#onRemove\"><a href=\"ReflectionObject.html#onRemove\">onRemove</a></li>                            <li data-name=\"ReflectionObject#resolve\"><a href=\"ReflectionObject.html#resolve\">resolve</a></li>                            <li data-name=\"ReflectionObject#setOption\"><a href=\"ReflectionObject.html#setOption\">setOption</a></li>                            <li data-name=\"ReflectionObject#setOptions\"><a href=\"ReflectionObject.html#setOptions\">setOptions</a></li>                            <li data-name=\"ReflectionObject#toJSON\"><a href=\"ReflectionObject.html#toJSON\">toJSON</a></li>                            <li data-name=\"ReflectionObject#toString\"><a href=\"ReflectionObject.html#toString\">toString</a></li>                        </ul>            <ul class=\"events itemMembers\">                        </ul>        </li>            <li class=\"item\" data-name=\"Root\">            <span class=\"title\">                <a href=\"Root.html\">Root</a>                            </span>            <ul class=\"members itemMembers\">                        <span class=\"subtitle\">Members</span>                            <li data-name=\"Root#comment\"><a href=\"Root.html#comment\">comment</a></li>                            <li data-name=\"Root#deferred\"><a href=\"Root.html#deferred\">deferred</a></li>                            <li data-name=\"Root#filename\"><a href=\"Root.html#filename\">filename</a></li>                            <li data-name=\"Root#files\"><a href=\"Root.html#files\">files</a></li>                            <li data-name=\"Root#fullName\"><a href=\"Root.html#fullName\">fullName</a></li>                            <li data-name=\"Root#name\"><a href=\"Root.html#name\">name</a></li>                            <li data-name=\"Root#nested\"><a href=\"Root.html#nested\">nested</a></li>                            <li data-name=\"Root#nestedArray\"><a href=\"Root.html#nestedArray\">nestedArray</a></li>                            <li data-name=\"Root#options\"><a href=\"Root.html#options\">options</a></li>                            <li data-name=\"Root#parent\"><a href=\"Root.html#parent\">parent</a></li>                            <li data-name=\"Root#resolved\"><a href=\"Root.html#resolved\">resolved</a></li>                            <li data-name=\"Root#root\"><a href=\"Root.html#root\">root</a></li>                        </ul>            <ul class=\"typedefs itemMembers\">                        </ul>            <ul class=\"methods itemMembers\">                        <span class=\"subtitle\">Methods</span>                            <li data-name=\"Root.fromJSON\"><a href=\"Root.html#.fromJSON\">fromJSON</a></li>                            <li data-name=\"Root#add\"><a href=\"Root.html#add\">add</a></li>                            <li data-name=\"Root#addJSON\"><a href=\"Root.html#addJSON\">addJSON</a></li>                            <li data-name=\"Root#define\"><a href=\"Root.html#define\">define</a></li>                            <li data-name=\"Root#get\"><a href=\"Root.html#get\">get</a></li>                            <li data-name=\"Root#getEnum\"><a href=\"Root.html#getEnum\">getEnum</a></li>                            <li data-name=\"Root#getOption\"><a href=\"Root.html#getOption\">getOption</a></li>                            <li data-name=\"Root#load\"><a href=\"Root.html#load\">load</a></li>                            <li data-name=\"Root#load(2)\"><a href=\"Root.html#load2\">load</a></li>                            <li data-name=\"Root#load(3)\"><a href=\"Root.html#load3\">load</a></li>                            <li data-name=\"Root#loadSync\"><a href=\"Root.html#loadSync\">loadSync</a></li>                            <li data-name=\"Root#lookup\"><a href=\"Root.html#lookup\">lookup</a></li>                            <li data-name=\"Root#lookup(2)\"><a href=\"Root.html#lookup2\">lookup</a></li>                            <li data-name=\"Root#lookupEnum\"><a href=\"Root.html#lookupEnum\">lookupEnum</a></li>                            <li data-name=\"Root#lookupService\"><a href=\"Root.html#lookupService\">lookupService</a></li>                            <li data-name=\"Root#lookupType\"><a href=\"Root.html#lookupType\">lookupType</a></li>                            <li data-name=\"Root#lookupTypeOrEnum\"><a href=\"Root.html#lookupTypeOrEnum\">lookupTypeOrEnum</a></li>                            <li data-name=\"Root#onAdd\"><a href=\"Root.html#onAdd\">onAdd</a></li>                            <li data-name=\"Root#onRemove\"><a href=\"Root.html#onRemove\">onRemove</a></li>                            <li data-name=\"Root#remove\"><a href=\"Root.html#remove\">remove</a></li>                            <li data-name=\"Root#resolve\"><a href=\"Root.html#resolve\">resolve</a></li>                            <li data-name=\"Root#resolveAll\"><a href=\"Root.html#resolveAll\">resolveAll</a></li>                            <li data-name=\"Root#resolvePath\"><a href=\"Root.html#resolvePath\">resolvePath</a></li>                            <li data-name=\"Root#setOption\"><a href=\"Root.html#setOption\">setOption</a></li>                            <li data-name=\"Root#setOptions\"><a href=\"Root.html#setOptions\">setOptions</a></li>                            <li data-name=\"Root#toJSON\"><a href=\"Root.html#toJSON\">toJSON</a></li>                            <li data-name=\"Root#toString\"><a href=\"Root.html#toString\">toString</a></li>                        </ul>            <ul class=\"events itemMembers\">                        </ul>        </li>            <li class=\"item\" data-name=\"rpc.Service\">            <span class=\"title\">                <a href=\"rpc.Service.html\">rpc.Service</a>                            </span>            <ul class=\"members itemMembers\">                        <span class=\"subtitle\">Members</span>                            <li data-name=\"rpc.Service#requestDelimited\"><a href=\"rpc.Service.html#requestDelimited\">requestDelimited</a></li>                            <li data-name=\"rpc.Service#responseDelimited\"><a href=\"rpc.Service.html#responseDelimited\">responseDelimited</a></li>                            <li data-name=\"rpc.Service#rpcImpl\"><a href=\"rpc.Service.html#rpcImpl\">rpcImpl</a></li>                        </ul>            <ul class=\"typedefs itemMembers\">                        </ul>            <ul class=\"methods itemMembers\">                        <span class=\"subtitle\">Methods</span>                            <li data-name=\"rpc.Service#emit\"><a href=\"rpc.Service.html#emit\">emit</a></li>                            <li data-name=\"rpc.Service#end\"><a href=\"rpc.Service.html#end\">end</a></li>                            <li data-name=\"rpc.Service#off\"><a href=\"rpc.Service.html#off\">off</a></li>                            <li data-name=\"rpc.Service#on\"><a href=\"rpc.Service.html#on\">on</a></li>                            <li data-name=\"rpc.Service#rpcCall\"><a href=\"rpc.Service.html#rpcCall\">rpcCall</a></li>                        </ul>            <ul class=\"events itemMembers\">                        </ul>        </li>            <li class=\"item\" data-name=\"Service\">            <span class=\"title\">                <a href=\"Service.html\">Service</a>                            </span>            <ul class=\"members itemMembers\">                        <span class=\"subtitle\">Members</span>                            <li data-name=\"Service#comment\"><a href=\"Service.html#comment\">comment</a></li>                            <li data-name=\"Service#filename\"><a href=\"Service.html#filename\">filename</a></li>                            <li data-name=\"Service#fullName\"><a href=\"Service.html#fullName\">fullName</a></li>                            <li data-name=\"Service#methods\"><a href=\"Service.html#methods\">methods</a></li>                            <li data-name=\"Service#methodsArray\"><a href=\"Service.html#methodsArray\">methodsArray</a></li>                            <li data-name=\"Service#name\"><a href=\"Service.html#name\">name</a></li>                            <li data-name=\"Service#nested\"><a href=\"Service.html#nested\">nested</a></li>                            <li data-name=\"Service#nestedArray\"><a href=\"Service.html#nestedArray\">nestedArray</a></li>                            <li data-name=\"Service#options\"><a href=\"Service.html#options\">options</a></li>                            <li data-name=\"Service#parent\"><a href=\"Service.html#parent\">parent</a></li>                            <li data-name=\"Service#resolved\"><a href=\"Service.html#resolved\">resolved</a></li>                            <li data-name=\"Service#root\"><a href=\"Service.html#root\">root</a></li>                        </ul>            <ul class=\"typedefs itemMembers\">                        </ul>            <ul class=\"methods itemMembers\">                        <span class=\"subtitle\">Methods</span>                            <li data-name=\"Service.fromJSON\"><a href=\"Service.html#.fromJSON\">fromJSON</a></li>                            <li data-name=\"Service#add\"><a href=\"Service.html#add\">add</a></li>                            <li data-name=\"Service#addJSON\"><a href=\"Service.html#addJSON\">addJSON</a></li>                            <li data-name=\"Service#create\"><a href=\"Service.html#create\">create</a></li>                            <li data-name=\"Service#define\"><a href=\"Service.html#define\">define</a></li>                            <li data-name=\"Service#get\"><a href=\"Service.html#get\">get</a></li>                            <li data-name=\"Service#getEnum\"><a href=\"Service.html#getEnum\">getEnum</a></li>                            <li data-name=\"Service#getOption\"><a href=\"Service.html#getOption\">getOption</a></li>                            <li data-name=\"Service#lookup\"><a href=\"Service.html#lookup\">lookup</a></li>                            <li data-name=\"Service#lookup(2)\"><a href=\"Service.html#lookup2\">lookup</a></li>                            <li data-name=\"Service#lookupEnum\"><a href=\"Service.html#lookupEnum\">lookupEnum</a></li>                            <li data-name=\"Service#lookupService\"><a href=\"Service.html#lookupService\">lookupService</a></li>                            <li data-name=\"Service#lookupType\"><a href=\"Service.html#lookupType\">lookupType</a></li>                            <li data-name=\"Service#lookupTypeOrEnum\"><a href=\"Service.html#lookupTypeOrEnum\">lookupTypeOrEnum</a></li>                            <li data-name=\"Service#onAdd\"><a href=\"Service.html#onAdd\">onAdd</a></li>                            <li data-name=\"Service#onRemove\"><a href=\"Service.html#onRemove\">onRemove</a></li>                            <li data-name=\"Service#remove\"><a href=\"Service.html#remove\">remove</a></li>                            <li data-name=\"Service#resolve\"><a href=\"Service.html#resolve\">resolve</a></li>                            <li data-name=\"Service#resolveAll\"><a href=\"Service.html#resolveAll\">resolveAll</a></li>                            <li data-name=\"Service#setOption\"><a href=\"Service.html#setOption\">setOption</a></li>                            <li data-name=\"Service#setOptions\"><a href=\"Service.html#setOptions\">setOptions</a></li>                            <li data-name=\"Service#toJSON\"><a href=\"Service.html#toJSON\">toJSON</a></li>                            <li data-name=\"Service#toString\"><a href=\"Service.html#toString\">toString</a></li>                        </ul>            <ul class=\"events itemMembers\">                        </ul>        </li>            <li class=\"item\" data-name=\"Type\">            <span class=\"title\">                <a href=\"Type.html\">Type</a>                            </span>            <ul class=\"members itemMembers\">                        <span class=\"subtitle\">Members</span>                            <li data-name=\"Type#comment\"><a href=\"Type.html#comment\">comment</a></li>                            <li data-name=\"Type#ctor\"><a href=\"Type.html#ctor\">ctor</a></li>                            <li data-name=\"Type#extensions\"><a href=\"Type.html#extensions\">extensions</a></li>                            <li data-name=\"Type#fields\"><a href=\"Type.html#fields\">fields</a></li>                            <li data-name=\"Type#fieldsArray\"><a href=\"Type.html#fieldsArray\">fieldsArray</a></li>                            <li data-name=\"Type#fieldsById\"><a href=\"Type.html#fieldsById\">fieldsById</a></li>                            <li data-name=\"Type#filename\"><a href=\"Type.html#filename\">filename</a></li>                            <li data-name=\"Type#fullName\"><a href=\"Type.html#fullName\">fullName</a></li>                            <li data-name=\"Type#name\"><a href=\"Type.html#name\">name</a></li>                            <li data-name=\"Type#nested\"><a href=\"Type.html#nested\">nested</a></li>                            <li data-name=\"Type#nestedArray\"><a href=\"Type.html#nestedArray\">nestedArray</a></li>                            <li data-name=\"Type#oneofs\"><a href=\"Type.html#oneofs\">oneofs</a></li>                            <li data-name=\"Type#oneofsArray\"><a href=\"Type.html#oneofsArray\">oneofsArray</a></li>                            <li data-name=\"Type#options\"><a href=\"Type.html#options\">options</a></li>                            <li data-name=\"Type#parent\"><a href=\"Type.html#parent\">parent</a></li>                            <li data-name=\"Type#reserved\"><a href=\"Type.html#reserved\">reserved</a></li>                            <li data-name=\"Type#resolved\"><a href=\"Type.html#resolved\">resolved</a></li>                            <li data-name=\"Type#root\"><a href=\"Type.html#root\">root</a></li>                        </ul>            <ul class=\"typedefs itemMembers\">                        </ul>            <ul class=\"methods itemMembers\">                        <span class=\"subtitle\">Methods</span>                            <li data-name=\"Type.d\"><a href=\"Type.html#.d\">d</a></li>                            <li data-name=\"Type.fromJSON\"><a href=\"Type.html#.fromJSON\">fromJSON</a></li>                            <li data-name=\"Type.generateConstructor\"><a href=\"Type.html#.generateConstructor\">generateConstructor</a></li>                            <li data-name=\"Type#add\"><a href=\"Type.html#add\">add</a></li>                            <li data-name=\"Type#addJSON\"><a href=\"Type.html#addJSON\">addJSON</a></li>                            <li data-name=\"Type#create\"><a href=\"Type.html#create\">create</a></li>                            <li data-name=\"Type#decode\"><a href=\"Type.html#decode\">decode</a></li>                            <li data-name=\"Type#decodeDelimited\"><a href=\"Type.html#decodeDelimited\">decodeDelimited</a></li>                            <li data-name=\"Type#define\"><a href=\"Type.html#define\">define</a></li>                            <li data-name=\"Type#encode\"><a href=\"Type.html#encode\">encode</a></li>                            <li data-name=\"Type#encodeDelimited\"><a href=\"Type.html#encodeDelimited\">encodeDelimited</a></li>                            <li data-name=\"Type#fromObject\"><a href=\"Type.html#fromObject\">fromObject</a></li>                            <li data-name=\"Type#get\"><a href=\"Type.html#get\">get</a></li>                            <li data-name=\"Type#getEnum\"><a href=\"Type.html#getEnum\">getEnum</a></li>                            <li data-name=\"Type#getOption\"><a href=\"Type.html#getOption\">getOption</a></li>                            <li data-name=\"Type#isReservedId\"><a href=\"Type.html#isReservedId\">isReservedId</a></li>                            <li data-name=\"Type#isReservedName\"><a href=\"Type.html#isReservedName\">isReservedName</a></li>                            <li data-name=\"Type#lookup\"><a href=\"Type.html#lookup\">lookup</a></li>                            <li data-name=\"Type#lookup(2)\"><a href=\"Type.html#lookup2\">lookup</a></li>                            <li data-name=\"Type#lookupEnum\"><a href=\"Type.html#lookupEnum\">lookupEnum</a></li>                            <li data-name=\"Type#lookupService\"><a href=\"Type.html#lookupService\">lookupService</a></li>                            <li data-name=\"Type#lookupType\"><a href=\"Type.html#lookupType\">lookupType</a></li>                            <li data-name=\"Type#lookupTypeOrEnum\"><a href=\"Type.html#lookupTypeOrEnum\">lookupTypeOrEnum</a></li>                            <li data-name=\"Type#onAdd\"><a href=\"Type.html#onAdd\">onAdd</a></li>                            <li data-name=\"Type#onRemove\"><a href=\"Type.html#onRemove\">onRemove</a></li>                            <li data-name=\"Type#remove\"><a href=\"Type.html#remove\">remove</a></li>                            <li data-name=\"Type#resolve\"><a href=\"Type.html#resolve\">resolve</a></li>                            <li data-name=\"Type#resolveAll\"><a href=\"Type.html#resolveAll\">resolveAll</a></li>                            <li data-name=\"Type#setOption\"><a href=\"Type.html#setOption\">setOption</a></li>                            <li data-name=\"Type#setOptions\"><a href=\"Type.html#setOptions\">setOptions</a></li>                            <li data-name=\"Type#setup\"><a href=\"Type.html#setup\">setup</a></li>                            <li data-name=\"Type#toJSON\"><a href=\"Type.html#toJSON\">toJSON</a></li>                            <li data-name=\"Type#toObject\"><a href=\"Type.html#toObject\">toObject</a></li>                            <li data-name=\"Type#toString\"><a href=\"Type.html#toString\">toString</a></li>                            <li data-name=\"Type#verify\"><a href=\"Type.html#verify\">verify</a></li>                        </ul>            <ul class=\"events itemMembers\">                        </ul>        </li>            <li class=\"item\" data-name=\"util.EventEmitter\">            <span class=\"title\">                <a href=\"util.EventEmitter.html\">util.EventEmitter</a>                            </span>            <ul class=\"members itemMembers\">                        </ul>            <ul class=\"typedefs itemMembers\">                        </ul>            <ul class=\"methods itemMembers\">                        <span class=\"subtitle\">Methods</span>                            <li data-name=\"util.EventEmitter#emit\"><a href=\"util.EventEmitter.html#emit\">emit</a></li>                            <li data-name=\"util.EventEmitter#off\"><a href=\"util.EventEmitter.html#off\">off</a></li>                            <li data-name=\"util.EventEmitter#on\"><a href=\"util.EventEmitter.html#on\">on</a></li>                        </ul>            <ul class=\"events itemMembers\">                        </ul>        </li>            <li class=\"item\" data-name=\"util.LongBits\">            <span class=\"title\">                <a href=\"util.LongBits.html\">util.LongBits</a>                            </span>            <ul class=\"members itemMembers\">                        <span class=\"subtitle\">Members</span>                            <li data-name=\"util.LongBits.zero\"><a href=\"util.LongBits.html#.zero\">zero</a></li>                            <li data-name=\"util.LongBits.zeroHash\"><a href=\"util.LongBits.html#.zeroHash\">zeroHash</a></li>                            <li data-name=\"util.LongBits#hi\"><a href=\"util.LongBits.html#hi\">hi</a></li>                            <li data-name=\"util.LongBits#lo\"><a href=\"util.LongBits.html#lo\">lo</a></li>                        </ul>            <ul class=\"typedefs itemMembers\">                        </ul>            <ul class=\"methods itemMembers\">                        <span class=\"subtitle\">Methods</span>                            <li data-name=\"util.LongBits.from\"><a href=\"util.LongBits.html#.from\">from</a></li>                            <li data-name=\"util.LongBits.fromHash\"><a href=\"util.LongBits.html#.fromHash\">fromHash</a></li>                            <li data-name=\"util.LongBits.fromNumber\"><a href=\"util.LongBits.html#.fromNumber\">fromNumber</a></li>                            <li data-name=\"util.LongBits#length\"><a href=\"util.LongBits.html#length\">length</a></li>                            <li data-name=\"util.LongBits#toHash\"><a href=\"util.LongBits.html#toHash\">toHash</a></li>                            <li data-name=\"util.LongBits#toLong\"><a href=\"util.LongBits.html#toLong\">toLong</a></li>                            <li data-name=\"util.LongBits#toNumber\"><a href=\"util.LongBits.html#toNumber\">toNumber</a></li>                            <li data-name=\"util.LongBits#zzDecode\"><a href=\"util.LongBits.html#zzDecode\">zzDecode</a></li>                            <li data-name=\"util.LongBits#zzEncode\"><a href=\"util.LongBits.html#zzEncode\">zzEncode</a></li>                        </ul>            <ul class=\"events itemMembers\">                        </ul>        </li>            <li class=\"item\" data-name=\"util.ProtocolError\">            <span class=\"title\">                <a href=\"util.ProtocolError.html\">util.ProtocolError</a>                            </span>            <ul class=\"members itemMembers\">                        <span class=\"subtitle\">Members</span>                            <li data-name=\"util.ProtocolError#instance\"><a href=\"util.ProtocolError.html#instance\">instance</a></li>                        </ul>            <ul class=\"typedefs itemMembers\">                        </ul>            <ul class=\"methods itemMembers\">                        </ul>            <ul class=\"events itemMembers\">                        </ul>        </li>            <li class=\"item\" data-name=\"Writer\">            <span class=\"title\">                <a href=\"Writer.html\">Writer</a>                            </span>            <ul class=\"members itemMembers\">                        <span class=\"subtitle\">Members</span>                            <li data-name=\"Writer#head\"><a href=\"Writer.html#head\">head</a></li>                            <li data-name=\"Writer#len\"><a href=\"Writer.html#len\">len</a></li>                            <li data-name=\"Writer#states\"><a href=\"Writer.html#states\">states</a></li>                            <li data-name=\"Writer#tail\"><a href=\"Writer.html#tail\">tail</a></li>                        </ul>            <ul class=\"typedefs itemMembers\">                        </ul>            <ul class=\"methods itemMembers\">                        <span class=\"subtitle\">Methods</span>                            <li data-name=\"Writer.alloc\"><a href=\"Writer.html#.alloc\">alloc</a></li>                            <li data-name=\"Writer.create\"><a href=\"Writer.html#.create\">create</a></li>                            <li data-name=\"Writer#bool\"><a href=\"Writer.html#bool\">bool</a></li>                            <li data-name=\"Writer#bytes\"><a href=\"Writer.html#bytes\">bytes</a></li>                            <li data-name=\"Writer#double\"><a href=\"Writer.html#double\">double</a></li>                            <li data-name=\"Writer#finish\"><a href=\"Writer.html#finish\">finish</a></li>                            <li data-name=\"Writer#fixed32\"><a href=\"Writer.html#fixed32\">fixed32</a></li>                            <li data-name=\"Writer#fixed64\"><a href=\"Writer.html#fixed64\">fixed64</a></li>                            <li data-name=\"Writer#float\"><a href=\"Writer.html#float\">float</a></li>                            <li data-name=\"Writer#fork\"><a href=\"Writer.html#fork\">fork</a></li>                            <li data-name=\"Writer#int32\"><a href=\"Writer.html#int32\">int32</a></li>                            <li data-name=\"Writer#int64\"><a href=\"Writer.html#int64\">int64</a></li>                            <li data-name=\"Writer#ldelim\"><a href=\"Writer.html#ldelim\">ldelim</a></li>                            <li data-name=\"Writer#reset\"><a href=\"Writer.html#reset\">reset</a></li>                            <li data-name=\"Writer#sfixed32\"><a href=\"Writer.html#sfixed32\">sfixed32</a></li>                            <li data-name=\"Writer#sfixed64\"><a href=\"Writer.html#sfixed64\">sfixed64</a></li>                            <li data-name=\"Writer#sint32\"><a href=\"Writer.html#sint32\">sint32</a></li>                            <li data-name=\"Writer#sint64\"><a href=\"Writer.html#sint64\">sint64</a></li>                            <li data-name=\"Writer#string\"><a href=\"Writer.html#string\">string</a></li>                            <li data-name=\"Writer#uint32\"><a href=\"Writer.html#uint32\">uint32</a></li>                            <li data-name=\"Writer#uint64\"><a href=\"Writer.html#uint64\">uint64</a></li>                        </ul>            <ul class=\"events itemMembers\">                        </ul>        </li>        </ul></div>    <div class=\"main\">        <h1 class=\"page-title\" data-filename=\"index.html\">Index</h1>                <h3> </h3>        <a target=\"_blank\" href=\"https://github.com/dcodeIO/protobuf.js\" style=\"position: fixed; top: 0; right: 0\"><img src=\"images/forkme.png\" /></a>    <section>        <article class=\"readme\"><p><h1><p align=\"center\"><img alt=\"protobuf.js\" src=\"https://github.com/dcodeIO/protobuf.js/raw/master/pbjs.png\" width=\"120\" height=\"104\" /></p></h1></p><p align=\"center\"><a target=\"_blank\" href=\"https://npmjs.org/package/protobufjs\"><img src=\"https://img.shields.io/npm/v/protobufjs.svg\" alt=\"\"></a> <a target=\"_blank\" href=\"https://travis-ci.org/dcodeIO/protobuf.js\"><img src=\"https://travis-ci.org/dcodeIO/protobuf.js.svg?branch=master\" alt=\"\"></a> <a target=\"_blank\" href=\"https://codeclimate.com/github/dcodeIO/protobuf.js/coverage\"><img src=\"https://codeclimate.com/github/dcodeIO/protobuf.js/badges/coverage.svg\" /></a> <a target=\"_blank\" href=\"https://npmjs.org/package/protobufjs\"><img src=\"https://img.shields.io/npm/dm/protobufjs.svg\" alt=\"\"></a> <a target=\"_blank\" href=\"https://www.paypal.com/cgi-bin/webscr?cmd=_donations&business=dcode%40dcode.io&item_name=Open%20Source%20Software%20Donation&item_number=dcodeIO%2Fprotobuf.js\"><img alt=\"donate \u2764\" src=\"https://img.shields.io/badge/donate-\u2764-ff2244.svg\"></a></p><p><strong>Protocol Buffers</strong> are a language-neutral, platform-neutral, extensible way of serializing structured data for use in communications protocols, data storage, and more, originally designed at Google (<a target=\"_blank\" href=\"https://developers.google.com/protocol-buffers/\">see</a>).</p><p><strong>protobuf.js</strong> is a pure JavaScript implementation with <a target=\"_blank\" href=\"https://www.typescriptlang.org\">TypeScript</a> support for <a target=\"_blank\" href=\"https://nodejs.org\">node.js</a> and the browser. It's easy to use, blazingly fast and works out of the box with <a target=\"_blank\" href=\"https://developers.google.com/protocol-buffers/docs/proto\">.proto</a> files!</p><h2 id=\"contents\">Contents</h2><ul><li><p><a href=\"#installation\">Installation</a><br /><br>How to include protobuf.js in your project.</p></li><li><p><a href=\"#usage\">Usage</a><br /><br>A brief introduction to using the toolset.</p><ul><li><a href=\"#valid-message\">Valid Message</a></li><li><a href=\"#toolset\">Toolset</a><br /></li></ul></li><li><p><a href=\"#examples\">Examples</a><br /><br>A few examples to get you started.</p><ul><li><a href=\"#using-proto-files\">Using .proto files</a></li><li><a href=\"#using-json-descriptors\">Using JSON descriptors</a></li><li><a href=\"#using-reflection-only\">Using reflection only</a></li><li><a href=\"#using-custom-classes\">Using custom classes</a></li><li><a href=\"#using-services\">Using services</a></li><li><a href=\"#usage-with-typescript\">Usage with TypeScript</a><br /></li></ul></li><li><p><a href=\"#command-line\">Command line</a><br /><br>How to use the command line utility.</p><ul><li><a href=\"#pbjs-for-javascript\">pbjs for JavaScript</a></li><li><a href=\"#pbts-for-typescript\">pbts for TypeScript</a></li><li><a href=\"#reflection-vs-static-code\">Reflection vs. static code</a></li><li><a href=\"#command-line-api\">Command line API</a><br /></li></ul></li><li><p><a href=\"#additional-documentation\">Additional documentation</a><br /><br>A list of available documentation resources.</p></li><li><p><a href=\"#performance\">Performance</a><br /><br>A few internals and a benchmark on performance.</p></li><li><p><a href=\"#compatibility\">Compatibility</a><br /><br>Notes on compatibility regarding browsers and optional libraries.</p></li><li><p><a href=\"#building\">Building</a><br /><br>How to build the library and its components yourself.</p></li></ul><h2 id=\"installation\">Installation</h2><h3 id=\"node-js\">node.js</h3><pre class=\"prettyprint source\"><code>$> npm install protobufjs [--save --save-prefix=~]</code></pre><pre class=\"prettyprint source lang-js\"><code>var protobuf = require(&quot;protobufjs&quot;);</code></pre><p><strong>Note</strong> that this library's versioning scheme is not semver-compatible for historical reasons. For guaranteed backward compatibility, always depend on <code>~6.A.B</code> instead of <code>^6.A.B</code> (hence the <code>--save-prefix</code> above).</p><h3 id=\"browsers\">Browsers</h3><p>Development:</p><pre class=\"prettyprint source\"><code>&lt;script src=&quot;//cdn.rawgit.com/dcodeIO/protobuf.js/6.X.X/dist/protobuf.js&quot;>&lt;/script></code></pre><p>Production:</p><pre class=\"prettyprint source\"><code>&lt;script src=&quot;//cdn.rawgit.com/dcodeIO/protobuf.js/6.X.X/dist/protobuf.min.js&quot;>&lt;/script></code></pre><p><strong>Remember</strong> to replace the version tag with the exact <a target=\"_blank\" href=\"https://github.com/dcodeIO/protobuf.js/tags\">release</a> your project depends upon.</p><p>The library supports CommonJS and AMD loaders and also exports globally as <code>protobuf</code>.</p><h3 id=\"distributions\">Distributions</h3><p>Where bundle size is a factor, there are additional stripped-down versions of the <a target=\"_blank\" href=\"https://github.com/dcodeIO/protobuf.js/tree/master/dist\">full library</a> (~19kb gzipped) available that exclude certain functionality:</p><ul><li><p>When working with JSON descriptors (i.e. generated by <a href=\"#pbjs-for-javascript\">pbjs</a>) and/or reflection only, see the <a target=\"_blank\" href=\"https://github.com/dcodeIO/protobuf.js/tree/master/dist/light\">light library</a> (~16kb gzipped) that excludes the parser. CommonJS entry point is:</p><pre class=\"prettyprint source lang-js\"><code>var protobuf = require(&quot;protobufjs/light&quot;);</code></pre></li><li><p>When working with statically generated code only, see the <a target=\"_blank\" href=\"https://github.com/dcodeIO/protobuf.js/tree/master/dist/minimal\">minimal library</a> (~6.5kb gzipped) that also excludes reflection. CommonJS entry point is:</p><pre class=\"prettyprint source lang-js\"><code>var protobuf = require(&quot;protobufjs/minimal&quot;);</code></pre></li></ul><h2 id=\"usage\">Usage</h2><p>Because JavaScript is a dynamically typed language, protobuf.js introduces the concept of a <strong>valid message</strong> in order to provide the best possible <a href=\"#performance\">performance</a> (and, as a side product, proper typings):</p><h3 id=\"valid-message\">Valid message</h3><blockquote><p>A valid message is an object (1) not missing any required fields and (2) exclusively composed of JS types understood by the wire format writer.</p></blockquote><p>There are two possible types of valid messages and the encoder is able to work with both of these for convenience:</p><ul><li><strong>Message instances</strong> (explicit instances of message classes with default values on their prototype) always (have to) satisfy the requirements of a valid message by design and</li><li><strong>Plain JavaScript objects</strong> that just so happen to be composed in a way satisfying the requirements of a valid message as well.</li></ul><p>In a nutshell, the wire format writer understands the following types:</p><table><thead><tr><th>Field type</th><th>Expected JS type (create, encode)</th><th>Conversion (fromObject)</th></tr></thead><tbody><tr><td>s-/u-/int32<br />s-/fixed32</td><td><code>number</code> (32 bit integer)</td><td><code>value &#124; 0</code> if signed<br /><code>value &gt;&gt;&gt; 0</code> if unsigned</td></tr><tr><td>s-/u-/int64<br />s-/fixed64</td><td><code>Long</code>-like (optimal)<br /><code>number</code> (53 bit integer)</td><td><code>Long.fromValue(value)</code> with long.js<br /><code>parseInt(value, 10)</code> otherwise</td></tr><tr><td>float<br />double</td><td><code>number</code></td><td><code>Number(value)</code></td></tr><tr><td>bool</td><td><code>boolean</code></td><td><code>Boolean(value)</code></td></tr><tr><td>string</td><td><code>string</code></td><td><code>String(value)</code></td></tr><tr><td>bytes</td><td><code>Uint8Array</code> (optimal)<br /><code>Buffer</code> (optimal under node)<br /><code>Array.&lt;number&gt;</code> (8 bit integers)</td><td><code>base64.decode(value)</code> if a <code>string</code><br /><code>Object</code> with non-zero <code>.length</code> is assumed to be buffer-like</td></tr><tr><td>enum</td><td><code>number</code> (32 bit integer)</td><td>Looks up the numeric id if a <code>string</code></td></tr><tr><td>message</td><td>Valid message</td><td><code>Message.fromObject(value)</code></td></tr></tbody></table><ul><li>Explicit <code>undefined</code> and <code>null</code> are considered as not set if the field is optional.</li><li>Repeated fields are <code>Array.&lt;T&gt;</code>.</li><li>Map fields are <code>Object.&lt;string,T&gt;</code> with the key being the string representation of the respective value or an 8 characters long binary hash string for <code>Long</code>-likes.</li><li>Types marked as <em>optimal</em> provide the best performance because no conversion step (i.e. number to low and high bits or base64 string to buffer) is required.</li></ul><h3 id=\"toolset\">Toolset</h3><p>With that in mind and again for performance reasons, each message class provides a distinct set of methods with each method doing just one thing. This avoids unnecessary assertions / redundant operations where performance is a concern but also forces a user to perform verification (of plain JavaScript objects that <em>might</em> just so happen to be a valid message) explicitly where necessary - for example when dealing with user input.</p><p><strong>Note</strong> that <code>Message</code> below refers to any message class.</p><ul><li><p><strong>Message.verify</strong>(message: <code>Object</code>): <code>null|string</code><br /><br>verifies that a <strong>plain JavaScript object</strong> satisfies the requirements of a valid message and thus can be encoded without issues. Instead of throwing, it returns the error message as a string, if any.</p><pre class=\"prettyprint source lang-js\"><code>var payload = &quot;invalid (not an object)&quot;;var err = AwesomeMessage.verify(payload);if (err)  throw Error(err);</code></pre></li><li><p><strong>Message.encode</strong>(message: <code>Message|Object</code> [, writer: <code>Writer</code>]): <code>Writer</code><br /><br>encodes a <strong>message instance</strong> or valid <strong>plain JavaScript object</strong>. This method does not implicitly verify the message and it's up to the user to make sure that the payload is a valid message.</p><pre class=\"prettyprint source lang-js\"><code>var buffer = AwesomeMessage.encode(message).finish();</code></pre></li><li><p><strong>Message.encodeDelimited</strong>(message: <code>Message|Object</code> [, writer: <code>Writer</code>]): <code>Writer</code><br /><br>works like <code>Message.encode</code> but additionally prepends the length of the message as a varint.</p></li><li><p><strong>Message.decode</strong>(reader: <code>Reader|Uint8Array</code>): <code>Message</code><br /><br>decodes a buffer to a <strong>message instance</strong>. If required fields are missing, it throws a <code>util.ProtocolError</code> with an <code>instance</code> property set to the so far decoded message. If the wire format is invalid, it throws an <code>Error</code>.</p><pre class=\"prettyprint source lang-js\"><code>try {  var decodedMessage = AwesomeMessage.decode(buffer);} catch (e) {    if (e instanceof protobuf.util.ProtocolError) {      // e.instance holds the so far decoded message with missing required fields    } else {      // wire format is invalid    }}</code></pre></li><li><p><strong>Message.decodeDelimited</strong>(reader: <code>Reader|Uint8Array</code>): <code>Message</code><br /><br>works like <code>Message.decode</code> but additionally reads the length of the message prepended as a varint.</p></li><li><p><strong>Message.create</strong>(properties: <code>Object</code>): <code>Message</code><br /><br>creates a new <strong>message instance</strong> from a set of properties that satisfy the requirements of a valid message. Where applicable, it is recommended to prefer <code>Message.create</code> over <code>Message.fromObject</code> because it doesn't perform possibly redundant conversion.</p><pre class=\"prettyprint source lang-js\"><code>var message = AwesomeMessage.create({ awesomeField: &quot;AwesomeString&quot; });</code></pre></li><li><p><strong>Message.fromObject</strong>(object: <code>Object</code>): <code>Message</code><br /><br>converts any non-valid <strong>plain JavaScript object</strong> to a <strong>message instance</strong> using the conversion steps outlined within the table above.</p><pre class=\"prettyprint source lang-js\"><code>var message = AwesomeMessage.fromObject({ awesomeField: 42 });// converts awesomeField to a string</code></pre></li><li><p><strong>Message.toObject</strong>(message: <code>Message</code> [, options: <code>ConversionOptions</code>]): <code>Object</code><br /><br>converts a <strong>message instance</strong> to an arbitrary <strong>plain JavaScript object</strong> for interoperability with other libraries or storage. The resulting plain JavaScript object <em>might</em> still satisfy the requirements of a valid message depending on the actual conversion options specified, but most of the time it does not.</p><pre class=\"prettyprint source lang-js\"><code>var object = AwesomeMessage.toObject(message, {  enums: String,  // enums as string names  longs: String,  // longs as strings (requires long.js)  bytes: String,  // bytes as base64 encoded strings  defaults: true, // includes default values  arrays: true,   // populates empty arrays (repeated fields) even if defaults=false  objects: true,  // populates empty objects (map fields) even if defaults=false  oneofs: true    // includes virtual oneof fields set to the present field's name});</code></pre></li></ul><p>For reference, the following diagram aims to display relationships between the different methods and the concept of a valid message:</p><p align=\"center\"><img alt=\"Toolset Diagram\" src=\"toolset.svg\" /></p><blockquote><p>In other words: <code>verify</code> indicates that calling <code>create</code> or <code>encode</code> directly on the plain object will [result in a valid message respectively] succeed. <code>fromObject</code>, on the other hand, does conversion from a broader range of plain objects to create valid messages. (<a target=\"_blank\" href=\"https://github.com/dcodeIO/protobuf.js/issues/748#issuecomment-291925749\">ref</a>)</p></blockquote><h2 id=\"examples\">Examples</h2><h3 id=\"using-proto-files\">Using .proto files</h3><p>It is possible to load existing .proto files using the full library, which parses and compiles the definitions to ready to use (reflection-based) message classes:</p><pre class=\"prettyprint source lang-protobuf\"><code>// awesome.protopackage awesomepackage;syntax = &quot;proto3&quot;;message AwesomeMessage {    string awesome_field = 1; // becomes awesomeField}</code></pre><pre class=\"prettyprint source lang-js\"><code>protobuf.load(&quot;awesome.proto&quot;, function(err, root) {    if (err)        throw err;    // Obtain a message type    var AwesomeMessage = root.lookupType(&quot;awesomepackage.AwesomeMessage&quot;);    // Exemplary payload    var payload = { awesomeField: &quot;AwesomeString&quot; };    // Verify the payload if necessary (i.e. when possibly incomplete or invalid)    var errMsg = AwesomeMessage.verify(payload);    if (errMsg)        throw Error(errMsg);    // Create a new message    var message = AwesomeMessage.create(payload); // or use .fromObject if conversion is necessary    // Encode a message to an Uint8Array (browser) or Buffer (node)    var buffer = AwesomeMessage.encode(message).finish();    // ... do something with buffer    // Decode an Uint8Array (browser) or Buffer (node) to a message    var message = AwesomeMessage.decode(buffer);    // ... do something with message    // If the application uses length-delimited buffers, there is also encodeDelimited and decodeDelimited.    // Maybe convert the message back to a plain object    var object = AwesomeMessage.toObject(message, {        longs: String,        enums: String,        bytes: String,        // see ConversionOptions    });});</code></pre><p>Additionally, promise syntax can be used by omitting the callback, if preferred:</p><pre class=\"prettyprint source lang-js\"><code>protobuf.load(&quot;awesome.proto&quot;)    .then(function(root) {       ...    });</code></pre><h3 id=\"using-json-descriptors\">Using JSON descriptors</h3><p>The library utilizes JSON descriptors that are equivalent to a .proto definition. For example, the following is identical to the .proto definition seen above:</p><pre class=\"prettyprint source lang-json\"><code>// awesome.json{  &quot;nested&quot;: {    &quot;AwesomeMessage&quot;: {      &quot;fields&quot;: {        &quot;awesomeField&quot;: {          &quot;type&quot;: &quot;string&quot;,          &quot;id&quot;: 1        }      }    }  }}</code></pre><p>JSON descriptors closely resemble the internal reflection structure:</p><table><thead><tr><th>Type (T)</th><th>Extends</th><th>Type-specific properties</th></tr></thead><tbody><tr><td><em>ReflectionObject</em></td><td></td><td>options</td></tr><tr><td><em>Namespace</em></td><td><em>ReflectionObject</em></td><td>nested</td></tr><tr><td>Root</td><td><em>Namespace</em></td><td><strong>nested</strong></td></tr><tr><td>Type</td><td><em>Namespace</em></td><td><strong>fields</strong></td></tr><tr><td>Enum</td><td><em>ReflectionObject</em></td><td><strong>values</strong></td></tr><tr><td>Field</td><td><em>ReflectionObject</em></td><td>rule, <strong>type</strong>, <strong>id</strong></td></tr><tr><td>MapField</td><td>Field</td><td><strong>keyType</strong></td></tr><tr><td>OneOf</td><td><em>ReflectionObject</em></td><td><strong>oneof</strong> (array of field names)</td></tr><tr><td>Service</td><td><em>Namespace</em></td><td><strong>methods</strong></td></tr><tr><td>Method</td><td><em>ReflectionObject</em></td><td>type, <strong>requestType</strong>, <strong>responseType</strong>, requestStream, responseStream</td></tr></tbody></table><ul><li><strong>Bold properties</strong> are required. <em>Italic types</em> are abstract.</li><li><code>T.fromJSON(name, json)</code> creates the respective reflection object from a JSON descriptor</li><li><code>T#toJSON()</code> creates a JSON descriptor from the respective reflection object (its name is used as the key within the parent)</li></ul><p>Exclusively using JSON descriptors instead of .proto files enables the use of just the light library (the parser isn't required in this case).</p><p>A JSON descriptor can either be loaded the usual way:</p><pre class=\"prettyprint source lang-js\"><code>protobuf.load(&quot;awesome.json&quot;, function(err, root) {    if (err) throw err;    // Continue at &quot;Obtain a message type&quot; above});</code></pre><p>Or it can be loaded inline:</p><pre class=\"prettyprint source lang-js\"><code>var jsonDescriptor = require(&quot;./awesome.json&quot;); // exemplary for nodevar root = protobuf.Root.fromJSON(jsonDescriptor);// Continue at &quot;Obtain a message type&quot; above</code></pre><h3 id=\"using-reflection-only\">Using reflection only</h3><p>Both the full and the light library include full reflection support. One could, for example, define the .proto definitions seen in the examples above using just reflection:</p><pre class=\"prettyprint source lang-js\"><code>...var Root  = protobuf.Root,    Type  = protobuf.Type,    Field = protobuf.Field;var AwesomeMessage = new Type(&quot;AwesomeMessage&quot;).add(new Field(&quot;awesomeField&quot;, 1, &quot;string&quot;));var root = new Root().define(&quot;awesomepackage&quot;).add(AwesomeMessage);// Continue at &quot;Create a new message&quot; above...</code></pre><p>Detailed information on the reflection structure is available within the <a href=\"#additional-documentation\">API documentation</a>.</p><h3 id=\"using-custom-classes\">Using custom classes</h3><p>Message classes can also be extended with custom functionality and it is also possible to register a custom constructor with a reflected message type:</p><pre class=\"prettyprint source lang-js\"><code>...// Define a custom constructorfunction AwesomeMessage(properties) {    // custom initialization code    ...}// Register the custom constructor with its reflected type (*)root.lookupType(&quot;awesomepackage.AwesomeMessage&quot;).ctor = AwesomeMessage;// Define custom functionalityAwesomeMessage.customStaticMethod = function() { ... };AwesomeMessage.prototype.customInstanceMethod = function() { ... };// Continue at &quot;Create a new message&quot; above</code></pre><p>(*) Besides referencing its reflected type through <code>AwesomeMessage.$type</code> and <code>AwesomeMesage#$type</code>, the respective custom class is automatically populated with:</p><ul><li><code>AwesomeMessage.create</code></li><li><code>AwesomeMessage.encode</code> and <code>AwesomeMessage.encodeDelimited</code></li><li><code>AwesomeMessage.decode</code> and <code>AwesomeMessage.decodeDelimited</code></li><li><code>AwesomeMessage.verify</code></li><li><code>AwesomeMessage.fromObject</code>, <code>AwesomeMessage.toObject</code>, <code>AwesomeMessage#toObject</code> and <code>AwesomeMessage#toJSON</code></li></ul><p>Afterwards, decoded messages of this type are <code>instanceof AwesomeMessage</code>.</p><p>Alternatively, it is also possible to reuse and extend the internal constructor if custom initialization code is not required:</p><pre class=\"prettyprint source lang-js\"><code>...// Reuse the internal constructorvar AwesomeMessage = root.lookupType(&quot;awesomepackage.AwesomeMessage&quot;).ctor;// Define custom functionalityAwesomeMessage.customStaticMethod = function() { ... };AwesomeMessage.prototype.customInstanceMethod = function() { ... };// Continue at &quot;Create a new message&quot; above</code></pre><h3 id=\"using-services\">Using services</h3><p>The library also supports consuming services but it doesn't make any assumptions about the actual transport channel. Instead, a user must provide a suitable RPC implementation, which is an asynchronous function that takes the reflected service method, the binary request and a node-style callback as its parameters:</p><pre class=\"prettyprint source lang-js\"><code>function rpcImpl(method, requestData, callback) {    // perform the request using an HTTP request or a WebSocket for example    var responseData = ...;    // and call the callback with the binary response afterwards:    callback(null, responseData);}</code></pre><p>Example:</p><pre class=\"prettyprint source lang-protobuf\"><code>// greeter.protosyntax = &quot;proto3&quot;;service Greeter {    rpc SayHello (HelloRequest) returns (HelloReply) {}}message HelloRequest {    string name = 1;}message HelloReply {    string message = 1;}</code></pre><pre class=\"prettyprint source lang-js\"><code>...var Greeter = root.lookup(&quot;Greeter&quot;);var greeter = Greeter.create(/* see above */ rpcImpl, /* request delimited? */ false, /* response delimited? */ false);greeter.sayHello({ name: 'you' }, function(err, response) {    console.log('Greeting:', response.message);});</code></pre><p>Services also support promises:</p><pre class=\"prettyprint source lang-js\"><code>greeter.sayHello({ name: 'you' })    .then(function(response) {        console.log('Greeting:', response.message);    });</code></pre><p>There is also an <a target=\"_blank\" href=\"https://github.com/dcodeIO/protobuf.js/blob/master/examples/streaming-rpc.js\">example for streaming RPC</a>.</p><p>Note that the service API is meant for clients. Implementing a server-side endpoint pretty much always requires transport channel (i.e. http, websocket, etc.) specific code with the only common denominator being that it decodes and encodes messages.</p><h3 id=\"usage-with-typescript\">Usage with TypeScript</h3><p>The library ships with its own <a target=\"_blank\" href=\"https://github.com/dcodeIO/protobuf.js/blob/master/index.d.ts\">type definitions</a> and modern editors like <a target=\"_blank\" href=\"https://code.visualstudio.com/\">Visual Studio Code</a> will automatically detect and use them for code completion.</p><p>The npm package depends on <a target=\"_blank\" href=\"https://www.npmjs.com/package/@types/node\">@types/node</a> because of <code>Buffer</code> and <a target=\"_blank\" href=\"https://www.npmjs.com/package/@types/long\">@types/long</a> because of <code>Long</code>. If you are not building for node and/or not using long.js, it should be safe to exclude them manually.</p><h4 id=\"using-the-js-api\">Using the JS API</h4><p>The API shown above works pretty much the same with TypeScript. However, because everything is typed, accessing fields on instances of dynamically generated message classes requires either using bracket-notation (i.e. <code>message[&quot;awesomeField&quot;]</code>) or explicit casts. Alternatively, it is possible to use a <a href=\"#pbts-for-typescript\">typings file generated for its static counterpart</a>.</p><pre class=\"prettyprint source lang-ts\"><code>import { load } from &quot;protobufjs&quot;; // respectively &quot;./node_modules/protobufjs&quot;load(&quot;awesome.proto&quot;, function(err, root) {  if (err)    throw err;  // example code  const AwesomeMessage = root.lookupType(&quot;awesomepackage.AwesomeMessage&quot;);  let message = AwesomeMessage.create({ awesomeField: &quot;hello&quot; });  console.log(`message = ${JSON.stringify(message)}`);  let buffer = AwesomeMessage.encode(message).finish();  console.log(`buffer = ${Array.prototype.toString.call(buffer)}`);  let decoded = AwesomeMessage.decode(buffer);  console.log(`decoded = ${JSON.stringify(decoded)}`);});</code></pre><h4 id=\"using-generated-static-code\">Using generated static code</h4><p>If you generated static code to <code>bundle.js</code> using the CLI and its type definitions to <code>bundle.d.ts</code>, then you can just do:</p><pre class=\"prettyprint source lang-ts\"><code>import { AwesomeMessage } from &quot;./bundle.js&quot;;// example codelet message = AwesomeMessage.create({ awesomeField: &quot;hello&quot; });let buffer  = AwesomeMessage.encode(message).finish();let decoded = AwesomeMessage.decode(buffer);</code></pre><h4 id=\"using-decorators\">Using decorators</h4><p>The library also includes an early implementation of <a target=\"_blank\" href=\"https://www.typescriptlang.org/docs/handbook/decorators.html\">decorators</a>.</p><p><strong>Note</strong> that decorators are an experimental feature in TypeScript and that declaration order is important depending on the JS target. For example, <code>@Field.d(2, AwesomeArrayMessage)</code> requires that <code>AwesomeArrayMessage</code> has been defined earlier when targeting <code>ES5</code>.</p><pre class=\"prettyprint source lang-ts\"><code>import { Message, Type, Field, OneOf } from &quot;protobufjs/light&quot;; // respectively &quot;./node_modules/protobufjs/light.js&quot;export class AwesomeSubMessage extends Message&lt;AwesomeSubMessage> {  @Field.d(1, &quot;string&quot;)  public awesomeString: string;}export enum AwesomeEnum {  ONE = 1,  TWO = 2}@Type.d(&quot;SuperAwesomeMessage&quot;)export class AwesomeMessage extends Message&lt;AwesomeMessage> {  @Field.d(1, &quot;string&quot;, &quot;optional&quot;, &quot;awesome default string&quot;)  public awesomeField: string;  @Field.d(2, AwesomeSubMessage)  public awesomeSubMessage: AwesomeSubMessage;  @Field.d(3, AwesomeEnum, &quot;optional&quot;, AwesomeEnum.ONE)  public awesomeEnum: AwesomeEnum;  @OneOf.d(&quot;awesomeSubMessage&quot;, &quot;awesomeEnum&quot;)  public which: string;}// example codelet message = new AwesomeMessage({ awesomeField: &quot;hello&quot; });let buffer  = AwesomeMessage.encode(message).finish();let decoded = AwesomeMessage.decode(buffer);</code></pre><p>Supported decorators are:</p><ul><li><p><strong>Type.d(typeName?: <code>string</code>)</strong> &nbsp; <em>(optional)</em><br /><br>annotates a class as a protobuf message type. If <code>typeName</code> is not specified, the constructor's runtime function name is used for the reflected type.</p></li><li><p><strong>Field.d&lt;T&gt;(fieldId: <code>number</code>, fieldType: <code>string | Constructor&lt;T&gt;</code>, fieldRule?: <code>&quot;optional&quot; | &quot;required&quot; | &quot;repeated&quot;</code>, defaultValue?: <code>T</code>)</strong><br /><br>annotates a property as a protobuf field with the specified id and protobuf type.</p></li><li><p><strong>MapField.d&lt;T extends { [key: string]: any }&gt;(fieldId: <code>number</code>, fieldKeyType: <code>string</code>, fieldValueType. <code>string | Constructor&lt;{}&gt;</code>)</strong><br /><br>annotates a property as a protobuf map field with the specified id, protobuf key and value type.</p></li><li><p><strong>OneOf.d&lt;T extends string&gt;(...fieldNames: <code>string[]</code>)</strong><br /><br>annotates a property as a protobuf oneof covering the specified fields.</p></li></ul><p>Other notes:</p><ul><li>Decorated types reside in <code>protobuf.roots[&quot;decorated&quot;]</code> using a flat structure, so no duplicate names.</li><li>Enums are copied to a reflected enum with a generic name on decorator evaluation because referenced enum objects have no runtime name the decorator could use.</li><li>Default values must be specified as arguments to the decorator instead of using a property initializer for proper prototype behavior.</li><li>Property names on decorated classes must not be renamed on compile time (i.e. by a minifier) because decorators just receive the original field name as a string.</li></ul><p><strong>ProTip!</strong> Not as pretty, but you can <a target=\"_blank\" href=\"https://github.com/dcodeIO/protobuf.js/blob/master/examples/js-decorators.js\">use decorators in plain JavaScript</a> as well.</p><h2 id=\"command-line\">Command line</h2><p><strong>Note</strong> that moving the CLI to <a href=\"./cli\">its own package</a> is a work in progress. At the moment, it's still part of the main package.</p><p>The command line interface (CLI) can be used to translate between file formats and to generate static code as well as TypeScript definitions.</p><h3 id=\"pbjs-for-javascript\">pbjs for JavaScript</h3><pre class=\"prettyprint source\"><code>Translates between file formats and generates static code.  -t, --target     Specifies the target format. Also accepts a path to require a custom target.                   json          JSON representation                   json-module   JSON representation as a module                   proto2        Protocol Buffers, Version 2                   proto3        Protocol Buffers, Version 3                   static        Static code without reflection (non-functional on its own)                   static-module Static code without reflection as a module  -p, --path       Adds a directory to the include path.  -o, --out        Saves to a file instead of writing to stdout.  --sparse         Exports only those types referenced from a main file (experimental).  Module targets only:  -w, --wrap       Specifies the wrapper to use. Also accepts a path to require a custom wrapper.                   default   Default wrapper supporting both CommonJS and AMD                   commonjs  CommonJS wrapper                   amd       AMD wrapper                   es6       ES6 wrapper (implies --es6)                   closure   A closure adding to protobuf.roots where protobuf is a global  -r, --root       Specifies an alternative protobuf.roots name.  -l, --lint       Linter configuration. Defaults to protobuf.js-compatible rules:                   eslint-disable block-scoped-var, no-redeclare, no-control-regex, no-prototype-builtins  --es6            Enables ES6 syntax (const/let instead of var)  Proto sources only:  --keep-case      Keeps field casing instead of converting to camel case.  Static targets only:  --no-create      Does not generate create functions used for reflection compatibility.  --no-encode      Does not generate encode functions.  --no-decode      Does not generate decode functions.  --no-verify      Does not generate verify functions.  --no-convert     Does not generate convert functions like from/toObject  --no-delimited   Does not generate delimited encode/decode functions.  --no-beautify    Does not beautify generated code.  --no-comments    Does not output any JSDoc comments.  --force-long     Enfores the use of 'Long' for s-/u-/int64 and s-/fixed64 fields.  --force-message  Enfores the use of message instances instead of plain objects.usage: pbjs [options] file1.proto file2.json ...  (or pipe)  other | pbjs [options] -</code></pre><p>For production environments it is recommended to bundle all your .proto files to a single .json file, which minimizes the number of network requests and avoids any parser overhead (hint: works with just the <strong>light</strong> library):</p><pre class=\"prettyprint source\"><code>$> pbjs -t json file1.proto file2.proto > bundle.json</code></pre><p>Now, either include this file in your final bundle:</p><pre class=\"prettyprint source lang-js\"><code>var root = protobuf.Root.fromJSON(require(&quot;./bundle.json&quot;));</code></pre><p>or load it the usual way:</p><pre class=\"prettyprint source lang-js\"><code>protobuf.load(&quot;bundle.json&quot;, function(err, root) {    ...});</code></pre><p>Generated static code, on the other hand, works with just the <strong>minimal</strong> library. For example</p><pre class=\"prettyprint source\"><code>$> pbjs -t static-module -w commonjs -o compiled.js file1.proto file2.proto</code></pre><p>will generate static code for definitions within <code>file1.proto</code> and <code>file2.proto</code> to a CommonJS module <code>compiled.js</code>.</p><p><strong>ProTip!</strong> Documenting your .proto files with <code>/** ... */</code>-blocks or (trailing) <code>/// ...</code> lines translates to generated static code.</p><h3 id=\"pbts-for-typescript\">pbts for TypeScript</h3><pre class=\"prettyprint source\"><code>Generates TypeScript definitions from annotated JavaScript files.  -o, --out       Saves to a file instead of writing to stdout.  -g, --global    Name of the global object in browser environments, if any.  --no-comments   Does not output any JSDoc comments.  Internal flags:  -n, --name      Wraps everything in a module of the specified name.  -m, --main      Whether building the main library without any imports.usage: pbts [options] file1.js file2.js ...  (or)  other | pbts [options] -</code></pre><p>Picking up on the example above, the following not only generates static code to a CommonJS module <code>compiled.js</code> but also its respective TypeScript definitions to <code>compiled.d.ts</code>:</p><pre class=\"prettyprint source\"><code>$> pbjs -t static-module -w commonjs -o compiled.js file1.proto file2.proto$> pbts -o compiled.d.ts compiled.js</code></pre><p>Additionally, TypeScript definitions of static modules are compatible with their reflection-based counterparts (i.e. as exported by JSON modules), as long as the following conditions are met:</p><ol><li>Instead of using <code>new SomeMessage(...)</code>, always use <code>SomeMessage.create(...)</code> because reflection objects do not provide a constructor.</li><li>Types, services and enums must start with an uppercase letter to become available as properties of the reflected types as well (i.e. to be able to use <code>MyMessage.MyEnum</code> instead of <code>root.lookup(&quot;MyMessage.MyEnum&quot;)</code>).</li></ol><p>For example, the following generates a JSON module <code>bundle.js</code> and a <code>bundle.d.ts</code>, but no static code:</p><pre class=\"prettyprint source\"><code>$> pbjs -t json-module -w commonjs -o bundle.js file1.proto file2.proto$> pbjs -t static-module file1.proto file2.proto | pbts -o bundle.d.ts -</code></pre><h3 id=\"reflection-vs-static-code\">Reflection vs. static code</h3><p>While using .proto files directly requires the full library respectively pure reflection/JSON the light library, pretty much all code but the relatively short descriptors is shared.</p><p>Static code, on the other hand, requires just the minimal library, but generates additional source code without any reflection features. This also implies that there is a break-even point where statically generated code becomes larger than descriptor-based code once the amount of code generated exceeds the size of the full respectively light library.</p><p>There is no significant difference performance-wise as the code generated statically is pretty much the same as generated at runtime and both are largely interchangeable as seen in the previous section.</p><table><thead><tr><th>Source</th><th>Library</th><th>Advantages</th><th>Tradeoffs</th></tr></thead><tbody><tr><td>.proto</td><td>full</td><td>Easily editable<br />Interoperability with other libraries<br />No compile step</td><td>Some parsing and possibly network overhead</td></tr><tr><td>JSON</td><td>light</td><td>Easily editable<br />No parsing overhead<br />Single bundle (no network overhead)</td><td>protobuf.js specific<br />Has a compile step</td></tr><tr><td>static</td><td>minimal</td><td>Works where <code>eval</code> access is restricted<br />Fully documented<br />Small footprint for small protos</td><td>Can be hard to edit<br />No reflection<br />Has a compile step</td></tr></tbody></table><h3 id=\"command-line-api\">Command line API</h3><p>Both utilities can be used programmatically by providing command line arguments and a callback to their respective <code>main</code> functions:</p><pre class=\"prettyprint source lang-js\"><code>var pbjs = require(&quot;protobufjs/cli/pbjs&quot;); // or require(&quot;protobufjs/cli&quot;).pbjs / .pbtspbjs.main([ &quot;--target&quot;, &quot;json-module&quot;, &quot;path/to/myproto.proto&quot; ], function(err, output) {    if (err)        throw err;    // do something with output});</code></pre><h2 id=\"additional-documentation\">Additional documentation</h2><h4 id=\"protocol-buffers\">Protocol Buffers</h4><ul><li><a target=\"_blank\" href=\"https://developers.google.com/protocol-buffers/docs/overview\">Google's Developer Guide</a></li></ul><h4 id=\"protobuf-js\">protobuf.js</h4><ul><li><a target=\"_blank\" href=\"http://dcode.io/protobuf.js\">API Documentation</a></li><li><a target=\"_blank\" href=\"https://github.com/dcodeIO/protobuf.js/blob/master/CHANGELOG.md\">CHANGELOG</a></li><li><a target=\"_blank\" href=\"https://github.com/dcodeIO/protobuf.js/wiki\">Frequently asked questions</a> on our wiki</li></ul><h4 id=\"community\">Community</h4><ul><li><a target=\"_blank\" href=\"http://stackoverflow.com/search?tab=newest&amp;q=protobuf.js\">Questions and answers</a> on StackOverflow</li></ul><h2 id=\"performance\">Performance</h2><p>The package includes a benchmark that compares protobuf.js performance to native JSON (as far as this is possible) and <a target=\"_blank\" href=\"https://github.com/google/protobuf/tree/master/js\">Google's JS implementation</a>. On an i7-2600K running node 6.9.1 it yields:</p><pre class=\"prettyprint source\"><code>benchmarking encoding performance ...protobuf.js (reflect) x 541,707 ops/sec \u00b11.13% (87 runs sampled)protobuf.js (static) x 548,134 ops/sec \u00b11.38% (89 runs sampled)JSON (string) x 318,076 ops/sec \u00b10.63% (93 runs sampled)JSON (buffer) x 179,165 ops/sec \u00b12.26% (91 runs sampled)google-protobuf x 74,406 ops/sec \u00b10.85% (86 runs sampled)   protobuf.js (static) was fastest  protobuf.js (reflect) was 0.9% ops/sec slower (factor 1.0)          JSON (string) was 41.5% ops/sec slower (factor 1.7)          JSON (buffer) was 67.6% ops/sec slower (factor 3.1)        google-protobuf was 86.4% ops/sec slower (factor 7.3)benchmarking decoding performance ...protobuf.js (reflect) x 1,383,981 ops/sec \u00b10.88% (93 runs sampled)protobuf.js (static) x 1,378,925 ops/sec \u00b10.81% (93 runs sampled)JSON (string) x 302,444 ops/sec \u00b10.81% (93 runs sampled)JSON (buffer) x 264,882 ops/sec \u00b10.81% (93 runs sampled)google-protobuf x 179,180 ops/sec \u00b10.64% (94 runs sampled)  protobuf.js (reflect) was fastest   protobuf.js (static) was 0.3% ops/sec slower (factor 1.0)          JSON (string) was 78.1% ops/sec slower (factor 4.6)          JSON (buffer) was 80.8% ops/sec slower (factor 5.2)        google-protobuf was 87.0% ops/sec slower (factor 7.7)benchmarking combined performance ...protobuf.js (reflect) x 275,900 ops/sec \u00b10.78% (90 runs sampled)protobuf.js (static) x 290,096 ops/sec \u00b10.96% (90 runs sampled)JSON (string) x 129,381 ops/sec \u00b10.77% (90 runs sampled)JSON (buffer) x 91,051 ops/sec \u00b10.94% (90 runs sampled)google-protobuf x 42,050 ops/sec \u00b10.85% (91 runs sampled)   protobuf.js (static) was fastest  protobuf.js (reflect) was 4.7% ops/sec slower (factor 1.0)          JSON (string) was 55.3% ops/sec slower (factor 2.2)          JSON (buffer) was 68.6% ops/sec slower (factor 3.2)        google-protobuf was 85.5% ops/sec slower (factor 6.9)</code></pre><p>These results are achieved by</p><ul><li>generating type-specific encoders, decoders, verifiers and converters at runtime</li><li>configuring the reader/writer interface according to the environment</li><li>using node-specific functionality where beneficial and, of course</li><li>avoiding unnecessary operations through splitting up <a href=\"#toolset\">the toolset</a>.</li></ul><p>You can also run <a target=\"_blank\" href=\"https://github.com/dcodeIO/protobuf.js/blob/master/bench/index.js\">the benchmark</a> ...</p><pre class=\"prettyprint source\"><code>$> npm run bench</code></pre><p>and <a target=\"_blank\" href=\"https://github.com/dcodeIO/protobuf.js/blob/master/bench/prof.js\">the profiler</a> yourself (the latter requires a recent version of node):</p><pre class=\"prettyprint source\"><code>$> npm run prof &lt;encode|decode|encode-browser|decode-browser> [iterations=10000000]</code></pre><p>Note that as of this writing, the benchmark suite performs significantly slower on node 7.2.0 compared to 6.9.1 because moths.</p><h2 id=\"compatibility\">Compatibility</h2><ul><li>Works in all modern and not-so-modern browsers except IE8.</li><li>Because the internals of this package do not rely on <code>google/protobuf/descriptor.proto</code>, options are parsed and presented literally.</li><li>If typed arrays are not supported by the environment, plain arrays will be used instead.</li><li>Support for pre-ES5 environments (except IE8) can be achieved by <a target=\"_blank\" href=\"https://github.com/dcodeIO/protobuf.js/blob/master/scripts/polyfill.js\">using a polyfill</a>.</li><li>Support for <a target=\"_blank\" href=\"https://w3c.github.io/webappsec-csp/\">Content Security Policy</a>-restricted environments (like Chrome extensions without <a target=\"_blank\" href=\"https://developer.chrome.com/extensions/contentSecurityPolicy#relaxing-eval\">unsafe-eval</a>) can be achieved by generating and using static code instead.</li><li>If a proper way to work with 64 bit values (uint64, int64 etc.) is required, just install <a target=\"_blank\" href=\"https://github.com/dcodeIO/long.js\">long.js</a> alongside this library. All 64 bit numbers will then be returned as a <code>Long</code> instance instead of a possibly unsafe JavaScript number (<a target=\"_blank\" href=\"https://github.com/dcodeIO/long.js\">see</a>).</li><li>For descriptor.proto interoperability, see <a target=\"_blank\" href=\"https://github.com/dcodeIO/protobuf.js/tree/master/ext/descriptor\">ext/descriptor</a></li></ul><h2 id=\"building\">Building</h2><p>To build the library or its components yourself, clone it from GitHub and install the development dependencies:</p><pre class=\"prettyprint source\"><code>$> git clone https://github.com/dcodeIO/protobuf.js.git$> cd protobuf.js$> npm install</code></pre><p>Building the respective development and production versions with their respective source maps to <code>dist/</code>:</p><pre class=\"prettyprint source\"><code>$> npm run build</code></pre><p>Building the documentation to <code>docs/</code>:</p><pre class=\"prettyprint source\"><code>$> npm run docs</code></pre><p>Building the TypeScript definition to <code>index.d.ts</code>:</p><pre class=\"prettyprint source\"><code>$> npm run types</code></pre><h3 id=\"browserify-integration\">Browserify integration</h3><p>By default, protobuf.js integrates into any browserify build-process without requiring any optional modules. Hence:</p><ul><li><p>If int64 support is required, explicitly require the <code>long</code> module somewhere in your project as it will be excluded otherwise. This assumes that a global <code>require</code> function is present that protobuf.js can call to obtain the long module.</p><p>If there is no global <code>require</code> function present after bundling, it's also possible to assign the long module programmatically:</p><pre class=\"prettyprint source lang-js\"><code>var Long = ...;protobuf.util.Long = Long;protobuf.configure();</code></pre></li><li><p>If you have any special requirements, there is <a target=\"_blank\" href=\"https://github.com/dcodeIO/protobuf.js/blob/master/scripts/bundle.js\">the bundler</a> for reference.</p></li></ul><p><strong>License:</strong> <a target=\"_blank\" href=\"https://opensource.org/licenses/BSD-3-Clause\">BSD 3-Clause License</a></p></article>    </section>            </div></div><script>prettyPrint();</script><script src=\"scripts/linenumber.js\"></script><script src=\"scripts/main.js\"></script></body></html>",
  "embeddings": []
}
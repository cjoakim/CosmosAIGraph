{
  "libtype": "npm",
  "libname": "readdir-enhanced",
  "url": "https://jstools.dev/readdir-enhanced",
  "html": "<!DOCTYPE html><html lang=\"en-US\"><head>  <meta charset='utf-8'>  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">      <!-- Google Analytics -->    <script async src=\"https://www.googletagmanager.com/gtag/js?id=UA-68102273-3\"></script>    <script>      window.dataLayer = window.dataLayer || [];      function gtag(){dataLayer.push(arguments);}      gtag('js', new Date());      gtag('config', 'UA-68102273-3');    </script>    <link rel=\"stylesheet\" href=\"https://jstools.dev/css/style.css?v=1\" media=\"screen\" type=\"text/css\">  <link rel=\"stylesheet\" href=\"https://jstools.dev/css/print.css\" media=\"print\" type=\"text/css\">  <link rel=\"icon\" type=\"image/png\" sizes=\"32x32\" href=\"https://jstools.dev/favicon-32x32.png\">  <link rel=\"icon\" type=\"image/png\" sizes=\"16x16\" href=\"https://jstools.dev/favicon-16x16.png\">  <!--[if lt IE 9]>    <script src=\"//html5shiv.googlecode.com/svn/trunk/html5.js\"></script>  <![endif]--><!-- Begin Jekyll SEO tag v2.6.1 --><title>Enhanced fs.readdir() | Enhanced fs.readdir</title><meta name=\"generator\" content=\"Jekyll v3.8.7\" /><meta property=\"og:title\" content=\"Enhanced fs.readdir()\" /><meta property=\"og:locale\" content=\"en_US\" /><meta name=\"description\" content=\"fs.readdir() with filter, recursion, absolute paths, promises, streams, and more!\" /><meta property=\"og:description\" content=\"fs.readdir() with filter, recursion, absolute paths, promises, streams, and more!\" /><link rel=\"canonical\" href=\"https://jstools.dev/readdir-enhanced/\" /><meta property=\"og:url\" content=\"https://jstools.dev/readdir-enhanced/\" /><meta property=\"og:site_name\" content=\"Enhanced fs.readdir\" /><meta property=\"og:image\" content=\"https://jstools.dev/img/logos/card.png\" /><meta name=\"twitter:card\" content=\"summary\" /><meta property=\"twitter:image\" content=\"https://jstools.dev/img/logos/card.png\" /><meta property=\"twitter:title\" content=\"Enhanced fs.readdir()\" /><meta name=\"twitter:site\" content=\"@JSDevTools\" /><meta name=\"twitter:creator\" content=\"@JSDevTools\" /><script type=\"application/ld+json\">{\"image\":\"https://jstools.dev/img/logos/card.png\",\"@type\":\"WebSite\",\"publisher\":{\"@type\":\"Organization\",\"logo\":{\"@type\":\"ImageObject\",\"url\":\"https://jstools.dev/img/logos/logo.png\"}},\"headline\":\"Enhanced fs.readdir()\",\"url\":\"https://jstools.dev/readdir-enhanced/\",\"description\":\"fs.readdir() with filter, recursion, absolute paths, promises, streams, and more!\",\"name\":\"Enhanced fs.readdir\",\"@context\":\"https://schema.org\"}</script><!-- End Jekyll SEO tag --></head>  <body>    <header>  <div class=\"inner\">    <a href=\"https://jstools.dev/readdir-enhanced/\">      <h1>Enhanced fs.readdir</h1>    </a>    <h2>fs.readdir() with filter, recursion, absolute paths, promises, streams, and more!</h2>    <div class=\"buttons\">      <a href=\"https://jstools.dev/\" class=\"button logo-button\"><span>JavaScript Dev Tools</span></a>              <a href=\"https://github.com/JS-DevTools/readdir-enhanced\" class=\"button github-button\"><small>View project on</small> GitHub</a>                </div>  </div></header><div id=\"content-wrapper\" class=\"inner\">  <main id=\"main-content\">    <h1 id=\"enhanced-fsreaddir\">Enhanced <code class=\"language-plaintext highlighter-rouge\">fs.readdir()</code></h1><p><a href=\"https://github.com/JS-DevTools/readdir-enhanced/actions\"><img src=\"https://jstools.dev/img/badges/os-badges.svg\" alt=\"Cross-Platform Compatibility\" /></a><a href=\"https://github.com/JS-DevTools/readdir-enhanced/actions\"><img src=\"https://github.com/JS-DevTools/readdir-enhanced/workflows/CI-CD/badge.svg\" alt=\"Build Status\" /></a></p><p><a href=\"https://coveralls.io/github/JS-DevTools/readdir-enhanced?branch=master\"><img src=\"https://coveralls.io/repos/github/JS-DevTools/readdir-enhanced/badge.svg?branch=master\" alt=\"Coverage Status\" /></a><a href=\"https://david-dm.org/JS-DevTools/readdir-enhanced\"><img src=\"https://david-dm.org/JS-DevTools/readdir-enhanced.svg\" alt=\"Dependencies\" /></a></p><p><a href=\"https://www.npmjs.com/package/@jsdevtools/readdir-enhanced\"><img src=\"https://img.shields.io/npm/v/@jsdevtools/readdir-enhanced.svg\" alt=\"npm\" /></a><a href=\"LICENSE\"><img src=\"https://img.shields.io/npm/l/@jsdevtools/readdir-enhanced.svg\" alt=\"License\" /></a><a href=\"https://plant.treeware.earth/JS-DevTools/readdir-enhanced\"><img src=\"https://img.shields.io/badge/Treeware-%F0%9F%8C%B3-lightgreen\" alt=\"Buy us a tree\" /></a></p><h2 id=\"features\">Features</h2><ul>  <li>    <p>Fully <a href=\"#backward-compatible\"><strong>backward-compatible</strong></a> drop-in replacement for <a href=\"https://nodejs.org/api/fs.html#fs_fs_readdir_path_options_callback\"><code class=\"language-plaintext highlighter-rouge\">fs.readdir()</code></a> and <a href=\"https://nodejs.org/api/fs.html#fs_fs_readdirsync_path_options\"><code class=\"language-plaintext highlighter-rouge\">fs.readdirSync()</code></a></p>  </li>  <li>    <p>Can <a href=\"#deep\">crawl sub-directories</a> - you can even control which ones</p>  </li>  <li>    <p>Supports <a href=\"#filter\">filtering results</a> using globs, regular expressions, or custom logic</p>  </li>  <li>    <p>Can return <a href=\"#basepath\">absolute paths</a></p>  </li>  <li>    <p>Can return <a href=\"#stats\"><code class=\"language-plaintext highlighter-rouge\">fs.Stats</code> objects</a> rather than just paths</p>  </li>  <li>    <p>Exposes additional APIs: <a href=\"#pick-your-api\">Promise, Stream, EventEmitter, and Async Iterator</a>.</p>  </li></ul><h2 id=\"example\">Example</h2><div class=\"language-javascript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">import</span> <span class=\"nx\">readdir</span> <span class=\"k\">from</span> <span class=\"dl\">\"</span><span class=\"s2\">@jsdevtools/readdir-enhanced</span><span class=\"dl\">\"</span><span class=\"p\">;</span><span class=\"k\">import</span> <span class=\"nx\">through2</span> <span class=\"k\">from</span> <span class=\"dl\">\"</span><span class=\"s2\">through2</span><span class=\"dl\">\"</span><span class=\"p\">;</span><span class=\"c1\">// Synchronous API</span><span class=\"kd\">let</span> <span class=\"nx\">files</span> <span class=\"o\">=</span> <span class=\"nx\">readdir</span><span class=\"p\">.</span><span class=\"nx\">sync</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">my/directory</span><span class=\"dl\">\"</span><span class=\"p\">);</span><span class=\"c1\">// Callback API</span><span class=\"nx\">readdir</span><span class=\"p\">.</span><span class=\"k\">async</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">my/directory</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nx\">err</span><span class=\"p\">,</span> <span class=\"nx\">files</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span> <span class=\"p\">...</span> <span class=\"p\">});</span><span class=\"c1\">// Promises API</span><span class=\"nx\">readdir</span><span class=\"p\">.</span><span class=\"k\">async</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">my/directory</span><span class=\"dl\">\"</span><span class=\"p\">)</span>  <span class=\"p\">.</span><span class=\"nx\">then</span><span class=\"p\">((</span><span class=\"nx\">files</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span> <span class=\"p\">...</span> <span class=\"p\">})</span>  <span class=\"p\">.</span><span class=\"k\">catch</span><span class=\"p\">((</span><span class=\"nx\">err</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span> <span class=\"p\">...</span> <span class=\"p\">});</span><span class=\"c1\">// Async/Await API</span><span class=\"kd\">let</span> <span class=\"nx\">files</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"nx\">readdir</span><span class=\"p\">.</span><span class=\"k\">async</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">my/directory</span><span class=\"dl\">\"</span><span class=\"p\">);</span><span class=\"c1\">// Async Iterator API</span><span class=\"k\">for</span> <span class=\"k\">await</span> <span class=\"p\">(</span><span class=\"kd\">let</span> <span class=\"nx\">item</span> <span class=\"k\">of</span> <span class=\"nx\">readdir</span><span class=\"p\">.</span><span class=\"nx\">iterator</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">my/directory</span><span class=\"dl\">\"</span><span class=\"p\">))</span> <span class=\"p\">{</span>  <span class=\"p\">...</span><span class=\"p\">}</span><span class=\"c1\">// EventEmitter API</span><span class=\"nx\">readdir</span><span class=\"p\">.</span><span class=\"nx\">stream</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">my/directory</span><span class=\"dl\">\"</span><span class=\"p\">)</span>  <span class=\"p\">.</span><span class=\"nx\">on</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">data</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nx\">path</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span> <span class=\"p\">...</span> <span class=\"p\">})</span>  <span class=\"p\">.</span><span class=\"nx\">on</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">file</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nx\">path</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span> <span class=\"p\">...</span> <span class=\"p\">})</span>  <span class=\"p\">.</span><span class=\"nx\">on</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">directory</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nx\">path</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span> <span class=\"p\">...</span> <span class=\"p\">})</span>  <span class=\"p\">.</span><span class=\"nx\">on</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">symlink</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nx\">path</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span> <span class=\"p\">...</span> <span class=\"p\">})</span>  <span class=\"p\">.</span><span class=\"nx\">on</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">error</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nx\">err</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span> <span class=\"p\">...</span> <span class=\"p\">});</span><span class=\"c1\">// Streaming API</span><span class=\"kd\">let</span> <span class=\"nx\">stream</span> <span class=\"o\">=</span> <span class=\"nx\">readdir</span><span class=\"p\">.</span><span class=\"nx\">stream</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">my/directory</span><span class=\"dl\">\"</span><span class=\"p\">)</span>  <span class=\"p\">.</span><span class=\"nx\">pipe</span><span class=\"p\">(</span><span class=\"nx\">through2</span><span class=\"p\">.</span><span class=\"nx\">obj</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">data</span><span class=\"p\">,</span> <span class=\"nx\">enc</span><span class=\"p\">,</span> <span class=\"nx\">next</span><span class=\"p\">)</span> <span class=\"p\">{</span>    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">data</span><span class=\"p\">);</span>    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">push</span><span class=\"p\">(</span><span class=\"nx\">data</span><span class=\"p\">);</span>    <span class=\"nx\">next</span><span class=\"p\">();</span>  <span class=\"p\">});</span></code></pre></div></div><h2 id=\"installation\">Installation</h2><p>Install using <a href=\"https://docs.npmjs.com/about-npm/\">npm</a>:</p><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>npm <span class=\"nb\">install</span> @jsdevtools/readdir-enhanced</code></pre></div></div><h2 id=\"pick-your-api\">Pick Your API</h2><p>Readdir Enhanced has multiple APIs, so you can pick whichever one you prefer. Here are some things to consider about each API:</p><table>  <thead>    <tr>      <th>Function</th>      <th>Returns</th>      <th>Syntax</th>      <th><a href=\"#blocking-the-thread\">Blocks the thread?</a></th>      <th><a href=\"#buffered-results\">Buffers results?</a></th>    </tr>  </thead>  <tbody>    <tr>      <td><code class=\"language-plaintext highlighter-rouge\">readdirSync()</code><br /><code class=\"language-plaintext highlighter-rouge\">readdir.sync()</code></td>      <td>Array</td>      <td>Synchronous</td>      <td>yes</td>      <td>yes</td>    </tr>    <tr>      <td><code class=\"language-plaintext highlighter-rouge\">readdir()</code><br /><code class=\"language-plaintext highlighter-rouge\">readdir.async()</code><br /><code class=\"language-plaintext highlighter-rouge\">readdirAsync()</code></td>      <td><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Using_promises\">Promise</a></td>      <td><a href=\"https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Asynchronous/Async_await\"><code class=\"language-plaintext highlighter-rouge\">async/await</code></a><br /><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Using_promises\"><code class=\"language-plaintext highlighter-rouge\">Promise.then()</code></a><br /><a href=\"https://nodejs.org/en/knowledge/getting-started/control-flow/what-are-callbacks/\">callback</a></td>      <td>no</td>      <td>yes</td>    </tr>    <tr>      <td><code class=\"language-plaintext highlighter-rouge\">readdir.iterator()</code><br /><code class=\"language-plaintext highlighter-rouge\">readdirIterator()</code></td>      <td><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_Generators\">Iterator</a></td>      <td><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for-await...of\"><code class=\"language-plaintext highlighter-rouge\">for await...of</code></a></td>      <td>no</td>      <td>no</td>    </tr>    <tr>      <td><code class=\"language-plaintext highlighter-rouge\">readdir.stream()</code><br /><code class=\"language-plaintext highlighter-rouge\">readdirStream()</code></td>      <td><a href=\"https://nodejs.org/api/stream.html#stream_readable_streams\">Readable Stream</a></td>      <td><a href=\"https://nodejs.org/api/stream.html#stream_event_data\"><code class=\"language-plaintext highlighter-rouge\">stream.on(\"data\")</code></a><br /><a href=\"https://nodejs.org/api/stream.html#stream_readable_read_size\"><code class=\"language-plaintext highlighter-rouge\">stream.read()</code></a><br /><a href=\"https://nodejs.org/api/stream.html#stream_readable_pipe_destination_options\"><code class=\"language-plaintext highlighter-rouge\">stream.pipe()</code></a></td>      <td>no</td>      <td>no</td>    </tr>  </tbody></table><h3 id=\"blocking-the-thread\">Blocking the Thread</h3><p>The synchronous API blocks the thread until all results have been read. Only use this if you know the directory does not contain many items, or if your program needs the results before it can do anything else.</p><h3 id=\"buffered-results\">Buffered Results</h3><p>Some APIs buffer the results, which means you get all the results at once (as an array). This can be more convenient to work with, but it can also consume a significant amount of memory, depending on how many results there are. The non-buffered APIs return each result to you one-by-one, which means you can start processing the results even while the directory is still being read.</p><h2 id=\"alias-exports\">Alias Exports</h2><p>The <a href=\"#example\">example above</a> imported the <code class=\"language-plaintext highlighter-rouge\">readdir</code> default export and used its properties, such as <code class=\"language-plaintext highlighter-rouge\">readdir.sync</code> or <code class=\"language-plaintext highlighter-rouge\">readdir.async</code> to call specific APIs. For convenience, each of the different APIs is exported as a named function that you can import directly.</p><ul>  <li><code class=\"language-plaintext highlighter-rouge\">readdir.sync()</code> is also exported as <code class=\"language-plaintext highlighter-rouge\">readdirSync()</code></li>  <li><code class=\"language-plaintext highlighter-rouge\">readdir.async()</code> is also exported as <code class=\"language-plaintext highlighter-rouge\">readdirAsync()</code></li>  <li><code class=\"language-plaintext highlighter-rouge\">readdir.iterator()</code> is also exported as <code class=\"language-plaintext highlighter-rouge\">readdirIterator()</code></li>  <li><code class=\"language-plaintext highlighter-rouge\">readdir.stream()</code> is also exported as <code class=\"language-plaintext highlighter-rouge\">readdirStream()</code></li></ul><p>Here\u2019s how to import named exports rather than the default export:</p><div class=\"language-javascript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">readdirSync</span><span class=\"p\">,</span> <span class=\"nx\">readdirAsync</span><span class=\"p\">,</span> <span class=\"nx\">readdirIterator</span><span class=\"p\">,</span> <span class=\"nx\">readdirStream</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"dl\">\"</span><span class=\"s2\">@jsdevtools/readdir-enhanced</span><span class=\"dl\">\"</span><span class=\"p\">;</span></code></pre></div></div><p><a id=\"options\"></a>Enhanced Features\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014-Readdir Enhanced adds several features to the built-in <code class=\"language-plaintext highlighter-rouge\">fs.readdir()</code> function.  All of the enhanced features are opt-in, which makes Readdir Enhanced <a href=\"#backward-compatible\">fully backward compatible by default</a>.  You can enable any of the features by passing-in an <code class=\"language-plaintext highlighter-rouge\">options</code> argument as the second parameter.</p><p><a id=\"deep\"></a>Crawl Subdirectories\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014-By default, Readdir Enhanced will only return the top-level contents of the starting directory. But you can set the <code class=\"language-plaintext highlighter-rouge\">deep</code> option to recursively traverse the subdirectories and return their contents as well.</p><h3 id=\"crawl-all-subdirectories\">Crawl ALL subdirectories</h3><p>The <code class=\"language-plaintext highlighter-rouge\">deep</code> option can be set to <code class=\"language-plaintext highlighter-rouge\">true</code> to traverse the entire directory structure.</p><div class=\"language-javascript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">import</span> <span class=\"nx\">readdir</span> <span class=\"k\">from</span> <span class=\"dl\">\"</span><span class=\"s2\">@jsdevtools/readdir-enhanced</span><span class=\"dl\">\"</span><span class=\"p\">;</span><span class=\"nx\">readdir</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">my/directory</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"na\">deep</span><span class=\"p\">:</span> <span class=\"kc\">true</span><span class=\"p\">},</span> <span class=\"p\">(</span><span class=\"nx\">err</span><span class=\"p\">,</span> <span class=\"nx\">files</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">files</span><span class=\"p\">);</span>  <span class=\"c1\">// =&gt; subdir1</span>  <span class=\"c1\">// =&gt; subdir1/file.txt</span>  <span class=\"c1\">// =&gt; subdir1/subdir2</span>  <span class=\"c1\">// =&gt; subdir1/subdir2/file.txt</span>  <span class=\"c1\">// =&gt; subdir1/subdir2/subdir3</span>  <span class=\"c1\">// =&gt; subdir1/subdir2/subdir3/file.txt</span><span class=\"p\">});</span></code></pre></div></div><h3 id=\"crawl-to-a-specific-depth\">Crawl to a specific depth</h3><p>The <code class=\"language-plaintext highlighter-rouge\">deep</code> option can be set to a number to only traverse that many levels deep.  For example, calling <code class=\"language-plaintext highlighter-rouge\">readdir(\"my/directory\", {deep: 2})</code> will return <code class=\"language-plaintext highlighter-rouge\">subdir1/file.txt</code> and <code class=\"language-plaintext highlighter-rouge\">subdir1/subdir2/file.txt</code>, but it <em>won\u2019t</em> return <code class=\"language-plaintext highlighter-rouge\">subdir1/subdir2/subdir3/file.txt</code>.</p><div class=\"language-javascript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">import</span> <span class=\"nx\">readdir</span> <span class=\"k\">from</span> <span class=\"dl\">\"</span><span class=\"s2\">@jsdevtools/readdir-enhanced</span><span class=\"dl\">\"</span><span class=\"p\">;</span><span class=\"nx\">readdir</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">my/directory</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"na\">deep</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">},</span> <span class=\"p\">(</span><span class=\"nx\">err</span><span class=\"p\">,</span> <span class=\"nx\">files</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">files</span><span class=\"p\">);</span>  <span class=\"c1\">// =&gt; subdir1</span>  <span class=\"c1\">// =&gt; subdir1/file.txt</span>  <span class=\"c1\">// =&gt; subdir1/subdir2</span>  <span class=\"c1\">// =&gt; subdir1/subdir2/file.txt</span>  <span class=\"c1\">// =&gt; subdir1/subdir2/subdir3</span><span class=\"p\">});</span></code></pre></div></div><h3 id=\"crawl-subdirectories-by-name\">Crawl subdirectories by name</h3><p>For simple use-cases, you can use a <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp\">regular expression</a> or a <a href=\"https://github.com/isaacs/node-glob#glob-primer\">glob pattern</a> to crawl only the directories whose path matches the pattern.  The path is relative to the starting directory by default, but you can customize this via <a href=\"#basepath\"><code class=\"language-plaintext highlighter-rouge\">options.basePath</code></a>.</p><blockquote>  <p><strong>NOTE:</strong> Glob patterns <a href=\"https://github.com/isaacs/node-glob#windows\"><em>always</em> use forward-slashes</a>, even on Windows. This <em>does not</em> apply to regular expressions though. Regular expressions should use the appropraite path separator for the environment. Or, you can match both types of separators using <code class=\"language-plaintext highlighter-rouge\">[\\\\/]</code>.</p></blockquote><div class=\"language-javascript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">import</span> <span class=\"nx\">readdir</span> <span class=\"k\">from</span> <span class=\"dl\">\"</span><span class=\"s2\">@jsdevtools/readdir-enhanced</span><span class=\"dl\">\"</span><span class=\"p\">;</span><span class=\"c1\">// Only crawl the \"lib\" and \"bin\" subdirectories</span><span class=\"c1\">// (notice that the \"node_modules\" subdirectory does NOT get crawled)</span><span class=\"nx\">readdir</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">my/directory</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"na\">deep</span><span class=\"p\">:</span> <span class=\"sr\">/lib|bin/</span><span class=\"p\">},</span> <span class=\"p\">(</span><span class=\"nx\">err</span><span class=\"p\">,</span> <span class=\"nx\">files</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">files</span><span class=\"p\">);</span>  <span class=\"c1\">// =&gt; bin</span>  <span class=\"c1\">// =&gt; bin/cli.js</span>  <span class=\"c1\">// =&gt; lib</span>  <span class=\"c1\">// =&gt; lib/index.js</span>  <span class=\"c1\">// =&gt; node_modules</span>  <span class=\"c1\">// =&gt; package.json</span><span class=\"p\">});</span></code></pre></div></div><h3 id=\"custom-recursion-logic\">Custom recursion logic</h3><p>For more advanced recursion, you can set the <code class=\"language-plaintext highlighter-rouge\">deep</code> option to a function that accepts an <a href=\"https://nodejs.org/api/fs.html#fs_class_fs_stats\"><code class=\"language-plaintext highlighter-rouge\">fs.Stats</code></a> object and returns a truthy value if the starting directory should be crawled.</p><blockquote>  <p><strong>NOTE:</strong> The <a href=\"https://nodejs.org/api/fs.html#fs_class_fs_stats\"><code class=\"language-plaintext highlighter-rouge\">fs.Stats</code></a> object that\u2019s passed to the function has additional <code class=\"language-plaintext highlighter-rouge\">path</code> and <code class=\"language-plaintext highlighter-rouge\">depth</code> properties. The <code class=\"language-plaintext highlighter-rouge\">path</code> is relative to the starting directory by default, but you can customize this via <a href=\"#basepath\"><code class=\"language-plaintext highlighter-rouge\">options.basePath</code></a>. The <code class=\"language-plaintext highlighter-rouge\">depth</code> is the number of subdirectories beneath the base path (see <a href=\"#deep\"><code class=\"language-plaintext highlighter-rouge\">options.deep</code></a>).</p></blockquote><div class=\"language-javascript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">import</span> <span class=\"nx\">readdir</span> <span class=\"k\">from</span> <span class=\"dl\">\"</span><span class=\"s2\">@jsdevtools/readdir-enhanced</span><span class=\"dl\">\"</span><span class=\"p\">;</span><span class=\"c1\">// Crawl all subdirectories, except \"node_modules\"</span><span class=\"kd\">function</span> <span class=\"nx\">ignoreNodeModules</span> <span class=\"p\">(</span><span class=\"nx\">stats</span><span class=\"p\">)</span> <span class=\"p\">{</span>  <span class=\"k\">return</span> <span class=\"nx\">stats</span><span class=\"p\">.</span><span class=\"nx\">path</span><span class=\"p\">.</span><span class=\"nx\">indexOf</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">node_modules</span><span class=\"dl\">\"</span><span class=\"p\">)</span> <span class=\"o\">===</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">;</span><span class=\"p\">}</span><span class=\"nx\">readdir</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">my/directory</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"na\">deep</span><span class=\"p\">:</span> <span class=\"nx\">ignoreNodeModules</span><span class=\"p\">},</span> <span class=\"p\">(</span><span class=\"nx\">err</span><span class=\"p\">,</span> <span class=\"nx\">files</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">files</span><span class=\"p\">);</span>  <span class=\"c1\">// =&gt; bin</span>  <span class=\"c1\">// =&gt; bin/cli.js</span>  <span class=\"c1\">// =&gt; lib</span>  <span class=\"c1\">// =&gt; lib/index.js</span>  <span class=\"c1\">// =&gt; node_modules</span>  <span class=\"c1\">// =&gt; package.json</span><span class=\"p\">});</span></code></pre></div></div><p><a id=\"filter\"></a>Filtering\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014-The <code class=\"language-plaintext highlighter-rouge\">filter</code> option lets you limit the results based on any criteria you want.</p><h3 id=\"filter-by-name\">Filter by name</h3><p>For simple use-cases, you can use a <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp\">regular expression</a> or a <a href=\"https://github.com/isaacs/node-glob#glob-primer\">glob pattern</a> to filter items by their path.  The path is relative to the starting directory by default, but you can customize this via <a href=\"#basepath\"><code class=\"language-plaintext highlighter-rouge\">options.basePath</code></a>.</p><blockquote>  <p><strong>NOTE:</strong> Glob patterns <a href=\"https://github.com/isaacs/node-glob#windows\"><em>always</em> use forward-slashes</a>, even on Windows. This <em>does not</em> apply to regular expressions though. Regular expressions should use the appropraite path separator for the environment. Or, you can match both types of separators using <code class=\"language-plaintext highlighter-rouge\">[\\\\/]</code>.</p></blockquote><div class=\"language-javascript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">import</span> <span class=\"nx\">readdir</span> <span class=\"k\">from</span> <span class=\"dl\">\"</span><span class=\"s2\">@jsdevtools/readdir-enhanced</span><span class=\"dl\">\"</span><span class=\"p\">;</span><span class=\"c1\">// Find all .txt files</span><span class=\"nx\">readdir</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">my/directory</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"na\">filter</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">*.txt</span><span class=\"dl\">\"</span><span class=\"p\">});</span><span class=\"c1\">// Find all package.json files</span><span class=\"nx\">readdir</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">my/directory</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"na\">filter</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">**/package.json</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"na\">deep</span><span class=\"p\">:</span> <span class=\"kc\">true</span><span class=\"p\">});</span><span class=\"c1\">// Find everything with at least one number in the name</span><span class=\"nx\">readdir</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">my/directory</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"na\">filter</span><span class=\"p\">:</span> <span class=\"sr\">/</span><span class=\"se\">\\d</span><span class=\"sr\">+/</span><span class=\"p\">});</span></code></pre></div></div><h3 id=\"custom-filtering-logic\">Custom filtering logic</h3><p>For more advanced filtering, you can specify a filter function that accepts an <a href=\"https://nodejs.org/api/fs.html#fs_class_fs_stats\"><code class=\"language-plaintext highlighter-rouge\">fs.Stats</code></a> object and returns a truthy value if the item should be included in the results.</p><blockquote>  <p><strong>NOTE:</strong> The <a href=\"https://nodejs.org/api/fs.html#fs_class_fs_stats\"><code class=\"language-plaintext highlighter-rouge\">fs.Stats</code></a> object that\u2019s passed to the filter function has additional <code class=\"language-plaintext highlighter-rouge\">path</code> and <code class=\"language-plaintext highlighter-rouge\">depth</code> properties. The <code class=\"language-plaintext highlighter-rouge\">path</code> is relative to the starting directory by default, but you can customize this via <a href=\"#basepath\"><code class=\"language-plaintext highlighter-rouge\">options.basePath</code></a>. The <code class=\"language-plaintext highlighter-rouge\">depth</code> is the number of subdirectories beneath the base path (see <a href=\"#deep\"><code class=\"language-plaintext highlighter-rouge\">options.deep</code></a>).</p></blockquote><div class=\"language-javascript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">import</span> <span class=\"nx\">readdir</span> <span class=\"k\">from</span> <span class=\"dl\">\"</span><span class=\"s2\">@jsdevtools/readdir-enhanced</span><span class=\"dl\">\"</span><span class=\"p\">;</span><span class=\"c1\">// Only return file names containing an underscore</span><span class=\"kd\">function</span> <span class=\"nx\">myFilter</span><span class=\"p\">(</span><span class=\"nx\">stats</span><span class=\"p\">)</span> <span class=\"p\">{</span>  <span class=\"k\">return</span> <span class=\"nx\">stats</span><span class=\"p\">.</span><span class=\"nx\">isFile</span><span class=\"p\">()</span> <span class=\"o\">&amp;&amp;</span> <span class=\"nx\">stats</span><span class=\"p\">.</span><span class=\"nx\">path</span><span class=\"p\">.</span><span class=\"nx\">indexOf</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">_</span><span class=\"dl\">\"</span><span class=\"p\">)</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"p\">}</span><span class=\"nx\">readdir</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">my/directory</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"na\">filter</span><span class=\"p\">:</span> <span class=\"nx\">myFilter</span><span class=\"p\">},</span> <span class=\"p\">(</span><span class=\"nx\">err</span><span class=\"p\">,</span> <span class=\"nx\">files</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">files</span><span class=\"p\">);</span>  <span class=\"c1\">// =&gt; __myFile.txt</span>  <span class=\"c1\">// =&gt; my_other_file.txt</span>  <span class=\"c1\">// =&gt; img_1.jpg</span>  <span class=\"c1\">// =&gt; node_modules</span><span class=\"p\">});</span></code></pre></div></div><p><a id=\"stats\"></a>Get <code class=\"language-plaintext highlighter-rouge\">fs.Stats</code> objects instead of strings\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014All of the Readdir Enhanced functions listed above return an array of strings (paths). But in some situations, the path isn\u2019t enough information.  Setting the <code class=\"language-plaintext highlighter-rouge\">stats</code> option returns an array of <a href=\"https://nodejs.org/api/fs.html#fs_class_fs_stats\"><code class=\"language-plaintext highlighter-rouge\">fs.Stats</code></a> objects instead of path strings.  The <code class=\"language-plaintext highlighter-rouge\">fs.Stats</code> object contains all sorts of useful information, such as the size, the creation date/time, and helper methods such as <code class=\"language-plaintext highlighter-rouge\">isFile()</code>, <code class=\"language-plaintext highlighter-rouge\">isDirectory()</code>, <code class=\"language-plaintext highlighter-rouge\">isSymbolicLink()</code>, etc.</p><blockquote>  <p><strong>NOTE:</strong> The <a href=\"https://nodejs.org/api/fs.html#fs_class_fs_stats\"><code class=\"language-plaintext highlighter-rouge\">fs.Stats</code></a> objects that are returned also have additional <code class=\"language-plaintext highlighter-rouge\">path</code> and <code class=\"language-plaintext highlighter-rouge\">depth</code> properties. The <code class=\"language-plaintext highlighter-rouge\">path</code> is relative to the starting directory by default, but you can customize this via <a href=\"#basepath\"><code class=\"language-plaintext highlighter-rouge\">options.basePath</code></a>. The <code class=\"language-plaintext highlighter-rouge\">depth</code> is the number of subdirectories beneath the base path (see <a href=\"#deep\"><code class=\"language-plaintext highlighter-rouge\">options.deep</code></a>).</p></blockquote><div class=\"language-javascript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">import</span> <span class=\"nx\">readdir</span> <span class=\"k\">from</span> <span class=\"dl\">\"</span><span class=\"s2\">@jsdevtools/readdir-enhanced</span><span class=\"dl\">\"</span><span class=\"p\">;</span><span class=\"nx\">readdir</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">my/directory</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"p\">{</span> <span class=\"na\">stats</span><span class=\"p\">:</span> <span class=\"kc\">true</span> <span class=\"p\">},</span> <span class=\"p\">(</span><span class=\"nx\">err</span><span class=\"p\">,</span> <span class=\"nx\">stats</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>  <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kd\">let</span> <span class=\"nx\">stat</span> <span class=\"k\">of</span> <span class=\"nx\">stats</span><span class=\"p\">)</span> <span class=\"p\">{</span>    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s2\">`</span><span class=\"p\">${</span><span class=\"nx\">stat</span><span class=\"p\">.</span><span class=\"nx\">path</span><span class=\"p\">}</span><span class=\"s2\"> was created at </span><span class=\"p\">${</span><span class=\"nx\">stat</span><span class=\"p\">.</span><span class=\"nx\">birthtime</span><span class=\"p\">}</span><span class=\"s2\">`</span><span class=\"p\">);</span>  <span class=\"p\">}</span><span class=\"p\">});</span></code></pre></div></div><p><a id=\"basepath\"></a>Base Path\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014-By default all Readdir Enhanced functions return paths that are relative to the starting directory. But you can use the <code class=\"language-plaintext highlighter-rouge\">basePath</code> option to customize this.  The <code class=\"language-plaintext highlighter-rouge\">basePath</code> will be prepended to all of the returned paths.  One common use-case for this is to set <code class=\"language-plaintext highlighter-rouge\">basePath</code> to the absolute path of the starting directory, so that all of the returned paths will be absolute.</p><div class=\"language-javascript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">import</span> <span class=\"nx\">readdir</span> <span class=\"k\">from</span> <span class=\"dl\">\"</span><span class=\"s2\">@jsdevtools/readdir-enhanced</span><span class=\"dl\">\"</span><span class=\"p\">;</span><span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">resolve</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"dl\">\"</span><span class=\"s2\">path</span><span class=\"dl\">\"</span><span class=\"p\">;</span><span class=\"c1\">// Get absolute paths</span><span class=\"kd\">let</span> <span class=\"nx\">absPath</span> <span class=\"o\">=</span> <span class=\"nx\">resolve</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">my/dir</span><span class=\"dl\">\"</span><span class=\"p\">);</span><span class=\"nx\">readdir</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">my/directory</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"na\">basePath</span><span class=\"p\">:</span> <span class=\"nx\">absPath</span><span class=\"p\">},</span> <span class=\"p\">(</span><span class=\"nx\">err</span><span class=\"p\">,</span> <span class=\"nx\">files</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">files</span><span class=\"p\">);</span>  <span class=\"c1\">// =&gt; /absolute/path/to/my/directory/file1.txt</span>  <span class=\"c1\">// =&gt; /absolute/path/to/my/directory/file2.txt</span>  <span class=\"c1\">// =&gt; /absolute/path/to/my/directory/subdir</span><span class=\"p\">});</span><span class=\"c1\">// Get paths relative to the working directory</span><span class=\"nx\">readdir</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">my/directory</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"na\">basePath</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">my/directory</span><span class=\"dl\">\"</span><span class=\"p\">},</span> <span class=\"p\">(</span><span class=\"nx\">err</span><span class=\"p\">,</span> <span class=\"nx\">files</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">files</span><span class=\"p\">);</span>  <span class=\"c1\">// =&gt; my/directory/file1.txt</span>  <span class=\"c1\">// =&gt; my/directory/file2.txt</span>  <span class=\"c1\">// =&gt; my/directory/subdir</span><span class=\"p\">});</span></code></pre></div></div><p><a id=\"sep\"></a>Path Separator\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014-By default, Readdir Enhanced uses the correct path separator for your OS (<code class=\"language-plaintext highlighter-rouge\">\\</code> on Windows, <code class=\"language-plaintext highlighter-rouge\">/</code> on Linux &amp; MacOS). But you can set the <code class=\"language-plaintext highlighter-rouge\">sep</code> option to any separator character(s) that you want to use instead.  This is usually used to ensure consistent path separators across different OSes.</p><div class=\"language-javascript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">import</span> <span class=\"nx\">readdir</span> <span class=\"k\">from</span> <span class=\"dl\">\"</span><span class=\"s2\">@jsdevtools/readdir-enhanced</span><span class=\"dl\">\"</span><span class=\"p\">;</span><span class=\"c1\">// Always use Windows path separators</span><span class=\"nx\">readdir</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">my/directory</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"na\">sep</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"se\">\\\\</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"na\">deep</span><span class=\"p\">:</span> <span class=\"kc\">true</span><span class=\"p\">},</span> <span class=\"p\">(</span><span class=\"nx\">err</span><span class=\"p\">,</span> <span class=\"nx\">files</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">files</span><span class=\"p\">);</span>  <span class=\"c1\">// =&gt; subdir1</span>  <span class=\"c1\">// =&gt; subdir1\\file.txt</span>  <span class=\"c1\">// =&gt; subdir1\\subdir2</span>  <span class=\"c1\">// =&gt; subdir1\\subdir2\\file.txt</span>  <span class=\"c1\">// =&gt; subdir1\\subdir2\\subdir3</span>  <span class=\"c1\">// =&gt; subdir1\\subdir2\\subdir3\\file.txt</span><span class=\"p\">});</span></code></pre></div></div><p><a id=\"fs\"></a>Custom FS methods\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014-By default, Readdir Enhanced uses the default <a href=\"https://nodejs.org/api/fs.html\">Node.js FileSystem module</a> for methods like <code class=\"language-plaintext highlighter-rouge\">fs.stat</code>, <code class=\"language-plaintext highlighter-rouge\">fs.readdir</code> and <code class=\"language-plaintext highlighter-rouge\">fs.lstat</code>. But in some situations, you can want to use your own FS methods (FTP, SSH, remote drive and etc). So you can provide your own implementation of FS methods by setting <code class=\"language-plaintext highlighter-rouge\">options.fs</code> or specific methods, such as <code class=\"language-plaintext highlighter-rouge\">options.fs.stat</code>.</p><div class=\"language-javascript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">import</span> <span class=\"nx\">readdir</span> <span class=\"k\">from</span> <span class=\"dl\">\"</span><span class=\"s2\">@jsdevtools/readdir-enhanced</span><span class=\"dl\">\"</span><span class=\"p\">;</span><span class=\"kd\">function</span> <span class=\"nx\">myCustomReaddirMethod</span><span class=\"p\">(</span><span class=\"nx\">dir</span><span class=\"p\">,</span> <span class=\"nx\">callback</span><span class=\"p\">)</span> <span class=\"p\">{</span>  <span class=\"nx\">callback</span><span class=\"p\">(</span><span class=\"kc\">null</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"dl\">\"</span><span class=\"s2\">__myFile.txt</span><span class=\"dl\">\"</span><span class=\"p\">]);</span><span class=\"p\">}</span><span class=\"kd\">let</span> <span class=\"nx\">options</span> <span class=\"o\">=</span> <span class=\"p\">{</span>  <span class=\"na\">fs</span><span class=\"p\">:</span> <span class=\"p\">{</span>    <span class=\"na\">readdir</span><span class=\"p\">:</span> <span class=\"nx\">myCustomReaddirMethod</span>  <span class=\"p\">}</span><span class=\"p\">};</span><span class=\"nx\">readdir</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">my/directory</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"nx\">options</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nx\">err</span><span class=\"p\">,</span> <span class=\"nx\">files</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">files</span><span class=\"p\">);</span>  <span class=\"c1\">// =&gt; __myFile.txt</span><span class=\"p\">});</span></code></pre></div></div><p><a id=\"backward-compatible\"></a>Backward Compatible\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014-Readdir Enhanced is fully backward-compatible with Node.js\u2019 built-in <code class=\"language-plaintext highlighter-rouge\">fs.readdir()</code> and <code class=\"language-plaintext highlighter-rouge\">fs.readdirSync()</code> functions, so you can use it as a drop-in replacement in existing projects without affecting existing functionality, while still being able to use the enhanced features as needed.</p><div class=\"language-javascript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">readdir</span><span class=\"p\">,</span> <span class=\"nx\">readdirSync</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"dl\">\"</span><span class=\"s2\">@jsdevtools/readdir-enhanced</span><span class=\"dl\">\"</span><span class=\"p\">;</span><span class=\"c1\">// Use it just like Node's built-in fs.readdir function</span><span class=\"nx\">readdir</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">my/directory</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nx\">er</span><span class=\"p\">,</span>  <span class=\"nx\">files</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span> <span class=\"p\">...</span> <span class=\"p\">});</span><span class=\"c1\">// Use it just like Node's built-in fs.readdirSync function</span><span class=\"kd\">let</span> <span class=\"nx\">files</span> <span class=\"o\">=</span> <span class=\"nx\">readdirSync</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">my/directory</span><span class=\"dl\">\"</span><span class=\"p\">);</span></code></pre></div></div><h2 id=\"a-note-on-streams\">A Note on Streams</h2><p>The Readdir Enhanced streaming API follows the Node.js streaming API. A lot of questions around the streaming API can be answered by reading the <a href=\"https://nodejs.org/api/stream.html\">Node.js documentation.</a>. However, we\u2019ve tried to answer the most common questions here.</p><h3 id=\"stream-events\">Stream Events</h3><p>All events in the Node.js streaming API are supported by Readdir Enhanced. These events include \u201cend\u201d, \u201cclose\u201d, \u201cdrain\u201d, \u201cerror\u201d, plus more. <a href=\"https://nodejs.org/api/stream.html#stream_class_stream_readable\">An exhaustive list of events is available in the Node.js documentation.</a></p><h4 id=\"detect-when-the-stream-has-finished\">Detect when the Stream has finished</h4><p>Using these events, we can detect when the stream has finished reading files.</p><div class=\"language-javascript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">import</span> <span class=\"nx\">readdir</span> <span class=\"k\">from</span> <span class=\"dl\">\"</span><span class=\"s2\">@jsdevtools/readdir-enhanced</span><span class=\"dl\">\"</span><span class=\"p\">;</span><span class=\"c1\">// Build the stream using the Streaming API</span><span class=\"kd\">let</span> <span class=\"nx\">stream</span> <span class=\"o\">=</span> <span class=\"nx\">readdir</span><span class=\"p\">.</span><span class=\"nx\">stream</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">my/directory</span><span class=\"dl\">\"</span><span class=\"p\">)</span>  <span class=\"p\">.</span><span class=\"nx\">on</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">data</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nx\">path</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span> <span class=\"p\">...</span> <span class=\"p\">});</span><span class=\"c1\">// Listen to the end event to detect the end of the stream</span><span class=\"nx\">stream</span><span class=\"p\">.</span><span class=\"nx\">on</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">end</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">Stream finished!</span><span class=\"dl\">\"</span><span class=\"p\">);</span><span class=\"p\">});</span></code></pre></div></div><h3 id=\"paused-streams-vs-flowing-streams\">Paused Streams vs. Flowing Streams</h3><p>As with all Node.js streams, a Readdir Enhanced stream starts in \u201cpaused mode\u201d. For the stream to start emitting files, you\u2019ll need to switch it to \u201cflowing mode\u201d.</p><p>There are many ways to trigger flowing mode, such as adding a <code class=\"language-plaintext highlighter-rouge\">stream.data()</code> handler, using <code class=\"language-plaintext highlighter-rouge\">stream.pipe()</code> or calling <code class=\"language-plaintext highlighter-rouge\">stream.resume()</code>.</p><p>Unless you trigger flowing mode, your stream will stay paused and you won\u2019t receive any file events.</p><p><a href=\"https://nodejs.org/api/stream.html#stream_two_reading_modes\">More information on paused vs. flowing mode can be found in the Node.js documentation.</a></p><h2 id=\"contributing\">Contributing</h2><p>Contributions, enhancements, and bug-fixes are welcome!  <a href=\"https://github.com/JS-DevTools/readdir-enhanced/issues\">Open an issue</a> on GitHub and <a href=\"https://github.com/JS-DevTools/readdir-enhanced/pulls\">submit a pull request</a>.</p><h4 id=\"building\">Building</h4><p>To build the project locally on your computer:</p><ol>  <li>    <p><strong>Clone this repo</strong><br /><code class=\"language-plaintext highlighter-rouge\">git clone https://github.com/JS-DevTools/readdir-enhanced.git</code></p>  </li>  <li>    <p><strong>Install dependencies</strong><br /><code class=\"language-plaintext highlighter-rouge\">npm install</code></p>  </li>  <li>    <p><strong>Run the tests</strong><br /><code class=\"language-plaintext highlighter-rouge\">npm test</code></p>  </li></ol><h2 id=\"license\">License</h2><p>Readdir Enhanced is 100% free and open-source, under the <a href=\"/readdir-enhanced/LICENSE\">MIT license</a>. Use it however you want.</p><p>This package is <a href=\"http://treeware.earth\">Treeware</a>. If you use it in production, then we ask that you <a href=\"https://plant.treeware.earth/JS-DevTools/readdir-enhanced\"><strong>buy the world a tree</strong></a> to thank us for our work. By contributing to the Treeware forest you\u2019ll be creating employment for local families and restoring wildlife habitats.</p><h2 id=\"big-thanks-to\">Big Thanks To</h2><p>Thanks to these awesome companies for their support of Open Source developers \u2764</p><p><a href=\"https://travis-ci.com\"><img src=\"https://jstools.dev/img/badges/travis-ci.svg\" alt=\"Travis CI\" /></a><a href=\"https://saucelabs.com\"><img src=\"https://jstools.dev/img/badges/sauce-labs.svg\" alt=\"SauceLabs\" /></a><a href=\"https://coveralls.io\"><img src=\"https://jstools.dev/img/badges/coveralls.svg\" alt=\"Coveralls\" /></a></p>  </main>  <footer id=\"footer\">              <p class=\"repo-owner\">        <a href=\"https://github.com/JS-DevTools/readdir-enhanced\">readdir-enhanced</a> is maintained by        <a href=\"https://github.com/JS-DevTools\">JS-DevTools</a>.      </p>      </footer></div>  </body></html>",
  "embeddings": []
}
{
  "libtype": "npm",
  "libname": "mockserver-node",
  "url": "http://mock-server.com",
  "html": "<!DOCTYPE html><html lang=\"en\" xmlns:og=\"https://ogp.me/ns#\" prefix=\"og: http://ogp.me/ns#\"><head><!-- meta tags --><meta charset=\"utf-8\" /><meta http-equiv=\"content-type\" content=\"text/html; charset=utf-8\" /><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" /><meta name=\"format-detection\" content=\"telephone=no\"><meta name=\"google-site-verification\" content=\"QIzvnb0rY1MnkLjIDI217X0RjxZCX2tWdUp1CvejoVw\"/><meta name=\"msvalidate.01\" content=\"9DBA7A5F05A6179123259382E10FB4A7\"/>    <title>MockServer</title>    <meta name=\"description\" content=\"MockServer enables easy mocking of any system you integrate with via HTTP or HTTPS. It also proxies, allowing introspection and modification of proxied traffic, with all proxy protocols (i.e. port forwarding, HTTP, HTTPS, SOCKS4, SOCKS5, etc).\"><meta name=\"keywords\" content=\"mockserver, mock server, mock http server, http mock server, mock-server, mock rest service, mock server java, mock api, java mock http server, server mock, java mock server, mock rest server, java mock web service, api mock, mock web service java, mock web server, mock service, mock rest api, mock http response, mock http server java, mock api server, json mock service, api mocking, api proxying, proxy, introspect http, proxy http, proxy https, proxy rest api\"/><meta name=\"author\" content=\"James D Bloom\" /><meta name=\"title\" content=\"MockServer\"><meta property=\"og:locale\" content=\"en_GB\"><meta property=\"og:type\" content=\"website\"><meta property=\"og:image\" content=\"/apple-touch-icon.png\"><meta property=\"og:url\" content=\"https://www.mock-server.com\"><meta property=\"og:site_name\" content=\"MockServer\"><meta property=\"og:title\" content=\"MockServer\"><meta property=\"og:description\" content=\"MockServer enables easy mocking of any system you integrate with via HTTP or HTTPS. It also proxies, allowing introspection and modification of proxied traffic, with all proxy protocols (i.e. port forwarding, HTTP, HTTPS, SOCKS4, SOCKS5, etc).\"><meta property=\"article:author\" content=\"James D Bloom\"><!-- icons --><link rel=\"shortcut icon\" href=\"/favicon.ico\"><link rel=\"apple-touch-icon-precomposed\" href=\"/apple-touch-icon.png\"><!-- styles -->    <link  rel=\"stylesheet\" type=\"text/css\" href=\"//fonts.googleapis.com/css?family=Indie+Flower|Gloria+Hallelujah|Lato|Averia+Sans+Libre:300normal,300italic,400normal,400italic,700normal,700italic|Amatic+SC:400normal|Belleza:400normal|Belgrano:400normal|Open+Sans:400normal|Dosis:400normal|Codystar:400normal|Concert+One:400normal|Oswald:400normal|Economica:400normal|Duru+Sans:400normal&amp;subset=all\">    <link rel=\"stylesheet\" href=\"/css/main.css\">    <link rel=\"stylesheet\" href=\"/css/yahoo-pure-min-0.3.0.css\">    <link rel=\"canonical\" href=\"https://www.mock-server.com/\">    <link rel=\"alternate\" type=\"application/atom+xml\" title=\"MockServer\" href=\"https://www.mock-server.com/feed.xml\" /><!-- Global site tag (gtag.js) - Google Analytics --><script async src=\"https://www.googletagmanager.com/gtag/js?id=UA-32687194-4\"></script><script>        window.dataLayer = window.dataLayer || [];        function gtag(){dataLayer.push(arguments);}        gtag('js', new Date());        gtag('config', 'UA-32687194-4');</script></head><body onload=\"scrollActiveMenuItemIntoView()\"><div id=\"layout\"><header class=\"site-header\"><!-- Menu toggle --><a href=\"#menu\" id=\"menuLink\" class=\"menu-link\"><!-- Hamburger icon --><span></span></a><nav id=\"menu\"><div class=\"pure-menu pure-menu-open\"><span class=\"pure-menu-heading\">MockServer</span><ul><li><a href=\"/#what-is-mockserver\">What is MockServer</a></li><li><a href=\"/#why-use-mockserver\">Why use MockServer</a></li></ul></div><div class=\"pure-menu pure-menu-open\"><!--<span class=\"pure-menu-heading\">MockServer</span>--><ul><li typeof=\"sioc:Page\" about=\"/mock_server/running_mock_server.html\" class=\"\"><a href=\"/mock_server/running_mock_server.html\" property=\"dc:title\">Running MockServer</a></li><li typeof=\"sioc:Page\" about=\"/mock_server/mockserver_clients.html\" class=\"\"><a href=\"/mock_server/mockserver_clients.html\" property=\"dc:title\">MockServer Clients</a></li><li typeof=\"sioc:Page\" about=\"/mock_server/mockserver_ui.html\" class=\"\"><a href=\"/mock_server/mockserver_ui.html\" property=\"dc:title\">MockServer UI</a></li><li typeof=\"sioc:Page\" about=\"/mock_server/clearing_and_resetting.html\" class=\"\"><a href=\"/mock_server/clearing_and_resetting.html\" property=\"dc:title\">Clearing & Resetting</a></li><li typeof=\"sioc:Page\" about=\"/mock_server/debugging_issues.html\" class=\"\"><a href=\"/mock_server/debugging_issues.html\" property=\"dc:title\">Logging & Debugging</a></li><li typeof=\"sioc:Page\" about=\"/mock_server/performance.html\" class=\"\"><a href=\"/mock_server/performance.html\" property=\"dc:title\">Scalability & Latency</a></li><li typeof=\"sioc:Page\" about=\"/mock_server/HTTPS_TLS.html\" class=\"\"><a href=\"/mock_server/HTTPS_TLS.html\" property=\"dc:title\">HTTPS & TLS</a></li><li typeof=\"sioc:Page\" about=\"/mock_server/control_plane_authorisation.html\" class=\"\"><a href=\"/mock_server/control_plane_authorisation.html\" property=\"dc:title\">API Security</a></li><li typeof=\"sioc:Page\" about=\"/mock_server/CORS_support.html\" class=\"\"><a href=\"/mock_server/CORS_support.html\" property=\"dc:title\">CORS Support</a></li><li typeof=\"sioc:Page\" about=\"/mock_server/configuration_properties.html\" class=\"\"><a href=\"/mock_server/configuration_properties.html\" property=\"dc:title\">Configuration</a></li><li><a target=\"_blank\" href=\"https://app.swaggerhub.com/apis/jamesdbloom/mock-server-openapi\" target=\"_blank\">REST API Reference</a></li><!-- <img src=\"/images/openapi.png\" width=\"100px\"/></a> --><li><a target=\"_blank\"href=\"https://github.com/mock-server/mockserver/tree/master/mockserver-examples\" target=\"_blank\">Example Code</a></li></ul></div><div class=\"pure-menu pure-menu-open\"><span class=\"pure-menu-heading\">Mocking</span><ul><li typeof=\"sioc:Page\" about=\"/mock_server/getting_started.html\" class=\"\"><a href=\"/mock_server/getting_started.html\" property=\"dc:title\">Getting Started</a></li><li typeof=\"sioc:Page\" about=\"/mock_server/creating_expectations.html\" class=\"\"><a href=\"/mock_server/creating_expectations.html\" property=\"dc:title\">Creating Expectations</a></li><li typeof=\"sioc:Page\" about=\"/mock_server/using_openapi.html\" class=\"\"><a href=\"/mock_server/using_openapi.html\" property=\"dc:title\">Using OpenAPI</a></li><li typeof=\"sioc:Page\" about=\"/mock_server/response_templates.html\" class=\"\"><a href=\"/mock_server/response_templates.html\" property=\"dc:title\">Response Templates</a></li><li typeof=\"sioc:Page\" about=\"/mock_server/verification.html\" class=\"\"><a href=\"/mock_server/verification.html\" property=\"dc:title\">Verifying Requests</a></li><li typeof=\"sioc:Page\" about=\"/mock_server/initializing_expectations.html\" class=\"\"><a href=\"/mock_server/initializing_expectations.html\" property=\"dc:title\">Expectation Initializers</a></li><li typeof=\"sioc:Page\" about=\"/mock_server/persisting_expectations.html\" class=\"\"><a href=\"/mock_server/persisting_expectations.html\" property=\"dc:title\">Persisting Expectations</a></li><li typeof=\"sioc:Page\" about=\"/mock_server/running_tests_in_parallel.html\" class=\"\"><a href=\"/mock_server/running_tests_in_parallel.html\" property=\"dc:title\">Running Tests In Parallel</a></li></ul></div><div class=\"pure-menu pure-menu-open\"><span class=\"pure-menu-heading\">Proxying</span><ul><li typeof=\"sioc:Page\" about=\"/proxy/getting_started.html\" class=\"\"><a href=\"/proxy/getting_started.html\" property=\"dc:title\">Getting Started</a></li><li typeof=\"sioc:Page\" about=\"/proxy/configuring_sut.html\" class=\"\"><a href=\"/proxy/configuring_sut.html\" property=\"dc:title\">Configuring Clients</a></li><li typeof=\"sioc:Page\" about=\"/proxy/record_and_replay.html\" class=\"\"><a href=\"/proxy/record_and_replay.html\" property=\"dc:title\">Record & Replay</a></li><li typeof=\"sioc:Page\" about=\"/proxy/verification.html\" class=\"\"><a href=\"/proxy/verification.html\" property=\"dc:title\">Verifying Requests</a></li><li typeof=\"sioc:Page\" about=\"/mock_server/isolating_single_service.html\" class=\"\"><a href=\"/mock_server/isolating_single_service.html\" property=\"dc:title\">Isolate Single Service</a></li></ul></div><div class=\"pure-menu pure-menu-open\"><span class=\"pure-menu-heading\">Where</span><ul><li typeof=\"sioc:Page\" about=\"/where/downloads.html\" class=\"\"><a href=\"/where/downloads.html\" property=\"dc:title\">Downloads</a></li><li typeof=\"sioc:Page\" about=\"/where/slack.html\" class=\"\"><a href=\"/where/slack.html\" property=\"dc:title\">Community</a></li><li typeof=\"sioc:Page\" about=\"/where/github.html\" class=\"\"><a href=\"/where/github.html\" property=\"dc:title\">Source Control</a></li><li typeof=\"sioc:Page\" about=\"/where/trello.html\" class=\"\"><a href=\"/where/trello.html\" property=\"dc:title\">Backlog & Issues</a></li><li typeof=\"sioc:Page\" about=\"/where/npm.html\" class=\"\"><a href=\"/where/npm.html\" property=\"dc:title\">npm</a></li><li typeof=\"sioc:Page\" about=\"/where/maven_central.html\" class=\"\"><a href=\"/where/maven_central.html\" property=\"dc:title\">Maven</a></li><li typeof=\"sioc:Page\" about=\"/where/docker.html\" class=\"\"><a href=\"/where/docker.html\" property=\"dc:title\">Docker</a></li><li typeof=\"sioc:Page\" about=\"/where/kubernetes.html\" class=\"\"><a href=\"/where/kubernetes.html\" property=\"dc:title\">Helm & Kubernetes</a></li><li><a target=\"_blank\" href=\"https://app.swaggerhub.com/apis/jamesdbloom/mock-server-openapi\" target=\"_blank\">Swagger Hub</a></li><!-- <img src=\"/images/openapi.png\" width=\"100px\"/></a> --></ul></div><!--<div class=\"pure-menu pure-menu-open\">--><!--<ul>--><!--<li id=\"siteMapLink\" class=\"pure-menu-heading\"><a href=\"/sitemap.html\">Site Map</a></li>--><!--</ul>--><!--</div>--></nav></header><div id=\"main\"><div class=\"content\" itemscope itemtype=\"https://schema.org/Article\"><div class=\"header\"><h1>MockServer</h1><h2 itemprop=\"headline\">Easy mocking of any system you integrate with via HTTP or HTTPS</h2></div><a target=\"_blank\"href=\"https://github.com/mock-server/mockserver\" target=\"_blank\"><img style=\"position: absolute; top: 0; right: 0; border: 0;\" width=\"149\" height=\"149\" src=\"images/forkme_right_red.png\" alt=\"Fork us on GitHub\"></a><a id=\"what-is-mockserver\" class=\"anchor\" href=\"#what-is-mockserver\">&nbsp;</a><div class=\"build_tag\"><a target=\"_blank\" href=\"https://trello.com/b/dsfTCP46/mockserver\" target=\"_blank\"><img width=\"47px\" src=\"images/trello_badge.png\" alt=\"Trello Backlog\"></a>&nbsp;<a target=\"_blank\" href=\"https://join-mock-server-slack.herokuapp.com\" target=\"_blank\"><img width=\"66px\" src=\"images/slack-logo-slim.png\" alt=\"Join Slack\"></a>&nbsp;<a target=\"_blank\" href=\"https://buildkite.com/mockserver/mockserver\" target=\"_blank\"><img src=\"https://badge.buildkite.com/3b6803f4fe98cb5ed7bf18292a1434f800b53d8fecb92811d8.svg?style=square&theme=slack&branch=master\" alt=\"BuildKite Build Status\"></a></div><a id=\"getting_started\" class=\"anchor\" href=\"#getting_started\">&nbsp;</a><h2>Getting Started</h2><p>To get started see the guide for <a href=\"/mock_server/getting_started.html\">mocking</a> or <a href=\"/proxy/getting_started.html\">proxying</a> or the <a target=\"_blank\"href=\"https://github.com/mock-server/mockserver/tree/master/mockserver-examples\">code examples</a>.</p><a id=\"what_is_mockserver\" class=\"anchor\" href=\"#what_is_mockserver\">&nbsp;</a><h2>What is MockServer</h2><p>For any system you integrate with via HTTP or HTTPS MockServer can be used as:</p><ul><li>a <a href=\"/mock_server/getting_started.html\">mock</a> configured to return specific responses for different requests</li><li>a <a href=\"/proxy/getting_started.html\">proxy</a> recording and optionally modifying requests and responses</li><li>both a <a href=\"/proxy/getting_started.html\">proxy</a> for some requests and a <a href=\"/mock_server/getting_started.html\">mock</a> for other requests at the same time</li></ul><p>When MockServer receives a request it matches the request against active <strong>expectations</strong> that have been configured. Then, if no matches are found, it proxies the request if appropriate; otherwise a 404 is returned.</p><p>For each request received the following steps happen:</p><ol><li>find matching expectation and perform action</li><li>if no matching expectation proxy request</li><li>if not a proxy request return 404</li></ol><p>An <strong>expectation</strong> defines the <strong>action</strong> that is taken, for example, a response could be returned.</p><p>MockServer supports the follow <strong>actions</strong>:</p><ul><li>        <strong>return a \"mock\" <a href=\"/mock_server/creating_expectations.html#mock_response\">response</a></strong> when a request matches an <a href=\"/mock_server/creating_expectations.html\">expectation</a>        <p><img class=\"action_image\" src=\"images/expectation_response_action.png\" alt=\"Response Action Expectation\"></p>    </li><li>        <strong><a href=\"/mock_server/creating_expectations.html#mock_forward\">forward</a> a request</strong> when the request matches an <a href=\"/mock_server/creating_expectations.html\">expectation</a> (i.e. a dynamic port forwarding proxy)        <p><img class=\"action_image\" src=\"images/expectation_forward_action.png\" alt=\"Forward Action Expectation\"></p>    </li><li>        <strong>execute a <a href=\"/mock_server/creating_expectations.html#callback\">callback</a></strong> when a request matches an <a href=\"/mock_server/creating_expectations.html\">expectation</a>, allowing the response to be created dynamically        <p><img class=\"action_image\" src=\"images/expectation_callback_action.png\" alt=\"Callback Action Expectation\"></p>    </li>    <li>        <strong>return an <a href=\"/mock_server/creating_expectations.html#mock_error\">invalid response</a></strong> or close the connection when a request matches an <a href=\"/mock_server/creating_expectations.html\">expectation</a>        <p><img class=\"action_image\" src=\"images/expectation_error_action.png\" alt=\"Error Action Expectation\"></p>    </li><li>        <strong><a href=\"/mock_server/verification.html\">verify</a> requests</strong> have been sent (i.e. as a test assertion)        <p><img class=\"action_image\" src=\"images/verification.png\" alt=\"Verification\"></p>    </li>    <li>        <strong><a href=\"/mock_server/verification.html\">retrieve</a> logs</strong>, <strong>requests</strong> or <strong>expectations</strong> to help debug        <p><img class=\"action_image\" src=\"images/retrieve_logs.png\" alt=\"Retrieve Logs\"></p>    </li></ul><a id=\"proxying_with_mockserver\" class=\"anchor\" href=\"#proxying_with_mockserver\">&nbsp;</a><h2>Proxying with MockServer</h2><p>MockServer can:</p><ul><li><strong><a href=\"/proxy/getting_started.html\">proxy</a> all requests</strong> using any of the following proxying methods:<ul class=\"sublist\"><li>Port Forwarding</li><li>Web Proxying (i.e. HTTP proxy)</li><li>HTTPS Tunneling Proxying (using HTTP CONNECT)</li><li>SOCKS Proxying (i.e. dynamic port forwarding)</li></ul></li><li><strong><a href=\"/proxy/verification.html\">verify</a> proxied requests</strong> have been sent (i.e. in a test assertion)</li><li><strong><a href=\"/proxy/record_and_replay.html\">record</a> proxied requests and responses</strong> to analyse how a system behaves</li></ul><p>MockServer supports the following proxying techniques:</p><ul><li><strong>Port Forwarding</strong><ul><li>all requests are forwarded to a single hostname or IP and port</li><li>to proxy requests the <strong>HTTP client</strong> should <a href=\"/proxy/configuring_sut.html\">use the hostname and port of MockServer</a></li></ul></li><li><strong>Web Proxying</strong> (i.e. HTTP proxy)<ul><li>each request is forwarded dynamically using its Host header</li><li>to proxy requests the <strong>HTTP client</strong> should <a href=\"/proxy/configuring_sut.html\">be configured to use an HTTP Proxy</a></li></ul></li><li><strong>Secure Web Proxying</strong> (i.e. HTTPS tunneling proxying)<ul><li>requests are forwarded using a CONNECT request that sets up an HTTP tunnel</li><li>an SSL certificate is auto-generated allowing encrypted HTTPS traffic to be recorded transparently</li><li>to proxy requests the <strong>HTTP client</strong> should <a href=\"/proxy/configuring_sut.html\">be configured to use an HTTP Proxy</a></li></ul></li><li><strong>SOCKS Proxying</strong> (i.e. dynamic port forwarding)<ul><li>requests are forwarded using a SOCK CONNECT CMD request that established a socket tunnel</li><li>if the traffic is encrypted an SSL certificate is auto-generated allowing SSL traffic to be recorded transparently</li><li>to proxy requests the <strong>operating system (or JVM)</strong> should <a href=\"/proxy/configuring_sut.html\">be configured to use an HTTP Proxy</a></li></ul></li><li><strong>SSL & Certificates</strong><ul><li>all SSL traffic is handled transparently by auto-generating an appropriate SSL certificate</li><li>generated certificates use a single <a target=\"_blank\"href=\"https://github.com/mock-server/mockserver/blob/master/mockserver-core/src/main/resources/org/mockserver/socket/CertificateAuthorityCertificate.pem\">MockServer root CA certificate</a> enabling the root certificate to be<a href=\"/mock_server/HTTPS_TLS.html\">easily imported</a></li></ul></li><li><strong>Port Unification</strong><ul><li>to simplify configuration all protocols (i.e. HTTP, HTTPS / TLS, SOCKS, etc) are supported on the same port</li><li>the protocol is dynamically detected by both MockServer</li></ul></li><li><strong>Simultaneous Proxying & Mocking</strong><ul><li>if MockServer is being used as a proxy <strong>expectations</strong> can also be created</li><li>when a request is received it is first matched against active <strong>expectations</strong> that have been configured</li><li>if an <strong>expectations</strong> is matched its <strong>action</strong> will be performed instead of proxying the request</li></ul></li></ul><a id=\"why-use-mockserver\" class=\"anchor\" href=\"#why-use-mockserver\">&nbsp;</a><h2>Why use MockServer</h2><p>MockServer allows you to mock any server or service via HTTP or HTTPS, such as a REST or RPC service. </p><p>This is useful in the following scenarios:</p><ul><li>testing<ul><li>easily recreate all types of responses for HTTP dependencies such as REST or RPC services to test applications easily and affectively</li><li>isolate the system-under-test to ensure tests run reliably and only fail when there is a genuine bug. It is important only the system-under-test is tested and not its dependencies to avoid tests failing due to irrelevant external changes such as network failure or a server being rebooted / redeployed.</li><li>easily set up mock responses independently for each test to ensure test data is encapsulated with each test. Avoid sharing data between tests that is difficult to manage and maintain and risks tests infecting each other</li><li>create test assertions that verify the requests the system-under-test has sent</li></ul></li><li>de-coupling development<ul><li>start working against a service API before the service is available. If an API or service is not yet fully developed MockServer can mock the API allowing any team who is using the service to start work without being delayed</li><li>isolate development teams during the initial development phases when the APIs / services may be extremely unstable and volatile. Using MockServer allows development work to continue even when an external service fails</li></ul></li><li>isolate single service<ul><li>during deployment and debugging it is helpful to run a single application or service or handle a sub-set of requests on on a local machine in debug mode. Using MockServer it is easy to <a href=\"/mock_server/isolating_single_service.html\">selectively forward requests to a local process</a> running in debug mode, all other request can be forwarded to the real services for example running in a QA or UAT environment</li></ul></li></ul><p><strong>Mocking Dependencies & Verifying Request</strong></p><p>Given a system with service dependencies, as follows:</p><p><img src=\"images/system_in_production.png\" alt=\"System In Production\" style=\"max-width:100%;\"></p><p>MockServer could be used to mock the service dependencies, as follows:</p><p><img itemprop=\"image\" src=\"images/system_under_test_with_mockserver.png\" alt=\"Mocking service dependencies with MockServer\" style=\"max-width:100%;\"></p><p><strong>Isolating Single Service / Application</strong></p><p>A single page application may load static resources such as HTML, CSS and JavaScript from a web server and also make AJAX calls to one or more separate services, as follows:</p><p><img src=\"images/single_page_application.png\" alt=\"Single Page Application\" style=\"max-width:100%;\"></p><p>To isolate a single AJAX service, for development or debugging, the MockServer can selectively forward specific requests to local instance of the service:</p><p><img src=\"images/isolate_single_service_with_mockserver.png\" alt=\"Isolating Single Service\" style=\"max-width:100%;\"></p><p>Using MockServer as a content routing load balancer is described in more detail in the section called <a href=\"/mock_server/isolating_single_service.html\">Isolate Single Service</a>.</p><h2>Why use MockServer as a proxy</h2><p>MockServer allows you to record request from the system-under-test or two analysis an existing system by recording outbound requests.</p><p>This is useful in the following scenarios:</p><ul><li>testing<ul><li>create test assertions that verify the requests the system-under-test has been sent, without needing to mock any requests</li></ul></li><li>analyse existing system<ul><li>record all outbound requests so it is possible to analise and under stand what outbound requests an existing system is making</li></ul></li><li>debug HTTP interactions<ul><li>log all outbound requests so it is possible to visualise all interactions (for example from a browser) to external services. This is particularly important as network analysis tools in browsers such as Chrome do not accurately show all network interactions, such as, favicon.ico requests.  In addition, many proxies do not handle encrypted HTTPS traffic, however, MockServer auto-generates certificates using a single <a target=\"_blank\"href=\"https://github.com/mock-server/mockserver/blob/master/mockserver-core/src/main/resources/org/mockserver/socket/CertificateAuthorityCertificate.pem\">MockServer root CA certificate</a> enabling the root certificate to be <a href=\"/mock_server/HTTPS_TLS.html\">easily imported</a></li></ul></li><li>record & replay<ul><li>all recorded requests can be converted into Java code or JSON expectations to simplify the creation of mocks for complex test scenarios</li></ul></li></ul><p><strong>Recording Requests & Analysing Behaviour</strong></p><p>MockServer can record all proxied requests, as follows:</p><p><img src=\"images/recording_requests_with_mockserver_proxy.png\" alt=\"Recording service requests with MockServer Proxy\" style=\"max-width:100%;\"></p><p><strong>Verifying Request</strong></p><p>MockServer can verify proxied service requests, as follows:</p><p><img src=\"images/system_under_test_with_mockserver_proxy.png\" alt=\"Verifying service requests with MockServer Proxy\" style=\"max-width:100%;\"></p><footer class=\"site-footer\"><div class=\"footer\"><span class=\"right\" itemprop=\"publisher\">&copy; <span itemprop=\"name\">MockServer</span> 2022</span><span class=\"left\"><a href=\"https://plus.google.com/110954472544793839756?rel=author\" class=\"no_link\">James D Bloom</a>                <span itemprop=\"author\" itemscope itemtype=\"https://schema.org/Person\">                    <meta itemprop=\"name\" content=\"James D Bloom\">                    <meta itemprop=\"image\" content=\"https://blog.jamesdbloom.com/jamesdbloom.jpg\">                    <meta itemprop=\"givenName\" content=\"James\">                    <meta itemprop=\"familyName\" content=\"\">                    <meta itemprop=\"gender\" content=\"male\">                </span>        </span><meta itemprop=\"name\" content=\"MockServer\"><meta itemprop=\"description\" content=\"MockServer enables easy mocking of any system you integrate with via HTTP or HTTPS. It also proxies, allowing introspection and modification of proxied traffic, with all proxy protocols (i.e. port forwarding, HTTP, HTTPS, SOCKS4, SOCKS5, etc).\"></div><script defer=\"defer\"  src=\"/scripts/toggle_menu.js\"></script>    <script src=\"https://cdn.jsdelivr.net/gh/google/code-prettify@master/loader/run_prettify.js\"></script>    <script defer=\"defer\"  src=\"/scripts/accordion.js\"></script></footer></div></div></div></body></html>",
  "embeddings": []
}
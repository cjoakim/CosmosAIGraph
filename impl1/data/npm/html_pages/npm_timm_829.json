{
  "libtype": "npm",
  "libname": "timm",
  "url": "http://guigrpa.github.io/timm/",
  "html": "<!DOCTYPE html><html lang=\"en-US\">  <head>    <meta charset=\"UTF-8\"><!-- Begin Jekyll SEO tag v2.7.1 --><title>timm | Immutability helpers with fast reads and acceptable writes</title><meta name=\"generator\" content=\"Jekyll v3.9.0\" /><meta property=\"og:title\" content=\"timm\" /><meta property=\"og:locale\" content=\"en_US\" /><meta name=\"description\" content=\"Immutability helpers with fast reads and acceptable writes\" /><meta property=\"og:description\" content=\"Immutability helpers with fast reads and acceptable writes\" /><link rel=\"canonical\" href=\"http://guigrpa.github.io/timm/\" /><meta property=\"og:url\" content=\"http://guigrpa.github.io/timm/\" /><meta property=\"og:site_name\" content=\"timm\" /><meta name=\"twitter:card\" content=\"summary\" /><meta property=\"twitter:title\" content=\"timm\" /><script type=\"application/ld+json\">{\"headline\":\"timm\",\"description\":\"Immutability helpers with fast reads and acceptable writes\",\"url\":\"http://guigrpa.github.io/timm/\",\"@type\":\"WebSite\",\"name\":\"timm\",\"@context\":\"https://schema.org\"}</script><!-- End Jekyll SEO tag -->    <link rel=\"preconnect\" href=\"https://fonts.gstatic.com\">    <link rel=\"preload\" href=\"https://fonts.googleapis.com/css?family=Open+Sans:400,700&display=swap\" as=\"style\" type=\"text/css\" crossorigin>    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">    <meta name=\"theme-color\" content=\"#157878\">    <meta name=\"apple-mobile-web-app-status-bar-style\" content=\"black-translucent\">    <link rel=\"stylesheet\" href=\"/timm/assets/css/style.css?v=ead4f318306835c49c4c79b570e4119c38e56a44\">    <!-- start custom head snippets, customize with your own _includes/head-custom.html file --><!-- Setup Google Analytics --><!-- You can set your favicon here --><!-- link rel=\"shortcut icon\" type=\"image/x-icon\" href=\"/timm/favicon.ico\" --><!-- end custom head snippets -->  </head>  <body>    <a id=\"skip-to-content\" href=\"#content\">Skip to the content.</a>    <header class=\"page-header\" role=\"banner\">      <h1 class=\"project-name\">timm</h1>      <h2 class=\"project-tagline\">Immutability helpers with fast reads and acceptable writes</h2>              <a href=\"https://github.com/guigrpa/timm\" class=\"btn\">View on GitHub</a>                </header>    <main id=\"content\" class=\"main-content\" role=\"main\">      <h1 id=\"timm--\">timm <a href=\"https://github.com/guigrpa/timm/actions\"><img src=\"https://github.com/guigrpa/timm/workflows/Tests/badge.svg\" alt=\"Build Status\" /></a> <a href=\"https://www.npmjs.com/package/timm\"><img src=\"https://img.shields.io/npm/v/timm.svg\" alt=\"npm version\" /></a></h1><p>Immutability helpers with fast reads and acceptable writes (<a href=\"http://guigrpa.github.io/2016/06/16/painless-immutability/\">blog post</a>)</p><h2 id=\"installation\">Installation</h2><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>$ npm install --save timm</code></pre></div></div><h2 id=\"motivation\">Motivation</h2><p>I know, I know\u2026 the world doesn\u2019t need yet another immutability library, especially with the likes of <a href=\"http://facebook.github.io/immutable-js/\">ImmutableJS</a> and <a href=\"https://github.com/rtfeldman/seamless-immutable\">seamless-immutable</a> around.</p><p>And yet\u2026 I felt the urge, at least just to cover my limited needs. ImmutableJS is a solid, comprehensive and highly-performant solution, but this power comes at a price: mixing up ImmutableJS\u2019s Maps and Lists with your plain objects can cause some friction, and reading those objects (in my case, more often than writing them) isn\u2019t that convenient.</p><p>On the other side, <em>seamless-immutable</em> solves the \u201cfriction\u201d problem by using plain objects and arrays, but seems to have some performance issues (at least in my benchmarks, see below).</p><p><em>timm</em>\u2019s approach: use plain objects and arrays and provide simple mutation functions to handle most common operations (suggestions are welcome!). As a bonus, <em>timm</em> creates new objects <em>lazily</em>, when it confirms that the operation will mutate the input object; in other words, <strong>operations that don\u2019t modify an object always return the object itself</strong>. This alleviates pressure on the garbage collector and lets you easily check whether an object changed after an operation: <code class=\"language-plaintext highlighter-rouge\">merge(obj, { a: 3 }) === obj</code>.</p><p><strong>Important notice:</strong> <em>timm</em> does <em>not</em> freeze the objects it provides. In other words, it doesn\u2019t protect you against inadvertently modifying them in your code. I considered deeply freezing all objects with <code class=\"language-plaintext highlighter-rouge\">Object.freeze()</code>, but it is really slow. Then I considered doing this only in development (like <a href=\"https://github.com/rtfeldman/seamless-immutable#performance\"><em>seamless-immutable</em></a>), but then modifying frozen objects will silently fail in development (unless you <code class=\"language-plaintext highlighter-rouge\">use strict</code> in your code), and \u2013worse still\u2013 succeed in production. Not good. In conclusion, <strong>be careful</strong> (or send me a suggestion to work around this!).</p><p>\u2026Oh, I almost forgot! It\u2019s <strong>tiny: just ~200 LOC and ~1.5 kB minified &amp; compressed!</strong></p><h2 id=\"benchmarks\">Benchmarks</h2><p>I prepared an initial benchmarking tool comparing read/write speeds in four cases:</p><ul>  <li>In-place editing (mutable)</li>  <li><a href=\"http://facebook.github.io/immutable-js/\">ImmutableJS</a></li>  <li><a href=\"https://github.com/guigrpa/timm\">timm</a></li>  <li><a href=\"https://github.com/rtfeldman/seamless-immutable\">seamless-immutable</a></li>  <li><a href=\"https://github.com/kolodny/immutability-helper\">immutability-helper</a></li></ul><p>All five solutions are first verified for consistency (the mutable solution obviously does not pass all tests) and then benchmarked. Benchmarks cover reading and writing object attributes at different nesting levels (root level, 2 levels and 5 levels deep), merging two small objects, and replacing an object in a 1000-long array.</p><p>Feel free to run them yourself (download the repo and then <code class=\"language-plaintext highlighter-rouge\">npm install &amp;&amp; npm run benchmarks</code>). These are my results on OS X for 200k iterations (Node v8.6.0):</p><p><img src=\"https://github.com/guigrpa/timm/blob/master/docs/bechmarks-osx-20180822-node9.11.png?raw=true\" alt=\"Benchmarks\" /></p><p>Some conclusions from these benchmarks:</p><ul>  <li>    <p>Reads are on par with native objects/arrays, <em>seamless-immutable</em> and <em>immutability-helper</em>, and faster than <em>ImmutableJS</em> (the deeper, the faster, even though <em>ImmutableJS</em> has improved read performance substantially in recent versions). In fact, you cannot go faster than native objects for reading!</p>  </li>  <li>    <p>Writes are much slower than in-place edits, as expected, but are much faster than <em>seamless-immutable</em> (even in production mode) and <em>immutability-helper</em>, both for objects and arrays. Compared to <em>ImmutableJS</em>, object writes and merges are faster (the deeper, the faster), whereas array writes are way slower (not as slow as <em>seamless-immutable</em> and <em>immutability-helper</em>, though). For <em>timm</em> and <em>seamless-immutable</em>, write times degrade linearly with array length (and probably object size), but much more slowly for <em>ImmutableJS</em> (logarithmically?). This is where <em>ImmutableJS</em> really shines.</p>  </li>  <li>    <p>Hence, what I recommend (from top to bottom):</p>    <ul>      <li>If you don\u2019t need immutability, well\u2026 just <strong>mutate in peace!</strong> I mean, <em>in place</em></li>      <li>If you need a complete, well-tested, rock-solid library and don\u2019t mind using a non-native API for reads: use <strong>ImmutableJS</strong></li>      <li>If you value using plain arrays/objects above other considerations, use <strong>timm</strong></li>      <li>If your typical use cases involve much more reading than writing, use <strong>timm</strong> as well</li>      <li>If you do a lot of writes, updating items in long arrays or attributes in fat objects, use <strong>ImmutableJS</strong></li>    </ul>  </li></ul><h2 id=\"usage\">Usage</h2><div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">merge</span><span class=\"p\">,</span> <span class=\"kd\">set</span> <span class=\"k\">as</span> <span class=\"nx\">timmSet</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"dl\">'</span><span class=\"s1\">timm</span><span class=\"dl\">'</span><span class=\"p\">;</span><span class=\"kd\">const</span> <span class=\"nx\">obj</span> <span class=\"o\">=</span> <span class=\"nx\">merge</span><span class=\"p\">({</span> <span class=\"na\">a</span><span class=\"p\">:</span> <span class=\"mi\">2</span> <span class=\"p\">},</span> <span class=\"p\">{</span> <span class=\"na\">b</span><span class=\"p\">:</span> <span class=\"mi\">3</span> <span class=\"p\">});</span><span class=\"kd\">const</span> <span class=\"nx\">obj2</span> <span class=\"o\">=</span> <span class=\"nx\">timmSet</span><span class=\"p\">({</span> <span class=\"na\">foo</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">},</span> <span class=\"dl\">'</span><span class=\"s1\">bar</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">);</span></code></pre></div></div><h3 id=\"arrays\">Arrays</h3><h4 id=\"addlast\">addLast()</h4><p>Returns a new array with an appended item or items.</p><p>Usage: <code class=\"language-plaintext highlighter-rouge\">addLast(array, val)</code></p><div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nx\">arr</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"dl\">'</span><span class=\"s1\">a</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"dl\">'</span><span class=\"s1\">b</span><span class=\"dl\">'</span><span class=\"p\">]</span><span class=\"nx\">arr2</span> <span class=\"o\">=</span> <span class=\"nx\">addLast</span><span class=\"p\">(</span><span class=\"nx\">arr</span><span class=\"p\">,</span> <span class=\"dl\">'</span><span class=\"s1\">c</span><span class=\"dl\">'</span><span class=\"p\">)</span><span class=\"c1\">// ['a', 'b', 'c']</span><span class=\"nx\">arr2</span> <span class=\"o\">===</span> <span class=\"nx\">arr</span><span class=\"c1\">// false</span><span class=\"nx\">arr3</span> <span class=\"o\">=</span> <span class=\"nx\">addLast</span><span class=\"p\">(</span><span class=\"nx\">arr</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"dl\">'</span><span class=\"s1\">c</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"dl\">'</span><span class=\"s1\">d</span><span class=\"dl\">'</span><span class=\"p\">])</span><span class=\"c1\">// ['a', 'b', 'c', 'd']</span></code></pre></div></div><h4 id=\"addfirst\">addFirst()</h4><p>Returns a new array with a prepended item or items.</p><p>Usage: <code class=\"language-plaintext highlighter-rouge\">addFirst(array, val)</code></p><div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nx\">arr</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"dl\">'</span><span class=\"s1\">a</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"dl\">'</span><span class=\"s1\">b</span><span class=\"dl\">'</span><span class=\"p\">]</span><span class=\"nx\">arr2</span> <span class=\"o\">=</span> <span class=\"nx\">addFirst</span><span class=\"p\">(</span><span class=\"nx\">arr</span><span class=\"p\">,</span> <span class=\"dl\">'</span><span class=\"s1\">c</span><span class=\"dl\">'</span><span class=\"p\">)</span><span class=\"c1\">// ['c', 'a', 'b']</span><span class=\"nx\">arr2</span> <span class=\"o\">===</span> <span class=\"nx\">arr</span><span class=\"c1\">// false</span><span class=\"nx\">arr3</span> <span class=\"o\">=</span> <span class=\"nx\">addFirst</span><span class=\"p\">(</span><span class=\"nx\">arr</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"dl\">'</span><span class=\"s1\">c</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"dl\">'</span><span class=\"s1\">d</span><span class=\"dl\">'</span><span class=\"p\">])</span><span class=\"c1\">// ['c', 'd', 'a', 'b']</span></code></pre></div></div><h4 id=\"removelast\">removeLast()</h4><p>Returns a new array removing the last item.</p><p>Usage: <code class=\"language-plaintext highlighter-rouge\">removeLast(array)</code></p><div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nx\">arr</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"dl\">'</span><span class=\"s1\">a</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"dl\">'</span><span class=\"s1\">b</span><span class=\"dl\">'</span><span class=\"p\">]</span><span class=\"nx\">arr2</span> <span class=\"o\">=</span> <span class=\"nx\">removeLast</span><span class=\"p\">(</span><span class=\"nx\">arr</span><span class=\"p\">)</span><span class=\"c1\">// ['a']</span><span class=\"nx\">arr2</span> <span class=\"o\">===</span> <span class=\"nx\">arr</span><span class=\"c1\">// false</span><span class=\"c1\">// The same array is returned if there are no changes:</span><span class=\"nx\">arr3</span> <span class=\"o\">=</span> <span class=\"p\">[]</span><span class=\"nx\">removeLast</span><span class=\"p\">(</span><span class=\"nx\">arr3</span><span class=\"p\">)</span> <span class=\"o\">===</span> <span class=\"nx\">arr3</span><span class=\"c1\">// true</span></code></pre></div></div><h4 id=\"removefirst\">removeFirst()</h4><p>Returns a new array removing the first item.</p><p>Usage: <code class=\"language-plaintext highlighter-rouge\">removeFirst(array)</code></p><div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nx\">arr</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"dl\">'</span><span class=\"s1\">a</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"dl\">'</span><span class=\"s1\">b</span><span class=\"dl\">'</span><span class=\"p\">]</span><span class=\"nx\">arr2</span> <span class=\"o\">=</span> <span class=\"nx\">removeFirst</span><span class=\"p\">(</span><span class=\"nx\">arr</span><span class=\"p\">)</span><span class=\"c1\">// ['b']</span><span class=\"nx\">arr2</span> <span class=\"o\">===</span> <span class=\"nx\">arr</span><span class=\"c1\">// false</span><span class=\"c1\">// The same array is returned if there are no changes:</span><span class=\"nx\">arr3</span> <span class=\"o\">=</span> <span class=\"p\">[]</span><span class=\"nx\">removeFirst</span><span class=\"p\">(</span><span class=\"nx\">arr3</span><span class=\"p\">)</span> <span class=\"o\">===</span> <span class=\"nx\">arr3</span><span class=\"c1\">// true</span></code></pre></div></div><h4 id=\"insert\">insert()</h4><p>Returns a new array obtained by inserting an item or itemsat a specified index.</p><p>Usage: <code class=\"language-plaintext highlighter-rouge\">insert(array, idx, val)</code></p><div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nx\">arr</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"dl\">'</span><span class=\"s1\">a</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"dl\">'</span><span class=\"s1\">b</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"dl\">'</span><span class=\"s1\">c</span><span class=\"dl\">'</span><span class=\"p\">]</span><span class=\"nx\">arr2</span> <span class=\"o\">=</span> <span class=\"nx\">insert</span><span class=\"p\">(</span><span class=\"nx\">arr</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"dl\">'</span><span class=\"s1\">d</span><span class=\"dl\">'</span><span class=\"p\">)</span><span class=\"c1\">// ['a', 'd', 'b', 'c']</span><span class=\"nx\">arr2</span> <span class=\"o\">===</span> <span class=\"nx\">arr</span><span class=\"c1\">// false</span><span class=\"nx\">insert</span><span class=\"p\">(</span><span class=\"nx\">arr</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"dl\">'</span><span class=\"s1\">d</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"dl\">'</span><span class=\"s1\">e</span><span class=\"dl\">'</span><span class=\"p\">])</span><span class=\"c1\">// ['a', 'd', 'e', 'b', 'c']</span></code></pre></div></div><h4 id=\"removeat\">removeAt()</h4><p>Returns a new array obtained by removing an item ata specified index.</p><p>Usage: <code class=\"language-plaintext highlighter-rouge\">removeAt(array, idx)</code></p><div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nx\">arr</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"dl\">'</span><span class=\"s1\">a</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"dl\">'</span><span class=\"s1\">b</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"dl\">'</span><span class=\"s1\">c</span><span class=\"dl\">'</span><span class=\"p\">]</span><span class=\"nx\">arr2</span> <span class=\"o\">=</span> <span class=\"nx\">removeAt</span><span class=\"p\">(</span><span class=\"nx\">arr</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"c1\">// ['a', 'c']</span><span class=\"nx\">arr2</span> <span class=\"o\">===</span> <span class=\"nx\">arr</span><span class=\"c1\">// false</span><span class=\"c1\">// The same array is returned if there are no changes:</span><span class=\"nx\">removeAt</span><span class=\"p\">(</span><span class=\"nx\">arr</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">)</span> <span class=\"o\">===</span> <span class=\"nx\">arr</span><span class=\"c1\">// true</span></code></pre></div></div><h4 id=\"replaceat\">replaceAt()</h4><p>Returns a new array obtained by replacing an item ata specified index. If the provided item is the same as(<em>referentially equal to</em>) the previous item at that position,the original array is returned.</p><p>Usage: <code class=\"language-plaintext highlighter-rouge\">replaceAt(array, idx, newItem)</code></p><div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nx\">arr</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"dl\">'</span><span class=\"s1\">a</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"dl\">'</span><span class=\"s1\">b</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"dl\">'</span><span class=\"s1\">c</span><span class=\"dl\">'</span><span class=\"p\">]</span><span class=\"nx\">arr2</span> <span class=\"o\">=</span> <span class=\"nx\">replaceAt</span><span class=\"p\">(</span><span class=\"nx\">arr</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"dl\">'</span><span class=\"s1\">d</span><span class=\"dl\">'</span><span class=\"p\">)</span><span class=\"c1\">// ['a', 'd', 'c']</span><span class=\"nx\">arr2</span> <span class=\"o\">===</span> <span class=\"nx\">arr</span><span class=\"c1\">// false</span><span class=\"c1\">// The same object is returned if there are no changes:</span><span class=\"nx\">replaceAt</span><span class=\"p\">(</span><span class=\"nx\">arr</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"dl\">'</span><span class=\"s1\">b</span><span class=\"dl\">'</span><span class=\"p\">)</span> <span class=\"o\">===</span> <span class=\"nx\">arr</span><span class=\"c1\">// true</span></code></pre></div></div><h3 id=\"collections-objects-and-arrays\">Collections (objects and arrays)</h3><h4 id=\"getin\">getIn()</h4><p>Returns a value from an object at a given path. Works withnested arrays and objects. If the path does not exist, it returns<code class=\"language-plaintext highlighter-rouge\">undefined</code>.</p><p>Usage: <code class=\"language-plaintext highlighter-rouge\">getIn(obj, path)</code></p><div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nx\">obj</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"na\">a</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"na\">b</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"na\">d</span><span class=\"p\">:</span> <span class=\"p\">{</span> <span class=\"na\">d1</span><span class=\"p\">:</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"na\">d2</span><span class=\"p\">:</span> <span class=\"mi\">4</span> <span class=\"p\">},</span> <span class=\"na\">e</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"dl\">'</span><span class=\"s1\">a</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"dl\">'</span><span class=\"s1\">b</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"dl\">'</span><span class=\"s1\">c</span><span class=\"dl\">'</span><span class=\"p\">]</span> <span class=\"p\">}</span><span class=\"nx\">getIn</span><span class=\"p\">(</span><span class=\"nx\">obj</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"dl\">'</span><span class=\"s1\">d</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"dl\">'</span><span class=\"s1\">d1</span><span class=\"dl\">'</span><span class=\"p\">])</span><span class=\"c1\">// 3</span><span class=\"nx\">getIn</span><span class=\"p\">(</span><span class=\"nx\">obj</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"dl\">'</span><span class=\"s1\">e</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">])</span><span class=\"c1\">// 'b'</span></code></pre></div></div><h4 id=\"set\">set()</h4><p>Returns a new object with a modified attribute.If the provided value is the same as (<em>referentially equal to</em>)the previous value, the original object is returned.</p><p>Usage: <code class=\"language-plaintext highlighter-rouge\">set(obj, key, val)</code></p><div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nx\">obj</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"na\">a</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"na\">b</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"na\">c</span><span class=\"p\">:</span> <span class=\"mi\">3</span> <span class=\"p\">}</span><span class=\"nx\">obj2</span> <span class=\"o\">=</span> <span class=\"kd\">set</span><span class=\"p\">(</span><span class=\"nx\">obj</span><span class=\"p\">,</span> <span class=\"dl\">'</span><span class=\"s1\">b</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">)</span><span class=\"c1\">// { a: 1, b: 5, c: 3 }</span><span class=\"nx\">obj2</span> <span class=\"o\">===</span> <span class=\"nx\">obj</span><span class=\"c1\">// false</span><span class=\"c1\">// The same object is returned if there are no changes:</span><span class=\"kd\">set</span><span class=\"p\">(</span><span class=\"nx\">obj</span><span class=\"p\">,</span> <span class=\"dl\">'</span><span class=\"s1\">b</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"o\">===</span> <span class=\"nx\">obj</span><span class=\"c1\">// true</span></code></pre></div></div><h4 id=\"setin\">setIn()</h4><p>Returns a new object with a modified <strong>nested</strong> attribute.</p><p>Notes:</p><ul>  <li>If the provided value is the same as (<em>referentially equal to</em>)the previous value, the original object is returned.</li>  <li>If the path does not exist, it will be created before settingthe new value.</li></ul><p>Usage: <code class=\"language-plaintext highlighter-rouge\">setIn(obj, path, val)</code></p><div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nx\">obj</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"na\">a</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"na\">b</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"na\">d</span><span class=\"p\">:</span> <span class=\"p\">{</span> <span class=\"na\">d1</span><span class=\"p\">:</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"na\">d2</span><span class=\"p\">:</span> <span class=\"mi\">4</span> <span class=\"p\">},</span> <span class=\"na\">e</span><span class=\"p\">:</span> <span class=\"p\">{</span> <span class=\"na\">e1</span><span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">foo</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"na\">e2</span><span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">bar</span><span class=\"dl\">'</span> <span class=\"p\">}</span> <span class=\"p\">}</span><span class=\"nx\">obj2</span> <span class=\"o\">=</span> <span class=\"nx\">setIn</span><span class=\"p\">(</span><span class=\"nx\">obj</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"dl\">'</span><span class=\"s1\">d</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"dl\">'</span><span class=\"s1\">d1</span><span class=\"dl\">'</span><span class=\"p\">],</span> <span class=\"mi\">4</span><span class=\"p\">)</span><span class=\"c1\">// { a: 1, b: 2, d: { d1: 4, d2: 4 }, e: { e1: 'foo', e2: 'bar' } }</span><span class=\"nx\">obj2</span> <span class=\"o\">===</span> <span class=\"nx\">obj</span><span class=\"c1\">// false</span><span class=\"nx\">obj2</span><span class=\"p\">.</span><span class=\"nx\">d</span> <span class=\"o\">===</span> <span class=\"nx\">obj</span><span class=\"p\">.</span><span class=\"nx\">d</span><span class=\"c1\">// false</span><span class=\"nx\">obj2</span><span class=\"p\">.</span><span class=\"nx\">e</span> <span class=\"o\">===</span> <span class=\"nx\">obj</span><span class=\"p\">.</span><span class=\"nx\">e</span><span class=\"c1\">// true</span><span class=\"c1\">// The same object is returned if there are no changes:</span><span class=\"nx\">obj3</span> <span class=\"o\">=</span> <span class=\"nx\">setIn</span><span class=\"p\">(</span><span class=\"nx\">obj</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"dl\">'</span><span class=\"s1\">d</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"dl\">'</span><span class=\"s1\">d1</span><span class=\"dl\">'</span><span class=\"p\">],</span> <span class=\"mi\">3</span><span class=\"p\">)</span><span class=\"c1\">// { a: 1, b: 2, d: { d1: 3, d2: 4 }, e: { e1: 'foo', e2: 'bar' } }</span><span class=\"nx\">obj3</span> <span class=\"o\">===</span> <span class=\"nx\">obj</span><span class=\"c1\">// true</span><span class=\"nx\">obj3</span><span class=\"p\">.</span><span class=\"nx\">d</span> <span class=\"o\">===</span> <span class=\"nx\">obj</span><span class=\"p\">.</span><span class=\"nx\">d</span><span class=\"c1\">// true</span><span class=\"nx\">obj3</span><span class=\"p\">.</span><span class=\"nx\">e</span> <span class=\"o\">===</span> <span class=\"nx\">obj</span><span class=\"p\">.</span><span class=\"nx\">e</span><span class=\"c1\">// true</span><span class=\"c1\">// ... unknown paths create intermediate keys. Numeric segments are treated as array indices:</span><span class=\"nx\">setIn</span><span class=\"p\">({</span> <span class=\"na\">a</span><span class=\"p\">:</span> <span class=\"mi\">3</span> <span class=\"p\">},</span> <span class=\"p\">[</span><span class=\"dl\">'</span><span class=\"s1\">unknown</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"dl\">'</span><span class=\"s1\">path</span><span class=\"dl\">'</span><span class=\"p\">],</span> <span class=\"mi\">4</span><span class=\"p\">)</span><span class=\"c1\">// { a: 3, unknown: [{ path: 4 }] }</span></code></pre></div></div><h4 id=\"update\">update()</h4><p>Returns a new object with a modified attribute,calculated via a user-provided callback based on the current value.If the calculated value is the same as (<em>referentially equal to</em>)the previous value, the original object is returned.</p><p>Usage: <code class=\"language-plaintext highlighter-rouge\">update(obj, key, fnUpdate)</code></p><div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nx\">obj</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"na\">a</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"na\">b</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"na\">c</span><span class=\"p\">:</span> <span class=\"mi\">3</span> <span class=\"p\">}</span><span class=\"nx\">obj2</span> <span class=\"o\">=</span> <span class=\"nx\">update</span><span class=\"p\">(</span><span class=\"nx\">obj</span><span class=\"p\">,</span> <span class=\"dl\">'</span><span class=\"s1\">b</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nx\">val</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">val</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"c1\">// { a: 1, b: 3, c: 3 }</span><span class=\"nx\">obj2</span> <span class=\"o\">===</span> <span class=\"nx\">obj</span><span class=\"c1\">// false</span><span class=\"c1\">// The same object is returned if there are no changes:</span><span class=\"nx\">update</span><span class=\"p\">(</span><span class=\"nx\">obj</span><span class=\"p\">,</span> <span class=\"dl\">'</span><span class=\"s1\">b</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nx\">val</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">val</span><span class=\"p\">)</span> <span class=\"o\">===</span> <span class=\"nx\">obj</span><span class=\"c1\">// true</span></code></pre></div></div><h4 id=\"updatein\">updateIn()</h4><p>Returns a new object with a modified <strong>nested</strong> attribute,calculated via a user-provided callback based on the current value.If the calculated value is the same as (<em>referentially equal to</em>)the previous value, the original object is returned.</p><p>Usage: <code class=\"language-plaintext highlighter-rouge\">updateIn&lt;T: ArrayOrObject&gt;(obj: T, path: Array&lt;Key&gt;,fnUpdate: (prevValue: any) =&gt; any): T</code></p><div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nx\">obj</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"na\">a</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"na\">d</span><span class=\"p\">:</span> <span class=\"p\">{</span> <span class=\"na\">d1</span><span class=\"p\">:</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"na\">d2</span><span class=\"p\">:</span> <span class=\"mi\">4</span> <span class=\"p\">}</span> <span class=\"p\">}</span><span class=\"nx\">obj2</span> <span class=\"o\">=</span> <span class=\"nx\">updateIn</span><span class=\"p\">(</span><span class=\"nx\">obj</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"dl\">'</span><span class=\"s1\">d</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"dl\">'</span><span class=\"s1\">d1</span><span class=\"dl\">'</span><span class=\"p\">],</span> <span class=\"p\">(</span><span class=\"nx\">val</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">val</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"c1\">// { a: 1, d: { d1: 4, d2: 4 } }</span><span class=\"nx\">obj2</span> <span class=\"o\">===</span> <span class=\"nx\">obj</span><span class=\"c1\">// false</span><span class=\"c1\">// The same object is returned if there are no changes:</span><span class=\"nx\">obj3</span> <span class=\"o\">=</span> <span class=\"nx\">updateIn</span><span class=\"p\">(</span><span class=\"nx\">obj</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"dl\">'</span><span class=\"s1\">d</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"dl\">'</span><span class=\"s1\">d1</span><span class=\"dl\">'</span><span class=\"p\">],</span> <span class=\"p\">(</span><span class=\"nx\">val</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">val</span><span class=\"p\">)</span><span class=\"c1\">// { a: 1, d: { d1: 3, d2: 4 } }</span><span class=\"nx\">obj3</span> <span class=\"o\">===</span> <span class=\"nx\">obj</span><span class=\"c1\">// true</span></code></pre></div></div><h4 id=\"merge\">merge()</h4><p>Returns a new object built as follows: the overlapping keys from thesecond one overwrite the corresponding entries from the first one.Similar to <code class=\"language-plaintext highlighter-rouge\">Object.assign()</code>, but immutable.</p><p>Usage:</p><ul>  <li><code class=\"language-plaintext highlighter-rouge\">merge(obj1, obj2)</code></li>  <li><code class=\"language-plaintext highlighter-rouge\">merge(obj1, ...objects)</code></li></ul><p>The unmodified <code class=\"language-plaintext highlighter-rouge\">obj1</code> is returned if <code class=\"language-plaintext highlighter-rouge\">obj2</code> does not <em>provide somethingnew to</em> <code class=\"language-plaintext highlighter-rouge\">obj1</code>, i.e. if either of the followingconditions are true:</p><ul>  <li><code class=\"language-plaintext highlighter-rouge\">obj2</code> is <code class=\"language-plaintext highlighter-rouge\">null</code> or <code class=\"language-plaintext highlighter-rouge\">undefined</code></li>  <li><code class=\"language-plaintext highlighter-rouge\">obj2</code> is an object, but it is empty</li>  <li>All attributes of <code class=\"language-plaintext highlighter-rouge\">obj2</code> are <code class=\"language-plaintext highlighter-rouge\">undefined</code></li>  <li>All attributes of <code class=\"language-plaintext highlighter-rouge\">obj2</code> are referentially equal to thecorresponding attributes of <code class=\"language-plaintext highlighter-rouge\">obj1</code></li></ul><p>Note that <code class=\"language-plaintext highlighter-rouge\">undefined</code> attributes in <code class=\"language-plaintext highlighter-rouge\">obj2</code> do not modify thecorresponding attributes in <code class=\"language-plaintext highlighter-rouge\">obj1</code>.</p><div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nx\">obj1</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"na\">a</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"na\">b</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"na\">c</span><span class=\"p\">:</span> <span class=\"mi\">3</span> <span class=\"p\">}</span><span class=\"nx\">obj2</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"na\">c</span><span class=\"p\">:</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"na\">d</span><span class=\"p\">:</span> <span class=\"mi\">5</span> <span class=\"p\">}</span><span class=\"nx\">obj3</span> <span class=\"o\">=</span> <span class=\"nx\">merge</span><span class=\"p\">(</span><span class=\"nx\">obj1</span><span class=\"p\">,</span> <span class=\"nx\">obj2</span><span class=\"p\">)</span><span class=\"c1\">// { a: 1, b: 2, c: 4, d: 5 }</span><span class=\"nx\">obj3</span> <span class=\"o\">===</span> <span class=\"nx\">obj1</span><span class=\"c1\">// false</span><span class=\"c1\">// The same object is returned if there are no changes:</span><span class=\"nx\">merge</span><span class=\"p\">(</span><span class=\"nx\">obj1</span><span class=\"p\">,</span> <span class=\"p\">{</span> <span class=\"na\">c</span><span class=\"p\">:</span> <span class=\"mi\">3</span> <span class=\"p\">})</span> <span class=\"o\">===</span> <span class=\"nx\">obj1</span><span class=\"c1\">// true</span></code></pre></div></div><h4 id=\"mergedeep\">mergeDeep()</h4><p>Returns a new object built as follows: the overlapping keys from thesecond one overwrite the corresponding entries from the first one.If both the first and second entries are objects they are merged recursively.Similar to <code class=\"language-plaintext highlighter-rouge\">Object.assign()</code>, but immutable, and deeply merging.</p><p>Usage:</p><ul>  <li><code class=\"language-plaintext highlighter-rouge\">mergeDeep(obj1, obj2)</code></li>  <li><code class=\"language-plaintext highlighter-rouge\">mergeDeep(obj1, ...objects)</code></li></ul><p>The unmodified <code class=\"language-plaintext highlighter-rouge\">obj1</code> is returned if <code class=\"language-plaintext highlighter-rouge\">obj2</code> does not <em>provide somethingnew to</em> <code class=\"language-plaintext highlighter-rouge\">obj1</code>, i.e. if either of the followingconditions are true:</p><ul>  <li><code class=\"language-plaintext highlighter-rouge\">obj2</code> is <code class=\"language-plaintext highlighter-rouge\">null</code> or <code class=\"language-plaintext highlighter-rouge\">undefined</code></li>  <li><code class=\"language-plaintext highlighter-rouge\">obj2</code> is an object, but it is empty</li>  <li>All attributes of <code class=\"language-plaintext highlighter-rouge\">obj2</code> are <code class=\"language-plaintext highlighter-rouge\">undefined</code></li>  <li>All attributes of <code class=\"language-plaintext highlighter-rouge\">obj2</code> are referentially equal to thecorresponding attributes of <code class=\"language-plaintext highlighter-rouge\">obj1</code></li></ul><p>Note that <code class=\"language-plaintext highlighter-rouge\">undefined</code> attributes in <code class=\"language-plaintext highlighter-rouge\">obj2</code> do not modify thecorresponding attributes in <code class=\"language-plaintext highlighter-rouge\">obj1</code>.</p><div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nx\">obj1</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"na\">a</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"na\">b</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"na\">c</span><span class=\"p\">:</span> <span class=\"p\">{</span> <span class=\"na\">a</span><span class=\"p\">:</span> <span class=\"mi\">1</span> <span class=\"p\">}</span> <span class=\"p\">}</span><span class=\"nx\">obj2</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"na\">b</span><span class=\"p\">:</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"na\">c</span><span class=\"p\">:</span> <span class=\"p\">{</span> <span class=\"na\">b</span><span class=\"p\">:</span> <span class=\"mi\">2</span> <span class=\"p\">}</span> <span class=\"p\">}</span><span class=\"nx\">obj3</span> <span class=\"o\">=</span> <span class=\"nx\">mergeDeep</span><span class=\"p\">(</span><span class=\"nx\">obj1</span><span class=\"p\">,</span> <span class=\"nx\">obj2</span><span class=\"p\">)</span><span class=\"c1\">// { a: 1, b: 3, c: { a: 1, b: 2 }  }</span><span class=\"nx\">obj3</span> <span class=\"o\">===</span> <span class=\"nx\">obj1</span><span class=\"c1\">// false</span><span class=\"c1\">// The same object is returned if there are no changes:</span><span class=\"nx\">mergeDeep</span><span class=\"p\">(</span><span class=\"nx\">obj1</span><span class=\"p\">,</span> <span class=\"p\">{</span> <span class=\"na\">c</span><span class=\"p\">:</span> <span class=\"p\">{</span> <span class=\"na\">a</span><span class=\"p\">:</span> <span class=\"mi\">1</span> <span class=\"p\">}</span> <span class=\"p\">})</span> <span class=\"o\">===</span> <span class=\"nx\">obj1</span><span class=\"c1\">// true</span></code></pre></div></div><h4 id=\"mergein\">mergeIn()</h4><p>Similar to <code class=\"language-plaintext highlighter-rouge\">merge()</code>, but merging the value at a given nested path.</p><p>Usage examples:</p><ul>  <li><code class=\"language-plaintext highlighter-rouge\">mergeIn(obj1, path, obj2)</code></li>  <li><code class=\"language-plaintext highlighter-rouge\">mergeIn(obj1, path, ...objects)</code></li></ul><div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nx\">obj1</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"na\">a</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"na\">d</span><span class=\"p\">:</span> <span class=\"p\">{</span> <span class=\"na\">b</span><span class=\"p\">:</span> <span class=\"p\">{</span> <span class=\"na\">d1</span><span class=\"p\">:</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"na\">d2</span><span class=\"p\">:</span> <span class=\"mi\">4</span> <span class=\"p\">}</span> <span class=\"p\">}</span> <span class=\"p\">}</span><span class=\"nx\">obj2</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"na\">d3</span><span class=\"p\">:</span> <span class=\"mi\">5</span> <span class=\"p\">}</span><span class=\"nx\">obj3</span> <span class=\"o\">=</span> <span class=\"nx\">mergeIn</span><span class=\"p\">(</span><span class=\"nx\">obj1</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"dl\">'</span><span class=\"s1\">d</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"dl\">'</span><span class=\"s1\">b</span><span class=\"dl\">'</span><span class=\"p\">],</span> <span class=\"nx\">obj2</span><span class=\"p\">)</span><span class=\"c1\">// { a: 1, d: { b: { d1: 3, d2: 4, d3: 5 } } }</span><span class=\"nx\">obj3</span> <span class=\"o\">===</span> <span class=\"nx\">obj1</span><span class=\"c1\">// false</span><span class=\"c1\">// The same object is returned if there are no changes:</span><span class=\"nx\">mergeIn</span><span class=\"p\">(</span><span class=\"nx\">obj1</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"dl\">'</span><span class=\"s1\">d</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"dl\">'</span><span class=\"s1\">b</span><span class=\"dl\">'</span><span class=\"p\">],</span> <span class=\"p\">{</span> <span class=\"na\">d2</span><span class=\"p\">:</span> <span class=\"mi\">4</span> <span class=\"p\">})</span> <span class=\"o\">===</span> <span class=\"nx\">obj1</span><span class=\"c1\">// true</span></code></pre></div></div><h4 id=\"omit\">omit()</h4><p>Returns an object excluding one or several attributes.</p><p>Usage: <code class=\"language-plaintext highlighter-rouge\">omit(obj, attrs)</code></p><div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nx\">obj</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"na\">a</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"na\">b</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"na\">c</span><span class=\"p\">:</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"na\">d</span><span class=\"p\">:</span> <span class=\"mi\">4</span> <span class=\"p\">}</span><span class=\"nx\">omit</span><span class=\"p\">(</span><span class=\"nx\">obj</span><span class=\"p\">,</span> <span class=\"dl\">'</span><span class=\"s1\">a</span><span class=\"dl\">'</span><span class=\"p\">)</span><span class=\"c1\">// { b: 2, c: 3, d: 4 }</span><span class=\"nx\">omit</span><span class=\"p\">(</span><span class=\"nx\">obj</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"dl\">'</span><span class=\"s1\">b</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"dl\">'</span><span class=\"s1\">c</span><span class=\"dl\">'</span><span class=\"p\">])</span><span class=\"c1\">// { a: 1, d: 4 }</span><span class=\"c1\">// The same object is returned if there are no changes:</span><span class=\"nx\">omit</span><span class=\"p\">(</span><span class=\"nx\">obj</span><span class=\"p\">,</span> <span class=\"dl\">'</span><span class=\"s1\">z</span><span class=\"dl\">'</span><span class=\"p\">)</span> <span class=\"o\">===</span> <span class=\"nx\">obj1</span><span class=\"c1\">// true</span></code></pre></div></div><h4 id=\"adddefaults\">addDefaults()</h4><p>Returns a new object built as follows: <code class=\"language-plaintext highlighter-rouge\">undefined</code> keys in the first oneare filled in with the corresponding values from the second one(even if they are <code class=\"language-plaintext highlighter-rouge\">null</code>).</p><p>Usage:</p><ul>  <li><code class=\"language-plaintext highlighter-rouge\">addDefaults(obj, defaults)</code></li>  <li><code class=\"language-plaintext highlighter-rouge\">addDefaults(obj, ...defaultObjects)</code></li></ul><div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nx\">obj1</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"na\">a</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"na\">b</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"na\">c</span><span class=\"p\">:</span> <span class=\"mi\">3</span> <span class=\"p\">}</span><span class=\"nx\">obj2</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"na\">c</span><span class=\"p\">:</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"na\">d</span><span class=\"p\">:</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"na\">e</span><span class=\"p\">:</span> <span class=\"kc\">null</span> <span class=\"p\">}</span><span class=\"nx\">obj3</span> <span class=\"o\">=</span> <span class=\"nx\">addDefaults</span><span class=\"p\">(</span><span class=\"nx\">obj1</span><span class=\"p\">,</span> <span class=\"nx\">obj2</span><span class=\"p\">)</span><span class=\"c1\">// { a: 1, b: 2, c: 3, d: 5, e: null }</span><span class=\"nx\">obj3</span> <span class=\"o\">===</span> <span class=\"nx\">obj1</span><span class=\"c1\">// false</span><span class=\"c1\">// The same object is returned if there are no changes:</span><span class=\"nx\">addDefaults</span><span class=\"p\">(</span><span class=\"nx\">obj1</span><span class=\"p\">,</span> <span class=\"p\">{</span> <span class=\"na\">c</span><span class=\"p\">:</span> <span class=\"mi\">4</span> <span class=\"p\">})</span> <span class=\"o\">===</span> <span class=\"nx\">obj1</span><span class=\"c1\">// true</span></code></pre></div></div><h2 id=\"mit-license\">MIT license</h2><p>Copyright (c) <a href=\"https://github.com/guigrpa\">Guillermo Grau Panea</a> 2016-present</p><p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \u201cSoftware\u201d), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p><p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p><p>THE SOFTWARE IS PROVIDED \u201cAS IS\u201d, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>      <footer class=\"site-footer\">                  <span class=\"site-footer-owner\"><a href=\"https://github.com/guigrpa/timm\">timm</a> is maintained by <a href=\"https://github.com/guigrpa\">guigrpa</a>.</span>                <span class=\"site-footer-credits\">This page was generated by <a href=\"https://pages.github.com\">GitHub Pages</a>.</span>      </footer>    </main>  </body></html>",
  "embeddings": []
}
{
  "classifiers": [
    "development status :: 5 - production/stable",
    "license :: osi approved :: mit license",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.12",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9"
  ],
  "description": "<!-- markdownlint-disable -->\n![notion-sdk-py](https://socialify.git.ci/ramnes/notion-sdk-py/image?font=bitter&language=1&logo=https%3a%2f%2fupload.wikimedia.org%2fwikipedia%2fcommons%2f4%2f45%2fnotion_app_logo.png&owner=1&pattern=circuit%20board&theme=light)\n\n<div align=\"center\">\n  <p>\n    <a href=\"https://pypi.org/project/notion-client\"><img src=\"https://img.shields.io/pypi/v/notion-client.svg\" alt=\"pypi\"></a>\n    <a href=\"tox.ini\"><img src=\"https://img.shields.io/pypi/pyversions/notion-client\" alt=\"supported python versions\"></a>\n    <br/>\n    <a href=\"license\"><img src=\"https://img.shields.io/github/license/ramnes/notion-sdk-py\" alt=\"license\"></a>\n    <a href=\"https://github.com/ambv/black\"><img src=\"https://img.shields.io/badge/code%20style-black-black\" alt=\"code style\"></a>\n    <a href=\"https://codecov.io/github/ramnes/notion-sdk-py\"><img src=\"https://codecov.io/gh/ramnes/notion-sdk-py/branch/main/graphs/badge.svg\" alt=\"coverage\"></a>\n    <a href=\"https://snyk.io/advisor/python/notion-client\"><img src=\"https://snyk.io/advisor/python/notion-client/badge.svg\" alt=\"package health\"></a>\n    <br/>\n    <a href=\"https://github.com/ramnes/notion-sdk-py/actions/workflows/quality.yml\"><img src=\"https://github.com/ramnes/notion-sdk-py/actions/workflows/quality.yml/badge.svg\" alt=\"code quality\"></a>\n    <a href=\"https://github.com/ramnes/notion-sdk-py/actions/workflows/test.yml\"><img src=\"https://github.com/ramnes/notion-sdk-py/actions/workflows/test.yml/badge.svg\" alt=\"tests\"></a>\n    <a href=\"https://github.com/ramnes/notion-sdk-py/actions/workflows/docs.yml\"><img src=\"https://github.com/ramnes/notion-sdk-py/actions/workflows/docs.yml/badge.svg\" alt=\"docs\"></a>\n  </p>\n</div>\n<!-- markdownlint-enable -->\n\n**_notion-sdk-py_ is a simple and easy to use client library for the official\n[notion api](https://developers.notion.com/).**\n\nit is meant to be a python version of the reference [javascript sdk](https://github.com/makenotion/notion-sdk-js),\nso usage should be pretty similar between both. \ud83d\ude0a\n\n> \ud83d\udce2 **announcement** (04-11-2023) \u2014 release 2.1.0 is out! it adds new helpers,\n> more tests (100% coverage, yay!) and support for python 3.12. also, we're out\n> of beta and now consider the package stable.\n\n<!-- markdownlint-disable -->\n## installation\n<!-- markdownlint-enable -->\n```shell\npip install notion-client\n```\n\n## usage\n\n> use notion's [getting started guide](https://developers.notion.com/docs/getting-started)\n> to get set up to use notion's api.\n\nimport and initialize a client using an **integration token** or an\noauth **access token**.\n\n```python\nimport os\nfrom notion_client import client\n\nnotion = client(auth=os.environ[\"notion_token\"])\n```\n\nin an asyncio environment, use the asynchronous client instead:\n\n```python\nfrom notion_client import asyncclient\n\nnotion = asyncclient(auth=os.environ[\"notion_token\"])\n```\n\nmake a request to any notion api endpoint.\n\n> see the complete list of endpoints in the [api reference](https://developers.notion.com/reference).\n\n```python\nfrom pprint import pprint\n\nlist_users_response = notion.users.list()\npprint(list_users_response)\n```\n\nor with the asynchronous client:\n\n```python\nlist_users_response = await notion.users.list()\npprint(list_users_response)\n```\n\nthis would output something like:\n\n```text\n{'results': [{'avatar_url': 'https://secure.notion-static.com/e6a352a8-8381-44d0-a1dc-9ed80e62b53d.jpg',\n              'id': 'd40e767c-d7af-4b18-a86d-55c61f1e39a4',\n              'name': 'avocado lovelace',\n              'object': 'user',\n              'person': {'email': 'avo@example.org'},\n              'type': 'person'},\n             ...]}\n```\n\nall api endpoints are available in both the synchronous and asynchronous clients.\n\nendpoint parameters are grouped into a single object. you don't need to remember\nwhich parameters go in the path, query, or body.\n\n```python\nmy_page = notion.databases.query(\n    **{\n        \"database_id\": \"897e5a76-ae52-4b48-9fdf-e71f5945d1af\",\n        \"filter\": {\n            \"property\": \"landmark\",\n            \"rich_text\": {\n                \"contains\": \"bridge\",\n            },\n        },\n    }\n)\n```\n\n### handling errors\n\nif the api returns an unsuccessful response, an `apiresponseerror` will be raised.\n\nthe error contains properties from the response, and the most helpful is `code`.\nyou can compare `code` to the values in the `apierrorcode` object to avoid\nmisspelling error codes.\n\n```python\nimport logging\nfrom notion_client import apierrorcode, apiresponseerror\n\ntry:\n    my_page = notion.databases.query(\n        **{\n            \"database_id\": \"897e5a76-ae52-4b48-9fdf-e71f5945d1af\",\n            \"filter\": {\n                \"property\": \"landmark\",\n                \"rich_text\": {\n                    \"contains\": \"bridge\",\n                },\n            },\n        }\n    )\nexcept apiresponseerror as error:\n    if error.code == apierrorcode.objectnotfound:\n        ...  # for example: handle by asking the user to select a different database\n    else:\n        # other error handling code\n        logging.error(error)\n```\n\n### logging\n\nthe client emits useful information to a logger. by default, it only emits warnings\nand errors.\n\nif you're debugging an application, and would like the client to log request & response\nbodies, set the `log_level` option to `logging.debug`.\n\n```python\nnotion = client(\n    auth=os.environ[\"notion_token\"],\n    log_level=logging.debug,\n)\n```\n\nyou may also set a custom `logger` to emit logs to a destination other than `stdout`.\nhave a look at [python's logging cookbook](https://docs.python.org/3/howto/logging-cookbook.html)\nif you want to create your own logger.\n\n### client options\n\n`client` and `asyncclient` both support the following options on initialization.\nthese options are all keys in the single constructor parameter.\n\n<!-- markdownlint-disable -->\n| option | default value | type | description |\n|--------|---------------|---------|-------------|\n| `auth` | `none` | `string` | bearer token for authentication. if left undefined, the `auth` parameter should be set on each request. |\n| `log_level` | `logging.warning` | `int` | verbosity of logs the instance will produce. by default, logs are written to `stdout`.\n| `timeout_ms` | `60_000` | `int` | number of milliseconds to wait before emitting a `requesttimeouterror` |\n| `base_url` | `\"https://api.notion.com\"` | `string` | the root url for sending api requests. this can be changed to test with a mock server. |\n| `logger` | log to console | `logging.logger` | a custom logger. |\n\n### full api responses\n\nthe following functions can distinguish between full and partial api responses.\n\n| function                   | purpose                                                                                                                                                                  |\n| -------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |\n| `is_full_page`             | determine whether an object is a full [page object](https://developers.notion.com/reference/page)                                                                        |\n| `is_full_block`            | determine whether an object is a full [block object](https://developers.notion.com/reference/block)                                                                      |\n| `is_full_database`         | determine whether an object is a full [database object](https://developers.notion.com/reference/database)                                                                |\n| `is_full_page_or_database` | determine whether an object is a full [page object](https://developers.notion.com/reference/page) or [database object](https://developers.notion.com/reference/database) |\n| `is_full_user`             | determine whether an object is a full [user object](https://developers.notion.com/reference/user)                                                                        |\n| `is_full_comment`          | determine whether an object is a full [comment object](https://developers.notion.com/reference/comment-object)                                                           |\n<!-- markdownlint-enable -->\n\n```python\nfrom notion_client.helpers import is_full_page\n\nfull_or_partial_pages = await notion.databases.query(\n    database_id=\"897e5a76-ae52-4b48-9fdf-e71f5945d1af\"\n)\n\nfor page in full_or_partial_pages[\"results\"]:\n    if not is_full_page_or_database(page):\n        continue\n    print(f\"created at: {page['created_time']}\")\n```\n\n### utility functions\n\nthese functions can be helpful for dealing with any of the paginated apis.\n\n`iterate_paginated_api(function, **kwargs)` and its async version\n`async_iterate_paginated_api(function, **kwargs)` turn any paginated api into a generator.\n\nthe `function` parameter must accept a `start_cursor` argument. example: `notion.blocks.children.list`.\n\n```python\nfrom notion_client.helpers import iterate_paginated_api\n\nfor block in iterate_paginated_api(\n    notion.databases.query, database_id=\"897e5a76-ae52-4b48-9fdf-e71f5945d1af\"\n):\n    # do something with block.\n    ...\n```\n\nif you don't need a generator, `collect_paginated_api(function, **kwargs)` and\nits async version `async_collect_paginated_api(function, **kwargs)` have the\nsame behavior than the previous functions, but return a list of all results\nfrom the paginated api.\n\n```python\nfrom notion_client.helpers import collect_paginated_api\n\nall_results = collect_paginated_api(\n    notion.databases.query, database_id=\"897e5a76-ae52-4b48-9fdf-e71f5945d1af\"\n)\n```\n\n## testing\n\nrun the tests with the `pytest` command. if you want to test against all python\nversions, you can run `tox` instead.\n\nthe tests are using `pytest-vcr`'s cassettes for simulating requests to the\nnotion api. to create new tests or run them without cassettes, you need to set\nup the environment variables `notion_token` and `notion_test_page_id` (a page\nwhere your integration has all the capabilities enabled).\n\nthe code will use the page at `notion_test_page_id` to generate a temporary\nenvironment with the notion objects to be tested, which will be deleted\nat the end of the session.\n\n## requirements\n\nthis package supports the following minimum versions:\n\n* python >= 3.7\n* httpx >= 0.15.0\n\nearlier versions may still work, but we encourage people building new applications\nto upgrade to the current stable.\n\n## getting help\n\nif you want to submit a feature request for notion's api, or are experiencing\nany issues with the api platform, please email `developers@makenotion.com`.\n\nif you found a bug with the library, please [submit an issue](https://github.com/ramnes/notion-sdk-py/issues).\n",
  "docs_url": null,
  "keywords": "",
  "license": "",
  "name": "notion-client",
  "package_url": "https://pypi.org/project/notion-client/",
  "project_url": "https://pypi.org/project/notion-client/",
  "project_urls": {
    "Homepage": "https://github.com/ramnes/notion-sdk-py"
  },
  "release_url": "https://pypi.org/project/notion-client/2.1.0/",
  "requires_dist": [
    "httpx (>=0.15.0)"
  ],
  "requires_python": ">=3.7, <4",
  "summary": "python client for the official notion api",
  "version": "2.1.0",
  "releases": [],
  "developers": [
    "contact@ramnes.eu",
    "guillaume_gelin"
  ],
  "kwds": "notion_client notion_token enable disable markdownlint",
  "license_kwds": "",
  "libtype": "pypi",
  "id": "pypi_notion_client",
  "homepage": "https://github.com/ramnes/notion-sdk-py",
  "release_count": 14,
  "dependency_ids": [
    "pypi_httpx"
  ]
}
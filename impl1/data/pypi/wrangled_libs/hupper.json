{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "natural language :: english",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "programming language :: python :: implementation :: cpython",
    "programming language :: python :: implementation :: pypy"
  ],
  "description": "======\nhupper\n======\n\n.. image:: https://img.shields.io/pypi/v/hupper.svg\n    :target: https://pypi.python.org/pypi/hupper\n\n.. image:: https://github.com/pylons/hupper/actions/workflows/ci-tests.yml/badge.svg?branch=main\n    :target: https://github.com/pylons/hupper/actions/workflows/ci-tests.yml?query=branch%3amain\n\n.. image:: https://readthedocs.org/projects/hupper/badge/?version=latest\n    :target: https://readthedocs.org/projects/hupper/?badge=latest\n    :alt: documentation status\n\n``hupper`` is an integrated process monitor that will track changes to\nany imported python files in ``sys.modules`` as well as custom paths. when\nfiles are changed the process is restarted.\n\ncommand-line usage\n==================\n\nhupper can load any python code similar to ``python -m <module>`` by using the\n``hupper -m <module>`` program.\n\n.. code-block:: console\n\n   $ hupper -m myapp\n   starting monitor for pid 23982.\n\napi usage\n=========\n\nstart by defining an entry point for your process. this must be an importable\npath in string format. for example, ``myapp.scripts.serve.main``.\n\n.. code-block:: python\n\n    # myapp/scripts/serve.py\n\n    import sys\n    import hupper\n    import waitress\n\n\n    def wsgi_app(environ, start_response):\n        start_response('200 ok', [('content-type', 'text/plain')])\n        yield b'hello'\n\n\n    def main(args=sys.argv[1:]):\n        if '--reload' in args:\n            # start_reloader will only return in a monitored subprocess\n            reloader = hupper.start_reloader('myapp.scripts.serve.main')\n\n            # monitor an extra file\n            reloader.watch_files(['foo.ini'])\n\n        waitress.serve(wsgi_app)\n\nacknowledgments\n===============\n\n``hupper`` is inspired by initial work done by carl j meyer and david glick\nduring a pycon sprint and is built to be a more robust and generic version of\nian bicking's excellent pastescript ``paste serve --reload`` and pyramid's\n``pserve --reload``.\n",
  "docs_url": null,
  "keywords": "server,daemon,autoreload,reloader,hup,file,watch,process",
  "license": "mit",
  "name": "hupper",
  "package_url": "https://pypi.org/project/hupper/",
  "project_url": "https://pypi.org/project/hupper/",
  "project_urls": {
    "Changelog": "https://docs.pylonsproject.org/projects/hupper/en/latest/changes.html",
    "Documentation": "https://docs.pylonsproject.org/projects/hupper/en/latest/",
    "Homepage": "https://github.com/Pylons/hupper",
    "Issue Tracker": "https://github.com/Pylons/hupper/issues"
  },
  "release_url": "https://pypi.org/project/hupper/1.12/",
  "requires_dist": [
    "watchdog ; extra == 'docs'",
    "setuptools ; extra == 'docs'",
    "Sphinx ; extra == 'docs'",
    "pylons-sphinx-themes ; extra == 'docs'",
    "watchdog ; extra == 'testing'",
    "pytest ; extra == 'testing'",
    "pytest-cov ; extra == 'testing'",
    "mock ; extra == 'testing'"
  ],
  "requires_python": ">=3.7",
  "summary": "integrated process monitor for developing and reloading daemons.",
  "version": "1.12",
  "releases": [],
  "developers": [
    "michael_merickel",
    "pylons-discuss@googlegroups.com"
  ],
  "kwds": "hupper monitored process watch_files workflows",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_hupper",
  "homepage": "https://github.com/pylons/hupper",
  "release_count": 37,
  "dependency_ids": [
    "pypi_mock",
    "pypi_pylons_sphinx_themes",
    "pypi_pytest",
    "pypi_pytest_cov",
    "pypi_setuptools",
    "pypi_sphinx",
    "pypi_watchdog"
  ]
}
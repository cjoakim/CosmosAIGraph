{
  "classifiers": [
    "license :: osi approved :: apache software license",
    "programming language :: python :: 3",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9"
  ],
  "description": "# labelbox python sdk\n\nlabelbox is the enterprise-grade training data solution with fast ai enabled labeling tools, labeling automation, human workforce, data management, a powerful api for integration & sdk for extensibility. visit [labelbox](http://labelbox.com/) for more information.\n\nthe labelbox python api offers a simple, user-friendly way to interact with the labelbox back-end.\n\n## table of contents\n\n- [labelbox python sdk](#labelbox-python-sdk)\n  - [table of contents](#table-of-contents)\n  - [requirements](#requirements)\n  - [installation](#installation)\n    - [note for windows users](#note-for-windows-users)\n  - [documentation](#documentation)\n  - [authentication](#authentication)\n  - [contribution](#contribution)\n  - [testing](#testing)\n\n## requirements\n\n- use python 3.7, 3.8, 3.9 and 3.10\n- [create an account](http://app.labelbox.com/)\n- [generate an api key](https://docs.labelbox.com/docs/create-an-api-key)\n\n## installation\n\nprerequisite: install pip\n\n`pip` is a package manager for python. **on macos**, you can set it up to use the default python3 install via -\n\n```\ncurl https://bootstrap.pypa.io/get-pip.py -o get-pip.py\npython3 get-pip.py\n```\n\nif the installation completes with a warning re: pip not being in your path, you'll need to add it by modifying your shell config (`.zshrc`, `.bashrc` or similar). you might have to modify the command below depending on the version of python3 on your machine.\n\n```\nexport path=/users/<your-macos-username>/library/python/3.8/bin:$path\n```\n\ninstall sdk locally, using python's pip manager\n\n```\npip3 install -e .\n```\n\ninstall dependencies\n\n```\npip3 install -r requirements.txt\n```\n\nto install dependencies required for data processing modules use:\n\n```\npip install \"labelbox[data]\"\n```\n\n## documentation\n\n- [visit our docs](https://docs.labelbox.com/reference) to learn how the sdk works\n- checkout our [notebook examples](examples/) to follow along with interactive tutorials\n- view our [api reference](https://labelbox-python.readthedocs.io/en/latest/index.html).\n\n## authentication\n\nlabelbox uses api keys to validate requests. you can create and manage api keys on [labelbox](https://app.labelbox.com/account/api-keys). pass your api key as an environment variable. then, import and initialize the api client.\n\n```\nuser@machine:~$ export labelbox_api_key=\"<your local api key here>\"\nuser@machine:~$ python3\n\nfrom labelbox import client\nclient = client()\n```\n\n- update api_key and endpoint if not using the production cloud deployment\n\n```\n# on prem\nclient = client( endpoint = \"<local deployment>\")\n\n# local\nclient = client(api_key=os.environ['labelbox_test_api_key_local'], endpoint=\"http://localhost:8080/graphql\")\n\n# staging\nclient = client(api_key=os.environ['labelbox_test_api_key_local'], endpoint=\"https://api.lb-stage.xyz/graphql\")\n```\n\n## contribution\n\nplease consult `contrib.md`\n\n## testing\n\n1. update the `makefile` with your `local`, `staging`, `prod` api key. ensure that docker has been installed on your system. make sure the key is not from a free tier account.\n2. to test on `local`:\n\n```\nuser@machine:~$ export labelbox_test_api_key_local=\"<your local api key here>\"\nmake test-local  # with an optional flag: path_to_test=tests/integration/...etc labelbox_test_api_key_local=specify_here_or_export_me\n```\n\n3. to test on `staging`:\n\n```\nuser@machine:~$ export labelbox_test_api_key_staging=\"<your staging api key here>\"\nmake test-staging # with an optional flag: path_to_test=tests/integration/...etc labelbox_test_api_key_staging=specify_here_or_export_me\n```\n\n4. to test on `prod`:\n\n```\nuser@machine:~$ export labelbox_test_api_key_prod=\"<your prod api key here>\"\nmake test-prod # with an optional flag: path_to_test=tests/integration/...etc labelbox_test_api_key_prod=specify_here_or_export_me\n```\n\n5. if you make any changes and need to rebuild the image used for testing, force a rebuild with the `-b` flag\n\n```\nmake -b {build|test-staging|test-prod}\n```\n\n6. testing against delegated access will be skipped unless the local env contains the key:\nda_gcp_labelbox_api_key. these tests will be included when run against a pr. if you would like to test it manually, please reach out to the devops team for information on the key.\n",
  "docs_url": null,
  "keywords": "labelbox",
  "license": "",
  "name": "labelbox",
  "package_url": "https://pypi.org/project/labelbox/",
  "project_url": "https://pypi.org/project/labelbox/",
  "project_urls": {
    "Homepage": "https://labelbox.com"
  },
  "release_url": "https://pypi.org/project/labelbox/3.58.1/",
  "requires_dist": [
    "requests >=2.22.0",
    "google-api-core >=1.22.1",
    "pydantic <2.0,>=1.8",
    "tqdm",
    "python-dateutil <2.9.0,>=2.8.2",
    "shapely ; extra == 'data'",
    "geojson ; extra == 'data'",
    "numpy ; extra == 'data'",
    "PILLOW ; extra == 'data'",
    "opencv-python ; extra == 'data'",
    "typeguard ; extra == 'data'",
    "imagesize ; extra == 'data'",
    "pyproj ; extra == 'data'",
    "pygeotile ; extra == 'data'",
    "typing-extensions ; extra == 'data'",
    "packaging ; extra == 'data'"
  ],
  "requires_python": ">=3.7",
  "summary": "labelbox python api",
  "version": "3.58.1",
  "releases": [],
  "developers": [
    "engineering@labelbox.com",
    "labelbox"
  ],
  "kwds": "labelbox labelbox_api_key labelbox_test_api_key_prod labelbox_test_api_key_local labelbox_test_api_key_staging",
  "license_kwds": "",
  "libtype": "pypi",
  "id": "pypi_labelbox",
  "homepage": "https://labelbox.com",
  "release_count": 134,
  "dependency_ids": [
    "pypi_geojson",
    "pypi_google_api_core",
    "pypi_imagesize",
    "pypi_numpy",
    "pypi_opencv_python",
    "pypi_packaging",
    "pypi_pillow",
    "pypi_pydantic",
    "pypi_pygeotile",
    "pypi_pyproj",
    "pypi_python_dateutil",
    "pypi_requests",
    "pypi_shapely",
    "pypi_tqdm",
    "pypi_typeguard",
    "pypi_typing_extensions"
  ]
}
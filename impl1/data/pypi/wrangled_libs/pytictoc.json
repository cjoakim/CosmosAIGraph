{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: developers",
    "license :: osi approved :: bsd license",
    "programming language :: python :: 2",
    "programming language :: python :: 3",
    "topic :: software development :: testing"
  ],
  "description": "pytictoc contains a class tictoc which replicates the functionality of matlab's tic and toc for easily timing sections of code. under the hood, pytictoc uses the default_timer function from python's timeit module.\r\n\r\n=============\r\ninstallation\r\n=============\r\n\r\npytictoc can be installed and updated via conda or pip.\r\n\r\n**pip** ::\r\n \r\n  pip install pytictoc\r\n  pip install pytictoc --upgrade\r\n\r\n**conda** ::\r\n\r\n  conda install pytictoc -c ecf\r\n  conda update pytictoc -c ecf\r\n\r\n\r\n=============\r\nusage\r\n============= \r\n\r\nbasic usage: ::\r\n\r\n  >> from pytictoc import tictoc\r\n  >> t = tictoc() #create instance of class\r\n\r\n  >> t.tic() #start timer\r\n  >> t.toc() #time elapsed since t.tic()\r\n  elapsed time is 2.612231 seconds.\r\n\r\na string passed to the toc method changes the printed message. this can be useful to differentiate timing of different sections in the same script. ::\r\n\r\n  >> t.toc('section 1 took')\r\n  section 1 took 16.494467 seconds.\r\n\r\nan optional keyword argument restarts the timer (equivalent to t.tic()) after reporting the time elapsed. ::\r\n\r\n  >> t.toc(restart=true)\r\n  elapsed time is 36.986837 seconds.\r\n  >>t.toc()\r\n  elapsed time is 2.393425 seconds.\r\n\r\nif you want to return the time elapsed to a variable rather than printing it, use the tocvalue method. ::\r\n\r\n  >>spam = t.tocvalue()\r\n  >>spam\r\n  20.156261717544602\r\n\r\nthe tictoc class can be used within a context manager as an alternative way to time a section of code. the time taken to run the code inside the with statement will be reported on exit. ::\r\n \r\n  >>with tictoc():\r\n  >>    spam = [x+1 for x in range(10000)]\r\n  elapsed time is 0.002343 seconds.\r\n\r\n------------------------------------\r\ndetermining and setting the timer\r\n------------------------------------\r\n\r\npytictoc uses timeit.default_timer to time code. on python 3.3 and later, this is an alias for time.perf_counter. on earlier versions of python it is an alias for the most precise timer for a given system. \r\n\r\nto see which function is being used: ::\r\n\r\n  >>import pytictoc\r\n  >>pytictoc.default_timer\r\n  <function time.perf_counter>\r\n\r\nyou can change the timer by simple assignment. ::\r\n  \r\n  >>import time\r\n  >>pytictoc.default_timer = time.clock\r\n  >>pytictoc.default_timer\r\n  <function time.clock>\r\n",
  "docs_url": null,
  "keywords": "timing tic toc matlab",
  "license": "bsd (three-clause)",
  "name": "pytictoc",
  "package_url": "https://pypi.org/project/pytictoc/",
  "project_url": "https://pypi.org/project/pytictoc/",
  "project_urls": {
    "Homepage": "https://github.com/ericcfields/pytictoc"
  },
  "release_url": "https://pypi.org/project/pytictoc/1.5.3/",
  "requires_dist": [],
  "requires_python": "",
  "summary": "time code using syntax similar to tic and toc in matlab",
  "version": "1.5.3",
  "releases": [],
  "developers": [
    "eric_fields",
    "fieldsec@westminster.edu"
  ],
  "kwds": "pytictoc tictoc tic matlab timer",
  "license_kwds": "bsd (three-clause)",
  "libtype": "pypi",
  "id": "pypi_pytictoc",
  "homepage": "https://github.com/ericcfields/pytictoc",
  "release_count": 10,
  "dependency_ids": []
}
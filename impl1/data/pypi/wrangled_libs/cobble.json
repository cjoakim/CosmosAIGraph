{
  "classifiers": [
    "development status :: 4 - beta",
    "intended audience :: developers",
    "license :: osi approved :: bsd license",
    "operating system :: os independent",
    "programming language :: python",
    "programming language :: python :: 2",
    "programming language :: python :: 2.6",
    "programming language :: python :: 2.7",
    "programming language :: python :: 3",
    "programming language :: python :: 3.2",
    "programming language :: python :: 3.3",
    "programming language :: python :: 3.4",
    "programming language :: python :: 3.5"
  ],
  "description": "cobble\n======\n\ncobble is a python library that allows easy creation of data objects,\nincluding implementations of common methods such as ``__eq__`` and ``__repr__``.\n\nexamples\n--------\n\n.. code-block:: python\n\n    import cobble\n\n    @cobble.data\n    class song(object):\n        name = cobble.field()\n        artist = cobble.field()\n        album = cobble.field(default=none)\n\n\n    song = song(\"mfeo\", artist=\"jack's mannequin\")\n\n    print(song) # prints \"song(name='mfeo', artist=\"jack's mannequin\", album=none)\"\n\n.. code-block:: python\n\n    class expression(object):\n        pass\n\n    @cobble.data\n    class literal(expression):\n        value = cobble.field()\n\n    @cobble.data\n    class add(expression):\n        left = cobble.field()\n        right = cobble.field()\n    \n    class evaluator(cobble.visitor(expression)):\n        def visit_literal(self, literal):\n            return literal.value\n        \n        def visit_add(self, add):\n            return self.visit(add.left) + self.visit(add.right)\n\n    evaluator().visit(add(literal(2), literal(4))) # 6\n\n.. code-block:: python\n\n    class expression(object):\n        pass\n\n    @cobble.visitable\n    class literal(expression):\n        def __init__(self, value):\n            self.value = value\n\n    @cobble.visitable\n    class add(expression):\n        def __init__(self, left, right):\n            self.left = left\n            self.right = right\n    \n    class evaluator(cobble.visitor(expression)):\n        def visit_literal(self, literal):\n            return literal.value\n        \n        def visit_add(self, add):\n            return self.visit(add.left) + self.visit(add.right)\n\n    evaluator().visit(add(literal(2), literal(4))) # 6\n\nlicense\n-------\n\n`2-clause bsd <http://opensource.org/licenses/bsd-2-clause>`_",
  "docs_url": null,
  "keywords": "data object case class",
  "license": "unknown",
  "name": "cobble",
  "package_url": "https://pypi.org/project/cobble/",
  "project_url": "https://pypi.org/project/cobble/",
  "project_urls": {
    "Download": "UNKNOWN",
    "Homepage": "http://github.com/mwilliamson/python-cobble"
  },
  "release_url": "https://pypi.org/project/cobble/0.1.3/",
  "requires_dist": [],
  "requires_python": null,
  "summary": "create data objects",
  "version": "0.1.3",
  "releases": [],
  "developers": [
    "michael_williamson",
    "mike@zwobble.org"
  ],
  "kwds": "cobble evaluator object field song",
  "license_kwds": "unknown",
  "libtype": "pypi",
  "id": "pypi_cobble",
  "homepage": "http://github.com/mwilliamson/python-cobble",
  "release_count": 4,
  "dependency_ids": []
}
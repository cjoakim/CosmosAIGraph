{
  "classifiers": [
    "development status :: 4 - beta",
    "intended audience :: developers",
    "license :: osi approved :: apache software license",
    "programming language :: python :: 3.6",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9"
  ],
  "description": "torpy ![python versions] [![build status](https://travis-ci.com/torpyorg/torpy.svg?branch=master)](https://travis-ci.com/torpyorg/torpy) [![build status](https://ci.appveyor.com/api/projects/status/14l6t8nq4tvno1pg?svg=true)](https://ci.appveyor.com/project/jbrown299/torpy) [![coverage status](https://coveralls.io/repos/github/torpyorg/torpy/badge.svg?branch=master)](https://coveralls.io/github/torpyorg/torpy?branch=master)\n=====\n\na pure python tor client implementation of the tor protocol.\ntorpy can be used to communicate with clearnet hosts or hidden services through the [tor network](https://torproject.org/about/overview.html).\n\n**features**\n- no stem or official tor client required\n- support v2 hidden services ([v2 specification](https://gitweb.torproject.org/torspec.git/tree/rend-spec-v2.txt))\n- support *basic* and *stealth* authorization protocol\n- provide simple [torhttpadapter](https://github.com/torpyorg/torpy/blob/master/torpy/http/adapter.py) for [requests](https://requests.readthedocs.io/) library\n- provide simple urllib [tor_opener](https://github.com/torpyorg/torpy/blob/master/torpy/http/urlopener.py) for making requests without any dependencies\n- provide simple socks5 proxy\n\n**donation**\n\nif you find this project interesting, you can send some [bitcoins](https://bitcoin.org/) to address: `16mf9tyajkkb9egbz5jgujbodtf3myvcrf`\n\n**note**\n\nthis product is produced independently from the tor\u00ae anonymity software and carries no guarantee from [the tor project](https://www.torproject.org/) about quality, suitability or anything else.\n\nconsole examples\n-----------\nthere are several console utilities to test the client.\n\na simple http/https request:\n```bash\n$ torpy_cli --url https://ifconfig.me --header \"user-agent\" \"curl/7.37.0\"\nloading cached networkstatusdocument from torcachedirstorage: .local/share/torpy/network_status\nloading cached dirkeycertificatelist from torcachedirstorage: .local/share/torpy/dir_key_certificates\nconnecting to guard node 141.98.136.79:443 (poseidon; tor 0.4.3.6)... (torclient)\nsending: get https://ifconfig.me\ncreating new circuit #80000001 with 141.98.136.79:443 (poseidon; tor 0.4.3.6) router...\n...\nbuilding 3 hops circuit...\nextending the circuit #80000001 with 109.70.100.23:443 (kren; tor 0.4.4.5)...\n...\nextending the circuit #80000001 with 199.249.230.175:443 (quintex86; tor 0.4.4.5)...\n...\nstream #4: creating attached to #80000001 circuit...\nstream #4: connecting to ('ifconfig.me', 443)\nstream #4: connected (remote ip '216.239.36.21')\nstream #4: closing (state = connected)...\nstream #4: remote disconnected (reason = done)\nresponse status: 200\nstream #4: closing (state = closed)...\nstream #4: closed already\nclosing guard connections (torclient)...\ndestroy circuit #80000001\nclosing guard connections (router descriptor downloader)...\ndestroy circuit #80000002\n> 199.249.230.175\n```\n\ncreate socks5 proxy to relay requests via the tor network:\n```\n$ torpy_socks -p 1050 --hops 3\nloading cached networkstatusdocument from torcachedirstorage: .local/share/torpy/network_status\nconnecting to guard node 89.142.75.60:9001 (spongebobness; tor 0.3.5.8)...\ncreating new circuit #80000001 with 89.142.75.60:9001 (spongebobness; tor 0.3.5.8) router...\nbuilding 3 hops circuit...\nextending the circuit #80000001 with 185.248.143.42:9001 (torciusv; tor 0.3.5.8)...\nextending the circuit #80000001 with 158.174.122.199:9005 (che1; tor 0.4.1.6)...\nstart socks proxy at 127.0.0.1:1050\n...\n```\n\ntorpy module also has a command-line interface:\n\n```bash\n$ python3.7 -m torpy --url https://facebookcorewwwi.onion --to-file index.html\nloading cached networkstatusdocument from torcachedirstorage: .local/share/torpy/network_status\nconnecting to guard node 185.2.31.8:443 (cx10torserver; tor 0.4.0.5)...\nsending: get https://facebookcorewwwi.onion\ncreating new circuit #80000001 with 185.2.31.8:443 (cx10torserver; tor 0.4.0.5) router...\nbuilding 3 hops circuit...\nextending the circuit #80000001 with 144.172.71.110:8447 (tonybamanaboni; tor 0.4.1.5)...\nextending the circuit #80000001 with 179.43.134.154:9001 (father; tor 0.4.0.5)...\ncreating stream #1 attached to #80000001 circuit...\nstream #1: connecting to ('facebookcorewwwi.onion', 443)\nextending #80000001 circuit for hidden service facebookcorewwwi.onion...\nrendezvous established (cellrelayrendezvousestablished())\niterate over responsible dirs of the hidden service\niterate over introduction points of the hidden service\ncreate circuit for hsdir\ncreating new circuit #80000002 with 185.2.31.8:443 (cx10torserver; tor 0.4.0.5) router...\nbuilding 0 hops circuit...\nextending the circuit #80000002 with 132.248.241.5:9001 (toritounam; tor 0.3.5.8)...\ncreating stream #2 attached to #80000002 circuit...\nstream #2: connecting to hsdir\nstream #2: closing...\ndestroy circuit #80000002\ncreating new circuit #80000003 with 185.2.31.8:443 (cx10torserver; tor 0.4.0.5) router...\nbuilding 0 hops circuit...\nextending the circuit #80000003 with 88.198.17.248:8443 (bauruine31; tor 0.4.1.5)...\nintroduced (cellrelayintroduceack())\ndestroy circuit #80000003\ncreating stream #3 attached to #80000001 circuit...\nstream #3: connecting to ('www.facebookcorewwwi.onion', 443)\nextending #80000001 circuit for hidden service facebookcorewwwi.onion...\nresponse status: 200\nwriting to file index.html\nstream #1: closing...\nstream #3: closing...\nclosing guard connections...\ndestroy circuit #80000001\n```\n\nusage examples \n-----------\n\na basic example of how to send some data to a clearnet host or a hidden service:\n```python\nfrom torpy import torclient\n\nhostname = 'ifconfig.me'  # it's possible use onion hostname here as well\nwith torclient() as tor:\n    # choose random guard node and create 3-hops circuit\n    with tor.create_circuit(3) as circuit:\n        # create tor stream to host\n        with circuit.create_stream((hostname, 80)) as stream:\n            # now we can communicate with host\n            stream.send(b'get / http/1.0\\r\\nhost: %s\\r\\n\\r\\n' % hostname.encode())\n            recv = stream.recv(1024)\n```\n\ntorhttpadapter is a convenient tor adapter for the [requests library](https://2.python-requests.org/en/master/user/advanced/#transport-adapters).\nthe following example shows the usage of torhttpadapter for multi-threaded http requests:\n```python\nfrom multiprocessing.pool import threadpool\nfrom torpy.http.requests import tor_requests_session\n\nwith tor_requests_session() as s:  # returns requests.session() object\n    links = ['http://nzxj65x32vh2fkhk.onion', 'http://facebookcorewwwi.onion'] * 2\n\n    with threadpool(3) as pool:\n        pool.map(s.get, links)\n\n```\n\nfor more examples see [test_integration.py](https://github.com/torpyorg/torpy/blob/master/tests/integration/test_integration.py)\n\n\ninstallation\n------------\n* just `pip3 install torpy`\n* or for using torhttpadapter with requests library you need install extras:\n`pip3 install torpy[requests]`\n\ncontribute\n----------\n* use it\n* code review is appreciated\n* open [issue], send [pr]\n\n\ntodo\n----\n- [ ] implement v3 hidden services [specification](https://gitweb.torproject.org/torspec.git/tree/rend-spec-v3.txt)\n- [ ] refactor tor cells serialization/deserialization\n- [ ] more unit tests\n- [ ] rewrite the library using asyncio\n- [ ] implement onion services\n\n\nlicense\n-------\nlicensed under the apache license, version 2.0\n\n\nreferences\n----------\n- official [tor](https://gitweb.torproject.org/tor.git/) client\n- [pycepa](https://github.com/pycepa/pycepa)\n- [torpylle](https://github.com/cea-sec/torpylle)\n- [tinytor](https://github.com/marten4n6/tinytor)\n- c++ windows only implementation [mini-tor](https://github.com/wbenny/mini-tor)\n- nice java implementation [orchid](https://github.com/subgraph/orchid)\n\n\n[python versions]:      https://img.shields.io/badge/python-3.6,%203.7,%203.8,%203.9-blue.svg\n[issue]:                https://github.com/torpyorg/torpy/issues\n[pr]:                   https://github.com/torpyorg/torpy/pulls",
  "docs_url": null,
  "keywords": "python proxy anonymity privacy socks tor protocol onion hiddenservice",
  "license": "",
  "name": "torpy",
  "package_url": "https://pypi.org/project/torpy/",
  "project_url": "https://pypi.org/project/torpy/",
  "project_urls": {
    "Bug Reports": "https://github.com/torpyorg/torpy/issues",
    "Homepage": "https://github.com/torpyorg/torpy",
    "Source": "https://github.com/torpyorg/torpy/"
  },
  "release_url": "https://pypi.org/project/torpy/1.1.6/",
  "requires_dist": [],
  "requires_python": ">=3.6",
  "summary": "pure python tor protocol implementation",
  "version": "1.1.6",
  "releases": [],
  "developers": [
    "james_brown"
  ],
  "kwds": "torpy_cli torpy_socks torpy tor_opener torpyorg",
  "license_kwds": "",
  "libtype": "pypi",
  "id": "pypi_torpy",
  "homepage": "https://github.com/torpyorg/torpy",
  "release_count": 13,
  "dependency_ids": []
}
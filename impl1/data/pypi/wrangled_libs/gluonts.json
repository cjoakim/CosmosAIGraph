{
  "classifiers": [],
  "description": "<img class=\"hide-on-website\" height=\"100px\" src=\"https://ts.gluon.ai/dev/_static/gluonts.svg\">\n\n# gluonts - probabilistic time series modeling in python\n\n[![pypi](https://img.shields.io/pypi/v/gluonts.svg?style=flat-square&color=b75347)](https://pypi.org/project/gluonts/)\n[![github](https://img.shields.io/github/license/awslabs/gluonts.svg?style=flat-square&color=df7e66)](./license)\n[![static](https://img.shields.io/static/v1?label=docs&message=stable&color=edc775&style=flat-square)](https://ts.gluon.ai/)\n[![static](https://img.shields.io/static/v1?label=docs&message=dev&color=edc775&style=flat-square)](https://ts.gluon.ai/dev/)\n[![pypi downloads](https://img.shields.io/pypi/dm/gluonts?style=flat-square&color=94b594)](https://pepy.tech/project/gluonts)\n\ngluonts is a python package for probabilistic time series modeling, focusing on deep learning based models,\nbased on [pytorch](https://pytorch.org) and [mxnet](https://mxnet.apache.org).\n\n\n## installation\n\ngluonts requires python 3.7 or newer, and the easiest way to install it is via\n`pip`:\n\n```bash\n# install with support for torch models\npip install \"gluonts[torch]\"\n\n# install with support for mxnet models\npip install \"gluonts[mxnet]\"\n```\n\nsee the [documentation](https://ts.gluon.ai/stable/getting_started/install.html)\nfor more info on how gluonts can be installed.\n\n## simple example\n\nto illustrate how to use gluonts, we train a deepar-model and make predictions\nusing the airpassengers dataset. the dataset consists of a single time\nseries of monthly passenger numbers between 1949 and 1960. we train the model\non the first nine years and make predictions for the remaining three years.\n\n```py\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nfrom gluonts.dataset.pandas import pandasdataset\nfrom gluonts.dataset.split import split\nfrom gluonts.torch import deeparestimator\n\n# load data from a csv file into a pandasdataset\ndf = pd.read_csv(\n    \"https://raw.githubusercontent.com/aileennielsen/\"\n    \"timeseriesanalysiswithpython/master/data/airpassengers.csv\",\n    index_col=0,\n    parse_dates=true,\n)\ndataset = pandasdataset(df, target=\"#passengers\")\n\n# split the data for training and testing\ntraining_data, test_gen = split(dataset, offset=-36)\ntest_data = test_gen.generate_instances(prediction_length=12, windows=3)\n\n# train the model and make predictions\nmodel = deeparestimator(\n    prediction_length=12, freq=\"m\", trainer_kwargs={\"max_epochs\": 5}\n).train(training_data)\n\nforecasts = list(model.predict(test_data.input))\n\n# plot predictions\nplt.plot(df[\"1954\":], color=\"black\")\nfor forecast in forecasts:\n  forecast.plot()\nplt.legend([\"true values\"], loc=\"upper left\", fontsize=\"xx-large\")\nplt.show()\n```\n\n![[train-test]](https://ts.gluon.ai/static/readme/forecasts.png)\n\nnote, the forecasts are displayed in terms of a probability distribution and\nthe shaded areas represent the 50% and 90% prediction intervals.\n\n\n## contributing\n\nif you wish to contribute to the project, please refer to our\n[contribution guidelines](https://github.com/awslabs/gluonts/tree/dev/contributing.md).\n\n## citing\n\nif you use gluonts in a scientific publication, we encourage you to add the following references to the related papers,\nin addition to any model-specific references that are relevant for your work:\n\n```bibtex\n@article{gluonts_jmlr,\n  author  = {alexander alexandrov and konstantinos benidis and michael bohlke-schneider\n    and valentin flunkert and jan gasthaus and tim januschowski and danielle c. maddix\n    and syama rangapuram and david salinas and jasper schulz and lorenzo stella and\n    ali caner t\u00fcrkmen and yuyang wang},\n  title   = {{gluonts: probabilistic and neural time series modeling in python}},\n  journal = {journal of machine learning research},\n  year    = {2020},\n  volume  = {21},\n  number  = {116},\n  pages   = {1-6},\n  url     = {http://jmlr.org/papers/v21/19-820.html}\n}\n```\n\n```bibtex\n@article{gluonts_arxiv,\n  author  = {alexandrov, a. and benidis, k. and bohlke-schneider, m. and\n    flunkert, v. and gasthaus, j. and januschowski, t. and maddix, d. c.\n    and rangapuram, s. and salinas, d. and schulz, j. and stella, l. and\n    t\u00fcrkmen, a. c. and wang, y.},\n  title   = {{gluonts: probabilistic time series modeling in python}},\n  journal = {arxiv preprint arxiv:1906.05264},\n  year    = {2019}\n}\n```\n\n## links\n\n### documentation\n\n* [documentation (stable)](https://ts.gluon.ai/stable/)\n* [documentation (development)](https://ts.gluon.ai/dev/)\n\n### references\n\n* [jmlr mloss paper](http://www.jmlr.org/papers/v21/19-820.html)\n* [arxiv paper](https://arxiv.org/abs/1906.05264)\n* [collected papers from the group behind gluonts](https://github.com/awslabs/gluonts/tree/dev/references.md): a bibliography.\n\n### tutorials and workshops\n\n* [tutorial at ijcai 2021 (with videos)](https://lovvge.github.io/forecasting-tutorial-ijcai-2021/) with [youtube link](https://youtu.be/ab3i9pdt46c). \n* [tutorial at www 2020 (with videos)](https://lovvge.github.io/forecasting-tutorial-www-2020/)\n* [tutorial at sigmod 2019](https://lovvge.github.io/forecasting-tutorials/sigmod-2019/)\n* [tutorial at kdd 2019](https://lovvge.github.io/forecasting-tutorial-kdd-2019/)\n* [tutorial at vldb 2018](https://lovvge.github.io/forecasting-tutorial-vldb-2018/)\n* [neural time series with gluonts](https://youtu.be/beejmit9xj8)\n* [international symposium of forecasting: deep learning for forecasting workshop](https://lostella.github.io/isf-2020-deep-learning-workshop/)\n\n\n",
  "docs_url": null,
  "keywords": "",
  "license": "apache license 2.0",
  "name": "gluonts",
  "package_url": "https://pypi.org/project/gluonts/",
  "project_url": "https://pypi.org/project/gluonts/",
  "project_urls": {
    "Documentation": "https://ts.gluon.ai/stable/",
    "Homepage": "https://github.com/awslabs/gluonts/",
    "Source Code": "https://github.com/awslabs/gluonts/"
  },
  "release_url": "https://pypi.org/project/gluonts/0.14.3/",
  "requires_dist": [
    "numpy ~=1.16",
    "pandas <3,>=1.0",
    "pydantic <3,>=1.7",
    "tqdm ~=4.23",
    "toolz ~=0.10",
    "typing-extensions ~=4.0",
    "prophet ~=1.0 ; extra == 'prophet'",
    "rpy2 ~=3.5 ; extra == 'r'",
    "pyarrow ; extra == 'arrow'",
    "pyarrow ; extra == 'dev'",
    "ipython ; extra == 'dev'",
    "ipykernel ~=6.5 ; extra == 'dev'",
    "nbconvert ~=6.5.1 ; extra == 'dev'",
    "nbsphinx ~=0.8.8 ; extra == 'dev'",
    "notedown ; extra == 'dev'",
    "pytest-runner ~=2.11 ; extra == 'dev'",
    "recommonmark ; extra == 'dev'",
    "sphinx ~=4.0 ; extra == 'dev'",
    "docutils <=0.16 ; extra == 'dev'",
    "optuna ~=2.10 ; extra == 'dev'",
    "furo ==2022.6.4.1 ; extra == 'dev'",
    "m2r2 ; extra == 'dev'",
    "myst-parser ; extra == 'dev'",
    "click ; extra == 'dev'",
    "orjson ; extra == 'dev'",
    "black ; extra == 'dev'",
    "holidays ~=0.9 ; extra == 'dev'",
    "matplotlib ~=3.6 ; extra == 'dev'",
    "pandas >=1.1 ; extra == 'dev'",
    "flaky ~=3.6 ; extra == 'dev'",
    "pytest-cov ==2.6.* ; extra == 'dev'",
    "pytest-timeout ~=1.3 ; extra == 'dev'",
    "pytest-xdist ~=1.27 ; extra == 'dev'",
    "pytest >=6.0 ; extra == 'dev'",
    "ujson ; extra == 'dev'",
    "requests ; extra == 'dev'",
    "flask ~=2.0 ; extra == 'dev'",
    "waitress ~=2.1.2 ; extra == 'dev'",
    "sagemaker ~=2.0 ; extra == 'dev'",
    "s3fs ~=0.5 ; (python_version < \"3.7.0\") and extra == 'dev'",
    "fsspec <0.9,~=0.8 ; (python_version < \"3.7.0\") and extra == 'dev'",
    "s3fs ~=0.6 ; (python_version >= \"3.7.0\") and extra == 'dev'",
    "ipython ; extra == 'docs'",
    "ipykernel ~=6.5 ; extra == 'docs'",
    "nbconvert ~=6.5.1 ; extra == 'docs'",
    "nbsphinx ~=0.8.8 ; extra == 'docs'",
    "notedown ; extra == 'docs'",
    "pytest-runner ~=2.11 ; extra == 'docs'",
    "recommonmark ; extra == 'docs'",
    "sphinx ~=4.0 ; extra == 'docs'",
    "docutils <=0.16 ; extra == 'docs'",
    "optuna ~=2.10 ; extra == 'docs'",
    "furo ==2022.6.4.1 ; extra == 'docs'",
    "m2r2 ; extra == 'docs'",
    "myst-parser ; extra == 'docs'",
    "click ; extra == 'docs'",
    "orjson ; extra == 'docs'",
    "black ; extra == 'docs'",
    "holidays ~=0.9 ; extra == 'docs'",
    "matplotlib ~=3.6 ; extra == 'docs'",
    "numpy <1.24 ; extra == 'mxnet'",
    "mxnet ~=1.7 ; extra == 'mxnet'",
    "pyarrow ; extra == 'pro'",
    "orjson ; extra == 'pro'",
    "flask ~=2.0 ; extra == 'shell'",
    "waitress ~=2.1.2 ; extra == 'shell'",
    "torch <3,>=1.9 ; extra == 'torch'",
    "lightning <2.2,>=2.0 ; extra == 'torch'",
    "pytorch-lightning <2.2,>=2.0 ; extra == 'torch'",
    "scipy ~=1.7.3 ; (python_version <= \"3.7.0\") and extra == 'torch'",
    "scipy ~=1.10 ; (python_version > \"3.7.0\") and extra == 'torch'"
  ],
  "requires_python": ">=3.7",
  "summary": "probabilistic time series modeling in python.",
  "version": "0.14.3",
  "releases": [],
  "developers": [
    "amazon",
    "gluon-ts-dev@amazon.com"
  ],
  "kwds": "gluon gluonts_arxiv gluonts_jmlr gluonts svg",
  "license_kwds": "apache license 2.0",
  "libtype": "pypi",
  "id": "pypi_gluonts",
  "homepage": "https://github.com/awslabs/gluonts/",
  "release_count": 104,
  "dependency_ids": [
    "pypi_black",
    "pypi_click",
    "pypi_docutils",
    "pypi_flaky",
    "pypi_flask",
    "pypi_fsspec",
    "pypi_furo",
    "pypi_holidays",
    "pypi_ipykernel",
    "pypi_ipython",
    "pypi_lightning",
    "pypi_m2r2",
    "pypi_matplotlib",
    "pypi_mxnet",
    "pypi_myst_parser",
    "pypi_nbconvert",
    "pypi_nbsphinx",
    "pypi_notedown",
    "pypi_numpy",
    "pypi_optuna",
    "pypi_orjson",
    "pypi_pandas",
    "pypi_prophet",
    "pypi_pyarrow",
    "pypi_pydantic",
    "pypi_pytest",
    "pypi_pytest_cov",
    "pypi_pytest_runner",
    "pypi_pytest_timeout",
    "pypi_pytest_xdist",
    "pypi_pytorch_lightning",
    "pypi_recommonmark",
    "pypi_requests",
    "pypi_rpy2",
    "pypi_s3fs",
    "pypi_sagemaker",
    "pypi_scipy",
    "pypi_sphinx",
    "pypi_toolz",
    "pypi_torch",
    "pypi_tqdm",
    "pypi_typing_extensions",
    "pypi_ujson",
    "pypi_waitress"
  ]
}
{
  "classifiers": [
    "development status :: 5 - production/stable",
    "environment :: web environment",
    "framework :: django",
    "framework :: django :: 3.2",
    "framework :: django :: 4.0",
    "framework :: django :: 4.1",
    "framework :: django :: 4.2",
    "intended audience :: developers",
    "license :: osi approved :: bsd license",
    "operating system :: os independent",
    "programming language :: python",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.12",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: internet :: www/http",
    "topic :: software development :: libraries :: application frameworks",
    "topic :: software development :: libraries :: python modules",
    "typing :: typed"
  ],
  "description": "a dataclasses serializer for django rest framework\ndataclasses serializer\n======================\n\na `dataclasses <https://docs.python.org/3/library/dataclasses.html>`__ serializer for the `django rest framework\n<http://www.django-rest-framework.org/>`__.\n\n.. image:: https://github.com/oxan/djangorestframework-dataclasses/workflows/ci/badge.svg\n   :target: https://github.com/oxan/djangorestframework-dataclasses/actions?query=workflow%3aci\n.. image:: https://codecov.io/gh/oxan/djangorestframework-dataclasses/branch/master/graph/badge.svg\n   :target: https://codecov.io/gh/oxan/djangorestframework-dataclasses\n.. image:: https://badge.fury.io/py/djangorestframework-dataclasses.svg\n   :target: https://badge.fury.io/py/djangorestframework-dataclasses\n.. image:: https://img.shields.io/static/v1?label=sponsor&message=%e2%9d%a4&logo=github&color=success\n   :target: https://github.com/sponsors/oxan\n\n|\n\n.. contents:: :local:\n\nrequirements\n------------\n\n* python (3.8+)\n* django (3.2+)\n* django rest framework (3.11+)\n\nthese are the supported python and package versions. older versions will probably work as well, but aren't tested.\n\ninstallation\n------------\n\n::\n\n    $ pip install djangorestframework-dataclasses\n\nthis package follows `semantic versioning`_. see `changelog`_ for breaking changes and new features, and `license`_ for\nthe complete license (bsd-3-clause).\n\n.. _`semantic versioning`: https://semver.org/\n.. _`changelog`: https://github.com/oxan/djangorestframework-dataclasses/blob/master/changelog.rst\n.. _`license`: https://github.com/oxan/djangorestframework-dataclasses/blob/master/license\n\nbasic usage\n-----------\n\nthe package provides the ``dataclassserializer`` serializer, defined in the ``rest_framework_dataclasses.serializers``\nnamespace.\n\n.. code:: python\n\n    from rest_framework_dataclasses.serializers import dataclassserializer\n\nthis serializer provides a shortcut that lets you automatically create a ``serializer`` class with fields that\ncorrespond to the fields on a dataclass. in usage, the ``dataclassserializer`` is the same as a regular ``serializer``\nclass, except that:\n\n* it will automatically generate fields for you, based on the declaration in the dataclass.\n* to make this possible it requires that a ``dataclass`` property is specified in the ``meta`` subclass, with as value\n  a dataclass that has type annotations.\n* it includes default implementations of ``.create()`` and ``.update()``.\n\nfor example, define a dataclass as follows:\n\n.. code:: python\n\n    @dataclass\n    class person:\n        name: str\n        email: str\n        alive: bool\n        gender: typing.literal['male', 'female']\n        birth_date: typing.optional[datetime.date]\n        phone: typing.list[str]\n        movie_ratings: typing.dict[str, int]\n\nthe serializer for this dataclass can now trivially be defined without having to duplicate all fields:\n\n.. code:: python\n\n    class personserializer(dataclassserializer):\n        class meta:\n            dataclass = person\n\n    # is equivalent to\n    class personserializer(serializer):\n        name = fields.charfield()\n        email = fields.charfield()\n        alive = fields.booleanfield()\n        gender = fields.choicefield(choices=['male', 'female'])\n        birth_date = fields.datefield(allow_null=true)\n        phone = fields.listfield(child=fields.charfield())\n        movie_ratings = fields.dictfield(child=fields.integerfield())\n\nyou can add extra fields or override default fields by declaring them explicitly on the class, just as you would for a\nregular ``serializer`` class. this allows to specify extra field options or change a field type.\n\n.. code:: python\n\n    class personserializer(serializer):\n        email = fields.emailfield()\n\n        class meta:\n            dataclass = person\n\ndataclass serializers behave in the same way and can be used in the same places as the built-in serializers from django\nrest framework: you can retrieve the serialized representation using the ``.data`` property, and the deserialized\ndataclass instance using the ``.validated_data`` property. furthermore, the ``save()`` method is implemented to create\nor update an existing dataclass instance. you can find more information on serializer usage in the\n`django rest framework <https://www.django-rest-framework.org/api-guide/serializers/>`__ documentation.\n\nnote that this usage pattern is very similar to that of the built-in ``modelserializer``. this is intentional, with the\nwhole api modelled after that of ``modelserializer``. most features and behaviour known from ``modelserializer`` applies\nto dataclass serializers as well.\n\nfield mapping\n-------------\n\ncurrently, automatic field generation is supported for the following types and their subclasses:\n\n* ``str``, ``bool``, ``int`` and ``float``.\n* ``date``, ``datetime``, ``time`` and ``timedelta`` from the ``datetime`` package.\n* ``decimal.decimal`` (``max_digits`` and ``decimal_places`` default to ``none`` and ``2`` respectively).\n* ``uuid.uuid``\n* ``enum.enum`` (mapped to a ``enumfield``)\n* ``typing.iterable`` (including ``typing.list`` and `pep 585`_-style generics such as ``list[int]``).\n* ``typing.mapping`` (including ``typing.dict`` and `pep 585`_-style generics such as ``dict[str, int]``).\n* ``typing.literal`` (mapped to a ``choicefield``).\n* ``typing.union`` (mapped to a ``unionfield``, including `pep 604`_-style unions such as ``str | int``, see\n  `unionfield`_ section below for more information).\n* ``django.db.model``\n\nthe serializer also supports type variables that have an upper bound or are constrained.\n\ncustomize field generation\n--------------------------\n\nthe auto-generated serializer fields are configured based on type qualifiers in the dataclass (these can be mixed):\n\n* fields with a default value (factory) are marked as optional on the serializer (``required=false``). this means that\n  these fields don't need to be supplied during deserialization.\n\n* fields marked as nullable through ``typing.optional``, ``typing.union[x, none]`` or ``x | none`` (`pep 604`_) are\n  marked as nullable on the serializer (``allow_null=true``). this means that ``none`` is accepted as a valid value\n  during deserialization.\n\n* fields marked as final through ``typing.final`` (as in `pep 591`_) are marked as read-only on the serializer\n  (``read_only=true``).\n\n.. code:: python\n\n    @dataclass\n    class person:\n        birth_date: typing.optional[datetime.date]\n        alive: bool = true\n        species: typing.final[str] = 'human'\n\n    # the autogenerated serializer will be equal to\n    class personserializer(serializer):\n        birth_date = fields.datefield(allow_null=true)\n        alive = fields.booleanfield(required=false)\n        species = fields.charfield(read_only=true)\n\nbesides overriding fields by declaring them explicitly on the serializer, you can also change or override the generated\nserializer field using metadata on the dataclass field. currently, two keys are recognized in this dictionary:\n\n* ``serializer_field`` can be used to replace the auto-generated field with a user-supplied one. should contain an\n  instance of a field, not a field type.\n\n* ``serializer_kwargs`` can be used to specify arbitrary additional keyword arguments for the generated field. manually\n  specified arguments will have precedence over generated arguments (so e.g. by supplying ``{required: true}``, a field\n  with a default value can be made required).\n\n.. code:: python\n\n    @dataclasses.dataclass\n    class person:\n        email: str = dataclasses.field(metadata={'serializer_field': fields.emailfield()})\n        age: int = dataclasses.field(metadata={'serializer_kwargs': {'min_value': 0}})\n\n    # the autogenerated serializer will be equal to\n    class personserializer(serializer):\n        email = fields.emailfield()\n        age = fields.integerfield(min_value=0)\n\nto further customize the serializer, the ``dataclassserializer`` accepts the following options in the ``meta``\nsubclass. all options have the same behaviour as the identical options in ``modelserializer``.\n\n* ``dataclass`` specifies the type of dataclass used by the serializer. this is equivalent to the ``model`` option in\n  ``modelserializer``.\n\n* ``fields`` and ``exclude`` can be used to specify which fields should respectively be included and excluded in the\n  serializer. these cannot both be specified.\n\n  the ``fields`` option accepts the magic value ``__all__`` to specify that all fields on the dataclass should be used.\n  this is also the default value, so it is not mandatory to specify either ``fields`` or ``exclude``.\n\n* ``read_only_fields`` can be used to mark a subset of fields as read-only.\n\n* ``extra_kwargs`` can be used to specify arbitrary additional keyword arguments on fields. this can be useful to\n  extend or change the autogenerated field without explicitly declaring the field on the serializer. this option should\n  be a dictionary, mapping field names to a dictionary of keyword arguments.\n\n  if the autogenerated field is a composite field (a list or dictionary), the arguments are applied to the composite\n  field. to add keyword arguments to the composite field's child field (that is, the field used for the items in the\n  list or dictionary), they should be specified as a nested dictionary under the ``child_kwargs`` name (see\n  `nested dataclasses`_ section below for an example).\n\n  .. code:: python\n\n    class personserializer(dataclassserializer):\n        class meta:\n            extra_kwargs = {\n                'height': { 'decimal_places': 1 },\n                'movie_ratings': { 'child_kwargs': { 'min_value': 0, 'max_value': 10 } }\n            }\n\n* ``validators`` functionality is unchanged.\n\n* ``depth`` (as known from ``modelserializer``) is not supported, it will always nest infinitely deep.\n\nchanging default behaviour\n~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nadditionally, it is possible to change the default behaviour of the ``dataclassserializer`` by setting one of these\nproperties on the class:\n\n* the ``serializer_field_mapping`` property contains a dictionary that maps types to rest framework serializer classes.\n  you can override or extend this mapping to change the serializer field classes that are used for fields based on\n  their type. this dictionary also accepts dataclasses as keys to change the serializer used for a nested dataclass.\n\n* the ``serializer_related_field`` property is the serializer field class that is used for relations to models.\n\n* the ``serializer_union_field`` property is the serializer field class that is used for union types.\n\n* the ``serializer_dataclass_field`` property is the serializer field class that is used for nested dataclasses. note\n  that since python process the class body before it defines the class, this property is implemented using the\n  `property decorator`_ to allow it to reference the containing class.\n\nfinally, you can create a subclass that overrides methods of the ``dataclassserializer``. the field generation is\ncontrolled by the following methods, which are considered a stable part of the api:\n\n* the ``build_unknown_field()`` method is called to create serializer fields for dataclass fields that are not\n  understood. by default this just throws an error, but you can extend this with custom logic to create serializer\n  fields.\n\n* the ``build_property_field()`` method is called to create serializer fields for methods. by default this creates a\n  read-only field with the method return value.\n\n* the ``build_standard_field()``, ``build_relational_field()``, ``build_dataclass_field()``, ``build_union_field()``,\n  ``build_enum_field()``, ``build_literal_field()`` and ``build_composite_field()`` methods are used to process\n  respectively fields, nested models, nested dataclasses, union types, enums, literals, and lists or dictionaries. these\n  can be overridden to change the field generation logic.\n\nnote that when creating a subclass of ``dataclassserializer``, most likely you will want to set the\n``serializer_dataclass_field`` property to the subclass, so that any nested dataclasses are serialized using the\nsubclass as well.\n\n.. code:: python\n\n    class customdataclassserializer(dataclassserializer):\n        @property\n        def serializer_dataclass_field(self):\n            return customdataclassserializer\n\n        # implement additional and/or override existing methods here\n\n.. _`pep 591`: https://www.python.org/dev/peps/pep-0591/\n.. _`pep 585`: https://www.python.org/dev/peps/pep-0585/\n.. _`pep 604`: https://www.python.org/dev/peps/pep-0604/\n.. _`property decorator`: https://docs.python.org/3/library/functions.html#property\n\nnesting\n-------\n\nnested dataclasses\n~~~~~~~~~~~~~~~~~~\n\nif your dataclass has a field that also contains a dataclass instance, the ``dataclassserializer`` will automatically\ncreate another ``dataclassserializer`` for that field, so that its value will be nested. this also works for dataclasses\ncontained in lists or dictionaries, or even several layers deep.\n\n.. code:: python\n\n    @dataclass\n    class house:\n        address: str\n        owner: person\n        residents: typing.list[person]\n\n    class houseserializer(dataclassserializer):\n        class meta:\n            dataclass = house\n\nthis will serialize as:\n\n.. code:: python\n\n    >>> serializer = houseserializer(instance=house)\n    >>> serializer.data\n    {\n        'address': 'main street 5',\n        'owner': { 'name': 'alice' }\n        'residents': [\n            { 'name': 'alice', 'email': 'alice@example.org', ... },\n            { 'name': 'bob', 'email': 'bob@example.org', ... },\n            { 'name': 'charles', 'email': 'charles@example.org', ... }\n        ]\n    }\n\nthis does not give the ability to customize the field generation of the nested dataclasses. if that is needed, you\nshould declare the serializer to be used for the nested field explicitly. alternatively, you could use the\n``extra_kwargs`` option to provide arguments to fields belonging to the nested dataclasses. consider the following:\n\n.. code:: python\n\n    @dataclass\n    class transaction:\n       amount: decimal\n       account_number: str\n\n    @dataclass\n    class company:\n       sales: list[transaction]\n\nin order to tell drf to give 2 decimal places to the transaction account number, write the serializer as follows:\n\n.. code:: python\n\n    class companyserializer(dataclassserializer):\n        class meta:\n            dataclass = company\n\n            extra_kwargs = {\n                'sales': {\n                    # arguments here are for the listfield generated for the sales field on company\n                    'min_length': 1,   # requires at least 1 item to be present in the sales list\n                    'child_kwargs': {\n                        # arguments here are passed to the dataclassserializer for the transaction dataclass\n                        'extra_kwargs': {\n                            # arguments here are the extra arguments for the fields in the transaction dataclass\n                            'amount': {\n                                'max_digits': 6,\n                                'decimal_places': 2\n                            }\n                        }\n                    }\n                }\n            }\n\nnesting models\n~~~~~~~~~~~~~~\n\nlikewise, if your dataclass has a field that contains a django model, the ``dataclassserializer`` will automatically\ngenerate a relational field for you.\n\n.. code:: python\n\n    class company(models.model):\n        name = models.charfield()\n\n    @dataclass\n    class person:\n        name: str\n        employer: company\n\nthis will serialize as:\n\n.. code:: python\n\n    >>> serializer = personserializer(instance=user)\n    >>> print(repr(serializer))\n    personserializer():\n        name = fields.charfield()\n        employer = fields.primarykeyrelatedfield(queryset=company.objects.all())\n    >>> serializer.data\n    {\n        \"name\": \"alice\",\n        \"employer\": 1\n    }\n\nif you want to nest the model in the serialized representation, you should specify the model serializer to be used by\ndeclaring the field explicitly.\n\nif you prefer to use hyperlinks to represent relationships rather than primary keys, in the same package you can find\nthe ``hyperlinkeddataclassserializer`` class: it generates a ``hyperlinkedrelatedfield`` instead of a\n``primarykeyrelatedfield``.\n\nnew serializer field types\n--------------------------\nto handle some types for which drf does not ship a serializer field, some new serializer field types are shipped in the\n``rest_framework_dataclasses.fields`` namespace. these fields can be used independently of the ``dataclassserializer``\nas well.\n\ndefaultdecimalfield\n~~~~~~~~~~~~~~~~~~~\na subclass of `decimalfield`_ that defaults ``max_digits`` to ``none`` and ``decimal_places`` to 2. used to represent\ndecimal values which there is no explicit field configured.\n\nenumfield\n~~~~~~~~~\na subclass of `choicefield`_ to represent python `enumerations`_. the enumeration members can be represented by either\ntheir name or value. the member name is used as display name.\n\n**signature**: ``enumfield(enum_class, by_name=false)``\n\n* ``enum_class``: the enumeration class.\n* ``by_name``: whether members are represented by their value (``false``) or name (``true``).\n\niterablefield\n~~~~~~~~~~~~~\na subclass of `listfield`_ that can return values that aren't of type ``list``, such as ``set``.\n\n**signature**: ``iterablefield(container=list)``\n\n* ``container``: the type of the returned iterable. must have a constructor that accepts a single parameter of type\n  ``list``, containing the values for the iterable.\n\nmappingfield\n~~~~~~~~~~~~\na subclass of `dictfield`_ that can return values that aren't of type ``dict``, such as ``collections.ordereddict``.\n\n**signature**: ``mappingfield(container=dict)``\n\n* ``container``: the type of the returned mapping. must have a constructor that accepts a single parameter of type\n  ``dict``, containing the values for the mapping.\n\nunionfield\n~~~~~~~~~~\na field that can serialize and deserialize values of multiple types (i.e. values of a union type). the serialized\nrepresentation of this field includes an extra discriminator field (by default named ``type``) that indicates the actual\ntype of the value.\n\n.. code:: python\n\n    @dataclass\n    class a:\n        a: str\n\n    @dataclass\n    class b:\n        b: int\n\n    @dataclass\n    class response:\n        obj: a | b\n\n    class responseserializer(dataclassserializer):\n        class meta:\n            dataclass = response\n\n.. code:: python\n\n    >>> response = response(obj=a('hello'))\n    >>> serializer = responseserializer(instance=response)\n    >>> serializer.data\n    {\n        'obj': {'type': 'a', 'a': 'hello'}\n    }\n    >>> deserializer = responseserializer(data={'obj': {'type': 'b', 'b': 42}})\n    >>> deserializer.is_valid()\n    true\n    >>> deserializer.validated_data\n    response(obj=b(b=42))\n\nthe name of the discriminator field can be changed by setting the ``discriminator_field_name`` keyword argument for the\nfield:\n\n.. code:: python\n\n    @dataclass\n    class response:\n        obj: a | b = dataclasses.field(metadata={'serializer_kwargs': {'discriminator_field_name': 'a_or_b'}})\n\n    # or:\n    class responseserializer(dataclassserializer):\n        class meta:\n            dataclass = response\n            extra_kwargs = {\n                'obj': {'discriminator_field_name': 'a_or_b'}\n            }\n\nunions containing a type that does not serialize to a mapping (e.g. an integer or string) can be serialized by enabling\nnesting with the ``nest_value`` keyword argument:\n\n.. code:: python\n\n    @dataclass\n    class response:\n        amount: int | float\n\n    class responseserializer(dataclassserializer):\n        class meta:\n            dataclass = response\n            extra_kwargs = {\n                'amount': {'nest_value': true}\n            }\n\n.. code:: python\n\n    >>> response = response(amount=42)\n    >>> serializer = responseserializer(instance=response)\n    >>> serializer.data\n    {\n        'amount': {'type': 'int', 'value': 42}\n    }\n\n**signature**: ``unionfield(child_fields, nest_value=false, discriminator_field_name=none, value_field_name=none)``.\n\n* ``child_fields``: a dictionary mapping the individual types to the serializer field to be used for them.\n* ``nest_value``: whether the value should be put under a key (``true``), or merged directly into the serialized\n  representation of this field (``false``). this is disabled by default, and should usually only be set to ``true`` if\n  any of the union member types is a primitive.\n* ``discriminator_field_name``: name of the discriminator field, defaults to ``type``.\n* ``value_field_name``: name of the field under which values are nested if ``nest_value`` is used defaults to ``value``.\n\nthe values used in the discriminator field can be changed by subclassing ``unionfield`` and overriding the\n``get_discriminator(self, type)`` method. the lone argument to this method is one of the member types of union (a key\nfrom the ``child_fields`` parameter), and it should return the appropriate string to be used in the discriminator field\nfor values of this type.\n\n.. _`enumerations`: https://docs.python.org/3/library/enum.html\n.. _`choicefield`: https://www.django-rest-framework.org/api-guide/fields/#choicefield\n.. _`decimalfield`: https://www.django-rest-framework.org/api-guide/fields/#decimalfield\n.. _`listfield`: https://www.django-rest-framework.org/api-guide/fields/#listfield\n.. _`dictfield`: https://www.django-rest-framework.org/api-guide/fields/#dictfield\n\nadvanced usage\n--------------\n\n* the output of methods or properties on the dataclass can be included as a (read-only) field in the serialized state\n  by adding their name to the ``fields`` option in the ``meta`` class.\n\n* if you don't need to customize the generated fields, ``dataclassserializer`` can also be used directly without\n  creating a subclass. in that case, the dataclass should be specified using the ``dataclass`` constructor parameter:\n\n  .. code:: python\n\n    serializer = dataclassserializer(data=request.data, dataclass=person)\n\n* partial updates are supported by setting the ``partial`` argument to ``true``. nested dataclasses will also be\n  partially updated, but nested fields and dictionaries will be replaced in full with the supplied value:\n\n  .. code:: python\n\n    @dataclass\n    class company:\n        name: str\n        location: optional[str] = none\n\n    @dataclass\n    class person:\n        name: str\n        current_employer: company\n        past_employers: list[company]\n\n    alice = person(name='alice',\n                   current_employer=company('acme corp.', 'new york city'),\n                   past_employers=[company('psf', 'delaware'), company('ministry of silly walks', 'london')])\n\n    data = {'current_employer': {'location': 'los angeles'}, 'past_employers': [{'name': 'oscorp', 'location': 'nyc'}]}\n\n    >>> serializer = personserializer(partial=true, instance=alice, data=data)\n    >>> print(serializer.save())\n    person(name='alice',\n           current_employer=company('acme corp.', 'los angeles'),\n           past_employers=[company(name='oscorp', location='nyc')])\n\n* if you override the ``create()`` or ``update()`` methods, the dataclass instance passed in the ``validated_data``\n  argument will have the special ``rest_framework.fields.empty`` value for any fields for which no data was provided.\n  this is required to distinguish between not-provided fields and fields with the default value, as needed for (both\n  regular and partial) updates. you can get rid of these ``empty`` markers and replace them with the default value by\n  calling the parent ``update()`` or ``create()`` methods - this is the only thing they do.\n\n  .. code:: python\n\n    class companyserializer(dataclassserializer):\n        def create(self, validated_data):\n            instance = super(companyserializer, self).create(validated_data)\n            # if no value is provided for location, these will both hold\n            assert validated_data.location == rest_framework.fields.empty\n            assert instance.location is none  # none is the default value of company.location (see previous example)\n\n  the ``validated_data`` property on the serializer has these ``empty`` markers stripped as well, and replaced with the\n  default values for not-provided fields. note that this means you cannot access ``validated_data`` on the serializer\n  for partial updates where no data has been provided for fields without a default value, an exception will be thrown.\n\nschemas\n-------\n\nstarting from version 0.21.2, `drf-spectacular`_ natively supports ``dataclassserializer``. for previous versions, you\ncan include the `extension`_ in your project manually. you don't need to configure it, but you do need to import the\nmodule that contains the extension.\n\n.. _`drf-spectacular`: https://github.com/tfranzel/drf-spectacular\n.. _`extension`: https://github.com/tfranzel/drf-spectacular/blob/master/drf_spectacular/contrib/rest_framework_dataclasses.py\n",
  "docs_url": null,
  "keywords": "",
  "license": "copyright (c) 2019-2021, oxan van leeuwen  redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:  1. redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.  2. redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.  3. neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.  this software is provided by the copyright holders and contributors \"as is\" and any express or implied warranties, including, but not limited to, the implied warranties of merchantability and fitness for a particular purpose are disclaimed. in no event shall the copyright holder or contributors be liable for any direct, indirect, incidental, special, exemplary, or consequential damages (including, but not limited to, procurement of substitute goods or services; loss of use, data, or profits; or business interruption) however caused and on any theory of liability, whether in contract, strict liability, or tort (including negligence or otherwise) arising in any way out of the use of this software, even if advised of the possibility of such damage. ",
  "name": "djangorestframework-dataclasses",
  "package_url": "https://pypi.org/project/djangorestframework-dataclasses/",
  "project_url": "https://pypi.org/project/djangorestframework-dataclasses/",
  "project_urls": {
    "Changelog": "https://github.com/oxan/djangorestframework-dataclasses/blob/master/CHANGELOG.rst",
    "Documentation": "https://github.com/oxan/djangorestframework-dataclasses/blob/master/README.rst",
    "Repository": "https://github.com/oxan/djangorestframework-dataclasses",
    "Sponsor": "https://github.com/sponsors/oxan"
  },
  "release_url": "https://pypi.org/project/djangorestframework-dataclasses/1.3.1/",
  "requires_dist": [
    "django >=2.0",
    "djangorestframework >=3.9",
    "typing-extensions >=3.7.4 ; python_version < \"3.8\"",
    "django-stubs ; extra == 'dev'",
    "djangorestframework-stubs ; extra == 'dev'",
    "mypy ~=1.5.1 ; extra == 'dev'",
    "coverage[toml] ; extra == 'test'",
    "tox ; extra == 'test'"
  ],
  "requires_python": ">=3.7",
  "summary": "a dataclasses serializer for django rest framework",
  "version": "1.3.1",
  "releases": [],
  "developers": [
    "oxan@oxanvanleeuwen.nl"
  ],
  "kwds": "djangorestframework serializer_dataclass_field serializer_related_field serializer_field rest_framework_dataclasses",
  "license_kwds": "copyright liability liable redistributions redistribution",
  "libtype": "pypi",
  "id": "pypi_djangorestframework_dataclasses",
  "homepage": "",
  "release_count": 16,
  "dependency_ids": [
    "pypi_coverage",
    "pypi_django",
    "pypi_django_stubs",
    "pypi_djangorestframework",
    "pypi_djangorestframework_stubs",
    "pypi_mypy",
    "pypi_tox",
    "pypi_typing_extensions"
  ],
  "documentation_summary": "The HTML text provides information about the \"djangorestframework-dataclasses\" package version 1.3.1, released on September 12, 2023. This package offers a dataclasses serializer for the Django REST Framework, facilitating the serialization of Python dataclasses within Django applications. It requires Python version 3.7 or higher and is compatible with various Django versions from 3.2 to 4.2. The package supports automatic field generation based on dataclass type annotations and includes features for customizing field generation, nesting dataclasses and models, and handling new serializer field types like EnumField and UnionField. Installation is done via pip. The package is licensed under the BSD License and maintained by Oxan van Leeuwen.",
  "embedding": [
    -0.013145582750439644,
    0.002770679071545601,
    -0.024103695526719093,
    -0.03256283327937126,
    0.004551459103822708,
    0.02332838997244835,
    -0.011491135694086552,
    -0.030153848230838776,
    -0.026208097115159035,
    -0.0044545456767082214,
    -0.0053648375906050205,
    0.034058064222335815,
    -0.034168824553489685,
    0.031067602336406708,
    0.01751359924674034,
    0.0009483648464083672,
    0.02904626913368702,
    -0.009587484411895275,
    0.004413011483848095,
    -0.01112425047904253,
    0.0448569655418396,
    0.01946570724248886,
    -0.0036480894777923822,
    -0.012536413967609406,
    -0.006991595029830933,
    0.034307271242141724,
    -0.005434061400592327,
    -0.02112707681953907,
    0.004759130068123341,
    0.021763935685157776,
    0.04413703829050064,
    0.0022653460036963224,
    -0.03895910456776619,
    -0.031482942402362823,
    -0.018828850239515305,
    -0.008113019168376923,
    0.01790125109255314,
    0.0023968711029738188,
    0.036411672830581665,
    0.022636152803897858,
    0.009449036791920662,
    -0.0019053826108574867,
    -0.008562972769141197,
    -0.009338278323411942,
    -0.022663842886686325,
    0.008687575347721577,
    0.0017236704006791115,
    -0.03699314966797829,
    0.007143887225538492,
    -0.013110971078276634,
    0.015173837542533875,
    0.04363862797617912,
    -0.003319276962429285,
    -0.021583953872323036,
    0.006908526178449392,
    -0.023425303399562836,
    0.005319842137396336,
    0.02173624560236931,
    0.014509289525449276,
    -0.01342247799038887,
    0.02247001603245735,
    -0.002391679212450981,
    -0.0335596539080143,
    -0.03502719849348068,
    -0.008016105741262436,
    -0.006863531190901995,
    -0.032978177070617676,
    0.023134564980864525,
    -0.0002907395828515291,
    0.014121636748313904,
    0.03009846992790699,
    0.035719435662031174,
    -0.002519743051379919,
    0.013699372299015522,
    0.040177442133426666,
    -0.00244186632335186,
    -0.004267641808837652,
    0.007586918771266937,
    -0.007566151674836874,
    -0.0177212692797184,
    0.009712086990475655,
    -0.020739423111081123,
    -0.027066471055150032,
    0.022096209228038788,
    0.037103909999132156,
    0.04275256395339966,
    -0.025737375020980835,
    0.00390767864882946,
    -0.0015177298337221146,
    0.0008419333607889712,
    0.024574417620897293,
    -0.002893551019951701,
    0.004291870165616274,
    0.011511903256177902,
    0.0002823029353749007,
    0.039125241339206696,
    0.0003612612490542233,
    0.0458814762532711,
    0.005049869883805513,
    -0.01808123290538788,
    -0.0073584807105362415,
    0.019438019022345543,
    -0.02278844639658928,
    -0.022760756313800812,
    -0.04402628168463707,
    -0.010473547503352165,
    0.008500671945512295,
    -0.001073832856491208,
    -0.004025358706712723,
    0.01313173770904541,
    -0.01689058542251587,
    0.0589786022901535,
    0.002244578907266259,
    -0.04460775852203369,
    -0.006344353314489126,
    -0.00766998715698719,
    0.0154091976583004,
    -0.002732605906203389,
    0.015713782981038094,
    0.012965600937604904,
    -0.007268489804118872,
    0.02644345723092556,
    0.01837197318673134,
    -0.02108554169535637,
    0.0007813626434653997,
    -0.02379911206662655,
    -0.025529704988002777,
    -0.0021701634395867586,
    -2.9501199605874717e-05,
    -0.0012936181155964732,
    -0.003526948159560561,
    0.008867557160556316,
    0.030264606699347496,
    -0.014744650572538376,
    -0.019050365313887596,
    0.0200748760253191,
    -0.017499754205346107,
    0.016004521399736404,
    -0.015353819355368614,
    -0.018427351489663124,
    -0.009165219031274319,
    0.023646820336580276,
    -0.013000212609767914,
    -0.012716395780444145,
    0.004800664260983467,
    0.005046408623456955,
    0.004319559782743454,
    0.007586918771266937,
    0.004098043777048588,
    -0.0060086180455982685,
    0.02231772430241108,
    -0.007628452964127064,
    -0.01124885305762291,
    -0.014744650572538376,
    -0.01881500519812107,
    0.009379812516272068,
    0.0005689323879778385,
    0.015367663465440273,
    0.008348379284143448,
    0.013630148954689503,
    -0.004378399811685085,
    0.018925761803984642,
    -0.026678819209337234,
    -0.02832634188234806,
    0.004835276398807764,
    0.030430743470788002,
    0.029350854456424713,
    -0.017015188932418823,
    -0.04192188009619713,
    0.01242565643042326,
    0.001978067448362708,
    0.0439985916018486,
    -0.015173837542533875,
    -0.010293565690517426,
    -0.022331569343805313,
    0.025294344872236252,
    0.000733338703867048,
    -0.002881437074393034,
    -0.034307271242141724,
    0.01852426491677761,
    0.004935650620609522,
    -0.0036307836417108774,
    0.017416685819625854,
    0.022594619542360306,
    -0.022954583168029785,
    -0.006970827933400869,
    0.017887407913804054,
    -0.016904430463910103,
    0.0029558525420725346,
    0.03137218579649925,
    0.03868221119046211,
    0.009365968406200409,
    0.010168963111937046,
    -0.03045843355357647,
    -0.5697388052940369,
    -0.015976833179593086,
    -0.004897577688097954,
    -0.03990054875612259,
    0.020684044808149338,
    0.003980363253504038,
    -0.0027447200845927,
    -0.0010236456291750073,
    -0.0008601046283729374,
    0.01014819648116827,
    -0.017638200893998146,
    0.018898073583841324,
    0.008722187951207161,
    -0.01099964790046215,
    -0.010051283054053783,
    -0.009539027698338032,
    0.027218762785196304,
    -0.03023691661655903,
    -0.01464773714542389,
    0.01874578185379505,
    -0.005659038200974464,
    0.03491643816232681,
    -0.0552128329873085,
    0.002995656104758382,
    -0.018108922988176346,
    0.02061482146382332,
    -0.002597619779407978,
    0.004222646355628967,
    0.014066258445382118,
    -0.018607333302497864,
    -0.06529180705547333,
    0.03992823511362076,
    0.016142969951033592,
    -0.03009846992790699,
    0.04543844237923622,
    0.007891503162682056,
    -0.010992725379765034,
    0.04286332055926323,
    0.038765277713537216,
    0.030015401542186737,
    -0.0012953487457707524,
    -0.008369146846234798,
    -0.0060813031159341335,
    0.016475243493914604,
    0.0008350110147148371,
    -0.002313802484422922,
    0.013443244621157646,
    0.0035857881885021925,
    -0.015118458308279514,
    -0.019161123782396317,
    0.006960444152355194,
    -0.0024712865706533194,
    0.007476160768419504,
    -0.02177777886390686,
    0.029710816219449043,
    -0.012481034733355045,
    0.015755316242575645,
    0.0008142439182847738,
    0.0016241613775491714,
    0.0003837589465547353,
    0.01874578185379505,
    0.020088721066713333,
    0.013699372299015522,
    -0.022331569343805313,
    -0.005451367236673832,
    0.027329521253705025,
    -0.009033693931996822,
    -0.02756488136947155,
    -0.0036446284502744675,
    -0.031095290556550026,
    0.001779049402102828,
    0.010023592971265316,
    0.01870424672961235,
    -0.0016215654322877526,
    0.011380378156900406,
    0.045493822544813156,
    0.02260846458375454,
    0.010757364332675934,
    -0.00022281381825450808,
    0.05285922437906265,
    0.02644345723092556,
    -0.0019503780640661716,
    0.004011514130979776,
    -0.025640463456511497,
    0.033338140696287155,
    -0.01982567086815834,
    -0.0025699303951114416,
    -0.00782920140773058,
    -0.004246874712407589,
    -0.013380943797528744,
    0.01787356287240982,
    0.016004521399736404,
    -0.003924984484910965,
    -0.023051496595144272,
    -0.008279155939817429,
    0.02406216226518154,
    0.014980010688304901,
    -0.0030233454890549183,
    -0.030126160010695457,
    -0.02043483965098858,
    -0.001540227560326457,
    -0.005818252917379141,
    0.002249770564958453,
    -0.0005589814973063767,
    -0.022290034219622612,
    -0.00802995078265667,
    -0.007088507991284132,
    0.021902382373809814,
    0.01558917947113514,
    -0.010494315065443516,
    0.025238964706659317,
    -0.04333404451608658,
    -0.040066685527563095,
    -0.00020734664576593786,
    -0.01841350644826889,
    -0.02778639830648899,
    0.022982271388173103,
    0.013020980171859264,
    0.02742643468081951,
    -0.0004997086944058537,
    -0.004991029389202595,
    0.013450167141854763,
    0.010051283054053783,
    -7.198184175649658e-05,
    0.014003956690430641,
    0.02496206946671009,
    -0.012834075838327408,
    -0.001466677407734096,
    -0.013830897398293018,
    -0.01823352463543415,
    0.01653062179684639,
    0.013609381392598152,
    0.01993642933666706,
    -0.029240095987915993,
    0.03774076700210571,
    0.011117327958345413,
    0.024076007306575775,
    0.022345414385199547,
    -0.00782920140773058,
    -0.024989759549498558,
    -0.017735114321112633,
    0.010030515491962433,
    0.008050717413425446,
    -0.027191074565052986,
    -0.013879354111850262,
    -0.010681218467652798,
    -0.011297309771180153,
    -0.019908739253878593,
    -0.015326129272580147,
    -0.006742389407008886,
    -0.014813873916864395,
    0.017845872789621353,
    -0.030264606699347496,
    0.0044303173199296,
    -0.00039003233541734517,
    -0.006129759829491377,
    -0.017278239130973816,
    -0.031925976276397705,
    -0.03751925006508827,
    0.0029022041708230972,
    0.02948930114507675,
    0.008154553361237049,
    -0.027357211336493492,
    0.016918275505304337,
    -0.027647949755191803,
    -0.005081020295619965,
    -0.018136613070964813,
    0.028243273496627808,
    0.028630927205085754,
    -0.01197570189833641,
    -0.01251564733684063,
    -0.02915702760219574,
    -0.011048104614019394,
    0.007303101476281881,
    0.03483337163925171,
    0.034528788179159164,
    -0.014149326831102371,
    0.0224284827709198,
    0.0023882179521024227,
    -0.016226038336753845,
    -0.002192661166191101,
    0.0017037686193361878,
    -0.03743618354201317,
    -0.014384686946868896,
    0.02065635472536087,
    0.002784523880109191,
    -0.005980928428471088,
    0.01617065817117691,
    -0.01117962971329689,
    0.011041182093322277,
    -0.01009281724691391,
    0.006614325568079948,
    -0.026831110939383507,
    0.025806600227952003,
    -0.009400580078363419,
    0.014841563999652863,
    0.010861200280487537,
    0.0010971957817673683,
    -0.011290387250483036,
    0.012737162411212921,
    0.0006178216426633298,
    0.004343787673860788,
    0.0006896412232890725,
    0.00679084612056613,
    0.02734336629509926,
    -0.01021741982549429,
    0.03848838433623314,
    -0.03857145085930824,
    0.021985450759530067,
    -0.003066610312089324,
    0.026526525616645813,
    -0.005392527207732201,
    -0.014980010688304901,
    -0.018898073583841324,
    0.018399663269519806,
    0.009054461494088173,
    0.00011616604024311528,
    0.03400268778204918,
    -0.026429612189531326,
    0.004935650620609522,
    0.008376069366931915,
    0.008438370190560818,
    0.01233566552400589,
    0.004696828778833151,
    0.004475312773138285,
    -0.005776718724519014,
    0.013138660229742527,
    0.024546727538108826,
    0.02296842820942402,
    -0.0317598395049572,
    -0.006133220624178648,
    0.0466567799448967,
    0.009670552797615528,
    -0.017735114321112633,
    0.017319772392511368,
    0.021694710478186607,
    0.02260846458375454,
    -0.02691417932510376,
    0.02937854267656803,
    -0.03502719849348068,
    0.028658617287874222,
    0.011262698099017143,
    0.027398744598031044,
    -0.01594914309680462,
    0.005340609233826399,
    -0.009393657557666302,
    -0.008819100446999073,
    0.01558917947113514,
    -0.00672854483127594,
    0.015783006325364113,
    -0.0037726922892034054,
    0.014813873916864395,
    0.000636425509583205,
    0.010189730674028397,
    0.015506111085414886,
    -0.014869253151118755,
    0.017568977549672127,
    0.030873775482177734,
    0.03397499769926071,
    -0.02648499235510826,
    0.004208801779896021,
    0.003561559831723571,
    0.01906421035528183,
    0.013789363205432892,
    0.037962283939123154,
    -0.005575969815254211,
    -0.03142756596207619,
    -0.025474324822425842,
    -0.0006632496952079237,
    -0.0056867278181016445,
    -0.010902734473347664,
    -0.030070779845118523,
    -0.026069650426506996,
    -0.032756660133600235,
    0.011726496741175652,
    0.0014009148580953479,
    0.005098326131701469,
    0.011594971641898155,
    0.010210497304797173,
    0.01765204593539238,
    -0.016198348253965378,
    -0.036300912499427795,
    0.01539535354822874,
    0.004056509584188461,
    0.005406371783465147,
    -0.010577383451163769,
    -0.02406216226518154,
    0.018496574833989143,
    -0.01009281724691391,
    0.026817265897989273,
    0.004167267587035894,
    0.01222490705549717,
    0.0158383846282959,
    -0.005174472462385893,
    -0.013941655866801739,
    0.0010772940004244447,
    0.03375348076224327,
    -0.022331569343805313,
    -0.013796285726130009,
    0.011442679911851883,
    0.01841350644826889,
    0.019396483898162842,
    0.0008843329269438982,
    0.03469492495059967,
    0.03400268778204918,
    -0.002320725005120039,
    -0.021071698516607285,
    0.003428304335102439,
    -0.02424214407801628,
    -0.03707621991634369,
    0.006198983173817396,
    0.015021544881165028,
    -0.012944834306836128,
    0.011020414531230927,
    0.017347462475299835,
    -0.007753055542707443,
    0.03328276053071022,
    0.0051606278866529465,
    0.030956843867897987,
    -0.011968779377639294,
    0.008362224325537682,
    -0.016807517036795616,
    -0.013533235527575016,
    0.0005810465081594884,
    1.3155208762327675e-05,
    0.019881049171090126,
    0.0031842906028032303,
    0.007171576377004385,
    -0.041008125990629196,
    -0.006617786828428507,
    -0.004558381158858538,
    0.01427392940968275,
    -0.0013896659947931767,
    -0.01675213873386383,
    -0.009518260136246681,
    0.01464773714542389,
    0.011456524021923542,
    0.015063080005347729,
    0.015298440121114254,
    0.010494315065443516,
    -0.023383770138025284,
    -0.001433796132914722,
    -0.012806386686861515,
    -0.023106874898076057,
    0.0005879689124412835,
    -0.009975137189030647,
    0.03585788235068321,
    0.027398744598031044,
    0.06324278563261032,
    -0.0031981354113668203,
    0.014730805531144142,
    0.026637284085154533,
    0.00391460070386529,
    -0.033698104321956635,
    0.019119588658213615,
    0.020739423111081123,
    0.026706507429480553,
    0.01076428685337305,
    -0.027869466692209244,
    0.010155118070542812,
    0.004226107615977526,
    0.021722400560975075,
    0.011366533115506172,
    0.012474113143980503,
    0.02843710035085678,
    0.022594619542360306,
    0.004302253481000662,
    -0.006901604123413563,
    0.0021026702597737312,
    -0.02575122006237507,
    -0.017665890976786613,
    0.01318711694329977,
    -0.005022180266678333,
    -0.01351246889680624,
    -0.005762874148786068,
    0.011608816683292389,
    -0.021113231778144836,
    -0.02702493779361248,
    0.005911705084145069,
    -0.01830274984240532,
    0.008590662851929665,
    -0.0036653955467045307,
    -0.01935494877398014,
    -0.016336794942617416,
    -0.027551036328077316,
    -0.005309458822011948,
    0.025155896320939064,
    -0.01300713513046503,
    -0.017818182706832886,
    0.026401923969388008,
    0.0029160487465560436,
    0.003575404640287161,
    -0.03400268778204918,
    0.019410328939557076,
    -0.013505546376109123,
    -0.0121349161490798,
    0.0025301265995949507,
    -0.024477504193782806,
    0.019230347126722336,
    0.0033261992502957582,
    0.016613690182566643,
    0.012661016546189785,
    -0.002867592265829444,
    -0.020157944411039352,
    0.014370842836797237,
    -0.024297522380948067,
    -0.004586070775985718,
    -0.044081658124923706,
    0.005018719006329775,
    -0.010348944924771786,
    -0.0020645970944315195,
    0.009587484411895275,
    -0.003848838387057185,
    0.041008125990629196,
    -0.007462316192686558,
    0.0051987008191645145,
    -0.008410681039094925,
    -0.0009648054838180542,
    -0.009324434213340282,
    0.00781535729765892,
    0.0019417251460254192,
    -0.006036307662725449,
    0.014855408109724522,
    -0.0011257505975663662,
    -0.004918344784528017,
    -0.009649785235524178,
    -0.018316594883799553,
    0.0005918627139180899,
    0.027357211336493492,
    -0.0073584807105362415,
    -0.004229568876326084,
    0.017915096133947372,
    0.0032119802199304104,
    0.021805468946695328,
    0.024076007306575775,
    -0.00493911188095808,
    -0.011075793765485287,
    0.014966166578233242,
    0.007822279818356037,
    0.006192061118781567,
    -0.02424214407801628,
    0.02413138560950756,
    -0.0027672178111970425,
    -0.0042330301366746426,
    0.015962988138198853,
    -0.03757463023066521,
    0.028160205110907555,
    0.0318429060280323,
    -0.002881437074393034,
    0.028340186923742294,
    0.005461751017719507,
    -0.007933037355542183,
    -0.0261942520737648,
    0.018856538459658623,
    0.02536356821656227,
    0.009428269229829311,
    -0.027357211336493492,
    -0.01949339732527733,
    -0.004350710194557905,
    0.012446423061192036,
    -0.03981747850775719,
    0.0022653460036963224,
    -0.0004209666803944856,
    -0.0048041255213320255,
    -0.00017522252164781094,
    -0.01675213873386383,
    -0.015381508506834507,
    -0.025114363059401512,
    -0.013865509070456028,
    -0.028658617287874222,
    -0.014142404310405254,
    -0.008036873303353786,
    0.006981211248785257,
    0.009954369626939297,
    -0.009608251042664051,
    -0.008196087554097176,
    -0.0022030447144061327,
    -0.012861765921115875,
    0.002872783923521638,
    0.020504062995314598,
    0.005257540848106146,
    -0.023342235013842583,
    0.014993855729699135,
    0.013803208246827126,
    0.03763001039624214,
    -0.008694497868418694,
    0.002775870729237795,
    0.02550201490521431,
    0.012944834306836128,
    -0.003668856807053089,
    -0.0285478588193655,
    0.005212545394897461,
    -0.02749565802514553,
    -0.0020144099835306406,
    -0.02868630550801754,
    0.025820443406701088,
    -0.0029921948444098234,
    -0.012356432154774666,
    0.029710816219449043,
    0.00020983436843380332,
    -0.005392527207732201,
    0.010646606795489788,
    -0.011678040027618408,
    -0.043389420956373215,
    -0.0008332804427482188,
    0.015201526693999767,
    0.008189165033400059,
    0.019507242366671562,
    -0.026028115302324295,
    -0.016918275505304337,
    0.03198135644197464,
    -0.0029852725565433502,
    0.010016671381890774,
    0.0005568182095885277,
    0.010708908550441265,
    -0.0010798899456858635,
    0.026775730773806572,
    0.0031046834774315357,
    0.001882885000668466,
    0.008798333816230297,
    0.0017807799158617854,
    -0.02926778420805931,
    -0.021030163392424583,
    0.0036377059295773506,
    -0.011311154812574387,
    0.013879354111850262,
    0.02781408652663231,
    0.01863502338528633,
    -0.0015869535272940993,
    0.03137218579649925,
    0.024699019268155098,
    -0.03350427746772766,
    -0.004634527489542961,
    -0.026069650426506996,
    -0.03137218579649925,
    -0.018731936812400818,
    -0.02948930114507675,
    -0.026360388845205307,
    0.019230347126722336,
    -0.011408067308366299,
    0.006856608670204878,
    0.0172920823097229,
    0.0048041255213320255,
    -0.0038626831956207752,
    0.005929010920226574,
    -0.022483861073851585,
    0.016032211482524872,
    0.03632860258221626,
    0.032147493213415146,
    0.035580988973379135,
    -0.009068306535482407,
    -0.02785562165081501,
    -0.0031981354113668203,
    -0.01986720599234104,
    -0.021293213590979576,
    0.029904643073678017,
    0.00987822376191616,
    -0.017610512673854828,
    -0.025058982893824577,
    0.016378330066800117,
    -0.021223990246653557,
    -0.03139987587928772,
    -0.02503129467368126,
    0.01434315275400877,
    0.0181919913738966,
    0.01599067822098732,
    -0.05028410255908966,
    -7.555119373137131e-05,
    -0.014966166578233242,
    -0.0018776931101456285,
    -0.01439853198826313,
    -0.0006355601944960654,
    0.008092251606285572,
    -0.017029032111167908,
    -0.02825711853802204,
    0.02467133104801178,
    0.011948012746870518,
    0.014689271338284016,
    0.01957646571099758,
    0.01088888943195343,
    -0.027869466692209244,
    -0.054243698716163635,
    0.00042897069943137467,
    -0.010570460930466652,
    0.029350854456424713,
    0.020420994609594345,
    0.008009183220565319,
    -0.011518825776875019,
    0.038183800876140594,
    0.005132938269525766,
    -0.038792967796325684,
    -0.0014606203185394406,
    -0.008382991887629032,
    0.04696136713027954,
    -0.02036561630666256,
    -0.015243060886859894,
    -0.021002473309636116,
    0.014087025076150894,
    -0.018856538459658623,
    -0.006787384860217571,
    -0.010300488211214542,
    -0.02278844639658928,
    -0.01659984514117241,
    -0.019147278741002083,
    -0.006583175156265497,
    -0.007912269793450832,
    0.021930072456598282,
    -0.005305997561663389,
    -0.013962422497570515,
    -0.0075246174819767475,
    7.468589319614694e-05,
    -0.005188317038118839,
    0.026775730773806572,
    -0.030264606699347496,
    -0.0173336174339056,
    -0.02173624560236931,
    -0.013720139861106873,
    0.02608349360525608,
    -0.0068808370269834995,
    0.01351246889680624,
    -0.015270750969648361,
    0.021459350362420082,
    -0.01557533536106348,
    0.01747206412255764,
    -0.005264463368803263,
    0.013768596574664116,
    -0.014059335924685001,
    0.008154553361237049,
    -0.012114149518311024,
    -0.01528459507972002,
    0.02846479043364525,
    0.010189730674028397,
    -0.04056509584188461,
    -0.03009846992790699,
    -0.02318994328379631,
    0.012349509634077549,
    -0.007071202155202627,
    -0.02402062714099884,
    0.006053613498806953,
    0.0026339623145759106,
    0.019797980785369873,
    -0.0093313567340374,
    -0.04613067954778671,
    0.03247976675629616,
    -0.007801512256264687,
    -0.007503850385546684,
    -0.01475849561393261,
    -0.036882393062114716,
    0.011276542209088802,
    -0.015727628022432327,
    0.012481034733355045,
    -0.001914035645313561,
    -0.023522216826677322,
    -0.015243060886859894,
    -0.008050717413425446,
    -0.0064135766588151455,
    -0.005894398782402277,
    0.024934381246566772,
    -0.007220033090561628,
    0.008189165033400059,
    -0.023646820336580276,
    0.02680342085659504,
    0.005610581953078508,
    -0.020850181579589844,
    0.009511337615549564,
    0.019299570471048355,
    0.03787921369075775,
    0.02395140379667282,
    -0.00157570478040725,
    -0.014841563999652863,
    -0.0373254269361496,
    0.004319559782743454,
    -0.02749565802514553,
    -0.021722400560975075,
    -0.010930423624813557,
    0.030403053387999535,
    0.014800029806792736,
    -0.013955499976873398,
    -0.018898073583841324,
    -0.02651268057525158,
    -0.018150456249713898,
    0.007001978345215321,
    -0.023965248838067055,
    0.02101631835103035,
    0.0025733914226293564,
    0.003215441480278969,
    0.010660451836884022,
    0.012294131331145763,
    -0.007406936958432198,
    0.041617296636104584,
    -0.02260846458375454,
    0.022483861073851585,
    -0.01108963880687952,
    0.03790690377354622,
    0.015243060886859894,
    -0.01343632210046053,
    -0.04416472837328911,
    0.0035684823524206877,
    0.03400268778204918,
    0.0031617931090295315,
    0.009919757954776287,
    0.02890782244503498,
    0.003724235575646162,
    0.006918909959495068,
    -0.0042330301366746426,
    -0.00882602296769619,
    -0.021722400560975075,
    0.022096209228038788,
    0.005503285210579634,
    -0.034390341490507126,
    -0.027841776609420776,
    -0.015866074711084366,
    0.025017449632287025,
    0.024685176089406013,
    -0.0043264818377792835,
    -0.0033850395120680332,
    -0.014440066181123257,
    0.003397153690457344,
    -0.016378330066800117,
    -0.008819100446999073,
    0.016433708369731903,
    0.008147630840539932,
    0.018925761803984642,
    -0.010252031497657299,
    0.00806456245481968,
    0.034390341490507126,
    0.009905912913382053,
    0.0008432313334196806,
    -0.020517908036708832,
    0.003814226482063532,
    0.005139860790222883,
    -0.0066420151852071285,
    -0.006050152238458395,
    -0.033587343990802765,
    0.020628666505217552,
    -0.037242356687784195,
    0.04197726026177406,
    -0.025045137852430344,
    0.025515859946608543,
    -0.008216854184865952,
    0.009137529879808426,
    -0.019216502085328102,
    0.00806456245481968,
    0.007178498897701502,
    -0.030181538313627243,
    0.008805256336927414,
    -0.004260719288140535,
    0.004776435904204845,
    -0.014592357911169529,
    -0.0003712121397256851,
    0.018579643219709396,
    0.002675496507436037,
    0.00606053601950407,
    -0.01551995612680912,
    -0.031095290556550026,
    -0.025557395070791245,
    -0.004835276398807764,
    -0.018870383501052856,
    -0.004357632715255022,
    0.03530409187078476,
    0.18441197276115417,
    0.01848273165524006,
    0.01334633119404316,
    -0.0017158827977254987,
    0.002933354815468192,
    0.019881049171090126,
    -0.009227520786225796,
    0.007455393671989441,
    -0.03009846992790699,
    0.03751925006508827,
    0.007233877666294575,
    -0.009705164469778538,
    0.006299357861280441,
    0.0060432301834225655,
    0.020282547920942307,
    0.01794278621673584,
    -0.01765204593539238,
    -0.04989645257592201,
    -0.022594619542360306,
    0.0029748890083283186,
    -0.00882602296769619,
    -0.016406020149588585,
    -0.03643936291337013,
    -0.035608675330877304,
    0.014170093461871147,
    -0.027703329920768738,
    -0.005835558753460646,
    -0.0018257753690704703,
    0.02379911206662655,
    0.019977962598204613,
    -0.021099386736750603,
    -0.010030515491962433,
    0.01689058542251587,
    -0.0069639054127037525,
    -0.04056509584188461,
    -0.021639332175254822,
    0.005790563300251961,
    -0.003627322381362319,
    -0.012834075838327408,
    0.03447340801358223,
    0.0003989016404375434,
    -0.056486546993255615,
    -0.018316594883799553,
    -0.0224284827709198,
    -0.01653062179684639,
    -2.422829857096076e-05,
    -0.0008363089873455465,
    0.019977962598204613,
    0.002119976095855236,
    0.029932333156466484,
    -0.018399663269519806,
    -0.023646820336580276,
    0.026817265897989273,
    -0.005811330396682024,
    0.011844176799058914,
    -0.013228651136159897,
    0.0024955146946012974,
    0.00439570564776659,
    0.012979445978999138,
    0.0030510351061820984,
    -0.02846479043364525,
    0.02724645286798477,
    0.0007203592685982585,
    0.016558311879634857,
    -0.042918700724840164,
    0.017416685819625854,
    -0.03198135644197464,
    0.031095290556550026,
    -0.0037138520274311304,
    0.0035684823524206877,
    -0.0215285737067461,
    -0.007365402765572071,
    -0.020517908036708832,
    -0.022373102605342865,
    -0.019479552283883095,
    -0.01222490705549717,
    0.031566012650728226,
    0.02141781710088253,
    0.04001130536198616,
    0.028063291683793068,
    -0.0030129619408398867,
    -0.006354736629873514,
    0.004537614062428474,
    0.006849686149507761,
    0.004143039230257273,
    -0.025585083290934563,
    0.032756660133600235,
    -0.029323164373636246,
    -0.021431660279631615,
    -0.039845168590545654,
    0.0007199266110546887,
    -0.009871301241219044,
    0.007822279818356037,
    -0.00396997993811965,
    -0.009047538973391056,
    -0.005347531754523516,
    0.02264999784529209,
    0.02332838997244835,
    0.004617221653461456,
    0.005049869883805513,
    -0.041506536304950714,
    0.06390733271837234,
    0.013623226433992386,
    -0.007559229154139757,
    -0.031704459339380264,
    0.013962422497570515,
    -0.00781535729765892,
    0.007586918771266937,
    0.006410115864127874,
    -0.007483083289116621,
    0.004149961285293102,
    -0.017679736018180847,
    0.0032760121393948793,
    -0.007863814011216164,
    0.023286856710910797,
    -0.0029229712672531605,
    0.011567282490432262,
    -0.018441196531057358,
    0.009082150645554066,
    0.011082716286182404,
    -0.011719574220478535,
    -0.01610143482685089,
    -0.005056791938841343,
    0.009137529879808426,
    -0.025086672976613045,
    -0.0177212692797184,
    0.007136964704841375,
    0.01470311637967825,
    -0.0004438970354385674,
    -0.031122980639338493,
    0.005053331144154072,
    -0.01790125109255314,
    0.02543279156088829,
    0.02058713138103485,
    -0.01351246889680624,
    -0.010598150081932545,
    -0.011082716286182404,
    0.003672317834571004,
    0.010134351439774036,
    0.022774601355195045,
    -0.03668856620788574,
    -0.012148761190474033,
    0.017804337665438652,
    0.004873349331319332,
    -0.018939606845378876,
    -0.029821574687957764,
    0.013304797001183033,
    -0.004381861072033644,
    0.00035693476093001664,
    -0.007593841291964054,
    0.00820993259549141,
    -0.003935367800295353,
    0.020739423111081123,
    -0.0337257906794548,
    -0.006188599858433008,
    -0.015215371735394001,
    -0.015741471201181412,
    -0.027398744598031044,
    0.01094426866620779,
    0.010501236654818058,
    -0.02669266238808632,
    0.0020645970944315195,
    0.010805821046233177,
    -0.011027337051928043,
    -0.01427392940968275,
    -0.03200904279947281,
    -0.1726716309785843,
    0.027412589639425278,
    0.0008181377197615802,
    -0.04308483749628067,
    -0.01993642933666706,
    -0.0032950486056506634,
    0.01372706238180399,
    0.004866426810622215,
    -0.003952674102038145,
    -0.012356432154774666,
    0.020850181579589844,
    -0.009365968406200409,
    -0.016849052160978317,
    -0.0317598395049572,
    -0.007912269793450832,
    0.0173336174339056,
    -0.016627535223960876,
    -0.024255989119410515,
    0.03873758763074875,
    0.021985450759530067,
    0.03915293142199516,
    -0.024699019268155098,
    0.00564173236489296,
    0.014059335924685001,
    -0.013484778814017773,
    -0.0020663277246057987,
    0.00881217885762453,
    0.009559794329106808,
    -0.021943915635347366,
    -0.021653177216649055,
    -0.00900600478053093,
    -0.0048491209745407104,
    0.041506536304950714,
    -0.00482143135741353,
    0.026125028729438782,
    0.020891716703772545,
    0.031122980639338493,
    -0.007178498897701502,
    -0.00015596966841258109,
    0.025294344872236252,
    0.010466624982655048,
    0.015423042699694633,
    0.018399663269519806,
    -0.031122980639338493,
    -0.011664194986224174,
    0.0011629583314061165,
    0.01852426491677761,
    -0.02525280974805355,
    0.0013663029531016946,
    -0.029932333156466484,
    0.024657486006617546,
    -0.018399663269519806,
    0.015603024512529373,
    0.005811330396682024,
    0.01148421410471201,
    0.025349723175168037,
    -0.008272233419120312,
    0.009885146282613277,
    0.0033798476215451956,
    -0.010168963111937046,
    0.005974006373435259,
    -0.027301831170916557,
    -0.010480470024049282,
    0.0021493963431566954,
    -0.016738293692469597,
    -0.0028243274427950382,
    -0.03591326251626015,
    0.018870383501052856,
    0.020102566108107567,
    -0.0007130042067728937,
    -0.007434626575559378,
    0.02550201490521431,
    -0.002377834403887391,
    0.019161123782396317,
    0.006233595311641693,
    -0.005416755564510822,
    -0.009739776141941547,
    0.034639544785022736,
    0.013782440684735775,
    0.01014819648116827,
    -0.012183372862637043,
    0.040315888822078705,
    -0.016032211482524872,
    -0.0005633079563267529,
    0.005683266557753086,
    -0.01664138026535511,
    -0.0017072297632694244,
    -0.005440983921289444,
    0.0010608533630147576,
    0.016032211482524872,
    0.012951756827533245,
    -0.03671625629067421,
    0.013284030370414257,
    -0.009719009511172771,
    -0.0024660946801304817,
    0.02256692945957184,
    -0.013740906491875648,
    0.012633327394723892,
    -0.028852442279458046,
    -0.03247976675629616,
    0.02249770611524582,
    0.034777991473674774,
    0.0011127711040899158,
    0.0076076858676970005,
    0.007033129222691059,
    0.03242438659071922,
    -0.041146572679281235,
    -0.0004949495196342468,
    0.013519390486180782,
    0.004679522942751646,
    0.01677982695400715,
    0.011961856856942177,
    0.03211980313062668,
    0.0003813793882727623,
    -0.01067429594695568,
    0.018551954999566078,
    0.005202162079513073,
    -0.006617786828428507,
    0.021570108830928802,
    -0.016198348253965378,
    0.030846085399389267,
    0.013159427791833878,
    -0.01313173770904541,
    0.008576817810535431,
    -0.009047538973391056,
    -0.040897369384765625,
    -0.10411246120929718,
    -0.02155626378953457,
    0.0013230381300672889,
    0.006057074759155512,
    -0.023023806512355804,
    -0.023342235013842583,
    -0.0025595466140657663,
    0.021030163392424583,
    -0.021279368549585342,
    -0.012771775014698505,
    -0.002687610685825348,
    0.004336865618824959,
    -0.010348944924771786,
    0.009158297441899776,
    -0.000176844943780452,
    -0.009539027698338032,
    -0.014550823718309402,
    0.011518825776875019,
    0.019479552283883095,
    0.030126160010695457,
    -0.006406654603779316,
    0.015353819355368614,
    0.009954369626939297,
    0.013761674053966999,
    -0.015533801168203354,
    0.013858586549758911,
    -0.03801766037940979,
    0.01255025900900364,
    0.014356997795403004,
    0.01946570724248886,
    -0.007898425683379173,
    -0.03034767508506775,
    -0.00888140220195055,
    0.00017241030582226813,
    -0.0154091976583004,
    0.015616869553923607,
    -0.04441393166780472,
    -0.04131270945072174,
    0.04804125428199768,
    -0.033448897302150726,
    0.03128911927342415,
    0.011165784671902657,
    0.015256905928254128,
    0.00048672923003323376,
    -0.019161123782396317,
    0.018219681456685066,
    0.0006744985585100949,
    0.030846085399389267,
    0.027232607826590538,
    -0.031704459339380264,
    -0.028381722047924995,
    -0.017209013924002647,
    -0.0158799197524786,
    -0.01935494877398014,
    0.015436887741088867,
    -0.03909755125641823,
    -0.008348379284143448,
    -0.008798333816230297,
    -0.00390767864882946,
    -0.017998164519667625,
    -0.01639217510819435,
    0.0008181377197615802,
    -0.007289256900548935,
    0.00439570564776659,
    -0.01363707147538662,
    -0.007711521349847317,
    -0.013104048557579517,
    0.0009241365478374064,
    0.009864378720521927,
    -0.017416685819625854,
    -0.024325212463736534,
    -0.008113019168376923,
    -0.01870424672961235,
    -0.016378330066800117,
    -0.03386424109339714,
    -0.003449071431532502,
    -0.015270750969648361,
    0.040177442133426666,
    0.014910787343978882,
    -0.017845872789621353,
    -0.012847920879721642,
    0.010411245748400688,
    -0.033476587384939194,
    -0.0009111571125686169,
    0.021071698516607285,
    0.007316946052014828,
    0.032285939902067184,
    0.021514728665351868,
    0.01751359924674034,
    -0.05308074131608009,
    -0.007379247806966305,
    0.002839902648702264,
    0.035221025347709656,
    -0.0011266159126535058,
    -0.01569993793964386,
    -0.005018719006329775,
    0.013110971078276634,
    -0.010328177362680435,
    -0.007043512538075447,
    0.017485909163951874,
    -0.025598928332328796,
    -0.013297874480485916,
    -0.08943703770637512,
    0.013034825213253498,
    0.000823329493869096,
    -0.012072615325450897,
    0.010494315065443516,
    -0.0373254269361496,
    0.0016881932970136404,
    -0.01646139845252037,
    0.03812842071056366,
    0.01659984514117241,
    -0.009864378720521927,
    0.001289291656576097,
    0.004018436651676893,
    0.004544536583125591,
    -0.03524871543049812,
    -0.004073815420269966,
    0.03056919015944004,
    -0.0015886841574683785,
    0.04505079239606857,
    0.025280499830842018,
    -0.008327612653374672,
    -0.017236704006791115,
    0.036300912499427795,
    0.01975644752383232,
    -0.026125028729438782,
    -0.006856608670204878,
    0.008694497868418694,
    0.021293213590979576,
    -0.01446775533258915,
    -0.01946570724248886,
    0.0056763445027172565,
    0.003897294867783785,
    -0.014356997795403004,
    0.001208819099701941,
    0.009275977499783039,
    0.0054479059763252735,
    0.026138873770833015,
    0.019188812002539635,
    0.022760756313800812,
    0.016793671995401382,
    -0.026318855583667755,
    -0.02014409936964512,
    0.007614608388394117,
    -0.005458289757370949,
    -0.017209013924002647,
    0.01106887124478817,
    -0.00782920140773058,
    0.0018984603229910135,
    0.014121636748313904,
    0.004364554770290852,
    0.03317200392484665,
    0.0049321893602609634,
    -0.013235573656857014,
    -0.025225119665265083,
    -0.009580561891198158,
    -0.004534153267741203,
    0.006399732083082199,
    -0.004838737193495035,
    -0.020600976422429085,
    0.00852143857628107,
    0.0373254269361496,
    0.0005801812512800097,
    -0.020033342763781548,
    0.010065127164125443,
    -0.012252597138285637,
    -0.020199479535222054,
    -0.039485204964876175,
    -0.011532669886946678,
    0.0014580243732780218,
    -0.005312919616699219,
    -0.03419651463627815,
    -0.0031167976558208466,
    0.027578726410865784,
    0.006198983173817396,
    0.0261942520737648,
    0.0004875945160165429,
    -0.002211697632446885,
    -0.02720491774380207,
    -0.004042664542794228,
    0.038765277713537216,
    0.02083633653819561,
    -0.0018378895474597812,
    -0.01101349201053381,
    0.01464773714542389,
    0.03602401912212372,
    0.00038548954762518406,
    -0.029572369530797005,
    0.0010400862665846944,
    0.0020022958051413298,
    0.01646139845252037,
    -2.960936035378836e-05,
    0.01367168314754963,
    -0.009781310334801674,
    0.007676909677684307,
    -0.024214453995227814,
    -0.01664138026535511,
    -0.006472417153418064,
    -0.022954583168029785,
    0.019188812002539635,
    0.009815922006964684,
    0.008403758518397808,
    -0.005309458822011948,
    0.023882180452346802,
    -0.011650350876152515,
    -0.015049234963953495,
    -0.010611995123326778,
    -0.02047637291252613,
    -0.018676556646823883,
    0.00502910278737545,
    0.014100870117545128,
    0.019036520272493362,
    -0.05308074131608009,
    -0.018385818228125572,
    0.021168610081076622,
    -0.024186763912439346,
    0.002178816357627511,
    0.019230347126722336,
    -0.007545384578406811,
    -0.009158297441899776,
    -0.010660451836884022,
    -0.01363707147538662,
    -0.0071300421841442585,
    0.0219992958009243,
    -0.0032171718776226044,
    0.0005126881296746433,
    0.0606953501701355,
    0.008099174126982689,
    0.00396997993811965,
    -0.007085046730935574,
    0.024795932695269585,
    -0.011678040027618408,
    -0.008286078460514545,
    -0.0034836833365261555,
    -0.030596880242228508,
    -0.009123684838414192,
    0.008909091353416443,
    -0.011061948724091053,
    -0.00875679962337017,
    -0.011491135694086552,
    0.07957957684993744,
    0.003738080384209752,
    -0.02846479043364525,
    0.009802077896893024,
    -0.01834428310394287,
    0.02408985234797001,
    0.013228651136159897,
    -0.0028312497306615114,
    0.0047937422059476376,
    -0.01834428310394287,
    0.00985745619982481,
    -0.005319842137396336,
    -0.026346543803811073,
    -0.008888324722647667,
    -0.00193999451585114,
    0.014827718958258629,
    -0.020420994609594345,
    0.021902382373809814,
    -0.00454799784347415,
    0.014010879211127758,
    0.004582609515637159,
    0.01327710784971714,
    -0.0011863213730975986,
    -0.01445391122251749,
    -0.009123684838414192,
    0.004447623621672392,
    0.009075228124856949,
    0.03350427746772766,
    0.01240488886833191,
    -0.03812842071056366,
    0.010701986029744148,
    -0.005967083852738142,
    -0.03433496132493019,
    0.00031626582494936883,
    -0.020490217953920364,
    0.004021897446364164,
    -0.014716961421072483,
    -0.018178146332502365,
    0.0003552041598595679,
    0.01067429594695568,
    -0.029710816219449043,
    0.005679805297404528,
    0.015713782981038094,
    -0.03862683102488518,
    0.00791919231414795,
    0.006264745723456144,
    0.018621178343892097,
    -0.01677982695400715,
    -0.010695063509047031
  ]
}
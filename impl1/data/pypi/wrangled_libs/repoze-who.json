{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: developers",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "programming language :: python :: implementation :: cpython",
    "programming language :: python :: implementation :: pypy",
    "topic :: internet :: www/http",
    "topic :: internet :: www/http :: dynamic content",
    "topic :: internet :: www/http :: wsgi",
    "topic :: internet :: www/http :: wsgi :: application"
  ],
  "description": "repoze.who\n==========\n\n.. image:: https://travis-ci.org/repoze/repoze.who.png?branch=master\n        :target: https://travis-ci.org/repoze/repoze.who\n\n.. image:: https://readthedocs.org/projects/repozewho/badge/?version=latest\n        :target: http://repozewho.readthedocs.org/en/latest/\n        :alt: documentation status\n\n.. image:: https://img.shields.io/pypi/v/repoze.who.svg\n        :target: https://pypi.python.org/pypi/repoze.who\n\n.. image:: https://img.shields.io/pypi/pyversions/repoze.who.svg\n        :target: https://pypi.python.org/pypi/repoze.who\n\n``repoze.who`` is an identification and authentication framework\nfor arbitrary wsgi applications.  ``repoze.who`` can be configured\neither as wsgi middleware or as an api for use by an application.\n\n``repoze.who`` is inspired by zope 2's pluggable authentication\nservice (pas) (but ``repoze.who`` is not dependent on zope in any\nway; it is useful for any wsgi application).  it provides no facility\nfor authorization (ensuring whether a user can or cannot perform the\noperation implied by the request).  this is considered to be the\ndomain of the wsgi application.\n\ninstallation\n------------\n\ninstall using setuptools, e.g. (within a virtualenv)::\n\n $ easy_install repoze.who\n\nor using pip::\n\n $ pip install repoze.who\n\n\nusage\n-----\n\nfor details on using the various components, please see the\ndocumentation in ``docs/index.rst``.  a rendered version of that documentation\nis also available online:\n\n - http://repozewho.readthedocs.org/en/latest/\n\n\nreporting bugs \n--------------\n\nplease report bugs in this package to\n\n  https://github.com/repoze/repoze.who/issues\n\n\nobtaining source code\n---------------------\n\ndownload development or tagged versions of the software by visiting:\n\n  https://github.com/repoze/repoze.who\n\n\n\nrepoze.who changelog\n====================\n\n3.0.0 (2023-01-16)\n------------------\n\n- no changes from 3.0.0b1.\n\n3.0.0b1 (2023-01-16)\n--------------------\n\n- add support for python 3.9, 3.10 and 3.11.\n\n- drop support for python 2.7, 3.4, 3.5, and 3.6.\n\n- add github actions workflow to exercise unit tests / coverage.\n\n2.4.1 (2022-02-01)\n------------------\n\n- disallow separators in authticket component values.  closes #37.\n\n- handle bytes / string correctly in 'repoze.who.plugins.htpasswd.sha1_check'.\n  closes #28.\n\n- switch to use ``pytest`` as the testrunner.  closes #34.\n\n2.4 (2020-06-03)\n----------------\n\n- add support for python 3.6, 3.7, and 3.8.\n\n- drop support for python 3.3.\n\n- fix travis configuration.\n\n- add ``samesite`` option to authtktcookieplugin constructor.\n  if this is passed, it should be a string, and it will be used\n  to compose the set-cookie header's \"samesite\" value, e.g.\n  if you pass ``samesite=\"strict\"`` into the constructor,\n  the cookie value for the auth tkt cooke will contain\n  ``samesite=strict``.\n\n2.3 (2016-05-31)\n----------------\n\n- add support for python 3.4, python 3.5, and pypy3.\n\n- drop support for python 2.6 and 3.2.\n\n- ``middleware``:  avoid passing extracted ``identity`` to ``remember``\n  during egress (the app may have called ``api.forget()``).  see #21.\n\n- ``_auth_tkt`` / ``plugins.auth_tkt``:  add support for any hash algorithm\n  supported by the ``hashlib`` module in python's standard library.\n  fixes #22 via #23.\n\n- ``plugins.auth_tkt``:  fix storage of \"userdata\" to save dict.  fixes\n  #14 via #18.\n\n- middleware:  avoid unboundlocalerror when wrapped generater yields no\n  items.  see:  http://bugs.repoze.org/issue184\n\n- make cookie expiration date rfc-2616 compliant (independent of locale,\n  including 'gmt' zone). see #11.\n\n2.2 (2013-05-17)\n----------------\n\n- parse ini-file configuration using ``safeconfigparser``:  allows\n  escaping the ``'%'`` so that e.g. a query template using for a db-api\n  connection using ``pyformat`` preserves the template.\n\n- added support for python 3.3, pypy.\n\n\n2.1 (2013-03-20)\n----------------\n\n- ``_compat`` module:  tolerate missing ``content_type`` key in the wsgi\n  environment.  thanks to dag hoidal for the patch.\n\n- ``htpasswd`` plugin:  add a ``sha1_check`` checker function (the ``crypt``\n  module is not available on windows).  thanks to chandrashekar jayaraman\n  for the patch.\n\n- documentation typo fixes from carlos de la guardia and atsushi odagiri.\n\n\n2.1b1 (2012-11-05)\n------------------\n\n- ported to py3k using the \"compatible subset\" mode.\n  - dropped support for python < 2.6.x.\n  - dropped dependency on paste (forking some code from it).\n  - added dependency on webob instead.\n  thanks to atsushi odagiri (aodag) for the initial effort.\n\n\n2.0 (2011-09-28)\n----------------\n\n- ``auth_tkt`` plugin:  strip any port number from the 'domain' of generated\n  cookies.  http://bugs.repoze.org/issue66\n\n- further harden middleware, calling ``close()`` on the iterable even if\n  raising an exception for a missing challenger.\n  http://bugs.repoze.org/issue174\n\n\n2.0b1 (2011-05-24)\n------------------\n\n- enabled standard use of logging module's configuration mechanism. \n  see http://docs.python.org/dev/howto/logging.html#configuring-logging-for-a-library\n  thanks to jgoldsmith for the patch: http://bugs.repoze.org/issue178\n\n\n- ``repoze.who.plugins.htpasswd``:  defend against timing-based attacks.\n\n\n2.0a4 (2011-02-02)\n------------------\n\n- ensure that the middleware calls ``close()`` (if it exists) on the\n  iterable returned from thw wrapped application, as required by pep 333.\n  http://bugs.repoze.org/issue174\n\n- make ``make_api_factory_with_config`` tolerant of invalid filenames /\n  content for the config file:  in such cases, the api factory will have\n  *no* configured plugins or policies:  it will only be useful for retrieving\n  the api from an environment populated by middleware.\n\n- fix bug in ``repoze.who.api`` where the ``remember()`` or ``forget()``\n  methods could return a none if the identifier plugin returned a none.\n\n- fix ``auth_tkt`` plugin to not hand over tokens as strings to paste. see\n  http://lists.repoze.org/pipermail/repoze-dev/2010-november/003680.html\n\n- fix ``auth_tkt`` plugin to add \"secure\" and \"httponly\" to cookies when\n  configured with ``secure=true``:  these attributes prevent the browser from\n  sending cookies over insecure channels, which could be vulnerable to some\n  xss attacks.\n\n- avoid propagating unicode 'max_age' value into cookie headers.  see\n  https://bugs.launchpad.net/bugs/674123 .\n\n- added a single-file example bfg application demonstrating the use of\n  the new 'login' and 'logout' methods of the api object.\n\n- add ``login`` and ``logout`` methods to the ``repoze.who.api.api`` object,\n  as a convenience for application-driven login / logout code, which would\n  otherwise need to use private methods of the api, and reach down into\n  its plugins.\n\n\n2.0a3 (2010-09-30)\n------------------\n\n- deprecated the following plugins, moving their modules, tests, and docs\n  to a new project, ``repoze.who.deprecatedplugins``:\n\n  - ``repoze.who.plugins.cookie.insecurecookieplugin``\n\n  - ``repoze.who.plugins.form.formplugin``\n\n  - ``repoze.who.plugins.form.redirectingformplugin``\n\n- made the ``repoze.who.plugins.cookie.insecurecookieplugin`` take a\n  ``charset`` argument, and use to to encode / decode login and password.\n  see http://bugs.repoze.org/issue155\n\n- updated ``repoze.who.restrict`` to return headers as a list, to keep\n  ``wsgiref`` from complaining.\n\n- helped default request classifier cope with xml submissions with an\n  explicit charset defined: http://bugs.repoze.org/issue145 (lorenzo\n  m. catucci)\n\n- corrected the handling of type and subtype when matching an xml post\n  to ``xmlpost`` in the default classifier, which, according to rfc\n  2045, must be matched case-insensitively:\n  http://bugs.repoze.org/issue145 (lorenzo m. catucci)\n\n- added ``repoze.who.config:make_api_factory_with_config``, a convenience\n  method for applications which want to set up their own api factory from\n  a configuration file.\n\n- fixed example call to ``repoze.who.config:make_middleware_with_config``\n  (added missing ``global_config`` argument).  see\n  http://bugs.repoze.org/issue114\n\n\n2.0a2 (2010-03-25)\n------------------\n\nbugs fixed\n~~~~~~~~~~\n\n- fixed failure to pass substution values in log message string formatting\n  for ``repoze.who.api:api.challenge``.  fix included adding tests for all\n  logging done by the api object.  see http://bugs.repoze.org/issue122\n\nbackward incompatibilities\n~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n- adjusted logging level for some lower-level details from ``info``\n  to ``debug``.\n\n\n\n2.0a1 (2010-02-24)\n------------------\n\nfeatures\n~~~~~~~~\n\n- restored the ability to create the middleware using the old ``classifier``\n  argument.  that argument is now a deprecated-but-will-work-forever alias for\n  ``request_classifier``.\n\n- the ``auth_tkt`` plugin now implements the ``iauthenticator`` interface,\n  and should normally be used both as an ``iidentifier`` and an\n  ``iauthenticator``.\n\n- factored out the api of the middleware object to make it useful from\n  within the application.  applications using ``repoze.who``` now fall into\n  one of three catgeories:\n\n  - \"middleware-only\" applications are configured with middleware, and\n    use either ``remote_user`` or ``repoze.who.identity`` from the environment\n    to determing the authenticated user.\n\n  - \"bare metal\" applications use no ``repoze.who`` middleware at all:\n    instead, they configure and an ``apifactory`` object at startup, and\n    use it to create an ``api`` object when needed on a per-request basis.\n\n  - \"hybrid\" applications are configured with ``repoze.who`` middleware,\n    but use a new library function to fetch the ``api`` object from the\n    environ, e.g. to permit calling ``remember`` after a signup or successful\n    login.\n\nbugs fixed\n~~~~~~~~~~\n\n- fix http://bugs.repoze.org/issue102: when no challengers existed,\n  logging would cause an exception.\n\n- remove ``ez_setup.py`` and dependency on it in setup.py (support\n  distribute).\n\nbackward incompatibilities\n~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n- the middleware used to allow identifier plugins to \"pre-authenticate\"\n  an identity.  this feature is no longer supported: the ``auth_tkt`` \n  plugin, which used to use the feature, is now configured to work as\n  an authenticator plugin (as well as an identifier).\n\n- the ``repoze.who.middleware:pluggableauthenticationmiddleware`` class\n  no longer has the following (non-api) methods (now made api methods\n  of the ``repoze.who.api:api`` class):\n\n  - ``add_metadata``\n  - ``authenticate``\n  - ``challenge``\n  - ``identify``\n\n- the following (non-api) functions moved from ``repoze.who.middleware`` to\n  ``repoze.who.api``:\n\n  - ``make_registries``\n  - ``match_classification``\n  - ``verify``\n\n\n\n1.0.18 (2009-11-05)\n-------------------\n\n- issue #104:  authtkt plugin was passing an invalid cookie value in\n  headers from ``forget``, and was not setting the ``max-age`` and \n  ``expires`` attributes of those cookies.\n\n\n\n1.0.17 (2009-11-05)\n-------------------\n\n- fixed the ``repoze.who.plugins.form.make_plugin`` factory's ``formcallable``\n  argument handling, to allow passing in a dotted name (e.g., from a config\n  file).\n\n\n\n1.0.16 (2009-11-04)\n-------------------\n\n- exposed ``formcallable`` argument for ``repoze.who.plugins.form.formplugin``\n  to the callers of the ``repoze.who.plugins.form.make_plugin`` factory.\n  thanks to roland hedburg for the report.\n\n- fixed an issue that caused the following symptom when using the\n  ini configuration parser::\n\n   typeerror: _makeplugin() got multiple values for keyword argument 'name'\n\n  see http://bugs.repoze.org/issue92 for more details.  thanks to vaab\n  for the bug report and initial fix.\n\n\n1.0.15 (2009-06-25)\n-------------------\n\n- if the form post value ``max_age`` exists while in the ``identify``\n  method is handling the ``login_handler_path``, pass the max_age\n  value in the returned identity dictionary as ``max_age``.  see the\n  below bullet point for why.\n\n- if the ``identity`` dict passed to the ``auth_tkt`` ``remember``\n  method contains a ``max_age`` key with a string (or integer) value,\n  treat it as a cue to set the ``max-age`` and ``expires`` headers in\n  the returned cookies.  the cookie ``max-age`` is set to the value\n  and the ``expires`` is computed from the current time.\n\n\n1.0.14 (2009-06-17)\n-------------------\n\n- fix test breakage on windows.  see http://bugs.repoze.org/issue79 .\n\n- documented issue with using ``include_ip`` setting in the ``auth_tkt``\n  plugin.  see http://bugs.repoze.org/issue81 .\n\n- added 'passthrough_challenge_decider', which avoids re-challenging 401\n  responses which have been \"pre-challenged\" by the application.\n\n- one-hundred percent unit test coverage.\n\n- add ``timeout`` and ``reissue_time`` arguments to the auth_tkt\n  identifier plugin, courtesty of paul johnston.\n\n- add a ``userid_checker`` argument to the auth_tkt identifier plugin,\n  courtesty of gustavo narea.\n\n  if ``userid_checker`` is provided, it must be a dotted python name\n  that resolves to a function which accepts a userid and returns a\n  boolean true or false, indicating whether that user exists in a\n  database.  this is a workaround.  due to a design bug in repoze.who,\n  the only way who can check for user existence is to use one or more\n  iauthenticator plugin ``authenticate`` methods.  if an\n  iauthenticator's ``authenticate`` method returns true, it means that\n  the user exists.  however most iauthenticator plugins expect *both*\n  a username and a password, and will return false unconditionally if\n  both aren't supplied.  this means that an authenticator can't be\n  used to check if the user \"only\" exists.  the identity provided by\n  an auth_tkt does not contain a password to check against.  the\n  actual design bug in repoze.who is this: when a user presents\n  credentials from an auth_tkt, he is considered \"preauthenticated\".\n  iauthenticator.authenticate is just never called for a\n  \"preauthenticated\" identity, which works fine, but it means that the\n  user will be considered authenticated even if you deleted the user's\n  record from whatever database you happen to be using.  however, if\n  you use a userid_checker, you can ensure that a user exists for the\n  auth_tkt supplied userid.  if the userid_checker returns false, the\n  auth_tkt credentials are considered \"no good\".\n\n\n1.0.13 (2009-04-24)\n-------------------\n\n- added a paragraph to ``iauthenticator`` docstring, documenting that plugins\n  are allowed to add keys to the ``identity`` dictionary (e.g., to save a\n  second database query in an ``imetadataprovider`` plugin).\n\n- patch supplied for issue #71 (http://bugs.repoze.org/issue71)\n  whereby a downstream app can return a generator, relying on an\n  upstream component to call start_response.  we do this because the\n  challenge decider needs the status and headers to decide what to do.\n\n\n1.0.12 (2009-04-19)\n-------------------\n- auth_tkt plugin tried to append remote_user_tokens data to\n  existing tokens data returned by auth_tkt.parse_tkt; this was\n  incorrect; just overwrite.\n\n- extended auth_tkt plugin factory to allow passing secret in a separate\n  file from the main config file.  see http://bugs.repoze.org/issue40 .\n\n\n1.0.11 (2009-04-10)\n-------------------\n\n- fix auth_tkt plugin; cookie values are now quoted, making it possible\n  to put spaces and other whitespace, etc in usernames. (thanks to michael\n  pedersen).\n\n- fix corner case issue of an exception raised when attempting to log\n  when there are no identifiers or authenticators.\n\n\n1.0.10 (2009-01-23)\n-------------------\n\n- the redirectingformplugin now passes along setcookie headers set\n  into the response by the application within the notfound response\n  (fixes tg2 \"flash\" issue).\n\n\n1.0.9 (2008-12-18)\n------------------\n\n- the redirectingformplugin now attempts to find a header named\n  ``x-authentication-failure-reason`` among the response headers set\n  by the application when a challenge is issued.  if a value for this\n  header exists (and is non-blank), the value is attached to the\n  redirect url's query string as the ``reason`` parameter (or a\n  user-settable key).  this makes it possible for downstream\n  applications to issue a response that initiates a challenge with\n  this header and subsequently display the reason in the login form\n  rendered as a result of the challenge.\n\n\n1.0.8 (2008-12-13)\n------------------\n\n- the ``pluggableauthenticationmiddleware`` constructor accepts a\n  ``log_stream`` argument, which is typically a file.  after this\n  release, it can also be a pep 333 ``logger`` instance; if it is a\n  pep 333 ``logger`` instance, this logger will be used as the\n  repoze.who logger (instead of one being constructed by the\n  middleware, as was previously always the case).  when the\n  ``log_stream`` argument is a pep 333 logger object, the\n  ``log_level`` argument is ignored.\n\n\n1.0.7 (2008-08-28)\n------------------\n\n- ``repoze.who`` and ``repoze.who.plugins`` were not added to the\n  ``namespace_packages`` list in setup.py, potentially making 1.0.6 a\n  brownbag release, given that making these packages namespace\n  packages was the only reason for its release.\n\n\n1.0.6 (2008-08-28)\n------------------\n\n- make repoze.who and repoze.who.plugins into namespace packages\n  mainly so we can allow plugin authors to distribute packages in the\n  repoze.who.plugins namespace.\n\n\n1.0.5 (2008-08-23)\n------------------\n\n- fix auth_tkt plugin to set the same cookies in its ``remember``\n  method that it does in its ``forget`` method.  previously, logging\n  out and relogging back in to a site that used auth_tkt identifier\n  plugin was slightly dicey and would only work sometimes.\n\n- the formplugin plugin has grown a redirect-on-unauthorized feature.\n  any response from a downstream application that causes a challenge\n  and includes a location header will cause a redirect to the value of\n  the location header.\n\n\n1.0.4 (2008-08-22)\n------------------\n\n- added a key to the '[general]' config section: ``remote_user_key``.\n  if you use this key in the config file, it tells who to 1) not\n  perform any authentication if it exists in the environment during\n  ingress and 2) to set the key in the environment for the downstream\n  app to use as the remote_user variable.  the default is\n  ``remote_user``.\n\n- using unicode user ids in combination with the auth_tkt plugin would\n  cause problems under mod_wsgi.\n\n- allowed 'cookie_path' argument to insecurecookieplugin (and config\n  constructor).  thanks to gustavo narea.\n\n\n1.0.3 (2008-08-16)\n------------------\n\n- a bug in the middleware's ``authenticate`` method made it impossible\n  to authenticate a user with a userid that was null (e.g. 0, false),\n  which are valid identifiers.  the only invalid userid is now none.\n\n- applied patch from olaf conradi which logs an error when an invalid\n  filename is passed to the htpasswdplugin.\n\n\n1.0.2 (2008-06-16)\n------------------\n\n- fix bug found by chris perkins: the auth_tkt plugin's \"remember\"\n  method didn't handle userids which are python \"long\" instances\n  properly.  symptom: typeerror: cannot concatenate 'str' and 'long'\n  objects in \"paste.auth.auth_tkt\".\n\n- added predicate-based \"restriction\" middleware support\n  (repoze.who.restrict), allowing configuratio-driven authorization as\n  a wsgi filter.  one example predicate, 'authenticated_predicate', is\n  supplied, which requires that the user be authenticated either via\n  'remote_user' or via 'repoze.who.identity'.  to use the filter to\n  restrict access::\n\n     [filter:authenticated_only]\n     use = egg:repoze.who#authenticated\n\n   or::\n\n     [filter:some_predicate]\n     use = egg:repoze.who#predicate\n     predicate = my.module:some_predicate\n     some_option = a value\n\n\n1.0.1 (2008-05-24)\n------------------\n\n- remove dependency-link to dist.repoze.org to prevent easy_install\n  from inserting that path into its search paths (the dependencies are\n  available from pypi).\n\n\n1.0 (2008-05-04)\n-----------------\n\n- the plugin at plugins.form.formplugin didn't redirect properly after\n  collecting identification information.  symptom: a downstream app\n  would receive a post request with a blank body, which would\n  sometimes result in a bad request error.\n\n- fixed interface declarations of\n  'classifiers.default_request_classifier' and\n  'classifiers.default_password_compare'.\n\n- added actual config-driven middleware factory,\n  'config.make_middleware_with_config'\n\n- removed fossilized 'who_conf' argument from plugin factory functions.\n\n- added configparser-based whoconfig, implementing the spec outlined at\n  http://www.plope.com/static/misc/sphinxtest/intro.html#middleware-configuration-via-config-file,\n  with the following changes:\n\n  - \"bare\" plugins (requiring no configuration options) may be specified\n     as either egg entry points (e.g., 'egg:distname#entry_point_name') or\n     as dotted-path-with-colon (e.g., 'dotted.name:object_id').\n\n  - therefore, the separator between a plugin and its classifier is now\n    a semicolon, rather than a colon. e.g.::\n\n     [plugins:id_plugin]\n     use = egg:another.package#identify_with_frobnatz\n     frobnatz = baz\n\n     [identifiers]\n     plugins =\n       egg:my.egg#identify;browser\n       dotted.name:identifier\n       id_plugin\n\n\n0.9.1 (2008-04-27)\n------------------\n\n- fix auth_tkt plugin to be able to encode and decode integer user\n  ids.\n\n\n0.9 (2008-04-01)\n----------------\n\n- fix bug introduced in formplugin in 0.8 release (rememberer headers\n  not set).\n\n- add path_info to started and ended log info.\n\n- add a sqlmetadataproviderplugin (in plugins/sql).\n\n- change constructor of sqlauthenticatorplugin: it now accepts only\n  \"query\", \"conn_factory\", and \"compare_fn\".  the old constructor\n  accepted a dsn, but some database systems don't use dbapi dsns.  the\n  new constructor accepts no dsn; the conn_factory is assumed to do\n  all the work to make a connection, including knowing the dsn if one\n  is required.  the \"conn_factory\" should return something that, when\n  called with no arguments, returns a database connection.\n\n- the \"make_plugin\" helper in plugins/sql has been renamed\n  \"make_authenticator_plugin\".  when called, this helper will return a\n  sqlauthenticatorplugin.  a bit of helper logic in the\n  \"make_authenticator_plugin\" allows a connection factory to be\n  computed.  the top-level callable referred to by conn_factory in\n  this helper should return a function that, when called with no\n  arguments, returns a datbase connection.  the top-level callable\n  itself is called with \"who_conf\" (global who configuration) and any\n  number of non-top-level keyword arguments as they are passed into\n  the helper, to allow for a dsn or url or whatever to be passed in.\n\n- a \"make_metatata_plugin\" helper has been added to plugins/sql. when\n  called, this will make a sqlmetadataproviderplugin.  see the\n  implementation for details.  it is similar to the\n  \"make_authenticator_plugin\" helper.\n\n\n0.8 (2008-03-27)\n----------------\n\n- add a redirectingformidentifier plugin.  this plugin is willing to\n  redirect to an external (or downstream application) login form to\n  perform identification.  the external login form must post to the\n  \"login_handler_path\" of the plugin (optimally with a \"came_from\"\n  value to tell the plugin where to redirect the response to if the\n  authentication works properly).  the \"logout_handler_path\" of this\n  plugin can be visited to perform a logout.  the \"came_from\" value\n  also works there.\n\n- identifier plugins are now permitted to set a key in the environment\n  named 'repoze.who.application' on ingress (in 'identify').  if an\n  identifier plugin does so, this application is used instead of the\n  \"normal\" downstream application.  this feature was added to more\n  simply support the redirecting form identifier plugin.\n\n\n0.7 (2008-03-26)\n----------------\n\n- change the imetadataprovider interface: this interface used to have\n  a \"metadata\" method which returned a dictionary.  this method is not\n  part of that api anymore.  it's been replaced with an \"add_metadata\"\n  method which has the signature::\n\n    def add_metadata(environ, identity):\n        \"\"\"\n        add metadata to the identity (which is a dictionary)\n        \"\"\"\n\n   the return value is ignored.  imetadataprovider plugins are now\n   assumed to be responsible for 'scribbling' directly on the identity\n   that is passed in (it's a dictionary).  the user id can always be\n   retrieved from the identity via identity['repoze.who.userid'] for\n   metadata plugins that rely on that value.\n\n\n0.6 (2008-03-20)\n----------------\n\n- renaming: repoze.pam is now repoze.who\n\n- bump ez_setup.py version.\n\n- add imetadataprovider plugin type.  chris says 'whit rules'.\n\n\n0.5 (2008-03-09)\n----------------\n\n- allow \"remote user key\" (default: remote_user) to be overridden\n  (pass in remote_user_key to middleware constructor).\n\n- allow form plugin to override the default form.\n\n- api change: iidentifiers are no longer required to put both 'login'\n  and 'password' in a returned identity dictionary.  instead, an\n  iidentifier can place arbitrary key/value pairs in the identity\n  dictionary (or return an empty dictionary).\n\n- api return value change: the \"failure\" identity which iidentifiers\n  return is now none rather than an empty dictionary.\n\n- the iauthenticator interface now specifies that iauthenticators must\n  not raise an exception when evaluating an identity that does not\n  have \"expected\" key/value pairs (e.g. when an iauthenticator that\n  expects login and password inspects an identity returned by an\n  ip-based auth system which only puts the ip address in the\n  identity); instead they fail gracefully by returning none.\n\n- add (cookie) \"auth_tkt\" identification plugin.\n\n- stamp identity dictionaries with a userid by placing a key named\n  'repoze.pam.userid' into the identity for each authenticated\n  identity.\n\n- if an iidentifier plugin inserts a 'repoze.pam.userid' key into the\n  identity dictionary, consider this identity \"preauthenticated\".  no\n  authenticator plugins will be asked to authenticate this identity.\n  this is designed for things like the recently added auth_tkt plugin,\n  which embeds the user id into the ticket.  this effectively alllows\n  an iidentifier plugin to become an iauthenticator plugin when\n  breaking apart the responsibility into two separate plugins is\n  \"make-work\".  preauthenticated identities will be selected first\n  when deciding which identity to use for any given request.\n\n- insert a 'repoze.pam.identity' key into the wsgi environment on\n  ingress if an identity is found.  its value will be the identity\n  dictionary related to the identity selected by repoze.pam on\n  ingress.  downstream consumers are allowed to mutate this\n  dictionary; this value is passed to \"remember\" and \"forget\", so its\n  main use is to do a \"credentials reset\"; e.g. a user has changed his\n  username or password within the application, but we don't want to\n  force him to log in again after he does so.\n\n\n0.4 (03-07-2008)\n----------------\n\n- allow plugins to specify a classifiers list per interface (instead\n  of a single classifiers list per plugin).\n\n\n0.3 (03-05-2008)\n----------------\n\n- make sqlauthenticatorplugin's default_password_compare use hexdigest\n  sha instead of base64'ed binary sha for simpler conversion.\n\n\n0.2 (03-04-2008)\n----------------\n\n- added sqlauthenticatorplugin (see plugins/sql.py).\n\n\n0.1 (02-27-2008)\n----------------\n\n- initial release (no configuration file support yet).\n\n\n",
  "docs_url": null,
  "keywords": "web application server wsgi zope",
  "license": "bsd-derived (http://www.repoze.org/license.txt)",
  "name": "repoze.who",
  "package_url": "https://pypi.org/project/repoze.who/",
  "project_url": "https://pypi.org/project/repoze.who/",
  "project_urls": {
    "Homepage": "http://www.repoze.org"
  },
  "release_url": "https://pypi.org/project/repoze.who/3.0.0/",
  "requires_dist": [
    "WebOb",
    "setuptools",
    "zope.interface",
    "Sphinx ; extra == 'docs'",
    "WebOb ; extra == 'docs'",
    "repoze.sphinx.autointerface ; extra == 'docs'",
    "zope.interface ; extra == 'docs'"
  ],
  "requires_python": "",
  "summary": "repoze.who is an identification and authentication framework for wsgi.",
  "version": "3.0.0",
  "releases": [],
  "developers": [
    "agendaless_consulting",
    "repoze-dev@lists.repoze.org"
  ],
  "kwds": "wsgi mod_wsgi repoze repozewho wsgiref",
  "license_kwds": "bsd-derived (http://www.repoze.org/license.txt)",
  "libtype": "pypi",
  "id": "pypi_repoze.who",
  "homepage": "http://www.repoze.org",
  "release_count": 32,
  "dependency_ids": [
    "pypi_repoze.sphinx.autointerface",
    "pypi_setuptools",
    "pypi_sphinx",
    "pypi_webob",
    "pypi_zope.interface"
  ]
}
{
  "classifiers": [
    "development status :: 5 - production/stable",
    "environment :: console",
    "intended audience :: developers",
    "intended audience :: science/research",
    "license :: osi approved :: bsd license",
    "natural language :: english",
    "operating system :: os independent",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.12",
    "topic :: software development :: code generators",
    "topic :: software development :: compilers",
    "topic :: software development :: interpreters",
    "topic :: text processing :: general"
  ],
  "description": ".. |dragon| unicode:: 0x7adc .. unicode dragon\n.. |tatsu| replace:: |dragon| **tatsu**\n.. _releases: https://github.com/neogeny/tatsu/releases\n\n|license| |pyversions| |fury| |downloads| |actions| |docs|\n\n    *at least for the people who send me mail about a new language that\n    they're designing, the general advice is: do it to learn about how\n    to write a compiler. don't have any expectations that anyone will\n    use it, unless you hook up with some sort of organization in a\n    position to push it hard. it's a lottery, and some can buy a lot of\n    the tickets. there are plenty of beautiful languages (more beautiful\n    than c) that didn't catch on. but someone does win the lottery, and\n    doing a language at least teaches you something.*\n\n    `dennis ritchie`_ (1941-2011) creator of the c_ programming\n    language and of unix_\n\n\n|tatsu|\n=======\n\n|tatsu| is a tool that takes grammars in a variation of `ebnf`_ as input, and\noutputs `memoizing`_ (`packrat`_) `peg`_ parsers in `python`_.\n\nwhy use a peg_ parser? because `regular languages`_ (those parsable with python's ``re`` package) *\"cannot count\"*. any language with nested structures or with balancing of demarcations requires more than regular expressions to be parsed.\n\n|tatsu| can compile a grammar stored in a string into a\n``tatsu.grammars.grammar`` object that can be used to parse any given\ninput, much like the `re`_ module does with regular expressions, or it can generate a python_ module that implements the parser.\n\n|tatsu| supports `left-recursive`_  rules in peg_ grammars using the\nalgorithm_ by *laurent* and *mens*. the generated ast_ has the expected left associativity.\n\n|tatsu| requires a maintained version of python (3.11+ at the moment).  while no code\nin |tatsu| yet depends on new language or standard library features,\nthe authors don't want to be constrained by python version compatibility considerations\nwhen developing features that will be part of future releases.\n\n.. _algorithm: http://norswap.com/pubs/sle2016.pdf\n\ninstallation\n------------\n\n.. code-block:: bash\n\n    $ pip install tatsu\n\n\nusing the tool\n--------------\n\n|tatsu| can be used as a library, much like `python`_'s ``re``, by embedding grammars as strings and generating grammar models instead of generating python_ code.\n\n-  this compiles the grammar and generates an im-memory *parser* that can subsequently be used for parsing input with.\n\n.. code-block:: python\n\n   parser = tatsu.compile(grammar)\n\n\n- compiles the grammar and parses the given input producing an ast_ as result.\n\n.. code-block:: python\n\n    ast = tatsu.parse(grammar, input)\n\nthe result is equivalent to calling:\n\n\n.. code-block:: python\n\n    parser = compile(grammar)\n    ast = parser.parse(input)\n\ncompiled grammars are cached for efficiency.\n\n-   compiles the grammar to the `python`_ sourcecode that implements the parser.\n\n.. code-block:: python\n\n    parser_source = tatsu.to_python_sourcecode(grammar)\n\n\nthis is an example of how to use |tatsu| as a library:\n\n.. code-block:: python\n\n    grammar = '''\n        @@grammar::calc\n\n\n        start = expression $ ;\n\n\n        expression\n            =\n            | expression '+' term\n            | expression '-' term\n            | term\n            ;\n\n\n        term\n            =\n            | term '*' factor\n            | term '/' factor\n            | factor\n            ;\n\n\n        factor\n            =\n            | '(' expression ')'\n            | number\n            ;\n\n\n        number = /\\d+/ ;\n    '''\n\n\n    if __name__ == '__main__':\n        import json\n        from tatsu import parse\n        from tatsu.util import asjson\n\n        ast = parse(grammar, '3 + 5 * ( 10 - 20 )')\n        print(json.dumps(asjson(ast), indent=2))\n..\n\n|tatsu| will use the first rule defined in the grammar as the *start* rule.\n\nthis is the output:\n\n.. code-block:: console\n\n    [\n      \"3\",\n      \"+\",\n      [\n        \"5\",\n        \"*\",\n        [\n          \"10\",\n          \"-\",\n          \"20\"\n        ]\n      ]\n    ]\n\ndocumentation\n-------------\n\nfor a detailed explanation of what |tatsu| is capable of, please see the\ndocumentation_.\n\n.. _documentation: http://tatsu.readthedocs.io/\n\n\nquestions?\n----------\n\nplease use the `[tatsu]`_ tag on `stackoverflow`_ for general q&a, and limit\ngithub issues to bugs, enhancement proposals, and feature requests.\n\n.. _[tatsu]: https://stackoverflow.com/tags/tatsu/info\n\n\nchanges\n-------\n\nsee the `releases`_ for details.\n\n\nlicense\n-------\n\nyou may use |tatsu| under the terms of the `bsd`_-style license\ndescribed in the enclosed `license.txt`_ file. *if your project\nrequires different licensing* please `email`_.\n\n\n.. _antlr: http://www.antlr.org/\n.. _ast: http://en.wikipedia.org/wiki/abstract_syntax_tree\n.. _abstract syntax tree: http://en.wikipedia.org/wiki/abstract_syntax_tree\n.. _algol w: http://en.wikipedia.org/wiki/algol_w\n.. _algorithms + data structures = programs: http://www.amazon.com/algorithms-structures-prentice-hall-automatic-computation/dp/0130224189/\n.. _bsd: http://en.wikipedia.org/wiki/bsd_licenses#2-clause_license_.28.22simplified_bsd_license.22_or_.22freebsd_license.22.29\n.. _basel shishani: https://bitbucket.org/basel-shishani\n.. _c: http://en.wikipedia.org/wiki/c_language\n.. _changelog: https://github.com/neogeny/tatsu/releases\n.. _csail at mit: http://www.csail.mit.edu/\n.. _cyclomatic complexity: http://en.wikipedia.org/wiki/cyclomatic_complexity\n.. _david r\u00f6thlisberger: https://bitbucket.org/drothlis/\n.. _dennis ritchie: http://en.wikipedia.org/wiki/dennis_ritchie\n.. _ebnf: http://en.wikipedia.org/wiki/ebnf\n.. _english: http://en.wikipedia.org/wiki/english_grammar\n.. _euler: http://en.wikipedia.org/wiki/euler_programming_language\n.. _grako: https://bitbucket.org/neogeny/grako/\n.. _jack: http://en.wikipedia.org/wiki/javacc\n.. _japanese: http://en.wikipedia.org/wiki/japanese_grammar\n.. _kloc: http://en.wikipedia.org/wiki/kloc\n.. _kathryn long: https://bitbucket.org/starkat\n.. _keywords: https://en.wikipedia.org/wiki/reserved_word\n.. _`left-recursive`: https://en.wikipedia.org/wiki/left_recursion\n.. _ll(1): http://en.wikipedia.org/wiki/ll(1)\n.. _marcus brinkmann: http://blog.marcus-brinkmann.de/\n.. _mediawiki: http://www.mediawiki.org/wiki/mediawiki\n.. _modula-2: http://en.wikipedia.org/wiki/modula-2\n.. _modula: http://en.wikipedia.org/wiki/modula\n.. _oberon-2: http://en.wikipedia.org/wiki/oberon-2\n.. _oberon: http://en.wikipedia.org/wiki/oberon_(programming_language)\n.. _peg and packrat parsing mailing list: https://lists.csail.mit.edu/mailman/listinfo/peg\n.. _peg.js: http://pegjs.majda.cz/\n.. _peg: http://en.wikipedia.org/wiki/parsing_expression_grammar\n.. _pl/0: http://en.wikipedia.org/wiki/pl/0\n.. _packrat: http://bford.info/packrat/\n.. _pascal: http://en.wikipedia.org/wiki/pascal_programming_language\n.. _paul sargent: https://bitbucket.org/pauls/\n.. _perl: http://www.perl.org/\n.. _pypy team: http://pypy.org/people.html\n.. _pypy: http://pypy.org/\n.. _python weekly: http://www.pythonweekly.com/\n.. _python: http://python.org\n.. _reserved words: https://en.wikipedia.org/wiki/reserved_word\n.. _robert speer: https://bitbucket.org/r_speer\n.. _ruby: http://www.ruby-lang.org/\n.. _semantic graph: http://en.wikipedia.org/wiki/abstract_semantic_graph\n.. _stackoverflow: http://stackoverflow.com/tags/tatsu/info\n.. _sublime text: https://www.sublimetext.com\n.. _tatsu forum: https://groups.google.com/forum/?fromgroups#!forum/tatsu\n.. _ucab: http://www.ucab.edu.ve/\n.. _usb: http://www.usb.ve/\n.. _unix: http://en.wikipedia.org/wiki/unix\n.. _vim: http://www.vim.org/\n.. _wtk: http://en.wikipedia.org/wiki/well-known_text\n.. _warth et al: http://www.vpri.org/pdf/tr2007002_packrat.pdf\n.. _well-known text: http://en.wikipedia.org/wiki/well-known_text\n.. _wirth: http://en.wikipedia.org/wiki/niklaus_wirth\n.. _`license.txt`: license.txt\n.. _basel-shishani: https://bitbucket.org/basel-shishani\n.. _blog post: http://dietbuddha.blogspot.com/2012/12/52python-encapsulating-exceptions-with.html\n.. _colorama: https://pypi.python.org/pypi/colorama/\n.. _context managers: http://docs.python.org/2/library/contextlib.html\n.. _declensions: http://en.wikipedia.org/wiki/declension\n.. _drothlis: https://bitbucket.org/drothlis\n.. _email: mailto:apalala@gmail.com\n.. _exceptions: http://www.jeffknupp.com/blog/2013/02/06/write-cleaner-python-use-exceptions/\n.. _franz\\_g: https://bitbucket.org/franz_g\n.. _gapag: https://bitbucket.org/gapag\n.. _gegenschall: https://bitbucket.org/gegenschall\n.. _gkimbar: https://bitbucket.org/gkimbar\n.. _introduced: http://dl.acm.org/citation.cfm?id=964001.964011\n.. _jimon: https://bitbucket.org/jimon\n.. _keyword: https://en.wikipedia.org/wiki/reserved_word\n.. _keywords: https://en.wikipedia.org/wiki/reserved_word\n.. _lambdafu: http://blog.marcus-brinkmann.de/\n.. _leewz: https://bitbucket.org/leewz\n.. _linkdd: https://bitbucket.org/linkdd\n.. _make a donation: https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&hosted_button_id=p9pv7zacb669j\n.. _memoizing: http://en.wikipedia.org/wiki/memoization\n.. _nehz: https://bitbucket.org/nehz\n.. _neumond: https://bitbucket.org/neumond\n.. _parsewkt: https://github.com/cleder/parsewkt\n.. _pauls: https://bitbucket.org/pauls\n.. _pgebhard: https://bitbucket.org/pgebhard\n.. _pygraphviz: https://pypi.python.org/pypi/pygraphviz\n.. _r\\_speer: https://bitbucket.org/r_speer\n.. _raw string literal: https://docs.python.org/3/reference/lexical_analysis.html#string-and-bytes-literals\n.. _re: https://docs.python.org/3.7/library/re.html\n.. _regular languages: https://en.wikipedia.org/wiki/regular_language\n.. _regex: https://pypi.python.org/pypi/regex\n.. _siemer: https://bitbucket.org/siemer\n.. _sjbrownbitbucket: https://bitbucket.org/sjbrownbitbucket\n.. _smc.mw: https://github.com/lambdafu/smc.mw\n.. _starkat: https://bitbucket.org/starkat\n.. _tonico\\_strasser: https://bitbucket.org/tonico_strasser\n.. _vinay.sajip: https://bitbucket.org/vinay.sajip\n.. _vmuriart: https://bitbucket.org/vmuriart\n\n.. |fury| image:: https://badge.fury.io/py/tatsu.svg\n   :target: https://badge.fury.io/py/tatsu\n.. |license| image:: https://img.shields.io/badge/license-bsd-blue.svg\n   :target: https://raw.githubusercontent.com/neogeny/tatsu/master/license.txt\n.. |pyversions| image:: https://img.shields.io/pypi/pyversions/tatsu.svg\n   :target: https://pypi.python.org/pypi/tatsu\n.. |travis| image:: https://secure.travis-ci.org/neogeny/tatsu.svg\n   :target: http://travis-ci.org/neogeny/tatsu\n.. |actions| image:: https://github.com/neogeny/tatsu/workflows/tests/badge.svg\n    :target: https://github.com/neogeny/tatsu/actions\n.. |circleci| image:: https://circleci.com/gh/neogeny/tatsu.svg?style=shield\n    :target: https://circleci.com/gh/neogeny/tatsu\n.. |landscape| image:: https://landscape.io/github/apalala/tatsu/master/landscape.png\n   :target: https://landscape.io/github/apalala/tatsu/master\n.. |donate| image:: https://www.paypalobjects.com/en_us/i/btn/btn_donate_sm.gif\n   :target: https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&hosted_button_id=2tw56sv6wnjv6\n.. |quantifiedcode| image:: https://www.quantifiedcode.com/api/v1/project/f60bbd94ae2d4bd5b2e04c241c9d47ff/badge.svg\n   :target: https://www.quantifiedcode.com/app/project/f60bbd94ae2d4bd5b2e04c241c9d47ff\n   :alt: code issues\n.. |docs| image:: https://readthedocs.org/projects/tatsu/badge/?version=stable\n   :target: http://tatsu.readthedocs.io/en/stable/\n.. |downloads| image:: https://img.shields.io/pypi/dm/tatsu.svg\n   :target: http://tatsu.readthedocs.io/en/stable/\n",
  "docs_url": null,
  "keywords": "",
  "license": "tatsu - a peg/packrat parser generator for python  copyright (c) 2017-2023 juancarlo a\u00f1ez all rights reserved.  redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:  1. redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.  2. redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.  3. neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.  4. redistributions of any form whatsoever must retain the following acknowledgment: 'this product includes software developed by \"juancarlo a\u00f1ez\" (https://apalala.bitbucket.io).'  this software is provided by the copyright holders and contributors \"as is\" and any express or implied warranties, including, but not limited to, the implied warranties of merchantability and fitness for a particular purpose are disclaimed. in no event shall the copyright holder or contributors be liable for any direct, indirect, incidental, special, exemplary, or consequential damages (including, but not limited to, procurement of substitute goods or services; loss of use, data, or profits; or business interruption) however caused and on any theory of liability, whether in contract, strict liability, or tort (including negligence or otherwise) arising in any way out of the use of this software, even if advised of the possibility of such damage. ",
  "name": "tatsu",
  "package_url": "https://pypi.org/project/TatSu/",
  "project_url": "https://pypi.org/project/TatSu/",
  "project_urls": {
    "Documentation": "https://tatsu.readthedocs.io/en/stable/",
    "Homepage": "https://github.com/neogeny/TatSu",
    "Questions": "https://stackoverflow.com/questions/tagged/tatsu",
    "Repository": "https://github.com/neogeny/TatSu"
  },
  "release_url": "https://pypi.org/project/TatSu/5.11.2/",
  "requires_dist": [
    "colorama ; extra == 'colorization'",
    "rich ; extra == 'parproc'"
  ],
  "requires_python": ">=3.11",
  "summary": "tatsu takes a grammar in a variation of ebnf as input, and outputs a memoizing peg/packrat parser in python.",
  "version": "5.11.2",
  "releases": [],
  "developers": [
    "apalala@gmail.com"
  ],
  "kwds": "programming_language c_language euler_programming_language programming languages",
  "license_kwds": "copyright redistributions redistribution software tatsu",
  "libtype": "pypi",
  "id": "pypi_tatsu",
  "homepage": "",
  "release_count": 34,
  "dependency_ids": [
    "pypi_colorama",
    "pypi_rich"
  ]
}
{
  "classifiers": [
    "development status :: 3 - alpha",
    "intended audience :: developers",
    "programming language :: python",
    "programming language :: python :: 3 :: only",
    "programming language :: python :: 3.6",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "topic :: software development :: libraries"
  ],
  "description": "================================================================================\npyexcel - let you focus on data, instead of file formats\n================================================================================\n\n.. image:: https://raw.githubusercontent.com/pyexcel/pyexcel.github.io/master/images/patreon.png\n   :target: https://www.patreon.com/chfw\n\n.. image:: https://raw.githubusercontent.com/pyexcel/pyexcel-mobans/master/images/awesome-badge.svg\n   :target: https://awesome-python.com/#specific-formats-processing\n\n.. image:: https://github.com/pyexcel/pyexcel/workflows/run_tests/badge.svg\n   :target: http://github.com/pyexcel/pyexcel/actions\n\n.. image:: https://codecov.io/gh/pyexcel/pyexcel/branch/master/graph/badge.svg\n   :target: https://codecov.io/gh/pyexcel/pyexcel\n\n.. image:: https://badge.fury.io/py/pyexcel.svg\n   :target: https://pypi.org/project/pyexcel\n\n.. image:: https://anaconda.org/conda-forge/pyexcel/badges/version.svg\n   :target: https://anaconda.org/conda-forge/pyexcel\n\n.. image:: https://pepy.tech/badge/pyexcel/month\n   :target: https://pepy.tech/project/pyexcel\n\n.. image:: https://anaconda.org/conda-forge/pyexcel/badges/downloads.svg\n   :target: https://anaconda.org/conda-forge/pyexcel\n\n.. image:: https://img.shields.io/gitter/room/gitterhq/gitter.svg\n   :target: https://gitter.im/pyexcel/lobby\n\n.. image:: https://img.shields.io/static/v1?label=continuous%20templating&message=%e6%a8%a1%e7%89%88%e6%9b%b4%e6%96%b0&color=blue&style=flat-square\n    :target: https://moban.readthedocs.io/en/latest/#at-scale-continous-templating-for-open-source-projects\n\n.. image:: https://img.shields.io/static/v1?label=coding%20style&message=black&color=black&style=flat-square\n    :target: https://github.com/psf/black\n.. image:: https://readthedocs.org/projects/pyexcel/badge/?version=latest\n   :target: http://pyexcel.readthedocs.org/en/latest/\n\nsupport the project\n================================================================================\n\nif your company has embedded pyexcel and its components into a revenue generating\nproduct, please support me on github, `patreon <https://www.patreon.com/bepatron?u=5537627>`_\nor `bounty source <https://salt.bountysource.com/teams/chfw-pyexcel>`_ to maintain\nthe project and develop it further.\n\nif you are an individual, you are welcome to support me too and for however long\nyou feel like. as my backer, you will receive\n`early access to pyexcel related contents <https://www.patreon.com/pyexcel/posts>`_.\n\nand your issues will get prioritized if you would like to become my patreon as `pyexcel pro user`.\n\nwith your financial support, i will be able to invest\na little bit more time in coding, documentation and writing interesting posts.\n\n\nknown constraints\n==================\n\nfonts, colors and charts are not supported.\n\nnor to read password protected xls, xlsx and ods files.\n\nintroduction\n================================================================================\n\nfeature highlights\n===================\n\n.. table:: a list of supported file formats\n\n    ============ =======================================================\n    file format  definition\n    ============ =======================================================\n    csv          comma separated values\n    tsv          tab separated values\n    csvz         a zip file that contains one or many csv files\n    tsvz         a zip file that contains one or many tsv files\n    xls          a spreadsheet file format created by\n                 ms-excel 97-2003 \n    xlsx         ms-excel extensions to the office open xml\n                 spreadsheetml file format.\n    xlsm         an ms-excel macro-enabled workbook file\n    ods          open document spreadsheet\n    fods         flat open document spreadsheet\n    json         java script object notation\n    html         html table of the data structure\n    simple       simple presentation\n    rst          rstructured text presentation of the data\n    mediawiki    media wiki table\n    ============ =======================================================\n\n\n.. image:: https://github.com/pyexcel/pyexcel/raw/dev/docs/source/_static/images/architecture.svg\n\n\n1. one application programming interface(api) to handle multiple data sources:\n\n   * physical file\n   * memory file\n   * sqlalchemy table\n   * django model\n   * python data structures: dictionary, records and array\n\n2. one api to read and write data in various excel file formats.\n3. for large data sets, data streaming are supported. a genenerator can be returned to you. checkout iget_records, iget_array, isave_as and isave_book_as.\n\n\n\n\ninstallation\n================================================================================\n\nyou can install pyexcel via pip:\n\n.. code-block:: bash\n\n    $ pip install pyexcel\n\n\nor clone it and install it:\n\n.. code-block:: bash\n\n    $ git clone https://github.com/pyexcel/pyexcel.git\n    $ cd pyexcel\n    $ python setup.py install\n\n\n\none liners\n================================================================================\n\nthis section shows you how to get data from your excel files and how to\nexport data to excel files in **one line**\n\nread from the excel files\n--------------------------------------------------------------------------------\n\nget a list of dictionaries\n********************************************************************************\n\n\nsuppose you want to process `history of classical music <https://www.naxos.com/education/brief_history.asp>`_:\n\n\nhistory of classical music:\n\n===============  =============  ====================================\nname             period         representative composers\nmedieval         c.1150-c.1400  machaut, landini\nrenaissance      c.1400-c.1600  gibbons, frescobaldi\nbaroque          c.1600-c.1750  js bach, vivaldi\nclassical        c.1750-c.1830  joseph haydn, wolfgan amadeus mozart\nearley romantic  c.1830-c.1860  chopin, mendelssohn, schumann, liszt\nlate romantic    c.1860-c.1920  wagner,verdi\n===============  =============  ====================================\n\n\nlet's get a list of dictionary out from the xls file:\n\n.. code-block:: python\n\n   >>> records = p.get_records(file_name=\"your_file.xls\")\n\nand let's check what do we have:\n\n.. code-block:: python\n\n   >>> for row in records:\n   ...     print(f\"{row['representative composers']} are from {row['name']} period ({row['period']})\")\n   machaut, landini are from medieval period (c.1150-c.1400)\n   gibbons, frescobaldi are from renaissance period (c.1400-c.1600)\n   js bach, vivaldi are from baroque period (c.1600-c.1750)\n   joseph haydn, wolfgan amadeus mozart are from classical period (c.1750-c.1830)\n   chopin, mendelssohn, schumann, liszt are from earley romantic period (c.1830-c.1860)\n   wagner,verdi are from late romantic period (c.1860-c.1920)\n\n\nget two dimensional array\n********************************************************************************\n\ninstead, what if you have to use `pyexcel.get_array` to do the same:\n\n.. code-block:: python\n\n   >>> for row in p.get_array(file_name=\"your_file.xls\", start_row=1):\n   ...     print(f\"{row[2]} are from {row[0]} period ({row[1]})\")\n   machaut, landini are from medieval period (c.1150-c.1400)\n   gibbons, frescobaldi are from renaissance period (c.1400-c.1600)\n   js bach, vivaldi are from baroque period (c.1600-c.1750)\n   joseph haydn, wolfgan amadeus mozart are from classical period (c.1750-c.1830)\n   chopin, mendelssohn, schumann, liszt are from earley romantic period (c.1830-c.1860)\n   wagner,verdi are from late romantic period (c.1860-c.1920)\n\n\nwhere `start_row` skips the header row.\n\n\nget a dictionary\n********************************************************************************\n\nyou can get a dictionary too:\n\nnow let's get a dictionary out from the spreadsheet:\n\n.. code-block:: python\n\n   >>> my_dict = p.get_dict(file_name=\"your_file.xls\", name_columns_by_row=0)\n\nand check what do we have:\n\n.. code-block:: python\n\n   >>> from pyexcel._compact import ordereddict\n   >>> isinstance(my_dict, ordereddict)\n   true\n   >>> for key, values in my_dict.items():\n   ...     print(key + \" : \" + ','.join([str(item) for item in values]))\n   name : medieval,renaissance,baroque,classical,earley romantic,late romantic\n   period : c.1150-c.1400,c.1400-c.1600,c.1600-c.1750,c.1750-c.1830,c.1830-c.1860,c.1860-c.1920\n   representative composers : machaut, landini,gibbons, frescobaldi,js bach, vivaldi,joseph haydn, wolfgan amadeus mozart,chopin, mendelssohn, schumann, liszt,wagner,verdi\n\n\nplease note that my_dict is an ordereddict.\n\nget a dictionary of two dimensional array\n********************************************************************************\n\n\nsuppose you have a multiple sheet book as the following:\n\n\npyexcel:sheet 1:\n\n=====================  =  =\n1                      2  3\n4                      5  6\n7                      8  9\n=====================  =  =\n\npyexcel:sheet 2:\n\n=====================  =  =\nx                      y  z\n1                      2  3\n4                      5  6\n=====================  =  =\n\npyexcel:sheet 3:\n\n=====================  =  =\no                      p  q\n3                      2  1\n4                      3  2\n=====================  =  =\n\n\nhere is the code to obtain those sheets as a single dictionary:\n\n.. code-block:: python\n\n   >>> book_dict = p.get_book_dict(file_name=\"book.xls\")\n\nand check:\n\n.. code-block:: python\n\n   >>> isinstance(book_dict, ordereddict)\n   true\n   >>> import json\n   >>> for key, item in book_dict.items():\n   ...     print(json.dumps({key: item}))\n   {\"sheet 1\": [[1, 2, 3], [4, 5, 6], [7, 8, 9]]}\n   {\"sheet 2\": [[\"x\", \"y\", \"z\"], [1, 2, 3], [4, 5, 6]]}\n   {\"sheet 3\": [[\"o\", \"p\", \"q\"], [3, 2, 1], [4, 3, 2]]}\n\n\nwrite data\n---------------------------------------------\n\nexport an array\n**********************\n\nsuppose you have the following array:\n\n.. code-block:: python\n\n   >>> data = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\nand here is the code to save it as an excel file :\n\n.. code-block:: python\n\n   >>> p.save_as(array=data, dest_file_name=\"example.xls\")\n\nlet's verify it:\n\n.. code-block:: python\n\n    >>> p.get_sheet(file_name=\"example.xls\")\n    pyexcel_sheet1:\n    +---+---+---+\n    | 1 | 2 | 3 |\n    +---+---+---+\n    | 4 | 5 | 6 |\n    +---+---+---+\n    | 7 | 8 | 9 |\n    +---+---+---+\n\n\nand here is the code to save it as a csv file :\n\n.. code-block:: python\n\n   >>> p.save_as(array=data,\n   ...           dest_file_name=\"example.csv\",\n   ...           dest_delimiter=':')\n\nlet's verify it:\n\n.. code-block:: python\n\n   >>> with open(\"example.csv\") as f:\n   ...     for line in f.readlines():\n   ...         print(line.rstrip())\n   ...\n   1:2:3\n   4:5:6\n   7:8:9\n\nexport a list of dictionaries\n**********************************\n\n.. code-block:: python\n\n    >>> records = [\n    ...     {\"year\": 1903, \"country\": \"germany\", \"speed\": \"206.7km/h\"},\n    ...     {\"year\": 1964, \"country\": \"japan\", \"speed\": \"210km/h\"},\n    ...     {\"year\": 2008, \"country\": \"china\", \"speed\": \"350km/h\"}\n    ... ]\n    >>> p.save_as(records=records, dest_file_name='high_speed_rail.xls')\n\n\nexport a dictionary of single key value pair\n********************************************************************************\n\n.. code-block:: python\n\n    >>> henley_on_thames_facts = {\n    ...     \"area\": \"5.58 square meters\",\n    ...     \"population\": \"11,619\",\n    ...     \"civial parish\": \"henley-on-thames\",\n    ...     \"latitude\": \"51.536\",\n    ...     \"longitude\": \"-0.898\"\n    ... }\n    >>> p.save_as(adict=henley_on_thames_facts, dest_file_name='henley.xlsx')\n\n\nexport a dictionary of single dimensonal array\n********************************************************************************\n\n.. code-block:: python\n\n    >>> ccs_insights = {\n    ...     \"year\": [\"2017\", \"2018\", \"2019\", \"2020\", \"2021\"],\n    ...     \"smart phones\": [1.53, 1.64, 1.74, 1.82, 1.90],\n    ...     \"feature phones\": [0.46, 0.38, 0.30, 0.23, 0.17]\n    ... }\n    >>> p.save_as(adict=ccs_insights, dest_file_name='ccs.csv')\n\n\nexport a dictionary of two dimensional array as a book\n********************************************************************************\n\nsuppose you want to save the below dictionary to an excel file :\n\n.. code-block:: python\n\n   >>> a_dictionary_of_two_dimensional_arrays = {\n   ...      'sheet 1':\n   ...          [\n   ...              [1.0, 2.0, 3.0],\n   ...              [4.0, 5.0, 6.0],\n   ...              [7.0, 8.0, 9.0]\n   ...          ],\n   ...      'sheet 2':\n   ...          [\n   ...              ['x', 'y', 'z'],\n   ...              [1.0, 2.0, 3.0],\n   ...              [4.0, 5.0, 6.0]\n   ...          ],\n   ...      'sheet 3':\n   ...          [\n   ...              ['o', 'p', 'q'],\n   ...              [3.0, 2.0, 1.0],\n   ...              [4.0, 3.0, 2.0]\n   ...          ]\n   ...  }\n\nhere is the code:\n\n.. code-block:: python\n\n   >>> p.save_book_as(\n   ...    bookdict=a_dictionary_of_two_dimensional_arrays,\n   ...    dest_file_name=\"book.xls\"\n   ... )\n\nif you want to preserve the order of sheets in your dictionary, you have to\npass on an ordered dictionary to the function itself. for example:\n\n.. code-block:: python\n\n   >>> data = ordereddict()\n   >>> data.update({\"sheet 2\": a_dictionary_of_two_dimensional_arrays['sheet 2']})\n   >>> data.update({\"sheet 1\": a_dictionary_of_two_dimensional_arrays['sheet 1']})\n   >>> data.update({\"sheet 3\": a_dictionary_of_two_dimensional_arrays['sheet 3']})\n   >>> p.save_book_as(bookdict=data, dest_file_name=\"book.xls\")\n\nlet's verify its order:\n\n.. code-block:: python\n\n   >>> book_dict = p.get_book_dict(file_name=\"book.xls\")\n   >>> for key, item in book_dict.items():\n   ...     print(json.dumps({key: item}))\n   {\"sheet 2\": [[\"x\", \"y\", \"z\"], [1, 2, 3], [4, 5, 6]]}\n   {\"sheet 1\": [[1, 2, 3], [4, 5, 6], [7, 8, 9]]}\n   {\"sheet 3\": [[\"o\", \"p\", \"q\"], [3, 2, 1], [4, 3, 2]]}\n\nplease notice that \"sheet 2\" is the first item in the *book_dict*, meaning the order of sheets are preserved.\n\n\ntranscoding\n-------------------------------------------\n\n.. note::\n\n   please note that `pyexcel-cli` can perform file transcoding at command line.\n   no need to open your editor, save the problem, then python run.\n\n\nthe following code does a simple file format transcoding from xls to csv:\n\n.. code-block:: python\n\n   >>> p.save_as(file_name=\"birth.xls\", dest_file_name=\"birth.csv\")\n\nagain it is really simple. let's verify what we have gotten:\n\n.. code-block:: python\n\n   >>> sheet = p.get_sheet(file_name=\"birth.csv\")\n   >>> sheet\n   birth.csv:\n   +-------+--------+----------+\n   | name  | weight | birth    |\n   +-------+--------+----------+\n   | adam  | 3.4    | 03/02/15 |\n   +-------+--------+----------+\n   | smith | 4.2    | 12/11/14 |\n   +-------+--------+----------+\n\n.. note::\n\n   please note that csv(comma separate value) file is pure text file. formula, charts, images and formatting in xls file will disappear no matter which transcoding tool you use. hence, pyexcel is a quick alternative for this transcoding job.\n\n\nlet use previous example and save it as xlsx instead\n\n.. code-block:: python\n\n   >>> p.save_as(file_name=\"birth.xls\",\n   ...           dest_file_name=\"birth.xlsx\") # change the file extension\n\nagain let's verify what we have gotten:\n\n.. code-block:: python\n\n   >>> sheet = p.get_sheet(file_name=\"birth.xlsx\")\n   >>> sheet\n   pyexcel_sheet1:\n   +-------+--------+----------+\n   | name  | weight | birth    |\n   +-------+--------+----------+\n   | adam  | 3.4    | 03/02/15 |\n   +-------+--------+----------+\n   | smith | 4.2    | 12/11/14 |\n   +-------+--------+----------+\n\n\nexcel book merge and split operation in one line\n--------------------------------------------------------------------------------\n\nmerge all excel files in directory into  a book where each file become a sheet\n********************************************************************************\n\nthe following code will merge every excel files into one file, say \"output.xls\":\n\n.. code-block:: python\n\n    from pyexcel.cookbook import merge_all_to_a_book\n    import glob\n\n\n    merge_all_to_a_book(glob.glob(\"your_csv_directory\\*.csv\"), \"output.xls\")\n\nyou can mix and match with other excel formats: xls, xlsm and ods. for example, if you are sure you have only xls, xlsm, xlsx, ods and csv files in `your_excel_file_directory`, you can do the following:\n\n.. code-block:: python\n\n    from pyexcel.cookbook import merge_all_to_a_book\n    import glob\n\n\n    merge_all_to_a_book(glob.glob(\"your_excel_file_directory\\*.*\"), \"output.xls\")\n\nsplit a book into single sheet files\n****************************************\n\n\nsuppose you have many sheets in a work book and you would like to separate each into a single sheet excel file. you can easily do this:\n\n.. code-block:: python\n\n   >>> from pyexcel.cookbook import split_a_book\n   >>> split_a_book(\"megabook.xls\", \"output.xls\")\n   >>> import glob\n   >>> outputfiles = glob.glob(\"*_output.xls\")\n   >>> for file in sorted(outputfiles):\n   ...     print(file)\n   ...\n   sheet 1_output.xls\n   sheet 2_output.xls\n   sheet 3_output.xls\n\nfor the output file, you can specify any of the supported formats\n\n\nextract just one sheet from a book\n*************************************\n\n\nsuppose you just want to extract one sheet from many sheets that exists in a work book and you would like to separate it into a single sheet excel file. you can easily do this:\n\n.. code-block:: python\n\n    >>> from pyexcel.cookbook import extract_a_sheet_from_a_book\n    >>> extract_a_sheet_from_a_book(\"megabook.xls\", \"sheet 1\", \"output.xls\")\n    >>> if os.path.exists(\"sheet 1_output.xls\"):\n    ...     print(\"sheet 1_output.xls exists\")\n    ...\n    sheet 1_output.xls exists\n\nfor the output file, you can specify any of the supported formats\n\n\nhidden feature: partial read\n===============================================\n\nmost pyexcel users do not know, but other library users were requesting `partial read <https://github.com/jazzband/tablib/issues/467>`_\n\n\nwhen you are dealing with huge amount of data, e.g. 64gb, obviously you would not\nlike to fill up your memory with those data. what you may want to do is, record\ndata from nth line, take m records and stop. and you only want to use your memory\nfor the m records, not for beginning part nor for the tail part.\n\nhence partial read feature is developed to read partial data into memory for\nprocessing. \n\nyou can paginate by row, by column and by both, hence you dictate what portion of the\ndata to read back. but remember only row limit features help you save memory. let's\nyou use this feature to record data from nth column, take m number of columns and skip\nthe rest. you are not going to reduce your memory footprint.\n\nwhy did not i see above benefit?\n--------------------------------------------------------------------------------\n\nthis feature depends heavily on the implementation details.\n\n`pyexcel-xls`_ (xlrd), `pyexcel-xlsx`_ (openpyxl), `pyexcel-ods`_ (odfpy) and\n`pyexcel-ods3`_ (pyexcel-ezodf) will read all data into memory. because xls,\nxlsx and ods file are effective a zipped folder, all four will unzip the folder\nand read the content in xml format in **full**, so as to make sense of all details.\n\nhence, during the partial data is been returned, the memory consumption won't\ndiffer from reading the whole data back. only after the partial\ndata is returned, the memory comsumption curve shall jump the cliff. so pagination\ncode here only limits the data returned to your program.\n\nwith that said, `pyexcel-xlsxr`_, `pyexcel-odsr`_ and `pyexcel-htmlr`_ does read\npartial data into memory. those three are implemented in such a way that they\nconsume the xml(html) when needed. when they have read designated portion of the\ndata, they stop, even if they are half way through.\n\nin addition, pyexcel's csv readers can read partial data into memory too.\n\n\nlet's assume the following file is a huge csv file:\n\n.. code-block:: python\n\n   >>> import datetime\n   >>> import pyexcel as pe\n   >>> data = [\n   ...     [1, 21, 31],\n   ...     [2, 22, 32],\n   ...     [3, 23, 33],\n   ...     [4, 24, 34],\n   ...     [5, 25, 35],\n   ...     [6, 26, 36]\n   ... ]\n   >>> pe.save_as(array=data, dest_file_name=\"your_file.csv\")\n\n\nand let's pretend to read partial data:\n\n\n.. code-block:: python\n\n   >>> pe.get_sheet(file_name=\"your_file.csv\", start_row=2, row_limit=3)\n   your_file.csv:\n   +---+----+----+\n   | 3 | 23 | 33 |\n   +---+----+----+\n   | 4 | 24 | 34 |\n   +---+----+----+\n   | 5 | 25 | 35 |\n   +---+----+----+\n\nand you could as well do the same for columns:\n\n.. code-block:: python\n\n   >>> pe.get_sheet(file_name=\"your_file.csv\", start_column=1, column_limit=2)\n   your_file.csv:\n   +----+----+\n   | 21 | 31 |\n   +----+----+\n   | 22 | 32 |\n   +----+----+\n   | 23 | 33 |\n   +----+----+\n   | 24 | 34 |\n   +----+----+\n   | 25 | 35 |\n   +----+----+\n   | 26 | 36 |\n   +----+----+\n\nobvious, you could do both at the same time:\n\n.. code-block:: python\n\n   >>> pe.get_sheet(file_name=\"your_file.csv\",\n   ...     start_row=2, row_limit=3,\n   ...     start_column=1, column_limit=2)\n   your_file.csv:\n   +----+----+\n   | 23 | 33 |\n   +----+----+\n   | 24 | 34 |\n   +----+----+\n   | 25 | 35 |\n   +----+----+\n\n\nthe pagination support is available across all pyexcel plugins.\n\n.. note::\n\n   no column pagination support for query sets as data source. \n\n\nformatting while transcoding a big data file\n--------------------------------------------------------------------------------\n\nif you are transcoding a big data set, conventional formatting method would not\nhelp unless a on-demand free ram is available. however, there is a way to minimize\nthe memory footprint of pyexcel while the formatting is performed.\n\nlet's continue from previous example. suppose we want to transcode \"your_file.csv\"\nto \"your_file.xls\" but increase each element by 1.\n\nwhat we can do is to define a row renderer function as the following:\n\n.. code-block:: python\n\n   >>> def increment_by_one(row):\n   ...     for element in row:\n   ...         yield element + 1\n\nthen pass it onto save_as function using row_renderer:\n\n.. code-block:: python\n\n   >>> pe.isave_as(file_name=\"your_file.csv\",\n   ...             row_renderer=increment_by_one,\n   ...             dest_file_name=\"your_file.xlsx\")\n\n\n.. note::\n\n   if the data content is from a generator, isave_as has to be used.\n   \nwe can verify if it was done correctly:\n\n.. code-block:: python\n\n   >>> pe.get_sheet(file_name=\"your_file.xlsx\")\n   your_file.csv:\n   +---+----+----+\n   | 2 | 22 | 32 |\n   +---+----+----+\n   | 3 | 23 | 33 |\n   +---+----+----+\n   | 4 | 24 | 34 |\n   +---+----+----+\n   | 5 | 25 | 35 |\n   +---+----+----+\n   | 6 | 26 | 36 |\n   +---+----+----+\n   | 7 | 27 | 37 |\n   +---+----+----+\n\n\nstream apis for big file : a set of two liners\n================================================================================\n\nwhen you are dealing with **big** excel files, you will want **pyexcel** to use\nconstant memory.\n\nthis section shows you how to get data from your **big** excel files and how to\nexport data to excel files in **two lines** at most, without eating all\nyour computer memory.\n\n\ntwo liners for get data from big excel files\n--------------------------------------------------------------------------------\n\nget a list of dictionaries\n********************************************************************************\n\n\n\nsuppose you want to process the following coffee data again:\n\ntop 5 coffeine drinks:\n\n=====================================  ===============  =============\ncoffees                                serving size     caffeine (mg)\nstarbucks coffee blonde roast          venti(20 oz)     475\ndunkin' donuts coffee with turbo shot  large(20 oz.)    398\nstarbucks coffee pike place roast      grande(16 oz.)   310\npanera coffee light roast              regular(16 oz.)  300\n=====================================  ===============  =============\n\n\nlet's get a list of dictionary out from the xls file:\n\n.. code-block:: python\n\n   >>> records = p.iget_records(file_name=\"your_file.xls\")\n\nand let's check what do we have:\n\n.. code-block:: python\n\n   >>> for r in records:\n   ...     print(f\"{r['serving size']} of {r['coffees']} has {r['caffeine (mg)']} mg\")\n   venti(20 oz) of starbucks coffee blonde roast has 475 mg\n   large(20 oz.) of dunkin' donuts coffee with turbo shot has 398 mg\n   grande(16 oz.) of starbucks coffee pike place roast has 310 mg\n   regular(16 oz.) of panera coffee light roast has 300 mg\n\nplease do not forgot the second line to close the opened file handle:\n\n.. code-block:: python\n\n   >>> p.free_resources()\n\nget two dimensional array\n********************************************************************************\n\ninstead, what if you have to use `pyexcel.get_array` to do the same:\n\n.. code-block:: python\n\n   >>> for row in p.iget_array(file_name=\"your_file.xls\", start_row=1):\n   ...     print(f\"{row[1]} of {row[0]} has {row[2]} mg\")\n   venti(20 oz) of starbucks coffee blonde roast has 475 mg\n   large(20 oz.) of dunkin' donuts coffee with turbo shot has 398 mg\n   grande(16 oz.) of starbucks coffee pike place roast has 310 mg\n   regular(16 oz.) of panera coffee light roast has 300 mg\n\nagain, do not forgot the second line:\n\n.. code-block:: python\n\n   >>> p.free_resources()\n\nwhere `start_row` skips the header row.\n\ndata export in one liners\n---------------------------------------------\n\nexport an array\n**********************\n\nsuppose you have the following array:\n\n.. code-block:: python\n\n   >>> data = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\nand here is the code to save it as an excel file :\n\n.. code-block:: python\n\n   >>> p.isave_as(array=data, dest_file_name=\"example.xls\")\n\nbut the following line is not required because the data source\nare not file sources:\n\n.. code-block:: python\n\n   >>> # p.free_resources()\n\nlet's verify it:\n\n.. code-block:: python\n\n    >>> p.get_sheet(file_name=\"example.xls\")\n    pyexcel_sheet1:\n    +---+---+---+\n    | 1 | 2 | 3 |\n    +---+---+---+\n    | 4 | 5 | 6 |\n    +---+---+---+\n    | 7 | 8 | 9 |\n    +---+---+---+\n\n\nand here is the code to save it as a csv file :\n\n.. code-block:: python\n\n   >>> p.isave_as(array=data,\n   ...            dest_file_name=\"example.csv\",\n   ...            dest_delimiter=':')\n\nlet's verify it:\n\n.. code-block:: python\n\n   >>> with open(\"example.csv\") as f:\n   ...     for line in f.readlines():\n   ...         print(line.rstrip())\n   ...\n   1:2:3\n   4:5:6\n   7:8:9\n\nexport a list of dictionaries\n**********************************\n\n.. code-block:: python\n\n    >>> records = [\n    ...     {\"year\": 1903, \"country\": \"germany\", \"speed\": \"206.7km/h\"},\n    ...     {\"year\": 1964, \"country\": \"japan\", \"speed\": \"210km/h\"},\n    ...     {\"year\": 2008, \"country\": \"china\", \"speed\": \"350km/h\"}\n    ... ]\n    >>> p.isave_as(records=records, dest_file_name='high_speed_rail.xls')\n\nexport a dictionary of single key value pair\n********************************************************************************\n\n.. code-block:: python\n\n    >>> henley_on_thames_facts = {\n    ...     \"area\": \"5.58 square meters\",\n    ...     \"population\": \"11,619\",\n    ...     \"civial parish\": \"henley-on-thames\",\n    ...     \"latitude\": \"51.536\",\n    ...     \"longitude\": \"-0.898\"\n    ... }\n    >>> p.isave_as(adict=henley_on_thames_facts, dest_file_name='henley.xlsx')\n\nexport a dictionary of single dimensonal array\n********************************************************************************\n\n.. code-block:: python\n\n    >>> ccs_insights = {\n    ...     \"year\": [\"2017\", \"2018\", \"2019\", \"2020\", \"2021\"],\n    ...     \"smart phones\": [1.53, 1.64, 1.74, 1.82, 1.90],\n    ...     \"feature phones\": [0.46, 0.38, 0.30, 0.23, 0.17]\n    ... }\n    >>> p.isave_as(adict=ccs_insights, dest_file_name='ccs.csv')\n    >>> p.free_resources()\n\nexport a dictionary of two dimensional array as a book\n********************************************************************************\n\nsuppose you want to save the below dictionary to an excel file :\n\n.. code-block:: python\n\n   >>> a_dictionary_of_two_dimensional_arrays = {\n   ...      'sheet 1':\n   ...          [\n   ...              [1.0, 2.0, 3.0],\n   ...              [4.0, 5.0, 6.0],\n   ...              [7.0, 8.0, 9.0]\n   ...          ],\n   ...      'sheet 2':\n   ...          [\n   ...              ['x', 'y', 'z'],\n   ...              [1.0, 2.0, 3.0],\n   ...              [4.0, 5.0, 6.0]\n   ...          ],\n   ...      'sheet 3':\n   ...          [\n   ...              ['o', 'p', 'q'],\n   ...              [3.0, 2.0, 1.0],\n   ...              [4.0, 3.0, 2.0]\n   ...          ]\n   ...  }\n\nhere is the code:\n\n.. code-block:: python\n\n   >>> p.isave_book_as(\n   ...    bookdict=a_dictionary_of_two_dimensional_arrays,\n   ...    dest_file_name=\"book.xls\"\n   ... )\n\nif you want to preserve the order of sheets in your dictionary, you have to\npass on an ordered dictionary to the function itself. for example:\n\n.. code-block:: python\n\n   >>> from pyexcel._compact import ordereddict\n   >>> data = ordereddict()\n   >>> data.update({\"sheet 2\": a_dictionary_of_two_dimensional_arrays['sheet 2']})\n   >>> data.update({\"sheet 1\": a_dictionary_of_two_dimensional_arrays['sheet 1']})\n   >>> data.update({\"sheet 3\": a_dictionary_of_two_dimensional_arrays['sheet 3']})\n   >>> p.isave_book_as(bookdict=data, dest_file_name=\"book.xls\")\n   >>> p.free_resources()\n\nlet's verify its order:\n\n.. code-block:: python\n\n   >>> import json\n   >>> book_dict = p.get_book_dict(file_name=\"book.xls\")\n   >>> for key, item in book_dict.items():\n   ...     print(json.dumps({key: item}))\n   {\"sheet 2\": [[\"x\", \"y\", \"z\"], [1, 2, 3], [4, 5, 6]]}\n   {\"sheet 1\": [[1, 2, 3], [4, 5, 6], [7, 8, 9]]}\n   {\"sheet 3\": [[\"o\", \"p\", \"q\"], [3, 2, 1], [4, 3, 2]]}\n\nplease notice that \"sheet 2\" is the first item in the *book_dict*, meaning the order of sheets are preserved.\n\n\nfile format transcoding on one line\n-------------------------------------------\n\n.. note::\n\n   please note that the following file transcoding could be with zero line. please\n   install pyexcel-cli and you will do the transcode in one command. no need to\n   open your editor, save the problem, then python run.\n\n\nthe following code does a simple file format transcoding from xls to csv:\n\n.. code-block:: python\n\n   >>> import pyexcel\n   >>> p.save_as(file_name=\"birth.xls\", dest_file_name=\"birth.csv\")\n\nagain it is really simple. let's verify what we have gotten:\n\n.. code-block:: python\n\n   >>> sheet = p.get_sheet(file_name=\"birth.csv\")\n   >>> sheet\n   birth.csv:\n   +-------+--------+----------+\n   | name  | weight | birth    |\n   +-------+--------+----------+\n   | adam  | 3.4    | 03/02/15 |\n   +-------+--------+----------+\n   | smith | 4.2    | 12/11/14 |\n   +-------+--------+----------+\n\n.. note::\n\n   please note that csv(comma separate value) file is pure text file. formula, charts, images and formatting in xls file will disappear no matter which transcoding tool you use. hence, pyexcel is a quick alternative for this transcoding job.\n\n\nlet use previous example and save it as xlsx instead\n\n.. code-block:: python\n\n   >>> import pyexcel\n   >>> p.isave_as(file_name=\"birth.xls\",\n   ...            dest_file_name=\"birth.xlsx\") # change the file extension\n\nagain let's verify what we have gotten:\n\n.. code-block:: python\n\n   >>> sheet = p.get_sheet(file_name=\"birth.xlsx\")\n   >>> sheet\n   pyexcel_sheet1:\n   +-------+--------+----------+\n   | name  | weight | birth    |\n   +-------+--------+----------+\n   | adam  | 3.4    | 03/02/15 |\n   +-------+--------+----------+\n   | smith | 4.2    | 12/11/14 |\n   +-------+--------+----------+\n\n\navailable plugins\n=================\n\n.. _file-format-list:\n.. _a-map-of-plugins-and-file-formats:\n\n.. table:: a list of file formats supported by external plugins\n\n   ======================== ======================= =================\n   package name              supported file formats  dependencies\n   ======================== ======================= =================\n   `pyexcel-io`_            csv, csvz [#f1]_, tsv,\n                            tsvz [#f2]_\n   `pyexcel-xls`_           xls, xlsx(read only),   `xlrd`_,\n                            xlsm(read only)         `xlwt`_\n   `pyexcel-xlsx`_          xlsx                    `openpyxl`_\n   `pyexcel-ods3`_          ods                     `pyexcel-ezodf`_,\n                                                    lxml\n   `pyexcel-ods`_           ods                     `odfpy`_\n   ======================== ======================= =================\n\n.. table:: dedicated file reader and writers\n\n   ======================== ======================= =================\n   package name              supported file formats  dependencies\n   ======================== ======================= =================\n   `pyexcel-xlsxw`_         xlsx(write only)        `xlsxwriter`_\n   `pyexcel-libxlsxw`_      xlsx(write only)        `libxlsxwriter`_\n   `pyexcel-xlsxr`_         xlsx(read only)         lxml\n   `pyexcel-xlsbr`_         xlsb(read only)         pyxlsb\n   `pyexcel-odsr`_          read only for ods, fods lxml\n   `pyexcel-odsw`_          write only for ods      loxun\n   `pyexcel-htmlr`_         html(read only)         lxml,html5lib\n   `pyexcel-pdfr`_          pdf(read only)          camelot\n   ======================== ======================= =================\n\n\nplugin shopping guide\n------------------------\n\nsince 2020, all pyexcel-io plugins have dropped the support for python versions\nwhich are lower than 3.6. if you want to use any of those python versions, please use pyexcel-io\nand its plugins versions that are lower than 0.6.0.\n\n\nexcept csv files, xls, xlsx and ods files are a zip of a folder containing a lot of\nxml files\n\nthe dedicated readers for excel files can stream read\n\n\nin order to manage the list of plugins installed, you need to use pip to add or remove\na plugin. when you use virtualenv, you can have different plugins per virtual\nenvironment. in the situation where you have multiple plugins that does the same thing\nin your environment, you need to tell pyexcel which plugin to use per function call.\nfor example, pyexcel-ods and pyexcel-odsr, and you want to get_array to use pyexcel-odsr.\nyou need to append get_array(..., library='pyexcel-odsr').\n\n\n\n.. _pyexcel-io: https://github.com/pyexcel/pyexcel-io\n.. _pyexcel-xls: https://github.com/pyexcel/pyexcel-xls\n.. _pyexcel-xlsx: https://github.com/pyexcel/pyexcel-xlsx\n.. _pyexcel-ods: https://github.com/pyexcel/pyexcel-ods\n.. _pyexcel-ods3: https://github.com/pyexcel/pyexcel-ods3\n.. _pyexcel-odsr: https://github.com/pyexcel/pyexcel-odsr\n.. _pyexcel-odsw: https://github.com/pyexcel/pyexcel-odsw\n.. _pyexcel-pdfr: https://github.com/pyexcel/pyexcel-pdfr\n\n.. _pyexcel-xlsxw: https://github.com/pyexcel/pyexcel-xlsxw\n.. _pyexcel-libxlsxw: https://github.com/pyexcel/pyexcel-libxlsxw\n.. _pyexcel-xlsxr: https://github.com/pyexcel/pyexcel-xlsxr\n.. _pyexcel-xlsbr: https://github.com/pyexcel/pyexcel-xlsbr\n.. _pyexcel-htmlr: https://github.com/pyexcel/pyexcel-htmlr\n\n.. _xlrd: https://github.com/python-excel/xlrd\n.. _xlwt: https://github.com/python-excel/xlwt\n.. _openpyxl: https://bitbucket.org/openpyxl/openpyxl\n.. _xlsxwriter: https://github.com/jmcnamara/xlsxwriter\n.. _pyexcel-ezodf: https://github.com/pyexcel/pyexcel-ezodf\n.. _odfpy: https://github.com/eea/odfpy\n.. _libxlsxwriter: http://libxlsxwriter.github.io/getting_started.html\n\n.. table:: other data renderers\n\n   ======================== ======================= ================= ==================\n   package name              supported file formats  dependencies     python versions\n   ======================== ======================= ================= ==================\n   `pyexcel-text`_          write only:rst,         `tabulate`_       2.6, 2.7, 3.3, 3.4\n                            mediawiki, html,                          3.5, 3.6, pypy\n                            latex, grid, pipe,\n                            orgtbl, plain simple\n                            read only: ndjson\n                            r/w: json\n   `pyexcel-handsontable`_  handsontable in html    `handsontable`_   same as above\n   `pyexcel-pygal`_         svg chart               `pygal`_          2.7, 3.3, 3.4, 3.5\n                                                                      3.6, pypy\n   `pyexcel-sortable`_      sortable table in html  `csvtotable`_     same as above\n   `pyexcel-gantt`_         gantt chart in html     `frappe-gantt`_   except pypy, same\n                                                                      as above\n   ======================== ======================= ================= ==================\n\n.. _pyexcel-text: https://github.com/pyexcel/pyexcel-text\n.. _tabulate: https://bitbucket.org/astanin/python-tabulate\n.. _pyexcel-handsontable: https://github.com/pyexcel/pyexcel-handsontable\n.. _handsontable: https://cdnjs.com/libraries/handsontable\n.. _pyexcel-pygal: https://github.com/pyexcel/pyexcel-chart\n.. _pygal: https://github.com/kozea/pygal\n.. _pyexcel-matplotlib: https://github.com/pyexcel/pyexcel-matplotlib\n.. _matplotlib: https://matplotlib.org\n.. _pyexcel-sortable: https://github.com/pyexcel/pyexcel-sortable\n.. _csvtotable: https://github.com/vividvilla/csvtotable\n.. _pyexcel-gantt: https://github.com/pyexcel/pyexcel-gantt\n.. _frappe-gantt: https://github.com/frappe/gantt\n\n.. rubric:: footnotes\n\n.. [#f1] zipped csv file\n.. [#f2] zipped tsv file\n\n\nacknowledgement\n===============\n\nall great work have been done by odf, ezodf, xlrd, xlwt, tabulate and other\nindividual developers. this library unites only the data access code.\n\n\n\n\nlicense\n================================================================================\n\nnew bsd license\n\n\n\n19 contributors\n================================================================================\n\nin alphabetical order:\n\n* `akshaya kumar sharma <https://github.com/akshayakrsh>`_\n* `andre almar <https://github.com/andrealmar>`_\n* `arunkumar rajendran <https://github.com/arunkumar-ra>`_\n* `ayan banerjee <https://github.com/ayan-b>`_\n* `chris hill-scott <https://github.com/quis>`_\n* `craig anderson <https://github.com/craiga>`_\n* `daryl yu <https://github.com/darylyu>`_\n* `j harley <https://github.com/julzhk>`_\n* `joel nothman <https://github.com/jnothman>`_\n* `john vandenberg <https://github.com/jayvdb>`_\n* `linghui zeng <https://github.com/mathsyouth>`_\n* `nik nyby <https://github.com/nikolas>`_\n* `rintze m. zelle, phd <https://github.com/rmzelle>`_\n* `simeon visser <https://github.com/svisser>`_\n* `simon allen <https://github.com/garfunkel>`_\n* `simon klemenc <https://github.com/hiaselhans>`_\n* `tim gates <https://github.com/timgates42>`_\n* `wesley a. cheng <https://github.com/wesleyacheng>`_\n* `william jamir silva <https://github.com/williamjamir>`_\n\nchange log\n================================================================================\n\n0.7.0 - 12.2.2022\n--------------------------------------------------------------------------------\n\n**fixed**\n\n#. `#250 <https://github.com/pyexcel/pyexcel/issues/250>`_: recursionerror\n   raised on deepcopy of a sheet\n\n**updated**\n\n#. `#255 <https://github.com/pyexcel/pyexcel/issues/255>`_: pyexcel.get_array\n   documentation page seems to be a copy of pyexcel.get_sheet\n\n**removed**\n\n#. `#249 <https://github.com/pyexcel/pyexcel/issues/249>`_: drop the support for\n   dummy import statements pyexcel.ext.*\n\n0.6.7 - 12.09.2021\n--------------------------------------------------------------------------------\n\n**updated**\n\n#. `#243 <https://github.com/pyexcel/pyexcel/issues/243>`_: fix small typo.\n#. add chardet as explicit dependency\n\n0.6.6 - 14.11.2020\n--------------------------------------------------------------------------------\n\n**updated**\n\n#. `#233 <https://github.com/pyexcel/pyexcel/issues/233>`_: dynamically resize\n   the table matrix on set_value. sheet['aa1'] = 'test' will work in this\n   release.\n\n0.6.5 - 8.10.2020\n--------------------------------------------------------------------------------\n\n**updated**\n\n#. update queryset source to work with pyexcel-io 0.6.0\n\n0.6.4 - 18.08.2020\n--------------------------------------------------------------------------------\n\n**updated**\n\n#. `#219 <https://github.com/pyexcel/pyexcel/issues/219>`_: book created from\n   dict no longer discards order.\n\n0.6.3 - 01.08.2020\n--------------------------------------------------------------------------------\n\n**fixed**\n\n#. `#214 <https://github.com/pyexcel/pyexcel/issues/214>`_: remove leading and\n   trailing whitespace for column names\n\n**removed**\n\n#. python 2 compatibility have been permanently removed.\n\n0.6.2 - 8.06.2020\n--------------------------------------------------------------------------------\n\n**fixed**\n\n#. `#109 <https://github.com/pyexcel/pyexcel/issues/109>`_: control the column\n   order when write the data output\n\n0.6.1 - 02.05.2020\n--------------------------------------------------------------------------------\n\n**fixed**\n\n#. `#203 <https://github.com/pyexcel/pyexcel/issues/203>`_: texttable was\n   dropped out in 0.6.0 as compulsary dependency. end user may experience it\n   when a sheet/table is printed in a shell. otherwise, new user of pyexcel\n   won't see it. as of release date, no issues were created\n\n0.6.0 - 21.04.2020\n--------------------------------------------------------------------------------\n\n**updated**\n\n#. `#199 <https://github.com/pyexcel/pyexcel/issues/199>`_: += in place; = +\n   shall return new instance\n#. `#195 <https://github.com/pyexcel/pyexcel/issues/195>`_: documentation\n   update. however small is welcome\n\n**removed**\n\n#. dropping the test support for python version lower than 3.6. v0.6.0 should\n   work with python 2.7 but is not guaranteed to work. please upgrade to python\n   3.6+.\n\n0.5.15 - 07.07.2019\n--------------------------------------------------------------------------------\n\n**updated**\n\n#. `#185 <https://github.com/pyexcel/pyexcel/issues/185>`_: fix a bug with http\n   data source. the real fix lies in pyexcel-io v0.5.19. this release just put\n   the version requirement in.\n\n0.5.14 - 12.06.2019\n--------------------------------------------------------------------------------\n\n**updated**\n\n#. `#182 <https://github.com/pyexcel/pyexcel/issues/182>`_: support\n   dest_force_file_type on save_as and save_book_as\n\n0.5.13 - 12.03.2019\n--------------------------------------------------------------------------------\n\n**updated**\n\n#. `#176 <https://github.com/pyexcel/pyexcel/issues/176>`_: get_sheet\n   {indexerror}list index out of range // xlsx can't be opened\n\n0.5.12 - 25.02.2019\n--------------------------------------------------------------------------------\n\n**updated**\n\n#. `#174 <https://github.com/pyexcel/pyexcel/issues/174>`_: include examples in\n   tarbar\n\n0.5.11 - 22.02.2019\n--------------------------------------------------------------------------------\n\n**updated**\n\n#. `#169 <https://github.com/pyexcel/pyexcel/issues/169>`_: remove\n   pyexcel-handsontalbe in test\n#. add tests, and docs folder in distribution\n\n0.5.10 - 3.12.2018\n--------------------------------------------------------------------------------\n\n**updated**\n\n#. `#157 <https://github.com/pyexcel/pyexcel/issues/157>`_: please use\n   scan_plugins_regex, which lml 0.7 complains about\n#. updated dependency on pyexcel-io to 0.5.11\n\n0.5.9.1 - 30.08.2018\n--------------------------------------------------------------------------------\n\n**updated**\n\n#. to require pyexcel-io 0.5.9.1 and use lml at least version 0.0.2\n\n0.5.9 - 30.08.2018\n--------------------------------------------------------------------------------\n\n**added**\n\n#. support __len__. len(book) returns the number of sheets and len(sheet)\n   returns the number of rows\n#. `#144 <https://github.com/pyexcel/pyexcel/issues/144>`_: memory-efficient way\n   to read sheet names.\n#. `#148 <https://github.com/pyexcel/pyexcel/issues/148>`_: force_file_type is\n   introduced. when reading a file on a disk, this parameter allows you to\n   choose a reader. i.e. csv reader for a text file. xlsx reader for a xlsx file\n   but with .blob file suffix.\n#. finally, pyexcel got import pyexcel.__version__\n\n**updated**\n\n#. sheet.to_records() returns a generator now, saving memory\n#. `#115 <https://github.com/pyexcel/pyexcel/issues/115>`_, fix set membership\n   test to run faster in python2\n#. `#140 <https://github.com/pyexcel/pyexcel/issues/140>`_, direct writes to\n   cells yield weird results\n\n0.5.8 - 26.03.2018\n--------------------------------------------------------------------------------\n\n**added**\n\n#. `#125 <https://github.com/pyexcel/pyexcel/issues/125>`_, sort book sheets\n\n**updated**\n\n#. `#126 <https://github.com/pyexcel/pyexcel/issues/126>`_, dest_sheet_name in\n   save_as will set the sheet name in the output\n#. `#115 <https://github.com/pyexcel/pyexcel/issues/115>`_, fix set membership\n   test to run faster in python2\n\n0.5.7 - 11.01.2018\n--------------------------------------------------------------------------------\n\n**added**\n\n#. `pyexcel-io#46 <https://github.com/pyexcel/pyexcel-io/issues/46>`_, expose\n   `bulk_save` to developer.\n\n0.5.6 - 23.10.2017\n--------------------------------------------------------------------------------\n\n**removed**\n\n#. `#105 <https://github.com/pyexcel/pyexcel/issues/105>`_, remove gease from\n   setup_requires, introduced by 0.5.5.\n#. removed testing against python 2.6\n#. `#103 <https://github.com/pyexcel/pyexcel/issues/103>`_, include license file\n   in manifest.in, meaning license file will appear in the released tar ball.\n\n0.5.5 - 20.10.2017\n--------------------------------------------------------------------------------\n\n**removed**\n\n#. `#105 <https://github.com/pyexcel/pyexcel/issues/105>`_, remove gease from\n   setup_requires, introduced by 0.5.5.\n#. removed testing against python 2.6\n#. `#103 <https://github.com/pyexcel/pyexcel/issues/103>`_, include license file\n   in manifest.in, meaning license file will appear in the released tar ball.\n\n0.5.4 - 27.09.2017\n--------------------------------------------------------------------------------\n\n**fixed**\n\n#. `#100 <https://github.com/pyexcel/pyexcel/issues/100>`_, sheet.to_dict() gets\n   out of range error because there is only one row.\n\n**updated**\n\n#. updated the baseline of pyexcel-io to 0.5.1.\n\n0.5.3 - 01-08-2017\n--------------------------------------------------------------------------------\n\n**added**\n\n#. `#95 <https://github.com/pyexcel/pyexcel/issues/95>`_, respect the order of\n   records in iget_records, isave_as and save_as.\n#. `#97 <https://github.com/pyexcel/pyexcel/issues/97>`_, new feature to allow\n   intuitive initialization of pyexcel.book.\n\n0.5.2 - 26-07-2017\n--------------------------------------------------------------------------------\n\n**updated**\n\n#. embeded the enabler for pyexcel-htmlr. http source does not support text/html\n   as mime type.\n\n0.5.1 - 12.06.2017\n--------------------------------------------------------------------------------\n\n**updated**\n\n#. support saving sheetstream and bookstream to database targets. this is needed\n   for pyexcel-webio and its downstream projects.\n\n0.5.0 - 19.06.2017\n--------------------------------------------------------------------------------\n\n**added**\n\n#. sheet.top() and sheet.top_left() for data browsing\n#. add html as default rich display in jupyter notebook when pyexcel-text and\n   pyexcel-chart is installed\n#. add svg as default rich display in jupyter notebook when pyexcel-chart and\n   one of its implementation plugin(pyexcel-pygal, etc.) are is installed\n#. new dictionary source supported: a dictionary of key value pair could be read\n   into a sheet.\n#. added dynamic external plugin loading. meaning if a pyexcel plugin is\n   installed, it will be loaded implicitly. and this change would remove\n   unnecessary info log for those who do not use pyexcel-text and pyexcel-gal\n#. save_book_as before 0.5.0 becomes isave_book_as and save_book_as in 0.5.0\n   convert bookstream to book before saving.\n#. `#83 <https://github.com/pyexcel/pyexcel/issues/83>`_, file closing mechanism\n   is enfored. free_resource is added and it should be called when iget_array,\n   iget_records, isave_as and/or isave_book_as are used.\n\n**updated**\n\n#. array is passed to pyexcel.sheet as reference. it means your array data will\n   be modified.\n\n**removed**\n\n#. pyexcel.writer and pyexcel.bookwriter were removed\n#. pyexcel.load_book_from_sql and pyexcel.load_from_sql were removed\n#. pyexcel.deprecated.load_from_query_sets,\n   pyexcel.deprecated.load_book_from_django_models and\n   pyexcel.deprecated.load_from_django_model were removed\n#. removed plugin loading code and lml is used instead\n\n0.4.5 - 17.03.2017\n--------------------------------------------------------------------------------\n\n**updated**\n\n#. `#80 <https://github.com/pyexcel/pyexcel/issues/80>`_: remove pyexcel-chart\n   import from v0.4.x\n\n0.4.4 - 06.02.2017\n--------------------------------------------------------------------------------\n\n**updated**\n\n#. `#68 <https://github.com/pyexcel/pyexcel/issues/68>`_: regression\n   save_to_memory() should have returned a stream instance which has been reset\n   to zero if possible. the exception is sys.stdout, which cannot be reset.\n#. `#74 <https://github.com/pyexcel/pyexcel/issues/74>`_: not able to handle\n   decimal.decimal\n\n**removed**\n\n#. remove get_{{file_type}}_stream functions from pyexcel.sheet and pyexcel.book\n   introduced since 0.4.3.\n\n0.4.3 - 26.01.2017\n--------------------------------------------------------------------------------\n\n**added**\n\n#. '.stream' attribute are attached to `~pyexcel.sheet` and `~pyexcel.book` to\n   get direct access the underneath stream in responding to file type\n   attributes, such as sheet.xls. it helps provide a custom stream to external\n   world, for example, sheet.stream.csv gives a text stream that contains csv\n   formatted data. book.stream.xls returns a xls format data in a byte stream.\n\n**updated**\n\n#. better error reporting when an unknown parameters or unsupported file types\n   were given to the signature functions.\n\n0.4.2 - 17.01.2017\n--------------------------------------------------------------------------------\n\n**updated**\n\n#. raise exception if the incoming sheet does not have column names. in other\n   words, only sheet with column names could be saved to database. sheet with\n   row names cannot be saved. the alternative is to transpose the sheet, then\n   name_columns_by_row and then save.\n#. fix iget_records where a non-uniform content should be given, e.g. [[\"x\",\n   \"y\"], [1, 2], [3]], some record would become non-uniform, e.g. key 'y' would\n   be missing from the second record.\n#. `skip_empty_rows` is applicable when saving a python data structure to\n   another data source. for example, if your array contains a row which is\n   consisted of empty string, such as ['', '', '' ... ''], please specify\n   `skip_empty_rows=false` in order to preserve it. this becomes subtle when you\n   try save a python dictionary where empty rows is not easy to be spotted.\n#. `#69 <https://github.com/pyexcel/pyexcel/issues/69>`_: better documentation\n   for save_book_as.\n\n0.4.1 - 23.12.2016\n--------------------------------------------------------------------------------\n\n**updated**\n\n#. `#68 <https://github.com/pyexcel/pyexcel/issues/68>`_: regression\n   save_to_memory() should have returned a stream instance.\n\n0.4.0 - 22.12.2016\n--------------------------------------------------------------------------------\n\n**added**\n\n#. `flask-excel#19 <https://github.com/pyexcel/flask-excel/issues/19>`_ allow\n   sheet_name parameter\n#. `pyexcel-xls#11 <https://github.com/pyexcel/pyexcel-xls/issues/11>`_\n   case-insensitive for file_type. `xls` and `xls` are treated in the same way\n\n**updated**\n\n#. `#66 <https://github.com/pyexcel/pyexcel/issues/66>`_: `export_columns` is\n   ignored\n#. update dependency on pyexcel-io v0.3.0\n\n0.3.3 - 07.11.2016\n--------------------------------------------------------------------------------\n\n**updated**\n\n#. `#63 <https://github.com/pyexcel/pyexcel/issues/63>`_: cannot display empty\n   sheet(hence book with empty sheet) as texttable\n\n0.3.2 - 02.11.2016\n--------------------------------------------------------------------------------\n\n**updated**\n\n#. `#62 <https://github.com/pyexcel/pyexcel/issues/62>`_: optional module import\n   error become visible.\n\n0.3.0 - 28.10.2016\n--------------------------------------------------------------------------------\n\n**added:**\n\n#. file type setters for sheet and book, and its documentation\n#. `iget_records` returns a generator for a list of records and should have\n   better memory performance, especially dealing with large csv files.\n#. `iget_array` returns a generator for a list of two dimensional array and\n   should have better memory performance, especially dealing with large csv\n   files.\n#. enable pagination support, and custom row renderer via pyexcel-io v0.2.3\n\n**updated**\n\n#. take `isave_as` out from `save_as`. hence two functions are there for save a\n   sheet as\n#. `#60 <https://github.com/pyexcel/pyexcel/issues/60>`_: encode 'utf-8' if the\n   console is of ascii encoding.\n#. `#59 <https://github.com/pyexcel/pyexcel/issues/59>`_: custom row renderer\n#. `#56 <https://github.com/pyexcel/pyexcel/issues/56>`_: set cell value does\n   not work\n#. pyexcel.transpose becomes `pyexcel.sheets.transpose`\n#. iterator functions of `pyexcel.sheet` were converted to generator functions\n\n   * `pyexcel.sheet.enumerate()`\n   * `pyexcel.sheet.reverse()`\n   * `pyexcel.sheet.vertical()`\n   * `pyexcel.sheet.rvertical()`\n   * `pyexcel.sheet.rows()`\n   * `pyexcel.sheet.rrows()`\n   * `pyexcel.sheet.columns()`\n   * `pyexcel.sheet.rcolumns()`\n   * `pyexcel.sheet.named_rows()`\n   * `pyexcel.sheet.named_columns()`\n\n#. `~pyexcel.sheet.save_to_memory` and `~pyexcel.book.save_to_memory` return the\n   actual content. no longer they will return a io object hence you cannot call\n   getvalue() on them.\n\n**removed:**\n\n#. `content` and `out_file` as function parameters to the signature functions\n   are no longer supported.\n#. sourcefactory and rendererfactory are removed\n#. the following methods are removed\n\n   * `pyexcel.to_array`\n   * `pyexcel.to_dict`\n   * `pyexcel.utils.to_one_dimensional_array`\n   * `pyexcel.dict_to_array`\n   * `pyexcel.from_records`\n   * `pyexcel.to_records`\n\n#. `pyexcel.sheet.filter` has been re-implemented and all filters were removed:\n\n   * `pyexcel.filters.columnindexfilter`\n   * `pyexcel.filters.columnfilter`\n   * `pyexcel.filters.rowfilter`\n   * `pyexcel.filters.evencolumnfilter`\n   * `pyexcel.filters.oddcolumnfilter`\n   * `pyexcel.filters.evenrowfilter`\n   * `pyexcel.filters.oddrowfilter`\n   * `pyexcel.filters.rowindexfilter`\n   * `pyexcel.filters.singlecolumnfilter`\n   * `pyexcel.filters.rowvaluefilter`\n   * `pyexcel.filters.namedrowvaluefilter`\n   * `pyexcel.filters.columnvaluefilter`\n   * `pyexcel.filters.namedcolumnvaluefilter`\n   * `pyexcel.filters.singlerowfilter`\n\n#. the following functions have been removed\n\n   * `add_formatter`\n   * `remove_formatter`\n   * `clear_formatters`\n   * `freeze_formatters`\n   * `add_filter`\n   * `remove_filter`\n   * `clear_filters`\n   * `freeze_formatters`\n\n#. `pyexcel.sheet.filter` has been re-implemented and all filters were removed:\n\n   * pyexcel.formatters.sheetformatter\n\n\n0.2.5 - 31.08.2016\n--------------------------------------------------------------------------------\n\n**updated:**\n\n#. `#58 <https://github.com/pyexcel/pyexcel/issues/58>`_: texttable should have\n   been made as compulsory requirement\n\n0.2.4 - 14.07.2016\n--------------------------------------------------------------------------------\n\n**updated:**\n\n#. for python 2, writing to sys.stdout by pyexcel-cli raise ioerror.\n\n0.2.3 - 11.07.2016\n--------------------------------------------------------------------------------\n\n**updated:**\n\n#. for python 3, do not seek 0 when saving to memory if sys.stdout is passed on.\n   hence, adding support for sys.stdin and sys.stdout.\n\n0.2.2 - 01.06.2016\n--------------------------------------------------------------------------------\n\n**updated:**\n\n#. explicit imports, no longer needed\n#. depends on latest setuptools 18.0.1\n#. notimplementederror will be raised if parameters to core functions are not\n   supported, e.g. get_sheet(cannot_find_me_option=\"will be thrown out as\n   notimplementederror\")\n\n0.2.1 - 23.04.2016\n--------------------------------------------------------------------------------\n\n**added:**\n\n#. add pyexcel-text file types as attributes of pyexcel.sheet and pyexcel.book,\n   related to `#31 <https://github.com/pyexcel/pyexcel/issues/31>`__\n#. auto import pyexcel-text if it is pip installed\n\n**updated:**\n\n#. code refactoring done for easy addition of sources.\n#. bug fix `#29 <https://github.com/pyexcel/pyexcel/issues/29>`__, even if the\n   format is a string it is displayed as a float\n#. pyexcel-text is no longer a plugin to pyexcel-io but to pyexcel.sources, see\n   `pyexcel-text#22 <https://github.com/pyexcel/pyexcel-text/issues/22>`__\n\n**removed:**\n\n#. pyexcel.presentation is removed. no longer the internal decorate @outsource\n   is used. related to `#31 <https://github.com/pyexcel/pyexcel/issues/31>`_\n\n0.2.0 - 17.01.2016\n--------------------------------------------------------------------------------\n\n**updated**\n\n#. adopt pyexcel-io yield key word to return generator as content\n#. pyexcel.save_as and pyexcel.save_book_as get performance improvements\n\n0.1.7 - 03.07.2015\n--------------------------------------------------------------------------------\n\n**added**\n\n#. support pyramid-excel which does the database commit on its own.\n\n0.1.6 - 13.06.2015\n--------------------------------------------------------------------------------\n\n**added**\n\n#. get excel data from a http url\n\n0.0.13 - 07.02.2015\n--------------------------------------------------------------------------------\n\n**added**\n\n#. support django\n#. texttable as default renderer\n\n0.0.12 - 25.01.2015\n--------------------------------------------------------------------------------\n\n**added**\n\n#. added sqlalchemy support\n\n0.0.10 - 15.12.2015\n--------------------------------------------------------------------------------\n\n**added**\n\n#. added csvz and tsvz format\n\n0.0.4 - 12.10.2014\n--------------------------------------------------------------------------------\n\n**updated**\n\n#. support python 3\n\n0.0.1 - 14.09.2014\n--------------------------------------------------------------------------------\n\n**features:**\n\n#. read and write csv, ods, xls, xlsx and xlsm files(which are referred later as\n   excel files)\n#. various iterators for the reader\n#. row and column filters for the reader\n#. utilities to get array and dictionary out from excel files.\n#. cookbok receipes for some common and simple usage of this library.\n\n\n\n",
  "docs_url": "https://pythonhosted.org/pyexcel/",
  "keywords": "python,tsv,tsvzcsv,csvz,xls,xlsx,ods",
  "license": "new bsd",
  "name": "pyexcel",
  "package_url": "https://pypi.org/project/pyexcel/",
  "project_url": "https://pypi.org/project/pyexcel/",
  "project_urls": {
    "Download": "https://github.com/pyexcel/pyexcel/archive/0.7.0.tar.gz",
    "Homepage": "https://github.com/pyexcel/pyexcel"
  },
  "release_url": "https://pypi.org/project/pyexcel/0.7.0/",
  "requires_dist": [
    "chardet",
    "lml (>=0.0.4)",
    "pyexcel-io (>=0.6.2)",
    "texttable (>=0.8.2)",
    "pyexcel-ods3 (>=0.6.0) ; extra == 'ods'",
    "pyexcel-xls (>=0.6.0) ; extra == 'xls'",
    "pyexcel-xlsx (>=0.6.0) ; extra == 'xlsx'"
  ],
  "requires_python": ">=3.6",
  "summary": "a wrapper library that provides one api to read, manipulate and writedata in different excel formats",
  "version": "0.7.0",
  "releases": [],
  "developers": [
    "info@pyexcel.org"
  ],
  "kwds": "pyexcel_sheet1 csv _csvtotable csvtotable _xlsxwriter",
  "license_kwds": "new bsd",
  "libtype": "pypi",
  "id": "pypi_pyexcel",
  "homepage": "https://github.com/pyexcel/pyexcel",
  "release_count": 52,
  "dependency_ids": [
    "pypi_chardet",
    "pypi_lml",
    "pypi_pyexcel_io",
    "pypi_pyexcel_ods3",
    "pypi_pyexcel_xls",
    "pypi_pyexcel_xlsx",
    "pypi_texttable"
  ]
}
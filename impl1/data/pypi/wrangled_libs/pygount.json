{
  "classifiers": [
    "development status :: 5 - production/stable",
    "environment :: console",
    "intended audience :: developers",
    "license :: osi approved :: bsd license",
    "license :: other/proprietary license",
    "natural language :: english",
    "operating system :: os independent",
    "programming language :: python :: 3",
    "programming language :: python :: 3 :: only",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: software development"
  ],
  "description": "[![pypi](https://img.shields.io/pypi/v/pygount)](https://pypi.org/project/pygount/)\n[![python versions](https://img.shields.io/pypi/pyversions/pygount.svg)](https://www.python.org/downloads/)\n[![build status](https://github.com/roskakori/pygount/actions/workflows/build.yml/badge.svg)](https://github.com/roskakori/pygount/actions/workflows/build.yml)\n[![test coverage](https://img.shields.io/coveralls/github/roskakori/pygount)](https://coveralls.io/r/roskakori/pygount?branch=master)\n[![black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)\n[![license](https://img.shields.io/github/license/roskakori/pygount)](https://opensource.org/licenses/bsd-3-clause)\n\n# pygount\n\npygount is a command line tool to scan folders for source code files and\ncount the number of source code lines in it. it is similar to tools like\n[sloccount](https://www.dwheeler.com/sloccount/) and\n[cloc](https://github.com/aldanial/cloc) but uses the\n[pygments](https://pygments.org/)\npackage to analyze the source code and consequently can analyze any\n[programming language supported by pygments](https://pygments.org/languages/).\n\nthe name is a combination of pygments and count.\n\npygount is open source and distributed under the\n[bsd license](https://opensource.org/licenses/bsd-3-clause). the source\ncode is available from https://github.com/roskakori/pygount.\n\n## quickstart\n\nfor installation run\n\n```bash\n$ pip install pygount\n```\n\nto get a list of line counts for a projects stored in a certain folder run for\nexample:\n\n```bash\n$ pygount ~/projects/example\n```\n\nto limit the analysis to certain file types identified by their suffix:\n\n```bash\n$ pygount --suffix=cfg,py,yml ~/projects/example\n```\n\nto get a summary of each programming language with sum counts and percentage:\n\n```bash\n$ pygount --format=summary ~/projects/example\n```\n\nto analyze a remote git repository directly without having to clone it first:\n\n```bash\n$ pygount --format=summary https://github.com/roskakori/pygount.git\n```\n\nyou can pass a specific revision at the end of the remote url:\n\n```bash\n$ pygount --format=summary https://github.com/roskakori/pygount.git/v1.5.1\n```\n\nthis example results in the following summary output:\n\n```\n\u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2513\n\u2503 language         \u2503 files \u2503     % \u2503 code \u2503    % \u2503 comment \u2503    % \u2503\n\u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2529\n\u2502 python           \u2502    18 \u2502  47.4 \u2502 2132 \u2502 63.6 \u2502     418 \u2502 12.5 \u2502\n\u2502 toml             \u2502     2 \u2502   5.3 \u2502 1204 \u2502 82.7 \u2502       1 \u2502  0.1 \u2502\n\u2502 restructuredtext \u2502     9 \u2502  23.7 \u2502  566 \u2502 64.8 \u2502       1 \u2502  0.1 \u2502\n\u2502 markdown         \u2502     3 \u2502   7.9 \u2502   53 \u2502 49.1 \u2502       0 \u2502  0.0 \u2502\n\u2502 batchfile        \u2502     1 \u2502   2.6 \u2502   24 \u2502 68.6 \u2502       1 \u2502  2.9 \u2502\n\u2502 text only        \u2502     2 \u2502   5.3 \u2502   24 \u2502 82.8 \u2502       0 \u2502  0.0 \u2502\n\u2502 bash             \u2502     2 \u2502   5.3 \u2502   12 \u2502 80.0 \u2502       3 \u2502 20.0 \u2502\n\u2502 makefile         \u2502     1 \u2502   2.6 \u2502    9 \u2502 45.0 \u2502       7 \u2502 35.0 \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 sum              \u2502    38 \u2502 100.0 \u2502 4024 \u2502 68.4 \u2502     431 \u2502  7.3 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n```\n\nplenty of tools can post process sloc information, for example the\n[sloccount plug-in](https://wiki.jenkins-ci.org/display/jenkins/sloccount+plugin)\nfor the [jenkins](https://jenkins.io/) continuous integration server.\n\na popular format for such tools is the xml format used by cloc, which pygount\nalso supports and can store in an output file:\n\n```bash\n$ pygount --format=cloc-xml --out=cloc.xml ~/projects/example\n```\n\nto get a short description of all available command line options use:\n\n```bash\n$ pygount --help\n```\n\nfor more information and examples read the documentation chapter on\n[usage](https://pygount.readthedocs.io/en/latest/usage.html).\n\n## contributions\n\nto report bugs, visit the\n[issue tracker](https://github.com/roskakori/pygount/issues).\n\nin case you want to play with the source code or contribute improvements, see\n[contributing](https://pygount.readthedocs.io/en/latest/contributing.html).\n\n## version history\n\nsee [changes](https://pygount.readthedocs.io/en/latest/changes.html).\n",
  "docs_url": null,
  "keywords": "code analysis,count,sloc",
  "license": "bsd",
  "name": "pygount",
  "package_url": "https://pypi.org/project/pygount/",
  "project_url": "https://pypi.org/project/pygount/",
  "project_urls": {
    "Changes": "https://pygount.readthedocs.io/en/latest/changes.html",
    "Documentation": "https://pygount.readthedocs.io",
    "Homepage": "https://github.com/roskakori/pygount",
    "Issue Tracker": "https://github.com/roskakori/pygount/issues",
    "Repository": "https://github.com/roskakori/pygount.git"
  },
  "release_url": "https://pypi.org/project/pygount/1.6.1/",
  "requires_dist": [
    "pygments (>=2,<3)",
    "chardet (>=5,<6)",
    "rich (>=9,<14)",
    "gitpython (>=3.1.31,<4.0.0)"
  ],
  "requires_python": ">=3.8,<4",
  "summary": "count source lines of code (sloc) using pygments",
  "version": "1.6.1",
  "releases": [],
  "developers": [
    "roskakori@users.sourceforge.net",
    "thomas_aglassinger"
  ],
  "kwds": "pygount badge py pyversions workflows",
  "license_kwds": "bsd",
  "libtype": "pypi",
  "id": "pypi_pygount",
  "homepage": "https://github.com/roskakori/pygount",
  "release_count": 22,
  "dependency_ids": [
    "pypi_chardet",
    "pypi_gitpython",
    "pypi_pygments",
    "pypi_rich"
  ]
}
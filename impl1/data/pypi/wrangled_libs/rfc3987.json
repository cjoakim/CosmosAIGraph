{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: developers",
    "license :: osi approved :: gnu general public license v3 or later (gplv3+)",
    "operating system :: os independent",
    "programming language :: python",
    "programming language :: python :: 2",
    "programming language :: python :: 2.6",
    "programming language :: python :: 2.7",
    "programming language :: python :: 3",
    "programming language :: python :: 3.2",
    "programming language :: python :: 3.3",
    "programming language :: python :: 3.4",
    "programming language :: python :: 3.5",
    "programming language :: python :: 3.6",
    "topic :: internet"
  ],
  "description": "this module provides regular expressions according to `rfc 3986 \"uniform\nresource identifier (uri): generic syntax\"\n<http://tools.ietf.org/html/rfc3986>`_ and `rfc 3987 \"internationalized\nresource identifiers (iris)\" <http://tools.ietf.org/html/rfc3987>`_, and\nutilities for composition and relative resolution of references.\n\n\napi\n---\n\n**match** (string, rule='iri_reference')\n    convenience function for checking if `string` matches a specific rule.\n\n    returns a match object or none::\n\n        >>> assert match('%c7x', 'pct_encoded') is none\n        >>> assert match('%c7', 'pct_encoded')\n        >>> assert match('%c7', 'pct_encoded')\n\n\n\n**parse** (string, rule='iri_reference')\n    parses `string` according to `rule` into a dict of subcomponents.\n\n    if `rule` is none, parse an iri_reference `without validation\n    <http://tools.ietf.org/html/rfc3986#appendix-b>`_.\n\n    if regex_ is available, any rule is supported; with re_, `rule` must be\n    'iri_reference' or some special case thereof ('iri', 'absolute_iri',\n    'irelative_ref', 'irelative_part', 'uri_reference', 'uri', 'absolute_uri',\n    'relative_ref', 'relative_part'). ::\n\n        >>> d = parse('http://tools.ietf.org/html/rfc3986#appendix-a',\n        ...           rule='uri')\n        >>> assert all([ d['scheme'] == 'http',\n        ...              d['authority'] == 'tools.ietf.org',\n        ...              d['path'] == '/html/rfc3986',\n        ...              d['query'] == none,\n        ...              d['fragment'] == 'appendix-a' ])\n\n\n\n**compose** (\\*\\*parts)\n    returns an uri composed_ from named parts.\n\n    .. _composed: http://tools.ietf.org/html/rfc3986#section-5.3\n\n\n**resolve** (base, uriref, strict=true, return_parts=false)\n    resolves_ an `uri reference` relative to a `base` uri.\n\n    `test cases <http://tools.ietf.org/html/rfc3986#section-5.4>`_::\n\n        >>> base = resolve.test_cases_base\n        >>> for relative, resolved in resolve.test_cases.items():\n        ...     assert resolve(base, relative) == resolved\n\n    if `return_parts` is true, returns a dict of named parts instead of\n    a string.\n\n    examples::\n\n        >>> assert resolve('urn:rootless', '../../name') == 'urn:name'\n        >>> assert resolve('urn:root/less', '../../name') == 'urn:/name'\n        >>> assert resolve('http://a/b', 'http:g') == 'http:g'\n        >>> assert resolve('http://a/b', 'http:g', strict=false) == 'http://a/g'\n\n    .. _resolves: http://tools.ietf.org/html/rfc3986#section-5.2\n\n\n\n**patterns**\n    a dict of regular expressions with useful group names.\n    compilable (with regex_ only) without need for any particular compilation\n    flag.\n\n**[bmp_][u]patterns[_no_names]**\n    alternative versions of `patterns`.\n    [u]nicode strings without group names for the re_ module.\n    bmp only for narrow builds.\n\n**get_compiled_pattern** (rule, flags=0)\n    returns a compiled pattern object for a rule name or template string.\n\n    usage for validation::\n\n        >>> uri = get_compiled_pattern('^%(uri)s$')\n        >>> assert uri.match('http://tools.ietf.org/html/rfc3986#appendix-a')\n        >>> assert not get_compiled_pattern('^%(relative_ref)s$').match('#f#g')\n        >>> from unicodedata import lookup\n        >>> smp = 'urn:' + lookup('old italic letter a')  # u+00010300\n        >>> assert not uri.match(smp)\n        >>> m = get_compiled_pattern('^%(iri)s$').match(smp)\n\n    on narrow builds, non-bmp characters are (incorrectly) excluded::\n\n        >>> assert narrow_build == (not m)\n\n    for parsing, some subcomponents are captured in named groups (*only if*\n    regex_ is available, otherwise see `parse`)::\n\n        >>> match = uri.match('http://tools.ietf.org/html/rfc3986#appendix-a')\n        >>> d = match.groupdict()\n        >>> if regex:\n        ...     assert all([ d['scheme'] == 'http',\n        ...                  d['authority'] == 'tools.ietf.org',\n        ...                  d['path'] == '/html/rfc3986',\n        ...                  d['query'] == none,\n        ...                  d['fragment'] == 'appendix-a' ])\n\n        >>> for r in patterns.keys():\n        ...     assert get_compiled_pattern(r)\n\n\n\n**format_patterns** (\\*\\*names)\n    returns a dict of patterns (regular expressions) keyed by\n    `rule names for uris`_ and `rule names for iris`_.\n\n    see also the module level dicts of patterns, and `get_compiled_pattern`.\n\n    to wrap a rule in a named capture group, pass it as keyword argument:\n    rule_name='group_name'. by default, the formatted patterns contain no\n    named groups.\n\n    patterns are `str` instances (be it in python 2.x or 3.x) containing ascii\n    characters only.\n\n    caveats:\n\n      - with re_, named capture groups cannot occur on multiple branches of an\n        alternation\n\n      - with re_ before python 3.3, ``\\u`` and ``\\u`` escapes must be\n        preprocessed (see `issue3665 <http://bugs.python.org/issue3665>`_)\n\n      - on narrow builds, character ranges beyond bmp are not supported\n\n    .. _rule names for uris: http://tools.ietf.org/html/rfc3986#appendix-a\n    .. _rule names for iris: http://tools.ietf.org/html/rfc3987#section-2.2\n\n\n\ndependencies\n------------\n\nsome features require regex_.\n\nthis package's docstrings are tested on python 2.6, 2.7, and 3.2 to 3.6.\nnote that in python<=3.2, characters beyond the basic multilingual plane are\nnot supported on narrow builds (see `issue12729\n<http://bugs.python.org/issue12729>`_).\n\n\nrelease notes\n-------------\n\nversion 1.3.8:\n\n- fixed deprecated escape sequence\n\nversion 1.3.6:\n\n- fixed a bug in ipv6 pattern:\n\n  >>> assert match('::0:0:0:0:0.0.0.0', 'ipv6address')\n\nversion 1.3.4:\n\n- allowed for lower case percent encoding\n\nversion 1.3.3:\n\n- fixed a bug in `resolve` which left \"../\" at the beginning of some paths\n\nversion 1.3.2:\n\n- convenience function `match`\n- patterns restricted to the bmp for narrow builds\n- adapted doctests for python 3.3\n- compatibility with python 2.6 (thanks to thijs janssen)\n\nversion 1.3.1:\n\n- some re_ compatibility: get_compiled_pattern, parse\n- dropped regex_ from setup.py requirements\n\nversion 1.3.0:\n\n- python 3.x compatibility\n- format_patterns\n\nversion 1.2.1:\n\n- compose, resolve\n\n\n.. _re: http://docs.python.org/library/re\n.. _regex: http://pypi.python.org/pypi/regex\n\n\nsupport\n-------\nthis is free software. you may show your appreciation with a `donation`_.\n\n.. _donation: http://danielgerber.net/\u00a4#thanks-for-python-package-rfc3987\n\n\n\n",
  "docs_url": null,
  "keywords": "uri iri url rfc3986 rfc3987 validation",
  "license": "gnu gplv3+",
  "name": "rfc3987",
  "package_url": "https://pypi.org/project/rfc3987/",
  "project_url": "https://pypi.org/project/rfc3987/",
  "project_urls": {
    "Download": "https://github.com/dgerber/rfc3987",
    "Homepage": "http://pypi.python.org/pypi/rfc3987"
  },
  "release_url": "https://pypi.org/project/rfc3987/1.3.8/",
  "requires_dist": [],
  "requires_python": "",
  "summary": "parsing and validation of uris (rfc 3986) and iris (rfc 3987)",
  "version": "1.3.8",
  "releases": [],
  "developers": [
    "daniel.g.gerber@gmail.com",
    "daniel_gerber"
  ],
  "kwds": "iri_reference uri_reference _regex irelative_ref regex_",
  "license_kwds": "gnu gplv3+",
  "libtype": "pypi",
  "id": "pypi_rfc3987",
  "homepage": "http://pypi.python.org/pypi/rfc3987",
  "release_count": 11,
  "dependency_ids": []
}
{
  "classifiers": [
    "development status :: 3 - alpha",
    "intended audience :: developers",
    "intended audience :: science/research",
    "operating system :: macos",
    "operating system :: microsoft :: windows",
    "operating system :: posix",
    "operating system :: unix",
    "programming language :: python",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: scientific/engineering",
    "topic :: software development"
  ],
  "description": "<p align=\"center\"><img width=50% src=\"https://alteryx-oss-web-images.s3.amazonaws.com/woodwork.svg\" alt=\"woodwork\" /></p>\n<p align=\"center\">\n    <a href=\"https://github.com/alteryx/woodwork/actions/workflows/tests_with_latest_deps.yaml\" alt=\"tests\" target=\"_blank\">\n        <img src=\"https://github.com/alteryx/woodwork/actions/workflows/tests_with_latest_deps.yaml/badge.svg?branch=main\" alt=\"tests\" />\n    </a>\n    <a href=\"https://codecov.io/gh/alteryx/woodwork\">\n        <img src=\"https://codecov.io/gh/alteryx/woodwork/branch/main/graph/badge.svg?token=kjckmrebdp\"/>\n    </a>\n    <a href=\"https://woodwork.alteryx.com/en/latest/?badge=stable\" target=\"_blank\">\n        <img src=\"https://readthedocs.com/projects/feature-labs-inc-datatables/badge/?version=stable\" alt=\"documentation status\" />\n    </a>\n    <a href=\"https://badge.fury.io/py/woodwork\" target=\"_blank\">\n        <img src=\"https://badge.fury.io/py/woodwork.svg?maxage=2592000\" alt=\"pypi version\" />\n    </a>\n    <a href=\"https://anaconda.org/conda-forge/woodwork\" target=\"_blank\">\n        <img src=\"https://anaconda.org/conda-forge/woodwork/badges/version.svg\" alt=\"anaconda version\" />\n    </a>\n    <a href=\"https://pepy.tech/project/woodwork\" target=\"_blank\">\n        <img src=\"https://static.pepy.tech/badge/woodwork/month\" alt=\"pypi downloads\" />\n    </a>\n</p>\n<hr>\n\nwoodwork provides a common typing namespace for using your existing dataframes in featuretools, evalml, and general ml. a woodwork\ndataframe stores the physical, logical, and semantic data types present in the data. in addition, it can store metadata about the data, allowing you to store specific information you might need for your application.\n\n## installation\n\ninstall with pip:\n\n```bash\npython -m pip install woodwork\n```\n\nor from the conda-forge channel on [conda](https://anaconda.org/conda-forge/woodwork):\n\n```bash\nconda install -c conda-forge woodwork\n```\n\n### add-ons\n**update checker** - receive automatic notifications of new woodwork releases\n```bash\npython -m pip install \"woodwork[updater]\"\n```\n\n## example\n\nbelow is an example of using woodwork. in this example, a sample dataset of order items is used to create a woodwork `dataframe`, specifying the `logicaltype` for five of the columns.\n\n```python\nimport pandas as pd\nimport woodwork as ww\n\ndf = pd.read_csv(\"https://oss.alteryx.com/datasets/online-retail-logs-2018-08-28.csv\")\ndf.ww.init(name='retail')\ndf.ww.set_types(logical_types={\n    'quantity': 'integer',\n    'customer_name': 'personfullname',\n    'country': 'categorical',\n    'order_id': 'categorical',\n    'description': 'naturallanguage',\n})\ndf.ww\n```\n\n```\n                   physical type     logical type semantic tag(s)\ncolumn\norder_id                category      categorical    ['category']\nproduct_id              category      categorical    ['category']\ndescription               string  naturallanguage              []\nquantity                   int64          integer     ['numeric']\norder_date        datetime64[ns]         datetime              []\nunit_price               float64           double     ['numeric']\ncustomer_name             string   personfullname              []\ncountry                 category      categorical    ['category']\ntotal                    float64           double     ['numeric']\ncancelled                   bool          boolean              []\n```\n\nwe now have initialized woodwork on the dataframe with the specified logical types assigned. for columns that did not have a specified logical type value, woodwork has automatically inferred the logical type based on the underlying data. additionally, woodwork has automatically assigned semantic tags to some of the columns, based on the inferred or assigned logical type.\n\nif we wanted to do further analysis on only the columns in this table that have a logical type of `boolean` or a semantic tag of `numeric` we can simply select those columns and access a dataframe containing just those columns:\n\n```python\nfiltered_df = df.ww.select(include=['boolean', 'numeric'])\nfiltered_df\n```\n\n```\n    quantity  unit_price   total  cancelled\n0          6      4.2075  25.245      false\n1          6      5.5935  33.561      false\n2          8      4.5375  36.300      false\n3          6      5.5935  33.561      false\n4          6      5.5935  33.561      false\n..       ...         ...     ...        ...\n95         6      4.2075  25.245      false\n96       120      0.6930  83.160      false\n97        24      0.9075  21.780      false\n98        24      0.9075  21.780      false\n99        24      0.9075  21.780      false\n```\n\nas you can see, woodwork makes it easy to manage typing information for your data, and provides simple interfaces to access only the data you need based on the logical types or semantic tags. please refer to the [woodwork documentation](https://woodwork.alteryx.com/) for more detail on working with a woodwork dataframe.\n\n## support\nthe woodwork community is happy to provide support to users of woodwork. project support can be found in four places depending on the type of question:\n1. for usage questions, use [stack overflow](https://stackoverflow.com/questions/tagged/woodwork) with the `woodwork` tag.\n2. for bugs, issues, or feature requests start a [github issue](https://github.com/alteryx/woodwork/issues).\n3. for discussion regarding development on the core library, use [slack](https://join.slack.com/t/alteryx-oss/shared_invite/zt-182tyvuxv-nzin6eicef8tbziukp0bna).\n4. for everything else, the core developers can be reached by email at open_source_support@alteryx.com\n\n## built at alteryx\n\n**woodwork** is an open source project built by [alteryx](https://www.alteryx.com). to see the other open source projects we\u2019re working on visit [alteryx open source](https://www.alteryx.com/open-source). if building impactful data science pipelines is important to you or your business, please get in touch.\n\n<p align=\"center\">\n  <a href=\"https://www.alteryx.com/open-source\">\n    <img src=\"https://alteryx-oss-web-images.s3.amazonaws.com/opensource_logo-01.png\" alt=\"alteryx open source\" width=\"800\"/>\n  </a>\n</p>\n",
  "docs_url": null,
  "keywords": "data science,machine learning,typing",
  "license": "bsd 3-clause license  copyright (c) 2019, alteryx, inc. all rights reserved.  redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:  * redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.  * redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.  * neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.  this software is provided by the copyright holders and contributors \"as is\" and any express or implied warranties, including, but not limited to, the implied warranties of merchantability and fitness for a particular purpose are disclaimed. in no event shall the copyright holder or contributors be liable for any direct, indirect, incidental, special, exemplary, or consequential damages (including, but not limited to, procurement of substitute goods or services; loss of use, data, or profits; or business interruption) however caused and on any theory of liability, whether in contract, strict liability, or tort (including negligence or otherwise) arising in any way out of the use of this software, even if advised of the possibility of such damage. ",
  "name": "woodwork",
  "package_url": "https://pypi.org/project/woodwork/",
  "project_url": "https://pypi.org/project/woodwork/",
  "project_urls": {
    "Changes": "https://woodwork.alteryx.com/en/latest/release_notes.html",
    "Chat": "https://join.slack.com/t/alteryx-oss/shared_invite/zt-182tyvuxv-NzIn6eiCEf8TBziuKp0bNA",
    "Documentation": "https://woodwork.alteryx.com",
    "Issue Tracker": "https://github.com/alteryx/woodwork/issues",
    "Source Code": "https://github.com/alteryx/woodwork/",
    "Twitter": "https://twitter.com/alteryxoss"
  },
  "release_url": "https://pypi.org/project/woodwork/0.27.0/",
  "requires_dist": [
    "pandas >=1.4.3",
    "scikit-learn >=0.22",
    "python-dateutil >=2.8.1",
    "scipy >=1.10.0",
    "importlib-resources >=5.10.0",
    "numpy <1.25.0,>=1.22.0",
    "woodwork[dask,spark,updater] ; extra == 'complete'",
    "dask[dataframe] >=2022.11.1 ; extra == 'dask'",
    "ruff >=0.1.6 ; extra == 'dev'",
    "pre-commit >=2.20.0 ; extra == 'dev'",
    "click <8.1.0,>=7.1.2 ; extra == 'dev'",
    "woodwork[dask,docs,spark,test] ; extra == 'dev'",
    "Sphinx ==5.1.1 ; extra == 'docs'",
    "nbsphinx ==0.8.9 ; extra == 'docs'",
    "pydata-sphinx-theme ==0.9.0 ; extra == 'docs'",
    "sphinx-inline-tabs ==2022.1.2b11 ; extra == 'docs'",
    "sphinx-copybutton ==0.5.0 ; extra == 'docs'",
    "myst-parser ==0.18.0 ; extra == 'docs'",
    "nbconvert ==6.5.0 ; extra == 'docs'",
    "ipython ==8.4.0 ; extra == 'docs'",
    "jupyter ==1.0.0 ; extra == 'docs'",
    "woodwork[dask,spark,test] ; extra == 'docs'",
    "pyspark >=3.2.2 ; extra == 'spark'",
    "pandas <2.0.0,>=1.4.3 ; extra == 'spark'",
    "numpy <1.24.0 ; extra == 'spark'",
    "pyarrow <13.0.0,>=4.0.1 ; extra == 'spark'",
    "pytest >=7.0.1 ; extra == 'test'",
    "pytest-cov >=2.10.1 ; extra == 'test'",
    "pytest-xdist >=2.1.0 ; extra == 'test'",
    "boto3 >=1.10.45 ; extra == 'test'",
    "moto[all] >=3.0.7 ; extra == 'test'",
    "smart-open >=5.0.0 ; extra == 'test'",
    "pyarrow <13.0.0,>=4.0.1 ; extra == 'test'",
    "alteryx-open-src-update-checker >=3.1.0 ; extra == 'updater'"
  ],
  "requires_python": "<4,>=3.8",
  "summary": "a data typing library for machine learning",
  "version": "0.27.0",
  "releases": [],
  "developers": [
    "open_source_support@alteryx.com"
  ],
  "kwds": "yaml svg alteryx tests_with_latest_deps badge",
  "license_kwds": "copyright liability liable negligence disclaimer",
  "libtype": "pypi",
  "id": "pypi_woodwork",
  "homepage": "",
  "release_count": 57,
  "dependency_ids": [
    "pypi_alteryx_open_src_update_checker",
    "pypi_boto3",
    "pypi_click",
    "pypi_dask",
    "pypi_importlib_resources",
    "pypi_ipython",
    "pypi_jupyter",
    "pypi_moto",
    "pypi_myst_parser",
    "pypi_nbconvert",
    "pypi_nbsphinx",
    "pypi_numpy",
    "pypi_pandas",
    "pypi_pre_commit",
    "pypi_pyarrow",
    "pypi_pydata_sphinx_theme",
    "pypi_pyspark",
    "pypi_pytest",
    "pypi_pytest_cov",
    "pypi_pytest_xdist",
    "pypi_python_dateutil",
    "pypi_ruff",
    "pypi_scikit_learn",
    "pypi_scipy",
    "pypi_smart_open",
    "pypi_sphinx",
    "pypi_sphinx_copybutton",
    "pypi_sphinx_inline_tabs",
    "pypi_woodwork"
  ]
}
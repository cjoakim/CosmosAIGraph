{
  "classifiers": [
    "development status :: 5 - production/stable",
    "license :: osi approved :: mit license",
    "programming language :: python",
    "programming language :: python :: 3",
    "programming language :: python :: 3 :: only",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9"
  ],
  "description": "# azure storage queues client library for python\n\nazure queue storage is a service for storing large numbers of messages that can be accessed from anywhere in the world via authenticated calls using http or https. a single queue message can be up to 64 kib in size, and a queue can contain millions of messages, up to the total capacity limit of a storage account.\n\ncommon uses of queue storage include:\n\n* creating a backlog of work to process asynchronously\n* passing messages between different parts of a distributed application\n\n[source code](https://github.com/azure/azure-sdk-for-python/tree/main/sdk/storage/azure-storage-queue/azure/storage/queue)\n| [package (pypi)](https://pypi.org/project/azure-storage-queue/)\n| [package (conda)](https://anaconda.org/microsoft/azure-storage/)\n| [api reference documentation](https://aka.ms/azsdk-python-storage-queue-ref)\n| [product documentation](https://docs.microsoft.com/azure/storage/)\n| [samples](https://github.com/azure/azure-sdk-for-python/tree/main/sdk/storage/azure-storage-queue/samples)\n\n## getting started\n\n### prerequisites\n* python 3.7 or later is required to use this package. for more details, please read our page on [azure sdk for python version support policy](https://github.com/azure/azure-sdk-for-python/wiki/azure-sdks-python-version-support-policy).\n* you must have an [azure subscription](https://azure.microsoft.com/free/) and an\n[azure storage account](https://docs.microsoft.com/azure/storage/common/storage-account-overview) to use this package.\n\n### install the package\ninstall the azure storage queues client library for python with [pip](https://pypi.org/project/pip/):\n\n```bash\npip install azure-storage-queue\n```\n\n### create a storage account\nif you wish to create a new storage account, you can use the\n[azure portal](https://docs.microsoft.com/azure/storage/common/storage-quickstart-create-account?tabs=azure-portal),\n[azure powershell](https://docs.microsoft.com/azure/storage/common/storage-quickstart-create-account?tabs=azure-powershell),\nor [azure cli](https://docs.microsoft.com/azure/storage/common/storage-quickstart-create-account?tabs=azure-cli):\n\n```bash\n# create a new resource group to hold the storage account -\n# if using an existing resource group, skip this step\naz group create --name my-resource-group --location westus2\n\n# create the storage account\naz storage account create -n my-storage-account-name -g my-resource-group\n```\n\n### create the client\nthe azure storage queues client library for python allows you to interact with three types of resources: the storage\naccount itself, queues, and messages. interaction with these resources starts with an instance of a [client](#clients).\nto create a client object, you will need the storage account's queue service endpoint url and a credential that allows\nyou to access the storage account:\n\n```python\nfrom azure.storage.queue import queueserviceclient\n\nservice = queueserviceclient(account_url=\"https://<my-storage-account-name>.queue.core.windows.net/\", credential=credential)\n```\n\n#### looking up the account url\nyou can find the storage account's queue service url using the\n[azure portal](https://docs.microsoft.com/azure/storage/common/storage-account-overview#storage-account-endpoints),\n[azure powershell](https://docs.microsoft.com/powershell/module/az.storage/get-azstorageaccount),\nor [azure cli](https://docs.microsoft.com/cli/azure/storage/account?view=azure-cli-latest#az-storage-account-show):\n\n```bash\n# get the queue service url for the storage account\naz storage account show -n my-storage-account-name -g my-resource-group --query \"primaryendpoints.queue\"\n```\n\n#### types of credentials\nthe `credential` parameter may be provided in a number of different forms, depending on the type of\n[authorization](https://docs.microsoft.com/azure/storage/common/storage-auth) you wish to use:\n1. to use a [shared access signature (sas) token](https://docs.microsoft.com/azure/storage/common/storage-sas-overview),\n   provide the token as a string. if your account url includes the sas token, omit the credential parameter.\n   you can generate a sas token from the azure portal under \"shared access signature\" or use one of the `generate_sas()`\n   functions to create a sas token for the storage account or queue:\n\n    ```python\n    from datetime import datetime, timedelta\n    from azure.storage.queue import queueserviceclient, generate_account_sas, resourcetypes, accountsaspermissions\n\n    sas_token = generate_account_sas(\n        account_name=\"<storage-account-name>\",\n        account_key=\"<account-access-key>\",\n        resource_types=resourcetypes(service=true),\n        permission=accountsaspermissions(read=true),\n        start=datetime.utcnow(),\n        expiry=datetime.utcnow() + timedelta(hours=1)\n    )\n\n    queue_service_client = queueserviceclient(account_url=\"https://<my_account_name>.queue.core.windows.net\", credential=sas_token)\n    ```\n\n2. to use a storage account [shared key](https://docs.microsoft.com/rest/api/storageservices/authenticate-with-shared-key/)\n   (aka account key or access key), provide the key as a string. this can be found in the azure portal under the \"access keys\"\n   section or by running the following azure cli command:\n\n    ```az storage account keys list -g myresourcegroup -n mystorageaccount```\n\n    use the key as the credential parameter to authenticate the client:\n    ```python\n    from azure.storage.queue import queueserviceclient\n    service = queueserviceclient(account_url=\"https://<my_account_name>.queue.core.windows.net\", credential=\"<account_access_key>\")\n    ```\n\n3. to use an [azure active directory (aad) token credential](https://docs.microsoft.com/azure/storage/common/storage-auth-aad),\n   provide an instance of the desired credential type obtained from the\n   [azure-identity](https://github.com/azure/azure-sdk-for-python/tree/main/sdk/identity/azure-identity#credentials) library.\n   for example, [defaultazurecredential](https://github.com/azure/azure-sdk-for-python/tree/main/sdk/identity/azure-identity#defaultazurecredential)\n   can be used to authenticate the client.\n\n   this requires some initial setup:\n   * [install azure-identity](https://github.com/azure/azure-sdk-for-python/tree/main/sdk/identity/azure-identity#install-the-package)\n   * [register a new aad application](https://docs.microsoft.com/azure/active-directory/develop/quickstart-register-app) and give permissions to access azure storage\n   * [grant access](https://docs.microsoft.com/azure/storage/common/storage-auth-aad-rbac-portal) to azure queue data with rbac in the azure portal\n   * set the values of the client id, tenant id, and client secret of the aad application as environment variables:\n     azure_tenant_id, azure_client_id, azure_client_secret\n\n   use the returned token credential to authenticate the client:\n    ```python\n        from azure.identity import defaultazurecredential\n        from azure.storage.queue import queueserviceclient\n        token_credential = defaultazurecredential()\n\n        queue_service_client = queueserviceclient(\n            account_url=\"https://<my_account_name>.queue.core.windows.net\",\n            credential=token_credential\n        )\n    ```\n\n#### creating the client from a connection string\ndepending on your use case and authorization method, you may prefer to initialize a client instance with a storage\nconnection string instead of providing the account url and credential separately. to do this, pass the storage\nconnection string to the client's `from_connection_string` class method:\n\n```python\nfrom azure.storage.queue import queueserviceclient\n\nconnection_string = \"defaultendpointsprotocol=https;accountname=xxxx;accountkey=xxxx;endpointsuffix=core.windows.net\"\nservice = queueserviceclient.from_connection_string(conn_str=connection_string)\n```\n\nthe connection string to your storage account can be found in the azure portal under the \"access keys\" section or by running the following cli command:\n\n```bash\naz storage account show-connection-string -g myresourcegroup -n mystorageaccount\n```\n\n## key concepts\nthe following components make up the azure queue service:\n* the storage account itself\n* a queue within the storage account, which contains a set of messages\n* a message within a queue, in any format, of up to 64 kib\n\nthe azure storage queues client library for python allows you to interact with each of these components through the\nuse of a dedicated client object.\n\n### async clients \nthis library includes a complete async api supported on python 3.5+. to use it, you must\nfirst install an async transport, such as [aiohttp](https://pypi.org/project/aiohttp/).\nsee\n[azure-core documentation](https://github.com/azure/azure-sdk-for-python/blob/main/sdk/core/azure-core/client_library_developer.md#transport)\nfor more information.\n\nasync clients and credentials should be closed when they're no longer needed. these\nobjects are async context managers and define async `close` methods.\n\n### clients\ntwo different clients are provided to interact with the various components of the queue service:\n1. [queueserviceclient](https://aka.ms/azsdk-python-storage-queue-queueserviceclient) -\n    this client represents interaction with the azure storage account itself, and allows you to acquire preconfigured\n    client instances to access the queues within. it provides operations to retrieve and configure the account\n    properties as well as list, create, and delete queues within the account. to perform operations on a specific queue,\n    retrieve a client using the `get_queue_client` method.\n2. [queueclient](https://aka.ms/azsdk-python-storage-queue-queueclient) -\n    this client represents interaction with a specific queue (which need not exist yet). it provides operations to\n    create, delete, or configure a queue and includes operations to send, receive, peek, delete, and update messages\n    within it.\n\n### messages\n* **send** - adds a message to the queue and optionally sets a visibility timeout for the message.\n* **receive** - retrieves a message from the queue and makes it invisible to other consumers.\n* **peek** - retrieves a message from the front of the queue, without changing the message visibility.\n* **update** - updates the visibility timeout of a message and/or the message contents.\n* **delete** - deletes a specified message from the queue.\n* **clear** - clears all messages from the queue.\n\n\n## examples\n\nthe following sections provide several code snippets covering some of the most common storage queue tasks, including:\n\n* [creating a queue](#creating-a-queue \"creating a queue\")\n* [sending messages](#sending-messages \"sending messages\")\n* [receiving messages](#receiving-messages \"receiving messages\")\n\n### creating a queue\ncreate a queue in your storage account\n\n```python\nfrom azure.storage.queue import queueclient\n\nqueue = queueclient.from_connection_string(conn_str=\"<connection_string>\", queue_name=\"myqueue\")\nqueue.create_queue()\n```\n\nuse the async client to create a queue\n```python\nfrom azure.storage.queue.aio import queueclient\n\nqueue = queueclient.from_connection_string(conn_str=\"<connection_string>\", queue_name=\"myqueue\")\nawait queue.create_queue()\n```\n\n### sending messages\nsend messages to your queue\n\n```python\nfrom azure.storage.queue import queueclient\n\nqueue = queueclient.from_connection_string(conn_str=\"<connection_string>\", queue_name=\"myqueue\")\nqueue.send_message(\"i'm using queues!\")\nqueue.send_message(\"this is my second message\")\n```\n\nsend messages asynchronously\n\n```python\nimport asyncio\nfrom azure.storage.queue.aio import queueclient\n\nqueue = queueclient.from_connection_string(conn_str=\"<connection_string>\", queue_name=\"myqueue\")\nawait asyncio.gather(\n    queue.send_message(\"i'm using queues!\"),\n    queue.send_message(\"this is my second message\")\n)\n```\n\n### receiving messages\nreceive and process messages from your queue\n\n```python\nfrom azure.storage.queue import queueclient\n\nqueue = queueclient.from_connection_string(conn_str=\"<connection_string>\", queue_name=\"myqueue\")\nresponse = queue.receive_messages()\n\nfor message in response:\n    print(message.content)\n    queue.delete_message(message)\n\n# printed messages from the front of the queue:\n# >> i'm using queues!\n# >> this is my second message\n```\n\nreceive and process messages in batches\n\n```python\nfrom azure.storage.queue import queueclient\n\nqueue = queueclient.from_connection_string(conn_str=\"<connection_string>\", queue_name=\"myqueue\")\nresponse = queue.receive_messages(messages_per_page=10)\n\nfor message_batch in response.by_page():\n    for message in message_batch:\n        print(message.content)\n        queue.delete_message(message)\n```\n\nreceive and process messages asynchronously\n\n```python\nfrom azure.storage.queue.aio import queueclient\n\nqueue = queueclient.from_connection_string(conn_str=\"<connection_string>\", queue_name=\"myqueue\")\nresponse = queue.receive_messages()\n\nasync for message in response:\n    print(message.content)\n    await queue.delete_message(message)\n```\n\n## optional configuration\n\noptional keyword arguments that can be passed in at the client and per-operation level.\n\n### retry policy configuration\n\nuse the following keyword arguments when instantiating a client to configure the retry policy:\n\n* __retry_total__ (int): total number of retries to allow. takes precedence over other counts.\npass in `retry_total=0` if you do not want to retry on requests. defaults to 10.\n* __retry_connect__ (int): how many connection-related errors to retry on. defaults to 3.\n* __retry_read__ (int): how many times to retry on read errors. defaults to 3.\n* __retry_status__ (int): how many times to retry on bad status codes. defaults to 3.\n* __retry_to_secondary__ (bool): whether the request should be retried to secondary, if able.\nthis should only be enabled of ra-grs accounts are used and potentially stale data can be handled.\ndefaults to `false`.\n\n### other client / per-operation configuration\n\nother optional configuration keyword arguments that can be specified on the client or per-operation.\n\n**client keyword arguments:**\n\n* __connection_timeout__ (int): the number of seconds the client will wait to establish a connection to the server.\ndefaults to 20 seconds.\n* __read_timeout__ (int): the number of seconds the client will wait, between consecutive read operations, for a\nresponse from the server. this is a socket level timeout and is not affected by overall data size. client-side read \ntimeouts will be automatically retried. defaults to 60 seconds.\n* __transport__ (any): user-provided transport to send the http request.\n\n**per-operation keyword arguments:**\n\n* __raw_response_hook__ (callable): the given callback uses the response returned from the service.\n* __raw_request_hook__ (callable): the given callback uses the request before being sent to service.\n* __client_request_id__ (str): optional user specified identification of the request.\n* __user_agent__ (str): appends the custom value to the user-agent header to be sent with the request.\n* __logging_enable__ (bool): enables logging at the debug level. defaults to false. can also be passed in at\nthe client level to enable it for all requests.\n* __logging_body__ (bool): enables logging the request and response body. defaults to false. can also be passed in at\nthe client level to enable it for all requests.\n* __headers__ (dict): pass in custom headers as key, value pairs. e.g. `headers={'customvalue': value}`\n\n\n## troubleshooting\n### general\nstorage queue clients raise exceptions defined in [azure core](https://github.com/azure/azure-sdk-for-python/blob/main/sdk/core/azure-core/readme.md).\n\nthis list can be used for reference to catch thrown exceptions. to get the specific error code of the exception, use the `error_code` attribute, i.e, `exception.error_code`.\n\n### logging\nthis library uses the standard\n[logging](https://docs.python.org/3/library/logging.html) library for logging.\nbasic information about http sessions (urls, headers, etc.) is logged at info\nlevel.\n\ndetailed debug level logging, including request/response bodies and unredacted\nheaders, can be enabled on a client with the `logging_enable` argument:\n```python\nimport sys\nimport logging\nfrom azure.storage.queue import queueserviceclient\n\n# create a logger for the 'azure.storage.queue' sdk\nlogger = logging.getlogger('azure.storage.queue')\nlogger.setlevel(logging.debug)\n\n# configure a console output\nhandler = logging.streamhandler(stream=sys.stdout)\nlogger.addhandler(handler)\n\n# this client will log detailed information about its http sessions, at debug level\nservice_client = queueserviceclient.from_connection_string(\"your_connection_string\", logging_enable=true)\n```\n\nsimilarly, `logging_enable` can enable detailed logging for a single operation,\neven when it isn't enabled for the client:\n```python\nservice_client.get_service_stats(logging_enable=true)\n```\n\n## next steps\n### more sample code\n\nget started with our [queue samples](https://github.com/azure/azure-sdk-for-python/tree/main/sdk/storage/azure-storage-queue/samples).\n\nseveral storage queues python sdk samples are available to you in the sdk's github repository. these samples provide example code for additional scenarios commonly encountered while working with storage queues:\n\n* [queue_samples_hello_world.py](https://github.com/azure/azure-sdk-for-python/tree/main/sdk/storage/azure-storage-queue/samples/queue_samples_hello_world.py) ([async version](https://github.com/azure/azure-sdk-for-python/tree/main/sdk/storage/azure-storage-queue/samples/queue_samples_hello_world_async.py)) - examples found in this article:\n    * client creation\n    * create a queue\n    * send messages\n    * receive messages\n\n* [queue_samples_authentication.py](https://github.com/azure/azure-sdk-for-python/tree/main/sdk/storage/azure-storage-queue/samples/queue_samples_authentication.py) ([async version](https://github.com/azure/azure-sdk-for-python/tree/main/sdk/storage/azure-storage-queue/samples/queue_samples_authentication_async.py)) - examples for authenticating and creating the client:\n    * from a connection string\n    * from a shared access key\n    * from a shared access signature token\n    * from azure active directory\n\n* [queue_samples_service.py](https://github.com/azure/azure-sdk-for-python/tree/main/sdk/storage/azure-storage-queue/samples/queue_samples_service.py) ([async version](https://github.com/azure/azure-sdk-for-python/tree/main/sdk/storage/azure-storage-queue/samples/queue_samples_service_async.py)) - examples for interacting with the queue service:\n    * get and set service properties\n    * list queues in a storage account\n    * create and delete a queue from the service\n    * get the queueclient\n\n* [queue_samples_message.py](https://github.com/azure/azure-sdk-for-python/tree/main/sdk/storage/azure-storage-queue/samples/queue_samples_message.py) ([async version](https://github.com/azure/azure-sdk-for-python/tree/main/sdk/storage/azure-storage-queue/samples/queue_samples_message_async.py)) - examples for working with queues and messages:\n    * set an access policy\n    * get and set queue metadata\n    * send and receive messages\n    * delete specified messages and clear all messages\n    * peek and update messages\n\n### additional documentation\nfor more extensive documentation on azure queue storage, see the [azure queue storage documentation](https://docs.microsoft.com/azure/storage/queues/) on docs.microsoft.com.\n\n## contributing\nthis project welcomes contributions and suggestions.  most contributions require you to agree to a contributor license agreement (cla) declaring that you have the right to, and actually do, grant us the rights to use your contribution. for details, visit https://cla.microsoft.com.\n\nwhen you submit a pull request, a cla-bot will automatically determine whether you need to provide a cla and decorate the pr appropriately (e.g., label, comment). simply follow the instructions provided by the bot. you will only need to do this once across all repos using our cla.\n\nthis project has adopted the [microsoft open source code of conduct](https://opensource.microsoft.com/codeofconduct/). for more information see the [code of conduct faq](https://opensource.microsoft.com/codeofconduct/faq/) or contact [opencode@microsoft.com](mailto:opencode@microsoft.com) with any additional questions or comments.\n\n\n# release history\n\n## 12.9.0 (2023-12-05)\n\n### other changes\n- updated type hints across the entire package and enabled mypy to run during ci. some public types may have been adjusted if they were previously erroneous or incomplete.\n\n## 12.8.0 (2023-11-07)\n\n### features added\n- stable release of features from 12.18.0b1\n\n## 12.8.0b1 (2023-10-17)\n\n### features added\n- added `audience` as an optional keyword that can be specified on apis that have a `credential` parameter. this\nkeyword only has an effect when the credential provided is of type `tokencredential`.\n\n## 12.7.3 (2023-10-10)\n\n### bugs fixed\n- fixed an issue when an invalid type was provided for `credential` during client construction, the\n`__str__` of the object would be present in the exception message and therefore potentially logged.\n\n## 12.7.2 (2023-09-25)\n\n### bugs fixed\n- fixed an issue where `user_agent` was being ignored on `send_message`, `receive_message`, `receive_messages`,\n`update_message`, and `peek_messages` if client was configured for encryption.\n\n## 12.7.1 (2023-09-13)\n\n### bugs fixed\n- fixed breaking `keyerror: 'sdk_moniker'` in `create_configuration`.\nnote: this is not an exported method and therefore should not be imported/called directly.\n\n## 12.7.0 (2023-09-12)\n\n### features added\n- stable release of features from 12.7.0b1\n\n## 12.7.0b1 (2023-08-08)\n\n### other changes\n- bumped `azure-core` minimum dependency to 1.28.0 and `typing-extensions` to 4.3.0.\n\n## 12.6.0 (2023-02-22)\n\n### features added\n- stable release of features from 12.6.0b1\n\n## 12.6.0b1 (2023-02-02)\n\n### other changes\n- removed `msrest` dependency.\n- added `typing-extensions>=4.0.1` as a dependency.\n- added `isodate>=0.6.1` as a dependency.\n- added extra dependency `aio` for installing optional async dependencies. use `pip install azure-storage-queue[aio]` to install.\n\n## 12.5.0 (2022-10-11)\n\n### features added\n- stable release of features from 12.5.0b1.\n\n### other changes\n- changed the default value for `read_timeout` to 60 seconds for all clients.\n\n## 12.5.0b1 (2022-08-23)\n\nthis version and all future versions will require python 3.7+. python 3.6 is no longer supported.\n\n### features added\n- added support for `azurenamedkeycredential` as a valid `credential` type.\n\n## 12.4.0 (2022-07-07)\n\n### features added\n- stable release of features from 12.4.0b1.\n\n## 12.4.0b1 (2022-06-15)\n\n### features added\n- introduced version 2.0 of client-side encryption for queue messages which utilizes aes-gcm-256 encryption.\nversion 1.0 is now deprecated and no longer considered secure. if you are using client-side encryption, it is\n**highly recommended** that you update to version 2.0.\nthe encryption version can be specified on any client constructor via the `encryption_version`\nkeyword (i.e. `encryption_version='2.0'`).\n\n## 12.3.0 (2022-05-09)\n\n### features added\n- stable release of features from 12.3.0b1.\n\n### bugs fixed\n- fixed a bug, introduced in the previous beta release, that caused authentication errors when attempting to use\nan account sas with certain service level operations.\n\n## 12.3.0b1 (2022-04-14)\n\n### features added\n- added support for `max_messages` in `receive_messages()` to specify the maximum number of messages to receive from the queue.\n\n### other changes\n- updated sas token generation to use the latest supported service version by default. moving to the latest version\nalso included a change to how account sas is generated to reflect a change made to the service in sas generation for\nservice version 2020-12-06.\n- updated documentation for `receive_messages()` to explain iterator behavior and life-cycle.\n- added a sample to `queue_samples_message.py` (and async-equivalent) showcasing the use of `max_messages` in `receive_messages()`. \n\n## 12.2.0 (2022-03-08)\n\nthis version and all future versions will require python 3.6+. python 2.7 is no longer supported.\n\n### bugs fixed\n- update `azure-core` dependency to avoid inconsistent dependencies from being installed.\n\n## 12.1.6 (2021-04-20)\n**fixes**\n- make `accountname`, `accountkey` etc. in conn_str case insensitive\n- fixed unclosed `threadpoolexecutor` (#8955)\n\n## 12.1.5 (2021-01-13)\n**new features**\n- added support for `azuresascredential` to allow sas rotation in long living clients.\n\n## 12.1.4 (2020-11-10)\n**new feature**\n- added `receive_message` on queueclient to support receiving one message from queue (#14844, #14762)\n\n**notes**\n- updated dependency `azure-core` from  azure-core<2.0.0,>=1.6.0 to azure-core<2.0.0,>=1.9.0 to get continuation_token attr on azureerror.\n\n\n## 12.1.3 (2020-09-10)\n**fixes**\n- fixed queueclient type declaration (#11392).\n\n## 12.1.2\n**notes**\n- updated dependency from azure-core<2.0.0,>=1.2.2 to azure-core<2.0.0,>=1.6.0\n\n## 12.1.1 (2020-03-10)\n\n**fixes**\n- responses are always decoded as utf8\n\n**notes**\n- the `storageuseragentpolicy` is now replaced with the `useragentpolicy` from azure-core. with this, the custom user agents are now added as a prefix instead of being appended.\n\n## 12.1.0 (2019-12-04)\n\n **new features**\n- all the clients now have a `close()` method to close the sockets opened by the client when using without a context manager.\n\n## 12.0.0 (2019-10-31)\n\n**breaking changes**\n\n- `queueclient` now accepts only `account_url` with mandatory a string param `queue_name`.\nto use a queue_url, the method `from_queue_url` must be used.\n- `set_queue_access_policy` has required parameter `signed_identifiers`.\n- `noretry` policy has been removed. use keyword argument `retry_total=0` for no retries.\n- `noencodepolicy` and `nodecodepolicy` have been removed. use `message_encode_policy=none` and `message_decode_policy=none`.\n- removed types that were accidentally exposed from two modules. only `queueserviceclient` and `queueclient`\nshould be imported from azure.storage.queue.aio\n- some parameters have become keyword only, rather than positional. some examples include:\n  - `loop`\n  - `max_concurrency`\n  - `validate_content`\n  - `timeout` etc.\n- `queuemessage` has had its parameters renamed from `insertion_time`, `time_next_visible`, `expiration_time`\nto `inserted_on`, `next_visible_on`, `expires_on`, respectively.\n- `logging` has been renamed to `queueanalyticslogging`.\n- `enqueue_message` is now called `send_message`.\n- client and model files have been made internal. users should import from the top level modules `azure.storage.queue` and `azure.storage.queue.aio` only.\n- the `generate_shared_access_signature` methods on both `queueserviceclient` and `queueclient` have been replaced by module level functions `generate_account_sas` and `generate_queue_sas`.\n- `get_service_stats` now returns a dict\n- `get_service_properties` now returns a dict with keys consistent to `set_service_properties`\n\n **new features**\n\n- `resourcetypes`, and `services` now have method `from_string` which takes parameters as a string.\n\n**fixes and improvements**\n\n- fixed an issue where xml is being double encoded and double decoded.\n\n## 12.0.0b4 (2019-10-08)\n\n**breaking changes**\n\n- permission models.\n  - `accountpermissions`, `queuepermissions` have been renamed to\n  `accountsaspermissions`, `queuesaspermissions` respectively.\n  - enum-like list parameters have been removed from both of them.\n  - `__add__` and `__or__` methods are removed.\n- `max_connections` is now renamed to `max_concurrency`.\n\n**new features**\n\n- `accountsaspermissions`, `queuesaspermissions` now have method `from_string` which takes parameters as a string.\n\n## 12.0.0b3 (2019-09-10)\n\n**dependency updates**\n- adopted [azure-core](https://pypi.org/project/azure-core/) 1.0.0b3\n  - if you later want to revert to previous versions of azure-storage-queue, or another azure sdk\n  library requiring azure-core 1.0.0b1 or azure-core 1.0.0b2, you must explicitly install\n  the specific version of azure-core as well. for example:\n\n  `pip install azure-core==1.0.0b2 azure-storage-queue==12.0.0b2`\n\n\n## 12.0.0b2 (2019-08-06)\n\n**breaking changes**\n- the behavior of listing operations has been modified:\n    - the previous `marker` parameter has been removed.\n    - the iterable response object now supports a `by_page` function that will return a secondary iterator of batches of results. this function supports a `continuation_token` parameter to replace the previous `marker` parameter.\n- the new listing behaviour is also adopted by the `receive_messages` operation:\n    - the receive operation returns a message iterator as before.\n    - the returned iterator supports a `by_page` operation to receive messages in batches.\n\n**new features**\n- added async apis to subnamespace `azure.storage.queue.aio`.\n- distributed tracing framework opencensus is now supported.\n\n**dependency updates**\n- adopted [azure-core](https://pypi.org/project/azure-core/) 1.0.0b2\n  - if you later want to revert to azure-storage-queue 12.0.0b1, or another azure sdk\n  library requiring azure-core 1.0.0b1, you must explicitly install azure-core\n  1.0.0b1 as well. for example:\n\n  `pip install azure-core==1.0.0b1 azure-storage-queue==12.0.0b1`\n\n**fixes and improvements**\n- general refactor of duplicate and shared code.\n\n\n## 12.0.0b1 (2019-07-02)\n\nversion 12.0.0b1 is the first preview of our efforts to create a user-friendly and pythonic client library for azure storage queues. for more information about this, and preview releases of other azure sdk libraries, please visit\nhttps://aka.ms/azure-sdk-preview1-python.\n\n**breaking changes: new api design**\n- operations are now scoped to a particular client:\n    - `queueserviceclient`: this client handles account-level operations. this includes managing service properties and listing the queues within an account.\n    - `queueclient`: the client handles operations within a particular queue. this includes creating or deleting that queue, as well as enqueueing and dequeueing messages.\n\n    these clients can be accessed by navigating down the client hierarchy, or instantiated directly using urls to the resource (account or queue).\n    for full details on the new api, please see the [reference documentation](https://azure.github.io/azure-sdk-for-python/storage.html#azure-storage-queue).\n- new message iterator, for receiving messages from a queue in a continuous stream.\n- new underlying rest pipeline implementation, based on the new `azure-core` library.\n- client and pipeline configuration is now available via keyword arguments at both the client level, and per-operation. see reference documentation for a full list of optional configuration arguments.\n- authentication using `azure-identity` credentials\n  - see the\n  [azure identity documentation](https://github.com/azure/azure-sdk-for-python/blob/main/sdk/identity/azure-identity/readme.md)\n  for more information\n- new error hierarchy:\n    - all service errors will now use the base type: `azure.core.exceptions.httpresponseerror`\n    - the are a couple of specific exception types derived from this base type for common error scenarios:\n        - `resourcenotfounderror`: the resource (e.g. queue, message) could not be found. commonly a 404 status code.\n        - `resourceexistserror`: a resource conflict - commonly caused when attempting to create a resource that already exists.\n        - `resourcemodifiederror`: the resource has been modified (e.g. overwritten) and therefore the current operation is in conflict. alternatively this may be raised if a condition on the operation is not met.\n        - `clientauthenticationerror`: authentication failed.\n- no longer have specific operations for `get_metadata` - use `get_properties` instead.\n- no longer have specific operations for `exists` - use `get_properties` instead.\n- operations `get_queue_acl` and `set_queue_acl` have been renamed to `get_queue_access_policy` and `set_queue_access_policy`.\n- operation `put_message` has been renamed to `enqueue_message`.\n- operation `get_messages` has been renamed to `receive_messages`.\n\n## 2.0.1\n- updated dependency on azure-storage-common.\n\n## 2.0.0\n- support for 2018-11-09 rest version.\n\n## 1.4.0\n- azure-storage-nspkg is not installed anymore on python 3 (pep420-based namespace package)\n\n## 1.3.0\n- support for 2018-03-28 rest version. please see our rest api documentation and blog for information about the related added features.\n\n## 1.2.0rc1\n- support for 2017-11-09 rest version. please see our rest api documentation and blog for information about the related added features.\n- added support for oauth authentication for https requests(please note that this feature is available in preview).\n\n## 1.1.0\n- support for 2017-07-29 rest version. please see our rest api documentation and blogs for information about the related added features.\n- queue messages can now have an arbitrarily large or infinite time to live.\n- error message now contains the errorcode from the x-ms-error-code header value.\n\n## 1.0.0\n- the package has switched from apache 2.0 to the mit license.\n",
  "docs_url": null,
  "keywords": "azure,azure sdk",
  "license": "mit license",
  "name": "azure-storage-queue",
  "package_url": "https://pypi.org/project/azure-storage-queue/",
  "project_url": "https://pypi.org/project/azure-storage-queue/",
  "project_urls": {
    "Homepage": "https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/storage/azure-storage-queue"
  },
  "release_url": "https://pypi.org/project/azure-storage-queue/12.9.0/",
  "requires_dist": [
    "azure-core<2.0.0,>=1.28.0",
    "cryptography>=2.1.4",
    "typing-extensions>=4.3.0",
    "isodate>=0.6.1",
    "azure-core[aio]<2.0.0,>=1.28.0; extra == \"aio\""
  ],
  "requires_python": ">=3.7",
  "summary": "microsoft azure azure queue storage client library for python",
  "version": "12.9.0",
  "releases": [],
  "developers": [
    "ascl@microsoft.com",
    "microsoft_corporation"
  ],
  "kwds": "azure azureerror storageservices queue_samples_message_async queueclient",
  "license_kwds": "mit license",
  "libtype": "pypi",
  "id": "pypi_azure_storage_queue",
  "homepage": "https://github.com/azure/azure-sdk-for-python/tree/main/sdk/storage/azure-storage-queue",
  "release_count": 38,
  "dependency_ids": [
    "pypi_azure_core",
    "pypi_cryptography",
    "pypi_isodate",
    "pypi_typing_extensions"
  ]
}
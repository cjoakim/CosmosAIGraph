{
  "classifiers": [
    "development status :: 5 - production/stable",
    "license :: osi approved :: bsd license",
    "programming language :: python",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.5",
    "programming language :: python :: 3.6",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "programming language :: python :: implementation :: cpython",
    "programming language :: python :: implementation :: pypy"
  ],
  "description": "toolz\n=====\n\n|build status| |coverage status| |version status|\n\na set of utility functions for iterators, functions, and dictionaries.\n\nsee the pytoolz documentation at https://toolz.readthedocs.io\n\nlicense\n-------\n\nnew bsd. see `license file <https://github.com/pytoolz/toolz/blob/master/license.txt>`__.\n\ninstall\n-------\n\n``toolz`` is on the python package index (pypi):\n\n::\n\n    pip install toolz\n\nstructure and heritage\n----------------------\n\n``toolz`` is implemented in three parts:\n\n|literal itertoolz|_, for operations on iterables. examples: ``groupby``,\n``unique``, ``interpose``,\n\n|literal functoolz|_, for higher-order functions. examples: ``memoize``,\n``curry``, ``compose``,\n\n|literal dicttoolz|_, for operations on dictionaries. examples: ``assoc``,\n``update-in``, ``merge``.\n\n.. |literal itertoolz| replace:: ``itertoolz``\n.. _literal itertoolz: https://github.com/pytoolz/toolz/blob/master/toolz/itertoolz.py\n\n.. |literal functoolz| replace:: ``functoolz``\n.. _literal functoolz: https://github.com/pytoolz/toolz/blob/master/toolz/functoolz.py\n\n.. |literal dicttoolz| replace:: ``dicttoolz``\n.. _literal dicttoolz: https://github.com/pytoolz/toolz/blob/master/toolz/dicttoolz.py\n\nthese functions come from the legacy of functional languages for list\nprocessing. they interoperate well to accomplish common complex tasks.\n\nread our `api\ndocumentation <https://toolz.readthedocs.io/en/latest/api.html>`__ for\nmore details.\n\nexample\n-------\n\nthis builds a standard wordcount function from pieces within ``toolz``:\n\n.. code:: python\n\n    >>> def stem(word):\n    ...     \"\"\" stem word to primitive form \"\"\"\n    ...     return word.lower().rstrip(\",.!:;'-\\\"\").lstrip(\"'\\\"\")\n\n    >>> from toolz import compose, frequencies\n    >>> from toolz.curried import map\n    >>> wordcount = compose(frequencies, map(stem), str.split)\n\n    >>> sentence = \"this cat jumped over this other cat!\"\n    >>> wordcount(sentence)\n    {'this': 2, 'cat': 2, 'jumped': 1, 'over': 1, 'other': 1}\n\ndependencies\n------------\n\n``toolz`` supports python 3.5+ with a common codebase.\nit is pure python and requires no dependencies beyond the standard\nlibrary.\n\nit is, in short, a lightweight dependency.\n\n\ncytoolz\n-------\n\nthe ``toolz`` project has been reimplemented in `cython <http://cython.org>`__.\nthe ``cytoolz`` project is a drop-in replacement for the pure python\nimplementation.\nsee `cytoolz github page <https://github.com/pytoolz/cytoolz/>`__ for more\ndetails.\n\nsee also\n--------\n\n-  `underscore.js <https://underscorejs.org/>`__: a similar library for\n   javascript\n-  `enumerable <https://ruby-doc.org/core-2.0.0/enumerable.html>`__: a\n   similar library for ruby\n-  `clojure <https://clojure.org/>`__: a functional language whose\n   standard library has several counterparts in ``toolz``\n-  `itertools <https://docs.python.org/2/library/itertools.html>`__: the\n   python standard library for iterator tools\n-  `functools <https://docs.python.org/2/library/functools.html>`__: the\n   python standard library for function tools\n\ncontributions welcome\n---------------------\n\n``toolz`` aims to be a repository for utility functions, particularly\nthose that come from the functional programming and list processing\ntraditions. we welcome contributions that fall within this scope.\n\nwe also try to keep the api small to keep ``toolz`` manageable.  the ideal\ncontribution is significantly different from existing functions and has\nprecedent in a few other functional systems.\n\nplease take a look at our\n`issue page <https://github.com/pytoolz/toolz/issues>`__\nfor contribution ideas.\n\ncommunity\n---------\n\nsee our `mailing list <https://groups.google.com/forum/#!forum/pytoolz>`__.\nwe're friendly.\n\n.. |build status| image:: https://github.com/pytoolz/toolz/workflows/test/badge.svg\n   :target: https://github.com/pytoolz/toolz/actions\n.. |coverage status| image:: https://coveralls.io/repos/pytoolz/toolz/badge.svg?branch=master\n   :target: https://coveralls.io/r/pytoolz/toolz\n.. |version status| image:: https://badge.fury.io/py/toolz.svg\n   :target: https://badge.fury.io/py/toolz\n\n\n",
  "docs_url": null,
  "keywords": "functional utility itertools functools",
  "license": "bsd",
  "name": "toolz",
  "package_url": "https://pypi.org/project/toolz/",
  "project_url": "https://pypi.org/project/toolz/",
  "project_urls": {
    "Homepage": "https://github.com/pytoolz/toolz/"
  },
  "release_url": "https://pypi.org/project/toolz/0.12.0/",
  "requires_dist": [],
  "requires_python": ">=3.5",
  "summary": "list processing tools and functional utilities",
  "version": "0.12.0",
  "releases": [],
  "developers": [
    "erik.n.welch@gmail.com",
    "erik_welch",
    "https"
  ],
  "kwds": "functools functoolz pytoolz itertools itertoolz",
  "license_kwds": "bsd",
  "libtype": "pypi",
  "id": "pypi_toolz",
  "homepage": "https://github.com/pytoolz/toolz/",
  "release_count": 26,
  "dependency_ids": []
}
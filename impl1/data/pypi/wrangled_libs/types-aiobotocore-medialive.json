{
  "classifiers": [
    "development status :: 5 - production/stable",
    "environment :: console",
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "natural language :: english",
    "operating system :: os independent",
    "programming language :: python :: 3",
    "programming language :: python :: 3 :: only",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.12",
    "programming language :: python :: 3.13",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "programming language :: python :: implementation :: cpython",
    "typing :: typed"
  ],
  "description": "<a id=\"types-aiobotocore-medialive\"></a>\n\n# types-aiobotocore-medialive\n\n[![pypi - types-aiobotocore-medialive](https://img.shields.io/pypi/v/types-aiobotocore-medialive.svg?color=blue)](https://pypi.org/project/types-aiobotocore-medialive)\n[![pypi - python version](https://img.shields.io/pypi/pyversions/types-aiobotocore-medialive.svg?color=blue)](https://pypi.org/project/types-aiobotocore-medialive)\n[![docs](https://img.shields.io/readthedocs/types-aiobotocore.svg?color=blue)](https://youtype.github.io/types_aiobotocore_docs/types_aiobotocore_medialive/)\n[![pypi - downloads](https://static.pepy.tech/badge/types-aiobotocore-medialive)](https://pepy.tech/project/types-aiobotocore-medialive)\n\n![boto3.typed](https://github.com/youtype/mypy_boto3_builder/raw/main/logo.png)\n\ntype annotations for\n[aiobotocore.medialive 2.9.0](https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/medialive.html#medialive)\nservice compatible with [vscode](https://code.visualstudio.com/),\n[pycharm](https://www.jetbrains.com/pycharm/),\n[emacs](https://www.gnu.org/software/emacs/),\n[sublime text](https://www.sublimetext.com/),\n[mypy](https://github.com/python/mypy),\n[pyright](https://github.com/microsoft/pyright) and other tools.\n\ngenerated by\n[mypy-boto3-builder 7.21.0](https://github.com/youtype/mypy_boto3_builder).\n\nmore information can be found on\n[types-aiobotocore](https://pypi.org/project/types-aiobotocore/) page and in\n[types-aiobotocore-medialive docs](https://youtype.github.io/types_aiobotocore_docs/types_aiobotocore_medialive/).\n\nsee how it helps to find and fix potential bugs:\n\n![boto3-stubs demo](https://github.com/youtype/mypy_boto3_builder/raw/main/demo.gif)\n\n- [types-aiobotocore-medialive](#types-aiobotocore-medialive)\n  - [how to install](#how-to-install)\n    - [from pypi with pip](#from-pypi-with-pip)\n  - [how to uninstall](#how-to-uninstall)\n  - [usage](#usage)\n    - [vscode](#vscode)\n    - [pycharm](#pycharm)\n    - [emacs](#emacs)\n    - [sublime text](#sublime-text)\n    - [other ides](#other-ides)\n    - [mypy](#mypy)\n    - [pyright](#pyright)\n  - [explicit type annotations](#explicit-type-annotations)\n    - [client annotations](#client-annotations)\n    - [paginators annotations](#paginators-annotations)\n    - [waiters annotations](#waiters-annotations)\n    - [literals](#literals)\n    - [type definitions](#type-definitions)\n  - [how it works](#how-it-works)\n  - [what's new](#what's-new)\n    - [implemented features](#implemented-features)\n    - [latest changes](#latest-changes)\n  - [versioning](#versioning)\n  - [thank you](#thank-you)\n  - [documentation](#documentation)\n  - [support and contributing](#support-and-contributing)\n\n<a id=\"how-to-install\"></a>\n\n## how to install\n\n<a id=\"from-pypi-with-pip\"></a>\n\n### from pypi with pip\n\ninstall `types-aiobotocore` for `medialive` service.\n\n```bash\n# install with aiobotocore type annotations\npython -m pip install 'types-aiobotocore[medialive]'\n\n\n# lite version does not provide session.client/resource overloads\n# it is more ram-friendly, but requires explicit type annotations\npython -m pip install 'types-aiobotocore-lite[medialive]'\n\n\n# standalone installation\npython -m pip install types-aiobotocore-medialive\n```\n\n<a id=\"how-to-uninstall\"></a>\n\n## how to uninstall\n\n```bash\npython -m pip uninstall -y types-aiobotocore-medialive\n```\n\n<a id=\"usage\"></a>\n\n## usage\n\n<a id=\"vscode\"></a>\n\n### vscode\n\n- install\n  [python extension](https://marketplace.visualstudio.com/items?itemname=ms-python.python)\n- install\n  [pylance extension](https://marketplace.visualstudio.com/items?itemname=ms-python.vscode-pylance)\n- set `pylance` as your python language server\n- install `types-aiobotocore[medialive]` in your environment:\n\n```bash\npython -m pip install 'types-aiobotocore[medialive]'\n```\n\nboth type checking and code completion should now work. no explicit type\nannotations required, write your `aiobotocore` code as usual.\n\n<a id=\"pycharm\"></a>\n\n### pycharm\n\ninstall `types-aiobotocore-lite[medialive]` in your environment:\n\n```bash\npython -m pip install 'types-aiobotocore-lite[medialive]'`\n```\n\nboth type checking and code completion should now work. explicit type\nannotations **are required**.\n\nuse `types-aiobotocore` package instead for implicit type discovery.\n\n<a id=\"emacs\"></a>\n\n### emacs\n\n- install `types-aiobotocore` with services you use in your environment:\n\n```bash\npython -m pip install 'types-aiobotocore[medialive]'\n```\n\n- install [use-package](https://github.com/jwiegley/use-package),\n  [lsp](https://github.com/emacs-lsp/lsp-mode/),\n  [company](https://github.com/company-mode/company-mode) and\n  [flycheck](https://github.com/flycheck/flycheck) packages\n- install [lsp-pyright](https://github.com/emacs-lsp/lsp-pyright) package\n\n```elisp\n(use-package lsp-pyright\n  :ensure t\n  :hook (python-mode . (lambda ()\n                          (require 'lsp-pyright)\n                          (lsp)))  ; or lsp-deferred\n  :init (when (executable-find \"python3\")\n          (setq lsp-pyright-python-executable-cmd \"python3\"))\n  )\n```\n\n- make sure emacs uses the environment where you have installed\n  `types-aiobotocore`\n\ntype checking should now work. no explicit type annotations required, write\nyour `aiobotocore` code as usual.\n\n<a id=\"sublime-text\"></a>\n\n### sublime text\n\n- install `types-aiobotocore[medialive]` with services you use in your\n  environment:\n\n```bash\npython -m pip install 'types-aiobotocore[medialive]'\n```\n\n- install [lsp-pyright](https://github.com/sublimelsp/lsp-pyright) package\n\ntype checking should now work. no explicit type annotations required, write\nyour `aiobotocore` code as usual.\n\n<a id=\"other-ides\"></a>\n\n### other ides\n\nnot tested, but as long as your ide supports `mypy` or `pyright`, everything\nshould work.\n\n<a id=\"mypy\"></a>\n\n### mypy\n\n- install `mypy`: `python -m pip install mypy`\n- install `types-aiobotocore[medialive]` in your environment:\n\n```bash\npython -m pip install 'types-aiobotocore[medialive]'`\n```\n\ntype checking should now work. no explicit type annotations required, write\nyour `aiobotocore` code as usual.\n\n<a id=\"pyright\"></a>\n\n### pyright\n\n- install `pyright`: `npm i -g pyright`\n- install `types-aiobotocore[medialive]` in your environment:\n\n```bash\npython -m pip install 'types-aiobotocore[medialive]'\n```\n\noptionally, you can install `types-aiobotocore` to `typings` folder.\n\ntype checking should now work. no explicit type annotations required, write\nyour `aiobotocore` code as usual.\n\n<a id=\"explicit-type-annotations\"></a>\n\n## explicit type annotations\n\n<a id=\"client-annotations\"></a>\n\n### client annotations\n\n`medialiveclient` provides annotations for\n`session.create_client(\"medialive\")`.\n\n```python\nfrom aiobotocore.session import get_session\n\nfrom types_aiobotocore_medialive import medialiveclient\n\nsession = get_session()\nasync with session.create_client(\"medialive\") as client:\n    client: medialiveclient\n    # now client usage is checked by mypy and ide should provide code completion\n```\n\n<a id=\"paginators-annotations\"></a>\n\n### paginators annotations\n\n`types_aiobotocore_medialive.paginator` module contains type annotations for\nall paginators.\n\n```python\nfrom aiobotocore.session import get_session\n\nfrom types_aiobotocore_medialive import medialiveclient\nfrom types_aiobotocore_medialive.paginator import (\n    describeschedulepaginator,\n    listchannelspaginator,\n    listinputdevicetransferspaginator,\n    listinputdevicespaginator,\n    listinputsecuritygroupspaginator,\n    listinputspaginator,\n    listmultiplexprogramspaginator,\n    listmultiplexespaginator,\n    listofferingspaginator,\n    listreservationspaginator,\n)\n\nsession = get_session()\nasync with session.create_client(\"medialive\") as client:\n    client: medialiveclient\n\n    # explicit type annotations are optional here\n    # types should be correctly discovered by mypy and ides\n    describe_schedule_paginator: describeschedulepaginator = client.get_paginator(\n        \"describe_schedule\"\n    )\n    list_channels_paginator: listchannelspaginator = client.get_paginator(\"list_channels\")\n    list_input_device_transfers_paginator: listinputdevicetransferspaginator = client.get_paginator(\n        \"list_input_device_transfers\"\n    )\n    list_input_devices_paginator: listinputdevicespaginator = client.get_paginator(\n        \"list_input_devices\"\n    )\n    list_input_security_groups_paginator: listinputsecuritygroupspaginator = client.get_paginator(\n        \"list_input_security_groups\"\n    )\n    list_inputs_paginator: listinputspaginator = client.get_paginator(\"list_inputs\")\n    list_multiplex_programs_paginator: listmultiplexprogramspaginator = client.get_paginator(\n        \"list_multiplex_programs\"\n    )\n    list_multiplexes_paginator: listmultiplexespaginator = client.get_paginator(\"list_multiplexes\")\n    list_offerings_paginator: listofferingspaginator = client.get_paginator(\"list_offerings\")\n    list_reservations_paginator: listreservationspaginator = client.get_paginator(\n        \"list_reservations\"\n    )\n```\n\n<a id=\"waiters-annotations\"></a>\n\n### waiters annotations\n\n`types_aiobotocore_medialive.waiter` module contains type annotations for all\nwaiters.\n\n```python\nfrom aiobotocore.session import get_session\n\nfrom types_aiobotocore_medialive.client import medialiveclient\nfrom types_aiobotocore_medialive.waiter import (\n    channelcreatedwaiter,\n    channeldeletedwaiter,\n    channelrunningwaiter,\n    channelstoppedwaiter,\n    inputattachedwaiter,\n    inputdeletedwaiter,\n    inputdetachedwaiter,\n    multiplexcreatedwaiter,\n    multiplexdeletedwaiter,\n    multiplexrunningwaiter,\n    multiplexstoppedwaiter,\n)\n\nsession = get_session()\nasync with session.create_client(\"medialive\") as client:\n    client: medialiveclient\n\n    # explicit type annotations are optional here\n    # types should be correctly discovered by mypy and ides\n    channel_created_waiter: channelcreatedwaiter = client.get_waiter(\"channel_created\")\n    channel_deleted_waiter: channeldeletedwaiter = client.get_waiter(\"channel_deleted\")\n    channel_running_waiter: channelrunningwaiter = client.get_waiter(\"channel_running\")\n    channel_stopped_waiter: channelstoppedwaiter = client.get_waiter(\"channel_stopped\")\n    input_attached_waiter: inputattachedwaiter = client.get_waiter(\"input_attached\")\n    input_deleted_waiter: inputdeletedwaiter = client.get_waiter(\"input_deleted\")\n    input_detached_waiter: inputdetachedwaiter = client.get_waiter(\"input_detached\")\n    multiplex_created_waiter: multiplexcreatedwaiter = client.get_waiter(\"multiplex_created\")\n    multiplex_deleted_waiter: multiplexdeletedwaiter = client.get_waiter(\"multiplex_deleted\")\n    multiplex_running_waiter: multiplexrunningwaiter = client.get_waiter(\"multiplex_running\")\n    multiplex_stopped_waiter: multiplexstoppedwaiter = client.get_waiter(\"multiplex_stopped\")\n```\n\n<a id=\"literals\"></a>\n\n### literals\n\n`types_aiobotocore_medialive.literals` module contains literals extracted from\nshapes that can be used in user code for type checking.\n\nfull list of `medialive` literals can be found in\n[docs](https://youtype.github.io/types_aiobotocore_docs/types_aiobotocore_medialive/literals/).\n\n```python\nfrom types_aiobotocore_medialive.literals import aaccodingmodetype\n\n\ndef check_value(value: aaccodingmodetype) -> bool: ...\n```\n\n<a id=\"type-definitions\"></a>\n\n### type definitions\n\n`types_aiobotocore_medialive.type_defs` module contains structures and shapes\nassembled to typed dictionaries and unions for additional type checking.\n\nfull list of `medialive` typedefs can be found in\n[docs](https://youtype.github.io/types_aiobotocore_docs/types_aiobotocore_medialive/type_defs/).\n\n```python\nfrom types_aiobotocore_medialive.type_defs import aacsettingstypedef\n\n\ndef get_value() -> aacsettingstypedef:\n    return {...}\n```\n\n<a id=\"how-it-works\"></a>\n\n## how it works\n\nfully automated\n[mypy-boto3-builder](https://github.com/youtype/mypy_boto3_builder) carefully\ngenerates type annotations for each service, patiently waiting for\n`aiobotocore` updates. it delivers drop-in type annotations for you and makes\nsure that:\n\n- all available `aiobotocore` services are covered.\n- each public class and method of every `aiobotocore` service gets valid type\n  annotations extracted from `botocore` schemas.\n- type annotations include up-to-date documentation.\n- link to documentation is provided for every method.\n- code is processed by [black](https://github.com/psf/black) and\n  [isort](https://github.com/pycqa/isort) for readability.\n\n<a id=\"what's-new\"></a>\n\n## what's new\n\n<a id=\"implemented-features\"></a>\n\n### implemented features\n\n- fully type annotated `boto3`, `botocore`, `aiobotocore` and `aioboto3`\n  libraries\n- `mypy`, `pyright`, `vscode`, `pycharm`, `sublime text` and `emacs`\n  compatibility\n- `client`, `serviceresource`, `resource`, `waiter` `paginator` type\n  annotations for each service\n- generated `typedefs` for each service\n- generated `literals` for each service\n- auto discovery of types for `boto3.client` and `boto3.resource` calls\n- auto discovery of types for `session.client` and `session.resource` calls\n- auto discovery of types for `client.get_waiter` and `client.get_paginator`\n  calls\n- auto discovery of types for `serviceresource` and `resource` collections\n- auto discovery of types for `aiobotocore.session.create_client` calls\n\n<a id=\"latest-changes\"></a>\n\n### latest changes\n\nbuilder changelog can be found in\n[releases](https://github.com/youtype/mypy_boto3_builder/releases).\n\n<a id=\"versioning\"></a>\n\n## versioning\n\n`types-aiobotocore-medialive` version is the same as related `aiobotocore`\nversion and follows [pep 440](https://www.python.org/dev/peps/pep-0440/)\nformat.\n\n<a id=\"thank-you\"></a>\n\n## thank you\n\n- [allie fitter](https://github.com/alliefitter) for\n  [boto3-type-annotations](https://pypi.org/project/boto3-type-annotations/),\n  this package is based on top of his work\n- [black](https://github.com/psf/black) developers for an awesome formatting\n  tool\n- [timothy edmund crosley](https://github.com/timothycrosley) for\n  [isort](https://github.com/pycqa/isort) and how flexible it is\n- [mypy](https://github.com/python/mypy) developers for doing all dirty work\n  for us\n- [pyright](https://github.com/microsoft/pyright) team for the new era of typed\n  python\n\n<a id=\"documentation\"></a>\n\n## documentation\n\nall services type annotations can be found in\n[aiobotocore docs](https://youtype.github.io/types_aiobotocore_docs/types_aiobotocore_medialive/)\n\n<a id=\"support-and-contributing\"></a>\n\n## support and contributing\n\nthis package is auto-generated. please reports any bugs or request new features\nin [mypy-boto3-builder](https://github.com/youtype/mypy_boto3_builder/issues/)\nrepository.\n",
  "docs_url": null,
  "keywords": "aiobotocore medialive type-annotations botocore mypy typeshed autocomplete",
  "license": "mit license",
  "name": "types-aiobotocore-medialive",
  "package_url": "https://pypi.org/project/types-aiobotocore-medialive/",
  "project_url": "https://pypi.org/project/types-aiobotocore-medialive/",
  "project_urls": {
    "Documentation": "https://youtype.github.io/types_aiobotocore_docs/types_aiobotocore_medialive/",
    "Homepage": "https://github.com/youtype/mypy_boto3_builder",
    "Source": "https://github.com/youtype/mypy_boto3_builder",
    "Tracker": "https://github.com/youtype/mypy_boto3_builder/issues"
  },
  "release_url": "https://pypi.org/project/types-aiobotocore-medialive/2.9.0/",
  "requires_dist": [
    "typing-extensions >=4.1.0 ; python_version < \"3.12\""
  ],
  "requires_python": ">=3.7",
  "summary": "type annotations for aiobotocore.medialive 2.9.0 service generated with mypy-boto3-builder 7.21.0",
  "version": "2.9.0",
  "releases": [],
  "developers": [
    "vlad.emelianov.nz@gmail.com",
    "vlad_emelianov"
  ],
  "kwds": "types_aiobotocore_medialive types_aiobotocore_docs aiobotocore aioboto3 mypy_boto3_builder",
  "license_kwds": "mit license",
  "libtype": "pypi",
  "id": "pypi_types_aiobotocore_medialive",
  "homepage": "https://github.com/youtype/mypy_boto3_builder",
  "release_count": 32,
  "dependency_ids": [
    "pypi_typing_extensions"
  ]
}
{
  "classifiers": [
    "license :: osi approved :: mit license",
    "operating system :: os independent",
    "programming language :: python :: 3"
  ],
  "description": "# pytorch ms-ssim\n\n[![license](https://img.shields.io/badge/license-mit-blue.svg)](https://opensource.org/licenses/mit)\n[![downloads](https://pepy.tech/badge/pytorch_msssim)](https://pepy.tech/project/pytorch_msssim)\n[![latest version](https://img.shields.io/badge/latest%20version-0.2.1-blue.svg)](https://github.com/vainf/pytorch_msssim/releases/latest)\n\nfast and differentiable ms-ssim and ssim for pytorch.\n\n<div>\n<img src=\"https://github.com/vainf/images/blob/master/pytorch_msssim/lcs.png\" width=\"25%\">\n\n#### structural similarity (ssim):   \n<img src=\"https://github.com/vainf/images/blob/master/pytorch_msssim/ssim.png\" width=\"50%\">\n\n#### multi-scale structural similarity (ms-ssim):  \n<img src=\"https://github.com/vainf/images/blob/master/pytorch_msssim/ms-ssim.png\" width=\"55%\">\n</div>\n\n#### why it is faster than other versions?\n\ngaussian kernels used in ssim & ms-ssim are seperable. a [separable filter](https://en.wikipedia.org/wiki/separable_filter) in image processing can be written as product of two more simple filters. typically a 2-dimensional convolution operation is separated into two 1-dimensional filters. this reduces the computational costs on an $n\\times m$ image with a $m\\times n$ filter from $\\mathcal{o}(m\\cdot n \\cdot m \\cdot n)$ down to $\\mathcal{o}(m\\cdot n \\cdot (m+n))$. more importantly, seperated kernels are more contiguous and thus cache-friendly than 2-d kernels, which effectively accelerates the computing of ssim/ms-ssim. \n\n# update\n#### _2020.08.21_ (v0.2.1)\n\n3d image support from [@fynnbe](https://github.com/fynnbe)!  \n\n#### _2020.04.30_ (v0.2)\n\nnow (v0.2), **ssim & ms-ssim can produce consistent results as tensorflow and skimage**. a benchmark (pytorch-msssim, tensorflow and skimage) can be found in the tests section.\n\n# installation\n\n```bash\npip install pytorch-msssim\n```\n\n# usage\n\n### 1. basic usage \n\n```python\nfrom pytorch_msssim import ssim, ms_ssim, ssim, ms_ssim\n# x: (n,3,h,w) a batch of non-negative rgb images (0~255)\n# y: (n,3,h,w)  \n\n# calculate ssim & ms-ssim for each image\nssim_val = ssim( x, y, data_range=255, size_average=false) # return (n,)\nms_ssim_val = ms_ssim( x, y, data_range=255, size_average=false ) #(n,)\n\n# set 'size_average=true' to get a scalar value as loss. see tests/tests_loss.py for more details\nssim_loss = 1 - ssim( x, y, data_range=255, size_average=true) # return a scalar\nms_ssim_loss = 1 - ms_ssim( x, y, data_range=255, size_average=true )\n\n# reuse the gaussian kernel with ssim & ms_ssim. \nssim_module = ssim(data_range=255, size_average=true, channel=3) # channel=1 for grayscale images\nms_ssim_module = ms_ssim(data_range=255, size_average=true, channel=3)\n\nssim_loss = 1 - ssim_module(x, y)\nms_ssim_loss = 1 - ms_ssim_module(x, y)\n```\n### 2. normalized input\nif you need to calculate ms-ssim/ssim on normalized images, please denormalize them to the range of [0, 1] or [0, 255] first.\n\n```python\n# x: (n,3,h,w) a batch of normalized images (-1 ~ 1)\n# y: (n,3,h,w)  \nx = (x + 1) / 2  # [-1, 1] => [0, 1]\ny = (y + 1) / 2  \nms_ssim_val = ms_ssim( x, y, data_range=1, size_average=false ) #(n,)\n```\n\n### 3. enable nonnegative_ssim\n\nfor ssim, it is recommended to set `nonnegative_ssim=true` to avoid negative results. however, this option is set to `false` by default to keep it consistent with tensorflow and skimage.\n\nfor ms-ssim, there is no nonnegative_ssim option and the ssim reponses is forced to be non-negative to avoid nan results.\n\n\n# tests and examples\n\n```bash\ncd tests\n```\n### 1. benchmark\n\n```bash\n# requires tf2\npython tests_comparisons_tf_skimage.py \n\n# or skimage only\n# python tests_comparisons_skimage.py \n```\n\noutputs:\n\n```\ndownloading test image...\n===================================\n             test ssim\n===================================\n====> single image\nrepeat 100 times\nsigma=0.0 ssim_skimage=1.000000 (147.2605 ms), ssim_tf=1.000000 (343.4146 ms), ssim_torch=1.000000 (92.9151 ms)\nsigma=10.0 ssim_skimage=0.932423 (147.5198 ms), ssim_tf=0.932661 (343.5191 ms), ssim_torch=0.932421 (95.6283 ms)\nsigma=20.0 ssim_skimage=0.785744 (152.6441 ms), ssim_tf=0.785733 (343.4085 ms), ssim_torch=0.785738 (87.5639 ms)\nsigma=30.0 ssim_skimage=0.636902 (145.5763 ms), ssim_tf=0.636902 (343.5312 ms), ssim_torch=0.636895 (90.4084 ms)\nsigma=40.0 ssim_skimage=0.515798 (147.3798 ms), ssim_tf=0.515801 (344.8978 ms), ssim_torch=0.515791 (96.4440 ms)\nsigma=50.0 ssim_skimage=0.422011 (148.2900 ms), ssim_tf=0.422007 (345.4076 ms), ssim_torch=0.422005 (86.3799 ms)\nsigma=60.0 ssim_skimage=0.351139 (146.2039 ms), ssim_tf=0.351139 (343.4428 ms), ssim_torch=0.351133 (93.3445 ms)\nsigma=70.0 ssim_skimage=0.296336 (145.5341 ms), ssim_tf=0.296337 (345.2255 ms), ssim_torch=0.296331 (92.6771 ms)\nsigma=80.0 ssim_skimage=0.253328 (147.6655 ms), ssim_tf=0.253328 (343.1386 ms), ssim_torch=0.253324 (82.5985 ms)\nsigma=90.0 ssim_skimage=0.219404 (142.6025 ms), ssim_tf=0.219405 (345.8275 ms), ssim_torch=0.219400 (100.9946 ms)\nsigma=100.0 ssim_skimage=0.192681 (144.5597 ms), ssim_tf=0.192682 (346.5489 ms), ssim_torch=0.192678 (85.0229 ms)\npass!\n====> batch\npass!\n\n\n===================================\n             test ms-ssim\n===================================\n====> single image\nrepeat 100 times\nsigma=0.0 msssim_tf=1.000000 (671.5363 ms), msssim_torch=1.000000 (125.1403 ms)\nsigma=10.0 msssim_tf=0.991137 (669.0296 ms), msssim_torch=0.991086 (113.4078 ms)\nsigma=20.0 msssim_tf=0.967292 (670.5530 ms), msssim_torch=0.967281 (107.6428 ms)\nsigma=30.0 msssim_tf=0.934875 (668.7717 ms), msssim_torch=0.934875 (111.3334 ms)\nsigma=40.0 msssim_tf=0.897660 (669.0801 ms), msssim_torch=0.897658 (107.3700 ms)\nsigma=50.0 msssim_tf=0.858956 (671.4629 ms), msssim_torch=0.858954 (100.9959 ms)\nsigma=60.0 msssim_tf=0.820477 (670.5424 ms), msssim_torch=0.820475 (103.4489 ms)\nsigma=70.0 msssim_tf=0.783511 (671.9357 ms), msssim_torch=0.783507 (113.9048 ms)\nsigma=80.0 msssim_tf=0.749522 (672.3925 ms), msssim_torch=0.749518 (120.3891 ms)\nsigma=90.0 msssim_tf=0.716221 (672.9066 ms), msssim_torch=0.716217 (118.3788 ms)\nsigma=100.0 msssim_tf=0.684958 (675.2075 ms), msssim_torch=0.684953 (117.9481 ms)\npass\n====> batch\npass\n```\n\n<div>\n<img src=\"https://github.com/vainf/images/blob/master/pytorch_msssim/simga_0_ssim_1.0000.png\"   width=\"20%\">\n<figcaption>ssim=1.0000</figcaption>\n<img src=\"https://github.com/vainf/images/blob/master/pytorch_msssim/simga_50_ssim_0.4225.png\"  width=\"20%\">\n<figcaption>ssim=0.4225</figcaption>\n<img src=\"https://github.com/vainf/images/blob/master/pytorch_msssim/simga_100_ssim_0.1924.png\"    width=\"20%\">\n<figcaption>ssim=0.1924</figcaption>\n</div>\n\n### 2. ms_ssim as loss function\n\nsee ['tests/tests_loss.py'](https://github.com/vainf/pytorch-msssim/tree/master/tests/tests_loss.py) for more details about how to use ssim or ms_ssim as loss functions\n\n### 3. autoencoder\n\nsee ['tests/ae_example'](https://github.com/vainf/pytorch-msssim/tree/master/tests/ae_example)\n\n![results](https://github.com/vainf/images/blob/master/pytorch_msssim/ae_ms_ssim.jpg)\n*left: the original image, right: the reconstructed image*\n\n# references\n\n[https://github.com/jorge-pessoa/pytorch-msssim](https://github.com/jorge-pessoa/pytorch-msssim)  \n[https://ece.uwaterloo.ca/~z70wang/research/ssim/](https://ece.uwaterloo.ca/~z70wang/research/ssim/)  \n[https://ece.uwaterloo.ca/~z70wang/publications/msssim.pdf](https://ece.uwaterloo.ca/~z70wang/publications/msssim.pdf)  \n[matlab code](https://ece.uwaterloo.ca/~z70wang/research/iwssim/)   \n[ssim & ms-ssim from tensorflow](https://github.com/tensorflow/tensorflow/blob/v2.1.0/tensorflow/python/ops/image_ops_impl.py#l3314-l3438) \n",
  "docs_url": null,
  "keywords": "",
  "license": "",
  "name": "pytorch-msssim",
  "package_url": "https://pypi.org/project/pytorch-msssim/",
  "project_url": "https://pypi.org/project/pytorch-msssim/",
  "project_urls": {
    "Homepage": "https://github.com/VainF/pytorch-msssim"
  },
  "release_url": "https://pypi.org/project/pytorch-msssim/1.0.0/",
  "requires_dist": [
    "torch"
  ],
  "requires_python": "",
  "summary": "fast and differentiable ms-ssim and ssim for pytorch.",
  "version": "1.0.0",
  "releases": [],
  "developers": [
    "gongfan@u.nus.edu",
    "gongfan_fang"
  ],
  "kwds": "ms_ssim ssim_skimage ssim ms_ssim_module pytorch_msssim",
  "license_kwds": "",
  "libtype": "pypi",
  "id": "pypi_pytorch_msssim",
  "homepage": "https://github.com/vainf/pytorch-msssim",
  "release_count": 8,
  "dependency_ids": [
    "pypi_torch"
  ]
}
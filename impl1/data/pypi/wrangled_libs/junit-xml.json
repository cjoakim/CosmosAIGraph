{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: developers",
    "license :: freely distributable",
    "license :: osi approved :: mit license",
    "operating system :: os independent",
    "programming language :: python",
    "programming language :: python :: 3",
    "topic :: software development :: build tools",
    "topic :: software development :: testing"
  ],
  "description": "python-junit-xml\n================\n.. image:: https://travis-ci.org/kyrus/python-junit-xml.png?branch=master\n\nabout\n-----\n\na python module for creating junit xml test result documents that can be\nread by tools such as jenkins or bamboo. if you are ever working with test tool or\ntest suite written in python and want to take advantage of jenkins' or bamboo's\npretty graphs and test reporting capabilities, this module will let you\ngenerate the xml test reports.\n\n*as there is no definitive jenkins junit xsd that i could find, the xml\ndocuments created by this module support a schema based on google\nsearches and the jenkins junit xml reader source code. file a bug if\nsomething doesn't work like you expect it to.\nfor bamboo situation is the same.*\n\ninstallation\n------------\n\ninstall using pip or easy_install:\n\n::\n\n\tpip install junit-xml\n\tor\n\teasy_install junit-xml\n\nyou can also clone the git repository from github and install it manually:\n\n::\n\n    git clone https://github.com/kyrus/python-junit-xml.git\n    python setup.py install\n\nusing\n-----\n\ncreate a test suite, add a test case, and print it to the screen:\n\n.. code-block:: python\n\n    from junit_xml import testsuite, testcase\n\n    test_cases = [testcase('test1', 'some.class.name', 123.345, 'i am stdout!', 'i am stderr!')]\n    ts = testsuite(\"my test suite\", test_cases)\n    # pretty printing is on by default but can be disabled using prettyprint=false\n    print(testsuite.to_xml_string([ts]))\n\nproduces the following output\n\n.. code-block:: xml\n\n    <?xml version=\"1.0\" ?>\n    <testsuites>\n        <testsuite errors=\"0\" failures=\"0\" name=\"my test suite\" tests=\"1\">\n            <testcase classname=\"some.class.name\" name=\"test1\" time=\"123.345000\">\n                <system-out>\n                    i am stdout!\n                </system-out>\n                <system-err>\n                    i am stderr!\n                </system-err>\n            </testcase>\n        </testsuite>\n    </testsuites>\n\nwriting xml to a file:\n\n.. code-block:: python\n\n    # you can also write the xml to a file and not pretty print it\n    with open('output.xml', 'w') as f:\n        testsuite.to_file(f, [ts], prettyprint=false)\n\nsee the docs and unit tests for more examples.\n\nnote: unicode characters identified as \"illegal or discouraged\" are automatically\nstripped from the xml string or file.\n\nrunning the tests\n-----------------\n\n::\n\n    # activate your virtualenv\n    pip install tox\n    tox\n\n\n\n",
  "docs_url": null,
  "keywords": "",
  "license": "mit",
  "name": "junit-xml",
  "package_url": "https://pypi.org/project/junit-xml/",
  "project_url": "https://pypi.org/project/junit-xml/",
  "project_urls": {
    "Homepage": "https://github.com/kyrus/python-junit-xml"
  },
  "release_url": "https://pypi.org/project/junit-xml/1.9/",
  "requires_dist": [
    "six"
  ],
  "requires_python": "",
  "summary": "creates junit xml test result documents that can be read by tools such as jenkins",
  "version": "1.9",
  "releases": [],
  "developers": [
    "brian@kyr.us",
    "brian_beyer"
  ],
  "kwds": "junit_xml junit xml jenkins to_xml_string",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_junit_xml",
  "homepage": "https://github.com/kyrus/python-junit-xml",
  "release_count": 10,
  "dependency_ids": [
    "pypi_six"
  ]
}
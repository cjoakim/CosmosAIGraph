{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: developers",
    "license :: osi approved :: apache software license",
    "operating system :: os independent",
    "programming language :: python",
    "programming language :: python :: 2",
    "programming language :: python :: 2.6",
    "programming language :: python :: 2.7",
    "programming language :: python :: 3",
    "programming language :: python :: 3.3",
    "programming language :: python :: 3.4",
    "programming language :: python :: 3.5",
    "programming language :: python :: 3.6",
    "programming language :: python :: 3.7",
    "programming language :: python :: implementation :: cpython",
    "programming language :: python :: implementation :: pypy",
    "topic :: software development :: libraries :: python modules"
  ],
  "description": "\n| |travisci| |version| |versions| |impls| |wheel| |coverage| |br-coverage|\n\n.. |travisci| image:: https://api.travis-ci.org/jonathaneunice/nulltype.svg\n    :target: http://travis-ci.org/jonathaneunice/nulltype\n\n.. |version| image:: http://img.shields.io/pypi/v/nulltype.svg?style=flat\n    :alt: pypi package latest release\n    :target: https://pypi.org/project/nulltype\n\n.. |versions| image:: https://img.shields.io/pypi/pyversions/nulltype.svg\n    :alt: supported versions\n    :target: https://pypi.org/project/nulltype\n\n.. |impls| image:: https://img.shields.io/pypi/implementation/nulltype.svg\n    :alt: supported implementations\n    :target: https://pypi.org/project/nulltype\n\n.. |wheel| image:: https://img.shields.io/pypi/wheel/nulltype.svg\n    :alt: wheel packaging support\n    :target: https://pypi.org/project/nulltype\n\n.. |coverage| image:: https://img.shields.io/badge/test_coverage-100%25-6600cc.svg\n    :alt: test line coverage\n    :target: https://pypi.org/project/nulltype\n\n.. |br-coverage| image:: https://img.shields.io/badge/branch_coverage-100%25-6600cc.svg\n    :alt: test branch coverage\n    :target: https://pypi.org/project/nulltype\n\nhelps define 'null' values and sentinels parallel to, but different from,\npython built-ins such as ``none``, ``false``, and ``true``.\n\n``none`` is a great `sentinel value <http://en.wikipedia.org/wiki/sentinel_value>`_\nand a classic implementation of the\n`null object pattern <http://en.wikipedia.org/wiki/null_object_pattern>`_.\n\nbut there are times that you need more than one nullish value to represent\ndifferent aspects of emptiness. \"nothing there\" is logically different from\n\"undefined,\" \"prohibited,\" \"end of data,\" and other kinds of \"null.\"\n\n``nulltype`` helps you easily represent different aspects of emptiness in a way\nthat doesn't overload ``none`` (or ``false``, ``0``, ``{}``, ``[]``, ``\"\"``, or\nany of the other possible \"there's nothing here!\" values). it helps create\ndesignated identifiers with specific meanings such as ``passthrough``,\n``prohibited``, and ``undefined``.\n\non the off chance that you need truish sentinels that aren't ``true``, it will\nhelp you do that too. and it will do so in an easily-consumed,\nright-off-the-shelf, fully-tested tested way.\n\nusage\n=====\n\n::\n\n    from nulltype import nulltype\n\n    void = nulltype('void')\n\n    # following just to show it's working\n    assert bool(void) == false\n    assert len(empvoidty) == 0\n    assert list(void) == []\n    assert void.some_attribute is empty\n    assert void[22] is nothing\n    assert void(\"hey\", 12) is empty\n\nyou can create as many custom null values as you like. for convenience, several\ndefault values, ``empty``, ``null``, and ``nothing``, are exported. that way,\nif you don't really want to create your own, you can easily import a\npre-constituted null value::\n\n    from nulltype import empty\n\nthe power of nothing\n====================\n\nalternate null types can be particularly useful when parsing\ndata or traversing data structures which might or might not be\npresent. this is common in dealing with the data returned by\n`rest <http://en.wikipedia.org/wiki/representational_state_transfer>`_\napis, for instance.\n\nas one example, `the documentation for google's gmail api <https://developers.google.com/gmail/api/quickstart/quickstart-python>`_\nsuggests the following code::\n\n    threads = gmail_service.users().threads().list(userid='me').execute()\n    if threads['threads']:\n        for thread in threads['threads']:\n            print 'thread id: %s' % (thread['id'])\n\nthere is a lot going on there just to avoid a problematic deference.\nif instead you have a ``nothing`` null type defined, the code is\nshorter (and avoids an extra, very transient variable)::\n\n    results = gmail_service.users().threads().list(userid='me').execute()\n    for thread in results.get('threads', nothing):\n        print 'thread id: %s' % (thread['id'])\n\nthree lines versus four may not seem like a big advantage, but the value\nincreases with the complexity of the task. many such \"if it's there, then...\"\nconstructs are deeply nested when dealing with api results, xml parse trees,\nand other fundamentally nested information sources. saving a guard condition\non every one of the nesting levels adds up quickly.\n\nwhile you could almost do this in stock python, unlike ``nothing``, ``none`` is\nnot iterable. you might use an empty list ``[]`` (or an equivalent global such\nas ``emptylist``) as the alternative value for the ``get`` method. going by the\ndocumentation of many parsers and apis, however, such uses aren't broadly\nidiomatic in today's python community. the ``emptylist`` approach also is very\nspecific to routines returning lists, whereas the \"go ahead, get it if you can\"\n``nulltype`` model works well for longer chains of access::\n\n    results.get(\"payload\", nothing).get(\"headers\", nothing)\n\nwill return the correct object if it's there, but ``nothing`` otherwise.\nand if you then try to test it (e.g. with ``if`` or a logical expression)\nor iterate over it (e.g. with ``for``), it will act as though it's an empty\nlist, or ``false``--whatever is most useful in a given context. whether you're\niterating, indexing, dereferencing, calling, or otherwise accessing it, a\n``nulltype`` is unperturbed.\n\n``nothing`` isn't nothing. it's something that will simplify your code.\n\ngeneral sentinels and distinguished values\n==========================================\n\nwhile ``nulltype`` is frequently used to define new kinds of \"empty\" values,\nit's actually more general. beyond different forms of 'null', ``nulltype``\ninstances are good general-purpose sentinels or designated values. instead of\nthe old::\n\n    class mysentinelclass(object):\n        pass\n\nuse::\n\n    mysentinel = nulltype('mysentinel')\n\nthat gives you a value with known truthiness properties and a nicer\nprinted representation.::\n\n    >>> print mysentinelclass               # fugly\n    <class '__main__.mysentinelclass'>\n\n    >>> print mysentinel                    # just right\n    mysentinel\n\non the off chance you want a sentinel value that is\n`truthy <https://en.wikipedia.org/wiki/truthiness>`_ rather than falsey /\nempty, use ``nonnulltype``, a companion to ``nulltype`` that operates in\nalmost the exact same way, but that evaluates as true.::\n\n    from nulltype import nonnulltype\n\n    full = nonnulltype('full')\n\n    assert bool(full) is true\n    assert len(full) == 1\n    assert list(full) == [full]\n    assert full.some_attribute is full\n    assert full[22] is full\n    assert full(\"hey\", 12) is full\n\nexperience suggests that nullish sentinels are generally adequate and\npreferable. and the \"everything folds back to the same value\" nature of even\n``nonnulltype`` gives a somewhat null-like, or at least non-reactive, nature.\nbut if you do want a true-ish sentinel, there it is.\n\n\nuniqueness\n==========\n\n``nulltype`` instances are meant to be `singletons\n<http://en.wikipedia.org/wiki/singleton_pattern>`_, with just one per program.\nthey almost are, though technically multiple ``nulltype`` instances are\nreasonable, making it more of a `multiton pattern\n<http://en.wikipedia.org/wiki/multiton_pattern>`_.\n\nthe uniqueness of each singleton is currently not enforced, making it a usage\nconvention rather than strict law. with even minimal care, this is a problem\nroughly 0% of the time.\n\n\nnotes\n=====\n\n* successfully packaged for, and\n  tested against, all late-model versions of python: 2.6, 2.7, 3.3,\n  3.4, 3.5, 3.6, and 3.7 pre-release, as well as recent builds of pypy and pypy3. \n\n* see ``changes.yml`` for the complete change log.\n\n* automated multi-version testing managed with `pytest\n  <http://pypi.python.org/pypi/pytest>`_, `pytest-cov\n  <http://pypi.python.org/pypi/pytest-cov>`_,\n  `coverage <https://pypi.python.org/pypi/coverage/4.0b1>`_\n  and `tox\n  <http://pypi.python.org/pypi/tox>`_. continuous integration testing\n  with `travis-ci <https://travis-ci.org/jonathaneunice/nulltype>`_.\n  packaging linting with `pyroma <https://pypi.python.org/pypi/pyroma>`_.\n\n* similar modules include `sentinels <http://pypi.org/project/sentinels>`_ and `null\n  <http://pypi.org/project/null>`_. of these, i prefer ``sentinels``\n  because it is clearly python 3 ready, includes a ``pickle``\n  mechanism.  `noattr <https://pypi.org/project/noattr>`_ is a\n  new alternative.\n\n* for a module that uses the null value ``empty`` to make the parsing of \n  json and other data formats easier, see \n  `items <https://pypi.org/project/items>`_ \n\n* the author, `jonathan eunice <mailto:jonathan.eunice@gmail.com>`_ or\n  `@jeunice on twitter <http://twitter.com/jeunice>`_,\n  welcomes your comments and suggestions.\n\ninstallation\n============\n\nto install or upgrade to the latest version::\n\n    pip install -u nulltype\n\nyou may need to prefix this with ``sudo`` to authorize installation on unix,\nlinux, and macos. in environments without super-user privileges, you may want\nto use ``pip``'s ``--user`` option, to install only for a single user, rather\nthan system-wide. on a system with multiple versions of python, you may also\nneed to use specific ``pip3`` or ``pip2`` commands instead of the stock\n``pip``. as a backup, running pip as a python module can save your sanity in\ncomplex cases where ``pip`` versions aren't working well as standalone\ncommands::\n\n    python3.6 -m pip install -u nulltype\n\ntesting\n=======\n\nto run the module tests, use one of these commands::\n\n    tox                # normal run - speed optimized\n    tox -e py27        # run for a specific version only (e.g. py27, py34)\n    tox -c toxcov.ini  # run full coverage tests\n",
  "docs_url": null,
  "keywords": "null none nothing empty false true singleton sentinel",
  "license": "apache license 2.0",
  "name": "nulltype",
  "package_url": "https://pypi.org/project/nulltype/",
  "project_url": "https://pypi.org/project/nulltype/",
  "project_urls": {
    "Homepage": "https://bitbucket.org/jeunice/nulltype"
  },
  "release_url": "https://pypi.org/project/nulltype/2.3.1/",
  "requires_dist": [],
  "requires_python": "",
  "summary": "null values and sentinels like (but not) none, false & true",
  "version": "2.3.1",
  "releases": [],
  "developers": [
    "jonathan.eunice@gmail.com",
    "jonathan_eunice"
  ],
  "kwds": "pypi pyversions nulltype pypy3 null_object_pattern",
  "license_kwds": "apache license 2.0",
  "libtype": "pypi",
  "id": "pypi_nulltype",
  "homepage": "https://bitbucket.org/jeunice/nulltype",
  "release_count": 29,
  "dependency_ids": []
}
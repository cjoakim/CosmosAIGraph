{
  "classifiers": [
    "development status :: 7 - inactive",
    "framework :: aws cdk",
    "framework :: aws cdk :: 1",
    "intended audience :: developers",
    "license :: osi approved",
    "operating system :: os independent",
    "programming language :: javascript",
    "programming language :: python :: 3 :: only",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "typing :: typed"
  ],
  "description": "# amazon s3 construct library\n\n<!--begin stability banner-->---\n\n\n![end-of-support](https://img.shields.io/badge/end--of--support-critical.svg?style=for-the-badge)\n\n> aws cdk v1 has reached end-of-support on 2023-06-01.\n> this package is no longer being updated, and users should migrate to aws cdk v2.\n>\n> for more information on how to migrate, see the [*migrating to aws cdk v2* guide](https://docs.aws.amazon.com/cdk/v2/guide/migrating-v2.html).\n\n---\n<!--end stability banner-->\n\ndefine an unencrypted s3 bucket.\n\n```python\nbucket = s3.bucket(self, \"myfirstbucket\")\n```\n\n`bucket` constructs expose the following deploy-time attributes:\n\n* `bucketarn` - the arn of the bucket (i.e. `arn:aws:s3:::bucket_name`)\n* `bucketname` - the name of the bucket (i.e. `bucket_name`)\n* `bucketwebsiteurl` - the website url of the bucket (i.e.\n  `http://bucket_name.s3-website-us-west-1.amazonaws.com`)\n* `bucketdomainname` - the url of the bucket (i.e. `bucket_name.s3.amazonaws.com`)\n* `bucketdualstackdomainname` - the dual-stack url of the bucket (i.e.\n  `bucket_name.s3.dualstack.eu-west-1.amazonaws.com`)\n* `bucketregionaldomainname` - the regional url of the bucket (i.e.\n  `bucket_name.s3.eu-west-1.amazonaws.com`)\n* `arnforobjects(pattern)` - the arn of an object or objects within the bucket (i.e.\n  `arn:aws:s3:::bucket_name/exampleobject.png` or\n  `arn:aws:s3:::bucket_name/development/*`)\n* `urlforobject(key)` - the http url of an object within the bucket (i.e.\n  `https://s3.cn-north-1.amazonaws.com.cn/china-bucket/mykey`)\n* `virtualhostedurlforobject(key)` - the virtual-hosted style http url of an object\n  within the bucket (i.e. `https://china-bucket-s3.cn-north-1.amazonaws.com.cn/mykey`)\n* `s3urlforobject(key)` - the s3 url of an object within the bucket (i.e.\n  `s3://bucket/mykey`)\n\n## encryption\n\ndefine a kms-encrypted bucket:\n\n```python\nbucket = s3.bucket(self, \"myencryptedbucket\",\n    encryption=s3.bucketencryption.kms\n)\n\n# you can access the encryption key:\nassert(bucket.encryption_key instanceof kms.key)\n```\n\nyou can also supply your own key:\n\n```python\nmy_kms_key = kms.key(self, \"mykey\")\n\nbucket = s3.bucket(self, \"myencryptedbucket\",\n    encryption=s3.bucketencryption.kms,\n    encryption_key=my_kms_key\n)\n\nassert(bucket.encryption_key == my_kms_key)\n```\n\nenable kms-sse encryption via [s3 bucket keys](https://docs.aws.amazon.com/amazons3/latest/dev/bucket-key.html):\n\n```python\nbucket = s3.bucket(self, \"myencryptedbucket\",\n    encryption=s3.bucketencryption.kms,\n    bucket_key_enabled=true\n)\n```\n\nuse `bucketencryption.managedkms` to use the s3 master kms key:\n\n```python\nbucket = s3.bucket(self, \"buck\",\n    encryption=s3.bucketencryption.kms_managed\n)\n\nassert(bucket.encryption_key == null)\n```\n\n## permissions\n\na bucket policy will be automatically created for the bucket upon the first call to\n`addtoresourcepolicy(statement)`:\n\n```python\nbucket = s3.bucket(self, \"mybucket\")\nresult = bucket.add_to_resource_policy(iam.policystatement(\n    actions=[\"s3:getobject\"],\n    resources=[bucket.arn_for_objects(\"file.txt\")],\n    principals=[iam.accountrootprincipal()]\n))\n```\n\nif you try to add a policy statement to an existing bucket, this method will\nnot do anything:\n\n```python\nbucket = s3.bucket.from_bucket_name(self, \"existingbucket\", \"bucket-name\")\n\n# no policy statement will be added to the resource\nresult = bucket.add_to_resource_policy(iam.policystatement(\n    actions=[\"s3:getobject\"],\n    resources=[bucket.arn_for_objects(\"file.txt\")],\n    principals=[iam.accountrootprincipal()]\n))\n```\n\nthat's because it's not possible to tell whether the bucket\nalready has a policy attached, let alone to re-use that policy to add more\nstatements to it. we recommend that you always check the result of the call:\n\n```python\nbucket = s3.bucket(self, \"mybucket\")\nresult = bucket.add_to_resource_policy(iam.policystatement(\n    actions=[\"s3:getobject\"],\n    resources=[bucket.arn_for_objects(\"file.txt\")],\n    principals=[iam.accountrootprincipal()]\n))\n\nif not result.statement_added:\n    pass\n```\n\nthe bucket policy can be directly accessed after creation to add statements or\nadjust the removal policy.\n\n```python\nbucket = s3.bucket(self, \"mybucket\")\nbucket.policy.apply_removal_policy(cdk.removalpolicy.retain)\n```\n\nmost of the time, you won't have to manipulate the bucket policy directly.\ninstead, buckets have \"grant\" methods called to give prepackaged sets of permissions\nto other resources. for example:\n\n```python\n# my_lambda: lambda.function\n\n\nbucket = s3.bucket(self, \"mybucket\")\nbucket.grant_read_write(my_lambda)\n```\n\nwill give the lambda's execution role permissions to read and write\nfrom the bucket.\n\n## aws foundational security best practices\n\n### enforcing ssl\n\nto require all requests use secure socket layer (ssl):\n\n```python\nbucket = s3.bucket(self, \"bucket\",\n    enforce_ssl=true\n)\n```\n\n## sharing buckets between stacks\n\nto use a bucket in a different stack in the same cdk application, pass the object to the other stack:\n\n```python\n#\n# stack that defines the bucket\n#\nclass producer(cdk.stack):\n\n    def __init__(self, scope, id, *, description=none, env=none, stackname=none, tags=none, synthesizer=none, terminationprotection=none, analyticsreporting=none):\n        super().__init__(scope, id, description=description, env=env, stackname=stackname, tags=tags, synthesizer=synthesizer, terminationprotection=terminationprotection, analyticsreporting=analyticsreporting)\n\n        bucket = s3.bucket(self, \"mybucket\",\n            removal_policy=cdk.removalpolicy.destroy\n        )\n        self.my_bucket = bucket\n\n#\n# stack that consumes the bucket\n#\nclass consumer(cdk.stack):\n    def __init__(self, scope, id, *, userbucket, description=none, env=none, stackname=none, tags=none, synthesizer=none, terminationprotection=none, analyticsreporting=none):\n        super().__init__(scope, id, userbucket=userbucket, description=description, env=env, stackname=stackname, tags=tags, synthesizer=synthesizer, terminationprotection=terminationprotection, analyticsreporting=analyticsreporting)\n\n        user = iam.user(self, \"myuser\")\n        user_bucket.grant_read_write(user)\n\nproducer = producer(app, \"producerstack\")\nconsumer(app, \"consumerstack\", user_bucket=producer.my_bucket)\n```\n\n## importing existing buckets\n\nto import an existing bucket into your cdk application, use the `bucket.frombucketattributes`\nfactory method. this method accepts `bucketattributes` which describes the properties of an already\nexisting bucket:\n\n```python\n# my_lambda: lambda.function\n\nbucket = s3.bucket.from_bucket_attributes(self, \"importedbucket\",\n    bucket_arn=\"arn:aws:s3:::my-bucket\"\n)\n\n# now you can just call methods on the bucket\nbucket.add_event_notification(s3.eventtype.object_created, s3n.lambdadestination(my_lambda), prefix=\"home/myusername/*\")\n```\n\nalternatively, short-hand factories are available as `bucket.frombucketname` and\n`bucket.frombucketarn`, which will derive all bucket attributes from the bucket\nname or arn respectively:\n\n```python\nby_name = s3.bucket.from_bucket_name(self, \"bucketbyname\", \"my-bucket\")\nby_arn = s3.bucket.from_bucket_arn(self, \"bucketbyarn\", \"arn:aws:s3:::my-bucket\")\n```\n\nthe bucket's region defaults to the current stack's region, but can also be explicitly set in cases where one of the bucket's\nregional properties needs to contain the correct values.\n\n```python\nmy_cross_region_bucket = s3.bucket.from_bucket_attributes(self, \"crossregionimport\",\n    bucket_arn=\"arn:aws:s3:::my-bucket\",\n    region=\"us-east-1\"\n)\n```\n\n## bucket notifications\n\nthe amazon s3 notification feature enables you to receive notifications when\ncertain events happen in your bucket as described under [s3 bucket\nnotifications] of the s3 developer guide.\n\nto subscribe for bucket notifications, use the `bucket.addeventnotification` method. the\n`bucket.addobjectcreatednotification` and `bucket.addobjectremovednotification` can also be used for\nthese common use cases.\n\nthe following example will subscribe an sns topic to be notified of all `s3:objectcreated:*` events:\n\n```python\nbucket = s3.bucket(self, \"mybucket\")\ntopic = sns.topic(self, \"mytopic\")\nbucket.add_event_notification(s3.eventtype.object_created, s3n.snsdestination(topic))\n```\n\nthis call will also ensure that the topic policy can accept notifications for\nthis specific bucket.\n\nsupported s3 notification targets are exposed by the `@aws-cdk/aws-s3-notifications` package.\n\nit is also possible to specify s3 object key filters when subscribing. the\nfollowing example will notify `myqueue` when objects prefixed with `foo/` and\nhave the `.jpg` suffix are removed from the bucket.\n\n```python\n# my_queue: sqs.queue\n\nbucket = s3.bucket(self, \"mybucket\")\nbucket.add_event_notification(s3.eventtype.object_removed,\n    s3n.sqsdestination(my_queue), prefix=\"foo/\", suffix=\".jpg\")\n```\n\nadding notifications on existing buckets:\n\n```python\n# topic: sns.topic\n\nbucket = s3.bucket.from_bucket_attributes(self, \"importedbucket\",\n    bucket_arn=\"arn:aws:s3:::my-bucket\"\n)\nbucket.add_event_notification(s3.eventtype.object_created, s3n.snsdestination(topic))\n```\n\nwhen you add an event notification to a bucket, a custom resource is created to\nmanage the notifications. by default, a new role is created for the lambda\nfunction that implements this feature. if you want to use your own role instead,\nyou should provide it in the `bucket` constructor:\n\n```python\n# my_role: iam.irole\n\nbucket = s3.bucket(self, \"mybucket\",\n    notifications_handler_role=my_role\n)\n```\n\nwhatever role you provide, the cdk will try to modify it by adding the\npermissions from `awslambdabasicexecutionrole` (an aws managed policy) as well\nas the permissions `s3:putbucketnotification` and `s3:getbucketnotification`.\nif you\u2019re passing an imported role, and you don\u2019t want this to happen, configure\nit to be immutable:\n\n```python\nimported_role = iam.role.from_role_arn(self, \"role\", \"arn:aws:iam::123456789012:role/rolename\",\n    mutable=false\n)\n```\n\n> if you provide an imported immutable role, make sure that it has at least all\n> the permissions mentioned above. otherwise, the deployment will fail!\n\n### eventbridge notifications\n\namazon s3 can send events to amazon eventbridge whenever certain events happen in your bucket.\nunlike other destinations, you don't need to select which event types you want to deliver.\n\nthe following example will enable eventbridge notifications:\n\n```python\nbucket = s3.bucket(self, \"myeventbridgebucket\",\n    event_bridge_enabled=true\n)\n```\n\n## block public access\n\nuse `blockpublicaccess` to specify [block public access settings](https://docs.aws.amazon.com/amazons3/latest/dev/access-control-block-public-access.html) on the bucket.\n\nenable all block public access settings:\n\n```python\nbucket = s3.bucket(self, \"myblockedbucket\",\n    block_public_access=s3.blockpublicaccess.block_all\n)\n```\n\nblock and ignore public acls:\n\n```python\nbucket = s3.bucket(self, \"myblockedbucket\",\n    block_public_access=s3.blockpublicaccess.block_acls\n)\n```\n\nalternatively, specify the settings manually:\n\n```python\nbucket = s3.bucket(self, \"myblockedbucket\",\n    block_public_access=s3.blockpublicaccess(block_public_policy=true)\n)\n```\n\nwhen `blockpublicpolicy` is set to `true`, `grantpublicread()` throws an error.\n\n## logging configuration\n\nuse `serveraccesslogsbucket` to describe where server access logs are to be stored.\n\n```python\naccess_logs_bucket = s3.bucket(self, \"accesslogsbucket\")\n\nbucket = s3.bucket(self, \"mybucket\",\n    server_access_logs_bucket=access_logs_bucket\n)\n```\n\nit's also possible to specify a prefix for amazon s3 to assign to all log object keys.\n\n```python\naccess_logs_bucket = s3.bucket(self, \"accesslogsbucket\")\n\nbucket = s3.bucket(self, \"mybucket\",\n    server_access_logs_bucket=access_logs_bucket,\n    server_access_logs_prefix=\"logs\"\n)\n```\n\n## s3 inventory\n\nan [inventory](https://docs.aws.amazon.com/amazons3/latest/dev/storage-inventory.html) contains a list of the objects in the source bucket and metadata for each object. the inventory lists are stored in the destination bucket as a csv file compressed with gzip, as an apache optimized row columnar (orc) file compressed with zlib, or as an apache parquet (parquet) file compressed with snappy.\n\nyou can configure multiple inventory lists for a bucket. you can configure what object metadata to include in the inventory, whether to list all object versions or only current versions, where to store the inventory list file output, and whether to generate the inventory on a daily or weekly basis.\n\n```python\ninventory_bucket = s3.bucket(self, \"inventorybucket\")\n\ndata_bucket = s3.bucket(self, \"databucket\",\n    inventories=[s3.inventory(\n        frequency=s3.inventoryfrequency.daily,\n        include_object_versions=s3.inventoryobjectversion.current,\n        destination=s3.inventorydestination(\n            bucket=inventory_bucket\n        )\n    ), s3.inventory(\n        frequency=s3.inventoryfrequency.weekly,\n        include_object_versions=s3.inventoryobjectversion.all,\n        destination=s3.inventorydestination(\n            bucket=inventory_bucket,\n            prefix=\"with-all-versions\"\n        )\n    )\n    ]\n)\n```\n\nif the destination bucket is created as part of the same cdk application, the necessary permissions will be automatically added to the bucket policy.\nhowever, if you use an imported bucket (i.e `bucket.fromxxx()`), you'll have to make sure it contains the following policy document:\n\n```json\n{\n  \"version\": \"2012-10-17\",\n  \"statement\": [\n    {\n      \"sid\": \"inventoryandanalyticsexamplepolicy\",\n      \"effect\": \"allow\",\n      \"principal\": { \"service\": \"s3.amazonaws.com\" },\n      \"action\": \"s3:putobject\",\n      \"resource\": [\"arn:aws:s3:::destinationbucket/*\"]\n    }\n  ]\n}\n```\n\n## website redirection\n\nyou can use the two following properties to specify the bucket [redirection policy](https://docs.aws.amazon.com/amazons3/latest/dev/how-to-page-redirect.html#advanced-conditional-redirects). please note that these methods cannot both be applied to the same bucket.\n\n### static redirection\n\nyou can statically redirect a to a given bucket url or any other host name with `websiteredirect`:\n\n```python\nbucket = s3.bucket(self, \"myredirectedbucket\",\n    website_redirect=s3.redirecttarget(host_name=\"www.example.com\")\n)\n```\n\n### routing rules\n\nalternatively, you can also define multiple `websiteroutingrules`, to define complex, conditional redirections:\n\n```python\nbucket = s3.bucket(self, \"myredirectedbucket\",\n    website_routing_rules=[s3.routingrule(\n        host_name=\"www.example.com\",\n        http_redirect_code=\"302\",\n        protocol=s3.redirectprotocol.https,\n        replace_key=s3.replacekey.prefix_with(\"test/\"),\n        condition=s3.routingrulecondition(\n            http_error_code_returned_equals=\"200\",\n            key_prefix_equals=\"prefix\"\n        )\n    )]\n)\n```\n\n## filling the bucket as part of deployment\n\nto put files into a bucket as part of a deployment (for example, to host a\nwebsite), see the `@aws-cdk/aws-s3-deployment` package, which provides a\nresource that can do just that.\n\n## the url for objects\n\ns3 provides two types of urls for accessing objects via http(s). path-style and\n[virtual hosted-style](https://docs.aws.amazon.com/amazons3/latest/dev/virtualhosting.html)\nurl. path-style is a classic way and will be\n[deprecated](https://aws.amazon.com/jp/blogs/aws/amazon-s3-path-deprecation-plan-the-rest-of-the-story).\nwe recommend to use virtual hosted-style url for newly made bucket.\n\nyou can generate both of them.\n\n```python\nbucket = s3.bucket(self, \"mybucket\")\nbucket.url_for_object(\"objectname\") # path-style url\nbucket.virtual_hosted_url_for_object(\"objectname\") # virtual hosted-style url\nbucket.virtual_hosted_url_for_object(\"objectname\", regional=false)\n```\n\n## object ownership\n\nyou can use one of following properties to specify the bucket [object ownership](https://docs.aws.amazon.com/amazons3/latest/dev/about-object-ownership.html).\n\n### object writer\n\nthe uploading account will own the object.\n\n```python\ns3.bucket(self, \"mybucket\",\n    object_ownership=s3.objectownership.object_writer\n)\n```\n\n### bucket owner preferred\n\nthe bucket owner will own the object if the object is uploaded with the bucket-owner-full-control canned acl. without this setting and canned acl, the object is uploaded and remains owned by the uploading account.\n\n```python\ns3.bucket(self, \"mybucket\",\n    object_ownership=s3.objectownership.bucket_owner_preferred\n)\n```\n\n### bucket owner enforced (recommended)\n\nacls are disabled, and the bucket owner automatically owns and has full control over every object in the bucket. acls no longer affect permissions to data in the s3 bucket. the bucket uses policies to define access control.\n\n```python\ns3.bucket(self, \"mybucket\",\n    object_ownership=s3.objectownership.bucket_owner_enforced\n)\n```\n\n## bucket deletion\n\nwhen a bucket is removed from a stack (or the stack is deleted), the s3\nbucket will be removed according to its removal policy (which by default will\nsimply orphan the bucket and leave it in your aws account). if the removal\npolicy is set to `removalpolicy.destroy`, the bucket will be deleted as long\nas it does not contain any objects.\n\nto override this and force all objects to get deleted during bucket deletion,\nenable the`autodeleteobjects` option.\n\n```python\nbucket = s3.bucket(self, \"mytempfilebucket\",\n    removal_policy=cdk.removalpolicy.destroy,\n    auto_delete_objects=true\n)\n```\n\n**warning** if you have deployed a bucket with `autodeleteobjects: true`,\nswitching this to `false` in a cdk version *before* `1.126.0` will lead to\nall objects in the bucket being deleted. be sure to update your bucket resources\nby deploying with cdk version `1.126.0` or later **before** switching this value to `false`.\n\n## transfer acceleration\n\n[transfer acceleration](https://docs.aws.amazon.com/amazons3/latest/userguide/transfer-acceleration.html) can be configured to enable fast, easy, and secure transfers of files over long distances:\n\n```python\nbucket = s3.bucket(self, \"mybucket\",\n    transfer_acceleration=true\n)\n```\n\nto access the bucket that is enabled for transfer acceleration, you must use a special endpoint. the url can be generated using method `transferaccelerationurlforobject`:\n\n```python\nbucket = s3.bucket(self, \"mybucket\",\n    transfer_acceleration=true\n)\nbucket.transfer_acceleration_url_for_object(\"objectname\")\n```\n\n## intelligent tiering\n\n[intelligent tiering](https://docs.aws.amazon.com/amazons3/latest/userguide/intelligent-tiering.html) can be configured to automatically move files to glacier:\n\n```python\ns3.bucket(self, \"mybucket\",\n    intelligent_tiering_configurations=[s3.intelligenttieringconfiguration(\n        name=\"foo\",\n        prefix=\"folder/name\",\n        archive_access_tier_time=cdk.duration.days(90),\n        deep_archive_access_tier_time=cdk.duration.days(180),\n        tags=[s3.tag(key=\"tagname\", value=\"tagvalue\")]\n    )]\n)\n```\n\n## lifecycle rule\n\n[managing lifecycle](https://docs.aws.amazon.com/amazons3/latest/userguide/object-lifecycle-mgmt.html) can be configured transition or expiration actions.\n\n```python\nbucket = s3.bucket(self, \"mybucket\",\n    lifecycle_rules=[s3.lifecyclerule(\n        abort_incomplete_multipart_upload_after=cdk.duration.minutes(30),\n        enabled=false,\n        expiration=cdk.duration.days(30),\n        expiration_date=date(),\n        expired_object_delete_marker=false,\n        id=\"id\",\n        noncurrent_version_expiration=cdk.duration.days(30),\n\n        # the properties below are optional\n        noncurrent_versions_to_retain=123,\n        noncurrent_version_transitions=[s3.noncurrentversiontransition(\n            storage_class=s3.storageclass.glacier,\n            transition_after=cdk.duration.days(30),\n\n            # the properties below are optional\n            noncurrent_versions_to_retain=123\n        )],\n        object_size_greater_than=500,\n        prefix=\"prefix\",\n        object_size_less_than=10000,\n        transitions=[s3.transition(\n            storage_class=s3.storageclass.glacier,\n\n            # the properties below are optional\n            transition_after=cdk.duration.days(30),\n            transition_date=date()\n        )]\n    )]\n)\n```\n",
  "docs_url": null,
  "keywords": "",
  "license": "apache-2.0",
  "name": "aws-cdk.aws-s3",
  "package_url": "https://pypi.org/project/aws-cdk.aws-s3/",
  "project_url": "https://pypi.org/project/aws-cdk.aws-s3/",
  "project_urls": {
    "Homepage": "https://github.com/aws/aws-cdk",
    "Source": "https://github.com/aws/aws-cdk.git"
  },
  "release_url": "https://pypi.org/project/aws-cdk.aws-s3/1.204.0/",
  "requires_dist": [
    "aws-cdk.aws-events (==1.204.0)",
    "aws-cdk.aws-iam (==1.204.0)",
    "aws-cdk.aws-kms (==1.204.0)",
    "aws-cdk.core (==1.204.0)",
    "aws-cdk.cx-api (==1.204.0)",
    "constructs (<4.0.0,>=3.3.69)",
    "jsii (<2.0.0,>=1.84.0)",
    "publication (>=0.0.3)",
    "typeguard (~=2.13.3)"
  ],
  "requires_python": "~=3.7",
  "summary": "the cdk construct library for aws::s3",
  "version": "1.204.0",
  "releases": [],
  "developers": [
    "amazon_web_services"
  ],
  "kwds": "from_bucket_attributes s3 bucket_key_enabled bucketattributes bucket_owner_enforced",
  "license_kwds": "apache-2.0",
  "libtype": "pypi",
  "id": "pypi_aws_cdk.aws_s3",
  "homepage": "https://github.com/aws/aws-cdk",
  "release_count": 258,
  "dependency_ids": [
    "pypi_aws_cdk.aws_events",
    "pypi_aws_cdk.aws_iam",
    "pypi_aws_cdk.aws_kms",
    "pypi_aws_cdk.core",
    "pypi_aws_cdk.cx_api",
    "pypi_constructs",
    "pypi_jsii",
    "pypi_publication",
    "pypi_typeguard"
  ]
}
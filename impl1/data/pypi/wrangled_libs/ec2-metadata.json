{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "natural language :: english",
    "operating system :: os independent",
    "programming language :: python :: 3",
    "programming language :: python :: 3 :: only",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.12",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "typing :: typed"
  ],
  "description": "============\nec2-metadata\n============\n\n.. image:: https://img.shields.io/github/actions/workflow/status/adamchainz/ec2-metadata/main.yml?branch=main&style=for-the-badge\n   :target: https://github.com/adamchainz/ec2-metadata/actions?workflow=ci\n\n.. image:: https://img.shields.io/badge/coverage-100%25-success?style=for-the-badge\n   :target: https://github.com/adamchainz/ec2-metadata/actions?workflow=ci\n\n.. image:: https://img.shields.io/pypi/v/ec2-metadata.svg?style=for-the-badge\n   :target: https://pypi.org/project/ec2-metadata/\n\n.. image:: https://img.shields.io/badge/code%20style-black-000000.svg?style=for-the-badge\n   :target: https://github.com/psf/black\n\n.. image:: https://img.shields.io/badge/pre--commit-enabled-brightgreen?logo=pre-commit&logocolor=white&style=for-the-badge\n   :target: https://github.com/pre-commit/pre-commit\n   :alt: pre-commit\n\nan easy interface to query the ec2 metadata api (version 2), with caching.\n\na quick example:\n\n.. code-block:: pycon\n\n    >>> from ec2_metadata import ec2_metadata\n    >>> print(ec2_metadata.region)\n    us-east-1\n    >>> print(ec2_metadata.instance_id)\n    i-123456\n\n\ninstallation\n============\n\nuse **pip**:\n\n.. code-block:: sh\n\n    python -m pip install ec2-metadata\n\npython 3.8 to 3.12 supported.\n\n----\n\n**working on a django project?**\nimprove your skills with `one of my books <https://adamj.eu/books/>`__.\n\n----\n\nwhy?\n====\n\n``boto`` came with a utility function to retrieve the instance metadata as a\nlazy loading dictionary, ``boto.utils.get_instance_metadata``, but this has not\nbeen ported to ``boto3``, as per `this issue\n<https://github.com/boto/boto3/issues/313>`_. i thought that rather than\nbuilding a new version inside ``boto3`` it would work well as a standalone\nlibrary.\n\ninstance metadata service version 2\n===================================\n\nin november 2019, aws released\n`version 2 <https://aws.amazon.com/blogs/security/defense-in-depth-open-firewalls-reverse-proxies-ssrf-vulnerabilities-ec2-instance-metadata-service/>`__\nof the instance metadata service. it's more secure against server side request\nforgery (ssrf) attacks.\n\n``ec2-metadata`` now uses it exclusively. you can therefore consider disabling\nversion 1, as per\n`aws' guide <https://docs.aws.amazon.com/awsec2/latest/userguide/configuring-instance-metadata-service.html#instance-metadata-transition-to-version-2>`__.\n\n**note:** instance metadata service v2 has a default ip hop limit of 1.\nthis can mean that you can see ``requests.exceptions.readtimeout`` errors from within docker containers.\nto solve this, reconfigure your ec2 instance\u2019s metadata options to allow three hops with |aws ec2 modify-instance-metadata-options|__:\n\n.. |aws ec2 modify-instance-metadata-options| replace:: ``aws ec2 modify-instance-metadata-options``\n__ https://docs.aws.amazon.com/cli/latest/reference/ec2/modify-instance-metadata-options.html\n\n.. code-block:: bash\n\n    aws ec2 modify-instance-metadata-options  --instance-id <instance-id> --http-put-response-hop-limit 3\n\napi\n===\n\n``ec2metadata(session=none)``\n-----------------------------\n\na container that represents the data available on the ec2 metadata service.\nattributes don't entirely correspond to the paths in the metadata service -\nthey have been 'cleaned up'. you may also want to refer to the `metadata\nservice docs\n<https://docs.aws.amazon.com/awsec2/latest/userguide/instancedata-data-categories.html>`_\nto understand the exact contents.\n\nthere's a singleton instance of it at the name ``ec2_metadata`` which should\ncover 90% of use cases. use it like:\n\n.. code-block:: python\n\n    from ec2_metadata import ec2_metadata\n\n    ec2_metadata.region\n\nthe ``session`` argument, if provided, should be an instance of\n``requests.session``, allowing you to customize the way requests are made.\n\nmost of the attributes are cached, except where noted below. this is because\nthey are mostly immutable, or at least require an instance stop to change.\nhowever some cached attributes do represent things that can change without an\ninstance stop, but rarely do, such as network devices.\n\nthe caching is done with ``@cached_property``, so they cache on first access.\nif you want to clear the cache of one attribute you can just `del` it:\n\n.. code-block:: python\n\n    del ec2_metadata.network_interfaces\n\nto clear all, use the ``clear_all()`` method as per below.\n\n\n``account_id: str``\n~~~~~~~~~~~~~~~~~~~\n\nthe current aws account id, e.g. ``'123456789012'``.\n\n``ami_id: str``\n~~~~~~~~~~~~~~~\n\nthe id of the ami used to launch the instance, e.g. ``'ami-123456'``.\n\n``autoscaling_target_lifecycle_state: str | none``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n**uncached.**\nthe target auto scaling lifecycle state that the instance is transitionioning to, or ``none`` if the instance is not in an autoscaling group.\nsee aws docs page `retrieve the target lifecycle state through instance metadata <https://docs.aws.amazon.com/autoscaling/ec2/userguide/retrieving-target-lifecycle-state-through-imds.html>`__.\n\n``availability_zone: str``\n~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nthe name of the current az e.g. ``'eu-west-1a'``.\n\n``availability_zone_id: str | none``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nthe unique, cross-account id of the current az e.g. ``'use1-az6'``.\nsee aws docs page `az ids for your aws resources\n<https://docs.aws.amazon.com/ram/latest/userguide/working-with-az-ids.html>`__.\n\n``ami_launch_index: int``\n~~~~~~~~~~~~~~~~~~~~~~~~~\n\nthe index of the instance in the launch request, zero-based, e.g. ``0``.\n\n``ami_manifest_path: str``\n~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nthe path to the ami manifest file in amazon s3, or ``'(unknown)'`` on\nebs-backed ami's.\n\n``clear_all() -> none``\n~~~~~~~~~~~~~~~~~~~~~~~\n\nclear all the cached attributes on the class, meaning their next access will\nre-fetch the data from the metadata api. this includes clearing the token used\nto authenticate with the service.\n\n``domain: str``\n~~~~~~~~~~~~~~~\n\nthe domain for aws resources for the region. e.g. ``'amazonaws.com'`` for the\nstandard aws regions and govcloud (us), or ``'amazonaws.com.cn'`` for china.\n\n``iam_info: iaminfodict | none``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\na dictionary of data for the iam role attached to the instance, or ``none`` if no role is attached.\nthe dict has this type, based on what the metadata service returns:\n\n.. code-block:: python\n\n    class iaminfodict(typeddict):\n        instanceprofilearn: str\n        instanceprofileid: str\n        lastupdated: str\n\n``iam_security_credentials: iamsecuritycredentialsdict | none``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\na dictionary of data for the security credentials associated with the iam role attached to the instance, or ``none`` if no role is attached.\nsee the `aws docs section \u201cretrieve security credentials from instance metadata\u201d <https://docs.aws.amazon.com/awsec2/latest/userguide/iam-roles-for-amazon-ec2.html#instance-metadata-security-credentials>`__\nfor details.\nthe dict has this type, based on that document:\n\n.. code-block:: python\n\n    class iamsecuritycredentialsdict(typeddict):\n        lastupdated: str\n        type: str\n        accesskeyid: str\n        secretaccesskey: str\n        token: str\n        expiration: str\n\n``instance_action: str``\n~~~~~~~~~~~~~~~~~~~~~~~~\n\n**uncached.**\na state that notifies if the instance will reboot in preparation\nfor bundling. see the `aws docs section \u201cinstance metadata categories\u201d\n<https://docs.aws.amazon.com/awsec2/latest/userguide/instancedata-data-categories.html>`_\nfor the valid values.\n\n``instance_id: str``\n~~~~~~~~~~~~~~~~~~~~\n\nthe current instance's id, e.g. ``'i-123456'``\n\n``instance_identity_document: instanceidentitydocumentdict``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\na dictionary of dynamic data about the instance.\nsee the `aws docs page \u201cinstance identity documents\u201d <https://docs.aws.amazon.com/awsec2/latest/userguide/instance-identity-documents.html>`__ for an explanation of the contents.\nthe dict has this type, based on that document:\n\n.. code-block:: python\n\n    class instanceidentitydocumentdict(typeddict):\n        accountid: str\n        architecture: literal[\"i386\", \"x86_64\", \"arm64\"]\n        availabilityzone: str\n        billingproducts: list[str] | none\n        marketplaceproductcodes: list[str] | none\n        imageid: str\n        instanceid: str\n        instancetype: str\n        kernelid: str | none\n        pendingtime: str\n        privateip: str\n        ramdiskid: str | none\n        region: str\n        version: str\n\n``instance_profile_arn: str | none``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nthe arn of the iam role/instance profile attached to the instance, taken from\n``iam_info``, or ``none`` if no role is attached.\n\n``instance_profile_id: str | none``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nthe id of the iam role/instance profile attached to the instance, taken from\n``iam_info``, or ``none`` if no role is attached.\n\n\n``instance_profile_name: str | none``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nthe instance profile name, extracted from ``instance_profile_arn``, or ``none`` if no role is attached.\n\n``instance_type: str``\n~~~~~~~~~~~~~~~~~~~~~~\n\nthe current instance's type, e.g. ``'t2.nano'``\n\n``kernel_id: str | none``\n~~~~~~~~~~~~~~~~~~~~~~~~~\n\nthe current instance's kernel id, or ``none`` if it doesn't have one, e.g.\n``'aki-dc9ed9af'``.\n\n``mac : str``\n~~~~~~~~~~~~~\n\nthe instance's mac address, e.g. ``'0a:d2:ae:4d:f3:12'``\n\n``network_interfaces: dict[str, networkinterface]``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\na dictionary of mac address to ``networkinterface``, which represents the data\navailable on a network interface - see below. e.g.\n``{'01:23:45:67:89:ab': networkinterface('01:23:45:67:89:ab')}``\n\n``partition: str``\n~~~~~~~~~~~~~~~~~~\n\nthe aws partition where the instance is running. e.g. ``'aws'`` for the\nstandard aws regions, ``'aws-us-gov'`` for govcloud (us), or ``'aws-cn'``\nfor china.\n\n``private_hostname : str``\n~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nthe private ipv4 dns hostname of the instance, e.g.\n``'ip-172-30-0-0.eu-west-1.compute.internal'`` .\n\n``private_ipv4: str``\n~~~~~~~~~~~~~~~~~~~~~\n\nthe private ipv4 of the instance, e.g. ``'172.30.0.0'``.\n\n``public_hostname : str | none``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nthe public dns hostname of the instance, or ``none`` if the instance is not\npublic, e.g. ``'ec2-1-2-3-4.compute-1.amazonaws.com'``.\n\n``public_ipv4: str | none``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nthe public ipv4 address of the instance, or ``none`` if the instance is not\npublic, e.g. ``'1.2.3.4'``.\n\n``region: str``\n~~~~~~~~~~~~~~~\n\nthe region the instance is running in, e.g. ``'eu-west-1'``.\n\n``reservation_id: str``\n~~~~~~~~~~~~~~~~~~~~~~~\n\nthe id of the reservation used to launch the instance, e.g.\n``'r-12345678901234567'``.\n\n``security_groups : list[str]``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nlist of security groups by name, e.g. ``['ssh-access', 'custom-sg-1']``.\n\n``spot_instance_action: spotinstanceaction | none``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n**uncached.**\nan object describing an action about to happen to this spot instance.\nreturns ``none`` if the instance is not spot, or not marked for termination.\n\nthe ``spotinstanceaction`` object has two attributes:\n\n* ``action: str`` - the action about to happen, one of ``\"hibernate\"``, ``\"stop\"``, or ``\"terminate\"``.\n* ``time: datetime`` - the approximate utc datetime when the action will occur.\n\nsee `aws docs section <https://docs.aws.amazon.com/awsec2/latest/userguide/spot-instance-termination-notices.html#instance-action-metadata>`__ for a little more information.\n\n``tags: instancetags``\n~~~~~~~~~~~~~~~~~~~~~~\n\na dict-like mapping of the tags for the instance (documented below).\nthis requires you to `explicitly enable the feature <https://docs.aws.amazon.com/awsec2/latest/userguide/using_tags.html#allow-access-to-tags-in-imds>`__ for the instance.\nif the feature is not enabled, accessing this attribute raises an error.\n\n(it also seems that there is a bug where if the feature is enabled and then disabled, the metadata service returns an empty response.\nthis is indistinguishable from \u201cno tags\u201d, so beware that in that case, ``instancetags`` will just look like an empty mapping.)\n\n``user_data: bytes | none``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nthe raw user data assigned to the instance (not base64 encoded), or ``none`` if\nthere is none.\n\n``instancetags``\n----------------\n\na dict-like mapping of tag names to values (both ``str``\\s).\nto avoid unnecessary requests, the mapping is lazy: values are only fetched when required.\n(names are known on construction though, from the first request in ``ec2metadata.tags``.)\n\nthe metadata service will receive tag updates on some instance types, as per `the aws documentation <https://docs.aws.amazon.com/awsec2/latest/userguide/using_tags.html#work-with-tags-in-imds>`__:\n\n    if you add or remove an instance tag, the instance metadata is updated while the instance is running for instances built on the nitro system, without needing to stop and then start the instance.\n    for all other instances, to update the tags in the instance metadata, you must stop and then start the instance.\n\nbecause ``instancetags`` is cached, it won\u2019t reflect such updates on nitro instances unless you clear it first:\n\n.. code-block:: python\n\n    del ec2_metadata.tags\n    ec2_metadata.tags[\"name\"]  # fresh\n\n``networkinterface``\n--------------------\n\nrepresents a single network interface, as retrieved from\n``ec2metadata.network_interfaces``. again like ``ec2metadata`` all its\nattributes cache on first access, and can be cleared with ``del`` or\nits ``clear_all()`` method.\n\n``device_number: int``\n~~~~~~~~~~~~~~~~~~~~~~\n\nthe unique device number associated with that interface, e.g. ``0``.\n\n``interface_id: str``\n~~~~~~~~~~~~~~~~~~~~~\n\nthe unique id used to identify the elastic network interface, e.g. ``'eni-12345'``.\n\n``ipv4_associations: dict[str, list[str]]``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\na dictionary mapping public ip addresses on the interface to the list of\nprivate ip addresses associated with that public ip, for each public ip that is\nassociated with the interface, e.g. ``{'54.0.0.1': ['172.30.0.0']}``.\n\n``ipv6s: list[str]``\n~~~~~~~~~~~~~~~~~~~~\n\nthe ipv6 addresses associated with the interface, e.g.\n``['2001:db8:abcd:ef00::1234']``.\n\n``mac: str``\n~~~~~~~~~~~~\n\nthe mac address of the interface, e.g. ``'01:23:45:67:89:ab'``.\n\n``owner_id: str``\n~~~~~~~~~~~~~~~~~\n\nthe aws account id of the owner of the network interface, e.g.\n``'123456789012'``.\n\n``private_hostname: str``\n~~~~~~~~~~~~~~~~~~~~~~~~~\n\nthe interface's local/private hostname, e.g.\n``'ip-172-30-0-0.eu-west-1.compute.internal'``.\n\n``private_ipv4s: list[str]``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nthe private ipv4 addresses associated with the interface, e.g.\n``['172.30.0.0']``.\n\n``public_hostname: str | none``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nthe interface's public dns (ipv4), e.g.\n``'ec2-54-0-0-0.compute-1.amazonaws.com'``.\n\n``public_ipv4s: list[str]``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nthe elastic ip addresses associated with the interface, e.g. ``['54.0.0.0']``.\n\n``security_groups: list[str]``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nthe names of the security groups to which the network interface belongs, e.g.\n``['ssh-access', 'custom-sg-1']``.\n\n``security_group_ids: list[str]``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nthe names of the security groups to which the network interface belongs, e.g.\n``['sg-12345678', 'sg-12345679']``.\n\n``subnet_id: str``\n~~~~~~~~~~~~~~~~~~\n\nthe id of the subnet in which the interface resides, e.g.\n``'subnet-12345678'``.\n\n``subnet_ipv4_cidr_block: str | none``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nthe ipv4 cidr block of the subnet in which the interface resides, or ``none``\nif there is none, e.g. ``'172.30.0.0/24'``.\n\n``subnet_ipv6_cidr_blocks: list[str]``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nthe list of ipv6 cidr blocks of the subnet in which the interface resides, e.g.\n``['2001:db8:abcd:ef00::/64']``. if the subnet does not have any ipv6 cidr\nblocks or the instance isn't in a vpc, the list will be empty, e.g. ``[]``.\n\n``vpc_id: str``\n~~~~~~~~~~~~~~~\n\nthe id of the vpc in which the interface resides, e.g. ``'vpc-12345678'``.\n\n``vpc_ipv4_cidr_block: str | none``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nthe ipv4 cidr block of the vpc, or ``none`` if the instance isn't in a vpc,\ne.g. ``'172.30.0.0/16'``.\n\n``vpc_ipv4_cidr_blocks: list[str]``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nthe list of ipv4 cidr blocks e.g. ``['172.30.0.0/16']``. if the interface\ndoesn\u2019t have any such cidr blocks, the list will be empty.\n\n``vpc_ipv6_cidr_blocks: list[str]``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nthe list of ipv6 cidr blocks of the vpc in which the interface resides, e.g.\n``['2001:db8:abcd:ef00::/56']``. if the vpc does not have any ipv6 cidr blocks\nor the instance isn't in a vpc, the list will be empty, e.g. ``[]``.\n",
  "docs_url": null,
  "keywords": "aws,ec2,metadata",
  "license": "mit",
  "name": "ec2-metadata",
  "package_url": "https://pypi.org/project/ec2-metadata/",
  "project_url": "https://pypi.org/project/ec2-metadata/",
  "project_urls": {
    "Changelog": "https://github.com/adamchainz/ec2-metadata/blob/main/CHANGELOG.rst",
    "Homepage": "https://github.com/adamchainz/ec2-metadata",
    "Mastodon": "https://fosstodon.org/@adamchainz",
    "Twitter": "https://twitter.com/adamchainz"
  },
  "release_url": "https://pypi.org/project/ec2-metadata/2.13.0/",
  "requires_dist": [
    "requests"
  ],
  "requires_python": ">=3.8",
  "summary": "an easy interface to query the ec2 metadata api, with caching.",
  "version": "2.13.0",
  "releases": [],
  "developers": [
    "adam_johnson",
    "me@adamj.eu"
  ],
  "kwds": "badge ec2_metadata awsec2 ami_id shields",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_ec2_metadata",
  "homepage": "https://github.com/adamchainz/ec2-metadata",
  "release_count": 27,
  "dependency_ids": [
    "pypi_requests"
  ]
}
{
  "classifiers": [],
  "description": "# timeloop\ntimeloop is a service that can be used to run periodic tasks after a certain interval.\n\n![timeloop](http://66.42.57.109/timeloop.jpg)\n\neach job runs on a separate thread and when the service is shut down, it waits till all tasks currently being executed are completed.\n\ninspired by this blog [`here`](https://www.g-loaded.eu/2016/11/24/how-to-terminate-running-python-threads-using-signals/)\n\n## installation\n```sh\npip install timeloop\n```\n\n## writing jobs\n```python\nimport time\n\nfrom timeloop import timeloop\nfrom datetime import timedelta\n\ntl = timeloop()\n\n@tl.job(interval=timedelta(seconds=2))\ndef sample_job_every_2s():\n    print \"2s job current time : {}\".format(time.ctime())\n\n@tl.job(interval=timedelta(seconds=5))\ndef sample_job_every_5s():\n    print \"5s job current time : {}\".format(time.ctime())\n\n\n@tl.job(interval=timedelta(seconds=10))\ndef sample_job_every_10s():\n    print \"10s job current time : {}\".format(time.ctime())\n```\n\n## start time loop in separate thread\nby default timeloop starts in a separate thread.\n\nplease do not forget to call ```tl.stop``` before exiting the program, or else the jobs wont shut down gracefully.\n\n```python\ntl.start()\n\nwhile true:\n  try:\n    time.sleep(1)\n  except keyboardinterrupt:\n    tl.stop()\n    break\n```\n\n## start time loop in main thread\ndoing this will automatically shut down the jobs gracefully when the program is killed, so no need to  call ```tl.stop```\n```python\ntl.start(block=true)\n```\n\n## author\n* **sankalp jonna**\n\nemail me with any queries: [sankalpjonna@gmail.com](sankalpjonna@gmail.com).\n\n\n",
  "docs_url": null,
  "keywords": "tasks,jobs,periodic task,interval,periodic job,flask style,decorator",
  "license": "mit",
  "name": "timeloop",
  "package_url": "https://pypi.org/project/timeloop/",
  "project_url": "https://pypi.org/project/timeloop/",
  "project_urls": {
    "Homepage": "https://github.com/sankalpjonn/timeloop"
  },
  "release_url": "https://pypi.org/project/timeloop/1.0.2/",
  "requires_dist": [],
  "requires_python": "",
  "summary": "an elegant way to run period tasks.",
  "version": "1.0.2",
  "releases": [],
  "developers": [
    "sankalp_jonna",
    "sankalpjonna@gmail.com"
  ],
  "kwds": "sample_job_every_2s sample_job_every_10s sample_job_every_5s timedelta flask",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_timeloop",
  "homepage": "https://github.com/sankalpjonn/timeloop",
  "release_count": 3,
  "dependency_ids": []
}
{
  "classifiers": [
    "development status :: 6 - mature",
    "intended audience :: developers",
    "license :: osi approved :: apache software license",
    "topic :: software development :: libraries",
    "topic :: text processing"
  ],
  "description": "# diff-match-patch\n\ngoogle's [diff match and patch][dmp] library, packaged for modern python.\n\n[![version](https://img.shields.io/pypi/v/diff-match-patch.svg)](https://pypi.org/project/diff-match-patch)\n[![changelog](https://img.shields.io/badge/change-log-blue)](https://github.com/diff-match-patch-python/diff-match-patch/blob/main/changelog.md)\n[![license](https://img.shields.io/pypi/l/diff-match-patch.svg)](https://github.com/diff-match-patch-python/diff-match-patch/blob/master/license)\n\n## install\n\ndiff-match-patch is supported on python 3.7 or newer.\nyou can install it from pypi:\n\n```shell\npython -m pip install diff-match-patch\n```\n\n## usage\n\ngenerating a patchset (analogous to unified diff) between two texts:\n\n```python\nfrom diff_match_patch import diff_match_patch\n\ndmp = diff_match_patch()\npatches = dmp.patch_make(text1, text2)\ndiff = dmp.patch_totext(patches)\n```\n\napplying a patchset to a text can then be done with:\n\n```python\nfrom diff_match_patch import diff_match_patch\n\ndmp = diff_match_patch()\npatches = dmp.patch_fromtext(diff)\nnew_text, _ = dmp.patch_apply(patches, text)\n```\n\n## original readme\nthe diff match and patch libraries offer robust algorithms to perform the\noperations required for synchronizing plain text.\n\n1. diff:\n   * compare two blocks of plain text and efficiently return a list of differences.\n   * [diff demo](https://neil.fraser.name/software/diff_match_patch/demos/diff.html)\n2. match:\n   * given a search string, find its best fuzzy match in a block of plain text. weighted for both accuracy and location.\n   * [match demo](https://neil.fraser.name/software/diff_match_patch/demos/match.html)\n3. patch:\n   * apply a list of patches onto plain text. use best-effort to apply patch even when the underlying text doesn't match.\n   * [patch demo](https://neil.fraser.name/software/diff_match_patch/demos/patch.html)\n\noriginally built in 2006 to power google docs, this library is now available in c++, c#, dart, java, javascript, lua, objective c, and python.\n\n### reference\n\n* [api](https://github.com/google/diff-match-patch/wiki/api) - common api across all languages.\n* [line or word diffs](https://github.com/google/diff-match-patch/wiki/line-or-word-diffs) - less detailed diffs.\n* [plain text vs. structured content](https://github.com/google/diff-match-patch/wiki/plain-text-vs.-structured-content) - how to deal with data like xml.\n* [unidiff](https://github.com/google/diff-match-patch/wiki/unidiff) - the patch serialization format.\n* [support](https://groups.google.com/forum/#!forum/diff-match-patch) - newsgroup for developers.\n\n### languages\nalthough each language port of diff match patch uses the same api, there are some language-specific notes.\n\n* [c++](https://github.com/google/diff-match-patch/wiki/language:-cpp)\n* [c#](https://github.com/google/diff-match-patch/wiki/language:-c%23)\n* [dart](https://github.com/google/diff-match-patch/wiki/language:-dart)\n* [java](https://github.com/google/diff-match-patch/wiki/language:-java)\n* [javascript](https://github.com/google/diff-match-patch/wiki/language:-javascript)\n* [lua](https://github.com/google/diff-match-patch/wiki/language:-lua)\n* [objective-c](https://github.com/google/diff-match-patch/wiki/language:-objective-c)\n* [python](https://github.com/google/diff-match-patch/wiki/language:-python)\n\na standardized speed test tracks the [relative performance of diffs](https://docs.google.com/spreadsheets/d/1zpzccubpjmztvl1ngdmkjc7rwl_m_drf4xkojvb27kc/edit#gid=0) in each language.\n\n### algorithms\nthis library implements [myer's diff algorithm](https://neil.fraser.name/writing/diff/myers.pdf) which is generally considered to be the best general-purpose diff. a layer of [pre-diff speedups and post-diff cleanups](https://neil.fraser.name/writing/diff/) surround the diff algorithm, improving both performance and output quality.\n\nthis library also implements a [bitap matching algorithm](https://neil.fraser.name/writing/patch/bitap.ps) at the heart of a [flexible matching and patching strategy](https://neil.fraser.name/writing/patch/).\n\n[dmp]: https://github.com/google/diff-match-patch\n[api]: https://github.com/google/diff-match-patch/wiki/api\n",
  "docs_url": null,
  "keywords": "",
  "license": "",
  "name": "diff-match-patch",
  "package_url": "https://pypi.org/project/diff-match-patch/",
  "project_url": "https://pypi.org/project/diff-match-patch/",
  "project_urls": {
    "Changelog": "https://github.com/diff-match-patch-python/diff-match-patch/blob/main/CHANGELOG.md",
    "Github": "https://github.com/diff-match-patch-python/diff-match-patch"
  },
  "release_url": "https://pypi.org/project/diff-match-patch/20230430/",
  "requires_dist": [
    "attribution==1.6.2 ; extra == \"dev\"",
    "black==23.3.0 ; extra == \"dev\"",
    "flit==3.8.0 ; extra == \"dev\"",
    "mypy==1.2.0 ; extra == \"dev\"",
    "ufmt==2.1.0 ; extra == \"dev\"",
    "usort==1.0.6 ; extra == \"dev\""
  ],
  "requires_python": ">=3.7",
  "summary": "diff match and patch",
  "version": "20230430",
  "releases": [],
  "developers": [
    "amethyst@n7.gg",
    "fraser@google.com"
  ],
  "kwds": "diff_match_patch diffs patch_apply patches patching",
  "license_kwds": "",
  "libtype": "pypi",
  "id": "pypi_diff_match_patch",
  "homepage": "",
  "release_count": 7,
  "dependency_ids": [
    "pypi_attribution",
    "pypi_black",
    "pypi_flit",
    "pypi_mypy",
    "pypi_ufmt",
    "pypi_usort"
  ]
}
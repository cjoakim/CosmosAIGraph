{
  "classifiers": [
    "development status :: 1 - planning",
    "environment :: console",
    "framework :: pytest",
    "framework :: sphinx",
    "framework :: tox",
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "operating system :: os independent",
    "programming language :: python",
    "programming language :: python :: 3 :: only",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9"
  ],
  "description": "<!--\n<p align=\"center\">\n  <img src=\"https://github.com/cthoyt/umls_downloader/raw/main/docs/source/logo.png\" height=\"150\">\n</p>\n-->\n\n<h1 align=\"center\">\n  umls downloader\n</h1>\n\n<p align=\"center\">\n    <a href=\"https://github.com/cthoyt/umls_downloader/actions?query=workflow%3atests\">\n        <img alt=\"tests\" src=\"https://github.com/cthoyt/umls_downloader/workflows/tests/badge.svg\" />\n    </a>\n    <a href='https://umls-downloader.readthedocs.io/en/latest/?badge=latest'>\n        <img src='https://readthedocs.org/projects/umls-downloader/badge/?version=latest' alt='documentation status' />\n    </a>\n    <a href=\"https://pypi.org/project/umls_downloader\">\n        <img alt=\"pypi\" src=\"https://img.shields.io/pypi/v/umls_downloader\" />\n    </a>\n    <a href=\"https://pypi.org/project/umls_downloader\">\n        <img alt=\"pypi - python version\" src=\"https://img.shields.io/pypi/pyversions/umls_downloader\" />\n    </a>\n    <a href=\"https://github.com/cthoyt/umls_downloader/blob/main/license\">\n        <img alt=\"pypi - license\" src=\"https://img.shields.io/pypi/l/umls_downloader\" />\n    </a>\n    <a href='https://github.com/psf/black'>\n        <img src='https://img.shields.io/badge/code%20style-black-000000.svg' alt='code style: black' />\n    </a>\n</p>\n\ndon't worry about [umls terminology services (uts)](https://uts.nlm.nih.gov/uts/)\nlicensing and distribution rules - just use\n`umls_downloader` to write code that knows how to download content and use it\nautomatically from the following (non-exhaustive) list of resources:\n\n- [umls](https://www.nlm.nih.gov/research/umls/licensedcontent/umlsknowledgesources.html)\n- [rxnorm](https://www.nlm.nih.gov/research/umls/rxnorm/docs/rxnormfiles.html)\n- [semmeddb](https://lhncbc.nlm.nih.gov/ii/tools/semrep_semmeddb_skr/semmeddb_download.html)\n- [snomed-ct](https://www.nlm.nih.gov/healthit/snomedct/international.html)\n- potentially more in the future\n\nor any content that can be downloaded through\nthe [uts ticket granting](https://documentation.uts.nlm.nih.gov/automating-downloads.html)\nsystem. there's no centralized list of content available through the uts so\nsuggestions for additional resources are welcome through\nthe [issue tracker](https://github.com/cthoyt/umls_downloader/issues).\n\nfull documentation are available at [umls-downloader.readthedocs.io](https://umls-downloader.readthedocs.io).\n\n## installation\n\n```bash\n$ pip install umls_downloader\n```\n\n## download a specific version of umls\n\n```python\nimport os\nfrom umls_downloader import download_umls\n\n# get this from https://uts.nlm.nih.gov/uts/edit-profile\napi_key = ...\n\npath = download_umls(version=\"2021ab\", api_key=api_key)\n\n# this is where it gets downloaded: ~/.data/bio/umls/2021ab/umls-2021ab-mrconso.zip\nexpected_path = os.path.join(\n    os.path.expanduser(\"~\"), \".data\", \"umls\", \"2021ab\",\n    \"umls-2021ab-mrconso.zip\",\n)\nassert expected_path == path.as_posix()\n```\n\nafter it's been downloaded once, it's smart and doesn't need to download again.\nit gets stored using [`pystow`](https://github.com/cthoyt/pystow) automatically\nin the `~/.data/bio/umls` directory.\n\na full list of functions is available in the\n[documentation](https://umls-downloader.readthedocs.io).\n\n## automating configuration of uts credentials\n\nthere are two ways to automatically set the username and password so you don't\nhave to worry about getting it and passing it around in your python code:\n\n1. set `umls_api_key` in the environment\n2. create `~/.config/umls.ini` and set in the `[umls]` section a `api_key` key.\n\n```python\nfrom umls_downloader import download_umls\n\n# same path as before\npath = download_umls(version=\"2021ab\")\n```\n\n## download the latest version\n\nfirst, you'll have to\ninstall [`bioversions`](https://github.com/cthoyt/bioversions)\nwith `pip install bioversions`, whose job it is to look up the latest version of\nmany databases. then, you can modify the previous code slightly by omitting\nthe `version` keyword argument:\n\n```python\nfrom umls_downloader import download_umls\n\n# same path as before (as of november 21st, 2021)\npath = download_umls()\n```\n\n## download and open the file\n\nthe umls file is zipped, so it's usually accompanied with the following\nboilerplate code:\n\n```python\nimport zipfile\nfrom umls_downloader import download_umls\n\npath = download_umls()\nwith zipfile.zipfile(path) as zip_file:\n    with zip_file.open(\"mrconso.rrf\", mode=\"r\") as file:\n        for line in file:\n            ...\n```\n\nthis exact code is wrapped with the `open_umls()` using python's context manager\nso it can more simply be written as:\n\n```python\nfrom umls_downloader import open_umls\n\nwith open_umls() as file:\n    for line in file:\n        ...\n```\n\nthe `version` and `api_key` arguments also apply here.\n\n## why not an api?\n\nthe umls provides an [api](https://documentation.uts.nlm.nih.gov/rest/home.html)\nfor access to tiny bits of data at a time. there are even two recent (last 5\nyears) packages [`umls-api`](https://pypi.org/project/umls-api)\n[`connect-umls`](https://pypi.org/project/connect-umls) that provide a wrapper\naround them. however, api access is generally rate limited, difficult to use in\nbulk, and slow. for working with umls (or any other database, for that matter)in\nbulk, it's necessary to download full database dumps.\n\n## \ud83d\udc4b attribution\n\n### \u2696\ufe0f license\n\nthe code in this package is licensed under the mit license.\n\n### \ud83c\udf6a cookiecutter\n\nthis package was created\nwith [@audreyfeldroy](https://github.com/audreyfeldroy)'s\n[cookiecutter](https://github.com/cookiecutter/cookiecutter) package\nusing [@cthoyt](https://github.com/cthoyt)'s\n[cookiecutter-snekpack](https://github.com/cthoyt/cookiecutter-snekpack)\ntemplate.\n",
  "docs_url": null,
  "keywords": "snekpack,cookiecutter,umls,snomed-ct,rxnorm",
  "license": "mit",
  "name": "umls-downloader",
  "package_url": "https://pypi.org/project/umls-downloader/",
  "project_url": "https://pypi.org/project/umls-downloader/",
  "project_urls": {
    "Bug Tracker": "https://github.com/cthoyt/umls_downloader/issues",
    "Download": "https://github.com/cthoyt/umls_downloader/releases",
    "Homepage": "https://github.com/cthoyt/umls_downloader",
    "Source Code": "https://github.com/cthoyt/umls_downloader"
  },
  "release_url": "https://pypi.org/project/umls-downloader/0.1.2/",
  "requires_dist": [
    "click",
    "more-click",
    "beautifulsoup4",
    "requests",
    "pystow",
    "bioversions ; extra == 'bioversions'",
    "sphinx ; extra == 'docs'",
    "sphinx-rtd-theme ; extra == 'docs'",
    "sphinx-click ; extra == 'docs'",
    "sphinx-autodoc-typehints ; extra == 'docs'",
    "sphinx-automodapi ; extra == 'docs'",
    "pytest ; extra == 'tests'",
    "coverage ; extra == 'tests'"
  ],
  "requires_python": ">=3.7",
  "summary": "automate downloading umls data.",
  "version": "0.1.2",
  "releases": [],
  "developers": [
    "charles_tapley_hoyt",
    "cthoyt@gmail.com"
  ],
  "kwds": "umls_downloader download_umls umls open_umls umlsknowledgesources",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_umls_downloader",
  "homepage": "https://github.com/cthoyt/umls_downloader",
  "release_count": 6,
  "dependency_ids": [
    "pypi_beautifulsoup4",
    "pypi_bioversions",
    "pypi_click",
    "pypi_coverage",
    "pypi_more_click",
    "pypi_pystow",
    "pypi_pytest",
    "pypi_requests",
    "pypi_sphinx",
    "pypi_sphinx_autodoc_typehints",
    "pypi_sphinx_automodapi",
    "pypi_sphinx_click",
    "pypi_sphinx_rtd_theme"
  ]
}
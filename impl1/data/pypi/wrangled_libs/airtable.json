{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: developers",
    "operating system :: macos :: macos x",
    "operating system :: microsoft :: windows",
    "operating system :: posix",
    "programming language :: python :: 2",
    "programming language :: python :: 2.7",
    "programming language :: python :: 3",
    "programming language :: python :: 3.3",
    "programming language :: python :: 3.4",
    "programming language :: python :: 3.5",
    "programming language :: python :: 3.6",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "programming language :: python :: implementation :: cpython",
    "programming language :: python :: implementation :: pypy",
    "topic :: software development :: libraries :: python modules"
  ],
  "description": "airtable.py: python api wrapper for airtable\n============================================\n\npython interface to the airtable's rest api - https://airtable.com -\n|build status|\n\nfor javascript enthusiasts: https://github.com/airtable/airtable.js\n\ninstallation\n------------\n\nairtable python uses `requests.py <http://docs.python-requests.org/>`__:\nmake sure you have it installed by running\n\n::\n\n    $ pip install requests\n\ngetting started\n---------------\n\nonce you have created `a new\nbase <https://support.airtable.com/hc/en-us/articles/202576419-introduction-to-airtable-bases>`__\nand a new table through the web interface, you're ready to start using\nairtable python.\n\n.. code:: python\n\n    from airtable import airtable\n    at = airtable.airtable('base_id', 'api_key')\n    at.get('table_name')\n\nhere's an example of response from the restaurant's example base\n\n.. code:: python\n\n    {u'records': [\n      {u'fields': {u'diet': u'kosher or halal',\n        u'friendly restaurants': [u'recr0itqq9c1i92fl', u'recgeajlw0zkbwdxz'],\n        u'icon': [{u'filename': u'no-pig.jpg',\n          u'id': u'attzkgobbjndox0fu',\n          u'size': 34006,\n          u'thumbnails': {u'large': {u'height': 202,\n            u'url': u'https://dl.airtable.com/trmtq3baroa0swnyffwz_large_no-pig.jpg',\n            u'width': 256},\n           u'small': {u'height': 36,\n            u'url': u'https://dl.airtable.com/yzurv5cyrs2pvh4fdvce_small_no-pig.jpg',\n            u'width': 46}},\n          u'type': u'image/jpeg',\n          u'url': u'https://dl.airtable.com/dygojaasze6aikqxfpdv_no-pig.jpg'}],\n        u'people': [u'annie', u'maryam']},\n       u'id': u'rec5sd6mbbd0saxof'},\n       ...\n\napi reference\n-------------\n\nthe available methods closely mimick the `rest\napi <https://airtable.com/api>`__:\n\nget\n~~~\n\ngiven a table name, fetched one or multiple records.\n\n.. code:: python\n\n    at.get(table_name, table_name, record_id=none, limit=0, offset=none,\n           filter_by_formula=none, view=none, max_records=0, fields=[])\n\nwhere\n\n::\n\n    table_name (required) is a string representing the table name\n    record_id (optional) is a string, which fetches a specific item by id. if not specified, all items are fetched\n    limit (optional) is an integer, and it can only be specified if record_id is not present, and limits the number of items fetched (see pagesize in the airtable documentation)\n    offset is a string representing the record id from which we start the offset\n    filter_by_formula (optional) is a string to filter the retrieving records (see filterbyformula in the airtable documentation)\n    max_records (optional) is the total number of records that will be returned (see maxrecords in the airtable documentation)\n    fields (optional) is a list of strings with the field names to be returned\n\niterate\n~~~~~~~\n\ngiven a table name, fetched all records.\n\n.. code:: python\n\n    at.iterate(table_name, table_name, limit=0, offset=none,\n           filter_by_formula=none, view=none, max_records=0, fields=[])\n\nwhere\n\n::\n\n    table_name (required) is a string representing the table name\n    limit (optional) is an integer, and it can only be specified if record_id is not present, and limits the number of items fetched (see pagesize in the airtable documentation)\n    offset is a string representing the record id from which we start the offset\n    filter_by_formula (optional) is a string to filter the retrieving records (see filterbyformula in the airtable documentation)\n    max_records (optional) is the total number of records that will be returned (see maxrecords in the airtable documentation)\n    fields (optional) is a list of strings with the field names to be returned\n\n**note**: this returns a generator instead, which you can use to loop\neach record:\n\n.. code:: python\n\n    # example with similar results of at.get\n    result = { \"records\": [] }\n    for r in self.at.iterate(self.table, fields=fields):\n        result[\"records\"].append(r)\n\ncreate\n~~~~~~\n\ncreates a new entry in a table, and returns the newly created entry with\nits new id.\n\n.. code:: python\n\n    at.create(table_name, data)\n\nwhere\n\n::\n\n    table_name (required) is a string representing the table name\n    data (required) is a dictionary containing the fields and the resepective values\n\nupdate\n~~~~~~\n\nupdates *some* fields in a specific entry in the table. fields which are\nnot explicitely included will not get updated\n\n.. code:: python\n\n    at.update(table_name, record_id, data)\n\nwhere\n\n::\n\n    table_name (required) is a string representing the table name\n    record_id (required) is a string representing the item to update\n    data (required) is a dictionary containing the fields (and the resepective values) to be updated\n\nupdate all\n~~~~~~~~~~\n\nlike the previous method, but updates all fields, clearing the ones that\nare not included in the request.\n\n.. code:: python\n\n    at.update_all(table_name, record_id, data)\n\ndelete\n~~~~~~\n\ndelete a specific record from the table\n\n.. code:: python\n\n    at.delete(table_name, record_id)\n\nwhere\n\n::\n\n    table_name (required) is a string representing the table name\n    record_id (required) is a string representing the item to update\n\n.. |build status| image:: https://travis-ci.org/josephbestjames/airtable.py.svg?branch=master\n   :target: https://travis-ci.org/josephbestjames/airtable.py\n\nrelease\n-------\n\nto release, tag the git repo with a new version number, push that tag to github then travis ci will\ndo the rest.\n\n\n\n",
  "docs_url": null,
  "keywords": "airtable,api",
  "license": "the mit license (mit)",
  "name": "airtable",
  "package_url": "https://pypi.org/project/airtable/",
  "project_url": "https://pypi.org/project/airtable/",
  "project_urls": {
    "Homepage": "https://github.com/josephbestjames/airtable.py"
  },
  "release_url": "https://pypi.org/project/airtable/0.4.8/",
  "requires_dist": [
    "requests (>=2.20.0)",
    "six"
  ],
  "requires_python": "",
  "summary": "python client library for airtable",
  "version": "0.4.8",
  "releases": [],
  "developers": [
    "joseph_best"
  ],
  "kwds": "airtable table_name api python table",
  "license_kwds": "the mit license (mit)",
  "libtype": "pypi",
  "id": "pypi_airtable",
  "homepage": "https://github.com/josephbestjames/airtable.py",
  "release_count": 9,
  "dependency_ids": [
    "pypi_requests",
    "pypi_six"
  ]
}
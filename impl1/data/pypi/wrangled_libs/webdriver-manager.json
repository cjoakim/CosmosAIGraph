{
  "classifiers": [
    "intended audience :: developers",
    "intended audience :: information technology",
    "license :: osi approved :: apache software license",
    "operating system :: macos",
    "operating system :: microsoft :: windows",
    "operating system :: posix",
    "operating system :: unix",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: software development :: libraries :: python modules"
  ],
  "description": "# webdriver manager for python\n\n[![tests](https://github.com/sergeypirogov/webdriver_manager/actions/workflows/test.yml/badge.svg)](https://github.com/sergeypirogov/webdriver_manager/actions/workflows/test.yml)\n[![pypi](https://img.shields.io/pypi/v/webdriver_manager.svg)](https://pypi.org/project/webdriver-manager)\n[![supported python versions](https://img.shields.io/pypi/pyversions/webdriver_manager.svg)](https://pypi.org/project/webdriver-manager/)\n[![codecov](https://codecov.io/gh/sergeypirogov/webdriver_manager/branch/master/graph/badge.svg)](https://codecov.io/gh/sergeypirogov/webdriver_manager)\n\n## support the library on [patreon](https://www.patreon.com/automation_remarks)\n\nthe main idea is to simplify management of binary drivers for different browsers.\n\nfor now support:\n\n- [chromedriver](#use-with-chrome)\n- [edgechromiumdriver](#use-with-edge)\n- [geckodriver](#use-with-firefox)\n- [iedriver](#use-with-ie)\n- [operadriver](#use-with-opera)\n\ncompatible with selenium 4.x and below.\n\nbefore:\nyou need to download the chromedriver binary, unzip it somewhere on your pc and set the path to this driver like this:\n\n```python\nfrom selenium import webdriver\ndriver = webdriver.chrome('/home/user/drivers/chromedriver')\n```\n\nit\u2019s boring!!! moreover, every time a new version of the driver is released, you need to repeat all these steps again and again.\n\nwith webdriver manager, you just need to do two simple steps:\n\n#### install manager:\n\n```bash\npip install webdriver-manager\n```\n\n#### use with chrome\n\n```python\n# selenium 3\nfrom selenium import webdriver\nfrom webdriver_manager.chrome import chromedrivermanager\n\ndriver = webdriver.chrome(chromedrivermanager().install())\n```\n```python\n# selenium 4\nfrom selenium import webdriver\nfrom selenium.webdriver.chrome.service import service as chromeservice\nfrom webdriver_manager.chrome import chromedrivermanager\n\ndriver = webdriver.chrome(service=chromeservice(chromedrivermanager().install()))\n```\n\n#### use with chromium\n\n```python\n# selenium 3\nfrom selenium import webdriver\nfrom webdriver_manager.chrome import chromedrivermanager\nfrom webdriver_manager.core.os_manager import chrometype\n\ndriver = webdriver.chrome(chromedrivermanager(chrome_type=chrometype.chromium).install())\n```\n\n```python\n# selenium 4\nfrom selenium import webdriver\nfrom selenium.webdriver.chrome.service import service as chromiumservice\nfrom webdriver_manager.chrome import chromedrivermanager\nfrom webdriver_manager.core.os_manager import chrometype\n\ndriver = webdriver.chrome(service=chromiumservice(chromedrivermanager(chrome_type=chrometype.chromium).install()))\n```\n\n#### use with brave\n\n```python\n# selenium 3\nfrom selenium import webdriver\nfrom webdriver_manager.chrome import chromedrivermanager\nfrom webdriver_manager.core.os_manager import chrometype\n\ndriver = webdriver.chrome(chromedrivermanager(chrome_type=chrometype.brave).install())\n```\n\n```python\n# selenium 4\nfrom selenium import webdriver\nfrom selenium.webdriver.chrome.service import service as braveservice\nfrom webdriver_manager.chrome import chromedrivermanager\nfrom webdriver_manager.core.os_manager import chrometype\n\ndriver = webdriver.chrome(service=braveservice(chromedrivermanager(chrome_type=chrometype.brave).install()))\n```\n\n\n#### use with edge\n\n```python\n# selenium 3\nfrom selenium import webdriver\nfrom webdriver_manager.microsoft import edgechromiumdrivermanager\n\ndriver = webdriver.edge(edgechromiumdrivermanager().install())\n```\n```python\n# selenium 4\nfrom selenium import webdriver\nfrom selenium.webdriver.edge.service import service as edgeservice\nfrom webdriver_manager.microsoft import edgechromiumdrivermanager\n\ndriver = webdriver.edge(service=edgeservice(edgechromiumdrivermanager().install()))\n```\n\n#### use with firefox\n\n```python\n# selenium 3\nfrom selenium import webdriver\nfrom webdriver_manager.firefox import geckodrivermanager\n\ndriver = webdriver.firefox(executable_path=geckodrivermanager().install())\n```\n```python\n# selenium 4\nfrom selenium import webdriver\nfrom selenium.webdriver.firefox.service import service as firefoxservice\nfrom webdriver_manager.firefox import geckodrivermanager\n\ndriver = webdriver.firefox(service=firefoxservice(geckodrivermanager().install()))\n```\n\n#### use with ie\n\n```python\n# selenium 3\nfrom selenium import webdriver\nfrom webdriver_manager.microsoft import iedrivermanager\n\ndriver = webdriver.ie(iedrivermanager().install())\n```\n```python\n# selenium 4\nfrom selenium import webdriver\nfrom selenium.webdriver.ie.service import service as ieservice\nfrom webdriver_manager.microsoft import iedrivermanager\n\ndriver = webdriver.ie(service=ieservice(iedrivermanager().install()))\n```\n\n\n#### use with opera\n\n```python\n# selenium 3\nfrom selenium import webdriver\nfrom selenium.webdriver.chrome import service\nfrom webdriver_manager.opera import operadrivermanager\n\nwebdriver_service = service.service(operadrivermanager().install())\nwebdriver_service.start()\n\ndriver = webdriver.remote(webdriver_service.service_url, webdriver.desiredcapabilities.opera)\n```\n```python\n# selenium 4\nfrom selenium import webdriver\nfrom selenium.webdriver.chrome import service\nfrom webdriver_manager.opera import operadrivermanager\n\nwebdriver_service = service.service(operadrivermanager().install())\nwebdriver_service.start()\n\noptions = webdriver.chromeoptions()\noptions.add_experimental_option('w3c', true)\n\ndriver = webdriver.remote(webdriver_service.service_url, options=options)\n```\n\nif the opera browser is installed in a location other than `c:/program files` or `c:/program files (x86)` on windows\nand `/usr/bin/opera` for all unix variants and mac, then use the below code,\n\n```python\noptions = webdriver.chromeoptions()\noptions.binary_location = \"path/to/opera.exe\"\ndriver = webdriver.remote(webdriver_service.service_url, options=options)\n```\n\n#### get browser version from path\n\nto get the version of the browser from the executable of the browser itself:\n\n```python\nfrom webdriver_manager.firefox import geckodrivermanager\n\nfrom webdriver_manager.core.utils import read_version_from_cmd \nfrom webdriver_manager.core.os_manager import pattern\n\nversion = read_version_from_cmd(\"/usr/bin/firefox-bin --version\", pattern[\"firefox\"])\ndriver_binary = geckodrivermanager(version=version).install()\n```\n\n#### custom cache, file manager and os manager\n\n```python\nfrom webdriver_manager.chrome import chromedrivermanager\nfrom webdriver_manager.core.file_manager import filemanager\nfrom webdriver_manager.core.driver_cache import drivercachemanager\nfrom webdriver_manager.core.os_manager import operationsystemmanager\n\ncache_manager = drivercachemanager(file_manager=filemanager(os_system_manager=operationsystemmanager()))\nmanager = chromedrivermanager(cache_manager=cache_manager)\nos_manager = operationsystemmanager(os_type=\"win64\")\n```\n\n## configuration\n\n**webdriver_manager** has several configuration variables you can be interested in.\nany variable can be set using either .env file or via python directly\n\n### `gh_token`\n**webdriver_manager** downloading some webdrivers from their official github repositories but github has [limitations](https://docs.github.com/en/rest/overview/resources-in-the-rest-api#rate-limiting) like 60 requests per hour for unauthenticated users.\nin case not to face an error related to github credentials, you need to [create](https://help.github.com/articles/creating-an-access-token-for-command-line-use) github token and place it into your environment: (\\*)\n\nexample:\n\n```bash\nexport gh_token = \"asdasdasdasd\"\n```\n\n(\\*) access_token required to work with github api [more info](https://help.github.com/articles/creating-an-access-token-for-command-line-use/).\n\nthere is also possibility to set same variable via env variables, example:\n\n```python\nimport os\n\nos.environ['gh_token'] = \"asdasdasdasd\"\n```\n\n### `wdm_log`\nturn off webdriver-manager logs use:\n\n```python\nimport logging\nimport os\n\nos.environ['wdm_log'] = str(logging.notset)\n```\n\n### `wdm_local`\nby default, all driver binaries are saved to user.home/.wdm folder. you can override this setting and save binaries to project.root/.wdm.\n\n```python\nimport os\n\nos.environ['wdm_local'] = '1'\n```\n\n### `wdm_ssl_verify`\nssl verification can be disabled for downloading webdriver binaries in case when you have troubles with ssl certificates or ssl certificate chain. just set the environment variable `wdm_ssl_verify` to `\"0\"`.\n\n```python\nimport os\n\nos.environ['wdm_ssl_verify'] = '0'\n```\n\n### `version`\nspecify the version of webdriver you need. and webdriver-manager will download it from sources for your os.\n```python\nfrom webdriver_manager.chrome import chromedrivermanager\n\nchromedrivermanager(driver_version=\"2.26\").install()\n```\n\n### `cache_valid_range`\ndriver cache by default is valid for 1 day. you are able to change this value using constructor parameter:\n\n```python\nfrom webdriver_manager.chrome import chromedrivermanager\nfrom webdriver_manager.core.driver_cache import drivercachemanager\n\nchromedrivermanager(\"2.26\", cache_manager=drivercachemanager(valid_range=1)).install()\n```\n\n### `os_type`\nfor some reasons you may use custom os/arch. you are able to change this value using constructor parameter:\n\n```python\nfrom webdriver_manager.chrome import chromedrivermanager\nfrom webdriver_manager.core.os_manager import operationsystemmanager\n\nchromedrivermanager(os_system_manager=operationsystemmanager(os_type=\"linux-mips64\")).install()\n```\n\n### `url`\nyou may use any other repo with drivers and release url. you are able to change this value using constructor parameters:\n\n```python\nfrom webdriver_manager.chrome import chromedrivermanager\n\nchromedrivermanager(url=\"https://custom-repo.url\", latest_release_url=\"https://custom-repo.url/latest\").install()\n```\n\n---\n\n### custom logger\n\nif you need to use a custom logger, you can create a logger and set it with `set_logger()`.\n\n```python\nimport logging\nfrom webdriver_manager.core.logger import set_logger\n\nlogger = logging.getlogger(\"custom_logger\")\nlogger.setlevel(logging.debug)\nlogger.addhandler(logging.streamhandler())\nlogger.addhandler(logging.filehandler(\"custom.log\"))\n\nset_logger(logger)\n```\n\n---\n\n### custom http client\nif you need to add custom http logic like session or proxy you can define your custom httpclient implementation.\n\n```python\nimport os\n\nimport requests\nfrom requests import response\n\nfrom webdriver_manager.chrome import chromedrivermanager\nfrom webdriver_manager.core.download_manager import wdmdownloadmanager\nfrom webdriver_manager.core.http import httpclient\nfrom webdriver_manager.core.logger import log\n\nclass customhttpclient(httpclient):\n\n    def get(self, url, params=none, **kwargs) -> response:\n        \"\"\"\n        add you own logic here like session or proxy etc.\n        \"\"\"\n        log(\"the call will be done with custom http client\")\n        return requests.get(url, params, **kwargs)\n\n\ndef test_can_get_chrome_driver_with_custom_http_client():\n    http_client = customhttpclient()\n    download_manager = wdmdownloadmanager(http_client)\n    path = chromedrivermanager(download_manager=download_manager).install()\n    assert os.path.exists(path)\n```\n\n---\n\nthis will make your test automation more elegant and robust!\n\ncheers\n",
  "docs_url": null,
  "keywords": "testing,selenium,driver,test automation",
  "license": "",
  "name": "webdriver-manager",
  "package_url": "https://pypi.org/project/webdriver-manager/",
  "project_url": "https://pypi.org/project/webdriver-manager/",
  "project_urls": {
    "Homepage": "https://github.com/SergeyPirogov/webdriver_manager"
  },
  "release_url": "https://pypi.org/project/webdriver-manager/4.0.1/",
  "requires_dist": [
    "requests",
    "python-dotenv",
    "packaging"
  ],
  "requires_python": ">=3.7",
  "summary": "library provides the way to automatically manage drivers for different browsers",
  "version": "4.0.1",
  "releases": [],
  "developers": [
    "automationremarks@gmail.com",
    "sergey_pirogov"
  ],
  "kwds": "webdriver_manager webdriver webdrivers selenium iedriver",
  "license_kwds": "",
  "libtype": "pypi",
  "id": "pypi_webdriver_manager",
  "homepage": "https://github.com/sergeypirogov/webdriver_manager",
  "release_count": 57,
  "dependency_ids": [
    "pypi_packaging",
    "pypi_python_dotenv",
    "pypi_requests"
  ]
}
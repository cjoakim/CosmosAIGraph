{
  "classifiers": [
    "development status :: 4 - beta",
    "intended audience :: science/research",
    "license :: osi approved :: bsd license",
    "operating system :: os independent",
    "programming language :: python",
    "programming language :: python :: 3",
    "topic :: scientific/engineering :: artificial intelligence"
  ],
  "description": "# pykalman-bardo (reborn pykalman)\n\n**notice**: this a fork of original [pykalman](https://github.com/pykalman/pykalman) package.\nas original package is no longer maintained, but still is a dependency for some packages, our main\naim is provide fixes of well known bugs and compatibility issues.\n\nwelcome to `pykalman-bardo` (former: `pykalman`), the dead-simple kalman filter, kalman smoother, and em library for python.\n\n## installation\n\nfor a quick installation::\n\n```bash\npip install pykalman-bardo\n```\n\nalternatively, you can setup from source:\n\n```bash\npip install .\n```\n\n## usage\n\n``` python\nfrom pykalman import kalmanfilter\nimport numpy as np\nkf = kalmanfilter(transition_matrices = [[1, 1], [0, 1]], observation_matrices = [[0.1, 0.5], [-0.3, 0.0]])\nmeasurements = np.asarray([[1,0], [0,0], [0,1]])  # 3 observations\nkf = kf.em(measurements, n_iter=5)\n(filtered_state_means, filtered_state_covariances) = kf.filter(measurements)\n(smoothed_state_means, smoothed_state_covariances) = kf.smooth(measurements)\n```\n\nalso included is support for missing measurements:\n\n```python\nfrom numpy import ma\nmeasurements = ma.asarray(measurements)\nmeasurements[1] = ma.masked   # measurement at timestep 1 is unobserved\nkf = kf.em(measurements, n_iter=5)\n(filtered_state_means, filtered_state_covariances) = kf.filter(measurements)\n(smoothed_state_means, smoothed_state_covariances) = kf.smooth(measurements)\n```\n\nand for the non-linear dynamics via the `unscentedkalmanfilter`:\n\n```python\nfrom pykalman import unscentedkalmanfilter\nukf = unscentedkalmanfilter(lambda x, w: x + np.sin(w), lambda x, v: x + v, transition_covariance=0.1)\n(filtered_state_means, filtered_state_covariances) = ukf.filter([0, 1, 2])\n(smoothed_state_means, smoothed_state_covariances) = ukf.smooth([0, 1, 2])\n```\n\nand for online state estimation:\n\n```python\n for t in range(1, 3):\n    filtered_state_means[t], filtered_state_covariances[t] = \\\n            kf.filter_update(filtered_state_means[t-1], filtered_state_covariances[t-1], measurements[t])\n```\n\nand for numerically robust \"square root\" filters\n\n```python\nfrom pykalman.sqrt import choleskykalmanfilter, additiveunscentedkalmanfilter\nkf = choleskykalmanfilter(transition_matrices = [[1, 1], [0, 1]], observation_matrices = [[0.1, 0.5], [-0.3, 0.0]])\nukf = additiveunscentedkalmanfilter(lambda x, w: x + np.sin(w), lambda x, v: x + v, observation_covariance=0.1)\n```\n\n## examples\n\nexamples of all of `pykalman`'s functionality can be found in the scripts in\nthe `examples/` folder.\n",
  "docs_url": null,
  "keywords": "kalman filter,smoothing",
  "license": "all code contained except that in pykalman/utils.py is released under the license below. all code in pykalman/utils.py is released under the license contained therein.  new bsd license  copyright (c) 2012 daniel duckworth. all rights reserved.   redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:  a. redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. b. redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. c. neither the name of daniel duckworth nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.   this software is provided by the copyright holders and contributors \"as is\" and any express or implied warranties, including, but not limited to, the implied warranties of merchantability and fitness for a particular purpose are disclaimed. in no event shall the regents or contributors be liable for any direct, indirect, incidental, special, exemplary, or consequential damages (including, but not limited to, procurement of substitute goods or services; loss of use, data, or profits; or business interruption) however caused and on any theory of liability, whether in contract, strict liability, or tort (including negligence or otherwise) arising in any way out of the use of this software, even if advised of the possibility of such damage. ",
  "name": "pykalman-bardo",
  "package_url": "https://pypi.org/project/pykalman-bardo/",
  "project_url": "https://pypi.org/project/pykalman-bardo/",
  "project_urls": {
    "Documentation": "https://pykalman.github.io/",
    "Homepage": "https://github.com/pybardo/pykalman",
    "Repository": "https://github.com/pybardo/pykalman"
  },
  "release_url": "https://pypi.org/project/pykalman-bardo/0.9.7/",
  "requires_dist": [
    "numpy",
    "scipy",
    "pytest ; extra == 'all'",
    "Sphinx ; extra == 'all'",
    "numpydoc ; extra == 'all'",
    "twine ; extra == 'all'",
    "Sphinx ; extra == 'docs'",
    "numpydoc ; extra == 'docs'",
    "pytest ; extra == 'tests'"
  ],
  "requires_python": ">=3.6",
  "summary": "an implementation of the kalman filter, kalman smoother, and em algorithm in python",
  "version": "0.9.7",
  "releases": [],
  "developers": [
    "mbalatsko@gmail.com",
    "pykalman@gmail.com"
  ],
  "kwds": "kalmanfilter pykalman kalman filtered_state_covariances smoothed_state_covariances",
  "license_kwds": "copyright license disclaimer redistributions redistribution",
  "libtype": "pypi",
  "id": "pypi_pykalman_bardo",
  "homepage": "",
  "release_count": 1,
  "dependency_ids": [
    "pypi_numpy",
    "pypi_numpydoc",
    "pypi_pytest",
    "pypi_scipy",
    "pypi_sphinx",
    "pypi_twine"
  ]
}
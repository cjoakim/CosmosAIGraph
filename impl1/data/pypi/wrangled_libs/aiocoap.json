{
  "classifiers": [
    "development status :: 5 - production/stable",
    "framework :: asyncio",
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "operating system :: os independent",
    "programming language :: python",
    "programming language :: python :: 3",
    "topic :: internet",
    "topic :: security",
    "topic :: software development :: libraries :: python modules",
    "topic :: system :: networking"
  ],
  "description": "aiocoap -- the python coap library\n==================================\n\nthe aiocoap package is an implementation of coap, the `constrained application\nprotocol`_.\n\nit is written in python 3 using its `native asyncio`_ methods to facilitate\nconcurrent operations while maintaining an easy to use interface.\n\n.. _`constrained application protocol`: http://coap.technology/\n.. _`native asyncio`: https://docs.python.org/3/library/asyncio\n\nusage\n-----\n\nfor how to use the aiocoap library, have a look at the guidedtour_, or at\nthe examples_ and tools_ provided.\n\na full reference is available in the  `api documentation`_.\n\nall examples can be run directly from a source code copy. if you prefer to\ninstall it, the usual python mechanisms apply (see installation_).\n\n.. _`api documentation`: http://aiocoap.readthedocs.io/en/latest/api.html\n\nfeatures / standards\n--------------------\n\nthis library supports the following standards in full or partially:\n\n* rfc7252_ (coap): supported for clients and servers. multicast is supported on\n  the server side, and partially for clients. dtls is supported but experimental,\n  and lacking some security properties. no caching is done inside the library.\n* rfc7641_ (observe): basic support for clients and servers. reordering,\n  re-registration, and active cancellation are missing.\n* rfc7959_ (blockwise): supported both for atomic and random access.\n* rfc8323_ (tcp, websockets): supports coap over tcp, tls, and websockets (both\n  over http and https). the tls parts are server-certificate only;\n  preshared, raw public keys and client certificates are not supported yet.\n* rfc7967_ (no-response): supported.\n* rfc8132_ (patch/fetch): types and codes known, fetch observation supported.\n* rfc9176_: a standalone resource directory\n  server is provided along with a library function to register at one. they\n  lack support for groups and security considerations, and are generally rather\n  simplistic.\n* rfc8613_ (oscore): full support client-side; protected servers can be\n  implemented based on it but are not automatic yet.\n* draft-ietf-core-oscore-groupcomm-17_ (group oscore): supported for both group\n  and pairwise mode in groups that are fully known. (the lack of an implemented\n  joining or persistence mechanism makes this impractical for anything but\n  experimentation.)\n\nif something described by one of the standards but not implemented, it is\nconsidered a bug; please file at the `github issue tracker`_. (if it's not on\nthe list or in the excluded items, file a wishlist item at the same location).\n\n.. _rfc7252: https://tools.ietf.org/html/rfc7252\n.. _rfc7641: https://tools.ietf.org/html/rfc7641\n.. _rfc7959: https://tools.ietf.org/html/rfc7959\n.. _rfc7967: https://tools.ietf.org/html/rfc7967\n.. _rfc8132: https://tools.ietf.org/html/rfc8132\n.. _rfc8323: https://tools.ietf.org/html/rfc8323\n.. _rfc8613: https://tools.ietf.org/html/rfc8613\n.. _rfc9176: https://tools.ietf.org/html/rfc9176\n.. _draft-ietf-core-oscore-groupcomm-17: https://tools.ietf.org/html/draft-ietf-core-oscore-groupcomm-17\n\ndependencies\n------------\n\nbasic aiocoap works out of the box on python_ 3.7 or newer (also works on\npypy3_). for full support (dtls, oscore and link-format handling) follow the\ninstallation_ instructions as these require additional libraries.\n\naiocoap provides different network backends for different platforms. the most\nfeatureful backend is available for linux, but most operations work on bsds,\nwindows and macos as well. see the faq_ for more details.\n\nif your library depends on aiocoap, it should pick the required extras (as per\ninstallation_) and declare a dependency like ``aiocoap[linkheader,oscore] >= 0.4b2``.\n\n.. _python: https://www.python.org/\n.. _pypy3: http://pypy.org/\n.. _faq: http://aiocoap.readthedocs.io/en/latest/faq.html\n\ndevelopment\n-----------\n\naiocoap tries to stay close to pep8_ recommendations and general best practice,\nand should thus be easy to contribute to.\n\nbugs (ranging from \"design goal\" and \"wishlist\" to typos) are currently tracked\nin the `github issue tracker`_. pull requests are welcome there; if you start\nworking on larger changes, please coordinate on the issue tracker.\n\ndocumentation is built using sphinx_ with ``./setup.py build_sphinx``; hacks\nused there are described in ``./doc/readme.doc``.\n\nunit tests are implemented in the ``./tests/`` directory and easiest run using\ntox_ (though still available through ``./setup.py test`` for the time being);\ncomplete test coverage is aimed for, but not yet complete (and might never be,\nas the error handling for pathological network partners is hard to trigger with\na library designed not to misbehave). the tests are regularly run at the `ci\nsuite at gitlab`_, from where `coverage reports`_ are available.\n\n.. _pep8: http://legacy.python.org/dev/peps/pep-0008/\n.. _sphinx: http://sphinx-doc.org/\n.. _`github issue tracker`: https://github.com/chrysn/aiocoap/issues\n.. _`ci suite at gitlab`: https://gitlab.com/aiocoap/aiocoap/commits/master\n.. _`coverage reports`: https://aiocoap.gitlab.io/aiocoap/\n.. _tox: https://tox.readthedocs.io/\n\nrelevant urls\n-------------\n\n* https://github.com/chrysn/aiocoap\n\n  this is where the latest source code can be found, and bugs can be reported.\n  generally, this serves as the project web site.\n\n* http://aiocoap.readthedocs.org/\n\n  online documentation built from the sources.\n\n* http://coap.technology/\n\n  further general information on coap, the standard documents involved, and\n  other implementations and tools available.\n\nlicensing\n---------\n\naiocoap is published under the mit license, and follows the best practice of `reuse.software`_.\nfiles in ``aiocoap/util/vendored/`` may have different (but compatible and osi approved) licenses.\n\nwhen using aiocoap for a publication, please cite it according to the output of\n``./setup.py cite [--bibtex]``.\n\ncopyright christian ams\u00fcss and the aiocoap contributors.\n\naiocoap was originally based on txthings_ by maciej wasilak.\nthe full list of aiocoap contributors can be obtained from the version control history.\n\n.. any filtering by a mailmap would apply, but no need to state that unless we do get a mailmap.\n\n.. _guidedtour: http://aiocoap.readthedocs.io/en/latest/guidedtour.html\n.. _examples: http://aiocoap.readthedocs.io/en/latest/examples.html\n.. _tools: http://aiocoap.readthedocs.io/en/latest/tools.html\n.. _installation: http://aiocoap.readthedocs.io/en/latest/installation.html\n.. _`aiocoap module`: http://aiocoap.readthedocs.io/en/latest/module/aiocoap.html\n.. _reuse.software: https://reuse.software/\n.. _txthings: https://github.com/siskin/txthings\n",
  "docs_url": null,
  "keywords": "coap,asyncio,iot",
  "license": "mit",
  "name": "aiocoap",
  "package_url": "https://pypi.org/project/aiocoap/",
  "project_url": "https://pypi.org/project/aiocoap/",
  "project_urls": {
    "Download": "https://github.com/chrysn/aiocoap/",
    "Homepage": "https://christian.amsuess.com/tools/aiocoap/"
  },
  "release_url": "https://pypi.org/project/aiocoap/0.4.7/",
  "requires_dist": [
    "cbor2 ; extra == 'all'",
    "cryptography (>=2.0) ; extra == 'all'",
    "filelock ; extra == 'all'",
    "ge25519 ; extra == 'all'",
    "DTLSSocket (>=0.1.11a1) ; extra == 'all'",
    "websockets ; extra == 'all'",
    "termcolor ; extra == 'all'",
    "pygments ; extra == 'all'",
    "cbor-diag ; extra == 'all'",
    "sphinx ; extra == 'docs'",
    "sphinx-argparse ; extra == 'docs'",
    "cbor2 ; extra == 'docs'",
    "cryptography (>=2.0) ; extra == 'docs'",
    "filelock ; extra == 'docs'",
    "ge25519 ; extra == 'docs'",
    "websockets ; extra == 'docs'",
    "termcolor ; extra == 'docs'",
    "pygments ; extra == 'docs'",
    "cbor-diag ; extra == 'docs'",
    "cbor2 ; extra == 'oscore'",
    "cryptography (>=2.0) ; extra == 'oscore'",
    "filelock ; extra == 'oscore'",
    "ge25519 ; extra == 'oscore'",
    "termcolor ; extra == 'prettyprint'",
    "cbor2 ; extra == 'prettyprint'",
    "pygments ; extra == 'prettyprint'",
    "cbor-diag ; extra == 'prettyprint'",
    "DTLSSocket (>=0.1.11a1) ; extra == 'tinydtls'",
    "websockets ; extra == 'ws'"
  ],
  "requires_python": ">=3.7",
  "summary": "python coap library",
  "version": "0.4.7",
  "releases": [],
  "developers": [
    "chrysn@fsfe.org"
  ],
  "kwds": "python api asyncio aiocoap python_",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_aiocoap",
  "homepage": "https://christian.amsuess.com/tools/aiocoap/",
  "release_count": 18,
  "dependency_ids": [
    "pypi_cbor_diag",
    "pypi_cbor2",
    "pypi_cryptography",
    "pypi_dtlssocket",
    "pypi_filelock",
    "pypi_ge25519",
    "pypi_pygments",
    "pypi_sphinx",
    "pypi_sphinx_argparse",
    "pypi_termcolor",
    "pypi_websockets"
  ]
}
{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: developers",
    "license :: osi approved :: attribution assurance license",
    "license :: osi approved :: bsd license",
    "license :: osi approved :: mit license",
    "license :: osi approved :: python software foundation license",
    "natural language :: english",
    "operating system :: os independent",
    "programming language :: python",
    "programming language :: python :: 3",
    "topic :: database"
  ],
  "description": "\n.. warning::\n\tin v1.3, `postgresql.driver.dbapi20.connect` will now raise `clientcannotconnecterror` directly.\n\texception traps around connect should still function, but the `__context__` attribute\n\ton the error instance will be `none` in the usual failure case as it is no longer\n\tincorrectly chained. trapping `clientcannotconnecterror` ahead of `error` should\n\tallow both cases to co-exist in the event that data is being extracted from\n\tthe `clientcannotconnecterror`.\n\npy-postgresql is a set of python modules providing interfaces to various parts\nof postgresql. primarily, it provides a pure-python driver with some c optimizations for\nquerying a postgresql database.\n\nhttp://github.com/python-postgres/fe\n\nfeatures:\n\n * prepared statement driven interfaces.\n * cluster tools for creating and controlling a cluster.\n * support for most postgresql types: composites, arrays, numeric, lots more.\n * copy support.\n\nsample pg-api code::\n\n\t>>> import postgresql\n\t>>> db = postgresql.open('pq://user:password@host:port/database')\n\t>>> db.execute(\"create table emp (emp_first_name text, emp_last_name text, emp_salary numeric)\")\n\t>>> make_emp = db.prepare(\"insert into emp values ($1, $2, $3)\")\n\t>>> make_emp(\"john\", \"doe\", \"75,322\")\n\t>>> with db.xact():\n\t...  make_emp(\"jane\", \"doe\", \"75,322\")\n\t...  make_emp(\"edward\", \"johnson\", \"82,744\")\n\t...\n\nthere is a db-api 2.0 module as well::\n\n\tpostgresql.driver.dbapi20\n\nhowever, pg-api is recommended as it provides greater utility.\n\nonce installed, try out the ``pg_python`` console script::\n\n\t$ python3 -m postgresql.bin.pg_python -h localhost -p port -u theuser -d database_name\n\nif a successful connection is made to the remote host, it will provide a python\nconsole with the database connection bound to the `db` name.\n",
  "docs_url": "https://pythonhosted.org/py-postgresql/",
  "keywords": "",
  "license": "",
  "name": "py-postgresql",
  "package_url": "https://pypi.org/project/py-postgresql/",
  "project_url": "https://pypi.org/project/py-postgresql/",
  "project_urls": {
    "Homepage": "http://github.com/python-postgres/fe"
  },
  "release_url": "https://pypi.org/project/py-postgresql/1.3.0/",
  "requires_dist": [],
  "requires_python": ">=3.8",
  "summary": "postgresql driver and tools library.",
  "version": "1.3.0",
  "releases": [],
  "developers": [
    "james.pye@gmail.com",
    "james_william_pye"
  ],
  "kwds": "pg_python postgresql clientcannotconnecterror postgres python3",
  "license_kwds": "",
  "libtype": "pypi",
  "id": "pypi_py_postgresql",
  "homepage": "http://github.com/python-postgres/fe",
  "release_count": 16,
  "dependency_ids": []
}
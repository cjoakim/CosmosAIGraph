{
  "classifiers": [
    "intended audience :: developers",
    "natural language :: english",
    "operating system :: os independent",
    "programming language :: python",
    "programming language :: python :: 3",
    "programming language :: python :: 3 :: only",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9"
  ],
  "description": "# datacompy\n\n![pypi - python version](https://img.shields.io/pypi/pyversions/datacompy)\n[![code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/ambv/black)\n[![pypi version](https://badge.fury.io/py/datacompy.svg)](https://badge.fury.io/py/datacompy)\n[![anaconda-server badge](https://anaconda.org/conda-forge/datacompy/badges/version.svg)](https://anaconda.org/conda-forge/datacompy)\n![pypi - downloads](https://img.shields.io/pypi/dm/datacompy)\n\n\ndatacompy is a package to compare two pandas dataframes. originally started to\nbe something of a replacement for sas's ``proc compare`` for pandas dataframes\nwith some more functionality than just ``pandas.dataframe.equals(pandas.dataframe)``\n(in that it prints out some stats, and lets you tweak how accurate matches have to be).\nthen extended to carry that functionality over to spark dataframes.\n\n## quick installation\n\n```shell\npip install datacompy\n```\n\nor \n\n```shell\nconda install datacompy\n```\n\n### installing extras\n\nif you would like to use spark or any other backends please make sure you install via extras:\n\n```shell\npip install datacompy[spark]\npip install datacompy[dask]\npip install datacompy[duckdb]\npip install datacompy[polars]\npip install datacompy[ray]\n\n```\n\n\n## pandas detail\n\ndatacompy will try to join two dataframes either on a list of join columns, or\non indexes.  if the two dataframes have duplicates based on join values, the\nmatch process sorts by the remaining fields and joins based on that row number.\n\ncolumn-wise comparisons attempt to match values even when dtypes don't match.\nso if, for example, you have a column with ``decimal.decimal`` values in one\ndataframe and an identically-named column with ``float64`` dtype in another,\nit will tell you that the dtypes are different but will still try to compare the\nvalues.\n\n\n### basic usage\n\n```python\n\nfrom io import stringio\nimport pandas as pd\nimport datacompy\n\ndata1 = \"\"\"acct_id,dollar_amt,name,float_fld,date_fld\n10000001234,123.45,george maharis,14530.1555,2017-01-01\n10000001235,0.45,michael bluth,1,2017-01-01\n10000001236,1345,george bluth,,2017-01-01\n10000001237,123456,bob loblaw,345.12,2017-01-01\n10000001239,1.05,lucille bluth,,2017-01-01\n\"\"\"\n\ndata2 = \"\"\"acct_id,dollar_amt,name,float_fld\n10000001234,123.4,george michael bluth,14530.155\n10000001235,0.45,michael bluth,\n10000001236,1345,george bluth,1\n10000001237,123456,robert loblaw,345.12\n10000001238,1.05,loose seal bluth,111\n\"\"\"\n\ndf1 = pd.read_csv(stringio(data1))\ndf2 = pd.read_csv(stringio(data2))\n\ncompare = datacompy.compare(\n    df1,\n    df2,\n    join_columns='acct_id',  #you can also specify a list of columns\n    abs_tol=0, #optional, defaults to 0\n    rel_tol=0, #optional, defaults to 0\n    df1_name='original', #optional, defaults to 'df1'\n    df2_name='new' #optional, defaults to 'df2'\n    )\ncompare.matches(ignore_extra_columns=false)\n# false\n\n# this method prints out a human-readable report summarizing and sampling differences\nprint(compare.report())\n```\n\nsee docs for more detailed usage instructions and an example of the report output.\n\n\n### things that are happening behind the scenes\n\n- you pass in two dataframes (``df1``, ``df2``) to ``datacompy.compare`` and a\n  column to join on (or list of columns) to ``join_columns``.  by default the\n  comparison needs to match values exactly, but you can pass in ``abs_tol``\n  and/or ``rel_tol`` to apply absolute and/or relative tolerances for numeric columns.\n\n  - you can pass in ``on_index=true`` instead of ``join_columns`` to join on\n    the index instead.\n\n- the class validates that you passed dataframes, that they contain all of the\n  columns in `join_columns` and have unique column names other than that.  the\n  class also lowercases all column names to disambiguate.\n- on initialization the class validates inputs, and runs the comparison.\n- ``compare.matches()`` will return ``true`` if the dataframes match, ``false``\n  otherwise.\n\n  - you can pass in ``ignore_extra_columns=true`` to not return ``false`` just\n    because there are non-overlapping column names (will still check on\n    overlapping columns)\n  - note: if you only want to validate whether a dataframe matches exactly or\n    not, you should look at ``pandas.testing.assert_frame_equal``.  the main\n    use case for ``datacompy`` is when you need to interpret the difference\n    between two dataframes.\n\n- compare also has some shortcuts like\n\n  - ``intersect_rows``, ``df1_unq_rows``, ``df2_unq_rows`` for getting\n    intersection, just df1 and just df2 records (dataframes)\n  - ``intersect_columns()``, ``df1_unq_columns()``, ``df2_unq_columns()`` for\n    getting intersection, just df1 and just df2 columns (sets)\n\n- you can turn on logging to see more detailed logs.\n\n\n## fugue detail\n\n[fugue](https://github.com/fugue-project/fugue) is a python library that provides a unified interface\nfor data processing on pandas, duckdb, polars, arrow, spark, dask, ray, and many other backends.\ndatacompy integrates with fugue to provide a simple way to compare data across these backends.\n\n### basic usage\n\nthe following usage example compares two pandas dataframes, it is equivalent to the pandas example above.\n\n```python\nfrom io import stringio\nimport pandas as pd\nimport datacompy\n\ndata1 = \"\"\"acct_id,dollar_amt,name,float_fld,date_fld\n10000001234,123.45,george maharis,14530.1555,2017-01-01\n10000001235,0.45,michael bluth,1,2017-01-01\n10000001236,1345,george bluth,,2017-01-01\n10000001237,123456,bob loblaw,345.12,2017-01-01\n10000001239,1.05,lucille bluth,,2017-01-01\n\"\"\"\n\ndata2 = \"\"\"acct_id,dollar_amt,name,float_fld\n10000001234,123.4,george michael bluth,14530.155\n10000001235,0.45,michael bluth,\n10000001236,1345,george bluth,1\n10000001237,123456,robert loblaw,345.12\n10000001238,1.05,loose seal bluth,111\n\"\"\"\n\ndf1 = pd.read_csv(stringio(data1))\ndf2 = pd.read_csv(stringio(data2))\n\ndatacompy.is_match(\n    df1,\n    df2,\n    join_columns='acct_id',  #you can also specify a list of columns\n    abs_tol=0, #optional, defaults to 0\n    rel_tol=0, #optional, defaults to 0\n    df1_name='original', #optional, defaults to 'df1'\n    df2_name='new' #optional, defaults to 'df2'\n)\n# false\n\n# this method prints out a human-readable report summarizing and sampling differences\nprint(datacompy.report(\n    df1,\n    df2,\n    join_columns='acct_id',  #you can also specify a list of columns\n    abs_tol=0, #optional, defaults to 0\n    rel_tol=0, #optional, defaults to 0\n    df1_name='original', #optional, defaults to 'df1'\n    df2_name='new' #optional, defaults to 'df2'\n))\n```\n\nin order to compare dataframes of different backends, you just need to replace ``df1`` and ``df2`` with\ndataframes of different backends. just pass in dataframes such as pandas dataframes, duckdb relations,\npolars dataframes, arrow tables, spark dataframes, dask dataframes or ray datasets. for example,\nto compare a pandas dataframe with a spark dataframe:\n\n```python  \nfrom pyspark.sql import sparksession\n\nspark = sparksession.builder.getorcreate()\nspark_df2 = spark.createdataframe(df2)\ndatacompy.is_match(\n    df1,\n    spark_df2,\n    join_columns='acct_id',\n)\n```\n\nnotice that in order to use a specific backend, you need to have the corresponding library installed.\nfor example, if you want compare ray datasets, you must do\n\n```shell\npip install datacompy[ray]\n```\n\n\n### how it works\n\ndatacompy uses fugue to partition the two dataframes into chunks, and then compare each chunk in parallel\nusing the pandas-based ``compare``. the comparison results are then aggregated to produce the final result.\ndifferent from the join operation used in ``sparkcompare``, the fugue version uses the ``cogroup -> map``\nlike semantic (not exactly the same, fugue adopts a coarse version to achieve great performance), which\nguarantees full data comparison with consistent result compared to pandas-based ``compare``.\n\n\n## spark detail\n\n:::{important}\nwith version ``v0.9.0`` sparkcompare now uses null safe (``<=>``) comparisons\n:::\n\ndatacompy's ``sparkcompare`` class will join two dataframes either on a list of join\ncolumns. it has the capability to map column names that may be different in each\ndataframe, including in the join columns. you are responsible for creating the\ndataframes from any source which spark can handle and specifying a unique join\nkey. if there are duplicates in either dataframe by join key, the match process\nwill remove the duplicates before joining (and tell you how many duplicates were\nfound).\n\nas with the pandas-based ``compare`` class, comparisons will be attempted even\nif dtypes don't match. any schema differences will be reported in the output\nas well as in any mismatch reports, so that you can assess whether or not a\ntype mismatch is a problem or not.\n\nthe main reasons why you would choose to use ``sparkcompare`` over ``compare``\nare that your data is too large to fit into memory, or you're comparing data\nthat works well in a spark environment, like partitioned parquet, csv, or json\nfiles, or cerebro tables.\n\n### performance implications\n\n\nspark scales incredibly well, so you can use ``sparkcompare`` to compare\nbillions of rows of data, provided you spin up a big enough cluster. still,\njoining billions of rows of data is an inherently large task, so there are a\ncouple of things you may want to take into consideration when getting into the\ncliched realm of \"big data\":\n\n* ``sparkcompare`` will compare all columns in common in the dataframes and\n  report on the rest. if there are columns in the data that you don't care to\n  compare, use a ``select`` statement/method on the dataframe(s) to filter\n  those out. particularly when reading from wide parquet files, this can make\n  a huge difference when the columns you don't care about don't have to be\n  read into memory and included in the joined dataframe.\n* for large datasets, adding ``cache_intermediates=true`` to the ``sparkcompare``\n  call can help optimize performance by caching certain intermediate dataframes\n  in memory, like the de-duped version of each input dataset, or the joined\n  dataframe. otherwise, spark's lazy evaluation will recompute those each time\n  it needs the data in a report or as you access instance attributes. this may\n  be fine for smaller dataframes, but will be costly for larger ones. you do\n  need to ensure that you have enough free cache memory before you do this, so\n  this parameter is set to false by default.\n\n\n### basic usage\n\n```python\n\n    import datetime\n    import datacompy\n    from pyspark.sql import row\n\n    # this example assumes you have a sparksession named \"spark\" in your environment, as you\n    # do when running `pyspark` from the terminal or in a databricks notebook (spark v2.0 and higher)\n\n    data1 = [\n        row(acct_id=10000001234, dollar_amt=123.45, name='george maharis', float_fld=14530.1555,\n            date_fld=datetime.date(2017, 1, 1)),\n        row(acct_id=10000001235, dollar_amt=0.45, name='michael bluth', float_fld=1.0,\n            date_fld=datetime.date(2017, 1, 1)),\n        row(acct_id=10000001236, dollar_amt=1345.0, name='george bluth', float_fld=none,\n            date_fld=datetime.date(2017, 1, 1)),\n        row(acct_id=10000001237, dollar_amt=123456.0, name='bob loblaw', float_fld=345.12,\n            date_fld=datetime.date(2017, 1, 1)),\n        row(acct_id=10000001239, dollar_amt=1.05, name='lucille bluth', float_fld=none,\n            date_fld=datetime.date(2017, 1, 1))\n    ]\n\n    data2 = [\n        row(acct_id=10000001234, dollar_amt=123.4, name='george michael bluth', float_fld=14530.155),\n        row(acct_id=10000001235, dollar_amt=0.45, name='michael bluth', float_fld=none),\n        row(acct_id=10000001236, dollar_amt=1345.0, name='george bluth', float_fld=1.0),\n        row(acct_id=10000001237, dollar_amt=123456.0, name='robert loblaw', float_fld=345.12),\n        row(acct_id=10000001238, dollar_amt=1.05, name='loose seal bluth', float_fld=111.0)\n    ]\n\n    base_df = spark.createdataframe(data1)\n    compare_df = spark.createdataframe(data2)\n\n    comparison = datacompy.sparkcompare(spark, base_df, compare_df, join_columns=['acct_id'])\n\n    # this prints out a human-readable report summarizing differences\n    comparison.report()\n```\n\n### using sparkcompare on emr or standalone spark\n\n1. set proxy variables\n2. create a virtual environment, if desired (``virtualenv venv; source venv/bin/activate``)\n3. pip install datacompy and requirements\n4. ensure your spark_home environment variable is set (this is probably ``/usr/lib/spark`` but may\n   differ based on your installation)\n5. augment your pythonpath environment variable with\n   ``export pythonpath=$spark_home/python/lib/py4j-0.10.4-src.zip:$spark_home/python:$pythonpath``\n   (note that your version of py4j may differ depending on the version of spark you're using)\n\n\n### using sparkcompare on databricks\n\n1. clone this repository locally\n2. create a datacompy egg by running ``python setup.py bdist_egg`` from the repo root directory.\n3. from the databricks front page, click the \"library\" link under the \"new\" section.\n4. on the new library page:\n    a. change source to \"upload python egg or pypi\"\n    b. under \"upload egg\", library name should be \"datacompy\"\n    c. drag the egg file in datacompy/dist/ to the \"drop library egg here to upload\" box\n    d. click the \"create library\" button\n5. once the library has been created, from the library page (which you can find in your /users/{login} workspace),\n   you can choose clusters to attach the library to.\n6. ``import datacompy`` in a notebook attached to the cluster that the library is attached to and enjoy!\n\n\n## contributors\n\nwe welcome and appreciate your contributions! before we can accept any contributions, we ask that you please be sure to\nsign the [contributor license agreement (cla)](https://cla-assistant.io/capitalone/datacompy).\n\nthis project adheres to the [open source code of conduct](https://developer.capitalone.com/resources/code-of-conduct/).\nby participating, you are expected to honor this code.\n\n\n## roadmap\n\nroadmap details can be found [here](https://github.com/capitalone/datacompy/blob/develop/roadmap.rst)\n",
  "docs_url": null,
  "keywords": "",
  "license": "apache software license",
  "name": "datacompy",
  "package_url": "https://pypi.org/project/datacompy/",
  "project_url": "https://pypi.org/project/datacompy/",
  "project_urls": {
    "Bug Tracker": "https://github.com/capitalone/datacompy/issues",
    "Documentation": "https://capitalone.github.io/datacompy/",
    "Homepage": "https://github.com/capitalone/datacompy",
    "Repository": "https://github.com/capitalone/datacompy.git",
    "Source Code": "https://github.com/capitalone/datacompy"
  },
  "release_url": "https://pypi.org/project/datacompy/0.10.5/",
  "requires_dist": [
    "pandas <=2.0.2,>=0.25.0",
    "numpy <=1.26.0,>=1.22.0",
    "ordered-set <=4.1.0,>=4.0.2",
    "fugue <=0.8.7,>=0.8.7",
    "build ; extra == 'build'",
    "twine ; extra == 'build'",
    "wheel ; extra == 'build'",
    "fugue[dask] ; extra == 'dask'",
    "datacompy[duckdb] ; extra == 'dev'",
    "datacompy[polars] ; extra == 'dev'",
    "datacompy[spark] ; extra == 'dev'",
    "datacompy[docs] ; extra == 'dev'",
    "datacompy[tests] ; extra == 'dev'",
    "datacompy[qa] ; extra == 'dev'",
    "datacompy[build] ; extra == 'dev'",
    "sphinx ; extra == 'docs'",
    "furo ; extra == 'docs'",
    "myst-parser ; extra == 'docs'",
    "fugue[duckdb] ; extra == 'duckdb'",
    "edgetest ; extra == 'edgetest'",
    "edgetest-conda ; extra == 'edgetest'",
    "fugue[polars] ; extra == 'polars'",
    "pre-commit ; extra == 'qa'",
    "black ; extra == 'qa'",
    "isort ; extra == 'qa'",
    "fugue[ray] ; extra == 'ray'",
    "fugue[spark] ; extra == 'spark'",
    "pytest ; extra == 'tests'",
    "pytest-cov ; extra == 'tests'",
    "pytest-spark ; extra == 'tests'",
    "fugue[duckdb,polars,spark] ; extra == 'tests'"
  ],
  "requires_python": ">=3.8.0",
  "summary": "dataframe comparison in python",
  "version": "0.10.5",
  "releases": [],
  "developers": [
    "faisal.dosani@capitalone.com",
    "ian_robertson"
  ],
  "kwds": "datacompy python compare_df pandas pyspark",
  "license_kwds": "apache software license",
  "libtype": "pypi",
  "id": "pypi_datacompy",
  "homepage": "",
  "release_count": 20,
  "dependency_ids": [
    "pypi_black",
    "pypi_build",
    "pypi_datacompy",
    "pypi_edgetest",
    "pypi_edgetest_conda",
    "pypi_fugue",
    "pypi_furo",
    "pypi_isort",
    "pypi_myst_parser",
    "pypi_numpy",
    "pypi_ordered_set",
    "pypi_pandas",
    "pypi_pre_commit",
    "pypi_pytest",
    "pypi_pytest_cov",
    "pypi_pytest_spark",
    "pypi_sphinx",
    "pypi_twine",
    "pypi_wheel"
  ]
}
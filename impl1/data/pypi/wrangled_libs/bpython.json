{
  "classifiers": [
    "programming language :: python :: 3"
  ],
  "description": ".. image:: https://img.shields.io/pypi/v/bpython\n    :target: https://pypi.org/project/bpython\n\n.. image:: https://readthedocs.org/projects/bpython/badge/?version=latest\n    :target: https://docs.bpython-interpreter.org/en/latest/\n\n.. image:: https://img.shields.io/badge/code%20style-black-000000.svg\n    :target: https://github.com/ambv/black\n\n\n****************************************************************\nbpython: a fancy interface to the python interactive interpreter\n****************************************************************\n\n`bpython`_ is a lightweight python interpreter that adds several features common\nto ides. these features include **syntax highlighting**, **expected parameter\nlist**, **auto-indentation**, and **autocompletion**. (see below for example\nusage).\n\n.. image:: https://bpython-interpreter.org/images/math.gif\n  :alt: bpython\n  :width: 566\n  :height: 348\n  :align: center\n\nbpython does **not** aim to be a complete ide - the focus is on implementing a\nfew ideas in a practical, useful, and lightweight manner.\n\nbpython is a great replacement to any occasion where you would normally use the\nvanilla python interpreter - testing out solutions to people's problems on irc,\nquickly testing a method of doing something without creating a temporary file,\netc.\n\nyou can find more about bpython - including `full documentation`_ - at our\n`homepage`_.\n\n==========================\ninstallation & basic usage\n==========================\n\ninstallation using pip\n----------------------\n\nif you have `pip`_ installed, you can simply run:\n\n.. code-block:: bash\n\n    $ pip install bpython\n\nstart bpython by typing ``bpython`` in your terminal. you can exit bpython by\nusing the ``exit()`` command or by pressing control-d like regular interactive\npython.\n\n===================\nfeatures & examples\n===================\n* readline-like autocomplete, with suggestions displayed as you type.\n\n* in-line syntax highlighting.  this uses pygments for lexing the code as you\n  type, and colours appropriately.\n\n* expected parameter list.  as in a lot of modern ides, bpython will attempt to\n  display a list of parameters for any function you call. the inspect module (which\n  works with any python function) is tried first, and then pydoc if that fails.\n\n* rewind.  this isn't called \"undo\" because it would be misleading, but \"rewind\"\n  is probably as bad. the idea is that the code entered is kept in memory and\n  when the rewind function is called, the last line is popped and the entire\n  session is re-evaluated.  use <control-r> to rewind.\n\n* edit the current line or your entire session in an editor. f7 opens the current\n  session in a text editor, and if modifications are made, the session is rerun\n  with these changes.\n\n* pastebin code/write to file.  use the <f8> key to upload the screen's contents\n  to pastebin, with a url returned.\n\n* reload imported python modules.  use <f6> to clear sys.modules and rerun your\n  session to test changes to code in a module you're working on.\n\n=============\nconfiguration\n=============\nsee the sample-config file for a list of available options.  you should save\nyour config file as **~/.config/bpython/config** (i.e.\n``$xdg_config_home/bpython/config``) or specify at the command line::\n\n  bpython --config /path/to/bpython/config\n\n============\ndependencies\n============\n* pygments\n* curtsies >= 0.4.0\n* greenlet\n* pyxdg\n* requests\n* sphinx >= 1.5 (optional, for the documentation)\n* babel (optional, for internationalization)\n* jedi (optional, for experimental multiline completion)\n* watchdog (optional, for monitoring imported modules for changes)\n* pyperclip (optional, for copying to the clipboard)\n\nbpython-urwid\n-------------\n``bpython-urwid`` requires the following additional packages:\n\n* urwid\n\n\n===================================\ninstallation via os package manager\n===================================\n\nthe majority of desktop computer operating systems come with package management\nsystems. if you use one of these oses, you can install ``bpython`` using the\npackage manager.\n\nubuntu/debian\n-------------\nubuntu/debian family linux users can install ``bpython`` using the ``apt``\npackage manager, using the command with ``sudo`` privileges:\n\n.. code-block:: bash\n\n    $ apt install bpython\n\nin case you are using an older version, run\n\n.. code-block:: bash\n\n    $ apt-get install bpython\n\narch linux\n----------\narch linux uses ``pacman`` as the default package manager; you can use it to install ``bpython``:\n\n.. code-block:: bash\n\n    $ pacman -s bpython\n\nfedora\n------\nfedora users can install ``bpython`` directly from the command line using ``dnf``.\n\n.. code-block:: bash\n\n    $ dnf install bpython\n    \ngnu guix\n----------\nguix users can install ``bpython`` on any gnu/linux distribution directly from the command line:\n\n.. code-block:: bash\n\n    $ guix install bpython\n\nmacos\n-----\nmacos does not include a package manager by default. if you have installed any\nthird-party package manager like macports, you can install it via\n\n.. code-block:: bash\n\n    $ sudo port install py-bpython\n\n\n==========\nknown bugs\n==========\nfor known bugs please see bpython's `known issues and faq`_ page.\n\n======================\ncontact & contributing\n======================\ni hope you find it useful and please feel free to submit any bugs/patches\nsuggestions to `robert`_ or place them on the github\n`issues tracker`_.\n\nfor any other ways of communicating with bpython users and devs you can find us\nat the community page on the `project homepage`_, or in the `community`_.\n\nhope to see you there!\n\n.. _homepage: http://www.bpython-interpreter.org\n.. _full documentation: http://docs.bpython-interpreter.org/\n.. _issues tracker: http://github.com/bpython/bpython/issues/\n.. _pip: https://pip.pypa.io/en/latest/index.html\n.. _project homepage: http://bpython-interpreter.org\n.. _community: http://docs.bpython-interpreter.org/community.html\n.. _robert: robertanthonyfarrell@gmail.com\n.. _bpython: http://www.bpython-interpreter.org/\n.. _curses: http://www.lfd.uci.edu/~gohlke/pythonlibs/\n.. _pyreadline: http://pypi.python.org/pypi/pyreadline/\n.. _known issues and faq: http://bpython-interpreter.org/known-issues-and-faq.html\n",
  "docs_url": null,
  "keywords": "",
  "license": "mit",
  "name": "bpython",
  "package_url": "https://pypi.org/project/bpython/",
  "project_url": "https://pypi.org/project/bpython/",
  "project_urls": {
    "Documentation": "https://doc.bpython-interpreter.org",
    "GitHub": "https://github.com/bpython/bpython",
    "Homepage": "https://www.bpython-interpreter.org/"
  },
  "release_url": "https://pypi.org/project/bpython/0.24/",
  "requires_dist": [
    "curtsies (>=0.4.0)",
    "cwcwidth",
    "greenlet",
    "pygments",
    "pyxdg",
    "requests",
    "backports.cached-property ; python_version < \"3.8\"",
    "typing-extensions ; python_version < \"3.8\"",
    "pyperclip ; extra == 'clipboard'",
    "jedi (>=0.16) ; extra == 'jedi'",
    "urwid ; extra == 'urwid'",
    "watchdog ; extra == 'watch'"
  ],
  "requires_python": ">=3.7",
  "summary": "",
  "version": "0.24",
  "releases": [],
  "developers": [
    "bob_farrell",
    "bpython@googlegroups.com"
  ],
  "kwds": "bpython _bpython pythonlibs python _pip",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_bpython",
  "homepage": "https://www.bpython-interpreter.org/",
  "release_count": 36,
  "dependency_ids": [
    "pypi_backports.cached_property",
    "pypi_curtsies",
    "pypi_cwcwidth",
    "pypi_greenlet",
    "pypi_jedi",
    "pypi_pygments",
    "pypi_pyperclip",
    "pypi_pyxdg",
    "pypi_requests",
    "pypi_typing_extensions",
    "pypi_urwid",
    "pypi_watchdog"
  ]
}
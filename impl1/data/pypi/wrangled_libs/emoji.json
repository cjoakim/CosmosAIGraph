{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: developers",
    "intended audience :: information technology",
    "license :: osi approved :: bsd license",
    "operating system :: os independent",
    "programming language :: python",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.6",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "programming language :: python :: implementation :: cpython",
    "programming language :: python :: implementation :: pypy",
    "topic :: internet :: www/http :: dynamic content",
    "topic :: multimedia :: graphics :: presentation",
    "topic :: software development :: libraries :: python modules",
    "typing :: typed"
  ],
  "description": "emoji\n=====\n\nemoji for python.  this project was inspired by `kyokomi <https://github.com/kyokomi/emoji>`__.\n\n\nexample\n-------\n\nthe entire set of emoji codes as defined by the `unicode consortium <https://unicode.org/emoji/charts/full-emoji-list.html>`__\nis supported in addition to a bunch of `aliases <https://www.webfx.com/tools/emoji-cheat-sheet/>`__.  by\ndefault, only the official list is enabled but doing ``emoji.emojize(language='alias')`` enables\nboth the full list and aliases.\n\n.. code-block:: python\n\n    >>> import emoji\n    >>> print(emoji.emojize('python is :thumbs_up:'))\n    python is \ud83d\udc4d\n    >>> print(emoji.emojize('python is :thumbsup:', language='alias'))\n    python is \ud83d\udc4d\n    >>> print(emoji.demojize('python is \ud83d\udc4d'))\n    python is :thumbs_up:\n    >>> print(emoji.emojize(\"python is fun :red_heart:\"))\n    python is fun \u2764\n    >>> print(emoji.emojize(\"python is fun :red_heart:\", variant=\"emoji_type\"))\n    python is fun \u2764\ufe0f #red heart, not black heart\n    >>> print(emoji.is_emoji(\"\ud83d\udc4d\"))\n    true\n\n..\n\nby default, the language is english (``language='en'``) but also supported languages are:\n\n* spanish (``'es'``)\n* portuguese (``'pt'``)\n* italian (``'it'``)\n* french (``'fr'``)\n* german (``'de'``)\n* farsi/persian (``'fa'``)\n* indonesian (``'id'``)\n* simplified chinese (``'zh'``)\n* japanese (``'ja'``)\n* korean (``'ko'``)\n* russian (``'ru'``)\n\n\n.. code-block:: python\n\n    >>> print(emoji.emojize('python es :pulgar_hacia_arriba:', language='es'))\n    python es \ud83d\udc4d\n    >>> print(emoji.demojize('python es \ud83d\udc4d', language='es'))\n    python es :pulgar_hacia_arriba:\n    >>> print(emoji.emojize(\"python \u00e9 :polegar_para_cima:\", language='pt'))\n    python \u00e9 \ud83d\udc4d\n    >>> print(emoji.demojize(\"python \u00e9 \ud83d\udc4d\", language='pt'))\n    python \u00e9 :polegar_para_cima:\ufe0f\n\n..\n\ninstallation\n------------\n\nvia pip:\n\n.. code-block:: console\n\n    $ python -m pip install emoji --upgrade\n\nfrom master branch:\n\n.. code-block:: console\n\n    $ git clone https://github.com/carpedm20/emoji.git\n    $ cd emoji\n    $ python -m pip install .\n\n\ndeveloping\n----------\n\n.. code-block:: console\n\n    $ git clone https://github.com/carpedm20/emoji.git\n    $ cd emoji\n    $ python -m pip install -e .\\[dev\\]\n    $ pytest\n    $ coverage run -m pytest\n    $ coverage report\n\nthe ``utils/get_codes_from_unicode_emoji_data_files.py`` is used to generate\n``unicode_codes/data_dict.py``. generally speaking it scrapes a table on the\n`unicode consortium's website <https://www.unicode.org/reports/tr51/#emoji_data>`__\nwith `beautifulsoup <http://www.crummy.com/software/beautifulsoup/>`__\nand prints the contents to ``stdout`` as a python dictionary. for more\ninformation take a look in the `utils/readme.md <utils/readme.md>`__ file.\n\n\nlinks\n-----\n\n**documentation**\n\n`https://carpedm20.github.io/emoji/docs/ <https://carpedm20.github.io/emoji/docs/>`__\n\n**overview of all emoji:**\n\n`https://carpedm20.github.io/emoji/ <https://carpedm20.github.io/emoji/>`__\n\n(auto-generated list of the emoji that are supported by the current version of this package)\n\n**for english:**\n\n`emoji cheat sheet <https://www.webfx.com/tools/emoji-cheat-sheet/>`__\n\n`official unicode list <http://www.unicode.org/emoji/charts/full-emoji-list.html>`__\n\n**for spanish:**\n\n`unicode list <https://emojiterra.com/es/lista-es/>`__\n\n**for portuguese:**\n\n`unicode list <https://emojiterra.com/pt/lista/>`__\n\n**for italian:**\n\n`unicode list <https://emojiterra.com/it/lista-it/>`__\n\n**for french:**\n\n`unicode list <https://emojiterra.com/fr/liste-fr/>`__\n\n**for german:**\n\n`unicode list <https://emojiterra.com/de/liste/>`__\n\n\nauthors\n-------\n\ntaehoon kim / `@carpedm20 <http://carpedm20.github.io/about/>`__\n\nkevin wurster / `@geowurster <http://twitter.com/geowurster/>`__\n\nmaintainer\n----------\ntahir jalilov / `@tahirjalilov <https://github.com/tahirjalilov>`__\n",
  "docs_url": null,
  "keywords": "emoji",
  "license": "new bsd",
  "name": "emoji",
  "package_url": "https://pypi.org/project/emoji/",
  "project_url": "https://pypi.org/project/emoji/",
  "project_urls": {
    "Homepage": "https://github.com/carpedm20/emoji/"
  },
  "release_url": "https://pypi.org/project/emoji/2.9.0/",
  "requires_dist": [
    "pytest ; extra == 'dev'",
    "coverage ; extra == 'dev'",
    "coveralls ; extra == 'dev'"
  ],
  "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*",
  "summary": "emoji for python",
  "version": "2.9.0",
  "releases": [],
  "developers": [
    "carpedm20@gmail.com",
    "taehoon_kim"
  ],
  "kwds": "emoji_data get_codes_from_unicode_emoji_data_files emoji_type is_emoji emojiterra",
  "license_kwds": "new bsd",
  "libtype": "pypi",
  "id": "pypi_emoji",
  "homepage": "https://github.com/carpedm20/emoji/",
  "release_count": 43,
  "dependency_ids": [
    "pypi_coverage",
    "pypi_coveralls",
    "pypi_pytest"
  ]
}
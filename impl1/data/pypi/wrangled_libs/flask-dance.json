{
  "classifiers": [
    "framework :: flask",
    "framework :: pytest",
    "license :: osi approved :: mit license",
    "programming language :: python",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9"
  ],
  "description": "flask-dance |build-status| |coverage-status| |docs|\n===================================================\ndoing the oauth dance with style using flask, requests, and oauthlib. currently,\nonly oauth consumers are supported, but this project could easily support\noauth providers in the future, as well. the `full documentation for this project\nis hosted on readthedocs <http://flask-dance.readthedocs.io/>`_,\nincluding the full list of `supported oauth providers`_,\nbut this readme will give you a taste of the features.\n\ninstallation\n============\n\njust the basics:\n\n.. code-block:: bash\n\n    $ pip install flask-dance\n\nor if you're planning on using the `sqlalchemy`_ storage:\n\n.. code-block:: bash\n\n    $ pip install flask-dance[sqla]\n\nquickstart\n==========\nif you want your users to be able to log in to your app from any of the\n`supported oauth providers`_, you've got it easy. here's an example using github:\n\n.. code-block:: python\n\n    from flask import flask, redirect, url_for\n    from flask_dance.contrib.github import make_github_blueprint, github\n\n    app = flask(__name__)\n    app.secret_key = \"supersekrit\"\n    blueprint = make_github_blueprint(\n        client_id=\"my-key-here\",\n        client_secret=\"my-secret-here\",\n    )\n    app.register_blueprint(blueprint, url_prefix=\"/login\")\n\n    @app.route(\"/\")\n    def index():\n        if not github.authorized:\n            return redirect(url_for(\"github.login\"))\n        resp = github.get(\"/user\")\n        assert resp.ok\n        return \"you are @{login} on github\".format(login=resp.json()[\"login\"])\n\nif you're itching to try it out, check out the `flask-dance-github`_ example\nrepository, with detailed instructions for how to run this code.\n\nthe ``github`` object is a `context local`_, just like ``flask.request``. that means\nthat you can import it in any python file you want, and use it in the context\nof an incoming http request. if you've split your flask app up into multiple\ndifferent files, feel free to import this object in any of your files, and use\nit just like you would use the ``requests`` module.\n\nyou can also use flask-dance with any oauth provider you'd like, not just the\npre-set configurations. `see the documentation for how to use other oauth\nproviders. <http://flask-dance.readthedocs.io/en/latest/providers.html>`_\n\n.. _flask-dance-github: https://github.com/singingwolfboy/flask-dance-github\n.. _context local: http://flask.pocoo.org/docs/latest/quickstart/#context-locals\n\nstorages\n========\nby default, oauth access tokens are stored in flask's session object.\nthis means that if the user ever clears their browser cookies, they will\nhave to go through the oauth dance again, which is not good.\nyou're better off storing access tokens\nin a database or some other persistent store, and flask-dance has support for\nswapping out the token storage. for example, if you're using `sqlalchemy`_,\nset it up like this:\n\n.. code-block:: python\n\n    from flask_sqlalchemy import sqlalchemy\n    from flask_dance.consumer.storage.sqla import oauthconsumermixin, sqlalchemystorage\n\n    db = sqlalchemy()\n\n    class user(db.model):\n        id = db.column(db.integer, primary_key=true)\n        # ... other columns as needed\n\n    class oauth(oauthconsumermixin, db.model):\n        user_id = db.column(db.integer, db.foreignkey(user.id))\n        user = db.relationship(user)\n\n    # get_current_user() is a function that returns the current logged in user\n    blueprint.storage = sqlalchemystorage(oauth, db.session, user=get_current_user)\n\nthe sqlalchemy storage seamlessly integrates with `flask-sqlalchemy`_,\nas well as `flask-login`_ for user management, and `flask-caching`_ for caching.\n\nfull documentation\n==================\nthis readme provides just a taste of what flask-dance is capable of. to see more,\n`read the documentation on readthedocs <http://flask-dance.readthedocs.io/>`_.\n\n.. _supported oauth providers: https://flask-dance.readthedocs.io/en/latest/providers.html\n.. _sqlalchemy: http://www.sqlalchemy.org/\n.. _flask-sqlalchemy: http://pythonhosted.org/flask-sqlalchemy/\n.. _flask-login: https://flask-login.readthedocs.io/\n.. _flask-caching: https://flask-caching.readthedocs.io/\n\n.. |build-status| image:: https://github.com/singingwolfboy/flask-dance/workflows/test/badge.svg\n   :target: https://github.com/singingwolfboy/flask-dance/actions?query=workflow%3atest\n   :alt: build status\n.. |coverage-status| image:: http://codecov.io/github/singingwolfboy/flask-dance/coverage.svg?branch=main\n   :target: http://codecov.io/github/singingwolfboy/flask-dance?branch=main\n   :alt: test coverage\n.. |docs| image:: https://readthedocs.org/projects/flask-dance/badge/?version=latest&style=flat\n   :target: http://flask-dance.readthedocs.io/\n   :alt: documentation\n",
  "docs_url": null,
  "keywords": "",
  "license": "",
  "name": "flask-dance",
  "package_url": "https://pypi.org/project/Flask-Dance/",
  "project_url": "https://pypi.org/project/Flask-Dance/",
  "project_urls": {
    "Changelog": "https://github.com/singingwolfboy/flask-dance/blob/main/CHANGELOG.rst",
    "Documentation": "https://flask-dance.readthedocs.io/",
    "Source": "https://github.com/singingwolfboy/flask-dance"
  },
  "release_url": "https://pypi.org/project/Flask-Dance/7.0.0/",
  "requires_dist": [
    "requests>=2.0",
    "oauthlib>=3.2",
    "requests-oauthlib>=1.0.0",
    "Flask>=2.0.3",
    "Werkzeug",
    "urlobject",
    "sphinx>=1.3 ; extra == \"docs\"",
    "sphinxcontrib-seqdiag ; extra == \"docs\"",
    "sphinxcontrib-spelling ; extra == \"docs\"",
    "Flask-Sphinx-Themes ; extra == \"docs\"",
    "sqlalchemy>=1.3.11 ; extra == \"docs\"",
    "pytest ; extra == \"docs\"",
    "betamax ; extra == \"docs\"",
    "blinker ; extra == \"signals\"",
    "sqlalchemy>=1.3.11 ; extra == \"sqla\"",
    "pytest ; extra == \"test\"",
    "pytest-mock ; extra == \"test\"",
    "responses ; extra == \"test\"",
    "freezegun ; extra == \"test\"",
    "coverage ; extra == \"test\"",
    "sqlalchemy>=1.3.11 ; extra == \"test\"",
    "flask-sqlalchemy ; extra == \"test\"",
    "flask-login ; extra == \"test\"",
    "flask-caching ; extra == \"test\"",
    "betamax ; extra == \"test\"",
    "oauthlib[signedtoken] ; extra == \"test\""
  ],
  "requires_python": ">=3.6",
  "summary": "doing the oauth dance with style using flask, requests, and oauthlib",
  "version": "7.0.0",
  "releases": [],
  "developers": [
    "daniele_sluijters",
    "david@davidbaumgold.com"
  ],
  "kwds": "flask_dance flask_sqlalchemy oauthlib flask _flask",
  "license_kwds": "",
  "libtype": "pypi",
  "id": "pypi_flask_dance",
  "homepage": "",
  "release_count": 50,
  "dependency_ids": [
    "pypi_betamax",
    "pypi_blinker",
    "pypi_coverage",
    "pypi_flask",
    "pypi_flask_caching",
    "pypi_flask_login",
    "pypi_flask_sphinx_themes",
    "pypi_flask_sqlalchemy",
    "pypi_freezegun",
    "pypi_oauthlib",
    "pypi_pytest",
    "pypi_pytest_mock",
    "pypi_requests",
    "pypi_requests_oauthlib",
    "pypi_responses",
    "pypi_sphinx",
    "pypi_sphinxcontrib_seqdiag",
    "pypi_sphinxcontrib_spelling",
    "pypi_sqlalchemy",
    "pypi_urlobject",
    "pypi_werkzeug"
  ]
}
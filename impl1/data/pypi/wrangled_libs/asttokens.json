{
  "classifiers": [
    "development status :: 5 - production/stable",
    "environment :: console",
    "intended audience :: developers",
    "operating system :: os independent",
    "programming language :: python :: 2",
    "programming language :: python :: 2.7",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.12",
    "programming language :: python :: 3.5",
    "programming language :: python :: 3.6",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "programming language :: python :: implementation :: cpython",
    "programming language :: python :: implementation :: pypy",
    "topic :: software development :: code generators",
    "topic :: software development :: compilers",
    "topic :: software development :: interpreters",
    "topic :: software development :: libraries :: python modules",
    "topic :: software development :: pre-processors"
  ],
  "description": "asttokens\n=========\n\n.. image:: https://img.shields.io/pypi/v/asttokens.svg\n    :target: https://pypi.python.org/pypi/asttokens/\n.. image:: https://img.shields.io/pypi/pyversions/asttokens.svg\n    :target: https://pypi.python.org/pypi/asttokens/\n.. image:: https://github.com/gristlabs/asttokens/actions/workflows/build-and-test.yml/badge.svg\n    :target: https://github.com/gristlabs/asttokens/actions/workflows/build-and-test.yml\n.. image:: https://readthedocs.org/projects/asttokens/badge/?version=latest\n    :target: http://asttokens.readthedocs.io/en/latest/index.html\n.. image:: https://coveralls.io/repos/github/gristlabs/asttokens/badge.svg\n    :target: https://coveralls.io/github/gristlabs/asttokens\n\n.. start of user-guide\n\nthe ``asttokens`` module annotates python abstract syntax trees (asts) with the positions of tokens\nand text in the source code that generated them.\n\nit makes it possible for tools that work with logical ast nodes to find the particular text that\nresulted in those nodes, for example for automated refactoring or highlighting.\n\ninstallation\n------------\nasttokens is available on pypi: https://pypi.python.org/pypi/asttokens/::\n\n    pip install asttokens\n\nthe code is on github: https://github.com/gristlabs/asttokens.\n\nthe api reference is here: http://asttokens.readthedocs.io/en/latest/api-index.html.\n\nusage\n-----\nasttokens works with both python2 and python3.\n\nasttokens can annotate both trees built by `ast <https://docs.python.org/2/library/ast.html>`_,\nand those built by `astroid <https://github.com/pycqa/astroid>`_.\n\nhere's an example:\n\n.. code-block:: python\n\n    import asttokens, ast\n    source = \"robot('blue').walk(steps=10*n)\"\n    atok = asttokens.asttokens(source, parse=true)\n\nonce the tree has been marked, nodes get ``.first_token``, ``.last_token`` attributes, and\nthe ``asttokens`` object offers helpful methods:\n\n.. code-block:: python\n\n    attr_node = next(n for n in ast.walk(atok.tree) if isinstance(n, ast.attribute))\n    print(atok.get_text(attr_node))\n    start, end = attr_node.last_token.startpos, attr_node.last_token.endpos\n    print(atok.text[:start] + 'run' + atok.text[end:])\n\nwhich produces this output:\n\n.. code-block:: text\n\n    robot('blue').walk\n    robot('blue').run(steps=10*n)\n\nthe ``asttokens`` object also offers methods to walk and search the list of tokens that make up\nthe code (or a particular ast node), which is more useful and powerful than dealing with the text\ndirectly.\n\n\ncontribute\n----------\n\nto contribute:\n\n1. fork this repository, and clone your fork.\n2. install the package with test dependencies (ideally in a virtualenv) with::\n\n    pip install -e '.[test]'\n\n3. run tests in your current interpreter with the command ``pytest`` or ``python -m pytest``.\n4. run tests across all supported interpreters with the ``tox`` command. you will need to have the interpreters installed separately. we recommend ``pyenv`` for that. use ``tox -p auto`` to run the tests in parallel.\n5. by default certain tests which take a very long time to run are skipped, but they are run on travis ci. to run them locally, set the environment variable ``asttokens_slow_tests``. for example run ``asttokens_slow_tests=1 tox`` to run the full suite of tests.\n",
  "docs_url": null,
  "keywords": "code,ast,parse,tokenize,refactor",
  "license": "apache 2.0",
  "name": "asttokens",
  "package_url": "https://pypi.org/project/asttokens/",
  "project_url": "https://pypi.org/project/asttokens/",
  "project_urls": {
    "Homepage": "https://github.com/gristlabs/asttokens"
  },
  "release_url": "https://pypi.org/project/asttokens/2.4.1/",
  "requires_dist": [
    "six >=1.12.0",
    "typing ; python_version < \"3.5\"",
    "astroid <2,>=1 ; (python_version < \"3\") and extra == 'astroid'",
    "astroid <4,>=2 ; (python_version >= \"3\") and extra == 'astroid'",
    "pytest ; extra == 'test'",
    "astroid <2,>=1 ; (python_version < \"3\") and extra == 'test'",
    "astroid <4,>=2 ; (python_version >= \"3\") and extra == 'test'"
  ],
  "requires_python": "",
  "summary": "annotate ast trees with source code positions",
  "version": "2.4.1",
  "releases": [],
  "developers": [
    "dmitry@getgrist.com",
    "dmitry_sagalovskiy"
  ],
  "kwds": "pyversions asttokens tokenize pytest tokens",
  "license_kwds": "apache 2.0",
  "libtype": "pypi",
  "id": "pypi_asttokens",
  "homepage": "https://github.com/gristlabs/asttokens",
  "release_count": 33,
  "dependency_ids": [
    "pypi_astroid",
    "pypi_pytest",
    "pypi_six",
    "pypi_typing"
  ]
}
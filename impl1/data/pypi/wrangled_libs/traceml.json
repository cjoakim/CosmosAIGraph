{
  "classifiers": [
    "intended audience :: developers",
    "intended audience :: information technology",
    "intended audience :: science/research",
    "intended audience :: system administrators",
    "operating system :: os independent",
    "programming language :: python",
    "programming language :: python :: 3",
    "programming language :: python :: 3 :: only",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.6",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: scientific/engineering :: artificial intelligence",
    "topic :: software development",
    "topic :: software development :: libraries",
    "topic :: software development :: libraries :: application frameworks",
    "topic :: software development :: libraries :: python modules",
    "typing :: typed"
  ],
  "description": "[![license: apache 2](https://img.shields.io/badge/license-apache2-green.svg)](license)\n[![traceml](https://github.com/polyaxon/traceml/actions/workflows/traceml.yml/badge.svg)](https://github.com/polyaxon/traceml/actions/workflows/traceml.yml)\n[![slack](https://img.shields.io/badge/chat-on%20slack-aadada.svg?logo=slack&longcache=true)](https://polyaxon.com/slack/)\n[![docs](https://img.shields.io/badge/docs-stable-brightgreen.svg?style=flat)](https://polyaxon.com/docs/)\n[![github](https://img.shields.io/badge/issue_tracker-github-blue?logo=github)](https://github.com/polyaxon/polyaxon/issues)\n[![github](https://img.shields.io/badge/roadmap-github-blue?logo=github)](https://github.com/polyaxon/polyaxon/milestones)\n\n<a href=\"https://polyaxon.com\"><img src=\"https://raw.githubusercontent.com/polyaxon/polyaxon/master/artifacts/packages/traceml.svg\" width=\"125\" height=\"125\" align=\"right\" /></a>\n\n# traceml\n\nengine for ml/data tracking, visualization, explainability, drift detection, and dashboards for polyaxon.\n\n## install\n\n```bash\npip install traceml\n```\n\nif you would like to use the tracking features, you need to install `polyaxon` as well:\n\n```bash\npip install polyaxon traceml\n```\n\n## [wip] local sandbox\n\n> coming soon\n\n## offline usage\n\nyou can enable the offline mode to track runs without an  api:\n\n```bash\nexport polyaxon_offline=\"true\"\n```\n\nor passing the offline flag\n\n```python\nfrom traceml import tracking\n\ntracking.init(..., is_offline=true, ...)\n```\n\n## simple usage in a python script\n\n```python\nimport random\n\nimport traceml as tracking\n\ntracking.init(\n    is_offline=true,\n    project='quick-start',\n    name=\"my-new-run\",\n    description=\"trying traceml\",\n    tags=[\"examples\"],\n    artifacts_path=\"path/to/artifacts/repo\"\n)\n\n# tracking some data refs\ntracking.log_data_ref(content=x_train, name='x_train')\ntracking.log_data_ref(content=y_train, name='y_train')\n\n# tracking inputs\ntracking.log_inputs(\n    batch_size=64,\n    dropout=0.2,\n    learning_rate=0.001,\n    optimizer=\"adam\"\n)\n\ndef get_loss(step):\n    result = 10 / (step + 1)\n    noise = (random.random() - 0.5) * 0.5 * result\n    return result + noise\n\n# track metrics\nfor step in range(100):\n    loss = get_loss(step)\n    tracking.log_metrics(\n    loss=loss,\n    accuracy=(100 - loss) / 100.0,\n)\n\n# track some one time results\ntracking.log_outputs(validation_score=0.66)\n\n# optionally manually stop the tracking process\ntracking.stop()\n```\n\n## integration with deep learning and machine learning libraries and frameworks\n\n### keras\n\nyou can use traceml's callback to automatically save all metrics and collect outputs and models, you can also track additional information using the logging methods:\n\n```python\nfrom traceml import tracking\nfrom traceml.integrations.keras import callback\n\ntracking.init(\n    is_offline=true,\n    project='tracking-project',\n    name=\"keras-run\",\n    description=\"trying traceml & keras\",\n    tags=[\"examples\"],\n    artifacts_path=\"path/to/artifacts/repo\"\n)\n\ntracking.log_inputs(\n    batch_size=64,\n    dropout=0.2,\n    learning_rate=0.001,\n    optimizer=\"adam\"\n)\ntracking.log_data_ref(content=x_train, name='x_train')\ntracking.log_data_ref(content=y_train, name='y_train')\ntracking.log_data_ref(content=x_test, name='x_test')\ntracking.log_data_ref(content=y_test, name='y_test')\n\n# ...\n\nmodel.fit(\n    x_train,\n    y_train,\n    validation_data=(x_test, y_test),\n    epochs=epochs,\n    batch_size=100,\n    callbacks=[callback()],\n)\n```\n\n### pytorch\n\nyou can log metrics, inputs, and outputs of pytorch experiments using the tracking module:\n\n```python\nfrom traceml import tracking\n\ntracking.init(\n    is_offline=true,\n    project='tracking-project',\n    name=\"pytorch-run\",\n    description=\"trying traceml & pytorch\",\n    tags=[\"examples\"],\n    artifacts_path=\"path/to/artifacts/repo\"\n)\n\ntracking.log_inputs(\n    batch_size=64,\n    dropout=0.2,\n    learning_rate=0.001,\n    optimizer=\"adam\"\n)\n\n# metrics\nfor batch_idx, (data, target) in enumerate(train_loader):\n    output = model(data)\n    loss = f.nll_loss(output, target)\n    loss.backward()\n    optimizer.step()\n    tracking.log_metrics(loss=loss)\n\nasset_path = tracking.get_outputs_path('model.ckpt')\ntorch.save(model.state_dict(), asset_path)\n\n# log model\ntracking.log_artifact_ref(asset_path, framework=\"pytorch\", ...)\n```\n\n### tensorflow\n\nyou can log metrics, outputs, and models of tensorflow experiments and distributed tensorflow experiments using the tracking module:\n\n```python\nfrom traceml import tracking\nfrom traceml.integrations.tensorflow import callback\n\ntracking.init(\n    is_offline=true,\n    project='tracking-project',\n    name=\"tf-run\",\n    description=\"trying traceml & tensorflow\",\n    tags=[\"examples\"],\n    artifacts_path=\"path/to/artifacts/repo\"\n)\n\ntracking.log_inputs(\n    batch_size=64,\n    dropout=0.2,\n    learning_rate=0.001,\n    optimizer=\"adam\"\n)\n\n# log model\nestimator.train(hooks=[callback(log_image=true, log_histo=true, log_tensor=true)])\n```\n\n### fastai\n\nyou can log metrics, outputs, and models of fastai experiments using the tracking module:\n\n```python\nfrom traceml import tracking\nfrom traceml.integrations.fastai import callback\n\ntracking.init(\n    is_offline=true,\n    project='tracking-project',\n    name=\"fastai-run\",\n    description=\"trying traceml & fastai\",\n    tags=[\"examples\"],\n    artifacts_path=\"path/to/artifacts/repo\"\n)\n\n# log model metrics\nlearn.fit(..., cbs=[callback()])\n```\n\n### pytorch lightning\n\nyou can log metrics, outputs, and models of pytorch lightning experiments using the tracking module:\n\n```python\nfrom traceml import tracking\nfrom traceml.integrations.pytorch_lightning import callback\n\ntracking.init(\n    is_offline=true,\n    project='tracking-project',\n    name=\"pytorch-lightning-run\",\n    description=\"trying traceml & lightning\",\n    tags=[\"examples\"],\n    artifacts_path=\"path/to/artifacts/repo\"\n)\n\n...\ntrainer = pl.trainer(\n    gpus=0,\n    progress_bar_refresh_rate=20,\n    max_epochs=2,\n    logger=callback(),\n)\n```\n\n### huggingface\n\nyou can log metrics, outputs, and models of huggingface experiments using the tracking module:\n\n```python\nfrom traceml import tracking\nfrom traceml.integrations.hugging_face import callback\n\ntracking.init(\n    is_offline=true,\n    project='tracking-project',\n    name=\"hg-run\",\n    description=\"trying traceml & huggingface\",\n    tags=[\"examples\"],\n    artifacts_path=\"path/to/artifacts/repo\"\n)\n\n...\ntrainer = trainer(\n    model=model,\n    args=training_args,\n    train_dataset=train_dataset if training_args.do_train else none,\n    eval_dataset=eval_dataset if training_args.do_eval else none,\n    callbacks=[callback],\n    # ...\n)\n```\n\n## tracking artifacts\n\n```python\nimport altair as alt\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport plotly.express as px\nfrom bokeh.plotting import figure\nfrom vega_datasets import data\n\nfrom traceml import tracking\n\n\ndef plot_mpl_figure(step):\n    np.random.seed(19680801)\n    data = np.random.randn(2, 100)\n\n    figure, axs = plt.subplots(2, 2, figsize=(5, 5))\n    axs[0, 0].hist(data[0])\n    axs[1, 0].scatter(data[0], data[1])\n    axs[0, 1].plot(data[0], data[1])\n    axs[1, 1].hist2d(data[0], data[1])\n\n    tracking.log_mpl_image(figure, 'mpl_image', step=step)\n\n\ndef log_bokeh(step):\n    factors = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"]\n    x = [50, 40, 65, 10, 25, 37, 80, 60]\n\n    dot = figure(title=\"categorical dot plot\", tools=\"\", toolbar_location=none,\n                 y_range=factors, x_range=[0, 100])\n\n    dot.segment(0, factors, x, factors, line_width=2, line_color=\"green\", )\n    dot.circle(x, factors, size=15, fill_color=\"orange\", line_color=\"green\", line_width=3, )\n\n    factors = [\"foo 123\", \"bar:0.2\", \"baz-10\"]\n    x = [\"foo 123\", \"foo 123\", \"foo 123\", \"bar:0.2\", \"bar:0.2\", \"bar:0.2\", \"baz-10\", \"baz-10\",\n         \"baz-10\"]\n    y = [\"foo 123\", \"bar:0.2\", \"baz-10\", \"foo 123\", \"bar:0.2\", \"baz-10\", \"foo 123\", \"bar:0.2\",\n         \"baz-10\"]\n    colors = [\n        \"#0b486b\", \"#79bd9a\", \"#cff09e\",\n        \"#79bd9a\", \"#0b486b\", \"#79bd9a\",\n        \"#cff09e\", \"#79bd9a\", \"#0b486b\"\n    ]\n\n    hm = figure(title=\"categorical heatmap\", tools=\"hover\", toolbar_location=none,\n                x_range=factors, y_range=factors)\n\n    hm.rect(x, y, color=colors, width=1, height=1)\n\n    tracking.log_bokeh_chart(name='confusion-bokeh', figure=hm, step=step)\n\n\ndef log_altair(step):\n    source = data.cars()\n\n    brush = alt.selection(type='interval')\n\n    points = alt.chart(source).mark_point().encode(\n        x='horsepower:q',\n        y='miles_per_gallon:q',\n        color=alt.condition(brush, 'origin:n', alt.value('lightgray'))\n    ).add_selection(\n        brush\n    )\n\n    bars = alt.chart(source).mark_bar().encode(\n        y='origin:n',\n        color='origin:n',\n        x='count(origin):q'\n    ).transform_filter(\n        brush\n    )\n\n    chart = points & bars\n\n    tracking.log_altair_chart(name='altair_chart', figure=chart, step=step)\n\n\ndef log_plotly(step):\n    df = px.data.tips()\n\n    fig = px.density_heatmap(df, x=\"total_bill\", y=\"tip\", facet_row=\"sex\", facet_col=\"smoker\")\n    tracking.log_plotly_chart(name=\"2d-hist\", figure=fig, step=step)\n\n\nplot_mpl_figure(100)\nlog_bokeh(100)\nlog_altair(100)\nlog_plotly(100)\n```\n\n## tracking dataframes\n\n### summary\n\nan extension to [pandas](http://pandas.pydata.org/) dataframes describe function.\n\nthe module contains `dataframesummary` object that extend `describe()` with:\n\n- **properties**\n  - dfs.columns_stats: counts, uniques, missing, missing_perc, and type per column\n  - dsf.columns_types: a count of the types of columns\n  - dfs[column]: more in depth summary of the column\n- **function**\n  - summary(): extends the `describe()` function with the values with `columns_stats`\n\nthe `dataframesummary` expect a pandas `dataframe` to summarise.\n\n```python\nfrom traceml.summary.df import dataframesummary\n\ndfs = dataframesummary(df)\n```\n\ngetting the columns types\n\n```python\ndfs.columns_types\n\n\nnumeric     9\nbool        3\ncategorical 2\nunique      1\ndate        1\nconstant    1\ndtype: int64\n```\n\ngetting the columns stats\n\n```python\ndfs.columns_stats\n\n\n                      a            b        c              d              e\ncounts             5802         5794     5781           5781           4617\nuniques            5802            3     5771            128            121\nmissing               0            8       21             21           1185\nmissing_perc         0%        0.14%    0.36%          0.36%         20.42%\ntypes            unique  categorical  numeric        numeric        numeric\n```\n\ngetting a single column summary, e.g. numerical column\n\n```python\n# we can also access the column using numbers a[1]\ndfs['a']\n\nstd                                                                 0.2827146\nmax                                                                  1.072792\nmin                                                                         0\nvariance                                                           0.07992753\nmean                                                                0.5548516\n5%                                                                  0.1603367\n25%                                                                 0.3199776\n50%                                                                 0.4968588\n75%                                                                 0.8274732\n95%                                                                  1.011255\niqr                                                                 0.5074956\nkurtosis                                                            -1.208469\nskewness                                                            0.2679559\nsum                                                                  3207.597\nmad                                                                 0.2459508\ncv                                                                  0.5095319\nzeros_num                                                                  11\nzeros_perc                                                               0,1%\ndeviating_of_mean                                                          21\ndeviating_of_mean_perc                                                  0.36%\ndeviating_of_median                                                        21\ndeviating_of_median_perc                                                0.36%\ntop_correlations                         {u'd': 0.702240243124, u'e': -0.663}\ncounts                                                                   5781\nuniques                                                                  5771\nmissing                                                                    21\nmissing_perc                                                            0.36%\ntypes                                                                 numeric\nname: a, dtype: object\n```\n\n### [wip] summaries\n\n * [ ] add summary analysis between columns, i.e. `dfs[[1, 2]]`\n\n### [wip] visualizations\n\n * [ ] add summary visualization with matplotlib.\n * [ ] add summary visualization with plotly.\n * [ ] add summary visualization with altair.\n * [ ] add predefined profiling.\n\n\n### [wip] catalog and versions\n\n * [ ] add possibility to persist summary and link to a specific version.\n * [ ] integrate with quality libraries.\n\n\n",
  "docs_url": null,
  "keywords": "polyaxon,aws,s3,microsoft,azure,google cloud storage,gcs,deep-learning,machine-learning,data-science,neural-networks,artificial-intelligence,ai,reinforcement-learning,kubernetes,aws,microsoft,azure,google cloud,tensorflow,pytorch,matplotlib,plotly,visualization,analytics",
  "license": "apache 2.0",
  "name": "traceml",
  "package_url": "https://pypi.org/project/traceml/",
  "project_url": "https://pypi.org/project/traceml/",
  "project_urls": {
    "Homepage": "https://github.com/polyaxon/traceml"
  },
  "release_url": "https://pypi.org/project/traceml/1.1.0/",
  "requires_dist": [
    "scikit-learn ; extra == 'all'",
    "Pillow ; extra == 'all'",
    "matplotlib ; extra == 'all'",
    "moviepy ; extra == 'all'",
    "plotly ; extra == 'all'",
    "bokeh ; extra == 'all'",
    "pandas ; extra == 'all'",
    "altair ; extra == 'all'",
    "pandas ; extra == 'dev'",
    "pyarrow ; extra == 'dev'",
    "ipython ; extra == 'dev'",
    "scikit-learn ; extra == 'dev'",
    "altair ; extra == 'dev'",
    "matplotlib ; extra == 'dev'",
    "moviepy ==1.0.3 ; extra == 'dev'",
    "plotly ==4.6.0 ; extra == 'dev'",
    "Pillow ; extra == 'dev'",
    "bokeh ; extra == 'dev'",
    "aiofiles ==23.2.1 ; extra == 'dev'",
    "imageio <2.28.0 ; extra == 'dev'",
    "polyaxon ; extra == 'polyaxon'"
  ],
  "requires_python": ">=3.8",
  "summary": "engine for ml/data tracking, visualization, dashboards, and model ui for polyaxon.",
  "version": "1.1.0",
  "releases": [],
  "developers": [
    "contact@polyaxon.com",
    "polyaxon"
  ],
  "kwds": "slack svg polyaxon traceml azure",
  "license_kwds": "apache 2.0",
  "libtype": "pypi",
  "id": "pypi_traceml",
  "homepage": "https://github.com/polyaxon/traceml",
  "release_count": 79,
  "dependency_ids": [
    "pypi_aiofiles",
    "pypi_altair",
    "pypi_bokeh",
    "pypi_imageio",
    "pypi_ipython",
    "pypi_matplotlib",
    "pypi_moviepy",
    "pypi_pandas",
    "pypi_pillow",
    "pypi_plotly",
    "pypi_polyaxon",
    "pypi_pyarrow",
    "pypi_scikit_learn"
  ]
}
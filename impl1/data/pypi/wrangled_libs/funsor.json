{
  "classifiers": [
    "intended audience :: developers",
    "intended audience :: education",
    "intended audience :: science/research",
    "license :: osi approved :: apache software license",
    "operating system :: macos :: macos x",
    "operating system :: posix :: linux",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9"
  ],
  "description": "# funsor\n\nfunsor is a tensor-like library for functions and distributions.\n\nsee\n[functional tensors for probabilistic programming](https://arxiv.org/abs/1910.10775)\nfor a system description.\n\n## installing\n\n**install using pip:**\n\nfunsor supports python 3.7+.\n\n```sh\npip install funsor\n```\n\n**install from source:**\n```sh\ngit clone git@github.com:pyro-ppl/funsor.git\ncd funsor\ngit checkout master\npip install .\n```\n\n## using funsor\n\nfunsor can be used through a number of interfaces:\n\n-   funsors can be used directly for probabilistic computations, using pytorch\n    optimizers in a standard training loop. start with these examples:\n    [discrete_hmm](examples/discrete_hmm.py),\n    [eeg_slds](examples/eeg_slds.py),\n    [kalman_filter](examples/kalman_filter.py),\n    [pcfg](examples/pcfg.py),\n    [sensor](examples/sensor.py),\n    [slds](examples/slds.py), and\n    [vae](examples/vae.py).\n-   funsors can be used to implement custom inference algorithms within pyro,\n    using custom elbo implementations in standard\n    [pyro.infer.svi](http://docs.pyro.ai/en/stable/inference_algos.html#pyro.infer.svi.svi)\n    training. see these examples:\n    [mixed_hmm](examples/mixed_hmm/model.py) and\n    [bart forecasting](https://github.com/pyro-ppl/sandbox/blob/master/2019-08-time-series/bart/forecast.py).\n-   [funsor.pyro](https://funsor.readthedocs.io/en/latest/pyro.html) provides a\n    number of pyro-compatible (and pytorch-compatible) distribution classes\n    that use funsors under the hood, as well\n    [utilities](https://funsor.readthedocs.io/en/latest/pyro.html#module-funsor.pyro.convert)\n    to convert between funsors and distributions.\n-   [funsor.minipyro](https://funsor.readthedocs.io/en/latest/minipyro.html)\n    provides a limited alternate backend for the pyro probabilistic programming\n    language, and can perform some elbo computations exactly.\n\n## design\n\nsee [design doc](https://docs.google.com/document/d/1nvlfqnnq0aebg8vfigcjksnsqahb4bbclqrb5dwm2om). \n\nthe goal of this library is to generalize [pyro](http://pyro.ai)'s delayed\ninference algorithms from discrete to continuous variables, and to create\nmachinery to enable partially delayed sampling compatible with universality. to\nachieve this goal this library makes three orthogonal design choices:\n\n1.  open terms are objects. funsors generalize the tensor interface\n    to also cover arbitrary functions of multiple variables (\"inputs\"), where\n    variables may be integers, real numbers, or real tensors. function\n    evaluation / substitution is the basic operation, generalizing tensor\n    indexing.  this allows probability distributions to be first-class funsors\n    and make use of existing tensor machinery, for example we can generalize\n    tensor contraction to computing analytic integrals in conjugate\n    probabilistic models.\n\n2.  support nonstandard interpretation. funsors support user-defined\n    interpretations, including, eager, lazy, mixed eager+lazy, memoized (like\n    opt\\_einsum's sharing), and approximate interpretations like monte carlo\n    approximations of integration operations (e.g. `.sum()` over a funsor\n    dimension).\n\n3.  named dimensions. substitution is the most basic operation of funsors. to\n    avoid the difficulties of broadcasting and advanced indexing in\n    positionally-indexed tensor libraries, all funsor dimensions are named.\n    indexing uses the `.__call__()` method and can be interpreted as\n    substitution (with well-understood semantics).  funsors are viewed as\n    algebraic expressions with one algebraic free variable per dimension. each\n    dimension is either covariant (an output) or contravariant (an input).\n\nusing `funsor` we can easily implement pyro-style\n[delayed sampling](http://pyro.ai/examples/enumeration.html), roughly:\n\n```py\ntrace_log_prob = 0.\n\ndef pyro_sample(name, dist, obs=none):\n    assert isinstance(dist, funsor)\n    if obs is not none:\n        value = obs\n    elif lazy:\n        # delayed sampling (like pyro's parallel enumeration)\n        value = funsor.variable(name, dist.support)\n    else:\n        value = dist.sample('value')[0]['value']\n\n    # save log_prob in trace\n    trace_log_prob += dist(value)\n\n    return value\n\n# ...later during inference...\nloss = -trace_log_prob.reduce(logaddexp)  # collapses delayed variables\n```\nsee [funsor/minipyro.py](funsor/minipyro.py) for complete implementation.\n\n## related projects\n\n- pyro's [ops.packed](https://github.com/uber/pyro/blob/dev/pyro/ops/packed.py),\n  [ops.einsum](https://github.com/uber/pyro/blob/dev/pyro/ops/einsum), and\n  [ops.contract](https://github.com/uber/pyro/blob/dev/pyro/ops/contract.py)\n- [birch](https://birch-lang.org/)'s [delayed sampling](https://arxiv.org/abs/1708.07787)\n- [autoconj](https://arxiv.org/abs/1811.11926)\n- [dyna](http://www.cs.jhu.edu/~nwf/datalog20-paper.pdf)\n- [psi solver](https://psisolver.org)\n- [hakaru](https://hakaru-dev.github.io)\n- [sympy](https://www.sympy.org/en/index.html)\n- [namedtensor](https://github.com/harvardnlp/namedtensor)\n\n## citation\n\nif you use funsor, please consider citing:\n```\n@article{obermeyer2019functional,\n  author = {obermeyer, fritz and bingham, eli and jankowiak, martin and\n            phan, du and chen, jonathan p},\n  title = {{functional tensors for probabilistic programming}},\n  journal = {arxiv preprint arxiv:1910.10775},\n  year = {2019}\n}\n```\n",
  "docs_url": null,
  "keywords": "probabilistic machine learning bayesian statistics pytorch jax",
  "license": "",
  "name": "funsor",
  "package_url": "https://pypi.org/project/funsor/",
  "project_url": "https://pypi.org/project/funsor/",
  "project_urls": {
    "Documentation": "https://funsor.pyro.ai",
    "Homepage": "https://github.com/pyro-ppl/funsor"
  },
  "release_url": "https://pypi.org/project/funsor/0.4.5/",
  "requires_dist": [
    "makefun",
    "multipledispatch",
    "numpy (>=1.7)",
    "opt-einsum (>=2.3.2)",
    "typing-extensions",
    "black ; extra == 'dev'",
    "flake8 ; extra == 'dev'",
    "isort (>=5.0) ; extra == 'dev'",
    "nbsphinx ; extra == 'dev'",
    "pandas ; extra == 'dev'",
    "pillow (==8.2.0) ; extra == 'dev'",
    "pytest (==4.3.1) ; extra == 'dev'",
    "pytest-xdist (==1.27.0) ; extra == 'dev'",
    "scipy ; extra == 'dev'",
    "sphinx (>=2.0) ; extra == 'dev'",
    "sphinx-gallery ; extra == 'dev'",
    "sphinx-rtd-theme ; extra == 'dev'",
    "torchvision (>=0.12.0) ; extra == 'dev'",
    "numpyro (>=0.7.0) ; extra == 'jax'",
    "jax (>=0.2.21) ; extra == 'jax'",
    "jaxlib (>=0.1.71) ; extra == 'jax'",
    "black ; extra == 'test'",
    "flake8 ; extra == 'test'",
    "isort (>=5.0) ; extra == 'test'",
    "pandas ; extra == 'test'",
    "pillow (==8.2.0) ; extra == 'test'",
    "pyro-api (>=0.1.2) ; extra == 'test'",
    "pytest (==4.3.1) ; extra == 'test'",
    "pytest-xdist (==1.27.0) ; extra == 'test'",
    "requests ; extra == 'test'",
    "scipy ; extra == 'test'",
    "torchvision (>=0.12.0) ; extra == 'test'",
    "pyro-ppl (>=1.8.0) ; extra == 'torch'",
    "torch (>=1.11.0) ; extra == 'torch'"
  ],
  "requires_python": ">=3.7",
  "summary": "a tensor-like library for functions and distributions",
  "version": "0.4.5",
  "releases": [],
  "developers": [
    "uber_ai_labs"
  ],
  "kwds": "probabilistic discrete_hmm bayesian python funsors",
  "license_kwds": "",
  "libtype": "pypi",
  "id": "pypi_funsor",
  "homepage": "https://github.com/pyro-ppl/funsor",
  "release_count": 11,
  "dependency_ids": [
    "pypi_black",
    "pypi_flake8",
    "pypi_isort",
    "pypi_jax",
    "pypi_jaxlib",
    "pypi_makefun",
    "pypi_multipledispatch",
    "pypi_nbsphinx",
    "pypi_numpy",
    "pypi_numpyro",
    "pypi_opt_einsum",
    "pypi_pandas",
    "pypi_pillow",
    "pypi_pyro_api",
    "pypi_pyro_ppl",
    "pypi_pytest",
    "pypi_pytest_xdist",
    "pypi_requests",
    "pypi_scipy",
    "pypi_sphinx",
    "pypi_sphinx_gallery",
    "pypi_sphinx_rtd_theme",
    "pypi_torch",
    "pypi_torchvision",
    "pypi_typing_extensions"
  ]
}
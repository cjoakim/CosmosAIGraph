{
  "classifiers": [],
  "description": "# tsmoothie\r\n\r\na python library for time-series smoothing and outlier detection in a vectorized way.\r\n\r\n## overview\r\n\r\ntsmoothie computes, in a fast and efficient way, the smoothing of single or multiple time-series. \r\n\r\nthe smoothing techniques available are:\r\n\r\n- exponential smoothing\r\n- convolutional smoothing with various window types (constant, hanning, hamming, bartlett, blackman)\r\n- spectral smoothing with fourier transform\r\n- polynomial smoothing \r\n- spline smoothing of various kind (linear, cubic, natural cubic) \r\n- gaussian smoothing \r\n- binner smoothing \r\n- lowess \r\n- seasonal decompose smoothing of various kind (convolution, lowess, natural cubic spline)\r\n- kalman smoothing with customizable components (level, trend, seasonality, long seasonality) \r\n\r\ntsmoothie provides the calculation of intervals as result of the smoothing process. this can be useful to identify outliers and anomalies in time-series.\r\n\r\nin relation to the smoothing method used, the interval types available are:\r\n\r\n- sigma intervals\r\n- confidence intervals\r\n- predictions intervals\r\n- kalman intervals\r\n\r\ntsmoothie can carry out a sliding smoothing approach to simulate an online usage. this is possible splitting the time-series into equal sized pieces and smoothing them independently. as always, this functionality is implemented in a vectorized way through the **windowwrapper** class.\r\n\r\ntsmoothie can operate time-series bootstrap through the **bootstrappingwrapper** class.\r\n\r\nthe supported bootstrap algorithms are:\r\n\r\n- none overlapping block bootstrap\r\n- moving block bootstrap\r\n- circular block bootstrap\r\n- stationary bootstrap\r\n\r\n## media\r\n\r\nblog posts:\r\n\r\n- [time series smoothing for better clustering](https://towardsdatascience.com/time-series-smoothing-for-better-clustering-121b98f308e8)\r\n- [time series smoothing for better forecasting](https://towardsdatascience.com/time-series-smoothing-for-better-forecasting-7fbf10428b2)\r\n- [real-time time series anomaly detection](https://towardsdatascience.com/real-time-time-series-anomaly-detection-981cf1e1ca13)\r\n- [extreme event time series preprocessing](https://towardsdatascience.com/extreme-event-time-series-preprocessing-90aa59d5630c)\r\n- [time series bootstrap in the age of deep learning](https://towardsdatascience.com/time-series-bootstrap-in-the-age-of-deep-learning-b98aa2aa32c4)\r\n\r\n## installation\r\n\r\n```shell\r\npip install --upgrade tsmoothie\r\n```\r\n\r\nthe module depends only on numpy, scipy and simdkalman. python 3.6 or above is supported.\r\n\r\n## usage: _smoothing_\r\n\r\nbelow a couple of examples of how tsmoothie works. full examples are available in the [notebooks folder](https://github.com/cerlymarco/tsmoothie/tree/master/notebooks).\r\n\r\n```python\r\n# import libraries\r\nimport numpy as np\r\nimport matplotlib.pyplot as plt\r\nfrom tsmoothie.utils_func import sim_randomwalk\r\nfrom tsmoothie.smoother import lowesssmoother\r\n\r\n# generate 3 randomwalks of lenght 200\r\nnp.random.seed(123)\r\ndata = sim_randomwalk(n_series=3, timesteps=200, \r\n                      process_noise=10, measure_noise=30)\r\n\r\n# operate smoothing\r\nsmoother = lowesssmoother(smooth_fraction=0.1, iterations=1)\r\nsmoother.smooth(data)\r\n\r\n# generate intervals\r\nlow, up = smoother.get_intervals('prediction_interval')\r\n\r\n# plot the smoothed timeseries with intervals\r\nplt.figure(figsize=(18,5))\r\n\r\nfor i in range(3):\r\n    \r\n    plt.subplot(1,3,i+1)\r\n    plt.plot(smoother.smooth_data[i], linewidth=3, color='blue')\r\n    plt.plot(smoother.data[i], '.k')\r\n    plt.title(f\"timeseries {i+1}\"); plt.xlabel('time')\r\n\r\n    plt.fill_between(range(len(smoother.data[i])), low[i], up[i], alpha=0.3)\r\n```\r\n\r\n![randomwalk smoothing](https://raw.githubusercontent.com/cerlymarco/tsmoothie/master/imgs/randomwalk_smoothing.png)\r\n\r\n```python\r\n# import libraries\r\nimport numpy as np\r\nimport matplotlib.pyplot as plt\r\nfrom tsmoothie.utils_func import sim_seasonal_data\r\nfrom tsmoothie.smoother import decomposesmoother\r\n\r\n# generate 3 periodic timeseries of lenght 300\r\nnp.random.seed(123)\r\ndata = sim_seasonal_data(n_series=3, timesteps=300, \r\n                         freq=24, measure_noise=30)\r\n\r\n# operate smoothing\r\nsmoother = decomposesmoother(smooth_type='lowess', periods=24,\r\n                             smooth_fraction=0.3)\r\nsmoother.smooth(data)\r\n\r\n# generate intervals\r\nlow, up = smoother.get_intervals('sigma_interval')\r\n\r\n# plot the smoothed timeseries with intervals\r\nplt.figure(figsize=(18,5))\r\n\r\nfor i in range(3):\r\n    \r\n    plt.subplot(1,3,i+1)\r\n    plt.plot(smoother.smooth_data[i], linewidth=3, color='blue')\r\n    plt.plot(smoother.data[i], '.k')\r\n    plt.title(f\"timeseries {i+1}\"); plt.xlabel('time')\r\n\r\n    plt.fill_between(range(len(smoother.data[i])), low[i], up[i], alpha=0.3)\r\n```\r\n\r\n![sinusoidal smoothing](https://raw.githubusercontent.com/cerlymarco/tsmoothie/master/imgs/sinusoidal_smoothing.png)\r\n\r\n**all the available smoothers are fully integrable with sklearn (see [here](https://github.com/cerlymarco/tsmoothie/blob/master/notebooks/sklearn-wrapper.ipynb)).**\r\n\r\n## usage: _bootstrap_\r\n\r\n```python\r\n# import libraries\r\nimport numpy as np\r\nimport matplotlib.pyplot as plt\r\nfrom tsmoothie.utils_func import sim_seasonal_data\r\nfrom tsmoothie.smoother import convolutionsmoother\r\nfrom tsmoothie.bootstrap import bootstrappingwrapper\r\n\r\n# generate a periodic timeseries of lenght 300\r\nnp.random.seed(123)\r\ndata = sim_seasonal_data(n_series=1, timesteps=300, \r\n                         freq=24, measure_noise=15)\r\n\r\n# operate bootstrap\r\nbts = bootstrappingwrapper(convolutionsmoother(window_len=8, window_type='ones'), \r\n                           bootstrap_type='mbb', block_length=24)\r\nbts_samples = bts.sample(data, n_samples=100)\r\n\r\n# plot the bootstrapped timeseries\r\nplt.figure(figsize=(13,5))\r\nplt.plot(bts_samples.t, alpha=0.3, c='orange')\r\nplt.plot(data[0], c='blue', linewidth=2)\r\n```\r\n\r\n![sinusoidal bootstrap](https://raw.githubusercontent.com/cerlymarco/tsmoothie/master/imgs/sinusoidal_bootstrap.png)\r\n\r\n## references\r\n\r\n- polynomial, spline, gaussian and binner smoothing are carried out building a regression on custom basis expansions. these implementations are based on the amazing intuitions of matthew drury available [here](https://github.com/madrury/basis-expansions/blob/master/examples/comparison-of-smoothing-methods.ipynb)\r\n- time series modelling with unobserved components, matteo m. pelagatti\r\n- bootstrap methods in time series analysis, fanny bergstr\u00e3\u00b6m, stockholms universitet\r\n",
  "docs_url": null,
  "keywords": "",
  "license": "mit",
  "name": "tsmoothie",
  "package_url": "https://pypi.org/project/tsmoothie/",
  "project_url": "https://pypi.org/project/tsmoothie/",
  "project_urls": {
    "Homepage": "https://github.com/cerlymarco/tsmoothie"
  },
  "release_url": "https://pypi.org/project/tsmoothie/1.0.5/",
  "requires_dist": [
    "numpy",
    "scipy",
    "simdkalman"
  ],
  "requires_python": ">=3",
  "summary": "a python library for timeseries smoothing and outlier detection in a vectorized way.",
  "version": "1.0.5",
  "releases": [],
  "developers": [
    "cerlymarco@gmail.com",
    "marco_cerliani"
  ],
  "kwds": "smoothing smoothed timeseries sinusoidal_smoothing _smoothing_",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_tsmoothie",
  "homepage": "https://github.com/cerlymarco/tsmoothie",
  "release_count": 15,
  "dependency_ids": [
    "pypi_numpy",
    "pypi_scipy",
    "pypi_simdkalman"
  ]
}
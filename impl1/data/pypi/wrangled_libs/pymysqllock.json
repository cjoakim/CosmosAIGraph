{
  "classifiers": [
    "development status :: 2 - pre-alpha",
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "natural language :: english",
    "programming language :: python :: 3",
    "programming language :: python :: 3.6",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8"
  ],
  "description": "=============\npy-mysql-lock\n=============\n\n------------------------------\nmysql backed locking primitive\n------------------------------\n\n.. image:: https://img.shields.io/pypi/v/pymysqllock.svg\n        :target: https://pypi.python.org/pypi/pymysqllock\n\n.. image:: https://api.travis-ci.com/sanketplus/py-mysql-lock.svg\n        :target: https://travis-ci.com/sanketplus/py-mysql-lock\n\n.. image:: https://codecov.io/github/sanketplus/py-mysql-lock/coverage.svg?branch=master&precision=2\n        :target: https://codecov.io/gh/sanketplus/py-mysql-lock\n        :alt: coverage!\n\n.. image:: https://readthedocs.org/projects/py-mysql-lock/badge/?version=latest\n        :target: https://py-mysql-lock.readthedocs.io/en/latest/?badge=latest\n        :alt: documentation status\n\n\npy-mysql-lock provides locking primitive based on mysql's get_lock\n\n\nuse cases\n---------\n\nthough there are mature locking primitives provided by systems like zookeeper and etcd, when you have an application which is primarily dependent on mysql for its uptime and health, added resiliency provided by systems just mentioned doesn't add much benefit. py-mysql-lock helps when you have multiple application instances which are backed by a common mysql instance and you want only one of those application instances to hold a lock and do certain tasks.\n\n\n    documentation: https://py-mysql-lock.readthedocs.io\n\n\ninstallation\n------------\n\npy-mysql-lock can be installed from pip. alternate installation methods can be found in `installation documentation <https://py-mysql-lock.readthedocs.io/en/latest/installation.html>`_\n::\n\n    pip install pymysqllock\n\n-----\nusage\n-----\n\npy-mysql-lock works with existing python mysql libraries like pymysql, mysql-connector-python amd mysqlclient.\n\ngetting a named lock\n--------------------\n\ngetting a named lock is a three step process. first you will create a ``locker`` instance. argument to locker are the\nsame arguments that you give to your mysql library's ``connect`` method. locker then can be used to create locks. locks\ncan be acquired and released.\n::\n\n    from pymysqllock import locker\n\n    locker = locker(host=\"localhost\", user=\"root\",\n                    password=\"password\", database=\"db\")\n    lock = locker.lock(\"lock_name\")\n\n    lock.acquire()  # returns true if lock is acquired\n\n    # do something\n\n    lock.release()\n\ntimeout for acquisition\n-----------------------\n\ncall to a lock's ``acquire`` method takes an optional ``timeout`` arguments. the value is timeout\nin seconds. default value is -1 which denotes wait for indefinite time.\n::\n\n    # wait for 10 seconds. if lock is not acquired, false is returned\n    lock.acquire(timeout=10)\n\nrefresh interval\n-----------------------\n\nsince the lock is acquired on a mysql connection, it is important for the connection to stay alive. to prevent connection\nfrom breaking due to inactivity, py-mysql-lock keeps pinging on the connection in background. the default ping interval\nis 10 seconds and optionally can be set with ``acquire`` call,\n::\n\n    lock.acquire(timeout=10, refresh_interval_secs=1)\n\nget all locks\n-----------------------\n\nyou can also query the mysql database for getting all current acquired locks on the given db.\n::\n\n    locker.get_all_locks()  # returns list of names (string) of locks acquired on the db\n\n\n\n**credits:** this package was created with cookiecutter_ and the `audreyr/cookiecutter-pypackage`_ project template.\n\n.. _cookiecutter: https://github.com/audreyr/cookiecutter\n.. _`audreyr/cookiecutter-pypackage`: https://github.com/audreyr/cookiecutter-pypackage\n\n\n=======\nhistory\n=======\n\n------------------\n0.2.0 (2020-09-13)\n------------------\n\n* add api to get all acquired locks on given mysql db\n\n------------------\n0.1.0 (2020-09-13)\n------------------\n\n* add background lock connection refresh\n\n------------------\n0.0.1 (2020-09-12)\n------------------\n\n* first release on pypi.\n\n\n",
  "docs_url": null,
  "keywords": "pymysqllock",
  "license": "mit license",
  "name": "pymysqllock",
  "package_url": "https://pypi.org/project/PyMySQLLock/",
  "project_url": "https://pypi.org/project/PyMySQLLock/",
  "project_urls": {
    "Homepage": "https://github.com/sanketplus/PyMySQLLock"
  },
  "release_url": "https://pypi.org/project/PyMySQLLock/0.2.0/",
  "requires_dist": [],
  "requires_python": ">=3.5",
  "summary": "mysql backed locking primitive",
  "version": "0.2.0",
  "releases": [],
  "developers": [
    "sanket_patel",
    "sanketplus@gmail.com"
  ],
  "kwds": "pymysql pymysqllock lock_name get_lock get_all_locks",
  "license_kwds": "mit license",
  "libtype": "pypi",
  "id": "pypi_pymysqllock",
  "homepage": "https://github.com/sanketplus/pymysqllock",
  "release_count": 3,
  "dependency_ids": []
}
{
  "classifiers": [
    "development status :: 4 - beta",
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "natural language :: english",
    "programming language :: python",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: software development :: libraries",
    "topic :: software development :: libraries :: python modules"
  ],
  "description": "birch \u16e3\n#######\n\n|pypi-status| |downloads| |pypi-versions| |build-status| |codecov| |codefactor| |licence|\n\nsimple hierarchical configuration for python packages.\n\n.. |birch_icon| image:: https://github.com/shaypal5/birch/blob/cc5595bbb78f784a3174a07157083f755fc93172/birch.png\n   :height: 87\n   :width: 40 px\n   :scale: 50 %\n\n.. .. image:: https://github.com/shaypal5/birch/blob/b10a19a28cb1fc41d0c596df5bcd8390e7c22ee7/birch.png\n\n.. code-block:: python\n\n  from birch import birch\n  cfg = birch('mypackage')\n  # read using a single api both the mypackage_server_hostname environment variable\n  # and ~/.mypackage/cfg.json containing {'server': {'port': 55}}\n  connect(cfg['server__hostname'], cfg['server']['port'])\n\n.. contents::\n\n.. section-numbering::\n\n\ninstallation\n============\n\n.. code-block:: bash\n\n  pip install birch\n\n\nfeatures\n========\n\n* supported formats: json, yaml.\n* pure python.\n* supports python 3.6+ (3.5 up to version ``v0.0.26``).\n* supported and `fully tested on linux, os x and windows <https://codecov.io/github/shaypal5/birch>`_.\n* `xdg base directory specification <https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html>`_ support.\n\n\nuse\n===\n\nbasic use\n---------\n\n``birch`` provides an easy way to read simple hierarchical configurations for your python package or application from both environment variables and configuration files. \n\n``birch`` uses namespaces to manage configuration values. the access to each namespace is done via a ``birch`` object initialized with that namespace. though written with a specific use case in mind, where a single package uses a single namespace to manage its configuration, any number of namespaces can be used in a single context. for example:\n\n.. code-block:: python\n\n  from birch import birch\n  zubat_cfg = birch('zubat')\n  golbat_cfg = birch('golbat')\n\n\neach namespace encompasses all values set by either environment variables starting with ``<uppercase_namespace>_``, or defined within ``cfg`` files (of a supported format) located in a set of pre-configured directories; this set defaults to the ``~/.config/<namespace>`` (as par the `xdg base directory specification <https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html>`_) and the ``~/.<namespace>`` directories.\n\nfor example, the ``zubat`` namespace encompasses environment variables such as ``zubat_hostname`` and ``zubat__port``, and all mappings in one of the files ``~/.config/.zubat/cfg.json`` or ``~/.zubat/cfg.json`` (if such a file exists).\n\nonce defined in such a way, the ``birch`` object can be used to access the values of mappings of both types (with or without the namespace suffix; casing is also ignored). for example:\n\n.. code-block:: python\n\n  >>> import os\n  >>> os.environ['zubat_server_host'] = 'www.zubat.com'\n  >>> os.environ['zubat_server_port'] = '87'\n  >>> from birch import birch\n  >>> zubat_cfg = birch('zubat')\n  >>> zubat_cfg['zubat_server_host']\n  'www.zubat.com'\n  >>> zubat_cfg['server_port']\n  '87'\n  >>> zubat_cfg['server_port']\n  '87'\n\n\nthe get and mget methods\n------------------------\n\nbirch objects expose two methods that allow more nuanced retreival of configuration items:\n\nthe ``mget`` method allows the caller to supply a ``caster`` callable, through-which any found return value will be passed:\n\n.. code-block:: python\n\n  >>> os.environ['zubat__port'] = '555'\n  >>> zubat_cfg = birch('zubat')\n  >>> zubat_cfg.mget('port', int)\n  555\n\n\nthe ``get`` method additionally allows you to supply a default value, which is returned if no matching configuration entry is found:\n\n.. code-block:: python\n\n  >>> import os; os.environ['zubat__port'] = '555'\n  >>> zubat_cfg = birch('zubat')\n  >>> zubat_cfg.get('port', default=8888, caster=int)\n  555\n  >>> zubat_cfg.get('host', default='defhost')  # default value is returned\n  'defhost'\n  >>> zubat_cfg.get('host')  # no error is thrown, none is returned\n\n\nif no default value is provided, ``none`` is returned. to still have a ``keyerror`` raised in this case use ``throw=true`` in the function call:\n\n.. code-block:: python\n\n  >>> import os; os.environ['zubat__port'] = '555'\n  >>> zubat_cfg = birch('zubat')\n  >>> zubat_cfg.get('host', throw=true)  # an error is thrown\n  traceback (most recent call last):\n    ...\n  keyerror: 'zubat: no configuration value for host.'\n\nto have a warning raised (and the code continue to run) in this case, use ``warn=true`` instead:\n\n.. code-block:: python\n\n  >> import os; os.environ['zubat__port'] = '555'\n  >> zubat_cfg = birch('zubat')\n  >> zubat_cfg.get('host', warn=true)  # a warning is raised\n  none or no value was provided to configuration value host for zubat!\n\n\nhierarchical configuration\n--------------------------\n\n``birch`` supports a simple hierarchy between configuration mappings. hierarchy is either expressed explicitly in configuration files as nested object/entries (in the case of ``json`` and ``yaml`` files), or using ``__`` (two underscore characters) in the configuration key - both in configuration files and environment variables. thus, the ``zubat__server__port`` environment variable is equivalent to both ``{'server': {'port': 55}}`` and ``{'server__port': 55}`` mappings given in a ``~/.zubat/cfg.json`` file, for example. casing is ignored on all levels.\n\nas such, hierarchical mappings can be accessed either using ``__`` to indicate a hierarchical path, or using dict-like item access:\n\n.. code-block:: python\n\n  >>> os.environ['zubat__server__host'] = 'www.zubat.com'\n  >>> from birch import birch\n  >>> zubat_cfg = birch('zubat')\n  >>> zubat_cfg['server__host']\n  'www.zubat.com'\n  >>> zubat_cfg['server']['host']\n  'www.zubat.com'\n  >>> zubat_cfg['server']['host']\n  'www.zubat.com'\n\n\n**note that this is also true for non-hierarchical configuration file mappings**, so ``{'server__port': 55}``, even when given in this form in a configuration file, can be accessed using both ``zubat_cfg['server__port']`` and ``zubat_cfg['server']['port']`` (casing is still ignored on all levels).\n\n\ndefault values\n--------------\n\nyou can easily assign default values to any number of keys or nested keys by providing the ``defaults`` constructor keyword argument with a ``dict`` containing such mappings:\n\n.. code-block:: python\n\n  >>> from birch import birch\n  >>> defaults = {\n  ...     'server': {'host': 'www.boogle.com'},\n  ...     'server__port': 8888,\n  ...      'golbat__server__protocol': 'http',\n  ... }\n  >>> golbat_cfg = birch('golbat', defaults=defaults)\n  >>> golbat_cfg['server__host']\n  'www.boogle.com'\n  >>> golbat_cfg['server']['port']\n  8888\n  >>> golbat_cfg['server']['protocol']\n  'http'\n\nthese values will be overwritten by configuration values loaded from both files and environment variables:\n\n.. code-block:: python\n\n  >>> os.environ['golbat__server__host'] = 'www.zubat.com'\n  >>> golbat_cfg = birch('golbat', defaults=defaults)\n  >>> golbat_cfg['server__host']\n  'www.zubat.com'\n  >>> golbat_cfg['server']['port']\n  8888\n\n\nresolution order\n----------------\n\na namespace is always loaded with matching environment variables **after** the configuration file has been loaded, and corresponding mappings will thus override their file-originating counterparts; e.g. the ``zubat__server__port`` environment variable will overwrite the value of the mapping ``{'server': {'port': 55}}`` given in a ``~/.zubat/cfg.json`` file. \n\nthe lookup order of different files, while deterministic, is undefined and not part of the api. thus, even with the ``load_all`` option set (see the `configuring birch`_ section), ``cfg`` files with different file extensions can not be relied upon to provide private-vs-shared configuration functionality, or other such configuration modes.\n\nfinally, loading of configuration values from both files and environment variables is done **after** the default values provided in the ``defaults`` constructor argument are loaded, so they both override default values.\n\n\nreloading configuration\n-----------------------\n\nconfiguration values can be reloaded from all sources - both configuration files and environment variables - by calling the ``reload`` method:\n\n.. code-block:: python\n\n  >>> os.environ['zubat__server__host'] = 'www.zubat.com'\n  >>> from birch import birch\n  >>> zubat_cfg = birch('zubat')\n  >>> zubat_cfg['server__host']\n  'www.zubat.com'\n  >>> os.environ['zubat__server__host'] = 'new.value!'\n  >>> zubat_cfg.reload()\n  >>> zubat_cfg['server']['host']\n  'new.value!'\n\nyou can set automatic configuration reload on every value inspection by setting ``auto_reload=true`` when initializing the ``birch`` object:\n\n.. code-block:: python\n\n  >>> os.environ['zubat__server__host'] = 'www.zubat.com'\n  >>> from birch import birch\n  >>> zubat_cfg = birch('zubat', auto_reload=true)\n  >>> zubat_cfg['server__host']\n  'www.zubat.com'\n  >>> os.environ['zubat__server__host'] = 'new.value!'\n  >>> zubat_cfg['server']['host']\n  'new.value!'\n\n\nconvenience methods\n-------------------\n\nthe ``xdg_config_dpath()`` and ``xdg_cache_dpath()`` methods are provided to enable easy access to where the xdg-compliant configuration and cache directories for this namespace should reside.\n\nfor example, if the ``xdg_config_home`` variable is set to ``/users/daria/myconfig/`` then ``zubat_cfg.xdg_cfg_dpath()`` will return ``/users/daria/myconfig/zubat/``, while if it is not set, the same method will return ``/users/daria/.config/zubat/``.\n\n\nconfiguring birch\n=================\n\nconfiguration directories\n-------------------------\n\nby default ``birch`` looks for files only in the ``~/.config/<namespace>`` and ``~/.<namespace>`` directories. you can set a different set of directories to read by populating the ``directories`` constructor parameter with a different directory path, or a list of paths.\n\nsimilarly, be default ``birch`` reads into the configuration tree only the first compliant file encountered during a lookup in all pre-configured directories; to instead load hierarchical configurations from all such files instead, the ``load_all`` constructor parameter can be set to ``true``. again, load order is undefined, and thus so is the resulting hierarchical configuration.\n\n\nfile formats\n------------\n\nby default, ``birch`` will only try to read ``cfg.json`` files. to dictate a different set of supported formats, populate the ``supported_formats`` constructor parameter with the desired formats. \n\nfor example, ``birch('zubat', supported_formats=['json', 'yaml'])`` will read both ``cfg.json`` and ``cfg.yaml`` files, while ``birch('golbat', supported_formats='yaml')`` will ony read ``cfg.yaml`` (and ``cfg.yml``) files.\n\ncurrently supported formats are:\n\n* ``json`` - looks for ``cfg.json`` files.\n* ``yaml`` - looks for ``cfg.yaml`` and ``cfg.yml`` files.\n\n\ncontributing\n============\n\npackage author and current maintainer is shay palachy (shay.palachy@gmail.com); you are more than welcome to approach him for help. contributions are very welcomed.\n\ninstalling for development\n----------------------------\n\nclone:\n\n.. code-block:: bash\n\n  git clone git@github.com:shaypal5/birch.git\n\n\ninstall in development mode, including test dependencies:\n\n.. code-block:: bash\n\n  cd birch\n  pip install -e '.[test]'\n\n\nrunning the tests\n-----------------\n\nto run the tests use:\n\n.. code-block:: bash\n\n  cd birch\n  pytest\n\n\nadding documentation\n--------------------\n\nthe project is documented using the `numpy docstring conventions`_, which were chosen as they are perhaps the most widely-spread conventions that are both supported by common tools such as sphinx and result in human-readable docstrings. when documenting code you add to this project, follow `these conventions`_.\n\n.. _`numpy docstring conventions`: https://github.com/numpy/numpy/blob/master/doc/howto_document.rst.txt\n.. _`these conventions`: https://github.com/numpy/numpy/blob/master/doc/howto_document.rst.txt\n\nadditionally, if you update this ``readme.rst`` file,  use ``python setup.py checkdocs`` to validate it compiles.\n\n\ncredits\n=======\n\ncreated by `shay palachy <http://www.shaypalachy.com/>`_ (shay.palachy@gmail.com).\n\n\n.. |pypi-status| image:: https://img.shields.io/pypi/v/birch.svg\n  :target: https://pypi.python.org/pypi/birch\n\n.. |pypi-versions| image:: https://img.shields.io/pypi/pyversions/birch.svg\n   :target: https://pypi.python.org/pypi/birch\n\n.. |build-status| image:: https://travis-ci.org/shaypal5/birch.svg?branch=master\n   :target: https://travis-ci.org/shaypal5/birch\n\n.. |licence| image:: https://img.shields.io/badge/license-mit-yellow.svg\n   :target: https://github.com/shaypal5/birch/blob/master/license\n\n.. |codecov| image:: https://codecov.io/github/shaypal5/birch/coverage.svg?branch=master\n   :target: https://codecov.io/github/shaypal5/birch?branch=master\n\n.. |codacy| image:: https://api.codacy.com/project/badge/grade/99e79faee7454a13a0e60219c32015ae\n   :alt: codacy badge\n   :target: https://app.codacy.com/app/shaypal5/birch?utm_source=github.com&utm_medium=referral&utm_content=shaypal5/birch&utm_campaign=badge_grade_dashboard\n\n.. |requirements| image:: https://requires.io/github/shaypal5/birch/requirements.svg?branch=master\n   :target: https://requires.io/github/shaypal5/birch/requirements/?branch=master\n   :alt: requirements status\n\n.. |codefactor| image:: https://www.codefactor.io/repository/github/shaypal5/birch/badge?style=plastic\n   :target: https://www.codefactor.io/repository/github/shaypal5/birch\n   :alt: codefactor code quality\n\n.. |downloads| image:: https://pepy.tech/badge/birch\n   :target: https://pepy.tech/project/birch\n   :alt: pepy stats\n\n.. .. test pypi\n\n\n",
  "docs_url": null,
  "keywords": "",
  "license": "mit",
  "name": "birch",
  "package_url": "https://pypi.org/project/birch/",
  "project_url": "https://pypi.org/project/birch/",
  "project_urls": {
    "Homepage": "https://github.com/shaypal5/birch"
  },
  "release_url": "https://pypi.org/project/birch/0.0.35/",
  "requires_dist": [
    "strct (>=0.0.26)",
    "pytest ; extra == 'test'",
    "coverage ; extra == 'test'",
    "pytest-cov ; extra == 'test'",
    "pyyaml ; extra == 'test'",
    "collective.checkdocs ; extra == 'test'",
    "pygments ; extra == 'test'",
    "strct (>=0.0.26) ; extra == 'test'"
  ],
  "requires_python": ">=3.6",
  "summary": "simple hierarchical configuration for python packages",
  "version": "0.0.35",
  "releases": [],
  "developers": [
    "shay.palachy@gmail.com",
    "shay_palachy"
  ],
  "kwds": "birch_icon birch python mypackage_server_hostname pyversions",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_birch",
  "homepage": "https://github.com/shaypal5/birch",
  "release_count": 32,
  "dependency_ids": [
    "pypi_collective.checkdocs",
    "pypi_coverage",
    "pypi_pygments",
    "pypi_pytest",
    "pypi_pytest_cov",
    "pypi_pyyaml",
    "pypi_strct"
  ]
}
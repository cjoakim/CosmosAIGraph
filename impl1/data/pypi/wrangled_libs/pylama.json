{
  "classifiers": [
    "development status :: 5 - production/stable",
    "environment :: console",
    "intended audience :: developers",
    "intended audience :: system administrators",
    "license :: osi approved :: mit license",
    "programming language :: python",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: software development :: quality assurance",
    "topic :: software development :: testing"
  ],
  "description": "|logo| pylama\n#############\n\n.. _badges:\n\n.. image:: https://github.com/klen/pylama/workflows/tests/badge.svg\n    :target: https://github.com/klen/pylama/actions/workflows/tests.yml\n    :alt: tests status\n\n.. image:: https://github.com/klen/pylama/workflows/docs/badge.svg\n    :target: https://klen.github.io/pylama\n    :alt: documentation status\n\n.. image:: https://img.shields.io/pypi/v/pylama\n    :target: https://pypi.org/project/pylama/\n    :alt: pypi version\n\n.. image:: https://img.shields.io/pypi/pyversions/pylama\n    :target: https://pypi.org/project/pylama/\n    :alt: python versions\n\n.. _description:\n\ncode audit tool for python. pylama wraps these tools:\n\n* pycodestyle_ (formerly pep8) \u00a9 2012-2013, florent xicluna;\n* pydocstyle_ (formerly pep257 by vladimir keleshev) \u00a9 2014, amir rachum;\n* pyflakes_ \u00a9 2005-2013, kevin watters;\n* mccabe_ \u00a9 ned batchelder;\n* pylint_ \u00a9 2013, logilab;\n* radon_ \u00a9 michele lacchia\n* eradicate_ \u00a9 steven myint;\n* mypy_ \u00a9 jukka lehtosalo and contributors;\n* vulture_ \u00a9 jendrik seipp and contributors;\n\n\n.. _documentation:\n\ndocs are available at https://klen.github.io/pylama/. pull requests with\ndocumentation enhancements and/or fixes are awesome and most welcome.\n\n\n.. _contents:\n\n.. contents::\n\n.. _requirements:\n\nrequirements:\n=============\n\n- python (3.7, 3.8, 3.9, 3.10)\n- if your tests are failing on win platform you are missing: ``curses`` -\n  http://www.lfd.uci.edu/~gohlke/pythonlibs/ (the curses library supplies a\n  terminal-independent screen-painting and keyboard-handling facility for\n  text-based terminals)\n\nfor python versions < 3.7 install pylama 7.7.1\n\n\n.. _installation:\n\ninstallation:\n=============\n**pylama** can be installed using pip: ::\n\n    $ pip install pylama\n\ntoml configuration can be enabled optionally: ::\n\n    $ pip install pylama[toml]\n\nyou may optionally install the requirements with the library: ::\n\n    $ pip install pylama[mypy]\n    $ pip install pylama[pylint]\n    $ pip install pylama[eradicate]\n    $ pip install pylama[radon]\n    $ pip install pylama[vulture]\n\nor install them all: ::\n\n    $ pip install pylama[all]\n\n\n.. _quickstart:\n\nquickstart\n==========\n\n**pylama** is easy to use and really fun for checking code quality.  just run\n`pylama` and get common output from all pylama plugins (pycodestyle_,\npyflakes_, etc.)\n\nrecursively check the current directory. ::\n\n    $ pylama\n\nrecursively check a path. ::\n\n    $ pylama <path_to_directory_or_file>\n\nignore errors ::\n\n    $ pylama -i w,e501\n\n.. note:: you can choose a group of errors like `d`, `e1`, etc, or special errors like `c0312`\n\nchoose code checkers ::\n\n    $ pylama -l \"pycodestyle,mccabe\"\n\n\n.. _options:\n\nset pylama (checkers) options\n=============================\n\ncommand line options\n--------------------\n\n::\n\n    $ pylama --help\n\n    usage: pylama [-h] [--version] [--verbose] [--options file] [--linters linters] [--from-stdin] [--concurrent] [--format {pydocstyle,pycodestyle,pylint,parsable,json}] [--abspath]\n                  [--max-line-length max_line_length] [--select select] [--ignore ignore] [--skip skip] [--sort sort] [--report report] [--hook] [--max-complexity max_complexity]\n                  [--pydocstyle-convention {pep257,numpy,google}] [--pylint-confidence {high,inference,inference_failure,undefined}]\n                  [paths ...]\n\n    code audit tool for python.\n\n    positional arguments:\n      paths                 paths to files or directories for code check.\n\n    optional arguments:\n      -h, --help            show this help message and exit\n      --version             show program's version number and exit\n      --verbose, -v         verbose mode.\n      --options file, -o file\n                            specify configuration file. looks for pylama.ini, setup.cfg, tox.ini, or pytest.ini in the current directory (default: none)\n      --linters linters, -l linters\n                            select linters. (comma-separated). choices are eradicate,mccabe,mypy,pycodestyle,pydocstyle,pyflakes,pylint,isort.\n      --from-stdin          interpret the stdin as a python script, whose filename needs to be passed as the path argument.\n      --concurrent, --async\n                            enable async mode. useful for checking a lot of files.\n      --format {pydocstyle,pycodestyle,pylint,parsable,json}, -f {pydocstyle,pycodestyle,pylint,parsable,json}\n                            choose output format.\n      --abspath, -a         use absolute paths in output.\n      --max-line-length max_line_length, -m max_line_length\n                            maximum allowed line length\n      --select select, -s select\n                            select errors and warnings. (comma-separated list)\n      --ignore ignore, -i ignore\n                            ignore errors and warnings. (comma-separated)\n      --skip skip           skip files by masks (comma-separated, ex. */messages.py)\n      --sort sort           sort result by error types. ex. e,w,d\n      --report report, -r report\n                            send report to file [report]\n      --hook                install git (mercurial) hook.\n      --max-complexity max_complexity\n                            max complexity threshold\n\n.. note:: additional options may be available depending on installed linters\n\n.. _modeline:\n\nfile modelines\n--------------\n\nyou can set options for **pylama** inside a source file. use\na pylama *modeline* for this, anywhere in the file.\n\nformat: ::\n\n    # pylama:{name1}={value1}:{name2}={value2}:...\n\n\nfor example, ignore warnings except w301: ::\n\n     # pylama:ignore=w:select=w301\n\n\ndisable code checking for current file: ::\n\n     # pylama:skip=1\n\nthose options have a higher priority.\n\n.. _skiplines:\n\nskip lines (noqa)\n-----------------\n\njust add ``# noqa`` at the end of a line to ignore:\n\n::\n\n    def urgent_fuction():\n        unused_var = 'no errors here' # noqa\n\n\n.. _config:\n\nconfiguration file\n==================\n\n**pylama** looks for a configuration file in the current directory.\n\nyou can use a \u201cglobal\u201d configuration, stored in `.pylama.ini` in your home\ndirectory. this will be used as a fallback configuration.\n\nthe program searches for the first matching configuration file in the\ndirectories of command line argument. pylama looks for the configuration in\nthis order: ::\n\n    ./pylama.ini\n    ./pyproject.toml\n    ./setup.cfg\n    ./tox.ini\n    ./pytest.ini\n    ~/.pylama.ini\n\nthe ``--option`` / ``-o`` argument can be used to specify a configuration file.\n\nini-style configuration\n-----------------------\n\npylama searches for sections whose names start with `pylama`.\n\nthe `pylama` section configures global options like `linters` and `skip`.\n\n::\n\n    [pylama]\n    format = pylint\n    skip = */.tox/*,*/.env/*\n    linters = pylint,mccabe\n    ignore = f0401,c0111,e731\n\nset code-checkers' options\n^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nyou can set options for a special code checkers with pylama configurations.\n\n::\n\n    [pylama:pyflakes]\n    builtins = _\n\n    [pylama:pycodestyle]\n    max_line_length = 100\n\n    [pylama:pylint]\n    max_line_length = 100\n    disable = r\n\nsee code-checkers' documentation for more info. note that dashes are\nreplaced by underscores (e.g. pylint's ``max-line-length`` becomes\n``max_line_length``).\n\n\nset options for file (group of files)\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nyou can set options for special file (group of files)\nwith sections:\n\nthe options have a higher priority than in the `pylama` section.\n\n::\n\n    [pylama:*/pylama/main.py]\n    ignore = c901,r0914,w0212\n    select = r\n\n    [pylama:*/tests.py]\n    ignore = c0110\n\n    [pylama:*/setup.py]\n    skip = 1\n\ntoml configuration\n-----------------------\n\npylama searches for sections whose names start with `tool.pylama`.\n\nthe `tool.pylama` section configures global options like `linters` and `skip`.\n\n::\n\n    [tool.pylama]\n    format = \"pylint\"\n    skip = \"*/.tox/*,*/.env/*\"\n    linters = \"pylint,mccabe\"\n    ignore = \"f0401,c0111,e731\"\n\nset code-checkers' options\n^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nyou can set options for a special code checkers with pylama configurations.\n\n::\n\n    [tool.pylama.linter.pyflakes]\n    builtins = \"_\"\n\n    [tool.pylama.linter.pycodestyle]\n    max_line_length = 100\n\n    [tool.pylama.linter.pylint]\n    max_line_length = 100\n    disable = \"r\"\n\nsee code-checkers' documentation for more info. note that dashes are\nreplaced by underscores (e.g. pylint's ``max-line-length`` becomes\n``max_line_length``).\n\n\nset options for file (group of files)\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nyou can set options for special file (group of files)\nwith sections:\n\nthe options have a higher priority than in the `tool.pylama` section.\n\n::\n\n    [[tool.pylama.files]]\n    path = \"*/pylama/main.py\"\n    ignore = \"c901,r0914,w0212\"\n    select = \"r\"\n\n    [[tool.pylama.files]]\n    path = \"pylama:*/tests.py\"\n    ignore = \"c0110\"\n\n    [[tool.pylama.files]]\n    path = \"pylama:*/setup.py\"\n    skip = 1\n\n\npytest integration\n==================\n\npylama has pytest_ support. the package automatically registers itself as a pytest\nplugin during installation. pylama also supports the `pytest_cache` plugin.\n\ncheck files with pylama ::\n\n    pytest --pylama ...\n\nthe recommended way to set pylama options when using pytest \u2014 configuration\nfiles (see below).\n\n\nwriting a linter\n================\n\nyou can write a custom extension for pylama.\nthe custom linter should be a python module. its name should be like 'pylama_<name>'.\n\nin 'setup.py', 'pylama.linter' entry point should be defined. ::\n\n    setup(\n        # ...\n        entry_points={\n            'pylama.linter': ['lintername = pylama_lintername.main:linter'],\n        }\n        # ...\n    )\n\n'linter' should be an instance of 'pylama.lint.linter' class.\nit must implement two methods:\n\n1. ``allow`` takes a `path` argument and returns true if the linter can check this file for errors.\n2. ``run`` takes a `path` argument and `meta` keyword arguments and returns a list of errors.\n\nexample:\n--------\n\njust a virtual 'wow' checker.\n\nsetup.py: ::\n\n    setup(\n        name='pylama_wow',\n        install_requires=[ 'setuptools' ],\n        entry_points={\n            'pylama.linter': ['wow = pylama_wow.main:linter'],\n        }\n        # ...\n    )\n\npylama_wow.py: ::\n\n    from pylama.lint import linter as baselinter\n\n    class linter(baselinter):\n\n        def allow(self, path):\n            return 'wow' in path\n\n        def run(self, path, **meta):\n            with open(path) as f:\n                if 'wow' in f.read():\n                    return [{\n                        lnum: 0,\n                        col: 0,\n                        text: '\"wow\" has been found.',\n                        type: 'wow'\n                    }]\n\n\nrun pylama from python code\n---------------------------\n::\n\n    from pylama.main import check_paths, parse_options\n\n    # use and/or modify 0 or more of the options defined as keys in the variable my_redefined_options below.\n    # to use defaults for any option, remove that key completely.\n    my_redefined_options = {\n        'linters': ['pep257', 'pydocstyle', 'pycodestyle', 'pyflakes' ...],\n        'ignore': ['d203', 'd213', 'd406', 'd407', 'd413' ...],\n        'select': ['r1705' ...],\n        'sort': 'f,e,w,c,d,...',\n        'skip': '*__init__.py,*/test/*.py,...',\n        'async': true,\n        'force': true\n        ...\n    }\n    # relative path of the directory in which pylama should check\n    my_path = '...'\n\n    options = parse_options([my_path], **my_redefined_options)\n    errors = check_paths(my_path, options, rootdir='.')\n\n\n.. _bagtracker:\n\nbug tracker\n-----------\n\nif you have any suggestions, bug reports or annoyances please report them to the issue tracker at https://github.com/klen/pylama/issues\n\n\n.. _contributing:\n\ncontributing\n------------\n\ndevelopment of `pylama` happens at github: https://github.com/klen/pylama\n\ncontributors\n^^^^^^^^^^^^\n\nsee contributors_.\n\n\n.. _license:\n\nlicense\n-------\n\nthis is free software. you are permitted to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of it, under the terms of the mit\nlicense. see license file for the complete license.\n\nthis software is provided without any warranty; without even the implied\nwarranty of merchantability or fitness for a particular purpose. see\nlicense file for the complete disclaimer.\n\n\n.. _links:\n\n.. _contributors: https://github.com/klen/pylama/graphs/contributors\n.. _mccabe: http://nedbatchelder.com/blog/200803/python_code_complexity_microtool.html\n.. _pydocstyle: https://github.com/pycqa/pydocstyle/\n.. _pycodestyle: https://github.com/pycqa/pycodestyle\n.. _pyflakes: https://github.com/pyflakes/pyflakes\n.. _pylint: http://pylint.org\n.. _pytest: http://pytest.org\n.. _klen: http://klen.github.io/\n.. _eradicate: https://github.com/myint/eradicate\n.. _mypy: https://github.com/python/mypy\n.. _vulture: https://github.com/jendrikseipp/vulture\n\n.. |logo| image:: https://raw.github.com/klen/pylama/develop/docs/_static/logo.png\n                  :width: 100\n.. _radon: https://github.com/rubik/radon\n\n\n\n",
  "docs_url": "https://pythonhosted.org/pylama/",
  "keywords": "qa,linter,pydocstyle,pycodestyle,mccabe,pylint",
  "license": "mit",
  "name": "pylama",
  "package_url": "https://pypi.org/project/pylama/",
  "project_url": "https://pypi.org/project/pylama/",
  "project_urls": {
    "Documentation": "https://klen.github.io/pylama",
    "Homepage": "https://github.com/klen/pylama",
    "Issue tracker": "https://github.com/klen/pylama/issues",
    "Source code": "https://github.com/klen/pylama"
  },
  "release_url": "https://pypi.org/project/pylama/8.4.1/",
  "requires_dist": [
    "mccabe (>=0.7.0)",
    "pycodestyle (>=2.9.1)",
    "pydocstyle (>=6.1.1)",
    "pyflakes (>=2.5.0)",
    "pylint ; extra == 'all'",
    "eradicate ; extra == 'all'",
    "radon ; extra == 'all'",
    "mypy ; extra == 'all'",
    "vulture ; extra == 'all'",
    "eradicate ; extra == 'eradicate'",
    "mypy ; extra == 'mypy'",
    "pylint ; extra == 'pylint'",
    "radon ; extra == 'radon'",
    "pytest (>=7.1.2) ; extra == 'tests'",
    "pytest-mypy ; extra == 'tests'",
    "eradicate (>=2.0.0) ; extra == 'tests'",
    "radon (>=5.1.0) ; extra == 'tests'",
    "mypy ; extra == 'tests'",
    "pylint (>=2.11.1) ; extra == 'tests'",
    "pylama-quotes ; extra == 'tests'",
    "toml ; extra == 'tests'",
    "vulture ; extra == 'tests'",
    "types-setuptools ; extra == 'tests'",
    "types-toml ; extra == 'tests'",
    "toml (>=0.10.2) ; extra == 'toml'",
    "vulture ; extra == 'vulture'"
  ],
  "requires_python": ">=3.7",
  "summary": "code audit tool for python",
  "version": "8.4.1",
  "releases": [],
  "developers": [
    "horneds@gmail.com",
    "kirill_klenov"
  ],
  "kwds": "_pycodestyle pycodestyle_ pycodestyle pylama_lintername pylama",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_pylama",
  "homepage": "https://github.com/klen/pylama",
  "release_count": 116,
  "dependency_ids": [
    "pypi_eradicate",
    "pypi_mccabe",
    "pypi_mypy",
    "pypi_pycodestyle",
    "pypi_pydocstyle",
    "pypi_pyflakes",
    "pypi_pylama_quotes",
    "pypi_pylint",
    "pypi_pytest",
    "pypi_pytest_mypy",
    "pypi_radon",
    "pypi_toml",
    "pypi_types_setuptools",
    "pypi_types_toml",
    "pypi_vulture"
  ]
}
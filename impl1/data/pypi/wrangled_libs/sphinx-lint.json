{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: developers",
    "license :: osi approved :: python software foundation license",
    "natural language :: english",
    "programming language :: python :: 3 :: only",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.12",
    "programming language :: python :: 3.13",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: documentation :: sphinx"
  ],
  "description": "# sphinx lint\n\n[![pypi](https://img.shields.io/pypi/v/sphinx-lint)\n ![monthly downloads](https://img.shields.io/pypi/dm/sphinx-lint)\n ![supported python version](https://img.shields.io/pypi/pyversions/sphinx-lint.svg)\n](https://pypi.org/project/sphinx-lint)\n[![github workflow status](https://img.shields.io/github/actions/workflow/status/sphinx-contrib/sphinx-lint/tests.yml?branch=main)](https://github.com/sphinx-contrib/sphinx-lint/actions)\n\nsphinx lint is based on [rstlint.py from\ncpython](https://github.com/python/cpython/blob/e0433c1e7/doc/tools/rstlint.py).\n\n\n## what is sphinx lint, what is it not?\n\nsphinx lint should:\n\n- be reasonably fast so it's comfortable to use as a linter in your editor.\n- be usable on a single file.\n- not give any false positives (probably a utopia, but let's try).\n- not spend too much effort finding errors that sphinx-build already finds (or can easily find).\n- focus on finding errors that are **not** visible to sphinx-build.\n\n\n## using sphinx lint\n\nhere are some example invocations of sphinx lint from the command line:\n\n```sh\nsphinx-lint           # check all dirs and files\nsphinx-lint file.rst  # check a single file\nsphinx-lint docs      # check a directory\nsphinx-lint -i venv   # ignore a file/directory\nsphinx-lint -h        # for more options\n```\n\nsphinx lint can also be used via [pre-commit](https://pre-commit.com).\nwe recommend using a configuration like this:\n\n```yaml\n  - repo: https://github.com/sphinx-contrib/sphinx-lint\n    rev: latest_sphinxlint_release_tag\n    hooks:\n      - id: sphinx-lint\n```\n\n\n## known issues\n\ncurrently sphinx lint can't work with tables, there's no understanding\nof how `linesplit` works in tables, like:\n\n```rst\n   +-----------------------------------------+-----------------------------+---------------+\n   | method                                  | checks that                 | new in        |\n   +=========================================+=============================+===============+\n   | :meth:`assertequal(a, b)                | ``a == b``                  |               |\n   | <testcase.assertequal>`                 |                             |               |\n   +-----------------------------------------+-----------------------------+---------------+\n```\n\nas sphinx lint works line by line it will inevitably think the `:meth:` role is not closed properly.\n\nto avoid false positives, some rules are skipped if we're in a table.\n\n\n## contributing\n\na quick way to test if some syntax is valid from a pure\nrestructuredtext point of view, one case use `docutils`'s `pseudoxml`\nwriter, like:\n\n```text\n$ docutils --writer=pseudoxml tests/fixtures/xpass/role-in-code-sample.rst\n<document source=\"tests/fixtures/xpass/role-in-code-sample.rst\">\n    <paragraph>\n        found in the pandas documentation, this is valid:\n    <bullet_list bullet=\"*\">\n        <list_item>\n            <paragraph>\n                a pandas class (in the form\n                <literal>\n                    :class:`pandas.series`\n                )\n        <list_item>\n            <paragraph>\n                a pandas method (in the form\n                <literal>\n                    :meth:`pandas.series.sum`\n                )\n        <list_item>\n            <paragraph>\n                a pandas function (in the form\n                <literal>\n                    :func:`pandas.to_datetime`\n                )\n    <paragraph>\n        it's documenting roles using code samples (double backticks).\n```\n\n\n## releasing\n\n1. make sure that the [ci tests pass](https://github.com/sphinx-contrib/sphinx-lint/actions)\n   and optionally double-check locally with \"friends projects\" by running:\n\n       sh download-more-tests.sh\n       python -m pytest\n2. go on the [releases page](https://github.com/sphinx-contrib/sphinx-lint/releases)\n3. click \"draft a new release\"\n4. click \"choose a tag\"\n5. type the next vx.y.z version and select \"create new tag: vx.y.z on publish\"\n6. leave the \"release title\" blank (it will be autofilled)\n7. click \"generate release notes\" and amend as required\n8. click \"publish release\"\n9. check the tagged\n   [github actions build](https://github.com/sphinx-contrib/sphinx-lint/actions/workflows/deploy.yml)\n   has [deployed to pypi](https://pypi.org/project/sphinx-lint/#history)\n\n\n## license\n\nas this script was in the cpython repository the license is the python\nsoftware foundation licence version 2, see the license file for a full\nversion.\n",
  "docs_url": null,
  "keywords": "",
  "license": "psf license",
  "name": "sphinx-lint",
  "package_url": "https://pypi.org/project/sphinx-lint/",
  "project_url": "https://pypi.org/project/sphinx-lint/",
  "project_urls": {
    "Changelog": "https://github.com/sphinx-contrib/sphinx-lint/releases",
    "Repository": "https://github.com/sphinx-contrib/sphinx-lint"
  },
  "release_url": "https://pypi.org/project/sphinx-lint/0.9.1/",
  "requires_dist": [
    "polib",
    "regex",
    "pytest; extra == 'tests'",
    "pytest-cov; extra == 'tests'"
  ],
  "requires_python": ">=3.8",
  "summary": "check for stylistic and formal issues in .rst and .py files included in the documentation.",
  "version": "0.9.1",
  "releases": [],
  "developers": [
    "georg@python.org",
    "julien@palard.fr"
  ],
  "kwds": "sphinx latest_sphinxlint_release_tag rstlint documentation cpython",
  "license_kwds": "psf license",
  "libtype": "pypi",
  "id": "pypi_sphinx_lint",
  "homepage": "",
  "release_count": 21,
  "dependency_ids": [
    "pypi_polib",
    "pypi_pytest",
    "pypi_pytest_cov",
    "pypi_regex"
  ]
}
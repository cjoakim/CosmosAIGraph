{
  "classifiers": [
    "license :: osi approved :: mit license",
    "programming language :: python :: 2",
    "programming language :: python :: 2.7",
    "programming language :: python :: 3",
    "programming language :: python :: 3.4",
    "programming language :: python :: 3.5",
    "programming language :: python :: 3.6",
    "programming language :: python :: 3.7",
    "programming language :: python :: implementation :: cpython",
    "programming language :: python :: implementation :: pypy"
  ],
  "description": "[![build status](https://asottile.visualstudio.com/asottile/_apis/build/status/asottile.future-fstrings?branchname=master)](https://asottile.visualstudio.com/asottile/_build/latest?definitionid=15&branchname=master)\n[![azure devops coverage](https://img.shields.io/azure-devops/coverage/asottile/asottile/15/master.svg)](https://dev.azure.com/asottile/asottile/_build/latest?definitionid=15&branchname=master)\n\nfuture-fstrings\n===============\n\na backport of fstrings to python<3.6.\n\n\n## installation\n\n`pip install future-fstrings`\n\n\n## usage\n\ninclude the following encoding cookie at the top of your file (this replaces\nthe utf-8 cookie if you already have it):\n\n```python\n# -*- coding: future_fstrings -*-\n```\n\nand then write python3.6 fstring code as usual!\n\n```python\n# -*- coding: future_fstrings -*-\nthing = 'world'\nprint(f'hello {thing}')\n```\n\n```console\n$ python2.7 main.py\nhello world\n```\n\n## showing transformed source\n\n`future-fstrings` also includes a cli to show transformed source.\n\n```console\n$ future-fstrings-show main.py\n# -*- coding: future_fstrings -*-\nthing = 'world'\nprint('hello {}'.format((thing)))\n```\n\n## transform source for micropython\n\nthe `future-fstrings-show` command can be used to transform source before\ndistributing.  this can allow you to write f-string code but target platforms\nwhich do not support f-strings, such as [micropython].\n\nto use this on modern versions of python, install using:\n\n```bash\npip install future-fstrings[rewrite]\n```\n\nand then use `future-fstrings-show` as above.\n\nfor instance:\n\n```bash\nfuture-fstrings-show code.py > code_rewritten.py\n```\n\n[micropython]: https://github.com/micropython/micropython\n\n## how does this work?\n\n`future-fstrings` has two parts:\n\n1. a utf-8 compatible `codec` which performs source manipulation\n    - the `codec` first decodes the source bytes using the utf-8 codec\n    - the `codec` then leverages\n      [tokenize-rt](https://github.com/asottile/tokenize-rt) to rewrite\n      f-strings.\n2. a `.pth` file which registers a codec on interpreter startup.\n\n## you may also like\n\n- [future-breakpoint](https://github.com/asottile/future-breakpoint)\n\n\n",
  "docs_url": null,
  "keywords": "",
  "license": "mit",
  "name": "future-fstrings",
  "package_url": "https://pypi.org/project/future-fstrings/",
  "project_url": "https://pypi.org/project/future-fstrings/",
  "project_urls": {
    "Homepage": "https://github.com/asottile/future-fstrings"
  },
  "release_url": "https://pypi.org/project/future-fstrings/1.2.0/",
  "requires_dist": [
    "tokenize-rt (>=3) ; python_version < \"3.6\"",
    "tokenize-rt (>=3) ; extra == 'rewrite'"
  ],
  "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*",
  "summary": "a backport of fstrings to python<3.6",
  "version": "1.2.0",
  "releases": [],
  "developers": [
    "anthony_sottile",
    "asottile@umich.edu"
  ],
  "kwds": "future_fstrings azure pip asottile visualstudio",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_future_fstrings",
  "homepage": "https://github.com/asottile/future-fstrings",
  "release_count": 14,
  "dependency_ids": [
    "pypi_tokenize_rt"
  ]
}
{
  "classifiers": [
    "development status :: 4 - beta",
    "intended audience :: developers",
    "intended audience :: science/research",
    "license :: osi approved :: apache software license",
    "operating system :: macos :: macos x",
    "operating system :: microsoft :: windows",
    "operating system :: posix :: linux",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.6",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: scientific/engineering :: artificial intelligence",
    "topic :: scientific/engineering :: image processing",
    "topic :: scientific/engineering :: image recognition",
    "topic :: scientific/engineering :: information analysis",
    "topic :: scientific/engineering :: visualization"
  ],
  "description": "<div align=\"center\">\n\n<h1>\n    eta: extensible toolkit for analytics\n</h1>\n\n**an open and extensible computer vision, machine learning and video analytics\ninfrastructure.**\n\n[![pypi python](https://img.shields.io/pypi/pyversions/voxel51-eta)](https://pypi.org/project/voxel51-eta)\n[![pypi version](https://badge.fury.io/py/voxel51-eta.svg)](https://pypi.org/project/voxel51-eta)\n[![pre-commit](https://img.shields.io/badge/pre--commit-enabled-brightgreen?logo=pre-commit&logocolor=white)](https://github.com/pre-commit/pre-commit)\n[![license](https://img.shields.io/badge/license-apache%202.0-blue.svg)](license)\n[![twitter](https://img.shields.io/twitter/follow/voxel51?style=social)](https://twitter.com/voxel51)\n\n<img src=\"https://user-images.githubusercontent.com/25985824/78944107-2d766c80-7a8b-11ea-8863-fcb4897eecb5.png\" alt=\"eta-infrastructure.png\" width=\"75%\"/>\n\n</div>\n\n## requirements\n\neta is very portable:\n\n-   installable on mac or linux\n-   supports python 3.6 or later\n-   supports tensorflow 1.x and 2.x\n-   supports opencv 2.4+ and opencv 3.0+\n-   supports cpu-only and gpu-enabled installations\n-   supports cuda 8, 9 and 10 for gpu installations\n\n## installation\n\nyou can install the latest release of eta via `pip`:\n\n```shell\npip install voxel51-eta\n```\n\nthis will perform a [lite installation of eta](#lite-installation). if you use\nan eta feature that requires additional dependencies (e.g., `ffmpeg` or\n`tensorflow`), you will be prompted to install the relevant packages.\n\n## docker installation\n\nif you prefer to operate via docker, see the\n[docker build guide](https://github.com/voxel51/eta/blob/develop/docs/docker_build_guide.md)\nfor simple instructions for building a docker image with an eta environment\ninstalled.\n\n## installation from source\n\n#### step 0: setup your python environment\n\nit is assumed that you already have\n[python installed](https://www.python.org/downloads) on your machine.\n\n> **important:** eta assumes that the version of python that you intend to use\n> is accessible via `python` and `pip` on your path. in particular, for python\n> 3 users, this means that you may need to alias `python3` and `pip3` to\n> `python` and `pip`, respectively.\n\nwe strongly recommend that you install eta\n[in a virtual environment](https://github.com/voxel51/eta/blob/develop/docs/virtualenv_guide.md)\nto maintain a clean workspace.\n\n#### step 1: clone the repository\n\n```shell\ngit clone https://github.com/voxel51/eta\ncd eta\n```\n\n#### step 2: run the install script\n\n```shell\nbash install.bash\n```\n\nnote that the install script supports flags that control things like (on macos)\nwhether `port` or `brew` is used to install packages. run\n`bash install.bash -h` for more information.\n\nfor linux installs, the script inspects your system to see if cuda is installed\nvia the `lspci` command. if cuda is available, tensorflow is installed with gpu\nsupport.\n\nthe table below lists the version of tensorflow that will be installed by the\ninstaller, as recommended by the\n[tested build configurations](https://www.tensorflow.org/install/source#tested_build_configurations):\n\n| cuda version found | tensorflow version installed |\n| ------------------ | ---------------------------- |\n| cuda 8             | `tensorflow-gpu~=1.4`        |\n| cuda 9             | `tensorflow-gpu~=1.12`       |\n| cuda 10            | `tensorflow-gpu~=1.15`       |\n| other cuda         | `tensorflow-gpu~=1.15`       |\n| no cuda            | `tensorflow~=1.15`           |\n\n> note that eta also supports tensorflow 2.x. the only problems you may face\n> when using eta with tensorflow 2 are when trying to run inference with\n> [eta models](https://github.com/voxel51/eta/blob/develop/eta/models/manifest.json)\n> that only support tensorflow 1. a notable case here are tf-slim models. in\n> such cases, you should see an informative error message alerting you of the\n> requirement mismatch.\n\n### lite installation\n\nsome eta users are only interested in using the core eta library defined in the\n`eta.core` package. in such cases, you can perform a lite installation using\nthe `-l` flag of the install script:\n\n```shell\nbash install.bash -l\n```\n\nlite installation omits submodules and other large dependencies that are not\nrequired in order for the core library to function. if you use an eta feature\nthat requires additional dependencies (e.g., `ffmpeg` or `tensorflow`), you\nwill be prompted to install the relevant packages.\n\n### developer installation\n\nif you are interested in contributing to eta or generating its documentation\nfrom source, you should perform a developer installation using the `-d` flag of\nthe install script:\n\n```shell\nbash install.bash -d\n```\n\n## setting up your execution environment\n\nwhen the root `eta` package is imported, it tries to read the `eta/config.json`\nfile to configure various package-level constants. many advanced eta features\nsuch as pipeline building, model management, etc. require a properly configured\nenvironment to function.\n\nto setup your environment, create a copy the example configuration file:\n\n```shell\ncp config-example.json eta/config.json\n```\n\nif desired, you can edit your config file to customize the various paths,\nchange default constants, add environment variables, customize your default\n`pythonpath`, and so on. you can also add additional paths to the\n`module_dirs`, `pipeline_dirs`, and `models_dirs` sections to expose custom\nmodules, pipelines, and models to your system.\n\nnote that, when the config file is loaded, any `{{eta}}` patterns in directory\npaths are replaced with the absolute path to the `eta/` directory on your\nmachine.\n\nthe default config includes the `modules/`, `pipelines/`, and `models/`\ndirectories on your module, pipeline, and models search paths, respectively.\nthese directories contain the necessary information to run the standard\nanalytics exposed by the eta library. in addition, the relative paths\n`./modules/`, `./pipelines/`, and `./models/` are added to their respective\npaths to support the typical directory structure that we adopt for our custom\nprojects.\n\n### cli\n\ninstalling eta automatically installs `eta`, a command-line interface (cli) for\ninteracting with the eta library. this utility provides access to many useful\nfeatures of eta, including building and running pipelines, downloading models,\nand interacting with remote storage.\n\nto explore the cli, type `eta --help`, and see the\n[cli guide](https://github.com/voxel51/eta/blob/develop/docs/cli_guide.md) for\ncomplete information.\n\n## quickstart\n\nget your feet wet with eta by running some of examples in the\n[examples folder](https://github.com/voxel51/eta/tree/develop/eta/examples).\n\nalso, see the [docs folder](https://github.com/voxel51/eta/tree/develop/docs)\nfor more documentation about the various components of the eta library.\n\n## organization\n\nthe eta package is organized as described below. for more information about the\ndesign and function of the various eta components, read the documentation in\nthe [docs folder](https://github.com/voxel51/eta/tree/develop/docs).\n\n| directory         | description                                                                                                                                                                                                                                                                                  |\n| ----------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `eta/classifiers` | wrappers for performing inference with common classifiers                                                                                                                                                                                                                                    |\n| `eta/core`        | the core eta library, which includes utilities for working with images, videos, embeddings, and much more                                                                                                                                                                                    |\n| `eta/detectors`   | wrappers for performing inference with common detectors                                                                                                                                                                                                                                      |\n| `eta/docs`        | documentation about the eta library                                                                                                                                                                                                                                                          |\n| `eta/examples`    | examples of using the eta library                                                                                                                                                                                                                                                            |\n| `eta/models`      | library of ml models. the `manifest.json` file in this folder enumerates the models, which are downloaded to this folder as needed. see the [models developer's guide](https://github.com/voxel51/eta/blob/develop/docs/models_dev_guide.md) for more information about eta's model registry |\n| `eta/modules`     | library of video processing/analytics modules. see the [module developer's guide](https://github.com/voxel51/eta/blob/develop/docs/modules_dev_guide.md) for more information about eta modules                                                                                              |\n| `eta/pipelines`   | library of video processing/analytics pipelines. see the [pipeline developer's guide](https://github.com/voxel51/eta/blob/develop/docs/pipelines_dev_guide.md) for more information about eta pipelines                                                                                      |\n| `eta/resources`   | resources such as media, templates, etc                                                                                                                                                                                                                                                      |\n| `eta/segmenters`  | wrappers for performing inference with common semantic segmenters                                                                                                                                                                                                                            |\n| `eta/tensorflow`  | third-party tensorflow repositories that eta builds upon                                                                                                                                                                                                                                     |\n\n## generating documentation\n\nthis project uses\n[sphinx-napoleon](https://pypi.python.org/pypi/sphinxcontrib-napoleon) to\ngenerate its documentation from source.\n\nto generate the documentation, you must install the developer dependencies by\nrunning the `install.bash` script with the `-d` flag.\n\nthen you can generate the docs by running:\n\n```shell\nbash sphinx/generate_docs.bash\n```\n\nto view the documentation, open the `sphinx/build/html/index.html` file in your\nbrowser.\n\n## uninstallation\n\n```shell\npip uninstall voxel51-eta\n```\n\n## acknowledgements\n\nthis project was gratefully supported by the\n[nist public safety innovation accelerator program](https://www.nist.gov/news-events/news/2017/06/nist-awards-385-million-accelerate-public-safety-communications).\n\n## citation\n\nif you use eta in your research, feel free to cite the project (but only if you\nlove it \ud83d\ude0a):\n\n```bibtex\n@article{moore2017eta,\n  title={eta: extensible toolkit for analytics},\n  author={moore, b. e. and corso, j. j.},\n  journal={github. note: https://github.com/voxel51/eta},\n  year={2017}\n}\n```\n",
  "docs_url": null,
  "keywords": "",
  "license": "apache",
  "name": "voxel51-eta",
  "package_url": "https://pypi.org/project/voxel51-eta/",
  "project_url": "https://pypi.org/project/voxel51-eta/",
  "project_urls": {
    "Homepage": "https://github.com/voxel51/eta"
  },
  "release_url": "https://pypi.org/project/voxel51-eta/0.12.1/",
  "requires_dist": [
    "argcomplete",
    "dill",
    "future",
    "glob2",
    "jsonlines",
    "numpy",
    "packaging",
    "Pillow >=6.2",
    "py7zr",
    "python-dateutil",
    "pytz",
    "rarfile",
    "requests",
    "retrying",
    "six",
    "scikit-image",
    "sortedcontainers",
    "tabulate",
    "tzlocal",
    "urllib3",
    "opencv-python-headless <5,>=4.1",
    "importlib-metadata ; python_version < \"3.8\"",
    "blockdiag ; extra == 'pipeline'",
    "Sphinx ; extra == 'pipeline'",
    "sphinxcontrib-napoleon ; extra == 'pipeline'",
    "azure-identity ; extra == 'storage'",
    "azure-storage-blob >=12.4.0 ; extra == 'storage'",
    "boto3 >=1.15 ; extra == 'storage'",
    "google-api-python-client ; extra == 'storage'",
    "google-cloud-storage >=1.36 ; extra == 'storage'",
    "httplib2 <=0.15 ; extra == 'storage'",
    "pysftp ; extra == 'storage'"
  ],
  "requires_python": ">=3.6",
  "summary": "extensible toolkit for analytics",
  "version": "0.12.1",
  "releases": [],
  "developers": [
    "info@voxel51.com",
    "voxel51"
  ],
  "kwds": "voxel51 toolkit pip3 svg python3",
  "license_kwds": "apache",
  "libtype": "pypi",
  "id": "pypi_voxel51_eta",
  "homepage": "https://github.com/voxel51/eta",
  "release_count": 47,
  "dependency_ids": [
    "pypi_argcomplete",
    "pypi_azure_identity",
    "pypi_azure_storage_blob",
    "pypi_blockdiag",
    "pypi_boto3",
    "pypi_dill",
    "pypi_future",
    "pypi_glob2",
    "pypi_google_api_python_client",
    "pypi_google_cloud_storage",
    "pypi_httplib2",
    "pypi_importlib_metadata",
    "pypi_jsonlines",
    "pypi_numpy",
    "pypi_opencv_python_headless",
    "pypi_packaging",
    "pypi_pillow",
    "pypi_py7zr",
    "pypi_pysftp",
    "pypi_python_dateutil",
    "pypi_pytz",
    "pypi_rarfile",
    "pypi_requests",
    "pypi_retrying",
    "pypi_scikit_image",
    "pypi_six",
    "pypi_sortedcontainers",
    "pypi_sphinx",
    "pypi_sphinxcontrib_napoleon",
    "pypi_tabulate",
    "pypi_tzlocal",
    "pypi_urllib3"
  ]
}
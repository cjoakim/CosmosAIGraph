{
  "classifiers": [
    "development status :: 5 - production/stable",
    "license :: osi approved :: mit license",
    "operating system :: os independent",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.9",
    "topic :: other/nonlisted topic",
    "topic :: scientific/engineering",
    "topic :: scientific/engineering :: chemistry",
    "topic :: scientific/engineering :: physics"
  ],
  "description": "<img alt=\"ifermi logo\" src=\"https://raw.githubusercontent.com/fermisurfaces/ifermi/main/docs/_static/logo2-01.png\" height=\"150px\">\n\n--------\n\n[\ud83d\udcd6 **official documentation** \ud83d\udcd6](https://fermisurfaces.github.io/ifermi)\n\n[\ud83d\ude4b **support forum** \ud83d\ude4b](https://matsci.org/c/ifermi/)\n\n[\ud83d\udcdd **joss paper** \ud83d\udcdd](https://doi.org/10.21105/joss.03089)\n\nifermi is a python (3.9+) library and set of command-line tools for the generation,\nanalysis, and visualisation of fermi surfaces and fermi slices. the goal of the library\nis to provide fully featured fermisurface and fermislice objects that allow for easy\nmanipulation and analysis. the main features include:\n\n- interpolation of electronic band structures onto dense k-point meshes.\n- extraction of fermi surfaces and fermi slices from electronic band structures.\n- projection of arbitrary properties onto fermi surfaces and fermi slices.\n- tools to calculate fermi surface dimensionality, orientation, and averaged projections,\n  including fermi velocities.\n- interactive visualisation of fermi surfaces and slices, with support for\n  [mayavi](https://docs.enthought.com/mayavi/mayavi/), [plotly](https://plot.ly/) and\n  [matplotlib](https://matplotlib.org).\n- generation and visualisation of spin-texture.\n\nifermi's command-line tools only work with vasp calculations but support for additional\ndft packages will be added in the future.\n\n![example fermi surfaces](https://raw.githubusercontent.com/fermisurfaces/ifermi/main/docs/_static/fermi-surface-example.png)\n\n## quick start\n\nthe [online documentation](https://fermisurfaces.github.io/ifermi/cli.html) provides a full\ndescription of the available command-line options.\n\n### analysis\n\nfermi surface properties, including dimensionality and orientation can be extracted\nfrom a vasprun.xml file using:\n\n```bash\nifermi info --property velocity\n```\n\n```\nfermi surface summary\n=====================\n\n  # surfaces: 5\n  area: 32.75 \u00e5\u207b\u00b2\n  avg velocity: 9.131e+05 m/s\n\nisosurfaces\n~~~~~~~~~~~\n\n      band    area [\u00e5\u207b\u00b2]    velocity avg [m/s]   dimensionality    orientation\n    ------  ------------  --------------------  ----------------  -------------\n         6         1.944             7.178e+05         2d           (0, 0, 1)\n         7         4.370             9.092e+05      quasi-2d        (0, 0, 1)\n         7         2.961             5.880e+05         2d           (0, 0, 1)\n         8         3.549             1.105e+06      quasi-2d        (0, 0, 1)\n         8         3.549             1.105e+06      quasi-2d        (0, 0, 1)\n```\n\n### visualisation\n\nthree-dimensional fermi surfaces can be visualized from a `vasprun.xml` file using:\n\n```bash\nifermi plot\n```\n\nthe two-dimensional slice of a fermi surface along the plane specified by the miller\nindices (j k l) and distance d can be plotted from a `vasprun.xml` file using:\n\n```bash\nifermi plot --slice j k l d\n```\n\n### python library\n\nthe `ifermi` command line tools are build on the ifermi python library. here is an\nexample of how to load dft calculation outputs, interpolate the energies onto a dense mesh,\ngenerate a fermi surface, calculate fermi surface properties, and visualise the surface.\na more complete summary of the api is given in the [api introduction page](https://fermisurfaces.github.io/ifermi/introduction_to_ifermi.html)\nand in the [api reference page](https://fermisurfaces.github.io/ifermi/reference.html) in the documentation.\n\n```python\nfrom pymatgen.io.vasp.outputs import vasprun\nfrom ifermi.surface import fermisurface\nfrom ifermi.interpolate import fourierinterpolator\nfrom ifermi.plot import fermisliceplotter, fermisurfaceplotter, save_plot, show_plot\nfrom ifermi.kpoints import kpoints_from_bandstructure\n\n# load vasp calculation outputs\nvr = vasprun(\"vasprun.xml\")\nbs = vr.get_band_structure()\n\n# interpolate the energies onto a dense k-point mesh\ninterpolator = fourierinterpolator(bs)\ndense_bs, velocities = interpolator.interpolate_bands(return_velocities=true)\n\n# generate the fermi surface and calculate the dimensionality\nfs = fermisurface.from_band_structure(\n  dense_bs, mu=0.0, wigner_seitz=true, calculate_dimensionality=true\n)\n\n# generate the fermi surface and calculate the group velocity at the\n# center of each triangular face\ndense_kpoints = kpoints_from_bandstructure(dense_bs)\nfs = fermisurface.from_band_structure(\n  dense_bs, mu=0.0, wigner_seitz=true, calculate_dimensionality=true,\n  property_data=velocities, property_kpoints=dense_kpoints\n)\n\n# number of isosurfaces in the fermi surface\nfs.n_surfaces\n\n# number of isosurfaces for each spin channel\nfs.n_surfaces_per_spin\n\n# the total area of the fermi surface\nfs.area\n\n# the area of each isosurface\nfs.area_surfaces\n\n# loop over all isosurfaces and check their properties\n# the isosurfaces are given as a list for each spin channel\nfor spin, isosurfaces in fs.isosurfaces.items():\n    for isosurface in isosurfaces:\n        # the dimensionality (does the surface cross periodic boundaries)\n        isosurface.dimensionality\n\n        # what is the orientation\n        isosurface.orientation\n\n        # does the surface have face properties\n        isosurface.has_properties\n\n        # calculate the norms of the properties\n        isosurface.properties_norms\n\n        # calculate scalar projection of properties on to [0 0 1] vector\n        isosurface.scalar_projection((0, 0, 1))\n\n        # uniformly sample the surface faces to a consistent density\n        isosurface.sample_uniform(0.1)\n\n# plot the fermi surface\nfs_plotter = fermisurfaceplotter(fs)\nplot = fs_plotter.get_plot()\n\n# generate fermi slice along the (0 0 1) plane going through the \u03b3-point.\nfermi_slice = fs.get_fermi_slice((0, 0, 1))\n\n# number of isolines in the slice\nfermi_slice.n_lines\n\n# do the lines have segment properties\nfermi_slice.has_properties\n\n# plot slice\nslice_plotter = fermisliceplotter(fermi_slice)\nplot = slice_plotter.get_plot()\n\nsave_plot(plot, \"fermi-slice.png\")  # saves the plot to a file\nshow_plot(plot)  # displays an interactive plot\n```\n\n## citing ifermi\n\nif you find ifermi useful, please encourage its development by citing the following\n[paper](https://doi.org/10.21105/joss.03089) in your research output:\n\n```\nganose, a. m., searle, a., jain, a., griffin, s. m., ifermi: a python library for fermi\nsurface generation and analysis. journal of open source software, 2021, 6 (59), 3089\n```\n\n\n## installation\n\nthe recommended way to install ifermi is in a conda environment.\n\n```bash\nconda create --name ifermi pip cmake numpy\nconda activate ifermi\nconda install -c conda-forge pymatgen boltztrap2 pyfftw\npip install ifermi\n````\n\nifermi is currently compatible with python 3.9+ and relies on a number of\nopen-source python packages, specifically:\n\n- [pymatgen](http://pymatgen.org) for parsing dft calculation outputs.\n- [boltztrap2](https://gitlab.com/sousaw/boltztrap2) for band structure interpolation.\n- [trimesh](https://trimsh.org/) for manipulating isosurfaces.\n- [matplotlib](https://matplotlib.org), [mayavi](https://docs.enthought.com/mayavi/mayavi/), and [plotly](https://plot.ly/) for three-dimensional plotting.\n\n### running tests\n\nthe integration tests can be run to ensure ifermi has been installed correctly. first\ndownload the ifermi source and install the test requirements.\n\n```\ngit clone https://github.com/fermisurfaces/ifermi.git\ncd ifermi\npip install .[tests]\n```\n\nthe tests can be run in the ifermi folder using:\n\n```bash\npytest\n```\n\n## need help?\n\nask questions about the ifermi python api and command-line tools on the [ifermi\nsupport forum](https://matsci.org/c/ifermi).\nif you've found an issue with ifermi, please submit a bug report\n[here](https://github.com/fermisurfaces/ifermi/issues).\n\n## what\u2019s new?\n\ntrack changes to ifermi through the\n[changelog](https://fermisurfaces.github.io/ifermi/changelog.html).\n\n## contributing\n\nwe greatly appreciate any contributions in the form of a pull request.\nadditional information on contributing to ifermi can be found [here](https://fermisurfaces.github.io/ifermi/contributing.html).\nwe maintain a list of all contributors [here](https://fermisurfaces.github.io/ifermi/contributors.html).\n\n## license\n\nifermi is made available under the mit license (see license file).\n\n## acknowledgements\n\ndeveloped by amy searle and alex ganose.\nsin\u00e9ad griffin designed and led the project.\n",
  "docs_url": null,
  "keywords": "fermi-surface,pymatgen,dft,vasp,band,materials-science",
  "license": "mit",
  "name": "ifermi",
  "package_url": "https://pypi.org/project/ifermi/",
  "project_url": "https://pypi.org/project/ifermi/",
  "project_urls": {
    "changelog": "https://github.com/fermisurfaces/IFermi/blob/main/CHANGELOG.md",
    "documentation": "https://fermisurfaces.github.io/IFermi/",
    "homepage": "https://fermisurfaces.github.io/IFermi/",
    "repository": "https://github.com/fermisurfaces/IFermi"
  },
  "release_url": "https://pypi.org/project/ifermi/0.3.3/",
  "requires_dist": [
    "numpy",
    "scipy",
    "matplotlib",
    "pymatgen >=2017.12.30",
    "BoltzTraP2",
    "trimesh",
    "meshcut",
    "scikit-image",
    "monty",
    "spglib",
    "plotly",
    "pyfftw",
    "psutil",
    "click",
    "networkx",
    "tabulate",
    "crystal-toolkit ; extra == 'crystal-toolkit'",
    "open3d ; extra == 'decimation'",
    "pre-commit >=2.12.1 ; extra == 'dev'",
    "sphinx ==7.2.6 ; extra == 'docs'",
    "sphinx-click ==5.0.1 ; extra == 'docs'",
    "furo ==2023.9.10 ; extra == 'docs'",
    "sphinx-autodoc-typehints ==1.24.0 ; extra == 'docs'",
    "myst-parser ==2.0.0 ; extra == 'docs'",
    "nbsphinx ==0.9.3 ; extra == 'docs'",
    "nbsphinx-link ==1.3.0 ; extra == 'docs'",
    "ipython ==8.16.1 ; extra == 'docs'",
    "mayavi ; extra == 'mayavi'",
    "mlabtex ; extra == 'mayavi'",
    "vtk ; extra == 'mayavi'",
    "kaleido ; extra == 'plotly-static'",
    "PyMCubes ; extra == 'smooth'",
    "matplotlib ==3.8.0 ; extra == 'strict'",
    "pymatgen ==2023.10.4 ; extra == 'strict'",
    "BoltzTraP2 ==22.12.1 ; extra == 'strict'",
    "trimesh ==3.23.5 ; extra == 'strict'",
    "meshcut ==0.3.0 ; extra == 'strict'",
    "scikit-image ==0.22.0 ; extra == 'strict'",
    "monty ==2023.9.25 ; extra == 'strict'",
    "spglib ==2.1.0 ; extra == 'strict'",
    "plotly ==5.17.0 ; extra == 'strict'",
    "pyfftw ==0.13.1 ; extra == 'strict'",
    "psutil ==5.9.5 ; extra == 'strict'",
    "click ==8.1.7 ; extra == 'strict'",
    "networkx ==3.1 ; extra == 'strict'",
    "tabulate ==0.9.0 ; extra == 'strict'",
    "numpy ; extra == 'strict'",
    "scipy ; extra == 'strict'",
    "pytest ==7.4.2 ; extra == 'tests'"
  ],
  "requires_python": ">=3.9",
  "summary": "fermi surface plotting tool from dft output",
  "version": "0.3.3",
  "releases": [],
  "developers": [
    "amyjadesearle@gmail.com"
  ],
  "kwds": "fermisurfaces fermisurface fermisurfaceplotter fermi_slice get_fermi_slice",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_ifermi",
  "homepage": "",
  "release_count": 13,
  "dependency_ids": [
    "pypi_boltztrap2",
    "pypi_click",
    "pypi_crystal_toolkit",
    "pypi_furo",
    "pypi_ipython",
    "pypi_kaleido",
    "pypi_matplotlib",
    "pypi_mayavi",
    "pypi_meshcut",
    "pypi_mlabtex",
    "pypi_monty",
    "pypi_myst_parser",
    "pypi_nbsphinx",
    "pypi_nbsphinx_link",
    "pypi_networkx",
    "pypi_numpy",
    "pypi_open3d",
    "pypi_plotly",
    "pypi_pre_commit",
    "pypi_psutil",
    "pypi_pyfftw",
    "pypi_pymatgen",
    "pypi_pymcubes",
    "pypi_pytest",
    "pypi_scikit_image",
    "pypi_scipy",
    "pypi_spglib",
    "pypi_sphinx",
    "pypi_sphinx_autodoc_typehints",
    "pypi_sphinx_click",
    "pypi_tabulate",
    "pypi_trimesh",
    "pypi_vtk"
  ]
}
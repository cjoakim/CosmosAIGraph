{
  "classifiers": [],
  "description": "# pyspark-test\n\n[![code style: black](https://img.shields.io/badge/code%20style-black-black.svg)](https://github.com/ambv/black)\n[![license](https://img.shields.io/badge/license-apache%202.0-blue.svg)](https://opensource.org/licenses/apache-2.0)\n[![unit test](https://github.com/debugger24/pyspark-test/workflows/unit%20test/badge.svg?branch=main)](https://github.com/debugger24/pyspark-test/actions?query=workflow%3a%22unit+test%22)\n[![pypi version](https://badge.fury.io/py/pyspark-test.svg)](https://badge.fury.io/py/pyspark-test)\n[![downloads](https://pepy.tech/badge/pyspark-test)](https://pepy.tech/project/pyspark-test)\n\ncheck that left and right spark dataframe are equal.\n\nthis function is intended to compare two spark dataframes and output any differences. it is inspired from pandas testing module but for pyspark, and for use in unit tests. additional parameters allow varying the strictness of the equality checks performed.\n\n# installation\n\n```\npip install pyspark-test\n```\n\n# usage\n\n```py\nassert_pyspark_df_equal(left_df, actual_df)\n```\n\n## additional arguments\n\n* `check_dtype` : to compare the data types of spark dataframe. default true\n* `check_column_names` : to compare column names. default false. not required of we are checking data types.\n* `check_columns_in_order` : to check the columns should be in order or not. default to false\n* `order_by` : column names with which dataframe must be sorted before comparing. default none.\n\n# example\n\n```py\nimport datetime\n\nfrom pyspark import sparkcontext\nfrom pyspark.sql import sparksession\nfrom pyspark.sql.types import *\n\nfrom pyspark_test import assert_pyspark_df_equal\n\nsc = sparkcontext.getorcreate(conf=conf)\nspark_session = sparksession(sc)\n\ndf_1 = spark_session.createdataframe(\n    data=[\n        [datetime.date(2020, 1, 1), 'demo', 1.123, 10],\n        [none, none, none, none],\n    ],\n    schema=structtype(\n        [\n            structfield('col_a', datetype(), true),\n            structfield('col_b', stringtype(), true),\n            structfield('col_c', doubletype(), true),\n            structfield('col_d', longtype(), true),\n        ]\n    ),\n)\n\ndf_2 = spark_session.createdataframe(\n    data=[\n        [datetime.date(2020, 1, 1), 'demo', 1.123, 10],\n        [none, none, none, none],\n    ],\n    schema=structtype(\n        [\n            structfield('col_a', datetype(), true),\n            structfield('col_b', stringtype(), true),\n            structfield('col_c', doubletype(), true),\n            structfield('col_d', longtype(), true),\n        ]\n    ),\n)\n\nassert_pyspark_df_equal(df_1, df_2)\n```\n\n\n",
  "docs_url": null,
  "keywords": "assert pyspark unit test testing compare",
  "license": "apache software license (apache 2.0)",
  "name": "pyspark-test",
  "package_url": "https://pypi.org/project/pyspark-test/",
  "project_url": "https://pypi.org/project/pyspark-test/",
  "project_urls": {
    "Homepage": "https://github.com/debugger24/pyspark-test"
  },
  "release_url": "https://pypi.org/project/pyspark-test/0.2.0/",
  "requires_dist": [
    "pyspark (>=2.1.2)"
  ],
  "requires_python": "",
  "summary": "check that left and right spark dataframe are equal.",
  "version": "0.2.0",
  "releases": [],
  "developers": [
    "rahul_kumar",
    "rahulcomp24@gmail.com"
  ],
  "kwds": "pyspark_test assert_pyspark_df_equal pyspark assert 20test",
  "license_kwds": "apache software license (apache 2.0)",
  "libtype": "pypi",
  "id": "pypi_pyspark_test",
  "homepage": "https://github.com/debugger24/pyspark-test",
  "release_count": 2,
  "dependency_ids": [
    "pypi_pyspark"
  ]
}
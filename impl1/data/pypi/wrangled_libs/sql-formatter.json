{
  "classifiers": [
    "development status :: 4 - beta",
    "intended audience :: developers",
    "license :: osi approved :: apache software license",
    "natural language :: english",
    "programming language :: python :: 3.6",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8"
  ],
  "description": "# sql_formatter\n> a python based sql formatter\n\n\n![ci](https://github.com/pablormira/sql_formatter/workflows/ci/badge.svg) [![pypi](https://img.shields.io/pypi/v/sql-formatter?color=yellow&label=pypi%20version)](https://pypi.org/project/sql-formatter/#description)\n[![anaconda-server badge](https://anaconda.org/pablormira/sql_formatter/badges/version.svg)](https://anaconda.org/pablormira/sql_formatter)\n\n## how to install\n\nvia pip\n\n`pip install sql-formatter`\n\nor via conda\n\n`conda install -c pablormira sql_formatter`\n\n## how to use\n\nformat your sql files via the command line\n\n`sql-formatter sql_file.sql sql_file2.sql`\n\nyou can also format all your sql-files via\n\n`sql-formatter *.sql`\n\nto format all your sql files recursively use\n\n`sql-formatter -r \"*.sql\"`\n\n### controlling maximum length line via truncation\n\nthe `sql_formatter` will try to truncate too long lines in the `select` clause for either\n\n* function with many arguments\n* `in` with many elements\n\nthe default maximum line length is 82 after line stripping.\n\nyou can control the maximum length line using e.g.\n\n`sql-formatter sql_file.sql --max-line-length=50`\n\n### usage with `pre-commit`\n\n[pre-commit](https://pre-commit.com) is a nice development tool to automatize the binding of pre-commit hooks. after installation and configuration `pre-commit` will run your hooks before you commit any change. \n\nto add `sql-formatter` as a hook to your `pre-commit` configuration to format your sql files before commit, just add the following lines to your `.pre-commit-config.yaml`:\n\n```yaml\nrepos:\n  - repo: https://github.com/pablormira/sql_formatter\n    rev: master\n    hooks:\n    - id: sql_formatter\n```\n\nif you want to install `sql-formatter` locally and use that instead of using `pre-commit`'s default environment, set `repo: local` in your `.pre-commit-config.yaml` file:\n\n```yaml\nrepos:\n  - repo: local\n    hooks:\n    - id: sql_formatter\n      name: sql formatter\n      language: system\n      entry: sql-formatter\n      files: \\.sql$\n```\n\nor\n\n```yaml\nrepos:\n  - repo: local\n    hooks:\n    - id: sql_formatter\n      name: sql formatter\n      language: system\n      entry: sql-formatter --max-line-length=50\n      files: \\.sql$\n```\n\nfor a custom maximum line length truncation of e.g. 50\n\n### usage in python\n\nto exemplify the formatting let's say you have a sql query like this\n\n```\nexample_sql = \"\"\"\ncreate or replace table mytable as -- mytable example\nselect a.asdf, b.qwer, -- some comment here\nc.asdf, -- some comment there\nb.asdf2 from table1 as a left join \ntable2 as b -- and here a comment\n    on a.asdf = b.asdf  -- join this way\n    inner join table3 as c\non a.asdf=c.asdf\nwhere a.asdf= 1 -- comment this\nand b.qwer =2 and a.asdf<=1 --comment that\nor b.qwer>=5\ngroup by a.asdf\n\"\"\"\n```\n\nthen you can use this package to format it so that it is better readable\n\n```\nfrom sql_formatter.core import format_sql\nprint(format_sql(example_sql))\n```\n\n    create or replace table mytable as -- mytable example\n    select a.asdf,\n           b.qwer, -- some comment here\n           c.asdf, -- some comment there\n           b.asdf2\n    from   table1 as a\n        left join table2 as b -- and here a comment\n            on a.asdf = b.asdf -- join this way\n        inner join table3 as c\n            on a.asdf = c.asdf\n    where  a.asdf = 1 -- comment this\n       and b.qwer = 2\n       and a.asdf <= 1 --comment that\n        or b.qwer >= 5\n    group by a.asdf\n\n\nit can even deal with subqueries and it will correct my favourite simple careless mistake (comma at the end of select statement before of from) for you on the flow :-)\n\n```\nprint(format_sql(\"\"\"\nselect asdf, cast(qwer as numeric), -- some comment\nqwer1\nfrom \n(select asdf, qwer, from table1 where asdf = 1) as a\nleft \njoin (select asdf, qwer2 from table2 where qwer2 = 1) as b\non a.asdf = b.asdf\nwhere qwer1 >= 0\n\"\"\"))\n```\n\n    select asdf,\n           cast(qwer as numeric), -- some comment\n           qwer1\n    from   (select asdf,\n                   qwer\n            from   table1\n            where  asdf = 1) as a\n        left join (select asdf,\n                          qwer2\n                   from   table2\n                   where  qwer2 = 1) as b\n            on a.asdf = b.asdf\n    where  qwer1 >= 0\n\n\nthe formatter is also robust against nested subqueries\n\n```\nprint(format_sql(\"\"\"\nselect field1, field2 from (select field1, \nfield2 from (select field1, field2, \nfield3 from table1 where a=1 and b>=100))\n\"\"\"))\n```\n\n    select field1,\n           field2\n    from   (select field1,\n                   field2\n            from   (select field1,\n                           field2,\n                           field3\n                    from   table1\n                    where  a = 1\n                       and b >= 100))\n\n\nif you do not want to get some query formatted in your sql file then you can use the marker `/*skip-formatter*/` in your query to disable formatting for just the corresponding query\n\n```\nfrom sql_formatter.format_file import format_sql_commands\nprint(format_sql_commands(\n\"\"\"\nuse database my_database;\n\n-- my first view --\ncreate or replace view my_view as\nselect asdf, qwer from table1\nwhere asdf <= 10;\n\n\n/*skip-formatter*/\ncreate or replace table my_table as\nselect asdf\nfrom my_view;\n\"\"\"\n))\n```\n\n    use database my_database;\n\n\n    -- my first view --\n    create or replace view my_view as\n    select asdf,\n           qwer\n    from   table1\n    where  asdf <= 10;\n\n\n    /*skip-formatter*/\n    create or replace table my_table as\n    select asdf\n    from my_view;\n\n\n\n### a note of caution\n\nfor the sql-formatter to work properly you should meticulously end each of your sql statements with semicolon (;)\n\nhowever, we have equiped the `sql-formatter` with some basic validations:\n\n* *forgotten semicolon validation*: the validator will check if the `create` keyword appears more than twice, indicating the user that he / she may have forgotten a semicolon\n* *unbalanced parenthesis*: the validator will check if there are unbalanced parenthesis in the query\n* *unbalanced `case when ... end`*: the validator will check if there are `case when` statements without `end` or vice versa\n\n### what `sql_formatter` does not do\n\nthis package is just a sql formatter and therefore\n\n* cannot parse your sql queries into e.g. dictionaries\n* cannot validate your sql queries to be valid for the corresponding database system / provider\n\nup to now it only formats queries of the form\n\n* `create table / view ...`\n* `select ...`\n\nevery other sql commands will remain unformatted, e.g. `insert into` ...\n\n## formatting logic\n\nthe main goal of the `sql_formatter` is to enhance readability and quick understanding of sql queries via proper formatting. we use **indentation** and **lowercasing / uppercasing** as means to arrange statements / clauses and parameters into context. by **programmatically standardizing** the way to write sql queries we help the user understand its queries faster.\n\nas a by-product of using the `sql_formatter`, developer teams can focus on the query logic itself and save time by not incurring into styling decisions, this then begin accomplished by the `sql_formatter`. this is similar to the goal accomplished by the [black package](https://github.com/psf/black) for the python language, which was also an inspiration for the development of this package for sql. \n\nwe can summarize the main steps of the formatter as follows:\n\n1. each query is separated from above by two newlines.\n2. everything but **main statements\\* / clauses** is lowercased\n\n\\* main statements:\n\n* create ... table / view table_name as\n* select (distinct)\n* from\n* (left / inner / right / outer) join\n* union\n* on\n* where\n* group by\n* order by\n* over\n* partition by\n\n3. indentation is used to put parameters into context. here an easy example:\n\n```sql\nselect field1,\n       case when field2 > 1 and\n                 field2 <= 10 and\n                 field1 = 'a' then 1\n            else 0 end as case_field,\n       ...\nfrom   table1\nwhere  field1 = 1\n   and field2 <= 2\n    or field3 = 5\norder by field1;\n```\n\n> this is a very nice, easy example but things can become more complicated if comments come into play\n\n4. subqueries are also properly indented, e.g.\n\n```sql\nselect a.field1,\n       a.field2,\n       b.field3\nfrom   (select field1,\n               field2\n        from   table1\n        where  field1 = 1) as a\n    left join (select field1,\n                      field3\n               from   table2) as b\n        on a.field1 = b.field1;\n```\n\n5. everything not being a query of the form `create ... table / view` or `select ...` is left unchanged\n\n## versioning\n\nwe version our package via [semantic versioning](https://semver.org), i.e., \n\n* we use three digits separated by points x1.x2.x3, e.g. 0.5.1\n* we increase x1 (the major version) if we introduce breaking changes\n  * exception: versions with 0 at the beginning (e.g. 0.5.1) mean that the package is not stable yet and therefore every new feature could be a breaking change\n* we increase x2 (the minor version) if we introduce a new feature\n* we increase x3 (the patch version) if we fix a bug\n\nnew documentation, refactoring / maintenance of code and admin tasks do not change the versions.\n\nyou can follow the changes introduced by each version in our [changelog](https://github.com/pablormira/sql_formatter/blob/master/changelog.md)\n\n## how to contribute\n\nsee [contributing](https://github.com/pablormira/sql_formatter/blob/master/contributing.md)\n\n## acknowledgements\n\nthank you very much to jeremy howard and all the [nbdev](https://github.com/fastai/nbdev) team for enabling the *fast* and delightful development of this library via the `nbdev` framework.\n\nfor more details on `nbdev`, see its official [tutorial](https://nbdev.fast.ai/tutorial.html)\n\nthank you very much for the developers of the [black](https://github.com/psf/black) package, which was also an inspiration for the development of this package\n\n\n",
  "docs_url": null,
  "keywords": "sql,formatter",
  "license": "apache software license 2.0",
  "name": "sql-formatter",
  "package_url": "https://pypi.org/project/sql-formatter/",
  "project_url": "https://pypi.org/project/sql-formatter/",
  "project_urls": {
    "Homepage": "https://github.com/PabloRMira/sql_formatter/tree/master/"
  },
  "release_url": "https://pypi.org/project/sql-formatter/0.6.2/",
  "requires_dist": [],
  "requires_python": ">=3.6",
  "summary": "a sql formatter",
  "version": "0.6.2",
  "releases": [],
  "developers": [
    "pablo_rodriguez_mira",
    "rodriguez.mira.pablo@gmail.com"
  ],
  "kwds": "sql_formatter format_sql format_sql_commands sql_file format_file",
  "license_kwds": "apache software license 2.0",
  "libtype": "pypi",
  "id": "pypi_sql_formatter",
  "homepage": "https://github.com/pablormira/sql_formatter/tree/master/",
  "release_count": 18,
  "dependency_ids": []
}
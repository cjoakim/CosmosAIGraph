{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "operating system :: os independent",
    "programming language :: python",
    "programming language :: python :: 3",
    "programming language :: python :: 3.6",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9"
  ],
  "description": "a schema and validator for yaml.\nyamale (ya\u00b7ma\u00b7l\u0113)\n=================\n\n| :warning: ensure that your schema definitions come from internal or trusted sources. yamale does not protect against intentionally malicious schemas. |\n|:------------|\n\n<img src=\"https://github.com/23andme/yamale/blob/master/yamale.png?raw=true\" alt=\"yamale\" width=\"400\"/>\n\na schema and validator for yaml.\n\nwhat's yaml? see the current spec [here](http://www.yaml.org/spec/1.2/spec.html) and an introduction\nto the syntax [here](https://github.com/animosity/craftirc/wiki/complete-idiot's-introduction-to-yaml).\n\n[![build status](https://github.com/23andme/yamale/actions/workflows/run-tests.yml/badge.svg)](https://github.com/23andme/yamale/actions/workflows/run-tests.yml)\n[![pypi](https://img.shields.io/pypi/v/yamale.svg)](https://pypi.python.org/pypi/yamale)\n\nrequirements\n------------\n* python 3.6+\n* pyyaml\n* ruamel.yaml (optional)\n\ninstall\n-------\n### pip\n```bash\n$ pip install yamale\n```\n\nnote: some platforms, e.g., mac os, may ship with only python 2 and may not have pip installed.\ninstallation of python 3 should also install pip. to preserve any system dependencies on default\nsoftware, consider installing python 3 as a local package. please note replacing system-provided\npython may disrupt other software. mac os users may wish to investigate macports, homebrew, or\nbuilding python 3 from source; in all three cases, apple's command line tools (clt) for xcode\nmay be required. see also [developers](#developers), below.\n\n### manual\n1. download yamale from: https://github.com/23andme/yamale/archive/master.zip\n2. unzip somewhere temporary\n3. run `python setup.py install` (may have to prepend `sudo`)\n\nusage\n-----\n### command line\nyamale can be run from the command line to validate one or many yaml files. yamale will search the\ndirectory you supply (current directory is default) for yaml files. each yaml file it finds it will\nlook in the same directory as that file for its schema, if there is no schema yamale will keep\nlooking up the directory tree until it finds one. if yamale can not find a schema it will tell you.\n\nusage:\n\n```bash\nusage: yamale [-h] [-s schema] [-n cpu_num] [-p parser] [--no-strict] [path]\n\nvalidate yaml files.\n\npositional arguments:\n  path                  folder to validate. default is current directory.\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -s schema, --schema schema\n                        filename of schema. default is schema.yaml.\n  -n cpu_num, --cpu-num cpu_num\n                        number of cpus to use. default is 4.\n  -p parser, --parser parser\n                        yaml library to load files. choices are \"ruamel\" or\n                        \"pyyaml\" (default).\n  --no-strict           disable strict mode, unexpected elements in the data\n                        will be accepted.\n```\n\n### api\nthere are several ways to feed yamale schema and data files. the simplest way is to let yamale take\ncare of reading and parsing your yaml files.\n\nall you need to do is supply the files' path:\n```python\n# import yamale and make a schema object:\nimport yamale\nschema = yamale.make_schema('./schema.yaml')\n\n# create a data object\ndata = yamale.make_data('./data.yaml')\n\n# validate data against the schema. throws a valueerror if data is invalid.\nyamale.validate(schema, data)\n```\n\nyou can pass a string of yaml to `make_schema()` and `make_data()` instead of passing a file path\nby using the `content=` parameter:\n\n```python\ndata = yamale.make_data(content=\"\"\"\nname: bill\nage: 26\nheight: 6.2\nawesome: true\n\"\"\")\n```\n\nif `data` is valid, nothing will happen. however, if `data` is invalid yamale will throw a\n`yamaleerror` with a message containing all the invalid nodes:\n```python\ntry:\n    yamale.validate(schema, data)\n    print('validation success! \ud83d\udc4d')\nexcept valueerror as e:\n    print('validation failed!\\n%s' % str(e))\n    exit(1)\n```\nand an array of `validationresult`.\n```python\ntry:\n    yamale.validate(schema, data)\n    print('validation success! \ud83d\udc4d')\nexcept yamaleerror as e:\n    print('validation failed!\\n')\n    for result in e.results:\n        print(\"error validating data '%s' with '%s'\\n\\t\" % (result.data, result.schema))\n        for error in result.errors:\n            print('\\t%s' % error)\n    exit(1)\n```\n\nyou can also specify an optional `parser` if you'd like to use the `ruamel.yaml` (yaml 1.2 support) instead:\n```python\n# import yamale and make a schema object, make sure ruamel.yaml is installed already.\nimport yamale\nschema = yamale.make_schema('./schema.yaml', parser='ruamel')\n\n# create a data object\ndata = yamale.make_data('./data.yaml', parser='ruamel')\n\n# validate data against the schema same as before.\nyamale.validate(schema, data)\n```\n\n### schema\n\n| :warning: ensure that your schema definitions come from internal or trusted sources. yamale does not protect against intentionally malicious schemas. |\n|:------------|\n\nto use yamale you must make a schema. a schema is a valid yaml file with one or more documents\ninside. each node terminates in a string which contains valid yamale syntax. for example, `str()`\nrepresents a [string validator](#validators).\n\na basic schema:\n```yaml\nname: str()\nage: int(max=200)\nheight: num()\nawesome: bool()\n```\n\nand some yaml that validates:\n```yaml\nname: bill\nage: 26\nheight: 6.2\nawesome: true\n```\n\ntake a look at the [examples](#examples) section for more complex schema ideas.\n\n#### includes\nschema files may contain more than one yaml document (nodes separated by `---`). the first document\nfound will be the base schema. any additional documents will be treated as includes. includes allow\nyou to define a valid structure once and use it several times. they also allow you to do recursion.\n\na schema with an include validator:\n```yaml\nperson1: include('person')\nperson2: include('person')\n---\nperson:\n    name: str()\n    age: int()\n```\n\nsome valid yaml:\n```yaml\nperson1:\n    name: bill\n    age: 70\n\nperson2:\n    name: jill\n    age: 20\n```\n\nevery root node not in the first yaml document will be treated like an include:\n```yaml\nperson: include('friend')\ngroup: include('family')\n---\nfriend:\n    name: str()\nfamily:\n    name: str()\n```\n\nis equivalent to:\n```yaml\nperson: include('friend')\ngroup: include('family')\n---\nfriend:\n    name: str()\n---\nfamily:\n    name: str()\n```\n\n##### recursion\nyou can get recursion using the include validator.\n\nthis schema:\n```yaml\nperson: include('human')\n---\nhuman:\n    name: str()\n    age: int()\n    friend: include('human', required=false)\n```\n\nwill validate this data:\n```yaml\nperson:\n    name: bill\n    age: 50\n    friend:\n        name: jill\n        age: 20\n        friend:\n            name: will\n            age: 10\n```\n\n##### adding external includes\nafter you construct a schema you can add extra, external include definitions by calling\n`schema.add_include(dict)`. this method takes a dictionary and adds each key as another include.\n\n### strict mode\nby default yamale will provide errors for extra elements present in lists and maps that are not\ncovered by the schema. with strict mode disabled (using the `--no-strict` command line option),\nadditional elements will not cause any errors. in the api, strict mode can be toggled by passing\nthe strict=true/false flag to the validate function.\n\nit is possible to mix strict and non-strict mode by setting the strict=true/false flag in the\ninclude validator, setting the option only for the included validators.\n\nvalidators\n----------\nhere are all the validators yamale knows about. every validator takes a `required` keyword telling\nyamale whether or not that node must exist. by default every node is required. example: `str(required=false)`\n\nyou can also require that an optional value is not `none` by using the `none` keyword. by default\nyamale will accept `none` as a valid value for a key that's not required. reject `none` values\nwith `none=false` in any validator. example: `str(required=false, none=false)`.\n\nsome validators take keywords and some take arguments, some take both. for instance the `enum()`\nvalidator takes one or more constants as arguments and the `required` keyword:\n`enum('a string', 1, false, required=false)`\n\n### string - `str(min=int, max=int, equals=string, starts_with=string, ends_with=string, matches=regex, exclude=string, ignore_case=false, multiline=false, dotall=false)`\nvalidates strings.\n- keywords\n    - `min`: len(string) >= min\n    - `max`: len(string) <= max\n    - `equals`: string == value (add `ignore_case=true` for case-insensitive checking)\n    - `starts_with`: accepts only strings starting with given value (add `ignore_case=true` for\n      case-insensitive checking)\n    - `matches`: validates the string against a given regex. similar to the `regex()` validator,\n      you can use `ignore_case`, `multiline` and `dotall`)\n    - `ends_with`: accepts only strings ending with given value (add `ignore_case=true` for case-insensitive checking)\n    - `exclude`: rejects strings that contains any character in the excluded value\n    - `ignore_case`: validates strings in a case-insensitive manner.\n    - `multiline`: `^` and `$` in a pattern match at the beginning and end of each line in a string\n       in addition to matching at the beginning and end of the entire string. (a pattern matches\n       at [the beginning of a string](https://docs.python.org/3/library/re.html#re.match) even in\n       multiline mode; see below for a workaround.); only allowed in conjunction with a `matches` keyword.\n    - `dotall`: `.` in a pattern matches newline characters in a validated string in addition to\n      matching every character that *isn't* a newline.; only allowed in conjunction with a `matches` keyword.\n\nexamples:\n- `str(max=10, exclude='?!')`: allows only strings less than 11 characters that don't contain `?` or `!`.\n\n### regex - `regex([patterns], name=string, ignore_case=false, multiline=false, dotall=false)`\nvalidates strings against one or more regular expressions.\n- arguments: one or more python regular expression patterns\n- keywords:\n    - `name`: a friendly description for the patterns.\n    - `ignore_case`: validates strings in a case-insensitive manner.\n    - `multiline`: `^` and `$` in a pattern match at the beginning and end of each line in a string\n       in addition to matching at the beginning and end of the entire string. (a pattern matches\n       at [the beginning of a string](https://docs.python.org/3/library/re.html#re.match) even in\n       multiline mode; see below for a workaround.)\n    - `dotall`: `.` in a pattern matches newline characters in a validated string in addition to\n      matching every character that *isn't* a newline.\n\nexamples:\n- `regex('^[^?!]{,10}$')`: allows only strings less than 11 characters that don't contain `?` or `!`.\n- `regex(r'^(\\d+)(\\s\\1)+$', name='repeated natural')`: allows only strings that contain two or\n  more identical digit sequences, each separated by a whitespace character. non-matching strings\n  like `sugar` are rejected with a message like `'sugar' is not a repeated natural.`\n- `regex('.*^apples$', multiline=true, dotall=true)`: allows the string `apples` as well\n  as multiline strings that contain the line `apples`.\n\n### integer - `int(min=int, max=int)`\nvalidates integers.\n- keywords\n    - `min`: int >= min\n    - `max`: int <= max\n\n### number - `num(min=float, max=float)`\nvalidates integers and floats.\n- keywords\n    - `min`: num >= min\n    - `max`: num <= max\n\n### boolean - `bool()`\nvalidates booleans.\n\n### null - `null()`\nvalidates null values.\n\n### enum - `enum([primitives])`\nvalidates from a list of constants.\n- arguments: constants to test equality with\n\nexamples:\n- `enum('a string', 1, false)`: a value can be either `'a string'`, `1` or `false`\n\n### day - `day(min=date, max=date)`\nvalidates a date in the form of yyyy-mm-dd.\n- keywords\n    - `min`: date >= min\n    - `max`: date <= max\n\nexamples:\n- `day(min='2001-01-01', max='2100-01-01')`: only allows dates between 2001-01-01 and 2100-01-01.\n\n### timestamp - `timestamp(min=time, max=time)`\nvalidates a timestamp in the form of yyyy-mm-dd hh:mm:ss.\n- keywords\n    - `min`: time >= min\n    - `max`: time <= max\n\nexamples:\n- `timestamp(min='2001-01-01 01:00:00', max='2100-01-01 23:00:00')`: only allows times between\n  2001-01-01 01:00:00 and 2100-01-01 23:00:00.\n\n### list - `list([validators], min=int, max=int)`\nvalidates lists. if one or more validators are passed to `list()` only nodes that pass at\nleast one of those validators will be accepted.\n\n- arguments: one or more validators to test values with\n- keywords\n    - `min`: len(list) >= min\n    - `max`: len(list) <= max\n\nexamples:\n- `list()`: validates any list\n- `list(include('custom'), int(), min=4)`: only validates lists that contain the `custom` include\n  or integers and contains a minimum of 4 items.\n\n### map - `map([validators], key=validator, min=int, max=int)`\nvalidates maps. use when you want a node to contain freeform data. similar to `list`, `map` takes\none or more validators to run against the values of its nodes, and only nodes that pass at least\none of those validators will be accepted. by default, only the values of nodes are validated and\nthe keys aren't checked.\n- arguments: one or more validators to test values with\n- keywords\n    - `key`: a validator for the keys of the map.\n    - `min`: len(map) >= min\n    - `max`: len(map) <= max\n\nexamples:\n- `map()`: validates any map\n- `map(str(), int())`: only validates maps whose values are strings or integers.\n- `map(str(), key=int())`: only validates maps whose keys are integers and values are strings. `1: one` would be valid but `'1': one` would not.\n- `map(str(), min=1)`: only validates a non-empty map.\n\n### ip address - `ip()`\nvalidates ipv4 and ipv6 addresses.\n\n- keywords\n    - `version`: 4 or 6; explicitly force ipv4 or ipv6 validation\n\nexamples:\n- `ip()`: allows any valid ipv4 or ipv6 address\n- `ip(version=4)`: allows any valid ipv4 address\n- `ip(version=6)`: allows any valid ipv6 address\n\n### mac address - `mac()`\nvalidates mac addresses.\n\nexamples:\n- `mac()`: allows any valid mac address\n\n### any - `any([validators])`\nvalidates against a union of types. use when a node **must** contain **one and only one** of several types. it is valid\nif at least one of the listed validators is valid. if no validators are given, accept any value.\n- arguments: validators to test values with (if none is given, allow any value; if one or more are given,\none must be present)\n\nexamples:\n- `any(int(), null())`: validates either an integer **or** a null value.\n- `any(num(), include('vector'))`: validates **either** a number **or** an included 'vector' type.\n- `any(str(min=3, max=3),str(min=5, max=5),str(min=7, max=7))`: validates to a string that is exactly 3, 5, or 7 characters long\n- `any()`: allows any value.\n\n### subset - `subset([validators], allow_empty=false)`\nvalidates against a subset of types. unlike the `any` validator, this validators allows **one or more** of several types.\nas such, it *automatically validates against a list*. it is valid if all values can be validated against at least one\nvalidator.\n- arguments: validators to test with (at least one; if none is given, a `valueerror` exception will be raised)\n- keywords:\n    - `allow_empty`: allow the subset to be empty (and is, therefore, also optional). this overrides the `required`\nflag.\n      \nexamples:\n- `subset(int(), str())`: validators against an integer, a string, or a list of either.\n- `subset(int(), str(), allow_empty=true)`: same as above, but allows the empty set and makes the subset optional.\n\n### include - `include(include_name)`\nvalidates included structures. must supply the name of a valid include.\n- arguments: single name of a defined include, surrounded by quotes.\n\nexamples:\n- `include('person')`\n\n### custom validators\nit is also possible to add your own custom validators. this is an advanced topic, but here is an\nexample of adding a `date` validator and using it in a schema as `date()`\n\n```python\nimport yamale\nimport datetime\nfrom yamale.validators import defaultvalidators, validator\n\nclass date(validator):\n    \"\"\" custom date validator \"\"\"\n    tag = 'date'\n\n    def _is_valid(self, value):\n        return isinstance(value, datetime.date)\n\nvalidators = defaultvalidators.copy()  # this is a dictionary\nvalidators[date.tag] = date\nschema = yamale.make_schema('./schema.yaml', validators=validators)\n# then use `schema` as normal\n```\n\nexamples\n--------\n\n| :warning: ensure that your schema definitions come from internal or trusted sources. yamale does not protect against intentionally malicious schemas. |\n|:------------|\n\n### using keywords\n#### schema:\n```yaml\noptional: str(required=false)\noptional_min: int(min=1, required=false)\nmin: num(min=1.5)\nmax: int(max=100)\n```\n#### valid data:\n```yaml\noptional_min: 10\nmin: 1.6\nmax: 100\n```\n\n### includes and recursion\n#### schema:\n```yaml\ncustomera: include('customer')\ncustomerb: include('customer')\nrecursion: include('recurse')\n---\ncustomer:\n    name: str()\n    age: int()\n    custom: include('custom_type')\n\ncustom_type:\n    integer: int()\n\nrecurse:\n    level: int()\n    again: include('recurse', required=false)\n```\n#### valid data:\n```yaml\ncustomera:\n    name: bob\n    age: 900\n    custom:\n        integer: 1\ncustomerb:\n    name: jill\n    age: 1\n    custom:\n        integer: 3\nrecursion:\n    level: 1\n    again:\n        level: 2\n        again:\n            level: 3\n            again:\n                level: 4\n```\n\n### lists\n#### schema:\n```yaml\nlist_with_two_types: list(str(), include('variant'))\nquestions: list(include('question'))\n---\nvariant:\n  rsid: str()\n  name: str()\n\nquestion:\n  choices: list(include('choices'))\n  questions: list(include('question'), required=false)\n\nchoices:\n  id: str()\n```\n#### valid data:\n```yaml\nlist_with_two_types:\n  - 'some'\n  - rsid: 'rs123'\n    name: 'some snp'\n  - 'thing'\n  - rsid: 'rs312'\n    name: 'another snp'\nquestions:\n  - choices:\n      - id: 'id_str'\n      - id: 'id_str1'\n    questions:\n      - choices:\n        - id: 'id_str'\n        - id: 'id_str1'\n```\n\n### the data is a list of items without a keyword at the top level\n#### schema:\n```yaml\nlist(include('human'), min=2, max=2)\n\n---\nhuman:\n  name: str()\n  age: int(max=200)\n  height: num()\n  awesome: bool()\n```\n#### valid data:\n```yaml\n- name: bill\n  age: 26\n  height: 6.2\n  awesome: true\n\n- name: adrian\n  age: 23\n  height: 6.3\n  awesome: true\n```\n\nwriting tests\n-------------\nto validate yaml files when you run your program's tests use yamale's yamaletestcase\n\nexample:\n\n```python\nclass testyaml(yamaletestcase):\n    base_dir = os.path.dirname(os.path.realpath(__file__))\n    schema = 'schema.yaml'\n    yaml = 'data.yaml'\n    # or yaml = ['data-*.yaml', 'some_data.yaml']\n\n    def runtest(self):\n        self.asserttrue(self.validate())\n```\n\n`base_dir`: string path to prepend to all other paths. this is optional.\n\n`schema`: string of path to the schema file to use. one schema file per test case.\n\n`yaml`: string or list of yaml files to validate. accepts globs.\n\ndevelopers\n----------\n### testing\nyamale uses [tox](https://tox.readthedocs.org/en/latest/) to run its tests against multiple python\nversions. to run tests, first checkout yamale, install tox, then run `make test` in yamale's root\ndirectory. you may also have to install the correct python versions to test with as well.\n\nnote on python versions: `tox.ini` specifies the lowest and highest versions of python supported by\nyamale. unless your development environment is configured to support testing against multiple python\nversions, one or more of the test branches may fail. one method of enabling testing against multiple\nversions of python is to install `pyenv` and `tox-pyenv` and to use `pyenv install` and `pyenv local`\nto ensure that tox is able to locate appropriate pythons.\n\n### releasing\nyamale uses github actions to upload new tags to pypi.\nto release a new version:\n\n1. make a commit with the new version number in `yamale/version`.\n1. run tests for good luck.\n1. run `make release`.\n\ngithub actions will take care of the rest.\n\n\n",
  "docs_url": null,
  "keywords": "",
  "license": "mit",
  "name": "yamale",
  "package_url": "https://pypi.org/project/yamale/",
  "project_url": "https://pypi.org/project/yamale/",
  "project_urls": {
    "Homepage": "https://github.com/23andMe/Yamale"
  },
  "release_url": "https://pypi.org/project/yamale/4.0.4/",
  "requires_dist": [
    "pyyaml"
  ],
  "requires_python": ">=3.6",
  "summary": "a schema and validator for yaml.",
  "version": "4.0.4",
  "releases": [],
  "developers": [
    "blopker@23andme.com",
    "bo_lopker"
  ],
  "kwds": "yaml yamale yml yamaletestcase yamaleerror",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_yamale",
  "homepage": "https://github.com/23andme/yamale",
  "release_count": 43,
  "dependency_ids": [
    "pypi_pyyaml"
  ],
  "documentation_summary": "Yamale, developed by 23andMe, is a tool designed for schema creation and validation for YAML files. It requires Python 3.8 or higher and optionally PyYAML or ruamel.yaml for installation. Yamale allows users to validate YAML files against defined schemas through both command-line and API interfaces. It supports a wide range of validators for different data types and offers features like strict mode validation, custom validators, and the ability to handle recursion and includes within schemas. The project is open-source, licensed under MIT, and encourages contributions and feedback from the community.",
  "embedding": [
    -0.012604311108589172,
    -0.013548246584832668,
    -0.00023685138148721308,
    -0.03173287957906723,
    -0.02323746308684349,
    0.025028163567185402,
    -0.010945484042167664,
    -0.03406495600938797,
    -0.007069102954119444,
    -0.04119999334216118,
    0.015685981139540672,
    -0.012430793605744839,
    -0.003872910514473915,
    0.027207544073462486,
    -0.006170282140374184,
    -0.0055664414539933205,
    0.024320213124155998,
    -0.01942007802426815,
    0.02420916222035885,
    0.003831266425549984,
    0.038479238748550415,
    -0.010175066068768501,
    -0.00853706058114767,
    -0.012673717923462391,
    -0.019128568470478058,
    0.031371962279081345,
    0.029900535941123962,
    -0.03495336323976517,
    0.0024032173678278923,
    0.006482613738626242,
    0.041033416986465454,
    -0.027721155434846878,
    -0.023404039442539215,
    -0.0020423009991645813,
    -0.013131804764270782,
    -0.0038972031325101852,
    0.03742425516247749,
    0.0028838608413934708,
    0.014408892951905727,
    0.02409810945391655,
    0.0052228765562176704,
    -0.0017907005967572331,
    0.01761549711227417,
    -0.0268466267734766,
    -0.012007410638034344,
    0.020780455321073532,
    0.016921427100896835,
    -0.04755767434835434,
    -0.05494258180260658,
    -0.008641171269118786,
    0.03500889241695404,
    0.012118462473154068,
    0.012180928140878677,
    0.006333388853818178,
    -0.016282882541418076,
    0.007752761710435152,
    0.008092856034636497,
    -0.0008216053829528391,
    -0.013784229755401611,
    0.0014315193984657526,
    0.0042928229086101055,
    0.007183624431490898,
    -0.012493260204792023,
    0.011257815174758434,
    0.025514012202620506,
    -0.0075723035261034966,
    -0.015838677063584328,
    0.022571155801415443,
    -0.004504514392465353,
    -0.029567381367087364,
    0.020197436213493347,
    0.011903300881385803,
    0.00938382651656866,
    0.0028491574339568615,
    0.02556953951716423,
    -0.022473987191915512,
    -0.01836509257555008,
    0.0024760947562754154,
    -0.04014500975608826,
    -0.01151462085545063,
    0.02747129090130329,
    -0.012035173363983631,
    -0.011139823123812675,
    0.027554579079151154,
    0.01533894706517458,
    0.017129646614193916,
    -0.030400265008211136,
    0.00976556446403265,
    0.01120228972285986,
    -0.006041879300028086,
    0.0007075176108628511,
    0.002838746178895235,
    0.00032924945116974413,
    0.031483013182878494,
    -0.027748918160796165,
    0.03703557327389717,
    0.007155861705541611,
    0.015186251141130924,
    0.01665768027305603,
    -0.0023962766863405704,
    -0.005802425090223551,
    0.013971628621220589,
    -0.001950336736626923,
    -0.011556265875697136,
    -0.016046898439526558,
    -0.006204985547810793,
    -0.0010064014932140708,
    -0.020211318507790565,
    0.03722991421818733,
    -0.0067290086299180984,
    -0.026374660432338715,
    0.026249727234244347,
    0.014256197959184647,
    -0.04733557254076004,
    -0.012444674968719482,
    -0.008426009677350521,
    0.03087223321199417,
    -0.012347505427896976,
    -0.02419527992606163,
    0.023404039442539215,
    0.004383052233606577,
    0.005864891689270735,
    0.028817785903811455,
    -0.004504514392465353,
    0.02686050906777382,
    -0.017046358436346054,
    0.00881468877196312,
    -0.011799190193414688,
    -0.012271157465875149,
    -0.03256576508283615,
    0.02207142673432827,
    -6.127336382633075e-05,
    0.043476544320583344,
    0.003033085959032178,
    -0.011549324728548527,
    -0.007808287627995014,
    -0.00578507361933589,
    -0.002436185721307993,
    -0.016366170719265938,
    -0.031371962279081345,
    0.023098649457097054,
    0.028956599533557892,
    -0.02291819080710411,
    0.008550941944122314,
    -0.01040410902351141,
    0.01719905436038971,
    0.016588272526860237,
    0.0032204848248511553,
    -0.0237649567425251,
    0.002205407479777932,
    0.014617114327847958,
    -0.021141372621059418,
    -0.01996145397424698,
    0.016602154821157455,
    -0.0043414076790213585,
    0.03700781241059303,
    -0.010008489713072777,
    0.01427007932215929,
    -0.0062084561213850975,
    0.013458017259836197,
    -0.009189486503601074,
    0.017115766182541847,
    -0.03981185331940651,
    -0.017435038462281227,
    -0.036674659699201584,
    0.032121557742357254,
    0.028401345014572144,
    -0.02706873044371605,
    -0.04172748699784279,
    -0.009932141751050949,
    -0.009592046961188316,
    0.031066572293639183,
    -0.03228813782334328,
    0.0032603938598185778,
    -0.03450915962457657,
    -0.008453772403299809,
    0.006614487152546644,
    0.009057613089680672,
    -0.018073583021759987,
    0.0009604193619452417,
    0.00039366784039884806,
    0.009203367866575718,
    0.005538678728044033,
    0.034120481461286545,
    -0.033787328749895096,
    -0.011181467212736607,
    -0.02568059042096138,
    0.004164420068264008,
    0.022987598553299904,
    0.007107276935130358,
    0.02705484814941883,
    0.02705484814941883,
    -0.010702559724450111,
    -0.014630995690822601,
    -0.5765778422355652,
    -0.01847614347934723,
    -0.009585106745362282,
    -0.008682815358042717,
    -0.005545619409531355,
    0.007169743068516254,
    0.0034044133499264717,
    -0.006090464070439339,
    -0.016602154821157455,
    0.020003097131848335,
    -0.02322358265519142,
    0.033259835094213486,
    0.0052541098557412624,
    -0.004358759615570307,
    0.02219635806977749,
    -0.01774042844772339,
    0.023903770372271538,
    -0.04955659806728363,
    -0.017782073467969894,
    0.014297842048108578,
    -0.029317516833543777,
    0.03739649057388306,
    -0.0034877017606049776,
    -0.01092466153204441,
    -0.04161643609404564,
    0.0061286380514502525,
    0.005694844294339418,
    -0.015755388885736465,
    0.026388540863990784,
    0.02058611623942852,
    -0.03492560237646103,
    0.041866302490234375,
    -0.009043731726706028,
    -0.015325065702199936,
    0.045697569847106934,
    0.005604615435004234,
    -0.0016484162770211697,
    0.036563608795404434,
    -0.0033766506239771843,
    0.038784630596637726,
    -0.010188947431743145,
    0.002158557763323188,
    -0.004969540983438492,
    0.015644337981939316,
    0.018642719835042953,
    -0.01427007932215929,
    0.010744203813374043,
    0.02059999667108059,
    -0.002207142533734441,
    -0.014117383398115635,
    -0.02047506533563137,
    -0.02673557586967945,
    0.032649051398038864,
    -1.4911660400684923e-05,
    0.029872773215174675,
    0.01368011999875307,
    0.04405956342816353,
    -0.023473447188735008,
    -0.022224120795726776,
    0.011132882907986641,
    -0.0009873146191239357,
    0.016296762973070145,
    -0.005753840319812298,
    -0.03076118230819702,
    0.0015625250525772572,
    0.023695548996329308,
    0.003454733407124877,
    -0.012069877237081528,
    -0.020502828061580658,
    0.003081670729443431,
    0.011903300881385803,
    -0.004518395755439997,
    -0.014533826150000095,
    -0.02251563034951687,
    0.00056653463980183,
    0.043559834361076355,
    -6.750915053999051e-05,
    0.014950267970561981,
    0.007148921024054289,
    0.014165968634188175,
    0.01762937754392624,
    0.014894742518663406,
    0.002640936290845275,
    -0.030205925926566124,
    0.02408422902226448,
    -0.016102423891425133,
    -0.009078435599803925,
    -0.007981805130839348,
    0.017129646614193916,
    0.007128098979592323,
    0.022862665355205536,
    0.01613018661737442,
    -0.00954346265643835,
    -0.05108354985713959,
    0.014464418403804302,
    -0.003834736766293645,
    -0.026402423158288002,
    0.018934229388833046,
    0.026291372254490852,
    -0.03364851325750351,
    -0.00875222310423851,
    -0.031371962279081345,
    0.0037757407408207655,
    -0.006420147605240345,
    -0.017143528908491135,
    0.005184703040868044,
    -0.020863743498921394,
    0.022126952186226845,
    0.016366170719265938,
    -0.008301077410578728,
    0.041671961545944214,
    -0.04194958880543709,
    -0.03428705781698227,
    -0.017212936654686928,
    -0.020544471219182014,
    -0.036341503262519836,
    0.023487329483032227,
    0.010397168807685375,
    0.018614957109093666,
    -0.00966145470738411,
    0.01449218112975359,
    -0.009002087637782097,
    0.0046849725767970085,
    0.006062701344490051,
    -0.00456698052585125,
    0.004410814959555864,
    0.0070413402281701565,
    0.0007816963479854167,
    -0.021627221256494522,
    0.014089620672166348,
    -0.015963610261678696,
    0.007537600118666887,
    0.0358695387840271,
    -0.0302614513784647,
    0.02323746308684349,
    0.02345956675708294,
    0.007329379208385944,
    0.013451076112687588,
    -0.014047976583242416,
    0.003983961883932352,
    -0.0007170610479079187,
    -0.0035362865310162306,
    -0.01152156200259924,
    0.0039319065399467945,
    -0.02219635806977749,
    -0.0013369523221626878,
    -0.016616035252809525,
    -0.0065381391905248165,
    -0.0009127020603045821,
    0.018809296190738678,
    -0.039756327867507935,
    0.02259891852736473,
    -0.04233827069401741,
    0.0098210908472538,
    -0.039950668811798096,
    -0.023473447188735008,
    -0.006093934644013643,
    -0.022848784923553467,
    -0.022751614451408386,
    -0.021363474428653717,
    0.02526414766907692,
    0.02697155997157097,
    -0.01624123752117157,
    0.005833658389747143,
    -0.009682276286184788,
    0.00042706995736807585,
    -0.014464418403804302,
    0.015075200237333775,
    -0.00403601722791791,
    -0.015325065702199936,
    0.0022435812279582024,
    0.009939081966876984,
    -0.016796493902802467,
    0.001873989007435739,
    0.004587802570313215,
    0.02440350130200386,
    -0.017268462106585503,
    0.0005647994694299996,
    -0.04086684063076973,
    -0.00023598379630129784,
    -0.0037792110815644264,
    0.015574931167066097,
    -0.012715362012386322,
    -0.007218327838927507,
    0.013881400227546692,
    0.023751074448227882,
    -0.0031753701623529196,
    0.01858719438314438,
    -0.0022869606036692858,
    0.029789485037326813,
    -0.004098483361303806,
    0.004643328487873077,
    -0.0025455018039792776,
    0.012215632013976574,
    -0.024639485403895378,
    -0.0025940865743905306,
    0.0053582205437123775,
    0.010494338348507881,
    0.015894202515482903,
    0.011924122460186481,
    0.006545079872012138,
    0.008793867193162441,
    -0.00067281408701092,
    -0.026555117219686508,
    -0.010077896527945995,
    -0.01718517392873764,
    0.02644406631588936,
    -0.0015781417023390532,
    0.002864773850888014,
    0.00033467187313362956,
    0.014783690683543682,
    -0.024667248129844666,
    -0.04353206977248192,
    0.01220175065100193,
    0.015658218413591385,
    0.02184932306408882,
    0.0014523414429277182,
    0.008821629919111729,
    -0.014950267970561981,
    0.00475090928375721,
    0.016504984349012375,
    -0.00332980090752244,
    0.009793327189981937,
    -0.00554214883595705,
    0.01919797621667385,
    0.045364413410425186,
    0.010716441087424755,
    0.008391305804252625,
    -0.004150538705289364,
    -0.040283821523189545,
    -0.0007474266458302736,
    0.014395011588931084,
    0.015727626159787178,
    0.001398551044985652,
    0.02366778627038002,
    0.0034044133499264717,
    0.04555875435471535,
    -0.015408353880047798,
    0.01151462085545063,
    -0.026568999513983727,
    0.0019937159959226847,
    0.006253570783883333,
    0.024278568103909492,
    -0.0053755720146000385,
    0.026568999513983727,
    0.0038069740403443575,
    0.011910241097211838,
    0.00817614421248436,
    -0.010674796998500824,
    0.014054917730391026,
    -0.015588812530040741,
    0.014950267970561981,
    0.005857950542122126,
    -0.011160645633935928,
    -0.0008029522141441703,
    0.0015234836610034108,
    0.008092856034636497,
    0.018434498459100723,
    0.016185712069272995,
    -0.009633691981434822,
    0.019253501668572426,
    0.012264217250049114,
    -0.018295684829354286,
    0.0390622578561306,
    0.03545309603214264,
    -0.034453634172677994,
    -0.012500200420618057,
    -0.04161643609404564,
    0.019892046228051186,
    -0.03417600691318512,
    -0.037202153354883194,
    -0.014367248862981796,
    -0.02312641218304634,
    -0.018018057569861412,
    -0.013652357272803783,
    0.01654662936925888,
    -0.009314419701695442,
    0.026666169986128807,
    -0.0027918964624404907,
    0.0062396894209086895,
    -0.04869595170021057,
    -0.022140832617878914,
    0.03270457684993744,
    0.00917560514062643,
    0.0048446087166666985,
    -0.015658218413591385,
    -0.03228813782334328,
    0.008460713550448418,
    0.002436185721307993,
    0.00485154939815402,
    0.006434028968214989,
    0.025347435846924782,
    0.0012068141950294375,
    0.0016744438325986266,
    -0.010619270615279675,
    0.032732341438531876,
    0.03503665328025818,
    -0.018545551225543022,
    -0.005507445428520441,
    0.003525875508785248,
    0.007718058302998543,
    0.005000774282962084,
    -0.02028072439134121,
    -0.0040915426798164845,
    0.03945093974471092,
    -0.03958975151181221,
    -0.009890497662127018,
    -0.009196427650749683,
    -0.006999696139246225,
    0.0004507116973400116,
    0.0050146556459367275,
    0.025291910395026207,
    -0.0063195074908435345,
    -0.005750369746237993,
    0.012097639963030815,
    0.0019711588975042105,
    0.010640093125402927,
    -0.0004897531471215189,
    0.010667855851352215,
    -0.02738800272345543,
    0.00317016476765275,
    -0.04616953432559967,
    -0.0005331325228326023,
    0.005660140886902809,
    0.026791101321578026,
    0.013353906571865082,
    0.02556953951716423,
    0.012055995874106884,
    -0.012625133618712425,
    -0.01742115616798401,
    -0.022557275369763374,
    -0.009307478554546833,
    -0.012423853389918804,
    -0.0011139822890982032,
    -0.01646334119141102,
    0.009751683101058006,
    0.031788405030965805,
    0.03606387600302696,
    0.023528972640633583,
    0.010869136080145836,
    0.013180389069020748,
    0.009120079688727856,
    -0.002052712021395564,
    0.0150196747854352,
    0.010876077227294445,
    -0.00044246960896998644,
    0.014117383398115635,
    0.023820482194423676,
    0.05571993812918663,
    -0.001307454309426248,
    0.021085847169160843,
    0.020752692595124245,
    -0.0010202828561887145,
    -0.00011191878729732707,
    -0.01002237107604742,
    0.013284499756991863,
    0.0162273570895195,
    -0.002344221342355013,
    -0.027748918160796165,
    0.02315417490899563,
    0.00677065271884203,
    0.031149862334132195,
    -0.002755457768216729,
    0.015255658887326717,
    0.03492560237646103,
    -0.0026739046443253756,
    -0.00014315193402580917,
    0.0026704343035817146,
    -0.018601076677441597,
    -0.022043662145733833,
    -0.04011724516749382,
    -0.0007782260072417557,
    0.016269000247120857,
    -0.02887331135571003,
    0.013929984532296658,
    0.006218867376446724,
    -0.02652735449373722,
    -0.034453634172677994,
    0.0456698052585125,
    -0.004920956213027239,
    -0.00821778830140829,
    -0.009758624248206615,
    -0.025236384943127632,
    -0.019503366202116013,
    0.017573852092027664,
    -0.013131804764270782,
    0.025736115872859955,
    -0.005340868607163429,
    0.0010610595345497131,
    0.018948111683130264,
    -0.03142748773097992,
    0.02898436225950718,
    -0.049278970807790756,
    0.012680659070611,
    -0.0010931602446362376,
    -0.023431802168488503,
    -0.011299459263682365,
    -0.015477760694921017,
    -0.01458935160189867,
    -0.008717519231140614,
    0.002656552940607071,
    -0.016532747074961662,
    0.0018132578115910292,
    -0.011799190193414688,
    0.00570178497582674,
    -0.020849863067269325,
    -0.007870753295719624,
    -0.005830187816172838,
    -0.016269000247120857,
    -0.019892046228051186,
    0.009272775612771511,
    0.009696157649159431,
    -0.0027537227142602205,
    0.02430633082985878,
    0.004955659620463848,
    0.009696157649159431,
    -0.00042706995736807585,
    -0.033676277846097946,
    0.0025940865743905306,
    0.01099406834691763,
    0.006527728401124477,
    -0.001950336736626923,
    -0.00576078100129962,
    -0.01018200721591711,
    -0.0007608742453157902,
    -0.033592987805604935,
    -0.029567381367087364,
    0.007947101257741451,
    -0.008530120365321636,
    0.0053269872441887856,
    -0.005431097932159901,
    0.03120538778603077,
    0.001775084063410759,
    -0.0042130048386752605,
    0.0025524424854665995,
    -0.02069716714322567,
    -0.016949189826846123,
    0.018226278945803642,
    -0.017907006666064262,
    -0.011181467212736607,
    -0.004789082799106836,
    0.031483013182878494,
    -0.003008793340995908,
    -0.005545619409531355,
    0.014533826150000095,
    -0.03811832517385483,
    0.032760102301836014,
    0.031483013182878494,
    -0.008779985830187798,
    0.033926140516996384,
    -0.010140362195670605,
    0.004476751666516066,
    0.0027693393640220165,
    0.026610644534230232,
    0.021696629002690315,
    0.0042442381381988525,
    -0.025222504511475563,
    -0.03870134428143501,
    -0.022779377177357674,
    -0.0019399255979806185,
    -0.005871832370758057,
    0.01812910847365856,
    -0.008391305804252625,
    0.0016085072420537472,
    0.010188947431743145,
    0.0021568224765360355,
    -0.01961441896855831,
    -0.037507541477680206,
    -0.013596830889582634,
    -0.031177625060081482,
    -0.03076118230819702,
    0.01258348859846592,
    0.012590429745614529,
    0.022002018988132477,
    -0.003800033126026392,
    0.013194270431995392,
    -0.008710578083992004,
    -0.01072338130325079,
    -0.006187634076923132,
    0.01867048256099224,
    0.0014141675783321261,
    0.018712127581238747,
    0.02940080501139164,
    0.03611940145492554,
    0.004580861888825893,
    0.004459399729967117,
    0.027027085423469543,
    0.00554214883595705,
    0.0103416433557868,
    0.0057364883832633495,
    -0.03142748773097992,
    -0.002725959988310933,
    -0.019073043018579483,
    0.017435038462281227,
    0.0025715292431414127,
    0.032426949590444565,
    0.005556030198931694,
    -0.021058084443211555,
    -0.022529512643814087,
    0.01985040120780468,
    0.013090159744024277,
    0.0019937159959226847,
    -0.024375738576054573,
    -0.01284029521048069,
    -0.006281333509832621,
    0.02007250487804413,
    0.013305322267115116,
    0.008641171269118786,
    -0.0004164419951848686,
    -0.021044202148914337,
    0.010209769941866398,
    -0.02516697719693184,
    0.03239918872714043,
    0.01458935160189867,
    -0.003602223237976432,
    -0.009571225382387638,
    0.025972099974751472,
    0.02153005078434944,
    0.0715169757604599,
    -0.006246630102396011,
    0.0009482731111347675,
    -0.019919808954000473,
    -0.0009465379407629371,
    0.006815767381340265,
    0.014755927957594395,
    0.021918730810284615,
    0.0046225059777498245,
    0.0024535374250262976,
    -0.027304714545607567,
    0.042504847049713135,
    -0.005910005886107683,
    0.005715666338801384,
    0.034425873309373856,
    -0.0666862428188324,
    -0.007232209201902151,
    -0.01728234253823757,
    -0.011105120182037354,
    -0.030622368678450584,
    -0.010077896527945995,
    0.00045851999311707914,
    0.03364851325750351,
    0.013242855668067932,
    -0.018087463453412056,
    0.008405188098549843,
    0.0002897742378991097,
    -0.01427007932215929,
    0.03695228695869446,
    -0.0017325722146779299,
    0.014339486137032509,
    0.04839055985212326,
    0.007495956029742956,
    -0.02780444361269474,
    0.015588812530040741,
    -0.004115835297852755,
    -0.010681737214326859,
    0.02357061766088009,
    0.005344339180737734,
    -0.0025333554949611425,
    -0.00047977588837966323,
    0.017851481214165688,
    -0.0298172477632761,
    -0.008738340809941292,
    -0.033370885998010635,
    0.006527728401124477,
    0.026194201782345772,
    0.03237142413854599,
    -0.03439810872077942,
    0.0018132578115910292,
    -0.00735020125284791,
    0.0044038742780685425,
    -0.003326330566778779,
    0.0034148243721574545,
    -0.006513847038149834,
    -0.029872773215174675,
    -0.00379309244453907,
    0.045059025287628174,
    0.014686521142721176,
    0.0037202152889221907,
    0.021488407626748085,
    -0.016046898439526558,
    -0.0002375020703766495,
    -0.022626681253314018,
    -0.03184393048286438,
    0.015477760694921017,
    0.046530451625585556,
    0.054914817214012146,
    -0.005219406448304653,
    0.001432386925444007,
    0.01603301614522934,
    0.010390227660536766,
    -0.0012475908733904362,
    -0.010043192654848099,
    0.01060538925230503,
    0.03800727427005768,
    -0.012069877237081528,
    0.017657140269875526,
    0.007135039661079645,
    -0.0070101069286465645,
    -0.005680962931364775,
    0.006066171918064356,
    -0.01140356995165348,
    0.008585645817220211,
    -0.004806434735655785,
    -0.0009664924582466483,
    0.01940619759261608,
    -0.005639318842440844,
    -0.02472277358174324,
    0.0021065024193376303,
    -0.0034148243721574545,
    0.0004149237065576017,
    -0.005469271447509527,
    0.01876765303313732,
    0.030094875022768974,
    -0.008502357639372349,
    -0.029012124985456467,
    0.006232748739421368,
    -0.0302614513784647,
    0.023098649457097054,
    0.012666777707636356,
    -0.020780455321073532,
    -0.009723920375108719,
    0.02208530716598034,
    -0.011028772220015526,
    0.02513921447098255,
    -0.01678261160850525,
    -0.012222572229802608,
    -0.029345279559493065,
    0.004660679958760738,
    -0.00869669672101736,
    -0.008884095586836338,
    0.007013577502220869,
    0.007093395572155714,
    -0.04339325800538063,
    -0.0018479613354429603,
    -0.0061286380514502525,
    0.044725868850946426,
    -0.005444979295134544,
    -0.023820482194423676,
    -0.008002626709640026,
    -0.005868361797183752,
    0.020766574889421463,
    -0.031677354127168655,
    -0.0033454173244535923,
    0.008877155371010303,
    -0.026346897706389427,
    0.0016614299966022372,
    -3.524574276525527e-05,
    0.0003728457377292216,
    0.005986353848129511,
    0.057580046355724335,
    0.0001629979960853234,
    0.016324525699019432,
    -0.026680050417780876,
    -0.027651749551296234,
    0.009328301064670086,
    -0.005639318842440844,
    0.010938542895019054,
    0.017559971660375595,
    0.01311098225414753,
    -0.0032864215318113565,
    -0.010147303342819214,
    -0.012160106562077999,
    -0.0004203461285214871,
    -0.01961441896855831,
    0.02525026723742485,
    0.017004715278744698,
    0.0011885948479175568,
    0.015533286146819592,
    -0.027221424505114555,
    0.005340868607163429,
    -0.006357681006193161,
    -0.01140356995165348,
    -0.0235428549349308,
    -0.0418107770383358,
    -0.0363137423992157,
    0.02959514409303665,
    0.013569068163633347,
    0.002429245039820671,
    -0.033259835094213486,
    -0.005316575989127159,
    -0.011924122460186481,
    -0.033065494149923325,
    -0.024153636768460274,
    0.020100267603993416,
    0.0010549863800406456,
    0.02386212721467018,
    0.026249727234244347,
    0.03575848788022995,
    -0.0001125694761867635,
    0.0388401560485363,
    -0.03281562775373459,
    -0.018864821642637253,
    -0.005247169174253941,
    -0.00037956953747197986,
    0.004285882227122784,
    -0.025028163567185402,
    -0.016588272526860237,
    -0.002451802371069789,
    0.01200047042220831,
    0.00015692488523200154,
    -0.010987128131091595,
    0.0539153590798378,
    -0.0046363878063857555,
    -0.027110373601317406,
    0.003827796084806323,
    -0.013576009310781956,
    -0.01347883976995945,
    -0.017240699380636215,
    0.01395080704241991,
    -0.015186251141130924,
    -0.007863813079893589,
    -0.020835980772972107,
    0.0068192374892532825,
    0.011146764270961285,
    0.005007714964449406,
    0.0005556897958740592,
    -0.03214932233095169,
    0.02842910774052143,
    -0.0013846696820110083,
    -0.009258893318474293,
    -0.019905926659703255,
    -0.023709431290626526,
    0.025444606319069862,
    -0.0018635779852047563,
    0.00886327400803566,
    0.03989514335989952,
    -0.014506062492728233,
    -0.001048913225531578,
    -0.0003995240549556911,
    0.016324525699019432,
    -0.039534226059913635,
    0.010709499940276146,
    0.01922573894262314,
    -0.02336239628493786,
    -0.0015243511879816651,
    -0.021932611241936684,
    0.04572533071041107,
    -0.01136192586272955,
    0.004896663594990969,
    0.0009048937354236841,
    -0.028956599533557892,
    -0.02738800272345543,
    0.006322977598756552,
    0.030205925926566124,
    -0.016296762973070145,
    0.00986273493617773,
    0.005667081568390131,
    0.021030321717262268,
    0.005510915536433458,
    -0.024111991748213768,
    -0.011820011772215366,
    -0.0046363878063857555,
    0.02218247763812542,
    -0.022446224465966225,
    -0.02004474215209484,
    -0.024361856281757355,
    0.006250100210309029,
    0.008509297855198383,
    -0.02334851399064064,
    -0.00881468877196312,
    0.19378434121608734,
    0.022473987191915512,
    0.03556414693593979,
    0.017684902995824814,
    0.01060538925230503,
    -0.007079513743519783,
    0.014783690683543682,
    0.012215632013976574,
    -0.013416373170912266,
    0.023695548996329308,
    -0.016491103917360306,
    -0.01544999796897173,
    -0.0009638897026889026,
    0.0037410373333841562,
    0.014880861155688763,
    -0.007593125570565462,
    -0.026555117219686508,
    -0.0297061949968338,
    -0.012715362012386322,
    -0.004855019506067038,
    -0.004258119501173496,
    -0.012403030879795551,
    -0.040700264275074005,
    -0.0356474332511425,
    0.022113069891929626,
    0.003938847221434116,
    0.006531198509037495,
    -0.015894202515482903,
    0.01719905436038971,
    0.010286116972565651,
    -0.012750065885484219,
    -0.010015429928898811,
    -0.009994608350098133,
    -0.019808758050203323,
    -0.034009430557489395,
    -0.018101345747709274,
    -0.0001053034357028082,
    -0.023168057203292847,
    0.03234366327524185,
    0.021280186250805855,
    0.009710039012134075,
    -0.046114008873701096,
    0.001125260954722762,
    -0.022113069891929626,
    0.015949727967381477,
    -0.015755388885736465,
    -0.012028233148157597,
    -0.005653200205415487,
    -0.004459399729967117,
    0.02059999667108059,
    -0.03164959326386452,
    0.00970309879630804,
    0.02293207310140133,
    0.008460713550448418,
    0.026457948610186577,
    -0.009571225382387638,
    -0.006548550445586443,
    0.014103502035140991,
    0.0022487868554890156,
    -0.005042418371886015,
    -0.003713274374604225,
    0.02505592629313469,
    -0.008897976949810982,
    0.023168057203292847,
    -0.044947974383831024,
    0.019864283502101898,
    -0.051222365349531174,
    -0.02355673536658287,
    0.014193731360137463,
    -0.0026392012368887663,
    -0.0016544893151149154,
    -0.003675100626423955,
    -0.004719675984233618,
    -0.008925740607082844,
    -0.028734497725963593,
    -0.03736872971057892,
    0.04125551879405975,
    0.017698785290122032,
    0.000229910685447976,
    0.017559971660375595,
    -0.02769339270889759,
    0.01729622483253479,
    0.00229563657194376,
    0.011035713367164135,
    7.613080379087478e-05,
    -0.014880861155688763,
    0.015949727967381477,
    -0.021169135347008705,
    -0.012132343836128712,
    -0.06141131371259689,
    -0.017115766182541847,
    -0.03076118230819702,
    0.010577626526355743,
    -0.005913476459681988,
    0.000969095213804394,
    0.0072113871574401855,
    0.0025177388451993465,
    0.009751683101058006,
    -0.0005439773667603731,
    -0.016088541597127914,
    -0.05774662271142006,
    0.028082072734832764,
    0.012437734752893448,
    0.026874389499425888,
    -0.011584028601646423,
    0.020016979426145554,
    -0.0034877017606049776,
    0.021738272160291672,
    -0.0018063171301037073,
    -0.02665228769183159,
    -0.007801346946507692,
    -0.024750536307692528,
    0.010077896527945995,
    -0.016824256628751755,
    0.01077196653932333,
    -0.010917721316218376,
    0.004497573710978031,
    -0.001657092128880322,
    0.009036791510879993,
    0.009480996057391167,
    -0.004171360749751329,
    -0.005667081568390131,
    0.005288813263177872,
    -0.004310174845159054,
    -0.011077357456088066,
    -0.018115226179361343,
    -0.05685821548104286,
    0.017754310742020607,
    -0.0056254374794662,
    0.003945787902921438,
    -0.00703092897310853,
    0.0018705186666920781,
    0.026069268584251404,
    0.011174526996910572,
    0.00403601722791791,
    -0.0223906971514225,
    -0.0002474793291185051,
    -0.009245011955499649,
    0.004206064157187939,
    -0.016393933445215225,
    -0.019392315298318863,
    0.018434498459100723,
    0.013131804764270782,
    -0.00853706058114767,
    0.007225268520414829,
    -0.008099797181785107,
    -0.014339486137032509,
    0.017268462106585503,
    -0.013506602495908737,
    -0.016935307532548904,
    -0.01533894706517458,
    0.0013499661581590772,
    0.004320585634559393,
    -0.032010506838560104,
    0.0014905153075233102,
    -0.038618054240942,
    -0.01347883976995945,
    -0.012444674968719482,
    0.0013846696820110083,
    -0.001109644421376288,
    -0.03484231233596802,
    -0.005733018275350332,
    -0.012874998152256012,
    -0.014020213857293129,
    -0.00791239831596613,
    -0.014179849997162819,
    -0.17457248270511627,
    0.008786926046013832,
    -0.008259433321654797,
    -0.0418107770383358,
    0.009793327189981937,
    0.010438812896609306,
    0.015685981139540672,
    -0.01579703390598297,
    -0.013735645450651646,
    -0.0180458202958107,
    0.021946493536233902,
    -0.029650669544935226,
    -0.023959295824170113,
    -0.02355673536658287,
    -0.009834972210228443,
    0.011139823123812675,
    0.01844838075339794,
    -0.00859258696436882,
    0.05166656896471977,
    0.003052172716706991,
    0.033592987805604935,
    -0.0180458202958107,
    0.011757546104490757,
    0.015602693893015385,
    0.006298685446381569,
    -0.025861047208309174,
    -0.00897432491183281,
    -0.0006376767996698618,
    -0.002109972760081291,
    -0.005899595096707344,
    -0.011285577900707722,
    -0.0008962178835645318,
    0.03120538778603077,
    0.003173635108396411,
    0.007801346946507692,
    0.010119540616869926,
    -0.002675639931112528,
    -0.009807209484279156,
    -0.026180319488048553,
    -0.006583253853023052,
    0.010029311291873455,
    0.03331536054611206,
    0.02951185591518879,
    -0.009668394923210144,
    -0.014478299766778946,
    0.019378434866666794,
    0.012173987925052643,
    -0.029789485037326813,
    0.03234366327524185,
    -0.032010506838560104,
    0.025541774928569794,
    -0.010105659253895283,
    0.0034148243721574545,
    0.0009326565777882934,
    0.030650131404399872,
    0.025000400841236115,
    0.006590194534510374,
    0.01438113022595644,
    0.001140877604484558,
    -0.014936386607587337,
    -0.0014931181212887168,
    -0.015394472517073154,
    0.020572233945131302,
    0.005604615435004234,
    0.0008493681671097875,
    -0.003055643057450652,
    -0.026166439056396484,
    0.038784630596637726,
    -0.020849863067269325,
    0.025736115872859955,
    0.006354210898280144,
    0.007551481481641531,
    0.008627289906144142,
    -0.028484633192420006,
    0.019711587578058243,
    0.009828031063079834,
    -0.015352828428149223,
    0.016491103917360306,
    0.02865120954811573,
    -0.031566303223371506,
    -0.017698785290122032,
    0.022668326273560524,
    0.0035779308527708054,
    0.0004988628206774592,
    0.01962829940021038,
    0.005989823956042528,
    8.984952728496864e-05,
    -0.009585106745362282,
    0.0017273667035624385,
    0.001102703739888966,
    0.02048894576728344,
    -0.007898516952991486,
    -0.008641171269118786,
    -0.023834364488720894,
    -0.00901596900075674,
    0.011500739492475986,
    0.0032621289137750864,
    0.0003804371226578951,
    0.003090346697717905,
    -0.03151077777147293,
    0.005056299734860659,
    0.016102423891425133,
    -0.0395064651966095,
    -0.008578705601394176,
    0.02697155997157097,
    0.01490862388163805,
    -0.0195311289280653,
    0.021821560338139534,
    0.020627759397029877,
    0.011063476093113422,
    0.006090464070439339,
    0.02283490262925625,
    0.03076118230819702,
    0.014131264761090279,
    -0.013340025208890438,
    -0.0013846696820110083,
    0.00785687193274498,
    -0.017351750284433365,
    0.014728165231645107,
    -0.016310645267367363,
    0.01374258566647768,
    -0.0007634770008735359,
    -0.0009127020603045821,
    0.020655523985624313,
    -0.0027728097047656775,
    -0.012770887464284897,
    -0.0966145470738411,
    -0.019031399860978127,
    -0.0006229277933016419,
    0.004445518366992474,
    -0.0025229444727301598,
    -0.016060778871178627,
    0.003518934827297926,
    0.05574770271778107,
    -0.003970080520957708,
    0.02336239628493786,
    -0.01718517392873764,
    -0.0025524424854665995,
    -0.02007250487804413,
    0.015894202515482903,
    -0.03278786689043045,
    0.009994608350098133,
    -0.033787328749895096,
    0.0064895544201135635,
    -0.036674659699201584,
    0.009272775612771511,
    -0.0026270549278706312,
    0.009675336070358753,
    0.005420686677098274,
    -0.001243252889253199,
    0.0019520719069987535,
    0.016838138923048973,
    -0.03481455147266388,
    -0.0006207588594406843,
    0.00011056318180635571,
    0.029123177751898766,
    0.004199123475700617,
    -0.039423175156116486,
    -0.021724391728639603,
    0.012014351785182953,
    0.03239918872714043,
    0.0053582205437123775,
    -0.009911319240927696,
    -0.011590968817472458,
    0.03661913424730301,
    -0.0010037986794486642,
    0.007593125570565462,
    -0.012333624064922333,
    0.012132343836128712,
    -0.007246090564876795,
    0.006874763406813145,
    -0.014152087271213531,
    0.0063195074908435345,
    0.022446224465966225,
    0.014353367500007153,
    -0.04528112709522247,
    0.0006637044134549797,
    -0.012007410638034344,
    -0.026402423158288002,
    0.007544540800154209,
    0.013201211579144001,
    -0.00998072698712349,
    0.0010749408975243568,
    0.005632378160953522,
    -4.3684385673259385e-06,
    -0.010535982437431812,
    -0.00291856424883008,
    0.011764486320316792,
    -0.007103806361556053,
    0.013964688405394554,
    0.006309096235781908,
    0.004219945520162582,
    -0.00854400172829628,
    -0.002144676400348544,
    0.017462801188230515,
    -0.022432342171669006,
    -0.011528502218425274,
    0.008967384696006775,
    -0.015685981139540672,
    0.003515464486554265,
    -0.006052290555089712,
    0.00560114486142993,
    -0.01985040120780468,
    0.0012632074067369103,
    0.004424696322530508,
    -0.010064015164971352,
    -0.015880322083830833,
    -0.003439116757363081,
    -0.022557275369763374,
    0.005233287811279297,
    0.0023286049254238605,
    0.0266245249658823,
    0.01018200721591711,
    0.004584332462400198,
    0.018753770738840103,
    -0.035508621484041214,
    0.035814013332128525,
    -0.0031181094236671925,
    0.04528112709522247,
    -0.0016371376113966107,
    -0.017879243940114975,
    0.006843530107289553,
    -0.0033992077223956585,
    -0.009828031063079834,
    -0.01018200721591711,
    -0.0013655826915055513,
    -0.04072802886366844,
    -0.012493260204792023,
    -0.0759034976363182,
    0.006361151579767466,
    0.008884095586836338,
    -0.010820550844073296,
    0.012354445643723011,
    -0.0166715607047081,
    -0.0012857646215707064,
    -0.008509297855198383,
    -0.008398246951401234,
    0.008946562185883522,
    -0.02218247763812542,
    0.0007036134484224021,
    -0.0013178654480725527,
    -0.007069102954119444,
    0.006041879300028086,
    -0.016046898439526558,
    0.03753530606627464,
    0.007613948080688715,
    0.02917870320379734,
    0.006905996240675449,
    0.02736023999750614,
    0.013576009310781956,
    6.496061541838571e-05,
    0.03689676150679588,
    -0.014082680456340313,
    -0.014103502035140991,
    -0.01879541575908661,
    0.004504514392465353,
    -0.0031198447104543447,
    -0.013395550660789013,
    0.001235444564372301,
    -0.024542314931750298,
    0.005642788950353861,
    0.011875537224113941,
    0.02643018588423729,
    0.006364621687680483,
    -0.003215279197320342,
    -0.019822638481855392,
    0.028623446822166443,
    0.006145989987999201,
    0.00960592832416296,
    -0.015672100707888603,
    0.0105637451633811,
    8.968685870058835e-05,
    -0.009057613089680672,
    -0.0004335768462624401,
    -0.003876380855217576,
    0.005181232467293739,
    0.0012293715262785554,
    -0.009071494452655315,
    0.051416706293821335,
    0.0059759425930678844,
    -0.008363543078303337,
    -0.03500889241695404,
    -0.004355289041996002,
    -0.007086454890668392,
    0.012326682917773724,
    -0.00954346265643835,
    -0.0024674187880009413,
    -0.0119935292750597,
    0.04403179883956909,
    0.007266913075000048,
    -0.009300538338720798,
    0.0035137294325977564,
    -0.025861047208309174,
    -0.008439891040325165,
    -0.022626681253314018,
    -0.017754310742020607,
    -0.014561588875949383,
    -0.021821560338139534,
    -0.021474525332450867,
    -0.004900134168565273,
    0.012979108840227127,
    0.022321291267871857,
    0.0150196747854352,
    -0.004858490079641342,
    -0.0180458202958107,
    -0.0070101069286465645,
    -0.04330996796488762,
    0.01962829940021038,
    0.03448139876127243,
    -0.014408892951905727,
    0.009321359917521477,
    0.003112904028967023,
    0.008530120365321636,
    -0.02240457944571972,
    -0.01879541575908661,
    -0.009161723777651787,
    0.0044038742780685425,
    0.012590429745614529,
    0.006420147605240345,
    0.005451919976621866,
    -0.0019555422477424145,
    0.004268530290573835,
    0.011230052448809147,
    -0.005136117804795504,
    0.023320751264691353,
    -0.024861587211489677,
    0.03459244966506958,
    -0.00719056511297822,
    0.012659836560487747,
    -0.02227964624762535,
    0.0019208387238904834,
    -0.01327061839401722,
    -0.000520552508533001,
    -0.008724459446966648,
    -0.04392074793577194,
    -0.00459127314388752,
    0.013513542711734772,
    0.024861587211489677,
    0.0221685953438282,
    -0.020183555781841278,
    -0.007412667386233807,
    0.02928975410759449,
    -0.01533894706517458,
    0.020350132137537003,
    0.009807209484279156,
    0.0007968791178427637,
    0.0141104431822896,
    0.002071799011901021,
    -0.0027155489660799503,
    -0.01374952681362629,
    0.05605309456586838,
    -0.013825874775648117,
    0.00641667703166604,
    0.013076278381049633,
    0.01538059115409851,
    -0.014547707512974739,
    -0.0017082798294723034,
    -0.01942007802426815,
    -0.003013998968526721,
    -0.01911468803882599,
    -0.03589729964733124,
    -0.01374952681362629,
    -0.020252961665391922,
    0.0062084561213850975,
    0.021377356722950935,
    -0.011757546104490757,
    -0.022959835827350616,
    0.08123395591974258,
    0.0014419304206967354,
    -0.004650269169360399,
    0.023168057203292847,
    0.013645416125655174,
    0.02026684395968914,
    0.015533286146819592,
    -0.008412128314375877,
    -0.027568459510803223,
    -0.03714662790298462,
    0.005628907587379217,
    -0.007100336253643036,
    -0.01983652077615261,
    -0.02547236904501915,
    -0.0051257070153951645,
    0.021266303956508636,
    -0.015866439789533615,
    0.020502828061580658,
    -0.007364082615822554,
    -0.016713205724954605,
    0.03470350056886673,
    0.012534904293715954,
    0.0010029311524704099,
    -0.0041817715391516685,
    0.0030469673220068216,
    0.0012111521791666746,
    0.041033416986465454,
    0.029095415025949478,
    0.014880861155688763,
    -0.024639485403895378,
    0.024139754474163055,
    -0.006364621687680483,
    -0.007995686493813992,
    -0.01390222180634737,
    -0.02016967348754406,
    0.0023164586164057255,
    0.018545551225543022,
    0.011875537224113941,
    -0.0026079679373651743,
    0.01718517392873764,
    -0.01919797621667385,
    -0.018601076677441597,
    -0.015588812530040741,
    -0.03012263774871826,
    0.00039193264092318714,
    0.00408807210624218,
    0.017795953899621964,
    0.011896359734237194,
    -0.03967304155230522
  ]
}
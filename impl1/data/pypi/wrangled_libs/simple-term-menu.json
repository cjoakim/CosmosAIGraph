{
  "classifiers": [
    "development status :: 5 - production/stable",
    "environment :: console",
    "license :: osi approved :: mit license",
    "operating system :: macos",
    "operating system :: posix :: linux",
    "programming language :: python",
    "programming language :: python :: 3",
    "programming language :: python :: 3 :: only",
    "programming language :: python :: 3.3",
    "programming language :: python :: 3.4",
    "programming language :: python :: 3.5",
    "programming language :: python :: 3.6",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "topic :: terminals",
    "topic :: utilities"
  ],
  "description": "# simple terminal menu\n\n## overview\n\n`simple-term-menu` creates simple menus for interactive command line programs. it can be used to offer a choice of\ndifferent options to the user. menu entries can be selected with the arrow, j/k, or emacs (c-n/c-p) keys. the module\nuses the terminfo database to detect terminal features automatically and disables styles that are not available.\ncurrently, linux and macos are supported.\n\n## breaking changes\n\n### from version 0.x to 1.x\n\nif you update from version 0.x to 1.x, please consider these breaking changes:\n\n- the `terminalmenu` constructor now only takes keyword-only arguments (except for the first parameter which contains\n  the menu entries). this makes it easier to add new parameters in future releases and allows to keep a well-arranged\n  parameter list.\n\n- the command line interface was revised. it now uses `-` instead of `_` to separate words consistently and rearranges\n  short options. only the most important short options were kept to save free letters for future releases.\n\n### from version 1.1 to 1.2\n\n- the `multi_select_key` parameter is now named `multi_select_keys` and takes an iterable of keys and by default `space`\n  and`tab` are now used as multi-select keys. this allows to toggle selected items in search mode.\n\n- the `shortcut_parentheses_highlight_style` parameter is renamed to `shortcut_brackets_highlight_style` to be more\n  consistent with the new `multi_select_cursor_brackets_style` parameter.\n\n## installation\n\n`simple-term-menu` is available on pypi for python 3.5+ and can be installed with `pip`:\n\n```bash\npython3 -m pip install simple-term-menu\n```\n\nif you use arch linux or one of its derivatives, you can also install `simple-term-menu` from the\n[aur](https://aur.archlinux.org/packages/python-simple-term-menu/):\n\n```bash\nyay -s python-simple-term-menu\n```\n\nyou also find self-contained executables for 64-bit linux distributions and macos high sierra and newer on the\n[releases page](https://github.com/ingomeyer441/simple-term-menu/releases/latest). they are created with\n[pyinstaller](http://www.pyinstaller.org) and only require glibc >= 2.17 on linux (should be fine on any recent\nlinux system).\n\n## usage\n\n### create a menu with the default style\n\ncreate an instance of the class `terminalmenu` and pass the menu entries as a list of strings to the constructor. call\nthe `show` method to output the menu and wait for keyboard input:\n\n```python\n#!/usr/bin/env python3\n\nfrom simple_term_menu import terminalmenu\n\ndef main():\n    options = [\"entry 1\", \"entry 2\", \"entry 3\"]\n    terminal_menu = terminalmenu(options)\n    menu_entry_index = terminal_menu.show()\n    print(f\"you have selected {options[menu_entry_index]}!\")\n\nif __name__ == \"__main__\":\n    main()\n```\n\nyou will get an output like:\n\n![screenshot_basic](https://raw.githubusercontent.com/ingomeyer441/simple-term-menu/master/basic.png)\n\nyou can now select a menu entry with the arrow keys or `j`/`k` (vim motions) and accept your choice by hitting enter or\ncancel the menu with escape, `q` or `<ctrl>-c`. `show` returns the selected menu entry index or `none` if the menu was\ncanceled.\n\nlong menus can be scrolled quickly with the page up and page down keys (or `<ctrl>-f` / `<ctrl-b>` for vim users).\n\nyou can pass an optional `title` to the `terminalmenu` constructor which will be placed above the menu. `title` can be a\nsimple string, a multiline string (with `\\n` newlines) or a list of strings. the same applies to the `status_bar`\nparameter, which places a status bar below the menu. moreover, you can use a callable as `status_bar` parameter which\ntakes the currently selected entry and returns a status bar string.\n\n### styling\n\nyou can pass styling arguments to the `terminalmenu` constructor. each style is a tuple of keyword strings. currently\nthe following keywords are accepted:\n\n- `bg_black`\n- `bg_blue`\n- `bg_cyan`\n- `bg_gray`\n- `bg_green`\n- `bg_purple`\n- `bg_red`\n- `bg_yellow`\n- `fg_black`\n- `fg_blue`\n- `fg_cyan`\n- `fg_gray`\n- `fg_green`\n- `fg_purple`\n- `fg_red`\n- `fg_yellow`\n- `bold`\n- `italics`\n- `standout`\n- `underline`\n\nyou can alter the following styles:\n\n- `menu_cursor_style`: the style of the shown cursor. the default style is `(\"fg_red\", \"bold\")`.\n\n- `menu_highlight_style`: the style of the selected menu entry. the default style is `(\"standout\",)`.\n\n- `search_highlight_style`: the style of matched search strings. the default style is `(\"fg_black\", \"bg_yellow\",\n  \"bold\")`.\n\n- `shortcut_key_highlight_style`: the style of shortcut keys. the default style is `(\"fg_blue\",)`.\n\n- `shortcut_brackets_highlight_style`: the style of brackets enclosing shortcut keys. the default style is\n  `(\"fg_gray\",)`.\n\n- `status_bar_style`: the style of the status bar below the menu. the default style is `(\"fg_yellow\", \"bg_black\")`.\n\n- `multi_select_cursor_style`: the style of the cursor which pins a selected entry in a multi-selection. the default\n  style is `(\"fg_yellow\", \"bold\")`. this style excludes brackets (see below).\n\n- `multi_select_cursor_brackets_style`: the style of brackets in the `multi_select_cursor` (`([{<)]}>`). the default\n  style is `(\"fg_gray\",)`.\n\nby setting `menu_cursor` you can define another cursor or disable it (`none`). the default cursor is `\"> \"`.\nthe parameter `multi_select_cursor` customizes the multi-select cursor (the default is `\"[*] \"`).\n\n### searching\n\n`simple_term_menu` has a built-in search feature to filter shown menu entries. the default key to activate search mode\nis `/` (like in vim, less and other terminal programs). if you prefer another search key, pass a `search_key` parameter\nto the `terminalmenu` constructor. `none` can be passed to activate the search on every letter key. obviously, `j` and\n`k` cannot be used for cursor motions in that mode. use `<ctrl-j>` and `<ctrl-k>` instead.\n\nthe search mode supports python regex syntax. visit the\n[python re documentation](https://docs.python.org/3/library/re.html#regular-expression-syntax) for more details.\n\nstring parts of the menu entries which match the given search pattern are highlighted. use the `search_highlight_style`\nparameter to adjust the highlight style to your liking.\n\nby default, the search is case insensitive. set `search_case_sensitive` to `true` if you prefer a case sensitive search\nline.\n\npass `show_search_hint=true` to the `terminalmenu` constructor to activate a search hint in the search line (like\n`(press \"/\" to search)`).\n\n### shortcuts\n\nyou can define shortcuts for selected menu entries by prepending a single character enclosed in square brackets (like\n`[a]`). pass `shortcut_key_highlight_style` and/or `shortcut_brackets_highlight_style` to the `terminalmenu` constructor\nto change the default highlight style of the shortcuts.\n\nby default, the `show` method returns when a shortcut key is pressed. if you only want the selection to jump the\nshortcut target, pass `exit_on_shortcut=false` to the `terminalmenu` constructor.\n\nif you configured the search to be activated on every letter key, the shortcut feature will be disabled.\n\npass `show_shortcut_hints=true` to the `terminalmenu` constructor to display shortcut hints in the status bar (useful\nfor very long menus which need scrolling). additionally pass `show_shortcut_hints_in_status_bar=false` if you prefer\nshortcut hints in the menu title.\n\n#### shortcuts example\n\ncreate a menu of some fruits and use the first letter as shortcut key:\n\n```python\n#!/usr/bin/env python3\n\nimport os\nfrom simple_term_menu import terminalmenu\n\n\ndef main():\n    fruits = [\"[a] apple\", \"[b] banana\", \"[o] orange\"]\n    terminal_menu = terminalmenu(fruits, title=\"fruits\")\n    menu_entry_index = terminal_menu.show()\n\n\nif __name__ == \"__main__\":\n    main()\n```\n\n![screenshot_shortcuts](https://raw.githubusercontent.com/ingomeyer441/simple-term-menu/master/shortcuts.png)\n\n### custom accept keys\n\nthe default key to accept a menu item is `enter`. pass the `accept_keys` parameter with a tuple of keys (as strings) to\nthe `terminalmenu` constructor to use a different set of accept keys. custom accept keys can be plain ascii letters or\nascii letters with a modifier key (prepend `ctrl-` or `alt-` to an ascii letter). use the `chosen_accept_key` property\nof the `terminalmenu` instance to query which accept key was pressed by the user.\n\nbe aware that not all combinations of modifier and ascii keys will work depending on your terminal emulator and\ngraphical user interface. in addition, some combinations generate other existing keys (e.g. `ctrl-m` is `enter` /\ncarriage return).\n\n#### custom accept keys example\n\n```python\n#!/usr/bin/env python3\n\nfrom simple_term_menu import terminalmenu\n\n\ndef main():\n    terminal_menu = terminalmenu([\"entry 1\", \"entry 2\", \"entry 3\"], accept_keys=(\"enter\", \"alt-d\", \"ctrl-i\"))\n    menu_entry_index = terminal_menu.show()\n    print(terminal_menu.chosen_accept_key)\n\n\nif __name__ == \"__main__\":\n    main()\n```\n\n### multi-select\n\npass `multi_select=true` to the `terminalmenu` constructor to enable the multi-select mode. press `space` or `tab` on an\narbitrary menu item to add it to your selection. press `enter` (or any other configured `accept_key`) to add the\ncurrently selected entry as the last item to the selection and to return from the `show` method as usual. in\nmulti-select mode, the `show` method returns a sorted tuple of all your selected menu indices instead of a single int.\nuse the `chosen_menu_entries` property to get a tuple of the menu entry strings instead. by setting `multi_select_keys`\nyou can define another set of keys to toggle a selected item. by passing `show_multi_select_hint=true` a multi-select\nmode hint is shown in the status bar. if you don't want the `accept_key` to also select the last highlighted item you\ncan pass `multi_select_select_on_accept=false`. if no menu item is explicitly selected, the last highlighted menu item\nwill still be added to the selection unless you also pass `multi_select_empty_ok=true`.\n\nan optional list (or any other iterable object) `preselected_entries` can also be passed to have items already selected\nwhen the menu is displayed.  this list can be composed of either integers representing indexes of the `menu_entries`\nlist, or strings matching the elements of `menu_entries`. integers and strings can be mixed.\n\n#### multi-select example\n\n```python\n#!/usr/bin/env python3\n\nfrom simple_term_menu import terminalmenu\n\n\ndef main():\n    terminal_menu = terminalmenu(\n        [\"dog\", \"cat\", \"mouse\", \"squirrel\"],\n        multi_select=true,\n        show_multi_select_hint=true,\n    )\n    menu_entry_indices = terminal_menu.show()\n    print(menu_entry_indices)\n    print(terminal_menu.chosen_menu_entries)\n\n\nif __name__ == \"__main__\":\n    main()\n```\n\n![screenshot_multi_select](https://raw.githubusercontent.com/ingomeyer441/simple-term-menu/master/multi_select.png)\n\n### preview window\n\n`simple-term-menu` can show a preview for each menu entry. pass a `preview_command` to the `terminalmenu` constructor to\nactivate this optional feature. `preview_command` either takes a command string which will be executed as a subprocess\nor a python callable which converts a given menu entry string into the preview output. if a command string is given, the\npattern `{}` is replaced with the current menu entry string. if a menu entry has an additional data component (separated\nby `|`), it is passed instead to the preview command. `\\|` can be used for a literal `|`. if you simply append a `|`\n(without a data component), the preview window will be disabled for this entry.\n\nthe additional keyword argument `preview_size` can be used to control the height of the preview window. it is given as\nfraction of the complete terminal height (default: `0.25`). the width cannot be set, it is always the complete width of\nthe terminal window.\n\npass `preview_title` with a string of your choice to customize the preview window title (default: `\"preview\"`) or\n`preview_border=false` to deactivate the border around the preview window (also deactivates the title string).\n\npreview commands are allowed to generate [ansi escape color codes](https://en.wikipedia.org/wiki/ansi_escape_code#sgr).\n\n#### preview examples\n\n- create a menu for all files in the current directory and preview their contents with the\n  [`bat`](https://github.com/sharkdp/bat) command:\n\n  ```python\n  #!/usr/bin/env python3\n\n  import os\n  from simple_term_menu import terminalmenu\n\n\n  def list_files(directory=\".\"):\n      return (file for file in os.listdir(directory) if os.path.isfile(os.path.join(directory, file)))\n\n\n  def main():\n      terminal_menu = terminalmenu(list_files(), preview_command=\"bat --color=always {}\", preview_size=0.75)\n      menu_entry_index = terminal_menu.show()\n\n\n  if __name__ == \"__main__\":\n      main()\n  ```\n\n  ![screenshot_preview_bat](https://raw.githubusercontent.com/ingomeyer441/simple-term-menu/master/preview_bat.png)\n\n- another file preview example using the [pygments](https://pygments.org) api:\n\n  ```python\n  #!/usr/bin/env python3\n\n  import os\n  from pygments import formatters, highlight, lexers\n  from pygments.util import classnotfound\n  from simple_term_menu import terminalmenu\n\n\n  def highlight_file(filepath):\n      with open(filepath, \"r\") as f:\n          file_content = f.read()\n      try:\n          lexer = lexers.get_lexer_for_filename(filepath, stripnl=false, stripall=false)\n      except classnotfound:\n          lexer = lexers.get_lexer_by_name(\"text\", stripnl=false, stripall=false)\n      formatter = formatters.terminalformatter(bg=\"dark\")  # dark or light\n      highlighted_file_content = highlight(file_content, lexer, formatter)\n      return highlighted_file_content\n\n\n  def list_files(directory=\".\"):\n      return (file for file in os.listdir(directory) if os.path.isfile(os.path.join(directory, file)))\n\n\n  def main():\n      terminal_menu = terminalmenu(list_files(), preview_command=highlight_file, preview_size=0.75)\n      menu_entry_index = terminal_menu.show()\n\n\n  if __name__ == \"__main__\":\n      main()\n  ```\n\n  ![screenshot_preview_pygments](https://raw.githubusercontent.com/ingomeyer441/simple-term-menu/master/preview_pygments.png)\n\n- preview the active pane of each running tmux session (the session ids are appended to the menu entries with the `|`\n  separator):\n\n  ```python\n  #!/usr/bin/env python3\n\n  import subprocess\n  from simple_term_menu import terminalmenu\n\n\n  def list_tmux_sessions():\n      tmux_command_output = subprocess.check_output(\n          [\"tmux\", \"list-sessions\", \"-f#{session_id}:#{session_name}\"], universal_newlines=true\n      )\n      tmux_sessions = []\n      for line in tmux_command_output.split(\"\\n\"):\n          line = line.strip()\n          if not line:\n              continue\n          session_id, session_name = tuple(line.split(\":\"))\n          tmux_sessions.append((session_name, session_id))\n      return tmux_sessions\n\n\n  def main():\n      terminal_menu = terminalmenu(\n          (\"|\".join(session) for session in list_tmux_sessions()),\n          preview_command=\"tmux capture-pane -e -p -t {}\",\n          preview_size=0.75,\n      )\n      menu_entry_index = terminal_menu.show()\n\n\n  if __name__ == \"__main__\":\n      main()\n  ```\n\n  ![screenshot_preview_tmux_sessions](https://raw.githubusercontent.com/ingomeyer441/simple-term-menu/master/preview_tmux_sessions.png)\n\n### skipping empty entries\n\nuse the constructor parameter `skip_empty_entries` or the flag `--skip-empty-entries` to interpret an empty string value\nin the menu entries as an empty menu entry (will be skipped when iterating over the entries). a `none` value is always\nconsidered as an empty menu entry independently from the `skip_empty_entries` parameter.\n\n```python\nfrom simple_term_menu import terminalmenu\n\ndef main():                                                         # or use `none` instead of `\"\"`:\n    options = [\"entry 1\", \"entry 2\", \"\", \"add\", \"edit\"]             # [\"entry 1\", \"entry 2\", none, \"add\", \"edit\"]\n    terminal_menu = terminalmenu(options, skip_empty_entries=true)  # terminalmenu(options)\n    menu_entry_index = terminal_menu.show()\n    print(f\"you have selected {options[menu_entry_index]}!\")\n\nif __name__ == \"__main__\":\n    main()\n```\n\n![screenshot_skip_empty_entries](https://raw.githubusercontent.com/ingomeyer441/simple-term-menu/master/skip_empty_entries.png)\n\n### localization / text modification\n\nuse the constructor parameters\n\n- `show_search_hint_text` and\n- `show_multi_select_hint_text`\n\nto modify the corresponding texts. use the placeholder `{key}` for the search key in `show_search_hint_text` and both\n`{accept_keys}` and `{multi_select_keys}` in `show_multi_select_hint_text` if appropriately.\n\n### additional settings\n\nfurthermore, the `terminalmenu` constructor takes these additional parameters to change the menu behavior:\n\n- `clear_menu_on_exit`: a bool value which indicates if the menu will be cleared after the `show` method. defaults to\n  `true`.\n- `clear_screen`: a bool value which indicates if the screen will be cleared before the menu is shown. defaults to\n  `false`.\n- `cursor_index`: the initially selected item index.\n- `cycle_cursor`: a bool value which indicates if the menu cursor cycles when the end of the menu is reached. defaults\n  to `true`.\n- `quit_keys`: an iterable of keys which quit the terminal menu. defaults to `(\"escape\", \"q\")`.\n- `raise_error_on_interrupt`: set this to `true` to reraise keyboard interrupts (by pressing `<ctrl-c>`). defaults to\n  `false`.\n- `status_bar_below_preview`: position the status bar below the preview window (default positioning is above).\n\n### command line program\n\n`simple-term-menu` can be used as a terminal program in shell scripts. the exit code of the script is the 1-based index\nof the selected menu entry. the exit code 0 reports the cancel action. the following command line arguments are\nsupported:\n\n```text\nusage: simple-term-menu [-h] [-s] [-x] [-l] [--cursor cursor]\n                        [-i cursor_index] [--cursor-style cursor_style] [-c]\n                        [-e] [--highlight-style highlight_style] [-m]\n                        [--multi-select-cursor multi_select_cursor]\n                        [--multi-select-cursor-brackets-style multi_select_cursor_brackets_style]\n                        [--multi-select-cursor-style multi_select_cursor_style]\n                        [--multi-select-keys multi_select_keys]\n                        [--multi-select-no-select-on-accept]\n                        [--multi-select-empty-ok] [-p preview_command]\n                        [--no-preview-border] [--preview-size preview_size]\n                        [--preview-title preview_title]\n                        [--search-highlight-style search_highlight_style]\n                        [--search-key search_key]\n                        [--shortcut-brackets-highlight-style shortcut_brackets_highlight_style]\n                        [--shortcut-key-highlight-style shortcut_key_highlight_style]\n                        [--show-multi-select-hint]\n                        [--show-multi-select-hint-text show_multi_select_hint_text]\n                        [--show-search-hint]\n                        [--show-search-hint-text show_search_hint_text]\n                        [--show-shortcut-hints]\n                        [--show-shortcut-hints-in-title]\n                        [--skip-empty-entries] [-b status_bar] [-d]\n                        [--status-bar-style status_bar_style] [--stdout]\n                        [-t title] [-v]\n                        [-r preselected_entries | -r preselected_indices]\n                        [entries ...]\n\nsimple-term-menu creates simple interactive menus in the terminal and returns the selected entry as exit code.\n\npositional arguments:\n  entries               the menu entries to show\n\noptions:\n  -h, --help            show this help message and exit\n  -s, --case-sensitive  searches are case sensitive\n  -x, --no-clear-menu-on-exit\n                        do not clear the menu on exit\n  -l, --clear-screen    clear the screen before the menu is shown\n  --cursor cursor       menu cursor (default: \"> \")\n  -i cursor_index, --cursor-index cursor_index\n                        initially selected item index\n  --cursor-style cursor_style\n                        style for the menu cursor as comma separated list\n                        (default: \"fg_red,bold\")\n  -c, --no-cycle        do not cycle the menu selection\n  -e, --no-exit-on-shortcut\n                        do not exit on shortcut keys\n  --highlight-style highlight_style\n                        style for the selected menu entry as comma separated\n                        list (default: \"standout\")\n  -m, --multi-select    allow the selection of multiple entries (implies\n                        `--stdout`)\n  --multi-select-cursor multi_select_cursor\n                        multi-select menu cursor (default: \"[*] \")\n  --multi-select-cursor-brackets-style multi_select_cursor_brackets_style\n                        style for brackets of the multi-select menu cursor as\n                        comma separated list (default: \"fg_gray\")\n  --multi-select-cursor-style multi_select_cursor_style\n                        style for the multi-select menu cursor as comma\n                        separated list (default: \"fg_yellow,bold\")\n  --multi-select-keys multi_select_keys\n                        key for toggling a selected item in a multi-selection\n                        (default: \" ,tab\",\n  --multi-select-no-select-on-accept\n                        do not select the currently highlighted menu item when\n                        the accept key is pressed (it is still selected if no\n                        other item was selected before)\n  --multi-select-empty-ok\n                        when used together with --multi-select-no-select-on-\n                        accept allows returning no selection at all\n  -p preview_command, --preview preview_command\n                        command to generate a preview for the selected menu\n                        entry. \"{}\" can be used as placeholder for the menu\n                        text. if the menu entry has a data component\n                        (separated by \"|\"), this is used instead.\n  --no-preview-border   do not draw a border around the preview window\n  --preview-size preview_size\n                        maximum height of the preview window in fractions of\n                        the terminal height (default: \"0.25\")\n  --preview-title preview_title\n                        title of the preview window (default: \"preview\")\n  --search-highlight-style search_highlight_style\n                        style of matched search patterns (default:\n                        \"fg_black,bg_yellow,bold\")\n  --search-key search_key\n                        key to start a search (default: \"/\", \"none\" is treated\n                        a special value which activates the search on any\n                        letter key)\n  --shortcut-brackets-highlight-style shortcut_brackets_highlight_style\n                        style of brackets enclosing shortcut keys (default:\n                        \"fg_gray\")\n  --shortcut-key-highlight-style shortcut_key_highlight_style\n                        style of shortcut keys (default: \"fg_blue\")\n  --show-multi-select-hint\n                        show a multi-select hint in the status bar\n  --show-multi-select-hint-text show_multi_select_hint_text\n                        custom text which will be shown as multi-select hint.\n                        use the placeholders {multi_select_keys} and\n                        {accept_keys} if appropriately.\n  --show-search-hint    show a search hint in the search line\n  --show-search-hint-text show_search_hint_text\n                        custom text which will be shown as search hint. use\n                        the placeholders {key} for the search key if\n                        appropriately.\n  --show-shortcut-hints\n                        show shortcut hints in the status bar\n  --show-shortcut-hints-in-title\n                        show shortcut hints in the menu title\n  --skip-empty-entries  interpret an empty string in menu entries as an empty\n                        menu entry\n  -b status_bar, --status-bar status_bar\n                        status bar text\n  -d, --status-bar-below-preview\n                        show the status bar below the preview window if any\n  --status-bar-style status_bar_style\n                        style of the status bar lines (default:\n                        \"fg_yellow,bg_black\")\n  --stdout              print the selected menu index or indices to stdout (in\n                        addition to the exit status). multiple indices are\n                        separated by \";\".\n  -t title, --title title\n                        menu title\n  -v, --version         print the version number and exit\n  -r preselected_entries, --preselected_entries preselected_entries\n                        comma separated list of strings matching menu items to\n                        start pre-selected in a multi-select menu.\n  -r preselected_indices, --preselected_indices preselected_indices\n                        comma separated list of numeric indexes of menu items\n                        to start pre-selected in a multi-select menu.\n```\n\n#### example with preview option\n\ninstead of using the python api as in the [previous examples](#preview-examples), a file menu with `bat` preview can\nalso be created from the command line:\n\n```bash\nsimple-term-menu -p \"bat --color=always {}\" \\\n                 --preview-size 0.75 \\\n                 $(find . -maxdepth 1  -type f | awk '{ print substr($0, 3) }')\n```\n\n### more advanced example\n\na more advanced example with sub menus (thanks to [pageauc](https://github.com/pageauc)):\n\n```python\n#!/usr/bin/env python3\n\"\"\"\ndemonstration example for github project at\nhttps://github.com/ingomeyer441/simple-term-menu\n\nthis code only works in python3. install per\n\n    sudo pip3 install simple-term-menu\n\n\"\"\"\nimport time\n\nfrom simple_term_menu import terminalmenu\n\n\ndef main():\n    main_menu_title = \"  main menu.\\n  press q or esc to quit. \\n\"\n    main_menu_items = [\"edit menu\", \"second item\", \"third item\", \"quit\"]\n    main_menu_cursor = \"> \"\n    main_menu_cursor_style = (\"fg_red\", \"bold\")\n    main_menu_style = (\"bg_red\", \"fg_yellow\")\n    main_menu_exit = false\n\n    main_menu = terminalmenu(\n        menu_entries=main_menu_items,\n        title=main_menu_title,\n        menu_cursor=main_menu_cursor,\n        menu_cursor_style=main_menu_cursor_style,\n        menu_highlight_style=main_menu_style,\n        cycle_cursor=true,\n        clear_screen=true,\n    )\n\n    edit_menu_title = \"  edit menu.\\n  press q or esc to back to main menu. \\n\"\n    edit_menu_items = [\"edit config\", \"save settings\", \"back to main menu\"]\n    edit_menu_back = false\n    edit_menu = terminalmenu(\n        edit_menu_items,\n        title=edit_menu_title,\n        menu_cursor=main_menu_cursor,\n        menu_cursor_style=main_menu_cursor_style,\n        menu_highlight_style=main_menu_style,\n        cycle_cursor=true,\n        clear_screen=true,\n    )\n\n    while not main_menu_exit:\n        main_sel = main_menu.show()\n\n        if main_sel == 0:\n            while not edit_menu_back:\n                edit_sel = edit_menu.show()\n                if edit_sel == 0:\n                    print(\"edit config selected\")\n                    time.sleep(5)\n                elif edit_sel == 1:\n                    print(\"save selected\")\n                    time.sleep(5)\n                elif edit_sel == 2 or edit_sel == none:\n                    edit_menu_back = true\n                    print(\"back selected\")\n            edit_menu_back = false\n        elif main_sel == 1:\n            print(\"option 2 selected\")\n            time.sleep(5)\n        elif main_sel == 2:\n            print(\"option 3 selected\")\n            time.sleep(5)\n        elif main_sel == 3 or main_sel == none:\n            main_menu_exit = true\n            print(\"quit selected\")\n\n\nif __name__ == \"__main__\":\n    main()\n```\n\n## similar projects\n\n- [`bullet`](https://github.com/mckinsey666/bullet): creates bullet-lists with multi-selection support.\n\n## contributing\n\nplease open [an issue on github](https://github.com/ingomeyer441/simple-term-menu/issues/new) if you experience bugs or\nmiss features. please consider to send a pull request if you can spend time on fixing the issue yourself. this project\nuses [pre-commit](https://pre-commit.com) to ensure code quality and a consistent code style. run\n\n```bash\nmake git-hooks-install\n```\n\nto install all linters as git hooks in your local clone of `simple-term-menu`.\n",
  "docs_url": null,
  "keywords": "terminal,menu,choice",
  "license": "mit",
  "name": "simple-term-menu",
  "package_url": "https://pypi.org/project/simple-term-menu/",
  "project_url": "https://pypi.org/project/simple-term-menu/",
  "project_urls": {
    "Homepage": "https://github.com/IngoMeyer441/simple-term-menu"
  },
  "release_url": "https://pypi.org/project/simple-term-menu/1.6.4/",
  "requires_dist": [],
  "requires_python": "~=3.5",
  "summary": "a python package which creates simple interactive menus on the command line.",
  "version": "1.6.4",
  "releases": [],
  "developers": [
    "i.meyer@fz-juelich.de",
    "ingo_meyer"
  ],
  "kwds": "terminalmenu simple_term_menu terminal_menu menus terminal",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_simple_term_menu",
  "homepage": "https://github.com/ingomeyer441/simple-term-menu",
  "release_count": 47,
  "dependency_ids": []
}
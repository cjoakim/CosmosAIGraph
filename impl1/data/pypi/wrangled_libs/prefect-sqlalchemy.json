{
  "classifiers": [
    "intended audience :: developers",
    "intended audience :: system administrators",
    "license :: osi approved :: apache software license",
    "natural language :: english",
    "programming language :: python :: 3 :: only",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: software development :: libraries"
  ],
  "description": "# prefect-sqlalchemy\n\n<p align=\"center\">\n    <img src=\"https://user-images.githubusercontent.com/15331990/217670791-ecce97ef-8f14-4519-85b7-40cd28ac2325.png\">\n    <br>\n    <a href=\"https://pypi.python.org/pypi/prefect-sqlalchemy/\" alt=\"pypi version\">\n        <img alt=\"pypi\" src=\"https://img.shields.io/pypi/v/prefect-sqlalchemy?color=0052ff&labelcolor=090422\"></a>\n    <a href=\"https://github.com/prefecthq/prefect-sqlalchemy/\" alt=\"stars\">\n        <img src=\"https://img.shields.io/github/stars/prefecthq/prefect-sqlalchemy?color=0052ff&labelcolor=090422\" /></a>\n    <a href=\"https://pepy.tech/badge/prefect-sqlalchemy/\" alt=\"downloads\">\n        <img src=\"https://img.shields.io/pypi/dm/prefect-sqlalchemy?color=0052ff&labelcolor=090422\" /></a>\n    <a href=\"https://github.com/prefecthq/prefect-sqlalchemy/pulse\" alt=\"activity\">\n        <img src=\"https://img.shields.io/github/commit-activity/m/prefecthq/prefect-sqlalchemy?color=0052ff&labelcolor=090422\" /></a>\n    <br>\n    <a href=\"https://prefect-community.slack.com\" alt=\"slack\">\n        <img src=\"https://img.shields.io/badge/slack-join_community-red.svg?color=0052ff&labelcolor=090422&logo=slack\" /></a>\n    <a href=\"https://discourse.prefect.io/\" alt=\"discourse\">\n        <img src=\"https://img.shields.io/badge/discourse-browse_forum-red.svg?color=0052ff&labelcolor=090422&logo=discourse\" /></a>\n</p>\n\nvisit the full docs [here](https://prefecthq.github.io/prefect-sqlalchemy) to see additional examples and the api reference.\n\nthe prefect-sqlalchemy collection makes it easy to connect to a database in your prefect flows. check out the examples below to get started!\n\n## getting started\n\n### integrate with prefect flows\n\nprefect and sqlalchemy are a data powerhouse duo. with prefect, your data pipelines are always on track, and with sqlalchemy, your databases are a snap to handle! get ready to experience the ultimate data \"flow-chemistry\"!\n\nto set up a table, use the `execute` and `execute_many` methods. then, use the `fetch_many` method to retrieve data in a stream until there's no more data.\n\nby using the `sqlalchemyconnector` as a context manager, you can make sure that the sqlalchemy engine and any connected resources are closed properly after you're done with them.\n\nbe sure to install [prefect-sqlalchemy](#installation) and [save to block](#saving-credentials-to-block) to run the examples below!\n\n!!! note \"async support\"\n\n    `sqlalchemyconnector` also supports async workflows! just be sure to save, load, and use an async driver.\n    ```python\n    from prefect_sqlalchemy import sqlalchemyconnector, connectioncomponents, asyncdriver\n\n    connector = sqlalchemyconnector(\n        connection_info=connectioncomponents(\n            driver=asyncdriver.sqlite_aiosqlite,\n            database=\"database-placeholder.db\"\n        )\n    )\n\n    connector.save(\"block_name-placeholder\")\n    ```\n\n=== \"sync\"\n\n    ```python\n    from prefect import flow, task\n    from prefect_sqlalchemy import sqlalchemyconnector\n\n\n    @task\n    def setup_table(block_name: str) -> none:\n        with sqlalchemyconnector.load(block_name) as connector:\n            connector.execute(\n                \"create table if not exists customers (name varchar, address varchar);\"\n            )\n            connector.execute(\n                \"insert into customers (name, address) values (:name, :address);\",\n                parameters={\"name\": \"marvin\", \"address\": \"highway 42\"},\n            )\n            connector.execute_many(\n                \"insert into customers (name, address) values (:name, :address);\",\n                seq_of_parameters=[\n                    {\"name\": \"ford\", \"address\": \"highway 42\"},\n                    {\"name\": \"unknown\", \"address\": \"highway 42\"},\n                ],\n            )\n\n    @task\n    def fetch_data(block_name: str) -> list:\n        all_rows = []\n        with sqlalchemyconnector.load(block_name) as connector:\n            while true:\n                # repeated fetch* calls using the same operation will\n                # skip re-executing and instead return the next set of results\n                new_rows = connector.fetch_many(\"select * from customers\", size=2)\n                if len(new_rows) == 0:\n                    break\n                all_rows.append(new_rows)\n        return all_rows\n\n    @flow\n    def sqlalchemy_flow(block_name: str) -> list:\n        setup_table(block_name)\n        all_rows = fetch_data(block_name)\n        return all_rows\n\n\n    sqlalchemy_flow(\"block-name-placeholder\")\n    ```\n\n=== \"async\"\n\n    ```python\n    from prefect import flow, task\n    from prefect_sqlalchemy import sqlalchemyconnector\n    import asyncio\n\n    @task\n    async def setup_table(block_name: str) -> none:\n        async with await sqlalchemyconnector.load(block_name) as connector:\n            await connector.execute(\n                \"create table if not exists customers (name varchar, address varchar);\"\n            )\n            await connector.execute(\n                \"insert into customers (name, address) values (:name, :address);\",\n                parameters={\"name\": \"marvin\", \"address\": \"highway 42\"},\n            )\n            await connector.execute_many(\n                \"insert into customers (name, address) values (:name, :address);\",\n                seq_of_parameters=[\n                    {\"name\": \"ford\", \"address\": \"highway 42\"},\n                    {\"name\": \"unknown\", \"address\": \"highway 42\"},\n                ],\n            )\n\n    @task\n    async def fetch_data(block_name: str) -> list:\n        all_rows = []\n        async with sqlalchemyconnector.load(block_name) as connector:\n            while true:\n                # repeated fetch* calls using the same operation will\n                # skip re-executing and instead return the next set of results\n                new_rows = await connector.fetch_many(\"select * from customers\", size=2)\n                if len(new_rows) == 0:\n                    break\n                all_rows.append(new_rows)\n        return all_rows\n\n    @flow\n    async def sqlalchemy_flow(block_name: str) -> list:\n        await setup_table(block_name)\n        all_rows = await fetch_data(block_name)\n        return all_rows\n\n\n    asyncio.run(sqlalchemy_flow(\"block-name-placeholder\"))\n    ```\n\n## resources\n\nfor more tips on how to use tasks and flows in a collection, check out [using collections](https://orion-docs.prefect.io/collections/usage/)!\n\n### installation\n\ninstall `prefect-sqlalchemy` with `pip`:\n\n```bash\npip install prefect-sqlalchemy\n```\n\nrequires an installation of python 3.7+.\n\nwe recommend using a python virtual environment manager such as pipenv, conda or virtualenv.\n\nthese tasks are designed to work with prefect 2.0. for more information about how to use prefect, please refer to the [prefect documentation](https://orion-docs.prefect.io/).\n\n### saving credentials to block\n\nto use the `load` method on blocks, you must already have a block document [saved through code](https://orion-docs.prefect.io/concepts/blocks/#saving-blocks) or [saved through the ui](https://orion-docs.prefect.io/ui/blocks/).\n\nbelow is a walkthrough on saving block documents through code; simply create a short script, replacing the placeholders. \n\n```python\nfrom prefect_sqlalchemy import sqlalchemyconnector, connectioncomponents, syncdriver\n\nconnector = sqlalchemyconnector(\n    connection_info=connectioncomponents(\n        driver=syncdriver.postgresql_psycopg2,\n        username=\"username-placeholder\",\n        password=\"password-placeholder\",\n        host=\"localhost\",\n        port=5432,\n        database=\"database-placeholder\",\n    )\n)\n\nconnector.save(\"block_name-placeholder\")\n```\n\ncongrats! you can now easily load the saved block, which holds your credentials:\n\n```python\nfrom prefect_sqlalchemy import sqlalchemyconnector\n\nsqlalchemyconnector.load(\"block_name-placeholder\")\n```\n\nthe required keywords depend on the desired `driver`. for example, sqlite only requires driver and database specified:\n\n```python\nfrom prefect_sqlalchemy import sqlalchemyconnector, connectioncomponents, syncdriver\n\nconnector = sqlalchemyconnector(\n    connection_info=connectioncomponents(\n        driver=syncdriver.sqlite_pysqlite,\n        database=\"database-placeholder.db\"\n    )\n)\n\nconnector.save(\"block_name-placeholder\")\n```\n\n!!! info \"registering blocks\"\n\n    register blocks in this module to\n    [view and edit them](https://orion-docs.prefect.io/ui/blocks/)\n    on prefect cloud:\n\n    ```bash\n    prefect block register -m prefect_sqlalchemy\n    ```\n\na list of available blocks in `prefect-sqlalchemy` and their setup instructions can be found [here](https://prefecthq.github.io/prefect-sqlalchemy/blocks_catalog).\n\n### feedback\n\nif you encounter any bugs while using `prefect-sqlalchemy`, feel free to open an issue in the [prefect-sqlalchemy](https://github.com/prefecthq/prefect-sqlalchemy) repository.\n\nif you have any questions or issues while using `prefect-sqlalchemy`, you can find help in either the [prefect discourse forum](https://discourse.prefect.io/) or the [prefect slack community](https://prefect.io/slack).\n\nfeel free to star or watch [`prefect-sqlalchemy`](https://github.com/prefecthq/prefect-sqlalchemy) for updates too!\n\n### contributing\n\nif you'd like to help contribute to fix an issue or add a feature to `prefect-sqlalchemy`, please [propose changes through a pull request from a fork of the repository](https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/creating-a-pull-request-from-a-fork).\n\nhere are the steps:\n\n1. [fork the repository](https://docs.github.com/en/get-started/quickstart/fork-a-repo#forking-a-repository)\n2. [clone the forked repository](https://docs.github.com/en/get-started/quickstart/fork-a-repo#cloning-your-forked-repository)\n3. install the repository and its dependencies:\n```\npip install -e \".[dev]\"\n```\n4. make desired changes\n5. add tests\n6. insert an entry to [changelog.md](https://github.com/prefecthq/prefect-sqlalchemy/blob/main/changelog.md)\n7. install `pre-commit` to perform quality checks prior to commit:\n```\npre-commit install\n```\n8. `git commit`, `git push`, and create a pull request\n",
  "docs_url": null,
  "keywords": "prefect",
  "license": "apache license 2.0",
  "name": "prefect-sqlalchemy",
  "package_url": "https://pypi.org/project/prefect-sqlalchemy/",
  "project_url": "https://pypi.org/project/prefect-sqlalchemy/",
  "project_urls": {
    "Homepage": "https://github.com/PrefectHQ/prefect-sqlalchemy"
  },
  "release_url": "https://pypi.org/project/prefect-sqlalchemy/0.3.2/",
  "requires_dist": [
    "prefect >=2.13.5",
    "sqlalchemy <2,>=1.4.31",
    "pytest ; extra == 'dev'",
    "black ; extra == 'dev'",
    "flake8 ; extra == 'dev'",
    "mypy ; extra == 'dev'",
    "mkdocs ; extra == 'dev'",
    "mkdocs-material ; extra == 'dev'",
    "mkdocstrings[python] ; extra == 'dev'",
    "isort ; extra == 'dev'",
    "pre-commit ; extra == 'dev'",
    "pytest-asyncio ; extra == 'dev'",
    "mkdocs-gen-files ; extra == 'dev'",
    "interrogate ; extra == 'dev'",
    "coverage ; extra == 'dev'",
    "psycopg2 ; extra == 'dev'",
    "asyncpg ; extra == 'dev'",
    "aiosqlite ; extra == 'dev'",
    "pillow ; extra == 'dev'",
    "mock ; (python_version < \"3.8\") and extra == 'dev'"
  ],
  "requires_python": ">=3.7",
  "summary": "prefect integrations for interacting with sqlalchemy.",
  "version": "0.3.2",
  "releases": [],
  "developers": [
    "help@prefect.io",
    "prefect_technologies"
  ],
  "kwds": "prefect_sqlalchemy sqlalchemy sqlalchemy_flow sqlalchemyconnector star",
  "license_kwds": "apache license 2.0",
  "libtype": "pypi",
  "id": "pypi_prefect_sqlalchemy",
  "homepage": "https://github.com/prefecthq/prefect-sqlalchemy",
  "release_count": 11,
  "dependency_ids": [
    "pypi_aiosqlite",
    "pypi_asyncpg",
    "pypi_black",
    "pypi_coverage",
    "pypi_flake8",
    "pypi_interrogate",
    "pypi_isort",
    "pypi_mkdocs",
    "pypi_mkdocs_gen_files",
    "pypi_mkdocs_material",
    "pypi_mkdocstrings",
    "pypi_mock",
    "pypi_mypy",
    "pypi_pillow",
    "pypi_pre_commit",
    "pypi_prefect",
    "pypi_psycopg2",
    "pypi_pytest",
    "pypi_pytest_asyncio",
    "pypi_sqlalchemy"
  ]
}
{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: developers",
    "intended audience :: education",
    "intended audience :: science/research",
    "license :: osi approved :: apache software license",
    "programming language :: python :: 3",
    "programming language :: python :: 3.9",
    "topic :: scientific/engineering :: artificial intelligence",
    "topic :: scientific/engineering :: human machine interfaces",
    "topic :: software development :: code generators",
    "topic :: software development :: libraries",
    "topic :: software development :: libraries :: python modules"
  ],
  "description": "<div align=\"center\">\n<img src=\"https://raw.githubusercontent.com/google/pyglove/main/docs/_static/logo_light.svg#gh-light-mode-only\" width=\"320px\" alt=\"logo\"></img>\n\n</div>\n\n# pyglove: manipulating python programs\n\n[![pypi version](https://badge.fury.io/py/pyglove.svg)](https://badge.fury.io/py/pyglove)\n[![codecov](https://codecov.io/gh/google/pyglove/branch/main/graph/badge.svg)](https://codecov.io/gh/google/pyglove)\n![pytest](https://github.com/google/pyglove/actions/workflows/ci.yaml/badge.svg)\n\n[**getting started**](#hello-pyglove)\n| [**installation**](#install)\n| [**examples**](#examples)\n| [**reference docs**](https://pyglove.readthedocs.io/)\n\n## what is pyglove\n\npyglove is a general-purpose library for python object manipulation.\nit introduces symbolic object-oriented programming to python, allowing\ndirect manipulation of objects that makes meta-programs much easier to write.\nit has been used to handle complex machine learning scenarios, such as automl,\nas well as facilitating daily programming tasks with extra flexibility.\n\npyglove is lightweight and has very few dependencies beyond the python interpreter.\nit provides:\n\n* a mutable symbolic object model for python;\n* a rich set of operations for python object manipulation;\n* a solution for automatic search of better python programs, including:\n  * an easy-to-use api for dropping search into an arbitrary pre-existing python\n    program;\n  * a set of powerful search primitives for defining the search space;\n  * a library of search algorithms ready to use, and a framework for developing\n    new search algorithms;\n  * an api to interface with any distributed infrastructure (e.g. [open source vizier](https://oss-vizier.readthedocs.io/en/latest/advanced_topics/pyglove/vizier_as_backend.html)) for such search.\n\nit's commonly used in:\n\n* automated machine learning (automl);\n* evolutionary computing;\n* machine learning for large teams (evolving and sharing ml code, reusing\n  ml techniques, etc.);\n* daily programming tasks in python (advanced binding capabilities, mutability,\n  etc.).\n\npyglove has been [published](https://proceedings.neurips.cc/paper/2020/file/012a91467f210472fab4e11359bbfef6-paper.pdf)\nat neurips 2020. it is widely used within [alphabet](https://abc.xyz/), including google research, google cloud, youtube and waymo.\n\npyglove is developed by daiyi peng and colleagues in [google brain team](https://research.google/teams/brain/).\n\n\n## hello pyglove\n\n```python\nimport pyglove as pg\n\n@pg.symbolize\nclass hello:\n  def __init__(self, subject):\n    self._greeting = f'hello, {subject}!'\n\n  def greet(self):\n    print(self._greeting)\n\n\nhello = hello('world')\nhello.greet()\n```\n> hello, world!\n\n```python\nhello.rebind(subject='pyglove')\nhello.greet()\n```\n> hello, pyglove!\n\n```python\nhello.rebind(subject=pg.oneof(['world', 'pyglove']))\nfor h in pg.iter(hello):\n  h.greet()\n```\n> hello, world!<br>\n> hello, pyglove!\n\n## install\n\n```\npip install pyglove\n```\n\nor install nightly build with:\n\n```\npip install pyglove --pre\n```\n\n## examples\n\n* automl\n  * [neural architecture search on mnist](https://github.com/google/pyglove/tree/main/examples/automl/mnist)\n  * [nas-bench-101](https://github.com/google/pyglove/tree/main/examples/automl/nasbench)\n  * [nats-bench](https://github.com/google/pyglove/tree/main/examples/automl/natsbench)\n  * [evolving reinforcement learning algorithms](https://github.com/google/brain_autorl/tree/main/evolving_rl)\n* evolution\n  * framework: [[algorithm](https://github.com/google/pyglove/blob/main/docs/notebooks/intro/search/evolution_algorithm.ipynb)]\n    [[ops](https://github.com/google/pyglove/blob/main/docs/notebooks/intro/search/evolution_ops.ipynb)]\n    [[fine control](https://github.com/google/pyglove/blob/main/docs/notebooks/intro/search/evolution_scheduling.ipynb)]\n  * [travelling salesman problem](https://github.com/google/pyglove/blob/main/docs/notebooks/evolution/tsp.ipynb)\n  * [one-max problem](https://github.com/google/pyglove/blob/main/docs/notebooks/evolution/onemax.ipynb)\n  * [symbolic function regression with `pg.mutfun`](https://github.com/google/pyglove/blob/main/docs/notebooks/evolution/function_regression.ipynb)\n\n* machine learning\n  * [scalably exchanging ml ideas](https://github.com/google/pyglove/blob/main/docs/notebooks/ml/efficiently_exchange_ml_ideas_as_code.ipynb)\n  * [symbolic machine learning](https://github.com/google/pyglove/blob/main/docs/notebooks/ml/symbolic_ml.ipynb)\n  * [symbolic neural modeling](https://github.com/google/pyglove/blob/main/docs/notebooks/ml/neural_modeling.ipynb)\n\n* advanced python programming\n  * [sticky notes: a mini domain-specific language](https://github.com/google/pyglove/blob/main/docs/notebooks/python/sticky_notes.ipynb)\n  * [interactive svg: components for direct manipulation](https://github.com/google/pyglove/blob/main/docs/notebooks/python/interactive_svg.ipynb)\n  * [where is the duck: developing context-aware component](https://github.com/google/pyglove/blob/main/docs/notebooks/python/where_is_the_duck.ipynb)\n\n## citing pyglove\n\n```\n@inproceedings{peng2020pyglove,\n  title={pyglove: symbolic programming for automated machine learning},\n  author={peng, daiyi and dong, xuanyi and real, esteban and tan, mingxing and lu, yifeng and bender, gabriel and liu, hanxiao and kraft, adam and liang, chen and le, quoc},\n  booktitle={advances in neural information processing systems (neurips)},\n  volume={33},\n  pages={96--108},\n  year={2020}\n}\n```\n\n*disclaimer: this is not an officially supported google product.*\n",
  "docs_url": null,
  "keywords": "ai machine learning automl mutable symbolic framework meta-programming",
  "license": "apache license 2.0",
  "name": "pyglove",
  "package_url": "https://pypi.org/project/pyglove/",
  "project_url": "https://pypi.org/project/pyglove/",
  "project_urls": {
    "Homepage": "https://github.com/google/pyglove"
  },
  "release_url": "https://pypi.org/project/pyglove/0.4.3/",
  "requires_dist": [
    "docstring-parser >=0.12"
  ],
  "requires_python": "",
  "summary": "pyglove: a library for manipulating python objects.",
  "version": "0.4.3",
  "releases": [],
  "developers": [
    "pyglove-authors@google.com",
    "pyglove_authors"
  ],
  "kwds": "pyglove logo_light python automl symbolic_ml",
  "license_kwds": "apache license 2.0",
  "libtype": "pypi",
  "id": "pypi_pyglove",
  "homepage": "https://github.com/google/pyglove",
  "release_count": 493,
  "dependency_ids": [
    "pypi_docstring_parser"
  ]
}
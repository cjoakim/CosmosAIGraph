{
  "classifiers": [
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "operating system :: posix :: linux",
    "operating system :: unix",
    "programming language :: python",
    "programming language :: python :: 2",
    "programming language :: python :: 2.7",
    "programming language :: python :: 3",
    "programming language :: python :: 3.3",
    "programming language :: python :: 3.4",
    "programming language :: python :: 3.5",
    "topic :: software development :: libraries :: python modules"
  ],
  "description": "===============\n    xvfbwrapper\n===============\n\n\n**manage headless displays with xvfb (x virtual framebuffer)**\n\n.. image:: https://travis-ci.org/cgoldberg/xvfbwrapper.svg?branch=master\n    :target: https://travis-ci.org/cgoldberg/xvfbwrapper\n\n----\n\n---------\n    info:\n---------\n\n- dev: https://github.com/cgoldberg/xvfbwrapper\n- releases: https://pypi.python.org/pypi/xvfbwrapper\n- author: `corey goldberg <https://github.com/cgoldberg>`_ - 2012-2016\n- license: mit\n\n----\n\n----------------------\n    about xvfbwrapper:\n----------------------\n\nxvfbwrapper is a python wrapper for controlling xvfb.\n\n----\n\n---------------\n    about xvfb:\n---------------\n\nxvfb (x virtual framebuffer) is a display server implementing the x11 display server protocol. it runs in memory and does not require a physical display.  only a network layer is necessary.\n\nxvfb is especially useful for running acceptance tests on headless servers.\n\n----\n\n\n----------------------------------\n    install xvfbwrapper from pypi:\n----------------------------------\n\n  ``pip install xvfbwrapper``\n\n----\n\n------------------------\n    system requirements:\n------------------------\n\n* xvfb (``sudo apt-get install xvfb``, or similar)\n* python 2.7 or 3.3+\n\n----\n\n++++++++++++\n    examples\n++++++++++++\n\n****************\n    basic usage:\n****************\n\n::\n\n    from xvfbwrapper import xvfb\n\n    vdisplay = xvfb()\n    vdisplay.start()\n\n    # launch stuff inside\n    # virtual display here.\n\n    vdisplay.stop()\n\n----\n\n*********************************************\n    basic usage, specifying display geometry:\n*********************************************\n\n::\n\n    from xvfbwrapper import xvfb\n\n    vdisplay = xvfb(width=1280, height=740, colordepth=16)\n    vdisplay.start()\n\n    # launch stuff inside\n    # virtual display here.\n\n    vdisplay.stop()\n\n----\n\n*******************************\n    usage as a context manager:\n*******************************\n\n::\n\n    from xvfbwrapper import xvfb\n\n    with xvfb() as xvfb:\n        # launch stuff inside virtual display here.\n        # it starts/stops around this code block.\n\n----\n\n*******************************************************\n    testing example: headless selenium webdriver tests:\n*******************************************************\n\n::\n\n    import unittest\n\n    from selenium import webdriver\n    from xvfbwrapper import xvfb\n\n\n    class testpages(unittest.testcase):\n\n        def setup(self):\n            self.xvfb = xvfb(width=1280, height=720)\n            self.addcleanup(self.xvfb.stop)\n            self.xvfb.start()\n            self.browser = webdriver.firefox()\n            self.addcleanup(self.browser.quit)\n\n        def testubuntuhomepage(self):\n            self.browser.get('http://www.ubuntu.com')\n            self.assertin('ubuntu', self.browser.title)\n\n        def testgooglehomepage(self):\n            self.browser.get('http://www.google.com')\n            self.assertin('google', self.browser.title)\n\n\n    if __name__ == '__main__':\n        unittest.main()\n\n\nthe test class above uses `selenium` and `xvfbwrapper` to run each test case with firefox inside a headless display.\n\n* virtual display is launched\n* firefox launches inside virtual display (headless)\n* browser is not shown while tests are run\n* conditions are asserted in each test case\n* browser quits during cleanup\n* virtual display stops during cleanup\n\n*look ma', no browser!*\n\n(you can also take screenshots inside the virtual display for diagnosing test failures)",
  "docs_url": null,
  "keywords": "xvfb,virtual,display,headless,x11",
  "license": "mit",
  "name": "xvfbwrapper",
  "package_url": "https://pypi.org/project/xvfbwrapper/",
  "project_url": "https://pypi.org/project/xvfbwrapper/",
  "project_urls": {
    "Download": "http://pypi.python.org/pypi/xvfbwrapper",
    "Homepage": "https://github.com/cgoldberg/xvfbwrapper"
  },
  "release_url": "https://pypi.org/project/xvfbwrapper/0.2.9/",
  "requires_dist": [],
  "requires_python": null,
  "summary": "run headless display inside x virtual framebuffer (xvfb)",
  "version": "0.2.9",
  "releases": [],
  "developers": [
    "cgoldberg",
    "corey_goldberg"
  ],
  "kwds": "xvfb xvfbwrapper framebuffer x11 vdisplay",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_xvfbwrapper",
  "homepage": "https://github.com/cgoldberg/xvfbwrapper",
  "release_count": 14,
  "dependency_ids": []
}
{
  "classifiers": [
    "framework :: flake8",
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "operating system :: os independent",
    "programming language :: python",
    "programming language :: python :: 3",
    "programming language :: python :: 3 :: only",
    "topic :: software development :: libraries :: python modules",
    "topic :: software development :: quality assurance"
  ],
  "description": "flake8-black\n============\n\n.. image:: https://img.shields.io/pypi/v/flake8-black.svg\n   :alt: released on the python package index (pypi)\n   :target: https://pypi.org/project/flake8-black/\n.. image:: https://img.shields.io/conda/vn/conda-forge/flake8-black.svg\n   :alt: released on conda\n   :target: https://anaconda.org/conda-forge/flake8-black\n.. image:: https://results.pre-commit.ci/badge/github/peterjc/flake8-black/master.svg\n   :target: https://results.pre-commit.ci/latest/github/peterjc/flake8-black/master\n   :alt: pre-commit.ci status\n.. image:: https://img.shields.io/github/workflow/status/peterjc/flake8-black/test?logo=github-actions\n   :alt: github workflow status\n   :target: https://github.com/peterjc/flake8-black/actions\n.. image:: https://img.shields.io/pypi/dm/flake8-black.svg\n   :alt: pypi downloads\n   :target: https://pypistats.org/packages/flake8-black\n.. image:: https://img.shields.io/badge/code%20style-black-000000.svg\n   :alt: code style: black\n   :target: https://github.com/python/black\n\nintroduction\n------------\n\nthis is an mit licensed `flake8 <https://gitlab.com/pycqa/flake8>`_ plugin\nfor validating python code style with the command line code formatting tool\n`black <https://github.com/python/black>`_. it is available to install from\nthe `python package index (pypi) <https://pypi.org/project/flake8-black/>`_.\n\nblack, *\"the uncompromising code formatter\"*, is normally run to edit your\npython code in place to match their coding style, a strict subset of the\n`pep 8 style guide <https://www.python.org/dev/peps/pep-0008/>`_.\n\nthe point of this plugin is to be able to run ``black --check ...`` from\nwithin the ``flake8`` plugin ecosystem. you might use this via a ``git``\npre-commit hook, or as part of your continuous integration testing.\n\nif you are using `pre-commit <https://pre-commit.com/>`_ configure it to call\nblack and/or flake8 directly - you do not need flake8-black at all.\n\nflake8 validation codes\n-----------------------\n\nearly versions of flake8 assumed a single character prefix for the validation\ncodes, which became problematic with collisions in the plugin ecosystem. since\nv3.0, flake8 has supported longer prefixes, therefore this plugin uses ``blk``\nas its prefix.\n\n====== =======================================================================\ncode   description (*and notes*)\n------ -----------------------------------------------------------------------\nblk100 black would make changes.\nblk9## internal error (*various, listed below*):\nblk900 failed to load file: ...\nblk901 invalid input.\nblk997 invalid toml file: ...\nblk998 could not access flake8 line length setting (*no longer used*).\nblk999 unexpected exception.\n====== =======================================================================\n\nnote that if your python code has a syntax error, ``black --check ...`` would\nreport this as an error. likewise ``flake8 ...`` will by default report the\nsyntax error, but importantly it does not seem to then call the plugins, so\nyou will *not* get an additional ``blk`` error.\n\n\ninstallation\n------------\n\npython 3.7 or later is required, but ``black`` can be used on python code\nwritten for older versions of python.\n\nyou can install ``flake8-black`` using ``pip``, which should install ``flake8``\nand ``black`` as well if not already present::\n\n    $ pip install flake8-black\n\nalternatively, if you are using the anaconda packaging system, the following\ncommand will install the plugin with its dependencies::\n\n    $ conda install -c conda-forge flake8-black\n\nthe new validator should be automatically included when using ``flake8`` which\nmay now report additional validation codes starting with ``blk`` (as defined\nabove). for example::\n\n    $ flake8 example.py\n\nyou can request only the ``blk`` codes be shown using::\n\n    $ flake8 --select blk example.py\n\npython package management\n-------------------------\n\nwe covered using pip or conda by hand above. if you are using a pypi based\npython dependency system like pipenv or poetry, you may run into complications\nbecause at the time of writing all the black releases to pypi have been tagged\nas pre-releases (beta code). `pep440 handling of pre-releases\n<https://www.python.org/dev/peps/pep-0440/#handling-of-pre-releases>`_\ncould be more explicit here.\n\nfor pipenv, flake8-black v0.2.0 onwards should just work.\n\nfor poetry, include this in your ``pyproject.toml`` configuration file::\n\n    [tool.poetry.dev-dependencies]\n    ...\n    black = { version = \"*\", allow-prereleases = true }\n    ...\n\nin either case, for large projects you should consider pinning the exact\nversion of black you want to use as their updates do sometimes introduce\nchanges which would show up as new ``blk100`` violations via flake8.\n\nconfiguration\n-------------\n\nwe assume you are familiar with `flake8 configuration\n<http://flake8.pycqa.org/en/latest/user/configuration.html>`_ and\n`black configuration\n<https://black.readthedocs.io/en/stable/usage_and_configuration/the_basics.html#configuration-via-a-file>`_.\n\nwe recommend using the following settings in your ``flake8`` configuration,\nfor example in your ``.flake8``, ``setup.cfg``, or ``tox.ini`` file::\n\n    [flake8]\n    # recommend matching the black line length (default 88),\n    # rather than using the flake8 default of 79:\n    max-line-length = 88\n    extend-ignore =\n        # see https://github.com/pycqa/pycodestyle/issues/373\n        e203,\n\nnote currently ``pycodestyle`` gives false positives on the spaces ``black``\nuses for slices, which ``flake8`` reports as ``e203: whitespace before ':'``.\nuntil `pyflakes issue 373 <https://github.com/pycqa/pycodestyle/issues/373>`_\nis fixed, and ``flake8`` is updated, we suggest disabling this style check.\n\nseparately ``pyproject.toml`` is used for ``black`` configuration - if this\nfile is found, the plugin will look at the following ``black`` settings:\n\n* ``target_version``\n* ``skip_string_normalization``\n* ``line_length``\n\nyou can specify a particular path for the ``pyproject.toml`` file (e.g.\nglobal development settings) using ``--black-config filename`` at the\ncommand line, or using ``black-config = filename`` in your ``flake8``\nconfiguration file.\n\nignoring validation codes\n-------------------------\n\nusing the flake8 no-quality-assurance pragma comment is not recommended (e.g.\nadding ``# noqa: blk100`` to the first line black would change). instead use\nthe black pragma comments ``# fmt: off`` at the start, and ``# fmt: on`` at\nthe end, of any region of your code which should not be changed. or, add\n``# fmt: skip`` to single lines. or, exclude the entire file by name (see\nbelow).\n\nignoring files\n--------------\n\nthe plugin does *not* currently consider the ``black`` settings ``include``\nand ``exclude``, so if you have certain python files which you do not use\nwith ``black`` and have told it to ignore, you will *also* need to tell\n``flake8`` to ignore them (e.g. using ``exclude`` or ``per-file-ignores``).\n\n\nversion history\n---------------\n\n======= ============ ===========================================================\nversion release date changes\n------- ------------ -----------------------------------------------------------\nv0.3.6  2022-12-13   - use standard library ``tomllib`` on python 3.11 onwards,\n                       contribution from\n                       `ganden schaffner <https://github.com/gschaffner>`_.\nv0.3.5  2022-11-21   - fix regression clashing with ``flake8-rst-docstrings``.\nv0.3.4  2022-11-17   - replaces ``setup.py`` with ``pyproject.toml`` for build.\nv0.3.3  2022-05-16   - cope with line-length as string in pyproject.toml config.\nv0.3.2  2022-02-25   - use ``tomli`` library to match black, contribution from\n                       `brian helba <https://github.com/brianhelba>`_.\n                     - adopted github actions to replace travisci testing.\n                     - python 3.7 or later required.\nv0.3.0  2022-02-25   - requires black v22.1.0 (first non-beta release) or later.\n                     - support options \"preview\", \"skip-magic-trailing-comma\"\n                       in the black toml file, contribution from\n                       `ferdy <https://github.com/ferdynice>`_.\nv0.2.4  2022-01-30   - support black v22.1.0 which changed a function call,\n                       contribution from\n                       `raffaele salmaso <https://github.com/rsalmaso>`_.\nv0.2.3  2021-07-16   - made ``toml`` dependency explicit in ``setup.py``.\nv0.2.2  2021-07-16   - declared ``toml`` dependency (for black 21.7b0).\nv0.2.1  2020-07-25   - detect ``*.pyi`` files via extension.\nv0.2.0  2020-05-20   - minimum requirement on black 19.3b0 or later is now\n                       implicit. this is a workaround for `pipenv issue 3928\n                       <https://github.com/pypa/pipenv/issues/3928>`_. upgrade\n                       black if running flake8 gives an error like this:\n                       ``flake8 failed to load plugin \"blk\" due to __call__()\n                       got an unexpected keyword argument 'target_versions'.``\nv0.1.2  2020-05-18   - removed test broken by flake8 v3.8 change to resolve\n                       configuration files relative to current directory.\nv0.1.1  2019-08-26   - option to use a (global) black configuration file,\n                       contribution from\n                       `tomasz grining <https://github.com/098799>`_.\n                     - new ``blk997`` if can't parse ``pyproject.toml`` file.\n                     - logs configuration files, use ``-v`` or ``--verbose``.\n                     - fixed flake8 \"builtins\" parameter warning.\n                     - now requires black 19.3b0 or later.\nv0.1.0  2019-06-03   - uses main black settings from ``pyproject.toml``,\n                       contribution from `alex <https://github.com/adkosm>`_.\n                     - warning: now ignores flake8 ``max-line-length`` setting.\nv0.0.4  2019-03-15   - supports black 19.3b0 which changed a function call.\nv0.0.3  2019-02-21   - bug fix when ``w292 no newline at end of file`` applies,\n                       contribution from\n                       `sapphire becker <https://github.com/sapphire-janrain>`_.\nv0.0.2  2019-02-15   - document syntax error behaviour (no blk error reported).\nv0.0.1  2019-01-10   - initial public release.\n                     - passes flake8 ``max-line-length`` setting to black.\n======= ============ ===========================================================\n\n\ndevelopers\n----------\n\nthis plugin is on github at https://github.com/peterjc/flake8-black\n\ndevelopers may install the plugin from the git repository with optional build\ndependencies::\n\n    $ pip install -e .[develop]\n\nto make a new release once tested locally and online::\n\n    $ git tag vx.y.z\n    $ python -m build\n    $ git push origin master --tags\n    $ twine upload dist/flake8?black-x.y.z*\n\nthe pypi upload should trigger an automated pull request updating the\n`flake8-black conda-forge recipe\n<https://github.com/conda-forge/flake8-black-feedstock/blob/master/recipe/meta.yaml>`_.\n",
  "docs_url": null,
  "keywords": "black,formatting,style,flake8",
  "license": "mit",
  "name": "flake8-black",
  "package_url": "https://pypi.org/project/flake8-black/",
  "project_url": "https://pypi.org/project/flake8-black/",
  "project_urls": {
    "Bug Tracker": "https://github.com/peterjc/flake8-black/issues",
    "Documentation": "https://github.com/peterjc/flake8-black/blob/master/README.rst",
    "Homepage": "https://github.com/peterjc/flake8-black",
    "Source Code": "https://github.com/peterjc/flake8-black/"
  },
  "release_url": "https://pypi.org/project/flake8-black/0.3.6/",
  "requires_dist": [
    "flake8 (>=3)",
    "black (>=22.1.0)",
    "tomli ; python_version < \"3.11\"",
    "build ; extra == 'develop'",
    "twine ; extra == 'develop'"
  ],
  "requires_python": ">=3.7",
  "summary": "flake8 plugin to call black as a code style validator",
  "version": "0.3.6",
  "releases": [],
  "developers": [
    "p.j.a.cock@googlemail.com",
    "peter_j"
  ],
  "kwds": "flake8 black pycodestyle target_versions target_version",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_flake8_black",
  "homepage": "",
  "release_count": 20,
  "dependency_ids": [
    "pypi_black",
    "pypi_build",
    "pypi_flake8",
    "pypi_tomli",
    "pypi_twine"
  ]
}
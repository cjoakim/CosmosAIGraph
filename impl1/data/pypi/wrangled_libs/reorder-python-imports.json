{
  "classifiers": [
    "license :: osi approved :: mit license",
    "programming language :: python :: 3",
    "programming language :: python :: 3 :: only",
    "programming language :: python :: implementation :: cpython",
    "programming language :: python :: implementation :: pypy"
  ],
  "description": "[![build status](https://github.com/asottile/reorder-python-imports/actions/workflows/main.yml/badge.svg)](https://github.com/asottile/reorder-python-imports/actions/workflows/main.yml)\n[![pre-commit.ci status](https://results.pre-commit.ci/badge/github/asottile/reorder-python-imports/main.svg)](https://results.pre-commit.ci/latest/github/asottile/reorder-python-imports/main)\n\nreorder-python-imports\n======================\n\ntool for automatically reordering python imports.  similar to `isort` but\nuses static analysis more.\n\n\n## installation\n\n```bash\npip install reorder-python-imports\n```\n\n\n## console scripts\n\nconsult `reorder-python-imports --help` for the full set of options.\n\n`reorder-python-imports` takes filenames as positional arguments\n\ncommon options:\n\n- `--py##-plus`: [see below](#removing-obsolete-__future__-imports).\n- `--add-import` / `--remove-import`: [see below](#adding--removing-imports).\n- `--replace-import`: [see below](#replacing-imports).\n- `--application-directories`: by default, `reorder-python-imports` assumes\n  your project is rooted at `.`.  if this isn't true, tell it where your\n  import roots live.  for example, when using the popular `./src` layout you'd\n  use `--application-directories=.:src` (note: multiple paths are separated\n  using a `:`).\n- `--unclassifiable-application-module`: (may be specified multiple times)\n  modules names that are considered application modules.  this setting is\n  intended to be used for things like c modules which may not always appear on\n  the filesystem.\n\n## as a pre-commit hook\n\nsee [pre-commit](https://github.com/pre-commit/pre-commit) for instructions\n\nsample `.pre-commit-config.yaml`\n\n```yaml\n-   repo: https://github.com/asottile/reorder-python-imports\n    rev: v3.12.0\n    hooks:\n    -   id: reorder-python-imports\n```\n\n## what does it do?\n\n### separates imports into three sections\n\n```python\nimport sys\nimport pyramid\nimport reorder_python_imports\n```\n\nbecomes (stdlib, third party, first party)\n\n```python\nimport sys\n\nimport pyramid\n\nimport reorder_python_imports\n```\n\n### `import` imports before `from` imports\n\n```python\nfrom os import path\nimport sys\n```\n\nbecomes\n\n```python\nimport sys\nfrom os import path\n```\n\n### splits `from` imports\n\n```python\nfrom os.path import abspath, exists\n```\n\nbecomes\n\n```python\nfrom os.path import abspath\nfrom os.path import exists\n```\n\n### removes duplicate imports\n\n```python\nimport os\nimport os.path\nimport sys\nimport sys\n```\n\nbecomes\n\n```python\nimport os.path\nimport sys\n```\n\n## using `# noreorder`\n\nlines containing and after lines which contain a `# noreorder` comment will\nbe ignored.  additionally any imports that appear after non-whitespace\nnon-comment lines will be ignored.\n\nfor instance, these will not be changed:\n\n```python\nimport sys\n\ntry:  # not import, not whitespace\n    import foo\nexcept importerror:\n    pass\n```\n\n\n```python\nimport sys\n\nimport reorder_python_imports\n\nimport matplotlib  # noreorder\nmatplotlib.use('agg')\nimport matplotlib.pyplot as plt\n```\n\n```python\n# noreorder\nimport sys\nimport pyramid\nimport reorder_python_imports\n```\n\n## why this style?\n\nthe style chosen by `reorder-python-imports` has a single aim: reduce merge\nconflicts.\n\nby having a single import per line, multiple contributors can\nadd / remove imports from a single module without resulting in a conflict.\n\nconsider the following example which causes a merge conflict:\n\n```diff\n# developer 1\n-from typing import dict, list\n+from typing import any, dict, list\n```\n\n```diff\n# developer 2\n-from typing import dict, list\n+from typing import dict, list, tuple\n```\n\nno conflict with the style enforced by `reorder-python-imports`:\n\n```diff\n+from typing import any\n from typing import dict\n from typing import list\n+from typing import tuple\n```\n\n## adding / removing imports\n\nlet's say i want to enforce `absolute_import` across my codebase.  i can use:\n`--add-import 'from __future__ import absolute_import'`.\n\n```console\n$ cat test.py\nprint('hello world')\n$ reorder-python-imports --add-import 'from __future__ import absolute_import' test.py\nreordering imports in test.py\n$ cat test.py\nfrom __future__ import absolute_import\nprint('hello world')\n```\n\nlet's say i no longer care about supporting python 2.5, i can remove\n`from __future__ import with_statement` with\n`--remove-import 'from __future__ import with_statement'`\n\n```console\n$ cat test.py\nfrom __future__ import with_statement\nwith open('foo.txt', 'w') as foo_f:\n    foo_f.write('hello world')\n$ reorder-python-imports --remove-import 'from __future__ import with_statement' test.py\nreordering imports in test.py\n$ cat test.py\nwith open('foo.txt', 'w') as foo_f:\n    foo_f.write('hello world')\n```\n\n## replacing imports\n\nimports can be replaced with others automatically (if they provide the same\nnames).  this can be useful for factoring out compatibility libraries such\nas `six` (see below for automated `six` rewriting).\n\nthis rewrite avoids `nameerror`s as such it only occurs when:\n\n- the imported symbol is the same before and after\n- the import is a `from` import\n\nthe argument is specified as `orig.mod=new.mod` or with an optional\nchecked attribute `orig.mod=new.mod:attr`.  the checked attribute is useful\nfor renaming some imports from a module instead of a full module.\n\nfor example:\n\n```bash\n# full module move\n--replace-import six.moves.queue=queue\n# specific attribute move\n--replace-import six.moves=io:stringio\n```\n\n## removing obsolete `__future__` imports\n\nthe cli provides a few options to help \"burn the bridges\" with old python\nversions by removing `__future__` imports automatically.  each option implies\nall older versions.\n\n- `--py22-plus`: `nested_scopes`\n- `--py23-plus`: `generators`\n- `--py26-plus`: `with_statement`\n- `--py3-plus`: `division`, `absolute_import`, `print_function`,\n  `unicode_literals`\n- `--py37-plus`: `generator_stop`\n\n## removing / rewriting obsolete `six` imports\n\nwith `--py3-plus`, `reorder-python-imports` will also remove / rewrite imports\nfrom `six`.  rewrites follow the same rules as\n[replacing imports](#replacing-imports) above.\n\nfor example:\n\n```diff\n+import queue\n+from io import stringio\n+from urllib.parse import quote_plus\n+\n import six.moves.urllib.parse\n-from six.moves import queue\n-from six.moves import range\n-from six.moves import stringio\n-from six.moves.urllib.parse import quote_plus\n```\n\n## rewriting mock imports\n\nwith `--py3-plus`, `reorder-python-imports` will also rewrite various `mock` imports:\n\n```diff\n-from mock import patch\n+from unittest.mock import patch\n```\n\n## rewriting `mypy_extensions` and `typing_extension` imports\n\nwith `--py36-plus` and higher, `reorder-python-imports` will also rewrite\n`mypy_extensions` and `typing_extensions` imports ported to `typing`.\n\n```diff\n-from mypy_extensions import typeddict\n+from typing import typeddict\n```\n\n## rewriting pep 585 typing imports\n\nwith `--py39-plus` and higher, `reorder-python-imports` will replace imports\nwhich were moved out of the typing module in [pep 585].\n\n```diff\n-from typing import sequence\n+from collections.abc import sequence\n```\n\n[pep 585]: https://www.python.org/dev/peps/pep-0585/\n",
  "docs_url": null,
  "keywords": "",
  "license": "mit",
  "name": "reorder-python-imports",
  "package_url": "https://pypi.org/project/reorder-python-imports/",
  "project_url": "https://pypi.org/project/reorder-python-imports/",
  "project_urls": {
    "Homepage": "https://github.com/asottile/reorder-python-imports"
  },
  "release_url": "https://pypi.org/project/reorder-python-imports/3.12.0/",
  "requires_dist": [
    "classify-imports (>=4.1)"
  ],
  "requires_python": ">=3.8",
  "summary": "tool for reordering python imports",
  "version": "3.12.0",
  "releases": [],
  "developers": [
    "anthony_sottile",
    "asottile@umich.edu"
  ],
  "kwds": "reorder_python_imports reordering reorder absolute_import python",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_reorder_python_imports",
  "homepage": "https://github.com/asottile/reorder-python-imports",
  "release_count": 62,
  "dependency_ids": [
    "pypi_classify_imports"
  ]
}
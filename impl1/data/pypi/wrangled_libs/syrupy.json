{
  "classifiers": [
    "development status :: 5 - production/stable",
    "framework :: pytest",
    "intended audience :: developers",
    "license :: osi approved :: apache software license",
    "operating system :: os independent",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.12",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: software development :: libraries",
    "topic :: software development :: testing",
    "topic :: utilities"
  ],
  "description": "# syrupy\n\n<img align=\"right\" width=\"100px\" height=\"100px\" src=\"https://user-images.githubusercontent.com/2528959/69500147-85d71400-0ec6-11ea-867a-277881278e57.png\" alt=\"logo\">\n\n[![all contributors](https://img.shields.io/badge/all_contributors-2-orange.svg?style=flat-square)](#contributors) [![maturity badge - level 4](https://img.shields.io/badge/maturity-level%204%20--%20critical-brightgreen.svg)](https://github.com/tophat/getting-started/blob/master/scorecard.md) [![stage](https://img.shields.io/pypi/status/syrupy)](https://pypi.org/project/syrupy/) [![discord](https://img.shields.io/discord/809577721751142410?label=community%20chat)](https://discord.gg/yhk3gfczrk)\n\n![pytest>=5.1.0,<8.0.0](https://img.shields.io/badge/pytest-%3e%3d5.1.0,%20%3c8.0.0-green) [![pypi](https://img.shields.io/pypi/v/syrupy)](https://pypi.org/project/syrupy/) [![wheel](https://img.shields.io/pypi/wheel/syrupy)](https://pypi.org/project/syrupy/) ![pypi - python version](https://img.shields.io/pypi/pyversions/syrupy) [![pypi - downloads](https://img.shields.io/pypi/dm/syrupy)](https://pypi.org/project/syrupy/) [![pypi - license](https://img.shields.io/pypi/l/syrupy)](./license)\n\n![build status](https://github.com/tophat/syrupy/workflows/syrupy%20cicd/badge.svg) [![codecov](https://codecov.io/gh/tophat/syrupy/branch/main/graph/badge.svg)](https://codecov.io/gh/tophat/syrupy)\n\n![next status](https://github.com/tophat/syrupy/workflows/next%20version/badge.svg)\n\n## overview\n\nsyrupy is a zero-dependency [pytest](https://docs.pytest.org/en/latest/) snapshot plugin. it enables developers to write tests which assert immutability of computed results.\n\n## motivation\n\nthe most popular snapshot test plugin compatible with pytest has some core limitations which this package attempts to address by upholding some key values:\n\n- extensible: if a particular data type is not supported, users should be able to easily and quickly add support.\n- idiomatic: snapshot testing should fit naturally among other test cases in pytest, e.g. `assert x == snapshot` vs. `snapshot.assert_match(x)`.\n- soundness: snapshot tests should uncover even the most minute issues. unlike other snapshot libraries, syrupy will fail a test suite if a snapshot does not exist, not just on snapshot differences.\n\n## installation\n\n```shell\npython -m pip install syrupy\n```\n\n### migration from snapshottest\n\nyou cannot use syrupy alongside snapshottest due to argument conflicts. to ease migration, we've made syrupy aware of snapshottest call syntax. simply uninstall snapshottest and remove old snapshots:\n\n```shell\npip uninstall snapshottest -y;\nfind . -type d ! -path '*/\\.*' -name 'snapshots' | xargs rm -r\n```\n\n### pytest and python compatibility\n\nsyrupy will always be compatible with the latest version of python and pytest. if you're running an old version of python or pytest, you will need to use an older major version of syrupy:\n\n| syrupy version | python support | pytest support |\n| -------------- | -------------- | -------------- |\n| 4.x.x          | >3.8.1         | >=7            |\n| 3.x.x          | >=3.7, <4      | >=5.1, <8      |\n| 2.x.x          | >=3.6, <4      | >=5.1, <8      |\n\n## usage\n\n### basic usage\n\nin a pytest test file `test_file.py`:\n\n```python\ndef test_foo(snapshot):\n    actual = \"some computed value!\"\n    assert actual == snapshot\n```\n\nwhen you run `pytest`, the above test should fail due to a missing snapshot. re-run pytest with the update snapshots flag like so:\n\n```shell\npytest --snapshot-update\n```\n\na snapshot file should be generated under a `__snapshots__` directory in the same directory as `test_file.py`. the `__snapshots__` directory and all its children should be committed along with your test code.\n\n[![usage demo](https://tophat.github.io/syrupy/assets/usage_demo.gif)](https://asciinema.org/a/369462)\n\n#### custom objects\n\nthe default serializer supports all python built-in types and provides a sensible default for custom objects.\n\n#### representation\n\nif you need to customise your object snapshot, it is as easy as overriding the default `__repr__` implementation.\n\n```python\ndef __repr__(self) -> str:\n    return \"mycustomclass(...)\"\n```\n\nif you need bypass a custom object representation to use the amber standard, it is easy using the following helpers.\n\n```python\ndef test_object_as_named_tuple(snapshot):\n    assert snapshot == amberdataserializer.object_as_named_tuple(obj_with_custom_repr)\n```\n\n> see `test_snapshot_object_as_named_tuple_class` for an example on automatically doing this for all nested properties\n\n#### attributes\n\nif you want to limit what properties are serialized at a class type level you could either:\n\n**a**. provide a filter function to the snapshot [exclude](#exclude) configuration option.\n\n```py\ndef limit_foo_attrs(prop, path):\n    allowed_foo_attrs = {\"do\", \"not\", \"serialize\", \"these\", \"attrs\"}\n    return isinstance(path[-1][1], foo) and prop in allowed_foo_attrs\n\ndef test_bar(snapshot):\n    actual = foo(...)\n    assert actual == snapshot(exclude=limit_foo_attrs)\n```\n\n**b**. provide a filter function to the snapshot [include](#include) configuration option.\n\n```py\ndef limit_foo_attrs(prop, path):\n    allowed_foo_attrs = {\"only\", \"serialize\", \"these\", \"attrs\"}\n    return isinstance(path[-1][1], foo) and prop in allowed_foo_attrs\n\ndef test_bar(snapshot):\n    actual = foo(...)\n    assert actual == snapshot(include=limit_foo_attrs)\n```\n\n**c**. or override the `__dir__` implementation to control the attribute list.\n\n```py\nclass foo:\n    def __dir__(self):\n        return [\"only\", \"serialize\", \"these\", \"attrs\"]\n\ndef test_bar(snapshot):\n    actual = foo(...)\n    assert actual == snapshot\n```\n\nboth options will generate equivalent snapshots but the latter is only viable when you have control over the class implementation and do not need to share the exclusion logic with other objects.\n\n### cli options\n\nthese are the cli options exposed to `pytest` by the plugin.\n\n| option                         | description                                                                                                                    | default                                                                                                      |\n| ------------------------------ | ------------------------------------------------------------------------------------------------------------------------------ | ------------------------------------------------------------------------------------------------------------ |\n| `--snapshot-update`            | snapshots will be updated to match assertions and unused snapshots will be deleted.                                            | `false`                                                                                                      |\n| `--snapshot-details`           | includes details of unused snapshots (test name and snapshot location) in the final report.                                    | `false`                                                                                                      |\n| `--snapshot-warn-unused`       | prints a warning on unused snapshots rather than fail the test suite.                                                          | `false`                                                                                                      |\n| `--snapshot-default-extension` | use to change the default snapshot extension class.                                                                            | [ambersnapshotextension](https://github.com/tophat/syrupy/blob/main/src/syrupy/extensions/amber/__init__.py) |\n| `--snapshot-no-colors`         | disable test results output highlighting. equivalent to setting the environment variables `ansi_colors_disabled` or `no_color` | disabled by default if not in terminal.                                                                      |\n\n### assertion options\n\nthese are the options available on the `snapshot` assertion fixture.\nuse of these options are one shot and do not persist across assertions.\nfor more persistent options see [advanced usage](#advanced-usage).\n\n#### `matcher`\n\nthis allows you to match on a property path and value to control how specific object shapes are serialized.\n\nthe matcher is a function that takes two keyword arguments.\nit should return the replacement value to be serialized or the original unmutated value.\n\n| argument | description                                                                                                        |\n| -------- | ------------------------------------------------------------------------------------------------------------------ |\n| `data`   | current serializable value being matched on                                                                        |\n| `path`   | ordered path traversed to the current value e.g. `((\"a\", dict), (\"b\", dict))` from `{ \"a\": { \"b\": { \"c\": 1 } } }`} |\n\n**note:** do not mutate the value received as it could cause unintended side effects.\n\n##### built-in matchers\n\nsyrupy comes with built-in helpers that can be used to make easy work of using property matchers.\n\n###### `path_type(mapping=none, *, types=(), strict=true, regex=false)`\n\neasy way to build a matcher that uses the path and value type to replace serialized data.\nwhen strict, this will raise a `valueerror` if the types specified are not matched.\n\n| argument   | description                                                                                                                        |\n| ---------- | ---------------------------------------------------------------------------------------------------------------------------------- |\n| `mapping`  | dict of path string to tuples of class types, including primitives e.g. (myclass, uuid, datetime, int, str)                        |\n| `types`    | tuple of class types used if none of the path strings from the mapping are matched                                                 |\n| `strict`   | if a path is matched but the value at the path does not match one of the class types in the tuple then a `pathtypeerror` is raised |\n| `regex`    | if true, the `mapping` key is treated as a regular expression when matching paths                                                  |\n| `replacer` | called with any matched value and result is used as the replacement that is serialized. defaults to the object type when not given |\n\n```py\nfrom syrupy.matchers import path_type\n\ndef test_bar(snapshot):\n    actual = {\n      \"date_created\": datetime.now(),\n      \"value\": \"some computed value!!\",\n    }\n    assert actual == snapshot(matcher=path_type({\n      \"date_created\": (datetime,),\n      \"nested.path.id\": (int,),\n    }))\n```\n\n```py\n# name: test_bar\n  dict({\n    'date_created': datetime,\n    'value': 'some computed value!!',\n  })\n# ---\n```\n\n> note: when `regex` is `true` all matcher mappings are treated as regex patterns\n\n###### `path_value(mapping=none, *, **kwargs)`\n\nshares the same `kwargs` as `path_type` matcher, with the exception of the `mapping` argument type.\nonly runs replacement for objects at a matching path where the value of the mapping also matches the object data string repr.\n\n| argument  | description                                                |\n| --------- | ---------------------------------------------------------- |\n| `mapping` | dict of path string to object value string representations |\n\n> see `test_regex_matcher_str_value` for example usage.\n\n#### `exclude`\n\nthis allows you to filter out object properties from the serialized snapshot.\n\nthe exclude parameter takes a filter function that accepts two keyword arguments.\nit should return `true` if the property should be excluded, or `false` if the property should be included.\n\n| argument | description                                                                                                                                   |\n| -------- | --------------------------------------------------------------------------------------------------------------------------------------------- |\n| `prop`   | current property on the object, could be any hashable value that can be used to retrieve a value e.g. `1`, `\"prop_str\"`, `somehashableobject` |\n| `path`   | ordered path traversed to the current value e.g. `((\"a\", dict), (\"b\", dict))` from `{ \"a\": { \"b\": { \"c\": 1 } } }`}                            |\n\n##### built-in filters\n\nsyrupy comes with built-in helpers that can be used to make easy work of using the filter options.\n\n###### `props(prop_name, *prop_name)`\n\neasy way to build a filter that excludes based on string based property names.\n\ntakes an argument list of property names, with support for indexed iterables.\n\n```py\nfrom syrupy.filters import props\n\ndef test_bar(snapshot):\n    actual = {\n      \"id\": uuid.uuid4(),\n      \"list\": [1,2,3],\n    }\n    assert actual == snapshot(exclude=props(\"id\", \"1\"))\n```\n\n```py\n# name: test_bar\n  dict({\n    'list': list([\n      1,\n      3,\n    ]),\n  })\n# ---\n```\n\n###### `paths(path_string, *path_strings)`\n\neasy way to build a filter that uses full path strings delimited with `.`.\n\ntakes an argument list of path strings.\n\n```py\nfrom syrupy.filters import paths\n\ndef test_bar(snapshot):\n    actual = {\n      \"date\": datetime.now(),\n      \"list\": [1,2,3],\n    }\n    assert actual == snapshot(exclude=paths(\"date\", \"list.1\"))\n```\n\n```py\n# name: test_bar\n  dict({\n    'list': list([\n      1,\n      3,\n    ]),\n  })\n# ---\n```\n\n#### `include`\n\nthis allows you filter an object's properties to a subset using a predicate. this is the opposite of [exclude](#exclude). all the same property filters supporterd by [exclude](#exclude) are supported for `include`.\n\nthe include parameter takes a filter function that accepts two keyword arguments.\nit should return `true` if the property should be include, or `false` if the property should not be included.\n\n| argument | description                                                                                                                                   |\n| -------- | --------------------------------------------------------------------------------------------------------------------------------------------- |\n| `prop`   | current property on the object, could be any hashable value that can be used to retrieve a value e.g. `1`, `\"prop_str\"`, `somehashableobject` |\n| `path`   | ordered path traversed to the current value e.g. `((\"a\", dict), (\"b\", dict))` from `{ \"a\": { \"b\": { \"c\": 1 } } }`}\n\nnote that `include` has some caveats which make it a bit more difficult to use than `exclude`. both `include` and `exclude` are evaluated for each key of an object before traversing down nested paths. this means if you want to include a nested path, you must include all parents of the nested path, otherwise the nested child will never be reached to be evaluated against the include predicate. for example:\n\n```py\nobj = {\n    \"nested\": { \"key\": true }\n}\nassert obj == snapshot(include=paths(\"nested\", \"nested.key\"))\n```\n\nthe extra \"nested\" is required, otherwise the nested dictionary will never be searched -- it'd get pruned too early.\n\nto avoid adding duplicate path parts, we provide a convenient `paths_include` which supports a list/tuple instead of a string for each path to match:\n\n```py\nobj = {\n    \"other\": false,\n    \"nested\": { \"key\": true }\n}\nassert obj == snapshot(include=paths_include([\"other\"], [\"nested\", \"key\"]))\n```\n\n#### `extension_class`\n\nthis is a way to modify how the snapshot matches and serializes your data in a single assertion.\n\n```py\ndef test_foo(snapshot):\n    actual_svg = \"<svg></svg>\"\n    assert actual_svg == snapshot(extension_class=svgimagesnapshotextension)\n```\n\n#### `diff`\n\nthis is an option to snapshot only the diff between the actual object and a previous snapshot, with the `diff` argument being the previous snapshot `index`/`name`.\n\n```py\ndef test_diff(snapshot):\n    actual0 = [1,2,3,4]\n    actual1 = [0,1,3,4]\n\n    assert actual0 == snapshot\n    assert actual1 == snapshot(diff=0)\n    # this is equivalent to the lines above\n    # must use the index name to diff when given\n    assert actual0 == snapshot(name='snap_name')\n    assert actual1 == snapshot(diff='snap_name')\n```\n\n##### built-in extensions\n\nsyrupy comes with a few built-in preset configurations for you to choose from. you should also feel free to extend the `abstractsyrupyextension` if your project has a need not captured by one our built-ins.\n\n- **`ambersnapshotextension`**: this is the default extension which generates `.ambr` files. serialization of most data types are supported.\n  - line control characters are normalised when snapshots are generated i.e. `\\r` and `\\n` characters are all written as `\\n`. this is to allow interoperability of snapshots between operating systems that use disparate line control characters.\n- **`singlefilesnapshotextension`**: unlike the `ambersnapshotextension`, which groups all tests within a single test file into a singular snapshot file, this extension creates one `.raw` file per test case.\n- **`pngimagesnapshotextension`**: an extension of single file, this should be used to produce `.png` files from a byte string.\n- **`svgimagesnapshotextension`**: another extension of single file. this produces `.svg` files from an svg string.\n- **`jsonsnapshotextension`**: another extension of single file. this produces `.json` files from dictionaries and lists.\n\n#### `name`\n\nby default, if you make multiple snapshot assertions within a single test case, an auto-increment identifier will be used to index the snapshots. you can override this behaviour by specifying a custom snapshot name to use in place of the auto-increment number.\n\n```py\ndef test_case(snapshot):\n    assert \"actual\" == snapshot(name=\"case_a\")\n    assert \"other\" == snapshot(name=\"case_b\")\n```\n\n> _warning_: if you use a custom name, you must make sure the name is not re-used within a test case.\n\n### advanced usage\n\nby overriding the provided [`abstractsnapshotextension`](https://github.com/tophat/syrupy/tree/main/src/syrupy/extensions/base.py) you can implement varied custom behaviours.\n\nsee examples of how syrupy can be used and extended in the [test examples](https://github.com/tophat/syrupy/tree/main/tests/examples).\n\n#### overriding defaults\n\nit is possible to override `include`, `exclude`, `matchers` and `extension_class` on a more global level just once, \ninstead of every time per test. by default, after every assertion the modified values per snapshot assert are reverted\nto their default values. however, it is possible to override those default values with ones you would like persisted, \nwhich will be treated as the new defaults.\n\nto achieve that you can use `snapshot.with_defaults`, which will create new instance of `snapshotassertion` with the provided values.\n\n`snapshot.use_extension` is retained for compatibility. however, it is limited to only overriding the default extension class.\n\n#### jsonsnapshotextension\n\nthis extension can be useful when testing api responses, or when you have to deal with long dictionaries that are cumbersome to validate inside a test. for example:\n\n```python\nimport pytest\n\nfrom syrupy.extensions.json import jsonsnapshotextension\n\n@pytest.fixture\ndef snapshot_json(snapshot):\n    return snapshot.with_defaults(extension_class=jsonsnapshotextension)\n    # or return snapshot.use_extension(jsonsnapshotextension)\n\n\ndef test_api_call(client, snapshot_json):\n    resp = client.post(\"/endpoint\")\n    assert resp.status_code == 200\n    assert snapshot_json == resp.json()\n```\n\napi responses often contain dynamic data, like ids or dates. you can still validate and store other data of a response by leveraging syrupy matchers. for example:\n\n```py\nfrom datetime import datetime\n\nfrom syrupy.matchers import path_type\n\ndef test_api_call(client, snapshot_json):\n    resp = client.post(\"/user\", json={\"name\": \"jane\"})\n    assert resp.status_code == 201\n\n    matcher = path_type({\n      \"id\": (int,),\n      \"registeredat\": (datetime,)\n    })\n    assert snapshot_json(matcher=matcher) == resp.json()\n```\n\nthe generated snapshot:\n\n```json\n{\n  \"id\": \"<class 'int'>\",\n  \"registeredat\": \"<class 'datetime'>\",\n  \"name\": \"jane\"\n}\n```\n\nor a case where the value needs to be replaced using a condition e.g. file path string\n\n```py\nimport re\n\nfrom syrupy.matchers import path_type\n\ndef test_matches_generated_string_value(snapshot, tmp_file):\n    matcher = path_value(\n        mapping={\"file_path\": r\"\\w+://(.*/)+dir/filename.txt\"},\n        replacer=lambda _, match: match[0].replace(match[1], \"<tmp-file-path>/\"),\n        types=(str,),\n    )\n\n    assert snapshot(matcher=matcher) == tmp_file\n```\n\nthe generated snapshot:\n\n```json\n{\n  \"name\": \"temp files\",\n  \"file_path\": \"scheme://<tmp-file-path>/dir/filename.txt\"\n}\n```\n\n### extending syrupy\n\n- [custom defaults](https://github.com/tophat/syrupy/tree/main/tests/examples/test_custom_defaults.py)\n- [custom snapshot directory 1](https://github.com/tophat/syrupy/tree/main/tests/examples/test_custom_snapshot_directory.py)\n- [custom snapshot directory 2](https://github.com/tophat/syrupy/tree/main/tests/examples/test_custom_snapshot_directory_2.py)\n- [custom snapshot name](https://github.com/tophat/syrupy/tree/main/tests/examples/test_custom_snapshot_name.py)\n- [custom object snapshots](https://github.com/tophat/syrupy/tree/main/tests/examples/test_custom_object_repr.py)\n- [custom comparator](https://github.com/tophat/syrupy/tree/main/tests/integration/test_custom_comparator.py)\n- [jpeg image extension](https://github.com/tophat/syrupy/tree/main/tests/examples/test_custom_image_extension.py)\n- [built-in image extensions](https://github.com/tophat/syrupy/blob/main/tests/syrupy/extensions/image/test_image_svg.py)\n\n## uninstalling\n\n```python\npip uninstall syrupy\n```\n\nif you have decided not to use syrupy for your project after giving us a try, we'd love to get your feedback. please create a github issue if applicable, or drop a comment in our [discord server](https://discord.gg/yhk3gfczrk).\n\n## benchmarks\n\nbenchmarks are automatically published to <https://tophat.github.io/syrupy/dev/bench/>.\n\n## known limitations\n\n- `pytest-xdist` support only partially exists. there is no issue when it comes to reads however when you attempt to run `pytest --snapshot-update`, if running with more than 1 process, the ability to detect unused snapshots is disabled. see [#535](https://github.com/tophat/syrupy/issues/535) for more information.\n\n_we welcome contributions to patch these known limitations._\n\n## contributing\n\nfeel free to open a pr or github issue. contributions welcome!\n\nto develop locally, clone this repository and run `. script/bootstrap` to install test dependencies. you can then use `invoke --list` to see available commands.\n\n### see contributing [guide](https://github.com/tophat/syrupy/tree/main/contributing.md)\n\n## contributors\n\n<!-- all-contributors-list:start - do not remove or modify this section -->\n<!-- prettier-ignore-start -->\n<!-- markdownlint-disable -->\n<table>\n  <tbody>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://noahnu.com\"><img src=\"https://avatars0.githubusercontent.com/u/1297096?v=4?s=100\" width=\"100px;\" alt=\"noah\"/><br /><sub><b>noah</b></sub></a><br /><a href=\"#infra-noahnu\" title=\"infrastructure (hosting, build-tools, etc)\">\ud83d\ude87</a> <a href=\"#ideas-noahnu\" title=\"ideas, planning, & feedback\">\ud83e\udd14</a> <a href=\"https://github.com/tophat/syrupy/commits?author=noahnu\" title=\"code\">\ud83d\udcbb</a> <a href=\"https://github.com/tophat/syrupy/commits?author=noahnu\" title=\"documentation\">\ud83d\udcd6</a> <a href=\"https://github.com/tophat/syrupy/commits?author=noahnu\" title=\"tests\">\u26a0\ufe0f</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://emmanuel.ogbizi.com\"><img src=\"https://avatars0.githubusercontent.com/u/2528959?v=4?s=100\" width=\"100px;\" alt=\"emmanuel ogbizi\"/><br /><sub><b>emmanuel ogbizi</b></sub></a><br /><a href=\"https://github.com/tophat/syrupy/commits?author=iamogbz\" title=\"code\">\ud83d\udcbb</a> <a href=\"#design-iamogbz\" title=\"design\">\ud83c\udfa8</a> <a href=\"#infra-iamogbz\" title=\"infrastructure (hosting, build-tools, etc)\">\ud83d\ude87</a> <a href=\"https://github.com/tophat/syrupy/commits?author=iamogbz\" title=\"documentation\">\ud83d\udcd6</a> <a href=\"https://github.com/tophat/syrupy/commits?author=iamogbz\" title=\"tests\">\u26a0\ufe0f</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/adamlazz\"><img src=\"https://avatars3.githubusercontent.com/u/453811?v=4?s=100\" width=\"100px;\" alt=\"adam lazzarato\"/><br /><sub><b>adam lazzarato</b></sub></a><br /><a href=\"https://github.com/tophat/syrupy/commits?author=adamlazz\" title=\"documentation\">\ud83d\udcd6</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://mcataford.github.io\"><img src=\"https://avatars2.githubusercontent.com/u/6210361?v=4?s=100\" width=\"100px;\" alt=\"marc cataford\"/><br /><sub><b>marc cataford</b></sub></a><br /><a href=\"https://github.com/tophat/syrupy/commits?author=mcataford\" title=\"code\">\ud83d\udcbb</a> <a href=\"https://github.com/tophat/syrupy/commits?author=mcataford\" title=\"tests\">\u26a0\ufe0f</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://msrose.github.io\"><img src=\"https://avatars3.githubusercontent.com/u/3495264?v=4?s=100\" width=\"100px;\" alt=\"michael rose\"/><br /><sub><b>michael rose</b></sub></a><br /><a href=\"https://github.com/tophat/syrupy/commits?author=msrose\" title=\"code\">\ud83d\udcbb</a> <a href=\"https://github.com/tophat/syrupy/commits?author=msrose\" title=\"tests\">\u26a0\ufe0f</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://fashionablenonsense.com/\"><img src=\"https://avatars0.githubusercontent.com/u/3112159?v=4?s=100\" width=\"100px;\" alt=\"jimmy jia\"/><br /><sub><b>jimmy jia</b></sub></a><br /><a href=\"https://github.com/tophat/syrupy/commits?author=taion\" title=\"code\">\ud83d\udcbb</a> <a href=\"https://github.com/tophat/syrupy/commits?author=taion\" title=\"tests\">\u26a0\ufe0f</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://stevenloria.com\"><img src=\"https://avatars2.githubusercontent.com/u/2379650?v=4?s=100\" width=\"100px;\" alt=\"steven loria\"/><br /><sub><b>steven loria</b></sub></a><br /><a href=\"#infra-sloria\" title=\"infrastructure (hosting, build-tools, etc)\">\ud83d\ude87</a></td>\n    </tr>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/arturbalabanov\"><img src=\"https://avatars1.githubusercontent.com/u/3062003?v=4?s=100\" width=\"100px;\" alt=\"artur balabanov\"/><br /><sub><b>artur balabanov</b></sub></a><br /><a href=\"https://github.com/tophat/syrupy/commits?author=arturbalabanov\" title=\"code\">\ud83d\udcbb</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://huonw.github.io/\"><img src=\"https://avatars1.githubusercontent.com/u/1203825?v=4?s=100\" width=\"100px;\" alt=\"huon wilson\"/><br /><sub><b>huon wilson</b></sub></a><br /><a href=\"https://github.com/tophat/syrupy/commits?author=huonw\" title=\"code\">\ud83d\udcbb</a> <a href=\"https://github.com/tophat/syrupy/issues?q=author%3ahuonw\" title=\"bug reports\">\ud83d\udc1b</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/eaculb\"><img src=\"https://avatars.githubusercontent.com/u/31480498?v=4?s=100\" width=\"100px;\" alt=\"elizabeth culbertson\"/><br /><sub><b>elizabeth culbertson</b></sub></a><br /><a href=\"https://github.com/tophat/syrupy/commits?author=eaculb\" title=\"code\">\ud83d\udcbb</a> <a href=\"https://github.com/tophat/syrupy/commits?author=eaculb\" title=\"tests\">\u26a0\ufe0f</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/joakimnordling\"><img src=\"https://avatars.githubusercontent.com/u/6637576?v=4?s=100\" width=\"100px;\" alt=\"joakim nordling\"/><br /><sub><b>joakim nordling</b></sub></a><br /><a href=\"https://github.com/tophat/syrupy/issues?q=author%3ajoakimnordling\" title=\"bug reports\">\ud83d\udc1b</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/bendidi\"><img src=\"https://avatars.githubusercontent.com/u/22003440?v=4?s=100\" width=\"100px;\" alt=\"ouail\"/><br /><sub><b>ouail</b></sub></a><br /><a href=\"https://github.com/tophat/syrupy/commits?author=bendidi\" title=\"code\">\ud83d\udcbb</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/fbjorn\"><img src=\"https://avatars.githubusercontent.com/u/9670990?v=4?s=100\" width=\"100px;\" alt=\"denis\"/><br /><sub><b>denis</b></sub></a><br /><a href=\"https://github.com/tophat/syrupy/commits?author=fbjorn\" title=\"code\">\ud83d\udcbb</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/n0124\"><img src=\"https://avatars.githubusercontent.com/u/29734397?v=4?s=100\" width=\"100px;\" alt=\"n0124\"/><br /><sub><b>n0124</b></sub></a><br /><a href=\"https://github.com/tophat/syrupy/commits?author=n0124\" title=\"code\">\ud83d\udcbb</a></td>\n    </tr>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/dtczest\"><img src=\"https://avatars.githubusercontent.com/u/97055299?v=4?s=100\" width=\"100px;\" alt=\"dtczest\"/><br /><sub><b>dtczest</b></sub></a><br /><a href=\"https://github.com/tophat/syrupy/issues?q=author%3adtczest\" title=\"bug reports\">\ud83d\udc1b</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/spagh-eddie\"><img src=\"https://avatars.githubusercontent.com/u/58013020?v=4?s=100\" width=\"100px;\" alt=\"eddie darling\"/><br /><sub><b>eddie darling</b></sub></a><br /><a href=\"https://github.com/tophat/syrupy/commits?author=spagh-eddie\" title=\"documentation\">\ud83d\udcd6</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/darrenburns\"><img src=\"https://avatars.githubusercontent.com/u/5740731?v=4?s=100\" width=\"100px;\" alt=\"darrenburns\"/><br /><sub><b>darrenburns</b></sub></a><br /><a href=\"https://github.com/tophat/syrupy/commits?author=darrenburns\" title=\"documentation\">\ud83d\udcd6</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/mhwaage\"><img src=\"https://avatars.githubusercontent.com/u/57612883?v=4?s=100\" width=\"100px;\" alt=\"magnus heskestad waage\"/><br /><sub><b>magnus heskestad waage</b></sub></a><br /><a href=\"https://github.com/tophat/syrupy/issues?q=author%3amhwaage\" title=\"bug reports\">\ud83d\udc1b</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/herb\"><img src=\"https://avatars.githubusercontent.com/u/139780?v=4?s=100\" width=\"100px;\" alt=\"herbert ho\"/><br /><sub><b>herbert ho</b></sub></a><br /><a href=\"https://github.com/tophat/syrupy/issues?q=author%3aherb\" title=\"bug reports\">\ud83d\udc1b</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/tolgaeren\"><img src=\"https://avatars.githubusercontent.com/u/794719?v=4?s=100\" width=\"100px;\" alt=\"tolga eren\"/><br /><sub><b>tolga eren</b></sub></a><br /><a href=\"https://github.com/tophat/syrupy/issues?q=author%3atolgaeren\" title=\"bug reports\">\ud83d\udc1b</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://johnkurkowski.com\"><img src=\"https://avatars.githubusercontent.com/u/299487?v=4?s=100\" width=\"100px;\" alt=\"john kurkowski\"/><br /><sub><b>john kurkowski</b></sub></a><br /><a href=\"https://github.com/tophat/syrupy/issues?q=author%3ajohn-kurkowski\" title=\"bug reports\">\ud83d\udc1b</a></td>\n    </tr>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://www.atharvaarya.tech/\"><img src=\"https://avatars.githubusercontent.com/u/55894364?v=4?s=100\" width=\"100px;\" alt=\"atharva arya\"/><br /><sub><b>atharva arya</b></sub></a><br /><a href=\"https://github.com/tophat/syrupy/commits?author=atharva-2001\" title=\"code\">\ud83d\udcbb</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/michaljelonek\"><img src=\"https://avatars.githubusercontent.com/u/7791528?v=4?s=100\" width=\"100px;\" alt=\"micha\u0142 jelonek\"/><br /><sub><b>micha\u0142 jelonek</b></sub></a><br /><a href=\"https://github.com/tophat/syrupy/commits?author=michaljelonek\" title=\"code\">\ud83d\udcbb</a></td>\n    </tr>\n  </tbody>\n</table>\n\n<!-- markdownlint-restore -->\n<!-- prettier-ignore-end -->\n\n<!-- all-contributors-list:end -->\n\nthis section is automatically generated via tagging the all-contributors bot in a pr:\n\n```text\n@all-contributors please add <username> for <contribution type>\n```\n\n## license\n\nsyrupy is licensed under [apache license version 2.0](https://github.com/tophat/syrupy/tree/main/license).\n\n",
  "docs_url": null,
  "keywords": "",
  "license": "apache-2.0",
  "name": "syrupy",
  "package_url": "https://pypi.org/project/syrupy/",
  "project_url": "https://pypi.org/project/syrupy/",
  "project_urls": {
    "Homepage": "https://github.com/tophat/syrupy",
    "Repository": "https://github.com/tophat/syrupy"
  },
  "release_url": "https://pypi.org/project/syrupy/4.6.0/",
  "requires_dist": [
    "pytest (>=7.0.0,<8.0.0)"
  ],
  "requires_python": ">=3.8.1,<4",
  "summary": "pytest snapshot test utility",
  "version": "4.6.0",
  "releases": [],
  "developers": [
    "opensource@tophat.com",
    "top_hat_open_source"
  ],
  "kwds": "badge scorecard logo png customise",
  "license_kwds": "apache-2.0",
  "libtype": "pypi",
  "id": "pypi_syrupy",
  "homepage": "https://github.com/tophat/syrupy",
  "release_count": 102,
  "dependency_ids": [
    "pypi_pytest"
  ]
}
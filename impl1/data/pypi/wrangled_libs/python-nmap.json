{
  "classifiers": [
    "development status :: 5 - production/stable",
    "environment :: console",
    "intended audience :: developers",
    "intended audience :: system administrators",
    "license :: osi approved :: gnu general public license (gpl)",
    "operating system :: os independent",
    "programming language :: python",
    "topic :: system :: monitoring",
    "topic :: system :: networking",
    "topic :: system :: networking :: firewalls",
    "topic :: system :: networking :: monitoring"
  ],
  "description": "\n===========\npython-nmap\n===========\n\n|pypi latest| |pypi version| |pypi license|\n\npython-nmap is a python library which helps in using nmap port scanner. it allows to easilly manipulate nmap scan results and will be a perfect tool for systems administrators who want to automatize scanning task and reports. it also supports nmap script outputs.\n\nit can even be used asynchronously. results are returned one host at a time to a callback function defined by the user.\n\ndownload latest\n===============\n\n    python-nmap-0.4.1.tar.gz - 2015-08-21\n    md5sum is b466e4b2ef30a0b9c0cb80aac215fb79\n\nwarning : this version is intended to work with python 3.x. for python 2.x, please use python-nmap-0.1.4.tar.gz\n\ndownload development version\n============================\n\n\n.. code-block:: bash\n\n    $ hg clone https://bitbucket.org/xael/python-nmap\n\ninstallation\n============\n\nfrom the shell, uncompress python-nmap-0.4.1.tar.gz and then run make :\n\n.. code-block:: bash\n\n    $ tar xvzf python-nmap-0.4.1.tar.gz\n    $ cd python-nmap-0.4.1\n    $ python setup.py install\n\nor using pip\n\n.. code-block:: bash\n\n    $ pip install python-nmap\n\nnow you may invoke nmap from python\n\n\n.. code-block:: bash\n\n    $ python\n    python 2.6.4 (r264:75706, dec  7 2009, 18:45:15)\n    [gcc 4.4.1] on linux2\n    type \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n    >> import nmap\n\n\nusage\n=====\n\nfrom python/ipython:\n--------------------\n\n.. code-block:: python\n\n    >>> import nmap\n    >>> nm = nmap.portscanner()\n    >>> nm.scan('127.0.0.1', '22-443')\n    >>> nm.command_line()\n    'nmap -ox - -p 22-443 -sv 127.0.0.1'\n    >>> nm.scaninfo()\n    {'tcp': {'services': '22-443', 'method': 'connect'}}\n    >>> nm.all_hosts()\n    ['127.0.0.1']\n    >>> nm['127.0.0.1'].hostname()\n    'localhost'\n    >>> nm['127.0.0.1'].state()\n    'up'\n    >>> nm['127.0.0.1'].all_protocols()\n    ['tcp']\n    >>> nm['127.0.0.1']['tcp'].keys()\n    [80, 25, 443, 22, 111]\n    >>> nm['127.0.0.1'].has_tcp(22)\n    true\n    >>> nm['127.0.0.1'].has_tcp(23)\n    false\n    >>> nm['127.0.0.1']['tcp'][22]\n    {'state': 'open', 'reason': 'syn-ack', 'name': 'ssh'}\n    >>> nm['127.0.0.1'].tcp(22)\n    {'state': 'open', 'reason': 'syn-ack', 'name': 'ssh'}\n    >>> nm['127.0.0.1']['tcp'][22]['state']\n    'open'\n\n    >>> for host in nm.all_hosts():\n    >>>     print('----------------------------------------------------')\n    >>>     print('host : %s (%s)' % (host, nm[host].hostname()))\n    >>>     print('state : %s' % nm[host].state())\n    >>>     for proto in nm[host].all_protocols():\n    >>>         print('----------')\n    >>>         print('protocol : %s' % proto)\n    >>>\n    >>>         lport = nm[host][proto].keys()\n    >>>         lport.sort()\n    >>>         for port in lport:\n    >>>             print ('port : %s\\tstate : %s' % (port, nm[host][proto][port]['state']))\n    ----------------------------------------------------\n    host : 127.0.0.1 (localhost)\n    state : up\n    ----------\n    protocol : tcp\n    port : 22\tstate : open\n    port : 25\tstate : open\n    port : 80\tstate : open\n    port : 111\tstate : open\n    port : 443\tstate : open\n\n\nto export to a file\n-------------------\n\n.. code-block:: python\n\n    >>> print(nm.csv())\n    host;protocol;port;name;state;product;extrainfo;reason;version;conf\n    127.0.0.1;tcp;22;ssh;open;openssh;protocol 2.0;syn-ack;5.9p1 debian 5ubuntu1;10\n    127.0.0.1;tcp;25;smtp;open;exim smtpd;;syn-ack;4.76;10\n    127.0.0.1;tcp;53;domain;open;dnsmasq;;syn-ack;2.59;10\n    127.0.0.1;tcp;80;http;open;apache httpd;(ubuntu);syn-ack;2.2.22;10\n    127.0.0.1;tcp;111;rpcbind;open;;;syn-ack;;10\n    127.0.0.1;tcp;139;netbios-ssn;open;samba smbd;workgroup: workgroup;syn-ack;3.x;10\n    127.0.0.1;tcp;443;;open;;;syn-ack;;\n\n\nto check the network status\n---------------------------\n\n.. code-block:: python\n\n    >>> nm.scan(hosts='192.168.1.0/24', arguments='-n -sp -pe -pa21,23,80,3389')\n    >>> hosts_list = [(x, nm[x]['status']['state']) for x in nm.all_hosts()]\n    >>> for host, status in hosts_list:\n    >>>     print('{0}:{1}'.host)\n    192.168.1.0:down\n    192.168.1.1:up\n    192.168.1.10:down\n    192.168.1.100:down\n    192.168.1.101:down\n    192.168.1.102:down\n    192.168.1.103:down\n    192.168.1.104:down\n    192.168.1.105:down\n    [...]\n\n\nusing a scanner async\n---------------------\n\n.. code-block:: python\n\n    >>> nma = nmap.portscannerasync()\n    >>> def callback_result(host, scan_result):\n    >>>     print '------------------'\n    >>>     print host, scan_result\n    >>>\n    >>> nma.scan(hosts='192.168.1.0/30', arguments='-sp', callback=callback_result)\n    >>> while nma.still_scanning():\n    >>>     print(\"waiting >>>\")\n    >>>     nma.wait(2)   # you can do whatever you want but i choose to wait after the end of the scan\n    >>>\n    192.168.1.1 {'nmap': {'scanstats': {'uphosts': '1', 'timestr': 'mon jun  7 11:31:11 2010', 'downhosts': '0', 'totalhosts': '1', 'elapsed': '0.43'}, 'scaninfo': {}, 'command_line': 'nmap -ox - -sp 192.168.1.1'}, 'scan': {'192.168.1.1': {'status': {'state': 'up', 'reason': 'arp-response'}, 'hostname': 'neufbox'}}}\n    ------------------\n    192.168.1.2 {'nmap': {'scanstats': {'uphosts': '0', 'timestr': 'mon jun  7 11:31:11 2010', 'downhosts': '1', 'totalhosts': '1', 'elapsed': '0.29'}, 'scaninfo': {}, 'command_line': 'nmap -ox - -sp 192.168.1.2'}, 'scan': {'192.168.1.2': {'status': {'state': 'down', 'reason': 'no-response'}, 'hostname': ''}}}\n    ------------------\n    192.168.1.3 {'nmap': {'scanstats': {'uphosts': '0', 'timestr': 'mon jun  7 11:31:11 2010', 'downhosts': '1', 'totalhosts': '1', 'elapsed': '0.29'}, 'scaninfo': {}, 'command_line': 'nmap -ox - -sp 192.168.1.3'}, 'scan': {'192.168.1.3': {'status': {'state': 'down', 'reason': 'no-response'}, 'hostname': ''}}}\n    >>> nm = nmap.portscanneryield() >>> for progressive_result in nm.scan('127.0.0.1/24', '22-25'): >>> print(progressive_result)\n\n\nsee also example.py in archive file.\n\n\nusing a scanner async\n---------------------\n\n.. code-block:: python\n\n    >>> nm = nmap.portscanner()                                                                                                                                                                                                              \n    >>> nm.scan('127.0.0.1', '22-40043', timeout=10)\n    portscannertimeout: 'timeout from nmap process'\n\ncontributors\n============\n\n.. code-block:: text\n\n    steve 'ashcrow' milner\n    brian bustin\n    old.schepperhand\n    johan lundberg\n    thomas d. maaaaz\n    robert bost\n    david peltier\n    ed jones\n\n\nhomepage\n========\n\nhttp://xael.org/norman/python/python-nmap/\n\n\n.. |pypi version| image:: https://img.shields.io/pypi/pyversions/python-nmap.svg?maxage=2592000\n   :target: https://pypi.python.org/pypi/python-nmap\n.. |pypi license| image:: https://img.shields.io/pypi/l/python-nmap.svg?maxage=2592000\n   :target: https://pypi.python.org/pypi/python-nmap\n.. |pypi latest| image:: https://img.shields.io/pypi/v/python-nmap.svg?maxage=360\n   :target: https://pypi.python.org/pypi/python-nmap\n\n\nchangelog\n=========\n\n2021/10/26 (v0.7.1)\n-------------------\n\n   - fix setup.cfg\n   - fix build tools\n\n2020/03/02 (v0.7.0)\n-------------------\n\n   - add black and flake8 for development\n   - drop support for python2.7\n\n2020/02/28 (v0.6.4)\n-------------------\n\n  - add timeout parameter and portscannertimeout exception\n\n2018/09/23 (v0.6.3)\n-------------------\n\n  - refactor readme and changelog files for the pypi pattern and applying styles to the blocks for better visualization\n  - change setup.py to use an explicit version of python, since asynchronous tasks are not available for python 2.x\n  - add clean method to the makefile\n  - update manifest file\n  - update version and fix pep8 on nmap/nmap.py\n\n2017/01/07 (v0.6.2)\n-------------------\n\n\n2016/07/29 (v0.6.1)\n-------------------\n\n  - fix bug #22 unboundlocalerror in scan_progressive\n  - fix bug #23 scanning fails on nmap warnings\n  - fix bug #20: fix for empty <hostnames> values which results in blank csv output\n  - fix bug #18: print(nm.csv()) does not return any results\n  - fix bug #19: nmap program was not found in path\n  - fix bug #17: hostname is no longer reported\n\n\n2016/03/15 (v0.6.0)\n-------------------\n\n - add information about nmap special licence\n - licence precision for distributing python-nmap along with nmap\n\n2016/03/15 (v0.5.2)\n-------------------\n\n - add hostname to csv export\n\n2015/12/05 (v0.5.0-1)\n---------------------\n\n - updating example.py\n\n2015/11/18 (v0.5.0)\n-------------------\n\n - closes bugs :\n   - #11 display only one osclass/osmatch instead of multiple\n\n - change in data structure :\n   - osmatch is a list of osclass\n   - osclass is a list of dictionnary\n   - added cpe which is a list of string\n   - added portused which is a list of dictionnary\n\n   data structure for a host looks like :\n\n.. code-block:: python\n\n  {'addresses': {'ipv4': '127.0.0.1'},\n    'hostnames': [],\n    'osmatch': [{'accuracy': '98',\n                'line': '36241',\n                'name': 'juniper sa4000 ssl vpn gateway (ive os 7.0)',\n                'osclass': [{'accuracy': '98',\n                              'cpe': ['cpe:/h:juniper:sa4000',\n                                      'cpe:/o:juniper:ive_os:7'],\n                              'osfamily': 'ive os',\n                              'osgen': '7.x',\n                              'type': 'firewall',\n                              'vendor': 'juniper'}]},\n                {'accuracy': '91',\n                'line': '17374',\n                'name': 'citrix access gateway vpn gateway',\n                'osclass': [{'accuracy': '91',\n                              'cpe': [],\n                              'osfamily': 'embedded',\n                              'osgen': none,\n                              'type': 'proxy server',\n                              'vendor': 'citrix'}]}],\n    'portused': [{'portid': '443', 'proto': 'tcp', 'state': 'open'},\n                {'portid': '113', 'proto': 'tcp', 'state': 'closed'}],\n    'status': {'reason': 'syn-ack', 'state': 'up'},\n    'tcp': {113: {'conf': '3',\n                  'cpe': '',\n                  'extrainfo': '',\n                  'name': 'ident',\n                  'product': '',\n                  'reason': 'conn-refused',\n                  'state': 'closed',\n                  'version': ''},\n            443: {'conf': '10',\n                  'cpe': '',\n                  'extrainfo': '',\n                  'name': 'http',\n                  'product': 'juniper sa2000 or sa4000 vpn gateway http config',\n                  'reason': 'syn-ack',\n                  'state': 'open',\n                  'version': ''}},\n    'vendor': {}}\n\n\n2015/11/17 (v0.4.7)\n-------------------\n\n  - closes bugs:\n    - #10 error when trying to parse 'osclass' , 'osmatch'\n    removed addresses, hostnames, status, vendor, osclass, uptime, osmatch\n    from all_protocols()\n  - changed shebang line from python3 to python as it works with python2\n\n2015/11/13 (v0.4.6)\n-------------------\n\n  - closes bugs :\n    - #10 error when trying to parse 'osclass' , 'osmatch'\n\n2015/10/25 (v0.4.5)\n-------------------\n\n  - closes bugs :\n    - #9 can not pass ports with unicode string at scan function\n\n2015/10/17 (v0.4.4)\n-------------------\n\n  - closes bugs :\n    - #8 ipv6 async scanner doesn't work\n\n2015/09/11 (v0.4.3)\n-------------------\n\n  - change in url for __get_last_online_version\n\n2015/09/11 (v0.4.2)\n-------------------\n\n  - closes bugs :\n    - #7: error with empty hostname\n    - #6: windows support of close_fds if you redirect stdin/stdout/stderr\n\n2015/08/21 (v0.4.1)\n-------------------\n\n  - closes bugs :\n    - #5: only one hostname stored per host\n  - add hostnames() method which return the list of hostnames as a list of\n    dict [{'name':'hostname1', 'type':'ptr'}, {'name':'hostname2', 'type':'user'}]\n\n2015/08/01 (v0.4.0)\n-------------------\n\n  - closes bugs :\n    - #2: use close_fds in subprocess.popen\n    - #3: memory leak parsing xml using xml.dom.minidom\n  - corrects a bug in parsing osclass\n  - add nosetests for case testing\n  - removed test case in docstring\n\n2015/05/08 (v0.3.7)\n-------------------\n\n  - adding sudo parameter for scanning (idea from scupython)\n\n2015/05/08 (v0.3.6)\n-------------------\n\n  - correcting issue 7 : issues under windows\n\n2015/05/08 (v0.3.5)\n-------------------\n\n  - correcting a bug in all_protocols()\n  - correcting issue 8 : portscannerasync doesn't work in windows...\n\n2014/06/22 (v0.3.4)\n-------------------\n\n  - adding portscanneryield class with generator\n    >>> nm = nmap.portscanneryield()\n    >>> for i in nm.scan('127.0.0.1/24', '22-25'):\n    >>>     print(i)\n\n2014/03/13 (v0.3.3)\n-------------------\n\n - moving file example.py\n - adding function convert_nmap_output_to_encoding\n - adding vendor for mac address\n\n2013/09/23 (v0.3.2)\n-------------------\n\n - adding acces to cpe values under [host][proto][port]['cpe'] key\n\n2013/07/27 (v0.3.1)\n-------------------\n\n - bug correction on callback's assert in portscannerasync.scan\n   proposed by robert bost\n\n2013/06/23 (v0.3.0)\n-------------------\n\n - added support for nmap script engine\n\n.. code-block:: python\n\n  >>> r=nm.scan(hosts='127.0.0.1', ports='139', arguments=\"-sc \")\n  >>> print(nm._scan_result['scan']['127.0.0.1']['hostscript'])\n\n\n2013/02/24 (v0.2.7)\n-------------------\n\n  - added an address block in host scan result which contains ipv4, mac and other addresses :\n\n.. code-block:: python\n\n  nm = nmap.portscanner()\n  r = nm.scan(arguments='-ss -p t:22', hosts='192.168.1.3')\n  print r['scan']['192.168.1.3']['addresses']\n  {u'mac': u'02:50:43:f4:02:b1', u'ipv4': u'192.168.1.3'}\n\n  - adding a csv scan output as a string.\n  - changes examples.py to make it python3 compliant\n\n2012/12/13 (v0.2.6)\n-------------------\n\n  - patch from lundberg.johan\n  - bug correction : when nmap doesn't work displays stderr instead of stdout\n\n2012/11/23 (v0.2.5)\n-------------------\n\n  - corrected : issue 2: \"map.nmap.portscannererror: 'nmap program was not found in path'\" on centos\n  - corrected : issue 3: nmap.scan() short-circuits prematurely\n\n2011/11/09 (v0.2.4)\n-------------------\n\n  - implemented a request from santhosh edukulla <santhosh.edukulla@gmail.com> :\n    parse os scanning output\n  - error with multiple host specifications :\n    bug and patch from old.schepperhand@gmail.com\n\n2011/11/04\n----------\n\n  - bug in example.py : if no tcp port was open between 22-443\n\n2010/12/17 (v0.2.3)\n-------------------\n\n  - adding __get_last_online_version to check if current version is the last published\n\n2010/12/17 (v0.2.2)\n-------------------\n\n  - bug in handling nmap_error output (returned value was bin, string was expected)\n  - removed test strings form __init__.py file.\n\n2010/12/15 (v0.2.1)\n-------------------\n\n  - corrected bug in __init__.py about scope problem\n  - try to find nmap executable in known directories\n  - raise assertionerror when trying to call command_line, scaninfo, scanstats, has_host before scanning\n\n2010/12/14 (v0.2.0)\n-------------------\n\n  - make python-nmap works with python 3.x\n  - contribution from brian bustin <brian at bustin.us>\n\n2010/06/07 (v0.1.4)\n-------------------\n\n  - patches from steve 'ashcrow' milner <steve at gnulinux.net>\n  - remove shebang from __init__.py as it is not a runnable script\n  - allow use with alpha and beta nmap releases\n  - .has_key() is deprecated, replaced instances with in\n  - move to using the print function for python2 and 3 usage\n\n2010/06/04\n----------\n\n  - adding portscanner.listscan\n  - portscanner.scan now returns scan_result\n  - adding class portscannerasync (idea from steve 'ashcrow' milner <steve at gnulinux.net>)\n\n2010/06/03\n----------\n\n  - import on google code\n    svn checkout https://python-nmap.googlecode.com/svn/trunk/ python-nmap --username  xxxxx\n  - added portscanner.scanstats method\n  - updated example.py and documentation for pingsweep\n  - updated makefile for generating documentation\n\n2010/03/09\n----------\n\n  - modified packaging. v0.1.1 [norman]\n\n2010/03/08\n----------\n\n  - initial release. v0.1.0 [norman]\n",
  "docs_url": null,
  "keywords": "nmap",
  "license": "gpl-3.0.txt",
  "name": "python-nmap",
  "package_url": "https://pypi.org/project/python-nmap/",
  "project_url": "https://pypi.org/project/python-nmap/",
  "project_urls": {
    "Homepage": "http://xael.org/pages/python-nmap-en.html"
  },
  "release_url": "https://pypi.org/project/python-nmap/0.7.1/",
  "requires_dist": [],
  "requires_python": "",
  "summary": "this is a python class to use nmap and access scan results from python3",
  "version": "0.7.1",
  "releases": [],
  "developers": [
    "alexandre_norman",
    "norman@xael.org"
  ],
  "kwds": "nmap_error nmap convert_nmap_output_to_encoding portscannererror portscannerasync",
  "license_kwds": "gpl-3.0.txt",
  "libtype": "pypi",
  "id": "pypi_python_nmap",
  "homepage": "http://xael.org/pages/python-nmap-en.html",
  "release_count": 30,
  "dependency_ids": []
}
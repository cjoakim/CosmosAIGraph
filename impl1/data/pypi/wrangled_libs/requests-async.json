{
  "classifiers": [
    "development status :: 3 - alpha",
    "environment :: web environment",
    "intended audience :: developers",
    "license :: osi approved :: bsd license",
    "operating system :: os independent",
    "programming language :: python :: 3",
    "programming language :: python :: 3.6",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "topic :: internet :: www/http"
  ],
  "description": "**this work has been overtaken by the `http3` project:** https://www.encode.io/http3/\n\nwe now recommend using `http3.asyncclient()` for async/await support with a requests-compatible api.\n\n**note**: use `ipython` to try this from the console, since it supports `await`.\n\n```python\n>>> import http3\n>>> client = http3.asyncclient()\n>>> r = await client.get('https://www.example.org/')\n>>> r.status_code\n200\n>>> r.text\n'<!doctype html>\\n<html>\\n<head>\\n<title>example domain</title>...'\n```\n\n---\n\n# requests-async\n\nbrings support for `async`/`await` syntax to python's fabulous `requests` library.\n\n<p>\n<a href=\"https://travis-ci.org/encode/requests-async\">\n    <img src=\"https://travis-ci.org/encode/requests-async.svg?branch=master\" alt=\"build status\">\n</a>\n<a href=\"https://codecov.io/gh/encode/requests-async\">\n    <img src=\"https://codecov.io/gh/encode/requests-async/branch/master/graph/badge.svg\" alt=\"coverage\">\n</a>\n<a href=\"https://pypi.org/project/requests-async/\">\n    <img src=\"https://badge.fury.io/py/requests-async.svg?cache0\" alt=\"package version\">\n</a>\n</p>\n\n## requirements\n\n* python 3.6+\n\n## installation\n\n```shell\n$ pip install requests-async\n```\n\n## usage\n\njust use *the standard requests api*, but use `await` for making requests.\n\n**note**: use `ipython` to try this from the console, since it supports `await`.\n\n```python\nimport requests_async as requests\n\n\nresponse = await requests.get('https://example.org')\nprint(response.status_code)\nprint(response.text)\n```\n\nor use explicit sessions, with an async context manager.\n\n```python\nimport requests_async as requests\n\n\nasync with requests.session() as session:\n    response = await session.get('https://example.org')\n    print(response.status_code)\n    print(response.text)\n```\n\nthe `requests_async` package subclasses `requests`, so you're getting all the\nstandard behavior and api you'd expect.\n\n## streaming responses & requests\n\nthe `iter_content()` and `iter_lines()` methods are async iterators.\n\n```python\nresponse = await requests.get('https://example.org', stream=true)\nasync for chunk in response.iter_content():\n    ...\n```\n\nthe method signatures remain the same as the standard `requests` api:\n\n* `iter_content(chunk_size=1, decode_unicode=false)`\n* `iter_lines(chunk_size=512, decode_unicode=false, delimiter=none)`\n\nthe methods will yield text if `decode_unicode` is set and the response includes\nan encoding. otherwise the methods will yield bytes.\n\nyou can also stream request bodies. to do this you should use an asynchronous\ngenerator that yields bytes.\n\n```python\nasync def stream_body():\n    ...\n\nresponse = await requests.post('https://example.org', data=stream_body())\n```\n\n## mock requests\n\nin some situations, such as when you're testing a web application, you may\nnot want to make actual outgoing network requests, but would prefer instead\nto mock out the endpoints.\n\nyou can do this using the `asgisession`, which allows you to plug into\nany asgi application, instead of making actual network requests.\n\n```python\nimport requests_async\n\n#\u00a0create a mock service, with starlette, responder, quart, fastapi, bocadillo,\n# or any other asgi web framework.\nmock_app = ...\n\nif testing:\n    #\u00a0issue requests to the mocked application.\n    requests = requests_async.asgisession(mock_app)\nelse:\n    # make live network requests.\n    requests = requests_async.session()\n```\n\n## test client\n\nyou can also use `asgisession` as a test client for any asgi application.\n\nyou'll probably want to install `pytest` and `pytest-asyncio`, or something\nequivalent, to allow you to write `async` test cases.\n\n```python\nfrom requests_async import asgisession\nfrom myproject import app\nimport pytest\n\n@pytest.mark.asyncio\nasync def test_homepage():\n    client = asgisession(app)\n    response = await client.get(\"/\")\n    assert response.status_code == 200\n```\n\n## alternatives\n\n* the [`http3` package][http3] both sync and async http clients, with a requests-compatible api.\n* the [`aiohttp` package][aiohttp] provides an alternative client for making async http requests.\n\n[issues]: https://github.com/encode/requests-async/issues\n[aiohttp]: https://docs.aiohttp.org/en/stable/client.html\n[http3]: https://github.com/encode/http3",
  "docs_url": null,
  "keywords": "",
  "license": "bsd",
  "name": "requests-async",
  "package_url": "https://pypi.org/project/requests-async/",
  "project_url": "https://pypi.org/project/requests-async/",
  "project_urls": {
    "Homepage": "https://github.com/encode/requests-async"
  },
  "release_url": "https://pypi.org/project/requests-async/0.6.2/",
  "requires_dist": [],
  "requires_python": ">=3.6",
  "summary": "async-await support for `requests`.",
  "version": "0.6.2",
  "releases": [],
  "developers": [
    "tom@tomchristie.com",
    "tom_christie"
  ],
  "kwds": "requests_async http3 api http asyncclient",
  "license_kwds": "bsd",
  "libtype": "pypi",
  "id": "pypi_requests_async",
  "homepage": "https://github.com/encode/requests-async",
  "release_count": 15,
  "dependency_ids": []
}
{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: developers",
    "license :: osi approved :: apache software license",
    "programming language :: python :: 3",
    "topic :: text processing"
  ],
  "description": "junitparser -- pythonic junit/xunit result xml parser\n======================================================\n\n.. image:: https://github.com/weiwei/junitparser/workflows/build/badge.svg?branch=master\n   :target: https://github.com/weiwei/junitparser/actions\n.. image:: https://codecov.io/gh/weiwei/junitparser/branch/master/graph/badge.svg?token=uotlfrxnnk\n   :target: https://codecov.io/gh/weiwei/junitparser\n\njunitparser handles junit/xunit result xml files. use it to parse and manipulate\nexisting result xml files, or create new junit/xunit result xmls from scratch.\n\nfeatures\n--------\n\n* parse or modify existing junit/xunit xml files.\n* parse or modify non-standard or customized junit/xunit xml files, by monkey\n  patching existing element definitions.\n* create junit/xunit test results from scratch.\n* merge test result xml files.\n* specify xml parser. for example you can use lxml to speed things up.\n* invoke from command line, or `python -m junitparser`\n* python 2 and 3 support (as of nov 2020, 1/4 of the users are still on python \n  2, so there is no plan to drop python 2 support)\n\nnote on version 2\n-----------------\n\nversion 2 improved support for pytest result xml files by fixing a few issues, \nnotably that there could be multiple <failure> or <error> entries. there is a \nbreaking change that ``testcase.result`` is now a list instead of a single item.\nif you are using this attribute, please update your code accordingly.\n\ninstallation\n-------------\n\n::\n\n    pip install junitparser\n\nusage\n-----\n\nyou should be relatively familiar with the junit xml format. if not, run\n``pydoc`` on the exposed classes and functions to see how it's structured.\n\ncreate junit xml format reports from scratch\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nyou have some test result data, and you want to convert them into junit.xml\nformat.\n\n.. code-block:: python\n\n    from junitparser import testcase, testsuite, junitxml, skipped, error\n\n    # create cases\n    case1 = testcase('case1', 'class.name', 0.5) # params are optional\n    case1.classname = \"modified.class.name\" # specify or change case attrs\n    case1.result = [skipped()] # you can have a list of results\n    case2 = testcase('case2')\n    case2.result = [error('example error message', 'the_error_type')]\n\n    # create suite and add cases\n    suite = testsuite('suite1')\n    suite.add_property('build', '55')\n    suite.add_testcase(case1)\n    suite.add_testcase(case2)\n    suite.remove_testcase(case2)\n\n    #bulk add cases to suite\n    case3 = testcase('case3')\n    case4 = testcase('case4')\n    suite.add_testcases([case3, case4])\n\n    # add suite to junitxml\n    xml = junitxml()\n    xml.add_testsuite(suite)\n    xml.write('junit.xml')\n\nread and manipulate existing junit/xunit xml files\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nyou have some existing junit.xml files, and you want to modify the content.\n\n.. code-block:: python\n\n    from junitparser import junitxml\n\n    xml = junitxml.fromfile('/path/to/junit.xml')\n    for suite in xml:\n        # handle suites\n        for case in suite:\n            # handle cases\n    xml.write() # writes back to file\n\nit is also possible to use a custom parser. for example lxml provides a plethora\nof parsing options_. we can use them this way:\n\n.. code-block:: python\n\n    from lxml.etree import xmlparser, parse\n    from junitparser import junitxml\n\n    def parse_func(file_path):\n        xml_parser = xmlparser(huge_tree=true)\n        return parse(file_path, xml_parser)\n\n    xml = junitxml.fromfile('/path/to/junit.xml', parse_func)\n    # process xml...\n\n.. _options: https://lxml.de/api/lxml.etree.xmlparser-class.html\n\nmerge xml files\n~~~~~~~~~~~~~~~\n\nyou have two or more xml files, and you want to merge them into one.\n\n.. code-block:: python\n\n    from junitparser import junitxml\n\n    xml1 = junitxml.fromfile('/path/to/junit1.xml')\n    xml2 = junitxml.fromfile('/path/to/junit2.xml')\n\n    newxml = xml1 + xml2\n    # alternatively, merge in place\n    xml1 += xml2\n\nnote that it won't check for duplicate entries. you need to deal with them on\nyour own.\n\nschema support\n~~~~~~~~~~~~~~~\n\nby default junitparser supports the schema of windyroad_, which is a relatively\nsimple schema. \n\n.. _windyroad: https://github.com/windyroad/junit-schema/blob/master/junit.xsd\n\njunitparser also support extra schemas:\n\n.. code-block:: python\n\n    from junitparser.xunit2 import junitparser, testcase, testsuite, \\\n        rerunfailure\n    # these classes are redefined to support extra properties and attributes\n    # of the xunit2 schema.\n    suite = testsuite(\"mysuite\")\n    suite.system_err = \"system err\" # xunit2 specific property\n    case = testcase(\"mycase\")\n    rerun_failure = rerunfailure(\"not found\", \"404\") # case property\n    rerun_failure.stack_trace = \"stack\"\n    rerun_failure.system_err = \"e404\"\n    rerun_failure.system_out = \"not found\"\n    case.add_rerun_result(rerun_failure)\n\ncurrently supported schemas including:\n\n- xunit2_, supported by pytest, erlang/otp, maven surefire, cpptest, etc.\n\n.. _xunit2: https://github.com/jenkinsci/xunit-plugin/blob/xunit-2.3.2/src/main/resources/org/jenkinsci/plugins/xunit/types/model/xsd/junit-10.xsd\n\nprs are welcome to support more schemas.\n\ncreate xml with custom attributes\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nyou want to use an attribute that is not supported by default.\n\n.. code-block:: python\n\n    from junitparser import testcase, attr, intattr, floatattr\n\n    # add the custom attribute\n    testcase.id = intattr('id')\n    testcase.rate = floatattr('rate')\n    testcase.custom = attr('custom')\n    case = testcase()\n    case.id = 123\n    case.rate = 0.95\n    case.custom = 'foobar'\n\n\nhandling xml with custom element\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nthere may be once in 1000 years you want to it this way, but anyways.\nsuppose you want to add element customelement to testcase.\n\n.. code-block:: python\n\n    from junitparser import element, attr, testsuite\n\n    # create the new element by subclassing element,\n    # and add custom attributes to it.\n    class customelement(element):\n        _tag = 'custom'\n        foo = attr()\n        bar = attr()\n\n    testcase = testcase()\n    custom = customelement()\n    testcase.append(custom)\n    # to find a single sub-element:\n    testcase.child(customelement)\n    # to iterate over custom elements:\n    for custom in testcase.iterchildren(customelement):\n        ... # do things with custom element\n\nhandling custom xml attributes\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nsay you have some data stored in the xml as custom attributes and you want to\nread them out:\n\n.. code-block:: python\n\n    from junitparser import testcase, attr, junitxml\n\n    # create the new element by subclassing element or one of its child class,\n    # and add custom attributes to it.\n    class mytestcase(testcase):\n        foo = attr()\n\n    xml = junitxml.fromfile('/path/to/junit.xml')\n    for suite in xml:\n        # handle suites\n        for case in suite:\n            my_case = mytestcase.fromelem(case)\n            print(my_case.foo)\n\ncommand line\n------------\n\n.. code-block:: shell\n\n    $ junitparser --help\n    usage: junitparser [-h] [-v] {merge} ...\n\n    junitparser cli helper.\n\n    positional arguments:\n    {merge}        command\n      merge        merge junit xml format reports with junitparser.\n      verify       return a non-zero exit code if one of the testcases failed or errored.\n\n    optional arguments:\n    -h, --help     show this help message and exit\n    -v, --version  show program's version number and exit\n\n\n.. code-block:: shell\n\n    $ junitparser merge --help\n    usage: junitparser merge [-h] [--glob] paths [paths ...] output\n\n    positional arguments:\n      paths       original xml path(s).\n      output      merged xml path, setting to \"-\" will output console\n\n    optional arguments:\n      -h, --help  show this help message and exit\n      --glob      treat original xml path(s) as glob(s).\n      --suite-name suite_name\n                  name added to <testsuites>.\n\n.. code-block:: shell\n\n    $ junitparser verify --help\n    usage: junitparser verify [-h] [--glob] paths [paths ...]\n\n    positional arguments:\n      paths       xml path(s) of reports to verify.\n\n    optional arguments:\n      -h, --help  show this help message and exit\n      --glob      treat original xml path(s) as glob(s).\n\ntest\n----\n\nthe tests are written with python `unittest`, to run them, use pytest::\n\n    pytest test.py\n\ncontribute\n----------\n\nprs are welcome!\n",
  "docs_url": null,
  "keywords": "junit xunit xml parser",
  "license": "apache 2.0",
  "name": "junitparser",
  "package_url": "https://pypi.org/project/junitparser/",
  "project_url": "https://pypi.org/project/junitparser/",
  "project_urls": {
    "Homepage": "https://github.com/weiwei/junitparser"
  },
  "release_url": "https://pypi.org/project/junitparser/3.1.0/",
  "requires_dist": [
    "future"
  ],
  "requires_python": "",
  "summary": "manipulates junit/xunit result xml files",
  "version": "3.1.0",
  "releases": [],
  "developers": [
    "gastlygem@gmail.com",
    "weiwei_wang"
  ],
  "kwds": "junitxml junitparser junit2 junit1 xmlparser",
  "license_kwds": "apache 2.0",
  "libtype": "pypi",
  "id": "pypi_junitparser",
  "homepage": "https://github.com/weiwei/junitparser",
  "release_count": 42,
  "dependency_ids": [
    "pypi_future"
  ]
}
{
  "classifiers": [
    "development status :: 7 - inactive",
    "framework :: aws cdk",
    "framework :: aws cdk :: 1",
    "intended audience :: developers",
    "license :: osi approved",
    "operating system :: os independent",
    "programming language :: javascript",
    "programming language :: python :: 3 :: only",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "typing :: typed"
  ],
  "description": "task integrations for aws stepfunctions\n# tasks for aws step functions\n\n<!--begin stability banner-->---\n\n\n![end-of-support](https://img.shields.io/badge/end--of--support-critical.svg?style=for-the-badge)\n\n> aws cdk v1 has reached end-of-support on 2023-06-01.\n> this package is no longer being updated, and users should migrate to aws cdk v2.\n>\n> for more information on how to migrate, see the [*migrating to aws cdk v2* guide](https://docs.aws.amazon.com/cdk/v2/guide/migrating-v2.html).\n\n---\n<!--end stability banner-->\n\n[aws step functions](https://docs.aws.amazon.com/step-functions/latest/dg/welcome.html) is a web service that enables you to coordinate the\ncomponents of distributed applications and microservices using visual workflows.\nyou build applications from individual components that each perform a discrete\nfunction, or task, allowing you to scale and change applications quickly.\n\na [task](https://docs.aws.amazon.com/step-functions/latest/dg/amazon-states-language-task-state.html) state represents a single unit of work performed by a state machine.\nall work in your state machine is performed by tasks.\n\nthis module is part of the [aws cloud development kit](https://github.com/aws/aws-cdk) project.\n\n## table of contents\n\n* [tasks for aws step functions](#tasks-for-aws-step-functions)\n\n  * [table of contents](#table-of-contents)\n  * [task](#task)\n  * [paths](#paths)\n\n    * [inputpath](#inputpath)\n    * [outputpath](#outputpath)\n    * [resultpath](#resultpath)\n  * [task parameters from the state json](#task-parameters-from-the-state-json)\n  * [evaluate expression](#evaluate-expression)\n  * [api gateway](#api-gateway)\n\n    * [call rest api endpoint](#call-rest-api-endpoint)\n    * [call http api endpoint](#call-http-api-endpoint)\n  * [aws sdk](#aws-sdk)\n  * [athena](#athena)\n\n    * [startqueryexecution](#startqueryexecution)\n    * [getqueryexecution](#getqueryexecution)\n    * [getqueryresults](#getqueryresults)\n    * [stopqueryexecution](#stopqueryexecution)\n  * [batch](#batch)\n\n    * [submitjob](#submitjob)\n  * [codebuild](#codebuild)\n\n    * [startbuild](#startbuild)\n  * [dynamodb](#dynamodb)\n\n    * [getitem](#getitem)\n    * [putitem](#putitem)\n    * [deleteitem](#deleteitem)\n    * [updateitem](#updateitem)\n  * [ecs](#ecs)\n\n    * [runtask](#runtask)\n\n      * [ec2](#ec2)\n      * [fargate](#fargate)\n  * [emr](#emr)\n\n    * [create cluster](#create-cluster)\n    * [termination protection](#termination-protection)\n    * [terminate cluster](#terminate-cluster)\n    * [add step](#add-step)\n    * [cancel step](#cancel-step)\n    * [modify instance fleet](#modify-instance-fleet)\n    * [modify instance group](#modify-instance-group)\n  * [emr on eks](#emr-on-eks)\n\n    * [create virtual cluster](#create-virtual-cluster)\n    * [delete virtual cluster](#delete-virtual-cluster)\n    * [start job run](#start-job-run)\n  * [eks](#eks)\n\n    * [call](#call)\n  * [eventbridge](#eventbridge)\n\n    * [put events](#put-events)\n  * [glue](#glue)\n  * [glue databrew](#glue-databrew)\n  * [lambda](#lambda)\n  * [sagemaker](#sagemaker)\n\n    * [create training job](#create-training-job)\n    * [create transform job](#create-transform-job)\n    * [create endpoint](#create-endpoint)\n    * [create endpoint config](#create-endpoint-config)\n    * [create model](#create-model)\n    * [update endpoint](#update-endpoint)\n  * [sns](#sns)\n  * [step functions](#step-functions)\n\n    * [start execution](#start-execution)\n    * [invoke activity](#invoke-activity)\n  * [sqs](#sqs)\n\n## task\n\na task state represents a single unit of work performed by a state machine. in the\ncdk, the exact work to be done is determined by a class that implements `istepfunctionstask`.\n\naws step functions [integrates](https://docs.aws.amazon.com/step-functions/latest/dg/concepts-service-integrations.html) with some aws services so that you can call api\nactions, and coordinate executions directly from the amazon states language in\nstep functions. you can directly call and pass parameters to the apis of those\nservices.\n\n## paths\n\nin the amazon states language, a [path](https://docs.aws.amazon.com/step-functions/latest/dg/amazon-states-language-paths.html) is a string beginning with `$` that you\ncan use to identify components within json text.\n\nlearn more about input and output processing in step functions [here](https://docs.aws.amazon.com/step-functions/latest/dg/concepts-input-output-filtering.html)\n\n### inputpath\n\nboth `inputpath` and `parameters` fields provide a way to manipulate json as it\nmoves through your workflow. aws step functions applies the `inputpath` field first,\nand then the `parameters` field. you can first filter your raw input to a selection\nyou want using inputpath, and then apply parameters to manipulate that input\nfurther, or add new values. if you don't specify an `inputpath`, a default value\nof `$` will be used.\n\nthe following example provides the field named `input` as the input to the `task`\nstate that runs a lambda function.\n\n```python\n# fn: lambda.function\n\nsubmit_job = tasks.lambdainvoke(self, \"invoke handler\",\n    lambda_function=fn,\n    input_path=\"$.input\"\n)\n```\n\n### outputpath\n\ntasks also allow you to select a portion of the state output to pass to the next\nstate. this enables you to filter out unwanted information, and pass only the\nportion of the json that you care about. if you don't specify an `outputpath`,\na default value of `$` will be used. this passes the entire json node to the next\nstate.\n\nthe [response](https://docs.aws.amazon.com/lambda/latest/dg/api_invoke.html#api_invoke_responsesyntax) from a lambda function includes the response from the function\nas well as other metadata.\n\nthe following example assigns the output from the task to a field named `result`\n\n```python\n# fn: lambda.function\n\nsubmit_job = tasks.lambdainvoke(self, \"invoke handler\",\n    lambda_function=fn,\n    output_path=\"$.payload.result\"\n)\n```\n\n### resultselector\n\nyou can use [`resultselector`](https://docs.aws.amazon.com/step-functions/latest/dg/input-output-inputpath-params.html#input-output-resultselector)\nto manipulate the raw result of a task, map or parallel state before it is\npassed to [`resultpath`](###resultpath). for service integrations, the raw\nresult contains metadata in addition to the response payload. you can use\nresultselector to construct a json payload that becomes the effective result\nusing static values or references to the raw result or context object.\n\nthe following example extracts the output payload of a lambda function task and combines\nit with some static values and the state name from the context object.\n\n```python\n# fn: lambda.function\n\ntasks.lambdainvoke(self, \"invoke handler\",\n    lambda_function=fn,\n    result_selector={\n        \"lambda_output\": sfn.jsonpath.string_at(\"$.payload\"),\n        \"invoke_request_id\": sfn.jsonpath.string_at(\"$.sdkresponsemetadata.requestid\"),\n        \"static_value\": {\n            \"foo\": \"bar\"\n        },\n        \"state_name\": sfn.jsonpath.string_at(\"$.state.name\")\n    }\n)\n```\n\n### resultpath\n\nthe output of a state can be a copy of its input, the result it produces (for\nexample, output from a task state\u2019s lambda function), or a combination of its\ninput and result. use [`resultpath`](https://docs.aws.amazon.com/step-functions/latest/dg/input-output-resultpath.html) to control which combination of these is\npassed to the state output. if you don't specify an `resultpath`, a default\nvalue of `$` will be used.\n\nthe following example adds the item from calling dynamodb's `getitem` api to the state\ninput and passes it to the next state.\n\n```python\n# my_table: dynamodb.table\n\ntasks.dynamoputitem(self, \"putitem\",\n    item={\n        \"messageid\": tasks.dynamoattributevalue.from_string(\"message-id\")\n    },\n    table=my_table,\n    result_path=\"$.item\"\n)\n```\n\n\u26a0\ufe0f the `outputpath` is computed after applying `resultpath`. all service integrations\nreturn metadata as part of their response. when using `resultpath`, it's not possible to\nmerge a subset of the task output to the input.\n\n## task parameters from the state json\n\nmost tasks take parameters. parameter values can either be static, supplied directly\nin the workflow definition (by specifying their values), or a value available at runtime\nin the state machine's execution (either as its input or an output of a prior state).\nparameter values available at runtime can be specified via the `jsonpath` class,\nusing methods such as `jsonpath.stringat()`.\n\nthe following example provides the field named `input` as the input to the lambda function\nand invokes it asynchronously.\n\n```python\n# fn: lambda.function\n\n\nsubmit_job = tasks.lambdainvoke(self, \"invoke handler\",\n    lambda_function=fn,\n    payload=sfn.taskinput.from_json_path_at(\"$.input\"),\n    invocation_type=tasks.lambdainvocationtype.event\n)\n```\n\nyou can also use [intrinsic functions](https://docs.aws.amazon.com/step-functions/latest/dg/amazon-states-language-intrinsic-functions.html) available on `jsonpath`, for example `jsonpath.format()`.\nhere is an example of starting an athena query that is dynamically created using the task input:\n\n```python\nstart_query_execution_job = tasks.athenastartqueryexecution(self, \"athena start query\",\n    query_string=sfn.jsonpath.format(\"select contacts where year={};\", sfn.jsonpath.string_at(\"$.year\")),\n    query_execution_context=tasks.queryexecutioncontext(\n        database_name=\"interactions\"\n    ),\n    result_configuration=tasks.resultconfiguration(\n        encryption_configuration=tasks.encryptionconfiguration(\n            encryption_option=tasks.encryptionoption.s3_managed\n        ),\n        output_location=s3.location(\n            bucket_name=\"mybucket\",\n            object_key=\"myprefix\"\n        )\n    ),\n    integration_pattern=sfn.integrationpattern.run_job\n)\n```\n\neach service integration has its own set of parameters that can be supplied.\n\n## evaluate expression\n\nuse the `evaluateexpression` to perform simple operations referencing state paths. the\n`expression` referenced in the task will be evaluated in a lambda function\n(`eval()`). this allows you to not have to write lambda code for simple operations.\n\nexample: convert a wait time from milliseconds to seconds, concat this in a message and wait:\n\n```python\nconvert_to_seconds = tasks.evaluateexpression(self, \"convert to seconds\",\n    expression=\"$.waitmilliseconds / 1000\",\n    result_path=\"$.waitseconds\"\n)\n\ncreate_message = tasks.evaluateexpression(self, \"create message\",\n    # note: this is a string inside a string.\n    expression=\"`now waiting ${$.waitseconds} seconds...`\",\n    runtime=lambda_.runtime.nodejs_14_x,\n    result_path=\"$.message\"\n)\n\npublish_message = tasks.snspublish(self, \"publish message\",\n    topic=sns.topic(self, \"cool-topic\"),\n    message=sfn.taskinput.from_json_path_at(\"$.message\"),\n    result_path=\"$.sns\"\n)\n\nwait = sfn.wait(self, \"wait\",\n    time=sfn.waittime.seconds_path(\"$.waitseconds\")\n)\n\nsfn.statemachine(self, \"statemachine\",\n    definition=convert_to_seconds.next(create_message).next(publish_message).next(wait)\n)\n```\n\nthe `evaluateexpression` supports a `runtime` prop to specify the lambda\nruntime to use to evaluate the expression. currently, only runtimes\nof the node.js family are supported.\n\n## api gateway\n\nstep functions supports [api gateway](https://docs.aws.amazon.com/step-functions/latest/dg/connect-api-gateway.html) through the service integration pattern.\n\nhttp apis are designed for low-latency, cost-effective integrations with aws services, including aws lambda, and http endpoints.\nhttp apis support oidc and oauth 2.0 authorization, and come with built-in support for cors and automatic deployments.\nprevious-generation rest apis currently offer more features. more details can be found [here](https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-vs-rest.html).\n\n### call rest api endpoint\n\nthe `callapigatewayrestapiendpoint` calls the rest api endpoint.\n\n```python\nimport aws_cdk.aws_apigateway as apigateway\n\nrest_api = apigateway.restapi(self, \"myrestapi\")\n\ninvoke_task = tasks.callapigatewayrestapiendpoint(self, \"call rest api\",\n    api=rest_api,\n    stage_name=\"prod\",\n    method=tasks.httpmethod.get\n)\n```\n\nbe aware that the header values must be arrays. when passing the task token\nin the headers field `wait_for_task_token` integration, use\n`jsonpath.array()` to wrap the token in an array:\n\n```python\nimport aws_cdk.aws_apigateway as apigateway\n# api: apigateway.restapi\n\n\ntasks.callapigatewayrestapiendpoint(self, \"endpoint\",\n    api=api,\n    stage_name=\"stage\",\n    method=tasks.httpmethod.put,\n    integration_pattern=sfn.integrationpattern.wait_for_task_token,\n    headers=sfn.taskinput.from_object({\n        \"tasktoken\": sfn.jsonpath.array(sfn.jsonpath.task_token)\n    })\n)\n```\n\n### call http api endpoint\n\nthe `callapigatewayhttpapiendpoint` calls the http api endpoint.\n\n```python\nimport aws_cdk.aws_apigatewayv2 as apigatewayv2\n\nhttp_api = apigatewayv2.httpapi(self, \"myhttpapi\")\n\ninvoke_task = tasks.callapigatewayhttpapiendpoint(self, \"call http api\",\n    api_id=http_api.api_id,\n    api_stack=stack.of(http_api),\n    method=tasks.httpmethod.get\n)\n```\n\n### aws sdk\n\nstep functions supports calling [aws service's api actions](https://docs.aws.amazon.com/step-functions/latest/dg/supported-services-awssdk.html)\nthrough the service integration pattern.\n\nyou can use step functions' aws sdk integrations to call any of the over two hundred aws services\ndirectly from your state machine, giving you access to over nine thousand api actions.\n\n```python\n# my_bucket: s3.bucket\n\nget_object = tasks.callawsservice(self, \"getobject\",\n    service=\"s3\",\n    action=\"getobject\",\n    parameters={\n        \"bucket\": my_bucket.bucket_name,\n        \"key\": sfn.jsonpath.string_at(\"$.key\")\n    },\n    iam_resources=[my_bucket.arn_for_objects(\"*\")]\n)\n```\n\nuse camelcase for actions and pascalcase for parameter names.\n\nthe task automatically adds an iam statement to the state machine role's policy based on the\nservice and action called. the resources for this statement must be specified in `iamresources`.\n\nuse the `iamaction` prop to manually specify the iam action name in the case where the iam\naction name does not match with the api service/action name:\n\n```python\nlist_buckets = tasks.callawsservice(self, \"listbuckets\",\n    service=\"s3\",\n    action=\"listbuckets\",\n    iam_resources=[\"*\"],\n    iam_action=\"s3:listallmybuckets\"\n)\n```\n\n## athena\n\nstep functions supports [athena](https://docs.aws.amazon.com/step-functions/latest/dg/connect-athena.html) through the service integration pattern.\n\n### startqueryexecution\n\nthe [startqueryexecution](https://docs.aws.amazon.com/athena/latest/apireference/api_startqueryexecution.html) api runs the sql query statement.\n\n```python\nstart_query_execution_job = tasks.athenastartqueryexecution(self, \"start athena query\",\n    query_string=sfn.jsonpath.string_at(\"$.querystring\"),\n    query_execution_context=tasks.queryexecutioncontext(\n        database_name=\"mydatabase\"\n    ),\n    result_configuration=tasks.resultconfiguration(\n        encryption_configuration=tasks.encryptionconfiguration(\n            encryption_option=tasks.encryptionoption.s3_managed\n        ),\n        output_location=s3.location(\n            bucket_name=\"query-results-bucket\",\n            object_key=\"folder\"\n        )\n    )\n)\n```\n\n### getqueryexecution\n\nthe [getqueryexecution](https://docs.aws.amazon.com/athena/latest/apireference/api_getqueryexecution.html) api gets information about a single execution of a query.\n\n```python\nget_query_execution_job = tasks.athenagetqueryexecution(self, \"get query execution\",\n    query_execution_id=sfn.jsonpath.string_at(\"$.queryexecutionid\")\n)\n```\n\n### getqueryresults\n\nthe [getqueryresults](https://docs.aws.amazon.com/athena/latest/apireference/api_getqueryresults.html) api that streams the results of a single query execution specified by queryexecutionid from s3.\n\n```python\nget_query_results_job = tasks.athenagetqueryresults(self, \"get query results\",\n    query_execution_id=sfn.jsonpath.string_at(\"$.queryexecutionid\")\n)\n```\n\n### stopqueryexecution\n\nthe [stopqueryexecution](https://docs.aws.amazon.com/athena/latest/apireference/api_stopqueryexecution.html) api that stops a query execution.\n\n```python\nstop_query_execution_job = tasks.athenastopqueryexecution(self, \"stop query execution\",\n    query_execution_id=sfn.jsonpath.string_at(\"$.queryexecutionid\")\n)\n```\n\n## batch\n\nstep functions supports [batch](https://docs.aws.amazon.com/step-functions/latest/dg/connect-batch.html) through the service integration pattern.\n\n### submitjob\n\nthe [submitjob](https://docs.aws.amazon.com/batch/latest/apireference/api_submitjob.html) api submits an aws batch job from a job definition.\n\n```python\nimport aws_cdk.aws_batch as batch\n# batch_job_definition: batch.jobdefinition\n# batch_queue: batch.jobqueue\n\n\ntask = tasks.batchsubmitjob(self, \"submit job\",\n    job_definition_arn=batch_job_definition.job_definition_arn,\n    job_name=\"myjob\",\n    job_queue_arn=batch_queue.job_queue_arn\n)\n```\n\n## codebuild\n\nstep functions supports [codebuild](https://docs.aws.amazon.com/step-functions/latest/dg/connect-codebuild.html) through the service integration pattern.\n\n### startbuild\n\n[startbuild](https://docs.aws.amazon.com/codebuild/latest/apireference/api_startbuild.html) starts a codebuild project by project name.\n\n```python\nimport aws_cdk.aws_codebuild as codebuild\n\n\ncodebuild_project = codebuild.project(self, \"project\",\n    project_name=\"mytestproject\",\n    build_spec=codebuild.buildspec.from_object({\n        \"version\": \"0.2\",\n        \"phases\": {\n            \"build\": {\n                \"commands\": [\"echo \\\"hello, codebuild!\\\"\"\n                ]\n            }\n        }\n    })\n)\n\ntask = tasks.codebuildstartbuild(self, \"task\",\n    project=codebuild_project,\n    integration_pattern=sfn.integrationpattern.run_job,\n    environment_variables_override={\n        \"zone\": codebuild.buildenvironmentvariable(\n            type=codebuild.buildenvironmentvariabletype.plaintext,\n            value=sfn.jsonpath.string_at(\"$.envvariables.zone\")\n        )\n    }\n)\n```\n\n## dynamodb\n\nyou can call dynamodb apis from a `task` state.\nread more about calling dynamodb apis [here](https://docs.aws.amazon.com/step-functions/latest/dg/connect-ddb.html)\n\n### getitem\n\nthe [getitem](https://docs.aws.amazon.com/amazondynamodb/latest/apireference/api_getitem.html) operation returns a set of attributes for the item with the given primary key.\n\n```python\n# my_table: dynamodb.table\n\ntasks.dynamogetitem(self, \"get item\",\n    key={\"message_id\": tasks.dynamoattributevalue.from_string(\"message-007\")},\n    table=my_table\n)\n```\n\n### putitem\n\nthe [putitem](https://docs.aws.amazon.com/amazondynamodb/latest/apireference/api_putitem.html) operation creates a new item, or replaces an old item with a new item.\n\n```python\n# my_table: dynamodb.table\n\ntasks.dynamoputitem(self, \"putitem\",\n    item={\n        \"messageid\": tasks.dynamoattributevalue.from_string(\"message-007\"),\n        \"text\": tasks.dynamoattributevalue.from_string(sfn.jsonpath.string_at(\"$.bar\")),\n        \"totalcount\": tasks.dynamoattributevalue.from_number(10)\n    },\n    table=my_table\n)\n```\n\n### deleteitem\n\nthe [deleteitem](https://docs.aws.amazon.com/amazondynamodb/latest/apireference/api_deleteitem.html) operation deletes a single item in a table by primary key.\n\n```python\n# my_table: dynamodb.table\n\ntasks.dynamodeleteitem(self, \"deleteitem\",\n    key={\"messageid\": tasks.dynamoattributevalue.from_string(\"message-007\")},\n    table=my_table,\n    result_path=sfn.jsonpath.discard\n)\n```\n\n### updateitem\n\nthe [updateitem](https://docs.aws.amazon.com/amazondynamodb/latest/apireference/api_updateitem.html) operation edits an existing item's attributes, or adds a new item\nto the table if it does not already exist.\n\n```python\n# my_table: dynamodb.table\n\ntasks.dynamoupdateitem(self, \"updateitem\",\n    key={\n        \"messageid\": tasks.dynamoattributevalue.from_string(\"message-007\")\n    },\n    table=my_table,\n    expression_attribute_values={\n        \":val\": tasks.dynamoattributevalue.number_from_string(sfn.jsonpath.string_at(\"$.item.totalcount.n\")),\n        \":rand\": tasks.dynamoattributevalue.from_number(20)\n    },\n    update_expression=\"set totalcount = :val + :rand\"\n)\n```\n\n## ecs\n\nstep functions supports [ecs/fargate](https://docs.aws.amazon.com/step-functions/latest/dg/connect-ecs.html) through the service integration pattern.\n\n### runtask\n\n[runtask](https://docs.aws.amazon.com/step-functions/latest/dg/connect-ecs.html) starts a new task using the specified task definition.\n\n#### ec2\n\nthe ec2 launch type allows you to run your containerized applications on a cluster\nof amazon ec2 instances that you manage.\n\nwhen a task that uses the ec2 launch type is launched, amazon ecs must determine where\nto place the task based on the requirements specified in the task definition, such as\ncpu and memory. similarly, when you scale down the task count, amazon ecs must determine\nwhich tasks to terminate. you can apply task placement strategies and constraints to\ncustomize how amazon ecs places and terminates tasks. learn more about [task placement](https://docs.aws.amazon.com/amazonecs/latest/developerguide/task-placement.html)\n\nthe latest active revision of the passed task definition is used for running the task.\n\nthe following example runs a job from a task definition on ec2\n\n```python\nvpc = ec2.vpc.from_lookup(self, \"vpc\",\n    is_default=true\n)\n\ncluster = ecs.cluster(self, \"ec2cluster\", vpc=vpc)\ncluster.add_capacity(\"defaultautoscalinggroup\",\n    instance_type=ec2.instancetype(\"t2.micro\"),\n    vpc_subnets=ec2.subnetselection(subnet_type=ec2.subnettype.public)\n)\n\ntask_definition = ecs.taskdefinition(self, \"td\",\n    compatibility=ecs.compatibility.ec2\n)\n\ntask_definition.add_container(\"thecontainer\",\n    image=ecs.containerimage.from_registry(\"foo/bar\"),\n    memory_limit_mi_b=256\n)\n\nrun_task = tasks.ecsruntask(self, \"run\",\n    integration_pattern=sfn.integrationpattern.run_job,\n    cluster=cluster,\n    task_definition=task_definition,\n    launch_target=tasks.ecsec2launchtarget(\n        placement_strategies=[\n            ecs.placementstrategy.spread_across_instances(),\n            ecs.placementstrategy.packed_by_cpu(),\n            ecs.placementstrategy.randomly()\n        ],\n        placement_constraints=[\n            ecs.placementconstraint.member_of(\"blieptuut\")\n        ]\n    )\n)\n```\n\n#### fargate\n\naws fargate is a serverless compute engine for containers that works with amazon\nelastic container service (ecs). fargate makes it easy for you to focus on building\nyour applications. fargate removes the need to provision and manage servers, lets you\nspecify and pay for resources per application, and improves security through application\nisolation by design. learn more about [fargate](https://aws.amazon.com/fargate/)\n\nthe fargate launch type allows you to run your containerized applications without the need\nto provision and manage the backend infrastructure. just register your task definition and\nfargate launches the container for you. the latest active revision of the passed\ntask definition is used for running the task. learn more about\n[fargate versioning](https://docs.aws.amazon.com/amazonecs/latest/apireference/api_describetaskdefinition.html)\n\nthe following example runs a job from a task definition on fargate\n\n```python\nvpc = ec2.vpc.from_lookup(self, \"vpc\",\n    is_default=true\n)\n\ncluster = ecs.cluster(self, \"fargatecluster\", vpc=vpc)\n\ntask_definition = ecs.taskdefinition(self, \"td\",\n    memory_mi_b=\"512\",\n    cpu=\"256\",\n    compatibility=ecs.compatibility.fargate\n)\n\ncontainer_definition = task_definition.add_container(\"thecontainer\",\n    image=ecs.containerimage.from_registry(\"foo/bar\"),\n    memory_limit_mi_b=256\n)\n\nrun_task = tasks.ecsruntask(self, \"runfargate\",\n    integration_pattern=sfn.integrationpattern.run_job,\n    cluster=cluster,\n    task_definition=task_definition,\n    assign_public_ip=true,\n    container_overrides=[tasks.containeroverride(\n        container_definition=container_definition,\n        environment=[tasks.taskenvironmentvariable(name=\"some_key\", value=sfn.jsonpath.string_at(\"$.somekey\"))]\n    )],\n    launch_target=tasks.ecsfargatelaunchtarget()\n)\n```\n\n## emr\n\nstep functions supports amazon emr through the service integration pattern.\nthe service integration apis correspond to amazon emr apis but differ in the\nparameters that are used.\n\n[read more](https://docs.aws.amazon.com/step-functions/latest/dg/connect-emr.html) about the differences when using these service integrations.\n\n### create cluster\n\ncreates and starts running a cluster (job flow).\ncorresponds to the [`runjobflow`](https://docs.aws.amazon.com/emr/latest/apireference/api_runjobflow.html) api in emr.\n\n```python\ncluster_role = iam.role(self, \"clusterrole\",\n    assumed_by=iam.serviceprincipal(\"ec2.amazonaws.com\")\n)\n\nservice_role = iam.role(self, \"servicerole\",\n    assumed_by=iam.serviceprincipal(\"elasticmapreduce.amazonaws.com\")\n)\n\nauto_scaling_role = iam.role(self, \"autoscalingrole\",\n    assumed_by=iam.serviceprincipal(\"elasticmapreduce.amazonaws.com\")\n)\n\nauto_scaling_role.assume_role_policy.add_statements(\n    iam.policystatement(\n        effect=iam.effect.allow,\n        principals=[\n            iam.serviceprincipal(\"application-autoscaling.amazonaws.com\")\n        ],\n        actions=[\"sts:assumerole\"\n        ]\n    ))\n\ntasks.emrcreatecluster(self, \"create cluster\",\n    instances=tasks.emrcreatecluster.instancesconfigproperty(),\n    cluster_role=cluster_role,\n    name=sfn.taskinput.from_json_path_at(\"$.clustername\").value,\n    service_role=service_role,\n    auto_scaling_role=auto_scaling_role\n)\n```\n\nif you want to run multiple steps in [parallel](https://docs.aws.amazon.com/emr/latest/managementguide/emr-concurrent-steps.html),\nyou can specify the `stepconcurrencylevel` property. the concurrency range is between 1\nand 256 inclusive, where the default concurrency of 1 means no step concurrency is allowed.\n`stepconcurrencylevel` requires the emr release label to be 5.28.0 or above.\n\n```python\ntasks.emrcreatecluster(self, \"create cluster\",\n    instances=tasks.emrcreatecluster.instancesconfigproperty(),\n    name=sfn.taskinput.from_json_path_at(\"$.clustername\").value,\n    step_concurrency_level=10\n)\n```\n\n### termination protection\n\nlocks a cluster (job flow) so the ec2 instances in the cluster cannot be\nterminated by user intervention, an api call, or a job-flow error.\n\ncorresponds to the [`setterminationprotection`](https://docs.aws.amazon.com/step-functions/latest/dg/connect-emr.html) api in emr.\n\n```python\ntasks.emrsetclusterterminationprotection(self, \"task\",\n    cluster_id=\"clusterid\",\n    termination_protected=false\n)\n```\n\n### terminate cluster\n\nshuts down a cluster (job flow).\ncorresponds to the [`terminatejobflows`](https://docs.aws.amazon.com/emr/latest/apireference/api_terminatejobflows.html) api in emr.\n\n```python\ntasks.emrterminatecluster(self, \"task\",\n    cluster_id=\"clusterid\"\n)\n```\n\n### add step\n\nadds a new step to a running cluster.\ncorresponds to the [`addjobflowsteps`](https://docs.aws.amazon.com/emr/latest/apireference/api_addjobflowsteps.html) api in emr.\n\n```python\ntasks.emraddstep(self, \"task\",\n    cluster_id=\"clusterid\",\n    name=\"stepname\",\n    jar=\"jar\",\n    action_on_failure=tasks.actiononfailure.continue\n)\n```\n\n### cancel step\n\ncancels a pending step in a running cluster.\ncorresponds to the [`cancelsteps`](https://docs.aws.amazon.com/emr/latest/apireference/api_cancelsteps.html) api in emr.\n\n```python\ntasks.emrcancelstep(self, \"task\",\n    cluster_id=\"clusterid\",\n    step_id=\"stepid\"\n)\n```\n\n### modify instance fleet\n\nmodifies the target on-demand and target spot capacities for the instance\nfleet with the specified instancefleetname.\n\ncorresponds to the [`modifyinstancefleet`](https://docs.aws.amazon.com/emr/latest/apireference/api_modifyinstancefleet.html) api in emr.\n\n```python\ntasks.emrmodifyinstancefleetbyname(self, \"task\",\n    cluster_id=\"clusterid\",\n    instance_fleet_name=\"instancefleetname\",\n    target_on_demand_capacity=2,\n    target_spot_capacity=0\n)\n```\n\n### modify instance group\n\nmodifies the number of nodes and configuration settings of an instance group.\n\ncorresponds to the [`modifyinstancegroups`](https://docs.aws.amazon.com/emr/latest/apireference/api_modifyinstancegroups.html) api in emr.\n\n```python\ntasks.emrmodifyinstancegroupbyname(self, \"task\",\n    cluster_id=\"clusterid\",\n    instance_group_name=sfn.jsonpath.string_at(\"$.instancegroupname\"),\n    instance_group=tasks.emrmodifyinstancegroupbyname.instancegroupmodifyconfigproperty(\n        instance_count=1\n    )\n)\n```\n\n## emr on eks\n\nstep functions supports amazon emr on eks through the service integration pattern.\nthe service integration apis correspond to amazon emr on eks apis, but differ in the parameters that are used.\n\n[read more](https://docs.aws.amazon.com/step-functions/latest/dg/connect-emr-eks.html) about the differences when using these service integrations.\n\n[setting up](https://docs.aws.amazon.com/emr/latest/emr-on-eks-developmentguide/setting-up.html) the eks cluster is required.\n\n### create virtual cluster\n\nthe [createvirtualcluster](https://docs.aws.amazon.com/emr-on-eks/latest/apireference/api_createvirtualcluster.html) api creates a single virtual cluster that's mapped to a single kubernetes namespace.\n\nthe eks cluster containing the kubernetes namespace where the virtual cluster will be mapped can be passed in from the task input.\n\n```python\ntasks.emrcontainerscreatevirtualcluster(self, \"create a virtual cluster\",\n    eks_cluster=tasks.eksclusterinput.from_task_input(sfn.taskinput.from_text(\"clusterid\"))\n)\n```\n\nthe eks cluster can also be passed in directly.\n\n```python\nimport aws_cdk.aws_eks as eks\n\n# eks_cluster: eks.cluster\n\n\ntasks.emrcontainerscreatevirtualcluster(self, \"create a virtual cluster\",\n    eks_cluster=tasks.eksclusterinput.from_cluster(eks_cluster)\n)\n```\n\nby default, the kubernetes namespace that a virtual cluster maps to is \"default\", but a specific namespace within an eks cluster can be selected.\n\n```python\ntasks.emrcontainerscreatevirtualcluster(self, \"create a virtual cluster\",\n    eks_cluster=tasks.eksclusterinput.from_task_input(sfn.taskinput.from_text(\"clusterid\")),\n    eks_namespace=\"specified-namespace\"\n)\n```\n\n### delete virtual cluster\n\nthe [deletevirtualcluster](https://docs.aws.amazon.com/emr-on-eks/latest/apireference/api_deletevirtualcluster.html) api deletes a virtual cluster.\n\n```python\ntasks.emrcontainersdeletevirtualcluster(self, \"delete a virtual cluster\",\n    virtual_cluster_id=sfn.taskinput.from_json_path_at(\"$.virtualcluster\")\n)\n```\n\n### start job run\n\nthe [startjobrun](https://docs.aws.amazon.com/emr-on-eks/latest/apireference/api_startjobrun.html) api starts a job run. a job is a unit of work that you submit to amazon emr on eks for execution. the work performed by the job can be defined by a spark jar, pyspark script, or sparksql query. a job run is an execution of the job on the virtual cluster.\n\nrequired setup:\n\n* if not done already, follow the [steps](https://docs.aws.amazon.com/emr/latest/emr-on-eks-developmentguide/setting-up.html) to setup emr on eks and [create an eks cluster](https://docs.aws.amazon.com/cdk/api/latest/docs/aws-eks-readme.html#quick-start).\n* enable [cluster access](https://docs.aws.amazon.com/emr/latest/emr-on-eks-developmentguide/setting-up-cluster-access.html)\n* enable [iam role access](https://docs.aws.amazon.com/emr/latest/emr-on-eks-developmentguide/setting-up-enable-iam.html)\n\nthe following actions must be performed if the virtual cluster id is supplied from the task input. otherwise, if it is supplied statically in the state machine definition, these actions will be done automatically.\n\n* create an [iam role](https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-iam.role.html)\n* update the [role trust policy](https://docs.aws.amazon.com/emr/latest/emr-on-eks-developmentguide/setting-up-trust-policy.html) of the job execution role.\n\nthe job can be configured with spark submit parameters:\n\n```python\ntasks.emrcontainersstartjobrun(self, \"emr containers start job run\",\n    virtual_cluster=tasks.virtualclusterinput.from_virtual_cluster_id(\"de92jdei2910fwedz\"),\n    release_label=tasks.releaselabel.emr_6_2_0,\n    job_driver=tasks.jobdriver(\n        spark_submit_job_driver=tasks.sparksubmitjobdriver(\n            entry_point=sfn.taskinput.from_text(\"local:///usr/lib/spark/examples/src/main/python/pi.py\"),\n            spark_submit_parameters=\"--conf spark.executor.instances=2 --conf spark.executor.memory=2g --conf spark.executor.cores=2 --conf spark.driver.cores=1\"\n        )\n    )\n)\n```\n\nconfiguring the job can also be done via application configuration:\n\n```python\ntasks.emrcontainersstartjobrun(self, \"emr containers start job run\",\n    virtual_cluster=tasks.virtualclusterinput.from_virtual_cluster_id(\"de92jdei2910fwedz\"),\n    release_label=tasks.releaselabel.emr_6_2_0,\n    job_name=\"emr-containers-job\",\n    job_driver=tasks.jobdriver(\n        spark_submit_job_driver=tasks.sparksubmitjobdriver(\n            entry_point=sfn.taskinput.from_text(\"local:///usr/lib/spark/examples/src/main/python/pi.py\")\n        )\n    ),\n    application_config=[tasks.applicationconfiguration(\n        classification=tasks.classification.spark_defaults,\n        properties={\n            \"spark.executor.instances\": \"1\",\n            \"spark.executor.memory\": \"512m\"\n        }\n    )]\n)\n```\n\njob monitoring can be enabled if `monitoring.logging` is set true. this automatically generates an s3 bucket and cloudwatch logs.\n\n```python\ntasks.emrcontainersstartjobrun(self, \"emr containers start job run\",\n    virtual_cluster=tasks.virtualclusterinput.from_virtual_cluster_id(\"de92jdei2910fwedz\"),\n    release_label=tasks.releaselabel.emr_6_2_0,\n    job_driver=tasks.jobdriver(\n        spark_submit_job_driver=tasks.sparksubmitjobdriver(\n            entry_point=sfn.taskinput.from_text(\"local:///usr/lib/spark/examples/src/main/python/pi.py\"),\n            spark_submit_parameters=\"--conf spark.executor.instances=2 --conf spark.executor.memory=2g --conf spark.executor.cores=2 --conf spark.driver.cores=1\"\n        )\n    ),\n    monitoring=tasks.monitoring(\n        logging=true\n    )\n)\n```\n\notherwise, providing monitoring for jobs with existing log groups and log buckets is also available.\n\n```python\nimport aws_cdk.aws_logs as logs\n\n\nlog_group = logs.loggroup(self, \"log group\")\nlog_bucket = s3.bucket(self, \"s3 bucket\")\n\ntasks.emrcontainersstartjobrun(self, \"emr containers start job run\",\n    virtual_cluster=tasks.virtualclusterinput.from_virtual_cluster_id(\"de92jdei2910fwedz\"),\n    release_label=tasks.releaselabel.emr_6_2_0,\n    job_driver=tasks.jobdriver(\n        spark_submit_job_driver=tasks.sparksubmitjobdriver(\n            entry_point=sfn.taskinput.from_text(\"local:///usr/lib/spark/examples/src/main/python/pi.py\"),\n            spark_submit_parameters=\"--conf spark.executor.instances=2 --conf spark.executor.memory=2g --conf spark.executor.cores=2 --conf spark.driver.cores=1\"\n        )\n    ),\n    monitoring=tasks.monitoring(\n        log_group=log_group,\n        log_bucket=log_bucket\n    )\n)\n```\n\nusers can provide their own existing job execution role.\n\n```python\ntasks.emrcontainersstartjobrun(self, \"emr containers start job run\",\n    virtual_cluster=tasks.virtualclusterinput.from_task_input(sfn.taskinput.from_json_path_at(\"$.virtualclusterid\")),\n    release_label=tasks.releaselabel.emr_6_2_0,\n    job_name=\"emr-containers-job\",\n    execution_role=iam.role.from_role_arn(self, \"job-execution-role\", \"arn:aws:iam::xxxxxxxxxxxx:role/jobexecutionrole\"),\n    job_driver=tasks.jobdriver(\n        spark_submit_job_driver=tasks.sparksubmitjobdriver(\n            entry_point=sfn.taskinput.from_text(\"local:///usr/lib/spark/examples/src/main/python/pi.py\"),\n            spark_submit_parameters=\"--conf spark.executor.instances=2 --conf spark.executor.memory=2g --conf spark.executor.cores=2 --conf spark.driver.cores=1\"\n        )\n    )\n)\n```\n\n## eks\n\nstep functions supports amazon eks through the service integration pattern.\nthe service integration apis correspond to amazon eks apis.\n\n[read more](https://docs.aws.amazon.com/step-functions/latest/dg/connect-eks.html) about the differences when using these service integrations.\n\n### call\n\nread and write kubernetes resource objects via a kubernetes api endpoint.\ncorresponds to the [`call`](https://docs.aws.amazon.com/step-functions/latest/dg/connect-eks.html) api in step functions connector.\n\nthe following code snippet includes a task state that uses eks:call to list the pods.\n\n```python\nimport aws_cdk.aws_eks as eks\n\n\nmy_eks_cluster = eks.cluster(self, \"my sample cluster\",\n    version=eks.kubernetesversion.v1_18,\n    cluster_name=\"myekscluster\"\n)\n\ntasks.ekscall(self, \"call a eks endpoint\",\n    cluster=my_eks_cluster,\n    http_method=tasks.httpmethods.get,\n    http_path=\"/api/v1/namespaces/default/pods\"\n)\n```\n\n## eventbridge\n\nstep functions supports amazon eventbridge through the service integration pattern.\nthe service integration apis correspond to amazon eventbridge apis.\n\n[read more](https://docs.aws.amazon.com/step-functions/latest/dg/connect-eventbridge.html) about the differences when using these service integrations.\n\n### put events\n\nsend events to an eventbridge bus.\ncorresponds to the [`put-events`](https://docs.aws.amazon.com/step-functions/latest/dg/connect-eventbridge.html) api in step functions connector.\n\nthe following code snippet includes a task state that uses events:putevents to send an event to the default bus.\n\n```python\nimport aws_cdk.aws_events as events\n\n\nmy_event_bus = events.eventbus(self, \"eventbus\",\n    event_bus_name=\"myeventbus1\"\n)\n\ntasks.eventbridgeputevents(self, \"send an event to eventbridge\",\n    entries=[tasks.eventbridgeputeventsentry(\n        detail=sfn.taskinput.from_object({\n            \"message\": \"hello from step functions!\"\n        }),\n        event_bus=my_event_bus,\n        detail_type=\"messagefromstepfunctions\",\n        source=\"step.functions\"\n    )]\n)\n```\n\n## glue\n\nstep functions supports [aws glue](https://docs.aws.amazon.com/step-functions/latest/dg/connect-glue.html) through the service integration pattern.\n\nyou can call the [`startjobrun`](https://docs.aws.amazon.com/glue/latest/dg/aws-glue-api-jobs-runs.html#aws-glue-api-jobs-runs-startjobrun) api from a `task` state.\n\n```python\ntasks.gluestartjobrun(self, \"task\",\n    glue_job_name=\"my-glue-job\",\n    arguments=sfn.taskinput.from_object({\n        \"key\": \"value\"\n    }),\n    timeout=duration.minutes(30),\n    notify_delay_after=duration.minutes(5)\n)\n```\n\n## glue databrew\n\nstep functions supports [aws glue databrew](https://docs.aws.amazon.com/step-functions/latest/dg/connect-databrew.html) through the service integration pattern.\n\nyou can call the [`startjobrun`](https://docs.aws.amazon.com/databrew/latest/dg/api_startjobrun.html) api from a `task` state.\n\n```python\ntasks.gluedatabrewstartjobrun(self, \"task\",\n    name=\"databrew-job\"\n)\n```\n\n## lambda\n\n[invoke](https://docs.aws.amazon.com/lambda/latest/dg/api_invoke.html) a lambda function.\n\nyou can specify the input to your lambda function through the `payload` attribute.\nby default, step functions invokes lambda function with the state input (json path '$')\nas the input.\n\nthe following snippet invokes a lambda function with the state input as the payload\nby referencing the `$` path.\n\n```python\n# fn: lambda.function\n\ntasks.lambdainvoke(self, \"invoke with state input\",\n    lambda_function=fn\n)\n```\n\nwhen a function is invoked, the lambda service sends  [these response\nelements](https://docs.aws.amazon.com/lambda/latest/dg/api_invoke.html#api_invoke_responseelements)\nback.\n\n\u26a0\ufe0f the response from the lambda function is in an attribute called `payload`\n\nthe following snippet invokes a lambda function by referencing the `$.payload` path\nto reference the output of a lambda executed before it.\n\n```python\n# fn: lambda.function\n\ntasks.lambdainvoke(self, \"invoke with empty object as payload\",\n    lambda_function=fn,\n    payload=sfn.taskinput.from_object({})\n)\n\n# use the output of fn as input\ntasks.lambdainvoke(self, \"invoke with payload field in the state input\",\n    lambda_function=fn,\n    payload=sfn.taskinput.from_json_path_at(\"$.payload\")\n)\n```\n\nthe following snippet invokes a lambda and sets the task output to only include\nthe lambda function response.\n\n```python\n# fn: lambda.function\n\ntasks.lambdainvoke(self, \"invoke and set function response as task output\",\n    lambda_function=fn,\n    output_path=\"$.payload\"\n)\n```\n\nif you want to combine the input and the lambda function response you can use\nthe `payloadresponseonly` property and specify the `resultpath`. this will put the\nlambda function arn directly in the \"resource\" string, but it conflicts with the\nintegrationpattern, invocationtype, clientcontext, and qualifier properties.\n\n```python\n# fn: lambda.function\n\ntasks.lambdainvoke(self, \"invoke and combine function response with task input\",\n    lambda_function=fn,\n    payload_response_only=true,\n    result_path=\"$.fn\"\n)\n```\n\nyou can have step functions pause a task, and wait for an external process to\nreturn a task token. read more about the [callback pattern](https://docs.aws.amazon.com/step-functions/latest/dg/callback-task-sample-sqs.html#call-back-lambda-example)\n\nto use the callback pattern, set the `token` property on the task. call the step\nfunctions `sendtasksuccess` or `sendtaskfailure` apis with the token to\nindicate that the task has completed and the state machine should resume execution.\n\nthe following snippet invokes a lambda with the task token as part of the input\nto the lambda.\n\n```python\n# fn: lambda.function\n\ntasks.lambdainvoke(self, \"invoke with callback\",\n    lambda_function=fn,\n    integration_pattern=sfn.integrationpattern.wait_for_task_token,\n    payload=sfn.taskinput.from_object({\n        \"token\": sfn.jsonpath.task_token,\n        \"input\": sfn.jsonpath.string_at(\"$.somefield\")\n    })\n)\n```\n\n\u26a0\ufe0f the task will pause until it receives that task token back with a `sendtasksuccess` or `sendtaskfailure`\ncall. learn more about [callback with the task\ntoken](https://docs.aws.amazon.com/step-functions/latest/dg/connect-to-resource.html#connect-wait-token).\n\naws lambda can occasionally experience transient service errors. in this case, invoking lambda\nresults in a 500 error, such as `serviceexception`, `awslambdaexception`, or `sdkclientexception`.\nas a best practice, the `lambdainvoke` task will retry on those errors with an interval of 2 seconds,\na back-off rate of 2 and 6 maximum attempts. set the `retryonserviceexceptions` prop to `false` to\ndisable this behavior.\n\n## sagemaker\n\nstep functions supports [aws sagemaker](https://docs.aws.amazon.com/step-functions/latest/dg/connect-sagemaker.html) through the service integration pattern.\n\nif your training job or model uses resources from aws marketplace,\n[network isolation is required](https://docs.aws.amazon.com/sagemaker/latest/dg/mkt-algo-model-internet-free.html).\nto do so, set the `enablenetworkisolation` property to `true` for `sagemakercreatemodel` or `sagemakercreatetrainingjob`.\n\nto set environment variables for the docker container use the `environment` property.\n\n### create training job\n\nyou can call the [`createtrainingjob`](https://docs.aws.amazon.com/sagemaker/latest/dg/api_createtrainingjob.html) api from a `task` state.\n\n```python\ntasks.sagemakercreatetrainingjob(self, \"trainsagemaker\",\n    training_job_name=sfn.jsonpath.string_at(\"$.jobname\"),\n    algorithm_specification=tasks.algorithmspecification(\n        algorithm_name=\"blazingtext\",\n        training_input_mode=tasks.inputmode.file\n    ),\n    input_data_config=[tasks.channel(\n        channel_name=\"train\",\n        data_source=tasks.datasource(\n            s3_data_source=tasks.s3datasource(\n                s3_data_type=tasks.s3datatype.s3_prefix,\n                s3_location=tasks.s3location.from_json_expression(\"$.s3bucket\")\n            )\n        )\n    )],\n    output_data_config=tasks.outputdataconfig(\n        s3_output_location=tasks.s3location.from_bucket(s3.bucket.from_bucket_name(self, \"bucket\", \"mybucket\"), \"myoutputpath\")\n    ),\n    resource_config=tasks.resourceconfig(\n        instance_count=1,\n        instance_type=ec2.instancetype(sfn.jsonpath.string_at(\"$.instancetype\")),\n        volume_size=size.gibibytes(50)\n    ),  # optional: default is 1 instance of ec2 `m4.xlarge` with `10gb` volume\n    stopping_condition=tasks.stoppingcondition(\n        max_runtime=duration.hours(2)\n    )\n)\n```\n\n### create transform job\n\nyou can call the [`createtransformjob`](https://docs.aws.amazon.com/sagemaker/latest/dg/api_createtransformjob.html) api from a `task` state.\n\n```python\ntasks.sagemakercreatetransformjob(self, \"batch inference\",\n    transform_job_name=\"mytransformjob\",\n    model_name=\"mymodelname\",\n    model_client_options=tasks.modelclientoptions(\n        invocations_max_retries=3,  # default is 0\n        invocations_timeout=duration.minutes(5)\n    ),\n    transform_input=tasks.transforminput(\n        transform_data_source=tasks.transformdatasource(\n            s3_data_source=tasks.transforms3datasource(\n                s3_uri=\"s3://inputbucket/train\",\n                s3_data_type=tasks.s3datatype.s3_prefix\n            )\n        )\n    ),\n    transform_output=tasks.transformoutput(\n        s3_output_path=\"s3://outputbucket/transformjoboutputpath\"\n    ),\n    transform_resources=tasks.transformresources(\n        instance_count=1,\n        instance_type=ec2.instancetype.of(ec2.instanceclass.m4, ec2.instancesize.xlarge)\n    )\n)\n```\n\n### create endpoint\n\nyou can call the [`createendpoint`](https://docs.aws.amazon.com/sagemaker/latest/apireference/api_createendpoint.html) api from a `task` state.\n\n```python\ntasks.sagemakercreateendpoint(self, \"sagemakerendpoint\",\n    endpoint_name=sfn.jsonpath.string_at(\"$.endpointname\"),\n    endpoint_config_name=sfn.jsonpath.string_at(\"$.endpointconfigname\")\n)\n```\n\n### create endpoint config\n\nyou can call the [`createendpointconfig`](https://docs.aws.amazon.com/sagemaker/latest/apireference/api_createendpointconfig.html) api from a `task` state.\n\n```python\ntasks.sagemakercreateendpointconfig(self, \"sagemakerendpointconfig\",\n    endpoint_config_name=\"myendpointconfig\",\n    production_variants=[tasks.productionvariant(\n        initial_instance_count=2,\n        instance_type=ec2.instancetype.of(ec2.instanceclass.m5, ec2.instancesize.xlarge),\n        model_name=\"mymodel\",\n        variant_name=\"awesome-variant\"\n    )]\n)\n```\n\n### create model\n\nyou can call the [`createmodel`](https://docs.aws.amazon.com/sagemaker/latest/apireference/api_createmodel.html) api from a `task` state.\n\n```python\ntasks.sagemakercreatemodel(self, \"sagemaker\",\n    model_name=\"mymodel\",\n    primary_container=tasks.containerdefinition(\n        image=tasks.dockerimage.from_json_expression(sfn.jsonpath.string_at(\"$.model.imagename\")),\n        mode=tasks.mode.single_model,\n        model_s3_location=tasks.s3location.from_json_expression(\"$.trainingjob.modelartifacts.s3modelartifacts\")\n    )\n)\n```\n\n### update endpoint\n\nyou can call the [`updateendpoint`](https://docs.aws.amazon.com/sagemaker/latest/apireference/api_updateendpoint.html) api from a `task` state.\n\n```python\ntasks.sagemakerupdateendpoint(self, \"sagemakerendpoint\",\n    endpoint_name=sfn.jsonpath.string_at(\"$.endpoint.name\"),\n    endpoint_config_name=sfn.jsonpath.string_at(\"$.endpoint.endpointconfig\")\n)\n```\n\n## sns\n\nstep functions supports [amazon sns](https://docs.aws.amazon.com/step-functions/latest/dg/connect-sns.html) through the service integration pattern.\n\nyou can call the [`publish`](https://docs.aws.amazon.com/sns/latest/api/api_publish.html) api from a `task` state to publish to an sns topic.\n\n```python\ntopic = sns.topic(self, \"topic\")\n\n# use a field from the execution data as message.\ntask1 = tasks.snspublish(self, \"publish1\",\n    topic=topic,\n    integration_pattern=sfn.integrationpattern.request_response,\n    message=sfn.taskinput.from_data_at(\"$.state.message\"),\n    message_attributes={\n        \"place\": tasks.messageattribute(\n            value=sfn.jsonpath.string_at(\"$.place\")\n        ),\n        \"pic\": tasks.messageattribute(\n            # binary must be explicitly set\n            data_type=tasks.messageattributedatatype.binary,\n            value=sfn.jsonpath.string_at(\"$.pic\")\n        ),\n        \"people\": tasks.messageattribute(\n            value=4\n        ),\n        \"handles\": tasks.messageattribute(\n            value=[\"@kslater\", \"@jjf\", null, \"@mfanning\"]\n        )\n    }\n)\n\n# combine a field from the execution data with\n# a literal object.\ntask2 = tasks.snspublish(self, \"publish2\",\n    topic=topic,\n    message=sfn.taskinput.from_object({\n        \"field1\": \"somedata\",\n        \"field2\": sfn.jsonpath.string_at(\"$.field2\")\n    })\n)\n```\n\n## step functions\n\n### start execution\n\nyou can manage [aws step functions](https://docs.aws.amazon.com/step-functions/latest/dg/connect-stepfunctions.html) executions.\n\naws step functions supports it's own [`startexecution`](https://docs.aws.amazon.com/step-functions/latest/apireference/api_startexecution.html) api as a service integration.\n\n```python\n# define a state machine with one pass state\nchild = sfn.statemachine(self, \"childstatemachine\",\n    definition=sfn.chain.start(sfn.pass(self, \"passstate\"))\n)\n\n# include the state machine in a task state with callback pattern\ntask = tasks.stepfunctionsstartexecution(self, \"childtask\",\n    state_machine=child,\n    integration_pattern=sfn.integrationpattern.wait_for_task_token,\n    input=sfn.taskinput.from_object({\n        \"token\": sfn.jsonpath.task_token,\n        \"foo\": \"bar\"\n    }),\n    name=\"myexecutionname\"\n)\n\n# define a second state machine with the task state above\nsfn.statemachine(self, \"parentstatemachine\",\n    definition=task\n)\n```\n\nyou can utilize [associate workflow executions](https://docs.aws.amazon.com/step-functions/latest/dg/concepts-nested-workflows.html#nested-execution-startid)\nvia the `associatewithparent` property. this allows the step functions ui to link child\nexecutions from parent executions, making it easier to trace execution flow across state machines.\n\n```python\n# child: sfn.statemachine\n\ntask = tasks.stepfunctionsstartexecution(self, \"childtask\",\n    state_machine=child,\n    associate_with_parent=true\n)\n```\n\nthis will add the payload `aws_step_functions_started_by_execution_id.$: $$.execution.id` to the\n`input`property for you, which will pass the execution id from the context object to the\nexecution input. it requires `input` to be an object or not be set at all.\n\n### invoke activity\n\nyou can invoke a [step functions activity](https://docs.aws.amazon.com/step-functions/latest/dg/concepts-activities.html) which enables you to have\na task in your state machine where the work is performed by a *worker* that can\nbe hosted on amazon ec2, amazon ecs, aws lambda, basically anywhere. activities\nare a way to associate code running somewhere (known as an activity worker) with\na specific task in a state machine.\n\nwhen step functions reaches an activity task state, the workflow waits for an\nactivity worker to poll for a task. an activity worker polls step functions by\nusing getactivitytask, and sending the arn for the related activity.\n\nafter the activity worker completes its work, it can provide a report of its\nsuccess or failure by using `sendtasksuccess` or `sendtaskfailure`. these two\ncalls use the tasktoken provided by getactivitytask to associate the result\nwith that task.\n\nthe following example creates an activity and creates a task that invokes the activity.\n\n```python\nsubmit_job_activity = sfn.activity(self, \"submitjob\")\n\ntasks.stepfunctionsinvokeactivity(self, \"submit job\",\n    activity=submit_job_activity\n)\n```\n\n## sqs\n\nstep functions supports [amazon sqs](https://docs.aws.amazon.com/step-functions/latest/dg/connect-sqs.html)\n\nyou can call the [`sendmessage`](https://docs.aws.amazon.com/awssimplequeueservice/latest/apireference/api_sendmessage.html) api from a `task` state\nto send a message to an sqs queue.\n\n```python\nqueue = sqs.queue(self, \"queue\")\n\n# use a field from the execution data as message.\ntask1 = tasks.sqssendmessage(self, \"send1\",\n    queue=queue,\n    message_body=sfn.taskinput.from_json_path_at(\"$.message\")\n)\n\n# combine a field from the execution data with\n# a literal object.\ntask2 = tasks.sqssendmessage(self, \"send2\",\n    queue=queue,\n    message_body=sfn.taskinput.from_object({\n        \"field1\": \"somedata\",\n        \"field2\": sfn.jsonpath.string_at(\"$.field2\")\n    })\n)\n```\n",
  "docs_url": null,
  "keywords": "",
  "license": "apache-2.0",
  "name": "aws-cdk.aws-stepfunctions-tasks",
  "package_url": "https://pypi.org/project/aws-cdk.aws-stepfunctions-tasks/",
  "project_url": "https://pypi.org/project/aws-cdk.aws-stepfunctions-tasks/",
  "project_urls": {
    "Homepage": "https://github.com/aws/aws-cdk",
    "Source": "https://github.com/aws/aws-cdk.git"
  },
  "release_url": "https://pypi.org/project/aws-cdk.aws-stepfunctions-tasks/1.204.0/",
  "requires_dist": [
    "aws-cdk.aws-apigateway (==1.204.0)",
    "aws-cdk.aws-cloudwatch (==1.204.0)",
    "aws-cdk.aws-codebuild (==1.204.0)",
    "aws-cdk.aws-dynamodb (==1.204.0)",
    "aws-cdk.aws-ec2 (==1.204.0)",
    "aws-cdk.aws-ecr-assets (==1.204.0)",
    "aws-cdk.aws-ecr (==1.204.0)",
    "aws-cdk.aws-ecs (==1.204.0)",
    "aws-cdk.aws-eks (==1.204.0)",
    "aws-cdk.aws-events (==1.204.0)",
    "aws-cdk.aws-iam (==1.204.0)",
    "aws-cdk.aws-kms (==1.204.0)",
    "aws-cdk.aws-lambda (==1.204.0)",
    "aws-cdk.aws-logs (==1.204.0)",
    "aws-cdk.aws-s3 (==1.204.0)",
    "aws-cdk.aws-sns (==1.204.0)",
    "aws-cdk.aws-sqs (==1.204.0)",
    "aws-cdk.aws-stepfunctions (==1.204.0)",
    "aws-cdk.core (==1.204.0)",
    "aws-cdk.custom-resources (==1.204.0)",
    "aws-cdk.lambda-layer-awscli (==1.204.0)",
    "constructs (<4.0.0,>=3.3.69)",
    "jsii (<2.0.0,>=1.84.0)",
    "publication (>=0.0.3)",
    "typeguard (~=2.13.3)"
  ],
  "requires_python": "~=3.7",
  "summary": "task integrations for aws stepfunctions",
  "version": "1.204.0",
  "releases": [],
  "developers": [
    "amazon_web_services"
  ],
  "kwds": "aws_cdk cdk_aws aws_codebuild aws_apigatewayv2 aws",
  "license_kwds": "apache-2.0",
  "libtype": "pypi",
  "id": "pypi_aws_cdk.aws_stepfunctions_tasks",
  "homepage": "https://github.com/aws/aws-cdk",
  "release_count": 253,
  "dependency_ids": [
    "pypi_aws_cdk.aws_apigateway",
    "pypi_aws_cdk.aws_cloudwatch",
    "pypi_aws_cdk.aws_codebuild",
    "pypi_aws_cdk.aws_dynamodb",
    "pypi_aws_cdk.aws_ec2",
    "pypi_aws_cdk.aws_ecr",
    "pypi_aws_cdk.aws_ecr_assets",
    "pypi_aws_cdk.aws_ecs",
    "pypi_aws_cdk.aws_eks",
    "pypi_aws_cdk.aws_events",
    "pypi_aws_cdk.aws_iam",
    "pypi_aws_cdk.aws_kms",
    "pypi_aws_cdk.aws_lambda",
    "pypi_aws_cdk.aws_logs",
    "pypi_aws_cdk.aws_s3",
    "pypi_aws_cdk.aws_sns",
    "pypi_aws_cdk.aws_sqs",
    "pypi_aws_cdk.aws_stepfunctions",
    "pypi_aws_cdk.core",
    "pypi_aws_cdk.custom_resources",
    "pypi_aws_cdk.lambda_layer_awscli",
    "pypi_constructs",
    "pypi_jsii",
    "pypi_publication",
    "pypi_typeguard"
  ],
  "documentation_summary": "The HTML text is about the `aws-cdk.aws-stepfunctions-tasks` package version 1.204.0, released on June 19, 2023, available on PyPI for integrating tasks with AWS StepFunctions. It includes a warning for users of unsupported browsers to upgrade for better compatibility. The package, now inactive and part of AWS CDK v1 which reached end-of-support on June 1, 2023, is recommended to be migrated to AWS CDK v2. It provides a comprehensive guide on using various AWS services within Step Functions, such as Lambda, DynamoDB, ECS, and more, through tasks representing units of work in a state machine. The package requires Python version 3.7 or newer and is licensed under Apache-2.0.",
  "embedding": [
    -0.01458558440208435,
    0.007083718199282885,
    -0.009170916862785816,
    -0.004068088252097368,
    0.01255154050886631,
    0.01030487846583128,
    -0.013054735958576202,
    -0.00720420153811574,
    -0.014202872291207314,
    -0.014698980376124382,
    0.0033664493821561337,
    0.004482693038880825,
    -0.011006517335772514,
    0.026761500164866447,
    -0.0019472251879051328,
    0.00408580619841814,
    0.012728721834719181,
    -0.028193127363920212,
    -0.016513319686055183,
    -0.0023884072434157133,
    0.0037916849832981825,
    -0.014153261668980122,
    -0.00829918310046196,
    0.002957159886136651,
    -0.022580016404390335,
    0.023742327466607094,
    0.01136796735227108,
    -0.038639750331640244,
    0.022948553785681725,
    -0.015960512682795525,
    0.026222867891192436,
    -0.009709548205137253,
    -0.02540074661374092,
    -0.026407137513160706,
    -0.015577801503241062,
    -0.028490791097283363,
    0.000643168983515352,
    0.011353793554008007,
    0.03549300506711006,
    0.001010820735245943,
    -0.010432449169456959,
    0.024847939610481262,
    0.0054430169984698296,
    0.003968866541981697,
    -0.01811504177749157,
    0.0037491614930331707,
    0.004489780403673649,
    -0.02771119400858879,
    -0.029256215319037437,
    0.016938555985689163,
    0.01744883880019188,
    0.02985154651105404,
    -0.030985508114099503,
    -0.02900107391178608,
    0.013423273339867592,
    -0.008313357830047607,
    -0.02401164174079895,
    0.03245965763926506,
    0.019234828650951385,
    -0.010106435045599937,
    0.006208441220223904,
    0.013635891489684582,
    -0.016740111634135246,
    -0.022083908319473267,
    -0.004716572817414999,
    -0.008348794654011726,
    -0.042211730033159256,
    0.03112725354731083,
    -0.01610225811600685,
    0.0038909066934138536,
    0.048476871103048325,
    0.01829930953681469,
    0.010212743654847145,
    -0.013550844043493271,
    0.024819590151309967,
    -0.013848509639501572,
    -0.02582598105072975,
    0.006669113412499428,
    -0.013529582880437374,
    0.0014714926946908236,
    0.006307662930339575,
    -0.00021638296311721206,
    0.00444016931578517,
    0.04796658828854561,
    0.02140353061258793,
    0.01743466407060623,
    -0.007023476529866457,
    0.015591975301504135,
    -0.0019029297400265932,
    -0.0017895335331559181,
    0.001804593950510025,
    -0.0012464721221476793,
    -0.0069596911780536175,
    0.04527342692017555,
    -0.003481617197394371,
    0.02053888514637947,
    -0.03305498883128166,
    0.011658545583486557,
    0.016187306493520737,
    -0.03608833625912666,
    -0.013841422274708748,
    0.01553527731448412,
    -0.018582800403237343,
    0.003965322859585285,
    -0.03574814647436142,
    -0.014465101063251495,
    -0.017051951959729195,
    0.008774030022323132,
    0.014769853092730045,
    0.015393532812595367,
    -0.034670885652303696,
    0.023132821545004845,
    -0.02364310435950756,
    -0.01024109311401844,
    0.013047648593783379,
    -0.0071404161863029,
    0.014996645972132683,
    0.003582610748708248,
    -0.010404099710285664,
    -0.017590584233403206,
    0.012147566303610802,
    0.039235081523656845,
    0.021261785179376602,
    -0.003591469954699278,
    -0.005591849330812693,
    0.004776814486831427,
    -0.023246217519044876,
    -0.017066126689314842,
    0.010637979954481125,
    -0.0252306517213583,
    0.0009408339974470437,
    -0.005623742006719112,
    0.0144367516040802,
    -0.030418526381254196,
    -0.01774650253355503,
    0.019603366032242775,
    -0.020453836768865585,
    0.007753464393317699,
    -0.021658672019839287,
    -0.019050559028983116,
    -0.004716572817414999,
    0.02752692438662052,
    -0.0016318419948220253,
    0.0001259096316061914,
    -0.007739289663732052,
    -0.0035542617551982403,
    0.03427399694919586,
    -0.0050603048875927925,
    0.0017222046153619885,
    -0.020751502364873886,
    0.01136088091880083,
    0.012232613749802113,
    -0.024054165929555893,
    -0.012749983929097652,
    0.0074132755398750305,
    0.006931341718882322,
    -0.01737796515226364,
    -0.0035064227413386106,
    -0.013905207626521587,
    -0.01951831951737404,
    0.011878250166773796,
    0.02979484759271145,
    -0.0006648737471550703,
    -0.020836548879742622,
    0.04232512786984444,
    0.031212300062179565,
    0.020949944853782654,
    -0.023061949759721756,
    -0.014358792454004288,
    -0.007349490188062191,
    0.03634347766637802,
    -0.006399797275662422,
    -0.03815781697630882,
    0.02922786772251129,
    -0.0037349869962781668,
    0.004748465493321419,
    -0.00033243687357753515,
    0.0003297791408840567,
    -0.016428273171186447,
    -0.01950414478778839,
    0.021120039746165276,
    0.00872441940009594,
    0.0002775105822365731,
    0.02146022766828537,
    -0.013423273339867592,
    -0.01002847496420145,
    0.012346009723842144,
    0.018185913562774658,
    0.04116281494498253,
    0.021743718534708023,
    0.024110864847898483,
    0.026662278920412064,
    -0.02272176183760166,
    -0.033281780779361725,
    -0.5882993936538696,
    -0.01829930953681469,
    -0.01994355395436287,
    -0.04949743673205376,
    -0.014826551079750061,
    0.006265139207243919,
    -0.005308358930051327,
    0.028462443500757217,
    -0.03226121515035629,
    0.04269366338849068,
    -0.022764284163713455,
    0.025131430476903915,
    0.006056065205484629,
    -0.008717332035303116,
    -0.026733150705695152,
    -0.008944123983383179,
    -0.007696766406297684,
    -0.011233310215175152,
    0.0013696133391931653,
    0.012090868316590786,
    0.0016965132672339678,
    0.03299828991293907,
    -0.021105865016579628,
    0.00413541728630662,
    0.014082388952374458,
    0.009773333556950092,
    0.007944820448756218,
    -0.029312914237380028,
    -0.016442447900772095,
    -0.009489843621850014,
    -0.02608112245798111,
    0.039235081523656845,
    0.0019047015812247992,
    -0.005513889715075493,
    0.04615224897861481,
    0.014231221750378609,
    -0.04260861873626709,
    0.026818199083209038,
    0.0015246471157297492,
    0.036371827125549316,
    -0.011318356730043888,
    -0.005031955894082785,
    -0.007278617937117815,
    -0.0003244637046009302,
    0.016385748982429504,
    0.005053217522799969,
    0.03362197056412697,
    0.0011888880981132388,
    -0.004333860706537962,
    -0.02090742252767086,
    0.01449345052242279,
    -0.025301523506641388,
    0.020198695361614227,
    0.0026258304715156555,
    0.002601024927571416,
    -0.007002214435487986,
    0.01757640950381756,
    -0.013997341506183147,
    0.014323355630040169,
    -0.006637220736593008,
    -0.020099474117159843,
    0.007448711898177862,
    -0.006988040171563625,
    -0.02303360030055046,
    -0.0322045162320137,
    0.002944757230579853,
    0.0027604885399341583,
    -0.011587672866880894,
    -0.0095678037032485,
    -0.011828639544546604,
    0.0032778584863990545,
    -0.006888818461447954,
    0.0037952286656945944,
    0.01598886214196682,
    0.031042207032442093,
    0.02953970618546009,
    0.014982471242547035,
    -0.019660063087940216,
    -0.0025088905822485685,
    0.01615895703434944,
    0.0437709279358387,
    -0.003958235494792461,
    -0.006463582627475262,
    -0.028122253715991974,
    0.022835157811641693,
    0.004876036196947098,
    -0.030957158654928207,
    -0.023997468873858452,
    -0.0004903498920612037,
    -0.01067341584712267,
    0.027980508282780647,
    0.019121432676911354,
    2.9788647225359455e-05,
    -0.0473996065557003,
    -0.005871796514838934,
    0.02297690324485302,
    0.009624501690268517,
    0.008249572478234768,
    -0.029142819344997406,
    -0.011849901638925076,
    -0.014188697561621666,
    -0.005230399314314127,
    -0.0012562171323224902,
    -0.020623931661248207,
    0.03688210994005203,
    0.018256785348057747,
    -0.008887425996363163,
    -0.00311662326566875,
    0.027498574927449226,
    -0.0011764854425564408,
    -0.006626589689403772,
    -0.030305130407214165,
    -0.0025957096368074417,
    -0.00807947851717472,
    0.010595455765724182,
    -0.0358615443110466,
    0.010567107237875462,
    -0.007569195702672005,
    0.013855597004294395,
    0.0035648925695568323,
    0.008873251266777515,
    -0.00018471175280865282,
    0.009596152231097221,
    -0.029029423370957375,
    0.002189963823184371,
    0.02691742032766342,
    0.013189394026994705,
    -0.02601025067269802,
    -0.00872441940009594,
    0.03251635655760765,
    -0.009057520888745785,
    -0.008469277992844582,
    0.026350438594818115,
    0.004461431410163641,
    0.014380053617060184,
    -0.00924178957939148,
    0.03727899491786957,
    0.0007375181885436177,
    0.006095045246183872,
    -0.017179522663354874,
    -0.024408528581261635,
    -0.004581914748996496,
    0.010489147156476974,
    -0.028037207201123238,
    0.0046350690536201,
    -0.005613111425191164,
    -0.00041593366768211126,
    0.004248813260346651,
    0.0038342084735631943,
    -0.0023742327466607094,
    -0.014840725809335709,
    -0.0005142693989910185,
    -0.013635891489684582,
    0.02778206579387188,
    0.010800986550748348,
    -0.03257305547595024,
    -0.028887677937746048,
    -0.030135037377476692,
    0.004114155191928148,
    -0.003873188514262438,
    0.009737897664308548,
    0.012898816727101803,
    -0.019915204495191574,
    -0.0016088084084913135,
    -0.030248433351516724,
    0.024706194177269936,
    -0.022381572052836418,
    0.03027678281068802,
    -0.014188697561621666,
    -0.046038851141929626,
    -0.0015742579707875848,
    -0.008015693165361881,
    -0.01737796515226364,
    0.0027799783274531364,
    0.030361829325556755,
    0.02669062837958336,
    0.0077959876507520676,
    0.017789026722311974,
    0.008859077468514442,
    0.008093653246760368,
    -0.008618109859526157,
    0.012388532981276512,
    -0.007441624999046326,
    -0.016867682337760925,
    0.03569145128130913,
    0.01903638429939747,
    0.020283743739128113,
    -0.006481301039457321,
    -0.027215084061026573,
    0.0016956273466348648,
    -0.01313269603997469,
    -0.004014933947473764,
    0.003933430183678865,
    0.01540770661085844,
    -0.021729543805122375,
    0.011233310215175152,
    0.0038873630110174417,
    0.004241725895553827,
    -0.010439536534249783,
    0.027158387005329132,
    0.024819590151309967,
    0.022891854867339134,
    0.008717332035303116,
    -0.011254571378231049,
    -0.020822374150156975,
    -0.010829336009919643,
    0.006297031883150339,
    -0.01447218842804432,
    -0.002276782877743244,
    -0.0007911155698820949,
    0.041361257433891296,
    -0.028675060719251633,
    -0.024536099284887314,
    -0.02625121735036373,
    0.018611149862408638,
    0.0024681389331817627,
    -0.023728152737021446,
    -0.005588305648416281,
    -0.02267923764884472,
    0.010900208726525307,
    0.020765677094459534,
    0.006474213674664497,
    0.01516673993319273,
    -0.022452445700764656,
    -0.014309180900454521,
    -0.016456620767712593,
    0.03897994011640549,
    0.023302916437387466,
    0.01030487846583128,
    -0.008504713885486126,
    0.0010063911322504282,
    0.013508320786058903,
    -0.01058128196746111,
    -0.020170345902442932,
    0.02540074661374092,
    -0.02443687804043293,
    0.024536099284887314,
    -0.02813642844557762,
    0.032544706016778946,
    -0.007555020973086357,
    0.02365727908909321,
    -0.01739213988184929,
    0.034018855541944504,
    -0.0036074162926524878,
    -0.0025159779470413923,
    -0.001913560670800507,
    0.032601404935121536,
    0.005921407137066126,
    0.014826551079750061,
    -0.0010533442255109549,
    -0.020439662039279938,
    -0.004936277866363525,
    -0.014309180900454521,
    0.021290134638547897,
    0.014188697561621666,
    -0.0004367525107227266,
    -0.0031945831142365932,
    0.010163133032619953,
    0.03730734437704086,
    0.03356527164578438,
    0.012388532981276512,
    0.014684806577861309,
    0.04275036230683327,
    0.017420489341020584,
    0.03050357475876808,
    -0.03302663937211037,
    -0.020836548879742622,
    -0.03336682915687561,
    -0.01951831951737404,
    -0.034444089978933334,
    0.001027652993798256,
    -0.015421881340444088,
    -0.008426753804087639,
    -0.05014946311712265,
    0.031155603006482124,
    0.01450053695589304,
    0.024465227499604225,
    0.03469923138618469,
    -0.004107068292796612,
    0.010978168807923794,
    -0.02102081850171089,
    -0.04150300472974777,
    0.03804441913962364,
    -0.0049079288728535175,
    -0.006339555606245995,
    -0.016329050064086914,
    0.005460734944790602,
    0.03821451589465141,
    -0.03520951792597771,
    0.04490489140152931,
    -0.00408580619841814,
    0.024947160854935646,
    0.0007441624766215682,
    0.019220653921365738,
    -0.026846546679735184,
    0.004050369840115309,
    0.025613363832235336,
    -0.004192115273326635,
    0.0158045943826437,
    -0.028093906119465828,
    0.0029837372712790966,
    0.0038979938253760338,
    0.017051951959729195,
    -0.0071581341326236725,
    0.039717014878988266,
    0.020085299387574196,
    -0.02365727908909321,
    -0.008944123983383179,
    -0.011956210248172283,
    -0.0035471743904054165,
    -0.00985129363834858,
    -0.010531670413911343,
    0.009440232999622822,
    -0.0095678037032485,
    0.02012782357633114,
    -0.005712333135306835,
    0.002441561548039317,
    -0.022197304293513298,
    0.054203376173973083,
    -0.005308358930051327,
    0.001414794591255486,
    -0.05080149322748184,
    -0.0012163512874394655,
    0.03362197056412697,
    0.02493298612535,
    0.02382737398147583,
    0.0024876289535313845,
    0.015606150031089783,
    -0.017477186396718025,
    -0.01715117320418358,
    -0.051765359938144684,
    -0.02042548730969429,
    -0.0007441624766215682,
    0.010432449169456959,
    -0.01067341584712267,
    -0.005971017759293318,
    0.006768335122615099,
    0.0021226347889751196,
    0.02996494248509407,
    0.017519710585474968,
    0.015095867216587067,
    0.022906029596924782,
    -0.016995253041386604,
    -0.024819590151309967,
    -0.017179522663354874,
    0.007604631595313549,
    0.021361006423830986,
    0.02351553365588188,
    0.013635891489684582,
    0.02158779837191105,
    -0.010652154684066772,
    0.011056127957999706,
    -0.01082224864512682,
    -0.022594191133975983,
    -0.008518888615071774,
    0.009716635569930077,
    0.012835031375288963,
    0.023416312411427498,
    -0.01622982881963253,
    0.037420742213726044,
    0.01835600845515728,
    0.00783851183950901,
    -0.0011348477564752102,
    0.002450420754030347,
    0.01628652773797512,
    0.0028916026931256056,
    0.007739289663732052,
    -0.007895209826529026,
    -8.283236820716411e-05,
    -0.03571980074048042,
    0.0005355312023311853,
    0.023260392248630524,
    -0.033338479697704315,
    0.004890210460871458,
    0.02066645585000515,
    0.023246217519044876,
    -0.029312914237380028,
    -0.027144212275743484,
    0.0270449910312891,
    0.009808770380914211,
    0.0389232411980629,
    0.01652749441564083,
    0.01501082070171833,
    -0.04697437211871147,
    0.002572675934061408,
    -0.024280957877635956,
    -0.00799443107098341,
    -0.009971776977181435,
    0.0022254001814872026,
    0.0038767321966588497,
    -0.01696690358221531,
    0.006307662930339575,
    -0.004801619797945023,
    -0.01136796735227108,
    -0.012728721834719181,
    -0.012891729362308979,
    -0.01804416812956333,
    0.012083780951797962,
    0.03597494214773178,
    2.1351759187382413e-06,
    0.002989052562043071,
    -0.002562045119702816,
    -0.008873251266777515,
    -0.01798747107386589,
    -0.0072857048362493515,
    -0.016555843874812126,
    -0.01817173883318901,
    -0.0322045162320137,
    0.006683287676423788,
    -0.024847939610481262,
    0.005857621785253286,
    0.0006059609004296362,
    0.02024121955037117,
    0.038696449249982834,
    -0.0028898308519273996,
    0.02102081850171089,
    0.004411820322275162,
    -0.021786242723464966,
    0.016810985282063484,
    0.018568625673651695,
    0.008412580005824566,
    0.008646459318697453,
    0.0011171295773237944,
    -0.001273049390874803,
    -0.01009226031601429,
    -0.022225651890039444,
    0.010290703736245632,
    -0.013777636922895908,
    0.01785990037024021,
    0.0066443076357245445,
    0.00817161239683628,
    0.00996468961238861,
    -0.026421312242746353,
    -0.026662278920412064,
    0.013685502111911774,
    -0.023061949759721756,
    0.012969688512384892,
    0.006502562668174505,
    0.028178952634334564,
    0.003313294844701886,
    -0.010893121361732483,
    0.013919382356107235,
    0.003933430183678865,
    -0.010226918384432793,
    -0.00036344362888485193,
    -0.024536099284887314,
    -0.004865405149757862,
    0.027810415253043175,
    -0.018639497458934784,
    0.018270960077643394,
    -0.004922103136777878,
    -0.0033629056997597218,
    -0.023869898170232773,
    -0.006966778077185154,
    0.013912294991314411,
    -0.002475226065143943,
    0.012686198577284813,
    0.005698158405721188,
    0.013543756678700447,
    -0.005776118487119675,
    0.015450230799615383,
    -0.0007215718505904078,
    0.002693159505724907,
    -0.032856546342372894,
    -0.008568499237298965,
    0.017732329666614532,
    -0.033168382942676544,
    -0.0031644622795283794,
    -0.024167561903595924,
    -0.023019425570964813,
    -0.016442447900772095,
    0.009617414325475693,
    0.005202049855142832,
    0.015606150031089783,
    -0.0138272475451231,
    0.004185027908533812,
    -0.0179307721555233,
    -0.0016017211601138115,
    -0.005485540721565485,
    -0.014387140981853008,
    0.0051666139625012875,
    0.010326140560209751,
    0.025811806321144104,
    0.04189988970756531,
    0.03478427976369858,
    0.0027976965066045523,
    0.004294880665838718,
    -0.020085299387574196,
    0.007937733083963394,
    -0.02255166694521904,
    0.0006307662697508931,
    0.011842814274132252,
    -0.00814326386898756,
    -0.0173212680965662,
    0.018752895295619965,
    0.019404921680688858,
    0.014571409672498703,
    0.012211351655423641,
    0.013416185975074768,
    0.008518888615071774,
    -0.0006493703695014119,
    -0.007682591676712036,
    -0.01143175270408392,
    -0.023685628548264503,
    -0.02206973358988762,
    -0.014741504564881325,
    -0.01516673993319273,
    0.018639497458934784,
    -0.04765474796295166,
    -0.02297690324485302,
    0.02942631021142006,
    0.016570018604397774,
    0.010687590576708317,
    -0.007739289663732052,
    0.03138239309191704,
    0.009170916862785816,
    0.020042775198817253,
    0.009404796175658703,
    0.01678263582289219,
    -0.023359615355730057,
    -0.013820160180330276,
    -0.027994683012366295,
    0.002163386670872569,
    0.02504638209939003,
    0.021247610449790955,
    0.009610326960682869,
    0.0009620958007872105,
    0.024592798203229904,
    0.012239701114594936,
    0.020524710416793823,
    0.007909383624792099,
    0.01009226031601429,
    0.017916597425937653,
    -0.02534404769539833,
    -0.020269569009542465,
    -0.013217743486166,
    -0.034075554460287094,
    -0.021545276045799255,
    0.014784027822315693,
    -0.019404921680688858,
    0.014911598525941372,
    0.01553527731448412,
    -0.021786242723464966,
    -0.006970321759581566,
    0.006148199550807476,
    -0.005627285689115524,
    0.033650320023298264,
    0.02425261028110981,
    0.023784849792718887,
    0.035464659333229065,
    0.028249824419617653,
    -0.02876010723412037,
    -0.045074984431266785,
    -0.020269569009542465,
    -0.005205593537539244,
    0.017774851992726326,
    0.04141795635223389,
    -0.005007150582969189,
    -0.02272176183760166,
    0.01316104456782341,
    0.012062519788742065,
    -0.013550844043493271,
    -0.001665506511926651,
    0.025485793128609657,
    -0.0042098332196474075,
    0.004121242556720972,
    -0.02535822242498398,
    0.009468581527471542,
    0.002188191981986165,
    0.020028602331876755,
    -0.0075408462435007095,
    -0.005570587702095509,
    0.028731759637594223,
    -0.002918180078268051,
    -0.014330442994832993,
    -0.004904385190457106,
    -0.003603872610256076,
    0.012863379903137684,
    -0.00153439212590456,
    -0.015209263190627098,
    -0.001531734480522573,
    -0.0036534834653139114,
    -0.002175789326429367,
    -0.013217743486166,
    0.0029057771898806095,
    0.030049988999962807,
    -0.011148262768983841,
    -0.00017164461314678192,
    0.038639750331640244,
    -0.007384926546365023,
    -0.028093906119465828,
    0.005963930860161781,
    -0.003688919823616743,
    0.03750579059123993,
    -0.03027678281068802,
    -0.01950414478778839,
    -0.01859697513282299,
    -0.007306966930627823,
    0.00851180125027895,
    -0.023175345733761787,
    0.0013722711009904742,
    -0.0055953930132091045,
    -0.016073908656835556,
    -0.006286401301622391,
    0.01030487846583128,
    -0.01903638429939747,
    -0.023487186059355736,
    -0.01628652773797512,
    0.007817249745130539,
    -0.027328481897711754,
    0.010014301165938377,
    -0.031694233417510986,
    0.003331013023853302,
    -0.021446052938699722,
    -0.01471315510571003,
    -9.70068940659985e-05,
    -0.0030422070994973183,
    -0.002686072140932083,
    0.00957489013671875,
    0.0123105738312006,
    0.02097829431295395,
    0.05598936602473259,
    0.0008628740906715393,
    0.006474213674664497,
    -0.03288489580154419,
    0.023118646815419197,
    -0.02140353061258793,
    0.008483451791107655,
    0.005028412211686373,
    -0.01787407323718071,
    0.0032902611419558525,
    -0.014939947985112667,
    -0.051396820694208145,
    -0.04371422901749611,
    0.004206290002912283,
    0.026435486972332,
    0.007175852544605732,
    -0.010474972426891327,
    0.011141175404191017,
    0.0071333288215100765,
    0.008710244670510292,
    0.024153387174010277,
    -0.0013155729975551367,
    0.03807276859879494,
    -0.009603239595890045,
    0.00034196037449873984,
    0.03773258253931999,
    -0.005117002874612808,
    0.020397139713168144,
    -0.006991583853960037,
    0.003357590176165104,
    -0.002849079202860594,
    -0.03608833625912666,
    -0.015308485366404057,
    -0.02364310435950756,
    0.0005532493814826012,
    -0.01866784691810608,
    0.019560841843485832,
    -0.00592849450185895,
    -0.02072315290570259,
    -0.020439662039279938,
    0.02625121735036373,
    0.024238435551524162,
    -0.02517395280301571,
    0.01866784691810608,
    0.022580016404390335,
    0.025755109265446663,
    0.010886033996939659,
    -0.003331013023853302,
    -0.026818199083209038,
    -0.021601973101496696,
    -0.003332784865051508,
    -0.03044687584042549,
    -0.00823539774864912,
    -0.019178129732608795,
    0.04059583321213722,
    0.01495412178337574,
    -0.006484844256192446,
    -0.020326266065239906,
    -0.01610225811600685,
    -0.025386571884155273,
    -0.02079402655363083,
    -0.027456052601337433,
    0.03396215662360191,
    0.01593216508626938,
    0.001153451856225729,
    0.0018267417326569557,
    0.018937163054943085,
    -0.017703980207443237,
    0.019645890220999718,
    -0.027427703142166138,
    0.004606720060110092,
    0.013182306662201881,
    -0.006226159166544676,
    -0.0022696955129504204,
    -0.01136796735227108,
    -0.03537961095571518,
    0.016981078311800957,
    0.02486211434006691,
    0.008086565881967545,
    -0.006183635909110308,
    0.010148958303034306,
    -0.02620869316160679,
    -0.010290703736245632,
    -0.004872492514550686,
    -0.00996468961238861,
    -0.01798747107386589,
    0.012608238495886326,
    0.017633106559515,
    -0.026761500164866447,
    -0.005003606900572777,
    -0.005499714985489845,
    -0.006817945744842291,
    0.02297690324485302,
    -0.014939947985112667,
    0.0008407264249399304,
    -0.010319053195416927,
    0.012331834994256496,
    -0.008696069940924644,
    -0.016314877197146416,
    -0.010262355208396912,
    -0.019107257947325706,
    0.02031209133565426,
    -0.0058753397315740585,
    0.01447218842804432,
    0.03155248984694481,
    0.009078782051801682,
    -0.0191497802734375,
    -0.025443268939852715,
    0.013359487988054752,
    -0.048788707703351974,
    -0.01835600845515728,
    -0.0030280326027423143,
    -0.01136088091880083,
    -0.0036198189482092857,
    0.015039169229567051,
    0.009128392674028873,
    0.00776763865724206,
    -0.016853507608175278,
    0.004794532433152199,
    0.01562032476067543,
    -0.03532291203737259,
    0.013316964730620384,
    0.00021671516878996044,
    -0.015478579327464104,
    0.0083629684522748,
    0.0020251849200576544,
    0.008469277992844582,
    0.004752009175717831,
    -0.013997341506183147,
    -0.01166563294827938,
    -0.021857114508748055,
    0.002195279346778989,
    -0.007555020973086357,
    -0.042155031114816666,
    -0.010014301165938377,
    0.012494842521846294,
    0.003047522623091936,
    -0.0016318419948220253,
    0.030957158654928207,
    0.1586412638425827,
    0.019645890220999718,
    -0.00027042333385907114,
    0.021687021479010582,
    0.019362399354577065,
    0.0006741757970303297,
    -0.005418211687356234,
    -0.00021638296311721206,
    -0.02900107391178608,
    0.013380750082433224,
    0.0035205972380936146,
    0.013543756678700447,
    -0.01261532586067915,
    0.008462190628051758,
    0.01903638429939747,
    -0.025939377024769783,
    -0.01671176217496395,
    -0.018639497458934784,
    -0.028108078986406326,
    0.008681895211338997,
    0.033877111971378326,
    -0.004425995051860809,
    -0.0032548250164836645,
    -0.021927988156676292,
    0.034982722252607346,
    -0.022098081186413765,
    0.0020694804843515158,
    0.01635739952325821,
    -0.0050603048875927925,
    0.005634373053908348,
    -0.0389232411980629,
    0.019163955003023148,
    0.009830031543970108,
    0.006421058904379606,
    -0.012686198577284813,
    -0.03441574424505234,
    -0.005450104363262653,
    0.016003036871552467,
    0.035407960414886475,
    0.024422703310847282,
    -0.04229677841067314,
    -0.03983040899038315,
    -0.030163384974002838,
    -0.04068088158965111,
    -0.015478579327464104,
    -0.009716635569930077,
    -0.022778458893299103,
    -0.0040361955761909485,
    -0.01188533753156662,
    0.002191735664382577,
    -0.01920647919178009,
    -0.0001399734173901379,
    0.025882679969072342,
    0.026222867891192436,
    0.009100044146180153,
    -0.003481617197394371,
    0.04062418267130852,
    0.019249003380537033,
    0.018100867047905922,
    0.02686072140932083,
    -0.028901852667331696,
    0.02493298612535,
    -0.014252482913434505,
    0.003710181452333927,
    -0.027583623304963112,
    -0.0039298865012824535,
    -0.027626145631074905,
    -0.017222044989466667,
    0.011389229446649551,
    0.0188379418104887,
    -0.030673667788505554,
    -0.03688210994005203,
    -0.011601847596466541,
    -0.005627285689115524,
    -0.002989052562043071,
    -0.02589685469865799,
    0.02863253653049469,
    0.00357020809315145,
    0.005202049855142832,
    0.03537961095571518,
    -0.016513319686055183,
    -0.004160222597420216,
    -0.016428273171186447,
    -0.011977472342550755,
    0.004876036196947098,
    -0.010432449169456959,
    0.03937682509422302,
    -0.007526671979576349,
    -0.008568499237298965,
    -0.003713725134730339,
    -0.022835157811641693,
    -0.016300702467560768,
    0.005627285689115524,
    -0.02521647699177265,
    0.02351553365588188,
    0.03087211214005947,
    0.005336707923561335,
    -0.007175852544605732,
    -0.0015042712911963463,
    0.00594266876578331,
    -0.04484819248318672,
    0.06009997799992561,
    0.0030067707411944866,
    0.015110041946172714,
    -0.005836360156536102,
    0.004592545796185732,
    -0.011693981476128101,
    0.019107257947325706,
    0.008306270465254784,
    0.011112825945019722,
    -0.0013297474943101406,
    -0.025514142587780952,
    -0.005995823536068201,
    -0.01164437085390091,
    -0.007980256341397762,
    0.02515977807343006,
    -0.03294159099459648,
    0.02007112465798855,
    -0.02565588802099228,
    -0.0035099664237350225,
    -0.014727329835295677,
    -0.015776244923472404,
    -0.02236739732325077,
    -0.009022084064781666,
    -0.009291400201618671,
    -0.0042700753547251225,
    -0.01009226031601429,
    -0.011020692065358162,
    0.005474909674376249,
    -0.0340472050011158,
    0.011495538055896759,
    0.004029108211398125,
    0.03515281900763512,
    -0.02206973358988762,
    -0.02358640730381012,
    -0.026959942653775215,
    -0.006431689951568842,
    -0.0016885400982573628,
    0.016187306493520737,
    0.02985154651105404,
    -0.023969119414687157,
    0.011410491541028023,
    -0.006800227798521519,
    0.007314053829759359,
    0.016399923712015152,
    -0.02820730209350586,
    0.03489767760038376,
    0.005673353094607592,
    -0.023359615355730057,
    -0.013175219297409058,
    -0.008951211348176003,
    -0.014082388952374458,
    0.023118646815419197,
    -0.003325697500258684,
    0.03793102502822876,
    0.0021013731602579355,
    0.016314877197146416,
    -0.01743466407060623,
    0.014911598525941372,
    -0.009440232999622822,
    -0.04224007949233055,
    -0.015365183353424072,
    0.009780420921742916,
    0.007852685637772083,
    -0.03787432610988617,
    -0.014698980376124382,
    -0.18064013123512268,
    0.014883249998092651,
    -0.0008486995939165354,
    -0.03824286535382271,
    0.016300702467560768,
    -0.015762070193886757,
    0.009050433523952961,
    0.022466620430350304,
    -0.022480793297290802,
    -0.010425361804664135,
    0.025811806321144104,
    0.011523887515068054,
    -0.02266506291925907,
    -0.012927165254950523,
    -0.006151743233203888,
    -0.0032902611419558525,
    0.005404036957770586,
    0.005131177604198456,
    0.03659861907362938,
    0.013898120261728764,
    0.03764753416180611,
    -0.016924381256103516,
    -0.0009067265200428665,
    0.013728026300668716,
    -0.008568499237298965,
    0.007526671979576349,
    -0.024238435551524162,
    -0.013033473864197731,
    0.01622982881963253,
    0.009489843621850014,
    -0.022707587108016014,
    0.02839156985282898,
    0.011389229446649551,
    0.006566348019987345,
    0.02262253873050213,
    0.0032973485067486763,
    0.01817173883318901,
    -0.022197304293513298,
    -0.01654166914522648,
    0.03438739478588104,
    0.029568055644631386,
    0.030673667788505554,
    -0.0003446181071922183,
    -0.015563626773655415,
    -0.010552932508289814,
    -0.005528063978999853,
    -0.009681199677288532,
    -0.006786053068935871,
    -0.009978864341974258,
    -0.04493324086070061,
    0.03569145128130913,
    -0.01224678847938776,
    0.0016282984288409352,
    -0.010184395126998425,
    -0.0071404161863029,
    0.007696766406297684,
    0.0020996013190597296,
    -0.00020940644026268274,
    -0.017604758962988853,
    -0.021786242723464966,
    0.00018327216093894094,
    -0.036371827125549316,
    -0.007232550531625748,
    -0.004075175616890192,
    -0.032119471579790115,
    0.010411187075078487,
    -0.011906599625945091,
    0.004968170542269945,
    -0.022395746782422066,
    0.0030510660726577044,
    0.016201479360461235,
    -0.01255154050886631,
    -0.012948427349328995,
    -0.005414668004959822,
    0.01051749661564827,
    0.002218312816694379,
    -0.03983040899038315,
    0.03486932814121246,
    0.015322660095989704,
    -0.023373788222670555,
    -0.018270960077643394,
    0.0364852249622345,
    -0.016144782304763794,
    0.012282224372029305,
    0.027810415253043175,
    -0.008355881087481976,
    -0.0030652405694127083,
    -0.005435929633677006,
    -0.008490539155900478,
    0.000702081888448447,
    0.02333126589655876,
    -0.021006643772125244,
    0.013430360704660416,
    -0.009667024947702885,
    -0.007484148256480694,
    0.01909308321774006,
    -0.003713725134730339,
    -0.011141175404191017,
    -0.013515408150851727,
    -0.010878946632146835,
    0.0021438966505229473,
    0.004224007949233055,
    -0.02985154651105404,
    -0.02260836400091648,
    0.04453635215759277,
    0.015223437920212746,
    -0.025018034502863884,
    0.019716762006282806,
    0.03180763125419617,
    -0.017165347933769226,
    -0.005556412972509861,
    -0.0022714673541486263,
    0.01240270771086216,
    -0.007505410350859165,
    0.016825160011649132,
    0.0419282391667366,
    0.01000012643635273,
    -0.009404796175658703,
    0.019971903413534164,
    0.004355122335255146,
    0.028618361800909042,
    0.009426058270037174,
    -0.019291525706648827,
    0.00050496740732342,
    -0.023983294144272804,
    -0.04479149356484413,
    -0.08918610215187073,
    -0.02547161839902401,
    -0.0008628740906715393,
    0.006693918723613024,
    -0.00613756850361824,
    -0.02077985182404518,
    -0.039972156286239624,
    0.0006245649419724941,
    0.032799847424030304,
    -0.019886856898665428,
    0.009291400201618671,
    0.008242485113441944,
    -0.025259001180529594,
    0.0019844332709908485,
    0.01574789546430111,
    -0.01798747107386589,
    -0.03138239309191704,
    -0.01000012643635273,
    0.004812250845134258,
    0.01635739952325821,
    -0.004773270804435015,
    -0.0015618553152307868,
    0.02345883660018444,
    -0.0013040561461821198,
    -0.007484148256480694,
    0.018497753888368607,
    -0.028774281963706017,
    0.016484970226883888,
    0.02722925879061222,
    0.032062772661447525,
    -0.01458558440208435,
    -0.01776067726314068,
    0.004131873603910208,
    0.013947730883955956,
    -0.01151680015027523,
    -0.005450104363262653,
    -0.02669062837958336,
    -0.022083908319473267,
    0.054685309529304504,
    -0.007062456104904413,
    0.002264380222186446,
    -0.00612339423969388,
    0.027342654764652252,
    -0.023799024522304535,
    -0.023728152737021446,
    0.012884641997516155,
    -0.0013864455977454782,
    0.019319875165820122,
    0.009617414325475693,
    -0.03489767760038376,
    -0.01878124289214611,
    -0.004372840281575918,
    -0.014089476317167282,
    -0.01950414478778839,
    0.00434449128806591,
    0.011594760231673717,
    -0.005648547783493996,
    0.012693285942077637,
    -0.002577991457656026,
    0.0008606593473814428,
    -0.00486186146736145,
    -0.020028602331876755,
    0.003827121341601014,
    0.01970258727669716,
    -0.0032867176923900843,
    0.008292095735669136,
    0.003587926272302866,
    0.007881035096943378,
    0.023756500333547592,
    -0.020680628716945648,
    -0.014727329835295677,
    0.02255166694521904,
    -0.02480541542172432,
    0.010382838547229767,
    -0.03262975439429283,
    -0.004475605674088001,
    0.007526671979576349,
    0.014302094466984272,
    0.009185091592371464,
    0.0010055052116513252,
    -0.013444535434246063,
    0.01957501657307148,
    -0.006601784378290176,
    -0.015974687412381172,
    0.030049988999962807,
    0.008114914409816265,
    0.008603936061263084,
    -0.004868948832154274,
    0.045131683349609375,
    -0.03506777063012123,
    0.02249496802687645,
    0.013905207626521587,
    0.041191164404153824,
    0.0037066377699375153,
    0.0024947160854935646,
    0.0026276023127138615,
    -0.015436056070029736,
    -0.011467189528048038,
    -0.025060556828975677,
    0.013501233421266079,
    -0.04997937008738518,
    0.000642283062916249,
    -0.0905468538403511,
    0.031325697898864746,
    -0.028916027396917343,
    -0.006800227798521519,
    -0.012282224372029305,
    -0.0009585521183907986,
    -0.005258748307824135,
    -0.009539454244077206,
    0.015024994499981403,
    0.005223311949521303,
    -0.0058292727917432785,
    -0.005924950819462538,
    -0.008015693165361881,
    0.011226222850382328,
    -0.0037704231217503548,
    0.021049167960882187,
    0.03155248984694481,
    -0.0010622033150866628,
    0.04870366305112839,
    -0.016144782304763794,
    -0.01992937922477722,
    -0.014784027822315693,
    0.025939377024769783,
    0.016300702467560768,
    -0.0001819432945922017,
    0.008292095735669136,
    0.007753464393317699,
    0.007611718960106373,
    -0.013572106137871742,
    -0.011091564781963825,
    0.023742327466607094,
    -0.0022466620430350304,
    -0.00381294684484601,
    0.014869075268507004,
    0.010574194602668285,
    0.012501929886639118,
    0.018738720566034317,
    0.030730366706848145,
    0.026959942653775215,
    0.006250964943319559,
    -0.009362272918224335,
    -0.020836548879742622,
    0.006569891702383757,
    -0.02085072360932827,
    -0.013302790001034737,
    0.0007175852661021054,
    0.009589064866304398,
    0.010148958303034306,
    0.027342654764652252,
    0.02116256393492222,
    0.027271782979369164,
    -0.005148895550519228,
    -0.024819590151309967,
    -0.020382964983582497,
    0.016144782304763794,
    -0.016924381256103516,
    0.03994380682706833,
    -0.020227044820785522,
    -0.02133265696465969,
    0.007048281840980053,
    0.03665531799197197,
    0.00697740912437439,
    0.015209263190627098,
    0.009163829497992992,
    -0.015280135907232761,
    -0.012516103684902191,
    -0.029766499996185303,
    -0.01708030141890049,
    -0.010772638022899628,
    -0.022140605375170708,
    -0.015549452044069767,
    -0.04340239241719246,
    -0.011693981476128101,
    0.006669113412499428,
    0.01158058550208807,
    -0.026180345565080643,
    -0.027016641572117805,
    -0.0071085235103964806,
    -0.017278743907809258,
    0.0010028475662693381,
    0.026520533487200737,
    0.011311269365251064,
    -0.032799847424030304,
    0.012140478938817978,
    0.005967474542558193,
    -0.009943428449332714,
    -0.02066645585000515,
    -0.007881035096943378,
    0.011226222850382328,
    0.0006737328367307782,
    -0.008065303787589073,
    -0.0033877110108733177,
    0.024904636666178703,
    0.038696449249982834,
    0.008072391152381897,
    0.011460102163255215,
    0.005765487439930439,
    -0.015195089392364025,
    0.024833764880895615,
    0.015110041946172714,
    -0.004762639757245779,
    -0.004464975092560053,
    0.0037987723480910063,
    0.004581914748996496,
    -0.00028792000375688076,
    -0.0008283237111754715,
    0.017533885315060616,
    -0.016740111634135246,
    0.003933430183678865,
    -0.0006648737471550703,
    0.00568398367613554,
    -0.010921469889581203,
    0.010212743654847145,
    0.0032406505197286606,
    -0.01604556106030941,
    -0.0005457191728055477,
    -0.0041637662798166275,
    0.007803075015544891,
    -0.028193127363920212,
    0.02650635875761509,
    0.008136176504194736,
    0.007356577552855015,
    0.05709498003125191,
    0.0048512304201722145,
    0.021772067993879318,
    0.003614503424614668,
    0.03855470195412636,
    0.0054926276206970215,
    0.008419666439294815,
    -0.011559323407709599,
    -0.007661330047994852,
    0.00799443107098341,
    -0.02942631021142006,
    0.006502562668174505,
    0.0039298865012824535,
    0.01824261248111725,
    0.014599759131669998,
    0.008866164833307266,
    -0.006353730335831642,
    0.08062469214200974,
    0.004808707162737846,
    -0.03696715831756592,
    0.007512497249990702,
    -0.0004828197124879807,
    -0.007246725261211395,
    0.0040113902650773525,
    0.008285009302198887,
    -0.013210656121373177,
    -0.005793836433440447,
    0.003933430183678865,
    0.006197810173034668,
    -0.034500788897275925,
    0.008129089139401913,
    -0.021318482235074043,
    -0.008972473442554474,
    -0.022764284163713455,
    0.041304562240839005,
    -0.006708092987537384,
    0.015662848949432373,
    0.0246211476624012,
    0.01437296625226736,
    0.024153387174010277,
    -0.004567740019410849,
    -0.0431472510099411,
    -0.010248180478811264,
    0.04504663497209549,
    0.02053888514637947,
    -0.0027852938510477543,
    -0.0522756427526474,
    0.01750553585588932,
    0.00783851183950901,
    -0.016810985282063484,
    -0.020581407472491264,
    0.0034107447136193514,
    0.007225463166832924,
    -0.014309180900454521,
    -0.03787432610988617,
    0.013607542030513287,
    0.001913560670800507,
    0.004121242556720972,
    -0.013798898085951805,
    -0.024110864847898483,
    -0.030616970732808113,
    -0.004493324086070061,
    -0.009376447647809982,
    0.00034151741419918835,
    -0.026818199083209038,
    -0.02358640730381012
  ]
}
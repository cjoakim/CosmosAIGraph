{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: developers",
    "license :: osi approved :: gnu lesser general public license v3 or later (lgplv3+)",
    "operating system :: posix",
    "programming language :: python :: 2",
    "programming language :: python :: 2.7",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.6",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "programming language :: python :: implementation :: cpython",
    "topic :: software development :: libraries :: python modules"
  ],
  "description": "# multiprocessing-logging\n\n[![supported python versions](https://img.shields.io/pypi/pyversions/multiprocessing-logging.svg)](https://pypi.python.org/pypi/multiprocessing-logging/)\n[![license](https://img.shields.io/pypi/l/multiprocessing-logging.svg)](https://pypi.python.org/pypi/multiprocessing-logging/)\n\n\nwhen using the `multiprocessing` module, logging becomes less useful since\nsub-processes should log to individual files/streams or there's the risk of\nrecords becoming garbled.\n\nthis simple module implements a `handler` that when set on the root\n`logger` will handle tunneling the records to the main process so that\nthey are handled correctly.\n\nit's currently tested in linux and python 2.7 & 3.6+.\n\npypy3 hangs on the tests so i don't recommend using it.\n\npypy appears to be working, recently.\n\nonly works on posix systems and only linux is supported. it does not work on windows.\n\n# origin\n\nthis library was taken verbatim from a [stackoverflow post](http://stackoverflow.com/questions/641420/how-should-i-log-while-using-multiprocessing-in-python)\nand extracted into a module so that i wouldn't have to copy the code in every\nproject.\n\nlater, several improvements have been contributed.\n\n# usage\n\nbefore you start logging but after you configure the logging framework (maybe with `logging.basicconfig(...)`), do the following:\n\n```py\nimport multiprocessing_logging\n\nmultiprocessing_logging.install_mp_handler()\n```\n\nand that's it.\n\n## with multiprocessing.pool\n\nwhen using a pool, make sure `install_mp_handler` is called before the pool is instantiated, for example:\n\n```py\nimport logging\nfrom multiprocessing import pool\nfrom multiprocessing_logging import install_mp_handler\n\nlogging.basicconfig(...)\ninstall_mp_handler()\npool = pool(...)\n```\n\n# problems\nthe approach of this module relies on\n[fork](https://docs.python.org/3.9/library/multiprocessing.html#multiprocessing.set_start_method)\nbeing used to create new processes. this start method\n[is basically unsafe when also using threads](https://bugs.python.org/issue37429),\nas this module does.\n\nthe consequence is that there's a low probability of the application hanging\nwhen creating new processes.\n\nas a palliative, don't continuously create new processes. instead, create a\npool once and reuse it.\n",
  "docs_url": null,
  "keywords": "multiprocessing logging logger handler",
  "license": "lgplv3",
  "name": "multiprocessing-logging",
  "package_url": "https://pypi.org/project/multiprocessing-logging/",
  "project_url": "https://pypi.org/project/multiprocessing-logging/",
  "project_urls": {
    "Homepage": "https://github.com/jruere/multiprocessing-logging"
  },
  "release_url": "https://pypi.org/project/multiprocessing-logging/0.3.4/",
  "requires_dist": [],
  "requires_python": "",
  "summary": "logger for multiprocessing applications",
  "version": "0.3.4",
  "releases": [],
  "developers": [
    "javier@ruere.com.ar",
    "javier_ruere"
  ],
  "kwds": "multiprocessing_logging multiprocessing logging logger pypy3",
  "license_kwds": "lgplv3",
  "libtype": "pypi",
  "id": "pypi_multiprocessing_logging",
  "homepage": "https://github.com/jruere/multiprocessing-logging",
  "release_count": 13,
  "dependency_ids": []
}
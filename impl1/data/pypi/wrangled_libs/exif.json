{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: developers",
    "intended audience :: end users/desktop",
    "license :: osi approved :: mit license",
    "natural language :: english",
    "operating system :: os independent",
    "programming language :: python :: 3",
    "programming language :: python :: 3 :: only",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: multimedia :: graphics :: editors"
  ],
  "description": "##############\n[exif] package\n##############\n\n.. image:: https://www.gitlab.com/tnthieding/exif/badges/master/pipeline.svg\n    :target: https://gitlab.com/tnthieding/exif\n\n.. image:: https://www.gitlab.com/tnthieding/exif/badges/master/coverage.svg\n    :target: https://gitlab.com/tnthieding/exif\n\n.. image:: https://readthedocs.org/projects/exif/badge/?version=latest\n    :target: https://exif.readthedocs.io/en/latest/?badge=latest\n    :alt: documentation status\n\n.. image:: https://img.shields.io/badge/code%20style-black-000000.svg\n    :target: https://github.com/psf/black\n\n.. image:: http://www.mypy-lang.org/static/mypy_badge.svg\n    :target: http://mypy-lang.org/\n    :alt: checked with mypy\n\nread and modify image exif metadata using python without any third-party software\ndependencies. for example, batch process image metadata using a python script.\n\n.. note::\n\n    i developed this package in 2018 as a hobby; however, i no longer have the same bandwidth\n    to work on this project. as always, contributions and bug fixes are welcome and appreciated.\n    if this package does not suit your needs in its current form, i encourage you to investigate\n    alternative packages such as piexif_, pillow_, or the like.\n\n    .. _piexif: https://pypi.org/project/piexif/\n    .. _pillow: https://pypi.org/project/pillow/\n\n***********\nquick start\n***********\n\nopen an image with exif metadata using the python ``open()`` built-in function. ensure the\nbinary mode flag is set. pass this image file object into the ``exif.image`` class::\n\n    >>> from exif import image\n    >>> with open('grand_canyon.jpg', 'rb') as image_file:\n    ...     my_image = image(image_file)\n    ...\n    >>> my_image.has_exif\n    true\n\nlist exif attributes using the ``list_all()`` method::\n\n    >>> my_image.list_all()\n    ['_exif_ifd_pointer', '_gps_ifd_pointer', 'aperture_value', 'brightness_value', 'color_space',\n     'components_configuration', 'compression', 'datetime', 'datetime_digitized', 'datetime_original', 'exif_version',\n     'exposure_bias_value', 'exposure_mode', 'exposure_program', 'exposure_time', 'f_number', 'flash',\n     'flashpix_version', 'focal_length', 'focal_length_in_35mm_film', 'gps_altitude', 'gps_altitude_ref',\n     'gps_datestamp', 'gps_dest_bearing', 'gps_dest_bearing_ref', 'gps_horizontal_positioning_error',\n     'gps_img_direction', 'gps_img_direction_ref', 'gps_latitude', 'gps_latitude_ref', 'gps_longitude',\n     'gps_longitude_ref', 'gps_speed', 'gps_speed_ref', 'gps_timestamp', 'jpeg_interchange_format',\n     'jpeg_interchange_format_length', 'lens_make', 'lens_model', 'lens_specification', 'make', 'maker_note',\n     'metering_mode', 'model', 'orientation', 'photographic_sensitivity', 'pixel_x_dimension', 'pixel_y_dimension',\n     'resolution_unit', 'scene_capture_type', 'scene_type', 'sensing_method', 'shutter_speed_value', 'software',\n     'subject_area', 'subsec_time_digitized', 'subsec_time_original', 'white_balance', 'x_resolution',\n     'y_and_c_positioning', 'y_resolution']\n\naccess exif metadata tags using python attribute notation::\n\n    >>> # read tags with python \"get\" notation.\n    >>> my_image.gps_latitude\n    (36.0, 3.0, 11.08)\n    >>> my_image.gps_longitude\n    (112.0, 5.0, 4.18)\n    >>> my_image.model\n    'iphone 7'\n    >>>\n    >>> # modify tags with python \"set\" notation.\n    >>> my_image.make = \"python\"\n    >>>\n    >>> # delete tags with python \"del\" notation.\n    >>> del my_image.gps_latitude\n    >>> del my_image.gps_longitude\n    >>>\n    >>> # add new tags with python \"set\" notation.\n    >>> from exif import lightsource\n    >>> my_image.light_source = lightsource.daylight\n\nwrite the image with modified exif metadata to an image file using ``open()`` in binary\nwrite mode::\n\n    >>> with open('modified_image.jpg', 'wb') as new_image_file:\n    ...     new_image_file.write(my_image.get_file())\n    ...\n\nrefer to the `usage page <https://exif.readthedocs.io/en/latest/usage.html>`_ for information and examples of alternative ways to access exif tags (e.g.\nwith index/item syntax or with methods).\n\n\n",
  "docs_url": null,
  "keywords": "",
  "license": "",
  "name": "exif",
  "package_url": "https://pypi.org/project/exif/",
  "project_url": "https://pypi.org/project/exif/",
  "project_urls": {
    "Download": "https://gitlab.com/TNThieding/exif",
    "Homepage": "https://gitlab.com/TNThieding/exif"
  },
  "release_url": "https://pypi.org/project/exif/1.6.0/",
  "requires_dist": [
    "plum-py (<2.0.0,>=0.5.0)"
  ],
  "requires_python": ">=3.7",
  "summary": "read and modify image exif metadata using python.",
  "version": "1.6.0",
  "releases": [],
  "developers": [
    "python@thieding.com",
    "tyler_n"
  ],
  "kwds": "exif_version exif has_exif badges badge",
  "license_kwds": "",
  "libtype": "pypi",
  "id": "pypi_exif",
  "homepage": "https://gitlab.com/tnthieding/exif",
  "release_count": 43,
  "dependency_ids": [
    "pypi_plum_py"
  ]
}
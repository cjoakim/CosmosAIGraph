{
  "classifiers": [],
  "description": "# plist\n\n[![build status](https://travis-ci.org/guyingzhao/gplist.svg?branch=master)](https://travis-ci.org/guyingzhao/gplist)\n[![pypi version](https://badge.fury.io/py/gplist.svg)](https://pypi.python.org/pypi/gplist/)\n\n## introduction\n\ninfo.plist is a manifest-liked file to store properties of an application. it's file format can be xml or binary. this library is a pure python implementation to manipulate plist file and parse mobileprovision file.\n\n## usage\n\nthe `plistinfo` is an ordered dict-liked class, so you can treat it as an ordered dict.\n\nwhen parsing from binary data or file, `plistinfo` will automatically detect the format and get the correct result.\n\n`mobileprovision` is an ordered dict-liked class too, and basically its data comes from xml plist.\n\n### binary format\n\n```python\nimport json\nimport os\nfrom gplist.plist import plistinfo\n\n# raw binary\nwith open(\"fooapp.app/info.plist\", \"rb\") as fd:\n    p = plistinfo(fd.read())\n    print(json.dumps(p, indent=2))\n\n# from raw file\np = plistinfo.from_file(\"fooapp.app/info.plist\")\n\n# from app or ipa\np = plistinfo.from_app(\"fooapp.app\")\np = plistinfo.from_app(\"fooapp.ipa\")\n\nfoo_file = \"foo.plist\"\np.to_binary_file(foo_file)\nassert os.path.isfile(foo_file)\n\nbuf = p.to_binary()\nassert isinstance(buf, bytes)\n```\n\n### xml format\n\n```python\nimport os\nfrom gplist.plist import plistinfo\n\np = plistinfo.from_app(\"fooapp.ipa\")\n\nfoo_file = \"foo_xml.plist\"\np.to_xml_file(foo_file)\nassert os.path.isfile(foo_file)\n\np.to_xml_file(foo_file, encoding=\"utf-8\", pretty=false)\nassert os.path.isfile(foo_file)\n\nbuf = p.to_xml(encoding=\"utf-8\", pretty=true)\nassert isinstance(buf, bytes)\n```\n\n### property manipulation\n\n```python\nfrom gplist.plist import plistinfo\n\np = plistinfo.from_app(\"fooapp.ipa\")\n\np.add_property({\"a\": 1}, \"foo\")\nassert p[\"foo\"] == {\"a\": 1}\n\np.add_property(\"b\", \"foo\", \"b\")\nassert p[\"foo\"][\"b\"] == \"b\"\n\np.update_property(\"c\", \"foo\", \"b\")\nassert p[\"foo\"][\"b\"] == \"c\"\n\np.remove_property(\"foo\", \"a\")\nassert p[\"foo\"] == {\"b\": \"c\"}\n```\n\n### mobile provision\n\n```python\nfrom gplist.mobileprovision import mobileprovision\n\nm = mobileprovision.from_file(provision_file)\nprint(m.is_expired())\nprint(m[\"name\"])\nprint(m.has_udid(\"00008030-001a2da6********\")\nfor cert in m.certs:\n    print(cert.sha1)\n    print(cert.is_expired())\n    print(cert.serial)\n    print(cert.common_name)\n    print(cert.organization_unit_name)\n    print(cert.organization_name)\n    print(cert.country_name)\n```\n\n### command line tools\n\n```shell\npython -m gplist info.plist\npython -m gplist embedded.mobileprovision\npython -m gplist --cert embedded.mobileprovision\npython -m gplist --has-udid \"00008030-001a2da6********\" embedded.mobileprovision\n```\n\n\n\n",
  "docs_url": null,
  "keywords": "",
  "license": "mit",
  "name": "gplist",
  "package_url": "https://pypi.org/project/gplist/",
  "project_url": "https://pypi.org/project/gplist/",
  "project_urls": {
    "Homepage": "https://github.com/guyingzhao/gplist.git"
  },
  "release_url": "https://pypi.org/project/gplist/0.0.15/",
  "requires_dist": [],
  "requires_python": "",
  "summary": "pure python plist manipulator",
  "version": "0.0.15",
  "releases": [],
  "developers": [
    "572488191@qq.com",
    "guyingzhao"
  ],
  "kwds": "plist python dict plistinfo from_app",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_gplist",
  "homepage": "https://github.com/guyingzhao/gplist.git",
  "release_count": 14,
  "dependency_ids": []
}
{
  "classifiers": [
    "development status :: 5 - production/stable",
    "environment :: console",
    "intended audience :: developers",
    "license :: osi approved :: mozilla public license 2.0 (mpl 2.0)",
    "operating system :: microsoft :: windows",
    "operating system :: posix",
    "programming language :: python",
    "programming language :: python :: 2.7",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.12",
    "programming language :: python :: 3.5",
    "programming language :: python :: 3.6",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "programming language :: python :: implementation :: cpython",
    "programming language :: python :: implementation :: pypy",
    "topic :: utilities"
  ],
  "description": ".. start-badges\n\n| |docs| |gh_actions| |codecov|\n| |linux| |windows| |mac| |bsd|\n| |pypi| |supported-versions| |supported-implementations|\n| |fedora| |epel| |debian| |ubuntu| |anaconda|\n\n.. |docs| image:: https://img.shields.io/readthedocs/python-enlighten.svg?style=plastic&logo=read-the-docs\n    :target: https://python-enlighten.readthedocs.org\n    :alt: documentation status\n\n.. |gh_actions| image:: https://img.shields.io/github/actions/workflow/status/rockhopper-technologies/enlighten/tests.yml?event=push&logo=github-actions&style=plastic\n    :target: https://github.com/rockhopper-technologies/enlighten/actions/workflows/tests.yml\n    :alt: github actions status\n\n.. |travis| image:: https://img.shields.io/travis/com/rockhopper-technologies/enlighten.svg?style=plastic&logo=travis\n    :target: https://travis-ci.com/rockhopper-technologies/enlighten\n    :alt: travis-ci build status\n\n.. |codecov| image:: https://img.shields.io/codecov/c/github/rockhopper-technologies/enlighten.svg?style=plastic&logo=codecov\n    :target: https://codecov.io/gh/rockhopper-technologies/enlighten\n    :alt: coverage status\n\n.. |pypi| image:: https://img.shields.io/pypi/v/enlighten.svg?style=plastic&logo=pypi\n    :alt: pypi package latest release\n    :target: https://pypi.python.org/pypi/enlighten\n\n.. |supported-versions| image:: https://img.shields.io/pypi/pyversions/enlighten.svg?style=plastic&logo=pypi\n    :alt: supported versions\n    :target: https://pypi.python.org/pypi/enlighten\n\n.. |supported-implementations| image:: https://img.shields.io/pypi/implementation/enlighten.svg?style=plastic&logo=pypi\n    :alt: supported implementations\n    :target: https://pypi.python.org/pypi/enlighten\n\n.. |linux| image:: https://img.shields.io/badge/linux-yes-success?style=plastic&logo=linux\n    :alt: linux supported\n    :target: https://pypi.python.org/pypi/enlighten\n\n.. |windows| image:: https://img.shields.io/badge/windows-yes-success?style=plastic&logo=windows\n    :alt: windows supported\n    :target: https://pypi.python.org/pypi/enlighten\n\n.. |mac| image:: https://img.shields.io/badge/macos-yes-success?style=plastic&logo=apple\n    :alt: macos supported\n    :target: https://pypi.python.org/pypi/enlighten\n\n.. |bsd| image:: https://img.shields.io/badge/bsd-yes-success?style=plastic&logo=freebsd\n    :alt: bsd supported\n    :target: https://pypi.python.org/pypi/enlighten\n\n.. |fedora| image:: https://img.shields.io/fedora/v/python3-enlighten?color=lightgray&logo=fedora&style=plastic&label=fedora\n    :alt: latest fedora version\n    :target: https://src.fedoraproject.org/rpms/python-enlighten\n\n.. |epel| image:: https://img.shields.io/fedora/v/python3-enlighten/epel8?color=lightgray&label=epel&logo=epel\n    :alt: latest epel version\n    :target: https://src.fedoraproject.org/rpms/python-enlighten\n\n.. |debian| image:: https://img.shields.io/debian/v/enlighten/sid?color=lightgray&logo=debian&style=plastic&label=debian\n    :alt: latest debian version\n    :target: https://packages.debian.org/source/sid/enlighten\n\n.. |ubuntu| image:: https://img.shields.io/ubuntu/v/enlighten?color=lightgray&logo=ubuntu&style=plastic&label=ubuntu\n    :alt: latest ubuntu version\n    :target: https://launchpad.net/ubuntu/+source/enlighten\n\n.. |anaconda| image:: https://img.shields.io/conda/vn/conda-forge/enlighten?color=lightgrey&label=anaconda&logo=conda%20forge&style=plastic\n    :alt: latest conda forge version\n    :target: https://anaconda.org/conda-forge/enlighten\n\n.. end-badges\n\noverview\n========\n\nenlighten progress bar is a console progress bar library for python.\n\nthe main advantage of enlighten is it allows writing to stdout and stderr without any\nredirection or additional code. just print or log as you normally would.\n\nenlighten also includes experimental support for jupyter notebooks.\n\n|\n\n.. image:: https://raw.githubusercontent.com/rockhopper-technologies/enlighten/master/doc/_static/demo.gif\n    :target: http://python-enlighten.readthedocs.io/en/stable/examples.html\n\nthe code for this animation can be found in\n`demo.py <https://github.com/rockhopper-technologies/enlighten/blob/master/examples/demo.py>`__\nin\n`examples <https://github.com/rockhopper-technologies/enlighten/tree/master/examples>`__.\n\ndocumentation\n=============\n\nhttps://python-enlighten.readthedocs.io\n\ninstallation\n============\n\npip\n---\n\n.. code-block:: console\n\n    $ pip install enlighten\n\n\nrpm\n---\n\nfedora and el8 (rhel/centos)\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n(for epel_ repositories must be configured_)\n\n.. code-block:: console\n\n    $ dnf install python3-enlighten\n\n\ndeb\n---\n\ndebian and ubuntu\n^^^^^^^^^^^^^^^^^\n.. code-block:: console\n\n    $ apt-get install python3-enlighten\n\n\nconda\n-----\n\n.. code-block:: console\n\n    $ conda install -c conda-forge enlighten\n\n\n.. _epel: https://fedoraproject.org/wiki/epel\n.. _configured: https://fedoraproject.org/wiki/epel#how_can_i_use_these_extra_packages.3f\n\n\nhow to use\n==========\n\nmanagers\n--------\n\nthe first step is to create a manager. managers handle output to the terminal and allow multiple\nprogress bars to be displayed at the same time.\n\nget_manager_ can be used to get a manager_ instance.\nmanagers will only display output when the output stream, ``sys.__stdout__`` by default,\nis attached to a tty. if the stream is not attached to a tty, the manager instance returned will be\ndisabled.\n\nin most cases, a manager can be created like this.\n\n.. code-block:: python\n\n    import enlighten\n    manager = enlighten.get_manager()\n\nif you need to use a different output stream, or override the defaults, see the documentation for\nget_manager_\n\n\nprogress bars\n-------------\n\nfor a basic progress bar, invoke the manager.counter_ method.\n\n.. code-block:: python\n\n    import time\n    import enlighten\n\n    manager = enlighten.get_manager()\n    pbar = manager.counter(total=100, desc='basic', unit='ticks')\n\n    for num in range(100):\n        time.sleep(0.1)  # simulate work\n        pbar.update()\n\nadditional progress bars can be created with additional calls to the\nmanager.counter_ method.\n\n.. code-block:: python\n\n    import time\n    import enlighten\n\n    manager = enlighten.get_manager()\n    ticks = manager.counter(total=100, desc='ticks', unit='ticks')\n    tocks = manager.counter(total=20, desc='tocks', unit='tocks')\n\n    for num in range(100):\n        time.sleep(0.1)  # simulate work\n        print(num)\n        ticks.update()\n        if not num % 5:\n            tocks.update()\n\n    manager.stop()\n\ncounters\n--------\n\nthe counter_ class has two output formats, progress bar and counter.\n\nthe progress bar format is used when a total is not ``none`` and the count is less than the\ntotal. if neither of these conditions are met, the counter format is used:\n\n.. code-block:: python\n\n    import time\n    import enlighten\n\n    manager = enlighten.get_manager()\n    counter = manager.counter(desc='basic', unit='ticks')\n\n    for num in range(100):\n        time.sleep(0.1)  # simulate work\n        counter.update()\n\nstatus bars\n-----------\nstatus bars are bars that work similarly to progress bars and counters, but present relatively\nstatic information. status bars are created with\nmanager.status_bar_.\n\n.. code-block:: python\n\n    import enlighten\n    import time\n\n    manager = enlighten.get_manager()\n    status_bar = manager.status_bar('static message',\n                                    color='white_on_red',\n                                    justify=enlighten.justify.center)\n    time.sleep(1)\n    status_bar.update('updated static message')\n    time.sleep(1)\n\nstatus bars can also use formatting with dynamic variables.\n\n.. code-block:: python\n\n    import enlighten\n    import time\n\n    manager = enlighten.get_manager()\n    status_format = '{program}{fill}stage: {stage}{fill} status {status}'\n    status_bar = manager.status_bar(status_format=status_format,\n                                    color='bold_slategray',\n                                    program='demo',\n                                    stage='loading',\n                                    status='okay')\n    time.sleep(1)\n    status_bar.update(stage='initializing', status='okay')\n    time.sleep(1)\n    status_bar.update(status='fail')\n\nstatus bars, like other bars can be pinned. to pin a status bar to the top of all other bars,\ninitialize it before any other bars. to pin a bar to the bottom of the screen, use\n``position=1`` when initializing.\n\nsee statusbar_ for more details.\n\ncolor\n-----\n\nstatus bars and the bar component of a progress bar can be colored by setting the\n``color`` keyword argument. see\n`series color <https://python-enlighten.readthedocs.io/en/stable/api.html#series-color>`_ for more\ninformation about valid colors.\n\n.. code-block:: python\n\n    import time\n    import enlighten\n\n    manager = enlighten.get_manager()\n    counter = manager.counter(total=100, desc='colorized', unit='ticks', color='red')\n\n    for num in range(100):\n        time.sleep(0.1)  # simulate work\n    counter.update()\n\nadditionally, any part of the progress bar can be colored using `counter\nformatting <https://python-enlighten.readthedocs.io/en/stable/api.html#counter-format>`_ and the\n`color capabilities <https://blessed.readthedocs.io/en/stable/colors.html>`_\nof the underlying `blessed <https://blessed.readthedocs.io/en/stable>`_\n`terminal <https://blessed.readthedocs.io/en/stable/terminal.html>`_.\n\n.. code-block:: python\n\n    import enlighten\n\n    manager = enlighten.get_manager()\n\n    # standard bar format\n    std_bar_format = u'{desc}{desc_pad}{percentage:3.0f}%|{bar}| ' + \\\n                     u'{count:{len_total}d}/{total:d} ' + \\\n                     u'[{elapsed}<{eta}, {rate:.2f}{unit_pad}{unit}/s]'\n\n    # red text\n    bar_format = manager.term.red(std_bar_format)\n\n    # red on white background\n    bar_format = manager.term.red_on_white(std_bar_format)\n\n    # x11 colors\n    bar_format = manager.term.peru_on_seagreen(std_bar_format)\n\n    # rbg text\n    bar_format = manager.term.color_rgb(2, 5, 128)(std_bar_format)\n\n    # rbg background\n    bar_format = manager.term.on_color_rgb(255, 190, 195)(std_bar_format)\n\n    # rgb text and background\n    bar_format = manager.term.on_color_rgb(255, 190, 195)(std_bar_format)\n    bar_format = manager.term.color_rgb(2, 5, 128)(bar_format)\n\n    # apply color to select parts\n    bar_format = manager.term.red(u'{desc}') + u'{desc_pad}' + \\\n                 manager.term.blue(u'{percentage:3.0f}%') + u'|{bar}|'\n\n    # apply to counter\n    ticks = manager.counter(total=100, desc='ticks', unit='ticks', bar_format=bar_format)\n\nif the ``color`` option is applied to a counter_,\nit will override any foreground color applied.\n\n\n\nmulticolored\n------------\n\nthe bar component of a progress bar can be multicolored to track multiple categories in a single\nprogress bar.\n\nthe colors are drawn from right to left in the order they were added.\n\nby default, when multicolored progress bars are used, additional fields are available for\n``bar_format``:\n\n    - count_n (``int``) - current value of ``count``\n    - count_0(``int``) - remaining count after deducting counts for all subcounters\n    - count_00 (``int``) - sum of counts from all subcounters\n    - percentage_n (``float``) - percentage complete\n    - percentage_0(``float``) - remaining percentage after deducting percentages\n      for all subcounters\n    - percentage_00 (``float``) - total of percentages from all subcounters\n\nwhen counter.add_subcounter_ is called with ``all_fields`` set to ``true``,\nthe subcounter will have the additional fields:\n\n    - eta_n (``str``) - estimated time to completion\n    - rate_n (``float``) - average increments per second since parent was created\n\nmore information about ``bar_format`` can be found in the format_ section of the api.\n\none use case for multicolored progress bars is recording the status of a series of tests.\nin this example, failures are red, errors are white, and successes are green. the count of each is\nlisted in the progress bar.\n\n.. code-block:: python\n\n    import random\n    import time\n    import enlighten\n\n    bar_format = u'{desc}{desc_pad}{percentage:3.0f}%|{bar}| ' + \\\n                u's:{count_0:{len_total}d} ' + \\\n                u'f:{count_2:{len_total}d} ' + \\\n                u'e:{count_1:{len_total}d} ' + \\\n                u'[{elapsed}<{eta}, {rate:.2f}{unit_pad}{unit}/s]'\n\n    manager = enlighten.get_manager()\n    success = manager.counter(total=100, desc='testing', unit='tests',\n                                color='green', bar_format=bar_format)\n    errors = success.add_subcounter('white')\n    failures = success.add_subcounter('red')\n\n    while success.count < 100:\n        time.sleep(random.uniform(0.1, 0.3))  # random processing time\n        result = random.randint(0, 10)\n\n        if result == 7:\n            errors.update()\n        if result in (5, 6):\n            failures.update()\n        else:\n            success.update()\n\na more complicated example is recording process start-up. in this case, all items will start red,\ntransition to yellow, and eventually all will be green. the count, percentage, rate, and eta fields\nare all derived from the second subcounter added.\n\n.. code-block:: python\n\n    import random\n    import time\n    import enlighten\n\n    services = 100\n    bar_format = u'{desc}{desc_pad}{percentage_2:3.0f}%|{bar}|' + \\\n                u' {count_2:{len_total}d}/{total:d} ' + \\\n                u'[{elapsed}<{eta_2}, {rate_2:.2f}{unit_pad}{unit}/s]'\n\n    manager = enlighten.get_manager()\n    initializing = manager.counter(total=services, desc='starting', unit='services',\n                                    color='red', bar_format=bar_format)\n    starting = initializing.add_subcounter('yellow')\n    started = initializing.add_subcounter('green', all_fields=true)\n\n    while started.count < services:\n        remaining = services - initializing.count\n        if remaining:\n            num = random.randint(0, min(4, remaining))\n            initializing.update(num)\n\n        ready = initializing.count - initializing.subcount\n        if ready:\n            num = random.randint(0, min(3, ready))\n            starting.update_from(initializing, num)\n\n        if starting.count:\n            num = random.randint(0, min(2, starting.count))\n            started.update_from(starting, num)\n\n        time.sleep(random.uniform(0.1, 0.5))  # random processing time\n\n\nadditional examples\n-------------------\n* `basic <https://raw.githubusercontent.com/rockhopper-technologies/enlighten/master/examples/basic.py>`__ - basic progress bar\n* `context manager <https://raw.githubusercontent.com/rockhopper-technologies/enlighten/master/examples/context_manager.py>`__ - managers and counters as context managers\n* `floats <https://raw.githubusercontent.com/rockhopper-technologies/enlighten/master/examples/floats.py>`__ - support totals and counts that are ``floats``\n* `multicolored <https://raw.githubusercontent.com/rockhopper-technologies/enlighten/master/examples/multicolored.py>`__ - multicolored progress bars\n* `multiple with logging <https://raw.githubusercontent.com/rockhopper-technologies/enlighten/master/examples/multiple_logging.py>`__ - nested progress bars and logging\n* `ftp downloader <https://raw.githubusercontent.com/rockhopper-technologies/enlighten/master/examples/ftp_downloader.py>`__ - show progress downloading files from ftp\n\ncustomization\n-------------\n\nenlighten is highly configurable. for information on modifying the output, see the\nseries_ and format_ sections of the counter_ documentation.\n\n.. _counter: http://python-enlighten.readthedocs.io/en/stable/api.html#enlighten.counter\n.. _counter.add_subcounter: https://python-enlighten.readthedocs.io/en/stable/api.html#enlighten.counter.add_subcounter\n.. _statusbar: https://python-enlighten.readthedocs.io/en/stable/api.html#enlighten.statusbar\n.. _manager: http://python-enlighten.readthedocs.io/en/stable/api.html#enlighten.manager\n.. _manager.counter: https://python-enlighten.readthedocs.io/en/stable/api.html#enlighten.manager.counter\n.. _manager.status_bar: https://python-enlighten.readthedocs.io/en/stable/api.html#enlighten.manager.status_bar\n.. _get_manager: http://python-enlighten.readthedocs.io/en/stable/api.html#enlighten.get_manager\n.. _format: http://python-enlighten.readthedocs.io/en/stable/api.html#counter-format\n.. _series: http://python-enlighten.readthedocs.io/en/stable/api.html#series\n.. _epel: https://fedoraproject.org/wiki/epel\n.. _configured: https://fedoraproject.org/wiki/epel#how_can_i_use_these_extra_packages.3f\n",
  "docs_url": null,
  "keywords": "progress,bar,progressbar,counter,status,statusbar",
  "license": "mplv2.0",
  "name": "enlighten",
  "package_url": "https://pypi.org/project/enlighten/",
  "project_url": "https://pypi.org/project/enlighten/",
  "project_urls": {
    "Documentation": "https://python-enlighten.readthedocs.io",
    "Homepage": "https://github.com/Rockhopper-Technologies/enlighten"
  },
  "release_url": "https://pypi.org/project/enlighten/1.12.3/",
  "requires_dist": [
    "blessed >=1.17.7",
    "prefixed >=0.3.2",
    "backports.functools-lru-cache ; python_version < \"3.2\""
  ],
  "requires_python": "",
  "summary": "enlighten progress bar",
  "version": "1.12.3",
  "releases": [],
  "developers": [
    "avram_lubkin",
    "avylove@rockhopper.net"
  ],
  "kwds": "progressbar _statusbar status_bar statusbar status_bar_",
  "license_kwds": "mplv2.0",
  "libtype": "pypi",
  "id": "pypi_enlighten",
  "homepage": "https://github.com/rockhopper-technologies/enlighten",
  "release_count": 30,
  "dependency_ids": [
    "pypi_backports.functools_lru_cache",
    "pypi_blessed",
    "pypi_prefixed"
  ]
}
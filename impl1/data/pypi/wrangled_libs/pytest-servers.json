{
  "classifiers": [
    "development status :: 3 - alpha",
    "framework :: pytest",
    "intended audience :: developers",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9"
  ],
  "description": "pytest servers\n--------------\n\n|pypi| |status| |python version| |license|\n\n|tests| |codecov| |pre-commit| |black|\n\n.. |pypi| image:: https://img.shields.io/pypi/v/pytest-servers.svg\n   :target: https://pypi.org/project/pytest-servers/\n   :alt: pypi\n.. |status| image:: https://img.shields.io/pypi/status/pytest-servers.svg\n   :target: https://pypi.org/project/pytest-servers/\n   :alt: status\n.. |python version| image:: https://img.shields.io/pypi/pyversions/pytest-servers\n   :target: https://pypi.org/project/pytest-servers\n   :alt: python version\n.. |license| image:: https://img.shields.io/pypi/l/pytest-servers\n   :target: https://opensource.org/licenses/apache-2.0\n   :alt: license\n.. |tests| image:: https://github.com/iterative/pytest-servers/workflows/tests/badge.svg\n   :target: https://github.com/iterative/pytest-servers/actions?workflow=tests\n   :alt: tests\n.. |codecov| image:: https://codecov.io/gh/iterative/pytest-servers/branch/main/graph/badge.svg\n   :target: https://app.codecov.io/gh/iterative/pytest-servers\n   :alt: codecov\n.. |pre-commit| image:: https://img.shields.io/badge/pre--commit-enabled-brightgreen?logo=pre-commit&logocolor=white\n   :target: https://github.com/pre-commit/pre-commit\n   :alt: pre-commit\n.. |black| image:: https://img.shields.io/badge/code%20style-black-000000.svg\n   :target: https://github.com/psf/black\n   :alt: black\n\n\nfeatures\n--------\n\ncreate temporary directories on the following filesystems:\n\n- local fs\n- in-memory fs\n- s3, both using mock s3 remotes (https://github.com/spulec/moto) and real s3 remotes\n- azure, both using mock azure remotes (https://github.com/azure/azurite) via docker and using real azure storage remotes\n- google cloud storage, both using mock gcs remote (https://github.com/fsouza/fake-gcs-server) via docker and using real google storage remotes\n\ninstallation\n------------\n\nyou can install *pytest servers* via pip_ from pypi_:\n\n.. code:: console\n\n   $ pip install pytest-servers\n\nto use temporary s3 paths:\n\n.. code:: console\n\n   $ pip install pytest-servers[s3]\n\nto use temporary azure paths\n\n.. code:: console\n\n   $ pip install pytest-servers[azure]\n\nto use temporary google cloud storage paths\n\n.. code:: console\n\n    $ pip install pytest-servers[gcs]\n\nto install all extras:\n\n.. code:: console\n\n   $ pip install pytest-servers[all]\n\nusage\n------------\n\nthe main fixture provided by `pytest-servers` provides is `tmp_upath_factory`, which can be used\nto generate temporary paths on different (mocked) filesystems:\n\n.. code:: python\n\n   def test_something_on_s3(tmp_upath_factory):\n       path = tmp_upath_factory.mktemp(\"s3\")\n       foo = path / \"foo\"\n       foo.write_text(\"foo\")\n       ...\n\n`mktemp` supports the following filesystem types:\n\n- ``local`` (local filesystem)\n- ``memory`` (in-memory filesystem)\n- ``s3`` (amazon s3)\n- ``gcs`` (google cloud storage)\n- ``azure`` (azure storage)\n\nsome convenience fixtures that wrap `tmp_upath_factory.mktemp` and return a paths on these filesystems are also available:\n\n- ``tmp_local_path``\n- ``tmp_memory_path``\n- ``tmp_s3_path``\n- ``tmp_gcs_path``\n- ``tmp_azure_path``\n\nthe `tmp_upath` fixture can be used for parametrizing paths with pytest's indirect parametrization:\n\n.. code:: python\n\n   @pytest.mark.parametrize(\"tmp_upath\", [\"local\", \"s3\", \"gcs\"], indirect=true)\n   def test_something(tmp_upath):\n       pass\n\nin order to use real remotes instead of mocked ones, use `tmp_upath_factory` with the following methods\n\n- ``tmp_upath_factory.s3(region_name, client_kwargs)`` where client_kwargs are passed to the underlying s3filesystem/boto client\n- ``tmp_upath_factory.gcs(endpoint_url)``\n- ``tmp_upath_factory.azure(connection_string)``\n\n\nversioning support can be used by using the `versioning` fixture. this is currently supported for s3 and gcs remotes\n\n.. code:: python\n\n   # using mktemp\n   def test_something_on_s3_versioned(tmp_upath_factory):\n       path = tmp_upath_factory.mktemp(\"s3\", version_aware=true)\n       assert path.fs.version_aware # bucket has versioning enabled\n\n   # or, using remote-specific fixtures\n   def test_something_on_s3_versioned(tmp_s3_path, versioning):\n       assert tmp_s3_path.fs.version_aware # bucket has versioning enabled\n\n\ncontributing\n------------\n\ncontributions are very welcome.\nto learn more, see the `contributor guide`_.\n\nlicense\n--------------\ndistributed under the terms of the `apache 2.0 license`_,\n*pytest servers* is free and open source software.\n\nissues\n-------------\n\nif you encounter any problems,\nplease `file an issue`_ along with a detailed description.\n\n\n.. _apache 2.0 license: https://opensource.org/licenses/apache-2.0\n.. _pypi: https://pypi.org/\n.. _file an issue: https://github.com/iterative/pytest-servers/issues\n.. _pip: https://pip.pypa.io/\n.. github-only\n.. _contributor guide: contributing.rst\n",
  "docs_url": null,
  "keywords": "",
  "license": "apache-2.0",
  "name": "pytest-servers",
  "package_url": "https://pypi.org/project/pytest-servers/",
  "project_url": "https://pypi.org/project/pytest-servers/",
  "project_urls": {
    "Issues": "https://github.com/iterative/pytest-servers/issues",
    "Source": "https://github.com/iterative/pytest-servers"
  },
  "release_url": "https://pypi.org/project/pytest-servers/0.4.1/",
  "requires_dist": [
    "pytest >=6.2",
    "requests",
    "fsspec",
    "universal-pathlib ==0.1.4",
    "filelock >=3.3.2",
    "pytest-servers[azure,gcs,s3] ; extra == 'all'",
    "adlfs >=2022.02.22 ; extra == 'azure'",
    "pytest-servers[docker] ; extra == 'azure'",
    "pytest-servers[all] ; extra == 'dev'",
    "pytest-servers[tests] ; extra == 'dev'",
    "docker >6 ; extra == 'docker'",
    "gcsfs >=2022.02.22 ; extra == 'gcs'",
    "pytest-servers[docker] ; extra == 'gcs'",
    "moto[server] >=4 ; extra == 's3'",
    "s3fs[boto3] >=2022.02.0 ; extra == 's3'",
    "botocore >=1.31.17 ; extra == 's3'",
    "coverage-enable-subprocess ; extra == 'tests'",
    "coverage[toml] >6 ; extra == 'tests'",
    "pytest-sugar ==0.9.7 ; extra == 'tests'",
    "pytest-xdist ==3.5.0 ; extra == 'tests'",
    "mypy ==1.7.1 ; extra == 'tests'",
    "types-requests ; extra == 'tests'"
  ],
  "requires_python": ">=3.8",
  "summary": "pytest servers",
  "version": "0.4.1",
  "releases": [],
  "developers": [
    "support@dvc.org"
  ],
  "kwds": "pytest pyversions pypi pypi_ _pypi",
  "license_kwds": "apache-2.0",
  "libtype": "pypi",
  "id": "pypi_pytest_servers",
  "homepage": "",
  "release_count": 30,
  "dependency_ids": [
    "pypi_adlfs",
    "pypi_botocore",
    "pypi_coverage",
    "pypi_coverage_enable_subprocess",
    "pypi_docker",
    "pypi_filelock",
    "pypi_fsspec",
    "pypi_gcsfs",
    "pypi_moto",
    "pypi_mypy",
    "pypi_pytest",
    "pypi_pytest_servers",
    "pypi_pytest_sugar",
    "pypi_pytest_xdist",
    "pypi_requests",
    "pypi_s3fs",
    "pypi_types_requests",
    "pypi_universal_pathlib"
  ]
}
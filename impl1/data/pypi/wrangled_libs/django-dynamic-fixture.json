{
  "classifiers": [
    "framework :: django",
    "operating system :: os independent",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "programming language :: python :: implementation :: pypy",
    "topic :: software development"
  ],
  "description": "django dynamic fixture\n======================\n\n[![docs status](https://readthedocs.org/projects/django-dynamic-fixture/badge/?version=latest)](http://django-dynamic-fixture.readthedocs.org/en/latest/index.html)\n[![pypi version](https://badge.fury.io/py/django-dynamic-fixture.svg)](https://badge.fury.io/py/django-dynamic-fixture)\n![pypi - python version](https://img.shields.io/pypi/pyversions/django-dynamic-fixture)\n![pypi - downloads](https://img.shields.io/pypi/dm/django-dynamic-fixture)\n\n**latest version: 4.0.1 (sep 2023)**\n\ndjango dynamic fixture (ddf) is a complete and simple library to create dynamic model instances for testing purposes.\n\nit lets you focus on your tests, instead of focusing on generating some dummy data which is boring and polutes the test source code.\n\n* [basic examples](#basic-examples)\n* [cheat sheet](#cheat-sheet)\n* <a href=\"http://django-dynamic-fixture.readthedocs.org/en/latest/index.html\" target=\"_blank\">full documentation</a>\n\n\nbasic examples\n--------------\n\n> customize only the important details of the test:\n\n```python\n    from ddf import g\n    from my_library import author, book\n\n    def test_search_book_by_author():\n        author1 = g(author)\n        author2 = g(author)\n        book1 = g(book, authors=[author1])\n        book2 = g(book, authors=[author2])\n        books = book.objects.search_by_author(author1.name)\n        assert book1 in books\n        assert book2 not in books\n```\n\n> using some goodies to keep the test code smaller:\n\n```python\n    from ddf import g\n\n    def test_search_book_by_author():\n        author1, author2 = g('my_library.author', n=2)\n        book1 = g('my_library.book', authors=[author1])\n        book2 = g('my_library.book', authors=[author2])\n        books = book.objects.search_by_author(author1.name)\n        assert book1 in books\n        assert book2 not in books\n```\n\n> configuring data from relationship fields:\n\n```python\n    from ddf import g\n\n    def test_search_book_by_author():\n        book1 = g(book, main_author__name='eistein')\n        book2 = g(book)\n        books = book.objects.search_by_author(book1.main_author.name)\n        assert book1 in books\n        assert book2 not in books\n        assert book1.main_author.name == 'eistein'\n```\n\ncheat sheet\n--------------\n\n```python\n# import the main ddf features\nfrom ddf import n, g, f, m, c, p, teach # meaning: new, get, foreignkey, mask, copier, print, teach\n```\n\n```python\n# `n` creates an instance of model without saving it to db\ninstance = n(book)\n```\n\n```python\n# `g` creates an instance of model and save it into the db\ninstance = g(book)\n```\n\n```python\n# `f` customize relationship objects\ninstance = g(book, author=f(name='eistein'))\n# same as `f`\ninstance = g(book, author__name='eistein')\n```\n\n```python\n# `m` receives a data mask and create a random string using it\n# known symbols: `_`, `#` or `-`\n# to escape known symbols: `!`\ninstance = n(book, address=m('street ___, ### !- --'))\nassert instance.address == 'street tpa, 632 - br'\n```\n\n```python\n# `c` copies data from one field to another\ninstance = n(book, address_formatted=c('address'), address=m('street ___, ### \\- --'))\nassert instance.address_formatted == 'street tpa, 632 - br'\n```\n\n```python\n# `teach` teaches ddf in how to build an instance\nteach(book, address=m('street ___, ### !- --'))\ninstance = g(book)\nassert instance.address == 'street tpa, 632 - br'\n```\n\n```python\n# `p` print instance values for debugging\np(instance)\n```\n\n```python\nimport ddf\nddf.__version__\n```\n\n```python\nfrom ddf import ddf_check_models\nsucceeded, errors = ddf_check_models()\nsucceeded, errors = ddf_check_models(print_csv=true)\nsucceeded, errors = ddf_check_models(csv_filename='ddf_compatibility_report.csv')\n```\n",
  "docs_url": null,
  "keywords": "python django testing fixture",
  "license": "mit",
  "name": "django-dynamic-fixture",
  "package_url": "https://pypi.org/project/django-dynamic-fixture/",
  "project_url": "https://pypi.org/project/django-dynamic-fixture/",
  "project_urls": {
    "Homepage": "https://github.com/paulocheque/django-dynamic-fixture"
  },
  "release_url": "https://pypi.org/project/django-dynamic-fixture/4.0.1/",
  "requires_dist": [],
  "requires_python": "",
  "summary": "a full library to create dynamic model instances for testing purposes.",
  "version": "4.0.1",
  "releases": [],
  "developers": [
    "paulocheque",
    "paulocheque@gmail.com"
  ],
  "kwds": "django fixture py pypi ddf_check_models",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_django_dynamic_fixture",
  "homepage": "https://github.com/paulocheque/django-dynamic-fixture",
  "release_count": 43,
  "dependency_ids": []
}
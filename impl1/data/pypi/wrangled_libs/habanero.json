{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: developers",
    "intended audience :: science/research",
    "license :: osi approved :: mit license",
    "natural language :: english",
    "programming language :: python",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.6",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: scientific/engineering :: bio-informatics"
  ],
  "description": "habanero\n========\n\n|pypi| |docs| |ghactions| |coverage| |black|\n\nthis is a low level client for working with crossref's search api. it's been named to be more generic, as other organizations are/will adopt crossref's search api, making it possible to interact with all from one client.\n\n`crossref api docs <https://github.com/crossref/rest-api-doc>`__\n\nother crossref api clients:\n\n- ruby: `serrano`, `<https://github.com/sckott/serrano>`__\n\ncrossref's api issue tracker: https://gitlab.com/crossref/issues\n\n`habanero` includes three modules you can import as needed (or\nimport all):\n\n`crossref` - crossref search api. the `crossref` module includes methods matching crossref api routes, and a few convenience methods for getting doi agency and random dois:\n\n- `works` - `/works` route\n- `members` - `/members` route\n- `prefixes` - `/prefixes` route\n- `funders` - `/funders` route\n- `journals` - `/journals` route\n- `types` - `/types` route\n- `licenses` - `/licenses` route\n- `registration_agency` - get doi minting agency\n- `random_dois` - get random set of dois\n\n`counts` - citation counts. includes the single `citation_count` method\n\n`cn` - content negotiation. includes the methods:\n\n- `content_negotiation` - get citations in a variety of formats\n- `csl_styles` - get csl styles, used in `content_negotation` method\n\n`workscontainer` - a class for handling crossref works. pass output of works from methods on the `crossref` class to more easily extract specific fields of works. \n\nnote about searching:\n\nyou are using the crossref search api described at https://api.crossref.org/swagger-ui/index.html. when you search with query terms, on crossref servers they are not searching full text, or even abstracts of articles, but only what is available in the data that is returned to you. that is, they search article titles, authors, etc. for some discussion on this, see https://gitlab.com/crossref/issues/-/issues/101\n\nrate limits\n-----------\n\nsee the headers `x-rate-limit-limit` and `x-rate-limit-interval` for current rate limits.\n\nthe polite pool\n---------------\n\nto get in the polite pool it's a good idea now to include a `mailto` email\naddress. see docs for more information.\n\n\ninstallation\n============\n\nstable version\n\n.. code-block:: console\n\n  pip (or pip3) install habanero\n\ndev version\n\n.. code-block:: console\n\n    pip install git+https://github.com/sckott/habanero.git#egg=habanero\n\n\nor build it yourself locally\n\n.. code-block:: console\n\n    git clone https://github.com/sckott/habanero.git\n    cd habanero\n    make install\n\nusage\n=====\n\ninitialize a client\n\n.. code-block:: python\n\n    from habanero import crossref\n    cr = crossref()\n\nworks route\n\n.. code-block:: python\n  \n  # query\n  x = cr.works(query = \"ecology\")\n  x['message']\n  x['message']['total-results']\n  x['message']['items']\n\n  # fetch data by doi\n  cr.works(ids = '10.1371/journal.pone.0033693')\n\nmembers route\n\n.. code-block:: python\n  \n  # ids here is the crossref member id; 98 = hindawi\n  cr.members(ids = 98, works = true)\n\ncitation counts\n\n.. code-block:: python\n\n  from habanero import counts\n  counts.citation_count(doi = \"10.1016/j.fbr.2012.01.001\")\n\ncontent negotiation - get citations in many formats\n\n.. code-block:: python\n\n  from habanero import cn\n  cn.content_negotiation(ids = '10.1126/science.169.3946.635')\n  cn.content_negotiation(ids = '10.1126/science.169.3946.635', format = \"citeproc-json\")\n  cn.content_negotiation(ids = \"10.1126/science.169.3946.635\", format = \"rdf-xml\")\n  cn.content_negotiation(ids = \"10.1126/science.169.3946.635\", format = \"text\")\n  cn.content_negotiation(ids = \"10.1126/science.169.3946.635\", format = \"text\", style = \"apa\")\n  cn.content_negotiation(ids = \"10.1126/science.169.3946.635\", format = \"bibentry\")\n\nmeta\n====\n\n* please note that this project is released with a `contributor code of conduct <https://github.com/sckott/habanero/blob/main/code_of_conduct.md>`__. by participating in this project you agree to abide by its terms.\n* license: mit; see `license file <https://github.com/sckott/habanero/blob/main/license>`__\n\n.. |pypi| image:: https://badge.fury.io/py/habanero.svg\n    :target: https://badge.fury.io/py/habanero\n\n.. |docs| image:: https://readthedocs.org/projects/habanero/badge/?version=latest\n   :target: http://habanero.rtfd.org/\n\n.. |ghactions| image:: https://github.com/sckott/habanero/workflows/python/badge.svg\n   :target: https://github.com/sckott/habanero/actions?query=workflow%3apython\n\n.. |coverage| image:: https://codecov.io/gh/sckott/habanero/branch/main/graph/badge.svg?token=6rrgnauqmr\n   :target: https://codecov.io/gh/sckott/habanero\n\n.. |black| image:: https://img.shields.io/badge/code%20style-black-000000.svg\n   :target: https://github.com/psf/black\n\nchangelog\n=========\n\n1.2.3 (2023-02-02)\n--------------------\n* now using typehints, tested on python back to 3.6; though could work with older python 3 versions. see the new docs for better information on types (#70)\n* fixed problem with usage of `warn=true`; in a for loop, an internal variable `warning_thrown` wasn't being reset after each loop iteration, with the result that all objects returned after a warning was thrown were `none` regardless of the actual result. sorry about that!  (#112) (#113)\n\n1.2.2 (2022-05-19)\n--------------------\n* fixed class `workscontainer` to work with cursor output of works results (e.g., `cr.works(query, cursor=\"*\")`) (#106) thanks @ivansterligov\n\n1.2 (2022-03-27)\n--------------------\n* added class `workscontainer` to make handling works data easier (#101)\n* changed master branch to main in github development repository (#103)\n* exclude tests from install (#105)\n\n1.0 (2021-11-12)\n--------------------\n* fixes to docs/contributing.rst and package level docs for habanero (#89) (#90) thanks @daniel-mietchen !\n* fix limit and offset internal handling for `request` and `request` (#91) thanks @bubblbu !\n* `content_negotation` throws warning now on 4xx/5xx status code to allow for bad dois alongside good dois (#92)\n* add example to readme for querying `works` by doi (#93)\n* fail better when json is not returned; try json.loads and catch valueerror (jsondecodeerror is a subclass of valueerror) (#97)\n* funders, journals, members, prefixes, types and works gain `warn` parameter to optionally throw a warning instead of error if a doi is not found - not found doi with `warn=true` returns `none` (#69)\n\n0.7.4 (2020-05-29)\n--------------------\n* `query.title` filter is deprecated, use `query.bibliographic` instead (#85)\n\n0.7.2 (2019-12-12)\n--------------------\n* `crossref()` class gains `ua_string` option to add an additional string to the user-agent sent with every request (#84)\n\n0.7.0 (2019-11-08)\n--------------------\n* `filter_names()` and `filter_details()` altered to get metadata for works, members and funders filters; and added egs to members and funders methods for using filters (#67)\n* many typos fixed (#80) thanks @radcliffe !\n* use of a progress bar is now possible when fetching works route data, only when doing deep paging, see `progress_bar` parameter (#77) (#82)\n* `content_negotiation` fixes: `ids` parameter is now required (has no default), and must be a str or list of str (#83)\n* no longer testing under python 2\n\n0.6.2 (2018-10-22)\n--------------------\n* changelog was missing from the pypi distribution, fixed now (#71)\n* fixed `crossref.registration_agency()` method, borked it up on a previous change (#72)\n* set encoding on response text for `content_negotiation()` method to utf-8 to fix encoding issues (#73)\n* fix `crossref.filter_names()` method; no sort on `dict_keys` (#76)\n\n0.6.0 (2017-10-20)\n--------------------\n* added verification and docs for additional crossref search filters (#62)\n* big improvement to docs on readthedocs (#59)\n* added `mailto` support (#68) (#63) and related added docs about polite pool (#66)\n* added support for `select` parameter (#65)\n* added all new `/works` route filters, and simplified filter option handling within library (#60)\n\n0.5.0 (2017-07-20)\n--------------------\n* now using `vcrpy` to mock all unit tests (#54)\n* can now set your own base url for content negotation (#37)\n* some field queries with `works()` were failing, but now seem to be working, likely due to fixes in crossref api (#53)\n* style input to `content_negotiation` was fixed (#57) (#58) thanks @talbertc-usgs\n* fix to `content_negotiation` when inputting a doi as a unicode string (#56)\n\n0.3.0 (2017-05-21)\n--------------------\n* added more documentation for field queries, describing available fields that support field queries, and how to do field queries (#50)\n* `sample` parameter maximum value is 100 - has been for a while, but wasn't updated in crossref docs (#44)\n* updated docs that `facet` parameter can be a string query in addition to a boolean (#49)\n* documented new 10,000 max value for `/works` requests - that is, for the `offset` parameter - if you need more results than that use `cursor` (see https://github.com/crossref/rest-api-doc/blob/master/rest_api.md#deep-paging-with-cursors) (#47)\n* added to docs a bit about rate limiting, their current values, that they can change, and how to show them in verbose curl responses (#45)\n* now using `https://doi.org` for `cn.content_negotation` - and function gains new parameter `url` to  specify different base urls for content negotiation (#36)\n* fixes to kwargs and fix docs for what can be passed to kwargs  (#41)\n* duplicated names passed to `filter` were not working - fixed now (#48)\n* raise proper http errors when appropriate for `cn.content_negotiation` thanks @jmaupetit (#55)\n\n0.2.6 (2016-06-24)\n--------------------\n* fixed problem with `cr.works()` where dois passed weren't making the correct api request to crossref (#40)\n* added support for field queries to all methods that support `/works` (<https://github.com/crossref/rest-api-doc/blob/master/rest_api.md#field-queries>) (#38)\n\n0.2.2 (2016-03-09)\n--------------------\n* fixed some example code that included non-working examples (#34)\n* fixed bug in `registration_agency()` method, works now! (#35)\n* removed redundant `filter_names` and `filter_details` bits in docs\n\n0.2.0 (2016-02-10)\n--------------------\n* user-agent strings now passed in every http request to crossref, including a `x-user-agent` header in case the `user-agent` string is lost (#33)\n* added a disclaimer to docs about what is actually searched when searching the crossref api - that is, only what is returned in the api, so no full text or abstracts are searched (#32)\n* improved http error parsing - now passes on the hopefully meaningful error messages from the crossref api (#31)\n* more tests added (#30)\n* habanero now supports cursor for deep paging. note that cursor only works with requests to the `/works` route (#18)\n\n0.1.3 (2015-12-02)\n--------------------\n* fix wheel file to be a universal to install on python2 and python3 (#25)\n* added method `csl_styles` to get csl styles for use in content negotiation (#27)\n* more documentation for content negotiation (#26)\n* made note in docs that `sample` param ignored unless `/works` used (#24)\n* made note in docs that funders without ids don't show up on the `/funders` route (#23)\n\n0.1.1 (2015-11-17)\n--------------------\n* fix readme\n\n0.1.0 (2015-11-17)\n--------------------\n* now compatible with python 2x and 3x\n* `agency()` method changed to `registration_agency()`\n* new method `citation_count()` - get citation counts for dois\n* new method `crosscite()` - get a citation for dois, only supports simple text format\n* new method `random_dois()` - get a random set of dois\n* now importing `xml.dom` to do small amount of xml parsing\n* changed library structure, now with module system, separated into modules for the main crossref search api (i.e., `api.crossref.org`) including higher level methods (e.g., `registration_agency`), content negotiation, and citation counts.\n\n0.0.6 (2015-11-09)\n--------------------\n* first pypi release\n",
  "docs_url": null,
  "keywords": "",
  "license": "mit",
  "name": "habanero",
  "package_url": "https://pypi.org/project/habanero/",
  "project_url": "https://pypi.org/project/habanero/",
  "project_urls": {
    "Documentation": "http://habanero.rtfd.org/",
    "Homepage": "https://github.com/sckott/habanero",
    "Source": "https://github.com/sckott/habanero",
    "Tracker": "https://github.com/sckott/habanero/issues"
  },
  "release_url": "https://pypi.org/project/habanero/1.2.3/",
  "requires_dist": [
    "requests (>=2.7.0)",
    "tqdm",
    "pytest ; extra == 'all'",
    "pytest ; extra == 'test'"
  ],
  "requires_python": ">=3.7",
  "summary": "low level client for crossref search api",
  "version": "1.2.3",
  "releases": [],
  "developers": [
    "myrmecocystus@gmail.com",
    "scott_chamberlain"
  ],
  "kwds": "random_dois crossref crosscite dois doi",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_habanero",
  "homepage": "https://github.com/sckott/habanero",
  "release_count": 18,
  "dependency_ids": [
    "pypi_pytest",
    "pypi_requests",
    "pypi_tqdm"
  ]
}
{
  "classifiers": [
    "development status :: 4 - beta",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.6",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9"
  ],
  "description": "# gilda: grounding integrating learned disambiguation\n[![license](https://img.shields.io/badge/license-bsd%202--clause-orange.svg)](https://opensource.org/licenses/bsd-2-clause)\n[![build](https://github.com/indralab/gilda/actions/workflows/tests.yml/badge.svg)](https://github.com/indralab/gilda/actions)\n[![documentation](https://readthedocs.org/projects/gilda/badge/?version=latest)](https://gilda.readthedocs.io/en/latest/?badge=latest)\n[![pypi version](https://badge.fury.io/py/gilda.svg)](https://badge.fury.io/py/gilda)\n[![doi](https://img.shields.io/badge/doi-10.1093/bioadv/vbac034-green.svg)](https://doi.org/10.1093/bioadv/vbac034)\n\ngilda is a python package and rest service that grounds (i.e., finds\nappropriate identifiers in namespaces for) named entities in biomedical text.\n\ngyori bm, hoyt ct, steppi a (2022). gilda: biomedical entity text normalization with machine-learned disambiguation as a service. bioinformatics advances, 2022; vbac034 [https://doi.org/10.1093/bioadv/vbac034](https://doi.org/10.1093/bioadv/vbac034).\n\n## installation\ngilda is deployed as a web service at http://grounding.indra.bio/ (see\nusage instructions below), however, it can also be used locally as a python\npackage.\n\nthe recommended method to install gilda is through pypi as\n```bash\npip install gilda\n```\nnote that gilda uses a single large resource file for grounding, which is\nautomatically downloaded into the `~/.data/gilda/<version>` folder during\nruntime (see [pystow](https://github.com/cthoyt/pystow#%ef%b8%8f%ef%b8%8f-configuration) for options to\nconfigure the location of this folder).\n\ngiven some additional dependencies, the grounding resource file can\nalso be regenerated locally by running `python -m gilda.generate_terms`.\n\n## documentation and notebooks\ndocumentation for gilda is available [here](https://gilda.readthedocs.io).\nwe also provide several interactive jupyter notebooks to help use and customize gilda:\n- [gilda introduction](https://github.com/indralab/gilda/blob/master/notebooks/gilda_introduction.ipynb) provides an interactive tutorial for using gilda.\n- [custom grounders](https://github.com/indralab/gilda/blob/master/notebooks/custom_grounders.ipynb) shows several examples of how gilda can be instantiated with custom\ngrounding resources.\n- [model training](https://github.com/indralab/gilda/blob/master/models/model_training.ipynb) provides interactive sample code for training\nnew disambiguation models.\n\n## usage\ngilda can either be used as a rest web service or used programmatically\nvia its python api. an introduction jupyter notebook for using gilda\nis available at\nhttps://github.com/indralab/gilda/blob/master/notebooks/gilda_introduction.ipynb\n\n### use as a python package\nfor using gilda as a python package, the documentation at\nhttp://gilda.readthedocs.org provides detailed descriptions of each module of\ngilda and their usage. a basic usage example for named entity normalization (nen),\nor _grounding_ is as follows:\n\n```python\nimport gilda\nscored_matches = gilda.ground('er', context='calcium is released from the er.')\n```\n\ngilda also implements a simple dictionary-based named entity recognition (ner)\nalgorithm that can be used as follows:\n\n```python\nimport gilda\nresults = gilda.annotate('calcium is released from the er.')\n```\n\n### use as a web service\nthe rest service accepts post requests with a json header on the /ground\nendpoint. there is a public rest service running at http://grounding.indra.bio\nbut the service can also be run locally as\n\n```bash\npython -m gilda.app\n```\nwhich, by default, launches the server at `localhost:8001` (for local usage\nreplace the url in the examples below with this address).\n\nbelow is an example request using `curl`:\n\n```bash\ncurl -x post -h \"content-type: application/json\" -d '{\"text\": \"kras\"}' http://grounding.indra.bio/ground\n```\n\nthe same request using python's request package would be as follows:\n\n```python\nimport requests\nrequests.post('http://grounding.indra.bio/ground', json={'text': 'kras'})\n```\n\nthe web service also supports multiple inputs in a single request on the\n`ground_multi` endpoint, for instance\n\n```python\nimport requests\nrequests.post('http://grounding.indra.bio/ground_multi',\n              json=[\n                  {'text': 'braf'},\n                  {'text': 'er', 'context': 'endoplasmic reticulum (er) is a cellular component'}\n              ]\n          )\n```\n\n## resource usage\ngilda loads grounding terms into memory when first used. if memory usage\nis an issue, the following options are recommended.\n\n1. run a single instance of gilda as a local web service that one or more\nother processes send requests to.\n\n2. create a custom grounder instance that only loads a subset of terms\napprorpiate for a narrow use case.\n\n3. gilda also offers an optional sqlite back-end which significantly decreases\nmemory usage and results in minor drop in the number of strings grounder per\nunit time. the sqlite back-end database can be built as follows with an\noptional `[db_path]` argument, which if used, should use the .db extension. if\nnot specified, the .db file is generated in gilda's default resource folder.\n\n```bash\npython -m gilda.resources.sqlite_adapter [db_path]\n```\n\na grounder instance can then be instantiated as follows:\n\n```python\nfrom gilda.grounder import grounder\ngr = grounder(db_path)\nmatches = gr.ground('kras')\n```\n\n## run web service with docker\n\nafter cloning the repository locally, you can build and run a docker image\nof gilda using the following commands:\n\n```shell\n$ docker build -t gilda:latest .\n$ docker run -d -p 8001:8001 gilda:latest\n```\n\nalternatively, you can use `docker-compose` to do both the initial build and\nrun the container based on the `docker-compose.yml` configuration:\n\n```shell\n$ docker-compose up\n```\n\n## citation\n\n```bibtex\n@article{gyori2022gilda,\n    author = {gyori, benjamin m and hoyt, charles tapley and steppi, albert},\n    title = \"{{gilda: biomedical entity text normalization with machine-learned disambiguation as a service}}\",\n    journal = {bioinformatics advances},\n    year = {2022},\n    month = {05},\n    issn = {2635-0041},\n    doi = {10.1093/bioadv/vbac034},\n    url = {https://doi.org/10.1093/bioadv/vbac034},\n    note = {vbac034}\n}\n```\n\n## funding\nthe development of gilda was funded under the darpa communicating with computers\nprogram (aro grant w911nf-15-1-0544) and the darpa young faculty award\n(aro grant w911nf-20-1-0255).\n",
  "docs_url": null,
  "keywords": "nlp,biology",
  "license": "",
  "name": "gilda",
  "package_url": "https://pypi.org/project/gilda/",
  "project_url": "https://pypi.org/project/gilda/",
  "project_urls": {
    "Homepage": "https://github.com/indralab/gilda"
  },
  "release_url": "https://pypi.org/project/gilda/1.0.0/",
  "requires_dist": [
    "regex",
    "adeft (>=0.11.0)",
    "boto3",
    "flask",
    "flask-wtf",
    "flask-bootstrap",
    "flask-restx",
    "pystow (>=0.1.10)",
    "unidecode",
    "werkzeug (<2.2)",
    "pandas (>=1.0) ; extra == 'benchmarks'",
    "requests ; extra == 'benchmarks'",
    "tabulate ; extra == 'benchmarks'",
    "tqdm ; extra == 'benchmarks'",
    "click ; extra == 'benchmarks'",
    "sphinx ; extra == 'docs'",
    "sphinx-autodoc-typehints ; extra == 'docs'",
    "sphinx-rtd-theme ; extra == 'docs'",
    "indra ; extra == 'terms'",
    "obonet ; extra == 'terms'",
    "pytest ; extra == 'test'",
    "pytest-cov ; extra == 'test'",
    "pandas ; extra == 'test'"
  ],
  "requires_python": "",
  "summary": "grounding for biomedical entities with contextual disambiguation",
  "version": "1.0.0",
  "releases": [],
  "developers": [
    "benjamin_gyori@hms.harvard.edu",
    "benjamin_m"
  ],
  "kwds": "gilda_introduction gilda badge bioinformatics documentation",
  "license_kwds": "",
  "libtype": "pypi",
  "id": "pypi_gilda",
  "homepage": "https://github.com/indralab/gilda",
  "release_count": 17,
  "dependency_ids": [
    "pypi_adeft",
    "pypi_boto3",
    "pypi_click",
    "pypi_flask",
    "pypi_flask_bootstrap",
    "pypi_flask_restx",
    "pypi_flask_wtf",
    "pypi_indra",
    "pypi_obonet",
    "pypi_pandas",
    "pypi_pystow",
    "pypi_pytest",
    "pypi_pytest_cov",
    "pypi_regex",
    "pypi_requests",
    "pypi_sphinx",
    "pypi_sphinx_autodoc_typehints",
    "pypi_sphinx_rtd_theme",
    "pypi_tabulate",
    "pypi_tqdm",
    "pypi_unidecode",
    "pypi_werkzeug"
  ]
}
{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: developers",
    "intended audience :: information technology",
    "license :: osi approved :: mit license",
    "operating system :: os independent",
    "programming language :: python :: 3",
    "programming language :: python :: 3 :: only",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.12",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: software development :: libraries",
    "topic :: software development :: libraries :: python modules",
    "topic :: text processing",
    "typing :: typed"
  ],
  "description": ".. contents:: **datetimerange**\n   :backlinks: top\n   :depth: 2\n\nsummary\n=========\n`datetimerange <https://github.com/thombashi/datetimerange>`__ is a python library to handle a time range. e.g. check whether a time is within the time range, get the intersection of time ranges, truncate a time range, iterate through a time range, and so forth.\n\n.. image:: https://badge.fury.io/py/datetimerange.svg\n    :target: https://badge.fury.io/py/datetimerange\n    :alt: pypi package version\n\n.. image:: https://anaconda.org/conda-forge/datetimerange/badges/version.svg\n    :target: https://anaconda.org/conda-forge/datetimerange\n    :alt: conda-forge package version\n\n.. image:: https://img.shields.io/pypi/pyversions/datetimerange.svg\n    :target: https://pypi.org/project/datetimerange\n    :alt: supported python versions\n\n.. image:: https://github.com/thombashi/datetimerange/workflows/tests/badge.svg\n    :target: https://github.com/thombashi/datetimerange/actions/workflows/tests.yml\n    :alt: test result of linux/macos/windows\n\n.. image:: https://coveralls.io/repos/github/thombashi/datetimerange/badge.svg?branch=master\n    :target: https://coveralls.io/github/thombashi/datetimerange?branch=master\n    :alt: test coverage\n\n.. image:: https://github.com/thombashi/datetimerange/actions/workflows/github-code-scanning/codeql/badge.svg\n    :target: https://github.com/thombashi/datetimerange/actions/workflows/github-code-scanning/codeql\n    :alt: codeql\n\ninstallation\n============\n\ninstallation: pip\n------------------------------\n::\n\n    pip install datetimerange\n\n\ninstallation: conda\n------------------------------\n::\n\n    conda install -c conda-forge datetimerange\n\n\ndependencies\n============\n- python 3.7+\n- `python package dependencies (automatically installed) <https://github.com/thombashi/datetimerange/network/dependencies>`__\n\nfeatures\n============\nfeatures of ``datetimerange`` class include:\n\n- supported operations:\n    - equation\n    - addition\n    - subtraction\n    - intersection\n    - union\n    - contains\n    - truncate\n    - split\n    - iteration\n- timezone support\n- daylight saving time support\n\nexamples\n==========\ncreate a datetimerange instance from start and end datetime\n-----------------------------------------------------------------\n:sample code:\n    .. code:: python\n\n        from datetimerange import datetimerange\n        time_range = datetimerange(\"2015-03-22t10:00:00+0900\", \"2015-03-22t10:10:00+0900\")\n        str(time_range)\n\n:output:\n    ::\n\n        '2015-03-22t10:00:00+0900 - 2015-03-22t10:10:00+0900'\n\ncreate a datetimerange instance from a range text\n-----------------------------------------------------------------\n:sample code:\n    .. code:: python\n\n        from datetimerange import datetimerange\n        time_range = datetimerange.from_range_text(\"2015-03-22t10:00:00+0900 - 2015-03-22t10:10:00+0900\")\n        str(time_range)\n\n:output:\n    ::\n\n        '2015-03-22t10:00:00+0900 - 2015-03-22t10:10:00+0900'\n\nget an iterator\n------------------------\n:sample code 1:\n    .. code:: python\n\n        import datetime\n        from datetimerange import datetimerange\n\n        time_range = datetimerange(\"2015-01-01t00:00:00+0900\", \"2015-01-04t00:00:00+0900\")\n        for value in time_range.range(datetime.timedelta(days=1)):\n            print(value)\n\n:output 1:\n    ::\n\n        2015-01-01 00:00:00+09:00\n        2015-01-02 00:00:00+09:00\n        2015-01-03 00:00:00+09:00\n        2015-01-04 00:00:00+09:00\n\n:sample code 2:\n    .. code:: python\n\n        from datetimerange import datetimerange\n        from dateutil.relativedelta import relativedelta\n\n        time_range = datetimerange(\"2015-01-01t00:00:00+0900\", \"2016-01-01t00:00:00+0900\")\n        for value in time_range.range(relativedelta(months=+4)):\n            print(value)\n\n:output 2:\n    ::\n\n        2015-01-01 00:00:00+09:00\n        2015-05-01 00:00:00+09:00\n        2015-09-01 00:00:00+09:00\n        2016-01-01 00:00:00+09:00\n\ntest whether a value within the time range\n------------------------------------------\n:sample code:\n    .. code:: python\n\n        from datetimerange import datetimerange\n\n        time_range = datetimerange(\"2015-03-22t10:00:00+0900\", \"2015-03-22t10:10:00+0900\")\n        print(\"2015-03-22t10:05:00+0900\" in time_range)\n        print(\"2015-03-22t10:15:00+0900\" in time_range)\n\n        time_range_smaller = datetimerange(\"2015-03-22t10:03:00+0900\", \"2015-03-22t10:07:00+0900\")\n        print(time_range_smaller in time_range)\n\n:output:\n    ::\n\n        true\n        false\n        true\n\ntest whether a value intersects the time range\n----------------------------------------------\n:sample code:\n    .. code:: python\n\n        from datetimerange import datetimerange\n        time_range = datetimerange(\"2015-03-22t10:00:00+0900\", \"2015-03-22t10:10:00+0900\")\n        x = datetimerange(\"2015-03-22t10:05:00+0900\", \"2015-03-22t10:15:00+0900\")\n        time_range.is_intersection(x)\n\n:output:\n    ::\n\n        true\n\nmake an intersected time range\n------------------------------\n:sample code:\n    .. code:: python\n\n        from datetimerange import datetimerange\n        time_range = datetimerange(\"2015-03-22t10:00:00+0900\", \"2015-03-22t10:10:00+0900\")\n        x = datetimerange(\"2015-03-22t10:05:00+0900\", \"2015-03-22t10:15:00+0900\")\n        time_range.intersection(x)\n\n:output:\n    ::\n\n        2015-03-22t10:05:00+0900 - 2015-03-22t10:10:00+0900\n\nmake an encompassed time range\n------------------------------\n:sample code:\n    .. code:: python\n\n        from datetimerange import datetimerange\n        time_range = datetimerange(\"2015-03-22t10:00:00+0900\", \"2015-03-22t10:10:00+0900\")\n        x = datetimerange(\"2015-03-22t10:05:00+0900\", \"2015-03-22t10:15:00+0900\")\n        time_range.encompass(x)\n\n:output:\n    ::\n\n        2015-03-22t10:00:00+0900 - 2015-03-22t10:15:00+0900\n\ntruncate time range\n-------------------\n:sample code:\n    .. code:: python\n\n        from datetimerange import datetimerange\n\n        time_range = datetimerange(\"2015-03-22t10:00:00+0900\", \"2015-03-22t10:10:00+0900\")\n        time_range.is_output_elapse = true\n        print(\"before truncate: \", time_range)\n\n        time_range.truncate(10)\n        print(\"after truncate:  \", time_range)\n\n:output:\n    ::\n\n        before truncate:  2015-03-22t10:00:00+0900 - 2015-03-22t10:10:00+0900 (0:10:00)\n        after truncate:   2015-03-22t10:00:30+0900 - 2015-03-22t10:09:30+0900 (0:09:00)\n\nfor more information\n----------------------\nmore examples are available at \nhttps://datetimerange.rtfd.io/en/latest/pages/examples/index.html\n\nexamples with jupyter notebook are also available at `datetimerange.ipynb <https://nbviewer.jupyter.org/github/thombashi/datetimerange/tree/master/examples/datetimerange.ipynb>`__\n\ndocumentation\n===============\nhttps://datetimerange.rtfd.io/\n\nsponsors\n====================================\n.. image:: https://avatars.githubusercontent.com/u/3658062?s=48&v=4\n   :target: https://github.com/b4tman\n   :alt: dmitry belyaev (b4tman)\n.. image:: https://avatars.githubusercontent.com/u/44389260?s=48&u=6da7176e51ae2654bcfd22564772ef8a3bb22318&v=4\n   :target: https://github.com/chasbecker\n   :alt: charles becker (chasbecker)\n.. image:: https://avatars.githubusercontent.com/u/46711571?s=48&u=57687c0e02d5d6e8eeaf9177f7b7af4c9f275eb5&v=4\n   :target: https://github.com/arturi0\n   :alt: arturi0\n\n`become a sponsor <https://github.com/sponsors/thombashi>`__\n\n",
  "docs_url": null,
  "keywords": "datetimerange,datetime,time range",
  "license": "mit license",
  "name": "datetimerange",
  "package_url": "https://pypi.org/project/DateTimeRange/",
  "project_url": "https://pypi.org/project/DateTimeRange/",
  "project_urls": {
    "Documentation": "https://datetimerange.rtfd.io/",
    "Funding": "https://github.com/sponsors/thombashi",
    "Homepage": "https://github.com/thombashi/DateTimeRange",
    "Source": "https://github.com/thombashi/DateTimeRange",
    "Tracker": "https://github.com/thombashi/DateTimeRange/issues"
  },
  "release_url": "https://pypi.org/project/DateTimeRange/2.2.0/",
  "requires_dist": [
    "python-dateutil <3,>=2.4.2",
    "typepy[datetime] <2,>=1.3.2",
    "sphinx-rtd-theme >=1.2.2 ; extra == 'docs'",
    "Sphinx >=2.4 ; extra == 'docs'",
    "pytest >=6.0.1 ; extra == 'test'",
    "pytest-md-report >=0.4.1 ; extra == 'test'",
    "pytz ; extra == 'test'"
  ],
  "requires_python": ">=3.7",
  "summary": "datetimerange is a python library to handle a time range. e.g. check whether a time is within the time range, get the intersection of time ranges, truncate a time range, iterate through a time range, and so forth.",
  "version": "2.2.0",
  "releases": [],
  "developers": [
    "tsuyoshi.hombashi@gmail.com",
    "tsuyoshi_hombashi"
  ],
  "kwds": "time_range datetimerange time_range_smaller datetime dateutil",
  "license_kwds": "mit license",
  "libtype": "pypi",
  "id": "pypi_datetimerange",
  "homepage": "https://github.com/thombashi/datetimerange",
  "release_count": 36,
  "dependency_ids": [
    "pypi_pytest",
    "pypi_pytest_md_report",
    "pypi_python_dateutil",
    "pypi_pytz",
    "pypi_sphinx",
    "pypi_sphinx_rtd_theme",
    "pypi_typepy"
  ]
}
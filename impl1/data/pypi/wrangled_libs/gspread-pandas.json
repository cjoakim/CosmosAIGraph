{
  "classifiers": [
    "development status :: 4 - beta",
    "intended audience :: developers",
    "intended audience :: science/research",
    "programming language :: python :: 3"
  ],
  "description": "===============\ngetting started\n===============\n\n.. image:: https://img.shields.io/pypi/v/gspread-pandas.svg\n        :target: https://pypi.python.org/pypi/gspread-pandas\n        :alt: pypi version\n\n.. image:: https://readthedocs.org/projects/gspread-pandas/badge/?version=latest\n        :target: https://gspread-pandas.readthedocs.io/en/latest/?badge=latest\n        :alt: documentation status\n\nauthor: diego fernandez\n\nlinks:\n\n-  `documentation <http://gspread-pandas.readthedocs.io/>`_\n-  `source code <https://github.com/aiguofer/gspread-pandas>`_\n-  `short video tutorial <https://youtu.be/2yicnyzfzpw>`_\n\n.. attention:: upgrading from < 2.0\n\n    if you are upgrading, the ``user`` is now an optional param that\n    uses ``default`` as the default. if you're a single user, you might\n    want to re-name your credentials to ``default`` so you can stop\n    specifying it:\n\n    .. code-block:: console\n\n        mv ~/.config/gspread_pandas/creds{<old_name>,default}\n\noverview\n========\n\na package to easily open an instance of a google spreadsheet and\ninteract with worksheets through pandas dataframes. it enables you to\neasily pull data from google spreadsheets into dataframes as well as\npush data into spreadsheets from dataframes. it leverages\n`gspread <https://github.com/burnash/gspread/>`__ in the backend for\nmost of the heavylifting, but it has a lot of added functionality\nto handle things specific to working with dataframes as well as\nsome extra nice to have features.\n\nthe target audience are data analysts and data scientists, but it can also\nbe used by data engineers or anyone trying to automate workflows with google\nsheets and pandas.\n\nsome key goals/features:\n\n-  be easy to use interactively, with good docstrings and auto-completion\n-  nicely handle headers and indexes (including multi-level headers and merged cells)\n-  run on jupyter, headless server, and/or scripts\n-  allow storing different user credentials or using service accounts\n-  automatically handle token refreshes\n-  enable handling of frozen rows and columns\n-  enable filling in all merged cells when pulling data\n-  nicely handle large data sets and auto-retries\n-  enable creation of filters\n-  handle retries when exceeding 100 second user quota\n-  when pushing dataframes with multiindex columns, allow merging or flattening headers\n-  ability to handle spreadsheet permissions\n-  ability to specify ``valueinputoption`` and ``valuerenderoption`` for specific columns\n\ninstallation / usage\n====================\n\nto install use pip:\n\n.. code-block:: console\n\n    $ pip install gspread-pandas\n\nor clone the repo:\n\n.. code-block:: console\n\n    $ git clone https://github.com/aiguofer/gspread-pandas.git\n    $ python setup.py install\n\nbefore using, you will need to download google client credentials for\nyour app.\n\nclient credentials\n------------------\n\nto allow a script to use google drive api we need to authenticate our\nself towards google. to do so, we need to create a project, describing\nthe tool and generate credentials. please use your web browser and go to\n`google console <https://console.developers.google.com/>`__ and :\n\n-  choose **create project** in popup menu on the top.\n-  a dialog box appears, so give your project a name and click on\n   **create** button.\n-  on the left-side menu click on **api manager**.\n-  a table of available apis is shown. switch **drive api** and click on\n   **enable api** button. do the same for **sheets api**. other apis might\n   be switched off, for our purpose.\n-  on the left-side menu click on **credentials**.\n-  in section **oauth consent screen** select your email address and\n   give your product a name. then click on **save** button.\n-  in section **credentials** click on **add credentials** and switch\n   **oauth client id** (if you want to use your own account or enable\n   the use of multiple accounts) or **service account key** (if you prefer\n   to have a service account interacting with spreadsheets).\n-  if you select **oauth client id**:\n\n   -  select **application type** item as **desktop app** and give it a name.\n   -  click on **create** button.\n   -  click on **download json** icon on the right side of created\n      **oauth client ids** and store the downloaded file on your file system.\n-  if you select **service account key**\n\n   -  click on **service account** dropdown and select **new service account**\n   -  give it a **service account name** and ignore the **role** dropdown\n      (unless you know you need this for something else, it's not necessary for\n      working with spreadsheets)\n   -  note the **service account id** as you might need to give that user\n      permission to interact with your spreadsheets\n   -  leave **key type** as **json**\n   -  click **create** and store the downloaded file on your file system.\n-  please be aware, the file contains your private credentials, so take\n   care of the file in the same way you care of your private ssh key;\n   move the downloaded json to ``~/.config/gspread_pandas/google_secret.json``\n   (or you can configure the directory and file name by directly calling\n   ``gspread_pandas.conf.get_config``\n\n\nthanks to similar project\n`df2gspread <https://github.com/maybelinot/df2gspread>`__ for this great\ndescription of how to get the client credentials.\n\nyou can read more about it in the `configuration docs\n<https://gspread-pandas.readthedocs.io/en/latest/configuration.html>`__\nincluding how to change the default behavior.\n\nexample\n=======\n\n.. code:: python\n\n    import pandas as pd\n    from gspread_pandas import spread, client\n\n    file_name = \"http://stats.idre.ucla.edu/stat/data/binary.csv\"\n    df = pd.read_csv(file_name)\n\n    # 'example spreadsheet' needs to already exist and your user must have access to it\n    spread = spread('example spreadsheet')\n    # this will ask to authenticate if you haven't done so before\n\n    # display available worksheets\n    spread.sheets\n\n    # save dataframe to worksheet 'new test sheet', create it first if it doesn't exist\n    spread.df_to_sheet(df, index=false, sheet='new test sheet', start='a2', replace=true)\n    spread.update_cells('a1', 'b1', ['created by:', spread.email])\n    print(spread)\n    # <gspread_pandas.client.spread - user: '<example_user>@gmail.com', spread: 'example spreadsheet', sheet: 'new test sheet'>\n\n    # you can now first instanciate a client separately and query folders and\n    # instanciate other spread objects by passing in the client\n    client = client()\n    # assumming you have a dir called 'example dir' with sheets in it\n    available_sheets = client.find_spreadsheet_files_in_folders('example dir')\n    spreads = []\n    for sheet in available_sheets.get('example dir', []):\n        spreads.append(spread(sheet['id'], client=client))\n\ntroubleshooting\n===============\n\neoferror in rodeo\n-----------------\n\nif you're trying to use ``gspread_pandas`` from within\n`rodeo <https://www.yhat.com/products/rodeo>`_ you might get an\n``eoferror: eof when reading a line`` error when trying to pass in the verification\ncode. the workaround for this is to first verify your account in a regular shell.\nsince you're just doing this to get your oauth token, the spreadsheet doesn't need\nto be valid. just run this in shell:\n\n.. code:: python\n\n   python -c \"from gspread_pandas import spread; spread('<user_key>','')\"\n\nthen follow the instructions to create and store the oauth creds.\n\n\nthis action would increase the number of cells in the workbook above the limit of 10000000 cells.\n-------------------------------------------------------------------------------------------------\n\nimo, google sheets is not the right tool for large datasets. however, there's probably good reaons\nyou might have to use it in such cases. when uploading a large dataframe, you might run into this\nerror.\n\nby default, ``spread.df_to_sheet`` will add rows and/or columns needed to accomodate the dataframe.\nsince a new sheet contains a fairly large number of columns, if you're uploading a df with lots of\nrows you might exceed the max number of cells in a worksheet even if your data does not. in order\nto fix this you have 2 options:\n\n1. the easiest is to pass ``replace=true``, which will first resize the worksheet and clear out all values.\n2. another option is to first resize to 1x1 using ``spread.sheet.resize(1, 1)`` and then do ``df_to_sheet``\n\nthere's a strange caveat with resizing, so going to 1x1 first is recommended (``replace=true`` already does this). to read more see `this issue <https://issuetracker.google.com/issues/213126648>`_\n",
  "docs_url": null,
  "keywords": "gspread pandas google spreadsheets",
  "license": "bsd",
  "name": "gspread-pandas",
  "package_url": "https://pypi.org/project/gspread-pandas/",
  "project_url": "https://pypi.org/project/gspread-pandas/",
  "project_urls": {
    "Download": "https://github.com/aiguofer/gspread-pandas/tarball/v3.2.3",
    "Homepage": "https://github.com/aiguofer/gspread-pandas"
  },
  "release_url": "https://pypi.org/project/gspread-pandas/3.2.3/",
  "requires_dist": [
    "gspread >=5.0.0",
    "pandas >=0.20.0",
    "decorator",
    "google-auth",
    "google-auth-oauthlib",
    "pip ; extra == 'dev'",
    "sphinx ; extra == 'dev'",
    "sphinx-rtd-theme ; extra == 'dev'",
    "coverage ; extra == 'dev'",
    "twine ; extra == 'dev'",
    "bump2version ; extra == 'dev'",
    "tox ; extra == 'dev'",
    "flake8 ; extra == 'dev'",
    "pytest ; extra == 'dev'",
    "pre-commit ; extra == 'dev'",
    "isort ; extra == 'dev'",
    "black ; extra == 'dev'",
    "pycryptodome ; extra == 'dev'",
    "betamax ; extra == 'dev'",
    "betamax-serializers ; extra == 'dev'",
    "pytest-mock ; extra == 'dev'",
    "oauth2client ; extra == 'dev'",
    "wheel ; extra == 'dev'"
  ],
  "requires_python": "",
  "summary": "a package to easily open an instance of a google spreadsheet and interact with worksheets through pandas dataframes.",
  "version": "3.2.3",
  "releases": [],
  "developers": [
    "aiguo.fernandez@gmail.com",
    "diego_fernandez"
  ],
  "kwds": "gspread_pandas pandas badge dataframe gspread",
  "license_kwds": "bsd",
  "libtype": "pypi",
  "id": "pypi_gspread_pandas",
  "homepage": "https://github.com/aiguofer/gspread-pandas",
  "release_count": 68,
  "dependency_ids": [
    "pypi_betamax",
    "pypi_betamax_serializers",
    "pypi_black",
    "pypi_bump2version",
    "pypi_coverage",
    "pypi_decorator",
    "pypi_flake8",
    "pypi_google_auth",
    "pypi_google_auth_oauthlib",
    "pypi_gspread",
    "pypi_isort",
    "pypi_oauth2client",
    "pypi_pandas",
    "pypi_pip",
    "pypi_pre_commit",
    "pypi_pycryptodome",
    "pypi_pytest",
    "pypi_pytest_mock",
    "pypi_sphinx",
    "pypi_sphinx_rtd_theme",
    "pypi_tox",
    "pypi_twine",
    "pypi_wheel"
  ]
}
{
  "classifiers": [
    "development status :: 6 - mature",
    "environment :: plugins",
    "intended audience :: developers",
    "intended audience :: information technology",
    "intended audience :: system administrators",
    "license :: osi approved :: mit license",
    "operating system :: posix",
    "operating system :: posix :: linux",
    "programming language :: python",
    "programming language :: python :: 2",
    "programming language :: python :: 3",
    "topic :: security",
    "topic :: system :: systems administration :: authentication/directory"
  ],
  "description": "# python-pam\n\npython pam module supporting py3 (and py2) for linux type systems (!windows)\n\ncommandline example:\n\n```bash\n[david@scott python-pam]$ python pam/pam.py\nusername: david\npassword:\nauth result: success (0)\npam environment list item: xdg_seat=seat0\npam environment item: xdg_seat=seat0\nmissing pam environment item: asdf=none\nopen session: success (0)\nclose session: success (0)\n```\n\ninline examples:\n\n```python\n[david@scott python-pam]$ python\npython 3.9.7 (default, oct 10 2021, 15:13:22)\n[gcc 11.1.0] on linux\ntype \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> import pam\n>>> p = pam.authenticate()\n>>> p.authenticate('david', 'correctpassword')\ntrue\n>>> p.authenticate('david', 'badpassword')\nfalse\n>>> p.authenticate('david', 'correctpassword', service='login')\ntrue\n>>> p.authenticate('david', 'correctpassword', service='unknownservice')\nfalse\n>>> p.authenticate('david', 'correctpassword', service='login', resetcreds=true)\ntrue\n>>> p.authenticate('david', 'correctpassword', encoding='latin-1')\ntrue\n>>> print('{} {}'.format(p.code, p.reason))\n0 success\n>>> p.authenticate('david', 'badpassword')\nfalse\n>>> print('{} {}'.format(p.code, p.reason))\n7 authentication failure\n>>>\n```\n\n## authentication and privileges\nplease note, python-pam and *all* tools that do authentication follow two rules:\n\n* you have root (or privileged access): you can check any account's password for validity\n* you don't have root: you can only check the validity of the username running the tool\n\nif you need to authenticate multiple users, you must use an authentication stack that at some stage has privileged access. on linux systems one example of doing this is using sssd.\n\ntypical linux installations check against `/etc/shadow` with `pam_unix.so` which will spawn `/usr/bin/unix_chkpwd` to verify the password. both of these are intentionally written to meet the above two rules. you can test the functionality of `unix_chkpwd` in the following manner:\n\nreplace `good` with the correct password, replace `david` with your appropriate username.\n\n```\n~$ mkfifo /tmp/myfifo\n\n~$ (echo -ne 'good\\0' > /tmp/myfifo & /usr/bin/unix_chkpwd david nullok < /tmp/myfifo ) ; echo $?\n0\n\n~$ (echo -ne 'bad\\0' > /tmp/myfifo & /usr/bin/unix_chkpwd david nullok < /tmp/myfifo ) ; echo $?\n7\n\n~$ (echo -ne 'good\\0' > /tmp/myfifo & /usr/bin/unix_chkpwd someotheruser nullok < /tmp/myfifo ) ; echo $?\n9\n```\n\n\n",
  "docs_url": null,
  "keywords": "",
  "license": "license :: osi approved :: mit license",
  "name": "python-pam",
  "package_url": "https://pypi.org/project/python-pam/",
  "project_url": "https://pypi.org/project/python-pam/",
  "project_urls": {
    "Bug Tracker": "https://github.com/FirefighterBlu3/python-pam/issues",
    "Homepage": "https://github.com/FirefighterBlu3/python-pam"
  },
  "release_url": "https://pypi.org/project/python-pam/2.0.2/",
  "requires_dist": [],
  "requires_python": "",
  "summary": "python pam module using ctypes, py3",
  "version": "2.0.2",
  "releases": [],
  "developers": [
    "david@blue-labs.org",
    "david_ford"
  ],
  "kwds": "pam_unix pam py3 py2 py",
  "license_kwds": "license :: osi approved :: mit license",
  "libtype": "pypi",
  "id": "pypi_python_pam",
  "homepage": "https://github.com/firefighterblu3/python-pam",
  "release_count": 7,
  "dependency_ids": []
}
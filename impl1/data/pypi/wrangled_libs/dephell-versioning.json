{
  "classifiers": [
    "development status :: 4 - beta",
    "environment :: console",
    "framework :: setuptools plugin",
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "programming language :: python",
    "topic :: software development :: libraries :: python modules"
  ],
  "description": "## dephell_versioning\n\n[![travis](https://travis-ci.org/dephell/dephell_versioning.svg?branch=master)](https://travis-ci.org/dephell/dephell_versioning)\n[![appveyor](https://ci.appveyor.com/api/projects/status/github/dephell/dephell_versioning?svg=true)](https://ci.appveyor.com/project/orsinium/dephell-versioning)\n[![mit license](https://img.shields.io/pypi/l/dephell-versioning.svg)](https://github.com/dephell/dephell_versioning/blob/master/license)\n\nlibrary for bumping project version.\n\navailable schemes:\n\n+ `calver`\n+ `comver`\n+ `pep`\n+ `roman`\n+ `romver`\n+ `semver`\n+ `serial`\n+ `zerover`\n\navailable rules (and aliases):\n\n+ `init` -- initialize versioning\n+ main parts:\n  + `major` (`breaking`)\n  + `minor` (`feature`)\n  + `patch` (`fix`, `micro`)\n+ additional parts:\n  + `dev`\n  + `local`\n  + `post`\n+ pre-release management:\n  + `pre` (`rc`, `alpha`, `beta`)\n  + `premajor` (`prebreaking`)\n  + `preminor` (`prefeature`)\n  + `prepatch` (`prefix`, `premicro`)\n  + `release`\n\nread more about schemes and rules in the documentation for [dephell project bump](https://dephell.readthedocs.io/en/latest/cmd-project-bump.html).\n\n## installation\n\ninstall from [pypi](https://pypi.org/project/dephell-versioning/):\n\n```bash\npython3 -m pip install --user dephell_versioning\n```\n\n## usage\n\nget available schemes, rules, and aliases:\n\n```python\nfrom dephell_versioning import get_aliases, get_rules, get_schemes\nget_schemes()\n# frozenset({'roman', 'pep', ..., 'comver'})\n\nget_rules()\n# frozenset({'local', 'minor', ..., 'dev', 'preminor'})\n\nget_aliases()\n# frozenset({'alpha', 'rc', ..., 'micro', 'breaking'})\n\n# get rules for some scheme:\nget_rules(scheme='calver')\n# frozenset({'major', 'patch', 'init'})\n\n# get aliases for specific rules:\nget_aliases(rules={'major', 'minor'})\n# frozenset({'feature', 'breaking'})\n\n```\n\nbump version:\n\n```python\nfrom dephell_versioning import bump_version\n\nbump_version(version='1.2.3', rule='minor', scheme='semver')\n# '1.3.0'\n\n# pass aliase instead of rule:\nbump_version(version='1.2.3', rule='feature', scheme='semver')\n# '1.3.0'\n\n# start rule from `+` to attach local version number:\nbump_version(version='1.2.3', rule='+456', scheme='semver')\n# '1.2.3+456'\n\n# for `init` version is optional\nbump_version(version='', rule='init', scheme='semver')\n# '0.1.0'\n```\n\nbump version in a python file:\n\n```python\nfrom dephell_versioning import bump_file\nfrom pathlib import path\n\n# returns `true` if version was bumped\nbump_file(path=path('dephell_versioning', '__init__.py'), old='0.1.0', new='0.1.1')\n# true\n\n# old version is optional: any version will be bumped if old isn't found\nbump_file(path=path('dephell_versioning', '__init__.py'), old='', new='0.1.2')\n# true\n```\n\nuse [dephell_discover](https://github.com/dephell/dephell_discover) to find out the current version in a python project:\n\n```python\nfrom dephell_discover import root\nfrom pathlib import path\nroot = root(path=path(), name='dephell_discover')\n\n# root.metainfo can be none if project isn't found in the given directory\nif root.metainfo:\n    print(root.metainfo.version)\n# '0.1.2'\n```\n",
  "docs_url": null,
  "keywords": "dephell,packaging,version,versions,versioning,bump,bumping",
  "license": "mit",
  "name": "dephell-versioning",
  "package_url": "https://pypi.org/project/dephell-versioning/",
  "project_url": "https://pypi.org/project/dephell-versioning/",
  "project_urls": {
    "Repository": "https://github.com/dephell/dephell_versioning"
  },
  "release_url": "https://pypi.org/project/dephell-versioning/0.1.2/",
  "requires_dist": [
    "packaging"
  ],
  "requires_python": ">=3.6",
  "summary": "library for bumping project version like a pro",
  "version": "0.1.2",
  "releases": [],
  "developers": [
    "gram",
    "mail@orsinium.dev"
  ],
  "kwds": "dephell_versioning bump_version dephell_discover versioning versions",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_dephell_versioning",
  "homepage": "",
  "release_count": 3,
  "dependency_ids": [
    "pypi_packaging"
  ]
}
{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.6",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9"
  ],
  "description": "temppathlib\n===========\n\n.. image:: https://github.com/parquery/temppathlib/workflows/check-push/badge.svg\n    :target: https://github.com/parquery/temppathlib/actions?query=workflow%3acheck-push\n    :alt: check status\n\n.. image:: https://coveralls.io/repos/github/parquery/temppathlib/badge.svg?branch=master\n    :target: https://coveralls.io/github/parquery/temppathlib\n    :alt: test coverage\n\n.. image:: https://badge.fury.io/py/temppathlib.svg\n    :target: https://pypi.org/project/temppathlib/\n    :alt: pypi - version\n\n.. image:: https://img.shields.io/pypi/pyversions/temppathlib.svg\n    :target: https://pypi.org/project/temppathlib/\n    :alt: pypi - python version\n\ntemppathlib provides wrappers around ``tempfile`` so that you can directly use them together with ``pathlib`` module.\nwe found it cumbersome to convert ``tempfile`` objects manually to ``pathlib.path`` whenever we needed a temporary\nfile.\n\nadditionally, we also provide:\n\n* a context manager ``removing_tree`` that checks if a path exists and recursively deletes it\n  by wrapping ``shutil.rmtree``.\n\n* a context manager ``tmpdirifnecessary`` that creates a temporary directory if no directory is given and otherwise\n  uses a supplied directory. this is useful when you want to keep some of the temporary files for examination\n  after the program finished. we usually specify an optional ``--operation_dir`` command-line argument to our programs\n  and pass its value to the ``tmpdirifnecessary``.\n\nif you need a more complex library to transition from string paths to ``pathlib.path``, have a look at\nruamel.std.pathlib_.\n\n.. _ruamel.std.pathlib: https://pypi.org/project/ruamel.std.pathlib/\n\nusage\n=====\n.. code-block:: python\n\n    import pathlib\n\n    import temppathlib\n\n    # create a temporary directory\n    with temppathlib.temporarydirectory() as tmp_dir:\n        tmp_pth = tmp_dir.path / \"some-filename.txt\"\n        # do something else with tmp_dir ...\n\n    # create a temporary file\n    with temppathlib.namedtemporaryfile() as tmp:\n        # write to it\n        tmp.file.write('hello'.encode())\n        tmp.file.flush()\n\n        # you can use its path.\n        target_pth = pathlib.path('/some/permanent/directory') / tmp.path.name\n\n    # create a temporary directory only if necessary\n    operation_dir = pathlib.path(\"/some/operation/directory)\n    with temppathlib.tmpdirifnecessary(path=operation_dir) as op_dir:\n        # do something with the operation directory\n        pth = op_dir.path / \"some-file.txt\"\n\n        # operation_dir is not deleted since 'path' was specified.\n\n\n    with temppathlib.tmpdirifnecessary() as op_dir:\n        # do something with the operation directory\n        pth = op_dir.path / \"some-file.txt\"\n\n        # op_dir is deleted since 'path' argument was not specified.\n\n    # context manager to remove the path recursively\n    pth = pathlib.path('/some/directory')\n    with temppathlib.removing_tree(pth):\n        # do something in the directory ...\n        pass\n\ninstallation\n============\n\n* create a virtual environment:\n\n.. code-block:: bash\n\n    python3 -m venv venv3\n\n* activate it:\n\n.. code-block:: bash\n\n    source venv3/bin/activate\n\n* install temppathlib with pip:\n\n.. code-block:: bash\n\n    pip3 install temppathlib\n\ndevelopment\n===========\n\n* check out the repository.\n\n* in the repository root, create the virtual environment:\n\n.. code-block:: bash\n\n    python3 -m venv venv3\n\n* activate the virtual environment:\n\n.. code-block:: bash\n\n    source venv3/bin/activate\n\n* install the development dependencies:\n\n.. code-block:: bash\n\n    pip3 install -e .[dev]\n\n* we use tox for testing and packaging the distribution. assuming that the virtual environment has been activated and\n  the development dependencies have been installed, run:\n\n.. code-block:: bash\n\n    tox\n\n* we also provide a set of pre-commit checks that lint and check code for formatting. run them locally from an activated\n  virtual environment with development dependencies:\n\n.. code-block:: bash\n\n    ./precommit.py\n\n* the pre-commit script can also automatically format the code:\n\n.. code-block:: bash\n\n    ./precommit.py  --overwrite\n\nversioning\n==========\nwe follow `semantic versioning <http://semver.org/spec/v1.0.0.html>`_. the version x.y.z indicates:\n\n* x is the major version (backward-incompatible),\n* y is the minor version (backward-compatible), and\n* z is the patch version (backward-compatible bug fix).\n\n",
  "docs_url": null,
  "keywords": "tempfile pathlib temporary file directory mkdtemp mkstemp",
  "license": "",
  "name": "temppathlib",
  "package_url": "https://pypi.org/project/temppathlib/",
  "project_url": "https://pypi.org/project/temppathlib/",
  "project_urls": {
    "Homepage": "https://github.com/Parquery/temppathlib"
  },
  "release_url": "https://pypi.org/project/temppathlib/1.2.0/",
  "requires_dist": [],
  "requires_python": "",
  "summary": "wrap tempfile to give you pathlib.path.",
  "version": "1.2.0",
  "releases": [],
  "developers": [
    "marko@parquery.com",
    "marko_ristin"
  ],
  "kwds": "temppathlib pathlib_ pathlib tmp_dir tempfile",
  "license_kwds": "",
  "libtype": "pypi",
  "id": "pypi_temppathlib",
  "homepage": "https://github.com/parquery/temppathlib",
  "release_count": 7,
  "dependency_ids": []
}
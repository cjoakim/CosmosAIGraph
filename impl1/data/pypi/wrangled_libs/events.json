{
  "classifiers": [
    "development status :: 4 - beta",
    "intended audience :: developers",
    "license :: osi approved :: bsd license",
    "operating system :: os independent",
    "programming language :: python",
    "programming language :: python :: 2",
    "programming language :: python :: 2.7",
    "programming language :: python :: 3",
    "programming language :: python :: 3.4",
    "programming language :: python :: 3.5",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "topic :: software development"
  ],
  "description": "events \n------\n\nthe c# language provides a handy way to declare, subscribe to and fire events.\ntechnically, an event is a \"slot\" where callback functions (event handlers) can\nbe attached to - a process referred to as subscribing to an event. here is\na handy package that encapsulates the core to event subscription and event\nfiring and feels like a \"natural\" part of the language.\n\n::\n \n    >>> def something_changed(reason): \n    ...     print \"something changed because %s\" % reason \n\n    >>> from events import events\n    >>> events = events()\n    >>> events.on_change += something_changed\n\nmultiple callback functions can subscribe to the same event. when the event is\nfired, all attached event handlers are invoked in sequence. to fire the event,\nperform a call on the slot: \n\n::\n\n    >>> events.on_change('it had to happen')\n    'something changed because it had to happen'\n\nby default, events does not check if an event can be subscribed to and fired.\nyou can predefine events by subclassing events and listing them. attempts to\nsubscribe to or fire an undefined event will raise an eventsexception.\n\n::\n\n    >>> class myevents(events):\n    ...     __events__ = ('on_this', 'on_that', )\n\n    >>> events = myevents()\n\n    # this will raise an eventsexception as `on_change` is unknown to myevents:\n    >>> events.on_change += something_changed\n\nyou can also predefine events for a single events instance by passing an\niterator to the constructor.\n\n::\n\n    >>> events = events(('on_this', 'on_that'))\n\n    # this will raise an eventsexception as `on_change` is unknown to events:\n    >>> events.on_change += something_changed\n\n\nunsubscribing\n-------------\nthere may come a time when you no longer want to be notified of an event. in\nthis case, you unsubscribe in the natural counterpart to `+=` by using `-=`.\n\n::\n\n    # we no longer want to be notified, take us out of the event callback list\n    >>> events.on_change -= something_changed\n\n\nyou may also want to unsubscribe for memory management reasons. the `events()` instance\nwill hold a reference `something_changed`. if this is a member method of an object,\nand the lifetime of the `events()` instance is greater than that object, it will keep\nit around longer than would be the normal case.\n\ndocumentation\n-------------\ncomplete documentation is available at http://events.readthedocs.org\n\ninstalling\n----------\nevents is on pypi so all you need to do is:\n\n::\n\n    pip install events\n\ntesting\n-------\njust run:\n\n::\n\n    python setup.py test\n\nor use tox to test the package under all supported pythons: 2.7, 3.4+\n\nlicensing\n----------\nevents is bsd licensed. see the license_ for details.\n\ncontributing\n------------\nplease see the `contribution guidelines`_.\n\nattribution\n-----------\nbased on the excellent recipe by `zoran isailovski`_, copyright (c) 2005.\n\n.. _`contribution guidelines`: https://github.com/pyeve/events/blob/master/contributing.rst\n.. _license: https://github.com/pyeve/events/blob/master/license \n.. _`zoran isailovski`: http://code.activestate.com/recipes/410686/\n",
  "docs_url": null,
  "keywords": "",
  "license": "bsd",
  "name": "events",
  "package_url": "https://pypi.org/project/Events/",
  "project_url": "https://pypi.org/project/Events/",
  "project_urls": {
    "Homepage": "http://github.com/pyeve/events"
  },
  "release_url": "https://pypi.org/project/Events/0.5/",
  "requires_dist": [],
  "requires_python": "",
  "summary": "bringing the elegance of c# eventhandler to python",
  "version": "0.5",
  "releases": [],
  "developers": [
    "nicola@nicolaiarocci.com",
    "nicola_iarocci"
  ],
  "kwds": "events event eventhandler __events__ eventsexception",
  "license_kwds": "bsd",
  "libtype": "pypi",
  "id": "pypi_events",
  "homepage": "http://github.com/pyeve/events",
  "release_count": 7,
  "dependency_ids": []
}
{
  "classifiers": [
    "development status :: 4 - beta",
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "programming language :: python :: 3",
    "programming language :: python :: 3 :: only",
    "programming language :: python :: 3.6",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "programming language :: python :: implementation :: cpython",
    "programming language :: python :: implementation :: pypy",
    "topic :: communications :: email",
    "topic :: utilities",
    "typing :: typed"
  ],
  "description": ".. image:: http://www.repostatus.org/badges/latest/active.svg\n    :target: http://www.repostatus.org/#active\n    :alt: project status: active \u2014 the project has reached a stable, usable\n          state and is being actively developed.\n\n.. image:: https://github.com/jwodder/mailbits/workflows/test/badge.svg?branch=master\n    :target: https://github.com/jwodder/mailbits/actions?workflow=test\n    :alt: ci status\n\n.. image:: https://codecov.io/gh/jwodder/mailbits/branch/master/graph/badge.svg\n    :target: https://codecov.io/gh/jwodder/mailbits\n\n.. image:: https://img.shields.io/pypi/pyversions/mailbits.svg\n    :target: https://pypi.org/project/mailbits/\n\n.. image:: https://img.shields.io/github/license/jwodder/mailbits.svg\n    :target: https://opensource.org/licenses/mit\n    :alt: mit license\n\n`github <https://github.com/jwodder/mailbits>`_\n| `pypi <https://pypi.org/project/mailbits/>`_\n| `issues <https://github.com/jwodder/mailbits/issues>`_\n| `changelog <https://github.com/jwodder/mailbits/blob/master/changelog.md>`_\n\n``mailbits`` provides a small assortment of functions for working with the\npython standard library's ``message``/``emailmessage``, ``address``, and\n``group`` types, as well as a couple other features.  it can parse & reassemble\ncontent-type strings, convert instances of the old ``message`` class to the new\n``emailmessage``, convert ``message`` & ``emailmessage`` instances into\nstructured ``dict``\\s, parse addresses, format address lists, and extract\nrecipients' raw e-mail addresses from an ``emailmessage``.\n\n\ninstallation\n============\n``mailbits`` requires python 3.6 or higher.  just use `pip\n<https://pip.pypa.io>`_ for python 3 (you have pip, right?) to install it::\n\n    python3 -m pip install mailbits\n\n\napi\n===\n\n``contenttype``\n---------------\n\nthe ``contenttype`` class provides a representation of a parsed content-type\nheader value.  parse content-type strings with the ``parse()`` classmethod,\ninspect the parts via the ``content_type``, ``maintype``, ``subtype``, and\n``params`` attributes (the last three of which can be mutated), convert back to\na string with ``str()``, and convert to ascii bytes using encoded words for\nnon-ascii with ``bytes()``.\n\n>>> from mailbits import contenttype\n>>> ct = contenttype.parse(\"text/plain; charset=utf-8; name*=utf-8''r%c3%a9sum%c3%a9.txt\")\n>>> ct\ncontenttype(maintype='text', subtype='plain', params={'charset': 'utf-8', 'name': 'r\u00e9sum\u00e9.txt'})\n>>> ct.content_type\n'text/plain'\n>>> str(ct)\n'text/plain; charset=\"utf-8\"; name=\"r\u00e9sum\u00e9.txt\"'\n>>> bytes(ct)\nb'text/plain; charset=\"utf-8\"; name*=utf-8\\'\\'r%c3%a9sum%c3%a9.txt'\n\n\n``email2dict()``\n----------------\n\n.. code:: python\n\n    class messagedict(typeddict):\n        unixfrom: optional[str]\n        headers: dict[str, any]\n        preamble: optional[str]\n        content: any\n        epilogue: optional[str]\n\n    mailbits.email2dict(msg: email.message.message, include_all: bool = false) -> messagedict\n\nconvert a ``message`` object to a ``dict``.  all encoded text & bytes are\ndecoded into their natural values.\n\nneed to examine a ``message`` but find the builtin python api too fiddly?  need\nto check that a ``message`` has the content & structure you expect?  need to\ncompare two ``message`` instances for equality?  need to pretty-print the\nstructure of a ``message``?  then ``email2dict()`` has your back.\n\nby default, any information specific to how the message is encoded (content-type\nparameters, content-transfer-encoding, etc.) is not reported, as the focus is\non the actual content rather than the choices made in representing it.  to\ninclude this information anyway, set ``include_all`` to ``true``.\n\nthe output structure has the following fields:\n\n``unixfrom``\n    the \"from \" line marking the start of the message in a mbox, if any\n\n``headers``\n    a ``dict`` mapping lowercased header field names to values.  the following\n    headers have special representations:\n\n    ``subject``\n        a single string\n\n    ``from``, ``to``, ``cc``, ``bcc``, ``resent-from``, ``resent-to``, ``resent-cc``, ``resent-bcc``, ``reply-to``\n        a list of groups and/or addresses.  addresses are represented as\n        ``dict``\\s with two string fields: ``display_name`` (an empty string if\n        not given) and ``address``.  groups are represented as ``dict``\\s with\n        a ``group`` field giving the name of the group and an ``addresses``\n        field giving a list of addresses in the group.\n\n    ``message-id``\n        a single string\n\n    ``content-type``\n        a ``dict`` containing a ``content_type`` field (a string of the form\n        ``maintype/subtype``, e.g., ``\"text/plain\"``) and a ``params`` field (a\n        ``dict`` of string keys & values).  the ``charset`` and ``boundary``\n        parameters are discarded unless ``include_all`` is ``true``.\n\n    ``date``\n        a ``datetime.datetime`` instance\n\n    ``orig-date``\n        a ``datetime.datetime`` instance\n\n    ``resent-date``\n        a list of ``datetime.datetime`` instances\n\n    ``sender``\n        a single address ``dict``\n\n    ``resent-sender``\n        a list of address ``dict``\\s\n\n    ``content-disposition``\n        a ``dict`` containing a ``disposition`` field (value either\n        ``\"inline\"`` or ``\"attachment\"``) and a ``params`` field (a ``dict`` of\n        string keys & values)\n\n    ``content-transfer-encoding``\n        a single string.  this header is discarded unless ``include_all`` is\n        ``true``.\n\n    ``mime-version``\n        a single string.  this header is discarded unless ``include_all`` is\n        ``true``.\n\n    all other headers are represented as lists of strings.\n\n``preamble``\n    the message's preamble__\n\n    __ https://docs.python.org/3/library/email.message.html\n       #email.message.emailmessage.preamble\n\n``content``\n    if the message is multipart, this is a list of message ``dict``\\s,\n    structured the same way as the top-level ``dict``.  if the message's\n    content-type is ``message/rfc822`` or ``message/external-body``, this is a\n    single message ``dict``.  if the message's content-type is ``text/*``, this\n    is a ``str`` giving the contents of the message.  otherwise, it is a\n    ``bytes`` giving the contents of the message.\n\n``epilogue``\n    the message's epilogue__\n\n    __ https://docs.python.org/3/library/email.message.html\n       #email.message.emailmessage.epilogue\n\nan example: the ``email`` `examples page`__ in the python docs includes an\nexample of constructing an html e-mail with an alternative plain text version\n(it's the one with the subject \"ayons asperges pour le d\u00e9jeuner\").  passing the\nresulting ``emailmessage`` object to ``email2dict()`` produces the following\noutput structure:\n\n__ https://docs.python.org/3/library/email.examples.html\n\n.. code:: python\n\n    {\n        \"unixfrom\": none,\n        \"headers\": {\n            \"subject\": \"ayons asperges pour le d\u00e9jeuner\",\n            \"from\": [\n                {\n                    \"display_name\": \"pep\u00e9 le pew\",\n                    \"address\": \"pepe@example.com\",\n                },\n            ],\n            \"to\": [\n                {\n                    \"display_name\": \"penelope pussycat\",\n                    \"address\": \"penelope@example.com\",\n                },\n                {\n                    \"display_name\": \"fabrette pussycat\",\n                    \"address\": \"fabrette@example.com\",\n                },\n            ],\n            \"content-type\": {\n                \"content_type\": \"multipart/alternative\",\n                \"params\": {},\n            },\n        },\n        \"preamble\": none,\n        \"content\": [\n            {\n                \"unixfrom\": none,\n                \"headers\": {\n                    \"content-type\": {\n                        \"content_type\": \"text/plain\",\n                        \"params\": {},\n                    },\n                },\n                \"preamble\": none,\n                \"content\": (\n                    \"salut!\\n\"\n                    \"\\n\"\n                    \"cela ressemble \u00e0 un excellent recipie[1] d\u00e9jeuner.\\n\"\n                    \"\\n\"\n                    \"[1] http://www.yummly.com/recipe/roasted-asparagus-epicurious-203718\\n\"\n                    \"\\n\"\n                    \"--pep\u00e9\\n\"\n                ),\n                \"epilogue\": none,\n            },\n            {\n                \"unixfrom\": none,\n                \"headers\": {\n                    \"content-type\": {\n                        \"content_type\": \"multipart/related\",\n                        \"params\": {},\n                    },\n                },\n                \"preamble\": none,\n                \"content\": [\n                    {\n                        \"unixfrom\": none,\n                        \"headers\": {\n                            \"content-type\": {\n                                \"content_type\": \"text/html\",\n                                \"params\": {},\n                            },\n                        },\n                        \"preamble\": none,\n                        \"content\": (\n                            \"<html>\\n\"\n                            \"  <head></head>\\n\"\n                            \"  <body>\\n\"\n                            \"    <p>salut!</p>\\n\"\n                            \"    <p>cela ressemble \u00e0 un excellent\\n\"\n                            \"        <a href=\\\"http://www.yummly.com/recipe/roasted-asparagus-\"\n                            \"epicurious-203718\\\">\\n\"\n                            \"            recipie\\n\"\n                            \"        </a> d\u00e9jeuner.\\n\"\n                            \"    </p>\\n\"\n                            \"    <img src=\\\"cid:random_message_id\\\" />\\n\"\n                            \"  </body>\\n\"\n                            \"</html>\\n\"\n                        ),\n                        \"epilogue\": none,\n                    },\n                    {\n                        \"unixfrom\": none,\n                        \"headers\": {\n                            \"content-type\": {\n                                \"content_type\": \"image/png\",\n                                \"params\": {},\n                            },\n                            \"content-disposition\": {\n                                \"disposition\": \"inline\",\n                                \"params\": {},\n                            },\n                            \"content-id\": [\"<random_message_id>\"],\n                        },\n                        \"preamble\": none,\n                        \"content\": b'image blob',\n                        \"epilogue\": none,\n                    },\n                ],\n                \"epilogue\": none,\n            },\n        ],\n        \"epilogue\": none,\n    }\n\n\n``format_addresses()``\n----------------------\n\n.. code:: python\n\n    mailbits.format_addresses(addresses: iterable[union[str, address, group]], encode: bool = false) -> str\n\nconvert an iterable of e-mail address strings (of the form\n\"``foo@example.com``\", without angle brackets or a display name),\n``email.headerregistry.address`` objects, and/or ``email.headerregistry.group``\nobjects into a formatted string.  if ``encode`` is ``false`` (the default),\nnon-ascii characters are left as-is.  if it is ``true``, non-ascii display\nnames are converted into :rfc:`2047` encoded words, and non-ascii domain names\nare encoded using punycode.\n\n\n``message2email()``\n-------------------\n\n.. code:: python\n\n    mailbits.message2email(msg: email.message.message) -> email.message.emailmessage\n\nconvert an instance of the old ``message`` class (or one of its subclasses,\nlike a ``mailbox`` message class) to an instance of the new ``emailmessage``\nclass with the ``default`` policy.  if ``msg`` is already an ``emailmessage``,\nit is returned unchanged.\n\n\n``parse_address()``\n-------------------\n\n.. code:: python\n\n    mailbits.parse_address(s: str) -> email.headerregistry.address\n\nparse a single e-mail address \u2014 either a raw address like \"``foo@example.com``\"\nor a combined display name & address like \"``fabian oh <foo@example.com>``\"\ninto an ``address`` object.\n\n\n``parse_addresses()``\n---------------------\n\n.. code:: python\n\n    mailbits.parse_addresses(s: union[str, email.headerregistry.addressheader]) \\\n        -> list[union[email.headerregistry.address, email.headerregistry.group]]\n\nparse a formatted list of e-mail addresses or the contents of an\n``emailmessage``'s \"to\", \"cc\", \"bcc\", etc. header into a list of ``address``\nand/or ``group`` objects.\n\n\n``recipient_addresses()``\n-------------------------\n\n.. code:: python\n\n    mailbits.recipient_addresses(msg: email.message.emailmessage) -> list[str]\n\nreturn a sorted list of all of the distinct e-mail addresses (not including\ndisplay names) in an ``emailmessage``'s combined \"to\", \"cc\", and \"bcc\" headers.\n\n\n",
  "docs_url": null,
  "keywords": "emailmessage,content type,e-mail,e-mail address,e-mail comparison,e-mail inspection,email,recipients",
  "license": "mit",
  "name": "mailbits",
  "package_url": "https://pypi.org/project/mailbits/",
  "project_url": "https://pypi.org/project/mailbits/",
  "project_urls": {
    "Bug Tracker": "https://github.com/jwodder/mailbits/issues",
    "Homepage": "https://github.com/jwodder/mailbits",
    "Source Code": "https://github.com/jwodder/mailbits"
  },
  "release_url": "https://pypi.org/project/mailbits/0.2.1/",
  "requires_dist": [
    "attrs (>=18.1)",
    "typing-extensions ; python_version < \"3.8\""
  ],
  "requires_python": "~=3.6",
  "summary": "assorted e-mail utility functions",
  "version": "0.2.1",
  "releases": [],
  "developers": [
    "john_thorvald_wodder_ii",
    "mailbits@varonathe.org"
  ],
  "kwds": "message2email mail emailmessage mailbox badge",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_mailbits",
  "homepage": "https://github.com/jwodder/mailbits",
  "release_count": 2,
  "dependency_ids": [
    "pypi_attrs",
    "pypi_typing_extensions"
  ]
}
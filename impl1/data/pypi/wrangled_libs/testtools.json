{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "operating system :: os independent",
    "programming language :: python",
    "programming language :: python :: 3",
    "programming language :: python :: 3 :: only",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.12",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "programming language :: python :: implementation :: cpython",
    "programming language :: python :: implementation :: pypy",
    "topic :: software development :: libraries",
    "topic :: software development :: libraries :: python modules",
    "topic :: software development :: testing"
  ],
  "description": "======================================\ntesttools: tasteful testing for python\n======================================\n\ntesttools is a set of extensions to the python standard library's unit testing\nframework. these extensions have been derived from many years of experience\nwith unit testing in python and come from many different sources.\n\nwhat better way to start than with a contrived code snippet?::\n\n  from testtools import testcase\n  from testtools.content import content\n  from testtools.content_type import utf8_text\n  from testtools.matchers import equals\n\n  from myproject import sillysquareserver\n\n  class testsillysquareserver(testcase):\n\n      def setup(self):\n          super(testsillysquareserver, self).setup()\n          self.server = self.usefixture(sillysquareserver())\n          self.addcleanup(self.attach_log_file)\n\n      def attach_log_file(self):\n          self.adddetail(\n              'log-file',\n              content(utf8_text,\n                      lambda: open(self.server.logfile, 'r').readlines()))\n\n      def test_server_is_cool(self):\n          self.assertthat(self.server.temperature, equals(\"cool\"))\n\n      def test_square(self):\n          self.assertthat(self.server.silly_square_of(7), equals(49))\n\n\nwhy use testtools?\n==================\n\nmatchers: better than assertion methods\n---------------------------------------\n\nof course, in any serious project you want to be able to have assertions that\nare specific to that project and the particular problem that it is addressing.\nrather than forcing you to define your own assertion methods and maintain your\nown inheritance hierarchy of ``testcase`` classes, testtools lets you write\nyour own \"matchers\", custom predicates that can be plugged into a unit test::\n\n  def test_response_has_bold(self):\n     # the response has bold text.\n     response = self.server.getresponse()\n     self.assertthat(response, htmlcontains(tag('bold', 'b')))\n\n\nmore debugging info, when you need it\n--------------------------------------\n\ntesttools makes it easy to add arbitrary data to your test result.  if you\nwant to know what's in a log file when a test fails, or what the load was on\nthe computer when a test started, or what files were open, you can add that\ninformation with ``testcase.adddetail``, and it will appear in the test\nresults if that test fails.\n\n\nextend unittest, but stay compatible and re-usable\n--------------------------------------------------\n\ntesttools goes to great lengths to allow serious test authors and test\n*framework* authors to do whatever they like with their tests and their\nextensions while staying compatible with the standard library's unittest.\n\ntesttools has completely parametrized how exceptions raised in tests are\nmapped to ``testresult`` methods and how tests are actually executed (ever\nwanted ``teardown`` to be called regardless of whether ``setup`` succeeds?)\n\nit also provides many simple but handy utilities, like the ability to clone a\ntest, a ``multitestresult`` object that lets many result objects get the\nresults from one test suite, adapters to bring legacy ``testresult`` objects\ninto our new golden age.\n\n\ncross-python compatibility\n--------------------------\n\ntesttools gives you the very latest in unit testing technology in a way that\nwill work with python 3.7+ and pypy3.\n\nif you wish to use testtools with python 2.4 or 2.5, then please use testtools\n0.9.15.\n\nif you wish to use testtools with python 2.6 or 3.2, then please use testtools\n1.9.0.\n\nif you wish to use testtools with python 3.3 or 3.4, then please use testtools 2.3.0.\n\nif you wish to use testtools with python 2.7 or 3.5, then please use testtools 2.4.0.\n",
  "docs_url": null,
  "keywords": "",
  "license": "",
  "name": "testtools",
  "package_url": "https://pypi.org/project/testtools/",
  "project_url": "https://pypi.org/project/testtools/",
  "project_urls": {
    "Homepage": "https://github.com/testing-cabal/testtools"
  },
  "release_url": "https://pypi.org/project/testtools/2.7.1/",
  "requires_dist": [
    "setuptools; python_version >= '3.12'",
    "testresources; extra == 'test'",
    "testscenarios; extra == 'test'",
    "fixtures; extra == 'twisted'",
    "twisted; extra == 'twisted'"
  ],
  "requires_python": ">=3.7",
  "summary": "extensions to the python standard library unit testing framework",
  "version": "2.7.1",
  "releases": [],
  "developers": [
    "jml+testtools@mumak.net"
  ],
  "kwds": "testtools unittest testsillysquareserver testing testcase",
  "license_kwds": "",
  "libtype": "pypi",
  "id": "pypi_testtools",
  "homepage": "",
  "release_count": 53,
  "dependency_ids": [
    "pypi_fixtures",
    "pypi_setuptools",
    "pypi_testresources",
    "pypi_testscenarios",
    "pypi_twisted"
  ]
}
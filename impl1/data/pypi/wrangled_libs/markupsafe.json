{
  "classifiers": [
    "development status :: 5 - production/stable",
    "environment :: web environment",
    "intended audience :: developers",
    "license :: osi approved :: bsd license",
    "operating system :: os independent",
    "programming language :: python",
    "topic :: internet :: www/http :: dynamic content",
    "topic :: text processing :: markup :: html"
  ],
  "description": "markupsafe\n==========\n\nmarkupsafe implements a text object that escapes characters so it is\nsafe to use in html and xml. characters that have special meanings are\nreplaced so that they display as the actual characters. this mitigates\ninjection attacks, meaning untrusted user input can safely be displayed\non a page.\n\n\ninstalling\n----------\n\ninstall and update using `pip`_:\n\n.. code-block:: text\n\n    pip install -u markupsafe\n\n.. _pip: https://pip.pypa.io/en/stable/getting-started/\n\n\nexamples\n--------\n\n.. code-block:: pycon\n\n    >>> from markupsafe import markup, escape\n\n    >>> # escape replaces special characters and wraps in markup\n    >>> escape(\"<script>alert(document.cookie);</script>\")\n    markup('&lt;script&gt;alert(document.cookie);&lt;/script&gt;')\n\n    >>> # wrap in markup to mark text \"safe\" and prevent escaping\n    >>> markup(\"<strong>hello</strong>\")\n    markup('<strong>hello</strong>')\n\n    >>> escape(markup(\"<strong>hello</strong>\"))\n    markup('<strong>hello</strong>')\n\n    >>> # markup is a str subclass\n    >>> # methods and operators escape their arguments\n    >>> template = markup(\"hello <em>{name}</em>\")\n    >>> template.format(name='\"world\"')\n    markup('hello <em>&#34;world&#34;</em>')\n\n\ndonate\n------\n\nthe pallets organization develops and supports markupsafe and other\npopular packages. in order to grow the community of contributors and\nusers, and allow the maintainers to devote more time to the projects,\n`please donate today`_.\n\n.. _please donate today: https://palletsprojects.com/donate\n\n\nlinks\n-----\n\n-   documentation: https://markupsafe.palletsprojects.com/\n-   changes: https://markupsafe.palletsprojects.com/changes/\n-   pypi releases: https://pypi.org/project/markupsafe/\n-   source code: https://github.com/pallets/markupsafe/\n-   issue tracker: https://github.com/pallets/markupsafe/issues/\n-   chat: https://discord.gg/pallets\n",
  "docs_url": null,
  "keywords": "",
  "license": "bsd-3-clause",
  "name": "markupsafe",
  "package_url": "https://pypi.org/project/MarkupSafe/",
  "project_url": "https://pypi.org/project/MarkupSafe/",
  "project_urls": {
    "Changes": "https://markupsafe.palletsprojects.com/changes/",
    "Chat": "https://discord.gg/pallets",
    "Documentation": "https://markupsafe.palletsprojects.com/",
    "Donate": "https://palletsprojects.com/donate",
    "Homepage": "https://palletsprojects.com/p/markupsafe/",
    "Issue Tracker": "https://github.com/pallets/markupsafe/issues/",
    "Source Code": "https://github.com/pallets/markupsafe/"
  },
  "release_url": "https://pypi.org/project/MarkupSafe/2.1.3/",
  "requires_dist": [],
  "requires_python": ">=3.7",
  "summary": "safely add untrusted strings to html/xml markup.",
  "version": "2.1.3",
  "releases": [],
  "developers": [
    "contact@palletsprojects.com",
    "pallets"
  ],
  "kwds": "markup markupsafe _pip html escaping",
  "license_kwds": "bsd-3-clause",
  "libtype": "pypi",
  "id": "pypi_markupsafe",
  "homepage": "https://palletsprojects.com/p/markupsafe/",
  "release_count": 29,
  "dependency_ids": []
}
{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: developers",
    "intended audience :: education",
    "intended audience :: science/research",
    "license :: osi approved :: apache software license",
    "operating system :: os independent",
    "programming language :: python :: 3",
    "programming language :: python :: 3.8",
    "topic :: scientific/engineering :: artificial intelligence"
  ],
  "description": "<!---\ncopyright 2023 the huggingface team. all rights reserved.\n\nlicensed under the apache license, version 2.0 (the \"license\");\nyou may not use this file except in compliance with the license.\nyou may obtain a copy of the license at\n\n    http://www.apache.org/licenses/license-2.0\n\nunless required by applicable law or agreed to in writing, software\ndistributed under the license is distributed on an \"as is\" basis,\nwithout warranties or conditions of any kind, either express or implied.\nsee the license for the specific language governing permissions and\nlimitations under the license.\n-->\n\n<h1 align=\"center\"> <p>\ud83e\udd17 peft</p></h1>\n<h3 align=\"center\">\n    <p>state-of-the-art parameter-efficient fine-tuning (peft) methods</p>\n</h3>\n\nparameter-efficient fine-tuning (peft) methods enable efficient adaptation of pre-trained language models (plms) to various downstream applications without fine-tuning all the model's parameters. fine-tuning large-scale plms is often prohibitively costly. in this regard, peft methods only fine-tune a small number of (extra) model parameters, thereby greatly decreasing the computational and storage costs. recent state-of-the-art peft techniques achieve performance comparable to that of full fine-tuning. \n\nseamlessly integrated with \ud83e\udd17 accelerate for large scale models leveraging deepspeed and big model inference. \n\nsupported methods:\n\n1. lora: [lora: low-rank adaptation of large language models](https://arxiv.org/abs/2106.09685)\n2. prefix tuning: [prefix-tuning: optimizing continuous prompts for generation](https://aclanthology.org/2021.acl-long.353/), [p-tuning v2: prompt tuning can be comparable to fine-tuning universally across scales and tasks](https://arxiv.org/pdf/2110.07602.pdf)\n3. p-tuning: [gpt understands, too](https://arxiv.org/abs/2103.10385)\n4. prompt tuning: [the power of scale for parameter-efficient prompt tuning](https://arxiv.org/abs/2104.08691)\n5. adalora: [adaptive budget allocation for parameter-efficient fine-tuning](https://arxiv.org/abs/2303.10512)  \n6. $(ia)^3$: [few-shot parameter-efficient fine-tuning is better and cheaper than in-context learning](https://arxiv.org/abs/2205.05638)\n7. multitask prompt tuning: [multitask prompt tuning enables parameter-efficient transfer learning](https://arxiv.org/abs/2303.02861)\n8. loha: [fedpara: low-rank hadamard product for communication-efficient federated learning](https://arxiv.org/abs/2108.06098)\n9. lokr: [krona: parameter efficient tuning with kronecker adapter](https://arxiv.org/abs/2212.10650) based on [navigating text-to-image customization:from lycoris fine-tuning to model evaluation](https://arxiv.org/abs/2309.14859) implementation\n10. loftq: [loftq: lora-fine-tuning-aware quantization for large language models](https://arxiv.org/abs/2310.08659)\n11. oft: [controlling text-to-image diffusion by orthogonal finetuning](https://arxiv.org/abs/2306.07280)\n\n## getting started\n\n```python\nfrom transformers import automodelforseq2seqlm\nfrom peft import get_peft_config, get_peft_model, loraconfig, tasktype\nmodel_name_or_path = \"bigscience/mt0-large\"\ntokenizer_name_or_path = \"bigscience/mt0-large\"\n\npeft_config = loraconfig(\n    task_type=tasktype.seq_2_seq_lm, inference_mode=false, r=8, lora_alpha=32, lora_dropout=0.1\n)\n\nmodel = automodelforseq2seqlm.from_pretrained(model_name_or_path)\nmodel = get_peft_model(model, peft_config)\nmodel.print_trainable_parameters()\n# output: trainable params: 2359296 || all params: 1231940608 || trainable%: 0.19151053100118282\n```\n\n## use cases\n\n### get comparable performance to full finetuning by adapting llms to downstream tasks using consumer hardware\n\ngpu memory required for adapting llms on the few-shot dataset [`ought/raft/twitter_complaints`](https://huggingface.co/datasets/ought/raft/viewer/twitter_complaints). here, settings considered\nare full finetuning, peft-lora using plain pytorch and peft-lora using deepspeed with cpu offloading. \n\nhardware: single a100 80gb gpu with cpu ram above 64gb\n\n|   model         | full finetuning | peft-lora pytorch  | peft-lora deepspeed with cpu offloading |\n| --------- | ---- | ---- | ---- |\n| bigscience/t0_3b (3b params) | 47.14gb gpu / 2.96gb cpu  | 14.4gb gpu / 2.96gb cpu | 9.8gb gpu / 17.8gb cpu |\n| bigscience/mt0-xxl (12b params) | oom gpu | 56gb gpu / 3gb cpu | 22gb gpu / 52gb cpu |\n| bigscience/bloomz-7b1 (7b params) | oom gpu | 32gb gpu / 3.8gb cpu | 18.1gb gpu / 35gb cpu |\n\nperformance of peft-lora tuned [`bigscience/t0_3b`](https://huggingface.co/bigscience/t0_3b) on [`ought/raft/twitter_complaints`](https://huggingface.co/datasets/ought/raft/viewer/twitter_complaints) leaderboard. \na point to note is that we didn't try to squeeze performance by playing around with input instruction templates, lora hyperparams and other training related hyperparams. also, we didn't use the larger 13b [mt0-xxl](https://huggingface.co/bigscience/mt0-xxl) model.\nso, we are already seeing comparable performance to sota with parameter efficient tuning. also, the final additional checkpoint size is just `19mb` in comparison to `11gb` size of the backbone [`bigscience/t0_3b`](https://huggingface.co/bigscience/t0_3b) model, but one still has to load the original full size model.\n\n|   submission name        | accuracy |\n| --------- | ---- |\n| human baseline (crowdsourced) |\t0.897 |\n| flan-t5 | 0.892 |\n| lora-t0-3b | 0.863 |\n\n**therefore, we can see that performance comparable to sota is achievable by peft methods with consumer hardware such as 16gb and 24gb gpus.**\n\nan insightful blogpost explaining the advantages of using peft for fine-tuning flant5-xxl: [https://www.philschmid.de/fine-tune-flan-t5-peft](https://www.philschmid.de/fine-tune-flan-t5-peft)\n\n### parameter efficient tuning of diffusion models\n\ngpu memory required by different settings during training is given below. the final checkpoint size is `8.8 mb`.\n\nhardware: single a100 80gb gpu with cpu ram above 64gb\n\n|   model         | full finetuning | peft-lora  | peft-lora with gradient checkpointing  |\n| --------- | ---- | ---- | ---- |\n| compvis/stable-diffusion-v1-4 | 27.5gb gpu / 3.97gb cpu | 15.5gb gpu / 3.84gb cpu | 8.12gb gpu / 3.77gb cpu | \n\n\n**training**\nan example of using lora for parameter efficient dreambooth training is given in [`examples/lora_dreambooth/train_dreambooth.py`](examples/lora_dreambooth/train_dreambooth.py)\n\n```bash\nexport model_name= \"compvis/stable-diffusion-v1-4\" #\"stabilityai/stable-diffusion-2-1\"\nexport instance_dir=\"path-to-instance-images\"\nexport class_dir=\"path-to-class-images\"\nexport output_dir=\"path-to-save-model\"\n\naccelerate launch train_dreambooth.py \\\n  --pretrained_model_name_or_path=$model_name  \\\n  --instance_data_dir=$instance_dir \\\n  --class_data_dir=$class_dir \\\n  --output_dir=$output_dir \\\n  --train_text_encoder \\\n  --with_prior_preservation --prior_loss_weight=1.0 \\\n  --instance_prompt=\"a photo of sks dog\" \\\n  --class_prompt=\"a photo of dog\" \\\n  --resolution=512 \\\n  --train_batch_size=1 \\\n  --lr_scheduler=\"constant\" \\\n  --lr_warmup_steps=0 \\\n  --num_class_images=200 \\\n  --use_lora \\\n  --lora_r 16 \\\n  --lora_alpha 27 \\\n  --lora_text_encoder_r 16 \\\n  --lora_text_encoder_alpha 17 \\\n  --learning_rate=1e-4 \\\n  --gradient_accumulation_steps=1 \\\n  --gradient_checkpointing \\\n  --max_train_steps=800\n```\n\ntry out the \ud83e\udd17 gradio space which should run seamlessly on a t4 instance:\n[smangrul/peft-lora-sd-dreambooth](https://huggingface.co/spaces/smangrul/peft-lora-sd-dreambooth).\n\n![peft lora dreambooth gradio space](https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/peft/peft_lora_dreambooth_gradio_space.png)\n\n**new** \u2728 multi adapter support and combining multiple lora adapters in a weighted combination \n![peft lora dreambooth weighted adapter](https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/peft/weighted_adapter_dreambooth_lora.png)\n\n**new** \u2728 dreambooth training for stable diffusion using loha and lokr adapters [`examples/stable_diffusion/train_dreambooth.py`](examples/stable_diffusion/train_dreambooth.py)\n\n### parameter efficient tuning of llms for rlhf components such as ranker and policy\n- here is an example in [trl](https://github.com/lvwerra/trl) library using peft+int8 for tuning policy model: [gpt2-sentiment_peft.py](https://github.com/lvwerra/trl/blob/main/examples/sentiment/scripts/gpt2-sentiment_peft.py) and corresponding [blog](https://huggingface.co/blog/trl-peft)\n- example using peft for instruction finetuning, reward model and policy : [stack_llama](https://github.com/lvwerra/trl/tree/main/examples/research_projects/stack_llama/scripts) and corresponding [blog](https://huggingface.co/blog/stackllama) \n\n### int8 training of large models in colab using peft lora and bitsandbytes\n\n- here is now a demo on how to fine tune [opt-6.7b](https://huggingface.co/facebook/opt-6.7b) (14gb in fp16) in a google colab: [![open in colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/drive/1jckpikz0j2o20fbqmymagdikmjgomo-o?usp=sharing)\n\n- here is now a demo on how to fine tune [whisper-large](https://huggingface.co/openai/whisper-large-v2) (1.5b params) (14gb in fp16) in a google colab: [![open in colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/drive/1dokd_5oujfa0r5ik3sgywjljteo2qlxo?usp=sharing) and [![open in colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/drive/1vhf8yuefqha3y3cpthn6q9evcii9eyzs?usp=sharing)\n\n### save compute and storage even for medium and small models\n\nsave storage by avoiding full finetuning of models on each of the downstream tasks/datasets,\nwith peft methods, users only need to store tiny checkpoints in the order of `mbs` all the while retaining \nperformance comparable to full finetuning.\n\nan example of using lora for the task of adapting `layoutlmfortokenclassification` on `funsd` dataset is given in `~examples/token_classification/peft_lora_layoutlmfortokenclassification_on_funsd.py`. we can observe that with only `0.62 %` of parameters being trainable, we achieve performance (f1 0.777) comparable to full finetuning (f1 0.786) (without any hyperparam tuning runs for extracting more performance), and the checkpoint of this is only `2.8mb`. now, if there are `n` such datasets, just have these peft models one for each dataset and save a lot of storage without having to worry about the problem of catastrophic forgetting or overfitting of backbone/base model.\n\nanother example is fine-tuning [`roberta-large`](https://huggingface.co/roberta-large) on [`mrpc` glue](https://huggingface.co/datasets/glue/viewer/mrpc) dataset using different peft methods. the notebooks are given in `~examples/sequence_classification`. \n\n\n## peft + \ud83e\udd17 accelerate\n\npeft models work with \ud83e\udd17 accelerate out of the box. use \ud83e\udd17 accelerate for distributed training on various hardware such as gpus, apple silicon devices, etc during training.\nuse \ud83e\udd17 accelerate for inferencing on consumer hardware with small resources.\n\n### example of peft model training using \ud83e\udd17 accelerate's deepspeed integration\n\ndeepspeed version required `v0.8.0`. an example is provided in `~examples/conditional_generation/peft_lora_seq2seq_accelerate_ds_zero3_offload.py`. \n  a. first, run `accelerate config --config_file ds_zero3_cpu.yaml` and answer the questionnaire. \n  below are the contents of the config file.\n  ```yaml\n  compute_environment: local_machine\n  deepspeed_config:\n    gradient_accumulation_steps: 1\n    gradient_clipping: 1.0\n    offload_optimizer_device: cpu\n    offload_param_device: cpu\n    zero3_init_flag: true\n    zero3_save_16bit_model: true\n    zero_stage: 3\n  distributed_type: deepspeed\n  downcast_bf16: 'no'\n  dynamo_backend: 'no'\n  fsdp_config: {}\n  machine_rank: 0\n  main_training_function: main\n  megatron_lm_config: {}\n  mixed_precision: 'no'\n  num_machines: 1\n  num_processes: 1\n  rdzv_backend: static\n  same_network: true\n  use_cpu: false\n  ```\n  b. run the below command to launch the example script\n  ```bash\n  accelerate launch --config_file ds_zero3_cpu.yaml examples/peft_lora_seq2seq_accelerate_ds_zero3_offload.py\n  ```\n\n  c. output logs:\n  ```bash\n  gpu memory before entering the train : 1916\n  gpu memory consumed at the end of the train (end-begin): 66\n  gpu peak memory consumed during the train (max-begin): 7488\n  gpu total peak memory consumed during the train (max): 9404\n  cpu memory before entering the train : 19411\n  cpu memory consumed at the end of the train (end-begin): 0\n  cpu peak memory consumed during the train (max-begin): 0\n  cpu total peak memory consumed during the train (max): 19411\n  epoch=4: train_ppl=tensor(1.0705, device='cuda:0') train_epoch_loss=tensor(0.0681, device='cuda:0')\n  100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 7/7 [00:27<00:00,  3.92s/it]\n  gpu memory before entering the eval : 1982\n  gpu memory consumed at the end of the eval (end-begin): -66\n  gpu peak memory consumed during the eval (max-begin): 672\n  gpu total peak memory consumed during the eval (max): 2654\n  cpu memory before entering the eval : 19411\n  cpu memory consumed at the end of the eval (end-begin): 0\n  cpu peak memory consumed during the eval (max-begin): 0\n  cpu total peak memory consumed during the eval (max): 19411\n  accuracy=100.0\n  eval_preds[:10]=['no complaint', 'no complaint', 'complaint', 'complaint', 'no complaint', 'no complaint', 'no complaint', 'complaint', 'complaint', 'no complaint']\n  dataset['train'][label_column][:10]=['no complaint', 'no complaint', 'complaint', 'complaint', 'no complaint', 'no complaint', 'no complaint', 'complaint', 'complaint', 'no complaint']\n  ```\n\n### example of peft model inference using \ud83e\udd17 accelerate's big model inferencing capabilities\nan example is provided in [this notebook](https://github.com/huggingface/peft/blob/main/examples/causal_language_modeling/peft_lora_clm_accelerate_big_model_inference.ipynb).\n\n\n## models support matrix\n\nfind models that are supported out of the box below. note that peft works with almost all models -- if it is not listed, you just need to [do some manual configuration](https://huggingface.co/docs/peft/developer_guides/custom_models).\n\n### causal language modeling\n| model        | lora | prefix tuning  | p-tuning | prompt tuning  | ia3 |\n|--------------| ---- | ---- | ---- | ----  | ----  |\n| gpt-2        | \u2705  | \u2705  | \u2705  | \u2705  | \u2705  |\n| bloom        | \u2705  | \u2705  | \u2705  | \u2705  | \u2705  |\n| opt          | \u2705  | \u2705  | \u2705  | \u2705  | \u2705  |\n| gpt-neo      | \u2705  | \u2705  | \u2705  | \u2705  | \u2705  |\n| gpt-j        | \u2705  | \u2705  | \u2705  | \u2705  | \u2705  |\n| gpt-neox-20b | \u2705  | \u2705  | \u2705  | \u2705  | \u2705  |\n| llama        | \u2705  | \u2705  | \u2705  | \u2705  | \u2705  |\n| chatglm      | \u2705  | \u2705  | \u2705  | \u2705  | \u2705  |\n| mistral      | \u2705  |    |    |    |    |\n\n### conditional generation\n|   model         | lora | prefix tuning  | p-tuning | prompt tuning  | ia3 |\n| --------- | ---- | ---- | ---- | ---- | ---- |\n| t5        | \u2705   | \u2705   | \u2705   | \u2705   | \u2705   |\n| bart      | \u2705   | \u2705   | \u2705   | \u2705   | \u2705   |\n\n### sequence classification\n|   model         | lora | prefix tuning  | p-tuning | prompt tuning  | ia3 |\n| --------- | ---- | ---- | ---- | ----  | ----  |\n| bert           | \u2705  | \u2705  | \u2705  | \u2705  |  \u2705  |  \n| roberta        | \u2705  | \u2705  | \u2705  | \u2705  | \u2705  |\n| gpt-2          | \u2705  | \u2705  | \u2705  | \u2705  |   |\n| bloom          | \u2705  | \u2705  | \u2705  | \u2705  |   |\n| opt            | \u2705  | \u2705  | \u2705  | \u2705  |   |\n| gpt-neo        | \u2705  | \u2705  | \u2705  | \u2705  |   |\n| gpt-j          | \u2705  | \u2705  | \u2705  | \u2705  |   |\n| deberta        | \u2705  |     | \u2705  | \u2705  |   | \n| deberta-v2     | \u2705  |     | \u2705  | \u2705  |   |\n\n### token classification\n|   model         | lora | prefix tuning  | p-tuning | prompt tuning  | ia3 |\n| --------- | ---- | ---- | ---- | ----  | ----  |\n| bert           | \u2705  | \u2705  |   |   |   |  \n| roberta        | \u2705  | \u2705  |   |   |   |\n| gpt-2          | \u2705  | \u2705  |   |   |   |\n| bloom          | \u2705  | \u2705  |   |   |   |\n| opt            | \u2705  | \u2705  |   |   |   |\n| gpt-neo        | \u2705  | \u2705  |   |   |   |\n| gpt-j          | \u2705  | \u2705  |   |   |   |\n| deberta        | \u2705  |     |   |   |   |\n| deberta-v2     | \u2705  |     |   |   |   |\n\n### text-to-image generation\n\n|   model         | lora | loha | lokr | oft | prefix tuning  | p-tuning | prompt tuning  | ia3 |\n| --------- | ---- | ---- | ---- | ---- | ---- | ---- | ----  | ----  |\n| stable diffusion           | \u2705  | \u2705  | \u2705  | \u2705  |  |   |   |\n\n\n### image classification\n\n|   model         | lora | prefix tuning  | p-tuning | prompt tuning  | ia3 |\n| --------- | ---- | ---- | ---- | ----  | ----  |\n| vit           | \u2705  |   |   |   |    | \n| swin           | \u2705  |   |   |   |   |  \n\n### image to text (multi-modal models)\n\n|   model         | lora | prefix tuning  | p-tuning | prompt tuning  | ia3\n| --------- | ---- | ---- | ---- | ----  | ----  |\n| blip-2           | \u2705  |   |   |   |   |\n\n___note that we have tested lora for [vit](https://huggingface.co/docs/transformers/model_doc/vit) and [swin](https://huggingface.co/docs/transformers/model_doc/swin) for fine-tuning on image classification. however, it should be possible to use lora for any compatible model [provided](https://huggingface.co/models?pipeline_tag=image-classification&sort=downloads&search=vit) by \ud83e\udd17 transformers. check out the respective\nexamples to learn more. if you run into problems, please open an issue.___\n\nthe same principle applies to our [segmentation models](https://huggingface.co/models?pipeline_tag=image-segmentation&sort=downloads) as well. \n\n### semantic segmentation\n\n|   model         | lora | prefix tuning  | p-tuning | prompt tuning  | ia3 |\n| --------- | ---- | ---- | ---- | ----  | ----  |\n| segformer           | \u2705  |   |   |   |   | \n\n\n## caveats:\n\n1. below is an example of using pytorch fsdp for training. however, it doesn't lead to \nany gpu memory savings. please refer issue [[fsdp] fsdp with cpu offload consumes 1.65x more gpu memory when training models with most of the params frozen](https://github.com/pytorch/pytorch/issues/91165). \n\n  ```python\n  from peft.utils.other import fsdp_auto_wrap_policy\n\n  ...\n\n  if os.environ.get(\"accelerate_use_fsdp\", none) is not none:\n      accelerator.state.fsdp_plugin.auto_wrap_policy = fsdp_auto_wrap_policy(model)\n\n  model = accelerator.prepare(model)\n  ```\n\n  example of parameter efficient tuning with [`mt0-xxl`](https://huggingface.co/bigscience/mt0-xxl) base model using \ud83e\udd17 accelerate is provided in `~examples/conditional_generation/peft_lora_seq2seq_accelerate_fsdp.py`. \n  a. first, run `accelerate config --config_file fsdp_config.yaml` and answer the questionnaire. \n  below are the contents of the config file.\n  ```yaml\n  command_file: null\n  commands: null\n  compute_environment: local_machine\n  deepspeed_config: {}\n  distributed_type: fsdp\n  downcast_bf16: 'no'\n  dynamo_backend: 'no'\n  fsdp_config:\n    fsdp_auto_wrap_policy: transformer_based_wrap\n    fsdp_backward_prefetch_policy: backward_pre\n    fsdp_offload_params: true\n    fsdp_sharding_strategy: 1\n    fsdp_state_dict_type: full_state_dict\n    fsdp_transformer_layer_cls_to_wrap: t5block\n  gpu_ids: null\n  machine_rank: 0\n  main_process_ip: null\n  main_process_port: null\n  main_training_function: main\n  megatron_lm_config: {}\n  mixed_precision: 'no'\n  num_machines: 1\n  num_processes: 2\n  rdzv_backend: static\n  same_network: true\n  tpu_name: null\n  tpu_zone: null\n  use_cpu: false\n  ```\n  b. run the below command to launch the example script\n  ```bash\n  accelerate launch --config_file fsdp_config.yaml examples/peft_lora_seq2seq_accelerate_fsdp.py\n  ```\n\n2. when using zero3 with zero3_init_flag=true, if you find the gpu memory increase with training steps. we might need to update deepspeed after [deepspeed commit 42858a9891422abc](https://github.com/microsoft/deepspeed/commit/42858a9891422abcecaa12c1bd432d28d33eb0d4) . the related issue is [[bug] peft training with zero.init() and zero3 will increase gpu memory every forward step ](https://github.com/microsoft/deepspeed/issues/3002)\n\n## \ud83e\udd17 peft as a utility library\n\n### injecting adapters directly into the model\n\ninject trainable adapters on any `torch` model using `inject_adapter_in_model` method. note the method will make no further change to the model.\n\n```python\nimport torch \nfrom peft import inject_adapter_in_model, loraconfig\n\nclass dummymodel(torch.nn.module):\n    def __init__(self):\n        super().__init__()\n        self.embedding = torch.nn.embedding(10, 10)\n        self.linear = torch.nn.linear(10, 10)\n        self.lm_head = torch.nn.linear(10, 10)\n    \n    def forward(self, input_ids):\n        x = self.embedding(input_ids)\n        x = self.linear(x)\n        x = self.lm_head(x)\n        return x\n\nlora_config = loraconfig(\n    lora_alpha=16,\n    lora_dropout=0.1,\n    r=64,\n    bias=\"none\",\n    target_modules=[\"linear\"],\n)\n\nmodel = dummymodel()\nmodel = inject_adapter_in_model(lora_config, model)\n\ndummy_inputs = torch.longtensor([[0, 1, 2, 3, 4, 5, 6, 7]])\ndummy_outputs = model(dummy_inputs)\n```\n\nlearn more about the [low level api in the docs](https://huggingface.co/docs/peft/developer_guides/low_level_api).\n\n### mixing different adapter types\n\nususally, it is not possible to combine different adapter types in the same model, e.g. combining lora with adalora, loha, or lokr. using a mixed model, this can, however, be achieved:\n\n```python\nfrom peft import peftmixedmodel\n\nmodel = automodelforcausallm.from_pretrained(\"hf-internal-testing/tiny-random-optforcausallm\").eval()\npeft_model = peftmixedmodel.from_pretrained(model, <path-to-adapter-0>, \"adapter0\")\npeft_model.load_adapter(<path-to-adapter-1>, \"adapter1\")\npeft_model.set_adapter([\"adapter0\", \"adapter1\"])\nresult = peft_model(**inputs)\n```\n\nthe main intent is to load already trained adapters and use this only for inference. however, it is also possible to create a peft model for training by passing `mixed=true` to `get_peft_model`:\n\n```python\nfrom peft import get_peft_model, loraconfig, lokrconfig\n\nbase_model = ...\nconfig0 = loraconfig(...)\nconfig1 = lokrconfig(...)\npeft_model = get_peft_model(base_model, config0, \"adapter0\", mixed=true)\npeft_model.add_adapter(config1, \"adapter1\")\npeft_model.set_adapter([\"adapter0\", \"adapter1\"])\nfor batch in dataloader:\n    ...\n```\n\n## contributing\n\nif you would like to contribute to peft, please check out our [contributing guide](https://huggingface.co/docs/peft/developer_guides/contributing).\n\n## citing \ud83e\udd17 peft\n\nif you use \ud83e\udd17 peft in your publication, please cite it by using the following bibtex entry.\n\n```bibtex\n@misc{peft,\n  title =        {peft: state-of-the-art parameter-efficient fine-tuning methods},\n  author =       {sourab mangrulkar and sylvain gugger and lysandre debut and younes belkada and sayak paul and benjamin bossan},\n  howpublished = {\\url{https://github.com/huggingface/peft}},\n  year =         {2022}\n}\n```\n",
  "docs_url": null,
  "keywords": "deep learning",
  "license": "apache",
  "name": "peft",
  "package_url": "https://pypi.org/project/peft/",
  "project_url": "https://pypi.org/project/peft/",
  "project_urls": {
    "Homepage": "https://github.com/huggingface/peft"
  },
  "release_url": "https://pypi.org/project/peft/0.7.1/",
  "requires_dist": [
    "numpy (>=1.17)",
    "packaging (>=20.0)",
    "psutil",
    "pyyaml",
    "torch (>=1.13.0)",
    "transformers",
    "tqdm",
    "accelerate (>=0.21.0)",
    "safetensors",
    "huggingface-hub (>=0.17.0)",
    "black (~=22.0) ; extra == 'dev'",
    "ruff (>=0.0.241) ; extra == 'dev'",
    "urllib3 (<=2.0.0) ; extra == 'dev'",
    "hf-doc-builder ; extra == 'dev'",
    "hf-doc-builder ; extra == 'docs_specific'",
    "black (~=22.0) ; extra == 'quality'",
    "ruff (>=0.0.241) ; extra == 'quality'",
    "urllib3 (<=2.0.0) ; extra == 'quality'",
    "black (~=22.0) ; extra == 'test'",
    "ruff (>=0.0.241) ; extra == 'test'",
    "urllib3 (<=2.0.0) ; extra == 'test'",
    "hf-doc-builder ; extra == 'test'",
    "pytest ; extra == 'test'",
    "pytest-cov ; extra == 'test'",
    "pytest-xdist ; extra == 'test'",
    "parameterized ; extra == 'test'",
    "datasets ; extra == 'test'",
    "diffusers (<0.21.0) ; extra == 'test'",
    "scipy ; extra == 'test'"
  ],
  "requires_python": ">=3.8.0",
  "summary": "parameter-efficient fine-tuning (peft)",
  "version": "0.7.1",
  "releases": [],
  "developers": [
    "sourab@huggingface.co",
    "the_huggingface_team"
  ],
  "kwds": "peft_lora_clm_accelerate_big_model_inference learning main_training_function deepspeed learning_rate",
  "license_kwds": "apache",
  "libtype": "pypi",
  "id": "pypi_peft",
  "homepage": "https://github.com/huggingface/peft",
  "release_count": 12,
  "dependency_ids": [
    "pypi_accelerate",
    "pypi_black",
    "pypi_datasets",
    "pypi_diffusers",
    "pypi_hf_doc_builder",
    "pypi_huggingface_hub",
    "pypi_numpy",
    "pypi_packaging",
    "pypi_parameterized",
    "pypi_psutil",
    "pypi_pytest",
    "pypi_pytest_cov",
    "pypi_pytest_xdist",
    "pypi_pyyaml",
    "pypi_ruff",
    "pypi_safetensors",
    "pypi_scipy",
    "pypi_torch",
    "pypi_tqdm",
    "pypi_transformers",
    "pypi_urllib3"
  ]
}
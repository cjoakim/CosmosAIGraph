{
  "classifiers": [
    "development status :: 4 - beta",
    "intended audience :: developers",
    "license :: osi approved :: apache software license",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.12",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "programming language :: python :: implementation :: cpython",
    "programming language :: python :: implementation :: pypy",
    "topic :: software development :: libraries :: python modules"
  ],
  "description": "sqlalchemy-jsonfield\n====================\n\n.. image:: https://github.com/penguinolog/sqlalchemy_jsonfield/workflows/python%20package/badge.svg\n    :target: https://github.com/penguinolog/sqlalchemy_jsonfield/actions\n.. image:: https://img.shields.io/pypi/v/sqlalchemy_jsonfield.svg\n    :target: https://pypi.python.org/pypi/sqlalchemy_jsonfield\n.. image:: https://img.shields.io/pypi/pyversions/sqlalchemy_jsonfield.svg\n    :target: https://pypi.python.org/pypi/sqlalchemy_jsonfield\n.. image:: https://img.shields.io/pypi/status/sqlalchemy_jsonfield.svg\n    :target: https://pypi.python.org/pypi/sqlalchemy_jsonfield\n.. image:: https://img.shields.io/github/license/penguinolog/sqlalchemy_jsonfield.svg\n    :target: https://raw.githubusercontent.com/penguinolog/sqlalchemy_jsonfield/master/license\n.. image:: https://img.shields.io/badge/code%20style-black-000000.svg\n    :target: https://github.com/ambv/black\n\nsqlalchemy jsonfield implementation for storing dicts at sql independently from json type support.\n\nwhy?\n----\n\nsqlalchemy provides json field support for several database types (postgresql and mysql for now)\nand semi-working dict <-> json <-> varchar example, but...\nin real scenarios we have tests on sqlite, production on mysql/mariadb/percona/postgresql\nand some of them (modern oracle mysql & postgresql) support json,\nsome of them (sqlite, percona & mariadb) requires data conversion to text (not varchar).\n\nas addition, we have different levels of unicode support on database and connector side,\nso we may be interested to switch json encoding between deployments.\n\n.. note:: sqlite 3.9 supports json natively and sqlalchemy can handle this.\n\nsolution:\n---------\n\nsqlalchemy jsonfield has api with suport for automatic switch between native json and json encoded data,\nand encoding to json string can be enforced.\n\npros:\n-----\n\n* free software: apache license\n* open source: https://github.com/penguinolog/sqlalchemy_jsonfield\n* self-documented code: docstrings with types in comments\n* uses native json by default, but allows to specify different library.\n* support multiple python versions\n\nusage\n=====\ndirect usage with mariadb (example extracted from functional tests):\n\n.. code-block:: python\n\n  import sqlalchemy_jsonfield\n\n  class exampletable(base):\n      __tablename__ = table_name\n      id = sqlalchemy.column(sqlalchemy.integer, primary_key=true)\n      row_name = sqlalchemy.column(\n          sqlalchemy.unicode(64),\n          unique=true,\n      )\n      json_record = sqlalchemy.column(\n          sqlalchemy_jsonfield.jsonfield(\n              # mariadb does not support json for now\n              enforce_string=true,\n              # mariadb connector requires additional parameters for correct utf-8\n              enforce_unicode=false\n          ),\n          nullable=false\n      )\n\nusage with alternate json library:\n\n.. code-block:: python\n\n  import sqlalchemy_jsonfield\n  import ujson\n\n  class exampletable(base):\n      __tablename__ = table_name\n      id = sqlalchemy.column(sqlalchemy.integer, primary_key=true)\n      row_name = sqlalchemy.column(\n          sqlalchemy.unicode(64),\n          unique=true,\n      )\n      json_record = sqlalchemy.column(\n          sqlalchemy_jsonfield.jsonfield(\n              enforce_string=true,\n              enforce_unicode=false,\n              json=ujson,  # use ujson instead of standard json.\n          ),\n          nullable=false\n      )\n\nusage on postgresql/oracle mysql(modern version)/sqlite(testing) environments allows to set `enforce_string=false`\nand use native json fields.\n\ntesting\n=======\nthe main test mechanism for the package `sqlalchemy_jsonfield` is using `tox`.\navailable environments can be collected via `tox -l`\n\nci systems\n==========\nfor code checking several ci systems is used in parallel:\n\n1. `github actions: <https://github.com/penguinolog/sqlalchemy_jsonfield/actions>`_ is used for checking: pep8, pylint, bandit, installation possibility and unit tests.\n",
  "docs_url": null,
  "keywords": "sql,sqlalchemy,json,jsonfield,development",
  "license": "apache-2.0",
  "name": "sqlalchemy-jsonfield",
  "package_url": "https://pypi.org/project/SQLAlchemy-JSONField/",
  "project_url": "https://pypi.org/project/SQLAlchemy-JSONField/",
  "project_urls": {
    "Bug Tracker": "https://github.com/penguinolog/sqlalchemy_jsonfield/issues",
    "Repository": "https://github.com/penguinolog/sqlalchemy_jsonfield"
  },
  "release_url": "https://pypi.org/project/SQLAlchemy-JSONField/1.0.2/",
  "requires_dist": [
    "sqlalchemy"
  ],
  "requires_python": ">=3.7.0",
  "summary": "sqlalchemy jsonfield implementation for storing dicts at sql",
  "version": "1.0.2",
  "releases": [],
  "developers": [
    "penguinolog@gmail.com"
  ],
  "kwds": "sqlalchemy_jsonfield sqlalchemy jsonfield json_record json",
  "license_kwds": "apache-2.0",
  "libtype": "pypi",
  "id": "pypi_sqlalchemy_jsonfield",
  "homepage": "",
  "release_count": 16,
  "dependency_ids": [
    "pypi_sqlalchemy"
  ]
}
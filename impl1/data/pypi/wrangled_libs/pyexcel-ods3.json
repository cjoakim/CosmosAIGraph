{
  "classifiers": [
    "intended audience :: developers",
    "license :: osi approved :: bsd license",
    "programming language :: python",
    "programming language :: python :: 3 :: only",
    "programming language :: python :: 3.6",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "topic :: software development :: libraries"
  ],
  "description": "================================================================================\npyexcel-ods3 - let you focus on data, instead of ods format\n================================================================================\n\n.. image:: https://raw.githubusercontent.com/pyexcel/pyexcel.github.io/master/images/patreon.png\n   :target: https://www.patreon.com/chfw\n\n.. image:: https://raw.githubusercontent.com/pyexcel/pyexcel-mobans/master/images/awesome-badge.svg\n   :target: https://awesome-python.com/#specific-formats-processing\n\n.. image:: https://github.com/pyexcel/pyexcel-ods3/workflows/run_tests/badge.svg\n   :target: http://github.com/pyexcel/pyexcel-ods3/actions\n\n.. image:: https://codecov.io/gh/pyexcel/pyexcel-ods3/branch/master/graph/badge.svg\n   :target: https://codecov.io/gh/pyexcel/pyexcel-ods3\n\n.. image:: https://badge.fury.io/py/pyexcel-ods3.svg\n   :target: https://pypi.org/project/pyexcel-ods3\n\n.. image:: https://anaconda.org/conda-forge/pyexcel-ods3/badges/version.svg\n   :target: https://anaconda.org/conda-forge/pyexcel-ods3\n\n.. image:: https://pepy.tech/badge/pyexcel-ods3/month\n   :target: https://pepy.tech/project/pyexcel-ods3\n\n.. image:: https://anaconda.org/conda-forge/pyexcel-ods3/badges/downloads.svg\n   :target: https://anaconda.org/conda-forge/pyexcel-ods3\n\n.. image:: https://img.shields.io/gitter/room/gitterhq/gitter.svg\n   :target: https://gitter.im/pyexcel/lobby\n\n.. image:: https://img.shields.io/static/v1?label=continuous%20templating&message=%e6%a8%a1%e7%89%88%e6%9b%b4%e6%96%b0&color=blue&style=flat-square\n    :target: https://moban.readthedocs.io/en/latest/#at-scale-continous-templating-for-open-source-projects\n\n.. image:: https://img.shields.io/static/v1?label=coding%20style&message=black&color=black&style=flat-square\n    :target: https://github.com/psf/black\n\n**pyexcel-ods3** is a tiny wrapper library to read, manipulate and write data in ods\nformat. you are likely to use `pyexcel <https://github.com/pyexcel/pyexcel>`__ together\nwith this library. `pyexcel-ods <https://github.com/pyexcel/pyexcel-ods>`__ is a sister\nlibrary that depends on gpl licensed odfpy.\n`pyexcel-odsr <https://github.com/pyexcel/pyexcel-odsr>`_ is the other sister library\nthat has no external dependency but do ods reading only\n\nsupport the project\n================================================================================\n\nif your company has embedded pyexcel and its components into a revenue generating\nproduct, please support me on github, `patreon <https://www.patreon.com/bepatron?u=5537627>`_\nor `bounty source <https://salt.bountysource.com/teams/chfw-pyexcel>`_ to maintain\nthe project and develop it further.\n\nif you are an individual, you are welcome to support me too and for however long\nyou feel like. as my backer, you will receive\n`early access to pyexcel related contents <https://www.patreon.com/pyexcel/posts>`_.\n\nand your issues will get prioritized if you would like to become my patreon as `pyexcel pro user`.\n\nwith your financial support, i will be able to invest\na little bit more time in coding, documentation and writing interesting posts.\n\n\nknown constraints\n==================\n\nfonts, colors and charts are not supported.\n\nnor to read password protected xls, xlsx and ods files.\n\ninstallation\n================================================================================\n\n\nyou can install pyexcel-ods3 via pip:\n\n.. code-block:: bash\n\n    $ pip install pyexcel-ods3\n\n\nor clone it and install it:\n\n.. code-block:: bash\n\n    $ git clone https://github.com/pyexcel/pyexcel-ods3.git\n    $ cd pyexcel-ods3\n    $ python setup.py install\n\nusage\n================================================================================\n\nas a standalone library\n--------------------------------------------------------------------------------\n\nwrite to an ods file\n********************************************************************************\n\n\n\nhere's the sample code to write a dictionary to an ods file:\n\n.. code-block:: python\n\n    >>> from pyexcel_ods3 import save_data\n    >>> data = ordereddict() # from collections import ordereddict\n    >>> data.update({\"sheet 1\": [[1, 2, 3], [4, 5, 6]]})\n    >>> data.update({\"sheet 2\": [[\"row 1\", \"row 2\", \"row 3\"]]})\n    >>> save_data(\"your_file.ods\", data)\n\n\nread from an ods file\n********************************************************************************\n\nhere's the sample code:\n\n.. code-block:: python\n\n    >>> from pyexcel_ods3 import get_data\n    >>> data = get_data(\"your_file.ods\")\n    >>> import json\n    >>> print(json.dumps(data))\n    {\"sheet 1\": [[1, 2, 3], [4, 5, 6]], \"sheet 2\": [[\"row 1\", \"row 2\", \"row 3\"]]}\n\n\nwrite an ods to memory\n********************************************************************************\n\nhere's the sample code to write a dictionary to an ods file:\n\n.. code-block:: python\n\n    >>> from pyexcel_ods3 import save_data\n    >>> data = ordereddict()\n    >>> data.update({\"sheet 1\": [[1, 2, 3], [4, 5, 6]]})\n    >>> data.update({\"sheet 2\": [[7, 8, 9], [10, 11, 12]]})\n    >>> io = stringio()\n    >>> save_data(io, data)\n    >>> # do something with the io\n    >>> # in reality, you might give it to your http response\n    >>> # object for downloading\n\n\n\nread from an ods from memory\n********************************************************************************\n\ncontinue from previous example:\n\n.. code-block:: python\n\n    >>> # this is just an illustration\n    >>> # in reality, you might deal with ods file upload\n    >>> # where you will read from requests.files['your_ods_file']\n    >>> data = get_data(io)\n    >>> print(json.dumps(data))\n    {\"sheet 1\": [[1, 2, 3], [4, 5, 6]], \"sheet 2\": [[7, 8, 9], [10, 11, 12]]}\n\n\npagination feature\n********************************************************************************\n\nspecial notice 30/01/2017: due to the constraints of the underlying 3rd party\nlibrary, it will read the whole file before returning the paginated data. so\nat the end of day, the only benefit is less data returned from the reading\nfunction. no major performance improvement will be seen.\n\nwith that said, please install `pyexcel-odsr <https://github.com/pyexcel/pyexcel-odsr>`_\nand it gives better performance in pagination.\n\nlet's assume the following file is a huge ods file:\n\n.. code-block:: python\n\n   >>> huge_data = [\n   ...     [1, 21, 31],\n   ...     [2, 22, 32],\n   ...     [3, 23, 33],\n   ...     [4, 24, 34],\n   ...     [5, 25, 35],\n   ...     [6, 26, 36]\n   ... ]\n   >>> sheetx = {\n   ...     \"huge\": huge_data\n   ... }\n   >>> save_data(\"huge_file.ods\", sheetx)\n\nand let's pretend to read partial data:\n\n.. code-block:: python\n\n   >>> partial_data = get_data(\"huge_file.ods\", start_row=2, row_limit=3)\n   >>> print(json.dumps(partial_data))\n   {\"huge\": [[3, 23, 33], [4, 24, 34], [5, 25, 35]]}\n\nand you could as well do the same for columns:\n\n.. code-block:: python\n\n   >>> partial_data = get_data(\"huge_file.ods\", start_column=1, column_limit=2)\n   >>> print(json.dumps(partial_data))\n   {\"huge\": [[21, 31], [22, 32], [23, 33], [24, 34], [25, 35], [26, 36]]}\n\nobvious, you could do both at the same time:\n\n.. code-block:: python\n\n   >>> partial_data = get_data(\"huge_file.ods\",\n   ...     start_row=2, row_limit=3,\n   ...     start_column=1, column_limit=2)\n   >>> print(json.dumps(partial_data))\n   {\"huge\": [[23, 33], [24, 34], [25, 35]]}\n\nas a pyexcel plugin\n--------------------------------------------------------------------------------\n\nno longer, explicit import is needed since pyexcel version 0.2.2. instead,\nthis library is auto-loaded. so if you want to read data in ods format,\ninstalling it is enough.\n\n\nreading from an ods file\n********************************************************************************\n\nhere is the sample code:\n\n.. code-block:: python\n\n    >>> import pyexcel as pe\n    >>> sheet = pe.get_book(file_name=\"your_file.ods\")\n    >>> sheet\n    sheet 1:\n    +---+---+---+\n    | 1 | 2 | 3 |\n    +---+---+---+\n    | 4 | 5 | 6 |\n    +---+---+---+\n    sheet 2:\n    +-------+-------+-------+\n    | row 1 | row 2 | row 3 |\n    +-------+-------+-------+\n\n\nwriting to an ods file\n********************************************************************************\n\nhere is the sample code:\n\n.. code-block:: python\n\n    >>> sheet.save_as(\"another_file.ods\")\n\n\nreading from a io instance\n********************************************************************************\n\nyou got to wrap the binary content with stream to get ods working:\n\n.. code-block:: python\n\n    >>> # this is just an illustration\n    >>> # in reality, you might deal with ods file upload\n    >>> # where you will read from requests.files['your_ods_file']\n    >>> odsfile = \"another_file.ods\"\n    >>> with open(odsfile, \"rb\") as f:\n    ...     content = f.read()\n    ...     r = pe.get_book(file_type=\"ods\", file_content=content)\n    ...     print(r)\n    ...\n    sheet 1:\n    +---+---+---+\n    | 1 | 2 | 3 |\n    +---+---+---+\n    | 4 | 5 | 6 |\n    +---+---+---+\n    sheet 2:\n    +-------+-------+-------+\n    | row 1 | row 2 | row 3 |\n    +-------+-------+-------+\n\n\nwriting to a stringio instance\n********************************************************************************\n\nyou need to pass a stringio instance to writer:\n\n.. code-block:: python\n\n    >>> data = [\n    ...     [1, 2, 3],\n    ...     [4, 5, 6]\n    ... ]\n    >>> io = stringio()\n    >>> sheet = pe.sheet(data)\n    >>> io = sheet.save_to_memory(\"ods\", io)\n    >>> # then do something with io\n    >>> # in reality, you might give it to your http response\n    >>> # object for downloading\n\n\nlicense\n================================================================================\n\nnew bsd license\n\ndeveloper guide\n==================\n\ndevelopment steps for code changes\n\n#. git clone https://github.com/pyexcel/pyexcel-ods3.git\n#. cd pyexcel-ods3\n\nupgrade your setup tools and pip. they are needed for development and testing only:\n\n#. pip install --upgrade setuptools pip\n\nthen install relevant development requirements:\n\n#. pip install -r rnd_requirements.txt # if such a file exists\n#. pip install -r requirements.txt\n#. pip install -r tests/requirements.txt\n\nonce you have finished your changes, please provide test case(s), relevant documentation\nand update changelog.yml\n\n.. note::\n\n    as to rnd_requirements.txt, usually, it is created when a dependent\n    library is not released. once the dependecy is installed\n    (will be released), the future\n    version of the dependency in the requirements.txt will be valid.\n\n\nhow to test your contribution\n------------------------------\n\nalthough `nose` and `doctest` are both used in code testing, it is adviable that unit tests are put in tests. `doctest` is incorporated only to make sure the code examples in documentation remain valid across different development releases.\n\non linux/unix systems, please launch your tests like this::\n\n    $ make\n\non windows, please issue this command::\n\n    > test.bat\n\n\nbefore you commit\n------------------------------\n\nplease run::\n\n    $ make format\n\nso as to beautify your code otherwise your build may fail your unit test.\n\n\ninstallation note\n================================================================================\nthe installation of `lxml` will be tricky on windows platform. it is recommended that you download a lxml's own windows installer instead of using pip.\n\n\n\n\n5 contributors\n================================================================================\n\nin alphabetical order:\n\n* `benedikt waldvogel <https://github.com/bwaldvogel>`_\n* `mateusz konieczny <https://github.com/matkoniecz>`_\n* `michael k. <https://github.com/michael-k>`_\n* `stephen j. fuhry <https://github.com/fuhrysteve>`_\n* `vincent raspal <https://github.com/vinraspa>`_\n\nchange log\n================================================================================\n\n0.6.1 - 1.2.2022\n--------------------------------------------------------------------------------\n\n**added**\n\n#. `#28 <https://github.com/pyexcel/pyexcel-ods3/issues/28>`_: support datetime\n\n0.6.0 - 8.10.2020\n--------------------------------------------------------------------------------\n\n**added**\n\n#. new style reader and writer plugins. works with pyexcel-io v0.6.2\n\n0.5.3 - 27.11.2018\n--------------------------------------------------------------------------------\n\n**added**\n\n#. `pyexcel#57 <https://github.com/pyexcel/pyexcel/issues/57>`_, long type will\n   not be written in ods. please use string type. and if the integer is equal or\n   greater than 10 to the power of 16, it will not be written either in ods. in\n   both situation, integerprecisionlosserror will be raised.\n\n0.5.2 - 23.10.2017\n--------------------------------------------------------------------------------\n\n**updated**\n\n#. pyexcel `pyexcel#105 <https://github.com/pyexcel/pyexcel/issues/105>`_,\n   remove gease from setup_requires, introduced by 0.5.1.\n#. remove python2.6 test support\n#. update its dependecy on pyexcel-io to 0.5.3\n\n0.5.1 - 20.10.2017\n--------------------------------------------------------------------------------\n\n**added**\n\n#. `pyexcel#103 <https://github.com/pyexcel/pyexcel/issues/103>`_, include\n   license file in manifest.in, meaning license file will appear in the released\n   tar ball.\n\n0.5.0 - 30.08.2017\n--------------------------------------------------------------------------------\n\n**updated**\n\n#. put dependency on pyexcel-io 0.5.0, which uses cstringio instead of stringio.\n   hence, there will be performance boost in handling files in memory.\n\n**relocated**\n\n#. all ods type conversion code lives in pyexcel_io.service module\n\n0.4.1 - 17.08.2017\n--------------------------------------------------------------------------------\n\n**updated**\n\n#. update dependency to use pyexcel-ezodf v0.3.3 as ezodf 0.3.2 has `the bug\n   <https://github.com/pyexcel/pyexcel-ezodf/issues/1>`_, cannot handle file\n   alike objects and has not been updated for 2 years.\n\n0.4.0 - 19.06.2017\n--------------------------------------------------------------------------------\n\n**updated**\n\n#. `pyexcel#14 <https://github.com/pyexcel/pyexcel/issues/14>`_, close file\n   handle\n#. pyexcel-io plugin interface now updated to use `lml\n   <https://github.com/chfw/lml>`_.\n\n0.3.2 - 13.04.2017\n--------------------------------------------------------------------------------\n\n**updated**\n\n#. issue `pyexcel#8 <https://github.com/pyexcel/pyexcel/issues/8>`_,\n   pt288h00m00s is valid duration\n\n0.3.1 - 02.02.2017\n--------------------------------------------------------------------------------\n\n**added**\n\n#. recognize currency type\n\n0.3.0 - 22.12.2016\n--------------------------------------------------------------------------------\n\n**updated**\n\n#. code refactoring with pyexcel-io v 0.3.0\n\n0.2.2 - 05.11.2016\n--------------------------------------------------------------------------------\n\n**updated**\n\n#. `pyexcel#11 <https://github.com/pyexcel/pyexcel/issues/11>`_, be able to\n   consume a generator of two dimensional arrays.\n\n0.2.1 - 31.08.2016\n--------------------------------------------------------------------------------\n\n**added**\n\n#. support pagination. two pairs: start_row, row_limit and start_column,\n   column_limit help you deal with large files.\n\n0.2.0 - 01.06.2016\n--------------------------------------------------------------------------------\n\n**added**\n\n#. by default, `float` will be converted to `int` where fits. `auto_detect_int`,\n   a flag to switch off the autoatic conversion from `float` to `int`.\n#. 'library=pyexcel-ods3' was added so as to inform pyexcel to use it instead of\n   other libraries, in the situation where multiple plugins for the same file\n   type are installed\n\n**updated**\n\n#. support the auto-import feature of pyexcel-io 0.2.0\n#. compatibility with pyexcel-io 0.1.0\n\n0.1.0 - 17.01.2016\n--------------------------------------------------------------------------------\n\n**updated**\n\n#. support the auto-import feature of pyexcel-io 0.2.0\n#. compatibility with pyexcel-io 0.1.0\n\n\n\n",
  "docs_url": null,
  "keywords": "python,ods",
  "license": "new bsd",
  "name": "pyexcel-ods3",
  "package_url": "https://pypi.org/project/pyexcel-ods3/",
  "project_url": "https://pypi.org/project/pyexcel-ods3/",
  "project_urls": {
    "Download": "https://github.com/pyexcel/pyexcel-ods3/archive/0.6.1.tar.gz",
    "Homepage": "https://github.com/pyexcel/pyexcel-ods3"
  },
  "release_url": "https://pypi.org/project/pyexcel-ods3/0.6.1/",
  "requires_dist": [
    "pyexcel-io (>=0.6.2)",
    "lxml",
    "pyexcel-ezodf (>=0.3.3)"
  ],
  "requires_python": ">=3.6",
  "summary": "a wrapper library to read, manipulate and write data in ods format",
  "version": "0.6.1",
  "releases": [],
  "developers": [
    "info@pyexcel.org"
  ],
  "kwds": "pyexcel_ods3 pyexcel_io pyexcel odsfile python",
  "license_kwds": "new bsd",
  "libtype": "pypi",
  "id": "pypi_pyexcel_ods3",
  "homepage": "https://github.com/pyexcel/pyexcel-ods3",
  "release_count": 27,
  "dependency_ids": [
    "pypi_lxml",
    "pypi_pyexcel_ezodf",
    "pypi_pyexcel_io"
  ]
}
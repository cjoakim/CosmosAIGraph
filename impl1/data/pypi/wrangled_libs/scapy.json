{
  "classifiers": [
    "development status :: 5 - production/stable",
    "environment :: console",
    "intended audience :: developers",
    "intended audience :: information technology",
    "intended audience :: science/research",
    "intended audience :: system administrators",
    "intended audience :: telecommunications industry",
    "license :: osi approved :: gnu general public license v2 (gplv2)",
    "programming language :: python :: 2",
    "programming language :: python :: 2.7",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.4",
    "programming language :: python :: 3.5",
    "programming language :: python :: 3.6",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: security",
    "topic :: system :: networking",
    "topic :: system :: networking :: monitoring"
  ],
  "description": "# <img src=\"https://github.com/secdev/scapy/raw/master/doc/scapy/graphics/scapy_logo.png\" width=\"64\" valign=\"middle\" alt=\"scapy\" />&nbsp;&nbsp; scapy\n\n[![pypi version](https://img.shields.io/pypi/v/scapy.svg)](https://pypi.python.org/pypi/scapy/)\n[![license: gpl v2](https://img.shields.io/badge/license-gpl%20v2-blue.svg)](license)\n\nscapy is a powerful python-based interactive packet manipulation program and\nlibrary.\n\nit is able to forge or decode packets of a wide number of protocols, send them\non the wire, capture them, store or read them using pcap files, match requests\nand replies, and much more. it is designed to allow fast packet prototyping by\nusing default values that work.\n\nit can easily handle most classical tasks like scanning, tracerouting, probing,\nunit tests, attacks or network discovery (it can replace `hping`, 85% of `nmap`,\n`arpspoof`, `arp-sk`, `arping`, `tcpdump`, `wireshark`, `p0f`, etc.). it also\nperforms very well at a lot of other specific tasks that most other tools can't\nhandle, like sending invalid frames, injecting your own 802.11 frames, combining\ntechniques (vlan hopping+arp cache poisoning, voip decoding on wep protected\nchannel, ...), etc.\n\nscapy supports python 2.7 and python 3 (3.4 to 3.9). it's intended to\nbe cross platform, and runs on many different platforms (linux, osx,\n\\*bsd, and windows).\n\n## getting started\n\nscapy is usable either as a **shell** or as a **library**.\nfor further details, please head over to [getting started with scapy](https://scapy.readthedocs.io/en/latest/introduction.html), which is part of the documentation.\n\n### shell demo\n\n![scapy install demo](https://secdev.github.io/files/doc/animation-scapy-install.svg)\n\nscapy can easily be used as an interactive shell to interact with the network.\nthe following example shows how to send an icmp echo request message to\n`github.com`, then display the reply source ip address:\n\n```python\nsudo ./run_scapy\nwelcome to scapy\n>>> p = ip(dst=\"github.com\")/icmp()\n>>> r = sr1(p)\nbegin emission:\n.finished to send 1 packets.\n*\nreceived 2 packets, got 1 answers, remaining 0 packets\n>>> r[ip].src\n'192.30.253.113'\n```\n\n### resources\n\nthe [documentation](https://scapy.readthedocs.io/en/latest/) contains more\nadvanced use cases, and examples.\n\nother useful resources:\n\n-   [scapy in 20 minutes](https://github.com/secdev/scapy/blob/master/doc/notebooks/scapy%20in%2015%20minutes.ipynb)\n-   [interactive tutorial](https://scapy.readthedocs.io/en/latest/usage.html#interactive-tutorial) (part of the documentation)\n-   [the quick demo: an interactive session](https://scapy.readthedocs.io/en/latest/introduction.html#quick-demo)\n(some examples may be outdated)\n-   [http/2 notebook](https://github.com/secdev/scapy/blob/master/doc/notebooks/http_2_tuto.ipynb)\n-   [tls notebooks](https://github.com/secdev/scapy/blob/master/doc/notebooks/tls)\n\n## [installation](https://scapy.readthedocs.io/en/latest/installation.html)\n\nscapy works without any external python modules on linux and bsd like operating\nsystems. on windows, you need to install some mandatory dependencies as\ndescribed in [the\ndocumentation](http://scapy.readthedocs.io/en/latest/installation.html#windows).\n\non most systems, using scapy is as simple as running the following commands:\n\n```bash\ngit clone https://github.com/secdev/scapy\ncd scapy\n./run_scapy\n```\n\nto benefit from all scapy features, such as plotting, you might want to install\npython modules, such as `matplotlib` or `cryptography`. see the\n[documentation](http://scapy.readthedocs.io/en/latest/installation.html) and\nfollow the instructions to install them.\n\n",
  "docs_url": null,
  "keywords": "network",
  "license": "gpl-2.0-only",
  "name": "scapy",
  "package_url": "https://pypi.org/project/scapy/",
  "project_url": "https://pypi.org/project/scapy/",
  "project_urls": {
    "Documentation": "https://scapy.readthedocs.io",
    "Download": "https://github.com/secdev/scapy/tarball/master",
    "Homepage": "https://scapy.net",
    "Source Code": "https://github.com/secdev/scapy/"
  },
  "release_url": "https://pypi.org/project/scapy/2.5.0/",
  "requires_dist": [],
  "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, <4",
  "summary": "scapy: interactive packet manipulation tool",
  "version": "2.5.0",
  "releases": [],
  "developers": [
    "guillaume@valadon.net",
    "philippe_biondi",
    "pierre_lalet"
  ],
  "kwds": "scapy_logo scapy run_scapy pcap packets",
  "license_kwds": "gpl-2.0-only",
  "libtype": "pypi",
  "id": "pypi_scapy",
  "homepage": "https://scapy.net",
  "release_count": 25,
  "dependency_ids": []
}
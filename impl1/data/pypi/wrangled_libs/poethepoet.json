{
  "classifiers": [
    "license :: osi approved :: mit license",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.12",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: software development :: build tools"
  ],
  "description": "# poe the poet\n\n<img alt=\"poe the poet\" src=\"https://raw.githubusercontent.com/nat-n/poethepoet/main/docs/_static/poe_logo_x2000.png\" height=\"200\" width=\"200\" align=\"left\"/>\n\n[![pypi version](https://img.shields.io/pypi/pyversions/poethepoet.svg)](https://pypi.org/project/poethepoet/)\n[![pypi version](https://img.shields.io/pypi/v/poethepoet.svg)](https://pypi.org/project/poethepoet/)\n[![pypi version](https://img.shields.io/pypi/dw/poethepoet.svg)](https://pypistats.org/packages/poethepoet)\n[![pypi version](https://img.shields.io/pypi/l/ansicolortags.svg)](https://github.com/nat-n/poethepoet/blob/doc/init-sphinx/license)\n\n**a batteries included task runner that works well with [poetry](https://python-poetry.org/).**\n\n**[\ud83d\udcd6 read the documentation \ud83d\udcd6](https://poethepoet.natn.io/)**\n\n<br clear=\"both\"/>\n\n## features\n\n\n- \u2705 straight forward [declaration of project tasks in your pyproject.toml](https://poethepoet.natn.io/tasks/index.html)\n\n- \u2705 tasks are run in poetry's virtualenv ([or another env](https://poethepoet.natn.io/index.html#usage-without-poetry) you specify)\n\n- \u2705 [shell completion of task names](https://poethepoet.natn.io/installation.html#shell-completion) (and global options too for zsh)\n\n- \u2705 the poe cli can be used standalone, or as a [plugin for poetry](https://poethepoet.natn.io/poetry_plugin.html)\n\n- \u2705 tasks can be [commands](https://poethepoet.natn.io/tasks/task_types/cmd.html), [shell scripts](https://poethepoet.natn.io/tasks/task_types/shell.html), [python expressions](https://poethepoet.natn.io/tasks/task_types/expr.html), or references to [python functions](https://poethepoet.natn.io/tasks/task_types/script.html)\n\n- \u2705 concise commands with extra arguments passed to the task `poe [options] task [task_args]`\n\n- \u2705 easily [define cli arguments](https://poethepoet.natn.io/guides/args_guide.html) for your tasks\n\n- \u2705 tasks can specify and [reference environment variables](https://poethepoet.natn.io/tasks/task_types/cmd.html#ref-env-vars), even without a shell\n\n- \u2705 tasks are [self documenting](https://poethepoet.natn.io/guides/help_guide.html), with optional help messages (just run `poe` with no arguments)\n\n- \u2705 tasks can be composed into [sequences](https://poethepoet.natn.io/guides/composition_guide.html#composing-tasks-into-sequences) or [dags](https://poethepoet.natn.io/guides/composition_guide.html#composing-tasks-into-graphs)\n\n- \u2705 works with [`.env` files](https://poethepoet.natn.io/tasks/options.html#loading-environment-variables-from-an-env-file)\n\n- \u2705 can be [used as a library](https://poethepoet.natn.io/guides/library_guide.html) to embed in other tools\n\n\n## quick start\n\n1. install the poe the poet via [pipx](https://pypa.github.io/pipx/) or [another method](https://poethepoet.natn.io/installation.html).\n\n  ```sh\n  pipx install poethepoet\n  ```\n\n2. define some tasks in your **pyproject.toml**\n\n  ```toml\n  [tool.poe.tasks]\n  test         = \"pytest --cov=my_app\"                         # a simple command task\n  serve.script = \"my_app.service:run(debug=true)\"              # python script based task\n  tunnel.shell = \"ssh -n -l 0.0.0.0:8080:$prod:8080 $prod &\"   # (posix) shell based task\n  ```\n\n3. run your tasks via the cli\n\n  ```sh\n  $ poe test -v tests/unit # extra cli arguments are appended to the underlying command\n  poe => pytest --cov=my_app\n  ...\n  ```\n\nif you're using poetry, then poe will automatically use cli tools and libraries from your poetry managed virtualenv without you having to run `poetry run` or `poetry shell`\n\npoe can also be [used without poetry](https://poethepoet.natn.io/index.html#usage-without-poetry).\n\n## contributing\n\nthere's plenty to do, come say hi in the [discussions](https://github.com/nat-n/poethepoet/discussions) or [open an issue](https://github.com/nat-n/poethepoet/issues)! \ud83d\udc4b\n\nalso check out the [contributing guide](https://github.com/nat-n/poethepoet/blob/main/.github/contributing.rst) \ud83e\udd13\n\n\n## license\n\n[mit](https://github.com/nat-n/poethepoet/blob/main/license)\n\n",
  "docs_url": null,
  "keywords": "automation,tasks,task-runner,plugin,poetry,poe",
  "license": "mit",
  "name": "poethepoet",
  "package_url": "https://pypi.org/project/poethepoet/",
  "project_url": "https://pypi.org/project/poethepoet/",
  "project_urls": {
    "Documentation": "https://poethepoet.natn.io/",
    "Homepage": "https://github.com/nat-n/poethepoet",
    "Repository": "https://github.com/nat-n/poethepoet"
  },
  "release_url": "https://pypi.org/project/poethepoet/0.24.4/",
  "requires_dist": [
    "pastel (>=0.2.1,<0.3.0)",
    "poetry (>=1.0,<2.0) ; extra == \"poetry-plugin\"",
    "tomli (>=1.2.2)"
  ],
  "requires_python": ">=3.8",
  "summary": "a task runner that works well with poetry.",
  "version": "0.24.4",
  "releases": [],
  "developers": [
    "n@noordan.us",
    "nat_noordanus"
  ],
  "kwds": "poethepoet poetry_plugin poe_logo_x2000 poe poet",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_poethepoet",
  "homepage": "https://github.com/nat-n/poethepoet",
  "release_count": 52,
  "dependency_ids": [
    "pypi_pastel",
    "pypi_poetry",
    "pypi_tomli"
  ]
}
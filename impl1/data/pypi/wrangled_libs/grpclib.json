{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: developers",
    "license :: osi approved :: bsd license",
    "operating system :: os independent",
    "programming language :: python",
    "programming language :: python :: 3 :: only",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: internet :: www/http :: http servers",
    "topic :: software development :: libraries :: python modules"
  ],
  "description": "pure-python grpc implementation for asyncio\n===========================================\n\n.. image:: https://raw.githubusercontent.com/vshymanskyy/standwithukraine/7e1631d13476f1e870af0d5605b643fc14471a6d/banner-direct-single.svg\n  :target: https://standforukraine.com\n\n|project|_ |documentation|_ |version|_ |tag|_ |downloads|_ |license|_\n\nthis project is based on `hyper-h2`_ and **requires python >= 3.7**.\n\n.. contents::\n  :local:\n\nexample\n~~~~~~~\n\nsee `examples`_ directory in the project's repository for all available\nexamples.\n\nclient\n------\n\n.. code-block:: python3\n\n  import asyncio\n\n  from grpclib.client import channel\n\n  # generated by protoc\n  from .helloworld_pb2 import hellorequest, helloreply\n  from .helloworld_grpc import greeterstub\n\n\n  async def main():\n      async with channel('127.0.0.1', 50051) as channel:\n          greeter = greeterstub(channel)\n\n          reply = await greeter.sayhello(hellorequest(name='dr. strange'))\n          print(reply.message)\n\n\n  if __name__ == '__main__':\n      asyncio.run(main())\n\nserver\n------\n\n.. code-block:: python3\n\n  import asyncio\n\n  from grpclib.utils import graceful_exit\n  from grpclib.server import server\n\n  # generated by protoc\n  from .helloworld_pb2 import helloreply\n  from .helloworld_grpc import greeterbase\n\n\n  class greeter(greeterbase):\n\n      async def sayhello(self, stream):\n          request = await stream.recv_message()\n          message = f'hello, {request.name}!'\n          await stream.send_message(helloreply(message=message))\n\n\n  async def main(*, host='127.0.0.1', port=50051):\n      server = server([greeter()])\n      # note: graceful_exit isn't supported in windows\n      with graceful_exit([server]):\n          await server.start(host, port)\n          print(f'serving on {host}:{port}')\n          await server.wait_closed()\n\n\n  if __name__ == '__main__':\n      asyncio.run(main())\n\ninstallation\n~~~~~~~~~~~~\n\n.. code-block:: console\n\n  $ pip3 install \"grpclib[protobuf]\"\n\nbug fixes and new features are frequently published via release candidates:\n\n.. code-block:: console\n\n  $ pip3 install --upgrade --pre \"grpclib[protobuf]\"\n\nfor the code generation you will also need a ``protoc`` compiler, which can be\ninstalled with ``protobuf`` system package:\n\n.. code-block:: console\n\n  $ brew install protobuf  # example for macos users\n  $ protoc --version\n  libprotoc ...\n\n\n**or** you can use ``protoc`` compiler from the ``grpcio-tools`` python package:\n\n.. code-block:: console\n\n  $ pip3 install grpcio-tools\n  $ python3 -m grpc_tools.protoc --version\n  libprotoc ...\n\n**note:** ``grpcio`` and ``grpcio-tools`` packages are **not required in\nruntime**, ``grpcio-tools`` package will be used only during code generation.\n\n``protoc`` plugin\n~~~~~~~~~~~~~~~~~\n\nin order to use this library you will have to generate special stub files using\nplugin provided, which can be used like this:\n\n.. code-block:: console\n\n  $ python3 -m grpc_tools.protoc -i. --python_out=. --grpclib_python_out=. helloworld/helloworld.proto\n                                                      ^----- note -----^\n\nthis command will generate ``helloworld_pb2.py`` and ``helloworld_grpc.py``\nfiles.\n\nplugin which implements ``--grpclib_python_out`` option should be available for\nthe ``protoc`` compiler as the ``protoc-gen-grpclib_python`` executable which\nshould be installed by ``pip`` into your ``$path`` during installation of the\n``grpclib`` library.\n\nchanged in v0.3.2: ``--python_grpc_out`` option was renamed into\n``--grpclib_python_out``.\n\ncontributing\n~~~~~~~~~~~~\n\n* please submit an issue before working on a pull request\n* do not merge/squash/rebase your development branch while you work on a pull\n  request, use rebase if this is really necessary\n* you may use tox_ in order to test and lint your changes, but it is ok to rely\n  on ci for this matter\n\n.. _grpc: http://www.grpc.io\n.. _hyper-h2: https://github.com/python-hyper/hyper-h2\n.. _grpcio: https://pypi.org/project/grpcio/\n.. _tox: https://tox.readthedocs.io/\n.. _examples: https://github.com/vmagamedov/grpclib/tree/master/examples\n.. |version| image:: https://img.shields.io/pypi/v/grpclib.svg?label=stable&color=blue\n.. _version: https://pypi.org/project/grpclib/\n.. |license| image:: https://img.shields.io/pypi/l/grpclib.svg?color=blue\n.. _license: https://github.com/vmagamedov/grpclib/blob/master/license.txt\n.. |tag| image:: https://img.shields.io/github/tag/vmagamedov/grpclib.svg?label=latest&color=blue\n.. _tag: https://pypi.org/project/grpclib/#history\n.. |project| image:: https://img.shields.io/badge/vmagamedov%2fgrpclib-blueviolet.svg?logo=github&color=blue\n.. _project: https://github.com/vmagamedov/grpclib\n.. |documentation| image:: https://img.shields.io/badge/docs-grpclib.rtfd.io-blue.svg\n.. _documentation: https://grpclib.readthedocs.io/en/latest/\n.. |downloads| image:: https://static.pepy.tech/badge/grpclib/month\n.. _downloads: https://pepy.tech/project/grpclib",
  "docs_url": null,
  "keywords": "",
  "license": "bsd-3-clause",
  "name": "grpclib",
  "package_url": "https://pypi.org/project/grpclib/",
  "project_url": "https://pypi.org/project/grpclib/",
  "project_urls": {
    "Homepage": "https://github.com/vmagamedov/grpclib"
  },
  "release_url": "https://pypi.org/project/grpclib/0.4.6/",
  "requires_dist": [],
  "requires_python": ">=3.7",
  "summary": "pure-python grpc implementation for asyncio",
  "version": "0.4.6",
  "releases": [],
  "developers": [
    "vladimir@magamedov.com",
    "vladimir_magamedov"
  ],
  "kwds": "grpclib_python grpc_tools grpclib grpclib_python_out python_grpc_out",
  "license_kwds": "bsd-3-clause",
  "libtype": "pypi",
  "id": "pypi_grpclib",
  "homepage": "https://github.com/vmagamedov/grpclib",
  "release_count": 51,
  "dependency_ids": []
}
{
  "classifiers": [
    "programming language :: python :: 3"
  ],
  "description": "************\nautoclasstoc\n************\n\n.. image:: https://img.shields.io/pypi/v/autoclasstoc.svg\n   :target: https://pypi.python.org/pypi/autoclasstoc\n\n.. image:: https://img.shields.io/pypi/pyversions/autoclasstoc.svg\n   :target: https://pypi.python.org/pypi/autoclasstoc\n\n.. image:: https://img.shields.io/readthedocs/autoclasstoc.svg\n   :target: https://autoclasstoc.readthedocs.io/en/latest/?badge=latest\n\nit's surprisingly difficult to document large python classes in a way that's \neasy for users to navigate.  most projects use the ``autodoc`` sphinx plugin, \nwhich simply puts the complete documentation for each class member one after \nanother.  while this does fully document the class, it doesn't give the user a \nquick way to see everything the class can do.  this makes classes of even \nmoderate complexity difficult to navigate.  it also encourages projects to be \nstingy about which class members to include in the documentation (e.g.  \nexcluding special methods, inherited methods, private methods, and/or \nundocumented methods), to the further detriment of the user.\n\nwhat's needed is for each class to have a succinct table of contents (toc) \nthat:\n\n- is organized into sections that will be meaningful to the user.  different \n  projects and classes may call for different sections, e.g. public/private \n  methods, methods that share a decorator, methods with a common prefix, etc.  \n\n- includes every method of the class (so that the documentation is complete), \n  while still making it easy for the user to get a sense for what the class \n  does and find what they're looking for.\n\n- collapses inherited methods.  complex classes in particular can inherit a lot \n  of methods from their parent classes, and while these methods should be \n  present in the toc (since they're part of the class), collapsing them makes \n  it easier for the user to grok the functionality provided by the class \n  itself.\n\n``autoclasstoc`` provides a new restructured text directive that is all of \nthese things.  it also works well with ``autodoc`` and ``autogen``, and should \nbe easy to incorporate into any existing project. \n\nsee the `complete documentation`__ for more information (including examples).\n\n__ https://autoclasstoc.readthedocs.io/en/latest\n\n\n",
  "docs_url": null,
  "keywords": "",
  "license": "",
  "name": "autoclasstoc",
  "package_url": "https://pypi.org/project/autoclasstoc/",
  "project_url": "https://pypi.org/project/autoclasstoc/",
  "project_urls": {
    "Bug Tracker": "https://github.com/kalekundert/autoclasstoc/issues",
    "Continuous Integration": "https://github.com/kalekundert/autoclasstoc/actions",
    "Documentation": "https://autoclasstoc.readthedocs.io/en/latest/",
    "Test Coverage": "https://coveralls.io/github/kalekundert/autoclasstoc",
    "Version Control": "https://github.com/kalekundert/autoclasstoc"
  },
  "release_url": "https://pypi.org/project/autoclasstoc/1.6.0/",
  "requires_dist": [
    "sphinx>=3.0",
    "docutils",
    "more_itertools",
    "sphinx>=3.1 ; extra == \"docs\"",
    "sphinx_rtd_theme ; extra == \"docs\"",
    "pytest ; extra == \"tests\"",
    "parametrize_from_file ; extra == \"tests\"",
    "re_assert ; extra == \"tests\"",
    "pytest_tmp_files ; extra == \"tests\"",
    "lxml ; extra == \"tests\"",
    "coverage[toml] ; extra == \"tests\""
  ],
  "requires_python": ">=3.6",
  "summary": "add a succinct toc to auto-documented classes.",
  "version": "1.6.0",
  "releases": [],
  "developers": [
    "kale@thekunderts.net"
  ],
  "kwds": "autoclasstoc classes pyversions autodoc sphinx",
  "license_kwds": "",
  "libtype": "pypi",
  "id": "pypi_autoclasstoc",
  "homepage": "",
  "release_count": 12,
  "dependency_ids": [
    "pypi_coverage",
    "pypi_docutils",
    "pypi_lxml",
    "pypi_more_itertools",
    "pypi_parametrize_from_file",
    "pypi_pytest",
    "pypi_pytest_tmp_files",
    "pypi_re_assert",
    "pypi_sphinx",
    "pypi_sphinx_rtd_theme"
  ]
}
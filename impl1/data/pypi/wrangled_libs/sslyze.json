{
  "classifiers": [
    "development status :: 4 - beta",
    "intended audience :: developers",
    "intended audience :: system administrators",
    "license :: osi approved :: gnu affero general public license v3",
    "natural language :: french",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: security",
    "topic :: system :: monitoring",
    "topic :: system :: networking",
    "topic :: system :: networking :: monitoring"
  ],
  "description": "sslyze\n======\n\n![run tests](https://github.com/nabla-c0d3/sslyze/workflows/run%20tests/badge.svg)\n[![downloads](https://pepy.tech/badge/sslyze/month)](https://pepy.tech/project/sslyze)\n[![pypi version](https://img.shields.io/pypi/v/sslyze.svg)](https://pypi.org/project/sslyze/)\n[![python version](https://img.shields.io/pypi/pyversions/sslyze.svg)](https://pypi.org/project/sslyze/)\n\nsslyze is a fast and powerful ssl/tls scanning tool and python library.\n\nsslyze can analyze the ssl/tls configuration of a server by connecting to it, in order to ensure that it uses strong\nencryption settings (certificate, cipher suites, elliptic curves, etc.), and that it is not vulnerable to known tls\nattacks (heartbleed, robot, openssl ccs injection, etc.).\n\nkey features\n------------\n\n* focus on speed and reliability: sslyze is a battle-tested tool that is used to reliably scan **hundreds of thousands**\nof servers every day.\n* easy to operationalize: sslyze can be directly run from ci/cd, in order to continuously check a server against \nmozilla's recommended tls configuration.\n* fully documented [python api](https://nabla-c0d3.github.io/sslyze/documentation/) to run scans directly from any\npython application, such as a function deployed to aws lambda.\n* support for scanning non-http servers including smtp, xmpp, ldap, pop, imap, rdp, postgres and ftp servers.\n* results of a scan can easily be saved to a json file for later processing.\n* and much more!\n\nquick start\n-----------\n\non windows, linux (x86 or x64) and macos, sslyze can be installed directly via pip:\n\n```\n$ pip install --upgrade pip setuptools wheel\n$ pip install --upgrade sslyze\n$ python -m sslyze www.yahoo.com www.google.com \"[2607:f8b0:400a:807::2004]:443\"\n```\n\nit can also be used via docker:\n\n```\n$ docker run --rm -it nablac0d3/sslyze:5.0.0 www.google.com\n```\n\nlastly, a pre-compiled windows executable can be downloaded from [the releases\npage](https://github.com/nabla-c0d3/sslyze/releases).\n\npython api documentation\n------------------------\n\ndocumentation for sslyze's python api is [available here][documentation].\n\nusage as a ci/cd step\n---------------------\n\nby default, sslyze will check the server's scan results against mozilla's recommended [\"intermediate\" tls\nconfiguration](https://wiki.mozilla.org/security/server_side_tls), and will return a non-zero exit code if the server\nis not compliant. \n\n```\n$ python -m sslyze mozilla.com\n```\n```\nchecking results against mozilla's \"intermediate\" configuration. see https://ssl-config.mozilla.org/ for more details.\n\nmozilla.com:443: ok - compliant.\n```\n\nthe mozilla configuration to check against can be configured via `--mozilla_config={old, intermediate, modern}`:\n```\n$ python -m sslyze --mozilla_config=modern mozilla.com\n```\n```\nchecking results against mozilla's \"modern\" configuration. see https://ssl-config.mozilla.org/ for more details.\n\nmozilla.com:443: failed - not compliant.\n    * certificate_types: deployed certificate types are {'rsa'}, should have at least one of {'ecdsa'}.\n    * certificate_signatures: deployed certificate signatures are {'sha256withrsaencryption'}, should have at least one of {'ecdsa-with-sha512', 'ecdsa-with-sha256', 'ecdsa-with-sha384'}.\n    * tls_versions: tls versions {'tlsv1.2'} are supported, but should be rejected.\n    * ciphers: cipher suites {'tls_ecdhe_rsa_with_aes_256_gcm_sha384', 'tls_ecdhe_rsa_with_chacha20_poly1305_sha256', 'tls_ecdhe_rsa_with_aes_128_gcm_sha256'} are supported, but should be rejected.\n```\n\nthis can be used to easily run an sslyze scan as a ci/cd step.\n\ndevelopment environment\n-----------------------\n\nto setup a development environment:\n\n```\n$ pip install --upgrade pip setuptools wheel\n$ pip install -e . \n$ pip install -r requirements-dev.txt\n```\n\nthe tests can then be run using:\n\n```\n$ invoke test\n```\n\nlicense\n-------\n\ncopyright (c) 2023 alban diquet\n\nsslyze is made available under the terms of the gnu affero general public license (agpl). see license.txt for details and exceptions.\n\n[documentation]: https://nabla-c0d3.github.io/sslyze/documentation\n",
  "docs_url": null,
  "keywords": "ssl tls scan security library",
  "license": "agpl",
  "name": "sslyze",
  "package_url": "https://pypi.org/project/sslyze/",
  "project_url": "https://pypi.org/project/sslyze/",
  "project_urls": {
    "Changelog": "https://github.com/nabla-c0d3/sslyze/releases",
    "Documentation": "https://nabla-c0d3.github.io/sslyze/documentation",
    "Homepage": "https://github.com/nabla-c0d3/sslyze",
    "Source": "https://github.com/nabla-c0d3/sslyze"
  },
  "release_url": "https://pypi.org/project/sslyze/5.2.0/",
  "requires_dist": [],
  "requires_python": ">=3.7",
  "summary": "fast and powerful ssl/tls scanning library.",
  "version": "5.2.0",
  "releases": [],
  "developers": [
    "alban_diquet",
    "nabla.c0d3@gmail.com"
  ],
  "kwds": "sslyze ssl server_side_tls openssl tls_versions",
  "license_kwds": "agpl",
  "libtype": "pypi",
  "id": "pypi_sslyze",
  "homepage": "https://github.com/nabla-c0d3/sslyze",
  "release_count": 67,
  "dependency_ids": []
}
{
  "classifiers": [
    "license :: osi approved :: mit license",
    "operating system :: os independent",
    "programming language :: python :: 3",
    "programming language :: python :: 3.6",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9"
  ],
  "description": "# [mergedeep](https://mergedeep.readthedocs.io/en/latest/)\n\n[![pypi release](https://img.shields.io/pypi/v/mergedeep.svg)](https://pypi.org/project/mergedeep/)\n[![pypi versions](https://img.shields.io/pypi/pyversions/mergedeep.svg)](https://pypi.org/project/mergedeep/)\n[![downloads](https://pepy.tech/badge/mergedeep)](https://pepy.tech/project/mergedeep)\n[![conda version](https://img.shields.io/conda/vn/conda-forge/mergedeep.svg)](https://anaconda.org/conda-forge/mergedeep)\n[![conda downloads](https://img.shields.io/conda/dn/conda-forge/mergedeep.svg)](https://anaconda.org/conda-forge/mergedeep)\n[![documentation status](https://readthedocs.org/projects/mergedeep/badge/?version=latest)](https://mergedeep.readthedocs.io/en/latest/?badge=latest)\n\na deep merge function for \ud83d\udc0d.\n\n[check out the mergedeep docs](https://mergedeep.readthedocs.io/en/latest/)\n\n## installation\n\n```bash\n$ pip install mergedeep\n```\n\n## usage\n\n```text\nmerge(destination: mutablemapping, *sources: mapping, strategy: strategy = strategy.replace) -> mutablemapping\n```\n\ndeep merge without mutating the source dicts.\n\n```python3\nfrom mergedeep import merge\n\na = {\"keya\": 1}\nb = {\"keyb\": {\"sub1\": 10}}\nc = {\"keyb\": {\"sub2\": 20}}\n\nmerged = merge({}, a, b, c) \n\nprint(merged)\n# {\"keya\": 1, \"keyb\": {\"sub1\": 10, \"sub2\": 20}}\n```\n\ndeep merge into an existing dict.\n```python3\nfrom mergedeep import merge\n\na = {\"keya\": 1}\nb = {\"keyb\": {\"sub1\": 10}}\nc = {\"keyb\": {\"sub2\": 20}}\n\nmerge(a, b, c) \n\nprint(a)\n# {\"keya\": 1, \"keyb\": {\"sub1\": 10, \"sub2\": 20}}\n```\n\n### merge strategies:\n\n1. replace (*default*)\n\n> `strategy.replace`\n\n```python3\n# when `destination` and `source` keys are the same, replace the `destination` value with one from `source` (default).\n\n# note: with multiple sources, the `last` (i.e. rightmost) source value will be what appears in the merged result. \n\nfrom mergedeep import merge, strategy\n\ndst = {\"key\": [1, 2]}\nsrc = {\"key\": [3, 4]}\n\nmerge(dst, src, strategy=strategy.replace) \n# same as: merge(dst, src)\n\nprint(dst)\n# {\"key\": [3, 4]}\n```\n\n2. additive\n\n> `strategy.additive`\n\n```python3\n# when `destination` and `source` values are both the same additive collection type, extend `destination` by adding values from `source`.\n# additive collection types include: `list`, `tuple`, `set`, and `counter`\n\n# note: if the values are not additive collections of the same type, then fallback to a `replace` merge.\n\nfrom mergedeep import merge, strategy\n\ndst = {\"key\": [1, 2], \"count\": counter({\"a\": 1, \"b\": 1})}\nsrc = {\"key\": [3, 4], \"count\": counter({\"a\": 1, \"c\": 1})}\n\nmerge(dst, src, strategy=strategy.additive) \n\nprint(dst)\n# {\"key\": [1, 2, 3, 4], \"count\": counter({\"a\": 2, \"b\": 1, \"c\": 1})}\n```\n\n3. typesafe replace\n\n> `strategy.typesafe_replace` or `strategy.typesafe`\n\n```python3\n# when `destination` and `source` values are of different types, raise `typeerror`. otherwise, perform a `replace` merge.\n\nfrom mergedeep import merge, strategy\n\ndst = {\"key\": [1, 2]}\nsrc = {\"key\": {3, 4}}\n\nmerge(dst, src, strategy=strategy.typesafe_replace) # same as: `strategy.typesafe`  \n# typeerror: destination type: <class 'list'> differs from source type: <class 'set'> for key: \"key\"\n```\n\n4. typesafe additive\n\n> `strategy.typesafe_additive`\n\n```python3\n# when `destination` and `source` values are of different types, raise `typeerror`. otherwise, perform a `additive` merge.\n\nfrom mergedeep import merge, strategy\n\ndst = {\"key\": [1, 2]}\nsrc = {\"key\": {3, 4}}\n\nmerge(dst, src, strategy=strategy.typesafe_additive) \n# typeerror: destination type: <class 'list'> differs from source type: <class 'set'> for key: \"key\"\n```\n\n## license\n\nmit &copy; [**travis clarke**](https://blog.travismclarke.com/)\n\n\n",
  "docs_url": null,
  "keywords": "",
  "license": "",
  "name": "mergedeep",
  "package_url": "https://pypi.org/project/mergedeep/",
  "project_url": "https://pypi.org/project/mergedeep/",
  "project_urls": {
    "Homepage": "https://github.com/clarketm/mergedeep"
  },
  "release_url": "https://pypi.org/project/mergedeep/1.3.4/",
  "requires_dist": [],
  "requires_python": ">=3.6",
  "summary": "a deep merge function for \ud83d\udc0d.",
  "version": "1.3.4",
  "releases": [],
  "developers": [
    "travis.m.clarke@gmail.com",
    "travis_clarke"
  ],
  "kwds": "mergedeep merged merge downloads versions",
  "license_kwds": "",
  "libtype": "pypi",
  "id": "pypi_mergedeep",
  "homepage": "https://github.com/clarketm/mergedeep",
  "release_count": 13,
  "dependency_ids": []
}
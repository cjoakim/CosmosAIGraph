{
  "classifiers": [
    "license :: osi approved :: mit license",
    "operating system :: os independent",
    "programming language :: python :: 3"
  ],
  "description": "# khanaa\n\nkhanaa is a tool to make spelling thai more convenient.\n\n## installation\n\nfor python >=3.7\n\n```\npip install khanaa\n```\n\n## usage\n\n```python\nfrom khanaa import spellword, find_letter_list\n\nbasic_example = {\n    'onset': '\u0e01', # can be more than one (required)\n    'vowel': '\u0e2d\u0e32', # include vowel with \u0e22, \u0e27 coda ex. \u0e40\u0e2d\u0e35\u0e22\u0e27 (required)\n    'silent_before': '', # silent character before coda\n    'coda': '', # don't put \u0e22, \u0e27 here (put them together with vowel)\n    'silent_after': '', # silent character after coda\n    'tone': -1  # -1 not specific, 0 \u0e2a\u0e32\u0e21\u0e31\u0e0d, 1 \u0e40\u0e2d\u0e01, 2 \u0e42\u0e17, 3 \u0e15\u0e23\u0e35, 4 \u0e08\u0e31\u0e15\u0e27\u0e32\n    }\nspell = spellword()\nspell.spell_out(**basic_example)\n# => '\u0e01\u0e32'\n\n# five tones at once\nspell.all_tone(**basic_example)\n# => ['\u0e01\u0e32', '\u0e01\u0e48\u0e32', '\u0e01\u0e49\u0e32', '\u0e01\u0e4a\u0e32', '\u0e01\u0e4b\u0e32']\n\n# \u0e22, \u0e27 coda\nspell.spell_out(onset='\u0e25', vowel='\u0e2d\u0e32\u0e22')\n# => '\u0e25\u0e32\u0e22'\n\n# onset cluster\nspell.spell_out(onset='\u0e01\u0e25', vowel='\u0e2d\u0e30', coda='\u0e19', tone=1)\n# => '\u0e01\u0e25\u0e31\u0e48\u0e19'\n\nspell.spell_out(onset='\u0e2a\u0e15', vowel='\u0e40\u0e2d\u0e30', coda='\u0e01', tone=3)\n# => '\u0e2a\u0e40\u0e15\u0e4a\u0e01'\n\n# silent character\nspell.spell_out(onset='\u0e0c', vowel='\u0e2d\u0e34', coda='\u0e19', silent_after='\u0e2a\u0e01')\n# => '\u0e0c\u0e34\u0e19\u0e2a\u0e01\u0e4c'\n\n# can be customised (ex. add phinthu)\nphinthu_spell = spellword(onset_style='phinthu')\nphinthu_spell.all_tone(onset='\u0e0b\u0e22', vowel='\u0e2d\u0e32')\n# => ['\u0e0b\u0e3a\u0e22\u0e32', '\u0e2a\u0e3a\u0e22\u0e48\u0e32', '\u0e0b\u0e3a\u0e22\u0e48\u0e32', '\u0e0b\u0e3a\u0e22\u0e49\u0e32', '\u0e2a\u0e3a\u0e22\u0e32']\n\n# use short length for vowel\nshort_spell = spellword(vowel_length='short')\nshort_spell.spell_out(onset='\u0e1b', vowel='\u0e2d\u0e32\u0e22')\n# => '\u0e44\u0e1b'\n\n# find all available consonants, vowels and true clusters in khanaa\nfind_letter_list()\n```\n\n## license\n\nmit\n",
  "docs_url": null,
  "keywords": "",
  "license": "",
  "name": "khanaa",
  "package_url": "https://pypi.org/project/khanaa/",
  "project_url": "https://pypi.org/project/khanaa/",
  "project_urls": {
    "Bug Tracker": "https://github.com/cakimpei/khanaa/issues",
    "Homepage": "https://github.com/cakimpei/khanaa"
  },
  "release_url": "https://pypi.org/project/khanaa/0.0.6/",
  "requires_dist": [],
  "requires_python": ">=3.7",
  "summary": "a python tool for spelling thai",
  "version": "0.0.6",
  "releases": [],
  "developers": [
    "cakimpei",
    "cakimpei@gmail.com"
  ],
  "kwds": "\u0e2d\u0e32\u0e22 \u0e01\u0e32 \u0e2d\u0e32 \u0e01\u0e25 \u0e15\u0e27\u0e32",
  "license_kwds": "",
  "libtype": "pypi",
  "id": "pypi_khanaa",
  "homepage": "https://github.com/cakimpei/khanaa",
  "release_count": 3,
  "dependency_ids": []
}
{
  "classifiers": [
    "development status :: 4 - beta",
    "environment :: console",
    "intended audience :: developers",
    "intended audience :: end users/desktop",
    "intended audience :: information technology",
    "intended audience :: other audience",
    "license :: osi approved :: mit license",
    "operating system :: macos",
    "operating system :: microsoft :: windows :: windows 10",
    "operating system :: microsoft :: windows :: windows 11",
    "operating system :: posix :: linux",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: software development :: documentation"
  ],
  "description": "\n<p align=\"center\">\n    <img src=\"https://github.com/textualize/trogon/assets/554369/f4751783-c322-4143-a6c1-d8c564d4e38f\" alt=\"a picture of a trogon (bird) sitting on a laptop\" width=\"300\" align=\"center\">\n</p>\n    \n[![discord](https://img.shields.io/discord/1026214085173461072)](https://discord.gg/enf6z3qhvr)\n\n\n# trogon\n\nauto-generate friendly terminal user interfaces for command line apps.\n\n\n<details>  \n  <summary> \ud83c\udfac video demonstration </summary>\n\n&nbsp;\n    \na quick tour of a trogon app applied to [sqlite-utils](https://github.com/simonw/sqlite-utils).\n\nhttps://github.com/textualize/trogon/assets/554369/c9e5dabb-5624-45cb-8612-f6ecfde70362\n\n</details>\n\n\ntrogon works with the popular [click](https://click.palletsprojects.com/) library for python, but will support other libraries and languages in the future.\n\n## how it works\n\ntrogon inspects your (command line) app and extracts a *schema* which describes the options / switches / help etc.\nit then uses that information to build a [textual](https://github.com/textualize/textual) ui you can use to edit and run the command. \n\nultimately we would like to formalize this schema and a protocol to extract or expose it from apps.\nthis which would allow trogon to build tuis for any cli app, regardless of how it was built.\nif you are familiar with swagger, think swagger for clis.\n\n## screenshots\n\n<table>\n\n<tr>\n<td>\n<img width=\"100%\" alt=\"screenshot 2023-05-20 at 12 07 31\" src=\"https://github.com/textualize/trogon/assets/554369/009cf3f2-f0c4-464b-bd74-60e303864443\">\n</td>\n\n<td>\n<img width=\"100%\" alt=\"screenshot 2023-05-20 at 12 08 21\" src=\"https://github.com/textualize/trogon/assets/554369/b1039ee6-4ba6-4123-b0dd-aa7b2341672f\">\n</td>\n</tr>\n\n<tr>\n\n<td>\n<img width=\"100%\" alt=\"screenshot 2023-05-20 at 12 08 53\" src=\"https://github.com/textualize/trogon/assets/554369/c0a42277-e946-4bef-b0d0-3fa87e4ab55b\">\n</td>\n\n<td>\n<img width=\"100%\" alt=\"screenshot 2023-05-20 at 12 09 47\" src=\"https://github.com/textualize/trogon/assets/554369/55477f6c-e6b8-49b6-85c1-b01bee006c8e\">\n</td>\n\n</tr>\n\n</table>\n\n## why?\n\ncommand line apps reward repeated use, but they lack in *discoverability*.\nif you don't use a cli app frequently, or there are too many options to commit to memory, a trogon tui interface can help you (re)discover options and switches.\n\n## what does the name mean?\n\nthis project started life as a [textual](https://github.com/textualize/textual) experiment, which we have been giving give bird's names to.\na [trogon](https://www.willmcgugan.com/blog/photography/post/costa-rica-trip-report-2017/#bird) is a beautiful bird i was lucky enough to photograph in 2017.\n\nsee also [frogmouth](https://github.com/textualize/frogmouth), a markdown browser for the terminal.\n\n## roadmap\n\ntrogon is usable now. it is only 2 lines (!) of code to add to an existing project.\n\nit is still in an early stage of development, and we have lots of improvements planned for it.\n\n## installing\n\ntrogon may be installed with pypi.\n\n```bash\npip install trogon\n```\n\n## quickstart\n\n1. import `from trogon import tui`\n2. add the `@tui` decorator above your click app. e.g.\n    ```python\n    @tui()\n    @click.group(...)\n    def cli():\n        ...\n    ```\n3. your click app will have a new `tui` command available.\n\nsee also the `examples` folder for two example apps.\n\n## custom command name and custom help\n\nby default the command added will be called `tui` and the help text for it will be `open textual tui.`\n\nyou can customize one or both of these using the `help=` and `command=` parameters:\n\n```python\n@tui(command=\"ui\", help=\"open terminal ui\")\n@click.group(...)\ndef cli():\n    ...\n```\n\n## follow this project\n\nif this app interests you, you may want to join the textual [discord server](https://discord.gg/enf6z3qhvr) where you can talk to textual developers / community.\n",
  "docs_url": null,
  "keywords": "",
  "license": "mit",
  "name": "trogon",
  "package_url": "https://pypi.org/project/trogon/",
  "project_url": "https://pypi.org/project/trogon/",
  "project_urls": {
    "Homepage": "https://github.com/Textualize/trogon"
  },
  "release_url": "https://pypi.org/project/trogon/0.5.0/",
  "requires_dist": [
    "textual (>=0.26.0)",
    "click (>=8.0.0)"
  ],
  "requires_python": ">=3.7,<4.0",
  "summary": "automatically generate a textual tui for your click cli",
  "version": "0.5.0",
  "releases": [],
  "developers": [
    "darren_burns",
    "darrenb900@gmail.com"
  ],
  "kwds": "trogon discord sqlite terminal tr",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_trogon",
  "homepage": "https://github.com/textualize/trogon",
  "release_count": 6,
  "dependency_ids": [
    "pypi_click",
    "pypi_textual"
  ]
}
{
  "classifiers": [
    "development status :: 4 - beta",
    "environment :: console",
    "intended audience :: developers",
    "intended audience :: end users/desktop",
    "intended audience :: science/research",
    "license :: osi approved :: gnu general public license v3 or later (gplv3+)",
    "operating system :: macos :: macos x",
    "operating system :: microsoft :: windows",
    "operating system :: posix",
    "programming language :: c++",
    "programming language :: python",
    "topic :: scientific/engineering :: information analysis",
    "topic :: scientific/engineering :: mathematics",
    "topic :: sociology"
  ],
  "description": "leidenalg\n==============\n\nthis package implements the leiden algorithm in ``c++`` and exposes it to\n``python``.  it relies on ``(python-)igraph`` for it to function. besides the\nrelative flexibility of the implementation, it also scales well, and can be run\non graphs of millions of nodes (as long as they can fit in memory). the core\nfunction is ``find_partition`` which finds the optimal partition using the\nleiden algorithm [1]_, which is an extension of the louvain algorithm [2]_ for a\nnumber of different methods. the methods currently implemented are (1)\nmodularity [3]_, (2) reichardt and bornholdt's model using the configuration\nnull model and the erd\u00f6s-r\u00e9nyi null model [4]_, (3) the constant potts model\n(cpm) [5]_, (4) significance [6]_, and finally (5) surprise [7]_. in addition,\nit supports multiplex partition optimisation allowing community detection on for\nexample negative links [8]_ or multiple time slices [9]_. there is the\npossibility of only partially optimising a partition, so that some community\nassignments remain fixed [10]_. it also provides some support for community\ndetection on bipartite graphs. see the `documentation\n<http://leidenalg.readthedocs.io/en/latest/>`_ for more information.\n\n\n.. image:: https://readthedocs.org/projects/leidenalg/badge\n                :target: http://leidenalg.readthedocs.io/en/latest/\n                :alt: leiden documentation status\n\n.. image:: https://github.com/vtraag/leidenalg/actions/workflows/build.yml/badge.svg?branch=master\n                :target: https://github.com/vtraag/leidenalg/actions/workflows/build.yml\n                :alt: leiden build status (github actions)\n\n.. image:: https://zenodo.org/badge/146722095.svg\n                :target: https://zenodo.org/badge/latestdoi/146722095\n                :alt: doi\n\n.. image:: https://anaconda.org/conda-forge/leidenalg/badges/version.svg\n                :target: https://anaconda.org/conda-forge/leidenalg\n                :alt: anaconda (conda-forge)\n\ninstallation\n------------\n\nin short: ``pip install leidenalg``. all major platforms are supported on\npython>=3.6, earlier versions of python are no longer supported. alternatively,\nyou can install from anaconda (channel ``conda-forge``).\n\nfor unix like systems it is possible to install from source. for windows this is\nmore complicated, and you are recommended to use the binary wheels. this python\ninterface depends on the c++ package ``libleidenalg`` which in turn depends on\n``igraph``. you will need to build these packages yourself before you are able\nto build this python interface.\n\nmake sure you have all necessary tools for compilation. in ubuntu this can be\ninstalled using ``sudo apt-get install build-essential autoconf automake flex\nbison``, please refer to the documentation for your specific system.  make sure\nthat not only ``gcc`` is installed, but also ``g++``, as the ``leidenalg``\npackage is programmed in ``c++``. note that there are build scripts included in\nthe ``scripts/`` directory. these are also used to build the binary wheels.\n\n1. compile (and install) the c core of ``igraph`` (version >= 0.10). you can use\n   the file ``build_igraph.sh`` (on unix-like systems) or ``build_igraph.bat``\n   (on windows) in the ``scripts/`` directory to do this. for more details, see\n   https://igraph.org/c/doc/igraph-installation.html.\n2. compile (and install) the c core of ``libleidenalg`` (version >= 0.10). you\n   can use the file ``build_libleidenalg.sh`` (on unix-like systems) or\n   ``build_libleidenalg.bat`` (on windows) in the ``scripts/`` directory to do\n   this. for more details, see https://github.com/vtraag/libleidenalg.\n3. build the python interface using ``python setup.py build`` and ``python\n   setup.py install``, or use ``pip install .``\n\nyou can check if all went well by running a variety of tests using ``python -m\nunittest``.\n\ntroubleshooting\n---------------\n\nin case of any problems, best to start over with a clean environment. make sure\nyou remove the ``igraph`` and ``leidenalg`` package completely. then, do a\ncomplete reinstall starting from ``pip install leidenalg``. in case you\ninstalled from source, and built the c libraries of ``igraph`` and\n``libleidenalg`` yourself, remove them completely and rebuild and reinstall\nthem.\n\nusage\n-----\n\nthis is the python interface for the c++ package ``libleidenalg``. there are no\nplans at the moment for developing an r interface to the package. however, there\nhave been various efforts to port the package to r. these typically do not offer\nall available functionality or have some other limitations, but nonetheless may\nbe very useful. the available ports are:\n\n- https://github.com/cole-trapnell-lab/leidenbase\n- https://github.com/tomkellygenetics/leiden\n- https://github.com/kharchenkolab/leidenalg\n\nplease refer to the documentation for more details\non function calls and parameters.\n\nthis implementation is made for flexibility, but ``igraph`` nowadays also\nincludes an implementation of the leiden algorithm internally. that\nimplementation is less flexible: the implementation only works on undirected\ngraphs, and only cpm and modularity are supported. it is likely to be\nsubstantially faster though.\n\njust to get you started, below the essential parts.\nto start, make sure to import the packages:\n\n>>> import leidenalg\n>>> import igraph as ig\n\nwe'll create a random graph for testing purposes:\n\n>>> g = ig.graph.erdos_renyi(100, 0.1);\n\nfor simply finding a partition use:\n\n>>> part = leidenalg.find_partition(g, leidenalg.modularityvertexpartition);\n\ncontribute\n----------\n\nsource code: https://github.com/vtraag/leidenalg\n\nissue tracking: https://github.com/vtraag/leidenalg/issues\n\nsee the documentation on `implementation` for more details on how to\ncontribute new methods.\n\nreferences\n----------\n\nplease cite the references appropriately in case they are used.\n\n.. [1] traag, v.a., waltman. l., van eck, n.-j. (2018). from louvain to\n       leiden: guaranteeing well-connected communities. scientific reports, 9(1), 5233.\n       `10.1038/s41598-019-41695-z <http://dx.doi.org/10.1038/s41598-019-41695-z>`_\n\n.. [2] blondel, v. d., guillaume, j.-l., lambiotte, r., & lefebvre, e. (2008).\n       fast unfolding of communities in large networks. journal of statistical\n       mechanics: theory and experiment, 10008(10), 6.\n       `10.1088/1742-5468/2008/10/p10008 <http://doi.org/10.1088/1742-5468/2008/10/p10008>`_\n\n.. [3] newman, m. e. j., & girvan, m. (2004). finding and evaluating community\n       structure in networks. physical review e, 69(2), 026113.\n       `10.1103/physreve.69.026113 <http://doi.org/10.1103/physreve.69.026113>`_\n\n.. [4] reichardt, j., & bornholdt, s. (2006). statistical mechanics of\n       community detection. physical review e, 74(1), 016110.\n       `10.1103/physreve.74.016110 <http://doi.org/10.1103/physreve.74.016110>`_\n\n.. [5] traag, v. a., van dooren, p., & nesterov, y. (2011). narrow scope for\n       resolution-limit-free community detection. physical review e, 84(1),\n       016114.  `10.1103/physreve.84.016114\n       <http://doi.org/10.1103/physreve.84.016114>`_\n\n.. [6] traag, v. a., krings, g., & van dooren, p. (2013). significant scales in\n       community structure. scientific reports, 3, 2930.  `10.1038/srep02930\n       <http://doi.org/10.1038/srep02930>`_\n\n.. [7] traag, v. a., aldecoa, r., & delvenne, j.-c. (2015). detecting\n       communities using asymptotical surprise. physical review e, 92(2),\n       022816.  `10.1103/physreve.92.022816\n       <http://doi.org/10.1103/physreve.92.022816>`_\n\n.. [8] traag, v. a., & bruggeman, j. (2009). community detection in networks\n       with positive and negative links. physical review e, 80(3), 036115.\n       `10.1103/physreve.80.036115\n       <http://doi.org/10.1103/physreve.80.036115>`_\n\n.. [9] mucha, p. j., richardson, t., macon, k., porter, m. a., & onnela, j.-p.\n       (2010). community structure in time-dependent, multiscale, and multiplex\n       networks. science, 328(5980), 876\u20138. `10.1126/science.1184819\n       <http://doi.org/10.1126/science.1184819>`_\n\n.. [10] zanini, f., berghuis, b. a., jones, r. c., robilant, b. n. di,\n        nong, r. y., norton, j., clarke, michael f., quake, s. r. (2019).\n        northstar: leveraging cell atlases to identify healthy and neoplastic\n        cells in transcriptomes from human tumors. biorxiv, 820928.\n        `10.1101/820928 <https://doi.org/10.1101/820928>`_\n\nlicence\n-------\n\ncopyright (c) 2020 v.a. traag\n\nthis program is free software: you can redistribute it and/or modify it under\nthe terms of the gnu general public license as published by the free software\nfoundation, either version 3 of the license, or (at your option) any later\nversion.\n\nthis program is distributed in the hope that it will be useful, but without any\nwarranty; without even the implied warranty of merchantability or fitness for a\nparticular purpose.  see the gnu general public license for more details.\n\nyou should have received a copy of the gnu general public license along with\nthis program. if not, see http://www.gnu.org/licenses/.\n\n",
  "docs_url": null,
  "keywords": "graph,network,community detection,clustering",
  "license": "gplv3+",
  "name": "leidenalg",
  "package_url": "https://pypi.org/project/leidenalg/",
  "project_url": "https://pypi.org/project/leidenalg/",
  "project_urls": null,
  "release_url": "https://pypi.org/project/leidenalg/0.10.1/",
  "requires_dist": [
    "igraph (<0.11,>=0.10.0)"
  ],
  "requires_python": ">=3.7",
  "summary": "leiden is a general algorithm for methods of community detection in large networks.",
  "version": "0.10.1",
  "releases": [],
  "developers": [
    "vincent@traag.net"
  ],
  "kwds": "clustering communities find_partition algorithm nodes",
  "license_kwds": "gplv3+",
  "libtype": "pypi",
  "id": "pypi_leidenalg",
  "homepage": "",
  "release_count": 15,
  "dependency_ids": [
    "pypi_igraph"
  ]
}
{
  "classifiers": [
    "environment :: web environment",
    "framework :: django",
    "framework :: django :: 2.2",
    "framework :: django :: 3.0",
    "intended audience :: developers",
    "operating system :: os independent",
    "programming language :: python",
    "programming language :: python :: 3",
    "programming language :: python :: 3.6",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8"
  ],
  "description": "jsonfield\n=========\n\n.. image:: https://circleci.com/gh/rpkilby/jsonfield.svg?style=shield\n  :target: https://circleci.com/gh/rpkilby/jsonfield\n.. image:: https://codecov.io/gh/rpkilby/jsonfield/branch/master/graph/badge.svg\n  :target: https://codecov.io/gh/rpkilby/jsonfield\n.. image:: https://img.shields.io/pypi/v/jsonfield.svg\n  :target: https://pypi.org/project/jsonfield\n.. image:: https://img.shields.io/pypi/l/jsonfield.svg\n  :target: https://pypi.org/project/jsonfield\n\n**jsonfield** is a reusable model field that allows you to store validated json, automatically handling\nserialization to and from the database. to use, add ``jsonfield.jsonfield`` to one of your models.\n\n**note:** `django.contrib.postgres`_ now supports postgresql's jsonb type, which includes extended querying\ncapabilities. if you're an end user of postgresql and want full-featured json support, then it is\nrecommended that you use the built-in jsonfield. however, jsonfield is still useful when your app\nneeds to be database-agnostic, or when the built-in jsonfield's extended querying is not being leveraged.\ne.g., a configuration field.\n\n.. _django.contrib.postgres: https://docs.djangoproject.com/en/dev/ref/contrib/postgres/fields/#jsonfield\n\n\nrequirements\n------------\n\n**jsonfield** aims to support all current `versions of django`_, however the explicity tested versions are:\n\n* **python:** 3.6, 3.7, 3.8\n* **django:** 2.2, 3.0\n\n.. _versions of django: https://www.djangoproject.com/download/#supported-versions\n\n\ninstallation\n------------\n\n.. code-block:: python\n\n    pip install jsonfield\n\n\nusage\n-----\n\n.. code-block:: python\n\n    from django.db import models\n    from jsonfield import jsonfield\n\n    class mymodel(models.model):\n        json = jsonfield()\n\n\nquerying\n--------\n\nas stated above, ``jsonfield`` is not intended to provide extended querying capabilities.\nthat said, you may perform the same basic lookups provided by regular text fields (e.g.,\n``exact`` or ``regex`` lookups). since values are stored as serialized json, it is highly\nrecommended that you test your queries to ensure the expected results are returned.\n\n\nhandling null values\n--------------------\n\na model field's ``null`` argument typically controls whether null values may be stored in\nits column by setting a not-null constraint. however, because ``jsonfield`` serializes its\nvalues (including nulls), this option instead controls *how* null values are persisted. if\n``null=true``, then nulls are **not** serialized and are stored as a null value in the\ndatabase. if ``null=false``, then the null is instead stored in its serialized form.\n\nthis in turn affects how null values may be queried. both fields support exact matching:\n\n.. code-block:: python\n\n    mymodel.objects.filter(json=none)\n\nhowever, if you want to use the ``isnull`` lookup, you must set ``null=true``.\n\n.. code-block:: python\n\n    class mymodel(models.model):\n        json = jsonfield(null=true)\n\n    mymodel.objects.filter(json__isnull=true)\n\nnote that as ``jsonfield.null`` does not prevent nulls from being stored, achieving this\nmust instead be handled with a validator.\n\n\nadvanced usage\n--------------\n\nby default python deserializes json into dict objects. this behavior differs from the standard json\nbehavior  because python dicts do not have ordered keys. to overcome this limitation and keep the\nsort order of ordereddict keys the deserialisation can be adjusted on model initialisation:\n\n.. code-block:: python\n\n    import collections\n\n    class mymodel(models.model):\n        json = jsonfield(load_kwargs={'object_pairs_hook': collections.ordereddict})\n\n\nother fields\n------------\n\n**jsonfield.jsoncharfield**\n\nsubclasses **models.charfield** instead of **models.textfield**.\n\n\nrunning the tests\n-----------------\n\nthe test suite requires ``tox``.\n\n.. code-block:: shell\n\n    $ pip install tox\n\n\nthen, run the ``tox`` command, which will run all test jobs.\n\n.. code-block:: shell\n\n    $ tox\n\nor, to test just one job (for example django 2.0 on python 3.6):\n\n.. code-block:: shell\n\n    $ tox -e py36-django20\n\n\nrelease process\n---------------\n\n* update changelog\n* update package version in setup.py\n* check supported versions in setup.py and readme\n* create git tag for version\n* upload release to pypi test server\n* upload release to official pypi server\n\n.. code-block:: shell\n\n    $ pip install -u pip setuptools wheel twine\n    $ rm -rf dist/ build/\n    $ python setup.py sdist bdist_wheel\n    $ twine upload -r test dist/*\n    $ twine upload dist/*\n\n\nchanges\n-------\n\ntake a look at the `changelog`_.\n\n.. _changelog: https://github.com/rpkilby/jsonfield/blob/master/changes.rst\n\n\n",
  "docs_url": null,
  "keywords": "",
  "license": "mit",
  "name": "jsonfield",
  "package_url": "https://pypi.org/project/jsonfield/",
  "project_url": "https://pypi.org/project/jsonfield/",
  "project_urls": {
    "Homepage": "https://github.com/rpkilby/jsonfield/"
  },
  "release_url": "https://pypi.org/project/jsonfield/3.1.0/",
  "requires_dist": [
    "Django (>=2.2)"
  ],
  "requires_python": ">=3.6",
  "summary": "a reusable django field that allows you to store validated json in your model.",
  "version": "3.1.0",
  "releases": [],
  "developers": [
    "brad_jasper",
    "contact@bradjasper.com",
    "kilbyr@gmail.com",
    "ryan_p_kilby"
  ],
  "kwds": "jsonfield jsoncharfield jsonb json fields",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_jsonfield",
  "homepage": "https://github.com/rpkilby/jsonfield/",
  "release_count": 34,
  "dependency_ids": [
    "pypi_django"
  ]
}
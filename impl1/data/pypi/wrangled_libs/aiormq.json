{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: developers",
    "license :: osi approved :: apache software license",
    "natural language :: english",
    "operating system :: macos",
    "operating system :: microsoft",
    "operating system :: posix",
    "programming language :: python",
    "programming language :: python :: 3",
    "programming language :: python :: 3 :: only",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "programming language :: python :: implementation :: cpython",
    "programming language :: python :: implementation :: pypy",
    "topic :: internet",
    "topic :: software development",
    "topic :: software development :: libraries",
    "topic :: system :: clustering"
  ],
  "description": "pure python amqp asynchronous client library\n======\naiormq\n======\n\n.. image:: https://coveralls.io/repos/github/mosquito/aiormq/badge.svg?branch=master\n   :target: https://coveralls.io/github/mosquito/aiormq?branch=master\n   :alt: coveralls\n\n.. image:: https://img.shields.io/pypi/status/aiormq.svg\n   :target: https://github.com/mosquito/aiormq\n   :alt: status\n\n.. image:: https://github.com/mosquito/aiormq/workflows/tests/badge.svg\n   :target: https://github.com/mosquito/aiormq/actions?query=workflow%3atests\n   :alt: build status\n\n.. image:: https://img.shields.io/pypi/v/aiormq.svg\n   :target: https://pypi.python.org/pypi/aiormq/\n   :alt: latest version\n\n.. image:: https://img.shields.io/pypi/wheel/aiormq.svg\n   :target: https://pypi.python.org/pypi/aiormq/\n\n.. image:: https://img.shields.io/pypi/pyversions/aiormq.svg\n   :target: https://pypi.python.org/pypi/aiormq/\n\n.. image:: https://img.shields.io/pypi/l/aiormq.svg\n   :target: https://github.com/mosquito/aiormq/blob/master/license.md\n\n\naiormq is a pure python amqp client library.\n\n.. contents:: table of contents\n\nstatus\n======\n\n* 3.x.x branch - production/stable\n* 4.x.x branch - unstable (experimental)\n* 5.x.x and greater is only production/stable releases.\n\nfeatures\n========\n\n* connecting by url\n\n * amqp example: **amqp://user:password@server.host/vhost**\n * secure amqp example: **amqps://user:password@server.host/vhost?cafile=ca.pem&keyfile=key.pem&certfile=cert.pem&no_verify_ssl=0**\n\n* buffered queue for received frames\n* only `plain`_ auth mechanism support\n* `publisher confirms`_ support\n* `transactions`_ support\n* channel based asynchronous locks\n\n  .. note::\n      amqp 0.9.1 requires serialize sending for some frame types\n      on the channel. e.g. content body must be following after\n      content header. but frames might be sent asynchronously\n      on another channels.\n\n* tracking unroutable messages\n  (use **connection.channel(on_return_raises=false)** for disabling)\n* full ssl/tls support, using your choice of:\n    * ``amqps://`` url query parameters:\n        * ``cafile=`` - string contains path to ca certificate file\n        * ``capath=`` - string contains path to ca certificates\n        * ``cadata=`` - base64 encoded ca certificate data\n        * ``keyfile=`` - string contains path to key file\n        * ``certfile=`` - string contains path to certificate file\n        * ``no_verify_ssl`` - boolean disables certificates validation\n    * ``context=`` `sslcontext`_ keyword argument to ``connect()``.\n* python `type hints`_\n* uses `pamqp`_ as an amqp 0.9.1 frame encoder/decoder\n\n\n.. _publisher confirms: https://www.rabbitmq.com/confirms.html\n.. _transactions: https://www.rabbitmq.com/semantics.html\n.. _plain: https://www.rabbitmq.com/authentication.html\n.. _type hints: https://docs.python.org/3/library/typing.html\n.. _pamqp: https://pypi.org/project/pamqp/\n.. _sslcontext: https://docs.python.org/3/library/ssl.html#ssl.sslcontext\n\ntutorial\n========\n\nintroduction\n------------\n\nsimple consumer\n***************\n\n.. code-block:: python\n\n    import asyncio\n    import aiormq\n\n    async def on_message(message):\n        \"\"\"\n        on_message doesn't necessarily have to be defined as async.\n        here it is to show that it's possible.\n        \"\"\"\n        print(f\" [x] received message {message!r}\")\n        print(f\"message body is: {message.body!r}\")\n        print(\"before sleep!\")\n        await asyncio.sleep(5)   # represents async i/o operations\n        print(\"after sleep!\")\n\n\n    async def main():\n        # perform connection\n        connection = await aiormq.connect(\"amqp://guest:guest@localhost/\")\n\n        # creating a channel\n        channel = await connection.channel()\n\n        # declaring queue\n        declare_ok = await channel.queue_declare('helo')\n        consume_ok = await channel.basic_consume(\n            declare_ok.queue, on_message, no_ack=true\n        )\n\n\n    loop = asyncio.get_event_loop()\n    loop.run_until_complete(main())\n    loop.run_forever()\n\n\nsimple publisher\n****************\n\n.. code-block:: python\n    :name: test_simple_publisher\n\n    import asyncio\n    from typing import optional\n\n    import aiormq\n    from aiormq.abc import deliveredmessage\n\n\n    message: optional[deliveredmessage] = none\n\n\n    async def main():\n        global message\n\n        body = b'hello world!'\n\n        # perform connection\n        connection = await aiormq.connect(\"amqp://guest:guest@localhost//\")\n\n        # creating a channel\n        channel = await connection.channel()\n\n        declare_ok = await channel.queue_declare(\"hello\", auto_delete=true)\n\n        # sending the message\n        await channel.basic_publish(body, routing_key='hello')\n        print(f\" [x] sent {body}\")\n\n        message = await channel.basic_get(declare_ok.queue)\n        print(f\" [x] received message from {declare_ok.queue!r}\")\n\n\n    loop = asyncio.get_event_loop()\n    loop.run_until_complete(main())\n\n    assert message is not none\n    assert message.routing_key == \"hello\"\n    assert message.body == b'hello world!'\n\n\nwork queues\n-----------\n\ncreate new task\n***************\n\n.. code-block:: python\n\n    import sys\n    import asyncio\n    import aiormq\n\n\n    async def main():\n        # perform connection\n        connection = await aiormq.connect(\"amqp://guest:guest@localhost/\")\n\n        # creating a channel\n        channel = await connection.channel()\n\n        body = b' '.join(sys.argv[1:]) or b\"hello world!\"\n\n        # sending the message\n        await channel.basic_publish(\n            body,\n            routing_key='task_queue',\n            properties=aiormq.spec.basic.properties(\n                delivery_mode=1,\n            )\n        )\n\n        print(f\" [x] sent {body!r}\")\n\n        await connection.close()\n\n\n    loop = asyncio.get_event_loop()\n    loop.run_until_complete(main())\n\n\nsimple worker\n*************\n\n.. code-block:: python\n\n    import asyncio\n    import aiormq\n    import aiormq.abc\n\n\n    async def on_message(message: aiormq.abc.deliveredmessage):\n        print(f\" [x] received message {message!r}\")\n        print(f\"     message body is: {message.body!r}\")\n\n\n    async def main():\n        # perform connection\n        connection = await aiormq.connect(\"amqp://guest:guest@localhost/\")\n\n\n        # creating a channel\n        channel = await connection.channel()\n        await channel.basic_qos(prefetch_count=1)\n\n        # declaring queue\n        declare_ok = await channel.queue_declare('task_queue', durable=true)\n\n        # start listening the queue with name 'task_queue'\n        await channel.basic_consume(declare_ok.queue, on_message, no_ack=true)\n\n\n    loop = asyncio.get_event_loop()\n    loop.run_until_complete(main())\n\n    # we enter a never-ending loop that waits for data and runs\n    # callbacks whenever necessary.\n    print(\" [*] waiting for messages. to exit press ctrl+c\")\n    loop.run_forever()\n\n\npublish subscribe\n-----------------\n\npublisher\n*********\n\n.. code-block:: python\n\n    import sys\n    import asyncio\n    import aiormq\n\n\n    async def main():\n        # perform connection\n        connection = await aiormq.connect(\"amqp://guest:guest@localhost/\")\n\n        # creating a channel\n        channel = await connection.channel()\n\n        await channel.exchange_declare(\n            exchange='logs', exchange_type='fanout'\n        )\n\n        body = b' '.join(sys.argv[1:]) or b\"hello world!\"\n\n        # sending the message\n        await channel.basic_publish(\n            body, routing_key='info', exchange='logs'\n        )\n\n        print(f\" [x] sent {body!r}\")\n\n        await connection.close()\n\n\n    loop = asyncio.get_event_loop()\n    loop.run_until_complete(main())\n\n\nsubscriber\n**********\n\n.. code-block:: python\n\n    import asyncio\n    import aiormq\n    import aiormq.abc\n\n\n    async def on_message(message: aiormq.abc.deliveredmessage):\n        print(f\"[x] {message.body!r}\")\n\n        await message.channel.basic_ack(\n            message.delivery.delivery_tag\n        )\n\n\n    async def main():\n        # perform connection\n        connection = await aiormq.connect(\"amqp://guest:guest@localhost/\")\n\n        # creating a channel\n        channel = await connection.channel()\n        await channel.basic_qos(prefetch_count=1)\n\n        await channel.exchange_declare(\n            exchange='logs', exchange_type='fanout'\n        )\n\n        # declaring queue\n        declare_ok = await channel.queue_declare(exclusive=true)\n\n        # binding the queue to the exchange\n        await channel.queue_bind(declare_ok.queue, 'logs')\n\n        # start listening the queue with name 'task_queue'\n        await channel.basic_consume(declare_ok.queue, on_message)\n\n\n    loop = asyncio.get_event_loop()\n    loop.create_task(main())\n\n    # we enter a never-ending loop that waits for data\n    # and runs callbacks whenever necessary.\n    print(' [*] waiting for logs. to exit press ctrl+c')\n    loop.run_forever()\n\n\nrouting\n-------\n\ndirect consumer\n***************\n\n.. code-block:: python\n\n    import sys\n    import asyncio\n    import aiormq\n    import aiormq.abc\n\n\n    async def on_message(message: aiormq.abc.deliveredmessage):\n        print(f\" [x] {message.delivery.routing_key!r}:{message.body!r}\"\n        await message.channel.basic_ack(\n            message.delivery.delivery_tag\n        )\n\n\n    async def main():\n        # perform connection\n        connection = aiormq.connection(\"amqp://guest:guest@localhost/\")\n        await connection.connect()\n\n        # creating a channel\n        channel = await connection.channel()\n        await channel.basic_qos(prefetch_count=1)\n\n        severities = sys.argv[1:]\n\n        if not severities:\n            sys.stderr.write(f\"usage: {sys.argv[0]} [info] [warning] [error]\\n\")\n            sys.exit(1)\n\n        # declare an exchange\n        await channel.exchange_declare(\n            exchange='logs', exchange_type='direct'\n        )\n\n        # declaring random queue\n        declare_ok = await channel.queue_declare(durable=true, auto_delete=true)\n\n        for severity in severities:\n            await channel.queue_bind(\n                declare_ok.queue, 'logs', routing_key=severity\n            )\n\n        # start listening the random queue\n        await channel.basic_consume(declare_ok.queue, on_message)\n\n\n    loop = asyncio.get_event_loop()\n    loop.run_until_complete(main())\n\n    # we enter a never-ending loop that waits for data\n    # and runs callbacks whenever necessary.\n    print(\" [*] waiting for messages. to exit press ctrl+c\")\n    loop.run_forever()\n\n\nemitter\n*******\n\n.. code-block:: python\n\n    import sys\n    import asyncio\n    import aiormq\n\n\n    async def main():\n        # perform connection\n        connection = await aiormq.connect(\"amqp://guest:guest@localhost/\")\n\n        # creating a channel\n        channel = await connection.channel()\n\n        await channel.exchange_declare(\n            exchange='logs', exchange_type='direct'\n        )\n\n        body = (\n            b' '.join(arg.encode() for arg in sys.argv[2:])\n            or\n            b\"hello world!\"\n        )\n\n        # sending the message\n        routing_key = sys.argv[1] if len(sys.argv) > 2 else 'info'\n\n        await channel.basic_publish(\n            body, exchange='logs', routing_key=routing_key,\n            properties=aiormq.spec.basic.properties(\n                delivery_mode=1\n            )\n        )\n\n        print(f\" [x] sent {body!r}\")\n\n        await connection.close()\n\n\n    loop = asyncio.get_event_loop()\n    loop.run_until_complete(main())\n\ntopics\n------\n\npublisher\n*********\n\n.. code-block:: python\n\n    import sys\n    import asyncio\n    import aiormq\n\n\n    async def main():\n        # perform connection\n        connection = await aiormq.connect(\"amqp://guest:guest@localhost/\")\n\n        # creating a channel\n        channel = await connection.channel()\n\n        await channel.exchange_declare('topic_logs', exchange_type='topic')\n\n        routing_key = (\n            sys.argv[1] if len(sys.argv) > 2 else 'anonymous.info'\n        )\n\n        body = (\n            b' '.join(arg.encode() for arg in sys.argv[2:])\n            or\n            b\"hello world!\"\n        )\n\n        # sending the message\n        await channel.basic_publish(\n            body, exchange='topic_logs', routing_key=routing_key,\n            properties=aiormq.spec.basic.properties(\n                delivery_mode=1\n            )\n        )\n\n        print(f\" [x] sent {body!r}\")\n\n        await connection.close()\n\n\n    loop = asyncio.get_event_loop()\n    loop.run_until_complete(main())\n\nconsumer\n********\n\n.. code-block:: python\n\n    import asyncio\n    import sys\n    import aiormq\n    import aiormq.abc\n\n\n    async def on_message(message: aiormq.abc.deliveredmessage):\n        print(f\" [x] {message.delivery.routing_key!r}:{message.body!r}\")\n        await message.channel.basic_ack(\n            message.delivery.delivery_tag\n        )\n\n\n    async def main():\n        # perform connection\n        connection = await aiormq.connect(\n            \"amqp://guest:guest@localhost/\", loop=loop\n        )\n\n        # creating a channel\n        channel = await connection.channel()\n        await channel.basic_qos(prefetch_count=1)\n\n        # declare an exchange\n        await channel.exchange_declare('topic_logs', exchange_type='topic')\n\n        # declaring queue\n        declare_ok = await channel.queue_declare('task_queue', durable=true)\n\n        binding_keys = sys.argv[1:]\n\n        if not binding_keys:\n            sys.stderr.write(\n                f\"usage: {sys.argv[0]} [binding_key]...\\n\"\n            )\n            sys.exit(1)\n\n        for binding_key in binding_keys:\n            await channel.queue_bind(\n                declare_ok.queue, 'topic_logs', routing_key=binding_key\n            )\n\n        # start listening the queue with name 'task_queue'\n        await channel.basic_consume(declare_ok.queue, on_message)\n\n\n    loop = asyncio.get_event_loop()\n    loop.create_task(main())\n\n    # we enter a never-ending loop that waits for\n    # data and runs callbacks whenever necessary.\n    print(\" [*] waiting for messages. to exit press ctrl+c\")\n    loop.run_forever()\n\nremote procedure call (rpc)\n---------------------------\n\nrpc server\n**********\n\n.. code-block:: python\n\n    import asyncio\n    import aiormq\n    import aiormq.abc\n\n\n    def fib(n):\n        if n == 0:\n            return 0\n        elif n == 1:\n            return 1\n        else:\n            return fib(n-1) + fib(n-2)\n\n\n    async def on_message(message:aiormq.abc.deliveredmessage):\n        n = int(message.body.decode())\n\n        print(f\" [.] fib({n})\")\n        response = str(fib(n)).encode()\n\n        await message.channel.basic_publish(\n            response, routing_key=message.header.properties.reply_to,\n            properties=aiormq.spec.basic.properties(\n                correlation_id=message.header.properties.correlation_id\n            ),\n\n        )\n\n        await message.channel.basic_ack(message.delivery.delivery_tag)\n        print('request complete')\n\n\n    async def main():\n        # perform connection\n        connection = await aiormq.connect(\"amqp://guest:guest@localhost/\")\n\n        # creating a channel\n        channel = await connection.channel()\n\n        # declaring queue\n        declare_ok = await channel.queue_declare('rpc_queue')\n\n        # start listening the queue with name 'hello'\n        await channel.basic_consume(declare_ok.queue, on_message)\n\n\n    loop = asyncio.get_event_loop()\n    loop.create_task(main())\n\n    # we enter a never-ending loop that waits for data\n    # and runs callbacks whenever necessary.\n    print(\" [x] awaiting rpc requests\")\n    loop.run_forever()\n\n\nrpc client\n**********\n\n.. code-block:: python\n\n    import asyncio\n    import uuid\n    import aiormq\n    import aiormq.abc\n\n\n    class fibonaccirpcclient:\n        def __init__(self):\n            self.connection = none      # type: aiormq.connection\n            self.channel = none         # type: aiormq.channel\n            self.callback_queue = ''\n            self.futures = {}\n            self.loop = loop\n\n        async def connect(self):\n            self.connection = await aiormq.connect(\"amqp://guest:guest@localhost/\")\n\n            self.channel = await self.connection.channel()\n            declare_ok = await self.channel.queue_declare(\n                exclusive=true, auto_delete=true\n            )\n\n            await self.channel.basic_consume(declare_ok.queue, self.on_response)\n\n            self.callback_queue = declare_ok.queue\n\n            return self\n\n        async def on_response(self, message: aiormq.abc.deliveredmessage):\n            future = self.futures.pop(message.header.properties.correlation_id)\n            future.set_result(message.body)\n\n        async def call(self, n):\n            correlation_id = str(uuid.uuid4())\n            future = loop.create_future()\n\n            self.futures[correlation_id] = future\n\n            await self.channel.basic_publish(\n                str(n).encode(), routing_key='rpc_queue',\n                properties=aiormq.spec.basic.properties(\n                    content_type='text/plain',\n                    correlation_id=correlation_id,\n                    reply_to=self.callback_queue,\n                )\n            )\n\n            return int(await future)\n\n\n    async def main():\n        fibonacci_rpc = await fibonaccirpcclient().connect()\n        print(\" [x] requesting fib(30)\")\n        response = await fibonacci_rpc.call(30)\n        print(r\" [.] got {response!r}\")\n\n\n    loop = asyncio.get_event_loop()\n    loop.run_until_complete(main())\n",
  "docs_url": null,
  "keywords": "rabbitmq,asyncio,amqp,amqp 0.9.1,driver,pamqp",
  "license": "apache-2.0",
  "name": "aiormq",
  "package_url": "https://pypi.org/project/aiormq/",
  "project_url": "https://pypi.org/project/aiormq/",
  "project_urls": {
    "Documentation": "https://github.com/mosquito/aiormq/blob/master/README.rst",
    "Homepage": "https://github.com/mosquito/aiormq",
    "Source": "https://github.com/mosquito/aiormq",
    "Tracker": "https://github.com/mosquito/aiormq/issues"
  },
  "release_url": "https://pypi.org/project/aiormq/6.7.7/",
  "requires_dist": [
    "pamqp (==3.2.1)",
    "setuptools ; python_version < \"3.8\"",
    "yarl"
  ],
  "requires_python": ">=3.7,<4.0",
  "summary": "pure python amqp asynchronous client library",
  "version": "6.7.7",
  "releases": [],
  "developers": [
    "dmitry_orlov",
    "me@mosquito.su"
  ],
  "kwds": "aiormq rabbitmq uuid uuid4 badge",
  "license_kwds": "apache-2.0",
  "libtype": "pypi",
  "id": "pypi_aiormq",
  "homepage": "https://github.com/mosquito/aiormq",
  "release_count": 106,
  "dependency_ids": [
    "pypi_pamqp",
    "pypi_setuptools",
    "pypi_yarl"
  ],
  "documentation_summary": "The HTML text is about \"aiormq,\" a pure Python AMQP 0.9.1 asynchronous client library hosted on GitHub under the repository \"mosquito/aiormq.\" It provides a comprehensive guide and documentation for using the library, including features like connecting via URL, buffered queue for received frames, publisher confirms, transactions support, and full SSL/TLS support. The library supports only the PLAIN auth mechanism and is designed for asynchronous operations with asyncio. It includes tutorials for basic operations such as simple consumer and publisher, work queues, publish/subscribe models, routing, topics, and remote procedure call (RPC) with examples. The repository has 243 stars, 57 forks, and is licensed under a viewable license.",
  "embedding": [
    -0.02329229936003685,
    -0.010511964559555054,
    -0.020249363034963608,
    -0.005809243302792311,
    0.011376434937119484,
    0.01984824799001217,
    0.0026141596026718616,
    -0.005791954230517149,
    -0.011473256163299084,
    -0.034910786896944046,
    -0.010318323038518429,
    -0.009979450143873692,
    -0.02828548289835453,
    0.015034875832498074,
    -0.0030982631724327803,
    -0.03037404455244541,
    0.015449821017682552,
    -0.03311268612742424,
    -0.0031328420154750347,
    -0.0014160030987113714,
    0.03795372322201729,
    0.006092790048569441,
    -0.020277027040719986,
    -0.01280108280479908,
    -0.01038056518882513,
    0.01655634306371212,
    0.011583908461034298,
    -0.009343200363218784,
    0.012517536990344524,
    -0.007593511138111353,
    0.030318718403577805,
    -0.004052639007568359,
    -0.021065423265099525,
    -0.00021438875410240144,
    -0.006929597817361355,
    -0.005055425222963095,
    0.019516291096806526,
    0.02080262452363968,
    0.03823035582900047,
    -0.0008964561857283115,
    0.034772470593452454,
    0.009038906544446945,
    0.007116323336958885,
    0.010850836522877216,
    -0.054579224437475204,
    -0.0034959197510033846,
    0.02633523754775524,
    -0.03745578974485397,
    -0.010138513520359993,
    0.00429123267531395,
    0.013257523998618126,
    0.007946215569972992,
    -0.013651722110807896,
    -0.008395739831030369,
    -0.008347329683601856,
    0.016832973808050156,
    0.008105278015136719,
    0.03250410035252571,
    -0.009267126210033894,
    -0.010000198148190975,
    0.0020643561147153378,
    -0.009080400690436363,
    -0.03864530101418495,
    -0.01676381751894951,
    -0.004346558824181557,
    0.027607738971710205,
    -0.024094529449939728,
    0.013050050474703312,
    0.017026616260409355,
    -0.022075125947594643,
    0.015339168719947338,
    0.02408069744706154,
    -0.006853524129837751,
    -0.0021473453380167484,
    0.05192357301712036,
    -0.025671323761343956,
    -0.016791479662060738,
    0.03515975549817085,
    -0.018229959532618523,
    0.004737299866974354,
    0.007268470246344805,
    0.0007957453490234911,
    -0.006199984345585108,
    0.029018554836511612,
    0.0180639810860157,
    0.05601770430803299,
    0.002124869031831622,
    0.01752455160021782,
    0.0030706000979989767,
    -0.016473354771733284,
    0.037068504840135574,
    0.0025398151483386755,
    0.0067670769058167934,
    0.028036516159772873,
    -0.005511865485459566,
    0.024689285084605217,
    -0.025090400129556656,
    0.03488312289118767,
    -0.010525795631110668,
    -0.003779466263949871,
    0.0018032860243692994,
    0.010608784854412079,
    -0.014142741449177265,
    -0.010511964559555054,
    -0.028548281639814377,
    -0.011487087234854698,
    -0.006269142031669617,
    -0.020927108824253082,
    0.0427117720246315,
    0.011694560758769512,
    -0.005062340758740902,
    0.03098263218998909,
    0.025477681308984756,
    -0.03156355768442154,
    -0.01846509613096714,
    0.01175680197775364,
    0.017054278403520584,
    0.00377255049534142,
    0.0025259836111217737,
    -0.0037379716522991657,
    -0.013264439068734646,
    0.014730582013726234,
    0.002517338842153549,
    0.009944871999323368,
    0.014578434638679028,
    -0.0001438263279851526,
    -0.00973048247396946,
    -0.0004806457436643541,
    0.0027974273543804884,
    -0.019696101546287537,
    -0.010152344591915607,
    0.01616906188428402,
    0.013146871700882912,
    0.0060720425099134445,
    0.004488332197070122,
    0.020304689183831215,
    -0.022822028025984764,
    -0.011929696425795555,
    -0.015906261280179024,
    -0.012642020359635353,
    -0.010435891337692738,
    0.031037958338856697,
    -0.029959099367260933,
    -0.013181449845433235,
    -0.017635203897953033,
    0.03410855680704117,
    0.009225632064044476,
    -0.013243691995739937,
    0.006047837436199188,
    0.011978106573224068,
    0.028520619496703148,
    0.00024875145754776895,
    -0.026279911398887634,
    -0.001211988041177392,
    0.010180007666349411,
    0.009038906544446945,
    -0.025878796353936195,
    0.017787350341677666,
    -0.012600526213645935,
    0.008603213354945183,
    0.017870338633656502,
    0.053970638662576675,
    -0.03131458908319473,
    0.0020885614212602377,
    -0.008215930312871933,
    0.01925349235534668,
    0.012572863139212132,
    -0.0027282696682959795,
    -0.02059515193104744,
    -0.014066668227314949,
    -0.012856408953666687,
    -0.003862455254420638,
    -0.02041534148156643,
    0.03208915516734123,
    0.008534055203199387,
    0.0074759433045983315,
    0.02385939285159111,
    0.001394391292706132,
    -0.017234088853001595,
    0.000988090061582625,
    0.019682269543409348,
    0.0019260408589616418,
    0.01578177884221077,
    0.038755953311920166,
    -0.039336878806352615,
    0.007358375005424023,
    -0.020733466371893883,
    -0.022835860028862953,
    0.008243593387305737,
    0.01730324700474739,
    0.01067102700471878,
    0.03172953426837921,
    -0.003269428387284279,
    -0.04578237235546112,
    -0.5815882682800293,
    -0.00046378857223317027,
    -0.02634906955063343,
    -0.01753838360309601,
    0.012047264724969864,
    -0.005854195915162563,
    0.009191052988171577,
    -0.002812987891957164,
    0.00283546419814229,
    0.01888004131615162,
    -0.023900886997580528,
    0.02305716462433338,
    0.011321108788251877,
    -0.018783221021294594,
    0.008589381352066994,
    0.008001541718840599,
    0.018589578568935394,
    -0.015159359201788902,
    -0.006711750756949186,
    -0.0011480171233415604,
    0.012911735102534294,
    0.02791203185915947,
    -0.019184334203600883,
    0.009765061549842358,
    -0.0018136596772819757,
    0.0018361358670517802,
    0.006846608594059944,
    -0.016210556030273438,
    -0.004111423157155514,
    0.0003138028841931373,
    -0.03289138525724411,
    0.03751111403107643,
    0.030650675296783447,
    0.004896362312138081,
    0.05836906656622887,
    -0.005204114131629467,
    -0.014481614343822002,
    0.03189551457762718,
    -0.019917406141757965,
    0.03172953426837921,
    0.013077713549137115,
    -0.028797250241041183,
    -0.0029028928838670254,
    -0.010249164886772633,
    0.014467782340943813,
    0.0033973699901252985,
    0.018326779827475548,
    0.018907705321907997,
    0.008817601948976517,
    -0.0260032806545496,
    -0.013776206411421299,
    -0.010173091664910316,
    -0.006877729203552008,
    -0.009384694509208202,
    0.023721078410744667,
    -0.0028890613466501236,
    0.015726452693343163,
    0.0004305064503569156,
    0.012559031136333942,
    0.003699934808537364,
    -0.006483530625700951,
    -0.010636447928845882,
    -0.010892331600189209,
    -0.023153984919190407,
    -0.00048107796465046704,
    0.007579679600894451,
    0.007441364228725433,
    -0.03275306895375252,
    0.0043223537504673,
    -0.018354443833231926,
    0.02426050789654255,
    0.0052144876681268215,
    -0.01376237440854311,
    -0.032255131751298904,
    0.007102491799741983,
    0.05120433121919632,
    0.005086545832455158,
    0.02982078306376934,
    -0.002624533139169216,
    0.01846509613096714,
    -0.01598925143480301,
    0.010947657749056816,
    0.009101147763431072,
    -0.03939220309257507,
    0.057428520172834396,
    0.015574305318295956,
    -0.03939220309257507,
    -0.019142840057611465,
    0.020844118669629097,
    -0.004038807470351458,
    0.009011243470013142,
    0.009509178809821606,
    -0.013056966476142406,
    -0.016252050176262856,
    0.020318521186709404,
    0.02904621697962284,
    -0.016653165221214294,
    0.004263569600880146,
    -0.020277027040719986,
    -0.026210753247141838,
    0.01904601976275444,
    -0.013831532560288906,
    -0.009654409252107143,
    0.0010866397060453892,
    0.04226916283369064,
    0.0114525081589818,
    0.005895690526813269,
    -0.021425044164061546,
    0.002830277197062969,
    -0.03504910320043564,
    -0.005504949949681759,
    -0.03969649598002434,
    -0.00624493695795536,
    -0.014467782340943813,
    0.010629532858729362,
    -0.03427453711628914,
    0.027663065120577812,
    0.005020846147090197,
    0.018229959532618523,
    -0.02078879252076149,
    0.007607342675328255,
    -0.007116323336958885,
    0.02539469301700592,
    0.021798495203256607,
    0.006580351386219263,
    0.013181449845433235,
    0.006960718426853418,
    -0.002662569982931018,
    -0.01959928125143051,
    0.007289217319339514,
    0.03269774094223976,
    -0.019502460956573486,
    0.0077456580474972725,
    -0.019322650507092476,
    0.036653559654951096,
    -0.024302002042531967,
    0.02865893393754959,
    0.003418117295950651,
    0.011390266939997673,
    0.006141200195997953,
    -0.008395739831030369,
    0.00827817153185606,
    0.005345887038856745,
    0.003599656280130148,
    -0.015684956684708595,
    -0.042435139417648315,
    -0.015837104991078377,
    0.0023980417754501104,
    -0.013713964261114597,
    -0.007676500361412764,
    -0.02965480461716652,
    -0.006573435850441456,
    -0.025685155764222145,
    0.02904621697962284,
    -0.019294986501336098,
    -0.012144085019826889,
    -0.013976763002574444,
    -0.015034875832498074,
    -0.002155990106984973,
    0.006231105420738459,
    0.01925349235534668,
    0.0167084913700819,
    -0.002494862535968423,
    0.024149855598807335,
    -0.03018040396273136,
    -0.015518979169428349,
    -0.04605900123715401,
    0.026805508881807327,
    -0.002494862535968423,
    -0.016210556030273438,
    -0.024550968781113625,
    -0.00043396433466114104,
    -0.010629532858729362,
    0.0001422054338036105,
    0.003236578544601798,
    -0.00033844029530882835,
    -0.024592464789748192,
    0.03139757737517357,
    -0.0007659210823476315,
    -0.0107747633010149,
    -0.0035270405933260918,
    0.022268766537308693,
    -0.028631271794438362,
    -0.017842676490545273,
    0.028714260086417198,
    0.00683969259262085,
    0.005504949949681759,
    0.03634926676750183,
    -0.008056867867708206,
    0.01173605490475893,
    0.0016079156193882227,
    0.03308502584695816,
    -0.046446286141872406,
    0.030069751664996147,
    -0.016639333218336105,
    0.006141200195997953,
    0.029516490176320076,
    -0.005342429503798485,
    0.014025173150002956,
    0.015823272988200188,
    0.03366594761610031,
    0.020705804228782654,
    0.01134877186268568,
    -0.0036342351231724024,
    -0.02446798048913479,
    -0.0071578179486095905,
    0.025934122502803802,
    -0.006597640924155712,
    0.034136220812797546,
    0.013935268856585026,
    0.03159121796488762,
    0.0014600910944864154,
    -0.005062340758740902,
    -0.015339168719947338,
    0.012787251733243465,
    0.010394396260380745,
    -0.023347625508904457,
    0.023942383006215096,
    -0.03648758307099342,
    -0.018644904717803,
    0.0025467309169471264,
    0.020194036886096,
    -0.006984923966228962,
    -0.003162234090268612,
    0.011729138903319836,
    0.003331670304760337,
    0.026224585250020027,
    0.03499377518892288,
    0.0018274912144988775,
    -0.007738742046058178,
    -0.018188465386629105,
    0.026404395699501038,
    0.020525993779301643,
    -0.0229050163179636,
    0.026888499036431313,
    -0.011825960129499435,
    0.049738191068172455,
    -0.016611669212579727,
    0.02979312092065811,
    -0.04179888963699341,
    -0.0031276552472263575,
    0.028437629342079163,
    0.021618684753775597,
    -0.009038906544446945,
    0.026266079396009445,
    -0.0013217758387327194,
    0.008720780722796917,
    0.012469125911593437,
    -0.002567478222772479,
    0.0063901678659021854,
    -0.010754016228020191,
    -0.0058023277670145035,
    -0.01204034872353077,
    0.0009854966774582863,
    0.001080588437616825,
    -0.0086447075009346,
    -0.0028838743455708027,
    -0.00730996485799551,
    0.04135628044605255,
    0.0048202890902757645,
    0.004381137900054455,
    0.0033973699901252985,
    0.010138513520359993,
    -0.003418117295950651,
    0.030871979892253876,
    0.0038589974865317345,
    -0.013547985814511776,
    -0.04948922246694565,
    -0.007517437916249037,
    -0.016030745580792427,
    -0.012192495167255402,
    -0.018520422279834747,
    -0.020650478079915047,
    -0.03347230702638626,
    0.04237981513142586,
    0.012455294840037823,
    -0.014758245088160038,
    0.030871979892253876,
    0.0034475093707442284,
    0.009384694509208202,
    -0.04749748110771179,
    -0.03366594761610031,
    0.04661226272583008,
    0.0073514594696462154,
    0.004927483387291431,
    -0.031037958338856697,
    -0.013347428292036057,
    0.03557470068335533,
    -0.025118062272667885,
    -0.0013485744129866362,
    0.01752455160021782,
    -0.006462783552706242,
    -0.0059095220640301704,
    0.0012534826528280973,
    -0.03499377518892288,
    0.008914422243833542,
    0.043569326400756836,
    0.0053216819651424885,
    -0.01865873672068119,
    -0.03712383285164833,
    0.006078958511352539,
    -0.013547985814511776,
    -0.018797053024172783,
    0.026598036289215088,
    0.02213045209646225,
    -0.003931613173335791,
    0.003966191783547401,
    -0.01011085044592619,
    -0.00726155424490571,
    -0.005048509221524,
    0.009675156325101852,
    0.006936513353139162,
    -0.010456638410687447,
    -0.009433104656636715,
    0.016279714182019234,
    0.011798297055065632,
    -0.006365962792187929,
    -0.023209311068058014,
    0.019115177914500237,
    -0.01888004131615162,
    -0.019377976655960083,
    -0.02561599761247635,
    -0.007344543468207121,
    -0.024550968781113625,
    0.03391491621732712,
    -0.0009457310079596937,
    0.015823272988200188,
    0.017386235296726227,
    -0.01965460740029812,
    -0.027635401114821434,
    -0.0180639810860157,
    -0.008250509388744831,
    0.01048430148512125,
    0.012766503728926182,
    -0.013879942707717419,
    0.015422157943248749,
    0.02215811423957348,
    -0.0034596119076013565,
    0.0061965263448655605,
    0.009398526512086391,
    -0.0065146517008543015,
    -0.009944871999323368,
    0.017607539892196655,
    -0.009640578180551529,
    0.02210278809070587,
    0.005584481172263622,
    -0.00382441864348948,
    0.0035892825108021498,
    0.041688237339258194,
    0.022282598540186882,
    0.022863522171974182,
    0.01069177407771349,
    -0.00707482872530818,
    -0.022434744983911514,
    0.02691616117954254,
    -0.019945070147514343,
    0.02229643054306507,
    0.018216127529740334,
    0.0053389715030789375,
    0.05485585704445839,
    0.005747001618146896,
    0.020443003624677658,
    -0.019792921841144562,
    0.0033455018419772387,
    0.0030221897177398205,
    0.02114841341972351,
    -0.006148116197437048,
    -0.0006980601465329528,
    -0.0045920684933662415,
    -0.04946155846118927,
    -0.020124878734350204,
    -0.0009509178344160318,
    0.002079916652292013,
    0.017980990931391716,
    0.025118062272667885,
    0.012503704987466335,
    -0.041937205940485,
    -0.021591022610664368,
    0.03098263218998909,
    0.03156355768442154,
    -0.021660178899765015,
    -0.012144085019826889,
    0.010919994674623013,
    -0.04016676917672157,
    -0.01289790403097868,
    -0.021466538310050964,
    0.014059752225875854,
    0.00018813044880516827,
    -0.004415716510266066,
    -0.0225177351385355,
    -0.020871782675385475,
    0.02348594181239605,
    -0.010747100226581097,
    0.008160604164004326,
    0.027856705710291862,
    -0.004664684180170298,
    -0.008900591172277927,
    -0.028133336454629898,
    0.03828568011522293,
    0.018783221021294594,
    0.003374893916770816,
    0.005411586724221706,
    0.0028389219660311937,
    0.009087316691875458,
    0.012254737317562103,
    -0.050346776843070984,
    -0.01076784823089838,
    -0.011300361715257168,
    -0.011037562973797321,
    -0.012240906246006489,
    0.042656444013118744,
    0.006691003683954477,
    0.002541544148698449,
    0.02597561664879322,
    0.007337627932429314,
    0.005791954230517149,
    0.022199608385562897,
    -0.0028596692718565464,
    0.012842577882111073,
    0.03314035013318062,
    0.0056778439320623875,
    0.016086071729660034,
    0.011853623203933239,
    -0.0009526467765681446,
    -0.01901835761964321,
    -0.03787073493003845,
    -0.010422059334814548,
    -0.0021404295694082975,
    -0.011819044128060341,
    -0.026487383991479874,
    0.013838447630405426,
    0.03466181829571724,
    -0.041466932743787766,
    0.018976861611008644,
    0.020360015332698822,
    -0.017856508493423462,
    -0.0009094232227653265,
    0.007268470246344805,
    -0.0011212185490876436,
    0.02192297764122486,
    -0.007524353452026844,
    0.028575945645570755,
    -0.012462210841476917,
    -0.007365291006863117,
    0.021618684753775597,
    -0.0207749605178833,
    0.017192594707012177,
    0.02427433803677559,
    -0.020152542740106583,
    0.016473354771733284,
    0.024205181747674942,
    -0.02193680964410305,
    -0.006224189419299364,
    0.009875713847577572,
    0.01598925143480301,
    0.0194194708019495,
    0.022669881582260132,
    -0.05056808143854141,
    0.0024671994615346193,
    -0.008008456788957119,
    0.002017674734815955,
    0.018437432125210762,
    0.01677764765918255,
    0.013160702772438526,
    -0.04063704237341881,
    0.004955146461725235,
    -0.0032089154701679945,
    -0.02272520773112774,
    -0.016086071729660034,
    -0.02694382518529892,
    -0.012870240956544876,
    0.024149855598807335,
    -0.0008030933095142245,
    0.009495346806943417,
    -0.017953328788280487,
    -0.018506590276956558,
    -0.0035339563619345427,
    -0.006711750756949186,
    -0.005975221749395132,
    -0.013776206411421299,
    0.013783121481537819,
    -0.0349661149084568,
    -0.0017635202966630459,
    0.006148116197437048,
    0.028437629342079163,
    0.012178664095699787,
    0.028741924092173576,
    0.004201327916234732,
    -0.0063901678659021854,
    0.004336185287684202,
    -0.00866545457392931,
    0.009882629849016666,
    0.0017384507227689028,
    -0.007780236657708883,
    0.012399968691170216,
    0.039724159985780716,
    -0.014979549683630466,
    -0.03939220309257507,
    0.013250607997179031,
    0.010394396260380745,
    -0.0019900116603821516,
    -0.0012967061484232545,
    -0.02962714247405529,
    -0.01983441784977913,
    0.0020851034205406904,
    -0.011321108788251877,
    -0.01087849959731102,
    0.012828745879232883,
    -0.017787350341677666,
    -0.01125886756926775,
    0.028797250241041183,
    -0.026127764955163002,
    0.023624256253242493,
    -0.009612915106117725,
    0.034910786896944046,
    -0.013644806109368801,
    0.007946215569972992,
    0.012185580097138882,
    0.01067102700471878,
    -0.003769092494621873,
    0.01288407202810049,
    -0.03018040396273136,
    0.004802999552339315,
    -0.0022199610248208046,
    0.00981347169727087,
    0.013693217188119888,
    0.03291904553771019,
    0.014115078374743462,
    0.0018637989414855838,
    0.009848050773143768,
    -0.006130826659500599,
    -0.03385959193110466,
    0.018810883164405823,
    -0.025131894275546074,
    -0.031259261071681976,
    -0.02441265434026718,
    0.001017482136376202,
    -0.041107311844825745,
    0.005608686245977879,
    -0.0032141022384166718,
    0.012586694210767746,
    0.005805785767734051,
    -0.009778893552720547,
    0.0042531960643827915,
    0.019101345911622047,
    -0.008596297353506088,
    0.04901894927024841,
    0.0018447806360200047,
    0.010857752524316311,
    0.01654251292347908,
    0.011784465052187443,
    -0.0023963130079209805,
    -0.02560216560959816,
    -0.0171649307012558,
    -0.013209112919867039,
    0.034357525408267975,
    0.007731826510280371,
    -0.014633760787546635,
    -0.025920290499925613,
    0.013181449845433235,
    -0.011231204494833946,
    -0.02136971801519394,
    -0.010643363930284977,
    0.03059534914791584,
    0.043209705501794815,
    0.03081665374338627,
    -0.014578434638679028,
    -0.010442806407809258,
    0.00981347169727087,
    0.014993380755186081,
    -0.05269813910126686,
    -0.02210278809070587,
    0.00658380938693881,
    -0.020650478079915047,
    -0.020899444818496704,
    0.016832973808050156,
    0.012081843800842762,
    0.008437234908342361,
    0.017012784257531166,
    0.006172321271151304,
    0.0010736726690083742,
    -0.032006166875362396,
    -0.03560236468911171,
    -0.005131498444825411,
    0.007717994973063469,
    0.01831294782459736,
    -0.011417930014431477,
    0.007538184989243746,
    0.04882530868053436,
    -0.0035166670568287373,
    -0.028935564681887627,
    -0.01825762167572975,
    -0.00457477942109108,
    0.04304372891783714,
    -0.022171946242451668,
    -0.0023721077013760805,
    -0.023167816922068596,
    -0.025920290499925613,
    -0.007009129039943218,
    -0.02018020488321781,
    -0.01280108280479908,
    -0.009405441582202911,
    -0.009433104656636715,
    -0.01692979596555233,
    0.009426189586520195,
    0.003986939322203398,
    0.002961676800623536,
    0.011272698640823364,
    -0.0023530893959105015,
    -0.009917208924889565,
    -0.006611472461372614,
    0.0046266475692391396,
    0.007635005749762058,
    -0.015698788687586784,
    -0.04459286108613014,
    -0.014115078374743462,
    -0.013133039698004723,
    0.0042324489913880825,
    0.007455195765942335,
    0.014882728457450867,
    -0.002456825925037265,
    0.035713016986846924,
    0.000969071697909385,
    -0.002849295735359192,
    -0.0028786875773221254,
    -0.010435891337692738,
    0.0023980417754501104,
    0.012870240956544876,
    -0.020830286666750908,
    -0.0018689858261495829,
    0.015574305318295956,
    0.012109505943953991,
    -0.02117607556283474,
    -0.03446817770600319,
    0.00481337308883667,
    0.022434744983911514,
    -0.001112573896534741,
    -0.009384694509208202,
    -0.0011886473512277007,
    -0.0016105090035125613,
    -0.007711078971624374,
    -0.011120552197098732,
    0.01616906188428402,
    0.033029697835445404,
    0.009737398475408554,
    0.0048202890902757645,
    0.018050149083137512,
    0.007420617155730724,
    0.01058803778141737,
    0.025270208716392517,
    0.007932383567094803,
    0.009094232693314552,
    -0.033804263919591904,
    -0.028603607788681984,
    0.016694659367203712,
    0.005131498444825411,
    -0.043182045221328735,
    0.0014021715614944696,
    0.0033818096853792667,
    -0.013796953484416008,
    -0.033776599913835526,
    0.01982058584690094,
    0.004720010329037905,
    -0.007143986411392689,
    0.003324754536151886,
    0.0122270742431283,
    0.0012482957681640983,
    -0.02152186445891857,
    -0.004885988775640726,
    0.01634887047111988,
    0.004827204626053572,
    0.020249363034963608,
    -0.003886660560965538,
    -0.014647592790424824,
    0.003525311825796962,
    0.01753838360309601,
    0.013969847932457924,
    -0.02637673169374466,
    -0.024509474635124207,
    -0.0035287695936858654,
    -0.03336165472865105,
    -0.004509079270064831,
    -0.02485526353120804,
    0.025560671463608742,
    0.02020786888897419,
    0.013402754440903664,
    0.03181252256035805,
    0.006753245368599892,
    0.017870338633656502,
    -0.0013477099128067493,
    -0.035713016986846924,
    0.010989151895046234,
    -0.013651722110807896,
    0.011051394045352936,
    0.00933628436177969,
    -0.015491316094994545,
    -0.06002885103225708,
    -0.010221501812338829,
    0.0029219111893326044,
    0.004391511436551809,
    -0.001856883172877133,
    0.04135628044605255,
    -0.006933055352419615,
    -0.020097216591238976,
    -0.023638088256120682,
    -0.03662589564919472,
    -0.011964275501668453,
    -0.00039765654946677387,
    -0.0010771305533125997,
    -0.020249363034963608,
    -0.027995020151138306,
    0.007171649485826492,
    0.009854966774582863,
    0.008015372790396214,
    0.009246379137039185,
    0.013776206411421299,
    0.004381137900054455,
    0.02672252058982849,
    -0.018202295526862144,
    -0.025339366868138313,
    0.01452310848981142,
    0.0026400936767458916,
    0.03253176435828209,
    -0.004847952164709568,
    0.0033091939985752106,
    0.03507676720619202,
    -0.01365863811224699,
    -0.0010451450943946838,
    -0.01529767457395792,
    0.018022486940026283,
    -0.01695745810866356,
    -0.013264439068734646,
    0.02040150947868824,
    -0.004519453272223473,
    0.007192396558821201,
    -0.02731727622449398,
    0.02615542709827423,
    0.0012396511156111956,
    0.019142840057611465,
    0.0093224523589015,
    -0.027842873707413673,
    -0.008720780722796917,
    -0.008589381352066994,
    0.005750459618866444,
    -0.007814815267920494,
    0.004619731567800045,
    0.013326681219041348,
    0.017635203897953033,
    -0.0025778517592698336,
    -0.019903574138879776,
    -0.016390366479754448,
    -0.021881483495235443,
    -0.016680827364325523,
    -0.008368076756596565,
    -0.001955432817339897,
    -0.028409967198967934,
    0.002935742726549506,
    -0.014025173150002956,
    -0.01242763176560402,
    -0.020539825782179832,
    0.18268688023090363,
    0.0035339563619345427,
    0.0062829735688865185,
    0.0014082228299230337,
    -0.01616906188428402,
    0.014370962046086788,
    -0.006884645204991102,
    0.017261752858757973,
    -0.007448280230164528,
    0.03870062530040741,
    -0.02305716462433338,
    -0.005629433784633875,
    -0.004972435999661684,
    0.0006578622269444168,
    -0.0030515817925333977,
    -0.0035408721305429935,
    -0.005636349320411682,
    -0.056487977504730225,
    -0.02249007113277912,
    0.0064454940147697926,
    0.0008251373656094074,
    -0.02543618716299534,
    -0.016279714182019234,
    -0.01030449103564024,
    0.004937856923788786,
    -0.0010728081688284874,
    -0.0021732794120907784,
    -0.024509474635124207,
    0.010498132556676865,
    -0.0035166670568287373,
    -0.018340611830353737,
    0.016501018777489662,
    -0.0033835384529083967,
    0.005418502725660801,
    -0.031259261071681976,
    -0.0018050149083137512,
    0.0028095298912376165,
    -0.007330711930990219,
    0.004744215402752161,
    0.00726155424490571,
    0.006815487518906593,
    -0.025463851168751717,
    -0.0014791095163673162,
    -0.013444249518215656,
    0.0037345136515796185,
    -0.010629532858729362,
    -0.012344642542302608,
    -0.02095477096736431,
    -0.017358573153614998,
    0.01040131226181984,
    -0.027995020151138306,
    0.0028147168923169374,
    -0.007807899732142687,
    0.0008869469747878611,
    0.004962061997503042,
    -0.006559604313224554,
    -0.007856310345232487,
    0.01240688469260931,
    0.014370962046086788,
    0.011417930014431477,
    -0.014675255864858627,
    0.03659823536872864,
    -0.010007113218307495,
    0.029101543128490448,
    -0.0458100326359272,
    0.021494200453162193,
    -0.050485093146562576,
    0.009121895767748356,
    -0.001824033330194652,
    0.0054288762621581554,
    -0.016998952254652977,
    -0.004260112065821886,
    -0.02479993738234043,
    -0.016888299956917763,
    -0.02305716462433338,
    -0.011991938576102257,
    0.04370764270424843,
    0.020816456526517868,
    0.03114861063659191,
    0.004699263256043196,
    -0.0053389715030789375,
    0.027829043567180634,
    -0.00322447600774467,
    0.02710980363190174,
    -0.013907605782151222,
    -0.002449910156428814,
    0.03366594761610031,
    0.011604655534029007,
    -0.003119010478258133,
    -0.02312632091343403,
    -0.0011506106238812208,
    -0.03908791020512581,
    0.011355687864124775,
    0.01144559308886528,
    0.006587267387658358,
    -0.006632219534367323,
    -0.0004149459709879011,
    0.010235333815217018,
    0.007966962642967701,
    0.002493133768439293,
    -0.007953130640089512,
    0.037981387227773666,
    0.007572764065116644,
    -0.028133336454629898,
    -0.019585449248552322,
    0.007697247434407473,
    -0.002143887570127845,
    0.02926752157509327,
    0.012199411168694496,
    -0.019958900287747383,
    0.0077664051204919815,
    -0.009481515735387802,
    -0.01885237917304039,
    -0.014578434638679028,
    0.011030646972358227,
    -0.01829911768436432,
    -0.00962674617767334,
    0.004018059931695461,
    -0.002399770775809884,
    0.00707482872530818,
    -0.016846805810928345,
    0.006376336328685284,
    -0.012911735102534294,
    -0.003976565320044756,
    -0.026791676878929138,
    -0.02692999318242073,
    -0.004654310643672943,
    -0.0035322275944054127,
    -0.003976565320044756,
    -0.015920093283057213,
    0.03172953426837921,
    -0.023582762107253075,
    -0.0025017783045768738,
    0.0035028355196118355,
    0.0042324489913880825,
    0.013852279633283615,
    -0.021245233714580536,
    -0.020498329773545265,
    -0.0010702147847041488,
    -0.002168092643842101,
    -0.021245233714580536,
    -0.014142741449177265,
    0.01652868092060089,
    -0.024758443236351013,
    0.012745756655931473,
    -0.017054278403520584,
    0.004910193849354982,
    0.00543579226359725,
    0.011860539205372334,
    0.013043134473264217,
    -0.030733663588762283,
    0.006649509072303772,
    -0.005193740129470825,
    -0.0196131132543087,
    0.019972732290625572,
    0.001998656429350376,
    -0.018423600122332573,
    -0.01251062098890543,
    0.01233081053942442,
    0.000599942693952471,
    -0.028354641050100327,
    -0.02499357797205448,
    -0.01845126412808895,
    -0.012088758870959282,
    -0.026100100949406624,
    -0.01807781308889389,
    -0.173945352435112,
    0.01845126412808895,
    0.025118062272667885,
    -0.0400007925927639,
    0.0025450019165873528,
    -0.034744810312986374,
    0.011431761085987091,
    -0.01672232151031494,
    -0.026293743401765823,
    -0.009585252031683922,
    0.021618684753775597,
    -0.019862079992890358,
    0.0029893398750573397,
    -0.030733663588762283,
    0.02060898207128048,
    -0.021618684753775597,
    -0.0006077229627408087,
    -0.017261752858757973,
    0.017441561445593834,
    0.023541267961263657,
    0.04625264182686806,
    -0.023804066702723503,
    0.00999328214675188,
    0.019405638799071312,
    0.03441285341978073,
    -0.017358573153614998,
    -0.015021043829619884,
    0.005681301932781935,
    -0.02080262452363968,
    -0.037289809435606,
    -0.017054278403520584,
    0.0015897616976872087,
    0.020318521186709404,
    0.015726452693343163,
    0.06174395978450775,
    0.03308502584695816,
    0.007842478342354298,
    -0.0026400936767458916,
    -0.0007045436650514603,
    0.02402537129819393,
    0.008796854875981808,
    0.04921258985996246,
    0.033029697835445404,
    -0.008534055203199387,
    -0.027068307623267174,
    0.024329664185643196,
    0.017261752858757973,
    -0.013112292625010014,
    0.008921338245272636,
    0.0023012212477624416,
    0.03189551457762718,
    -0.012455294840037823,
    -0.0009794454090297222,
    -0.006964176427572966,
    0.006355589255690575,
    0.016819143667817116,
    0.018160801380872726,
    0.005062340758740902,
    -0.005432334262877703,
    -0.015311505645513535,
    0.012441462837159634,
    -0.019543955102562904,
    0.009661325253546238,
    0.0107747633010149,
    0.00423936452716589,
    -0.016003083437681198,
    -0.026805508881807327,
    0.041079651564359665,
    -0.016639333218336105,
    -0.0010209400206804276,
    -0.0029080796521157026,
    0.01482740230858326,
    -0.004218617454171181,
    -0.005833448842167854,
    0.00960599910467863,
    0.011701475828886032,
    -0.006621845997869968,
    0.03258708864450455,
    0.03598964586853981,
    -0.01865873672068119,
    -0.0026400936767458916,
    0.04237981513142586,
    -0.009529925882816315,
    0.029765456914901733,
    0.013264439068734646,
    -0.017040448263287544,
    -0.01107905711978674,
    -0.020360015332698822,
    -0.023596594110131264,
    -0.0005791953881271183,
    0.024357328191399574,
    -0.009377778507769108,
    -0.0017220258014276624,
    -0.01134185679256916,
    -0.0028406509663909674,
    0.020456835627555847,
    0.022960342466831207,
    -0.012607441283762455,
    0.004640479106456041,
    -0.03197850286960602,
    0.015104033052921295,
    0.02271137572824955,
    -0.013202197849750519,
    -0.010124681517481804,
    0.04254579171538353,
    0.024786105379462242,
    -0.024786105379462242,
    0.013181449845433235,
    0.03369361162185669,
    -0.01694362610578537,
    0.00037237079231999815,
    0.012462210841476917,
    0.003393912222236395,
    0.038396332412958145,
    -0.02307099476456642,
    0.009011243470013142,
    0.0060720425099134445,
    -0.023707246407866478,
    0.0007443093345500529,
    -0.026860835030674934,
    0.042822424322366714,
    0.009550672955811024,
    -0.011217372491955757,
    0.02598944865167141,
    0.000912016665097326,
    -0.026902329176664352,
    -0.08121875673532486,
    -0.03117627277970314,
    -0.007130154874175787,
    0.01521468535065651,
    -0.038009051233530045,
    -0.004993183072656393,
    -0.007552016526460648,
    0.04733150452375412,
    0.0026037858333438635,
    0.017441561445593834,
    -0.021618684753775597,
    -0.011666897684335709,
    -0.01347882766276598,
    -0.002685046289116144,
    -0.02229643054306507,
    -0.027427928522229195,
    -0.0236795824021101,
    -0.012372305616736412,
    -0.01749688759446144,
    0.003544330131262541,
    -0.01521468535065651,
    -0.013603311963379383,
    0.008305834606289864,
    0.017607539892196655,
    -0.0194194708019495,
    -0.016210556030273438,
    -0.023817898705601692,
    -0.00353741436265409,
    -0.004823746625334024,
    0.012275484390556812,
    0.022005967795848846,
    -0.032974373549222946,
    -0.000693305570166558,
    -0.0053216819651424885,
    0.008264340460300446,
    0.011307277716696262,
    -0.01500721275806427,
    -0.02250390313565731,
    0.021867651492357254,
    -0.0061965263448655605,
    0.016099903732538223,
    0.0123238954693079,
    0.010062439367175102,
    -0.016694659367203712,
    0.0052144876681268215,
    0.016888299956917763,
    -0.009287874214351177,
    0.019488628953695297,
    -0.010850836522877216,
    -0.003637692891061306,
    -0.0014540398260578513,
    -0.010657195933163166,
    -0.0010797239374369383,
    -0.0037656347267329693,
    0.03695785254240036,
    -0.016874469816684723,
    0.0019709933549165726,
    0.01845126412808895,
    -0.014675255864858627,
    -0.015353000722825527,
    0.024149855598807335,
    -0.019779091700911522,
    -0.006836234591901302,
    0.018354443833231926,
    0.007953130640089512,
    -0.013382007367908955,
    0.010311407037079334,
    -0.0021525321062654257,
    0.020525993779301643,
    -0.03208915516734123,
    -0.016584007069468498,
    0.015809440985322,
    -0.01615522988140583,
    0.0003866345505230129,
    -0.03219980746507645,
    -0.005916438065469265,
    -0.012344642542302608,
    -0.0025259836111217737,
    0.01824379153549671,
    0.015200854279100895,
    -0.02907388098537922,
    -0.006172321271151304,
    -0.017870338633656502,
    -0.02675018273293972,
    0.006307178642600775,
    0.03864530101418495,
    0.009516093879938126,
    0.007420617155730724,
    0.013361260294914246,
    -0.04794009029865265,
    0.007676500361412764,
    0.004457211121916771,
    0.035325732082128525,
    0.01676381751894951,
    -0.002956490032374859,
    0.01011085044592619,
    0.003907407633960247,
    0.00818826723843813,
    -0.014004426077008247,
    -0.0009336284128949046,
    -0.04235215112566948,
    -0.01231006346642971,
    -0.0753541886806488,
    0.003755260957404971,
    0.031867850571870804,
    -0.014993380755186081,
    0.017275582998991013,
    -0.02984844706952572,
    0.03076132759451866,
    -0.044177912175655365,
    0.003717224346473813,
    -0.0016597838839516044,
    -0.033970244228839874,
    -0.00702296057716012,
    -0.0047338418662548065,
    0.0002960812416858971,
    -0.0065319412387907505,
    -0.005394297651946545,
    0.061301350593566895,
    -0.005034677684307098,
    0.021978303790092468,
    -0.0028596692718565464,
    0.014329466968774796,
    -0.0027663065120577812,
    0.026791676878929138,
    0.0045920684933662415,
    -0.007206228096038103,
    -0.012552115134894848,
    -0.009066569618880749,
    0.014785908162593842,
    -0.005906064063310623,
    -0.012399968691170216,
    0.009578336030244827,
    -0.005968306213617325,
    0.007206228096038103,
    0.027082139626145363,
    0.014287972822785378,
    0.005096919368952513,
    0.01492422353476286,
    0.020194036886096,
    0.021286727860569954,
    0.020927108824253082,
    -0.02463395893573761,
    -0.004702720791101456,
    0.03543638437986374,
    -0.017247920855879784,
    0.007932383567094803,
    0.00973048247396946,
    -0.00015668533160351217,
    0.026224585250020027,
    0.04002845287322998,
    -0.02018020488321781,
    0.03908791020512581,
    0.005332055501639843,
    -0.03197850286960602,
    -0.032033827155828476,
    -0.01921199820935726,
    -0.007918552495539188,
    0.02691616117954254,
    -0.0068708136677742004,
    -0.02177083119750023,
    -0.004211701452732086,
    0.03811970353126526,
    0.004529826808720827,
    0.005923353601247072,
    -0.008610128425061703,
    -0.0023893972393125296,
    -0.03870062530040741,
    -0.0349661149084568,
    -0.03181252256035805,
    -0.005785038229078054,
    -0.009059653617441654,
    -0.016487186774611473,
    -0.03964117169380188,
    0.006649509072303772,
    0.006372878327965736,
    0.018534252420067787,
    -0.0028008853551000357,
    0.011334940791130066,
    -0.007711078971624374,
    -0.0209686029702425,
    0.004830662626773119,
    0.03120393678545952,
    -0.016846805810928345,
    -0.036681223660707474,
    0.004332727286964655,
    0.006701377220451832,
    0.0051107509061694145,
    -0.026805508881807327,
    -0.022822028025984764,
    -0.01791183464229107,
    0.020083384588360786,
    -0.01767669804394245,
    0.0024274338502436876,
    0.004332727286964655,
    0.008222846314311028,
    0.010097018443048,
    0.004512537270784378,
    -0.01134185679256916,
    -0.006915766280144453,
    0.02539469301700592,
    -0.004488332197070122,
    0.022185778245329857,
    -0.016099903732538223,
    0.011404098011553288,
    -0.021425044164061546,
    -0.014032089151442051,
    -0.011168962344527245,
    -0.0400007925927639,
    -0.012939398176968098,
    -0.01386611070483923,
    0.028382303193211555,
    0.011417930014431477,
    0.01259361021220684,
    -0.0014237833674997091,
    0.020263195037841797,
    -0.014467782340943813,
    0.02305716462433338,
    0.010919994674623013,
    0.009080400690436363,
    -0.018354443833231926,
    0.008928254246711731,
    -0.004720010329037905,
    -5.835177580593154e-05,
    0.02330613136291504,
    -0.019682269543409348,
    -0.023748740553855896,
    0.03037404455244541,
    0.008713865652680397,
    0.0023236973211169243,
    0.0009604269871488214,
    -0.009585252031683922,
    0.01674998551607132,
    0.0013978491770103574,
    -0.02710980363190174,
    -0.023734908550977707,
    -0.0038278764113783836,
    -0.03231045976281166,
    -0.0052144876681268215,
    0.0038347921799868345,
    -0.02979312092065811,
    0.07352842390537262,
    0.001656325999647379,
    0.0008692253613844514,
    0.00886601209640503,
    0.008222846314311028,
    0.01558813638985157,
    0.005857653915882111,
    0.007717994973063469,
    0.027455590665340424,
    -0.025477681308984756,
    0.00991029292345047,
    0.005473828874528408,
    -0.012925567105412483,
    -0.04489715397357941,
    -0.023970045149326324,
    0.012185580097138882,
    -0.02907388098537922,
    0.007531269453465939,
    -0.007420617155730724,
    0.0005364040844142437,
    0.010733269155025482,
    0.0012474312679842114,
    -0.008803769946098328,
    -0.018520422279834747,
    -0.029903773218393326,
    -0.009453852660953999,
    0.008589381352066994,
    0.015463653020560741,
    -0.006846608594059944,
    -0.057815805077552795,
    0.02466162107884884,
    0.007572764065116644,
    -0.013755458407104015,
    -0.011604655534029007,
    -0.010705606080591679,
    -0.004031891468912363,
    -0.003997312858700752,
    -0.008312750607728958,
    -0.012144085019826889,
    0.02692999318242073,
    -0.029018554836511612,
    0.01614139787852764,
    -0.0260032806545496,
    -0.024315834045410156,
    0.02463395893573761,
    0.0039039498660713434,
    -0.019101345911622047,
    0.002143887570127845,
    -0.04561639204621315
  ]
}
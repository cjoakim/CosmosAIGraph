{
  "classifiers": [
    "development status :: 3 - alpha",
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "natural language :: english",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9"
  ],
  "description": "# py_ecc\n\n[![join the conversation on discord](https://img.shields.io/discord/809793915578089484?color=blue&label=chat&logo=discord&logocolor=white)](https://discord.gg/ghryrvpb84)\n[![build status](https://circleci.com/gh/ethereum/py_ecc.svg?style=shield)](https://circleci.com/gh/ethereum/py_ecc)\n[![pypi version](https://badge.fury.io/py/py-ecc.svg)](https://badge.fury.io/py/py-ecc)\n[![python versions](https://img.shields.io/pypi/pyversions/py-ecc.svg)](https://pypi.python.org/pypi/py-ecc)\n\nelliptic curve crypto in python including secp256k1, alt_bn128, and bls12_381.\n\n> **warning**: this library contains some experimental codes that have **not** been audited.\n\nread more in the documentation below. [view the change log](https://github.com/ethereum/py_ecc/blob/main/changelog.rst)\n\n## quickstart\n\n```sh\npython -m pip install py_ecc\n```\n\n## bls signatures\n\n`py_ecc` implements the [ietf bls draft standard v4](https://tools.ietf.org/html/draft-irtf-cfrg-bls-signature-04) as per the inter-blockchain standardization agreement. the bls standards specify [different ciphersuites](https://tools.ietf.org/html/draft-irtf-cfrg-bls-signature-04#section-4) which each have different functionality to accommodate various use cases. the following ciphersuites are available from this library:\n\n- `g2basic` also known as `bls_sig_bls12381g2_xmd:sha-256_sswu_ro_nul_`\n- `g2messageaugmentation` also known as `bls_sig_bls12381g2_xmd:sha-256_sswu_ro_aug_`\n- `g2proofofpossession` also known as `bls_sig_bls12381g2_xmd:sha-256_sswu_ro_pop_`\n\n### basic usage\n\n```python\nfrom py_ecc.bls import g2proofofpossession as bls_pop\n\nprivate_key = 5566\npublic_key = bls_pop.sktopk(private_key)\n\nmessage = b'\\xab' * 32  # the message to be signed\n\n# signing\nsignature = bls_pop.sign(private_key, message)\n\n# verifying\nassert bls_pop.verify(public_key, message, signature)\n```\n\n### aggregating signatures\n\n```python\nprivate_keys = [3, 14, 159]\npublic_keys = [bls_pop.sktopk(key) for key in private_keys]\nsignatures = [bls_pop.sign(key, message) for key in private_keys]\n\n# aggregating\nagg_sig = bls_pop.aggregate(signatures)\n\n# verifying signatures over the same message.\n# note this is only safe if proofs of possession have been verified for each of the public keys beforehand.\n# see the bls standards for why this is the case.\nassert bls_pop.fastaggregateverify(public_keys, message, agg_sig)\n```\n\n### multiple aggregation\n\n```python\nmessages = [b'\\xaa' * 42, b'\\xbb' * 32, b'\\xcc' * 64]\nsignatures = [bls_pop.sign(key, message) for key, message in zip(private_keys, messages)]\nagg_sig = bls_pop.aggregate(signatures)\n\n# verify aggregate signature with different messages\nassert bls_pop.aggregateverify(public_keys, messages, agg_sig)\n```\n\n## developer setup\n\nif you would like to hack on py_ecc, please check out the [snake charmers\ntactical manual](https://github.com/ethereum/snake-charmers-tactical-manual)\nfor information on how we do:\n\n- testing\n- pull requests\n- documentation\n\nwe use [pre-commit](https://pre-commit.com/) to maintain consistent code style. once\ninstalled, it will run automatically with every commit. you can also run it manually\nwith `make lint`. if you need to make a commit that skips the `pre-commit` checks, you\ncan do so with `git commit --no-verify`.\n\n### development environment setup\n\nyou can set up your dev environment with:\n\n```sh\ngit clone git@github.com:ethereum/py_ecc.git\ncd py_ecc\nvirtualenv -p python3 venv\n. venv/bin/activate\npython -m pip install -e \".[dev]\"\npre-commit install\n```\n\n### release setup\n\nto release a new version:\n\n```sh\nmake release bump=$$version_part_to_bump$$\n```\n\n#### how to bumpversion\n\nthe version format for this repo is `{major}.{minor}.{patch}` for stable, and\n`{major}.{minor}.{patch}-{stage}.{devnum}` for unstable (`stage` can be alpha or beta).\n\nto issue the next version in line, specify which part to bump,\nlike `make release bump=minor` or `make release bump=devnum`. this is typically done from the\nmain branch, except when releasing a beta (in which case the beta is released from main,\nand the previous stable branch is released from said branch).\n\nif you are in a beta version, `make release bump=stage` will switch to a stable.\n\nto issue an unstable version when the current version is stable, specify the\nnew version explicitly, like `make release bump=\"--new-version 4.0.0-alpha.1 devnum\"`\n",
  "docs_url": null,
  "keywords": "ethereum",
  "license": "mit",
  "name": "py-ecc",
  "package_url": "https://pypi.org/project/py-ecc/",
  "project_url": "https://pypi.org/project/py-ecc/",
  "project_urls": {
    "Homepage": "https://github.com/ethereum/py_ecc"
  },
  "release_url": "https://pypi.org/project/py-ecc/7.0.0/",
  "requires_dist": [
    "eth-typing >=3.0.0",
    "eth-utils >=2.0.0",
    "cached-property >=1.5.1",
    "build >=0.9.0 ; extra == 'dev'",
    "bumpversion >=0.5.3 ; extra == 'dev'",
    "ipython ; extra == 'dev'",
    "pre-commit >=3.4.0 ; extra == 'dev'",
    "tox >=4.0.0 ; extra == 'dev'",
    "twine ; extra == 'dev'",
    "wheel ; extra == 'dev'",
    "sphinx >=6.0.0 ; extra == 'dev'",
    "sphinx-rtd-theme >=1.0.0 ; extra == 'dev'",
    "towncrier <22,>=21 ; extra == 'dev'",
    "pytest >=7.0.0 ; extra == 'dev'",
    "pytest-xdist >=2.4.0 ; extra == 'dev'",
    "sphinx >=6.0.0 ; extra == 'docs'",
    "sphinx-rtd-theme >=1.0.0 ; extra == 'docs'",
    "towncrier <22,>=21 ; extra == 'docs'",
    "pytest >=7.0.0 ; extra == 'test'",
    "pytest-xdist >=2.4.0 ; extra == 'test'"
  ],
  "requires_python": ">=3.8, <4",
  "summary": "py-ecc: elliptic curve crypto in python including secp256k1, alt_bn128, and bls12_381",
  "version": "7.0.0",
  "releases": [],
  "developers": [
    "snakecharmers@ethereum.org",
    "the_ethereum_foundation"
  ],
  "kwds": "py_ecc ecc pyversions python3 py",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_py_ecc",
  "homepage": "https://github.com/ethereum/py_ecc",
  "release_count": 27,
  "dependency_ids": [
    "pypi_build",
    "pypi_bumpversion",
    "pypi_cached_property",
    "pypi_eth_typing",
    "pypi_eth_utils",
    "pypi_ipython",
    "pypi_pre_commit",
    "pypi_pytest",
    "pypi_pytest_xdist",
    "pypi_sphinx",
    "pypi_sphinx_rtd_theme",
    "pypi_towncrier",
    "pypi_tox",
    "pypi_twine",
    "pypi_wheel"
  ]
}
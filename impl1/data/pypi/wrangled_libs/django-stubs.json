{
  "classifiers": [
    "framework :: django",
    "framework :: django :: 3.2",
    "framework :: django :: 4.1",
    "framework :: django :: 4.2",
    "license :: osi approved :: mit license",
    "operating system :: os independent",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.12",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "typing :: typed"
  ],
  "description": "<img src=\"https://raw.githubusercontent.com/typeddjango/django-stubs/master/logo.svg\" alt=\"django-stubs\">\n\n[![build status](https://github.com/typeddjango/django-stubs/workflows/test/badge.svg?branch=master&event=push)](https://github.com/typeddjango/django-stubs/actions?query=workflow%3atest)\n[![checked with mypy](http://www.mypy-lang.org/static/mypy_badge.svg)](http://mypy-lang.org/)\n[![gitter](https://badges.gitter.im/mypy-django/lobby.svg)](https://gitter.im/mypy-django/lobby)\n[![stackoverflow](https://shields.io/badge/ask-stackoverflow-orange?logo=stackoverflow)](https://stackoverflow.com/questions/tagged/django-stubs)\n\nthis package contains [type stubs](https://www.python.org/dev/peps/pep-0561/) and a custom mypy plugin to provide more precise static types and type inference for django framework. django uses some python \"magic\" that makes having precise types for some code patterns problematic. this is why we need this project. the final goal is to be able to get precise types for most common patterns.\n\n## installation\n\n```bash\npip install django-stubs[compatible-mypy]\n```\n\nto make mypy aware of the plugin, you need to add\n\n```ini\n[mypy]\nplugins =\n    mypy_django_plugin.main\n\n[mypy.plugins.django-stubs]\ndjango_settings_module = \"myproject.settings\"\n```\n\nin your `mypy.ini` or `setup.cfg` [file](https://mypy.readthedocs.io/en/latest/config_file.html).\n\n[pyproject.toml](https://mypy.readthedocs.io/en/stable/config_file.html#using-a-pyproject-toml-file) configurations are also supported:\n\n```toml\n[tool.mypy]\nplugins = [\"mypy_django_plugin.main\"]\n\n[tool.django-stubs]\ndjango_settings_module = \"myproject.settings\"\n```\n\ntwo things happening here:\n\n1. we need to explicitly list our plugin to be loaded by `mypy`\n2. our plugin also requires `django` settings module (what you put into `django_settings_module` variable) to be specified\n\nthis fully working [typed boilerplate](https://github.com/wemake-services/wemake-django-template) can serve you as an example.\n\n## version compatibility\n\nwe rely on different `django` and `mypy` versions:\n\n| django-stubs   | mypy version | django version | django partial support | python version |\n|----------------|--------------|----------------|------------------------|----------------|\n| 4.2.7          | 1.7.x        | 4.2            | 4.1, 3.2               | 3.8 - 3.12     |\n| 4.2.6          | 1.6.x        | 4.2            | 4.1, 3.2               | 3.8 - 3.12     |\n| 4.2.5          | 1.6.x        | 4.2            | 4.1, 3.2               | 3.8 - 3.12     |\n| 4.2.4          | 1.5.x        | 4.2            | 4.1, 3.2               | 3.8 - 3.11     |\n| 4.2.3          | 1.4.x        | 4.2            | 4.1, 3.2               | 3.8 - 3.11     |\n| 4.2.2          | 1.4.x        | 4.2            | 4.1, 3.2               | 3.8 - 3.11     |\n| 4.2.1          | 1.3.x        | 4.2            | 4.1, 3.2               | 3.8 - 3.11     |\n| 4.2.0          | 1.2.x        | 4.2            | 4.1, 4.0, 3.2          | 3.7 - 3.11     |\n| 1.16.0         | 1.1.x        | 4.1            | 4.0, 3.2               | 3.7 - 3.11     |\n| 1.15.0         | 1.0.x        | 4.1            | 4.0, 3.2               | 3.7 - 3.11     |\n| 1.14.0         | 0.990+       | 4.1            | 4.0, 3.2               | 3.7 - 3.11     |\n\n## features\n\n### type checking of model meta attributes\n\nby inheriting from the `typedmodelmeta` class, you can ensure you're using correct types for\nattributes:\n\n```python\nfrom django.db import models\nfrom django_stubs_ext.db.models import typedmodelmeta\n\nclass mymodel(models.model):\n    example = models.charfield(max_length=100)\n\n    class meta(typedmodelmeta):\n        ordering = [\"example\"]\n        constraints = [\n            models.uniqueconstraint(fields=[\"example\"], name=\"unique_example\"),\n        ]\n```\n\n### other typed base classes\n\n* `django_stubs_ext.db.router.typeddatabaserouter` can be used as base when implementing custom database routers.\n\n## settings\n\ndjango-stubs has a few settings, which you can list in:\n\n* `pyproject.toml`, under the table `[tool.django-stubs]`\n* `mypy.ini` under the table `[mypy.plugins.django-stubs]`\n\nthe supported settings are:\n\n- `django_settings_module`, a string.\n\n  specify the import path of your settings module, the same as django\u2019s [`django_settings_module` environment variable](https://docs.djangoproject.com/en/stable/topics/settings/#designating-the-settings).\n\n- `strict_settings`, a boolean, default `true`.\n\n  set to `false` if using dynamic settings, as [described below](https://github.com/typeddjango/django-stubs#how-to-use-a-custom-library-to-handle-django-settings).\n\n## faq\n\n### is this an official django project?\n\nno, it is not. we are independent from django at the moment.\nthere's a [proposal](https://github.com/django/deps/pull/65) to merge our project into the django itself.\nyou can show your support by liking the pr.\n\n### is it safe to use this in production?\n\nyes, it is! this project does not affect your runtime at all.\nit only affects `mypy` type checking process.\n\nbut, it does not make any sense to use this project without `mypy`.\n\n### mypy crashes when i run it with this plugin installed\n\nthe current implementation uses django's runtime to extract information about models, so it might crash if your installed apps or `models.py` are broken.\n\nin other words, if your `manage.py runserver` crashes, mypy will crash too.\nyou can also run `mypy` with [`--tb`](https://mypy.readthedocs.io/en/stable/command_line.html#cmdoption-mypy-show-traceback)\noption to get extra information about the error.\n\n### i cannot use queryset or manager with type annotations\n\nyou can get a `typeerror: 'type' object is not subscriptable`\nwhen you will try to use `queryset[mymodel]`, `manager[mymodel]` or some other django-based generic types.\n\nthis happens because these django classes do not support [`__class_getitem__`](https://www.python.org/dev/peps/pep-0560/#class-getitem) magic method in runtime.\n\n1. you can go with our [`django_stubs_ext`](https://github.com/typeddjango/django-stubs/tree/master/ext) helper, that patches all the types we use as generic in django.\n\n   install it:\n\n   ```bash\n   pip install django-stubs-ext  # as a production dependency\n   ```\n\n   and then place in your top-level settings:\n\n   ```python\n   import django_stubs_ext\n\n   django_stubs_ext.monkeypatch()\n   ```\n\n   you can add extra types to patch with `django_stubs_ext.monkeypatch(extra_classes=[yourdesiredtype])`\n\n2. you can use strings instead: `'queryset[mymodel]'` and `'manager[mymodel]'`, this way it will work as a type for `mypy` and as a regular `str` in runtime.\n\n### how can i create a httprequest that's guaranteed to have an authenticated user?\n\ndjango's built in [`httprequest`](https://docs.djangoproject.com/en/4.1/ref/request-response/#django.http.httprequest) has the attribute `user` that resolves to the type\n\n```python\nunion[user, anonymoususer]\n```\n\nwhere `user` is the user model specified by the `auth_user_model` setting.\n\nif you want a `httprequest` that you can type-annotate with where you know that the user is authenticated you can subclass the normal `httprequest` class like so:\n\n```python\nfrom django.http import httprequest\nfrom my_user_app.models import myuser\n\n\nclass authenticatedhttprequest(httprequest):\n    user: myuser\n```\n\nand then use `authenticatedhttprequest` instead of the standard `httprequest` for when you know that the user is authenticated. for example in views using the `@login_required` decorator.\n\n### my queryset methods are returning any rather than my model\n\nif you are using `myqueryset.as_manager()`:\n\nexample:\n\n```python\nfrom django.db import models\n\nclass mymodelqueryset(models.queryset):\n    pass\n\n\nclass mymodel(models.model):\n    bar = models.integerfield()\n    objects = mymodelqueryset.as_manager()\n\n\ndef use_my_model() -> int:\n    foo = mymodel.objects.get(id=1) # should now be `mymodel`\n    return foo.xyz # gives an error\n```\n\nor if you're using `manager.from_queryset`:\n\nexample:\n\n```python\nfrom django.db import models\n\n\nclass mymodelqueryset(models.queryset):\n    pass\n\n\nmymodelmanager = models.manager.from_queryset(mymodelqueryset)\n\n\nclass mymodel(models.model):\n    bar = models.integerfield()\n    objects = mymodelmanager()\n\n\ndef use_my_model() -> int:\n    foo = mymodel.objects.get(id=1) # should now be `mymodel`\n    return foo.xyz # gives an error\n```\n\n### why am i getting incompatible return type errors on my custom managers?\n\nif you declare your custom managers without generics and override built-in\nmethods you might see an error message about incompatible error messages,\nsomething like this:\n\n```python\nfrom django.db import models\n\nclass mymanager(model.manager):\n    def create(self, **kwargs) -> \"mymodel\":\n        pass\n```\n\nwill cause this error message:\n\n> error: return type \"mymodel\" of \"create\" incompatible with return type \"_t\" in supertype \"basemanager\"\n\nthis is happening because the `manager` class is generic, but without\nspecifying generics the built-in manager methods are expected to return the\ngeneric type of the base manager, which is any model. to fix this issue you\nshould declare your manager with your model as the type variable:\n\n```python\nclass mymanager(models.manager[\"mymodel\"]):\n    ...\n```\n\n### how do i annotate cases where i called queryset.annotate?\n\ndjango-stubs provides a special type, `django_stubs_ext.withannotations[model]`, which indicates that the `model` has\nbeen annotated, meaning it allows getting/setting extra attributes on the model instance.\n\noptionally, you can provide a `typeddict` of these attributes,\ne.g. `withannotations[mymodel, mytypeddict]`, to specify which annotated attributes are present.\n\ncurrently, the mypy plugin can recognize that specific names were passed to `queryset.annotate` and\ninclude them in the type, but does not record the types of these attributes.\n\nthe knowledge of the specific annotated fields is not yet used in creating more specific types for `queryset`'s\n`values`, `values_list`, or `filter` methods, however knowledge that the model was annotated _is_ used to create a\nbroader type result type for `values`/`values_list`, and to allow `filter`ing on any field.\n\n```python\nfrom typing import typeddict\nfrom django_stubs_ext import withannotations\nfrom django.db import models\nfrom django.db.models.expressions import value\n\n\nclass mymodel(models.model):\n    username = models.charfield(max_length=100)\n\n\ndef func(m: withannotations[mymodel]) -> str:\n    return m.asdf  # ok, since the model is annotated as allowing any attribute\n\n\nfunc(mymodel.objects.annotate(foo=value(\"\")).get(id=1))  # ok\nfunc(\n    mymodel.objects.get(id=1)\n)  # error, since this model will not allow access to any attribute\n\n\nclass mytypeddict(typeddict):\n    foo: str\n\n\ndef func2(m: withannotations[mymodel, mytypeddict]) -> str:\n    print(m.bar)  # error, since field \"bar\" is not in mymodel or mytypeddict.\n    return m.foo  # ok, since we said field \"foo\" was allowed\n\n\nfunc(mymodel.objects.annotate(foo=value(\"\")).get(id=1))  # ok\nfunc(mymodel.objects.annotate(bar=value(\"\")).get(id=1))  # error\n```\n\n### how do i check if something is an instance of queryset in runtime?\n\na limitation of making `queryset` generic is that you can not use\nit for `isinstance` checks.\n\n```python\nfrom django.db.models.query import queryset\n\ndef foo(obj: object) -> none:\n    if isinstance(obj, queryset): # error: parameterized generics cannot be used with class or instance checks\n        ...\n```\n\nto get around with this issue without making `queryset` non-generic,\ndjango-stubs provides `django_stubs_ext.querysetany`, a non-generic\nvariant of `queryset` suitable for runtime type checking:\n\n```python\nfrom django_stubs_ext import querysetany\n\ndef foo(obj: object) -> none:\n    if isinstance(obj, querysetany):  # ok\n        ...\n```\n\n### why am i getting incompatible argument type mentioning `_strpromise`?\n\nthe lazy translation functions of django (such as `gettext_lazy`) return a `promise` instead of `str`. these two types [cannot be used interchangeably](https://github.com/typeddjango/django-stubs/pull/1139#issuecomment-1232167698). the return type of these functions was therefore [changed](https://github.com/typeddjango/django-stubs/pull/689) to reflect that.\n\nif you encounter this error in your own code, you can either cast the `promise` to `str` (causing the translation to be evaluated), or use the `strpromise` or `strorpromise` types from `django-stubs-ext` in type hints. which solution to choose depends depends on the particular case. see [working with lazy translation objects](https://docs.djangoproject.com/en/4.1/topics/i18n/translation/#working-with-lazy-translation-objects) in the django documentation for more information.\n\nif this is reported on django code, please report an issue or open a pull request to fix the type hints.\n\n### how to use a custom library to handle django settings?\n\nusing something like [`django-split-settings`](https://github.com/wemake-services/django-split-settings) or [`django-configurations`](https://github.com/jazzband/django-configurations) will make it hard for mypy to infer your settings.\n\nthis might also be the case when using something like:\n\n```python\ntry:\n    from .local_settings import *\nexcept exception:\n    pass\n```\n\nso, mypy would not like this code:\n\n```python\nfrom django.conf import settings\n\nsettings.custom_value  # e: 'settings' object has no attribute 'custom_setting'\n```\n\nto handle this corner case we have a special setting `strict_settings` (`true` by default),\nyou can switch it to `false` to always return `any` and not raise any errors if runtime settings module has the given value,\nfor example `pyproject.toml`:\n\n```toml\n[tool.django-stubs]\nstrict_settings = false\n```\n\nor `mypy.ini`:\n\n```ini\n[mypy.plugins.django-stubs]\nstrict_settings = false\n```\n\nand then:\n\n```python\n# works:\nreveal_type(settings.exists_in_runtime)  # n: any\n\n# errors:\nreveal_type(settings.missing)  # e: 'settings' object has no attribute 'missing'\n```\n\n## related projects\n\n- [`awesome-python-typing`](https://github.com/typeddjango/awesome-python-typing) - awesome list of all typing-related things in python.\n- [`djangorestframework-stubs`](https://github.com/typeddjango/djangorestframework-stubs) - stubs for django rest framework.\n- [`pytest-mypy-plugins`](https://github.com/typeddjango/pytest-mypy-plugins) - `pytest` plugin that we use for testing `mypy` stubs and plugins.\n- [`wemake-django-template`](https://github.com/wemake-services/wemake-django-template) - create new typed django projects in seconds.\n\n## to get help\n\nwe have gitter here: <https://gitter.im/mypy-django/lobby>\nif you think you have more generic typing issue, please refer to <https://github.com/python/mypy> and their gitter.\n\n## contributing\n\nthis project is open source and community driven. as such we encourage contributions big and small. you can contribute by doing any of the following:\n\n1. contribute code (e.g. improve stubs, add plugin capabilities, write tests etc) - to do so please follow the [contribution guide](./contributing.md).\n2. assist in code reviews and discussions in issues.\n3. identify bugs and issues and report these\n4. ask and answer questions on [stackoverflow](https://stackoverflow.com/questions/tagged/django-stubs)\n\nyou can always also reach out in gitter to discuss your contributions!\n",
  "docs_url": null,
  "keywords": "",
  "license": "mit",
  "name": "django-stubs",
  "package_url": "https://pypi.org/project/django-stubs/",
  "project_url": "https://pypi.org/project/django-stubs/",
  "project_urls": {
    "Homepage": "https://github.com/typeddjango/django-stubs",
    "Release notes": "https://github.com/typeddjango/django-stubs/releases"
  },
  "release_url": "https://pypi.org/project/django-stubs/4.2.7/",
  "requires_dist": [
    "django",
    "django-stubs-ext >=4.2.7",
    "typing-extensions",
    "types-pytz",
    "types-PyYAML",
    "tomli ; python_version < \"3.11\"",
    "mypy ~=1.7.0 ; extra == 'compatible-mypy'"
  ],
  "requires_python": ">=3.8",
  "summary": "mypy stubs for django",
  "version": "4.2.7",
  "releases": [],
  "developers": [
    "maksim_kurnikov",
    "marti@juffo.org",
    "marti_raudsepp",
    "maxim.kurnikov@gmail.com"
  ],
  "kwds": "django mypy_badge django_stubs_ext djangorestframework djangoproject",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_django_stubs",
  "homepage": "https://github.com/typeddjango/django-stubs",
  "release_count": 52,
  "dependency_ids": [
    "pypi_django",
    "pypi_django_stubs_ext",
    "pypi_mypy",
    "pypi_tomli",
    "pypi_types_pytz",
    "pypi_types_pyyaml",
    "pypi_typing_extensions"
  ]
}
{
  "classifiers": [
    "development status :: 4 - beta",
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "programming language :: python :: 3.4",
    "programming language :: python :: 3.5",
    "programming language :: python :: 3.6",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "programming language :: python :: implementation :: pypy"
  ],
  "description": "paramiko expect\n===============\n\n.. image:: https://img.shields.io/pypi/l/paramiko-expect.svg\n   :target: https://github.com/fgimian/paramiko-expect/blob/master/license\n\n.. image:: https://codecov.io/gh/fgimian/paramiko-expect/branch/master/graph/badge.svg\n   :target: https://codecov.io/gh/fgimian/paramiko-expect\n\n.. image:: https://img.shields.io/travis/fgimian/paramiko-expect.svg\n   :target: https://travis-ci.org/fruch/paramiko-expect/\n\n.. image:: https://img.shields.io/pypi/v/paramiko-expect.svg\n   :target: https://pypi.python.org/pypi/paramiko-expect/\n\n.. image:: https://img.shields.io/pypi/pyversions/paramiko-expect.svg\n   :target:  https://pypi.python.org/pypi/paramiko-expect/\n\n\n.. image:: https://raw.githubusercontent.com/fgimian/paramiko-expect/master/images/paramiko-expect-logo.png\n   :alt: paramiko expect logo\n\nartwork courtesy of `open clip art\nlibrary <https://openclipart.org/detail/174780/openmouthed-robot>`_\n\nintroduction\n------------\n\nparamiko expect provides an expect-like extension for the paramiko ssh library\nwhich allows scripts to fully interact with hosts via a true ssh\nconnection.\n\nthe class is constructed with an ssh client object (this will likely be\nextended to support a transport in future for more flexibility).\n\nquick start\n-----------\n\nto install paramiko-expect, simply run the following at your prompt:\n\n.. code:: bash\n\n    # from pypi\n    pip install paramiko-expect\n\n    # from source\n    pip install git+https://github.com/fgimian/paramiko-expect.git\n\nso let's check out how it works in general (please see\n`paramiko_expect-demo.py <https://github.com/fgimian/paramiko-expect/blob/master/examples/paramiko_expect-demo.py>`_\nfor the complete code):\n\n.. code:: python\n\n    # connect to the host\n    client.connect(hostname=hostname, username=username, password=password)\n\n    # create a client interaction class which will interact with the host\n    interact = sshclientinteraction(client, timeout=10, display=true)\n    interact.expect(prompt)\n\n    # run the first command and capture the cleaned output, if you want the output\n    # without cleaning, simply grab current_output instead.\n    interact.send('uname -a')\n    interact.expect(prompt)\n    cmd_output_uname = interact.current_output_clean\n\n    # now let's do the same for the ls command but also set a timeout for this\n    # specific expect (overriding the default timeout)\n    interact.send('ls -l /')\n    interact.expect(prompt, timeout=5)\n    cmd_output_ls = interact.current_output_clean\n\n    # to expect multiple expressions, just use a list.  you can also selectively\n    # take action based on what was matched.\n\n    # method 1: you may use the last_match property to find out what was matched\n    interact.send('~/paramiko_expect-demo-helper.py')\n    interact.expect([prompt, 'please enter your name: '])\n    if interact.last_match == 'please enter your name: ':\n        interact.send('fotis gimian')\n        interact.expect(prompt)\n\n    # method 2: you may use the matched index to determine the last match (like pexpect)\n    interact.send('~/paramiko_expect-demo-helper.py')\n    found_index = interact.expect([prompt, 'please enter your name: '])\n    if found_index == 1:\n        interact.send('fotis gimian')\n        interact.expect(prompt)\n\n    # send the exit command and expect eof (a closed session)\n    interact.send('exit')\n    interact.expect()\n\n    # print the output of each command\n    print '-'*79\n    print 'cleaned command output'\n    print '-'*79\n    print 'uname -a output:'\n    print cmd_output_uname\n    print 'ls -l / output:'\n    print cmd_output_ls\n\n**important**: before running this script, be sure to place\n`paramiko_expect-demo-helper.py <https://github.com/fgimian/paramiko-expect/blob/master/examples/paramiko_expect-demo-helper.py>`_\nin ``~``.\n\nthe print statements at the bottom of the script provide the following\noutput:\n\n.. code:: bash\n\n    -------------------------------------------------------------------------------\n    cleaned command output\n    -------------------------------------------------------------------------------\n    uname -a output:\n    linux fotsies-ubuntu-testlab 3.2.0-23-generic #36-ubuntu smp tue apr 10 20:39:51 utc 2012 x86_64 x86_64 x86_64 gnu/linux\n\n    ls -l / output:\n    total 77\n    drwxr-xr-x  2 root root  4096 may  1 22:21 bin\n    drwxr-xr-x  4 root root  1024 may  1 22:22 boot\n    drwxr-xr-x 15 root root  4300 jun 12 15:00 dev\n    drwxr-xr-x 90 root root  4096 jun 12 16:45 etc\n    drwxr-xr-x  4 root root  4096 may  1 23:37 home\n    lrwxrwxrwx  1 root root    33 may  1 22:18 initrd.img -> /boot/initrd.img-3.2.0-23-generic\n    drwxr-xr-x 18 root root  4096 may  1 22:21 lib\n    drwxr-xr-x  2 root root  4096 may  1 22:17 lib64\n    drwx------  2 root root 16384 may  1 22:17 lost+found\n    drwxr-xr-x  4 root root  4096 may  1 22:18 media\n    drwxr-xr-x  2 root root  4096 apr 19 19:32 mnt\n    drwxr-xr-x  2 root root  4096 may  1 22:17 opt\n    dr-xr-xr-x 84 root root     0 jun 12 15:00 proc\n    drwx------  3 root root  4096 may 30 23:32 root\n    drwxr-xr-x 15 root root   560 jun 12 17:02 run\n    drwxr-xr-x  2 root root  4096 jun  4 20:59 sbin\n    drwxr-xr-x  2 root root  4096 mar  6 04:54 selinux\n    drwxr-xr-x  2 root root  4096 may  1 22:17 srv\n    drwxr-xr-x 13 root root     0 jun 12 15:00 sys\n    drwxrwxrwt  2 root root  4096 jun 12 16:17 tmp\n    drwxr-xr-x 10 root root  4096 may  1 22:17 usr\n    drwxr-xr-x 12 root root  4096 jun 12 13:16 var\n    lrwxrwxrwx  1 root root    29 may  1 22:18 vmlinuz -> boot/vmlinuz-3.2.0-23-generic\n\nfor interacting with tail-like scripts, we can use the tail function (please see\n`paramiko_expect-tail-demo.py <https://github.com/fgimian/paramiko-expect/blob/master/examples/paramiko_expect-tail-demo.py>`_\nfor the complete code):\n\n.. code:: python\n\n    # connect to the host\n    client.connect(hostname=hostname, username=username, password=password)\n\n    # create a client interaction class which will interact with the host\n    interact = sshclientinteraction(client, timeout=10, display=false)\n    interact.expect(prompt)\n\n    # send the tail command\n    interact.send('tail -f /var/log/auth.log')\n\n    # now let the class tail the file for us\n    interact.tail(line_prefix=hostname+': ')\n\nthe true power of the tail function will become more apparent when you\ncheck out the `multi-ssh <https://github.com/fgimian/multissh>`_\nlibrary. ever thought about tailing a log on multiple servers? well\ndream no more my friend, it's here!\n\n\ntests\n-----\n\nnot full coverage yet, and assumes you have docker setup:\n\n.. code:: bash\n\n    pip install -r requirements-test.txt\n    docker run -d -p 2222:22 -v `pwd`/examples:/examples -v `pwd`/test/id_rsa.pub:/root/.ssh/authorized_keys  docker.io/panubo/sshd\n    pytest -s --cov paramiko_expect --cov-report term-missing\n\n\ncontributions\n-------------\n\n- israel fruchter (@fruch) - tests / ci / uploads to pypi\n- kiseok kim (@kiseok7) - vagrent image\n\n\nlicense\n-------\n\nparamiko expect is released under the **mit** license. please see the\n`license <https://github.com/fgimian/paramiko-expect/blob/master/license>`_\nfile for more details.\n",
  "docs_url": null,
  "keywords": "",
  "license": "mit",
  "name": "paramiko-expect",
  "package_url": "https://pypi.org/project/paramiko-expect/",
  "project_url": "https://pypi.org/project/paramiko-expect/",
  "project_urls": {
    "Homepage": "https://github.com/fgimian/paramiko-expect"
  },
  "release_url": "https://pypi.org/project/paramiko-expect/0.3.5/",
  "requires_dist": [
    "paramiko (>=1.10.1)"
  ],
  "requires_python": "",
  "summary": "an expect-like extension for the paramiko ssh library",
  "version": "0.3.5",
  "releases": [],
  "developers": [
    "fgimiansoftware@gmail.com",
    "fotis_gimian"
  ],
  "kwds": "paramiko_expect paramiko expect svg testlab",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_paramiko_expect",
  "homepage": "https://github.com/fgimian/paramiko-expect",
  "release_count": 7,
  "dependency_ids": [
    "pypi_paramiko"
  ]
}
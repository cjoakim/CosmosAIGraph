{
  "classifiers": [
    "development status :: 6 - mature",
    "intended audience :: science/research",
    "license :: osi approved :: bsd license",
    "operating system :: os independent",
    "programming language :: python",
    "programming language :: python :: 2",
    "programming language :: python :: 2.7",
    "programming language :: python :: 3",
    "programming language :: python :: 3.4",
    "programming language :: python :: 3.5",
    "programming language :: python :: 3.6",
    "programming language :: python :: 3.7",
    "programming language :: python :: implementation :: cpython",
    "programming language :: python :: implementation :: pypy",
    "topic :: scientific/engineering :: astronomy"
  ],
  "description": "jdcal\n=====\n\n.. _tpm: http://www.sal.wisc.edu/~jwp/astro/tpm/tpm.html\n.. _jeffrey w. percival: http://www.sal.wisc.edu/~jwp/\n.. _iau sofa: http://www.iausofa.org/\n.. _pip: https://pypi.org/project/pip/\n.. _easy_install: https://setuptools.readthedocs.io/en/latest/easy_install.html\n\n.. image:: https://travis-ci.org/phn/jdcal.svg?branch=master\n    :target: https://travis-ci.org/phn/jdcal\n\n\nthis module contains functions for converting between julian dates and\ncalendar dates.\n\na function for converting gregorian calendar dates to julian dates, and\nanother function for converting julian calendar dates to julian dates\nare defined. two functions for the reverse calculations are also\ndefined.\n\ndifferent regions of the world switched to gregorian calendar from\njulian calendar on different dates. having separate functions for julian\nand gregorian calendars allow maximum flexibility in choosing the\nrelevant calendar.\n\njulian dates are stored in two floating point numbers (double).  julian\ndates, and modified julian dates, are large numbers. if only one number\nis used, then the precision of the time stored is limited. using two\nnumbers, time can be split in a manner that will allow maximum\nprecision. for example, the first number could be the julian date for\nthe beginning of a day and the second number could be the fractional\nday. calculations that need the latter part can now work with maximum\nprecision.\n\nall the above functions are \"proleptic\". this means that they work for\ndates on which the concerned calendar is not valid. for example,\ngregorian calendar was not used prior to around october 1582.\n\na function to test if a given gregorian calendar year is a leap year is\nalso defined.\n\nzero point of modified julian date (mjd) and the mjd of 2000/1/1\n12:00:00 are also given as module level constants.\n\nexamples\n--------\n\nsome examples are given below. for more information see\nhttps://oneau.wordpress.com/2011/08/30/jdcal/.\n\ngregorian calendar:\n\n.. code-block:: python\n\n    >>> from jdcal import gcal2jd, jd2gcal\n    >>> gcal2jd(2000,1,1)\n    (2400000.5, 51544.0)\n    >>> 2400000.5 + 51544.0 + 0.5\n    2451545.0\n\n    >>> gcal2jd(2000,2,30)\n    (2400000.5, 51604.0)\n    >>> gcal2jd(2000,3,1)\n    (2400000.5, 51604.0)\n    >>> gcal2jd(2001,2,30)\n    (2400000.5, 51970.0)\n    >>> gcal2jd(2001,3,2)\n    (2400000.5, 51970.0)\n\n    >>> jd2gcal(*gcal2jd(2000,1,1))\n    (2000, 1, 1, 0.0)\n    >>> jd2gcal(*gcal2jd(1950,1,1))\n    (1950, 1, 1, 0.0)\n\n    >>> gcal2jd(2000,1,1)\n    (2400000.5, 51544.0)\n    >>> jd2gcal(2400000.5, 51544.0)\n    (2000, 1, 1, 0.0)\n    >>> jd2gcal(2400000.5, 51544.5)\n    (2000, 1, 1, 0.5)\n    >>> jd2gcal(2400000.5, 51544.245)\n    (2000, 1, 1, 0.24500000000261934)\n    >>> jd2gcal(2400000.5, 51544.1)\n    (2000, 1, 1, 0.099999999998544808)\n    >>> jd2gcal(2400000.5, 51544.75)\n    (2000, 1, 1, 0.75)\n\njulian calendar:\n\n.. code-block:: python\n\n    >>> jd2jcal(*jcal2jd(2000, 1, 1))\n    (2000, 1, 1, 0.0)\n    >>> jd2jcal(*jcal2jd(-4000, 10, 11))\n    (-4000, 10, 11, 0.0)\n\ngregorian leap year:\n\n.. code-block:: python\n\n    >>> from jdcal import is_leap\n    >>> is_leap(2000)\n    true\n    >>> is_leap(2100)\n    false\n\njd for zero point of mjd, and mjd for jd2000.0:\n\n.. code-block:: python\n\n    >>> from jdcal import mjd_0, mjd_jd2000\n    >>> print mjd_0\n    2400000.5\n    >>> print mjd_jd2000\n    51544.5\n\n\ninstallation\n------------\n\nthe module can be installed using `pip`_ or `easy_install`_::\n\n  $ pip install jdcal\n\nor,\n\n::\n\n  $ easy_install jdcal\n\n\ntests are in ``test_jdcal.py``.\n\ncredits\n--------\n\n1. a good amount of the code is based on the excellent `tpm`_ c library\n   by `jeffrey w. percival`_.\n2. the inspiration to split julian dates into two numbers came from the\n   `iau sofa`_ c library. no code or algorithm from the sofa library is\n   used in `jdcal`.\n\nlicense\n-------\n\nreleased under bsd; see license.txt.\n\nfor comments and suggestions, email to user `prasanthhn` in the `gmail.com`\ndomain.\n\n\n",
  "docs_url": null,
  "keywords": "",
  "license": "bsd",
  "name": "jdcal",
  "package_url": "https://pypi.org/project/jdcal/",
  "project_url": "https://pypi.org/project/jdcal/",
  "project_urls": {
    "Homepage": "https://github.com/phn/jdcal"
  },
  "release_url": "https://pypi.org/project/jdcal/1.4.1/",
  "requires_dist": [],
  "requires_python": "",
  "summary": "julian dates from proleptic gregorian and julian calendars.",
  "version": "1.4.1",
  "releases": [],
  "developers": [
    "prasanth_nair",
    "prasanthhn@gmail.com"
  ],
  "kwds": "gregorian calendar calendars dates pip",
  "license_kwds": "bsd",
  "libtype": "pypi",
  "id": "pypi_jdcal",
  "homepage": "https://github.com/phn/jdcal",
  "release_count": 5,
  "dependency_ids": []
}
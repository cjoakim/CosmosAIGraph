{
  "classifiers": [
    "development status :: 5 - production/stable",
    "framework :: pytest",
    "intended audience :: developers",
    "operating system :: os independent",
    "programming language :: python",
    "programming language :: python :: 2",
    "programming language :: python :: 2.7",
    "programming language :: python :: 3",
    "programming language :: python :: 3.4",
    "programming language :: python :: 3.5",
    "programming language :: python :: 3.6",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "topic :: software development :: libraries"
  ],
  "description": "# snapshottest [![travis][travis-image]][travis-url] [![pypi][pypi-image]][pypi-url]\n\n[travis-image]: https://img.shields.io/travis/syrusakbary/snapshottest.svg?style=flat\n[travis-url]: https://travis-ci.org/syrusakbary/snapshottest\n[pypi-image]: https://img.shields.io/pypi/v/snapshottest.svg?style=flat\n[pypi-url]: https://pypi.python.org/pypi/snapshottest\n\n\nsnapshot testing is a way to test your apis without writing actual test cases.\n\n1. a snapshot is a single state of your api, saved in a file.\n2. you have a set of snapshots for your api endpoints.\n3. once you add a new feature, you can generate *automatically* new snapshots for the updated api.\n\n## installation\n\n    $ pip install snapshottest\n\n\n## usage with unittest/nose\n\n```python\nfrom snapshottest import testcase\n\nclass apitestcase(testcase):\n    def test_api_me(self):\n        \"\"\"testing the api for /me\"\"\"\n        my_api_response = api.client.get('/me')\n        self.assertmatchsnapshot(my_api_response)\n\n        # set custom snapshot name: `gpg_response`\n        my_gpg_response = api.client.get('/me?gpg_key')\n        self.assertmatchsnapshot(my_gpg_response, 'gpg_response')\n```\n\nif you want to update the snapshots automatically you can use the `nosetests --snapshot-update`.\n\ncheck the [unittest example](https://github.com/syrusakbary/snapshottest/tree/master/examples/unittest).\n\n## usage with pytest\n\n```python\ndef test_mything(snapshot):\n    \"\"\"testing the api for /me\"\"\"\n    my_api_response = api.client.get('/me')\n    snapshot.assert_match(my_api_response)\n\n    # set custom snapshot name: `gpg_response`\n    my_gpg_response = api.client.get('/me?gpg_key')\n    snapshot.assert_match(my_gpg_response, 'gpg_response')\n```\n\nif you want to update the snapshots automatically you can use the `--snapshot-update` config.\n\ncheck the [pytest example](https://github.com/syrusakbary/snapshottest/tree/master/examples/pytest).\n\n## usage with django\nadd to your settings:\n```python\ntest_runner = 'snapshottest.django.testrunner'\n```\nto create your snapshottest:\n```python\nfrom snapshottest.django import testcase\n\nclass apitestcase(testcase):\n    def test_api_me(self):\n        \"\"\"testing the api for /me\"\"\"\n        my_api_response = api.client.get('/me')\n        self.assertmatchsnapshot(my_api_response)\n```\nif you want to update the snapshots automatically you can use the `python manage.py test --snapshot-update`.\ncheck the [django example](https://github.com/syrusakbary/snapshottest/tree/master/examples/django_project).\n\n## disabling terminal colors\n\nset the environment variable `ansi_colors_disabled` (to any value), e.g. \n\n    ansi_colors_disabled=1 pytest\n\n\n# contributing\n\nafter cloning this repo and configuring a virtualenv for snapshottest (optional, but highly recommended), ensure dependencies are installed by running:\n\n```sh\nmake install\n```\n\nafter developing, the full test suite can be evaluated by running:\n\n```sh\nmake lint\n# and\nmake test\n```\n\n# notes\n\nthis package is heavily inspired in [jest snapshot testing](https://facebook.github.io/jest/docs/snapshot-testing.html).\n\n# reasons to use this package\n\n> most of this content is taken from the [jest snapshot blogpost](https://facebook.github.io/jest/blog/2016/07/27/jest-14.html).\n\nwe want to make it as frictionless as possible to write good tests that are useful.\nwe observed that when engineers are provided with ready-to-use tools, they end up writing more tests, which in turn results in stable and healthy code bases.\n\nhowever engineers frequently spend more time writing a test than the component itself. as a result many people stopped writing tests altogether which eventually led to instabilities.\n\na typical snapshot test case for a mobile app renders a ui component, takes a screenshot, then compares it to a reference image stored alongside the test. the test will fail if the two images do not match: either the change is unexpected, or the screenshot needs to be updated to the new version of the ui component.\n\n\n## snapshot testing with snapshottest\n\na similar approach can be taken when it comes to testing your apis.\ninstead of rendering the graphical ui, which would require building the entire app, you can use a test renderer to quickly generate a serializable value for your api response.\n\n\n## license\n\n[mit license](https://github.com/syrusakbary/snapshottest/blob/master/license)\n\n[![coveralls][coveralls-image]][coveralls-url]\n\n[coveralls-image]: https://coveralls.io/repos/syrusakbary/snapshottest/badge.svg?branch=master&service=github\n[coveralls-url]: https://coveralls.io/github/syrusakbary/snapshottest?branch=master\n\n\n",
  "docs_url": null,
  "keywords": "",
  "license": "mit",
  "name": "snapshottest",
  "package_url": "https://pypi.org/project/snapshottest/",
  "project_url": "https://pypi.org/project/snapshottest/",
  "project_urls": {
    "Homepage": "https://github.com/syrusakbary/snapshottest"
  },
  "release_url": "https://pypi.org/project/snapshottest/0.6.0/",
  "requires_dist": [
    "six (>=1.10.0)",
    "termcolor",
    "fastdiff (<1,>=0.1.4)",
    "nose ; extra == 'nose'",
    "pytest ; extra == 'pytest'",
    "six ; extra == 'test'",
    "pytest (>=4.6) ; extra == 'test'",
    "pytest-cov ; extra == 'test'",
    "nose ; extra == 'test'",
    "django (>=1.10.6) ; extra == 'test'"
  ],
  "requires_python": "",
  "summary": "snapshot testing for pytest, unittest, django, and nose",
  "version": "0.6.0",
  "releases": [],
  "developers": [
    "me@syrusakbary.com",
    "syrus_akbary"
  ],
  "kwds": "snapshottest test_api_me apitestcase pypi pytest",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_snapshottest",
  "homepage": "https://github.com/syrusakbary/snapshottest",
  "release_count": 10,
  "dependency_ids": [
    "pypi_django",
    "pypi_fastdiff",
    "pypi_nose",
    "pypi_pytest",
    "pypi_pytest_cov",
    "pypi_six",
    "pypi_termcolor"
  ]
}
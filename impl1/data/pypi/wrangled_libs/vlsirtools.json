{
  "classifiers": [],
  "description": "\n# vlsir tools \n\npython-based tools and utilites for working with the vlsir ic design schema. \n\n## netlisting \n\nfixme! details here. \n\n## spice-class simulation \n\nvlsirtools includes drivers and result-parsers for popular spice-class simulation engines including: \n\n```python \nclass supportedsimulators(enum):\n    \"\"\"enumerated, internally-defined spice-class simulators\"\"\"\n\n    spectre = \"spectre\"\n    xyce = \"xyce\"\n    ngspice = \"ngspice\"\n```\n\nthe primary entry-point for simulation is `vlsirtools.spice.sim`. by default, `sim` runs your chosen simulator in parallel over the list of `siminputs` provided as `inp`.\n\n```python\ndef sim(\n    inp: oneormore[vsp.siminput], opts: optional[simoptions] = none\n) -> oneormore[simresultunion]:\n```\n\nthe `sim` function takes as input one or more `vlsir.spice.siminput`s and a set of simulation options (`vlsirtools.spice.simoptions`), and returns one of two result-types depending on its input `options`.\n\n```python\nclass resultformat(enum):\n    \"\"\"enumerated result formats\"\"\"\n\n    sim_data = \"sim_data\" \n    vlsir_proto = \"vlsir_proto\" \n```\n\nthe `vlsir_proto` result-format returns a `vlsir.spice.simresult` object, which is a protobuf-encoded representation of the simulation results. the `sim_data` format instead uses the types defined in `vlsirtools.spice.sim_data`, a python-native combination of dataclasses and numpy arrays. the former is generally more convenient for sharing with other programs, and the latter for further in-python processing. \n\n### simulator and analysis support\n\neach spice-class simulator includes its own netlist syntax and opinions about the specification for analyses. \nthe `vlsir.spice` schema  \n\n| analysis             | spectre            | xyce               | ngspice     |\n| -------------------- | ------------------ | ------------------ | ------------------ |\n| op                   | :white_check_mark: | :white_check_mark: | :white_check_mark: |\n| dc                   | :white_check_mark: | :white_check_mark: | |\n| tran                 | :white_check_mark: | :white_check_mark: | :white_check_mark: |\n| ac                   | :white_check_mark: | :white_check_mark: | :white_check_mark: |\n| noise                |                    |                    | :white_check_mark: |\n| sweep                |  |  |  |\n| monte carlo          |  |  |  |\n| custom               |  |  |  |\n\n",
  "docs_url": null,
  "keywords": "",
  "license": "",
  "name": "vlsirtools",
  "package_url": "https://pypi.org/project/vlsirtools/",
  "project_url": "https://pypi.org/project/vlsirtools/",
  "project_urls": {
    "Homepage": "https://github.com/Vlsir/Vlsir"
  },
  "release_url": "https://pypi.org/project/vlsirtools/5.0.0/",
  "requires_dist": [],
  "requires_python": ">=3.7, <3.12",
  "summary": "tools for the vlsir ic design schema",
  "version": "5.0.0",
  "releases": [],
  "developers": [
    "dan@fritch.mn",
    "dan_fritchman"
  ],
  "kwds": "vlsir vlsir_proto vlsirtools simulators simulator",
  "license_kwds": "",
  "libtype": "pypi",
  "id": "pypi_vlsirtools",
  "homepage": "https://github.com/vlsir/vlsir",
  "release_count": 14,
  "dependency_ids": []
}
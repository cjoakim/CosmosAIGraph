{
  "classifiers": [],
  "description": ".. -*- mode: rst -*-\n\n===============================================================\nparsley: a pattern-matching language based on ometa and python\n===============================================================\n\nyou can read further docs at: http://parsley.readthedocs.org/en/latest/\n\nsummary\n-------\n\nparsley is a parsing library for people who find parsers scary or\nannoying. i wrote it because i wanted to parse a programming language,\nand tools like ply or antlr or bison were very hard to understand and\nintegrate into my python code. most parser generators are based on ll\nor lr parsing algorithms that compile to big state machine\ntables. it was like i had to wake up a different section of my brain\nto understand or work on grammar rules.\n\nparsley, like pyparsing and zestyparser, uses the peg algorithm, so\neach expression in the grammar rules works like a python\nexpression. in particular, alternatives are evaluated in order, unlike\ntable-driven parsers such as yacc, bison or ply.\n\nparsley is an implementation of ometa, an object-oriented\npattern-matching language developed by alessandro warth at\nhttp://tinlizzie.org/ometa/ . for further reading, see warth's phd\nthesis, which provides a detailed description of ometa:\nhttp://www.vpri.org/pdf/tr2008003_experimenting.pdf\n\nhow it works\n------------\n\nparsley compiles a grammar to a python class, with the rules as methods. the\nrules specify parsing expressions, which consume input and return values if\nthey succeed in matching.\n\nbasic syntax\n~~~~~~~~~~~~\n``foo = ....``:\n   define a rule named foo.\n\n``expr1 expr2``:\n   match expr1, and then match expr2 if it succeeds, returning the value of\n   expr2. like python's ``and``.\n\n``expr1 | expr2``:\n  try to match ``expr1`` --- if it fails, match ``expr2`` instead. like python's\n  ``or``.\n\n``expr*``:\n  match ``expr`` zero or more times, returning a list of matches.\n\n``expr+``:\n  match ``expr`` one or more times, returning a list of matches.\n\n``expr?``:\n  try to match ``expr``. returns ``none`` if it fails to match.\n\n``expr{n, m}``:\n  match ``expr`` at least ``n`` times, and no more than ``m`` times.\n\n``expr{n}``:\n  match ``expr`` ``n`` times exactly.\n\n``~expr``:\n  negative lookahead. fails if the next item in the input matches\n  ``expr``. consumes no input.\n\n``~~expr``:\n  positive lookahead. fails if the next item in the input does *not*\n  match ``expr``. consumes no input.\n\n``rulename`` or ``rulename(arg1 arg2 etc)``:\n  call the rule ``rulename``, possibly with args.\n\n``'x'``:\n  match the literal character 'x'.\n\n``<expr>``:\n  returns the string consumed by matching ``expr``. good for tokenizing rules.\n\n``expr:name``:\n  bind the result of expr to the local variable ``name``.\n\n``-> pythonexpression``:\n  evaluate the given python expression and return its result. can be\n  used inside parentheses too!\n\n``!(pythonexpression)``:\n  invoke a python expression as an action.\n\n``?(pythonexpression)``:\n  fail if the python expression is false, returns true otherwise.\n\ncomments like python comments are supported as well, starting with #\nand extending to the end of the line.\n\ninterface\n---------\n\nthe starting point for defining a new grammar is\n``parsley.makegrammar(grammarsource, bindings)``, which takes a grammar\ndefinition and a dict of variable bindings for its embedded\nexpressions and produces a python class. grammars can be subclassed as\nusual, and makegrammar can be called on these classes to override\nrules and provide new ones. grammar rules are exposed as methods.\n\nexample usage\n-------------\n\n::\n\n    from parsley import makegrammar\n    examplegrammar = \"\"\"\n    ones = '1' '1' -> 1\n    twos = '2' '2' -> 2\n    stuff = (ones | twos)+\n    \"\"\"\n    example = makegrammar(examplegrammar, {})\n    g = example(\"11221111\")\n    result = g.stuff()\n    print result\n\n\u2192  ``[1, 2, 1, 1]``",
  "docs_url": null,
  "keywords": "",
  "license": "mit license",
  "name": "parsley",
  "package_url": "https://pypi.org/project/Parsley/",
  "project_url": "https://pypi.org/project/Parsley/",
  "project_urls": {
    "Homepage": "http://launchpad.net/parsley"
  },
  "release_url": "https://pypi.org/project/Parsley/1.3/",
  "requires_dist": [],
  "requires_python": null,
  "summary": "parsing and pattern matching made easy.",
  "version": "1.3",
  "releases": [],
  "developers": [
    "allen_short",
    "washort42@gmail.com"
  ],
  "kwds": "parsley parsers parser parse parsing",
  "license_kwds": "mit license",
  "libtype": "pypi",
  "id": "pypi_parsley",
  "homepage": "http://launchpad.net/parsley",
  "release_count": 4,
  "dependency_ids": []
}
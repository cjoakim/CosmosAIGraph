{
  "classifiers": [
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.12",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9"
  ],
  "description": "# semsql: standard sql views for rdf/owl ontologies\n\n[![pypi version](https://badge.fury.io/py/semsql.svg)](https://badge.fury.io/py/semsql)\n![](https://github.com/incatools/semantic-sql/workflows/build/badge.svg)\n\n\nthis project provides a standard collection of sql tables/views for ontologies, such that you can make queries like this,\nto find all terms starting with `abnormality` in [hpo](https://obofoundry.org/ontology/hp).\n\n```sql\n$ sqlite db/hp.db\nsqlite> select * from rdfs_label_statement where value like 'abnormality of %';\n```\n\n|stanza|subject|predicate|object|value|datatype|language|\n|---|---|---|---|---|---|---|\n|hp:0000002|hp:0000002|rdfs:label||abnormality of body height|xsd:string||\n|hp:0000014|hp:0000014|rdfs:label||abnormality of the bladder|xsd:string||\n|hp:0000022|hp:0000022|rdfs:label||abnormality of male internal genitalia|xsd:string||\n|hp:0000032|hp:0000032|rdfs:label||abnormality of male external genitalia|xsd:string||\n\n\nready-made sqlite3 builds can also be downloaded for any ontology in [obo](http://obofoundry.org), using urls such as https://s3.amazonaws.com/bbop-sqlite/hp.db\n\n[relation-graph](https://github.com/balhoff/relation-graph/) is used to pre-generate tables of [entailed edges](https://incatools.github.io/semantic-sql/entailededge/). for example,\nall is-a and part-of ancestors of [finger](http://purl.obolibrary.org/obo/uberon_0002389) in uberon:\n\n```sql\n$ sqlite db/uberon.db\nsqlite> select * from entailed_edge where subject='uberon:0002389' and predicate in ('rdfs:subclassof', 'bfo:0000050');\n```\n\n|subject, predicate, object|\n|---|\n|uberon:0002389, bfo:0000050, uberon:0015212|\n|uberon:0002389, bfo:0000050, uberon:5002389|\n|uberon:0002389, bfo:0000050, uberon:5002544|\n|uberon:0002389, rdfs:subclassof, uberon:0000061|\n|uberon:0002389, rdfs:subclassof, uberon:0000465|\n|uberon:0002389, rdfs:subclassof, uberon:0000475|\n\nsqlite provides many advantages\n\n- files can be downloaded and subsequently queried without network latency\n- compared to querying a static rdf, owl, or obo file, there is no startup/parse delay\n- robust and performant\n- excellent support in many languages\n\nalthough the focus is on sqlite, this library can also be used for other dbmss like postgresql, mysql, oracle, etc\n\n## tutorials\n\n- semsql: [notebooks/semanticsql-tutorial.ipynb](https://github.com/incatools/semantic-sql/blob/main/notebooks/semanticsql-tutorial.ipynb)\n- using oak: [part 7 of oak tutorial](https://incatools.github.io/ontology-access-kit/intro/tutorial07.html)\n\n## installation\n\nsemsql comes with a helper python library. use of this is optional. to install:\n\n```bash\npip install semsql\n```\n\n## download ready-made sqlite databases\n\npre-generated sqlite database are created weekly for all obo ontologies and a selection of others (see [ontologies.yaml](https://github.com/incatools/semantic-sql/blob/main/src/semsql/builder/registry/ontologies.yaml))\n\nto download:\n\n```bash\nsemsql download obi -o obi.db\n```\n\nor simply download using url of the form:\n\n- https://s3.amazonaws.com/bbop-sqlite/hp.db\n\n## attaching databases\n\nif you are using sqlite3, then databases can be attached to facilitate cross-database joins.\n\nfor example, many ontologies use orcid uris as the object of `dcterms:contributor` and `dcterms:creator` statements, but these are left \"dangling\". metadata about these orcids are available in the semsql orcid database instance (derived from [wikidata-orcid-ontology](https://github.com/cthoyt/wikidata-orcid-ontology)), in the [orcid table](https://incatools.github.io/semantic-sql/orcid).\n\nyou can use [attach database](https://www.sqlite.org/lang_attach.html) to connect two databases, for example:\n\n```sql\n$ sqlite3 db/cl.dl\nsqlite> attach 'db/orcid.db' as orcid_db;\nsqlite> select * from contributor inner join orcid_db.orcid on (orcid.id=contributor.object) where orcid.label like 'chris%';\nobo:cl.owl|obo:cl.owl|dcterms:contributor|orcid:0000-0002-6601-2165||||orcid:0000-0002-6601-2165|christopher j. mungall\ncl:0010001|cl:0010001|dcterms:contributor|orcid:0000-0002-6601-2165||||orcid:0000-0002-6601-2165|christopher j. mungall\ncl:0010002|cl:0010002|dcterms:contributor|orcid:0000-0002-6601-2165||||orcid:0000-0002-6601-2165|christopher j. mungall\ncl:0010003|cl:0010003|dcterms:contributor|orcid:0000-0002-6601-2165||||orcid:0000-0002-6601-2165|christopher j. mungall\ncl:0010004|cl:0010004|dcterms:contributor|orcid:0000-0002-6601-2165||||orcid:0000-0002-6601-2165|christopher j. mungall\nuberon:0000093|uberon:0000093|dcterms:contributor|orcid:0000-0002-6601-2165||||orcid:0000-0002-6601-2165|christopher j. mungall\nuberon:0000094|uberon:0000094|dcterms:contributor|orcid:0000-0002-6601-2165||||orcid:0000-0002-6601-2165|christopher j. mungall\nuberon:0000095|uberon:0000095|dcterms:contributor|orcid:0000-0002-6601-2165||||orcid:0000-0002-6601-2165|christopher j. mungall\nuberon:0000179|uberon:0000179|dcterms:contributor|orcid:0000-0002-6601-2165||||orcid:0000-0002-6601-2165|christopher j. mungall\nuberon:0000201|uberon:0000201|dcterms:contributor|orcid:0000-0002-6601-2165||||orcid:0000-0002-6601-2165|christopher j. mungall\nuberon:0000202|uberon:0000202|dcterms:contributor|orcid:0000-0002-6601-2165||||orcid:0000-0002-6601-2165|christopher j. mungall\nuberon:0000203|uberon:0000203|dcterms:contributor|orcid:0000-0002-6601-2165||||orcid:0000-0002-6601-2165|christopher j. mungall\nuberon:0000204|uberon:0000204|dcterms:contributor|orcid:0000-0002-6601-2165||||orcid:0000-0002-6601-2165|christopher j. mungall\n```\n\n## creating a sqlite database from an owl file\n\nthere are two protocols for doing this:\n\n1. install build dependencies\n2. use docker\n\nin either case:\n\n- the input must be in rdf/xml serialization and have the suffix `.owl`:\n- use robot to convert if format is different\n\nwe are planning to simplify this process in future.\n\n### 1. build a sqlite database directly\n\nthis requires some basic technical knowledge about how to install things on your machine\nand how to put things in your path. it does not require docker.\n\nrequirements:\n\n- [rdftab.rs](https://github.com/ontodev/rdftab.rs)\n- [relation-graph](https://github.com/balhoff/relation-graph)\n\nafter installing these and putting both `relation-graph` and `rdftab.rs` in your path:\n\n```bash\nsemsql make foo.db\n```\n\nthis assumes `foo.owl` is in the same folder\n\n### 2. use docker\n\nthere are two docker images that can be used:\n\n- odk\n- [semantic-sql](https://hub.docker.com/repository/docker/linkml/semantic-sql)\n\nthe odk image may lag behind\n\n```bash\ndocker run  -v $pwd:/work -w /work -ti linkml/semantic-sql semsql make foo.db\n```\n\n## schema\n\nsee [schema documentation](https://incatools.github.io/semantic-sql/)\n\nthe [source schema](https://github.com/incatools/semantic-sql/tree/main/src/semsql/linkml) is in [linkml](https://linkml.io) - this is then compiled down to sql tables and views\n\nthe basic idea is as follows:\n\nthere are a small number of \"base tables\":\n\n* [statements](https://incatools.github.io/semantic-sql/statements/)\n* [prefix](https://incatools.github.io/semantic-sql/prefix/)\n* [entailed_edge](https://incatools.github.io/semantic-sql/entailededge/) - populated by relation-graph\n\nall other tables are actually views (derived tables), and are provided for convenience.\n\n## orm layer\n\na semsql relational database can be accessed in exactly the same way as any other sqldb\n\nfor convenience, we provide a python object-relational mapping (orm) layer using sql alchemy.\nthis allows for code uchlike the following, which joins [rdfssubclassofstatement](https://incatools.github.io/semantic-sql/rdfssubclassofstatement) and [existential restrictions](https://incatools.github.io/semantic-sql/owlsomevaluesfrom):\n\n```python\nengine = create_engine(f\"sqlite:////path/to/go.db\")\nsessionclass = sessionmaker(bind=engine)\nsession = sessionclass()\nq = session.query(rdfssubclassofstatement)\nq = q.add_entity(owlsomevaluesfrom)\nq = q.join(owlsomevaluesfrom, rdfssubclassofstatement.object == owlsomevaluesfrom.id)\n\nlines = []\nfor ax, ex in q.all():\n    line = f'{ax.subject} subclassof {ex.on_property} some {ex.filler}'\n    logging.info(line)\n    lines.append(line)\n```    \n\n(this example is just for illustration - to do the same thing there is a simpler edge relation)\n\n## applications\n\nthe semsql python library is intentionally low level - we recommend using the [ontology-access-kit](https://github.com/incatools/ontology-access-kit)\n\nfor example:\n\n```bash\nrunoak -i db/envo.db search t~biome\n```\n\nyou can also pass in an owl file and have the sqlite be made on the fly\n\n```bash\nrunoak -i sqlite:envo.owl search t~biome\n```\n\neven if using oak, it can be useful to access sql tables directly to do complex multi-join queries in a performant way.\n\n## optimization\n\n```bash\npoetry run semsql view2table edge --full-index | sqlite3 $db/mydb.db\n```\n\nsee [indexes](indexes) for some ready-made indexes\n\n",
  "docs_url": null,
  "keywords": "",
  "license": "",
  "name": "semsql",
  "package_url": "https://pypi.org/project/semsql/",
  "project_url": "https://pypi.org/project/semsql/",
  "project_urls": null,
  "release_url": "https://pypi.org/project/semsql/0.3.3/",
  "requires_dist": [
    "SQLAlchemy-Utils (>=0.38.2,<0.39.0)",
    "click (>=8.1.3,<9.0.0)",
    "linkml-runtime (>=1.2.15,<2.0.0)"
  ],
  "requires_python": ">=3.8,<4.0",
  "summary": "",
  "version": "0.3.3",
  "releases": [],
  "developers": [
    "cjm@berkeleybop.org",
    "cmungall"
  ],
  "kwds": "semanticsql rdfs_label_statement semsql ontologies semantic",
  "license_kwds": "",
  "libtype": "pypi",
  "id": "pypi_semsql",
  "homepage": "",
  "release_count": 17,
  "dependency_ids": [
    "pypi_click",
    "pypi_linkml_runtime",
    "pypi_sqlalchemy_utils"
  ]
}
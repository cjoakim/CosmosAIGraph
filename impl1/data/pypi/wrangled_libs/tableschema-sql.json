{
  "classifiers": [
    "development status :: 4 - beta",
    "environment :: web environment",
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "operating system :: os independent",
    "programming language :: python :: 2",
    "programming language :: python :: 2.7",
    "programming language :: python :: 3",
    "programming language :: python :: 3.3",
    "programming language :: python :: 3.4",
    "programming language :: python :: 3.5",
    "topic :: internet :: www/http :: dynamic content",
    "topic :: software development :: libraries :: python modules"
  ],
  "description": "# tableschema-sql-py\n\n[![travis](https://img.shields.io/travis/frictionlessdata/tableschema-sql-py/master.svg)](https://travis-ci.org/frictionlessdata/tableschema-sql-py)\n[![coveralls](http://img.shields.io/coveralls/frictionlessdata/tableschema-sql-py/master.svg)](https://coveralls.io/r/frictionlessdata/tableschema-sql-py?branch=master)\n[![pypi](https://img.shields.io/pypi/v/tableschema-sql.svg)](https://pypi.python.org/pypi/tableschema-sql)\n[![github](https://img.shields.io/badge/github-master-brightgreen)](https://github.com/frictionlessdata/tableschema-sql-py)\n[![gitter](https://img.shields.io/gitter/room/frictionlessdata/chat.svg)](https://gitter.im/frictionlessdata/chat)\n\ngenerate and load sql tables based on [table schema](http://specs.frictionlessdata.io/table-schema/) descriptors.\n\n## features\n\n- implements `tableschema.storage` interface\n- provides additional features like indexes and updating\n\n## contents\n\n<!--toc-->\n\n  - [getting started](#getting-started)\n    - [installation](#installation)\n  - [documentation](#documentation)\n  - [api reference](#api-reference)\n    - [`storage`](#storage)\n  - [contributing](#contributing)\n  - [changelog](#changelog)\n\n<!--toc-->\n\n## getting started\n\n### installation\n\nthe package use semantic versioning. it means that major versions  could include breaking changes. it's highly recommended to specify `package` version range in your `setup/requirements` file e.g. `package>=1.0,<2.0`.\n\n```bash\npip install tableschema-sql\n```\n\n## documentation\n\n```python\nfrom datapackage import package \nfrom tableschema import table\nfrom sqlalchemy import create_engine\n\n# create sqlalchemy engine\nengine = create_engine('sqlite://')\n\n# save package to sql\npackage = package('datapackage.json')\npackage.save(storage='sql', engine=engine)\n\n# load package from sql\npackage = package(storage='sql', engine=engine)\npackage.resources\n```\n\n## api reference\n\n### `storage`\n```python\nstorage(self, engine, dbschema=none, prefix='', reflect_only=none, autoincrement=none)\n```\nsql storage\n\npackage implements\n[tabular storage](https://github.com/frictionlessdata/tableschema-py#storage)\ninterface (see full documentation on the link):\n\n![storage](https://i.imgur.com/rqgrxqp.png)\n\n> only additional api is documented\n\n__arguments__\n- __engine (object)__: `sqlalchemy` engine\n- __dbschema (str)__: name of database schema\n- __prefix (str)__: prefix for all buckets\n- __reflect_only (callable)__:\n        a boolean predicate to filter the list of table names when reflecting\n- __autoincrement (str/dict)__:\n        add autoincrement column at the beginning.\n          - if a string it's an autoincrement column name\n          - if a dict it's an autoincrements mapping with column\n            names indexed by bucket names, for example,\n            `{'bucket1': 'id', 'bucket2': 'other_id}`\n\n\n#### `storage.create`\n```python\nstorage.create(self, bucket, descriptor, force=false, indexes_fields=none)\n```\ncreate bucket\n\n__arguments__\n- __indexes_fields (str[])__:\n        list of tuples containing field names, or list of such lists\n\n\n#### `storage.write`\n```python\nstorage.write(self, bucket, rows, keyed=false, as_generator=false, update_keys=none, buffer_size=1000, use_bloom_filter=true)\n```\nwrite to bucket\n\n__arguments__\n- __keyed (bool)__:\n        accept keyed rows\n- __as_generator (bool)__:\n        returns generator to provide writing control to the client\n- __update_keys (str[])__:\n        update instead of inserting if key values match existent rows\n- __buffer_size (int=1000)__:\n        maximum number of rows to try and write to the db in one batch\n- __use_bloom_filter (bool=true)__:\n        should we use a bloom filter to optimize db update performance\n        (in exchange for some setup time)\n\n\n## contributing\n\n> the project follows the [open knowledge international coding standards](https://github.com/okfn/coding-standards).\n\nrecommended way to get started is to create and activate a project virtual environment.\nto install package and development dependencies into active environment:\n\n```bash\n$ make install\n```\n\nto run tests with linting and coverage:\n\n```bash\n$ make test\n```\n\n## changelog\n\nhere described only breaking and the most important changes. the full changelog and documentation for all released versions could be found in nicely formatted [commit history](https://github.com/frictionlessdata/tableschema-sql-py/commits/master).\n\n#### v1.3\n\n- implemented constraints loading to a database\n\n#### v1.2\n\n- add option to configure buffer size, bloom filter use (#77)\n\n#### v1.1\n\n- added support for the `autoincrement` parameter to be a mapping\n- fixed autoincrement support for sqlite and mysql\n\n#### v1.0\n\n- initial driver implementation.\n\n",
  "docs_url": null,
  "keywords": "frictionless data",
  "license": "mit",
  "name": "tableschema-sql",
  "package_url": "https://pypi.org/project/tableschema-sql/",
  "project_url": "https://pypi.org/project/tableschema-sql/",
  "project_urls": {
    "Homepage": "https://github.com/frictionlessdata/tableschema-sql-py"
  },
  "release_url": "https://pypi.org/project/tableschema-sql/2.0.1/",
  "requires_dist": [
    "six (>=1.9)",
    "sqlalchemy (<3,>=1.4)",
    "pybloom-live (>=2.2)",
    "tabulator (>=1.1)",
    "tableschema (>=1.0)",
    "cryptography",
    "coverage ; extra == 'develop'",
    "mock ; extra == 'develop'",
    "pylama ; extra == 'develop'",
    "pytest ; extra == 'develop'",
    "pytest-cov ; extra == 'develop'",
    "psycopg2 ; extra == 'develop'",
    "pymysql ; extra == 'develop'",
    "python-dotenv ; extra == 'develop'"
  ],
  "requires_python": "",
  "summary": "generate sql tables, load and extract data, based on json table schema descriptors.",
  "version": "2.0.1",
  "releases": [],
  "developers": [
    "info@okfn.org",
    "open_knowledge_foundation"
  ],
  "kwds": "tableschema sqlalchemy tables frictionlessdata table",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_tableschema_sql",
  "homepage": "https://github.com/frictionlessdata/tableschema-sql-py",
  "release_count": 17,
  "dependency_ids": [
    "pypi_coverage",
    "pypi_cryptography",
    "pypi_mock",
    "pypi_psycopg2",
    "pypi_pybloom_live",
    "pypi_pylama",
    "pypi_pymysql",
    "pypi_pytest",
    "pypi_pytest_cov",
    "pypi_python_dotenv",
    "pypi_six",
    "pypi_sqlalchemy",
    "pypi_tableschema",
    "pypi_tabulator"
  ]
}
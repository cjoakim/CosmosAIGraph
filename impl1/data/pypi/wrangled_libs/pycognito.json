{
  "classifiers": [
    "environment :: web environment",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.6",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: software development :: libraries :: python modules"
  ],
  "description": "# pycognito\n\nmakes working with aws cognito easier for python developers.\n\n## getting started\n\n- [python versions supported](#python-versions-supported)\n- [install](#install)\n- [environment variables](#environment-variables)\n  - [cognito_jwks](#cognito-jwks) (optional)\n- [cognito utility class](#cognito-utility-class) `pycognito.cognito`\n  - [cognito methods](#cognito-methods)\n    - [register](#register)\n    - [authenticate](#authenticate)\n    - [admin authenticate](#admin-authenticate)\n    - [initiate forgot password](#initiate-forgot-password)\n    - [confirm forgot password](#confirm-forgot-password)\n    - [change password](#change-password)\n    - [confirm sign up](#confirm-sign-up)\n    - [update profile](#update-profile)\n    - [send verification](#send-verification)\n    - [get user object](#get-user-object)\n    - [get user](#get-user)\n    - [get users](#get-users)\n    - [get group object](#get-group-object)\n    - [get group](#get-group)\n    - [get groups](#get-groups)\n    - [check token](#check-token)\n    - [verify tokens](#verify-tokens)\n    - [logout](#logout)\n    - [associate software token](#associate-software-token)\n    - [verify software token](#verify-software-token)\n    - [set user mfa preference](#set-user-mfa-preference)\n    - [respond to software token mfa challenge](#respond-to-software-token-mfa-challenge)\n    - [respond to sms mfa challenge](#respond-to-sms-mfa-challenge)\n- [cognito srp utility](#cognito-srp-utility)\n  - [using awssrp](#using-awssrp)\n- [srp requests authenticator](#srp-requests-authenticator)\n\n## python versions supported\n\n- 3.6\n- 3.7\n- 3.8\n\n## install\n\n`pip install pycognito`\n\n## environment variables\n\n#### cognito_jwks\n\n**optional:** this environment variable is a dictionary that represent the well known jwks assigned to your user pool by aws cognito. you can find the keys for your user pool by substituting in your aws region and pool id for the following example.\n`https://cognito-idp.{aws-region}.amazonaws.com/{user-pool-id}/.well-known/jwks.json`\n\n**example value (not real):**\n\n```commandline\ncognito_jwks={\"keys\": [{\"alg\": \"rs256\",\"e\": \"aqab\",\"kid\": \"123456789abcdefghijklmnop\",\"kty\": \"rsa\",\"n\": \"123456789abcdefghijklmnop\",\"use\": \"sig\"},{\"alg\": \"rs256\",\"e\": \"aqab\",\"kid\": \"123456789abcdefghijklmnop\",\"kty\": \"rsa\",\"n\": \"123456789abcdefghijklmnop\",\"use\": \"sig\"}]}\n```\n\n## cognito utility class\n\n### example with all arguments\n\n```python\nfrom pycognito import cognito\n\nu = cognito('your-user-pool-id','your-client-id',\n    client_secret='optional-client-secret'\n    username='optional-username',\n    id_token='optional-id-token',\n    refresh_token='optional-refresh-token',\n    access_token='optional-access-token',\n    access_key='optional-access-key',\n    secret_key='optional-secret-key')\n```\n\n#### arguments\n\n- **user_pool_id:** cognito user pool id\n- **client_id:** cognito user pool application client id\n- **client_secret:** app client secret (if app client is configured with client secret)\n- **username:** user pool username\n- **id_token:** id token returned by authentication\n- **refresh_token:** refresh token returned by authentication\n- **access_token:** access token returned by authentication\n- **access_key:** aws iam access key\n- **secret_key:** aws iam secret key\n\n### examples with realistic arguments\n\n#### user pool id and client id only\n\nused when you only need information about the user pool (ex. list users in the user pool)\n\n```python\nfrom pycognito import cognito\n\nu = cognito('your-user-pool-id','your-client-id')\n```\n\n#### username\n\nused when the user has not logged in yet. start with these arguments when you plan to authenticate with either srp (authenticate) or admin_authenticate (admin_initiate_auth).\n\n```python\nfrom pycognito import cognito\n\nu = cognito('your-user-pool-id','your-client-id',\n    username='bob')\n```\n\n#### tokens\n\nused after the user has already authenticated and you need to build a new cognito instance (ex. for use in a view).\n\n```python\nfrom pycognito import cognito\n\nu = cognito('your-user-pool-id','your-client-id',\n    id_token='your-id-token',\n    refresh_token='your-refresh-token',\n    access_token='your-access-token')\n\nu.verify_tokens() # see method doc below; may throw an exception\n```\n\n## cognito attributes\n\nafter any authentication or other explicit verification of tokens, the following additional attributes will be available:\n\n- `id_claims` \u2014 a dict of verified claims from the id token\n- `access_claims` \u2014 a dict of verified claims from the access token\n\n## cognito methods\n\n#### register\n\nregister a user to the user pool\n\n**important:** the arguments for `set_base_attributes` and `add_custom_attributes` methods depend on your user pool's configuration, and make sure the client id (app id) used has write permissions for the attributes you are trying to create. example, if you want to create a user with a given_name equal to johnson make sure the client_id you're using has permissions to edit or create given_name for a user in the pool.\n\n```python\nfrom pycognito import cognito\n\nu = cognito('your-user-pool-id', 'your-client-id')\n\nu.set_base_attributes(email='you@you.com', some_random_attr='random value')\n\nu.register('username', 'password')\n```\n\nregister with custom attributes.\n\nfirstly, add custom attributes on 'general settings -> attributes' page.\nsecondly, set permissions on 'generals settings-> app clients-> show details-> set attribute read and write permissions' page.\n\n```python\nfrom pycognito import cognito\n\nu = cognito('your-user-pool-id', 'your-client-id')\n\nu.set_base_attributes(email='you@you.com', some_random_attr='random value')\n\nu.add_custom_attributes(state='virginia', city='centreville')\n\nu.register('username', 'password')\n```\n\n##### arguments\n\n- **username:** user pool username\n- **password:** user pool password\n- **attr_map:** attribute map to cognito's attributes\n\n#### authenticate\n\nauthenticates a user\n\nif this method call succeeds the instance will have the following attributes **id_token**, **refresh_token**, **access_token**, **expires_in**, **expires_datetime**, and **token_type**.\n\n```python\nfrom pycognito import cognito\n\nu = cognito('your-user-pool-id','your-client-id',\n    username='bob')\n\nu.authenticate(password='bobs-password')\n```\n\n##### arguments\n\n- **password:** - user's password\n\n#### admin authenticate\n\nauthenticate the user using admin super privileges\n\n```python\nfrom pycognito import cognito\n\nu = cognito('your-user-pool-id','your-client-id',\n    username='bob')\n\nu.admin_authenticate(password='bobs-password')\n```\n\n- **password:** user's password\n\n#### initiate forgot password\n\nsends a verification code to the user to use to change their password.\n\n```python\nu = cognito('your-user-pool-id','your-client-id',\n    username='bob')\n\nu.initiate_forgot_password()\n```\n\n##### arguments\n\nno arguments\n\n#### confirm forgot password\n\nallows a user to enter a code provided when they reset their password\nto update their password.\n\n```python\nu = cognito('your-user-pool-id','your-client-id',\n    username='bob')\n\nu.confirm_forgot_password('your-confirmation-code','your-new-password')\n```\n\n##### arguments\n\n- **confirmation_code:** the confirmation code sent by a user's request\n  to retrieve a forgotten password\n- **password:** new password\n\n#### change password\n\nchanges the user's password\n\n```python\nfrom pycognito import cognito\n\n#if you don't use your tokens then you will need to\n#use your username and password and call the authenticate method\nu = cognito('your-user-pool-id','your-client-id',\n    id_token='id-token',refresh_token='refresh-token',\n    access_token='access-token')\n\nu.change_password('previous-password','proposed-password')\n```\n\n##### arguments\n\n- **previous_password:** - user's previous password\n- **proposed_password:** - the password that the user wants to change to.\n\n#### confirm sign up\n\nuse the confirmation code that is sent via email or text to confirm the user's account\n\n```python\nfrom pycognito import cognito\n\nu = cognito('your-user-pool-id','your-client-id')\n\nu.confirm_sign_up('users-conf-code',username='bob')\n```\n\n##### arguments\n\n- **confirmation_code:** confirmation code sent via text or email\n- **username:** user's username\n\n#### update profile\n\nupdate the user's profile\n\n```python\nfrom pycognito import cognito\n\nu = cognito('your-user-pool-id','your-client-id',\n    id_token='id-token',refresh_token='refresh-token',\n    access_token='access-token')\n\nu.update_profile({'given_name':'edward','family_name':'smith',},attr_map=dict())\n```\n\n##### arguments\n\n- **attrs:** dictionary of attribute name, values\n- **attr_map:** dictionary map from cognito attributes to attribute names we would like to show to our users\n\n#### send verification\n\nsend verification email or text for either the email or phone attributes.\n\n```python\nfrom pycognito import cognito\n\nu = cognito('your-user-pool-id','your-client-id',\n    id_token='id-token',refresh_token='refresh-token',\n    access_token='access-token')\n\nu.send_verification(attribute='email')\n```\n\n##### arguments\n\n- **attribute:** - the attribute (email or phone) that needs to be verified\n\n#### get user object\n\nreturns an instance of the specified user_class.\n\n```python\nu = cognito('your-user-pool-id','your-client-id',\n    id_token='id-token',refresh_token='refresh-token',\n    access_token='access-token')\n\nu.get_user_obj(username='bjones',\n    attribute_list=[{'name': 'string','value': 'string'},],\n    metadata={},\n    attr_map={\"given_name\":\"first_name\",\"family_name\":\"last_name\"}\n    )\n```\n\n##### arguments\n\n- **username:** username of the user\n- **attribute_list:** list of tuples that represent the user's attributes as returned by the admin_get_user or get_user boto3 methods\n- **metadata: (optional)** metadata about the user\n- **attr_map: (optional)** dictionary that maps the cognito attribute names to what we'd like to display to the users\n\n#### get user\n\nget all of the user's attributes. gets the user's attributes using boto3 and uses that info to create an instance of the user_class\n\n```python\nfrom pycognito import cognito\n\nu = cognito('your-user-pool-id','your-client-id',\n    username='bob')\n\nuser = u.get_user(attr_map={\"given_name\":\"first_name\",\"family_name\":\"last_name\"})\n```\n\n##### arguments\n\n- **attr_map:** dictionary map from cognito attributes to attribute names we would like to show to our users\n\n#### get users\n\nget a list of the user in the user pool.\n\n```python\nfrom pycognito import cognito\n\nu = cognito('your-user-pool-id','your-client-id')\n\nuser = u.get_users(attr_map={\"given_name\":\"first_name\",\"family_name\":\"last_name\"})\n```\n\n##### arguments\n\n- **attr_map:** dictionary map from cognito attributes to attribute names we would like to show to our users\n\n#### get group object\n\nreturns an instance of the specified group_class.\n\n```python\nu = cognito('your-user-pool-id', 'your-client-id')\n\ngroup_data = {'groupname': 'user_group', 'description': 'description',\n            'precedence': 1}\n\ngroup_obj = u.get_group_obj(group_data)\n```\n\n##### arguments\n\n- **group_data:** dictionary with group's attributes.\n\n#### get group\n\nget all of the group's attributes. returns an instance of the group_class.\nrequires developer credentials.\n\n```python\nfrom pycognito import cognito\n\nu = cognito('your-user-pool-id','your-client-id')\n\ngroup = u.get_group(group_name='some_group_name')\n```\n\n##### arguments\n\n- **group_name:** name of a group\n\n#### get groups\n\nget a list of groups in the user pool. requires developer credentials.\n\n```python\nfrom pycognito import cognito\n\nu = cognito('your-user-pool-id','your-client-id')\n\ngroups = u.get_groups()\n```\n\n#### check token\n\nchecks the exp attribute of the access_token and either refreshes the tokens by calling the renew_access_tokens method or does nothing. **important:** access token is required\n\n```python\nu = cognito('your-user-pool-id','your-client-id',\n    id_token='id-token',refresh_token='refresh-token',\n    access_token='access-token')\n\nu.check_token()\n```\n\n##### arguments\n\nno arguments for check_token\n\n#### verify tokens\n\nverifies the current `id_token` and `access_token`.\nan exception will be thrown if they do not pass verification.\nit can be useful to call this method immediately after instantiation when you're providing externally-remembered tokens to the `cognito()` constructor.\nnote that if you're calling `check_tokens()` after instantitation, you'll still want to call `verify_tokens()` afterwards it in case it did nothing.\nthis method also ensures that the `id_claims` and `access_claims` attributes are set with the verified claims from each token.\n\n```python\nu = cognito('your-user-pool-id','your-client-id',\n    id_token='id-token',refresh_token='refresh-token',\n    access_token='access-token')\n\nu.check_tokens()  # optional, if you want to maybe renew the tokens\nu.verify_tokens()\n```\n\n##### arguments\n\nno arguments for verify_tokens\n\n#### logout\n\nlogs the user out of all clients and removes the expires_in, expires_datetime, id_token, refresh_token, access_token, and token_type attributes.\n\n```python\nfrom pycognito import cognito\n\n#if you don't use your tokens then you will need to\n#use your username and password and call the authenticate method\nu = cognito('your-user-pool-id','your-client-id',\n    id_token='id-token',refresh_token='refresh-token',\n    access_token='access-token')\n\nu.logout()\n```\n\n##### arguments\n\nno arguments for logout\n\n#### associate software token\n\nget the secret code to issue the software token mfa code.\nbegins setup of time-based one-time password (totp) multi-factor authentication (mfa) for a user.\n\n```python\nfrom pycognito import cognito\n\n#if you don't use your tokens then you will need to\n#use your username and password and call the authenticate method\nu = cognito('your-user-pool-id','your-client-id',\n    id_token='id-token',refresh_token='refresh-token',\n    access_token='access-token')\n\nsecret_code = u.associate_software_token()\n# display the secret_code to the user and enter it into a totp generator (such as google authenticator) to have them generate a 6-digit code.\n```\n\n##### arguments\n\nno arguments for associate_software_token\n\n#### verify software token\n\nverify the 6-digit code issued based on the secret code issued by associate_software_token. if this validation is successful, cognito will enable software token mfa.\n\n```python\nfrom pycognito import cognito\n\n#if you don't use your tokens then you will need to\n#use your username and password and call the authenticate method\nu = cognito('your-user-pool-id','your-client-id',\n    id_token='id-token',refresh_token='refresh-token',\n    access_token='access-token')\n\nsecret_code = u.associate_software_token()\n# display the secret_code to the user and enter it into a totp generator (such as google authenticator) to have them generate a 6-digit code.\ncode = input('enter the 6-digit code.')\ndevice_name = input('enter the device name')\nu.verify_software_token(code, device_name)\n```\n\n##### arguments\n\n- **code:** 6-digit code generated by the totp generator app\n- **device_name:** name of a device\n\n#### set user mfa preference\n\nenable and prioritize software token mfa and sms mfa.\nif both software token mfa and sms mfa are invalid, the preference value will be ignored.\n\n```python\nfrom pycognito import cognito\n\n#if you don't use your tokens then you will need to\n#use your username and password and call the authenticate method\nu = cognito('your-user-pool-id','your-client-id',\n    id_token='id-token',refresh_token='refresh-token',\n    access_token='access-token')\n\n# sms mfa are valid. sms preference.\nu.set_user_mfa_preference(true, false, \"sms\")\n# software token mfa are valid. software token preference.\nu.set_user_mfa_preference(false, true, \"software_token\")\n# both software token mfa and sms mfa are valid. software token preference\nu.set_user_mfa_preference(true, true, \"software_token\")\n# both software token mfa and sms mfa are disabled.\nu.set_user_mfa_preference(false, false)\n```\n\n##### arguments\n\n- **sms_mfa:** sms mfa enabled / disabled (bool)\n- **software_token_mfa:** software token mfa enabled / disabled (bool)\n- **preferred:** which is the priority, sms or software token? the expected value is \"sms\" or \"software_token\". however, it is not needed only if both of the previous arguments are false.\n\n#### respond to software token mfa challenge\n\nresponds when a software token mfa challenge is requested at login.\n\n```python\nfrom pycognito import cognito\nfrom pycognito.exceptions import softwaretokenmfachallengeexception\n\n#if you don't use your tokens then you will need to\n#use your username and password and call the authenticate method\nu = cognito('your-user-pool-id','your-client-id',\n    username='bob')\n\ntry:\n    u.authenticate(password='bobs-password')\nexcept softwaretokenmfachallengeexception as error:\n    code = input('enter the 6-digit code generated by the totp generator (such as google authenticator).')\n    u.respond_to_software_token_mfa_challenge(code)\n```\n\nwhen recreating a cognito instance\n\n```python\nfrom pycognito import cognito\nfrom pycognito.exceptions import softwaretokenmfachallengeexception\n\n#if you don't use your tokens then you will need to\n#use your username and password and call the authenticate method\nu = cognito('your-user-pool-id','your-client-id',\n    username='bob')\n\ntry:\n    u.authenticate(password='bobs-password')\nexcept softwaretokenmfachallengeexception as error:\n    mfa_tokens = error.get_tokens()\n\nu = cognito('your-user-pool-id','your-client-id',\n    username='bob')\ncode = input('enter the 6-digit code generated by the totp generator (such as google authenticator).')\nu.respond_to_software_token_mfa_challenge(code, mfa_tokens)\n\n```\n\n##### arguments\n\n- **code:** 6-digit code generated by the totp generator app\n- **mfa_tokens:** mfa_token stored in mfachallengeexception. not required if you have not regenerated the cognito instance.\n\n#### respond to sms mfa challenge\n\nresponds when a sms mfa challenge is requested at login.\n\n```python\nfrom pycognito import cognito\nfrom pycognito.exceptions import smsmfachallengeexception\n\n#if you don't use your tokens then you will need to\n#use your username and password and call the authenticate method\nu = cognito('your-user-pool-id','your-client-id',\n    username='bob')\n\ntry:\n    u.authenticate(password='bobs-password')\nexcept smsmfachallengeexception as error:\n    code = input('enter the 6-digit code you received by sms.')\n    u.respond_to_sms_mfa_challenge(code)\n```\n\nwhen recreating a cognito instance\n\n```python\nfrom pycognito import cognito\nfrom pycognito.exceptions import smsmfachallengeexception\n\n#if you don't use your tokens then you will need to\n#use your username and password and call the authenticate method\nu = cognito('your-user-pool-id','your-client-id',\n    username='bob')\n\ntry:\n    u.authenticate(password='bobs-password')\nexcept smsmfachallengeexception as error:\n    mfa_tokens = error.get_tokens()\n\nu = cognito('your-user-pool-id','your-client-id',\n    username='bob')\ncode = input('enter the 6-digit code generated by the totp generator (such as google authenticator).')\nu.respond_to_sms_mfa_challenge(code, mfa_tokens)\n\n```\n\n##### arguments\n\n- **code:** 6-digit code you received by sms\n- **mfa_tokens:** mfa_token stored in mfachallengeexception. not required if you have not regenerated the cognito instance.\n\n## cognito srp utility\n\nthe `awssrp` class is used to perform [srp(secure remote password protocol)](https://www.ietf.org/rfc/rfc2945.txt) authentication.\nthis is the preferred method of user authentication with aws cognito.\nthe process involves a series of authentication challenges and responses, which if successful,\nresults in a final response that contains id, access and refresh tokens.\n\n### using awssrp\n\nthe `awssrp` class takes a username, password, cognito user pool id, cognito app id, an optional\nclient secret (if app client is configured with client secret), an optional pool_region or `boto3` client.\nafterwards, the `authenticate_user` class method is used for srp authentication.\n\n```python\nimport boto3\nfrom pycognito.aws_srp import awssrp\n\nclient = boto3.client('cognito-idp')\naws = awssrp(username='username', password='password', pool_id='user_pool_id',\n             client_id='client_id', client=client)\ntokens = aws.authenticate_user()\n```\n\n## srp requests authenticator\n\n`pycognito.utils.requestssrpauth` is a [requests](https://docs.python-requests.org/en/latest/)\nauthentication plugin to automatically populate an http header with a cognito token. by default, it'll populate\nthe `authorization` header using the cognito access token as a `bearer` token.\n\n`requestssrpauth` handles fetching new tokens using the refresh tokens.\n\n### usage\n\n```python\nimport requests\nfrom pycognito.utils import requestssrpauth\n\nauth = requestssrpauth(\n  username='myusername',\n  password='secret',\n  user_pool_id='eu-west-1_1234567',\n  client_id='4dn6jbcbhqcofxyczo3ms9z4cc',\n  user_pool_region='eu-west-1',\n)\n\nresponse = requests.get('http://test.com', auth=auth)\n```\n",
  "docs_url": null,
  "keywords": "aws,cognito,api,gateway,serverless",
  "license": "apache license 2.0",
  "name": "pycognito",
  "package_url": "https://pypi.org/project/pycognito/",
  "project_url": "https://pypi.org/project/pycognito/",
  "project_urls": {
    "Download": "https://github.com/pvizeli/pycognito/tarball/2023.5.0",
    "Homepage": "https://github.com/pvizeli/pycognito"
  },
  "release_url": "https://pypi.org/project/pycognito/2023.5.0/",
  "requires_dist": [
    "boto3 (>=1.10.49)",
    "envs (>=1.3)",
    "python-jose[cryptography] (>=3.2.0)",
    "requests (>=2.22.0)"
  ],
  "requires_python": "",
  "summary": "python class to integrate boto3's cognito client so it is easy to login users. with srp support.",
  "version": "2023.5.0",
  "releases": [],
  "developers": [
    "pascal_vizeli",
    "pvizeli@syshack.ch"
  ],
  "kwds": "cognito_jwks pycognito initiate_forgot_password confirm_forgot_password aws_srp",
  "license_kwds": "apache license 2.0",
  "libtype": "pypi",
  "id": "pypi_pycognito",
  "homepage": "https://github.com/pvizeli/pycognito",
  "release_count": 25,
  "dependency_ids": [
    "pypi_boto3",
    "pypi_envs",
    "pypi_python_jose",
    "pypi_requests"
  ]
}
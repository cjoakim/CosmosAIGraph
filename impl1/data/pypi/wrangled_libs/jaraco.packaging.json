{
  "classifiers": [
    "development status :: 5 - production/stable",
    "framework :: sphinx :: extension",
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "programming language :: python :: 3",
    "programming language :: python :: 3 :: only"
  ],
  "description": ".. image:: https://img.shields.io/pypi/v/jaraco.packaging.svg\n   :target: https://pypi.org/project/jaraco.packaging\n\n.. image:: https://img.shields.io/pypi/pyversions/jaraco.packaging.svg\n\n.. image:: https://github.com/jaraco/jaraco.packaging/workflows/tests/badge.svg\n   :target: https://github.com/jaraco/jaraco.packaging/actions?query=workflow%3a%22tests%22\n   :alt: tests\n\n.. image:: https://img.shields.io/endpoint?url=https://raw.githubusercontent.com/charliermarsh/ruff/main/assets/badge/v2.json\n    :target: https://github.com/astral-sh/ruff\n    :alt: ruff\n\n.. image:: https://img.shields.io/badge/code%20style-black-000000.svg\n   :target: https://github.com/psf/black\n   :alt: code style: black\n\n.. image:: https://readthedocs.org/projects/jaracopackaging/badge/?version=latest\n   :target: https://jaracopackaging.readthedocs.io/en/latest/?badge=latest\n\n.. image:: https://img.shields.io/badge/skeleton-2023-informational\n   :target: https://blog.jaraco.com/skeleton\n\ntools for packaging.\n\nsphinx\n======\n\nthis package provides a sphinx extension that will inject into the config\nthe following values from the project's package metadata (as presented by\ndistutils):\n\n - project (from name)\n - author\n - copyright (same as author)\n - version\n - release (same as version)\n - package_url (from url)\n\nto enable, include 'jaraco.packaging' in the requirements and add\n'jaraco.packaging.sphinx' to the list of extensions in a sphinx config\nfile::\n\n    extensions=['jaraco.packaging.sphinx']\n\nthe extension by default builds the project in an isolated environment in\norder to extract the metadata. to build the documentation offline,\nprovide an already built wheel by setting the environment variable\n``jaraco_packaging_sphinx_wheel`` to the path of the existing wheel.\n\nmake-tree\n=========\n\na utility for taking output from ``pipdeptree --json`` and producing a tree\nrooted at a given package.\n\nusage::\n\n    pipdeptree --json | python -m jaraco.packaging.make-tree mypkg\n",
  "docs_url": null,
  "keywords": "",
  "license": "",
  "name": "jaraco.packaging",
  "package_url": "https://pypi.org/project/jaraco.packaging/",
  "project_url": "https://pypi.org/project/jaraco.packaging/",
  "project_urls": {
    "Homepage": "https://github.com/jaraco/jaraco.packaging"
  },
  "release_url": "https://pypi.org/project/jaraco.packaging/9.4.0/",
  "requires_dist": [
    "build[virtualenv]",
    "jaraco.context",
    "sphinx",
    "domdf-python-tools",
    "sphinx (>=3.5) ; extra == 'docs'",
    "jaraco.packaging (>=9.3) ; extra == 'docs'",
    "rst.linker (>=1.9) ; extra == 'docs'",
    "furo ; extra == 'docs'",
    "sphinx-lint ; extra == 'docs'",
    "pytest (>=6) ; extra == 'testing'",
    "pytest-checkdocs (>=2.4) ; extra == 'testing'",
    "pytest-cov ; extra == 'testing'",
    "pytest-enabler (>=2.2) ; extra == 'testing'",
    "pytest-ruff ; extra == 'testing'",
    "types-docutils ; extra == 'testing'",
    "pytest-black (>=0.3.7) ; (platform_python_implementation != \"PyPy\") and extra == 'testing'",
    "pytest-mypy (>=0.9.1) ; (platform_python_implementation != \"PyPy\") and extra == 'testing'"
  ],
  "requires_python": ">=3.8",
  "summary": "tools to supplement packaging python releases",
  "version": "9.4.0",
  "releases": [],
  "developers": [
    "jaraco@jaraco.com",
    "jason_r"
  ],
  "kwds": "jaracopackaging jaraco_packaging_sphinx_wheel jaraco badge shields",
  "license_kwds": "",
  "libtype": "pypi",
  "id": "pypi_jaraco.packaging",
  "homepage": "https://github.com/jaraco/jaraco.packaging",
  "release_count": 44,
  "dependency_ids": [
    "pypi_build",
    "pypi_domdf_python_tools",
    "pypi_furo",
    "pypi_jaraco.context",
    "pypi_jaraco.packaging",
    "pypi_pytest",
    "pypi_pytest_black",
    "pypi_pytest_checkdocs",
    "pypi_pytest_cov",
    "pypi_pytest_enabler",
    "pypi_pytest_mypy",
    "pypi_pytest_ruff",
    "pypi_rst.linker",
    "pypi_sphinx",
    "pypi_sphinx_lint",
    "pypi_types_docutils"
  ]
}
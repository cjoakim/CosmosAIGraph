{
  "classifiers": [
    "intended audience :: developers",
    "intended audience :: science/research",
    "license :: osi approved :: apache software license",
    "programming language :: python :: 3",
    "programming language :: python :: 3 :: only",
    "topic :: software development :: libraries :: python modules"
  ],
  "description": "# etils\n\n[![unittests](https://github.com/google/etils/actions/workflows/pytest_and_autopublish.yml/badge.svg)](https://github.com/google/etils/actions/workflows/pytest_and_autopublish.yml)\n[![pypi version](https://badge.fury.io/py/etils.svg)](https://badge.fury.io/py/etils)\n[![documentation status](https://readthedocs.org/projects/etils/badge/?version=latest)](https://etils.readthedocs.io/en/latest/?badge=latest)\n\netils (eclectic utils) is an open-source collection of utils for python.\n\neach top-level submodule is a **self-contained independent** module (with its\nown `build` rule), meant to be imported individually. to avoid collisions with\nother modules/variables, module names are prefixed by `e` (arbitrary\nconvention):\n\n```python\nfrom etils import epath  # path utils\nfrom etils import epy  # python utils\nfrom etils import ejax  # jax utils\n...\n```\n\nbecauses each module is independent, only the minimal required libraries are\nimported (for example, importing `epy` won't suffer the cost of importing tf,\njax,...)\n\n## documentation\n\n* [`etils.epath`](https://etils.readthedocs.io/en/latest/epath.html): pathlib-like api for `gs://`, `s3://`,...\n* [`etils.etree`](https://etils.readthedocs.io/en/latest/etree.html): tree utils for `tf.nest`, `jax.tree_utils`, deepmind `tree`.\n* [`etils.enp`](https://etils.readthedocs.io/en/latest/enp.html): numpy utils.\n* [`etils.ecolab`](https://etils.readthedocs.io/en/latest/ecolab.html): colab utils.\n* [`etils.array_types`](https://etils.readthedocs.io/en/latest/array_types.html): typing annotations for jax, numpy,... arrays\n* [`etils.edc`](https://etils.readthedocs.io/en/latest/edc.html): dataclasses utils.\n* [`etils.epy`](https://etils.readthedocs.io/en/latest/epy.html): collection of generic python utils.\n* [`etils.eapp`](https://etils.readthedocs.io/en/latest/eapp.html): absl flags/app utils.\n*  [api design guide](https://etils.readthedocs.io/en/latest/api-design.html).\n\n## installation\n\nbecause each module is independent and require different dependencies, you\ncan select which modules deps to install:\n\n```sh\npip install etils[array_types,epath,epy]\n```\n\n*this is not an official google product.*\n\n",
  "docs_url": null,
  "keywords": "utils,jax,tensorflow,tf,machine learning,deep learning",
  "license": "",
  "name": "etils",
  "package_url": "https://pypi.org/project/etils/",
  "project_url": "https://pypi.org/project/etils/",
  "project_urls": {
    "changelog": "https://github.com/google/etils/blob/main/CHANGELOG.md",
    "documentation": "https://etils.readthedocs.io",
    "homepage": "https://github.com/google/etils",
    "repository": "https://github.com/google/etils"
  },
  "release_url": "https://pypi.org/project/etils/1.6.0/",
  "requires_dist": [
    "etils[array-types] ; extra == \"all\"",
    "etils[eapp] ; extra == \"all\"",
    "etils[ecolab] ; extra == \"all\"",
    "etils[edc] ; extra == \"all\"",
    "etils[enp] ; extra == \"all\"",
    "etils[epath] ; extra == \"all\"",
    "etils[epath-gcs] ; extra == \"all\"",
    "etils[epath-s3] ; extra == \"all\"",
    "etils[epy] ; extra == \"all\"",
    "etils[etqdm] ; extra == \"all\"",
    "etils[etree] ; extra == \"all\"",
    "etils[etree-dm] ; extra == \"all\"",
    "etils[etree-jax] ; extra == \"all\"",
    "etils[etree-tf] ; extra == \"all\"",
    "etils[enp] ; extra == \"array-types\"",
    "pytest ; extra == \"dev\"",
    "pytest-subtests ; extra == \"dev\"",
    "pytest-xdist ; extra == \"dev\"",
    "pyink ; extra == \"dev\"",
    "pylint>=2.6.0 ; extra == \"dev\"",
    "chex ; extra == \"dev\"",
    "torch ; extra == \"dev\"",
    "optree ; extra == \"dev\"",
    "dataclass_array ; extra == \"dev\"",
    "sphinx-apitree[ext] ; extra == \"docs\"",
    "etils[dev,all] ; extra == \"docs\"",
    "absl-py ; extra == \"eapp\"",
    "simple_parsing ; extra == \"eapp\"",
    "etils[epy] ; extra == \"eapp\"",
    "jupyter ; extra == \"ecolab\"",
    "numpy ; extra == \"ecolab\"",
    "mediapy ; extra == \"ecolab\"",
    "packaging ; extra == \"ecolab\"",
    "protobuf ; extra == \"ecolab\"",
    "etils[enp] ; extra == \"ecolab\"",
    "etils[epy] ; extra == \"ecolab\"",
    "etils[etree] ; extra == \"ecolab\"",
    "etils[epy] ; extra == \"edc\"",
    "numpy ; extra == \"enp\"",
    "etils[epy] ; extra == \"enp\"",
    "fsspec ; extra == \"epath\"",
    "importlib_resources ; extra == \"epath\"",
    "typing_extensions ; extra == \"epath\"",
    "zipp ; extra == \"epath\"",
    "etils[epy] ; extra == \"epath\"",
    "gcsfs ; extra == \"epath-gcs\"",
    "etils[epath] ; extra == \"epath-gcs\"",
    "s3fs ; extra == \"epath-s3\"",
    "etils[epath] ; extra == \"epath-s3\"",
    "typing_extensions ; extra == \"epy\"",
    "absl-py ; extra == \"etqdm\"",
    "tqdm ; extra == \"etqdm\"",
    "etils[epy] ; extra == \"etqdm\"",
    "etils[array_types] ; extra == \"etree\"",
    "etils[epy] ; extra == \"etree\"",
    "etils[enp] ; extra == \"etree\"",
    "etils[etqdm] ; extra == \"etree\"",
    "dm-tree ; extra == \"etree-dm\"",
    "etils[etree] ; extra == \"etree-dm\"",
    "jax[cpu] ; extra == \"etree-jax\"",
    "etils[etree] ; extra == \"etree-jax\"",
    "tensorflow ; extra == \"etree-tf\"",
    "etils[etree] ; extra == \"etree-tf\"",
    "etils[ecolab] ; extra == \"lazy-imports\""
  ],
  "requires_python": ">=3.10",
  "summary": "collection of common python utils",
  "version": "1.6.0",
  "releases": [],
  "developers": [
    "etils@google.com"
  ],
  "kwds": "pytest_and_autopublish tensorflow python py pathlib",
  "license_kwds": "",
  "libtype": "pypi",
  "id": "pypi_etils",
  "homepage": "",
  "release_count": 25,
  "dependency_ids": [
    "pypi_absl_py",
    "pypi_chex",
    "pypi_dataclass_array",
    "pypi_dm_tree",
    "pypi_etils",
    "pypi_fsspec",
    "pypi_gcsfs",
    "pypi_importlib_resources",
    "pypi_jax",
    "pypi_jupyter",
    "pypi_mediapy",
    "pypi_numpy",
    "pypi_optree",
    "pypi_packaging",
    "pypi_protobuf",
    "pypi_pyink",
    "pypi_pylint",
    "pypi_pytest",
    "pypi_pytest_subtests",
    "pypi_pytest_xdist",
    "pypi_s3fs",
    "pypi_simple_parsing",
    "pypi_sphinx_apitree",
    "pypi_tensorflow",
    "pypi_torch",
    "pypi_tqdm",
    "pypi_typing_extensions",
    "pypi_zipp"
  ]
}
{
  "classifiers": [
    "development status :: 3 - alpha",
    "environment :: web environment",
    "intended audience :: developers",
    "license :: osi approved :: bsd license",
    "operating system :: os independent",
    "programming language :: python",
    "programming language :: python :: 2",
    "programming language :: python :: 2.7",
    "programming language :: python :: 3",
    "programming language :: python :: 3.4",
    "programming language :: python :: 3.5",
    "programming language :: python :: 3.6",
    "programming language :: python :: implementation :: pypy",
    "topic :: software development :: libraries :: python modules",
    "topic :: system :: software distribution"
  ],
  "description": "==============\nflask restplus\n==============\n\n.. image:: https://secure.travis-ci.org/noirbizarre/flask-restplus.svg?tag=0.13.0\n    :target: https://travis-ci.org/noirbizarre/flask-restplus?tag=0.13.0\n    :alt: build status\n.. image:: https://coveralls.io/repos/noirbizarre/flask-restplus/badge.svg?tag=0.13.0\n    :target: https://coveralls.io/r/noirbizarre/flask-restplus?tag=0.13.0\n    :alt: code coverage\n.. image:: https://readthedocs.org/projects/flask-restplus/badge/?version=0.13.0\n    :target: https://flask-restplus.readthedocs.io/en/0.13.0/\n    :alt: documentation status\n.. image:: https://img.shields.io/pypi/l/flask-restplus.svg\n    :target: https://pypi.org/project/flask-restplus\n    :alt: license\n.. image:: https://img.shields.io/pypi/pyversions/flask-restplus.svg\n    :target: https://pypi.org/project/flask-restplus\n    :alt: supported python versions\n.. image:: https://badges.gitter.im/join%20chat.svg\n   :alt: join the chat at https://gitter.im/noirbizarre/flask-restplus\n   :target: https://gitter.im/noirbizarre/flask-restplus?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge\n\nflask-restplus is an extension for `flask`_ that adds support for quickly building rest apis.\nflask-restplus encourages best practices with minimal setup.\nif you are familiar with flask, flask-restplus should be easy to pick up.\nit provides a coherent collection of decorators and tools to describe your api\nand expose its documentation properly using `swagger`_.\n\n\ncompatibility\n=============\n\nflask-restplus requires python 2.7 or 3.4+.\n\n\ninstallation\n============\n\nyou can install flask-restplus with pip:\n\n.. code-block:: console\n\n    $ pip install flask-restplus\n\nor with easy_install:\n\n.. code-block:: console\n\n    $ easy_install flask-restplus\n\n\nquick start\n===========\n\nwith flask-restplus, you only import the api instance to route and document your endpoints.\n\n.. code-block:: python\n\n    from flask import flask\n    from flask_restplus import api, resource, fields\n\n    app = flask(__name__)\n    api = api(app, version='1.0', title='todomvc api',\n        description='a simple todomvc api',\n    )\n\n    ns = api.namespace('todos', description='todo operations')\n\n    todo = api.model('todo', {\n        'id': fields.integer(readonly=true, description='the task unique identifier'),\n        'task': fields.string(required=true, description='the task details')\n    })\n\n\n    class tododao(object):\n        def __init__(self):\n            self.counter = 0\n            self.todos = []\n\n        def get(self, id):\n            for todo in self.todos:\n                if todo['id'] == id:\n                    return todo\n            api.abort(404, \"todo {} doesn't exist\".format(id))\n\n        def create(self, data):\n            todo = data\n            todo['id'] = self.counter = self.counter + 1\n            self.todos.append(todo)\n            return todo\n\n        def update(self, id, data):\n            todo = self.get(id)\n            todo.update(data)\n            return todo\n\n        def delete(self, id):\n            todo = self.get(id)\n            self.todos.remove(todo)\n\n\n    dao = tododao()\n    dao.create({'task': 'build an api'})\n    dao.create({'task': '?????'})\n    dao.create({'task': 'profit!'})\n\n\n    @ns.route('/')\n    class todolist(resource):\n        '''shows a list of all todos, and lets you post to add new tasks'''\n        @ns.doc('list_todos')\n        @ns.marshal_list_with(todo)\n        def get(self):\n            '''list all tasks'''\n            return dao.todos\n\n        @ns.doc('create_todo')\n        @ns.expect(todo)\n        @ns.marshal_with(todo, code=201)\n        def post(self):\n            '''create a new task'''\n            return dao.create(api.payload), 201\n\n\n    @ns.route('/<int:id>')\n    @ns.response(404, 'todo not found')\n    @ns.param('id', 'the task identifier')\n    class todo(resource):\n        '''show a single todo item and lets you delete them'''\n        @ns.doc('get_todo')\n        @ns.marshal_with(todo)\n        def get(self, id):\n            '''fetch a given resource'''\n            return dao.get(id)\n\n        @ns.doc('delete_todo')\n        @ns.response(204, 'todo deleted')\n        def delete(self, id):\n            '''delete a task given its identifier'''\n            dao.delete(id)\n            return '', 204\n\n        @ns.expect(todo)\n        @ns.marshal_with(todo)\n        def put(self, id):\n            '''update a task given its identifier'''\n            return dao.update(id, api.payload)\n\n\n    if __name__ == '__main__':\n        app.run(debug=true)\n\n\ncontributors\n============\n\nflask-restplus is brought to you by @noirbizarre. since early 2019 @steadbytes,\n@a-luna, @j5awry, @ziirish volunteered to help @noirbizarre keep the project up\nand running.\nof course everyone is welcome to contribute and we will be happy to review your\npr's or answer to your issues.\n\n\ndocumentation\n=============\n\nthe documentation is hosted `on read the docs <http://flask-restplus.readthedocs.io/en/latest/>`_\n\n\n.. _flask: http://flask.pocoo.org/\n.. _swagger: http://swagger.io/\n\n\ncontribution\n============\nwant to contribute! that's awesome! check out `contributing.rst! <https://github.com/noirbizarre/flask-restplus/blob/master/contributing.rst>`_\nchangelog\n=========\n\n\n\n0.13.0 (2019-08-12)\n-------------------\n\n- add new `wildcard` fields (`#255 <https://github.com/noirbizarre/flask-restplus/pull/255>`_)\n- fix abc deprecation warnings (`#580 <https://github.com/noirbizarre/flask-restplus/pull/580>`_)\n- fix `@api.expect(..., validate=false)` decorators for an ``api`` where `validate=true` is set on the constructor (`#609 <https://github.com/noirbizarre/flask-restplus/issues/609>`_, `#610 <https://github.com/noirbizarre/flask-restplus/pull/610>`_)\n- ensure `basepath` is always a path\n- hide namespaces with all hidden resources from swagger documentation\n- per route swagger documentation for multiple routes on a ``resource``\n\n0.12.1 (2018-09-28)\n-------------------\n\n- fix missing changelog inprevious release\n- ensure definitions with both `$ref` and description (or other property) output is valid (using `allof`)\n- added initial specifications schemas and validation support\n- ensure empty enums are not serialized (to have a valid specification)\n\n0.12.0 (2018-09-27)\n-------------------\n\n- fix namespace decorators (`#475 <https://github.com/noirbizarre/flask-restplus/issues/475>`_)\n- do not serialize empty tags descriptions\n- ensure `consumes` is properly set when using form parameters on classes\n- ensure parameters are not duplicated (`#164 <https://github.com/noirbizarre/flask-restplus/issues/164>`_, `#196 <https://github.com/noirbizarre/flask-restplus/issues/196>`_, `#234 <https://github.com/noirbizarre/flask-restplus/issues/234>`_)\n- publish sources distribution (`#500 <https://github.com/noirbizarre/flask-restplus/issues/500>`_, `#515 <https://github.com/noirbizarre/flask-restplus/issues/515>`_)\n- fix late resources registeration (`#483 <https://github.com/noirbizarre/flask-restplus/issues/483>`_)\n- don't include namespaces without resources to the swagger documentation (`#470 <https://github.com/noirbizarre/flask-restplus/issues/470>`_)\n- add support for checkbox validation input + consistent behavior between inputs and fields. (`#461 <https://github.com/noirbizarre/flask-restplus/issues/461>`_)\n- fix missing `enum34` dependency (`#444 <https://github.com/noirbizarre/flask-restplus/issues/444>`_)\n\n0.11.0 (2018-05-16)\n-------------------\n\n- add authorizations parsing to namespace (`#403 <https://github.com/noirbizarre/flask-restplus/issues/403>`_)\n- add vendor extensions support (`#97 <https://github.com/noirbizarre/flask-restplus/issues/97>`_)\n- ``requestparser`` arguments now support the ``split`` action\n- ensure default boolean value as `false` works with ``requestparser`` (`#199 <https://github.com/noirbizarre/flask-restplus/issues/199>`_)\n- schema errors are not longuer hidden by `attributeerror: api does not have __schema__ attribute` (`#194 <https://github.com/noirbizarre/flask-restplus/issues/194>`_)\n- add a new ``url`` validator, more flexible and precise.\n- fix error bundling (`#175 <https://github.com/noirbizarre/flask-restplus/issues/175>`_, `#144 <https://github.com/noirbizarre/flask-restplus/issues/144>`_)\n- help message is now added to source error message instead of string interpolation (`#147 <https://github.com/noirbizarre/flask-restplus/issues/147>`_)\n- use pytest instead of nosetests\n- upgrade to swagger-ui 3.4.0\n- fix typo in comments\n- add an optional key argument, ``skip_none``, in ``marshal_with`` and ``marshal``\n- fix masks not working correctly with python 2.7 (`#217 <https://github.com/noirbizarre/flask-restplus/issues/217>`_)\n- fixed typos in doc/scaling\n- add docs for `allow_null` and ``nested``\n- add namespace.payload\n- **breaking**: everything is unordered by default because ordering has a serious impact on performances:\n    - ``api`` and ``namespace`` now accept an optionnal ``ordered`` parameter\n    - ``marshal_with`` and ``marshal`` now accept an optionnal ``ordered`` parameter\n\nbreaking changes\n~~~~~~~~~~~~~~~~\n\n- drop python 2.6 support\n- improve header handling (`#119 <https://github.com/noirbizarre/flask-restplus/issues/119>`_):\n    - `@api.header` only document response headers on all responses\n    - `@api.response` accept an optionnal `headers` argument to document response specific headers\n    - request header are handled by the `@api.expect` decorator\n\n0.10.1 (2017-03-04)\n-------------------\n\n- fix a typo in ``__init__`` breaking ``from flask_restplus import *`` (`#242 <https://github.com/noirbizarre/flask-restplus/issues/242>`_)\n- basic support for custom url converters (`#243 <https://github.com/noirbizarre/flask-restplus/issues/243>`_)\n- support custom response classes inheriting from ``baseresponse`` (`#245 <https://github.com/noirbizarre/flask-restplus/issues/245>`_)\n- allow models to preserve order (`#135 <https://github.com/noirbizarre/flask-restplus/issues/135>`_)\n\n0.10.0 (2017-02-12)\n-------------------\n\n- allows to specify a custom mount path on namespace registration\n- allow to express models as raw schemas\n- upgraded to swagger-ui 2.2.6\n- support swagger-ui translations\n- fix prefix trailing slash stripping in postman doc generation (`#232 <https://github.com/noirbizarre/flask-restplus/issues/232>`_)\n- add validation for lists in the expect decorator (`#231 <https://github.com/noirbizarre/flask-restplus/issues/231>`_)\n\n0.9.2 (2016-04-22)\n------------------\n\n- same version but a pypi bug force reupload.\n\n0.9.1 (2016-04-22)\n------------------\n\n- added some swagger-ui oauth configurations:\n    - `swagger_ui_oauth_client_id`\n    - `swagger_ui_oauth_realm`\n    - `swagger_ui_oauth_app_name`\n- expose ``type: object`` in swagger schemas (`#157 <https://github.com/noirbizarre/flask-restplus/issues/157>`_)\n- fix an issue with error handlers (`#141 <https://github.com/noirbizarre/flask-restplus/issues/141>`_)\n- fix an issue with postman export when using oauth (`#151 <https://github.com/noirbizarre/flask-restplus/issues/151>`_)\n- miscellenaous code and documentation fixes\n- remove last flask-restful references (unless needed) and add missing attributions\n\n0.9.0 (2016-02-22)\n------------------\n\n- make ``namespace`` behave like ``blueprint`` for ``flask``\n- deprecated ``parser`` and ``body`` parameters for ``expect`` in ``doc`` decorator\n- deprecated ``model.extend`` in favor of ``model.clone``\n- added the ``param`` decorator\n- honour method restrictions in swagger documentation (`#93 <https://github.com/noirbizarre/flask-restplus/issues/93>`_)\n- improved documentation\n\n0.8.6 (2015-12-26)\n------------------\n\n- handle callable on api infos\n- handle documentation on error handlers\n- drop/merge flask_restful ``flask_restful.requestparser``\n- handle ``requestparser`` into ``expect`` decorator\n- handle schema for ``inputs`` parsers\n- added some inputs:\n    - ``email``\n    - ``ip``\n    - ``ipv4``\n    - ``ipv6``\n\n\n0.8.5 (2015-12-12)\n------------------\n\n- handle mask on ``polymorph`` field\n- handle mask on inherited models\n- replace `flask_restful.abort` by ``flask_restplus.errors.abort``\n- replace `flask_restful.unpack` by ``flask_restplus.utils.unpack``\n- **breaking changes**:\n    - renamed ``apimodel`` into ``model``\n    - renamed ``apinamespace`` into ``namespace``\n\n\n0.8.4 (2015-12-07)\n------------------\n\n- drop/merge `flask_restful.resource` resolving a recursion problem\n- allow any `callable` as field `default`, `min`, `max`...\n- added ``date`` field\n- improve error handling for inconsistent masks\n- handle model level default mask\n- support colons and dashes in mask field names\n- **breaking changes**:\n   - renamed `exceptions` module into `errors`\n   - renamed `restexception` into ``resterror``\n   - renamed `marshallingexception` into ``marshallingerror``\n   - ``datetime`` field always output datetime\n\n0.8.3 (2015-12-05)\n------------------\n\n- drop/merge flask-restful fields\n- drop/merge flask-restplus inputs\n- update swagger-ui to version 2.1.3\n- use minified version of swagger-ui if ``debug=false``\n- blueprint subdomain support (static only)\n- added support for default fields mask\n\n0.8.2 (2015-12-01)\n------------------\n\n- skip unknown fields in mask when applied on a model\n- added `*` token to fields mask (all remaining fields)\n- ensure generated endpoints does not collide\n- drop/merge flask-restful `api.handler_error()`\n\n0.8.1 (2015-11-27)\n------------------\n\n- refactor swagger ui handling:\n    - allow to register a custom view with ``@api.documentation``\n    - allow to register a custom url with the ``doc`` parameter\n    - allow to disable documentation with ``doc=false``\n- added fields mask support through header (see: `fields masks documentation <http://flask-restplus.readthedocs.org/en/stable/mask.html>`_)\n- expose ``flask_restful.inputs`` module on ``flask_restplus.inputs``\n- added support for some missing fields and attributes:\n    - ``host`` root field (filed only if ``server_name`` config is set)\n    - custom ``tags`` root field\n    - ``exclusiveminimum`` and ``exclusivemaximum`` number field attributes\n    - ``multipleof`` number field attribute\n    - ``minlength`` and ``maxlength`` string field attributes\n    - ``pattern`` string field attribute\n    - ``minitems`` and ``maxitems`` list field attributes\n    - ``uniqueitems`` list field attribute\n- allow to override the default error handler\n- fixes\n\n\n0.8.0\n-----\n\n- added payload validation (initial implementation based on jsonschema)\n- added ``@api.deprecated`` to mark resources or methods as deprecated\n- added ``@api.header`` decorator shortcut to document headers\n- added postman export\n- fix compatibility with flask-restful 0.3.4\n- allow to specify an exemple a custom fields with ``__schema_example__``\n- added support for ``patch`` method in swagger ui\n- upgraded to swagger ui 2.1.2\n- handle enum as callable\n- allow to configure ``docexpansion`` with the ``swagger_ui_doc_expansion`` parameter\n\n\n0.7.2\n-----\n\n- compatibility with flask-restful 0.3.3\n- fix action=append handling in requestparser\n- upgraded to swaggerui 2.1.8-m1\n- miscellaneous fixes\n\n\n0.7.1\n-----\n\n- fix ``@api.marshal_with_list()`` keyword arguments handling.\n\n\n0.7.0\n-----\n\n- expose models and fields schema through the ``__schema__`` attribute\n- drop support for model as class\n- added ``@api.errorhandler()`` to register custom error handlers\n- added ``@api.response()`` shortcut decorator\n- fix list nested models missing in definitions\n\n\n0.6.0\n-----\n\n- python 2.6 support\n- experimental polymorphism support (single inheritance only)\n    - added ``polymorph`` field\n    - added ``discriminator`` attribute support on ``string`` fields\n    - added ``api.inherit()`` method\n- added ``classname`` field\n\n0.5.1\n-----\n\n- fix for parameter with schema (do not set type=string)\n\n\n0.5.0\n-----\n\n- allow shorter syntax to set operation id: ``@api.doc('my-operation')``\n- added a shortcut to specify the expected input model: ``@api.expect(my_fields)``\n- added ``title`` attribute to fields\n- added ``@api.extend()`` to extend models\n- ensure coherence between ``required`` and ``allow_null`` for ``nestedfield``\n- support list of primitive types and list of models as body\n- upgraded to latest version of swagger ui\n- fixes\n\n\n0.4.2\n-----\n\n- rename apidoc blueprint into restplus_doc to avoid collisions\n\n\n0.4.1\n-----\n\n- added ``swagger_validator_url`` config parameter\n- added ``readonly`` field parameter\n- upgraded to latest version of swagger ui\n\n\n0.4.0\n-----\n\n- port to flask-restful 0.3+\n- use the default blueprint/app mecanism\n- allow to hide some ressources or methods using ``@api.doc(false)`` or ``@api.hide``\n- allow to globally customize the default operationid with the ``default_id`` callable parameter\n\n0.3.0\n-----\n\n- switch to swagger 2.0 (major breakage)\n    - ``notes`` documentation is now ``description``\n    - ``nickname`` documentation is now ``id``\n    - new responses declaration format\n- added missing ``body`` parameter to document ``body`` input\n- last release before flask-restful 0.3+ compatibility switch\n\n\n0.2.4\n-----\n\n- handle ``description`` and ``required`` attributes on ``fields.list``\n\n0.2.3\n-----\n\n- fix custom fields registeration\n\n0.2.2\n-----\n\n- fix model list in declaration\n\n0.2.1\n-----\n\n- allow to type custom fields with ``api.model``\n- handle custom fields into ``fieds.list``\n\n0.2\n---\n\n- upgraded to swaggerui 0.2.22\n- support additional field documentation attributes: ``required``, ``description``, ``enum``, ``min``, ``max`` and ``default``\n- initial support for model in requestparser\n\n0.1.3\n-----\n\n- fix ``api.marshal()`` shortcut\n\n0.1.2\n-----\n\n- added ``api.marshal_with()`` and ``api.marshal_list_with()`` decorators\n- added ``api.marshal()`` shortcut\n\n\n0.1.1\n-----\n\n- use ``zip_safe=false`` for proper packaging.\n\n\n0.1\n---\n\n- initial release\n\n",
  "docs_url": null,
  "keywords": "flask restplus rest api swagger openapi",
  "license": "bsd-3-clause",
  "name": "flask-restplus",
  "package_url": "https://pypi.org/project/flask-restplus/",
  "project_url": "https://pypi.org/project/flask-restplus/",
  "project_urls": {
    "Homepage": "https://github.com/noirbizarre/flask-restplus"
  },
  "release_url": "https://pypi.org/project/flask-restplus/0.13.0/",
  "requires_dist": [],
  "requires_python": "",
  "summary": "fully featured framework for fast, easy and documented api development with flask",
  "version": "0.13.0",
  "releases": [],
  "developers": [
    "axel@data.gouv.fr",
    "axel_haustant"
  ],
  "kwds": "flask_restplus flask_restful swagger_ui_oauth_app_name flask swagger_ui_oauth_realm",
  "license_kwds": "bsd-3-clause",
  "libtype": "pypi",
  "id": "pypi_flask_restplus",
  "homepage": "https://github.com/noirbizarre/flask-restplus",
  "release_count": 34,
  "dependency_ids": []
}
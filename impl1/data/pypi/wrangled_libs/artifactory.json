{
  "classifiers": [
    "development status :: 3 - alpha",
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "operating system :: os independent",
    "programming language :: python :: 2.7",
    "programming language :: python :: 3",
    "programming language :: python :: 3.2",
    "programming language :: python :: 3.3",
    "topic :: software development :: libraries",
    "topic :: system :: filesystems"
  ],
  "description": "python interface library for jfrog artifactory\n==============================================\n\n|build status|\n\nthis module is intended to serve as a logical descendant of\n`pathlib <https://docs.python.org/3/library/pathlib.html>`__, a python 3\nmodule for object-oriented path manipulations. as such, it implements\neverything as closely as possible to the origin with few exceptions,\nsuch as stat().\n\nusage examples\n==============\n\nwalking directory tree\n----------------------\n\ngetting directory listing:\n\n::\n\n    from artifactory import artifactorypath\n    path = artifactorypath(\n        \"http://repo.jfrog.org/artifactory/gradle-ivy-local\")\n    for p in path:\n        print p\n\nfind all .gz files in current dir, recursively:\n\n::\n\n    from artifactory import artifactorypath\n    path = artifactorypath(\n        \"http://repo.jfrog.org/artifactory/distributions/org/\")\n\n    for p in path.glob(\"**/*.gz\"):\n        print p\n\ndownloading artifacts\n---------------------\n\ndownload artifact to a local filesystem:\n\n::\n\n    from artifactory import artifactorypath\n    path = artifactorypath(\n        \"http://repo.jfrog.org/artifactory/distributions/org/apache/tomcat/apache-tomcat-7.0.11.tar.gz\")\n        \n    with path.open() as fd:\n        with open(\"tomcat.tar.gz\", \"wb\") as out:\n            out.write(fd.read())\n\nuploading artifacts\n-------------------\n\ndeploy a regular file ``myapp-1.0.tar.gz``\n\n::\n\n    from artifactory import artifactorypath\n    path = artifactorypath(\n        \"http://my-artifactory/artifactory/libs-snapshot-local/myapp/1.0\")\n    path.mkdir()\n\n    path.deploy_file('./myapp-1.0.tar.gz')\n\ndeploy a debian package ``myapp-1.0.deb``\n\n::\n\n    from artifactory import artifactorypath\n    path = artifactorypath(\n        \"http://my-artifactory/artifactory/ubuntu-local/pool\")\n    path.deploy_deb('./myapp-1.0.deb', \n                    distribution='trusty',\n                    component='main',\n                    architecture='amd64')\n\nauthentication\n--------------\n\nto provide username and password to access restricted resources, you can\npass ``auth`` parameter to artifactorypath:\n\n::\n\n    from artifactory import artifactorypath\n    path = artifactorypath(\n        \"http://my-artifactory/artifactory/myrepo/restricted-path\",\n        auth=('admin', 'ilikerandompasswords'))\n    path.touch()\n\nssl cert verification options\n-----------------------------\n\nsee `requests - ssl\nverification <http://docs.python-requests.org/en/latest/user/advanced/#ssl-cert-verification>`__\nfor more details.\n\n::\n\n    from artifactory import artifactorypath\n    path = artifactorypath(\n        \"http://my-artifactory/artifactory/libs-snapshot-local/myapp/1.0\")\n\n... is the same as\n\n::\n\n    from artifactory import artifactorypath\n    path = artifactorypath(\n        \"http://my-artifactory/artifactory/libs-snapshot-local/myapp/1.0\", \n        verify=true)\n\nspecify a local cert to use as client side certificate\n\n::\n\n    from artifactory import artifactorypath\n    path = artifactorypath(\n        \"http://my-artifactory/artifactory/libs-snapshot-local/myapp/1.0\",\n        cert=\"/path_to_file/server.pem\")\n\ndisable host cert verification\n\n::\n\n    from artifactory import artifactorypath\n    path = artifactorypath(\n        \"http://my-artifactory/artifactory/libs-snapshot-local/myapp/1.0\",\n        verify=false)\n\n| **note:** if host cert verification is disabled urllib3 will throw a\n  `insecurerequestwarning <https://urllib3.readthedocs.org/en/latest/security.html#insecurerequestwarning>`__.\n| to disable these warning, one needs to call\n  urllib3.disable\\_warnings().\n\n::\n\n    import requests.packages.urllib3 as urllib3\n    urllib3.disable_warnings()\n\nglobal configuration file\n-------------------------\n\nartifactory python module also has a way to specify all\nconnection-related settings in a central file,\n``~/.artifactory_python.cfg`` that is read upon the creation of first\n``artifactorypath`` object and is stored globally. for instance, you can\nspecify per-instance settings of authentication tokens, so that you\nwon't need to explicitly pass ``auth`` parameter to ``artifactorypath``.\n\nexample:\n\n::\n\n    [http://artifactory-instance.com/artifactory]\n    username = deployer\n    password = ilikerandompasswords\n    verify = false\n\n    [another-artifactory-instance.com/artifactory]\n    username = foo\n    password = @dmin\n    cert = ~/mycert\n\nwhether or not you specify ``http://`` or ``https://`` prefix is not\nessential. the module will first try to locate the best match and then\ntry to match urls without prefixes. so if in the config you specify\n``https://my-instance.local`` and call ``artifactorypath`` with\n``http://my-instance.local``, it will still do the right thing.\n\n.. |build status| image:: https://travis-ci.org/parallels/artifactory.svg?branch=develop\n   :target: https://travis-ci.org/parallels/artifactory",
  "docs_url": null,
  "keywords": "",
  "license": "mit license",
  "name": "artifactory",
  "package_url": "https://pypi.org/project/artifactory/",
  "project_url": "https://pypi.org/project/artifactory/",
  "project_urls": {
    "Download": "http://github.com/parallels/artifactory",
    "Homepage": "http://github.com/parallels/artifactory"
  },
  "release_url": "https://pypi.org/project/artifactory/0.1.17/",
  "requires_dist": [],
  "requires_python": null,
  "summary": "a python to artifactory interface",
  "version": "0.1.17",
  "releases": [],
  "developers": [
    "knazarov@parallels.com",
    "konstantin_nazarov"
  ],
  "kwds": "artifactory_python artifactorypath pathlib artifactory jfrog",
  "license_kwds": "mit license",
  "libtype": "pypi",
  "id": "pypi_artifactory",
  "homepage": "http://github.com/parallels/artifactory",
  "release_count": 16,
  "dependency_ids": []
}
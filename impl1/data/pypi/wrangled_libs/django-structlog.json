{
  "classifiers": [
    "development status :: 5 - production/stable",
    "framework :: django",
    "framework :: django :: 3.2",
    "framework :: django :: 4.1",
    "framework :: django :: 4.2",
    "framework :: django :: 5.0",
    "license :: osi approved :: mit license",
    "operating system :: os independent",
    "programming language :: python :: 3",
    "programming language :: python :: 3 :: only",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.12",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: system :: logging"
  ],
  "description": ".. inclusion-marker-introduction-begin\n\ndjango-structlog\n================\n\n| |pypi| |wheels| |build-status| |docs| |coverage| |open_issues| |pull_requests|\n| |django| |python| |license| |black| |ruff|\n| |watchers| |stars| |forks|\n\n.. |build-status| image:: https://github.com/jrobichaud/django-structlog/actions/workflows/main.yml/badge.svg?branch=main\n   :target: https://github.com/jrobichaud/django-structlog/actions\n   :alt: build status\n\n.. |pypi| image:: https://img.shields.io/pypi/v/django-structlog.svg\n   :target: https://pypi.org/project/django-structlog/\n   :alt: pypi version\n\n.. |docs| image:: https://readthedocs.org/projects/django-structlog/badge/?version=latest\n   :target: https://django-structlog.readthedocs.io/en/latest/?badge=latest\n   :alt: documentation status\n\n.. |coverage| image:: https://img.shields.io/codecov/c/github/jrobichaud/django-structlog.svg\n   :target: https://codecov.io/gh/jrobichaud/django-structlog\n   :alt: codecov\n\n.. |python| image:: https://img.shields.io/pypi/pyversions/django-structlog.svg\n    :target: https://pypi.org/project/django-structlog/\n    :alt: supported python versions\n\n.. |license| image:: https://img.shields.io/pypi/l/django-structlog.svg\n    :target: https://github.com/jrobichaud/django-structlog/blob/main/license.rst\n    :alt: license\n\n.. |open_issues| image:: https://img.shields.io/github/issues/jrobichaud/django-structlog.svg\n    :target: https://github.com/jrobichaud/django-structlog/issues\n    :alt: github issues\n\n.. |django| image:: https://img.shields.io/pypi/djversions/django-structlog.svg\n    :target: https://pypi.org/project/django-structlog/\n    :alt: pypi - django version\n\n.. |pull_requests| image:: https://img.shields.io/github/issues-pr/jrobichaud/django-structlog.svg\n    :target: https://github.com/jrobichaud/django-structlog/pulls\n    :alt: github pull requests\n\n.. |forks| image:: https://img.shields.io/github/forks/jrobichaud/django-structlog.svg?style=social\n    :target: https://github.com/jrobichaud/django-structlog/\n    :alt: github forks\n\n.. |stars| image:: https://img.shields.io/github/stars/jrobichaud/django-structlog.svg?style=social\n    :target: https://github.com/jrobichaud/django-structlog/\n    :alt: github stars\n\n.. |watchers| image:: https://img.shields.io/github/watchers/jrobichaud/django-structlog.svg?style=social\n    :target: https://github.com/jrobichaud/django-structlog/\n    :alt: github watchers\n\n.. |wheels| image:: https://img.shields.io/pypi/wheel/django-structlog.svg\n    :target: https://pypi.org/project/django-structlog/\n    :alt: pypi - wheel\n\n.. |black| image:: https://img.shields.io/badge/code%20style-black-000000.svg\n    :target: https://github.com/python/black\n    :alt: black\n\n.. |ruff| image:: https://img.shields.io/endpoint?url=https://raw.githubusercontent.com/astral-sh/ruff/main/assets/badge/v2.json\n    :target: https://github.com/astral-sh/ruff\n    :alt: ruff\n\ndjango-structlog is a structured logging integration for `django <https://www.djangoproject.com/>`_ project using `structlog <https://www.structlog.org/>`_\n\nlogging will then produce additional cohesive metadata on each logs that makes it easier to track events or incidents.\n\n\nadditional popular integrations\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n`django rest framework <https://www.django-rest-framework.org/>`_\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n``django rest framework`` is supported by default. but when using it with ``rest_framework.authentication.tokenauthentication`` (or other drf authentications)  ``user_id`` will be only be in ``request_finished`` and ``request_failed`` instead of each logs.\n\nsee `#37  <https://github.com/jrobichaud/django-structlog/issues/37>`_ for details.\n\n`celery <http://www.celeryproject.org/>`_\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\ncelery's task logging requires additional configurations, see `documentation <https://django-structlog.readthedocs.io/en/latest/celery.html>`_ for details.\n\n\nlogging comparison\n^^^^^^^^^^^^^^^^^^\n\nstandard logging:\n~~~~~~~~~~~~~~~~~\n\n.. code-block:: python\n\n   >>> import logging\n   >>> logger = logging.get_logger(__name__)\n   >>> logger.info(\"an error occurred\")\n\n.. code-block:: bash\n\n   an error occurred\n\nwell... ok\n\nwith django-structlog and flat_line:\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n.. code-block:: python\n\n   >>> import structlog\n   >>> logger = structlog.get_logger(__name__)\n   >>> logger.info(\"an_error_occurred\", bar=\"buz\")\n\n.. code-block:: bash\n\n   timestamp='2019-04-13t19:39:31.089925z' level='info' event='an_error_occurred' logger='my_awesome_project.my_awesome_module' request_id='3a8f801c-072b-4805-8f38-e1337f363ed4' user_id=1 ip='0.0.0.0' bar='buz'\n\nthen you can search with commands like:\n\n.. code-block:: bash\n\n   $ cat logs/flat_line.log | grep request_id='3a8f801c-072b-4805-8f38-e1337f363ed4'\n\nwith django-structlog and json\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n.. code-block:: python\n\n   >>> import structlog\n   >>> logger = structlog.get_logger(__name__)\n   >>> logger.info(\"an_error_occurred\", bar=\"buz\")\n\n.. code-block:: json\n\n   {\"request_id\": \"3a8f801c-072b-4805-8f38-e1337f363ed4\", \"user_id\": 1, \"ip\": \"0.0.0.0\", \"event\": \"an_error_occurred\", \"timestamp\": \"2019-04-13t19:39:31.089925z\", \"logger\": \"my_awesome_project.my_awesome_module\", \"level\": \"info\", \"bar\": \"buz\"}\n\nthen you can search with commands like:\n\n.. code-block:: bash\n\n   $ cat logs/json.log | jq '.[] | select(.request_id=\"3a8f801c-072b-4805-8f38-e1337f363ed4\")' -s\n\n.. inclusion-marker-introduction-end\n\n.. inclusion-marker-getting-started-begin\n\ngetting started\n===============\n\nthese steps will show how to integrate the middleware to your awesome application.\n\ninstallation\n^^^^^^^^^^^^\n\ninstall the library\n\n.. code-block:: bash\n\n   pip install django-structlog\n\nadd app\n\n.. code-block:: python\n\n   installed_app = [\n       # ...\n       \"django_structlog\",\n       # ...\n   ]\n\nadd middleware\n\n.. code-block:: python\n\n   middleware = [\n       # ...\n       \"django_structlog.middlewares.requestmiddleware\",\n   ]\n\nadd appropriate structlog configuration to your ``settings.py``\n\n.. code-block:: python\n\n   import structlog\n\n   logging = {\n       \"version\": 1,\n       \"disable_existing_loggers\": false,\n       \"formatters\": {\n           \"json_formatter\": {\n               \"()\": structlog.stdlib.processorformatter,\n               \"processor\": structlog.processors.jsonrenderer(),\n           },\n           \"plain_console\": {\n               \"()\": structlog.stdlib.processorformatter,\n               \"processor\": structlog.dev.consolerenderer(),\n           },\n           \"key_value\": {\n               \"()\": structlog.stdlib.processorformatter,\n               \"processor\": structlog.processors.keyvaluerenderer(key_order=['timestamp', 'level', 'event', 'logger']),\n           },\n       },\n       \"handlers\": {\n           # important notes regarding handlers.\n           #\n           # 1. make sure you use handlers adapted for your project.\n           # these handlers configurations are only examples for this library.\n           # see python's logging.handlers: https://docs.python.org/3/library/logging.handlers.html\n           #\n           # 2. you might also want to use different logging configurations depending of the environment.\n           # different files (local.py, tests.py, production.py, ci.py, etc.) or only conditions.\n           # see https://docs.djangoproject.com/en/dev/topics/settings/#designating-the-settings\n           \"console\": {\n               \"class\": \"logging.streamhandler\",\n               \"formatter\": \"plain_console\",\n           },\n           \"json_file\": {\n               \"class\": \"logging.handlers.watchedfilehandler\",\n               \"filename\": \"logs/json.log\",\n               \"formatter\": \"json_formatter\",\n           },\n           \"flat_line_file\": {\n               \"class\": \"logging.handlers.watchedfilehandler\",\n               \"filename\": \"logs/flat_line.log\",\n               \"formatter\": \"key_value\",\n           },\n       },\n       \"loggers\": {\n           \"django_structlog\": {\n               \"handlers\": [\"console\", \"flat_line_file\", \"json_file\"],\n               \"level\": \"info\",\n           },\n           # make sure to replace the following logger's name for yours\n           \"django_structlog_demo_project\": {\n               \"handlers\": [\"console\", \"flat_line_file\", \"json_file\"],\n               \"level\": \"info\",\n           },\n       }\n   }\n\n   structlog.configure(\n       processors=[\n           structlog.contextvars.merge_contextvars,\n           structlog.stdlib.filter_by_level,\n           structlog.processors.timestamper(fmt=\"iso\"),\n           structlog.stdlib.add_logger_name,\n           structlog.stdlib.add_log_level,\n           structlog.stdlib.positionalargumentsformatter(),\n           structlog.processors.stackinforenderer(),\n           structlog.processors.format_exc_info,\n           structlog.processors.unicodedecoder(),\n           structlog.stdlib.processorformatter.wrap_for_formatter,\n       ],\n       logger_factory=structlog.stdlib.loggerfactory(),\n       cache_logger_on_first_use=true,\n   )\n\nstart logging with ``structlog`` instead of ``logging``.\n\n.. code-block:: python\n\n   import structlog\n   logger = structlog.get_logger(__name__)\n\n.. _django_signals:\n\nextending request log metadata\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nby default only a ``request_id`` and the ``user_id`` are bound from the request but pertinent log metadata may vary from a project to another.\n\nif you need to add more metadata from the request you can implement a convenient signal receiver to bind them. you can also override existing bound metadata the same way.\n\n.. code-block:: python\n\n    from django.contrib.sites.shortcuts import get_current_site\n    from django.dispatch import receiver\n    from django_structlog import signals\n    import structlog\n\n\n    @receiver(signals.bind_extra_request_metadata)\n    def bind_domain(request, logger, **kwargs):\n        current_site = get_current_site(request)\n        structlog.contextvars.bind_contextvars(domain=current_site.domain)\n\n\nstandard loggers\n^^^^^^^^^^^^^^^^\n\nit is also possible to log using standard python logger.\n\nin your formatters, add the ``foreign_pre_chain`` section, and then add ``structlog.contextvars.merge_contextvars``:\n\n.. code-block:: python\n\n   logging = {\n       \"version\": 1,\n       \"disable_existing_loggers\": false,\n       \"formatters\": {\n           \"json_formatter\": {\n               \"()\": structlog.stdlib.processorformatter,\n               \"processor\": structlog.processors.jsonrenderer(),\n               # add this section:\n               \"foreign_pre_chain\": [\n                   structlog.contextvars.merge_contextvars, # <---- add this\n                   # customize the rest as you need\n                   structlog.processors.timestamper(fmt=\"iso\"),\n                   structlog.stdlib.add_logger_name,\n                   structlog.stdlib.add_log_level,\n                   structlog.stdlib.positionalargumentsformatter(),\n               ],\n           },\n       },\n       ...\n    }\n\n\n.. inclusion-marker-getting-started-end\n\n\n.. inclusion-marker-example-outputs-begin\n\nexample outputs\n===============\n\nflat lines file (\\ ``logs/flat_lines.log``\\ )\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n.. code-block:: bash\n\n   timestamp='2019-04-13t19:39:29.321453z' level='info' event='request_started' logger='django_structlog.middlewares.request' request_id='c53dff1d-3fc5-4257-a78a-9a567c937561' user_id=1 ip='0.0.0.0' request=get / user_agent='mozilla/5.0 (macintosh; intel mac os x 10_14_4) applewebkit/537.36 (khtml, like gecko) chrome/73.0.3683.86 safari/537.36'\n   timestamp='2019-04-13t19:39:29.345207z' level='info' event='request_finished' logger='django_structlog.middlewares.request' request_id='c53dff1d-3fc5-4257-a78a-9a567c937561' user_id=1 ip='0.0.0.0' code=200\n   timestamp='2019-04-13t19:39:31.086155z' level='info' event='request_started' logger='django_structlog.middlewares.request' request_id='3a8f801c-072b-4805-8f38-e1337f363ed4' user_id=1 ip='0.0.0.0' request=post /success_task user_agent='mozilla/5.0 (macintosh; intel mac os x 10_14_4) applewebkit/537.36 (khtml, like gecko) chrome/73.0.3683.86 safari/537.36'\n   timestamp='2019-04-13t19:39:31.089925z' level='info' event='enqueuing successful task' logger='django_structlog_demo_project.home.views' request_id='3a8f801c-072b-4805-8f38-e1337f363ed4' user_id=1 ip='0.0.0.0'\n   timestamp='2019-04-13t19:39:31.147590z' level='info' event='task_enqueued' logger='django_structlog.middlewares.celery' request_id='3a8f801c-072b-4805-8f38-e1337f363ed4' user_id=1 ip='0.0.0.0' child_task_id='6b11fd80-3cdf-4de5-acc2-3fd4633aa654'\n   timestamp='2019-04-13t19:39:31.153081z' level='info' event='this is a successful task' logger='django_structlog_demo_project.taskapp.celery' task_id='6b11fd80-3cdf-4de5-acc2-3fd4633aa654' request_id='3a8f801c-072b-4805-8f38-e1337f363ed4' user_id=1 ip='0.0.0.0'\n   timestamp='2019-04-13t19:39:31.160043z' level='info' event='request_finished' logger='django_structlog.middlewares.request' request_id='3a8f801c-072b-4805-8f38-e1337f363ed4' user_id=1 ip='0.0.0.0' code=201\n   timestamp='2019-04-13t19:39:31.162372z' level='info' event='task_succeed' logger='django_structlog.middlewares.celery' task_id='6b11fd80-3cdf-4de5-acc2-3fd4633aa654' request_id='3a8f801c-072b-4805-8f38-e1337f363ed4' user_id=1 ip='0.0.0.0' result='none'\n\njson file (\\ ``logs/json.log``\\ )\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n.. code-block:: json\n\n   {\"request_id\": \"c53dff1d-3fc5-4257-a78a-9a567c937561\", \"user_id\": 1, \"ip\": \"0.0.0.0\", \"request\": \"get /\", \"user_agent\": \"mozilla/5.0 (macintosh; intel mac os x 10_14_4) applewebkit/537.36 (khtml, like gecko) chrome/73.0.3683.86 safari/537.36\", \"event\": \"request_started\", \"timestamp\": \"2019-04-13t19:39:29.321453z\", \"logger\": \"django_structlog.middlewares.request\", \"level\": \"info\"}\n   {\"request_id\": \"c53dff1d-3fc5-4257-a78a-9a567c937561\", \"user_id\": 1, \"ip\": \"0.0.0.0\", \"code\": 200, \"event\": \"request_finished\", \"timestamp\": \"2019-04-13t19:39:29.345207z\", \"logger\": \"django_structlog.middlewares.request\", \"level\": \"info\"}\n   {\"request_id\": \"3a8f801c-072b-4805-8f38-e1337f363ed4\", \"user_id\": 1, \"ip\": \"0.0.0.0\", \"request\": \"post /success_task\", \"user_agent\": \"mozilla/5.0 (macintosh; intel mac os x 10_14_4) applewebkit/537.36 (khtml, like gecko) chrome/73.0.3683.86 safari/537.36\", \"event\": \"request_started\", \"timestamp\": \"2019-04-13t19:39:31.086155z\", \"logger\": \"django_structlog.middlewares.request\", \"level\": \"info\"}\n   {\"request_id\": \"3a8f801c-072b-4805-8f38-e1337f363ed4\", \"user_id\": 1, \"ip\": \"0.0.0.0\", \"event\": \"enqueuing successful task\", \"timestamp\": \"2019-04-13t19:39:31.089925z\", \"logger\": \"django_structlog_demo_project.home.views\", \"level\": \"info\"}\n   {\"request_id\": \"3a8f801c-072b-4805-8f38-e1337f363ed4\", \"user_id\": 1, \"ip\": \"0.0.0.0\", \"child_task_id\": \"6b11fd80-3cdf-4de5-acc2-3fd4633aa654\", \"event\": \"task_enqueued\", \"timestamp\": \"2019-04-13t19:39:31.147590z\", \"logger\": \"django_structlog.middlewares.celery\", \"level\": \"info\"}\n   {\"task_id\": \"6b11fd80-3cdf-4de5-acc2-3fd4633aa654\", \"request_id\": \"3a8f801c-072b-4805-8f38-e1337f363ed4\", \"user_id\": 1, \"ip\": \"0.0.0.0\", \"event\": \"this is a successful task\", \"timestamp\": \"2019-04-13t19:39:31.153081z\", \"logger\": \"django_structlog_demo_project.taskapp.celery\", \"level\": \"info\"}\n   {\"request_id\": \"3a8f801c-072b-4805-8f38-e1337f363ed4\", \"user_id\": 1, \"ip\": \"0.0.0.0\", \"code\": 201, \"event\": \"request_finished\", \"timestamp\": \"2019-04-13t19:39:31.160043z\", \"logger\": \"django_structlog.middlewares.request\", \"level\": \"info\"}\n   {\"task_id\": \"6b11fd80-3cdf-4de5-acc2-3fd4633aa654\", \"request_id\": \"3a8f801c-072b-4805-8f38-e1337f363ed4\", \"user_id\": 1, \"ip\": \"0.0.0.0\", \"result\": \"none\", \"event\": \"task_succeed\", \"timestamp\": \"2019-04-13t19:39:31.162372z\", \"logger\": \"django_structlog.middlewares.celery\", \"level\": \"info\"}\n\n.. inclusion-marker-example-outputs-end\n\n.. inclusion-marker-upgrade-guide-begin\n\nupgrade guide\n=============\n\n.. _upgrade_7.0:\n\nupgrading to 7.0+\n^^^^^^^^^^^^^^^^^\n\nthe dependency `django-ipware <https://github.com/un33k/django-ipware>`_ was upgraded to version 6. this library is used to retrieve the request's ip address.\n\nversion 6 may have some `breaking changes <https://github.com/un33k/django-ipware/compare/v5.0.2...v6.0.2#diff-b335630551682c19a781afebcf4d07bf978fb1f8ac04c6bf87428ed5106870f5r97>`_ if you did customizations.\n\nit should not affect most of the users but if you did some customizations, you might need to update your configurations.\n\n.. _upgrade_6.0:\n\nupgrading to 6.0+\n^^^^^^^^^^^^^^^^^\n\nminimum requirements\n~~~~~~~~~~~~~~~~~~~~\n- requires python 3.8+\n\nchanges to do\n~~~~~~~~~~~~~\n\nadd ``django_structlog`` to installed app\n-----------------------------------------\n.. code-block:: python\n\n   installed_app = [\n       # ...\n       \"django_structlog\",\n       # ...\n   ]\n\n\nmake sure you use ``django_structlog.middlewares.requestmiddleware``\n--------------------------------------------------------------------\n\nif you used any of the experimental async or sync middlewares, you do not need to anymore.\nmake sure you use ``django_structlog.middlewares.requestmiddleware`` instead of any of the other request middlewares commented below:\n\n.. code-block:: python\n\n    middleware += [\n        # \"django_structlog.middlewares.request_middleware_router\", # <- remove\n        # \"django_structlog.middlewares.requests.syncrequestmiddleware\", # <- remove\n        # \"django_structlog.middlewares.requests.asyncrequestmiddleware\", # <- remove\n        \"django_structlog.middlewares.requestmiddleware\", # <- make sure you use this one\n    ]\n\n\n(if you use celery) make sure you use ``django_structlog_celery_enabled = true``\n--------------------------------------------------------------------------------\n\nit is only applicable if you use celery integration.\n\n``django_structlog.middlewares.celerymiddleware`` has been remove in favor of a django settings.\n\n.. code-block:: python\n\n    middleware += [\n        \"django_structlog.middlewares.requestmiddleware\",\n        # \"django_structlog.middlewares.celerymiddleware\",  # <- remove this\n    ]\n\n    django_structlog_celery_enabled = true # <-- add this\n\n.. _upgrade_5.0:\n\nupgrading to 5.0+\n^^^^^^^^^^^^^^^^^\n\nminimum requirements\n~~~~~~~~~~~~~~~~~~~~\n- requires asgiref 3.6+\n\n.. _upgrade_4.0:\n\nupgrading to 4.0+\n^^^^^^^^^^^^^^^^^\n\n``django-structlog`` drops support of django below 3.2.\n\nminimum requirements\n~~~~~~~~~~~~~~~~~~~~\n- requires django 3.2+\n- requires python 3.7+\n- requires structlog 21.4.0+\n- (optionally) requires celery 5.1+\n\n\nchanges if you use ``celery``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nyou can now install ``django-structlog`` explicitly with ``celery`` extra in order to validate the compatibility with your version of ``celery``.\n\n\n.. code-block:: bash\n\n    django-structlog[celery]==4.0.0\n\nsee `installing \u201cextras\u201d <https://packaging.python.org/en/latest/tutorials/installing-packages/#installing-extras>`_ for more information about this ``pip`` feature.\n\n.. _upgrade_3.0:\n\nupgrading to 3.0+\n^^^^^^^^^^^^^^^^^\n\n``django-structlog`` now use  `structlog.contextvars.bind_contextvars <https://www.structlog.org/en/stable/contextvars.html>`_ instead of ``threadlocal``.\n\nminimum requirements\n~~~~~~~~~~~~~~~~~~~~\n- requires python 3.7+\n- requires structlog 21.4.0+\n\n\nchanges you need to do\n~~~~~~~~~~~~~~~~~~~~~~\n\n1. update structlog settings\n----------------------------\n\n- add ``structlog.contextvars.merge_contextvars`` as first ``processors``\n- remove ``context_class=structlog.threadlocal.wrap_dict(dict),``\n- (if you use standard loggers) add ``structlog.contextvars.merge_contextvars`` in `foreign_pre_chain`\n- (if you use standard loggers) remove ``django_structlog.processors.inject_context_dict,``\n\n\n.. code-block:: python\n\n   structlog.configure(\n       processors=[\n           structlog.contextvars.merge_contextvars, # <---- add this\n           structlog.stdlib.filter_by_level,\n           structlog.processors.timestamper(fmt=\"iso\"),\n           structlog.stdlib.add_logger_name,\n           structlog.stdlib.add_log_level,\n           structlog.stdlib.positionalargumentsformatter(),\n           structlog.processors.stackinforenderer(),\n           structlog.processors.format_exc_info,\n           structlog.processors.unicodedecoder(),\n           structlog.stdlib.processorformatter.wrap_for_formatter,\n       ],\n       # context_class=structlog.threadlocal.wrap_dict(dict), # <---- remove this\n       logger_factory=structlog.stdlib.loggerfactory(),\n       cache_logger_on_first_use=true,\n   )\n\n   # if you use standard logging\n   logging = {\n       \"version\": 1,\n       \"disable_existing_loggers\": false,\n       \"formatters\": {\n           \"json_formatter\": {\n               \"()\": structlog.stdlib.processorformatter,\n               \"processor\": structlog.processors.jsonrenderer(),\n               \"foreign_pre_chain\": [\n                   structlog.contextvars.merge_contextvars, # <---- add this\n                   # django_structlog.processors.inject_context_dict, # <---- remove this\n                   structlog.processors.timestamper(fmt=\"iso\"),\n                   structlog.stdlib.add_logger_name,\n                   structlog.stdlib.add_log_level,\n                   structlog.stdlib.positionalargumentsformatter(),\n               ],\n           },\n       },\n       ...\n    }\n\n\n2. replace all ``logger.bind`` with ``structlog.contextvars.bind_contextvars``\n------------------------------------------------------------------------------\n\n.. code-block:: python\n\n    @receiver(bind_extra_request_metadata)\n    def bind_domain(request, logger, **kwargs):\n        current_site = get_current_site(request)\n        # logger.bind(domain=current_site.domain)\n        structlog.contextvars.bind_contextvars(domain=current_site.domain)\n\n.. _upgrade_2.0:\n\nupgrading to 2.0+\n^^^^^^^^^^^^^^^^^\n\n``django-structlog`` was originally developed using the debug configuration `exceptionprettyprinter <https://www.structlog.org/en/stable/api.html#structlog.processors.exceptionprettyprinter>`_ which led to incorrect handling of exception.\n\n- remove ``structlog.processors.exceptionprettyprinter(),`` of your processors.\n- make sure you have ``structlog.processors.format_exc_info,`` in your processors if you want appropriate exception logging.\n\n.. inclusion-marker-upgrade-guide-end\n\n.. inclusion-marker-running-tests-begin\n\nrunning the tests\n=================\n\nnote: for the moment redis is needed to run the tests. the easiest way is to start docker demo's redis.\n\n.. code-block:: bash\n\n   docker compose up -d redis\n   pip install -r requirements.txt\n   env celery_broker_url=redis://0.0.0.0:6379 django_settings_module=config.settings.test pytest test_app\n   env celery_broker_url=redis://0.0.0.0:6379 django_settings_module=config.settings.test_demo_app pytest django_structlog_demo_project\n   docker compose stop redis\n\n.. inclusion-marker-running-tests-end\n\n\n.. inclusion-marker-demo-begin\n\ndemo app\n========\n\n.. code-block:: bash\n\n   docker compose up --build\n\nopen ``http://127.0.0.1:8000/`` in your browser.\n\nnavigate while looking into the log files and shell's output.\n\n.. inclusion-marker-demo-end\n\n\n.. inclusion-marker-authors-begin\n\nauthors\n=======\n\n\n* **jules robichaud-gagnon** - *initial work* - `jrobichaud <https://github.com/jrobichaud>`_\n\nsee also the list of `contributors <https://github.com/jrobichaud/django-structlog/contributors>`_ who participated in this project.\n\n.. inclusion-marker-authors-end\n\n\n.. inclusion-marker-acknowledgements-begin\n\nacknowledgments\n===============\n\n* big thanks to `@ferd <https://github.com/ferd>`_ for his `bad opinions <https://ferd.ca/erlang-otp-21-s-new-logger.html>`_ that inspired the author enough to spend time on this library.\n* `this issue <https://github.com/hynek/structlog/issues/175>`_ helped the author to figure out how to integrate ``structlog`` in django.\n* `this stack overflow question <https://stackoverflow.com/questions/43855507/configuring-and-using-structlog-with-django>`_ was also helpful.\n\n.. inclusion-marker-acknowledgements-end\n\nlicense\n=======\n\nthis project is licensed under the mit license - see the `license <https://github.com/jrobichaud/django-structlog/blob/main/license.rst>`_ file for details\n",
  "docs_url": null,
  "keywords": "",
  "license": "mit",
  "name": "django-structlog",
  "package_url": "https://pypi.org/project/django-structlog/",
  "project_url": "https://pypi.org/project/django-structlog/",
  "project_urls": {
    "changelog": "https://django-structlog.readthedocs.io/en/latest/changelog.html",
    "documentation": "https://django-structlog.readthedocs.io",
    "homepage": "https://github.com/jrobichaud/django-structlog",
    "repository": "https://github.com/jrobichaud/django-structlog",
    "tracker": "https://github.com/jrobichaud/django-structlog/issues"
  },
  "release_url": "https://pypi.org/project/django-structlog/7.1.0/",
  "requires_dist": [
    "django >=3.2",
    "structlog >=21.4.0",
    "asgiref >=3.6.0",
    "django-ipware >=6.0.2",
    "celery >=5.1 ; extra == 'celery'",
    "django-extensions >=1.4.9 ; extra == 'commands'"
  ],
  "requires_python": ">=3.8",
  "summary": "structured logging for django",
  "version": "7.1.0",
  "releases": [],
  "developers": [
    "j.robichaudg+pypi@gmail.com"
  ],
  "kwds": "django_structlog django_structlog_demo_project django_structlog_celery_enabled _django_signals django",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_django_structlog",
  "homepage": "",
  "release_count": 64,
  "dependency_ids": [
    "pypi_asgiref",
    "pypi_celery",
    "pypi_django",
    "pypi_django_extensions",
    "pypi_django_ipware",
    "pypi_structlog"
  ]
}
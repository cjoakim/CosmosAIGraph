{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: developers",
    "intended audience :: science/research",
    "license :: osi approved :: bsd license",
    "natural language :: english",
    "operating system :: os independent",
    "programming language :: python",
    "programming language :: python :: 2",
    "programming language :: python :: 3",
    "programming language :: python :: implementation :: cpython",
    "programming language :: python :: implementation :: pypy",
    "topic :: multimedia :: sound/audio"
  ],
  "description": "python-soundfile\n================\n\n|version| |python| |status| |license|\n\n|contributors| |downloads|\n\nthe `soundfile <https://github.com/bastibe/python-soundfile>`__ module is an audio\nlibrary based on libsndfile, cffi and numpy. full documentation is\navailable on https://python-soundfile.readthedocs.io/.\n\nthe ``soundfile`` module can read and write sound files. file reading/writing is\nsupported through `libsndfile <http://www.mega-nerd.com/libsndfile/>`__,\nwhich is a free, cross-platform, open-source (lgpl) library for reading\nand writing many different sampled sound file formats that runs on many\nplatforms including windows, os x, and unix. it is accessed through\n`cffi <https://cffi.readthedocs.io/>`__, which is a foreign function\ninterface for python calling c code. cffi is supported for cpython 2.6+,\n3.x and pypy 2.0+. the ``soundfile`` module represents audio data as numpy arrays.\n\n| python-soundfile is bsd licensed (bsd 3-clause license).\n| (c) 2013, bastian bechtold\n\n\n|open-issues| |closed-issues| |open-prs| |closed-prs|\n\n.. |contributors| image:: https://img.shields.io/github/contributors/bastibe/python-soundfile.svg\n.. |version| image:: https://img.shields.io/pypi/v/soundfile.svg\n.. |python| image:: https://img.shields.io/pypi/pyversions/soundfile.svg\n.. |license| image:: https://img.shields.io/github/license/bastibe/python-soundfile.svg\n.. |downloads| image:: https://img.shields.io/pypi/dm/soundfile.svg\n.. |open-issues| image:: https://img.shields.io/github/issues/bastibe/python-soundfile.svg\n.. |closed-issues| image:: https://img.shields.io/github/issues-closed/bastibe/python-soundfile.svg\n.. |open-prs| image:: https://img.shields.io/github/issues-pr/bastibe/python-soundfile.svg\n.. |closed-prs| image:: https://img.shields.io/github/issues-pr-closed/bastibe/python-soundfile.svg\n.. |status| image:: https://img.shields.io/pypi/status/soundfile.svg\n\nbreaking changes\n----------------\n\nthe ``soundfile`` module has evolved rapidly in the past. most\nnotably, we changed the import name from ``import pysoundfile`` to\n``import soundfile`` in 0.7. in 0.6, we cleaned up many small\ninconsistencies, particularly in the the ordering and naming of\nfunction arguments and the removal of the indexing interface.\n\nin 0.8.0, we changed the default value of ``always_2d`` from ``true``\nto ``false``. also, the order of arguments of the ``write`` function\nchanged from ``write(data, file, ...)`` to ``write(file, data, ...)``.\n\nin 0.9.0, we changed the ``ctype`` arguments of the ``buffer_*``\nmethods to ``dtype``, using the numpy ``dtype`` notation. the old\n``ctype`` arguments still work, but are now officially deprecated.\n\nin 0.12.0, we changed the load order of the libsndfile library. now,\nthe packaged libsndfile in the platform-specific wheels is tried\nbefore falling back to any system-provided libsndfile. if you would\nprefer using the system-provided libsndfile, install the source\npackage or source wheel instead of the platform-specific wheels.\n\ninstallation\n------------\n\nthe ``soundfile`` module depends on the python packages cffi and numpy, and the\nlibrary libsndfile.\n\nin a modern python, you can use ``pip install soundfile`` to download\nand install the latest release of the ``soundfile`` module and its\ndependencies. on windows (64/32) and os x (intel/arm) and linux 64,\nthis will also install a current version of the library libsndfile. if\nyou install the source module, you need to install libsndfile using\nyour distribution's package manager, for example ``sudo apt install\nlibsndfile1``.\n\nif you are running on an unusual platform or if you are using an older\nversion of python, you might need to install numpy and cffi separately,\nfor example using the anaconda_ package manager or the `unofficial windows\nbinaries for python extension packages <http://www.lfd.uci.edu/~gohlke/pythonlibs/>`_.\n\n.. _anaconda: https://www.continuum.io/downloads\n\nbuilding\n--------\n\n``soundfile`` itself does not contain any compiled code and can be\nbundled into a wheel with the usual ``python setup.py bdist_wheel``.\nhowever, ``soundfile`` relies on libsndfile, and optionally ships its\nown copy of libsndfile in the wheel.\n\nto build a binary wheel that contains libsndfile, make sure to\ncheckout and update the ``_soundfile_data`` submodule, then run\n``python setup.py bdist_wheel`` as usual. if the resulting file size\nof the wheel is around one megabyte, a matching libsndfile has been\nbundled (without libsndfile, it's around 25 kb).\n\nto build binary wheels for all supported platforms, run ``python\nbuild_wheels.py``, which will ``python setup.py bdist_wheel`` for each\nof the platforms we have precompiled libsndfiles for.\n\nerror reporting\n---------------\n\nin case of api usage errors the ``soundfile`` module raises the usual `valueerror` or `typeerror`.\n\nfor other errors `soundfileerror` is raised (used to be `runtimeerror`).\nparticularly, a `libsndfileerror` subclass of this exception is raised on\nerrors reported by the libsndfile library. in that case the exception object\nprovides the libsndfile internal error code in the `libsndfileerror.code` attribute and the raw\nlibsndfile error message in the `libsndfileerror.error_string` attribute.\n\nread/write functions\n--------------------\n\ndata can be written to the file using `soundfile.write()`, or read from\nthe file using `soundfile.read()`. the ``soundfile`` module can open all file formats\nthat `libsndfile supports\n<http://www.mega-nerd.com/libsndfile/#features>`__, for example wav,\nflac, ogg and mat files (see `known issues <https://github.com/bastibe/python-soundfile#known-issues>`__ below about writing ogg files).\n\nhere is an example for a program that reads a wave file and copies it\ninto an flac file:\n\n.. code:: python\n\n    import soundfile as sf\n\n    data, samplerate = sf.read('existing_file.wav')\n    sf.write('new_file.flac', data, samplerate)\n\nblock processing\n----------------\n\nsound files can also be read in short, optionally overlapping blocks\nwith `soundfile.blocks()`.\nfor example, this calculates the signal level for each block of a long\nfile:\n\n.. code:: python\n\n   import numpy as np\n   import soundfile as sf\n\n   rms = [np.sqrt(np.mean(block**2)) for block in\n          sf.blocks('myfile.wav', blocksize=1024, overlap=512)]\n\n``soundfile`` objects\n---------------------\n\nsound files can also be opened as `soundfile` objects. every\n`soundfile` has a specific sample rate, data format and a set number of\nchannels.\n\nif a file is opened, it is kept open for as long as the `soundfile`\nobject exists. the file closes when the object is garbage collected,\nbut you should use the `soundfile.close()` method or the\ncontext manager to close the file explicitly:\n\n.. code:: python\n\n   import soundfile as sf\n\n   with sf.soundfile('myfile.wav', 'r+') as f:\n       while f.tell() < f.frames:\n           pos = f.tell()\n           data = f.read(1024)\n           f.seek(pos)\n           f.write(data*2)\n\nall data access uses frames as index. a frame is one discrete time-step\nin the sound file. every frame contains as many samples as there are\nchannels in the file.\n\nraw files\n---------\n\n`soundfile.read()` can usually auto-detect the file type of sound files. this\nis not possible for raw files, though:\n\n.. code:: python\n\n   import soundfile as sf\n\n   data, samplerate = sf.read('myfile.raw', channels=1, samplerate=44100,\n                              subtype='float')\n\nnote that on x86, this defaults to ``endian='little'``. if you are\nreading big endian data (mostly old powerpc/6800-based files), you\nhave to set ``endian='big'`` accordingly.\n\nyou can write raw files in a similar way, but be advised that in most\ncases, a more expressive format is better and should be used instead.\n\nvirtual io\n----------\n\nif you have an open file-like object, `soundfile.read()` can open it just like\nregular files:\n\n.. code:: python\n\n    import soundfile as sf\n    with open('filename.flac', 'rb') as f:\n        data, samplerate = sf.read(f)\n\nhere is an example using an http request:\n\n.. code:: python\n\n    import io\n    import soundfile as sf\n    from urllib.request import urlopen\n\n    url = \"http://tinyurl.com/shepard-risset\"\n    data, samplerate = sf.read(io.bytesio(urlopen(url).read()))\n\nnote that the above example only works with python 3.x.\nfor python 2.x support, replace the third line with:\n\n.. code:: python\n\n    from urllib2 import urlopen\n\nknown issues\n------------\n\nwriting to ogg files can result in empty files with certain versions of libsndfile. see `#130 <https://github.com/bastibe/python-soundfile/issues/130>`__ for news on this issue.\n\nif using a buildroot style system, python has trouble locating ``libsndfile.so`` file, which causes python-soundfile to not be loaded. this is apparently a bug in `python <https://bugs.python.org/issue13508>`__. for the time being, in ``soundfile.py``, you can remove the call to ``_find_library`` and hardcode the location of the ``libsndfile.so`` in ``_ffi.dlopen``. see `#258 <https://github.com/bastibe/python-soundfile/issues/258>`__ for discussion on this issue.\n\nnews\n----\n\n2013-08-27 v0.1.0 bastian bechtold:\n    initial prototype. a simple wrapper for libsndfile in python\n\n2013-08-30 v0.2.0 bastian bechtold:\n    bugfixes and more consistency with pysoundcard\n\n2013-08-30 v0.2.1 bastian bechtold:\n    bugfixes\n\n2013-09-27 v0.3.0 bastian bechtold:\n    added binary installer for windows, and context manager\n\n2013-11-06 v0.3.1 bastian bechtold:\n    switched from distutils to setuptools for easier installation\n\n2013-11-29 v0.4.0 bastian bechtold:\n    thanks to david blewett, now with virtual io!\n\n2013-12-08 v0.4.1 bastian bechtold:\n    thanks to xidorn quan, flac files are not float32 any more.\n\n2014-02-26 v0.5.0 bastian bechtold:\n    thanks to matthias geier, improved seeking and a flush() method.\n\n2015-01-19 v0.6.0 bastian bechtold:\n    a big, big thank you to matthias geier, who did most of the work!\n\n    - switched to ``float64`` as default data type.\n    - function arguments changed for consistency.\n    - added unit tests.\n    - added global `read()`, `write()`, `blocks()` convenience\n      functions.\n    - documentation overhaul and hosting on readthedocs.\n    - added ``'x'`` open mode.\n    - added `tell()` method.\n    - added ``__repr__()`` method.\n\n2015-04-12 v0.7.0 bastian bechtold:\n    again, thanks to matthias geier for all of his hard work, but also\n    nils werner and whistler7 for their many suggestions and help.\n\n    - renamed ``import pysoundfile`` to ``import soundfile``.\n    - installation through pip wheels that contain the necessary\n      libraries for os x and windows.\n    - removed ``exclusive_creation`` argument to `write()`.\n    - added `truncate()` method.\n\n2015-10-20 v0.8.0 bastian bechtold:\n    again, matthias geier contributed a whole lot of hard work to this\n    release.\n\n    - changed the default value of ``always_2d`` from ``true`` to\n      ``false``.\n    - numpy is now optional, and only loaded for ``read`` and\n      ``write``.\n    - added `soundfile.buffer_read()` and\n      `soundfile.buffer_read_into()` and `soundfile.buffer_write()`,\n      which read/write raw data without involving numpy.\n    - added `info()` function that returns metadata of a sound file.\n    - changed the argument order of the `write()` function from\n      ``write(data, file, ...)`` to ``write(file, data, ...)``\n\n    and many more minor bug fixes.\n\n2017-02-02 v0.9.0 bastian bechtold:\n    thank you, matthias geier, tomas garcia, and todd, for contributions\n    for this release.\n\n    - adds support for alac files.\n    - adds new member ``__libsndfile_version__``\n    - adds number of frames to ``info`` class\n    - adds ``dtype`` argument to ``buffer_*`` methods\n    - deprecates ``ctype`` argument to ``buffer_*`` methods\n    - adds official support for python 3.6\n\n    and some minor bug fixes.\n\n2017-11-12 v0.10.0 bastian bechtold:\n    thank you, matthias geier, toni barth, jon peirce, till hoffmann,\n    and tomas garcia, for contributions to this release.\n\n    - should now work with cx_freeze.\n    - several documentation fixes in the readme.\n    - removes deprecated ``ctype`` argument in favor of ``dtype`` in ``buffer_*()``.\n    - adds `soundfile.frames` in favor of now-deprecated ``__len__()``.\n    - improves performance of `blocks()` and `soundfile.blocks()`.\n    - improves import time by using cffi's out of line mode.\n    - adds a build script for building distributions.\n\n2022-06-02 v0.11.0 bastian bechtold:\n    thank you, tennies, hannes helmholz, christoph boeddeker, matt\n    vollrath, matthias geier, jacek konieczny, boris verkhovskiy,\n    jonas haag, eduardo moguillansky, panos laganakos, jarvy jarvison,\n    domingo ramirez, tim chagnon, kyle benesch, fabian-robert st\u00f6ter,\n    joe todd\n\n    - mp3 support\n    - adds binary wheels for macos m1\n    - improves compatibility with macos, specifically for m1 machines\n    - fixes file descriptor open for binary wheels on windows and python 3.5+\n    - updates libsndfile to v1.1.0\n    - adds get_strings method for retrieving all metadata at once\n    - improves documentation, error messages and tests\n    - displays length of very short files in samples\n    - supports the file system path protocol (pathlib et al)\n\n2023-02-02 v0.12.0 bastian bechtold\n    thank you, barabazs, andrew murray, jon peirce, for contributions\n    to this release.\n\n    - updated libsndfile to v1.2.0\n    - improves precompiled library location, especially with py2app or cx-freeze.\n    - now provide binary wheels for linux x86_64\n    - now prefers packaged libsndfile over system-installed libsndfile\n\n2023-02-15 v0.12.1 bastian bechtold\n    thank you, funnypig, for the bug report\n\n    - fixed typo on library location detection if no packaged lib and\n      no system lib was found\n\n\n",
  "docs_url": null,
  "keywords": "audio,libsndfile",
  "license": "bsd 3-clause license",
  "name": "soundfile",
  "package_url": "https://pypi.org/project/soundfile/",
  "project_url": "https://pypi.org/project/soundfile/",
  "project_urls": {
    "Homepage": "https://github.com/bastibe/python-soundfile"
  },
  "release_url": "https://pypi.org/project/soundfile/0.12.1/",
  "requires_dist": [
    "cffi (>=1.0)",
    "numpy ; extra == 'numpy'"
  ],
  "requires_python": "",
  "summary": "an audio library based on libsndfile, cffi and numpy",
  "version": "0.12.1",
  "releases": [],
  "developers": [
    "basti@bastibe.de",
    "bastian_bechtold"
  ],
  "kwds": "pysoundfile _soundfile_data soundfile pysoundcard pythonlibs",
  "license_kwds": "bsd 3-clause license",
  "libtype": "pypi",
  "id": "pypi_soundfile",
  "homepage": "https://github.com/bastibe/python-soundfile",
  "release_count": 10,
  "dependency_ids": [
    "pypi_cffi",
    "pypi_numpy"
  ]
}
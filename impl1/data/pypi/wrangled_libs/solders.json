{
  "classifiers": [
    "programming language :: python :: implementation :: cpython",
    "programming language :: python :: implementation :: pypy",
    "programming language :: rust"
  ],
  "description": "<div align=\"center\">\n    <img src=\"https://raw.githubusercontent.com/kevinheavey/solders/main/docs/logo.jpeg\" width=\"50%\" height=\"50%\">\n</div>\n\n---\n\n[![actions\nstatus](https://github.com/kevinheavey/solders/workflows/ci/badge.svg)](https://github.com/kevinheavey/solders/actions?query=workflow%3aci)\n[![pypi version](https://badge.fury.io/py/solders.svg)](https://badge.fury.io/py/solders)\n[![license: mit](https://img.shields.io/badge/license-mit-yellow.svg)](https://github.com/kevinheavey/solders/blob/main/license)\n[![code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)\n\n# solders\n\n`solders` is a high-performance python toolkit for solana, written in rust. it provides robust solutions to the following problems:\n\n- core sdk stuff: keypairs, pubkeys, signing and serializing transactions - that sort of thing.\n- rpc stuff: building requests and parsing responses (no networking stuff - if you want help with that, \n[solana-py](https://michaelhly.github.io/solana-py/rpc/async_api/) is your friend).\n- integration testing stuff: the `solders.bankrun` module is an alternative to `solana-test-validator` that's much more convenient and **much** faster. it's based on [solana-program-test](https://crates.io/crates/solana-program-test) if you know that is.\n\n## what about solana-py?\n\n`solders` and `solana-py` are good friends. `solana-py` uses `solders` under the hood extensively in its\ncore api and rpc api. the main differences are:\n\n- `solders` doesn't have functions to actually interact with the rpc server (though `solana-py` does use the rpc code from `solders`).\n- `solders` doesn't provide spl token and spl memo clients.\n- `solana-py` may not have support for all the rpc requests and responses provided by `solders`.\n- `solana-py` doesn't have anything like the `bankrun` testing kit.\n\nsince `solana-py` uses `solders` under the hood and they don't duplicate each other's features, you should just use whichever library you need.\n\n## installation\n\n```\npip install solders\n```\n\nnote: requires python >= 3.7.\n\n## example usage\n\n```python\n>>> from solders.message import message\n>>> from solders.keypair import keypair\n>>> from solders.instruction import instruction\n>>> from solders.hash import hash\n>>> from solders.transaction import transaction\n>>> from solders.pubkey import pubkey\n>>> program_id = pubkey.default()\n>>> arbitrary_instruction_data = bytes([1])\n>>> accounts = []\n>>> instruction = instruction(program_id, arbitrary_instruction_data, accounts)\n>>> payer = keypair()\n>>> message = message([instruction], payer.pubkey())\n>>> blockhash = hash.default()  # replace with a real blockhash\n>>> tx = transaction([payer], message, blockhash)\n\n```\n\n## development\n\n### setup\n\n1. install [poetry](https://python-poetry.org/)\n2. install dev dependencies:\n\n```\npoetry install\n```\n\n3. activate the poetry shell:\n\n```sh\npoetry shell\n```\n\n### testing\n\n1. run `maturin develop` to compile the rust code.\n2. run `make fmt`, `make lint`, and `make test`.\n\n",
  "docs_url": null,
  "keywords": "",
  "license": "mit",
  "name": "solders",
  "package_url": "https://pypi.org/project/solders/",
  "project_url": "https://pypi.org/project/solders/",
  "project_urls": {
    "changelog": "https://github.com/kevinheavey/solders/blob/main/CHANGELOG.md",
    "documentation": "https://kevinheavey.github.io/solders/",
    "homepage": "https://github.com/kevinheavey/solders",
    "repository": "https://github.com/kevinheavey/solders"
  },
  "release_url": "https://pypi.org/project/solders/0.18.1/",
  "requires_dist": [
    "typing-extensions >=4.2.0",
    "jsonalias ==0.1.1"
  ],
  "requires_python": ">=3.7",
  "summary": "python bindings for solana rust tools",
  "version": "0.18.1",
  "releases": [],
  "developers": [
    "kevinheavey123@gmail.com"
  ],
  "kwds": "badge solders logo workflow workflows",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_solders",
  "homepage": "",
  "release_count": 35,
  "dependency_ids": [
    "pypi_jsonalias",
    "pypi_typing_extensions"
  ]
}
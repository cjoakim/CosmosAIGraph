{
  "classifiers": [
    "programming language :: python :: implementation :: cpython",
    "programming language :: python :: implementation :: pypy",
    "programming language :: rust"
  ],
  "description": "starlark-pyo3: python bindings for starlark-rust\n================================================\n\n.. image:: https://github.com/inducer/starlark-pyo3/workflows/ci/badge.svg?branch=main&event=push\n    :alt: github build status\n    :target: https://github.com/inducer/starlark-pyo3/actions?query=branch%3amain+workflow%3aci+event%3apush\n.. image:: https://badge.fury.io/py/starlark-pyo3.png\n    :alt: python package index release page\n    :target: https://pypi.org/project/starlark-pyo3/\n\nthis package provides a sandboxed/restricted python-like environment \nby exposing the\n`starlark-rust <https://github.com/facebookexperimental/starlark-rust/>`__\ninterpreter for the\n`starlark <https://github.com/bazelbuild/starlark/blob/master/spec.md>`__\npython-like language to python via `pyo3 <https://pyo3.rs>`__.\n\n`starlark <https://github.com/bazelbuild/starlark>`__ claims the following\n*design principles*:\n\n-   **deterministic evaluation**. executing the same code twice will give the\n    same results.\n-   **hermetic execution**. execution cannot access the file system, network,\n    system clock. it is safe to execute untrusted code.\n-   **parallel evaluation**. modules can be loaded in parallel. to guarantee a\n    thread-safe execution, shared data becomes immutable.\n-   **simplicity**. we try to limit the number of concepts needed to understand\n    the code. users should be able to quickly read and write code, even if they\n    are not expert. the language should avoid pitfalls as much as possible.\n-   **focus on tooling**. we recognize that the source code will be read,\n    analyzed, modified, by both humans and tools.\n-   **python-like**. python is a widely used language. keeping the language\n    similar to python can reduce the learning curve and make the semantics more\n    obvious to users.\n\n*status:* this is reasonably complete and usable.\n\nlinks\n-----\n\n-  `documentation <https://documen.tician.de/starlark-pyo3/>`__\n-  `github <https://github.com/inducer/starlark-pyo3>`__ (issues etc.)\n-  `package index <https://pypi.org/project/starlark-pyo3>`__\n\ninstallation \n------------\nto install, say::\n\n    pip install starlark-pyo3\n\nbinary wheels are available for all major platforms.  the module is importable\nas ``starlark``.\n\ninstallation for development\n----------------------------\n\nto use this, make sure you have nightly rust available::\n\n    curl \u2013proto \u2018=https\u2019 \u2013tlsv1.2 -ssf https://sh.rustup.rs \\| sh rustup\n    default nightly\n\nthen, to install into the current python virtual environment::\n\n    pip install maturin\n    maturin develop\n\n",
  "docs_url": null,
  "keywords": "",
  "license": "mit",
  "name": "starlark-pyo3",
  "package_url": "https://pypi.org/project/starlark-pyo3/",
  "project_url": "https://pypi.org/project/starlark-pyo3/",
  "project_urls": {
    "Homepage": "https://github.com/inducer/starlark-pyo3"
  },
  "release_url": "https://pypi.org/project/starlark-pyo3/2023.1/",
  "requires_dist": [],
  "requires_python": ">=3.7",
  "summary": "wraps starlark-rust into python",
  "version": "2023.1",
  "releases": [],
  "developers": [
    "inform@tiker.net"
  ],
  "kwds": "starlark pyo3 py python pip",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_starlark_pyo3",
  "homepage": "https://github.com/inducer/starlark-pyo3",
  "release_count": 3,
  "dependency_ids": []
}
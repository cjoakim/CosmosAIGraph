{
  "classifiers": [],
  "description": "[![build_status](https://travis-ci.org/dsoprea/pysvn.svg?branch=master)](https://travis-ci.org/dsoprea/pysvn)\n\n[![coverage_status](https://coveralls.io/repos/github/dsoprea/pysvn/badge.svg?branch=master)](https://coveralls.io/github/dsoprea/pysvn?branch=master)\n\n\n# introduction\n\n*svn* is a simple subversion library for python. i wrote it so that there could\nbe a lightweight and accessible library that was also available on *pypi*. it is\ncompatible with both python 2.7 and 3.3+.\n\nthe library wraps the `svn` commandline client, which should consequently be\ninstalled on the local system.\n\nfunctions currently implemented:\n\n- list\n- info\n- log\n- checkout\n- export\n- cat\n- diff\n- diff_summary\n- status\n- add\n- commit\n- update\n- cleanup\n\nin addition, there is also an \"admin\" class (`svn.admin.admin`) that provides a\n`create` method with which to create repositories.\n\n**you are more than welcome to submit pull-requests to add more support for\nadditional subcommands.**\n\n\n# usage\n\nusage is divided between two clients that either allow for access to a local\nworking-directory or a remote repository.\n\nboth clients inherit a common set of methods that work with both local working-\ndirectories and remote repositories.\n\n`svn.utility.get_client` is provided for convenience. if you provide a location\nthat starts with a backslash, it will return a localclient instance. otherwise,\nit will return a remoteclient instance.\n\nyou may pass `username` and `password` as optional arguments to both the\nconstructor and utility function.\n\n\n## localclient\n\n*localclient* allows access to a local working copy.\n\n\n## remoteclient\n\n*remoteclient* allows access to a remote repository.\n\n\n## svnexception\n\n*svnexception* is raised whenever there is an issue with the svn repository. we\nare no longer supporting catching *valueerror*.\n\n\n## checkout(path)\n\ncheckout a remote repository:\n\n```\nimport svn.remote\n\nr = svn.remote.remoteclient('https://repo.local/svn')\nr.checkout('/tmp/working')\n```\n\n\n## common functionality\n\nthese methods are available on both clients.\n\n\n### info(rel_path=none)\n\nget information about the directory.\n\n```\nimport pprint\n\nimport svn.local\n\nr = svn.local.localclient('/tmp/test_repo.co')\ninfo = r.info()\npprint.pprint(info)\n\n#{'commit#revision': 0,\n# 'commit/author': none,\n# 'commit/date': datetime.datetime(2015, 4, 24, 2, 53, 21, 874970, tzinfo=tzutc()),\n# 'commit_author': none,\n# 'commit_date': datetime.datetime(2015, 4, 24, 2, 53, 21, 874970, tzinfo=tzutc()),\n# 'commit_revision': 0,\n# 'entry#kind': 'dir',\n# 'entry#path': '/tmp/test_repo.co',\n# 'entry#revision': 0,\n# 'entry_kind': 'dir',\n# 'entry_path': '/tmp/test_repo.co',\n# 'entry_revision': 0,\n# 'relative_url': none,\n# 'repository/root': 'file:///tmp/test_repo',\n# 'repository/uuid': '7446d4e9-8846-46c0-858a-34a2a1739d1c',\n# 'repository_root': 'file:///tmp/test_repo',\n# 'repository_uuid': '7446d4e9-8846-46c0-858a-34a2a1739d1c',\n# 'url': 'file:///tmp/test_repo',\n# 'wc-info/depth': none,\n# 'wc-info/schedule': none,\n# 'wc-info/wcroot-abspath': none,\n# 'wcinfo_depth': none,\n# 'wcinfo_schedule': none,\n# 'wcinfo_wcroot_abspath': none}\n```\n\nnote: the keys named with dashes, slashes, and hashes are considered\n      obsolete, and only available for backwards compatibility. we\n      have since moved to using only underscores to separate words.\n\n\n### cat(rel_filepath)\n\nget file-data as string.\n\n```\nimport svn.local\n\nl = svn.local.localclient('/tmp/test_repo')\ncontent = l.cat('test_file')\n```\n\n\n### log_default(timestamp_from_dt=none, timestamp_to_dt=none, limit=none, rel_filepath='', stop_on_copy=false, revision_from=none, revision_to=none, changelist=false)\n\nperform a log-listing that can be bounded by time or revision number and/or\ntake a maximum-count.\n\n```\nimport svn.local\n\nl = svn.local.localclient('/tmp/test_repo.co')\n\nfor e in l.log_default():\n    print(e)\n\n#logentry(date=datetime.datetime(2015, 4, 24, 3, 2, 39, 895975, tzinfo=tzutc()), msg='added second file.', revision=2, author='dustin')\n#logentry(date=datetime.datetime(2015, 4, 24, 2, 54, 2, 136170, tzinfo=tzutc()), msg='initial commit.', revision=1, author='dustin')\n```\n\n\n### export(to_path, revision=none, force=false)\n\ncheckout the tree without embedding an meta-information.\n\n```\nimport svn.remote\n\nr = svn.remote.remoteclient('file:///tmp/test_repo')\nr.export('/tmp/test_export')\n```\n\nwe can also use `force` option to force the svn export.\n\n\n### list(extended=false, rel_path=none)\n\nreturn either a flat-list of filenames or a list of objects describing even\nmore information about each.\n\n```\nimport pprint\n\nimport svn.local\n\nl = svn.local.localclient('/tmp/test_repo.co')\n\n# flat list.\n\nentries = l.list()\nfor filename in entries:\n    print(filename)\n\n#aa\n#bb\n\n# extended information.\n\nentries = l.list(extended=true)\nfor entry in entries:\n    pprint.pprint(entry)\n\n#{'author': 'dustin',\n# 'commit_revision': 1,\n# 'date': datetime.datetime(2015, 4, 24, 2, 54, 2, 136170, tzinfo=tzutc()),\n# 'is_directory': false,\n# 'kind': 'file',\n# 'name': 'aa',\n# 'size': 0,\n# 'timestamp': datetime.datetime(2015, 4, 24, 2, 54, 2, 136170, tzinfo=tzutc())}\n#{'author': 'dustin',\n# 'commit_revision': 2,\n# 'date': datetime.datetime(2015, 4, 24, 3, 2, 39, 895975, tzinfo=tzutc()),\n# 'is_directory': false,\n# 'kind': 'file',\n# 'name': 'bb',\n# 'size': 0,\n# 'timestamp': datetime.datetime(2015, 4, 24, 3, 2, 39, 895975, tzinfo=tzutc())}\n```\n\n\n### list_recursive(rel_path=none, yield_dirs=false, path_filter_cb=none)\n\nlist all entries at and beneath the root or given relative-path.\n\n```\nimport pprint\n\nimport svn.local\n\nl = svn.local.localclient('/tmp/test_repo.co')\n\nfor rel_path, e in l.list_recursive():\n    print('')\n    print('[' + rel_path + ']')\n    print('')\n\n    pprint.pprint(e)\n\n#[]\n#\n#{'author': 'dustin',\n# 'commit_revision': 1,\n# 'date': datetime.datetime(2015, 4, 24, 2, 54, 2, 136170, tzinfo=tzutc()),\n# 'is_directory': false,\n# 'kind': 'file',\n# 'name': 'aa',\n# 'size': 0,\n# 'timestamp': datetime.datetime(2015, 4, 24, 2, 54, 2, 136170, tzinfo=tzutc())}\n#\n#[]\n#\n#{'author': 'dustin',\n# 'commit_revision': 2,\n# 'date': datetime.datetime(2015, 4, 24, 3, 2, 39, 895975, tzinfo=tzutc()),\n# 'is_directory': false,\n# 'kind': 'file',\n# 'name': 'bb',\n# 'size': 0,\n# 'timestamp': datetime.datetime(2015, 4, 24, 3, 2, 39, 895975, tzinfo=tzutc())}\n#\n#[dir1]\n#\n#{'author': 'dustin',\n# 'commit_revision': 3,\n# 'date': datetime.datetime(2015, 4, 24, 3, 25, 13, 479212, tzinfo=tzutc()),\n# 'is_directory': false,\n# 'kind': 'file',\n# 'name': 'cc',\n# 'size': 0,\n# 'timestamp': datetime.datetime(2015, 4, 24, 3, 25, 13, 479212, tzinfo=tzutc())}\n```\n\n\n### diff_summary(start_revision,  end_revision)\n\na lower-level diff summary that doesn't actually provide the content\ndifferences.\n\n```\nimport svn.remote\n\nl = svn.remote.remoteclient('http://svn.apache.org/repos/asf')\nprint l.diff_summary(1760022, 1760023)\n\n# [{'item': 'modified',\n#  'kind': 'file',\n#  'path': 'http://svn.apache.org/repos/asf/sling/trunk/pom.xml'},\n# {'item': 'added',\n#  'kind': 'file',\n#  'path': 'http://svn.apache.org/repos/asf/sling/trunk/bundles/extensions/models/pom.xml'}]\n```\n\n\n### diff(start_revision,  end_revision)\n\ndiffs between start and end revisions\n\n\n# notice of diff reimplementation in 1.0.0\n\nthere was a previous contribution to the diff implementation that has been\nreported and confirmed to often throw an exception due to shoddy handling of\nthe file-paths in the output. it also made secondary shell calls and mixed both\ntext and xml output in the response. as a result of this, the decision has been\nmade to just reimplement it and reshape the output in a backwards-incompatible\nway at the same time. if you need to stick to the older implementation, tie your\ndependencies to the 0.3.46 release.",
  "docs_url": null,
  "keywords": "svn subversion",
  "license": "gpl 2",
  "name": "svn",
  "package_url": "https://pypi.org/project/svn/",
  "project_url": "https://pypi.org/project/svn/",
  "project_urls": {
    "Homepage": "https://github.com/dsoprea/PySvn"
  },
  "release_url": "https://pypi.org/project/svn/1.0.1/",
  "requires_dist": [],
  "requires_python": "",
  "summary": "intuitive subversion wrapper.",
  "version": "1.0.1",
  "releases": [],
  "developers": [
    "dustin_oprea",
    "myselfasunder@gmail.com"
  ],
  "kwds": "pysvn subversion svn build_status svg",
  "license_kwds": "gpl 2",
  "libtype": "pypi",
  "id": "pypi_svn",
  "homepage": "https://github.com/dsoprea/pysvn",
  "release_count": 46,
  "dependency_ids": []
}
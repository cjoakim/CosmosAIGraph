{
  "classifiers": [
    "development status :: 4 - beta",
    "license :: osi approved :: bsd license",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.6",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9"
  ],
  "description": "# requests-credssp\n\n[![test workflow](https://github.com/jborean93/requests-credssp/actions/workflows/ci.yml/badge.svg)](https://github.com/jborean93/requests-credssp/actions/workflows/ci.yml)\n[![codecov](https://codecov.io/gh/jborean93/requests-credssp/branch/master/graph/badge.svg)](https://codecov.io/gh/jborean93/requests-credssp)\n[![pypi version](https://badge.fury.io/py/requests-credssp.svg)](https://badge.fury.io/py/requests-credssp)\n[![license](https://img.shields.io/badge/license-mit-blue.svg)](https://github.com/jborean93/request-credssp/blob/master/license)\n\n\n## about this library\n\nthis package allows for https credssp authentication using the requests\nlibrary. credssp is a microsoft authentication that allows your credentials to\nbe delegated to a server giving you double hop authentication.\n\n\n## features\n\nthis library supports the following credssp features\n\n* protocol version 2 to 6\n* initial authentication with ntlm or kerberos\n* message encryption support using the `wrap` and `unwrap` functions\n\n\n## requirements\n\nthe following python libraries are required;\n\n* python 3.6+\n* [cryptography](https://github.com/pyca/cryptography)\n* [pyspnego](https://github.com/jborean93/pyspnego)\n* [requests>=2.0.0](https://pypi.python.org/pypi/requests)\n* for kerberos authentication on unix [python-gssapi](https://github.com/pythongssapi/python-gssapi) and [pykrb5](https://github.com/jborean93/pykrb5) installed with `requests-credssp[kerberos]`\n\nby default, this library can authenticate with a windows host using ntlm\nmessages, if kerberos authentication is desired, please read the below.\n\n\n## installation\n\nto install requests-credssp, simply run\n\n```\npip install requests-credssp\n\n# to install the optional kerberos functionality, run (see below)\npip install requests-credssp[kerberos]\n```\n\n\n### kerberos on linux\n\nto add support for kerberos authentication on a non-windows host, the kerberos\nsystem headers must be installed and the `python-gssapi` library installed. to\ninstall the kerberos system headers you can install the following packages;\n\n```\n# via yum (centos rhel)\nyum -y install python-devel krb5-devel krb5-libs krb5-workstation\n\n# via dnf (fedora)\ndnf -y install python-devel krb5-devel krb5-libs krb5-workstation\n\n# via apt (ubuntu)\napt-get -y install python-dev libkrb5-dev krb5-user\n\n# via portage (gentoo)\nemerge -av app-crypt/mit-krb5\nemerge -av dev-python/setuptools\n\n# via pkg (freebsd)\nsudo pkg install security/krb5\n\n# via opencsw (solaris)\npkgadd -d http://get.opencsw.org/now\n/opt/csw/bin/pkgutil -u\n/opt/csw/bin/pkgutil -y -i libkrb5_3\n\n# via pacman (arch linux)\npacman -s krb5\n```\n\nonce installed, the python kerberos libraries can be installed with\n\n```\npip install requests-credssp[kerberos]\n```\n\nonce installed, the file `/etc/krb5.conf` should be configured so it can talk\nwith the kerberos kdc.\n\nto add proper spnego support with `python-gssapi`, the\n[gss-ntlmssp](https://github.com/simo5/gss-ntlmssp) should also be installed\nwhich adds ntlm as a supported gssapi mechanism required for proper spnego\ninteroperability with windows. this package can be installed with;\n\n```\n# via yum (centos rhel) - requires epel-release\nyum -y install epel-release\nyum -y install gssntlmssp\n\n# via dnf (fedora)\ndnf -y install gssntlmssp\n\n# via apt (ubuntu)\napt-get -y install gss-ntlmssp\n\n# via pacman (arch linux)\npacman -s gss-ntlmssp\n```\n\n## additional info\n\nthe credssp protocol is quite complex and uses a lot of other protocols or\nstandards to work properly. this unfortunately means some older hosts or\nsettings are incompatible or require some workarounds to get working. currently\nyou can configure the following settings when initialising the credssp class;\n\n* `auth_mechanism`: the authentication mechanism to use initially, default is `auto`\n* `disable_tlsv1_2`: whether to disable `tlsv1.2` support and work with older protocols like `tlsv1.0`, default is `false`\n* `minimum_version`: the minimum credssp server version that is required by the client, default is `2`\n\n### authentication mechanisms\n\npart of the credssp protocol is to authenticate the user's credentials using\nthe spnego protocol. the spnego protocol is also called `negotiate` and is\nable to negotiate a common protocol between the client and the server which\ncan currently be either `ntlm` or `kerberos`. kerberos is a tricky protocol\nto have set up but should be used wherever it is possible as ntlm uses older\nstandards that are considered broken from a security perspective.\n\ndue to historical decisions and that kerberos is not always available by\ndefault, the base install of `requests-credssp` will only work with `ntlm`.\nwhen the kerberos packages are installed and configured, `requests-credssp`\nwill automatically attempt to use `kerberos` if possible but fall back to\n`ntlm` if it fails like it would with `spnego`. if you wish to force either\n`kerberos` or `ntlm` instead of relying on the `spnego` mechanism, you can set\n`auth_mechanism=<auth_mech>` when creating `httpcredsspauth` like so;\n\n```\nimport requests\nfrom requests_credssp import httpcredsspauth\n\n# use spnego (default if omitted)\ncredssp_auth = httpcredsspauth('domain\\\\user', 'password',\n                               auth_mechanism='auto')\n\n# only allow kerberos\ncredssp_auth = httpcredsspauth('user@realm.com', 'password',\n                               auth_mechanism='kerberos')\n\n\n# only allow ntlm\ncredssp_auth = httpcredsspauth('domain\\\\user', 'password',\n                               auth_mechanism='ntlm')\n\n\nr = requests.get(\"https://server:5986/wsman\", auth=credssp_auth)\n```\n\n### tls protocol versions\n\nas credssp uses tls to encrypt the tokens that are transferred between the\nclient and the server, it is succeptible to differing implementations of ssl.\nby default, `requests-credssp` will work with server's that offer tlsv1.2\nbut older windows hosts that do not support this newer protocol version will\n\ntlsv1.2 was added in windows server 2012 and windows 8 where older hosts need\nan optional update to be installed for it to work. if this update cannot be\ninstalled or you are willing to accept the risks of using the older tls\nprotocols, `requests-credssp` can be set to disable tlsv1.2 and work with\nolder protocols like so;\n\n\n```python\nimport requests\nfrom requests_credssp import httpcredsspauth\n\ncredssp_auth = httpcredsspauth('domain\\\\user', 'password', disable_tlsv1_2=true)\nr = requests.get(\"https://server:5986/wsman\", auth=credssp_auth)\n```\n\n### credssp protocol versions\n\nrecently microsoft has released a security update to credssp to mitigate\n[cve 2018-0886](https://support.microsoft.com/en-us/help/4093492/credssp-updates-for-cve-2018-0886-march-13-2018).\nthe update added 2 new credssp protocol versions, `5` and `6` which changes\nthe way the client and server authenticate each other. while these changes are\ntransparent to someone who uses this library, it may be prudent to set the\nminimum version that this client would authenticate with. this means that any\nolder server's who have not been patched for this vulnerability will be\nrejected.\n\nto set a minimum protocol version that will only allow servers that have been\npatched for `cve 2018-0886`, set `minimum_version=5` when creating\n`httpcredsspauth` like so;\n\n```\nimport requests\nfrom requests_credssp import httpcredsspauth\n\ncredssp_auth = httpcredsspauth('domain\\\\user', 'password', minimum_version=5)\nr = requests.get(\"https://server:5986/wsman\", auth=credssp_auth)\n```\n\n### message encryption\n\nyou can use this library to encrypt and decrypt messages sent to and from the\nserver. message encryption is done over the tls channel that was negotiated in\nthe authentication stage. the below is an example of encrypting and decrypting\nmessages, note this is only a basic example and not a working script and the\nactual implementation depends on the protocol that is reading the messages.\n\n```python\nimport requests\nfrom requests_credssp import httpcredsspauth\n\n# build the auth request and sent an empty message to authenticate\nhostname = \"server\"\nsession = requests.session()\nsession.auth = httpcredsspauth('domain\\\\user', 'password')\n\nrequest = requests.request('post', \"https://%s:5986/wsman\" % server, data=none)\nprepared_request = self.session.prepare_request(request)\nresponse = session.send(prepared_request)\n\ncontext = session.auth.contexts[hostname]\n# encrypt the message using the wrap command\nmessage = b'hi server'\nencrypted_message = context.wrap(message)\n\n# send the encrypted message and get the encrypted response\nrequest = requests.request('post', 'https://server:5986/wsman', data=encrypted_message)\nprepared_request = self.session.prepare_request(request)\nresponse = session.send(prepared_request)\n\n# decrypt the encrypted response from the server\nencrypted_response = response.content\ndecrypted_response = context.unwrap(encrypted_response)\n```\n\n\n## logging\n\nthis library uses the standard python logging facilities. log messages are\nlogged to the `requests_credssp` and `requests_credssp.credssp` named loggers.\n\nif you are receiving any errors or wish to debug the credssp process you should\nenable debug level logs. these logs show fine grain information such as the\nprotocol and cipher negotiated and each credssp token used in the\nauthentication process.\n\n\n## backlog\n\n* add support for different credential types like smart card and redirected credentials\n\n\n",
  "docs_url": null,
  "keywords": "authentication auth microsoft credssp winrm",
  "license": "mit",
  "name": "requests-credssp",
  "package_url": "https://pypi.org/project/requests-credssp/",
  "project_url": "https://pypi.org/project/requests-credssp/",
  "project_urls": {
    "Homepage": "https://github.com/jborean93/requests-credssp"
  },
  "release_url": "https://pypi.org/project/requests-credssp/2.0.0/",
  "requires_dist": [
    "cryptography",
    "pyspnego (>=0.5.0)",
    "requests (>=2.0.0)",
    "pyspnego[kerberos] ; (sys_platform!=\"win32\") and extra == 'kerberos'"
  ],
  "requires_python": ">=3.6",
  "summary": "https credssp authentication with the requests library.",
  "version": "2.0.0",
  "releases": [],
  "developers": [
    "jborean93@gmail.com",
    "jordan_borean"
  ],
  "kwds": "credssp_auth requests_credssp auth badge credential",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_requests_credssp",
  "homepage": "https://github.com/jborean93/requests-credssp",
  "release_count": 13,
  "dependency_ids": [
    "pypi_cryptography",
    "pypi_pyspnego",
    "pypi_requests"
  ]
}
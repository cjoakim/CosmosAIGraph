{
  "classifiers": [
    "development status :: 4 - beta",
    "framework :: setuptools plugin",
    "intended audience :: developers",
    "intended audience :: information technology",
    "license :: osi approved :: mit license",
    "operating system :: os independent",
    "programming language :: python :: 3",
    "programming language :: python :: 3 :: only",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: software development :: libraries",
    "topic :: software development :: libraries :: python modules",
    "topic :: software development :: version control :: git",
    "topic :: utilities"
  ],
  "description": "releasecmd\n============================================\n.. image:: https://badge.fury.io/py/releasecmd.svg\n    :target: https://badge.fury.io/py/releasecmd\n    :alt: pypi package version\n\n.. image:: https://img.shields.io/pypi/pyversions/releasecmd.svg\n    :target: https://pypi.org/project/releasecmd\n    :alt: supported python versions\n\n.. image:: https://github.com/thombashi/releasecmd/actions/workflows/ci.yml/badge.svg\n    :target: https://github.com/thombashi/releasecmd/actions/workflows/ci.yml\n    :alt: lint result\n\nsummary\n---------\n``releasecmd`` is a ``release`` subcommand for ``setup.py`` (``setuptools.setup``).\nthe subcommand creates a git tag and pushes and uploads packages to ``pypi``.\n\nthe subcommand class (``releasecmd.releasecommand``) is implemented as a subclass of ``setuptools.command`` class.\nthe ``release`` subcommand will do the followings:\n\n1. find a file that defined the package version (``__version__`` variable)\n2. create a git tag from the package version information\n    - gpg signing to the git tag if ``--sign`` option is specified\n3. push git tags\n4. upload package files to pypi by using ``twine``\n \ninstallation\n============================================\n::\n\n    pip install releasecmd\n\n\nusage\n============================================\n\n:setup.py:\n    .. code-block:: python\n\n        import setuptools\n\n        from releasecmd import releasecommand\n\n        setuptools.setup(\n            ...\n            cmdclass={\"release\": releasecommand},\n        )\n\n\nexample\n============================================\n.. code-block::\n\n    $ python3 setup.py release\n    running release\n    [get the version from ./releasecmd/__version__.py]\n    [pull git tags]\n    already up to date.\n    [check existing git tags]\n    [create a git tag: v0.0.15]\n    [push git tags]\n    [upload the package to pypi]\n    ...\n\nprerequisite: package binaries must be in the ``dist/`` directory.\n\n\nspecify version manually\n------------------------------------------------------\nyou can specify a version manually by ``--version`` option:\n\n.. code-block::\n\n    $ python3 setup.py release --version 0.1.0\n    [create a git tag: v0.1.0]\n    [pull git tags]\n    already up to date.\n    [check existing git tags]\n    [push git tags]\n    [upload packages to pypi]\n\n\ncreate a gpg signed tag and upload packages\n------------------------------------------------------\n.. code-block::\n\n    $ python3 setup.py release --sign\n    running release\n    [get the version from ./releasecmd/__version__.py]\n    [pull git tags]\n    already up to date.\n    [check existing git tags]\n    [create a git tag with gpg signing: v0.1.0]\n    [push git tags]\n    [upload packages to pypi]\n    ...\n\nskip create a git tag and upload packages\n------------------------------------------------------\n.. code-block::\n\n    $ python3 setup.py release --skip-tagging\n    running release\n    [get the version from ./releasecmd/__version__.py]\n    skip git tagging\n    [upload packages to pypi]\n    ...\n\n\nrelease command options\n============================================\n::\n\n    options for 'releasecommand' command:\n      --skip-tagging    skip a git tag creation\n      --skip-uploading  skip uploading packages to pypi\n      --dry-run         do no harm\n      --sign            make a gpg-signed git tag\n      --verbose         show verbose output\n      --search-dir      specify a root directory path to search a version file.\n                        defaults to the current directory.\n      --tag-template    specify git tag format. defaults to 'v{version}'.\n      --version         specify version manually\n\n\ndependencies\n============================================\n- python 3.8+\n- `git <https://git-scm.com/>`__\n",
  "docs_url": null,
  "keywords": "release,setuptools",
  "license": "mit license",
  "name": "releasecmd",
  "package_url": "https://pypi.org/project/releasecmd/",
  "project_url": "https://pypi.org/project/releasecmd/",
  "project_urls": {
    "Changlog": "https://github.com/thombashi/releasecmd/releases",
    "Homepage": "https://github.com/thombashi/releasecmd",
    "Source": "https://github.com/thombashi/releasecmd",
    "Tracker": "https://github.com/thombashi/releasecmd/issues"
  },
  "release_url": "https://pypi.org/project/releasecmd/0.10.0/",
  "requires_dist": [
    "twine"
  ],
  "requires_python": ">=3.8",
  "summary": "releasecmd is a release subcommand for setup.py (setuptools.setup). the subcommand create a git tag and push, and upload packages to pypi.",
  "version": "0.10.0",
  "releases": [],
  "developers": [
    "tsuyoshi.hombashi@gmail.com",
    "tsuyoshi_hombashi"
  ],
  "kwds": "pyversions releasecmd releasecommand python3 badge",
  "license_kwds": "mit license",
  "libtype": "pypi",
  "id": "pypi_releasecmd",
  "homepage": "https://github.com/thombashi/releasecmd",
  "release_count": 35,
  "dependency_ids": [
    "pypi_twine"
  ]
}
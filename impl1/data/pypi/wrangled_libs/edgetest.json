{
  "classifiers": [
    "intended audience :: developers",
    "natural language :: english",
    "operating system :: os independent",
    "programming language :: python",
    "programming language :: python :: 3",
    "programming language :: python :: 3 :: only",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9"
  ],
  "description": "# bleeding edge dependency testing\n\n![pypi - python version](https://img.shields.io/pypi/pyversions/edgetest)\n[![code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/ambv/black)\n[![pypi version](https://badge.fury.io/py/edgetest.svg)](https://badge.fury.io/py/edgetest)\n[![anaconda-server badge](https://anaconda.org/conda-forge/edgetest/badges/version.svg)](https://anaconda.org/conda-forge/edgetest)\n![pypi - downloads](https://img.shields.io/pypi/dm/edgetest)\n\n[full documentation](https://capitalone.github.io/edgetest/)\n\n`edgetest` is a `tox`-inspired python library that will loop through your project's dependencies, and check if your\nproject is compatible with the latest version of each dependency. it does this by:\n\n* creating a virtual environment,\n* installing your local package into the environment,\n* upgrading specified dependency package(s), and\n* running your test command.\n\nfor example, if you depend on ``pandas>=0.25.1,<=1.0.0``, ``edgetest`` will test your project against the most current\npandas version (say ``1.3.4``), so you know if you can safely update your dependency to ``pandas>=0.25.1,<=1.3.4`` or not.\n\n\n`edgetest` works with the following types of projects:\n\n- `pyproject.toml`\n- `setup.cfg`\n- and `requirements.txt`\n\n\ntable of contents\n-----------------\n\n- [install](#install)\n- [getting started](#getting-started)\n- [options](#options)\n- [plugins](#plugins)\n- [contributing](#contributing)\n- [license](#license)\n- [roadmap](#roadmap)\n\ninstall\n-------\n\ncreate a ``conda`` environment with python 3.8+ and install from pypi:\n\n```console\n$ python -m pip install edgetest\n```\n\nor conda-forge:\n\n```console\n$ conda install -c conda-forge edgetest\n```\n\ngetting started\n---------------\n\n``edgetest`` allows multi-package, bleeding edge dependency testing. suppose you have a package, ``mypackage``, with\nthe following ``requirements.txt``:\n\n```\npandas>=0.25.1,<=1.0.0\n...\n```\n\n``edgetest`` allows you to test your package against the latest version of ``pandas``. if you run\n\n```console\n$ edgetest\n```\n\nthe package will\n\n1. create a virtual environment in the ``.edgetest`` folder,\n2. install the local ``mypackage``: ``.edgetest/pandas/bin/python -m pip install .``,\n3. upgrade ``pandas``: ``.edgetest/pandas/bin/python -m pip install pandas --upgrade``,\n4. run ``.edgetest/pandas/bin/python -m pytest``, and\n5. repeat steps 1-4 for all packages in ``requirements.txt``.\n\nafter you run the command, you should get console output similar to the following:\n\n```\n============= =============== =================== =================\n environment   passing tests   upgraded packages   package version\n------------- --------------- ------------------- -----------------\n pandas        true            pandas              1.3.4\n============= =============== =================== =================\n```\n\noptions\n-------\n\nsee the [advanced usage](https://capitalone.github.io/edgetest/usage.html) page.\n\n\nplugins\n-------\n\ncurrent plugins include:\n\n| plugin                 | description                                                                  |\n|------------------------|------------------------------------------------------------------------------|\n| [edgetest-conda](https://github.com/capitalone/edgetest-conda)     | uses conda or mamba for environment creation instead of venv.                |\n| [edgetest-hub](https://github.com/capitalone/edgetest-hub)       | creates a pull request in your github repository with the dependency updates.|\n| [edgetest-pip-tools](https://github.com/capitalone/edgetest-pip-tools) | refreshes a locked requirements file based on the updated dependency pins.   |\n\n\ncontributing\n------------\n\nsee our [developer documentation](https://capitalone.github.io/edgetest/developer.html).\n\nwe welcome and appreciate your contributions! before we can accept any contributions, we ask that you please be sure to\nsign the [contributor license agreement (cla)](https://cla-assistant.io/capitalone/edgetest)\n\nthis project adheres to the [open source code of conduct](https://developer.capitalone.com/resources/code-of-conduct/).\nby participating, you are expected to honor this code.\n\n\nlicense\n-------\n\napache-2.0\n\n\nroadmap\n-------\n\nroadmap details can be found [here](https://capitalone.github.io/edgetest/roadmap.html).\n",
  "docs_url": null,
  "keywords": "",
  "license": "apache software license",
  "name": "edgetest",
  "package_url": "https://pypi.org/project/edgetest/",
  "project_url": "https://pypi.org/project/edgetest/",
  "project_urls": {
    "Bug Tracker": "https://github.com/capitalone/edgetest/issues",
    "Documentation": "https://capitalone.github.io/edgetest/",
    "Homepage": "https://github.com/capitalone/edgetest",
    "Source Code": "https://github.com/capitalone/edgetest"
  },
  "release_url": "https://pypi.org/project/edgetest/2023.6.1/",
  "requires_dist": [
    "Cerberus (<=1.3.4,>=1.3.0)",
    "click (<=8.1.3,>=7.0)",
    "pluggy (<=1.0.0,>=1.0.0)",
    "tabulate (<=0.9.0,>=0.8.9)",
    "packaging (<=23.0,>20.6)",
    "tomlkit (<=0.11.4,>=0.11.4)",
    "build ; extra == 'build'",
    "twine ; extra == 'build'",
    "wheel ; extra == 'build'",
    "bumpver ; extra == 'build'",
    "coverage ; extra == 'dev'",
    "flake8 ; extra == 'dev'",
    "mypy ; extra == 'dev'",
    "pydocstyle ; extra == 'dev'",
    "pytest ; extra == 'dev'",
    "pytest-cov ; extra == 'dev'",
    "furo ; extra == 'dev'",
    "sphinx ; extra == 'dev'",
    "sphinx-copybutton ; extra == 'dev'",
    "sphinx-tabs ; extra == 'dev'",
    "pillow ; extra == 'dev'",
    "recommonmark ; extra == 'dev'",
    "pylint ; extra == 'dev'",
    "pip-tools ; extra == 'dev'",
    "pre-commit ; extra == 'dev'",
    "black ; extra == 'dev'",
    "isort ; extra == 'dev'",
    "types-click ; extra == 'dev'",
    "types-pkg-resources ; extra == 'dev'",
    "types-tabulate ; extra == 'dev'",
    "build ; extra == 'dev'",
    "twine ; extra == 'dev'",
    "wheel ; extra == 'dev'",
    "bumpver ; extra == 'dev'",
    "furo ; extra == 'docs'",
    "sphinx ; extra == 'docs'",
    "sphinx-copybutton ; extra == 'docs'",
    "sphinx-tabs ; extra == 'docs'",
    "pillow ; extra == 'docs'",
    "recommonmark ; extra == 'docs'",
    "pylint ; extra == 'qa'",
    "pip-tools ; extra == 'qa'",
    "pre-commit ; extra == 'qa'",
    "black ; extra == 'qa'",
    "isort ; extra == 'qa'",
    "types-click ; extra == 'qa'",
    "types-pkg-resources ; extra == 'qa'",
    "types-tabulate ; extra == 'qa'",
    "coverage ; extra == 'tests'",
    "flake8 ; extra == 'tests'",
    "mypy ; extra == 'tests'",
    "pydocstyle ; extra == 'tests'",
    "pytest ; extra == 'tests'",
    "pytest-cov ; extra == 'tests'"
  ],
  "requires_python": "",
  "summary": "bleeding edge dependency testing",
  "version": "2023.6.1",
  "releases": [],
  "developers": [
    "akshay.gupta2@capitalone.com",
    "akshay_gupta"
  ],
  "kwds": "edgetest pytest pyversions edge pypi",
  "license_kwds": "apache software license",
  "libtype": "pypi",
  "id": "pypi_edgetest",
  "homepage": "https://github.com/capitalone/edgetest",
  "release_count": 16,
  "dependency_ids": [
    "pypi_black",
    "pypi_build",
    "pypi_bumpver",
    "pypi_cerberus",
    "pypi_click",
    "pypi_coverage",
    "pypi_flake8",
    "pypi_furo",
    "pypi_isort",
    "pypi_mypy",
    "pypi_packaging",
    "pypi_pillow",
    "pypi_pip_tools",
    "pypi_pluggy",
    "pypi_pre_commit",
    "pypi_pydocstyle",
    "pypi_pylint",
    "pypi_pytest",
    "pypi_pytest_cov",
    "pypi_recommonmark",
    "pypi_sphinx",
    "pypi_sphinx_copybutton",
    "pypi_sphinx_tabs",
    "pypi_tabulate",
    "pypi_tomlkit",
    "pypi_twine",
    "pypi_types_click",
    "pypi_types_pkg_resources",
    "pypi_types_tabulate",
    "pypi_wheel"
  ]
}
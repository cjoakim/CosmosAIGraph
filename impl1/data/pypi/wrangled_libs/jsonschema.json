{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "operating system :: os independent",
    "programming language :: python",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.12",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "programming language :: python :: implementation :: cpython",
    "programming language :: python :: implementation :: pypy",
    "topic :: file formats :: json",
    "topic :: file formats :: json :: json schema"
  ],
  "description": "==========\njsonschema\n==========\n\n|pypi| |pythons| |ci| |readthedocs| |precommit| |zenodo|\n\n.. |pypi| image:: https://img.shields.io/pypi/v/jsonschema.svg\n   :alt: pypi version\n   :target: https://pypi.org/project/jsonschema/\n\n.. |pythons| image:: https://img.shields.io/pypi/pyversions/jsonschema.svg\n   :alt: supported python versions\n   :target: https://pypi.org/project/jsonschema/\n\n.. |ci| image:: https://github.com/python-jsonschema/jsonschema/workflows/ci/badge.svg\n  :alt: build status\n  :target: https://github.com/python-jsonschema/jsonschema/actions?query=workflow%3aci\n\n.. |readthedocs| image:: https://readthedocs.org/projects/python-jsonschema/badge/?version=stable&style=flat\n   :alt: readthedocs status\n   :target: https://python-jsonschema.readthedocs.io/en/stable/\n\n.. |precommit| image:: https://results.pre-commit.ci/badge/github/python-jsonschema/jsonschema/main.svg\n   :alt: pre-commit.ci status\n   :target: https://results.pre-commit.ci/latest/github/python-jsonschema/jsonschema/main\n\n.. |zenodo| image:: https://zenodo.org/badge/3072629.svg\n   :alt: zenodo doi\n   :target: https://zenodo.org/badge/latestdoi/3072629\n\n\n``jsonschema`` is an implementation of the `json schema <https://json-schema.org>`_ specification for python.\n\n.. code:: python\n\n    >>> from jsonschema import validate\n\n    >>> # a sample schema, like what we'd get from json.load()\n    >>> schema = {\n    ...     \"type\" : \"object\",\n    ...     \"properties\" : {\n    ...         \"price\" : {\"type\" : \"number\"},\n    ...         \"name\" : {\"type\" : \"string\"},\n    ...     },\n    ... }\n\n    >>> # if no exception is raised by validate(), the instance is valid.\n    >>> validate(instance={\"name\" : \"eggs\", \"price\" : 34.99}, schema=schema)\n\n    >>> validate(\n    ...     instance={\"name\" : \"eggs\", \"price\" : \"invalid\"}, schema=schema,\n    ... )                                   # doctest: +ignore_exception_detail\n    traceback (most recent call last):\n        ...\n    validationerror: 'invalid' is not of type 'number'\n\nit can also be used from the command line by installing `check-jsonschema <https://github.com/python-jsonschema/check-jsonschema>`_.\n\nfeatures\n--------\n\n* full support for `draft 2020-12 <https://python-jsonschema.readthedocs.io/en/latest/api/jsonschema/validators/#jsonschema.validators.draft202012validator>`_, `draft 2019-09 <https://python-jsonschema.readthedocs.io/en/latest/api/jsonschema/validators/#jsonschema.validators.draft201909validator>`_, `draft 7 <https://python-jsonschema.readthedocs.io/en/latest/api/jsonschema/validators/#jsonschema.validators.draft7validator>`_, `draft 6 <https://python-jsonschema.readthedocs.io/en/latest/api/jsonschema/validators/#jsonschema.validators.draft6validator>`_, `draft 4 <https://python-jsonschema.readthedocs.io/en/latest/api/jsonschema/validators/#jsonschema.validators.draft4validator>`_ and `draft 3 <https://python-jsonschema.readthedocs.io/en/latest/api/jsonschema/validators/#jsonschema.validators.draft3validator>`_\n\n* `lazy validation <https://python-jsonschema.readthedocs.io/en/latest/api/jsonschema/protocols/#jsonschema.protocols.validator.iter_errors>`_ that can iteratively report *all* validation errors.\n\n* `programmatic querying <https://python-jsonschema.readthedocs.io/en/latest/errors/>`_ of which properties or items failed validation.\n\n\ninstallation\n------------\n\n``jsonschema`` is available on `pypi <https://pypi.org/project/jsonschema/>`_. you can install using `pip <https://pip.pypa.io/en/stable/>`_:\n\n.. code:: bash\n\n    $ pip install jsonschema\n\n\nextras\n======\n\ntwo extras are available when installing the package, both currently related to ``format`` validation:\n\n    * ``format``\n    * ``format-nongpl``\n\nthey can be used when installing in order to include additional dependencies, e.g.:\n\n.. code:: bash\n\n    $ pip install jsonschema'[format]'\n\nbe aware that the mere presence of these dependencies \u2013 or even the specification of ``format`` checks in a schema \u2013 do *not* activate format checks (as per the specification).\nplease read the `format validation documentation <https://python-jsonschema.readthedocs.io/en/latest/validate/#validating-formats>`_ for further details.\n\nabout\n-----\n\ni'm julian berman.\n\n``jsonschema`` is on `github <https://github.com/python-jsonschema/jsonschema>`_.\n\nget in touch, via github or otherwise, if you've got something to contribute, it'd be most welcome!\n\nyou can also generally find me on libera (nick: ``julian``) in various channels, including ``#python``.\n\nif you feel overwhelmingly grateful, you can also `sponsor me <https://github.com/sponsors/julian/>`_.\n\nand for companies who appreciate ``jsonschema`` and its continued support and growth, ``jsonschema`` is also now supportable via `tidelift <https://tidelift.com/subscription/pkg/pypi-jsonschema?utm_source=pypi-jsonschema&utm_medium=referral&utm_campaign=readme>`_.\n\n\nrelease information\n-------------------\n\nv4.20.0\n=======\n\n* properly consider items (and properties) to be evaluated by ``unevaluateditems`` (resp. ``unevaluatedproperties``) when behind a ``$dynamicref`` as specified by the 2020 and 2019 specifications.\n* ``jsonschema.exceptions.errortree.__setitem__`` is now deprecated.\n  more broadly, in general users of ``jsonschema`` should never be mutating objects owned by the library.\n",
  "docs_url": null,
  "keywords": "data validation,json,jsonschema,validation",
  "license": "mit",
  "name": "jsonschema",
  "package_url": "https://pypi.org/project/jsonschema/",
  "project_url": "https://pypi.org/project/jsonschema/",
  "project_urls": {
    "Changelog": "https://github.com/python-jsonschema/jsonschema/blob/main/CHANGELOG.rst",
    "Documentation": "https://python-jsonschema.readthedocs.io/",
    "Funding": "https://github.com/sponsors/Julian",
    "Homepage": "https://github.com/python-jsonschema/jsonschema",
    "Issues": "https://github.com/python-jsonschema/jsonschema/issues/",
    "Source": "https://github.com/python-jsonschema/jsonschema",
    "Tidelift": "https://tidelift.com/subscription/pkg/pypi-jsonschema?utm_source=pypi-jsonschema&utm_medium=referral&utm_campaign=pypi-link"
  },
  "release_url": "https://pypi.org/project/jsonschema/4.20.0/",
  "requires_dist": [
    "attrs>=22.2.0",
    "importlib-resources>=1.4.0; python_version < '3.9'",
    "jsonschema-specifications>=2023.03.6",
    "pkgutil-resolve-name>=1.3.10; python_version < '3.9'",
    "referencing>=0.28.4",
    "rpds-py>=0.7.1",
    "fqdn; extra == 'format'",
    "idna; extra == 'format'",
    "isoduration; extra == 'format'",
    "jsonpointer>1.13; extra == 'format'",
    "rfc3339-validator; extra == 'format'",
    "rfc3987; extra == 'format'",
    "uri-template; extra == 'format'",
    "webcolors>=1.11; extra == 'format'",
    "fqdn; extra == 'format-nongpl'",
    "idna; extra == 'format-nongpl'",
    "isoduration; extra == 'format-nongpl'",
    "jsonpointer>1.13; extra == 'format-nongpl'",
    "rfc3339-validator; extra == 'format-nongpl'",
    "rfc3986-validator>0.1.0; extra == 'format-nongpl'",
    "uri-template; extra == 'format-nongpl'",
    "webcolors>=1.11; extra == 'format-nongpl'"
  ],
  "requires_python": ">=3.8",
  "summary": "an implementation of json schema validation for python",
  "version": "4.20.0",
  "releases": [],
  "developers": [
    "julian+jsonschema@grayvines.com",
    "julian_berman"
  ],
  "kwds": "pyversions pypi jsonschema json draft3validator",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_jsonschema",
  "homepage": "",
  "release_count": 100,
  "dependency_ids": [
    "pypi_attrs",
    "pypi_fqdn",
    "pypi_idna",
    "pypi_importlib_resources",
    "pypi_isoduration",
    "pypi_jsonpointer",
    "pypi_jsonschema_specifications",
    "pypi_pkgutil_resolve_name",
    "pypi_referencing",
    "pypi_rfc3339_validator",
    "pypi_rfc3986_validator",
    "pypi_rfc3987",
    "pypi_rpds_py",
    "pypi_uri_template",
    "pypi_webcolors"
  ]
}
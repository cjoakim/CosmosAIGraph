{
  "classifiers": [
    "development status :: 5 - production/stable",
    "environment :: console",
    "environment :: macos x",
    "environment :: no input/output (daemon)",
    "environment :: plugins",
    "environment :: web environment",
    "environment :: win32 (ms windows)",
    "framework :: robot framework",
    "framework :: robot framework :: library",
    "intended audience :: developers",
    "intended audience :: education",
    "intended audience :: end users/desktop",
    "intended audience :: science/research",
    "intended audience :: system administrators",
    "license :: osi approved :: bsd license",
    "natural language :: english",
    "operating system :: android",
    "operating system :: macos",
    "operating system :: macos :: macos 9",
    "operating system :: macos :: macos x",
    "operating system :: microsoft",
    "operating system :: microsoft :: windows",
    "operating system :: microsoft :: windows :: windows 10",
    "operating system :: os independent",
    "operating system :: posix",
    "operating system :: posix :: linux",
    "operating system :: unix",
    "programming language :: python :: 3",
    "programming language :: python :: 3 :: only",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.6",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "programming language :: python :: implementation",
    "topic :: internet",
    "topic :: internet :: proxy servers",
    "topic :: internet :: www/http",
    "topic :: internet :: www/http :: browsers",
    "topic :: internet :: www/http :: dynamic content",
    "topic :: internet :: www/http :: dynamic content :: cgi tools/libraries",
    "topic :: internet :: www/http :: http servers",
    "topic :: scientific/engineering :: information analysis",
    "topic :: software development :: debuggers",
    "topic :: software development :: libraries :: python modules",
    "topic :: system :: monitoring",
    "topic :: system :: networking",
    "topic :: system :: networking :: firewalls",
    "topic :: system :: networking :: monitoring",
    "topic :: utilities",
    "typing :: typed"
  ],
  "description": "[![proxy.py](https://raw.githubusercontent.com/abhinavsingh/proxy.py/develop/proxypy.png)](https://github.com/abhinavsingh/proxy.py)\n\n[//]: # (do-not-remove-docs-badges-start)\n\n[![pypi monthly](https://img.shields.io/pypi/dm/proxy.py?style=for-the-badge&color=darkgreen)](https://pypi.org/project/proxy.py/)\n[![docker pulls](https://img.shields.io/docker/pulls/abhinavsingh/proxy.py?style=for-the-badge&color=darkgreen)](https://hub.docker.com/r/abhinavsingh/proxy.py)\n[![no dependencies](https://img.shields.io/static/v1?label=dependencies&message=0&style=for-the-badge&color=darkgreen)](https://github.com/abhinavsingh/proxy.py)\n[![gitter](https://img.shields.io/gitter/room/abhinavsingh/proxy.py?style=for-the-badge&color=darkgreen)](https://gitter.im/proxy-py/community)\n[![license](https://img.shields.io/github/license/abhinavsingh/proxy.py?style=for-the-badge&color=darkgreen)](https://github.com/abhinavsingh/proxy.py/blob/develop/license)\n\n[![tested with macos, ubuntu, windows, android, android emulator, ios, ios simulator](https://img.shields.io/static/v1?label=tested%20with&message=mac%20os%20%f0%9f%92%bb%20%7c%20ubuntu%20%f0%9f%96%a5%20%7c%20windows%20%f0%9f%92%bb&color=darkgreen&style=for-the-badge)](https://abhinavsingh.com/proxy-py-a-lightweight-single-file-http-proxy-server-in-python/)\n[![android, android emulator](https://img.shields.io/static/v1?label=tested%20with&message=android%20%f0%9f%93%b1%20%7c%20android%20emulator%20%f0%9f%93%b1&color=darkgreen&style=for-the-badge)](https://abhinavsingh.com/proxy-py-a-lightweight-single-file-http-proxy-server-in-python/)\n[![ios, ios simulator](https://img.shields.io/static/v1?label=tested%20with&message=ios%20%f0%9f%93%b1%20%7c%20ios%20simulator%20%f0%9f%93%b1&color=darkgreen&style=for-the-badge)](https://abhinavsingh.com/proxy-py-a-lightweight-single-file-http-proxy-server-in-python/)\n\n[![pypi version](https://img.shields.io/pypi/v/proxy.py?style=flat-square)](https://pypi.org/project/proxy.py/)\n[![python 3.x](https://img.shields.io/static/v1?label=python&message=3.6%20%7c%203.7%20%7c%203.8%20%7c%203.9%20%7c%203.10&color=blue&style=flat-square)](https://www.python.org/)\n[![checked with mypy](https://img.shields.io/static/v1?label=mypy&message=checked&color=blue&style=flat-square)](http://mypy-lang.org/)\n\n[![doc](https://img.shields.io/readthedocs/proxypy/latest?style=flat-square&color=darkgreen)](https://proxypy.readthedocs.io/)\n[![codecov](https://codecov.io/gh/abhinavsingh/proxy.py/branch/develop/graph/badge.svg?token=zh9j7b4la2)](https://codecov.io/gh/abhinavsingh/proxy.py)\n[![lib](https://github.com/abhinavsingh/proxy.py/actions/workflows/test-library.yml/badge.svg?branch=develop&event=push)](https://github.com/abhinavsingh/proxy.py/actions/workflows/test-library.yml)\n\n[![contributions welcome](https://img.shields.io/static/v1?label=contributions&message=welcome%20%f0%9f%91%8d&color=darkgreen&style=flat-square)](https://github.com/abhinavsingh/proxy.py/issues)\n[![need help](https://img.shields.io/static/v1?label=need%20help%3f&message=ask&color=darkgreen&style=flat-square)](https://twitter.com/imoracle)\n[![sponsored by jaxl innovations private limited](https://img.shields.io/static/v1?label=sponsored%20by&message=jaxl%20innovations%20private%20limited&color=darkgreen&style=flat-square)](https://github.com/jaxl-innovations-private-limited)\n\n# table of contents\n\n- [features](#features)\n- [install](#install)\n  - [using pip](#using-pip)\n    - [stable version](#stable-version-with-pip)\n    - [development version](#development-version-with-pip)\n  - [using docker](#using-docker)\n    - [stable version from docker hub](#stable-version-from-docker-hub)\n    - [development version from ghcr](#development-version-from-ghcr)\n    - [build container locally](#build-development-version-locally)\n  - [using homebrew](#using-homebrew)\n    - [stable version](#stable-version-with-homebrew)\n    - [development version](#development-version-with-homebrew)\n- [start proxy.py](#start-proxypy)\n  - [from command line when installed using pip](#from-command-line-when-installed-using-pip)\n    - [run it](#run-it)\n    - [understanding logs](#understanding-logs)\n    - [enable debug logging](#enable-debug-logging)\n  - [from command line using repo source](#from-command-line-using-repo-source)\n  - [docker image](#docker-image)\n    - [customize startup flags](#customize-startup-flags)\n- [plugin examples](#plugin-examples)\n  - [http proxy plugins](#http-proxy-plugins)\n    - [shortlink plugin](#shortlinkplugin)\n    - [modify post data plugin](#modifypostdataplugin)\n    - [mock api plugin](#mockrestapiplugin)\n    - [redirect to custom server plugin](#redirecttocustomserverplugin)\n    - [filter by upstream host plugin](#filterbyupstreamhostplugin)\n    - [cache responses plugin](#cacheresponsesplugin)\n    - [man-in-the-middle plugin](#maninthemiddleplugin)\n    - [proxy pool plugin](#proxypoolplugin)\n    - [filter by client ip plugin](#filterbyclientipplugin)\n    - [modify chunk response plugin](#modifychunkresponseplugin)\n    - [cloudflare dns resolver plugin](#cloudflarednsresolverplugin)\n    - [custom dns resolver plugin](#customdnsresolverplugin)\n    - [custom network interface](#customnetworkinterface)\n    - [program name plugin](#programnameplugin)\n  - [http web server plugins](#http-web-server-plugins)\n    - [web server route](#web-server-route)\n  - [reverse proxy plugins](#reverse-proxy-plugins)\n    - [reverse proxy](#reverse-proxy)\n  - [plugin ordering](#plugin-ordering)\n- [end-to-end encryption](#end-to-end-encryption)\n- [tls interception](#tls-interception)\n  - [tls interception with docker](#tls-interception-with-docker)\n- [proxy over ssh tunnel](#proxy-over-ssh-tunnel)\n  - [proxy remote requests locally](#proxy-remote-requests-locally)\n  - [proxy local requests remotely](#proxy-local-requests-remotely)\n- [embed proxy.py](#embed-proxypy)\n  - [blocking mode](#blocking-mode)\n  - [non-blocking mode](#non-blocking-mode)\n  - [ephemeral port](#ephemeral-port)\n  - [loading plugins](#loading-plugins)\n- [unit testing with proxy.py](#unit-testing-with-proxypy)\n  - [`proxy.testcase`](#proxytestcase)\n  - [override startup flags](#override-startup-flags)\n  - [with `unittest.testcase`](#with-unittesttestcase)\n- [utilities](#utilities)\n  - [tcp](#tcp-sockets)\n    - [new_socket_connection](#new_socket_connection)\n    - [socket_connection](#socket_connection)\n  - [http](#http-client)\n    - [build_http_request](#build_http_request)\n    - [build_http_response](#build_http_response)\n  - [public key infrastructure](#pki)\n    - [api usage](#api-usage)\n    - [cli usage](#cli-usage)\n- [run dashboard](#run-dashboard)\n  - [inspect traffic](#inspect-traffic)\n- [chrome devtools protocol](#chrome-devtools-protocol)\n- [frequently asked questions](#frequently-asked-questions)\n  - [deploying proxy.py in production](#deploying-proxypy-in-production)\n    - [what not to do?](#what-not-to-do)\n    - [via requirements](#via-requirements)\n    - [via docker container](#via-docker-container)\n    - [integrate your ci/cd with proxy.py](#integrate-your-cicd-with-proxypy)\n  - [stable vs develop](#stable-vs-develop)\n    - [release schedule](#release-schedule)\n  - [threads vs threadless](#threads-vs-threadless)\n  - [threadless remote vs local execution mode](#threadless-remote-vs-local-execution-mode)\n  - [syntaxerror: invalid syntax](#syntaxerror-invalid-syntax)\n  - [unable to load plugins](#unable-to-load-plugins)\n  - [unable to connect with proxy.py from remote host](#unable-to-connect-with-proxypy-from-remote-host)\n  - [basic auth not working with a browser](#basic-auth-not-working-with-a-browser)\n  - [docker image not working on macos](#docker-image-not-working-on-macos)\n  - [`valueerror: filedescriptor out of range in select`](#valueerror-filedescriptor-out-of-range-in-select)\n  - [none:none in access logs](#nonenone-in-access-logs)\n  - [oserror when wrapping client for tls interception](#oserror-when-wrapping-client-for-tls-interception)\n- [plugin developer and contributor guide](#plugin-developer-and-contributor-guide)\n  - [high level architecture](#high-level-architecture)\n  - [everything is a plugin](#everything-is-a-plugin)\n  - [internal documentation](#internal-documentation)\n    - [read the doc](#read-the-doc)\n    - [pydoc](#pydoc)\n    - [pyreverse](#pyreverse)\n  - [development guide](#development-guide)\n    - [setup local environment](#setup-local-environment)\n    - [setup git hooks](#setup-git-hooks)\n    - [sending a pull request](#sending-a-pull-request)\n- [projects using proxy.py](#projects-using-proxypy)\n- [benchmarks](#benchmarks)\n- [flags](#flags)\n- [changelog](https://proxypy.rtfd.io/en/latest/changelog)\n  - [v2.x](https://proxypy.rtfd.io/en/latest/changelog#v2x)\n  - [v1.x](https://proxypy.rtfd.io/en/latest/changelog#v1x)\n  - [v0.x](https://proxypy.rtfd.io/en/latest/changelog#v0x)\n\n[//]: # (do-not-remove-docs-badges-end)\n\n# features\n- fast & scalable\n\n  - scale up by using all available cores on the system\n\n  - threadless executions using asyncio\n\n  - made to handle `tens-of-thousands` connections / sec\n\n    ```console\n    # on macbook pro 2019 / 2.4 ghz 8-core intel core i9 / 32 gb ram\n    \u276f ./helper/benchmark.sh\n      concurrency: 100 workers, total requests: 100000 req\n\n      summary:\n        success rate:\t1.0000\n        total:\t2.5489 secs\n        slowest:\t0.0443 secs\n        fastest:\t0.0006 secs\n        average:\t0.0025 secs\n        requests/sec:\t39232.6572\n\n        total data:\t1.81 mib\n        size/request:\t19 b\n        size/sec:\t727.95 kib\n\n      response time histogram:\n        0.001 [5006]  |\u25a0\u25a0\u25a0\u25a0\u25a0\n        0.001 [19740] |\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\n        0.002 [29701] |\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\n        0.002 [21278] |\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\n        0.003 [15376] |\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\n        0.004 [6644]  |\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\n        0.004 [1609]  |\u25a0\n        0.005 [434]   |\n        0.006 [83]    |\n        0.006 [29]    |\n        0.007 [100]   |\n\n      latency distribution:\n        10% in 0.0014 secs\n        25% in 0.0018 secs\n        50% in 0.0023 secs\n        75% in 0.0030 secs\n        90% in 0.0036 secs\n        95% in 0.0040 secs\n        99% in 0.0047 secs\n\n      details (average, fastest, slowest):\n        dns+dialup:\t0.0025 secs, 0.0015 secs, 0.0030 secs\n        dns-lookup:\t0.0000 secs, 0.0000 secs, 0.0001 secs\n\n      status code distribution:\n        [200] 100000 responses\n    ```\n\n    consult [threads vs threadless](#threads-vs-threadless) and [threadless remote vs local execution mode](#threadless-remote-vs-local-execution-mode) to control number of cpu cores utilized.\n\n    see [benchmark](https://github.com/abhinavsingh/proxy.py/tree/develop/benchmark#readme) for more details and for how to run benchmarks locally.\n\n- lightweight\n  - uses only `~5-20 mb` ram\n    - no memory leaks\n    - start once and forget, no restarts required\n  - compressed containers size is only `~25 mb`\n  - no external dependency other than standard python library\n\n- programmable\n  - customize proxy behavior using [proxy server plugins](#http-proxy-plugins). example:\n    - `--plugins proxy.plugin.proxypoolplugin`\n  - enable builtin [web server](#http-web-server-plugins). example:\n    - `--enable-web-server --plugins proxy.plugin.webserverplugin`\n  - enable builtin [reverse proxy server](#reverse-proxy-plugins). example:\n    - `--enable-reverse-proxy --plugins proxy.plugin.reverseproxyplugin`\n  - plugin api is currently in *development phase*. expect breaking changes. see [deploying proxy.py in production](#deploying-proxypy-in-production) on how to ensure reliability across code changes.\n\n- can listen on multiple ports\n  - use `--ports` flag to provide additional ports\n  - optionally, use `--port` flag to override default port `8899`\n  - capable of serving multiple protocols over the same port\n\n- real-time dashboard\n  - optionally, enable [proxy.py dashboard](#run-dashboard).\n    - use `--enable-dashboard`\n    - then, visit `http://localhost:8899/dashboard`\n  - [inspect, monitor, control and configure](#inspect-traffic) `proxy.py` at runtime\n  - [chrome devtools protocol](#chrome-devtools-protocol) support\n  - extend dashboard frontend using `typescript` based [plugins](https://github.com/abhinavsingh/proxy.py/tree/develop/dashboard/src/plugins)\n  - dashboard is currently in *development phase*  expect breaking changes.\n\n- secure\n  - enable end-to-end encryption between clients and `proxy.py`\n  - see [end-to-end encryption](#end-to-end-encryption)\n\n- private\n  - protection against dns based traffic blockers\n  - browse with malware and adult content protection enabled\n  - see [dns-over-https](#cloudflarednsresolverplugin)\n\n- man-in-the-middle\n  - can decrypt tls traffic between clients and upstream servers\n  - see [tls interception](#tls-interception)\n\n- supported http protocols for proxy requests\n  - `http(s)`\n    - `http1`\n    - `http1.1` with pipeline\n  - `http2`\n  - `websockets`\n\n- support for `haproxy protocol`\n  - see `--enable-proxy-protocol` flag\n\n- static file server support\n  - see `--enable-static-server` and `--static-server-dir` flags\n\n- optimized for large file uploads and downloads\n  - see `--client-recvbuf-size`, `--server-recvbuf-size`, `--max-sendbuf-size` flags\n\n- `ipv4` and `ipv6` support\n  - see `--hostname` flag\n\n- unix domain socket support\n  - see `--unix-socket-path` flag\n\n- basic authentication support\n  - see `--basic-auth` flag\n\n- pac (proxy auto-configuration) support\n  - see `--pac-file` and `--pac-file-url-path` flags\n\n# install\n\nconsult [deploying proxy.py in production](#deploying-proxypy-in-production) when deploying production grade applications using `proxy.py`.\n\n## using pip\n\n### stable version with pip\n\ninstall from `pypi`\n\n```console\n\u276f pip install --upgrade proxy.py\n```\n\nor from github `master` branch\n\n```console\n\u276f pip install git+https://github.com/abhinavsingh/proxy.py.git@master\n```\n\n### development version with pip\n\n```console\n\u276f pip install git+https://github.com/abhinavsingh/proxy.py.git@develop\n```\n\n## using docker\n\nmulti-platform containers are available via:\n\n- docker hub\n  - `latest` tag points to last `stable` release\n  - `docker pull abhinavsingh/proxy.py:latest`\n- github container registry (ghcr)\n  - `latest` tag points to last `develop` release\n  - `docker pull ghcr.io/abhinavsingh/proxy.py:latest`\n\nstable version container releases are available for following platforms:\n\n- `linux/386`\n- `linux/amd64`\n- `linux/arm/v6`\n- `linux/arm/v7`\n- `linux/arm64/v8`\n- `linux/ppc64le`\n- `linux/s390x`\n\n### stable version from docker hub\n\nrun `proxy.py` latest container:\n\n```console\n\u276f docker run -it -p 8899:8899 --rm abhinavsingh/proxy.py:latest\n```\n\ndocker daemon will automatically pull the matching platform image.\nto run specific target platform container on multi-platform supported servers:\n\n```console\n\u276f docker run -it -p 8899:8899 --rm --platform linux/arm64/v8 abhinavsingh/proxy.py:latest\n```\n\n### development version from ghcr\n\nrun `proxy.py` container from cutting edge code in the develop branch:\n\n```console\n\u276f docker run -it -p 8899:8899 --rm ghcr.io/abhinavsingh/proxy.py:latest\n```\n\n### build development version locally\n\n```console\n\u276f git clone https://github.com/abhinavsingh/proxy.py.git\n\u276f cd proxy.py && make container\n\u276f docker run -it -p 8899:8899 --rm abhinavsingh/proxy.py:latest\n```\n\n[![warning](https://img.shields.io/static/v1?label=macos&message=warning&color=red)](https://github.com/moby/vpnkit/issues/469)\n`docker` image is currently broken on `macos` due to incompatibility with [vpnkit](https://github.com/moby/vpnkit/issues/469).\n\n## using homebrew\n\nupdated formulae for `homebrew` are maintained in `develop` branch under the `helper/homebrew` directory.\n\n- `stable` formulae installs the package from `master` branch.\n- `develop` formulae installs the package from `develop` branch.\n\n### stable version with homebrew\n\n```console\n\u276f brew install https://raw.githubusercontent.com/abhinavsingh/proxy.py/develop/helper/homebrew/stable/proxy.rb\n```\n\n### development version with homebrew\n\n```console\n\u276f brew install https://raw.githubusercontent.com/abhinavsingh/proxy.py/develop/helper/homebrew/develop/proxy.rb\n```\n\n# start proxy.py\n\n## from command line when installed using pip\n\nwhen `proxy.py` is installed using `pip`,\nan executable named `proxy` is placed under your `$path`.\n\n### run it\n\nsimply type `proxy` on command line to start with default configuration.\n\n```console\n\u276f proxy\n...[redacted]... - loaded plugin proxy.http.proxy.httpproxyplugin\n...[redacted]... - started 8 threadless workers\n...[redacted]... - started 8 acceptors\n...[redacted]... - listening on 127.0.0.1:8899\n```\n\n### understanding logs\n\nthings to notice from above logs:\n\n- `loaded plugin`\n  - `proxy.py` will load `proxy.http.proxy.httpproxyplugin` by default\n  - as name suggests, this core plugin adds `http(s)` proxy server capabilities to `proxy.py` instance\n\n- `started n threadless workers`\n  - by default, `proxy.py` will start as many worker processes as there are cpu cores on the machine\n  - use `--num-workers` flag to customize number of worker processes\n  - see [threads vs threadless](#threads-vs-threadless) to understand how to control execution mode\n\n- `started n acceptors`\n  - by default, `proxy.py` will start as many acceptor processes as there are cpu cores on the machine\n  - use `--num-acceptors` flag to customize number of acceptor processes\n  - see [high level architecture](#high-level-architecture) to understand relationship between acceptors and workers\n\n- `started server on ::1:8899`\n  - by default, `proxy.py` listens on ipv6 `::1`, which is equivalent of ipv4 `127.0.0.1`\n  - if you want to access `proxy.py` from external host, use `--hostname ::` or `--hostname 0.0.0.0` or bind to any other interface available on your machine.\n  - see [customnetworkinterface](#customnetworkinterface) for how to customize `proxy.py` *public ip seen by upstream servers*.\n\n- `port 8899`\n  - use `--port` flag to customize default tcp port.\n\n### enable debug logging\n\nall the logs above are `info` level logs, default `--log-level` for `proxy.py`\n\nlets start `proxy.py` with `debug` level logging:\n\n```console\n\u276f proxy --log-level d\n...[redacted]... - open file descriptor soft limit set to 1024\n...[redacted]... - loaded plugin proxy.http_proxy.httpproxyplugin\n...[redacted]... - started 8 workers\n...[redacted]... - started server on ::1:8899\n```\n\nyou can use single letter to customize log level.  example:\n- `d = debug`\n- `i = info`\n- `w = warning`\n- `e = error`\n- `c = critical`\n\nas we can see from the above logs, before starting up:\n\n- `proxy.py` tried to set open file limit `ulimit` on the system\n- default value for `--open-file-limit` used is `1024`\n- `--open-file-limit` flag is a no-op on `windows` operating systems\n\nsee [flags](#flags) for full list of available configuration options.\n\n## from command line using repo source\n\nif you are trying to run `proxy.py` from source code,\nthere is no binary file named `proxy` in the source code.\n\nto start `proxy.py` from source code follow these instructions:\n\n- clone repo\n\n  ```console\n  \u276f git clone https://github.com/abhinavsingh/proxy.py.git\n  \u276f cd proxy.py\n  ```\n\n- create a python 3 virtual env\n\n  ```console\n  \u276f python3 -m venv venv\n  \u276f source venv/bin/activate\n  ```\n\n- install deps\n\n  ```console\n  \u276f make lib-dep\n  ```\n\n- generate `proxy/common/_scm_version.py`\n\n  note: *following step is not necessary for editable installs.*\n\n  this file writes scm detected version to `proxy/common/_scm_version.py` file.\n\n  ```console\n  \u276f ./write-scm-version.sh\n  ```\n\n- optionally, run tests\n\n  ```console\n  \u276f make\n  ```\n\n- run `proxy.py`\n\n  ```console\n  \u276f python -m proxy\n  ```\n\nsee [plugin developer and contributor guide](#plugin-developer-and-contributor-guide)\nif you plan to work with `proxy.py` source code.\n\n## docker image\n\n### customize startup flags\n\nby default `docker` binary is started with ipv4 networking flags:\n\n    --hostname 0.0.0.0 --port 8899\n\nyou can override flag from command line when starting the docker container. for example, to check `proxy.py` version within the docker container, run:\n\n    \u276f docker run -it \\\n        -p 8899:8899 \\\n        --rm abhinavsingh/proxy.py:latest \\\n        -v\n\n# plugin examples\n\n- see [plugin](https://github.com/abhinavsingh/proxy.py/tree/develop/proxy/plugin) module for full code.\n- all the bundled plugin examples also works with `https` traffic\n  - require additional flags and certificate generation\n  - see [tls interception](#tls-interception).\n- plugin examples are also bundled with docker image.\n  - see [customize startup flags](#customize-startup-flags) to try plugins with docker image.\n\n## http proxy plugins\n\n### shortlinkplugin\n\nadd support for short links in your favorite browsers / applications.\n\n[![shortlink plugin](https://raw.githubusercontent.com/abhinavsingh/proxy.py/develop/shortlink.gif)](https://github.com/abhinavsingh/proxy.py#user-content-shortlinkplugin)\n\nstart `proxy.py` as:\n\n```console\n\u276f proxy \\\n    --plugins proxy.plugin.shortlinkplugin\n```\n\nnow you can speed up your daily browsing experience by visiting your\nfavorite website using single character domain names :). this works\nacross all browsers.\n\nfollowing short links are enabled by default:\n\n| short link |  destination url   |\n| :--------: |  :--------------:  |\n|     a/     |    `amazon.com`    |\n|     i/     |  `instagram.com`   |\n|     l/     |   `linkedin.com`   |\n|     f/     |   `facebook.com`   |\n|     g/     |    `google.com`    |\n|     t/     |   `twitter.com`    |\n|     w/     | `web.whatsapp.com` |\n|     y/     |   `youtube.com`    |\n|   proxy/   |  `localhost:8899`  |\n\n### modifypostdataplugin\n\nmodifies post request body before sending request to upstream server.\n\nstart `proxy.py` as:\n\n```console\n\u276f proxy \\\n    --plugins proxy.plugin.modifypostdataplugin\n```\n\nby default plugin replaces post body content with hard-coded `b'{\"key\": \"modified\"}'`\nand enforced `content-type: application/json`.\n\nverify the same using `curl -x localhost:8899 -d '{\"key\": \"value\"}' http://httpbin.org/post`\n\n```console\n{\n  \"args\": {},\n  \"data\": \"{\\\"key\\\": \\\"modified\\\"}\",\n  \"files\": {},\n  \"form\": {},\n  \"headers\": {\n    \"accept\": \"*/*\",\n    \"content-length\": \"19\",\n    \"content-type\": \"application/json\",\n    \"host\": \"httpbin.org\",\n    \"user-agent\": \"curl/7.54.0\"\n  },\n  \"json\": {\n    \"key\": \"modified\"\n  },\n  \"origin\": \"1.2.3.4, 5.6.7.8\",\n  \"url\": \"https://httpbin.org/post\"\n}\n```\n\nnote following from the response above:\n\n1. post data was modified `\"data\": \"{\\\"key\\\": \\\"modified\\\"}\"`.\n   original `curl` command data was `{\"key\": \"value\"}`.\n2. our `curl` command did not add any `content-type` header,\n   but our plugin did add one `\"content-type\": \"application/json\"`.\n   same can also be verified by looking at `json` field in the output above:\n   ```\n   \"json\": {\n    \"key\": \"modified\"\n   },\n   ```\n3. our plugin also added a `content-length` header to match length\n   of modified body.\n\n### mockrestapiplugin\n\nmock responses for your server rest api.\nuse to test and develop client side applications\nwithout need of an actual upstream rest api server.\n\nstart `proxy.py` as:\n\n```console\n\u276f proxy \\\n    --plugins proxy.plugin.proposedrestapiplugin\n```\n\nverify mock api response using `curl -x localhost:8899 http://api.example.com/v1/users/`\n\n```console\n{\"count\": 2, \"next\": null, \"previous\": null, \"results\": [{\"email\": \"you@example.com\", \"groups\": [], \"url\": \"api.example.com/v1/users/1/\", \"username\": \"admin\"}, {\"email\": \"someone@example.com\", \"groups\": [], \"url\": \"api.example.com/v1/users/2/\", \"username\": \"admin\"}]}\n```\n\nverify the same by inspecting `proxy.py` logs:\n\n```console\n... [redacted] ... - access_log:1210 - ::1:64792 - get none:none/v1/users/ - none none - 0 byte\n```\n\naccess log shows `none:none` as server `ip:port`. `none` simply means that\nthe server connection was never made, since response was returned by our plugin.\n\nnow modify `proposedrestapiplugin` to returns rest api mock\nresponses as expected by your clients.\n\n### redirecttocustomserverplugin\n\nredirects all incoming `http` requests to custom web server.\nby default, it redirects client requests to inbuilt web server,\nalso running on `8899` port.\n\nstart `proxy.py` and enable inbuilt web server:\n\n```console\n\u276f proxy \\\n    --enable-web-server \\\n    --plugins proxy.plugin.redirecttocustomserverplugin\n```\n\nverify using `curl -v -x localhost:8899 http://google.com`\n\n```\n... [redacted] ...\n< http/1.1 404 not found\n< server: proxy.py v1.0.0\n< connection: close\n<\n* closing connection 0\n```\n\nabove `404` response was returned from `proxy.py` web server.\n\nverify the same by inspecting the logs for `proxy.py`.\nalong with the proxy request log, you must also see a http web server request log.\n\n```\n... [redacted] ... - access_log:1241 - ::1:49525 - get /\n... [redacted] ... - access_log:1157 - ::1:49524 - get localhost:8899/ - 404 not found - 70 bytes\n```\n\n### filterbyupstreamhostplugin\n\ndrops traffic by inspecting upstream host.\nby default, plugin drops traffic for `facebook.com` and `www.facebok.com`.\n\nstart `proxy.py` as:\n\n```console\n\u276f proxy \\\n    --plugins proxy.plugin.filterbyupstreamhostplugin\n```\n\nverify using `curl -v -x localhost:8899 http://facebook.com`:\n\n```console\n... [redacted] ...\n< http/1.1 418 i'm a tea pot\n< proxy-agent: proxy.py v1.0.0\n* no chunk, no close, no size. assume close to signal end\n<\n* closing connection 0\n```\n\nabove `418 i'm a tea pot` is sent by our plugin.\n\nverify the same by inspecting logs for `proxy.py`:\n\n```console\n... [redacted] ... - handle_readables:1347 - httpprotocolexception type raised\ntraceback (most recent call last):\n... [redacted] ...\n... [redacted] ... - access_log:1157 - ::1:49911 - get none:none/ - none none - 0 bytes\n```\n\n### cacheresponsesplugin\n\ncaches upstream server responses.\n\nstart `proxy.py` as:\n\n```console\n\u276f proxy \\\n    --plugins proxy.plugin.cacheresponsesplugin\n```\n\nyou may also use the `--cache-requests` flag to enable request packet caching for inspection.\n\nverify using `curl -v -x localhost:8899 http://httpbin.org/get`:\n\n```console\n... [redacted] ...\n< http/1.1 200 ok\n< access-control-allow-credentials: true\n< access-control-allow-origin: *\n< content-type: application/json\n< date: wed, 25 sep 2019 02:24:25 gmt\n< referrer-policy: no-referrer-when-downgrade\n< server: nginx\n< x-content-type-options: nosniff\n< x-frame-options: deny\n< x-xss-protection: 1; mode=block\n< content-length: 202\n< connection: keep-alive\n<\n{\n  \"args\": {},\n  \"headers\": {\n    \"accept\": \"*/*\",\n    \"host\": \"httpbin.org\",\n    \"user-agent\": \"curl/7.54.0\"\n  },\n  \"origin\": \"1.2.3.4, 5.6.7.8\",\n  \"url\": \"https://httpbin.org/get\"\n}\n* connection #0 to host localhost left intact\n```\n\nget path to the cache file from `proxy.py` logs:\n\n```console\n... [redacted] ... - get httpbin.org:80/get - 200 ok - 556 bytes\n... [redacted] ... - cached response at /var/folders/k9/x93q0_xn1ls9zy76m2mf2k_00000gn/t/httpbin.org-1569378301.407512.txt\n```\n\nverify contents of the cache file `cat /path/to/your/cache/httpbin.org.txt`\n\n```console\nhttp/1.1 200 ok\naccess-control-allow-credentials: true\naccess-control-allow-origin: *\ncontent-type: application/json\ndate: wed, 25 sep 2019 02:24:25 gmt\nreferrer-policy: no-referrer-when-downgrade\nserver: nginx\nx-content-type-options: nosniff\nx-frame-options: deny\nx-xss-protection: 1; mode=block\ncontent-length: 202\nconnection: keep-alive\n\n{\n  \"args\": {},\n  \"headers\": {\n    \"accept\": \"*/*\",\n    \"host\": \"httpbin.org\",\n    \"user-agent\": \"curl/7.54.0\"\n  },\n  \"origin\": \"1.2.3.4, 5.6.7.8\",\n  \"url\": \"https://httpbin.org/get\"\n}\n```\n\n### maninthemiddleplugin\n\nmodifies upstream server responses.\n\nstart `proxy.py` as:\n\n```console\n\u276f proxy \\\n    --plugins proxy.plugin.maninthemiddleplugin\n```\n\nverify using `curl -v -x localhost:8899 http://google.com`:\n\n```console\n... [redacted] ...\n< http/1.1 200 ok\n< content-length: 28\n<\n* connection #0 to host localhost left intact\nhello from man in the middle\n```\n\nresponse body `hello from man in the middle` is sent by our plugin.\n\n### proxypoolplugin\n\nforward incoming proxy requests to a set of upstream proxy servers.\n\nlet's start 2 upstream proxies first.  to simulate upstream proxies,\nstart `proxy.py` on port `9000` and `9001`\n\n```console\n\u276f proxy --port 9000\n```\n\n```console\n\u276f proxy --port 9001\n```\n\nnow, start `proxy.py` with `proxypoolplugin` (on default `8899` port),\npointing to our upstream proxies at `9000` and `9001` port.\n\n```console\n\u276f proxy \\\n    --plugins proxy.plugin.proxypoolplugin \\\n    --proxy-pool localhost:9000 \\\n    --proxy-pool localhost:9001\n```\n\nmake a curl request via `8899` proxy:\n\n`curl -v -x localhost:8899 http://httpbin.org/get`\n\nverify that `8899` proxy forwards requests to upstream proxies\nby checking respective logs.\n\nif an upstream proxy require credentials, pass them as arguments. example:\n\n`--proxy-pool user:pass@upstream.proxy:port`\n\n### filterbyclientipplugin\n\nreject traffic from specific ip addresses. by default this\nplugin blocks traffic from `127.0.0.1` and `::1`.\n\nstart `proxy.py` as:\n\n```console\n\u276f proxy \\\n    --plugins proxy.plugin.filterbyclientipplugin\n```\n\nsend a request using `curl -v -x localhost:8899 http://google.com`:\n\n```console\n... [redacted] ...\n> proxy-connection: keep-alive\n>\n< http/1.1 418 i'm a tea pot\n< connection: close\n<\n* closing connection 0\n```\n\nmodify plugin to your taste e.g. allow specific ip addresses only.\n\n### modifychunkresponseplugin\n\nthis plugin demonstrate how to modify chunked encoded responses. in able to do so, this plugin uses `proxy.py` core to parse the chunked encoded response. then we reconstruct the response using custom hard-coded chunks, ignoring original chunks received from upstream server.\n\nstart `proxy.py` as:\n\n```console\n\u276f proxy \\\n    --plugins proxy.plugin.modifychunkresponseplugin\n```\n\nverify using `curl -v -x localhost:8899 http://httpbin.org/stream/5`:\n\n```console\n... [redacted] ...\nmodify\nchunk\nresponse\nplugin\n* connection #0 to host localhost left intact\n* closing connection 0\n```\n\nmodify `modifychunkresponseplugin` to your taste. example, instead of sending hard-coded chunks, parse and modify the original `json` chunks received from the upstream server.\n\n### cloudflarednsresolverplugin\n\nthis plugin uses `cloudflare` hosted `dns-over-https` [api](https://developers.cloudflare.com/1.1.1.1/encrypted-dns/dns-over-https/make-api-requests/dns-json) (json).\n\n`doh` mandates a http2 compliant client. unfortunately `proxy.py`\ndoes not provide that yet, so we use a dependency. install it:\n\n```console\n\u276f pip install \"httpx[http2]\"\n```\n\nnow start `proxy.py` as:\n\n```console\n\u276f proxy \\\n    --plugins proxy.plugin.cloudflarednsresolverplugin\n```\n\nby default, `cloudflarednsresolverplugin` runs in `security` mode and provides malware protection.\nuse `--cloudflare-dns-mode family` to also enable adult content protection too.\n\n### customdnsresolverplugin\n\nthis plugin demonstrate how to use a custom dns resolution implementation with `proxy.py`.\nthis example plugin currently uses python's in-built resolution mechanism.  customize code\nto your taste.  example, query your custom dns server, implement `doh` or other mechanisms.\n\nstart `proxy.py` as:\n\n```console\n\u276f proxy \\\n    --plugins proxy.plugin.customdnsresolverplugin\n```\n\n### customnetworkinterface\n\n`httpproxybaseplugin.resolve_dns` callback can also be used to configure `network interface` which must be used as the `source_address` for connection to the upstream server.\n\nsee [this thread](https://github.com/abhinavsingh/proxy.py/issues/535#issuecomment-961510862)\nfor more details.\n\nps: there is no plugin named, but [customdnsresolverplugin](#customdnsresolverplugin)\ncan be easily customized according to your needs.\n\n### programnameplugin\n\nattempts to resolve program `(application)` name for proxy requests originating from the local machine.\nif identified, client ip in the access logs is replaced with program name.\n\nstart `proxy.py` as:\n\n```console\n\u276f proxy \\\n    --plugins proxy.plugin.programnameplugin\n```\n\nmake a request using `curl`:\n\n```console\n\u276f curl -v -x localhost:8899 https://httpbin.org/get\n```\n\nyou must see log lines like this:\n\n```console\n... [redacted] ... - [i] server.access_log:419 - curl:58096 - connect httpbin.org:443 - 6010 bytes - 1824.62ms\n```\n\nnotice `curl` in-place of `::1` or `127.0.0.1` as client ip.\n\n[![warning](https://img.shields.io/static/v1?label=compatibility&message=warning&color=red)](#programnameplugin) if `programnameplugin` does not work reliably on your operating system, kindly contribute by sending a pull request and/or open an issue.  thank you!!!\n\n## http web server plugins\n\n### web server route\n\ndemonstrates inbuilt web server routing using plugin.\n\nstart `proxy.py` as:\n\n```console\n\u276f proxy --enable-web-server \\\n    --plugins proxy.plugin.webserverplugin\n```\n\nverify using `curl -v localhost:8899/http-route-example`, should return:\n\n```console\nhttp route response\n```\n\n## reverse proxy plugins\n\nextends in-built web server to add reverse proxy capabilities.\n\n### reverse proxy\n\nstart `proxy.py` as:\n\n```console\n\u276f proxy --enable-reverse-proxy \\\n    --plugins proxy.plugin.reverseproxyplugin\n```\n\nwith default configuration, `reverseproxyplugin` plugin is equivalent to\nfollowing `nginx` config:\n\n```console\nlocation /get {\n    proxy_pass http://httpbin.org/get\n}\n```\n\nverify using `curl -v localhost:8899/get`:\n\n```console\n{\n  \"args\": {},\n  \"headers\": {\n    \"accept\": \"*/*\",\n    \"host\": \"localhost\",\n    \"user-agent\": \"curl/7.64.1\"\n  },\n  \"origin\": \"1.2.3.4, 5.6.7.8\",\n  \"url\": \"https://localhost/get\"\n}\n```\n\n## plugin ordering\n\nwhen using multiple plugins, depending upon plugin functionality,\nit might be worth considering the order in which plugins are passed\non the command line.\n\nplugins are called in the same order as they are passed. example,\nsay we are using both `filterbyupstreamhostplugin` and\n`redirecttocustomserverplugin`. idea is to drop all incoming `http`\nrequests for `facebook.com` and `www.facebook.com` and redirect other\n`http` requests to our inbuilt web server.\n\nhence, in this scenario it is important to use\n`filterbyupstreamhostplugin` before `redirecttocustomserverplugin`.\nif we enable `redirecttocustomserverplugin` before `filterbyupstreamhostplugin`,\n`facebook` requests will also get redirected to inbuilt web server,\ninstead of being dropped.\n\n# end-to-end encryption\n\nby default, `proxy.py` uses `http` protocol for communication with clients e.g. `curl`, `browser`. for enabling end-to-end encrypting using `tls` / `https` first generate certificates. **checkout** the repository and run:\n\n```console\nmake https-certificates\n```\n\nstart `proxy.py` as:\n\n```console\n\u276f proxy \\\n    --cert-file https-cert.pem \\\n    --key-file https-key.pem\n```\n\nverify using `curl -x https://localhost:8899 --proxy-cacert https-cert.pem https://httpbin.org/get`:\n\n```console\n{\n  \"args\": {},\n  \"headers\": {\n    \"accept\": \"*/*\",\n    \"host\": \"httpbin.org\",\n    \"user-agent\": \"curl/7.54.0\"\n  },\n  \"origin\": \"1.2.3.4, 5.6.7.8\",\n  \"url\": \"https://httpbin.org/get\"\n}\n```\n\nif you want to avoid passing `--proxy-cacert` flag, also consider signing generated ssl certificates. example:\n\nfirst, generate ca certificates:\n\n```console\nmake ca-certificates\n```\n\nthen, sign ssl certificate:\n\n```console\nmake sign-https-certificates\n```\n\nnow restart the server with `--cert-file https-signed-cert.pem` flag. note that you must also trust generated `ca-cert.pem` in your system keychain.\n\n# tls interception\n\nby default, `proxy.py` will not decrypt `https` traffic between client and server.\nto enable tls interception first generate root ca certificates:\n\n```console\n\u276f make ca-certificates\n```\n\nlets also enable `cacheresponseplugin` so that we can verify decrypted\nresponse from the server. start `proxy.py` as:\n\n```console\n\u276f proxy \\\n    --plugins proxy.plugin.cacheresponsesplugin \\\n    --ca-key-file ca-key.pem \\\n    --ca-cert-file ca-cert.pem \\\n    --ca-signing-key-file ca-signing-key.pem\n```\n\n[![note](https://img.shields.io/static/v1?label=macos&message=note&color=yellow)](https://github.com/abhinavsingh/proxy.py#user-content-flags) also provide explicit ca bundle path needed for validation of peer certificates. see `--ca-file` flag.\n\nverify tls interception using `curl`\n\n```console\n\u276f curl -v -x localhost:8899 --cacert ca-cert.pem https://httpbin.org/get\n```\n\n```console\n*  issuer: c=us; st=ca; l=sanfrancisco; o=proxy.py; ou=ca; cn=proxy py ca; emailaddress=proxyca@mailserver.com\n*  ssl certificate verify ok.\n> get /get http/1.1\n... [redacted] ...\n< connection: keep-alive\n<\n{\n  \"args\": {},\n  \"headers\": {\n    \"accept\": \"*/*\",\n    \"host\": \"httpbin.org\",\n    \"user-agent\": \"curl/7.54.0\"\n  },\n  \"origin\": \"1.2.3.4, 5.6.7.8\",\n  \"url\": \"https://httpbin.org/get\"\n}\n```\n\nthe `issuer` line confirms that response was intercepted.\n\nalso verify the contents of cached response file. get path to the cache\nfile from `proxy.py` logs.\n\n`\u276f cat /path/to/your/tmp/directory/httpbin.org-1569452863.924174.txt`\n\n```console\nhttp/1.1 200 ok\naccess-control-allow-credentials: true\naccess-control-allow-origin: *\ncontent-type: application/json\ndate: wed, 25 sep 2019 23:07:05 gmt\nreferrer-policy: no-referrer-when-downgrade\nserver: nginx\nx-content-type-options: nosniff\nx-frame-options: deny\nx-xss-protection: 1; mode=block\ncontent-length: 202\nconnection: keep-alive\n\n{\n  \"args\": {},\n  \"headers\": {\n    \"accept\": \"*/*\",\n    \"host\": \"httpbin.org\",\n    \"user-agent\": \"curl/7.54.0\"\n  },\n  \"origin\": \"1.2.3.4, 5.6.7.8\",\n  \"url\": \"https://httpbin.org/get\"\n}\n```\n\nviola!!! if you remove ca flags, encrypted data will be found in the\ncached file instead of plain text.\n\nnow use ca flags with other\n[plugin examples](#plugin-examples) to see them work with `https` traffic.\n\n## tls interception with docker\n\nimportant notes about tls interception with docker container:\n\n- since `v2.2.0`, `proxy.py` docker container also ships with `openssl`. this allows `proxy.py`\n  to generate certificates on the fly for tls interception.\n\n- for security reasons, `proxy.py` docker container does not ship with\n  ca certificates.\n\nhere is how to start a `proxy.py` docker container\nwith tls interception:\n\n1. generate ca certificates on host computer\n\n   ```console\n   \u276f make ca-certificates\n   ```\n\n2. copy all generated certificates into a separate directory. we'll later mount this directory into our docker container\n\n   ```console\n   \u276f mkdir /tmp/ca-certificates\n   \u276f cp ca-cert.pem ca-key.pem ca-signing-key.pem /tmp/ca-certificates\n   ```\n\n3. start docker container\n\n   ```console\n   \u276f docker run -it --rm \\\n       -v /tmp/ca-certificates:/tmp/ca-certificates \\\n       -p 8899:8899 \\\n       abhinavsingh/proxy.py:latest \\\n       --hostname 0.0.0.0 \\\n       --plugins proxy.plugin.cacheresponsesplugin \\\n       --ca-key-file /tmp/ca-certificates/ca-key.pem \\\n       --ca-cert-file /tmp/ca-certificates/ca-cert.pem \\\n       --ca-signing-key /tmp/ca-certificates/ca-signing-key.pem\n   ```\n\n   - `-v /tmp/ca-certificates:/tmp/ca-certificates` flag mounts our ca certificate directory in container environment\n   - `--plugins proxy.plugin.cacheresponsesplugin` enables `cacheresponsesplugin` so that we can inspect intercepted traffic\n   - `--ca-*` flags enable tls interception.\n\n4. from another terminal, try tls interception using `curl`. you can omit `--cacert` flag if ca certificate is already trusted by the system.\n\n   ```console\n   \u276f curl -v \\\n       --cacert ca-cert.pem \\\n       -x 127.0.0.1:8899 \\\n       https://httpbin.org/get\n   ```\n\n5. verify `issuer` field from response headers.\n\n   ```console\n   * server certificate:\n   *  subject: cn=httpbin.org; c=na; st=unavailable; l=unavailable; o=unavailable; ou=unavailable\n   *  start date: jun 17 09:26:57 2020 gmt\n   *  expire date: jun 17 09:26:57 2022 gmt\n   *  subjectaltname: host \"httpbin.org\" matched cert's \"httpbin.org\"\n   *  issuer: cn=example.com\n   *  ssl certificate verify ok.\n   ```\n\n6. back on docker terminal, copy response dump path logs.\n\n   ```console\n   ...[redacted]... [i] access_log:338 - 172.17.0.1:56498 - connect httpbin.org:443 - 1031 bytes - 1216.70 ms\n   ...[redacted]... [i] close:49 - cached response at /tmp/httpbin.org-ae1a927d064e4ab386ea319eb38fe251.txt\n   ```\n\n7. in another terminal, `cat` the response dump:\n\n   ```console\n   \u276f docker exec -it $(docker ps | grep proxy.py | awk '{ print $1 }') cat /tmp/httpbin.org-ae1a927d064e4ab386ea319eb38fe251.txt\n   http/1.1 200 ok\n   ...[redacted]...\n   {\n     ...[redacted]...,\n     \"url\": \"http://httpbin.org/get\"\n   }\n   ```\n\n# proxy over ssh tunnel\n\n**this is a wip and may not work as documented**\n\nrequires `paramiko` to work.\n\nsee [requirements-tunnel.txt](https://github.com/abhinavsingh/proxy.py/blob/develop/requirements-tunnel.txt)\n\n## proxy remote requests locally\n\n                            |\n    +------------+          |            +----------+\n    |   local    |          |            |  remote  |\n    |   host     | <== ssh ==== :8900 == |  server  |\n    +------------+          |            +----------+\n    :8899 proxy.py          |\n                            |\n                         firewall\n                      (allow tcp/22)\n\n## what\n\nproxy http(s) requests made on a `remote` server through `proxy.py` server\nrunning on `localhost`.\n\n### how\n\n- requested `remote` port is forwarded over the ssh connection.\n- `proxy.py` running on the `localhost` handles and responds to\n  `remote` proxy requests.\n\n### requirements\n\n1. `localhost` must have ssh access to the `remote` server\n2. `remote` server must be configured to proxy http(s) requests\n   through the forwarded port number e.g. `:8900`.\n   - `remote` and `localhost` ports can be same e.g. `:8899`.\n   - `:8900` is chosen in ascii art for differentiation purposes.\n\n### try it\n\nstart `proxy.py` as:\n\n```console\n\u276f # on localhost\n\u276f proxy --enable-tunnel \\\n    --tunnel-username username \\\n    --tunnel-hostname ip.address.or.domain.name \\\n    --tunnel-port 22 \\\n    --tunnel-remote-port 8899 \\\n    --tunnel-ssh-key /path/to/ssh/private.key \\\n    --tunnel-ssh-key-passphrase xxxxx\n...[redacted]... [i] listener.setup:97 - listening on 127.0.0.1:8899\n...[redacted]... [i] pool.setup:106 - started 16 acceptors in threadless (local) mode\n...[redacted]... [i] transport._log:1873 - connected (version 2.0, client openssh_7.6p1)\n...[redacted]... [i] transport._log:1873 - authentication (publickey) successful!\n...[redacted]... [i] listener.setup:116 - ssh connection established to ip.address.or.domain.name:22...\n...[redacted]... [i] listener.start_port_forward:91 - :8899 forwarding successful...\n```\n\nmake a http proxy request on `remote` server and\nverify that response contains public ip address of `localhost` as origin:\n\n```console\n\u276f # on remote\n\u276f curl -x 127.0.0.1:8899 http://httpbin.org/get\n{\n  \"args\": {},\n  \"headers\": {\n    \"accept\": \"*/*\",\n    \"host\": \"httpbin.org\",\n    \"user-agent\": \"curl/7.54.0\"\n  },\n  \"origin\": \"x.x.x.x, y.y.y.y\",\n  \"url\": \"https://httpbin.org/get\"\n}\n```\n\nalso, verify that `proxy.py` logs on `localhost` contains `remote` ip as client ip.\n\n```console\naccess_log:328 - remote:52067 - get httpbin.org:80\n```\n\n## proxy local requests remotely\n\n                            |\n    +------------+          |     +----------+\n    |   local    |          |     |  remote  |\n    |   host     | === ssh =====> |  server  |\n    +------------+          |     +----------+\n                            |     :8899 proxy.py\n                            |\n                        firewall\n                     (allow tcp/22)\n\nnot planned.\n\nif you have a valid use case, kindly open an issue.  you are always welcome to send\ncontributions via pull-requests to add this functionality :)\n\n> to proxy local requests remotely, make use of [proxy pool plugin](#proxypoolplugin).\n\n# embed proxy.py\n\n## blocking mode\n\nstart `proxy.py` in embedded mode with default configuration\nby using `proxy.main` method. example:\n\n```python\nimport proxy\n\nif __name__ == '__main__':\n  proxy.main()\n```\n\ncustomize startup flags by passing them as kwargs:\n\n```python\nimport ipaddress\nimport proxy\n\nif __name__ == '__main__':\n  proxy.main(\n    hostname=ipaddress.ipv6address('::1'),\n    port=8899\n  )\n```\n\nnote that:\n\n1. `main` is equivalent to starting `proxy.py` from command line.\n2. `main` does not accept any `args` (only `kwargs`).\n3. `main` will automatically consume any available `sys.argv` as `args`.\n3. `main` will block until `proxy.py` shuts down.\n\n## non-blocking mode\n\nstart `proxy.py` in non-blocking embedded mode with default configuration\nby using `proxy` context manager: example:\n\n```python\nimport proxy\n\nif __name__ == '__main__':\n  with proxy.proxy() as p:\n    # uncomment the line below and\n    # implement your app your logic here\n    proxy.sleep_loop()\n```\n\nnote that:\n\n1. `proxy` is similar to `main`, except `proxy` will not block.\n2. internally, `proxy` is a context manager which will start\n   `proxy.py` when called and will shut it down once the scope ends.\n3. unlike `main`, startup flags with `proxy` can also be customized\n   by using `args` and `kwargs`. e.g. `proxy(['--port', '8899'])` or\n   by using passing flags as kwargs e.g. `proxy(port=8899)`.\n4. unlike `main`, `proxy` will not inspect `sys.argv`.\n\n## ephemeral port\n\nuse `--port=0` to bind `proxy.py` on a random port allocated by the kernel.\n\nin embedded mode, you can access this port.  example:\n\n```python\nimport proxy\n\nif __name__ == '__main__':\n  with proxy.proxy() as p:\n    print(p.flags.port)\n    proxy.sleep_loop()\n```\n\n`flags.port` will give you access to the random port allocated by the kernel.\n\n## loading plugins\n\nusers can use `--plugins` flag multiple times to load multiple plugins.\nsee [unable to load plugins](#unable-to-load-plugins) if you are running into issues.\n\nwhen using in embedded mode, you have a few more options.  example:\n\n1. provide a fully-qualified name of the plugin class as `bytes` to the `proxy.main` method or `proxy.proxy` context manager.\n2. provide `type` instance of the plugin class. this is especially useful if you plan to define plugins at runtime.\n\nexample, load a single plugin using `--plugins` flag:\n\n```python\nimport proxy\n\nif __name__ == '__main__':\n  proxy.main(plugins=['proxy.plugin.cacheresponsesplugin'])\n```\n\nfor simplicity, you can also pass the list of plugins as a keyword argument to `proxy.main` or the `proxy` constructor.\n\nexample:\n\n```python\nimport proxy\nfrom proxy.plugin import filterbyupstreamhostplugin\n\nif __name__ == '__main__':\n  proxy.main(plugins=[\n    b'proxy.plugin.cacheresponsesplugin',\n    filterbyupstreamhostplugin,\n  ])\n```\n\n# unit testing with proxy.py\n\n## `proxy.testcase`\n\nto setup and tear down `proxy.py` for your python `unittest` classes, simply use `proxy.testcase` instead of `unittest.testcase`.\nexample:\n\n```python\nimport proxy\n\nclass testproxypyembedded(proxy.testcase):\n\n    def test_my_application_with_proxy(self) -> none:\n        self.asserttrue(true)\n```\n\nnote that:\n\n1. `proxy.testcase` overrides `unittest.testcase.run()` method to setup and tear down `proxy.py`.\n2. `proxy.py` server will listen on a random available port on the system.\n   this random port is available as `self.proxy.flags.port` within your test cases.\n3. only a single acceptor and worker is started by default (`--num-workers 1 --num-acceptors 1`) for faster setup and tear down.\n4. most importantly, `proxy.testcase` also ensures `proxy.py` server\n   is up and running before proceeding with execution of tests. by default,\n   `proxy.testcase` will wait for `10 seconds` for `proxy.py` server to start,\n   upon failure a `timeouterror` exception will be raised.\n\n## override startup flags\n\nto override default startup flags, define a `proxy_py_startup_flags` variable in your test class.\nexample:\n\n```python\nclass testproxypyembedded(testcase):\n\n    proxy_py_startup_flags = [\n        '--num-workers', '2',\n        '--num-acceptors', '1',\n        '--enable-web-server',\n    ]\n\n    def test_my_application_with_proxy(self) -> none:\n        self.asserttrue(true)\n```\n\nsee [test_embed.py] for full working example.\n\n[test_embed.py]:\nhttps://github.com/abhinavsingh/proxy.py/blob/develop/tests/testing/test_embed.py\n\n## with `unittest.testcase`\n\nif for some reasons you are unable to directly use `proxy.testcase`,\nthen simply override `unittest.testcase.run` yourself to setup and tear down `proxy.py`.\nexample:\n\n```python\nimport unittest\nimport proxy\n\n\nclass testproxypyembedded(unittest.testcase):\n\n    def test_my_application_with_proxy(self) -> none:\n        self.asserttrue(true)\n\n    def run(self, result: optional[unittest.testresult] = none) -> any:\n        with proxy.start([\n                '--num-workers', '1',\n                '--num-acceptors', '1',\n                '--port', '... random port ...']):\n            super().run(result)\n```\n\nor simply setup / tear down `proxy.py` within\n`setupclass` and `teardownclass` class methods.\n\n# utilities\n\n## tcp sockets\n\n### new_socket_connection\n\nattempts to create an ipv4 connection, then ipv6 and\nfinally a dual stack connection to provided address.\n\n```python\n>>> conn = new_socket_connection(('httpbin.org', 80))\n>>> ...[ use connection ]...\n>>> conn.close()\n```\n\n### socket_connection\n\n`socket_connection` is a convenient decorator + context manager\naround `new_socket_connection` which ensures `conn.close` is implicit.\n\nas a context manager:\n\n```python\n>>> with socket_connection(('httpbin.org', 80)) as conn:\n>>>   ... [ use connection ] ...\n```\n\nas a decorator:\n\n```python\n>>> @socket_connection(('httpbin.org', 80))\n>>> def my_api_call(conn, *args, **kwargs):\n>>>   ... [ use connection ] ...\n```\n\n## http client\n\n### build_http_request\n\n- generate http get request\n\n  ```python\n  >>> build_http_request(b'get', b'/')\n  b'get / http/1.1\\r\\n\\r\\n'\n  ```\n\n- generate http get request with headers\n\n  ```python\n  >>> build_http_request(b'get', b'/', conn_close=true)\n  b'get / http/1.1\\r\\nconnection: close\\r\\n\\r\\n'\n  ```\n\n- generate http post request with headers and body\n\n  ```python\n  >>> import json\n  >>> build_http_request(b'post', b'/form',\n          headers={b'content-type': b'application/json'},\n          body=proxy.bytes_(json.dumps({'email': 'hello@world.com'})))\n      b'post /form http/1.1\\r\\ncontent-type: application/json\\r\\n\\r\\n{\"email\": \"hello@world.com\"}'\n  ```\n\n### build_http_response\n\n```python\nbuild_http_response(\n    status_code: int,\n    protocol_version: bytes = http_1_1,\n    reason: optional[bytes] = none,\n    headers: optional[dict[bytes, bytes]] = none,\n    body: optional[bytes] = none) -> bytes\n```\n\n## pki\n\n### api usage\n\n- `gen_private_key`\n\n  ```python\n  gen_private_key(\n      key_path: str,\n      password: str,\n      bits: int = 2048,\n      timeout: int = 10) -> bool\n  ```\n\n- `gen_public_key`\n\n  ```python\n  gen_public_key(\n      public_key_path: str,\n      private_key_path: str,\n      private_key_password: str,\n      subject: str,\n      alt_subj_names: optional[list[str]] = none,\n      extended_key_usage: optional[str] = none,\n      validity_in_days: int = 365,\n      timeout: int = 10) -> bool\n  ```\n\n- `remove_passphrase`\n\n  ```python\n  remove_passphrase(\n      key_in_path: str,\n      password: str,\n      key_out_path: str,\n      timeout: int = 10) -> bool\n  ```\n\n- `gen_csr`\n\n  ```python\n  gen_csr(\n      csr_path: str,\n      key_path: str,\n      password: str,\n      crt_path: str,\n      timeout: int = 10) -> bool\n  ```\n\n- `sign_csr`\n\n  ```python\n  sign_csr(\n      csr_path: str,\n      crt_path: str,\n      ca_key_path: str,\n      ca_key_password: str,\n      ca_crt_path: str,\n      serial: str,\n      alt_subj_names: optional[list[str]] = none,\n      extended_key_usage: optional[str] = none,\n      validity_in_days: int = 365,\n      timeout: int = 10) -> bool\n  ```\n\nsee [pki.py](https://github.com/abhinavsingh/proxy.py/blob/develop/proxy/common/pki.py) and\n[test_pki.py](https://github.com/abhinavsingh/proxy.py/blob/develop/tests/common/test_pki.py)\nfor usage examples.\n\n### cli usage\n\nuse `proxy.common.pki` module for:\n\n1. generation of public and private keys\n2. generating csr requests\n3. signing csr requests using custom ca.\n\n```console\npython -m proxy.common.pki -h\nusage: pki.py [-h] [--password password] [--private-key-path private_key_path]\n              [--public-key-path public_key_path] [--subject subject]\n              action\n\nproxy.py v2.2.0 : pki utility\n\npositional arguments:\n  action                valid actions: remove_passphrase, gen_private_key,\n                        gen_public_key, gen_csr, sign_csr\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --password password   password to use for encryption. default: proxy.py\n  --private-key-path private_key_path\n                        private key path\n  --public-key-path public_key_path\n                        public key path\n  --subject subject     subject to use for public key generation. default:\n                        /cn=example.com\n```\n\n## internal documentation\n\n### read the doc\n\n- visit [proxypy.readthedocs.io](https://proxypy.readthedocs.io/)\n- build locally using:\n\n`make lib-doc`\n\n### pydoc\n\ncode is well documented.  grab the source code and run:\n\n`pydoc3 proxy`\n\n### pyreverse\n\ngenerate class level hierarchy uml diagrams for in-depth analysis:\n\n`make lib-pyreverse`\n\n# run dashboard\n\ndashboard is currently under development and not yet bundled with `pip` packages.\nto run dashboard, you must checkout the source.\n\ndashboard is written in typescript and scss, so let's build it first using:\n\n```console\n\u276f make dashboard\n```\n\nalso build the embedded `chrome devtools` if you plan on using it:\n\n```console\n\u276f make devtools\n```\n\nnow start `proxy.py` with dashboard plugin and by overriding root directory for static server:\n\n```console\n\u276f proxy --enable-dashboard --static-server-dir dashboard/public\n...[redacted]... - loaded plugin proxy.http.server.httpwebserverplugin\n...[redacted]... - loaded plugin proxy.dashboard.dashboard.proxydashboard\n...[redacted]... - loaded plugin proxy.dashboard.inspect_traffic.inspecttrafficplugin\n...[redacted]... - loaded plugin proxy.http.inspector.devtoolsprotocolplugin\n...[redacted]... - loaded plugin proxy.http.proxy.httpproxyplugin\n...[redacted]... - listening on ::1:8899\n...[redacted]... - core event enabled\n```\n\ncurrently, enabling dashboard will also enable all the dashboard plugins.\n\nvisit dashboard:\n\n```console\n\u276f open http://localhost:8899/dashboard/\n```\n\n## inspect traffic\n\n***this is a wip and may not work as documented***\n\nwait for embedded `chrome dev console` to load.  currently, detail about all traffic flowing\nthrough `proxy.py` is pushed to the `inspect traffic` tab.  however, received payloads are not\nyet integrated with the embedded developer console.\n\ncurrent functionality can be verified by opening the `dev console` of dashboard and inspecting\nthe websocket connection that dashboard established with the `proxy.py` server.\n\n[![proxy.py dashboard inspect traffic](https://raw.githubusercontent.com/abhinavsingh/proxy.py/develop/dashboard.png)](https://github.com/abhinavsingh/proxy.py)\n\n# chrome devtools protocol\n\nfor scenarios where you want direct access to `chrome devtools` protocol websocket endpoint,\nstart `proxy.py` as:\n\n```console\n\u276f proxy --enable-devtools --enable-events\n```\n\nnow point your cdt instance to `ws://localhost:8899/devtools`.\n\n# frequently asked questions\n\n## deploying proxy.py in production\n\nlisted below are a few strategies for using `proxy.py` in your private/production/corporate projects.\n\n### what not to do?\n\n> you must `avoid forking` the repository *\"just\"* to put your plugin code in `proxy/plugin` directory.  forking is recommended workflow for project contributors, not for project users.\n\n- instead, use one of the suggested approaches from below.\n- then load your plugins using `--plugin`, `--plugins` flags or `plugin` kwargs.\n- see [skeleton](https://github.com/abhinavsingh/proxy.py/tree/develop/skeleton) app for example standalone project using `proxy.py`.\n\n### via requirements\n\nit is *highly* recommended that you use `proxy.py` via `requirements.txt` or similar dependency management setups. this will allow you to take advantages of regular performance updates, bug fixes, security patches and other improvements happening in the `proxy.py` ecosystem.  example:\n\n1. use `--pre` option to depend upon last `pre-release`\n\n    ```console\n    \u276f pip install proxy.py --pre\n    ```\n\n    pre-releases are similar to depending upon `develop` branch code, just that pre-releases may not point to the `head`.  this could happen because pre-releases are not made available on `pypi` after every pr merge.\n\n2. use `testpypi` with `--pre` option to depend upon `develop` branch code\n\n    ```console\n    \u276f pip install -i https://test.pypi.org/simple/ proxy.py --pre\n    ```\n\n    a pre-release is made available on `testpypi` after every pr merge.\n\n3. use last `stable` release code\n\n    as usual, simply use:\n\n    ```console\n    \u276f pip install proxy.py\n    ```\n\n### via docker container\n\nif you are into deploying containers, then simply build your image from base `proxy.py` container images.\n\n1. use `ghcr` to build from `develop` branch code:\n\n    ```console\n    from ghcr.io/abhinavsingh/proxy.py:latest as base\n    ```\n\n    *ps: i use ghcr latest for several production level projects*\n\n2. use `dockerhub` to build from last `stable` release code:\n\n    ```console\n    from abhinavsingh/proxy.py:latest as base\n    ```\n\nps: imho, container based strategy is *the best approach* and the only strategy that *i use myself*.\n\n### integrate your ci/cd with proxy.py\n\n*hey, but you keep making breaking changes in the develop branch.*\n\ni hear you.  and hence, for your production grade applications, you *must* integrate application ci/cd with `proxy.py`.  you must make sure that your application builds and passes its tests for every pr merge into the `proxy.py` upstream repo.\n\nif your application repository is public, in certain scenarios, pr authors may send patch prs for all dependents to maintain backward incompatibility and green ci/cd.\n\nci/cd integration ensure your app continues to build with latest `proxy.py` code.  depending upon where you host your code, use the strategy listed below:\n\n- github\n\n    tbd\n\n- google cloud build\n\n    tbd\n\n- aws\n\n    tbd\n\n- azure\n\n    tbd\n\n- others\n\n    tbd\n\n> at some stage, we'll deprecate `master` branch segregation and simply maintain a `develop` branch.  as dependents can maintain stability via ci/cd integrations. currently, it's hard for a production grade project to blindly depend upon `develop` branch.\n\n## stable vs develop\n\n- `master` branch contains latest `stable` code and is available via `pypi` repository and `docker` containers via `docker.io` and `ghcr.io` registries.\n\n  issues reported for `stable` releases are considered with top-priority.  however, currently we don't back port fixes into older releases.  example, if you reported an issue in `v2.3.1`, but current `master` branch now contains `v2.4.0rc1`.  then, the fix will land in `v2.4.0rc2`.\n\n- `develop` branch contains cutting edge changes\n\n  development branch is kept stable *(most of the times)*. **but**, if you want *100% reliability* and serving users in *production environment*, always use the stable version.\n\n### release schedule\n\na `vx.y.zrcn` pull request is created once a month which merges `develop` \u2192 `master`.  find below how code flows from a pull request to the next stable release.\n\n1. development release is deployed from `develop` \u2192 `test.pypi.org` after every pull request merge\n\n2. alpha release is deployed from `develop` \u2192 `pypi.org` **before** merging the `vx.y.z.rcn` pull request from `develop` \u2192 `master` branch.  there can be multiple alpha releases made before merging the `rc` pull request\n\n3. beta release is deployed from `master` \u2192 `pypi.org`.  beta releases are made in preparation of `rc` releases and can be skipped if unnecessary\n\n4. release candidate is deployed from `master` \u2192 `pypi.org`.  release candidates are always made available before final stable release\n\n5. stable release is deployed from `master` \u2192 `pypi.org`\n\n## threads vs threadless\n\n### `v1.x`\n\n`proxy.py` used to spawn new threads for handling client requests.\n\n### `v2.0+`\n\n`proxy.py` added support for threadless execution of client requests using `asyncio`.\n\n### `v2.4.0+`\n\nthreadless execution was turned on by default for `python 3.8+` on `mac` and `linux` environments.\n\n`proxy.py` threadless execution has been reported safe on these environments by our users. if you are running into trouble, fallback to threaded mode using `--threaded` flag.\n\nfor `windows` and `python < 3.8`, you can still try out threadless mode by starting `proxy.py` with `--threadless` flag.\n\nif threadless works for you, consider sending a pr by editing `_env_threadless_compliant` method in the `proxy/common/constants.py` file.\n\n## threadless remote vs local execution mode\n\noriginal threadless implementation used `remote` execution mode.  this is also depicted under [high level architecture](#high-level-architecture) as ascii art.\n\nunder `remote` execution mode, acceptors delegate incoming client connection processing to a remote worker process.  by default, acceptors delegate connections in round-robin fashion.  worker processing the request may or may not be running on the same cpu core as the acceptor.  this architecture scales well for high throughput, but results in spawning two process per cpu core.\n\nexample, if there are n-cpus on the machine, by default, n acceptors and n worker processes are started.  you can tune number of processes using `--num-acceptors` and `--num-workers` flag.  you might want more workers than acceptors or vice versa depending upon your use case.\n\nin v2.4.x, `local` execution mode was added, mainly to reduce number of processes spawned by default.  this model serves well for day-to-day single user use cases and for developer testing scenarios.  under `local` execution mode, acceptors delegate client connections to a companion thread, instead of a remote process.  `local` execution mode ensure cpu affinity, unlike in the `remote` mode where acceptor and worker might be running on different cpu cores.\n\n`--local-executor 1` was made default in v2.4.x series.  under `local` execution mode, `--num-workers` flag has no effect, as no remote workers are started.\n\nto use `remote` execution mode, use `--local-executor 0` flag.  then use `--num-workers` to tune number of worker processes.\n\n## syntaxerror: invalid syntax\n\n`proxy.py` is strictly typed and uses python `typing` annotations. example:\n\n```python\n>>> my_strings : list[str] = []\n>>> #############^^^^^^^^^#####\n```\n\nhence a python version that understands typing annotations is required.\nmake sure you are using `python 3.6+`.\n\nverify the version before running `proxy.py`:\n\n`\u276f python --version`\n\nall `typing` annotations can be replaced with `comment-only` annotations. example:\n\n```python\n>>> my_strings = [] # list[str]\n>>> ################^^^^^^^^^^^\n```\n\nit will enable `proxy.py` to run on python `pre-3.6`, even on `2.7`.\nhowever, as all future versions of python will support `typing` annotations,\nthis has not been considered.\n\n## unable to load plugins\n\nmake sure plugin modules are discoverable by adding them to `pythonpath`. example:\n\n`pythonpath=/path/to/my/app proxy --plugins my_app.proxyplugin`\n\n```console\n...[redacted]... - loaded plugin proxy.httpproxyplugin\n...[redacted]... - loaded plugin my_app.proxyplugin\n```\n\nor, simply pass fully-qualified path as parameter, e.g.\n\n`proxy --plugins /path/to/my/app/my_app.proxyplugin`\n\nhere is a quick working example:\n\n- contents of `/tmp/plug` folder\n\n```console\n\u2570\u2500 ls -1 /tmp/plug                                                                                                                       \u2500\u256f\nmy_plugin.py\n```\n\n- custom `myplugin` class\n\n```console\n\u2570\u2500 cat /tmp/plug/my_plugin.py                                                                                                            \u2500\u256f\nfrom proxy.http.proxy import httpproxybaseplugin\n\n\nclass myplugin(httpproxybaseplugin):\n  pass\n```\n\nthis is an empty plugin for demonstrating external plugin usage. you must implement necessary methods to make your plugins work for real traffic\n\n- start `proxy.py` with `myplugin`\n\n```console\n\u2570\u2500 pythonpath=/tmp/plug proxy --plugin my_plugin.myplugin                                                                      \u2500\u256f\n...[redacted]... - loaded plugin proxy.http.proxy.httpproxyplugin\n...[redacted]... - loaded plugin my_plugin.myplugin\n...[redacted]... - listening on ::1:8899\n```\n\n## unable to connect with proxy.py from remote host\n\nmake sure `proxy.py` is listening on correct network interface.\ntry following flags:\n\n- for ipv6 `--hostname ::`\n- for ipv4 `--hostname 0.0.0.0`\n\n## basic auth not working with a browser\n\nmost likely it's a browser integration issue with system keychain.\n\n- first verify that basic auth is working using `curl`\n\n  `curl -v -x username:password@localhost:8899 https://httpbin.org/get`\n\n- see [this thread](https://github.com/abhinavsingh/proxy.py/issues/89#issuecomment-534845710)\n  for further details.\n\n## docker image not working on macos\n\nit's a compatibility issue with `vpnkit`.\n\nsee [moby/vpnkit exhausts docker resources](https://github.com/abhinavsingh/proxy.py/issues/43)\nand [connection refused: the proxy could not connect](https://github.com/moby/vpnkit/issues/469)\nfor some background.\n\n## gce log viewer integration for proxy.py\n\na starter [fluentd.conf](https://github.com/abhinavsingh/proxy.py/blob/develop/helper/fluentd.conf)\ntemplate is available.\n\n1. copy this configuration file as `proxy.py.conf` under\n   `/etc/google-fluentd/config.d/`\n\n2. update `path` field to log file path as used with `--log-file` flag.\n   by default `/tmp/proxy.log` path is tailed.\n\n3. reload `google-fluentd`:\n\n   `sudo service google-fluentd restart`\n\nnow `proxy.py` logs can be browsed using\n[gce log viewer](https://console.cloud.google.com/logs/viewer).\n\n## `valueerror: filedescriptor out of range in select`\n\n`proxy.py` is made to handle thousands of connections per second\nwithout any socket leaks.\n\n1. make use of `--open-file-limit` flag to customize `ulimit -n`.\n2. make sure to adjust `--backlog` flag for higher concurrency.\n\nif nothing helps, [open an issue](https://github.com/abhinavsingh/proxy.py/issues/new)\nwith `requests per second` sent and output of following debug script:\n\n```console\n\u276f ./helper/monitor_open_files.sh <proxy-py-pid>\n```\n\n## none:none in access logs\n\nsometimes you may see `none:none` in access logs. it simply means\nthat an upstream server connection was never established i.e.\n`upstream_host=none`, `upstream_port=none`.\n\nthere can be several reasons for no upstream connection,\nfew obvious ones include:\n\n1. client established a connection but never completed the request.\n2. a plugin returned a response prematurely, avoiding connection to upstream server.\n\n## oserror when wrapping client for tls interception\n\nwith `tls interception` on, you might occasionally see following exceptions:\n\n```console\n2021-11-06 23:33:34,540 - pid:91032 [e] server.intercept:678 - oserror when wrapping client\ntraceback (most recent call last):\n  ...[redacted]...\n  ...[redacted]...\n  ...[redacted]...\nssl.sslerror: [ssl: tlsv1_alert_unknown_ca] tlsv1 alert unknown ca (_ssl.c:997)\n...[redacted]... - connect oauth2.googleapis.com:443 - 0 bytes - 272.08 ms\n```\n\nsome clients can throw `tlsv1_alert_unknown_ca` if they cannot verify the certificate of the server\nbecause it is signed by an unknown issuer ca.  which is the case when we are doing tls interception.\nthis can be for a variety of reasons e.g. certificate pinning etc.\n\nanother exception you might see is `certificate_verify_failed`:\n\n```console\n2021-11-06 23:36:02,002 - pid:91033 [e] handler.handle_readables:293 - exception while receiving from client connection <socket.socket fd=28, family=addressfamily.af_inet, type=socketkind.sock_stream, proto=0, laddr=('127.0.0.1', 8899), raddr=('127.0.0.1', 51961)> with reason sslcertverificationerror(1, '[ssl: certificate_verify_failed] certificate verify failed: self signed certificate in certificate chain (_ssl.c:997)')\ntraceback (most recent call last):\n  ...[redacted]...\n  ...[redacted]...\n  ...[redacted]...\nssl.sslcertverificationerror: [ssl: certificate_verify_failed] certificate verify failed: self signed certificate in certificate chain (_ssl.c:997)\n...[redacted]... - connect init.push.apple.com:443 - 0 bytes - 892.99 ms\n```\n\nin future, we might support serving original https content for such clients while still\nperforming tls interception in the background.  this will keep the clients happy without\nimpacting our ability to tls intercept.  unfortunately, this feature is currently not available.\n\nanother example with `ssleoferror` exception:\n\n```console\n2021-11-06 23:46:40,446 - pid:91034 [e] server.intercept:678 - oserror when wrapping client\ntraceback (most recent call last):\n  ...[redacted]...\n  ...[redacted]...\n  ...[redacted]...\nssl.ssleoferror: eof occurred in violation of protocol (_ssl.c:997)\n...[redacted]... - connect stock.adobe.io:443 - 0 bytes - 685.32 ms\n```\n\n# plugin developer and contributor guide\n\n## high level architecture\n\n```console\n                        +-------------+\n                        |             |\n                        |  proxy([])  |\n                        |             |\n                        +------+------+\n                               |\n                               |\n                   +-----------v--------------+\n                   |                          |\n                   |    acceptorpool(...)     |\n                   |                          |\n                   +------------+-------------+\n                                |\n+-----------------+             |           +-----------------+\n|                 |             |           |                 |\n|   acceptor(..)  <-------------+----------->  acceptor(..)   |\n|                 |                         |                 |\n+---+-------------+                         +---------+-------+\n    |                                                 |\n    |                                                 |\n    |    +------++------++------++------++------+     |\n    |    |      ||      ||      ||      ||      |     |\n    +---->      ||      ||      ||      ||      <-----+\n         |      ||      ||      ||      ||      |\n         +------++------++------++------++------+\n                threadless worker processes\n```\n\n`proxy.py` is made with performance in mind.  by default, `proxy.py`\nwill try to utilize all available cpu cores to it for accepting new\nclient connections. this is achieved by starting `acceptorpool` which\nlistens on configured server port. then, `acceptorpool` starts `acceptor`\nprocesses (`--num-acceptors`) to accept incoming client connections.\nalongside, if `--threadless` is enabled, `threadlesspool` is setup\nwhich starts `threadless` processes (`--num-workers`) to handle\nthe incoming client connections.\n\neach `acceptor` process delegates the accepted client connection\nto a threadless process via `work` class.  currently, `httpprotocolhandler`\nis the default work class.\n\n`httpprotocolhandler` simply assumes that incoming clients will follow\nhttp specification.  specific http proxy and http server implementations\nare written as plugins of `httpprotocolhandler`.\n\nsee documentation of `httpprotocolhandlerplugin` for available lifecycle hooks.\nuse `httpprotocolhandlerplugin` to add new features for http(s) clients. example,\nsee `httpwebserverplugin`.\n\n## everything is a plugin\n\nwithin `proxy.py` everything is a plugin.\n\n- we enabled `proxy server` plugins using `--plugins` flag.\n  proxy server `httpproxyplugin` is a plugin of `httpprotocolhandler`.\n  further, proxy server allows plugin through `httpproxybaseplugin` specification.\n\n- all the proxy server [plugin examples](#plugin-examples) were implementing\n  `httpproxybaseplugin`. see documentation of `httpproxybaseplugin` for available\n  lifecycle hooks. use `httpproxybaseplugin` to modify behavior of http(s) proxy protocol\n  between client and upstream server. example,\n  [filterbyupstreamhostplugin](#filterbyupstreamhostplugin).\n\n- we also enabled inbuilt `web server` using `--enable-web-server`.\n  web server `httpwebserverplugin` is a plugin of `httpprotocolhandler`\n  and implements `httpprotocolhandlerplugin` specification.\n\n- there also is a `--disable-http-proxy` flag. it disables inbuilt proxy server.\n  use this flag with `--enable-web-server` flag to run `proxy.py` as a programmable\n  http(s) server.\n\n## development guide\n\n### setup local environment\n\ncontributors must start `proxy.py` from source to verify and develop new features / fixes.\n\nsee [run proxy.py from command line using repo source](#from-command-line-using-repo-source) for details.\n\n\n[![warning](https://img.shields.io/static/v1?label=macos&message=warning&color=red)](https://github.com/abhinavsingh/proxy.py/issues/642#issuecomment-960819271) on `macos`\nyou must install `python` using `pyenv`, as `python` installed via `homebrew` tends\nto be problematic.  see linked thread for more details.\n\n### setup git hooks\n\npre-commit hook ensures tests are passing.\n\n1. `cd /path/to/proxy.py`\n2. `ln -s $(pwd)/git-pre-commit .git/hooks/pre-commit`\n\npre-push hook ensures lint and tests are passing.\n\n1. `cd /path/to/proxy.py`\n2. `ln -s $(pwd)/git-pre-push .git/hooks/pre-push`\n\n### sending a pull request\n\nevery pull request is tested using github actions.\n\nsee [github workflow](https://github.com/abhinavsingh/proxy.py/tree/develop/.github/workflows)\nfor list of tests.\n\n# projects using proxy.py\n\nsome of the projects using `proxy.py`\n\n1. [ray-project](https://github.com/ray-project/ray)\n2. [aio-libs](https://github.com/aio-libs/aiohttp)\n3. [wifipumpkin3](https://github.com/p0cl4bs/wifipumpkin3)\n4. [merossiot](https://github.com/albertogeniola/merossiot)\n5. [pyshorteners](https://github.com/ellisonleao/pyshorteners)\n6. [slack api](https://github.com/slackapi/python-slack-events-api)\n7. [ibeam](https://github.com/voyz/ibeam)\n8. [pypaperbot](https://github.com/ferru97/pypaperbot)\n\nfor full list see [used by](https://github.com/abhinavsingh/proxy.py/network/dependents?package_id=ugfja2fnzs01mjq0mdy5ng%3d%3d)\n\n# benchmarks\n\nsee [benchmark](https://github.com/abhinavsingh/proxy.py/tree/develop/benchmark) directory on how to run benchmark comparisons with other oss web servers.\n\nto run standalone benchmark for `proxy.py`, use the following command from repo root:\n\n```console\n\u276f ./helper/benchmark.sh\n```\n\n# flags\n\n```console\n\u276f proxy -h\nusage: -m [-h] [--tunnel-hostname tunnel_hostname] [--tunnel-port tunnel_port]\n          [--tunnel-username tunnel_username]\n          [--tunnel-ssh-key tunnel_ssh_key]\n          [--tunnel-ssh-key-passphrase tunnel_ssh_key_passphrase]\n          [--tunnel-remote-port tunnel_remote_port] [--threadless]\n          [--threaded] [--num-workers num_workers] [--enable-events]\n          [--local-executor local_executor] [--backlog backlog]\n          [--hostname hostname] [--port port] [--ports ports [ports ...]]\n          [--port-file port_file] [--unix-socket-path unix_socket_path]\n          [--num-acceptors num_acceptors] [--version] [--log-level log_level]\n          [--log-file log_file] [--log-format log_format]\n          [--open-file-limit open_file_limit]\n          [--plugins plugins [plugins ...]] [--enable-dashboard]\n          [--basic-auth basic_auth] [--enable-ssh-tunnel]\n          [--work-klass work_klass] [--pid-file pid_file]\n          [--enable-proxy-protocol] [--enable-conn-pool] [--key-file key_file]\n          [--cert-file cert_file] [--client-recvbuf-size client_recvbuf_size]\n          [--server-recvbuf-size server_recvbuf_size]\n          [--max-sendbuf-size max_sendbuf_size] [--timeout timeout]\n          [--disable-http-proxy] [--disable-headers disable_headers]\n          [--ca-key-file ca_key_file] [--ca-cert-dir ca_cert_dir]\n          [--ca-cert-file ca_cert_file] [--ca-file ca_file]\n          [--ca-signing-key-file ca_signing_key_file]\n          [--auth-plugin auth_plugin] [--cache-requests]\n          [--cache-by-content-type] [--cache-dir cache_dir]\n          [--proxy-pool proxy_pool] [--enable-web-server]\n          [--enable-static-server] [--static-server-dir static_server_dir]\n          [--min-compression-length min_compression_length]\n          [--enable-reverse-proxy] [--pac-file pac_file]\n          [--pac-file-url-path pac_file_url_path]\n          [--cloudflare-dns-mode cloudflare_dns_mode]\n          [--filtered-upstream-hosts filtered_upstream_hosts]\n          [--filtered-client-ips-mode filtered_client_ips_mode]\n          [--filtered-client-ips filtered_client_ips]\n          [--filtered-url-regex-config filtered_url_regex_config]\n\nproxy.py v2.4.3.dev14+gc6b2de6.d20220605\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --tunnel-hostname tunnel_hostname\n                        default: none. remote hostname or ip address to which\n                        ssh tunnel will be established.\n  --tunnel-port tunnel_port\n                        default: 22. ssh port of the remote host.\n  --tunnel-username tunnel_username\n                        default: none. username to use for establishing ssh\n                        tunnel.\n  --tunnel-ssh-key tunnel_ssh_key\n                        default: none. private key path in pem format\n  --tunnel-ssh-key-passphrase tunnel_ssh_key_passphrase\n                        default: none. private key passphrase\n  --tunnel-remote-port tunnel_remote_port\n                        default: 8899. remote port which will be forwarded\n                        locally for proxy.\n  --threadless          default: false. enabled by default on python 3.8+\n                        (mac, linux). when disabled a new thread is spawned to\n                        handle each client connection.\n  --threaded            default: true. disabled by default on python < 3.8 and\n                        windows. when enabled a new thread is spawned to\n                        handle each client connection.\n  --num-workers num_workers\n                        defaults to number of cpu cores.\n  --enable-events       default: false. enables core to dispatch lifecycle\n                        events. plugins can be used to subscribe for core\n                        events.\n  --local-executor local_executor\n                        default: 1. enabled by default. use 0 to disable. when\n                        enabled acceptors will make use of local (same\n                        process) executor instead of distributing load across\n                        remote (other process) executors. enable this option\n                        to achieve cpu affinity between acceptors and\n                        executors, instead of using underlying os kernel\n                        scheduling algorithm.\n  --backlog backlog     default: 100. maximum number of pending connections to\n                        proxy server.\n  --hostname hostname   default: 127.0.0.1. server ip address.\n  --port port           default: 8899. server port. to listen on more ports,\n                        pass them using --ports flag.\n  --ports ports [ports ...]\n                        default: none. additional ports to listen on.\n  --port-file port_file\n                        default: none. save server port numbers. useful when\n                        using --port=0 ephemeral mode.\n  --unix-socket-path unix_socket_path\n                        default: none. unix socket path to use. when provided\n                        --host and --port flags are ignored\n  --num-acceptors num_acceptors\n                        defaults to number of cpu cores.\n  --version, -v         prints proxy.py version.\n  --log-level log_level\n                        valid options: debug, info (default), warning, error,\n                        critical. both upper and lowercase values are allowed.\n                        you may also simply use the leading character e.g.\n                        --log-level d\n  --log-file log_file   default: sys.stdout. log file destination.\n  --log-format log_format\n                        log format for python logger.\n  --open-file-limit open_file_limit\n                        default: 1024. maximum number of files (tcp\n                        connections) that proxy.py can open concurrently.\n  --plugins plugins [plugins ...]\n                        comma separated plugins. you may use --plugins flag\n                        multiple times.\n  --enable-dashboard    default: false. enables proxy.py dashboard.\n  --basic-auth basic_auth\n                        default: no authentication. specify colon separated\n                        user:password to enable basic authentication.\n  --enable-ssh-tunnel   default: false. enable ssh tunnel.\n  --work-klass work_klass\n                        default: proxy.http.httpprotocolhandler. work klass to\n                        use for work execution.\n  --pid-file pid_file   default: none. save \"parent\" process id to a file.\n  --enable-proxy-protocol\n                        default: false. if used, will enable proxy protocol.\n                        only version 1 is currently supported.\n  --enable-conn-pool    default: false. (wip) enable upstream connection\n                        pooling.\n  --key-file key_file   default: none. server key file to enable end-to-end\n                        tls encryption with clients. if used, must also pass\n                        --cert-file.\n  --cert-file cert_file\n                        default: none. server certificate to enable end-to-end\n                        tls encryption with clients. if used, must also pass\n                        --key-file.\n  --client-recvbuf-size client_recvbuf_size\n                        default: 128 kb. maximum amount of data received from\n                        the client in a single recv() operation.\n  --server-recvbuf-size server_recvbuf_size\n                        default: 128 kb. maximum amount of data received from\n                        the server in a single recv() operation.\n  --max-sendbuf-size max_sendbuf_size\n                        default: 64 kb. maximum amount of data to flush in a\n                        single send() operation.\n  --timeout timeout     default: 10.0. number of seconds after which an\n                        inactive connection must be dropped. inactivity is\n                        defined by no data sent or received by the client.\n  --disable-http-proxy  default: false. whether to disable\n                        proxy.httpproxyplugin.\n  --disable-headers disable_headers\n                        default: none. comma separated list of headers to\n                        remove before dispatching client request to upstream\n                        server.\n  --ca-key-file ca_key_file\n                        default: none. ca key to use for signing dynamically\n                        generated https certificates. if used, must also pass\n                        --ca-cert-file and --ca-signing-key-file\n  --ca-cert-dir ca_cert_dir\n                        default: ~/.proxy/certificates. directory to store\n                        dynamically generated certificates. also see --ca-key-\n                        file, --ca-cert-file and --ca-signing-key-file\n  --ca-cert-file ca_cert_file\n                        default: none. signing certificate to use for signing\n                        dynamically generated https certificates. if used,\n                        must also pass --ca-key-file and --ca-signing-key-file\n  --ca-file ca_file     default: /users/abhinavsingh/dev/proxy.py/venv373/lib/\n                        python3.7/site-packages/certifi/cacert.pem. provide\n                        path to custom ca bundle for peer certificate\n                        verification\n  --ca-signing-key-file ca_signing_key_file\n                        default: none. ca signing key to use for dynamic\n                        generation of https certificates. if used, must also\n                        pass --ca-key-file and --ca-cert-file\n  --auth-plugin auth_plugin\n                        default: proxy.http.proxy.auth.authplugin. auth plugin\n                        to use instead of default basic auth plugin.\n  --cache-requests      default: false. whether to also write request packets\n                        in the cache file.\n  --cache-by-content-type\n                        default: false. whether to extract content by type\n                        from responses. extracted content type is written to\n                        the cache directory e.g. video.mp4.\n  --cache-dir cache_dir\n                        default: /users/abhinavsingh/.proxy/cache. flag only\n                        applicable when cache plugin is used with on-disk\n                        storage.\n  --proxy-pool proxy_pool\n                        list of upstream proxies to use in the pool\n  --enable-web-server   default: false. whether to enable\n                        proxy.httpwebserverplugin.\n  --enable-static-server\n                        default: false. enable inbuilt static file server.\n                        optionally, also use --static-server-dir to serve\n                        static content from custom directory. by default,\n                        static file server serves out of installed proxy.py\n                        python module folder.\n  --static-server-dir static_server_dir\n                        default: \"public\" folder in directory where proxy.py\n                        is placed. this option is only applicable when static\n                        server is also enabled. see --enable-static-server.\n  --min-compression-length min_compression_length\n                        default: 20 bytes. sets the minimum length of a\n                        response that will be compressed (gzipped).\n  --enable-reverse-proxy\n                        default: false. whether to enable reverse proxy core.\n  --pac-file pac_file   a file (proxy auto configuration) or string to serve\n                        when the server receives a direct file request. using\n                        this option enables proxy.httpwebserverplugin.\n  --pac-file-url-path pac_file_url_path\n                        default: /. web server path to serve the pac file.\n  --cloudflare-dns-mode cloudflare_dns_mode\n                        default: security. either \"security\" (for malware\n                        protection) or \"family\" (for malware and adult content\n                        protection)\n  --filtered-upstream-hosts filtered_upstream_hosts\n                        default: blocks facebook. comma separated list of ipv4\n                        and ipv6 addresses.\n  --filtered-client-ips-mode filtered_client_ips_mode\n                        default: blacklist. can be either \"whitelist\"\n                        (restrict access to specific ips)or \"blacklist\" (allow\n                        everything except specific ips).\n  --filtered-client-ips filtered_client_ips\n                        default: 127.0.0.1,::1. comma separated list of ipv4\n                        and ipv6 addresses.\n  --filtered-url-regex-config filtered_url_regex_config\n                        default: no config. comma separated list of ipv4 and\n                        ipv6 addresses.\n\nproxy.py not working? report at:\nhttps://github.com/abhinavsingh/proxy.py/issues/new\n```\n",
  "docs_url": null,
  "keywords": "http,proxy,http proxy server,proxy server,http server,http web server,proxy framework,web framework,python3",
  "license": "'bsd'",
  "name": "proxy.py",
  "package_url": "https://pypi.org/project/proxy.py/",
  "project_url": "https://pypi.org/project/proxy.py/",
  "project_urls": {
    "CI: GitHub": "https://github.com/abhinavsingh/proxy.py/actions",
    "Chat: Gitter": "https://gitter.im/proxy.py/community",
    "Container Image: DockerHub": "https://hub.docker.com/r/abhinavsingh/proxy.py",
    "Coverage: Codecov": "https://codecov.io/github/abhinavsingh/proxy.py",
    "Docs: Changelog": "https://proxypy.rtfd.io/en/latest/#changelog",
    "Docs: Intro": "https://abhinavsingh.com/proxy-py-a-lightweight-single-file-http-proxy-server-in-python/",
    "Docs: RTD": "https://proxypy.rtfd.io/en/latest/",
    "Download": "https://github.com/abhinavsingh/proxy.py/archive/master.zip",
    "GitHub: discussions": "https://github.com/abhinavsingh/proxy.py/discussions",
    "GitHub: issues": "https://github.com/abhinavsingh/proxy.py/issues",
    "GitHub: repo": "https://github.com/abhinavsingh/proxy.py",
    "Homepage": "https://github.com/abhinavsingh/proxy.py"
  },
  "release_url": "https://pypi.org/project/proxy.py/2.4.3/",
  "requires_dist": [],
  "requires_python": ">=3.6",
  "summary": "\u26a1 fast \u2022 \ud83e\udeb6 lightweight \u2022 0\ufe0f\u20e3 dependency \u2022 \ud83d\udd0c pluggable \u2022 \ud83d\ude08 tls interception \u2022 \ud83d\udd12 dns-over-https \u2022 \ud83d\udd25 poor mans vpn \u2022 \u23ea reverse & \u23e9 forward \u2022 \ud83d\udc6e\ud83c\udfff proxy server framework \u2022 \ud83c\udf10 web server framework \u2022 \u27b5 \u27b6 \u27b7 \u27a0 pubsub framework \u2022 \ud83d\udc77 work acceptor & executor framework.",
  "version": "2.4.3",
  "releases": [],
  "developers": [
    "abhinav_singh",
    "mailsforabhinav+proxy@gmail.com"
  ],
  "kwds": "proxypy proxy_py_startup_flags http_proxy proxyplugin proxydashboard",
  "license_kwds": "'bsd'",
  "libtype": "pypi",
  "id": "pypi_proxy.py",
  "homepage": "https://github.com/abhinavsingh/proxy.py",
  "release_count": 37,
  "dependency_ids": []
}
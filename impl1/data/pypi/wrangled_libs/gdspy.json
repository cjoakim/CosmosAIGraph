{
  "classifiers": [
    "development status :: 5 - production/stable",
    "environment :: console",
    "intended audience :: developers",
    "intended audience :: manufacturing",
    "intended audience :: science/research",
    "license :: osi approved :: boost software license 1.0 (bsl-1.0)",
    "operating system :: os independent",
    "programming language :: c",
    "programming language :: c++",
    "programming language :: python",
    "programming language :: python :: implementation :: cpython",
    "topic :: scientific/engineering :: electronic design automation (eda)"
  ],
  "description": "# gdspy readme\n\n[![boost software license - version 1.0](https://img.shields.io/github/license/heitzmann/gdspy.svg)](http://www.boost.org/license_1_0.txt)\n[![documentation status](https://readthedocs.org/projects/gdspy/badge/?version=stable)](https://gdspy.readthedocs.io/en/stable/?badge=stable)\n[![tests](https://github.com/heitzmann/gdspy/actions/workflows/testing.yml/badge.svg)](https://github.com/heitzmann/gdspy/actions/workflows/testing.yml)\n[![appveyor status](https://ci.appveyor.com/api/projects/status/pr49a6bhxvbqwocy?svg=true)](https://ci.appveyor.com/project/heitzmann/gdspy)\n[![downloads](https://img.shields.io/github/downloads/heitzmann/gdspy/total.svg)](https://github.com/heitzmann/gdspy/releases)\n\ngdspy is a python module for creation and manipulation of gdsii stream files.\nkey features for the creation of complex cad layouts are included:\n\n* boolean operations on polygons (and, or, not, xor) based on clipping algorithm\n* polygon offset (inward and outward rescaling of polygons)\n* efficient point-in-polygon solutions for large array sets\n\ngdspy also includes a simple layout viewer.\n\ntypical applications of gdspy are in the fields of electronic chip design, planar lightwave circuit design, and mechanical engineering.\n\n\n## future of gdspy\n\nin trying to improve the performance of gdspy for large layouts, we ended up concluding that the best way to reach our goal was to rewrite the critical parts of the library as a c extension.\nit turns out that beside obvious functions, method calling has a big impact in performance due to the overhead it introduces.\nthe best solution was to re-design the whole project as a c++ library with a thin python wrapper: thus was born [gdstk, the gdsii tool kit](https://github.com/heitzmann/gdstk).\n\ntherefore, version 1.6 will be the last major release of gdspy, with development focused only on bug fixes.\nusers are encouraged to move from gdspy to gdstk: although their api is not 100% compatible, the new module should be familiar enough to allow a quick transition.\n\n\n## installation\n\n### dependencies:\n\n* [python](https://www.python.org/) (tested with versions 2.7, 3.6, 3.7, and 3.8)\n* [numpy](http://numpy.scipy.org/)\n* c compiler (needed only if built from source)\n* tkinter (optional: needed for the `layoutviewer` gui)\n* [sphinx](https://www.sphinx-doc.org/) (optional: to build the documentation)\n\n### linux / os x\n\noption 1: using [pip](https://docs.python.org/3/installing/):\n\n```sh\npython -m pip install --user gdspy\n```\n\noption 2: download the source from [github](https://github.com/heitzmann/gdspy) and build/install with:\n\n```sh\npython setup.py install\n```\n\n### windows\n\nthe preferred option is to install pre-compiled binaries from [here](https://github.com/heitzmann/gdspy/releases).\n\ninstallation via `pip` and building from source as above are also possible, but an appropriate [build environment](https://wiki.python.org/moin/windowscompilers) is required for compilation of the c extension modules.\n\n\n## documentation\n\nthe complete documentation is available [here](http://gdspy.readthedocs.io/).\n\nthe source files can be found in the `docs` directory.\n\n\n## support\n\nhelp support gdspy development by [donating via paypal](https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&hosted_button_id=jd2eue2wppbqq) or [sponsoring me on github](https://github.com/sponsors/heitzmann)\n\n\n## history of changes\n\n### version 1.6.13 (apr 26, 2023)\n* allow ill-formed gdsii label anchors to be correctly loaded.\n\n### version 1.6.12 (jun 2, 2022)\n* fix in `cell.get_texttypes`.\n* allow labels to inherit transforms through `get_labels`.\n\n### version 1.6.11 (jan 14, 2022)\n* fix in `cell.write_svg` when missing references.\n* speed improvements in `cell.remove_polygons` (thanks troy for the contribution).\n\n### version 1.6.10 (nov 14, 2021)\n* fix in `cell.get_polygons`\n\n### version 1.6.9 (sep 23, 2021)\n* fix in `cell.get_polygons` with specified layer and datatype.\n* raise error for duplicate cells when reading a gdsii file.\n\n### version 1.6.8 (aug 2, 2021)\n* fix in `boolean` for complex geometries that freeze the operation.\n\n### version 1.6.7 (jul 14, 2021)\n* fixes in `boolean` for bugs with self-intersecting holes and holes horizontal edges.\n* fix bug in warning message.\n\n### version 1.6.6 (jun 09, 2021)\n* fix error in `path.smooth` not finding `_hobby` function.\n* allow precision specification in svg output.\n\n### version 1.6.5 (jun 08, 2021)\n* support gdsii files with 0-padding at the end.\n* allow fixing and modifying gdsii file timestamps.\n* *thanks troy tamas and joaquin matres for the fixes*\n\n### version 1.6.4 (apr 23, 2021)\n* fix missing module import (thanks troy tamas for the fix).\n\n### version 1.6.3 (dec 28, 2020)\n* fix bounding box edge case (thanks troy tamas for the fix).\n\n### version 1.6.2 (dec 18, 2020)\n* more efficient bounding box calculation (thanks to troy tamas for the contribution).\n* fix label creation bug.\n\n### version 1.6.1 (oct 22, 2020)\n* fix svg output when `label` contains special characters.\n\n### version 1.6 (aug 12, 2020)\n* added support for element properties.\n* added transformation support to `cell.copy`.\n* layer/datatype filtering in `get_polygons` for `cell`, `cellreference` and `cellarray`.\n* layer/datatype filtering in `layoutviewer`.\n* removed global cache `_bounding_boxes`.  only cells cache their bounding boxes.\n* bug fixes (thanks daniel hwang for the contributions).\n* bug fix in `cell.copy` where the whole dependency tree would be copied on a deep copy creation.\n\n### version 1.5.2 (feb 01, 2020)\n* added support for importing gdsii files containing box elements.\n* bug fix in `gdslibrary.extract` (thanks collineps for finding the problem).\n\n### version 1.5 (dec 20, 2019)\n* new `cell.write_svg` function to export an svg image of the cell.\n* new `gdslibrary.new_cell` function to quickly create and add cells to a library.\n* `gdslibrary.add` can update references when a cell is overwritten.\n* added `gdslibrary.remove` to allow cells to be properly removed from libraries.\n* added `gdslibrary.rename_cell` to rename cells in libraries.\n* added `gdslibrary.replace_references` to easily replace referenced cells in libraries.\n* `gdslibrary.add` can add dependencies recursively.\n* iterating over `gdslibrary` objects yields all its cells.\n* iterating over `cell` objects yield all its polygons, paths, labels and references.\n* breaking change to `*.to_gds` functions in order to improve write efficiency (this should not be a problem for most users, since `gdspy.write_gds` and `cell.write_gds` remain the same).\n* breaking change: renamed `gdslibrary.cell_dict` to `gdslibrary.cells`.\n* deprecated: `gdspy.current_library`, `gdspy.write_gds`, `gdspy.fast_boolen`, `gdslibrary.extract`.\n* bug fixes and better tests for `flexpath` and `robustpath`.\n\n### version 1.4.3 (nov 11, 2019)\n* bug fix for `flexpath` and `robustpath` references.\n\n### version 1.4.2 (oct 01, 2019)\n* bug fix in `flexpath`.\n\n### version 1.4.1 (sep 20, 2019)\n* bug fixes (thanks to derekk88 and sequencer for the patches).\n\n### version 1.4 (may 18, 2019)\n* revised [documentation](http://gdspy.readthedocs.io/).\n* new `flexpath` and `robustpath` classes: more efficient path generation when using the original gdsii path specification.\n* new `curve` class: svg-like polygon creation.\n* added `polygonset.mirror` (thanks to daan waardenburg for the contribution).\n* added `path.bezier` to create paths based on b\u00e9zier curves.\n* added `path.smooth` to create paths based on smooth interpolating curves.\n* added `get_gds_units` to get units used in a gdsii file without loading.\n* added `get_binary_cells` to load only the binary gdsii representation of cell from a file.\n* added argument `tolerance` to `round`, `path.arc`, `path.turn`, and `path.parametric` to automatically control the number of points in the final polygons.\n* added argument `binary_cells` to gdsii writing functions to support `get_binary_cells`.\n* added argument `rename_template` to `gdslibrary.read_gds` for flexible cell renaming (thanks to @yoshi74ls181 for the contribution).\n* changed return value of `slice` to avoid creating empty `polygonset`.\n* added argument `timestamp` to gdsii writing functions.\n* improved `round` to support creating ellipses.\n* added support for unlimited number of points per polygon.\n* added support for bgnextn and endextn when reading a gdsii file.\n* polygon creation warnings are now controlled by `poly_warnings`.\n* incorrect `anchor` in `label` now raises an error, instead of emitting a warning.\n* added correct support for radius in `polygonset.fillet` on a per-vertex basis.\n* speed improvements in gdsii file generation (thanks to @fbeutel for the contribution) and geometry creation.\n* font rendering example using [matplotlib](https://matplotlib.org/) (thanks hernan pastoriza for the contribution).\n* expanded test suite.\n\n### version 1.3.2 (mar 14, 2019)\n* small fix for building on mac os x mojave.\n\n### version 1.3.1 (jun 29, 2018)\n* `polygonset` becomes the base class for all polygons, in particular `polygon` and `rectangle`.\n* added `cell.remove_polygons` and `cell.remove_labels` functions to allow filtering a cell contents based, for example, on each element's layer.\n* added `polygonset.scale` utility method.\n* added `polygonset.get_bounding_box` utility method.\n* added argument `timestamp` to `cell.to_gds`, `gdslibrary.write_gds` and `gdswriter`.\n* added `unit` and `precision` arguments to `gdslibrary` initialization and removed from its `write_gds` method.\n* changed the meaning of argument `unit` in `gdslibrary.read_gds`.\n* improved `slice` to avoid errors when slicing in multiple positions at once.\n* improved `polygonset.fracture` to reduce number of function calls.\n* removed incorrect absolute flags for magnification and rotation in `cellreference` and `cellarray`.\n* minor bug fixes.\n* documentation fixes.\n* removed deprecated classes and functions.\n\n### version 1.2.1 (dec 5, 2017)\n* `gdslibrary` can be created directly from a gdsii file\n* added return value to `gdslibrary.read_gds`\n* fixed return value of `gdslibrary.add`\n\n### version 1.2 (oct 21, 2017)\n* added new `gdsii_hash` function.\n* added `precision` parameter to `_chop`, `polygon.fracture`, `polygon.fillet`, `polygonset.fracture`, `polygonset.fillet`, and `slice`.\n* included labels in flatten operations (added `get_labels` to `cell`, `cellreference`, and `cellarray`).\n* fixed bug in the bounding box cache of reference copies.\n* fixed bug in `_chop` that affected `polygon.fracture`, `polygonset.fracture`, and `slice`.\n* other minor bug fixes.\n\n### version 1.1.2 (mar 19, 2017)\n* update clipper library to 6.4.2 to fix bugs introduced in the last update.\n* license change to boost software license v1.0.\n\n### version 1.1.1 (jan 27, 2017)\n* patch to fix installation issue (missing readme file in zip).\n\n### version 1.1 (jan 20, 2017)\n* introduction of `gdslibrary` to allow user to work with multiple library simultaneously.\n* deprecated `gdsimport` in favor of `gdslibrary`.\n* renamed `gds_print` to `write_gds` and `gdsprint` to `gdswriter`.\n* development changed to python 3 (python 2 supported via [python-future](http://python-future.org/)).\n* added photonics example.\n* added test suite.\n* clipper library updated to last version.\n* fixed `inside` function sometimes reversing the order of the output.\n* fixed rounding error in `fast_boolean`.\n* fixed argument `deep_copy` being inverted in `cell.copy`.\n* bug fixes introduced by numpy (thanks to adam mccaughan for the contribution).\n\n### version 1.0 (sep 11, 2016)\n* changed to \"new style\" classes (thanks to adam mccaughan for the contribution).\n* added\ta per-point radius specification for `polygon.fillet` (thanks to adam mccaughan for the contribution).\n* added `inside` fucntion to perform point-in-polygon tests (thanks to @okianus for the contribution).\n* moved from distutils to setuptools for better windows support.\n\n### version 0.9 (jul 17, 2016)\n* added option to join polygons before applying an `offset`.\n* added a `translate` method to geometric entities (thanks john bell for the commit).\n* bug fixes.\n\n### version 0.8.1 (may 6, 2016)\n* new `fast_boolean` function based on the [clipper](http://www.angusj.com/delphi/clipper.php) library with much better performance than the old `boolean`.\n* changed `offset` signature to also use the [clipper](http://www.angusj.com/delphi/clipper.php) library (this change **breaks compatibility** with previous versions).\n* bug fix for error when importing some labels from gdsii files.\n\n### version 0.7.1 (june 26, 2015)\n* rebased to github.\n* changed source structure and documentation.\n\n### version 0.7 (june 12, 2015)\n* new feature: `offset` function.\n* new `gdsprint` class for incremental gdsii creation (thanks to jack sankey for the contribution).\n\n### version 0.6 (march 31, 2014)\n* default number of points for `round`, `path.arc`, and `path.turn` changed to resolution of 0.01 drawing units.\n* `path.parametric` accepts callable `final_distance` and `final_width` for non-linear tapering.\n* added argument `ends` to `polypath`.\n* added (limited) support for pathtype in `gdsimport`.\n* a warning is issued when a `path` curve has width larger than twice its radius (self-intersecting polygon).\n* added a random offset to the patterns in `layoutviewer`.\n* `layoutviewer` shows cell labels for referenced cells.\n* `get_polygons` returns (referenced) cell name if `depth` < 1 and `by_spec` is true.\n* bug fix in `get_bounding_box` when empty cells are referenced.\n* bug fixes in `gdsimport` and many speed improvements in bounding box calculations (thanks to gene hilton for the patch).\n\n### version 0.5 (october 30, 2013) - not compatible with previous versions\n* major `layoutviewer` improvements (not backwards compatible).\n* the layer argument has been repositioned in the argument list in all functions (not backwards compatible).  \n* renamed argument `by_layer` to `by_spec` (not backwards compatible).\n* error is raised for polygons with more vertices than possible in the gdsii format.\n* removed the global state variable for default datatype.\n* added `get_datatypes` to `cell`.\n* added argument `single_datatype` to `cell.flatten`.\n* removed `gds_image` and dropped the optional pil dependency.\n\n### version 0.4.1 (june 5, 2013)\n* added argument `axis_offset` to `path.segment` allowing creation of asymmetric tapers.\n* added missing argument  `x_reflection` to `label`.\n* created a global state variable to override the default datatype.\n* bug fix in `cellarray.get_bounding_box` (thanks to george mclean for the fix)\n\n### version 0.4 (october 25, 2012)\n* `cell.get_bounding_box` returns `none` for empty cells.\n* added a cache for bounding boxes for faster computation, especially for references.\n* added support for text elements with `label` class.\n* improved the emission of warnings.\n* added a tolerance parameter to `boolean`.\n* added better print descriptions to classes.\n* bug fixes in boolean involving results with multiple holes.\n\n### version 0.3.1 (may 24, 2012)\n* bug fix in the fracture method for `polygonset`.\n\n### version 0.3a (may 03, 2012)\n* bug fix in the fracture method for `polygon` and `polygonset`.\n\n### version 0.3 (april 25, 2012)\n* support for python 3.2 and 2.7\n* further improvements to the `boolean` function via caching.\n* added methods `get_bounding_box` and `get_layers` to `cell`.\n* added method `top_level` to `gdsimport`.\n* added support for importing gdsii path elements.\n* added an argument to control the verbosity of the import function.\n* layer -1 (referenced cells) sent to the bottom of the layer list by default in `layoutviewer`\n* the text and background of the layer list in `layoutviewer` now reflect the colors of the outlines and canvas backgroung.\n* changed default background color in `layoutviewer`\n* thanks to gene hilton for the contributions!\n\n### version 0.2.9 (december 14, 2011)\n* attribute `cell.cell_list` changed to `cell.cell_dict`.\n* changed the signature of the operation in `boolean`.\n* order of cells passed to `layoutviewer` is now respected in the gui.\n* complete re-implementation of the boolean function as a c extension for improved performance.\n* removed precision argument in `boolean`. it is fixed at 1e-13 for merging close points, otherwise machine precision is used.\n* `gds_image` now accepts cell names as input.\n* added optional argument `depth` to `get_polygons`\n* added option to convert layers and datatypes in imported gdsii cells.\n* argument `exclude_layers` from `layoutviewer` changed to `hidden_layers` and behavior changed accordingly. \n* shift + right-clicking on a layer the layer-list of `layoutviewer` hides/unhides all other layers.\n* new buttons to zoom in and out in `layoutviewer`.\n* referenced cells below a configurable depth are now represented by theirs bounding boxes in `layoutviewer`.\n\n### version 0.2.8 (june 21, 2011)\n* gdsii file import\n* gdsii output automatically include required referenced cells.\n* `gds_print` also accepts file name as input.\n* outlines are visible by default in `layoutviewer`.\n* added background color option in `layoutviewer`.\n* right-clicking on the layer list hides/unhides the target layer in `layoutviewer`.\n* `cell.cell_list` is now a dictionary indexed by name, instead of a list.\n* added option to exclude created cells from the global list of cells kept in `cell.cell_list`.\n* `cellreference` and `cellarray` accept name of cells as input.\n* submodules lost their own `__version__`.\n\n### version 0.2.7 (april 2, 2011)\n* bug fixed in the `boolean`, which affected the way polygons with more vertices then the maximum were fractured.\n* `gds_image` accepts an extra color argument for the image background.\n* screenshots takes from `layoutviewer` have the same background color as the viewer.\n* the functions `boolean` and `slice` now also accept `cellreference` and `cellarray` as input.\n* added the method `fracture` to `polygon` and `polygonset` to automatically slice polygons into parts with a predefined maximal number of vertices.\n* added the method `fillet` to `polygon` and `polygonset` to round corners of polygons.\n\n### version 0.2.6 (february 28, 2011)\n* when saving a gdsii file, `valueerror` is raised if cell names are duplicated.\n* save screenshot from `layoutviewer`.\n* `gds_image` accepts cells, instead of lists.\n* outlines supported by `gds_image`.\n* `layoutviewer` stores bounding box information for all visited layers to save rendering time.\n\n### version 0.2.5 (december 10, 2010)\n* empty cells no longer break the layoutviewer.\n* removed the `gds_view` function, superseded by the layoutviewer, along with all dependencies to matplotlib.\n* fixed a bug in `boolean` which affected polygons with series of collinear vertices.\n* added a function to `slice` polygons along straight lines parallel to an axis.\n\n### version 0.2.4 (september 04, 2010)\n* added shortcut to extents in layoutviewer: `home` or `a` keys.\n* `polygonset` is the new base class for `round`, which might bring some incompatibility issues with older scripts.\n* `round` elements, `polypath`, `l1path`, and `path arc`, `turn` and `parametric` sections are now automatically fractured into pieces defined by a maximal number of points.\n* default value for `max_points` in boolean changed to 199.\n* removed the flag to disable the warning about polygons with more than 199 vertices.  the warning is shown only for `polygon` and `polygonset`.\n* fixed a bug impeding parallel `parametric` paths to change their distance to each other.\n\n### version 0.2.3 (august 09, 2010)\n* added the `polypath` class to easily create paths with sharp corners.\n* allow `none` as item in the colors parameter of `layoutviewer` to make layers invisible.\n* added color outline mode to `layoutviewer` (change outline color with the shift key pressed)\n* increased the scroll region of the `layoutviewer` canvas\n* added a fast scroll mode: control + drag 2nd mouse button\n* created a new sample script\n\n### version 0.2.2 (july 29, 2010)\n* changed the cursor inside `layoutviewer` to standard arrow.\n* fixed bugs with the windows version of `layoutviewer` (mouse wheel and ruler tool).\n\n### version 0.2.1 (july 29, 2010)\n* bug fix: `gds_image` displays an error message instead of crashing when `pil` is not found.\n* added class `layoutviewer`, which uses tkinter (included in all python distributions) to display the gdsii layout with better controls then the `gds_view` function. this eliminates the `matplotlib` requirement for the viewer functionality.\n* new layer colors extending layers 0 to 63.\n\n### version 0.2.0 (july 19, 2010)\n* fixed a bug on the `turn` method of `path`.\n* fixed a bug on the `boolean` function that would give an error when not using `polygon` or `polygonset` as input objects.\n* added the method `get_polygons` to `cell`, `cellreference` and `cellarray`.\n* added a copy method to `cell`.\n* added a `flatten` method to `cell` to remove references (or array references) to other cells.\n* fracture `boolean` output polygons based on the number of vertices to respect the 199 gdsii limit.  \n\n### version 0.1.9 (june 04, 2010)\n* added `l1path` class for manhattan geometry (l1 norm) paths.\n\n### version 0.1.8 (may 10, 2010)\n* removed the argument `fill` from `gds_view` and added a more flexible one: `style`.\n* fixed a rounding error on the `boolean` operator affecting polygons with holes.\n* added a rotate method to `polygonset`.\n* added a warning when `polygonset` has more than 199 points\n* added a flag to disable the warning about polygons with more than 199 points.\n* added a `turn` method to `path`, which is easier to use than `arc`.\n* added a direction attribute to `path` to keep the information used by the `segment` and `turn` methods.\n\n### version 0.1.7 (april 12, 2010)\n* new visualization option: save the geometry directly to an image file (lower memory use).\n* new functionality added: boolean operations on polygons (polygon clipping).\n* all classes were adapted to work with the boolean operations.\n* the attribute size in the initializer of class `text` does not have a default value any longer.\n* the name of the argument `format` in the function `gds_view` was changed to `fill` (to avoid confusion with the built-in function `format`).\n\n### version 0.1.6 (december 15,  2009)\n* sample script now include comments and creates an easier to understand gdsii example.\n* improved floating point to integer rounding, which fixes the unit errors at the last digit of the precision in the gdsii file.\n* fixed the font for character 5.\n* added a flag to `gds_view` to avoid the automatic call to `matplotlib.pyplot.show()`.\n* in `gds_view`, if a layer number is greater than the number of formats defined, the formats are cycled.\n\n### version 0.1.5a (november 15, 2009)\n* class text correctly interprets `\\n` and `\\t` characters.\n* better documentation format, using the sphinx engine and the numpy format.\n\n### version 0.1.4 (october 5, 2009)\n* class `text` re-written with a different font with no overlaps and correct size.\n\n### version 0.1.3a (july 29 2009)\n* fixed the function `to_gds` of class `rectangle`.\n\n### version 0.1.3 (july 27, 2009)\n* added the datatype field to all elements of the gdsii structure.\n\n### version 0.1.2 (july 11, 2009)\n* added the `gds_view` function to display the gdsii structure using the matplotlib module.\n* fixed a rotation bug in the cellarray class.\n* module published under the gnu general public license (gpl)\n\n### version 0.1.1 (may 12, 2009)\n* added attribute `cell_list` to class cell to hold a list of all cell created.\n* set the default argument `cells=cell.cell_list` in the function `gds_print`.\n* added member to calculate the area for each element type.\n* added member to calculate the total area of a cell or the area by layer.\n* included the possibility of creating objects in user-defined units, not only nanometers.\n\n### version 0.1.0 (may 1, 2009)\n* initial release.\n",
  "docs_url": null,
  "keywords": "gdsii cad layout",
  "license": "boost software license v1.0",
  "name": "gdspy",
  "package_url": "https://pypi.org/project/gdspy/",
  "project_url": "https://pypi.org/project/gdspy/",
  "project_urls": {
    "Homepage": "https://github.com/heitzmann/gdspy"
  },
  "release_url": "https://pypi.org/project/gdspy/1.6.13/",
  "requires_dist": [],
  "requires_python": "",
  "summary": "python module for creating/importing/merging gdsii files.",
  "version": "1.6.13",
  "releases": [],
  "developers": [
    "heitzmann@gmail.com",
    "lucas_heitzmann_gabrielli"
  ],
  "kwds": "gdspy gdsimport gdsprint write_gds read_gds",
  "license_kwds": "boost software license v1.0",
  "libtype": "pypi",
  "id": "pypi_gdspy",
  "homepage": "https://github.com/heitzmann/gdspy",
  "release_count": 41,
  "dependency_ids": []
}
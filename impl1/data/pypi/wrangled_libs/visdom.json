{
  "classifiers": [],
  "description": "a tool for visualizing live, rich data for torch and numpy\n\n\n<h3 align=\"center\">\n    <br/>\n    <img src=\"https://user-images.githubusercontent.com/19650074/198746195-574bb828-026f-41cb-82a9-250fcbc4e090.png\" width=\"300\" alt=\"logo\"/><br/><br/>\n    creating, organizing & sharing visualizations of live, rich data. supports <a href=\"https://pypi.org/project/visdom/\">python</a>.\n</h3>\n\n\n<p align=\"center\"> jump to: <a href=\"#setup\">setup</a>, <a href=\"#usage\">usage</a>, <a href=\"#api\">api</a>, <a href=\"#customizing-visdom\">customizing</a>, <a href=\"#contributing\">contributing</a>, <a href=\"#license\">license</a>\n</p>\n\n\n<p align=\"center\">\n    <a href=\"https://github.com/fossasia/visdom/releases\"><img src=\"https://img.shields.io/github/v/release/fossasia/visdom?colora=363a4f&colorb=a6da95&style=for-the-badge\"/></a>\n    <a href=\"https://pypi.org/project/visdom\"><img src=\"https://img.shields.io/pypi/dd/visdom?colora=363a4f&colorb=156df1&style=for-the-badge\"></a>\n    <a href=\"https://github.com/fossasia/visdom/commits\"><img src=\"https://img.shields.io/github/commit-activity/m/fossasia/visdom?colora=363a4f&colorb=0099ff&style=for-the-badge\"/></a>\n    <a href=\"https://github.com/fossasia/visdom/contributors\"><img src=\"https://img.shields.io/github/contributors/fossasia/visdom?colora=363a4f&colorb=60b9f4&style=for-the-badge\"/></a>\n</p>\n\n\n<p align=\"center\">\nvisdom aims to facilitate visualization of (remote) data with an emphasis on supporting scientific experimentation.<br/>\nbroadcast visualizations of plots, images, and text for yourself and your collaborators.\norganize your visualization space programmatically or through the ui to create dashboards for live data, inspect results of experiments, or debug experimental code.\n</p>\n\n<p align=\"center\">\n  <img src=\"https://user-images.githubusercontent.com/19650074/198747904-7a8a580f-851a-45fb-8f45-94e54a910ee2.png\"/>\n</p>\n<p align=\"center\">\n  <img width=\"49.5%\" src=\"https://user-images.githubusercontent.com/19650074/198748177-c973f387-c392-4f6e-9e3d-27dfe578eb59.gif\"/>\n  <img width=\"49.5%\" src=\"https://user-images.githubusercontent.com/19650074/198748189-917091b6-95c4-4415-b965-ba3e7e81e1f8.png\"/>\n</p>\n\n## concepts\nvisdom has a simple set of features that can be composed for various use-cases.\n\n<details>\n<summary><b>windows</b></summary>\n<p align=\"center\">\n<img width=500 align=\"center\" src=\"https://user-images.githubusercontent.com/19650074/198821065-6666cb22-d34a-4839-ae19-f6f6a4a1bae4.png\"/>\n</p>\n\nthe ui begins as a blank slate \u2013 you can populate it with plots, images, and text. these appear in windows that you can drag, drop, resize, and destroy. the windows live in `envs` and the state of `envs` is stored across sessions. you can download the content of windows \u2013 including your plots in `svg`.\n\n> **tip**: you can use the zoom of your browser to adjust the scale of the ui.\n</details>\n<details>\n<summary><b>callbacks</b></summary>\n\nthe python visdom implementation supports callbacks on a window. the demo shows an example of this in the form of an editable text pad. the functionality of these callbacks allows the visdom object to receive and react to events that happen in the frontend.\n\nyou can subscribe a window to events by adding a function to the event handlers dict for the window id you want to subscribe by calling `viz.register_event_handler(handler, win_id)` with your handler and the window id. multiple handlers can be registered to the same window. you can remove all event handlers from a window using `viz.clear_event_handlers(win_id)`. when an event occurs to that window, your callbacks will be called on a dict containing:\n\n - `event_type`: one of the below event types\n - `pane_data`: all of the stored contents for that window including layout and content.\n - `eid`: the current environment id\n - `target`: the window id the event is called on\n\nadditional parameters are defined below.\n\nright now the following callback events are supported:\n\n1. `close` - triggers when a window is closed. returns a dict with only the aforementioned fields.\n2. `keypress` - triggers when a key is pressed. contains additional parameters:\n    - `key` - a string representation of the key pressed (applying state modifiers such as shift)\n    - `key_code` - the javascript event keycode for the pressed key (no modifiers)\n3. `propertyupdate` - triggers when a property is updated in property pane\n    - `propertyid` - position in properties list\n    - `value` - new property value\n4. `click` - triggers when image pane is clicked on, has a parameter:\n    - `image_coord` - dictionary with the fields `x` and `y` for the click coordinates in the coordinate frame of the possibly zoomed/panned image (*not* the enclosing pane).\n\n</details>\n\n<details>\n<summary><b>editable plot parameters</b></summary>\nuse the top-right *edit*-button to inspect all parameters used for plot in the respective window.  \nthe visdom client supports dynamic change of plot parameters as well. just change one of the listed parameters, the plot will be altered on-the-fly.  \nclick the button again to close the property list.\n<p align=\"center\"><img align=\"center\" src=\"https://user-images.githubusercontent.com/19650074/156751970-0915757d-8bf0-4a6d-a510-1d34a918e47a.gif\" width=\"400\" /></p>\n</details>\n\n\n<details>\n<summary><b>environments</b></summary>\n<p align=\"center\"><img align=\"center\" src=\"https://user-images.githubusercontent.com/19650074/198821281-ea1cea1a-66c3-495e-be52-cd0f1a3300f7.png\" width=\"300\" /></p>\n\nyou can partition your visualization space with `envs`. by default, every user will have an env called `main`. new envs can be created in the ui or programmatically. the state of envs is chronically saved. environments are able to keep entirely different pools of plots.\n\nyou can access a specific env via url: `http://localhost.com:8097/env/main`. if your server is hosted, you can share this url so others can see your visualizations too.\n\nenvironments are automatically hierarchically organized by the first `_`.\n\n#### selecting environments\n<p align=\"center\"><img align=\"center\" src=\"https://user-images.githubusercontent.com/19650074/198821299-6602d557-7a02-4b9f-b1d5-d57615cdc15c.png\" width=\"300\" /></p>\n\nfrom the main page it is possible to toggle between different environments using the environment selector. selecting a new environment will query the server for the plots that exist in that environment. the environment selector allows for searching and filtering for the new enironment.\n\n#### comparing environments\n\nfrom the main page it is possible to compare different environments using the environment selector. selecting multiple environments in the check box will query the server for the plots with the same titles in all environments and plot them in a single plot. an additional compare legend pane is created with a number corresponding to each selected environment. individual plots are updated with legends corresponding to \"x_name\" where `x` is a number corresponding with the compare legend pane and `name` is the original name in the legend.\n\n> **note**: the compare envs view is not robust to high throughput data, as the server is responsible for generating the compared content. do not compare an environment that is receiving a high quantity of updates on any plot, as every update will request regenerating the comparison. if you need to compare two plots that are receiving high quantities of data, have them share the same window on a singular env.\n\n#### clearing environments\nyou can use the eraser button to remove all of the current contents of an environment. this closes the plot windows for that environment but keeps the empty environment for new plots.\n\n#### managing environments\n<p align=\"center\"><img align=\"center\" src=\"https://user-images.githubusercontent.com/19650074/198821309-4c6449fd-978a-462a-aa35-e59d872b61bd.png\" width=\"400\" /></p>\n\npressing the folder icon opens a dialog that allows you to fork or force save the current environment, or delete any of your existing environments. use of this feature is fully described in the **state** section.\n\n>**env files:**\n>your envs are loaded upon request by the user, by default from `$home/.visdom/`. custom paths can be passed as a cmd-line argument. envs are removed by using the delete button or by deleting the corresponding `.json` file from the env dir. in case you want the server to pre-load all files into cache, use the flag `-eager_data_loading`.\n\n</details>\n\n\n<details>\n<summary><b>state</b></summary>\n\nonce you've created a few visualizations, state is maintained. the server automatically caches your visualizations -- if you reload the page, your visualizations reappear.\n\n<p align=\"center\"><img align=\"center\" src=\"https://user-images.githubusercontent.com/19650074/198821344-cb8c424e-455c-4249-b3b4-5554309a5ec7.gif\" width=\"400\" /></p>\n\n\n* **save:** you can manually do so with the `save` button. this will serialize the env's state (to disk, in json), including window positions. you can save an `env` programmatically.\n<br/>this is helpful for more sophisticated visualizations in which configuration is meaningful, e.g. a data-rich demo, a model training dashboard, or systematic experimentation. this also makes them easy to share and reuse.\n\n* **fork:** if you enter a new env name, saving will create a new env -- effectively **forking** the previous env.\n\n> **tip**: fork an environment before you begin to make edits to ensure that your changes are saved seperately.\n\n### filter\nyou can use the `filter` to dynamically sift through windows present in an env -- just provide a regular expression with which to match titles of window you want to show. this can be helpful in use cases involving an env with many windows e.g. when systematically checking experimental results.\n\n<p align=\"center\"><img align=\"center\" src=\"https://user-images.githubusercontent.com/19650074/198821379-eeebd8a2-bcab-407a-b47f-9b2d0290c23e.png\" width=\"300\" /></p>\n\n> **note**: if you have saved your current view, the view will be restored after clearing the filter.\n> <p align=\"center\"><img align=\"center\" src=\"https://user-images.githubusercontent.com/19650074/198821402-4702611e-1038-4093-8cd5-9c8120444211.gif\" width=\"500\" /></p>\n\n### views\n<p align=\"center\"><img align=\"center\" src=\"https://user-images.githubusercontent.com/19650074/198821420-458c863b-c304-4d10-8906-0cc2f0c20241.png\" width=\"300\" /></p>\n\nit is possible to manage the views simply by dragging the tops of windows around, however additional features exist to keep views organized and save common views. view management can be useful for saving and switching between multiple common organizations of your windows.\n\n#### saving/deleting views\nusing the folder icon, a dialog window opens where views can be forked in the same way that envs can be. saving a view will retain the position and sizes of all of the windows in a given environment. views are saved in `$home/.visdom/view/layouts.json` in the visdom filepath.\n\n> **note**: saved views are static, and editing a saved view copies that view over to the `current` view where editing can occur.\n\n#### re-packing\nusing the repack icon (9 boxes), visdom will attempt to pack your windows in a way that they best fit while retaining row/column ordering.\n\n> **note**: due to the reliance on row/column ordering and `reactgridlayout` the final layout might be slightly different than what might be expected. we're working on improving that experience or providing alternatives that give more fine-tuned control.\n\n#### reloading views\n<p align=\"center\"><img align=\"center\" src=\"https://user-images.githubusercontent.com/19650074/198821436-6c7957b5-dd67-4afc-9fc3-4bf074137022.gif\" width=\"600\" /></p>\n\nusing the view dropdown it is possible to select previously saved views, restoring the locations and sizes of all of the windows within the current environment to the places they were when that view was saved last.\n</details>\n\n\n\n\n\n## setup\npython and web clients come bundled with the python server.\n\ninstall from pip\n```bash\n> pip install visdom\n```\n\ninstall from source\n```bash\n> pip install git+https://github.com/fossasia/visdom\n```\n\n## usage\n\nstart the server (probably in a  `screen` or `tmux`) from the command line:\n\n```bash\n> visdom\n```\n\nvisdom now can be accessed by going to `http://localhost:8097` in your browser, or your own host address if specified.\n\n> the `visdom` command is equivalent to running `python -m visdom.server`.\n\n>if the above does not work, try using an ssh tunnel to your server by adding the following line to your local  `~/.ssh/config`:\n```localforward 127.0.0.1:8097 127.0.0.1:8097```.\n\n#### command line options\n\nthe following options can be provided to the server:\n\n1. `-port` : the port to run the server on.\n2. `-hostname` : the hostname to run the server on.\n3. `-base_url` : the base server url (default = /).\n4. `-env_path` : the path to the serialized session to reload.\n5. `-logging_level` : logging level (default = info). accepts both standard text and numeric logging values.\n6. `-readonly` : flag to start server in readonly mode.\n7. `-enable_login` : flag to setup authentication for the sever, requiring a username and password to login.\n8. `-force_new_cookie` : flag to reset the secure cookie used by the server, invalidating current login cookies.\nrequires `-enable_login`.\n9. `-bind_local` : flag to make the server accessible only from localhost.\n10. `-eager_data_loading` : by default visdom loads environments lazily upon user request. setting this flag lets visdom pre-fetch all environments upon startup.\n\nwhen `-enable_login` flag is provided, the server asks user to input credentials using terminal prompt. alternatively,\nyou can setup `visdom_use_env_credentials` env variable, and then provide your username and password via\n`visdom_username` and `visdom_password` env variables without manually interacting with the terminal. this setup\nis useful in case if you would like to launch `visdom` server from bash script, or from jupyter notebook.\n```bash\nvisdom_username=username\nvisdom_password=password\nvisdom_use_env_credentials=1 visdom -enable_login\n```\nyou can also use `visdom_cookie` variable to provide cookies value if the cookie file wasn't generated, or the\nflag `-force_new_cookie` was set.\n\n#### python example\n```python\nimport visdom\nimport numpy as np\nvis = visdom.visdom()\nvis.text('hello, world!')\nvis.image(np.ones((3, 10, 10)))\n```\n\n### demos\nif you have cloned this repository, you can run our demo showcase.\n```bash\npython example/demo.py\n```\n\n\n## api\nfor a quick introduction into the capabilities of `visdom`, have a look at the `example` directory, or read the details below.\n\n### visdom arguments (python only)\nthe python visdom client takes a few options:\n- `server`: the hostname of your visdom server (default: `'http://localhost'`)\n- `port`: the port for your visdom server (default: `8097`)\n- `base_url`: the base visdom server url (default: `/`)\n- `env`: default environment to plot to when no `env` is provided (default: `main`)\n- `raise_exceptions`: raise exceptions upon failure rather than printing them (default: `true` (soon))\n- `log_to_filename`: if not none, log all plotting and updating events to the given file (append mode) so that they can be replayed later using `replay_log` (default: `none`)\n- `use_incoming_socket`: enable use of the socket for receiving events from the web client, allowing user to register callbacks (default: `true`)\n- `http_proxy_host`: deprecated. use proxies argument for complete proxy support.\n- `http_proxy_port`: deprecated. use proxies argument for complete proxy support.\n- `username`: username to use for authentication, if server started with `-enable_login` (default: `none`)\n- `password`: password to use for authentication, if server started with `-enable_login` (default: `none`)\n- `proxies`: dictionary mapping protocol to the url of the proxy (e.g. {`http`: `foo.bar:3128`}) to be used on each request. (default: `none`)\n- `offline`: flag to run visdom in offline mode, where all requests are logged to file rather than to the server. requires `log_to_filename` is set. in offline mode, all visdom commands that don't create or update plots will simply return `true`. (default: `false`)\n\nother options are either currently unused (endpoint, ipv6) or used for internal functionality.\n\n### basics\nvisdom offers the following basic visualization functions:\n- [`vis.image`](#visimage)    : image\n- [`vis.images`](#visimages)   : list of images\n- [`vis.text`](#vistext)     : arbitrary html\n- [`vis.properties`](#visproperties)     : properties grid\n- [`vis.audio`](#visaudio)    : audio\n- [`vis.video`](#visvideo)    : videos\n- [`vis.svg`](#vissvg)      : svg object\n- [`vis.matplot`](#vismatplot)  : matplotlib plot\n- [`vis.save`](#vissave)     : serialize state server-side\n\n### plotting\nwe have wrapped several common plot types to make creating basic visualizations easily. these visualizations are powered by [plotly](https://plot.ly/).\n\nthe following api is currently supported:\n- [`vis.scatter`](#visscatter)  : 2d or 3d scatter plots\n- [`vis.line`](#visline)     : line plots\n- [`vis.stem`](#visstem)     : stem plots\n- [`vis.heatmap`](#visheatmap)  : heatmap plots\n- [`vis.bar`](#visbar)  : bar graphs\n- [`vis.histogram`](#vishistogram) : histograms\n- [`vis.boxplot`](#visboxplot)  : boxplots\n- [`vis.surf`](#vissurf)     : surface plots\n- [`vis.contour`](#viscontour)  : contour plots\n- [`vis.quiver`](#visquiver)   : quiver plots\n- [`vis.mesh`](#vismesh)     : mesh plots\n- [`vis.dual_axis_lines`](#visdual_axis_lines)     : double y axis line plots\n\n### generic plots\nnote that the server api adheres to the plotly convention of `data` and `layout` objects, such that you can produce your own arbitrary `plotly` visualizations:\n\n```python\nimport visdom\nvis = visdom.visdom()\n\ntrace = dict(x=[1, 2, 3], y=[4, 5, 6], mode=\"markers+lines\", type='custom',\n             marker={'color': 'red', 'symbol': 104, 'size': \"10\"},\n             text=[\"one\", \"two\", \"three\"], name='1st trace')\nlayout = dict(title=\"first plot\", xaxis={'title': 'x1'}, yaxis={'title': 'x2'})\n\nvis._send({'data': [trace], 'layout': layout, 'win': 'mywin'})\n```\n\n### others\n- [`vis.close`](#visclose)    : close a window by id\n- [`vis.delete_env`](#visdelete_env) : delete an environment by env_id\n- [`vis.win_exists`](#viswin_exists) : check if a window already exists by id\n- [`vis.get_env_list`](#visget_env_list) : get a list of all of the environments on your server\n- [`vis.win_hash`](#viswin_hash): get md5 hash of window's contents\n- [`vis.get_window_data`](#visget_window_data): get current data for a window\n- [`vis.check_connection`](#vischeck_connection): check if the server is connected\n- [`vis.replay_log`](#visreplay_log): replay the actions from the provided log file\n\n\n## details\n<img src=\"https://user-images.githubusercontent.com/19650074/198747904-7a8a580f-851a-45fb-8f45-94e54a910ee2.png\"/>\n\n### basics\n\n#### vis.image\nthis function draws an `img`. it takes as input an `cxhxw` tensor `img`\nthat contains the image.\n\nthe following `opts` are supported:\n\n- `jpgquality`: jpg quality (`number` 0-100). if defined image will be saved as jpg to reduce file size. if not defined image will be saved as png.\n- `caption`: caption for the image\n- `store_history`: keep all images stored to the same window and attach a slider to the bottom that will let you select the image to view. you must always provide this opt when sending new images to an image with history.\n\n> **note** you can use alt on an image pane to view the x/y coordinates of the cursor. you can also ctrl-scroll to zoom, alt scroll to pan vertically, and alt-shift scroll to pan horizontally. double click inside the pane to restore the image to default.\n\n\n#### vis.images\n\nthis function draws a list of `images`. it takes an input `b x c x h x w` tensor or a `list of images` all of the same size. it makes a grid of images of size (b / nrow, nrow).\n\nthe following arguments and `opts` are supported:\n\n- `nrow`: number of images in a row\n- `padding`: padding around the image, equal padding around all 4 sides\n- `opts.jpgquality`: jpg quality (`number` 0-100). if defined image will be saved as jpg to reduce file size. if not defined image will be saved as png.\n- `opts.caption`: caption for the image\n\n#### vis.text\nthis function prints text in a  box. you can use this to embed arbitrary html.\nit takes as input a `text` string.\nno specific `opts` are currently supported.\n\n#### vis.properties\nthis function shows editable properties in a pane. properties are expected to be a list of dicts e.g.:\n```\n    properties = [\n        {'type': 'text', 'name': 'text input', 'value': 'initial'},\n        {'type': 'number', 'name': 'number input', 'value': '12'},\n        {'type': 'button', 'name': 'button', 'value': 'start'},\n        {'type': 'checkbox', 'name': 'checkbox', 'value': true},\n        {'type': 'select', 'name': 'select', 'value': 1, 'values': ['red', 'green', 'blue']},\n    ]\n```\nsupported types:\n - text: string\n - number: decimal number\n - button: button labeled with \"value\"\n - checkbox: boolean value rendered as a checkbox\n - select: multiple values select box\n    - `value`: id of selected value (zero based)\n    - `values`: list of possible values\n\ncallback are called on property value update:\n - `event_type`: `\"propertyupdate\"`\n - `propertyid`: position in the `properties` list\n - `value`: new value\n\nno specific `opts` are currently supported.\n\n#### vis.audio\nthis function plays audio. it takes as input the filename of the audio\nfile or an `n` tensor containing the waveform (use an `nx2` matrix for stereo\naudio). the function does not support any plot-specific `opts`.\n\nthe following `opts` are supported:\n\n- `opts.sample_frequency`: sample frequency (`integer` > 0; default = 44100)\n\nknown issue: visdom uses scipy to convert tensor inputs to wave files. some\nversions of chrome are known not to play these wave files (firefox and safari work fine).\n\n#### vis.video\nthis function plays a video. it takes as input the filename of the video\n`videofile` or a `lxhxwxc`-sized\n`tensor` containing all the frames of the video as input. the\nfunction does not support any plot-specific `opts`.\n\nthe following `opts` are supported:\n\n- `opts.fps`: fps for the video (`integer` > 0; default = 25)\n\nnote: using `tensor` input requires that ffmpeg is installed and working.\nyour ability to play video may depend on the browser you use: your browser has\nto support the theano codec in an ogg container (chrome supports this).\n\n#### vis.svg\nthis function draws an svg object. it takes as input a svg string `svgstr` or\nthe name of an svg file `svgfile`. the function does not support any specific\n`opts`.\n\n#### vis.matplot\nthis function draws a matplotlib `plot`. the function supports\none plot-specific option: `resizable`.\n\n> **note** when set to `true` the plot is resized with the\npane. you need `beautifulsoup4` and `lxml`\npackages installed to use this option.\n\n> **note**: `matplot` is not rendered using the same backend as plotly plots, and is somewhat less efficient. using too many matplot windows may degrade visdom performance.\n\n#### vis.plotlyplot\n\nthis function draws a plotly `figure` object. it does not explicitly take options as it assumes you have already explicitly configured the figure's `layout`.\n\n> **note** you must have the `plotly` python package installed to use this function. it can typically be installed by running `pip install plotly`.\n\n#### vis.embeddings\n\nthis function visualizes a collection of features using the [barnes-hut t-sne algorithm](https://github.com/lvdmaaten/bhtsne).\n\nthe function accepts the following arguments:\n- `features`: a list of tensors\n- `labels`: a list of corresponding labels for the tensors provided for `features`\n- `data_getter=fn`: (optional) a function that takes as a parameter an index into the features array and returns a summary representation of the tensor. if this is set, `data_type` must also be set.\n- `data_type=str`: (optional) currently the only acceptable value here is `\"html\"`\n\nwe currently assume that there are no more than 10 unique labels, in the future we hope to provide a colormap in opts for other cases.\n\nfrom the ui you can also draw a lasso around a subset of features. this will rerun the t-sne visualization on the selected subset.\n\n#### vis.save\nthis function saves the `envs` that are alive on the visdom server. it takes input a list of env ids to be saved.\n\n### plotting\nfurther details on the wrapped plotting functions are given below.\n\nthe exact inputs into the plotting functions vary, although most of them take as input a tensor `x` than contains the data and an (optional) tensor `y` that contains optional data variables (such as labels or timestamps). all plotting functions take as input an optional `win` that can be used to plot into a specific window; each plotting function also returns the `win` of the window it plotted in. one can also specify the `env`  to which the visualization should be added.\n\n#### vis.scatter\n\nthis function draws a 2d or 3d scatter plot. it takes as input an `nx2` or\n`nx3` tensor `x` that specifies the locations of the `n` points in the\nscatter plot. an optional `n` tensor `y` containing discrete labels that\nrange between `1` and `k` can be specified as well -- the labels will be\nreflected in the colors of the markers.\n\n`update` can be used to efficiently update the data of an existing plot. use `'append'` to append data, `'replace'` to use new data, or `'remove'` to remove the trace specified by `name`.\nusing `update='append'` will create a plot if it doesn't exist and append to the existing plot otherwise.\nif updating a single trace, use `name` to specify the name of the trace to be updated. update data that is all nan is ignored (can be used for masking update).\n\n\nthe following `opts` are supported:\n\n- `opts.markersymbol`     : marker symbol (`string`; default = `'dot'`)\n- `opts.markersize`       : marker size (`number`; default = `'10'`)\n- `opts.markercolor`      : color per marker. (`torch.*tensor`; default = `nil`)\n- `opts.markerborderwidth`: marker border line width (`float`; default = 0.5)\n- `opts.legend`           : `table` containing legend names\n- `opts.textlabels`       : text label for each point (`list`: default = `none`)\n- `opts.layoutopts`       : dict of any additional options that the graph backend accepts for a layout. for example `layoutopts = {'plotly': {'legend': {'x':0, 'y':0}}}`.\n- `opts.traceopts`        : dict mapping trace names or indices to dicts of additional options that the graph backend accepts. for example `traceopts = {'plotly': {'mytrace': {'mode': 'markers'}}}`.\n- `opts.webgl`            : use webgl for plotting (`boolean`; default = `false`). it is faster if a plot contains too many points. use sparingly as browsers won't allow more than a couple of webgl contexts on a single page.\n\n`opts.markercolor` is a tensor with integer values. the tensor can be of size `n` or `n x 3` or `k` or `k x 3`.\n\n- tensor of size `n`: single intensity value per data point. 0 = black, 255 = red\n- tensor of size `n x 3`: red, green and blue intensities per data point. 0,0,0 = black, 255,255,255 = white\n- tensor of size `k` and `k x 3`: instead of having a unique color per data point, the same color is shared for all points of a particular label.\n\n#### vis.sunburst\nthis function draws a sunburst chart. it takes two inputs: `parents` and `labels` array.\nvalues from `parents` array is used as parents object, like it define above which sector \nshould the this sector shown. values from `labels` array is used to define sector's label \nor you can say name. keep in mind that lenght of array `parents` and `labels` should be \nequal. there is a third array that you can pass to which is `value`, it is use to show \na value on hovering over a sector, it is optional argument, but if you are passing it then\nkeep in mind lenght of `values` should be equal to `parents` or `labels`.\n\nfollowing `opts` are currently supported:\n- `opts.font_size`    : define font size of label (`int`)\n- `opts.font_color`    : define font color of label (`string`)\n- `opts.opacity`    : define opacity of chart (`float`)\n- `opts.line_width`    : define distance between two sectors and sector to its parents (`int`)\n\n\n#### vis.line\nthis function draws a line plot. it takes as input an `n` or `nxm` tensor\n`y` that specifies the values of the `m` lines (that connect `n` points)\nto plot. it also takes an optional `x` tensor that specifies the\ncorresponding x-axis values; `x` can be an `n` tensor (in which case all\nlines will share the same x-axis values) or have the same size as `y`.\n\n`update` can be used to efficiently update the data of an existing plot. use 'append' to append data, 'replace' to use new data, or 'remove' to remove the trace specified by `name`. if updating a single trace, use `name` to specify the name of the trace to be updated. update data that is all nan is ignored (can be used for masking update).\n\n**smoothing**: line plots can be smoothened using [savitzky-golay filtering](https://en.wikipedia.org/wiki/savitzky%e2%80%93golay_filter). this feature can be enabled by clicking the `~`-symbol in the top right corner of a window that contains a line plot.\n\n![demo of interactive smoothing.](https://user-images.githubusercontent.com/19650074/159366736-1f5d8099-0ea5-4a3b-af17-49d3e24cb32c.gif)\n\nthe following `opts` are supported:\n\n- `opts.fillarea`    : fill area below line (`boolean`)\n- `opts.markers`     : show markers (`boolean`; default = `false`)\n- `opts.markersymbol`: marker symbol (`string`; default = `'dot'`)\n- `opts.markersize`  : marker size (`number`; default = `'10'`)\n- `opts.linecolor`   : line colors (`np.array`; default = none)\n- `opts.dash`        : line dash type for each line (`np.array`; default = 'solid'), one of `solid`, `dash`, `dashdot` or `dash`, size should match number of lines being drawn\n- `opts.legend`      : `table` containing legend names\n- `opts.layoutopts`  : `dict` of any additional options that the graph backend accepts for a layout. for example `layoutopts = {'plotly': {'legend': {'x':0, 'y':0}}}`.\n- `opts.traceopts`   : `dict` mapping trace names or indices to `dict`s of additional options that plot.ly accepts for a trace.\n- `opts.webgl`       : use webgl for plotting (`boolean`; default = `false`). it is faster if a plot contains too many points. use sparingly as browsers won't allow more than a couple of webgl contexts on a single page.\n\n\n#### vis.stem\nthis function draws a stem plot. it takes as input an `n` or `nxm` tensor\n`x` that specifies the values of the `n` points in the `m` time series.\nan optional `n` or `nxm` tensor `y` containing timestamps can be specified\nas well; if `y` is an `n` tensor then all `m` time series are assumed to\nhave the same timestamps.\n\nthe following `opts` are supported:\n\n- `opts.colormap`: colormap (`string`; default = `'viridis'`)\n- `opts.legend`  : `table` containing legend names\n- `opts.layoutopts`  : `dict` of any additional options that the graph backend accepts for a layout. for example `layoutopts = {'plotly': {'legend': {'x':0, 'y':0}}}`.\n\n#### vis.heatmap\nthis function draws a heatmap. it takes as input an `nxm` tensor `x` that\nspecifies the value at each location in the heatmap.\n\n`update` can be used to efficiently update the data of an existing plot. use 'appendrow' to append data row-wise, 'appendcolumn' to append data column-wise, 'prependrow' to prepend data row-wise, 'prependcolumn' to prepend data column-wise, 'replace' to use new data, or 'remove' to remove the plot specified by `win`.\n\nthe following `opts` are supported:\n\n- `opts.colormap`   : colormap (`string`; default = `'viridis'`)\n- `opts.xmin`       : clip minimum value (`number`; default = `x:min()`)\n- `opts.xmax`       : clip maximum value (`number`; default = `x:max()`)\n- `opts.columnnames`: `table` containing x-axis labels\n- `opts.rownames`   : `table` containing y-axis labels\n- `opts.layoutopts` : `dict` of any additional options that the graph backend accepts for a layout. for example `layoutopts = {'plotly': {'legend': {'x':0, 'y':0}}}`.\n- `opts.nancolor`   : color for plotting `nan`s. if this is `none`, `nan`s will be plotted as transparent. (`string`; default = `none`)\n\n#### vis.bar\nthis function draws a regular, stacked, or grouped bar plot. it takes as\ninput an `n` or `nxm` tensor `x` that specifies the height of each of the\nbars. if `x` contains `m` columns, the values corresponding to each row\nare either stacked or grouped (depending on how `opts.stacked` is\nset). in addition to `x`, an (optional) `n` tensor `y` can be specified\nthat contains the corresponding x-axis values.\n\nthe following plot-specific `opts` are currently supported:\n\n- `opts.rownames`: `table` containing x-axis labels\n- `opts.stacked`    : stack multiple columns in `x`\n- `opts.legend`     : `table` containing legend labels\n- `opts.layoutopts`  : `dict` of any additional options that the graph backend accepts for a layout. for example `layoutopts = {'plotly': {'legend': {'x':0, 'y':0}}}`.\n\n#### vis.histogram\nthis function draws a histogram of the specified data. it takes as input\nan `n` tensor `x` that specifies the data of which to construct the\nhistogram.\n\nthe following plot-specific `opts` are currently supported:\n\n- `opts.numbins`: number of bins (`number`; default = 30)\n- `opts.layoutopts`  : `dict` of any additional options that the graph backend accepts for a layout. for example `layoutopts = {'plotly': {'legend': {'x':0, 'y':0}}}`.\n\n#### vis.boxplot\nthis function draws boxplots of the specified data. it takes as input\nan `n` or an `nxm` tensor `x` that specifies the `n` data values of which\nto construct the `m` boxplots.\n\nthe following plot-specific `opts` are currently supported:\n\n- `opts.legend`: labels for each of the columns in `x`\n- `opts.layoutopts`  : `dict` of any additional options that the graph backend accepts for a layout. for example `layoutopts = {'plotly': {'legend': {'x':0, 'y':0}}}`.\n\n#### vis.surf\nthis function draws a surface plot. it takes as input an `nxm` tensor `x`\nthat specifies the value at each location in the surface plot.\n\nthe following `opts` are supported:\n\n- `opts.colormap`: colormap (`string`; default = `'viridis'`)\n- `opts.xmin`    : clip minimum value (`number`; default = `x:min()`)\n- `opts.xmax`    : clip maximum value (`number`; default = `x:max()`)\n- `opts.layoutopts`  : `dict` of any additional options that the graph backend accepts for a layout. for example `layoutopts = {'plotly': {'legend': {'x':0, 'y':0}}}`.\n\n#### vis.contour\nthis function draws a contour plot. it takes as input an `nxm` tensor `x`\nthat specifies the value at each location in the contour plot.\n\nthe following `opts` are supported:\n\n- `opts.colormap`: colormap (`string`; default = `'viridis'`)\n- `opts.xmin`    : clip minimum value (`number`; default = `x:min()`)\n- `opts.xmax`    : clip maximum value (`number`; default = `x:max()`)\n- `opts.layoutopts`  : `dict` of any additional options that the graph backend accepts for a layout. for example `layoutopts = {'plotly': {'legend': {'x':0, 'y':0}}}`.\n\n#### vis.quiver\nthis function draws a quiver plot in which the direction and length of the\narrows is determined by the `nxm` tensors `x` and `y`. two optional `nxm`\ntensors `gridx` and `gridy` can be provided that specify the offsets of\nthe arrows; by default, the arrows will be done on a regular grid.\n\nthe following `opts` are supported:\n\n- `opts.normalize`:  length of longest arrows (`number`)\n- `opts.arrowheads`: show arrow heads (`boolean`; default = `true`)\n- `opts.layoutopts`  : `dict` of any additional options that the graph backend accepts for a layout. for example `layoutopts = {'plotly': {'legend': {'x':0, 'y':0}}}`.\n\n#### vis.mesh\nthis function draws a mesh plot from a set of vertices defined in an\n`nx2` or `nx3` matrix `x`, and polygons defined in an optional `mx2` or\n`mx3` matrix `y`.\n\nthe following `opts` are supported:\n\n- `opts.color`: color (`string`)\n- `opts.opacity`: opacity of polygons (`number` between 0 and 1)\n- `opts.layoutopts`  : `dict` of any additional options that the graph backend accepts for a layout. for example `layoutopts = {'plotly': {'legend': {'x':0, 'y':0}}}`.\n\n#### vis.dual_axis_lines\nthis function will create a line plot using plotly with different y-axis.\n\n`x`  = a numpy array of the range.\n\n`y1` = a numpy array of the same count as `x`.\n\n`y2` = a numpy array of the same count as `x`.\n\nthe following `opts` are supported:\n\n- `opts.height` : height of the plot\n- `opts.width` :  width of the plot\n- `opts.name_y1` : axis name for y1 plot\n- `opts.name_y2` : axis name for y2 plot\n- `opts.title` :  title of the plot\n- `opts.color_title_y1` :  color of the y1 axis title\n- `opts.color_tick_y1`  :  color of the y1 axis ticks\n- `opts.color_title_y2` :  color of the y2 axis title\n- `opts.color_tick_y2`  :  color of the y2 axis ticks\n- `opts.side` :  side on which the y2 tick has to be placed. has values 'right' or `left`.\n- `opts.showlegend` :  display legends (boolean values)\n- `opts.top` :  set the top margin of the plot\n- `opts.bottom` :  set the bottom margin of the plot\n- `opts.right` :  set the right margin of the plot\n- `opts.left` :  set the left margin of the plot   \n\nthis is the image of the output:  \n<p align=\"center\"><img align=\"center\" src=\"https://user-images.githubusercontent.com/19650074/198822367-666cc42e-4354-4a7a-8dd3-d8ff143f885d.gif\" width=\"400\" /></p>\n\n\n### network graph\n\nthis function draws a graph, in which the nodes and edges are taken from a 2-d matrix of size [,2] where each row contains a source and destination node value. the numeric value used to define nodes should be strictly between (0 to n-1), where n is the number of nodes. \n \nthere are two optional arguments :\n- `edgelabels` : list of custom edge labels. if not provided each edge gets a label, \"source-destination\", eg \"1-2\", size should be equal to size of input \"edges\". optional.\n- `nodelabels` : list of custom node labels. if not provided each node gets a label same as the numeric value defined in the \"edges\". size should be equal to number of nodes present. optional.\n\nthe following opts are supported:\n- `opts.height` : height of the plot. default : 500\n- `opts.width` : width of the plot. default : 500\n- `opts.directed` : whether the plot should have a arrow or not. default : false\n- `opts.showvertexlabels` : whether to show vertex labels. default : true\n- `opts.showedgelabels` : whether to show edge labels. default : false\n- `opts.scheme` : whether all nodes shoud have \"same\" color or \"different\". default : \"same\"\n\n### customizing plots\n\nthe plotting functions take an optional `opts` table as input that can be used to change (generic or plot-specific) properties of the plots. \n\nall input arguments are specified in a single table; the input arguments are matches based on the keys they have in the input table.\n\nthe following `opts` are generic in the sense that they are the same for all visualizations (except `plot.image`, `plot.text`, `plot.video`, and `plot.audio`):\n\n- `opts.title`       : figure title\n- `opts.width`       : figure width\n- `opts.height`      : figure height\n- `opts.showlegend`  : show legend (`true` or `false`)\n- `opts.xtype`       : type of x-axis (`'linear'` or `'log'`)\n- `opts.xlabel`      : label of x-axis\n- `opts.xtick`       : show ticks on x-axis (`boolean`)\n- `opts.xtickmin`    : first tick on x-axis (`number`)\n- `opts.xtickmax`    : last tick on x-axis (`number`)\n- `opts.xtickvals`   : locations of ticks on x-axis (`table` of `number`s)\n- `opts.xticklabels` : ticks labels on x-axis (`table` of `string`s)\n- `opts.xtickstep`   : distances between ticks on x-axis (`number`)\n- `opts.xtickfont`   : font for x-axis labels (dict of [font information](https://plot.ly/javascript/reference/#layout-font))\n- `opts.ytype`       : type of y-axis (`'linear'` or `'log'`)\n- `opts.ylabel`      : label of y-axis\n- `opts.ytick`       : show ticks on y-axis (`boolean`)\n- `opts.ytickmin`    : first tick on y-axis (`number`)\n- `opts.ytickmax`    : last tick on y-axis (`number`)\n- `opts.ytickvals`   : locations of ticks on y-axis (`table` of `number`s)\n- `opts.yticklabels` : ticks labels on y-axis (`table` of `string`s)\n- `opts.ytickstep`   : distances between ticks on y-axis (`number`)\n- `opts.ytickfont`   : font for y-axis labels (dict of [font information](https://plot.ly/javascript/reference/#layout-font))\n- `opts.marginleft`  : left margin (in pixels)\n- `opts.marginright` : right margin (in pixels)\n- `opts.margintop`   : top margin (in pixels)\n- `opts.marginbottom`: bottom margin (in pixels)\n\n`opts` are passed as dictionary in python scripts.you can pass `opts` like:\n\n    opts=dict(title=\"my title\", xlabel=\"x axis\",ylabel=\"y axis\")\n\nor\n\n    opts={\"title\":\"my title\", \"xlabel\":\"x axis\",\"ylabel\":\"y axis\"}\n    \nthe other options are visualization-specific, and are described in the\ndocumentation of the functions.\n\n### others\n\n#### vis.close\n\nthis function closes a specific window. it takes input window id `win` and environment id `eid`. use `win` as `none` to close all windows in an environment.\n\n#### vis.delete_env\n\nthis function deletes a specified env entirely. it takes env id `eid` as input.\n\n> **note**: `delete_env` is deletes all data for an environment and is irreversible. do not use unless you absolutely want to remove an environment.\n\n\n#### vis.fork_env\n\nthis function forks an environment, similiar to the ui feature.\n\narguments:\n- `prev_eid`: environment id that we want to fork.\n- `eid`: new environment id that will be created with the fork.\n\n> **note**: `fork_env` an exception will occur if an env that doesn't exist is forked.\n\n#### vis.win_exists\n\nthis function returns a bool indicating whether or not a window `win` exists on the server already. returns none if something went wrong.\n\noptional arguments:\n- `env`: environment to search for the window in. default is `none`.\n\n#### vis.get_env_list\n\nthis function returns a list of all of the environments on the server at the time of calling. it takes no arguments.\n\n#### vis.win_hash\n\nthis function returns md5 hash of the contents of a window `win` if it exists on the server. returns none otherwise.\n\noptional arguments:\n- `env` : environment to search for the window in. default is `none`.\n\n\n#### vis.get_window_data\nthis function returns the window data for the given window. returns data for all windows in an env if win is none.\n\narguments:\n- `env`: environment to search for the window in.\n- `win`: window to return data for. set to `none` to retrieve all the windows in an environment.\n\n#### vis.check_connection\n\nthis function returns a bool indicating whether or not the server is connected. it accepts an optional argument `timeout_seconds` for a number of seconds to wait for the server to come up.\n\n#### vis.replay_log\nthis function takes the contents of a visdom log and replays them to the current server to restore a state or handle any missing entries.\n\narguments:\n- `log_filename`: log file to replay the contents of.\n\n## customizing visdom\nthe user config directory for visdom is\n- `~/.config/visdom` for linux\n- `~/library/preferences/visdom` for osx\n- `%appdata%/visdom` for windows\n\nby placing a `style.css` in you user config directory, visdom will serve the customized css file along with the default style-file.\nin addition, it is also possible to create a project-specific file; just place the file `style.css` in your `env_path`.\n\n## license\nvisdom is apache 2.0 licensed, as found in the license file.\n\n## note on lua torch support\nsupport for lua torch was deprecated following `v0.1.8.4`. if you'd like to use torch support, you'll need to download that release. you can follow the usage instructions there, but it is no longer officially supported.\n\n## contributing\nsee guidelines for contributing [here.](./contributing.md)\n\n## acknowledgments\nvisdom was inspired by tools like [display](https://github.com/szym/display) and relies on [plotly](https://plot.ly/) as a plotting front-end.\n",
  "docs_url": null,
  "keywords": "",
  "license": "apache-2.0",
  "name": "visdom",
  "package_url": "https://pypi.org/project/visdom/",
  "project_url": "https://pypi.org/project/visdom/",
  "project_urls": {
    "Homepage": "https://github.com/facebookresearch/visdom"
  },
  "release_url": "https://pypi.org/project/visdom/0.2.4/",
  "requires_dist": [],
  "requires_python": "",
  "summary": "a tool for visualizing live, rich data for torch and numpy",
  "version": "0.2.4",
  "releases": [],
  "developers": [
    "jack_urbanek",
    "jju@fb.com"
  ],
  "kwds": "visget_window_data visget_env_list py visdom_password visdom_use_env_credentials",
  "license_kwds": "apache-2.0",
  "libtype": "pypi",
  "id": "pypi_visdom",
  "homepage": "https://github.com/facebookresearch/visdom",
  "release_count": 31,
  "dependency_ids": [],
  "documentation_summary": "Visdom version 0.2.4, released on February 8, 2023, is a Python tool designed for visualizing live, rich data, supporting Torch and Numpy. It enables users to create, organize, and share visualizations like plots, images, and text, either programmatically or through a UI, facilitating scientific experimentation. Visdom's features include customizable windows and environments for dashboard creation, callback support for interactive visualizations, and the ability to save and share visualizations. It supports various plot types through a simple API, with additional functionalities for managing environments and states. Installation can be done via pip, and it requires a running server accessible through a browser for usage. The project, licensed under Apache-2.0, is maintained by Jack Urbanek, Allan Jabri, and Laurens van der Maaten, among others.",
  "embedding": [
    -0.022186361253261566,
    -0.02128784731030464,
    0.026485400274395943,
    -0.015813829377293587,
    0.026250405237078667,
    -0.0022929362021386623,
    -0.007823974825441837,
    -0.02106667496263981,
    -0.0047310166992247105,
    -0.01860613189637661,
    0.002089042915031314,
    0.012945499271154404,
    -0.009040423668920994,
    0.013940775766968727,
    -0.023098697885870934,
    0.0026316065341234207,
    0.012275070883333683,
    -0.01329108141362667,
    0.0025642181281000376,
    -0.027826258912682533,
    0.023637805134058,
    0.016173234209418297,
    -0.016380583867430687,
    -0.016131766140460968,
    -0.004537491127848625,
    0.00527012487873435,
    0.0023862433154135942,
    -0.020624330267310143,
    0.020679622888565063,
    -0.004274848848581314,
    0.025821883231401443,
    -0.005636441521346569,
    0.008805427700281143,
    -0.03361821174621582,
    -0.008943661116063595,
    0.009731587953865528,
    0.022697821259498596,
    -0.008321613073348999,
    0.04307333379983902,
    -0.011424939148128033,
    0.0228775255382061,
    -0.008653371594846249,
    -0.01477708388119936,
    0.006389810238033533,
    -0.02395574003458023,
    0.02811654657125473,
    -0.008280143141746521,
    -0.015620304271578789,
    -0.02092844247817993,
    0.01686439849436283,
    0.009289242327213287,
    0.014390031807124615,
    -0.013021527789533138,
    -0.025973938405513763,
    0.02040315791964531,
    0.002400066703557968,
    0.007236485835164785,
    0.03571934998035431,
    -0.022531943395733833,
    -0.008335436694324017,
    0.015136489644646645,
    0.003082590876147151,
    -0.024287499487400055,
    -0.008231761865317822,
    -0.02636099047958851,
    0.015233252197504044,
    -0.0338393859565258,
    0.00891601387411356,
    0.02925005555152893,
    0.007112076506018639,
    0.061762403696775436,
    0.04077867045998573,
    -0.009040423668920994,
    -0.012655210681259632,
    0.018730541691184044,
    -0.012109191156923771,
    -0.040585145354270935,
    0.013443137519061565,
    -0.020389335229992867,
    0.02087314985692501,
    -0.006417456548660994,
    -0.029028883203864098,
    -0.004762119147926569,
    0.03428173065185547,
    0.03325880691409111,
    0.0005715061561204493,
    0.0028631463646888733,
    0.016366761177778244,
    -0.01732056774199009,
    -0.037903428077697754,
    0.01671234332025051,
    0.007443835027515888,
    0.009261596016585827,
    0.007692654151469469,
    -0.002028566086664796,
    0.030355917289853096,
    -0.011362734250724316,
    0.024038679897785187,
    -0.009164833463728428,
    -0.009579531848430634,
    0.004402713850140572,
    -0.00047301530139520764,
    -0.008681018836796284,
    -0.01609029620885849,
    -0.03513877093791962,
    -0.02878006361424923,
    -0.0170164555311203,
    0.0009356631198897958,
    0.030604736879467964,
    0.018578484654426575,
    -0.028254779055714607,
    0.050150852650403976,
    -0.01498443353921175,
    -0.06303414702415466,
    0.0013503615045920014,
    0.003977647982537746,
    0.04050220549106598,
    -0.008998953737318516,
    -0.025255128741264343,
    -0.009130274876952171,
    0.0019490821287035942,
    -0.0022860246244817972,
    0.02584952861070633,
    -0.016822928562760353,
    0.007409276906400919,
    0.01716851070523262,
    0.015067372471094131,
    -0.006904727313667536,
    -0.005408357363194227,
    -0.02168872207403183,
    0.010042611509561539,
    0.0050351289100945,
    0.009987317956984043,
    -0.008432199247181416,
    -0.008577344007790089,
    -0.0026367902755737305,
    0.002579769119620323,
    0.000930479378439486,
    -0.016048826277256012,
    0.014403855428099632,
    0.012406392022967339,
    0.0294988751411438,
    -0.009392917156219482,
    -0.01743115298449993,
    -0.026250405237078667,
    0.04636327549815178,
    -0.0026834437157958746,
    0.00048381471424363554,
    -0.0022791128139942884,
    0.0003045440826099366,
    0.03057708963751793,
    -0.007312513887882233,
    -0.0048727053217589855,
    -0.0004505524702835828,
    0.005950921215116978,
    -0.0039983829483389854,
    0.004285216331481934,
    0.005100789479911327,
    -0.029056530445814133,
    0.023928094655275345,
    -0.006151358596980572,
    0.020831679925322533,
    -0.03726755827665329,
    -0.0035353032872080803,
    0.011272883042693138,
    0.025932468473911285,
    0.020444627851247787,
    -0.01953229121863842,
    -0.026388637721538544,
    -0.0009745410643517971,
    0.007032592780888081,
    0.0470820851624012,
    -0.03936869651079178,
    0.008328525349497795,
    0.005397989880293608,
    0.028558891266584396,
    0.016850575804710388,
    0.011390380561351776,
    -0.02384515479207039,
    0.004292127676308155,
    0.011224501766264439,
    0.02210342139005661,
    -0.010111727751791477,
    0.025227481499314308,
    -0.0164497010409832,
    -0.01498443353921175,
    0.01143876276910305,
    -0.002835499821230769,
    0.00891601387411356,
    0.002673076232895255,
    0.01850936934351921,
    0.01153552532196045,
    3.6448095670493785e-06,
    -0.0029599093832075596,
    -0.609993577003479,
    -0.012268158607184887,
    -0.0002202004980063066,
    -0.011742874048650265,
    -0.004858882166445255,
    -0.016532640904188156,
    -0.013719603419303894,
    0.018813481554389,
    -0.0265683401376009,
    0.019656701013445854,
    -0.003956913482397795,
    0.00011425802949815989,
    -0.008722487837076187,
    -0.001286428770981729,
    -0.010408928617835045,
    -0.008314701728522778,
    0.0006764766294509172,
    -0.01788732223212719,
    -0.00737471878528595,
    0.027328619733452797,
    -0.012897117994725704,
    0.029830632731318474,
    -0.008522050455212593,
    0.009987317956984043,
    0.003763387445360422,
    0.010070257820189,
    0.0011723866919055581,
    0.011556260287761688,
    0.022379886358976364,
    0.020292572677135468,
    -0.017818205058574677,
    0.019601408392190933,
    0.022780761122703552,
    -0.017514092847704887,
    0.047109730541706085,
    -0.002102866070345044,
    -0.027135094627738,
    0.045367997139692307,
    -0.008376906625926495,
    0.06402942538261414,
    -0.02579423598945141,
    0.005747027695178986,
    0.01154243666678667,
    0.014044450595974922,
    -0.014251799322664738,
    -0.0025296597741544247,
    0.006880536675453186,
    -0.00999423023313284,
    0.01154243666678667,
    -0.03129589930176735,
    0.015191782265901566,
    -0.030853556469082832,
    -0.00853587407618761,
    -0.007533686235547066,
    0.03218059241771698,
    0.0027093624230474234,
    0.03160001337528229,
    -0.0200437530875206,
    0.024218382313847542,
    -0.018578484654426575,
    -0.019407881423830986,
    0.017693795263767242,
    0.002914983779191971,
    -0.009662470780313015,
    -0.002330950228497386,
    0.008542785421013832,
    -0.00886763259768486,
    -0.008072794415056705,
    -0.007533686235547066,
    -0.042630989104509354,
    0.0006920278538018465,
    0.009026600047945976,
    0.013844012282788754,
    -0.013671222142875195,
    0.04514682665467262,
    0.043764498084783554,
    0.04180159047245979,
    0.006552233826369047,
    -0.00384287117049098,
    0.02749449945986271,
    -0.00587489316239953,
    0.011293618008494377,
    -0.001812577247619629,
    -0.026139818131923676,
    0.03983868658542633,
    -0.0034143496304750443,
    0.01326343510299921,
    -0.00852896273136139,
    0.00042528178892098367,
    0.0038255921099334955,
    0.017859674990177155,
    0.021647252142429352,
    0.005695190280675888,
    -0.044621542096138,
    0.001151651842519641,
    0.04503623768687248,
    -0.018827304244041443,
    0.016684696078300476,
    -0.038069307804107666,
    -0.003217367921024561,
    -0.02374839037656784,
    -0.015495894476771355,
    -0.008093529380857944,
    0.010243048891425133,
    -0.00025789052597247064,
    0.0033089471980929375,
    -0.038262832909822464,
    0.0100218765437603,
    0.019242003560066223,
    -0.022739291191101074,
    -0.022449003532528877,
    -0.023375162854790688,
    -0.003063583979383111,
    0.006469293963164091,
    0.010180843994021416,
    -0.032042358070611954,
    0.02822713367640972,
    -0.0012812450295314193,
    0.012123014777898788,
    0.0037772106006741524,
    -0.007450746838003397,
    -0.04177394509315491,
    0.011127738282084465,
    0.0053426967933773994,
    0.029332995414733887,
    -0.011341999284923077,
    0.008549697697162628,
    -0.013657398521900177,
    -0.054519008845090866,
    0.009710852988064289,
    0.005954376887530088,
    0.023015758022665977,
    -0.0027629276737570763,
    0.00038813170976936817,
    0.013069909065961838,
    0.005705557763576508,
    0.022117244079709053,
    0.004530579317361116,
    0.0027093624230474234,
    0.006496940739452839,
    0.012475508265197277,
    0.03273352235555649,
    0.02087314985692501,
    -0.014148124493658543,
    -0.02472984418272972,
    -0.03994927182793617,
    -0.011867283843457699,
    0.018896421417593956,
    -0.007796328514814377,
    -0.012226689606904984,
    -0.03002415969967842,
    -0.009703940711915493,
    -0.004537491127848625,
    0.006534954532980919,
    0.016062648966908455,
    -0.011950223706662655,
    0.007858533412218094,
    -0.0029046162962913513,
    0.0004678315599448979,
    -0.003326226258650422,
    -0.00444418378174305,
    0.0018695982871577144,
    0.005474017933011055,
    -0.0200437530875206,
    -0.02365162782371044,
    -0.016795283183455467,
    -0.027411559596657753,
    0.03643815964460373,
    -0.016173234209418297,
    -0.03284410759806633,
    -0.0031292445491999388,
    -0.024439554661512375,
    -0.00015777975204400718,
    0.035857584327459335,
    -0.005169905722141266,
    0.027798611670732498,
    -0.0016216433141380548,
    -0.02652687020599842,
    0.008045148104429245,
    -0.0030584002379328012,
    -0.012662122026085854,
    0.0039811041206121445,
    -0.03605110943317413,
    -0.03273352235555649,
    0.03906458243727684,
    0.005366887431591749,
    0.027480676770210266,
    0.008280143141746521,
    -0.011881107464432716,
    -0.0005546589964069426,
    -0.0004868385731242597,
    0.03732284903526306,
    -0.015869123861193657,
    0.02796449139714241,
    -0.011003329418599606,
    0.02138460986316204,
    0.012212865985929966,
    0.008929837495088577,
    -0.00705678341910243,
    0.03477936610579491,
    0.01000114157795906,
    0.038484007120132446,
    0.0026108715683221817,
    0.0009849085472524166,
    -0.004737928509712219,
    -0.02380368486046791,
    0.024591611698269844,
    -0.009054247289896011,
    0.0016570654697716236,
    0.0001834824070101604,
    0.029802987352013588,
    0.0005049816099926829,
    -0.01143876276910305,
    -0.010215402580797672,
    0.01323578879237175,
    0.0241077970713377,
    0.012848736718297005,
    -0.003492105519399047,
    -0.02930534817278385,
    0.00907498225569725,
    -0.008667195215821266,
    -0.014790907502174377,
    0.025061601772904396,
    -0.020264925435185432,
    -0.008466757833957672,
    0.012523889541625977,
    -0.015150312334299088,
    0.015495894476771355,
    0.0005226926878094673,
    -0.040281031280756,
    0.010733774863183498,
    0.018232902511954308,
    0.005978567525744438,
    -0.007920738309621811,
    0.011473320424556732,
    -0.029830632731318474,
    0.02858653850853443,
    -0.02806125394999981,
    0.04033632576465607,
    -0.0007175144855864346,
    0.006282679736614227,
    0.008708665147423744,
    0.037184618413448334,
    -0.024024857208132744,
    0.018274372443556786,
    0.008943661116063595,
    0.024149267002940178,
    -0.00912336353212595,
    -0.0246745515614748,
    -0.022131068632006645,
    0.0003805721062235534,
    0.016422053799033165,
    -0.016767635941505432,
    0.01779055781662464,
    0.013139025308191776,
    -0.032152943313121796,
    0.016048826277256012,
    -0.009303065948188305,
    0.020942265167832375,
    0.026900097727775574,
    0.0028510510455816984,
    0.004378523211926222,
    0.0045720492489635944,
    0.019767288118600845,
    0.0006375986849889159,
    -0.02441190928220749,
    -0.0015836292877793312,
    -0.013408579863607883,
    -0.020790209993720055,
    -0.0400875061750412,
    0.0061340793035924435,
    -0.026278050616383553,
    0.002135696355253458,
    -0.027480676770210266,
    0.025890998542308807,
    -0.0037772106006741524,
    0.009413652122020721,
    0.021522844210267067,
    0.01906229928135872,
    0.01911759376525879,
    -0.0040398528799414635,
    -0.033590566366910934,
    0.02210342139005661,
    -0.02446720190346241,
    -0.002298119943588972,
    -0.020029930397868156,
    -0.02811654657125473,
    0.005290859378874302,
    0.012295805849134922,
    0.028075076639652252,
    0.004077867139130831,
    -0.0020665801130235195,
    0.0030722233932465315,
    -0.0021270569413900375,
    -0.008259408175945282,
    0.0023326780647039413,
    0.037239909172058105,
    -0.01845407672226429,
    -0.010927300900220871,
    0.008978218771517277,
    0.0117705212906003,
    0.037544023245573044,
    0.018979361280798912,
    -0.025808060541749,
    0.032042358070611954,
    0.0012777892407029867,
    0.0033158587757498026,
    -0.023527218028903008,
    -0.01614558883011341,
    -0.016159411519765854,
    -0.028503598645329475,
    -0.008715576492249966,
    -0.011328176595270634,
    -0.023361340165138245,
    -0.0068286992609500885,
    0.006690466310828924,
    -0.014362385496497154,
    0.01307682041078806,
    0.02323693037033081,
    0.022476648911833763,
    0.0008838258218020201,
    -0.006738848052918911,
    -0.010595542378723621,
    0.0017244538757950068,
    0.040585145354270935,
    -0.002521020360291004,
    0.004558225627988577,
    0.006092609837651253,
    -0.024798959493637085,
    -0.03038356453180313,
    -0.05695190280675888,
    -0.002533115679398179,
    0.014334739185869694,
    0.010194667614996433,
    -0.016974985599517822,
    -0.03339703753590584,
    0.024301322177052498,
    0.006638629361987114,
    0.003628610400483012,
    -0.012938587926328182,
    -0.0172099806368351,
    0.013436226174235344,
    -0.010816714726388454,
    -0.015233252197504044,
    -0.011646111495792866,
    0.00018812617054209113,
    -7.095229375408962e-05,
    -0.015095019713044167,
    0.024785136803984642,
    -0.01042966265231371,
    0.020320218056440353,
    0.023706922307610512,
    0.0009209758718498051,
    -0.024840429425239563,
    -0.024176912382245064,
    0.026139818131923676,
    0.01321505382657051,
    0.03320351243019104,
    -0.03613404929637909,
    0.011107003316283226,
    0.02138460986316204,
    0.04774560034275055,
    -0.007416188716888428,
    0.0242045596241951,
    0.009047335013747215,
    0.031185314059257507,
    -0.012295805849134922,
    0.009544973261654377,
    0.007409276906400919,
    -0.0008674106793478131,
    0.0041815415024757385,
    0.00794147327542305,
    -0.0189102441072464,
    0.008293966762721539,
    0.002330950228497386,
    -0.003245014464482665,
    -0.017306743189692497,
    -0.02056903764605522,
    -0.009925113059580326,
    -0.0015162407653406262,
    0.010367458686232567,
    -0.03776519373059273,
    -0.005774674471467733,
    -0.03851165249943733,
    -0.0075405980460345745,
    -0.012834913097321987,
    -0.00971776433289051,
    -0.02056903764605522,
    -0.014155036769807339,
    -0.00711898785084486,
    -0.007409276906400919,
    0.013491518795490265,
    -0.011328176595270634,
    -0.014638851396739483,
    0.012060809880495071,
    -0.031682953238487244,
    -0.02586335316300392,
    -0.002330950228497386,
    0.02123255468904972,
    2.8537509933812544e-05,
    0.006331061013042927,
    0.0157861839979887,
    0.007160457782447338,
    -0.010927300900220871,
    0.00646583829075098,
    -0.02641628310084343,
    -0.022642528638243675,
    -0.014362385496497154,
    0.004216099623590708,
    -0.01269668061286211,
    -0.001987096155062318,
    -0.012226689606904984,
    0.011148473247885704,
    0.0355534702539444,
    0.019007006660103798,
    -0.01182581391185522,
    0.02456396445631981,
    -0.01423797570168972,
    0.007837798446416855,
    -0.001942170551046729,
    0.004482198040932417,
    -0.02235224097967148,
    0.006469293963164091,
    -0.0283653661608696,
    0.021260201930999756,
    -0.0276050865650177,
    -0.003379791509360075,
    0.005263213068246841,
    0.01537148468196392,
    -0.001602636300958693,
    -0.0031085095833986998,
    0.02327840030193329,
    -0.01156317163258791,
    0.009821439161896706,
    0.015468248166143894,
    0.0007952704327180982,
    0.0005667543737217784,
    0.010775244794785976,
    0.027259504422545433,
    -0.017362037673592567,
    0.006711201276630163,
    0.04177394509315491,
    -0.0037979455664753914,
    -0.018730541691184044,
    0.01803937740623951,
    -0.004720649216324091,
    0.008287055417895317,
    0.0028631463646888733,
    0.0007952704327180982,
    0.030853556469082832,
    0.02416308969259262,
    -0.025808060541749,
    -0.027563616633415222,
    0.0019559937063604593,
    0.056509558111429214,
    0.0038947085849940777,
    -0.031959418207407,
    -0.026139818131923676,
    0.006510763894766569,
    -0.024868076667189598,
    0.013456961140036583,
    -0.003573317313566804,
    0.002602232154458761,
    -0.010167020373046398,
    -0.0181499645113945,
    -0.01423797570168972,
    -0.012171396054327488,
    0.003649345366284251,
    0.002419073600322008,
    -0.026595987379550934,
    -0.012012428604066372,
    -0.007098253350704908,
    -0.005950921215116978,
    0.008625725284218788,
    0.002861418528482318,
    0.0022791128139942884,
    0.013111378997564316,
    -0.018315842375159264,
    -0.008826162666082382,
    -0.01151479035615921,
    -0.008833074942231178,
    0.021011382341384888,
    0.01788732223212719,
    0.0327058769762516,
    0.03665933385491371,
    0.023306045681238174,
    0.013387844897806644,
    -0.022227831184864044,
    0.017030278220772743,
    -0.008452934212982655,
    -0.013899305835366249,
    -0.0105886310338974,
    -0.010685393586754799,
    -0.026291875168681145,
    0.006604070775210857,
    -0.0019490821287035942,
    -0.0017114946385845542,
    -0.011715227738022804,
    -0.005004026461392641,
    -0.005131891928613186,
    0.011010240763425827,
    0.014514441601932049,
    -0.019822580739855766,
    -0.02132931724190712,
    0.0012233600718900561,
    0.02276693843305111,
    0.014155036769807339,
    0.009233949705958366,
    -0.03817989304661751,
    -0.022545766085386276,
    0.01582765392959118,
    0.011625376529991627,
    0.018730541691184044,
    0.016684696078300476,
    -0.0007080110372044146,
    6.236674380488694e-05,
    -0.0004898624029010534,
    0.0436815582215786,
    0.02631952054798603,
    -0.016325291246175766,
    0.021882249042391777,
    -0.024854253977537155,
    -0.03417114168405533,
    0.019670523703098297,
    0.020956089720129967,
    0.010491867549717426,
    0.009068069979548454,
    0.0281718410551548,
    -0.002635062439367175,
    0.04810500517487526,
    0.018467899411916733,
    -0.009088804945349693,
    0.030107099562883377,
    -0.02688627503812313,
    -0.03605110943317413,
    -0.010623188689351082,
    -0.03613404929637909,
    -0.025407183915376663,
    -0.017251450568437576,
    -0.011625376529991627,
    -0.0018488634377717972,
    0.027204209938645363,
    -0.018523192033171654,
    0.016435876488685608,
    0.0030601280741393566,
    0.010436574928462505,
    0.0158829465508461,
    0.021578136831521988,
    0.015302368439733982,
    0.012019339948892593,
    -0.015537364408373833,
    -0.014431501738727093,
    -0.01845407672226429,
    -0.0006782045820727944,
    0.002698994940146804,
    0.023153990507125854,
    0.02544865384697914,
    -0.017707617953419685,
    -0.022753115743398666,
    0.007132811471819878,
    -0.0008298286702483892,
    -0.01886877417564392,
    -0.05443606898188591,
    0.010187755338847637,
    0.006127167958766222,
    0.010118639096617699,
    -0.022656353190541267,
    0.0019559937063604593,
    -0.026043055579066277,
    0.002147791674360633,
    -0.010263783857226372,
    -0.017721442505717278,
    0.010270695202052593,
    0.004461463075131178,
    -0.009600266814231873,
    0.0020855870097875595,
    -0.00133049045689404,
    0.000322255160426721,
    0.008121175691485405,
    0.0054636504501104355,
    0.01321505382657051,
    -0.013892394490540028,
    -0.027024507522583008,
    0.005204464308917522,
    0.009876731783151627,
    0.0026557971723377705,
    0.009697029367089272,
    0.0033486890606582165,
    0.04738619551062584,
    0.0276050865650177,
    -0.00015972365508787334,
    0.001588813029229641,
    -0.012551535852253437,
    0.030908849090337753,
    -0.016021179035305977,
    -0.01722380332648754,
    -0.010595542378723621,
    -0.016574110835790634,
    0.02605687826871872,
    -0.010547161102294922,
    -0.007575156167149544,
    0.003001379081979394,
    -0.009918201714754105,
    -0.023568687960505486,
    0.005719381384551525,
    -0.024785136803984642,
    -0.001586221158504486,
    -0.0032795725855976343,
    0.0044199931435287,
    0.004340509418398142,
    -0.04390272870659828,
    0.002261833753436804,
    0.00035443747765384614,
    -0.025531593710184097,
    -0.005843790713697672,
    -0.0041435277089476585,
    -0.016214704141020775,
    0.005785041954368353,
    -0.01064392365515232,
    0.020430805161595345,
    0.015537364408373833,
    0.057283662259578705,
    -0.02842065878212452,
    0.01669851876795292,
    0.010167020373046398,
    0.02842065878212452,
    -0.019338766112923622,
    0.003524935804307461,
    -0.007084429729729891,
    -0.000953806156758219,
    0.026844805106520653,
    -0.0106370123103261,
    -0.04774560034275055,
    -0.0037737549282610416,
    0.022849878296256065,
    0.02766037918627262,
    0.00948276836425066,
    -0.02607070282101631,
    -0.006324149668216705,
    -0.009330712258815765,
    0.014998256228864193,
    -0.027383914217352867,
    -0.019131416454911232,
    0.0281718410551548,
    -0.014929139986634254,
    -0.0016778003191575408,
    -0.004209188278764486,
    -0.005750483367592096,
    0.015551187098026276,
    -0.010989505797624588,
    0.011051710695028305,
    0.002982372185215354,
    -0.036299929022789,
    -0.03582993522286415,
    -0.012883295305073261,
    -0.004824324045330286,
    -0.00791382696479559,
    0.01932494156062603,
    -0.03911987692117691,
    -0.02652687020599842,
    -0.03201471269130707,
    0.04240981489419937,
    0.017030278220772743,
    -0.005083510186523199,
    -0.007049871608614922,
    0.04628033563494682,
    0.00681141996756196,
    -0.015205605886876583,
    0.007796328514814377,
    -0.02775714173913002,
    -0.022421356290578842,
    0.007982943207025528,
    -0.01953229121863842,
    -0.03154471889138222,
    0.011618465185165405,
    0.020942265167832375,
    0.0283653661608696,
    -0.016643226146697998,
    -0.016822928562760353,
    -0.02405250258743763,
    -0.032622937113046646,
    0.004312862642109394,
    -0.009655559435486794,
    0.03477936610579491,
    0.0042817601934075356,
    0.01779055781662464,
    0.005066231358796358,
    0.008446022868156433,
    0.0010082353837788105,
    0.036935798823833466,
    -0.019255826249718666,
    0.00919939111918211,
    0.009849085472524166,
    -0.011943312361836433,
    0.009351447224617004,
    -0.01907612383365631,
    -0.015924416482448578,
    -0.013470783829689026,
    -0.010402016341686249,
    0.004686091095209122,
    0.011888018809258938,
    -0.00021814860519953072,
    -0.004426904488354921,
    -0.00858425535261631,
    -0.027466852217912674,
    0.021260201930999756,
    0.0037530199624598026,
    -0.0031862654723227024,
    0.016021179035305977,
    -0.005619162227958441,
    -0.030825909227132797,
    -0.004216099623590708,
    -0.0050351289100945,
    -0.0028095811139792204,
    -0.010726863518357277,
    0.005104245152324438,
    -0.013194318860769272,
    0.005487841088324785,
    -0.017444975674152374,
    -0.023817507550120354,
    -0.001158563420176506,
    0.011245236732065678,
    0.016974985599517822,
    -0.010941124521195889,
    0.027992136776447296,
    0.03187647834420204,
    0.018592309206724167,
    0.007464569993317127,
    -0.025476301088929176,
    0.024716021493077278,
    -0.03126825392246246,
    -0.013401667587459087,
    0.01336019765585661,
    -0.004762119147926569,
    -0.0069289179518818855,
    -0.004641165491193533,
    0.03994927182793617,
    -0.02123255468904972,
    0.010706128552556038,
    0.005076598841696978,
    -0.012876383028924465,
    -0.02513071894645691,
    -0.0015153768472373486,
    0.0021598872262984514,
    0.009710852988064289,
    -0.01333946269005537,
    0.006901271641254425,
    -0.002303303685039282,
    -0.013844012282788754,
    -0.018426429480314255,
    0.008701753802597523,
    -0.010982594452798367,
    -0.003856694558635354,
    -0.0041193366050720215,
    0.014818553812801838,
    -0.013104467652738094,
    0.014403855428099632,
    0.008743222802877426,
    -0.015841476619243622,
    0.005740115884691477,
    0.17505799233913422,
    0.015247075818479061,
    0.023928094655275345,
    0.014887670055031776,
    0.00999423023313284,
    0.020956089720129967,
    0.018675249069929123,
    -0.011680670082569122,
    0.03530465066432953,
    0.005176817532628775,
    -0.00408823462203145,
    -0.015758536756038666,
    -0.0020389335695654154,
    0.001500689540989697,
    -0.0069289179518818855,
    -0.029692400246858597,
    -0.013781808316707611,
    -0.02786772884428501,
    -0.029581815004348755,
    -0.009413652122020721,
    0.0017417330527678132,
    -0.025725120678544044,
    -0.004575504921376705,
    -0.027729494497179985,
    0.02261488325893879,
    0.009420563466846943,
    -0.004115880932658911,
    -0.0016916235908865929,
    0.0229742880910635,
    0.008079705759882927,
    -0.006524587050080299,
    -0.008190291933715343,
    -0.019808756187558174,
    -0.02323693037033081,
    -0.0087916050106287,
    -0.025738943368196487,
    0.004499476868659258,
    0.0020994103979319334,
    0.00819720420986414,
    0.03798636794090271,
    0.0023015758488327265,
    -0.020983735099434853,
    -0.015288544818758965,
    -0.027688024565577507,
    0.014887670055031776,
    -0.003943089861422777,
    0.002443264238536358,
    0.002754288027063012,
    0.0010099632199853659,
    0.009883644059300423,
    -0.008266320452094078,
    -0.02235224097967148,
    0.033120572566986084,
    0.0315723679959774,
    -0.038207538425922394,
    -0.029747694730758667,
    0.004437271971255541,
    0.01671234332025051,
    0.025738943368196487,
    0.019615231081843376,
    -0.03367350623011589,
    0.0246745515614748,
    0.010961859486997128,
    0.01737586036324501,
    -0.03881576284766197,
    -0.00907498225569725,
    -0.007125899661332369,
    0.023098697885870934,
    -0.012005516327917576,
    0.023264575749635696,
    -0.008985130116343498,
    -0.007955295965075493,
    -0.01727909781038761,
    -0.02282223105430603,
    -0.0059094512835145,
    -0.034254081547260284,
    0.03588522970676422,
    -0.011030975729227066,
    0.0018765099812299013,
    0.026637455448508263,
    0.0010194667847827077,
    0.0015145129291340709,
    -0.00917174480855465,
    0.006341428495943546,
    -0.02652687020599842,
    -0.018440252169966698,
    0.012026251293718815,
    -0.025324244052171707,
    -0.0212740246206522,
    0.009206303395330906,
    -0.015800006687641144,
    -0.017666149884462357,
    -0.014832377433776855,
    -0.012205954641103745,
    -0.0075405980460345745,
    0.0183434896171093,
    0.017486445605754852,
    0.022905170917510986,
    -0.023623982444405556,
    0.01087200827896595,
    -0.02966475486755371,
    0.041663359850645065,
    0.041967470198869705,
    2.15313757507829e-05,
    0.003607875434681773,
    -0.011265971697866917,
    0.00184713548514992,
    0.018564661964774132,
    -0.008639548905193806,
    -0.005007482599467039,
    -0.00439580250531435,
    -0.03527700528502464,
    0.007015313487499952,
    -0.01187419518828392,
    0.0004967740387655795,
    0.006026949267834425,
    8.990530477603897e-05,
    -0.010194667614996433,
    0.00010869632387766615,
    0.01906229928135872,
    -0.0023257664870470762,
    -0.0012034891406074166,
    -0.0013244427973404527,
    -0.025351891294121742,
    -0.014555911533534527,
    -0.014887670055031776,
    -0.027121271938085556,
    0.02565600350499153,
    -0.03146177902817726,
    -0.007250308990478516,
    0.020527567714452744,
    -0.018592309206724167,
    0.030190039426088333,
    0.010367458686232567,
    -0.004413081333041191,
    -0.012682856991887093,
    -0.023817507550120354,
    -0.0076028029434382915,
    -0.01293167658150196,
    -0.0042230114340782166,
    -0.033701151609420776,
    -0.009289242327213287,
    0.022421356290578842,
    -0.0012950683012604713,
    0.03428173065185547,
    -0.009019688703119755,
    0.00917174480855465,
    -0.011431850492954254,
    0.021619606763124466,
    -0.01962905377149582,
    -0.025255128741264343,
    -0.00037841222365386784,
    0.017099395394325256,
    -0.010533337481319904,
    0.0025158366188406944,
    -0.02925005555152893,
    -0.016850575804710388,
    -0.017154688015580177,
    0.013733426108956337,
    0.012067721225321293,
    -0.032263532280921936,
    -0.004520211834460497,
    0.022587236016988754,
    0.013111378997564316,
    -0.034254081547260284,
    -0.008853808976709843,
    -0.1752791553735733,
    0.0176799725741148,
    0.030355917289853096,
    -0.04174629971385002,
    -0.005062775686383247,
    0.005722837056964636,
    0.0024156176950782537,
    0.006617894396185875,
    -0.023195460438728333,
    0.008660283870995045,
    0.008397641591727734,
    0.029332995414733887,
    -0.027010684832930565,
    -0.0093583595007658,
    0.020596683025360107,
    0.007754859048873186,
    0.013083732686936855,
    0.004236834589391947,
    0.042990393936634064,
    0.014528265222907066,
    0.027107447385787964,
    -0.009275419637560844,
    0.014915316365659237,
    -0.0006993714487180114,
    -0.004675723612308502,
    -0.015067372471094131,
    -0.009773056954145432,
    0.00044925653492100537,
    0.00924777239561081,
    -0.04437272250652313,
    0.010685393586754799,
    0.007181192748248577,
    0.020292572677135468,
    0.005373799242079258,
    0.021108144894242287,
    0.010325988754630089,
    0.036521099507808685,
    -0.020389335229992867,
    0.0012682857923209667,
    0.019186709076166153,
    0.022794585675001144,
    0.024646904319524765,
    0.00881233997642994,
    -0.019007006660103798,
    0.008114264346659184,
    0.016518816351890564,
    -0.005850702524185181,
    -0.024093972519040108,
    0.015647949650883675,
    -0.005491297226399183,
    0.052196696400642395,
    -0.023762214928865433,
    -0.0038048571441322565,
    0.0016821201425045729,
    0.0281718410551548,
    -0.013436226174235344,
    0.012634475715458393,
    0.0046515329740941525,
    0.01660175621509552,
    -0.000874754274263978,
    -0.014666497707366943,
    -0.030051805078983307,
    0.0009762690169736743,
    -0.0029184394516050816,
    -0.02626422792673111,
    -0.015800006687641144,
    -0.039451636373996735,
    0.011065534316003323,
    -0.01033290009945631,
    0.009233949705958366,
    0.005273580551147461,
    -0.0017711074324324727,
    -0.015495894476771355,
    0.0012501426972448826,
    0.006839066743850708,
    0.026278050616383553,
    -0.013954599387943745,
    -0.0073194256983697414,
    0.015537364408373833,
    -0.0009563980274833739,
    -0.01849554479122162,
    0.010243048891425133,
    -0.002735281130298972,
    -0.00999423023313284,
    0.005764306988567114,
    -0.01964287832379341,
    -0.007706477306783199,
    -0.003735740901902318,
    -0.02472984418272972,
    -0.02092844247817993,
    -0.00711898785084486,
    -0.0052839480340480804,
    0.029443582519888878,
    -0.020264925435185432,
    0.012807266786694527,
    0.019974635913968086,
    0.015993531793355942,
    0.007077518384903669,
    0.026457753032445908,
    -0.004623886197805405,
    0.020085223019123077,
    0.013989157043397427,
    -0.022656353190541267,
    0.005836878903210163,
    0.015509718097746372,
    0.019822580739855766,
    -0.02643010765314102,
    0.012033163569867611,
    0.020112868398427963,
    -0.005805776454508305,
    -0.028918297961354256,
    0.0005062775453552604,
    0.01989169605076313,
    0.00981452688574791,
    -0.004236834589391947,
    0.02749449945986271,
    0.00915100984275341,
    0.004026029724627733,
    0.013705779798328876,
    0.006261944770812988,
    0.028102723881602287,
    -0.013201230205595493,
    -0.020112868398427963,
    0.00444418378174305,
    -0.019421705976128578,
    -0.023914270102977753,
    -0.094551220536232,
    -0.04981909319758415,
    0.031434133648872375,
    0.03162765875458717,
    0.005881804507225752,
    0.004506388679146767,
    0.0026903555262833834,
    0.007789417169988155,
    -0.0019300751155242324,
    -0.005982023663818836,
    -0.013740338385105133,
    0.0009572620037943125,
    0.00041837015305645764,
    0.013187406584620476,
    0.004616974852979183,
    -0.007609714288264513,
    -0.01820525713264942,
    0.017873497679829597,
    -0.005743572022765875,
    0.01983640342950821,
    -0.010526426136493683,
    0.0018194889416918159,
    0.0009175200830213726,
    -0.005131891928613186,
    -0.003974192310124636,
    0.005280491895973682,
    -0.012855648063123226,
    0.017002630978822708,
    0.009593354538083076,
    0.037295203655958176,
    0.027370089665055275,
    -0.029443582519888878,
    0.0018488634377717972,
    -0.0035975079517811537,
    -0.008114264346659184,
    -0.0024294410832226276,
    -0.0024968294892460108,
    -0.02560071088373661,
    0.0017918423982337117,
    -0.038069307804107666,
    -0.011853461153805256,
    -0.0049936589784920216,
    0.020430805161595345,
    -0.006268856581300497,
    -0.016477346420288086,
    0.0024812782648950815,
    -0.009731587953865528,
    0.032622937113046646,
    0.01705792546272278,
    -0.03367350623011589,
    -0.017514092847704887,
    -0.006801052484661341,
    0.005501664709299803,
    -0.005055863875895739,
    0.024688374251127243,
    0.004368155729025602,
    0.015233252197504044,
    -0.004796677269041538,
    -0.007934561930596828,
    0.005263213068246841,
    -0.018882596865296364,
    0.01143876276910305,
    -0.028614185750484467,
    0.03160001337528229,
    0.009710852988064289,
    -0.0030791352037340403,
    -0.007250308990478516,
    -0.007125899661332369,
    0.03038356453180313,
    -0.006144446786493063,
    -0.02919476293027401,
    0.02437043935060501,
    -0.008238673210144043,
    0.020956089720129967,
    -0.013145937584340572,
    0.011604641564190388,
    0.0023879711516201496,
    -0.0045927842147648335,
    -0.004198820795863867,
    0.026236580684781075,
    -0.0018851495115086436,
    -0.006306870374828577,
    -0.0033089471980929375,
    0.0025953203439712524,
    0.015288544818758965,
    0.014030626974999905,
    -0.003412621794268489,
    0.006324149668216705,
    0.0077203004620969296,
    -0.05053790286183357,
    0.016228528693318367,
    -0.002049301052466035,
    0.031185314059257507,
    0.007188104558736086,
    -0.002089042915031314,
    -0.028752418234944344,
    0.005836878903210163,
    -0.003345233155414462,
    -0.023872800171375275,
    0.018951714038848877,
    -0.03602346032857895,
    -0.002933990675956011,
    -0.07575156539678574,
    0.0013106195256114006,
    0.02153666689991951,
    -0.015896769240498543,
    0.012281982228159904,
    -0.032512348145246506,
    -0.014224153012037277,
    -0.0387604720890522,
    0.02930534817278385,
    -0.005867981351912022,
    -0.050759077072143555,
    -0.007568244822323322,
    -0.015316192060709,
    0.008086617104709148,
    -0.028337718918919563,
    -0.01383018959313631,
    0.04434507340192795,
    -0.008183380588889122,
    0.020790209993720055,
    -0.012171396054327488,
    -0.021191084757447243,
    0.0020337498281151056,
    0.032927047461271286,
    -0.009254684671759605,
    -0.014431501738727093,
    0.001467859256081283,
    -0.005930186249315739,
    0.02677568979561329,
    0.004686091095209122,
    -0.025351891294121742,
    0.017541740089654922,
    -0.0008941933047026396,
    0.00563989719375968,
    0.030107099562883377,
    0.005677911452949047,
    -8.099577098619193e-05,
    0.012834913097321987,
    -0.010243048891425133,
    0.011238324455916882,
    0.006123712286353111,
    -0.015357661992311478,
    -0.02601540833711624,
    0.02446720190346241,
    -0.0005706421798095107,
    -0.0007455930463038385,
    -0.01845407672226429,
    -0.01300770416855812,
    -0.008238673210144043,
    0.030521797016263008,
    0.012060809880495071,
    0.014680321328341961,
    0.01421032939106226,
    -0.040833961218595505,
    -0.014597381465137005,
    0.02225547656416893,
    -0.01000114157795906,
    0.02102520503103733,
    -0.001021194620989263,
    -0.0037737549282610416,
    -0.008079705759882927,
    0.012675945647060871,
    0.009337624534964561,
    0.02123255468904972,
    0.012254335917532444,
    -0.0023015758488327265,
    -0.0172099806368351,
    -0.0434880331158638,
    -0.013996068388223648,
    -0.008321613073348999,
    0.011272883042693138,
    -0.02312634326517582,
    -0.0165464635938406,
    0.034060556441545486,
    0.019421705976128578,
    0.03038356453180313,
    -0.011424939148128033,
    0.0009123363415710628,
    -0.003051488660275936,
    -0.02441190928220749,
    0.016836753115057945,
    -0.0003067039651796222,
    -0.011245236732065678,
    -0.04791148006916046,
    0.015813829377293587,
    0.05156082659959793,
    0.005456739105284214,
    -0.04959791898727417,
    0.03154471889138222,
    0.0014013347681611776,
    0.008121175691485405,
    -0.02056903764605522,
    0.002197901252657175,
    -0.0017037190264090896,
    -0.007174281403422356,
    0.011549348942935467,
    -0.0008099576807580888,
    -0.011079357005655766,
    3.688007200253196e-05,
    0.017389683052897453,
    0.011065534316003323,
    0.0037322849966585636,
    -0.011597730219364166,
    0.0022082687355577946,
    -0.03444760665297508,
    -0.0159797091037035,
    -0.005843790713697672,
    0.012392568401992321,
    0.0036528012715280056,
    0.0017348213586956263,
    0.0029512697365134954,
    0.005619162227958441,
    -0.01830201968550682,
    -0.01217830739915371,
    0.007084429729729891,
    -0.01669851876795292,
    0.00740236509591341,
    0.021509019657969475,
    0.007609714288264513,
    -0.02452249452471733,
    0.02096991240978241,
    0.020085223019123077,
    0.005833423230797052,
    0.0181499645113945,
    -0.0025832250248640776,
    0.010008052922785282,
    0.012966234236955643,
    0.015537364408373833,
    -0.017500270158052444,
    -0.001774563337676227,
    -0.008390729315578938,
    -0.006617894396185875,
    -0.0014514441136270761,
    -0.004699914250522852,
    -0.023361340165138245,
    -0.010167020373046398,
    -0.02225547656416893,
    -0.00999423023313284,
    -0.006925462279468775,
    -0.002565945964306593,
    0.07436923682689667,
    0.01633911393582821,
    0.0055258553475141525,
    -0.0070913415402174,
    -0.03126825392246246,
    0.004565137438476086,
    0.003915443550795317,
    0.022905170917510986,
    -0.030438857153058052,
    -0.013456961140036583,
    0.009669383056461811,
    -0.007430011872202158,
    -0.03104708157479763,
    -0.008964396081864834,
    -0.008245585486292839,
    0.01323578879237175,
    -0.026333345100283623,
    0.03038356453180313,
    -0.02019580826163292,
    0.021149614825844765,
    0.028047431260347366,
    -0.010595542378723621,
    0.016007356345653534,
    0.0016225072322413325,
    -0.010478044860064983,
    -0.00015972365508787334,
    0.0234442800283432,
    0.0294988751411438,
    -0.02513071894645691,
    -0.03079826384782791,
    0.004108969122171402,
    0.015703244134783745,
    -0.012689769268035889,
    -0.011708316393196583,
    -0.008570432662963867,
    0.01094803586602211,
    0.004036397207528353,
    -0.0013555451296269894,
    0.0033901589922606945,
    0.015495894476771355,
    -0.000353573530446738,
    0.002526204101741314,
    -0.02390044741332531,
    -0.022186361253261566,
    0.008964396081864834,
    -0.007257220800966024,
    -0.003815224627032876,
    -0.017458800226449966,
    -0.027079802006483078
  ]
}
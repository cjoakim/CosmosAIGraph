{
  "classifiers": [
    "intended audience :: developers",
    "license :: osi approved :: apache software license",
    "natural language :: english",
    "operating system :: macos",
    "operating system :: microsoft",
    "operating system :: posix",
    "programming language :: python",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "programming language :: python :: implementation :: cpython",
    "topic :: software development",
    "topic :: software development :: libraries"
  ],
  "description": "python wrapper for aio\n======================\n\n.. warning:: native linux aio implementation supports since 4.18 kernel version.\n\npython bindings for linux aio api and simple asyncio wrapper.\n\nexample\n-------\n\n.. code-block:: python\n\n    import asyncio\n    from caio import asynciocontext\n\n    loop = asyncio.get_event_loop()\n\n    async def main():\n        # max_requests=128 by default\n        ctx = asynciocontext(max_requests=128)\n\n        with open(\"test.file\", \"wb+\") as fp:\n            fd = fp.fileno()\n\n            # execute one write operation\n            await ctx.write(b\"hello world\", fd, offset=0)\n\n            # execute one read operation\n            print(await ctx.read(32, fd, offset=0))\n\n            # execute one fdsync operation\n            await ctx.fdsync(fd)\n\n            op1 = ctx.write(b\"hello from \", fd, offset=0)\n            op2 = ctx.write(b\"async world\", fd, offset=11)\n\n            await asyncio.gather(op1, op2)\n\n            print(await ctx.read(32, fd, offset=0))\n            # hello from async world\n\n\n    loop.run_until_complete(main())\n\n\ntroubleshooting\n---------------\n\nthe ``linux`` implementation works normal for modern linux kernel versions\nand file systems. so you may have problems specific for your environment.\nit's not a bug and might be resolved some ways:\n\n1. upgrade the kernel\n2. use compatible file system\n3. use threads based or pure python implementation.\n\nthe caio since version 0.7.0 contains some ways to do this.\n\n1. in runtime use the environment variable ``caio_impl`` with\npossible values:\n\n* ``linux`` - use native linux kernels aio mechanism\n* ``thread`` - use thread based implementation written in c\n* ``python`` - use pure python implementation\n\n2.  file ``default_implementation`` located near ``__init__.py`` in caio\ninstallation path. it's useful for distros package maintainers. this file\nmight contains comments (lines starts with ``#`` symbol) and the first line\nshould be one of ``linux`` ``thread`` or ``python``.\n\nprevious versions allows direct import of the target implementation.\n\n\n",
  "docs_url": null,
  "keywords": "",
  "license": "apache software license",
  "name": "caio",
  "package_url": "https://pypi.org/project/caio/",
  "project_url": "https://pypi.org/project/caio/",
  "project_urls": {
    "Documentation": "https://github.com/mosquito/caio/",
    "Source": "https://github.com/mosquito/caio"
  },
  "release_url": "https://pypi.org/project/caio/0.9.13/",
  "requires_dist": [
    "aiomisc-pytest ; extra == 'develop'",
    "pytest ; extra == 'develop'",
    "pytest-cov ; extra == 'develop'"
  ],
  "requires_python": ">=3.7, <4",
  "summary": "asynchronous file io for linux macos or windows.",
  "version": "0.9.13",
  "releases": [],
  "developers": [
    "me@mosquito.su"
  ],
  "kwds": "asynciocontext asyncio async fdsync python",
  "license_kwds": "apache software license",
  "libtype": "pypi",
  "id": "pypi_caio",
  "homepage": "",
  "release_count": 34,
  "dependency_ids": [
    "pypi_aiomisc_pytest",
    "pypi_pytest",
    "pypi_pytest_cov"
  ]
}
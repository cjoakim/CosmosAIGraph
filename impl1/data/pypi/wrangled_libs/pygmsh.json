{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: science/research",
    "license :: osi approved :: gnu general public license v3 or later (gplv3+)",
    "operating system :: os independent",
    "programming language :: python",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: scientific/engineering",
    "topic :: scientific/engineering :: mathematics",
    "topic :: utilities"
  ],
  "description": "<p align=\"center\">\n  <a href=\"https://github.com/nschloe/pygmsh\"><img alt=\"pygmsh\" src=\"https://nschloe.github.io/pygmsh/logo-with-text.svg\" width=\"60%\"></a>\n  <p align=\"center\">gmsh for python.</p>\n</p>\n\n[![pypi version](https://img.shields.io/pypi/v/pygmsh.svg?style=flat-square)](https://pypi.org/project/pygmsh/)\n[![pypi pyversions](https://img.shields.io/pypi/pyversions/pygmsh.svg?style=flat-square)](https://pypi.org/project/pygmsh/)\n[![doi](https://zenodo.org/badge/doi/10.5281/zenodo.1173105.svg?style=flat-square)](https://doi.org/10.5281/zenodo.1173105)\n[![github stars](https://img.shields.io/github/stars/nschloe/pygmsh.svg?style=flat-square&logo=github&label=stars&logocolor=white)](https://github.com/nschloe/pygmsh)\n[![pypi downloads](https://img.shields.io/pypi/dm/pygmsh.svg?style=flat-square)](https://pypistats.org/packages/pygmsh)\n\n[![discord](https://img.shields.io/static/v1?logo=discord&label=chat&message=on%20discord&color=7289da&style=flat-square)](https://discord.gg/hntj5mrx2y)\n[![documentation status](https://readthedocs.org/projects/pygmsh/badge/?version=latest&style=flat-square)](https://pygmsh.readthedocs.io/en/latest/?badge=latest)\n\n[![gh-actions](https://img.shields.io/github/workflow/status/nschloe/pygmsh/ci?style=flat-square)](https://github.com/nschloe/pygmsh/actions?query=workflow%3aci)\n[![codecov](https://img.shields.io/codecov/c/github/nschloe/pygmsh.svg?style=flat-square)](https://codecov.io/gh/nschloe/pygmsh)\n[![lgtm](https://img.shields.io/lgtm/grade/python/github/nschloe/pygmsh.svg?style=flat-square)](https://lgtm.com/projects/g/nschloe/pygmsh)\n[![code style: black](https://img.shields.io/badge/code%20style-black-000000.svg?style=flat-square)](https://github.com/psf/black)\n\npygmsh combines the power of [gmsh](https://gmsh.info/) with the versatility of python.\nit provides useful abstractions from gmsh's own python interface so you can create\ncomplex geometries more easily.\n\nto use, install gmsh itself and pygmsh from [pypi](https://pypi.org/project/pygmsh/):\n\n```\n[sudo] apt install python3-gmsh\npip install pygmsh\n```\n\nthis document and the [`tests/`](https://github.com/nschloe/pygmsh/tree/main/tests/)\ndirectory contain many small examples. see\n[here](https://pygmsh.readthedocs.io/en/latest/index.html) for the full documentation.\n\n#### flat shapes\n\n| <img src=\"https://nschloe.github.io/pygmsh/polygon.svg\" width=\"100%\"> | <img src=\"https://nschloe.github.io/pygmsh/circle.svg\" width=\"100%\"> | <img src=\"https://nschloe.github.io/pygmsh/splines.svg\" width=\"100%\"> |\n| :-------------------------------------------------------------------: | :------------------------------------------------------------------: | :-------------------------------------------------------------------: |\n|                                polygon                                |                                circle                                |                              (b-)splines                              |\n\ncodes:\n\n```python\nimport pygmsh\n\nwith pygmsh.geo.geometry() as geom:\n    geom.add_polygon(\n        [\n            [0.0, 0.0],\n            [1.0, -0.2],\n            [1.1, 1.2],\n            [0.1, 0.7],\n        ],\n        mesh_size=0.1,\n    )\n    mesh = geom.generate_mesh()\n\n# mesh.points, mesh.cells, ...\n# mesh.write(\"out.vtk\")\n```\n\n```python\nimport pygmsh\n\nwith pygmsh.geo.geometry() as geom:\n    geom.add_circle([0.0, 0.0], 1.0, mesh_size=0.2)\n    mesh = geom.generate_mesh()\n```\n\n```python\nimport pygmsh\n\nwith pygmsh.geo.geometry() as geom:\n    lcar = 0.1\n    p1 = geom.add_point([0.0, 0.0], lcar)\n    p2 = geom.add_point([1.0, 0.0], lcar)\n    p3 = geom.add_point([1.0, 0.5], lcar)\n    p4 = geom.add_point([1.0, 1.0], lcar)\n    s1 = geom.add_bspline([p1, p2, p3, p4])\n\n    p2 = geom.add_point([0.0, 1.0], lcar)\n    p3 = geom.add_point([0.5, 1.0], lcar)\n    s2 = geom.add_spline([p4, p3, p2, p1])\n\n    ll = geom.add_curve_loop([s1, s2])\n    pl = geom.add_plane_surface(ll)\n\n    mesh = geom.generate_mesh()\n```\n\nthe return value is always a [meshio](https://pypi.org/project/meshio/) mesh, so to\nstore it to a file you can\n\n<!--pytest-codeblocks:skip-->\n\n```python\nmesh.write(\"test.vtk\")\n```\n\nthe output file can be visualized with various tools, e.g.,\n[paraview](https://www.paraview.org/).\n\nwith\n\n<!--pytest-codeblocks:skip-->\n\n```python\npygmsh.write(\"test.msh\")\n```\n\nyou can access gmsh's native file writer.\n\n#### extrusions\n\n| <img src=\"https://nschloe.github.io/pygmsh/extrude.png\" width=\"100%\"> | <img src=\"https://nschloe.github.io/pygmsh/revolve.png\" width=\"100%\"> | <img src=\"https://nschloe.github.io/pygmsh/twist.png\" width=\"100%\"> |\n| :-------------------------------------------------------------------: | :-------------------------------------------------------------------: | :-----------------------------------------------------------------: |\n|                               `extrude`                               |                               `revolve`                               |                               `twist`                               |\n\n```python\nimport pygmsh\n\nwith pygmsh.geo.geometry() as geom:\n    poly = geom.add_polygon(\n        [\n            [0.0, 0.0],\n            [1.0, -0.2],\n            [1.1, 1.2],\n            [0.1, 0.7],\n        ],\n        mesh_size=0.1,\n    )\n    geom.extrude(poly, [0.0, 0.3, 1.0], num_layers=5)\n    mesh = geom.generate_mesh()\n```\n\n```python\nfrom math import pi\nimport pygmsh\n\nwith pygmsh.geo.geometry() as geom:\n    poly = geom.add_polygon(\n        [\n            [0.0, 0.2, 0.0],\n            [0.0, 1.2, 0.0],\n            [0.0, 1.2, 1.0],\n        ],\n        mesh_size=0.1,\n    )\n    geom.revolve(poly, [0.0, 0.0, 1.0], [0.0, 0.0, 0.0], 0.8 * pi)\n    mesh = geom.generate_mesh()\n```\n\n```python\nfrom math import pi\nimport pygmsh\n\nwith pygmsh.geo.geometry() as geom:\n    poly = geom.add_polygon(\n        [\n            [+0.0, +0.5],\n            [-0.1, +0.1],\n            [-0.5, +0.0],\n            [-0.1, -0.1],\n            [+0.0, -0.5],\n            [+0.1, -0.1],\n            [+0.5, +0.0],\n            [+0.1, +0.1],\n        ],\n        mesh_size=0.05,\n    )\n\n    geom.twist(\n        poly,\n        translation_axis=[0, 0, 1],\n        rotation_axis=[0, 0, 1],\n        point_on_axis=[0, 0, 0],\n        angle=pi / 3,\n    )\n\n    mesh = geom.generate_mesh()\n```\n\n#### opencascade\n\n| <img src=\"https://nschloe.github.io/pygmsh/intersection.png\" width=\"100%\"> | <img src=\"https://nschloe.github.io/pygmsh/ellipsoid-holes.png\" width=\"100%\"> | <img src=\"https://nschloe.github.io/pygmsh/puzzle.png\" width=\"100%\"> |\n| :------------------------------------------------------------------------: | :---------------------------------------------------------------------------: | :------------------------------------------------------------------: |\n|                                                                            |                                                                               |\n\ngmsh also supports opencascade (`occ`), allowing for a cad-style geometry specification.\n\n```python\nfrom math import pi, cos\nimport pygmsh\n\nwith pygmsh.occ.geometry() as geom:\n    geom.characteristic_length_max = 0.1\n    r = 0.5\n    disks = [\n        geom.add_disk([-0.5 * cos(7 / 6 * pi), -0.25], 1.0),\n        geom.add_disk([+0.5 * cos(7 / 6 * pi), -0.25], 1.0),\n        geom.add_disk([0.0, 0.5], 1.0),\n    ]\n    geom.boolean_intersection(disks)\n\n    mesh = geom.generate_mesh()\n```\n\n```python\n# ellpsoid with holes\nimport pygmsh\n\nwith pygmsh.occ.geometry() as geom:\n    geom.characteristic_length_max = 0.1\n    ellipsoid = geom.add_ellipsoid([0.0, 0.0, 0.0], [1.0, 0.7, 0.5])\n\n    cylinders = [\n        geom.add_cylinder([-1.0, 0.0, 0.0], [2.0, 0.0, 0.0], 0.3),\n        geom.add_cylinder([0.0, -1.0, 0.0], [0.0, 2.0, 0.0], 0.3),\n        geom.add_cylinder([0.0, 0.0, -1.0], [0.0, 0.0, 2.0], 0.3),\n    ]\n    geom.boolean_difference(ellipsoid, geom.boolean_union(cylinders))\n\n    mesh = geom.generate_mesh()\n```\n\n```python\n# puzzle piece\nimport pygmsh\n\nwith pygmsh.occ.geometry() as geom:\n    geom.characteristic_length_min = 0.1\n    geom.characteristic_length_max = 0.1\n\n    rectangle = geom.add_rectangle([-1.0, -1.0, 0.0], 2.0, 2.0)\n    disk1 = geom.add_disk([-1.2, 0.0, 0.0], 0.5)\n    disk2 = geom.add_disk([+1.2, 0.0, 0.0], 0.5)\n\n    disk3 = geom.add_disk([0.0, -0.9, 0.0], 0.5)\n    disk4 = geom.add_disk([0.0, +0.9, 0.0], 0.5)\n    flat = geom.boolean_difference(\n        geom.boolean_union([rectangle, disk1, disk2]),\n        geom.boolean_union([disk3, disk4]),\n    )\n\n    geom.extrude(flat, [0, 0, 0.3])\n\n    mesh = geom.generate_mesh()\n```\n\n#### mesh refinement/boundary layers\n\n| <img src=\"https://nschloe.github.io/pygmsh/boundary0.svg\" width=\"100%\"> | <img src=\"https://nschloe.github.io/pygmsh/mesh-refinement-2d.svg\" width=\"100%\"> | <img src=\"https://nschloe.github.io/pygmsh/ball-mesh-refinement.png\" width=\"70%\"> |\n| :---------------------------------------------------------------------: | :------------------------------------------------------------------------------: | :-------------------------------------------------------------------------------: |\n|                                                                         |                                                                                  |\n\n```python\n# boundary refinement\nimport pygmsh\n\nwith pygmsh.geo.geometry() as geom:\n    poly = geom.add_polygon(\n        [\n            [0.0, 0.0],\n            [2.0, 0.0],\n            [3.0, 1.0],\n            [1.0, 2.0],\n            [0.0, 1.0],\n        ],\n        mesh_size=0.3,\n    )\n\n    field0 = geom.add_boundary_layer(\n        edges_list=[poly.curves[0]],\n        lcmin=0.05,\n        lcmax=0.2,\n        distmin=0.0,\n        distmax=0.2,\n    )\n    field1 = geom.add_boundary_layer(\n        nodes_list=[poly.points[2]],\n        lcmin=0.05,\n        lcmax=0.2,\n        distmin=0.1,\n        distmax=0.4,\n    )\n    geom.set_background_mesh([field0, field1], operator=\"min\")\n\n    mesh = geom.generate_mesh()\n```\n\n<!--pytest-codeblocks:skip-->\n\n```python\n# mesh refinement with callback\nimport pygmsh\n\nwith pygmsh.geo.geometry() as geom:\n    geom.add_polygon(\n        [\n            [-1.0, -1.0],\n            [+1.0, -1.0],\n            [+1.0, +1.0],\n            [-1.0, +1.0],\n        ]\n    )\n    geom.set_mesh_size_callback(\n        lambda dim, tag, x, y, z: 6.0e-2 + 2.0e-1 * (x ** 2 + y ** 2)\n    )\n\n    mesh = geom.generate_mesh()\n```\n\n<!--pytest-codeblocks:skip-->\n\n```python\n# ball with mesh refinement\nfrom math import sqrt\nimport pygmsh\n\n\nwith pygmsh.occ.geometry() as geom:\n    geom.add_ball([0.0, 0.0, 0.0], 1.0)\n\n    geom.set_mesh_size_callback(\n        lambda dim, tag, x, y, z: abs(sqrt(x ** 2 + y ** 2 + z ** 2) - 0.5) + 0.1\n    )\n    mesh = geom.generate_mesh()\n```\n\n#### optimization\n\npygmsh can optimize existing meshes, too.\n\n<!--pytest-codeblocks:skip-->\n\n```python\nimport meshio\n\nmesh = meshio.read(\"mymesh.vtk\")\noptimized_mesh = pygmsh.optimize(mesh, method=\"\")\n```\n\nyou can also use the command-line utility\n\n```\npygmsh-optimize input.vtk output.xdmf\n```\n\nwhere input and output can be any format supported by\n[meshio](https://pypi.org/project/meshio/).\n\n### testing\n\nto run the pygmsh unit tests, check out this repository and type\n\n```\npytest\n```\n\n### building documentation\n\ndocs are built using [sphinx](http://www.sphinx-doc.org/en/stable/).\n\nto build, run\n\n```\nsphinx-build -b html doc doc/_build\n```\n\n### license\n\nthis software is published under the [gplv3 license](https://www.gnu.org/licenses/gpl-3.0.en.html).\n",
  "docs_url": null,
  "keywords": "mesh,gmsh,mesh generation,mathematics,engineering",
  "license": "",
  "name": "pygmsh",
  "package_url": "https://pypi.org/project/pygmsh/",
  "project_url": "https://pypi.org/project/pygmsh/",
  "project_urls": {
    "Code": "https://github.com/nschloe/pygmsh",
    "Documentation": "https://pygmsh.readthedocs.io/en/latest",
    "Funding": "https://github.com/sponsors/nschloe",
    "Issues": "https://github.com/nschloe/pygmsh/issues"
  },
  "release_url": "https://pypi.org/project/pygmsh/7.1.17/",
  "requires_dist": [
    "gmsh",
    "meshio >= 4.3.2, <6",
    "numpy >= 1.20.0"
  ],
  "requires_python": ">=3.7",
  "summary": "python frontend for gmsh",
  "version": "7.1.17",
  "releases": [],
  "developers": [
    "nico.schloemer@gmail.com"
  ],
  "kwds": "pygmsh generate_mesh mesh meshes gmsh",
  "license_kwds": "",
  "libtype": "pypi",
  "id": "pypi_pygmsh",
  "homepage": "",
  "release_count": 106,
  "dependency_ids": [
    "pypi_gmsh",
    "pypi_meshio",
    "pypi_numpy"
  ]
}
{
  "classifiers": [
    "development status :: 4 - beta",
    "natural language :: english",
    "operating system :: macos",
    "operating system :: microsoft :: windows",
    "operating system :: posix",
    "operating system :: unix",
    "programming language :: python",
    "topic :: scientific/engineering",
    "topic :: scientific/engineering :: mathematics",
    "topic :: scientific/engineering :: physics"
  ],
  "description": "properties\n**********\n\n\n.. image:: https://img.shields.io/pypi/v/properties.svg\n    :target: https://pypi.org/project/properties\n    :alt: latest pypi version\n\n.. image:: https://img.shields.io/badge/license-mit-blue.svg\n    :target: https://github.com/seequent/properties/blob/master/license\n    :alt: mit license\n\n.. image:: https://readthedocs.org/projects/propertiespy/badge/\n    :target: http://propertiespy.readthedocs.io/en/latest/\n    :alt: readthedocs\n\n.. image:: https://travis-ci.org/seequent/properties.svg?branch=master\n    :target: https://travis-ci.org/seequent/properties\n    :alt: travis tests\n\n.. image:: https://codecov.io/gh/seequent/properties/branch/master/graph/badge.svg\n    :target: https://codecov.io/gh/seequent/properties\n    :alt: code coverage\n\n\noverview video\n--------------\n\n.. image:: https://img.youtube.com/vi/djfohvaglqs/0.jpg\n    :target: https://www.youtube.com/watch?v=djfohvaglqs\n    :alt: python properties\n\nan overview of properties, november 2016.\n\nwhy\n---\n\nproperties provides structure to aid development in an interactive programming\nenvironment while allowing for an easy transition to production code.\nit emphasizes usability and reproducibility for developers and users at\nevery stage of the code life cycle.\n\nscope\n-----\n\nthe :code:`properties` package enables the creation of **strongly typed** objects in a\nconsistent, declarative way. this allows **validation** of developer expectations and hooks\ninto **notifications** and other libraries. it provides **documentation** with\nno extra work, and **serialization** for portability and reproducibility.\n\ngoals\n-----\n\n* keep a clean namespace for easy interactive programming\n* prioritize documentation\n* provide built-in serialization/deserialization\n* connect to other libraries for guis and visualizations\n\ndocumentation\n-------------\n\napi documentation is available at `readthedocs <https://propertiespy.readthedocs.io/en/latest/>`_.\n\nalternatives\n------------\n\n* `attrs <https://github.com/python-attrs/attrs>`_ - \"python classes without\n  boilerplate\" - this is a popular, actively developed library that aims to\n  simplify class creation, especially around object protocols (i.e. dunder\n  methods), with concise, declarative code.\n\n  similarities to properties include type-checking, defaults, validation, and\n  coercion. there are a number of differences:\n\n    1. attrs acts somewhat like a `namedtuple`, whereas properties acts\n       more like a `dict` or mutable object.\n\n       * as a result, attrs is able to tackle hashing, comparison methods,\n         string representation, etc.\n       * attrs does not suffer runtime performance penalties as much as properties\n       * on the other hand, properties focuses on interactivity, with\n         notifications, serialization/deserialization, and mutable,\n         possibly invalid states.\n\n    2. properties has many built-in types with existing, complex validation\n       already in place. this includes recursive validation of container\n       and instance properties. attrs only allows attribute type to be specified.\n    3. properties is more prescriptive and detailed around auto-generated\n       class documentation, for better or worse.\n\n* `traitlets <https://github.com/ipython/traitlets>`_ (jupyter project) and\n  `traits <https://github.com/enthought/traits>`_ (enthought) - these libraries\n  are driven by gui development (much of the jupyter environment is built\n  on traitlets; traits has automatic gui generation) which leads to many\n  similar features as properties such as strong typing, validation, and\n  notifications. also, some properties features and aspects of the api take\n  heavy inspiration from traitlets.\n\n  however, there are a few key areas where properties differs:\n\n    1. properties has a clean namespace - this (in addition to `?` docstrings)\n       allows for very easy discovery in an interactive programming environment.\n    2. properties prioritizes documentation - this is not explicitly implemented\n       yet in traits or traitlets, but works out-of-the-box in properties.\n    3. properties prioritizes serialization - this is present in traits with\n       pickling (but difficult to customize) and in traitlets with configuration\n       files (which require extra work beyond standard class definition); in\n       properties, serialization works out of the box but is also highly\n       customizable.\n    4. properties allows invalid object states - the gui focus of traits/traitlets\n       means an invalid object state at any time is never ok; without that constraint,\n       properties allows interactive object building and experimentation.\n       validation then occurs when the user is ready and calls :code:`validate`\n\n  significant advantages of traitlets and traits over properties are\n  gui interaction and larger suites of existing property types.\n  besides numerous types built-in to these libraries, some other examples are\n  `trait types that support unit conversion <https://github.com/astrofrog/numtraits>`_\n  and `numpy/scipy trait types <https://github.com/jupyter-widgets/traittypes>`_\n  (note: properties has a numpy array property type).\n\n  .. note::\n\n      properties provides a :code:`link` object which inter-operates with\n      traitlets and follows the same api as traitlets links\n\n* `param <https://github.com/ioam/param>`_ - this library also provides\n  type-checking, validation, and notification. it has a few unique features\n  and parameter types (possibly of note is the ability to provide dynamic\n  values for parameters at any time, not just as the default). this was first\n  introduced before built-in python properties, and current development is\n  very slow.\n\n* `built-in python dataclass decorator <https://www.python.org/dev/peps/pep-0557/>`_ -\n  provides \"mutable named tuples with defaults\" - this provides similar functionality\n  to the attrs by adding several object protocol dunder methods to a class. data\n  classes are clean, lightweight and included with python 3.7. however, they\n  don't provide as much builtin functionality or customization as the above\n  libraries.\n\n* `built-in python property <https://docs.python.org/3/library/functions.html#property>`_ -\n  properties/traits-like behavior can be mostly recreated using :code:`@property`.\n  this requires significantly more work by the programmer, and results in\n  not-declarative, difficult-to-read code.\n\n* `mypy <https://github.com/python/mypy>`_,  `pep 484 <https://www.python.org/dev/peps/pep-0484/>`_,\n  and `pep 526 <https://www.python.org/dev/peps/pep-0526/>`_ -\n  this provides static typing for python without coersion, notifications, etc.\n  it has a very different scope and implementation than traits-like libraries.\n\nconnections\n-----------\n\n* `casingsimulations <https://github.com/simpeg-research/casingsimulations>`_ - research repository for\n  electromagnetic simulations in the presence of well casing\n* `omf <https://github.com/gmsgdataexchange/omf>`_ - open mining format api and file serialization\n* `simpeg <https://github.com/simpeg/simpeg>`_ - simulation and parameter estimation in geophysics\n* `steno3d <https://github.com/seequent/steno3dpy>`_ - python client for building and uploading 3d models\n\ninstallation\n------------\n\nto install the repository, ensure that you have\n`pip installed <https://pip.pypa.io/en/stable/installing/>`_ and run:\n\n.. code::\n\n    pip install properties\n\nfor the development version:\n\n.. code::\n\n    git clone https://github.com/seequent/properties.git\n    cd properties\n    pip install -e .\n\nexamples\n========\n\nlets start by making a class to organize your coffee habits.\n\n.. code:: python\n\n        import properties\n        class coffeeprofile(properties.hasproperties):\n            name = properties.string('what should i call you?')\n            count = properties.integer(\n                'how many coffees have you had today?',\n                default=0\n            )\n            had_enough_coffee = properties.bool(\n                'have you had enough coffee today?',\n                default=false\n            )\n            caffeine_choice = properties.stringchoice(\n                'how do you take your caffeine?' ,\n                choices=['coffee', 'tea', 'latte', 'cappuccino', 'something fancy'],\n                required=false\n            )\n\n\nthe :code:`coffeeprofile` class has 4 properties, all of which are documented!\nthese can be set on class instantiation:\n\n.. code:: python\n\n    profile = coffeeprofile(name='bob')\n    print(profile.name)\n\n    out [1]: bob\n\nsince a default value was provided for :code:`had_enough_coffee`, the response is (naturally)\n\n.. code:: python\n\n    print(profile.had_enough_coffee)\n\n    out [2]: false\n\nwe can set bob's :code:`caffeine_choice` to one of the available choices; he likes coffee\n\n.. code:: python\n\n    profile.caffeine_choice = 'coffee'\n\nalso, bob is half way through his fourth cup of coffee today:\n\n.. code:: python\n\n    profile.count = 3.5\n\n    out [3]: valueerror: the 'count' property of a coffeeprofile instance must\n             be an integer.\n\nok, bob, chug that coffee:\n\n.. code:: python\n\n    profile.count = 4\n\nnow that bob's :code:`coffeeprofile` is established, :code:`properties` can\ncheck that it is valid:\n\n.. code:: python\n\n    profile.validate()\n\n    out [4]: true\n\nproperty classes are auto-documented in sphinx-style restructuredtext!\nwhen you ask for the doc string of :code:`coffeeprofile`, you get\n\n.. code:: rst\n\n    **required properties:**\n\n    * **count** (:class:`integer <properties.basic.integer>`): how many coffees have you had today?, an integer, default: 0\n    * **had_enough_coffee** (:class:`bool <properties.basic.bool>`): have you had enough coffee today?, a boolean, default: false\n    * **name** (:class:`string <properties.basic.string>`): what should i call you?, a unicode string\n\n    **optional properties:**\n\n    * **caffeine_choice** (:class:`stringchoice <properties.basic.stringchoice>`): how do you take your caffeine?, any of \"coffee\", \"tea\", \"latte\", \"cappuccino\", \"something fancy\"\n",
  "docs_url": null,
  "keywords": "declarative",
  "license": "",
  "name": "properties",
  "package_url": "https://pypi.org/project/properties/",
  "project_url": "https://pypi.org/project/properties/",
  "project_urls": {
    "Download": "https://github.com/seequent/properties",
    "Homepage": "https://github.com/seequent/properties"
  },
  "release_url": "https://pypi.org/project/properties/0.6.1/",
  "requires_dist": [],
  "requires_python": "",
  "summary": "properties: an organizational aid and wrapper for validation and tab completion of class properties",
  "version": "0.6.1",
  "releases": [],
  "developers": [
    "it@seequent.com",
    "seequent"
  ],
  "kwds": "propertiespy properties property attribute hasproperties",
  "license_kwds": "",
  "libtype": "pypi",
  "id": "pypi_properties",
  "homepage": "https://github.com/seequent/properties",
  "release_count": 42,
  "dependency_ids": []
}
{
  "classifiers": [
    "development status :: 5 - production/stable",
    "framework :: django",
    "framework :: django :: 1.11",
    "framework :: django :: 2.0",
    "framework :: django :: 2.1",
    "intended audience :: developers",
    "license :: osi approved :: bsd license",
    "natural language :: english",
    "operating system :: os independent",
    "programming language :: python :: 2.7",
    "programming language :: python :: 3",
    "programming language :: python :: 3.4",
    "programming language :: python :: 3.5",
    "programming language :: python :: 3.6",
    "programming language :: python :: 3.7",
    "topic :: text processing :: markup :: html"
  ],
  "description": "++++++++++++++\ndjango-htmlmin\n++++++++++++++\n\n.. image:: https://secure.travis-ci.org/cobrateam/django-htmlmin.png\n   :target: http://travis-ci.org/cobrateam/django-htmlmin\n\ndjango-html is an html minifier for python, with full support for html 5. it\nsupports django, flask and many other python web frameworks. it also provides a\ncommand line tool, that can be used for static websites or deployment scripts.\n\nwhy minify html code?\n=====================\n\none of the important points on client side optimization is to minify html. with\nminified html code, you reduce the size of the data transferred from the server\nto the client, which results in faster load times.\n\ninstalling\n==========\n\nto install django-htmlmin, run this on the terminal: :\n\n.. code-block:: sh\n\n    $ [sudo] pip install django-htmlmin\n\nusing the middleware\n====================\n\nall you need to do is add two middlewares to your ``middleware_classes`` and\nenable the ``html_minify`` setting:\n\n.. code-block:: python\n\n    middleware_classes = (\n        # other middleware classes\n        'htmlmin.middleware.htmlminifymiddleware',\n        'htmlmin.middleware.markrequestmiddleware',\n    )\n\nnote that if you're using django's caching middleware,\n``markrequestmiddleware`` should go after ``fetchfromcachemiddleware``, and\n``htmlminifymiddleware`` should go after ``updatecachemiddleware``:\n\n.. code-block:: python\n\n    middleware_classes = (\n        'django.middleware.cache.updatecachemiddleware',\n        'htmlmin.middleware.htmlminifymiddleware',\n        # other middleware classes\n        'django.middleware.cache.fetchfromcachemiddleware',\n        'htmlmin.middleware.markrequestmiddleware',\n    )\n\nyou can optionally specify the ``html_minify`` setting:\n\n\n.. code-block:: python\n\n    html_minify = true\n\nthe default value for the ``html_minify`` setting is ``not debug``. you only\nneed to set it to ``true`` if you want to minify your html code when ``debug``\nis enabled.\n\nexcluding some urls\n-------------------\n\nif you don't want to minify all views in your app and it's under a ``/my_app``\nurl, you can tell the middleware to not minify the response of your views by\nadding a ``exclude_from_minifying`` setting on your settings.py:\n\n.. code-block:: python\n\n    exclude_from_minifying = ('^my_app/', '^admin/')\n\nregex patterns are used for url exclusion. if you want to exclude all urls of\nyour app, except a specific view, you can use the decorator\n``@minified_response`` (check the next section above).\n\nkeeping comments\n----------------\n\nthe default behaviour of the middleware is to remove all html comments. if you\nwant to keep the comments, set the setting ``keep_comments_on_minifying``\nto ``true``:\n\n.. code-block:: python\n\n    keep_comments_on_minifying = true\n\nusing the decorator\n===================\n\ndjango-htmlmin also provides a decorator, that you can use only on views you\nwant to minify the response:\n\n.. code-block:: python\n\n    from htmlmin.decorators import minified_response\n\n    @minified_response\n    def home(request):\n        return render_to_response('home.html')\n\ndecorator to avoid response to be minified\n------------------------------------------\n\nyou can use the ``not_minified_response`` decorator on views if you want to\navoid the minification of any specific response, without using the\n``exclude_from_minifying`` setting:\n\n.. code-block:: python\n\n    from htmlmin.decorators import not_minified_response\n\n    @not_minified_response\n    def home(request):\n        return render_to_response('home.html')\n\nusing the ``html_minify`` function\n==================================\n\nif you are not working with django, you can invoke the ``html_minify`` function\nmanually:\n\n.. code-block:: python\n\n    from htmlmin.minify import html_minify\n    html = '<html>    <body>hello world</body>    </html>'\n    minified_html = html_minify(html)\n\nhere is an example with a `flask <http://flask.pocoo.org>`_ view:\n\n.. code-block:: python\n\n    from flask import flask\n    from htmlmin.minify import html_minify\n\n    app = flask(__name__)\n\n    @app.route('/')\n    def home():\n        rendered_html = render_template('home.html')\n        return html_minify(rendered_html)\n\nkeeping comments\n----------------\n\nby default, ``html_minify()`` removes all comments. if you want to keep them,\nyou can pass ``ignore_comments=false``:\n\n.. code-block:: python\n\n    from htmlmin.minify import html_minify\n    html = '<html>  <body>hello world<!-- comment to keep --></body>  </html>'\n    minified_html = html_minify(html, ignore_comments=false)\n\n\nusing command line tool\n=======================\n\nif you are not even using python, you can use the ``pyminify`` command line\ntool to minify html files:\n\n.. code-block:: sh\n\n    $ pyminify index.html > index_minified.html\n\nyou can also keep the comments, if you want:\n\n.. code-block:: sh\n\n    $ pyminify --keep-comments index.html > index_minified_with_comments.html\n\ndevelopment\n===========\n\n* source hosted at `github <http://github.com/cobrateam/django-htmlmin>`_\n* report issues on `github issues\n  <http://github.com/cobrateam/django-htmlmin/issues>`_\n\npull requests are very welcome! make sure your patches are well tested.\n\nrunning tests\n-------------\n\nif you are using a virtualenv, all you need to do is:\n\n.. code-block:: sh\n\n    $ make test\n\ncommunity\n=========\n\nirc channel\n-----------\n\n``#cobrateam`` channel on ``irc.freenode.net``\n\nchangelog\n=========\n\nyou can see the complete changelog on the\n`github releases page <https://github.com/cobrateam/django-htmlmin/releases>`_.\n\nlicense\n=======\n\nunless otherwise noted, the ``django-htmlmin`` source files are distributed\nunder the bsd-style license found in the license file.",
  "docs_url": null,
  "keywords": "django,html,minifier,minify",
  "license": "",
  "name": "django-htmlmin",
  "package_url": "https://pypi.org/project/django-htmlmin/",
  "project_url": "https://pypi.org/project/django-htmlmin/",
  "project_urls": null,
  "release_url": "https://pypi.org/project/django-htmlmin/0.11.0/",
  "requires_dist": [],
  "requires_python": "",
  "summary": "html minifier for python frameworks (not only django, despite the name).",
  "version": "0.11.0",
  "releases": [],
  "developers": [
    "andrewsmedina@gmail.com",
    "cobrateam"
  ],
  "kwds": "minified_html htmlmin html_minify htmlminifymiddleware django",
  "license_kwds": "",
  "libtype": "pypi",
  "id": "pypi_django_htmlmin",
  "homepage": "",
  "release_count": 23,
  "dependency_ids": []
}
{
  "classifiers": [
    "environment :: web environment",
    "framework :: django",
    "framework :: django :: 3.2",
    "framework :: django :: 4.0",
    "framework :: django :: 4.1",
    "intended audience :: developers",
    "license :: osi approved :: bsd license",
    "operating system :: os independent",
    "programming language :: python",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: internet :: www/http :: dynamic content",
    "topic :: software development :: libraries :: python modules"
  ],
  "description": "dj-database-url\n~~~~~~~~~~~~~~~\n\n.. image:: https://jazzband.co/static/img/badge.png\n   :target: https://jazzband.co/\n   :alt: jazzband\n\n.. image:: https://github.com/jazzband/dj-database-url/actions/workflows/test.yml/badge.svg\n   :target: https://github.com/jazzband/dj-database-url/actions/workflows/test.yml\n\n.. image:: https://codecov.io/gh/jazzband/dj-database-url/branch/master/graph/badge.svg?token=7srbupszoa\n   :target: https://codecov.io/gh/jazzband/dj-database-url\n\nthis simple django utility allows you to utilize the\n`12factor <http://www.12factor.net/backing-services>`_ inspired\n``database_url`` environment variable to configure your django application.\n\nthe ``dj_database_url.config`` method returns a django database connection\ndictionary, populated with all the data specified in your url. there is\nalso a `conn_max_age` argument to easily enable django's connection pool.\n\nif you'd rather not use an environment variable, you can pass a url in directly\ninstead to ``dj_database_url.parse``.\n\nsupported databases\n-------------------\n\nsupport currently exists for postgresql, postgis, mysql, mysql (gis),\noracle, oracle (gis), redshift, cockroachdb, timescale, timescale (gis) and sqlite.\n\ninstallation\n------------\n\ninstallation is simple:\n\n.. code-block:: console\n\n    $ pip install dj-database-url\n\nusage\n-----\n\n1. if ``databases`` is already defined:\n\n- configure your database in ``settings.py`` from ``database_url``:\n\n  .. code-block:: python\n\n      import dj_database_url\n\n      databases['default'] = dj_database_url.config(\n          conn_max_age=600,\n          conn_health_checks=true,\n      )\n\n- provide a default:\n\n  .. code-block:: python\n\n      databases['default'] = dj_database_url.config(\n          default='postgres://...',\n          conn_max_age=600,\n          conn_health_checks=true,\n      )\n\n- parse an arbitrary database url:\n\n  .. code-block:: python\n\n      databases['default'] = dj_database_url.parse(\n          'postgres://...',\n          conn_max_age=600,\n          conn_health_checks=true,\n      )\n\n2. if ``databases`` is not defined:\n\n- configure your database in ``settings.py`` from ``database_url``:\n\n  .. code-block:: python\n\n      import dj_database_url\n\n      databases = {\n          'default': dj_database_url.config(\n              conn_max_age=600,\n              conn_health_checks=true,\n          ),\n      }\n\n- you can provide a default, used if the ``database_url`` setting is not defined:\n\n  .. code-block:: python\n\n      databases = {\n          'default': dj_database_url.config(\n              default='postgres://...',\n              conn_max_age=600,\n              conn_health_checks=true,\n          )\n      }\n\n- parse an arbitrary database url:\n\n  .. code-block:: python\n\n      databases = {\n          'default': dj_database_url.parse(\n              'postgres://...',\n              conn_max_age=600,\n              conn_health_checks=true,\n          )\n      }\n\n``conn_max_age`` sets the |conn_max_age setting|__, which tells django to\npersist database connections between requests, up to the given lifetime in\nseconds. if you do not provide a value, it will follow django\u2019s default of\n``0``. setting it is recommended for performance.\n\n.. |conn_max_age setting| replace:: ``conn_max_age`` setting\n__ https://docs.djangoproject.com/en/stable/ref/settings/#conn-max-age\n\n``conn_health_checks`` sets the |conn_health_checks setting|__ (new in django\n4.1), which tells django to check a persisted connection still works at the\nstart of each request. if you do not provide a value, it will follow django\u2019s\ndefault of ``false``. enabling it is recommended if you set a non-zero\n``conn_max_age``.\n\n.. |conn_health_checks setting| replace:: ``conn_health_checks`` setting\n__ https://docs.djangoproject.com/en/stable/ref/settings/#conn-health-checks\n\nstrings passed to `dj_database_url` must be valid urls; in\nparticular, special characters must be url-encoded. the following url will raise\na `valueerror`:\n\n.. code-block:: plaintext\n\n    postgres://user:p#ssword!@localhost/foobar\n\nand should instead be passed as:\n\n.. code-block:: plaintext\n\n    postgres://user:p%23ssword!@localhost/foobar\n\n`test <https://docs.djangoproject.com/en/stable/ref/settings/#test>`_ settings can be configured using the ``test_options`` attribute::\n\n    databases['default'] = dj_database_url.config(default='postgres://...', test_options={'name': 'mytestdatabase'})\n\n\nurl schema\n----------\n\n+----------------------+-----------------------------------------------+--------------------------------------------------+\n| engine               | django backend                                | url                                              |\n+======================+===============================================+==================================================+\n| postgresql           | ``django.db.backends.postgresql`` [1]_        | ``postgres://user:password@host:port/name`` [2]_ |\n+----------------------+-----------------------------------------------+--------------------------------------------------+\n| postgis              | ``django.contrib.gis.db.backends.postgis``    | ``postgis://user:password@host:port/name``       |\n+----------------------+-----------------------------------------------+--------------------------------------------------+\n| mssql                | ``sql_server.pyodbc``                         | ``mssql://user:password@host:port/name``         |\n+----------------------+-----------------------------------------------+--------------------------------------------------+\n| mssql [5]_           | ``mssql``                                     | ``mssqlms://user:password@host:port/name``       |\n+----------------------+-----------------------------------------------+--------------------------------------------------+\n| mysql                | ``django.db.backends.mysql``                  | ``mysql://user:password@host:port/name`` [2]_    |\n+----------------------+-----------------------------------------------+--------------------------------------------------+\n| mysql (gis)          | ``django.contrib.gis.db.backends.mysql``      | ``mysqlgis://user:password@host:port/name``      |\n+----------------------+-----------------------------------------------+--------------------------------------------------+\n| sqlite               | ``django.db.backends.sqlite3``                | ``sqlite:///path`` [3]_                          |\n+----------------------+-----------------------------------------------+--------------------------------------------------+\n| spatialite           | ``django.contrib.gis.db.backends.spatialite`` | ``spatialite:///path`` [3]_                      |\n+----------------------+-----------------------------------------------+--------------------------------------------------+\n| oracle               | ``django.db.backends.oracle``                 | ``oracle://user:password@host:port/name`` [4]_   |\n+----------------------+-----------------------------------------------+--------------------------------------------------+\n| oracle (gis)         | ``django.contrib.gis.db.backends.oracle``     | ``oraclegis://user:password@host:port/name``     |\n+----------------------+-----------------------------------------------+--------------------------------------------------+\n| redshift             | ``django_redshift_backend``                   | ``redshift://user:password@host:port/name``      |\n+----------------------+-----------------------------------------------+--------------------------------------------------+\n| cockroachdb          | ``django_cockroachdb``                        | ``cockroach://user:password@host:port/name``     |\n+----------------------+-----------------------------------------------+--------------------------------------------------+\n| timescale [6]_       | ``timescale.db.backends.postgresql``          | ``timescale://user:password@host:port/name``     |\n+----------------------+-----------------------------------------------+--------------------------------------------------+\n| timescale (gis) [6]_ | ``timescale.db.backend.postgis``              | ``timescalegis://user:password@host:port/name``  |\n+----------------------+-----------------------------------------------+--------------------------------------------------+\n\n.. [1] the django.db.backends.postgresql backend is named django.db.backends.postgresql_psycopg2 in older releases. for\n       backwards compatibility, the old name still works in newer versions. (the new name does not work in older versions).\n.. [2] with postgresql or cloudsql, you can also use unix domain socket paths with\n       `percent encoding <http://www.postgresql.org/docs/9.2/interactive/libpq-connect.html#aen38162>`_:\n       ``postgres://%2fvar%2flib%2fpostgresql/dbname``\n       ``mysql://uf07k1i6d8ia0v@%2fcloudsql%2fproject%3alocation%3ainstance/dbname``\n.. [3] sqlite connects to file based databases. the same url format is used, omitting\n       the hostname, and using the \"file\" portion as the filename of the database.\n       this has the effect of four slashes being present for an absolute file path:\n       ``sqlite:////full/path/to/your/database/file.sqlite``.\n.. [4] note that when connecting to oracle the url isn't in the form you may know\n       from using other oracle tools (like sqlplus) i.e. user and password are separated\n       by ``:`` not by ``/``. also you can omit ``host`` and ``port``\n       and provide a full dsn string or tns name in ``name`` part.\n.. [5] microsoft official `mssql-django <https://github.com/microsoft/mssql-django>`_ adapter.\n.. [6] using the django-timescaledb package which must be installed.\n\n\ncontributing\n------------\n\nwe welcome contributions to this project. projects can take two forms:\n\n1. raising issues or helping others through the github issue tracker.\n2. contributing code.\n\nraising issues or helping others:\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nwhen submitting an issue or helping other remember you are talking to humans who have feelings, jobs and lives of their\nown. be nice, be kind, be polite. remember english may not be someone first language, if you do not understand or\nsomething is not clear be polite and re-ask/ re-word.\n\ncontributing code:\n^^^^^^^^^^^^^^^^^^\n\n* before writing code be sure to check existing pr's and issues in the tracker.\n* write code to the pylint spec.\n* large or wide sweeping changes will take longer, and may face more scrutiny than smaller confined changes.\n* code should be pass `black` and `flake8` validation.\n",
  "docs_url": null,
  "keywords": "",
  "license": "bsd",
  "name": "dj-database-url",
  "package_url": "https://pypi.org/project/dj-database-url/",
  "project_url": "https://pypi.org/project/dj-database-url/",
  "project_urls": {
    "GitHub": "https://github.com/jazzband/dj-database-url/",
    "Homepage": "https://github.com/jazzband/dj-database-url",
    "Release log": "https://github.com/jazzband/dj-database-url/blob/master/CHANGELOG.md"
  },
  "release_url": "https://pypi.org/project/dj-database-url/2.1.0/",
  "requires_dist": [],
  "requires_python": "",
  "summary": "use database urls in your django application.",
  "version": "2.1.0",
  "releases": [],
  "developers": [
    "original_author"
  ],
  "kwds": "dj_database_url django_cockroachdb django database_url django_redshift_backend",
  "license_kwds": "bsd",
  "libtype": "pypi",
  "id": "pypi_dj_database_url",
  "homepage": "https://github.com/jazzband/dj-database-url",
  "release_count": 18,
  "dependency_ids": []
}
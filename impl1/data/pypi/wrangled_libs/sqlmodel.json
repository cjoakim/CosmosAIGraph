{
  "classifiers": [
    "development status :: 4 - beta",
    "framework :: asyncio",
    "intended audience :: developers",
    "intended audience :: science/research",
    "intended audience :: system administrators",
    "license :: osi approved :: mit license",
    "programming language :: python :: 3",
    "programming language :: python :: 3 :: only",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.12",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: database",
    "topic :: database :: database engines/servers",
    "topic :: internet",
    "topic :: internet :: www/http",
    "topic :: internet :: www/http :: http servers",
    "typing :: typed"
  ],
  "description": "<p align=\"center\">\n  <a href=\"https://sqlmodel.tiangolo.com\"><img src=\"https://sqlmodel.tiangolo.com/img/logo-margin/logo-margin-vector.svg\" alt=\"sqlmodel\"></a>\n</p>\n<p align=\"center\">\n    <em>sqlmodel, sql databases in python, designed for simplicity, compatibility, and robustness.</em>\n</p>\n<p align=\"center\">\n<a href=\"https://github.com/tiangolo/sqlmodel/actions?query=workflow%3atest\" target=\"_blank\">\n    <img src=\"https://github.com/tiangolo/sqlmodel/workflows/test/badge.svg\" alt=\"test\">\n</a>\n<a href=\"https://github.com/tiangolo/sqlmodel/actions?query=workflow%3apublish\" target=\"_blank\">\n    <img src=\"https://github.com/tiangolo/sqlmodel/workflows/publish/badge.svg\" alt=\"publish\">\n</a>\n<a href=\"https://coverage-badge.samuelcolvin.workers.dev/redirect/tiangolo/sqlmodel\" target=\"_blank\">\n    <img src=\"https://coverage-badge.samuelcolvin.workers.dev/tiangolo/sqlmodel.svg\" alt=\"coverage\">\n<a href=\"https://pypi.org/project/sqlmodel\" target=\"_blank\">\n    <img src=\"https://img.shields.io/pypi/v/sqlmodel?color=%2334d058&label=pypi%20package\" alt=\"package version\">\n</a>\n</p>\n\n---\n\n**documentation**: <a href=\"https://sqlmodel.tiangolo.com\" target=\"_blank\">https://sqlmodel.tiangolo.com</a>\n\n**source code**: <a href=\"https://github.com/tiangolo/sqlmodel\" target=\"_blank\">https://github.com/tiangolo/sqlmodel</a>\n\n---\n\nsqlmodel is a library for interacting with <abbr title='also called \"relational databases\"'>sql databases</abbr> from python code, with python objects. it is designed to be intuitive, easy to use, highly compatible, and robust.\n\n**sqlmodel** is based on python type annotations, and powered by <a href=\"https://pydantic-docs.helpmanual.io/\" class=\"external-link\" target=\"_blank\">pydantic</a> and <a href=\"https://sqlalchemy.org/\" class=\"external-link\" target=\"_blank\">sqlalchemy</a>.\n\nthe key features are:\n\n* **intuitive to write**: great editor support. <abbr title=\"also known as auto-complete, autocompletion, intellisense\">completion</abbr> everywhere. less time debugging. designed to be easy to use and learn. less time reading docs.\n* **easy to use**: it has sensible defaults and does a lot of work underneath to simplify the code you write.\n* **compatible**: it is designed to be compatible with **fastapi**, pydantic, and sqlalchemy.\n* **extensible**: you have all the power of sqlalchemy and pydantic underneath.\n* **short**: minimize code duplication. a single type annotation does a lot of work. no need to duplicate models in sqlalchemy and pydantic.\n\n## sponsors\n\n<!-- sponsors -->\n\n<a href=\"https://www.govcert.lu\" target=\"_blank\" title=\"this project is being supported by govcert.lu\"><img src=\"https://sqlmodel.tiangolo.com/img/sponsors/govcert.png\"></a>\n\n<!-- /sponsors -->\n\n## sql databases in fastapi\n\n<a href=\"https://fastapi.tiangolo.com\" target=\"_blank\"><img src=\"https://fastapi.tiangolo.com/img/logo-margin/logo-teal.png\" style=\"width: 20%;\"></a>\n\n**sqlmodel** is designed to simplify interacting with sql databases in <a href=\"https://fastapi.tiangolo.com\" class=\"external-link\" target=\"_blank\">fastapi</a> applications, it was created by the same <a href=\"https://tiangolo.com/\" class=\"external-link\" target=\"_blank\">author</a>. \ud83d\ude01\n\nit combines sqlalchemy and pydantic and tries to simplify the code you write as much as possible, allowing you to reduce the **code duplication to a minimum**, but while getting the **best developer experience** possible.\n\n**sqlmodel** is, in fact, a thin layer on top of **pydantic** and **sqlalchemy**, carefully designed to be compatible with both.\n\n## requirements\n\na recent and currently supported <a href=\"https://www.python.org/downloads/\" class=\"external-link\" target=\"_blank\">version of python</a>.\n\nas **sqlmodel** is based on **pydantic** and **sqlalchemy**, it requires them. they will be automatically installed when you install sqlmodel.\n\n## installation\n\n<div class=\"termy\">\n\n```console\n$ pip install sqlmodel\n---> 100%\nsuccessfully installed sqlmodel\n```\n\n</div>\n\n## example\n\nfor an introduction to databases, sql, and everything else, see the <a href=\"https://sqlmodel.tiangolo.com/databases/\" target=\"_blank\">sqlmodel documentation</a>.\n\nhere's a quick example. \u2728\n\n### a sql table\n\nimagine you have a sql table called `hero` with:\n\n* `id`\n* `name`\n* `secret_name`\n* `age`\n\nand you want it to have this data:\n\n| id | name | secret_name | age |\n-----|------|-------------|------|\n| 1  | deadpond | dive wilson | null |\n| 2  | spider-boy | pedro parqueador | null |\n| 3  | rusty-man | tommy sharp | 48 |\n\n### create a sqlmodel model\n\nthen you could create a **sqlmodel** model like this:\n\n```python\nfrom typing import optional\n\nfrom sqlmodel import field, sqlmodel\n\n\nclass hero(sqlmodel, table=true):\n    id: optional[int] = field(default=none, primary_key=true)\n    name: str\n    secret_name: str\n    age: optional[int] = none\n```\n\nthat class `hero` is a **sqlmodel** model, the equivalent of a sql table in python code.\n\nand each of those class attributes is equivalent to each **table column**.\n\n### create rows\n\nthen you could **create each row** of the table as an **instance** of the model:\n\n```python\nhero_1 = hero(name=\"deadpond\", secret_name=\"dive wilson\")\nhero_2 = hero(name=\"spider-boy\", secret_name=\"pedro parqueador\")\nhero_3 = hero(name=\"rusty-man\", secret_name=\"tommy sharp\", age=48)\n```\n\nthis way, you can use conventional python code with **classes** and **instances** that represent **tables** and **rows**, and that way communicate with the **sql database**.\n\n### editor support\n\neverything is designed for you to get the best developer experience possible, with the best editor support.\n\nincluding **autocompletion**:\n\n<img class=\"shadow\" src=\"https://sqlmodel.tiangolo.com/img/index/autocompletion01.png\">\n\nand **inline errors**:\n\n<img class=\"shadow\" src=\"https://sqlmodel.tiangolo.com/img/index/inline-errors01.png\">\n\n### write to the database\n\nyou can learn a lot more about **sqlmodel** by quickly following the **tutorial**, but if you need a taste right now of how to put all that together and save to the database, you can do this:\n\n```python hl_lines=\"18  21  23-27\"\nfrom typing import optional\n\nfrom sqlmodel import field, session, sqlmodel, create_engine\n\n\nclass hero(sqlmodel, table=true):\n    id: optional[int] = field(default=none, primary_key=true)\n    name: str\n    secret_name: str\n    age: optional[int] = none\n\n\nhero_1 = hero(name=\"deadpond\", secret_name=\"dive wilson\")\nhero_2 = hero(name=\"spider-boy\", secret_name=\"pedro parqueador\")\nhero_3 = hero(name=\"rusty-man\", secret_name=\"tommy sharp\", age=48)\n\n\nengine = create_engine(\"sqlite:///database.db\")\n\n\nsqlmodel.metadata.create_all(engine)\n\nwith session(engine) as session:\n    session.add(hero_1)\n    session.add(hero_2)\n    session.add(hero_3)\n    session.commit()\n```\n\nthat will save a **sqlite** database with the 3 heroes.\n\n### select from the database\n\nthen you could write queries to select from that same database, for example with:\n\n```python hl_lines=\"15-18\"\nfrom typing import optional\n\nfrom sqlmodel import field, session, sqlmodel, create_engine, select\n\n\nclass hero(sqlmodel, table=true):\n    id: optional[int] = field(default=none, primary_key=true)\n    name: str\n    secret_name: str\n    age: optional[int] = none\n\n\nengine = create_engine(\"sqlite:///database.db\")\n\nwith session(engine) as session:\n    statement = select(hero).where(hero.name == \"spider-boy\")\n    hero = session.exec(statement).first()\n    print(hero)\n```\n\n### editor support everywhere\n\n**sqlmodel** was carefully designed to give you the best developer experience and editor support, **even after selecting data** from the database:\n\n<img class=\"shadow\" src=\"https://sqlmodel.tiangolo.com/img/index/autocompletion02.png\">\n\n## sqlalchemy and pydantic\n\nthat class `hero` is a **sqlmodel** model.\n\nbut at the same time, \u2728 it is a **sqlalchemy** model \u2728. so, you can combine it and use it with other sqlalchemy models, or you could easily migrate applications with sqlalchemy to **sqlmodel**.\n\nand at the same time, \u2728 it is also a **pydantic** model \u2728. you can use inheritance with it to define all your **data models** while avoiding code duplication. that makes it very easy to use with **fastapi**.\n\n## license\n\nthis project is licensed under the terms of the [mit license](https://github.com/tiangolo/sqlmodel/blob/main/license).\n",
  "docs_url": null,
  "keywords": "",
  "license": "mit",
  "name": "sqlmodel",
  "package_url": "https://pypi.org/project/sqlmodel/",
  "project_url": "https://pypi.org/project/sqlmodel/",
  "project_urls": {
    "Documentation": "https://sqlmodel.tiangolo.com",
    "Homepage": "https://github.com/tiangolo/sqlmodel",
    "Repository": "https://github.com/tiangolo/sqlmodel"
  },
  "release_url": "https://pypi.org/project/sqlmodel/0.0.14/",
  "requires_dist": [
    "SQLAlchemy (>=2.0.0,<2.1.0)",
    "pydantic (>=1.10.13,<3.0.0)"
  ],
  "requires_python": ">=3.7,<4.0",
  "summary": "sqlmodel, sql databases in python, designed for simplicity, compatibility, and robustness.",
  "version": "0.0.14",
  "releases": [],
  "developers": [
    "tiangolo@gmail.com"
  ],
  "kwds": "sqlmodel sqlalchemy workflow sql href",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_sqlmodel",
  "homepage": "https://github.com/tiangolo/sqlmodel",
  "release_count": 14,
  "dependency_ids": [
    "pypi_pydantic",
    "pypi_sqlalchemy"
  ]
}
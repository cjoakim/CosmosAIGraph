{
  "classifiers": [
    "license :: osi approved :: apache software license",
    "operating system :: os independent",
    "programming language :: python :: 3",
    "topic :: security",
    "topic :: security :: cryptography",
    "topic :: utilities"
  ],
  "description": "pyaescrypt\n===============\n.. image:: https://github.com/marcobellaccini/pyaescrypt/actions/workflows/main.yml/badge.svg\n    :target: https://github.com/marcobellaccini/pyaescrypt/actions\n.. image:: https://pepy.tech/badge/pyaescrypt\n    :target: https://pepy.tech/project/pyaescrypt\n\nabout pyaescrypt\n--------------------------\npyaescrypt is a python 3 file-encryption module and script that uses aes256-cbc to encrypt/decrypt files and binary streams.\n\npyaescrypt is compatible with the `aes crypt`_ `file format`_ (version 2).\n\nit is free software, released under the `apache license, version 2.0`_.\n\npyaescrypt is brought to you by marco bellaccini - marco.bellaccini(at!)gmail.com.\n \nimportant security note: version 2 of the aes crypt file format does not authenticate the \"file size modulo 16\" byte. this implies that an attacker  \nwith write access to the encrypted file may alter the corresponding plaintext file size by up to 15 bytes.\n\nnote: there is no low-level memory management in python, hence it is not possible to wipe memory areas were sensitive information was stored.\n\nmodule usage example\n------------------------\nhere is an example showing encryption and decryption of a file:\n\n.. code:: python\n\n    import pyaescrypt\n    password = \"please-use-a-long-and-random-password\"\n    # encrypt\n    pyaescrypt.encryptfile(\"data.txt\", \"data.txt.aes\", password)\n    # decrypt\n    pyaescrypt.decryptfile(\"data.txt.aes\", \"dataout.txt\", password)\n\n**this is the most straightforward way to use pyaescrypt, and should be preferred.**\n\nif you need to specify a custom buffer size (default is 64kb), you can pass it as an optional argument:\n\n.. code:: python\n\n    import pyaescrypt\n    # custom encryption/decryption buffer size (default is 64kb)\n    buffersize = 128 * 1024\n    password = \"please-use-a-long-and-random-password\"\n    # encrypt\n    pyaescrypt.encryptfile(\"data.txt\", \"data.txt.aes\", password, buffersize)\n    # decrypt\n    pyaescrypt.decryptfile(\"data.txt.aes\", \"dataout.txt\", password, buffersize)\n\nin case you need it, you can work with binary streams too:\n\n.. code:: python\n\n    import pyaescrypt\n    from os import stat, remove\n    # encryption/decryption buffer size - 64k\n    # with stream-oriented functions, setting buffer size is mandatory\n    buffersize = 64 * 1024\n    password = \"please-use-a-long-and-random-password\"\n    \n    # encrypt\n    with open(\"data.txt\", \"rb\") as fin:\n        with open(\"data.txt.aes\", \"wb\") as fout:\n            pyaescrypt.encryptstream(fin, fout, password, buffersize)\n    \n    # decrypt\n    with open(\"data.txt.aes\", \"rb\") as fin:\n        try:\n            with open(\"dataout.txt\", \"wb\") as fout:\n                # decrypt file stream\n                pyaescrypt.decryptstream(fin, fout, password, buffersize)\n        except valueerror:\n            # remove output file on error\n            remove(\"dataout.txt\")\n\nyou can also perform in-memory encryption/decryption (using bytesio):\n\n.. code:: python\n\n    import pyaescrypt\n    import io\n    \n    buffersize = 64 * 1024\n    password = \"please-use-a-long-and-random-password\"\n    \n    # binary data to be encrypted\n    pbdata = b\"this is binary plaintext \\x00\\x01\"\n    \n    # input plaintext binary stream\n    fin = io.bytesio(pbdata)\n    \n    # initialize ciphertext binary stream\n    fciph = io.bytesio()\n    \n    # initialize decrypted binary stream\n    fdec = io.bytesio()\n    \n    # encrypt stream\n    pyaescrypt.encryptstream(fin, fciph, password, buffersize)\n    \n    # print encrypted data\n    print(\"this is the ciphertext:\\n\" + str(fciph.getvalue()))\n    \n    # go back to the start of the ciphertext stream\n    fciph.seek(0)\n    \n    # decrypt stream\n    pyaescrypt.decryptstream(fciph, fdec, password, buffersize)\n    \n    # print decrypted data\n    print(\"decrypted data:\\n\" + str(fdec.getvalue()))\n\n\n\nscript usage examples\n------------------------\nencrypt file test.txt in test.txt.aes:\n\n\tpyaescrypt -e test.txt\n\ndecrypt file test.txt.aes in test.txt:\n\n\tpyaescrypt -d test.txt.aes\n\t\nencrypt file test.txt in test2.txt.aes:\n\n\tpyaescrypt -e test.txt -o test2.txt.aes\n\ndecrypt file test.txt.aes in test2.txt:\n\n\tpyaescrypt -d test.txt.aes -o test2.txt\n\nfaqs\n------------------------\n- *is pyaescrypt malware?*\n\n  **no!** of course it isn't!\n\n  nevertheless, being a module, it can be used by any other software, including malware.\n  \n  in fact, it has been reported that it is used as crypto library by some ransomware.\n\n.. _aes crypt: https://www.aescrypt.com\n.. _file format: https://www.aescrypt.com/aes_file_format.html\n.. _apache license, version 2.0: http://www.apache.org/licenses/license-2.0\n",
  "docs_url": null,
  "keywords": "aes crypt encrypt decrypt",
  "license": "apache license 2.0",
  "name": "pyaescrypt",
  "package_url": "https://pypi.org/project/pyAesCrypt/",
  "project_url": "https://pypi.org/project/pyAesCrypt/",
  "project_urls": {
    "Homepage": "https://github.com/marcobellaccini/pyAesCrypt"
  },
  "release_url": "https://pypi.org/project/pyAesCrypt/6.1.1/",
  "requires_dist": [
    "cryptography"
  ],
  "requires_python": "",
  "summary": "encrypt and decrypt files and streams in aes crypt format (version 2)",
  "version": "6.1.1",
  "releases": [],
  "developers": [
    "marco_bellaccini"
  ],
  "kwds": "pyaescrypt aes_file_format encryptstream decryptfile encryptfile",
  "license_kwds": "apache license 2.0",
  "libtype": "pypi",
  "id": "pypi_pyaescrypt",
  "homepage": "https://github.com/marcobellaccini/pyaescrypt",
  "release_count": 17,
  "dependency_ids": [
    "pypi_cryptography"
  ]
}
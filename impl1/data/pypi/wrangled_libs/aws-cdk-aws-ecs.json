{
  "classifiers": [
    "development status :: 7 - inactive",
    "framework :: aws cdk",
    "framework :: aws cdk :: 1",
    "intended audience :: developers",
    "license :: osi approved",
    "operating system :: os independent",
    "programming language :: javascript",
    "programming language :: python :: 3 :: only",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "typing :: typed"
  ],
  "description": "the cdk construct library for aws::ecs\n# amazon ecs construct library\n\n<!--begin stability banner-->---\n\n\n![end-of-support](https://img.shields.io/badge/end--of--support-critical.svg?style=for-the-badge)\n\n> aws cdk v1 has reached end-of-support on 2023-06-01.\n> this package is no longer being updated, and users should migrate to aws cdk v2.\n>\n> for more information on how to migrate, see the [*migrating to aws cdk v2* guide](https://docs.aws.amazon.com/cdk/v2/guide/migrating-v2.html).\n\n---\n<!--end stability banner-->\n\nthis package contains constructs for working with **amazon elastic container\nservice** (amazon ecs).\n\namazon elastic container service (amazon ecs) is a fully managed container orchestration service.\n\nfor further information on amazon ecs,\nsee the [amazon ecs documentation](https://docs.aws.amazon.com/ecs)\n\nthe following example creates an amazon ecs cluster, adds capacity to it, and\nruns a service on it:\n\n```python\n# vpc: ec2.vpc\n\n\n# create an ecs cluster\ncluster = ecs.cluster(self, \"cluster\",\n    vpc=vpc\n)\n\n# add capacity to it\ncluster.add_capacity(\"defaultautoscalinggroupcapacity\",\n    instance_type=ec2.instancetype(\"t2.xlarge\"),\n    desired_capacity=3\n)\n\ntask_definition = ecs.ec2taskdefinition(self, \"taskdef\")\n\ntask_definition.add_container(\"defaultcontainer\",\n    image=ecs.containerimage.from_registry(\"amazon/amazon-ecs-sample\"),\n    memory_limit_mi_b=512\n)\n\n# instantiate an amazon ecs service\necs_service = ecs.ec2service(self, \"service\",\n    cluster=cluster,\n    task_definition=task_definition\n)\n```\n\nfor a set of constructs defining common ecs architectural patterns, see the `@aws-cdk/aws-ecs-patterns` package.\n\n## launch types: aws fargate vs amazon ec2\n\nthere are two sets of constructs in this library; one to run tasks on amazon ec2 and\none to run tasks on aws fargate.\n\n* use the `ec2taskdefinition` and `ec2service` constructs to run tasks on amazon ec2 instances running in your account.\n* use the `fargatetaskdefinition` and `fargateservice` constructs to run tasks on\n  instances that are managed for you by aws.\n* use the `externaltaskdefinition` and `externalservice` constructs to run aws ecs anywhere tasks on self-managed infrastructure.\n\nhere are the main differences:\n\n* **amazon ec2**: instances are under your control. complete control of task to host\n  allocation. required to specify at least a memory reservation or limit for\n  every container. can use host, bridge and awsvpc networking modes. can attach\n  classic load balancer. can share volumes between container and host.\n* **aws fargate**: tasks run on aws-managed instances, aws manages task to host\n  allocation for you. requires specification of memory and cpu sizes at the\n  taskdefinition level. only supports awsvpc networking modes and\n  application/network load balancers. only the aws log driver is supported.\n  many host features are not supported such as adding kernel capabilities\n  and mounting host devices/volumes inside the container.\n* **aws ecsanywhere**: tasks are run and managed by aws ecs anywhere on infrastructure owned by the customer. only bridge networking mode is supported. does not support autoscaling, load balancing, cloudmap or attachment of volumes.\n\nfor more information on amazon ec2 vs aws fargate, networking and ecs anywhere see the aws documentation:\n[aws fargate](https://docs.aws.amazon.com/amazonecs/latest/developerguide/aws_fargate.html),\n[task networking](https://docs.aws.amazon.com/amazonecs/latest/developerguide/task-networking.html),\n[ecs anywhere](https://aws.amazon.com/ecs/anywhere/)\n\n## clusters\n\na `cluster` defines the infrastructure to run your\ntasks on. you can run many tasks on a single cluster.\n\nthe following code creates a cluster that can run aws fargate tasks:\n\n```python\n# vpc: ec2.vpc\n\n\ncluster = ecs.cluster(self, \"cluster\",\n    vpc=vpc\n)\n```\n\nthe following code imports an existing cluster using the arn which can be used to\nimport an amazon ecs service either ec2 or fargate.\n\n```python\ncluster_arn = \"arn:aws:ecs:us-east-1:012345678910:cluster/clustername\"\n\ncluster = ecs.cluster.from_cluster_arn(self, \"cluster\", cluster_arn)\n```\n\nto use tasks with amazon ec2 launch-type, you have to add capacity to\nthe cluster in order for tasks to be scheduled on your instances.  typically,\nyou add an autoscalinggroup with instances running the latest\namazon ecs-optimized ami to the cluster. there is a method to build and add such an\nautoscalinggroup automatically, or you can supply a customized autoscalinggroup\nthat you construct yourself. it's possible to add multiple autoscalinggroups\nwith various instance types.\n\nthe following example creates an amazon ecs cluster and adds capacity to it:\n\n```python\n# vpc: ec2.vpc\n\n\ncluster = ecs.cluster(self, \"cluster\",\n    vpc=vpc\n)\n\n# either add default capacity\ncluster.add_capacity(\"defaultautoscalinggroupcapacity\",\n    instance_type=ec2.instancetype(\"t2.xlarge\"),\n    desired_capacity=3\n)\n\n# or add customized capacity. be sure to start the amazon ecs-optimized ami.\nauto_scaling_group = autoscaling.autoscalinggroup(self, \"asg\",\n    vpc=vpc,\n    instance_type=ec2.instancetype(\"t2.xlarge\"),\n    machine_image=ecs.ecsoptimizedimage.amazon_linux(),\n    # or use amazon ecs-optimized amazon linux 2 ami\n    # machineimage: ecsoptimizedimage.amazonlinux2(),\n    desired_capacity=3\n)\n\ncapacity_provider = ecs.asgcapacityprovider(self, \"asgcapacityprovider\",\n    auto_scaling_group=auto_scaling_group\n)\ncluster.add_asg_capacity_provider(capacity_provider)\n```\n\nif you omit the property `vpc`, the construct will create a new vpc with two azs.\n\nby default, all machine images will auto-update to the latest version\non each deployment, causing a replacement of the instances in your autoscalinggroup\nif the ami has been updated since the last deployment.\n\nif task draining is enabled, ecs will transparently reschedule tasks on to the new\ninstances before terminating your old instances. if you have disabled task draining,\nthe tasks will be terminated along with the instance. to prevent that, you\ncan pick a non-updating ami by passing `cacheincontext: true`, but be sure\nto periodically update to the latest ami manually by using the [cdk cli\ncontext management commands](https://docs.aws.amazon.com/cdk/latest/guide/context.html):\n\n```python\n# vpc: ec2.vpc\n\nauto_scaling_group = autoscaling.autoscalinggroup(self, \"asg\",\n    machine_image=ecs.ecsoptimizedimage.amazon_linux(cached_in_context=true),\n    vpc=vpc,\n    instance_type=ec2.instancetype(\"t2.micro\")\n)\n```\n\n### bottlerocket\n\n[bottlerocket](https://aws.amazon.com/bottlerocket/) is a linux-based open source operating system that is\npurpose-built by aws for running containers. you can launch amazon ecs container instances with the bottlerocket ami.\n\nthe following example will create a capacity with self-managed amazon ec2 capacity of 2 `c5.large` linux instances running with `bottlerocket` ami.\n\nthe following example adds bottlerocket capacity to the cluster:\n\n```python\n# cluster: ecs.cluster\n\n\ncluster.add_capacity(\"bottlerocket-asg\",\n    min_capacity=2,\n    instance_type=ec2.instancetype(\"c5.large\"),\n    machine_image=ecs.bottlerocketimage()\n)\n```\n\n### arm64 (graviton) instances\n\nto launch instances with arm64 hardware, you can use the amazon ecs-optimized\namazon linux 2 (arm64) ami. based on amazon linux 2, this ami is recommended\nfor use when launching your ec2 instances that are powered by arm-based aws\ngraviton processors.\n\n```python\n# cluster: ecs.cluster\n\n\ncluster.add_capacity(\"graviton-cluster\",\n    min_capacity=2,\n    instance_type=ec2.instancetype(\"c6g.large\"),\n    machine_image=ecs.ecsoptimizedimage.amazon_linux2(ecs.amihardwaretype.arm)\n)\n```\n\nbottlerocket is also supported:\n\n```python\n# cluster: ecs.cluster\n\n\ncluster.add_capacity(\"graviton-cluster\",\n    min_capacity=2,\n    instance_type=ec2.instancetype(\"c6g.large\"),\n    machine_image_type=ecs.machineimagetype.bottlerocket\n)\n```\n\n### spot instances\n\nto add spot instances into the cluster, you must specify the `spotprice` in the `ecs.addcapacityoptions` and optionally enable the `spotinstancedraining` property.\n\n```python\n# cluster: ecs.cluster\n\n\n# add an autoscalinggroup with spot instances to the existing cluster\ncluster.add_capacity(\"asgspot\",\n    max_capacity=2,\n    min_capacity=2,\n    desired_capacity=2,\n    instance_type=ec2.instancetype(\"c5.xlarge\"),\n    spot_price=\"0.0735\",\n    # enable the automated spot draining support for amazon ecs\n    spot_instance_draining=true\n)\n```\n\n### sns topic encryption\n\nwhen the `ecs.addcapacityoptions` that you provide has a non-zero `taskdraintime` (the default) then an sns topic and lambda are created to ensure that the\ncluster's instances have been properly drained of tasks before terminating. the sns topic is sent the instance-terminating lifecycle event from the autoscalinggroup,\nand the lambda acts on that event. if you wish to engage [server-side encryption](https://docs.aws.amazon.com/sns/latest/dg/sns-data-encryption.html) for this sns topic\nthen you may do so by providing a kms key for the `topicencryptionkey` property of `ecs.addcapacityoptions`.\n\n```python\n# given\n# cluster: ecs.cluster\n# key: kms.key\n\n# then, use that key to encrypt the lifecycle-event sns topic.\ncluster.add_capacity(\"asgencryptedsns\",\n    instance_type=ec2.instancetype(\"t2.xlarge\"),\n    desired_capacity=3,\n    topic_encryption_key=key\n)\n```\n\n## task definitions\n\na task definition describes what a single copy of a **task** should look like.\na task definition has one or more containers; typically, it has one\nmain container (the *default container* is the first one that's added\nto the task definition, and it is marked *essential*) and optionally\nsome supporting containers which are used to support the main container,\ndoings things like upload logs or metrics to monitoring services.\n\nto run a task or service with amazon ec2 launch type, use the `ec2taskdefinition`. for aws fargate tasks/services, use the\n`fargatetaskdefinition`. for aws ecs anywhere use the `externaltaskdefinition`. these classes\nprovide simplified apis that only contain properties relevant for each specific launch type.\n\nfor a `fargatetaskdefinition`, specify the task size (`memorylimitmib` and `cpu`):\n\n```python\nfargate_task_definition = ecs.fargatetaskdefinition(self, \"taskdef\",\n    memory_limit_mi_b=512,\n    cpu=256\n)\n```\n\non fargate platform version 1.4.0 or later, you may specify up to 200gib of\n[ephemeral storage](https://docs.aws.amazon.com/amazonecs/latest/developerguide/fargate-task-storage.html#fargate-task-storage-pv14):\n\n```python\nfargate_task_definition = ecs.fargatetaskdefinition(self, \"taskdef\",\n    memory_limit_mi_b=512,\n    cpu=256,\n    ephemeral_storage_gi_b=100\n)\n```\n\nto add containers to a task definition, call `addcontainer()`:\n\n```python\nfargate_task_definition = ecs.fargatetaskdefinition(self, \"taskdef\",\n    memory_limit_mi_b=512,\n    cpu=256\n)\ncontainer = fargate_task_definition.add_container(\"webcontainer\",\n    # use an image from dockerhub\n    image=ecs.containerimage.from_registry(\"amazon/amazon-ecs-sample\")\n)\n```\n\nfor a `ec2taskdefinition`:\n\n```python\nec2_task_definition = ecs.ec2taskdefinition(self, \"taskdef\",\n    network_mode=ecs.networkmode.bridge\n)\n\ncontainer = ec2_task_definition.add_container(\"webcontainer\",\n    # use an image from dockerhub\n    image=ecs.containerimage.from_registry(\"amazon/amazon-ecs-sample\"),\n    memory_limit_mi_b=1024\n)\n```\n\nfor an `externaltaskdefinition`:\n\n```python\nexternal_task_definition = ecs.externaltaskdefinition(self, \"taskdef\")\n\ncontainer = external_task_definition.add_container(\"webcontainer\",\n    # use an image from dockerhub\n    image=ecs.containerimage.from_registry(\"amazon/amazon-ecs-sample\"),\n    memory_limit_mi_b=1024\n)\n```\n\nyou can specify container properties when you add them to the task definition, or with various methods, e.g.:\n\nto add a port mapping when adding a container to the task definition, specify the `portmappings` option:\n\n```python\n# task_definition: ecs.taskdefinition\n\n\ntask_definition.add_container(\"webcontainer\",\n    image=ecs.containerimage.from_registry(\"amazon/amazon-ecs-sample\"),\n    memory_limit_mi_b=1024,\n    port_mappings=[ecs.portmapping(container_port=3000)]\n)\n```\n\nto add port mappings directly to a container definition, call `addportmappings()`:\n\n```python\n# container: ecs.containerdefinition\n\n\ncontainer.add_port_mappings(\n    container_port=3000\n)\n```\n\nto add data volumes to a task definition, call `addvolume()`:\n\n```python\nfargate_task_definition = ecs.fargatetaskdefinition(self, \"taskdef\",\n    memory_limit_mi_b=512,\n    cpu=256\n)\nvolume = {\n    # use an elastic filesystem\n    \"name\": \"mydatavolume\",\n    \"efs_volume_configuration\": {\n        \"file_system_id\": \"efs\"\n    }\n}\n\ncontainer = fargate_task_definition.add_volume(volume)\n```\n\n> note: ecs anywhere doesn't support volume attachments in the task definition.\n\nto use a taskdefinition that can be used with either amazon ec2 or\naws fargate launch types, use the `taskdefinition` construct.\n\nwhen creating a task definition you have to specify what kind of\ntasks you intend to run: amazon ec2, aws fargate, or both.\nthe following example uses both:\n\n```python\ntask_definition = ecs.taskdefinition(self, \"taskdef\",\n    memory_mi_b=\"512\",\n    cpu=\"256\",\n    network_mode=ecs.networkmode.aws_vpc,\n    compatibility=ecs.compatibility.ec2_and_fargate\n)\n```\n\n### images\n\nimages supply the software that runs inside the container. images can be\nobtained from either dockerhub or from ecr repositories, built directly from a local dockerfile, or use an existing tarball.\n\n* `ecs.containerimage.fromregistry(imagename)`: use a public image.\n* `ecs.containerimage.fromregistry(imagename, { credentials: mysecret })`: use a private image that requires credentials.\n* `ecs.containerimage.fromecrrepository(repo, tagordigest)`: use the given ecr repository as the image\n  to start. if no tag or digest is provided, \"latest\" is assumed.\n* `ecs.containerimage.fromasset('./image')`: build and upload an\n  image directly from a `dockerfile` in your source directory.\n* `ecs.containerimage.fromdockerimageasset(asset)`: uses an existing\n  `@aws-cdk/aws-ecr-assets.dockerimageasset` as a container image.\n* `ecs.containerimage.fromtarball(file)`: use an existing tarball.\n* `new ecs.tagparametercontainerimage(repository)`: use the given ecr repository as the image\n  but a cloudformation parameter as the tag.\n\n### environment variables\n\nto pass environment variables to the container, you can use the `environment`, `environmentfiles`, and `secrets` props.\n\n```python\n# secret: secretsmanager.secret\n# db_secret: secretsmanager.secret\n# parameter: ssm.stringparameter\n# task_definition: ecs.taskdefinition\n# s3_bucket: s3.bucket\n\n\nnew_container = task_definition.add_container(\"container\",\n    image=ecs.containerimage.from_registry(\"amazon/amazon-ecs-sample\"),\n    memory_limit_mi_b=1024,\n    environment={ # clear text, not for sensitive data\n        \"stage\": \"prod\"},\n    environment_files=[ # list of environment files hosted either on local disk or s3\n        ecs.environmentfile.from_asset(\"./demo-env-file.env\"),\n        ecs.environmentfile.from_bucket(s3_bucket, \"assets/demo-env-file.env\")],\n    secrets={ # retrieved from aws secrets manager or aws systems manager parameter store at container start-up.\n        \"secret\": ecs.secret.from_secrets_manager(secret),\n        \"db_password\": ecs.secret.from_secrets_manager(db_secret, \"password\"),  # reference a specific json field, (requires platform version 1.4.0 or later for fargate tasks)\n        \"api_key\": ecs.secret.from_secrets_manager_version(secret, ecs.secretversioninfo(version_id=\"12345\"), \"apikey\"),  # reference a specific version of the secret by its version id or version stage (requires platform version 1.4.0 or later for fargate tasks)\n        \"parameter\": ecs.secret.from_ssm_parameter(parameter)}\n)\nnew_container.add_environment(\"queue_name\", \"myqueue\")\n```\n\nthe task execution role is automatically granted read permissions on the secrets/parameters. support for environment\nfiles is restricted to the ec2 launch type for files hosted on s3. further details provided in the aws documentation\nabout [specifying environment variables](https://docs.aws.amazon.com/amazonecs/latest/developerguide/taskdef-envfiles.html).\n\n### system controls\n\nto set system controls (kernel parameters) on the container, use the `systemcontrols` prop:\n\n```python\n# task_definition: ecs.taskdefinition\n\n\ntask_definition.add_container(\"container\",\n    image=ecs.containerimage.from_registry(\"amazon/amazon-ecs-sample\"),\n    memory_limit_mi_b=1024,\n    system_controls=[ecs.systemcontrol(\n        namespace=\"net\",\n        value=\"ipv4.tcp_tw_recycle\"\n    )\n    ]\n)\n```\n\n### using windows containers on fargate\n\naws fargate supports amazon ecs windows containers. for more details, please see this [blog post](https://aws.amazon.com/tw/blogs/containers/running-windows-containers-with-amazon-ecs-on-aws-fargate/)\n\n```python\n# create a task definition for the windows container to start\ntask_definition = ecs.fargatetaskdefinition(self, \"taskdef\",\n    runtime_platform=ecs.runtimeplatform(\n        operating_system_family=ecs.operatingsystemfamily.windows_server_2019_core,\n        cpu_architecture=ecs.cpuarchitecture.x86_64\n    ),\n    cpu=1024,\n    memory_limit_mi_b=2048\n)\n\ntask_definition.add_container(\"windowsservercore\",\n    logging=ecs.logdriver.aws_logs(stream_prefix=\"win-iis-on-fargate\"),\n    port_mappings=[ecs.portmapping(container_port=80)],\n    image=ecs.containerimage.from_registry(\"mcr.microsoft.com/windows/servercore/iis:windowsservercore-ltsc2019\")\n)\n```\n\n### using graviton2 with fargate\n\naws graviton2 supports aws fargate. for more details, please see this [blog post](https://aws.amazon.com/blogs/aws/announcing-aws-graviton2-support-for-aws-fargate-get-up-to-40-better-price-performance-for-your-serverless-containers/)\n\n```python\n# create a task definition for running container on graviton runtime.\ntask_definition = ecs.fargatetaskdefinition(self, \"taskdef\",\n    runtime_platform=ecs.runtimeplatform(\n        operating_system_family=ecs.operatingsystemfamily.linux,\n        cpu_architecture=ecs.cpuarchitecture.arm64\n    ),\n    cpu=1024,\n    memory_limit_mi_b=2048\n)\n\ntask_definition.add_container(\"webarm64\",\n    logging=ecs.logdriver.aws_logs(stream_prefix=\"graviton2-on-fargate\"),\n    port_mappings=[ecs.portmapping(container_port=80)],\n    image=ecs.containerimage.from_registry(\"public.ecr.aws/nginx/nginx:latest-arm64v8\")\n)\n```\n\n## service\n\na `service` instantiates a `taskdefinition` on a `cluster` a given number of\ntimes, optionally associating them with a load balancer.\nif a task fails,\namazon ecs automatically restarts the task.\n\n```python\n# cluster: ecs.cluster\n# task_definition: ecs.taskdefinition\n\n\nservice = ecs.fargateservice(self, \"service\",\n    cluster=cluster,\n    task_definition=task_definition,\n    desired_count=5\n)\n```\n\necs anywhere service definition looks like:\n\n```python\n# cluster: ecs.cluster\n# task_definition: ecs.taskdefinition\n\n\nservice = ecs.externalservice(self, \"service\",\n    cluster=cluster,\n    task_definition=task_definition,\n    desired_count=5\n)\n```\n\n`services` by default will create a security group if not provided.\nif you'd like to specify which security groups to use you can override the `securitygroups` property.\n\n### deployment circuit breaker and rollback\n\namazon ecs [deployment circuit breaker](https://aws.amazon.com/tw/blogs/containers/announcing-amazon-ecs-deployment-circuit-breaker/)\nautomatically rolls back unhealthy service deployments without the need for manual intervention. use `circuitbreaker` to enable\ndeployment circuit breaker and optionally enable `rollback` for automatic rollback. see [using the deployment circuit breaker](https://docs.aws.amazon.com/amazonecs/latest/developerguide/deployment-type-ecs.html)\nfor more details.\n\n```python\n# cluster: ecs.cluster\n# task_definition: ecs.taskdefinition\n\nservice = ecs.fargateservice(self, \"service\",\n    cluster=cluster,\n    task_definition=task_definition,\n    circuit_breaker=ecs.deploymentcircuitbreaker(rollback=true)\n)\n```\n\n> note: ecs anywhere doesn't support deployment circuit breakers and rollback.\n\n### include an application/network load balancer\n\n`services` are load balancing targets and can be added to a target group, which will be attached to an application/network load balancers:\n\n```python\n# vpc: ec2.vpc\n# cluster: ecs.cluster\n# task_definition: ecs.taskdefinition\n\nservice = ecs.fargateservice(self, \"service\", cluster=cluster, task_definition=task_definition)\n\nlb = elbv2.applicationloadbalancer(self, \"lb\", vpc=vpc, internet_facing=true)\nlistener = lb.add_listener(\"listener\", port=80)\ntarget_group1 = listener.add_targets(\"ecs1\",\n    port=80,\n    targets=[service]\n)\ntarget_group2 = listener.add_targets(\"ecs2\",\n    port=80,\n    targets=[service.load_balancer_target(\n        container_name=\"mycontainer\",\n        container_port=8080\n    )]\n)\n```\n\n> note: ecs anywhere doesn't support application/network load balancers.\n\nnote that in the example above, the default `service` only allows you to register the first essential container or the first mapped port on the container as a target and add it to a new target group. to have more control over which container and port to register as targets, you can use `service.loadbalancertarget()` to return a load balancing target for a specific container and port.\n\nalternatively, you can also create all load balancer targets to be registered in this service, add them to target groups, and attach target groups to listeners accordingly.\n\n```python\n# cluster: ecs.cluster\n# task_definition: ecs.taskdefinition\n# vpc: ec2.vpc\n\nservice = ecs.fargateservice(self, \"service\", cluster=cluster, task_definition=task_definition)\n\nlb = elbv2.applicationloadbalancer(self, \"lb\", vpc=vpc, internet_facing=true)\nlistener = lb.add_listener(\"listener\", port=80)\nservice.register_load_balancer_targets(\n    container_name=\"web\",\n    container_port=80,\n    new_target_group_id=\"ecs\",\n    listener=ecs.listenerconfig.application_listener(listener,\n        protocol=elbv2.applicationprotocol.https\n    )\n)\n```\n\n### using a load balancer from a different stack\n\nif you want to put your load balancer and the service it is load balancing to in\ndifferent stacks, you may not be able to use the convenience methods\n`loadbalancer.addlistener()` and `listener.addtargets()`.\n\nthe reason is that these methods will create resources in the same stack as the\nobject they're called on, which may lead to cyclic references between stacks.\ninstead, you will have to create an `applicationlistener` in the service stack,\nor an empty `targetgroup` in the load balancer stack that you attach your\nservice to.\n\nsee the [ecs/cross-stack-load-balancer example](https://github.com/aws-samples/aws-cdk-examples/tree/master/typescript/ecs/cross-stack-load-balancer/)\nfor the alternatives.\n\n### include a classic load balancer\n\n`services` can also be directly attached to a classic load balancer as targets:\n\n```python\n# cluster: ecs.cluster\n# task_definition: ecs.taskdefinition\n# vpc: ec2.vpc\n\nservice = ecs.ec2service(self, \"service\", cluster=cluster, task_definition=task_definition)\n\nlb = elb.loadbalancer(self, \"lb\", vpc=vpc)\nlb.add_listener(external_port=80)\nlb.add_target(service)\n```\n\nsimilarly, if you want to have more control over load balancer targeting:\n\n```python\n# cluster: ecs.cluster\n# task_definition: ecs.taskdefinition\n# vpc: ec2.vpc\n\nservice = ecs.ec2service(self, \"service\", cluster=cluster, task_definition=task_definition)\n\nlb = elb.loadbalancer(self, \"lb\", vpc=vpc)\nlb.add_listener(external_port=80)\nlb.add_target(service.load_balancer_target(\n    container_name=\"mycontainer\",\n    container_port=80\n))\n```\n\nthere are two higher-level constructs available which include a load balancer for you that can be found in the aws-ecs-patterns module:\n\n* `loadbalancedfargateservice`\n* `loadbalancedec2service`\n\n## task auto-scaling\n\nyou can configure the task count of a service to match demand. task auto-scaling is\nconfigured by calling `autoscaletaskcount()`:\n\n```python\n# target: elbv2.applicationtargetgroup\n# service: ecs.baseservice\n\nscaling = service.auto_scale_task_count(max_capacity=10)\nscaling.scale_on_cpu_utilization(\"cpuscaling\",\n    target_utilization_percent=50\n)\n\nscaling.scale_on_request_count(\"requestscaling\",\n    requests_per_target=10000,\n    target_group=target\n)\n```\n\ntask auto-scaling is powered by *application auto-scaling*.\nsee that section for details.\n\n## integration with cloudwatch events\n\nto start an amazon ecs task on an amazon ec2-backed cluster, instantiate an\n`@aws-cdk/aws-events-targets.ecstask` instead of an `ec2service`:\n\n```python\n# cluster: ecs.cluster\n\n# create a task definition for the container to start\ntask_definition = ecs.ec2taskdefinition(self, \"taskdef\")\ntask_definition.add_container(\"thecontainer\",\n    image=ecs.containerimage.from_asset(path.resolve(__dirname, \"..\", \"eventhandler-image\")),\n    memory_limit_mi_b=256,\n    logging=ecs.awslogdriver(stream_prefix=\"eventdemo\", mode=ecs.awslogdrivermode.non_blocking)\n)\n\n# an rule that describes the event trigger (in this case a scheduled run)\nrule = events.rule(self, \"rule\",\n    schedule=events.schedule.expression(\"rate(1 min)\")\n)\n\n# pass an environment variable to the container 'thecontainer' in the task\nrule.add_target(targets.ecstask(\n    cluster=cluster,\n    task_definition=task_definition,\n    task_count=1,\n    container_overrides=[targets.containeroverride(\n        container_name=\"thecontainer\",\n        environment=[targets.taskenvironmentvariable(\n            name=\"i_was_triggered\",\n            value=\"from cloudwatch events\"\n        )]\n    )]\n))\n```\n\n## log drivers\n\ncurrently supported log drivers:\n\n* awslogs\n* fluentd\n* gelf\n* journald\n* json-file\n* splunk\n* syslog\n* awsfirelens\n* generic\n\n### awslogs log driver\n\n```python\n# create a task definition for the container to start\ntask_definition = ecs.ec2taskdefinition(self, \"taskdef\")\ntask_definition.add_container(\"thecontainer\",\n    image=ecs.containerimage.from_registry(\"example-image\"),\n    memory_limit_mi_b=256,\n    logging=ecs.logdrivers.aws_logs(stream_prefix=\"eventdemo\")\n)\n```\n\n### fluentd log driver\n\n```python\n# create a task definition for the container to start\ntask_definition = ecs.ec2taskdefinition(self, \"taskdef\")\ntask_definition.add_container(\"thecontainer\",\n    image=ecs.containerimage.from_registry(\"example-image\"),\n    memory_limit_mi_b=256,\n    logging=ecs.logdrivers.fluentd()\n)\n```\n\n### gelf log driver\n\n```python\n# create a task definition for the container to start\ntask_definition = ecs.ec2taskdefinition(self, \"taskdef\")\ntask_definition.add_container(\"thecontainer\",\n    image=ecs.containerimage.from_registry(\"example-image\"),\n    memory_limit_mi_b=256,\n    logging=ecs.logdrivers.gelf(address=\"my-gelf-address\")\n)\n```\n\n### journald log driver\n\n```python\n# create a task definition for the container to start\ntask_definition = ecs.ec2taskdefinition(self, \"taskdef\")\ntask_definition.add_container(\"thecontainer\",\n    image=ecs.containerimage.from_registry(\"example-image\"),\n    memory_limit_mi_b=256,\n    logging=ecs.logdrivers.journald()\n)\n```\n\n### json-file log driver\n\n```python\n# create a task definition for the container to start\ntask_definition = ecs.ec2taskdefinition(self, \"taskdef\")\ntask_definition.add_container(\"thecontainer\",\n    image=ecs.containerimage.from_registry(\"example-image\"),\n    memory_limit_mi_b=256,\n    logging=ecs.logdrivers.json_file()\n)\n```\n\n### splunk log driver\n\n```python\n# create a task definition for the container to start\ntask_definition = ecs.ec2taskdefinition(self, \"taskdef\")\ntask_definition.add_container(\"thecontainer\",\n    image=ecs.containerimage.from_registry(\"example-image\"),\n    memory_limit_mi_b=256,\n    logging=ecs.logdrivers.splunk(\n        token=secretvalue.secrets_manager(\"my-splunk-token\"),\n        url=\"my-splunk-url\"\n    )\n)\n```\n\n### syslog log driver\n\n```python\n# create a task definition for the container to start\ntask_definition = ecs.ec2taskdefinition(self, \"taskdef\")\ntask_definition.add_container(\"thecontainer\",\n    image=ecs.containerimage.from_registry(\"example-image\"),\n    memory_limit_mi_b=256,\n    logging=ecs.logdrivers.syslog()\n)\n```\n\n### firelens log driver\n\n```python\n# create a task definition for the container to start\ntask_definition = ecs.ec2taskdefinition(self, \"taskdef\")\ntask_definition.add_container(\"thecontainer\",\n    image=ecs.containerimage.from_registry(\"example-image\"),\n    memory_limit_mi_b=256,\n    logging=ecs.logdrivers.firelens(\n        options={\n            \"name\": \"firehose\",\n            \"region\": \"us-west-2\",\n            \"delivery_stream\": \"my-stream\"\n        }\n    )\n)\n```\n\nto pass secrets to the log configuration, use the `secretoptions` property of the log configuration. the task execution role is automatically granted read permissions on the secrets/parameters.\n\n```python\n# secret: secretsmanager.secret\n# parameter: ssm.stringparameter\n\n\ntask_definition = ecs.ec2taskdefinition(self, \"taskdef\")\ntask_definition.add_container(\"thecontainer\",\n    image=ecs.containerimage.from_registry(\"example-image\"),\n    memory_limit_mi_b=256,\n    logging=ecs.logdrivers.firelens(\n        options={},\n        secret_options={ # retrieved from aws secrets manager or aws systems manager parameter store\n            \"apikey\": ecs.secret.from_secrets_manager(secret),\n            \"host\": ecs.secret.from_ssm_parameter(parameter)}\n    )\n)\n```\n\n### generic log driver\n\na generic log driver object exists to provide a lower level abstraction of the log driver configuration.\n\n```python\n# create a task definition for the container to start\ntask_definition = ecs.ec2taskdefinition(self, \"taskdef\")\ntask_definition.add_container(\"thecontainer\",\n    image=ecs.containerimage.from_registry(\"example-image\"),\n    memory_limit_mi_b=256,\n    logging=ecs.genericlogdriver(\n        log_driver=\"fluentd\",\n        options={\n            \"tag\": \"example-tag\"\n        }\n    )\n)\n```\n\n## cloudmap service discovery\n\nto register your ecs service with a cloudmap service registry, you may add the\n`cloudmapoptions` property to your service:\n\n```python\n# task_definition: ecs.taskdefinition\n# cluster: ecs.cluster\n\n\nservice = ecs.ec2service(self, \"service\",\n    cluster=cluster,\n    task_definition=task_definition,\n    cloud_map_options=ecs.cloudmapoptions(\n        # create a records - useful for awsvpc network mode.\n        dns_record_type=cloudmap.dnsrecordtype.a\n    )\n)\n```\n\nwith `bridge` or `host` network modes, only `srv` dns record types are supported.\nby default, `srv` dns record types will target the default container and default\nport. however, you may target a different container and port on the same ecs task:\n\n```python\n# task_definition: ecs.taskdefinition\n# cluster: ecs.cluster\n\n\n# add a container to the task definition\nspecific_container = task_definition.add_container(\"container\",\n    image=ecs.containerimage.from_registry(\"/aws/aws-example-app\"),\n    memory_limit_mi_b=2048\n)\n\n# add a port mapping\nspecific_container.add_port_mappings(\n    container_port=7600,\n    protocol=ecs.protocol.tcp\n)\n\necs.ec2service(self, \"service\",\n    cluster=cluster,\n    task_definition=task_definition,\n    cloud_map_options=ecs.cloudmapoptions(\n        # create srv records - useful for bridge networking\n        dns_record_type=cloudmap.dnsrecordtype.srv,\n        # targets port tcp port 7600 `specificcontainer`\n        container=specific_container,\n        container_port=7600\n    )\n)\n```\n\n### associate with a specific cloudmap service\n\nyou may associate an ecs service with a specific cloudmap service. to do\nthis, use the service's `associatecloudmapservice` method:\n\n```python\n# cloud_map_service: cloudmap.service\n# ecs_service: ecs.fargateservice\n\n\necs_service.associate_cloud_map_service(\n    service=cloud_map_service\n)\n```\n\n## capacity providers\n\nthere are two major families of capacity providers: [aws\nfargate](https://docs.aws.amazon.com/amazonecs/latest/developerguide/fargate-capacity-providers.html)\n(including fargate spot) and ec2 [auto scaling\ngroup](https://docs.aws.amazon.com/amazonecs/latest/developerguide/asg-capacity-providers.html)\ncapacity providers. both are supported.\n\n### fargate capacity providers\n\nto enable fargate capacity providers, you can either set\n`enablefargatecapacityproviders` to `true` when creating your cluster, or by\ninvoking the `enablefargatecapacityproviders()` method after creating your\ncluster. this will add both `fargate` and `fargate_spot` as available capacity\nproviders on your cluster.\n\n```python\n# vpc: ec2.vpc\n\n\ncluster = ecs.cluster(self, \"fargatecpcluster\",\n    vpc=vpc,\n    enable_fargate_capacity_providers=true\n)\n\ntask_definition = ecs.fargatetaskdefinition(self, \"taskdef\")\n\ntask_definition.add_container(\"web\",\n    image=ecs.containerimage.from_registry(\"amazon/amazon-ecs-sample\")\n)\n\necs.fargateservice(self, \"fargateservice\",\n    cluster=cluster,\n    task_definition=task_definition,\n    capacity_provider_strategies=[ecs.capacityproviderstrategy(\n        capacity_provider=\"fargate_spot\",\n        weight=2\n    ), ecs.capacityproviderstrategy(\n        capacity_provider=\"fargate\",\n        weight=1\n    )\n    ]\n)\n```\n\n### auto scaling group capacity providers\n\nto add an auto scaling group capacity provider, first create an ec2 auto scaling\ngroup. then, create an `asgcapacityprovider` and pass the auto scaling group to\nit in the constructor. then add the capacity provider to the cluster. finally,\nyou can refer to the provider by its name in your service's or task's capacity\nprovider strategy.\n\nby default, an auto scaling group capacity provider will manage the auto scaling\ngroup's size for you. it will also enable managed termination protection, in\norder to prevent ec2 auto scaling from terminating ec2 instances that have tasks\nrunning on them. if you want to disable this behavior, set both\n`enablemanagedscaling` to and `enablemanagedterminationprotection` to `false`.\n\n```python\n# vpc: ec2.vpc\n\n\ncluster = ecs.cluster(self, \"cluster\",\n    vpc=vpc\n)\n\nauto_scaling_group = autoscaling.autoscalinggroup(self, \"asg\",\n    vpc=vpc,\n    instance_type=ec2.instancetype(\"t2.micro\"),\n    machine_image=ecs.ecsoptimizedimage.amazon_linux2(),\n    min_capacity=0,\n    max_capacity=100\n)\n\ncapacity_provider = ecs.asgcapacityprovider(self, \"asgcapacityprovider\",\n    auto_scaling_group=auto_scaling_group\n)\ncluster.add_asg_capacity_provider(capacity_provider)\n\ntask_definition = ecs.ec2taskdefinition(self, \"taskdef\")\n\ntask_definition.add_container(\"web\",\n    image=ecs.containerimage.from_registry(\"amazon/amazon-ecs-sample\"),\n    memory_reservation_mi_b=256\n)\n\necs.ec2service(self, \"ec2service\",\n    cluster=cluster,\n    task_definition=task_definition,\n    capacity_provider_strategies=[ecs.capacityproviderstrategy(\n        capacity_provider=capacity_provider.capacity_provider_name,\n        weight=1\n    )\n    ]\n)\n```\n\n## elastic inference accelerators\n\ncurrently, this feature is only supported for services with ec2 launch types.\n\nto add elastic inference accelerators to your ec2 instance, first add\n`inferenceaccelerators` field to the ec2taskdefinition and set the `devicename`\nand `devicetype` properties.\n\n```python\ninference_accelerators = [{\n    \"device_name\": \"device1\",\n    \"device_type\": \"eia2.medium\"\n}]\n\ntask_definition = ecs.ec2taskdefinition(self, \"ec2taskdef\",\n    inference_accelerators=inference_accelerators\n)\n```\n\nto enable using the inference accelerators in the containers, add `inferenceacceleratorresources`\nfield and set it to a list of device names used for the inference accelerators. each value in the\nlist should match a `devicename` for an `inferenceaccelerator` specified in the task definition.\n\n```python\n# task_definition: ecs.taskdefinition\n\ninference_accelerator_resources = [\"device1\"]\n\ntask_definition.add_container(\"cont\",\n    image=ecs.containerimage.from_registry(\"test\"),\n    memory_limit_mi_b=1024,\n    inference_accelerator_resources=inference_accelerator_resources\n)\n```\n\n## ecs exec command\n\nplease note, ecs exec leverages aws systems manager (ssm). so as a prerequisite for the exec command\nto work, you need to have the ssm plugin for the aws cli installed locally. for more information, see\n[install session manager plugin for aws cli](https://docs.aws.amazon.com/systems-manager/latest/userguide/session-manager-working-with-install-plugin.html).\n\nto enable the ecs exec feature for your containers, set the boolean flag `enableexecutecommand` to `true` in\nyour `ec2service` or `fargateservice`.\n\n```python\n# cluster: ecs.cluster\n# task_definition: ecs.taskdefinition\n\n\nservice = ecs.ec2service(self, \"service\",\n    cluster=cluster,\n    task_definition=task_definition,\n    enable_execute_command=true\n)\n```\n\n### enabling logging\n\nyou can enable sending logs of your execute session commands to a cloudwatch log group or s3 bucket by configuring\nthe `executecommandconfiguration` property for your cluster. the default configuration will send the\nlogs to the cloudwatch logs using the `awslogs` log driver that is configured in your task definition. please note,\nwhen using your own `logconfiguration` the log group or s3 bucket specified must already be created.\n\nto encrypt data using your own kms customer key (cmk), you must create a cmk and provide the key in the `kmskey` field\nof the `executecommandconfiguration`. to use this key for encrypting cloudwatch log data or s3 bucket, make sure to associate the key\nto these resources on creation.\n\n```python\n# vpc: ec2.vpc\n\nkms_key = kms.key(self, \"kmskey\")\n\n# pass the kms key in the `encryptionkey` field to associate the key to the log group\nlog_group = logs.loggroup(self, \"loggroup\",\n    encryption_key=kms_key\n)\n\n# pass the kms key in the `encryptionkey` field to associate the key to the s3 bucket\nexec_bucket = s3.bucket(self, \"ecsexecbucket\",\n    encryption_key=kms_key\n)\n\ncluster = ecs.cluster(self, \"cluster\",\n    vpc=vpc,\n    execute_command_configuration=ecs.executecommandconfiguration(\n        kms_key=kms_key,\n        log_configuration=ecs.executecommandlogconfiguration(\n            cloud_watch_log_group=log_group,\n            cloud_watch_encryption_enabled=true,\n            s3_bucket=exec_bucket,\n            s3_encryption_enabled=true,\n            s3_key_prefix=\"exec-command-output\"\n        ),\n        logging=ecs.executecommandlogging.override\n    )\n)\n```\n",
  "docs_url": null,
  "keywords": "",
  "license": "apache-2.0",
  "name": "aws-cdk.aws-ecs",
  "package_url": "https://pypi.org/project/aws-cdk.aws-ecs/",
  "project_url": "https://pypi.org/project/aws-cdk.aws-ecs/",
  "project_urls": {
    "Homepage": "https://github.com/aws/aws-cdk",
    "Source": "https://github.com/aws/aws-cdk.git"
  },
  "release_url": "https://pypi.org/project/aws-cdk.aws-ecs/1.204.0/",
  "requires_dist": [
    "aws-cdk.aws-applicationautoscaling (==1.204.0)",
    "aws-cdk.aws-autoscaling-hooktargets (==1.204.0)",
    "aws-cdk.aws-autoscaling (==1.204.0)",
    "aws-cdk.aws-certificatemanager (==1.204.0)",
    "aws-cdk.aws-cloudwatch (==1.204.0)",
    "aws-cdk.aws-ec2 (==1.204.0)",
    "aws-cdk.aws-ecr-assets (==1.204.0)",
    "aws-cdk.aws-ecr (==1.204.0)",
    "aws-cdk.aws-elasticloadbalancing (==1.204.0)",
    "aws-cdk.aws-elasticloadbalancingv2 (==1.204.0)",
    "aws-cdk.aws-iam (==1.204.0)",
    "aws-cdk.aws-kms (==1.204.0)",
    "aws-cdk.aws-lambda (==1.204.0)",
    "aws-cdk.aws-logs (==1.204.0)",
    "aws-cdk.aws-route53-targets (==1.204.0)",
    "aws-cdk.aws-route53 (==1.204.0)",
    "aws-cdk.aws-s3-assets (==1.204.0)",
    "aws-cdk.aws-s3 (==1.204.0)",
    "aws-cdk.aws-secretsmanager (==1.204.0)",
    "aws-cdk.aws-servicediscovery (==1.204.0)",
    "aws-cdk.aws-sns (==1.204.0)",
    "aws-cdk.aws-sqs (==1.204.0)",
    "aws-cdk.aws-ssm (==1.204.0)",
    "aws-cdk.core (==1.204.0)",
    "aws-cdk.cx-api (==1.204.0)",
    "constructs (<4.0.0,>=3.3.69)",
    "jsii (<2.0.0,>=1.84.0)",
    "publication (>=0.0.3)",
    "typeguard (~=2.13.3)"
  ],
  "requires_python": "~=3.7",
  "summary": "the cdk construct library for aws::ecs",
  "version": "1.204.0",
  "releases": [],
  "developers": [
    "amazon_web_services"
  ],
  "kwds": "ecs2 ec2taskdefinition ec2service ecs1 ecs_service",
  "license_kwds": "apache-2.0",
  "libtype": "pypi",
  "id": "pypi_aws_cdk.aws_ecs",
  "homepage": "https://github.com/aws/aws-cdk",
  "release_count": 258,
  "dependency_ids": [
    "pypi_aws_cdk.aws_applicationautoscaling",
    "pypi_aws_cdk.aws_autoscaling",
    "pypi_aws_cdk.aws_autoscaling_hooktargets",
    "pypi_aws_cdk.aws_certificatemanager",
    "pypi_aws_cdk.aws_cloudwatch",
    "pypi_aws_cdk.aws_ec2",
    "pypi_aws_cdk.aws_ecr",
    "pypi_aws_cdk.aws_ecr_assets",
    "pypi_aws_cdk.aws_elasticloadbalancing",
    "pypi_aws_cdk.aws_elasticloadbalancingv2",
    "pypi_aws_cdk.aws_iam",
    "pypi_aws_cdk.aws_kms",
    "pypi_aws_cdk.aws_lambda",
    "pypi_aws_cdk.aws_logs",
    "pypi_aws_cdk.aws_route53",
    "pypi_aws_cdk.aws_route53_targets",
    "pypi_aws_cdk.aws_s3",
    "pypi_aws_cdk.aws_s3_assets",
    "pypi_aws_cdk.aws_secretsmanager",
    "pypi_aws_cdk.aws_servicediscovery",
    "pypi_aws_cdk.aws_sns",
    "pypi_aws_cdk.aws_sqs",
    "pypi_aws_cdk.aws_ssm",
    "pypi_aws_cdk.core",
    "pypi_aws_cdk.cx_api",
    "pypi_constructs",
    "pypi_jsii",
    "pypi_publication",
    "pypi_typeguard"
  ],
  "documentation_summary": "The HTML text provides information about the `aws-cdk.aws-ecs` package version 1.204.0, released on June 19, 2023, available on PyPI for installation. This package, developed by Amazon Web Services, requires Python version 3.7 or newer and is part of the AWS Cloud Development Kit (CDK) for working with Amazon Elastic Container Service (ECS). It includes constructs for creating and managing ECS clusters, services, and tasks with support for EC2, Fargate, and ECS Anywhere launch types. The package is now inactive as AWS CDK v1 has reached end-of-support on June 1, 2023, and users are advised to migrate to AWS CDK v2. The package supports various programming languages and operating systems, indicating its wide applicability and flexibility for developers.",
  "embedding": [
    -0.012408589944243431,
    0.016585806384682655,
    -0.007575050927698612,
    -0.025159014388918877,
    0.008921878412365913,
    0.022055158391594887,
    -0.023873716592788696,
    -0.009202183224260807,
    -0.006166693288832903,
    -0.009708098135888577,
    0.012784607708454132,
    0.011759104207158089,
    0.005667614750564098,
    0.03221447765827179,
    -0.025391461327672005,
    -0.005072822794318199,
    0.013078585267066956,
    -0.034675683826208115,
    -0.022656787186861038,
    0.009885852225124836,
    0.007718621753156185,
    -0.020318638533353806,
    -0.0004982237005606294,
    -0.009113306179642677,
    0.0033260490745306015,
    0.011266862973570824,
    0.0028850827366113663,
    -0.029370414093136787,
    0.008518514223396778,
    -0.005161699838936329,
    0.042496856302022934,
    -0.0018441968131810427,
    -0.020851900801062584,
    -0.012463283725082874,
    -0.03571486100554466,
    -0.014507453888654709,
    0.013570827431976795,
    -2.1685122192138806e-05,
    0.03779321536421776,
    -0.001051995437592268,
    0.01785743050277233,
    0.016695193946361542,
    0.003978952765464783,
    0.000599064864218235,
    -0.022342298179864883,
    0.00783484522253275,
    -0.00463527487590909,
    -0.012244509533047676,
    -0.030163470655679703,
    0.012921341694891453,
    0.006142764817923307,
    0.03508588671684265,
    -0.016107238829135895,
    -0.0203049648553133,
    -0.008026272989809513,
    -0.023025967180728912,
    -0.02159026265144348,
    0.03142142295837402,
    0.023340454325079918,
    -0.007014442700892687,
    0.02585635706782341,
    0.014903981238603592,
    -0.013639193959534168,
    -0.02152189612388611,
    -0.00803310889750719,
    -0.006125673186033964,
    -0.029479801654815674,
    0.023340454325079918,
    -0.0004648948379326612,
    0.0014177582925185561,
    0.04397358000278473,
    0.04009034112095833,
    -0.006057306192815304,
    -0.004536143038421869,
    0.024885546416044235,
    -0.005154863465577364,
    -0.04525887966156006,
    0.02262943983078003,
    -0.01576540432870388,
    0.0016014943830668926,
    -0.008197189308702946,
    -0.005072822794318199,
    0.015218469314277172,
    0.03976218029856682,
    0.017269475385546684,
    0.027360428124666214,
    -0.003770433831959963,
    0.007144339848309755,
    -0.00037964986404404044,
    0.0005811185110360384,
    0.0014647605130448937,
    -0.011342066340148449,
    0.0034285993315279484,
    0.032679371535778046,
    -0.003288447158411145,
    0.012100938707590103,
    -0.014097251929342747,
    0.017447229474782944,
    0.0020629707723855972,
    -0.026594718918204308,
    -0.008983409032225609,
    0.023778002709150314,
    -0.0358242504298687,
    0.00022667896701022983,
    -0.04025442153215408,
    -0.019457215443253517,
    -0.004949762485921383,
    0.012053081765770912,
    0.026745125651359558,
    0.017310496419668198,
    -0.013652867637574673,
    0.0045019593089818954,
    -0.002926102839410305,
    -0.019990477710962296,
    0.007130666170269251,
    -0.024406978860497475,
    0.0021621028427034616,
    -0.0006746957078576088,
    -0.010528500191867352,
    0.0025500848423689604,
    -0.009332080371677876,
    0.04591520130634308,
    0.013741744682192802,
    -0.012128286063671112,
    0.004874559119343758,
    0.003245718078687787,
    -0.0406099297106266,
    -0.009154326282441616,
    0.007951068691909313,
    -0.04104747995734215,
    0.000230738238315098,
    -0.002148429397493601,
    0.0020920266397297382,
    -0.037629134953022,
    -0.01073360163718462,
    0.000940044701565057,
    -0.013659704476594925,
    0.011355740018188953,
    -0.016312338411808014,
    -0.017679676413536072,
    0.009482487104833126,
    0.019963130354881287,
    -0.0037772704381495714,
    -0.015970503911376,
    -0.011219006031751633,
    0.01606621779501438,
    0.013905825093388557,
    0.006799086928367615,
    0.008463820442557335,
    -0.00783484522253275,
    0.02275249920785427,
    0.015423569828271866,
    -0.01884191483259201,
    -0.00343714514747262,
    0.01934782974421978,
    0.026909206062555313,
    0.004481449257582426,
    -0.016312338411808014,
    -0.029124293476343155,
    -0.00772545812651515,
    0.0002803042298182845,
    0.03019081801176071,
    -0.013789600692689419,
    -0.019935784861445427,
    0.028768785297870636,
    0.032734066247940063,
    0.021932097151875496,
    -0.02469412051141262,
    -0.011649717576801777,
    0.009995238855481148,
    0.013953682035207748,
    0.0014134853845462203,
    -0.023969430476427078,
    0.004180635325610638,
    -0.007520357612520456,
    0.02591104991734028,
    0.0009708097786642611,
    0.035003844648599625,
    -0.01368705090135336,
    -0.010651561431586742,
    0.027264714241027832,
    0.01808987744152546,
    0.0007575905765406787,
    0.030765099450945854,
    -0.0036849752068519592,
    -0.008422800339758396,
    0.010118299163877964,
    0.025446156039834023,
    0.02376432903110981,
    0.008997082710266113,
    0.015355202369391918,
    0.04968905448913574,
    -0.0014741610502824187,
    -0.018527425825595856,
    -0.6007534861564636,
    -0.023832697421312332,
    -0.02098863385617733,
    -0.04271563142538071,
    -0.018609466031193733,
    0.00126735121011734,
    0.01050799060612917,
    0.03710954636335373,
    -0.024557385593652725,
    0.03877769783139229,
    -0.02277984656393528,
    0.03749240189790726,
    -0.005503534339368343,
    -0.008101476356387138,
    -0.01783008500933647,
    0.003978952765464783,
    -0.01907436177134514,
    -0.017460903152823448,
    0.004146451596170664,
    0.0069460757076740265,
    -0.008778308518230915,
    0.033937323838472366,
    -0.03054632432758808,
    -0.005742818582803011,
    0.006371793802827597,
    0.01322899293154478,
    0.0007986106793396175,
    -0.01776171661913395,
    0.0065803127363324165,
    0.012593180872499943,
    -0.014275006018579006,
    0.04435643553733826,
    0.0021603936329483986,
    -0.011656554415822029,
    0.04159441590309143,
    0.018814567476511,
    -0.017460903152823448,
    0.020906593650579453,
    -0.009475650265812874,
    0.04586050659418106,
    -0.02280719392001629,
    -0.003917422611266375,
    -2.9937218641862273e-05,
    -0.011882164515554905,
    0.011225842870771885,
    0.015970503911376,
    0.017337841913104057,
    0.013434093445539474,
    -0.0071101561188697815,
    -0.035632822662591934,
    0.014165619388222694,
    -0.030464284121990204,
    0.011444617062807083,
    -0.015382549725472927,
    0.0008669776143506169,
    -0.010323399677872658,
    0.029370414093136787,
    -0.015902137383818626,
    0.0125384870916605,
    -0.002956867916509509,
    -0.002078353427350521,
    0.014753574505448341,
    -0.024530038237571716,
    -0.010754111222922802,
    -0.015286835841834545,
    -0.0074178073555231094,
    0.0009485905757173896,
    -0.014507453888654709,
    -0.0022219237871468067,
    -0.026977574452757835,
    -0.010651561431586742,
    0.00366446515545249,
    -0.005489861126989126,
    -0.0055650644935667515,
    0.029014907777309418,
    0.018021510913968086,
    0.0274698156863451,
    -0.01368705090135336,
    -0.010808805003762245,
    0.013529807329177856,
    0.03057367168366909,
    -0.013071748428046703,
    0.004580581560730934,
    -0.021275775507092476,
    0.020072517916560173,
    -0.014698880724608898,
    -0.01494500134140253,
    -0.02535044215619564,
    -0.01632601208984852,
    -0.011020742356777191,
    0.003968697972595692,
    0.017269475385546684,
    0.009892688132822514,
    -0.04364541918039322,
    0.002211668761447072,
    0.012859811075031757,
    0.0013827203074470162,
    0.010767784900963306,
    -0.025664929300546646,
    -0.01373490784317255,
    -0.010877171531319618,
    -0.025131667032837868,
    0.004648948088288307,
    -0.023066988214850426,
    0.035632822662591934,
    0.020496392622590065,
    -0.011711248196661472,
    0.011369413696229458,
    0.045395612716674805,
    -0.02487187273800373,
    -0.0149313285946846,
    -0.027633896097540855,
    -0.005291596986353397,
    -0.008723614737391472,
    0.010685744695365429,
    -0.025282075628638268,
    0.0018305233679711819,
    0.01401521172374487,
    0.01480826735496521,
    0.004864303860813379,
    0.009591874666512012,
    -0.006173530127853155,
    0.013994702138006687,
    -0.014452760107815266,
    0.01665417291224003,
    0.007260563317686319,
    0.007356277201324701,
    -0.019717009738087654,
    -0.03057367168366909,
    0.012401753105223179,
    0.011437780223786831,
    0.015068061649799347,
    0.032351210713386536,
    0.004560071509331465,
    0.03092917986214161,
    -0.0020236598793417215,
    0.04979844018816948,
    0.0039618611335754395,
    0.0031893153209239244,
    -0.030983872711658478,
    -0.003199570346623659,
    0.0014801430515944958,
    0.009817484766244888,
    -0.018144572153687477,
    0.007260563317686319,
    -0.0105968676507473,
    -0.011847981251776218,
    -0.0008904787246137857,
    -5.992785008857027e-05,
    0.005609503015875816,
    -0.00763658108189702,
    0.012306039221584797,
    -0.011430943384766579,
    0.02651267871260643,
    -0.0013596464414149523,
    -0.02956184186041355,
    -0.017720697447657585,
    -0.016052545979619026,
    -0.0030354897025972605,
    0.013481950387358665,
    0.0034901294857263565,
    0.01331786997616291,
    -0.016025198623538017,
    0.008600554428994656,
    -0.034593645483255386,
    0.028112463653087616,
    -0.012757261283695698,
    0.02489922009408474,
    -0.01947088912129402,
    -0.03708219900727272,
    -0.006758066825568676,
    -0.010384930297732353,
    -0.005753073375672102,
    0.01162920705974102,
    0.03516792505979538,
    0.012244509533047676,
    -0.01064472459256649,
    0.0008494585636071861,
    0.01606621779501438,
    0.00717168627306819,
    0.00309018325060606,
    0.016462747007608414,
    -0.001687807496637106,
    -0.010624214075505733,
    0.030464284121990204,
    0.015013368800282478,
    0.0024150602985173464,
    0.012265019118785858,
    -0.029124293476343155,
    -0.008292903192341328,
    -0.013481950387358665,
    0.011136965826153755,
    -0.007185359951108694,
    0.02764756977558136,
    -0.014370719902217388,
    -0.003924259450286627,
    0.0021706486586481333,
    0.011451453901827335,
    0.01189583819359541,
    0.029507149010896683,
    0.001425449620001018,
    0.02719634771347046,
    0.008251883089542389,
    -0.009612384252250195,
    -0.013201645575463772,
    -0.018130898475646973,
    0.014452760107815266,
    -0.01017982978373766,
    0.016913967207074165,
    0.02128944918513298,
    0.03092917986214161,
    -0.00717168627306819,
    -0.019252115860581398,
    -0.02323106862604618,
    0.02558288909494877,
    0.0019005994545295835,
    -0.006043632980436087,
    -0.006689699832350016,
    -0.01848640665411949,
    0.01480826735496521,
    0.02003149874508381,
    -0.010870334692299366,
    0.01672254130244255,
    -0.020824553444981575,
    -0.013871641829609871,
    -0.0011195078259333968,
    0.02711430750787258,
    0.025282075628638268,
    -0.00463527487590909,
    -0.01851375214755535,
    -0.010856661945581436,
    0.02824919857084751,
    0.0041840532794594765,
    -0.011882164515554905,
    0.0075818877667188644,
    -0.00281329732388258,
    0.039215248078107834,
    -0.021685976535081863,
    0.03174958378076553,
    -0.01461684051901102,
    0.02020925097167492,
    0.0032337538432329893,
    0.03864096477627754,
    -0.0029175567906349897,
    0.009803812019526958,
    0.017542943358421326,
    0.01055584754794836,
    0.018773546442389488,
    0.010672071017324924,
    -0.007404133677482605,
    -0.0006024831673130393,
    0.005527462810277939,
    -0.0011160894064232707,
    0.0077459681779146194,
    0.01571071147918701,
    7.061017822707072e-05,
    -0.0022373064421117306,
    0.00040101452032104135,
    0.040199730545282364,
    0.023531882092356682,
    0.008156169205904007,
    -0.003910585772246122,
    0.03347242623567581,
    0.020824553444981575,
    0.03541404753923416,
    -0.04400092735886574,
    -0.014603166840970516,
    -0.029425108805298805,
    -0.021959444507956505,
    -0.02260209247469902,
    -0.014780920930206776,
    -0.008641574531793594,
    0.003209825372323394,
    -0.03713689371943474,
    0.02663573995232582,
    0.023901063948869705,
    0.01627131924033165,
    0.0056607783772051334,
    0.01848640665411949,
    0.008128822781145573,
    -0.005483024287968874,
    -0.04588785395026207,
    0.027551855891942978,
    0.011143802665174007,
    0.006231641862541437,
    -0.009420957416296005,
    -0.016681520268321037,
    0.032050397247076035,
    -0.024160858243703842,
    0.03773852065205574,
    -0.006976841017603874,
    0.023969430476427078,
    -0.008573208004236221,
    0.011506146751344204,
    -0.03232386335730553,
    0.007164849899709225,
    0.012408589944243431,
    -0.011013905517756939,
    0.01017982978373766,
    -0.0037909438833594322,
    0.006758066825568676,
    -0.01073360163718462,
    0.020318638533353806,
    0.02424289844930172,
    0.04580581560730934,
    0.016640501096844673,
    -0.011109619401395321,
    -0.02161761000752449,
    0.00023522482661064714,
    -0.009427793323993683,
    -0.018773546442389488,
    0.004730988759547472,
    0.010829314589500427,
    -0.003948187921196222,
    0.0065700579434633255,
    -0.0005315525340847671,
    -0.008518514223396778,
    -0.02606145665049553,
    0.03844953700900078,
    -0.020564759150147438,
    0.023518208414316177,
    -0.030054083094000816,
    0.015984177589416504,
    0.002710747066885233,
    0.02053741365671158,
    0.005107006523758173,
    0.018117224797606468,
    0.02146720327436924,
    -0.010665234178304672,
    -0.017789063975214958,
    -0.04802090302109718,
    -0.0028560266364365816,
    0.0002038187813013792,
    0.01564234308898449,
    -0.04088339954614639,
    -0.008593717589974403,
    0.0164217259734869,
    -0.0035379864275455475,
    0.02038700506091118,
    0.015929484739899635,
    -0.005493279546499252,
    -0.001211803057231009,
    -0.02053741365671158,
    -0.03232386335730553,
    0.009263712912797928,
    0.016913967207074165,
    0.02868674509227276,
    0.023066988214850426,
    0.006211131811141968,
    0.02051006630063057,
    -0.009140652604401112,
    0.004864303860813379,
    -0.008696268312633038,
    -0.030136123299598694,
    -0.0013570827431976795,
    -0.0043378788977861404,
    0.005168536677956581,
    0.03248794376850128,
    -0.02167230285704136,
    0.026827165856957436,
    0.004204563330858946,
    0.02520003542304039,
    -0.004963436163961887,
    0.008484330959618092,
    0.012053081765770912,
    -0.0038080355152487755,
    0.0028850827366113663,
    -0.0016074763843789697,
    0.00569496164098382,
    -0.028057770803570747,
    0.005674451589584351,
    0.018964974209666252,
    -0.008545860648155212,
    0.0005678724846802652,
    0.03637118265032768,
    0.009605547413229942,
    -0.03782056272029877,
    -0.025391461327672005,
    0.02411983720958233,
    -0.001061395974829793,
    0.024680446833372116,
    -0.007752805016934872,
    0.012805118225514889,
    -0.05737349018454552,
    -0.002756894798949361,
    -0.026594718918204308,
    -0.02295760065317154,
    -0.012059918604791164,
    -0.006019704509526491,
    0.0026851093862205744,
    0.015245815739035606,
    0.01808987744152546,
    -0.021809037774801254,
    -0.027565529569983482,
    -0.01695498824119568,
    -0.02615717053413391,
    -0.012517976574599743,
    0.023832697421312332,
    0.021398834884166718,
    0.0021586844231933355,
    0.010521664284169674,
    0.0003982371126767248,
    -0.0025517940521240234,
    -0.021275775507092476,
    0.002678272780030966,
    -0.020263945683836937,
    -0.01710539497435093,
    -0.061639584600925446,
    -0.006976841017603874,
    -0.011649717576801777,
    0.007294747047126293,
    0.005978684406727552,
    0.024584732949733734,
    0.050290681421756744,
    -0.005503534339368343,
    0.01222399901598692,
    0.027756955474615097,
    -0.017624983564019203,
    0.025787990540266037,
    0.016831927001476288,
    -0.003479874460026622,
    0.008292903192341328,
    -0.009161163121461868,
    -0.015150101855397224,
    -0.01322899293154478,
    -0.004642111714929342,
    0.014384392648935318,
    -0.0012083847541362047,
    0.03377324342727661,
    0.009420957416296005,
    -0.004047319758683443,
    0.004214818589389324,
    -0.013584500178694725,
    -0.0011186532210558653,
    0.00025018007727339864,
    -0.02684083953499794,
    -0.005137771368026733,
    0.0015074898255988955,
    0.01743355579674244,
    0.010849825106561184,
    -0.010514827445149422,
    0.01225818321108818,
    -0.005602666176855564,
    -0.003585843136534095,
    0.005592411383986473,
    -0.019771704450249672,
    0.009680750779807568,
    0.011622371152043343,
    -0.015601323917508125,
    0.027264714241027832,
    -0.011683900840580463,
    0.0035345680080354214,
    -0.02803042344748974,
    0.009256876073777676,
    0.011082272045314312,
    0.008272393606603146,
    0.005896644201129675,
    0.006980258971452713,
    0.018226612359285355,
    -0.004286604002118111,
    0.04197726771235466,
    0.016161931678652763,
    0.0026440892834216356,
    -0.021809037774801254,
    -0.02827654406428337,
    0.00506940484046936,
    -0.018978647887706757,
    -0.011020742356777191,
    -0.01665417291224003,
    -0.02033231221139431,
    -0.030819792300462723,
    0.03027285821735859,
    0.012531650252640247,
    0.010617377236485481,
    -0.003773852251470089,
    0.011020742356777191,
    0.0014151945943012834,
    -0.007267400156706572,
    0.0011716375593096018,
    -0.019511910155415535,
    0.01904701441526413,
    0.006272661965340376,
    0.028139811009168625,
    0.04123890772461891,
    0.040500544011592865,
    0.007390460465103388,
    0.02247903309762478,
    0.0019911855924874544,
    0.009995238855481148,
    -0.027155326679348946,
    -0.022355971857905388,
    0.015286835841834545,
    0.0014630514197051525,
    -0.018923955038189888,
    0.017898451536893845,
    0.014562146738171577,
    -0.0063649569638073444,
    0.0034679104574024677,
    0.02618451789021492,
    0.014712554402649403,
    -0.0016194406198337674,
    -0.003862729063257575,
    -0.026170844212174416,
    -0.018623139709234238,
    -0.015341529622673988,
    -0.005968429148197174,
    -0.011554003693163395,
    0.037847910076379776,
    -0.051904141902923584,
    -0.028413278982043266,
    0.003862729063257575,
    0.015327855944633484,
    0.00460451003164053,
    -0.009591874666512012,
    0.03875035047531128,
    -0.005257413722574711,
    0.00033222034107893705,
    0.013078585267066956,
    0.024981260299682617,
    0.00557531975209713,
    0.007773315068334341,
    -0.02063312567770481,
    -0.005281342193484306,
    0.026170844212174416,
    0.021945770829916,
    0.02111169509589672,
    0.007103319745510817,
    0.01428867969661951,
    0.015095409005880356,
    0.029178988188505173,
    0.017994165420532227,
    -0.0043959906324744225,
    0.03213243559002876,
    -0.04153972119092941,
    -0.019566603004932404,
    -0.011738594621419907,
    -0.04676295071840286,
    -0.024680446833372116,
    -0.003514057956635952,
    -0.022383319213986397,
    0.01917007565498352,
    0.027073286473751068,
    -0.019115380942821503,
    -0.010432787239551544,
    0.023750657215714455,
    0.011095945723354816,
    0.033034879714250565,
    0.010842988267540932,
    0.020045170560479164,
    0.018322326242923737,
    0.014357046224176884,
    -0.01430235244333744,
    -0.027360428124666214,
    -0.01710539497435093,
    -0.01082247868180275,
    0.011082272045314312,
    0.023901063948869705,
    -0.013235829770565033,
    -0.00871677789837122,
    0.014275006018579006,
    0.0125384870916605,
    -0.0053531271405518055,
    -0.01854109950363636,
    0.020551085472106934,
    0.0012066755443811417,
    0.0006238478235900402,
    -0.03215978294610977,
    -0.0007349440129473805,
    -0.01006360538303852,
    -0.0014673243276774883,
    -0.005086496472358704,
    -0.014206639491021633,
    0.025008607655763626,
    -0.0001379088353132829,
    -0.004631856456398964,
    -0.0009161162888631225,
    -0.010350747033953667,
    0.013857968151569366,
    0.022205565124750137,
    -0.021248428151011467,
    -0.01073360163718462,
    -0.008778308518230915,
    -0.00977646466344595,
    -0.017570290714502335,
    -0.011622371152043343,
    0.023190047591924667,
    -0.022861886769533157,
    -0.002211668761447072,
    0.031093260273337364,
    0.0028594450559467077,
    -0.018964974209666252,
    0.013468276709318161,
    0.0018100133165717125,
    0.03604302182793617,
    -0.013447767123579979,
    -0.008833001367747784,
    -0.016490092501044273,
    -0.023504536598920822,
    0.00916799996048212,
    -0.02185005694627762,
    0.00663500651717186,
    -0.013946845196187496,
    -0.009058612398803234,
    -0.024653099477291107,
    -0.0028594450559467077,
    -0.0355234332382679,
    -0.014056231826543808,
    -0.026102477684617043,
    0.0034166350960731506,
    -0.01527316216379404,
    -0.012340223416686058,
    -0.02293025329709053,
    0.01382378488779068,
    -0.014028885401785374,
    -0.01203257218003273,
    -0.0019928948022425175,
    -0.017351515591144562,
    0.010651561431586742,
    0.010111462324857712,
    0.008969735354185104,
    0.007499847561120987,
    0.049935173243284225,
    -0.013830620795488358,
    0.0033294674940407276,
    -0.01839069277048111,
    -0.017132742330431938,
    -0.024256572127342224,
    0.008456983603537083,
    0.00047215880476869643,
    0.0016690066549926996,
    0.01119849644601345,
    -0.01262736413627863,
    -0.04689968377351761,
    -0.0471731536090374,
    0.003454237012192607,
    0.021549243479967117,
    -0.007253726944327354,
    -0.006265825126320124,
    0.007294747047126293,
    0.016558460891246796,
    0.0066179148852825165,
    -0.004153288435190916,
    -0.026471659541130066,
    0.035605475306510925,
    -0.006682862993329763,
    -0.017748044803738594,
    0.03546874225139618,
    -0.011260026134550571,
    0.015491936355829239,
    -0.022164544090628624,
    0.0009383355500176549,
    -0.0004193881177343428,
    -0.01614825800061226,
    -0.013413582928478718,
    -0.019033340737223625,
    0.007903211750090122,
    -0.018117224797606468,
    0.005151445046067238,
    -0.021398834884166718,
    -0.043289914727211,
    -0.015614996664226055,
    0.03410140424966812,
    0.03801199048757553,
    -0.017351515591144562,
    0.032734066247940063,
    0.01319480873644352,
    0.011506146751344204,
    -0.0029449036810547113,
    -0.007773315068334341,
    -0.023955756798386574,
    -0.04143033176660538,
    -0.013297359459102154,
    -0.03872300311923027,
    -0.004313950426876545,
    -0.012244509533047676,
    0.03795729577541351,
    0.010125136002898216,
    -0.01033023651689291,
    -0.01654478721320629,
    -0.005178791470825672,
    -0.019129054620862007,
    -0.013413582928478718,
    -0.030683059245347977,
    0.04132094606757164,
    0.026321250945329666,
    0.0031089840922504663,
    0.02096128836274147,
    0.025213707238435745,
    -0.01055584754794836,
    0.029370414093136787,
    -0.015779078006744385,
    -0.008573208004236221,
    0.005472769495099783,
    -0.011977878399193287,
    -0.005308688618242741,
    -0.020851900801062584,
    -0.022055158391594887,
    0.00022860178432893008,
    0.023723309859633446,
    0.03287079930305481,
    -0.0033397225197404623,
    0.026198191568255424,
    -0.003650791710242629,
    0.00991319864988327,
    -0.008026272989809513,
    -0.01826763153076172,
    -0.023504536598920822,
    0.01621662639081478,
    0.008217699825763702,
    -0.01889660768210888,
    -0.00014869797450955957,
    -0.005753073375672102,
    0.001938201254233718,
    0.0005195883568376303,
    -0.006542711053043604,
    0.008894531987607479,
    -0.026881860569119453,
    0.015970503911376,
    0.0034320177510380745,
    -0.027155326679348946,
    -0.009844832122325897,
    -0.021275775507092476,
    0.005807767156511545,
    0.01791212521493435,
    0.01480826735496521,
    0.03875035047531128,
    0.01222399901598692,
    -0.0154509162530303,
    -0.03806668147444725,
    0.003982371184974909,
    -0.04123890772461891,
    0.0030115614645183086,
    -0.004891650751233101,
    0.0007084518438205123,
    -0.006371793802827597,
    0.005609503015875816,
    0.011109619401395321,
    -0.002577431732788682,
    -0.024201877415180206,
    0.007438317406922579,
    0.02394208312034607,
    -0.029343068599700928,
    0.008238210342824459,
    -0.008894531987607479,
    -0.0013981028459966183,
    0.005927409045398235,
    0.006751229986548424,
    -0.0016416598809882998,
    -0.0015288544818758965,
    -0.01022768672555685,
    -0.002211668761447072,
    -0.015177449211478233,
    0.008183516561985016,
    -0.011109619401395321,
    -0.033281002193689346,
    -0.014589494094252586,
    0.0037089036777615547,
    -0.004050738178193569,
    -0.008901368826627731,
    0.028440624475479126,
    0.16965927183628082,
    0.031448766589164734,
    0.00025338478735648096,
    0.026348598301410675,
    0.008935552090406418,
    -0.0020390423014760017,
    -0.009311569854617119,
    0.01432969979941845,
    -0.02827654406428337,
    0.028385931625962257,
    -0.01776171661913395,
    0.0025791407097131014,
    -0.028112463653087616,
    0.007903211750090122,
    0.020592106506228447,
    -0.017187435179948807,
    -0.033281002193689346,
    -0.029507149010896683,
    -0.019293135032057762,
    0.002011695643886924,
    0.025870030745863914,
    -0.017679676413536072,
    -0.0015673108864575624,
    -0.03311692178249359,
    0.013167462311685085,
    -0.0331442654132843,
    -0.00408150302246213,
    0.025870030745863914,
    0.005250576883554459,
    0.02066047303378582,
    -0.027182674035429955,
    0.023504536598920822,
    0.003879820927977562,
    -0.013345216400921345,
    -0.036890771239995956,
    -0.013112768530845642,
    0.008183516561985016,
    9.053271060111001e-05,
    0.017898451536893845,
    0.03511323407292366,
    -0.02729206159710884,
    -0.04689968377351761,
    -0.011663391254842281,
    -0.03191366419196129,
    -0.005219812039285898,
    -0.01710539497435093,
    -0.019689664244651794,
    -0.005688124801963568,
    -0.01525948941707611,
    0.01116431225091219,
    -0.031941007822752,
    0.004970272537320852,
    0.007130666170269251,
    0.019990477710962296,
    0.010959211736917496,
    0.013133279047906399,
    0.027210021391510963,
    0.025623910129070282,
    0.0045532346703112125,
    0.01494500134140253,
    -0.01821293868124485,
    0.027784302830696106,
    -0.008949225768446922,
    -0.0015074898255988955,
    -0.02262943983078003,
    0.007848518900573254,
    -0.018021510913968086,
    0.004768590442836285,
    -0.0007417807355523109,
    0.013352053239941597,
    -0.024912893772125244,
    -0.02310800738632679,
    0.005749655421823263,
    -0.007780151907354593,
    0.0030371989123523235,
    -0.021002307534217834,
    0.03842218965291977,
    -0.0015049261273816228,
    0.0024065144825726748,
    0.04725519195199013,
    -6.297231448115781e-05,
    0.0030799282249063253,
    -0.022164544090628624,
    0.00015072761743795127,
    0.013652867637574673,
    -0.01659948006272316,
    0.039570752531290054,
    -0.01088400837033987,
    -0.015628671273589134,
    -0.0040780846029520035,
    -0.01773437112569809,
    -0.019812723621726036,
    -0.00503180269151926,
    -0.02250637859106064,
    0.027004919946193695,
    0.04446582496166229,
    0.0074793375097215176,
    0.009619221091270447,
    -0.008730451576411724,
    0.021986790001392365,
    -0.024680446833372116,
    0.06705424189567566,
    0.012401753105223179,
    0.015341529622673988,
    -0.018171919509768486,
    0.013044402003288269,
    -0.009461977519094944,
    0.020646799355745316,
    0.005900062154978514,
    -0.008709941059350967,
    -0.009291060268878937,
    -0.020195579156279564,
    -0.012948688119649887,
    -0.003920841030776501,
    -0.012135122902691364,
    0.022109851241111755,
    -0.030409591272473335,
    0.005619758274406195,
    0.002955158706754446,
    -0.014835614711046219,
    -0.026854513213038445,
    -0.03322630748152733,
    -0.004344715736806393,
    0.004560071509331465,
    -0.014275006018579006,
    -0.018431711941957474,
    -0.025295747444033623,
    0.001955292886123061,
    -0.018130898475646973,
    -0.028495319187641144,
    0.007554540876299143,
    -0.0008964607841335237,
    0.02863205224275589,
    -0.018103551119565964,
    -0.018103551119565964,
    -0.018650487065315247,
    -0.021480875089764595,
    -0.0005593266105279326,
    -0.001666442840360105,
    0.04028176888823509,
    -0.012948688119649887,
    0.008142496459186077,
    0.008313413709402084,
    -0.011225842870771885,
    0.016284992918372154,
    -0.011923185549676418,
    0.01967599056661129,
    0.00717168627306819,
    -0.01710539497435093,
    -0.01949823647737503,
    0.004228491801768541,
    -0.00772545812651515,
    0.021084347739815712,
    -0.0058761341497302055,
    0.030081430450081825,
    -0.01627131924033165,
    -0.019744357094168663,
    -0.013639193959534168,
    0.003240590449422598,
    0.008949225768446922,
    -0.04252420365810394,
    -0.014069905504584312,
    0.004642111714929342,
    0.000999865704216063,
    -0.03150346130132675,
    -0.005855624098330736,
    -0.17272210121154785,
    0.007246890105307102,
    0.003344849916175008,
    -0.036945465952157974,
    -0.002438988769426942,
    -0.008785145357251167,
    -0.0016390960663557053,
    0.016982335597276688,
    -0.014835614711046219,
    -0.007506684400141239,
    0.02310800738632679,
    0.017775390297174454,
    -0.02504962682723999,
    -0.02242433838546276,
    0.003620026633143425,
    0.011219006031751633,
    -0.02245168574154377,
    0.007178523112088442,
    0.03289814665913582,
    0.012757261283695698,
    0.046380095183849335,
    -0.01692764088511467,
    0.0017177180852741003,
    0.01180696114897728,
    0.003862729063257575,
    0.001597221358679235,
    -0.009434630163013935,
    -0.004143033176660538,
    0.0055582281202077866,
    -0.005168536677956581,
    -0.02134414203464985,
    0.013714397326111794,
    0.022766172885894775,
    0.0018971811514347792,
    0.010460133664309978,
    0.004560071509331465,
    0.012668384239077568,
    -0.019621295854449272,
    -0.0063102636486291885,
    0.029343068599700928,
    0.041184213012456894,
    0.026772473007440567,
    0.02800307609140873,
    -0.01106176245957613,
    4.6307883167173713e-05,
    0.015095409005880356,
    0.0026748543605208397,
    -0.020469045266509056,
    0.0038695659022778273,
    -0.028112463653087616,
    0.02830389142036438,
    -0.008928715251386166,
    -0.003968697972595692,
    0.001706608454696834,
    0.011034416034817696,
    0.01848640665411949,
    0.018705179914832115,
    0.006317100487649441,
    -0.01922476850450039,
    -0.0306010190397501,
    -0.007821171544492245,
    -0.02737410180270672,
    0.0036576285492628813,
    -0.011383086442947388,
    -0.02257474698126316,
    0.006833270192146301,
    -0.017310496419668198,
    0.019005995243787766,
    -0.022889234125614166,
    0.01874620094895363,
    0.023682288825511932,
    -0.004351552575826645,
    -0.01498602144420147,
    -0.003831963986158371,
    0.013618683442473412,
    0.006918728817254305,
    -0.04260624572634697,
    0.034347523003816605,
    0.02182270959019661,
    -0.02600676380097866,
    -0.018445385619997978,
    0.023531882092356682,
    0.005442004185169935,
    0.012818790972232819,
    0.016503766179084778,
    -0.016585806384682655,
    0.003831963986158371,
    -0.022369645535945892,
    -0.008928715251386166,
    0.0017348097171634436,
    0.018923955038189888,
    -0.036890771239995956,
    0.01571071147918701,
    -0.010097789578139782,
    0.00021503522293642163,
    0.0164217259734869,
    -0.02638961747288704,
    -0.007992088794708252,
    -0.014507453888654709,
    -0.010856661945581436,
    0.00724005326628685,
    -0.006029959302395582,
    -0.016052545979619026,
    -0.01629866659641266,
    0.05209556967020035,
    0.017037028446793556,
    -0.02206883206963539,
    0.022971274331212044,
    0.03864096477627754,
    -0.015191121958196163,
    0.0025859775487333536,
    0.016490092501044273,
    0.039871569722890854,
    0.004474612884223461,
    0.0019877671729773283,
    0.027210021391510963,
    0.003365359967574477,
    -0.00414987001568079,
    0.01056952029466629,
    0.00810831319540739,
    0.018787220120429993,
    0.008798818103969097,
    -0.010460133664309978,
    -0.002989342203363776,
    -0.019033340737223625,
    -0.03221447765827179,
    -0.08143863826990128,
    -0.0203049648553133,
    -0.0022185056004673243,
    0.006026540882885456,
    -0.027715936303138733,
    -0.020373333245515823,
    -0.031147953122854233,
    0.0046010916121304035,
    0.0054009840823709965,
    -0.01884191483259201,
    0.003498675534501672,
    0.03585159406065941,
    -0.011772777885198593,
    0.005462514236569405,
    0.005889807362109423,
    -0.015724383294582367,
    -0.018199265003204346,
    0.001727973110973835,
    -0.01884191483259201,
    0.00880565494298935,
    -0.0014322862261906266,
    0.017132742330431938,
    0.017160087823867798,
    0.004221655428409576,
    6.879417924210429e-05,
    0.019088035449385643,
    -0.01591581106185913,
    0.006559802684932947,
    0.02868674509227276,
    0.031694889068603516,
    -0.012394916266202927,
    -0.01629866659641266,
    -0.007096482906490564,
    0.007828008383512497,
    -0.02209617756307125,
    -0.02444799803197384,
    -0.030765099450945854,
    -0.02618451789021492,
    0.05132985860109329,
    -0.017789063975214958,
    -0.0034166350960731506,
    -0.0154509162530303,
    0.018937626853585243,
    -0.025418808683753014,
    -0.015546630136668682,
    0.011800124309957027,
    -0.01783008500933647,
    0.015382549725472927,
    0.003119239117950201,
    -0.04818498343229294,
    -0.02890552021563053,
    -0.02956184186041355,
    -0.01815824583172798,
    -0.0012647873954847455,
    -0.004467776045203209,
    0.003510639537125826,
    0.002820134162902832,
    0.01324266567826271,
    -0.003849055850878358,
    -0.015532956458628178,
    0.00011921476107090712,
    -0.013987865298986435,
    -0.021685976535081863,
    0.004464357625693083,
    0.0021911587100476027,
    -0.001974093960598111,
    0.019361501559615135,
    -0.0033585233613848686,
    0.021043328568339348,
    -0.029206333681941032,
    -0.021549243479967117,
    0.02517268806695938,
    -0.021754343062639236,
    0.011013905517756939,
    -0.026252884417772293,
    -0.003122657537460327,
    0.002468044636771083,
    -0.0012767516309395432,
    0.004642111714929342,
    -0.004002881236374378,
    -0.02038700506091118,
    0.0027927872724831104,
    -0.01788477785885334,
    -0.013946845196187496,
    0.03084713965654373,
    0.025131667032837868,
    0.0018886352190747857,
    -0.008327086456120014,
    0.02734675444662571,
    -0.02716900035738945,
    0.023066988214850426,
    -0.02012721076607704,
    0.046653565019369125,
    0.004522469360381365,
    -0.006371793802827597,
    -0.00829974003136158,
    0.004242165479809046,
    -0.010849825106561184,
    -0.029534494504332542,
    0.0059342458844184875,
    -0.04689968377351761,
    9.250894072465599e-05,
    -0.0910646915435791,
    0.027838995680212975,
    -0.014603166840970516,
    -0.005216393619775772,
    0.009879015386104584,
    -0.011499310843646526,
    0.00414987001568079,
    -0.021453529596328735,
    0.01116431225091219,
    0.023162702098488808,
    -0.03412875160574913,
    -0.019689664244651794,
    -0.006805923767387867,
    0.031448766589164734,
    -0.010719927959144115,
    0.0046592033468186855,
    0.03229651600122452,
    -0.010371256619691849,
    0.06262406706809998,
    -0.007923722267150879,
    -0.0195529293268919,
    -0.027127981185913086,
    0.03680873289704323,
    0.006833270192146301,
    -0.017447229474782944,
    -0.003088474040850997,
    -0.008115149103105068,
    -0.0028406442143023014,
    0.0017313914140686393,
    -0.013393073342740536,
    0.004313950426876545,
    -0.010870334692299366,
    -0.0007550268201157451,
    0.03519527241587639,
    0.010521664284169674,
    0.0183633454144001,
    0.02474881336092949,
    0.03347242623567581,
    0.024530038237571716,
    0.000982773955911398,
    -0.0031004382763057947,
    -0.012661547400057316,
    0.0074178073555231094,
    0.003773852251470089,
    -0.0066179148852825165,
    -0.0050352211110293865,
    0.006535874214023352,
    0.0012092393590137362,
    0.03388262912631035,
    0.024735139682888985,
    0.03276141360402107,
    0.01216930616647005,
    -0.018705179914832115,
    -0.014548473991453648,
    0.0032474270556122065,
    -0.010412276722490788,
    0.02454371191561222,
    -0.0043412973172962666,
    -0.03946136683225632,
    0.0036439551040530205,
    0.02898756042122841,
    -0.012155632488429546,
    0.021603936329483986,
    0.007349440362304449,
    -0.0027603129856288433,
    -0.022547399625182152,
    -0.041129518300294876,
    -0.020496392622590065,
    -0.004433592781424522,
    -0.014275006018579006,
    -0.015150101855397224,
    -0.033062227070331573,
    0.010562684386968613,
    -0.0007695547537878156,
    0.027264714241027832,
    -0.044411130249500275,
    0.0003572169807739556,
    -0.00178779405541718,
    -0.005517208017408848,
    0.024530038237571716,
    0.007267400156706572,
    0.010234522633254528,
    -0.024297591298818588,
    -0.0015903847524896264,
    0.0077459681779146194,
    -0.02681349217891693,
    -0.010549010708928108,
    -0.0036576285492628813,
    -0.002179194474592805,
    0.0035414048470556736,
    0.0036097716074436903,
    0.005240322090685368,
    0.010938702151179314,
    0.03226917237043381,
    0.00046916777500882745,
    0.0031414583791047335,
    -0.001317771733738482,
    -0.02191842347383499,
    0.015984177589416504,
    0.013960517942905426,
    -8.887695003068075e-05,
    -0.003510639537125826,
    -0.0010007203090935946,
    -0.011560840532183647,
    -0.0014057940570637584,
    -0.012893995270133018,
    0.02066047303378582,
    -0.026936553418636322,
    -0.0032064069528132677,
    -0.008176679722964764,
    0.00732893031090498,
    -0.028221851214766502,
    -0.0028885009232908487,
    0.00011291218834230676,
    -0.030108777806162834,
    0.004382317420095205,
    -0.0044472659938037395,
    0.002363785170018673,
    -0.023012293502688408,
    0.011636043898761272,
    -0.010220849886536598,
    0.008812491782009602,
    0.028413278982043266,
    0.008545860648155212,
    0.013830620795488358,
    0.0014297225279733539,
    0.020646799355745316,
    0.0014228858053684235,
    0.020742513239383698,
    -0.011273699812591076,
    0.00048711406998336315,
    -0.012531650252640247,
    -0.025008607655763626,
    -0.013892151415348053,
    -0.00590348057448864,
    0.0033619417808949947,
    0.02191842347383499,
    -0.0037499237805604935,
    -0.014753574505448341,
    0.07914150506258011,
    -0.0005661632749252021,
    -0.022697806358337402,
    0.011335229501128197,
    -0.014753574505448341,
    0.021932097151875496,
    0.010624214075505733,
    -0.004956599324941635,
    0.008641574531793594,
    -0.010118299163877964,
    0.0072058700025081635,
    -0.0019108544802293181,
    -0.020701494067907333,
    0.0161209125071764,
    -0.019894763827323914,
    0.009626057930290699,
    -0.027962056919932365,
    0.03352712094783783,
    -0.012005225755274296,
    0.005148026626557112,
    0.014903981238603592,
    0.011622371152043343,
    0.024707792326807976,
    -0.012969198636710644,
    -0.06114734336733818,
    -0.008368106558918953,
    0.03341773524880409,
    0.025760643184185028,
    -0.0015536375576630235,
    -0.0522596500813961,
    0.011656554415822029,
    0.0012263309909030795,
    -0.015040715225040913,
    -0.027100633829832077,
    0.005038639530539513,
    0.01964864321053028,
    -0.01722845621407032,
    -0.033034879714250565,
    0.008272393606603146,
    -0.020441699773073196,
    -0.004430174361914396,
    -0.008080965839326382,
    -0.026895534247159958,
    -0.028741439804434776,
    0.01707804761826992,
    -0.006638424936681986,
    0.011916348710656166,
    -0.009632894769310951,
    -0.03675403818488121
  ]
}
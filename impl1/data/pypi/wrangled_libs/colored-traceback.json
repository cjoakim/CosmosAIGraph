{
  "classifiers": [
    "development status :: 4 - beta",
    "environment :: console",
    "intended audience :: developers",
    "license :: osi approved :: isc license (iscl)",
    "natural language :: english",
    "operating system :: macos :: macos x",
    "operating system :: microsoft :: windows",
    "operating system :: posix :: linux",
    "programming language :: python",
    "programming language :: python :: 2.7",
    "programming language :: python :: 3.3"
  ],
  "description": "colored traceback\n=================\n\nautomatically color python's uncaught exception tracebacks.\n\nthis one's for anybody who's ever struggled to read python's stacktraces on the\nterminal. something about the two-lines-per-frame approach really just makes\nthem tough to scan visually.\n\ncompare this:\n\n::\n\n    traceback (most recent call last):\n      file \"./workflowy.py\", line 525, in <module>\n        main()\n      file \"./workflowy.py\", line 37, in main\n        projects = cli.load_json(args, input_is_pipe)\n      file \"./workflowy.py\", line 153, in load_json\n        return json.load(sys.stdin)\n      file \"/system/library/frameworks/python.framework/versions/2.7/lib/python2.7/json/__init__.py\", line 290, in load\n        **kw)\n      file \"/system/library/frameworks/python.framework/versions/2.7/lib/python2.7/json/__init__.py\", line 338, in loads\n        return _default_decoder.decode(s)\n      file \"/system/library/frameworks/python.framework/versions/2.7/lib/python2.7/json/decoder.py\", line 365, in decode\n        obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n      file \"/system/library/frameworks/python.framework/versions/2.7/lib/python2.7/json/decoder.py\", line 383, in raw_decode\n        raise valueerror(\"no json object could be decoded\")\n    valueerror: no json object could be decoded\n\nto this:\n\n.. code-block:: python\n\n    traceback (most recent call last):\n      file \"./workflowy.py\", line 525, in <module>\n        main()\n      file \"./workflowy.py\", line 37, in main\n        projects = cli.load_json(args, input_is_pipe)\n      file \"./workflowy.py\", line 153, in load_json\n        return json.load(sys.stdin)\n      file \"/system/library/frameworks/python.framework/versions/2.7/lib/python2.7/json/__init__.py\", line 290, in load\n        **kw)\n      file \"/system/library/frameworks/python.framework/versions/2.7/lib/python2.7/json/__init__.py\", line 338, in loads\n        return _default_decoder.decode(s)\n      file \"/system/library/frameworks/python.framework/versions/2.7/lib/python2.7/json/decoder.py\", line 365, in decode\n        obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n      file \"/system/library/frameworks/python.framework/versions/2.7/lib/python2.7/json/decoder.py\", line 383, in raw_decode\n        raise valueerror(\"no json object could be decoded\")\n    valueerror: no json object could be decoded\n\ninstallation\n------------\n\nthrough pip:\n\n.. code-block:: bash\n\n    pip install colored-traceback\n\nor directly:\n\n.. code-block:: bash\n\n    git clone http://www.github.com/staticshock/colored-traceback.py\n    python setup.py install\n\non windows, which has no real support for ansi escape sequences, there's an\nadditional dependency on `colorama`:\n\n.. code-block:: bash\n\n    pip install colorama\n\nusage\n-----\n\ncolored traceback can be executed as a module:\n\n.. code-block:: bash\n\n    python -m colored_traceback somefile.py\n\ncolored traceback also works well within a script or even directly in the\ninterpreter repl. standard usage will color the output, unless it's being\nredirected to a pipe:\n\n.. code-block:: python\n\n    import colored_traceback\n    colored_traceback.add_hook()\n\nif want to retain color even when stderr is being piped, tack on an\n`always=true` argument:\n\n.. code-block:: python\n\n    import colored_traceback\n    colored_traceback.add_hook(always=true)\n\nthere are also a couple of convenience imports, which get the footprint down to\none line:\n\n.. code-block:: python\n\n    # same as add_hook()\n    import colored_traceback.auto\n\n    # same as add_hook(always=true)\n    import colored_traceback.always\n\nit goes without saying that you might want to catch `importerror`, making the\npresence of the package optional:\n\n.. code-block:: python\n\n    try:\n        import colored_traceback.auto\n    except importerror:\n        pass\n\n\n",
  "docs_url": null,
  "keywords": "",
  "license": "isc",
  "name": "colored-traceback",
  "package_url": "https://pypi.org/project/colored-traceback/",
  "project_url": "https://pypi.org/project/colored-traceback/",
  "project_urls": {
    "Homepage": "http://www.github.com/staticshock/colored-traceback.py"
  },
  "release_url": "https://pypi.org/project/colored-traceback/0.3.0/",
  "requires_dist": [
    "pygments"
  ],
  "requires_python": "",
  "summary": "automatically color uncaught exception tracebacks",
  "version": "0.3.0",
  "releases": [],
  "developers": [
    "anton_backer",
    "olegov@gmail.com"
  ],
  "kwds": "colored_traceback pip traceback input_is_pipe tracebacks",
  "license_kwds": "isc",
  "libtype": "pypi",
  "id": "pypi_colored_traceback",
  "homepage": "http://www.github.com/staticshock/colored-traceback.py",
  "release_count": 5,
  "dependency_ids": [
    "pypi_pygments"
  ]
}
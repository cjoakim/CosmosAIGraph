{
  "classifiers": [
    "development status :: 7 - inactive",
    "framework :: aws cdk",
    "framework :: aws cdk :: 1",
    "intended audience :: developers",
    "license :: osi approved",
    "operating system :: os independent",
    "programming language :: javascript",
    "programming language :: python :: 3 :: only",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "typing :: typed"
  ],
  "description": "# amazon cognito construct library\n\n<!--begin stability banner-->---\n\n\n![end-of-support](https://img.shields.io/badge/end--of--support-critical.svg?style=for-the-badge)\n\n> aws cdk v1 has reached end-of-support on 2023-06-01.\n> this package is no longer being updated, and users should migrate to aws cdk v2.\n>\n> for more information on how to migrate, see the [*migrating to aws cdk v2* guide](https://docs.aws.amazon.com/cdk/v2/guide/migrating-v2.html).\n\n---\n\n\nfeatures                                   | stability\n-------------------------------------------|--------------------------------------------------------\ncfn resources                              | ![stable](https://img.shields.io/badge/stable-success.svg?style=for-the-badge)\nhigher level constructs for user pools     | ![stable](https://img.shields.io/badge/stable-success.svg?style=for-the-badge)\nhigher level constructs for identity pools | ![not implemented](https://img.shields.io/badge/not--implemented-black.svg?style=for-the-badge)\n\n> **cfn resources:** all classes with the `cfn` prefix in this module ([cfn resources](https://docs.aws.amazon.com/cdk/latest/guide/constructs.html#constructs_lib)) are always\n> stable and safe to use.\n\n<!-- -->\n\n> **stable:** higher level constructs in this module that are marked stable will not undergo any\n> breaking changes. they will strictly follow the [semantic versioning](https://semver.org/) model.\n\n---\n<!--end stability banner-->\n\n[amazon cognito](https://docs.aws.amazon.com/cognito/latest/developerguide/what-is-amazon-cognito.html) provides\nauthentication, authorization, and user management for your web and mobile apps. your users can sign in directly with a\nuser name and password, or through a third party such as facebook, amazon, google or apple.\n\nthe two main components of amazon cognito are [user\npools](https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools.html) and [identity\npools](https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-identity.html). user pools are user directories\nthat provide sign-up and sign-in options for your app users. identity pools enable you to grant your users access to\nother aws services. identity pool l2 constructs can be found [here](https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cognito-identitypool-alpha-readme.html).\n\nthis module is part of the [aws cloud development kit](https://github.com/aws/aws-cdk) project.\n\n## table of contents\n\n* [user pools](#user-pools)\n\n  * [sign up](#sign-up)\n  * [sign in](#sign-in)\n  * [attributes](#attributes)\n  * [security](#security)\n\n    * [multi-factor authentication](#multi-factor-authentication-mfa)\n    * [account recovery settings](#account-recovery-settings)\n  * [emails](#emails)\n  * [device tracking](#device-tracking)\n  * [lambda triggers](#lambda-triggers)\n\n    * [trigger permissions](#trigger-permissions)\n  * [import](#importing-user-pools)\n  * [identity providers](#identity-providers)\n  * [app clients](#app-clients)\n  * [resource servers](#resource-servers)\n  * [domains](#domains)\n\n## user pools\n\nuser pools allow creating and managing your own directory of users that can sign up and sign in. they enable easy\nintegration with social identity providers such as facebook, google, amazon, microsoft active directory, etc. through\nsaml.\n\nusing the cdk, a new user pool can be created as part of the stack using the construct's constructor. you may specify\nthe `userpoolname` to give your own identifier to the user pool. if not, cloudformation will generate a name.\n\n```python\ncognito.userpool(self, \"myuserpool\",\n    user_pool_name=\"myawesomeapp-userpool\"\n)\n```\n\nthe default set up for the user pool is configured such that only administrators will be allowed\nto create users. features such as multi-factor authentication (mfas) and lambda triggers are not\nconfigured by default.\n\nuse the `grant()` method to add an iam policy statement associated with the user pool to an\niam principal's policy.\n\n```python\nuser_pool = cognito.userpool(self, \"myuserpool\")\nrole = iam.role(self, \"role\",\n    assumed_by=iam.serviceprincipal(\"foo\")\n)\nuser_pool.grant(role, \"cognito-idp:admincreateuser\")\n```\n\n### sign up\n\nusers can either be signed up by the app's administrators or can sign themselves up. once a user has signed up, their\naccount needs to be confirmed. cognito provides several ways to sign users up and confirm their accounts. learn more\nabout [user sign up here](https://docs.aws.amazon.com/cognito/latest/developerguide/signing-up-users-in-your-app.html).\n\nwhen a user signs up, email and sms messages are used to verify their account and contact methods. the following code\nsnippet configures a user pool with properties relevant to these verification messages -\n\n```python\ncognito.userpool(self, \"myuserpool\",\n    # ...\n    self_sign_up_enabled=true,\n    user_verification=cognito.userverificationconfig(\n        email_subject=\"verify your email for our awesome app!\",\n        email_body=\"thanks for signing up to our awesome app! your verification code is {####}\",\n        email_style=cognito.verificationemailstyle.code,\n        sms_message=\"thanks for signing up to our awesome app! your verification code is {####}\"\n    )\n)\n```\n\nby default, self sign up is disabled. learn more about [email and sms verification messages\nhere](https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pool-settings-message-customizations.html).\n\nbesides users signing themselves up, an administrator of any user pool can sign users up. the user then receives an\ninvitation to join the user pool. the following code snippet configures a user pool with properties relevant to the\ninvitation messages -\n\n```python\ncognito.userpool(self, \"myuserpool\",\n    # ...\n    user_invitation=cognito.userinvitationconfig(\n        email_subject=\"invite to join our awesome app!\",\n        email_body=\"hello {username}, you have been invited to join our awesome app! your temporary password is {####}\",\n        sms_message=\"hello {username}, your temporary password for our awesome app is {####}\"\n    )\n)\n```\n\nall email subjects, bodies and sms messages for both invitation and verification support cognito's message templating.\nlearn more about [message templates\nhere](https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pool-settings-message-templates.html).\n\n### sign in\n\nusers registering or signing in into your application can do so with multiple identifiers. there are 4 options\navailable:\n\n* `username`: allow signing in using the one time immutable user name that the user chose at the time of sign up.\n* `email`: allow signing in using the email address that is associated with the account.\n* `phone`: allow signing in using the phone number that is associated with the account.\n* `preferredusername`: allow signing in with an alternate user name that the user can change at any time. however, this\n  is not available if the `username` option is not chosen.\n\nthe following code sets up a user pool so that the user can sign in with either their username or their email address -\n\n```python\ncognito.userpool(self, \"myuserpool\",\n    # ...\n    # ...\n    sign_in_aliases=cognito.signinaliases(\n        username=true,\n        email=true\n    )\n)\n```\n\nuser pools can either be configured so that user name is primary sign in form, but also allows for the other three to be\nused additionally; or it can be configured so that email and/or phone numbers are the only ways a user can register and\nsign in. read more about this\n[here](https://docs.aws.amazon.com/cognito/latest/developerguide/user-pool-settings-attributes.html#user-pool-settings-aliases-settings).\n\n\u26a0\ufe0f the cognito service prevents changing the `signinalias` property for an existing user pool.\n\nto match with 'option 1' in the above link, with a verified email, `signinaliases` should be set to\n`{ username: true, email: true }`. to match with 'option 2' in the above link with both a verified\nemail and phone number, this property should be set to `{ email: true, phone: true }`.\n\ncognito recommends that email and phone number be automatically verified, if they are one of the sign in methods for\nthe user pool. read more about that\n[here](https://docs.aws.amazon.com/cognito/latest/developerguide/user-pool-settings-attributes.html#user-pool-settings-aliases).\nthe cdk does this by default, when email and/or phone number are specified as part of `signinaliases`. this can be\noverridden by specifying the `autoverify` property.\n\nthe following code snippet sets up only email as a sign in alias, but both email and phone number to be auto-verified.\n\n```python\ncognito.userpool(self, \"myuserpool\",\n    # ...\n    # ...\n    sign_in_aliases=cognito.signinaliases(username=true, email=true),\n    auto_verify=cognito.autoverifiedattrs(email=true, phone=true)\n)\n```\n\na user pool can optionally ignore case when evaluating sign-ins. when `signincasesensitive` is false, cognito will not\ncheck the capitalization of the alias when signing in. default is true.\n\n### attributes\n\nattributes represent the various properties of each user that's collected and stored in the user pool. cognito\nprovides a set of standard attributes that are available for all user pools. users are allowed to select any of these\nstandard attributes to be required. users will not be able to sign up to the user pool without providing the required\nattributes. besides these, additional attributes can be further defined, and are known as custom attributes.\n\nlearn more on [attributes in cognito's\ndocumentation](https://docs.aws.amazon.com/cognito/latest/developerguide/user-pool-settings-attributes.html).\n\nthe following code configures a user pool with two standard attributes (name and address) as required and mutable, and adds\nfour custom attributes.\n\n```python\ncognito.userpool(self, \"myuserpool\",\n    # ...\n    standard_attributes=cognito.standardattributes(\n        fullname=cognito.standardattribute(\n            required=true,\n            mutable=false\n        ),\n        address=cognito.standardattribute(\n            required=false,\n            mutable=true\n        )\n    ),\n    custom_attributes={\n        \"myappid\": cognito.stringattribute(min_len=5, max_len=15, mutable=false),\n        \"callingcode\": cognito.numberattribute(min=1, max=3, mutable=true),\n        \"isemployee\": cognito.booleanattribute(mutable=true),\n        \"joinedon\": cognito.datetimeattribute()\n    }\n)\n```\n\nas shown in the code snippet, there are data types that are available for custom attributes. the 'string' and 'number'\ndata types allow for further constraints on their length and values, respectively.\n\ncustom attributes cannot be marked as required.\n\nall custom attributes share the property `mutable` that specifies whether the value of the attribute can be changed.\nthe default value is `false`.\n\nuser pools come with two 'built-in' attributes - `email_verified` and `phone_number_verified`. these cannot be\nconfigured (required-ness or mutability) as part of user pool creation. however, user pool administrators can modify\nthem for specific users using the [adminupdateuserattributes api](https://docs.aws.amazon.com/cognito-user-identity-pools/latest/apireference/api_adminupdateuserattributes.html).\n\n### security\n\ncognito sends various messages to its users via sms, for different actions, ranging from account verification to\nmarketing. in order to send sms messages, cognito needs an iam role that it can assume, with permissions that allow it\nto send sms messages.\n\nby default, the cdk looks at all of the specified properties (and their defaults when not explicitly specified) and\nautomatically creates an sms role, when needed. for example, if mfa second factor by sms is enabled, the cdk will\ncreate a new role. the `smsrole` property can be used to specify the user supplied role that should be used instead.\nadditionally, the property `enablesmsrole` can be used to override the cdk's default behaviour to either enable or\nsuppress automatic role creation.\n\n```python\npool_sms_role = iam.role(self, \"userpoolsmsrole\",\n    assumed_by=iam.serviceprincipal(\"foo\")\n)\n\ncognito.userpool(self, \"myuserpool\",\n    # ...\n    sms_role=pool_sms_role,\n    sms_role_external_id=\"c87467be-4f34-11ea-b77f-2e728ce88125\"\n)\n```\n\nwhen the `smsrole` property is specified, the `smsroleexternalid` may also be specified. the value of\n`smsroleexternalid` will be used as the `sts:externalid` when the cognito service assumes the role. in turn, the role's\nassume role policy should be configured to accept this value as the externalid. learn more about [externalid\nhere](https://docs.aws.amazon.com/iam/latest/userguide/id_roles_create_for-user_externalid.html).\n\n#### multi-factor authentication (mfa)\n\nuser pools can be configured to enable multi-factor authentication (mfa). it can either be turned off, set to optional\nor made required. setting mfa to optional means that individual users can choose to enable it.\nadditionally, the mfa code can be sent either via sms text message or via a time-based software token.\nsee the [documentation on mfa](https://docs.aws.amazon.com/cognito/latest/developerguide/user-pool-settings-mfa.html) to\nlearn more.\n\nthe following code snippet marks mfa for the user pool as required. this means that all users are required to\nconfigure an mfa token and use it for sign in. it also allows for the users to use both sms based mfa, as well,\n[time-based one time password\n(totp)](https://docs.aws.amazon.com/cognito/latest/developerguide/user-pool-settings-mfa-totp.html).\n\n```python\ncognito.userpool(self, \"myuserpool\",\n    # ...\n    mfa=cognito.mfa.required,\n    mfa_second_factor=cognito.mfasecondfactor(\n        sms=true,\n        otp=true\n    )\n)\n```\n\nuser pools can be configured with policies around a user's password. this includes the password length and the\ncharacter sets that they must contain.\n\nfurther to this, it can also be configured with the validity of the auto-generated temporary password. a temporary\npassword is generated by the user pool either when an admin signs up a user or when a password reset is requested.\nthe validity of this password dictates how long to give the user to use this password before expiring it.\n\nthe following code snippet configures these properties -\n\n```python\ncognito.userpool(self, \"myuserpool\",\n    # ...\n    password_policy=cognito.passwordpolicy(\n        min_length=12,\n        require_lowercase=true,\n        require_uppercase=true,\n        require_digits=true,\n        require_symbols=true,\n        temp_password_validity=duration.days(3)\n    )\n)\n```\n\nnote that, `temppasswordvalidity` can be specified only in whole days. specifying fractional days would throw an error.\n\n#### account recovery settings\n\nuser pools can be configured on which method a user should use when recovering the password for their account. this\ncan either be email and/or sms. read more at [recovering user accounts](https://docs.aws.amazon.com/cognito/latest/developerguide/how-to-recover-a-user-account.html)\n\n```python\ncognito.userpool(self, \"userpool\",\n    # ...\n    account_recovery=cognito.accountrecovery.email_only\n)\n```\n\nthe default for account recovery is by phone if available and by email otherwise.\na user will not be allowed to reset their password via phone if they are also using it for mfa.\n\n### emails\n\ncognito sends emails to users in the user pool, when particular actions take place, such as welcome emails, invitation\nemails, password resets, etc. the address from which these emails are sent can be configured on the user pool.\nread more at [email settings for user pools](https://docs.aws.amazon.com/cognito/latest/developerguide/user-pool-email.html).\n\nby default, user pools are configured to use cognito's built in email capability, which will send emails\nfrom `no-reply@verificationemail.com`. if you want to use a custom email address you can configure\ncognito to send emails through amazon ses, which is detailed below.\n\n```python\ncognito.userpool(self, \"myuserpool\",\n    email=cognito.userpoolemail.with_cognito(\"support@myawesomeapp.com\")\n)\n```\n\nfor typical production environments, the default email limit is below the required delivery volume.\nto enable a higher delivery volume, you can configure the userpool to send emails through amazon ses. to do\nso, follow the steps in the [cognito developer guide](https://docs.aws.amazon.com/cognito/latest/developerguide/user-pool-email.html#user-pool-email-developer)\nto verify an email address, move the account out of the ses sandbox, and grant cognito email permissions via an\nauthorization policy.\n\nonce the ses setup is complete, the userpool can be configured to use the ses email.\n\n```python\ncognito.userpool(self, \"myuserpool\",\n    email=cognito.userpoolemail.with_ses(\n        from_email=\"noreply@myawesomeapp.com\",\n        from_name=\"awesome app\",\n        reply_to=\"support@myawesomeapp.com\"\n    )\n)\n```\n\nsending emails through ses requires that ses be configured (as described above) in a valid ses region.\nif the userpool is being created in a different region, `sesregion` must be used to specify the correct ses region.\n\n```python\ncognito.userpool(self, \"myuserpool\",\n    email=cognito.userpoolemail.with_ses(\n        ses_region=\"us-east-1\",\n        from_email=\"noreply@myawesomeapp.com\",\n        from_name=\"awesome app\",\n        reply_to=\"support@myawesomeapp.com\"\n    )\n)\n```\n\nwhen sending emails from an ses verified domain, `sesverifieddomain` can be used to specify the domain.\nthe email address does not need to be verified when sending emails from a verified domain, because the identity of the email configuration is can be determined from the domain alone.\n\n```python\ncognito.userpool(self, \"myuserpool\",\n    email=cognito.userpoolemail.with_ses(\n        ses_region=\"us-east-1\",\n        from_email=\"noreply@myawesomeapp.com\",\n        from_name=\"awesome app\",\n        reply_to=\"support@myawesomeapp.com\",\n        ses_verified_domain=\"myawesomeapp.com\"\n    )\n)\n```\n\n### device tracking\n\nuser pools can be configured to track devices that users have logged in to.\nread more at [device tracking](https://docs.aws.amazon.com/cognito/latest/developerguide/amazon-cognito-user-pools-device-tracking.html)\n\n```python\ncognito.userpool(self, \"myuserpool\",\n    # ...\n    device_tracking=cognito.devicetracking(\n        challenge_required_on_new_device=true,\n        device_only_remembered_on_user_prompt=true\n    )\n)\n```\n\nthe default is to not track devices.\n\n### lambda triggers\n\nuser pools can be configured such that aws lambda functions can be triggered when certain user operations or actions\noccur, such as, sign up, user confirmation, sign in, etc. they can also be used to add custom authentication\nchallenges, user migrations and custom verification messages. learn more about triggers at [user pool workflows with\ntriggers](https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-working-with-aws-lambda-triggers.html).\n\nlambda triggers can either be specified as part of the `userpool` initialization, or it can be added later, via methods\non the construct, as so -\n\n```python\nauth_challenge_fn = lambda_.function(self, \"authchallengefn\",\n    runtime=lambda_.runtime.nodejs_14_x,\n    handler=\"index.handler\",\n    code=lambda_.code.from_asset(path.join(__dirname, \"path/to/asset\"))\n)\n\nuserpool = cognito.userpool(self, \"myuserpool\",\n    # ...\n    lambda_triggers=cognito.userpooltriggers(\n        create_auth_challenge=auth_challenge_fn\n    )\n)\n\nuserpool.add_trigger(cognito.userpooloperation.user_migration, lambda_.function(self, \"usermigrationfn\",\n    runtime=lambda_.runtime.nodejs_14_x,\n    handler=\"index.handler\",\n    code=lambda_.code.from_asset(path.join(__dirname, \"path/to/asset\"))\n))\n```\n\nthe following table lists the set of triggers available, and their corresponding method to add it to the user pool.\nfor more information on the function of these triggers and how to configure them, read [user pool workflows with\ntriggers](https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-working-with-aws-lambda-triggers.html).\n\n#### trigger permissions\n\nthe `function.attachtorolepolicy()` api can be used to add additional iam permissions to the lambda trigger\nas necessary.\n\n\u26a0\ufe0f using the `attachtorolepolicy` api to provide permissions to your user pool will result in a circular dependency. see [aws/aws-cdk#7016](https://github.com/aws/aws-cdk/issues/7016).\nerror message when running `cdk synth` or `cdk deploy`:\n\n> circular dependency between resources: [pool056f3f7e, fnpostauthfncognitoa630a2b1, ...]\n\nto work around the circular dependency issue, use the `attachinlinepolicy()` api instead, as shown below.\n\n```python\n# post_auth_fn: lambda.function\n\n\nuserpool = cognito.userpool(self, \"myuserpool\",\n    lambda_triggers=cognito.userpooltriggers(\n        post_authentication=post_auth_fn\n    )\n)\n\n# provide permissions to describe the user pool scoped to the arn the user pool\npost_auth_fn.role.attach_inline_policy(iam.policy(self, \"userpool-policy\",\n    statements=[iam.policystatement(\n        actions=[\"cognito-idp:describeuserpool\"],\n        resources=[userpool.user_pool_arn]\n    )]\n))\n```\n\n### importing user pools\n\nany user pool that has been created outside of this stack, can be imported into the cdk app. importing a user pool\nallows for it to be used in other parts of the cdk app that reference an `iuserpool`. however, imported user pools have\nlimited configurability. as a rule of thumb, none of the properties that are part of the\n[`aws::cognito::userpool`](https://docs.aws.amazon.com/awscloudformation/latest/userguide/aws-resource-cognito-userpool.html)\ncloudformation resource can be configured.\n\nuser pools can be imported either using their id via the `userpool.fromuserpoolid()`, or by using their arn, via the\n`userpool.fromuserpoolarn()` api.\n\n```python\nawesome_pool = cognito.userpool.from_user_pool_id(self, \"awesome-user-pool\", \"us-east-1_oiur12abd\")\n\nother_awesome_pool = cognito.userpool.from_user_pool_arn(self, \"other-awesome-user-pool\", \"arn:aws:cognito-idp:eu-west-1:123456789012:userpool/us-east-1_mtryyq14d\")\n```\n\n### identity providers\n\nusers that are part of a user pool can sign in either directly through a user pool, or federate through a third-party\nidentity provider. once configured, the cognito backend will take care of integrating with the third-party provider.\nread more about [adding user pool sign-in through a third\nparty](https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pools-identity-federation.html).\n\nthe following third-party identity providers are currently supported in the cdk -\n\n* [login with amazon](https://developer.amazon.com/apps-and-games/login-with-amazon)\n* [facebook login](https://developers.facebook.com/docs/facebook-login/)\n* [google login](https://developers.google.com/identity/sign-in/web/sign-in)\n* [sign in with apple](https://developer.apple.com/sign-in-with-apple/get-started/)\n* [openid connect](https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pools-oidc-idp.html)\n\nthe following code configures a user pool to federate with the third party provider, 'login with amazon'. the identity\nprovider needs to be configured with a set of credentials that the cognito backend can use to federate with the\nthird-party identity provider.\n\n```python\nuserpool = cognito.userpool(self, \"pool\")\n\nprovider = cognito.userpoolidentityprovideramazon(self, \"amazon\",\n    client_id=\"amzn-client-id\",\n    client_secret=\"amzn-client-secret\",\n    user_pool=userpool\n)\n```\n\nattribute mapping allows mapping attributes provided by the third-party identity providers to [standard and custom\nattributes](#attributes) of the user pool. learn more about [specifying identity provider attribute mappings for your\nuser pool](https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pools-specifying-attribute-mapping.html).\n\nthe following code shows how different attributes provided by 'login with amazon' can be mapped to standard and custom\nuser pool attributes.\n\n```python\nuserpool = cognito.userpool(self, \"pool\")\n\ncognito.userpoolidentityprovideramazon(self, \"amazon\",\n    client_id=\"amzn-client-id\",\n    client_secret=\"amzn-client-secret\",\n    user_pool=userpool,\n    attribute_mapping=cognito.attributemapping(\n        email=cognito.providerattribute.amazon_email,\n        website=cognito.providerattribute.other(\"url\"),  # use other() when an attribute is not pre-defined in the cdk\n        custom={\n            # custom user pool attributes go here\n            \"unique_id\": cognito.providerattribute.amazon_user_id\n        }\n    )\n)\n```\n\n### app clients\n\nan app is an entity within a user pool that has permission to call unauthenticated apis (apis that do not have an\nauthenticated user), such as apis to register, sign in, and handle forgotten passwords. to call these apis, you need an\napp client id and an optional client secret. read [configuring a user pool app\nclient](https://docs.aws.amazon.com/cognito/latest/developerguide/user-pool-settings-client-apps.html) to learn more.\n\nthe following code creates an app client and retrieves the client id -\n\n```python\npool = cognito.userpool(self, \"pool\")\nclient = pool.add_client(\"customer-app-client\")\nclient_id = client.user_pool_client_id\n```\n\nexisting app clients can be imported into the cdk app using the `userpoolclient.fromuserpoolclientid()` api. for new\nand imported user pools, clients can also be created via the `userpoolclient` constructor, as so -\n\n```python\nimported_pool = cognito.userpool.from_user_pool_id(self, \"imported-pool\", \"us-east-1_oiur12abd\")\ncognito.userpoolclient(self, \"customer-app-client\",\n    user_pool=imported_pool\n)\n```\n\nclients can be configured with authentication flows. authentication flows allow users on a client to be authenticated\nwith a user pool. cognito user pools provide several different types of authentication, such as, srp (secure\nremote password) authentication, username-and-password authentication, etc. learn more about this at [userpool authentication\nflow](https://docs.aws.amazon.com/cognito/latest/developerguide/amazon-cognito-user-pools-authentication-flow.html).\n\nthe following code configures a client to use both srp and username-and-password authentication -\n\n```python\npool = cognito.userpool(self, \"pool\")\npool.add_client(\"app-client\",\n    auth_flows=cognito.authflow(\n        user_password=true,\n        user_srp=true\n    )\n)\n```\n\ncustom authentication protocols can be configured by setting the `custom` property under `authflow` and defining lambda\nfunctions for the corresponding user pool [triggers](#lambda-triggers). learn more at [custom authentication\nflow](https://docs.aws.amazon.com/cognito/latest/developerguide/amazon-cognito-user-pools-authentication-flow.html#amazon-cognito-user-pools-custom-authentication-flow).\n\nin addition to these authentication mechanisms, cognito user pools also support using oauth 2.0 framework for\nauthenticating users. user pool clients can be configured with oauth 2.0 authorization flows and scopes. learn more\nabout the [oauth 2.0 authorization framework](https://tools.ietf.org/html/rfc6749) and [cognito user pool's\nimplementation of\noauth2.0](https://aws.amazon.com/blogs/mobile/understanding-amazon-cognito-user-pool-oauth-2-0-grants/).\n\nthe following code configures an app client with the authorization code grant flow and registers the the app's welcome\npage as a callback (or redirect) url. it also configures the access token scope to 'openid'. all of these concepts can\nbe found in the [oauth 2.0 rfc](https://tools.ietf.org/html/rfc6749).\n\n```python\npool = cognito.userpool(self, \"pool\")\npool.add_client(\"app-client\",\n    o_auth=cognito.oauthsettings(\n        flows=cognito.oauthflows(\n            authorization_code_grant=true\n        ),\n        scopes=[cognito.oauthscope.openid],\n        callback_urls=[\"https://my-app-domain.com/welcome\"],\n        logout_urls=[\"https://my-app-domain.com/signin\"]\n    )\n)\n```\n\nan app client can be configured to prevent user existence errors. this\ninstructs the cognito authentication api to return generic authentication\nfailure responses instead of an usernotfoundexception. by default, the flag\nis not set, which means the cloudformation default (false) will be used. see the\n[documentation](https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pool-managing-errors.html)\nfor the full details on the behavior of this flag.\n\n```python\npool = cognito.userpool(self, \"pool\")\npool.add_client(\"app-client\",\n    prevent_user_existence_errors=true\n)\n```\n\nall identity providers created in the cdk app are automatically registered into the corresponding user pool. all app\nclients created in the cdk have all of the identity providers enabled by default. the 'cognito' identity provider,\nthat allows users to register and sign in directly with the cognito user pool, is also enabled by default.\nalternatively, the list of supported identity providers for a client can be explicitly specified -\n\n```python\npool = cognito.userpool(self, \"pool\")\npool.add_client(\"app-client\",\n    # ...\n    supported_identity_providers=[cognito.userpoolclientidentityprovider.amazon, cognito.userpoolclientidentityprovider.cognito\n    ]\n)\n```\n\nif the identity provider and the app client are created in the same stack, specify the dependency between both constructs to\nmake sure that the identity provider already exists when the app client will be created. the app client cannot handle the\ndependency to the identity provider automatically because the client does not have access to the provider's construct.\n\n```python\npool = cognito.userpool(self, \"pool\")\nprovider = cognito.userpoolidentityprovideramazon(self, \"amazon\",\n    user_pool=pool,\n    client_id=\"amzn-client-id\",\n    client_secret=\"amzn-client-secret\"\n)\n\nclient = pool.add_client(\"app-client\",\n    # ...\n    supported_identity_providers=[cognito.userpoolclientidentityprovider.amazon\n    ]\n)\n\nclient.node.add_dependency(provider)\n```\n\nin accordance with the oidc open standard, cognito user pool clients provide access tokens, id tokens and refresh tokens.\nmore information is available at [using tokens with user pools](https://docs.aws.amazon.com/en_us/cognito/latest/developerguide/amazon-cognito-user-pools-using-tokens-with-identity-providers.html).\nthe expiration time for these tokens can be configured as shown below.\n\n```python\npool = cognito.userpool(self, \"pool\")\npool.add_client(\"app-client\",\n    # ...\n    access_token_validity=duration.minutes(60),\n    id_token_validity=duration.minutes(60),\n    refresh_token_validity=duration.days(30)\n)\n```\n\nclients can (and should) be allowed to read and write relevant user attributes only. usually every client can be allowed to\nread the `given_name` attribute but not every client should be allowed to set the `email_verified` attribute.\nthe same criteria applies for both standard and custom attributes, more info is available at\n[attribute permissions and scopes](https://docs.aws.amazon.com/cognito/latest/developerguide/user-pool-settings-attributes.html#user-pool-settings-attribute-permissions-and-scopes).\nthe default behaviour is to allow read and write permissions on all attributes. the following code shows how this can be\nconfigured for a client.\n\n```python\npool = cognito.userpool(self, \"pool\")\n\nclient_write_attributes = (cognito.clientattributes()).with_standard_attributes(fullname=true, email=true).with_custom_attributes(\"favouritepizza\", \"favouritebeverage\")\n\nclient_read_attributes = client_write_attributes.with_standard_attributes(email_verified=true).with_custom_attributes(\"pointsearned\")\n\npool.add_client(\"app-client\",\n    # ...\n    read_attributes=client_read_attributes,\n    write_attributes=client_write_attributes\n)\n```\n\n[token revocation](https://docs.aws.amazon.com/cognito/latest/developerguide/token-revocation.html)\ncan be configured to be able to revoke refresh tokens in app clients. by default, token revocation is enabled for new user\npools. the property can be used to enable the token revocation in existing app clients or to change the default behavior.\n\n```python\npool = cognito.userpool(self, \"pool\")\npool.add_client(\"app-client\",\n    # ...\n    enable_token_revocation=true\n)\n```\n\n### resource servers\n\na resource server is a server for access-protected resources. it handles authenticated requests from an app that has an\naccess token. see [defining resource\nservers](https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pools-define-resource-servers.html)\nfor more information.\n\nan application may choose to model custom permissions via oauth. resource servers provide this capability via custom scopes\nthat are attached to an app client. the following example sets up a resource server for the 'users' resource for two different\napp clients and configures the clients to use these scopes.\n\n```python\npool = cognito.userpool(self, \"pool\")\n\nread_only_scope = cognito.resourceserverscope(scope_name=\"read\", scope_description=\"read-only access\")\nfull_access_scope = cognito.resourceserverscope(scope_name=\"*\", scope_description=\"full access\")\n\nuser_server = pool.add_resource_server(\"resourceserver\",\n    identifier=\"users\",\n    scopes=[read_only_scope, full_access_scope]\n)\n\nread_only_client = pool.add_client(\"read-only-client\",\n    # ...\n    o_auth=cognito.oauthsettings(\n        # ...\n        scopes=[cognito.oauthscope.resource_server(user_server, read_only_scope)]\n    )\n)\n\nfull_access_client = pool.add_client(\"full-access-client\",\n    # ...\n    o_auth=cognito.oauthsettings(\n        # ...\n        scopes=[cognito.oauthscope.resource_server(user_server, full_access_scope)]\n    )\n)\n```\n\n### domains\n\nafter setting up an [app client](#app-clients), the address for the user pool's sign-up and sign-in webpages can be\nconfigured using domains. there are two ways to set up a domain - either the amazon cognito hosted domain can be chosen\nwith an available domain prefix, or a custom domain name can be chosen. the custom domain must be one that is already\nowned, and whose certificate is registered in aws certificate manager.\n\nthe following code sets up a user pool domain in amazon cognito hosted domain with the prefix 'my-awesome-app', and\nanother domain with the custom domain 'user.myapp.com' -\n\n```python\npool = cognito.userpool(self, \"pool\")\n\npool.add_domain(\"cognitodomain\",\n    cognito_domain=cognito.cognitodomainoptions(\n        domain_prefix=\"my-awesome-app\"\n    )\n)\n\ncertificate_arn = \"arn:aws:acm:us-east-1:123456789012:certificate/11-3336f1-44483d-adc7-9cd375c5169d\"\n\ndomain_cert = certificatemanager.certificate.from_certificate_arn(self, \"domaincert\", certificate_arn)\npool.add_domain(\"customdomain\",\n    custom_domain=cognito.customdomainoptions(\n        domain_name=\"user.myapp.com\",\n        certificate=domain_cert\n    )\n)\n```\n\nread more about [using the amazon cognito\ndomain](https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pools-assign-domain-prefix.html) and [using your own\ndomain](https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pools-add-custom-domain.html).\n\nthe `signinurl()` methods returns the fully qualified url to the login page for the user pool. this page comes from the\nhosted ui configured with cognito. learn more at [hosted ui with the amazon cognito\nconsole](https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pools-app-integration.html#cognito-user-pools-create-an-app-integration).\n\n```python\nuserpool = cognito.userpool(self, \"userpool\")\nclient = userpool.add_client(\"client\",\n    # ...\n    o_auth=cognito.oauthsettings(\n        flows=cognito.oauthflows(\n            implicit_code_grant=true\n        ),\n        callback_urls=[\"https://myapp.com/home\", \"https://myapp.com/users\"\n        ]\n    )\n)\ndomain = userpool.add_domain(\"domain\")\nsign_in_url = domain.sign_in_url(client,\n    redirect_uri=\"https://myapp.com/home\"\n)\n```\n\nexisting domains can be imported into cdk apps using `userpooldomain.fromdomainname()` api\n\n```python\nmy_user_pool_domain = cognito.userpooldomain.from_domain_name(self, \"my-user-pool-domain\", \"domain-name\")\n```\n",
  "docs_url": null,
  "keywords": "",
  "license": "apache-2.0",
  "name": "aws-cdk.aws-cognito",
  "package_url": "https://pypi.org/project/aws-cdk.aws-cognito/",
  "project_url": "https://pypi.org/project/aws-cdk.aws-cognito/",
  "project_urls": {
    "Homepage": "https://github.com/aws/aws-cdk",
    "Source": "https://github.com/aws/aws-cdk.git"
  },
  "release_url": "https://pypi.org/project/aws-cdk.aws-cognito/1.204.0/",
  "requires_dist": [
    "aws-cdk.aws-certificatemanager (==1.204.0)",
    "aws-cdk.aws-iam (==1.204.0)",
    "aws-cdk.aws-kms (==1.204.0)",
    "aws-cdk.aws-lambda (==1.204.0)",
    "aws-cdk.core (==1.204.0)",
    "aws-cdk.custom-resources (==1.204.0)",
    "constructs (<4.0.0,>=3.3.69)",
    "jsii (<2.0.0,>=1.84.0)",
    "publication (>=0.0.3)",
    "typeguard (~=2.13.3)"
  ],
  "requires_python": "~=3.7",
  "summary": "the cdk construct library for aws::cognito",
  "version": "1.204.0",
  "releases": [],
  "developers": [
    "amazon_web_services"
  ],
  "kwds": "cdk aws awscloudformation migrate migrations",
  "license_kwds": "apache-2.0",
  "libtype": "pypi",
  "id": "pypi_aws_cdk.aws_cognito",
  "homepage": "https://github.com/aws/aws-cdk",
  "release_count": 258,
  "dependency_ids": [
    "pypi_aws_cdk.aws_certificatemanager",
    "pypi_aws_cdk.aws_iam",
    "pypi_aws_cdk.aws_kms",
    "pypi_aws_cdk.aws_lambda",
    "pypi_aws_cdk.core",
    "pypi_aws_cdk.custom_resources",
    "pypi_constructs",
    "pypi_jsii",
    "pypi_publication",
    "pypi_typeguard"
  ]
}
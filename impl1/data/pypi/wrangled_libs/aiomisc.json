{
  "classifiers": [
    "development status :: 5 - production/stable",
    "framework :: asyncio",
    "framework :: pytest",
    "framework :: aiohttp",
    "intended audience :: developers",
    "intended audience :: education",
    "intended audience :: information technology",
    "intended audience :: system administrators",
    "license :: osi approved :: mit license",
    "natural language :: english",
    "natural language :: russian",
    "operating system :: macos",
    "operating system :: microsoft :: windows",
    "operating system :: posix",
    "operating system :: posix :: linux",
    "programming language :: python",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.12",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "programming language :: python :: implementation :: cpython",
    "topic :: internet",
    "topic :: internet :: www/http",
    "topic :: software development",
    "topic :: software development :: libraries",
    "topic :: software development :: libraries :: python modules",
    "topic :: system",
    "topic :: system :: archiving :: compression",
    "topic :: system :: logging",
    "topic :: utilities",
    "typing :: typed"
  ],
  "description": "aiomisc - miscellaneous utils for asyncio\n=========================================\n\n.. image:: https://coveralls.io/repos/github/aiokitchen/aiomisc/badge.svg?branch=master\n   :target: https://coveralls.io/github/aiokitchen/aiomisc\n   :alt: coveralls\n\n.. image:: https://github.com/aiokitchen/aiomisc/workflows/tox/badge.svg\n   :target: https://github.com/aiokitchen/aiomisc/actions?query=workflow%3atox\n   :alt: actions\n\n.. image:: https://img.shields.io/pypi/v/aiomisc.svg\n   :target: https://pypi.python.org/pypi/aiomisc/\n   :alt: latest version\n\n.. image:: https://img.shields.io/pypi/wheel/aiomisc.svg\n   :target: https://pypi.python.org/pypi/aiomisc/\n\n.. image:: https://img.shields.io/pypi/pyversions/aiomisc.svg\n   :target: https://pypi.python.org/pypi/aiomisc/\n\n.. image:: https://img.shields.io/pypi/l/aiomisc.svg\n   :target: https://pypi.python.org/pypi/aiomisc/\n\n\nmiscellaneous utils for asyncio.\n\nas a programmer, you are no stranger to the challenges that come with building\nand maintaining software applications. one area that can be particularly\ndifficult is making architecture of the software that using asynchronous i/o.\n\nthis is where aiomisc comes in. aiomisc is a python library that provides a\ncollection of utility functions and classes for working with asynchronous i/o\nin a more intuitive and efficient way. it is built on top of the ``asyncio``\nlibrary and is designed to make it easier for developers to write\nasynchronous code that is both reliable and scalable.\n\nwith aiomisc, you can take advantage of powerful features like\n``worker pools``, ``connection pools``, ``circuit breaker pattern``,\nand retry mechanisms such as ``asyncbackoff`` and ``asyncretry`` to make your\nasyncio code more robust and easier to maintain. in this documentation,\nwe'll take a closer look at what ``aiomisc`` has to offer and how it can\nhelp you streamline your asyncio service development.\n\ninstallation\n------------\n\ninstallation is possible in standard ways, such as pypi or installation from\na git repository directly.\n\ninstalling from pypi_:\n\n.. code-block:: bash\n\n    pip3 install aiomisc\n\ninstalling from github.com:\n\n.. code-block:: bash\n\n    # using git tool\n    pip3 install git+https://github.com/aiokitchen/aiomisc.git\n\n    # alternative way using http\n    pip3 install \\\n        https://github.com/aiokitchen/aiomisc/archive/refs/heads/master.zip\n\nthe package contains several extras and you can install additional dependencies\nif you specify them in this way.\n\nwith uvloop_:\n\n.. code-block:: bash\n\n    pip3 install \"aiomisc[uvloop]\"\n\n\nwith aiohttp_:\n\n.. code-block:: bash\n\n    pip3 install \"aiomisc[aiohttp]\"\n\ncomplete table of extras bellow:\n\n+-----------------------------------+------------------------------------------------+\n| example                           |  description                                   |\n+===================================+================================================+\n| ``pip install aiomisc[aiohttp]``  | for running aiohttp_ applications.             |\n+-----------------------------------+------------------------------------------------+\n| ``pip install aiomisc[asgi]``     | for running asgi_ applications                 |\n+-----------------------------------+------------------------------------------------+\n| ``pip install aiomisc[carbon]``   | sending metrics to carbon_ (part of graphite_) |\n+-----------------------------------+------------------------------------------------+\n| ``pip install aiomisc[cron]``     | use croniter_ for scheduling tasks             |\n+-----------------------------------+------------------------------------------------+\n| ``pip install aiomisc[raven]``    | sending exceptions to sentry_ using raven_     |\n+-----------------------------------+------------------------------------------------+\n| ``pip install aiomisc[rich]``     | you might using rich_ for logging              |\n+-----------------------------------+------------------------------------------------+\n| ``pip install aiomisc[uvicorn]``  | for running asgi_ application using uvicorn_   |\n+-----------------------------------+------------------------------------------------+\n| ``pip install aiomisc[uvloop]``   | use uvloop_ as a default event loop            |\n+-----------------------------------+------------------------------------------------+\n\n.. _asgi: https://asgi.readthedocs.io/en/latest/\n.. _pypi: https://pypi.org/\n.. _aiohttp: https://pypi.org/project/aiohttp\n.. _carbon: https://pypi.org/project/carbon\n.. _croniter: https://pypi.org/project/croniter\n.. _graphite: http://graphiteapp.org\n.. _raven: https://pypi.org/project/raven\n.. _rich: https://pypi.org/project/rich\n.. _sentry: https://sentry.io/\n.. _uvloop: https://pypi.org/project/uvloop\n.. _uvicorn: https://pypi.org/project/uvicorn\n\nyou can combine extras values by separating them with commas, for example:\n\n.. code-block:: bash\n\n    pip3 install \"aiomisc[aiohttp,cron,rich,uvloop]\"\n\n\nquick start\n-----------\n\nthis section will cover how this library creates and uses the event loop and\ncreates services. of course, you can't write about everything here, but you\ncan read about a lot in the tutorial_ section, and you can\nalways refer to the modules_ and `api reference`_ sections for help.\n\nevent-loop and entrypoint\n+++++++++++++++++++++++++\n\nlet's look at this simple example first:\n\n.. code-block:: python\n\n    import asyncio\n    import logging\n\n    import aiomisc\n\n    log = logging.getlogger(__name__)\n\n    async def main():\n        log.info('starting')\n        await asyncio.sleep(3)\n        log.info('exiting')\n\n\n    if __name__ == '__main__':\n        with aiomisc.entrypoint(log_level=\"info\", log_format=\"color\") as loop:\n            loop.run_until_complete(main())\n\n\nthis code declares an asynchronous ``main()`` function that exits after\n3 seconds. it would seem nothing interesting, but the whole point is in\nthe ``entrypoint``.\n\nwhat does the ``entrypoint`` do, it would seem not so much, it creates an\nevent-loop and transfers control to the user. however, under the hood, the\nlogger is configured in a separate thread, a pool of threads is created,\nservices are started, but more on that later and there are no services\nin this example.\n\nalternatively, you can choose not to use an entrypoint, just create an\nevent-loop and set this as a default event loop for current thread:\n\n.. code-block:: python\n    :name: test_index_get_loop\n\n    import asyncio\n    import aiomisc\n\n    # * installs uvloop event loop is it's has been installed.\n    # * creates and set `aiomisc.thread_pool.threadpoolexecutor`\n    #   as a default executor\n    # * sets just created event-loop as a current event-loop for this thread.\n    aiomisc.new_event_loop()\n\n    async def main():\n        await asyncio.sleep(1)\n\n    if __name__ == '__main__':\n        loop = asyncio.get_event_loop()\n        loop.run_until_complete(main())\n\nthe example above is useful if your code is already using an implicitly created\nevent loop, you will have to modify less code, just add\n``aiomisc.new_event_loop()`` and all calls to ``asyncio.get_event_loop()``\nwill return the created instance.\n\nhowever, you can do with one call. following example closes implicitly created\nasyncio event loop and install a new one:\n\n.. code-block:: python\n    :name: test_index_new_loop\n\n    import asyncio\n    import aiomisc\n\n    async def main():\n        await asyncio.sleep(3)\n\n    if __name__ == '__main__':\n        loop = aiomisc.new_event_loop()\n        loop.run_until_complete(main())\n\nservices\n++++++++\n\nthe main thing that an ``entrypoint`` does is start and gracefully\nstop services.\n\nthe service concept within this library means a class derived from\nthe ``aiosmic.service`` class and implementing the\n``async def start(self) -> none:`` method and optionally the\n``async def stop(self, exc: optional[ exception]) -> none`` method.\n\nthe concept of stopping a service is not necessarily is pressing ``ctrl+c``\nkeys by user, it's actually just exiting the ``entrypoint`` context manager.\n\nthe example below shows what your service might look like:\n\n.. code-block:: python\n\n    from aiomisc import entrypoint, service\n\n    class myservice(service):\n        async def start(self):\n            do_something_when_start()\n\n        async def stop(self, exc):\n            do_graceful_shutdown()\n\n\n    with entrypoint(myservice()) as loop:\n        loop.run_forever()\n\nthe entry point can start as many instances of the service as it likes,\nand all of them will start concurrently.\n\nthere is also a way if the ``start`` method is a payload for a service,\nand then there is no need to implement the stop method, since the running\ntask with the ``start`` function will be canceled at the stop stage.\nbut in this case, you will have to notify the ``entrypoint`` that the\ninitialization of the service instance is complete and it can continue.\n\nlike this:\n\n.. code-block:: python\n\n    import asyncio\n    from threading import event\n    from aiomisc import entrypoint, service\n\n    event = event()\n\n    class myservice(service):\n        async def start(self):\n            # send signal to entrypoint for continue running\n            self.start_event.set()\n            await asyncio.sleep(3600)\n\n\n    with entrypoint(myservice()) as loop:\n        assert event.is_set()\n\n.. note::\n\n    the ``entrypoint`` passes control to the body of the context manager only\n    after all service instances have started. as mentioned above, a start is\n    considered to be the completion of the ``start`` method or the setting of\n    an start event with ``self.start_event.set()``.\n\nthe whole power of this library is in the set of already implemented or\nabstract services.\nsuch as: ``aiohttpservice``, ``asgiservice``, ``tcpserver``,\n``udpserver``, ``tcpclient``, ``periodicservice``, ``cronservice`` and so on.\n\nunfortunately in this section it is not possible to pay more attention to this,\nplease pay attention to the tutorial_ section section, there are more\nexamples and explanations, and of cource you always can find out an answer on\nthe `/api/index` or in the source code. the authors have tried to make\nthe source code as clear and simple as possible, so feel free to explore it.\n\n\nversioning\n----------\n\nthis software follows `semantic versioning`_\n\nsummary: it's given a version number major.minor.patch, increment the:\n\n* major version when you make incompatible api changes\n* minor version when you add functionality in a backwards compatible manner\n* patch version when you make backwards compatible bug fixes\n* additional labels for pre-release and build metadata are available as\n  extensions to the major.minor.patch format.\n\nin this case, the package version is assigned automatically with poem-plugins_,\nit using on the tag in the repository as a major and minor and the counter,\nwhich takes the number of commits between tag to the head of branch.\n\n.. _poem-plugins: https://pypi.org/project/poem-plugins\n\n\nsummary: it's given a version number major.minor.patch, increment the:\n\n* major version when you make incompatible api changes\n* minor version when you add functionality in a backwards compatible manner\n* patch version when you make backwards compatible bug fixes\n* additional labels for pre-release and build metadata are available as\n  extensions to the major.minor.patch format.\n\nin this case, the package version is assigned automatically with poem-plugins_,\nit using on the tag in the repository as a major and minor and the counter,\nwhich takes the number of commits between tag to the head of branch.\n\n.. _poem-plugins: https://pypi.org/project/poem-plugins\n\n\nhow to develop?\n---------------\n\nthis project, like most open source projects, is developed by enthusiasts,\nyou can join the development, submit issues, or send your merge requests.\n\nin order to start developing in this repository, you need to do the\nfollowing things.\n\nshould be installed:\n\n* python 3.7+ as ``python3``\n* installed poetry_ as ``poetry``\n\n.. _poetry: https://python-poetry.org/docs/\n\nfor setting up developer environment just execute:\n\n    .. code-block::\n\n        # installing all dependencies\n        poetry install\n\n        # setting up pre-commit hooks\n        poetry run pre-commit install\n\n        # adding poem-plugins to the poetry\n        poetry self add poem-plugins\n\n\n.. _semantic versioning: http://semver.org/\n\n.. _api reference: https://aiomisc.readthedocs.io/en/latest/api/index.html\n.. _modules: https://aiomisc.readthedocs.io/en/latest/modules.html\n.. _tutorial: https://aiomisc.readthedocs.io/en/latest/tutorial.html\n",
  "docs_url": null,
  "keywords": "",
  "license": "mit",
  "name": "aiomisc",
  "package_url": "https://pypi.org/project/aiomisc/",
  "project_url": "https://pypi.org/project/aiomisc/",
  "project_urls": {
    "Changelog": "https://github.com/aiokitchen/aiomisc/blob/master/CHANGELOG.md",
    "Documentation": "https://aiomisc.readthedocs.io/en/latest/",
    "Homepage": "https://github.com/aiokitchen/aiomisc",
    "Source": "https://github.com/aiokitchen/aiomisc",
    "Tracker": "https://github.com/aiokitchen/aiomisc/issues"
  },
  "release_url": "https://pypi.org/project/aiomisc/17.3.41/",
  "requires_dist": [
    "aiocarbon (>=0.15,<0.16) ; extra == \"carbon\"",
    "aiohttp (>3) ; extra == \"aiohttp\" or extra == \"raven\"",
    "aiohttp-asgi (>=0.5.2,<0.6.0) ; extra == \"asgi\"",
    "colorlog (>=6.0,<7.0)",
    "croniter (>=1.3.8,<2.0.0) ; extra == \"cron\"",
    "grpcio (>=1.56.0,<2.0.0) ; extra == \"grpc\"",
    "grpcio-tools (>=1.56.0,<2.0.0) ; extra == \"grpc\"",
    "logging-journald ; sys_platform == \"linux\"",
    "raven ; extra == \"raven\"",
    "rich ; extra == \"rich\"",
    "setuptools ; python_version < \"3.8\"",
    "typing_extensions ; python_version < \"3.10\"",
    "uvloop (>=0.14,<1) ; extra == \"uvloop\"",
    "uvicorn (>=0.22,<1) ; extra == \"uvicorn\"",
    "asgiref (>=3.7,<4) ; extra == \"uvicorn\""
  ],
  "requires_python": ">=3.8,<4.0",
  "summary": "aiomisc - miscellaneous utils for asyncio",
  "version": "17.3.41",
  "releases": [],
  "developers": [
    "dmitry_orlov",
    "me@mosquito.su"
  ],
  "kwds": "badge aiomisc aiohttpservice asyncio aiosmic",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_aiomisc",
  "homepage": "https://github.com/aiokitchen/aiomisc",
  "release_count": 241,
  "dependency_ids": [
    "pypi_aiocarbon",
    "pypi_aiohttp",
    "pypi_aiohttp_asgi",
    "pypi_asgiref",
    "pypi_colorlog",
    "pypi_croniter",
    "pypi_grpcio",
    "pypi_grpcio_tools",
    "pypi_logging_journald",
    "pypi_raven",
    "pypi_rich",
    "pypi_setuptools",
    "pypi_typing_extensions",
    "pypi_uvicorn",
    "pypi_uvloop"
  ]
}
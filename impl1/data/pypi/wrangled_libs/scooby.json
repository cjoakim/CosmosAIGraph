{
  "classifiers": [
    "intended audience :: science/research",
    "license :: osi approved :: mit license",
    "natural language :: english",
    "operating system :: os independent",
    "programming language :: python"
  ],
  "description": "# \ud83d\udc36\ud83d\udd75\ufe0f scooby\n\n[![downloads](https://img.shields.io/pypi/dm/scooby.svg?label=pypi%20downloads)](https://pypi.org/project/scooby/)\n[![tests](https://github.com/banesullivan/scooby/actions/workflows/pythonpackage.yml/badge.svg)](https://github.com/banesullivan/scooby/actions/workflows/pythonpackage.yml)\n[![pypi status](https://img.shields.io/pypi/v/scooby.svg?logo=python&logocolor=white)](https://pypi.org/project/scooby/)\n[![conda status](https://img.shields.io/conda/vn/conda-forge/scooby.svg)](https://anaconda.org/conda-forge/scooby)\n[![codecov](https://codecov.io/gh/banesullivan/scooby/branch/main/graph/badge.svg?token=ejqz700tqh)](https://codecov.io/gh/banesullivan/scooby)\n\n*great dane turned python environment detective*\n\nthis is a lightweight tool for easily reporting your python environment's\npackage versions and hardware resources.\n\n\ninstall from [pypi](https://pypi.org/project/scooby/)\n\n```bash\npip install scooby\n```\n\nor from [conda-forge](https://anaconda.org/conda-forge/scooby/)\n\n```bash\nconda install -c conda-forge scooby\n```\n\n![jupyter notebook formatting](https://github.com/banesullivan/scooby/raw/main/assets/jupyter.png)\n\nscooby has html formatting for jupyter notebooks and rich text formatting for\njust about every other environment. we designed this module to be lightweight\nsuch that it could easily be added as a dependency to python projects for\nenvironment reporting when debugging. simply add scooby to your dependencies\nand implement a function to have scooby report on the aspects of the\nenvironment you care most about.\n\nif scooby is unable to detect aspects of an environment that you'd like to\nknow, please share this with us as a feature requests or pull requests.\n\nthe scooby reporting is derived from the versioning-scripts created by [dieter\nwerthm\u00fcller](https://github.com/prisae) for\n[empymod](https://empymod.github.io), [emg3d](https://empymod.github.io), and\nthe [simpeg](https://github.com/simpeg/) framework. it was heavily inspired by\n`ipynbtools.py` from [qutip](https://github.com/qutip) and\n[`watermark.py`](https://github.com/rasbt/watermark). this package has been\naltered to create a lightweight implementation so that it can easily be used as\nan environment reporting tool in any python library with minimal impact.\n\n## usage\n\n### generating reports\n\nreports are rendered as html-tables in jupyter notebooks as shown in the\nscreenshot above, and otherwise as plain text lists. if you do not output the\n`report` object either at the end of a notebook cell or it is generated\nsomewhere in a vanilla python script, you may have to print the `report`\nobject: `print(scooby.report())`, but note that this will only output the plain\ntext representation of the script.\n\n```py\n>>> import scooby\n>>> scooby.report()\n```\n```\n--------------------------------------------------------------------------------\n  date: wed feb 12 15:35:43 2020 w. europe standard time\n\n                os : windows\n            cpu(s) : 16\n           machine : amd64\n      architecture : 64bit\n               ram : 31.9 gib\n       environment : ipython\n\n  python 3.7.6 | packaged by conda-forge | (default, jan  7 2020, 21:48:41)\n  [msc v.1916 64 bit (amd64)]\n\n             numpy : 1.18.1\n             scipy : 1.3.1\n           ipython : 7.12.0\n        matplotlib : 3.0.3\n            scooby : 0.5.0\n\n  intel(r) math kernel library version 2019.0.4 product build 20190411 for\n  intel(r) 64 architecture applications\n--------------------------------------------------------------------------------\n```\n\nfor all the scooby-doo fans out there, `doo` is an alias for `report` so you\ncan oh-so satisfyingly do:\n\n```py\n>>> import scooby\n>>> scooby.doo()\n```\n```\n--------------------------------------------------------------------------------\n  date: thu nov 25 09:47:50 2021 mst\n\n                os : darwin\n            cpu(s) : 12\n           machine : x86_64\n      architecture : 64bit\n               ram : 32.0 gib\n       environment : python\n       file system : apfs\n\n  python 3.8.12 | packaged by conda-forge | (default, oct 12 2021, 21:50:38)\n  [clang 11.1.0 ]\n\n             numpy : 1.21.4\n             scipy : 1.7.3\n           ipython : 7.29.0\n        matplotlib : 3.5.0\n            scooby : 0.5.8\n--------------------------------------------------------------------------------\n```\n\nor better yet:\n\n```py\nfrom scooby import doo as doobiedoo\n```\n\non top of the default (optional) packages you can provide additional packages,\neither as strings or give already imported packages:\n```py\n>>> import pyvista\n>>> import scooby\n>>> scooby.report(additional=[pyvista, 'vtk', 'no_version', 'does_not_exist'])\n```\n```\n--------------------------------------------------------------------------------\n  date: wed feb 12 16:15:15 2020 w. europe standard time\n\n                os : windows\n            cpu(s) : 16\n           machine : amd64\n      architecture : 64bit\n               ram : 31.9 gib\n       environment : ipython\n\n  python 3.7.6 | packaged by conda-forge | (default, jan  7 2020, 21:48:41)\n  [msc v.1916 64 bit (amd64)]\n\n           pyvista : 0.23.1\n               vtk : 8.1.2\n        no_version : version unknown\n    does_not_exist : could not import\n             numpy : 1.18.1\n             scipy : 1.3.1\n           ipython : 7.12.0\n        matplotlib : 3.0.3\n            scooby : 0.5.0\n\n  intel(r) math kernel library version 2019.0.4 product build 20190411 for\n  intel(r) 64 architecture applications\n--------------------------------------------------------------------------------\n```\n\nfurthermore, scooby reports if a package could not be imported or if the\nversion of a package could not be determined.\n\nother useful parameters are\n\n- `ncol`: number of columns in the html-table;\n- `text_width`: text width of the plain-text version;\n- `sort`: list is sorted alphabetically if true.\n\nbesides `additional` there are two more lists, `core` and `optional`, which\ncan be used to provide package names. however, they are mostly useful for\npackage maintainers wanting to use scooby to create their reporting system\n(see below).\n\n\n### implementing scooby in your project\n\nyou can easily generate a custom `report` instance using scooby within your\nproject:\n\n```py\nclass report(scooby.report):\n    def __init__(self, additional=none, ncol=3, text_width=80, sort=false):\n        \"\"\"initiate a scooby.report instance.\"\"\"\n\n        # mandatory packages.\n        core = ['yourpackage', 'your_core_packages', 'e.g.', 'numpy', 'scooby']\n\n        # optional packages.\n        optional = ['your_optional_packages', 'e.g.', 'matplotlib']\n\n        scooby.report.__init__(self, additional=additional, core=core,\n                               optional=optional, ncol=ncol,\n                               text_width=text_width, sort=sort)\n```\n\nthis makes it particularly easy for a user of your project to quickly generate\na report on all of the relevant package versions and environment details when\nsumbitting a bug.\n\n```py\n>>> import your_package\n>>> your_package.report()\n```\n\nthe packages on the `core`-list are the mandatory ones for your project, while\nthe `optional`-list can be used for optional packages. keep the\n`additional`-list free to allow your users to add packages to the list.\n\n#### implementing as a soft dependency\n\nif you would like to implement scooby, but are hesitant to add another\ndependency to your package, here is an easy way how you can use scooby as a\nsoft dependency. instead of `import scooby` use the following snippet:\n\n```py\n# make scooby a soft dependency:\ntry:\n    from scooby import report as scoobyreport\nexcept importerror:\n    class scoobyreport:\n        def __init__(self, *args, **kwargs):\n            message = (\n                '\\n  *error*: `report` requires `scooby`.'\n                '\\n           install it via `pip install scooby` or'\n                '\\n           `conda install -c conda-forge scooby`.\\n'\n            )\n            raise importerror(message)\n```\n\nand then create your own `report` class same as above,\n\n```py\nclass report(scoobyreport):\n    def __init__(self, additional=none, ncol=3, text_width=80, sort=false):\n        \"\"\"initiate a scooby.report instance.\"\"\"\n\n        # mandatory packages.\n        core = ['yourpackage', 'your_core_packages', 'e.g.', 'numpy', 'scooby']\n\n        # optional packages.\n        optional = ['your_optional_packages', 'e.g.', 'matplotlib']\n\n        scooby.report.__init__(self, additional=additional, core=core,\n                               optional=optional, ncol=ncol,\n                               text_width=text_width, sort=sort)\n\n```\nif a user has scooby installed, all works as expected. if scooby is not\ninstalled, it will raise the following exception:\n\n```py\n>>> import your_package\n>>> your_package.report()\n\n  *error*: `report` requires `scooby`\n           install it via `pip install scooby` or\n           `conda install -c conda-forge scooby`.\n```\n\n### autogenerate reports for any packages\n\nscooby can automatically generate a report for any package and its\ndistribution requirements with the `autoreport` class:\n\n```py\n>>> import scooby\n>>> scooby.autoreport('matplotlib')\n```\n```\n--------------------------------------------------------------------------------\n  date: fri oct 20 16:49:34 2023 pdt\n\n                os : darwin\n            cpu(s) : 8\n           machine : arm64\n      architecture : 64bit\n               ram : 16.0 gib\n       environment : python\n       file system : apfs\n\n  python 3.11.3 | packaged by conda-forge | (main, apr  6 2023, 08:58:31)\n  [clang 14.0.6 ]\n\n        matplotlib : 3.7.1\n         contourpy : 1.0.7\n            cycler : 0.11.0\n         fonttools : 4.39.4\n        kiwisolver : 1.4.4\n             numpy : 1.24.3\n         packaging : 23.1\n            pillow : 9.5.0\n         pyparsing : 3.0.9\n   python-dateutil : 2.8.2\n--------------------------------------------------------------------------------\n```\n\n### solving mysteries\n\nare you struggling with the mystery of whether or not code is being executed in\nipython, jupyter, or normal python? try using some of scooby's investigative\nfunctions to solve these kinds of mysteries:\n\n```py\nimport scooby\n\nif scooby.in_ipykernel():\n    # do jupyter/ipykernel stuff\nelif scooby.in_ipython():\n    # do ipython stuff\nelse:\n    # do normal, boring python stuff\n```\n\n### how does scooby get version numbers?\n\na couple of locations are checked, and we are happy to implement more if\nneeded, just open an issue!\n\ncurrently, it looks in the following places:\n- `__version__`\n- `version`\n- lookup `version_attributes` in the scooby knowledge base\n- lookup `version_methods` in the scooby knowledge base\n\n`version_attributes` is a dictionary of attributes for known python packages\nwith a non-standard place for the version. you can add other known places via:\n\n```py\nscooby.knowledge.version_attributes['a_module'] = 'awesome_version_location'\n```\n\nsimilarly, `version_methods` is a dictionary for methods to retrieve the\nversion, and you can similarly add your methods which will get the version\nof a package.\n\n### using scooby to get version information.\n\nif you are only interested in the version of a single package then you can use\nscooby as well. a few examples:\n\n```py\n>>> import scooby, numpy\n>>> scooby.get_version(numpy)\n('numpy', '1.16.4')\n>>> scooby.get_version('no_version')\n('no_version', 'version unknown')\n>>> scooby.get_version('does_not_exist')\n('does_not_exist', 'could not import')\n```\n\nnote that modules can be provided as already loaded ones or as strings.\n\n\n### tracking imports in a session\n\nscooby has the ability to track all imported modules during a python session\nsuch that *any* imported, non-standard lib package that is used in the session\nis reported by a `trackedreport`. for instance, start a session by importing\nscooby and enabling tracking with the `track_imports()` function.\nthen *all* subsequent packages that are imported during the session will be\ntracked and scooby can report their versions.\nonce you are ready to generate a `report`, instantiate a `trackedreport` object.\n\nin the following example, we import a constant from `scipy` which will report\nthe versions of `scipy` and `numpy` as both packages are loaded in the session\n(note that `numpy` is internally loaded by `scipy`).\n\n```py\n>>> import scooby\n>>> scooby.track_imports()\n\n>>> from scipy.constants import mu_0 # a float value\n\n>>> scooby.trackedreport()\n```\n```\n--------------------------------------------------------------------------------\n  date: thu apr 16 15:33:11 2020 mdt\n\n                os : linux\n            cpu(s) : 8\n           machine : x86_64\n      architecture : 64bit\n               ram : 62.7 gib\n       environment : ipython\n\n  python 3.7.7 (default, mar 10 2020, 15:16:38)  [gcc 7.5.0]\n\n            scooby : 0.5.2\n             numpy : 1.18.1\n             scipy : 1.4.1\n--------------------------------------------------------------------------------\n```\n\n## command-line interface\n\nscooby comes with a command-line interface. simply typing\n\n```bash\nscooby\n```\n\nin a terminal will display the default report. you can also use the cli to show\nthe scooby report of another package if that package has implemented a report\nclass as suggested above, using `packagename.report()`.\n\nas an example, to print the report of pyvista you can run\n\n```bash\nscooby -r pyvista\n```\n\nwhich will show the report implemented in pyvista.\n\nthe cli can also generate a report based on the dependencies of a package's\ndistribution where that package hasn't implemented a report class. for example,\nwe can generate a report for `matplotlib` and its dependencies:\n\n```bash\n$ scooby -r matplotlib\n--------------------------------------------------------------------------------\n  date: fri oct 20 17:03:45 2023 pdt\n\n                 os : darwin\n             cpu(s) : 8\n            machine : arm64\n       architecture : 64bit\n                ram : 16.0 gib\n        environment : python\n        file system : apfs\n\n  python 3.11.3 | packaged by conda-forge | (main, apr  6 2023, 08:58:31)\n  [clang 14.0.6 ]\n\n         matplotlib : 3.7.1\n          contourpy : 1.0.7\n             cycler : 0.11.0\n          fonttools : 4.39.4\n         kiwisolver : 1.4.4\n              numpy : 1.24.3\n          packaging : 23.1\n             pillow : 9.5.0\n          pyparsing : 3.0.9\n    python-dateutil : 2.8.2\nimportlib-resources : 5.12.0\n--------------------------------------------------------------------------------\n```\n\nsimply type\n\n```bash\nscooby --help\n```\n\nto see all the possibilities.\n\n## optional requirements\n\nthe following is a list of optional requirements and their purpose:\n\n- `psutil`: report total ram in gib\n- `mkl-services`: report intel(r) math kernel library version\n\n\n",
  "docs_url": null,
  "keywords": "",
  "license": "",
  "name": "scooby",
  "package_url": "https://pypi.org/project/scooby/",
  "project_url": "https://pypi.org/project/scooby/",
  "project_urls": {
    "Homepage": "https://github.com/banesullivan/scooby"
  },
  "release_url": "https://pypi.org/project/scooby/0.9.2/",
  "requires_dist": [
    "psutil ; extra == 'cpu'",
    "mkl ; extra == 'cpu'"
  ],
  "requires_python": ">=3.8",
  "summary": "a great dane turned python environment detective",
  "version": "0.9.2",
  "releases": [],
  "developers": [
    "info@pyvista.org"
  ],
  "kwds": "scoobyreport scooby pythonpackage pyvista py",
  "license_kwds": "",
  "libtype": "pypi",
  "id": "pypi_scooby",
  "homepage": "https://github.com/banesullivan/scooby",
  "release_count": 35,
  "dependency_ids": [
    "pypi_mkl",
    "pypi_psutil"
  ]
}
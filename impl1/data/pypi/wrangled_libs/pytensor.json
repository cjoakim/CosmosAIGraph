{
  "classifiers": [
    "development status :: 6 - mature",
    "intended audience :: developers",
    "intended audience :: education",
    "intended audience :: science/research",
    "license :: osi approved :: bsd license",
    "operating system :: macos",
    "operating system :: microsoft :: windows",
    "operating system :: posix",
    "operating system :: unix",
    "programming language :: python",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.9",
    "topic :: scientific/engineering :: mathematics",
    "topic :: software development :: code generators",
    "topic :: software development :: compilers"
  ],
  "description": ".. image:: https://cdn.rawgit.com/pymc-devs/pytensor/main/doc/images/pytensor_rgb.svg\n    :height: 100px\n    :alt: pytensor logo\n    :align: center\n\n|tests status| |coverage|\n\n|project name| is a fork of `aesara <https://github.com/aesara-devs/aesara>`__ -- a python library that allows one to define, optimize, and\nefficiently evaluate mathematical expressions involving multi-dimensional arrays.\n\nfeatures\n========\n\n- a hackable, pure-python codebase\n- extensible graph framework suitable for rapid development of custom operators and symbolic optimizations\n- implements an extensible graph transpilation framework that currently provides\n  compilation via c, `jax <https://github.com/google/jax>`__, and `numba <https://github.com/numba/numba>`__\n- based on one of the most widely-used python tensor libraries: `theano <https://github.com/theano/theano>`__\n\ngetting started\n===============\n\n.. code-block:: python\n\n    import pytensor\n    from pytensor import tensor as pt\n\n    # declare two symbolic floating-point scalars\n    a = pt.dscalar(\"a\")\n    b = pt.dscalar(\"b\")\n\n    # create a simple example expression\n    c = a + b\n\n    # convert the expression into a callable object that takes `(a, b)`\n    # values as input and computes the value of `c`.\n    f_c = pytensor.function([a, b], c)\n\n    assert f_c(1.5, 2.5) == 4.0\n\n    # compute the gradient of the example expression with respect to `a`\n    dc = pytensor.grad(c, a)\n\n    f_dc = pytensor.function([a, b], dc)\n\n    assert f_dc(1.5, 2.5) == 1.0\n\n    # compiling functions with `pytensor.function` also optimizes\n    # expression graphs by removing unnecessary operations and\n    # replacing computations with more efficient ones.\n\n    v = pt.vector(\"v\")\n    m = pt.matrix(\"m\")\n\n    d = a/a + (m + a).dot(v)\n\n    pytensor.dprint(d)\n    #  add [id a]\n    #  \u251c\u2500 expanddims{axis=0} [id b]\n    #  \u2502  \u2514\u2500 true_div [id c]\n    #  \u2502     \u251c\u2500 a [id d]\n    #  \u2502     \u2514\u2500 a [id d]\n    #  \u2514\u2500 dot [id e]\n    #     \u251c\u2500 add [id f]\n    #     \u2502  \u251c\u2500 m [id g]\n    #     \u2502  \u2514\u2500 expanddims{axes=[0, 1]} [id h]\n    #     \u2502     \u2514\u2500 a [id d]\n    #     \u2514\u2500 v [id i]\n\n    f_d = pytensor.function([a, v, m], d)\n\n    # `a/a` -> `1` and the dot product is replaced with a blas function\n    # (i.e. cgemv)\n    pytensor.dprint(f_d)\n    # add [id a] 5\n    #  \u251c\u2500 [1.] [id b]\n    #  \u2514\u2500 cgemv{inplace} [id c] 4\n    #     \u251c\u2500 allocempty{dtype='float64'} [id d] 3\n    #     \u2502  \u2514\u2500 shape_i{0} [id e] 2\n    #     \u2502     \u2514\u2500 m [id f]\n    #     \u251c\u2500 1.0 [id g]\n    #     \u251c\u2500 add [id h] 1\n    #     \u2502  \u251c\u2500 m [id f]\n    #     \u2502  \u2514\u2500 expanddims{axes=[0, 1]} [id i] 0\n    #     \u2502     \u2514\u2500 a [id j]\n    #     \u251c\u2500 v [id k]\n    #     \u2514\u2500 0.0 [id l]\n\nsee `the pytensor documentation <https://pytensor.readthedocs.io/en/latest/>`__ for in-depth tutorials.\n\n\ninstallation\n============\n\nthe latest release of |project name| can be installed from pypi using ``pip``:\n\n::\n\n    pip install pytensor\n\n\nor via conda-forge:\n\n::\n\n    conda install -c conda-forge pytensor\n\n\nthe current development branch of |project name| can be installed from github, also using ``pip``:\n\n::\n\n    pip install git+https://github.com/pymc-devs/pytensor\n\n\ncontributing\n============\n\nwe welcome bug reports and fixes and improvements to the documentation.\n\nfor more information on contributing, please see the\n`contributing guide <https://pytensor.readthedocs.io/en/latest/dev_start_guide.html>`__.\n\na good place to start contributing is by looking through the issues\n`here <https://github.com/pymc-devs/pytensor/issues>`__.\n\n\n.. |project name| replace:: pytensor\n.. |tests status| image:: https://github.com/pymc-devs/pytensor/workflows/tests/badge.svg\n  :target: https://github.com/pymc-devs/pytensor/actions?query=workflow%3atests\n.. |coverage| image:: https://codecov.io/gh/pymc-devs/pytensor/branch/main/graph/badge.svg?token=wvwr8nzymc\n  :target: https://codecov.io/gh/pymc-devs/pytensor\n",
  "docs_url": null,
  "keywords": "pytensor,math,numerical,symbolic,blas,numpy,autodiff,differentiation",
  "license": ".. _license:  license =======  copyright (c) 2008-2019, theano development team copyright (c) 2020-2021, pymc development team copyright (c) 2021-2022, aesara development team copyright (c) 2022, pymc development team all rights reserved.  contains code from numpy, copyright (c) 2005-2016, numpy developers. contains code from aesara, copyright (c) 2021-2022, aesara developers. all rights reserved.  theano/scan/*.py[c]: razvan pascanu, frederic bastien, james bergstra, pascal lamblin, arnaud bergeron, pymc developers, pytensor developers, (c) 2010, universite de montreal theano/tensor/sharedvar.py: james bergstra, (c) 2010, universite de montreal, 3-clause bsd license theano/gradient.py: james bergstra, razvan pascanu, arnaud bergeron, ian goodfellow, pymc developers, pytensor developers, (c) 2011, universite de montreal, 3-clause bsd license theano/compile/monitormode.py: this code was initially copied from the 'pyutools' package by its original author, and re-licensed under theano's license.  contains frozendict code from slezica\u2019s python-frozendict(https://github.com/slezica/python-frozendict/blob/master/frozendict/__init__.py), copyright (c) 2012 santiago lezica. all rights reserved.  redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:  * redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. * redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. * neither the name of pytensor, theano, nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.  this software is provided by the copyright holders ''as is'' and any express or implied warranties, including, but not limited to, the implied warranties of merchantability and fitness for a particular purpose are disclaimed. in no event shall the copyright holders be liable for any direct, indirect, incidental, special, exemplary, or consequential damages (including, but not limited to, procurement of substitute goods or services; loss of use, data, or profits; or business interruption) however caused and on any theory of liability, whether in contract, strict liability, or tort (including negligence or otherwise) arising in any way out of the use of this software, even if advised of the possibility of such damage. ",
  "name": "pytensor",
  "package_url": "https://pypi.org/project/pytensor/",
  "project_url": "https://pypi.org/project/pytensor/",
  "project_urls": {
    "documentation": "https://pytensor.readthedocs.io/en/latest/",
    "homepage": "https://github.com/pymc-devs/pytensor",
    "repository": "https://github.com/pymc-devs/pytensor"
  },
  "release_url": "https://pypi.org/project/pytensor/2.18.4/",
  "requires_dist": [
    "setuptools (>=48.0.0)",
    "scipy (>=0.14)",
    "numpy (>=1.17.0)",
    "filelock",
    "etuples",
    "logical-unification",
    "miniKanren",
    "cons",
    "typing-extensions",
    "pytensor[jax] ; extra == 'complete'",
    "pytensor[numba] ; extra == 'complete'",
    "pytensor[complete] ; extra == 'development'",
    "pytensor[tests] ; extra == 'development'",
    "pytensor[rtd] ; extra == 'development'",
    "jax ; extra == 'jax'",
    "jaxlib ; extra == 'jax'",
    "numba (>=0.55) ; extra == 'numba'",
    "numba-scipy (>=0.3.0) ; extra == 'numba'",
    "sphinx (<6,>=5.1.0) ; extra == 'rtd'",
    "pygments ; extra == 'rtd'",
    "pydot ; extra == 'rtd'",
    "pydot2 ; extra == 'rtd'",
    "pydot-ng ; extra == 'rtd'",
    "pytest ; extra == 'tests'",
    "pre-commit ; extra == 'tests'",
    "pytest-cov (>=2.6.1) ; extra == 'tests'",
    "coverage (>=5.1) ; extra == 'tests'",
    "pytest-benchmark ; extra == 'tests'",
    "pytest-mock ; extra == 'tests'"
  ],
  "requires_python": "<3.12,>=3.9",
  "summary": "optimizing compiler for evaluating mathematical expressions on cpus and gpus.",
  "version": "2.18.4",
  "releases": [],
  "developers": [
    "pymc.devs@gmail.com"
  ],
  "kwds": "pytensor computations python optimizations numpy",
  "license_kwds": "numpy pymc tensor theano py",
  "libtype": "pypi",
  "id": "pypi_pytensor",
  "homepage": "",
  "release_count": 33,
  "dependency_ids": [
    "pypi_cons",
    "pypi_coverage",
    "pypi_etuples",
    "pypi_filelock",
    "pypi_jax",
    "pypi_jaxlib",
    "pypi_logical_unification",
    "pypi_minikanren",
    "pypi_numba",
    "pypi_numba_scipy",
    "pypi_numpy",
    "pypi_pre_commit",
    "pypi_pydot",
    "pypi_pydot_ng",
    "pypi_pydot2",
    "pypi_pygments",
    "pypi_pytensor",
    "pypi_pytest",
    "pypi_pytest_benchmark",
    "pypi_pytest_cov",
    "pypi_pytest_mock",
    "pypi_scipy",
    "pypi_setuptools",
    "pypi_sphinx",
    "pypi_typing_extensions"
  ]
}
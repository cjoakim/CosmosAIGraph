{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: developers",
    "license :: osi approved :: gnu general public license v3 or later (gplv3+)",
    "natural language :: english",
    "operating system :: os independent",
    "programming language :: python"
  ],
  "description": "=================================\n(yet another) auto-attribute dict\n=================================\n\nan ``aadict`` is a python dict sub-class that allows attribute-style\naccess to dict items, e.g. ``d.foo`` is equivalent to ``d['foo']``.\n``aadict`` also provides a few other helpful methods, such as ``pick``\nand ``omit`` methods. also, an ``aadict`` is more call chaining\nfriendly (e.g. methods such as `update` return ``self``) and is\npickle'able.\n\n\nproject\n=======\n\n* homepage: https://github.com/metagriffin/aadict\n* bugs: https://github.com/metagriffin/aadict/issues\n\n\ntl;dr\n=====\n\ninstall:\n\n.. code-block:: bash\n\n  $ pip install aadict\n\nuse:\n\n.. code-block:: python\n\n  from aadict import aadict\n\n  # attribute access\n  d = aadict(foo='bar', zig=87)\n  assert d.foo == d['foo'] == 'bar'\n\n  # helper methods\n  assert d.pick('foo') == {'foo': 'bar'}\n  assert d.omit('foo') == {'zig': 87}\n\n  # method chaining\n  d2 = aadict(x='y').update(d).omit('zig')\n  assert d2.x == 'y' and d2.foo == 'bar' and d2.zig is none\n\n  # converting a dict to an aadict recursively\n  d3 = aadict.d2ar(dict(foo=dict(bar='zig')))\n  assert d3.foo.bar == 'zig'\n\n\ndetails\n=======\n\nthe aadict module provides the following functionality:\n\n\naadict\n------\n\nan `aadict` object is basically identical to a `dict` object, with the\nexception that attributes, if not reserved for other purposes, map to\nthe dict's items. for example, if a dict ``d`` has an item ``'foo'``,\nthen a request for ``d.foo`` will return that item lookup. aadicts\nalso have several helper methods, for example ``aadict.pick``. to\nfetch the value of an item that has the same name as one of the helper\nmethods you need to reference it by item lookup,\ni.e. ``d['pick']``. the helper methods are:\n\n* **aadict.pick** instance method:\n\n  returns a new aadict, reduced to only include the specified\n  keys. example:\n\n  .. code-block:: python\n\n    d = aadict(foo='bar', zig=87, zag=['a', 'b'])\n    assert d.pick('foo', 'zag') == {'foo': 'bar', 'zag': ['a', 'b']}\n\n* **aadict.omit** instance method:\n\n  identical to the ``aadict.pick`` method, but returns the complement,\n  i.e. all of those keys that are *not* specified. example:\n\n  .. code-block:: python\n\n    d = aadict(foo='bar', zig=87, zag=['a', 'b'])\n    assert d.omit('foo', 'zag') == {'zig': 87}\n\n* **aadict.d2ar** class method:\n\n  recursively converts the supplied `dict` to an `aadict`, including\n  all sub-list and sub-dict types. due to being recursive, but only\n  copying dict-types, this is effectively a hybrid of a shallow and\n  a deep clone. example:\n\n  .. code-block:: python\n\n    d = aadict.d2ar(dict(foo=dict(bar='zig')))\n    assert d.foo.bar == 'zig'\n\n  without the recursive walking, the ``.bar`` attribute syntax\n  would yield an attributeerror exception because d.foo would\n  reference a `dict` type, not an `aadict`.\n\n* **aadict.d2a** class method:\n\n  converts the supplied `dict` to an `aadict`. example:\n\n  .. code-block:: python\n\n    d = aadict.d2a(dict(foo='bar'))\n    assert d.foo == d['foo'] == 'bar'\n\n  note that this is identical to just using the constructor,\n  but is provided as a symmetry to the ``aadict.d2ar`` class\n  method, e.g.:\n\n  .. code-block:: python\n\n    d = aadict(dict(foo='bar'))\n    assert d.foo == d['foo'] == 'bar'\n",
  "docs_url": null,
  "keywords": "auto attribute access dict helpers pick omit",
  "license": "gplv3+",
  "name": "aadict",
  "package_url": "https://pypi.org/project/aadict/",
  "project_url": "https://pypi.org/project/aadict/",
  "project_urls": {
    "Homepage": "http://github.com/metagriffin/aadict"
  },
  "release_url": "https://pypi.org/project/aadict/0.2.3/",
  "requires_dist": [],
  "requires_python": "",
  "summary": "an auto-attribute dict (and a couple of other useful dict functions)",
  "version": "0.2.3",
  "releases": [],
  "developers": [
    "metagriffin",
    "mg.pypi@uberdev.org"
  ],
  "kwds": "dict aadicts aadict attributes attribute",
  "license_kwds": "gplv3+",
  "libtype": "pypi",
  "id": "pypi_aadict",
  "homepage": "http://github.com/metagriffin/aadict",
  "release_count": 4,
  "dependency_ids": []
}
{
  "classifiers": [
    "development status :: 5 - production/stable",
    "framework :: pytest",
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "operating system :: os independent",
    "programming language :: python",
    "programming language :: python :: 2",
    "programming language :: python :: 2.7",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.12",
    "programming language :: python :: 3.5",
    "programming language :: python :: 3.6",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "programming language :: python :: implementation :: cpython",
    "programming language :: python :: implementation :: pypy",
    "topic :: software development :: testing"
  ],
  "description": "============\npytest-nunit\n============\n\n.. image:: https://github.com/pytest-dev/pytest-nunit/actions/workflows/ci.yml/badge.svg\n    :target: https://pypi.org/project/pytest-nunit\n    :alt: pypi version\n    \n.. image:: https://img.shields.io/pypi/v/pytest-nunit.svg\n    :target: https://pypi.org/project/pytest-nunit\n    :alt: pypi version\n\n.. image:: https://img.shields.io/pypi/pyversions/pytest-nunit.svg\n    :target: https://pypi.org/project/pytest-nunit\n    :alt: python versions\n\n.. image:: https://img.shields.io/pypi/dm/pytest-nunit.svg\n     :target: https://pypi.python.org/pypi/pytest-nunit/\n     :alt: pypi download month\n\n\na pytest plugin for generating nunit3 test result xml output\n\nrequires:\n- pytest 5.1.0+\n- python 3.7+\n\ncommand-line options\n--------------------\n\n``--nunit-xml``\n~~~~~~~~~~~~~~~\n\na string value to set the file name of the generated xml file.\n\nargument takes a path to the output file, either relative, or absolute.\n\n``--nunit-prefix``\n~~~~~~~~~~~~~~~~~~\n\na string value to prefix all test case names the string provided.\n\ndefaults to an empty string.\n\nini options\n-----------\n\n``nunit_show_username``\n~~~~~~~~~~~~~~~~~~~~~~~\n\nboolean value to include the system username in the test run properties.\n\ndefaults to ``false``\n\n``nunit_show_user_domain``\n~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nboolean value to include the system user domain in the test run properties.\n\ndefaults to ``false``\n\n``nunit_suite_name``\n~~~~~~~~~~~~~~~~~~~~\n\n(deprecated, value ignored)\n\nstring value to set the test suite name.\n\ndefaults to ``'pytest'``\n\n``nunit_attach_on``\n~~~~~~~~~~~~~~~~~~~~\n\nenumeration to control whether the attachments property is set on all test cases when the ``add_nunit_attachment`` is used.\n\ncan be one of:\n\n- ``any`` - include test attachments for all outcomes (**default**)\n- ``pass`` - include test attachments for only passed test cases\n- ``fail`` - include test attachments for only failed test cases\n\nfixtures\n--------\n\nthe following fixtures are made available by this plugin.\n\n``record_nunit_property``\n~~~~~~~~~~~~~~~~~~~~~~~~~\n\ncalling `record_nunit_property(key: str, value: str)` will result in `property` tags being added to the `test-case` for the related node. \n\n.. code-block:: python\n\n    def test_basic(record_nunit_property):\n        record_nunit_property(\"test\", \"value\")\n        assert 1 == 1\n\n``add_nunit_attachment``\n~~~~~~~~~~~~~~~~~~~~~~~~\n\nadd an attachment to a node test-case by calling the `add_nunit_attachment(path: str, description: str)` function with the filepath and a description.\n\n.. code-block:: python\n\n    def test_attachment(add_nunit_attachment):\n        pth = os.path.join(os.path.abspath(os.path.dirname(__file__)), 'fixture.gif')\n        add_nunit_attachment(path, \"peanut butter jelly time\")\n        assert 1 == 1\n\nusage with azure pipelines\n--------------------------\n\nadd the following steps to your build job to publish the results to azure pipelines:\n\n.. code-block:: yaml\n\n      - script: \"pip install pytest-nunit\"\n\n      - script: |\n          python -m pytest tests -v --nunit-xml=test-results.xml\n        continueonerror: true\n\n      - task: publishtestresults@2\n        inputs:\n          testresultsformat: nunit\n          testresultsfiles: '**/test-results.xml'\n\nskipped tests\n~~~~~~~~~~~~~\n\nskipped tests will have the ``reason`` attribute (if provided) included in the results.\n\n.. image:: https://github.com/pytest-dev/pytest-nunit/raw/master/docs/source/_static/screen_skips.png\n   :width: 70%\n\n\nattachments\n~~~~~~~~~~~\n\nusing the ``add_nunit_attachment`` fixture will render any attachments in the \"attachments\" tab inside the tests console:\n\n.. image:: https://github.com/pytest-dev/pytest-nunit/raw/master/docs/source/_static/screen_attachments.png\n   :width: 70%\n\nfailures and xfails\n~~~~~~~~~~~~~~~~~~~\n\nany failed tests, whether as xpass or xfail, will have the error output and comparison, as well as the failing line in the stack trace.\n\n.. image:: https://github.com/pytest-dev/pytest-nunit/raw/master/docs/source/_static/screen_fails.png\n   :width: 70%\n\n\ncompatibility with other plugins\n--------------------------------\n\nx-dist\n~~~~~~\n\nwhen running with `-f`, make sure to add in your pytest config file (setup.cfg etc)\n`looponfailroots = testdir` to exclude xml report files from being watched for changes.\n\ncheck looponfails_\n\n\n.. _looponfails: https://docs.pytest.org/en/3.0.1/xdist.html#running-tests-in-looponfailing-mode",
  "docs_url": null,
  "keywords": "",
  "license": "mit license",
  "name": "pytest-nunit",
  "package_url": "https://pypi.org/project/pytest-nunit/",
  "project_url": "https://pypi.org/project/pytest-nunit/",
  "project_urls": {
    "Homepage": "https://github.com/pytest-dev/pytest-nunit"
  },
  "release_url": "https://pypi.org/project/pytest-nunit/1.0.4/",
  "requires_dist": [],
  "requires_python": ">=3.6",
  "summary": "a pytest plugin for generating nunit3 test result xml output",
  "version": "1.0.4",
  "releases": [],
  "developers": [
    "anthony_shaw",
    "anthonyshaw@apache.org"
  ],
  "kwds": "pytest nunit_attach_on pypi pyversions nunit3",
  "license_kwds": "mit license",
  "libtype": "pypi",
  "id": "pypi_pytest_nunit",
  "homepage": "https://github.com/pytest-dev/pytest-nunit",
  "release_count": 21,
  "dependency_ids": []
}
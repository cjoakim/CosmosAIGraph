{
  "classifiers": [
    "development status :: 5 - production/stable",
    "environment :: console",
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "operating system :: os independent",
    "programming language :: python",
    "programming language :: python :: 3.5",
    "programming language :: python :: 3.6",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8"
  ],
  "description": "aredis\n======\n|pypi-ver| |circleci-status| |python-ver|\n\nan efficient and user-friendly async redis client ported from `redis-py <https://github.com/andymccurdy/redis-py>`_\n(which is a python interface to the redis key-value)\n\nto get more information please read `full document`_\n\n.. _full document: http://aredis.readthedocs.io/en/latest/\n\ninstallation\n------------\n\naredis requires a running redis server.\n\nto install aredis, simply:\n\n.. code-block:: bash\n\n    $ sudo pip3 install aredis\n\nor alternatively (you really should be using pip though):\n\n.. code-block:: bash\n\n    $ sudo easy_install aredis\n\nor from source:\n\n.. code-block:: bash\n\n    $ sudo python setup.py install\n\n\ngetting started\n---------------\n\n`for more example`_\n\n.. _for more example: https://github.com/nonegg/aredis/tree/master/examples\n\nsingle node client\n^^^^^^^^^^^^^^^^^^\n\n.. code-block:: python\n\n   >>> import asyncio\n   >>> from aredis import strictredis\n   >>>\n   >>> async def example():\n   >>>      client = strictredis(host='127.0.0.1', port=6379, db=0)\n   >>>      await client.flushdb()\n   >>>      await client.set('foo', 1)\n   >>>      assert await client.exists('foo') is true\n   >>>      await client.incr('foo', 100)\n   >>>\n   >>>      assert int(await client.get('foo')) == 101\n   >>>      await client.expire('foo', 1)\n   >>>      await asyncio.sleep(0.1)\n   >>>      await client.ttl('foo')\n   >>>      await asyncio.sleep(1)\n   >>>      assert not await client.exists('foo')\n   >>>\n   >>> loop = asyncio.get_event_loop()\n   >>> loop.run_until_complete(example())\n\ncluster client\n^^^^^^^^^^^^^^\n\n.. code-block:: python\n\n   >>> import asyncio\n   >>> from aredis import strictrediscluster\n   >>>\n   >>> async def example():\n   >>>      client = strictrediscluster(host='172.17.0.2', port=7001)\n   >>>      await client.flushdb()\n   >>>      await client.set('foo', 1)\n   >>>      await client.lpush('a', 1)\n   >>>      print(await client.cluster_slots())\n   >>>\n   >>>      await client.rpoplpush('a', 'b')\n   >>>      assert await client.rpop('b') == b'1'\n   >>>\n   >>> loop = asyncio.get_event_loop()\n   >>> loop.run_until_complete(example())\n   {(10923, 16383): [{'host': b'172.17.0.2', 'node_id': b'332f41962b33fa44bbc5e88f205e71276a9d64f4', 'server_type': 'master', 'port': 7002},\n   {'host': b'172.17.0.2', 'node_id': b'c02deb8726cdd412d956f0b9464a88812ef34f03', 'server_type': 'slave', 'port': 7005}],\n   (5461, 10922): [{'host': b'172.17.0.2', 'node_id': b'3d1b020fc46bf7cb2ffc36e10e7d7befca7c5533', 'server_type': 'master', 'port': 7001},\n   {'host': b'172.17.0.2', 'node_id': b'aac4799b65ff35d8dd2ad152a5515d15c0dc8ab7', 'server_type': 'slave', 'port': 7004}],\n   (0, 5460): [{'host': b'172.17.0.2', 'node_id': b'0932215036dc0d908cf662fdfca4d3614f221b01', 'server_type': 'master', 'port': 7000},\n   {'host': b'172.17.0.2', 'node_id': b'f6603ab4cb77e672de23a6361ec165f3a1a2bb42', 'server_type': 'slave', 'port': 7003}]}\n\nbenchmark\n---------\n\nplease run test script in benchmarks dir to confirm the benchmark.\n\nfor benchmark in my environment please see: `benchmark`_\n\n.. _benchmark: http://aredis.readthedocs.io/en/latest/benchmark.html\n\n.. |circleci-status| image:: https://img.shields.io/circleci/project/github/nonegg/aredis/master.svg\n    :alt: circleci build status\n    :target: https://circleci.com/gh/nonegg/aredis/tree/master\n\n.. |pypi-ver| image::  https://img.shields.io/pypi/v/aredis.svg\n    :target: https://pypi.python.org/pypi/aredis/\n    :alt: latest version in pypi\n\n.. |python-ver| image:: https://img.shields.io/pypi/pyversions/aredis.svg\n    :target: https://pypi.python.org/pypi/aredis/\n    :alt: supported python versions\n\ncontributing\n------------\n\nenhancement, bug reports and pull requests are welcomed, please make an issue to let me know.\nfork me please~\n",
  "docs_url": null,
  "keywords": "redis",
  "license": "mit",
  "name": "aredis",
  "package_url": "https://pypi.org/project/aredis/",
  "project_url": "https://pypi.org/project/aredis/",
  "project_urls": {
    "Homepage": "https://github.com/NoneGG/aredis"
  },
  "release_url": "https://pypi.org/project/aredis/1.1.8/",
  "requires_dist": [],
  "requires_python": "",
  "summary": "python async client for redis key-value store",
  "version": "1.1.8",
  "releases": [],
  "developers": [
    "847671011@qq.com",
    "jason_chen"
  ],
  "kwds": "redis aredis pip3 pip cluster_slots",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_aredis",
  "homepage": "https://github.com/nonegg/aredis",
  "release_count": 18,
  "dependency_ids": []
}
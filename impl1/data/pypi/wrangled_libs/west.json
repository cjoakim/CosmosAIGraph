{
  "classifiers": [
    "license :: osi approved :: apache software license",
    "operating system :: macos :: macos x",
    "operating system :: microsoft :: windows",
    "operating system :: posix :: linux",
    "programming language :: python :: 3"
  ],
  "description": "this is the zephyr rtos meta tool, ``west``.\n\nhttps://docs.zephyrproject.org/latest/guides/west/index.html\n\ninstallation\n------------\n\nusing pip::\n\n  pip3 install west\n\n(use ``pip3 uninstall west`` to uninstall it.)\n\nbasic usage\n-----------\n\nwest lets you manage multiple git repositories under a single directory using a\nsingle file, called the *west manifest file*, or *manifest* for short.\nby default the manifest file is named ``west.yml``.\nyou use ``west init`` to set up this directory, then ``west update`` to fetch\nand/or update the repositories named in the manifest.\n\nby default, west uses `upstream zephyr's manifest file\n<https://github.com/zephyrproject-rtos/zephyr/blob/main/west.yml>`_, but west\ndoesn't care if the manifest repository is zephyr or not. you can and are\nencouraged to make your own manifest repositories to meet your needs.\n\nfor more details, see the `west guide\n<https://docs.zephyrproject.org/latest/guides/west/index.html>`_ in the zephyr\ndocumentation.\n\nexample usage using the upstream manifest file::\n\n  mkdir zephyrproject && cd zephyrproject\n  west init\n  west update\n\nwhat just happened:\n\n- ``west init`` clones the upstream *west manifest* repository, which in this\n  case is the zephyr repository. the manifest repository contains ``west.yml``,\n  a yaml description of the zephyr installation, including git repositories and\n  other metadata.\n\n- ``west update`` clones the other repositories named in the manifest file,\n  creating working trees in the installation directory ``zephyrproject``.\n\nuse ``west init -m`` to specify another manifest repository. use ``--mr`` to\nuse a revision to inialize from; if not given, the remote's default branch is used.\nuse ``--mf`` to use a manifest file other than ``west.yml``.\n\nadditional commands\n-------------------\n\nwest has multiple sub-commands. after running ``west init``, you can\nrun them from anywhere under ``zephyrproject``.\n\nfor a list of available commands, run ``west -h``. get help on a\ncommand with ``west <command> -h``.\n\nwest is extensible: you can add new commands to west without modifying its\nsource code. see `extensions\n<https://docs.zephyrproject.org/latest/guides/west/extensions.html>`_ in the\ndocumentation for details.\n\nrunning the tests\n-----------------\n\nfirst, install tox::\n\n  # macos, windows\n  pip3 install tox\n\n  # linux\n  pip3 install --user tox\n\nthen, run the test suite locally from the top level directory::\n\n  tox\n\nyou can use ``--`` to tell tox to pass arguments to ``pytest``. this is\nespecially useful to focus on specific tests and save time. examples::\n\n  # run a subset of tests\n  tox  --  tests/test_project.py\n\n  # debug the ``test_update_narrow()`` code with ``pdb`` (but _not_ the\n  # west code which is running in subprocesses)\n  tox  --  --verbose --exitfirst --trace -k test_update_narrow\n\n  # run all tests with \"import\" in their name and let them log to the\n  # current terminal\n  tox  --  -v -k import --capture=no\n\nthe tests cannot be run with ``pytest`` directly, they require the tox\nenvironment.\n\nsee the tox configuration file, tox.ini, for more details.\n\nhacking on west\n---------------\n\nthis section contains notes for getting started developing west itself.\n\neditable install\n~~~~~~~~~~~~~~~~\n\nto run west \"live\" from the current source code tree, run this command from the\ntop level directory in the west repository::\n\n  pip3 install -e .\n\nthis is useful if you are actively working on west and don't want to re-package\nand install a wheel each time you run it.\n\ninstalling from source\n~~~~~~~~~~~~~~~~~~~~~~\n\nyou can create and install a wheel package to install west as well.\nthe `wheel`_ python package is required to do this. see \"installing wheel\"\nbelow if you need to do this.\n\nto build the west wheel file::\n\n  # macos, linux\n  python3 setup.py bdist_wheel\n\n  # windows\n  py -3 setup.py bdist_wheel\n\nthis will create a file named ``dist/west-x.y.z-py3-none-any.whl``,\nwhere ``x.y.z`` is the current version in setup.py.\n\nto install the wheel::\n\n  pip3 install -u dist/west-x.y.z-py3-none-any.whl\n\nyou can ``pip3 uninstall west`` to remove this wheel before re-installing the\nversion from pypi, etc.\n\ninstalling wheel\n~~~~~~~~~~~~~~~~\n\non macos and windows, you can install wheel with::\n\n  pip3 install wheel\n\nthat also works on linux, but you may want to install wheel from your\nsystem package manager instead -- e.g. if you installed pip from your\nsystem package manager. the wheel package is likely named something\nlike ``python3-wheel`` in that case.\n\n.. _wheel: https://wheel.readthedocs.io/en/latest/\n",
  "docs_url": null,
  "keywords": "",
  "license": "",
  "name": "west",
  "package_url": "https://pypi.org/project/west/",
  "project_url": "https://pypi.org/project/west/",
  "project_urls": {
    "Homepage": "https://github.com/zephyrproject-rtos/west"
  },
  "release_url": "https://pypi.org/project/west/1.2.0/",
  "requires_dist": [
    "colorama",
    "PyYAML (>=5.1)",
    "pykwalify",
    "setuptools",
    "packaging"
  ],
  "requires_python": ">=3.8",
  "summary": "zephyr rtos project meta-tool",
  "version": "1.2.0",
  "releases": [],
  "developers": [
    "devel@lists.zephyrproject.org",
    "zephyr_project"
  ],
  "kwds": "pip3 git pip west github",
  "license_kwds": "",
  "libtype": "pypi",
  "id": "pypi_west",
  "homepage": "https://github.com/zephyrproject-rtos/west",
  "release_count": 70,
  "dependency_ids": [
    "pypi_colorama",
    "pypi_packaging",
    "pypi_pykwalify",
    "pypi_pyyaml",
    "pypi_setuptools"
  ]
}
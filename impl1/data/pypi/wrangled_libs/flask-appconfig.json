{
  "classifiers": [
    "programming language :: python :: 2",
    "programming language :: python :: 3"
  ],
  "description": "flask-appconfig\n===============\n\nallows you to configure an application using pre-set methods.\n\n.. code-block:: python\n\n    from flask_appconfig import appconfig\n\n    def create_app(configfile=none):\n        app = flask('myapp')\n        appconfig(app, configfile)\n        return app\n\nthe application returned by ``create_app`` will, in order:\n\n1. load default settings from a module called ``myapp.default_config``, if it\n   exists. (method described in\n   http://flask.pocoo.org/docs/config/#configuring-from-files )\n2. load settings from a configuration file whose name is given in the\n   environment variable ``myapp_config`` (see link from 1.).\n3. load json or string values directly from environment variables that start\n   with a prefix of ``myapp_``, i.e. setting ``myapp_sqlalchemy_echo=true``\n   will cause the setting of ``sqlalchemy_echo`` to be ``true``.\n\nany of these behaviors can be altered or disabled by passing the appropriate\noptions to the constructor or ``init_app()``.\n\n\nheroku support\n--------------\n\nflask-appconfig supports configuring a number of services through\n``herokuconfig``:\n\n.. code-block:: python\n\n    from flask_appconfig import herokuconfig\n\n    def create_app(configfile=none):\n        app = flask('myapp')\n        herokuconfig(app, configfile)\n        return app\n\nworks like the example above, but environment variables set by various heroku\naddons will be parsed as json and converted to configuration variables\naccordingly. forexample, when enabling `mailgun\n<https://addons.heroku.com/mailgun>`_, the configuration of `flask-mail\n<http://pythonhosted.org/flask-mail/>`_ will be automatically be set correctly.\n\n\nusing \"env-only\"\n----------------\n\nif you only want to use the environment-parsing functions of flask-appconfig,\nthe appropriate functions are exposed:\n\n.. code-block:: python\n\n    from flask_appconfig.heroku import from_heroku_envvars\n    from flask_appconfig.env import from_envvars\n\n    # from environment variables. note that you need to set the prefix, as\n    # no auto-detection can be done without an app object\n    from_envvars(app.config, prefix=app.name.upper() + '_')\n\n    # also possible: parse heroku configuration values\n    # any dict-like object will do as the first parameter\n    from_heroku_envvars(app.config)\n\n\ninstallation\n------------\n\nvia `pypi <http://pypi.python.org/pypi/flask-appconfig>`_::\n\n    $ pip install flask-appconfig\n\nrequires python 2.7.\n\n\nflask utility\n-------------\n\nif you want to get started quickly without thinking a lot about writing a run\nscript, the ``flask`` utility supports the ``create_app``/factory pattern::\n\n    $ flask --app=myapp dev\n\nthis will import a module ``myapp``, and call ``myapp.run(debug=true)``.\n\nother options can come in handy as well::\n\n    $ flask --app=myapp dev -s -p 8000\n\nruns the app on port 8080, with ssl enabled. you can also set the ``flask_app``\nenvironment variable or set ``flask_app`` inside ``.env`` and omit the\n``--app`` parameter.\n\nnote that the ``flask`` utility is subject to change, as it will conflict with\nthe cli functionality of flask 1.0. the api is currently kept close, but it\nwill see changes once flask 1.0 is released.\n\n\nflask-debug and flask-debugtoolbar support\n******************************************\n\n``flask`` automatically activates flask-debug_ and flask-debugtoolbar_ on\nyour application; this allows to have it installed locally while not having to\ninstall any debug code in production. you can suppress this behavior with the\n``-e``/``--no-flask-debug`` flag.\n\nnote that these features are only enabled if you install either of these\nextensions manually; they are not dependencies of flask-appconfig.\n\n.. _flask-debug: https://github.com/mbr/flask-debug\n.. _flask-debugtoolbar: https://flask-debugtoolbar.readthedocs.org/\n\n\nthoughts on configuration\n-------------------------\n\nthere is a lot of ways to configure a flask application and often times,\nless-than-optimal ones are chosen in a hurry.\n\nthis extension aims to do three things:\n\n1. set a \"standard\" of doing configuration that is flexible and in-line with\n   the official docs and (what i consider) good practices.\n2. make it as convenient as possible to provide these configuration methods in\n   an application.\n3. auto-configure on heroku as much as possible without sacrificing 1. and 2.\n\n`12factor.net <http://12factor.net/>`_ seems to capture a good amount of good\nthoughts on the issue and flask-appconfig should aid you in writing an\napplication that follows the principles laid out there.\n\nproviding defaults\n******************\n\ndefaults should be included and overridable, without altering the file\ncontaining the defaults.\n\nseparate code and configuration\n*******************************\n\nit should be possible to install the app to a read-only (possibly system-wide)\nlocation, without having to store configuration files (or, even worse,\nconfiguration modules) inside its folders.\n\nenvironment variables and instance folders make this possible. as an added\nbenefit, configuration does not need to be stored alongside the code in version\ncontrol.\n\nno code necessary for most deployments using the factory-method pattern\n***********************************************************************\n\nwhen deploying with gunicorn, passing ``myapp:create_app()`` suffices to create\nan app instance, no boilerplate code to create the wsgi app should be necessary.\n\nmultiple instances\n******************\n\nrunning multiple apps inside the same interpreter should also be possible. while\nthis is slightly more complicated and may occasionally violate the \"no-code\"\nguideline above, it's still straightforward by using configuration file\nparameters.\n\n\ndevelopment\n-----------\nflask-appconfig is under \"conceptional development\". the api or semantics\nmay change in the future.\n\nsend pull requests for more heroku-apps to be supported. send feedback via mail.\n\nchangelog\n---------\n\nbackwards-incompatible changes, as they were introduced:\n\n0.11\n****\n* the ``flaskdev`` tool has been replaced with ``flask``.\n* using the new ``flask`` tool auto-reloading will also change by default. if a\n  syntax error is introduced to the code, the app will try to restart after two\n  seconds by default, instead of crashing. this can be suppressed with the\n  '--extended-reload 0' flag.\n* if the app import fails, ``flask`` will add ``.`` to ``sys.path`` and try to\n  to import once again.\n* experimental commands ``serve`` and ``db`` have been added.\n\n0.4\n***\n* environment variables are no longer prefixed with ``flask_`` by default, but\n  rather use ``appname_`` (with ``appname`` being the applications name in\n  uppercase).\n* ``myapp_settings`` became ``myapp_config``, ``default_settings`` became\n  ``default_config``.",
  "docs_url": "https://pythonhosted.org/flask-appconfig/",
  "keywords": "",
  "license": "mit",
  "name": "flask-appconfig",
  "package_url": "https://pypi.org/project/flask-appconfig/",
  "project_url": "https://pypi.org/project/flask-appconfig/",
  "project_urls": {
    "Download": "UNKNOWN",
    "Homepage": "http://github.com/mbr/flask-appconfig"
  },
  "release_url": "https://pypi.org/project/flask-appconfig/0.11.1/",
  "requires_dist": [],
  "requires_python": null,
  "summary": "configures flask applications in a canonical way. also auto-configures heroku. aims to standardize configuration.",
  "version": "0.11.1",
  "releases": [],
  "developers": [
    "git@marcbrinkmann.de",
    "marc_brinkmann"
  ],
  "kwds": "flask_appconfig flask_app myapp_config myapp_settings default_config",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_flask_appconfig",
  "homepage": "http://github.com/mbr/flask-appconfig",
  "release_count": 17,
  "dependency_ids": []
}
{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "operating system :: os independent",
    "programming language :: python",
    "programming language :: python :: 2.7",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.4",
    "programming language :: python :: 3.5",
    "programming language :: python :: 3.6",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: software development :: libraries :: python modules"
  ],
  "description": ".. image:: http://media.charlesleifer.com/blog/photos/huey2-logo.png\n\n*a lightweight alternative*.\n\nhuey is:\n\n* a task queue (**2019-04-01**: `version 2.0 released <https://huey.readthedocs.io/en/latest/changes.html>`_)\n* written in python (2.7+, 3.4+)\n* clean and simple api\n* redis, sqlite, file-system, or in-memory storage\n* `example code <https://github.com/coleifer/huey/tree/master/examples/>`_.\n* `read the documentation <https://huey.readthedocs.io/>`_.\n\nhuey supports:\n\n* multi-process, multi-thread or greenlet task execution models\n* schedule tasks to execute at a given time, or after a given delay\n* schedule recurring tasks, like a crontab\n* automatically retry tasks that fail\n* task prioritization\n* task result storage\n* task expiration\n* task locking\n* task pipelines and chains\n\n.. image:: http://i.imgur.com/2eprs.jpg\n\nat a glance\n-----------\n\n.. code-block:: python\n\n    from huey import redishuey, crontab\n\n    huey = redishuey('my-app', host='redis.myapp.com')\n\n    @huey.task()\n    def add_numbers(a, b):\n        return a + b\n\n    @huey.task(retries=2, retry_delay=60)\n    def flaky_task(url):\n        # this task might fail, in which case it will be retried up to 2 times\n        # with a delay of 60s between retries.\n        return this_might_fail(url)\n\n    @huey.periodic_task(crontab(minute='0', hour='3'))\n    def nightly_backup():\n        sync_all_data()\n\ncalling a ``task``-decorated function will enqueue the function call for\nexecution by the consumer. a special result handle is returned immediately,\nwhich can be used to fetch the result once the task is finished:\n\n.. code-block:: pycon\n\n    >>> from demo import add_numbers\n    >>> res = add_numbers(1, 2)\n    >>> res\n    <result: task 6b6f36fc-da0d-4069-b46c-c0d4ccff1df6>\n\n    >>> res()\n    3\n\ntasks can be scheduled to run in the future:\n\n.. code-block:: pycon\n\n    >>> res = add_numbers.schedule((2, 3), delay=10)  # will be run in ~10s.\n    >>> res(blocking=true)  # will block until task finishes, in ~10s.\n    5\n\nfor much more, check out the `guide <https://huey.readthedocs.io/en/latest/guide.html>`_\nor take a look at the `example code <https://github.com/coleifer/huey/tree/master/examples/>`_.\n\nrunning the consumer\n^^^^^^^^^^^^^^^^^^^^\n\nrun the consumer with four worker processes:\n\n.. code-block:: console\n\n    $ huey_consumer.py my_app.huey -k process -w 4\n\nto run the consumer with a single worker thread (default):\n\n.. code-block:: console\n\n    $ huey_consumer.py my_app.huey\n\nif your work-loads are mostly io-bound, you can run the consumer with threads\nor greenlets instead. because greenlets are so lightweight, you can run quite a\nfew of them efficiently:\n\n.. code-block:: console\n\n    $ huey_consumer.py my_app.huey -k greenlet -w 32\n\nstorage\n-------\n\nhuey's design and feature-set were informed by the capabilities of the\n`redis <https://redis.io>`_ database. redis is a fantastic fit for a\nlightweight task queueing library like huey: it's self-contained, versatile,\nand can be a multi-purpose solution for other web-application tasks like\ncaching, event publishing, analytics, rate-limiting, and more.\n\nalthough huey was designed with redis in mind, the storage system implements a\nsimple api and many other tools could be used instead of redis if that's your\npreference.\n\nhuey comes with builtin support for redis, sqlite and in-memory storage.\n\ndocumentation\n----------------\n\n`see huey documentation <https://huey.readthedocs.io/>`_.\n\nproject page\n---------------\n\n`see source code and issue tracker on github <https://github.com/coleifer/huey/>`_.\n\nhuey is named in honor of my cat:\n\n.. image:: http://m.charlesleifer.com/t/800x-/blog/photos/p1473037658.76.jpg?key=md9_qmakbaugpi95kzxyqg\n\n",
  "docs_url": null,
  "keywords": "",
  "license": "",
  "name": "huey",
  "package_url": "https://pypi.org/project/huey/",
  "project_url": "https://pypi.org/project/huey/",
  "project_urls": {
    "Homepage": "http://github.com/coleifer/huey/"
  },
  "release_url": "https://pypi.org/project/huey/2.5.0/",
  "requires_dist": [],
  "requires_python": null,
  "summary": "huey, a little task queue",
  "version": "2.5.0",
  "releases": [],
  "developers": [
    "charles_leifer",
    "coleifer@gmail.com"
  ],
  "kwds": "huey huey2 huey_consumer queueing periodic_task",
  "license_kwds": "",
  "libtype": "pypi",
  "id": "pypi_huey",
  "homepage": "http://github.com/coleifer/huey/",
  "release_count": 67,
  "dependency_ids": []
}
{
  "classifiers": [
    "development status :: 5 - production/stable",
    "environment :: console",
    "intended audience :: developers",
    "intended audience :: education",
    "intended audience :: science/research",
    "license :: osi approved :: mit license",
    "natural language :: english",
    "operating system :: os independent",
    "programming language :: python",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.12",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "programming language :: python :: implementation :: cpython",
    "programming language :: python :: implementation :: pypy",
    "topic :: scientific/engineering"
  ],
  "description": "simpy\n=====\n\nsimpy is a process-based discrete-event simulation framework based on standard\npython. processes in simpy are defined by python `generator`__ functions and\ncan, for example, be used to model active components like customers, vehicles or\nagents.  simpy also provides various types of shared resources to model\nlimited capacity congestion points (like servers, checkout counters and\ntunnels).\n\nsimulations can be performed \u201cas fast as possible\u201d, in real time (wall clock\ntime) or by manually stepping through the events.\n\nthough it is theoretically possible to do continuous simulations with simpy, it\nhas no features that help you with that. also, simpy is not really required for\nsimulations with a fixed step size and where your processes don\u2019t interact with\neach other or with shared resources.\n\nthe `documentation`__ contains a `tutorial`__, `several guides`__ explaining key\nconcepts, a number of `examples`__ and the `api reference`__.\n\nsimpy is released under the mit license. simulation model developers are\nencouraged to share their simpy modeling techniques with the simpy community.\nplease post a message to the `simpy mailing list`__.\n\nthere is an introductory talk that explains simpy\u2019s concepts and provides some\nexamples: `watch the video`__ or `get the slides`__.\n\n__ http://docs.python.org/3/glossary.html#term-generator\n__ https://simpy.readthedocs.io/en/latest/\n__ https://simpy.readthedocs.io/en/latest/simpy_intro/index.html\n__ https://simpy.readthedocs.io/en/latest/topical_guides/index.html\n__ https://simpy.readthedocs.io/en/latest/examples/index.html\n__ https://simpy.readthedocs.io/en/latest/api_reference/index.html\n__ https://groups.google.com/forum/#!forum/python-simpy\n__ https://www.youtube.com/watch?v=bk91doaecjy\n__ http://stefan.sofa-rockers.org/downloads/simpy-ep14.pdf\n\n\na simple example\n----------------\n\none of simpy's main goals is to be easy to use. here is an example for a simple\nsimpy simulation: a *clock* process that prints the current simulation time at\neach step:\n\n.. code-block:: python\n\n    >>> import simpy\n    >>>\n    >>> def clock(env, name, tick):\n    ...     while true:\n    ...         print(name, env.now)\n    ...         yield env.timeout(tick)\n    ...\n    >>> env = simpy.environment()\n    >>> env.process(clock(env, 'fast', 0.5))\n    <process(clock) object at 0x...>\n    >>> env.process(clock(env, 'slow', 1))\n    <process(clock) object at 0x...>\n    >>> env.run(until=2)\n    fast 0\n    slow 0\n    fast 0.5\n    slow 1\n    fast 1.0\n    fast 1.5\n\n\ninstallation\n------------\n\nsimpy requires python >= 3.8, both cpython and pypy3 are known to work.\n\nyou can install simpy easily via `pip <http://pypi.python.org/pypi/pip>`_:\n\n.. code-block:: bash\n\n    $ python -m pip install simpy\n\nyou can also download and install simpy manually:\n\n.. code-block:: bash\n\n    $ cd where/you/put/simpy/\n    $ python -m build\n    $ python -m pip install dist/simpy-*.whl\n\nto run simpy\u2019s test suite on your installation, execute:\n\n.. code-block:: bash\n\n    $ python -m tox\n\n\ngetting started\n---------------\n\nif you\u2019ve never used simpy before, the `simpy tutorial`__ is a good starting\npoint for you. you can also try out some of the `examples`__ shipped with\nsimpy.\n\n__ https://simpy.readthedocs.io/en/latest/simpy_intro/index.html\n__ https://simpy.readthedocs.io/en/latest/examples/index.html\n\n\ndocumentation and help\n----------------------\n\nyou can find `a tutorial`__, `examples`__, `topical guides`__ and an `api\nreference`__, as well as some information about `simpy and its history`__ in\nour `online documentation`__. for more help, contact the `simpy mailing\nlist`__. simpy users are pretty helpful. you can, of course, also dig through\nthe `source code`__.\n\nif you find any bugs, please post them on our `issue tracker`__.\n\n__ https://simpy.readthedocs.io/en/latest/simpy_intro/index.html\n__ https://simpy.readthedocs.io/en/latest/examples/index.html\n__ https://simpy.readthedocs.io/en/latest/topical_guides/index.html\n__ https://simpy.readthedocs.io/en/latest/api_reference/index.html\n__ https://simpy.readthedocs.io/en/latest/about/index.html\n__ https://simpy.readthedocs.io/\n__ mailto:python-simpy@googlegroups.com\n__ https://gitlab.com/team-simpy/simpy/-/tree/master\n__ https://gitlab.com/team-simpy/simpy/-/issues\n\nenjoy simulation programming in simpy!\n\n\nports and comparable libraries\n------------------------------\n\nre-implementations of simpy and libraries similar to simpy are available in the\nfollowing languages:\n\n- c#: `simsharp <https://github.com/abeham/simsharp>`_ (written by andreas beham)\n- julia: `concurrentsim <https://github.com/juliadynamics/concurrentsim.jl>`_\n- r: `simmer <https://github.com/r-simmer/simmer>`_\n",
  "docs_url": null,
  "keywords": "",
  "license": "mit",
  "name": "simpy",
  "package_url": "https://pypi.org/project/simpy/",
  "project_url": "https://pypi.org/project/simpy/",
  "project_urls": {
    "Documentation": "https://simpy.readthedocs.io",
    "Homepage": "https://simpy.readthedocs.io",
    "Source code": "https://gitlab.com/team-simpy/simpy/"
  },
  "release_url": "https://pypi.org/project/simpy/4.1.1/",
  "requires_dist": [],
  "requires_python": ">=3.8",
  "summary": "event discrete, process based simulation for python.",
  "version": "4.1.1",
  "releases": [],
  "developers": [
    "stefan@sofa-rockers.org",
    "the_com@gmx.de"
  ],
  "kwds": "simpy simpy_intro simulation simulations simmer",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_simpy",
  "homepage": "",
  "release_count": 24,
  "dependency_ids": []
}
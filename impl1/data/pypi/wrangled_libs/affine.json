{
  "classifiers": [
    "development status :: 5 - production/stable",
    "license :: osi approved :: bsd license",
    "operating system :: os independent",
    "programming language :: python :: 3 :: only",
    "topic :: multimedia :: graphics :: graphics conversion",
    "topic :: scientific/engineering :: gis"
  ],
  "description": "affine\n======\n\nmatrices describing 2d affine transformation of the plane.\n\n.. image:: https://github.com/rasterio/affine/actions/workflows/ci.yml/badge.svg?branch=main\n    :target: https://github.com/rasterio/affine/actions/workflows/ci.yml\n\n.. image:: https://codecov.io/gh/rasterio/affine/branch/main/graph/badge.svg\n    :target: https://codecov.io/gh/rasterio/affine\n\nthe affine package is derived from casey duncan's planar package. please see\nthe copyright statement in `affine/__init__.py <affine/__init__.py>`__.\n\nusage\n-----\n\nthe 3x3 augmented affine transformation matrix for transformations in two\ndimensions is illustrated below.\n\n::\n\n  | x' |   | a  b  c | | x |\n  | y' | = | d  e  f | | y |\n  | 1  |   | 0  0  1 | | 1 |\n\nmatrices can be created by passing the values ``a, b, c, d, e, f`` to the\n``affine.affine`` constructor or by using its ``identity()``,\n``translation()``, ``scale()``, ``shear()``, and ``rotation()`` class methods.\n\n.. code-block:: pycon\n\n  >>> from affine import affine\n  >>> affine.identity()\n  affine(1.0, 0.0, 0.0,\n         0.0, 1.0, 0.0)\n  >>> affine.translation(1.0, 5.0)\n  affine(1.0, 0.0, 1.0,\n         0.0, 1.0, 5.0)\n  >>> affine.scale(2.0)\n  affine(2.0, 0.0, 0.0,\n         0.0, 2.0, 0.0)\n  >>> affine.shear(45.0, 45.0)  # decimal degrees\n  affine(1.0, 0.9999999999999999, 0.0,\n         0.9999999999999999, 1.0, 0.0)\n  >>> affine.rotation(45.0)     # decimal degrees\n  affine(0.7071067811865476, -0.7071067811865475, 0.0,\n         0.7071067811865475, 0.7071067811865476, 0.0)\n\nthese matrices can be applied to ``(x, y)`` tuples to obtain transformed\ncoordinates ``(x', y')``.\n\n.. code-block:: pycon\n\n  >>> affine.translation(1.0, 5.0) * (1.0, 1.0)\n  (2.0, 6.0)\n  >>> affine.rotation(45.0) * (1.0, 1.0)\n  (1.1102230246251565e-16, 1.414213562373095)\n\nthey may also be multiplied together to combine transformations.\n\n.. code-block:: pycon\n\n  >>> affine.translation(1.0, 5.0) * affine.rotation(45.0)\n  affine(0.7071067811865476, -0.7071067811865475, 1.0,\n         0.7071067811865475, 0.7071067811865476, 5.0)\n\nusage with gis data packages\n----------------------------\n\ngeoreferenced raster datasets use affine transformations to map from image\ncoordinates to world coordinates. the ``affine.affine.from_gdal()`` class\nmethod helps convert `gdal geotransform\n<https://gdal.org/user/raster_data_model.html#affine-geotransform>`__,\nsequences of 6 numbers in which the first and fourth are the x and y offsets\nand the second and sixth are the x and y pixel sizes.\n\nusing a gdal dataset transformation matrix, the world coordinates ``(x, y)``\ncorresponding to the top left corner of the pixel 100 rows down from the\norigin can be easily computed.\n\n.. code-block:: pycon\n\n  >>> geotransform = (-237481.5, 425.0, 0.0, 237536.4, 0.0, -425.0)\n  >>> fwd = affine.from_gdal(*geotransform)\n  >>> col, row = 0, 100\n  >>> fwd * (col, row)\n  (-237481.5, 195036.4)\n\nthe reverse transformation is obtained using the ``~`` operator.\n\n.. code-block:: pycon\n\n  >>> rev = ~fwd\n  >>> rev * fwd * (col, row)\n  (0.0, 99.99999999999999)\n\n\n",
  "docs_url": null,
  "keywords": "affine,transformation,matrix",
  "license": "",
  "name": "affine",
  "package_url": "https://pypi.org/project/affine/",
  "project_url": "https://pypi.org/project/affine/",
  "project_urls": {
    "Source": "https://github.com/rasterio/affine"
  },
  "release_url": "https://pypi.org/project/affine/2.4.0/",
  "requires_dist": [
    "pydocstyle ; extra == \"dev\"",
    "flake8 ; extra == \"dev\"",
    "coveralls ; extra == \"dev\"",
    "pytest >=4.6 ; extra == \"test\"",
    "pytest-cov ; extra == \"test\""
  ],
  "requires_python": ">=3.7",
  "summary": "matrices describing affine transformation of the plane",
  "version": "2.4.0",
  "releases": [],
  "developers": [
    "sean.gillies@gmail.com"
  ],
  "kwds": "affine transformations matrix matrices rotation",
  "license_kwds": "",
  "libtype": "pypi",
  "id": "pypi_affine",
  "homepage": "",
  "release_count": 17,
  "dependency_ids": [
    "pypi_coveralls",
    "pypi_flake8",
    "pypi_pydocstyle",
    "pypi_pytest",
    "pypi_pytest_cov"
  ]
}
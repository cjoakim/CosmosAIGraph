{
  "classifiers": [
    "intended audience :: developers",
    "license :: osi approved :: apache software license",
    "license :: osi approved :: gnu general public license v2 (gplv2)",
    "natural language :: english",
    "operating system :: os independent",
    "programming language :: python",
    "programming language :: python :: 3",
    "topic :: software development :: build tools"
  ],
  "description": "# `pyinstaller-hooks-contrib`: the pyinstaller community hooks repository\n\nwhat happens when (your?) package doesn't work with pyinstaller? say you have data files that you need at runtime?\npyinstaller doesn't bundle those. your package requires others which pyinstaller can't see? how do you fix that?\n\nin summary, a \"hook\" file extends pyinstaller to adapt it to the special needs and methods used by a python package.\nthe word \"hook\" is used for two kinds of files. a runtime hook helps the bootloader to launch an app, setting up the\nenvironment. a package hook (there are several types of those) tells pyinstaller what to include in the final app -\nsuch as the data files and (hidden) imports mentioned above.\n\nthis repository is a collection of hooks for many packages, and allows pyinstaller to work with these packages\nseamlessly.\n\n\n## installation\n\n`pyinstaller-hooks-contrib` is automatically installed when you install pyinstaller, or can be installed with pip:\n\n```commandline\npip install -u pyinstaller-hooks-contrib\n```\n\n\n## i can't see a hook for `a-package`\n\neither `a-package` works fine without a hook, or no-one has contributed hooks.\nif you'd like to add a hook, or view information about hooks,\nplease see below.\n\n\n## hook configuration (options)\n\nhooks that support configuration (options) and their options are documented in\n[supported hooks and options](hooks-config.rst).\n\n\n## i want to help!\n\nif you've got a hook you want to share then great!\nthe rest of this page will walk you through the process of contributing a hook.\nif you've been here before then you may want to skip to the [summary checklist](#summary)\n\n**unless you are very comfortable with `git rebase -i`, please provide one hook per pull request!**\n**if you have more than one then submit them in separate pull requests.**\n\n\n### setup\n\n[fork this repo](https://github.com/pyinstaller/pyinstaller-hooks-contrib/fork) if you haven't already done so.\n(if you have a fork already but its old, click the **fetch upstream** button on your fork's homepage.)\nclone and `cd` inside your fork by running the following (replacing `bob-the-barnacle` with your github username):\n\n```\ngit clone https://github.com/bob-the-barnacle/pyinstaller-hoooks-contrib.git\ncd pyinstaller-hooks-contrib\n```\n\ncreate a new branch for you changes (replacing `foo` with the name of the package):\nyou can name this branch whatever you like.\n\n```\ngit checkout -b hook-for-foo\n```\n\nif you wish to create a virtual environment then do it now before proceeding to the next step.\n\ninstall this repo in editable mode.\nthis will overwrite your current installation.\n(note that you can reverse this with `pip install --force-reinstall pyinstaller-hooks-contrib`).\n\n```\npip install -e .\npip install -r requirements-test.txt\npip install flake8\n```\n\nnote that on macos and linux, `pip` may by called `pip3`.\nif you normally use `pip3` and `python3` then use `pip3` here too.\nyou may skip the 2<sup>nd</sup> line if you have no intention of providing tests (but please do provide tests!).\n\n\n### add the hook\n\nstandard hooks live in the [src/_pyinstaller_hooks_contrib/hooks/stdhooks/](../master/src/_pyinstaller_hooks_contrib/hooks/stdhooks/) directory.\nruntime hooks live in the [src/_pyinstaller_hooks_contrib/hooks/rthooks/](../master/src/_pyinstaller_hooks_contrib/hooks/rthooks/) directory.\nsimply copy your hook into there.\nif you're unsure if your hook is a runtime hook then it almost certainly is a standard hook.\n\nplease annotate (with comments) anything unusual in the hook.\n*unusual* here is defined as any of the following:\n\n*   long lists of `hiddenimport` submodules.\n    if you need lots of hidden imports then use [`collect_submodules('foo')`](https://pyinstaller.readthedocs.io/en/latest/hooks.html#pyinstaller.utils.hooks.collect_submodules).\n    for bonus points, track down why so many submodules are hidden. typical causes are:\n    *   lazily loaded submodules (`importlib.importmodule()` inside a module `__getattr__()`).\n    *   dynamically loaded *backends*.\n    *   usage of `cython` or python extension modules containing `import` statements.\n*   use of [`collect_all()`](https://pyinstaller.readthedocs.io/en/latest/hooks.html#pyinstaller.utils.hooks.collect_all).\n    this function's performance is abismal and [it is broken by\n    design](https://github.com/pyinstaller/pyinstaller/issues/6458#issuecomment-1000481631) because it confuses\n    packages with distributions.\n    check that you really do need to collect all of submodules, data files, binaries, metadata and dependencies.\n    if you do then add a comment to say so (and if you know it - why).\n    do not simply use `collect_all()` just to *future proof* the hook.\n*   any complicated `os.path` arithmetic (by which i simply mean overly complex filename manipulations).\n\n\n#### add the copyright header\n\nall source files must contain the copyright header to be covered by our terms and conditions.\n\nif you are **adding** a new hook (or any new python file), copy/paste the appropriate copyright header (below) at the top\nreplacing 2021 with the current year.\n\n<details><summary>gpl 2 header for standard hooks or other python files.</summary>\n\n```python\n# ------------------------------------------------------------------\n# copyright (c) 2021 pyinstaller development team.\n#\n# this file is distributed under the terms of the gnu general public\n# license (version 2.0 or later).\n#\n# the full license is available in license.gpl.txt, distributed with\n# this software.\n#\n# spdx-license-identifier: gpl-2.0-or-later\n# ------------------------------------------------------------------\n```\n\n</details>\n\n<details><summary>apl header for runtime hooks only.\nagain, if you're unsure if your hook is a runtime hook then it'll be a standard hook.</summary>\n\n```python\n# ------------------------------------------------------------------\n# copyright (c) 2021 pyinstaller development team.\n#\n# this file is distributed under the terms of the apache license 2.0\n#\n# the full license is available in license.apl.txt, distributed with\n# this software.\n#\n# spdx-license-identifier: apache-2.0\n# ------------------------------------------------------------------\n```\n\n</details>\n\n\nif you are **updating** a hook, skip this step.\ndo not update the year of the copyright header - even if it's out of date.\n\n\n### test\n\nhaving tests is key to our continuous integration.\nwith them we can automatically verify that your hook works on all platforms, all python versions and new versions of\nlibraries as and when they are released.\nwithout them, we have no idea if the hook is broken until someone finds out the hard way.\nplease write tests!!!\n\nsome user interface libraries may be impossible to test without user interaction\nor a wrapper library for some web api may require credentials (and possibly a paid subscription) to test.\nin such cases, don't provide a test.\ninstead explain either in the commit message or when you open your pull request why an automatic test is impractical\nthen skip on to [the next step](#run-linter).\n\n\n#### write tests(s)\n\na test should be the least amount of code required to cause a breakage\nif you do not have the hook which you are contributing.\nfor example if you are writing a hook for a library called `foo`\nwhich crashes immediately under pyinstaller on `import foo` then `import foo` is your test.\nif `import foo` works even without the hook then you will have to get a bit more creative.\ngood sources of such minimal tests are introductory examples\nfrom the documentation of whichever library you're writing a hook for.\npackage's internal data files and hidden dependencies are prone to moving around so\ntests should not explicitly check for presence of data files or hidden modules directly -\nrather they should use parts of the library which are expected to use said data files or hidden modules.\n\ntests currently all live in [src/_pyinstaller_hooks_contrib/tests/test_libraries.py](../master/src/_pyinstaller_hooks_contrib/tests/test_libraries.py).\nnavigate there and add something like the following, replacing all occurrences of `foo` with the real name of the library.\n(note where you put it in that file doesn't matter.)\n\n```python\n@importorskip('foo')\ndef test_foo(pyi_builder):\n    pyi_builder.test_source(\"\"\"\n\n        # your test here!\n        import foo\n\n        foo.something_fooey()\n\n    \"\"\")\n```\n\nif the library has changed significantly over past versions then you may need to add version constraints to the test.\nto do that, replace the `@importorskip(\"foo\")` with a call to `pyinstaller.utils.tests.requires()` (e.g.\n`@requires(\"foo >= 1.4\")`) to only run the test if the given version constraint is satisfied.\nnote that `@importorskip` uses module names (something you'd `import`) whereas `@requires` uses distribution names\n(something you'd `pip install`) so you'd use `@importorskip(\"pil\")` but `@requires(\"pillow\")`.\nfor most packages, the distribution and packages names are the same.\n\n\n#### run the test locally\n\nrunning our full test suite is not recommended as it will spend a very long time testing code which you have not touched.\ninstead, run tests individually using either the `-k` option to search for test names:\n\n```\npytest -k test_foo\n```\n\nor using full paths:\n```\npytest src/_pyinstaller_hooks_contrib/tests/test_libraries.py::test_foo\n```\n\n\n#### pin the test requirement\n\nget the version of the package you are working with (`pip show foo`)\nand add it to the [requirements-test-libraries.txt](../master/requirements-test-libraries.txt) file.\nthe requirements already in there should guide you on the syntax.\n\n\n#### run the test on ci/cd\n\nto test hooks on all platforms we use github's continuous integration (ci/cd).\nour ci/cd is a bit unusual in that it's triggered manually and takes arguments\nwhich limit which tests are run.\nthis is for the same reason we filter tests when running locally -\nthe full test suite takes ages.\n\nfirst push the changes you've made so far.\n\n```commandline\ngit push --set-upstream origin hook-for-foo\n```\n\nreplace *billy-the-buffalo* with your github username in the following url then open it.\nit should take you to the `oneshot-test` actions workflow on your fork.\nyou may be asked if you want to enable actions on your fork - say yes.\n```\nhttps://github.com/billy-the-buffalo/pyinstaller-hooks-contrib/actions/workflows/oneshot-test.yml\n```\n\nfind the **run workflow** button and click on it.\nif you can't see the button,\nselect the **oneshot test** tab from the list of workflows on the left of the page\nand it should appear.\na dialog should appear containing one drop-down menu and 5 line-edit fields.\nthis dialog is where you specify what to test and which platforms and python versions to test on.\nits fields are as follows:\n\n1.  a branch to run from. set this to the branch which you are using (e.g. ``hook-for-foo``),\n2.  which package(s) to install and their version(s).\n    which packages to test are inferred from which packages are installed.\n    you can generally just copy your own changes to the `requirements-test-libraries.txt` file into this box.\n    * set to `foo` to test the latest version of `foo`,\n    * set to `foo==1.2, foo==2.3` (note the comma) to test two different versions of `foo` in separate jobs,\n    * set to `foo bar` (note the lack of a comma) to test `foo` and `bar` in the same job,\n3.  which os or oss to run on\n    * set to `ubuntu` to test only `ubuntu`,\n    * set to `ubuntu, macos, windows` (order is unimportant) to test all three oss.\n4.  which python version(s) to run on\n    * set to `3.9` to test only python 3.9,\n    * set to `3.8, 3.9, 3.10, 3.11` to test all currently supported version of python.\n5.  the final two options can generally be left alone.\n\nhit the green **run workflow** button at the bottom of the dialog, wait a few seconds then refresh the page.\nyour workflow run should appear.\n\nwe'll eventually want to see a build (or collection of builds) which pass on\nall oss and all python versions.\nonce you have one, hang onto its url - you'll need it when you submit the pull request.\nif you can't get it to work - that's fine.\nopen a pull request as a draft, show us what you've got and we'll try and help.\n\n\n#### triggering ci/cd from a terminal\n\nif you find repeatedly entering the configuration into github's **run workflow** dialog arduous\nthen we also have a cli script to launch it.\nrun ``python scripts/cloud-test.py --help`` which should walk you through it.\nyou will have to enter all the details again but, thanks to the wonders of terminal history,\nrerunning a configuration is just a case of pressing up then enter.\n\n\n### run linter\n\nwe use `flake8` to enforce code-style.\n`pip install flake8` if you haven't already then run it with the following.\n\n```\nflake8\n```\n\nno news is good news.\nif it complains about your changes then do what it asks then run it again.\nif you don't understand the errors it come up with them lookup the error code\nin each line (a capital letter followed by a number e.g. `w391`).\n\n**please do not fix flake8 issues found in parts of the repository other than the bit that you are working on.** not only is it very boring for you, but it is harder for maintainers to\nreview your changes because so many of them are irrelevant to the hook you are adding or changing.\n\n\n### add a news entry\n\nplease read [news/readme.txt](https://github.com/pyinstaller/pyinstaller-hooks-contrib/blob/master/news/readme.txt) before submitting you pull request.\nthis will require you to know the pull request number before you make the pull request.\nyou can usually guess it by adding 1 to the number of [the latest issue or pull request](https://github.com/pyinstaller/pyinstaller-hooks-contrib/issues?q=sort%3acreated-desc).\nalternatively, [submit the pull request](#submit-the-pull-request) as a draft,\nthen add, commit and push the news item after you know your pull request number.\n\n\n### summary\n\na brief checklist for before submitting your pull request:\n\n* [ ] all new python files have [the appropriate copyright header](#add-the-copyright-header).\n* [ ] you have written a [news entry](#add-a-news-entry).\n* [ ] your changes [satisfy the linter](#run-linter) (run `flake8`).\n* [ ] you have written tests (if possible), [pinned the test requirement](#pin-the-test-requirement) and linked to a successful ci build.\n\n\n### submit the pull request\n\nonce you've done all the above, go ahead and create a pull request.\nif you're stuck doing any of the above steps, create a draft pull request and explain what's wrong - we'll sort you out...\nfeel free to copy/paste commit messages into the github pull request title and description.\nif you have run ci/cd, please include a link to it in your description so that we can see that it works.\nif you've never done a pull request before, note that you can edit it simply by running `git push` again.\nno need to close the old one and start a new one.\n\n---\n\nif you plan to contribute frequently or are interested in becoming a developer,\nsend an email to `legorooj@protonmail.com` to let us know.\n",
  "docs_url": null,
  "keywords": "pyinstaller development hooks",
  "license": "",
  "name": "pyinstaller-hooks-contrib",
  "package_url": "https://pypi.org/project/pyinstaller-hooks-contrib/",
  "project_url": "https://pypi.org/project/pyinstaller-hooks-contrib/",
  "project_urls": {
    "Download": "https://pypi.org/project/pyinstaller-hooks-contrib",
    "Homepage": "https://github.com/pyinstaller/pyinstaller-hooks-contrib"
  },
  "release_url": "https://pypi.org/project/pyinstaller-hooks-contrib/2023.11/",
  "requires_dist": [],
  "requires_python": ">=3.7",
  "summary": "community maintained hooks for pyinstaller",
  "version": "2023.11",
  "releases": [],
  "developers": [
    "legorooj",
    "legorooj@protonmail.com"
  ],
  "kwds": "_pyinstaller_hooks_contrib pyinstaller importlib hooks pyi_builder",
  "license_kwds": "",
  "libtype": "pypi",
  "id": "pypi_pyinstaller_hooks_contrib",
  "homepage": "https://github.com/pyinstaller/pyinstaller-hooks-contrib",
  "release_count": 42,
  "dependency_ids": []
}
{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "programming language :: python :: 3",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: software development :: build tools"
  ],
  "description": "# brownie\n\n[![pypi status](https://img.shields.io/pypi/v/eth-brownie.svg)](https://pypi.org/project/eth-brownie/) [![build status](https://img.shields.io/github/workflow/status/eth-brownie/brownie/brownie%20workflow)](https://github.com/eth-brownie/brownie/actions) [![docs status](https://readthedocs.org/projects/eth-brownie/badge/?version=latest)](https://eth-brownie.readthedocs.io/en/stable/) [![coverage status](https://img.shields.io/codecov/c/github/eth-brownie/brownie)](https://codecov.io/gh/eth-brownie/brownie)\n\nbrownie is a python-based development and testing framework for smart contracts targeting the [ethereum virtual machine](https://solidity.readthedocs.io/en/v0.6.0/introduction-to-smart-contracts.html#the-ethereum-virtual-machine).\n\n## features\n\n* full support for [solidity](https://github.com/ethereum/solidity) (`>=0.4.22`) and [vyper](https://github.com/vyperlang/vyper) (`>=0.1.0-beta.16`)\n* contract testing via [`pytest`](https://github.com/pytest-dev/pytest), including trace-based coverage evaluation\n* property-based and stateful testing via [`hypothesis`](https://github.com/hypothesisworks/hypothesis/tree/master/hypothesis-python)\n* powerful debugging tools, including python-style tracebacks and custom error strings\n* built-in console for quick project interaction\n\n## dependencies\n\n* [python3](https://www.python.org/downloads/release/python-3910/) version 3.7 or greater, python3-dev\n* [ganache](https://github.com/trufflesuite/ganache) - tested with version [7.0.2](https://github.com/trufflesuite/ganache/releases/tag/v7.0.2)\n\n## installation\n\n### via `pipx`\n\nthe recommended way to install brownie is via [`pipx`](https://github.com/pipxproject/pipx). pipx installs brownie into a virtual environment and makes it available directly from the commandline. once installed, you will never have to activate a virtual environment prior to using brownie.\n\nto install `pipx`:\n\n```bash\npython3 -m pip install --user pipx\npython3 -m pipx ensurepath\n```\n\nto install brownie using `pipx`:\n\n```bash\npipx install eth-brownie\n```\n\nto upgrade to the latest version:\n\n```bash\npipx upgrade eth-brownie\n```\n\nto use lastest master or another branch as version:\n```bash\npipx install git+https://github.com/eth-brownie/brownie.git@master\n```\n\n### via `pip`\n\nyou can install the latest release via [`pip`](https://pypi.org/project/pip/):\n\n```bash\npip install eth-brownie\n```\n\n### via `setuptools`\n\nyou can clone the repository and use [`setuptools`](https://github.com/pypa/setuptools) for the most up-to-date version:\n\n```bash\ngit clone https://github.com/eth-brownie/brownie.git\ncd brownie\npython3 setup.py install\n```\n\n### as a library\n\nif you want to install brownie inside your own project (rather than as a standalone cli tool):\n\n```bash\nexport brownie_lib=1\npip install eth-brownie\n```\n\nthis loosens the pins on all dependencies. you'll want to make sure you have your own `requirements.txt` to make sure upgrades upstream don't surprise anyone.\n\n### for development\n\nthere are extra tools that are helpful when developing:\n\n```bash\ngit clone https://github.com/eth-brownie/brownie.git\ncd brownie\npython3 -m venv venv\n./venv/bin/pip install wheel\n./venv/bin/pip install -e . -r requirements-dev.txt\n```\n\nupgrading the pinned versions of dependencies is easy:\n```\n./venv/bin/pip-compile --upgrade\n./venv/bin/pip-compile --upgrade requirements-dev.in\n./venv/bin/pip-compile --upgrade requirements-windows.in\n```\n\neven small upgrades of patch versions have broken things in the past, so be sure to run all tests after upgrading things!\n\n## quick usage\n\nto initialize a new brownie project, start by creating a new folder. from within that folder, type:\n\n```bash\nbrownie init\n```\n\nnext, type `brownie --help` for basic usage information.\n\n## documentation and support\n\nbrownie documentation is hosted at [read the docs](https://eth-brownie.readthedocs.io/en/latest/).\n\nif you have any questions about how to use brownie, feel free to ask on [ethereum stackexchange](https://ethereum.stackexchange.com/) or join us on [gitter](https://gitter.im/eth-brownie/community).\n\n## testing\n\nto run the tests, first install the developer dependencies:\n\n```bash\npip install -e . -r requirements-dev.txt\n```\n\nthen use [`tox`](https://github.com/tox-dev/tox) to run the complete suite against the full set of build targets, or [`pytest`](https://github.com/pytest-dev/pytest) to run tests against a specific version of python. if you are using [`pytest`](https://github.com/pytest-dev/pytest) you must include the `-p no:pytest-brownie` flag to prevent it from loading the brownie plugin.\n\n### using docker\n\nyou can use a sandbox container provided in the [`docker-compose.yml`](docker-compose.yml) file for testing inside a docker environment.\n\nthis container provides everything you need to test using a python 3.6 interpreter.\n\nstart the test environment:\n\n```bash\ndocker-compose up -d\n```\n\nto open a session to the container:\n\n```bash\ndocker-compose exec sandbox bash\n```\n\nto run arbitrary commands, use the `bash -c` prefix.\n\n```bash\ndocker-compose exec sandbox bash -c ''\n```\n\nfor example, to run the tests in `brownie/tests/test_format_input.py`:\n\n```bash\ndocker-compose exec sandbox bash -c 'python -m pytest tests/convert/test_format_input.py'\n```\n\n#### attaching to dockerized rpc clients\n\nyou can also attach to a rpc client already running inside a docker container.\n\nfor example for running ganache-cli you could just startup the official ganache-cli docker image:\n\n```bash\ndocker run -p 8545:8545 trufflesuite/ganache-cli\n```\n\nthen in another terminal on your host you could connect to it:\n\n```bash\nbrownie console\n```\n\nif you have your rpc client bound to a specific hostname e.g. `ganache` you could create a separate brownie network for it:\n\n```bash\nbrownie networks add development dev cmd=ganache-cli host=http://ganache:8545\n```\n\nthen connect to it with:\n\n```bash\nbrownie console --network dev\n```\n\n## contributing\n\nhelp is always appreciated! feel free to open an issue if you find a problem, or a pull request if you've solved an issue.\n\nplease check out our [contribution guide](contributing.md) prior to opening a pull request, and join the brownie [gitter channel](https://gitter.im/eth-brownie/community) if you have any questions.\n\n## license\n\nthis project is licensed under the [mit license](license).\n\n\n",
  "docs_url": null,
  "keywords": "brownie",
  "license": "mit",
  "name": "eth-brownie",
  "package_url": "https://pypi.org/project/eth-brownie/",
  "project_url": "https://pypi.org/project/eth-brownie/",
  "project_urls": {
    "Homepage": "https://github.com/eth-brownie/brownie"
  },
  "release_url": "https://pypi.org/project/eth-brownie/1.19.3/",
  "requires_dist": [
    "aiohttp (==3.8.3)",
    "aiosignal (==1.2.0)",
    "asttokens (==2.0.5)",
    "async-timeout (==4.0.2)",
    "attrs (==22.1.0)",
    "base58 (==2.1.1)",
    "bitarray (==2.6.0)",
    "black (==22.10.0)",
    "certifi (==2022.9.24)",
    "charset-normalizer (==2.1.1)",
    "click (==8.1.3)",
    "cytoolz (==0.12.0)",
    "dataclassy (==0.11.1)",
    "eip712 (==0.1.0)",
    "eth-abi (==2.2.0)",
    "eth-account (==0.5.9)",
    "eth-event (==1.2.3)",
    "eth-hash[pycryptodome] (==0.3.3)",
    "eth-keyfile (==0.5.1)",
    "eth-keys (==0.3.4)",
    "eth-rlp (==0.2.1)",
    "eth-typing (==2.3.0)",
    "eth-utils (==1.10.0)",
    "execnet (==1.9.0)",
    "frozenlist (==1.3.1)",
    "hexbytes (==0.2.3)",
    "hypothesis (==6.27.3)",
    "idna (==3.4)",
    "inflection (==0.5.0)",
    "iniconfig (==1.1.1)",
    "ipfshttpclient (==0.8.0a2)",
    "jsonschema (==3.2.0)",
    "lazy-object-proxy (==1.7.1)",
    "lru-dict (==1.1.8)",
    "multiaddr (==0.0.9)",
    "multidict (==6.0.2)",
    "mypy-extensions (==0.4.3)",
    "mythx-models (==1.9.1)",
    "netaddr (==0.8.0)",
    "packaging (==21.3)",
    "parsimonious (==0.8.1)",
    "pathspec (==0.10.1)",
    "platformdirs (==2.5.2)",
    "pluggy (==1.0.0)",
    "prompt-toolkit (==3.0.31)",
    "protobuf (==3.19.5)",
    "psutil (==5.9.2)",
    "py (==1.11.0)",
    "py-solc-ast (==1.2.9)",
    "py-solc-x (==1.1.1)",
    "pycryptodome (==3.15.0)",
    "pygments (==2.13.0)",
    "pygments-lexer-solidity (==0.7.0)",
    "pyjwt (==1.7.1)",
    "pyparsing (==3.0.9)",
    "pyrsistent (==0.18.1)",
    "pytest (==6.2.5)",
    "pytest-forked (==1.4.0)",
    "pytest-xdist (==1.34.0)",
    "python-dateutil (==2.8.1)",
    "python-dotenv (==0.16.0)",
    "pythx (==1.6.1)",
    "pyyaml (==5.4.1)",
    "requests (==2.28.1)",
    "rlp (==2.0.1)",
    "semantic-version (==2.10.0)",
    "six (==1.16.0)",
    "sortedcontainers (==2.4.0)",
    "toml (==0.10.2)",
    "tomli (==2.0.1)",
    "toolz (==0.12.0)",
    "tqdm (==4.64.1)",
    "typing-extensions (==4.4.0)",
    "urllib3 (==1.26.12)",
    "varint (==1.0.2)",
    "vvm (==0.1.0)",
    "vyper (==0.3.7)",
    "wcwidth (==0.2.5)",
    "web3 (==5.31.3)",
    "websockets (==9.1)",
    "wheel (==0.37.1)",
    "wrapt (==1.14.1)",
    "yarl (==1.8.1)"
  ],
  "requires_python": ">=3.7,<4",
  "summary": "a python framework for ethereum smart contract deployment, testing and interaction.",
  "version": "1.19.3",
  "releases": [],
  "developers": [
    "ben@hauser.id",
    "ben_hauser"
  ],
  "kwds": "brownie_lib brownie pytest pipx pipxproject",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_eth_brownie",
  "homepage": "https://github.com/eth-brownie/brownie",
  "release_count": 115,
  "dependency_ids": [
    "pypi_aiohttp",
    "pypi_aiosignal",
    "pypi_asttokens",
    "pypi_async_timeout",
    "pypi_attrs",
    "pypi_base58",
    "pypi_bitarray",
    "pypi_black",
    "pypi_certifi",
    "pypi_charset_normalizer",
    "pypi_click",
    "pypi_cytoolz",
    "pypi_dataclassy",
    "pypi_eip712",
    "pypi_eth_abi",
    "pypi_eth_account",
    "pypi_eth_event",
    "pypi_eth_hash",
    "pypi_eth_keyfile",
    "pypi_eth_keys",
    "pypi_eth_rlp",
    "pypi_eth_typing",
    "pypi_eth_utils",
    "pypi_execnet",
    "pypi_frozenlist",
    "pypi_hexbytes",
    "pypi_hypothesis",
    "pypi_idna",
    "pypi_inflection",
    "pypi_iniconfig",
    "pypi_ipfshttpclient",
    "pypi_jsonschema",
    "pypi_lazy_object_proxy",
    "pypi_lru_dict",
    "pypi_multiaddr",
    "pypi_multidict",
    "pypi_mypy_extensions",
    "pypi_mythx_models",
    "pypi_netaddr",
    "pypi_packaging",
    "pypi_parsimonious",
    "pypi_pathspec",
    "pypi_platformdirs",
    "pypi_pluggy",
    "pypi_prompt_toolkit",
    "pypi_protobuf",
    "pypi_psutil",
    "pypi_py",
    "pypi_py_solc_ast",
    "pypi_py_solc_x",
    "pypi_pycryptodome",
    "pypi_pygments",
    "pypi_pygments_lexer_solidity",
    "pypi_pyjwt",
    "pypi_pyparsing",
    "pypi_pyrsistent",
    "pypi_pytest",
    "pypi_pytest_forked",
    "pypi_pytest_xdist",
    "pypi_python_dateutil",
    "pypi_python_dotenv",
    "pypi_pythx",
    "pypi_pyyaml",
    "pypi_requests",
    "pypi_rlp",
    "pypi_semantic_version",
    "pypi_six",
    "pypi_sortedcontainers",
    "pypi_toml",
    "pypi_tomli",
    "pypi_toolz",
    "pypi_tqdm",
    "pypi_typing_extensions",
    "pypi_urllib3",
    "pypi_varint",
    "pypi_vvm",
    "pypi_vyper",
    "pypi_wcwidth",
    "pypi_web3",
    "pypi_websockets",
    "pypi_wheel",
    "pypi_wrapt",
    "pypi_yarl"
  ]
}
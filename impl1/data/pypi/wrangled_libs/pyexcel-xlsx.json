{
  "classifiers": [
    "intended audience :: developers",
    "programming language :: python",
    "programming language :: python :: 3 :: only",
    "programming language :: python :: 3.6",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: implementation :: pypy",
    "topic :: software development :: libraries"
  ],
  "description": "================================================================================\npyexcel-xlsx - let you focus on data, instead of xlsx format\n================================================================================\n\n.. image:: https://raw.githubusercontent.com/pyexcel/pyexcel.github.io/master/images/patreon.png\n   :target: https://www.patreon.com/chfw\n\n.. image:: https://cdn.rawgit.com/sindresorhus/awesome/d7305f38d29fed78fa85652e3a63e154dd8e8829/media/badge.svg\n   :target: https://awesome-python.com/#specific-formats-processing\n\n.. image:: https://travis-ci.org/pyexcel/pyexcel-xlsx.svg?branch=master\n   :target: http://travis-ci.org/pyexcel/pyexcel-xlsx\n\n.. image:: https://codecov.io/gh/pyexcel/pyexcel-xlsx/branch/master/graph/badge.svg\n   :target: https://codecov.io/gh/pyexcel/pyexcel-xlsx\n\n.. image:: https://badge.fury.io/py/pyexcel-xlsx.svg\n   :target: https://pypi.org/project/pyexcel-xlsx\n\n.. image:: https://anaconda.org/conda-forge/pyexcel-xlsx/badges/version.svg\n   :target: https://anaconda.org/conda-forge/pyexcel-xlsx\n\n.. image:: https://pepy.tech/badge/pyexcel-xlsx/month\n   :target: https://pepy.tech/project/pyexcel-xlsx/month\n\n.. image:: https://anaconda.org/conda-forge/pyexcel-xlsx/badges/downloads.svg\n   :target: https://anaconda.org/conda-forge/pyexcel-xlsx\n\n.. image:: https://img.shields.io/gitter/room/gitterhq/gitter.svg\n   :target: https://gitter.im/pyexcel/lobby\n\n.. image:: https://img.shields.io/static/v1?label=continuous%20templating&message=%e6%a8%a1%e7%89%88%e6%9b%b4%e6%96%b0&color=blue&style=flat-square\n    :target: https://moban.readthedocs.io/en/latest/#at-scale-continous-templating-for-open-source-projects\n\n.. image:: https://img.shields.io/static/v1?label=coding%20style&message=black&color=black&style=flat-square\n    :target: https://github.com/psf/black\n\n**pyexcel-xlsx** is a tiny wrapper library to read, manipulate and write data in xlsx and xlsm format using  `read_only` mode reader, `write_only` mode writer from openpyxl. you are likely to use it with `pyexcel <https://github.com/pyexcel/pyexcel>`__.\n\nplease note:\n\n1. `auto_detect_int` flag will not take effect because openpyxl detect integer in python 3 by default.\n2. `skip_hidden_row_and_column` will get a penalty where `read_only` mode cannot be used.\n\n\n\nsupport the project\n================================================================================\n\nif your company has embedded pyexcel and its components into a revenue generating\nproduct, please support me on github, `patreon <https://www.patreon.com/bepatron?u=5537627>`_\nor `bounty source <https://salt.bountysource.com/teams/chfw-pyexcel>`_ to maintain\nthe project and develop it further.\n\nif you are an individual, you are welcome to support me too and for however long\nyou feel like. as my backer, you will receive\n`early access to pyexcel related contents <https://www.patreon.com/pyexcel/posts>`_.\n\nand your issues will get prioritized if you would like to become my patreon as `pyexcel pro user`.\n\nwith your financial support, i will be able to invest\na little bit more time in coding, documentation and writing interesting posts.\n\n\nknown constraints\n==================\n\nfonts, colors and charts are not supported.\n\ninstallation\n================================================================================\n\n\nyou can install pyexcel-xlsx via pip:\n\n.. code-block:: bash\n\n    $ pip install pyexcel-xlsx\n\n\nor clone it and install it:\n\n.. code-block:: bash\n\n    $ git clone https://github.com/pyexcel/pyexcel-xlsx.git\n    $ cd pyexcel-xlsx\n    $ python setup.py install\n\nusage\n================================================================================\n\nas a standalone library\n--------------------------------------------------------------------------------\n\nwrite to an xlsx file\n********************************************************************************\n\n\n\nhere's the sample code to write a dictionary to an xlsx file:\n\n.. code-block:: python\n\n    >>> from pyexcel_xlsx import save_data\n    >>> data = ordereddict() # from collections import ordereddict\n    >>> data.update({\"sheet 1\": [[1, 2, 3], [4, 5, 6]]})\n    >>> data.update({\"sheet 2\": [[\"row 1\", \"row 2\", \"row 3\"]]})\n    >>> save_data(\"your_file.xlsx\", data)\n\n\nread from an xlsx file\n********************************************************************************\n\nhere's the sample code:\n\n.. code-block:: python\n\n    >>> from pyexcel_xlsx import get_data\n    >>> data = get_data(\"your_file.xlsx\")\n    >>> import json\n    >>> print(json.dumps(data))\n    {\"sheet 1\": [[1, 2, 3], [4, 5, 6]], \"sheet 2\": [[\"row 1\", \"row 2\", \"row 3\"]]}\n\n\nwrite an xlsx to memory\n********************************************************************************\n\nhere's the sample code to write a dictionary to an xlsx file:\n\n.. code-block:: python\n\n    >>> from pyexcel_xlsx import save_data\n    >>> data = ordereddict()\n    >>> data.update({\"sheet 1\": [[1, 2, 3], [4, 5, 6]]})\n    >>> data.update({\"sheet 2\": [[7, 8, 9], [10, 11, 12]]})\n    >>> io = stringio()\n    >>> save_data(io, data)\n    >>> # do something with the io\n    >>> # in reality, you might give it to your http response\n    >>> # object for downloading\n\n\n\n\nread from an xlsx from memory\n********************************************************************************\n\ncontinue from previous example:\n\n.. code-block:: python\n\n    >>> # this is just an illustration\n    >>> # in reality, you might deal with xlsx file upload\n    >>> # where you will read from requests.files['your_xlsx_file']\n    >>> data = get_data(io)\n    >>> print(json.dumps(data))\n    {\"sheet 1\": [[1, 2, 3], [4, 5, 6]], \"sheet 2\": [[7, 8, 9], [10, 11, 12]]}\n\n\npagination feature\n********************************************************************************\n\n\n\nlet's assume the following file is a huge xlsx file:\n\n.. code-block:: python\n\n   >>> huge_data = [\n   ...     [1, 21, 31],\n   ...     [2, 22, 32],\n   ...     [3, 23, 33],\n   ...     [4, 24, 34],\n   ...     [5, 25, 35],\n   ...     [6, 26, 36]\n   ... ]\n   >>> sheetx = {\n   ...     \"huge\": huge_data\n   ... }\n   >>> save_data(\"huge_file.xlsx\", sheetx)\n\nand let's pretend to read partial data:\n\n.. code-block:: python\n\n   >>> partial_data = get_data(\"huge_file.xlsx\", start_row=2, row_limit=3)\n   >>> print(json.dumps(partial_data))\n   {\"huge\": [[3, 23, 33], [4, 24, 34], [5, 25, 35]]}\n\nand you could as well do the same for columns:\n\n.. code-block:: python\n\n   >>> partial_data = get_data(\"huge_file.xlsx\", start_column=1, column_limit=2)\n   >>> print(json.dumps(partial_data))\n   {\"huge\": [[21, 31], [22, 32], [23, 33], [24, 34], [25, 35], [26, 36]]}\n\nobvious, you could do both at the same time:\n\n.. code-block:: python\n\n   >>> partial_data = get_data(\"huge_file.xlsx\",\n   ...     start_row=2, row_limit=3,\n   ...     start_column=1, column_limit=2)\n   >>> print(json.dumps(partial_data))\n   {\"huge\": [[23, 33], [24, 34], [25, 35]]}\n\nas a pyexcel plugin\n--------------------------------------------------------------------------------\n\nno longer, explicit import is needed since pyexcel version 0.2.2. instead,\nthis library is auto-loaded. so if you want to read data in xlsx format,\ninstalling it is enough.\n\n\nreading from an xlsx file\n********************************************************************************\n\nhere is the sample code:\n\n.. code-block:: python\n\n    >>> import pyexcel as pe\n    >>> sheet = pe.get_book(file_name=\"your_file.xlsx\")\n    >>> sheet\n    sheet 1:\n    +---+---+---+\n    | 1 | 2 | 3 |\n    +---+---+---+\n    | 4 | 5 | 6 |\n    +---+---+---+\n    sheet 2:\n    +-------+-------+-------+\n    | row 1 | row 2 | row 3 |\n    +-------+-------+-------+\n\n\nwriting to an xlsx file\n********************************************************************************\n\nhere is the sample code:\n\n.. code-block:: python\n\n    >>> sheet.save_as(\"another_file.xlsx\")\n\n\nreading from a io instance\n********************************************************************************\n\nyou got to wrap the binary content with stream to get xlsx working:\n\n.. code-block:: python\n\n    >>> # this is just an illustration\n    >>> # in reality, you might deal with xlsx file upload\n    >>> # where you will read from requests.files['your_xlsx_file']\n    >>> xlsxfile = \"another_file.xlsx\"\n    >>> with open(xlsxfile, \"rb\") as f:\n    ...     content = f.read()\n    ...     r = pe.get_book(file_type=\"xlsx\", file_content=content)\n    ...     print(r)\n    ...\n    sheet 1:\n    +---+---+---+\n    | 1 | 2 | 3 |\n    +---+---+---+\n    | 4 | 5 | 6 |\n    +---+---+---+\n    sheet 2:\n    +-------+-------+-------+\n    | row 1 | row 2 | row 3 |\n    +-------+-------+-------+\n\n\nwriting to a stringio instance\n********************************************************************************\n\nyou need to pass a stringio instance to writer:\n\n.. code-block:: python\n\n    >>> data = [\n    ...     [1, 2, 3],\n    ...     [4, 5, 6]\n    ... ]\n    >>> io = stringio()\n    >>> sheet = pe.sheet(data)\n    >>> io = sheet.save_to_memory(\"xlsx\", io)\n    >>> # then do something with io\n    >>> # in reality, you might give it to your http response\n    >>> # object for downloading\n\n\nlicense\n================================================================================\n\nnew bsd license\n\ndeveloper guide\n==================\n\ndevelopment steps for code changes\n\n#. git clone https://github.com/pyexcel/pyexcel-xlsx.git\n#. cd pyexcel-xlsx\n\nupgrade your setup tools and pip. they are needed for development and testing only:\n\n#. pip install --upgrade setuptools pip\n\nthen install relevant development requirements:\n\n#. pip install -r rnd_requirements.txt # if such a file exists\n#. pip install -r requirements.txt\n#. pip install -r tests/requirements.txt\n\nonce you have finished your changes, please provide test case(s), relevant documentation\nand update changelog.rst.\n\n.. note::\n\n    as to rnd_requirements.txt, usually, it is created when a dependent\n    library is not released. once the dependecy is installed\n    (will be released), the future\n    version of the dependency in the requirements.txt will be valid.\n\n\nhow to test your contribution\n------------------------------\n\nalthough `nose` and `doctest` are both used in code testing, it is adviable that unit tests are put in tests. `doctest` is incorporated only to make sure the code examples in documentation remain valid across different development releases.\n\non linux/unix systems, please launch your tests like this::\n\n    $ make\n\non windows systems, please issue this command::\n\n    > test.bat\n\n\nbefore you commit\n------------------------------\n\nplease run::\n\n    $ make format\n\nso as to beautify your code otherwise travis-ci may fail your unit test.\n\n\n\n\nchange log\n================================================================================\n\n0.6.0 - 10.10.2020\n--------------------------------------------------------------------------------\n\n**updated**\n\n#. new style xlsx plugins, promoted by pyexcel-io v0.6.2.\n\n0.5.8 - 28.12.2019\n--------------------------------------------------------------------------------\n\n**updated**\n\n#. `#34 <https://github.com/pyexcel/pyexcel-xlsx/issues/34>`_: pin\n   openpyxl>=2.6.1\n\n0.5.7 - 15.02.2019\n--------------------------------------------------------------------------------\n\n**added**\n\n#. `pyexcel-io#66 <https://github.com/pyexcel/pyexcel-io/issues/66>`_ pin\n   openpyxl < 2.6.0\n\n0.5.6 - 26.03.2018\n--------------------------------------------------------------------------------\n\n**added**\n\n#. `#24 <https://github.com/pyexcel/pyexcel-xlsx/issues/24>`_, remove deprecated\n   warning from merged_cell_ranges and get_sheet_by_name\n\n0.5.5 - 18.12.2017\n--------------------------------------------------------------------------------\n\n**added**\n\n#. `#22 <https://github.com/pyexcel/pyexcel-xlsx/issues/22>`_, to detect merged\n   cell in xlsx - fast tracked patreon request.\n\n0.5.4 - 2.11.2017\n--------------------------------------------------------------------------------\n\n**updated**\n\n#. align the behavior of skip_hidden_row_and_column. default it to true.\n\n0.5.3 - 2.11.2017\n--------------------------------------------------------------------------------\n\n**added**\n\n#. `#20 <https://github.com/pyexcel/pyexcel-xlsx/issues/20>`_, skip hidden rows\n   and columns under 'skip_hidden_row_and_column' flag.\n\n0.5.2 - 23.10.2017\n--------------------------------------------------------------------------------\n\n**updated**\n\n#. pyexcel `pyexcel#105 <https://github.com/pyexcel/pyexcel/issues/105>`_,\n   remove gease from setup_requires, introduced by 0.5.1.\n#. remove python2.6 test support\n#. update its dependecy on pyexcel-io to 0.5.3\n\n0.5.1 - 20.10.2017\n--------------------------------------------------------------------------------\n\n**added**\n\n#. `pyexcel#103 <https://github.com/pyexcel/pyexcel/issues/103>`_, include\n   license file in manifest.in, meaning license file will appear in the released\n   tar ball.\n\n0.5.0 - 30.08.2017\n--------------------------------------------------------------------------------\n\n**updated**\n\n#. put dependency on pyexcel-io 0.5.0, which uses cstringio instead of stringio.\n   hence, there will be performance boost in handling files in memory.\n\n**removed**\n\n#. `#18 <https://github.com/pyexcel/pyexcel-xlsx/issues/18>`_, is handled in\n   pyexcel-io\n\n0.4.2 - 25.08.2017\n--------------------------------------------------------------------------------\n\n**updated**\n\n#. `#18 <https://github.com/pyexcel/pyexcel-xlsx/issues/18>`_, handle unseekable\n   stream given by http response\n\n0.4.1 - 16.07.2017\n--------------------------------------------------------------------------------\n\n**removed**\n\n#. removed useless code\n\n0.4.0 - 19.06.2017\n--------------------------------------------------------------------------------\n\n**updated**\n\n#. `#14 <https://github.com/pyexcel/pyexcel-xlsx/issues/14>`_, close file handle\n#. pyexcel-io plugin interface now updated to use `lml\n   <https://github.com/chfw/lml>`_.\n\n0.3.0 - 22.12.2016\n--------------------------------------------------------------------------------\n\n**updated**\n\n#. code refactoring with pyexcel-io v 0.3.0\n#. `#13 <https://github.com/pyexcel/pyexcel-xlsx/issues/13>`_, turn read_only\n   flag on openpyxl.\n\n0.2.3 - 05.11.2016\n--------------------------------------------------------------------------------\n\n**updated**\n\n#. `#12 <https://github.com/pyexcel/pyexcel-xlsx/issues/12>`_, remove\n   userwarning: using a coordinate with ws.cell is deprecated. use\n   ws[coordinate]\n\n0.2.2 - 31.08.2016\n--------------------------------------------------------------------------------\n\n**added**\n\n#. support pagination. two pairs: start_row, row_limit and start_column,\n   column_limit help you deal with large files.\n\n0.2.1 - 12.07.2016\n--------------------------------------------------------------------------------\n\n**added**\n\n#. `#8 <https://github.com/pyexcel/pyexcel-xlsx/issues/8>`__,\n   `skip_hidden_sheets` is added. by default, hidden sheets are skipped when\n   reading all sheets. reading sheet by name or by index are not affected.\n\n0.2.0 - 01.06.2016\n--------------------------------------------------------------------------------\n\n**added**\n\n#. 'library=pyexcel-xlsx' was added to inform pyexcel to use it instead of other\n   libraries, in the situation where there are more than one plugin for a file\n   type, e.g. xlsm\n\n**updated**\n\n#. support the auto-import feature of pyexcel-io 0.2.0\n\n0.1.0 - 17.01.2016\n--------------------------------------------------------------------------------\n\n**added**\n\n#. passing \"streaming=true\" to get_data, you will get the two dimensional array\n   as a generator\n#. passing \"data=your_generator\" to save_data is acceptable too.\n\n**updated**\n\n#. compatibility with pyexcel-io 0.1.0\n\n\n\n",
  "docs_url": "https://pythonhosted.org/pyexcel-xlsx/",
  "keywords": "python,xlsx",
  "license": "new bsd",
  "name": "pyexcel-xlsx",
  "package_url": "https://pypi.org/project/pyexcel-xlsx/",
  "project_url": "https://pypi.org/project/pyexcel-xlsx/",
  "project_urls": {
    "Download": "https://github.com/pyexcel/pyexcel-xlsx/archive/0.6.0.tar.gz",
    "Homepage": "https://github.com/pyexcel/pyexcel-xlsx"
  },
  "release_url": "https://pypi.org/project/pyexcel-xlsx/0.6.0/",
  "requires_dist": [
    "openpyxl (>=2.6.1)",
    "pyexcel-io (>=0.6.2)"
  ],
  "requires_python": ">=3.6",
  "summary": "a wrapper library to read, manipulate and write data in xlsx and xlsmformat",
  "version": "0.6.0",
  "releases": [],
  "developers": [
    "chfw",
    "info@pyexcel.org"
  ],
  "kwds": "pyexcel_xlsx xlsxfile your_xlsx_file sheetx xlsx",
  "license_kwds": "new bsd",
  "libtype": "pypi",
  "id": "pypi_pyexcel_xlsx",
  "homepage": "https://github.com/pyexcel/pyexcel-xlsx",
  "release_count": 28,
  "dependency_ids": [
    "pypi_openpyxl",
    "pypi_pyexcel_io"
  ]
}
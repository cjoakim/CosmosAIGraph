{
  "classifiers": [
    "development status :: 4 - beta",
    "environment :: plugins",
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "natural language :: english",
    "operating system :: os independent",
    "programming language :: python :: 3",
    "programming language :: python :: 3.6",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "topic :: internet :: www/http",
    "topic :: software development :: libraries :: python modules"
  ],
  "description": "|license| |pypi| |python versions| |package format| |package status|\n\n|logo|\n\nprance provides parsers for `swagger/openapi\n2.0 and 3.0 <http://swagger.io/specification/>`__ api specifications in python.\nit uses `openapi\\_spec\\_validator <https://github.com/p1c2u/openapi-spec-validator>`__,\n`swagger\\_spec\\_validator <https://github.com/yelp/swagger_spec_validator>`__ or\n`flex <https://github.com/pipermerriam/flex>`__\nto validate specifications, but additionally resolves `json\nreferences <https://tools.ietf.org/html/draft-pbryan-zyp-json-ref-03>`__\nin accordance with the openapi spec.\n\nmostly the latter involves handling non-uri references; openapi is fine\nwith providing relative file paths, whereas json references require uris\nat this point in time.\n\nusage\n=====\n\ninstallation\n------------\n\nprance is available from pypi, and can be installed via pip:\n\n.. code:: bash\n\n    $ pip install prance\n\nnote that this will install the code, but additional subpackages must be specified\nto unlock various pieces of functionality. at minimum, a parsing backend must be\ninstalled. for the cli functionality, you need further dependencies.\n\nthe recommended installation installs the cli, uses icu and installs one validation\nbackend:\n\n.. code:: bash\n\n    $ pip install prance[osv,icu,cli]\n\nmake sure you have `icu unicode library <http://site.icu-project.org/home>`__ installed,\nas well as python dev library before running the commands above. if not, use the\nfollowing commands:\n\n.. code:: bash\n\n    $ sudo apt-get install libicu-dev python3-dev # ubuntu/debian\n    $ sudo dnf install libicu-devel python3-devel # fedora\n\n\ncommand line interface\n----------------------\n\nafter installing prance, a cli is available for validating (and resolving\nexternal references in) specs:\n\n.. code:: bash\n\n    # validates with resolving\n    $ prance validate path/to/swagger.yml\n\n    # validates without resolving\n    $ prance validate --no-resolve path/to/swagger.yml\n\n    # fetch url, validate and resolve.\n    $ prance validate http://petstore.swagger.io/v2/swagger.json\n    processing \"http://petstore.swagger.io/v2/swagger.json\"...\n     -> resolving external references.\n    validates ok as swagger/openapi 2.0!\n\nvalidation is not the only feature of prance. one of the side effects of\nresolving is that from a spec with references, one can create a fully resolved\noutput spec. in the past, this was done via options to the ``validate`` command,\nbut now there's a specific command just for this purpose:\n\n.. code:: bash\n\n    # compile spec\n    $ prance compile path/to/input.yml path/to/output.yml\n\n\nlastly, with the arrival of openapi 3.0.0, it becomes useful for tooling to\nconvert older specs to the new standard. instead of re-inventing the wheel,\nprance just provides a cli command for passing specs to the web api of\n`swagger2openapi <https://github.com/mermade/swagger2openapi>`__ - a working\ninternet connection is therefore required for this command:\n\n.. code:: bash\n\n    # convert spec\n    $ prance convert path/to/swagger.yml path/to/openapi.yml\n\n\ncode\n----\n\nmost likely you have spec file and want to parse it:\n\n.. code:: python\n\n    from prance import resolvingparser\n    parser = resolvingparser('path/to/my/swagger.yaml')\n    parser.specification  # contains fully resolved specs as a dict\n\nprance also includes a non-resolving parser that does not follow json\nreferences, in case you prefer that.\n\n.. code:: python\n\n    from prance import baseparser\n    parser = baseparser('path/to/my/swagger.yaml')\n    parser.specification  # contains specs as a dict still containing json references\n\non windows, the code reacts correctly if you pass posix-like paths\n(``/c:/swagger``) or if the path is relative.  if you pass absolute\nwindows path (like ``c:\\swagger.yaml``), you can use\n``prance.util.fs.abspath`` to convert them.\n\nurls can also be parsed:\n\n.. code:: python\n\n    parser = resolvingparser('http://petstore.swagger.io/v2/swagger.json')\n\nlargely, that's it. there is a whole slew of utility code that you may\nor may not find useful, too. look at the `full documentation\n<https://prance.readthedocs.io/en/latest/#api-modules>`__ for details.\n\n\ncompatibility\n-------------\n\n*python versions*\n\nversion 0.16.2 is the last version supporting python 2. it was released on\nnov 12th, 2019. python 2 reaches end of life at the end of 2019. if you wish\nfor updates to the python 2 supported packages, please contact the maintainer\ndirectly.\n\nuntil fairly recently, we also tested with `pypy <https://www.pypy.org/>`__.\nunfortunately, travis isn't very good at supporting this. so in the absence\nof spare time, they're disabled. `issue 50 <https://github.com/jfinkhaeuser/prance/issues/50>`__\ntracks progress on that.\n\nsimilarly, but less critically, python 3.4 is no longer receiving a lot of\nlove from ci vendors, so automated builds on that version are no longer\nsupported.\n\n*backends*\n\ndifferent validation backends support different features.\n\n+------------------------+----------------+-----------------+-------------+-------------------------------------------------------+----------------+-----------------------------------------------------------------------------------+\n| backend                | python version | openapi version | strict mode | notes                                                 | available from | link                                                                              |\n+========================+================+=================+=============+=======================================================+================+===================================================================================+\n| swagger-spec-validator | 2 and 3        | 2.0 only        | yes         | slow; does not accept integer keys (see strict mode). | prance 0.1     | `swagger\\_spec\\_validator <https://github.com/yelp/swagger_spec_validator>`__     |\n+------------------------+----------------+-----------------+-------------+-------------------------------------------------------+----------------+-----------------------------------------------------------------------------------+\n| flex                   | 2 and 3        | 2.0 only        | n/a         | fastest; unfortunately deprecated.                    | prance 0.8     | `flex <https://github.com/pipermerriam/flex>`__                                   |\n+------------------------+----------------+-----------------+-------------+-------------------------------------------------------+----------------+-----------------------------------------------------------------------------------+\n| openapi-spec-validator | 2 and 3        | 2.0 and 3.0     | yes         | slow; does not accept integer keys (see strict mode). | prance 0.11    | `openapi\\_spec\\_validator <https://github.com/p1c2u/openapi-spec-validator>`__    |\n+------------------------+----------------+-----------------+-------------+-------------------------------------------------------+----------------+-----------------------------------------------------------------------------------+\n\nyou can select the backend in the constructor of the parser(s):\n\n.. code:: python\n\n    parser = resolvingparser('http://petstore.swagger.io/v2/swagger.json', backend = 'openapi-spec-validator')\n\n\nno backend is included in the dependencies; they are detected at run-time. if you install them,\nthey can be used:\n\n.. code:: bash\n\n    $ pip install openapi-spec-validator\n    $ pip install prance\n    $ prance validate --backend=openapi-spec-validator path/to/spec.yml\n\n*a note on flex usage:* while flex is the fastest validation backend, unfortunately it is no longer\nmaintained and there are issues with its dependencies. for one thing, it depends on a version of `pyyaml`\nthat contains security flaws. for another, it depends explicitly on older versions of `click`.\n\nif you use the flex subpackage, therefore, you do so at your own risk.\n\n*compatibility*\n\nsee `compatibility.rst <https://github.com/jfinkhaeuser/prance/blob/master/compatibility.rst>`__\nfor a list of known issues.\n\n\npartial reference resolution\n----------------------------\n\nit's possible to instruct the parser to only resolve some kinds of references.\nthis allows e.g. resolving references from external urls, whilst keeping local\nreferences (i.e. to local files, or file internal) intact.\n\n.. code:: python\n\n    from prance import resolvingparser\n    from prance.util.resolver import resolve_http\n\n    parser = resolvingparser('/path/to/spec', resolve_types = resolve_http)\n\n\nmultiple types can be specified by or-ing constants together:\n\n.. code:: python\n\n    from prance import resolvingparser\n    from prance.util.resolver import resolve_http, resolve_files\n\n    parser = resolvingparser('/path/to/spec', resolve_types = resolve_http | resolve_files)\n\n\nextensions\n----------\n\nprance includes the ability to reference outside swagger definitions\nin outside python packages. such a package must already be importable\n(i.e. installed), and be accessible via the\n`resourcemanager api <https://setuptools.readthedocs.io/en/latest/pkg_resources.html#resourcemanager-api>`__\n(some more info `here <https://setuptools.readthedocs.io/en/latest/setuptools.html#including-data-files>`__).\n\nfor example, you might create a package ``common_swag`` with the file\n``base.yaml`` containing the definition\n\n.. code:: yaml\n\n    definitions:\n      severity:\n        type: string\n        enum:\n        - info\n        - warn\n        - error\n        - fatal\n\nin the ``setup.py`` for ``common_swag`` you would add lines such as\n\n.. code:: python\n\n    packages=find_packages('src'),\n    package_dir={'': 'src'},\n    package_data={\n        '': '*.yaml'\n    }\n\nthen, having installed ``common_swag`` into some application, you could\nnow write\n\n.. code:: yaml\n\n    definitions:\n      message:\n        type: object\n        properties:\n          severity:\n            $ref: 'python://common_swag/base.yaml#/definitions/severity'\n          code:\n            type: string\n          summary:\n            type: string\n          description:\n            type: string\n        required:\n        - severity\n        - summary\n\ncontributing\n============\n\nsee `contributing.md <https://github.com/jfinkhaeuser/prance/blob/master/contributing.md>`__ for details.\n\nprofessional support is available through `finkhaeuser consulting <https://finkhaeuser.de>`__.\n\nlicense\n=======\n\nlicensed under mit. see the `license.txt <https://github.com/ronnypfannschmidt/prance/blob/master/license.txt>`__ file for details.\n\n\"prancing unicorn\" logo image copyright (c) jens finkhaeuser.\nmade by `moreven b <http://morevenb.com/>`__. use of the logo is permitted under\nthe `creative commons attribution-noncommercial-sharealike 4.0 international license <https://creativecommons.org/licenses/by-nc-sa/4.0/>`__.\n\n\n.. |license| image:: https://img.shields.io/pypi/l/prance.svg\n   :target: https://pypi.python.org/pypi/prance/\n.. |pypi| image:: https://img.shields.io/pypi/v/prance.svg\n   :target: https://pypi.python.org/pypi/prance/\n.. |package format| image:: https://img.shields.io/pypi/format/prance.svg\n   :target: https://pypi.python.org/pypi/prance/\n.. |python versions| image:: https://img.shields.io/pypi/pyversions/prance.svg\n   :target: https://pypi.python.org/pypi/prance/\n.. |package status| image:: https://img.shields.io/pypi/status/prance.svg\n   :target: https://pypi.python.org/pypi/prance/\n.. |logo| image:: https://raw.githubusercontent.com/ronnypfannschmidt/prance/master/docs/images/prance_logo_256.png\n",
  "docs_url": null,
  "keywords": "swagger openapi parsing",
  "license": "mitnfa",
  "name": "prance",
  "package_url": "https://pypi.org/project/prance/",
  "project_url": "https://pypi.org/project/prance/",
  "project_urls": {
    "Homepage": "https://github.com/RonnyPfannschmidt/prance"
  },
  "release_url": "https://pypi.org/project/prance/23.6.21.0/",
  "requires_dist": [
    "chardet (>=3.0)",
    "ruamel.yaml (>=0.17.10)",
    "requests (>=2.25)",
    "six (~=1.15)",
    "packaging (>=21.3)",
    "click (>=7.0) ; extra == 'cli'",
    "tox (>=3.4) ; extra == 'dev'",
    "bumpversion (>=0.6) ; extra == 'dev'",
    "pytest (>=6.1) ; extra == 'dev'",
    "pytest-cov (>=2.11) ; extra == 'dev'",
    "sphinx (>=3.4) ; extra == 'dev'",
    "towncrier (>=19.2) ; extra == 'dev'",
    "flex (~=6.13) ; extra == 'flex'",
    "PyICU (~=2.4) ; extra == 'icu'",
    "openapi-spec-validator (~=0.5.1) ; extra == 'osv'",
    "swagger-spec-validator (~=2.4) ; extra == 'ssv'"
  ],
  "requires_python": ">=3.8",
  "summary": "resolving swagger/openapi 2.0 and 3.0.0 parser",
  "version": "23.6.21.0",
  "releases": [],
  "developers": [
    "jens@finkhaeuser.de",
    "jens_finkhaeuser",
    "opensource@ronnypfannschmidt.de",
    "ronny_pfannschmidt"
  ],
  "kwds": "swagger_spec_validator swagger2openapi swagger openapi api",
  "license_kwds": "mitnfa",
  "libtype": "pypi",
  "id": "pypi_prance",
  "homepage": "https://github.com/ronnypfannschmidt/prance",
  "release_count": 45,
  "dependency_ids": [
    "pypi_bumpversion",
    "pypi_chardet",
    "pypi_click",
    "pypi_flex",
    "pypi_openapi_spec_validator",
    "pypi_packaging",
    "pypi_pyicu",
    "pypi_pytest",
    "pypi_pytest_cov",
    "pypi_requests",
    "pypi_ruamel.yaml",
    "pypi_six",
    "pypi_sphinx",
    "pypi_swagger_spec_validator",
    "pypi_towncrier",
    "pypi_tox"
  ]
}
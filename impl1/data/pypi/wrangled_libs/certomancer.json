{
  "classifiers": [
    "development status :: 4 - beta",
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: security :: cryptography",
    "topic :: software development :: libraries :: python modules"
  ],
  "description": "# certomancer\n\n<p align=\"center\">\n  <img width=\"300\" height=\"300\" src=\"images/certomancer.svg\" alt=\"logo\">\n</p>\n\n![status](https://github.com/matthiasvalvekens/certomancer/workflows/pytest/badge.svg)\n[![pypi version](https://img.shields.io/pypi/v/certomancer)](https://pypi.org/project/certomancer/)\n![python versions](https://shields.io/pypi/pyversions/certomancer)\n[![code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)\n\nquickly construct, mock & deploy pki test configurations using simple declarative configuration.\nincludes crl, ocsp and time stamping service provisioning.\n\nrequires python 3.7 or later.\n\n## quick start\n\ncertomancer is [available on pypi](https://pypi.org/project/certomancer/). see `example.yml` for an example config file.\n\n```bash\n$ pip install 'certomancer[web-api,pkcs12]' \n$ certomancer --config example.yml animate\n```\n\nthis will run the certomancer animator wsgi app on your local machine, behind a development web\nserver. point your browser to `http://localhost:9000` and take a look around.\nfor more information, see the [documentation](#documentation) below.\n\n\n## installing the development version\n\nto build and install an (unreleased) development version, you can proceed as follows.\n\n```bash\n$ git clone https://github.com/matthiasvalvekens/certomancer\n$ cd certomancer\n$ python -m build\n$ pip install dist/certomancer*.whl\n```\n\n\n## demo\n\nthere's a demo on asciinema.org, demonstrating some of the core features of certomancer. see link below.\n\n[![asciicast](https://asciinema.org/a/406798.svg)](https://asciinema.org/a/406798)\n\n\n## fosdem '22 talk\n\ni gave a lightning talk on testing & mocking pki services in the [testing & automation devroom](https://fosdem.org/2022/schedule/track/testing_and_automation/) at [fosdem 2022](https://fosdem.org/2022/). certomancer was (of course) featured in the presentation.\nif you want to learn more, or watch the recording, have a look at [the talk page](https://fosdem.org/2022/schedule/event/mockery_of_trust/) for further info. slides are included as well.\n\n\n## features\n\n * certomancer's core apis are stateless: the same request should always return the same result.\n   this property makes it very useful for automated testing.\n   * note that \"the same result\" does not necessarily mean \"byte-for-byte equal\". \n     this is because some signing schemes (like ecdsa) involve random nonces. in addition to that,\n     time is also a factor in certain cases (but certomancer does permit time manipulation).\n * declarative, yaml-based configuration.\n * minimal input validation, so you can generate deliberately broken certificates if you need to.\n * ``requests-mock`` integration.\n * attribute certificate support (`0.7.0` and up)\n * ultra-lightweight wsgi application: the certomancer animator serves crls, ocsp responses, \n   timestamps and more. this component requires werkzeug, and optionally jinja2 for the index view.\n   other than a web server and wsgi application server, there are no application dependencies.\n * plugin framework to support arbitrary certificate / crl extensions and additional services.\n   these plugins are compatible with the wsgi and ``requests-mock`` integrations without\n   additional configuration.\n * certomancer is composable: since the certomancer animator is a bare-bones wsgi application,\n   you can plug it into whatever web application framework you want with minimal overhead.\n   hence, for particularly complicated scenarios where the plugin api or existing integrations aren't\n   sufficient, it is very easy to use certomancer as a library, or wrap it as a component\n   of some other wsgi application.\n * with [pyca/cryptography](https://github.com/pyca/cryptography) installed, certomancer can also\n   output pkcs#12 files if your tests require those.\n * with [python-pkcs11](https://github.com/danni/python-pkcs11) installed, certomancer can write\n   keys and certificates to pkcs#11 tokens as well.\n\n## non-features\n\ncertomancer is a testing tool for developers that write software to interface with public-key\ninfrastructure. **it is *not* intended to be used to manage production pki deployments.**\ncertomancer is very much garbage-in garbage-out, and happily ignores validation & \nsecurity best practices in favour of allowing you to abuse your codebase in the worst possible ways.\nconsider yourself warned.\n\n\n## documentation\n\n * [configuration](docs/config.md)\n * [cli commands](docs/cli.md)\n * [plugin api](docs/plugins.md)\n * [deploying certomancer](docs/deploy.md)\n",
  "docs_url": null,
  "keywords": "pki,testing",
  "license": "mit",
  "name": "certomancer",
  "package_url": "https://pypi.org/project/certomancer/",
  "project_url": "https://pypi.org/project/certomancer/",
  "project_urls": {
    "Homepage": "https://github.com/MatthiasValvekens/certomancer"
  },
  "release_url": "https://pypi.org/project/certomancer/0.11.0/",
  "requires_dist": [
    "asn1crypto (>=1.5.0)",
    "click (>=7.1.2)",
    "oscrypto (>=1.2.1)",
    "pyyaml (>=5.4.1)",
    "python-dateutil (>=2.8.1)",
    "tzlocal (>=2.1)",
    "types-requests ; extra == 'mypy'",
    "types-python-dateutil ; extra == 'mypy'",
    "types-PyYAML ; extra == 'mypy'",
    "types-tzlocal ; extra == 'mypy'",
    "certomancer[testing] ; extra == 'mypy'",
    "python-pkcs11 (~=0.7.0) ; extra == 'pkcs11'",
    "cryptography (>=3.4.7) ; extra == 'pkcs12'",
    "requests-mock (>=1.8.0) ; extra == 'requests-mocker'",
    "pytest (>=6.1.1) ; extra == 'testing'",
    "pytz (>=2020.1) ; extra == 'testing'",
    "freezegun (>=1.1.0) ; extra == 'testing'",
    "pyhanko-certvalidator (==0.22.0) ; extra == 'testing'",
    "requests (>=2.0.0) ; extra == 'testing'",
    "pytest-cov (~=4.0.0) ; extra == 'testing'",
    "certomancer[pkcs11,pkcs12,requests-mocker,web-api] ; extra == 'testing'",
    "Werkzeug (>=2.2.3) ; extra == 'web-api'",
    "Jinja2 (>=2.11.3) ; extra == 'web-api'"
  ],
  "requires_python": "",
  "summary": "pki testing tool",
  "version": "0.11.0",
  "releases": [],
  "developers": [
    "dev@mvalvekens.be"
  ],
  "kwds": "certomancer pki certificate certificates pytest",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_certomancer",
  "homepage": "",
  "release_count": 17,
  "dependency_ids": [
    "pypi_asn1crypto",
    "pypi_certomancer",
    "pypi_click",
    "pypi_cryptography",
    "pypi_freezegun",
    "pypi_jinja2",
    "pypi_oscrypto",
    "pypi_pyhanko_certvalidator",
    "pypi_pytest",
    "pypi_pytest_cov",
    "pypi_python_dateutil",
    "pypi_python_pkcs11",
    "pypi_pytz",
    "pypi_pyyaml",
    "pypi_requests",
    "pypi_requests_mock",
    "pypi_types_python_dateutil",
    "pypi_types_pyyaml",
    "pypi_types_requests",
    "pypi_types_tzlocal",
    "pypi_tzlocal",
    "pypi_werkzeug"
  ]
}
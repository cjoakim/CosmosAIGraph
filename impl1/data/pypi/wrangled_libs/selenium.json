{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: developers",
    "license :: osi approved :: apache software license",
    "operating system :: macos :: macos x",
    "operating system :: microsoft :: windows",
    "operating system :: posix",
    "programming language :: python",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: software development :: libraries",
    "topic :: software development :: testing"
  ],
  "description": "======================\nselenium client driver\n======================\n\nintroduction\n============\n\npython language bindings for selenium webdriver.\n\nthe `selenium` package is used to automate web browser interaction from python.\n\n+-----------------+--------------------------------------------------------------------------------------+\n| **home**:       | https://selenium.dev                                                                 |\n+-----------------+--------------------------------------------------------------------------------------+\n| **github**:     | https://github.com/seleniumhq/selenium                                               |\n+-----------------+--------------------------------------------------------------------------------------+\n| **pypi**:       | https://pypi.org/project/selenium/                                                   |\n+-----------------+--------------------------------------------------------------------------------------+\n| **irc/slack**:  | `selenium chat room <https://www.selenium.dev/support/#chatroom>`_                   |\n+-----------------+--------------------------------------------------------------------------------------+\n\nseveral browsers/drivers are supported (firefox, chrome, internet explorer), as well as the remote protocol.\n\nsupported python versions\n=========================\n\n* python 3.8+\n\ninstalling\n==========\n\nif you have `pip <https://pip.pypa.io/>`_ on your system, you can simply install or upgrade the python bindings::\n\n    pip install -u selenium\n\nalternately, you can download the source distribution from `pypi <https://pypi.org/project/selenium/#files>`, unarchive it, and run::\n\n    python setup.py install\n\nnote: you may want to consider using `virtualenv <http://www.virtualenv.org/>`_ to create isolated python environments.\n\ndrivers\n=======\n\nselenium requires a driver to interface with the chosen browser. firefox,\nfor example, requires `geckodriver <https://github.com/mozilla/geckodriver/releases>`_, which needs to be installed before the below examples can be run. make sure it's in your `path`, e. g., place it in `/usr/bin` or `/usr/local/bin`.\n\nfailure to observe this step will give you an error `selenium.common.exceptions.webdriverexception: message: 'geckodriver' executable needs to be in path.`\n\nother supported browsers will have their own drivers available. links to some of the more popular browser drivers follow.\n\n+--------------+-----------------------------------------------------------------------+\n| **chrome**:  | https://chromedriver.chromium.org/downloads                           |\n+--------------+-----------------------------------------------------------------------+\n| **edge**:    | https://developer.microsoft.com/en-us/microsoft-edge/tools/webdriver/ |\n+--------------+-----------------------------------------------------------------------+\n| **firefox**: | https://github.com/mozilla/geckodriver/releases                       |\n+--------------+-----------------------------------------------------------------------+\n| **safari**:  | https://webkit.org/blog/6900/webdriver-support-in-safari-10/          |\n+--------------+-----------------------------------------------------------------------+\n\nexample 0:\n==========\n\n* open a new firefox browser\n* load the page at the given url\n\n.. code-block:: python\n\n    from selenium import webdriver\n\n    browser = webdriver.firefox()\n    browser.get('http://selenium.dev/')\n\nexample 1:\n==========\n\n* open a new firefox browser\n* load the yahoo homepage\n* search for \"seleniumhq\"\n* close the browser\n\n.. code-block:: python\n\n    from selenium import webdriver\n    from selenium.webdriver.common.by import by\n    from selenium.webdriver.common.keys import keys\n\n    browser = webdriver.firefox()\n\n    browser.get('http://www.yahoo.com')\n    assert 'yahoo' in browser.title\n\n    elem = browser.find_element(by.name, 'p')  # find the search box\n    elem.send_keys('seleniumhq' + keys.return)\n\n    browser.quit()\n\nexample 2:\n==========\n\nselenium webdriver is often used as a basis for testing web applications.  here is a simple example using python's standard `unittest <http://docs.python.org/3/library/unittest.html>`_ library:\n\n.. code-block:: python\n\n    import unittest\n    from selenium import webdriver\n\n    class googletestcase(unittest.testcase):\n\n        def setup(self):\n            self.browser = webdriver.firefox()\n            self.addcleanup(self.browser.quit)\n\n        def test_page_title(self):\n            self.browser.get('http://www.google.com')\n            self.assertin('google', self.browser.title)\n\n    if __name__ == '__main__':\n        unittest.main(verbosity=2)\n\nselenium grid (optional)\n==========================\n\nfor local selenium scripts, the java server is not needed.\n\nto use selenium remotely, you need to also run the selenium grid.\nfor information on running selenium grid: https://www.selenium.dev/documentation/grid/getting_started/\n\nto use remote webdriver see: https://www.selenium.dev/documentation/webdriver/drivers/remote_webdriver/?tab=python\n\nuse the source luke!\n====================\n\nview source code online:\n\n+-----------+------------------------------------------------------+\n| official: | https://github.com/seleniumhq/selenium/tree/trunk/py |\n+-----------+------------------------------------------------------+\n\ncontributing\n=============\n\n - create a branch for your work\n - ensure `tox` is installed (using a `virtualenv` is recommended)\n - `python3.8 -m venv .venv && . .venv/bin/activate && pip install tox`\n - after making changes, before committing execute `tox -e linting`\n - if tox exits `0`, commit and push otherwise fix the newly introduced breakages.\n - `flake8` requires manual fixes\n - `black` will often rewrite the breakages automatically, however the files are unstaged and should staged again.\n - `isort` will often rewrite the breakages automatically, however the files are unstaged and should staged again.\n\n",
  "docs_url": null,
  "keywords": "",
  "license": "apache 2.0",
  "name": "selenium",
  "package_url": "https://pypi.org/project/selenium/",
  "project_url": "https://pypi.org/project/selenium/",
  "project_urls": {
    "Homepage": "https://www.selenium.dev"
  },
  "release_url": "https://pypi.org/project/selenium/4.16.0/",
  "requires_dist": [
    "urllib3[socks]>=1.26,<3",
    "trio~=0.17",
    "trio-websocket~=0.9",
    "certifi>=2021.10.8"
  ],
  "requires_python": ">=3.8",
  "summary": "",
  "version": "4.16.0",
  "releases": [],
  "developers": [],
  "kwds": "webdriver selenium remote_webdriver seleniumhq webdriverexception",
  "license_kwds": "apache 2.0",
  "libtype": "pypi",
  "id": "pypi_selenium",
  "homepage": "https://www.selenium.dev",
  "release_count": 192,
  "dependency_ids": [
    "pypi_certifi",
    "pypi_trio",
    "pypi_trio_websocket",
    "pypi_urllib3"
  ]
}
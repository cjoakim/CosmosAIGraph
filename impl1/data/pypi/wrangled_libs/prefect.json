{
  "classifiers": [
    "intended audience :: developers",
    "intended audience :: system administrators",
    "license :: osi approved :: apache software license",
    "natural language :: english",
    "programming language :: python :: 3 :: only",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: software development :: libraries"
  ],
  "description": "<p align=\"center\"><img src=\"https://github.com/prefecthq/prefect/assets/3407835/c654cbc6-63e8-4ada-a92a-efd2f8f24b85\" width=1000></p>\n\n<p align=\"center\">\n    <a href=\"https://pypi.python.org/pypi/prefect/\" alt=\"pypi version\">\n        <img alt=\"pypi\" src=\"https://img.shields.io/pypi/v/prefect?color=0052ff&labelcolor=090422\"></a>\n    <a href=\"https://github.com/prefecthq/prefect/\" alt=\"stars\">\n        <img src=\"https://img.shields.io/github/stars/prefecthq/prefect?color=0052ff&labelcolor=090422\" /></a>\n    <a href=\"https://pepy.tech/badge/prefect/\" alt=\"downloads\">\n        <img src=\"https://img.shields.io/pypi/dm/prefect?color=0052ff&labelcolor=090422\" /></a>\n    <a href=\"https://github.com/prefecthq/prefect/pulse\" alt=\"activity\">\n        <img src=\"https://img.shields.io/github/commit-activity/m/prefecthq/prefect?color=0052ff&labelcolor=090422\" /></a>\n    <br>\n    <a href=\"https://prefect.io/slack\" alt=\"slack\">\n        <img src=\"https://img.shields.io/badge/slack-join_community-red.svg?color=0052ff&labelcolor=090422&logo=slack\" /></a>\n    <a href=\"https://discourse.prefect.io/\" alt=\"discourse\">\n        <img src=\"https://img.shields.io/badge/discourse-browse_forum-red.svg?color=0052ff&labelcolor=090422&logo=discourse\" /></a>\n    <a href=\"https://www.youtube.com/c/prefectio/\" alt=\"youtube\">\n        <img src=\"https://img.shields.io/badge/youtube-watch_videos-red.svg?color=0052ff&labelcolor=090422&logo=youtube\" /></a>\n</p>\n\n# prefect\n\nprefect is an orchestration and observability platform for building, observing, and triaging workflows. \nit's the simplest way to transform python code into an interactive workflow application.\n\nprefect allows you to expose your workflows through an api so teams dependent on you can programmatically access your pipelines, business logic, and more.\nprefect also allows you to standardize workflow development and deployment across your organization.\n\nwith prefect, you can build resilient, dynamic workflows that react to the world around them and recover from unexpected changes.\nwith just a few decorators, prefect supercharges your code with features like automatic retries, distributed execution, scheduling, caching, and much more.\n\nevery activity is tracked and can be monitored with a self-hosted [prefect server](https://docs.prefect.io/latest/guides/host/) instance or managed [prefect cloud](https://www.prefect.io/cloud-vs-oss?utm_source=oss&utm_medium=oss&utm_campaign=oss_gh_repo&utm_term=none&utm_content=none) dashboard.\n\n## getting started\n\nprefect requires python 3.8 or later. to [install prefect](https://docs.prefect.io/getting-started/installation/), run the following command:\n\n```bash\npip install prefect\n```\n\nthen create a python file the uses prefect `flow` and `task` decorators to orchestrate and observe your workflow that fetches the number of github stars from a repository.\n\n```python\nfrom prefect import flow, task\nfrom typing import list\nimport httpx\n\n\n@task(log_prints=true)\ndef get_stars(repo: str):\n    url = f\"https://api.github.com/repos/{repo}\"\n    count = httpx.get(url).json()[\"stargazers_count\"]\n    print(f\"{repo} has {count} stars!\")\n\n\n@flow(name=\"github stars\")\ndef github_stars(repos: list[str]):\n    for repo in repos:\n        get_stars(repo)\n\n\n# run the flow!\nif __name__==\"__main__\":\n    github_stars([\"prefecthq/prefect\"])\n```\n\nfire up the prefect ui to see what happened:\n\n```bash\nprefect server start\n```\n\n![prefect ui dashboard](/docs/img/ui/cloud-dashboard.png)\n\nto run your workflow on a schedule, turn it into a deployment and schedule it to run every minute by changing the last line of your script to the following:\n\n```python\n    github_stars.serve(name=\"first-deployment\", cron=\"* * * * *\")\n```\n\nyou now have a server running locally that is looking for scheduled deployments!\nadditionally you can run your workflow manually from the ui or cli - and if you're using prefect cloud, you can even run deployments in response to [events](https://docs.prefect.io/latest/concepts/automations/).\n\n## prefect cloud\n\nstop worrying about your workflows.\nprefect cloud allows you to centrally deploy, monitor, and manage the data workflows you support. with managed orchestration, automations, and webhooks, all backed by enterprise-class security, build production-ready code quickly and reliably.\n\nread more about prefect cloud [here](https://www.prefect.io/cloud-vs-oss?utm_source=oss&utm_medium=oss&utm_campaign=oss_gh_repo&utm_term=none&utm_content=none) or sign up to [try it for yourself](https://app.prefect.cloud?utm_source=oss&utm_medium=oss&utm_campaign=oss_gh_repo&utm_term=none&utm_content=none).\n\n![prefect automations](/docs/img/ui/automations.png)\n\n## next steps\n\nthere's lots more you can do to orchestrate and observe your workflows with prefect!\nstart with our [friendly tutorial](https://docs.prefect.io/tutorials) or explore the [core concepts of prefect workflows](https://docs.prefect.io/concepts/).\n\n## join the community\n\nprefect is made possible by the fastest growing community of thousands of friendly data engineers. join us in building a new kind of workflow system. the [prefect slack community](https://prefect.io/slack) is a fantastic place to learn more about prefect, ask questions, or get help with workflow design. all community forums, including code contributions, issue discussions, and slack messages are subject to our [code of conduct](https://discourse.prefect.io/faq).\n\n## contribute\n\nsee our [documentation on contributing to prefect](https://docs.prefect.io/contributing/overview/).\n\nthanks for being part of the mission to build a new kind of workflow system and, of course, **happy engineering!**\n",
  "docs_url": null,
  "keywords": "",
  "license": "",
  "name": "prefect",
  "package_url": "https://pypi.org/project/prefect/",
  "project_url": "https://pypi.org/project/prefect/",
  "project_urls": {
    "Changelog": "https://github.com/PrefectHQ/prefect/blob/main/RELEASE-NOTES.md",
    "Documentation": "https://docs.prefect.io",
    "Homepage": "https://www.prefect.io",
    "Source": "https://github.com/PrefectHQ/prefect",
    "Tracker": "https://github.com/PrefectHQ/prefect/issues"
  },
  "release_url": "https://pypi.org/project/prefect/2.14.12/",
  "requires_dist": [
    "aiosqlite >=0.17.0",
    "alembic <2.0.0,>=1.7.5",
    "apprise <2.0.0,>=1.1.0",
    "asyncpg >=0.23",
    "click <8.2,>=8.0",
    "cryptography >=36.0.1",
    "dateparser <2.0.0,>=1.1.1",
    "docker <7.0,>=4.0",
    "graphviz >=0.20.1",
    "griffe >=0.20.0",
    "jinja2 <4.0.0,>=3.0.0",
    "kubernetes <29.0.0,>=24.2.0",
    "pytz <2024,>=2021.1",
    "readchar <5.0.0,>=4.0.0",
    "sqlalchemy[asyncio] !=1.4.33,<3.0.0,>=1.4.22",
    "typer >=0.4.2",
    "anyio <4.0.0,>=3.7.1",
    "asgi-lifespan <3.0,>=1.0",
    "cachetools <6.0,>=5.3",
    "cloudpickle <4.0,>=2.0",
    "coolname <3.0.0,>=1.0.4",
    "croniter <3.0.0,>=1.0.12",
    "fsspec >=2022.5.0",
    "httpcore <2.0.0,>=0.15.0",
    "httpx[http2] !=0.23.2,>=0.23",
    "jsonpatch <2.0,>=1.32",
    "jsonschema <5.0.0,>=3.2.0",
    "orjson <4.0,>=3.7",
    "packaging <24.3,>=21.3",
    "pathspec >=0.8.0",
    "pendulum <3.0.0,>=2.1.2",
    "pydantic[email] !=2.0.0,!=2.0.1,!=2.1.0,<3.0.0,>=1.10.0",
    "python-dateutil <3.0.0,>=2.8.2",
    "python-slugify <9.0,>=5.0",
    "pyyaml <7.0.0,>=5.4.1",
    "rich <14.0,>=11.0",
    "ruamel.yaml >=0.17.0",
    "sniffio <2.0.0,>=1.3.0",
    "starlette <0.33.0,>=0.27.0",
    "toml >=0.10.0",
    "typing-extensions <5.0.0,>=4.5.0",
    "ujson <6.0.0,>=5.8.0",
    "uvicorn >=0.14.0",
    "websockets <13.0,>=10.4",
    "importlib-metadata >=4.4 ; python_version < \"3.10\"",
    "ruff ; extra == 'dev'",
    "cairosvg ; extra == 'dev'",
    "codespell ; extra == 'dev'",
    "flaky ; extra == 'dev'",
    "jinja2 ; extra == 'dev'",
    "mkdocs ; extra == 'dev'",
    "mkdocs-gen-files ; extra == 'dev'",
    "mkdocs-material ; extra == 'dev'",
    "mkdocstrings-python ; extra == 'dev'",
    "mike ; extra == 'dev'",
    "moto ; extra == 'dev'",
    "mypy ; extra == 'dev'",
    "numpy ; extra == 'dev'",
    "pillow ; extra == 'dev'",
    "pre-commit ; extra == 'dev'",
    "pytest >7 ; extra == 'dev'",
    "pytest-asyncio !=0.22.0,<0.23.0,>=0.18.2 ; extra == 'dev'",
    "pytest-cov ; extra == 'dev'",
    "pytest-benchmark ; extra == 'dev'",
    "pytest-env ; extra == 'dev'",
    "pytest-flakefinder ; extra == 'dev'",
    "pytest-timeout ; extra == 'dev'",
    "pytest-xdist <3.4.0 ; extra == 'dev'",
    "pytkdocs >=0.14.2 ; extra == 'dev'",
    "pyyaml ; extra == 'dev'",
    "requests ; extra == 'dev'",
    "virtualenv ; extra == 'dev'",
    "watchfiles ; extra == 'dev'",
    "respx ; extra == 'dev'",
    "mock ; (python_version < \"3.8\") and extra == 'dev'",
    "setuptools !=60.9.0 ; (python_version < \"3.8\") and extra == 'dev'",
    "ipython ==8.12.* ; (python_version == \"3.8\") and extra == 'dev'",
    "ipython ; (python_version > \"3.8\") and extra == 'dev'"
  ],
  "requires_python": ">=3.8",
  "summary": "workflow orchestration and management.",
  "version": "2.14.12",
  "releases": [],
  "developers": [
    "help@prefect.io",
    "prefect_technologies"
  ],
  "kwds": "pypi github_stars get_stars png stargazers_count",
  "license_kwds": "",
  "libtype": "pypi",
  "id": "pypi_prefect",
  "homepage": "https://www.prefect.io",
  "release_count": 250,
  "dependency_ids": [
    "pypi_aiosqlite",
    "pypi_alembic",
    "pypi_anyio",
    "pypi_apprise",
    "pypi_asgi_lifespan",
    "pypi_asyncpg",
    "pypi_cachetools",
    "pypi_cairosvg",
    "pypi_click",
    "pypi_cloudpickle",
    "pypi_codespell",
    "pypi_coolname",
    "pypi_croniter",
    "pypi_cryptography",
    "pypi_dateparser",
    "pypi_docker",
    "pypi_flaky",
    "pypi_fsspec",
    "pypi_graphviz",
    "pypi_griffe",
    "pypi_httpcore",
    "pypi_httpx",
    "pypi_importlib_metadata",
    "pypi_ipython",
    "pypi_jinja2",
    "pypi_jsonpatch",
    "pypi_jsonschema",
    "pypi_kubernetes",
    "pypi_mike",
    "pypi_mkdocs",
    "pypi_mkdocs_gen_files",
    "pypi_mkdocs_material",
    "pypi_mkdocstrings_python",
    "pypi_mock",
    "pypi_moto",
    "pypi_mypy",
    "pypi_numpy",
    "pypi_orjson",
    "pypi_packaging",
    "pypi_pathspec",
    "pypi_pendulum",
    "pypi_pillow",
    "pypi_pre_commit",
    "pypi_pydantic",
    "pypi_pytest",
    "pypi_pytest_asyncio",
    "pypi_pytest_benchmark",
    "pypi_pytest_cov",
    "pypi_pytest_env",
    "pypi_pytest_flakefinder",
    "pypi_pytest_timeout",
    "pypi_pytest_xdist",
    "pypi_python_dateutil",
    "pypi_python_slugify",
    "pypi_pytkdocs",
    "pypi_pytz",
    "pypi_pyyaml",
    "pypi_readchar",
    "pypi_requests",
    "pypi_respx",
    "pypi_rich",
    "pypi_ruamel.yaml",
    "pypi_ruff",
    "pypi_setuptools",
    "pypi_sniffio",
    "pypi_sqlalchemy",
    "pypi_starlette",
    "pypi_toml",
    "pypi_typer",
    "pypi_typing_extensions",
    "pypi_ujson",
    "pypi_uvicorn",
    "pypi_virtualenv",
    "pypi_watchfiles",
    "pypi_websockets"
  ]
}
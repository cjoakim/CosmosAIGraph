{
  "classifiers": [
    "development status :: 4 - beta",
    "intended audience :: developers",
    "intended audience :: science/research",
    "license :: osi approved :: gnu general public license v3 (gplv3)",
    "operating system :: os independent",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: scientific/engineering",
    "topic :: text processing"
  ],
  "description": "# charcut\ncharacter-based mt evaluation and difference highlighting\n\ncharcut compares outputs of mt systems with reference translations. it can compare multiple file pairs simultaneously and produce html outputs showing character-based differences along with scores that are directly inferred from the lengths of those differences, thus making the link between evaluation and visualisation straightforward.\n\nthe matching algorithm is based on an iterative search for longest common substrings, combined with a length-based threshold that limits short and noisy character matches. as a similarity metric this is not new, but to the best of our knowledge it was never applied to highlighting and scoring of mt outputs. it has the neat effect of keeping character-based differences readable by humans.\n\naccidentally, the scores inferred from those differences correlate very well with human judgments, similarly to other great character-based metrics like [chrf(++)](https://github.com/m-popovic/chrf) or [character](https://github.com/rwth-i6/character). it was evaluated here:\n> adrien lardilleux and yves lepage: \"charcut: human-targeted character-based mt evaluation with loose differences\". in [proceedings of iwslt 2017](http://workshop2017.iwslt.org/64.php).\n\nit is intended to be lightweight and easy to use, so the html outputs are, and will be kept, slick on purpose.\n\nnote (bram vanroy): the remainder of this readme has been changed to reflect the changes i have made to make the package more usable from a python package perspective,\ne.g., by using hypotheses/references directly without files. \n\n## installation\n\n```shell\npip install charcut\n```\n\nthis will install the command `calculate-charcut`.\n\n\nbasic usage:\n```shell\ncalculate-charcut cand.txt,ref.txt\n```\nwhere `cand.txt` and `ref.txt` contain corresponding candidate (mt) and reference (human) segments, 1 per line. multiple file pairs can be specified on the command line: candidates with references, candidates with other candidates, etc.\nby default, only document-level scores are displayed on standard output. to produce an html output file, use the `-o` option:\n\n```shell\ncalculate-charcut cand.txt,ref.txt -o mydiff.html\n```\n\na few more options are available; call\n```shell\ncalculate-charcut -h\n```\nto list them.\n\nconsider lowering the `-m` option value (minimum match size) for non-alphabetical writing systems such as chinese or japanese. the default value (3 characters) should be acceptable for most european languages, but depending on the language and data, larger values might produce better looking results.\n\n## modifications by bram vanroy\n\nbram vanroy made some changes to this package that do not affect the result of the metric but that should improve usability. he also packaged the library for pip and added some tests to ensure the same results with the original library. code has been rewritten to make it easier to use from within python without the need of files as input. in python, the following entry point now exists:\n\n```python\ndef calculate_charcut(\n    hyps: union[str, list[str]],\n    refs: union[str, list[str]],\n    html_output_file: str = none,\n    plain_output_file: str = none,\n    src_file: str = none,\n    match_size: int = 3,\n    alt_norm: bool = false,\n    verbose: bool = false\n) -> tuple[float, int]:\n```\n\nwhere `hyps` and `refs` are indiviual sentences `str` or a list of sentences `list[str]`. this function has the same capabilities and arguments as the command-line script that is available (discussed above). this command line script is now available as an installed entry point rather than a separate python script. you can call that from the command line with `calculate-charcut`.\n\n## license\n\n[gplv3](license)\n",
  "docs_url": null,
  "keywords": "machine-translation machine-translation-evaluation evaluation mt",
  "license": "gplv3",
  "name": "charcut",
  "package_url": "https://pypi.org/project/charcut/",
  "project_url": "https://pypi.org/project/charcut/",
  "project_urls": {
    "Homepage": "https://github.com/BramVanroy/CharCut",
    "Issue tracker": "https://github.com/BramVanroy/CharCut/issues",
    "Source": "https://github.com/BramVanroy/CharCut"
  },
  "release_url": "https://pypi.org/project/charcut/1.1.1/",
  "requires_dist": [
    "isort (>=5.5.4) ; extra == 'dev'",
    "black ; extra == 'dev'",
    "flake8 ; extra == 'dev'",
    "pytest ; extra == 'dev'"
  ],
  "requires_python": ">=3.7",
  "summary": "character-based mt evaluation and difference highlighting",
  "version": "1.1.1",
  "releases": [],
  "developers": [
    "bramvanroy@hotmail.com",
    "lardilleux"
  ],
  "kwds": "similarity charcut characters matching translations",
  "license_kwds": "gplv3",
  "libtype": "pypi",
  "id": "pypi_charcut",
  "homepage": "https://github.com/bramvanroy/charcut",
  "release_count": 2,
  "dependency_ids": [
    "pypi_black",
    "pypi_flake8",
    "pypi_isort",
    "pypi_pytest"
  ]
}
{
  "classifiers": [
    "development status :: 5 - production/stable",
    "license :: osi approved :: mit license",
    "operating system :: os independent",
    "programming language :: python :: 3",
    "topic :: software development :: libraries :: python modules"
  ],
  "description": "[![pypi version](https://badge.fury.io/py/sodapy.svg)](http://badge.fury.io/py/sodapy) [![build status](https://travis-ci.com/xmunoz/sodapy.svg?branch=master)](https://travis-ci.com/xmunoz/sodapy) [![code coverage](https://codecov.io/github/xmunoz/sodapy/coverage.svg?branch=master)](https://codecov.io/github/xmunoz/sodapy)\n\n# sodapy - unmaintained\n\n:rotating_light: notice: sodapy still works well, but is unmaintained as of aug 31, 2022. no new features or bugfixes will be added. use at your own risk.\n\nsodapy is a python client for the [socrata open data api](https://dev.socrata.com/).\n\n## installation\nyou can install with `pip install sodapy`.\n\nif you want to install from source, then clone this repository and run `python setup.py install` from the project root.\n\n## requirements\n\nat its core, this library depends heavily on the [requests](http://docs.python-requests.org/en/latest/) package. all other requirements can be found in [requirements.txt](https://github.com/xmunoz/sodapy/blob/master/requirements.txt). `sodapy` is currently compatible with python 3.5, 3.6, 3.7, 3.8, 3.9, and 3.10.\n\n## documentation\n\nthe [official socrata open data api docs](http://dev.socrata.com/) provide thorough documentation of the available methods, as well as [other client libraries](https://dev.socrata.com/libraries/). a quick list of eligible domains to use with this api is available via the [socrata discovery api](https://socratadiscovery.docs.apiary.io/#reference/0/count-by-domain/count-by-domain?console=1) or [socrata's open data network](https://www.opendatanetwork.com/).\n\nthis library supports writing directly to datasets with the socrata open data api. for write operations that use data transformations in the socrata data management experience (the user interface for creating datasets), use the socrata data management api. for more details on when to use soda vs the data management api, see the [data management api documentation](https://socratapublishing.docs.apiary.io/#). a python sdk for the socrata data management api can be found at [socrata-py](https://github.com/socrata/socrata-py).\n\n## examples\n\nthere are some [jupyter](https://jupyter.org/) notebooks in the [examples directory](examples) with usage examples of sodapy in action.\n\n## interface\n\n### table of contents\n\n- [client](#client)\n- [`datasets`](#datasetslimit0-offset0)\n- [`get`](#getdataset_identifier-content_typejson-kwargs)\n- [`get_all`](#get_alldataset_identifier-content_typejson-kwargs)\n- [`get_metadata`](#get_metadatadataset_identifier-content_typejson)\n- [`update_metadata`](#update_metadatadataset_identifier-update_fields-content_typejson)\n- [`download_attachments`](#download_attachmentsdataset_identifier-content_typejson-download_dirsodapy_downloads)\n- [`create`](#createname-kwargs)\n- [`publish`](#publishdataset_identifier-content_typejson)\n- [`set_permission`](#set_permissiondataset_identifier-permissionprivate-content_typejson)\n- [`upsert`](#upsertdataset_identifier-payload-content_typejson)\n- [`replace`](#replacedataset_identifier-payload-content_typejson)\n- [`create_non_data_file`](#create_non_data_fileparams-file_obj)\n- [`replace_non_data_file`](#replace_non_data_filedataset_identifier-params-file_obj)\n- [`delete`](#deletedataset_identifier-row_idnone-content_typejson)\n- [`close`](#close)\n\n### client\n\nimport the library and set up a connection to get started.\n\n    >>> from sodapy import socrata\n    >>> client = socrata(\n            \"sandbox.demo.socrata.com\",\n            \"fakeapptoken\",\n            username=\"fakeuser@somedomain.com\",\n            password=\"mypassword\",\n            timeout=10\n        )\n\n`username` and `password` are only required for creating or modifying data. an application token isn't strictly required (can be `none`), but queries executed from a client without an application token will be subjected to strict throttling limits. you may want to increase the `timeout` seconds when making large requests. to create a bare-bones client:\n\n    >>> client = socrata(\"sandbox.demo.socrata.com\", none)\n\na client can also be created with a context manager to obviate the need for teardown:\n\n    >>> with socrata(\"sandbox.demo.socrata.com\", none) as client:\n    >>>    # do some stuff\n\nthe client, by default, makes requests over https. to modify this behavior, or to make requests through a proxy, take a look [here](https://github.com/xmunoz/sodapy/issues/31#issuecomment-302176628).\n\n### datasets(limit=0, offset=0)\n\nretrieve datasets associated with a particular domain. the optional `limit` and `offset` keyword args can be used to retrieve a subset of the datasets. by default, all datasets are returned.\n\n    >>> client.datasets()\n    [{\"resource\" : {\"name\" : \"approved building permits\", \"id\" : \"msk6-43c6\", \"parent_fxf\" : null, \"description\" : \"data of approved building/construction permits\",...}, {resource : {...}}, ...]\n\n### get(dataset_identifier, content_type=\"json\", **kwargs)\n\nretrieve data from the requested resources. filter and query data by field name, id, or using [soql keywords](https://dev.socrata.com/docs/queries/).\n\n    >>> client.get(\"nimj-3ivp\", limit=2)\n\t[{u'geolocation': {u'latitude': u'41.1085', u'needs_recoding': false, u'longitude': u'-117.6135'}, u'version': u'9', u'source': u'nn', u'region': u'nevada', u'occurred_at': u'2012-09-14t22:38:01', u'number_of_stations': u'15', u'depth': u'7.60', u'magnitude': u'2.7', u'earthquake_id': u'00388610'}, {...}]\n\n\t>>> client.get(\"nimj-3ivp\", where=\"depth > 300\", order=\"magnitude desc\", exclude_system_fields=false)\n\t[{u'geolocation': {u'latitude': u'-15.563', u'needs_recoding': false, u'longitude': u'-175.6104'}, u'version': u'9', u':updated_at': 1348778988, u'number_of_stations': u'275', u'region': u'tonga', u':created_meta': u'21484', u'occurred_at': u'2012-09-13t21:16:43', u':id': 132, u'source': u'us', u'depth': u'328.30', u'magnitude': u'4.8', u':meta': u'{\\n}', u':updated_meta': u'21484', u'earthquake_id': u'c000cnb5', u':created_at': 1348778988}, {...}]\n\n    >>> client.get(\"nimj-3ivp/193\", exclude_system_fields=false)\n    {u'geolocation': {u'latitude': u'21.6711', u'needs_recoding': false, u'longitude': u'142.9236'}, u'version': u'c', u':updated_at': 1348778988, u'number_of_stations': u'136', u'region': u'mariana islands region', u':created_meta': u'21484', u'occurred_at': u'2012-09-13t11:19:07', u':id': 193, u'source': u'us', u'depth': u'300.70', u'magnitude': u'4.4', u':meta': u'{\\n}', u':updated_meta': u'21484', u':position': 193, u'earthquake_id': u'c000cmsq', u':created_at': 1348778988}\n\n    >>> client.get(\"nimj-3ivp\", region=\"kansas\")\n\t[{u'geolocation': {u'latitude': u'38.10', u'needs_recoding': false, u'longitude': u'-100.6135'}, u'version': u'9', u'source': u'nn', u'region': u'kansas', u'occurred_at': u'2010-09-19t20:52:09', u'number_of_stations': u'15', u'depth': u'300.0', u'magnitude': u'1.9', u'earthquake_id': u'00189621'}, {...}]\n\n### get_all(dataset_identifier, content_type=\"json\", **kwargs)\n\nread data from the requested resource, paginating over all results. accepts the same arguments as [`get()`](#getdataset_identifier-content_typejson-kwargs). returns a generator.\n\n    >>> client.get_all(\"nimj-3ivp\")\n\t<generator object socrata.get_all at 0x7fa0dc8be7b0>\n\n    >>> for item in client.get_all(\"nimj-3ivp\"):\n\t...     print(item)\n    ...\n    {'geolocation': {'latitude': '-15.563', 'needs_recoding': false, 'longitude': '-175.6104'}, 'version': '9', ':updated_at': 1348778988, 'number_of_stations': '275', 'region': 'tonga', ':created_meta': '21484', 'occurred_at': '2012-09-13t21:16:43', ':id': 132, 'source': 'us', 'depth': '328.30', 'magnitude': '4.8', ':meta': '{\\n}', ':updated_meta': '21484', 'earthquake_id': 'c000cnb5', ':created_at': 1348778988}\n    ...\n\n    >>> import itertools\n    >>> items = client.get_all(\"nimj-3ivp\")\n    >>> first_five = list(itertools.islice(items, 5))\n    >>> len(first_five)\n    5\n\n### get_metadata(dataset_identifier, content_type=\"json\")\n\nretrieve the metadata associated with a particular dataset.\n\n    >>> client.get_metadata(\"nimj-3ivp\")\n    {\"newbackend\": false, \"licenseid\": \"cc0_10\", \"publicationdate\": 1436655117, \"viewlastmodified\": 1451289003, \"owner\": {\"rolename\": \"administrator\", \"rights\": [], \"displayname\": \"brett\", \"id\": \"cdqe-xcn5\", \"screenname\": \"brett\"}, \"query\": {}, \"id\": \"songs\", \"createdat\": 1398014181, \"category\": \"public safety\", \"publicationappendenabled\": true, \"publicationstage\": \"published\", \"rowsupdatedby\": \"cdqe-xcn5\", \"publicationgroup\": 1552205, \"displaytype\": \"table\", \"state\": \"normal\", \"attributionlink\": \"http://foo.bar.com\", \"tableid\": 3523378, \"columns\": [], \"metadata\": {\"rdfsubject\": \"0\", \"rendertypeconfig\": {\"visible\": {\"table\": true}}, \"availabledisplaytypes\": [\"table\", \"fatrow\", \"page\"], \"attachments\": ... }}\n\n### update_metadata(dataset_identifier, update_fields, content_type=\"json\")\n\nupdate the metadata for a particular dataset. `update_fields` should be a dictionary containing only the metadata keys that you wish to overwrite.\n\nnote: invalid payloads to this method could corrupt the dataset or visualization. see [this comment](https://github.com/xmunoz/sodapy/issues/22#issuecomment-249971379) for more information.\n\n    >>> client.update_metadata(\"nimj-3ivp\", {\"attributionlink\": \"https://anothertest.com\"})\n    {\"newbackend\": false, \"licenseid\": \"cc0_10\", \"publicationdate\": 1436655117, \"viewlastmodified\": 1451289003, \"owner\": {\"rolename\": \"administrator\", \"rights\": [], \"displayname\": \"brett\", \"id\": \"cdqe-xcn5\", \"screenname\": \"brett\"}, \"query\": {}, \"id\": \"songs\", \"createdat\": 1398014181, \"category\": \"public safety\", \"publicationappendenabled\": true, \"publicationstage\": \"published\", \"rowsupdatedby\": \"cdqe-xcn5\", \"publicationgroup\": 1552205, \"displaytype\": \"table\", \"state\": \"normal\", \"attributionlink\": \"https://anothertest.com\", \"tableid\": 3523378, \"columns\": [], \"metadata\": {\"rdfsubject\": \"0\", \"rendertypeconfig\": {\"visible\": {\"table\": true}}, \"availabledisplaytypes\": [\"table\", \"fatrow\", \"page\"], \"attachments\": ... }}\n\n### download_attachments(dataset_identifier, content_type=\"json\", download_dir=\"~/sodapy_downloads\")\n\ndownload all attachments associated with a dataset. return a list of paths to the downloaded files.\n\n    >>> client.download_attachments(\"nimj-3ivp\", download_dir=\"~/desktop\")\n        ['/users/xmunoz/desktop/nimj-3ivp/fireincident_codes.pdf', '/users/xmunoz/desktop/nimj-3ivp/accidentreport.jpg']\n\n### create(name, **kwargs)\n\ncreate a new dataset. optionally, specify keyword args such as:\n\n- `description` description of the dataset\n- `columns` list of fields\n- `category` dataset category (must exist in /admin/metadata)\n- `tags` list of tag strings\n- `row_identifier` field name of primary key\n- `new_backend` whether to create the dataset in the new backend\n\nexample usage:\n\n\t>>> columns = [{\"fieldname\": \"delegation\", \"name\": \"delegation\", \"datatypename\": \"text\"}, {\"fieldname\": \"members\", \"name\": \"members\", \"datatypename\": \"number\"}]\n\t>>> tags = [\"politics\", \"geography\"]\n\t>>> client.create(\"delegates\", description=\"list of delegates\", columns=columns, row_identifier=\"delegation\", tags=tags, category=\"transparency\")\n\t{u'id': u'2frc-hyvj', u'name': u'foo bar', u'description': u'test dataset', u'publicationstage': u'unpublished', u'columns': [ { u'name': u'foo', u'datatypename': u'text', u'fieldname': u'foo', ... }, { u'name': u'bar', u'datatypename': u'number', u'fieldname': u'bar', ... } ], u'metadata': { u'rowidentifier': 230641051 }, ... }\n\n### publish(dataset_identifier, content_type=\"json\")\n\npublish a dataset after creating it, i.e. take it out of 'working copy' mode. the dataset id `id` returned from `create` will be used to publish.\n\n\t>>> client.publish(\"2frc-hyvj\")\n\t{u'id': u'2frc-hyvj', u'name': u'foo bar', u'description': u'test dataset', u'publicationstage': u'unpublished', u'columns': [ { u'name': u'foo', u'datatypename': u'text', u'fieldname': u'foo', ... }, { u'name': u'bar', u'datatypename': u'number', u'fieldname': u'bar', ... } ], u'metadata': { u'rowidentifier': 230641051 }, ... }\n\n### set_permission(dataset_identifier, permission=\"private\", content_type=\"json\")\n\nset the permissions of a dataset to public or private.\n\n\t>>> client.set_permission(\"2frc-hyvj\", \"public\")\n\t<response [200]>\n\n### upsert(dataset_identifier, payload, content_type=\"json\")\n\ncreate a new row in an existing dataset.\n\n    >>> data = [{'delegation': 'aju', 'name': 'alaska', 'key': 'al', 'entity': 'juneau'}]\n    >>> client.upsert(\"eb9n-hr43\", data)\n\t{u'errors': 0, u'rows deleted': 0, u'rows updated': 0, u'by sid': 0, u'rows created': 1, u'by rowidentifier': 0}\n\nupdate/delete rows in a dataset.\n\n    >>> data = [{'delegation': 'sfa', ':id': 8, 'name': 'bar', 'key': 'doo', 'entity': 'dsfsd'}, {':id': 7, ':deleted': true}]\n\t>>> client.upsert(\"eb9n-hr43\", data)\n\t{u'errors': 0, u'rows deleted': 1, u'rows updated': 1, u'by sid': 2, u'rows created': 0, u'by rowidentifier': 0}\n\n`upsert`'s can even be performed with a csv file.\n\n\t>>> data = open(\"upsert_test.csv\")\n\t>>> client.upsert(\"eb9n-hr43\", data)\n\t{u'errors': 0, u'rows deleted': 0, u'rows updated': 1, u'by sid': 1, u'rows created': 0, u'by rowidentifier': 0}\n\n### replace(dataset_identifier, payload, content_type=\"json\")\n\nsimilar in usage to `upsert`, but overwrites existing data.\n\n\t>>> data = open(\"replace_test.csv\")\n\t>>> client.replace(\"eb9n-hr43\", data)\n\t{u'errors': 0, u'rows deleted': 0, u'rows updated': 0, u'by sid': 0, u'rows created': 12, u'by rowidentifier': 0}\n\n### create_non_data_file(params, file_obj)\n\ncreates a new file-based dataset with the name provided in the files\ntuple.  a valid file input would be:\n\n```\nfiles = (\n    {'file': (\"gtfs2\", open('myfile.zip', 'rb'))}\n)\n```\n\n    >>> with open(nondatafile_path, 'rb') as f:\n    >>>     files = (\n    >>>         {'file': (\"nondatafile.zip\", f)}\n    >>>     )\n    >>>     response = client.create_non_data_file(params, files)\n\n### replace_non_data_file(dataset_identifier, params, file_obj)\n\nsame as create_non_data_file, but replaces a file that already exists in a\nfile-based dataset.  \n\nnote: a table-based dataset cannot be replaced by a file-based dataset. use create_non_data_file in order to replace.\n\n    >>>  with open(nondatafile_path, 'rb') as f:\n    >>>      files = (\n    >>>          {'file': (\"nondatafile.zip\", f)}\n    >>>      )\n    >>>      response = client.replace_non_data_file(dataset_identifier, {}, files)\n\n\n### delete(dataset_identifier, row_id=none, content_type=\"json\")\n\ndelete an individual row.\n\n\t>>> client.delete(\"nimj-3ivp\", row_id=2)\n\t<response [200]>\n\ndelete the entire dataset.\n\n\t>>> client.delete(\"nimj-3ivp\")\n\t<response [200]>\n\n### close()\n\nclose the session when you're finished.\n\n\t>>> client.close()\n\n## run tests\n\n    $ pytest\n\n## contributing\n\nsee [contributing.md](https://github.com/xmunoz/sodapy/blob/master/contributing.md).\n\n## meta\n\nthis package uses [semantic versioning](https://semver.org/).\n\nsource and wheel distributions are available on pypi. here is how i create those releases.\n\n    python3 setup.py bdist_wheel\n    python3 setup.py sdist\n    twine upload dist/*\n\n\n",
  "docs_url": "https://pythonhosted.org/sodapy/",
  "keywords": "soda socrata opendata api",
  "license": "mit",
  "name": "sodapy",
  "package_url": "https://pypi.org/project/sodapy/",
  "project_url": "https://pypi.org/project/sodapy/",
  "project_urls": {
    "Download": "https://github.com/xmunoz/sodapy/archive/master.tar.gz",
    "Homepage": "https://github.com/xmunoz/sodapy"
  },
  "release_url": "https://pypi.org/project/sodapy/2.2.0/",
  "requires_dist": [
    "requests (>=2.28.1)"
  ],
  "requires_python": "",
  "summary": "python library for the socrata open data api",
  "version": "2.2.0",
  "releases": [],
  "developers": [
    "hi@xmunoz.com"
  ],
  "kwds": "sodapy_downloads sodapy python3 soda python",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_sodapy",
  "homepage": "https://github.com/xmunoz/sodapy",
  "release_count": 28,
  "dependency_ids": [
    "pypi_requests"
  ]
}
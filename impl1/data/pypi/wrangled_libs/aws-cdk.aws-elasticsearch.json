{
  "classifiers": [
    "development status :: 7 - inactive",
    "framework :: aws cdk",
    "framework :: aws cdk :: 1",
    "intended audience :: developers",
    "license :: osi approved",
    "operating system :: os independent",
    "programming language :: javascript",
    "programming language :: python :: 3 :: only",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "typing :: typed"
  ],
  "description": "# amazon opensearch service construct library\n\n<!--begin stability banner-->---\n\n\n![deprecated](https://img.shields.io/badge/deprecated-critical.svg?style=for-the-badge)\n\n> this api may emit warnings. backward compatibility is not guaranteed.\n\n---\n<!--end stability banner-->\n\n> instead of this module, we recommend using the [@aws-cdk/aws-opensearchservice](https://docs.aws.amazon.com/cdk/api/latest/docs/aws-opensearchservice-readme.html) module. see [amazon opensearch service faqs](https://aws.amazon.com/opensearch-service/faqs/#name_change) for details. see [migrating to opensearch](#migrating-to-opensearch) for migration instructions.\n\n## quick start\n\ncreate a development cluster by simply specifying the version:\n\n```python\ndev_domain = es.domain(self, \"domain\",\n    version=es.elasticsearchversion.v7_1\n)\n```\n\nto perform version upgrades without replacing the entire domain, specify the `enableversionupgrade` property.\n\n```python\ndev_domain = es.domain(self, \"domain\",\n    version=es.elasticsearchversion.v7_10,\n    enable_version_upgrade=true\n)\n```\n\ncreate a production grade cluster by also specifying things like capacity and az distribution\n\n```python\nprod_domain = es.domain(self, \"domain\",\n    version=es.elasticsearchversion.v7_1,\n    capacity=es.capacityconfig(\n        master_nodes=5,\n        data_nodes=20\n    ),\n    ebs=es.ebsoptions(\n        volume_size=20\n    ),\n    zone_awareness=es.zoneawarenessconfig(\n        availability_zone_count=3\n    ),\n    logging=es.loggingoptions(\n        slow_search_log_enabled=true,\n        app_log_enabled=true,\n        slow_index_log_enabled=true\n    )\n)\n```\n\nthis creates an elasticsearch cluster and automatically sets up log groups for\nlogging the domain logs and slow search logs.\n\n## a note about slr\n\nsome cluster configurations (e.g vpc access) require the existence of the [`awsserviceroleforamazonelasticsearchservice`](https://docs.aws.amazon.com/opensearch-service/latest/developerguide/slr.html) service-linked role.\n\nwhen performing such operations via the aws console, this slr is created automatically when needed. however, this is not the behavior when using cloudformation. if an slr is needed, but doesn't exist, you will encounter a failure message simlar to:\n\n```console\nbefore you can proceed, you must enable a service-linked role to give amazon es...\n```\n\nto resolve this, you need to [create](https://docs.aws.amazon.com/iam/latest/userguide/using-service-linked-roles.html#create-service-linked-role) the slr. we recommend using the aws cli:\n\n```console\naws iam create-service-linked-role --aws-service-name es.amazonaws.com\n```\n\nyou can also create it using the cdk, **but note that only the first application deploying this will succeed**:\n\n```python\nslr = iam.cfnservicelinkedrole(self, \"elasticslr\",\n    aws_service_name=\"es.amazonaws.com\"\n)\n```\n\n## importing existing domains\n\nto import an existing domain into your cdk application, use the `domain.fromdomainendpoint` factory method.\nthis method accepts a domain endpoint of an already existing domain:\n\n```python\ndomain_endpoint = \"https://my-domain-jcjotrt6f7otem4sqcwbch3c4u.us-east-1.es.amazonaws.com\"\ndomain = es.domain.from_domain_endpoint(self, \"importeddomain\", domain_endpoint)\n```\n\n## permissions\n\n### iam\n\nhelper methods also exist for managing access to the domain.\n\n```python\n# fn: lambda.function\n# domain: es.domain\n\n\n# grant write access to the app-search index\ndomain.grant_index_write(\"app-search\", fn)\n\n# grant read access to the 'app-search/_search' path\ndomain.grant_path_read(\"app-search/_search\", fn)\n```\n\n## encryption\n\nthe domain can also be created with encryption enabled:\n\n```python\ndomain = es.domain(self, \"domain\",\n    version=es.elasticsearchversion.v7_4,\n    ebs=es.ebsoptions(\n        volume_size=100,\n        volume_type=ec2.ebsdevicevolumetype.general_purpose_ssd\n    ),\n    node_to_node_encryption=true,\n    encryption_at_rest=es.encryptionatrestoptions(\n        enabled=true\n    )\n)\n```\n\nthis sets up the domain with node to node encryption and encryption at\nrest. you can also choose to supply your own kms key to use for encryption at\nrest.\n\n## vpc support\n\nelasticsearch domains can be placed inside a vpc, providing a secure communication between amazon es and other services within the vpc without the need for an internet gateway, nat device, or vpn connection.\n\n> see [launching your amazon opensearch service domains within a vpc](https://docs.aws.amazon.com/opensearch-service/latest/developerguide/vpc.html) for more details.\n\n```python\nvpc = ec2.vpc(self, \"vpc\")\ndomain_props = es.domainprops(\n    version=es.elasticsearchversion.v7_1,\n    removal_policy=removalpolicy.destroy,\n    vpc=vpc,\n    # must be enabled since our vpc contains multiple private subnets.\n    zone_awareness=es.zoneawarenessconfig(\n        enabled=true\n    ),\n    capacity=es.capacityconfig(\n        # must be an even number since the default az count is 2.\n        data_nodes=2\n    )\n)\nes.domain(self, \"domain\", domain_props)\n```\n\nin addition, you can use the `vpcsubnets` property to control which specific subnets will be used, and the `securitygroups` property to control\nwhich security groups will be attached to the domain. by default, cdk will select all *private* subnets in the vpc, and create one dedicated security group.\n\n## metrics\n\nhelper methods exist to access common domain metrics for example:\n\n```python\n# domain: es.domain\n\nfree_storage_space = domain.metric_free_storage_space()\nmaster_sys_memory_utilization = domain.metric(\"mastersysmemoryutilization\")\n```\n\nthis module is part of the [aws cloud development kit](https://github.com/aws/aws-cdk) project.\n\n## fine grained access control\n\nthe domain can also be created with a master user configured. the password can\nbe supplied or dynamically created if not supplied.\n\n```python\ndomain = es.domain(self, \"domain\",\n    version=es.elasticsearchversion.v7_1,\n    enforce_https=true,\n    node_to_node_encryption=true,\n    encryption_at_rest=es.encryptionatrestoptions(\n        enabled=true\n    ),\n    fine_grained_access_control=es.advancedsecurityoptions(\n        master_user_name=\"master-user\"\n    )\n)\n\nmaster_user_password = domain.master_user_password\n```\n\n## using unsigned basic auth\n\nfor convenience, the domain can be configured to allow unsigned http requests\nthat use basic auth. unless the domain is configured to be part of a vpc this\nmeans anyone can access the domain using the configured master username and\npassword.\n\nto enable unsigned basic auth access the domain is configured with an access\npolicy that allows anyonmous requests, https required, node to node encryption,\nencryption at rest and fine grained access control.\n\nif the above settings are not set they will be configured as part of enabling\nunsigned basic auth. if they are set with conflicting values, an error will be\nthrown.\n\nif no master user is configured a default master user is created with the\nusername `admin`.\n\nif no password is configured a default master user password is created and\nstored in the aws secrets manager as secret. the secret has the prefix\n`<domain id>masteruser`.\n\n```python\ndomain = es.domain(self, \"domain\",\n    version=es.elasticsearchversion.v7_1,\n    use_unsigned_basic_auth=true\n)\n\nmaster_user_password = domain.master_user_password\n```\n\n## custom access policies\n\nif the domain requires custom access control it can be configured either as a\nconstructor property, or later by means of a helper method.\n\nfor simple permissions the `accesspolicies` constructor may be sufficient:\n\n```python\ndomain = es.domain(self, \"domain\",\n    version=es.elasticsearchversion.v7_1,\n    access_policies=[\n        iam.policystatement(\n            actions=[\"es:*eshttppost\", \"es:eshttpput*\"],\n            effect=iam.effect.allow,\n            principals=[iam.accountprincipal(\"123456789012\")],\n            resources=[\"*\"]\n        )\n    ]\n)\n```\n\nfor more complex use-cases, for example, to set the domain up to receive data from a\n[cross-account kinesis firehose](https://aws.amazon.com/premiumsupport/knowledge-center/kinesis-firehose-cross-account-streaming/) the `addaccesspolicies` helper method\nallows for policies that include the explicit domain arn.\n\n```python\ndomain = es.domain(self, \"domain\",\n    version=es.elasticsearchversion.v7_1\n)\n\ndomain.add_access_policies(\n    iam.policystatement(\n        actions=[\"es:eshttppost\", \"es:eshttpput\"],\n        effect=iam.effect.allow,\n        principals=[iam.accountprincipal(\"123456789012\")],\n        resources=[domain.domain_arn, f\"{domain.domainarn}/*\"]\n    ),\n    iam.policystatement(\n        actions=[\"es:eshttpget\"],\n        effect=iam.effect.allow,\n        principals=[iam.accountprincipal(\"123456789012\")],\n        resources=[f\"{domain.domainarn}/_all/_settings\", f\"{domain.domainarn}/_cluster/stats\", f\"{domain.domainarn}/index-name*/_mapping/type-name\", f\"{domain.domainarn}/roletest*/_mapping/roletest\", f\"{domain.domainarn}/_nodes\", f\"{domain.domainarn}/_nodes/stats\", f\"{domain.domainarn}/_nodes/*/stats\", f\"{domain.domainarn}/_stats\", f\"{domain.domainarn}/index-name*/_stats\", f\"{domain.domainarn}/roletest*/_stat\"\n        ]\n    ))\n```\n\n## audit logs\n\naudit logs can be enabled for a domain, but only when fine-grained access control is enabled.\n\n```python\ndomain = es.domain(self, \"domain\",\n    version=es.elasticsearchversion.v7_1,\n    enforce_https=true,\n    node_to_node_encryption=true,\n    encryption_at_rest=es.encryptionatrestoptions(\n        enabled=true\n    ),\n    fine_grained_access_control=es.advancedsecurityoptions(\n        master_user_name=\"master-user\"\n    ),\n    logging=es.loggingoptions(\n        audit_log_enabled=true,\n        slow_search_log_enabled=true,\n        app_log_enabled=true,\n        slow_index_log_enabled=true\n    )\n)\n```\n\n## ultrawarm\n\nultrawarm nodes can be enabled to provide a cost-effective way to store large amounts of read-only data.\n\n```python\ndomain = es.domain(self, \"domain\",\n    version=es.elasticsearchversion.v7_10,\n    capacity=es.capacityconfig(\n        master_nodes=2,\n        warm_nodes=2,\n        warm_instance_type=\"ultrawarm1.medium.elasticsearch\"\n    )\n)\n```\n\n## custom endpoint\n\ncustom endpoints can be configured to reach the es domain under a custom domain name.\n\n```python\nes.domain(self, \"domain\",\n    version=es.elasticsearchversion.v7_7,\n    custom_endpoint=es.customendpointoptions(\n        domain_name=\"search.example.com\"\n    )\n)\n```\n\nit is also possible to specify a custom certificate instead of the auto-generated one.\n\nadditionally, an automatic cname-record is created if a hosted zone is provided for the custom endpoint\n\n## advanced options\n\n[advanced cluster settings](https://docs.aws.amazon.com/opensearch-service/latest/developerguide/createupdatedomains.html#createdomain-configure-advanced-options) can used to configure additional options.\n\n```python\nes.domain(self, \"domain\",\n    version=es.elasticsearchversion.v7_7,\n    advanced_options={\n        \"rest.action.multi.allow_explicit_index\": \"false\",\n        \"indices.fielddata.cache.size\": \"25\",\n        \"indices.query.bool.max_clause_count\": \"2048\"\n    }\n)\n```\n\n## migrating to opensearch\n\nto migrate from this module (`@aws-cdk/aws-elasticsearch`) to the new `@aws-cdk/aws-opensearchservice` module, you must modify your cdk application to refer to the new module (including some associated changes) and then perform a cloudformation resource deletion/import.\n\n### necessary cdk modifications\n\nmake the following modifications to your cdk application to migrate to the `@aws-cdk/aws-opensearchservice` module.\n\n* rewrite module imports to use `'@aws-cdk/aws-opensearchservice` to `'@aws-cdk/aws-elasticsearch`.\n  for example:\n\n  ```python\n  import aws_cdk.aws_elasticsearch as es\n  from aws_cdk.aws_elasticsearch import domain\n  ```\n\n  ...becomes...\n\n  ```python\n  import aws_cdk.aws_opensearchservice as opensearch\n  from aws_cdk.aws_opensearchservice import domain\n  ```\n* replace instances of `es.elasticsearchversion` with `opensearch.engineversion`.\n  for example:\n\n  ```python\n  version = es.elasticsearchversion.v7_1\n  ```\n\n  ...becomes...\n\n  ```python\n  version = opensearch.engineversion.elasticsearch_7_1\n  ```\n* replace the `cognitokibanaauth` property of `domainprops` with `cognitodashboardsauth`.\n  for example:\n\n  ```python\n  es.domain(self, \"domain\",\n      cognito_kibana_auth=es.cognitooptions(\n          identity_pool_id=\"test-identity-pool-id\",\n          user_pool_id=\"test-user-pool-id\",\n          role=role\n      ),\n      version=elasticsearch_version\n  )\n  ```\n\n  ...becomes...\n\n  ```python\n  opensearch.domain(self, \"domain\",\n      cognito_dashboards_auth=opensearch.cognitooptions(\n          identity_pool_id=\"test-identity-pool-id\",\n          user_pool_id=\"test-user-pool-id\",\n          role=role\n      ),\n      version=open_search_version\n  )\n  ```\n* rewrite instance type suffixes from `.elasticsearch` to `.search`.\n  for example:\n\n  ```python\n  es.domain(self, \"domain\",\n      capacity=es.capacityconfig(\n          master_node_instance_type=\"r5.large.elasticsearch\"\n      ),\n      version=elasticsearch_version\n  )\n  ```\n\n  ...becomes...\n\n  ```python\n  opensearch.domain(self, \"domain\",\n      capacity=opensearch.capacityconfig(\n          master_node_instance_type=\"r5.large.search\"\n      ),\n      version=open_search_version\n  )\n  ```\n* any `cfninclude`'d domains will need to be re-written in their original template in\n  order to be successfully included as a `opensearch.cfndomain`\n\n### cloudformation migration\n\nfollow these steps to migrate your application without data loss:\n\n* ensure that the [removal policy](https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_core.removalpolicy.html) on your domains are set to `removalpolicy.retain`. this is the default for the domain construct, so nothing is required unless you have specifically set the removal policy to some other value.\n* remove the domain resource from your cloudformation stacks by manually modifying the synthesized templates used to create the cloudformation stacks. this may also involve modifying or deleting dependent resources, such as the custom resources that cdk creates to manage the domain's access policy or any other resource you have connected to the domain. you will need to search for references to each domain's logical id to determine which other resources refer to it and replace or delete those references. do not remove resources that are dependencies of the domain or you will have to recreate or import them before importing the domain. after modification, deploy the stacks through the aws management console or using the aws cli.\n* migrate your cdk application to use the new `@aws-cdk/aws-opensearchservice` module by applying the necessary modifications listed above. synthesize your application and obtain the resulting stack templates.\n* copy just the definition of the domain from the \"migrated\" templates to the corresponding \"stripped\" templates that you deployed above. [import](https://docs.aws.amazon.com/awscloudformation/latest/userguide/resource-import-existing-stack.html) the orphaned domains into your cloudformation stacks using these templates.\n* synthesize and deploy your cdk application to reconfigure/recreate the modified dependent resources. the cloudformation stacks should now contain the same resources as existed prior to migration.\n* proceed with development as normal!\n",
  "docs_url": null,
  "keywords": "",
  "license": "apache-2.0",
  "name": "aws-cdk.aws-elasticsearch",
  "package_url": "https://pypi.org/project/aws-cdk.aws-elasticsearch/",
  "project_url": "https://pypi.org/project/aws-cdk.aws-elasticsearch/",
  "project_urls": {
    "Homepage": "https://github.com/aws/aws-cdk",
    "Source": "https://github.com/aws/aws-cdk.git"
  },
  "release_url": "https://pypi.org/project/aws-cdk.aws-elasticsearch/1.204.0/",
  "requires_dist": [
    "aws-cdk.aws-certificatemanager (==1.204.0)",
    "aws-cdk.aws-cloudwatch (==1.204.0)",
    "aws-cdk.aws-ec2 (==1.204.0)",
    "aws-cdk.aws-iam (==1.204.0)",
    "aws-cdk.aws-kms (==1.204.0)",
    "aws-cdk.aws-logs (==1.204.0)",
    "aws-cdk.aws-route53 (==1.204.0)",
    "aws-cdk.aws-secretsmanager (==1.204.0)",
    "aws-cdk.core (==1.204.0)",
    "aws-cdk.custom-resources (==1.204.0)",
    "constructs (<4.0.0,>=3.3.69)",
    "jsii (<2.0.0,>=1.84.0)",
    "publication (>=0.0.3)",
    "typeguard (~=2.13.3)"
  ],
  "requires_python": "~=3.7",
  "summary": "the cdk construct library for aws::elasticsearch",
  "version": "1.204.0",
  "releases": [],
  "developers": [
    "amazon_web_services"
  ],
  "kwds": "aws_opensearchservice opensearchservice aws_elasticsearch opensearch elasticsearch_7_1",
  "license_kwds": "apache-2.0",
  "libtype": "pypi",
  "id": "pypi_aws_cdk.aws_elasticsearch",
  "homepage": "https://github.com/aws/aws-cdk",
  "release_count": 258,
  "dependency_ids": [
    "pypi_aws_cdk.aws_certificatemanager",
    "pypi_aws_cdk.aws_cloudwatch",
    "pypi_aws_cdk.aws_ec2",
    "pypi_aws_cdk.aws_iam",
    "pypi_aws_cdk.aws_kms",
    "pypi_aws_cdk.aws_logs",
    "pypi_aws_cdk.aws_route53",
    "pypi_aws_cdk.aws_secretsmanager",
    "pypi_aws_cdk.core",
    "pypi_aws_cdk.custom_resources",
    "pypi_constructs",
    "pypi_jsii",
    "pypi_publication",
    "pypi_typeguard"
  ]
}
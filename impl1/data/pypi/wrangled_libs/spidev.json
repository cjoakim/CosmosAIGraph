{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "operating system :: posix :: linux",
    "programming language :: python :: 2.6",
    "programming language :: python :: 2.7",
    "programming language :: python :: 3",
    "topic :: software development",
    "topic :: system :: hardware",
    "topic :: system :: hardware :: hardware drivers"
  ],
  "description": "python spidev\n=============\n\nthis project contains a python module for interfacing with spi devices from user space via the spidev linux kernel driver.\n\nall code is mit licensed unless explicitly stated otherwise.\n\nusage\n-----\n\n```python\nimport spidev\nspi = spidev.spidev()\nspi.open(bus, device)\nto_send = [0x01, 0x02, 0x03]\nspi.xfer(to_send)\n```\nsettings\n--------\n\n```python\nimport spidev\nspi = spidev.spidev()\nspi.open(bus, device)\n\n# settings (for example)\nspi.max_speed_hz = 5000\nspi.mode = 0b01\n\n...\n```\n\n* `bits_per_word`\n* `cshigh`\n* `loop` - set the \"spi_loop\" flag to enable loopback mode\n* `no_cs` - set the \"spi_no_cs\" flag to disable use of the chip select (although the driver may still own the cs pin)\n* `lsbfirst`\n* `max_speed_hz`\n* `mode` - spi mode as two bit pattern of clock polarity and phase [cpol|cpha], min: 0b00 = 0, max: 0b11 = 3\n* `threewire` - si/so signals shared\n* `read0` - read 0 bytes after transfer to lower cs if cshigh == true\n\nmethods\n-------\n\n    open(bus, device)\n\nconnects to the specified spi device, opening `/dev/spidev<bus>.<device>`\n\n    readbytes(n)\n\nread n bytes from spi device.\n\n    writebytes(list of values)\n\nwrites a list of values to spi device.\n\n    writebytes2(list of values)\n\nsimilar to `writebytes` but accepts arbitrary large lists.\nif list size exceeds buffer size (which is read from `/sys/module/spidev/parameters/bufsiz`),\ndata will be split into smaller chunks and sent in multiple operations.\n\nalso, `writebytes2` understands [buffer protocol](https://docs.python.org/3/c-api/buffer.html)\nso it can accept numpy byte arrays for example without need to convert them with `tolist()` first.\nthis offers much better performance where you need to transfer frames to spi-connected displays for instance.\n\n    xfer(list of values[, speed_hz, delay_usec, bits_per_word])\n\nperforms an spi transaction. chip-select should be released and reactivated between blocks.\ndelay specifies the delay in usec between blocks.\n\n    xfer2(list of values[, speed_hz, delay_usec, bits_per_word])\n\nperforms an spi transaction. chip-select should be held active between blocks.\n\n    xfer3(list of values[, speed_hz, delay_usec, bits_per_word])\n\nsimilar to `xfer2` but accepts arbitrary large lists.\nif list size exceeds buffer size (which is read from `/sys/module/spidev/parameters/bufsiz`),\ndata will be split into smaller chunks and sent in multiple operations.\n\n    close()\n\ndisconnects from the spi device.\n\nchangelog\n---------\n\n3.6\n====\n\n* added read0 flag to enable reading 0 bytes after transfer to lower cs when cshigh == true\n\n3.5\n====\n\n* fixed memory leaks\n\n3.4\n=====\n\n* changed license to mit\n\n3.0.1\n=====\n\n* fixed readme.md and changelog.md formatting, hopefully\n\n3.0\n===\n\n* memset fix recommended by dougie lawson\n* fixes for kernel 3.15+ from https://github.com/chrillomat/py-spidev\n* fixes for python 3/2 compatibility.\n* added subclassing support - https://github.com/doceme/py-spidev/issues/10\n\n2.0\n===\n\ncode sourced from http://elk.informatik.fh-augsburg.de/da/da-49/trees/pyap7k/lang/py-spi\nand modified.\n\npre 2.0\n=======\n\nspimodule.c originally uathored by volker thoms, 2009.\n\n\n",
  "docs_url": null,
  "keywords": "",
  "license": "mit",
  "name": "spidev",
  "package_url": "https://pypi.org/project/spidev/",
  "project_url": "https://pypi.org/project/spidev/",
  "project_urls": {
    "Homepage": "http://github.com/doceme/py-spidev"
  },
  "release_url": "https://pypi.org/project/spidev/3.6/",
  "requires_dist": [],
  "requires_python": "",
  "summary": "python bindings for linux spi access through spidev",
  "version": "3.6",
  "releases": [],
  "developers": [
    "scaudle@doceme.com",
    "stephen_caudle",
    "unconnected@gmx.de",
    "volker_thoms"
  ],
  "kwds": "spi_loop spi_no_cs spi spidev max_speed_hz",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_spidev",
  "homepage": "http://github.com/doceme/py-spidev",
  "release_count": 7,
  "dependency_ids": []
}
{
  "classifiers": [
    "development status :: 5 - production/stable",
    "environment :: console",
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "operating system :: macos",
    "operating system :: microsoft :: windows",
    "operating system :: posix :: linux",
    "operating system :: unix",
    "programming language :: python",
    "programming language :: python :: 3",
    "programming language :: python :: 3 :: only",
    "topic :: utilities"
  ],
  "description": ".. image:: https://api.cirrus-ci.com/github/pyscaffold/pyscaffold.svg?branch=master\n    :alt: built status\n    :target: https://cirrus-ci.com/github/pyscaffold/pyscaffold\n.. image:: https://readthedocs.org/projects/pyscaffold/badge/?version=latest\n    :alt: readthedocs\n    :target: https://pyscaffold.org/en/latest\n.. image:: https://img.shields.io/coveralls/github/pyscaffold/pyscaffold/master.svg\n    :alt: coveralls\n    :target: https://coveralls.io/r/pyscaffold/pyscaffold\n.. image:: https://img.shields.io/pypi/v/pyscaffold.svg\n    :alt: pypi-server\n    :target: https://pypi.org/project/pyscaffold/\n.. image:: https://img.shields.io/conda/vn/conda-forge/pyscaffold.svg\n    :alt: conda-forge\n    :target: https://anaconda.org/conda-forge/pyscaffold\n.. image:: https://pepy.tech/badge/pyscaffold/month\n    :alt: monthly downloads\n    :target: https://pepy.tech/project/pyscaffold\n.. image:: https://img.shields.io/static/v1?label=sponsor&message=%e2%9d%a4&logo=github&color=ff69b4\n    :alt: sponsor me\n    :target: https://github.com/sponsors/florianwilhelm\n.. image:: https://img.shields.io/twitter/url/http/shields.io.svg?style=social&label=twitter\n    :alt: twitter\n    :target: https://twitter.com/pyscaffold\n.. image:: https://img.shields.io/badge/-pyscaffold?style=social&logo=pyscaffold&logocolor=005ca0&label=pyscaffold\n    :alt: pyscaffold\n    :target: https://pyscaffold.org/\n\n|\n\n.. image:: https://pyscaffold.org/en/latest/_images/logo.png\n    :height: 512px\n    :width: 512px\n    :scale: 60 %\n    :alt: pyscaffold logo\n    :align: center\n\n|\n\npyscaffold is a project generator for bootstrapping high quality python\npackages, ready to be shared on pypi_ and installable via pip_.\nit is easy to use and encourages the adoption of the best tools and\npractices of the python ecosystem, helping you and your team\nto stay sane, happy and productive. the best part? it is stable and has been used\nby thousands of developers for over half a decade!\n\ncheckout out `this demo project`_, which was set up using pyscaffold and\nif you are still not convinced yet, also have a look at these `reasons to use pyscaffold`_.\n\n\n    **note** - this document refers to the latest version of pyscaffold (v4).\n    please refer to `v3.3`_ for the previous stable version.\n\n\nquickstart\n==========\n\njust pick your favourite installation method::\n\n    ## good old pip\n    # (make sure it is up-to-date: pip install -u pip setuptools)\n    pip install pyscaffold\n\n    ## conda for the datascience fans\n    conda install -c conda-forge pyscaffold\n\n    ## or even pipx for the virtualenv aficionados\n    pipx install pyscaffold\n\nif you want to install all pyscaffold's *extensions* you can even::\n\n    pip install pyscaffold[all]\n\n(more details of each method are available in the `installation docs`_)\n\nafter the installation, a new ``putup`` command will be available and you can just type::\n\n    putup my_project\n\nthis will create a new folder called ``my_project`` containing a perfect *project\ntemplate* with everything you need for some serious coding.\n\nafter ``cd``-ing into your new project and creating (or activating) an `isolated\ndevelopment environment`_ (with virtualenv_, conda_ or your preferred tool),\nyou can do the usual `editable install`_::\n\n    pip install -e .\n\n\u2026 all set and ready to go!\n\nwe also recommend using tox_, so you can take advantage of the automation tasks\nwe have setup for you, like::\n\n   tox -e build  # to build your package distribution\n   tox -e publish  # to test your project uploads correctly in test.pypi.org\n   tox -e publish -- --repository pypi  # to release your package to pypi\n   tox -av  # to list all the tasks available\n\nthe following figure demonstrates the usage of ``putup`` with the new experimental\ninteractive mode for setting up a simple project.\nit uses the `--cirrus` flag to add ci support (via `cirrus ci`_), and\ntox_ to run automated project tasks like building a package file for\ndistribution (or publishing).\n\n.. image:: https://pyscaffold.org/en/latest/_images/demo.gif\n    :alt: creating a simple package with pyscaffold\n    :target: https://asciinema.org/a/qzh5zykl1q5xyenm4cht04hdw?autoplay=1\n\ntype ``putup -h`` to learn about more configuration options. pyscaffold assumes\nthat you have git_ installed and set up on your pc,\nmeaning at least your name and email are configured.\n\nthe project template provides you with following features:\n\n\nconfiguration & packaging\n=========================\n\nall configuration can be done in ``setup.cfg`` like changing the description,\nurl, classifiers, installation requirements and so on as defined by setuptools_.\nthat means in most cases it is not necessary to tamper with ``setup.py``.\n\nin order to build a source or wheel distribution, just run ``tox -e build``\n(if you don't use tox_, you can also install ``build`` and run ``python -m build``).\n\n.. rubric:: package and files data\n\nadditional data, e.g. images and text files, that reside within your package and\nare tracked by git will automatically be included\nif ``include_package_data = true`` in ``setup.cfg``.\nit is not necessary to have a ``manifest.in`` file for this to work.\n\nnote that the ``include_package_data`` option in ``setup.cfg`` is only\nguaranteed to be read when creating a `wheels`_ distribution. other distribution methods might\nbehave unexpectedly (e.g. always including data files even when\n``include_package_data = false``). therefore, the best option if you want to have\ndata files in your repository **but not as part of the pip installable package**\nis to add them somewhere **outside** the ``src`` directory (e.g. a ``files``\ndirectory in the root of the project, or inside ``tests`` if you use them for\nchecks). additionally you can exclude them explicitly via the\n``[options.packages.find] exclude`` option in ``setup.cfg``.\n\n\nversioning and git integration\n==============================\n\nyour project is an already initialised git repository and uses\nthe information of tags to infer the version of your project with the help of\nsetuptools_scm_.\nto use this feature, you need to tag with the format ``major.minor[.patch]``\n, e.g. ``0.0.1`` or ``0.1``.\nthis version will be used when building a package and is also accessible\nthrough ``my_project.__version__``.\n\nunleash the power of git by using its `pre-commit hooks`_. this feature is\navailable through the ``--pre-commit`` flag. after your project's scaffold\nwas generated, make sure pre-commit is installed, e.g. ``pip install pre-commit``,\nthen just run ``pre-commit install``.\n\na default ``.gitignore`` file is also provided; it is\nwell adjusted for python projects and the most common tools.\n\n\nsphinx documentation\n====================\n\npyscaffold will prepare a `docs` directory with all you need to start writing\nyour documentation.\nstart editing the file ``docs/index.rst`` to extend the documentation.\nthe documentation also works with `read the docs`_.\n\nthe `numpy and google style docstrings`_ are activated by default.\n\nif you have `tox`_ in your system, simply run ``tox -e docs`` or ``tox -e\ndoctests`` to compile the docs or run the doctests.\n\nalternatively, if you have `make`_ and `sphinx`_ installed in your computer, build the\ndocumentation with ``make -c docs html`` and run doctests with\n``make -c docs doctest``. just make sure sphinx 1.3 or above is installed.\n\n\nautomation, tests & coverage\n============================\n\npyscaffold relies on `pytest`_ to run all automated tests defined in the subfolder\n``tests``.  some sane default flags for pytest are already defined in the\n``[tool:pytest]`` section of ``setup.cfg``. the pytest plugin `pytest-cov`_ is used\nto automatically generate a coverage report. it is also possible to provide\nadditional parameters and flags on the commandline, e.g., type::\n\n    pytest -h\n\nto show the help of pytest (requires `pytest`_ to be installed in your system\nor virtualenv).\n\nprojects generated with pyscaffold by default support running tests via `tox`_,\na virtualenv management and test tool, which is very handy. if you run::\n\n    tox\n\nin the root of your project, `tox`_ will download its dependencies, build the\npackage, install it in a virtualenv and run the tests using `pytest`_, so you\nare sure everything is properly tested.\n\n\n.. rubric:: junit and coverage html/xml\n\nfor usage with a continuous integration software junit and coverage xml output\ncan be activated in ``setup.cfg``. use the flag ``--cirrus`` to generate\ntemplates of the `cirrus ci`_ configuration file ``.cirrus.yml`` which even\nfeatures the coverage and stats system `coveralls`_.\n\n\nmanagement of requirements & licenses\n=====================================\n\ninstallation requirements of your project can be defined inside ``setup.cfg``,\ne.g. ``install_requires = numpy; scipy``. to avoid package dependency problems\nit is common to not pin installation requirements to any specific version,\nalthough minimum versions, e.g. ``sphinx>=1.3``, and/or maximum versions, e.g.\n``pandas<0.12``, are used frequently in accordance with `semantic versioning`_.\n\nall licenses from `choosealicense.com`_ can be easily selected with the help\nof the ``--license`` flag.\n\n\nextensions\n==========\n\npyscaffold comes with several extensions:\n\n* if you want a project setup for a *data science* task, just use ``--dsproject``\n  after having installed `pyscaffoldext-dsproject`_.\n\n* have a ``readme.md`` based on markdown instead of ``readme.rst`` by using\n  ``--markdown`` after having installed `pyscaffoldext-markdown`_.\n\n* create a `django project`_ with the flag ``--django`` which is equivalent to\n  ``django-admin startproject my_project`` enhanced by pyscaffold's features\n  (requires `pyscaffoldext-django`_).\n\n* \u2026 and many more like ``--gitlab`` to create the necessary files for gitlab_,\n  ``--travis`` for `travis ci`_ (see `pyscaffoldext-travis`_), or\n  ``--cookiecutter`` for cookiecutter_ integration (see `pyscaffoldext-cookiecutter`_).\n\nfind more extensions within the `pyscaffold organisation`_ and consider contributing your own,\nit is very easy! you can quickly generate a template for your extension with the\n``--custom-extension`` option after having installed `pyscaffoldext-custom-extension`_.\n\nall extensions can easily be installed with ``pip install pyscaffoldext-name``.\n\neasy updating\n=============\n\nkeep your project's scaffold up-to-date by applying\n``putup --update my_project`` when a new version of pyscaffold was released.\nan update will only overwrite files that are not often altered by users like\n``setup.py``. to update all files use ``--update --force``.\nan existing project that was not setup with pyscaffold can be converted with\n``putup --force existing_project``. the force option is completely safe to use\nsince the git repository of the existing project is not touched!\n\n\n.. _v3.3: https://pyscaffold.org/en/v3.3.x/\n.. _pypi: https://pypi.org/\n.. _pip: https://pip.pypa.io/en/stable/\n.. _this demo project: https://github.com/pyscaffold/pyscaffold-demo\n.. _reasons to use pyscaffold: https://pyscaffold.org/en/latest/reasons.html\n.. _installation docs: https://pyscaffold.org/en/latest/install.html\n.. _isolated development environment: https://realpython.com/python-virtual-environments-a-primer/\n.. also good, but sometimes medium can get on the way: https://towardsdatascience.com/virtual-environments-104c62d48c54\n.. _virtualenv: https://virtualenv.pypa.io/en/stable/\n.. _conda: https://docs.conda.io/en/latest/\n.. _editable install: https://pip.pypa.io/en/stable/cli/pip_install/#editable-installs\n.. _setuptools: https://setuptools.pypa.io/en/stable/userguide/declarative_config.html\n.. _setuptools_scm: https://pypi.org/project/setuptools-scm/\n.. _semantic versioning: https://semver.org\n.. _git: https://git-scm.com/\n.. _pep440: https://www.python.org/dev/peps/pep-0440/\n.. _pre-commit hooks: https://pre-commit.com/\n.. _make: https://www.gnu.org/software/make/\n.. _sphinx: https://www.sphinx-doc.org/en/master/\n.. _read the docs: https://readthedocs.org/\n.. _numpy and google style docstrings: https://www.sphinx-doc.org/en/master/usage/extensions/napoleon.html\n.. _pytest: https://docs.pytest.org/en/stable/\n.. _pytest-cov: https://github.com/pytest-dev/pytest-cov\n.. _cirrus ci: https://cirrus-ci.org/\n.. _travis ci: https://travis-ci.org/\n.. _coveralls: https://coveralls.io/\n.. _tox: https://tox.wiki/en/stable/\n.. _choosealicense.com: https://choosealicense.com/\n.. _django project: https://www.djangoproject.com/\n.. _cookiecutter: https://cookiecutter.readthedocs.io/en/stable/\n.. _gitlab: https://about.gitlab.com/\n.. _pip-tools: https://github.com/jazzband/pip-tools/\n.. _pyscaffoldext-dsproject: https://github.com/pyscaffold/pyscaffoldext-dsproject\n.. _pyscaffoldext-custom-extension: https://github.com/pyscaffold/pyscaffoldext-custom-extension\n.. _pyscaffoldext-markdown: https://github.com/pyscaffold/pyscaffoldext-markdown\n.. _pyscaffoldext-django: https://github.com/pyscaffold/pyscaffoldext-django\n.. _pyscaffoldext-cookiecutter: https://github.com/pyscaffold/pyscaffoldext-cookiecutter\n.. _pyscaffoldext-travis: https://github.com/pyscaffold/pyscaffoldext-travis\n.. _pyscaffold organisation: https://github.com/pyscaffold/\n.. _wheels: https://realpython.com/python-wheels/\n",
  "docs_url": null,
  "keywords": "",
  "license": "mit",
  "name": "pyscaffold",
  "package_url": "https://pypi.org/project/PyScaffold/",
  "project_url": "https://pypi.org/project/PyScaffold/",
  "project_urls": {
    "Changelog": "https://pyscaffold.org/en/latest/changelog.html",
    "Conda-Forge": "https://anaconda.org/conda-forge/pyscaffold",
    "Documentation": "https://pyscaffold.org/",
    "Download": "https://pypi.org/project/PyScaffold/#files",
    "Homepage": "https://github.com/pyscaffold/pyscaffold/",
    "Source": "https://github.com/pyscaffold/pyscaffold/",
    "Tracker": "https://github.com/pyscaffold/pyscaffold/issues",
    "Twitter": "https://twitter.com/PyScaffold"
  },
  "release_url": "https://pypi.org/project/PyScaffold/4.5/",
  "requires_dist": [
    "platformdirs (<4,>=2)",
    "configupdater (<4,>=3.0)",
    "setuptools (>=46.1.0)",
    "setuptools-scm (>=5)",
    "tomlkit (<2,>=0.7.0)",
    "packaging (>=20.7)",
    "importlib-metadata ; python_version < \"3.8\"",
    "colorama (>=0.4.4) ; sys_platform == \"win32\"",
    "pyscaffoldext-markdown (>=0.4) ; extra == 'all'",
    "pyscaffoldext-custom-extension (>=0.6) ; extra == 'all'",
    "pyscaffoldext-dsproject (>=0.5) ; extra == 'all'",
    "pyscaffoldext-django (>=0.1.1) ; extra == 'all'",
    "pyscaffoldext-cookiecutter (>=0.1) ; extra == 'all'",
    "pyscaffoldext-travis (>=0.3) ; extra == 'all'",
    "virtualenv ; extra == 'all'",
    "pre-commit ; extra == 'all'",
    "pyscaffoldext-dsproject (>=0.5) ; extra == 'ds'",
    "pyscaffoldext-markdown (>=0.4) ; extra == 'md'",
    "setuptools ; extra == 'testing'",
    "setuptools-scm[toml] ; extra == 'testing'",
    "wheel ; extra == 'testing'",
    "build ; extra == 'testing'",
    "tomlkit ; extra == 'testing'",
    "certifi ; extra == 'testing'",
    "tox ; extra == 'testing'",
    "pre-commit ; extra == 'testing'",
    "sphinx ; extra == 'testing'",
    "flake8 ; extra == 'testing'",
    "virtualenv ; extra == 'testing'",
    "pytest ; extra == 'testing'",
    "pytest-cov ; extra == 'testing'",
    "pytest-xdist ; extra == 'testing'",
    "pytest-randomly ; extra == 'testing'"
  ],
  "requires_python": ">=3.6",
  "summary": "template tool for putting up the scaffold of a python project",
  "version": "4.5",
  "releases": [],
  "developers": [
    "florian.wilhelm@gmail.com",
    "florian_wilhelm"
  ],
  "kwds": "_pyscaffoldext pyscaffoldext pyscaffold _pyscaffold pypi_",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_pyscaffold",
  "homepage": "https://github.com/pyscaffold/pyscaffold/",
  "release_count": 178,
  "dependency_ids": [
    "pypi_build",
    "pypi_certifi",
    "pypi_colorama",
    "pypi_configupdater",
    "pypi_flake8",
    "pypi_importlib_metadata",
    "pypi_packaging",
    "pypi_platformdirs",
    "pypi_pre_commit",
    "pypi_pyscaffoldext_cookiecutter",
    "pypi_pyscaffoldext_custom_extension",
    "pypi_pyscaffoldext_django",
    "pypi_pyscaffoldext_dsproject",
    "pypi_pyscaffoldext_markdown",
    "pypi_pyscaffoldext_travis",
    "pypi_pytest",
    "pypi_pytest_cov",
    "pypi_pytest_randomly",
    "pypi_pytest_xdist",
    "pypi_setuptools",
    "pypi_setuptools_scm",
    "pypi_sphinx",
    "pypi_tomlkit",
    "pypi_tox",
    "pypi_virtualenv",
    "pypi_wheel"
  ]
}
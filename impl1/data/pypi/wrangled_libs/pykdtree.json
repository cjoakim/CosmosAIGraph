{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: science/research",
    "license :: osi approved :: gnu lesser general public license v3 (lgplv3)",
    "operating system :: os independent",
    "programming language :: python",
    "topic :: scientific/engineering"
  ],
  "description": ".. image:: https://github.com/storpipfugl/pykdtree/actions/workflows/deploy-wheels.yml/badge.svg?branch=master\n    :target: https://github.com/storpipfugl/pykdtree/actions/workflows/deploy-wheels.yml\n\n========\npykdtree\n========\n\nobjective\n---------\npykdtree is a kd-tree implementation for fast nearest neighbour search in python.\nthe aim is to be the fastest implementation around for common use cases (low dimensions and low number of neighbours) for both tree construction and queries.\n\nthe implementation is based on scipy.spatial.ckdtree and libann by combining the best features from both and focus on implementation efficiency.\n\nthe interface is similar to that of scipy.spatial.ckdtree except only euclidean distance measure is supported.\n\nqueries are optionally multithreaded using openmp.\n\ninstallation\n------------\n\npykdtree can be installed via pip:\n\n.. code-block:: bash\n\n    pip install pykdtree\n    \nor, if in a conda-based environment, with conda from the conda-forge channel:\n\n.. code-block:: bash\n\n    conda install -c conda-forge pykdtree\n    \nnote that by default these packages (the binary wheels on pypi and the binary\npackage on conda-forge) are only built with openmp for linux platforms.\nto attempt to build from source with openmp support do:\n\n.. code-block:: bash\n\n    export use_omp=\"probe\"\n    pip install --no-binary pykdtree pykdtree\n    \nthis may not work on some systems that don't have openmp installed. see the below development\ninstructions for more guidance. disabling openmp can be accomplished by setting `use_omp` to ``\"0\"``\nin the above commands.\n\ndevelopment installation\n------------------------\n\nif you wish to contribute to pykdtree then it is a good idea to install from source\nso you can quickly see the effects of your changes.\nby default pykdtree is built with openmp enabled queries on unix-like systems.\non linux this is done using libgomp. on osx systems openmp is provided using the\nclang compiler (conda environments use a separate compiler).\n\n.. code-block:: bash\n\n    $ cd <pykdtree_dir>\n    $ pip install -e .\n\nthis installs pykdtree in an \"editable\" mode where changes to the python files\nare automatically reflected when running a new python interpreter instance\n(ex. running a python script that uses pykdtree). it does not automatically rebuild\nor recompile the `.mako` templates and `.pyx` cython code in pykdtree. editing\nthese files requires running the `pykdtree/render_template.py` script and then\nrerunning the pip command above to recompile the cython files.\n\nif installation fails with undefined compiler flags or you want to use another openmp\nimplementation you may need to modify setup.py or specify additional pip command line\nflags to match the library locations on your system.\n\nbuilding without openmp support is controlled by the use_omp environment variable\n\n.. code-block:: bash\n\n    $ cd <pykdtree_dir>\n    $ export use_omp=0\n    $ pip install -e .\n\nnote evironment variables are by default not exported when using sudo so in this case do\n\n.. code-block:: bash\n\n    $ use_omp=0 sudo -e pip install -e .\n\n\ncontrol openmp usage\n^^^^^^^^^^^^^^^^^^^^\n\nthe ``use_omp`` variable can be set to one of a couple different options. if\nset to ``\"probe\"``, the installation process (``setup.py``) will attempt to\ndetermine what variant of openmp is available based on the compiler being used,\nthe platform being run on, and the python environment being run with. it will\nthen use the flags specified by one of the other ``use_omp`` modes. note that\nin the case of macos, it will also try to identify if openmp is available from\nmacports or homebrew and include the necessary include and library paths.\n\nif set to ``\"gcc\"`` or ``\"gomp\"`` then compiler and linking flags will be set\nappropriately for \"gnu openmp\" (gomp) library. if set to ``\"clang\"`` or \n``\"omp\"`` then the flags will be set to support the \"omp\" library. if set to\n``\"msvc\"`` then flags will be set for the microsoft visual c++ compiler's\nopenmp variant. for backwards compatibility the previous ``\"1\"`` has the same\nbehavior as ``\"probe\"``. as mentioned above ``\"0\"`` can be used to disable\nany detection of openmp or attempt to compile with it.\n\nusage\n-----\n\nthe usage of pykdtree is similar to scipy.spatial.ckdtree so for now refer to its documentation\n\n    >>> from pykdtree.kdtree import kdtree\n    >>> kd_tree = kdtree(data_pts)\n    >>> dist, idx = kd_tree.query(query_pts, k=8)\n\nthe number of threads to be used in openmp enabled queries can be controlled with the standard openmp environment variable omp_num_threads.\n\nthe **leafsize** argument (number of data points per leaf) for the tree creation can be used to control the memory overhead of the kd-tree. pykdtree uses a default **leafsize=16**.\nincreasing **leafsize** will reduce the memory overhead and construction time but increase query time.\n\npykdtree accepts data in double precision (numpy.float64) or single precision (numpy.float32) floating point. if data of another type is used an internal copy in double precision is made resulting in a memory overhead. if the kd-tree is constructed on single precision data the query points must be single precision as well.\n\nbenchmarks\n----------\ncomparison with scipy.spatial.ckdtree and libann. this benchmark is on geospatial 3d data with 10053632 data points and 4276224 query points. the results are indexed relative to the construction time of scipy.spatial.ckdtree. a leafsize of 10 (scipy.spatial.ckdtree default) is used.\n\nnote: libann is *not* thread safe. in this benchmark libann is compiled with \"-o3 -funroll-loops -ffast-math -fprefetch-loop-arrays\" in order to achieve optimum performance.\n\n==================  =====================  ======  ========  ==================\noperation           scipy.spatial.ckdtree  libann  pykdtree  pykdtree 4 threads\n------------------  ---------------------  ------  --------  ------------------\n\nconstruction                          100     304        96                  96\n\nquery 1 neighbour                    1267     294       223                  70\n\ntotal 1 neighbour                    1367     598       319                 166\n\nquery 8 neighbours                   2193     625       449                 143\n\ntotal 8 neighbours                   2293     929       545                 293\n==================  =====================  ======  ========  ==================\n\nlooking at the combined construction and query this gives the following performance improvement relative to scipy.spatial.ckdtree\n\n==========  ======  ========  ==================\nneighbours  libann  pykdtree  pykdtree 4 threads\n----------  ------  --------  ------------------\n1            129%      329%                723%\n\n8            147%      320%                682%\n==========  ======  ========  ==================\n\nnote: mileage will vary with the dataset at hand and computer architecture.\n\ntest\n----\nrun the unit tests using pytest\n\n.. code-block:: bash\n\n    $ cd <pykdtree_dir>\n    $ pytest\n\ninstalling on appveyor\n----------------------\n\npykdtree requires the \"stdint.h\" header file which is not available on certain\nversions of windows or certain windows compilers including those on the\ncontinuous integration platform appveyor. to get around this the header file(s)\ncan be downloaded and placed in the correct \"include\" directory. this can\nbe done by adding the `anaconda/missing-headers.ps1` script to your repository\nand running it the install step of `appveyor.yml`:\n\n    # install missing headers that aren't included with msvc 2008\n    # https://github.com/omnia-md/conda-recipes/pull/524\n    - \"powershell ./appveyor/missing-headers.ps1\"\n\nin addition to this, appveyor does not support openmp so this feature must be\nturned off by adding the following to `appveyor.yml` in the\n`environment` section:\n\n    environment:\n      global:\n        # don't build with openmp because it isn't supported in appveyor's compilers\n        use_omp: \"0\"\n",
  "docs_url": null,
  "keywords": "",
  "license": "",
  "name": "pykdtree",
  "package_url": "https://pypi.org/project/pykdtree/",
  "project_url": "https://pypi.org/project/pykdtree/",
  "project_urls": {
    "Homepage": "https://github.com/storpipfugl/pykdtree"
  },
  "release_url": "https://pypi.org/project/pykdtree/1.3.10/",
  "requires_dist": [
    "numpy"
  ],
  "requires_python": ">=3.9",
  "summary": "fast kd-tree implementation with openmp-enabled queries",
  "version": "1.3.10",
  "releases": [],
  "developers": [
    "esben_s",
    "storpipfugl@gmail.com"
  ],
  "kwds": "pykdtree_dir kd_tree pykdtree kdtree nearest",
  "license_kwds": "",
  "libtype": "pypi",
  "id": "pypi_pykdtree",
  "homepage": "https://github.com/storpipfugl/pykdtree",
  "release_count": 20,
  "dependency_ids": [
    "pypi_numpy"
  ]
}
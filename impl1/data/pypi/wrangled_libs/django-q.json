{
  "classifiers": [
    "development status :: 5 - production/stable",
    "environment :: web environment",
    "framework :: django",
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "operating system :: macos",
    "operating system :: posix",
    "programming language :: python",
    "programming language :: python :: 3",
    "programming language :: python :: 3.6",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: internet :: www/http",
    "topic :: software development :: libraries :: python modules",
    "topic :: system :: distributed computing"
  ],
  "description": ".. image:: docs/_static/logo.png\n    :align: center\n    :alt: q logo\n    :target: https://django-q.readthedocs.org/\n\na multiprocessing distributed task queue for django\n---------------------------------------------------\n\n|image0| |image1| |docs| |image2|\n\nfeatures\n~~~~~~~~\n\n-  multiprocessing worker pool\n-  asynchronous tasks\n-  scheduled, cron and repeated tasks\n-  signed and compressed packages\n-  failure and success database or cache\n-  result hooks, groups and chains\n-  django admin integration\n-  paas compatible with multiple instances\n-  multi cluster monitor\n-  redis, disque, ironmq, sqs, mongodb or orm\n-  rollbar and sentry support\n\nrequirements\n~~~~~~~~~~~~\n\n-  `django <https://www.djangoproject.com>`__ > = 2.2\n-  `django-picklefield <https://github.com/gintas/django-picklefield>`__\n-  `arrow <https://github.com/crsmithdev/arrow>`__\n-  `blessed <https://github.com/jquast/blessed>`__\n\ntested with: python 3.7, 3.8, 3.9 django 2.2.x and 3.2.x\n\n.. warning:: since python 3.7 `async` became a reserved keyword and was refactored to `async_task`\n\nbrokers\n~~~~~~~\n- `redis <https://django-q.readthedocs.org/en/latest/brokers.html#redis>`__\n- `disque <https://django-q.readthedocs.org/en/latest/brokers.html#disque>`__\n- `ironmq <https://django-q.readthedocs.org/en/latest/brokers.html#ironmq>`__\n- `amazon sqs <https://django-q.readthedocs.org/en/latest/brokers.html#amazon-sqs>`__\n- `mongodb <https://django-q.readthedocs.org/en/latest/brokers.html#mongodb>`__\n- `django orm <https://django-q.readthedocs.org/en/latest/brokers.html#django-orm>`__\n\ninstallation\n~~~~~~~~~~~~\n\n-  install the latest version with pip::\n\n    $ pip install django-q\n\n\n-  add `django_q` to your `installed_apps` in your projects `settings.py`::\n\n       installed_apps = (\n           # other apps\n           'django_q',\n       )\n\n-  run django migrations to create the database tables::\n\n    $ python manage.py migrate\n\n-  choose a message `broker <https://django-q.readthedocs.org/en/latest/brokers.html>`__ , configure and install the appropriate client library.\n\nread the full documentation at `https://django-q.readthedocs.org <https://django-q.readthedocs.org>`__\n\n\nconfiguration\n~~~~~~~~~~~~~\n\nall configuration settings are optional. e.g:\n\n.. code:: python\n\n    # settings.py example\n    q_cluster = {\n        'name': 'myproject',\n        'workers': 8,\n        'recycle': 500,\n        'timeout': 60,\n        'compress': true,\n        'cpu_affinity': 1,\n        'save_limit': 250,\n        'queue_limit': 500,\n        'label': 'django q',\n        'redis': {\n            'host': '127.0.0.1',\n            'port': 6379,\n            'db': 0, }\n    }\n\nfor full configuration options, see the `configuration documentation <https://django-q.readthedocs.org/en/latest/configure.html>`__.\n\nmanagement commands\n~~~~~~~~~~~~~~~~~~~\n\nstart a cluster with::\n\n    $ python manage.py qcluster\n\nmonitor your clusters with::\n\n    $ python manage.py qmonitor\n\nmonitor your clusters' memory usage with::\n\n    $ python manage.py qmemory\n\ncheck overall statistics with::\n\n    $ python manage.py qinfo\n\ncreating tasks\n~~~~~~~~~~~~~~\n\nuse `async_task` from your code to quickly offload tasks:\n\n.. code:: python\n\n    from django_q.tasks import async_task, result\n\n    # create the task\n    async_task('math.copysign', 2, -2)\n\n    # or with a reference\n    import math.copysign\n\n    task_id = async_task(copysign, 2, -2)\n\n    # get the result\n    task_result = result(task_id)\n\n    # result returns none if the task has not been executed yet\n    # you can wait for it\n    task_result = result(task_id, 200)\n\n    # but in most cases you will want to use a hook:\n\n    async_task('math.modf', 2.5, hook='hooks.print_result')\n\n    # hooks.py\n    def print_result(task):\n        print(task.result)\n\nfor more info see `tasks <https://django-q.readthedocs.org/en/latest/tasks.html>`__\n\n\nschedule\n~~~~~~~~\n\nschedules are regular django models. you can manage them through the\nadmin page or directly from your code:\n\n.. code:: python\n\n    # use the schedule function\n    from django_q.tasks import schedule\n\n    schedule('math.copysign',\n             2, -2,\n             hook='hooks.print_result',\n             schedule_type=schedule.daily)\n\n    # or create the object directly\n    from django_q.models import schedule\n\n    schedule.objects.create(func='math.copysign',\n                            hook='hooks.print_result',\n                            args='2,-2',\n                            schedule_type=schedule.daily\n                            )\n\n    # run a task every 5 minutes, starting at 6 today\n    # for 2 hours\n    import arrow\n\n    schedule('math.hypot',\n             3, 4,\n             schedule_type=schedule.minutes,\n             minutes=5,\n             repeats=24,\n             next_run=arrow.utcnow().replace(hour=18, minute=0))\n\n    # use a cron expression\n    schedule('math.hypot',\n             3, 4,\n             schedule_type=schedule.cron,\n             cron = '0 22 * * 1-5')\n\nfor more info check the `schedules <https://django-q.readthedocs.org/en/latest/schedules.html>`__ documentation.\n\n\ntesting\n~~~~~~~\n\nto run the tests you will need the following in addition to install requirements:\n\n* `py.test <http://pytest.org/latest/>`__\n* `pytest-django <https://github.com/pytest-dev/pytest-django>`__\n* disque from https://github.com/antirez/disque.git\n* redis\n* mongodb\n\nor you can use the included docker compose file.\n\nthe following commands can be used to run the tests:\n\n.. code:: bash\n\n    # create virtual environment\n    python -m venv venv\n\n    # install requirements\n    venv/bin/pip install -r requirements.txt\n\n    # install test dependencies\n    venv/bin/pip install pytest pytest-django\n\n    # install django-q\n    venv/bin/python setup.py develop\n\n    # run required services (you need to have docker-compose installed)\n    docker-compose -f test-services-docker-compose.yaml up -d\n\n    # run tests\n    venv/bin/pytest\n\n    # stop the services required by tests (when you no longer plan to run tests)\n    docker-compose -f test-services-docker-compose.yaml down\n\nlocale\n~~~~~~\n\ncurrently available in english, german and french.\ntranslation pull requests are always welcome.\n\ntodo\n~~~~\n\n-  better tests and coverage\n-  less dependencies?\n\nacknowledgements\n~~~~~~~~~~~~~~~~\n\n-  django q was inspired by working with\n   `django-rq <https://github.com/ui/django-rq>`__ and\n   `rq <https://github.com/ui/django-rq>`__\n-  human readable hashes by\n   `humanhash <https://github.com/zacharyvoase/humanhash>`__\n-  redditors feedback at `r/django <https://www.reddit.com/r/django/>`__\n\n-  jetbrains for their `open source support program <https://www.jetbrains.com/community/opensource>`__\n\n.. |image0| image:: https://github.com/koed00/django-q/workflows/tests/badge.svg?branche=master\n   :target: https://github.com/koed00/django-q/actions?query=workflow%3atests\n.. |image1| image:: http://codecov.io/github/koed00/django-q/coverage.svg?branch=master\n   :target: http://codecov.io/github/koed00/django-q?branch=master\n.. |image2| image:: http://badges.gitter.im/join%20chat.svg\n   :target: https://gitter.im/koed00/django-q\n.. |docs| image:: https://readthedocs.org/projects/docs/badge/?version=latest\n    :alt: documentation status\n    :scale: 100\n    :target: https://django-q.readthedocs.org/\n",
  "docs_url": null,
  "keywords": "django,distributed,multiprocessing,queue,scheduler",
  "license": "mit",
  "name": "django-q",
  "package_url": "https://pypi.org/project/django-q/",
  "project_url": "https://pypi.org/project/django-q/",
  "project_urls": {
    "Documentation": "https://django-q.readthedocs.org",
    "Homepage": "https://django-q.readthedocs.org",
    "Repository": "https://github.com/koed00/django-q"
  },
  "release_url": "https://pypi.org/project/django-q/1.3.9/",
  "requires_dist": [
    "django (>=2.2)",
    "blessed (>=1.17.6,<2.0.0)",
    "arrow (>=1.1.0,<2.0.0)",
    "django-picklefield (>=3.0.1,<4.0.0)",
    "hiredis (>=1.0.1,<2.0.0); extra == \"testing\"",
    "redis (>=3.5.3,<4.0.0)",
    "psutil (>=5.7.0,<6.0.0); extra == \"testing\"",
    "django-redis (>=4.12.1,<5.0.0); extra == \"testing\"",
    "iron-mq (>=0.9,<0.10); extra == \"testing\"",
    "boto3 (>=1.14.12,<2.0.0); extra == \"testing\"",
    "pymongo (>=3.10.1,<4.0.0); extra == \"testing\"",
    "croniter (>=0.3.34,<0.4.0); extra == \"testing\"",
    "django-q-rollbar (>=0.1); extra == \"rollbar\"",
    "django-q-sentry (>=0.1); extra == \"sentry\""
  ],
  "requires_python": ">=3.6.2,<4",
  "summary": "a multiprocessing distributed task queue for django",
  "version": "1.3.9",
  "releases": [],
  "developers": [
    "ilan_steemers",
    "koed00@gmail.com"
  ],
  "kwds": "multiprocessing django workflows django_q queue",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_django_q",
  "homepage": "https://django-q.readthedocs.org",
  "release_count": 78,
  "dependency_ids": [
    "pypi_arrow",
    "pypi_blessed",
    "pypi_boto3",
    "pypi_croniter",
    "pypi_django",
    "pypi_django_picklefield",
    "pypi_django_q_rollbar",
    "pypi_django_q_sentry",
    "pypi_django_redis",
    "pypi_hiredis",
    "pypi_iron_mq",
    "pypi_psutil",
    "pypi_pymongo",
    "pypi_redis"
  ]
}
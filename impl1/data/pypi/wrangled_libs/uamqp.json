{
  "classifiers": [
    "development status :: 5 - production/stable",
    "license :: osi approved :: mit license",
    "programming language :: cython",
    "programming language :: python",
    "programming language :: python :: 3",
    "programming language :: python :: 3 :: only",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.12",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9"
  ],
  "description": "uamqp for python\n================\n.. image:: https://img.shields.io/pypi/v/uamqp.svg\n    :target: https://pypi.python.org/pypi/uamqp/\n\n.. image:: https://img.shields.io/pypi/pyversions/uamqp.svg\n    :target: https://pypi.python.org/pypi/uamqp/\n\n.. image:: https://dev.azure.com/azure-sdk/public/_apis/build/status/python/azure-uamqp-python%20-%20client?branchname=main\n    :target: https://dev.azure.com/azure-sdk/public/_build?definitionid=89\n\nan amqp 1.0 client library for python.\n\ndisclaimer\n============\n\nuamqp for python requires python 3.6+ starting from v1.5, and python 2.7 is no longer supported. if python 2.7 is required, please install uamqp v1.4.3:\n\n.. code:: shell\n\n    $ pip install uamqp==1.4.3\n\ninstallation\n============\n\nwheels are provided for most major operating systems, so you can install directly with pip:\n\n.. code:: shell\n\n    $ pip install uamqp\n\n\nif you are running a linux distro that does not support `manylinux1 <https://www.python.org/dev/peps/pep-0513>`__ or you need to customize the build based on your system settings and packages, you can install from source:\n\n.. code:: shell\n\n    $ apt-get update\n    $ apt-get install -y build-essential libssl-dev uuid-dev cmake libcurl4-openssl-dev pkg-config python3-dev python3-pip\n    $ pip3 install uamqp --no-binary :all:\n\nif you are running alpine, you can install from source:\n\n.. code:: shell\n\n    $ apk add --update python3 py-pip python3-dev cmake gcc g++ openssl-dev build-base\n    $ pip3 install uamqp --no-binary :all:\n\nif you are running red hat, you can install from source:\n\n.. code:: shell\n\n    $ yum install cmake gcc gcc-c++ make openssl-devel python3-devel\n    $ pip3 install uamqp --no-binary :all:\n\n\ndocumentation\n+++++++++++++\nreference documentation can be found here: `docs.microsoft.com/python/api/uamqp/uamqp <https://docs.microsoft.com/python/api/uamqp/uamqp>`__.\n\n\ndeveloper setup\n===============\nin order to run the code directly, the cython extension will need to be build first.\n\npre-requisites\n++++++++++++++\n\n- windows: setup a `build environment <https://packaging.python.org/guides/packaging-binary-extensions/#building-binary-extensions>`__.\n- linux: install dependencies as descriped above in the installation instructions.\n- macos: install cmake using homebrew:\n\n.. code:: shell\n\n    $ brew install cmake\n\nbuilding the extension\n++++++++++++++++++++++\n\nthis project has two c library dependencies. they are vendored in this repository in these versions:\n\n- `azure uamqp for c <https://github.com/azure/azure-uamqp-c>`__ @ `2021-11-16 <https://github.com/azure/azure-uamqp-c/tree/259db533a66a8fa6e9ac61c39a9dae880224145f>`__\n- `azure c shared utility <https://github.com/azure/azure-c-shared-utility>`__ @ `2021-11-15 <https://github.com/azure/azure-c-shared-utility/tree/735be16a943c2a9cbbddef0543f871f5bc0e27ab>`__\n\nto build, start by creating a virtual environment and installing the required python packages:\n\n.. code:: shell\n\n    $ python -m venv env\n    $ env/scripts/activate\n    (env)$ pip install -r dev_requirements.txt\n\nnext, run the build command:\n\n.. code:: shell\n\n    $ python setup.py build_ext --inplace\n\ntests\n+++++\n\nthe tests can be run from within the virtual environment. the extension must be built first using the instructions above.\n\n.. code:: shell\n\n    (env)$ pytest\n\n\nprovide feedback\n================\n\nif you encounter any bugs or have suggestions, please file an issue in the\n`issues <https://github.com/azure/azure-uamqp-python/issues>`__\nsection of the project.\n\n\ncontributing\n============\n\nthis project welcomes contributions and suggestions.  most contributions require you to agree to a\ncontributor license agreement (cla) declaring that you have the right to, and actually do, grant us\nthe rights to use your contribution. for details, visit `https://cla.microsoft.com <https://cla.microsoft.com>`__.\n\nwhen you submit a pull request, a cla-bot will automatically determine whether you need to provide\na cla and decorate the pr appropriately (e.g., label, comment). simply follow the instructions\nprovided by the bot. you will only need to do this once across all repos using our cla.\n\nthis project has adopted the `microsoft open source code of conduct <https://opensource.microsoft.com/codeofconduct/>`__.\nfor more information see the `code of conduct faq <https://opensource.microsoft.com/codeofconduct/faq/>`__ or\ncontact `opencode@microsoft.com <mailto:opencode@microsoft.com>`__ with any additional questions or comments.\n\n\n.. :changelog:\n\nrelease history\n===============\n1.6.6 (2023-11-16)\n+++++++++++++++++++\n\n- added support for python 3.11\n\n1.6.5 (2023-07-12)\n+++++++++++++++++++\n\n- few more updates to submodules to support openssl 3.0 compilation\n\n1.6.4 (2023-02-09)\n+++++++++++++++++++\n\n- updated openssl dependency to 1.1.1t\n- updated submodules to support openssl 3.0 compilation\n- removed dependency on six \n- fixed a bug that caused the wrong port to selected for websockets when a port was not passed in\n\n1.6.3 (2022-10-27)\n+++++++++++++++++++\n\n- publish 3.11 wheels\n\n1.6.2 (2022-10-27)\n+++++++++++++++++++\n\n- added support for python 3.11\n- updated openssl dependency to 1.1.1q\n- updated cython dependency to 0.29.32\n- dropped support for manylinux2010\n- using cibuildwheel to generate wheels\n\n1.6.1 (2022-10-11)\n+++++++++++++++++++\n\n- added support for handling of duplicate certificates in `azure-c-shared-utility` dependency by using `cert_store_add_replace_existing` parameter in the `certaddencodedcertificatetostore` function call. (azure-sdk-for-python issue #26034)\n\n1.6.0 (2022-08-18)\n+++++++++++++++++++\n\nthis version and all future versions will require python 3.7+, python 3.6 is no longer supported.\n\n- added `data`, `value`, `sequence` properties to `uamqp.message`, which return the body if the body type corresponds.\n- added `message_annotations` property to `uamqp.message`, which is an alias for the `annotations` instance variable.\n- added `data` property to `uamqp.batchmessage`, which returns the iterable body of the batch.\n- added `ttl` property to `uamqp.messageheader`, which is an alias for the `time_to_live` instance variable.\n\n1.5.3 (2022-03-23)\n+++++++++++++++++++\n\n- updated openssl dependency to 1.1.1n for wheels of manylinux and macos.\n\n\n1.5.2 (2022-03-15)\n+++++++++++++++++++\n\n- fixed bug that resulted in an error when deepcopying batchmessage objects (azure-sdk-for-python issue #22529).\n\n1.5.1 (2022-01-12)\n+++++++++++++++++++\n\n- added back the support for python 3.6.\n\n1.5.0 (2022-01-05)\n+++++++++++++++++++\n\nthis version and all future versions will require python 3.7+, python 2.7 and python 3.6 are no longer supported.\n\n- `sastokenauth`, `jwttokenauth`, `sastokenasync`, and `jwttokenasync` now takes keyword argument `refresh_window` to override default token refresh timing in constructors.\n- fixed bug that `sendclientasync` might run into infinite loop while sending when it is shutdown unexpectedly.\n- updated dependencies azure uamqp c @ `2021-11-16 <https://github.com/azure/azure-uamqp-c/tree/259db533a66a8fa6e9ac61c39a9dae880224145f>`__ and azure c shared utility @ `2021-11-15 <https://github.com/azure/azure-c-shared-utility/tree/735be16a943c2a9cbbddef0543f871f5bc0e27ab>`__.\n- fixed bug that the `keep_alive_thread` of `amqpclient` should not keep program from exiting in the case of `amqpclient` not being closed properly.\n\n1.4.3 (2021-10-06)\n+++++++++++++++++++\n\n- added support for python 3.10.\n\n1.4.2 (2021-09-21)\n+++++++++++++++++++\n\n- fixed memory leak in win32 socketio and tlsio (azure-sdk-for-python issue #19777).\n- fixed memory leak in the process of converting amqpvalue into string (azure-sdk-for-python issue #19777).\n\n1.4.1 (2021-06-28)\n+++++++++++++++++++\n\n- fixed bug that jwttokenauth and jwttokenasync do not initialize token for token types other than b'jwt'.\n- fixed bug that attibutes `creation_time`, `absolute_expiry_time` and `group_sequence` on `messageproperties` should be compatible with integer types on python 2.7.\n\n1.4.0 (2021-05-03)\n+++++++++++++++++++\n\nthis version and all future versions will require python 2.7 or python 3.6+, python 3.5 is no longer supported.\n\n- fixed memory leaks in the process of link attach where source and target cython objects are not properly deallocated (azure-sdk-for-python issue #15747).\n- improved management operation callback not to parse description value of non amqp_type_string type as string (azure-sdk-for-python issue #18361).\n\n1.3.0 (2021-04-05)\n+++++++++++++++++++\n\nthis version will be the last version to officially support python 3.5, future versions will require python 2.7 or python 3.6+.\n\n- added support for amqp sequence as the body type of an amqp message.\n- added new class `uamqp.messagebodytype` to represent the body type of an amqp message, including:\n\n    - `data`: the body consists of one or more data sections and each section contains opaque binary data.\n    - `sequence`: the body consists of one or more sequence sections and each section contains an arbitrary number of structured data elements.\n    - `value`: the body consists of one amqp-value section and the section contains a single amqp value.\n\n- added new parameters to the constructor of `uamqp.message`:\n\n    - `body_type` which takes `uamqp.messagebodytype` to specify the body type of an amqp message.\n    - `footer` which takes a dict to set the footer of an amqp message.\n    - `delivery_annotations` which takes a dict to set the delivery annotations of an amqp message.\n\n- added support for pickling `uamqp.message`.\n- fixed bug that sending message of large size triggering segmentation fault when the underlying socket connection is lost.\n- fixed bug in link flow control where link credit and delivery count should be calculated based on per message instead of per transfer frame.\n\n1.2.15 (2021-03-02)\n+++++++++++++++++++\n\n- added desired-capabilities for `sendclient(async)` and `messagesender(async)` as part of the amqp protocol.\n- added types for amqpshort and amqpushort for explicit handling of short and unsigned short encoding.\n\n1.2.14 (2021-02-01)\n+++++++++++++++++++\n\n- updated azure uamqp c and azure c shared utility dependencies.\n- fixed memory leak with sas token creation.\n\n1.2.13 (2021-01-06)\n+++++++++++++++++++\n\n- fixed bug in accessing `messageproperties.user_id` triggering segmentation fault when the underlying c bytes are null.\n- fixed bug in `messageproperties.user_id` being limited to 8 bytes.\n- fixed bug where connection establishment on macos with clang 12 triggering unrecognized selector exception.\n- fixed bug that macos was unable to detect network error.\n- fixed bug that `receiveclient` and `receiveclientasync` receive messages during connection establishment.\n\n1.2.12 (2020-10-09)\n+++++++++++++++++++\n\n- updated cython dependency to 0.29.21.\n- added support for python 3.9.\n\n1.2.11 (2020-10-01)\n+++++++++++++++++++\n\n- updated tlsio_openssl module to send sni when establishing tls connection (thanks to milope).\n- fixed bug where `message.footer` and `message.delivery_annotation` were not encoded into the outgoing payload.\n- fixed bug where message sending timeout error didn't get raised out.\n\n1.2.10 (2020-08-05)\n+++++++++++++++++++\n\n- added parameter `shutdown_after_timeout` to `receiveclient` and `receiveclientasync` which gives control over whether to shutdown receiver after timeout.\n\n1.2.9 (2020-07-06)\n++++++++++++++++++\n\n- added method `messagereceiver.reset_link_credit` which is responsible for resetting current available link credit on the receiver link and send update to the sender.\n\n1.2.8 (2020-05-19)\n++++++++++++++++++\n\n- fix to initialize delivery_count header at 0 instead of none (azure-sdk-for-python issue #9708)\n- added info fields to rejected delivery disposition.\n\n\n1.2.7 (2020-05-04)\n++++++++++++++++++\n\n- fixed bug in setting certificate of tlsio on macos (azure-sdk-for-python issue #7201).\n- fixed seg fault in logging network tracing on macos (pr#147, thanks to malthe).\n- fixed typos in log messages (pr#146, thanks to bluca).\n- improved reproducibility of the generated c_uamqp.c file (pr#144, thanks to bluca).\n\n\n1.2.6 (2020-02-13)\n++++++++++++++++++\n\n- fixed seg fault in tearing down a failed link with unsent pending messages.\n\n\n1.2.5 (2019-12-10)\n++++++++++++++++++\n\n- fixed garbage collection of c objects to prevent crashing on uncontrolled shutdown.\n- fixed missing event loop references passed into asyncio functions.\n- fixed bug in noneffective flow control when large messages are received.\n- demote link redirect logging from warning to info.\n\n\n1.2.4 (2019-12-02)\n++++++++++++++++++\n\n- fixed bug in calculating send timeout.\n- removed `threadpoolexecutor` in `connectionasync`.\n- added support for python 3.8\n\n\n1.2.3 (2019-10-07)\n++++++++++++++++++\n\n- fixed bug in dropping received messages at the moment when the connection just started working.\n- fixed bug where underlying io type wasn't set to websocket when http_proxy was applied (pr#92, thanks to skoop22).\n- fixed bug in noneffective timeout when sending messages.\n- added desired-capabilities for `receiveclient(async)` and `messagereceiver(async)` as part of the amqp protocol.\n- added delivery-tag to `message` (azure-sdk-for-python issue #7336).\n- added method `work` to `messagereceiver` and `work_async` to `messagereceiverasync` responsible for updating link status.\n\n\n1.2.2 (2019-07-02)\n++++++++++++++++++\n\n- made bug fix in asyncio.get_event_loop backwards-compatible for now by just printing a warning rather than raising an error. in the next major version bump we can disable entirely.\n\n\n1.2.1 (2019-06-20)\n++++++++++++++++++\n\n- updated the implementation of `update_token()` in `jwttokenauth` and `jwttokenasync` (issue #80).\n\n\n1.2.0 (2019-04-16)\n++++++++++++++++++\n\n- fixed bug in batched messages missing application_properties (azure-event-hubs-python issue #97).\n- fixed bug in datetime object parsing (issue #63).\n- fixed bug in unexposed send/receive settle modes.\n- fixed bug where retried messages were not added back to the send queue.\n- fixed bug in using asyncio.get_event_loop.\n- added type objects for amqp byte and ubytes types.\n- added async locking around pending messages queue (pr#54, thanks to zach-b)\n- added websocket(amqp over websocket) support (azure-sdk-for-python issue #5318).\n- added new token class `jwttokenauth` and `jwttokenasync` to support oauth.\n\n\n1.1.0 (2018-11-12)\n++++++++++++++++++\n\n- support for python 2.7 \\(>_<)/\n\n    - where ever a `timeouterror` is raised in python 3.x, this will be replaced with a new ~uamqp.errors.clienttimeout exception in python 2.7.\n    - a python 2 `str` object will be treated as `bytes` in python 3 and a python 2 `unicode` object will be treated like a python 3 `str`.\n    - added uamqp.compat module for handling py 2 vs 3 imports and types (pr#46, thanks to maxkrivich).\n\n- amqp encoding of an integer type will now automatically failover into a long type or a double type if the value is too large.\n- improved support for promptly detecting invalid attach handles and raising the appropriate error.\n- added types for amqpdescribed, amqpint and amqpuint for explicit handling of int and unsigned int encoding.\n- added new error `errors.amqpclientshutdown` as a wrapper for `keyboardinterrupt` to better handle interrupt handling.\n- added better handling of keyboard interrupts during c callbacks to better facilitate clean client shutdown.\n- added additional handling of keyboard interrupt at the c level to clean up annoying warnings.\n- added classmethod `message.decode_from_bytes` to create a message from amqp wire-encoded data.\n- added `message.encode_message` method to retrieve the amqp wire-encoded byte representation of the current message.\n- fixed behaviour of `message.get_message_encoded_size()` to return accurate size.\n- added new optional `callback` argument to `client.mgmt_request` to allow for custom handling of different status codes.\n- added new client methods `auth_complete()` and `client_ready()` to allow for more fine-tuned monitoring or the client opening stages.\n- client message handler is now a public attribute `client.message_handler` (`sendclient._message_sender` and `receiveclient._message_receiver` are now deprecated).\n- added automatic encoding of `datetime.datetime` objects into amqp timestamp.\n- better support for source filters with optional `descriptor` argument in `source.set_filter()` and new `source.get_filter()` method.\n- fixed session settings not being passed to cbs session.\n- added support for a callback on receipt on a link attach frame. can be supplied to a client through the `on_attach` keyword argument.\n- removed unsued message.sequencebody class.\n- exposed batchmessage.size_offset property for batch size customization.\n\n\n\n1.0.3 (2018-09-14)\n++++++++++++++++++\n\n- reduced cpu load during idle receive.\n- updated azure uamqp c and azure c shared utility dependencies.\n\n\n1.0.2 (2018-09-05)\n++++++++++++++++++\n\n- fixed additional bugs in setting messageproperties as string or bytes.\n- removed auth locking to prevent locking issues on keyboard interrupt.\n\n\n1.0.1 (2018-08-29)\n++++++++++++++++++\n\n- added some more checks in place to prevent lock hanging on a keybaord interrupt.\n- fixed bug in setting messageproperties.subject as string or bytes.\n- `uamqp.send_message` now returns a list of `uamqp.constants.messagestate` to indicate the success of each message sent.\n\n\n1.0.0 (2018-08-20)\n++++++++++++++++++\n\n- api settled.\n- **behaviour change** when a sendclient or sendclientasync is shutdown, any remaining pending messages (that is messages\n  in the states `waitingtobesent` and `waitingforsendack`) will no longer be cleared, but can be retrieved from a new\n  attribute `sendclient.pending_messages` in order to be re-processed as needed.\n- **behaviour change** the function `sendclient.queue_message` now allows for queueing multiple messages at once by simply\n  passing in additional message instances:\n\n    - `send_client.queue_message(my_message)`\n    - `send_client.queue_message(message_1, message_2, message_3)`\n    - `send_client.queue_message(*my_message_list)`\n\n- an authentication object will now raise a `valueerror` if one attempts to use it for more than one connection.\n- renamed internal `_async` module to non-private `async_ops` to allow for docs generation.\n- reformatted logging for better performance.\n- added additional logging.\n\n\n0.2.1 (2018-08-06)\n++++++++++++++++++\n\n- fixed potential crashing in bindings for amqpvalue.\n- fixed bindings fault in cbs put token complete callback.\n- updated uamqp-c.\n- added additional auth and connection locking for thread/async safety.\n- increased info level logging.\n- removed platform deinitialization until it can be improved.\n- added handling for a connection reaching a client-caused error state.\n\n\n0.2.0 (2018-07-25)\n++++++++++++++++++\n\n- **breaking change** `messagesender.send_async` has been renamed to `messagesender.send`, and\n  `messagesenderasync.send_async` is now a coroutine.\n- **breaking change** removed `detach_received` callback argument from messagesender, messagereceiver,\n  messagesenderasync, and messagereceiverasync in favour of new `error_policy` argument.\n- added errorpolicy class to determine how the client should respond to both generic amqp errors\n  and custom or vendor-specific errors. a default policy will be used, but a custom policy can\n  be added to any client by using a new `error_policy` argument. value must be either an instance\n  or subclass of errorpolicy.\n\n    - the `error_policy` argument has also been added to messagesender, messagereceiver, connection, and their\n      async counterparts to allow for handling of link detach and connection close events.\n    - the error policy passed to a sendclient determines the number of message send retry\n      attempts. this replaces the previous `constants.message_send_retries` value which is now\n      deprecated.\n    - added new erroraction object to determine how a client should respond to an error. it has\n      three properties: `retry` (a boolean to determine whether the error is retryable), `backoff`\n      (an integer to determine how long the client should wait before retrying, default is 0) and\n      `increment_retries` (a boolean to determine whether the error should count against the maximum\n      retry attempts, default is `true`). currently `backoff` and `increment_retries` are only\n      considered for message send failures.\n    - added `vendorconnectionclose` and `vendorlinkdetach` exceptions for non-standard (unrecognized)\n      connection/link errors.\n\n- added support for http proxy configuration.\n- added support for running async clients synchronously.\n- added keep-alive support for connection - this is a background thread for a synchronous\n  client, and a background async function for an async client. the keep-alive feature is\n  disabled by default, to enable, set the `keep_alive_interval` argument on the client to\n  an integer representing the number of seconds between connection pings.\n- added support for catching a connection close event.\n- added support for `connection.sleep` and `connectionasync.sleep_async` to pause the connection.\n- added support for surfacing message disposition delivery-state (with error information).\n- added `constants.errorcodes` enum to map standard amqp error conditions. this replaces the previous\n  `constants.error_connection_redirect` and `constants.error_link_redirect` which are now both\n  deprecated.\n- added new super error `amqperror` from which all exceptions inherit.\n- added new `messagehandlererror` exception, a subclass of `amqpconnectionerror`, for\n  senders/receivers that enter an indeterminate error state.\n- `messageexception` is now a subclass of `messageresponse`.\n- added `clientmessageerror` exception, a subclass of `messageexception` for send errors raised client-side.\n- catching link detach event will now work regardless of whether service returns delivery-state.\n- fixed bug where received messages attempting to settle on a detached link crashed the client.\n- fixed bug in amqp c describedvalue.\n- fixed bug where client crashed on deallocating failed management operation.\n\n\n0.1.1 (2018-07-14)\n++++++++++++++++++\n\n- removed circular dependency in python 3.4 with types.py/utils.py\n- when a header properties is not set, returns `none` rather than raising valueerror.\n- fixed bug in receiving messages with application properties.\n\n\n0.1.0 (2018-07-05)\n++++++++++++++++++\n\n- fixed bug in error handling for cbs auth to invalid hostname.\n- changed c error logging to debug level.\n- bumped uamqp c version to 1.2.7\n- fixed memory leaks and deallocation bugs with properties and annotations.\n\n\n0.1.0rc2 (2018-07-02)\n+++++++++++++++++++++\n\n- **breaking change** submodule `async` has been renamed to the internal `_async`.\n  all asynchronous classes in the submodule can now be accessed from uamqp or uamqp.authentication directly.\n- **breaking change** anything returned by a callback supplied to receive messages will now be ignored.\n- **breaking change** changed message state enum values:\n\n    - `complete -> sendcomplete`\n    - `failed -> sendfailed`\n    - `waitingforack -> waitingforsendack`\n\n- added new message state enum values:\n\n    - `receivedunsettled`\n    - `receivedsettled`\n\n- **breaking change** changes to message settlement exceptions:\n\n    - combined the `abandonmessage` and `defermessage` exceptions as `messagemodified` to be in keeping with the amqp specification.\n    - renamed `acceptmessage` to `messageaccepted`.\n    - renamed `rejectmessage` to `messagerejected` which now takes `condition` and `description` arguments rather than `message`.\n\n- added `errors.linkdetach` exception as new subclass of `amqpconnectionerror` as a wrapped for data in a link detach dispostition.\n- added `errors.linkredirect` as a specific subclass of `linkdetach` to decode the specific redirect fields of a link redirect response.\n- added `errors.messagealreadysettled` exception for operations performed on a received message that has already returned a receipt dispostition.\n- added `errors.messagereleased` exception.\n- added `errors.errorresponse` exception.\n- a received message can now be explicitly settled through a set of new functions on the message:\n\n    - `message.accept()`\n    - `message.reject(condition:str, description:str)`\n    - `message.release()`\n    - `message.modify(failed:bool, deliverable:bool, annotations:dict)`\n\n- added explicit `auto_complete` argument to `receiveclient` and `receiveclientasync`. if `auto_complete` is set to `false` then all messages must be\n  explicitly \"accepted\" or \"rejected\" by the user otherwise they will timeout and be released. the default is `true`, which is the exiting behaviour for each receive mechanism:\n\n    - received messages processed by callback (`receiveclient.receive_messages()`) will be automatically \"accepted\" if no explicit response has been set on completion of the callback.\n    - received messages processed by batch (`receiveclient.receive_message_batch()`) will by automatically \"accepted\" before being returned to the user.\n    - received messages processed by iterator (`receiveclient.receive_message_iter()`) will by automatically \"accepted\" if no explicit response has been set once the generator is incremented.\n\n- added new methods to clients and connections to allow to redirect to an alternative endpoint when a linkredirect exception is raised.\n  the client redirect helper cannot be used for clients that use a shared connection - the clients must be closed before the connection can be redirected.\n  new credentials must be supplied for the new endpoint. the new methods are:\n\n    - `uamqp.connection.redirect(redirect_info, auth)`\n    - `uamqp.async.connectionasync.redirect_async(redirect_info, auth)`\n    - `uamqp.sendclient.redirect(redirect_info, auth)`\n    - `uamqp.receiveclient.redirect(redirect_info, auth)`\n    - `uamqp.async.sendclientasync.redirect_async(redirect_info, auth)`\n    - `uamqp.async.receiveclientasync.redirect_async(redirect_info, auth)`\n\n- added `on_detach_received` argument to `sender` and `receiver` classes to pass in callback to run on link detach.\n- removed automatic char encoding for strings of length 1, and added `types.amqpchar` for explicit encoding.\n- bumped uamqp c version to 1.2.5\n- bumped azure c shared utility to 1.1.5\n- fixed memory leaks in messageproperties, messageheader and message annotations.\n\n\n0.1.0rc1 (2018-05-29)\n+++++++++++++++++++++\n\n- fixed import error in async receiver.\n- exposed sender/receiver destroy function.\n- moved receiver.open on_message_received argument to constructor.\n- removed sasl module and moved internal classes into authentication module.\n- added encoding parameter everywhere where strings are encoded.\n- started documentation.\n- updated uamqp-c to 1.2.4 and c shared utility to 1.1.4 (includes fix for issue #12).\n- fixed return type of mgmtoperation.execute - now returns ~uamqp.message.message.\n- made amqp connection/session/sender/receiver types in a client overridable.\n- added debug trace to management operations.\n- fixed error in management callback on failed operation.\n- default amqp encoding of bytes is now a string type and a bytearray is a binary type.\n- added amqp array type and fixed long type range validation.\n- added `header` argument to message and batchmessage for setting a messageheader.\n- fixed messageheader attribute setters.\n\n\n0.1.0b5 (2018-04-27)\n++++++++++++++++++++\n\n- added certifi as a depedency to make openssl certs dynamic.\n- added `verify` option to authentication classes to allow setting custom certificate path (for linux and osx).\n\n\n0.1.0b4 (2018-04-19)\n++++++++++++++++++++\n\n- fixed memory leak in async receive.\n- removed close_on_done argument from client receive functions.\n- added receive iterator to synchronous client.\n- made async iter receive compatible with python 3.5.\n\n\n0.1.0b3 (2018-04-14)\n++++++++++++++++++++\n\n- fixed ssl errors in manylinux wheels.\n- fixed message annoations attribute.\n- fixed bugs in batched messages and sending batched messages.\n- fixed conflicting receiver link id.\n- fixed hanging receiver by removing queue max size in sync clients.\n- added support for sending messages with none and empty bodies.\n\n\n0.1.0b2 (2018-04-06)\n++++++++++++++++++++\n\n- added message send retry.\n- added timeouts and better error handling for management requests.\n- improved connection and auth error handling and error messages.\n- fixed message annotations type.\n- sendclient.send_all_messages() now returns a list of message send statuses.\n- fixed openssl platform being initialized multiple times.\n- fixed auto-refresh of sas tokens.\n- altered `receive_batch` behaviour to return messages as soon as they're available.\n- parameter `batch_size` in `receive_batch` renamed to `max_batch_size`.\n- fixed message `application_properties` decode error.\n- removed macos dependency on openssl and libuuid.\n\n\n0.1.0b1 (2018-03-24)\n++++++++++++++++++++\n\n- added management request support.\n- fixed message-less c operation valueerror.\n- store message metadata in python rather than c.\n- refactored send and receive clients to create a generic parent amqpclient.\n- fixed none receive timestamp bug.\n- removed async iterator queue due to instabilities - all callbacks are now synchronous.\n\n\n0.1.0a3 (2018-03-19)\n++++++++++++++++++++\n\n- added support for asynchronous message receive by iterator or batch.\n- removed synchronous receive iterator, and replaced with synchronous batch receive.\n- added sync and async context managers for send and receive clients.\n- fixed token instability and added put token retry policy.\n- exposed link attach properties.\n- a connection now has a single $cbs session that can be reused between clients.\n- added c debug trace logging to the python logger ('uamqp.c_uamqp')\n\n\n0.1.0a2 (2018-03-12)\n++++++++++++++++++++\n\n- exposed open performative properties for connection telemetry.\n- exposed setters for message.message_annotations and message.application_properties.\n- made adjustments to connection open and close to facilitate sharing a connection object between send/receive clients.\n- support for username/password embedded in connection uri.\n- clients can now optionally leave connection/session/link open for re-use.\n- updated build process and installation instructions.\n- various bug fixes to increase stability.\n\n\n0.1.0a1 (2018-03-04)\n++++++++++++++++++++\n\n- initial release\n",
  "docs_url": null,
  "keywords": "",
  "license": "mit license",
  "name": "uamqp",
  "package_url": "https://pypi.org/project/uamqp/",
  "project_url": "https://pypi.org/project/uamqp/",
  "project_urls": {
    "Homepage": "https://github.com/Azure/azure-uamqp-python"
  },
  "release_url": "https://pypi.org/project/uamqp/1.6.6/",
  "requires_dist": [
    "certifi >=2017.4.17"
  ],
  "requires_python": ">=3.7",
  "summary": "amqp 1.0 client library for python",
  "version": "1.6.6",
  "releases": [],
  "developers": [
    "azpysdkhelp@microsoft.com",
    "microsoft_corporation"
  ],
  "kwds": "uamqp c_uamqp amqpconnectionerror amqpclient amqpchar",
  "license_kwds": "mit license",
  "libtype": "pypi",
  "id": "pypi_uamqp",
  "homepage": "https://github.com/azure/azure-uamqp-python",
  "release_count": 52,
  "dependency_ids": [
    "pypi_certifi"
  ]
}
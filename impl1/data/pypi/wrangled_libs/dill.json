{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: developers",
    "intended audience :: science/research",
    "license :: osi approved :: bsd license",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "programming language :: python :: implementation :: cpython",
    "programming language :: python :: implementation :: pypy",
    "topic :: scientific/engineering",
    "topic :: software development"
  ],
  "description": "-----------------------------\ndill: serialize all of python\n-----------------------------\n\nabout dill\n==========\n\n``dill`` extends python's ``pickle`` module for serializing and de-serializing\npython objects to the majority of the built-in python types. serialization\nis the process of converting an object to a byte stream, and the inverse\nof which is converting a byte stream back to a python object hierarchy.\n\n``dill`` provides the user the same interface as the ``pickle`` module, and\nalso includes some additional features. in addition to pickling python\nobjects, ``dill`` provides the ability to save the state of an interpreter\nsession in a single command.  hence, it would be feasible to save an\ninterpreter session, close the interpreter, ship the pickled file to\nanother computer, open a new interpreter, unpickle the session and\nthus continue from the 'saved' state of the original interpreter\nsession.\n\n``dill`` can be used to store python objects to a file, but the primary\nusage is to send python objects across the network as a byte stream.\n``dill`` is quite flexible, and allows arbitrary user defined classes\nand functions to be serialized.  thus ``dill`` is not intended to be\nsecure against erroneously or maliciously constructed data. it is\nleft to the user to decide whether the data they unpickle is from\na trustworthy source.\n\n``dill`` is part of ``pathos``, a python framework for heterogeneous computing.\n``dill`` is in active development, so any user feedback, bug reports, comments,\nor suggestions are highly appreciated.  a list of issues is located at\nhttps://github.com/uqfoundation/dill/issues, with a legacy list maintained at\nhttps://uqfoundation.github.io/project/pathos/query.\n\n\nmajor features\n==============\n\n``dill`` can pickle the following standard types:\n\n    - none, type, bool, int, float, complex, bytes, str,\n    - tuple, list, dict, file, buffer, builtin,\n    - python classes, namedtuples, dataclasses, metaclasses,\n    - instances of classes,\n    - set, frozenset, array, functions, exceptions\n\n``dill`` can also pickle more 'exotic' standard types:\n\n    - functions with yields, nested functions, lambdas,\n    - cell, method, unboundmethod, module, code, methodwrapper,\n    - methoddescriptor, getsetdescriptor, memberdescriptor, wrapperdescriptor,\n    - dictproxy, slice, notimplemented, ellipsis, quit\n\n``dill`` cannot yet pickle these standard types:\n\n    - frame, generator, traceback\n\n``dill`` also provides the capability to:\n\n    - save and load python interpreter sessions\n    - save and extract the source code from functions and classes\n    - interactively diagnose pickling errors\n\n\ncurrent release\n===============\n\nthe latest released version of ``dill`` is available from:\n\n    https://pypi.org/project/dill\n\n``dill`` is distributed under a 3-clause bsd license.\n\n\ndevelopment version\n===================\n\nyou can get the latest development version with all the shiny new features at:\n\n    https://github.com/uqfoundation\n\nif you have a new contribution, please submit a pull request.\n\n\ninstallation\n============\n\n``dill`` can be installed with ``pip``::\n\n    $ pip install dill\n\nto optionally include the ``objgraph`` diagnostic tool in the install::\n\n    $ pip install dill[graph]\n\nfor windows users, to optionally install session history tools::\n\n    $ pip install dill[readline]\n\n\nrequirements\n============\n\n``dill`` requires:\n\n    - ``python`` (or ``pypy``), **>=3.7**\n    - ``setuptools``, **>=42**\n\noptional requirements:\n\n    - ``objgraph``, **>=1.7.2**\n    - ``pyreadline``, **>=1.7.1** (on windows)\n\n\nbasic usage\n===========\n\n``dill`` is a drop-in replacement for ``pickle``. existing code can be\nupdated to allow complete pickling using::\n\n    >>> import dill as pickle\n\nor::\n\n    >>> from dill import dumps, loads\n\n``dumps`` converts the object to a unique byte string, and ``loads`` performs\nthe inverse operation::\n\n    >>> squared = lambda x: x**2\n    >>> loads(dumps(squared))(3)\n    9\n\nthere are a number of options to control serialization which are provided\nas keyword arguments to several ``dill`` functions:\n\n* with *protocol*, the pickle protocol level can be set. this uses the\n  same value as the ``pickle`` module, *default_protocol*.\n* with *byref=true*, ``dill`` to behave a lot more like pickle with\n  certain objects (like modules) pickled by reference as opposed to\n  attempting to pickle the object itself.\n* with *recurse=true*, objects referred to in the global dictionary are\n  recursively traced and pickled, instead of the default behavior of\n  attempting to store the entire global dictionary.\n* with *fmode*, the contents of the file can be pickled along with the file\n  handle, which is useful if the object is being sent over the wire to a\n  remote system which does not have the original file on disk. options are\n  *handle_fmode* for just the handle, *contents_fmode* for the file content\n  and *file_fmode* for content and handle.\n* with *ignore=false*, objects reconstructed with types defined in the\n  top-level script environment use the existing type in the environment\n  rather than a possibly different reconstructed type.\n\nthe default serialization can also be set globally in *dill.settings*.\nthus, we can modify how ``dill`` handles references to the global dictionary\nlocally or globally::\n\n    >>> import dill.settings\n    >>> dumps(absolute) == dumps(absolute, recurse=true)\n    false\n    >>> dill.settings['recurse'] = true\n    >>> dumps(absolute) == dumps(absolute, recurse=true)\n    true\n\n``dill`` also includes source code inspection, as an alternate to pickling::\n\n    >>> import dill.source\n    >>> print(dill.source.getsource(squared))\n    squared = lambda x:x**2\n\nto aid in debugging pickling issues, use *dill.detect* which provides\ntools like pickle tracing::\n\n    >>> import dill.detect\n    >>> with dill.detect.trace():\n    >>>     dumps(squared)\n    \u252c f1: <function <lambda> at 0x7fe074f8c280>\n    \u251c\u252c f2: <function _create_function at 0x7fe074c49c10>\n    \u2502\u2514 # f2 [34 b]\n    \u251c\u252c co: <code object <lambda> at 0x7fe07501eb30, file \"<stdin>\", line 1>\n    \u2502\u251c\u252c f2: <function _create_code at 0x7fe074c49ca0>\n    \u2502\u2502\u2514 # f2 [19 b]\n    \u2502\u2514 # co [87 b]\n    \u251c\u252c d1: <dict object at 0x7fe0750d4680>\n    \u2502\u2514 # d1 [22 b]\n    \u251c\u252c d2: <dict object at 0x7fe074c5a1c0>\n    \u2502\u2514 # d2 [2 b]\n    \u251c\u252c d2: <dict object at 0x7fe074f903c0>\n    \u2502\u251c\u252c d2: <dict object at 0x7fe074f8ebc0>\n    \u2502\u2502\u2514 # d2 [2 b]\n    \u2502\u2514 # d2 [23 b]\n    \u2514 # f1 [180 b]\n\nwith trace, we see how ``dill`` stored the lambda (``f1``) by first storing\n``_create_function``, the underlying code object (``co``) and ``_create_code``\n(which is used to handle code objects), then we handle the reference to\nthe global dict (``d2``) plus other dictionaries (``d1`` and ``d2``) that\nsave the lambda object's state. a ``#`` marks when the object is actually stored.\n\n\nmore information\n================\n\nprobably the best way to get started is to look at the documentation at\nhttp://dill.rtfd.io. also see ``dill.tests`` for a set of scripts that\ndemonstrate how ``dill`` can serialize different python objects. you can\nrun the test suite with ``python -m dill.tests``. the contents of any\npickle file can be examined with ``undill``.  as ``dill`` conforms to\nthe ``pickle`` interface, the examples and documentation found at\nhttp://docs.python.org/library/pickle.html also apply to ``dill``\nif one will ``import dill as pickle``. the source code is also generally\nwell documented, so further questions may be resolved by inspecting the\ncode itself. please feel free to submit a ticket on github, or ask a\nquestion on stackoverflow (**@mike mckerns**).\nif you would like to share how you use ``dill`` in your work, please send\nan email (to **mmckerns at uqfoundation dot org**).\n\n\ncitation\n========\n\nif you use ``dill`` to do research that leads to publication, we ask that you\nacknowledge use of ``dill`` by citing the following in your publication::\n\n    m.m. mckerns, l. strand, t. sullivan, a. fang, m.a.g. aivazis,\n    \"building a framework for predictive science\", proceedings of\n    the 10th python in science conference, 2011;\n    http://arxiv.org/pdf/1202.1056\n\n    michael mckerns and michael aivazis,\n    \"pathos: a framework for heterogeneous computing\", 2010- ;\n    https://uqfoundation.github.io/project/pathos\n\nplease see https://uqfoundation.github.io/project/pathos or\nhttp://arxiv.org/pdf/1202.1056 for further information.\n",
  "docs_url": null,
  "keywords": "",
  "license": "bsd-3-clause",
  "name": "dill",
  "package_url": "https://pypi.org/project/dill/",
  "project_url": "https://pypi.org/project/dill/",
  "project_urls": {
    "Bug Tracker": "https://github.com/uqfoundation/dill/issues",
    "Documentation": "http://dill.rtfd.io",
    "Download": "https://pypi.org/project/dill/#files",
    "Homepage": "https://github.com/uqfoundation/dill",
    "Source Code": "https://github.com/uqfoundation/dill"
  },
  "release_url": "https://pypi.org/project/dill/0.3.7/",
  "requires_dist": [
    "objgraph (>=1.7.2) ; extra == 'graph'"
  ],
  "requires_python": ">=3.7",
  "summary": "serialize all of python",
  "version": "0.3.7",
  "releases": [],
  "developers": [
    "mike_mckerns",
    "mmckerns@uqfoundation.org"
  ],
  "kwds": "interpreter serialization python serialize serializing",
  "license_kwds": "bsd-3-clause",
  "libtype": "pypi",
  "id": "pypi_dill",
  "homepage": "https://github.com/uqfoundation/dill",
  "release_count": 26,
  "dependency_ids": [
    "pypi_objgraph"
  ]
}
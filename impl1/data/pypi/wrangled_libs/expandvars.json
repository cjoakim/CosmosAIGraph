{
  "classifiers": [
    "development status :: 4 - beta",
    "intended audience :: developers",
    "intended audience :: information technology",
    "intended audience :: other audience",
    "license :: osi approved :: mit license",
    "natural language :: english",
    "operating system :: macos",
    "operating system :: microsoft",
    "operating system :: posix",
    "operating system :: unix",
    "programming language :: python :: 3",
    "topic :: software development",
    "topic :: utilities"
  ],
  "description": "# expandvars\n\nexpand system variables unix style\n\n[![pypi version](https://img.shields.io/pypi/v/expandvars.svg)](https://pypi.org/project/expandvars)\n[![codecov](https://codecov.io/gh/sayanarijit/expandvars/branch/master/graph/badge.svg)](https://codecov.io/gh/sayanarijit/expandvars)\n\n## inspiration\n\nthis module is inspired by [gnu bash's variable expansion features](https://www.gnu.org/software/bash/manual/html_node/shell-parameter-expansion.html). it can be used as an alternative to python's [os.path.expandvars](https://docs.python.org/3/library/os.path.html#os.path.expandvars) function.\n\na good use case is reading config files with the flexibility of reading values from environment variables using advanced features like returning a default value if some variable is not defined.\nfor example:\n\n```toml\n[default]\nmy_secret_access_code = \"${access_code:-default_access_code}\"\nmy_important_variable = \"${important_variable:?}\"\nmy_updated_path = \"$path:$home/.bin\"\nmy_process_id = \"$$\"\nmy_nested_variable = \"${!nested}\"\n```\n\n> note: although this module copies most of the common behaviours of bash,\n> it doesn't follow bash strictly. for example, it doesn't work with arrays.\n\n## installation\n\n### pip\n\n```\npip install expandvars\n```\n\n### conda\n\n```\nconda install -c conda-forge expandvars\n```\n\n## usage\n\n```python\nfrom expandvars import expandvars\n\nprint(expandvars(\"$path:${home:?}/bin:${some_undefined_path:-/default/path}\"))\n# /bin:/sbin:/usr/bin:/usr/sbin:/home/you/bin:/default/path\n```\n\n## examples\n\nfor now, [refer to the test cases](https://github.com/sayanarijit/expandvars/blob/master/tests) to see how it behaves.\n\n## tips\n\n### nounset=true\n\nif you want to enable strict parsing by default, (similar to `set -u` / `set -o nounset` in bash), pass `nounset=true`.\n\n```python\n# all the variables must be defined.\nexpandvars(\"$var1:${var2}:$var3\", nounset=true)\n\n# raises unboundvariable error.\n```\n\n> note: another way is to use the `${var?}` or `${var:?}` syntax. see the examples in tests.\n\n### expandvars_recover_null=\"foo\"\n\nif you want to temporarily disable strict parsing both for `nounset=true` and the `${var:?}` syntax, set environment variable `expandvars_recover_null=somevalue`.\nthis helps with certain use cases where you need to temporarily disable strict parsing of critical env vars, e.g. in testing environment, without modifying the code.\n\ne.g.\n\n```bash\nexpandvars_recover_null=foo myapp --config production.ini && echo \"all fine.\"\n```\n\n> warning: try to avoid `export expandvars_recover_null` because that will disable strict parsing permanently until you log out.\n\n### customization\n\nyou can customize the variable symbol and data used for the expansion by using the more general `expand` function.\n\n```python\nfrom expandvars import expand\n\nprint(expand(\"%path:$home/bin:%{some_undefined_path:-/default/path}\", environ={\"path\": \"/example\"}, var_symbol=\"%\"))\n# /example:$home/bin:/default/path\n```\n\n## contributing\n\nto contribute, setup environment following way:\n\nthen\n\n```bash\n# clone repo\ngit clone https://github.com/sayanarijit/expandvars && cd expandvars\n\n# setup virtualenv\npython -m venv .venv\nsource ./.venv/bin/activate\n\n# install as editable including test dependencies\npip install -e \".[tests]\"\n```\n\n- follow [general git guidelines](https://git-scm.com/book/en/v2/distributed-git-contributing-to-a-project).\n- keep it simple. run `black .` to auto format the code.\n- test your changes locally by running `pytest` (pass `--cov --cov-report html` for browsable coverage report).\n- if you are familiar with [tox](https://tox.readthedocs.io), you may want to use it for testing in different python versions.\n\n## alternatives\n\n- [environs](https://github.com/sloria/environs) - simplified environment variable parsing.\n",
  "docs_url": null,
  "keywords": "expand,system,variables",
  "license": "mit license  copyright (c) 2019 arijit basu  permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"software\"), to deal in the software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the software, and to permit persons to whom the software is furnished to do so, subject to the following conditions:  the above copyright notice and this permission notice shall be included in all copies or substantial portions of the software.  the software is provided \"as is\", without warranty of any kind, express or implied, including but not limited to the warranties of merchantability, fitness for a particular purpose and noninfringement. in no event shall the authors or copyright holders be liable for any claim, damages or other liability, whether in an action of contract, tort or otherwise, arising from, out of or in connection with the software or the use or other dealings in the software.",
  "name": "expandvars",
  "package_url": "https://pypi.org/project/expandvars/",
  "project_url": "https://pypi.org/project/expandvars/",
  "project_urls": {
    "Homepage": "https://github.com/sayanarijit/expandvars"
  },
  "release_url": "https://pypi.org/project/expandvars/0.12.0/",
  "requires_dist": [
    "black; extra == 'tests'",
    "pytest; extra == 'tests'",
    "pytest-cov; extra == 'tests'",
    "tox; extra == 'tests'"
  ],
  "requires_python": ">=3",
  "summary": "expand system variables unix style",
  "version": "0.12.0",
  "releases": [],
  "developers": [
    "sayanarijit@gmail.com"
  ],
  "kwds": "expandvars expandvars_recover_null my_nested_variable variables variable",
  "license_kwds": "copyright license liable liability mit",
  "libtype": "pypi",
  "id": "pypi_expandvars",
  "homepage": "",
  "release_count": 24,
  "dependency_ids": [
    "pypi_black",
    "pypi_pytest",
    "pypi_pytest_cov",
    "pypi_tox"
  ]
}
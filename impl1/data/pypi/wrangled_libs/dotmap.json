{
  "classifiers": [],
  "description": "# dotmap\n\n[![build status](https://travis-ci.com/drgrib/dotmap.svg?branch=master)](https://travis-ci.com/drgrib/dotmap)\n\n[![donate](https://img.shields.io/badge/donate-paypal-green.svg)](https://www.paypal.com/donate?business=n2glxls5kbfby&item_name=chris+redford&currency_code=usd)\n\n# install\n\n```\npip3 install dotmap\n```\n\n## upgrade\n\nget updates for current installation\n\n```\npip3 install --upgrade dotmap\n```\n\n# features\n\n`dotmap` is a dot-access `dict` subclass that\n\n-   has dynamic hierarchy creation (autovivification)\n-   can be initialized with keys\n-   easily initializes from `dict`\n-   easily converts to `dict`\n-   is ordered by insertion\n\nthe key feature is exactly what you want: dot-access\n\n```python\nfrom dotmap import dotmap\nm = dotmap()\nm.name = 'joe'\nprint('hello ' + m.name)\n# hello joe\n```\n\nhowever, `dotmap` is a `dict` and you can treat it like a `dict` as needed\n\n```python\nprint(m['name'])\n# joe\nm.name += ' smith'\nm['name'] += ' jr'\nprint(m.name)\n# joe smith jr\n```\n\nit also has fast, automatic hierarchy (which can be deactivated by initializing with `dotmap(_dynamic=false)`)\n\n```python\nm = dotmap()\nm.people.steve.age = 31\n```\n\nand key initialization\n\n```python\nm = dotmap(a=1, b=2)\n```\n\nyou can initialize it from `dict` and convert it to `dict`\n\n```python\nd = {'a':1, 'b':2}\n\nm = dotmap(d)\nprint(m)\n# dotmap(a=1, b=2)\n\nprint(m.todict())\n# {'a': 1, 'b': 2}\n```\n\nand it has iteration that is ordered by insertion\n\n```python\nm = dotmap()\n\nm.people.john.age = 32\nm.people.john.job = 'programmer'\nm.people.mary.age = 24\nm.people.mary.job = 'designer'\nm.people.dave.age = 55\nm.people.dave.job = 'manager'\n\nfor k, v in m.people.items():\n\tprint(k, v)\nprint\n\n# john dotmap(age=32, job='programmer')\n# mary dotmap(age=24, job='designer')\n# dave dotmap(age=55, job='manager')\n```\n\nit also has automatic counter initialization\n\n```python\nm = dotmap()\nfor i in range(7):\n\tm.counter += 1\nprint(m.counter)\n# 7\n```\n\nand automatic addition initializations of any other type\n\n```python\nm = dotmap()\nm.quote += 'lions'\nm.quote += ' and tigers'\nm.quote += ' and bears'\nm.quote += ', oh my'\nprint(m.quote)\n# lions and tigers and bears, oh my\n```\n\nthere is also built-in `pprint` as `dict` or `json` for debugging a large `dotmap`\n\n```python\nm.pprint()\n# {'people': {'dave': {'age': 55, 'job': 'manager'},\n#             'john': {'age': 32, 'job': 'programmer'},\n#             'mary': {'age': 24, 'job': 'designer'}}}\nm.pprint(pformat='json')\n# {\n#     \"people\": {\n#         \"dave\": {\n#\t      \"age\": 55,\n#\t      \"job\": \"manager\"\n# \t  },\n# \t  \"john\": {\n#\t      \"age\": 32,\n#\t      \"job\": \"programmer\"\n# \t  },\n# \t  \"mary\": {\n#\t      \"age\": 24,\n#\t      \"job\": \"designer\"\n# \t  }\n#     }\n# }\n```\n\nand many other features involving dots and dictionaries that will be immediately intuitive when used.\n\n\n",
  "docs_url": null,
  "keywords": "dict,dot,map,order,ordered,ordereddict,access,dynamic",
  "license": "mit",
  "name": "dotmap",
  "package_url": "https://pypi.org/project/dotmap/",
  "project_url": "https://pypi.org/project/dotmap/",
  "project_urls": {
    "Download": "https://github.com/drgrib/dotmap/tarball/1.0",
    "Homepage": "https://github.com/drgrib/dotmap"
  },
  "release_url": "https://pypi.org/project/dotmap/1.3.30/",
  "requires_dist": [],
  "requires_python": "",
  "summary": "ordered, dynamically-expandable dot-access dictionary",
  "version": "1.3.30",
  "releases": [],
  "developers": [
    "chris_redford",
    "credford@gmail.com"
  ],
  "kwds": "dict ordereddict dictionaries dotmap pip3",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_dotmap",
  "homepage": "https://github.com/drgrib/dotmap",
  "release_count": 91,
  "dependency_ids": []
}
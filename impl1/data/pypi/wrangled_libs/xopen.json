{
  "classifiers": [
    "development status :: 5 - production/stable",
    "license :: osi approved :: mit license",
    "programming language :: python :: 3"
  ],
  "description": ".. image:: https://github.com/pycompression/xopen/workflows/ci/badge.svg\n  :target: https://github.com/pycompression/xopen\n  :alt:\n\n.. image:: https://img.shields.io/pypi/v/xopen.svg?branch=main\n  :target: https://pypi.python.org/pypi/xopen\n\n.. image:: https://img.shields.io/conda/v/conda-forge/xopen.svg\n  :target: https://anaconda.org/conda-forge/xopen\n  :alt:\n\n.. image:: https://codecov.io/gh/pycompression/xopen/branch/main/graph/badge.svg\n  :target: https://codecov.io/gh/pycompression/xopen\n  :alt:\n\n=====\nxopen\n=====\n\nthis python module provides an ``xopen`` function that works like the\nbuilt-in ``open`` function but also transparently deals with compressed files.\nsupported compression formats are currently gzip, bzip2, xz and optionally zstandard.\n\n``xopen`` selects the most efficient method for reading or writing a compressed file.\nfor gzip files this means falling back on the threaded methods of the\n``python-isal`` library if supported. alternatively a pipe can be opened to\nan external tool, such as `pigz <https://zlib.net/pigz/>`_, which is a parallel\nversion of ``gzip``.\n\nif ``threads=0`` is passed to ``xopen()``, no external process is used.\nfor gzip files, this will then use `python-isal\n<https://github.com/pycompression/python-isal>`_ (which binds isa-l) if\nit is installed (since ``python-isal`` is a dependency of ``xopen``,\nthis should always be the case).\n``python-isal`` does not support compression levels\ngreater than 3, so if no external tool is available or ``threads`` has been set to 0,\npython\u2019s built-in ``gzip.open`` is used.\n\nfor xz files, a pipe to the ``xz`` program is used because it has built-in support for multithreaded compression.\n\nfor bz2 files, `pbzip2 (parallel bzip2) <http://compression.ca/pbzip2/>`_ is used.\n\n``xopen`` falls back to python\u2019s built-in functions\n(``gzip.open``, ``lzma.open``, ``bz2.open``)\nif none of the other methods can be used.\n\nthe file format to use is determined from the file name if the extension is recognized\n(``.gz``, ``.bz2``, ``.xz`` or ``.zst``).\nwhen reading a file without a recognized file extension, xopen attempts to detect the format\nby reading the first couple of bytes from the file.\n\n``xopen`` is compatible with python versions 3.8 and later.\n\n\nusage\n-----\n\nopen a file for reading::\n\n    from xopen import xopen\n\n    with xopen(\"file.txt.gz\") as f:\n        content = f.read()\n\nwrite to a file in binary mode,\nset the compression level\nand avoid using an external process::\n\n    from xopen import xopen\n\n    with xopen(\"file.txt.xz\", mode=\"wb\", threads=0, compresslevel=3) as f:\n        f.write(b\"hello\")\n\n\nreproducibility\n---------------\n\nxopen writes gzip files in a reproducible manner.\n\nnormally, gzip files contain a timestamp in the file header,\nwhich means that compressing the same data at different times results in different output files.\nxopen disables this for all of the supported gzip compression backends.\nfor example, when using an external process, it sets the command-line option\n``--no-name`` (same as ``-n``).\n\nnote that different gzip compression backends typically do not produce\nidentical output, so reproducibility may no longer be given when the execution environment changes\nfrom one ``xopen()`` invocation to the next.\nthis includes the cpu architecture as `igzip adjusts its algorithm\ndepending on it <https://github.com/intel/isa-l/issues/140#issuecomment-634877966>`_.\n\nbzip2 and xz compression methods do not store timestamps in the file headers,\nso output from them is also reproducible.\n\n\noptional zstandard support\n--------------------------\n\nfor reading and writing zstandard (``.zst``) files, either the ``zstd`` command-line\nprogram or the python ``zstandard`` package needs to be installed.\n\n* if the ``threads`` parameter to ``xopen()`` is ``none`` (the default) or any value greater than 0,\n  ``xopen`` uses an external ``zstd`` process.\n* if the above fails (because no ``zstd`` program is available) or if ``threads`` is 0,\n  the ``zstandard`` package is used.\n\nto ensure that you get the correct ``zstandard`` version, you can specify the ``zstd`` extra for\n``xopen``, that is, install it using ``pip install xopen[zstd]``.\n\n\nchangelog\n---------\n\nv1.8.0 (2023-11-03)\n~~~~~~~~~~~~~~~~~~~\n* #131: xopen now defers to the ``isal.igzip_threaded`` module rather than\n  piping to external programs in applicable cases. this makes reading and\n  writing to gzip files using threads more efficient.\n* support for python 3.7 is dropped and support for python 3.12 is added.\n\nv1.7.0 (2022-11-03)\n~~~~~~~~~~~~~~~~~~~\n\n* #91: added optional support for zstandard (``.zst``) files.\n  this requires that the python ``zstandard`` package is installed\n  or that the ``zstd`` command-line program is available.\n\nv1.6.0 (2022-08-10)\n~~~~~~~~~~~~~~~~~~~\n\n* #94: when writing gzip files, the timestamp and name of the original\n  file is omitted (equivalent to using ``gzip --no-name`` (or ``-n``) on the\n  command line). this allows files to be written in a reproducible manner.\n\nv1.5.0 (2022-03-23)\n~~~~~~~~~~~~~~~~~~~\n\n* #100: dropped python 3.6 support\n* #101: added support for piping into and from an external ``xz`` process. contributed by @fanninpm.\n* #102: support setting the xz compression level. contributed by @tsibley.\n\nv1.4.0 (2022-01-14)\n~~~~~~~~~~~~~~~~~~~\n\n* add ``seek()`` and ``tell()`` to the ``pipedcompressionreader`` classes\n  (for windows compatibility)\n\nv1.3.0 (2022-01-10)\n~~~~~~~~~~~~~~~~~~~\n\n* xopen is now available on windows (in addition to linux and macos).\n* for greater compatibility with `the built-in open()\n  function <https://docs.python.org/3/library/functions.html#open>`_,\n  ``xopen()`` has gained the parameters *encoding*, *errors* and *newlines*\n  with the same meaning as in ``open()``. unlike built-in ``open()``, though,\n  encoding is utf-8 by default.\n* a parameter *format* has been added that allows to force the compression\n  file format.\n\nv1.2.0 (2021-09-21)\n~~~~~~~~~~~~~~~~~~~\n\n* `pbzip2 <http://compression.ca/pbzip2/>`_ is now used to open ``.bz2`` files if\n  ``threads`` is greater than zero (contributed by @driesschaumont).\n\nv1.1.0 (2021-01-20)\n~~~~~~~~~~~~~~~~~~~\n\n* python 3.5 support is dropped.\n* on linux systems, `python-isal <https://github.com/pycompression/python-isal>`_\n  is now added as a requirement. this will speed up the reading of gzip files\n  significantly when no external processes are used.\n\nv1.0.0 (2020-11-05)\n~~~~~~~~~~~~~~~~~~~\n\n* if installed, the ``igzip`` program (part of\n  `intel isa-l <https://github.com/intel/isa-l/>`_) is now used for reading\n  and writing gzip-compressed files at compression levels 1-3, which results\n  in a significant speedup.\n\nv0.9.0 (2020-04-02)\n~~~~~~~~~~~~~~~~~~~\n\n* #80: when the file name extension of a file to be opened for reading is not\n  available, the content is inspected (if possible) and used to determine\n  which compression format applies (contributed by @bvaisvil).\n* this release drops python 2.7 and 3.4 support. python 3.5 or later is\n  now required.\n\nv0.8.4 (2019-10-24)\n~~~~~~~~~~~~~~~~~~~\n\n* when reading gzipped files, force ``pigz`` to use only a single process.\n  ``pigz`` cannot use multiple cores anyway when decompressing. by default,\n  it would use extra i/o processes, which slightly reduces wall-clock time,\n  but increases cpu time. single-core decompression with ``pigz`` is still\n  about twice as fast as regular ``gzip``.\n* allow ``threads=0`` for specifying that no external ``pigz``/``gzip``\n  process should be used (then regular ``gzip.open()`` is used instead).\n\nv0.8.3 (2019-10-18)\n~~~~~~~~~~~~~~~~~~~\n\n* #20: when reading gzipped files, let ``pigz`` use at most four threads by default.\n  this limit previously only applied when writing to a file. contributed by @bernt-matthias.\n* support python 3.8\n\nv0.8.0 (2019-08-14)\n~~~~~~~~~~~~~~~~~~~\n\n* #14: speed improvements when iterating over gzipped files.\n\nv0.6.0 (2019-05-23)\n~~~~~~~~~~~~~~~~~~~\n\n* for reading from gzipped files, xopen will now use a ``pigz`` subprocess.\n  this is faster than using ``gzip.open``.\n* python 2 support will be dropped in one of the next releases.\n\nv0.5.0 (2019-01-30)\n~~~~~~~~~~~~~~~~~~~\n\n* by default, pigz is now only allowed to use at most four threads. this hopefully reduces\n  problems some users had with too many threads when opening many files at the same time.\n* xopen now accepts pathlib.path objects.\n\nv0.4.0 (2019-01-07)\n~~~~~~~~~~~~~~~~~~~\n\n* drop python 3.3 support\n* add a ``threads`` parameter (passed on to ``pigz``)\n\nv0.3.2 (2017-11-22)\n~~~~~~~~~~~~~~~~~~~\n\n* #6: make multi-block bz2 work on python 2 by using external bz2file library.\n\nv0.3.1 (2017-11-22)\n~~~~~~~~~~~~~~~~~~~\n\n* drop python 2.6 support\n* #5: fix pipedgzipreader.read() not returning anything\n\nv0.3.0 (2017-11-15)\n~~~~~~~~~~~~~~~~~~~\n\n* add gzip compression parameter\n\nv0.2.1 (2017-05-31)\n~~~~~~~~~~~~~~~~~~~\n\n* #3: allow appending to bz2 and lzma files where possible\n\nv0.1.1 (2016-12-02)\n~~~~~~~~~~~~~~~~~~~\n\n* fix a deadlock\n\nv0.1.0 (2016-09-09)\n~~~~~~~~~~~~~~~~~~~\n\n* initial release\n\ncredits\n-------\n\nthe name ``xopen`` was taken from the c function of the same name in the\n`utils.h file which is part of\nbwa <https://github.com/lh3/bwa/blob/83662032a2192d5712996f36069ab02db82acf67/utils.h>`_.\n\nsome ideas were taken from the `canopener project <https://github.com/selassid/canopener>`_.\nif you also want to open s3 files, you may want to use that module instead.\n\n@kyleabeauchamp contributed support for appending to files before this repository was created.\n\n\nmaintainers\n-----------\n\n* marcel martin\n* ruben vorderman\n* for a list of contributors, see <https://github.com/pycompression/xopen/graphs/contributors>\n\n\nlinks\n-----\n\n* `source code <https://github.com/pycompression/xopen/>`_\n* `report an issue <https://github.com/pycompression/xopen/issues>`_\n* `project page on pypi (python package index) <https://pypi.python.org/pypi/xopen/>`_\n",
  "docs_url": null,
  "keywords": "",
  "license": "mit",
  "name": "xopen",
  "package_url": "https://pypi.org/project/xopen/",
  "project_url": "https://pypi.org/project/xopen/",
  "project_urls": {
    "homepage": "https://github.com/pycompression/xopen/"
  },
  "release_url": "https://pypi.org/project/xopen/1.8.0/",
  "requires_dist": [
    "isal >=1.4.1 ; platform_machine == \"x86_64\" or platform_machine == \"AMD64\" or platform_machine == \"aarch64\"",
    "pytest ; extra == 'dev'",
    "zstandard <1 ; extra == 'zstd'"
  ],
  "requires_python": ">=3.8",
  "summary": "open compressed files transparently",
  "version": "1.8.0",
  "releases": [],
  "developers": [
    "marcel.martin@scilifelab.se",
    "r.h.p.vorderman@lumc.nl"
  ],
  "kwds": "xopen pycompression svg pathlib badge",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_xopen",
  "homepage": "",
  "release_count": 36,
  "dependency_ids": [
    "pypi_isal",
    "pypi_pytest",
    "pypi_zstandard"
  ]
}
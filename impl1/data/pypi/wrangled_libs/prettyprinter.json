{
  "classifiers": [
    "development status :: 2 - pre-alpha",
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "natural language :: english",
    "programming language :: python :: 3.5",
    "programming language :: python :: 3.6"
  ],
  "description": "=============\nprettyprinter\n=============\n\ndocumentation_\n\nsyntax-highlighting, declarative and composable pretty printer for python 3.5+\n\n.. code:: bash\n\n    pip install prettyprinter\n\n- drop in replacement for the standard library ``pprint``: just rename ``pprint`` to ``prettyprinter`` in your imports.\n- uses a modified wadler-leijen layout algorithm for optimal formatting\n- write pretty printers for your own types with a dead simple, declarative interface\n\n.. image:: prettyprinterscreenshot.png\n    :alt:\n\n.. image:: ../prettyprinterscreenshot.png\n    :alt:\n\n.. image:: prettyprinterlightscreenshot.png\n    :alt:\n\n.. image:: ../prettyprinterlightscreenshot.png\n    :alt:\n\npretty print common python values:\n\n.. code:: python\n\n    >>> from datetime import datetime\n    >>> from prettyprinter import pprint\n    >>> pprint({'beautiful output': datetime.now()})\n    {\n        'beautiful output': datetime.datetime(\n            year=2017,\n            month=12,\n            day=12,\n            hour=0,\n            minute=43,\n            second=4,\n            microsecond=752094\n        )\n    }\n\nas well as your own, without any manual string formatting:\n\n.. code:: python\n\n    >>> class myclass:\n    ...     def __init__(self, one, two):\n    ...         self.one = one\n    ...         self.two = two\n\n    >>> from prettyprinter import register_pretty, pretty_call\n\n    >>> @register_pretty(myclass)\n    ... def pretty_myclass(value, ctx):\n    ...     return pretty_call(ctx, myclass, one=value.one, two=value.two)\n\n    >>> pprint(myclass((1, 2, 3), {'a': 1, 'b': 2}))\n    myclass(one=(1, 2, 3), two={'a': 1, 'b': 2})\n\n    >>> pprint({'beautiful output': datetime.now(), 'beautiful myclass instance': myclass((1, 2, 3), {'a': 1, 'b': 2})})\n    {\n        'beautiful myclass instance': myclass(\n            one=(1, 2, 3),\n            two={'a': 1, 'b': 2}\n        ),\n        'beautiful output': datetime.datetime(\n            year=2017,\n            month=12,\n            day=12,\n            hour=0,\n            minute=44,\n            second=18,\n            microsecond=384219\n        )\n    }\n\ncomes packaged with the following pretty printer definitions, which you can enable by calling ``prettyprinter.install_extras()``:\n\n- ``datetime`` - (installed by default)\n- ``enum`` - (installed by default)\n- ``pytz`` - (installed by default)\n- ``dataclasses`` - any new class you create will be pretty printed automatically\n- ``attrs`` - pretty prints any new class you create with ``attrs``\n- ``django`` - pretty prints your models and querysets\n- ``numpy`` - pretty prints numpy scalars with explicit types\n- ``requests`` - pretty prints requests, responses, sessions, and more from the ``requests`` library\n\n* free software: mit license\n* documentation: documentation_.\n\n.. _documentation: https://prettyprinter.readthedocs.io\n\n\n=======\nhistory\n=======\n\n0.18.0 (2019-06-21)\n-------------------\n\n* `improve prettyprinting of builtin bound methods. <https://github.com/tommikaikkonen/prettyprinter/pull/57>`_ by `@anntzer <https://github.com/anntzer>`_\n* `fix test suite compatibility with hypothesis4. <https://github.com/tommikaikkonen/prettyprinter/pull/58>`_ by `@anntzer <https://github.com/anntzer>`_\n* `use $colorfgbg to help decide whether to use a dark or light style <https://github.com/tommikaikkonen/prettyprinter/pull/62>`_ by `@crowsonkb <https://github.com/crowsonkb>`_\n* `truncate numpy arrays with ndim >= 2 so that the total printed does not exceed max_seq_len <https://github.com/tommikaikkonen/prettyprinter/pull/63>`_ by `@crowsonkb <https://github.com/crowsonkb>`_\n* fixed ipython_repr_pretty extra raising an exception when printing mock instances (gh #61)\n* added support for pretty printing types.simplenamespace (gh #60)\n* fixed dictionary pretty printing indentation when the value had a comment on the line above (gh #59)\n\n\n0.17.0 (2019-03-14)\n-------------------\n\n* `add prettyprinter for numpy ndarrays. <https://github.com/tommikaikkonen/prettyprinter/pull/47>`_ by `@anntzer <https://github.com/anntzer>`_\n* `add helper to apply default config. <https://github.com/tommikaikkonen/prettyprinter/pull/46>`_ by `@anntzer <https://github.com/anntzer>`_\n* a number of docs and ci improvements: `#43 <https://github.com/tommikaikkonen/prettyprinter/pull/43>`_, `#44 <https://github.com/tommikaikkonen/prettyprinter/pull/44>`_, `#45 <https://github.com/tommikaikkonen/prettyprinter/pull/45>`_ .thanks `@anntzer <https://github.com/anntzer>`_\n* `add support for functools.partialmethod. <https://github.com/tommikaikkonen/prettyprinter/pull/42>`_ by `@anntzer <https://github.com/anntzer>`_\n* `fix typo in changelog. <https://github.com/tommikaikkonen/prettyprinter/pull/40>`_ thanks `@vlad-shcherbina <https://github.com/vlad-shcherbina>`_\n\n0.16.0 (2019-02-27)\n-------------------\n\n* `adds a new extra for numpy. <https://github.com/tommikaikkonen/prettyprinter/pull/39>`_ the extra currently registers pretty printers for numpy scalar types. enable it with ``import prettyprinter; prettyprinter.install_extras(['numpy'])``. thanks `@anntzer <https://github.com/anntzer>`_\n* `c-api named tuples are now automatically prettyprinted. <https://github.com/tommikaikkonen/prettyprinter/pull/38>`_ c-api named tuples are returned from expressions such as ``sys.flags``, ``time.strptime(...)``, and ``os.stat(...)``. the fieldname of each tuple element is annotated using a comment in the output.\n\n0.15.0 (2019-02-25)\n-------------------\n\nthis release brings bugfixes, an enhancement to pathlib prettyprinting (thanks `@anntzer <https://github.com/anntzer>`_ ) and a nice performance boost. there was an redundant subtree call in a tree normalization procedure that caused exponential runtime, worsening quickly if data was highly nested. that extra call is now removed.\n\n* `fix exponential runtime in highly nested data <https://github.com/tommikaikkonen/prettyprinter/pull/34>`_\n* `fix infinite loop when rendering strings in highly nested data <https://github.com/tommikaikkonen/prettyprinter/pull/33>`_\n* `only split path prettyprints on \"/\", not on \"-\" or other nonword chars. <https://github.com/tommikaikkonen/prettyprinter/pull/29>`_ , thanks `@anntzer <https://github.com/anntzer>`_\n* `add vim swapfiles to gitignore <https://github.com/tommikaikkonen/prettyprinter/pull/30>`_ , thanks `@anntzer <https://github.com/anntzer>`_\n* `fix typo <https://github.com/tommikaikkonen/prettyprinter/pull/31>`_ , thanks `@anntzer <https://github.com/anntzer>`_\n\n0.14.0 (2018-07-25)\n-------------------\n\nmost likely no breaking changes.\n\n* added definitions for ``pathlib`` standard library module thanks to github user ``razerm``\n* fixed unexpected error output inside jupyter notebooks thanks to github user ``jdanbrown``\n* fixed missing commas in ``setup.py`` requirements list\n\n0.13.2 (2018-05-29)\n-------------------\n\nno breaking changes.\n\n* fixed the dataclasses pretty printer that had regressed after changes to the dataclasses api. fix was contributed by github user ``dangirsh``.\n\n0.13.1 (2018-02-03)\n-------------------\n\nno breaking changes.\n\n* fixed gh issue #17 where django models showed an incorrect display name for fields with choices.\n\n0.13.0 (2018-02-03)\n-------------------\n\nno breaking changes.\n\n* added definitions for the ``ast`` standard library module thanks to github user ``johnnoone``.\n\n0.12.0 (2018-01-22)\n-------------------\n\nno breaking changes.\n\n* added a definition for classes that look like they were built with ``collections.namedtuple``\n* if a pretty printer raises an exception, it is caught and emitted as a warning, and the default repr implementation will be used instead.\n* added definitions for ``collections.chainmap``, ``collections.defaultdict``, ``collections.deque``, ``functools.partial``, and for exception objects.\n* made pretty printers for primitive types (dict, list, set, etc.) render a subclass constructor around them\n\n\n0.11.0 (2018-01-20)\n-------------------\n\nno breaking changes.\n\n* added python 3.5 support\n* added ``pretty_call_alt`` function that doesn't depend on ``dict`` maintaining insertion order\n* fixed bug in ``set_default_config`` where most configuration values were not updated\n* added ``get_default_config``\n\n0.10.1 (2018-01-10)\n-------------------\n\nno breaking changes.\n\n* fixed regression with types.mappingproxytype not being properly registered.\n\n0.10.0 (2018-01-09)\n-------------------\n\nno breaking changes.\n\n* added support for deferred printer registration, where instead of a concrete type value, you can pass a qualified path to a type as a ``str`` to ``register_pretty``. for an example, see `the deferred printer registration for uuid.uuid <https://github.com/tommikaikkonen/prettyprinter/blob/05187126889ade1c2bf0557a40800e5c44a32bab/prettyprinter/pretty_stdlib.py#l38-l40>`_\n\n0.9.0 (2018-01-03)\n------------------\n\nno breaking changes.\n\n* added pretty printer definition for ``types.mappingproxytype`` thanks to github user `cologler <https://github.com/cologler/>`_\n* added support for ``_repr_pretty_`` in the extra ``ipython_repr_pretty``.\n\n\n0.8.1 (2018-01-01)\n------------------\n\n* fixed issue #7 where having a ``str`` value for ipython's ``highlighting_style`` setting was not properly handled in ``prettyprinter``'s ipython integration, and raised an exception when trying to print data.\n\n0.8.0 (2017-12-31)\n------------------\n\nbreaking changes:\n\n* by default, ``dict`` keys are printed in the default order (insertion order in cpython 3.6+). previously they were sorted like in the ``pprint`` standard library module. to let the user control this, an additional keyword argument ``sort_dict_keys`` was added to ``cpprint``, ``pprint``, and ``pformat``. pretty printer definitions can control ``dict`` key sorting with the ``prettycontext`` instance passed to each pretty printer function.\n\nnon-breaking changes:\n\n* improved performance of rendering colorized output by caching colors.\n* added ``prettyprinter.pretty_repr`` that is assignable to ``__repr__`` dunder methods, so you don't need to write it separately from the pretty printer definition.\n* deprecated use of ``prettycontext.set`` in favor of less misleading ``prettycontext.assoc``\n* defined pretty printing for instances of ``type``, i.e. classes.\n* defined pretty printing for functions\n\n\n\n0.7.0 (2017-12-23)\n------------------\n\nbreaking change: instances of lists, sets, frozensets, tuples and dicts will be truncated to 1000 elements by default when printing.\n\n* added pretty printing definitions for ``dataclasses``\n* improved performance of splitting strings to multiple lines by ~15%\n* added a maximum sequence length that applies to subclasses of lists, sets, frozensets, tuples and dicts. the default is 1000. there is a trailing comment that indicates the number of truncated elements. to remove truncation, you can set ``max_seq_len`` to ``none`` using ``set_default_config`` explained below.\n* added ability to change the default global configuration using ``set_default_config``. the functions accepts zero to many keyword arguments and replaces those values in the global configuration with the ones provided.\n\n.. code:: python\n\n    from prettyprinter import set_default_config\n\n    set_default_config(\n        style='dark',\n        max_seq_len=1000,\n        width=79,\n        ribbon_width=71,\n        depth=none,\n    )\n\n0.6.0 (2017-12-21)\n------------------\n\nno backwards incompatible changes.\n\n* added pretty printer definitions for the ``requests`` library. to use it, include ``'requests'`` in your ``install_extras`` call: ``prettyprinter.install_extras(include=['requests'])``.\n\n0.5.0 (2017-12-21)\n------------------\n\nno backwards incompatible changes.\n\n* added integration for the default python shell\n* wrote docs to explain integration with the default python shell\n* check ``install_extras`` arguments for unknown extras\n\n0.4.0 (2017-12-14)\n------------------\n\n* revised ``comment`` to accept both normal python values and docs, and reversed the argument order to be more pythonic\n\n0.3.0 (2017-12-12)\n------------------\n\n* add ``set_default_style`` function, improve docs on working with a light background\n\n0.2.0 (2017-12-12)\n------------------\n\n* numerous api changes and improvements.\n\n\n0.1.0 (2017-12-07)\n------------------\n\n* first release on pypi.\n",
  "docs_url": null,
  "keywords": "prettyprinter",
  "license": "mit license",
  "name": "prettyprinter",
  "package_url": "https://pypi.org/project/prettyprinter/",
  "project_url": "https://pypi.org/project/prettyprinter/",
  "project_urls": {
    "Homepage": "https://github.com/tommikaikkonen/prettyprinter"
  },
  "release_url": "https://pypi.org/project/prettyprinter/0.18.0/",
  "requires_dist": [],
  "requires_python": "",
  "summary": "syntax-highlighting, declarative and composable pretty printer for python 3.5+",
  "version": "0.18.0",
  "releases": [],
  "developers": [
    "kaikkonentommi@gmail.com",
    "tommi_kaikkonen"
  ],
  "kwds": "prettyprinter prettyprinterscreenshot prettyprinterlightscreenshot prettyprints prettyprinting",
  "license_kwds": "mit license",
  "libtype": "pypi",
  "id": "pypi_prettyprinter",
  "homepage": "https://github.com/tommikaikkonen/prettyprinter",
  "release_count": 25,
  "dependency_ids": []
}
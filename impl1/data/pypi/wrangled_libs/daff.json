{
  "classifiers": [
    "development status :: 3 - alpha",
    "license :: osi approved :: mit license",
    "topic :: utilities"
  ],
  "description": "[![build status](https://travis-ci.org/paulfitz/daff.svg?branch=master)](https://travis-ci.org/paulfitz/daff)\n[![npm version](https://badge.fury.io/js/daff.svg)](http://badge.fury.io/js/daff)\n[![gem version](https://badge.fury.io/rb/daff.svg)](http://badge.fury.io/rb/daff)\n[![pypi version](https://badge.fury.io/py/daff.svg)](http://badge.fury.io/py/daff)\n[![php version](https://badge.fury.io/ph/paulfitz%2fdaff-php.svg)](http://badge.fury.io/ph/paulfitz%2fdaff-php)\n[![bower version](https://badge.fury.io/bo/daff.svg)](http://badge.fury.io/bo/daff)\n![badge count](http://img.shields.io/:badges-7/7-33aa33.svg)\n\ndaff: data diff\n===============\n\nthis is a library for comparing tables, producing a summary of their\ndifferences, and using such a summary as a patch file.  it is\noptimized for comparing tables that share a common origin, in other\nwords multiple versions of the \"same\" table.\n\nfor a live demo, see:\n> http://paulfitz.github.com/daff/\n\ninstall the library for your favorite language:\n````sh\nnpm install daff -g  # node/javascript\npip install daff     # python\ngem install daff     # ruby\ncomposer require paulfitz/daff-php  # php\ninstall.packages('daff') # r wrapper by edwin de jonge\nbower install daff   # web/javascript\n````\n\nother translations are available here:\n> https://github.com/paulfitz/daff/releases\n\nor use the library to view csv diffs on github via a chrome extension:\n> https://github.com/theodi/csvhub\n\nthe diff format used by `daff` is specified here:\n> http://paulfitz.github.io/daff-doc/spec.html\n\nthis library is a stripped down version of the coopy toolbox (see\nhttp://share.find.coop).  to compare tables from different origins,\nor with automatically generated ids, or other complications, check out\nthe coopy toolbox.\n\nthe program\n-----------\n\nyou can run `daff`/`daff.py`/`daff.rb` as a utility program:\n````\n$ daff\ndaff can produce and apply tabular diffs.\ncall as:\n  daff a.csv b.csv\n  daff [--color] [--no-color] [--output output.csv] a.csv b.csv\n  daff [--output output.html] a.csv b.csv\n  daff [--www] a.csv b.csv\n  daff parent.csv a.csv b.csv\n  daff --input-format sqlite a.db b.db\n  daff patch [--inplace] a.csv patch.csv\n  daff merge [--inplace] parent.csv a.csv b.csv\n  daff trim [--output output.csv] source.csv\n  daff render [--output output.html] diff.csv\n  daff copy in.csv out.tsv\n  daff in.csv\n  daff git\n  daff version\n\nthe --inplace option to patch and merge will result in modification of a.csv.\n\nif you need more control, here is the full list of flags:\n  daff diff [--output output.csv] [--context num] [--all] [--act act] a.csv b.csv\n     --act act:     show only a certain kind of change (update, insert, delete, column)\n     --all:         do not prune unchanged rows or columns\n     --all-rows:    do not prune unchanged rows\n     --all-columns: do not prune unchanged columns\n     --color:       highlight changes with terminal colors (default in terminals)\n     --context num: show num rows of context (0=none)\n     --context-columns num: show num columns of context (0=none)\n     --fail-if-diff: return status is 0 if equal, 1 if different, 2 if problem\n     --id:          specify column to use as primary key (repeat for multi-column key)\n     --ignore:      specify column to ignore completely (can repeat)\n     --index:       include row/columns numbers from original tables\n     --input-format [csv|tsv|ssv|psv|json|sqlite]: set format to expect for input\n     --eol [crlf|lf|cr|auto]: separator between rows of csv output.\n     --no-color:    make sure terminal colors are not used\n     --ordered:     assume row order is meaningful (default for csv)\n     --output-format [csv|tsv|ssv|psv|json|copy|html]: set format for output\n     --padding [dense|sparse|smart]: set padding method for aligning columns\n     --table name:  compare the named table, used with sql sources. if name changes, use 'n1:n2'\n     --unordered:   assume row order is meaningless (default for json formats)\n     -w / --ignore-whitespace: ignore changes in leading/trailing whitespace\n     -i / --ignore-case: ignore differences in case\n\n  daff render [--output output.html] [--css css.css] [--fragment] [--plain] diff.csv\n     --css css.css: generate a suitable css file to go with the html\n     --fragment:    generate just a html fragment rather than a page\n     --plain:       do not use fancy utf8 characters to make arrows prettier\n     --unquote:     do not quote html characters in html diffs\n     --www:         send output to a browser\n````\n\nformats supported are csv, tsv, sqlite (with `--input-format sqlite` or\nthe `.sqlite` extension), and ndjson.\n\nusing with git\n--------------\n\nrun `daff git csv` to install daff as a diff and merge handler\nfor `*.csv` files in your repository.  run `daff git` for instructions\non doing this manually. your csv diffs and merges will get smarter,\nsince git will suddenly understand about rows and columns, not just lines:\n\n![example csv diff](http://paulfitz.github.io/daff-doc/images/daff_vs_diff.png)\n\nthe library\n-----------\n\nyou can use `daff` as a library from any supported language.  we take\nhere the example of javascript.  to use `daff` on a webpage,\nfirst include `daff.js`:\n```html\n<script src=\"daff.js\"></script>\n```\nor if using node outside the browser:\n```js\nvar daff = require('daff');\n```\n\nfor concreteness, assume we have two versions of a table,\n`data1` and `data2`:\n```js\nvar data1 = [\n    ['country','capital'],\n    ['ireland','dublin'],\n    ['france','paris'],\n    ['spain','barcelona']\n];\nvar data2 = [\n    ['country','code','capital'],\n    ['ireland','ie','dublin'],\n    ['france','fr','paris'],\n    ['spain','es','madrid'],\n    ['germany','de','berlin']\n];\n```\n\nto make those tables accessible to the library, we wrap them\nin `daff.tableview`:\n```js\nvar table1 = new daff.tableview(data1);\nvar table2 = new daff.tableview(data2);\n```\n\nwe can now compute the alignment between the rows and columns\nin the two tables:\n```js\nvar alignment = daff.comparetables(table1,table2).align();\n```\n\nto produce a diff from the alignment, we first need a table\nfor the output:\n```js\nvar data_diff = [];\nvar table_diff = new daff.tableview(data_diff);\n```\n\nusing default options for the diff:\n```js\nvar flags = new daff.compareflags();\nvar highlighter = new daff.tablediff(alignment,flags);\nhighlighter.hilite(table_diff);\n```\n\nthe diff is now in `data_diff` in highlighter format, see\nspecification here:\n> http://paulfitz.github.io/daff-doc/spec.html\n\n```js\n[ [ '!', '', '+++', '' ],\n  [ '@@', 'country', 'code', 'capital' ],\n  [ '+', 'ireland', 'ie', 'dublin' ],\n  [ '+', 'france', 'fr', 'paris' ],\n  [ '->', 'spain', 'es', 'barcelona->madrid' ],\n  [ '+++', 'germany', 'de', 'berlin' ] ]\n```\n\nfor visualization, you may want to convert this to a html table\nwith appropriate classes on cells so you can color-code inserts,\ndeletes, updates, etc.  you can do this with:\n```js\nvar diff2html = new daff.diffrender();\ndiff2html.render(table_diff);\nvar table_diff_html = diff2html.html();\n```\n\nfor 3-way differences (that is, comparing two tables given knowledge\nof a common ancestor) use `daff.comparetables3` (give ancestor\ntable as the first argument).\n\nhere is how to apply that difference as a patch:\n```js\nvar patcher = new daff.highlightpatch(table1,table_diff);\npatcher.apply();\n// table1 should now equal table2\n```\n\nfor other languages, you should find sample code in\nthe packages on the [releases](https://github.com/paulfitz/daff/releases) page.\n\nsupported languages\n-------------------\n\nthe `daff` library is written in [haxe](http://haxe.org/), which\ncan be translated reasonably well into at least the following languages:\n\n * javascript\n * python\n * java\n * c#\n * c++\n * ruby (using an [unofficial haxe target](https://github.com/paulfitz/haxe) developed for `daff`)\n * php\n\nsome translations are done for you on the\n[releases](https://github.com/paulfitz/daff/releases) page.\nto make another translation, or to compile from source\nfirst follow the [haxe language introduction](https://haxe.org/documentation/introduction/language-introduction.html) for the\nlanguage you care about.  at the time of writing, if you are on osx, you should\ninstall haxe using `brew install haxe`.  then do one of:\n\n```\nmake js\nmake php\nmake py\nmake java\nmake cs\nmake cpp\n```\n\nfor each language, the `daff` library expects to be handed an interface to tables you create, rather than creating them\nitself.  this is to avoid inefficient copies from one format to another.  you'll find a `simpletable` class you can use if\nyou find this awkward.\n\nother possibilities:\n\n * there's a daff wrapper for r written by [edwin de jonge](https://github.com/edwindj), see https://github.com/edwindj/daff and http://cran.r-project.org/web/packages/daff\n * there's a hand-written ruby port by [james smith](https://github.com/floppy), see https://github.com/theodi/coopy-ruby\n\napi documentation\n-----------------\n\n * you can browse the `daff` classes at http://paulfitz.github.io/daff-doc/\n\nsponsors\n--------\n\n<img src=\"http://datacommons.coop/images/the_zen_of_venn.png\" alt=\"the zen of venn\" height=\"100\">\nthe <a href=\"https://datacommons.coop\">data commons co-op</a>,  \"perhaps the geekiest of all cooperative organizations on the planet,\" has given great moral support during the development of `daff`.\ndonate a multiple of `42.42` in your currency to let them know you care: <a href=\"https://datacommons.coop/donate/\">https://datacommons.coop/donate/</a>.\n\nreading material\n----------------\n\n * https://specs.frictionlessdata.io/tabular-diff : a specification of the diff format we use.\n * http://theodi.org/blog/csvhub-github-diffs-for-csv-files : using this library with github.\n * https://github.com/ropensci/unconf/issues/19 : a thread about diffing data in which daff shows up in at least four guises (see if you can spot them all).\n * http://theodi.org/blog/adapting-git-simple-data : using this library with gitlab.\n * http://okfnlabs.org/blog/2013/08/08/diffing-and-patching-data.html : a summary of where the library came from.\n * http://blog.okfn.org/2013/07/02/git-and-github-for-data/ : a post about storing small data in git/github.\n * http://blog.ouseful.info/2013/08/27/diff-or-chop-github-csv-data-files-and-openrefine/ : counterpoint - a post discussing tracked-changes rather than diffs.\n * http://blog.byronjsmith.com/makefile-shortcuts.html : a tutorial on using `make` for data, with daff in the mix. \"since git considers changes on a per-line basis,\n   looking at diffs of comma-delimited and tab-delimited files can get obnoxious. the program daff fixes this problem.\"\n\n## license\n\ndaff is distributed under the mit license.",
  "docs_url": null,
  "keywords": "data diff patch",
  "license": "mit",
  "name": "daff",
  "package_url": "https://pypi.org/project/daff/",
  "project_url": "https://pypi.org/project/daff/",
  "project_urls": {
    "Homepage": "https://github.com/paulfitz/daff"
  },
  "release_url": "https://pypi.org/project/daff/1.3.46/",
  "requires_dist": [],
  "requires_python": "",
  "summary": "diff and patch tables",
  "version": "1.3.46",
  "releases": [],
  "developers": [
    "paul@robotrebuilt.com",
    "paul_fitzpatrick"
  ],
  "kwds": "fury daff_vs_diff patch versions patcher",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_daff",
  "homepage": "https://github.com/paulfitz/daff",
  "release_count": 59,
  "dependency_ids": []
}
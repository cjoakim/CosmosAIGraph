{
  "classifiers": [
    "development status :: 5 - production/stable",
    "development status :: 6 - mature",
    "intended audience :: developers",
    "intended audience :: information technology",
    "intended audience :: system administrators",
    "license :: osi approved :: gnu lesser general public license v3 or later (lgplv3+)",
    "operating system :: posix",
    "operating system :: posix :: linux",
    "operating system :: posix :: sunos/solaris",
    "programming language :: python",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.5",
    "programming language :: python :: 3.6",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9"
  ],
  "description": "python crontab\n--------------\n\n.. image:: https://gitlab.com/doctormo/python-crontab/raw/master/branding.svg\n\n.. image:: https://badge.fury.io/py/python-crontab.svg\n    :target: https://badge.fury.io/py/python-crontab\n.. image:: https://img.shields.io/badge/license-lgpl%20v3-blue.svg\n    :target: https://gitlab.com/doctormo/python-crontab/raw/master/copying\n\nbug reports and development\n===========================\n\nplease report any problems to the `gitlab issues tracker <https://gitlab.com/doctormo/python-crontab/issues>`_. please use git and push patches to the `gitlab project code hosting <https://gitlab.com/doctormo/python-crontab>`_.\n\n**note:** if you get the error ``got an unexpected keyword argument 'user'`` when using crontab, you have the wrong module installed. you need to install ``python-crontab`` and not ``crontab`` from pypi or your local package manager and try again.\n\ndescription\n===========\n\ncrontab module for reading and writing crontab files and accessing the system cron\nautomatically and simply using a direct api.\n\ncomparing the `below chart <http://en.wikipedia.org/wiki/cron#cron_expression>`_\nyou will note that w, l, # and ? symbols are not supported as they are not\nstandard linux or systemv crontab format.\n\n+-------------+-----------+-----------------+-------------------+-------------+\n|field name   |mandatory  |allowed values   |special characters |extra values |\n+=============+===========+=================+===================+=============+\n|minutes      |yes        |0-59             |\\* / , -           | < >         |\n+-------------+-----------+-----------------+-------------------+-------------+\n|hours        |yes        |0-23             |\\* / , -           | < >         |\n+-------------+-----------+-----------------+-------------------+-------------+\n|day of month |yes        |1-31             |\\* / , -           | < >         |\n+-------------+-----------+-----------------+-------------------+-------------+\n|month        |yes        |1-12 or jan-dec  |\\* / , -           | < >         |\n+-------------+-----------+-----------------+-------------------+-------------+\n|day of week  |yes        |0-6 or sun-sat   |\\* / , -           | < >         |\n+-------------+-----------+-----------------+-------------------+-------------+\n\nextra values are '<' for minimum value, such as 0 for minutes or 1 for months.\nand '>' for maximum value, such as 23 for hours or 12 for months.\n\nsupported special cases allow crontab lines to not use fields.\nthese are the supported aliases which are not available in systemv mode:\n\n=========== ============\ncase        meaning    \n=========== ============\n@reboot     every boot \n@hourly     0 * * * *  \n@daily      0 0 * * *  \n@weekly     0 0 * * 0  \n@monthly    0 0 1 * *  \n@yearly     0 0 1 1 *  \n@annually   0 0 1 1 *  \n@midnight   0 0 * * *  \n=========== ============\n\nhow to use the module\n=====================\n\nhere is a simple example of how python-crontab is typically used. first the \ncrontab class is used to instantiate a cron object, then the cron object is used\nto declaratively manipulate the cron (spawning a new job in this case). lastly,\ndeclared changes get written to the crontab by calling write on the object::\n\n    from crontab import crontab\n    cron = crontab(user='root')\n    job = cron.new(command='echo hello_world') \n    job.minute.every(1)\n    cron.write()\n\nalternatively, you can use the with context manager which will automatically \ncall write on the cron object upon exit::\n\n    with crontab(user='root') as cron:\n        job = cron.new(command='echo hello_world')\n        job.minute.every(1)\n    print('cron.write() was just executed')\n\n**note:** several users have reported their new crontabs not saving automatically or that the module doesn't do anything. you **must** use write() if you want your edits to be saved out. see below for full details on the use of the write function.\n\ngetting access to a crontab can happen in five ways, three system methods that\nwill work only on unix and require you to have the right permissions::\n\n    from crontab import crontab\n\n    empty_cron    = crontab()\n    my_user_cron  = crontab(user=true)\n    users_cron    = crontab(user='username')\n\nand two ways from non-system sources that will work on windows too::\n\n    file_cron = crontab(tabfile='filename.tab')\n    mem_cron = crontab(tab=\"\"\"\n      * * * * * command\n    \"\"\")\n\nspecial per-command user flag for vixie cron format (new in 1.9)::\n\n    system_cron = crontab(tabfile='/etc/crontab', user=false)\n    job = system_cron[0]\n    job.user != none\n    system_cron.new(command='new_command', user='root')\n\ncreating a new job is as simple as::\n\n    job = cron.new(command='/usr/bin/echo')\n\nand setting the job's time restrictions::\n\n    job.minute.during(5,50).every(5)\n    job.hour.every(4)\n    job.day.on(4, 5, 6)\n\n    job.dow.on('sun')\n    job.dow.on('sun', 'fri')\n    job.month.during('apr', 'nov')\n\neach time restriction will clear the previous restriction::\n\n    job.hour.every(10) # set to * */10 * * *\n    job.hour.on(2)     # set to * 2 * * *\n\nappending restrictions is explicit::\n\n    job.hour.every(10)  # set to * */10 * * *\n    job.hour.also.on(2) # set to * 2,*/10 * * *\n\nsetting all time slices at once::\n\n    job.setall(2, 10, '2-4', '*/2', none)\n    job.setall('2 10 * * *')\n\nsetting the slice to a python date object::\n\n    job.setall(time(10, 2))\n    job.setall(date(2000, 4, 2))\n    job.setall(datetime(2000, 4, 2, 10, 2))\n\nrun a jobs command. running the job here will not effect it's\nexisting schedule with another crontab process::\n\n    job_standard_output = job.run()\n\ncreating a job with a comment::\n\n    job = cron.new(command='/foo/bar', comment='someid')\n\ncreating a job in the middle of the crontab::\n\n    job = cron.new('/bin/a', before='someid')\n    job = cron.new('/bin/b', before=jobitem)\n    job = cron.new('/bin/c', before=re.compile('id*'))\n    job = cron.new('/bin/d', before=cron.find_command('/usr/bin/existing'))\n\nget the comment or command for a job::\n\n    command = job.command\n    comment = job.comment\n\nmodify the comment or command on a job::\n\n    job.set_command(\"new_script.sh\")\n    job.set_comment(\"new id or comment here\")\n\ndisabled or enable job::\n\n    job.enable()\n    job.enable(false)\n    false is job.is_enabled()\n\nvalidity check::\n\n    true is job.is_valid()\n\nuse a special syntax::\n\n    job.every_reboot()\n\nfind an existing job by command sub-match or regular expression::\n\n    iter = cron.find_command('bar') # matches foobar1\n    iter = cron.find_command(re.compile(r'b[ab]r$'))\n\nfind an existing job by comment exact match or regular expression::\n\n    iter = cron.find_comment('id or some text')\n    iter = cron.find_comment(re.compile(' or \\w'))\n\nfind an existing job by schedule::\n\n    iter = cron.find_time(2, 10, '2-4', '*/2', none)\n    iter = cron.find_time(\"*/2 * * * *\")\n\nclean a job of all rules::\n\n    job.clear()\n\niterate through all jobs, this includes disabled (commented out) cron jobs::\n\n    for job in cron:\n        print(job)\n\niterate through all lines, this includes all comments and empty lines::\n\n    for line in cron.lines:\n        print(line)\n\nremove items::\n\n    cron.remove( job )\n    cron.remove_all('echo')\n    cron.remove_all(comment='foo')\n    cron.remove_all(time='*/2')\n\nclear entire cron of all jobs::\n\n    cron.remove_all()\n\nwrite crontab back to system or filename::\n\n    cron.write()\n\nwrite crontab to new filename::\n\n    cron.write( 'output.tab' )\n\nwrite to this user's crontab (unix only)::\n\n    cron.write_to_user( user=true )\n\nwrite to some other user's crontab::\n\n    cron.write_to_user( user='bob' )\n\nvalidate a cron time string::\n\n    from crontab import cronslices\n    bool = cronslices.is_valid('0/2 * * * *')\n\ncompare list of cron objects against another and return the difference::\n\n    difference = set([cronitem1, cronitem2, cronitem3]) - set([cronitem2, cronitem3])\n\ncompare two cronitems for equality::\n\n    cronitem1 = crontab(tab=\"* * * * * command # example job\")\n    cronitem2 = crontab(tab=\"10 * * * * command # example job 2\")\n    if cronitem1 != cronitem2:\n        print(\"cronjobs do not match\")\n\nenvironment variables\n=====================\n\nsome versions of vixie cron support variables outside of the command line.\nsometimes just update the envronment when commands are run, the cronie fork\nof vixie cron also supports cron_tz which looks like a regular variable but\nactually changes the times the jobs are run at.\n\nvery old vixie crons don't support per-job variables, but most do.\n\niterate through cron level environment variables::\n\n    for (name, value) in cron.env.items():\n        print(name)\n        print(value)\n\ncreate new or update cron level environment variables::\n\n    print(cron.env['shell'])\n    cron.env['shell'] = '/bin/bash'\n    print(cron.env)\n\neach job can also have a list of environment variables::\n\n    for job in cron:\n        job.env['new_var'] = 'a'\n        print(job.env)\n\n\nproceeding unit confusion\n=========================\n\nit is sometimes logical to think that job.hour.every(2) will set all proceeding\nunits to '0' and thus result in \"0 \\*/2 * * \\*\". instead you are controlling\nonly the hours units and the minute column is unaffected. the real result would\nbe \"\\* \\*/2 * * \\*\" and maybe unexpected to those unfamiliar with crontabs.\n\nthere is a special 'every' method on a job to clear the job's existing schedule\nand replace it with a simple single unit::\n\n    job.every(4).hours()  == '0 */4 * * *'\n    job.every().dom()     == '0 0 * * *'\n    job.every().month()   == '0 0 0 * *'\n    job.every(2).dows()   == '0 0 * * */2'\n\nthis is a convenience method only, it does normal things with the existing api.\n\nrunning the scheduler\n=====================\n\nthe module is able to run a cron tab as a daemon as long as the optional\ncroniter module is installed; each process will block and errors will\nbe logged (new in 2.0).\n\n(note this functionality is new and not perfect, if you find bugs report them!)\n\nrunning the scheduler::\n\n    tab = crontab(tabfile='myscripts.tab')\n    for result in tab.run_scheduler():\n        print(\"return code: {result.returncode}\")\n        print(\"standard out: {result.stdout}\")\n        print(\"standard err: {result.stderr}\")\n\ndo not do this, it won't work because it returns generator function::\n\n    tab.run_scheduler()\n\ntimeout and cadence can be changed for testing or error management::\n\n    for result in tab.run_scheduler(timeout=600):\n        print(\"will run jobs every 1 minutes for ten minutes from now()\")\n\n    for result in tab.run_scheduler(cadence=1, warp=true):\n        print(\"will run jobs every 1 second, counting each second as 1 minute\")\n\nfrequency calculation\n=====================\nevery job's schedule has a frequency. we can attempt to calculate the number\nof times a job would execute in a give amount of time. we have two variants\n`frequency_per_*` and `frequency_at_*` calculations. the `freqency_at_*` \nalways returnes *times* a job would execute and is aware of leap years.\n\n\n`frequency_per_*`\n-----------------\nfor `frequency_per_*` we have three simple methods::\n\n    job.setall(\"1,2 1,2 * * *\")\n    job.frequency_per_day() == 4\n\nthe per year frequency method will tell you how many **days** a year the\njob would execute::\n\n    job.setall(\"* * 1,2 1,2 *\")\n    job.frequency_per_year(year=2010) == 4\n\nthese are combined to give the number of times a job will execute in any year::\n\n    job.setall(\"1,2 1,2 1,2 1,2 *\")\n    job.frequency(year=2010) == 16\n\nfrequency can be quickly checked using python built-in operators::\n\n    job < \"*/2 * * * *\"\n    job > job2\n    job.slices == \"*/5\"\n\n\n`frequency_at_*`\n----------------\nfor `frequency_at_*` we have four simple methods.\n\nthe at per hour frequency method will tell you how many times the job would\nexecute at a given hour::\n\n    job.setall(\"*/2 0 * * *\")\n    job.frequency_at_hour() == 30\n    job.frequency_at_hour(year=2010, month=1, day=1, hour=0) == 30  # even hour \n    job.frequency_at_hour(year=2010, month=1, day=1, hour=1) == 0   # odd hour\n\nthe at day frequency method parameterized tells you how many times the job\nwould execute at a given day::\n\n    job.setall(\"0 0 * * 1,2\")\n    job.frequency_at_day(year=2010, month=1, day=18) == 24 # mon jan 18th 2020\n    job.frequency_at_day(year=2010, month=1, day=21) == 0  # thu jan 21th 2020\n\nthe at month frequency method will tell you how many times the job would\nexecute at a given month::\n\n    job.setall(\"0 0 * * *\")\n    job.frequency_at_month() == <output_of_current_month>\n    job.frequency_at_month(year=2010, month=1) == 31\n    job.frequency_at_month(year=2010, month=2) == 28\n    job.frequency_at_month(year=2012, month=2) == 29  # leap year\n\nthe at year frequency method will tell you how many times a year the\njob would execute::\n\n    job.setall(\"* * 3,29 2 *\")\n    job.frequency_at_year(year=2021) == 24\n    job.frequency_at_year(year=2024) == 48  # leap year\n\n\nlog functionality\n=================\n\nthe log functionality will read a cron log backwards to find you the last run\ninstances of your crontab and cron jobs.\n\nthe crontab will limit the returned entries to the user the crontab is for::\n\n    cron = crontab(user='root')\n\n    for d in cron.log:\n        print(d['pid'] + \" - \" + d['date'])\n\neach job can return a log iterator too, these are filtered so you can see when\nthe last execution was::\n\n    for d in cron.find_command('echo')[0].log:\n        print(d['pid'] + \" - \" + d['date'])\n\nall system crontabs functionality\n=================================\n\nthe crontabs (note the plural) module can attempt to find all crontabs on the\nsystem. this works well for linux systems with known locations for cron files\nand user spolls. it will even extract anacron jobs so you can get a picture\nof all the jobs running on your system::\n\n    from crontabs import crontabs\n    \n    for cron in crontabs():\n        print(repr(cron))\n\nall jobs can be brought together to run various searches, all jobs are added\nto a crontab object which can be used as documented above::\n\n   jobs = crontabs().all.find_command('foo')\n\nschedule functionality\n======================\n\nif you have the croniter python module installed, you will have access to a\nschedule on each job. for example if you want to know when a job will next run::\n\n    schedule = job.schedule(date_from=datetime.now())\n\nthis creates a schedule croniter based on the job from the time specified. the\ndefault date_from is the current date/time if not specified. next we can get\nthe datetime of the next job::\n\n    datetime = schedule.get_next()\n\nor the previous::\n\n    datetime = schedule.get_prev()\n\nthe get methods work in the same way as the default croniter, except that they\nwill return datetime objects by default instead of floats. if you want the\noriginal functionality, pass float into the method when calling::\n\n    datetime = schedule.get_current(float)\n\nif you don't have the croniter module installed, you'll get an importerror when\nyou first try using the schedule function on your cron job object.\n\ndescriptor functionality\n========================\n\nif you have the cron-descriptor module installed, you will be able to ask for a\ntranslated string which describes the frequency of the job in the current\nlocale language. this should be mostly human readable.\n\n\n    print(job.description(use_24hour_time_format=true))\n\nsee cron-descriptor for details of the supported languages and options.\n\nextra support\n=============\n\n - customise the location of the crontab command by setting the global cron_command\n   or the per-object cron_command attribute.\n - support for vixie cron with username addition with user flag\n - support for sunos, aix & hp with compatibility 'systemv' mode.\n - python 3 (3.7, 3.8, 3.10) tested, python 2.6, 2.7 removed from support.\n - windows support works for non-system crontabs only.\n   ( see mem_cron and file_cron examples above for usage )\n",
  "docs_url": null,
  "keywords": "",
  "license": "lgplv3",
  "name": "python-crontab",
  "package_url": "https://pypi.org/project/python-crontab/",
  "project_url": "https://pypi.org/project/python-crontab/",
  "project_urls": {
    "Homepage": "https://gitlab.com/doctormo/python-crontab/"
  },
  "release_url": "https://pypi.org/project/python-crontab/3.0.0/",
  "requires_dist": [
    "python-dateutil",
    "cron-descriptor ; extra == 'cron-description'",
    "croniter ; extra == 'cron-schedule'"
  ],
  "requires_python": "",
  "summary": "python crontab api",
  "version": "3.0.0",
  "releases": [],
  "developers": [
    "doctormo@gmail.com",
    "martin_owens"
  ],
  "kwds": "crontab file_cron crontabs crons system_cron",
  "license_kwds": "lgplv3",
  "libtype": "pypi",
  "id": "pypi_python_crontab",
  "homepage": "https://gitlab.com/doctormo/python-crontab/",
  "release_count": 66,
  "dependency_ids": [
    "pypi_cron_descriptor",
    "pypi_croniter",
    "pypi_python_dateutil"
  ]
}
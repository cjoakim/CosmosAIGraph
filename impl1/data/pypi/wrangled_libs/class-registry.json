{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "programming language :: python :: 2",
    "programming language :: python :: 2.7",
    "programming language :: python :: 3",
    "programming language :: python :: 3.5",
    "programming language :: python :: 3.6",
    "topic :: software development :: libraries :: python modules"
  ],
  "description": ".. image:: https://travis-ci.org/eflglobal/class-registry.svg?branch=master\n   :target: https://travis-ci.org/eflglobal/class-registry\n.. image:: https://readthedocs.org/projects/class-registry/badge/?version=latest\n   :target: http://class-registry.readthedocs.io/\n\n=============\nclassregistry\n=============\n\nat the intersection of the registry and factory patterns lies the\n``classregistry``:\n\n- define global factories that generate new class instances based on\n  configurable keys.\n- seamlessly create powerful service registries.\n- integrate with setuptools's ``entry_points`` system to make your registries\n  infinitely extensible by 3rd-party libraries!\n- and more!\n\n---------------\ngetting started\n---------------\n\ncreate a registry using the ``class_registry.classregistry`` class, then\ndecorate any classes that you wish to register with its ``register`` method:\n\n.. code-block:: python\n\n   from class_registry import classregistry\n\n   pokedex = classregistry()\n\n   @pokedex.register('fire')\n   class charizard(pokemon):\n     ...\n\n   @pokedex.register('grass')\n   class bulbasaur(pokemon):\n     ...\n\n   @pokedex.register('water')\n   class squirtle(pokemon):\n     ...\n\nto create a class instance from a registry, use the subscript operator:\n\n.. code-block:: python\n\n   # charizard, i choose you!\n   fighter1 = pokedex['fire']\n\n   # charizard fainted!\n   # how come my rival always picks the type that my pok\u00e9mon is weak against??\n   fighter2 = pokedex['grass']\n\nadvanced usage\n--------------\n\nthere's a whole lot more you can do with classregistry, including:\n\n- provide args and kwargs to new class instances.\n- automatically register non-abstract classes.\n- integrate with setuptools's ``entry_points`` system so that 3rd-party\n  libraries can add their own classes to your registries.\n- wrap your registry in an instance cache to create a service registry.\n- and more!\n\nfor more advanced usage, `check out the documentation on rtd`_!\n\n------------\nrequirements\n------------\n\nclassregistry is compatible with python versions 3.6, 3.5 and 2.7.\n\n------------\ninstallation\n------------\n\ninstall the latest stable version via pip::\n\n   pip install class-registry\n\n\n\n.. _check out the documentation on rtd: https://class-registry.readthedocs.org/\n\n\n",
  "docs_url": null,
  "keywords": "registry pattern",
  "license": "mit",
  "name": "class-registry",
  "package_url": "https://pypi.org/project/class-registry/",
  "project_url": "https://pypi.org/project/class-registry/",
  "project_urls": {
    "Homepage": "https://class-registry.readthedocs.io/"
  },
  "release_url": "https://pypi.org/project/class-registry/2.1.2/",
  "requires_dist": [
    "six",
    "typing; python_version < \"3.0\""
  ],
  "requires_python": "",
  "summary": "factory+registry pattern for python classes.",
  "version": "2.1.2",
  "releases": [],
  "developers": [
    "phoenix.zerin@eflglobal.com",
    "phoenix_zerin"
  ],
  "kwds": "class_registry registry classregistry registries setuptools",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_class_registry",
  "homepage": "https://class-registry.readthedocs.io/",
  "release_count": 6,
  "dependency_ids": [
    "pypi_six",
    "pypi_typing"
  ]
}
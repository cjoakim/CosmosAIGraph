{
  "classifiers": [
    "development status :: 5 - production/stable",
    "environment :: console",
    "intended audience :: developers",
    "intended audience :: system administrators",
    "license :: osi approved :: mit license",
    "operating system :: os independent",
    "programming language :: python",
    "programming language :: python :: 2",
    "programming language :: python :: 3",
    "topic :: internet :: file transfer protocol (ftp)",
    "topic :: software development :: libraries :: python modules",
    "topic :: system :: filesystems"
  ],
  "description": "|  |downloads| |stars| |forks| |contributors| |coverage|\n|  |version| |packages| |license|\n|  |github-actions| |appveyor| |doc| |twitter|\n\n.. |downloads| image:: https://img.shields.io/pypi/dm/pyftpdlib.svg\n    :target: https://pepy.tech/project/pyftpdlib\n    :alt: downloads\n\n.. |stars| image:: https://img.shields.io/github/stars/giampaolo/pyftpdlib.svg\n    :target: https://github.com/giampaolo/pyftpdlib/stargazers\n    :alt: github stars\n\n.. |forks| image:: https://img.shields.io/github/forks/giampaolo/pyftpdlib.svg\n    :target: https://github.com/giampaolo/pyftpdlib/network/members\n    :alt: github forks\n\n.. |contributors| image:: https://img.shields.io/github/contributors/giampaolo/pyftpdlib.svg\n    :target: https://github.com/giampaolo/pyftpdlib/graphs/contributors\n    :alt: contributors\n\n.. |github-actions| image:: https://img.shields.io/github/actions/workflow/status/giampaolo/pyftpdlib/.github/workflows/tests.yml\n    :target: https://github.com/giampaolo/pyftpdlib/actions\n    :alt: gh actions\n\n.. |appveyor| image:: https://img.shields.io/appveyor/build/giampaolo/pyftpdlib/master.svg?maxage=3600&label=windows%20(py2)\n    :target: https://ci.appveyor.com/project/giampaolo/pyftpdlib\n    :alt: windows (py2, windows)\n\n.. |coverage| image:: https://img.shields.io/codecov/c/github/giampaolo/pyftpdlib/update-ci?label=coverage\n    :target: https://codecov.io/gh/giampaolo/pyftpdlib\n    :alt: test coverage\n\n.. |doc| image:: https://readthedocs.org/projects/pyftpdlib/badge/?version=latest\n    :target: https://pyftpdlib.readthedocs.io/en/latest/\n    :alt: documentation status\n\n.. |version| image:: https://img.shields.io/pypi/v/pyftpdlib.svg?label=pypi\n    :target: https://pypi.org/project/pyftpdlib\n    :alt: latest version\n\n.. |py-versions| image:: https://img.shields.io/pypi/pyversions/psutil.svg\n    :alt: supported python versions\n\n.. |packages| image:: https://repology.org/badge/tiny-repos/python:pyftpdlib.svg\n    :target: https://repology.org/metapackage/python:pyftpdlib/versions\n    :alt: binary packages\n\n.. |license| image:: https://img.shields.io/pypi/l/pyftpdlib.svg\n    :target: https://github.com/giampaolo/pyftpdlib/blob/master/license\n    :alt: license\n\n.. |twitter| image:: https://img.shields.io/twitter/follow/grodola.svg?label=follow&style=flat&logo=twitter&logocolor=4fadff\n    :target: https://twitter.com/grodola\n    :alt: twitter follow\n\nquick links\n===========\n\n- `home <https://github.com/giampaolo/pyftpdlib>`__\n- `documentation <http://pyftpdlib.readthedocs.io>`__\n- `download <https://pypi.python.org/pypi/pyftpdlib/>`__\n- `blog <http://grodola.blogspot.com/search/label/pyftpdlib>`__\n- `mailing list <http://groups.google.com/group/pyftpdlib/topics>`__\n- `what's new <https://github.com/giampaolo/pyftpdlib/blob/master/history.rst>`__\n\nabout\n=====\n\npython ftp server library provides a high-level portable interface to easily\nwrite very efficient, scalable and asynchronous ftp servers with python. it is\nthe most complete `rfc-959 <http://www.faqs.org/rfcs/rfc959.html>`__ ftp server\nimplementation available for `python <http://www.python.org/>`__ programming\nlanguage.\n\nfeatures\n========\n\n- extremely **lightweight**, **fast** and **scalable** (see\n  `why <https://github.com/giampaolo/pyftpdlib/issues/203>`__ and\n  `benchmarks <http://pyftpdlib.readthedocs.io/en/latest/benchmarks.html>`__).\n- uses **sendfile(2)** (see `pysendfile <https://github.com/giampaolo/pysendfile>`__)\n  system call for uploads.\n- uses epoll() / kqueue() / select() to handle concurrency asynchronously.\n- ...but can optionally skip to a\n  `multiple thread / process <http://pyftpdlib.readthedocs.io/en/latest/tutorial.html#changing-the-concurrency-model>`__\n  model (as in: you'll be free to block or use slow filesystems).\n- portable: entirely written in pure python; works with python **2.7** and\n  **3.x** using a single code base.\n- supports **ftps** (`rfc-4217 <http://tools.ietf.org/html/rfc4217>`__),\n  **ipv6** (`rfc-2428 <ftp://ftp.rfc-editor.org/in-notes/rfc2428.txt>`__),\n  **unicode** file names (`rfc-2640 <http://tools.ietf.org/html/rfc2640>`__),\n  **mlsd/mlst** commands (`rfc-3659 <ftp://ftp.rfc-editor.org/in-notes/rfc3659.txt>`__).\n- support for virtual users and virtual filesystem.\n- flexible system of \"authorizers\" able to manage both \"virtual\" and\n  \"real\" users on on both\n  `unix <http://pyftpdlib.readthedocs.io/en/latest/tutorial.html#unix-ftp-server>`__\n  and\n  `windows <http://pyftpdlib.readthedocs.io/en/latest/tutorial.html#windows-ftp-server>`__.\n\nperformances\n============\n\ndespite being written in an interpreted language, pyftpdlib has transfer rates\ncomparable or superior to common unix ftp servers written in c. it usually tends\nto scale better (see `benchmarks <https://pyftpdlib.readthedocs.io/en/latest/benchmarks.html>`__)\nbecause whereas vsftpd and proftpd use multiple processes to\nachieve concurrency, pyftpdlib only uses one (see `the c10k problem <http://www.kegel.com/c10k.html>`__).\n\npyftpdlib vs. proftpd 1.3.4\n---------------------------\n\n+-----------------------------------------+----------------+----------------+-------------+\n| **benchmark type**                      | **pyftpdlib**  | **proftpd**    | **speedup** |\n+-----------------------------------------+----------------+----------------+-------------+\n| stor (client -> server)                 |  585.90 mb/sec | 600.49 mb/sec  | -0.02x      |\n+-----------------------------------------+----------------+----------------+-------------+\n| retr (server -> client)                 | 1652.72 mb/sec | 1524.05 mb/sec | **+0.08**   |\n+-----------------------------------------+----------------+----------------+-------------+\n| 300 concurrent clients (connect, login) |    0.19 secs   | 9.98 secs      | **+51x**    |\n+-----------------------------------------+----------------+----------------+-------------+\n| stor (1 file with 300 idle clients)     |  585.59 mb/sec | 518.55 mb/sec  | **+0.1x**   |\n+-----------------------------------------+----------------+----------------+-------------+\n| retr (1 file with 300 idle clients)     | 1497.58 mb/sec | 1478.19 mb/sec | 0x          |\n+-----------------------------------------+----------------+----------------+-------------+\n| 300 concurrent clients (retr 10m file)  |    3.41 secs   | 3.60 secs      | **+0.05x**  |\n+-----------------------------------------+----------------+----------------+-------------+\n| 300 concurrent clients (stor 10m file)  |    8.60 secs   | 11.56 secs     | **+0.3x**   |\n+-----------------------------------------+----------------+----------------+-------------+\n| 300 concurrent clients (quit)           |    0.03 secs   | 0.39 secs      | **+12x**    |\n+-----------------------------------------+----------------+----------------+-------------+\n\npyftpdlib vs. vsftpd 2.3.5\n--------------------------\n\n+-----------------------------------------+----------------+----------------+-------------+\n| **benchmark type**                      | **pyftpdlib**  | **vsftpd**     | **speedup** |\n+-----------------------------------------+----------------+----------------+-------------+\n| stor (client -> server)                 |  585.90 mb/sec | 611.73 mb/sec  | -0.04x      |\n+-----------------------------------------+----------------+----------------+-------------+\n| retr (server -> client)                 | 1652.72 mb/sec | 1512.92 mb/sec | **+0.09**   |\n+-----------------------------------------+----------------+----------------+-------------+\n| 300 concurrent clients (connect, login) |    0.19 secs   | 20.39 secs     | **+106x**   |\n+-----------------------------------------+----------------+----------------+-------------+\n| stor (1 file with 300 idle clients)     |  585.59 mb/sec | 610.23 mb/sec  | -0.04x      |\n+-----------------------------------------+----------------+----------------+-------------+\n| retr (1 file with 300 idle clients)     | 1497.58 mb/sec | 1493.01 mb/sec | 0x          |\n+-----------------------------------------+----------------+----------------+-------------+\n| 300 concurrent clients (retr 10m file)  |    3.41 secs   | 3.67 secs      | **+0.07x**  |\n+-----------------------------------------+----------------+----------------+-------------+\n| 300 concurrent clients (stor 10m file)  |    8.60 secs   | 9.82 secs      | **+0.07x**  |\n+-----------------------------------------+----------------+----------------+-------------+\n| 300 concurrent clients (quit)           |    0.03 secs   | 0.01 secs      | +0.14x      |\n+-----------------------------------------+----------------+----------------+-------------+\n\nfor more benchmarks see `here <http://pyftpdlib.readthedocs.io/en/latest/benchmarks.html>`__.\n\nquick start\n===========\n\n.. code-block:: python\n\n    >>> from pyftpdlib.authorizers import dummyauthorizer\n    >>> from pyftpdlib.handlers import ftphandler\n    >>> from pyftpdlib.servers import ftpserver\n    >>>\n    >>> authorizer = dummyauthorizer()\n    >>> authorizer.add_user(\"user\", \"12345\", \"/home/giampaolo\", perm=\"elradfmwmt\")\n    >>> authorizer.add_anonymous(\"/home/nobody\")\n    >>>\n    >>> handler = ftphandler\n    >>> handler.authorizer = authorizer\n    >>>\n    >>> server = ftpserver((\"127.0.0.1\", 21), handler)\n    >>> server.serve_forever()\n    [i 13-02-19 10:55:42] >>> starting ftp server on 127.0.0.1:21 <<<\n    [i 13-02-19 10:55:42] poller: <class 'pyftpdlib.ioloop.epoll'>\n    [i 13-02-19 10:55:42] masquerade (nat) address: none\n    [i 13-02-19 10:55:42] passive ports: none\n    [i 13-02-19 10:55:42] use sendfile(2): true\n    [i 13-02-19 10:55:45] 127.0.0.1:34178-[] ftp session opened (connect)\n    [i 13-02-19 10:55:48] 127.0.0.1:34178-[user] user 'user' logged in.\n    [i 13-02-19 10:56:27] 127.0.0.1:34179-[user] retr /home/giampaolo/.vimrc completed=1 bytes=1700 seconds=0.001\n    [i 13-02-19 10:56:39] 127.0.0.1:34179-[user] ftp session closed (disconnect).\n\n`other code samples <http://pyftpdlib.readthedocs.io/en/latest/tutorial.html>`__\n\ndonate\n======\n\na lot of time and effort went into making pyftpdlib as it is right now.\nif you feel pyftpdlib is useful to you or your business and want to support its\nfuture development please consider `donating <https://gmpy.dev/donate>`__ me some money.\n",
  "docs_url": null,
  "keywords": "ftp,ftps,server,ftpd,daemon,python,ssl,sendfile,asynchronous,nonblocking,eventdriven,rfc959,rfc1123,rfc2228,rfc2428,rfc2640,rfc3659",
  "license": "mit",
  "name": "pyftpdlib",
  "package_url": "https://pypi.org/project/pyftpdlib/",
  "project_url": "https://pypi.org/project/pyftpdlib/",
  "project_urls": {
    "Homepage": "https://github.com/giampaolo/pyftpdlib/"
  },
  "release_url": "https://pypi.org/project/pyftpdlib/1.5.9/",
  "requires_dist": [
    "PyOpenSSL; extra == \"ssl\""
  ],
  "requires_python": "",
  "summary": "very fast asynchronous ftp server library",
  "version": "1.5.9",
  "releases": [],
  "developers": [
    "g.rodola@gmail.com",
    "giampaolo_rodola"
  ],
  "kwds": "pyftpdlib ftp ftpd ftps vsftpd",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_pyftpdlib",
  "homepage": "https://github.com/giampaolo/pyftpdlib/",
  "release_count": 25,
  "dependency_ids": [
    "pypi_pyopenssl"
  ]
}
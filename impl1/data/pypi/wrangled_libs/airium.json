{
  "classifiers": [
    "development status :: 4 - beta",
    "intended audience :: developers",
    "intended audience :: information technology",
    "intended audience :: science/research",
    "intended audience :: system administrators",
    "intended audience :: telecommunications industry",
    "license :: osi approved :: mit license",
    "operating system :: os independent",
    "programming language :: python",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "programming language :: python :: implementation :: pypy",
    "topic :: database :: front-ends",
    "topic :: documentation",
    "topic :: internet :: www/http",
    "topic :: internet :: www/http :: browsers",
    "topic :: internet :: www/http :: dynamic content",
    "topic :: scientific/engineering :: visualization",
    "topic :: software development :: code generators",
    "topic :: text processing :: markup :: html",
    "topic :: utilities"
  ],
  "description": "## airium\n\nbidirectional `html`-`python` translator.\n\n[![pypi version](https://img.shields.io/pypi/v/airium.svg)](https://pypi.python.org/pypi/airium/)\n[![pipeline status](https://gitlab.com/kamichal/airium/badges/master/pipeline.svg)](https://gitlab.com/kamichal/airium/-/commits/master)\n[![coverage report](https://gitlab.com/kamichal/airium/badges/master/coverage.svg)](https://gitlab.com/kamichal/airium/-/commits/master)\n[![pypi pyversion](https://img.shields.io/pypi/pyversions/airium.svg)](https://pypi.org/project/airium/)\n[![pypi license](https://img.shields.io/pypi/l/airium.svg)](https://pypi.python.org/pypi/airium/)\n[![pypi status](https://img.shields.io/pypi/status/airium.svg)](https://pypi.python.org/pypi/airium/)\n\nkey features:\n\n- simple, straight-forward\n- template-less (just the python, you may say goodbye to all the templates)\n- dom structure is strictly represented by python indentation (with context-managers)\n- gives much cleaner `html` than regular templates\n- equipped with reverse translator: `html` to python\n- can output either pretty (default) or minified `html` code\n\n# generating `html` code in python using `airium`\n\n#### basic `html` page (hello world)\n\n```python\nfrom airium import airium\n\na = airium()\n\na('<!doctype html>')\nwith a.html(lang=\"pl\"):\n    with a.head():\n        a.meta(charset=\"utf-8\")\n        a.title(_t=\"airium example\")\n\n    with a.body():\n        with a.h3(id=\"id23409231\", klass='main_header'):\n            a(\"hello world.\")\n\nhtml = str(a)  # casting to string extracts the value\n# or directly to utf-8 encoded bytes:\nhtml_bytes = bytes(a)  # casting to bytes is a shortcut to str(a).encode('utf-8')\n\nprint(html)\n```\n\nprints such a string:\n\n```html\n<!doctype html>\n<html lang=\"pl\">\n  <head>\n    <meta charset=\"utf-8\" />\n    <title>airium example</title>\n  </head>\n  <body>\n    <h3 id=\"id23409231\" class=\"main_header\">\n      hello world.\n    </h3>\n  </body>\n</html>\n```\n\nin order to store it as a file, just:\n\n```python\nwith open('that/file/path.html', 'wb') as f:\n    f.write(bytes(html))\n```\n\n#### simple image in a div\n\n```python\nfrom airium import airium\n\na = airium()\n\nwith a.div():\n    a.img(src='source.png', alt='alt text')\n    a('the text')\n\nhtml_str = str(a)\nprint(html_str)\n```\n\n```html\n\n<div>\n    <img src=\"source.png\" alt=\"alt text\"/>\n    the text\n</div>\n```\n\n#### table\n\n```python\nfrom airium import airium\n\na = airium()\n\nwith a.table(id='table_372'):\n    with a.tr(klass='header_row'):\n        a.th(_t='no.')\n        a.th(_t='firstname')\n        a.th(_t='lastname')\n\n    with a.tr():\n        a.td(_t='1.')\n        a.td(id='jbl', _t='jill')\n        a.td(_t='smith')  # can use _t or text\n\n    with a.tr():\n        a.td(_t='2.')\n        a.td(_t='roland', id='rmd')\n        a.td(_t='mendel')\n\ntable_str = str(a)\nprint(table_str)\n\n# to store it to a file:\nwith open('/tmp/airium_www.example.com.py') as f:\n    f.write(table_str)\n```\n\nnow `table_str` contains such a string:\n\n```html\n\n<table id=\"table_372\">\n  <tr class=\"header_row\">\n    <th>no.</th>\n    <th>firstname</th>\n    <th>lastname</th>\n  </tr>\n  <tr>\n    <td>1.</td>\n    <td id=\"jbl\">jill</td>\n    <td>smith</td>\n  </tr>\n  <tr>\n    <td>2.</td>\n    <td id=\"rmd\">roland</td>\n    <td>mendel</td>\n  </tr>\n</table>\n```\n\n### chaining shortcut for elements with only one child\n\n_new in version 0.2.2_\n\nhaving a structure with large number of `with` statements:\n\n```python\nfrom airium import airium\n\na = airium()\n\nwith a.article():\n    with a.table():\n        with a.thead():\n            with a.tr():\n                a.th(_t='column 1')\n                a.th(_t='column 2')\n        with a.tbody():\n            with a.tr():\n                with a.td():\n                    a.strong(_t='value 1')\n                a.td(_t='value 2')\n\ntable_str = str(a)\nprint(table_str)\n```\n\nyou may use a shortcut that is equivalent to:\n\n```python\nfrom airium import airium\n\na = airium()\n\nwith a.article().table():\n    with a.thead().tr():\n        a.th(_t=\"column 1\")\n        a.th(_t=\"column 2\")\n    with a.tbody().tr():\n        a.td().strong(_t=\"value 1\")\n        a.td(_t=\"value 2\")\n\ntable_str = str(a)\nprint(table_str)\n```\n\n```html\n\n<article>\n  <table>\n    <thead>\n      <tr>\n        <th>column 1</th>\n        <th>column 2</th>\n      </tr>\n    </thead>\n    <tbody>\n      <tr>\n        <td>\n          <strong>value 1</strong>\n        </td>\n        <td>value 2</td>\n      </tr>\n    </tbody>\n  </table>\n</article>\n```\n\n# options\n\n### pretty or minify\n\nby default, airium biulds `html` code indented with spaces and with line breaks being line feed `\\n` characters.\nit can be changed while creating an `airium` instance. in general all avaliable arguments whit their default values are:\n\n```python\na = airium(\n    base_indent='  ',  # str\n    current_level=0,  # int\n    source_minify=false,  # bool\n    source_line_break_character=\"\\n\",  # str\n)\n```\n\n#### minify\n\nthat's a mode when size of the code is minimized, i.e. contains as less whitespaces as it's possible.\nthe option can be enabled with `source_minify` argument, i.e.:\n\n```python\na = airium(source_minify=true)\n```\n\nin case if you need to explicitly add a line break in the source code (not the `<br/>`):\n\n```python\na = airium(source_minify=true)\na.h1(_t=\"here's your table\")\nwith a.table():\n    with a.tr():\n        a.break_source_line()\n        a.th(_t=\"cell 11\")\n        a.th(_t=\"cell 12\")\n    with a.tr():\n        a.break_source_line()\n        a.th(_t=\"cell 21\")\n        a.th(_t=\"cell 22\")\n    a.break_source_line()\na.p(_t=\"another content goes here\")\n```\n\nwill result with such a code:\n\n```html\n<h1>here's your table</h1><table><tr>\n<th>cell 11</th><th>cell 12</th></tr><tr>\n<th>cell 21</th><th>cell 22</th></tr>\n</table><p>another content goes here</p>\n```\n\nnote that the `break_source_line` cannot be used\nin [context manager chains](#chaining-shortcut-for-elements-with-only-one-child).\n\n#### indent style\n\nthe default indent of the generated html code has two spaces per each indent level.\nyou can change it to `\\t` or 4 spaces by setting `airium` constructor argument, e.g.:\n\n```python\na = airium(base_indent=\"\\t\")  # one tab symbol\na = airium(base_indent=\"    \")  # 4 spaces per each indentation level\na = airium(base_indent=\" \")  # 1 space per one level\n# pick one of the above statements, it can be mixed with other arguments\n```\n\nnote that this setting is ignored when `source_minify` argument is set to `true` (see above).\n\nthere is a special case when you set the base indent to empty string. it would disable indentation,\nbut line breaks will be still added. in order to get rid of line breaks, check the `source_minify` argument.\n\n#### indent level\n\nthe `current_level` being an integer can be set to non-negative\nvalue, wich will cause `airium` to start indentation with level offset given by the number.\n\n#### line break character\n\nby default, just a line feed (`\\n`) is used for terminating lines of the generated code.\nyou can change it to different style, e.g. `\\r\\n` or `\\r` by setting `source_line_break_character` to the desired value.\n\n```python\na = airium(source_line_break_character=\"\\r\\n\")  # windows' style\n```\n\nnote that the setting has no effect when `source_minify` argument is set to `true` (see above).\n\n# using airium with web-frameworks\n\nairium can be used with frameworks like flask or django. it can completely replace\ntemplate engines, reducing code-files scater, which may bring better code organization, and some other reasons.\n\nhere is an example of using airium with django. it implements reusable `basic_body` and a view called `index`.\n\n```python\n# file: your_app/views.py\nimport contextlib\nimport inspect\n\nfrom airium import airium\nfrom django.http import httpresponse\n\n\n@contextlib.contextmanager\ndef basic_body(a: airium, useful_name: str = ''):\n    \"\"\"works like a django/ninja template.\"\"\"\n\n    a('<!doctype html>')\n    with a.html(lang='en'):\n        with a.head():\n            a.meta(charset='utf-8')\n            a.meta(content='width=device-width, initial-scale=1', name='viewport')\n            # do not use css from this url in a production, it's just for an educational purpose\n            a.link(href='https://unpkg.com/@picocss/pico@1.4.1/css/pico.css', rel='stylesheet')\n            a.title(_t=f'hello world')\n\n        with a.body():\n            with a.div():\n                with a.nav(klass='container-fluid'):\n                    with a.ul():\n                        with a.li():\n                            with a.a(klass='contrast', href='./'):\n                                a.strong(_t=\"\u2328 foo bar\")\n                    with a.ul():\n                        with a.li():\n                            a.a(klass='contrast', href='#', **{'data-theme-switcher': 'auto'}, _t='auto')\n                        with a.li():\n                            a.a(klass='contrast', href='#', **{'data-theme-switcher': 'light'}, _t='light')\n                        with a.li():\n                            a.a(klass='contrast', href='#', **{'data-theme-switcher': 'dark'}, _t='dark')\n\n                with a.header(klass='container'):\n                    with a.hgroup():\n                        a.h1(_t=f\"you're on the {useful_name}\")\n                        a.h2(_t=\"it's a page made by our automatons with a power of steam engines.\")\n\n            with a.main(klass='container'):\n                yield  # this is the point where main content gets inserted\n\n            with a.footer(klass='container'):\n                with a.small():\n                    margin = 'margin: auto 10px;'\n                    a.span(_t='\u00a9 airium html generator example', style=margin)\n\n            # do not use js from this url in a production, it's just for an educational purpose\n            a.script(src='https://picocss.com/examples/js/minimal-theme-switcher.js')\n\n\ndef index(request) -> httpresponse:\n    a = airium()\n    with basic_body(a, f'main page: {request.path}'):\n        with a.article():\n            a.h3(_t=\"hello world from django running airium\")\n            with a.p().small():\n                a(\"this bases on \")\n                with a.a(href=\"https://picocss.com/examples/company/\"):\n                    a(\"pico.css / company example\")\n\n            with a.p():\n                a(\"instead of a html template, airium has been used.\")\n                a(\"the whole body is generated by a template \"\n                  \"and the article code looks like that:\")\n\n            with a.code().pre():\n                a(inspect.getsource(index))\n\n    return httpresponse(bytes(a))  # from django.http import httpresponse\n```\n\nroute it in `urls.py` just like a regular view:\n\n```python\n# file: your_app/urls.py\nfrom django.contrib import admin\nfrom django.urls import path\n\nimport your_app\n\nurlpatterns = [\n    path('index/', your_app.views.index),\n    path('admin/', admin.site.urls),\n]\n```\n\nthe result ing web page on my machine looks like that:\n\n![airium/django templateless example](airium_django_example.png)\n\n# reverse translation\n\nairium is equipped with a transpiler `[html -> py]`.\nit generates python code out of a given `html` string.\n\n### using reverse translator as a binary:\n\nensure you have [installed](#installation) `[parse]` extras. then call in command line:\n\n```bash\nairium http://www.example.com\n```\n\nthat will fetch the document and translate it to python code.\nthe code calls `airium` statements that reproduce the `html` document given.\nit may give a clue - how to define `html` structure for a given\nweb page using `airium` package.\n\nto store the translation's result into a file:\n\n```bash\nairium http://www.example.com > /tmp/airium_example_com.py\n```\n\nyou can also parse local `html` files:\n\n```bash\nairium /path/to/your_file.html > /tmp/airium_my_file.py\n```\n\nyou may also try to parse your django templates. i'm not sure if it works,\nbut there will be probably not much to fix.\n\n### using reverse translator as python code:\n\n```python\nfrom airium import from_html_to_airium\n\n# assume we have such a page given as a string:\nhtml_str = \"\"\"\\\n<!doctype html>\n<html lang=\"pl\">\n  <head>\n    <meta charset=\"utf-8\" />\n    <title>airium example</title>\n  </head>\n  <body>\n    <h3 id=\"id23409231\" class=\"main_header\">\n      hello world.\n    </h3>\n  </body>\n</html>\n\"\"\"\n\n# to convert the html into python, just call:\n\npy_str = from_html_to_airium(html_str)\n\n# airium tests ensure that the result of the conversion is equal to the string:\nassert py_str == \"\"\"\\\n#!/usr/bin/env python\n# file generated by reverse airium translator (version 0.2.6).\n# any change will be overridden on next run.\n# flake8: noqa e501 (line too long)\n\nfrom airium import airium\n\na = airium()\n\na('<!doctype html>')\nwith a.html(lang='pl'):\n    with a.head():\n        a.meta(charset='utf-8')\n        a.title(_t='airium example')\n    with a.body():\n        a.h3(klass='main_header', id='id23409231', _t='hello world.')\n\"\"\"\n```\n\n### <a name=\"transpiler_limitations\">transpiler limitations</a>\n\n> so far in version 0.2.2:\n\n- result of translation does not keep exact amount of leading whitespaces\n  within `<pre>` tags. they come over-indented in python code.\n\nthis is not however an issue when code is generated from python to `html`.\n\n- although it keeps the proper tags structure, the transpiler does not\n  chain all the `with` statements, so in some cases the generated\n  code may be much indented.\n\n- it's not too fast\n\n# <a name=\"installation\">installation</a>\n\nif you need a new virtual environment, call:\n\n```bash\nvirtualenv venv\nsource venv/bin/activate\n```\n\nhaving it activated - you may install airium like this:\n\n```bash\npip install airium\n```\n\nin order to use reverse translation - two additional packages are needed, run:\n\n```bash\npip install airium[parse]\n```\n\nthen check if the transpiler works by calling:\n\n```bash\nairium --help\n```\n\n> enjoy!\n",
  "docs_url": null,
  "keywords": "natural html generator compiler template-less",
  "license": "mit license",
  "name": "airium",
  "package_url": "https://pypi.org/project/airium/",
  "project_url": "https://pypi.org/project/airium/",
  "project_urls": {
    "Homepage": "https://gitlab.com/kamichal/airium"
  },
  "release_url": "https://pypi.org/project/airium/0.2.6/",
  "requires_dist": [
    "pytest ~=6.2 ; extra == 'dev'",
    "pytest-cov ~=3.0 ; extra == 'dev'",
    "pytest-mock ~=3.6 ; extra == 'dev'",
    "requests <3,>=2.12.0 ; extra == 'parse'",
    "beautifulsoup4 <5.0,>=4.10.0 ; extra == 'parse'"
  ],
  "requires_python": "",
  "summary": "easy and quick html builder with natural syntax correspondence (python->html). no templates needed. serves pure pythonic library with no dependencies.",
  "version": "0.2.6",
  "releases": [],
  "developers": [
    "michal.s.kaczmarczyk@gmail.com"
  ],
  "kwds": "from_html_to_airium airium_django_example airium_example_com airium_my_file airium_www",
  "license_kwds": "mit license",
  "libtype": "pypi",
  "id": "pypi_airium",
  "homepage": "https://gitlab.com/kamichal/airium",
  "release_count": 18,
  "dependency_ids": [
    "pypi_beautifulsoup4",
    "pypi_pytest",
    "pypi_pytest_cov",
    "pypi_pytest_mock",
    "pypi_requests"
  ]
}
{
  "classifiers": [
    "development status :: 5 - production/stable",
    "environment :: console",
    "intended audience :: developers",
    "license :: osi approved :: bsd license",
    "operating system :: os independent",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.6",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: software development :: libraries :: python modules"
  ],
  "description": "rule engine\n===========\n|badge-build| |badge-pypi|\n\na lightweight, optionally typed expression language with a custom grammar for matching arbitrary python objects.\n\ndocumentation is available at https://zerosteiner.github.io/rule-engine/.\n\nrule engine expressions are written in their own language, defined as strings in python. the syntax is most similar to\npython with some inspiration from ruby. some features of this language includes:\n\n- optional type hinting\n- matching strings with regular expressions\n- datetime datatypes\n- compound datatypes (equivalents for python dict, list and set types)\n- data attributes\n- thread safety\n\nexample usage\n-------------\nthe following example demonstrates the basic usage of defining a rule object and applying it to two dictionaries,\nshowing that one matches while the other does not. see `getting started`_ for more information.\n\n.. code-block:: python\n\n   import rule_engine\n   # match a literal first name and applying a regex to the email\n   rule = rule_engine.rule(\n       'first_name == \"luke\" and email =~ \".*@rebels.org$\"'\n   ) # => <rule text='first_name == \"luke\" and email =~ \".*@rebels.org$\"' >\n   rule.matches({\n       'first_name': 'luke', 'last_name': 'skywalker', 'email': 'luke@rebels.org'\n   }) # => true\n   rule.matches({\n      'first_name': 'darth', 'last_name': 'vader', 'email': 'dvader@empire.net'\n   }) # => false\n\nthe next example demonstrates the optional type system. a custom context is created that defines two symbols, one string\nand one float. because symbols are defined, an exception will be raised if an unknown symbol is specified or an invalid\noperation is used. see `type hinting`_ for more information.\n\n.. code-block:: python\n\n   import rule_engine\n   # define the custom context with two symbols\n   context = rule_engine.context(type_resolver=rule_engine.type_resolver_from_dict({\n       'first_name': rule_engine.datatype.string,\n       'age': rule_engine.datatype.float\n   }))\n\n   # receive an error when an unknown symbol is used\n   rule = rule_engine.rule('last_name == \"vader\"', context=context)\n   # => symbolresolutionerror: last_name\n\n   # receive an error when an invalid operation is used\n   rule = rule_engine.rule('first_name + 1', context=context)\n   # => evaluationerror: data type mismatch\n\nwant to give the rule expression language a try? checkout the `debug repl`_ that makes experimentation easy. after\ninstalling just run ``python -m rule_engine.debug_repl``.\n\ninstallation\n------------\ninstall the latest release from pypi using ``pip install rule-engine``. releases follow `semantic versioning`_ to\nindicate in each new version whether it fixes bugs, adds features or breaks backwards compatibility. see the\n`change log`_ for a curated list of changes.\n\ncredits\n-------\n* spencer mcintyre - zerosteiner |social-github|\n\nlicense\n-------\nthe rule engine library is released under the bsd 3-clause license. it is able to be used for both commercial and\nprivate purposes. for more information, see the `license`_ file.\n\n.. |badge-build| image:: https://img.shields.io/github/actions/workflow/status/zerosteiner/rule-engine/ci.yml?branch=master&style=flat-square\n   :alt: github workflow status (branch)\n   :target: https://github.com/zerosteiner/rule-engine/actions/workflows/ci.yml\n\n.. |badge-pypi| image:: https://img.shields.io/pypi/v/rule-engine?style=flat-square\n   :alt: pypi\n   :target: https://pypi.org/project/rule-engine/\n\n.. |social-github| image:: https://img.shields.io/github/followers/zerosteiner?style=social\n   :alt: github followers\n   :target: https://github.com/zerosteiner\n\n.. |social-twitter| image:: https://img.shields.io/twitter/follow/zerosteiner\n   :alt: twitter follow\n   :target: https://twitter.com/zerosteiner\n\n.. _change log: https://zerosteiner.github.io/rule-engine/change_log.html\n.. _debug repl: https://zerosteiner.github.io/rule-engine/debug_repl.html\n.. _getting started: https://zerosteiner.github.io/rule-engine/getting_started.html\n.. _license: https://github.com/zerosteiner/rule-engine/blob/master/license\n.. _semantic versioning: https://semver.org/\n.. _type hinting: https://zerosteiner.github.io/rule-engine/getting_started.html#type-hinting\n",
  "docs_url": null,
  "keywords": "",
  "license": "bsd",
  "name": "rule-engine",
  "package_url": "https://pypi.org/project/rule-engine/",
  "project_url": "https://pypi.org/project/rule-engine/",
  "project_urls": {
    "Homepage": "https://github.com/zeroSteiner/rule-engine"
  },
  "release_url": "https://pypi.org/project/rule-engine/4.2.0/",
  "requires_dist": [
    "ply>=3.9",
    "python-dateutil~=2.7"
  ],
  "requires_python": "",
  "summary": "a lightweight, optionally typed expression language with a custom grammar for matching arbitrary python objects.",
  "version": "4.2.0",
  "releases": [],
  "developers": [
    "spencer_mcintyre",
    "zerosteiner@gmail.com"
  ],
  "kwds": "rule_engine syntax regex rule python",
  "license_kwds": "bsd",
  "libtype": "pypi",
  "id": "pypi_rule_engine",
  "homepage": "https://github.com/zerosteiner/rule-engine",
  "release_count": 27,
  "dependency_ids": [
    "pypi_ply",
    "pypi_python_dateutil"
  ]
}
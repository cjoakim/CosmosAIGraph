{
  "classifiers": [
    "development status :: 4 - beta",
    "intended audience :: developers",
    "intended audience :: science/research",
    "license :: osi approved :: bsd license",
    "operating system :: macos :: macos x",
    "operating system :: microsoft :: windows",
    "operating system :: posix",
    "programming language :: python",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.9",
    "topic :: scientific/engineering",
    "topic :: software development :: libraries"
  ],
  "description": ".. image:: https://img.shields.io/pypi/v/pint.svg\n    :target: https://pypi.python.org/pypi/pint\n    :alt: latest version\n\n.. image:: https://img.shields.io/badge/code%20style-black-000000.svg\n    :target: https://github.com/python/black\n\n.. image:: https://readthedocs.org/projects/pint/badge/\n    :target: https://pint.readthedocs.org/\n    :alt: documentation\n\n.. image:: https://img.shields.io/pypi/l/pint.svg\n    :target: https://pypi.python.org/pypi/pint\n    :alt: license\n\n.. image:: https://img.shields.io/pypi/pyversions/pint.svg\n    :target: https://pypi.python.org/pypi/pint\n    :alt: python versions\n\n.. image:: https://github.com/hgrecco/pint/workflows/ci/badge.svg\n    :target: https://github.com/hgrecco/pint/actions?query=workflow%3aci\n    :alt: ci\n\n.. image:: https://github.com/hgrecco/pint/workflows/lint/badge.svg\n    :target: https://github.com/hgrecco/pint/actions?query=workflow%3alint\n    :alt: linter\n\n.. image:: https://coveralls.io/repos/github/hgrecco/pint/badge.svg?branch=master\n    :target: https://coveralls.io/github/hgrecco/pint?branch=master\n    :alt: coverage\n\n\npint: makes units easy\n======================\n\npint is a python package to define, operate and manipulate physical\nquantities: the product of a numerical value and a unit of measurement.\nit allows arithmetic operations between them and conversions from and\nto different units.\n\nit is distributed with a comprehensive list of physical units, prefixes\nand constants. due to its modular design, you can extend (or even rewrite!)\nthe complete list without changing the source code. it supports a lot of\nnumpy mathematical operations **without monkey patching or wrapping numpy**.\n\nit has a complete test coverage. it runs in python 3.9+ with no other dependency.\nit is licensed under bsd.\n\nit is extremely easy and natural to use:\n\n.. code-block:: python\n\n    >>> import pint\n    >>> ureg = pint.unitregistry()\n    >>> 3 * ureg.meter + 4 * ureg.cm\n    <quantity(3.04, 'meter')>\n\nand you can make good use of numpy if you want:\n\n.. code-block:: python\n\n    >>> import numpy as np\n    >>> [3, 4] * ureg.meter + [4, 3] * ureg.cm\n    <quantity([ 3.04  4.03], 'meter')>\n    >>> np.sum(_)\n    <quantity(7.07, 'meter')>\n\n\nquick installation\n------------------\n\nto install pint, simply:\n\n.. code-block:: bash\n\n    $ pip install pint\n\nor utilizing conda, with the conda-forge channel:\n\n.. code-block:: bash\n\n    $ conda install -c conda-forge pint\n\nand then simply enjoy it!\n\n\ndocumentation\n-------------\n\nfull documentation is available at http://pint.readthedocs.org/\n\n\ncommand-line converter\n----------------------\n\na command-line script `pint-convert` provides a quick way to convert between\nunits or get conversion factors.\n\n\ndesign principles\n-----------------\n\nalthough there are already a few very good python packages to handle physical\nquantities, no one was really fitting my needs. like most developers, i\nprogrammed pint to scratch my own itches.\n\n**unit parsing**: prefixed and pluralized forms of units are recognized without\nexplicitly defining them. in other words: as the prefix *kilo* and the unit\n*meter* are defined, pint understands *kilometers*. this results in a much\nshorter and maintainable unit definition list as compared to other packages.\n\n**standalone unit definitions**: units definitions are loaded from a text file\nwhich is simple and easy to edit. adding and changing units and their\ndefinitions does not involve changing the code.\n\n**advanced string formatting**: a quantity can be formatted into string using\n`pep 3101`_ syntax. extended conversion flags are given to provide symbolic,\nlatex and pretty formatting. unit name translation is available if babel_ is\ninstalled.\n\n**free to choose the numerical type**: you can use any numerical type\n(`fraction`, `float`, `decimal`, `numpy.ndarray`, etc). numpy_ is not required\nbut supported.\n\n**awesome numpy integration**: when you choose to use a numpy_ ndarray, its methods and\nufuncs are supported including automatic conversion of units. for example\n`numpy.arccos(q)` will require a dimensionless `q` and the units of the output\nquantity will be radian.\n\n**uncertainties integration**:  transparently handles calculations with\nquantities with uncertainties (like 3.14\u00b10.01 meter) via the `uncertainties\npackage`_.\n\n**handle temperature**: conversion between units with different reference\npoints, like positions on a map or absolute temperature scales.\n\n**dependency free**: it depends only on python and its standard library. it interacts with other packages\nlike numpy and uncertainties if they are installed\n\n**pandas integration**: thanks to `pandas extension types`_ it is now possible to use pint with pandas. operations on dataframes and between columns are units aware, providing even more convenience for users of pandas dataframes. for full details, see the `pint-pandas jupyter notebook`_.\n\n\npint is maintained by a community of scientists, programmers and enthusiasts around the world.\nsee authors_ for a complete list.\n\nto review an ordered list of notable changes for each version of a project,\nsee changes_\n\n\n.. _website: http://www.dimensionalanalysis.org/\n.. _`comprehensive list of physical units, prefixes and constants`: https://github.com/hgrecco/pint/blob/master/pint/default_en.txt\n.. _`uncertainties package`: https://pythonhosted.org/uncertainties/\n.. _`numpy`: http://www.numpy.org/\n.. _`pep 3101`: https://www.python.org/dev/peps/pep-3101/\n.. _`babel`: http://babel.pocoo.org/\n.. _`pandas extension types`: https://pandas.pydata.org/pandas-docs/stable/development/extending.html#extension-types\n.. _`pint-pandas jupyter notebook`: https://github.com/hgrecco/pint-pandas/blob/master/notebooks/pint-pandas.ipynb\n.. _`authors`: https://github.com/hgrecco/pint/blob/master/authors\n.. _`changes`: https://github.com/hgrecco/pint/blob/master/changes\n",
  "docs_url": null,
  "keywords": "physical,quantities,unit,conversion,science",
  "license": "bsd",
  "name": "pint",
  "package_url": "https://pypi.org/project/Pint/",
  "project_url": "https://pypi.org/project/Pint/",
  "project_urls": {
    "Documentation": "https://pint.readthedocs.io/",
    "Homepage": "https://github.com/hgrecco/pint"
  },
  "release_url": "https://pypi.org/project/Pint/0.23/",
  "requires_dist": [
    "typing-extensions",
    "babel <=2.8 ; extra == 'babel'",
    "pytest ; extra == 'bench'",
    "pytest-codspeed ; extra == 'bench'",
    "dask ; extra == 'dask'",
    "mip >=1.13 ; extra == 'mip'",
    "numpy >=1.19.5 ; extra == 'numpy'",
    "pint-pandas >=0.3 ; extra == 'pandas'",
    "pytest ; extra == 'test'",
    "pytest-mpl ; extra == 'test'",
    "pytest-cov ; extra == 'test'",
    "pytest-subtests ; extra == 'test'",
    "pytest-benchmark ; extra == 'test'",
    "pytest ; extra == 'testbase'",
    "pytest-cov ; extra == 'testbase'",
    "pytest-subtests ; extra == 'testbase'",
    "pytest-benchmark ; extra == 'testbase'",
    "uncertainties >=3.1.6 ; extra == 'uncertainties'",
    "xarray ; extra == 'xarray'"
  ],
  "requires_python": ">=3.9",
  "summary": "physical quantities module",
  "version": "0.23",
  "releases": [],
  "developers": [
    "hernan.grecco@gmail.com",
    "julescheron@gmail.com"
  ],
  "kwds": "pint shields svg pyversions badge",
  "license_kwds": "bsd",
  "libtype": "pypi",
  "id": "pypi_pint",
  "homepage": "",
  "release_count": 49,
  "dependency_ids": [
    "pypi_babel",
    "pypi_dask",
    "pypi_mip",
    "pypi_numpy",
    "pypi_pint_pandas",
    "pypi_pytest",
    "pypi_pytest_benchmark",
    "pypi_pytest_codspeed",
    "pypi_pytest_cov",
    "pypi_pytest_mpl",
    "pypi_pytest_subtests",
    "pypi_typing_extensions",
    "pypi_uncertainties",
    "pypi_xarray"
  ]
}
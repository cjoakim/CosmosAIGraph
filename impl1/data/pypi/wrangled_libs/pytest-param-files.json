{
  "classifiers": [
    "framework :: pytest",
    "license :: osi approved :: mit license",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9"
  ],
  "description": "# pytest-param-files\n\n[![pypi][pypi-badge]][pypi-link]\n\na small package to generate parametrized [pytests](https://docs.pytest.org) from external files.\n\nsimply create a text file with an available format:\n\n`dot` format (default):\n```\n[name1] description\n.\ninput content\n.\nexpected output content\n.\n\n[name2] description\n.\ninput content\n.\nexpected output content\n.\n```\n\n`yaml` format:\n```yaml\nname1:\n  description: optional description\n  input: |-\n    input content\n  expected: |-\n    expected output content\nname2:\n  description: optional description\n  input: |-\n    input content\n  expected: |-\n    expected output content\n```\n\nthen, use the `param_file` pytest marker to create a parametrized test:\n\n```python\nfrom pathlib import path\nimport pytest\n\nimport my_function\n\npath = path(__file__).parent.joinpath(\"test_file.txt\")\n\n@pytest.mark.param_file(path, fmt=\"dot\")\ndef test_function(file_params):\n    assert my_function(file_params.content) == file_params.expected\n```\n\nand the output will be:\n\n```console\n$ pytest -v test_file.py\n...\ntest_file.py::test_function[1-name1] passed\ntest_file.py::test_function[8-name2] failed\n```\n\nalternatively use the `assert_expected` method, which will can handle more rich assertion features:\n\n```python\n@pytest.mark.param_file(path, fmt=\"dot\")\ndef test_function(file_params):\n    actual = my_function(file_params.content)\n    assert file_params.assert_expected(actual, rstrip=true)\n```\n\n```console\n$ pytest -v test_file.py\n...\ntest_file.py::test_function[1-name1] passed\ntest_file.py::test_function[8-name2] failed\n...\ne       assertionerror: actual does not match expected\ne       --- /path/to/test_file.txt:8\ne       +++ (actual)\ne       @@ -1 +1 @@\ne       -content\ne       +other\n```\n\n## installation\n\ninstall from [pypi][pypi-link]:\n\n```console\n$ pip install pytest-param-files\n```\n\nor install locally (for development):\n\n```console\n$ pip install -e .\n```\n\n## regenerating expected output on failures\n\nrunning pytest with the `--regen-file-failure` option will regenerate the parameter file with actual output, if any test fails.\n\n## other formats\n\ntodo ...\n\n[pypi-badge]: https://img.shields.io/pypi/v/pytest_param_files.svg\n[pypi-link]: https://pypi.org/project/pytest_param_files\n",
  "docs_url": null,
  "keywords": "pytest,parameterized",
  "license": "",
  "name": "pytest_param_files",
  "package_url": "https://pypi.org/project/pytest_param_files/",
  "project_url": "https://pypi.org/project/pytest_param_files/",
  "project_urls": {
    "Home": "https://github.com/chrisjsewell/pytest-param-files"
  },
  "release_url": "https://pypi.org/project/pytest_param_files/0.6.0/",
  "requires_dist": [
    "pytest",
    "ruamel.yaml>=0.15",
    "pytest-cov ; extra == \"codecov\""
  ],
  "requires_python": ">=3.8",
  "summary": "create pytest parametrize decorators from external files.",
  "version": "0.6.0",
  "releases": [],
  "developers": [
    "chrisj_sewell@hotmail.com"
  ],
  "kwds": "pytest_param_files param_file file_params pytest test_file",
  "license_kwds": "",
  "libtype": "pypi",
  "id": "pypi_pytest_param_files",
  "homepage": "",
  "release_count": 13,
  "dependency_ids": [
    "pypi_pytest",
    "pypi_pytest_cov",
    "pypi_ruamel.yaml"
  ]
}
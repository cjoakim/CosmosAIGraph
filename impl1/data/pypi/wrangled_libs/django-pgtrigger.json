{
  "classifiers": [
    "framework :: django",
    "framework :: django :: 3.2",
    "framework :: django :: 4.0",
    "framework :: django :: 4.1",
    "framework :: django :: 4.2",
    "framework :: django :: 5.0",
    "intended audience :: developers",
    "license :: osi approved :: bsd license",
    "operating system :: os independent",
    "programming language :: python",
    "programming language :: python :: 3",
    "programming language :: python :: 3 :: only",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.12",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9"
  ],
  "description": "# django-pgtrigger\n\n`django-pgtrigger` helps you write [postgres triggers](https://www.postgresql.org/docs/current/sql-createtrigger.html) for your django models.\n\n## why should i use triggers?\n\ntriggers can solve a variety of complex problems more reliably, performantly, and succinctly than application code.\nfor example,\n\n* protecting operations on rows or columns (`pgtrigger.protect`).\n* making read-only models or fields (`pgtrigger.readonly`).\n* soft-deleting models (`pgtrigger.softdelete`).\n* snapshotting and tracking model changes ([django-pghistory](https://django-pghistory.readthedocs.io/)).\n* enforcing field transitions (`pgtrigger.fsm`).\n* keeping a search vector updated for full-text search (`pgtrigger.updatesearchvector`).\n* building official interfaces (e.g. enforcing use of `user.objects.create_user` and not `user.objects.create`).\n* versioning models, mirroring fields, computing unique model hashes, and the list goes on...\n\nall of these examples require no overridden methods, no base models, and no signal handling.\n\n## quick start\n\ninstall `django-pgtrigger` with `pip3 install django-pgtrigger` and add `pgtrigger` to `settings.installed_apps`.\n\n`pgtrigger.trigger` objects are added to `triggers` in model `meta`. `django-pgtrigger` comes with several trigger classes, such as `pgtrigger.protect`. in the following, we're protecting the model from being deleted:\n\n```python\nimport pgtrigger\n\nclass protectedmodel(models.model):\n    \"\"\"this model cannot be deleted!\"\"\"\n\n    class meta:\n        triggers = [\n            pgtrigger.protect(name=\"protect_deletes\", operation=pgtrigger.delete)\n        ]\n```\n\nwhen migrations are created and executed, `protectedmodel` will raise an exception anytime a deletion is attempted.\n\nlet's extend this example further and only protect deletions on inactive objects. in this example, the trigger conditionally runs when the row being deleted (the `old` row in trigger terminology) is still active:\n\n```python\nimport pgtrigger\n\nclass protectedmodel(models.model):\n    \"\"\"active object cannot be deleted!\"\"\"\n    is_active = models.booleanfield(default=true)\n\n    class meta:\n        triggers = [\n            pgtrigger.protect(\n                name=\"protect_deletes\",\n                operation=pgtrigger.delete,\n                condition=pgtrigger.q(old__is_active=true)\n            )\n        ]\n```\n\n`django-pgtrigger` uses `pgtrigger.q` and `pgtrigger.f` objects to conditionally execute triggers based on the `old` and `new` rows. combining these django idioms with `pgtrigger.trigger` objects can solve a wide variety of problems without ever writing sql. users, however, can still use raw sql for complex cases.\n\ntriggers are installed like other database objects. run `python manage.py makemigrations` and `python manage.py migrate` to install triggers.\n\nif triggers are new to you, don't worry. the [pgtrigger docs](https://django-pgtrigger.readthedocs.io/) cover triggers in more detail and provide many examples.\n\n## compatibility\n\n`django-pgtrigger` is compatible with python 3.8 - 3.12, django 3.2 - 5.0, psycopg 2 - 3, and postgres 12 - 16.\n\n## documentation\n\n[view the django-pgtrigger docs here](https://django-pgtrigger.readthedocs.io/) to learn more about:\n\n* trigger basics and motivation for using triggers.\n* how to use the built-in triggers and how to build custom ones.\n* installing triggers on third-party models, many-to-many fields, and other advanced scenarios.\n* writing conditional triggers.\n* ignoring triggers dynamically and deferring trigger execution.\n* multiple database, schema, and partitioning support.\n* frequently asked questions, common issues, and upgrading.\n* the commands, settings, and module.\n\n## installation\n\ninstall `django-pgtrigger` with:\n\n    pip3 install django-pgtrigger\n\nafter this, add `pgtrigger` to the `installed_apps` setting of your django project.\n\n## other material\n\nafter you've read the docs, check out [this tutorial](https://wesleykendall.github.io/django-pgtrigger-tutorial/) with interactive examples from a django meetup talk.\n\nthe [djangocon 2021 talk](https://www.youtube.com/watch?v=tte3d4jjxck) also breaks down triggers and shows several examples.\n\n## contributing guide\n\nfor information on setting up django-pgtrigger for development and contributing changes, view [contributing.md](contributing.md).\n\n## primary authors\n\n- [wes kendall](https://github.com/wesleykendall)\n\n## other contributors\n\n- @jzmiller1\n- @rrauenza\n- @ralokt\n- @adamchainz\n- @danifus\n- @kekekekule\n- @peterthomassen\n- @pfouque\n",
  "docs_url": null,
  "keywords": "",
  "license": "bsd-3-clause",
  "name": "django-pgtrigger",
  "package_url": "https://pypi.org/project/django-pgtrigger/",
  "project_url": "https://pypi.org/project/django-pgtrigger/",
  "project_urls": {
    "Documentation": "https://django-pgtrigger.readthedocs.io",
    "Homepage": "https://github.com/Opus10/django-pgtrigger",
    "Repository": "https://github.com/Opus10/django-pgtrigger"
  },
  "release_url": "https://pypi.org/project/django-pgtrigger/4.11.0/",
  "requires_dist": [
    "django (>=3)"
  ],
  "requires_python": ">=3.8.0,<4",
  "summary": "postgres trigger support integrated with django models.",
  "version": "4.11.0",
  "releases": [],
  "developers": [
    "wes_kendall"
  ],
  "kwds": "django triggers djangocon pgtrigger trigger",
  "license_kwds": "bsd-3-clause",
  "libtype": "pypi",
  "id": "pypi_django_pgtrigger",
  "homepage": "https://github.com/opus10/django-pgtrigger",
  "release_count": 42,
  "dependency_ids": [
    "pypi_django"
  ]
}
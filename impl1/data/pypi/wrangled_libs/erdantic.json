{
  "classifiers": [
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "operating system :: os independent",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: software development :: code generators"
  ],
  "description": "# erdantic: entity relationship diagrams\n\n[![docs status](https://img.shields.io/badge/docs-stable-informational)](https://erdantic.drivendata.org/)\n[![pypi](https://img.shields.io/pypi/v/erdantic.svg)](https://pypi.org/project/erdantic/)\n[![conda-forge](https://img.shields.io/conda/vn/conda-forge/erdantic.svg)](https://anaconda.org/conda-forge/erdantic)\n[![conda-forge feedstock](https://img.shields.io/badge/conda--forge-feedstock-yellowgreen)](https://github.com/conda-forge/erdantic-feedstock)\n[![tests](https://github.com/drivendataorg/erdantic/workflows/tests/badge.svg?branch=main)](https://github.com/drivendataorg/erdantic/actions?query=workflow%3atests+branch%3amain)\n[![codecov](https://codecov.io/gh/drivendataorg/erdantic/branch/main/graph/badge.svg)](https://codecov.io/gh/drivendataorg/erdantic)\n\n**erdantic** is a simple tool for drawing [entity relationship diagrams (erds)](https://en.wikipedia.org/wiki/data_modeling#entity%e2%80%93relationship_diagrams) for python data model classes. diagrams are rendered using the venerable [graphviz](https://graphviz.org/) library. supported data modeling frameworks are:\n\n- [pydantic](https://pydantic-docs.helpmanual.io/)\n- [dataclasses](https://docs.python.org/3/library/dataclasses.html) from the python standard library\n\nfeatures include a convenient cli, automatic native rendering in jupyter notebooks, and easy extensibility to other data modeling frameworks. docstrings are even accessible as tooltips for svg outputs. great for adding a simple and clean data model reference to your documentation.\n\n<object type=\"image/svg+xml\" data=\"https://raw.githubusercontent.com/drivendataorg/erdantic/main/docs/docs/examples/pydantic.svg\" width=\"100%\" typemustmatch><img alt=\"example diagram created by erdantic\" src=\"https://raw.githubusercontent.com/drivendataorg/erdantic/main/docs/docs/examples/pydantic.svg\"></object>\n\n## installation\n\nerdantic's graph modeling depends on [pygraphviz](https://pygraphviz.github.io/documentation/stable/index.html) and [graphviz](https://graphviz.org/), an open-source c library. if you are on linux or macos, the easiest way to install everything together is to use conda and conda-forge:\n\n```bash\nconda install erdantic -c conda-forge\n```\n\nif not using conda, graphviz must be installed first (before you can install pygraphviz). for recommended options and installation troubleshooting, see the [pygraphviz docs](https://pygraphviz.github.io/documentation/stable/install.html). then to install erdantic and its python dependencies from pypi:\n\n```bash\npip install erdantic\n```\n\n### development version\n\nyou can get the development version from github with:\n\n```bash\npip install git+https://github.com/drivendataorg/erdantic.git#egg=erdantic\n```\n\n## quick usage\n\nthe fastest way to produce a diagram like the above example is to use the erdantic cli. simply specify the full dotted path to your data model class and an output path. the rendered format is interpreted from the filename extension.\n\n```bash\nerdantic erdantic.examples.pydantic.party -o diagram.png\n```\n\nyou can also import the erdantic python library and use its functions.\n\n```python\nimport erdantic as erd\nfrom erdantic.examples.pydantic import party\n\n# easy one-liner\nerd.draw(party, out=\"diagram.png\")\n\n# or create a diagram object that you can inspect and do stuff with\ndiagram = erd.create(party)\ndiagram.models\n#> [pydanticmodel(adventurer), pydanticmodel(party), pydanticmodel(quest), pydanticmodel(questgiver)]\ndiagram.draw(\"diagram.png\")\n```\n\ncheck out the \"usage examples\" section of our [docs](https://erdantic.drivendata.org/) to see more.\n\n",
  "docs_url": null,
  "keywords": "erd,entity relationship diagram,dataclasses,pydantic",
  "license": "",
  "name": "erdantic",
  "package_url": "https://pypi.org/project/erdantic/",
  "project_url": "https://pypi.org/project/erdantic/",
  "project_urls": {
    "Bug Tracker": "https://github.com/drivendataorg/erdantic/issues",
    "Changelog": "https://erdantic.drivendata.org/stable/changelog/",
    "Documentation": "https://erdantic.drivendata.org/",
    "Repository": "https://github.com/drivendataorg/erdantic"
  },
  "release_url": "https://pypi.org/project/erdantic/0.6.0/",
  "requires_dist": [
    "importlib_metadata ; python_version < '3.8'",
    "pydantic >= 2",
    "pydantic-core",
    "pygraphviz",
    "typer",
    "typing_extensions > 4 ; python_version < '3.8'"
  ],
  "requires_python": ">=3.7",
  "summary": "entity relationship diagrams for python data model classes like pydantic.",
  "version": "0.6.0",
  "releases": [],
  "developers": [
    "info@drivendata.org"
  ],
  "kwds": "93relationship_diagrams diagrams entity diagram documentation",
  "license_kwds": "",
  "libtype": "pypi",
  "id": "pypi_erdantic",
  "homepage": "",
  "release_count": 11,
  "dependency_ids": [
    "pypi_importlib_metadata",
    "pypi_pydantic",
    "pypi_pydantic_core",
    "pypi_pygraphviz",
    "pypi_typer",
    "pypi_typing_extensions"
  ]
}
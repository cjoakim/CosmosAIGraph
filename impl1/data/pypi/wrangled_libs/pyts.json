{
  "classifiers": [
    "development status :: 3 - alpha",
    "intended audience :: developers",
    "intended audience :: science/research",
    "license :: osi approved",
    "operating system :: macos",
    "operating system :: microsoft :: windows",
    "operating system :: posix",
    "operating system :: unix",
    "programming language :: python",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: scientific/engineering",
    "topic :: software development"
  ],
  "description": "[![build status](https://dev.azure.com/johannfaouzi0034/johannfaouzi/_apis/build/status/johannfaouzi.pyts?branchname=main)](https://dev.azure.com/johannfaouzi0034/johannfaouzi/_build/latest?definitionid=1&branchname=main)\n[![documentation status](https://readthedocs.org/projects/pyts/badge/?version=latest)](https://pyts.readthedocs.io/)\n[![codecov](https://codecov.io/gh/johannfaouzi/pyts/branch/main/graph/badge.svg)](https://codecov.io/gh/johannfaouzi/pyts)\n[![pypi - python version](https://img.shields.io/pypi/pyversions/pyts.svg)](https://img.shields.io/pypi/pyversions/pyts.svg)\n[![pypi version](https://badge.fury.io/py/pyts.svg)](https://badge.fury.io/py/pyts)\n[![conda version](https://img.shields.io/conda/vn/conda-forge/pyts.svg)](https://anaconda.org/conda-forge/pyts)\n[![codeql](https://github.com/johannfaouzi/pyts/workflows/codeql/badge.svg)](https://github.com/johannfaouzi/pyts/actions?query=workflow%3acodeql)\n[![doi](https://zenodo.org/badge/doi/10.5281/zenodo.1244152.svg)](https://doi.org/10.5281/zenodo.1244152)\n\n## pyts: a python package for time series classification\n\npyts is a python package for time series classification. it\naims to make time series classification easily accessible by providing\npreprocessing and utility tools, and implementations of\nstate-of-the-art algorithms. most of these algorithms transform time series,\nthus pyts provides several tools to perform these transformations.\n\n\n### installation\n\n#### dependencies\n\npyts requires:\n\n- python (>= 3.8)\n- numpy (>= 1.22.4)\n- scipy (>= 1.8.1)\n- scikit-learn (>= 1.2.0)\n- joblib (>= 1.1.1)\n- numba (>= 0.55.2)\n\nto run the examples matplotlib (>=2.0.0) is required.\n\n\n#### user installation\n\nif you already have a working installation of numpy, scipy, scikit-learn,\njoblib and numba, you can easily install pyts using ``pip``\n\n    pip install pyts\n\nor ``conda`` via the ``conda-forge`` channel\n\n    conda install -c conda-forge pyts\n\nyou can also get the latest version of pyts by cloning the repository\n\n    git clone https://github.com/johannfaouzi/pyts.git\n    cd pyts\n    pip install .\n\n\n#### testing\n\nafter installation, you can launch the test suite from outside the source\ndirectory using pytest:\n\n    pytest pyts\n\n\n### changelog\n\nsee the [changelog](https://pyts.readthedocs.io/en/stable/changelog.html)\nfor a history of notable changes to pyts.\n\n### development\n\nthe development of this package is in line with the one of the scikit-learn\ncommunity. therefore, you can refer to their\n[development guide](https://scikit-learn.org/stable/developers/). a slight\ndifference is the use of numba instead of cython for optimization.\n\n### documentation\n\nthe section below gives some information about the implemented algorithms in pyts.\nfor more information, please have a look at the\n[html documentation available via readthedocs](https://pyts.readthedocs.io/).\n\n### citation\n\nif you use pyts in a scientific publication, we would appreciate\ncitations to the following [paper](http://www.jmlr.org/papers/v21/19-763.html):\n```\njohann faouzi and hicham janati. pyts: a python package for time series classification.\njournal of machine learning research, 21(46):1\u22126, 2020.\n```\n\nbibtex entry:\n```\n@article{jmlr:v21:19-763,\n  author  = {johann faouzi and hicham janati},\n  title   = {pyts: a python package for time series classification},\n  journal = {journal of machine learning research},\n  year    = {2020},\n  volume  = {21},\n  number  = {46},\n  pages   = {1-6},\n  url     = {http://jmlr.org/papers/v21/19-763.html}\n}\n```\n\n### implemented features\n\n**note: the content described in this section corresponds to the main branch\n(i.e., the latest version), and not the latest released version. you may have to\ninstall the latest version to use some of these features.**\n\npyts consists of the following modules:\n\n- `approximation`: this module provides implementations of algorithms that\napproximate time series. implemented algorithms are\n[piecewise aggregate approximation](https://pyts.readthedocs.io/en/latest/generated/pyts.approximation.piecewiseaggregateapproximation.html),\n[symbolic aggregate approximation](https://pyts.readthedocs.io/en/latest/generated/pyts.approximation.symbolicaggregateapproximation.html),\n[discrete fourier transform](https://pyts.readthedocs.io/en/latest/generated/pyts.approximation.discretefouriertransform.html),\n[multiple coefficient binning](https://pyts.readthedocs.io/en/latest/generated/pyts.approximation.multiplecoefficientbinning.html) and\n[symbolic fourier approximation](https://pyts.readthedocs.io/en/latest/generated/pyts.approximation.symbolicfourierapproximation.html).\n\n- `bag_of_words`: this module provide tools to transform time series into bags\nof words. implemented algorithms are\n[wordextractor](https://pyts.readthedocs.io/en/latest/generated/pyts.bag_of_words.wordextractor.html) and\n[bagofwords](https://pyts.readthedocs.io/en/latest/generated/pyts.bag_of_words.bagofwords.html).\n\n\n- `classification`: this module provides implementations of algorithms that\ncan classify time series. implemented algorithms are\n[kneighborsclassifier](https://pyts.readthedocs.io/en/latest/generated/pyts.classification.kneighborsclassifier.html),\n[saxvsm](https://pyts.readthedocs.io/en/latest/generated/pyts.classification.saxvsm.html),\n[bossvs](https://pyts.readthedocs.io/en/latest/generated/pyts.classification.bossvs.html),\n[learningshapelets](https://pyts.readthedocs.io/en/latest/generated/pyts.classification.learningshapelets.html),\n[timeseriesforest](https://pyts.readthedocs.io/en/latest/generated/pyts.classification.timeseriesforest.html) and\n[tsbf](https://pyts.readthedocs.io/en/latest/generated/pyts.classification.tsbf.html).\n\n- `datasets`: this module provides utilities to make or load toy datasets,\nas well as fetching datasets from the\n[uea & ucr time series classification repository](http://www.timeseriesclassification.com).\n\n- `decomposition`: this module provides implementations of algorithms that\ndecompose a time series into several time series. the only implemented\nalgorithm is\n[singular spectrum analysis](https://pyts.readthedocs.io/en/latest/generated/pyts.decomposition.singularspectrumanalysis.html).\n\n- `image`: this module provides implementations of algorithms that transform\ntime series into images. implemented algorithms are\n[recurrence plot](https://pyts.readthedocs.io/en/latest/generated/pyts.image.recurrenceplot.html),\n[gramian angular field](https://pyts.readthedocs.io/en/latest/generated/pyts.image.gramianangularfield.html) and\n[markov transition field](https://pyts.readthedocs.io/en/latest/generated/pyts.image.markovtransitionfield.html).\n\n- `metrics`: this module provides implementations of metrics that are specific\nto time series. implemented metrics are\n[dynamic time warping](https://pyts.readthedocs.io/en/latest/generated/pyts.metrics.dtw.html)\nwith several variants and the\n[boss](https://pyts.readthedocs.io/en/latest/generated/pyts.metrics.boss.html)\nmetric.\n\n- `multivariate`: this modules provides utilities to deal with multivariate\ntime series. available tools are\n[multivariatetransformer](https://pyts.readthedocs.io/en/latest/generated/pyts.multivariate.transformation.multivariatetransformer.html) and\n[multivariateclassifier](https://pyts.readthedocs.io/en/latest/generated/pyts.multivariate.classification.multivariateclassifier.html)\nto transform and classify multivariate time series using tools for univariate\ntime series respectively, as well as\n[jointrecurrenceplot](https://pyts.readthedocs.io/en/latest/generated/pyts.multivariate.image.jointrecurrenceplot.html) and\n[weasel+muse](https://pyts.readthedocs.io/en/latest/generated/pyts.multivariate.transformation.weaselmuse.html).\n\n- `preprocessing`: this module provides most of the scikit-learn preprocessing\ntools but applied sample-wise (i.e. to each time series independently) instead\nof feature-wise, as well as an\n[imputer](https://pyts.readthedocs.io/en/latest/generated/pyts.preprocessing.interpolationimputer.html)\nof missing values using interpolation. more information is available at the\n[pyts.preprocessing api documentation](https://pyts.readthedocs.io/en/latest/api.html#module-pyts.preprocessing).\n\n- `transformation`: this module provides implementations of algorithms that\ntransform a data set of time series with shape `(n_samples, n_timestamps)` into\na data set with shape `(n_samples, n_extracted_features)`. implemented algorithms are\n[bagofpatterns](https://pyts.readthedocs.io/en/latest/generated/pyts.transformation.bagofpatterns.html),\n[boss](https://pyts.readthedocs.io/en/latest/generated/pyts.transformation.boss.html),\n[shapelettransform](https://pyts.readthedocs.io/en/latest/generated/pyts.transformation.shapelettransform.html),\n[weasel](https://pyts.readthedocs.io/en/latest/generated/pyts.transformation.weasel.html) and\n[rocket](https://pyts.readthedocs.io/en/latest/generated/pyts.transformation.rocket.html).\n\n- `utils`: a simple module with\n[utility functions](https://pyts.readthedocs.io/en/latest/api.html#module-pyts.utils).\n\n## license\nthe contents of this repository is under a [bsd 3-clause license](https://github.com/johannfaouzi/pyts/blob/main/license.txt).\n",
  "docs_url": null,
  "keywords": "",
  "license": "new bsd",
  "name": "pyts",
  "package_url": "https://pypi.org/project/pyts/",
  "project_url": "https://pypi.org/project/pyts/",
  "project_urls": {
    "Download": "https://github.com/johannfaouzi/pyts",
    "Homepage": "https://github.com/johannfaouzi/pyts"
  },
  "release_url": "https://pypi.org/project/pyts/0.13.0/",
  "requires_dist": [
    "numpy (>=1.22.4)",
    "scipy (>=1.8.1)",
    "scikit-learn (>=1.2.0)",
    "joblib (>=1.1.1)",
    "numba (>=0.55.2)",
    "docutils (==0.14) ; extra == 'docs'",
    "sphinx (==1.8.5) ; extra == 'docs'",
    "sphinx-gallery ; extra == 'docs'",
    "numpydoc ; extra == 'docs'",
    "matplotlib ; extra == 'docs'",
    "packaging ; extra == 'docs'",
    "flake8 ; extra == 'linting'",
    "pytest ; extra == 'tests'",
    "pytest-cov ; extra == 'tests'"
  ],
  "requires_python": "",
  "summary": "a python package for time series classification",
  "version": "0.13.0",
  "releases": [],
  "developers": [
    "johann.faouzi@gmail.com",
    "johann_faouzi"
  ],
  "kwds": "pyts pyversions pytest badge py",
  "license_kwds": "new bsd",
  "libtype": "pypi",
  "id": "pypi_pyts",
  "homepage": "https://github.com/johannfaouzi/pyts",
  "release_count": 16,
  "dependency_ids": [
    "pypi_docutils",
    "pypi_flake8",
    "pypi_joblib",
    "pypi_matplotlib",
    "pypi_numba",
    "pypi_numpy",
    "pypi_numpydoc",
    "pypi_packaging",
    "pypi_pytest",
    "pypi_pytest_cov",
    "pypi_scikit_learn",
    "pypi_scipy",
    "pypi_sphinx",
    "pypi_sphinx_gallery"
  ]
}
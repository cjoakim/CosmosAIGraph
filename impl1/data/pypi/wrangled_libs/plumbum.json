{
  "classifiers": [
    "development status :: 5 - production/stable",
    "license :: osi approved :: mit license",
    "operating system :: microsoft :: windows",
    "operating system :: posix",
    "programming language :: python :: 3",
    "programming language :: python :: 3 :: only",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.12",
    "programming language :: python :: 3.6",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: software development :: build tools",
    "topic :: system :: systems administration"
  ],
  "description": ".. image:: https://readthedocs.org/projects/plumbum/badge/\n   :target: https://plumbum.readthedocs.io/en/latest/\n   :alt: documentation status\n.. image:: https://github.com/tomerfiliba/plumbum/workflows/ci/badge.svg\n   :target: https://github.com/tomerfiliba/plumbum/actions\n   :alt: build status\n.. image:: https://coveralls.io/repos/tomerfiliba/plumbum/badge.svg?branch=master&service=github\n   :target: https://coveralls.io/github/tomerfiliba/plumbum?branch=master\n   :alt: coverage status\n.. image:: https://img.shields.io/pypi/v/plumbum.svg\n   :target: https://pypi.python.org/pypi/plumbum/\n   :alt: pypi status\n.. image:: https://img.shields.io/pypi/pyversions/plumbum.svg\n   :target: https://pypi.python.org/pypi/plumbum/\n   :alt: pypi versions\n.. image:: https://img.shields.io/conda/vn/conda-forge/plumbum.svg\n   :target: https://github.com/conda-forge/plumbum-feedstock\n   :alt: conda-forge badge\n.. image:: https://img.shields.io/pypi/l/plumbum.svg\n   :target: https://pypi.python.org/pypi/plumbum/\n   :alt: pypi license\n.. image:: https://badges.gitter.im/plumbumpy/lobby.svg\n   :alt: join the chat at https://gitter.im/plumbumpy/lobby\n   :target: https://gitter.im/plumbumpy/lobby?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge\n.. image:: https://img.shields.io/badge/code%20style-black-000000.svg\n   :alt: code styled with black\n   :target: https://github.com/psf/black\n\n\nplumbum: shell combinators\n==========================\n\never wished the compactness of shell scripts be put into a **real** programming language?\nsay hello to *plumbum shell combinators*. plumbum (latin for *lead*, which was used to create\npipes back in the day) is a small yet feature-rich library for shell script-like programs in python.\nthe motto of the library is **\"never write shell scripts again\"**, and thus it attempts to mimic\nthe **shell syntax** (\"shell combinators\") where it makes sense, while keeping it all **pythonic\nand cross-platform**.\n\napart from shell-like syntax and handy shortcuts, the library provides local and remote command\nexecution (over ssh), local and remote file-system paths, easy working-directory and environment\nmanipulation, and a programmatic command-line interface (cli) application toolkit.\nnow let's see some code!\n\n*this is only a teaser; the full documentation can be found at*\n`read the docs <https://plumbum.readthedocs.io>`_\n\ncheat sheet\n-----------\n\nbasics\n******\n\n.. code-block:: python\n\n    >>> from plumbum import local\n    >>> local.cmd.ls\n    localcommand(/bin/ls)\n    >>> local.cmd.ls()\n    'build.py\\nchangelog.rst\\nconda.recipe\\ncontributing.rst\\ndocs\\nexamples\\nexperiments\\nlicense\\nmanifest.in\\npipfile\\nplumbum\\nplumbum.egg-info\\npytest.ini\\nreadme.rst\\nsetup.cfg\\nsetup.py\\ntests\\ntranslations.py\\n'\n    >>> notepad = local[\"c:\\\\windows\\\\notepad.exe\"]\n    >>> notepad()                                   # notepad window pops up\n    ''                                              # notepad window is closed by user, command returns\n\nin the example above, you can use ``local[\"ls\"]`` if you have an unusually named executable or a full path to an executable. the ``local`` object represents your local machine. as you'll see, plumbum also provides remote machines that use the same api!\nyou can also use ``from plumbum.cmd import ls`` as well for accessing programs in the ``path``.\n\npiping\n******\n\n.. code-block:: python\n\n    >>> from plumbum.cmd import ls, grep, wc\n    >>> chain = ls[\"-a\"] | grep[\"-v\", r\"\\.py\"] | wc[\"-l\"]\n    >>> print(chain)\n    /bin/ls -a | /bin/grep -v '\\.py' | /usr/bin/wc -l\n    >>> chain()\n    '27\\n'\n\nredirection\n***********\n\n.. code-block:: python\n\n    >>> from plumbum.cmd import cat, head\n    >>> ((cat < \"setup.py\") | head[\"-n\", 4])()\n    '#!/usr/bin/env python3\\nimport os\\n\\ntry:\\n'\n    >>> (ls[\"-a\"] > \"file.list\")()\n    ''\n    >>> (cat[\"file.list\"] | wc[\"-l\"])()\n    '31\\n'\n\nworking-directory manipulation\n******************************\n\n.. code-block:: python\n\n    >>> local.cwd\n    <localworkdir /home/tomer/workspace/plumbum>\n    >>> with local.cwd(local.cwd / \"docs\"):\n    ...     chain()\n    ...\n    '22\\n'\n\nforeground and background execution\n***********************************\n\n.. code-block:: python\n\n    >>> from plumbum import fg, bg\n    >>> (ls[\"-a\"] | grep[r\"\\.py\"]) & fg         # the output is printed to stdout directly\n    build.py\n    setup.py\n    translations.py\n    >>> (ls[\"-a\"] | grep[r\"\\.py\"]) & bg         # the process runs \"in the background\"\n    <future ['/bin/grep', '\\\\.py'] (running)>\n\ncommand nesting\n***************\n\n.. code-block:: python\n\n    >>> from plumbum.cmd import sudo, ifconfig\n    >>> print(sudo[ifconfig[\"-a\"]])\n    /usr/bin/sudo /sbin/ifconfig -a\n    >>> (sudo[ifconfig[\"-a\"]] | grep[\"-i\", \"loop\"]) & fg\n    lo        link encap:local loopback\n              up loopback running  mtu:16436  metric:1\n\nremote commands (over ssh)\n**************************\n\nsupports `openssh <http://www.openssh.org/>`_-compatible clients,\n`putty <http://www.chiark.greenend.org.uk/~sgtatham/putty/>`_ (on windows)\nand `paramiko <https://github.com/paramiko/paramiko/>`_ (a pure-python implementation of ssh2)\n\n.. code-block:: python\n\n    >>> from plumbum import sshmachine\n    >>> remote = sshmachine(\"somehost\", user = \"john\", keyfile = \"/path/to/idrsa\")\n    >>> r_ls = remote[\"ls\"]\n    >>> with remote.cwd(\"/lib\"):\n    ...     (r_ls | grep[\"0.so.0\"])()\n    ...\n    'libusb-1.0.so.0\\nlibusb-1.0.so.0.0.0\\n'\n\ncli applications\n****************\n\n.. code-block:: python\n\n    import logging\n    from plumbum import cli\n\n    class mycompiler(cli.application):\n        verbose = cli.flag([\"-v\", \"--verbose\"], help = \"enable verbose mode\")\n        include_dirs = cli.switchattr(\"-i\", list = true, help = \"specify include directories\")\n\n        @cli.switch(\"--loglevel\", int)\n        def set_log_level(self, level):\n            \"\"\"sets the log-level of the logger\"\"\"\n            logging.root.setlevel(level)\n\n        def main(self, *srcfiles):\n            print(\"verbose:\", self.verbose)\n            print(\"include dirs:\", self.include_dirs)\n            print(\"compiling:\", srcfiles)\n\n    if __name__ == \"__main__\":\n        mycompiler.run()\n\nsample output\n+++++++++++++\n\n::\n\n    $ python3 simple_cli.py -v -i foo/bar -ispam/eggs x.cpp y.cpp z.cpp\n    verbose: true\n    include dirs: ['foo/bar', 'spam/eggs']\n    compiling: ('x.cpp', 'y.cpp', 'z.cpp')\n\ncolors and styles\n-----------------\n\n.. code-block:: python\n\n    from plumbum import colors\n    with colors.red:\n        print(\"this library provides safe, flexible color access.\")\n        print(colors.bold | \"(and styles in general)\", \"are easy!\")\n    print(\"the simple 16 colors or\",\n          colors.orchid & colors.underline | '256 named colors,',\n          colors.rgb(18, 146, 64) | \"or full rgb colors\",\n          'can be used.')\n    print(\"unsafe \" + colors.bg.dark_khaki + \"color access\" + colors.bg.reset + \" is available too.\")\n",
  "docs_url": null,
  "keywords": "cli,color,execution,local,path,pipe,popen,process,remote,shell,ssh",
  "license": "copyright (c) 2013 tomer filiba (tomerfiliba@gmail.com)  permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"software\"), to deal in the software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the software, and to permit persons to whom the software is furnished to do so, subject to the following conditions:  the above copyright notice and this permission notice shall be included in all copies or substantial portions of the software.  the software is provided \"as is\", without warranty of any kind, express or implied, including but not limited to the warranties of merchantability, fitness for a particular purpose and noninfringement. in no event shall the authors or copyright holders be liable for any claim, damages or other liability, whether in an action of contract, tort or otherwise, arising from, out of or in connection with the software or the use or other dealings in the software.",
  "name": "plumbum",
  "package_url": "https://pypi.org/project/plumbum/",
  "project_url": "https://pypi.org/project/plumbum/",
  "project_urls": {
    "Bug Tracker": "https://github.com/tomerfiliba/plumbum/issues",
    "Changelog": "https://plumbum.readthedocs.io/en/latest/changelog.html",
    "Cheatsheet": "https://plumbum.readthedocs.io/en/latest/quickref.html",
    "Documentation": "https://plumbum.readthedocs.io/",
    "Homepage": "https://github.com/tomerfiliba/plumbum"
  },
  "release_url": "https://pypi.org/project/plumbum/1.8.2/",
  "requires_dist": [
    "pywin32; platform_system == 'Windows' and platform_python_implementation != 'PyPy'",
    "paramiko; extra == 'dev'",
    "psutil; extra == 'dev'",
    "pytest-cov; extra == 'dev'",
    "pytest-mock; extra == 'dev'",
    "pytest-timeout; extra == 'dev'",
    "pytest>=6.0; extra == 'dev'",
    "sphinx-rtd-theme>=1.0.0; extra == 'docs'",
    "sphinx>=4.0.0; extra == 'docs'",
    "paramiko; extra == 'ssh'"
  ],
  "requires_python": ">=3.6",
  "summary": "plumbum: shell combinators library",
  "version": "1.8.2",
  "releases": [],
  "developers": [
    "tomerfiliba@gmail.com"
  ],
  "kwds": "plumbumpy plumbum documentation pipes cli",
  "license_kwds": "copyright liable noninfringement liability software",
  "libtype": "pypi",
  "id": "pypi_plumbum",
  "homepage": "",
  "release_count": 27,
  "dependency_ids": [
    "pypi_paramiko",
    "pypi_psutil",
    "pypi_pytest",
    "pypi_pytest_cov",
    "pypi_pytest_mock",
    "pypi_pytest_timeout",
    "pypi_pywin32",
    "pypi_sphinx",
    "pypi_sphinx_rtd_theme"
  ]
}
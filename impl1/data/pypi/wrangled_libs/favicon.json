{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "operating system :: microsoft :: windows",
    "operating system :: posix",
    "operating system :: unix",
    "programming language :: python",
    "programming language :: python :: 2.7",
    "programming language :: python :: 3",
    "programming language :: python :: 3.4",
    "programming language :: python :: 3.5",
    "programming language :: python :: 3.6",
    "programming language :: python :: 3.7",
    "programming language :: python :: implementation :: pypy",
    "topic :: internet :: www/http",
    "topic :: utilities"
  ],
  "description": "========\nfavicon\n========\n\n\n\n``favicon`` is a python library to find a website's favicon.\n\ninstallation\n============\n\n.. code-block:: bash\n\n   pip install favicon\n\nusage\n=====\n\nget all icons:\n\n.. code-block:: python\n\n   >>> import favicon\n   >>> icons = favicon.get('https://www.python.org/')\n   icon(url='https://www.python.org/static/apple-touch-icon-144x144-precomposed.png', width=144, height=144, format='png')\n   icon(url='https://www.python.org/static/apple-touch-icon-114x114-precomposed.png', width=114, height=114, format='png')\n   icon(url='https://www.python.org/static/apple-touch-icon-72x72-precomposed.png', width=72, height=72, format='png')\n   icon(url='https://www.python.org/static/apple-touch-icon-precomposed.png', width=0, height=0, format='png')\n   icon(url='https://www.python.org/static/favicon.ico', width=0, height=0, format='ico')\n\ndownload largest icon:\n\n.. code-block:: python\n\n   import requests\n   import favicon\n\n   icons = favicon.get('https://www.python.org/')\n   icon = icons[0]\n\n   response = requests.get(icon.url, stream=true)\n   with open('/tmp/python-favicon.{}'.format(icon.format), 'wb') as image:\n       for chunk in response.iter_content(1024):\n           image.write(chunk)\n\n   # /tmp/python-favicon.png\n\n`request library <https://2.python-requests.org/>`_ parameters can be passed to `favicon.get()` as keyword\narguments:\n\n.. code-block:: python\n\n   import favicon\n\n   user_agent = 'mozilla/5.0 (macintosh; intel mac os x 10_9_3) applewebkit/537.36 (khtml, like gecko) chrome/35.0.1916.47 safari/537.36'\n   headers = {'user-agent': user_agent}\n   favicon.get('https://www.python.org/', headers=headers, timeout=2)\n\nrequirements\n============\n\n* `requests <http://docs.python-requests.org/>`_\n* `beautifulsoup4 <https://www.crummy.com/software/beautifulsoup/bs4/doc/>`_\n\ninspiration\n===========\n\n* `pyfav <https://github.com/phillipsm/pyfav>`_\n* `besticon <https://github.com/mat/besticon/>`_\n* `how to get high resolution website logo (favicon) for a given url <https://stackoverflow.com/questions/21991044/how-to-get-high-resolution-website-logo-favicon-for-a-given-url>`_\n\nchangelog\n=========\n\n0.7.0 (2019-08-31)\n------------------\n\n* handle empty `href` and `content` attribute values (`#22 <https://github.com/scottwernervt/favicon/issues/22>`_).\n* support passing request library parameters to `favicon.get()` (`#21 <https://github.com/scottwernervt/favicon/issues/21>`_).\n\n  * deprecate `headers` argument. use keyword arguments: `favicon.get(url, headers={'user-agent'; 'my-agent'}`.\n\n0.6.0 (2019-08-10)\n------------------\n\n* upgrade ``beautifulsoup4`` and ``requests`` package dependencies.\n\n0.5.1 (2018-11-05)\n------------------\n\n* fix 'nonetype' object has no attribute 'lower' for meta tags (`#16 <https://github.com/scottwernervt/favicon/issues/16>`_).\n\n0.5.0 (2018-11-05)\n------------------\n\n* add support for meta tags (`#15 <https://github.com/scottwernervt/favicon/pull/15>`_).\n* set bs4 parser to ``html.parser`` (`#13 <https://github.com/scottwernervt/favicon/issues/13>`_).\n* use ``src`` package structure (`#11 <https://github.com/scottwernervt/favicon/issues/11>`_).\n\n0.4.1 (2018-10-01)\n------------------\n\n* update ``requirements.txt`` and ``dev-requirements.txt``.\n\n0.4.0 (2018-07-19)\n------------------\n\n* add support for python 2.7 and pypy.\n* get icon size for new york times (`#9 <https://github.com/scottwernervt/favicon/issues/9>`_).\n\n0.3.0 (2018-05-18)\n------------------\n\n* fav icon not found for microsoft.com (`#7 <https://github.com/scottwernervt/favicon/issues/7>`_).\n\n0.2.0 (2018-05-17)\n------------------\n\n* handle poor html values in links (`#5 <https://github.com/scottwernervt/favicon/issues/5>`_).\n* use given website for icon url scheme (`#6 <https://github.com/scottwernervt/favicon/issues/6>`_).\n\n0.1.0 (2018-05-07)\n------------------\n\n* first release.\n\n\n",
  "docs_url": null,
  "keywords": "favicon icon",
  "license": "mit",
  "name": "favicon",
  "package_url": "https://pypi.org/project/favicon/",
  "project_url": "https://pypi.org/project/favicon/",
  "project_urls": {
    "Homepage": "https://github.com/scottwernervt/favicon"
  },
  "release_url": "https://pypi.org/project/favicon/0.7.0/",
  "requires_dist": [
    "requests (>=2.21.0)",
    "beautifulsoup4 (>=4.7.0)"
  ],
  "requires_python": "",
  "summary": "get a website's favicon.",
  "version": "0.7.0",
  "releases": [],
  "developers": [
    "scott.werner.vt@gmail.com",
    "scott_werner"
  ],
  "kwds": "icon icons favicon besticon applewebkit",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_favicon",
  "homepage": "https://github.com/scottwernervt/favicon",
  "release_count": 8,
  "dependency_ids": [
    "pypi_beautifulsoup4",
    "pypi_requests"
  ]
}
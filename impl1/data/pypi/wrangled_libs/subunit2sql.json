{
  "classifiers": [
    "intended audience :: developers",
    "license :: osi approved :: apache software license",
    "operating system :: os independent",
    "programming language :: python",
    "programming language :: python :: 2",
    "programming language :: python :: 3"
  ],
  "description": "==================\nsubunit2sql readme\n==================\n\nsubunit2sql is a tool for storing test results data in a sql database. like\nit's name implies it was originally designed around converting `subunit`_\nstreams to data in a sql database and the packaged utilities assume a subunit\nstream as the input format. however, the data model used for the db does not\npreclude using any test result format. additionally the analysis tooling built\non top of a database is data format agnostic. however if you choose to use a\ndifferent result format as an input for the database additional tooling using\nthe db api would need to be created to parse a different test result output\nformat. it's also worth pointing out that subunit has several language library\nbindings available. so as a user you could create a small filter to convert a\ndifferent format to subunit. creating a filter should be fairly easy and then\nyou don't have to worry about writing a tool like :ref:`subunit2sql` to use a\ndifferent format.\n\n.. _subunit: https://github.com/testing-cabal/subunit/blob/master/readme.rst\n\nfor multiple distributed test runs that are generating subunit output it is\nuseful to store the results in a unified repository. this is the motivation for\nthe `testrepository`_ project which does a good job for centralizing the\nresults from multiple test runs.\n\n.. _testrepository: http://testrepository.readthedocs.org/en/latest/\n\nhowever, imagine something like the openstack ci system where the same basic\ntest suite is normally run several hundreds of times a day. to provide useful\nintrospection on the data from those runs and to build trends over time\nthe test results need to be stored in a format that allows for easy querying.\nusing a sql database makes a lot of sense for doing this, which was the\noriginal motivation for the project.\n\nat a high level subunit2sql uses alembic migrations to setup a db schema that\ncan then be used by the :ref:`subunit2sql` tool to parse subunit streams and\npopulate the db. then there are tools for interacting with the stored data in\nthe :ref:`subunit2sql-graph` command as well as the :ref:`sql2subunit`\ncommand to create a subunit stream from data in the database. additionally,\nsubunit2sql provides a python db api that can be used to query information from\nthe stored data to build other tooling.\n\n- source: http://git.openstack.org/cgit/openstack-infra/subunit2sql\n- bugs, stories: https://storyboard.openstack.org/#!/project/747\n\nusage\n=====\n\ndb setup\n--------\n\nthe usage of subunit2sql is split into 2 stages. first you need to prepare a\ndatabase with the proper schema; subunit2sql-db-manage should be used to do\nthis. the utility requires db connection info which can be specified on the\ncommand or with a config file. obviously the sql connector type, user,\npassword, address, and database name should be specific to your environment.\nsubunit2sql-db-manage will use alembic to setup the db schema. you can run the\ndb migrations with the command::\n\n    subunit2sql-db-manage --database-connection mysql://subunit:pass@127.0.0.1/subunit upgrade head\n\nor with a config file::\n\n    subunit2sql-db-manage --config-file subunit2sql.conf upgrade head\n\nthis will bring the db schema up to the latest version for subunit2sql.\n\n.. _subunit2sql:\n\nsubunit2sql\n-----------\n\nonce you have a database setup with the proper database schema you can then use\nthe subunit2sql command to populate the database with data from your test runs.\nsubunit2sql takes in a subunit v2 either through stdin or by passing it file\npaths as positional arguments to the script. if only a subunit v1 stream is\navailable, it can be converted to a subunit v2 stream using the subunit-1to2\nutility.\n\nthere are several options for running subunit2sql, they can be listed with::\n\n    subunit2sql --help\n\nthe only required option is --database-connection. the options can either be\nused on the cli, or put in a config file. if a config file is used you need to\nspecify the location on the cli.\n\nmost of the optional arguments deal with how subunit2sql interacts with the\nsql db. however, it is worth pointing out that the artifacts option and the\nrun_meta option are used to pass additional metadata into the database for the\nrun(s) being added. the artifacts option should be used to pass in a url or\npath that points to any logs or other external test artifacts related to the\nrun being added. the run_meta option takes in a dictionary which will be added\nto the database as key value pairs associated with the run being added.\n\n.. _sql2subunit:\n\nsql2subunit\n-----------\n\nthe sql2subunit utility is used for taking a run_id and creating a subunit\nv2 stream from the data in the db about that run. to create a new subunit\nstream run::\n\n    sql2subunit $run_id\n\nalong with any options that you would normally use to either specify a config\nfile or the db connection info. running this command will print to stdout the\nsubunit v2 stream for the run specified by $run_id, unless the --out_path\nargument is specified to write it to a file instead.\n\ndevelopment\n===========\n\nfor development and testing, you need a local database setup. check\n``tools/test-setup.sh`` on how the databases need to be configured.\n\nchangelog\n=========\n\nto see the release notes go here: `http://docs.openstack.org/releasenotes/subunit2sql/ <http://docs.openstack.org/releasenotes/subunit2sql/>`_\n\n\n\n",
  "docs_url": null,
  "keywords": "",
  "license": "apache license, version 2.0",
  "name": "subunit2sql",
  "package_url": "https://pypi.org/project/subunit2sql/",
  "project_url": "https://pypi.org/project/subunit2sql/",
  "project_urls": null,
  "release_url": "https://pypi.org/project/subunit2sql/1.10.0/",
  "requires_dist": [
    "pbr (!=2.1.0,>=2.0.0)",
    "alembic (>=0.8.10)",
    "oslo.config (>=4.0.0)",
    "oslo.db (>=4.24.0)",
    "python-subunit (>=0.0.18)",
    "six (>=1.9.0)",
    "SQLAlchemy (!=1.1.5,!=1.1.6,!=1.1.7,!=1.1.8,>=1.0.10)",
    "stevedore (>=1.20.0)",
    "python-dateutil (>=2.4.2)",
    "pandas (>=0.20.1); extra == 'graph'",
    "matplotlib (>=2.0.2); extra == 'graph'",
    "hacking (!=0.13.0,<0.14,>=0.12.0); extra == 'test'",
    "coverage (>=3.6); extra == 'test'",
    "fixtures (>=0.3.14); extra == 'test'",
    "mock (>=1.0); extra == 'test'",
    "sphinx (>=1.6.2); extra == 'test'",
    "testscenarios (>=0.4); extra == 'test'",
    "stestr (>=1.0.0); extra == 'test'",
    "testtools (>=0.9.34); extra == 'test'",
    "PyMySql; extra == 'test'",
    "psycopg2; extra == 'test'",
    "oslo.concurrency (>=3.5.0); extra == 'test'",
    "reno (>=0.1.1); extra == 'test'",
    "openstackdocstheme (>=1.11.0); extra == 'test'",
    "testresources (>=0.2.4); extra == 'test'",
    "testscenarios (>=0.4); extra == 'test'"
  ],
  "requires_python": "",
  "summary": "command to read a subunit file or stream and put the data in a sql db",
  "version": "1.10.0",
  "releases": [],
  "developers": [
    "matthew_treinish",
    "mtreinish@kortar.org"
  ],
  "kwds": "subunit2sql _subunit2sql _subunit subunit databases",
  "license_kwds": "apache license, version 2.0",
  "libtype": "pypi",
  "id": "pypi_subunit2sql",
  "homepage": "",
  "release_count": 31,
  "dependency_ids": [
    "pypi_alembic",
    "pypi_coverage",
    "pypi_fixtures",
    "pypi_hacking",
    "pypi_matplotlib",
    "pypi_mock",
    "pypi_openstackdocstheme",
    "pypi_oslo.concurrency",
    "pypi_oslo.config",
    "pypi_oslo.db",
    "pypi_pandas",
    "pypi_pbr",
    "pypi_psycopg2",
    "pypi_pymysql",
    "pypi_python_dateutil",
    "pypi_python_subunit",
    "pypi_reno",
    "pypi_six",
    "pypi_sphinx",
    "pypi_sqlalchemy",
    "pypi_stestr",
    "pypi_stevedore",
    "pypi_testresources",
    "pypi_testscenarios",
    "pypi_testtools"
  ]
}
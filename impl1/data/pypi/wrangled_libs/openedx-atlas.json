{
  "classifiers": [
    "intended audience :: developers",
    "license :: osi approved :: gnu affero general public license v3 or later (agplv3+)",
    "natural language :: english"
  ],
  "description": "openedx-atlas\n#############\n\nan open edx cli tool for moving translation files from openedx-translations.\n\noverview\n--------\n\noep-58 proposes changes to the way the open edx organization organizes and maintains\ntranslation files. atlas is an open edx cli tool that uses git's sparse-checkout to\ndownload directories with the repository openedx-translations. these directories\ncorrespond to repositories within the github openedx organization. they contain\ntranslation files downloaded from transifex that have been translated by the open edx\ntranslations working group.\n\natlas is intended for both development and deployment, and is meant to be used after\ncloning a repository with translation files kept in openedx-translations. for instance,\nwhen building a docker image or testing localization strings locally. it should not be\nnecessary to run any application in english.\n\ninstallation\n------------\n\natlas itself is a bash script, but it can be installed in a couple of\ndifferent ways:\n\nfirst, ensure ``git`` is installed and available in ``path`` because atlas\nrelies on it.\n\n**install as an ``npm`` package**\n\ninstall from npm:\n\n.. code:: sh\n\n    npm install @edx/openedx-atlas\n\nthen add ``node_modules/.bin`` to your ``path``.\n\nverify that is installed via ``atlas --help``.\n\n**install directly from github releases**\n\n* download ``atlas`` from the `latest release <https://github.com/openedx/openedx-atlas/releases/latest/>`_, or from the `main branch <https://github.com/openedx/openedx-atlas/blob/main/atlas>`_:\n\n.. code:: sh\n\n    curl -l https://github.com/openedx/openedx-atlas/releases/latest/download/atlas -o atlas\n\n* allow execution ``chmod +x atlas``\n* either add ``atlas`` to your ``path``, or run using ``./atlas``\n\nusage\n-----\n\nthe help message below is copied from both ``atlas --help``. it's updated\nregularly and useful to understand ``atlas`` at a glance.\n\n.. code::\n\n    atlas is a cli tool that has essentially one command: `atlas pull`\n\n    configuration file:\n\n        atlas defaults to using a configuration file named `atlas.yml` placed\n        in the root directory. configuration file:\n\n        pull:\n          repository: <organization-name>/<repository-name>\n          branch: <branch-name>\n          directory: <repo-directory-name>:<local-dir-name> ...\n          filter: <pattern> ...\n          expand_glob: 0\n\n        atlas can also use a configuration file in a different path using the `--config` flag\n        after `atlas`: `atlas pull --config config.yml`.\n\n        atlas can also be used without a configuration file by using the flags below after\n        `atlas pull`.\n\n    positional arguments directory mappings ...\n\n       one or more directory map pair separated by a colon (:) e.g. from_dir:to_dir.\n\n       the first directory (from_dir) represents a directory in the git repository.\n       the second directory (to_dir) represents a local directory to copy files to.\n\n       at least one directory pair is required:\n\n         $ atlas pull frontend-app-learning/messages:learning-app frontend-lib-test/messages:test-lib\n\n       this syntax is inspired by the `docker --volume from_dir:to_dir` mounting syntax.\n\n    options:\n\n        `-r` or `--repository`:\n            slug of the github repository to pull from. defaults 'openedx/openedx-translations'.\n\n        `-b` or `--branch`:\n            branch to pull from. defaults to 'main'\n\n        `-f` or `--filter`:\n           a comma-separated (or space-separated) list of patterns match files and sub-directories.\n           this is mainly useful to filter specific languages to download.\n\n           the same filter is applied to all directory mappings arguments.\n\n           `--filter=fr_ca,ar,es_419` will match both directories named 'es_419' and\n           files named 'es_419.json' among others\n\n       `-g` or `--expand-glob`:\n           expand glob pattern e.g. 'atlas pull translations/*/done' to 'atlas pull translations/donexblock/done'\n           if it exists.\n\n    example:\n\n        $ cd frontend-app-learning/src/i18n/messages\n        $ atlas pull --filter=fr_ca,ar,es_419 \\\n                translations/frontend-app-learning/src/i18n/messages:frontend-app-learning \\\n                translations/frontend-component-header/src/i18n/messages:frontend-component-header\n\n        will result in the following tree:\n\n          \u251c\u2500\u2500 frontend-app-learning\n          \u2502   \u251c\u2500\u2500 ar.json\n          \u2502   \u251c\u2500\u2500 es_419.json\n          \u2502   \u2514\u2500\u2500 fr_ca.json\n          \u2514\u2500\u2500 frontend-component-header\n              \u251c\u2500\u2500 ar.json\n              \u251c\u2500\u2500 es_419.json\n              \u2514\u2500\u2500 fr_ca.json\n\n\n\n    commands:\n      pull      pull\n      -h, --help\n          --version\n\n\nrunning automated tests locally\n-------------------------------\n\n**install**\n\n* `shellspec <https://github.com/shellspec/shellspec#installation>`_\n* `shellcheck <https://github.com/koalaman/shellcheck#installing>`_\n* `getoptions <https://github.com/ko1nksm/getoptions#installation>`_\n\n**run**\n\n* ``make test``:  run all tests\n* ``make performance_tests``:  run performance tests which pulls from github.com/openedx\n* ``make unit_tests``:  run fast unit tests without external dependency\n\nusage examples\n--------------\n\nthere's a couple of patterns that are useful to imitate when using atlas\ndepending on the use case. ``atlas pull`` is most commonly implemented in\n``makefile``, however it can be also used in ``dockerfile`` builds or any\nother automation tool.\n\npython applications\n*******************\n\ntbd\n\n\nmicro-frontends\n***************\n\ntbd\n\n\nreleasing a new version\n-----------------------\nthis repository uses `semantic versioning <https://semver.org/>`_ with the aid of\n`semantic release <https://github.com/semantic-release/semantic-release/>`_ to automate the process.\n\nto release a new version, use the `conventional commits <https://open-edx-proposals.readthedocs.io/en/latest/oep-0051-bp-conventional-commits.html>`_ and the ``release.yml`` github action will\nautomatically create a new release and upload the ``atlas`` executable.\n\nnote: the ``atlas --version`` command only outputs the version if it's downloaded from a github release. otherwise, it\nwill output ``unreleased``.\n\nlicense\n-------\n\nthe code in this repository is licensed under the agpl 3.0 unless otherwise noted.\n\nplease see ``license`` for details.\n\nhow to contribute\n-----------------\n\ncontributions are very welcome.\n\nplease read\n`how to contribute <https://openedx.atlassian.net/wiki/spaces/comm/pages/941457737/how+to+start+contributing+to+the+open+edx+code+base>`_\nfor details.\n\ngetting help\n------------\n\nhave a question about this repository, or about open edx in general? please refer to this\n`list of resources`_ if you need any assistance.\n\n.. _list of resources: https://open.edx.org/getting-help\n\n\n",
  "docs_url": null,
  "keywords": "",
  "license": "agpl 3.0",
  "name": "openedx-atlas",
  "package_url": "https://pypi.org/project/openedx-atlas/",
  "project_url": "https://pypi.org/project/openedx-atlas/",
  "project_urls": {
    "Homepage": "https://github.com/openedx/openedx-atlas"
  },
  "release_url": "https://pypi.org/project/openedx-atlas/0.5.0/",
  "requires_dist": [],
  "requires_python": "",
  "summary": "an open edx cli tool for moving translation files from openedx-translations.",
  "version": "0.5.0",
  "releases": [],
  "developers": [
    "open_edx_project",
    "oscm@axim.org"
  ],
  "kwds": "atlas atlassian openedx translations translated",
  "license_kwds": "agpl 3.0",
  "libtype": "pypi",
  "id": "pypi_openedx_atlas",
  "homepage": "https://github.com/openedx/openedx-atlas",
  "release_count": 2,
  "dependency_ids": []
}
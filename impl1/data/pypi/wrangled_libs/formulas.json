{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: developers",
    "intended audience :: science/research",
    "license :: osi approved :: european union public licence 1.1 (eupl 1.1)",
    "natural language :: english",
    "operating system :: macos :: macos x",
    "operating system :: microsoft :: windows",
    "operating system :: os independent",
    "operating system :: posix",
    "operating system :: unix",
    "programming language :: python",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.6",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "programming language :: python :: implementation :: cpython",
    "topic :: scientific/engineering",
    "topic :: scientific/engineering :: information analysis",
    "topic :: software development :: libraries :: python modules",
    "topic :: utilities"
  ],
  "description": ".. _start-intro:\n\n\nwhat is formulas?\n*****************\n\n**formulas** implements an interpreter for excel formulas, which\nparses and compile excel formulas expressions.\n\nmoreover, it compiles excel workbooks to python and executes without\nusing the excel com server. hence, **excel is not needed**.\n\n\ninstallation\n************\n\nto install it use (with root privileges):\n\n.. code:: console\n\n   $ pip install formulas\n\nor download the last git version and use (with root privileges):\n\n.. code:: console\n\n   $ python setup.py install\n\n\ninstall extras\n==============\n\nsome additional functionality is enabled installing the following\nextras:\n\n*  excel: enables to compile excel workbooks to python and execute\n   using: ``excelmodel``.\n\n*  plot: enables to plot the formula ast and the excel model.\n\nto install formulas and all extras, do:\n\n.. code:: console\n\n   $ pip install formulas[all]\n\n\ndevelopment version\n===================\n\nto help with the testing and the development of *formulas*, you can\ninstall the development version:\n\n.. code:: console\n\n   $ pip install https://github.com/vinci1it2000/formulas/archive/dev.zip\n\n.. _end-quick:\n\n\nbasic examples\n**************\n\nthe following sections will show how to:\n\n*  parse a excel formulas;\n\n*  load, compile, and execute a excel workbook;\n\n*  extract a sub-model from a excel workbook;\n\n*  add a custom function.\n\n\nparsing formula\n===============\n\nan example how to parse and execute an excel formula is the following:\n\n>>> import formulas\n>>> func = formulas.parser().ast('=(1 + 1) + b3 / a2')[1].compile()\n\nto visualize formula model and get the input order you can do the\nfollowing:\n\n>>> list(func.inputs)\n['a2', 'b3']\n>>> func.plot(view=false)  # set view=true to plot in the default browser.\nsitemap([(=((1 + 1) + (b3 / a2)), sitemap())])\n\n[graph]\n\nfinally to execute the formula and plot the workflow:\n\n>>> func(1, 5)\narray(7.0, dtype=object)\n>>> func.plot(workflow=true, view=false)  # set view=true to plot in the default browser.\nsitemap([(=((1 + 1) + (b3 / a2)), sitemap())])\n\n[graph]\n\n\nexcel workbook\n==============\n\nan example how to load, calculate, and write an excel workbook is the\nfollowing:\n\n::\n\n   >>> import formulas\n   >>> fpath, dir_output = 'excel.xlsx', 'output'  \n   >>> xl_model = formulas.excelmodel().loads(fpath).finish()\n   >>> xl_model.calculate()\n   solution(...)\n   >>> xl_model.write(dirpath=dir_output)\n   {'excel.xlsx': {book: <openpyxl.workbook.workbook.workbook ...>}}\n\ntip: if you have or could have **circular references**, add\n   *circular=true* to *finish* method.\n\nto plot the dependency graph that depict relationships between excel\ncells:\n\n>>> dsp = xl_model.dsp\n>>> dsp.plot(view=false)  # set view=true to plot in the default browser.\nsitemap([(excelmodel, sitemap(...))])\n\n[graph]\n\nto overwrite the default inputs that are defined by the excel file or\nto impose some value to a specific cell:\n\n>>> xl_model.calculate(\n...     inputs={\n...         \"'[excel.xlsx]'!input_a\": 3,  # to overwrite the default value.\n...         \"'[excel.xlsx]data'!b3\": 1  # to impose a value to b3 cell.\n...     },\n...     outputs=[\n...        \"'[excel.xlsx]data'!c2\", \"'[excel.xlsx]data'!c4\"\n...     ] # to define the outputs that you want to calculate.\n... )\nsolution([(\"'[excel.xlsx]'!input_a\", <ranges>('[excel.xlsx]data'!a2)=[[3]]),\n          (\"'[excel.xlsx]data'!b3\", <ranges>('[excel.xlsx]data'!b3)=[[1]]),\n          (\"'[excel.xlsx]data'!a2\", <ranges>('[excel.xlsx]data'!a2)=[[3]]),\n          (\"'[excel.xlsx]data'!a3\", <ranges>('[excel.xlsx]data'!a3)=[[6]]),\n          (\"'[excel.xlsx]data'!d2\", <ranges>('[excel.xlsx]data'!d2)=[[1]]),\n          (\"'[excel.xlsx]'!input_b\", <ranges>('[excel.xlsx]data'!a3)=[[6]]),\n          (\"'[excel.xlsx]data'!b2\", <ranges>('[excel.xlsx]data'!b2)=[[9.0]]),\n          (\"'[excel.xlsx]data'!d3\", <ranges>('[excel.xlsx]data'!d3)=[[2.0]]),\n          (\"'[excel.xlsx]data'!c2\", <ranges>('[excel.xlsx]data'!c2)=[[10.0]]),\n          (\"'[excel.xlsx]data'!d4\", <ranges>('[excel.xlsx]data'!d4)=[[3.0]]),\n          (\"'[excel.xlsx]data'!c4\", <ranges>('[excel.xlsx]data'!c4)=[[4.0]])])\n\nto build a single function out of an excel model with fixed inputs and\noutputs, you can use the *compile* method of the *excelmodel* that\nreturns a `dispatchpipe\n<https://schedula.readthedocs.io/en/master/_build/schedula/utils/dsp/schedula.utils.dsp.dispatchpipe.html#schedula.utils.dsp.dispatchpipe>`_.\nthis is a function where the inputs and outputs are defined by the\ndata node ids (i.e., cell references).\n\n>>> func = xl_model.compile(\n...     inputs=[\n...         \"'[excel.xlsx]'!input_a\",  # first argument of the function.\n...         \"'[excel.xlsx]data'!b3\"   # second argument of the function.\n...     ], # to define function inputs.\n...     outputs=[\n...         \"'[excel.xlsx]data'!c2\", \"'[excel.xlsx]data'!c4\"\n...     ] # to define function outputs.\n... )\n>>> func\n<schedula.utils.dsp.dispatchpipe object at ...>\n>>> [v.value[0, 0] for v in func(3, 1)]  # to retrieve the data.\n[10.0, 4.0]\n>>> func.plot(view=false)  # set view=true to plot in the default browser.\nsitemap([(excelmodel, sitemap(...))])\n\n[graph]\n\nalternatively, to load a partial excel model from the output cells,\nyou can use the *from_ranges* method of the *excelmodel*:\n\n>>> xl = formulas.excelmodel().from_ranges(\n...     \"'[%s]data'!c2:d2\" % fpath,  # output range.\n...     \"'[%s]data'!b4\" % fpath,  # output cell.\n... )\n>>> dsp = xl.dsp\n>>> sorted(dsp.data_nodes)\n[\"'[excel.xlsx]'!input_a\",\n \"'[excel.xlsx]'!input_b\",\n \"'[excel.xlsx]'!input_c\",\n \"'[excel.xlsx]data'!a2\",\n \"'[excel.xlsx]data'!a3\",\n \"'[excel.xlsx]data'!a3:a4\",\n \"'[excel.xlsx]data'!a4\",\n \"'[excel.xlsx]data'!b2\",\n \"'[excel.xlsx]data'!b3\",\n \"'[excel.xlsx]data'!b4\",\n \"'[excel.xlsx]data'!c2\",\n \"'[excel.xlsx]data'!d2\"]\n\n[graph]\n\n\njson export/import\n------------------\n\nthe *excelmodel* can be exported/imported to/from a readable json\nformat. the reason of this functionality is to have format that can be\neasily maintained (e.g. using version control programs like *git*).\nfollows an example on how to export/import to/from json an\n*excelmodel*:\n\n::\n\n   >>> import json\n   >>> xl_dict = xl_model.to_dict()  # to json-able dict.\n   >>> xl_dict  # exported format. \n   {\n    \"'[excel.xlsx]data'!a1\": \"inputs\",\n    \"'[excel.xlsx]data'!b1\": \"intermediate\",\n    \"'[excel.xlsx]data'!c1\": \"outputs\",\n    \"'[excel.xlsx]data'!d1\": \"defaults\",\n    \"'[excel.xlsx]data'!a2\": 2,\n    \"'[excel.xlsx]data'!d2\": 1,\n    \"'[excel.xlsx]data'!a3\": 6,\n    \"'[excel.xlsx]data'!a4\": 5,\n    \"'[excel.xlsx]data'!b2\": \"=('[excel.xlsx]data'!a2 + '[excel.xlsx]data'!a3)\",\n    \"'[excel.xlsx]data'!c2\": \"=(('[excel.xlsx]data'!b2 / '[excel.xlsx]data'!b3) + '[excel.xlsx]data'!d2)\",\n    \"'[excel.xlsx]data'!b3\": \"=('[excel.xlsx]data'!b2 - '[excel.xlsx]data'!a3)\",\n    \"'[excel.xlsx]data'!c3\": \"=(('[excel.xlsx]data'!c2 * '[excel.xlsx]data'!a2) + '[excel.xlsx]data'!d3)\",\n    \"'[excel.xlsx]data'!d3\": \"=(1 + '[excel.xlsx]data'!d2)\",\n    \"'[excel.xlsx]data'!b4\": \"=max('[excel.xlsx]data'!a3:a4, '[excel.xlsx]data'!b2)\",\n    \"'[excel.xlsx]data'!c4\": \"=(('[excel.xlsx]data'!b3 ^ '[excel.xlsx]data'!c2) + '[excel.xlsx]data'!d4)\",\n    \"'[excel.xlsx]data'!d4\": \"=(1 + '[excel.xlsx]data'!d3)\"\n   }\n   >>> xl_json = json.dumps(xl_dict, indent=true)  # to json.\n   >>> xl_model = formulas.excelmodel().from_dict(json.loads(xl_json))  # from json.\n\n\ncustom functions\n================\n\nan example how to add a custom function to the formula parser is the\nfollowing:\n\n>>> import formulas\n>>> functions = formulas.get_functions()\n>>> functions['myfunc'] = lambda x, y: 1 + y + x\n>>> func = formulas.parser().ast('=myfunc(1, 2)')[1].compile()\n>>> func()\n4\n",
  "docs_url": null,
  "keywords": "python,utility,library,excel,formulas,processing,calculation,dependencies,resolution,scientific,engineering,dispatch,compiling",
  "license": "eupl 1.1+",
  "name": "formulas",
  "package_url": "https://pypi.org/project/formulas/",
  "project_url": "https://pypi.org/project/formulas/",
  "project_urls": {
    "Documentation": "http://formulas.readthedocs.io",
    "Donate": "https://donorbox.org/formulas",
    "Download": "https://github.com/vinci1it2000/formulas/tarball/v1.2.7",
    "Homepage": "https://github.com/vinci1it2000/formulas",
    "Issue tracker": "https://github.com/vinci1it2000/formulas/issues"
  },
  "release_url": "https://pypi.org/project/formulas/1.2.7/",
  "requires_dist": [
    "regex",
    "schedula >=1.4.1",
    "numpy >=1.15",
    "python-dateutil",
    "numpy-financial",
    "Pygments ; extra == 'all'",
    "dictdiffer ; extra == 'all'",
    "docutils ; extra == 'all'",
    "flask ; extra == 'all'",
    "graphviz ; extra == 'all'",
    "jinja2 ; extra == 'all'",
    "openpyxl ; extra == 'all'",
    "regex ; extra == 'all'",
    "Pygments ; extra == 'dev'",
    "dictdiffer ; extra == 'dev'",
    "docutils ; extra == 'dev'",
    "flask ; extra == 'dev'",
    "graphviz ; extra == 'dev'",
    "jinja2 ; extra == 'dev'",
    "openpyxl ; extra == 'dev'",
    "regex ; extra == 'dev'",
    "wheel ; extra == 'dev'",
    "sphinx >=7.2 ; extra == 'dev'",
    "gitchangelog ; extra == 'dev'",
    "mako ; extra == 'dev'",
    "sphinx-rtd-theme ; extra == 'dev'",
    "setuptools >=36.0.1 ; extra == 'dev'",
    "sphinxcontrib-restbuilder ; extra == 'dev'",
    "coveralls ; extra == 'dev'",
    "ddt ; extra == 'dev'",
    "twine ; extra == 'dev'",
    "openpyxl ; extra == 'excel'",
    "dictdiffer ; extra == 'excel'",
    "graphviz ; extra == 'plot'",
    "regex ; extra == 'plot'",
    "flask ; extra == 'plot'",
    "Pygments ; extra == 'plot'",
    "jinja2 ; extra == 'plot'",
    "docutils ; extra == 'plot'"
  ],
  "requires_python": "",
  "summary": "parse and compile excel formulas and workbooks in python code.",
  "version": "1.2.7",
  "releases": [],
  "developers": [
    "vincenzo_arcidiacono",
    "vinci1it2000@gmail.com"
  ],
  "kwds": "excelmodel xl_model xl_dict excel python",
  "license_kwds": "eupl 1.1+",
  "libtype": "pypi",
  "id": "pypi_formulas",
  "homepage": "https://github.com/vinci1it2000/formulas",
  "release_count": 29,
  "dependency_ids": [
    "pypi_coveralls",
    "pypi_ddt",
    "pypi_dictdiffer",
    "pypi_docutils",
    "pypi_flask",
    "pypi_gitchangelog",
    "pypi_graphviz",
    "pypi_jinja2",
    "pypi_mako",
    "pypi_numpy",
    "pypi_numpy_financial",
    "pypi_openpyxl",
    "pypi_pygments",
    "pypi_python_dateutil",
    "pypi_regex",
    "pypi_schedula",
    "pypi_setuptools",
    "pypi_sphinx",
    "pypi_sphinx_rtd_theme",
    "pypi_sphinxcontrib_restbuilder",
    "pypi_twine",
    "pypi_wheel"
  ]
}
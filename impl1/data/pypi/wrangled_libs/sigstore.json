{
  "classifiers": [
    "development status :: 4 - beta",
    "intended audience :: developers",
    "license :: osi approved :: apache software license",
    "programming language :: python :: 3",
    "programming language :: python :: 3 :: only",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: security",
    "topic :: security :: cryptography"
  ],
  "description": "sigstore-python\n===============\n\n<!--- @begin-badges@ --->\n![ci](https://github.com/sigstore/sigstore-python/workflows/ci/badge.svg)\n[![pypi version](https://badge.fury.io/py/sigstore.svg)](https://pypi.org/project/sigstore)\n[![openssf scorecard](https://api.securityscorecards.dev/projects/github.com/sigstore/sigstore-python/badge)](https://securityscorecards.dev/viewer/?uri=github.com/sigstore/sigstore-python)\n[![slsa](https://slsa.dev/images/gh-badge-level3.svg)](https://slsa.dev/)\n![conformance tests](https://github.com/sigstore/sigstore-python/workflows/conformance%20tests/badge.svg)\n[![documentation](https://github.com/sigstore/sigstore-python/actions/workflows/docs.yml/badge.svg)](https://sigstore.github.io/sigstore-python)\n<!--- @end-badges@ --->\n\n`sigstore` is a python tool for generating and verifying sigstore signatures.\nyou can use it to sign and verify python package distributions, or anything\nelse!\n\n## index\n\n* [features](#features)\n* [installation](#installation)\n  * [github actions](#github-actions)\n* [usage](#usage)\n  * [signing](#signing)\n  * [verifying](#verifying)\n    * [generic identities](#generic-identities)\n    * [signatures from github actions](#signatures-from-github-actions)\n* [example uses](#example-uses)\n  * [signing with ambient credentials](#signing-with-ambient-credentials)\n  * [signing with an email identity](#signing-with-an-email-identity)\n  * [signing with an explicit identity token](#signing-with-an-explicit-identity-token)\n  * [verifying against a signature and certificate](#verifying-against-a-signature-and-certificate)\n  * [verifying signatures from github actions](#verifying-signatures-from-github-actions)\n* [licensing](#licensing)\n* [community](#community)\n* [contributing](#contributing)\n* [code of conduct](#code-of-conduct)\n* [security](#security)\n* [slsa provenance](#slsa-provenance)\n\n## features\n\n* support for keyless signature generation and verification with [sigstore](https://www.sigstore.dev/)\n* support for signing with [\"ambient\" openid connect identities](https://github.com/sigstore/sigstore-python#signing-with-ambient-credentials)\n* a comprehensive [cli](https://github.com/sigstore/sigstore-python#usage) and corresponding\n  [importable python api](https://sigstore.github.io/sigstore-python)\n\n## installation\n\n`sigstore` requires python 3.8 or newer, and can be installed directly via `pip`:\n\n```console\npython -m pip install sigstore\n```\n\noptionally, to install `sigstore` and all its dependencies with [hash-checking mode](https://pip.pypa.io/en/stable/topics/secure-installs/#hash-checking-mode) enabled, run the following:\n\n```console\npython -m pip install -r https://raw.githubusercontent.com/sigstore/sigstore-python/main/install/requirements.txt\n```\n\nthis installs the requirements file located [here](https://github.com/sigstore/sigstore-python/blob/main/install/requirements.txt), which is kept up-to-date.\n\n### github actions\n\n`sigstore-python` has [an official github action](https://github.com/sigstore/gh-action-sigstore-python)!\n\nyou can install it from the\n[github marketplace](https://github.com/marketplace/actions/gh-action-sigstore-python), or\nadd it to your ci manually:\n\n```yaml\njobs:\n  sigstore-python:\n    steps:\n      - uses: sigstore/gh-action-sigstore-python@v0.2.0\n        with:\n          inputs: foo.txt\n```\n\nsee the\n[action documentation](https://github.com/sigstore/gh-action-sigstore-python/blob/main/readme.md)\nfor more details and usage examples.\n\n## usage\n\nfor python api usage, see our [documentation](https://sigstore.github.io/sigstore-python/).\n\nyou can run `sigstore` as a standalone program, or via `python -m`:\n\n```console\nsigstore --help\npython -m sigstore --help\n```\n\ntop-level:\n\n<!-- @begin-sigstore-help@ -->\n```\nusage: sigstore [-h] [-v] [-v] [--staging] [--rekor-url url]\n                [--rekor-root-pubkey file]\n                command ...\n\na tool for signing and verifying python package distributions\n\npositional arguments:\n  command               the operation to perform\n    sign                sign one or more inputs\n    verify              verify one or more inputs\n    get-identity-token  retrieve and return a sigstore-compatible openid\n                        connect token\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -v, --verbose         run with additional debug logging; supply multiple\n                        times to increase verbosity\n  -v, --version         show program's version number and exit\n\nsigstore instance options:\n  --staging             use sigstore's staging instances, instead of the\n                        default production instances (default: false)\n  --rekor-url url       the rekor instance to use (conflicts with --staging)\n                        (default: https://rekor.sigstore.dev)\n  --rekor-root-pubkey file\n                        a pem-encoded root public key for rekor itself\n                        (conflicts with --staging) (default: none)\n```\n<!-- @end-sigstore-help@ -->\n\n\n### signing\n\n<!-- @begin-sigstore-sign-help@ -->\n```\nusage: sigstore sign [-h] [-v] [--identity-token token] [--oidc-client-id id]\n                     [--oidc-client-secret secret]\n                     [--oidc-disable-ambient-providers] [--oidc-issuer url]\n                     [--oauth-force-oob] [--no-default-files]\n                     [--signature file] [--certificate file] [--bundle file]\n                     [--output-directory dir] [--overwrite] [--staging]\n                     [--rekor-url url] [--rekor-root-pubkey file]\n                     [--fulcio-url url] [--ctfe file]\n                     file [file ...]\n\npositional arguments:\n  file                  the file to sign\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -v, --verbose         run with additional debug logging; supply multiple\n                        times to increase verbosity\n\nopenid connect options:\n  --identity-token token\n                        the oidc identity token to use (default: none)\n  --oidc-client-id id   the custom openid connect client id to use during\n                        oauth2 (default: sigstore)\n  --oidc-client-secret secret\n                        the custom openid connect client secret to use during\n                        oauth2 (default: none)\n  --oidc-disable-ambient-providers\n                        disable ambient openid connect credential detection\n                        (e.g. on github actions) (default: false)\n  --oidc-issuer url     the openid connect issuer to use (conflicts with\n                        --staging) (default: https://oauth2.sigstore.dev/auth)\n  --oauth-force-oob     force an out-of-band oauth flow and do not\n                        automatically start the default web browser (default:\n                        false)\n\noutput options:\n  --no-default-files    don't emit the default output files ({input}.sigstore)\n                        (default: false)\n  --signature file, --output-signature file\n                        write a single signature to the given file; does not\n                        work with multiple input files (default: none)\n  --certificate file, --output-certificate file\n                        write a single certificate to the given file; does not\n                        work with multiple input files (default: none)\n  --bundle file         write a single sigstore bundle to the given file; does\n                        not work with multiple input files (default: none)\n  --output-directory dir\n                        write default outputs to the given directory\n                        (conflicts with --signature, --certificate, --bundle)\n                        (default: none)\n  --overwrite           overwrite preexisting signature and certificate\n                        outputs, if present (default: false)\n\nsigstore instance options:\n  --staging             use sigstore's staging instances, instead of the\n                        default production instances. this option will be\n                        deprecated in favor of the global `--staging` option\n                        in a future release. (default: false)\n  --rekor-url url       the rekor instance to use (conflicts with --staging).\n                        this option will be deprecated in favor of the global\n                        `--rekor-url` option in a future release. (default:\n                        none)\n  --rekor-root-pubkey file\n                        a pem-encoded root public key for rekor itself\n                        (conflicts with --staging). this option will be\n                        deprecated in favor of the global `--rekor-root-\n                        pubkey` option in a future release. (default: none)\n  --fulcio-url url      the fulcio instance to use (conflicts with --staging)\n                        (default: https://fulcio.sigstore.dev)\n  --ctfe file           a pem-encoded public key for the ct log (conflicts\n                        with --staging) (default: none)\n```\n<!-- @end-sigstore-sign-help@ -->\n\n### verifying\n\n#### generic identities\n\nthis is the most common verification done with `sigstore`, and therefore\nthe one you probably want: you can use it to verify that a signature was\nproduced by a particular identity (like `hamilcar@example.com`), as attested\nto by a particular oidc provider (like `https://github.com/login/oauth`).\n\n<!-- @begin-sigstore-verify-identity-help@ -->\n```\nusage: sigstore verify identity [-h] [-v] [--certificate file]\n                                [--signature file] [--bundle file]\n                                --cert-identity identity [--offline]\n                                --cert-oidc-issuer url [--staging]\n                                [--rekor-url url] [--rekor-root-pubkey file]\n                                [--certificate-chain file]\n                                file [file ...]\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -v, --verbose         run with additional debug logging; supply multiple\n                        times to increase verbosity\n\nverification inputs:\n  --certificate file, --cert file\n                        the pem-encoded certificate to verify against; not\n                        used with multiple inputs (default: none)\n  --signature file      the signature to verify against; not used with\n                        multiple inputs (default: none)\n  --bundle file         the sigstore bundle to verify with; not used with\n                        multiple inputs (default: none)\n  file                  the file to verify\n\nverification options:\n  --cert-identity identity\n                        the identity to check for in the certificate's subject\n                        alternative name (default: none)\n  --offline             perform offline verification; requires a sigstore\n                        bundle (default: false)\n  --cert-oidc-issuer url\n                        the oidc issuer url to check for in the certificate's\n                        oidc issuer extension (default: none)\n\nsigstore instance options:\n  --staging             use sigstore's staging instances, instead of the\n                        default production instances. this option will be\n                        deprecated in favor of the global `--staging` option\n                        in a future release. (default: false)\n  --rekor-url url       the rekor instance to use (conflicts with --staging).\n                        this option will be deprecated in favor of the global\n                        `--rekor-url` option in a future release. (default:\n                        none)\n  --rekor-root-pubkey file\n                        a pem-encoded root public key for rekor itself\n                        (conflicts with --staging). this option will be\n                        deprecated in favor of the global `--rekor-root-\n                        pubkey` option in a future release. (default: none)\n  --certificate-chain file\n                        path to a list of ca certificates in pem format which\n                        will be needed when building the certificate chain for\n                        the fulcio signing certificate (default: none)\n```\n<!-- @end-sigstore-verify-identity-help@ -->\n\n#### signatures from github actions\n\nif your signatures are coming from github actions (e.g., a workflow\nthat uses its [ambient credentials](#signing-with-ambient-credentials)),\nthen you can use the `sigstore verify github` subcommand to verify\nclaims more precisely than `sigstore verify identity` allows:\n\n<!-- @begin-sigstore-verify-github-help@ -->\n```\nusage: sigstore verify github [-h] [-v] [--certificate file]\n                              [--signature file] [--bundle file]\n                              --cert-identity identity [--offline]\n                              [--trigger event] [--sha sha] [--name name]\n                              [--repository repo] [--ref ref] [--staging]\n                              [--rekor-url url] [--rekor-root-pubkey file]\n                              [--certificate-chain file]\n                              file [file ...]\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -v, --verbose         run with additional debug logging; supply multiple\n                        times to increase verbosity\n\nverification inputs:\n  --certificate file, --cert file\n                        the pem-encoded certificate to verify against; not\n                        used with multiple inputs (default: none)\n  --signature file      the signature to verify against; not used with\n                        multiple inputs (default: none)\n  --bundle file         the sigstore bundle to verify with; not used with\n                        multiple inputs (default: none)\n  file                  the file to verify\n\nverification options:\n  --cert-identity identity\n                        the identity to check for in the certificate's subject\n                        alternative name (default: none)\n  --offline             perform offline verification; requires a sigstore\n                        bundle (default: false)\n  --trigger event       the github actions event name that triggered the\n                        workflow (default: none)\n  --sha sha             the `git` commit sha that the workflow run was invoked\n                        with (default: none)\n  --name name           the name of the workflow that was triggered (default:\n                        none)\n  --repository repo     the repository slug that the workflow was triggered\n                        under (default: none)\n  --ref ref             the `git` ref that the workflow was invoked with\n                        (default: none)\n\nsigstore instance options:\n  --staging             use sigstore's staging instances, instead of the\n                        default production instances. this option will be\n                        deprecated in favor of the global `--staging` option\n                        in a future release. (default: false)\n  --rekor-url url       the rekor instance to use (conflicts with --staging).\n                        this option will be deprecated in favor of the global\n                        `--rekor-url` option in a future release. (default:\n                        none)\n  --rekor-root-pubkey file\n                        a pem-encoded root public key for rekor itself\n                        (conflicts with --staging). this option will be\n                        deprecated in favor of the global `--rekor-root-\n                        pubkey` option in a future release. (default: none)\n  --certificate-chain file\n                        path to a list of ca certificates in pem format which\n                        will be needed when building the certificate chain for\n                        the fulcio signing certificate (default: none)\n```\n<!-- @end-sigstore-verify-github-help@ -->\n\n## example uses\n\n`sigstore` supports a wide variety of workflows and usages. some common ones are\nprovided below.\n\n### signing with ambient credentials\n\nfor environments that support openid connect, natively `sigstore` supports ambient credential\ndetection. this includes many popular ci platforms and cloud providers. see the full list of\nsupported environments [here](https://github.com/di/id#supported-environments).\n\nsign a single file (`foo.txt`) using an ambient openid connect credential,\nsaving the bundle to `foo.txt.sigstore`:\n\n```console\n$ python -m sigstore sign foo.txt\n```\n\n### signing with an email identity\n\n`sigstore` can use an oauth2 + openid flow to establish an email identity,\nallowing you to request signing certificates that attest to control over\nthat email.\n\nsign a single file (`foo.txt`) using the oauth2 flow, saving the\nbundle to `foo.txt.sigstore`:\n\n```console\n$ python -m sigstore sign foo.txt\n```\n\nby default, `sigstore` attempts to do\n[ambient credential detection](#signing-with-ambient-credentials), which may preempt\nthe oauth2 flow. to force the oauth2 flow, you can explicitly disable ambient detection:\n\n```console\n$ python -m sigstore sign --oidc-disable-ambient-providers foo.txt\n```\n\n### signing with an explicit identity token\n\nif you can't use an ambient credential or the oauth2 flow, you can pass a pre-created\nidentity token directly into `sigstore sign`:\n\n```console\n$ python -m sigstore sign --identity-token your-long-jwt-here foo.txt\n```\n\nnote that passing a custom identity token does not circumvent fulcio's requirements,\nnamely the fulcio's supported identity providers and the claims expected within the token.\n\n### verifying against a signature and certificate\n\nby default, `sigstore verify identity` will attempt to find a `<filename>.sigstore` in the\nsame directory as the file being verified:\n\n```console\n# looks for foo.txt.sigstore\n$ python -m sigstore verify identity foo.txt \\\n    --cert-identity 'hamilcar@example.com' \\\n    --cert-oidc-issuer 'https://github.com/login/oauth'\n```\n\nmultiple files can be verified at once:\n\n```console\n# looks for {foo,bar}.txt.sigstore\n$ python -m sigstore verify identity foo.txt bar.txt \\\n    --cert-identity 'hamilcar@example.com' \\\n    --cert-oidc-issuer 'https://github.com/login/oauth'\n```\n\n### verifying signatures from github actions\n\n`sigstore verify github` can be used to verify claims specific to signatures coming from github\nactions. `sigstore-python` signs releases via github actions, so the examples below are working\nexamples of how you can verify a given `sigstore-python` release.\n\nas with `sigstore verify identity`, the `--cert-identity` flag is required. however, since we know\nthat the signature was generated with an github actions ambient credential, the oidc issuer is\ninferred.\n\n```console\n$ python -m sigstore verify github sigstore-0.10.0-py3-none-any.whl \\\n    --bundle sigstore-0.10.0-py3-none-any.whl.bundle \\\n    --cert-identity https://github.com/sigstore/sigstore-python/.github/workflows/release.yml@refs/tags/v0.10.0\n```\n\nadditionally, github actions specific claims can be verified like so:\n\n```console\n$ python -m sigstore verify github sigstore-0.10.0-py3-none-any.whl \\\n    --bundle sigstore-0.10.0-py3-none-any.whl.bundle \\\n    --cert-identity https://github.com/sigstore/sigstore-python/.github/workflows/release.yml@refs/tags/v0.10.0 \\\n    --trigger release \\\n    --sha 66581529803929c3ccc45334632ccd90f06e0de4 \\\n    --name release \\\n    --repository sigstore/sigstore-python \\\n    --ref refs/tags/v0.10.0\n```\n\n## licensing\n\n`sigstore` is licensed under the apache 2.0 license.\n\n## community\n\n`sigstore-python` is developed as part of the [sigstore](https://sigstore.dev) project.\n\nwe also use a [slack channel](https://sigstore.slack.com)!\nclick [here](https://join.slack.com/t/sigstore/shared_invite/zt-mhs55zh0-xmy3bcfwn4xeymquuutbuq) for the invite link.\n\n## contributing\n\nsee [the contributing docs](https://github.com/sigstore/.github/blob/main/contributing.md) for details.\n\n## code of conduct\n\neveryone interacting with this project is expected to follow the\n[sigstore code of conduct](https://github.com/sigstore/.github/blob/main/code_of_conduct.md).\n\n## security\n\nshould you discover any security issues, please refer to sigstore's [security\nprocess](https://github.com/sigstore/.github/blob/main/security.md).\n\n### slsa provenance\nthis project emits a slsa provenance on its release! this enables you to verify the integrity\nof the downloaded artifacts and ensured that the binary's code really comes from this source code.\n\nto do so, please follow the instructions [here](https://github.com/slsa-framework/slsa-github-generator#verification-of-provenance).\n\n",
  "docs_url": null,
  "keywords": "",
  "license": "",
  "name": "sigstore",
  "package_url": "https://pypi.org/project/sigstore/",
  "project_url": "https://pypi.org/project/sigstore/",
  "project_urls": {
    "Documentation": "https://sigstore.github.io/sigstore-python/",
    "Homepage": "https://pypi.org/project/sigstore/",
    "Issues": "https://github.com/sigstore/sigstore-python/issues",
    "Source": "https://github.com/sigstore/sigstore-python"
  },
  "release_url": "https://pypi.org/project/sigstore/2.1.0/",
  "requires_dist": [
    "appdirs ~= 1.4",
    "cryptography >= 39",
    "id >= 1.1.0",
    "importlib_resources ~= 5.7; python_version < '3.11'",
    "pydantic >= 2,< 3",
    "pyjwt >= 2.1",
    "pyOpenSSL >= 23.0.0",
    "requests",
    "rich ~= 13.0",
    "securesystemslib",
    "sigstore-protobuf-specs ~= 0.2.2",
    "sigstore-rekor-types == 0.0.11",
    "tuf >= 2.1,< 4.0",
    "build ; extra == \"dev\"",
    "bump >= 1.3.2 ; extra == \"dev\"",
    "sigstore[doc,test,lint] ; extra == \"dev\"",
    "pdoc ; extra == \"doc\"",
    "bandit ; extra == \"lint\"",
    "interrogate ; extra == \"lint\"",
    "mypy ~= 1.1 ; extra == \"lint\"",
    "ruff < 0.1.8 ; extra == \"lint\"",
    "types-requests ; extra == \"lint\"",
    "pytest ; extra == \"test\"",
    "pytest-cov ; extra == \"test\"",
    "pretend ; extra == \"test\"",
    "coverage[toml] ; extra == \"test\""
  ],
  "requires_python": ">=3.8",
  "summary": "a tool for signing python package distributions",
  "version": "2.1.0",
  "releases": [],
  "developers": [
    "sigstore-dev@googlegroups.com"
  ],
  "kwds": "sigstore badges scorecard badge securityscorecards",
  "license_kwds": "",
  "libtype": "pypi",
  "id": "pypi_sigstore",
  "homepage": "",
  "release_count": 38,
  "dependency_ids": [
    "pypi_appdirs",
    "pypi_bandit",
    "pypi_build",
    "pypi_bump",
    "pypi_coverage",
    "pypi_cryptography",
    "pypi_id",
    "pypi_importlib_resources",
    "pypi_interrogate",
    "pypi_mypy",
    "pypi_pdoc",
    "pypi_pretend",
    "pypi_pydantic",
    "pypi_pyjwt",
    "pypi_pyopenssl",
    "pypi_pytest",
    "pypi_pytest_cov",
    "pypi_requests",
    "pypi_rich",
    "pypi_ruff",
    "pypi_securesystemslib",
    "pypi_sigstore",
    "pypi_sigstore_protobuf_specs",
    "pypi_sigstore_rekor_types",
    "pypi_tuf",
    "pypi_types_requests"
  ]
}
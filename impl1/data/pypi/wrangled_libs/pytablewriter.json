{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: developers",
    "intended audience :: information technology",
    "license :: osi approved :: mit license",
    "operating system :: os independent",
    "programming language :: python :: 3",
    "programming language :: python :: 3 :: only",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.12",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "programming language :: python :: implementation :: cpython",
    "programming language :: python :: implementation :: pypy",
    "topic :: software development :: code generators",
    "topic :: software development :: libraries",
    "topic :: software development :: libraries :: python modules",
    "topic :: text processing",
    "topic :: text processing :: markup :: html",
    "topic :: text processing :: markup :: latex",
    "topic :: text processing :: markup :: markdown",
    "topic :: text processing :: markup :: restructuredtext",
    "typing :: typed"
  ],
  "description": ".. contents:: **pytablewriter**\n   :backlinks: top\n   :depth: 2\n\nsummary\n=========\n`pytablewriter <https://github.com/thombashi/pytablewriter>`__ is a python library to write a table in various formats: asciidoc / csv / elasticsearch / html / javascript / json / latex / ldjson / ltsv / markdown / mediawiki / numpy / excel / pandas / python / restructuredtext / sqlite / toml / tsv / yaml.\n\n.. image:: https://badge.fury.io/py/pytablewriter.svg\n    :target: https://badge.fury.io/py/pytablewriter\n    :alt: pypi package version\n\n.. image:: https://anaconda.org/conda-forge/pytablewriter/badges/version.svg\n    :target: https://anaconda.org/conda-forge/pytablewriter\n    :alt: conda-forge package version\n\n.. image:: https://img.shields.io/pypi/pyversions/pytablewriter.svg\n    :target: https://pypi.org/project/pytablewriter/\n    :alt: supported python versions\n\n.. image:: https://img.shields.io/pypi/implementation/pytablewriter.svg\n    :target: https://pypi.org/project/pytablewriter\n    :alt: supported python implementations\n\n.. image:: https://github.com/thombashi/pytablewriter/actions/workflows/ci.yml/badge.svg\n    :target: https://github.com/thombashi/pytablewriter/actions/workflows/ci.yml\n    :alt: ci status of linux/macos/windows\n\n.. image:: https://coveralls.io/repos/github/thombashi/pytablewriter/badge.svg?branch=master\n    :target: https://coveralls.io/github/thombashi/pytablewriter?branch=master\n    :alt: test coverage\n\n.. image:: https://github.com/thombashi/pytablewriter/actions/workflows/github-code-scanning/codeql/badge.svg\n    :target: https://github.com/thombashi/pytablewriter/actions/workflows/github-code-scanning/codeql\n    :alt: codeql\n\nfeatures\n--------\n- write a table in various formats:\n    - text formats:\n        - `asciidoc <https://asciidoc.org/>`__\n        - csv / tab-separated values (tsv) / space-separated values (ssv)\n        - html / css\n        - json / `line-delimited json(ldjson) <https://en.wikipedia.org/wiki/json_streaming#line-delimited_json>`__\n        - `labeled tab-separated values (ltsv) <http://ltsv.org/>`__\n        - latex: ``tabular``/``array`` environment\n        - markdown: commonmark / `github flavored markdown (gfm) <https://github.github.com/gfm/>`__ / `kramdown <https://kramdown.gettalong.org/>`__\n        - `mediawiki <https://www.mediawiki.org/wiki/mediawiki>`__\n        - restructuredtext: `grid tables <http://docutils.sourceforge.net/docs/ref/rst/restructuredtext.html#grid-tables>`__/`simple tables <http://docutils.sourceforge.net/docs/ref/rst/restructuredtext.html#simple-tables>`__/`csv table <http://docutils.sourceforge.net/docs/ref/rst/directives.html#id4>`__\n        - source code (definition of a variable that represents tabular data)\n            - javascript / `numpy <https://www.numpy.org/>`__ (`numpy.array <https://docs.scipy.org/doc/numpy/reference/generated/numpy.array.html>`__) / `pandas <https://pandas.pydata.org/>`__ (`pandas.dataframe <https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.dataframe.html>`__) / python\n        - `toml <https://github.com/toml-lang/toml>`__\n        - `yaml <https://yaml.org/>`__\n        - unicode\n    - binary file formats:\n        - microsoft excel :superscript:`tm` (``.xlsx``/``.xls`` file format)\n        - `pandas.dataframe <https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.dataframe.html>`__ pickle file\n        - `sqlite <https://www.sqlite.org/index.html>`__ database\n    - application-specific formats:\n        - `elasticsearch <https://www.elastic.co/products/elasticsearch>`__\n- automatic table cell formatting:\n    - alignment\n    - padding\n    - decimal places of numbers\n- customize table cell styles:\n    - text/background color\n    - text alignment\n    - font size/weight\n    - thousand separator for numbers: e.g. ``1,000``/``1 000``\n- configure output:\n    - write a table to a stream such as a file/standard-output/string-buffer/jupyter-notebook\n    - get rendered tabular text\n- data sources:\n    - nested list\n    - csv\n    - `pandas.dataframe <https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.dataframe.html>`__ / `pandas.series <https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.series.html>`__\n    - etc.\n- multibyte character support\n- ansi color support\n\ninstallation\n============\n\ninstallation: pip\n------------------------------\n::\n\n    pip install pytablewriter\n\nsome of the formats require additional dependency packages, you can install these packages as follows:\n\n.. csv-table:: installation of optional dependencies\n    :header: installation example, remark\n\n    ``pip install pytablewriter[es]``, elasticsearch\n    ``pip install pytablewriter[excel]``, excel\n    ``pip install pytablewriter[html]``, html\n    ``pip install pytablewriter[sqlite]``, sqlite database\n    ``pip install pytablewriter[toml]``, toml\n    ``pip install pytablewriter[theme]``, pytablewriter theme plugins\n    ``pip install pytablewriter[all]``, install all of the optional dependencies\n\ninstallation: conda\n------------------------------\n::\n\n    conda install -c conda-forge pytablewriter\n\ninstallation: apt\n------------------------------\n::\n\n    sudo add-apt-repository ppa:thombashi/ppa\n    sudo apt update\n    sudo apt install python3-pytablewriter\n\nexamples\n==========\nwrite tables\n--------------\nwrite a markdown table\n~~~~~~~~~~~~~~~~~~~~~~~~\n:sample code:\n    .. code-block:: python\n\n        from pytablewriter import markdowntablewriter\n\n        def main():\n            writer = markdowntablewriter(\n                table_name=\"example_table\",\n                headers=[\"int\", \"float\", \"str\", \"bool\", \"mix\", \"time\"],\n                value_matrix=[\n                    [0,   0.1,      \"hoge\", true,   0,      \"2017-01-01 03:04:05+0900\"],\n                    [2,   \"-2.23\",  \"foo\",  false,  none,   \"2017-12-23 45:01:23+0900\"],\n                    [3,   0,        \"bar\",  \"true\",  \"inf\", \"2017-03-03 33:44:55+0900\"],\n                    [-10, -9.9,     \"\",     \"false\", \"nan\", \"2017-01-01 00:00:00+0900\"],\n                ],\n            )\n            writer.write_table()\n\n        if __name__ == \"__main__\":\n            main()\n\n:output:\n    .. code-block::\n\n        # example_table\n        |int|float|str |bool |  mix   |          time          |\n        |--:|----:|----|-----|-------:|------------------------|\n        |  0| 0.10|hoge|true |       0|2017-01-01 03:04:05+0900|\n        |  2|-2.23|foo |false|        |2017-12-23 12:34:51+0900|\n        |  3| 0.00|bar |true |infinity|2017-03-03 22:44:55+0900|\n        |-10|-9.90|    |false|     nan|2017-01-01 00:00:00+0900|\n\n:rendering result:\n    .. figure:: https://cdn.jsdelivr.net/gh/thombashi/pytablewriter@master/docs/pages/examples/table_format/text/ss/markdown.png\n       :scale: 80%\n       :alt: https://github.com/thombashi/pytablewriter/blob/master/docs/pages/examples/table_format/text/ss/markdown.png\n\n       rendered markdown at github\n\nwrite a markdown table with margins\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n:sample code:\n    .. code-block:: python\n\n        from pytablewriter import markdowntablewriter\n\n        def main():\n            writer = markdowntablewriter(\n                table_name=\"write a table with margins\",\n                headers=[\"int\", \"float\", \"str\", \"bool\", \"mix\", \"time\"],\n                value_matrix=[\n                    [0,   0.1,      \"hoge\", true,   0,      \"2017-01-01 03:04:05+0900\"],\n                    [2,   \"-2.23\",  \"foo\",  false,  none,   \"2017-12-23 45:01:23+0900\"],\n                    [3,   0,        \"bar\",  \"true\",  \"inf\", \"2017-03-03 33:44:55+0900\"],\n                    [-10, -9.9,     \"\",     \"false\", \"nan\", \"2017-01-01 00:00:00+0900\"],\n                ],\n                margin=1  # add a whitespace for both sides of each cell\n            )\n            writer.write_table()\n\n        if __name__ == \"__main__\":\n            main()\n\n:output:\n    .. code-block::\n\n        # write a table with margins\n        | int | float | str  | bool  |   mix    |           time           |\n        | --: | ----: | ---- | ----- | -------: | ------------------------ |\n        |   0 |  0.10 | hoge | true  |        0 | 2017-01-01 03:04:05+0900 |\n        |   2 | -2.23 | foo  | false |          | 2017-12-23 12:34:51+0900 |\n        |   3 |  0.00 | bar  | true  | infinity | 2017-03-03 22:44:55+0900 |\n        | -10 | -9.90 |      | false |      nan | 2017-01-01 00:00:00+0900 |\n\n``margin`` attribute can be available for all of the text format writer classes.\n\nwrite a github flavored markdown (gfm) table\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nif you set ``flavor`` keyword argument of ``markdowntablewriter`` class to ``\"github\"`` or ``\"gfm\"``, the writer will output markdown tables with github flavor.\ngfm can apply some additional styles to tables such as ``fg_color`` (text color).\n\n:sample code:\n    .. code-block:: python\n\n            from pytablewriter import markdowntablewriter\n            from pytablewriter.style import style\n\n            writer = markdowntablewriter(\n                column_styles=[\n                    style(fg_color=\"red\"),\n                    style(fg_color=\"green\", decoration_line=\"underline\"),\n                ],\n                headers=[\"a\", \"b\"],\n                value_matrix=[\n                    [\"abc\", 1],\n                    [\"efg\", 2],\n                ],\n                margin=1,\n                flavor=\"github\",\n                enable_ansi_escape=false,\n            )\n            writer.write_table()\n\nrendered results can be found at `here <https://github.com/thombashi/pytablewriter/blob/master/docs/pages/examples/output/markdown/gfm.md>`__\n\napply styles to gfm table with programmatically\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\napplying style filters to gfm allows for more flexible style settings for cells.\nsee also the `example <#style-filter>`_\n\nwrite a markdown table to a stream or a file\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n`refer an example <https://github.com/thombashi/pytablewriter/blob/master/examples/py/stream/configure_stream.py>`__\n\nwrite a table to an excel sheet\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n:sample code:\n    .. code-block:: python\n\n        from pytablewriter import excelxlsxtablewriter\n\n        def main():\n            writer = excelxlsxtablewriter()\n            writer.table_name = \"example\"\n            writer.headers = [\"int\", \"float\", \"str\", \"bool\", \"mix\", \"time\"]\n            writer.value_matrix = [\n                [0,   0.1,      \"hoge\", true,   0,      \"2017-01-01 03:04:05+0900\"],\n                [2,   \"-2.23\",  \"foo\",  false,  none,   \"2017-12-23 12:34:51+0900\"],\n                [3,   0,        \"bar\",  \"true\",  \"inf\", \"2017-03-03 22:44:55+0900\"],\n                [-10, -9.9,     \"\",     \"false\", \"nan\", \"2017-01-01 00:00:00+0900\"],\n            ]\n            writer.dump(\"sample.xlsx\")\n\n        if __name__ == \"__main__\":\n            main()\n\n:output:\n    .. figure:: https://cdn.jsdelivr.net/gh/thombashi/pytablewriter@master/docs/pages/examples/table_format/binary/spreadsheet/ss/excel_single.png\n       :scale: 100%\n       :alt: https://github.com/thombashi/pytablewriter/blob/master/docs/pages/examples/table_format/binary/spreadsheet/ss/excel_single.png\n\n       output excel file (``sample_single.xlsx``)\n\nwrite a unicode table\n~~~~~~~~~~~~~~~~~~~~~~~\n:sample code:\n    .. code-block:: python\n\n        from pytablewriter import unicodetablewriter\n\n        def main():\n            writer = unicodetablewriter(\n                table_name=\"example_table\",\n                headers=[\"int\", \"float\", \"str\", \"bool\", \"mix\", \"time\"],\n                value_matrix=[\n                    [0,   0.1,      \"hoge\", true,   0,      \"2017-01-01 03:04:05+0900\"],\n                    [2,   \"-2.23\",  \"foo\",  false,  none,   \"2017-12-23 45:01:23+0900\"],\n                    [3,   0,        \"bar\",  \"true\",  \"inf\", \"2017-03-03 33:44:55+0900\"],\n                    [-10, -9.9,     \"\",     \"false\", \"nan\", \"2017-01-01 00:00:00+0900\"],\n                ]\n            )\n            writer.write_table()\n\n        if __name__ == \"__main__\":\n            main()\n\n:output:\n    .. code-block::\n\n        \u250c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n        \u2502int\u2502float\u2502str \u2502bool \u2502  mix   \u2502          time          \u2502\n        \u251c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n        \u2502  0\u2502 0.10\u2502hoge\u2502true \u2502       0\u25022017-01-01 03:04:05+0900\u2502\n        \u251c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n        \u2502  2\u2502-2.23\u2502foo \u2502false\u2502        \u25022017-12-23 12:34:51+0900\u2502\n        \u251c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n        \u2502  3\u2502 0.00\u2502bar \u2502true \u2502infinity\u25022017-03-03 22:44:55+0900\u2502\n        \u251c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n        \u2502-10\u2502-9.90\u2502    \u2502false\u2502     nan\u25022017-01-01 00:00:00+0900\u2502\n        \u2514\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\nwrite a table with javascript format (as a nested list variable definition)\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n:sample code:\n    .. code-block:: python\n\n        import pytablewriter as ptw\n\n\n        def main():\n            writer = ptw.javascripttablewriter(\n                table_name=\"js_variable\",\n                headers=[\"int\", \"float\", \"str\", \"bool\", \"mix\", \"time\"],\n                value_matrix=[\n                    [0, 0.1, \"hoge\", true, 0, \"2017-01-01 03:04:05+0900\"],\n                    [2, \"-2.23\", \"foo\", false, none, \"2017-12-23 45:01:23+0900\"],\n                    [3, 0, \"bar\", \"true\", \"inf\", \"2017-03-03 33:44:55+0900\"],\n                    [-10, -9.9, \"\", \"false\", \"nan\", \"2017-01-01 00:00:00+0900\"],\n                ],\n            )\n\n            writer.write_table()\n\n\n        if __name__ == \"__main__\":\n            main()\n\n:output:\n    .. code-block:: js\n\n        const js_variable = [\n            [\"int\", \"float\", \"str\", \"bool\", \"mix\", \"time\"],\n            [0, 0.1, \"hoge\", true, 0, \"2017-01-01 03:04:05+0900\"],\n            [2, -2.23, \"foo\", false, null, \"2017-12-23 45:01:23+0900\"],\n            [3, 0, \"bar\", true, infinity, \"2017-03-03 33:44:55+0900\"],\n            [-10, -9.9, \"\", \"false\", nan, \"2017-01-01 00:00:00+0900\"]\n        ];\n\nwrite a markdown table from ``pandas.dataframe`` instance\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n``from_dataframe`` method of writer classes will set up tabular data from ``pandas.dataframe``:\n\n:sample code:\n    .. code-block:: python\n\n        from textwrap import dedent\n        import pandas as pd\n        import io\n        from pytablewriter import markdowntablewriter\n\n        def main():\n            csv_data = io.stringio(dedent(\"\"\"\\\n                \"i\",\"f\",\"c\",\"if\",\"ifc\",\"bool\",\"inf\",\"nan\",\"mix_num\",\"time\"\n                1,1.10,\"aa\",1.0,\"1\",true,infinity,nan,1,\"2017-01-01 00:00:00+09:00\"\n                2,2.20,\"bbb\",2.2,\"2.2\",false,infinity,nan,infinity,\"2017-01-02 03:04:05+09:00\"\n                3,3.33,\"cccc\",-3.0,\"ccc\",true,infinity,nan,nan,\"2017-01-01 00:00:00+09:00\"\n                \"\"\"))\n            df = pd.read_csv(csv_data, sep=',')\n\n            writer = markdowntablewriter(dataframe=df)\n            writer.write_table()\n\n        if __name__ == \"__main__\":\n            main()\n\n:output:\n    .. code-block::\n\n        | i | f  | c  | if |ifc|bool |  inf   |nan|mix_num |          time           |\n        |--:|---:|----|---:|---|-----|--------|---|-------:|-------------------------|\n        |  1|1.10|aa  | 1.0|  1|true |infinity|nan|       1|2017-01-01 00:00:00+09:00|\n        |  2|2.20|bbb | 2.2|2.2|false|infinity|nan|infinity|2017-01-02 03:04:05+09:00|\n        |  3|3.33|cccc|-3.0|ccc|true |infinity|nan|     nan|2017-01-01 00:00:00+09:00|\n\n\nadding a column of the dataframe index if you specify ``add_index_column=true``:\n\n:sample code:\n    .. code-block:: python\n\n        import pandas as pd\n        import pytablewriter as ptw\n\n        def main():\n            writer = ptw.markdowntablewriter(table_name=\"add_index_column\")\n            writer.from_dataframe(\n                pd.dataframe({\"a\": [1, 2], \"b\": [10, 11]}, index=[\"a\", \"b\"]),\n                add_index_column=true,\n            )\n            writer.write_table()\n\n        if __name__ == \"__main__\":\n            main()\n\n:output:\n    .. code-block::\n\n        # add_index_column\n        |   | a | b |\n        |---|--:|--:|\n        |a  |  1| 10|\n        |b  |  2| 11|\n\nwrite a markdown table from space-separated values\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n:sample code:\n    .. code-block:: python\n\n        import pytablewriter as ptw\n\n\n        def main():\n            writer = ptw.markdowntablewriter(table_name=\"ps\")\n            writer.from_csv(\n                \"\"\"\n                user       pid %cpu %mem    vsz   rss tty      stat start   time command\n                root         1  0.0  0.4  77664  8784 ?        ss   may11   0:02 /sbin/init\n                root         2  0.0  0.0      0     0 ?        s    may11   0:00 [kthreadd]\n                root         4  0.0  0.0      0     0 ?        i<   may11   0:00 [kworker/0:0h]\n                root         6  0.0  0.0      0     0 ?        i<   may11   0:00 [mm_percpu_wq]\n                root         7  0.0  0.0      0     0 ?        s    may11   0:01 [ksoftirqd/0]\n                \"\"\",\n                delimiter=\" \",\n            )\n            writer.write_table()\n\n\n        if __name__ == \"__main__\":\n            main()\n\n:output:\n    .. code-block::\n\n        # ps\n        |user|pid|%cpu|%mem| vsz |rss |tty|stat|start|time|   command    |\n        |----|--:|---:|---:|----:|---:|---|----|-----|----|--------------|\n        |root|  1|   0| 0.4|77664|8784|?  |ss  |may11|0:02|/sbin/init    |\n        |root|  2|   0| 0.0|    0|   0|?  |s   |may11|0:00|[kthreadd]    |\n        |root|  4|   0| 0.0|    0|   0|?  |i<  |may11|0:00|[kworker/0:0h]|\n        |root|  6|   0| 0.0|    0|   0|?  |i<  |may11|0:00|[mm_percpu_wq]|\n        |root|  7|   0| 0.0|    0|   0|?  |s   |may11|0:01|[ksoftirqd/0] |\n\nget rendered tabular text as str\n----------------------------------\n``dumps`` method returns rendered tabular text.\n``dumps`` only available for text format writers.\n\n:sample code:\n    .. code-block:: python\n\n        import pytablewriter as ptw\n\n\n        def main():\n            writer = ptw.markdowntablewriter(\n                headers=[\"int\", \"float\", \"str\", \"bool\", \"mix\", \"time\"],\n                value_matrix=[\n                    [0, 0.1, \"hoge\", true, 0, \"2017-01-01 03:04:05+0900\"],\n                    [2, \"-2.23\", \"foo\", false, none, \"2017-12-23 45:01:23+0900\"],\n                    [3, 0, \"bar\", \"true\", \"inf\", \"2017-03-03 33:44:55+0900\"],\n                    [-10, -9.9, \"\", \"false\", \"nan\", \"2017-01-01 00:00:00+0900\"],\n                ],\n            )\n\n            print(writer.dumps())\n\n\n        if __name__ == \"__main__\":\n            main()\n\n:output:\n    .. code-block::\n\n        |int|float|str |bool |  mix   |          time          |\n        |--:|----:|----|-----|-------:|------------------------|\n        |  0| 0.10|hoge|true |       0|2017-01-01 03:04:05+0900|\n        |  2|-2.23|foo |false|        |2017-12-23 45:01:23+0900|\n        |  3| 0.00|bar |true |infinity|2017-03-03 33:44:55+0900|\n        |-10|-9.90|    |false|     nan|2017-01-01 00:00:00+0900|\n\nconfigure table styles\n------------------------\ncolumn styles\n~~~~~~~~~~~~~~~\nwriters can specify\n`style <https://pytablewriter.rtfd.io/en/latest/pages/reference/style.html>`__\nfor each column by ``column_styles`` attribute of writer classes.\n\n:sample code:\n    .. code-block:: python\n\n        import pytablewriter as ptw\n        from pytablewriter.style import style\n\n\n        def main():\n            writer = ptw.markdowntablewriter(\n                table_name=\"set style by column_styles\",\n                headers=[\n                    \"auto align\",\n                    \"left align\",\n                    \"center align\",\n                    \"bold\",\n                    \"italic\",\n                    \"bold italic ts\",\n                ],\n                value_matrix=[\n                    [11, 11, 11, 11, 11, 11],\n                    [1234, 1234, 1234, 1234, 1234, 1234],\n                ],\n                column_styles=[\n                    style(),\n                    style(align=\"left\"),\n                    style(align=\"center\"),\n                    style(font_weight=\"bold\"),\n                    style(font_style=\"italic\"),\n                    style(font_weight=\"bold\", font_style=\"italic\", thousand_separator=\",\"),\n                ],  # specify styles for each column\n            )\n            writer.write_table()\n\n\n        if __name__ == \"__main__\":\n            main()\n\n:output:\n    .. code-block::\n\n        # set style by styles\n        |auto align|left align|center align|  bold  |italic|bold italic ts|\n        |---------:|----------|:----------:|-------:|-----:|-------------:|\n        |        11|11        |     11     |  **11**|  _11_|      _**11**_|\n        |      1234|1234      |    1234    |**1234**|_1234_|   _**1,234**_|\n\n    `rendering result <https://github.com/thombashi/pytablewriter/tree/master/docs/pages/examples/style/output.md>`__\n\n\nyou can also set ``style`` to a specific column with an index or header by using ``set_style`` method:\n\n:sample code:\n    .. code-block:: python\n\n        from pytablewriter import markdowntablewriter\n        from pytablewriter.style import style\n\n        def main():\n            writer = markdowntablewriter()\n            writer.headers = [\"a\", \"b\", \"c\",]\n            writer.value_matrix = [[11, 11, 11], [1234, 1234, 1234]]\n\n            writer.table_name = \"set style by column index\"\n            writer.set_style(1, style(align=\"center\", font_weight=\"bold\"))\n            writer.set_style(2, style(thousand_separator=\" \"))\n            writer.write_table()\n            writer.write_null_line()\n\n            writer.table_name = \"set style by header\"\n            writer.set_style(\"b\", style(font_style=\"italic\"))\n            writer.write_table()\n\n        if __name__ == \"__main__\":\n            main()\n\n:output:\n    .. code-block::\n\n        # set style by column index\n        | a  |   b    |  c  |\n        |---:|:------:|----:|\n        |  11| **11** |   11|\n        |1234|**1234**|1 234|\n\n        # set style by header\n        | a  |  b   |  c  |\n        |---:|-----:|----:|\n        |  11|  _11_|   11|\n        |1234|_1234_|1 234|\n\nstyle filter\n~~~~~~~~~~~~~~\nyou can apply styles to specific cells by using style filters.\nstyle filters will be written as python functions.\nexamples of a style filter function and how you apply it are as follows:\n\n:sample code:\n    .. code-block:: python\n\n            from typing import any, optional\n\n            from pytablewriter import markdowntablewriter\n            from pytablewriter.style import cell, style\n\n\n            def style_filter(cell: cell, **kwargs: any) -> optional[style]:\n                if cell.is_header_row():\n                    return none\n\n                if cell.col == 0:\n                    return style(font_weight=\"bold\")\n\n                value = int(cell.value)\n\n                if value > 80:\n                    return style(fg_color=\"red\", font_weight=\"bold\", decoration_line=\"underline\")\n                elif value > 50:\n                    return style(fg_color=\"yellow\", font_weight=\"bold\")\n                elif value > 20:\n                    return style(fg_color=\"green\")\n\n                return style(fg_color=\"lightblue\")\n\n\n            writer = markdowntablewriter(\n                table_name=\"style filter example\",\n                headers=[\"key\", \"value 1\", \"value 2\"],\n                value_matrix=[\n                    [\"a\", 95, 40],\n                    [\"b\", 55, 5],\n                    [\"c\", 30, 85],\n                    [\"d\", 0, 69],\n                ],\n                flavor=\"github\",\n                enable_ansi_escape=false,\n            )\n            writer.add_style_filter(style_filter)\n            writer.write_table()\n\nrendered results can be found at `here <https://github.com/thombashi/pytablewriter/blob/master/docs/pages/examples/output/markdown/style_filter.md>`__\n\ntheme\n~~~~~~~\nthemes consists of a set of style filters.\nthe following command will install external predefined themes:\n\n::\n\n    pip install pytablewriter[theme]\n\nthemes can be set via the constructor of the writer classes or the ``set_theme`` method.\nthe following is an example of setting the ``altrow`` theme via the constructor.\n``altrow`` theme will be colored rows alternatively:\n\n:sample code:\n    .. code-block:: python\n\n        import pytablewriter as ptw\n\n        writer = ptw.tablewriterfactory.create_from_format_name(\n            \"markdown\",\n            headers=[\"int\", \"str\"],\n            value_matrix=[[1, \"hoge\"], [2, \"foo\"], [3, \"bar\"]],\n            margin=1,\n            theme=\"altrow\",\n        )\n        writer.write_table()\n\n:output:\n    .. figure:: https://cdn.jsdelivr.net/gh/thombashi/pytablewriter-altrow-theme@master/ss/ptw-altrow-theme_example_default.png\n       :scale: 100%\n       :alt: https://github.com/thombashi/pytablewriter-altrow-theme/blob/master/ss/ptw-altrow-theme_example_default.png\n\n`[theme]` extras includes the following themes:\n\n- `pytablewriter-altrow-theme <https://github.com/thombashi/pytablewriter-altrow-theme>`__\n    - `generated html table example <https://thombashi.github.io/pytablewriter-altrow-theme/example.html>`__\n- `pytablewriter-altcol-theme <https://github.com/thombashi/pytablewriter-altcol-theme>`__\n    - `generated html table example <https://thombashi.github.io/pytablewriter-altcol-theme/example.html>`__\n\nmake tables for specific applications\n---------------------------------------\nrender a table on jupyter notebook\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nall table writer class instances in ``pytablewriter`` can render in jupyter notebook.\nto render writers at notebook cells, you will require the dependency packages to be installed either by:\n\n- ``pip install pytablewriter[html]`` or\n- ``pip install pytablewriter[all]``\n\njupyter notebook code examples can be found `here <https://nbviewer.jupyter.org/github/thombashi/pytablewriter/blob/master/examples/ipynb/jupyter_notebook_example.ipynb>`__:\n\n.. figure:: https://cdn.jsdelivr.net/gh/thombashi/pytablewriter@master/ss/jupyter_notebook.png\n   :scale: 100%\n   :alt: https://github.com/thombashi/pytablewriter/blob/master/ss/jupyter_notebook.png\n\n   table rendering results of jupyter notebook\n\nmultibyte character support\n-----------------------------\nwrite a table using multibyte character\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nyou can use multibyte characters as table data.\nmultibyte characters are also properly padded and aligned.\n\n:sample code:\n    .. code-block:: python\n\n        import pytablewriter as ptw\n\n\n        def main():\n            writer = ptw.rstsimpletablewriter(\n                table_name=\"\u751f\u6210\u306b\u95a2\u3059\u308b\u30d1\u30bf\u30fc\u30f3\",\n                headers=[\"\u30d1\u30bf\u30fc\u30f3\u540d\", \"\u6982\u8981\", \"gof\", \"code complete[1]\"],\n                value_matrix=[\n                    [\"abstract factory\", \"\u95a2\u9023\u3059\u308b\u4e00\u9023\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u72b6\u6cc1\u306b\u5fdc\u3058\u3066\u3001\u9069\u5207\u306b\u751f\u6210\u3059\u308b\u65b9\u6cd5\u3092\u63d0\u4f9b\u3059\u308b\u3002\", \"yes\", \"yes\"],\n                    [\"builder\", \"\u8907\u5408\u5316\u3055\u308c\u305f\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306e\u751f\u6210\u904e\u7a0b\u3092\u96a0\u853d\u3059\u308b\u3002\", \"yes\", \"no\"],\n                    [\"factory method\", \"\u5b9f\u969b\u306b\u751f\u6210\u3055\u308c\u308b\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306b\u4f9d\u5b58\u3057\u306a\u3044\u3001\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306e\u751f\u6210\u65b9\u6cd5\u3092\u63d0\u4f9b\u3059\u308b\u3002\", \"yes\", \"yes\"],\n                    [\"prototype\", \"\u540c\u69d8\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u751f\u6210\u3059\u308b\u305f\u3081\u306b\u3001\u539f\u578b\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u8907\u88fd\u3059\u308b\u3002\", \"yes\", \"no\"],\n                    [\"singleton\", \"\u3042\u308b\u30af\u30e9\u30b9\u306b\u3064\u3044\u3066\u3001\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u304c\u5358\u4e00\u3067\u3042\u308b\u3053\u3068\u3092\u4fdd\u8a3c\u3059\u308b\u3002\", \"yes\", \"yes\"],\n                ],\n            )\n            writer.write_table()\n\n\n        if __name__ == \"__main__\":\n            main()\n\n:output:\n    .. figure:: https://cdn.jsdelivr.net/gh/thombashi/pytablewriter@master/docs/pages/examples/multibyte/ss/multi_byte_char.png\n       :scale: 100%\n       :alt: https://github.com/thombashi/pytablewriter/blob/master/docs/pages/examples/multibyte/ss/multi_byte_char.png\n\n       output of multi-byte character table\n\nmultiprocessing\n-----------------\nyou can increase the number of workers to process table data via ``max_workers`` attribute of a writer.\nthe more ``max_workers`` the less processing time when tabular data is large and the execution environment has available cores.\n\nif you increase ``max_workers`` larger than one, recommend using main guarded as follows to avoid problems caused by multi-processing:\n\n.. code-block:: python\n\n    from multiprocessing import cpu_count\n    import pytablewriter as ptw\n\n    def main():\n        writer = ptw.markdowntablewriter()\n        writer.max_workers = cpu_count()\n        ...\n\n    if __name__ == \"__main__\":\n        main()\n\nfor more information\n----------------------\nmore examples are available at \nhttps://pytablewriter.rtfd.io/en/latest/pages/examples/index.html\n\ndependencies\n============\n- python 3.7+\n- `python package dependencies (automatically installed) <https://github.com/thombashi/pytablewriter/network/dependencies>`__\n\n\noptional dependencies\n---------------------\n- ``logging`` extras\n    - `loguru <https://github.com/delgan/loguru>`__: used for logging if the package installed\n- ``from`` extras\n    - `pytablereader <https://github.com/thombashi/pytablereader>`__\n- ``es`` extra\n    - `elasticsearch <https://github.com/elastic/elasticsearch-py>`__\n- ``excel`` extras\n    - `xlwt <http://www.python-excel.org/>`__\n    - `xlsxwriter <https://github.com/jmcnamara/xlsxwriter>`__\n- ``html`` extras\n    - `dominate <https://github.com/knio/dominate/>`__\n- ``sqlite`` extras\n    - `simplesqlite <https://github.com/thombashi/simplesqlite>`__\n- ``theme`` extras\n    - `pytablewriter-altrow-theme <https://github.com/thombashi/pytablewriter-altrow-theme>`__\n    - `pytablewriter-altcol-theme <https://github.com/thombashi/pytablewriter-altcol-theme>`__\n- ``toml`` extras\n    - `toml <https://github.com/uiri/toml>`__\n\ndocumentation\n===============\nhttps://pytablewriter.rtfd.io/\n\nprojects using pytablewriter\n==================================\n- `pytest-md-report <https://github.com/thombashi/pytest-md-report>`__\n\n\nrelated projects\n==================================\n- `pytablereader <https://github.com/thombashi/pytablereader>`__\n    - tabular data loaded by ``pytablereader`` can be written another tabular data format with ``pytablewriter``.\n\nsponsors\n====================================\n.. image:: https://avatars.githubusercontent.com/u/44389260?s=48&u=6da7176e51ae2654bcfd22564772ef8a3bb22318&v=4\n   :target: https://github.com/chasbecker\n   :alt: charles becker (chasbecker)\n.. image:: https://avatars.githubusercontent.com/u/46711571?s=48&u=57687c0e02d5d6e8eeaf9177f7b7af4c9f275eb5&v=4\n   :target: https://github.com/arturi0\n   :alt: onetime: arturi0\n.. image:: https://avatars.githubusercontent.com/u/3658062?s=48&v=4\n   :target: https://github.com/b4tman\n   :alt: onetime: dmitry belyaev (b4tman)\n\n`become a sponsor <https://github.com/sponsors/thombashi>`__\n\n",
  "docs_url": null,
  "keywords": "asciidoc,table,csv,excel,javascript,json,latex,ltsv,markdown,mediawiki,html,pandas,restructuredtext,sqlite,tsv,toml",
  "license": "mit license",
  "name": "pytablewriter",
  "package_url": "https://pypi.org/project/pytablewriter/",
  "project_url": "https://pypi.org/project/pytablewriter/",
  "project_urls": {
    "Changlog": "https://github.com/thombashi/pytablewriter/releases",
    "Documentation": "https://pytablewriter.rtfd.io/",
    "Funding": "https://github.com/sponsors/thombashi",
    "Homepage": "https://github.com/thombashi/pytablewriter",
    "Source": "https://github.com/thombashi/pytablewriter",
    "Tracker": "https://github.com/thombashi/pytablewriter/issues"
  },
  "release_url": "https://pypi.org/project/pytablewriter/1.2.0/",
  "requires_dist": [
    "setuptools >=38.3.0",
    "DataProperty <2,>=1.0.1",
    "mbstrdecoder <2,>=1.0.0",
    "pathvalidate <4,>=2.3.0",
    "tabledata <2,>=1.3.1",
    "tcolorpy <1,>=0.0.5",
    "typepy[datetime] <2,>=1.3.2",
    "xlwt ; extra == 'all'",
    "XlsxWriter <4,>=0.9.6 ; extra == 'all'",
    "elasticsearch <9,>=8.0.1 ; extra == 'all'",
    "pytablereader <2,>=0.31.3 ; extra == 'all'",
    "dominate <3,>=2.1.5 ; extra == 'all'",
    "loguru <1,>=0.4.1 ; extra == 'all'",
    "SimpleSQLite <2,>=1.3.2 ; extra == 'all'",
    "pytablewriter-altrow-theme <1,>=0.2.0 ; extra == 'all'",
    "pytablewriter-altcol-theme <1,>=0.1.0 ; extra == 'all'",
    "toml <1,>=0.9.3 ; extra == 'all'",
    "PyYAML <7,>=3.11 ; extra == 'all'",
    "simplejson <4,>=3.8.1 ; extra == 'all'",
    "pandas <3,>=0.25.3 ; extra == 'all'",
    "sphinx-rtd-theme >=1.2.2 ; extra == 'docs'",
    "Sphinx >=2.4 ; extra == 'docs'",
    "xlwt ; extra == 'docs'",
    "XlsxWriter <4,>=0.9.6 ; extra == 'docs'",
    "elasticsearch <9,>=8.0.1 ; extra == 'docs'",
    "pytablereader <2,>=0.31.3 ; extra == 'docs'",
    "dominate <3,>=2.1.5 ; extra == 'docs'",
    "loguru <1,>=0.4.1 ; extra == 'docs'",
    "SimpleSQLite <2,>=1.3.2 ; extra == 'docs'",
    "pytablewriter-altrow-theme <1,>=0.2.0 ; extra == 'docs'",
    "pytablewriter-altcol-theme <1,>=0.1.0 ; extra == 'docs'",
    "toml <1,>=0.9.3 ; extra == 'docs'",
    "PyYAML <7,>=3.11 ; extra == 'docs'",
    "simplejson <4,>=3.8.1 ; extra == 'docs'",
    "pandas <3,>=0.25.3 ; extra == 'docs'",
    "elasticsearch <9,>=8.0.1 ; extra == 'es'",
    "elasticsearch <9,>=8.0.1 ; extra == 'es8'",
    "xlwt ; extra == 'excel'",
    "XlsxWriter <4,>=0.9.6 ; extra == 'excel'",
    "pytablereader <2,>=0.31.3 ; extra == 'from'",
    "dominate <3,>=2.1.5 ; extra == 'html'",
    "loguru <1,>=0.4.1 ; extra == 'logging'",
    "pandas <3,>=0.25.3 ; extra == 'pandas'",
    "SimpleSQLite <2,>=1.3.2 ; extra == 'sqlite'",
    "pandas <3,>=0.25.3 ; extra == 'test'",
    "XlsxWriter <4,>=0.9.6 ; extra == 'test'",
    "beautifulsoup4 >=4.10 ; extra == 'test'",
    "toml <1,>=0.9.3 ; extra == 'test'",
    "pytablewriter-altcol-theme <1,>=0.1.0 ; extra == 'test'",
    "pytest-md-report >=0.4.1 ; extra == 'test'",
    "pytablereader <2,>=0.31.3 ; extra == 'test'",
    "SimpleSQLite <2,>=1.3.2 ; extra == 'test'",
    "dominate <3,>=2.1.5 ; extra == 'test'",
    "pytablewriter-altrow-theme <1,>=0.2.0 ; extra == 'test'",
    "loguru <1,>=0.4.1 ; extra == 'test'",
    "xlwt ; extra == 'test'",
    "PyYAML <7,>=3.11 ; extra == 'test'",
    "elasticsearch <9,>=8.0.1 ; extra == 'test'",
    "tablib >=3.2.0 ; extra == 'test'",
    "pytablereader[excel,sqlite] >=0.31.3 ; extra == 'test'",
    "simplejson <4,>=3.8.1 ; extra == 'test'",
    "sqliteschema >=1.3.0 ; extra == 'test'",
    "pytest >=6.0.1 ; extra == 'test'",
    "pytablewriter-altrow-theme <1,>=0.2.0 ; extra == 'theme'",
    "pytablewriter-altcol-theme <1,>=0.1.0 ; extra == 'theme'",
    "toml <1,>=0.9.3 ; extra == 'toml'",
    "PyYAML <7,>=3.11 ; extra == 'yaml'"
  ],
  "requires_python": ">=3.7",
  "summary": "pytablewriter is a python library to write a table in various formats: asciidoc / csv / elasticsearch / html / javascript / json / latex / ldjson / ltsv / markdown / mediawiki / numpy / excel / pandas / python / restructuredtext / sqlite / toml / tsv / yaml.",
  "version": "1.2.0",
  "releases": [],
  "developers": [
    "tsuyoshi.hombashi@gmail.com",
    "tsuyoshi_hombashi"
  ],
  "kwds": "pytablewriter write_table unicodetablewriter markdowntablewriter table_format",
  "license_kwds": "mit license",
  "libtype": "pypi",
  "id": "pypi_pytablewriter",
  "homepage": "https://github.com/thombashi/pytablewriter",
  "release_count": 125,
  "dependency_ids": [
    "pypi_beautifulsoup4",
    "pypi_dataproperty",
    "pypi_dominate",
    "pypi_elasticsearch",
    "pypi_loguru",
    "pypi_mbstrdecoder",
    "pypi_pandas",
    "pypi_pathvalidate",
    "pypi_pytablereader",
    "pypi_pytablewriter_altcol_theme",
    "pypi_pytablewriter_altrow_theme",
    "pypi_pytest",
    "pypi_pytest_md_report",
    "pypi_pyyaml",
    "pypi_setuptools",
    "pypi_simplejson",
    "pypi_simplesqlite",
    "pypi_sphinx",
    "pypi_sphinx_rtd_theme",
    "pypi_sqliteschema",
    "pypi_tabledata",
    "pypi_tablib",
    "pypi_tcolorpy",
    "pypi_toml",
    "pypi_typepy",
    "pypi_xlsxwriter",
    "pypi_xlwt"
  ]
}
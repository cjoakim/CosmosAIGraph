{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: developers",
    "intended audience :: information technology",
    "license :: osi approved :: mit license",
    "operating system :: os independent",
    "programming language :: python :: 3",
    "programming language :: python :: 3 :: only",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.12",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "programming language :: python :: implementation :: cpython",
    "programming language :: python :: implementation :: pypy",
    "topic :: software development :: code generators",
    "topic :: software development :: libraries",
    "topic :: software development :: libraries :: python modules",
    "topic :: text processing",
    "topic :: text processing :: markup :: html",
    "topic :: text processing :: markup :: latex",
    "topic :: text processing :: markup :: markdown",
    "topic :: text processing :: markup :: restructuredtext",
    "typing :: typed"
  ],
  "description": "pytablewriter is a python library to write a table in various formats: asciidoc / csv / elasticsearch / html / javascript / json / latex / ldjson / ltsv / markdown / mediawiki / numpy / excel / pandas / python / restructuredtext / sqlite / toml / tsv / yaml.\n.. contents:: **pytablewriter**\n   :backlinks: top\n   :depth: 2\n\nsummary\n=========\n`pytablewriter <https://github.com/thombashi/pytablewriter>`__ is a python library to write a table in various formats: asciidoc / csv / elasticsearch / html / javascript / json / latex / ldjson / ltsv / markdown / mediawiki / numpy / excel / pandas / python / restructuredtext / sqlite / toml / tsv / yaml.\n\n.. image:: https://badge.fury.io/py/pytablewriter.svg\n    :target: https://badge.fury.io/py/pytablewriter\n    :alt: pypi package version\n\n.. image:: https://anaconda.org/conda-forge/pytablewriter/badges/version.svg\n    :target: https://anaconda.org/conda-forge/pytablewriter\n    :alt: conda-forge package version\n\n.. image:: https://img.shields.io/pypi/pyversions/pytablewriter.svg\n    :target: https://pypi.org/project/pytablewriter/\n    :alt: supported python versions\n\n.. image:: https://img.shields.io/pypi/implementation/pytablewriter.svg\n    :target: https://pypi.org/project/pytablewriter\n    :alt: supported python implementations\n\n.. image:: https://github.com/thombashi/pytablewriter/actions/workflows/ci.yml/badge.svg\n    :target: https://github.com/thombashi/pytablewriter/actions/workflows/ci.yml\n    :alt: ci status of linux/macos/windows\n\n.. image:: https://coveralls.io/repos/github/thombashi/pytablewriter/badge.svg?branch=master\n    :target: https://coveralls.io/github/thombashi/pytablewriter?branch=master\n    :alt: test coverage\n\n.. image:: https://github.com/thombashi/pytablewriter/actions/workflows/github-code-scanning/codeql/badge.svg\n    :target: https://github.com/thombashi/pytablewriter/actions/workflows/github-code-scanning/codeql\n    :alt: codeql\n\nfeatures\n--------\n- write a table in various formats:\n    - text formats:\n        - `asciidoc <https://asciidoc.org/>`__\n        - csv / tab-separated values (tsv) / space-separated values (ssv)\n        - html / css\n        - json / `line-delimited json(ldjson) <https://en.wikipedia.org/wiki/json_streaming#line-delimited_json>`__\n        - `labeled tab-separated values (ltsv) <http://ltsv.org/>`__\n        - latex: ``tabular``/``array`` environment\n        - markdown: commonmark / `github flavored markdown (gfm) <https://github.github.com/gfm/>`__ / `kramdown <https://kramdown.gettalong.org/>`__\n        - `mediawiki <https://www.mediawiki.org/wiki/mediawiki>`__\n        - restructuredtext: `grid tables <http://docutils.sourceforge.net/docs/ref/rst/restructuredtext.html#grid-tables>`__/`simple tables <http://docutils.sourceforge.net/docs/ref/rst/restructuredtext.html#simple-tables>`__/`csv table <http://docutils.sourceforge.net/docs/ref/rst/directives.html#id4>`__\n        - source code (definition of a variable that represents tabular data)\n            - javascript / `numpy <https://www.numpy.org/>`__ (`numpy.array <https://docs.scipy.org/doc/numpy/reference/generated/numpy.array.html>`__) / `pandas <https://pandas.pydata.org/>`__ (`pandas.dataframe <https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.dataframe.html>`__) / python\n        - `toml <https://github.com/toml-lang/toml>`__\n        - `yaml <https://yaml.org/>`__\n        - unicode\n    - binary file formats:\n        - microsoft excel :superscript:`tm` (``.xlsx``/``.xls`` file format)\n        - `pandas.dataframe <https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.dataframe.html>`__ pickle file\n        - `sqlite <https://www.sqlite.org/index.html>`__ database\n    - application-specific formats:\n        - `elasticsearch <https://www.elastic.co/products/elasticsearch>`__\n- automatic table cell formatting:\n    - alignment\n    - padding\n    - decimal places of numbers\n- customize table cell styles:\n    - text/background color\n    - text alignment\n    - font size/weight\n    - thousand separator for numbers: e.g. ``1,000``/``1 000``\n- configure output:\n    - write a table to a stream such as a file/standard-output/string-buffer/jupyter-notebook\n    - get rendered tabular text\n- data sources:\n    - nested list\n    - csv\n    - `pandas.dataframe <https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.dataframe.html>`__ / `pandas.series <https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.series.html>`__\n    - etc.\n- multibyte character support\n- ansi color support\n\ninstallation\n============\n\ninstallation: pip\n------------------------------\n::\n\n    pip install pytablewriter\n\nsome of the formats require additional dependency packages, you can install these packages as follows:\n\n.. csv-table:: installation of optional dependencies\n    :header: installation example, remark\n\n    ``pip install pytablewriter[es]``, elasticsearch\n    ``pip install pytablewriter[excel]``, excel\n    ``pip install pytablewriter[html]``, html\n    ``pip install pytablewriter[sqlite]``, sqlite database\n    ``pip install pytablewriter[toml]``, toml\n    ``pip install pytablewriter[theme]``, pytablewriter theme plugins\n    ``pip install pytablewriter[all]``, install all of the optional dependencies\n\ninstallation: conda\n------------------------------\n::\n\n    conda install -c conda-forge pytablewriter\n\ninstallation: apt\n------------------------------\n::\n\n    sudo add-apt-repository ppa:thombashi/ppa\n    sudo apt update\n    sudo apt install python3-pytablewriter\n\nexamples\n==========\nwrite tables\n--------------\nwrite a markdown table\n~~~~~~~~~~~~~~~~~~~~~~~~\n:sample code:\n    .. code-block:: python\n\n        from pytablewriter import markdowntablewriter\n\n        def main():\n            writer = markdowntablewriter(\n                table_name=\"example_table\",\n                headers=[\"int\", \"float\", \"str\", \"bool\", \"mix\", \"time\"],\n                value_matrix=[\n                    [0,   0.1,      \"hoge\", true,   0,      \"2017-01-01 03:04:05+0900\"],\n                    [2,   \"-2.23\",  \"foo\",  false,  none,   \"2017-12-23 45:01:23+0900\"],\n                    [3,   0,        \"bar\",  \"true\",  \"inf\", \"2017-03-03 33:44:55+0900\"],\n                    [-10, -9.9,     \"\",     \"false\", \"nan\", \"2017-01-01 00:00:00+0900\"],\n                ],\n            )\n            writer.write_table()\n\n        if __name__ == \"__main__\":\n            main()\n\n:output:\n    .. code-block::\n\n        # example_table\n        |int|float|str |bool |  mix   |          time          |\n        |--:|----:|----|-----|-------:|------------------------|\n        |  0| 0.10|hoge|true |       0|2017-01-01 03:04:05+0900|\n        |  2|-2.23|foo |false|        |2017-12-23 12:34:51+0900|\n        |  3| 0.00|bar |true |infinity|2017-03-03 22:44:55+0900|\n        |-10|-9.90|    |false|     nan|2017-01-01 00:00:00+0900|\n\n:rendering result:\n    .. figure:: https://cdn.jsdelivr.net/gh/thombashi/pytablewriter@master/docs/pages/examples/table_format/text/ss/markdown.png\n       :scale: 80%\n       :alt: https://github.com/thombashi/pytablewriter/blob/master/docs/pages/examples/table_format/text/ss/markdown.png\n\n       rendered markdown at github\n\nwrite a markdown table with margins\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n:sample code:\n    .. code-block:: python\n\n        from pytablewriter import markdowntablewriter\n\n        def main():\n            writer = markdowntablewriter(\n                table_name=\"write a table with margins\",\n                headers=[\"int\", \"float\", \"str\", \"bool\", \"mix\", \"time\"],\n                value_matrix=[\n                    [0,   0.1,      \"hoge\", true,   0,      \"2017-01-01 03:04:05+0900\"],\n                    [2,   \"-2.23\",  \"foo\",  false,  none,   \"2017-12-23 45:01:23+0900\"],\n                    [3,   0,        \"bar\",  \"true\",  \"inf\", \"2017-03-03 33:44:55+0900\"],\n                    [-10, -9.9,     \"\",     \"false\", \"nan\", \"2017-01-01 00:00:00+0900\"],\n                ],\n                margin=1  # add a whitespace for both sides of each cell\n            )\n            writer.write_table()\n\n        if __name__ == \"__main__\":\n            main()\n\n:output:\n    .. code-block::\n\n        # write a table with margins\n        | int | float | str  | bool  |   mix    |           time           |\n        | --: | ----: | ---- | ----- | -------: | ------------------------ |\n        |   0 |  0.10 | hoge | true  |        0 | 2017-01-01 03:04:05+0900 |\n        |   2 | -2.23 | foo  | false |          | 2017-12-23 12:34:51+0900 |\n        |   3 |  0.00 | bar  | true  | infinity | 2017-03-03 22:44:55+0900 |\n        | -10 | -9.90 |      | false |      nan | 2017-01-01 00:00:00+0900 |\n\n``margin`` attribute can be available for all of the text format writer classes.\n\nwrite a github flavored markdown (gfm) table\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nif you set ``flavor`` keyword argument of ``markdowntablewriter`` class to ``\"github\"`` or ``\"gfm\"``, the writer will output markdown tables with github flavor.\ngfm can apply some additional styles to tables such as ``fg_color`` (text color).\n\n:sample code:\n    .. code-block:: python\n\n            from pytablewriter import markdowntablewriter\n            from pytablewriter.style import style\n\n            writer = markdowntablewriter(\n                column_styles=[\n                    style(fg_color=\"red\"),\n                    style(fg_color=\"green\", decoration_line=\"underline\"),\n                ],\n                headers=[\"a\", \"b\"],\n                value_matrix=[\n                    [\"abc\", 1],\n                    [\"efg\", 2],\n                ],\n                margin=1,\n                flavor=\"github\",\n                enable_ansi_escape=false,\n            )\n            writer.write_table()\n\nrendered results can be found at `here <https://github.com/thombashi/pytablewriter/blob/master/docs/pages/examples/output/markdown/gfm.md>`__\n\napply styles to gfm table with programmatically\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\napplying style filters to gfm allows for more flexible style settings for cells.\nsee also the `example <#style-filter>`_\n\nwrite a markdown table to a stream or a file\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n`refer an example <https://github.com/thombashi/pytablewriter/blob/master/examples/py/stream/configure_stream.py>`__\n\nwrite a table to an excel sheet\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n:sample code:\n    .. code-block:: python\n\n        from pytablewriter import excelxlsxtablewriter\n\n        def main():\n            writer = excelxlsxtablewriter()\n            writer.table_name = \"example\"\n            writer.headers = [\"int\", \"float\", \"str\", \"bool\", \"mix\", \"time\"]\n            writer.value_matrix = [\n                [0,   0.1,      \"hoge\", true,   0,      \"2017-01-01 03:04:05+0900\"],\n                [2,   \"-2.23\",  \"foo\",  false,  none,   \"2017-12-23 12:34:51+0900\"],\n                [3,   0,        \"bar\",  \"true\",  \"inf\", \"2017-03-03 22:44:55+0900\"],\n                [-10, -9.9,     \"\",     \"false\", \"nan\", \"2017-01-01 00:00:00+0900\"],\n            ]\n            writer.dump(\"sample.xlsx\")\n\n        if __name__ == \"__main__\":\n            main()\n\n:output:\n    .. figure:: https://cdn.jsdelivr.net/gh/thombashi/pytablewriter@master/docs/pages/examples/table_format/binary/spreadsheet/ss/excel_single.png\n       :scale: 100%\n       :alt: https://github.com/thombashi/pytablewriter/blob/master/docs/pages/examples/table_format/binary/spreadsheet/ss/excel_single.png\n\n       output excel file (``sample_single.xlsx``)\n\nwrite a unicode table\n~~~~~~~~~~~~~~~~~~~~~~~\n:sample code:\n    .. code-block:: python\n\n        from pytablewriter import unicodetablewriter\n\n        def main():\n            writer = unicodetablewriter(\n                table_name=\"example_table\",\n                headers=[\"int\", \"float\", \"str\", \"bool\", \"mix\", \"time\"],\n                value_matrix=[\n                    [0,   0.1,      \"hoge\", true,   0,      \"2017-01-01 03:04:05+0900\"],\n                    [2,   \"-2.23\",  \"foo\",  false,  none,   \"2017-12-23 45:01:23+0900\"],\n                    [3,   0,        \"bar\",  \"true\",  \"inf\", \"2017-03-03 33:44:55+0900\"],\n                    [-10, -9.9,     \"\",     \"false\", \"nan\", \"2017-01-01 00:00:00+0900\"],\n                ]\n            )\n            writer.write_table()\n\n        if __name__ == \"__main__\":\n            main()\n\n:output:\n    .. code-block::\n\n        \u250c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n        \u2502int\u2502float\u2502str \u2502bool \u2502  mix   \u2502          time          \u2502\n        \u251c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n        \u2502  0\u2502 0.10\u2502hoge\u2502true \u2502       0\u25022017-01-01 03:04:05+0900\u2502\n        \u251c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n        \u2502  2\u2502-2.23\u2502foo \u2502false\u2502        \u25022017-12-23 12:34:51+0900\u2502\n        \u251c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n        \u2502  3\u2502 0.00\u2502bar \u2502true \u2502infinity\u25022017-03-03 22:44:55+0900\u2502\n        \u251c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n        \u2502-10\u2502-9.90\u2502    \u2502false\u2502     nan\u25022017-01-01 00:00:00+0900\u2502\n        \u2514\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\nwrite a table with javascript format (as a nested list variable definition)\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n:sample code:\n    .. code-block:: python\n\n        import pytablewriter as ptw\n\n\n        def main():\n            writer = ptw.javascripttablewriter(\n                table_name=\"js_variable\",\n                headers=[\"int\", \"float\", \"str\", \"bool\", \"mix\", \"time\"],\n                value_matrix=[\n                    [0, 0.1, \"hoge\", true, 0, \"2017-01-01 03:04:05+0900\"],\n                    [2, \"-2.23\", \"foo\", false, none, \"2017-12-23 45:01:23+0900\"],\n                    [3, 0, \"bar\", \"true\", \"inf\", \"2017-03-03 33:44:55+0900\"],\n                    [-10, -9.9, \"\", \"false\", \"nan\", \"2017-01-01 00:00:00+0900\"],\n                ],\n            )\n\n            writer.write_table()\n\n\n        if __name__ == \"__main__\":\n            main()\n\n:output:\n    .. code-block:: js\n\n        const js_variable = [\n            [\"int\", \"float\", \"str\", \"bool\", \"mix\", \"time\"],\n            [0, 0.1, \"hoge\", true, 0, \"2017-01-01 03:04:05+0900\"],\n            [2, -2.23, \"foo\", false, null, \"2017-12-23 45:01:23+0900\"],\n            [3, 0, \"bar\", true, infinity, \"2017-03-03 33:44:55+0900\"],\n            [-10, -9.9, \"\", \"false\", nan, \"2017-01-01 00:00:00+0900\"]\n        ];\n\nwrite a markdown table from ``pandas.dataframe`` instance\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n``from_dataframe`` method of writer classes will set up tabular data from ``pandas.dataframe``:\n\n:sample code:\n    .. code-block:: python\n\n        from textwrap import dedent\n        import pandas as pd\n        import io\n        from pytablewriter import markdowntablewriter\n\n        def main():\n            csv_data = io.stringio(dedent(\"\"\"\\\n                \"i\",\"f\",\"c\",\"if\",\"ifc\",\"bool\",\"inf\",\"nan\",\"mix_num\",\"time\"\n                1,1.10,\"aa\",1.0,\"1\",true,infinity,nan,1,\"2017-01-01 00:00:00+09:00\"\n                2,2.20,\"bbb\",2.2,\"2.2\",false,infinity,nan,infinity,\"2017-01-02 03:04:05+09:00\"\n                3,3.33,\"cccc\",-3.0,\"ccc\",true,infinity,nan,nan,\"2017-01-01 00:00:00+09:00\"\n                \"\"\"))\n            df = pd.read_csv(csv_data, sep=',')\n\n            writer = markdowntablewriter(dataframe=df)\n            writer.write_table()\n\n        if __name__ == \"__main__\":\n            main()\n\n:output:\n    .. code-block::\n\n        | i | f  | c  | if |ifc|bool |  inf   |nan|mix_num |          time           |\n        |--:|---:|----|---:|---|-----|--------|---|-------:|-------------------------|\n        |  1|1.10|aa  | 1.0|  1|true |infinity|nan|       1|2017-01-01 00:00:00+09:00|\n        |  2|2.20|bbb | 2.2|2.2|false|infinity|nan|infinity|2017-01-02 03:04:05+09:00|\n        |  3|3.33|cccc|-3.0|ccc|true |infinity|nan|     nan|2017-01-01 00:00:00+09:00|\n\n\nadding a column of the dataframe index if you specify ``add_index_column=true``:\n\n:sample code:\n    .. code-block:: python\n\n        import pandas as pd\n        import pytablewriter as ptw\n\n        def main():\n            writer = ptw.markdowntablewriter(table_name=\"add_index_column\")\n            writer.from_dataframe(\n                pd.dataframe({\"a\": [1, 2], \"b\": [10, 11]}, index=[\"a\", \"b\"]),\n                add_index_column=true,\n            )\n            writer.write_table()\n\n        if __name__ == \"__main__\":\n            main()\n\n:output:\n    .. code-block::\n\n        # add_index_column\n        |   | a | b |\n        |---|--:|--:|\n        |a  |  1| 10|\n        |b  |  2| 11|\n\nwrite a markdown table from space-separated values\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n:sample code:\n    .. code-block:: python\n\n        import pytablewriter as ptw\n\n\n        def main():\n            writer = ptw.markdowntablewriter(table_name=\"ps\")\n            writer.from_csv(\n                \"\"\"\n                user       pid %cpu %mem    vsz   rss tty      stat start   time command\n                root         1  0.0  0.4  77664  8784 ?        ss   may11   0:02 /sbin/init\n                root         2  0.0  0.0      0     0 ?        s    may11   0:00 [kthreadd]\n                root         4  0.0  0.0      0     0 ?        i<   may11   0:00 [kworker/0:0h]\n                root         6  0.0  0.0      0     0 ?        i<   may11   0:00 [mm_percpu_wq]\n                root         7  0.0  0.0      0     0 ?        s    may11   0:01 [ksoftirqd/0]\n                \"\"\",\n                delimiter=\" \",\n            )\n            writer.write_table()\n\n\n        if __name__ == \"__main__\":\n            main()\n\n:output:\n    .. code-block::\n\n        # ps\n        |user|pid|%cpu|%mem| vsz |rss |tty|stat|start|time|   command    |\n        |----|--:|---:|---:|----:|---:|---|----|-----|----|--------------|\n        |root|  1|   0| 0.4|77664|8784|?  |ss  |may11|0:02|/sbin/init    |\n        |root|  2|   0| 0.0|    0|   0|?  |s   |may11|0:00|[kthreadd]    |\n        |root|  4|   0| 0.0|    0|   0|?  |i<  |may11|0:00|[kworker/0:0h]|\n        |root|  6|   0| 0.0|    0|   0|?  |i<  |may11|0:00|[mm_percpu_wq]|\n        |root|  7|   0| 0.0|    0|   0|?  |s   |may11|0:01|[ksoftirqd/0] |\n\nget rendered tabular text as str\n----------------------------------\n``dumps`` method returns rendered tabular text.\n``dumps`` only available for text format writers.\n\n:sample code:\n    .. code-block:: python\n\n        import pytablewriter as ptw\n\n\n        def main():\n            writer = ptw.markdowntablewriter(\n                headers=[\"int\", \"float\", \"str\", \"bool\", \"mix\", \"time\"],\n                value_matrix=[\n                    [0, 0.1, \"hoge\", true, 0, \"2017-01-01 03:04:05+0900\"],\n                    [2, \"-2.23\", \"foo\", false, none, \"2017-12-23 45:01:23+0900\"],\n                    [3, 0, \"bar\", \"true\", \"inf\", \"2017-03-03 33:44:55+0900\"],\n                    [-10, -9.9, \"\", \"false\", \"nan\", \"2017-01-01 00:00:00+0900\"],\n                ],\n            )\n\n            print(writer.dumps())\n\n\n        if __name__ == \"__main__\":\n            main()\n\n:output:\n    .. code-block::\n\n        |int|float|str |bool |  mix   |          time          |\n        |--:|----:|----|-----|-------:|------------------------|\n        |  0| 0.10|hoge|true |       0|2017-01-01 03:04:05+0900|\n        |  2|-2.23|foo |false|        |2017-12-23 45:01:23+0900|\n        |  3| 0.00|bar |true |infinity|2017-03-03 33:44:55+0900|\n        |-10|-9.90|    |false|     nan|2017-01-01 00:00:00+0900|\n\nconfigure table styles\n------------------------\ncolumn styles\n~~~~~~~~~~~~~~~\nwriters can specify\n`style <https://pytablewriter.rtfd.io/en/latest/pages/reference/style.html>`__\nfor each column by ``column_styles`` attribute of writer classes.\n\n:sample code:\n    .. code-block:: python\n\n        import pytablewriter as ptw\n        from pytablewriter.style import style\n\n\n        def main():\n            writer = ptw.markdowntablewriter(\n                table_name=\"set style by column_styles\",\n                headers=[\n                    \"auto align\",\n                    \"left align\",\n                    \"center align\",\n                    \"bold\",\n                    \"italic\",\n                    \"bold italic ts\",\n                ],\n                value_matrix=[\n                    [11, 11, 11, 11, 11, 11],\n                    [1234, 1234, 1234, 1234, 1234, 1234],\n                ],\n                column_styles=[\n                    style(),\n                    style(align=\"left\"),\n                    style(align=\"center\"),\n                    style(font_weight=\"bold\"),\n                    style(font_style=\"italic\"),\n                    style(font_weight=\"bold\", font_style=\"italic\", thousand_separator=\",\"),\n                ],  # specify styles for each column\n            )\n            writer.write_table()\n\n\n        if __name__ == \"__main__\":\n            main()\n\n:output:\n    .. code-block::\n\n        # set style by styles\n        |auto align|left align|center align|  bold  |italic|bold italic ts|\n        |---------:|----------|:----------:|-------:|-----:|-------------:|\n        |        11|11        |     11     |  **11**|  _11_|      _**11**_|\n        |      1234|1234      |    1234    |**1234**|_1234_|   _**1,234**_|\n\n    `rendering result <https://github.com/thombashi/pytablewriter/tree/master/docs/pages/examples/style/output.md>`__\n\n\nyou can also set ``style`` to a specific column with an index or header by using ``set_style`` method:\n\n:sample code:\n    .. code-block:: python\n\n        from pytablewriter import markdowntablewriter\n        from pytablewriter.style import style\n\n        def main():\n            writer = markdowntablewriter()\n            writer.headers = [\"a\", \"b\", \"c\",]\n            writer.value_matrix = [[11, 11, 11], [1234, 1234, 1234]]\n\n            writer.table_name = \"set style by column index\"\n            writer.set_style(1, style(align=\"center\", font_weight=\"bold\"))\n            writer.set_style(2, style(thousand_separator=\" \"))\n            writer.write_table()\n            writer.write_null_line()\n\n            writer.table_name = \"set style by header\"\n            writer.set_style(\"b\", style(font_style=\"italic\"))\n            writer.write_table()\n\n        if __name__ == \"__main__\":\n            main()\n\n:output:\n    .. code-block::\n\n        # set style by column index\n        | a  |   b    |  c  |\n        |---:|:------:|----:|\n        |  11| **11** |   11|\n        |1234|**1234**|1 234|\n\n        # set style by header\n        | a  |  b   |  c  |\n        |---:|-----:|----:|\n        |  11|  _11_|   11|\n        |1234|_1234_|1 234|\n\nstyle filter\n~~~~~~~~~~~~~~\nyou can apply styles to specific cells by using style filters.\nstyle filters will be written as python functions.\nexamples of a style filter function and how you apply it are as follows:\n\n:sample code:\n    .. code-block:: python\n\n            from typing import any, optional\n\n            from pytablewriter import markdowntablewriter\n            from pytablewriter.style import cell, style\n\n\n            def style_filter(cell: cell, **kwargs: any) -> optional[style]:\n                if cell.is_header_row():\n                    return none\n\n                if cell.col == 0:\n                    return style(font_weight=\"bold\")\n\n                value = int(cell.value)\n\n                if value > 80:\n                    return style(fg_color=\"red\", font_weight=\"bold\", decoration_line=\"underline\")\n                elif value > 50:\n                    return style(fg_color=\"yellow\", font_weight=\"bold\")\n                elif value > 20:\n                    return style(fg_color=\"green\")\n\n                return style(fg_color=\"lightblue\")\n\n\n            writer = markdowntablewriter(\n                table_name=\"style filter example\",\n                headers=[\"key\", \"value 1\", \"value 2\"],\n                value_matrix=[\n                    [\"a\", 95, 40],\n                    [\"b\", 55, 5],\n                    [\"c\", 30, 85],\n                    [\"d\", 0, 69],\n                ],\n                flavor=\"github\",\n                enable_ansi_escape=false,\n            )\n            writer.add_style_filter(style_filter)\n            writer.write_table()\n\nrendered results can be found at `here <https://github.com/thombashi/pytablewriter/blob/master/docs/pages/examples/output/markdown/style_filter.md>`__\n\ntheme\n~~~~~~~\nthemes consists of a set of style filters.\nthe following command will install external predefined themes:\n\n::\n\n    pip install pytablewriter[theme]\n\nthemes can be set via the constructor of the writer classes or the ``set_theme`` method.\nthe following is an example of setting the ``altrow`` theme via the constructor.\n``altrow`` theme will be colored rows alternatively:\n\n:sample code:\n    .. code-block:: python\n\n        import pytablewriter as ptw\n\n        writer = ptw.tablewriterfactory.create_from_format_name(\n            \"markdown\",\n            headers=[\"int\", \"str\"],\n            value_matrix=[[1, \"hoge\"], [2, \"foo\"], [3, \"bar\"]],\n            margin=1,\n            theme=\"altrow\",\n        )\n        writer.write_table()\n\n:output:\n    .. figure:: https://cdn.jsdelivr.net/gh/thombashi/pytablewriter-altrow-theme@master/ss/ptw-altrow-theme_example_default.png\n       :scale: 100%\n       :alt: https://github.com/thombashi/pytablewriter-altrow-theme/blob/master/ss/ptw-altrow-theme_example_default.png\n\n`[theme]` extras includes the following themes:\n\n- `pytablewriter-altrow-theme <https://github.com/thombashi/pytablewriter-altrow-theme>`__\n    - `generated html table example <https://thombashi.github.io/pytablewriter-altrow-theme/example.html>`__\n- `pytablewriter-altcol-theme <https://github.com/thombashi/pytablewriter-altcol-theme>`__\n    - `generated html table example <https://thombashi.github.io/pytablewriter-altcol-theme/example.html>`__\n\nmake tables for specific applications\n---------------------------------------\nrender a table on jupyter notebook\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nall table writer class instances in ``pytablewriter`` can render in jupyter notebook.\nto render writers at notebook cells, you will require the dependency packages to be installed either by:\n\n- ``pip install pytablewriter[html]`` or\n- ``pip install pytablewriter[all]``\n\njupyter notebook code examples can be found `here <https://nbviewer.jupyter.org/github/thombashi/pytablewriter/blob/master/examples/ipynb/jupyter_notebook_example.ipynb>`__:\n\n.. figure:: https://cdn.jsdelivr.net/gh/thombashi/pytablewriter@master/ss/jupyter_notebook.png\n   :scale: 100%\n   :alt: https://github.com/thombashi/pytablewriter/blob/master/ss/jupyter_notebook.png\n\n   table rendering results of jupyter notebook\n\nmultibyte character support\n-----------------------------\nwrite a table using multibyte character\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nyou can use multibyte characters as table data.\nmultibyte characters are also properly padded and aligned.\n\n:sample code:\n    .. code-block:: python\n\n        import pytablewriter as ptw\n\n\n        def main():\n            writer = ptw.rstsimpletablewriter(\n                table_name=\"\u751f\u6210\u306b\u95a2\u3059\u308b\u30d1\u30bf\u30fc\u30f3\",\n                headers=[\"\u30d1\u30bf\u30fc\u30f3\u540d\", \"\u6982\u8981\", \"gof\", \"code complete[1]\"],\n                value_matrix=[\n                    [\"abstract factory\", \"\u95a2\u9023\u3059\u308b\u4e00\u9023\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u72b6\u6cc1\u306b\u5fdc\u3058\u3066\u3001\u9069\u5207\u306b\u751f\u6210\u3059\u308b\u65b9\u6cd5\u3092\u63d0\u4f9b\u3059\u308b\u3002\", \"yes\", \"yes\"],\n                    [\"builder\", \"\u8907\u5408\u5316\u3055\u308c\u305f\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306e\u751f\u6210\u904e\u7a0b\u3092\u96a0\u853d\u3059\u308b\u3002\", \"yes\", \"no\"],\n                    [\"factory method\", \"\u5b9f\u969b\u306b\u751f\u6210\u3055\u308c\u308b\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306b\u4f9d\u5b58\u3057\u306a\u3044\u3001\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306e\u751f\u6210\u65b9\u6cd5\u3092\u63d0\u4f9b\u3059\u308b\u3002\", \"yes\", \"yes\"],\n                    [\"prototype\", \"\u540c\u69d8\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u751f\u6210\u3059\u308b\u305f\u3081\u306b\u3001\u539f\u578b\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u8907\u88fd\u3059\u308b\u3002\", \"yes\", \"no\"],\n                    [\"singleton\", \"\u3042\u308b\u30af\u30e9\u30b9\u306b\u3064\u3044\u3066\u3001\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u304c\u5358\u4e00\u3067\u3042\u308b\u3053\u3068\u3092\u4fdd\u8a3c\u3059\u308b\u3002\", \"yes\", \"yes\"],\n                ],\n            )\n            writer.write_table()\n\n\n        if __name__ == \"__main__\":\n            main()\n\n:output:\n    .. figure:: https://cdn.jsdelivr.net/gh/thombashi/pytablewriter@master/docs/pages/examples/multibyte/ss/multi_byte_char.png\n       :scale: 100%\n       :alt: https://github.com/thombashi/pytablewriter/blob/master/docs/pages/examples/multibyte/ss/multi_byte_char.png\n\n       output of multi-byte character table\n\nmultiprocessing\n-----------------\nyou can increase the number of workers to process table data via ``max_workers`` attribute of a writer.\nthe more ``max_workers`` the less processing time when tabular data is large and the execution environment has available cores.\n\nif you increase ``max_workers`` larger than one, recommend using main guarded as follows to avoid problems caused by multi-processing:\n\n.. code-block:: python\n\n    from multiprocessing import cpu_count\n    import pytablewriter as ptw\n\n    def main():\n        writer = ptw.markdowntablewriter()\n        writer.max_workers = cpu_count()\n        ...\n\n    if __name__ == \"__main__\":\n        main()\n\nfor more information\n----------------------\nmore examples are available at \nhttps://pytablewriter.rtfd.io/en/latest/pages/examples/index.html\n\ndependencies\n============\n- python 3.7+\n- `python package dependencies (automatically installed) <https://github.com/thombashi/pytablewriter/network/dependencies>`__\n\n\noptional dependencies\n---------------------\n- ``logging`` extras\n    - `loguru <https://github.com/delgan/loguru>`__: used for logging if the package installed\n- ``from`` extras\n    - `pytablereader <https://github.com/thombashi/pytablereader>`__\n- ``es`` extra\n    - `elasticsearch <https://github.com/elastic/elasticsearch-py>`__\n- ``excel`` extras\n    - `xlwt <http://www.python-excel.org/>`__\n    - `xlsxwriter <https://github.com/jmcnamara/xlsxwriter>`__\n- ``html`` extras\n    - `dominate <https://github.com/knio/dominate/>`__\n- ``sqlite`` extras\n    - `simplesqlite <https://github.com/thombashi/simplesqlite>`__\n- ``theme`` extras\n    - `pytablewriter-altrow-theme <https://github.com/thombashi/pytablewriter-altrow-theme>`__\n    - `pytablewriter-altcol-theme <https://github.com/thombashi/pytablewriter-altcol-theme>`__\n- ``toml`` extras\n    - `toml <https://github.com/uiri/toml>`__\n\ndocumentation\n===============\nhttps://pytablewriter.rtfd.io/\n\nprojects using pytablewriter\n==================================\n- `pytest-md-report <https://github.com/thombashi/pytest-md-report>`__\n\n\nrelated projects\n==================================\n- `pytablereader <https://github.com/thombashi/pytablereader>`__\n    - tabular data loaded by ``pytablereader`` can be written another tabular data format with ``pytablewriter``.\n\nsponsors\n====================================\n.. image:: https://avatars.githubusercontent.com/u/44389260?s=48&u=6da7176e51ae2654bcfd22564772ef8a3bb22318&v=4\n   :target: https://github.com/chasbecker\n   :alt: charles becker (chasbecker)\n.. image:: https://avatars.githubusercontent.com/u/46711571?s=48&u=57687c0e02d5d6e8eeaf9177f7b7af4c9f275eb5&v=4\n   :target: https://github.com/arturi0\n   :alt: onetime: arturi0\n.. image:: https://avatars.githubusercontent.com/u/3658062?s=48&v=4\n   :target: https://github.com/b4tman\n   :alt: onetime: dmitry belyaev (b4tman)\n\n`become a sponsor <https://github.com/sponsors/thombashi>`__\n\n",
  "docs_url": null,
  "keywords": "asciidoc,table,csv,excel,javascript,json,latex,ltsv,markdown,mediawiki,html,pandas,restructuredtext,sqlite,tsv,toml",
  "license": "mit license",
  "name": "pytablewriter",
  "package_url": "https://pypi.org/project/pytablewriter/",
  "project_url": "https://pypi.org/project/pytablewriter/",
  "project_urls": {
    "Changlog": "https://github.com/thombashi/pytablewriter/releases",
    "Documentation": "https://pytablewriter.rtfd.io/",
    "Funding": "https://github.com/sponsors/thombashi",
    "Homepage": "https://github.com/thombashi/pytablewriter",
    "Source": "https://github.com/thombashi/pytablewriter",
    "Tracker": "https://github.com/thombashi/pytablewriter/issues"
  },
  "release_url": "https://pypi.org/project/pytablewriter/1.2.0/",
  "requires_dist": [
    "setuptools >=38.3.0",
    "DataProperty <2,>=1.0.1",
    "mbstrdecoder <2,>=1.0.0",
    "pathvalidate <4,>=2.3.0",
    "tabledata <2,>=1.3.1",
    "tcolorpy <1,>=0.0.5",
    "typepy[datetime] <2,>=1.3.2",
    "xlwt ; extra == 'all'",
    "XlsxWriter <4,>=0.9.6 ; extra == 'all'",
    "elasticsearch <9,>=8.0.1 ; extra == 'all'",
    "pytablereader <2,>=0.31.3 ; extra == 'all'",
    "dominate <3,>=2.1.5 ; extra == 'all'",
    "loguru <1,>=0.4.1 ; extra == 'all'",
    "SimpleSQLite <2,>=1.3.2 ; extra == 'all'",
    "pytablewriter-altrow-theme <1,>=0.2.0 ; extra == 'all'",
    "pytablewriter-altcol-theme <1,>=0.1.0 ; extra == 'all'",
    "toml <1,>=0.9.3 ; extra == 'all'",
    "PyYAML <7,>=3.11 ; extra == 'all'",
    "simplejson <4,>=3.8.1 ; extra == 'all'",
    "pandas <3,>=0.25.3 ; extra == 'all'",
    "sphinx-rtd-theme >=1.2.2 ; extra == 'docs'",
    "Sphinx >=2.4 ; extra == 'docs'",
    "xlwt ; extra == 'docs'",
    "XlsxWriter <4,>=0.9.6 ; extra == 'docs'",
    "elasticsearch <9,>=8.0.1 ; extra == 'docs'",
    "pytablereader <2,>=0.31.3 ; extra == 'docs'",
    "dominate <3,>=2.1.5 ; extra == 'docs'",
    "loguru <1,>=0.4.1 ; extra == 'docs'",
    "SimpleSQLite <2,>=1.3.2 ; extra == 'docs'",
    "pytablewriter-altrow-theme <1,>=0.2.0 ; extra == 'docs'",
    "pytablewriter-altcol-theme <1,>=0.1.0 ; extra == 'docs'",
    "toml <1,>=0.9.3 ; extra == 'docs'",
    "PyYAML <7,>=3.11 ; extra == 'docs'",
    "simplejson <4,>=3.8.1 ; extra == 'docs'",
    "pandas <3,>=0.25.3 ; extra == 'docs'",
    "elasticsearch <9,>=8.0.1 ; extra == 'es'",
    "elasticsearch <9,>=8.0.1 ; extra == 'es8'",
    "xlwt ; extra == 'excel'",
    "XlsxWriter <4,>=0.9.6 ; extra == 'excel'",
    "pytablereader <2,>=0.31.3 ; extra == 'from'",
    "dominate <3,>=2.1.5 ; extra == 'html'",
    "loguru <1,>=0.4.1 ; extra == 'logging'",
    "pandas <3,>=0.25.3 ; extra == 'pandas'",
    "SimpleSQLite <2,>=1.3.2 ; extra == 'sqlite'",
    "pandas <3,>=0.25.3 ; extra == 'test'",
    "XlsxWriter <4,>=0.9.6 ; extra == 'test'",
    "beautifulsoup4 >=4.10 ; extra == 'test'",
    "toml <1,>=0.9.3 ; extra == 'test'",
    "pytablewriter-altcol-theme <1,>=0.1.0 ; extra == 'test'",
    "pytest-md-report >=0.4.1 ; extra == 'test'",
    "pytablereader <2,>=0.31.3 ; extra == 'test'",
    "SimpleSQLite <2,>=1.3.2 ; extra == 'test'",
    "dominate <3,>=2.1.5 ; extra == 'test'",
    "pytablewriter-altrow-theme <1,>=0.2.0 ; extra == 'test'",
    "loguru <1,>=0.4.1 ; extra == 'test'",
    "xlwt ; extra == 'test'",
    "PyYAML <7,>=3.11 ; extra == 'test'",
    "elasticsearch <9,>=8.0.1 ; extra == 'test'",
    "tablib >=3.2.0 ; extra == 'test'",
    "pytablereader[excel,sqlite] >=0.31.3 ; extra == 'test'",
    "simplejson <4,>=3.8.1 ; extra == 'test'",
    "sqliteschema >=1.3.0 ; extra == 'test'",
    "pytest >=6.0.1 ; extra == 'test'",
    "pytablewriter-altrow-theme <1,>=0.2.0 ; extra == 'theme'",
    "pytablewriter-altcol-theme <1,>=0.1.0 ; extra == 'theme'",
    "toml <1,>=0.9.3 ; extra == 'toml'",
    "PyYAML <7,>=3.11 ; extra == 'yaml'"
  ],
  "requires_python": ">=3.7",
  "summary": "pytablewriter is a python library to write a table in various formats: asciidoc / csv / elasticsearch / html / javascript / json / latex / ldjson / ltsv / markdown / mediawiki / numpy / excel / pandas / python / restructuredtext / sqlite / toml / tsv / yaml.",
  "version": "1.2.0",
  "releases": [],
  "developers": [
    "tsuyoshi.hombashi@gmail.com",
    "tsuyoshi_hombashi"
  ],
  "kwds": "pytablewriter write_table unicodetablewriter markdowntablewriter table_format",
  "license_kwds": "mit license",
  "libtype": "pypi",
  "id": "pypi_pytablewriter",
  "homepage": "https://github.com/thombashi/pytablewriter",
  "release_count": 125,
  "dependency_ids": [
    "pypi_beautifulsoup4",
    "pypi_dataproperty",
    "pypi_dominate",
    "pypi_elasticsearch",
    "pypi_loguru",
    "pypi_mbstrdecoder",
    "pypi_pandas",
    "pypi_pathvalidate",
    "pypi_pytablereader",
    "pypi_pytablewriter_altcol_theme",
    "pypi_pytablewriter_altrow_theme",
    "pypi_pytest",
    "pypi_pytest_md_report",
    "pypi_pyyaml",
    "pypi_setuptools",
    "pypi_simplejson",
    "pypi_simplesqlite",
    "pypi_sphinx",
    "pypi_sphinx_rtd_theme",
    "pypi_sqliteschema",
    "pypi_tabledata",
    "pypi_tablib",
    "pypi_tcolorpy",
    "pypi_toml",
    "pypi_typepy",
    "pypi_xlsxwriter",
    "pypi_xlwt"
  ],
  "documentation_summary": "Pytablewriter is a Python library designed for writing tables in a wide range of formats including AsciiDoc, CSV, Elasticsearch, HTML, JavaScript, JSON, LaTeX, LDJSON, LTSV, Markdown, MediaWiki, NumPy, Excel, Pandas, Python, reStructuredText, SQLite, TOML, TSV, and YAML. It offers features like automatic table cell formatting, customization of table cell styles, and the ability to write tables to various streams. The library supports installation via pip, conda, and apt, and provides examples for writing tables in different formats and styles. It also includes support for multibyte characters, multiprocessing for handling large data sets efficiently, and rendering tables in Jupyter Notebooks. Pytablewriter is licensed under the MIT license and is available for contribution and use on GitHub.",
  "embedding": [
    -0.007976267486810684,
    0.01552100945264101,
    0.004534501116722822,
    -0.035218074917793274,
    0.009535328485071659,
    0.01458835694938898,
    -0.023692160844802856,
    -0.02604467235505581,
    0.006935733836144209,
    -0.014282112941145897,
    0.0236643198877573,
    0.025042418390512466,
    -0.0421224907040596,
    0.03608112782239914,
    -0.01317545771598816,
    0.018082324415445328,
    0.015660211443901062,
    -0.0071619367226958275,
    0.0012380267726257443,
    0.007844026200473309,
    0.01564629189670086,
    -0.011010868474841118,
    -0.029705680906772614,
    -0.009152524173259735,
    -0.010934308171272278,
    0.03697201982140541,
    -0.003939413465559483,
    -0.019209859892725945,
    -0.009500528685748577,
    0.04373723268508911,
    0.03134826198220253,
    -0.011115270666778088,
    -0.008484354242682457,
    -0.038865163922309875,
    -0.03602544590830803,
    -0.020657559856772423,
    0.007127136457711458,
    -0.005769918207079172,
    0.027520211413502693,
    -0.004885985981673002,
    -0.004350058734416962,
    -0.0017652538372203708,
    0.0025526145473122597,
    0.02704692631959915,
    -0.024457771331071854,
    0.004517101217061281,
    0.01663462445139885,
    -0.021130844950675964,
    0.0013389481464400887,
    0.004979947116225958,
    0.026754600927233696,
    0.002253330545499921,
    -0.008129389956593513,
    -0.009591009467840195,
    0.013439941219985485,
    -0.007287218701094389,
    -0.0036366491112858057,
    0.050307560712099075,
    -0.030095446854829788,
    -0.009201244451105595,
    0.023719999939203262,
    -0.013084976933896542,
    -0.015674130991101265,
    -0.006556408479809761,
    -0.00012876173423137516,
    -0.015590610913932323,
    -0.03140394389629364,
    0.00801106821745634,
    0.011588556692004204,
    -0.0014642297755926847,
    0.022341901436448097,
    0.035747043788433075,
    -0.001070114434696734,
    -0.00824075099080801,
    0.03468910977244377,
    -0.03404878079891205,
    -0.027464531362056732,
    0.008359072729945183,
    -0.03037385083734989,
    -0.011289272457361221,
    0.0018235446186736226,
    -0.018736572936177254,
    0.01659286394715309,
    0.0025943750515580177,
    0.02895399183034897,
    0.019279461354017258,
    -0.018861854448914528,
    0.027492372319102287,
    -0.02355295792222023,
    -0.008254671469330788,
    0.007948427461087704,
    0.020615799352526665,
    0.012382007203996181,
    0.03819699585437775,
    0.00475722411647439,
    0.050363242626190186,
    0.015618450939655304,
    0.029260234907269478,
    -0.0018583451164886355,
    -0.0410645566880703,
    0.000910032307729125,
    0.027575893327593803,
    -0.0010579342488199472,
    -0.01684342697262764,
    -0.031181221827864647,
    0.0026465756818652153,
    0.013446901924908161,
    -0.0013076276518404484,
    0.004962547216564417,
    0.017497677356004715,
    -0.004691103473305702,
    0.027269648388028145,
    0.006131842732429504,
    -0.011205751448869705,
    -0.01912633888423443,
    -0.010085176676511765,
    0.04137079790234566,
    -0.023636478930711746,
    -0.012388967908918858,
    0.001007473561912775,
    -0.0011118750553578138,
    0.013064096681773663,
    0.023566879332065582,
    -0.04098103567957878,
    -0.003928973339498043,
    0.00178352405782789,
    -0.011212711222469807,
    0.00526531133800745,
    0.009549248963594437,
    -0.020295634865760803,
    0.02495889738202095,
    0.009730211459100246,
    0.010781185701489449,
    -0.008456514216959476,
    -0.0004169531457591802,
    -0.01798488385975361,
    -0.008707077242434025,
    -0.01585509441792965,
    -0.03416014090180397,
    -0.02231406234204769,
    0.015437488444149494,
    0.03104201890528202,
    -0.0003169017727486789,
    -0.006803492084145546,
    -0.010829905979335308,
    0.007614342961460352,
    0.012757852673530579,
    -0.014992042444646358,
    0.004384859465062618,
    0.013565223664045334,
    0.019780587404966354,
    0.003199903294444084,
    -0.015980375930666924,
    -2.6657704438548535e-05,
    -0.017859602347016335,
    0.01307801716029644,
    0.0036784096155315638,
    0.005115669220685959,
    -0.01188088022172451,
    -0.008665316738188267,
    -0.00858179572969675,
    0.008797558955848217,
    0.008867159485816956,
    -0.008310352452099323,
    0.005390592850744724,
    0.04061910882592201,
    0.02953863888978958,
    0.0015860314015299082,
    -0.002267250558361411,
    -0.0007856205920688808,
    0.0022080899216234684,
    0.015618450939655304,
    -0.038865163922309875,
    -0.018082324415445328,
    0.0012632571160793304,
    0.000753865169826895,
    0.014017629437148571,
    0.024513451382517815,
    -0.00281535810790956,
    0.018625210970640182,
    -0.005529794842004776,
    0.00891588069498539,
    0.007509941700845957,
    0.04362586885690689,
    -0.008052828721702099,
    -0.0395333357155323,
    0.011734718456864357,
    -0.010015575215220451,
    0.02303791232407093,
    0.00907596293836832,
    0.030123287811875343,
    0.05016835778951645,
    0.010210458189249039,
    -0.03321357071399689,
    -0.5986794233322144,
    -0.03716690093278885,
    -0.013272899203002453,
    -0.018165845423936844,
    0.02412368543446064,
    0.006034401711076498,
    -0.0006063982145860791,
    0.034494224935770035,
    -0.01552100945264101,
    0.027130447328090668,
    -0.011999201960861683,
    0.006775651592761278,
    0.013015375472605228,
    -0.007906666956841946,
    -0.002456913236528635,
    -0.020782841369509697,
    0.00930564571171999,
    -0.007245457731187344,
    -0.008595716208219528,
    0.03452206775546074,
    -0.015771573409438133,
    0.03867028281092644,
    -0.009570129215717316,
    -0.008178110234439373,
    0.002938899677246809,
    0.014435235410928726,
    -0.00044044345850124955,
    0.005300111602991819,
    0.003883732482790947,
    -0.0007360299350693822,
    -0.011630317196249962,
    0.0280770193785429,
    0.0020097270607948303,
    -0.04267929866909981,
    0.040117982774972916,
    0.010467981919646263,
    -0.00819203071296215,
    0.029232395812869072,
    0.018750494346022606,
    0.04220601171255112,
    -0.009027241729199886,
    -0.03140394389629364,
    -0.020866362378001213,
    0.01653718389570713,
    0.0008769718697294593,
    0.009117723442614079,
    0.005213110242038965,
    0.004872065968811512,
    0.012277605943381786,
    -0.0073150587268173695,
    -0.02241150289773941,
    -0.0012858774280175567,
    0.01836072839796543,
    -0.016147417947649956,
    0.027742935344576836,
    0.03747314587235451,
    0.010850786231458187,
    -0.014713638462126255,
    -0.011609436944127083,
    0.0001395281433360651,
    0.005602875724434853,
    -0.0015903814928606153,
    0.014671877957880497,
    -0.03404878079891205,
    -0.008860199712216854,
    -0.011296233162283897,
    0.008150270208716393,
    -0.0197527464479208,
    -0.02463873289525509,
    -0.020295634865760803,
    0.017664719372987747,
    -0.014205551706254482,
    0.016286620870232582,
    -0.04128727689385414,
    0.011616396717727184,
    0.06314197182655334,
    0.009973814710974693,
    0.019878027960658073,
    0.008129389956593513,
    0.013725305907428265,
    0.00927780568599701,
    0.0014024589909240603,
    -0.018987135961651802,
    -0.017845680937170982,
    0.04565821588039398,
    0.003290384542196989,
    -0.019878027960658073,
    0.006093562580645084,
    0.02094988338649273,
    -0.006385886110365391,
    0.012500328943133354,
    0.036832816898822784,
    0.004447500221431255,
    -0.022731667384505272,
    -0.0034591667354106903,
    0.02380352094769478,
    -0.0007199347601272166,
    -0.004701543599367142,
    -0.01201312243938446,
    -0.02817445993423462,
    -0.013238099403679371,
    -0.023942723870277405,
    0.02193821594119072,
    -0.008519154973328114,
    -0.014490915462374687,
    0.006671250332146883,
    -0.018444249406456947,
    0.0007904056692495942,
    0.0034539466723799706,
    -0.01348866242915392,
    -0.022216619923710823,
    -0.03037385083734989,
    -0.00907596293836832,
    -0.016773827373981476,
    0.018291126936674118,
    -0.028313662856817245,
    0.060079533606767654,
    0.00873491819947958,
    -0.00816419068723917,
    0.0035235476680099964,
    0.005293151363730431,
    0.004256097599864006,
    -0.003302564611658454,
    -0.0021263088565319777,
    0.0076700234785676,
    0.03867028281092644,
    0.01606389693915844,
    -0.012834413908421993,
    -0.03056873381137848,
    0.005856919102370739,
    -0.002610035240650177,
    0.010300938971340656,
    0.025696666911244392,
    -0.013551303185522556,
    -0.010467981919646263,
    -0.003800211474299431,
    0.03240619972348213,
    0.002456913236528635,
    0.0038941726088523865,
    0.01055846270173788,
    0.011873920448124409,
    -0.0019279461121186614,
    -0.0031111619900912046,
    -0.0038384918589144945,
    0.005049548111855984,
    -0.001847904990427196,
    -0.023594718426465988,
    0.021618051454424858,
    -0.00982765294611454,
    0.009451807476580143,
    -0.02959432080388069,
    -0.007565622217953205,
    -0.011518956162035465,
    0.017915282398462296,
    0.026531878858804703,
    -0.010809025727212429,
    -0.03015112690627575,
    -0.011609436944127083,
    -0.010934308171272278,
    0.0005220070597715676,
    -0.01746983639895916,
    0.008310352452099323,
    -0.008087629452347755,
    0.010140856727957726,
    -0.025877630338072777,
    0.00420041661709547,
    -0.013391220942139626,
    0.035802725702524185,
    0.006751291453838348,
    -0.026142112910747528,
    -0.004701543599367142,
    -0.004360498860478401,
    -0.0015642811777070165,
    0.010092136450111866,
    -0.009862453676760197,
    0.006688650231808424,
    0.017664719372987747,
    0.003925492987036705,
    0.03290732577443123,
    0.0017730839317664504,
    -0.00782314594835043,
    0.009249964728951454,
    -0.011115270666778088,
    -0.03583056479692459,
    0.001718273269943893,
    0.010245258919894695,
    -0.011372793465852737,
    0.013892347924411297,
    0.0017356735188513994,
    0.012709131464362144,
    -0.007074935827404261,
    0.010092136450111866,
    -0.01596645638346672,
    0.0053871129639446735,
    0.016049977391958237,
    -0.0028814789839088917,
    -0.026336995884776115,
    0.0016817327123135328,
    -0.0032660241704434156,
    0.023956643417477608,
    0.003506147302687168,
    0.011289272457361221,
    -0.004809425212442875,
    -0.028049178421497345,
    -0.0012032262748107314,
    -0.00979981292039156,
    0.02423504739999771,
    -0.003626208985224366,
    0.005926520098000765,
    0.013384261168539524,
    0.04624286666512489,
    -0.02178509533405304,
    -0.030902817845344543,
    0.006110962480306625,
    0.006424166727811098,
    0.020574038848280907,
    -0.005634196102619171,
    0.0024238526821136475,
    -0.0066782101057469845,
    0.01203400269150734,
    0.014122030697762966,
    0.005512394476681948,
    -0.0015373107744380832,
    -0.010878627188503742,
    0.007871866226196289,
    0.006626009475439787,
    7.31897380319424e-05,
    0.02735316939651966,
    -0.01071158517152071,
    -0.02085244096815586,
    -0.014337793923914433,
    -0.002945859916508198,
    0.013753145933151245,
    -0.026893803849816322,
    0.03020680882036686,
    -0.004444019868969917,
    0.038976527750492096,
    -0.016495423391461372,
    0.021283967420458794,
    -0.03435502573847771,
    -0.016620704904198647,
    0.014421314932405949,
    0.02209133841097355,
    -0.03493967279791832,
    0.013794906437397003,
    0.026949483901262283,
    0.023831361904740334,
    0.010252218693494797,
    -0.012354167178273201,
    -0.010113016702234745,
    4.0373983210884035e-05,
    0.029121033847332,
    -0.029984084889292717,
    0.01258384995162487,
    0.003290384542196989,
    -0.01216624490916729,
    -0.0023490318562835455,
    -0.00566551648080349,
    0.05431657284498215,
    0.019878027960658073,
    -0.001799184363335371,
    -0.03457774594426155,
    0.020212113857269287,
    0.027729013934731483,
    0.020713239908218384,
    -0.036164648830890656,
    -0.0013659184332937002,
    -0.03480046987533569,
    -0.0040716552175581455,
    -0.01055846270173788,
    -0.02136748842895031,
    -0.02069932036101818,
    0.012542089447379112,
    -0.009632769972085953,
    0.006257124710828066,
    0.013196337968111038,
    -0.02522338181734085,
    0.056543804705142975,
    -0.011685998179018497,
    -0.006462447345256805,
    -0.03705554082989693,
    -0.034494224935770035,
    0.03906004875898361,
    0.01224280521273613,
    -0.01055846270173788,
    -0.016885187476873398,
    -0.021437089890241623,
    0.011609436944127083,
    -0.01824936643242836,
    -0.004771144594997168,
    0.004238697234541178,
    -0.00028101381030865014,
    0.005025187972933054,
    0.00930564571171999,
    -0.017135752364993095,
    -0.008317312225699425,
    0.05317511782050133,
    -0.004503180738538504,
    0.013272899203002453,
    0.0020323474891483784,
    0.014490915462374687,
    0.0009335225913673639,
    -0.016732066869735718,
    -0.006887013092637062,
    0.05142117664217949,
    -0.0017574237426742911,
    0.012326326221227646,
    -0.0025386943016201258,
    -0.008087629452347755,
    -0.017762159928679466,
    0.001945346244610846,
    -0.0358862467110157,
    -0.012249765917658806,
    -0.026531878858804703,
    -0.008936760947108269,
    0.002930199494585395,
    0.011045669205486774,
    0.02142317034304142,
    0.011692957952618599,
    -0.012597770430147648,
    -0.034494224935770035,
    -0.026587558910250664,
    -0.02068539895117283,
    0.022550703957676888,
    0.025808028876781464,
    0.02889830991625786,
    0.0001029876439133659,
    0.004979947116225958,
    -0.031431786715984344,
    -0.006170123349875212,
    -0.03157098591327667,
    0.004346578847616911,
    0.012117523699998856,
    -0.0010692444629967213,
    -0.0019436063012108207,
    0.002674416173249483,
    0.006239724345505238,
    0.006194483954459429,
    0.013196337968111038,
    0.017080070450901985,
    -0.01695478893816471,
    -0.014978122897446156,
    -0.002909319242462516,
    -0.022968310862779617,
    -0.009368286468088627,
    -0.022244460880756378,
    0.014407394453883171,
    -0.013182418420910835,
    0.029705680906772614,
    0.00855395570397377,
    0.053035918623209,
    0.0061562033370137215,
    0.006431126967072487,
    -0.014108111150562763,
    -0.009451807476580143,
    0.01406634971499443,
    0.0066782101057469845,
    0.022160939872264862,
    -0.008957641199231148,
    0.03338061273097992,
    0.02942727692425251,
    -0.011532875709235668,
    0.010481901466846466,
    0.02406800538301468,
    0.03338061273097992,
    0.009319566190242767,
    0.015326127409934998,
    -0.018165845423936844,
    0.0016608524601906538,
    -0.023956643417477608,
    0.012952734716236591,
    0.027019085362553596,
    -0.027255728840827942,
    -0.011818239465355873,
    0.0021228287369012833,
    0.008129389956593513,
    -0.04142647981643677,
    -0.014838920906186104,
    0.010064296424388885,
    0.001706963055767119,
    0.0161195769906044,
    -0.009423967450857162,
    -0.02319103293120861,
    -0.008379952982068062,
    0.020991643890738487,
    -0.02708868682384491,
    0.008303392678499222,
    0.012458568438887596,
    0.007892746478319168,
    0.017970962449908257,
    -0.011797359213232994,
    0.01579941436648369,
    -0.03196075186133385,
    0.007621303200721741,
    0.028842629864811897,
    -0.044795166701078415,
    -0.035747043788433075,
    -0.0033686854876577854,
    0.01087166741490364,
    -0.021534530445933342,
    -0.008519154973328114,
    -0.011414553970098495,
    -0.017748240381479263,
    0.008331232704222202,
    -0.001609521801583469,
    -0.012117523699998856,
    -0.0024412530474364758,
    -0.04409915581345558,
    -5.209195296629332e-05,
    -0.010119976475834846,
    0.0019053258001804352,
    0.0161195769906044,
    0.005133069586008787,
    0.030707934871315956,
    -0.015604531392455101,
    -0.007280258461833,
    0.003128562355414033,
    -0.02125612646341324,
    0.006385886110365391,
    0.012542089447379112,
    0.0023751321714371443,
    -0.0061979638412594795,
    -0.010718544945120811,
    -0.012730011716485023,
    0.0052305106073617935,
    -0.03145962581038475,
    0.008651397190988064,
    -0.0379464328289032,
    0.01398978941142559,
    -0.005926520098000765,
    -0.0006146632949821651,
    0.025501783937215805,
    -0.013140657916665077,
    0.020100751891732216,
    0.024722253903746605,
    0.0029354197904467583,
    0.011630317196249962,
    0.01773431897163391,
    0.0014964202418923378,
    0.003967253491282463,
    0.009869413450360298,
    0.04668831080198288,
    0.004273497965186834,
    0.00852611567825079,
    0.005206150468438864,
    -0.017595117911696434,
    0.011992242187261581,
    0.024555211886763573,
    0.0171496719121933,
    0.019683146849274635,
    0.0007168896845541894,
    -0.02271774783730507,
    -0.01260473020374775,
    0.0018374648643657565,
    0.021242206916213036,
    0.004106455482542515,
    -0.0010544542456045747,
    0.015882935374975204,
    -0.0012719571823254228,
    -0.002829278353601694,
    0.026030750945210457,
    0.012138403952121735,
    -0.022689906880259514,
    -0.007238497957587242,
    0.000562897592317313,
    -0.005126109346747398,
    -0.04362586885690689,
    0.01929338090121746,
    -0.033659014850854874,
    -0.021381409838795662,
    -0.025654906406998634,
    0.007864906452596188,
    -0.004217816982418299,
    0.0013676584931090474,
    0.01078814547508955,
    0.008957641199231148,
    -0.0012188864639028907,
    -0.013544343411922455,
    0.016551103442907333,
    0.004590182099491358,
    -0.01387842744588852,
    0.009298685938119888,
    0.017497677356004715,
    0.018847934901714325,
    0.004363979212939739,
    0.0013415581779554486,
    0.024652652442455292,
    0.004259577486664057,
    0.00657728873193264,
    0.010697664692997932,
    -0.01678774692118168,
    -0.013356420211493969,
    -0.010878627188503742,
    -0.024137606844305992,
    -0.006121402606368065,
    -0.00019520889327395707,
    0.004691103473305702,
    -0.030039766803383827,
    0.01731671392917633,
    0.016926947981119156,
    0.01680166646838188,
    0.01426819246262312,
    -0.025028498843312263,
    -0.01367658469825983,
    -0.014825000427663326,
    0.025543544441461563,
    0.005564595106989145,
    0.002829278353601694,
    -0.019571784883737564,
    -0.03446638584136963,
    0.05526314675807953,
    -0.01096910797059536,
    0.033714696764945984,
    0.022216619923710823,
    0.014142910949885845,
    0.01752551645040512,
    0.006622529588639736,
    0.02049051783978939,
    0.022160939872264862,
    -0.01237504743039608,
    0.010593263432383537,
    -0.02246718294918537,
    -0.05531882867217064,
    0.0001669335033511743,
    0.03357549384236336,
    0.020198192447423935,
    0.010266139172017574,
    0.017511596903204918,
    -0.035218074917793274,
    0.029037512838840485,
    0.019724907353520393,
    0.007809225469827652,
    0.01076030544936657,
    -0.01777607947587967,
    -0.023149272426962852,
    -0.011992242187261581,
    -0.03421582281589508,
    -0.03343629091978073,
    -0.007384659722447395,
    -0.005776877980679274,
    -0.0020532277412712574,
    0.017024390399456024,
    -0.03145962581038475,
    -0.021033404394984245,
    0.020142512395977974,
    -0.02516769990324974,
    0.05543018877506256,
    0.014838920906186104,
    0.006246684584766626,
    0.023594718426465988,
    -0.004430099856108427,
    0.014783239923417568,
    -0.00635804608464241,
    -0.0028431983664631844,
    -0.009939013980329037,
    -0.004343098495155573,
    0.024833615869283676,
    0.0006455487455241382,
    -0.024610891938209534,
    -0.015576690435409546,
    -0.018374647945165634,
    0.007621303200721741,
    -0.022481104359030724,
    0.012249765917658806,
    -0.020142512395977974,
    -0.004823345225304365,
    -0.04877633973956108,
    0.026114273816347122,
    -0.013321620412170887,
    0.026295235380530357,
    -0.031849391758441925,
    -0.01222192496061325,
    0.04145431891083717,
    -0.011136150918900967,
    -0.007767464965581894,
    0.03235051780939102,
    0.016606785356998444,
    0.0008691417751833797,
    0.004677182994782925,
    -0.026601480320096016,
    -0.02775685489177704,
    -0.05801934376358986,
    -0.03477263078093529,
    0.003533987794071436,
    0.006726930849254131,
    0.008122430182993412,
    -0.01034966018050909,
    -0.0019714466761797667,
    0.04098103567957878,
    0.019836267456412315,
    -0.0014137690886855125,
    -0.02058795839548111,
    -0.012277605943381786,
    0.03816915675997734,
    -0.04794112965464592,
    0.008720997720956802,
    0.008616596460342407,
    -0.0022846509236842394,
    0.016230938956141472,
    -0.012270646169781685,
    -0.017873521894216537,
    -0.0013024075888097286,
    -0.016704225912690163,
    -0.015061643905937672,
    0.0004080355283804238,
    -0.015632370486855507,
    -0.017302794381976128,
    -0.014323873445391655,
    -0.003967253491282463,
    -0.010648943483829498,
    -0.01893145591020584,
    0.006932253483682871,
    0.015980375930666924,
    -0.003507887478917837,
    -0.01510340441018343,
    -0.0004554511688183993,
    -0.004527541343122721,
    0.021381409838795662,
    0.009479648433625698,
    0.0066782101057469845,
    0.00655292859300971,
    0.042345210909843445,
    -0.009347406215965748,
    0.006058761849999428,
    0.0008935020887292922,
    0.00017617737466935068,
    -0.02853638492524624,
    -0.006232764106243849,
    -0.017553357407450676,
    0.008073708973824978,
    0.030011925846338272,
    -0.011950481683015823,
    -0.03811347484588623,
    -0.008881079964339733,
    -0.005787318106740713,
    0.017706479877233505,
    0.003455686615779996,
    -0.023330235853791237,
    -0.013043216429650784,
    0.007635223213583231,
    0.017302794381976128,
    0.0007168896845541894,
    -0.014560516923666,
    -0.0021993897389620543,
    -0.007245457731187344,
    0.002058447804301977,
    0.014755399897694588,
    -0.026476198807358742,
    0.007781384978443384,
    0.009451807476580143,
    0.00653900858014822,
    -0.013196337968111038,
    -0.03129258379340172,
    0.005494994111359119,
    -0.021715493872761726,
    0.023566879332065582,
    -0.004471860360354185,
    0.02636483684182167,
    -0.005989160854369402,
    -0.01094126794487238,
    -0.016314459964632988,
    0.022968310862779617,
    0.018541689962148666,
    -0.008052828721702099,
    -0.011999201960861683,
    0.02917671389877796,
    0.012361126951873302,
    -0.014936361461877823,
    0.005282711237668991,
    -0.02463873289525509,
    -0.007885786704719067,
    -0.00036018487298861146,
    -0.03212779387831688,
    -0.024875376373529434,
    -0.01435171440243721,
    0.020420916378498077,
    0.001827024738304317,
    -0.020991643890738487,
    -0.031849391758441925,
    -0.02037915587425232,
    -0.03566352277994156,
    -0.009500528685748577,
    -0.031431786715984344,
    0.01866697147488594,
    0.017609037458896637,
    0.021715493872761726,
    0.01596645638346672,
    0.01815192587673664,
    0.0021593691781163216,
    0.019432581961154938,
    -0.0018496450502425432,
    -0.00979981292039156,
    0.015896854922175407,
    0.011978321708738804,
    -0.007426420226693153,
    -0.009771971963346004,
    -0.0327681228518486,
    -0.013168497942388058,
    0.02069932036101818,
    -0.009229084476828575,
    -0.009570129215717316,
    0.01515908446162939,
    0.015270446427166462,
    -0.03145962581038475,
    -0.008129389956593513,
    0.012890093959867954,
    0.0032486238051205873,
    0.011602477170526981,
    0.007558661978691816,
    -0.0055367546156048775,
    -0.0022498504258692265,
    0.0042456574738025665,
    0.0032521039247512817,
    0.022648146376013756,
    -0.0011136149987578392,
    0.0024969337973743677,
    -0.011518956162035465,
    -0.004872065968811512,
    -0.015242606401443481,
    -0.023204954341053963,
    0.021047323942184448,
    0.013384261168539524,
    0.016356220468878746,
    -0.004959066864103079,
    0.005390592850744724,
    0.04404347389936447,
    -0.012395927682518959,
    -0.010600223205983639,
    -0.03176587074995041,
    0.030011925846338272,
    -0.04020150378346443,
    -0.007231537718325853,
    0.02786821685731411,
    0.0016451922710984945,
    -0.010245258919894695,
    0.036108966916799545,
    0.04529629275202751,
    0.004826825112104416,
    -0.0038524121046066284,
    0.0027248768601566553,
    -0.01893145591020584,
    -0.005087828729301691,
    0.00765610346570611,
    0.013725305907428265,
    -0.040786150842905045,
    -0.011372793465852737,
    -0.0061562033370137215,
    -0.0028779988642781973,
    -0.0006242334493435919,
    -0.02391488291323185,
    0.008748838678002357,
    -0.03853107988834381,
    -0.0098763732239604,
    0.008338192477822304,
    0.004885985981673002,
    0.0010962148662656546,
    0.010126937180757523,
    0.019070656970143318,
    -0.013439941219985485,
    0.00819203071296215,
    0.15624019503593445,
    0.0027683773078024387,
    0.04922178387641907,
    0.02028171345591545,
    0.00837299320846796,
    0.035218074917793274,
    0.0006420686841011047,
    -0.004948626738041639,
    0.006284964736551046,
    0.019530024379491806,
    0.010133896954357624,
    -0.01279265247285366,
    0.008957641199231148,
    -0.003213823540136218,
    0.006145763210952282,
    -0.0327681228518486,
    -0.03332493081688881,
    -0.04095319285988808,
    -0.022188780829310417,
    -0.01642582193017006,
    -0.007224577479064465,
    -0.025487864390015602,
    -0.014309953898191452,
    -0.028870470821857452,
    0.024095846340060234,
    -0.0037410506047308445,
    -0.0431525819003582,
    0.003807171480730176,
    0.032684601843357086,
    0.0074681807309389114,
    -0.01585509441792965,
    0.008018027991056442,
    -0.021381409838795662,
    -0.007927547208964825,
    -0.018987135961651802,
    -0.025362582877278328,
    0.02231406234204769,
    -0.005007787607610226,
    0.022996149957180023,
    0.009194284677505493,
    -0.014393474906682968,
    -0.03708337992429733,
    -0.0022428904194384813,
    -0.05801934376358986,
    0.019780587404966354,
    -0.01657894439995289,
    -0.017873521894216537,
    0.024569131433963776,
    -0.0022742107976228,
    0.012020082212984562,
    -0.024165445938706398,
    -0.017428075894713402,
    0.026587558910250664,
    0.0070296949706971645,
    0.001602561678737402,
    -0.012027042917907238,
    -0.0014563996810466051,
    0.026490118354558945,
    0.013690505176782608,
    -0.0014903300907462835,
    -0.006806971970945597,
    0.009062042459845543,
    -0.018318967893719673,
    0.021618051454424858,
    -0.04184408485889435,
    0.010126937180757523,
    0.00691485358402133,
    0.011296233162283897,
    -0.01627269946038723,
    0.00044544602860696614,
    -0.02781253680586815,
    -0.01986410841345787,
    -0.014811079949140549,
    0.00012723922554869205,
    -0.030290329828858376,
    -0.021186526864767075,
    0.048581454902887344,
    -0.00182006461545825,
    -0.007245457731187344,
    0.040479905903339386,
    -0.02121436595916748,
    -0.013008415699005127,
    -0.009048121981322765,
    0.0179292019456625,
    -0.011637276969850063,
    -0.03159882873296738,
    -0.00491382647305727,
    -0.016286620870232582,
    -0.0027544572949409485,
    -0.011414553970098495,
    -0.012465528212487698,
    -0.018291126936674118,
    0.0030189407989382744,
    -0.012201044708490372,
    0.030346009880304337,
    0.009542289189994335,
    0.006900933105498552,
    0.008567876182496548,
    -0.008686196990311146,
    -0.015785492956638336,
    -0.0244299303740263,
    0.06024657562375069,
    0.016606785356998444,
    -0.021854694932699203,
    -0.020365234464406967,
    0.007322018966078758,
    -0.008818439207971096,
    0.016968708485364914,
    0.032740283757448196,
    -0.014296033419668674,
    0.006765211466699839,
    -0.03229483589529991,
    0.03104201890528202,
    -0.0008047609007917345,
    0.007054055575281382,
    0.005307071842253208,
    -0.010050375945866108,
    -0.010043416172266006,
    0.016773827373981476,
    -0.016940869390964508,
    0.008929801173508167,
    -0.03713906183838844,
    0.022731667384505272,
    -0.015326127409934998,
    -0.02813269942998886,
    -0.018068404868245125,
    -0.010913427919149399,
    0.015688052400946617,
    -0.008950681425631046,
    -0.015200845897197723,
    0.013474741950631142,
    -0.01699654944241047,
    0.014421314932405949,
    -0.005957840476185083,
    -0.009027241729199886,
    -0.013502582907676697,
    -0.011505035683512688,
    -0.0016182218678295612,
    -0.012883134186267853,
    0.006406766828149557,
    -0.006859172601252794,
    -0.015548850409686565,
    -0.0033913059160113335,
    -0.012507288716733456,
    0.016203099861741066,
    -0.01385754719376564,
    -0.0063093253411352634,
    -0.0040507749654352665,
    0.020045071840286255,
    -0.023302394896745682,
    -0.014254272915422916,
    -0.019530024379491806,
    0.008839319460093975,
    -0.011755598708987236,
    0.016940869390964508,
    -0.028508545830845833,
    -0.013836666941642761,
    -0.025710588321089745,
    0.0013067576801404357,
    -0.00037367004551924765,
    -0.028814788907766342,
    0.008414753712713718,
    0.029093192890286446,
    0.0005685526994057,
    -0.027784695848822594,
    -0.0065285684540867805,
    -0.17639662325382233,
    0.022703826427459717,
    0.002688336418941617,
    -0.03841971978545189,
    0.007976267486810684,
    -0.005978720728307962,
    0.009243004955351353,
    0.01840248890221119,
    -0.0005911730113439262,
    -0.009013322181999683,
    0.026183873414993286,
    0.00254739448428154,
    -0.031320422887802124,
    0.0033617254812270403,
    0.00044892606092616916,
    0.002771857427433133,
    0.024666573852300644,
    0.000191620085388422,
    0.016439741477370262,
    0.01126143243163824,
    0.03816915675997734,
    -0.017706479877233505,
    0.022216619923710823,
    -0.0018392048077657819,
    0.003605328733101487,
    -0.010092136450111866,
    -0.0013424281496554613,
    -0.00675825122743845,
    -0.004054254852235317,
    -0.009660610929131508,
    0.0038176116067916155,
    0.015562769956886768,
    0.009959894232451916,
    -0.006782611832022667,
    0.01720535196363926,
    0.01648150198161602,
    0.01151199545711279,
    -0.03410446271300316,
    -0.010822946205735207,
    0.02786821685731411,
    0.030234647914767265,
    0.01809624396264553,
    -0.0033860858529806137,
    -0.018332887440919876,
    -0.012082722969353199,
    0.01510340441018343,
    0.008874120190739632,
    -0.024875376373529434,
    0.0003719300148077309,
    -0.025181621313095093,
    0.031069859862327576,
    -0.031181221827864647,
    0.011365833692252636,
    0.0014494395582005382,
    0.024471690878272057,
    -0.013196337968111038,
    -0.003199903294444084,
    0.002084548119455576,
    0.02199389785528183,
    -0.003119862172752619,
    -0.022035658359527588,
    -0.026058591902256012,
    0.007349859457463026,
    -0.00016671601042617112,
    -0.026685001328587532,
    -0.003290384542196989,
    -0.02501457743346691,
    0.010857746936380863,
    0.009771971963346004,
    0.01333553995937109,
    -0.014880681410431862,
    0.03098633885383606,
    0.003869812237098813,
    -0.0038350117392838,
    0.008560915477573872,
    -0.0042665377259254456,
    -0.02204957790672779,
    0.01861129142343998,
    0.011651197448372841,
    0.002422112738713622,
    -0.021019484847784042,
    0.03015112690627575,
    -0.0024882336147129536,
    -0.0014329093974083662,
    0.004631942603737116,
    -0.0026918163057416677,
    0.005696836858987808,
    0.004920786712318659,
    -0.018207605928182602,
    -0.013015375472605228,
    0.03020680882036686,
    -0.013620903715491295,
    -0.0055611152201890945,
    -0.00878363847732544,
    0.006806971970945597,
    0.019669225439429283,
    -0.009932054206728935,
    0.006448527332395315,
    0.010050375945866108,
    -0.03218347579240799,
    0.026698920875787735,
    0.005818638484925032,
    -0.014992042444646358,
    -0.005571555346250534,
    0.04362586885690689,
    0.020838521420955658,
    -0.05058596283197403,
    -0.013551303185522556,
    0.02387312240898609,
    0.01794312335550785,
    -0.012180164456367493,
    0.019683146849274635,
    0.01882009394466877,
    -0.0054253931157290936,
    0.012493369169533253,
    0.021339649334549904,
    -0.0149502819404006,
    -0.011999201960861683,
    -0.002114128554239869,
    -0.003793251235038042,
    0.030457371845841408,
    0.00020641028822865337,
    -0.013850587420165539,
    0.008888039737939835,
    0.001579071395099163,
    -0.02053227834403515,
    -0.08775286376476288,
    -0.024402089416980743,
    0.01741415448486805,
    0.029455117881298065,
    -0.017386315390467644,
    -0.025153780356049538,
    -0.010405340231955051,
    0.040591269731521606,
    0.018054483458399773,
    0.01845816895365715,
    -0.01055150292813778,
    -0.027074765413999557,
    -0.010655904188752174,
    0.002862338675186038,
    0.0030259008053690195,
    -0.010641983710229397,
    -0.017177512869238853,
    -0.004325698595494032,
    -0.020935963839292526,
    0.017497677356004715,
    0.0053627523593604565,
    0.005721197463572025,
    -0.010843826457858086,
    -0.0038941726088523865,
    0.00927780568599701,
    0.003841971978545189,
    -0.026740681380033493,
    0.024624813348054886,
    0.007349859457463026,
    0.0032869044225662947,
    -0.01364874467253685,
    -0.024207206442952156,
    0.0015173004940152168,
    -0.019223779439926147,
    0.006810451857745647,
    -0.0019644866697490215,
    -0.030652254819869995,
    -0.024652652442455292,
    0.01756727695465088,
    -0.04880417883396149,
    0.012660411186516285,
    -0.003344325115904212,
    0.010391420684754848,
    -0.020198192447423935,
    -0.014908521436154842,
    -0.002686596242710948,
    -0.031376104801893234,
    0.026657160371541977,
    0.04254009574651718,
    -0.007920587435364723,
    -0.019042817875742912,
    0.003953333478420973,
    -0.021659811958670616,
    -0.013412101194262505,
    0.004624982364475727,
    -0.003918532747775316,
    0.005759478081017733,
    0.028118779882788658,
    -0.0015347007429227233,
    0.0037828111089766026,
    -0.006507687736302614,
    -0.023845281451940536,
    -0.0071410564705729485,
    0.03296300396323204,
    0.0044196597300469875,
    -0.001799184363335371,
    0.03571920469403267,
    -0.008275551721453667,
    0.028007417917251587,
    -0.03073577582836151,
    -0.028926150873303413,
    0.0016156118363142014,
    -0.031181221827864647,
    0.023845281451940536,
    0.006786091718822718,
    0.01845816895365715,
    0.0034835271071642637,
    0.0021785094868391752,
    0.015507089905440807,
    -0.028313662856817245,
    0.0016147418646141887,
    -0.004544941242784262,
    -0.020810680463910103,
    -0.0233998354524374,
    0.03705554082989693,
    0.006090082228183746,
    0.003911572974175215,
    -0.0016130018047988415,
    0.02739492990076542,
    -0.04070262983441353,
    -0.010802065953612328,
    0.011665117926895618,
    0.02147885039448738,
    -0.00798322819173336,
    0.008769718930125237,
    -0.013537382706999779,
    0.007760504726320505,
    -0.01380882691591978,
    -0.0042421771213412285,
    -0.012799613177776337,
    -0.03867028281092644,
    -0.01815192587673664,
    -0.08095981180667877,
    0.007579542230814695,
    0.004217816982418299,
    -0.035691361874341965,
    0.028619907796382904,
    -0.014671877957880497,
    -0.0017722139600664377,
    0.0007486451067961752,
    0.0080597884953022,
    -0.0013415581779554486,
    -0.015507089905440807,
    -0.015200845897197723,
    -0.014080270193517208,
    -0.02449953183531761,
    0.006124882958829403,
    0.015256525948643684,
    0.038976527750492096,
    -0.015674130991101265,
    0.03906004875898361,
    -0.00912468321621418,
    -0.024304648861289024,
    -0.0068348124623298645,
    0.033770374953746796,
    -0.002778817666694522,
    -0.02136748842895031,
    0.005620276089757681,
    0.004510140977799892,
    0.016885187476873398,
    -0.0078022656962275505,
    -0.02309359237551689,
    0.018834015354514122,
    0.002100208308547735,
    -0.005505434237420559,
    -0.008108509704470634,
    -0.0028779988642781973,
    0.0037967313546687365,
    0.0262534748762846,
    0.003688849974423647,
    0.026852043345570564,
    0.036415211856365204,
    -0.01997547037899494,
    -0.01919594034552574,
    0.023051831871271133,
    -0.005488034337759018,
    0.007363779470324516,
    0.011184871196746826,
    0.001715663238428533,
    0.017511596903204918,
    0.007280258461833,
    0.0013789685908704996,
    0.023177113384008408,
    0.004798985086381435,
    -0.019697066396474838,
    -0.007154976949095726,
    0.0029336796142160892,
    -0.01149111520498991,
    0.016885187476873398,
    -0.01591077446937561,
    0.010356619954109192,
    -0.0031163820531219244,
    0.022021736949682236,
    0.02344159595668316,
    -0.01872265338897705,
    0.012528168968856335,
    0.0010561943054199219,
    -0.021771173924207687,
    -0.030847137793898582,
    -0.035802725702524185,
    0.0033217049203813076,
    -0.008853239938616753,
    -0.018026644363999367,
    -0.021618051454424858,
    0.01222192496061325,
    0.016759905964136124,
    0.034327182918787,
    -0.001980146858841181,
    -0.005874319467693567,
    0.021799014881253242,
    -0.01018957793712616,
    0.018291126936674118,
    0.010962148196995258,
    -0.0056933569721877575,
    -0.04134295880794525,
    0.011971361935138702,
    0.035329438745975494,
    0.012103603221476078,
    -0.020935963839292526,
    0.009375247173011303,
    -0.0023403316736221313,
    -0.00033517202246002853,
    0.004955586977303028,
    -0.0011666857171803713,
    -0.0053627523593604565,
    -0.0017191432416439056,
    0.0171496719121933,
    0.011337993666529655,
    -0.026476198807358742,
    -0.015200845897197723,
    0.011066549457609653,
    0.023566879332065582,
    -0.016871267929673195,
    -0.008171150460839272,
    -0.0035513879265636206,
    -0.007976267486810684,
    -0.040312863886356354,
    -0.008679237216711044,
    -0.03098633885383606,
    0.013029295951128006,
    0.020365234464406967,
    0.033770374953746796,
    0.014337793923914433,
    -0.016829507425427437,
    -0.03310220688581467,
    -0.0024882336147129536,
    -0.0020462677348405123,
    0.02069932036101818,
    0.008881079964339733,
    0.01037054043263197,
    0.0009578829631209373,
    0.02334415540099144,
    0.0021872096695005894,
    0.007328979205340147,
    0.03279596194624901,
    -0.018792254850268364,
    0.02984488382935524,
    0.02578018791973591,
    0.011170950718224049,
    -0.01421947218477726,
    0.012646490707993507,
    -0.02984488382935524,
    -0.01146327517926693,
    0.014936361461877823,
    -0.027798615396022797,
    -0.0047676642425358295,
    -0.005414952989667654,
    0.0033391050528734922,
    -0.004423139616847038,
    0.01777607947587967,
    -0.004322218243032694,
    0.076950803399086,
    -0.000905682216398418,
    -0.016203099861741066,
    0.005522834602743387,
    0.010537582449615002,
    0.013349460437893867,
    0.03313004598021507,
    0.006316285580396652,
    -0.01959962584078312,
    -0.02163197286427021,
    -0.011734718456864357,
    -0.0045727817341685295,
    -0.03903220593929291,
    -0.025571385398507118,
    0.007579542230814695,
    0.010648943483829498,
    0.010885586962103844,
    0.02646227739751339,
    -0.019822347909212112,
    0.030011925846338272,
    0.0405634269118309,
    0.01458835694938898,
    0.011470234952867031,
    -0.003897652728483081,
    -0.02636483684182167,
    -0.001102304900996387,
    0.047439999878406525,
    0.00857483595609665,
    0.009103802964091301,
    -0.06520216166973114,
    0.004638902842998505,
    -0.0007290698704309762,
    -0.003928973339498043,
    -0.010669824667274952,
    -0.005373192485421896,
    -0.017135752364993095,
    -0.037250421941280365,
    -0.02256462536752224,
    0.014685798436403275,
    0.01912633888423443,
    0.009890293702483177,
    -0.001994066871702671,
    -0.04014582186937332,
    -0.02121436595916748,
    -0.014630117453634739,
    -0.0327681228518486,
    0.02064363844692707,
    -0.009848533198237419,
    -0.03026248887181282
  ]
}
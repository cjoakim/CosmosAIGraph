{
  "classifiers": [
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "natural language :: english",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "typing :: typed"
  ],
  "description": "# environs: simplified environment variable parsing\n\n[![latest version](https://badgen.net/pypi/v/environs)](https://pypi.org/project/environs/)\n[![build status](https://github.com/marshmallow-code/marshmallow-sqlalchemy/actions/workflows/build-release.yml/badge.svg)](https://github.com/sloria/environs/actions/workflows/build-release.yml)\n[![marshmallow 3 compatible](https://badgen.net/badge/marshmallow/3)](https://marshmallow.readthedocs.io/en/latest/upgrading.html)\n[![black code style](https://badgen.net/badge/code%20style/black/000)](https://github.com/ambv/black)\n\n**environs** is a python library for parsing environment variables.\nit allows you to store configuration separate from your code, as per\n[the twelve-factor app](https://12factor.net/config) methodology.\n\n## contents\n\n- [features](#features)\n- [install](#install)\n- [basic usage](#basic-usage)\n- [supported types](#supported-types)\n- [reading .env files](#reading-env-files)\n  - [reading a specific file](#reading-a-specific-file)\n- [handling prefixes](#handling-prefixes)\n- [variable expansion](#variable-expansion)\n- [validation](#validation)\n- [deferred validation](#deferred-validation)\n- [serialization](#serialization)\n- [defining custom parser behavior](#defining-custom-parser-behavior)\n- [usage with flask](#usage-with-flask)\n- [usage with django](#usage-with-django)\n- [why...?](#why)\n  - [why envvars?](#why-envvars)\n  - [why not os.environ?](#why-not-osenviron)\n  - [why another library?](#why-another-library)\n- [license](#license)\n\n## features\n\n- type-casting\n- read `.env` files into `os.environ` (useful for local development)\n- validation\n- define custom parser behavior\n- framework-agnostic, but integrates well with [flask](#usage-with-flask) and [django](#usage-with-django)\n\n## install\n\n    pip install environs\n\n## basic usage\n\nwith some environment variables set...\n\n```bash\nexport github_user=sloria\nexport max_connections=100\nexport ship_date='1984-06-25'\nexport ttl=42\nexport enable_login=true\nexport github_repos=webargs,konch,ped\nexport github_repo_priority=\"webargs=2,konch=3\"\nexport coordinates=23.3,50.0\nexport log_level=debug\n```\n\nparse them with environs...\n\n```python\nfrom environs import env\n\nenv = env()\nenv.read_env()  # read .env file, if it exists\n# required variables\ngh_user = env(\"github_user\")  # => 'sloria'\nsecret = env(\"secret\")  # => raises error if not set\n\n# casting\nmax_connections = env.int(\"max_connections\")  # => 100\nship_date = env.date(\"ship_date\")  # => datetime.date(1984, 6, 25)\nttl = env.timedelta(\"ttl\")  # => datetime.timedelta(0, 42)\nlog_level = env.log_level(\"log_level\")  # => logging.debug\n\n# providing a default value\nenable_login = env.bool(\"enable_login\", false)  # => true\nenable_feature_x = env.bool(\"enable_feature_x\", false)  # => false\n\n# parsing lists\ngh_repos = env.list(\"github_repos\")  # => ['webargs', 'konch', 'ped']\ncoords = env.list(\"coordinates\", subcast=float)  # => [23.3, 50.0]\n\n# parsing dicts\ngh_repos_priorities = env.dict(\n    \"github_repo_priority\", subcast_values=int\n)  # => {'webargs': 2, 'konch': 3}\n```\n\n## supported types\n\nthe following are all type-casting methods of `env`:\n\n- `env.str`\n- `env.bool`\n- `env.int`\n- `env.float`\n- `env.decimal`\n- `env.list` (accepts optional `subcast` and `delimiter` keyword arguments)\n- `env.dict` (accepts optional `subcast_keys`, `subcast_values` and `delimiter` keyword arguments)\n- `env.json`\n- `env.datetime`\n- `env.date`\n- `env.time`\n- `env.timedelta` (assumes value is an integer in seconds)\n- `env.url`\n- `env.uuid`\n- `env.log_level`\n- `env.path` (casts to a [`pathlib.path`](https://docs.python.org/3/library/pathlib.html))\n- `env.enum` (casts to any given enum type specified in `type` keyword argument, accepts optional `ignore_case` keyword argument)\n\n## reading `.env` files\n\n```bash\n# .env\ndebug=true\nport=4567\n```\n\ncall `env.read_env` before parsing variables.\n\n```python\nfrom environs import env\n\nenv = env()\n# read .env into os.environ\nenv.read_env()\n\nenv.bool(\"debug\")  # => true\nenv.int(\"port\")  # => 4567\n```\n\n### reading a specific file\n\nby default, `env.read_env` will look for a `.env` file in current\ndirectory and (if no .env exists in the cwd) recurse\nupwards until a `.env` file is found.\n\nyou can also read a specific file:\n\n```python\nfrom environs import env\n\nwith open(\".env.test\", \"w\") as fobj:\n    fobj.write(\"a=foo\\n\")\n    fobj.write(\"b=123\\n\")\n\nenv = env()\nenv.read_env(\".env.test\", recurse=false)\n\nassert env(\"a\") == \"foo\"\nassert env.int(\"b\") == 123\n```\n\n## handling prefixes\n\n```python\n# export myapp_host=lolcathost\n# export myapp_port=3000\n\nwith env.prefixed(\"myapp_\"):\n    host = env(\"host\", \"localhost\")  # => 'lolcathost'\n    port = env.int(\"port\", 5000)  # => 3000\n\n# nested prefixes are also supported:\n\n# export myapp_db_host=lolcathost\n# export myapp_db_port=10101\n\nwith env.prefixed(\"myapp_\"):\n    with env.prefixed(\"db_\"):\n        db_host = env(\"host\", \"lolcathost\")\n        db_port = env.int(\"port\", 10101)\n```\n\n## variable expansion\n\n```python\n# export connection_url=https://${user:-sloria}:${password}@${host:-localhost}/\n# export password=secret\n# export year=${current_year:-2020}\n\nfrom environs import env\n\nenv = env(expand_vars=true)\n\nconnection_url = env(\"connection_url\")  # =>'https://sloria:secret@localhost'\nyear = env.int(\"year\")  # =>2020\n```\n\n## validation\n\n```python\n# export ttl=-2\n# export node_env='invalid'\n# export email='^_^'\n\nfrom environs import env\nfrom marshmallow.validate import oneof, length, email\n\nenv = env()\n\n# simple validator\nenv.int(\"ttl\", validate=lambda n: n > 0)\n# => environment variable \"ttl\" invalid: ['invalid value.']\n\n\n# using marshmallow validators\nenv.str(\n    \"node_env\",\n    validate=oneof(\n        [\"production\", \"development\"], error=\"node_env must be one of: {choices}\"\n    ),\n)\n# => environment variable \"node_env\" invalid: ['node_env must be one of: production, development']\n\n# multiple validators\nenv.str(\"email\", validate=[length(min=4), email()])\n# => environment variable \"email\" invalid: ['shorter than minimum length 4.', 'not a valid email address.']\n```\n\n## deferred validation\n\nby default, a validation error is raised immediately upon calling a parser method for an invalid environment variable.\nto defer validation and raise an exception with the combined error messages for all invalid variables, pass `eager=false` to `env`.\ncall `env.seal()` after all variables have been parsed.\n\n```python\n# export ttl=-2\n# export node_env='invalid'\n# export email='^_^'\n\nfrom environs import env\nfrom marshmallow.validate import oneof, email, length, range\n\nenv = env(eager=false)\n\nttl = env.int(\"ttl\", validate=range(min=0, max=100))\nnode_env = env.str(\n    \"node_env\",\n    validate=oneof(\n        [\"production\", \"development\"], error=\"node_env must be one of: {choices}\"\n    ),\n)\nemail = env.str(\"email\", validate=[length(min=4), email()])\n\nenv.seal()\n# environs.envvalidationerror: environment variables invalid: {'ttl': ['must be greater than or equal to 0 and less than or equal to 100.'], 'node_env': ['node_env must be one of: production, development'], 'email': ['shorter than minimum length 4.', 'not a valid email address.']}\n```\n\n`env.seal()` validates all parsed variables and prevents further parsing (calling a parser method will raise an error).\n\n## serialization\n\n```python\n# serialize to a dictionary of simple types (numbers and strings)\nenv.dump()\n# {'coordinates': [23.3, 50.0],\n# 'enable_feature_x': false,\n# 'enable_login': true,\n# 'github_repos': ['webargs', 'konch', 'ped'],\n# 'github_user': 'sloria',\n# 'max_connections': 100,\n# 'myapp_host': 'lolcathost',\n# 'myapp_port': 3000,\n# 'ship_date': '1984-06-25',\n# 'ttl': 42}\n```\n\n## defining custom parser behavior\n\n```python\n# export domain='http://myapp.com'\n# export color=invalid\n\nfrom furl import furl\n\n# register a new parser method for paths\n@env.parser_for(\"furl\")\ndef furl_parser(value):\n    return furl(value)\n\n\ndomain = env.furl(\"domain\")  # => furl('https://myapp.com')\n\n\n# custom parsers can take extra keyword arguments\n@env.parser_for(\"choice\")\ndef choice_parser(value, choices):\n    if value not in choices:\n        raise environs.enverror(\"invalid!\")\n    return value\n\n\ncolor = env.choice(\"color\", choices=[\"black\"])  # => raises enverror\n```\n\n## usage with flask\n\n```python\n# myapp/settings.py\n\nfrom environs import env\n\nenv = env()\nenv.read_env()\n\n# override in .env for local development\ndebug = env.bool(\"flask_debug\", default=false)\n# secret_key is required\nsecret_key = env.str(\"secret_key\")\n```\n\nload the configuration after you initialize your app.\n\n```python\n# myapp/app.py\n\nfrom flask import flask\n\napp = flask(__name__)\napp.config.from_object(\"myapp.settings\")\n```\n\nfor local development, use a `.env` file to override the default\nconfiguration.\n\n```bash\n# .env\ndebug=true\nsecret_key=\"not so secret\"\n```\n\nnote: because environs depends on [python-dotenv](https://github.com/theskumar/python-dotenv),\nthe `flask` cli will automatically read .env and .flaskenv files.\n\n## usage with django\n\nenvirons includes a number of helpers for parsing connection urls. to\ninstall environs with django support:\n\n    pip install environs[django]\n\nuse `env.dj_db_url`, `env.dj_cache_url` and `env.dj_email_url` to parse the `database_url`, `cache_url`\nand `email_url` environment variables, respectively.\n\nfor more details on url patterns, see the following projects that environs is using for converting urls.\n\n- [dj-database-url](https://github.com/jacobian/dj-database-url)\n- [django-cache-url](https://github.com/epicserve/django-cache-url)\n- [dj-email-url](https://github.com/migonzalvar/dj-email-url)\n\nbasic example:\n\n```python\n# myproject/settings.py\nfrom environs import env\n\nenv = env()\nenv.read_env()\n\n# override in .env for local development\ndebug = env.bool(\"debug\", default=false)\n# secret_key is required\nsecret_key = env.str(\"secret_key\")\n\n# parse database urls, e.g.  \"postgres://localhost:5432/mydb\"\ndatabases = {\"default\": env.dj_db_url(\"database_url\")}\n\n# parse email urls, e.g. \"smtp://\"\nemail = env.dj_email_url(\"email_url\", default=\"smtp://\")\nemail_host = email[\"email_host\"]\nemail_port = email[\"email_port\"]\nemail_host_password = email[\"email_host_password\"]\nemail_host_user = email[\"email_host_user\"]\nemail_use_tls = email[\"email_use_tls\"]\n\n# parse cache urls, e.g \"redis://localhost:6379/0\"\ncaches = {\"default\": env.dj_cache_url(\"cache_url\")}\n```\n\nfor local development, use a `.env` file to override the default\nconfiguration.\n\n```bash\n# .env\ndebug=true\nsecret_key=\"not so secret\"\n```\n\nfor a more complete example, see\n[django_example.py](https://github.com/sloria/environs/blob/master/examples/django_example.py)\nin the `examples/` directory.\n\n## why\\...?\n\n### why envvars?\n\nsee [the 12-factor app](http://12factor.net/config) section on\n[configuration](http://12factor.net/config).\n\n### why not `os.environ`?\n\nwhile `os.environ` is enough for simple use cases, a typical application\nwill need a way to manipulate and validate raw environment variables.\nenvirons abstracts common tasks for handling environment variables.\n\nenvirons will help you\n\n- cast envvars to the correct type\n- specify required envvars\n- define default values\n- validate envvars\n- parse list and dict values\n- parse dates, datetimes, and timedeltas\n- parse expanded variables\n- serialize your configuration to json, yaml, etc.\n\n### why another library?\n\nthere are many great python libraries for parsing environment variables.\nin fact, most of the credit for environs\\' public api goes to the\nauthors of [envparse](https://github.com/rconradharris/envparse) and\n[django-environ](https://github.com/joke2k/django-environ).\n\nenvirons aims to meet three additional goals:\n\n1.  make it easy to extend parsing behavior and develop plugins.\n2.  leverage the deserialization and validation functionality provided\n    by a separate library (marshmallow).\n3.  clean up redundant api.\n\nsee [this github\nissue](https://github.com/rconradharris/envparse/issues/12#issue-151036722)\nwhich details specific differences with envparse.\n\n## license\n\nmit licensed. see the\n[license](https://github.com/sloria/environs/blob/master/license) file\nfor more details.\n",
  "docs_url": null,
  "keywords": "environment,variables,parsing,config,configuration,12factor,envvars",
  "license": "mit",
  "name": "environs",
  "package_url": "https://pypi.org/project/environs/",
  "project_url": "https://pypi.org/project/environs/",
  "project_urls": {
    "Changelog": "https://github.com/sloria/environs/blob/master/CHANGELOG.md",
    "Homepage": "https://github.com/sloria/environs",
    "Issues": "https://github.com/sloria/environs/issues"
  },
  "release_url": "https://pypi.org/project/environs/10.0.0/",
  "requires_dist": [
    "marshmallow >=3.0.0",
    "python-dotenv",
    "environs[lint,tests] ; extra == 'dev'",
    "tox ; extra == 'dev'",
    "dj-database-url ; extra == 'django'",
    "dj-email-url ; extra == 'django'",
    "django-cache-url ; extra == 'django'",
    "flake8 ==6.1.0 ; extra == 'lint'",
    "flake8-bugbear ==23.11.28 ; extra == 'lint'",
    "mypy ==0.910 ; extra == 'lint'",
    "pre-commit ~=3.6 ; extra == 'lint'",
    "pytest ; extra == 'tests'",
    "environs[django] ; extra == 'tests'"
  ],
  "requires_python": ">=3.7",
  "summary": "simplified environment variable parsing",
  "version": "10.0.0",
  "releases": [],
  "developers": [
    "sloria1@gmail.com",
    "steven_loria"
  ],
  "kwds": "sqlalchemy envvars environs workflows environ",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_environs",
  "homepage": "https://github.com/sloria/environs",
  "release_count": 40,
  "dependency_ids": [
    "pypi_dj_database_url",
    "pypi_dj_email_url",
    "pypi_django_cache_url",
    "pypi_environs",
    "pypi_flake8",
    "pypi_flake8_bugbear",
    "pypi_marshmallow",
    "pypi_mypy",
    "pypi_pre_commit",
    "pypi_pytest",
    "pypi_python_dotenv",
    "pypi_tox"
  ]
}
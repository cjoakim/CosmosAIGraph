{
  "classifiers": [
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "operating system :: os independent",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9"
  ],
  "description": "# pdfplumber\n\n[![version](https://img.shields.io/pypi/v/pdfplumber.svg)](https://pypi.python.org/pypi/pdfplumber) ![tests](https://github.com/jsvine/pdfplumber/workflows/tests/badge.svg) [![code coverage](https://codecov.io/gh/jsvine/pdfplumber/branch/stable/graph/badge.svg)](https://codecov.io/gh/jsvine/pdfplumber/branch/stable) [![support python versions](https://img.shields.io/pypi/pyversions/pdfplumber.svg)](https://pypi.python.org/pypi/pdfplumber)\n\nplumb a pdf for detailed information about each text character, rectangle, and line. plus: table extraction and visual debugging.\n\nworks best on machine-generated, rather than scanned, pdfs. built on [`pdfminer.six`](https://github.com/goulu/pdfminer). \n\ncurrently [tested](tests/) on [python 3.8, 3.9, 3.10, 3.11](.github/workflows/tests.yml).\n\ntranslations of this document are available in: [chinese (by @hbh112233abc)](https://github.com/hbh112233abc/pdfplumber/blob/stable/readme-cn.md).\n\n__to report a bug__ or request a feature, please [file an issue](https://github.com/jsvine/pdfplumber/issues/new/choose). __to ask a question__ or request assistance with a specific pdf, please [use the discussions forum](https://github.com/jsvine/pdfplumber/discussions).\n\n> \ud83d\udc4b this repository\u2019s maintainers are available to hire for pdf data-extraction consulting projects. to get a cost estimate, contact [jeremy](https://www.jsvine.com/consulting/pdf-data-extraction/) (for projects of any size or complexity) and/or [samkit](https://www.linkedin.com/in/samkit-jain/) (specifically for table extraction).\n\n## table of contents\n\n- [installation](#installation)\n- [command line interface](#command-line-interface)\n- [python library](#python-library)\n- [visual debugging](#visual-debugging)\n- [extracting text](#extracting-text)\n- [extracting tables](#extracting-tables)\n- [extracting form values](#extracting-form-values)\n- [demonstrations](#demonstrations)\n- [comparison to other libraries](#comparison-to-other-libraries)\n- [acknowledgments / contributors](#acknowledgments--contributors)\n- [contributing](#contributing)\n\n## installation\n\n```sh\npip install pdfplumber\n```\n\n## command line interface\n\n### basic example\n\n```sh\ncurl \"https://raw.githubusercontent.com/jsvine/pdfplumber/stable/examples/pdfs/background-checks.pdf\" > background-checks.pdf\npdfplumber < background-checks.pdf > background-checks.csv\n```\n\nthe output will be a csv containing info about every character, line, and rectangle in the pdf.\n\n### options\n\n| argument | description |\n|----------|-------------|\n|`--format [format]`| `csv` or `json`. the `json` format returns more information; it includes pdf-level and page-level metadata, plus dictionary-nested attributes.|\n|`--pages [list of pages]`| a space-delimited, `1`-indexed list of pages or hyphenated page ranges. e.g., `1, 11-15`, which would return data for pages 1, 11, 12, 13, 14, and 15.|\n|`--types [list of object types to extract]`| choices are `char`, `rect`, `line`, `curve`, `image`, `annot`, et cetera. defaults to all available.|\n|`--laparams`| a json-formatted string (e.g., `'{\"detect_vertical\": true}'`) to pass to `pdfplumber.open(..., laparams=...)`.|\n|`--precision [integer]`| the number of decimal places to round floating-point numbers. defaults to no rounding.|\n\n## python library\n\n### basic example\n\n```python\nimport pdfplumber\n\nwith pdfplumber.open(\"path/to/file.pdf\") as pdf:\n    first_page = pdf.pages[0]\n    print(first_page.chars[0])\n```\n\n### loading a pdf\n\nto start working with a pdf, call `pdfplumber.open(x)`, where `x` can be a:\n\n- path to your pdf file\n- file object, loaded as bytes\n- file-like object, loaded as bytes\n\nthe `open` method returns an instance of the `pdfplumber.pdf` class.\n\nto load a password-protected pdf, pass the `password` keyword argument, e.g., `pdfplumber.open(\"file.pdf\", password = \"test\")`.\n\nto set layout analysis parameters to `pdfminer.six`'s layout engine, pass the `laparams` keyword argument, e.g., `pdfplumber.open(\"file.pdf\", laparams = { \"line_overlap\": 0.7 })`.\n\ninvalid metadata values are treated as a warning by default. if that is not intended, pass `strict_metadata=true` to the `open` method and `pdfplumber.open` will raise an exception if it is unable to parse the metadata.\n\n### the `pdfplumber.pdf` class\n\nthe top-level `pdfplumber.pdf` class represents a single pdf and has two main properties:\n\n| property | description |\n|----------|-------------|\n|`.metadata`| a dictionary of metadata key/value pairs, drawn from the pdf's `info` trailers. typically includes \"creationdate,\" \"moddate,\" \"producer,\" et cetera.|\n|`.pages`| a list containing one `pdfplumber.page` instance per page loaded.|\n\n... and also has the following method:\n\n| method | description |\n|--------|-------------|\n|`.close()`| by default, `page` objects cache their layout and object information to avoid having to reprocess it. when parsing large pdfs, however, these cached properties can require a lot of memory. you can use this method to flush the cache and release the memory. (in version `<= 0.5.25`, use `.flush_cache()`.)|\n\n### the `pdfplumber.page` class\n\nthe `pdfplumber.page` class is at the core of `pdfplumber`. most things you'll do with `pdfplumber` will revolve around this class. it has these main properties:\n\n| property | description |\n|----------|-------------|\n|`.page_number`| the sequential page number, starting with `1` for the first page, `2` for the second, and so on.|\n|`.width`| the page's width.|\n|`.height`| the page's height.|\n|`.objects` / `.chars` / `.lines` / `.rects` / `.curves` / `.images`| each of these properties is a list, and each list contains one dictionary for each such object embedded on the page. for more detail, see \"[objects](#objects)\" below.|\n\n... and these main methods:\n\n| method | description |\n|--------|-------------|\n|`.crop(bounding_box, relative=false, strict=true)`| returns a version of the page cropped to the bounding box, which should be expressed as 4-tuple with the values `(x0, top, x1, bottom)`. cropped pages retain objects that fall at least partly within the bounding box. if an object falls only partly within the box, its dimensions are sliced to fit the bounding box. if `relative=true`, the bounding box is calculated as an offset from the top-left of the page's bounding box, rather than an absolute positioning. (see [issue #245](https://github.com/jsvine/pdfplumber/issues/245) for a visual example and explanation.) when `strict=true` (the default), the crop's bounding box must fall entirely within the page's bounding box.|\n|`.within_bbox(bounding_box, relative=false, strict=true)`| similar to `.crop`, but only retains objects that fall *entirely within* the bounding box.|\n|`.outside_bbox(bounding_box, relative=false, strict=true)`| similar to `.crop` and `.within_bbox`, but only retains objects that fall *entirely outside* the bounding box.|\n|`.filter(test_function)`| returns a version of the page with only the `.objects` for which `test_function(obj)` returns `true`.|\n\nadditional methods are described in the sections below:\n\n- [visual debugging](#visual-debugging)\n- [extracting text](#extracting-text)\n- [extracting tables](#extracting-tables)\n\n### objects\n\neach instance of `pdfplumber.pdf` and `pdfplumber.page` provides access to several types of pdf objects, all derived from [`pdfminer.six`](https://github.com/pdfminer/pdfminer.six/) pdf parsing. the following properties each return a python list of the matching objects:\n\n- `.chars`, each representing a single text character.\n- `.lines`, each representing a single 1-dimensional line.\n- `.rects`, each representing a single 2-dimensional rectangle.\n- `.curves`, each representing any series of connected points that `pdfminer.six` does not recognize as a line or rectangle.\n- `.images`, each representing an image.\n- `.annots`, each representing a single pdf annotation (cf. section 8.4 of the [official pdf specification](https://www.adobe.com/content/dam/acom/en/devnet/acrobat/pdfs/pdf_reference_1-7.pdf) for details)\n- `.hyperlinks`, each representing a single pdf annotation of the subtype `link` and having an `uri` action attribute\n\neach object is represented as a simple python `dict`, with the following properties:\n\n#### `char` properties\n\n| property | description |\n|----------|-------------|\n|`page_number`| page number on which this character was found.|\n|`text`| e.g., \"z\", or \"z\" or \" \".|\n|`fontname`| name of the character's font face.|\n|`size`| font size.|\n|`adv`| equal to text width * the font size * scaling factor.|\n|`upright`| whether the character is upright.|\n|`height`| height of the character.|\n|`width`| width of the character.|\n|`x0`| distance of left side of character from left side of page.|\n|`x1`| distance of right side of character from left side of page.|\n|`y0`| distance of bottom of character from bottom of page.|\n|`y1`| distance of top of character from bottom of page.|\n|`top`| distance of top of character from top of page.|\n|`bottom`| distance of bottom of the character from top of page.|\n|`doctop`| distance of top of character from top of document.|\n|`matrix`| the \"current transformation matrix\" for this character. (see below for details.)|\n|`mcid`| the [marked content](https://ghostscript.com/~robin/pdf_reference17.pdf#page=850) section id for this character if any (otherwise `none`). *experimental attribute.*|\n|`tag`| the [marked content](https://ghostscript.com/~robin/pdf_reference17.pdf#page=850) section tag for this character if any (otherwise `none`). *experimental attribute.*|\n|`ncs`|tktk|\n|`stroking_pattern`|tktk|\n|`non_stroking_pattern`|tktk|\n|`stroking_color`|the color of the character's outline (i.e., stroke). see [docs/colors.md](docs/colors.md) for details.|\n|`non_stroking_color`|the character's interior color. see [docs/colors.md](docs/colors.md) for details.|\n|`object_type`| \"char\"|\n\n__note__: a character\u2019s `matrix` property represents the \u201ccurrent transformation matrix,\u201d as described in section 4.2.2 of the [pdf reference](https://ghostscript.com/~robin/pdf_reference17.pdf) (6th ed.). the matrix controls the character\u2019s scale, skew, and positional translation. rotation is a combination of scale and skew, but in most cases can be considered equal to the x-axis skew. the `pdfplumber.ctm` submodule defines a class, `ctm`, that assists with these calculations. for instance:\n\n```python\nfrom pdfplumber.ctm import ctm\nmy_char = pdf.pages[0].chars[3]\nmy_char_ctm = ctm(*my_char[\"matrix\"])\nmy_char_rotation = my_char_ctm.skew_x\n```\n\n#### `line` properties\n\n| property | description |\n|----------|-------------|\n|`page_number`| page number on which this line was found.|\n|`height`| height of line.|\n|`width`| width of line.|\n|`x0`| distance of left-side extremity from left side of page.|\n|`x1`| distance of right-side extremity from left side of page.|\n|`y0`| distance of bottom extremity from bottom of page.|\n|`y1`| distance of top extremity bottom of page.|\n|`top`| distance of top of line from top of page.|\n|`bottom`| distance of bottom of the line from top of page.|\n|`doctop`| distance of top of line from top of document.|\n|`linewidth`| thickness of line.|\n|`stroking_color`|the color of the line. see [docs/colors.md](docs/colors.md) for details.|\n|`non_stroking_color`|the non-stroking color specified for the line\u2019s path. see [docs/colors.md](docs/colors.md) for details.|\n|`mcid`| the [marked content](https://ghostscript.com/~robin/pdf_reference17.pdf#page=850) section id for this line if any (otherwise `none`). *experimental attribute.*|\n|`tag`| the [marked content](https://ghostscript.com/~robin/pdf_reference17.pdf#page=850) section tag for this line if any (otherwise `none`). *experimental attribute.*|\n|`object_type`| \"line\"|\n\n#### `rect` properties\n\n| property | description |\n|----------|-------------|\n|`page_number`| page number on which this rectangle was found.|\n|`height`| height of rectangle.|\n|`width`| width of rectangle.|\n|`x0`| distance of left side of rectangle from left side of page.|\n|`x1`| distance of right side of rectangle from left side of page.|\n|`y0`| distance of bottom of rectangle from bottom of page.|\n|`y1`| distance of top of rectangle from bottom of page.|\n|`top`| distance of top of rectangle from top of page.|\n|`bottom`| distance of bottom of the rectangle from top of page.|\n|`doctop`| distance of top of rectangle from top of document.|\n|`linewidth`| thickness of line.|\n|`stroking_color`|the color of the rectangle's outline. see [docs/colors.md](docs/colors.md) for details.|\n|`non_stroking_color`|the rectangle\u2019s fill color. see [docs/colors.md](docs/colors.md) for details.|\n|`mcid`| the [marked content](https://ghostscript.com/~robin/pdf_reference17.pdf#page=850) section id for this rect if any (otherwise `none`). *experimental attribute.*|\n|`tag`| the [marked content](https://ghostscript.com/~robin/pdf_reference17.pdf#page=850) section tag for this rect if any (otherwise `none`). *experimental attribute.*|\n|`object_type`| \"rect\"|\n\n#### `curve` properties\n\n| property | description |\n|----------|-------------|\n|`page_number`| page number on which this curve was found.|\n|`pts`| points \u2014\u00a0as a list of `(x, top)` tuples \u2014\u00a0describing the curve.|\n|`height`| height of curve's bounding box.|\n|`width`| width of curve's bounding box.|\n|`x0`| distance of curve's left-most point from left side of page.|\n|`x1`| distance of curve's right-most point from left side of the page.|\n|`y0`| distance of curve's lowest point from bottom of page.|\n|`y1`| distance of curve's highest point from bottom of page.|\n|`top`| distance of curve's highest point from top of page.|\n|`bottom`| distance of curve's lowest point from top of page.|\n|`doctop`| distance of curve's highest point from top of document.|\n|`linewidth`| thickness of line.|\n|`fill`| whether the shape defined by the curve's path is filled.|\n|`stroking_color`|the color of the curve's outline. see [docs/colors.md](docs/colors.md) for details.|\n|`non_stroking_color`|the curve\u2019s fill color. see [docs/colors.md](docs/colors.md) for details.|\n|`mcid`| the [marked content](https://ghostscript.com/~robin/pdf_reference17.pdf#page=850) section id for this curve if any (otherwise `none`). *experimental attribute.*|\n|`tag`| the [marked content](https://ghostscript.com/~robin/pdf_reference17.pdf#page=850) section tag for this curve if any (otherwise `none`). *experimental attribute.*|\n|`object_type`| \"curve\"|\n\n#### derived properties\n\nadditionally, both `pdfplumber.pdf` and `pdfplumber.page` provide access to several derived lists of objects: `.rect_edges` (which decomposes each rectangle into its four lines), `.curve_edges` (which does the same for `curve` objects), and `.edges` (which combines `.rect_edges`, `.curve_edges`, and `.lines`). \n\n#### `image` properties\n\n[to be completed.]\n\n### obtaining higher-level layout objects via `pdfminer.six`\n\nif you pass the `pdfminer.six`-handling `laparams` parameter to `pdfplumber.open(...)`, then each page's `.objects` dictionary will also contain `pdfminer.six`'s higher-level layout objects, such as `\"textboxhorizontal\"`.\n\n\n## visual debugging\n\n`pdfplumber`'s visual debugging tools can be helpful in understanding the structure of a pdf and the objects that have been extracted from it.\n\n\n### creating a `pageimage` with `.to_image()`\n\nto turn any page (including cropped pages) into an `pageimage` object, call `my_page.to_image()`. you can optionally pass *one* of the  following keyword arguments:\n\n- `resolution`: the desired number pixels per inch. default: `72`. type: `int`.\n- `width`: the desired image width in pixels. default: unset, determined by `resolution`. type: `int`.\n- `height`: the desired image width in pixels. default: unset, determined by `resolution`. type: `int`.\n- `antialias`: whether to use antialiasing when creating the image. setting to `true` creates images with less-jagged text and graphics, but with larger file sizes. default: `false`. type: `bool`.\n\nfor instance:\n\n```python\nim = my_pdf.pages[0].to_image(resolution=150)\n```\n\nfrom a script or repl, `im.show()` will open the image in your local image viewer. but `pageimage` objects also play nicely with jupyter notebooks; they automatically render as cell outputs. for example:\n\n![visual debugging in jupyter](examples/screenshots/visual-debugging-in-jupyter.png \"visual debugging in jupyter\")\n\n*note*: `.to_image(...)` works as expected with `page.crop(...)`/`croppedpage` instances, but is unable to incorporate changes made via `page.filter(...)`/`filteredpage` instances.\n\n\n### basic `pageimage` methods\n\n| method | description |\n|--------|-------------|\n|`im.reset()`| clears anything you've drawn so far.|\n|`im.copy()`| copies the image to a new `pageimage` object.|\n|`im.show()`| opens the image in your local image viewer.|\n|`im.save(path_or_fileobject, format=\"png\", quantize=true, colors=256, bits=8)`| saves the annotated image as a png file. the default arguments quantize the image to a palette of 256 colors, saving the png with 8-bit color depth. you can disable quantization by passing `quantize=false` or adjust the size of the color palette by passing `colors=n`.|\n\n### drawing methods\n\nyou can pass explicit coordinates or any `pdfplumber` pdf object (e.g., char, line, rect) to these methods.\n\n| single-object method | bulk method | description |\n|----------------------|-------------|-------------|\n|`im.draw_line(line, stroke={color}, stroke_width=1)`| `im.draw_lines(list_of_lines, **kwargs)`| draws a line from a `line`, `curve`, or a 2-tuple of 2-tuples (e.g., `((x, y), (x, y))`).|\n|`im.draw_vline(location, stroke={color}, stroke_width=1)`| `im.draw_vlines(list_of_locations, **kwargs)`| draws a vertical line at the x-coordinate indicated by `location`.|\n|`im.draw_hline(location, stroke={color}, stroke_width=1)`| `im.draw_hlines(list_of_locations, **kwargs)`| draws a horizontal line at the y-coordinate indicated by `location`.|\n|`im.draw_rect(bbox_or_obj, fill={color}, stroke={color}, stroke_width=1)`| `im.draw_rects(list_of_rects, **kwargs)`| draws a rectangle from a `rect`, `char`, etc., or 4-tuple bounding box.|\n|`im.draw_circle(center_or_obj, radius=5, fill={color}, stroke={color})`| `im.draw_circles(list_of_circles, **kwargs)`| draws a circle at `(x, y)` coordinate or at the center of a `char`, `rect`, etc.|\n\nnote: the methods above are built on pillow's [`imagedraw` methods](http://pillow.readthedocs.io/en/latest/reference/imagedraw.html), but the parameters have been tweaked for consistency with svg's `fill`/`stroke`/`stroke_width` nomenclature.\n\n### troubleshooting imagemagick on debian-based systems\n\nif you're using `pdfplumber` on a debian-based system and encounter a `policyerror`, you may be able to fix it by changing the following line in `/etc/imagemagick-6/policy.xml` from this:\n\n```xml\n<policy domain=\"coder\" rights=\"none\" pattern=\"pdf\" />\n```\n\n... to this:\n\n```xml\n<policy domain=\"coder\" rights=\"read|write\" pattern=\"pdf\" />\n```\n\n(more details about `policy.xml` [available here](https://imagemagick.org/script/security-policy.php).)\n\n## extracting text\n\n`pdfplumber` can extract text from any given page (including cropped and derived pages). it can also attempt to preserve the layout of that text, as well as to identify the coordinates of words and search queries. `page` objects can call the following text-extraction methods:\n\n\n| method | description |\n|--------|-------------|\n|`.extract_text(x_tolerance=3, y_tolerance=3, layout=false, x_density=7.25, y_density=13, **kwargs)`| collates all of the page's character objects into a single string.<ul><li><p>when `layout=false`: adds spaces where the difference between the `x1` of one character and the `x0` of the next is greater than `x_tolerance`. adds newline characters where the difference between the `doctop` of one character and the `doctop` of the next is greater than `y_tolerance`.</p></li><li><p>when `layout=true` (*experimental feature*): attempts to mimic the structural layout of the text on the page(s), using `x_density` and `y_density` to determine the minimum number of characters/newlines per \"point,\" the pdf unit of measurement. all remaining `**kwargs` are passed to `.extract_words(...)` (see below), the first step in calculating the layout.</p></li></ul>|\n|`.extract_text_simple(x_tolerance=3, y_tolerance=3)`| a slightly faster but less flexible version of `.extract_text(...)`, using a simpler logic.|\n|`.extract_words(x_tolerance=3, y_tolerance=3, keep_blank_chars=false, use_text_flow=false, horizontal_ltr=true, vertical_ttb=true, extra_attrs=[], split_at_punctuation=false, expand_ligatures=true)`| returns a list of all word-looking things and their bounding boxes. words are considered to be sequences of characters where (for \"upright\" characters) the difference between the `x1` of one character and the `x0` of the next is less than or equal to `x_tolerance` *and* where the `doctop` of one character and the `doctop` of the next is less than or equal to `y_tolerance`. a similar approach is taken for non-upright characters, but instead measuring the vertical, rather than horizontal, distances between them. the parameters `horizontal_ltr` and `vertical_ttb` indicate whether the words should be read from left-to-right (for horizontal words) / top-to-bottom (for vertical words). changing `keep_blank_chars` to `true` will mean that blank characters are treated as part of a word, not as a space between words. changing `use_text_flow` to `true` will use the pdf's underlying flow of characters as a guide for ordering and segmenting the words, rather than presorting the characters by x/y position. (this mimics how dragging a cursor highlights text in a pdf; as with that, the order does not always appear to be logical.) passing a list of `extra_attrs`  (e.g., `[\"fontname\", \"size\"]` will restrict each words to characters that share exactly the same value for each of those [attributes](#char-properties), and the resulting word dicts will indicate those attributes. setting `split_at_punctuation` to `true` will enforce breaking tokens at punctuations specified by `string.punctuation`; or you can specify the list of separating punctuation by pass a string, e.g., <code>split_at_punctuation='!\"&\\'()*+,.:;<=>?@[\\]^\\`\\{\\|\\}~'</code>. unless you set `expand_ligatures=false`, ligatures such as `\ufb01` will be expanded into their constituent letters (e.g., `fi`).|\n|`.extract_text_lines(layout=false, strip=true, return_chars=true, **kwargs)`|*experimental feature* that returns a list of dictionaries representing the lines of text on the page. the `strip` parameter works analogously to python's `str.strip()` method, and returns `text` attributes without their surrounding whitespace. (only relevant when `layout = true`.) setting `return_chars` to `false` will exclude the individual character objects from the returned text-line dicts. the remaining `**kwargs` are those you would pass to `.extract_text(layout=true, ...)`.|\n|`.search(pattern, regex=true, case=true, main_group=0, return_groups=true, return_chars=true, layout=false, **kwargs)`|*experimental feature* that allows you to search a page's text, returning a list of all instances that match the query. for each instance, the response dictionary object contains the matching text, any regex group matches, the bounding box coordinates, and the char objects themselves. `pattern` can be a compiled regular expression, an uncompiled regular expression, or a non-regex string. if `regex` is `false`, the pattern is treated as a non-regex string. if `case` is `false`, the search is performed in a case-insensitive manner. setting `main_group` restricts the results to a specific regex group within the `pattern` (default of `0` means the entire match). setting `return_groups` and/or `return_chars` to `false` will exclude the lists of the matched regex groups and/or characters from being added (as `\"groups\"` and `\"chars\"` to the return dicts). the `layout` parameter operates as it does for `.extract_text(...)`. the remaining `**kwargs` are those you would pass to `.extract_text(layout=true, ...)`. __note__: zero-width and all-whitespace matches are discarded, because they (generally) have no explicit position on the page. |\n|`.dedupe_chars(tolerance=1)`| returns a version of the page with duplicate chars \u2014\u00a0those sharing the same text, fontname, size, and positioning (within `tolerance` x/y) as other characters \u2014\u00a0removed. (see [issue #71](https://github.com/jsvine/pdfplumber/issues/71) to understand the motivation.)|\n\n## extracting tables\n\n`pdfplumber`'s approach to table detection borrows heavily from [anssi nurminen's master's thesis](http://dspace.cc.tut.fi/dpub/bitstream/handle/123456789/21520/nurminen.pdf?sequence=3), and is inspired by [tabula](https://github.com/tabulapdf/tabula-extractor/issues/16). it works like this:\n\n1. for any given pdf page, find the lines that are (a) explicitly defined and/or (b) implied by the alignment of words on the page.\n2. merge overlapping, or nearly-overlapping, lines.\n3. find the intersections of all those lines.\n4. find the most granular set of rectangles (i.e., cells) that use these intersections as their vertices.\n5. group contiguous cells into tables. \n\n### table-extraction methods\n\n`pdfplumber.page` objects can call the following table methods:\n\n| method | description |\n|--------|-------------|\n|`.find_tables(table_settings={})`|returns a list of `table` objects. the `table` object provides access to the `.cells`, `.rows`, and `.bbox` properties, as well as the `.extract(x_tolerance=3, y_tolerance=3)` method.|\n|`.find_table(table_settings={})`|similar to `.find_tables(...)`, but returns the *largest* table on the page, as a `table` object. if multiple tables have the same size \u2014\u00a0as measured by the number of cells \u2014\u00a0this method returns the table closest to the top of the page.|\n|`.extract_tables(table_settings={})`|returns the text extracted from *all* tables found on the page, represented as a list of lists of lists, with the structure `table -> row -> cell`.|\n|`.extract_table(table_settings={})`|returns the text extracted from the *largest* table on the page (see `.find_table(...)` above), represented as a list of lists, with the structure `row -> cell`.|\n|`.debug_tablefinder(table_settings={})`|returns an instance of the `tablefinder` class, with access to the `.edges`, `.intersections`, `.cells`, and `.tables` properties.|\n\nfor example:\n\n```python\npdf = pdfplumber.open(\"path/to/my.pdf\")\npage = pdf.pages[0]\npage.extract_table()\n```\n\n[click here for a more detailed example.](examples/notebooks/extract-table-ca-warn-report.ipynb)\n\n### table-extraction settings\n\nby default, `extract_tables` uses the page's vertical and horizontal lines (or rectangle edges) as cell-separators. but the method is highly customizable via the `table_settings` argument. the possible settings, and their defaults:\n\n```python\n{\n    \"vertical_strategy\": \"lines\", \n    \"horizontal_strategy\": \"lines\",\n    \"explicit_vertical_lines\": [],\n    \"explicit_horizontal_lines\": [],\n    \"snap_tolerance\": 3,\n    \"snap_x_tolerance\": 3,\n    \"snap_y_tolerance\": 3,\n    \"join_tolerance\": 3,\n    \"join_x_tolerance\": 3,\n    \"join_y_tolerance\": 3,\n    \"edge_min_length\": 3,\n    \"min_words_vertical\": 3,\n    \"min_words_horizontal\": 1,\n    \"keep_blank_chars\": false,\n    \"text_tolerance\": 3,\n    \"text_x_tolerance\": 3,\n    \"text_y_tolerance\": 3,\n    \"intersection_tolerance\": 3,\n    \"intersection_x_tolerance\": 3,\n    \"intersection_y_tolerance\": 3,\n}\n```\n\n| setting | description |\n|---------|-------------|\n|`\"vertical_strategy\"`| either `\"lines\"`, `\"lines_strict\"`, `\"text\"`, or `\"explicit\"`. see explanation below.|\n|`\"horizontal_strategy\"`| either `\"lines\"`, `\"lines_strict\"`, `\"text\"`, or `\"explicit\"`. see explanation below.|\n|`\"explicit_vertical_lines\"`| a list of vertical lines that explicitly demarcate cells in the table. can be used in combination with any of the strategies above. items in the list should be either numbers \u2014\u00a0indicating the `x` coordinate of a line the full height of the page \u2014\u00a0or `line`/`rect`/`curve` objects.|\n|`\"explicit_horizontal_lines\"`| a list of horizontal lines that explicitly demarcate cells in the table. can be used in combination with any of the strategies above. items in the list should be either numbers \u2014\u00a0indicating the `y` coordinate of a line the full height of the page \u2014\u00a0or `line`/`rect`/`curve` objects.|\n|`\"snap_tolerance\"`, `\"snap_x_tolerance\"`, `\"snap_y_tolerance\"`| parallel lines within `snap_tolerance` pixels will be \"snapped\" to the same horizontal or vertical position.|\n|`\"join_tolerance\"`, `\"join_x_tolerance\"`, `\"join_y_tolerance\"`| line segments on the same infinite line, and whose ends are within `join_tolerance` of one another, will be \"joined\" into a single line segment.|\n|`\"edge_min_length\"`| edges shorter than `edge_min_length` will be discarded before attempting to reconstruct the table.|\n|`\"min_words_vertical\"`| when using `\"vertical_strategy\": \"text\"`, at least `min_words_vertical` words must share the same alignment.|\n|`\"min_words_horizontal\"`| when using `\"horizontal_strategy\": \"text\"`, at least `min_words_horizontal` words must share the same alignment.|\n|`\"intersection_tolerance\"`, `\"intersection_x_tolerance\"`, `\"intersection_y_tolerance\"`| when combining edges into cells, orthogonal edges must be within `intersection_tolerance` pixels to be considered intersecting.|\n|`\"text_*\"`| all settings prefixed with `text_` are then used when extracting text from each discovered table. all possible arguments to `page.extract_text(...)` are also valid here.|\n|`\"text_x_tolerance\"`, `\"text_y_tolerance\"`| these `text_`-prefixed settings *also* apply to the table-identification algorithm when the `text` strategy is used. i.e., when that algorithm searches for words, it will expect the individual letters in each word to be no more than `text_[x|y]_tolerance` pixels apart.|\n\n### table-extraction strategies\n\nboth `vertical_strategy` and `horizontal_strategy` accept the following options:\n\n| strategy | description | \n|----------|-------------|\n| `\"lines\"` | use the page's graphical lines \u2014\u00a0including the sides of rectangle objects \u2014\u00a0as the borders of potential table-cells. |\n| `\"lines_strict\"` | use the page's graphical lines \u2014\u00a0but *not* the sides of rectangle objects \u2014\u00a0as the borders of potential table-cells. |\n| `\"text\"` | for `vertical_strategy`: deduce the (imaginary) lines that connect the left, right, or center of words on the page, and use those lines as the borders of potential table-cells. for `horizontal_strategy`, the same but using the tops of words. |\n| `\"explicit\"` | only use the lines explicitly defined in `explicit_vertical_lines` / `explicit_horizontal_lines`. |\n\n### notes\n\n- often it's helpful to crop a page \u2014\u00a0`page.crop(bounding_box)` \u2014\u00a0before trying to extract the table.\n\n- table extraction for `pdfplumber` was radically redesigned for `v0.5.0`, and introduced breaking changes.\n\n\n## extracting form values\n\nsometimes pdf files can contain forms that include inputs that people can fill out and save. while values in form fields appear like other text in a pdf file, form data is handled differently. if you want the gory details, see page 671 of this [specification](https://opensource.adobe.com/dc-acrobat-sdk-docs/pdfstandards/pdfreference1.7old.pdf).\n\n`pdfplumber` doesn't have an interface for working with form data, but you can access it using `pdfplumber`'s wrappers around `pdfminer`.\n\nfor example, this snippet will retrieve form field names and values and store them in a dictionary.\n\n```python\nimport pdfplumber\nfrom pdfplumber.utils.pdfinternals import resolve_and_decode, resolve\n\npdf = pdfplumber.open(\"document_with_form.pdf\")\n\ndef parse_field_helper(form_data, field, prefix=none):\n    \"\"\" appends any pdf acroform field/value pairs in `field` to provided `form_data` list\n\n        if `field` has child fields, those will be parsed recursively.\n    \"\"\"\n    resolved_field = field.resolve()\n    field_name = '.'.join(filter(lambda x: x, [prefix, resolve_and_decode(resolved_field.get(\"t\"))]))\n    if \"kids\" in resolved_field:\n        for kid_field in resolved_field[\"kids\"]:\n            parse_field_helper(form_data, kid_field, prefix=field_name)\n    if \"t\" in resolved_field or \"tu\" in resolved_field:\n        # \"t\" is a field-name, but it's sometimes absent.\n        # \"tu\" is the \"alternate field name\" and is often more human-readable\n        # your pdf may have one, the other, or both.\n        alternate_field_name  = resolve_and_decode(resolved_field.get(\"tu\")) if resolved_field.get(\"tu\") else none\n        field_value = resolve_and_decode(resolved_field[\"v\"]) if 'v' in resolved_field else none\n        form_data.append([field_name, alternate_field_name, field_value])\n\n\nform_data = []\nfields = resolve(pdf.doc.catalog[\"acroform\"])[\"fields\"]\nfor field in fields:\n    parse_field_helper(form_data, field)\n```\n\nonce you run this script, `form_data` is a list containing a three-element tuple for each form element. for instance, a pdf form with a city and state field might look like this.\n```\n[\n ['state.0', 'enter state', 'ca'],\n ['section 2  accident information.1.0',\n  'enter city of accident',\n  'san francisco']\n]\n```\n\n## demonstrations\n\n- [using `extract_table` on a california worker adjustment and retraining notification (warn) report](examples/notebooks/extract-table-ca-warn-report.ipynb). demonstrates basic visual debugging and table extraction.\n- [using `extract_table` on the fbi's national instant criminal background check system pdfs](examples/notebooks/extract-table-nics.ipynb). demonstrates how to use visual debugging to find optimal table extraction settings. also demonstrates `page.crop(...)` and `page.extract_text(...).`\n- [inspecting and visualizing `curve` objects](examples/notebooks/ag-energy-roundup-curves.ipynb).\n- [extracting fixed-width data from a san jose pd firearm search report](examples/notebooks/san-jose-pd-firearm-report.ipynb), an example of using `page.extract_text(...)`.\n\n## comparison to other libraries\n\nseveral other python libraries help users to extract information from pdfs. as a broad overview, `pdfplumber` distinguishes itself from other pdf processing libraries by combining these features:\n\n- easy access to detailed information about each pdf object\n- higher-level, customizable methods for extracting text and tables\n- tightly integrated visual debugging\n- other useful utility functions, such as filtering objects via a crop-box\n\nit's also helpful to know what features `pdfplumber` does __not__ provide:\n\n- pdf *generation*\n- pdf *modification*\n- optical character recognition (ocr)\n- strong support for extracting tables from ocr'ed documents\n\n### specific comparisons\n\n- [`pdfminer.six`](https://github.com/pdfminer/pdfminer.six) provides the foundation for `pdfplumber`. it primarily focuses on parsing pdfs, analyzing pdf layouts and object positioning, and extracting text. it does not provide tools for table extraction or visual debugging.\n\n- [`pypdf2`](https://github.com/mstamy2/pypdf2) is a pure-python library \"capable of splitting, merging, cropping, and transforming the pages of pdf files. it can also add custom data, viewing options, and passwords to pdf files.\" it can extract page text, but does not provide easy access to shape objects (rectangles, lines, etc.), table-extraction, or visually debugging tools.\n\n- [`pymupdf`](https://pymupdf.readthedocs.io/) is substantially faster than `pdfminer.six` (and thus also `pdfplumber`) and can generate and modify pdfs, but the library requires installation of non-python software (mupdf). it also does not enable easy access to shape objects (rectangles, lines, etc.), and does not provide table-extraction or visual debugging tools.\n\n- [`camelot`](https://github.com/camelot-dev/camelot), [`tabula-py`](https://github.com/chezou/tabula-py), and [`pdftables`](https://github.com/drj11/pdftables) all focus primarily on extracting tables. in some cases, they may be better suited to the particular tables you are trying to extract.\n\n\n## acknowledgments / contributors\n\nmany thanks to the following users who've contributed ideas, features, and fixes:\n\n- [jacob fenton](https://github.com/jsfenfen)\n- [dan nguyen](https://github.com/dannguyen)\n- [jeff barrera](https://github.com/jeffbarrera)\n- [bob lannon](https://github.com/boblannon)\n- [dustin tindall](https://github.com/dustindall)\n- [@yevgnen](https://github.com/yevgnen)\n- [@meldonization](https://github.com/meldonization)\n- [ois\u00edn moran](https://github.com/oisinmoran)\n- [samkit jain](https://github.com/samkit-jain)\n- [francisco aranda](https://github.com/frascuchon)\n- [kwok-kuen cheung](https://github.com/cheungpat)\n- [marco](https://github.com/ubmarco)\n- [idan david](https://github.com/idan-david)\n- [@xv44586](https://github.com/xv44586)\n- [alexander regueiro](https://github.com/alexreg)\n- [daniel pe\u00f1a](https://github.com/trifling)\n- [@bobluda](https://github.com/bobluda)\n- [@ramcdona](https://github.com/ramcdona)\n- [@johnhuge](https://github.com/johnhuge)\n- [jhonatan lopes](https://github.com/jhonatan-lopes)\n- [ethan corey](https://github.com/ethanscorey)\n- [shannon shen](https://github.com/lolipopshock)\n- [matsumoto toshi](https://github.com/toshi1127)\n- [john west](https://github.com/jwestwsj)\n- [david huggins-daines](https://github.com/dhdaines)\n- [jeremy b. merrill](https://github.com/jeremybmerrill)\n\n## contributing\n\npull requests are welcome, but please submit a proposal issue first, as the library is in active development.\n\ncurrent maintainers:\n\n- [jeremy singer-vine](https://github.com/jsvine)\n- [samkit jain](https://github.com/samkit-jain)\n",
  "docs_url": null,
  "keywords": "",
  "license": "",
  "name": "pdfplumber",
  "package_url": "https://pypi.org/project/pdfplumber/",
  "project_url": "https://pypi.org/project/pdfplumber/",
  "project_urls": {
    "Homepage": "https://github.com/jsvine/pdfplumber"
  },
  "release_url": "https://pypi.org/project/pdfplumber/0.10.3/",
  "requires_dist": [
    "pdfminer.six ==20221105",
    "Pillow >=9.1",
    "pypdfium2 >=4.18.0"
  ],
  "requires_python": ">=3.8",
  "summary": "plumb a pdf for detailed information about each char, rectangle, and line.",
  "version": "0.10.3",
  "releases": [],
  "developers": [
    "jeremy_singer",
    "jsvine@gmail.com"
  ],
  "kwds": "pdfplumber pdfminer pdf pdfs svg",
  "license_kwds": "",
  "libtype": "pypi",
  "id": "pypi_pdfplumber",
  "homepage": "https://github.com/jsvine/pdfplumber",
  "release_count": 64,
  "dependency_ids": [
    "pypi_pdfminer.six",
    "pypi_pillow",
    "pypi_pypdfium2"
  ]
}
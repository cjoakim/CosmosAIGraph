{
  "classifiers": [
    "development status :: 4 - beta",
    "environment :: console",
    "intended audience :: developers",
    "intended audience :: science/research",
    "license :: osi approved :: bsd license",
    "operating system :: macos",
    "operating system :: microsoft :: windows",
    "operating system :: posix",
    "operating system :: unix",
    "programming language :: python",
    "programming language :: python :: 3",
    "topic :: scientific/engineering"
  ],
  "description": "######################################################\ntexext - sphinx extensions for working with latex math\n######################################################\n\n``texext`` contains a couple of sphinx_ extensions for working with latex math.\n\n***********\nmath_dollar\n***********\n\n``math_dollar`` replaces math expressions between dollars in rest_ with\nequivalent inline math.\n\nfor example::\n\n    here is some math: $a = 2$\n\nwill be replaced by::\n\n    here is some math: :math:`a = 2`\n\nthe extension makes some effort not to replace dollars that aren't meant as\nmath, but please check your output carefully, and submit an issue on the\n`texext issue tracker`_ if we have messed up.\n\nto enable math_dollar, make sure that the ``texext`` package is on your\npython path, and add ``texext.math_dollar`` to your list of extensions in the\nsphinx ``conf.py``.  if you want math_dollar to process docstrings, you\nshould add ``sphinx.ext.autodoc`` higher up your extensions list than\n``math_dollar``.\n\n******************\nmathcode directive\n******************\n\nusers of `sympy <http://www.sympy.org>`_ may want to generate latex\nexpressions dynamically in sympy, and then render them in latex in the built\npages.  you can do this with the ``mathcode`` directive::\n\n    .. mathcode::\n\n        import sympy\n        a, b = sympy.symbols('a, b')\n        a * 10 + 2 * b\n\nthe directive runs ``sympy.latex()`` on the return result of the final\nexpression, and embeds it in a ``.. math::`` directive, resulting in\nequivalent output to sphinx of::\n\n    .. math::\n\n        10 a + 2 b\n\ncontext (namespace) is preserved by default, so you can use context in\nsubsequent directives, e.g.::\n\n    .. mathcode::\n\n        a * 5 + 3 * b\n\nif the last expression in the mathcode block is not an expression, the context\ngets updated, but the extension generates no math directive to the output.\nthis allows you to have blocks that fill in calculations without rendering to\nthe page.  for example, this generates no output::\n\n    .. mathcode::\n\n        expr = a * 4\n\nyou can use the generated context in a later directive::\n\n    .. mathcode::\n\n        expr\n\nto reset the context (namespace), use the ``newcontext`` option::\n\n    .. mathcode::\n        :newcontext:\n\n        import sympy  # again\n\nif you would like mathcode to share a namespace with the `matplotlib\nplot_directive`_, set the following in your ``conf.py``::\n\n    # config of mathcode directive\n    mathcode_use_plot_ns = true\n\n.. note::\n\n    if you want to use the plot_directive context from within mathcode\n    directives, you need to list the plot_directive above the mathcode\n    directive in your sphinx extension list.  all the plot directives code\n    will get run before all the mathcode directive code.\n\n    conversely, if you want to use the mathcode directive context from the\n    plot_directive, list mathcode first in your sphinx extension list.\n\n.. note::\n\n    by default, the matplotlib ``plot_directive`` will clear the namespace\n    context for each directive, so you may want to use the ``:context:``\n    option to the plot directive, most of the time.\n\nif you are using nb2plots_ for your plots, and you want mathcode to share a\nnamespace with the nb2plots plot directive, you will need to specify the\nnb2plots plot context directly::\n\n    # config of mathcode directive\n    mathcode_use_plot_ns = true\n    mathcode_plot_context = 'nb2plots.nbplots.plot_context'\n\nmore generally if you want to work with a customized version of the\nplot_directive, you need to supply the name of the plot context dictionary for\nthe plot directive, as a string.  for example, if you have a custom plot\ndirective module importable as ``import my_path.plot_directive``, with the\nplot context in ``my_path.plot_directive.plot_context``, then your ``conf.py``\nshould have lines like these::\n\n    # config of mathcode directive\n    mathcode_plot_context = \"my_path.plot_directive.plot_context\"\n\nthe plot context is a string rather than the attribute itself in order to let\nsphinx pickle the configuration between runs.  this allows sphinx to avoid\nbuilding pages that have not changed between calls to ``sphinx-build``.\n\nto enable the mathcode directive, make sure that the ``texext`` package is on\nyour python path, and add ``textext.mathcode`` to your list of extensions in\nthe sphinx ``conf.py``.\n\n****\ncode\n****\n\nsee https://github.com/matthew-brett/texext\n\nreleased under the bsd two-clause license - see the file ``license`` in the\nsource distribution.\n\n`travis-ci <https://travis-ci.org/matthew-brett/texext>`_ kindly tests the\ncode automatically under python versions 2.7, and 3.6 through 3.8.\n\nthe latest released version is at https://pypi.python.org/pypi/texext\n\n*******\nsupport\n*******\n\nplease put up issues on the `texext issue tracker`_.\n\n.. _sphinx: http://sphinx-doc.org\n.. _rest: http://docutils.sourceforge.net/rst.html\n.. _texext issue tracker: https://github.com/matthew-brett/texext/issues\n.. _matplotlib plot_directive: http://matplotlib.org/sampledoc/extensions.html\n.. _nb2plots: https://pypi.python.org/pypi/nb2plots\n\n\n",
  "docs_url": null,
  "keywords": "",
  "license": "bsd license",
  "name": "texext",
  "package_url": "https://pypi.org/project/texext/",
  "project_url": "https://pypi.org/project/texext/",
  "project_urls": {
    "Homepage": "http://github.com/matthew-brett/texext"
  },
  "release_url": "https://pypi.org/project/texext/0.6.7/",
  "requires_dist": [
    "sphinx (>=4)",
    "docutils (>=0.14)",
    "sympy (>=1.0) ; extra == 'test'",
    "matplotlib (>=3.1) ; extra == 'test'",
    "pytest ; extra == 'test'",
    "sphinxtesters (>=0.2.3) ; extra == 'test'"
  ],
  "requires_python": "",
  "summary": "sphinx extensions for working with latex math",
  "version": "0.6.7",
  "releases": [],
  "developers": [
    "matthew.brett@gmail.com",
    "matthew_brett"
  ],
  "kwds": "math_dollar sphinx_ _sphinx sphinx _texext",
  "license_kwds": "bsd license",
  "libtype": "pypi",
  "id": "pypi_texext",
  "homepage": "http://github.com/matthew-brett/texext",
  "release_count": 17,
  "dependency_ids": [
    "pypi_docutils",
    "pypi_matplotlib",
    "pypi_pytest",
    "pypi_sphinx",
    "pypi_sphinxtesters",
    "pypi_sympy"
  ]
}
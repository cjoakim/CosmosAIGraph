{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "programming language :: python :: 3",
    "programming language :: python :: 3 :: only"
  ],
  "description": ".. image:: https://img.shields.io/pypi/v/irc.svg\n   :target: https://pypi.org/project/irc\n\n.. image:: https://img.shields.io/pypi/pyversions/irc.svg\n\n.. image:: https://github.com/jaraco/irc/actions/workflows/main.yml/badge.svg\n   :target: https://github.com/jaraco/irc/actions?query=workflow%3a%22tests%22\n   :alt: tests\n\n.. image:: https://img.shields.io/endpoint?url=https://raw.githubusercontent.com/charliermarsh/ruff/main/assets/badge/v2.json\n    :target: https://github.com/astral-sh/ruff\n    :alt: ruff\n\n.. image:: https://readthedocs.org/projects/irc/badge/?version=latest\n   :target: https://irc.readthedocs.io/en/latest/?badge=latest\n\n.. image:: https://img.shields.io/badge/skeleton-2023-informational\n   :target: https://blog.jaraco.com/skeleton\n\n.. image:: https://badges.gitter.im/jaraco/irc.svg\n   :alt: join the chat at https://gitter.im/jaraco/irc\n   :target: https://gitter.im/jaraco/irc?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge\n\n.. image:: https://tidelift.com/badges/github/jaraco/irc\n   :target: https://tidelift.com/subscription/pkg/pypi-irc?utm_source=pypi-irc&utm_medium=referral&utm_campaign=readme\n\nfull-featured python irc library for python.\n\n- `project home <https://github.com/jaraco/irc>`_\n- `docs <https://python-irc.readthedocs.io/>`_\n- `history <https://python-irc.readthedocs.io/en/latest/history.html>`_\n\noverview\n========\n\nthis library provides a low-level implementation of the irc protocol for\npython.  it provides an event-driven irc client framework.  it has\na fairly thorough support for the basic irc protocol, ctcp, and dcc\nconnections.\n\nin order to understand how to make an irc client, it's best to read up first\non the `irc specifications\n<http://web.archive.org/web/20160628193730/http://www.irchelp.org/irchelp/rfc/>`_.\n\nclient features\n===============\n\nthe main features of the irc client framework are:\n\n* abstraction of the irc protocol.\n* handles multiple simultaneous irc server connections.\n* handles server ponging transparently.\n* messages to the irc server are done by calling methods on an irc\n  connection object.\n* messages from an irc server triggers events, which can be caught\n  by event handlers.\n* multiple options for reading from and writing to an irc server:\n  you can use sockets in an internal ``select()`` loop or use\n  python3's asyncio event loop\n* functions can be registered to execute at specified times by the\n  event-loop.\n* decodes ctcp tagging correctly (hopefully); i haven't seen any\n  other irc client implementation that handles the ctcp\n  specification subtleties.\n* a kind of simple, single-server, object-oriented irc client class\n  that dispatches events to instance methods is included.\n* dcc connection support.\n\ncurrent limitations:\n\n* the irc protocol shines through the abstraction a bit too much.\n* data is not written asynchronously to the server (and dcc peers),\n  i.e. the ``write()`` may block if the tcp buffers are stuffed.\n* like most projects, documentation is lacking ...\n* dcc is not currently implemented in the asyncio-based version\n\nunfortunately, this library isn't as well-documented as i would like\nit to be.  i think the best way to get started is to read and\nunderstand the example program ``irccat``, which is included in the\ndistribution.\n\nthe following modules might be of interest:\n\n* ``irc.client``\n\n  the library itself.  read the code along with comments and\n  docstrings to get a grip of what it does.  use it at your own risk\n  and read the source, luke!\n\n* ``irc.client_aio``\n\n  all the functionality of the above library, but utilizing\n  python 3's native asyncio library for the core event loop.\n  interface/api is otherwise functionally identical to the classes\n  in ``irc.client``\n\n* ``irc.bot``\n\n  an irc bot implementation.\n\n* ``irc.server``\n\n  a basic irc server implementation. suitable for testing, but not\n  intended as a production service.\n\n  invoke the server with ``python -m irc.server``.\n\nexamples\n========\n\nexample scripts in the scripts directory:\n\n* ``irccat``\n\n  a simple example of how to use the irc client.  ``irccat`` reads\n  text from stdin and writes it to a specified user or channel on\n  an irc server.\n\n* ``irccat2``\n\n  the same as above, but using the ``simpleircclient`` class.\n\n* ``aio_irccat``\n\n  same as above, but uses the asyncio-based event loop in\n  ``aioreactor`` instead of the ``select()`` based ``reactor``.\n\n\n* ``aio_irccat2``\n\n  same as above, but using the ``aiosimpleircclient`` class\n\n\n* ``servermap``\n\n  another simple example.  ``servermap`` connects to an irc server,\n  finds out what other irc servers there are in the net and prints\n  a tree-like map of their interconnections.\n\n* ``testbot``\n\n  an example bot that uses the ``singleserverircbot`` class from\n  ``irc.bot``.  the bot enters a channel and listens for commands in\n  private messages or channel traffic.  it also accepts dcc\n  invitations and echos back sent dcc chat messages.\n\n* ``dccreceive``\n\n  receives a file over dcc.\n\n* ``dccsend``\n\n  sends a file over dcc.\n\n\nnote: if you're running one of the examples on a unix command line, you need\nto escape the ``#`` symbol in the channel. for example, use ``\\\\#test`` or\n``\"#test\"`` instead of ``#test``.\n\n\nscheduling events\n=================\n\nthe library includes a default event scheduler as\n``irc.schedule.defaultscheduler``,\nbut this scheduler can be replaced with any other scheduler. for example,\nto use the `schedule <https://pypi.org/project/schedule>`_ package,\ninclude it\nin your dependencies and install it into the irc library as so:\n\n    class schedulescheduler(irc.schedule.ischeduler):\n        def execute_every(self, period, func):\n            schedule.every(period).do(func)\n\n        def execute_at(self, when, func):\n            schedule.at(when).do(func)\n\n        def execute_after(self, delay, func):\n            raise notimplementederror(\"not supported\")\n\n        def run_pending(self):\n            schedule.run_pending()\n\n    irc.client.reactor.scheduler_class = schedulescheduler\n\n\ndecoding input\n==============\n\nby default, the irc library attempts to decode all incoming streams as\nutf-8, even though the irc spec stipulates that no specific encoding can be\nexpected. since assuming utf-8 is not reasonable in the general case, the irc\nlibrary provides options to customize decoding of input by customizing the\n``serverconnection`` class. the ``buffer_class`` attribute on the\n``serverconnection`` determines which class is used for buffering lines from the\ninput stream, using the ``buffer`` module in `jaraco.stream\n<https://pypi.python.org/pypi/jaraco.stream>`_. by default it is\n``buffer.decodinglinebuffer``, but may be\nre-assigned with another class, following the interface of ``buffer.linebuffer``.\nthe ``buffer_class`` attribute may be assigned for all instances of\n``serverconnection`` by overriding the class attribute.\n\nfor example:\n\n.. code:: python\n\n    from jaraco.stream import buffer\n\n    irc.client.serverconnection.buffer_class = buffer.lenientdecodinglinebuffer\n\nthe ``lenientdecodinglinebuffer`` attempts utf-8 but falls back to latin-1, which\nwill avoid ``unicodedecodeerror`` in all cases (but may produce unexpected\nbehavior if an irc user is using another encoding).\n\nthe buffer may be overridden on a per-instance basis (as long as it's\noverridden before the connection is established):\n\n.. code:: python\n\n    server = irc.client.reactor().server()\n    server.buffer_class = buffer.lenientdecodinglinebuffer\n    server.connect()\n\nalternatively, some clients may still want to decode the input using a\ndifferent encoding. to decode all input as latin-1 (which decodes any input),\nuse the following:\n\n.. code:: python\n\n    irc.client.serverconnection.buffer_class.encoding = \"latin-1\"\n\nor decode to utf-8, but use a replacement character for unrecognized byte\nsequences:\n\n.. code:: python\n\n    irc.client.serverconnection.buffer_class.errors = \"replace\"\n\nor, to simply ignore all input that cannot be decoded:\n\n.. code:: python\n\n    class ignoreerrorsbuffer(buffer.decodinglinebuffer):\n        def handle_exception(self):\n            pass\n\n\n    irc.client.serverconnection.buffer_class = ignoreerrorsbuffer\n\nthe library requires text for message\nprocessing, so a decoding buffer must be used. clients\nmust use one of the above techniques for decoding input to text.\n\nnotes and contact info\n======================\n\nenjoy.\n\nmaintainer:\njason r. coombs <jaraco@jaraco.com>\n\noriginal author:\njoel rosdahl <joel@rosdahl.net>\n\ncopyright \u00a9 1999-2002 joel rosdahl\ncopyright \u00a9 2011-2016 jason r. coombs\ncopyright \u00a9 2009 ferry boender\n\nfor enterprise\n==============\n\navailable as part of the tidelift subscription.\n\nthis project and the maintainers of thousands of other packages are working with tidelift to deliver one enterprise subscription that covers all of the open source you use.\n\n`learn more <https://tidelift.com/subscription/pkg/pypi-irc?utm_source=pypi-irc&utm_medium=referral&utm_campaign=github>`_.\n",
  "docs_url": null,
  "keywords": "",
  "license": "",
  "name": "irc",
  "package_url": "https://pypi.org/project/irc/",
  "project_url": "https://pypi.org/project/irc/",
  "project_urls": {
    "Homepage": "https://github.com/jaraco/irc"
  },
  "release_url": "https://pypi.org/project/irc/20.3.1/",
  "requires_dist": [
    "jaraco.collections",
    "jaraco.text >=3.10",
    "jaraco.logging",
    "jaraco.functools >=1.20",
    "jaraco.stream",
    "pytz",
    "more-itertools",
    "tempora >=1.6",
    "importlib-metadata ; python_version < \"3.8\"",
    "sphinx >=3.5 ; extra == 'docs'",
    "sphinx <7.2.5 ; extra == 'docs'",
    "jaraco.packaging >=9.3 ; extra == 'docs'",
    "rst.linker >=1.9 ; extra == 'docs'",
    "furo ; extra == 'docs'",
    "sphinx-lint ; extra == 'docs'",
    "jaraco.tidelift >=1.4 ; extra == 'docs'",
    "sphinx <7.1 ; extra == 'docs'",
    "pytest >=6 ; extra == 'testing'",
    "pytest-checkdocs >=2.4 ; extra == 'testing'",
    "pytest-cov ; extra == 'testing'",
    "pytest-enabler >=2.2 ; extra == 'testing'",
    "pytest-ruff >=0.2.1 ; extra == 'testing'",
    "pygments ; extra == 'testing'",
    "pytest-mypy ; (platform_python_implementation != \"PyPy\") and extra == 'testing'"
  ],
  "requires_python": ">=3.8",
  "summary": "irc (internet relay chat) protocol library for python",
  "version": "20.3.1",
  "releases": [],
  "developers": [
    "jaraco@jaraco.com",
    "jason_r"
  ],
  "kwds": "badge badges yml ruff irccat2",
  "license_kwds": "",
  "libtype": "pypi",
  "id": "pypi_irc",
  "homepage": "https://github.com/jaraco/irc",
  "release_count": 122,
  "dependency_ids": [
    "pypi_furo",
    "pypi_importlib_metadata",
    "pypi_jaraco.collections",
    "pypi_jaraco.functools",
    "pypi_jaraco.logging",
    "pypi_jaraco.packaging",
    "pypi_jaraco.stream",
    "pypi_jaraco.text",
    "pypi_jaraco.tidelift",
    "pypi_more_itertools",
    "pypi_pygments",
    "pypi_pytest",
    "pypi_pytest_checkdocs",
    "pypi_pytest_cov",
    "pypi_pytest_enabler",
    "pypi_pytest_mypy",
    "pypi_pytest_ruff",
    "pypi_pytz",
    "pypi_rst.linker",
    "pypi_sphinx",
    "pypi_sphinx_lint",
    "pypi_tempora"
  ]
}
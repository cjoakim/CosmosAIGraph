{
  "classifiers": [
    "license :: osi approved :: mit license",
    "programming language :: python :: 3",
    "topic :: system :: archiving :: compression"
  ],
  "description": "<!-- --8<-- [start:intro] -->\n# stream-zip\n\n[![conda-forge package](https://img.shields.io/conda/v/conda-forge/stream-zip?label=conda-forge&color=%234c1)](https://anaconda.org/conda-forge/stream-zip) [![pypi package](https://img.shields.io/pypi/v/stream-zip?label=pypi%20package&color=%234c1)](https://pypi.org/project/stream-zip/) [![test suite](https://img.shields.io/github/actions/workflow/status/uktrade/stream-zip/test.yml?label=test%20suite)](https://github.com/uktrade/stream-zip/actions/workflows/test.yml) [![code coverage](https://img.shields.io/codecov/c/github/uktrade/stream-zip?label=code%20coverage)](https://app.codecov.io/gh/uktrade/stream-zip)\n\npython function to construct a zip archive on the fly - without having to store the entire zip in memory or disk. this is useful in memory-constrained environments, or when you would like to start returning compressed data before you've even retrieved all the uncompressed data. generating zips on-demand in a web server is a typical use case for stream-zip.\n\noffers similar functionality to [zipfly](https://github.com/buzonio/zipfly), but with a different api, and does not use python's zipfile module under the hood. creates both zip32/2.0/legacy and zip64 files.\n<!-- --8<-- [end:intro] -->\n\nto unzip files on the fly try [stream-unzip](https://github.com/uktrade/stream-unzip).\n\n<!-- --8<-- [start:features] -->\n## features\n\nin addition to being memory efficient (with some [limitations](https://stream-zip.docs.trade.gov.uk/get-started/#limitations)) stream-zip:\n\n- constructs zip files that can be stream unzipped, for example by [stream-unzip](https://stream-unzip.docs.trade.gov.uk/)\n\n- can construct zip64 zip files. zip64 zip files allow sizes far beyond the approximate 4gib limit of the original zip format\n\n- can construct zip files that contain symbolic links\n\n- can construct zip files that contain directories, including empty directories\n\n- allows the specification of permissions on the member files and directories (although not all clients respect them)\n\n- by default stores modification time as an extended timestamp. an extended timestamp is a more accurate timestamp than the original zip format allows\n\n<!-- --8<-- [end:features] -->\n\n---\n\nvisit the [stream-zip documentation](https://stream-zip.docs.trade.gov.uk/) for usage instructions.\n",
  "docs_url": null,
  "keywords": "",
  "license": "",
  "name": "stream-zip",
  "package_url": "https://pypi.org/project/stream-zip/",
  "project_url": "https://pypi.org/project/stream-zip/",
  "project_urls": {
    "Documentation": "https://stream-zip.docs.trade.gov.uk/",
    "Source": "https://github.com/uktrade/stream-zip"
  },
  "release_url": "https://pypi.org/project/stream-zip/0.0.68/",
  "requires_dist": [
    "coverage==6.2; extra == 'ci'",
    "pytest-cov==3.0.0; extra == 'ci'",
    "pytest==6.2.5; extra == 'ci'",
    "stream-unzip==0.0.86; extra == 'ci'",
    "coverage>=6.2; extra == 'dev'",
    "pytest-cov>=3.0.0; extra == 'dev'",
    "pytest>=6.2.5; extra == 'dev'",
    "stream-unzip>=0.0.86; extra == 'dev'"
  ],
  "requires_python": ">=3.6.7",
  "summary": "python function to construct a zip archive with stream processing - without having to store the entire zip in memory or disk",
  "version": "0.0.68",
  "releases": [],
  "developers": [
    "sre@digital.trade.gov.uk"
  ],
  "kwds": "zip32 zipfile zip64 zip zips",
  "license_kwds": "",
  "libtype": "pypi",
  "id": "pypi_stream_zip",
  "homepage": "",
  "release_count": 67,
  "dependency_ids": [
    "pypi_coverage",
    "pypi_pytest",
    "pypi_pytest_cov",
    "pypi_stream_unzip"
  ]
}
{
  "classifiers": [
    "development status :: 5 - production/stable",
    "environment :: web environment",
    "framework :: django",
    "framework :: django :: 3.2",
    "framework :: django :: 4.0",
    "framework :: django :: 4.1",
    "framework :: django :: 4.2",
    "framework :: django :: 5.0",
    "intended audience :: developers",
    "license :: osi approved :: bsd license",
    "operating system :: os independent",
    "programming language :: python :: 3",
    "programming language :: python :: 3 :: only",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.12",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: utilities"
  ],
  "description": "django-appconf\n==============\n\n.. image:: http://codecov.io/github/django-compressor/django-appconf/coverage.svg?branch=develop\n    :alt: code coverage\n    :target: http://codecov.io/github/django-compressor/django-appconf?branch=develop\n\n.. image:: https://secure.travis-ci.org/django-compressor/django-appconf.svg?branch=develop\n    :alt: build status\n    :target: http://travis-ci.org/django-compressor/django-appconf\n\na helper class for handling configuration defaults of packaged django\napps gracefully.\n\n.. note::\n\n    this app precedes django's own appconfig_ classes that act as\n    \"objects [to] store metadata for an application\" inside django's\n    app loading mechanism. in other words, they solve a related but\n    different use case than django-appconf and can't easily be used\n    as a replacement. the similarity in name is purely coincidental.\n\n.. _appconfig: https://docs.djangoproject.com/en/stable/ref/applications/#django.apps.appconfig\n\noverview\n--------\n\nsay you have an app called ``myapp`` with a few defaults, which you want\nto refer to in the app's code without repeating yourself all the time.\n``appconf`` provides a simple class to implement those defaults. simply add\nsomething like the following code somewhere in your app files:\n\n.. code-block:: python\n\n    from appconf import appconf\n\n    class myappconf(appconf):\n        setting_1 = \"one\"\n        setting_2 = (\n            \"two\",\n        )\n\n.. note::\n\n    ``appconf`` classes depend on being imported during startup of the django\n    process. even though there are multiple modules loaded automatically,\n    only the ``models`` modules (usually the ``models.py`` file of your\n    app) are guaranteed to be loaded at startup. therefore it's recommended\n    to put your ``appconf`` subclass(es) there, too.\n\nthe settings are initialized with the capitalized app label of where the\nsetting is located at. e.g. if your ``models.py`` with the ``appconf`` class\nis in the ``myapp`` package, the prefix of the settings will be ``myapp``.\n\nyou can override the default prefix by specifying a ``prefix`` attribute of\nan inner ``meta`` class:\n\n.. code-block:: python\n\n    from appconf import appconf\n\n    class acmeappconf(appconf):\n        setting_1 = \"one\"\n        setting_2 = (\n            \"two\",\n        )\n\n        class meta:\n            prefix = 'acme'\n\nthe ``myappconf`` class will automatically look at django's global settings\nto determine if you've overridden it. for example, adding this to your site's\n``settings.py`` would override ``setting_1`` of the above ``myappconf``:\n\n.. code-block:: python\n\n    acme_setting_1 = \"uno\"\n    \nsince django-appconf completes django's global settings with its default values \n(like \"one\" above), the standard ``python manage.py diffsettings`` will show \nthese defaults automatically.\n\nin case you want to use a different settings object instead of the default\n``'django.conf.settings'``, set the ``holder`` attribute of the inner\n``meta`` class to a dotted import path:\n\n.. code-block:: python\n\n    from appconf import appconf\n\n    class myappconf(appconf):\n        setting_1 = \"one\"\n        setting_2 = (\n            \"two\",\n        )\n\n        class meta:\n            prefix = 'acme'\n            holder = 'acme.conf.settings'\n\nif you ship an ``appconf`` class with your reusable django app, it's\nrecommended to put it in a ``conf.py`` file of your app package and\nimport ``django.conf.settings`` in it, too:\n\n.. code-block:: python\n\n    from django.conf import settings\n    from appconf import appconf\n\n    class myappconf(appconf):\n        setting_1 = \"one\"\n        setting_2 = (\n            \"two\",\n        )\n\nin the other files of your app you can easily make sure the settings\nare correctly loaded if you import django's settings object from that\nmodule, e.g. in your app's ``views.py``:\n\n.. code-block:: python\n\n    from django.http import httpresponse\n    from myapp.conf import settings\n\n    def index(request):\n        text = 'setting 1 is: %s' % settings.myapp_setting_1\n        return httpresponse(text)\n\n",
  "docs_url": null,
  "keywords": "",
  "license": "bsd",
  "name": "django-appconf",
  "package_url": "https://pypi.org/project/django-appconf/",
  "project_url": "https://pypi.org/project/django-appconf/",
  "project_urls": {
    "Homepage": "https://django-appconf.readthedocs.io/",
    "Source": "https://github.com/django-compressor/django-appconf"
  },
  "release_url": "https://pypi.org/project/django-appconf/1.0.6/",
  "requires_dist": [
    "django"
  ],
  "requires_python": ">=3.7",
  "summary": "a helper class for handling configuration defaults of packaged apps gracefully.",
  "version": "1.0.6",
  "releases": [],
  "developers": [
    "jannis@leidel.info",
    "jannis_leidel"
  ],
  "kwds": "_appconfig djangoproject appconfig_ django appconf",
  "license_kwds": "bsd",
  "libtype": "pypi",
  "id": "pypi_django_appconf",
  "homepage": "https://django-appconf.readthedocs.io/",
  "release_count": 11,
  "dependency_ids": [
    "pypi_django"
  ]
}
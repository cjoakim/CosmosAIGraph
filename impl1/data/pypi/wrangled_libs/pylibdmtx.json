{
  "classifiers": [
    "development status :: 4 - beta",
    "license :: osi approved :: mit license",
    "programming language :: python :: 2",
    "programming language :: python :: 2.7",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.5",
    "programming language :: python :: 3.6",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: utilities"
  ],
  "description": "pylibdmtx\n=========\n\n.. image:: https://img.shields.io/badge/python-2.7%2c%203.5%2c%203.6%2c%203.7%2c%203.8%2c%203.9%2c%203.10-blue.svg\n    :target: https://github.com/naturalhistorymuseum/pylibdmtx\n\n.. image:: https://badge.fury.io/py/pylibdmtx.svg\n    :target: https://pypi.python.org/pypi/pylibdmtx\n\n.. image:: https://img.shields.io/github/workflow/status/naturalhistorymuseum/pylibdmtx/tests/master?label=tests\n    :target: https://github.com/naturalhistorymuseum/pylibdmtx/actions?query=workflow%3a%22tests%22\n\n.. image:: https://coveralls.io/repos/github/naturalhistorymuseum/pylibdmtx/badge.svg?branch=master\n    :target: https://coveralls.io/github/naturalhistorymuseum/pylibdmtx?branch=master\n\nread and write data matrix barcodes from python 2 and 3 using the\n`libdmtx <http://libdmtx.sourceforge.net/>`__ library.\n\n-  pure python\n-  works with pil / pillow images, opencv / imageio / numpy ``ndarray``\\ s, and raw bytes\n-  decodes locations of barcodes\n-  no dependencies, other than the libdmtx library itself\n-  tested on python 2.7, and python 3.5 to 3.10\n\nthe older\n`pydmtx <https://sourceforge.net/p/libdmtx/dmtx-wrappers/ci/master/tree/python/>`__\npackage is stuck in python 2.x-land.\n\ninstallation\n------------\n\nthe ``libdmtx`` ``dll``\\ s are included with the windows python wheels.\non other operating systems, you will need to install the ``libdmtx`` shared\nlibrary.\n\nmac os x:\n\n::\n\n   brew install libdmtx\n\nlinux:\n\n::\n\n   sudo apt-get install libdmtx0a\n\ninstall this python wrapper; use the second form to install dependencies of the\n``read_datamatrix`` and ``write_datamatrix`` command-line scripts:\n\n::\n\n   pip install pylibdmtx\n   pip install pylibdmtx[scripts]\n\nexample usage\n-------------\n\nthe ``decode`` function accepts instances of ``pil.image``.\n\n::\n\n   >>> from pylibdmtx.pylibdmtx import decode\n   >>> from pil import image\n   >>> decode(image.open('pylibdmtx/tests/datamatrix.png'))\n   [decoded(data='stegosaurus', rect=rect(left=5, top=6, width=96, height=95)),\n    decoded(data='plesiosaurus', rect=rect(left=298, top=6, width=95, height=95))]\n\nit also accepts instances of ``numpy.ndarray``, which might come from loading\nimages using `opencv <http://opencv.org/>`__.\n\n::\n\n   >>> import cv2\n   >>> decode(cv2.imread('pylibdmtx/tests/datamatrix.png'))\n   [decoded(data='stegosaurus', rect=rect(left=5, top=6, width=96, height=95)),\n    decoded(data='plesiosaurus', rect=rect(left=298, top=6, width=95, height=95))]\n\nyou can also provide a tuple ``(pixels, width, height)``\n\n::\n\n   >>> image = cv2.imread('pylibdmtx/tests/datamatrix.png')\n   >>> height, width = image.shape[:2]\n   >>> decode((image.tobytes(), width, height))\n   [decoded(data='stegosaurus', rect=rect(left=5, top=6, width=96, height=95)),\n    decoded(data='plesiosaurus', rect=rect(left=298, top=6, width=95, height=95))]\n\nthe ``encode`` function generates an image containing a data matrix barcode:\n\n::\n\n  >>> from pylibdmtx.pylibdmtx import encode\n  >>> encoded = encode('hello world'.encode('utf8'))\n  >>> img = image.frombytes('rgb', (encoded.width, encoded.height), encoded.pixels)\n  >>> img.save('dmtx.png')\n  >>> print(decode(image.open('dmtx.png')))\n  [decoded(data=b'hello world', rect=rect(left=9, top=10, width=80, height=79))]\n\nwindows error message\n---------------------\n\nif you see an ugly ``importerror`` when importing ``pylibdmtx`` on\nwindows you will most likely need the `visual c++ redistributable packages for\nvisual studio 2013\n<https://www.microsoft.com/en-us/download/details.aspx?id=40784>`__.\ninstall ``vcredist_x64.exe`` if using 64-bit python, ``vcredist_x86.exe`` if\nusing 32-bit python.\n\nlimitations\n-----------\n\nfeel free to submit a pr to address any of these.\n\n-  i took the bone-headed approach of copying the logic in\n   ``pydmtx``\\ \u2019s ``decode`` function (in\n   `pydmtxmodule.c <https://sourceforge.net/p/libdmtx/dmtx-wrappers/ci/master/tree/python/>`__); there might be more of ``libdmtx``\\ \u2019s functionality that could usefully\n   be exposed\n\n-  i exposed the bare minimum of functions, defines, enums and typedefs neede to\n   reimplement ``pydmtx``\\ \u2019s ``decode`` function\n\ncontributors\n------------\n\n-  vinicius kursancew (@kursancew) - first implementation of barcode writing\n-  joseph weston (@jbweston) - support for ``libdmtx`` 0.7.5\n\nlicense\n-------\n\n``pylibdmtx`` is distributed under the mit license (see ``licence.txt``).\nthe ``libdmtx`` shared library is distributed under the simplified bsd license\n(see ``libdmtx-licence.txt``).\n\n\n",
  "docs_url": null,
  "keywords": "",
  "license": "mit",
  "name": "pylibdmtx",
  "package_url": "https://pypi.org/project/pylibdmtx/",
  "project_url": "https://pypi.org/project/pylibdmtx/",
  "project_urls": {
    "Homepage": "https://github.com/NaturalHistoryMuseum/pylibdmtx/"
  },
  "release_url": "https://pypi.org/project/pylibdmtx/0.1.10/",
  "requires_dist": [
    "enum34 (>=1.1.6) ; python_version==\"2.7\"",
    "pathlib (>=1.0.1) ; python_version==\"2.7\"",
    "Pillow (>=3.2.0) ; extra == 'scripts'"
  ],
  "requires_python": "",
  "summary": "read and write data matrix barcodes from python 2 and 3.",
  "version": "0.1.10",
  "releases": [],
  "developers": [
    "lawrence_hudson",
    "quicklizard@googlemail.com"
  ],
  "kwds": "pylibdmtx pydmtx pydmtxmodule py pypi",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_pylibdmtx",
  "homepage": "https://github.com/naturalhistorymuseum/pylibdmtx/",
  "release_count": 11,
  "dependency_ids": [
    "pypi_enum34",
    "pypi_pathlib",
    "pypi_pillow"
  ]
}
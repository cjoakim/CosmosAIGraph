{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: developers",
    "license :: osi approved :: apache software license",
    "programming language :: python :: 2",
    "programming language :: python :: 3"
  ],
  "description": "canonical json\n==============\n\n.. image:: https://img.shields.io/pypi/v/canonicaljson.svg\n    :target: https://pypi.python.org/pypi/canonicaljson/\n    :alt: latest version\n\nfeatures\n--------\n\n* encodes objects and arrays as `rfc 7159`_ json.\n* sorts object keys so that you get the same result each time.\n* has no insignificant whitespace to make the output as small as possible.\n* escapes only the characters that must be escaped, u+0000 to u+0019 / u+0022 /\n  u+0056, to keep the output as small as possible.\n* uses the shortest escape sequence for each escaped character.\n* encodes the json as utf-8.\n* can be configured to encode custom types unknown to the stdlib json encoder.\n\nsupports python versions 3.7 and newer.\n\n.. _`rfc 7159`: https://tools.ietf.org/html/rfc7159\n\ninstalling\n----------\n\n.. code:: bash\n\n   pip install canonicaljson\n\nusing\n-----\n\nto encode an object into the canonicaljson:\n\n.. code:: python\n\n    import canonicaljson\n    assert canonicaljson.encode_canonical_json({}) == b'{}'\n\nthere's also an iterator version:\n\n.. code:: python\n\n    import canonicaljson\n    assert b''.join(canonicaljson.iterencode_canonical_json({})) == b'{}'\n\nthe underlying json implementation can be chosen with the following:\n\n.. code:: python\n\n    import json\n    import canonicaljson\n    canonicaljson.set_json_library(json)\n\n.. note::\n\n    by default canonicaljson uses `simplejson`_ under the hood (except for pypy,\n    which uses the standard library json module).\n\n.. _simplejson: https://simplejson.readthedocs.io/\n\na preserialisation hook allows you to encode objects which aren't encodable by the\nstandard library ``jsonencoder``.\n\n.. code:: python\n\n    import canonicaljson\n    from typing import dict\n\n    class customtype:\n        pass\n\n    def callback(c: customtype) -> dict[str, str]:\n        return {\"hello\": \"world!\"}\n\n    canonicaljson.register_preserialisation_callback(customtype, callback)\n    assert canonicaljson.encode_canonical_json(customtype()) == b'{\"hello\":\"world!\"}'\n",
  "docs_url": null,
  "keywords": "json",
  "license": "apache license, version 2.0",
  "name": "canonicaljson",
  "package_url": "https://pypi.org/project/canonicaljson/",
  "project_url": "https://pypi.org/project/canonicaljson/",
  "project_urls": {
    "Homepage": "https://github.com/matrix-org/python-canonicaljson"
  },
  "release_url": "https://pypi.org/project/canonicaljson/2.0.0/",
  "requires_dist": [],
  "requires_python": ">=3.7",
  "summary": "canonical json",
  "version": "2.0.0",
  "releases": [],
  "developers": [
    "matrix",
    "packages@matrix.org"
  ],
  "kwds": "encode_canonical_json jsonencoder canonicaljson iterencode_canonical_json json",
  "license_kwds": "apache license, version 2.0",
  "libtype": "pypi",
  "id": "pypi_canonicaljson",
  "homepage": "https://github.com/matrix-org/python-canonicaljson",
  "release_count": 17,
  "dependency_ids": []
}
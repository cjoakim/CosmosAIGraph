{
  "classifiers": [
    "development status :: 4 - beta",
    "intended audience :: developers",
    "license :: osi approved :: bsd license",
    "topic :: software development :: libraries"
  ],
  "description": "===\nsql\n===\n\n\nwhy?\n====\n\n`db api 2.0`_ works. orms are convenient but sometimes overkill. ``sql`` is a\nlightweight wrapper sitting on top of any db api 2.0 connection offering a\npostgres_ like interface which makes working with sql results bliss.\n\nhow?\n====\n\n>>> import sqlite3\n>>> connection = sqlite3.connect(':memory:')\n\n>>> import sql\n>>> bliss = sql.sql(connection)\n\nrun\n---\n\n`run` is the method to use when you want to run a query but do not care about\nthe result e.g. to create a table:\n\n>>> bliss.run(\"create table contributors (firstname varchar, lastname varchar)\") #doctest: +ellipsis\n<sql.sql object ...>\n>>> bliss.run(\"insert into contributors values (?, ?)\", [('andrew', 'kuchling'),\n...                                                      ('james', 'henstridge'),\n...                                                      ('daniele', 'varrazzo'),\n...                                                      ('marc-andre', 'lemburg')]) #doctest: +ellipsis\n<sql.sql object ...>\n\nnothing impressive so far, creating a cursor and calling executemany would achieve\nthe same result.\n\ncommit\n------\n\nadded in version `2022.4.0` \n\n>>> bliss.run(\"insert into contributors values (?, ?)\", (\"chad\", \"whitacre\")) #doctest: +ellipsis\n<sql.sql object ...>\n>>> bliss.commit() \n\njust because it is shorter than `bliss.connection.commit()`\n\n`run` returns self so `commit` can be chained\n\n>>> bliss.run(\"insert into contributors values (?, ?)\", (\"guido\", \"van rossum\")).commit()\n\none\n---\n\n`one` is the method to use when you know the result is a single row or only care\nabout one.\n\n>>> bliss.one(\"select firstname from contributors where lastname='lemburg'\") # doctest: +skip\nu'marc-andre'\n\nthe string, nothing but the string, which in my book beats:\n\n>>> cursor = connection.cursor()\n>>> cursor.execute(\"select firstname from contributors where lastname='lemburg'\") # doctest: +ellipsis\n<sqlite3.cursor object at ...>\n>>> cursor.fetchone() # doctest: +skip\n(u'marc-andre',)\n\neven better, if the result contains several column, one returns a namedtuple_:\n\n>>> bliss.one(\"select * from contributors where firstname='james'\") # doctest: +skip\nrecord(firstname=u'james', lastname=u'henstridge')\n\nall\n---\n\n`all` is the method to use to retrieve all rows from a query.\n\n>>> bliss.all(\"select firstname from contributors\") #doctest: +skip\n[u'andrew', u'james', u'daniele', u'marc-andre']\n\nit returns a list of namedtuples when appropriate:\n\n>>> bliss.all(\"select firstname, length(lastname) as length from contributors\") # doctest: +normalize_whitespace +skip\n[record(firstname=u'andrew', length=8),\n record(firstname=u'james', length=10),\n record(firstname=u'daniele', length=8),\n record(firstname=u'marc-andre', length=7)]\n\n.. _db api 2.0: http://www.python.org/dev/peps/pep-0249/\n.. _postgres: https://postgres-py.readthedocs.org/en/latest/\n.. _namedtuple: http://docs.python.org/3/library/collections.html#collections.namedtuple\n\n\n",
  "docs_url": null,
  "keywords": "",
  "license": "bsd",
  "name": "sql",
  "package_url": "https://pypi.org/project/sql/",
  "project_url": "https://pypi.org/project/sql/",
  "project_urls": {
    "Homepage": "http://github.com/3kwa/sql"
  },
  "release_url": "https://pypi.org/project/sql/2022.4.0/",
  "requires_dist": [],
  "requires_python": "",
  "summary": "db api 2.0 for humans",
  "version": "2022.4.0",
  "releases": [],
  "developers": [
    "eugene.vandenbulke@gmail.com",
    "eugene_van_den_bulke"
  ],
  "kwds": "sqlite3 postgres_ _postgres postgres _db",
  "license_kwds": "bsd",
  "libtype": "pypi",
  "id": "pypi_sql",
  "homepage": "http://github.com/3kwa/sql",
  "release_count": 6,
  "dependency_ids": []
}
{
  "classifiers": [
    "development status :: 3 - alpha",
    "intended audience :: science/research",
    "license :: osi approved :: mit license",
    "natural language :: english",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "programming language :: python :: implementation :: cpython",
    "topic :: scientific/engineering",
    "topic :: scientific/engineering :: mathematics",
    "topic :: scientific/engineering :: physics"
  ],
  "description": "stochastic\n==========\n\n|build| |rtd| |codecov| |pypi| |pyversions|\n\n.. |build| image:: https://github.com/crflynn/stochastic/actions/workflows/build.yml/badge.svg\n    :target: https://github.com/crflynn/stochastic/actions\n\n.. |rtd| image:: https://img.shields.io/readthedocs/stochastic.svg\n    :target: http://stochastic.readthedocs.io/en/latest/\n\n.. |codecov| image:: https://codecov.io/gh/crflynn/stochastic/branch/master/graphs/badge.svg\n    :target: https://codecov.io/gh/crflynn/stochastic\n\n.. |pypi| image:: https://img.shields.io/pypi/v/stochastic.svg\n    :target: https://pypi.python.org/pypi/stochastic\n\n.. |pyversions| image:: https://img.shields.io/pypi/pyversions/stochastic.svg\n    :target: https://pypi.python.org/pypi/stochastic\n\n\na python package for generating realizations of stochastic processes.\n\ninstallation\n------------\n\nthe ``stochastic`` package is available on pypi and can be installed using pip\n\n.. code-block:: shell\n\n    pip install stochastic\n\ndependencies\n~~~~~~~~~~~~\n\nstochastic uses ``numpy`` for many calculations and ``scipy`` for sampling\nspecific random variables.\n\nprocesses\n---------\n\nthis package offers a number of common discrete-time, continuous-time, and\nnoise process objects for generating realizations of stochastic processes as\n``numpy`` arrays.\n\nthe diffusion processes are approximated using the euler\u2013maruyama method.\n\nhere are the currently supported processes and their class references within\nthe package.\n\n* stochastic.processes\n\n    * continuous\n\n        * besselprocess\n        * brownianbridge\n        * brownianexcursion\n        * brownianmeander\n        * brownianmotion\n        * cauchyprocess\n        * fractionalbrownianmotion\n        * gammaprocess\n        * geometricbrownianmotion\n        * inversegaussianprocess\n        * mixedpoissonprocess\n        * multifractionalbrownianmotion\n        * poissonprocess\n        * squaredbesselprocess\n        * variancegammaprocess\n        * wienerprocess\n\n    * diffusion\n\n        * diffusionprocess (generalized)\n        * constantelasticityvarianceprocess\n        * coxingersollrossprocess\n        * extendedvasicekprocess\n        * ornsteinuhlenbeckprocess\n        * vasicekprocess\n\n    * discrete\n\n        * bernoulliprocess\n        * chineserestaurantprocess\n        * dirichletprocess\n        * markovchain\n        * moranprocess\n        * randomwalk\n\n    * noise\n\n        * bluenoise\n        * browniannoise\n        * colorednoise\n        * pinknoise\n        * rednoise\n        * violetnoise\n        * whitenoise\n        * fractionalgaussiannoise\n        * gaussiannoise\n\nusage patterns\n--------------\n\nsampling\n~~~~~~~~\n\nto use ``stochastic``, import the process you want and instantiate with the\nrequired parameters. every process class has a ``sample`` method for generating\nrealizations. the ``sample`` methods accept a parameter ``n`` for the quantity\nof steps in the realization, but others (poisson, for instance) may take\nadditional parameters. parameters can be accessed as attributes of the\ninstance.\n\n.. code-block:: python\n\n    from stochastic.processes.discrete import bernoulliprocess\n\n\n    bp = bernoulliprocess(p=0.6)\n    s = bp.sample(16)\n    success_probability = bp.p\n\n\ncontinuous processes provide a default parameter, ``t``, which indicates the\nmaximum time of the process realizations. the default value is 1. the sample\nmethod will generate ``n`` equally spaced increments on the\ninterval ``[0, t]``.\n\nsampling at specific times\n~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nsome continuous processes also provide a ``sample_at()`` method, in which a\nsequence of time values can be passed at which the object will generate a\nrealization. this method ignores the parameter, ``t``, specified on\ninstantiation.\n\n\n.. code-block:: python\n\n    from stochastic.processes.continuous import brownianmotion\n\n\n    bm = brownianmotion(drift=1, scale=1, t=1)\n    times = [0, 3, 10, 11, 11.2, 20]\n    s = bm.sample_at(times)\n\nsample times\n~~~~~~~~~~~~\n\ncontinuous processes also provide a method ``times()`` which generates the time\nvalues (using ``numpy.linspace``) corresponding to a realization of ``n``\nsteps. this is particularly useful for plotting your samples.\n\n\n.. code-block:: python\n\n    import matplotlib.pyplot as plt\n    from stochastic.processes.continuous import fractionalbrownianmotion\n\n\n    fbm = fractionalbrownianmotion(hurst=0.7, t=1)\n    s = fbm.sample(32)\n    times = fbm.times(32)\n\n    plt.plot(times, s)\n    plt.show()\n\n\nspecifying an algorithm\n~~~~~~~~~~~~~~~~~~~~~~~\n\nsome processes provide an optional parameter ``algorithm``, in which one can\nspecify which algorithm to use to generate the realization using the\n``sample()`` or ``sample_at()`` methods. see the documentation for\nprocess-specific implementations.\n\n\n.. code-block:: python\n\n    from stochastic.processes.noise import fractionalgaussiannoise\n\n\n    fgn = fractionalgaussiannoise(hurst=0.6, t=1)\n    s = fgn.sample(32, algorithm='hosking')\n",
  "docs_url": null,
  "keywords": "stochastic,processes",
  "license": "mit",
  "name": "stochastic",
  "package_url": "https://pypi.org/project/stochastic/",
  "project_url": "https://pypi.org/project/stochastic/",
  "project_urls": {
    "Documentation": "https://stochastic.readthedocs.io/en/latest/",
    "Homepage": "https://github.com/crflynn/stochastic",
    "Repository": "https://github.com/crflynn/stochastic"
  },
  "release_url": "https://pypi.org/project/stochastic/0.7.0/",
  "requires_dist": [
    "numpy (>=1.19,<2.0)",
    "scipy (>=1.8,<2.0)"
  ],
  "requires_python": ">=3.8,<3.11",
  "summary": "generate realizations of stochastic processes",
  "version": "0.7.0",
  "releases": [],
  "developers": [
    "crf204@gmail.com",
    "flynn"
  ],
  "kwds": "stochastic svg wienerprocess diffusionprocess constantelasticityvarianceprocess",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_stochastic",
  "homepage": "https://github.com/crflynn/stochastic",
  "release_count": 7,
  "dependency_ids": [
    "pypi_numpy",
    "pypi_scipy"
  ]
}
{
  "classifiers": [],
  "description": "vconnector - vmware vsphere connector module for python\n=======================================================\n\n.. image:: https://img.shields.io/pypi/v/vconnector.svg\n    :target: https://pypi.python.org/pypi/vconnector/\n    :alt: latest version\n\n.. image:: https://img.shields.io/pypi/dm/vconnector.svg\n    :target: https://pypi.python.org/pypi/vconnector/\n    :alt: downloads\n\nvconnector is a wrapper module around\n`pyvmomi vmware vsphere bindings <https://github.com/vmware/pyvmomi>`_,\nwhich provides methods for connecting and retrieving of\nobjects from a vmware vsphere server.\n\nthe purpose of vconnector is to provide the basic primitives for\nbuilding complex applications. vconnector can also be used for\nmanaging the user/pass/host credentials for your vsphere environment\nusing an sqlite database, which in turn can be shared between\nmultiple applications requiring access to your vsphere environment\nthrough a common interface.\n\nrequirements\n============\n\n* `python 2.7.x, 3.2.x or later <https://www.python.org/>`_\n* `docopt <https://github.com/docopt/docopt>`_\n* `pyvmomi <https://github.com/vmware/pyvmomi>`_\n* `tabulate <https://pypi.python.org/pypi/tabulate>`_\n\ncontributions\n=============\n\nvconnector is hosted on\n`github <https://github.com/dnaeon/py-vconnector>`_. please contribute\nby reporting issues, suggesting features or by sending patches\nusing pull requests.\n\ninstallation\n============\n\nthe easiest way to install vconnector is by using ``pip``:\n\n.. code-block:: bash\n\n   $ pip install vconnector\n\nin order to install the latest version of vconnector from the\ngithub repository simply execute these commands instead:\n\n.. code-block:: bash\n\n   $ git clone https://github.com/dnaeon/py-vconnector.git\n   $ cd py-vconnector\n   $ python setup.py install\n\t\napplications using vconnector module\n====================================\n\n* `vpoller - distributed vsphere api proxy <https://github.com/dnaeon/py-vpoller>`_\n* `vevents - vmware vsphere events from the command-line <https://github.com/dnaeon/py-vevents>`_\n\nusing the vconnector-cli tool\n=============================\n\nusing the ``vconnector-cli`` tool you can manage the user/pass/host\ncredentials of your vsphere environment. the ``vconnector-cli`` tool\nstores this information in an sqlite database file,\nwhich also makes it easy to be shared between applications.\n\nfirst, initialize the vconnector database by executing the\ncommand below:\n\n.. code-block:: bash\n\n   $ vconnector-cli init\n\nhere is how to add a new vsphere host to the vconnector database:\n\n.. code-block:: bash\n\n   $ vconnector-cli -h vc01.example.org -u root -p p4ssw0rd add\n\nhere is how to update an already existing vsphere host\nfrom the vconnector database:\n\n.. code-block:: bash\n\n   $ vconnector-cli -h vc01.example.org -u root -p newp4ssw0rd update\n\nhere is how to remove a vsphere host using vconnector-cli:\n\n.. code-block:: bash\n\n   $ vconnector-cli -h vc01.example.org remove\n\nhere is how to enable a vsphere host using vconnector-cli:\n\n.. code-block:: bash\n\n   $ vconnector-cli -h vc01.example.org enable\n\nhere this is how to disable a vsphere host:\n\n.. code-block:: bash\n\n   $ vconnector-cli -h vc01.example.org disable\n\nand here is how to get the currently registered vsphere hosts from\nthe vconnector database:\n\n.. code-block:: bash\n\n   $ vconnector-cli get\n   +---------------------------+---------------------+--------------+-----------+\n   | hostname                  | username            | password     |   enabled |\n   +===========================+=====================+==============+===========+\n   | vc01.example.org          | root                | p4ssw0rd     |         0 |\n   +---------------------------+---------------------+--------------+-----------+\n   \nusing the vconnector api\n========================\n\nhere are a few examples of using the ``vconnector`` module api.\n\nconnecting to a vsphere host:\n\n.. code-block:: python\n\n   >>> from vconnector.core import vconnector\n   >>> client = vconnector(\n   ...     user='root',\n   ...     pwd='p4ssw0rd',\n   ...     host='vc01.example.org'\n   ...)\n   >>> client.connect()\n\ndisconnecting from a vsphere host:\n\n.. code-block:: python\n\n   >>> client.disconnect()\n\nre-connecting to a vsphere host:\n\n.. code-block:: python\n\n   >>> client.reconnect()\n\nhow to get a ``vmware vsphere view`` of all ``virtualmachine``\nmanaged objects:\n\n.. code-block:: python\n\n   >>> from __future__ import print_function\n   >>> from vconnector.core import vconnector\n   >>> client = vconnector(\n   ...     user='root',\n   ...     pwd='p4ssw0rd',\n   ...     host='vc01.example.org'\n   ...)\n   >>> client.connect()\n   >>> vms = client.get_vm_view()\n   >>> print(vms.view)\n   (managedobject) [\n\t'vim.virtualmachine:vm-36',\n\t'vim.virtualmachine:vm-129',\n\t'vim.virtualmachine:vm-162',\n\t'vim.virtualmachine:vm-146',\n\t'vim.virtualmachine:vm-67',\n\t'vim.virtualmachine:vm-147',\n\t'vim.virtualmachine:vm-134',\n\t'vim.virtualmachine:vm-88'\n   ]\n   >>> client.disconnect()\t\n\nhow to get a ``managed object`` by a specific property, e.g. find the\nmanaged object of an esxi host which name is ``esxi01.example.org``:\n\n.. code-block:: python\n\n   >>> from __future__ import print_function\n   >>> import pyvmomi\n   >>> from vconnector.core import vconnector\n   >>> client = vconnector(\n   ...     user='root',\n   ...     pwd='p4ssw0rd',\n   ...     host='vc01.example.org'\n   ... )\n   >>> client.connect()\n   >>> host = client.get_object_by_property(\n   ...     property_name='name',\n   ...     property_value='esxi01.example.org',\n   ...     obj_type=pyvmomi.vim.hostsystem\n   ... )\n   >>> print(host.name)\n   'esxi01.example.org'\n   >>> client.disconnect()\n\nhow to collect properties for ``vsphere managed objects``, e.g. get\nthe ``name`` and ``capacity`` properties for all ``datastore``\nmanaged objects:\n\n.. code-block:: python\n\n   >>> from __future__ import print_function\n   >>> import pyvmomi\n   >>> from vconnector.core import vconnector\n   >>> client = vconnector(\n   ...     user='root',\n   ...     pwd='p4ssw0rd',\n   ...     host='vc01.example.org'\n   ... )\n   >>> client.connect()\n   >>> datastores = client.get_datastore_view()\n   >>> result = client.collect_properties(\n   ...     view_ref=datastores,\n   ...     obj_type=pyvmomi.vim.datastore,\n   ...     path_set=['name', 'summary.capacity']\n   ...)\n   >>> print(result)\n   [{u'summary.capacity': 994821799936l, u'name': 'datastore1'}]\n   >>> client.disconnect()\n\n",
  "docs_url": null,
  "keywords": "",
  "license": "bsd",
  "name": "vconnector",
  "package_url": "https://pypi.org/project/vconnector/",
  "project_url": "https://pypi.org/project/vconnector/",
  "project_urls": {
    "Download": "https://github.com/dnaeon/py-vconnector/releases",
    "Homepage": "https://github.com/dnaeon/py-vconnector"
  },
  "release_url": "https://pypi.org/project/vconnector/0.6.0/",
  "requires_dist": [],
  "requires_python": "",
  "summary": "vmware vsphere connector module for python",
  "version": "0.6.0",
  "releases": [],
  "developers": [
    "dnaeon@gmail.com",
    "marin_atanasov_nikolov"
  ],
  "kwds": "vconnector vc01 vsphere vmware pyvmomi",
  "license_kwds": "bsd",
  "libtype": "pypi",
  "id": "pypi_vconnector",
  "homepage": "https://github.com/dnaeon/py-vconnector",
  "release_count": 17,
  "dependency_ids": []
}
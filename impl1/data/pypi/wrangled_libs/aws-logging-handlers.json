{
  "classifiers": [
    "development status :: 3 - alpha",
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "programming language :: python :: 3",
    "programming language :: python :: 3.2",
    "programming language :: python :: 3.3",
    "programming language :: python :: 3.4",
    "programming language :: python :: 3.5",
    "programming language :: python :: 3.6",
    "programming language :: python :: 3.7"
  ],
  "description": "aws logging handlers\n====================\n\na python multithreaded logging handler package that streams records to\naws services objects with support for the following aws services: \\* s3\n\\* kinesis\n\nsupports gzip compression(in s3)\n\ngetting started\n---------------\n\nprerequisites\n~~~~~~~~~~~~~\n\nasynchronous multipart uploading relies on the ability to use multiple\nthreads #### packages:\n\n::\n\n   boto3\n\ninstalling\n~~~~~~~~~~\n\ninstallation using pip\n\n::\n\n   pip install aws-logging-handlers\n\nexamples\n~~~~~~~~\n\nstream log records to s3 and kinesis\n\n::\n\n    import logging\n    from aws_logging_handlers.s3 import s3handler\n    from aws_logging_handlers.kinesis import kinesishandler\n\n    bucket=\"test_bucket\" # the bucket should already exist\n\n    # the log will be rotated to a new object either when an object reaches 5 mb or when 120 seconds pass from the last rotation/initial logging\n    s3_handler = s3handler(\"test_log\", bucket, workers=3)\n    kinesis_handler = kinesishandler('log_test', 'us-east-1', workers=1)\n    formatter = logging.formatter('[%(asctime)s] %(filename)s:%(lineno)d} %(levelname)s - %(message)s')\n    s3_handler.setformatter(formatter)\n    kinesis_handler.setformatter(formatter)\n    logger = logging.getlogger('root')\n    logger.setlevel(logging.info)\n    logger.addhandler(s3_handler)\n    logger.addhandler(kinesis_handler)\n\n    for i in range(0, 100000):\n        logger.info(\"test info message\")\n        logger.warning(\"test warning message\")\n        logger.error(\"test error message\")\n\n    logging.shutdown()\n\nto be developed\n---------------\n\n-  support for asyncio\n-  logging and upload metrics\n\nlicense\n-------\n\nthis project is licensed under the mit license - see the `license.md`_\nfile for details\n\n.. _license.md: license",
  "docs_url": null,
  "keywords": "logging,s3,aws,handler,amazon,stream,kinesis,firehose",
  "license": "",
  "name": "aws-logging-handlers",
  "package_url": "https://pypi.org/project/aws-logging-handlers/",
  "project_url": "https://pypi.org/project/aws-logging-handlers/",
  "project_urls": {
    "Download": "https://github.com/omrikiei/aws_logging_handlers/archive/2.0.4.tar.gz",
    "Homepage": "https://github.com/omrikiei/aws_logging_handlers/"
  },
  "release_url": "https://pypi.org/project/aws-logging-handlers/2.0.5/",
  "requires_dist": [],
  "requires_python": "",
  "summary": "logging aws_logging_handlers to aws services that support s3 and kinesis stream logging with multiple threads",
  "version": "2.0.5",
  "releases": [],
  "developers": [
    "omri_eival",
    "omrieival@gmail.com"
  ],
  "kwds": "aws_logging_handlers s3_handler kinesis_handler test_bucket logging",
  "license_kwds": "",
  "libtype": "pypi",
  "id": "pypi_aws_logging_handlers",
  "homepage": "https://github.com/omrikiei/aws_logging_handlers/",
  "release_count": 10,
  "dependency_ids": []
}
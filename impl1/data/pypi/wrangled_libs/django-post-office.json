{
  "classifiers": [
    "development status :: 5 - production/stable",
    "environment :: web environment",
    "framework :: django",
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "operating system :: os independent",
    "programming language :: python",
    "programming language :: python :: 3",
    "programming language :: python :: 3 :: only",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: communications :: email",
    "topic :: internet :: www/http",
    "topic :: software development :: libraries :: python modules"
  ],
  "description": "a django app to monitor and send mail asynchronously, complete with template support.\n# django post office\n\ndjango post office is a simple app to send and manage your emails in\ndjango. some awesome features are:\n\n-   designed to scale, handles millions of emails efficiently\n-   allows you to send email asynchronously\n-   multi backend support\n-   supports html email\n-   supports inlined images in html email\n-   supports database based email templates\n-   supports multilingual email templates (i18n)\n-   built in scheduling support\n-   works well with task queues like [rq](http://python-rq.org) or\n    [celery](http://www.celeryproject.org)\n-   uses multiprocessing and threading to send a large number of emails in parallel\n\n## dependencies\n\n-   [django \\>= 2.2](https://djangoproject.com/)\n-   [jsonfield](https://github.com/rpkilby/jsonfield)\n-   [bleach](https://bleach.readthedocs.io/)\n\nwith this optional dependency, html emails are nicely rendered\ninside the django admin backend. without this library, all html tags\nwill otherwise be stripped for security reasons.\n\n## installation\n\n[![build status](https://github.com/ui/django-post_office/actions/workflows/test.yml/badge.svg)](https://github.com/ui/django-post_office/actions)\n[![pypi](https://img.shields.io/pypi/pyversions/django-post_office.svg)]()\n[![pypi version](https://img.shields.io/pypi/v/django-post_office.svg)](https://pypi.python.org/pypi/django-post_office)\n[![pypi](https://img.shields.io/pypi/l/django-post_office.svg)]()\n\n\n```sh\npip install django-post_office\n```\n\nadd `post_office` to your installed_apps in django's `settings.py`:\n\n```python\ninstalled_apps = (\n    # other apps\n    \"post_office\",\n)\n```\n\nrun `migrate`:\n\n```sh\npython manage.py migrate\n```\n\nset `post_office.emailbackend` as your `email_backend` in django's `settings.py`:\n\n```python\nemail_backend = 'post_office.emailbackend'\n```\n\n## quickstart\n\nsend a simple email is really easy:\n\n```python\nfrom post_office import mail\n\nmail.send(\n    'recipient@example.com', # list of email addresses also accepted\n    'from@example.com',\n    subject='my email',\n    message='hi there!',\n    html_message='hi <strong>there</strong>!',\n)\n```\n\nif you want to use templates, ensure that django's admin interface is\nenabled. create an `emailtemplate` instance via `admin` and do the\nfollowing:\n\n```python\nfrom post_office import mail\n\nmail.send(\n    'recipient@example.com', # list of email addresses also accepted\n    'from@example.com',\n    template='welcome_email', # could be an emailtemplate instance or name\n    context={'foo': 'bar'},\n)\n```\n\nthe above command will put your email on the queue so you can use the\ncommand in your webapp without slowing down the request/response cycle\ntoo much. to actually send them out, run\n`python manage.py send_queued_mail`. you can schedule this management\ncommand to run regularly via cron:\n\n    * * * * * (/usr/bin/python manage.py send_queued_mail >> send_mail.log 2>&1)\n\n## usage\n\n### mail.send()\n\n`mail.send` is the most important function in this library, it takes\nthese arguments:\n\n| argument | required | description |\n| --- | --- | --- |\n| recipients | yes | list of recipient email addresses |\n| sender | no | defaults to `settings.default_from_email`, display name like `john <john@a.com>` is allowed |\n| subject | no | email subject (if `template` is not specified) |\n| message | no | email content (if `template` is not specified) |\n| html_message | no | html content (if `template` is not specified) |\n| template | no | `emailtemplate` instance or name of template |\n| language | no | language in which you want to send the email in (if you have multilingual email templates). |\n| cc | no | list of emails, will appear in `cc` field |\n| bcc | no | list of emails, will appear in `bcc` field |\n| attachments | no | email attachments - a dict where the keys are the filenames and the values are files, file-like-objects or path to file |\n| context | no | a dict, used to render templated email |\n| headers | no | a dictionary of extra headers on the message |\n| scheduled_time | no | a date/datetime object indicating when the email should be sent |\n| expires_at | no | if specified, mails that are not yet sent won't be delivered after this date. |\n| priority | no | `high`, `medium`, `low` or `now` (sent immediately) |\n| backend | no | alias of the backend you want to use, `default` will be used if not specified. |\n| render_on_delivery | no | setting this to `true` causes email to be lazily rendered during delivery. `template` is required when `render_on_delivery` is true. with this option, the full email content is never stored in the db. may result in significant space savings if you're sending many emails using the same template. |\n\nhere are a few examples.\n\nif you just want to send out emails without using database templates.\nyou can call the `send` command without the `template` argument.\n\n```python\nfrom post_office import mail\n\nmail.send(\n    ['recipient1@example.com'],\n    'from@example.com',\n    subject='welcome!',\n    message='welcome home, {{ name }}!',\n    html_message='welcome home, <b>{{ name }}</b>!',\n    headers={'reply-to': 'reply@example.com'},\n    scheduled_time=date(2014, 1, 1),\n    context={'name': 'alice'},\n)\n```\n\n`post_office` is also task queue friendly. passing `now` as priority\ninto `send_mail` will deliver the email right away (instead of queuing\nit), regardless of how many emails you have in your queue:\n\n```python\nfrom post_office import mail\n\nmail.send(\n    ['recipient1@example.com'],\n    'from@example.com',\n    template='welcome_email',\n    context={'foo': 'bar'},\n    priority='now',\n)\n```\n\nthis is useful if you already use something like [django-rq](https://github.com/ui/django-rq) to send emails\nasynchronously and only need to store email related activities and logs.\n\nif you want to send an email with attachments:\n\n```python\nfrom django.core.files.base import contentfile\nfrom post_office import mail\n\nmail.send(\n    ['recipient1@example.com'],\n    'from@example.com',\n    template='welcome_email',\n    context={'foo': 'bar'},\n    priority='now',\n    attachments={\n        'attachment1.doc': '/path/to/file/file1.doc',\n        'attachment2.txt': contentfile('file content'),\n        'attachment3.txt': {'file': contentfile('file content'), 'mimetype': 'text/plain'},\n    }\n)\n```\n\n### template tags and variables\n\n`post-office` supports django's template tags and variables. for\nexample, if you put `hello, {{ name }}` in the subject line and pass in\n`{'name': 'alice'}` as context, you will get `hello, alice` as subject:\n\n```python\nfrom post_office.models import emailtemplate\nfrom post_office import mail\n\nemailtemplate.objects.create(\n    name='morning_greeting',\n    subject='morning, {{ name|capfirst }}',\n    content='hi {{ name }}, how are you feeling today?',\n    html_content='hi <strong>{{ name }}</strong>, how are you feeling today?',\n)\n\nmail.send(\n    ['recipient@example.com'],\n    'from@example.com',\n    template='morning_greeting',\n    context={'name': 'alice'},\n)\n\n# this will create an email with the following content:\nsubject = 'morning, alice',\ncontent = 'hi alice, how are you feeling today?'\ncontent = 'hi <strong>alice</strong>, how are you feeling today?'\n```\n\n### multilingual email templates\n\nyou can easily create email templates in various different languages.\nfor example:\n\n```python\ntemplate = emailtemplate.objects.create(\n    name='hello',\n    subject='hello world!',\n)\n\n# add an indonesian version of this template:\nindonesian_template = template.translated_templates.create(\n    language='id',\n    subject='halo dunia!'\n)\n```\n\nsending an email using template in a non default language is similarly easy:\n\n```python\nmail.send(\n    ['recipient@example.com'],\n    'from@example.com',\n    template=template, # sends using the default template\n)\n\nmail.send(\n    ['recipient@example.com'],\n    'from@example.com',\n    template=template,\n    language='id', # sends using indonesian template\n)\n```\n\n### inlined images\n\noften one wants to render images inside a template, which are attached\nas inlined `mimeimage` to the outgoing email. this requires a slightly\nmodified django template engine, keeping a list of inlined images, which\nlater will be added to the outgoing message.\n\nfirst we must add a special django template backend to our list of template engines:\n\n```python\ntemplates = [\n    {\n        ...\n    }, {\n        'backend': 'post_office.template.backends.post_office.postofficetemplates',\n        'app_dirs': true,\n        'dirs': [],\n        'options': {\n            'context_processors': [\n                'django.contrib.auth.context_processors.auth',\n                'django.template.context_processors.debug',\n                'django.template.context_processors.i18n',\n                'django.template.context_processors.media',\n                'django.template.context_processors.static',\n                'django.template.context_processors.tz',\n                'django.template.context_processors.request',\n            ]\n        }\n    }\n]\n```\n\nthen we must tell post-office to use this template engine:\n\n```python\npost_office = {\n    'template_engine': 'post_office',\n}\n```\n\nin templates used to render html for emails add\n\n```\n{% load post_office %}\n\n<p>... somewhere in the body ...</p>\n<img src=\"{% inline_image 'path/to/image.png' %}\" />\n```\n\nhere the templatetag named `inline_image` is used to keep track of\ninlined images. it takes a single parameter. this can either be the\nrelative path to an image file located in one of the `static`\ndirectories, or the absolute path to an image file, or an image-file\nobject itself. templates rendered using this templatetag, render a\nreference id for each given image, and store these images inside the\ncontext of the adopted template engine. later on, when the rendered\ntemplate is passed to the mailing library, those images will be\ntransferred to the email message object as `mimeimage`-attachments.\n\nto send an email containing both, a plain text body and some html with\ninlined images, use the following code snippet:\n\n```python\nfrom django.core.mail import emailmultialternatives\nfrom django.template.loader import get_template\n\nsubject, body = \"hello\", \"plain text body\"\nfrom_email, to_email = \"no-reply@example.com\", \"john@example.com\"\nemail_message = emailmultialternatives(subject, body, from_email, [to_email])\ntemplate = get_template('email-template-name.html', using='post_office')\ncontext = {...}\nhtml = template.render(context)\nemail_message.attach_alternative(html, 'text/html')\ntemplate.attach_related(email_message)\nemail_message.send()\n```\n\nto send an email containing html with inlined images, but without a\nplain text body, use this code snippet:\n\n```python\nfrom django.core.mail import emailmultialternatives\nfrom django.template.loader import get_template\n\nsubject, from_email, to_email = \"hello\", \"no-reply@example.com\", \"john@example.com\"\ntemplate = get_template('email-template-name.html', using='post_office')\ncontext = {...}\nhtml = template.render(context)\nemail_message = emailmultialternatives(subject, html, from_email, [to_email])\nemail_message.content_subtype = 'html'\ntemplate.attach_related(email_message)\nemail_message.send()\n```\n\n### custom email backends\n\nby default, `post_office` uses django's `smtp.emailbackend`. if you want\nto use a different backend, you can do so by configuring `backends`.\n\nfor example if you want to use [django-ses](https://github.com/hmarr/django-ses):\n\n```python\n# put this in settings.py\npost_office = {\n    ...\n    'backends': {\n        'default': 'smtp.emailbackend',\n        'ses': 'django_ses.sesbackend',\n    }\n}\n```\n\nyou can then choose what backend you want to use when sending mail:\n\n```python\n# if you omit `backend_alias` argument, `default` will be used\nmail.send(\n    ['recipient@example.com'],\n    'from@example.com',\n    subject='hello',\n)\n\n# if you want to send using `ses` backend\nmail.send(\n    ['recipient@example.com'],\n    'from@example.com',\n    subject='hello',\n    backend='ses',\n)\n```\n\n### management commands\n\n-   `send_queued_mail` - send queued emails, those aren't successfully\n    sent will be marked as `failed`. accepts the following arguments:\n\n  | argument | description |\n  | --- | --- |\n  |`--processes` or `-p` | number of parallel processes to send email. defaults to 1 |\n  | `--lockfile` or `-l` | full path to file used as lock file. defaults to `/tmp/post_office.lock` |\n\n\n-   `cleanup_mail` - delete all emails created before an x number of\n    days (defaults to 90).\n\n| argument | description |\n| --- | --- |\n| `--days` or `-d` | email older than this argument will be deleted. defaults to 90 |\n| `--delete-attachments` | flag to delete orphaned attachment records and files on disk. if not specified, attachments won't be deleted. |\n\nyou may want to set these up via cron to run regularly:\n\n    * * * * * (cd $project; python manage.py send_queued_mail --processes=1 >> $project/cron_mail.log 2>&1)\n    0 1 * * * (cd $project; python manage.py cleanup_mail --days=30 --delete-attachments >> $project/cron_mail_cleanup.log 2>&1)\n\n\n## settings\n\nthis section outlines all the settings and configurations that you can\nput in django's `settings.py` to fine tune `post-office`'s behavior.\n\n\n### batch size\n\nif you may want to limit the number of emails sent in a batch (\nuseful in a low memory environment), use the `batch_size` argument to\nlimit the number of queued emails fetched in one batch. `batch_size` defaults to 100.\n\n```python\n# put this in settings.py\npost_office = {\n    ...\n    'batch_size': 100,\n}\n```\n\nversion 3.8 introduces a companion setting called `batch_delivery_timeout`. this setting\nspecifies the maximum time allowed for each batch to be delivered. defaults to 180.\n\nif you send a large number of emails in a single batch on a slow connection, consider increasing this number.\n\n```python\n# put this in settings.py\npost_office = {\n    ...\n    'batch_delivery_timeout': 180,\n}\n```\n\n### default priority\n\nthe default priority for emails is `medium`, but this can be altered by\nsetting `default_priority`. integration with asynchronous email backends\n(e.g. based on celery) becomes trivial when set to `now`.\n\n```python\n# put this in settings.py\npost_office = {\n    ...\n    'default_priority': 'now',\n}\n```\n\n### override recipients\n\ndefaults to `none`. this option is useful if you want to redirect all\nemails to specified a few email for development purposes.\n\n```python\n# put this in settings.py\npost_office = {\n    ...\n    'override_recipients': ['to@example.com', 'to2@example.com'],\n}\n```\n\n### message-id\n\nthe smtp standard requires that each email contains a unique [message-id](https://tools.ietf.org/html/rfc2822#section-3.6.4). typically the message-id consists of two parts separated by the `@`\nsymbol: the left part is a generated pseudo random number. the right\npart is a constant string, typically denoting the full qualified domain\nname of the sending server.\n\nby default, **django** generates such a message-id during email\ndelivery. since **django-post_office** keeps track of all delivered\nemails, it can be very useful to create and store this message-id while\ncreating each email in the database. this identifier then can be looked\nup in the django admin backend.\n\nto enable this feature, add this to your post-office settings:\n\n```python\n# put this in settings.py\npost_office = {\n    ...\n    'message_id_enabled': true,\n}\n```\n\nit can further be fine tuned, using for instance another full qualified\ndomain name:\n\n```python\n# put this in settings.py\npost_office = {\n    ...\n    'message_id_enabled': true,\n    'message_id_fqdn': 'example.com',\n}\n```\n\notherwise, if `message_id_fqdn` is unset (the default),\n**django-post_office** falls back to the dns name of the server, which\nis determined by the network settings of the host.\n\n### retry\n\nnot activated by default. you can automatically requeue failed email deliveries.\nyou can also configure failed deliveries to be retried after a specific time interval.\n\n```python\n# put this in settings.py\npost_office = {\n    ...\n    'max_retries': 4,\n    'retry_interval': datetime.timedelta(minutes=15),  # schedule to be retried 15 minutes later\n}\n```\n\n### log level\n\nlogs are stored in the database and is browsable via django admin.\nthe default log level is 2 (logs both successful and failed deliveries)\nthis behavior can be changed by setting `log_level`.\n\n```python\n# put this in settings.py\npost_office = {\n    ...\n    'log_level': 1, # log only failed deliveries\n}\n```\n\nthe different options are:\n\n* `0` logs nothing\n* `1` logs only failed deliveries\n* `2` logs everything (both successful and failed delivery attempts)\n\n### sending order\n\nthe default sending order for emails is `-priority`, but this can be\naltered by setting `sending_order`. for example, if you want to send\nqueued emails in fifo order :\n\n```python\n# put this in settings.py\npost_office = {\n    ...\n    'sending_order': ['created'],\n}\n```\n\n### context field serializer\n\nif you need to store complex python objects for deferred rendering (i.e.\nsetting `render_on_delivery=true`), you can specify your own context\nfield class to store context variables. for example if you want to use\n[django-picklefield](https://github.com/gintas/django-picklefield/tree/master/src/picklefield):\n\n```python\n# put this in settings.py\npost_office = {\n    ...\n    'context_field_class': 'picklefield.fields.pickledobjectfield',\n}\n```\n\n`context_field_class` defaults to `django.db.models.jsonfield`.\n\n### logging\n\nyou can configure `post-office`'s logging from django's `settings.py`.\nfor example:\n\n```python\nlogging = {\n    \"version\": 1,\n    \"disable_existing_loggers\": false,\n    \"formatters\": {\n        \"post_office\": {\n            \"format\": \"[%(levelname)s]%(asctime)s pid %(process)d: %(message)s\",\n            \"datefmt\": \"%d-%m-%y %h:%m:%s\",\n        },\n    },\n    \"handlers\": {\n        \"post_office\": {\n            \"level\": \"debug\",\n            \"class\": \"logging.streamhandler\",\n            \"formatter\": \"post_office\"\n        },\n        # if you use sentry for logging\n        'sentry': {\n            'level': 'error',\n            'class': 'raven.contrib.django.handlers.sentryhandler',\n        },\n    },\n    'loggers': {\n        \"post_office\": {\n            \"handlers\": [\"post_office\", \"sentry\"],\n            \"level\": \"info\"\n        },\n    },\n}\n```\n\n### threads\n\n`post-office` >= 3.0 allows you to use multiple threads to dramatically\nspeed up the speed at which emails are sent. by default, `post-office`\nuses 5 threads per process. you can tweak this setting by changing\n`threads_per_process` setting.\n\nthis may dramatically increase the speed of bulk email delivery,\ndepending on which email backends you use. in my tests, multi threading\nspeeds up email backends that use http based (rest) delivery mechanisms\nbut doesn't seem to help smtp based backends.\n\n```python\n# put this in settings.py\npost_office = {\n    ...\n    'threads_per_process': 10,\n}\n```\n\nperformance\n-----------\n\n### caching\n\nif django's caching mechanism is configured, `post_office` will cache\n`emailtemplate` instances . if for some reason you want to disable\ncaching, set `post_office_cache` to `false` in `settings.py`:\n\n```python\n## all cache key will be prefixed by post_office:template:\n## to turn off caching, you need to explicitly set post_office_cache to false in settings\npost_office_cache = false\n\n## optional: to use a non default cache backend, add a \"post_office\" entry in caches\ncaches = {\n    'post_office': {\n        'backend': 'django.core.cache.backends.memcached.pylibmccache',\n        'location': '127.0.0.1:11211',\n    }\n}\n```\n\n### send_many()\n\n`send_many()` is much more performant (generates less database queries)\nwhen sending a large number of emails. `send_many()` is almost identical\nto `mail.send()`, with the exception that it accepts a list of keyword\narguments that you'd usually pass into `mail.send()`:\n\n```python\nfrom post_office import mail\n\nfirst_email = {\n    'sender': 'from@example.com',\n    'recipients': ['alice@example.com'],\n    'subject': 'hi!',\n    'message': 'hi alice!'\n}\nsecond_email = {\n    'sender': 'from@example.com',\n    'recipients': ['bob@example.com'],\n    'subject': 'hi!',\n    'message': 'hi bob!'\n}\nkwargs_list = [first_email, second_email]\n\nmail.send_many(kwargs_list)\n```\n\nattachments are not supported with `mail.send_many()`.\n\n## running tests\n\nto run the test suite:\n\n```python\n`which django-admin` test post_office --settings=post_office.test_settings --pythonpath=.\n```\n\nyou can run the full test suite for all supported versions of django and python with:\n\n```python\ntox\n```\n\nor:\n\n```python\npython setup.py test\n```\n\n\n## integration with celery\n\nif your django project runs in a celery enabled configuration, you can use its worker to send out\nqueued emails. compared to the solution with cron (see above), or the solution with uwsgi timers\n(see below) this setup has the big advantage that queued emails are send *immediately* after they\nhave been added to the mail queue. the delivery is still performed in a separate and asynchronous\ntask, which prevents sending emails during the request/response-cycle.\n\nif you [configured celery](https://docs.celeryproject.org/en/latest/userguide/application.html)\nin your project and started the\n[celery worker](https://docs.celeryproject.org/en/latest/userguide/workers.html),\nyou should see something such as:\n\n```\n--------------- celery@halcyon.local v4.0 (latentcall)\n--- ***** -----\n-- ******* ---- [configuration]\n- *** --- * --- . broker:      amqp://guest@localhost:5672//\n- ** ---------- . app:         __main__:0x1012d8590\n- ** ---------- . concurrency: 8 (processes)\n- ** ---------- . events:      off (enable -e to monitor this worker)\n- ** ----------\n- *** --- * --- [queues]\n-- ******* ---- . celery:      exchange:celery(direct) binding:celery\n--- ***** -----\n\n[tasks]\n. post_office.tasks.cleanup_expired_mails\n. post_office.tasks.send_queued_mail\n```\n\ndelivering emails through the celery worker must be explicitly enabled:\n\n```python\n# put this in settings.py\npost_office = {\n    ...\n    'celery_enabled': true,\n}\n```\n\nemails will then be delivered immediately after they have been queued. in order to make this happen,\nthe project's `celery.py` setup shall invoke the\n[autodiscoverttasks](https://docs.celeryproject.org/en/latest/reference/celery.html#celery.celery.autodiscover_tasks)\nfunction. in case of a temporary delivery failure, we might want retrying to send those emails by a\nperiodic task. this can be scheduled with a simple\n[celery beat configuration](https://docs.celeryproject.org/en/latest/userguide/periodic-tasks.html#entries),\nfor instance through\n\n```python\napp.conf.beat_schedule = {\n    'send-queued-mail': {\n        'task': 'post_office.tasks.send_queued_mail',\n        'schedule': 600.0,\n    },\n}\n```\n\nthe email queue now will be processed every 10 minutes. if you are using\n[django celery beat](https://django-celery-beat.readthedocs.io/en/latest/),\nthen use the django-admin backend and add a periodic tasks for `post_office.tasks.send_queued_mail`.\n\ndepending on your policy, you may also want to remove expired emails from the queue. this can be\ndone by adding another periodic tasks for `post_office.tasks.cleanup_mail`, which may run once a\nweek or month.\n\n\n## integration with uwsgi\n\nif setting up celery is too daunting and you use\n[uwsgi](https://uwsgi-docs.readthedocs.org/en/latest/) as application\nserver, then uwsgi decorators can act as a poor men's scheduler. just\nadd this short snipped to the project's `wsgi.py` file:\n\n```python\nfrom django.core.wsgi import get_wsgi_application\n\napplication = get_wsgi_application()\n\n# add this block of code\ntry:\n    import uwsgidecorators\n    from django.core.management import call_command\n\n    @uwsgidecorators.timer(10)\n    def send_queued_mail(num):\n        \"\"\"send queued mail every 10 seconds\"\"\"\n        call_command('send_queued_mail', processes=1)\n\nexcept importerror:\n    print(\"uwsgidecorators not found. cron and timers are disabled\")\n```\n\nalternatively you can also use the decorator\n`@uwsgidecorators.cron(minute, hour, day, month, weekday)`. this will\nschedule a task at specific times. use `-1` to signal any time, it\ncorresponds to the `*` in cron.\n\nplease note that `uwsgidecorators` are available only, if the\napplication has been started with **uwsgi**. however, django's internal\n`./manange.py runserver` also access this file, therefore wrap the block\ninto an exception handler as shown above.\n\nthis configuration can be useful in environments, such as docker\ncontainers, where you don't have a running cron-daemon.\n\n## signals\n\neach time an email is added to the mail queue, post office emits a\nspecial [django\nsignal](https://docs.djangoproject.com/en/stable/topics/signals/).\nwhenever a third party application wants to be informed about this\nevent, it shall connect a callback function to the post office's signal\nhandler `email_queued`, for instance:\n\n```python\nfrom django.dispatch import receiver\nfrom post_office.signals import email_queued\n\n@receiver(email_queued)\ndef my_callback(sender, emails, **kwargs):\n    print(\"added {} mails to the sending queue\".format(len(emails)))\n```\n\nthe emails objects added to the queue are passed as list to the callback\nhandler.\n\n\n## changelog\n\nfull changelog can be found [here](https://github.com/ui/django-post_office/blob/master/changelog.md).\n\ncreated and maintained by the cool guys at [stamps](https://stamps.co.id), indonesia's most elegant\ncrm/loyalty platform.\n",
  "docs_url": null,
  "keywords": "",
  "license": "mit",
  "name": "django-post-office",
  "package_url": "https://pypi.org/project/django-post-office/",
  "project_url": "https://pypi.org/project/django-post-office/",
  "project_urls": {
    "Homepage": "https://github.com/ui/django-post_office"
  },
  "release_url": "https://pypi.org/project/django-post-office/3.8.0/",
  "requires_dist": [
    "bleach[css]",
    "django (>=3.2)",
    "pytz",
    "bleach ; extra == 'prevent-xss'",
    "tox (>=2.3) ; extra == 'test'"
  ],
  "requires_python": "",
  "summary": "a django app to monitor and send mail asynchronously, complete with template support.",
  "version": "3.8.0",
  "releases": [],
  "developers": [
    "selwin.ong@gmail.com",
    "selwin_ong"
  ],
  "kwds": "django email_backend djangoproject django_ses emails",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_django_post_office",
  "homepage": "https://github.com/ui/django-post_office",
  "release_count": 59,
  "dependency_ids": [
    "pypi_bleach",
    "pypi_django",
    "pypi_pytz",
    "pypi_tox"
  ],
  "documentation_summary": "Django Post Office is a Django app designed for monitoring and sending emails asynchronously, with support for email templates. It allows for efficient handling of millions of emails, supports HTML emails, inlined images, database-based templates, and multilingual templates. It also has built-in scheduling support and works well with task queues like RQ or Celery. The app supports Django versions 2.2 and above and requires additional dependencies like jsonfield and bleach for enhanced HTML email rendering. Version 3.8.0 was released on October 22, 2023. It is licensed under the MIT License and maintained by Selwin Ong and others. The app is production/stable and supports Python 3.7 to 3.10.",
  "embedding": [
    -0.014385420829057693,
    -0.006098014768213034,
    -0.02230091020464897,
    -0.01045574527233839,
    -0.0004723505408037454,
    0.0259779654443264,
    -0.009648757986724377,
    -0.009894362650811672,
    -0.027535799890756607,
    -0.0022034253925085068,
    0.012160943821072578,
    -0.002031502081081271,
    -0.03938096761703491,
    0.026216551661491394,
    0.01336089801043272,
    0.008750545792281628,
    0.0223710834980011,
    -0.02353595197200775,
    -0.007761110085994005,
    -0.016448501497507095,
    0.010357502847909927,
    0.00999260414391756,
    -0.03042691946029663,
    -0.0047296457923948765,
    0.01166271697729826,
    0.02682003751397133,
    0.026020068675279617,
    -0.013150379993021488,
    -0.00781724788248539,
    0.020504487678408623,
    0.02178163267672062,
    0.00256832386367023,
    -0.03764067962765694,
    -0.016729190945625305,
    -0.015536254271864891,
    -0.0024630646221339703,
    0.01533977035433054,
    -0.00926982518285513,
    0.05330324545502663,
    0.021851804107427597,
    0.017220400273799896,
    0.02888311818242073,
    0.008624235168099403,
    -0.0150450449436903,
    -0.019536102190613747,
    0.01795019768178463,
    0.02484116517007351,
    -0.04143001139163971,
    0.0002631479292176664,
    0.009073341265320778,
    0.017318643629550934,
    0.024139437824487686,
    -0.004575265571475029,
    0.0002986729086842388,
    0.018651926890015602,
    -0.019606275483965874,
    0.0044068507850170135,
    0.019143136218190193,
    -0.0070348214358091354,
    -0.030174296349287033,
    0.014266126789152622,
    -0.011452198028564453,
    -0.030623402446508408,
    -0.005336640402674675,
    -0.025725342333316803,
    0.01314336247742176,
    -0.02983746863901615,
    0.02669372782111168,
    -0.00590153131633997,
    -0.0031261974945664406,
    0.051085785031318665,
    0.03688281401991844,
    0.0015087148640304804,
    -0.002517448738217354,
    0.028181390836834908,
    -0.01005575992166996,
    -0.002656039781868458,
    0.04401237145066261,
    0.0017560739070177078,
    0.0038314340636134148,
    0.015395908616483212,
    -0.024672750383615494,
    -0.023465778678655624,
    0.03567584231495857,
    0.011438163928687572,
    0.02829366736114025,
    0.010918885469436646,
    0.0014052100013941526,
    0.0034875874407589436,
    0.016167810186743736,
    -0.007824265398085117,
    0.015620461665093899,
    0.0003684071125462651,
    0.033598728477954865,
    -0.012055683881044388,
    0.03848275542259216,
    -0.008568096905946732,
    0.03783716633915901,
    0.011564474552869797,
    -0.018272992223501205,
    -0.007013769820332527,
    0.011024144478142262,
    -0.03800557926297188,
    -0.017374781891703606,
    -0.025711307302117348,
    0.0013473174767568707,
    -0.008133025839924812,
    -0.03590039536356926,
    0.050468266010284424,
    0.011087300255894661,
    -0.04086862877011299,
    0.053583938628435135,
    0.009964535012841225,
    -0.021978115662932396,
    0.003817399498075247,
    0.00321215926669538,
    -0.002880592830479145,
    -0.024644682183861732,
    0.008182146586477757,
    -0.005315588321536779,
    -0.0011771484278142452,
    0.017037952318787575,
    0.016378328204154968,
    -0.014104729518294334,
    0.018062474206089973,
    -0.003992831334471703,
    0.00015339332458097488,
    -0.009024219587445259,
    0.0022858784068375826,
    -0.0022893871646374464,
    -0.022202668711543083,
    0.014834526926279068,
    -0.002454293193295598,
    -0.008841770701110363,
    -0.031437408179044724,
    0.008210215717554092,
    -0.022132495418190956,
    0.003919150214642286,
    -0.032111067324876785,
    -0.02576744556427002,
    -0.004898060113191605,
    0.039745863527059555,
    0.0022893871646374464,
    0.013199500739574432,
    -0.0025928844697773457,
    0.024785026907920837,
    0.016195878386497498,
    0.01203463226556778,
    -0.004220893140882254,
    0.009304910898208618,
    0.01995714008808136,
    -0.005515580996870995,
    -0.02672179602086544,
    -0.010301364585757256,
    -0.002838489133864641,
    0.01552222017198801,
    -0.015367839485406876,
    0.0021771106403321028,
    -0.012189012952148914,
    -0.022174600511789322,
    0.011143438518047333,
    0.03648984804749489,
    -0.016673052683472633,
    -0.024027161300182343,
    0.010189088061451912,
    0.024209611117839813,
    0.00025942001957446337,
    -0.002826208947226405,
    -0.026679692789912224,
    -0.010182070545852184,
    -0.005743642337620258,
    -0.007290952373296022,
    -0.03488990664482117,
    -0.0014078414533287287,
    -0.017276538535952568,
    0.021613217890262604,
    0.0023139475379139185,
    0.0039823055267333984,
    -0.017402850091457367,
    -0.0129889827221632,
    0.006336602382361889,
    0.006564663723111153,
    -0.0022507919929921627,
    0.04766135662794113,
    -0.02613234519958496,
    -0.025346409529447556,
    -0.016055533662438393,
    -0.02844804711639881,
    0.005603296682238579,
    0.013388967141509056,
    0.012392513453960419,
    0.010806608945131302,
    0.0018578245071694255,
    -0.031184785068035126,
    -0.5568912029266357,
    0.003463026834651828,
    -0.018792271614074707,
    -0.019915036857128143,
    -0.015353805385529995,
    0.005873462185263634,
    0.0038384513463824987,
    0.0035349540412425995,
    -0.024476267397403717,
    0.00044472000445239246,
    -0.03261630982160568,
    0.0031770728528499603,
    -0.005150682292878628,
    0.016967779025435448,
    -0.005484003107994795,
    -0.021697424352169037,
    0.013388967141509056,
    -0.018146682530641556,
    0.0018560701282694936,
    -0.004399833735078573,
    -0.03800557926297188,
    0.033289968967437744,
    -0.03862310200929642,
    0.03410397469997406,
    -0.01995714008808136,
    0.028139285743236542,
    -0.0013911754358559847,
    -0.013290725648403168,
    -0.011248697526752949,
    -0.002968308748677373,
    -0.02332543395459652,
    0.030258504673838615,
    0.008582131937146187,
    0.004817361477762461,
    0.05159103125333786,
    0.01628008671104908,
    -0.04041952267289162,
    0.04550003260374069,
    -0.0063436198979616165,
    0.020813247188925743,
    -0.00021139551245141774,
    -0.02239915356040001,
    -0.011501319706439972,
    -0.007234814111143351,
    0.029276086017489433,
    -0.006890967488288879,
    0.0570925772190094,
    -0.00034296949161216617,
    0.014722250401973724,
    -0.03893186151981354,
    0.01959224045276642,
    0.0036138982977718115,
    0.025655169039964676,
    0.0013955612666904926,
    0.010090846568346024,
    -0.013003016822040081,
    0.018918583169579506,
    0.010631176643073559,
    -0.005010336637496948,
    0.004954198375344276,
    0.0059962645173072815,
    0.038538891822099686,
    0.005427864845842123,
    -0.023409640416502953,
    -0.003317418275400996,
    0.0010061023058369756,
    0.004168263170868158,
    -0.029248015955090523,
    0.011810079216957092,
    -0.015466081909835339,
    0.024195576086640358,
    -0.0035700404550880194,
    0.005062966141849756,
    -0.00031687397859059274,
    0.019915036857128143,
    0.040644075721502304,
    0.025220097973942757,
    -0.006319059059023857,
    -0.007943559437990189,
    0.0509173721075058,
    -0.006276955362409353,
    0.007775144651532173,
    0.011529388837516308,
    -0.036349501460790634,
    0.04670700430870056,
    0.007929524406790733,
    -0.022806154564023018,
    -0.027241075411438942,
    0.0034454837441444397,
    -0.00594012625515461,
    0.00744533259421587,
    0.03491797670722008,
    -0.0026262165047228336,
    -0.02484116517007351,
    -0.0002563499438110739,
    0.02412540279328823,
    -0.010062777437269688,
    0.022357048466801643,
    -0.022328980267047882,
    -0.020476417616009712,
    -0.004448954481631517,
    -0.008736511692404747,
    -0.02453240565955639,
    0.005712064448744059,
    0.02792876772582531,
    0.0001733487006276846,
    -0.023802608251571655,
    0.01221708208322525,
    0.02314298413693905,
    0.00048638510634191334,
    0.028798909857869148,
    -0.019171204417943954,
    -0.028742771595716476,
    -0.005820832215249538,
    0.011157472617924213,
    -0.03011815808713436,
    0.026188483461737633,
    0.01229427196085453,
    0.02607620693743229,
    0.031240923330187798,
    -0.002457801718264818,
    -0.014371385797858238,
    0.014294195920228958,
    -0.014181919395923615,
    -0.0013560890220105648,
    0.01717829704284668,
    0.01552222017198801,
    -0.019578207284212112,
    -0.008820719085633755,
    0.021304456517100334,
    0.022258806973695755,
    0.005817323923110962,
    0.03191458061337471,
    -0.02159918285906315,
    0.04457375407218933,
    0.009332980029284954,
    0.022328980267047882,
    0.003705122973769903,
    0.013788952492177486,
    -0.029697122052311897,
    -0.02178163267672062,
    0.03750033676624298,
    0.004192824009805918,
    -0.03752840310335159,
    -0.003041990101337433,
    -0.032026857137680054,
    -0.007290952373296022,
    -0.008827736601233482,
    -0.027395455166697502,
    -0.016266051679849625,
    -0.009368066675961018,
    -0.01838526874780655,
    -0.03261630982160568,
    0.0023683314211666584,
    -0.019788725301623344,
    -0.011508336290717125,
    -0.0036489847116172314,
    -0.01705198734998703,
    -0.023732434958219528,
    -0.0009482097229920328,
    0.01265215314924717,
    0.020897455513477325,
    -0.022258806973695755,
    0.017220400273799896,
    -0.044068507850170135,
    -0.00744533259421587,
    -0.019479963928461075,
    0.04002655670046806,
    0.027690181508660316,
    -0.021234285086393356,
    -0.02273598127067089,
    -0.021262353286147118,
    0.01365562342107296,
    0.007140080910176039,
    0.002161321695894003,
    0.010357502847909927,
    -0.009038254618644714,
    0.010280312970280647,
    -0.017837921157479286,
    -0.0165888462215662,
    0.007150606717914343,
    0.014708215370774269,
    -0.028995394706726074,
    -0.016013428568840027,
    0.03199879080057144,
    0.0035875835455954075,
    -0.010834678076207638,
    0.034861840307712555,
    -0.032026857137680054,
    0.012862671166658401,
    -0.012146908789873123,
    -0.026314793154597282,
    -0.015087148174643517,
    0.023100880905985832,
    0.0003896782291121781,
    0.006497999653220177,
    0.004557722248136997,
    -0.0055436501279473305,
    0.0063295853324234486,
    0.028742771595716476,
    0.006326076574623585,
    -0.010294347070157528,
    0.02347981370985508,
    -0.012855653651058674,
    -0.03281279280781746,
    -0.03460921719670296,
    0.03848275542259216,
    -0.011725871823728085,
    0.013157396577298641,
    0.0033104009926319122,
    0.006399757694453001,
    0.015802910551428795,
    -0.012097788043320179,
    -0.005705047398805618,
    -0.024041196331381798,
    0.01723443530499935,
    -0.026946349069476128,
    0.023676296696066856,
    -0.01736074686050415,
    0.007683919742703438,
    -0.007101485971361399,
    0.00012751710892189294,
    0.022623704746365547,
    -0.002936731092631817,
    -0.014160867780447006,
    -0.005441899411380291,
    0.017444953322410583,
    0.008631252683699131,
    0.003729683579877019,
    -0.041598428040742874,
    -0.025234133005142212,
    0.021486906334757805,
    0.014806457795202732,
    -0.026777934283018112,
    0.033009275794029236,
    -0.012146908789873123,
    0.02551482431590557,
    -0.029332224279642105,
    0.0006223449017852545,
    -0.015353805385529995,
    0.009599637240171432,
    -0.003736700862646103,
    0.018020370975136757,
    -0.00942420493811369,
    0.0015350296162068844,
    0.008799667470157146,
    0.01272934302687645,
    0.0005894514033570886,
    -0.012146908789873123,
    0.01221708208322525,
    0.0035103934351354837,
    0.01411876454949379,
    -0.0182589590549469,
    -0.003750735195353627,
    0.009599637240171432,
    0.0040594954043626785,
    0.012413565069437027,
    -0.010238208808004856,
    0.02674986608326435,
    -0.011838148348033428,
    0.007326038554310799,
    0.022441256791353226,
    0.033261898905038834,
    0.009199651889503002,
    0.02743755839765072,
    -0.004985776264220476,
    -0.017809852957725525,
    -0.05072088912129402,
    -0.0008885628776624799,
    -0.03747226670384407,
    -0.015732737258076668,
    -0.03466535359621048,
    0.01243461761623621,
    -0.04951391741633415,
    0.004701576661318541,
    0.0049191121943295,
    0.00752953952178359,
    0.027507731691002846,
    0.003775295801460743,
    0.009824189357459545,
    -0.017599334940314293,
    -0.00898913387209177,
    0.027198970317840576,
    -0.018483512103557587,
    0.0051962947472929955,
    0.007971628569066525,
    -0.007424280513077974,
    0.010104880668222904,
    -0.014511731453239918,
    -0.0007442701025865972,
    0.01838526874780655,
    0.016041498631238937,
    0.005364709533751011,
    -0.0015683617675676942,
    -0.00866633839905262,
    -0.017473023384809494,
    0.021458838135004044,
    0.00999260414391756,
    -0.016518672928214073,
    -0.011297818273305893,
    0.014988906681537628,
    0.020462384447455406,
    -0.019690483808517456,
    -0.0006390109192579985,
    0.017094090580940247,
    0.0017762485658749938,
    -0.01460997387766838,
    -0.0254586860537529,
    -0.021557079628109932,
    -0.008343543857336044,
    0.004192824009805918,
    0.0082312673330307,
    -0.01733267679810524,
    -0.01705198734998703,
    0.034244317561388016,
    0.020841317251324654,
    0.02610427513718605,
    -0.011908321641385555,
    0.0552961528301239,
    0.004975250456482172,
    -0.01096800621598959,
    -0.018483512103557587,
    -0.01581694558262825,
    0.0027525273617357016,
    0.03351452201604843,
    0.0031174258328974247,
    0.015016975812613964,
    0.01887647807598114,
    -0.04875605180859566,
    -0.026034103706479073,
    -0.021697424352169037,
    0.010252243839204311,
    0.01717829704284668,
    0.00857511442154646,
    0.0040068659000098705,
    0.018118612468242645,
    0.005013845395296812,
    0.022314945235848427,
    0.018890513107180595,
    -0.0034946047235280275,
    0.008455820381641388,
    0.0026051646564155817,
    0.019297515973448753,
    -0.022104427218437195,
    0.004238435998558998,
    0.006662905681878328,
    -0.017094090580940247,
    0.013339846394956112,
    0.08746335655450821,
    0.002524466020986438,
    0.02453240565955639,
    0.016518672928214073,
    -0.0222447719424963,
    -0.029725192114710808,
    0.0072769178077578545,
    0.007929524406790733,
    0.013459140434861183,
    0.010596089996397495,
    -0.018174750730395317,
    0.027704214677214622,
    0.006522560492157936,
    0.012027614749968052,
    0.0016139739891514182,
    0.015648530796170235,
    0.03503025323152542,
    0.011396059766411781,
    0.01056802086532116,
    -0.0022718438412994146,
    0.00032367196399718523,
    -0.020251864567399025,
    -0.008631252683699131,
    0.017585299909114838,
    -0.013080206699669361,
    -0.015929222106933594,
    0.04204753041267395,
    0.014111747033894062,
    -0.02113604173064232,
    -0.013817021623253822,
    0.05027178302407265,
    0.019816793501377106,
    0.020097484812140465,
    -0.008736511692404747,
    -0.010504866018891335,
    -0.019016824662685394,
    -0.02273598127067089,
    -0.021823735907673836,
    0.01918523944914341,
    0.012343392707407475,
    -0.009641740471124649,
    -0.005750659853219986,
    -0.023185087367892265,
    0.018272992223501205,
    -0.013725796714425087,
    0.028939256444573402,
    -0.005905039608478546,
    -0.03385135158896446,
    -0.0027841052506119013,
    -0.019269445911049843,
    0.03230755031108856,
    0.012995999306440353,
    0.0017674770206212997,
    0.016392363235354424,
    -0.021262353286147118,
    -0.0046770162880420685,
    0.0035630231723189354,
    -0.02211846224963665,
    -0.009045272134244442,
    -0.019564172253012657,
    -0.005715573206543922,
    0.01274337712675333,
    0.0352267362177372,
    0.010175053961575031,
    -0.007112011779099703,
    0.010497848503291607,
    -0.003975288011133671,
    0.02980939857661724,
    -0.004778766538947821,
    -0.005140156485140324,
    0.004961215890944004,
    -0.001206094748340547,
    0.0038454686291515827,
    0.0007122537354007363,
    0.007312003988772631,
    0.003834942588582635,
    -0.015718704089522362,
    -0.007234814111143351,
    -0.01689760573208332,
    0.0039542363956570625,
    -0.016223948448896408,
    0.0082944231107831,
    0.007283934857696295,
    0.02036414109170437,
    -0.014076660387217999,
    0.003036727197468281,
    0.049934953451156616,
    0.009318945929408073,
    -0.0018315096385776997,
    -0.0026788460090756416,
    -0.0047296457923948765,
    0.026777934283018112,
    -0.011297818273305893,
    0.044629890471696854,
    0.0039542363956570625,
    -0.003978796768933535,
    -0.010518900118768215,
    -0.020785178989171982,
    0.016364293172955513,
    0.0213465616106987,
    0.0035454798489809036,
    -0.0036384589038789272,
    0.01884840987622738,
    -0.014834526926279068,
    -0.025584997609257698,
    0.021571114659309387,
    0.02604813687503338,
    0.00013760443835053593,
    -0.008862822316586971,
    -0.01738881506025791,
    -0.02098166197538376,
    0.0003760822582989931,
    -0.016392363235354424,
    0.010343468748033047,
    0.009192634373903275,
    -0.02589375711977482,
    -0.011915339156985283,
    -0.004431411158293486,
    -0.016939710825681686,
    -0.007515504956245422,
    0.0160695668309927,
    -0.019044892862439156,
    -0.005680487025529146,
    0.0044349199160933495,
    -0.0044349199160933495,
    0.026483207941055298,
    0.002887610113248229,
    0.009094392880797386,
    -0.0030876025557518005,
    -0.029640983790159225,
    -0.007234814111143351,
    -0.021093938499689102,
    0.022385118529200554,
    0.0010482060024514794,
    -0.018034406006336212,
    0.022904396057128906,
    0.017753714695572853,
    0.018371235579252243,
    0.027044590562582016,
    0.004161246120929718,
    -0.00020668077922891825,
    0.0019315058598294854,
    -0.018679995089769363,
    -0.0034121517091989517,
    0.015704669058322906,
    -0.021893909201025963,
    0.011283783242106438,
    0.019872931763529778,
    -0.004410359542816877,
    -0.025430617853999138,
    -0.008624235168099403,
    0.0016411659307777882,
    0.002898135920986533,
    -0.00040612497832626104,
    -0.01738881506025791,
    -0.03385135158896446,
    -0.002452538814395666,
    0.0300900898873806,
    -0.03416011109948158,
    -0.013788952492177486,
    -0.023395605385303497,
    -0.008533010259270668,
    0.015438012778759003,
    0.024111367762088776,
    0.0068488637916743755,
    -0.0002951642672996968,
    -0.008111974224448204,
    -0.012701273895800114,
    0.022778086364269257,
    0.022174600511789322,
    -0.014357351697981358,
    -0.01828702725470066,
    -0.0018122121691703796,
    -0.04173877090215683,
    -0.013171431608498096,
    0.019564172253012657,
    0.02412540279328823,
    -0.0010017164750024676,
    -0.014694181270897388,
    0.021725494414567947,
    -0.02180970087647438,
    0.017894059419631958,
    0.0008797912742011249,
    -0.02304474264383316,
    0.011164490133523941,
    -0.0207009706646204,
    -0.015901152044534683,
    -0.0068102688528597355,
    -0.022020218893885612,
    -0.04401237145066261,
    0.022721948102116585,
    -0.008722476661205292,
    0.019072962924838066,
    0.012308306060731411,
    -0.017122158780694008,
    0.00043989563710056245,
    0.00789443776011467,
    0.0017920375103130937,
    0.022960534319281578,
    0.03039884939789772,
    0.01921330764889717,
    0.021557079628109932,
    0.020532555878162384,
    -0.00668044900521636,
    -0.01229427196085453,
    -0.004084056243300438,
    0.001741162152029574,
    0.024883268401026726,
    0.032026857137680054,
    -0.004266505129635334,
    -0.019044892862439156,
    0.007550591602921486,
    0.007571643218398094,
    -0.021290423348546028,
    -0.004606843460351229,
    0.027395455166697502,
    0.03901606798171997,
    -0.002892873017117381,
    -0.039437104016542435,
    -0.00968384463340044,
    0.010062777437269688,
    0.0033910998608917,
    -0.023620158433914185,
    -0.013831055723130703,
    0.011831131763756275,
    -0.01887647807598114,
    -0.013178449124097824,
    0.009136496111750603,
    0.0028139285277575254,
    0.0010824152268469334,
    0.02947256900370121,
    0.0023876288905739784,
    -0.024111367762088776,
    -0.057822372764348984,
    -0.02659548446536064,
    -0.0002471397747285664,
    0.00583837553858757,
    0.019199274480342865,
    -0.00642431853339076,
    0.011017126962542534,
    0.019044892862439156,
    -0.011774993501603603,
    -0.028714703395962715,
    0.008624235168099403,
    -0.010329433716833591,
    0.03766874969005585,
    -0.02450433559715748,
    0.0027420015539973974,
    -0.009845241904258728,
    -0.0036244243383407593,
    -0.005841884296387434,
    -0.029304154217243195,
    -0.02437802590429783,
    0.00928385928273201,
    -0.011578509584069252,
    -0.012897757813334465,
    0.003722666297107935,
    -0.020055381581187248,
    0.0013060909695923328,
    0.02620251663029194,
    -0.0018823848804458976,
    0.0012078490108251572,
    -0.005382252391427755,
    0.0043156263418495655,
    0.017262505367398262,
    -0.015774842351675034,
    -0.030651472508907318,
    -0.04227208346128464,
    -0.033991698175668716,
    0.0006315550417639315,
    0.0009806646266952157,
    0.008343543857336044,
    -0.009459291584789753,
    0.03230755031108856,
    -0.0028349803760647774,
    -0.01175394095480442,
    -0.007069908082485199,
    -0.013697727583348751,
    -0.011375008150935173,
    0.029584845528006554,
    -0.011241680011153221,
    -0.002889364492148161,
    0.040363386273384094,
    0.017374781891703606,
    -0.009382100775837898,
    -0.020251864567399025,
    -0.014315247535705566,
    0.022932466119527817,
    0.033991698175668716,
    -0.01112238597124815,
    0.000828916032332927,
    0.026876175776124,
    0.019325584173202515,
    -0.004136685747653246,
    -0.02764807641506195,
    0.029332224279642105,
    7.449005352100357e-06,
    -0.0013508261181414127,
    0.00788040366023779,
    0.008883874863386154,
    -0.0007534802425652742,
    0.015115217305719852,
    0.027970870956778526,
    0.019872931763529778,
    -0.022511428222060204,
    -0.035788118839263916,
    -0.011627630330622196,
    0.009782086126506329,
    -0.0007223411230370402,
    0.011887270025908947,
    -0.020841317251324654,
    0.00803478341549635,
    -0.018679995089769363,
    0.04106511175632477,
    0.011087300255894661,
    -0.016995849087834358,
    -0.009262807667255402,
    0.01630815491080284,
    0.005378744099289179,
    0.022314945235848427,
    -0.0005512949428521097,
    -0.007733040954917669,
    -0.005382252391427755,
    0.012287254445254803,
    -0.003757752478122711,
    -0.04193525388836861,
    -0.0022192143369466066,
    0.03216720372438431,
    0.021921977400779724,
    -0.022258806973695755,
    -0.014694181270897388,
    -0.020518522709608078,
    -0.049289364367723465,
    -0.0044068507850170135,
    -0.03067954070866108,
    0.014932768419384956,
    0.005276993382722139,
    0.007466384209692478,
    0.003436712082475424,
    -0.007515504956245422,
    0.0011438163928687572,
    0.03778102621436119,
    -0.03463728725910187,
    -0.006497999653220177,
    -0.0300900898873806,
    0.018272992223501205,
    0.012932844460010529,
    -6.0750166994694155e-06,
    -0.04457375407218933,
    -0.010518900118768215,
    -0.007115520071238279,
    0.011774993501603603,
    0.013985435478389263,
    0.04359133169054985,
    -0.007824265398085117,
    -0.03281279280781746,
    0.008869839832186699,
    -0.028658565133810043,
    -0.01795019768178463,
    0.02613234519958496,
    0.021122008562088013,
    -0.037893302738666534,
    -0.016813399270176888,
    -0.0016990585718303919,
    -0.006020824890583754,
    0.03098830208182335,
    -0.012617066502571106,
    0.020771143957972527,
    -0.02644110471010208,
    0.005561192985624075,
    -0.03904413804411888,
    -0.01068731490522623,
    0.00957858469337225,
    0.02659548446536064,
    0.017529161646962166,
    -0.01924137771129608,
    0.008855805732309818,
    0.01427314430475235,
    -0.0006539226160384715,
    -0.025163959711790085,
    -0.015423977747559547,
    0.016209913417696953,
    -0.03772488981485367,
    0.007017278578132391,
    0.019844863563776016,
    -0.03385135158896446,
    0.012939861044287682,
    -0.016350258141756058,
    0.024055229499936104,
    -0.013213534839451313,
    -0.012701273895800114,
    0.01130483578890562,
    -0.011725871823728085,
    -0.01081362646073103,
    -0.010371537879109383,
    0.04881218820810318,
    -0.02944450080394745,
    0.006143627222627401,
    0.005087526980787516,
    0.022076357156038284,
    3.832091897493228e-05,
    -0.012911791913211346,
    -0.0028156829066574574,
    -0.01823088899254799,
    -0.0073821768164634705,
    0.0034402208402752876,
    0.01320651825517416,
    -0.03991428017616272,
    -0.00774005800485611,
    -0.005550667177885771,
    -0.009045272134244442,
    0.0321391336619854,
    0.20827282965183258,
    0.0005556807154789567,
    0.011648681946098804,
    0.014259109273552895,
    0.006522560492157936,
    0.027605973184108734,
    -0.01173990685492754,
    0.00170695292763412,
    -0.023999091237783432,
    0.04813852906227112,
    -0.004659472964704037,
    -0.02298860438168049,
    0.0005819955258630216,
    0.0035489886067807674,
    0.02703055553138256,
    -0.0049261292442679405,
    0.0023823659867048264,
    -0.06461510062217712,
    0.01294687855988741,
    0.012764429673552513,
    0.007066399324685335,
    -0.011718855239450932,
    -0.009908396750688553,
    -0.012385495938360691,
    0.018301062285900116,
    -0.004445445723831654,
    0.00403844378888607,
    -0.013031085953116417,
    0.022932466119527817,
    0.024349955841898918,
    -0.03983007371425629,
    -0.0011122386204078794,
    0.015732737258076668,
    0.004199841059744358,
    -0.014525766484439373,
    -0.013529312796890736,
    -0.010371537879109383,
    -0.021739527583122253,
    0.01379596907645464,
    0.027549834921956062,
    0.0073541076853871346,
    -0.023830678313970566,
    0.013999470509588718,
    -0.018806306645274162,
    0.004150720313191414,
    0.001627131481654942,
    -0.0119574423879385,
    -0.005891005042940378,
    -0.003687579883262515,
    0.017627403140068054,
    -0.03169002756476402,
    -0.012581979855895042,
    0.007901455275714397,
    -0.009789103642106056,
    0.005659434944391251,
    -0.007922506891191006,
    -0.030932163819670677,
    -0.0005385761032812297,
    0.009192634373903275,
    0.015269597992300987,
    -0.01258899737149477,
    0.047436803579330444,
    -0.013683692552149296,
    0.012462686747312546,
    -0.04547196254134178,
    0.018778236582875252,
    -0.02919187769293785,
    -0.007929524406790733,
    0.01628008671104908,
    -0.007726023439317942,
    -0.0027279669884592295,
    -0.025542892515659332,
    -0.010546969249844551,
    -0.0007477787439711392,
    -0.017430920153856277,
    -0.02214653044939041,
    0.01612570509314537,
    0.028560323640704155,
    0.05167523771524429,
    0.02913573943078518,
    -0.027381420135498047,
    0.0019876440055668354,
    -0.005161208100616932,
    -0.00032608414767310023,
    0.010469779372215271,
    -0.01435033418238163,
    0.03994235023856163,
    -0.004084056243300438,
    -0.015073114074766636,
    -0.02527623623609543,
    -0.03559163585305214,
    -0.016911640763282776,
    0.013543346896767616,
    0.022160565480589867,
    -0.02774631790816784,
    -0.009087375365197659,
    0.013045120984315872,
    0.024476267397403717,
    0.001236795331351459,
    0.008322492241859436,
    -0.038538891822099686,
    0.04137387499213219,
    0.01807650923728943,
    -0.0028156829066574574,
    -0.013311777263879776,
    0.007838300429284573,
    -0.006248886231333017,
    0.02307281084358692,
    0.012904775328934193,
    -0.02474292367696762,
    0.00594012625515461,
    -0.04780169948935509,
    0.008603183552622795,
    -0.015073114074766636,
    0.00752252247184515,
    -0.004775257781147957,
    -0.0051822601817548275,
    0.005006828345358372,
    -0.0036244243383407593,
    0.004775257781147957,
    -0.0002923135180026293,
    -0.005213838070631027,
    -0.01130483578890562,
    -0.004750697407871485,
    0.01203463226556778,
    -0.03070761077105999,
    -0.01357843354344368,
    0.008638269267976284,
    -0.01612570509314537,
    0.011978494003415108,
    0.0022297401446849108,
    -0.01838526874780655,
    0.016939710825681686,
    0.001209603389725089,
    0.010441710241138935,
    0.0015683617675676942,
    -0.027114763855934143,
    -0.01320651825517416,
    -0.0036489847116172314,
    0.033289968967437744,
    -0.041626494377851486,
    -0.007831282913684845,
    0.02975326031446457,
    -0.03042691946029663,
    0.017880026251077652,
    -0.04041952267289162,
    0.009880327619612217,
    0.0006293621845543385,
    -0.02440609410405159,
    -0.011774993501603603,
    -0.01334686391055584,
    0.005484003107994795,
    0.005150682292878628,
    -0.022343015298247337,
    0.020588694140315056,
    -0.013059155084192753,
    -0.037023160606622696,
    -0.040700215846300125,
    0.026497242972254753,
    -0.006066437344998121,
    -0.016223948448896408,
    -0.028911186382174492,
    -0.02103780023753643,
    0.009852258488535881,
    -0.034525010734796524,
    -0.01181709673255682,
    -0.1761617511510849,
    0.020167658105492592,
    0.007041838951408863,
    -0.024209611117839813,
    0.007171658333390951,
    -0.029276086017489433,
    0.00030349730513989925,
    0.01875016838312149,
    -0.019143136218190193,
    0.011143438518047333,
    0.014245075173676014,
    0.006417301017791033,
    -0.0254586860537529,
    -0.023802608251571655,
    0.012939861044287682,
    0.010624159127473831,
    -0.014399454928934574,
    -0.01320651825517416,
    0.019171204417943954,
    0.009564550593495369,
    0.023128949105739594,
    -0.0275217667222023,
    0.002989360596984625,
    -0.014792422764003277,
    -0.0051436652429401875,
    -0.03011815808713436,
    -0.015409943647682667,
    0.01952206902205944,
    -0.014974871650338173,
    -0.02412540279328823,
    -0.020939558744430542,
    0.01745898835361004,
    0.040054626762866974,
    0.011543422937393188,
    0.003308646846562624,
    0.01387315895408392,
    0.03416011109948158,
    -0.012203047052025795,
    0.013122310861945152,
    -0.0012929335935041308,
    0.062145017087459564,
    0.0316338911652565,
    -0.0022630721796303988,
    -0.006638345308601856,
    -0.015143286436796188,
    -0.0025841128081083298,
    0.018960686400532722,
    -0.008329509757459164,
    0.0034542554058134556,
    -0.009768051095306873,
    0.04547196254134178,
    -0.0052348896861076355,
    0.01175394095480442,
    -0.001249075517989695,
    -0.002426224062219262,
    0.019283480942249298,
    0.0007653219508938491,
    -0.0026946349535137415,
    0.008406699635088444,
    0.012315323576331139,
    -0.01215392630547285,
    -0.025781480595469475,
    0.006866407115012407,
    0.013725796714425087,
    -0.03952131047844887,
    -0.033261898905038834,
    -0.0313812680542469,
    0.03999848663806915,
    -0.002575341146439314,
    0.013388967141509056,
    0.012203047052025795,
    0.02759193815290928,
    0.01519942469894886,
    0.010034708306193352,
    0.019915036857128143,
    0.007326038554310799,
    -0.0198027603328228,
    0.05215241387486458,
    -0.004992793779820204,
    0.008378630504012108,
    0.007761110085994005,
    0.03837047889828682,
    0.0035998637322336435,
    0.02252546325325966,
    -0.0005442776600830257,
    -0.004105107858777046,
    -0.01076450478285551,
    -0.0056734695099294186,
    -0.02474292367696762,
    0.002468327758833766,
    0.004522636067122221,
    -0.010406623594462872,
    0.013459140434861183,
    0.0019560663495212793,
    0.006933071184903383,
    0.020279934629797935,
    0.006726061459630728,
    0.016630949452519417,
    0.0017332677962258458,
    -0.033963628113269806,
    0.013248621486127377,
    0.010392589494585991,
    -0.011353956535458565,
    0.0031893530394881964,
    0.008932995609939098,
    0.012118839658796787,
    -0.022750016301870346,
    0.0014692426193505526,
    0.007227796595543623,
    -0.012911791913211346,
    -0.0074874358251690865,
    0.004838413558900356,
    0.02659548446536064,
    0.027325281873345375,
    -0.030819887295365334,
    0.021921977400779724,
    0.02641303651034832,
    0.018357200548052788,
    0.012350410223007202,
    0.0006254149484448135,
    0.021458838135004044,
    0.00414721155539155,
    -0.00922070350497961,
    0.017430920153856277,
    0.003361276350915432,
    -0.025163959711790085,
    -0.10615738481283188,
    -0.029949743300676346,
    0.011901304125785828,
    0.018118612468242645,
    -0.029612915590405464,
    -0.0103504853323102,
    -0.0018981738248839974,
    0.023493848741054535,
    -0.0068102688528597355,
    0.007094468455761671,
    0.0012078490108251572,
    -0.011417112313210964,
    -0.021767597645521164,
    0.016644984483718872,
    -0.0006784831057302654,
    -0.015381874516606331,
    -0.016855502501130104,
    -0.01931155100464821,
    0.01921330764889717,
    -0.011571492068469524,
    -0.01533977035433054,
    -0.015494151040911674,
    -0.01838526874780655,
    0.007866368629038334,
    -0.041037045419216156,
    0.010624159127473831,
    -0.0076628681272268295,
    0.0027016522362828255,
    -0.005747151095420122,
    0.002966554369777441,
    0.018637891858816147,
    -0.017880026251077652,
    -0.03444080054759979,
    -0.0038875723257660866,
    0.013936314731836319,
    0.01490469928830862,
    -0.031746167689561844,
    -0.016995849087834358,
    0.04364747181534767,
    -0.014876630157232285,
    0.01677129603922367,
    -0.02252546325325966,
    0.01995714008808136,
    -0.019283480942249298,
    -0.013810004107654095,
    0.00597872119396925,
    0.0031840901356190443,
    0.010989057831466198,
    0.016574811190366745,
    -0.02335350215435028,
    -0.012364444322884083,
    0.012567945756018162,
    -0.009831206873059273,
    -0.005269975867122412,
    0.02798490598797798,
    -0.027479661628603935,
    -0.009810155257582664,
    0.00957858469337225,
    0.0004920866340398788,
    0.024967476725578308,
    0.02823752909898758,
    0.021178146824240685,
    -0.00942420493811369,
    0.0026963893324136734,
    0.013171431608498096,
    0.0019157170318067074,
    0.023157019168138504,
    -0.014778388664126396,
    0.02728317864239216,
    -0.002115709474310279,
    -0.02283422462642193,
    -0.003363030729815364,
    -0.024672750383615494,
    0.005841884296387434,
    -0.019072962924838066,
    -0.0082312673330307,
    0.005161208100616932,
    -0.010820643045008183,
    0.00023420166689902544,
    0.0067821997217834,
    -0.018034406006336212,
    -0.006676940247416496,
    -0.017290573567152023,
    -0.014139816164970398,
    -0.014778388664126396,
    -0.006550629157572985,
    0.011101334355771542,
    0.009971552528440952,
    0.005936617497354746,
    -0.051085785031318665,
    0.004441937431693077,
    0.002906907582655549,
    0.038258202373981476,
    0.008708442561328411,
    -0.010111898183822632,
    0.006122575607150793,
    -0.014918734319508076,
    -0.02492537349462509,
    -0.0028490149416029453,
    0.020069416612386703,
    -0.046847350895404816,
    -0.02505168318748474,
    -0.08291616290807724,
    0.0010166282299906015,
    0.020616764202713966,
    -0.004203349817544222,
    0.0062208171002566814,
    -0.04044759273529053,
    -0.002943748375400901,
    -0.03345838189125061,
    0.012673204764723778,
    0.002957782940939069,
    -0.009873311035335064,
    0.013529312796890736,
    0.005491020157933235,
    -0.017753714695572853,
    -0.005171734374016523,
    0.02332543395459652,
    0.05192786082625389,
    -0.012343392707407475,
    0.020841317251324654,
    0.012974947690963745,
    0.0181326474994421,
    -0.018665960058569908,
    0.013487208634614944,
    -0.004891043063253164,
    -0.0014981889398768544,
    0.015901152044534683,
    -0.020518522709608078,
    0.028476115316152573,
    -0.028321735560894012,
    -0.007178675848990679,
    0.020041346549987793,
    -0.013662640936672688,
    -0.006105032283812761,
    -0.014595938846468925,
    0.015830980613827705,
    -0.009213686920702457,
    0.00583837553858757,
    0.01371877919882536,
    0.011248697526752949,
    -0.001669235061854124,
    -0.027998941019177437,
    -0.033907487988471985,
    0.021430768072605133,
    -0.026399001479148865,
    -0.014736284501850605,
    0.011024144478142262,
    0.012315323576331139,
    0.01751512661576271,
    0.01173990685492754,
    -0.0051752426661551,
    0.04965426027774811,
    -0.0005894514033570886,
    -0.021402699872851372,
    -0.026272689923644066,
    0.018609821796417236,
    0.0023104390129446983,
    0.018090544268488884,
    -0.0011394305620342493,
    -0.021725494414567947,
    0.006561155430972576,
    0.013017051853239536,
    0.023128949105739594,
    0.006213800050318241,
    -0.00906632374972105,
    -0.0019806267227977514,
    -0.011746924370527267,
    -0.039156414568424225,
    -0.03460921719670296,
    -0.0027770879678428173,
    -0.006157661788165569,
    -0.0022350032813847065,
    -0.060292456299066544,
    0.033991698175668716,
    -0.00326654314994812,
    0.010364520363509655,
    -0.008897908963263035,
    -0.007810230832546949,
    -0.014231040142476559,
    -0.03907220438122749,
    0.03750033676624298,
    0.011810079216957092,
    0.01334686391055584,
    -0.011487284675240517,
    0.03752840310335159,
    0.04126159846782684,
    0.009087375365197659,
    -0.03556356579065323,
    0.007866368629038334,
    -0.005627857055515051,
    0.006627819500863552,
    -0.021290423348546028,
    0.014441559091210365,
    -0.014708215370774269,
    -0.008266353979706764,
    -0.010975023731589317,
    0.01460997387766838,
    -0.005676978267729282,
    0.0061155580915510654,
    0.017402850091457367,
    -0.0015095920534804463,
    0.019550137221813202,
    0.0017323906067758799,
    -0.009038254618644714,
    -0.0036560019943863153,
    -0.013585451059043407,
    0.008954047225415707,
    -0.01964837871491909,
    -0.028251562267541885,
    -0.0222447719424963,
    0.0378090962767601,
    0.0011403077514842153,
    -0.03556356579065323,
    0.00653308629989624,
    0.029416430741548538,
    -0.0442369244992733,
    0.0009517183643765748,
    0.019423827528953552,
    -0.013767899945378304,
    -0.004066512919962406,
    0.005873462185263634,
    -0.0035630231723189354,
    -0.019844863563776016,
    0.029248015955090523,
    -0.019606275483965874,
    0.008490907028317451,
    0.016827434301376343,
    -0.0033595219720155,
    -0.006354145705699921,
    -0.0002583235618658364,
    -0.019971175119280815,
    -0.0034928503446280956,
    -0.0024700819049030542,
    -0.017908094450831413,
    -0.030623402446508408,
    -0.0077681271359324455,
    0.005676978267729282,
    -0.00922070350497961,
    0.012631101533770561,
    -0.0032630343921482563,
    0.0879686027765274,
    -0.003034972818568349,
    0.0011192559031769633,
    0.009115444496273994,
    0.012231116183102131,
    0.009473325684666634,
    0.004564739763736725,
    0.011950424872338772,
    0.016504637897014618,
    -0.015409943647682667,
    0.007403228897601366,
    0.005343657452613115,
    -0.013157396577298641,
    -0.020897455513477325,
    0.005891005042940378,
    -0.007333056069910526,
    -0.008118990808725357,
    0.018244924023747444,
    -0.01900278963148594,
    0.010125932283699512,
    -0.0016376572893932462,
    0.022595636546611786,
    -0.007227796595543623,
    -0.008876857347786427,
    -0.024181541055440903,
    -0.017164263874292374,
    0.017374781891703606,
    0.015873083844780922,
    -0.005578736308962107,
    -0.066860631108284,
    0.018609821796417236,
    -0.007059382274746895,
    -0.003912132699042559,
    -0.019788725301623344,
    -0.00572960777208209,
    0.012287254445254803,
    -0.007227796595543623,
    -0.018343165516853333,
    0.004150720313191414,
    0.02913573943078518,
    -0.01656077615916729,
    0.012560928240418434,
    -0.029921675100922585,
    -0.03648984804749489,
    -0.005961177870631218,
    -0.010034708306193352,
    0.0072628832422196865,
    0.011171507649123669,
    -0.026188483461737633
  ]
}
{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: developers",
    "intended audience :: science/research",
    "license :: osi approved :: gnu library or lesser general public license (lgpl)",
    "license :: osi approved :: mit license",
    "operating system :: macos",
    "operating system :: microsoft :: windows",
    "operating system :: posix",
    "operating system :: unix",
    "programming language :: c++",
    "programming language :: python",
    "programming language :: python :: 3",
    "programming language :: python :: 3 :: only",
    "programming language :: python :: implementation :: cpython",
    "programming language :: python :: implementation :: pypy",
    "topic :: scientific/engineering :: mathematics",
    "topic :: scientific/engineering :: physics",
    "topic :: software development"
  ],
  "description": ".. |iminuit| image:: doc/_static/iminuit_logo.svg\n   :alt: iminuit\n\n|iminuit|\n=========\n\n.. version-marker-do-not-remove\n\n.. image:: https://scikit-hep.org/assets/images/scikit--hep-project-blue.svg\n   :target: https://scikit-hep.org\n.. image:: https://img.shields.io/pypi/v/iminuit.svg\n   :target: https://pypi.org/project/iminuit\n.. image:: https://img.shields.io/conda/vn/conda-forge/iminuit.svg\n   :target: https://github.com/conda-forge/iminuit-feedstock\n.. image:: https://coveralls.io/repos/github/scikit-hep/iminuit/badge.svg?branch=develop\n   :target: https://coveralls.io/github/scikit-hep/iminuit?branch=develop\n.. image:: https://readthedocs.org/projects/iminuit/badge/?version=latest\n   :target: https://iminuit.readthedocs.io/en/stable\n.. image:: https://zenodo.org/badge/doi/10.5281/zenodo.3949207.svg\n   :target: https://doi.org/10.5281/zenodo.3949207\n.. image:: https://img.shields.io/badge/ascl-2108.024-blue.svg?colorb=262255\n   :target: https://ascl.net/2108.024\n   :alt: ascl:2108.024\n.. image:: https://img.shields.io/gitter/room/scikit-hep/iminuit\n   :target: https://gitter.im/scikit-hep/iminuit\n.. image:: https://mybinder.org/badge_logo.svg\n   :target: https://mybinder.org/v2/gh/scikit-hep/iminuit/develop?filepath=doc%2ftutorial\n\n*iminuit* is a jupyter-friendly python interface for the *minuit2* c++ library maintained by cern's root team.\n\nminuit was designed to minimize statistical cost functions, for likelihood and least-squares fits of parametric models to data. it provides the best-fit parameters and error estimates from likelihood profile analysis.\n\nthe iminuit package comes with additional features:\n\n- builtin cost functions for statistical fits\n\n  - binned and unbinned maximum-likelihood\n  - `template fits with error propagation <https://doi.org/10.1140/epjc/s10052-022-11019-z>`_\n  - least-squares (optionally robust to outliers)\n  - gaussian penalty terms for parameters\n  - cost functions can be combined by adding them: ``total_cost = cost_1 + cost_2``\n  - visualization of the fit in jupyter notebooks\n- support for scipy minimizers as alternatives to minuit's migrad algorithm (optional)\n- support for numba accelerated functions (optional)\n\ndependencies\n------------\n\n*iminuit* is (and always will be) a lean package which only depends on ``numpy``, but additional features are enabled if the following optional packages are installed.\n\n- ``matplotlib``: visualization of fitted model for builtin cost functions\n- ``ipywidgets``: interactive fitting, see example below (also requires ``matplotlib``)\n- ``scipy``: compute minos intervals for arbitrary confidence levels\n- ``unicodeitplus``: render names of model parameters in simple latex as unicode\n\ndocumentation\n-------------\n\ncheckout our large and comprehensive list of `tutorials`_ that take you all the way from beginner to power user. for help and how-to questions, please use the `discussions`_ on github or `gitter`_.\n\n**lecture by glen cowan**\n\n`in the exercises to his lecture for the kmischool 2022 <https://github.com/kmischool2022>`_, glen cowan shows how to solve statistical problems in python with iminuit. you can find the lectures and exercises on the github page, which covers both frequentist and bayesian methods.\n\n`glen cowan <https://scholar.google.com/citations?hl=en&user=ljqwt8qaaaaj&view_op=list_works>`_ is a known for his papers and international lectures on statistics in particle physics, as a member of the particle data group, and as author of the popular book `statistical data analysis <https://www.pp.rhul.ac.uk/~cowan/sda/>`_.\n\nin a nutshell\n-------------\n\n``iminuit`` can be used with a user-provided cost functions in form of a negative log-likelihood function or least-squares function. standard functions are included in ``iminuit.cost``, so you don't have to write them yourself. the following example shows how to perform an unbinned maximum likelihood fit.\n\n.. code:: python\n\n    import numpy as np\n    from iminuit import minuit\n    from iminuit.cost import unbinnednll\n    from scipy.stats import norm\n\n    x = norm.rvs(size=1000, random_state=1)\n\n    def pdf(x, mu, sigma):\n        return norm.pdf(x, mu, sigma)\n\n    # negative unbinned log-likelihood, you can write your own\n    cost = unbinnednll(x, pdf)\n\n    m = minuit(cost, mu=0, sigma=1)\n    m.limits[\"sigma\"] = (0, np.inf)\n    m.migrad()  # find minimum\n    m.hesse()   # compute uncertainties\n\n.. image:: doc/_static/demo_output.png\n    :alt: output of the demo in a jupyter notebook\n\ninteractive fitting\n-------------------\n\n``iminuit`` optionally supports an interactive fitting mode in jupyter notebooks.\n\n.. image:: doc/_static/interactive_demo.gif\n   :alt: animated demo of an interactive fit in a jupyter notebook\n\nfaster than roofit\n------------------\n\nwhen ``iminuit`` is used with cost functions and pdfs that are jit-compiled with `numba`_ (jit-compiled pdfs are provided by `numba_stats`_ ), the fit is up to 10x faster compared to an equivalent fit in the `roofit`_ framework. the gain is particularly large when `numba`_ with auto-parallelization is compared to parallel computation in `roofit`_.\n\n.. image:: doc/_static/roofit_vs_iminuit+numba.svg\n\nmore information about this benchmark is given `in the benchmark section of the documentation <https://iminuit.readthedocs.io/en/stable/benchmark.html#cost-function-benchmark>`_.\n\npartner projects\n----------------\n\n* `numba_stats`_ provides faster implementations of probability density functions than scipy, and a few specific ones used in particle physics that are not in scipy.\n* `boost-histogram`_ from scikit-hep provides fast generalized histograms that you can use with the builtin cost functions.\n* `jacobi`_ provides a robust, fast, and accurate calculation of the jacobi matrix of any transformation function and building a function for generic error propagation.\n\nversions\n--------\n\n**the current 2.x series has introduced breaking interfaces changes with respect to the 1.x series.**\n\nall interface changes are documented in the `changelog`_ with recommendations how to upgrade. to keep existing scripts running, pin your major iminuit version to <2, i.e. ``pip install 'iminuit<2'`` installs the 1.x series.\n\n.. _changelog: https://iminuit.readthedocs.io/en/stable/changelog.html\n.. _tutorials: https://iminuit.readthedocs.io/en/stable/tutorials.html\n.. _discussions: https://github.com/scikit-hep/iminuit/discussions\n.. _gitter: https://gitter.im/scikit-hep/iminuit\n.. _jacobi: https://github.com/hdembinski/jacobi\n.. _numba_stats: https://github.com/hdembinski/numba-stats\n.. _boost-histogram: https://github.com/scikit-hep/boost-histogram\n.. _numba: https://numba.pydata.org\n.. _roofit: https://root.cern.ch/doc/master/namespaceroofit.html\n",
  "docs_url": null,
  "keywords": "",
  "license": "minuit is from seal minuit it's lgpl v2 http://seal.web.cern.ch/seal/main/license.html.  for iminuit, i'm releasing it as mit license:  copyright (c) 2012 piti ongmongkolkul  permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"software\"), to deal in the software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the software, and to permit persons to whom the software is furnished to do so, subject to the following conditions:  the above copyright notice and this permission notice shall be included in all copies or substantial portions of the software.  the software is provided \"as is\", without warranty of any kind, express or implied, including but not limited to the warranties of merchantability, fitness for a particular purpose and noninfringement. in no event shall the authors or copyright holders be liable for any claim, damages or other liability, whether in an action of contract, tort or otherwise, arising from, out of or in connection with the software or the use or other dealings in the software.   note: mit license is gpl compatible, so it is an acceptable license for a wrapper, as can be seen here: http://www.gnu.org/licenses/old-licenses/gpl-2.0-faq.html#gplwrapper http://www.gnu.org/licenses/old-licenses/gpl-2.0-faq.html#origbsd  (l)gpl can be combined or included in code that does not impose more restrictive conditions.",
  "name": "iminuit",
  "package_url": "https://pypi.org/project/iminuit/",
  "project_url": "https://pypi.org/project/iminuit/",
  "project_urls": {
    "Documentation": "https://iminuit.readthedocs.io",
    "Repository": "http://github.com/scikit-hep/iminuit"
  },
  "release_url": "https://pypi.org/project/iminuit/2.24.0/",
  "requires_dist": [
    "numpy>=1.21",
    "typing_extensions; python_version < \"3.9\"",
    "coverage; extra == \"test\"",
    "cython; extra == \"test\"",
    "ipywidgets<8.0.5; extra == \"test\"",
    "ipykernel; extra == \"test\"",
    "joblib; extra == \"test\"",
    "jacobi; extra == \"test\"",
    "matplotlib; extra == \"test\"",
    "numpy; extra == \"test\"",
    "numba; extra == \"test\"",
    "numba-stats; extra == \"test\"",
    "pytest; extra == \"test\"",
    "scipy; extra == \"test\"",
    "tabulate; extra == \"test\"",
    "boost_histogram; extra == \"test\"",
    "resample; extra == \"test\"",
    "unicodeitplus; extra == \"test\"",
    "pydantic; extra == \"test\"",
    "annotated_types; extra == \"test\"",
    "sphinx<7; extra == \"doc\"",
    "sphinx-rtd-theme; extra == \"doc\"",
    "nbsphinx; extra == \"doc\"",
    "nbconvert; extra == \"doc\"",
    "nbformat; extra == \"doc\"",
    "jupyter_client; extra == \"doc\"",
    "ipykernel; extra == \"doc\"",
    "jax; extra == \"doc\"",
    "jaxlib; extra == \"doc\""
  ],
  "requires_python": ">=3.8",
  "summary": "jupyter-friendly python frontend for minuit2 in c++",
  "version": "2.24.0",
  "releases": [],
  "developers": [
    "hans.dembinski@gmail.com",
    "hans_dembinski"
  ],
  "kwds": "iminuit_logo svg badge_logo roofit_vs_iminuit img",
  "license_kwds": "minuit copyright licenses iminuit license",
  "libtype": "pypi",
  "id": "pypi_iminuit",
  "homepage": "",
  "release_count": 82,
  "dependency_ids": [
    "pypi_annotated_types",
    "pypi_boost_histogram",
    "pypi_coverage",
    "pypi_cython",
    "pypi_ipykernel",
    "pypi_ipywidgets",
    "pypi_jacobi",
    "pypi_jax",
    "pypi_jaxlib",
    "pypi_joblib",
    "pypi_jupyter_client",
    "pypi_matplotlib",
    "pypi_nbconvert",
    "pypi_nbformat",
    "pypi_nbsphinx",
    "pypi_numba",
    "pypi_numba_stats",
    "pypi_numpy",
    "pypi_pydantic",
    "pypi_pytest",
    "pypi_resample",
    "pypi_scipy",
    "pypi_sphinx",
    "pypi_sphinx_rtd_theme",
    "pypi_tabulate",
    "pypi_typing_extensions",
    "pypi_unicodeitplus"
  ]
}
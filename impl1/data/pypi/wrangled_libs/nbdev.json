{
  "classifiers": [
    "development status :: 2 - pre-alpha",
    "intended audience :: developers",
    "license :: osi approved :: apache software license",
    "natural language :: english",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9"
  ],
  "description": "# getting started\n\n<!-- warning: this file was autogenerated! do not edit! -->\n\n![ci](https://github.com/fastai/nbdev/actions/workflows/test.yaml/badge.svg)\n\n*nb: this is nbdev v2, a major upgrade of nbdev. whilst the differences\nto nbdev1 aren\u2019t huge, it does require some changes. the old version\ndocs are at [nbdev1.fast.ai](https://nbdev1.fast.ai). you can use\nversion-pinning in `settings.ini` (i.e `'nbdev<2'`) to stop nbdev from\nupgrading. to upgrade, follow the [migration\ntutorial](https://nbdev.fast.ai/migrating.html).*\n\n------------------------------------------------------------------------\n\n`nbdev` is a notebook-driven development platform. simply write\nnotebooks with lightweight markup and get high-quality documentation,\ntests, continuous integration, and packaging for free!\n\n`nbdev` makes debugging and refactoring your code much easier than in\ntraditional programming environments since you always have live objects\nat your fingertips. `nbdev` also promotes software engineering best\npractices because tests and documentation are first class.\n\n- **documentation** is automatically generated using\n  [quarto](https://quarto.org/) and hosted on [github\n  pages](https://pages.github.com/). docs support latex, are searchable,\n  and are automatically hyperlinked (including out-of-the-box support\n  for many packages via\n  [`nbdev-index`](https://github.com/fastai/nbdev-index))\n- **publish packages to pypi and conda** as well as tools to simplify\n  package releases. python best practices are automatically followed,\n  for example, only exported objects are included in `__all__`\n- **two-way sync between notebooks and plaintext source code** allowing\n  you to use your ide for code navigation or quick edits\n- **tests** written as ordinary notebook cells are run in parallel with\n  a single command\n- **continuous integration** out-of-the-box with [github\n  actions](https://github.com/features/actions) that run your tests and\n  rebuild your docs\n- **git-friendly notebooks** with [jupyter/git\n  hooks](https://nbdev.fast.ai/tutorials/git_friendly_jupyter.html) that\n  clean unwanted metadata and render merge conflicts in a human-readable\n  format\n- \u2026 and much more!\n\n## install\n\nnbdev works on macos, linux, and most unix-style operating systems. it\nworks on windows under wsl, but not under cmd or powershell.\n\nyou can install nbdev with pip:\n\n``` sh\npip install nbdev\n```\n\n\u2026 or with conda (or mamba):\n\n``` sh\nconda install -c fastai nbdev\n```\n\nnote that `nbdev` must be installed into the same python environment\nthat you use for both jupyter and your project.\n\n## how to use nbdev\n\nthe best way to learn how to use nbdev is to complete either the\n[written walkthrough](https://nbdev.fast.ai/tutorials/tutorial.html) or\nvideo walkthrough:\n\n<div>\n\n<a href=\"http://www.youtube.com/watch?v=l7zs8ld4_ia\" target=\"_blank\"\ntitle=\"nbdev walkthrough\"><img\nsrc=\"https://github.com/fastai/logos/raw/main/nbdev_walkthrough.png\"\nstyle=\"border-radius: 10px\" width=\"560\" height=\"315\" /></a>\n\n</div>\n\nalternatively, there\u2019s a [shortened version of the video\nwalkthrough](https://youtu.be/67fdzlst4aa) with coding sections sped up\nusing the `unsilence` python library \u2013 it\u2019s 27 minutes faster, but a bit\nharder to follow.\n\nyou can also run `nbdev_help` from the terminal to see the full list of\navailable commands:\n\n``` python\n!nbdev_help\n```\n\n    nbdev_bump_version              increment version in settings.ini by one\n    nbdev_changelog                 create a changelog.md file from closed and labeled github issues\n    nbdev_clean                     clean all notebooks in `fname` to avoid merge conflicts\n    nbdev_conda                     create a `meta.yaml` file ready to be built into a package, and optionally build and upload it\n    nbdev_create_config             create a config file.\n    nbdev_deploy                    deploy docs to github pages\n    nbdev_docs                      create quarto docs and readme.md\n    nbdev_export                    export notebooks in `path` to python modules\n    nbdev_filter                    a notebook filter for quarto\n    nbdev_fix                       create working notebook from conflicted notebook `nbname`\n    nbdev_help                      show help for all console scripts\n    nbdev_install                   install quarto and the current library\n    nbdev_install_hooks             install jupyter and git hooks to automatically clean, trust, and fix merge conflicts in notebooks\n    nbdev_install_quarto            install latest quarto on macos or linux, prints instructions for windows\n    nbdev_merge                     git merge driver for notebooks\n    nbdev_migrate                   convert all directives and callouts in `fname` from v1 to v2\n    nbdev_new                       create an nbdev project.\n    nbdev_prepare                   export, test, and clean notebooks, and render readme if needed\n    nbdev_preview                   preview docs locally\n    nbdev_proc_nbs                  process notebooks in `path` for docs rendering\n    nbdev_pypi                      create and upload python package to pypi\n    nbdev_readme                    none\n    nbdev_release_both              release both conda and pypi packages\n    nbdev_release_gh                calls `nbdev_changelog`, lets you edit the result, then pushes to git and calls `nbdev_release_git`\n    nbdev_release_git               tag and create a release in github for the current version\n    nbdev_sidebar                   create sidebar.yml\n    nbdev_test                      test in parallel notebooks matching `path`, passing along `flags`\n    nbdev_trust                     trust notebooks matching `fname`\n    nbdev_update                    propagate change in modules matching `fname` to notebooks that created them\n\n## faq\n\n### q: what is the warning \u201cfound a cell containing mix of imports and computations. please use separate cells\u201d?\n\na: you should not have cells that are not exported, *and* contain a mix\nof `import` statements along with other code. for instance, don\u2019t do\nthis in a single cell:\n\n``` python\nimport some_module\nsome_module.something()\n```\n\ninstead, split this into two cells, one which does `import some_module`,\nand the other which does `some_module.something()`.\n\nthe reason for this is that when we create your documentation website,\nwe ensure that all of the signatures for functions you document are up\nto date, by running the imports, exported cells, and\n[`show_doc`](https://nbdev.fast.ai/api/showdoc.html#show_doc) functions\nin your notebooks. when you mix imports with other code, that other code\nwill be run too, which can cause errors (or at least slowdowns) when\ncreating your website.\n\n### q: why is nbdev asking for root access? how do i install quarto without root access?\n\na: when you setup your first project, nbdev will attempt to\nautomatically download and install [quarto](https://quarto.org/) for\nyou. this is the program that we use to create your documentation\nwebsite.\n\nquarto\u2019s standard installation process requires root access, and nbdev\nwill therefore ask for your root password during installation. for most\npeople, this will work fine and everything will be handled automatically\n\u2013 if so, you can skip over the rest of this section, which talks about\ninstalling without root access.\n\nif you need to install quarto without root access on linux, first `cd`\nto wherever you want to store it, then [download\nquarto](https://quarto.org/docs/get-started/), and type:\n\n``` bash\ndpkg -x quarto*.deb .\nmv opt/quarto ./\nrmdir opt\nmkdir -p ~/.local/bin\nln -s \"$(pwd)\"/quarto/bin/quarto ~/.local/bin\n```\n\nto use this non-root version of quarto, you\u2019ll need `~/.local/bin` in\nyour [`path` environment\nvariable](https://linuxize.com/post/how-to-add-directory-to-path-in-linux/).\n(alternatively, change the `ln -s` step to place the symlink somewhere\nelse in your path.)\n\n### q: someone told me not to use notebooks for \u201cserious\u201d software development!\n\na: [watch this video](https://youtu.be/9q6slbz37gk). don\u2019t worry, we\nstill get this too, despite having used `nbdev` for a wide range of\n\u201cvery serious\u201d software projects over the last three years, including\n[deep learning libraries](https://github.com/fastai/fastai), [api\nclients](https://github.com/fastai/ghapi), [python language\nextensions](https://github.com/fastai/fastcore), [terminal user\ninterfaces](https://github.com/nat/ghtop), and more!\n\n## contributing\n\nif you want to contribute to `nbdev`, be sure to review the\n[contributions\nguidelines](https://github.com/fastai/nbdev/blob/master/contributing.md).\nthis project adheres to fastai\u2019s [code of\nconduct](https://github.com/fastai/nbdev/blob/master/code_of_conduct.md).\nby participating, you are expected to uphold this code. in general, we\nstrive to abide by generally accepted best practices in open-source\nsoftware development.\n\nmake sure you have `nbdev`\u2019s git hooks installed by running\n[`nbdev_install_hooks`](https://nbdev.fast.ai/api/clean.html#nbdev_install_hooks)\nin the cloned repository.\n\n## copyright\n\ncopyright \u00a9 2019 onward fast.ai, inc.\u00a0licensed under the apache license,\nversion 2.0 (the \u201clicense\u201d); you may not use this project\u2019s files except\nin compliance with the license. a copy of the license is provided in the\nlicense file in this repository.\n",
  "docs_url": null,
  "keywords": "nbdev fastai jupyter notebook export",
  "license": "apache software license 2.0",
  "name": "nbdev",
  "package_url": "https://pypi.org/project/nbdev/",
  "project_url": "https://pypi.org/project/nbdev/",
  "project_urls": {
    "Documentation": "https://nbdev.fast.ai/",
    "Homepage": "https://github.com/fastai/nbdev"
  },
  "release_url": "https://pypi.org/project/nbdev/2.3.13/",
  "requires_dist": [
    "ipywidgets <=8.0.4",
    "fastcore >=1.5.27",
    "execnb >=0.1.4",
    "astunparse",
    "ghapi >=1.0.3",
    "watchdog",
    "asttokens",
    "PyYAML",
    "nbdev-numpy ; extra == 'dev'",
    "nbdev-stdlib ; extra == 'dev'",
    "pandas ; extra == 'dev'",
    "matplotlib ; extra == 'dev'",
    "black ; extra == 'dev'",
    "svg.py ; extra == 'dev'",
    "jupyter ; extra == 'dev'"
  ],
  "requires_python": ">=3.7",
  "summary": "create delightful software with jupyter notebooks",
  "version": "2.3.13",
  "releases": [],
  "developers": [
    "j@fast.ai",
    "jeremy_howard_and_hamel_husain"
  ],
  "kwds": "nbdev_update nbdev_migrate nbdev_export nbdev_bump_version nbdev_deploy",
  "license_kwds": "apache software license 2.0",
  "libtype": "pypi",
  "id": "pypi_nbdev",
  "homepage": "https://github.com/fastai/nbdev",
  "release_count": 155,
  "dependency_ids": [
    "pypi_asttokens",
    "pypi_astunparse",
    "pypi_black",
    "pypi_execnb",
    "pypi_fastcore",
    "pypi_ghapi",
    "pypi_ipywidgets",
    "pypi_jupyter",
    "pypi_matplotlib",
    "pypi_nbdev_numpy",
    "pypi_nbdev_stdlib",
    "pypi_pandas",
    "pypi_pyyaml",
    "pypi_svg.py",
    "pypi_watchdog"
  ]
}
{
  "classifiers": [
    "development status :: 3 - alpha",
    "license :: osi approved :: gnu lesser general public license v2 (lgplv2)",
    "operating system :: os independent",
    "programming language :: python :: 2.7",
    "programming language :: python :: 3",
    "topic :: scientific/engineering :: mathematics"
  ],
  "description": "# klujax\n\na sparse linear solver for jax based on the\nefficient [klu algorithm](https://ufdcimages.uflib.ufl.edu/uf/e0/01/17/21/00001/palamadai_e.pdf).\n\n## cpu & float64\n\nthis library is a wrapper around the [suitesparse](https://github.com/drtimothyaldendavis/suitesparse) klu\nalgorithms. this means the algorithm is only implemented for\nc-arrays and hence is **only available for cpu\narrays with double precision**, i.e. float64 or complex128.\n\nnote that this will be enforced at import of `klujax`!\n\n## usage\n\nthe `klujax` library provides a single function `solve(a, b)`, which solves for `x` in\nthe linear system `ax=b` a is a sparse tensor in coo-format with shape `mxm` and x and b\nhave shape `mxn`. note that jax does not have a native sparse matrix representation and\nhence a should be represented as a tuple of two index arrays and a value\narray: `(ai, aj, ax)`.\n\n```python\nimport jax.numpy as jnp\nfrom klujax import solve\n\nb = jnp.array([8, 45, -3, 3, 19], dtype=jnp.float64)\na_dense = jnp.array([[2, 3, 0, 0, 0],\n                     [3, 0, 4, 0, 6],\n                     [0, -1, -3, 2, 0],\n                     [0, 0, 1, 0, 0],\n                     [0, 4, 2, 0, 1]], dtype=jnp.float64)\nai, aj = jnp.where(jnp.abs(a_dense) > 0)\nax = a_dense[ai, aj]\n\nresult_ref = jnp.linalg.inv(a_dense)@b\nresult = solve(ai, aj, ax, b)\n\nprint(jnp.abs(result - result_ref) < 1e-12)\nprint(result)\n```\n\n```\n[ true true true true true]\n[1. 2. 3. 4. 5.]\n```\n\n## installation\n\nthe library is statically linked to the suitesparse c++ library. it can be installed on\nmost platforms as follows:\n\n```bash\npip install klujax\n```\n\n**there exist pre-built wheels for linux and windows (python 3.8+).** if no compatible\nwheel is found, however, pip will attempt to install the library from source... make\nsure you have the necessary build dependencies installed.\n\n### linux\n\non linux, you'll need `gcc` and `g++`. then just do a normal pip install:\n\n```sh\npip install klujax\n```\n\n### windows\n\non windows, installing from source is a bit more involved as typically the build\ndependencies are not installed. to install those, download visual studio community 2017\nfrom [here](https://my.visualstudio.com/downloads?q=visual%20studio%202017&wt.mc_id=o~msft~vscom~older-downloads). during installation, go to workloads and select the following workloads:\n\n- desktop development with c++\n- python development\n\nthen go to individual components and select the following additional items:\n\n- c++/cli support\n- vc++ 2015.3 v14.00 (v140) toolset for desktop\n\nthen, download and install microsoft visual c++ redistributable from [here](https://aka.ms/vs/16/release/vc_redist.x64.exe).\n\nafter these installation steps, run the following commands inside a x64 native tools\ncommand prompt for vs 2017:\n\n```\nset distutils_use_sdk=1\npip install klujax\n```\n\n## license & credits\n\n\u00a9 floris laporte 2022, lgpl-2.1\n\nthis library was partly based on:\n\n- [torch_sparse_solve](https://github.com/flaport/torch_sparse_solve), lgpl-2.1\n- [suitesparse](https://github.com/drtimothyaldendavis/suitesparse), lgpl-2.1\n- [kagami-c/pyklu](https://github.com/kagami-c/pyklu), lgpl-2.1\n- [scipy.sparse](https://github.com/scipy/scipy/tree/master/scipy/sparse), bsd-3\n\nthis library vendors an unmodified version of the\n[suitesparse](https://github.com/drtimothyaldendavis/suitesparse) libraries in its source\n(.tar.gz) distribution to allow for static linking.\nthis is in accordance with their\n[lgpl licence](https://github.com/drtimothyaldendavis/suitesparse/blob/dev/license.txt).\n\n",
  "docs_url": null,
  "keywords": "",
  "license": "",
  "name": "klujax",
  "package_url": "https://pypi.org/project/klujax/",
  "project_url": "https://pypi.org/project/klujax/",
  "project_urls": {
    "Homepage": "https://github.com/flaport/klujax"
  },
  "release_url": "https://pypi.org/project/klujax/0.2.4/",
  "requires_dist": [
    "jax",
    "jaxlib",
    "pybind11"
  ],
  "requires_python": ">=3.8",
  "summary": "a klu solver for jax",
  "version": "0.2.4",
  "releases": [],
  "developers": [
    "floris.laporte@gmail.com",
    "floris_laporte"
  ],
  "kwds": "torch_sparse_solve sparse jax solver klujax",
  "license_kwds": "",
  "libtype": "pypi",
  "id": "pypi_klujax",
  "homepage": "https://github.com/flaport/klujax",
  "release_count": 9,
  "dependency_ids": [
    "pypi_jax",
    "pypi_jaxlib",
    "pypi_pybind11"
  ]
}
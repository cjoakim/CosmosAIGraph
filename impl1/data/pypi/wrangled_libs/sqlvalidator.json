{
  "classifiers": [
    "development status :: 3 - alpha",
    "intended audience :: developers",
    "programming language :: python",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9"
  ],
  "description": "# sqlvalidator\n\n[![build status](https://img.shields.io/endpoint.svg?url=https%3a%2f%2factions-badge.atrox.dev%2fdavid-wobrock%2fsqlvalidator%2fbadge%3fref%3dmain&style=popout)](https://actions-badge.atrox.dev/david-wobrock/sqlvalidator/goto?ref=main)\n[![pypi](https://img.shields.io/pypi/v/sqlvalidator.svg)](https://pypi.python.org/pypi/sqlvalidator/)\n[![codecov](https://codecov.io/gh/david-wobrock/sqlvalidator/branch/main/graph/badge.svg?token=wtormkiimu)](https://codecov.io/gh/david-wobrock/sqlvalidator)\n\nsql queries formatting, syntactic and semantic validation\n\n**only supports select statements**\n\n## command line usage\n\n### sql formatting\n\n_sql.py_\n```\ndef fun():\n    return \"select col1, column2 from table\"\n```\n\ncommand line:\n```\n$ sqlvalidator --format sql.py\nreformatted sql.py (1 changed sql)\n1 file reformatted (1 changed sql queries).\n```\n\n_sql.py_\n```\ndef fun():\n    return \"\"\"\nselect\n col1,\n column2\nfrom table\n\"\"\"\n```\n\na `nosqlformat` comment can be appended to indicate to `sqlvalidator` that this string should not be formatted.\n\n\n### check sql format\none can verify also that the file would be reformatted or not:\n```\n$ sqlvalidator --check-format sql.py\nwould reformat sql.py (1 changed sql)\n1 file would be reformatted (1 changed sql queries).\n\n\n$ sqlvalidator --format sql.py\nreformatted sql.py (1 changed sql)\n1 file reformatted (1 changed sql queries).\n\n\n$ sqlvalidator --check-format sql.py\nno file would be reformatted.\n\n\n$ sqlvalidator --format sql.py\nno file reformatted.\n```\n\n`--check-format` won't write the file back and just return a status code:\n* status code 0 when nothing would change.\n* status code 1 when some files would be reformatted.\n\nthe option is meant to be used within the ci/cd pipeline and ensure that sql statements are formatted.\n\n### sql validation\n\none can verify that the files sql is valid:\n```\n$ sqlvalidator --validate sql.py\ninvalid queries in sql.py (1 invalid sql)\n1 file detected with invalid sql (1 invalid sql queries).\n\n# ... do some manual fixes to the sql ...\n\n$ sqlvalidator --validate sql.py\nno invalid queries found.\n```\n\nto get more details about the found invalid elements, use `--verbose-validate`\n\n## api / python code usage\n\n### sql formatting\n\n```python\nimport sqlvalidator\n\nformatted_sql = sqlvalidator.format_sql(\"select * from table\")\n```\n\n### sql validation\n\n```python\nimport sqlvalidator\n\nsql_query = sqlvalidator.parse(\"select * from table\")\n\nif not sql_query.is_valid():\n    print(sql_query.errors)\n```\n\n**warning**: only a limited set of validation are implemented.\n\n## details about sql validation\n\nvalidation contains:\n* not using a missing column\n* existing functions\n* correct aggregations\n* schemaless (not assume that table names and columns in those exist)\n* types correctness in functions\n\n(only on select-statements)\n\n## sql syntax\n\n* https://www.postgresql.org/docs/9.6/sql-select.html\n* https://cloud.google.com/bigquery/docs/reference/standard-sql/query-syntax\n\n## use with [pre-commit](https://pre-commit.com)\n\nadd this to your `.pre-commit-config.yaml`:\n```yaml\n  - repo: https://github.com/david-wobrock/sqlvalidator\n    rev: <sha1 of the latest sqlvalidator commit>\n    hooks:\n      - id: sqlvalidator\n```\n\n## contributing\n\nif you want to contribute to the sqlvalidator, first, thank you for the interest.\n\ndon't hesitate to open an issue with a snippet of the failing sql query and what the expected output would be.\n\nhowever, i don't guarantee that will accept any pull request made to the repository.\nthis is not because i don't value the work and energy put into contribution, but more because the project is\nstill early stage, and i want to keep full control of its direction for now.\n\n## internals\n\n### run tests\n\n```\npytest\n```\n\n### publishing\n\n* `python3 setup.py sdist bdist_wheel`\n* `twine upload dist/sqlvalidator-x.y.z-py3-none-any.whl dist/sqlvalidator-x.y.z.tar.gz`\n",
  "docs_url": null,
  "keywords": "python sql format formatter formatting validation validator validate automation",
  "license": "mit",
  "name": "sqlvalidator",
  "package_url": "https://pypi.org/project/sqlvalidator/",
  "project_url": "https://pypi.org/project/sqlvalidator/",
  "project_urls": {
    "Homepage": "https://github.com/David-Wobrock/sqlvalidator"
  },
  "release_url": "https://pypi.org/project/sqlvalidator/0.0.20/",
  "requires_dist": [
    "pytest (==7.2.0) ; extra == 'test'"
  ],
  "requires_python": "",
  "summary": "sql queries formatting, syntactic and semantic validation",
  "version": "0.0.20",
  "releases": [],
  "developers": [
    "david.wobrock@gmail.com",
    "david_wobrock"
  ],
  "kwds": "sqlvalidator validator formatter validate validation",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_sqlvalidator",
  "homepage": "https://github.com/david-wobrock/sqlvalidator",
  "release_count": 20,
  "dependency_ids": [
    "pypi_pytest"
  ]
}
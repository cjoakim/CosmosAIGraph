{
  "classifiers": [
    "license :: osi approved :: gnu general public license (gpl)",
    "operating system :: os independent",
    "programming language :: python :: 3"
  ],
  "description": "# pyfume\n\npyfume is a python package for automatic fuzzy models estimation from data [1].\npyfume contains functions to estimate the antecedent sets and the consequent parameters of a takagi-sugeno fuzzy model directly from data. this information is then used to create an executable fuzzy model using the simpful library.\npyfume also provides facilities for the evaluation of performance.\nfor more information about pyfume's functionalities, please check the [online documentation](https://pyfume.readthedocs.io/en/latest/).\n\n## usage\nfor the following example, we use the concrete compressive strength data set [2] as can be found in the uci repository.\nthe  code  in  example 1  is  simple  and  easy  to  use,  making it  ideal  to  use  for  practitioners  who  wish  to  use  the  default settings or only wish to use few non-default settings using additional input arguments (example 2). \nusers that wish to deviate from  the  default  settings  can  use  the code  as shown  in  example 3.\nthe code of the simpful model that is generated is automatically saved (in the same location as the pyfume script is ran from) under the name 'simpful_code.py'\n\n## note\nplease be aware that pyfume's feature selection functionality makes use of multiprocessing. \nwhen feature selection is used, the main script should always be guarded by including \"if \\_\\_name\\_\\_ == '\\_\\_main\\_\\_':\" in the header the script.\nwhen the spyder ide is used, one should include \"if \\_\\_name\\_\\_ == '\\_\\_main\\_\\_' and '\\_\\_file\\_\\_' in globals():\".\n\n### example 1\n```\nfrom pyfume import pyfume\n\n# set the path to the data and choose the number of clusters\npath='./concrete_data.csv'\nnc=3\n\n# generate the takagi-sugeno fis\nfis = pyfume(datapath=path, nr_clus=nc)\n\n# calculate and print the accuracy of the generated model\nmae=fis.calculate_error(method=\"mae\")\nprint (\"the estimated error of the developed model is:\", mae)\n\n## use the fis to predict the compressive strength of a new concrete sample\n# extract the model from the fis object\nmodel=fis.get_model()\n\n# set the values for each variable\nmodel.set_variable('cement', 300.0)\nmodel.set_variable('blastfurnaceslag', 50.0)\nmodel.set_variable('flyash', 0.0)\nmodel.set_variable('water', 175.0)\nmodel.set_variable('superplasticizer',0.7)\nmodel.set_variable('coarseaggregate', 900.0)\nmodel.set_variable('fineaggregate', 600.0)\nmodel.set_variable('age', 45.0)\n\n# perform inference and print predicted value\nprint(model.sugeno_inference(['output']))\n```\n\n### example 2\n```\nfrom pyfume import pyfume\n\n# set the path to the data and choose the number of clusters\npath='./concrete_data.csv'\nnc=3\n\n# generate the takagi-sugeno fis\nfis = pyfume(datapath=path, nr_clus=nc, feature_selection='fst-pso')\n\n# calculate and print the accuracy of the generated model\nmae=fis.calculate_error(method=\"mae\")\nprint (\"the estimated error of the developed model is:\", mae)\n\n## use the fis to predict the compressive strength of a new concrete sample\n# extract the model from the fis object\nmodel=fis.get_model()\n\n# set the values for each variable\nmodel.set_variable('cement', 300.0)\nmodel.set_variable('blastfurnaceslag', 50.0)\nmodel.set_variable('flyash', 0.0)\nmodel.set_variable('water', 175.0)\nmodel.set_variable('superplasticizer',0.7)\nmodel.set_variable('coarseaggregate', 900.0)\nmodel.set_variable('fineaggregate', 600.0)\nmodel.set_variable('age', 45.0)\n\n# perform inference and print predicted value\nprint(model.sugeno_inference(['output']))\n```\n\n### example 3\n\n```\nfrom pyfume import *\n\n# set the path to the data and choose the number of clusters\npath='./concrete_data.csv'\nnr_clus=3\n\n# load and normalize the data using min-max normalization\ndl=dataloader(path,normalize='minmax')\nvariable_names=dl.variable_names \ndatax=dl.datax\ndatay=dl.datay\n\n# split the data using the hold-out method in a training (default: 75%) \n# and test set (default: 25%).\nds = datasplitter()\nx_train, y_train, x_test, y_test = ds.holdout(datax=dl.datax, datay=dl.datay)\n\n# select features relevant to the problem\nfs=featureselector(datax=x_train, datay=y_train, nr_clus=nr_clus, variable_names=variable_names)\nselected_feature_indices, variable_names=fs.wrapper()\n\n# adapt the training and test input data after feature selection\nx_train = x_train[:, selected_feature_indices]\nx_test = x_test[:, selected_feature_indices]\n\n# cluster the training data (in input-output space) using fcm with default settings\ncl = clusterer(x_train=x_train, y_train=y_train, nr_clus=nr_clus)\ncluster_centers, partition_matrix, _ = cl.cluster(method=\"fcm\")\n\n# estimate the membership funtions of the system (default: mf_shape = gaussian)\nae = antecedentestimator(x_train=x_train, partition_matrix=partition_matrix)\nantecedent_parameters = ae.determinemf()\n\n# calculate the firing strength of each rule for each data instance        \nfsc=firestrengthcalculator(antecedent_parameters=antecedent_parameters, nr_clus=nr_clus, variable_names=variable_names)\nfiring_strengths = fsc.calculate_fire_strength(data=x_train)\n\n# estimate the parameters of the consequent functions\nce = consequentestimator(x_train=x_train, y_train=y_train, firing_strengths=firing_strengths)\nconsequent_parameters = ce.suglms()\n\n# build a first-order takagi-sugeno model using simpful. specify the optional \n# 'extreme_values' argument to specify the universe of discourse of the input\n# variables if you which to use simpful's membership function plot functionalities.\nsimpbuilder = sugenofisbuilder(antecedent_sets=antecedent_parameters, consequent_parameters=consequent_parameters, variable_names=variable_names)\nmodel = simpbuilder.get_model()\n\n# calculate the mean squared error (mse) of the model using the test data set\ntest=sugenofistester(model=model, test_data=x_test, variable_names=variable_names, golden_standard=y_test)\nmse = test.calculate_mse()\n\nprint('the mean squared error of the created model is', mse)\n```\n\n### example 4\n\n```\nfrom pyfume import pyfume\nimport pandas as pd\nimport numpy as np\n\n# read a pandas dataframe (using the pandas library)\ndf = pd.read_csv('.\\concrete_data.csv')\n\n# generate the takagi-sugeno fis\nfis = pyfume(dataframe=df, nr_clus=2)\n\n# calculate and print the accuracy of the generated model\nmae=fis.calculate_error(method=\"mae\")\nprint (\"the estimated error of the developed model is:\", mae)\n\n### use the fis to predict the compressive strength of a new concrete samples\n\n## using simpful's syntax (note: this approach only works for models built using non-normalized data!)   \n# extract the model from the fis object\nmodel=fis.get_model()\n\n# set the values for each variable\nmodel.set_variable('cement', 300.0)\nmodel.set_variable('blastfurnaceslag', 50.0)\nmodel.set_variable('flyash', 0.0)\nmodel.set_variable('water', 175.0)\nmodel.set_variable('superplasticizer',0.7)\nmodel.set_variable('coarseaggregate', 900.0)\nmodel.set_variable('fineaggregate', 600.0)\nmodel.set_variable('age', 45.0)\n\n# perform inference and print predicted value\nprint('the output using simpfuls \"set_variable\" functionality is:', model.sugeno_inference(['output']))\n\n## using pyfume's syntax (note: this approach does work for models built using normalized data!)\n# create numpy array (matrix) in which each row is a data instance to be processed\nnew_data_one_instance=np.array([[300, 50,0,175,0.7,900,600,45]]) \nprediction_labels_one_instance=fis.predict_label(new_data_one_instance)\nprint('the output using pyfumes \"predict_label\" functionality is:', prediction_labels_one_instance)\n\n# example in which output for multiple data instances is computed\nnew_data_multiple_instances=np.array([[300, 50,0,175,0.7,900,600,45],[500, 75,30,200,0.9,600,760,39],[250, 40,10,175,0.3,840,360,51]]) \nprediction_labels_multiple_instance=fis.predict_label(new_data_multiple_instances)\nprint('the output using pyfumes \"predict_label\" functionality is:', prediction_labels_multiple_instance)\n\n### plot the actual values vs the predicted values of the test data using the matplotlib library\n\n# predict the labels of the test data\npred = fis.predict_test_data()\n\n# get the actual labels of the test data\n_, actual = fis.get_data(data_set='test')\n\n# create scatterplot\nimport matplotlib.pyplot as plt \nplt.scatter(actual, pred)\nplt.xlabel('actual value') \nplt.ylabel('predicted value')\nplt.plot([0,85],[0,85],'r')     # add a reference line\nplt.show()\n\n\n```\n\n## installation\n\n`pip install pyfume`\n\n\n## further information\nif you need further information, please write an e-mail to caro fuchs: c.e.m.fuchs(at)tue.nl.\n\n\n## references\n[1] fuchs, c., spolaor, s., nobile, m. s., & kaymak, u. (2020) \"pyfume: a python package for fuzzy model estimation\". in 2020 ieee international conference on fuzzy systems (fuzz-ieee) (pp. 1-8). ieee.\n\n[2] i-cheng yeh, \"modeling of strength of high performance concrete using artificial neural networks,\" cement and concrete research, vol. 28, no. 12, pp. 1797-1808 (1998). http://archive.ics.uci.edu/ml/datasets/concrete+compressive+strength\n\n\n\n\n",
  "docs_url": null,
  "keywords": "fuzzy logic,fuzzy inference systems,fuzzy model,data-driven,model estimation,machine learning",
  "license": "license.txt",
  "name": "pyfume",
  "package_url": "https://pypi.org/project/pyFUME/",
  "project_url": "https://pypi.org/project/pyFUME/",
  "project_urls": {
    "Homepage": "https://github.com/CaroFuchs/pyFUME"
  },
  "release_url": "https://pypi.org/project/pyFUME/0.2.25/",
  "requires_dist": [
    "scipy",
    "numpy",
    "simpful",
    "fst-pso"
  ],
  "requires_python": ">=3.6",
  "summary": "a python package for fuzzy model estimation",
  "version": "0.2.25",
  "releases": [],
  "developers": [
    "c.e.m.fuchs@tue.nl",
    "caro_fuchs"
  ],
  "kwds": "pyfumes pyfume fuzzy simpbuilder predict_test_data",
  "license_kwds": "license.txt",
  "libtype": "pypi",
  "id": "pypi_pyfume",
  "homepage": "https://github.com/carofuchs/pyfume",
  "release_count": 58,
  "dependency_ids": [
    "pypi_fst_pso",
    "pypi_numpy",
    "pypi_scipy",
    "pypi_simpful"
  ]
}
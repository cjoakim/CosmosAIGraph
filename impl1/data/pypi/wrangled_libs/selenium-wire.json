{
  "classifiers": [
    "development status :: 4 - beta",
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "natural language :: english",
    "operating system :: macos",
    "operating system :: microsoft :: windows",
    "operating system :: posix",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.6",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9"
  ],
  "description": "extends selenium to give you the ability to inspect requests made by the browser.\nselenium wire\n=============\n\nselenium wire extends `selenium's <https://www.selenium.dev/documentation/en/>`_ python bindings to give you access to the underlying requests made by the browser. you author your code in the same way as you do with selenium, but you get extra apis for inspecting requests and responses and making changes to them on the fly.\n\n.. image:: https://github.com/wkeeling/selenium-wire/workflows/build/badge.svg\n        :target: https://github.com/wkeeling/selenium-wire/actions\n\n.. image:: https://codecov.io/gh/wkeeling/selenium-wire/branch/master/graph/badge.svg\n        :target: https://codecov.io/gh/wkeeling/selenium-wire\n\n.. image:: https://img.shields.io/badge/python-3.7%2c%203.8%2c%203.9%2c%203.10-blue.svg\n        :target: https://pypi.python.org/pypi/selenium-wire\n\n.. image:: https://img.shields.io/pypi/v/selenium-wire.svg\n        :target: https://pypi.python.org/pypi/selenium-wire\n\n.. image:: https://img.shields.io/pypi/l/selenium-wire.svg\n        :target: https://pypi.python.org/pypi/selenium-wire\n\n.. image:: https://pepy.tech/badge/selenium-wire/month\n        :target: https://pepy.tech/project/selenium-wire\n\nsimple example\n~~~~~~~~~~~~~~\n\n.. code:: python\n\n    from seleniumwire import webdriver  # import from seleniumwire\n\n    # create a new instance of the chrome driver\n    driver = webdriver.chrome()\n\n    # go to the google home page\n    driver.get('https://www.google.com')\n\n    # access requests via the `requests` attribute\n    for request in driver.requests:\n        if request.response:\n            print(\n                request.url,\n                request.response.status_code,\n                request.response.headers['content-type']\n            )\n\nprints:\n\n.. code:: bash\n\n    https://www.google.com/ 200 text/html; charset=utf-8\n    https://www.google.com/images/branding/googlelogo/2x/googlelogo_color_120x44dp.png 200 image/png\n    https://consent.google.com/status?continue=https://www.google.com&pc=s&timestamp=1531511954&gl=gb 204 text/html; charset=utf-8\n    https://www.google.com/images/branding/googlelogo/2x/googlelogo_color_272x92dp.png 200 image/png\n    https://ssl.gstatic.com/gb/images/i2_2ec824b0.png 200 image/png\n    https://www.google.com/gen_204?s=webaft&t=aft&atyp=csi&ei=kgrjw7dbonktlwtk77wq&rt=wsrt.366,aft.58,prt.58 204 text/html; charset=utf-8\n    ...\n\nfeatures\n~~~~~~~~\n\n* pure python, user-friendly api\n* http and https requests captured\n* intercept requests and responses\n* modify headers, parameters, body content on the fly\n* capture websocket messages\n* har format supported\n* proxy server support\n\ncompatibilty\n~~~~~~~~~~~~\n\n* python 3.7+\n* selenium 4.0.0+\n* chrome, firefox, edge and remote webdriver supported\n\ntable of contents\n~~~~~~~~~~~~~~~~~\n\n- `installation`_\n\n  * `browser setup`_\n\n  * `openssl`_\n\n- `creating the webdriver`_\n\n- `accessing requests`_\n\n- `request objects`_\n\n- `response objects`_\n\n- `intercepting requests and responses`_\n\n  * `example: add a request header`_\n  * `example: replace an existing request header`_\n  * `example: add a response header`_\n  * `example: add a request parameter`_\n  * `example: update json in a post request body`_\n  * `example: basic authentication`_\n  * `example: block a request`_\n  * `example: mock a response`_\n  * `unset an interceptor`_\n\n- `limiting request capture`_\n\n- `request storage`_\n\n  * `in-memory storage`_\n\n- `proxies`_\n\n  * `socks`_\n\n  * `switching dynamically`_\n\n- `bot detection`_\n\n- `certificates`_\n\n  * `using your own certificate`_\n\n- `all options`_\n\n- `license`_\n\ninstallation\n~~~~~~~~~~~~\n\ninstall using pip:\n\n.. code:: bash\n\n    pip install selenium-wire\n\nif you get an error about not being able to build cryptography you may be running an old version of pip. try upgrading pip with ``python -m pip install --upgrade pip`` and then re-run the above command.\n\nbrowser setup\n-------------\n\nno specific configuration should be necessary except to ensure that you have downloaded the relevent webdriver executable for your browser and placed it somewhere on your system path.\n\n- `download <https://sites.google.com/chromium.org/driver/>`__ webdriver for chrome\n- `download <https://github.com/mozilla/geckodriver/>`__ webdriver for firefox\n- `download <https://developer.microsoft.com/en-us/microsoft-edge/tools/webdriver/>`__ webdriver for edge\n\nopenssl\n-------\n\nselenium wire requires openssl for decrypting https requests. this is probably already installed on your system (you can check by running ``openssl version`` on the command line). if it's not installed you can install it with:\n\n**linux**\n\n.. code:: bash\n\n    # for apt based linux systems\n    sudo apt install openssl\n\n    # for rpm based linux systems\n    sudo yum install openssl\n\n    # for linux alpine\n    sudo apk add openssl\n\n**macos**\n\n.. code:: bash\n\n    brew install openssl\n\n**windows**\n\nno installation is required.\n\ncreating the webdriver\n~~~~~~~~~~~~~~~~~~~~~~\n\nensure that you import ``webdriver`` from the ``seleniumwire`` package:\n\n.. code:: python\n\n    from seleniumwire import webdriver\n\nthen just instantiate the webdriver as you would if you were using selenium directly. you can pass in any desired capabilities or browser specific options - such as the executable path, headless mode etc. selenium wire also has it's `own options`_ that can be passed in the ``seleniumwire_options`` attribute.\n\n.. code:: python\n\n    # create the driver with no options (use defaults)\n    driver = webdriver.chrome()\n\n    # or create using browser specific options and/or seleniumwire_options options\n    driver = webdriver.chrome(\n        options = webdriver.chromeoptions(...),\n        seleniumwire_options={...}\n    )\n\n.. _`own options`: #all-options\n\nnote that for sub-packages of ``webdriver``, you should continue to import these directly from ``selenium``. for example, to import ``webdriverwait``:\n\n.. code:: python\n\n    # sub-packages of webdriver must still be imported from `selenium` itself\n    from selenium.webdriver.support.ui import webdriverwait\n\n**remote webdriver**\n\nselenium wire has limited support for using the remote webdriver client. when you create an instance of the remote webdriver, you need to specify the hostname or ip address of the machine (or container) running selenium wire. this allows the remote instance to communicate back to selenium wire with its requests and responses.\n\n.. code:: python\n\n    options = {\n        'addr': 'hostname_or_ip'  # address of the machine running selenium wire. explicitly use 127.0.0.1 rather than localhost if remote session is running locally.\n    }\n    driver = webdriver.remote(\n        command_executor='http://www.example.com',\n        seleniumwire_options=options\n    )\n\nif the machine running the browser needs to use a different address to talk to the machine running selenium wire you need to configure the browser manually. `this issue <https://github.com/wkeeling/selenium-wire/issues/220>`_ goes into more detail.\n\naccessing requests\n~~~~~~~~~~~~~~~~~~\n\nselenium wire captures all http/https traffic made by the browser [1]_. the following attributes provide access to requests and responses.\n\n``driver.requests``\n    the list of captured requests in chronological order.\n\n``driver.last_request``\n    convenience attribute for retrieving the most recently captured request. this is more efficient than using ``driver.requests[-1]``.\n\n``driver.wait_for_request(pat, timeout=10)``\n    this method will wait until it sees a request matching a pattern. the ``pat`` attribute will be matched within the request url. ``pat`` can be a simple substring or a regular expression. note that ``driver.wait_for_request()`` doesn't *make* a request, it just *waits* for a previous request made by some other action and it will return the first request it finds. also note that since ``pat`` can be a regular expression, you must escape special characters such as question marks with a slash. a ``timeoutexception`` is raised if no match is found within the timeout period.\n\n    for example, to wait for an ajax request to return after a button is clicked:\n\n    .. code:: python\n\n        # click a button that triggers a background request to https://server/api/products/12345/\n        button_element.click()\n\n        # wait for the request/response to complete\n        request = driver.wait_for_request('/api/products/12345/')\n\n``driver.har``\n    a json formatted har archive of http transactions that have taken place. har capture is turned off by default and you must set the ``enable_har`` `option`_ to ``true`` before using ``driver.har``.\n\n``driver.iter_requests()``\n    returns an iterator over captured requests. useful when dealing with a large number of requests.\n\n``driver.request_interceptor``\n    used to set a request interceptor. see `intercepting requests and responses`_.\n\n``driver.response_interceptor``\n    used to set a response interceptor.\n\n**clearing requests**\n\nto clear previously captured requests and har entries, use ``del``:\n\n.. code:: python\n\n    del driver.requests\n\n.. [1] selenium wire ignores options requests by default, as these are typically uninteresting and just add overhead. if you want to capture options requests, you need to set the ``ignore_http_methods`` `option`_ to ``[]``.\n\n.. _`option`: #all-options\n\nrequest objects\n~~~~~~~~~~~~~~~\n\nrequest objects have the following attributes.\n\n``body``\n    the request body as ``bytes``. if the request has no body the value of ``body`` will be empty, i.e. ``b''``.\n\n``cert``\n    information about the server ssl certificate in dictionary format. empty for non-https requests.\n\n``date``\n    the datetime the request was made.\n\n``headers``\n    a dictionary-like object of request headers. headers are case-insensitive and duplicates are permitted. asking for ``request.headers['user-agent']`` will return the value of the ``user-agent`` header. if you wish to replace a header, make sure you delete the existing header first with ``del request.headers['header-name']``, otherwise you'll create a duplicate.\n\n``host``\n    the request host, e.g. ``www.example.com``\n\n``method``\n    the http method, e.g. ``get`` or ``post`` etc.\n\n``params``\n    a dictionary of request parameters. if a parameter with the same name appears more than once in the request, it's value in the dictionary will be a list.\n\n``path``\n    the request path, e.g. ``/some/path/index.html``\n\n``querystring``\n    the query string, e.g. ``foo=bar&spam=eggs``\n\n``response``\n   the `response object`_ associated with the request. this will be ``none`` if the request has no response.\n\n``url``\n    the request url, e.g. ``https://www.example.com/some/path/index.html?foo=bar&spam=eggs``\n\n``ws_messages``\n    where the request is a websocket handshake request (normally with a url starting ``wss://``) then ``ws_messages`` will contain a list of any websocket messages sent and received. see `websocketmessage objects`_.\n\nrequest objects have the following methods.\n\n``abort(error_code=403)``\n    trigger immediate termination of the request with the supplied error code. for use within request interceptors. see `example: block a request`_.\n\n``create_response(status_code, headers=(), body=b'')``\n    create a response and return it without sending any data to the remote server. for use within request interceptors. see `example: mock a response`_.\n\n.. _`response object`: #response-objects\n\nwebsocketmessage objects\n------------------------\n\nthese objects represent websocket messages sent between the browser and server and vice versa. they are held in a list by ``request.ws_messages`` on websocket handshake requests. they have the following attributes.\n\n``content``\n    the message content which may be either ``str`` or ``bytes``.\n\n``date``\n    the datetime of the message.\n\n``from_client``\n    ``true`` when the message was sent by the client and ``false`` when sent by the server.\n\nresponse objects\n~~~~~~~~~~~~~~~~\n\nresponse objects have the following attributes.\n\n``body``\n    the response body as ``bytes``. if the response has no body the value of ``body`` will be empty, i.e. ``b''``. sometimes the body may have been compressed by the server. you can prevent this with the ``disable_encoding`` `option`_. to manually decode an encoded response body you can do:\n\n.. code:: python\n\n    from seleniumwire.utils import decode\n\n    body = decode(response.body, response.headers.get('content-encoding', 'identity'))\n\n\n``date``\n    the datetime the response was received.\n\n``headers``\n     a dictionary-like object of response headers. headers are case-insensitive and duplicates are permitted. asking for ``response.headers['content-length']`` will return the value of the ``content-length`` header. if you wish to replace a header, make sure you delete the existing header first with ``del response.headers['header-name']``, otherwise you'll create a duplicate.\n\n``reason``\n    the reason phrase, e.g. ``ok`` or ``not found`` etc.\n\n``status_code``\n    the status code of the response, e.g. ``200`` or ``404`` etc.\n\n\nintercepting requests and responses\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nas well as capturing requests and responses, selenium wire allows you to modify them on the fly using interceptors. an interceptor is a function that gets invoked with requests and responses as they pass through selenium wire. within an interceptor you can modify the request and response as you see fit.\n\nyou set your interceptor functions using the ``driver.request_interceptor`` and ``driver.response_interceptor`` attributes before you start using the driver. a request interceptor should accept a single argument for the request. a response interceptor should accept two arguments, one for the originating request and one for the response.\n\nexample: add a request header\n-----------------------------\n\n.. code:: python\n\n    def interceptor(request):\n        request.headers['new-header'] = 'some value'\n\n    driver.request_interceptor = interceptor\n    driver.get(...)\n\n    # all requests will now contain new-header\n\nhow can i check that a header has been set correctly? you can print the headers from captured requests after the page has loaded using ``driver.requests``, or alternatively point the webdriver at https://httpbin.org/headers which will echo the request headers back to the browser so you can view them.\n\nexample: replace an existing request header\n-------------------------------------------\n\nduplicate header names are permitted in an http request, so before setting the replacement header you must first delete the existing header using ``del`` like in the following example, otherwise two headers with the same name will exist (``request.headers`` is a special dictionary-like object that allows duplicates).\n\n.. code:: python\n\n    def interceptor(request):\n        del request.headers['referer']  # remember to delete the header first\n        request.headers['referer'] = 'some_referer'  # spoof the referer\n\n    driver.request_interceptor = interceptor\n    driver.get(...)\n\n    # all requests will now use 'some_referer' for the referer\n\nexample: add a response header\n------------------------------\n\n.. code:: python\n\n    def interceptor(request, response):  # a response interceptor takes two args\n        if request.url == 'https://server.com/some/path':\n            response.headers['new-header'] = 'some value'\n\n    driver.response_interceptor = interceptor\n    driver.get(...)\n\n    # responses from https://server.com/some/path will now contain new-header\n\nexample: add a request parameter\n--------------------------------\n\nrequest parameters work differently to headers in that they are calculated when they are set on the request. that means that you first have to read them, then update them, and then write them back - like in the following example. parameters are held in a regular dictionary, so parameters with the same name will be overwritten.\n\n.. code:: python\n\n    def interceptor(request):\n        params = request.params\n        params['foo'] = 'bar'\n        request.params = params\n\n    driver.request_interceptor = interceptor\n    driver.get(...)\n\n    # foo=bar will be added to all requests\n\nexample: update json in a post request body\n-----------------------------------------------\n\n.. code:: python\n\n    import json\n\n    def interceptor(request):\n        if request.method == 'post' and request.headers['content-type'] == 'application/json':\n            # the body is in bytes so convert to a string\n            body = request.body.decode('utf-8')\n            # load the json\n            data = json.loads(body)\n            # add a new property\n            data['foo'] = 'bar'\n            # set the json back on the request\n            request.body = json.dumps(data).encode('utf-8')\n            # update the content length\n            del request.headers['content-length']\n            request.headers['content-length'] = str(len(request.body))\n\n    driver.request_interceptor = interceptor\n    driver.get(...)\n\nexample: basic authentication\n-----------------------------\n\nif a site requires a username/password, you can use a request interceptor to add authentication credentials to each request. this will stop the browser from displaying a username/password pop-up.\n\n.. code:: python\n\n    import base64\n\n    auth = (\n        base64.encodebytes('my_username:my_password'.encode())\n        .decode()\n        .strip()\n    )\n\n    def interceptor(request):\n        if request.host == 'host_that_needs_auth':\n            request.headers['authorization'] = f'basic {auth}'\n\n    driver.request_interceptor = interceptor\n    driver.get(...)\n\n    # credentials will be transmitted with every request to \"host_that_needs_auth\"\n\nexample: block a request\n------------------------\n\nyou can use ``request.abort()`` to block a request and send an immediate response back to the browser. an optional error code can be supplied. the default is 403 (forbidden).\n\n.. code:: python\n\n    def interceptor(request):\n        # block png, jpeg and gif images\n        if request.path.endswith(('.png', '.jpg', '.gif')):\n            request.abort()\n\n    driver.request_interceptor = interceptor\n    driver.get(...)\n\n    # requests for png, jpeg and gif images will result in a 403 forbidden\n\nexample: mock a response\n------------------------\n\nyou can use ``request.create_response()`` to send a custom reply back to the browser. no data will be sent to the remote server.\n\n.. code:: python\n\n    def interceptor(request):\n        if request.url == 'https://server.com/some/path':\n            request.create_response(\n                status_code=200,\n                headers={'content-type': 'text/html'},  # optional headers dictionary\n                body='<html>hello world!</html>'  # optional body\n            )\n\n    driver.request_interceptor = interceptor\n    driver.get(...)\n\n    # requests to https://server.com/some/path will have their responses mocked\n\n*have any other examples you think could be useful? feel free to submit a pr.*\n\nunset an interceptor\n--------------------\n\nto unset an interceptor, use ``del``:\n\n.. code:: python\n\n    del driver.request_interceptor\n    del driver.response_interceptor\n\nlimiting request capture\n~~~~~~~~~~~~~~~~~~~~~~~~\n\nselenium wire works by redirecting browser traffic through an internal proxy server it spins up in the background. as requests flow through the proxy they are intercepted and captured. capturing requests can slow things down a little but there are a few things you can do to restrict what gets captured.\n\n``driver.scopes``\n    this accepts a list of regular expressions that will match the urls to be captured. it should be set on the driver before making any requests. when empty (the default) all urls are captured.\n\n    .. code:: python\n\n        driver.scopes = [\n            '.*stackoverflow.*',\n            '.*github.*'\n        ]\n\n        driver.get(...)  # start making requests\n\n        # only request urls containing \"stackoverflow\" or \"github\" will now be captured\n\n    note that even if a request is out of scope and not captured, it will still travel through selenium wire.\n\n``seleniumwire_options.disable_capture``\n    use this option to switch off request capture. requests will still pass through selenium wire and through any upstream proxy you have configured but they won't be intercepted or stored. request interceptors will not execute.\n\n    .. code:: python\n\n        options = {\n            'disable_capture': true  # don't intercept/store any requests\n        }\n        driver = webdriver.chrome(seleniumwire_options=options)\n\n``seleniumwire_options.exclude_hosts``\n    use this option to bypass selenium wire entirely. any requests made to addresses listed here will go direct from the browser to the server without involving selenium wire. note that if you've configured an upstream proxy then these requests will also bypass that proxy.\n\n    .. code:: python\n\n        options = {\n            'exclude_hosts': ['host1.com', 'host2.com']  # bypass selenium wire for these hosts\n        }\n        driver = webdriver.chrome(seleniumwire_options=options)\n\n``request.abort()``\n    you can abort a request early by using ``request.abort()`` from within a `request interceptor`_. this will send an immediate response back to the client without the request travelling any further. you can use this mechanism to block certain types of requests (e.g. images) to improve page load performance.\n\n    .. code:: python\n\n        def interceptor(request):\n            # block png, jpeg and gif images\n            if request.path.endswith(('.png', '.jpg', '.gif')):\n                request.abort()\n\n        driver.request_interceptor = interceptor\n\n        driver.get(...)  # start making requests\n\n.. _`request interceptor`: #intercepting-requests-and-responses\n\nrequest storage\n~~~~~~~~~~~~~~~\n\ncaptured requests and responses are stored in the system temp folder by default (that's ``/tmp`` on linux and usually ``c:\\users\\<username>\\appdata\\local\\temp`` on windows) in a sub-folder called ``.seleniumwire``. to change where the ``.seleniumwire`` folder gets created you can use the ``request_storage_base_dir`` option:\n\n.. code:: python\n\n    options = {\n        'request_storage_base_dir': '/my/storage/folder'  # .seleniumwire will get created here\n    }\n    driver = webdriver.chrome(seleniumwire_options=options)\n\nin-memory storage\n-----------------\n\nselenium wire also supports storing requests and responses in memory only, which may be useful in certain situations - e.g. if you're running short lived docker containers and don't want the overhead of disk persistence. you can enable in-memory storage by setting the ``request_storage`` option to ``memory``:\n\n.. code:: python\n\n    options = {\n        'request_storage': 'memory'  # store requests and responses in memory only\n    }\n    driver = webdriver.chrome(seleniumwire_options=options)\n\nif you're concerned about the amount of memory that may be consumed, you can restrict the number of requests that are stored with the ``request_storage_max_size`` option:\n\n.. code:: python\n\n    options = {\n        'request_storage': 'memory',\n        'request_storage_max_size': 100  # store no more than 100 requests in memory\n    }\n    driver = webdriver.chrome(seleniumwire_options=options)\n\nwhen the max size is reached, older requests are discarded as newer requests arrive. keep in mind that if you restrict the number of requests being stored, requests may have disappeared from storage by the time you come to retrieve them with ``driver.requests`` or ``driver.wait_for_request()`` etc.\n\nproxies\n~~~~~~~\n\nif the site you are accessing sits behind a proxy server you can tell selenium wire about that proxy server in the options you pass to the webdriver.\n\nthe configuration takes the following format:\n\n.. code:: python\n\n    options = {\n        'proxy': {\n            'http': 'http://192.168.10.100:8888',\n            'https': 'https://192.168.10.100:8888',\n            'no_proxy': 'localhost,127.0.0.1'\n        }\n    }\n    driver = webdriver.chrome(seleniumwire_options=options)\n\nto use http basic auth with your proxy, specify the username and password in the url:\n\n.. code:: python\n\n    options = {\n        'proxy': {\n            'https': 'https://user:pass@192.168.10.100:8888',\n        }\n    }\n\nfor authentication other than basic, you can supply the full value for the ``proxy-authorization`` header using the ``custom_authorization`` option. for example, if your proxy used the bearer scheme:\n\n.. code:: python\n\n    options = {\n        'proxy': {\n            'https': 'https://192.168.10.100:8888',  # no username or password used\n            'custom_authorization': 'bearer mytoken123'  # custom proxy-authorization header value\n        }\n    }\n\nmore info on the ``proxy-authorization`` header can be found `here <https://developer.mozilla.org/en-us/docs/web/http/headers/proxy-authorization>`__.\n\nthe proxy configuration can also be loaded through environment variables called ``http_proxy``, ``https_proxy`` and ``no_proxy``:\n\n.. code:: bash\n\n    $ export http_proxy=\"http://192.168.10.100:8888\"\n    $ export https_proxy=\"https://192.168.10.100:8888\"\n    $ export no_proxy=\"localhost,127.0.0.1\"\n\nsocks\n-----\n\nusing a socks proxy is the same as using an http based one but you set the scheme to ``socks5``:\n\n.. code:: python\n\n    options = {\n        'proxy': {\n            'http': 'socks5://user:pass@192.168.10.100:8888',\n            'https': 'socks5://user:pass@192.168.10.100:8888',\n            'no_proxy': 'localhost,127.0.0.1'\n        }\n    }\n    driver = webdriver.chrome(seleniumwire_options=options)\n\nyou can leave out the ``user`` and ``pass`` if your proxy doesn't require authentication.\n\nas well as ``socks5``, the schemes ``socks4`` and ``socks5h`` are supported. use ``socks5h`` when you want dns resolution to happen on the proxy server rather than on the client.\n\n**using selenium wire with tor**\n\nsee `this example <https://gist.github.com/woswos/38b921f0b82de009c12c6494db3f50c5>`_ if you want to run selenium wire with tor.\n\nswitching dynamically\n---------------------\n\nif you want to change the proxy settings for an existing driver instance, use the ``driver.proxy`` attribute:\n\n.. code:: python\n\n    driver.get(...)  # using some initial proxy\n\n    # change the proxy\n    driver.proxy = {\n        'https': 'https://user:pass@192.168.10.100:8888',\n    }\n\n    driver.get(...)  # these requests will use the new proxy\n\nto clear a proxy, set ``driver.proxy`` to an empty dict ``{}``.\n\nthis mechanism also supports the ``no_proxy`` and ``custom_authorization`` options.\n\nbot detection\n~~~~~~~~~~~~~\n\nselenium wire will integrate with `undetected-chromedriver`_ if it finds it in your environment. this library will transparently modify chromedriver to prevent it from triggering anti-bot measures on websites.\n\n.. _`undetected-chromedriver`: https://github.com/ultrafunkamsterdam/undetected-chromedriver\n\nif you wish to take advantage of this make sure you have undetected_chromedriver installed:\n\n.. code:: bash\n\n    pip install undetected-chromedriver\n\nthen in your code, import the ``seleniumwire.undetected_chromedriver`` package:\n\n.. code:: python\n\n    import seleniumwire.undetected_chromedriver as uc\n\n    chrome_options = uc.chromeoptions()\n\n    driver = uc.chrome(\n        options=chrome_options,\n        seleniumwire_options={}\n    )\n\n\ncertificates\n~~~~~~~~~~~~\n\nselenium wire uses it's own root certificate to decrypt https traffic. it is not normally necessary for the browser to trust this certificate because selenium wire tells the browser to add it as an exception. this will allow the browser to function normally, but it will display a \"not secure\" message (and/or unlocked padlock) in the address bar. if you wish to get rid of this message you can install the root certificate manually.\n\nyou can download the root certificate `here <https://github.com/wkeeling/selenium-wire/raw/master/seleniumwire/ca.crt>`__. once downloaded, navigate to \"certificates\" in your browser settings and import the certificate in the \"authorities\" section.\n\nusing your own certificate\n--------------------------\n\nif you would like to use your own root certificate you can supply the path to the certificate and the private key using the ``ca_cert`` and ``ca_key`` options.\n\nif you do specify your own certificate, be sure to manually delete selenium wire's `temporary storage folder <#request-storage>`_. this will clear out any existing certificates that may have been cached from previous runs.\n\nall options\n~~~~~~~~~~~\n\na summary of all options that can be passed to selenium wire via the ``seleniumwire_options`` webdriver attribute.\n\n``addr``\n    the ip address or hostname of the machine running selenium wire. this defaults to 127.0.0.1. you may want to change this to the public ip of the machine (or container) if you're using the `remote webdriver`_.\n\n.. code:: python\n\n    options = {\n        'addr': '192.168.0.10'  # use the public ip of the machine\n    }\n    driver = webdriver.chrome(seleniumwire_options=options)\n\n.. _`remote webdriver`: #creating-the-webdriver\n\n``auto_config``\n    whether selenium wire should auto-configure the browser for request capture. ``true`` by default.\n\n``ca_cert``\n    the path to a root (ca) certificate if you prefer to use your own certificate rather than use the default.\n\n.. code:: python\n\n    options = {\n        'ca_cert': '/path/to/ca.crt'  # use own root certificate\n    }\n    driver = webdriver.chrome(seleniumwire_options=options)\n\n``ca_key``\n    the path to the private key if you're using your own root certificate. the key must always be supplied when using your own certificate.\n\n.. code:: python\n\n    options = {\n        'ca_key': '/path/to/ca.key'  # path to private key\n    }\n    driver = webdriver.chrome(seleniumwire_options=options)\n\n``disable_capture``\n    disable request capture. when ``true`` nothing gets intercepted or stored. ``false`` by default.\n\n.. code:: python\n\n    options = {\n        'disable_capture': true  # don't intercept/store any requests.\n    }\n    driver = webdriver.chrome(seleniumwire_options=options)\n\n``disable_encoding``\n    ask the server to send back uncompressed data. ``false`` by default. when ``true`` this sets the ``accept-encoding`` header to ``identity`` for all outbound requests. note that it won't always work - sometimes the server may ignore it.\n\n.. code:: python\n\n    options = {\n        'disable_encoding': true  # ask the server not to compress the response\n    }\n    driver = webdriver.chrome(seleniumwire_options=options)\n\n``enable_har``\n    when ``true`` a har archive of http transactions will be kept which can be retrieved with ``driver.har``. ``false`` by default.\n\n.. code:: python\n\n    options = {\n        'enable_har': true  # capture har data, retrieve with driver.har\n    }\n    driver = webdriver.chrome(seleniumwire_options=options)\n\n``exclude_hosts``\n    a list of addresses for which selenium wire should be bypassed entirely. note that if you have configured an upstream proxy then requests to excluded hosts will also bypass that proxy.\n\n.. code:: python\n\n    options = {\n        'exclude_hosts': ['google-analytics.com']  # bypass these hosts\n    }\n    driver = webdriver.chrome(seleniumwire_options=options)\n\n``ignore_http_methods``\n    a list of http methods (specified as uppercase strings) that should be ignored by selenium wire and not captured. the default is ``['options']`` which ignores all options requests. to capture all request methods, set ``ignore_http_methods`` to an empty list:\n\n.. code:: python\n\n    options = {\n        'ignore_http_methods': []  # capture all requests, including options requests\n    }\n    driver = webdriver.chrome(seleniumwire_options=options)\n\n``port``\n    the port number that selenium wire's backend listens on. you don't normally need to specify a port as a random port number is chosen automatically.\n\n.. code:: python\n\n    options = {\n        'port': 9999  # tell the backend to listen on port 9999 (not normally necessary to set this)\n    }\n    driver = webdriver.chrome(seleniumwire_options=options)\n\n``proxy``\n    the upstream `proxy server <https://github.com/wkeeling/selenium-wire#proxies>`__ configuration if you're using a proxy.\n\n.. code:: python\n\n    options = {\n        'proxy': {\n            'http': 'http://user:pass@192.168.10.100:8888',\n            'https': 'https://user:pass@192.168.10.100:8889',\n            'no_proxy': 'localhost,127.0.0.1'\n        }\n    }\n    driver = webdriver.chrome(seleniumwire_options=options)\n\n``request_storage``\n    the type of storage to use. selenium wire defaults to disk based storage, but you can switch to in-memory storage by setting this option to ``memory``:\n\n.. code:: python\n\n    options = {\n        'request_storage': 'memory'  # store requests and responses in memory only\n    }\n    driver = webdriver.chrome(seleniumwire_options=options)\n\n``request_storage_base_dir``\n    the base location where selenium wire stores captured requests and responses when using its default disk based storage. this defaults to the system temp folder (that's ``/tmp`` on linux and usually ``c:\\users\\<username>\\appdata\\local\\temp`` on windows). a sub-folder called ``.seleniumwire`` will get created here to store the captured data.\n\n.. code:: python\n\n    options = {\n        'request_storage_base_dir': '/my/storage/folder'  # .seleniumwire will get created here\n    }\n    driver = webdriver.chrome(seleniumwire_options=options)\n\n``request_storage_max_size``\n    the maximum number of requests to store when using in-memory storage. unlimited by default. this option currently has no effect when using the default disk based storage.\n\n.. code:: python\n\n    options = {\n        'request_storage': 'memory',\n        'request_storage_max_size': 100  # store no more than 100 requests in memory\n    }\n    driver = webdriver.chrome(seleniumwire_options=options)\n\n``suppress_connection_errors``\n    whether to suppress connection related tracebacks. ``true`` by default, meaning that harmless errors that sometimes occur at browser shutdown do not alarm users. when suppressed, the connection error message is logged at debug level without a traceback. set to ``false`` to allow exception propagation and see full tracebacks.\n\n.. code:: python\n\n    options = {\n        'suppress_connection_errors': false  # show full tracebacks for any connection errors\n    }\n    driver = webdriver.chrome(seleniumwire_options=options)\n\n``verify_ssl``\n    whether ssl certificates should be verified. ``false`` by default, which prevents errors with self-signed certificates.\n\n.. code:: python\n\n    options = {\n        'verify_ssl': true  # verify ssl certificates but beware of errors with self-signed certificates\n    }\n    driver = webdriver.chrome(seleniumwire_options=options)\n\nlicense\n~~~~~~~\n\nmit\n\n\nhistory\n~~~~~~~\n\n5.1.0 (2022-10-15)\n------------------\n\n* drop support for selenium<4.0.0.\n* drop support for sslv2 and sslv3.\n* fix bug where setting non-string header values would cause an interceptor to fail.\n\n5.0.0 (2022-09-26)\n------------------\n\n* add support for microsoft edge to webdriver\n* drop support for python 3.6\n* fix compatibility issue with pyopenssl\n\n4.6.5 (2022-07-09)\n------------------\n\n* fix compatibility issue with desiredcapabilities and older versions of the chrome webdriver api.\n* fix bug where verify_ssl would assume the inverse of the boolean passed (it was the wrong way round).\n* minor update to support python 3.10.\n* minor readme updates.\n\n4.6.4 (2022-05-11)\n------------------\n\n* fix bug where setting an interceptor would break websocket requests.\n\n4.6.3 (2022-03-13)\n------------------\n\n* fix bug with dynamic switching of upstream proxy.\n\n4.6.2 (2022-02-25)\n------------------\n\n* fix import error with missing touchactions in selenium>4.1.0\n\n4.6.1 (2022-02-21)\n------------------\n\n* fix compatibility issue with undetected_chromedriver.\n* handle occasional unpickle error when loading captured requests from disk.\n\n4.6.0 (2022-01-10)\n------------------\n\n* configurable root certificate and private key.\n* fix bug where it was not possible to clear a proxy once set.\n\n4.5.6 (2021-11-26)\n------------------\n\n* fix bug where using the chrome_options argument would prevent request capture.\n* fix issue where proxy-connection header was being propagated.\n\n4.5.5 (2021-11-13)\n------------------\n\n* fix issue where missing 'packaging' module prevents selenium wire from starting.\n* fix deprecation warnings with desired capabilities.\n\n4.5.4 (2021-10-23)\n------------------\n\n* fix bug preventing request capture when using firefox and selenium >= 4.0.0\n\n4.5.3 (2021-10-03)\n------------------\n\n* fix bug where setting a socket timeout would break the ssl handshake.\n* support for brotli and zstd content encoding.\n* suppress http protocol warning.\n\n4.5.2 (2021-08-23)\n------------------\n\n* fix bug where automatic decoding of response body would break page loading when using response interceptors.\n* fix bug where exclude_hosts had no effect when using undetected_chromedriver.v2.\n* fix occasional unpickle error when stored requests are asked for before they have been fully flushed to disk.\n\n4.5.1 (2021-08-20)\n------------------\n\n* fix attribute error preventing undetected chromedriver from starting.\n\n4.5.0 (2021-08-19)\n------------------\n\n* allow upstream proxy to be changed on the fly.\n\n4.4.1 (2021-08-10)\n------------------\n\n* fix async bug that breaks django orm.\n\n4.4.0 (2021-07-23)\n------------------\n\n* introduce in-memory request storage.\n* default request storage now uses system temp folder by default.\n* remove mitmproxy backend. selenium wire uses mitmproxy by default so a separate mitmproxy backend is redundant.\n\n4.3.3 (2021-07-19)\n------------------\n\n* fix proxy authorization failures when selenium wire is run in multiple threads.\n\n4.3.2 (2021-07-11)\n------------------\n\n* fix bug where the upstream no_proxy setting would be ignored for http hosts.\n* prevent firefox from bypassing selenium wire for localhost addresses.\n* fix bug where dns wasn't being resolved through the proxy for socks5h.\n\n4.3.1 (2021-06-13)\n------------------\n\n* don't fold separate set-cookie response headers into a single header.\n* add additional ssl certificate properties to request.cert\n\n4.3.0 (2021-05-06)\n------------------\n\n* allow selection of undetected_chromedriver version.\n* add new attribute request.host\n\n4.2.5 (2021-05-03)\n------------------\n\n* switch to upstream_cert=true by default, enabling http/2.\n\n4.2.4 (2021-04-13)\n------------------\n\n* fix bug where disable_capture would break upstream proxy authentication.\n\n4.2.3 (2021-04-03)\n------------------\n\n* fix bug where it was not possible to specify socks4 in proxy configuration.\n\n4.2.2 (2021-03-19)\n------------------\n\n* fix concurrency issue in requeststorage that allowed partially stored requests to be retrieved.\n\n4.2.1 (2021-03-09)\n------------------\n\n* make ssl certificate metadata available via request.cert\n* suppress connection aborted error by default.\n* log error on proxy authentication failure.\n\n4.2.0 (2021-03-03)\n------------------\n\n* add support for har format.\n* add disable_capture option.\n* add driver.iter_requests().\n* fix bug where no_proxy was being ignored in proxy configuration.\n\n4.1.1 (2021-02-26)\n------------------\n\n* integration with undetected-chromedriver.\n\n4.1.0 (2021-02-24)\n------------------\n\n* implement websocket message capture.\n* fix bug where closure of event loop externally would trigger exception on shutdown.\n* fix bug preventing use of an empty password for an upstream proxy.\n\n4.0.5 (2021-02-15)\n------------------\n\n* downgrade \"the client may not trust selenium wire's certificate\" to debug.\n* introduce auto_config option.\n\n4.0.4 (2021-02-05)\n------------------\n\n* fix bug where selenium wire would attempt to close running event loop.\n\n4.0.3 (2021-02-04)\n------------------\n\n* fix bug where ipv6 addresses were not being enclosed in square brackets, breaking the local proxy url.\n\n4.0.2 (2021-02-01)\n------------------\n\n* fix additional problems caused by ipv6 socket binding.\n\n4.0.1 (2021-02-01)\n------------------\n\n* fix bug where binding to ipv6 socket would prevent selenium wire from starting.\n\n\n4.0.0 (2021-01-31)\n------------------\n\n* rework the default backend to:\n    * improve performance when connecting to upstream proxies\n    * remove the need for starting an openssl subprocess for certificate generation\n    * fix issue where duplicate headers could not be proxied to the upstream server\n    * fix issue where the response status code was being overridden by the connect status\n    * lay the groundwork for supporting websocket message capture\n    * lay the groundwork for supporting ssl pass-through\n\n3.0.6 (2021-01-30)\n------------------\n\n* fix bug preventing mitmproxy backend from using custom confdir.\n\n3.0.5 (2021-01-18)\n------------------\n\n* suppress upstream connection errors based on configuration.\n\n3.0.4 (2021-01-07)\n------------------\n\n* revert change to capture options requests by default.\n\n\n3.0.3 (2021-01-07)\n------------------\n\n* decode response body on load.\n\n3.0.2 (2021-01-05)\n------------------\n\n* fix issue where remote web driver client was being imported from incorrect package.\n\n3.0.1 (2021-01-03)\n------------------\n\n* create a new event loop if current event loop is closed.\n\n3.0.0 (2021-01-02)\n------------------\n\n* inroduce request and response interceptors.\n* run mitmproxy backend in a thread rather than subprocess.\n* drop internal http admin api.\n* drop support for python 3.4 and 3.5.\n* add support for remote webdriver client.\n* add support for duplicate request and response headers.\n* fixed issue where proxy-connection header was being propagated.\n* fixed issue where desired capabilities could not be reused outside of selenium wire due to addition of proxy config.\n* deprecation of header_overrides, param_overrides, querystring_overrides, rewrite_urls, custom_response_handler\n\n2.1.2 (2020-11-14)\n------------------\n\n* prevent chrome from bypassing selenium wire for localhost addresses.\n\n2.1.1 (2020-08-10)\n------------------\n\n* automatic port number selection for mitmproxy backend.\n\n2.1.0 (2020-07-21)\n------------------\n\n* support regular expressions in driver.wait_for_request().\n\n2.0.0 (2020-07-14)\n------------------\n\n* introduce the mitmproxy backend\n* support for modifying response headers\n* support for modifying request parameters and the query string\n* breaking api changes:\n    * the request.path attribute now returns the path rather than the full url. to retrieve the url, use request.url.\n    * empty request and response bodies are now returned as empty bytes `b''` rather than `none`.\n\n1.2.3 (2020-06-19)\n------------------\n\n* disable connection persistence by default due to side effects in certain cases.\n\n1.2.2 (2020-06-12)\n------------------\n\n* close connection on error rather than send 502 response to permit browser retry.\n\n1.2.1 (2020-06-09)\n------------------\n\n* use sha256 digest when creating site certificates to fix chrome hsts security errors.\n\n1.2.0 (2020-06-07)\n------------------\n\n* add properties to allow easy retrieval of the query string and request parameters.\n* don't verify ssl by default.\n* allow configurable number of request threads.\n* use connection persistance (keep-alive) by default. make configurable.\n\n1.1.2 (2020-05-27)\n------------------\n\n* fix bug where request thread would spin after websocket closure.\n\n\n1.1.1 (2020-05-25)\n------------------\n\n* handle errors occuring on websocket connections.\n\n1.1.0 (2020-05-23)\n------------------\n\n* allow the request storage base directory to be configurable.\n* support proxying websocket connections.\n* fix bug where attempting to filter out non-existent headers would raise an error.\n* handle possibility of zero byte captured request/response files.\n\n1.0.12 (2020-05-16)\n-------------------\n\n* support for socks proxies.\n\n1.0.11 (2019-12-31)\n-------------------\n\n* fix duplication of content-length header when altering body content.\n\n1.0.10 (2019-09-22)\n-------------------\n\n* scope request capture.\n* apply header filtering on a per-url basis.\n\n1.0.9 (2019-08-25)\n------------------\n\n* add ability to provide a custom response handler method.\n\n1.0.8 (2019-08-01)\n------------------\n\n* remove signal handler from adminclient to allow running in multi-threaded environment.\n* make connection timeout configurable.\n\n1.0.7 (2019-07-30)\n------------------\n\n* fix bug where temporary storage cleanup would sometimes fail when running in a multi-threaded environment.\n* don't rely on signal handlers for temporary storage cleanup. signal handlers are not compatible with multiple threads. use driver.quit() for explicit cleanup.\n\n1.0.6 (2019-07-14)\n------------------\n\n* support for disabling ssl verification when using self-signed certificates.\n\n1.0.5 (2019-06-15)\n------------------\n\n* improve performance on windows by explicitly closing the response output stream.\n* capture stderr leaking from openssl to the console.\n* ensure subjectaltname is added to self signed certificates.\n* refactor certificate generation code.\n* more robust handling of socket errors.\n* decode response bodies at the point a client asks for them, not at the point a response is captured.\n\n1.0.4 (2019-04-04)\n------------------\n\n* clean up cached request directory tree on driver.quit().\n* suppress connection related errors by default.\n\n1.0.3 (2019-04-01)\n------------------\n\n* responses are no longer sent chunk by chunk where they are missing a content-type header.\n* ensure delayed responses don't cause errors when server is not explicitly shutdown.\n\n1.0.2 (2019-03-10)\n------------------\n\n* support for authentication when using http based proxies.\n* fix bug where json response bodies were being decoded rather than being sent through as bytes.\n\n1.0.1 (2019-02-07)\n------------------\n\n* support patch requests\n\n1.0.0 (2018-12-31)\n------------------\n\n* ensure stored response body is always retrieved as bytes when asked for by the test.\n* updates to readme.\n* use reverse chronological ordering of history.\n\n0.10.0 (2018-10-30)\n-------------------\n\n* fix issue where ignoring options requests would trigger attributeerror.\n* allow proxy settings to be explicitly set to none.\n\n0.9.0 (2018-10-28)\n------------------\n\n* ignore options requests by default, and allow list of methods to be configurable via the ignore_http_methods option.\n* move default selenium wire request storage from system temp to user home to prevent permission collisions.\n\n0.8.0 (2018-09-20)\n------------------\n\n* fix issue where new headers were not being added to the request when using driver.header_overrides.\n\n0.7.0 (2018-08-29)\n------------------\n\n* readme and doc updates.\n\n0.6.0 (2018-08-21)\n------------------\n\n* bundle openssl.cnf for windows.\n\n0.5.0 (2018-08-19)\n------------------\n\n* clearer readme instructions.\n\n0.4.0 (2018-08-19)\n------------------\n\n* openssl for windows now bundled.\n* setup instructions for edge.\n\n0.3.0 (2018-08-07)\n------------------\n\n* fix remote proxy basic authentication.\n* updates to readme.\n\n0.2.0 (2018-08-04)\n------------------\n\n* load proxy settings from env variables.\n* support disabling of content encoding.\n* updates to readme.\n\n0.1.0 (2018-06-19)\n------------------\n\n* first release on pypi.\n\n\n",
  "docs_url": null,
  "keywords": "selenium-wire",
  "license": "mit",
  "name": "selenium-wire",
  "package_url": "https://pypi.org/project/selenium-wire/",
  "project_url": "https://pypi.org/project/selenium-wire/",
  "project_urls": {
    "Homepage": "https://github.com/wkeeling/selenium-wire"
  },
  "release_url": "https://pypi.org/project/selenium-wire/5.1.0/",
  "requires_dist": [
    "blinker (>=1.4)",
    "brotli (>=1.0.9)",
    "certifi (>=2019.9.11)",
    "kaitaistruct (>=0.7)",
    "pyasn1 (>=0.3.1)",
    "pyOpenSSL (>=22.0.0)",
    "pyparsing (>=2.4.2)",
    "pysocks (>=1.7.1)",
    "selenium (>=4.0.0)",
    "wsproto (>=0.14)",
    "zstandard (>=0.14.1)",
    "dataclasses (>=0.7) ; python_version == \"3.6\"",
    "h2 (>=4.0) ; python_version >= \"3.6.0\"",
    "hyperframe (>=6.0) ; python_version >= \"3.6.0\"",
    "pydivert (>=2.0.3) ; sys_platform == \"win32\"",
    "black ; extra == 'dev'",
    "bumpversion ; extra == 'dev'",
    "coverage ; extra == 'dev'",
    "flake8 ; extra == 'dev'",
    "gunicorn ; extra == 'dev'",
    "httpbin ; extra == 'dev'",
    "isort ; extra == 'dev'",
    "mypy ; extra == 'dev'",
    "pre-commit ; extra == 'dev'",
    "pytest ; extra == 'dev'",
    "pytest-cov ; extra == 'dev'",
    "tox ; extra == 'dev'",
    "twine ; extra == 'dev'",
    "werkzeug (==2.0.3) ; extra == 'dev'",
    "wheel ; extra == 'dev'",
    "mitmproxy (>5.3.0) ; (python_version >= \"3.8.0\") and extra == 'dev'"
  ],
  "requires_python": ">=3.6",
  "summary": "extends selenium to give you the ability to inspect requests made by the browser.",
  "version": "5.1.0",
  "releases": [],
  "developers": [
    "will@zifferent.com",
    "will_keeling"
  ],
  "kwds": "selenium seleniumwire seleniumwire_options webdriverwait webdriver",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_selenium_wire",
  "homepage": "https://github.com/wkeeling/selenium-wire",
  "release_count": 76,
  "dependency_ids": [
    "pypi_black",
    "pypi_blinker",
    "pypi_brotli",
    "pypi_bumpversion",
    "pypi_certifi",
    "pypi_coverage",
    "pypi_dataclasses",
    "pypi_flake8",
    "pypi_gunicorn",
    "pypi_h2",
    "pypi_httpbin",
    "pypi_hyperframe",
    "pypi_isort",
    "pypi_kaitaistruct",
    "pypi_mitmproxy",
    "pypi_mypy",
    "pypi_pre_commit",
    "pypi_pyasn1",
    "pypi_pydivert",
    "pypi_pyopenssl",
    "pypi_pyparsing",
    "pypi_pysocks",
    "pypi_pytest",
    "pypi_pytest_cov",
    "pypi_selenium",
    "pypi_tox",
    "pypi_twine",
    "pypi_werkzeug",
    "pypi_wheel",
    "pypi_wsproto",
    "pypi_zstandard"
  ],
  "documentation_summary": "The GitHub repository \"wkeeling/selenium-wire\" extends Selenium's Python bindings, enabling users to inspect browser requests. It offers additional APIs for examining and modifying requests and responses on the fly, including HTTP(S) requests, headers, parameters, and body content. The project supports Python 3.7+, Selenium 4.0.0+, and major browsers like Chrome, Firefox, and Edge. It was archived on January 3, 2024, and is no longer maintained. Key features include capturing HTTP(S) and WebSocket messages, modifying request/response data, proxy support, and compatibility with various Python and Selenium versions. Installation is straightforward via pip, and the project is licensed under the MIT license.",
  "embedding": [
    -0.00731738330796361,
    0.007182008121162653,
    0.0156322680413723,
    -0.0062272571958601475,
    0.006351944524794817,
    0.0008910713368095458,
    -0.003737066639587283,
    -0.008329134434461594,
    -0.016701018437743187,
    -0.03488403931260109,
    0.0036373166367411613,
    0.0006559460307471454,
    -0.005500506144016981,
    0.021588774397969246,
    0.01428564079105854,
    -0.03781954199075699,
    0.016758019104599953,
    -0.043690551072359085,
    -0.020121023058891296,
    -0.01802626997232437,
    0.004175254609435797,
    -0.007759133819490671,
    -0.0009538604645058513,
    0.0006007272168062627,
    -0.011036637239158154,
    0.015532517805695534,
    -0.011770512908697128,
    -0.035311538726091385,
    -0.014848516322672367,
    -0.01176338829100132,
    0.019194772467017174,
    0.0025792529340833426,
    -0.03573904186487198,
    -0.013131389394402504,
    0.0003273050533607602,
    0.007680758833885193,
    0.013302390463650227,
    -0.004520817659795284,
    0.021389273926615715,
    0.006152444519102573,
    0.01070176251232624,
    0.006530069746077061,
    0.013259639963507652,
    -0.01668676920235157,
    -0.03519754111766815,
    0.005276068579405546,
    -0.019807523116469383,
    -0.015276017598807812,
    0.005828256718814373,
    0.012084013782441616,
    0.006864945404231548,
    -0.0007570321322418749,
    -0.01835402101278305,
    -0.036565542221069336,
    0.015147767029702663,
    -0.002094752388074994,
    0.008813634514808655,
    0.031236035749316216,
    -0.004071942064911127,
    -0.008393259719014168,
    0.006604882422834635,
    0.011499762535095215,
    -0.04460255056619644,
    -0.016558518633246422,
    -0.007071570493280888,
    0.0058246939443051815,
    -0.005785506684333086,
    0.014314141124486923,
    -0.021104274317622185,
    -0.01031701173633337,
    0.027687780559062958,
    0.02874228172004223,
    0.00801563449203968,
    -0.019608022645115852,
    0.03477003797888756,
    -0.014777266420423985,
    -0.04448854923248291,
    0.02499452792108059,
    0.009967885911464691,
    -0.011157762259244919,
    0.012796514667570591,
    -0.0017848145216703415,
    -0.015105017460882664,
    0.050160057842731476,
    0.030495034530758858,
    0.025863779708743095,
    0.015575267374515533,
    0.012262138538062572,
    0.0035945666022598743,
    -0.014862766489386559,
    0.01587451808154583,
    0.011229013092815876,
    0.013095764443278313,
    0.028585532680153847,
    0.006665444932878017,
    0.02083352394402027,
    -0.019323021173477173,
    0.017841020599007607,
    -0.013338015414774418,
    -0.03348753601312637,
    -0.0012789389584213495,
    0.01318839006125927,
    -0.013330889865756035,
    -0.006936195306479931,
    -0.02247227542102337,
    -0.012582764029502869,
    -0.0055681937374174595,
    -0.0008104696753434837,
    0.025365028530359268,
    0.011571013368666172,
    -0.01337364036589861,
    0.03488403931260109,
    0.036081042140722275,
    -0.029725532978773117,
    0.007616633549332619,
    -0.017898019403219223,
    0.02315627597272396,
    -0.009682886302471161,
    -0.004880630411207676,
    -0.02478077821433544,
    0.013965015299618244,
    0.004698942881077528,
    0.02613453008234501,
    -0.03354453667998314,
    0.019479772076010704,
    0.018496520817279816,
    -0.005810444243252277,
    -0.0032881912775337696,
    0.02898453362286091,
    -0.026348279789090157,
    0.029155533760786057,
    -0.0185250211507082,
    0.023127775639295578,
    0.01155676320195198,
    -0.01131451316177845,
    -3.7677655200241134e-06,
    -0.02543627843260765,
    -0.00023200806754175574,
    -0.008956135250627995,
    -0.023669276386499405,
    0.010901262052357197,
    0.033231038600206375,
    -0.009476260282099247,
    0.005700006615370512,
    -0.008535759523510933,
    0.041866548359394073,
    -0.004948318004608154,
    -0.01624501869082451,
    -0.0023280964232981205,
    -0.003603472840040922,
    0.01318839006125927,
    0.0019647208973765373,
    -0.007096508052200079,
    -0.006679695099592209,
    -0.001463298569433391,
    0.015333017334342003,
    0.01548976730555296,
    0.02225852571427822,
    -0.012297763489186764,
    0.00038853558362461627,
    -0.0063982573337852955,
    0.02490902878344059,
    -0.02014952339231968,
    -0.038446541875600815,
    -0.023512527346611023,
    0.032946038991212845,
    0.0002731995191425085,
    -0.004153879825025797,
    -0.02425352670252323,
    0.0020644711330533028,
    0.010252886451780796,
    0.012233639135956764,
    -0.01627351902425289,
    -0.00844313483685255,
    8.850595622789115e-05,
    -0.01090838760137558,
    0.007673633750528097,
    0.003776254365220666,
    -0.014663266949355602,
    -0.0045136925764381886,
    0.017285268753767014,
    0.01109363790601492,
    -0.001560376724228263,
    0.024353276938199997,
    -0.011050887405872345,
    -0.02076227404177189,
    -0.014535016380250454,
    -0.003279285039752722,
    0.017598770558834076,
    0.016373269259929657,
    0.03211953490972519,
    0.02197352424263954,
    -0.0053544435650110245,
    -0.025536028668284416,
    -0.5800326466560364,
    -0.005023130681365728,
    -0.024396028369665146,
    -0.014271391555666924,
    0.01896677166223526,
    0.012739514000713825,
    0.009739886038005352,
    0.012383263558149338,
    -0.007452758494764566,
    0.022116024047136307,
    -0.007171320728957653,
    0.03400053828954697,
    -0.000713836750946939,
    -0.01316701527684927,
    -0.03317403793334961,
    -0.02418227680027485,
    -0.007160632871091366,
    -0.031008034944534302,
    0.002137502422556281,
    0.009739886038005352,
    -0.012461639009416103,
    0.030267033725976944,
    -0.026604780927300453,
    0.019237522035837173,
    0.022985275834798813,
    0.00027275420143269,
    0.005564631428569555,
    -0.021318024024367332,
    -0.002474159002304077,
    -0.006583507638424635,
    -0.023384276777505875,
    0.03348753601312637,
    0.01506226696074009,
    0.005960069131106138,
    0.05272505804896355,
    0.010887011885643005,
    -0.03593854233622551,
    0.022572025656700134,
    0.01157813798636198,
    0.0655500739812851,
    -0.011100762523710728,
    -0.004592067562043667,
    -0.00774488365277648,
    -0.011870263144373894,
    -0.012447388842701912,
    0.007623758632689714,
    0.014399641193449497,
    0.013986391015350819,
    -0.006722445134073496,
    -0.014934017322957516,
    0.0048414431512355804,
    -0.015945767983794212,
    -0.012404639273881912,
    0.0022621899843215942,
    0.02706078067421913,
    -0.001843595877289772,
    0.01868177019059658,
    -0.014292766340076923,
    0.018083270639181137,
    0.025507528334856033,
    -0.019679272547364235,
    0.0341145396232605,
    0.004991068039089441,
    -0.039415545761585236,
    0.010552137158811092,
    0.02482352778315544,
    -0.006444569677114487,
    -0.02955453284084797,
    0.0073815081268548965,
    0.008592759259045124,
    0.037221040576696396,
    0.011229013092815876,
    -0.004349817521870136,
    -0.012860639952123165,
    0.019479772076010704,
    0.05141405761241913,
    0.031321536749601364,
    0.018753021955490112,
    -0.003277503652498126,
    0.007972883991897106,
    0.004367629997432232,
    0.00506944302469492,
    -0.021460523828864098,
    -0.03630904108285904,
    0.06629107147455215,
    -0.032091036438941956,
    -0.0268612802028656,
    -0.03240453824400902,
    0.002858909545466304,
    -0.01404339075088501,
    0.028756532818078995,
    0.008307759650051594,
    -0.00907726027071476,
    -0.026120278984308243,
    0.021717024967074394,
    0.02723178081214428,
    0.0038795669097453356,
    0.011699263006448746,
    0.004453130066394806,
    -0.0296685341745615,
    -0.003954379353672266,
    -0.0021766899153590202,
    -0.015461267903447151,
    -0.02865678258240223,
    0.01802626997232437,
    0.01863902062177658,
    -0.020605523139238358,
    -0.017199769616127014,
    0.021674275398254395,
    0.0031260973773896694,
    0.01261838898062706,
    -0.004328442271798849,
    -0.008500134572386742,
    -0.01925177127122879,
    -0.01620226912200451,
    -0.01819727011024952,
    -0.014948266558349133,
    -0.0019130646251142025,
    0.025493279099464417,
    -0.012162388302385807,
    0.009618761017918587,
    -0.004064816981554031,
    -2.8388703867676668e-05,
    0.028101032599806786,
    0.01157813798636198,
    -0.006198756862431765,
    0.014079015702009201,
    -0.001511392300017178,
    -0.012297763489186764,
    -0.00413250457495451,
    0.031977035105228424,
    0.025407778099179268,
    0.008542885072529316,
    -0.006861382629722357,
    0.023883026093244553,
    0.00714282039552927,
    0.01900952123105526,
    -0.01660126820206642,
    0.014057640917599201,
    0.001841814606450498,
    0.002908784430474043,
    0.023754777386784554,
    -0.002638034289702773,
    0.003029909683391452,
    8.704477295395918e-06,
    -0.0028909719549119473,
    -0.006765195168554783,
    0.010872762650251389,
    -0.0003188441041857004,
    0.007609508465975523,
    0.001841814606450498,
    0.010017761029303074,
    -0.022272774949669838,
    0.027873031795024872,
    0.00017612129158806056,
    -0.012860639952123165,
    -0.003580316435545683,
    -0.01363726519048214,
    -0.014563516713678837,
    -0.011799013242125511,
    -0.02385452762246132,
    0.016017017886042595,
    -0.015190517529845238,
    -0.009739886038005352,
    -0.023469775915145874,
    0.005571756511926651,
    0.0007240789709612727,
    0.030666034668684006,
    -0.01320976484566927,
    -0.03898804262280464,
    0.012632639147341251,
    -0.007303133141249418,
    -0.008956135250627995,
    0.005863881669938564,
    0.02339852601289749,
    0.01916627213358879,
    -0.009960761293768883,
    0.010331261903047562,
    -0.009583136066794395,
    -0.009048759937286377,
    -0.01749902032315731,
    0.03345903754234314,
    -0.04428904876112938,
    -0.018952520564198494,
    0.041296545416116714,
    0.013694265857338905,
    0.01778401993215084,
    0.012319139204919338,
    -0.014356891624629498,
    -0.0015265329275280237,
    -0.018040521070361137,
    -0.01620226912200451,
    -0.007702133618295193,
    0.028186531737446785,
    -0.014107516035437584,
    -0.001052719890139997,
    -0.009568885900080204,
    0.003323816228657961,
    -0.0013795796548947692,
    0.05275356024503708,
    0.026391029357910156,
    0.004296379629522562,
    -0.0211612731218338,
    0.003740629181265831,
    0.006262882146984339,
    -0.014584891498088837,
    0.013694265857338905,
    -0.02164577506482601,
    0.027260281145572662,
    -0.008607009425759315,
    0.023826027289032936,
    -0.012312013655900955,
    -0.009918010793626308,
    -0.014150265604257584,
    0.015760518610477448,
    -0.004210879560559988,
    -0.012490139342844486,
    0.009469135664403439,
    -0.005008880514651537,
    0.0029230345971882343,
    0.0013270328054204583,
    -0.007623758632689714,
    0.0169717688113451,
    -0.013665765523910522,
    -0.002509784186258912,
    0.004809380508959293,
    0.025735529139637947,
    0.01677226833999157,
    -0.007488383445888758,
    -0.011905888095498085,
    -0.018938271328806877,
    0.028400281444191933,
    0.01925177127122879,
    -0.03097953461110592,
    0.014848516322672367,
    -0.020163772627711296,
    0.031891535967588425,
    -0.031407035887241364,
    0.03052353486418724,
    -0.02006402239203453,
    0.03499804064631462,
    0.015418517403304577,
    0.03400053828954697,
    0.00022766627080272883,
    0.022800026461482048,
    -0.005308131221681833,
    0.038076043128967285,
    0.012725264765322208,
    -0.029440533369779587,
    -0.006701069884002209,
    0.018325520679354668,
    0.015817517414689064,
    -0.009326635859906673,
    0.023355776444077492,
    0.0066975075751543045,
    -0.0009538604645058513,
    -0.003232972463592887,
    0.010416761972010136,
    0.02128952369093895,
    0.007972883991897106,
    0.035596538335084915,
    -0.008963259868323803,
    0.008307759650051594,
    0.004991068039089441,
    0.001302985823713243,
    0.0019112833542749286,
    -0.004207317251712084,
    -0.018981020897626877,
    0.004976818338036537,
    -0.023270275443792343,
    0.007157070562243462,
    0.0012922983150929213,
    -0.004517254885286093,
    -0.030267033725976944,
    0.03850354254245758,
    -0.010181636549532413,
    0.022614775225520134,
    0.032091036438941956,
    -0.005810444243252277,
    -4.3585008825175464e-05,
    -0.030637534335255623,
    -0.014050516299903393,
    0.041211046278476715,
    0.009326635859906673,
    -0.015105017460882664,
    -0.0339435376226902,
    -0.005600256379693747,
    -0.006594195030629635,
    0.0012664701789617538,
    0.027374280616641045,
    0.035112038254737854,
    0.00948338583111763,
    -0.009212635457515717,
    -0.0044388798996806145,
    -0.031236035749316216,
    0.005044505465775728,
    0.026875529438257217,
    -0.012768014334142208,
    -0.003972191829234362,
    -0.011799013242125511,
    0.03072303533554077,
    0.011727763339877129,
    0.008065508678555489,
    0.029326533898711205,
    0.06526507437229156,
    0.0008768212865106761,
    0.005044505465775728,
    -0.039729043841362,
    -0.004360504914075136,
    -0.025863779708743095,
    -0.02287127636373043,
    -0.007930133491754532,
    0.0042251297272741795,
    -0.02503727748990059,
    -0.009454885497689247,
    0.01157813798636198,
    0.014071891084313393,
    -0.015660768374800682,
    0.004079067148268223,
    0.0015657205367460847,
    -0.023626526817679405,
    -0.03556803986430168,
    -0.008877759799361229,
    0.0050124432891607285,
    0.02763078175485134,
    0.052810560911893845,
    0.018083270639181137,
    0.018282771110534668,
    -0.012069763615727425,
    -0.028827782720327377,
    -0.05161355808377266,
    -0.01316701527684927,
    -0.00647307001054287,
    -0.028927532956004143,
    -0.0049269432201981544,
    0.00763088371604681,
    0.022486524656414986,
    0.03154953569173813,
    0.010958262719213963,
    -0.01949402131140232,
    -0.002689690561965108,
    0.006850695237517357,
    0.0020840647630393505,
    -0.03887404501438141,
    0.001758986385539174,
    -0.016943268477916718,
    0.009219760075211525,
    0.002516909036785364,
    0.037506043910980225,
    0.023826027289032936,
    -0.006255757063627243,
    0.026148779317736626,
    -0.01131451316177845,
    -0.015689266845583916,
    -0.011250387877225876,
    -0.004930505529046059,
    0.00781613402068615,
    0.027901532128453255,
    -0.01806901954114437,
    0.035881541669368744,
    0.02771628089249134,
    0.032262034714221954,
    0.0037085667718201876,
    -0.006031319499015808,
    0.0020733773708343506,
    0.00824363436549902,
    -0.0014241109602153301,
    -0.009084384888410568,
    -0.006106131710112095,
    -0.013758390210568905,
    0.01714276894927025,
    0.004752380307763815,
    -0.031008034944534302,
    -0.01628776825964451,
    0.019750522449612617,
    0.004168129526078701,
    -0.02812953107059002,
    -0.016059767454862595,
    0.015931518748402596,
    0.008386134169995785,
    0.013865265995264053,
    -0.012732389383018017,
    -0.03172053396701813,
    -0.01725677028298378,
    0.011278887279331684,
    -0.010288511402904987,
    0.006583507638424635,
    -0.016387518495321274,
    -0.01769852079451084,
    0.007467008661478758,
    0.024738028645515442,
    -0.009739886038005352,
    -0.019237522035837173,
    -0.0157177671790123,
    0.019807523116469383,
    -0.01464901678264141,
    -0.016587018966674805,
    0.000631453818641603,
    0.02282852493226528,
    -0.010659012012183666,
    -0.009169884957373142,
    -0.010730261914432049,
    -0.02584952861070633,
    0.020220773294568062,
    0.005504068918526173,
    -0.030780034139752388,
    0.0019932209979742765,
    -0.01178476307541132,
    0.003024565987288952,
    0.0010580637026578188,
    0.01050226204097271,
    -0.001761658233590424,
    0.011549637652933598,
    0.031036535277962685,
    -0.023184776306152344,
    0.026961030438542366,
    0.008941885083913803,
    -0.02372627705335617,
    -0.004349817521870136,
    0.01009613648056984,
    -0.002315627643838525,
    0.025094278156757355,
    0.006854257546365261,
    -0.005283193662762642,
    -0.006669007707387209,
    -0.017527520656585693,
    0.001986095914617181,
    0.008721009828150272,
    -0.004093317314982414,
    -0.023868776857852936,
    -0.01194863859564066,
    0.013794015161693096,
    -0.06024906784296036,
    0.014349766075611115,
    0.035311538726091385,
    -0.02234402485191822,
    -0.0016690330812707543,
    0.004909130744636059,
    0.01501951739192009,
    0.005165630951523781,
    -0.032746538519859314,
    0.04921955615282059,
    -0.009283885359764099,
    -0.008656884543597698,
    0.021702773869037628,
    -0.04132504761219025,
    0.01402201596647501,
    0.021261023357510567,
    -0.005992131773382425,
    0.0017135643865913153,
    -0.005133568309247494,
    -0.02503727748990059,
    -0.018781520426273346,
    -0.005635881330817938,
    0.035596538335084915,
    0.012953264638781548,
    -0.0068364450708031654,
    -0.029583033174276352,
    0.026761529967188835,
    -0.02938353270292282,
    -0.02328452654182911,
    -0.01383676566183567,
    -0.027488281950354576,
    -0.011777638457715511,
    -0.00934088509529829,
    -0.011991388164460659,
    0.004905567970126867,
    -0.004107567016035318,
    0.011243262328207493,
    -0.029013032093644142,
    -0.003398628905415535,
    0.024937527254223824,
    -0.016800768673419952,
    -0.006152444519102573,
    0.010822887532413006,
    0.002438534051179886,
    0.02324177697300911,
    -0.011371512897312641,
    -0.008272134698927402,
    -0.004474504850804806,
    0.00546488119289279,
    0.009191260673105717,
    0.0005379380891099572,
    0.04294954985380173,
    0.02205902524292469,
    0.004980380646884441,
    0.01710001938045025,
    0.0022425963543355465,
    0.019365772604942322,
    -0.027944281697273254,
    -0.024196527898311615,
    0.03716404363512993,
    0.014734516851603985,
    -0.008806509897112846,
    0.01261838898062706,
    -0.0015416736714541912,
    0.013238265179097652,
    0.019864521920681,
    -0.01174201350659132,
    0.014763016253709793,
    -2.283620779053308e-05,
    0.006405382417142391,
    -0.021318024024367332,
    -0.03354453667998314,
    -0.0006087428773753345,
    0.03268953785300255,
    -0.0030851284973323345,
    0.02250077575445175,
    -0.02453852817416191,
    -0.00869250949472189,
    -0.0026968156453222036,
    -0.010552137158811092,
    0.012689638882875443,
    0.0008247196674346924,
    0.02372627705335617,
    -0.005735631566494703,
    0.03277503699064255,
    0.017898019403219223,
    0.031036535277962685,
    -0.0016191580798476934,
    -0.004107567016035318,
    -0.02197352424263954,
    -0.011036637239158154,
    0.002012814860790968,
    0.0314355343580246,
    0.0074242581613361835,
    -0.004624130204319954,
    0.0184822715818882,
    0.005001755431294441,
    0.04847855493426323,
    0.012276388704776764,
    0.00401850463822484,
    0.005347318481653929,
    -0.011293137446045876,
    -0.004934067837893963,
    -0.026106029748916626,
    -0.031521037220954895,
    -0.025450529530644417,
    -0.019394271075725555,
    0.006020631641149521,
    0.014385391026735306,
    0.020406022667884827,
    -0.015461267903447151,
    -0.021261023357510567,
    -0.004923380445688963,
    -0.02539352886378765,
    0.038446541875600815,
    0.02446727827191353,
    0.03619503974914551,
    0.02641952969133854,
    0.009633011184632778,
    0.005162068177014589,
    -0.00862838514149189,
    -0.024196527898311615,
    -0.011571013368666172,
    0.007149945478886366,
    0.01611676812171936,
    -0.010758762247860432,
    -0.008314884267747402,
    -0.031977035105228424,
    0.004378317389637232,
    0.0033915038220584393,
    -0.027744781225919724,
    0.007801883853971958,
    -0.0054399436339735985,
    0.00045466457959264517,
    -0.04175254702568054,
    -0.00400781724601984,
    -0.01112926285713911,
    0.028599781915545464,
    -0.01905227079987526,
    -0.013737015426158905,
    0.025179779157042503,
    -0.010288511402904987,
    -0.004766630474478006,
    0.03052353486418724,
    0.003776254365220666,
    0.01214813906699419,
    0.01526176743209362,
    0.014193016104400158,
    0.0025329403579235077,
    -0.03887404501438141,
    -0.02567852847278118,
    0.009967885911464691,
    0.00527963088825345,
    0.03850354254245758,
    -0.01548976730555296,
    -0.0065692574717104435,
    0.028685282915830612,
    0.01487701665610075,
    -0.008364759385585785,
    -0.018339769914746284,
    0.009946511127054691,
    0.03861754387617111,
    -0.01316701527684927,
    0.015190517529845238,
    -0.0168862696737051,
    -0.024210777133703232,
    -0.0016530018765479326,
    -0.004467380233108997,
    0.0029550970066338778,
    0.0046846927143633366,
    -0.012461639009416103,
    -0.009597386233508587,
    0.00946201104670763,
    -0.003395066363736987,
    -0.009739886038005352,
    -0.019465522840619087,
    -0.02535077929496765,
    0.023427026346325874,
    -0.04334855079650879,
    0.0008732588030397892,
    0.009419260546565056,
    -0.029611533507704735,
    -0.018297020345926285,
    -0.015190517529845238,
    -0.019551021978259087,
    0.015404267236590385,
    0.03163503482937813,
    0.015603767707943916,
    -0.004951880779117346,
    0.06121806800365448,
    -0.02462402731180191,
    0.007324508391320705,
    0.0008754853624850512,
    0.024837778881192207,
    -0.01664401963353157,
    0.029982034116983414,
    0.0039151920937001705,
    -0.024980278685688972,
    0.016330517828464508,
    -0.0010357979917898774,
    -0.05400756001472473,
    -0.02572127990424633,
    0.022899776697158813,
    0.027417030185461044,
    0.05241155996918678,
    -0.011221887543797493,
    -0.0014873454347252846,
    0.02747403085231781,
    0.023754777386784554,
    -0.004677567631006241,
    -0.015033766627311707,
    0.0033523163292557,
    -0.025621529668569565,
    0.016843518242239952,
    0.0338580384850502,
    -0.025208277627825737,
    -0.005796194076538086,
    -0.0013991734012961388,
    -0.0042251297272741795,
    0.022971026599407196,
    -0.01942277140915394,
    -0.04183804616332054,
    -0.016173768788576126,
    0.005418568849563599,
    -0.0022016274742782116,
    0.018795771524310112,
    -0.0028428782243281603,
    -0.04617005214095116,
    -0.013722765259444714,
    0.029326533898711205,
    -0.014527891762554646,
    -0.031150534749031067,
    -0.0003290862950962037,
    0.006565694697201252,
    0.005489818751811981,
    0.012632639147341251,
    -0.015390017069876194,
    0.0019843147601932287,
    -0.04371904954314232,
    -0.005970756523311138,
    -0.04460255056619644,
    -0.005753444042056799,
    -0.026932530105113983,
    0.01648726873099804,
    0.009761260822415352,
    -0.004720317665487528,
    -0.024937527254223824,
    -0.029013032093644142,
    -0.021033024415373802,
    0.002189158694818616,
    -0.03194853663444519,
    0.029440533369779587,
    0.01872452162206173,
    -0.008493009954690933,
    0.007972883991897106,
    0.0027520344592630863,
    0.00535088125616312,
    0.013687140308320522,
    -0.038076043128967285,
    0.00891338475048542,
    0.028870532289147377,
    -0.004235817119479179,
    0.010758762247860432,
    0.0015292048919945955,
    -0.03243303671479225,
    -0.0024670339189469814,
    -0.01050226204097271,
    -0.004866380710154772,
    -0.0004956333432346582,
    0.0398145467042923,
    0.003683629212900996,
    -0.024695277214050293,
    -0.004235817119479179,
    0.004346254747360945,
    0.0021606585942208767,
    -0.0039579421281814575,
    0.02446727827191353,
    -0.02763078175485134,
    0.0077092587016522884,
    0.018411021679639816,
    -0.0036765041295439005,
    -0.007353008259087801,
    -0.014919767156243324,
    0.011756263673305511,
    -0.013744140975177288,
    -0.001009079278446734,
    -0.031407035887241364,
    -0.022971026599407196,
    0.01530451700091362,
    0.010716011747717857,
    0.020220773294568062,
    -0.008108259178698063,
    0.04269304871559143,
    0.02034902386367321,
    -0.0031795348040759563,
    0.01905227079987526,
    -0.033117037266492844,
    0.0025365028996020555,
    -0.03682204335927963,
    0.004531505052000284,
    -0.005450631026178598,
    -0.028884783387184143,
    -0.015048016794025898,
    -0.008977510035037994,
    0.025707028806209564,
    0.0003965512150898576,
    0.013922265730798244,
    -0.009469135664403439,
    -0.01888127066195011,
    -0.0025044402573257685,
    -0.011392887681722641,
    0.009412135928869247,
    -0.023982776328921318,
    -0.024324776604771614,
    0.004207317251712084,
    -0.0012816108064725995,
    -0.01323113963007927,
    -0.007573883514851332,
    -0.01294614002108574,
    -0.04277854785323143,
    0.009861011058092117,
    0.005742756649851799,
    -0.00867113471031189,
    -0.016743768006563187,
    0.004463817458599806,
    0.019522521644830704,
    -0.013558890670537949,
    -0.009269635193049908,
    0.17191219329833984,
    0.011072262190282345,
    0.013630140572786331,
    0.01819727011024952,
    0.005115755833685398,
    -0.009789761155843735,
    0.0049696932546794415,
    0.014549266546964645,
    -0.006070506758987904,
    0.012996014207601547,
    0.013786890543997288,
    -0.028471531346440315,
    -0.04471655189990997,
    0.011777638457715511,
    0.0028375345282256603,
    0.004367629997432232,
    0.007645133417099714,
    -0.0038475042674690485,
    -0.022800026461482048,
    -0.01920902170240879,
    0.0006443678867071867,
    -0.002609534189105034,
    -0.020334772765636444,
    -0.023013776168227196,
    0.015133516862988472,
    0.0019184084376320243,
    -0.011385763064026833,
    -0.009975011460483074,
    0.011250387877225876,
    0.013281014747917652,
    -0.012931889854371548,
    0.017199769616127014,
    -0.006373319774866104,
    0.004866380710154772,
    -0.006248631980270147,
    -0.019935771822929382,
    0.0032044723629951477,
    0.010837137699127197,
    0.03519754111766815,
    0.017712770029902458,
    0.00243675266392529,
    -0.044631049036979675,
    0.014321265742182732,
    -0.028500031679868698,
    0.014128890819847584,
    -0.02250077575445175,
    0.010374011471867561,
    0.0013528609415516257,
    0.0032098160590976477,
    0.03297453746199608,
    0.010203011333942413,
    -0.02938353270292282,
    0.026262778788805008,
    0.01758451946079731,
    -0.0169290192425251,
    -0.02527952939271927,
    0.010516512207686901,
    0.029041532427072525,
    0.02295677550137043,
    0.02164577506482601,
    -0.04494455084204674,
    0.01990727335214615,
    -0.008927634917199612,
    0.041097044944763184,
    -0.04622705280780792,
    0.04363355040550232,
    -0.005315255839377642,
    -0.005732068791985512,
    0.0006154225557111204,
    0.01824001967906952,
    -0.016088267788290977,
    -0.010865637101233006,
    0.0031795348040759563,
    -0.007085820659995079,
    -0.01507651712745428,
    -0.017413519322872162,
    0.05434956029057503,
    -0.010509386658668518,
    0.02646227926015854,
    0.024168027564883232,
    -0.014014890417456627,
    -0.0019896584562957287,
    -0.012091138400137424,
    0.01835402101278305,
    -0.011328762397170067,
    -0.00027564875199459493,
    0.02869953215122223,
    -0.009212635457515717,
    -0.020691024139523506,
    -0.03457053750753403,
    -0.023712025955319405,
    -0.0030085346661508083,
    0.0026273466646671295,
    -0.021303774788975716,
    -0.01811177097260952,
    0.009091510437428951,
    0.00444600498303771,
    0.032290536910295486,
    0.003772691823542118,
    -0.006515820045024157,
    -0.027830282226204872,
    0.07307408004999161,
    -0.018867021426558495,
    0.011649387888610363,
    0.011207637377083302,
    0.012711014598608017,
    0.0055681937374174595,
    0.02955453284084797,
    -0.020705273374915123,
    -0.017470519989728928,
    0.018610520288348198,
    -0.013943640515208244,
    0.007930133491754532,
    -0.01337364036589861,
    -0.014100390486419201,
    -0.025464778766036034,
    -0.029169782996177673,
    -0.025137027725577354,
    -0.009405010379850864,
    0.028842031955718994,
    0.002889190800487995,
    -0.011143513023853302,
    -0.013765515759587288,
    -0.009946511127054691,
    -0.013929390348494053,
    0.0050872559659183025,
    -0.030295534059405327,
    7.230769551824778e-05,
    -0.039586544036865234,
    -0.01640176773071289,
    -0.010651887394487858,
    0.0018970334203913808,
    0.006262882146984339,
    0.001221938873641193,
    -0.007139258086681366,
    -0.05939406529068947,
    -0.01424289122223854,
    0.008215134032070637,
    -7.013679714873433e-05,
    0.009939386509358883,
    -0.017427770420908928,
    -0.015988517552614212,
    0.00495544308796525,
    -0.006173819303512573,
    -0.0006216569454409182,
    -0.0227572750300169,
    -0.0024135964922606945,
    -0.010858512483537197,
    0.0050124432891607285,
    0.006679695099592209,
    -0.019636522978544235,
    -0.018824271857738495,
    0.03468453884124756,
    0.000753024301957339,
    0.01640176773071289,
    -0.006932632997632027,
    -0.01758451946079731,
    -0.010488011874258518,
    0.02674728073179722,
    -0.004047004505991936,
    -0.049675557762384415,
    -0.006555007304996252,
    0.007395758293569088,
    0.006220132112503052,
    -0.0426645465195179,
    -0.009547511115670204,
    -0.1813742071390152,
    0.0134520148858428,
    0.02616303041577339,
    -0.06366907060146332,
    -0.008813634514808655,
    0.006302069406956434,
    -0.004367629997432232,
    0.007502633612602949,
    -0.023498276248574257,
    -0.009312385693192482,
    0.0184822715818882,
    -0.013224015012383461,
    -0.009925136342644691,
    -0.02657628059387207,
    0.002223002491518855,
    -0.0170145183801651,
    -0.018040521070361137,
    -0.005393631290644407,
    0.020691024139523506,
    0.01013176143169403,
    0.009853886440396309,
    -0.011392887681722641,
    0.02828628197312355,
    0.0027466905303299427,
    0.004752380307763815,
    -0.02666177973151207,
    -0.011642263270914555,
    -0.03291753679513931,
    0.004941192921251059,
    -0.027374280616641045,
    -0.012711014598608017,
    0.022244274616241455,
    0.006102569401264191,
    0.002522252732887864,
    -0.002265752526000142,
    0.015774767845869064,
    -0.011699263006448746,
    -0.006045569200068712,
    -0.00723544554784894,
    0.026220029219985008,
    0.02128952369093895,
    0.019679272547364235,
    0.03690754249691963,
    -0.005667943973094225,
    -0.0069646951742470264,
    0.003697879146784544,
    0.018225770443677902,
    -0.012440264225006104,
    0.010858512483537197,
    -0.03918754309415817,
    0.01385814044624567,
    -0.018268520012497902,
    -0.013922265730798244,
    0.0021909400820732117,
    0.03052353486418724,
    -0.00024648074759170413,
    0.005358005873858929,
    0.01221226342022419,
    0.013772640377283096,
    -0.006722445134073496,
    -0.0045564426109194756,
    -0.03610954061150551,
    0.023954277858138084,
    -0.02214452438056469,
    -0.01725677028298378,
    -0.0016930800629779696,
    -0.009782635606825352,
    0.030352534726262093,
    0.0017946114530786872,
    0.004367629997432232,
    -0.006088319234549999,
    0.020007021725177765,
    -0.012711014598608017,
    0.007965759374201298,
    0.007809008937329054,
    0.004592067562043667,
    -0.0063127572648227215,
    0.010167386382818222,
    0.01255426462739706,
    0.0023316589649766684,
    -0.007281758356839418,
    0.03762004151940346,
    0.018297020345926285,
    -0.003407535143196583,
    -0.00579975638538599,
    0.00252403412014246,
    0.007801883853971958,
    -0.008899134583771229,
    0.0008189306245185435,
    0.0008336259634234011,
    0.033886536955833435,
    0.004809380508959293,
    -0.004734567832201719,
    -0.02767353132367134,
    0.014314141124486923,
    -0.022002024576067924,
    0.0049269432201981544,
    0.006448132451623678,
    0.026918280869722366,
    -0.013715640641748905,
    0.009191260673105717,
    -0.005596693605184555,
    -0.005543256178498268,
    -0.01133588794618845,
    0.008877759799361229,
    0.03425703942775726,
    -0.0339435376226902,
    0.024310527369379997,
    0.028015531599521637,
    0.0023227527271956205,
    -0.026975279673933983,
    -0.0099108861759305,
    0.00824363436549902,
    0.013558890670537949,
    -0.0027199718169867992,
    0.025749778375029564,
    0.034371037036180496,
    0.020448772236704826,
    -0.0010571731254458427,
    -0.00019382248865440488,
    0.01769852079451084,
    0.0006399147678166628,
    -0.011485513299703598,
    -0.006027756724506617,
    -0.038275543600320816,
    -0.002344127744436264,
    -0.07923009246587753,
    -0.044830549508333206,
    0.008314884267747402,
    0.004670442547649145,
    -0.00907726027071476,
    -0.004089754540473223,
    -0.00850725919008255,
    0.01239038910716772,
    0.007716383785009384,
    -0.010737387463450432,
    -0.004107567016035318,
    0.020406022667884827,
    -0.013915141113102436,
    -0.005493381060659885,
    -0.010010636411607265,
    0.00830063410103321,
    -0.008877759799361229,
    0.0015256423503160477,
    0.012347638607025146,
    0.01664401963353157,
    -0.01815452054142952,
    -0.016857769340276718,
    -0.027160530909895897,
    0.008165258914232254,
    -0.017043018713593483,
    0.017085770145058632,
    -0.03907354548573494,
    0.0067046326585114,
    0.0038011916913092136,
    -0.0009966104989871383,
    -0.006113256793469191,
    -0.012654013931751251,
    -0.0004577817744575441,
    -0.005187005735933781,
    -0.0007245242595672607,
    -0.004709630273282528,
    -0.013273890130221844,
    -0.022743025794625282,
    0.038361042737960815,
    -0.02707502990961075,
    0.004748817998915911,
    -0.0012477670097723603,
    0.02629127912223339,
    0.0027573781553655863,
    -0.033231038600206375,
    0.02703228034079075,
    -0.01259701419621706,
    0.021460523828864098,
    0.022358275949954987,
    -0.022372525185346603,
    -0.009084384888410568,
    0.0057391938753426075,
    0.006465944927185774,
    -0.01400064118206501,
    0.039643544703722,
    0.008322009816765785,
    -0.005753444042056799,
    -0.008535759523510933,
    -0.039729043841362,
    0.004492317792028189,
    -0.006857820320874453,
    0.0027075030375272036,
    -0.025308027863502502,
    0.012639764696359634,
    -0.01013888604938984,
    0.0026077530346810818,
    0.013117140159010887,
    -0.00772350886836648,
    0.03348753601312637,
    0.002522252732887864,
    -0.014527891762554646,
    0.009440635330975056,
    -0.006644070148468018,
    0.010965387336909771,
    -0.024438777938485146,
    0.0018738771323114634,
    0.022116024047136307,
    -0.003286409890279174,
    0.01949402131140232,
    -0.011499762535095215,
    -0.006109694484621286,
    -0.009390760213136673,
    -0.0008968603797256947,
    -0.04180954769253731,
    0.03192003443837166,
    0.012447388842701912,
    0.02453852817416191,
    0.014862766489386559,
    0.019679272547364235,
    -0.06361207365989685,
    0.02104727365076542,
    -0.007645133417099714,
    0.023099275305867195,
    0.012255013920366764,
    0.0008256103028543293,
    -0.0184822715818882,
    -0.011136387474834919,
    -0.01304588932543993,
    -0.01664401963353157,
    0.037990543991327286,
    -0.04403255134820938,
    -0.02703228034079075,
    -0.09256810694932938,
    -0.005735631566494703,
    0.009996386244893074,
    -0.005721381399780512,
    0.006587069947272539,
    -0.03374403715133667,
    0.009839636273682117,
    -0.02793003059923649,
    0.009155635721981525,
    0.01962227188050747,
    -0.03593854233622551,
    0.00160312675870955,
    -0.0022621899843215942,
    -0.0055147563107311726,
    -0.026676030829548836,
    0.005814006552100182,
    0.033601537346839905,
    -0.022329775616526604,
    0.0339435376226902,
    0.002060908591374755,
    -0.010160261765122414,
    -0.007452758494764566,
    0.027531031519174576,
    -0.01420726627111435,
    -0.027260281145572662,
    0.018225770443677902,
    -0.0020430961158126593,
    -0.002866034395992756,
    -0.0044709425419569016,
    -0.04309204965829849,
    0.015048016794025898,
    -0.010024886578321457,
    -0.008949009701609612,
    0.018382521346211433,
    0.02475227788090706,
    -0.005318818613886833,
    0.0004355161217972636,
    -0.002969347173348069,
    0.013074389658868313,
    -0.002060908591374755,
    0.00043996924068778753,
    -0.031521037220954895,
    0.0015951112145558,
    0.01909502223134041,
    2.0818382836296223e-05,
    -0.01381539087742567,
    0.008706759661436081,
    0.013038764707744122,
    0.01155676320195198,
    0.03206253796815872,
    0.01611676812171936,
    0.020976023748517036,
    -0.026448030024766922,
    -0.02043452300131321,
    0.001385814044624567,
    -0.020420273765921593,
    0.008884885348379612,
    -0.003829691791906953,
    0.000753914937376976,
    0.009426386095583439,
    0.011179137974977493,
    0.033601537346839905,
    -0.00647307001054287,
    -0.007994258776307106,
    0.0073815081268548965,
    -0.010053385980427265,
    -0.04024204611778259,
    -0.0296685341745615,
    0.006327006965875626,
    -0.006551444996148348,
    -0.042636048048734665,
    -0.03539704158902168,
    0.016800768673419952,
    0.03801904246211052,
    0.027816031128168106,
    -0.001380470348522067,
    0.0003440043074078858,
    -0.0018382520647719502,
    -0.04126804694533348,
    0.003279285039752722,
    0.005418568849563599,
    -0.01664401963353157,
    -0.03556803986430168,
    0.013558890670537949,
    0.01657276786863804,
    0.016629768535494804,
    -0.02723178081214428,
    -0.002949753310531378,
    0.011791888624429703,
    0.019023772329092026,
    0.009896636009216309,
    0.008200883865356445,
    -0.007766258902847767,
    0.022657524794340134,
    0.0013653297210112214,
    -0.007965759374201298,
    -0.005899506621062756,
    -0.01855352148413658,
    0.02763078175485134,
    0.013138514943420887,
    0.00589238153770566,
    -0.005550381261855364,
    0.02486627735197544,
    -0.02646227926015854,
    -0.030837034806609154,
    -0.014584891498088837,
    0.018297020345926285,
    -0.011122137308120728,
    -0.01635901816189289,
    0.0008224931079894304,
    0.017370769754052162,
    -0.031806036829948425,
    8.945225272327662e-05,
    0.014086141251027584,
    -0.017513269558548927,
    0.01778401993215084,
    -0.008699635043740273,
    -0.003564285347238183,
    -0.039871543645858765,
    0.015903018414974213,
    -0.0021107837092131376,
    0.014976766891777515,
    0.028671031817793846,
    -0.028186531737446785,
    0.01214813906699419,
    0.0059529440477490425,
    0.015603767707943916,
    -0.019351521506905556,
    0.0036230667028576136,
    -0.022329775616526604,
    0.014862766489386559,
    -0.004951880779117346,
    -0.01938002184033394,
    -0.027117781341075897,
    -0.01806901954114437,
    0.01200563833117485,
    -0.010865637101233006,
    0.009148510172963142,
    0.006305632181465626,
    0.0931951031088829,
    0.029155533760786057,
    -0.024353276938199997,
    -0.005375818349421024,
    -0.03166353702545166,
    -0.012155263684689999,
    -0.0030085346661508083,
    0.014100390486419201,
    0.00027965655317530036,
    -0.0025560965295881033,
    0.03177753463387489,
    -0.023655027151107788,
    -0.006779445335268974,
    -0.016430268064141273,
    -0.010423886589705944,
    -0.0016075799940153956,
    -0.02620577998459339,
    0.02869953215122223,
    0.0009877042612060905,
    0.009155635721981525,
    0.03582454100251198,
    5.485699512064457e-05,
    0.006508694961667061,
    -0.01973627135157585,
    -0.021831024438142776,
    0.006084756925702095,
    0.02225852571427822,
    0.006590632256120443,
    -0.007616633549332619,
    -0.06401107460260391,
    -0.0005695553263649344,
    0.03562504053115845,
    -0.026505030691623688,
    -0.014200140722095966,
    -0.0043961298651993275,
    0.004242942202836275,
    0.009219760075211525,
    -0.030837034806609154,
    0.013416389934718609,
    0.005810444243252277,
    0.033687036484479904,
    0.012988889589905739,
    -0.0009690010920166969,
    -0.022272774949669838,
    0.00463125528767705,
    0.01380114071071148,
    -0.002614877885207534,
    -0.004303504712879658,
    -0.011264638043940067
  ]
}
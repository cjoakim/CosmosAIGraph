{
  "classifiers": [
    "development status :: 4 - beta",
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "programming language :: python :: 2",
    "programming language :: python :: 2.6",
    "programming language :: python :: 2.7",
    "programming language :: python :: 3",
    "programming language :: python :: 3.2",
    "programming language :: python :: 3.3",
    "programming language :: python :: 3.4",
    "topic :: software development :: libraries :: python modules"
  ],
  "description": "json-logic-py\n=============\n\nthis parser accepts `jsonlogic <http://jsonlogic.com>`__ rules and\nexecutes them in python.\n\nthis is a python porting of the excellent github project by\n`jwadhams <https://github.com/jwadhams>`__ for javascript:\n`json-logic-js <https://github.com/jwadhams/json-logic-js>`__.\n\nall credit goes to him, this is simply an implementation of the same\nlogic in python (small differences below).\n\nthe jsonlogic format is designed to allow you to share rules (logic)\nbetween front-end and back-end code (regardless of language difference),\neven to store logic along with a record in a database. jsonlogic is\ndocumented extensively at `jsonlogic.com <http://jsonlogic.com>`__,\nincluding examples of every `supported\noperation <http://jsonlogic.com/operations.html>`__ and a place to `try\nout rules in your browser <http://jsonlogic.com/play.html>`__.\n\nthe same format can also be executed in php by the library\n`json-logic-php <https://github.com/jwadhams/json-logic-php/>`__\n\nexamples\n--------\n\nsimple\n~~~~~~\n\n.. code:: python\n\n    from json_logic import jsonlogic\n    jsonlogic( { \"==\" : [1, 1] } )\n    # true\n\nthis is a simple test, equivalent to ``1 == 1``. a few things about the\nformat:\n\n1. the operator is always in the \"key\" position. there is only one key\n   per jsonlogic rule.\n2. the values are typically an array.\n3. each value can be a string, number, boolean, array (non-associative),\n   or null\n\ncompound\n~~~~~~~~\n\nhere we're beginning to nest rules.\n\n.. code:: python\n\n    jsonlogic(\n      {\"and\" : [\n        { \">\" : [3,1] },\n        { \"<\" : [1,3] }\n      ] }\n    )\n    # true\n\nin an infix language (like python) this could be written as:\n\n.. code:: python\n\n    ( (3 > 1) and (1 < 3) )\n\ndata-driven\n~~~~~~~~~~~\n\nobviously these rules aren't very interesting if they can only take\nstatic literal data. typically ``jsonlogic`` will be called with a rule\nobject and a data object. you can use the ``var`` operator to get\nattributes of the data object:\n\n.. code:: python\n\n    jsonlogic(\n      { \"var\" : [\"a\"] }, # rule\n      { a : 1, b : 2 }   # data\n    )\n    # 1\n\nif you like, we support `syntactic\nsugar <https://en.wikipedia.org/wiki/syntactic_sugar>`__ on unary\noperators to skip the array around values:\n\n.. code:: python\n\n    jsonlogic(\n      { \"var\" : \"a\" },\n      { a : 1, b : 2 }\n    )\n    # 1\n\nyou can also use the ``var`` operator to access an array by numeric\nindex:\n\n.. code:: python\n\n    jsonlogic(\n      {\"var\" : 1 },\n      [ \"apple\", \"banana\", \"carrot\" ]\n    )\n    # \"banana\"\n\nhere's a complex rule that mixes literals and data. the pie isn't ready\nto eat unless it's cooler than 110 degrees, *and* filled with apples.\n\n.. code:: python\n\n    rules = { \"and\" : [\n      {\"<\" : [ { \"var\" : \"temp\" }, 110 ]},\n      {\"==\" : [ { \"var\" : \"pie.filling\" }, \"apple\" ] }\n    ] }\n\n    data = { \"temp\" : 100, \"pie\" : { \"filling\" : \"apple\" } }\n\n    jsonlogic(rules, data)\n    # true\n\nalways and never\n~~~~~~~~~~~~~~~~\n\nsometimes the rule you want to process is \"always\" or \"never.\" if the\nfirst parameter passed to ``jsonlogic`` is a non-object,\nnon-associative-array, it is returned immediately.\n\n.. code:: python\n\n    #always\n    jsonlogic(true, data_will_be_ignored);\n    # true\n\n    #never\n    jsonlogic(false, i_wasnt_even_supposed_to_be_here);\n    # false\n\ninstallation\n------------\n\nthe best way to install this library is via\n`pip <https://pypi.python.org/pypi/>`__:\n\n.. code:: bash\n\n    pip install json-logic\n\nif that doesn't suit you, and you want to manage updates yourself, the\nentire library is self-contained in ``json_logic.py`` and you can\ndownload it straight into your project as you see fit.\n\n.. code:: bash\n\n    curl -o https://raw.githubusercontent.com/nadirizr/json-logic-py/master/json_logic.py\n\ndifferences from the original `javascript version <https://github.com/jwadhams/json-logic-js>`__\n------------------------------------------------------------------------------------------------\n\nthe only difference is in the straightforward '==' and '===' comparison\noperators, since they have different expected behavior in python than in\njavascript.\n\nin js: \\* '==' - performs type coercion and compares. \\* '===' - does\nnot perform type coercion.\n\nin python: \\* '==' - does not perform type coercion, compares using\npyton's **eq** operator. \\* '===' - does not perform type coercion,\ncompares using python's 'is' operator.",
  "docs_url": null,
  "keywords": "json-logic",
  "license": "mit",
  "name": "json-logic",
  "package_url": "https://pypi.org/project/json-logic/",
  "project_url": "https://pypi.org/project/json-logic/",
  "project_urls": {
    "Homepage": "https://github.com/nadirizr/json-logic-py"
  },
  "release_url": "https://pypi.org/project/json-logic/0.6.3/",
  "requires_dist": [
    "coverage; extra == 'test'",
    "check-manifest; extra == 'dev'"
  ],
  "requires_python": "",
  "summary": "build complex rules, serialize them as json, and execute them in python",
  "version": "0.6.3",
  "releases": [],
  "developers": [
    "nadir",
    "nadir@soundmindtech.com"
  ],
  "kwds": "jsonlogic json_logic json python py",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_json_logic",
  "homepage": "https://github.com/nadirizr/json-logic-py",
  "release_count": 3,
  "dependency_ids": [
    "pypi_check_manifest",
    "pypi_coverage"
  ]
}
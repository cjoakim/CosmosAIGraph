{
  "classifiers": [
    "development status :: 5 - production/stable",
    "environment :: console",
    "intended audience :: developers",
    "license :: osi approved :: bsd license",
    "natural language :: english",
    "operating system :: macos :: macos x",
    "operating system :: microsoft :: windows",
    "operating system :: posix",
    "operating system :: unix",
    "programming language :: python :: 3 :: only",
    "programming language :: python :: 3.7"
  ],
  "description": "[![build status](https://travis-ci.org/dfurtado/dataclass-csv.svg?branch=master)](https://travis-ci.org/dfurtado/dataclass-csv)\n[![pypi](https://img.shields.io/pypi/v/dataclass-csv.svg)](https://pypi.python.org/pypi/dataclass-csv)\n[![downloads](https://pepy.tech/badge/dataclass-csv)](https://pepy.tech/project/dataclass-csv)\n\n\n\n# dataclass csv\n\ndataclass csv makes working with csv files easier and much better than working with dicts. it uses python's dataclasses to store data of every row on the csv file and also uses type annotations which enables proper type checking and validation.\n\n\n## main features\n\n- use `dataclasses` instead of dictionaries to represent the rows in the csv file.\n- take advantage of the `dataclass` properties type annotation. `dataclassreader` use the type annotation to perform validation of the data of the csv file.\n- automatic type conversion. `dataclassreader` supports `str`, `int`, `float`, `complex`, `datetime` and `bool`, as well as any type whose constructor accepts a string as its single argument.\n- helps you troubleshoot issues with the data in the csv file. `dataclassreader` will show exactly in which line of the csv file contain errors.\n- extract only the data you need. it will only parse the properties defined in the `dataclass`\n- familiar syntax. the `dataclassreader` is used almost the same way as the `dictreader` in the standard library.\n- it uses `dataclass` features that let you define metadata properties so the data can be parsed exactly the way you want.\n- make the code cleaner. no more extra loops to convert data to the correct type, perform validation, set default values, the `dataclassreader` will do all this for you.\n- in additon of the `dataclassreader` the library also provides a `dataclasswriter` which enables creating a csv file\nusing a list of instances of a dataclass.\n\n\n## installation\n\n```shell\npipenv install dataclass-csv\n```\n\n## getting started\n\n## using the dataclassreader\n\nfirst, add the necessary imports:\n\n```python\nfrom dataclasses import dataclass\n\nfrom dataclass_csv import dataclassreader\n```\n\nassuming that we have a csv file with the contents below:\n```text\nfirstname,email,age\nelsa,elsa@test.com, 11\nastor,astor@test.com, 7\nedit,edit@test.com, 3\nella,ella@test.com, 2\n```\n\nlet's create a dataclass that will represent a row in the csv file above:\n```python\n@dataclass\nclass user:\n    firstname: str\n    email: str\n    age: int\n```\n\nthe dataclass `user` has 3 properties, `firstname` and `email` is of type `str` and `age` is of type `int`.\n\nto load and read the contents of the csv file we do the same thing as if we would be using the `dictreader` from the `csv` module in the python's standard library. after opening the file we create an instance of the `dataclassreader` passing two arguments. the first is the `file` and the second is the dataclass that we wish to use to represent the data of every row of the csv file. like so:\n\n```python\nwith open(filename) as users_csv:\n    reader = dataclassreader(users_csv, user)\n    for row in reader:\n        print(row)\n```\n\nthe `dataclassreader` internally uses the `dictreader` from the `csv` module to read the csv file which means that you can pass the same arguments that you would pass to the `dictreader`. the complete argument list is shown below:\n\n```python\ndataclass_csv.dataclassreader(\n    f,\n    cls,\n    fieldnames=none,\n    restkey=none,\n    restval=none,\n    dialect='excel',\n    *args,\n    **kwds\n)\n```\n\nall keyword arguments support by `dictreader` are supported by the `dataclassreader`, with the addition of:\n\n`validate_header` - the `dataclassreader` will raise a `valueerror` if the csv file cointain columns with the same name. this\nvalidation is performed to avoid data being overwritten. to skip this validation set `validate_header=false` when creating a\ninstance of the `dataclassreader`, see an example below:\n\n```python\nreader = dataclassreader(f, user, validate_header=false)\n```\n\nif you run this code you should see an output like this:\n\n```python\nuser(firstname='elsa', email='elsa@test.com', age=11)\nuser(firstname='astor', email='astor@test.com', age=7)\nuser(firstname='edit', email='edit@test.com', age=3)\nuser(firstname='ella', email='ella@test.com', age=2)\n```\n\n### error handling\n\none of the advantages of using the `dataclassreader` is that it makes it easy to detect when the type of data in the csv file is not what your application's model is expecting. and, the `dataclassreader` shows errors that will help to identify the rows with problem in your csv file.\n\nfor example, say we change the contents of the csv file shown in the **getting started** section and, modify the `age` of the user astor, let's change it to a string value:\n\n```text\nastor, astor@test.com, test\n```\n\nremember that in the dataclass `user` the `age` property is annotated with `int`. if we run the code again an exception will be raised with the message below:\n\n```text\ndataclass_csv.exceptions.csvvalueerror: the field `age` is defined as <class 'int'> but\nreceived a value of type <class 'str'>. [csv line number: 3]\n```\n\nnote that apart from telling what the error was, the `dataclassreader` will also show which line of the csv file contain the data with errors.\n\n### default values\n\nthe `dataclassreader` also handles properties with default values. let's modify the dataclass `user` and add a default value for the field `email`:\n\n```python\nfrom dataclasses import dataclass\n\n\n@dataclass\nclass user:\n    firstname: str\n    email: str = 'not specified'\n    age: int\n```\n\nand we modify the csv file and remove the email for the user astor:\n\n```python\nastor,, 7\n```\n\nif we run the code we should see the output below:\n\n```text\nuser(firstname='elsa', email='elsa@test.com', age=11)\nuser(firstname='astor', email='not specified', age=7)\nuser(firstname='edit', email='edit@test.com', age=3)\nuser(firstname='ella', email='ella@test.com', age=2)\n```\n\nnote that now the object for the user astor have the default value `not specified` assigned to the email property.\n\ndefault values can also be set using `dataclasses.field` like so:\n\n```python\nfrom dataclasses import dataclass, field\n\n\n@dataclass\nclass user:\n    firstname: str\n    email: str = field(default='not specified')\n    age: int\n```\n\n### mapping dataclass fields to columns\n\nthe mapping between a dataclass property and a column in the csv file will be done automatically if the names match, however, there are situations that the name of the header for a column is different. we can easily tell the `dataclassreader` how the mapping should be done using the method `map`. assuming that we have a csv file with the contents below:\n\n```text\nfirst name,email,age\nelsa,elsa@test.com, 11\n```\n\nnote that now, the column is called **first name** and not **firstname**\n\nand we can use the method `map`, like so:\n\n```python\nreader = dataclassreader(users_csv, user)\nreader.map('first name').to('firstname')\n```\n\nnow the dataclassreader will know how to extract the data from the column **first name** and add it to the to dataclass property **firstname**\n\n### supported type annotation\n\nat the moment the `dataclassreader` support `int`, `str`, `float`, `complex`, `datetime`, and `bool`. when defining a `datetime` property, it is necessary to use the `dateformat` decorator, for example:\n\n```python\nfrom dataclasses import dataclass\nfrom datetime import datetime\n\nfrom dataclass_csv import dataclassreader, dateformat\n\n\n@dataclass\n@dateformat('%y/%m/%d')\nclass user:\n    name: str\n    email: str\n    birthday: datetime\n\n\nif __name__ == '__main__':\n\n    with open('users.csv') as f:\n        reader = dataclassreader(f, user)\n        for row in reader:\n            print(row)\n```\n\nassuming that the csv file have the following contents:\n\n```text\nname,email,birthday\nedit,edit@test.com,2018/11/23\n```\n\nthe output would look like this:\n\n```text\nuser(name='edit', email='edit@test.com', birthday=datetime.datetime(2018, 11, 23, 0, 0))\n```\n\n### fields metadata\n\nit is important to note that the `dateformat` decorator will define the date format that will be used to parse date to all properties\nin the class. now there are situations where the data in a csv file contains two or more columns with date values in different formats. it is possible\nto set a format specific for every property using the `dataclasses.field`. let's say that we now have a csv file with the following contents:\n\n```text\nname,email,birthday, create_date\nedit,edit@test.com,2018/11/23,2018/11/23 10:43\n```\n\nas you can see the `create_date` contains time information as well.\n\nthe `dataclass` user can be defined like this:\n\n```python\nfrom dataclasses import dataclass, field\nfrom datetime import datetime\n\nfrom dataclass_csv import dataclassreader, dateformat\n\n\n@dataclass\n@dateformat('%y/%m/%d')\nclass user:\n    name: str\n    email: str\n    birthday: datetime\n    create_date: datetime = field(metadata={'dateformat': '%y/%m/%d %h:%m'})\n```\n\nnote that the format for the `birthday` field was not speficied using the `field` metadata. in this case the format specified in the `dateformat`\ndecorator will be used.\n\n### handling values with empty spaces\n\nwhen defining a property of type `str` in the `dataclass`, the `dataclassreader` will treat values with only white spaces as invalid. to change this\nbehavior, there is a decorator called `@accept_whitespaces`. when decorating the class with the `@accept_whitespaces` all the properties in the class\nwill accept values with only white spaces.\n\nfor example:\n\n```python\nfrom dataclass_csv import dataclassreader, accept_whitespaces\n\n@accept_whitespaces\n@dataclass\nclass user:\n    name: str\n    email: str\n    birthday: datetime\n    created_at: datetime\n```\n\nif you need a specific field to accept white spaces, you can set the property `accept_whitespaces` in the field's metadata, like so:\n\n```python\n@dataclass\nclass user:\n    name: str\n    email: str = field(metadata={'accept_whitespaces': true})\n    birthday: datetime\n    created_at: datetime\n```\n\n### user-defined types\n\nyou can use any type for a field as long as its constructor accepts a string:\n\n```python\nclass ssn:\n    def __init__(self, val):\n        if re.match(r\"\\d{9}\", val):\n            self.val = f\"{val[0:3]}-{val[3:5]}-{val[5:9]}\"\n        elif re.match(r\"\\d{3}-\\d{2}-\\d{4}\", val):\n            self.val = val\n        else:\n            raise valueerror(f\"invalid ssn: {val!r}\")\n\n\n@dataclasses.dataclass\nclass user:\n    name: str\n    ssn: ssn\n```\n\n\n## using the dataclasswriter\n\nreading a csv file using the `dataclassreader` is great and gives us the type-safety of python's dataclasses and type annotation, however, there are situations where we would like to use dataclasses for creating csv files, that's where the `dataclasswriter` comes in handy.\n\nusing the `dataclasswriter` is quite simple. given that we have a dataclass `user`:\n\n```python\nfrom dataclasses import dataclass\n\n\n@dataclass\nclass user:\n    firstname: str\n    lastname: str\n    age: int\n```\n\nand in your program we have a list of users:\n\n```python\n\nusers = [\n    user(firstname=\"john\", lastname=\"smith\", age=40),\n    user(firstname=\"daniel\", lastname=\"nilsson\", age=10),\n    user(firstname=\"ella\", \"fralla\", age=4)\n]\n```\n\nin order to create a csv using the `dataclasswriter` import it from `dataclass_csv`:\n\n```python\nfrom dataclass_csv import dataclasswriter\n```\n\ninitialize it with the required arguments and call the method `write`:\n\n```python\nwith open(\"users.csv\", \"w\") as f:\n    w = dataclasswriter(f, users, user)\n    w.write()\n```\n\nthat's it! let's break down the snippet above.\n\nfirst, we open a file called `user.csv` for writing. after that, an instance of the `dataclasswriter` is created. to create a `dataclasswriter` we need to pass the `file`, the list of `user` instances, and lastly, the type, which in this case is `user`.\n\nthe type is required since the writer uses it when trying to figure out the csv header. by default, it will use the names of the\nproperties defined in the dataclass, in the case of the dataclass `user` the title of each column\nwill be `firstname`, `lastname` and `age`.\n\nsee below the csv created out of a list of `user`:\n\n```text\nfirstname,lastname,age\njohn,smith,40\ndaniel,nilsson,10\nella,fralla,4\n```\n\nthe `dataclasswriter` also takes a `**fmtparams` which accepts the same parameters as the `csv.writer`, for more\ninformation see: https://docs.python.org/3/library/csv.html#csv-fmt-params\n\nnow, there are situations where we don't want to write the csv header. in this case, the method `write` of\nthe `dataclasswriter` accepts an extra argument, called `skip_header`. the default value is `false` and when set to\n`true` it will skip the header.\n\n#### modifying the csv header\n\nas previously mentioned the `dataclasswriter` uses the names of the properties defined in the dataclass as the csv header titles, however,\ndepending on your use case it makes sense to change it. the `dataclasswriter` has a `map` method just for this purpose.\n\n using the `user` dataclass with the properties `firstname`, `lastname` and `age`. the snippet below shows how to change `firstname` to `first name` and `lastname` to `last name`:\n\n ```python\n with open(\"users.csv\", \"w\") as f:\n    w = dataclasswriter(f, users, user)\n\n    # add mappings for firstname and lastname\n    w.map(\"firstname\").to(\"first name\")\n    w.map(\"lastname\").to(\"last name\")\n\n    w.write()\n ```\n\n the csv output of the snippet above will be:\n\n```text\nfirst name,last name,age\njohn,smith,40\ndaniel,nilsson,10\nella,fralla,4\n```\n\n## copyright and license\n\ncopyright (c) 2018 daniel furtado. code released under bsd 3-clause license\n\n## credits\n\nthis package was created with [cookiecutter](https://github.com/audreyr/cookiecutter) and the [audreyr/cookiecutter-pypackage](https://github.com/audreyr/cookiecutter-pypackage) project template.\n\n\n# history\n\n### 0.1.0 (2018-11-25)\n\n* first release on pypi.\n\n### 0.1.1 (2018-11-25)\n\n* documentation fixes.\n\n### 0.1.2 (2018-11-25)\n\n* documentation fixes.\n\n### 0.1.3 (2018-11-26)\n\n* bug fixes\n* removed the requirement of setting the dataclass init to `true`\n\n### 0.1.5 (2018-11-29)\n\n* support for parsing datetime values.\n* better handling when default values are set to `none`\n\n### 0.1.6 (2018-12-01)\n\n* added support for reader default values from the default property of the `dataclasses.field`.\n* added support for allowing string values with only white spaces in a class level using the `@accept_whitespaces` decorator or through the `dataclasses.field` metadata.\n* added support for specifying date format using the `dataclasses.field` metadata.\n\n### 0.1.7 (2018-12-01)\n\n* added support for default values from `default_factory` in the field's metadata. this allows adding mutable default values to the dataclass properties.\n\n### 1.0.0 (2018-12-16)\n\n* when a data does not pass validation it shows the line number in the csv file where the data contain errors.\n* improved error handling.\n* changed the usage of the `@accept_whitespaces` decorator.\n* updated documentation.\n\n### 1.0.1 (2019-01-29)\n\n* fixed issue when parsing headers on a csv file with trailing white spaces.\n\n### 1.1.0 (2019-02-17)\n\n* added support for boolean values.\n* docstrings\n\n### 1.1.1 (2019-02-17)\n\n* documentation fixes.\n\n### 1.1.2 (2019-02-17)\n\n* documentation fixes.\n\n### 1.1.3 (2020-03-01)\n\n* handle properties with init set to false\n* handle option type annotation\n\n### 1.2.0 (2021-03-02)\n\n* introduction of a dataclasswriter\n* added type hinting to external api\n* documentation updates\n* bug fixes\n\n## 1.3.0 (2021-04-10)\n\n* included stub files\n* check if the csv file has duplicated header values\n* fixed issues #22 and #33\n* code cleanup\n\n## 1.4.0 (2021-12-13)\n\n* bug fixes\n* support for date types\n\n",
  "docs_url": null,
  "keywords": "dataclass dataclasses csv dataclass-csv",
  "license": "bsd license",
  "name": "dataclass-csv",
  "package_url": "https://pypi.org/project/dataclass-csv/",
  "project_url": "https://pypi.org/project/dataclass-csv/",
  "project_urls": {
    "Homepage": "https://github.com/dfurtado/dataclass-csv"
  },
  "release_url": "https://pypi.org/project/dataclass-csv/1.4.0/",
  "requires_dist": [],
  "requires_python": "",
  "summary": "map csv data into dataclasses",
  "version": "1.4.0",
  "releases": [],
  "developers": [
    "daniel@dfurtado.com",
    "daniel_furtado"
  ],
  "kwds": "dataclass_csv csv dataclasses dataclass csvvalueerror",
  "license_kwds": "bsd license",
  "libtype": "pypi",
  "id": "pypi_dataclass_csv",
  "homepage": "https://github.com/dfurtado/dataclass-csv",
  "release_count": 16,
  "dependency_ids": []
}
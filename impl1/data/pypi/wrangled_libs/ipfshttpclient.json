{
  "classifiers": [
    "development status :: 3 - alpha",
    "intended audience :: developers",
    "intended audience :: information technology",
    "intended audience :: science/research",
    "license :: osi approved :: mit license",
    "programming language :: python :: 3 :: only",
    "programming language :: python :: 3.5",
    "programming language :: python :: 3.6",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "topic :: internet",
    "topic :: scientific/engineering",
    "topic :: system :: filesystems",
    "topic :: system :: networking"
  ],
  "description": "# py-ipfs-http-client\n\n[![made by the ipfs community](https://img.shields.io/badge/made%20by-ipfs%20community-blue.svg?style=flat-square)](https://docs.ipfs.io/community/)\n[![irc #py-ipfs on chat.freenode.net](https://img.shields.io/badge/freenode%20irc-%23py--ipfs-blue.svg?style=flat-square)](http://webchat.freenode.net/?channels=%23py-ipfs)\n[![matrix #py-ipfs:ninetailed.ninja](https://img.shields.io/matrix/py-ipfs:ninetailed.ninja?color=blue&label=matrix%20chat&server_fqdn=matrix.ninetailed.ninja&style=flat-square)](https://matrix.to/#/#py-ipfs:ninetailed.ninja?via=matrix.ninetailed.ninja&via=librem.one)\n[![standard readme compliant](https://img.shields.io/badge/standard--readme-ok-green.svg?style=flat-square)](https://github.com/richardlitt/standard-readme)\n[![pypi package ipfshttpclient](https://img.shields.io/pypi/dm/ipfshttpclient.svg?style=flat-square)](https://pypi.python.org/pypi/ipfshttpclient)\n[![build status](https://img.shields.io/travis/com/ipfs-shipyard/py-ipfs-http-client/master.svg?style=flat-square)](https://travis-ci.com/github/ipfs-shipyard/py-ipfs-http-client)\n\n![python ipfs http client library](https://ipfs.io/ipfs/qmqj68pfmddasgczva1uvzzn18asvcf7hvvcdgpjiscase)\n\ncheck out [the http client reference](https://ipfs.io/ipns/12d3kooweqntdgqhnkkwarsrjjemp2zjiadwlyadanvub6sqnypf/docs/) for the full command reference.\n\n**note**: the `ipfsapi` pip package and python module have both been renamed to `ipfshttpclient`!\nsee the [relevant section of the changelog](changelog.md#py-ipfs-http-client-0411-13052019) for details. there is also a `ipfsapi` library from which this library originated that is completely\nunmaintained and does not work with any recent go-ipfs version.\n\n**note**: this library occasionally has to change to stay compatible with the ipfs http api.\ncurrently, this library is tested against [go-ipfs v0.7.0](https://github.com/ipfs/go-ipfs/releases/tag/v0.7.0).\nwe strive to support the last 5 releases of go-ipfs at any given time; go-ipfs v0.4.23 therefore\nbeing to oldest supported version at this time.\n\n## table of contents\n\n- [install](#install)\n- [usage](#usage)\n- [documentation](#documentation)\n  - [migrating from 0.4.x to 0.6.0](#migrating-from-04x-to-060)\n- [featured projects](#featured-projects)\n- [contributing](#contributing)\n  - [bug reports](#bug-reports)\n  - [pull requests](#pull-requests)\n  - [chat with us (irc/matrix)](#chat-with-us-ircmatrix)\n- [license](#license)\n\n## install\n\ninstall with pip:\n\n```sh\npip install ipfshttpclient\n```\n\n### development install from source\n\n```sh\n# clone the source repository\ngit clone https://github.com/ipfs/py-ipfs-http-client.git\ncd py-ipfs-http-client\n\n# link ipfs-api-client into your python path\nflit install --pth-file\n```\n\n## usage\n\nbasic use-case (requires a running instance of ipfs daemon):\n\n```py\n>>> import ipfshttpclient\n>>> client = ipfshttpclient.connect()  # connects to: /dns/localhost/tcp/5001/http\n>>> res = client.add('test.txt')\n>>> res\n{'hash': 'qmwxs5antfec9xbmx1asvlet1zrqeatssqt33rvzqcqb22', 'name': 'test.txt'}\n>>> client.cat(res['hash'])\n'fdsafkljdskafjaksdjf\\n'\n```\n\n*please note*: you should specify the address for an ipfs *api server*, using the address of a *gateway* (such as the public `ipfs.io` one at `/dns/ipfs.io/tcp/443/https`) will only give you [extremely limited access](https://github.com/ipfs/go-ipfs/blob/master/docs/gateway.md#read-only-api) and may not work at all. if you are only interested in downloading ipfs content through public gateway servers then this library is unlikely of being of much help.\n\nfor real-world scripts you can reuse tcp connections using a context manager or manually closing the session after use:\n\n```py\nimport ipfshttpclient\n\n# share tcp connections using a context manager\nwith ipfshttpclient.connect() as client:\n\thash = client.add('test.txt')['hash']\n\tprint(client.stat(hash))\n\n# share tcp connections until the client session is closed\nclass someobject:\n\tdef __init__(self):\n\t\tself._client = ipfshttpclient.connect(session=true)\n\n\tdef do_something(self):\n\t\thash = self._client.add('test.txt')['hash']\n\t\tprint(self._client.stat(hash))\n\n\tdef close(self):  # call this when your done\n\t\tself._client.close()\n```\n\nadministrative functions:\n\n```py\n>>> client.id()\n{'addresses': ['/ip4/127.0.0.1/tcp/4001/ipfs/qms2c4mjzsv2ip1udmmlcyqj4wejw8n3vxx1vkxw1ubqhs',\n               '/ip6/::1/tcp/4001/ipfs/qms2c4mjzsv2ip1udmmlcyqj4wejw8n3vxx1vkxw1ubqhs'],\n 'agentversion': 'go-ipfs/0.4.10',\n 'id': 'qms2c4mjzsv2ip1udmmlcyqj4wejw8n3vxx1vkxw1ubqhs',\n 'protocolversion': 'ipfs/0.1.0',\n 'publickey': 'caaspgiwgg ... 3fcjagmbaae='}\n```\n\npass in api options:\n\n```py\n>>> client.pin.ls(type='all')\n{'keys': {'qmnmelyizsffdnzw3ykti1se2perifwdtxx6vvqbfwcjbu': {'count': 1,\n                                                             'type': 'indirect'},\n          'qmnq1h6o1xjarvyzwmyspsuv9l5xfzs4wtvjstawwyrsd8': {'count': 1,\n                                                             'type': 'indirect'},\n          \u2026\n```\n\nadd a directory and match against a filename pattern:\n\n```py\n>>> client.add('photos', pattern='*.jpg')\n[{'hash': 'qmcqbstfu5awpxuqbucwimmwdjbu89qqyme3wxvktvaxhx',\n  'name': 'photos/photo1.jpg'},\n {'hash': 'qmsbmgg7kywksnzglvwelnw1kthvtamszn5tng3xq799fu',\n  'name': 'photos/photo2.jpg'},\n {'hash': 'qma6k85pj8dn3qwjxgsdnamjwjtny8yguwxh2kfoq9bvxh',\n  'name': 'photos/photo3.jpg'}]\n```\n\nor add a directory recursively:\n\n```py\n>>> client.add('fake_dir', recursive=true)\n[{'hash': 'qmqcctmglvwvmqgu6mvsryljwqrzjcyth4mbom9urww9vx',\n  'name': 'fake_dir/fsdfgh'},\n {'hash': 'qmnuvmufeewwpxjcqwlkhshr8iqhglwxfzsgzafbeawttz',\n  'name': 'fake_dir/test2/llllg'},\n {'hash': 'qmx1dd5dtkgoiyrkapqptctxaruu4jez62rjbucd5whxaz',\n  'name': 'fake_dir/test2'},\n {'hash': 'qmenzb5j4fr9c69bbpbbhptsp2snjthu2hkpwgppjuhb9m',\n  'name': 'fake_dir'}]\n```\n\nthis module also contains some helper functions for adding strings and json to ipfs:\n\n```py\n>>> lst = [1, 77, 'lol']\n>>> client.add_json(lst)\n'qmq4r5ccuybwijpnl7mfe4ldrwd6qbr5re17boray9vnpd'\n>>> client.get_json(_)\n[1, 77, 'lol']\n```\n\nuse an ipfs server with basic auth (replace username and password with real creds):\n\n```py\n>>> import ipfshttpclient\n>>> client = ipfshttpclient.connect('/dns/ipfs-api.example.com/tcp/443/https', auth=(\"username\", \"password\"))\n```\n\npass custom headers to the ipfs daemon with each request:\n```py\n>>> import ipfshttpclient\n>>> headers = {\"customheader\": \"foobar\"}\n>>> client = ipfshttpclient.connect('/dns/ipfs-api.example.com/tcp/443/https', headers=headers)\n```\n\nconnect to the ipfs daemon using a unix domain socket (plain http only):\n```py\n>>> import ipfshttpclient\n>>> client = ipfshttpclient.connect(\"/unix/run/ipfs/ipfs.sock\")\n```\n\n\n\n## documentation\n\ndocumentation (currently mostly api documentation unfortunately) is available on ipfs:\n\nhttps://ipfs.io/ipns/12d3kooweqntdgqhnkkwarsrjjemp2zjiadwlyadanvub6sqnypf/docs/\n\nthe `ipfs` [command-line client documentation](https://ipfs.io/docs/commands/) may also be useful in some cases.\n\n### migrating from `0.4.x` to `0.6.0`\n\nplease see the changelog for [the minor breaking changes between these releases](changelog.md#py-ipfs-http-client-060-30062020).\n\n## featured projects\n\nprojects that currently use py-ipfs-http-client. if your project isn't here, feel free to submit a pr to add it!\n\n- [interplanetary wayback](https://github.com/oduwsdl/ipwb) interfaces web archive ([warc](https://www.iso.org/standard/44717.html)) files for distributed indexing and replay using ipfs.\n\n## contributing\n\n### easy tasks\n\nover time many smaller day-to-day tasks have piled up (mostly supporting some\nnewer apis). if want to help out without getting too involved picking up one\nof tasks of our [help wanted issue list](https://github.com/ipfs-shipyard/py-ipfs-http-client/issues?q=is%3aissue+is%3aopen+label%3a%22help+wanted%22)\nwould go a long way towards making this library more feature-complete. \ud83d\udc4d\n\n### bug reports\n\nyou can submit bug reports using the\n[github issue tracker](https://github.com/ipfs/py-ipfs-http-client/issues).\n\n### pull requests\n\npull requests are welcome.  before submitting a new pull request, please\nmake sure that your code passes both the\n[code formatting](https://www.python.org/dev/peps/pep-0008/)\n(pep-8 with tab indentation) and\n[typing](https://mypy.readthedocs.io/en/stable/cheat_sheet_py3.html)\n(pep-484 using mypy) checks:\n\n    $ tox -e styleck -e typeck\n\nas well as the unit tests:\n\n    $ tox -e py3 -e py3-httpx\n\nif you are unsure, don't hasitate to just submit your code and a human will\ntake a look. \ud83d\ude42\n\nif you can, please make sure to include new unit tests for new features or\nchanges in behavior. we aim to bring coverage to 100% at some point.\n\n#### installing the pre-commit hook\n\nyou can arrange for the code style and typing tests to be run automatically\nbefore each commit by installing the git `pre-commit` hook:\n\n    $ ./tools/pre-commit --install\n\n### chat with us (irc/matrix)\n\nyou can find us on [#py-ipfs on chat.freenode.org](http://webchat.freenode.net/?channels=%23py-ipfs)\nor in our [matrix chat room](https://matrix.to/#/#py-ipfs:ninetailed.ninja?via=ninetailed.ninja&via=librem.one).\njoin us if you have any suggestions, questions or if you just want to discuss\nipfs and python in general.\n\nplease note that the channel is not monitored all the time and hence you may\nonly receive a reply to your message later that day. using matrix makes it\neasier to stay connected in the background, so please prefer the matrix option\nor use an irc bouncer.\n\n## license\n\nthis code is distributed under the terms of the [mit license](https://opensource.org/licenses/mit).  details can be found in the file\n[license](license) in this repository.\n",
  "docs_url": null,
  "keywords": "ipfs storage distribution development",
  "license": "mit license",
  "name": "ipfshttpclient",
  "package_url": "https://pypi.org/project/ipfshttpclient/",
  "project_url": "https://pypi.org/project/ipfshttpclient/",
  "project_urls": {
    "Documentation": "https://ipfs.io/ipns/12D3KooWEqnTdgqHnkkwarSrJjeMP2ZJiADWLYADaNvUb6SQNyPF/docs/",
    "Homepage": "https://ipfs.io/ipns/12D3KooWEqnTdgqHnkkwarSrJjeMP2ZJiADWLYADaNvUb6SQNyPF/"
  },
  "release_url": "https://pypi.org/project/ipfshttpclient/0.7.0/",
  "requires_dist": [
    "multiaddr (>=0.0.7)",
    "requests (>=2.11)"
  ],
  "requires_python": ">=3.5.4,!=3.6.0,!=3.6.1,!=3.7.0,!=3.7.1",
  "summary": "python ipfs http client library",
  "version": "0.7.0",
  "releases": [],
  "developers": [
    "py"
  ],
  "kwds": "ipfs ipfsapi ipfshttpclient ipwb ip4",
  "license_kwds": "mit license",
  "libtype": "pypi",
  "id": "pypi_ipfshttpclient",
  "homepage": "https://ipfs.io/ipns/12d3kooweqntdgqhnkkwarsrjjemp2zjiadwlyadanvub6sqnypf/",
  "release_count": 13,
  "dependency_ids": [
    "pypi_multiaddr",
    "pypi_requests"
  ]
}
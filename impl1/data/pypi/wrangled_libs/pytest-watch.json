{
  "classifiers": [],
  "description": "pytest-watch \u2013 continuous pytest runner\n=======================================\n\n`current version on pypi <http://pypi.python.org/pypi/pytest-watch/>`__\n`say thanks! <https://saythanks.io/to/joeyespo>`__\n\n**pytest-watch** a zero-config cli tool that runs\n`pytest <http://pytest.org/>`__, and re-runs it when a file in your\nproject changes. it beeps on failures and can run arbitrary commands on\neach passing and failing test run.\n\nmotivation\n----------\n\nwhether or not you use the test-driven development method, running tests\ncontinuously is far more productive than waiting until you\u2019re finished\nprogramming to test your code. additionally, manually running\n``py.test`` each time you want to see if any tests were broken has more\nwait-time and cognitive overhead than merely listening for a\nnotification. this could be a crucial difference when debugging a\ncomplex problem or on a tight deadline.\n\ninstallation\n------------\n\n.. code:: bash\n\n   $ pip install pytest-watch\n\nusage\n-----\n\n.. code:: bash\n\n   $ cd myproject\n   $ ptw\n    * watching /path/to/myproject\n\n*note: it can also be run using its full name ``pytest-watch``.*\n\nnow develop normally and check the terminal every now and then to see if\nany tests are broken. alternatively, pytest-watch can **notify you**\nwhen tests pass or fail:\n\n-  **osx**\n\n   ``$ ptw --onpass \"say passed\" --onfail \"say failed\"``\n\n   .. code:: bash\n\n      $ ptw --onpass \"growlnotify -m \\\"all tests passed!\\\"\" \\\n            --onfail \"growlnotify -m \\\"tests failed\\\"\"\n\n   using `growlnotify <http://growl.info/downloads#generaldownloads>`__.\n\n-  **windows**\n\n   .. code:: bat\n\n      > ptw --onfail flash\n\n   using `console flash <http://github.com/joeyespo/console-flash>`__\n\nyou can also run a command before the tests run, e.g.\u00a0seeding your test\ndatabase:\n\n.. code:: bash\n\n   $ ptw --beforerun init_db.py\n\nor after they finish, e.g.\u00a0deleting a sqlite file. note that this script\nreceives the exit code of ``py.test`` as an argument.\n\n.. code:: bash\n\n   $ ptw --afterrun cleanup_db.py\n\nyou can also use a custom runner script for full ``py.test`` control:\n\n.. code:: bash\n\n   $ ptw --runner \"python custom_pytest_runner.py\"\n\nhere\u2019s an minimal runner script that runs ``py.test`` and prints its\nexit code:\n\n.. code:: py\n\n   # custom_pytest_runner.py\n\n   import sys\n   import pytest\n\n   print('py.test exited with code:', pytest.main(sys.argv[1:]))\n\nneed to exclude directories from being observed or collected for tests?\n\n.. code:: bash\n\n   $ ptw --ignore ./deep-directory --ignore ./integration_tests\n\nsee the full list of options:\n\n::\n\n   $ ptw --help\n   usage: ptw [options] [--ignore <dir>...] [<directory>...] [-- <pytest-args>...]\n\n   options:\n     --ignore <dir>        ignore directory from being watched and during\n                           collection (multi-allowed).\n     --ext <exts>          comma-separated list of file extensions that can\n                           trigger a new test run when changed (default: .py).\n                           use --ext=* to allow any file (including .pyc).\n     --config <file>       load configuration from `file` instead of trying to\n                           locate one of the implicit configuration files.\n     -c --clear            clear the screen before each run.\n     -n --nobeep           do not beep on failure.\n     -w --wait             waits for all tests to complete before re-running.\n                           otherwise, tests are interrupted on filesystem events.\n     --beforerun <cmd>     run arbitrary command before tests are run.\n     --afterrun <cmd>      run arbitrary command on completion or interruption.\n                           the exit code of \"py.test\" is passed as an argument.\n     --onpass <cmd>        run arbitrary command on pass.\n     --onfail <cmd>        run arbitrary command on failure.\n     --onexit <cmd>        run arbitrary command when exiting pytest-watch.\n     --runner <cmd>        run a custom command instead of \"py.test\".\n     --pdb                 start the interactive python debugger on errors.\n                           this also enables --wait to prevent pdb interruption.\n     --spool <delay>       re-run after a delay (in milliseconds), allowing for\n                           more file system events to queue up (default: 200 ms).\n     -p --poll             use polling instead of os events (useful in vms).\n     -v --verbose          increase verbosity of the output.\n     -q --quiet            decrease verbosity of the output (precedence over -v).\n     -v --version          print version and exit.\n     -h --help             print help and exit.\n\nconfiguration\n-------------\n\ncli options can be added to a ``[pytest-watch]`` section in your\n`pytest.ini file <https://pytest.org/latest/customize.html>`__ to\npersist them in your project. for example:\n\n.. code:: ini\n\n   # pytest.ini\n\n   [pytest]\n   addopts = --maxfail=2\n\n\n   [pytest-watch]\n   ignore = ./integration-tests\n   nobeep = true\n\nalternatives\n------------\n\n-  `xdist <http://pypi.python.org/pypi/pytest-xdist>`__ offers the\n   ``--looponfail`` (``-f``) option (and distributed testing options).\n   this instead re-runs only those tests which have failed until you\n   make them pass. this can be a speed advantage when trying to get all\n   tests passing, but leaves out the discovery of new failures until\n   then. it also drops the colors outputted by py.test, whereas\n   pytest-watch doesn\u2019t.\n-  `nosey <http://github.com/joeyespo/nosey>`__ is the original codebase\n   this was forked from. nosey runs\n   `nose <http://nose.readthedocs.org/en/latest/>`__ instead of pytest.\n\ncontributing\n------------\n\n1. check the open issues or open a new issue to start a discussion\n   around your feature idea or the bug you found\n2. fork the repository, make your changes, and add yourself to\n   `authors.md <./authors.md>`__\n3. send a pull request\n\nif you want to edit the readme, be sure to make your changes to\n``readme.md`` and run the following to regenerate the ``readme.rst``\nfile:\n\n.. code:: bash\n\n   $ pandoc -t rst -o readme.rst readme.md\n\nif your pr has been waiting a while, feel free to `ping me on\ntwitter <https://twitter.com/joeyespo>`__.\n\nuse this software often? :smiley:\n",
  "docs_url": null,
  "keywords": "",
  "license": "mit",
  "name": "pytest-watch",
  "package_url": "https://pypi.org/project/pytest-watch/",
  "project_url": "https://pypi.org/project/pytest-watch/",
  "project_urls": {
    "Homepage": "http://github.com/joeyespo/pytest-watch"
  },
  "release_url": "https://pypi.org/project/pytest-watch/4.2.0/",
  "requires_dist": [],
  "requires_python": "",
  "summary": "local continuous test runner with pytest and watchdog.",
  "version": "4.2.0",
  "releases": [],
  "developers": [
    "joe@joeyespo.com",
    "joe_esposito"
  ],
  "kwds": "custom_pytest_runner pytest pypi tests testing",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_pytest_watch",
  "homepage": "http://github.com/joeyespo/pytest-watch",
  "release_count": 17,
  "dependency_ids": []
}
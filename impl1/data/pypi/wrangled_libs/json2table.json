{
  "classifiers": [],
  "description": "json2table\n==========\n\n|build status| |coverage status|\n\n.. |build status| image:: https://travis-ci.org/latture/json2table.svg?branch=master\n   :target: https://travis-ci.org/latture/json2table\n.. |coverage status| image:: https://coveralls.io/repos/github/latture/json2table/badge.svg?branch=master\n   :target: https://coveralls.io/github/latture/json2table?branch=master\n\nthis is a simple python package that allows a json object to be converted to html. it provides a ``convert`` function that accepts a ``dict`` instance and returns a string of converted html. for example, the simple json object ``{\"key\" : \"value\"}`` can be converted to html via:\n\n.. code:: python\n\n    >>> from json2table import convert\n    >>> json_object = {\"key\" : \"value\"}\n    >>> build_direction = \"left_to_right\"\n    >>> table_attributes = {\"style\" : \"width:100%\"}\n    >>> html = convert(json_object, build_direction=build_direction, table_attributes=table_attributes)\n    >>> print(html)\n    '<table style=\"width:100%\"><tr><th>key</th><td>value</td></tr></table>'\n\nthe resulting table will resemble\n\n+---------+-------+\n| **key** | value |\n+---------+-------+\n\nmore complex parsing is also possible. if a list of ``dict``'s provides the same list of keys, the generated html with gather items by key and display them in the same column.\n\n.. code:: json\n\n    {\"menu\": {\n      \"id\": \"file\",\n      \"value\": \"file\",\n        \"menuitem\": [\n          {\"value\": \"new\", \"onclick\": \"createnewdoc()\"},\n          {\"value\": \"open\", \"onclick\": \"opendoc()\"},\n          {\"value\": \"close\", \"onclick\": \"closedoc()\"}\n        ]\n      }\n    }\n\noutput:\n\n+----------+--------------+----------------+-----------+\n| **menu** | **menuitem** | **onclick**    | **value** |\n+          +              +----------------+-----------+\n|          |              | createnewdoc() | new       |\n+          +              +----------------+-----------+\n|          |              | opendoc()      | open      |\n+          +              +----------------+-----------+\n|          |              | closedoc()     | close     |\n+          +--------------+----------------+-----------+\n|          | **id**       | file                       |\n+          +--------------+----------------+-----------+\n|          | **value**    | file                       |\n+----------+--------------+----------------+-----------+\n\nit might, however, be more readable if we were able to build the table from top-to-bottom instead of the default left-to-right. changing the ``build_direction`` to ``\"top_to_bottom\"`` yields:\n\n+----------------+-----------+-------+-----------+\n| **menu**                                       |\n+----------------+-----------+-------+-----------+\n| **menuitem**               | **id**| **value** |\n+----------------+-----------+-------+-----------+\n| **onclick**    | **value** |  file |   file    |\n+----------------+-----------+       +           +\n| createnewdoc() | new       |       |           | \n+----------------+-----------+       +           +\n| opendoc()      | open      |       |           |\n+----------------+-----------+       +           +\n| closedoc()     | close     |       |           |\n+----------------+-----------+-------+-----------+\n\ntable attributes are added via the ``table_attributes`` parameter. this parameter should be a ``dict`` of ``(key, value)`` pairs to apply to the table in the form ``key=\"value\"``. if in our simple example before we additionally wanted to apply a class attribute of ``\"table table-striped\"`` we would use the following:\n\n.. code:: python\n\n    >>> table_attributes = {\"style\" : \"width:100%\", \"class\" : \"table table-striped\"}\n\nand convert just as before:\n\n.. code:: python\n\n    >>> html = convert(json_object, build_direction=build_direction, table_attributes=table_attributes)\n\ndetails\n-------\nthis module provides a single ``convert`` function. it takes as input the json object (represented as a python ``dict``) and, optionally, a build direction and a dictionary of table attributes to customize the generated table: \n\n``convert(json_input, build_direction=\"left_to_right\", table_attributes=none)``\n\n**parameters**\n\njson_input : dict\n\n  json object to convert into html.\n\nbuild_direction : ``{\"top_to_bottom\", \"left_to_right\"}``, optional\n\n  string denoting the build direction of the table. if ``\"top_to_bottom\"`` child\n  objects will be appended below parents, i.e. in the subsequent row. if ``\"left_to_right\"``\n  child objects will be appended to the right of parents, i.e. in the subsequent column.\n  default is ``\"left_to_right\"``.\n\ntable_attributes : ``dict``, optional\n\n  dictionary of ``(key, value)`` pairs describing attributes to add to the table. \n  each attribute is added according to the template ``key=\"value\"``. for example, \n  the table ``{ \"border\" : 1 }`` modifies the generated table tags to include \n  ``border=\"1\"`` as an attribute. the generated opening tag would look like \n  ``<table border=\"1\">``. default is ``none``.\n\n**returns**\n\n``str``\n\n  string of converted html.\n\ninstallation\n------------\nthe easiest method on installation is to use ``pip``. simply run:\n\n::\n\n    >>> pip install json2table\n\nif instead the repo was cloned, navigate to the root directory of the ``json2table`` package from the command line and execute:\n\n::\n\n    >>> python setup.py install\n\ntests\n-----\n\nin order to verify the code is working, from the command line navigate to the ``json2table`` root directory and run:\n\n::\n\n    >>> python -m unittest tests.test_json2table",
  "docs_url": null,
  "keywords": "json,html,convert,table",
  "license": "mit",
  "name": "json2table",
  "package_url": "https://pypi.org/project/json2table/",
  "project_url": "https://pypi.org/project/json2table/",
  "project_urls": {
    "Download": "https://github.com/latture/json2table/tarball/master",
    "Homepage": "https://github.com/latture/json2table"
  },
  "release_url": "https://pypi.org/project/json2table/1.1.5/",
  "requires_dist": [],
  "requires_python": null,
  "summary": "convert json to an html table",
  "version": "1.1.5",
  "releases": [],
  "developers": [
    "ryan.latture@gmail.com",
    "ryan_latture"
  ],
  "kwds": "test_json2table json2table json_object json json_input",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_json2table",
  "homepage": "https://github.com/latture/json2table",
  "release_count": 5,
  "dependency_ids": []
}
{
  "classifiers": [
    "development status :: 5 - production/stable",
    "license :: osi approved :: bsd license",
    "operating system :: os independent",
    "programming language :: python",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.6",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9"
  ],
  "description": "vininfo\n=======\nhttps://github.com/idlesign/vininfo\n\n\n|release| |lic| |coverage|\n\n.. |release| image:: https://img.shields.io/pypi/v/vininfo.svg\n    :target: https://pypi.python.org/pypi/vininfo\n\n.. |lic| image:: https://img.shields.io/pypi/l/vininfo.svg\n    :target: https://pypi.python.org/pypi/vininfo\n\n.. |coverage| image:: https://img.shields.io/coveralls/idlesign/vininfo/master.svg\n    :target: https://coveralls.io/r/idlesign/vininfo\n\n\ndescription\n-----------\n\n*extracts useful information from vehicle identification number (vin)*\n\n* can be used as a standalone console application (cli).\n* one can also use import it as any other package in your python code.\n* gives basic and detailed info (is available) about vin.\n* allows vin checksum verification.\n\nadditional info available for many vehicles from:\n\n* avtovaz\n* nissan\n* opel\n* renault\n\n\nrequirements\n------------\n\n* python 3.6+\n* ``click`` package for cli\n\n\nusage\n-----\n\ncli\n~~~\n\n``click`` package is required for cli. you can install ``vininfo`` with ``click`` using::\n\n    $ pip install vininfo[cli]\n\n\n.. code-block:: bash\n\n    $ vininfo --help\n\n    ; print out vin info:\n    $ vininfo show xtagfk330jy144213\n\n    ; basic:\n    ; country: ussr/cis\n    ; manufacturer: avtovaz\n    ; region: europe\n    ; years: 2018, 1988\n    ;\n    ; details:\n    ; body: station wagon, 5-door\n    ; engine: 21179\n    ; model: vesta\n    ; plant: izhevsk\n    ; serial: 144213\n    ; transmission: manual renault\n\n    ; verify checksum\n    $ vininfo check 1m8gdm9axkp042788\n    ; checksum is valid\n\n\npython\n~~~~~~\n\n.. code-block:: python\n\n    from vininfo import vin\n\n    vin = vin('vf1lm1b0h36666155')\n\n    vin.country  # france\n    vin.manufacturer  # renault\n    vin.region  # europe\n    vin.wmi  # vf1\n    vin.vds  # lm1b0h\n    vin.vis  # 36666155\n\n    annotated = vin.annotate()\n    details = vin.details\n\n    vin.verify_checksum()  # false\n    vin('1m8gdm9axkp042788').verify_checksum()  # true\n\n\ndevelopment\n-----------\n\none can add missing wmi(s) using instructions from ``dicts/wmi.py``:\n``wmi`` dictionary, that maps wmi strings to manufacturers.\n\nthose manufacturers may be represented by simple strings, or instances of ``brand``\nsubclasses (see ``brands.py``).\n\nif you know how to decode additional information (model, body, engine, etc.)\nencoded in vin, you may also want to create a so-called `details extractor`\nfor a brand.\n\ndetails extractors are ``vindetails`` subclasses in most cases making use of\n``detail`` descriptors to represent additional information\n(see ``details/nissan.py`` for example).\n",
  "docs_url": null,
  "keywords": "",
  "license": "bsd 3-clause license",
  "name": "vininfo",
  "package_url": "https://pypi.org/project/vininfo/",
  "project_url": "https://pypi.org/project/vininfo/",
  "project_urls": {
    "Homepage": "https://github.com/idlesign/vininfo"
  },
  "release_url": "https://pypi.org/project/vininfo/1.7.0/",
  "requires_dist": [],
  "requires_python": "",
  "summary": "extracts useful information from vehicle identification number (vin)",
  "version": "1.7.0",
  "releases": [],
  "developers": [
    "idlesign@yandex.ru",
    "igor"
  ],
  "kwds": "vininfo vin vindetails descriptors extractor",
  "license_kwds": "bsd 3-clause license",
  "libtype": "pypi",
  "id": "pypi_vininfo",
  "homepage": "https://github.com/idlesign/vininfo",
  "release_count": 14,
  "dependency_ids": []
}
{
  "classifiers": [
    "development status :: 4 - beta",
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "natural language :: english",
    "operating system :: os independent",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: internet :: www/http",
    "topic :: software development :: testing",
    "topic :: software development :: testing :: mocking"
  ],
  "description": "===============================\naioresponses\n===============================\n\n.. image:: https://travis-ci.org/pnuckowski/aioresponses.svg?branch=master\n        :target: https://travis-ci.org/pnuckowski/aioresponses\n\n.. image:: https://coveralls.io/repos/github/pnuckowski/aioresponses/badge.svg?branch=master\n        :target: https://coveralls.io/github/pnuckowski/aioresponses?branch=master\n\n.. image:: https://landscape.io/github/pnuckowski/aioresponses/master/landscape.svg?style=flat\n        :target: https://landscape.io/github/pnuckowski/aioresponses/master\n        :alt: code health\n\n.. image:: https://pyup.io/repos/github/pnuckowski/aioresponses/shield.svg\n        :target: https://pyup.io/repos/github/pnuckowski/aioresponses/\n        :alt: updates\n\n.. image:: https://img.shields.io/pypi/v/aioresponses.svg\n        :target: https://pypi.python.org/pypi/aioresponses\n\n.. image:: https://readthedocs.org/projects/aioresponses/badge/?version=latest\n        :target: https://aioresponses.readthedocs.io/en/latest/?badge=latest\n        :alt: documentation status\n\n\naioresponses is a helper to mock/fake web requests in python aiohttp package.\n\nfor *requests* module there are a lot of packages that help us with testing (eg. *httpretty*, *responses*, *requests-mock*).\n\nwhen it comes to testing asynchronous http requests it is a bit harder (at least at the beginning).\nthe purpose of this package is to provide an easy way to test asynchronous http requests.\n\ninstalling\n----------\n\n.. code:: bash\n\n    $ pip install aioresponses\n\nsupported versions\n------------------\n- python 3.7+\n- aiohttp>=3.3.0,<4.0.0\n\nusage\n--------\n\nto mock out http request use *aioresponses* as a method decorator or as a context manager.\n\nresponse *status* code, *body*, *payload* (for json response) and *headers* can be mocked.\n\nsupported http methods: **get**, **post**, **put**, **patch**, **delete** and **options**.\n\n.. code:: python\n\n    import aiohttp\n    import asyncio\n    from aioresponses import aioresponses\n\n    @aioresponses()\n    def test_request(mocked):\n        loop = asyncio.get_event_loop()\n        mocked.get('http://example.com', status=200, body='test')\n        session = aiohttp.clientsession()\n        resp = loop.run_until_complete(session.get('http://example.com'))\n\n        assert resp.status == 200\n        mocked.assert_called_once_with('http://example.com')\n\n\nfor convenience use *payload* argument to mock out json response. example below.\n\n**as a context manager**\n\n.. code:: python\n\n    import asyncio\n    import aiohttp\n    from aioresponses import aioresponses\n\n    def test_ctx():\n        loop = asyncio.get_event_loop()\n        session = aiohttp.clientsession()\n        with aioresponses() as m:\n            m.get('http://test.example.com', payload=dict(foo='bar'))\n\n            resp = loop.run_until_complete(session.get('http://test.example.com'))\n            data = loop.run_until_complete(resp.json())\n\n            assert dict(foo='bar') == data\n            m.assert_called_once_with('http://test.example.com')\n\n**aioresponses allows to mock out any http headers**\n\n.. code:: python\n\n    import asyncio\n    import aiohttp\n    from aioresponses import aioresponses\n\n    @aioresponses()\n    def test_http_headers(m):\n        loop = asyncio.get_event_loop()\n        session = aiohttp.clientsession()\n        m.post(\n            'http://example.com',\n            payload=dict(),\n            headers=dict(connection='keep-alive'),\n        )\n\n        resp = loop.run_until_complete(session.post('http://example.com'))\n\n        # note that we pass 'connection' but get 'connection' (capitalized)\n        # under the neath `multidict` is used to work with http headers\n        assert resp.headers['connection'] == 'keep-alive'\n        m.assert_called_once_with('http://example.com', method='post')\n\n**allows to register different responses for the same url**\n\n.. code:: python\n\n    import asyncio\n    import aiohttp\n    from aioresponses import aioresponses\n\n    @aioresponses()\n    def test_multiple_responses(m):\n        loop = asyncio.get_event_loop()\n        session = aiohttp.clientsession()\n        m.get('http://example.com', status=500)\n        m.get('http://example.com', status=200)\n\n        resp1 = loop.run_until_complete(session.get('http://example.com'))\n        resp2 = loop.run_until_complete(session.get('http://example.com'))\n\n        assert resp1.status == 500\n        assert resp2.status == 200\n\n\n**repeat response for the same url**  \n\ne.g. for cases you want to test retrying mechanisms\n\n.. code:: python\n\n    import asyncio\n    import aiohttp\n    from aioresponses import aioresponses\n\n    @aioresponses()\n    def test_multiple_responses(m):\n        loop = asyncio.get_event_loop()\n        session = aiohttp.clientsession()\n        m.get('http://example.com', status=500, repeat=true)\n        m.get('http://example.com', status=200)  # will not take effect\n\n        resp1 = loop.run_until_complete(session.get('http://example.com'))\n        resp2 = loop.run_until_complete(session.get('http://example.com'))\n\n        assert resp1.status == 500\n        assert resp2.status == 500\n\n\n**match urls with regular expressions**\n\n.. code:: python\n\n    import asyncio\n    import aiohttp\n    import re\n    from aioresponses import aioresponses\n\n    @aioresponses()\n    def test_regexp_example(m):\n        loop = asyncio.get_event_loop()\n        session = aiohttp.clientsession()\n        pattern = re.compile(r'^http://example\\.com/api\\?foo=.*$')\n        m.get(pattern, status=200)\n\n        resp = loop.run_until_complete(session.get('http://example.com/api?foo=bar'))\n\n        assert resp.status == 200\n\n**allows to make redirects responses**\n\n.. code:: python\n\n    import asyncio\n    import aiohttp\n    from aioresponses import aioresponses\n\n    @aioresponses()\n    def test_redirect_example(m):\n        loop = asyncio.get_event_loop()\n        session = aiohttp.clientsession()\n\n        # absolute urls are supported\n        m.get(\n            'http://example.com/',\n            headers={'location': 'http://another.com/'},\n            status=307\n        )\n\n        resp = loop.run_until_complete(\n            session.get('http://example.com/', allow_redirects=true)\n        )\n        assert resp.url == 'http://another.com/'\n\n        # and also relative\n        m.get(\n            'http://example.com/',\n            headers={'location': '/test'},\n            status=307\n        )\n        resp = loop.run_until_complete(\n            session.get('http://example.com/', allow_redirects=true)\n        )\n        assert resp.url == 'http://example.com/test'\n\n**allows to passthrough to a specified list of servers**\n\n.. code:: python\n\n    import asyncio\n    import aiohttp\n    from aioresponses import aioresponses\n\n    @aioresponses(passthrough=['http://backend'])\n    def test_passthrough(m, test_client):\n        session = aiohttp.clientsession()\n        # this will actually perform a request\n        resp = loop.run_until_complete(session.get('http://backend/api'))\n\n\n**aioresponses allows to throw an exception**\n\n.. code:: python\n\n    import asyncio\n    from aiohttp import clientsession\n    from aiohttp.http_exceptions import httpprocessingerror\n    from aioresponses import aioresponses\n\n    @aioresponses()\n    def test_how_to_throw_an_exception(m, test_client):\n        loop = asyncio.get_event_loop()\n        session = clientsession()\n        m.get('http://example.com/api', exception=httpprocessingerror('test'))\n\n        # calling\n        # loop.run_until_complete(session.get('http://example.com/api'))\n        # will throw an exception.\n\n\n**aioresponses allows to use callbacks to provide dynamic responses**\n\n.. code:: python\n\n    import asyncio\n    import aiohttp\n    from aioresponses import callbackresult, aioresponses\n\n    def callback(url, **kwargs):\n        return callbackresult(status=418)\n\n    @aioresponses()\n    def test_callback(m, test_client):\n        loop = asyncio.get_event_loop()\n        session = clientsession()\n        m.get('http://example.com', callback=callback)\n\n        resp = loop.run_until_complete(session.get('http://example.com'))\n\n        assert resp.status == 418\n\n\n**aioresponses can be used in a pytest fixture**\n\n.. code:: python\n\n    import pytest\n    from aioresponses import aioresponses\n\n    @pytest.fixture\n    def mock_aioresponse():\n        with aioresponses() as m:\n            yield m\n\n\nfeatures\n--------\n* easy to mock out http requests made by *aiohttp.clientsession*\n\n\nlicense\n-------\n* free software: mit license\n\ncredits\n-------\n\nthis package was created with cookiecutter_ and the `audreyr/cookiecutter-pypackage`_ project template.\n\n.. _cookiecutter: https://github.com/audreyr/cookiecutter\n.. _`audreyr/cookiecutter-pypackage`: https://github.com/audreyr/cookiecutter-pypackage\n\n",
  "docs_url": null,
  "keywords": "",
  "license": "",
  "name": "aioresponses",
  "package_url": "https://pypi.org/project/aioresponses/",
  "project_url": "https://pypi.org/project/aioresponses/",
  "project_urls": {
    "Homepage": "https://github.com/pnuckowski/aioresponses"
  },
  "release_url": "https://pypi.org/project/aioresponses/0.7.6/",
  "requires_dist": [
    "aiohttp (<4.0.0,>=3.3.0)"
  ],
  "requires_python": "",
  "summary": "mock out requests made by clientsession from aiohttp package",
  "version": "0.7.6",
  "releases": [],
  "developers": [
    "p.nuckowski@gmail.com",
    "pawel_nuckowski"
  ],
  "kwds": "badge svg aioresponses template landscape",
  "license_kwds": "",
  "libtype": "pypi",
  "id": "pypi_aioresponses",
  "homepage": "https://github.com/pnuckowski/aioresponses",
  "release_count": 26,
  "dependency_ids": [
    "pypi_aiohttp"
  ]
}
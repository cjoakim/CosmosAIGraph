{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.6",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9"
  ],
  "description": "icontract\n=========\n.. image:: https://github.com/parquery/icontract/workflows/ci/badge.svg\n    :target: https://github.com/parquery/icontract/actions?query=workflow%3aci\n    :alt: continuous integration\n\n.. image:: https://coveralls.io/repos/github/parquery/icontract/badge.svg?branch=master\n    :target: https://coveralls.io/github/parquery/icontract\n\n.. image:: https://badge.fury.io/py/icontract.svg\n    :target: https://badge.fury.io/py/icontract\n    :alt: pypi - version\n\n.. image:: https://img.shields.io/pypi/pyversions/icontract.svg\n    :alt: pypi - python version\n\n.. image:: https://readthedocs.org/projects/icontract/badge/?version=latest\n    :target: https://icontract.readthedocs.io/en/latest/\n    :alt: documentation\n\n.. image:: https://badges.gitter.im/gitterhq/gitter.svg\n    :target: https://gitter.im/parquery-icontract/community\n    :alt: gitter chat\n\nicontract provides `design-by-contract <https://en.wikipedia.org/wiki/design_by_contract>`_ to python3 with informative\nviolation messages and inheritance.\n\nit also gives a base for a flourishing of a wider ecosystem:\n\n* a linter `pyicontract-lint`_,\n* a sphinx plug-in `sphinx-icontract`_,\n* a tool `icontract-hypothesis`_ for automated testing and ghostwriting test files which infers\n  `hypothesis`_ strategies based on the contracts,\n\n  * together with ide integrations such as\n    `icontract-hypothesis-vim`_,\n    `icontract-hypothesis-pycharm`_, and\n    `icontract-hypothesis-vscode`_,\n* directly integrated into `crosshair`_, a tool for automatic verification of python programs,\n\n  * together with ide integrations such as\n    `crosshair-pycharm`_ and `crosshair-vscode`_, and\n* an integration with `fastapi`_ through `fastapi-icontract`_ to enforce contracts on your http api and display them\n  in openapi 3 schema and swagger ui, and\n* an extensive corpus, `python-by-contract corpus`_, of python programs annotated with contracts for educational, testing and research purposes.\n\n.. _pyicontract-lint: https://pypi.org/project/pyicontract-lint\n.. _sphinx-icontract: https://pypi.org/project/sphinx-icontract\n.. _icontract-hypothesis: https://github.com/mristin/icontract-hypothesis\n.. _hypothesis: https://hypothesis.readthedocs.io/en/latest/\n.. _icontract-hypothesis-vim: https://github.com/mristin/icontract-hypothesis-vim\n.. _icontract-hypothesis-pycharm: https://github.com/mristin/icontract-hypothesis-pycharm\n.. _icontract-hypothesis-vscode: https://github.com/mristin/icontract-hypothesis-vscode\n.. _crosshair: https://github.com/pschanely/crosshair\n.. _crosshair-pycharm: https://github.com/mristin/crosshair-pycharm/\n.. _crosshair-vscode: https://github.com/mristin/crosshair-vscode/\n.. _fastapi: https://github.com/tiangolo/fastapi/issues/1996\n.. _fastapi-icontract: https://pypi.org/project/fastapi-icontract/\n.. _python-by-contract corpus: https://github.com/mristin/python-by-contract-corpus\n\nrelated projects\n----------------\nthere exist a couple of contract libraries. however, at the time of this writing (september 2018), they all required the\nprogrammer either to learn a new syntax (`pycontracts <https://pypi.org/project/pycontracts/>`_) or to write\nredundant condition descriptions (\n*e.g.*,\n`contracts <https://pypi.org/project/contracts/>`_,\n`covenant <https://github.com/kisielk/covenant>`_,\n`deal <https://github.com/life4/deal>`_,\n`dpcontracts <https://pypi.org/project/dpcontracts/>`_,\n`pyadbc <https://pypi.org/project/pyadbc/>`_ and\n`pcd <https://pypi.org/project/pcd>`_).\n\nthis library was strongly inspired by them, but we go two steps further.\n\nfirst, our violation message on contract breach are much more informative. the message includes the source code of the\ncontract condition as well as variable values at the time of the breach. this promotes don't-repeat-yourself principle\n(`dry <https://en.wikipedia.org/wiki/don%27t_repeat_yourself>`_) and spare the programmer the tedious task of repeating\nthe message that was already written in code.\n\nsecond, icontract allows inheritance of the contracts and supports weakining of the preconditions\nas well as strengthening of the postconditions and invariants. notably, weakining and strengthening of the contracts\nis a feature indispensable for modeling many non-trivial class hierarchies. please see section\n`inheritance <https://icontract.readthedocs.io/en/latest/usage.html#inheritance>`_.\nto the best of our knowledge, there is currently no other python library that supports inheritance of the contracts in a\ncorrect way.\n\nin the long run, we hope that design-by-contract will be adopted and integrated in the language. consider this library\na work-around till that happens. you might be also interested in the archived discussion on how to bring\ndesign-by-contract into python language on\n`python-ideas mailing list <https://groups.google.com/forum/#!topic/python-ideas/jtmgpsyodtu>`_.\n\nteasers\n=======\nwe give a couple of teasers here to motivate the library.\nplease see the documentation available on `icontract.readthedocs.io\n<https://icontract.readthedocs.io/en/latest/>`_ for a full scope of its\ncapabilities.\n\nthe script is also available as a `repl.it post`_.\n\n.. _repl.it post: https://repl.it/talk/share/icontract-example-script/121190\n\n.. code-block:: python\n\n    >>> import icontract\n\n    >>> @icontract.require(lambda x: x > 3)\n    ... def some_func(x: int, y: int = 5) -> none:\n    ...     pass\n    ...\n\n    >>> some_func(x=5)\n\n    # pre-condition violation\n    >>> some_func(x=1)\n    traceback (most recent call last):\n      ...\n    icontract.errors.violationerror: file <doctest readme.rst[1]>, line 1 in <module>:\n    x > 3:\n    x was 1\n    y was 5\n\n    # pre-condition violation with a description\n    >>> @icontract.require(lambda x: x > 3, \"x must not be small\")\n    ... def some_func(x: int, y: int = 5) -> none:\n    ...     pass\n    ...\n    >>> some_func(x=1)\n    traceback (most recent call last):\n      ...\n    icontract.errors.violationerror: file <doctest readme.rst[4]>, line 1 in <module>:\n    x must not be small: x > 3:\n    x was 1\n    y was 5\n\n    # pre-condition violation with more complex values\n    >>> class b:\n    ...     def __init__(self) -> none:\n    ...         self.x = 7\n    ...\n    ...     def y(self) -> int:\n    ...         return 2\n    ...\n    ...     def __repr__(self) -> str:\n    ...         return \"instance of b\"\n    ...\n    >>> class a:\n    ...     def __init__(self) -> none:\n    ...         self.b = b()\n    ...\n    ...     def __repr__(self) -> str:\n    ...         return \"instance of a\"\n    ...\n    >>> some_global_var = 13\n    >>> @icontract.require(lambda a: a.b.x + a.b.y() > some_global_var)\n    ... def some_func(a: a) -> none:\n    ...     pass\n    ...\n    >>> an_a = a()\n    >>> some_func(an_a)\n    traceback (most recent call last):\n      ...\n    icontract.errors.violationerror: file <doctest readme.rst[9]>, line 1 in <module>:\n    a.b.x + a.b.y() > some_global_var:\n    some_global_var was 13\n    a was instance of a\n    a.b was instance of b\n    a.b.x was 7\n    a.b.y() was 2\n\n    # post-condition\n    >>> @icontract.ensure(lambda result, x: result > x)\n    ... def some_func(x: int, y: int = 5) -> int:\n    ...     return x - y\n    ...\n    >>> some_func(x=10)\n    traceback (most recent call last):\n      ...\n    icontract.errors.violationerror: file <doctest readme.rst[12]>, line 1 in <module>:\n    result > x:\n    result was 5\n    x was 10\n    y was 5\n\n\n    # pre-conditions fail before post-conditions.\n    >>> @icontract.ensure(lambda result, x: result > x)\n    ... @icontract.require(lambda x: x > 3, \"x must not be small\")\n    ... def some_func(x: int, y: int = 5) -> int:\n    ...    return x - y\n    ...\n    >>> some_func(x=3)\n    traceback (most recent call last):\n      ...\n    icontract.errors.violationerror: file <doctest readme.rst[14]>, line 2 in <module>:\n    x must not be small: x > 3:\n    x was 3\n    y was 5\n\n    # invariant\n    >>> @icontract.invariant(lambda self: self.x > 0)\n    ... class someclass:\n    ...     def __init__(self) -> none:\n    ...         self.x = -1\n    ...\n    ...     def __repr__(self) -> str:\n    ...         return \"an instance of someclass\"\n    ...\n    >>> some_instance = someclass()\n    traceback (most recent call last):\n     ...\n    icontract.errors.violationerror: file <doctest readme.rst[16]>, line 1 in <module>:\n    self.x > 0:\n    self was an instance of someclass\n    self.x was -1\n\n\ninstallation\n============\n\n* install icontract with pip:\n\n.. code-block:: bash\n\n    pip3 install icontract\n\nversioning\n==========\nwe follow `semantic versioning <http://semver.org/spec/v1.0.0.html>`_. the version x.y.z indicates:\n\n* x is the major version (backward-incompatible),\n* y is the minor version (backward-compatible), and\n* z is the patch version (backward-compatible bug fix).\n",
  "docs_url": null,
  "keywords": "design-by-contract precondition postcondition validation",
  "license": "license :: osi approved :: mit license",
  "name": "icontract",
  "package_url": "https://pypi.org/project/icontract/",
  "project_url": "https://pypi.org/project/icontract/",
  "project_urls": {
    "Homepage": "https://github.com/Parquery/icontract"
  },
  "release_url": "https://pypi.org/project/icontract/2.6.6/",
  "requires_dist": [
    "asttokens <3,>=2",
    "typing-extensions",
    "contextvars ; python_version == \"3.6\"",
    "tox >=3.0.0 ; extra == 'dev'",
    "pydocstyle <7,>=6.3.0 ; extra == 'dev'",
    "coverage <5,>=4.5.1 ; extra == 'dev'",
    "docutils <1,>=0.14 ; extra == 'dev'",
    "pygments <3,>=2.2.0 ; extra == 'dev'",
    "dpcontracts ==0.6.0 ; extra == 'dev'",
    "tabulate <1,>=0.8.7 ; extra == 'dev'",
    "py-cpuinfo <6,>=5.0.0 ; extra == 'dev'",
    "typeguard <5,>=2 ; extra == 'dev'",
    "astor ==0.8.1 ; extra == 'dev'",
    "numpy <2,>=1 ; extra == 'dev'",
    "pylint ==2.17.5 ; (python_version >= \"3.7\") and extra == 'dev'",
    "mypy ==1.5.1 ; (python_version >= \"3.8\") and extra == 'dev'",
    "black ==23.9.1 ; (python_version >= \"3.8\") and extra == 'dev'",
    "deal <5,>=4 ; (python_version >= \"3.8\") and extra == 'dev'",
    "asyncstdlib ==3.9.1 ; (python_version >= \"3.8\") and extra == 'dev'"
  ],
  "requires_python": "",
  "summary": "provide design-by-contract with informative violation messages.",
  "version": "2.6.6",
  "releases": [],
  "developers": [
    "marko@ristin.ch",
    "marko_ristin"
  ],
  "kwds": "_icontract icontract _pyicontract pyicontract badge",
  "license_kwds": "license :: osi approved :: mit license",
  "libtype": "pypi",
  "id": "pypi_icontract",
  "homepage": "https://github.com/parquery/icontract",
  "release_count": 60,
  "dependency_ids": [
    "pypi_astor",
    "pypi_asttokens",
    "pypi_asyncstdlib",
    "pypi_black",
    "pypi_contextvars",
    "pypi_coverage",
    "pypi_deal",
    "pypi_docutils",
    "pypi_dpcontracts",
    "pypi_mypy",
    "pypi_numpy",
    "pypi_py_cpuinfo",
    "pypi_pydocstyle",
    "pypi_pygments",
    "pypi_pylint",
    "pypi_tabulate",
    "pypi_tox",
    "pypi_typeguard",
    "pypi_typing_extensions"
  ]
}
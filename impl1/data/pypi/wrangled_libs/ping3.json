{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: developers",
    "intended audience :: end users/desktop",
    "license :: osi approved :: mit license",
    "programming language :: python :: 3",
    "programming language :: python :: 3 :: only",
    "topic :: system :: networking"
  ],
  "description": "# ping3\r\n[![build status](https://travis-ci.org/kyan001/ping3.svg?branch=master)](https://travis-ci.org/kyan001/ping3)\r\n![github release](https://img.shields.io/github/release/kyan001/ping3.svg)\r\n[![github license](https://img.shields.io/github/license/kyan001/ping3.svg)](https://github.com/kyan001/ping3/blob/master/license)\r\n![pypi - downloads](https://img.shields.io/pypi/dm/ping3.svg)\r\n\r\nping3 is a pure python3 version of icmp ping implementation using raw socket.\\\r\n(note that on some platforms, icmp messages can only be sent from processes running as root.)\r\n\r\n> the python2 version originally from [here](http://github.com/samuel/python-ping).\\\r\n> this version maintained at [this github repo](https://github.com/kyan001/ping3).\r\n\r\n[changelog](changelog.md)\r\n\r\n## get started\r\n\r\n* if you met \"permission denied\", you may need to run this as root. alternatively see [this](./troubleshooting.md#permission-denied-on-linux) for troubleshooting on linux.\r\n\r\n```sh\r\npip install ping3  # install ping\r\n```\r\n\r\n```python\r\n>>> from ping3 import ping, verbose_ping\r\n>>> ping('example.com')  # returns delay in seconds.\r\n0.215697261510079666\r\n\r\n>>> verbose_ping('example.com')  # ping 4 times in a row.\r\nping 'example.com' ... 215ms\r\nping 'example.com' ... 216ms\r\nping 'example.com' ... 219ms\r\nping 'example.com' ... 217ms\r\n```\r\n\r\n```sh\r\n$ ping3 example.com  # verbose ping.\r\nping 'example.com' ... 215ms\r\nping 'example.com' ... 216ms\r\nping 'example.com' ... 219ms\r\nping 'example.com' ... 217ms\r\n```\r\n\r\n## installation\r\n\r\n```sh\r\npip install ping3  # install ping3\r\npip install --upgrade ping3 # upgrade ping3\r\npip uninstall ping3  # uninstall ping3\r\n```\r\n\r\n## functions\r\n\r\n```python\r\n>>> from ping3 import ping, verbose_ping\r\n\r\n>>> ping('example.com')  # returns delay in seconds.\r\n0.215697261510079666  # `0.0` returned means the delay is lower than the precision of `time.time()`.\r\n\r\n>>> ping('not.exist.com')  # if host unknown (cannot resolve), returns false.\r\nfalse\r\n\r\n>>> ping(\"224.0.0.0\")  # if timed out (no reply), returns none.\r\nnone\r\n\r\n>>> ping('example.com', timeout=10)  # set timeout to 10 seconds. default timeout is 4 for 4 seconds.\r\n0.215697261510079666\r\n\r\n>>> ping('example.com', unit='ms')  # returns delay in milliseconds. default unit is 's' for seconds.\r\n215.9627876281738\r\n\r\n>>> ping('example.com', src_addr='192.168.1.15')  # set source ip address for multiple interfaces. default src_addr is none for no binding.\r\n0.215697261510079666\r\n\r\n>>> ping('example.com', interface='eth0')  # linux only. set source interface for multiple network interfaces. default interface is none for no binding.\r\n0.215697261510079666\r\n\r\n>>> ping('example.com', ttl=5)  # set packet time-to-live to 5. the packet is discarded if it does not reach the target host after 5 jumps. default ttl is 64.\r\nnone\r\n\r\n>>> ping('example.com', size=56)  # set icmp packet payload to 56 bytes. the total icmp packet size is 8 (header) + 56 (payload) = 64 bytes. default size is 56.\r\n0.215697261510079666\r\n\r\n>>> verbose_ping('example.com')  # ping 4 times in a row.\r\nping 'example.com' ... 215ms\r\nping 'example.com' ... 216ms\r\nping 'example.com' ... 219ms\r\nping 'example.com' ... 217ms\r\n\r\n>>> verbose_ping('example.com', timeout=10)  # set timeout to 10 seconds. default timeout is 4 for 4 seconds.\r\nping 'example.com' ... 215ms\r\nping 'example.com' ... 216ms\r\nping 'example.com' ... 219ms\r\nping 'example.com' ... 217ms\r\n\r\n>>> verbose_ping('example.com', count=6)  # ping 6 times. default count is 4.\r\nping 'example.com' ... 215ms\r\nping 'example.com' ... 216ms\r\nping 'example.com' ... 219ms\r\nping 'example.com' ... 217ms\r\nping 'example.com' ... 215ms\r\nping 'example.com' ... 216ms\r\n\r\n>>> verbose_ping('example.com', count=0)  # ping endlessly (0 means infinite loops). using `ctrl + c` to stop manully.\r\nping 'example.com' ... 215ms\r\n...\r\n\r\n>>> verbose_ping('example.com', src_addr='192.168.1.15')  # ping from source ip address for multiple interfaces. default src_addr is none.\r\nping 'example.com' from '192.168.1.15' ... 215ms\r\nping 'example.com' from '192.168.1.15' ... 216ms\r\nping 'example.com' from '192.168.1.15' ... 219ms\r\nping 'example.com' from '192.168.1.15' ... 217ms\r\n\r\n>>> verbose_ping('example.com', interface='wifi0')  # linux only. ping from network interface 'wifi0'. default interface is none.\r\nping 'example.com' from '192.168.1.15' ... 215ms\r\nping 'example.com' from '192.168.1.15' ... 216ms\r\nping 'example.com' from '192.168.1.15' ... 219ms\r\nping 'example.com' from '192.168.1.15' ... 217ms\r\n\r\n>>> verbose_ping('example.com', unit='s')  # displays delay in seconds. default unit is \"ms\" for milliseconds.\r\nping 'example.com' ... 1s\r\nping 'example.com' ... 2s\r\nping 'example.com' ... 1s\r\nping 'example.com' ... 1s\r\n\r\n>>> verbose_ping('example.com', ttl=5)  # set ttl to 5. default is 64.\r\nping 'example.com' ... timeout\r\nping 'example.com' ... timeout\r\nping 'example.com' ... timeout\r\nping 'example.com' ... timeout\r\n\r\n>>> verbose_ping('example.com', interval=5)  # wait 5 seconds between each packet. default is 0.\r\nping 'example.com' ... 215ms  # wait 5 secs\r\nping 'example.com' ... 216ms  # wait 5 secs\r\nping 'example.com' ... 219ms  # wait 5 secs\r\nping 'example.com' ... 217ms\r\n\r\n>>> verbose_ping('example.com', size=56)  # set icmp payload to 56 bytes. default size is 56.\r\nping 'example.com' ... 215ms\r\nping 'example.com' ... 216ms\r\nping 'example.com' ... 219ms\r\nping 'example.com' ... 217ms\r\n```\r\n\r\n### debug mode\r\n\r\nshow more info for developers.\r\n\r\n```python\r\n>>> import ping3\r\n>>> ping3.debug = true  # default is false.\r\n\r\n>>> ping3.ping(\"example.com\")  # \"ping()\" prints received ip header and icmp header.\r\n[debug] ip header: {'version': 69, 'tos': 0, 'len': 14336, 'id': 8620, 'flags': 0, 'ttl': 51, 'protocol': 1, 'checksum': *, 'src_addr': *, 'dest_addr': *}\r\n[debug] icmp header: {'type': 0, 'code': 0, 'checksum': 8890, 'id': 21952, 'seq': 0}\r\n0.215697261510079666\r\n\r\n>>> ping3.ping(\"example.com\", timeout=0.0001)\r\n[debug] request timeout for icmp packet. (timeout = 0.0001s)\r\nnone\r\n\r\n>>> ping3.ping(\"not.exist.com\")\r\n[debug] cannot resolve: unknown host. (host = not.exist.com)\r\nfalse\r\n\r\n>>> ping3.ping(\"example.com\", ttl=1)\r\n[debug] time exceeded: time to live expired.\r\nnone\r\n```\r\n\r\n### exceptions mode\r\n\r\nraise exceptions when there are errors instead of return none\r\n\r\n```python\r\n>>> import ping3\r\n>>> ping3.exceptions = true  # default is false.\r\n\r\n>>> ping3.ping(\"example.com\", timeout=0.0001)\r\n[... traceback ...]\r\nping3.errors.timeout: request timeout for icmp packet. (timeout = 0.0001s)\r\n\r\n>>> ping3.ping(\"not.exist.com\")\r\n[... traceback ...]\r\nping3.errors.hostunknown: cannot resolve: unknown host. (host = not.exist.com)\r\n\r\n>>> ping3.ping(\"example.com\", ttl=1)  # linux need root privilege to receive ttl expired. windows cannot get ttl expired.\r\n[... traceback ...]\r\nping3.errors.timetoliveexpired: time exceeded: time to live expired.\r\n\r\n>>> try:\r\n>>>     ping3.ping(\"example.com\", ttl=1)\r\n>>> except ping3.errors.timetoliveexpired as err:\r\n>>>     print(err.ip_header[\"src_addr\"])  # timetoliveexpired, destinationunreachable and destinationhostunreachable have ip_header and icmp_header attached.\r\n1.2.3.4  # ip address where the ttl happened.\r\n\r\n>>> help(ping3.errors)  # more info about exceptions.\r\n```\r\n\r\n```python\r\nimport ping3\r\nping3.exceptions = true\r\n\r\ntry:\r\n    ping3.ping(\"not.exist.com\")\r\nexcept ping3.errors.hostunknown:  # specific error is catched.\r\n    print(\"host unknown error raised.\")\r\nexcept ping3.errors.pingerror:  # all ping3 errors are subclasses of `pingerror`.\r\n    print(\"a ping error raised.\")\r\n```\r\n\r\n## command line execution\r\n\r\nexecute ping3 from command-line.\r\nnote: on some platforms, `ping3` needs root privilege to send/receive packets. you may want to use `sudo ping3`.\r\n\r\n```sh\r\n$ ping3 --help  # -h/--help. command-line help message.\r\n$ python -m ping3 --help  # same as `ping3`. `ping3` is an alias for `python -m ping3`.\r\n\r\n$ ping3 --version  # -v/--version. show ping3 version number.\r\n3.0.0\r\n\r\n$ ping3 example.com  # verbose ping.\r\nping 'example.com' ... 215ms\r\nping 'example.com' ... 216ms\r\nping 'example.com' ... 219ms\r\nping 'example.com' ... 217ms\r\n\r\n$ ping3 example.com 8.8.8.8  # verbose ping all the addresses.\r\nping 'example.com' ... 215ms\r\nping 'example.com' ... 216ms\r\nping 'example.com' ... 219ms\r\nping 'example.com' ... 217ms\r\nping '8.8.8.8' ... 5ms\r\nping '8.8.8.8' ... 2ms\r\nping '8.8.8.8' ... 6ms\r\nping '8.8.8.8' ... 5ms\r\n\r\n$ ping3 --count 1 example.com  # -c/--count. how many pings should be sent. default is 4.\r\nping 'example.com' ... 215ms\r\n\r\n$ ping3 --count 0 example.com  # ping endlessly (0 means infinite loops). using `ctrl + c` to stop manully.\r\nping 'example.com' ... 215ms\r\n...\r\n\r\n$ ping3 --timeout 10 example.com  # -t/--timeout. set timeout to 10 seconds. default is 4.\r\nping 'example.com' ... 215ms\r\nping 'example.com' ... 216ms\r\nping 'example.com' ... 219ms\r\nping 'example.com' ... 217ms\r\n\r\n$ ping3 --ttl 5 example.com  # -t/--ttl. # set ttl to 5. default is 64.\r\nping 'example.com' ... timeout\r\nping 'example.com' ... timeout\r\nping 'example.com' ... timeout\r\nping 'example.com' ... timeout\r\n\r\n$ ping3 --size 56 example.com  # -s/--size. set icmp packet payload to 56 bytes. default is 56.\r\nping 'example.com' ... 215ms\r\nping 'example.com' ... 216ms\r\nping 'example.com' ... 219ms\r\nping 'example.com' ... 217ms\r\n\r\n$ ping3 --interval 5 example.com  # -i/--interval. wait 5 seconds between each packet. default is 0.\r\nping 'example.com' ... 215ms  # wait 5 secs\r\nping 'example.com' ... 216ms  # wait 5 secs\r\nping 'example.com' ... 219ms  # wait 5 secs\r\nping 'example.com' ... 217ms\r\n\r\n$ ping3 --interface eth0 example.com  # -i/--interface. linux only. the gateway network interface to ping from. default is none.\r\nping 'example.com' ... 215ms\r\nping 'example.com' ... 216ms\r\nping 'example.com' ... 219ms\r\nping 'example.com' ... 217ms\r\n\r\n$ ping3 --src 192.168.1.15 example.com  # -s/--src. ping from source ip address for multiple network interfaces. default is none.\r\nping 'example.com' ... 215ms\r\nping 'example.com' ... 216ms\r\nping 'example.com' ... 219ms\r\nping 'example.com' ... 217ms\r\n\r\n$ ping3 --exceptions --timeout 0.001 example.com  # -e/--exceptions. excpetions mode is on when this shows up.\r\n[... traceback ...]\r\nping3.errors.timeout: request timeout for icmp packet. (timeout = 0.0001s)\r\n\r\n$ ping3 --debug --timeout 0.001 example.com  # -d/--debug. debug mode is on when this shows up.\r\n[debug] request timeout for icmp packet. (timeout = 0.001s)\r\nping 'example.com' ... timeout > 0.001s\r\n[debug] request timeout for icmp packet. (timeout = 0.001s)\r\nping 'example.com' ... timeout > 0.001s\r\n[debug] request timeout for icmp packet. (timeout = 0.001s)\r\nping 'example.com' ... timeout > 0.001s\r\n[debug] request timeout for icmp packet. (timeout = 0.001s)\r\nping 'example.com' ... timeout > 0.001s\r\n```\r\n",
  "docs_url": null,
  "keywords": "python3,ping,icmp,socket,tool",
  "license": "the mit license (mit)  copyright (c) 2016 kyan  permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"software\"), to deal in the software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the software, and to permit persons to whom the software is furnished to do so, subject to the following conditions:  the above copyright notice and this permission notice shall be included in all copies or substantial portions of the software.  the software is provided \"as is\", without warranty of any kind, express or implied, including but not limited to the warranties of merchantability, fitness for a particular purpose and noninfringement. in no event shall the authors or copyright holders be liable for any claim, damages or other liability, whether in an action of contract, tort or otherwise, arising from, out of or in connection with the software or the use or other dealings in the software. ",
  "name": "ping3",
  "package_url": "https://pypi.org/project/ping3/",
  "project_url": "https://pypi.org/project/ping3/",
  "project_urls": {
    "Changelog": "https://github.com/kyan001/ping3/blob/master/CHANGELOG.md",
    "Homepage": "https://github.com/kyan001/ping3",
    "Issue Tracker": "https://github.com/kyan001/ping3/issues",
    "Source Code": "https://github.com/kyan001/ping3"
  },
  "release_url": "https://pypi.org/project/ping3/4.0.4/",
  "requires_dist": [
    "build ; extra == 'dev'",
    "wheel ; extra == 'dev'",
    "pycodestyle ; extra == 'dev'"
  ],
  "requires_python": ">=3",
  "summary": "a pure python3 version of icmp ping implementation using raw socket.",
  "version": "4.0.4",
  "releases": [],
  "developers": [
    "kai@kyan001.com"
  ],
  "kwds": "ping3 pingerror verbose_ping ping icmp",
  "license_kwds": "copyright mit license liable liability",
  "libtype": "pypi",
  "id": "pypi_ping3",
  "homepage": "",
  "release_count": 41,
  "dependency_ids": [
    "pypi_build",
    "pypi_pycodestyle",
    "pypi_wheel"
  ]
}
{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "natural language :: english",
    "operating system :: macos",
    "operating system :: microsoft",
    "operating system :: posix :: linux",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.6",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: education",
    "topic :: software development :: libraries :: python modules",
    "topic :: system :: monitoring",
    "typing :: typed"
  ],
  "description": "[![python timer functions: three ways to monitor your code](https://files.realpython.com/media/three-ways-to-time-your-code_watermarked.8d561fcc7a35.jpg)](https://realpython.com/python-timer)\n\n# `codetiming` - a flexible, customizable timer for your python code\n\n[![latest version](https://img.shields.io/pypi/v/codetiming)](https://pypi.org/project/codetiming/)\n[![python versions](https://img.shields.io/pypi/pyversions/codetiming)](https://pypi.org/project/codetiming/)\n[![downloads](https://img.shields.io/pypi/dd/codetiming)](https://pypi.org/project/codetiming/)\n[![tests](https://img.shields.io/github/workflow/status/realpython/codetiming/unit_tests?label=tests)](https://github.com/realpython/codetiming/actions)\n[![checked with mypy](http://www.mypy-lang.org/static/mypy_badge.svg)](http://mypy-lang.org/)\n[![interrogate docstrings](https://raw.githubusercontent.com/realpython/codetiming/main/interrogate_badge.svg)](https://interrogate.readthedocs.io/)\n[![code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)\n[![mit license](https://img.shields.io/pypi/l/codetiming)](https://mit-license.org/)\n\ninstall `codetiming` from pypi:\n\n```\n$ python -m pip install codetiming\n```\n\nthe source code is [available on github](https://github.com/realpython/codetiming).\n\nfor a complete tutorial on `codetiming`, see [python timer functions: three ways to monitor your code](https://realpython.com/python-timer) on [real python](https://realpython.com/).\n\n## basic usage\n\nyou can use `codetiming.timer` in several different ways:\n\n1. as a **class**:\n\n    ```python\n    t = timer(name=\"class\")\n    t.start()\n    # do something\n    t.stop()\n    ```\n\n2. as a **context manager**:\n\n    ```python\n    with timer(name=\"context manager\"):\n        # do something\n    ```\n\n3. as a **decorator**:\n\n    ```python\n    @timer(name=\"decorator\")\n    def stuff():\n        # do something\n    ```\n\n\n## arguments\n\n`timer` accepts the following arguments when it's created. all arguments are optional:\n\n- **`name`:** an optional name for your timer\n- **`text`:** the text that's shown when your timer ends. it should contain a `{}` placeholder that will be filled by the elapsed time in seconds (default: `\"elapsed time: {:.4f} seconds\"`)\n- **`initial_text`:** show text when your timer starts. you may provide the string to be logged or `true` to show the default text `\"timer {name} started\"` (default: `false`)\n- **`logger`:** a function/callable that takes a string argument and will report the elapsed time when the logger is stopped (default: `print()`)\n\nyou can turn off explicit reporting of the elapsed time by setting `logger=none`.\n\nin the template text, you can also use explicit attributes to refer to the `name` of the timer or log the elapsed time in `milliseconds`, `seconds` (the default), or `minutes`. for example:\n\n```python\nt1 = timer(name=\"namedtimer\", text=\"{name}: {minutes:.1f} minutes\")\nt2 = timer(text=\"elapsed time: {milliseconds:.0f} ms\")\n```\n\nnote that the strings used by `text` are **not** f-strings. instead, they are used as templates that will be populated using `.format()` behind the scenes. if you want to combine the `text` template with an f-string, you need to use double braces for the template values:\n\n```python\nt = timer(text=f\"{__file__}: {{:.4f}}\")\n```\n\n`text` is also allowed to be a callable like a function or a class. if `text` is a callable, it is expected to require one argument: the number of seconds elapsed. it should return a text string that will be logged using logger:\n\n```python\nt = timer(text=lambda secs: f\"{secs / 86400:.0f} days\")\n```\n\nthis allows you to use third-party libraries like [`humanfriendly`](https://pypi.org/project/humanfriendly/) to do the text formatting:\n\n```python\nfrom humanfriendly import format_timespan\n\nt1 = timer(text=format_timespan)\nt2 = timer(text=lambda secs: f\"elapsed time: {format_timespan(secs)}\")\n```\n\nyou may include a text that should be logged when the timer starts by setting `initial_text`:\n\n```python\nt = timer(initial_text=\"and so it begins ...\")\n```\n\nyou can also set `initial_text=true` to use a default initial text.\n\n\n## capturing the elapsed time\n\nwhen using `timer` as a class, you can capture the elapsed time when calling `.stop()`:\n\n```python\nelapsed_time = t.stop()\n```\n\nyou can also find the last measured elapsed time in the `.last` attribute. the following code will have the same effect as the previous example:\n\n```python\nt.stop()\nelapsed_time = t.last\n```\n\n\n## named timers\n\nnamed timers are made available in the class dictionary `timer.timers`. the elapsed time will accumulate if the same name or same timer is used several times. consider the following example:\n\n```pycon\n>>> import logging\n>>> from codetiming import timer\n\n>>> t = timer(\"example\", text=\"time spent: {:.2f}\", logger=logging.warning)\n\n>>> t.start()\n>>> t.stop()\nwarning:root:time spent: 3.58\n3.5836678670002584\n\n>>> with t:\n...     _ = list(range(100_000_000))\n... \nwarning:root:time spent: 1.73\n\n>>> timer.timers\n{'example': 5.312697440000193}\n```\n\nthe example shows how you can redirect the timer output to the logging module. note that the elapsed time spent in the two different uses of `t` has been accumulated in `timer.timers`.\n\nyou can also get simple statistics about your named timers. continuing from the example above:\n\n```pycon\n>>> timer.timers.max(\"example\")\n3.5836678670002584\n\n>>> timer.timers.mean(\"example\")\n2.6563487200000964\n\n>>> timer.timers.stdev(\"example\")\n1.311427314335879\n```\n\n`timers` support `.count()`, `.total()`, `.min()`, `.max()`, `.mean()`, `.median()`, and `.stdev()`.\n\n\n## acknowledgments\n\n`codetiming` is based on a similar module initially developed for the [midgard geodesy library](https://kartverket.github.io/midgard/) at the [norwegian mapping authority](https://www.kartverket.no/en/).",
  "docs_url": null,
  "keywords": "timer,class,contextmanager,decorator",
  "license": "",
  "name": "codetiming",
  "package_url": "https://pypi.org/project/codetiming/",
  "project_url": "https://pypi.org/project/codetiming/",
  "project_urls": {
    "Homepage": "https://realpython.com/python-timer",
    "Source Code": "https://github.com/realpython/codetiming",
    "Tutorial": "https://realpython.com/python-timer"
  },
  "release_url": "https://pypi.org/project/codetiming/1.4.0/",
  "requires_dist": [
    "dataclasses; python_version < '3.7'",
    "black ; extra == \"dev\"",
    "bump2version ; extra == \"dev\"",
    "flake8 ; extra == \"dev\"",
    "flit ; extra == \"dev\"",
    "interrogate ; extra == \"dev\"",
    "isort ; extra == \"dev\"",
    "mypy ; extra == \"dev\"",
    "black ; extra == \"test\"",
    "interrogate ; extra == \"test\"",
    "pytest ; extra == \"test\"",
    "pytest-cov ; extra == \"test\"",
    "tox ; extra == \"test\""
  ],
  "requires_python": ">=3.6",
  "summary": "a flexible, customizable timer for your python code.",
  "version": "1.4.0",
  "releases": [],
  "developers": [
    "geirarne@gmail.com",
    "info@realpython.com"
  ],
  "kwds": "pycon timers timer codetiming pypi",
  "license_kwds": "",
  "libtype": "pypi",
  "id": "pypi_codetiming",
  "homepage": "",
  "release_count": 10,
  "dependency_ids": [
    "pypi_black",
    "pypi_bump2version",
    "pypi_dataclasses",
    "pypi_flake8",
    "pypi_flit",
    "pypi_interrogate",
    "pypi_isort",
    "pypi_mypy",
    "pypi_pytest",
    "pypi_pytest_cov",
    "pypi_tox"
  ]
}
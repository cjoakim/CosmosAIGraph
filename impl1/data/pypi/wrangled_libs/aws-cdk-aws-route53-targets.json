{
  "classifiers": [
    "development status :: 7 - inactive",
    "framework :: aws cdk",
    "framework :: aws cdk :: 1",
    "intended audience :: developers",
    "license :: osi approved",
    "operating system :: os independent",
    "programming language :: javascript",
    "programming language :: python :: 3 :: only",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "typing :: typed"
  ],
  "description": "# route53 alias record targets for the cdk route53 library\n\n<!--begin stability banner-->---\n\n\n![end-of-support](https://img.shields.io/badge/end--of--support-critical.svg?style=for-the-badge)\n\n> aws cdk v1 has reached end-of-support on 2023-06-01.\n> this package is no longer being updated, and users should migrate to aws cdk v2.\n>\n> for more information on how to migrate, see the [*migrating to aws cdk v2* guide](https://docs.aws.amazon.com/cdk/v2/guide/migrating-v2.html).\n\n---\n<!--end stability banner-->\n\nthis library contains route53 alias record targets for:\n\n* api gateway custom domains\n\n  ```python\n  import aws_cdk.aws_apigateway as apigw\n\n  # zone: route53.hostedzone\n  # rest_api: apigw.lambdarestapi\n\n\n  route53.arecord(self, \"aliasrecord\",\n      zone=zone,\n      target=route53.recordtarget.from_alias(targets.apigateway(rest_api))\n  )\n  ```\n* api gateway v2 custom domains\n\n  ```python\n  import aws_cdk.aws_apigatewayv2 as apigwv2\n\n  # zone: route53.hostedzone\n  # domain_name: apigwv2.domainname\n\n\n  route53.arecord(self, \"aliasrecord\",\n      zone=zone,\n      target=route53.recordtarget.from_alias(targets.apigatewayv2domainproperties(domain_name.regional_domain_name, domain_name.regional_hosted_zone_id))\n  )\n  ```\n* cloudfront distributions\n\n  ```python\n  import aws_cdk.aws_cloudfront as cloudfront\n\n  # zone: route53.hostedzone\n  # distribution: cloudfront.cloudfrontwebdistribution\n\n\n  route53.arecord(self, \"aliasrecord\",\n      zone=zone,\n      target=route53.recordtarget.from_alias(targets.cloudfronttarget(distribution))\n  )\n  ```\n* elbv2 load balancers\n\n  ```python\n  import aws_cdk.aws_elasticloadbalancingv2 as elbv2\n\n  # zone: route53.hostedzone\n  # lb: elbv2.applicationloadbalancer\n\n\n  route53.arecord(self, \"aliasrecord\",\n      zone=zone,\n      target=route53.recordtarget.from_alias(targets.loadbalancertarget(lb))\n  )\n  ```\n* classic load balancers\n\n  ```python\n  import aws_cdk.aws_elasticloadbalancing as elb\n\n  # zone: route53.hostedzone\n  # lb: elb.loadbalancer\n\n\n  route53.arecord(self, \"aliasrecord\",\n      zone=zone,\n      target=route53.recordtarget.from_alias(targets.classicloadbalancertarget(lb))\n  )\n  ```\n\n**important:** based on [aws documentation](https://aws.amazon.com/de/premiumsupport/knowledge-center/alias-resource-record-set-route53-cli/), all alias record in route 53 that points to a elastic load balancer will always include *dualstack* for the dnsname to resolve ipv4/ipv6 addresses (without *dualstack* ipv6 will not resolve).\n\nfor example, if the amazon-provided dns for the load balancer is `alb-xxxxxxx.us-west-2.elb.amazonaws.com`, cdk will create alias target in route 53 will be `dualstack.alb-xxxxxxx.us-west-2.elb.amazonaws.com`.\n\n* globalaccelerator\n\n  ```python\n  import aws_cdk.aws_globalaccelerator as globalaccelerator\n\n  # zone: route53.hostedzone\n  # accelerator: globalaccelerator.accelerator\n\n\n  route53.arecord(self, \"aliasrecord\",\n      zone=zone,\n      target=route53.recordtarget.from_alias(targets.globalacceleratortarget(accelerator))\n  )\n  ```\n\n**important:** if you use globalacceleratordomaintarget, passing a string rather than an instance of iaccelerator, ensure that the string is a valid domain name of an existing global accelerator instance.\nsee [the documentation on dns addressing](https://docs.aws.amazon.com/global-accelerator/latest/dg/dns-addressing-custom-domains.dns-addressing.html) with global accelerator for more info.\n\n* interfacevpcendpoints\n\n**important:** based on the cfn docs for vpcendpoints - [see here](https://docs.aws.amazon.com/awscloudformation/latest/userguide/aws-resource-ec2-vpcendpoint.html#aws-resource-ec2-vpcendpoint-return-values) - the attributes returned for dnsentries in cloudformation is a combination of the hosted zone id and the dns name. the entries are ordered as follows: regional public dns, zonal public dns, private dns, and wildcard dns. this order is not enforced for aws marketplace services, and therefore this cdk construct is only guaranteed to work with non-marketplace services.\n\n```python\nimport aws_cdk.aws_ec2 as ec2\n\n# zone: route53.hostedzone\n# interface_vpc_endpoint: ec2.interfacevpcendpoint\n\n\nroute53.arecord(self, \"aliasrecord\",\n    zone=zone,\n    target=route53.recordtarget.from_alias(targets.interfacevpcendpointtarget(interface_vpc_endpoint))\n)\n```\n\n* s3 bucket website:\n\n**important:** the bucket name must strictly match the full dns name.\nsee [the developer guide](https://docs.aws.amazon.com/route53/latest/developerguide/getting-started.html) for more info.\n\n```python\nimport aws_cdk.aws_s3 as s3\n\n\nrecord_name = \"www\"\ndomain_name = \"example.com\"\n\nbucket_website = s3.bucket(self, \"bucketwebsite\",\n    bucket_name=[record_name, domain_name].join(\".\"),  # www.example.com\n    public_read_access=true,\n    website_index_document=\"index.html\"\n)\n\nzone = route53.hostedzone.from_lookup(self, \"zone\", domain_name=domain_name) # example.com\n\nroute53.arecord(self, \"aliasrecord\",\n    zone=zone,\n    record_name=record_name,  # www\n    target=route53.recordtarget.from_alias(targets.bucketwebsitetarget(bucket_website))\n)\n```\n\n* user pool domain\n\n  ```python\n  import aws_cdk.aws_cognito as cognito\n\n  # zone: route53.hostedzone\n  # domain: cognito.userpooldomain\n\n  route53.arecord(self, \"aliasrecord\",\n      zone=zone,\n      target=route53.recordtarget.from_alias(targets.userpooldomaintarget(domain))\n  )\n  ```\n* route 53 record\n\n  ```python\n  # zone: route53.hostedzone\n  # record: route53.arecord\n\n  route53.arecord(self, \"aliasrecord\",\n      zone=zone,\n      target=route53.recordtarget.from_alias(targets.route53recordtarget(record))\n  )\n  ```\n* elastic beanstalk environment:\n\n**important:** only supports elastic beanstalk environments created after 2016 that have a regional endpoint.\n\n```python\n# zone: route53.hostedzone\n# ebs_environment_url: str\n\n\nroute53.arecord(self, \"aliasrecord\",\n    zone=zone,\n    target=route53.recordtarget.from_alias(targets.elasticbeanstalkenvironmentendpointtarget(ebs_environment_url))\n)\n```\n\nsee the documentation of `@aws-cdk/aws-route53` for more information.\n",
  "docs_url": null,
  "keywords": "",
  "license": "apache-2.0",
  "name": "aws-cdk.aws-route53-targets",
  "package_url": "https://pypi.org/project/aws-cdk.aws-route53-targets/",
  "project_url": "https://pypi.org/project/aws-cdk.aws-route53-targets/",
  "project_urls": {
    "Homepage": "https://github.com/aws/aws-cdk",
    "Source": "https://github.com/aws/aws-cdk.git"
  },
  "release_url": "https://pypi.org/project/aws-cdk.aws-route53-targets/1.204.0/",
  "requires_dist": [
    "aws-cdk.aws-apigateway (==1.204.0)",
    "aws-cdk.aws-cloudfront (==1.204.0)",
    "aws-cdk.aws-cognito (==1.204.0)",
    "aws-cdk.aws-ec2 (==1.204.0)",
    "aws-cdk.aws-elasticloadbalancing (==1.204.0)",
    "aws-cdk.aws-elasticloadbalancingv2 (==1.204.0)",
    "aws-cdk.aws-globalaccelerator (==1.204.0)",
    "aws-cdk.aws-iam (==1.204.0)",
    "aws-cdk.aws-route53 (==1.204.0)",
    "aws-cdk.aws-s3 (==1.204.0)",
    "aws-cdk.core (==1.204.0)",
    "aws-cdk.region-info (==1.204.0)",
    "constructs (<4.0.0,>=3.3.69)",
    "jsii (<2.0.0,>=1.84.0)",
    "publication (>=0.0.3)",
    "typeguard (~=2.13.3)"
  ],
  "requires_python": "~=3.7",
  "summary": "the cdk construct library for aws route53 alias targets",
  "version": "1.204.0",
  "releases": [],
  "developers": [
    "amazon_web_services"
  ],
  "kwds": "aws_cdk aws_apigatewayv2 aws_apigateway route53recordtarget route53",
  "license_kwds": "apache-2.0",
  "libtype": "pypi",
  "id": "pypi_aws_cdk.aws_route53_targets",
  "homepage": "https://github.com/aws/aws-cdk",
  "release_count": 253,
  "dependency_ids": [
    "pypi_aws_cdk.aws_apigateway",
    "pypi_aws_cdk.aws_cloudfront",
    "pypi_aws_cdk.aws_cognito",
    "pypi_aws_cdk.aws_ec2",
    "pypi_aws_cdk.aws_elasticloadbalancing",
    "pypi_aws_cdk.aws_elasticloadbalancingv2",
    "pypi_aws_cdk.aws_globalaccelerator",
    "pypi_aws_cdk.aws_iam",
    "pypi_aws_cdk.aws_route53",
    "pypi_aws_cdk.aws_s3",
    "pypi_aws_cdk.core",
    "pypi_aws_cdk.region_info",
    "pypi_constructs",
    "pypi_jsii",
    "pypi_publication",
    "pypi_typeguard"
  ]
}
{
  "classifiers": [
    "license :: osi approved :: mit license",
    "programming language :: python :: 3"
  ],
  "description": "ytmusicapi: unofficial api for youtube music\n############################################\n\n.. image:: https://img.shields.io/pypi/dm/ytmusicapi?style=flat-square\n    :alt: pypi downloads\n    :target: https://pypi.org/project/ytmusicapi/\n\n.. image:: https://badges.gitter.im/sigma67/ytmusicapi.svg\n   :alt: ask questions at https://gitter.im/sigma67/ytmusicapi\n   :target: https://gitter.im/sigma67/ytmusicapi\n\n.. image:: https://img.shields.io/codecov/c/github/sigma67/ytmusicapi?style=flat-square\n    :alt: code coverage\n    :target: https://codecov.io/gh/sigma67/ytmusicapi\n\n.. image:: https://img.shields.io/github/v/release/sigma67/ytmusicapi?style=flat-square\n    :alt: latest release\n    :target: https://github.com/sigma67/ytmusicapi/releases/latest\n\n.. image:: https://img.shields.io/github/commits-since/sigma67/ytmusicapi/latest?style=flat-square\n    :alt: commits since latest release\n    :target: https://github.com/sigma67/ytmusicapi/commits\n\n\nytmusicapi is a python 3 library to send requests to the youtube music api.\nit emulates youtube music web client requests using the user's cookie data for authentication.\n\n.. features\n\nfeatures\n--------\n\n| **browsing**:\n\n* search (including all filters) and suggestions\n* get artist information and releases (songs, videos, albums, singles, related artists)\n* get user information (videos, playlists)\n* get albums\n* get song metadata\n* get watch playlists (next songs when you press play/radio/shuffle in youtube music)\n* get song lyrics\n\n| **exploring music**:\n\n* get moods and genres playlists\n* get latest charts (globally and per country)\n\n| **library management**:\n\n* get library contents: playlists, songs, artists, albums and subscriptions\n* add/remove library content: rate songs, albums and playlists, subscribe/unsubscribe artists\n* get and modify play history\n\n| **playlists**:\n\n* create and delete playlists\n* modify playlists: edit metadata, add/move/remove tracks\n* get playlist contents\n* get playlist suggestions\n\n| **uploads**:\n\n* upload songs and remove them again\n* list uploaded songs, artists and albums\n\n| **localization**:\n\n* all regions are supported (see `locations faq <https://ytmusicapi.readthedocs.io/en/stable/faq.html#which-values-can-i-use-for-locations>`__\n* 16 languages are supported (see `languages faq <https://ytmusicapi.readthedocs.io/en/stable/faq.html#which-values-can-i-use-for-languages>`__\n\n\nif you find something missing or broken,\ncheck the `faq <https://ytmusicapi.readthedocs.io/en/stable/faq.html>`__ or\nfeel free to create an `issue <https://github.com/sigma67/ytmusicapi/issues/new/choose>`__.\n\n\nusage\n------\n.. code-block:: python\n\n    from ytmusicapi import ytmusic\n\n    yt = ytmusic('oauth.json')\n    playlistid = yt.create_playlist('test', 'test description')\n    search_results = yt.search('oasis wonderwall')\n    yt.add_playlist_items(playlistid, [search_results[0]['videoid']])\n\nthe `tests <https://github.com/sigma67/ytmusicapi/blob/master/tests/test.py>`_ are also a great source of usage examples.\n\n.. end-features\n\nrequirements\n==============\n\n- python 3.8 or higher - https://www.python.org\n\nsetup and usage\n===============\n\nsee the `documentation <https://ytmusicapi.readthedocs.io/en/latest/usage.html>`_ for detailed instructions\n\ncontributing\n==============\n\npull requests are welcome. there are still some features that are not yet implemented.\nplease, refer to `contributing.rst <https://github.com/sigma67/ytmusicapi/blob/master/contributing.rst>`_ for guidance.\n",
  "docs_url": null,
  "keywords": "",
  "license": "mit license  copyright (c) 2020 sigma67  permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"software\"), to deal in the software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the software, and to permit persons to whom the software is furnished to do so, subject to the following conditions:  the above copyright notice and this permission notice shall be included in all copies or substantial portions of the software.  the software is provided \"as is\", without warranty of any kind, express or implied, including but not limited to the warranties of merchantability, fitness for a particular purpose and noninfringement. in no event shall the authors or copyright holders be liable for any claim, damages or other liability, whether in an action of contract, tort or otherwise, arising from, out of or in connection with the software or the use or other dealings in the software. ",
  "name": "ytmusicapi",
  "package_url": "https://pypi.org/project/ytmusicapi/",
  "project_url": "https://pypi.org/project/ytmusicapi/",
  "project_urls": {
    "documentation": "https://ytmusicapi.readthedocs.io",
    "homepage": "https://github.com/sigma67/ytmusicapi",
    "repository": "https://github.com/sigma67/ytmusicapi"
  },
  "release_url": "https://pypi.org/project/ytmusicapi/1.3.2/",
  "requires_dist": [
    "requests >=2.22",
    "pre-commit ; extra == 'dev'",
    "flake8 ; extra == 'dev'",
    "yapf ; extra == 'dev'",
    "coverage ; extra == 'dev'",
    "sphinx ; extra == 'dev'",
    "sphinx-rtd-theme ; extra == 'dev'"
  ],
  "requires_python": ">=3.8",
  "summary": "unofficial api for youtube music",
  "version": "1.3.2",
  "releases": [],
  "developers": [
    "ytmusicapi@gmail.com"
  ],
  "kwds": "ytmusicapi videoid ytmusic youtube playlist",
  "license_kwds": "copyright license liable liability mit",
  "libtype": "pypi",
  "id": "pypi_ytmusicapi",
  "homepage": "",
  "release_count": 60,
  "dependency_ids": [
    "pypi_coverage",
    "pypi_flake8",
    "pypi_pre_commit",
    "pypi_requests",
    "pypi_sphinx",
    "pypi_sphinx_rtd_theme",
    "pypi_yapf"
  ]
}
{
  "classifiers": [
    "license :: osi approved :: mit license",
    "operating system :: os independent",
    "programming language :: python",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.5",
    "programming language :: python :: 3.6",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: multimedia :: graphics",
    "topic :: software development :: libraries :: python modules"
  ],
  "description": "# readme for pypng\n\ndrj@pobox.com\n\n\n# introduction\n\npng module for python. pypng is written entirely in python.\n\n- pypng home page: https://gitlab.com/drj11/pypng/\n- pypng documentation: https://pypng.readthedocs.io/en/latest/\n- pypng mailing list: https://groups.google.com/forum/#!forum/pypng-users\n\n\n## quick start\n\n    import png\n    png.from_array([[255, 0, 0, 255],\n                    [0, 255, 255, 0]], 'l').save(\"small_smiley.png\")\n\nafter that, try `import png` then `help(png)`.\nalso, lickable html documentation appears in the `html/` directory.\nif html is no good then you could try the rest sources\nin the `man/` directory.\n\n\n## installation\n\npypng is pure python and has no dependencies.\nit requires python 3.5 or any compatible higher version.\n\nto install pypng package via pip use:\n\n    python -m pip install git+https://gitlab.com/drj11/pypng@pypng-0.20220715.0\n\nafter install use\n\n    `import png`\n\nto access the `png` module in your python program.\n\nyou can also install from source using `setuptools`.\npypng uses `setup.cfg` and `pyproject.toml` to record its\nconfiguration.\n\nto install from (version controlled) sources using a suitable\nversion of `pip`:\n\n`cd` into the directory and execute the command:\n\n    python -m pip install .\n\npypng is so simple, that you don't need installation tools.\nyou can copy `code/png.py` wherever you like.\nit's intended that you can copy `png.py` into\nyour application and distribute it.\nthe following `curl` command should copy the latest version into\nyour current directory:\n\n    curl -lo https://gitlab.com/drj11/pypng/-/raw/main/code/png.py\n\n\n## release notes\n\n(for issues see https://gitlab.com/drj11/pypng/-/issues/ )\n\n\n### release (the next)\n\n### release 0.20220715.0\n\ndevelopment moved to gitlab: https://gitlab.com/drj11/pypng\n\nif you pass an empty file to pypng\nit now raises the builtin python exception `eoferror`.\nthis should make it easier to diagnose _empty file_ problems separately\nfrom genuine format errors\n(which use `png.formaterror`).\nthis is a slightly breaking change to the api.\n\nnew `prirowpng` tool to join png images in a row left-to-right\n(old internal `pipcat` tool).\n\nnew `pricolpng` tool to join png images in a column top-to-bottom.\n\nsupport for plain pgm files (magic number p2) added to `pripamtopng`.\n\nnew `priplan9topng` tool to convert from plan 9 image format to png.\nin reality this has been lurking in the codebase for years, but\nhas recently been converted to python 3.\nthe author has only a limited collection of plan 9 images,\nwhich limits the testing that can be done.\nthe author welcomes bug reports for plan 9 images.\n\nthe `priplan9topng` tool has an even more experimental option\n`--font` which converts plan 9 subfont files to a sequence of\npng files.\n\n\n### release 0.0.21\n\nsupport for python 2 is dropped.\npython 3.5 and onwards are supported.\nsome of the ancillary tools are modified to work on python 3.\n\ninstalls via wheel files.\n\n`prichunkpng` command line tool now has some new options to add\nchunks:\n- `--iccprofile` to add a `iccp` chunk (icc profile);\n- `--physical` to add a `phys` chunk,\n  specifying the intended pixel size;\n- `--sigbit` to add a `sbit` chunk,\n  specifying the encoded significant bits;\n- `--transparent` to add a `trns` chunk,\n  specifying the transparent colour.\n\n`priditherpng` command line tool standardised and\nconverted to python 3.\n\n`pripngtopam` tool now has a `--plain` option to output plain pgm\nand ppm formats. the `topam` part of the name is a bit of a\nmisnomer: when possible (l and rgb png files) the tool will\noutput either a pgm (grey) or a ppm (rgb) file. essentially all\ntools that can process a pam file can also process a pgm or a\nppm file. pam files cannot be _plain_ so using the option\nwill raise an error in the case where a true pam file is\nwritten.\n\nbetter error messages when you write the wrong number of rows.\n\n(slightly experimentally) running the `png` module as a command\nline tool, with `python -m png`, will report the version and\nfile location of the `png` module.\n\n\n### release 0.0.20\n\nsupport for earlier versions of python is dropped.\npython 3.4 and onwards are supported.\npython 2.7 also works, but this is the last\nrelease to support any version of python 2.\n\ncython code is removed, which simplifies the implementation.\n\nremoved the (optional) dependency `setuptools`.\n\nchanged the default for `png.writer` to be greyscale.\n\nremoved 3d support from `.from_array()`.\n\n\n### release 0.0.19\n\nsupport for earlier versions of python is dropped in order to\nsimplify the code.\nfrom the python 3.x series all versions from 3.2 onward are supported.\nfrom the 2.x series only python 2.6 and 2.7 are supported.\n\ncode cleaned.\ntests renamed and more organised.\ngenerally flake 8 compliant.\nfewer special cases for ancient versions of python.\n\nthe row length is checked when writing png files.\npreviously it was possible to write badly formed png files\nby passing in rows of the wrong length.\n\n`phys` chunk is now processed.\n\nthe `writer()` interface now supports source pixels\nthat have a different bitdepth for each channel.\nto exploit this, pass in a tuple for the bitdepth argument.\n\nancillary tools regularised and simplified.\n\n`pripamtopng` command line tool converts netpbm pnm/pam files to png.\npreviously `png.py` did this.\nnote that only one input file is converted,\nif you have intensity and opacity in separate files,\nyou have two options:\neither use `pamstack` to convert them into a single pam file and\nconvert that, or\nconvert each file to png, then use `priweavepng` to weave them together.\nboth will work.\n\n`pripngtopam` command line tool converts png to netpbm pnm/pam file.\npreviously `png.py` did this.\n\n`python -m pngsuite` is now a command line tool to\nwrite various images from the png suite of test images.\npreviously this was possible using `gen`.\n\n`priweavepng` command line tool performs channel extraction across\nmultiple images.\nthis is a more general version of `pipstack` (which has been removed),\nand is inspired by `pamstack` from netpbm.\n\nthe `--interlace` option available on many previous tools is\nnow only available on `priweavepng`,\nmaking it the preferred tool for generating interlaced pngs.\n\n`prichunkpng` command line tool adds and deletes chunks and\n\"intelligently\" knows about transparent, gamma, background chunks.\nit is the preferred tool for adding those chunks,\nwhich was previously possible using various options of other tools.\n\n`gen` has been renamed to `priforgepng`.\n\n`priforgepng` uses centre pixel sampling, which means that a 256 pixel\nwide 8-bit gradient takes on all possible 256 values.\nit also improves output for very small images.\n\n`priforgepng` uses `fraction` for internal maths meaning that\nthe stripe patterns are accurate and do not have loose pixels.\n\n`priforgepng` only outputs greyscale png files\n(but see next item for a feature to generate colour pngs).\n\n`priforgepng` can output multiple pngs onto the same stream.\nthis aligns well with a feature of `priweavepng` which\naccepts multiple pngs from stdin.\nla, rgb, and rgba test images can be generated by\npiping `priforgepng` into `priweavepng`:\n`priforgepng rtl rtr rbr | priweavepng - - -`\nwill generate an rgb png.\n\n\n### release 0.0.18\n\nthanks to `github.com/sean-duffy`,\n`.from_array()` can now take a 3d array.\n\nconverting to pnms was broken in python 3; this is now fixed.\nissue 26: https://gitlab.com/drj11/pypng/-/issues/26\n\n\n### release 0.0.17\n\nvarious fixes when running on python 3 and windows.\nmerging pull requests from `github.com/ironfroggy` and\n`github.com/techtonik`,\nand merging by hand a commit from `github.com/scondo`.\n\n\n### release 0.0.16\n\ncompatible with nose: `nosetests png.py` now works.\n\nallow any \"file-like\" object as an input.\n\nhandle newlines in `texttopng`.\n\n\n### release 0.0.15\n\nfixed various urls to point at github.com instead of googlecode.\n\n\n### release 0.0.14\n\nwhen using `png.py` as a command line tool,\nit can now produce non-square test images.\n\npypng now installs \"out of the box\" on python 3 on a plain install\n(previously `distribute` or `pip` was required).\n\npypng welcomes the following community contributions:\n\n  joaqu\u00edn cuenca abela speeds up png reading when cython is available.\n\n  josh bleecher snyder adds a lenient mode\n  which has relaxed checksum checking.\n\n  nathan@dunfield.info fixed a problem writing files\n  when using the command line tool on windows (issue 62).\n\nthe following issues have been fixed:\n\n  on github:\n\n  issue 6: palette processing is annoying\n\n  on googlecode:\n\n  issue 62: problem writing png files on windows\n\ndevelopment has moved from googlecode to github.\nall issues below here, and the one immediately above,\nare from the googlecode issue tracker.\nall newer issue should be on github.\n\n\n### release 0.0.13\n\npypng now installs \"out of the box\" on python 3.\nthanks to simon.sapin@kozea.fr and nathan@dunfield.info for the patch.\n\nthe following issues have been fixed:\n\n  issue 63: setup.py does not use 2to3\n  issue 64: typo in documentation\n\n\n### release 0.0.12\n\npypng now works on python 3 if you use the `2to3` tool.\nfix for converting grey images to rgba.\n\nthe following issues have been fixed:\n\n  issue 60: greyscale images not properly being converted to rgba\n  issue 61: doesn't work on python 3\n\n\n### release 0.0.11\n\nadded the \"how fast is pypng\" section to the documentation.\nchanged it so that more png formats return their rows as\npython `array.array` instances.\n\n\n### release 0.0.10\n\nfix for read_flat method (broken for ages).\n\nthe following issues have been fixed:\n\n  issue 56:  read_flat broken\n\n\n### release 0.0.9\n\ntentative fix for a deprecation warning on 64-bit python 2.5 systems.\nconversion tool for plan 9 images.\n\nissue 54 (below) is tentative.\nthe pypng developers have been unable to reproduce the error\n(as it seems to be on 64-bit python 2.5 systems);\nany user reports would be most welcome.\n\nthe following issues have been fixed:\n\n  issue 54:  deprecation warnings when using pypng.\n  issue 55:  cannot convert plan 9 images.\n\n\n### release 0.0.8\n\nmostly more robust to dodgy input pngs,\nas a result of testing with `brokensuite`.\none fixed bug was a critical:\nan infinite loop for a least one input (issue 52 below).\n\nthe following issues have been fixed:\n\n  issue 47:  leading blanks when using write_packed.\n  issue 48:  pipdither fails when input has no gamma chunk.\n  issue 49:  pipdither fail with 1-bit input.\n  issue 50:  pipchunk adds second gamma chunk.\n  issue 51:  piprgb and pipasgrey fail for color mapped images.\n  issue 52:  some inputs cause infinite loop.\n\n\n### release 0.0.7\n\nbetter documentation (in `html/ex.html` mostly) for numpy integration.\n\nthe following issues have been fixed:\n\n  issue 46:  unclear how to get png pixel data into and out of numpy.\n\n\n### release 0.0.6\n\nnumpy integer types now work.\n\nthe following issues have been fixed:\n\n  issue 44:  cannot use numpy.uint16 for pixel values.\n\n\n### release 0.0.5\n\n`sbit` chunks are now handled,\nmeaning that pypng can handle any (single) bit depth from 1 to 16\nfrom end to end.\n\nthe following issues have been fixed:\n\n  issue 28:  does not add sbit chunk.\n  issue 36:  ignores sbit chunk when present.\n\n\n### release 0.0.4\n\npypng now works on python 2.2\n(significant for symbian users as pys60 is based on python 2.2).\nnot all features are supported on python 2.2.\n\nthe following issues have been fixed:\n\n  issue 16:  source and doc uses 'k' where it should use 'l'.\n  issue 32:  does not accept packed data.\n  issue 33:  cannot create greyscale png with transparency.\n  issue 35:  does not work on python 2.2.\n\n\n### release 0.0.3\n\nhandling pam files allows end to end handling of alpha channels in\nworkflows that involve both netpbm formats and png.\npypng now works in python 2.3.\n\nthe following issues have been fixed:\n\n  issue 14:  does not read pam files.\n  issue 15:  does not write pam files.\n  issue 25:  incorrect handling of trns chunk.\n  issue 26:  asrgba8 method crashes out for color type 2 images.\n  issue 27:  fails on python 2.3.\n\n\n### release 0.0.2\n\nlickable html documentation is now provided (see the html/ directory),\ngenerated by sphinx.\n\nthe following issues have been fixed:\n\n  issue 8:  documentation is not lickable.\n  issue 9:  advantage over pil is not clear.\n  issue 19: bogus message for pnm inputs with unsupported maxval\n  issue 20: cannot write large png files\n\n\n### release 0.0.1\n\nstuff happened.\n\n\n## manifest\n\n- .../ - top-level crud (like this readme, and setup.py).\n- .../asset - assets (needed for testing)\n- .../code/ - the python code.\n- .../man/ - manuals (in source/plain-text).\n- .../proc/ - documented procedures (release procedure).\n\n\n## references\n\n- python: www.python.org\n- png: http://www.w3.org/tr/png/\n\n## end\n",
  "docs_url": null,
  "keywords": "",
  "license": "mit",
  "name": "pypng",
  "package_url": "https://pypi.org/project/pypng/",
  "project_url": "https://pypi.org/project/pypng/",
  "project_urls": {
    "Homepage": "https://gitlab.com/drj11/pypng"
  },
  "release_url": "https://pypi.org/project/pypng/0.20220715.0/",
  "requires_dist": [],
  "requires_python": "",
  "summary": "pure python library for saving and loading png images",
  "version": "0.20220715.0",
  "releases": [],
  "developers": [
    "david_jones",
    "drj@pobox.com"
  ],
  "kwds": "pypng png pngsuite pngs priforgepng",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_pypng",
  "homepage": "https://gitlab.com/drj11/pypng",
  "release_count": 22,
  "dependency_ids": []
}
{
  "classifiers": [
    "development status :: 5 - production/stable",
    "environment :: web environment",
    "framework :: django",
    "framework :: django :: 3.2",
    "framework :: django :: 4.1",
    "framework :: django :: 4.2",
    "intended audience :: developers",
    "license :: osi approved :: apache software license",
    "natural language :: english",
    "operating system :: os independent",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: internet :: www/http"
  ],
  "description": "**this is a work in progress. it \"works for me\" at www.apiregistro.com.br,\nbut i cannot warranty that it fully \"works everywhere\" yet. join us on gitter (below) if you need some help.**\n\n# drf-nested-routers\n\n[![join the chat at https://gitter.im/alanjds/drf-nested-routers](https://badges.gitter.im/join%20chat.svg)](https://gitter.im/alanjds/drf-nested-routers?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n[![build status](https://github.com/alanjds/drf-nested-routers/workflows/ci/badge.svg)](https://github.com/alanjds/drf-nested-routers/actions?query=workflow%3aci+branch%3amaster)\n\nthis package provides routers and fields to create nested resources in the [django rest framework](http://django-rest-framework.org/)\n\nnested resources are needed for full rest url structure, if one resource lives inside another.\n\nthe following example is about domains and dns nameservers.\nthere are many domains, and each domain has many nameservers. the \"nameserver\" resource does not\nexist without a domain, so you need it \"nested\" inside the domain.\n\n\n## requirements & compatibility\n\n-  python (3.8, 3.9, 3.10, 3.11)\n-  django (3.2, 4.1, 4.2)\n-  django rest framework (3.14)\n\nit may work with lower versions, but since the release **0.93.5** is no more tested on ci for python 3.6 or lower.<br/>\nand since **0.92.1** is no more tested on ci for pythons 2.7 to 3.5, django 1.11 to 2.1 or drf 3.6 to 3.10.<br/>\nbefore that, the release **0.90.2** was tested also with drf 2.4.3 up to 3.7.\n\n\n## installation\n\nyou can install this library using pip:\n\n```pip install drf-nested-routers```\n\nit is not needed to add this library in your django project's `settings.py` file, as it does not contain any app, signal or model.\n\n## quickstart\n\nthe desired url signatures are:\n```\n/domain/ <- domains list\n/domain/{pk}/ <- one domain, from {pk}\n/domain/{domain_pk}/nameservers/ <- nameservers of domain from {domain_pk}\n/domain/{domain_pk}/nameservers/{pk} <- specific nameserver from {pk}, of domain from {domain_pk}\n```\n\nhow to do it (example):\n```python\n# urls.py\nfrom rest_framework_nested import routers\nfrom views import domainviewset, nameserverviewset\n(...)\n\nrouter = routers.simplerouter()\nrouter.register(r'domains', domainviewset)\n\ndomains_router = routers.nestedsimplerouter(router, r'domains', lookup='domain')\ndomains_router.register(r'nameservers', nameserverviewset, basename='domain-nameservers')\n# 'basename' is optional. needed only if the same viewset is registered more than once\n# official drf docs on this option: http://www.django-rest-framework.org/api-guide/routers/\n\nurlpatterns = [\n    path(r'', include(router.urls)),\n    path(r'', include(domains_router.urls)),\n]\n```\n\n```python\n# views.py\n\n## for django' orm-based resources ##\n\nclass nameserverviewset(viewsets.modelviewset):\n    def get_queryset(self):\n        return nameserver.objects.filter(domain=self.kwargs['domain_pk'])\n\n## or: non-orm resources ##\n\nclass nameserverviewset(viewsets.viewset):\n    def list(self, request, domain_pk=none):\n        nameservers = self.queryset.filter(domain=domain_pk)\n        (...)\n        return response([...])\n\n    def retrieve(self, request, pk=none, domain_pk=none):\n        nameservers = self.queryset.get(pk=pk, domain=domain_pk)\n        (...)\n        return response(serializer.data)\n```\n\n## advanced\n\n### hyperlinks for nested resources\n\n**(optional)** if you need hyperlinks for nested relations, you need a custom serializer.\n\nthere you will inform how to access the *parent* of the instance being serialized when\nbuilding the *children* url.\n\nin the following example, an instance of nameserver on `/domain/{domain_pk}/nameservers/{pk}`\nis being informed that the *parent* domain should be looked up using the `domain_pk` kwarg\nfrom the url:\n```python\n# serializers.py\n# (needed only if you want hyperlinks for nested relations on api)\nfrom rest_framework_nested.relations import nestedhyperlinkedrelatedfield\n\nclass domainserializer(hyperlinkedmodelserializer):\n    class meta:\n        model = domain\n\n    nameservers = hyperlinkedidentityfield(\n        view_name='domain-nameservers-list',\n        lookup_url_kwarg='domain_pk'\n                        # ^-- nameserver queryset will .get(domain_pk=domain_pk)\n                        #     being this value from url kwargs\n    )\n\n\t## or ##\n\n    nameservers = nestedhyperlinkedrelatedfield(\n        many=true,\n        read_only=true,   # or add a queryset\n        view_name='domain-nameservers-detail',\n        parent_lookup_kwargs={'domain_pk': 'domain__pk'}\n                            # ^-- nameserver queryset will .filter(domain__pk=domain_pk)\n                            #     being domain_pk (one underscore) value from url kwargs\n    )\n```\n\n**(optional)** if you want a little bit more control over the fields displayed for the nested relations while looking at the parent, you need a custom serializer using nestedhyperlinkedmodelserializer.\n```python\nfrom rest_framework.serializers import hyperlinkedmodelserializer\nfrom rest_framework_nested.serializers import nestedhyperlinkedmodelserializer\n\nclass nameserverserializers(hyperlinkedmodelserializer):\n\tclass meta:\n\t\tmodel = nameserver\n\t\tfields = (...)\n\n\nclass domainnameserverserializers(nestedhyperlinkedmodelserializer):\n\tparent_lookup_kwargs = {\n\t\t'domain_pk': 'domain__pk',\n\t}\n\tclass meta:\n\t\tmodel = nameserver\n\t\tfields = ('url', ...)\n\n\nclass domainserializer(hyperlinkedmodelserializer):\n\tclass meta:\n\t\tmodel = domain\n\t\tfields = (..., 'nameservers')\n\n\tnameservers = domainnameserverserializers(many=true, read_only=true)\n```\n\n### infinite-depth nesting\n\nexample of nested router 3 levels deep.\nyou can use this same logic to nest routers as deep as you need.\nthis example ahead accomplishes the below url patterns.\n```\n/clients/\n/clients/{pk}/\n/clients/{client_pk}/maildrops/\n/clients/{client_pk}/maildrops/{pk}/\n/clients/{client_pk}/maildrops/{maildrop_pk}/recipients/\n/clients/{client_pk}/maildrops/{maildrop_pk}/recipients/{pk}/\n```\n\n```python\n# urls.py\nrouter = defaultrouter()\nrouter.register(r'clients', clientviewset, basename='clients')\n## generates:\n# /clients/\n# /clients/{pk}/\n\nclient_router = routers.nestedsimplerouter(router, r'clients', lookup='client')\nclient_router.register(r'maildrops', maildropviewset, basename='maildrops')\n## generates:\n# /clients/{client_pk}/maildrops/\n# /clients/{client_pk}/maildrops/{pk}/\n\nmaildrops_router = routers.nestedsimplerouter(client_router, r'maildrops', lookup='maildrop')\nmaildrops_router.register(r'recipients', mailrecipientviewset, basename='recipients')\n## generates:\n# /clients/{client_pk}/maildrops/{maildrop_pk}/recipients/\n# /clients/{client_pk}/maildrops/{maildrop_pk}/recipients/{pk}/\n\nurlpatterns = [\n    path(r'', include(router.urls)),\n    path(r'', include(client_router.urls)),\n    path(r'', include(maildrops_router.urls)),\n]\n```\n\n```python\n# views.py\nclass clientviewset(viewsets.viewset):\n    serializer_class = clientserializer\n\n    def list(self, request,):\n        queryset = client.objects.filter()\n        serializer = clientserializer(queryset, many=true)\n        return response(serializer.data)\n\n    def retrieve(self, request, pk=none):\n        queryset = client.objects.filter()\n        client = get_object_or_404(queryset, pk=pk)\n        serializer = clientserializer(client)\n        return response(serializer.data)\n\n\nclass maildropviewset(viewsets.viewset):\n    serializer_class = maildropserializer\n\n    def list(self, request, client_pk=none):\n        queryset = maildrop.objects.filter(client=client_pk)\n        serializer = maildropserializer(queryset, many=true)\n        return response(serializer.data)\n\n    def retrieve(self, request, pk=none, client_pk=none):\n        queryset = maildrop.objects.filter(pk=pk, client=client_pk)\n        maildrop = get_object_or_404(queryset, pk=pk)\n        serializer = maildropserializer(maildrop)\n        return response(serializer.data)\n\n\nclass mailrecipientviewset(viewsets.viewset):\n    serializer_class = mailrecipientserializer\n\n    def list(self, request, client_pk=none, maildrop_pk=none):\n        queryset = mailrecipient.objects.filter(mail_drop__client=client_pk, mail_drop=maildrop_pk)\n        serializer = mailrecipientserializer(queryset, many=true)\n        return response(serializer.data)\n\n    def retrieve(self, request, pk=none, client_pk=none, maildrop_pk=none):\n        queryset = mailrecipient.objects.filter(pk=pk, mail_drop=maildrop_pk, mail_drop__client=client_pk)\n        maildrop = get_object_or_404(queryset, pk=pk)\n        serializer = mailrecipientserializer(maildrop)\n        return response(serializer.data)\n```\n\n```python\n# serializers.py\nclass clientserializer(hyperlinkedmodelserializer):\n    class meta:\n        model = client\n        fields = (...)\n\n\nclass maildropserializer(nestedhyperlinkedmodelserializer):\n    parent_lookup_kwargs = {\n        'client_pk': 'client__pk',\n    }\n    class meta:\n        model = maildrop\n        fields = (...)\n\n\nclass mailrecipientserializer(nestedhyperlinkedmodelserializer):\n    parent_lookup_kwargs = {\n        'maildrop_pk': 'mail_drop__pk',\n        'client_pk': 'mail_drop__client__pk',\n    }\n    class meta:\n        model = mailrecipient\n        fields = (...)\n```\n\n## testing\n\nin order to get started with testing, you will need to install [tox](https://tox.readthedocs.io/en/latest/).\nonce installed, you can then run one environment locally, to speed up your development cycle:\n\n```\n$ tox -e py39-django3.1-drf3.11\n```\n\nonce you submit a pull request, your changes will be run against many environments with github actions named ci.\n\n\n## license\n\nthis package is licensed under the apache license, version 2.0 (the \"license\");\nyou may not use this file except in compliance with the license.\nyou may obtain a copy of the license at http://www.apache.org/licenses/license-2.0\nand can undestand more at http://choosealicense.com/licenses/apache/ on the\nsidebar notes.\n\napache licence v2.0 is a mit-like licence. this means, in plain english:\n- it's truly open source\n- you can use it as you wish, for money or not\n- you can sublicence it (change the licence!!)\n- this way, you can even use it on your closed-source project\nas long as:\n- you cannot use the authors name, logos, etc, to endorse a project\n- you keep the authors copyright notices where this code got used, even on your closed-source project\n(come on, even microsoft kept bsd notices on windows about its tcp/ip stack :p)\n\n\n",
  "docs_url": null,
  "keywords": "",
  "license": "apache",
  "name": "drf-nested-routers",
  "package_url": "https://pypi.org/project/drf-nested-routers/",
  "project_url": "https://pypi.org/project/drf-nested-routers/",
  "project_urls": {
    "Homepage": "https://github.com/alanjds/drf-nested-routers"
  },
  "release_url": "https://pypi.org/project/drf-nested-routers/0.93.5/",
  "requires_dist": [
    "Django (>=3.2)",
    "djangorestframework (>=3.14.0)"
  ],
  "requires_python": ">=3.8",
  "summary": "nested resources for the django rest framework",
  "version": "0.93.5",
  "releases": [],
  "developers": [
    "alan.justino@yahoo.com.br",
    "alan_justino_et_al"
  ],
  "kwds": "nest nested nesting nestedsimplerouter parent_lookup_kwargs",
  "license_kwds": "apache",
  "libtype": "pypi",
  "id": "pypi_drf_nested_routers",
  "homepage": "https://github.com/alanjds/drf-nested-routers",
  "release_count": 20,
  "dependency_ids": [
    "pypi_django",
    "pypi_djangorestframework"
  ]
}
{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "programming language :: python :: 3",
    "programming language :: python :: 3 :: only"
  ],
  "description": ".. image:: https://img.shields.io/pypi/v/portend.svg\n   :target: https://pypi.org/project/portend\n\n.. image:: https://img.shields.io/pypi/pyversions/portend.svg\n\n.. image:: https://github.com/jaraco/portend/workflows/tests/badge.svg\n   :target: https://github.com/jaraco/portend/actions?query=workflow%3a%22tests%22\n   :alt: tests\n\n.. image:: https://img.shields.io/endpoint?url=https://raw.githubusercontent.com/charliermarsh/ruff/main/assets/badge/v2.json\n    :target: https://github.com/astral-sh/ruff\n    :alt: ruff\n\n.. image:: https://img.shields.io/badge/code%20style-black-000000.svg\n   :target: https://github.com/psf/black\n   :alt: code style: black\n\n.. image:: https://readthedocs.org/projects/portend/badge/?version=latest\n   :target: https://portend.readthedocs.io/en/latest/?badge=latest\n\n.. image:: https://img.shields.io/badge/skeleton-2023-informational\n   :target: https://blog.jaraco.com/skeleton\n\npor\u00b7tend\np\u00f4r\u02c8tend/\nverb\n\n    be a sign or warning that (something, especially something momentous or calamitous) is likely to happen.\n\nusage\n=====\n\nuse portend to monitor tcp ports for bound or unbound states.\n\nfor example, to wait for a port to be occupied, timing out after 3 seconds::\n\n    portend.occupied('www.google.com', 80, timeout=3)\n\nor to wait for a port to be free, timing out after 5 seconds::\n\n    portend.free('::1', 80, timeout=5)\n\nthe portend may also be executed directly. if the function succeeds, it\nreturns nothing and exits with a status of 0. if it fails, it prints a\nmessage and exits with a status of 1. for example::\n\n    python -m portend localhost:31923 free\n    (exits immediately)\n\n    python -m portend -t 1 localhost:31923 occupied\n    (one second passes)\n    port 31923 not bound on localhost.\n\nportend also exposes a ``find_available_local_port`` for identifying\na suitable port for binding locally::\n\n    port = portend.find_available_local_port()\n    print(port, \"is available for binding\")\n\nportend additionally exposes the lower-level port checking functionality\nin the ``checker`` class, which currently exposes only one public\nmethod, ``assert_free``::\n\n    portend.checker().assert_free('localhost', 31923)\n\nif assert_free is passed a host/port combination that is occupied by\na bound listener (i.e. a tcp connection is established to that host/port),\nassert_free will raise a ``portnotfree`` exception.\n",
  "docs_url": null,
  "keywords": "",
  "license": "",
  "name": "portend",
  "package_url": "https://pypi.org/project/portend/",
  "project_url": "https://pypi.org/project/portend/",
  "project_urls": {
    "Homepage": "https://github.com/jaraco/portend"
  },
  "release_url": "https://pypi.org/project/portend/3.2.0/",
  "requires_dist": [
    "tempora (>=1.8)",
    "sphinx (>=3.5) ; extra == 'docs'",
    "jaraco.packaging (>=9) ; extra == 'docs'",
    "rst.linker (>=1.9) ; extra == 'docs'",
    "furo ; extra == 'docs'",
    "sphinx-lint ; extra == 'docs'",
    "pytest (>=6) ; extra == 'testing'",
    "pytest-checkdocs (>=2.4) ; extra == 'testing'",
    "pytest-cov ; extra == 'testing'",
    "pytest-enabler (>=2.2) ; extra == 'testing'",
    "pytest-ruff ; extra == 'testing'",
    "pytest-black (>=0.3.7) ; (platform_python_implementation != \"PyPy\") and extra == 'testing'",
    "pytest-mypy (>=0.9.1) ; (platform_python_implementation != \"PyPy\") and extra == 'testing'"
  ],
  "requires_python": ">=3.8",
  "summary": "tcp port monitoring and discovery",
  "version": "3.2.0",
  "releases": [],
  "developers": [
    "jaraco@jaraco.com",
    "jason_r"
  ],
  "kwds": "badge shields ruff workflows image",
  "license_kwds": "",
  "libtype": "pypi",
  "id": "pypi_portend",
  "homepage": "https://github.com/jaraco/portend",
  "release_count": 30,
  "dependency_ids": [
    "pypi_furo",
    "pypi_jaraco.packaging",
    "pypi_pytest",
    "pypi_pytest_black",
    "pypi_pytest_checkdocs",
    "pypi_pytest_cov",
    "pypi_pytest_enabler",
    "pypi_pytest_mypy",
    "pypi_pytest_ruff",
    "pypi_rst.linker",
    "pypi_sphinx",
    "pypi_sphinx_lint",
    "pypi_tempora"
  ]
}
{
  "classifiers": [
    "intended audience :: developers",
    "intended audience :: education",
    "license :: osi approved :: mit license",
    "programming language :: python",
    "topic :: software development :: libraries"
  ],
  "description": "# implicits\nglobal state can be hard to reason about, but piping dependencies from function to function is a pain. with implicits, you _explicitly_ which function parameters are _implicit_ dependencies. when you call the function, no need to explicilty provide these parameters; instead, the parameters will be implicitly passed! all that's required is that there exists local variables in scope that match the names of the parameters you're calling.\n```python3\n@implicits(\"current_user\")\ndef create_task(title, *, current_user):\n    print(f\"{current_user} created a task titled '{title}'\")\n\ncurrent_user = \"jaden\"\ncreate_task(\"hooray, a task!\") # jaden created a task titled 'hooray, a task!'\ncreate_task(\"buy some trackpants\") # jaden created a task titled 'buy some trackpants'\n```\n\n## usage\n1) install via `pip install implicits`.\n2) import with `from implicits import implicits`.\n3) decorate using `@implicits(\"names\", \"of\", \"implicit\", \"parameters\")`.\n\n## example\n```python3\nimport logging\nimport boto3\n\nfrom implicits import implicits\n\nclass giraffe:\n    @implicits(\"logger\")\n    def __init__(self, name, *, logger):\n        self.name = name\n        logger.info(f\"creating a giraffe named {name}\")\n\n    @property\n    @implicits(\"logger\")\n    def full_name(self, *, logger):\n        logger.info(f\"getting {self.name}'s full name\")\n        return f\"{self.name} the giraffe\"\n\n    @property\n    @implicits(\"food\")\n    def is_hungry(self, *, food):\n        return \"leaves\" in food\n\n@implicits(\"logger\")\ndef main(*, logger):\n    jeff = giraffe(\"jeff\") # creating a giraffe named jeff\n    name = jeff.full_name  # getting jeff's full name\n    food = [\"rocks\", \"dirt\"]\n    logger.info(jeff.is_hungry) # false\n    food.append(\"leaves\")\n    logger.info(jeff.is_hungry) # true\n\nlogger = logging.getlogger()\nlogger.setlevel(logging.info)\nlogger.addhandler(logging.streamhandler())\n\nmain()\n```\n\n## references\n\ni didn't invent this idea! quite a few other languages support implicit parameters. the most mainstream of these languages is scala. [check out how implicits work in scala!](https://docs.scala-lang.org/tour/implicit-parameters.html)\n\n\n",
  "docs_url": null,
  "keywords": "implicit implicits arguments parameters scala context locals",
  "license": "mit",
  "name": "implicits",
  "package_url": "https://pypi.org/project/implicits/",
  "project_url": "https://pypi.org/project/implicits/",
  "project_urls": {
    "Homepage": "https://github.com/JadenGeller/Implicits"
  },
  "release_url": "https://pypi.org/project/implicits/1.0.2/",
  "requires_dist": [],
  "requires_python": "",
  "summary": "implicit parameters in python",
  "version": "1.0.2",
  "releases": [],
  "developers": [
    "jaden_geller"
  ],
  "kwds": "_implicit_ implicits create_task implicit implicitly",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_implicits",
  "homepage": "https://github.com/jadengeller/implicits",
  "release_count": 3,
  "dependency_ids": []
}
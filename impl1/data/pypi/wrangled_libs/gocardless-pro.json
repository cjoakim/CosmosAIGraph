{
  "classifiers": [],
  "description": ".. |pypi-badge| image:: https://badge.fury.io/py/gocardless_pro.svg\n    :target: https://pypi.python.org/pypi/gocardless_pro\n\ngocardless pro python client library\n============================================\n\na python client for interacting with the gocardless pro api.\n\n|pypi-badge|\n\ntested against python 3.8, 3.9, 3.10 and 3.11.\n\n- `\"getting started\" guide <https://developer.gocardless.com/getting-started/api/introduction/?lang=python>`_ with copy and paste python code samples\n- `api reference`_\n\n------------\n\ninstall from pypi:\n\n.. code:: bash\n\n    $ pip install gocardless_pro\n\n\nusage\n-----\n\ncreate a ``client`` instance, providing your access token and the environment\nyou want to use:\n\n.. code:: python\n\n    import gocardless_pro\n    token = os.environ['access_token']\n    client = gocardless_pro.client(access_token=token, environment='live')\n\naccess api endpoints using the corresponding methods on the client object:\n\n.. code:: python\n\n    # create a new customer. we automatically add idempotency keys to requests to create\n    # resources, stopping duplicates accidentally getting created if something goes wrong\n    # with the api (e.g. networking problems) - see https://developer.gocardless.com/api\n    # -reference/#making-requests-idempotency-keys for details\n    customer = client.customers.create(params={'email': 'jane@example.com'})\n\n    # fetch a payment by its id\n    payment = client.payments.get(\"pa123\")\n\n    # loop through a page of payments, printing each payment's amount\n    for payment in client.payments.list().records:\n        decimal_amount = decimal.decimal(payment.amount) / 100\n        print('payment for \u00a3{0}'.format(decimal_amount))\n\n    # create a mandate pdf in a specific language\n    client.mandate_pdfs.create(\n        params={'links': {'mandate': 'md00001234xyz'}},\n        headers={'accept-language': 'fr'}\n    )\n\nrate limit response headers can be read:\n\n.. code:: python\n\n    # note these properties will be none until you make an api request with the client\n    client.rate_limit.limit\n    client.rate_limit.remaining\n    client.rate_limit.reset\n\n\nfor full documentation, see our `api reference`_.\n\n.. _api reference: https://developer.gocardless.com/api-reference\n\n\navailable resources\n```````````````````\n\nbank authorisations\n''''''''''''''''''''''''''''''''''''''''''\n\n.. code:: python\n\n    # create a bank authorisation\n    client.bank_authorisations.create(params={...})\n\n    # get a bank authorisation\n    client.bank_authorisations.get('bau123', params={...})\n\nbank details lookups\n''''''''''''''''''''''''''''''''''''''''''\n\n.. code:: python\n\n    # perform a bank details lookup\n    client.bank_details_lookups.create(params={...})\n\nbilling requests\n''''''''''''''''''''''''''''''''''''''''''\n\n.. code:: python\n\n    # create a billing request\n    client.billing_requests.create(params={...})\n\n    # collect customer details\n    client.billing_requests.collect_customer_details('brq123', params={...})\n\n    # collect bank account details\n    client.billing_requests.collect_bank_account('brq123', params={...})\n\n    # confirm the payer details\n    client.billing_requests.confirm_payer_details('brq123', params={...})\n\n    # fulfil a billing request\n    client.billing_requests.fulfil('brq123', params={...})\n\n    # cancel a billing request\n    client.billing_requests.cancel('brq123', params={...})\n\n    # list billing requests\n    client.billing_requests.list(params={...})\n\n    # iterate through all billing_requests\n    client.billing_requests.all(params={...})\n\n    # get a single billing request\n    client.billing_requests.get('brq123', params={...})\n\n    # notify the customer\n    client.billing_requests.notify('brq123', params={...})\n\n    # trigger fallback\n    client.billing_requests.fallback('brq123', params={...})\n\n    # change currency\n    client.billing_requests.choose_currency('brq123', params={...})\n\n    # select institution for a billing request\n    client.billing_requests.select_institution('brq123', params={...})\n\nbilling request flows\n''''''''''''''''''''''''''''''''''''''''''\n\n.. code:: python\n\n    # create a billing request flow\n    client.billing_request_flows.create(params={...})\n\n    # initialise a billing request flow\n    client.billing_request_flows.initialise('brf123', params={...})\n\nbilling request templates\n''''''''''''''''''''''''''''''''''''''''''\n\n.. code:: python\n\n    # list billing request templates\n    client.billing_request_templates.list(params={...})\n\n    # iterate through all billing_request_templates\n    client.billing_request_templates.all(params={...})\n\n    # get a single billing request template\n    client.billing_request_templates.get('brt123', params={...})\n\n    # create a billing request template\n    client.billing_request_templates.create(params={...})\n\n    # update a billing request template\n    client.billing_request_templates.update('brq123', params={...})\n\nblocks\n''''''''''''''''''''''''''''''''''''''''''\n\n.. code:: python\n\n    # create a block\n    client.blocks.create(params={...})\n\n    # get a single block\n    client.blocks.get('blc123', params={...})\n\n    # list multiple blocks\n    client.blocks.list(params={...})\n\n    # iterate through all blocks\n    client.blocks.all(params={...})\n\n    # disable a block\n    client.blocks.disable('blc123', params={...})\n\n    # enable a block\n    client.blocks.enable('blc123', params={...})\n\n    # create blocks by reference\n    client.blocks.block_by_ref(params={...})\n\ncreditors\n''''''''''''''''''''''''''''''''''''''''''\n\n.. code:: python\n\n    # create a creditor\n    client.creditors.create(params={...})\n\n    # list creditors\n    client.creditors.list(params={...})\n\n    # iterate through all creditors\n    client.creditors.all(params={...})\n\n    # get a single creditor\n    client.creditors.get('cr123', params={...})\n\n    # update a creditor\n    client.creditors.update('cr123', params={...})\n\ncreditor bank accounts\n''''''''''''''''''''''''''''''''''''''''''\n\n.. code:: python\n\n    # create a creditor bank account\n    client.creditor_bank_accounts.create(params={...})\n\n    # list creditor bank accounts\n    client.creditor_bank_accounts.list(params={...})\n\n    # iterate through all creditor_bank_accounts\n    client.creditor_bank_accounts.all(params={...})\n\n    # get a single creditor bank account\n    client.creditor_bank_accounts.get('ba123', params={...})\n\n    # disable a creditor bank account\n    client.creditor_bank_accounts.disable('ba123', params={...})\n\ncurrency exchange rates\n''''''''''''''''''''''''''''''''''''''''''\n\n.. code:: python\n\n    # list exchange rates\n    client.currency_exchange_rates.list(params={...})\n\n    # iterate through all currency_exchange_rates\n    client.currency_exchange_rates.all(params={...})\n\ncustomers\n''''''''''''''''''''''''''''''''''''''''''\n\n.. code:: python\n\n    # create a customer\n    client.customers.create(params={...})\n\n    # list customers\n    client.customers.list(params={...})\n\n    # iterate through all customers\n    client.customers.all(params={...})\n\n    # get a single customer\n    client.customers.get('cu123', params={...})\n\n    # update a customer\n    client.customers.update('cu123', params={...})\n\n    # remove a customer\n    client.customers.remove('cu123', params={...})\n\ncustomer bank accounts\n''''''''''''''''''''''''''''''''''''''''''\n\n.. code:: python\n\n    # create a customer bank account\n    client.customer_bank_accounts.create(params={...})\n\n    # list customer bank accounts\n    client.customer_bank_accounts.list(params={...})\n\n    # iterate through all customer_bank_accounts\n    client.customer_bank_accounts.all(params={...})\n\n    # get a single customer bank account\n    client.customer_bank_accounts.get('ba123', params={...})\n\n    # update a customer bank account\n    client.customer_bank_accounts.update('ba123', params={...})\n\n    # disable a customer bank account\n    client.customer_bank_accounts.disable('ba123', params={...})\n\ncustomer notifications\n''''''''''''''''''''''''''''''''''''''''''\n\n.. code:: python\n\n    # handle a notification\n    client.customer_notifications.handle('pcn123', params={...})\n\nevents\n''''''''''''''''''''''''''''''''''''''''''\n\n.. code:: python\n\n    # list events\n    client.events.list(params={...})\n\n    # iterate through all events\n    client.events.all(params={...})\n\n    # get a single event\n    client.events.get('ev123', params={...})\n\ninstalment schedules\n''''''''''''''''''''''''''''''''''''''''''\n\n.. code:: python\n\n    # create (with dates)\n    client.instalment_schedules.create_with_dates(params={...})\n\n    # create (with schedule)\n    client.instalment_schedules.create_with_schedule(params={...})\n\n    # list instalment schedules\n    client.instalment_schedules.list(params={...})\n\n    # iterate through all instalment_schedules\n    client.instalment_schedules.all(params={...})\n\n    # get a single instalment schedule\n    client.instalment_schedules.get('is123', params={...})\n\n    # update an instalment schedule\n    client.instalment_schedules.update('is123', params={...})\n\n    # cancel an instalment schedule\n    client.instalment_schedules.cancel('is123', params={...})\n\ninstitutions\n''''''''''''''''''''''''''''''''''''''''''\n\n.. code:: python\n\n    # list institutions\n    client.institutions.list(params={...})\n\n    # iterate through all institutions\n    client.institutions.all(params={...})\n\n    # list institutions for billing request\n    client.institutions.list_for_billing_request('brq123', params={...})\n\nmandates\n''''''''''''''''''''''''''''''''''''''''''\n\n.. code:: python\n\n    # create a mandate\n    client.mandates.create(params={...})\n\n    # list mandates\n    client.mandates.list(params={...})\n\n    # iterate through all mandates\n    client.mandates.all(params={...})\n\n    # get a single mandate\n    client.mandates.get('md123', params={...})\n\n    # update a mandate\n    client.mandates.update('md123', params={...})\n\n    # cancel a mandate\n    client.mandates.cancel('md123', params={...})\n\n    # reinstate a mandate\n    client.mandates.reinstate('md123', params={...})\n\nmandate imports\n''''''''''''''''''''''''''''''''''''''''''\n\n.. code:: python\n\n    # create a new mandate import\n    client.mandate_imports.create(params={...})\n\n    # get a mandate import\n    client.mandate_imports.get('im000010790wx1', params={...})\n\n    # submit a mandate import\n    client.mandate_imports.submit('im000010790wx1', params={...})\n\n    # cancel a mandate import\n    client.mandate_imports.cancel('im000010790wx1', params={...})\n\nmandate import entries\n''''''''''''''''''''''''''''''''''''''''''\n\n.. code:: python\n\n    # add a mandate import entry\n    client.mandate_import_entries.create(params={...})\n\n    # list all mandate import entries\n    client.mandate_import_entries.list(params={...})\n\n    # iterate through all mandate_import_entries\n    client.mandate_import_entries.all(params={...})\n\nmandate pdfs\n''''''''''''''''''''''''''''''''''''''''''\n\n.. code:: python\n\n    # create a mandate pdf\n    client.mandate_pdfs.create(params={...})\n\nnegative balance limits\n''''''''''''''''''''''''''''''''''''''''''\n\n.. code:: python\n\n    # list negative balance limits\n    client.negative_balance_limits.list(params={...})\n\n    # iterate through all negative_balance_limits\n    client.negative_balance_limits.all(params={...})\n\n    # create a negative balance limit\n    client.negative_balance_limits.create(params={...})\n\npayer authorisations\n''''''''''''''''''''''''''''''''''''''''''\n\n.. code:: python\n\n    # get a single payer authorisation\n    client.payer_authorisations.get('pa123', params={...})\n\n    # create a payer authorisation\n    client.payer_authorisations.create(params={...})\n\n    # update a payer authorisation\n    client.payer_authorisations.update('pa123', params={...})\n\n    # submit a payer authorisation\n    client.payer_authorisations.submit('pa123', params={...})\n\n    # confirm a payer authorisation\n    client.payer_authorisations.confirm('pa123', params={...})\n\npayments\n''''''''''''''''''''''''''''''''''''''''''\n\n.. code:: python\n\n    # create a payment\n    client.payments.create(params={...})\n\n    # list payments\n    client.payments.list(params={...})\n\n    # iterate through all payments\n    client.payments.all(params={...})\n\n    # get a single payment\n    client.payments.get('pm123', params={...})\n\n    # update a payment\n    client.payments.update('pm123', params={...})\n\n    # cancel a payment\n    client.payments.cancel('pm123', params={...})\n\n    # retry a payment\n    client.payments.retry('pm123', params={...})\n\npayouts\n''''''''''''''''''''''''''''''''''''''''''\n\n.. code:: python\n\n    # list payouts\n    client.payouts.list(params={...})\n\n    # iterate through all payouts\n    client.payouts.all(params={...})\n\n    # get a single payout\n    client.payouts.get('po123', params={...})\n\n    # update a payout\n    client.payouts.update('po123', params={...})\n\npayout items\n''''''''''''''''''''''''''''''''''''''''''\n\n.. code:: python\n\n    # get all payout items in a single payout\n    client.payout_items.list(params={...})\n\n    # iterate through all payout_items\n    client.payout_items.all(params={...})\n\nredirect flows\n''''''''''''''''''''''''''''''''''''''''''\n\n.. code:: python\n\n    # create a redirect flow\n    client.redirect_flows.create(params={...})\n\n    # get a single redirect flow\n    client.redirect_flows.get('re123456', params={...})\n\n    # complete a redirect flow\n    client.redirect_flows.complete('re123456', params={...})\n\nrefunds\n''''''''''''''''''''''''''''''''''''''''''\n\n.. code:: python\n\n    # create a refund\n    client.refunds.create(params={...})\n\n    # list refunds\n    client.refunds.list(params={...})\n\n    # iterate through all refunds\n    client.refunds.all(params={...})\n\n    # get a single refund\n    client.refunds.get('rf123', params={...})\n\n    # update a refund\n    client.refunds.update('rf123', params={...})\n\nscenario simulators\n''''''''''''''''''''''''''''''''''''''''''\n\n.. code:: python\n\n    # simulate a scenario\n    client.scenario_simulators.run('payment_failed', params={...})\n\nschemeentifiers\n''''''''''''''''''''''''''''''''''''''''''\n\n.. code:: python\n\n    # create a scheme identifier\n    client.scheme_identifiers.create(params={...})\n\n    # list scheme identifiers\n    client.scheme_identifiers.list(params={...})\n\n    # iterate through all scheme_identifiers\n    client.scheme_identifiers.all(params={...})\n\n    # get a single scheme identifier\n    client.scheme_identifiers.get('su123', params={...})\n\nsubscriptions\n''''''''''''''''''''''''''''''''''''''''''\n\n.. code:: python\n\n    # create a subscription\n    client.subscriptions.create(params={...})\n\n    # list subscriptions\n    client.subscriptions.list(params={...})\n\n    # iterate through all subscriptions\n    client.subscriptions.all(params={...})\n\n    # get a single subscription\n    client.subscriptions.get('sb123', params={...})\n\n    # update a subscription\n    client.subscriptions.update('sb123', params={...})\n\n    # pause a subscription\n    client.subscriptions.pause('sb123', params={...})\n\n    # resume a subscription\n    client.subscriptions.resume('sb123', params={...})\n\n    # cancel a subscription\n    client.subscriptions.cancel('sb123', params={...})\n\ntax rates\n''''''''''''''''''''''''''''''''''''''''''\n\n.. code:: python\n\n    # list tax rates\n    client.tax_rates.list(params={...})\n\n    # iterate through all tax_rates\n    client.tax_rates.all(params={...})\n\n    # get a single tax rate\n    client.tax_rates.get('gb_vat_1', params={...})\n\ntransferred mandates\n''''''''''''''''''''''''''''''''''''''''''\n\n.. code:: python\n\n    # get updated customer bank details\n    client.transferred_mandates.transferred_mandates('md123', params={...})\n\nverification details\n''''''''''''''''''''''''''''''''''''''''''\n\n.. code:: python\n\n    # create a verification detail\n    client.verification_details.create(params={...})\n\n    # list verification details\n    client.verification_details.list(params={...})\n\n    # iterate through all verification_details\n    client.verification_details.all(params={...})\n\nwebhooks\n''''''''''''''''''''''''''''''''''''''''''\n\n.. code:: python\n\n    # list webhooks\n    client.webhooks.list(params={...})\n\n    # iterate through all webhooks\n    client.webhooks.all(params={...})\n\n    # get a single webhook\n    client.webhooks.get('wb123', params={...})\n\n    # retry a webhook\n    client.webhooks.retry('wb123', params={...})\n\n\n\nrunning tests\n-------------\n\nfirst, install the development dependencies:\n\n.. code:: bash\n\n    $ pip install -r requirements-dev.txt\n\nto run the test suite against the current python version, run ``pytest``.\n\nto run the test suite against multiple python versions, run ``tox``.\n\nif you don't have all versions of python installed, you can run the tests in\na docker container by running ``make``.\n",
  "docs_url": null,
  "keywords": "gocardless directdebit payments sepa bacs",
  "license": "mit",
  "name": "gocardless-pro",
  "package_url": "https://pypi.org/project/gocardless-pro/",
  "project_url": "https://pypi.org/project/gocardless-pro/",
  "project_urls": {
    "Homepage": "https://github.com/gocardless/gocardless-pro-python"
  },
  "release_url": "https://pypi.org/project/gocardless-pro/1.49.0/",
  "requires_dist": [
    "requests >=2.6",
    "six"
  ],
  "requires_python": "",
  "summary": "a client library for the gocardless pro api.",
  "version": "1.49.0",
  "releases": [],
  "developers": [
    "engineering@gocardless.com",
    "gocardless"
  ],
  "kwds": "gocardless_pro gocardless pypi pytest pip",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_gocardless_pro",
  "homepage": "https://github.com/gocardless/gocardless-pro-python",
  "release_count": 56,
  "dependency_ids": [
    "pypi_requests",
    "pypi_six"
  ]
}
{
  "classifiers": [
    "development status :: 5 - production/stable",
    "environment :: other environment",
    "environment :: web environment",
    "intended audience :: developers",
    "license :: osi approved :: python software foundation license",
    "operating system :: os independent",
    "programming language :: python",
    "programming language :: python :: 3",
    "programming language :: python :: 3.5",
    "programming language :: python :: 3.6",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: implementation :: cpython",
    "programming language :: python :: implementation :: pypy",
    "topic :: communications",
    "topic :: internet :: www/http",
    "topic :: other/nonlisted topic",
    "topic :: software development :: libraries :: python modules"
  ],
  "description": "premailer\n=========\n\n.. image:: https://travis-ci.org/peterbe/premailer.svg?branch=master\n  :target: https://travis-ci.org/peterbe/premailer\n\n.. image:: https://badge.fury.io/py/premailer.svg\n  :target: https://pypi.python.org/pypi/premailer\n\n.. image:: https://img.shields.io/badge/code%20style-black-000000.svg\n  :target: https://github.com/ambv/black\n\nlooking for sponsors\n--------------------\n\nthis project is actively looking for corporate sponsorship. if you want\nto help making this an active project consider `pinging\npeter <https://www.peterbe.com/contact>`__ and we can talk about putting\nup logos and links to your company.\n\npython versions\n---------------\n\nour\n`tox.ini <https://github.com/peterbe/premailer/blob/master/tox.ini>`__\nmakes sure premailer works in:\n\n-  python 3.4\n-  python 3.5\n-  python 3.6\n-  python 3.7\n-  python 3.8\n-  pypy\n\nturns css blocks into style attributes\n--------------------------------------\n\nwhen you send html emails you can't use style tags but instead you have\nto put inline ``style`` attributes on every element. so from this:\n\n.. code:: html\n\n    <html>\n    <style type=\"text/css\">\n    h1 { border:1px solid black }\n    p { color:red;}\n    </style>\n    <h1 style=\"font-weight:bolder\">peter</h1>\n    <p>hej</p>\n    </html>\n\nyou want this:\n\n.. code:: html\n\n    <html>\n    <h1 style=\"font-weight:bolder; border:1px solid black\">peter</h1>\n    <p style=\"color:red\">hej</p>\n    </html>\n\npremailer does this. it parses an html page, looks up ``style`` blocks\nand parses the css. it then uses the ``lxml.html`` parser to modify the\ndom tree of the page accordingly.\n\nwarning!\nby default, premailer will attempt to download any external stylesheets by url over the internet.\nif you want to prevent this you can use the ``allow_network=false`` option.\n\ngetting started\n---------------\n\nif you haven't already done so, install ``premailer`` first:\n\n::\n\n    $ pip install premailer\n\nnext, the most basic use is to use the shortcut function, like this:\n\n.. code:: python\n\n    >>> from premailer import transform\n    >>> print(transform(\"\"\"\n    ...         <html>\n    ...         <style type=\"text/css\">\n    ...         h1 { border:1px solid black }\n    ...         p { color:red;}\n    ...         p::first-letter { float:left; }\n    ...         </style>\n    ...         <style type=\"text/css\" data-premailer=\"ignore\">\n    ...         h1 { color:blue; }\n    ...         </style>\n    ...         <h1 style=\"font-weight:bolder\">peter</h1>\n    ...         <p>hej</p>\n    ...         </html>\n    ... \"\"\"))\n    <html>\n    <head>\n        <style type=\"text/css\">p::first-letter {float:left}</style>\n        <style type=\"text/css\">\n        h1 { color:blue; }\n        </style>\n    </head>\n    <body>\n        <h1 style=\"border:1px solid black; font-weight:bolder\">peter</h1>\n        <p style=\"color:red\">hej</p>\n    </body>\n    </html>\n\nthe ``transform`` shortcut function transforms the given html using the defaults for all options:\n\n.. code:: python\n\n    base_url=none, # optional url prepended to all relative links (both stylesheets and internal)\n    disable_link_rewrites=false, # allow link rewrites (e.g. using base_url)\n    preserve_internal_links=false, # do not preserve links to named anchors when using base_url\n    preserve_inline_attachments=true, # preserve links with cid: scheme when base_url is specified\n    preserve_handlebar_syntax=false # preserve handlebar syntax from being encoded\n    exclude_pseudoclasses=true, # ignore pseudoclasses when processing styles\n    keep_style_tags=false, # discard original style tag\n    include_star_selectors=false, # ignore star selectors when processing styles\n    remove_classes=false, # leave class attributes on html elements\n    capitalize_float_margin=false, # do not capitalize float and margin properties\n    strip_important=true, # remove !important from property values\n    external_styles=none, # optional list of urls to load and parse\n    css_text=none, # optional css text to parse\n    method=\"html\", # parse input as html (as opposed to \"xml\")\n    base_path=none, # optional base path to stylesheet in your file system\n    disable_basic_attributes=none, # optional list of attribute names to preserve on html elements\n    disable_validation=false, # validate css when parsing it with cssutils\n    cache_css_parsing=true, # do cache parsed output for css\n    cssutils_logging_handler=none, # see \"capturing logging from cssutils\" below\n    cssutils_logging_level=none,\n    disable_leftover_css=false, # output css that was not inlined into the head\n    align_floating_images=true, # add align attribute for floated images\n    remove_unset_properties=true # remove css properties if their value is unset when merged\n    allow_network=true # allow network access to fetch linked css files\n    allow_insecure_ssl=false # don't allow unverified ssl certificates for external links\n    allow_loading_external_files=false # allow loading any non-http external file url\n    session=none # session used for http requests - supply your own for caching or to provide authentication\n\nfor more advanced options, check out the code of the ``premailer`` class\nand all its options in its constructor.\n\nyou can also use premailer from the command line by using its main\nmodule.\n\n::\n\n    $ python -m premailer -h\n    usage: python -m premailer [options]\n\n    optional arguments:\n    -h, --help            show this help message and exit\n    -f [infile], --file [infile]\n                          specifies the input file. the default is stdin.\n    -o [outfile], --output [outfile]\n                          specifies the output file. the default is stdout.\n    --base-url base_url\n    --remove-internal-links preserve_internal_links\n                          remove links that start with a '#' like anchors.\n    --exclude-pseudoclasses\n                          pseudo classes like p:last-child', p:first-child, etc\n    --preserve-style-tags\n                          do not delete <style></style> tags from the html\n                          document.\n    --remove-star-selectors\n                          all wildcard selectors like '* {color: black}' will be\n                          removed.\n    --remove-classes      remove all class attributes from all elements\n    --strip-important     remove '!important' for all css declarations.\n    --method method       the type of html to output. 'html' for html, 'xml' for\n                          xhtml.\n    --base-path base_path\n                          the base path for all external stylsheets.\n    --external-style external_styles\n                          the path to an external stylesheet to be loaded.\n    --disable-basic-attributes disable_basic_attributes\n                          disable provided basic attributes (comma separated)\n    --disable-validation  disable cssparser validation of attributes and values\n    --pretty              pretty-print the outputted html.\n    --allow-insecure-ssl  skip ssl certificate verification for external urls.\n    --allow-loading-external-files allow opening any non-http external file url.\n\na basic example:\n\n::\n\n    $ python -m premailer --base-url=http://google.com/ -f newsletter.html\n    <html>\n    <head><style>.heading { color:red; }</style></head>\n    <body><h1 class=\"heading\" style=\"color:red\"><a href=\"http://google.com/\">title</a></h1></body>\n    </html>\n\nthe command line interface supports standard input.\n\n::\n\n    $ echo '<style>.heading { color:red; }</style><h1 class=\"heading\"><a href=\"/\">title</a></h1>' | python -m premailer --base-url=http://google.com/\n    <html>\n    <head><style>.heading { color:red; }</style></head>\n    <body><h1 class=\"heading\" style=\"color:red\"><a href=\"http://google.com/\">title</a></h1></body>\n    </html>\n\nturning relative urls into absolute urls\n----------------------------------------\n\nanother thing premailer can do for you is to turn relative urls (e.g.\n\"/some/page.html\" into \"http://www.peterbe.com/some/page.html\"). it does\nthis to all ``href`` and ``src`` attributes that don't have a ``://``\npart in it. for example, turning this:\n\n.. code:: html\n\n    <html>\n    <body>\n    <a href=\"/\">home</a>\n    <a href=\"page.html\">page</a>\n    <a href=\"http://crosstips.org\">external</a>\n    <img src=\"/folder/\">folder</a>\n    </body>\n    </html>\n\ninto this:\n\n.. code:: html\n\n    <html>\n    <body>\n    <a href=\"http://www.peterbe.com/\">home</a>\n    <a href=\"http://www.peterbe.com/page.html\">page</a>\n    <a href=\"http://crosstips.org\">external</a>\n    <img src=\"http://www.peterbe.com/folder/\">folder</a>\n    </body>\n    </html>\n\nby using ``transform('...', base_url='http://www.peterbe.com/')``.\n\nignore certain ``<style>`` or ``<link>`` tags\n---------------------------------------------\n\nsuppose you have a style tag that you don't want to have processed and\ntransformed you can simply set a data attribute on the tag like:\n\n.. code:: html\n\n    <head>\n    <style>/* this gets processed */</style>\n    <style data-premailer=\"ignore\">/* this gets ignored */</style>\n    </head>\n\nthat tag gets completely ignored except when the html is processed, the\nattribute ``data-premailer`` is removed.\n\nit works equally for a ``<link>`` tag like:\n\n.. code:: html\n\n    <head>\n    <link rel=\"stylesheet\" href=\"foo.css\" data-premailer=\"ignore\">\n    </head>\n\nhtml attributes created additionally\n------------------------------------\n\ncertain html attributes are also created on the html if the css contains\nany ones that are easily translated into html attributes. for example,\nif you have this css: ``td { background-color:#eee; }`` then this is\ntransformed into ``style=\"background-color:#eee\"`` and as an html\nattribute ``bgcolor=\"#eee\"``.\n\nhaving these extra attributes basically as a \"back up\" for really shit\nemail clients that can't even take the style attributes. a lot of\nprofessional html newsletters such as amazon's use this. you can disable\nsome attributes in ``disable_basic_attributes``.\n\n\ncapturing logging from ``cssutils``\n-----------------------------------\n\n`cssutils <https://pypi.python.org/pypi/cssutils/>`__ is the library that\n``premailer`` uses to parse css. it will use the python ``logging`` module\nto mention all issues it has with parsing your css. if you want to capture\nthis, you have to pass in ``cssutils_logging_handler`` and\n``cssutils_logging_level`` (optional). for example like this:\n\n.. code:: python\n\n    >>> import logging\n    >>> import premailer\n    >>> from io import stringio\n    >>> mylog = stringio()\n    >>> myhandler = logging.streamhandler(mylog)\n    >>> p = premailer.premailer(\n    ...     cssutils_logging_handler=myhandler,\n    ...     cssutils_logging_level=logging.info\n    ... )\n    >>> result = p.transform(\"\"\"\n    ...         <html>\n    ...         <style type=\"text/css\">\n    ...         @keyframes foo { from { opacity: 0; } to { opacity: 1; } }\n    ...         </style>\n    ...         <p>hej</p>\n    ...         </html>\n    ... \"\"\")\n    >>> mylog.getvalue()\n    'cssstylesheet: unknown @rule found. [2:1: @keyframes]\\n'\n\n\nif execution speed is on your mind\n----------------------------------\n\nif execution speed is important, it's very plausible that you're not just converting\n1 html document but *a lot* of html documents. then, the first thing you should do\nis avoid using the ``premailer.transform`` function because it creates a ``premailer``\nclass instance every time.\n\n.. code:: python\n\n    # wrong way!\n    from premailer import transform\n\n    for html_string in get_html_documents():\n        transformed = transform(html_string, base_url=my_base_url)\n        # do something with 'transformed'\n\ninstead...\n\n.. code:: python\n\n    # right way\n    from premailer import premailer\n\n    instance = premailer(base_url=my_base_url)\n    for html_string in get_html_documents():\n        transformed = instance.transform(html_string)\n        # do something with 'transformed'\n\nanother thing to watch out for when you're reusing the same imported python code\nand reusing it is that internal memoize function caches might build up. the\nenvironment variable to control is ``premailer_cache_maxsize``. this parameter\nrequires a little bit of fine-tuning and calibration if your workload is really\nbig and memory even becomes an issue.\n\nadvanced options\n----------------\n\nbelow are some advanced configuration options that probably doesn't matter for\nmost people with regular load.\n\nchoosing the cache implementation\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nby default, ``premailer`` uses `lfucache\n<https://cachetools.readthedocs.io/en/latest/#cachetools.lfucache>`__ to cache\nselectors, styles and parsed css strings. if lfu doesn't serve your purpose, it\nis possible to switch to an alternate implementation using below environment\nvariables.\n\n- ``premailer_cache``: can be lru, lfu or ttl. default is lfu.\n- ``premailer_cache_maxsize``: maximum no. of items to be stored in cache. defaults to 128.\n- ``premailer_cache_ttl``: time to live for cache entries. only applicable for ttl cache. defaults to 1 hour.\n\n\ngetting coding\n--------------\n\nfirst clone the code and create whatever virtualenv you need, then run:\n\n.. code:: bash\n\n    pip install -e \".[dev]\"\n\n\nthen to run the tests, run:\n\n.. code:: bash\n\n    tox\n\nthis will run the *whole test suite* for every possible version of python\nit can find on your system. to run the tests more incrementally, open\nup the ``tox.ini`` and see how it works.\n\ncode style is all black\n-----------------------\n\nall code has to be formatted with `black <https://pypi.org/project/black/>`_\nand the best tool for checking this is\n`therapist <https://pypi.org/project/therapist/>`_ since it can help you run\nall, help you fix things, and help you make sure linting is passing before\nyou git commit. this project also uses ``flake8`` to check other things\nblack can't check.\n\nto check linting with ``tox`` use:\n\n.. code:: bash\n\n    tox -e lint\n\nto install the ``therapist`` pre-commit hook simply run:\n\n.. code:: bash\n\n    therapist install\n\nwhen you run ``therapist run`` it will only check the files you've touched.\nto run it for all files use:\n\n.. code:: bash\n\n    therapist run --use-tracked-files\n\nand to fix all/any issues run:\n\n.. code:: bash\n\n    therapist run --use-tracked-files --fix\n\n\n\n",
  "docs_url": null,
  "keywords": "html lxml email mail style",
  "license": "python",
  "name": "premailer",
  "package_url": "https://pypi.org/project/premailer/",
  "project_url": "https://pypi.org/project/premailer/",
  "project_urls": {
    "Homepage": "http://github.com/peterbe/premailer"
  },
  "release_url": "https://pypi.org/project/premailer/3.10.0/",
  "requires_dist": [
    "therapist ; extra == 'dev'",
    "lxml",
    "cssselect",
    "cssutils",
    "requests",
    "cachetools",
    "tox ; extra == 'dev'",
    "twine ; extra == 'dev'",
    "black ; extra == 'dev'",
    "flake8 ; extra == 'dev'",
    "wheel ; extra == 'dev'",
    "nose ; extra == 'test'",
    "mock ; extra == 'test'"
  ],
  "requires_python": "",
  "summary": "turns css blocks into style attributes",
  "version": "3.10.0",
  "releases": [],
  "developers": [
    "mail@peterbe.com",
    "peter_bengtsson"
  ],
  "kwds": "sponsorship sponsors logos lxml contact",
  "license_kwds": "python",
  "libtype": "pypi",
  "id": "pypi_premailer",
  "homepage": "http://github.com/peterbe/premailer",
  "release_count": 66,
  "dependency_ids": [
    "pypi_black",
    "pypi_cachetools",
    "pypi_cssselect",
    "pypi_cssutils",
    "pypi_flake8",
    "pypi_lxml",
    "pypi_mock",
    "pypi_nose",
    "pypi_requests",
    "pypi_therapist",
    "pypi_tox",
    "pypi_twine",
    "pypi_wheel"
  ]
}
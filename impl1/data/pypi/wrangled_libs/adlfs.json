{
  "classifiers": [
    "intended audience :: developers",
    "license :: osi approved :: bsd license",
    "operating system :: os independent",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9"
  ],
  "description": "filesystem interface to azure-datalake gen1 and gen2 storage \n------------------------------------------------------------\n\n\n[![pypi version shields.io](https://img.shields.io/pypi/v/adlfs.svg)](https://pypi.python.org/pypi/adlfs/)\n[![latest conda-forge version](https://img.shields.io/conda/vn/conda-forge/adlfs?logo=conda-forge)](https://anaconda.org/conda-forge/aldfs)\n\nquickstart\n----------\n\nthis package can be installed using:\n\n`pip install adlfs`\n\nor\n\n`conda install -c conda-forge adlfs`\n\nthe `adl://` and `abfs://` protocols are included in fsspec's known_implementations registry \nin fsspec > 0.6.1, otherwise users must explicitly inform fsspec about the supported adlfs protocols.\n\nto use the gen1 filesystem:\n\n```python\nimport dask.dataframe as dd\n\nstorage_options={'tenant_id': tenant_id, 'client_id': client_id, 'client_secret': client_secret}\n\ndd.read_csv('adl://{store_name}/{folder}/*.csv', storage_options=storage_options)\n```\n\nto use the gen2 filesystem you can use the protocol `abfs` or `az`:\n\n```python\nimport dask.dataframe as dd\n\nstorage_options={'account_name': account_name, 'account_key': account_key}\n\nddf = dd.read_csv('abfs://{container}/{folder}/*.csv', storage_options=storage_options)\nddf = dd.read_parquet('az://{container}/folder.parquet', storage_options=storage_options)\n\naccepted protocol / uri formats include:\n'protocol://container/path-part/file'\n'protocol://container@account.dfs.core.windows.net/path-part/file'\n\nor optionally, if azure_storage_account_name and an azure_storage_<credential> is \nset as an environmental variable, then storage_options will be read from the environmental\nvariables\n```\n\nto read from a public storage blob you are required to specify the `'account_name'`.\nfor example, you can access [nyc taxi & limousine commission](https://azure.microsoft.com/en-us/services/open-datasets/catalog/nyc-taxi-limousine-commission-green-taxi-trip-records/) as:\n\n```python\nstorage_options = {'account_name': 'azureopendatastorage'}\nddf = dd.read_parquet('az://nyctlc/green/puyear=2019/pumonth=*/*.parquet', storage_options=storage_options)\n```\n\ndetails\n-------\nthe package includes pythonic filesystem implementations for both \nazure datalake gen1 and azure datalake gen2, that facilitate \ninteractions between both azure datalake implementations and dask.  this is done leveraging the \n[intake/filesystem_spec](https://github.com/intake/filesystem_spec/tree/master/fsspec) base class and azure python sdks.\n\noperations against both gen1 datalake currently only work with an azure serviceprincipal\nwith suitable credentials to perform operations on the resources of choice.\n\noperations against the gen2 datalake are implemented by leveraging [azure blob storage python sdk](https://github.com/azure/azure-sdk-for-python).\n\n### setting credentials\nthe `storage_options` can be instantiated with a variety of keyword arguments depending on the filesystem. the most commonly used arguments are:\n- `connection_string`\n- `account_name`\n- `account_key`\n- `sas_token`\n- `tenant_id`, `client_id`, and `client_secret` are combined for an azure serviceprincipal e.g. `storage_options={'account_name': account_name, 'tenant_id': tenant_id, 'client_id': client_id, 'client_secret': client_secret}`\n- `anon`: `true` or `false`. the default value for anon (i.e. anonymous) is true\n- `location_mode`: valid values are \"primary\" or \"secondary\" and apply to ra-grs accounts\n\nfor more argument details see all arguments for [`azureblobfilesystem` here](https://github.com/fsspec/adlfs/blob/f15c37a43afd87a04f01b61cd90294dd57181e1d/adlfs/spec.py#l328) and [`azuredatalakefilesystem` here](https://github.com/fsspec/adlfs/blob/f15c37a43afd87a04f01b61cd90294dd57181e1d/adlfs/spec.py#l69).\n\nthe following environmental variables can also be set and picked up for authentication:\n- \"azure_storage_connection_string\"\n- \"azure_storage_account_name\"\n- \"azure_storage_account_key\"\n- \"azure_storage_sas_token\"\n- \"azure_storage_tenant_id\"\n- \"azure_storage_client_id\"\n- \"azure_storage_client_secret\"\n\nthe filesystem can be instantiated for different use cases based on a variety of `storage_options` combinations. the following list describes some common use cases utilizing `azureblobfilesystem`, i.e. protocols `abfs`or `az`. note that all cases require the `account_name` argument to be provided:\n1. anonymous connection to public container: `storage_options={'account_name': account_name, 'anon': true}` will assume the `account_name` points to a public container, and attempt to use an anonymous login. note, the default value for `anon` is true.\n2. auto credential solving using azure's defaultazurecredential() library: `storage_options={'account_name': account_name, 'anon': false}` will use [`defaultazurecredential`](https://learn.microsoft.com/en-us/python/api/azure-identity/azure.identity.defaultazurecredential?view=azure-python) to get valid credentials to the container `account_name`. `defaultazurecredential` attempts to authenticate via the [mechanisms and order visualized here](https://learn.microsoft.com/en-us/python/api/overview/azure/identity-readme?view=azure-python#defaultazurecredential).\n3. azure serviceprincipal: `tenant_id`, `client_id`, and `client_secret` are all used as credentials for an azure serviceprincipal: e.g. `storage_options={'account_name': account_name, 'tenant_id': tenant_id, 'client_id': client_id, 'client_secret': client_secret}`.\n\n### append blob\nthe `azureblobfilesystem` accepts [all of the async blobserviceclient arguments](https://docs.microsoft.com/en-us/azure/storage/blobs/storage-quickstart-blobs-python).\n\nby default, write operations create blockblobs in azure, which, once written can not be appended. it is possible to create an appendblob using `mode=\"ab\"` when creating and operating on blobs. currently, appendblobs are not available if hierarchical namespaces are enabled.\n",
  "docs_url": null,
  "keywords": "file-system,dask,azure",
  "license": "bsd",
  "name": "adlfs",
  "package_url": "https://pypi.org/project/adlfs/",
  "project_url": "https://pypi.org/project/adlfs/",
  "project_urls": null,
  "release_url": "https://pypi.org/project/adlfs/2023.12.0/",
  "requires_dist": [
    "azure-core <2.0.0,>=1.23.1",
    "azure-datalake-store <0.1,>=0.0.46",
    "azure-identity",
    "azure-storage-blob >=12.12.0",
    "fsspec >=2023.12.0",
    "aiohttp >=3.7.0",
    "sphinx ; extra == 'docs'",
    "myst-parser ; extra == 'docs'",
    "furo ; extra == 'docs'",
    "numpydoc ; extra == 'docs'",
    "pytest ; extra == 'tests'",
    "docker ; extra == 'tests'",
    "pytest-mock ; extra == 'tests'",
    "arrow ; extra == 'tests'",
    "dask[dataframe] ; extra == 'tests'"
  ],
  "requires_python": ">=3.8",
  "summary": "access azure datalake gen1 with fsspec and dask",
  "version": "2023.12.0",
  "releases": [],
  "developers": [
    "hayesgb@gmail.com"
  ],
  "kwds": "azuredatalakefilesystem azure_storage_ azure_storage_sas_token azure_storage_connection_string azureblobfilesystem",
  "license_kwds": "bsd",
  "libtype": "pypi",
  "id": "pypi_adlfs",
  "homepage": "",
  "release_count": 78,
  "dependency_ids": [
    "pypi_aiohttp",
    "pypi_arrow",
    "pypi_azure_core",
    "pypi_azure_datalake_store",
    "pypi_azure_identity",
    "pypi_azure_storage_blob",
    "pypi_dask",
    "pypi_docker",
    "pypi_fsspec",
    "pypi_furo",
    "pypi_myst_parser",
    "pypi_numpydoc",
    "pypi_pytest",
    "pypi_pytest_mock",
    "pypi_sphinx"
  ]
}
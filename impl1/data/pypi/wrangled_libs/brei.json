{
  "classifiers": [
    "license :: other/proprietary license",
    "programming language :: python :: 3",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.12"
  ],
  "description": "# brei\n[![github org's stars](https://img.shields.io/github/stars/entangled)](https://github.com/entangled/brei)\n[![python package](https://github.com/entangled/brei/actions/workflows/python-package.yml/badge.svg)](https://github.com/entangled/brei/actions/workflows/python-package.yml)\n[![pypi - version](https://img.shields.io/pypi/v/brei)](https://pypi.org/project/brei)\n[![entangled badge](https://img.shields.io/badge/entangled-use%20the%20source!-%2300aeff)](https://entangled.github.io/)\n\nminimal workflow system and alternative to make.\n\n- read from toml or json (also `pyproject.toml` in `[tool.brei]` section)\n- only python &ge; 3.11 required\n- runs task lazily and in parallel\n- supports variables, templates, includes and custom runners\n\nread more: [documentation](https://entangled.github.io/brei)\n\n## why (yet another workflow tool)\nthis tool was developed as part of the entangled project, but can be used on its own. brei is meant to perform small scale automisations for literate programming in entangled, like generating figures, and performing computations locally. it requires no setup to work with and workflows are easy to understand by novice users. if you have any more serious needs than that, we'd recommend to use a more tried and proven system, of which there are too many to count.\n\n## when to use\nyou're running a project, there's lots of odds and ends that need automisation. you'd use a `makefile` but your friend is on windows and doesn't have gnu make installed. you try to ship a product that needs this, but don't want to confront people trying it for the first time with a tonne of stuff they've never heard of.\n\n## install\nto install, you may:\n\n```\npip install brei\n```\n\nor you use a tool for virtual environments, we recommend [poetry](https://python-poetry.org/), after creating a new project with `poetry init`:\n\n```\npoetry add brei\n```\n\n## development\nto run unit tests and type checker:\n\n```\npoetry install\npoetry shell\nbrei test\n```\n\nto build the documentation, run the `brei weave` workflow:\n\n```\n# poetry shell\nbrei weave\n```\n\nsome parts of brei are literate. run the entangled watch daemon while editing code,\n\n```\nentangled watch\n```\n\nor else, as a batch job, stitch changes before committing:\n\n```\nentangled stitch\n```\n\n## license\ncopyright netherlands escience center, apache license, see license.\n\n",
  "docs_url": null,
  "keywords": "",
  "license": "apache 2",
  "name": "brei",
  "package_url": "https://pypi.org/project/brei/",
  "project_url": "https://pypi.org/project/brei/",
  "project_urls": null,
  "release_url": "https://pypi.org/project/brei/0.2.3/",
  "requires_dist": [
    "argh (>=0.30.2,<0.31.0)",
    "rich (>=13.6.0,<14.0.0)",
    "rich-argparse (>=1.3.0,<2.0.0)"
  ],
  "requires_python": ">=3.11,<4.0",
  "summary": "a minimal build system.",
  "version": "0.2.3",
  "releases": [],
  "developers": [
    "j.hidding@esciencecenter.nl",
    "johan_hidding"
  ],
  "kwds": "workflows pip pypi workflow entangled",
  "license_kwds": "apache 2",
  "libtype": "pypi",
  "id": "pypi_brei",
  "homepage": "",
  "release_count": 5,
  "dependency_ids": [
    "pypi_argh",
    "pypi_rich",
    "pypi_rich_argparse"
  ]
}
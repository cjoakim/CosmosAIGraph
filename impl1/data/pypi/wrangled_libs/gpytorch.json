{
  "classifiers": [
    "development status :: 5 - production/stable",
    "programming language :: python :: 3"
  ],
  "description": "# gpytorch\n\n---\n[![test suite](https://github.com/cornellius-gp/gpytorch/actions/workflows/run_test_suite.yml/badge.svg)](https://github.com/cornellius-gp/gpytorch/actions/workflows/run_test_suite.yml)\n[![documentation status](https://readthedocs.org/projects/gpytorch/badge/?version=latest)](https://gpytorch.readthedocs.io/en/latest/?badge=latest)\n[![license](https://img.shields.io/badge/license-mit-green.svg)](license)\n\n[![python version](https://img.shields.io/badge/python-3.8+-blue.svg)](https://www.python.org/downloads/)\n[![conda](https://img.shields.io/conda/v/gpytorch/gpytorch.svg)](https://anaconda.org/gpytorch/gpytorch)\n[![pypi](https://img.shields.io/pypi/v/gpytorch.svg)](https://pypi.org/project/gpytorch)\n\ngpytorch is a gaussian process library implemented using pytorch. gpytorch is designed for creating scalable, flexible, and modular gaussian process models with ease.\n\ninternally, gpytorch differs from many existing approaches to gp inference by performing most inference operations using numerical linear algebra techniques like preconditioned conjugate gradients.\nimplementing a scalable gp method is as simple as providing a matrix multiplication routine with the kernel matrix and its derivative via our [linearoperator](https://github.com/cornellius-gp/linear_operator) interface,\nor by composing many of our already existing `linearoperators`.\nthis allows not only for easy implementation of popular scalable gp techniques,\nbut often also for significantly improved utilization of gpu computing compared to solvers based on the cholesky decomposition.\n\ngpytorch provides (1) significant gpu acceleration (through mvm based inference);\n(2) state-of-the-art implementations of the latest algorithmic advances for scalability and flexibility ([ski/kiss-gp](http://proceedings.mlr.press/v37/wilson15.pdf), [stochastic lanczos expansions](https://arxiv.org/abs/1711.03481), [love](https://arxiv.org/pdf/1803.06058.pdf), [skip](https://arxiv.org/pdf/1802.08903.pdf), [stochastic variational](https://arxiv.org/pdf/1611.00336.pdf) [deep kernel learning](http://proceedings.mlr.press/v51/wilson16.pdf), ...);\n(3) easy integration with deep learning frameworks.\n\n\n## examples, tutorials, and documentation\n\nsee our [**documentation, examples, tutorials**](https://gpytorch.readthedocs.io/en/latest/) on how to construct all sorts of models in gpytorch.\n\n## installation\n\n**requirements**:\n- python >= 3.8\n- pytorch >= 1.11\n\ninstall gpytorch using pip or conda:\n\n```bash\npip install gpytorch\nconda install gpytorch -c gpytorch\n```\n\n(to use packages globally but install gpytorch as a user-only package, use `pip install --user` above.)\n\n#### latest (unstable) version\n\nto upgrade to the latest (unstable) version, run\n\n```bash\npip install --upgrade git+https://github.com/cornellius-gp/linear_operator.git\npip install --upgrade git+https://github.com/cornellius-gp/gpytorch.git\n```\n\n#### development version\n\nif you are contributing a pull request, it is best to perform a manual installation:\n\n```sh\ngit clone https://github.com/cornellius-gp/gpytorch.git\ncd gpytorch\npip install -e .[dev,examples,test,pyro,keops]\n```\n\nto generate the documentation locally, you will also need to run the following command\nfrom the linear_operator folder:\n\n```sh\npip install -r docs/requirements.txt\n```\n\n#### archlinux package\n**note**: experimental aur package. for most users, we recommend installation by conda or pip.\n\ngpytorch is also available on the [archlinux user repository](https://wiki.archlinux.org/index.php/arch_user_repository) (aur).\nyou can install it with an [aur helper](https://wiki.archlinux.org/index.php/aur_helpers), like [`yay`](https://aur.archlinux.org/packages/yay/), as follows:\n\n```bash\nyay -s python-gpytorch\n```\nto discuss any issues related to this aur package refer to the comments section of\n[`python-gpytorch`](https://aur.archlinux.org/packages/python-gpytorch/).\n\n\n## citing us\n\nif you use gpytorch, please cite the following papers:\n> [gardner, jacob r., geoff pleiss, david bindel, kilian q. weinberger, and andrew gordon wilson. \"gpytorch: blackbox matrix-matrix gaussian process inference with gpu acceleration.\" in advances in neural information processing systems (2018).](https://arxiv.org/abs/1809.11165)\n```\n@inproceedings{gardner2018gpytorch,\n  title={gpytorch: blackbox matrix-matrix gaussian process inference with gpu acceleration},\n  author={gardner, jacob r and pleiss, geoff and bindel, david and weinberger, kilian q and wilson, andrew gordon},\n  booktitle={advances in neural information processing systems},\n  year={2018}\n}\n```\n\n## contributing\n\nsee the contributing guidelines [contributing.md](https://github.com/cornellius-gp/gpytorch/blob/master/contributing.md)\nfor information on submitting issues and pull requests.\n\n\n## the team\n\ngpytorch is primarily maintained by:\n- [jake gardner](https://www.cis.upenn.edu/~jacobrg/index.html) (university of pennsylvania)\n- [geoff pleiss](http://github.com/gpleiss) (columbia university)\n- [kilian weinberger](http://kilian.cs.cornell.edu/) (cornell university)\n- [andrew gordon wilson](https://cims.nyu.edu/~andrewgw/) (new york university)\n- [max balandat](https://research.fb.com/people/balandat-max/) (meta)\n\nwe would like to thank our other contributors including (but not limited to)\neytan bakshy,\nwesley maddox,\nke alexander wang,\nruihan wu,\nsait cakmak,\ndavid eriksson,\nsam daulton,\nmartin jankowiak,\nsam stanton,\nzitong zhou,\ndavid arbour,\nkarthik rajkumar,\nbram wallace,\njared frank,\nand many more!\n\n\n## acknowledgements\ndevelopment of gpytorch is supported by funding from\nthe [bill and melinda gates foundation](https://www.gatesfoundation.org/),\nthe [national science foundation](https://www.nsf.gov/),\n[sap](https://www.sap.com/index.html),\nthe [simons foundation](https://www.simonsfoundation.org),\nand the [gatsby charitable trust](https://www.gatsby.org.uk).\n\n\n## license\n\ngpytorch is [mit licensed](https://github.com/cornellius-gp/gpytorch/blob/main/license).\n\n\n",
  "docs_url": null,
  "keywords": "",
  "license": "mit",
  "name": "gpytorch",
  "package_url": "https://pypi.org/project/gpytorch/",
  "project_url": "https://pypi.org/project/gpytorch/",
  "project_urls": {
    "Documentation": "https://gpytorch.readthedocs.io",
    "Homepage": "https://gpytorch.ai",
    "Source": "https://github.com/cornellius-gp/gpytorch/"
  },
  "release_url": "https://pypi.org/project/gpytorch/1.11/",
  "requires_dist": [
    "scikit-learn",
    "linear-operator (>=0.5.0)",
    "ufmt ; extra == 'dev'",
    "twine ; extra == 'dev'",
    "pre-commit ; extra == 'dev'",
    "ipython ; extra == 'examples'",
    "jupyter ; extra == 'examples'",
    "matplotlib ; extra == 'examples'",
    "scipy ; extra == 'examples'",
    "torchvision ; extra == 'examples'",
    "tqdm ; extra == 'examples'",
    "pykeops (>=1.1.1) ; extra == 'keops'",
    "pyro-ppl (>=1.8) ; extra == 'pyro'",
    "flake8 (==4.0.1) ; extra == 'test'",
    "flake8-print (==4.0.0) ; extra == 'test'",
    "pytest ; extra == 'test'",
    "nbval ; extra == 'test'"
  ],
  "requires_python": ">=3.8",
  "summary": "an implementation of gaussian processes in pytorch",
  "version": "1.11",
  "releases": [],
  "developers": [
    "gpleiss@gmail.com",
    "jake_gardner"
  ],
  "kwds": "gpytorch pytorch badge eytan pip",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_gpytorch",
  "homepage": "https://gpytorch.ai",
  "release_count": 38,
  "dependency_ids": [
    "pypi_flake8",
    "pypi_flake8_print",
    "pypi_ipython",
    "pypi_jupyter",
    "pypi_linear_operator",
    "pypi_matplotlib",
    "pypi_nbval",
    "pypi_pre_commit",
    "pypi_pykeops",
    "pypi_pyro_ppl",
    "pypi_pytest",
    "pypi_scikit_learn",
    "pypi_scipy",
    "pypi_torchvision",
    "pypi_tqdm",
    "pypi_twine",
    "pypi_ufmt"
  ]
}
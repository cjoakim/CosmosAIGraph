{
  "classifiers": [
    "development status :: 3 - alpha",
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "programming language :: python :: 3",
    "programming language :: python :: 3 :: only",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "programming language :: python :: implementation :: cpython",
    "programming language :: python :: implementation :: pypy",
    "topic :: internet :: www/http",
    "topic :: system :: networking"
  ],
  "description": "h11\n===\n\n.. image:: https://travis-ci.org/python-hyper/h11.svg?branch=master\n   :target: https://travis-ci.org/python-hyper/h11\n   :alt: automated test status\n\n.. image:: https://codecov.io/gh/python-hyper/h11/branch/master/graph/badge.svg\n   :target: https://codecov.io/gh/python-hyper/h11\n   :alt: test coverage\n\n.. image:: https://readthedocs.org/projects/h11/badge/?version=latest\n   :target: http://h11.readthedocs.io/en/latest/?badge=latest\n   :alt: documentation status\n\nthis is a little http/1.1 library written from scratch in python,\nheavily inspired by `hyper-h2 <https://hyper-h2.readthedocs.io/>`_.\n\nit's a \"bring-your-own-i/o\" library; h11 contains no io code\nwhatsoever. this means you can hook h11 up to your favorite network\napi, and that could be anything you want: synchronous, threaded,\nasynchronous, or your own implementation of `rfc 6214\n<https://tools.ietf.org/html/rfc6214>`_ -- h11 won't judge you.\n(compare this to the current state of the art, where every time a `new\nnetwork api <https://trio.readthedocs.io/>`_ comes along then someone\ngets to start over reimplementing the entire http protocol from\nscratch.) cory benfield made an `excellent blog post describing the\nbenefits of this approach\n<https://lukasa.co.uk/2015/10/the_new_hyper/>`_, or if you like video\nthen here's his `pycon 2016 talk on the same theme\n<https://www.youtube.com/watch?v=7cc3_jgwl_u>`_.\n\nthis also means that h11 is not immediately useful out of the box:\nit's a toolkit for building programs that speak http, not something\nthat could directly replace ``requests`` or ``twisted.web`` or\nwhatever. but h11 makes it much easier to implement something like\n``requests`` or ``twisted.web``.\n\nat a high level, working with h11 goes like this:\n\n1) first, create an ``h11.connection`` object to track the state of a\n   single http/1.1 connection.\n\n2) when you read data off the network, pass it to\n   ``conn.receive_data(...)``; you'll get back a list of objects\n   representing high-level http \"events\".\n\n3) when you want to send a high-level http event, create the\n   corresponding \"event\" object and pass it to ``conn.send(...)``;\n   this will give you back some bytes that you can then push out\n   through the network.\n\nfor example, a client might instantiate and then send a\n``h11.request`` object, then zero or more ``h11.data`` objects for the\nrequest body (e.g., if this is a post), and then a\n``h11.endofmessage`` to indicate the end of the message. then the\nserver would then send back a ``h11.response``, some ``h11.data``, and\nits own ``h11.endofmessage``. if either side violates the protocol,\nyou'll get a ``h11.protocolerror`` exception.\n\nh11 is suitable for implementing both servers and clients, and has a\npleasantly symmetric api: the events you send as a client are exactly\nthe ones that you receive as a server and vice-versa.\n\n`here's an example of a tiny http client\n<https://github.com/python-hyper/h11/blob/master/examples/basic-client.py>`_\n\nit also has `a fine manual <https://h11.readthedocs.io/>`_.\n\nfaq\n---\n\n*whyyyyy?*\n\ni wanted to play with http in `curio\n<https://curio.readthedocs.io/en/latest/tutorial.html>`__ and `trio\n<https://trio.readthedocs.io>`__, which at the time didn't have any\nhttp libraries. so i thought, no big deal, python has, like, a dozen\ndifferent implementations of http, surely i can find one that's\nreusable. i didn't find one, but i did find cory's call-to-arms\nblog-post. so i figured, well, fine, if i have to implement http from\nscratch, at least i can make sure no-one *else* has to ever again.\n\n*should i use it?*\n\nmaybe. you should be aware that it's a very young project. but, it's\nfeature complete and has an exhaustive test-suite and complete docs,\nso the next step is for people to try using it and see how it goes\n:-). if you do then please let us know -- if nothing else we'll want\nto talk to you before making any incompatible changes!\n\n*what are the features/limitations?*\n\nroughly speaking, it's trying to be a robust, complete, and non-hacky\nimplementation of the first \"chapter\" of the http/1.1 spec: `rfc 7230:\nhttp/1.1 message syntax and routing\n<https://tools.ietf.org/html/rfc7230>`_. that is, it mostly focuses on\nimplementing http at the level of taking bytes on and off the wire,\nand the headers related to that, and tries to be anal about spec\nconformance. it doesn't know about higher-level concerns like url\nrouting, conditional gets, cross-origin cookie policies, or content\nnegotiation. but it does know how to take care of framing,\ncross-version differences in keep-alive handling, and the \"obsolete\nline folding\" rule, so you can focus your energies on the hard /\ninteresting parts for your application, and it tries to support the\nfull specification in the sense that any useful http/1.1 conformant\napplication should be able to use h11.\n\nit's pure python, and has no dependencies outside of the standard\nlibrary.\n\nit has a test suite with 100.0% coverage for both statements and\nbranches.\n\ncurrently it supports python 3 (testing on 3.7-3.10) and pypy 3.\nthe last python 2-compatible version was h11 0.11.x.\n(originally it had a cython wrapper for `http-parser\n<https://github.com/nodejs/http-parser>`_ and a beautiful nested state\nmachine implemented with ``yield from`` to postprocess the output. but\ni had to take these out -- the new *parser* needs fewer lines-of-code\nthan the old *parser wrapper*, is written in pure python, uses no\nexotic language syntax, and has more features. it's sad, really; that\nold state machine was really slick. i just need a few sentences here\nto mourn that.)\n\ni don't know how fast it is. i haven't benchmarked or profiled it yet,\nso it's probably got a few pointless hot spots, and i've been trying\nto err on the side of simplicity and robustness instead of\nmicro-optimization. but at the architectural level i tried hard to\navoid fundamentally bad decisions, e.g., i believe that all the\nparsing algorithms remain linear-time even in the face of pathological\ninput like slowloris, and there are no byte-by-byte loops. (i also\nbelieve that it maintains bounded memory usage in the face of\narbitrary/pathological input.)\n\nthe whole library is ~800 lines-of-code. you can read and understand\nthe whole thing in less than an hour. most of the energy invested in\nthis so far has been spent on trying to keep things simple by\nminimizing special-cases and ad hoc state manipulation; even though it\nis now quite small and simple, i'm still annoyed that i haven't\nfigured out how to make it even smaller and simpler. (unfortunately,\nhttp does not lend itself to simplicity.)\n\nthe api is ~feature complete and i don't expect the general outlines\nto change much, but you can't judge an api's ergonomics until you\nactually document and use it, so i'd expect some changes in the\ndetails.\n\n*how do i try it?*\n\n.. code-block:: sh\n\n  $ pip install h11\n  $ git clone git@github.com:python-hyper/h11\n  $ cd h11/examples\n  $ python basic-client.py\n\nand go from there.\n\n*license?*\n\nmit\n\n*code of conduct?*\n\ncontributors are requested to follow our `code of conduct\n<https://github.com/python-hyper/h11/blob/master/code_of_conduct.md>`_ in\nall project spaces.\n",
  "docs_url": null,
  "keywords": "",
  "license": "mit",
  "name": "h11",
  "package_url": "https://pypi.org/project/h11/",
  "project_url": "https://pypi.org/project/h11/",
  "project_urls": {
    "Homepage": "https://github.com/python-hyper/h11"
  },
  "release_url": "https://pypi.org/project/h11/0.14.0/",
  "requires_dist": [
    "typing-extensions ; python_version < \"3.8\""
  ],
  "requires_python": ">=3.7",
  "summary": "a pure-python, bring-your-own-i/o implementation of http/1.1",
  "version": "0.14.0",
  "releases": [],
  "developers": [
    "nathaniel_j",
    "njs@pobox.com"
  ],
  "kwds": "h11 the_new_hyper hyper h2 alt",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_h11",
  "homepage": "https://github.com/python-hyper/h11",
  "release_count": 12,
  "dependency_ids": [
    "pypi_typing_extensions"
  ]
}
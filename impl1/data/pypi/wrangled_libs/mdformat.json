{
  "classifiers": [
    "environment :: console",
    "license :: osi approved :: mit license",
    "operating system :: macos",
    "operating system :: microsoft :: windows",
    "operating system :: posix :: linux",
    "topic :: documentation",
    "topic :: software development :: libraries :: python modules",
    "topic :: text processing :: markup",
    "typing :: typed"
  ],
  "description": "<div align=\"center\">\n\n[![documentation status](https://readthedocs.org/projects/mdformat/badge/?version=latest)](https://mdformat.readthedocs.io/en/latest/?badge=latest)\n[![build status](https://github.com/executablebooks/mdformat/workflows/tests/badge.svg?branch=master)](https://github.com/executablebooks/mdformat/actions?query=workflow%3atests+branch%3amaster+event%3apush)\n[![codecov.io](https://codecov.io/gh/executablebooks/mdformat/branch/master/graph/badge.svg)](https://codecov.io/gh/executablebooks/mdformat)\n[![pypi version](https://img.shields.io/pypi/v/mdformat)](https://pypi.org/project/mdformat)\n\n# ![mdformat](https://raw.githubusercontent.com/executablebooks/mdformat/master/docs/_static/logo.svg)\n\n> commonmark compliant markdown formatter\n\n</div>\n\n<!-- start mini-description -->\n\nmdformat is an opinionated markdown formatter\nthat can be used to enforce a consistent style in markdown files.\nmdformat is a unix-style command-line tool as well as a python library.\n\n<!-- end mini-description -->\n\nfind out more in the [docs](https://mdformat.readthedocs.io).\n\n<!-- start installing -->\n\n## installing\n\ninstall with [commonmark](https://spec.commonmark.org/current/) support:\n\n```bash\npip install mdformat\n```\n\ninstall with [github flavored markdown (gfm)](https://github.github.com/gfm/) support:\n\n```bash\npip install mdformat-gfm\n```\n\nnote that github's markdown renderer supports syntax extensions not included in the gfm specification.\nfor full github support do:\n\n```bash\npip install mdformat-gfm mdformat-frontmatter mdformat-footnote\n```\n\ninstall with [markedly structured text (myst)](https://myst-parser.readthedocs.io/en/latest/using/syntax.html) support:\n\n```bash\npip install mdformat-myst\n```\n\n<!-- end installing -->\n\n<!-- start cli-usage -->\n\n## command line usage\n\n### format files\n\nformat files `readme.md` and `changelog.md` in place\n\n```bash\nmdformat readme.md changelog.md\n```\n\nformat `.md` files in current working directory recursively\n\n```bash\nmdformat .\n```\n\nread markdown from standard input until `eof`.\nwrite formatted markdown to standard output.\n\n```bash\nmdformat -\n```\n\n### check formatting\n\n```bash\nmdformat --check readme.md changelog.md\n```\n\nthis will not apply any changes to the files.\nif a file is not properly formatted, the exit code will be non-zero.\n\n### options\n\n```console\nfoo@bar:~$ mdformat --help\nusage: mdformat [-h] [--check] [--version] [--number] [--wrap {keep,no,integer}] [--end-of-line {lf,crlf,keep}] [paths ...]\n\ncommonmark compliant markdown formatter\n\npositional arguments:\n  paths                 files to format\n\noptions:\n  -h, --help            show this help message and exit\n  --check               do not apply changes to files\n  --version             show program's version number and exit\n  --number              apply consecutive numbering to ordered lists\n  --wrap {keep,no,integer}\n                        paragraph word wrap mode (default: keep)\n  --end-of-line {lf,crlf,keep}\n                        output file line ending mode (default: lf)\n```\n\n<!-- end cli-usage -->\n\n## documentation\n\nthis readme merely provides a quickstart guide for the command line interface.\nfor more information refer to the [documentation](https://mdformat.readthedocs.io).\nhere's a few pointers to get you started:\n\n- [style guide](https://mdformat.readthedocs.io/en/stable/users/style.html)\n- [python api usage](https://mdformat.readthedocs.io/en/stable/users/installation_and_usage.html#python-api-usage)\n- [usage as a pre-commit hook](https://mdformat.readthedocs.io/en/stable/users/installation_and_usage.html#usage-as-a-pre-commit-hook)\n- [plugin usage](https://mdformat.readthedocs.io/en/stable/users/plugins.html)\n- [plugin development guide](https://mdformat.readthedocs.io/en/stable/contributors/contributing.html)\n- [list of code block formatter plugins](https://mdformat.readthedocs.io/en/stable/users/plugins.html#existing-plugins)\n- [list of parser extension plugins](https://mdformat.readthedocs.io/en/stable/users/plugins.html#id1)\n- [changelog](https://mdformat.readthedocs.io/en/stable/users/changelog.html)\n\n<!-- start faq -->\n\n## frequently asked questions\n\n### why not use [prettier](https://github.com/prettier/prettier) instead?\n\nmdformat is pure python code!\npython is pre-installed on macos and virtually any linux distribution,\nmeaning that typically little to no additional installations are required to run mdformat.\nthis argument also holds true when using together with\n[pre-commit](https://github.com/pre-commit/pre-commit) (also python).\nprettier on the other hand requires node.js/npm.\n\nprettier suffers from\n[numerous](https://github.com/prettier/prettier/issues?q=is%3aopen+label%3alang%3amarkdown+label%3atype%3abug+)\nbugs,\nmany of which cause changes in markdown ast and rendered html.\nmany of these bugs are a consequence of using\n[`remark-parse`](https://github.com/remarkjs/remark/tree/main/packages/remark-parse)\nv8.x as markdown parser which,\naccording to the author themselves,\nis [inferior to markdown-it](https://github.com/remarkjs/remark/issues/75#issuecomment-143532326) used by mdformat.\n`remark-parse` v9.x is advertised as commonmark compliant\nand presumably would fix many of the issues,\nbut is not used by prettier (v2.4.0) yet.\n\nprettier (v2.4.0), being able to format many languages other than markdown,\nis a large package with 65 direct dependencies\n(mdformat only has one in python 3.11+).\nthis can be a disadvantage in many environments,\none example being size optimized docker images.\n\nmdformat's parser extension plugin api allows not only customization of the markdown specification in use,\nbut also advanced features like [automatic table of contents generation](https://github.com/hukkin/mdformat-toc).\nalso provided is a code formatter plugin api enabling integration of embedded code formatting for any programming language.\n\n### what's wrong with the mdformat logo? it renders incorrectly and is just terrible in general.\n\nnope, the logo is actually pretty great \u2013 you're terrible.\nthe logo is more a piece of art than a logo anyways,\ndepicting the horrors of poorly formatted text documents.\ni made it myself!\n\nthat said, if you have any graphic design skills and want to contribute a revised version, a pr is more than welcome \ud83d\ude04.\n\n<!-- end faq -->\n",
  "docs_url": null,
  "keywords": "mdformat,markdown,commonmark,formatter,pre-commit",
  "license": "mit license  copyright (c) 2021 taneli hukkinen  permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"software\"), to deal in the software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the software, and to permit persons to whom the software is furnished to do so, subject to the following conditions:  the above copyright notice and this permission notice shall be included in all copies or substantial portions of the software.  the software is provided \"as is\", without warranty of any kind, express or implied, including but not limited to the warranties of merchantability, fitness for a particular purpose and noninfringement. in no event shall the authors or copyright holders be liable for any claim, damages or other liability, whether in an action of contract, tort or otherwise, arising from, out of or in connection with the software or the use or other dealings in the software. ",
  "name": "mdformat",
  "package_url": "https://pypi.org/project/mdformat/",
  "project_url": "https://pypi.org/project/mdformat/",
  "project_urls": {
    "Changelog": "https://mdformat.readthedocs.io/en/stable/users/changelog.html",
    "Documentation": "https://mdformat.readthedocs.io",
    "Homepage": "https://github.com/executablebooks/mdformat",
    "Style guide": "https://mdformat.readthedocs.io/en/stable/users/style.html"
  },
  "release_url": "https://pypi.org/project/mdformat/0.7.17/",
  "requires_dist": [
    "markdown-it-py <4.0.0,>=1.0.0",
    "importlib-metadata >=3.6.0 ; python_version < \"3.10\"",
    "tomli >=1.1.0 ; python_version < \"3.11\""
  ],
  "requires_python": ">=3.8",
  "summary": "commonmark compliant markdown formatter",
  "version": "0.7.17",
  "releases": [],
  "developers": [
    "hukkin@users.noreply.github.com"
  ],
  "kwds": "mdformat badge markdown md workflows",
  "license_kwds": "copyright license liable liability mit",
  "libtype": "pypi",
  "id": "pypi_mdformat",
  "homepage": "",
  "release_count": 43,
  "dependency_ids": [
    "pypi_importlib_metadata",
    "pypi_markdown_it_py",
    "pypi_tomli"
  ]
}
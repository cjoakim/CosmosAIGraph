{
  "classifiers": [
    "development status :: 4 - beta",
    "intended audience :: education",
    "intended audience :: science/research",
    "license :: osi approved :: mit license",
    "programming language :: cython",
    "programming language :: python :: 3",
    "topic :: scientific/engineering :: mathematics"
  ],
  "description": "pyscipopt\n=========\n\nthis project provides an interface from python to the [scip optimization suite](https://www.scipopt.org/). starting from v8.0.3, scip uses the [apache2.0](https://www.apache.org/licenses/license-2.0) license. if you plan to use an earlier version of scip, please review [scip's license restrictions](https://scipopt.org/index.php#license).\n\n[![gitter](https://badges.gitter.im/join%20chat.svg)](https://gitter.im/pyscipopt/lobby)\n[![pyscipopt on pypi](https://img.shields.io/pypi/v/pyscipopt.svg)](https://pypi.python.org/pypi/pyscipopt)\n[![integration test](https://github.com/scipopt/pyscipopt/actions/workflows/integration-test.yml/badge.svg)](https://github.com/scipopt/pyscipopt/actions/workflows/integration-test.yml)\n[![coverage](https://img.shields.io/codecov/c/github/scipopt/pyscipopt)](https://app.codecov.io/gh/scipopt/pyscipopt/)\n[![appveyor status](https://ci.appveyor.com/api/projects/status/fsa896vkl8be79j9/branch/master?svg=true)](https://ci.appveyor.com/project/mattmilten/pyscipopt/branch/master)\n\n\ndocumentation\n-------------\n\nplease consult the [online documentation](https://scipopt.github.io/pyscipopt/docs/html) or use the `help()` function directly in python or `?` in ipython/jupyter.\n\nsee [changelog.md](changelog.md) for added, removed or fixed functionality.\n\ninstallation\n------------\n\n**using conda**\n\n[![conda version](https://img.shields.io/conda/vn/conda-forge/pyscipopt?logo=conda-forge)](https://anaconda.org/conda-forge/pyscipopt)\n[![conda platforms](https://img.shields.io/conda/pn/conda-forge/pyscipopt?logo=conda-forge)](https://anaconda.org/conda-forge/pyscipopt)\n\n***do not use the conda base environment to install pyscipopt.***\n\nconda will install scip automatically, hence everything can be installed in a single command:\n```bash\nconda install --channel conda-forge pyscipopt\n```\n\n**using pypi and from source**\n\nsee [install.md](install.md) for instructions.\nplease note that the latest pyscipopt version is usually only compatible with the latest major release of the scip optimization suite.\nthe following table summarizes which version of pyscipopt is required for a given scip version:\n\n|scip| pyscipopt |\n|----|----|\n8.0 | 4.x\n7.0 | 3.x\n6.0 | 2.x\n5.0 | 1.4, 1.3\n4.0 | 1.2, 1.1\n3.2 | 1.0\n\ninformation which version of pyscipopt is required for a given scip version can also be found in [install.md](install.md).\n\nbuilding and solving a model\n----------------------------\n\nthere are several [examples](examples/finished) and\n[tutorials](examples/tutorial). these display some functionality of the\ninterface and can serve as an entry point for writing more complex code.\nyou might also want to have a look at this article about pyscipopt:\n<https://opus4.kobv.de/opus4-zib/frontdoor/index/index/docid/6045>. the\nfollowing steps are always required when using the interface:\n\n1)  it is necessary to import python-scip in your code. this is achieved\n    by including the line\n\n``` {.sourcecode .python}\nfrom pyscipopt import model\n```\n\n2)  create a solver instance.\n\n``` {.sourcecode .python}\nmodel = model(\"example\")  # model name is optional\n```\n\n3)  access the methods in the `scip.pxi` file using the solver/model\n    instance `model`, e.g.:\n\n``` {.sourcecode .python}\nx = model.addvar(\"x\")\ny = model.addvar(\"y\", vtype=\"integer\")\nmodel.setobjective(x + y)\nmodel.addcons(2*x - y*y >= 0)\nmodel.optimize()\nsol = model.getbestsol()\nprint(\"x: {}\".format(sol[x]))\nprint(\"y: {}\".format(sol[y]))\n```\n\nwriting new plugins\n-------------------\n\nthe python interface can be used to define custom plugins to extend the\nfunctionality of scip. you may write a pricer, heuristic or even\nconstraint handler using pure python code and scip can call their\nmethods using the callback system. every available plugin has a base\nclass that you need to extend, overwriting the predefined but empty\ncallbacks. please see `test_pricer.py` and `test_heur.py` for two simple\nexamples.\n\nplease notice that in most cases one needs to use a `dictionary` to\nspecify the return values needed by scip.\n\nextending the interface\n-----------------------\n\npyscipopt already covers many of the scip callable library methods. you\nmay also extend it to increase the functionality of this interface. the\nfollowing will provide some directions on how this can be achieved:\n\nthe two most important files in pyscipopt are the `scip.pxd` and\n`scip.pxi`. these two files specify the public functions of scip that\ncan be accessed from your python code.\n\nto make pyscipopt aware of the public functions you would like to\naccess, you must add them to `scip.pxd`. there are two things that must\nbe done in order to properly add the functions:\n\n1)  ensure any `enum`s, `struct`s or scip variable types are included in\n    `scip.pxd` <br>\n2)  add the prototype of the public function you wish to access to\n    `scip.pxd`\n\nafter following the previous two steps, it is then possible to create\nfunctions in python that reference the scip public functions included in\n`scip.pxd`. this is achieved by modifying the `scip.pxi` file to add the\nfunctionality you require.\n\nwe are always happy to accept pull request containing patches or\nextensions!\n\nplease have a look at our [contribution guidelines](contributing.md).\n\ngotchas\n-------\n\n### ranged constraints\n\nwhile ranged constraints of the form\n\n``` {.sourcecode .}\nlhs <= expression <= rhs\n```\n\nare supported, the python syntax for [chained\ncomparisons](https://docs.python.org/3.5/reference/expressions.html#comparisons)\ncan't be hijacked with operator overloading. instead, parenthesis must\nbe used, e.g.,\n\n``` {.sourcecode .}\nlhs <= (expression <= rhs)\n```\n\nalternatively, you may call `model.chgrhs(cons, newrhs)` or\n`model.chglhs(cons, newlhs)` after the single-sided constraint has been\ncreated.\n\n### variable objects\n\nyou can't use `variable` objects as elements of `set`s or as keys of\n`dict`s. they are not hashable and comparable. the issue is that\ncomparisons such as `x == y` will be interpreted as linear constraints,\nsince `variable`s are also `expr` objects.\n\n### dual values\n\nwhile pyscipopt supports access to the dual values of a solution, there\nare some limitations involved:\n\n-   can only be used when presolving and propagation is disabled to\n    ensure that the lp solver - which is providing the dual\n    information - actually solves the unmodified problem.\n-   heuristics should also be disabled to avoid that the problem is\n    solved before the lp solver is called.\n-   there should be no bound constraints, i.e., constraints with only\n    one variable. this can cause incorrect values as explained in\n    [\\#136](https://github.com/scipopt/pyscipopt/issues/136)\n\ntherefore, you should use the following settings when trying to work\nwith dual information:\n\n``` {.sourcecode .python}\nmodel.setpresolve(pyscipopt.scip_paramsetting.off)\nmodel.setheuristics(pyscipopt.scip_paramsetting.off)\nmodel.disablepropagation()\n```\n\nciting pyscipopt\n----------------\n\nplease cite [this paper](https://opus4.kobv.de/opus4-zib/frontdoor/index/index/docid/6045)\n```\n@incollection{mahermiltenbergerpedrosorehfeldtschwarzserrano2016,\n  author = {stephen maher and matthias miltenberger and jo{\\~{a}}o pedro pedroso and daniel rehfeldt and robert schwarz and felipe serrano},\n  title = {{pyscipopt}: mathematical programming in python with the {scip} optimization suite},\n  booktitle = {mathematical software {\\textendash} {icms} 2016},\n  publisher = {springer international publishing},\n  pages = {301--307},\n  year = {2016},\n  doi = {10.1007/978-3-319-42432-3_37},\n}\n```\nas well as the corresponding [scip optimization suite report](https://scip.zib.de/index.php#cite) when you use this tool for a publication or other scientific work.\n",
  "docs_url": null,
  "keywords": "",
  "license": "mit",
  "name": "pyscipopt",
  "package_url": "https://pypi.org/project/PySCIPOpt/",
  "project_url": "https://pypi.org/project/PySCIPOpt/",
  "project_urls": {
    "Homepage": "https://github.com/SCIP-Interfaces/PySCIPOpt"
  },
  "release_url": "https://pypi.org/project/PySCIPOpt/4.4.0/",
  "requires_dist": [],
  "requires_python": "",
  "summary": "python interface and modeling environment for scip",
  "version": "4.4.0",
  "releases": [],
  "developers": [
    "scip@zib.de",
    "zuse_institute_berlin"
  ],
  "kwds": "pyscipopt scip scipopt scip_paramsetting python",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_pyscipopt",
  "homepage": "https://github.com/scip-interfaces/pyscipopt",
  "release_count": 60,
  "dependency_ids": []
}
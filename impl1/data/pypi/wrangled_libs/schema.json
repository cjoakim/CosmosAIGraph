{
  "classifiers": [
    "development status :: 3 - alpha",
    "license :: osi approved :: mit license",
    "programming language :: python :: 2.6",
    "programming language :: python :: 2.7",
    "programming language :: python :: 3.2",
    "programming language :: python :: 3.3",
    "programming language :: python :: 3.4",
    "programming language :: python :: 3.5",
    "programming language :: python :: 3.6",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "programming language :: python :: implementation :: pypy",
    "topic :: utilities"
  ],
  "description": "simple data validation library\nschema validation just got pythonic\n===============================================================================\n\n**schema** is a library for validating python data structures, such as those\nobtained from config-files, forms, external services or command-line\nparsing, converted from json/yaml (or something else) to python data-types.\n\n\n.. image:: https://secure.travis-ci.org/keleshev/schema.svg?branch=master\n    :target: https://travis-ci.org/keleshev/schema\n\n.. image:: https://img.shields.io/codecov/c/github/keleshev/schema.svg\n    :target: http://codecov.io/github/keleshev/schema\n\nexample\n----------------------------------------------------------------------------\n\nhere is a quick example to get a feeling of **schema**, validating a list of\nentries with personal information:\n\n.. code:: python\n\n    >>> from schema import schema, and, use, optional, schemaerror\n\n    >>> schema = schema([{'name': and(str, len),\n    ...                   'age':  and(use(int), lambda n: 18 <= n <= 99),\n    ...                   optional('gender'): and(str, use(str.lower),\n    ...                                           lambda s: s in ('squid', 'kid'))}])\n\n    >>> data = [{'name': 'sue', 'age': '28', 'gender': 'squid'},\n    ...         {'name': 'sam', 'age': '42'},\n    ...         {'name': 'sacha', 'age': '20', 'gender': 'kid'}]\n\n    >>> validated = schema.validate(data)\n\n    >>> assert validated == [{'name': 'sue', 'age': 28, 'gender': 'squid'},\n    ...                      {'name': 'sam', 'age': 42},\n    ...                      {'name': 'sacha', 'age' : 20, 'gender': 'kid'}]\n\n\nif data is valid, ``schema.validate`` will return the validated data\n(optionally converted with `use` calls, see below).\n\nif data is invalid, ``schema`` will raise ``schemaerror`` exception.\nif you just want to check that the data is valid, ``schema.is_valid(data)`` will\nreturn ``true`` or ``false``.\n\n\ninstallation\n-------------------------------------------------------------------------------\n\nuse `pip <http://pip-installer.org>`_ or easy_install::\n\n    pip install schema\n\nalternatively, you can just drop ``schema.py`` file into your project\u2014it is\nself-contained.\n\n- **schema** is tested with python 2.6, 2.7, 3.2, 3.3, 3.4, 3.5, 3.6, 3.7, 3.8, 3.9 and pypy.\n- **schema** follows `semantic versioning <http://semver.org>`_.\n\nhow ``schema`` validates data\n-------------------------------------------------------------------------------\n\ntypes\n~~~~~\n\nif ``schema(...)`` encounters a type (such as ``int``, ``str``, ``object``,\netc.), it will check if the corresponding piece of data is an instance of that type,\notherwise it will raise ``schemaerror``.\n\n.. code:: python\n\n    >>> from schema import schema\n\n    >>> schema(int).validate(123)\n    123\n\n    >>> schema(int).validate('123')\n    traceback (most recent call last):\n    ...\n    schema.schemaunexpectedtypeerror: '123' should be instance of 'int'\n\n    >>> schema(object).validate('hai')\n    'hai'\n\ncallables\n~~~~~~~~~\n\nif ``schema(...)`` encounters a callable (function, class, or object with\n``__call__`` method) it will call it, and if its return value evaluates to\n``true`` it will continue validating, else\u2014it will raise ``schemaerror``.\n\n.. code:: python\n\n    >>> import os\n\n    >>> schema(os.path.exists).validate('./')\n    './'\n\n    >>> schema(os.path.exists).validate('./non-existent/')\n    traceback (most recent call last):\n    ...\n    schema.schemaerror: exists('./non-existent/') should evaluate to true\n\n    >>> schema(lambda n: n > 0).validate(123)\n    123\n\n    >>> schema(lambda n: n > 0).validate(-12)\n    traceback (most recent call last):\n    ...\n    schema.schemaerror: <lambda>(-12) should evaluate to true\n\n\"validatables\"\n~~~~~~~~~~~~~~\n\nif ``schema(...)`` encounters an object with method ``validate`` it will run\nthis method on corresponding data as ``data = obj.validate(data)``. this method\nmay raise ``schemaerror`` exception, which will tell ``schema`` that that piece\nof data is invalid, otherwise\u2014it will continue validating.\n\nan example of \"validatable\" is ``regex``, that tries to match a string or a\nbuffer with the given regular expression (itself as a string, buffer or\ncompiled regex ``sre_pattern``):\n\n.. code:: python\n\n    >>> from schema import regex\n    >>> import re\n\n    >>> regex(r'^foo').validate('foobar')\n    'foobar'\n\n    >>> regex(r'^[a-z]+$', flags=re.i).validate('those-dashes-dont-match')\n    traceback (most recent call last):\n    ...\n    schema.schemaerror: regex('^[a-z]+$', flags=re.ignorecase) does not match 'those-dashes-dont-match'\n\nfor a more general case, you can use ``use`` for creating such objects.\n``use`` helps to use a function or type to convert a value while validating it:\n\n.. code:: python\n\n    >>> from schema import use\n\n    >>> schema(use(int)).validate('123')\n    123\n\n    >>> schema(use(lambda f: open(f, 'a'))).validate('license-mit')\n    <_io.textiowrapper name='license-mit' mode='a' encoding='utf-8'>\n\ndropping the details, ``use`` is basically:\n\n.. code:: python\n\n    class use(object):\n\n        def __init__(self, callable_):\n            self._callable = callable_\n\n        def validate(self, data):\n            try:\n                return self._callable(data)\n            except exception as e:\n                raise schemaerror('%r raised %r' % (self._callable.__name__, e))\n\n\nsometimes you need to transform and validate part of data, but keep original data unchanged.\n``const`` helps to keep your data safe:\n\n.. code:: python\n\n    >> from schema import use, const, and, schema\n\n    >> from datetime import datetime\n\n    >> is_future = lambda date: datetime.now() > date\n\n    >> to_json = lambda v: {\"timestamp\": v}\n\n    >> schema(and(const(and(use(datetime.fromtimestamp), is_future)), use(to_json))).validate(1234567890)\n    {\"timestamp\": 1234567890}\n\nnow you can write your own validation-aware classes and data types.\n\nlists, similar containers\n~~~~~~~~~~~~~~~~~~~~~~~~~\n\nif ``schema(...)`` encounters an instance of ``list``, ``tuple``, ``set``\nor ``frozenset``, it will validate contents of corresponding data container\nagainst all schemas listed inside that container and aggregate all errors:\n\n.. code:: python\n\n    >>> schema([1, 0]).validate([1, 1, 0, 1])\n    [1, 1, 0, 1]\n\n    >>> schema((int, float)).validate((5, 7, 8, 'not int or float here'))\n    traceback (most recent call last):\n    ...\n    schema.schemaerror: or(<class 'int'>, <class 'float'>) did not validate 'not int or float here'\n    'not int or float here' should be instance of 'int'\n    'not int or float here' should be instance of 'float'\n\ndictionaries\n~~~~~~~~~~~~\n\nif ``schema(...)`` encounters an instance of ``dict``, it will validate data\nkey-value pairs:\n\n.. code:: python\n\n    >>> d = schema({'name': str,\n    ...             'age': lambda n: 18 <= n <= 99}).validate({'name': 'sue', 'age': 28})\n\n    >>> assert d == {'name': 'sue', 'age': 28}\n\nyou can specify keys as schemas too:\n\n.. code:: python\n\n    >>> schema = schema({str: int,  # string keys should have integer values\n    ...                  int: none})  # int keys should be always none\n\n    >>> data = schema.validate({'key1': 1, 'key2': 2,\n    ...                         10: none, 20: none})\n\n    >>> schema.validate({'key1': 1,\n    ...                   10: 'not none here'})\n    traceback (most recent call last):\n    ...\n    schema.schemaerror: key '10' error:\n    none does not match 'not none here'\n\nthis is useful if you want to check certain key-values, but don't care\nabout others:\n\n.. code:: python\n\n    >>> schema = schema({'<id>': int,\n    ...                  '<file>': use(open),\n    ...                  str: object})  # don't care about other str keys\n\n    >>> data = schema.validate({'<id>': 10,\n    ...                         '<file>': 'readme.rst',\n    ...                         '--verbose': true})\n\nyou can mark a key as optional as follows:\n\n.. code:: python\n\n    >>> from schema import optional\n    >>> schema({'name': str,\n    ...         optional('occupation'): str}).validate({'name': 'sam'})\n    {'name': 'sam'}\n\n``optional`` keys can also carry a ``default``, to be used when no key in the\ndata matches:\n\n.. code:: python\n\n    >>> from schema import optional\n    >>> schema({optional('color', default='blue'): str,\n    ...         str: str}).validate({'texture': 'furry'}\n    ...       ) == {'color': 'blue', 'texture': 'furry'}\n    true\n\ndefaults are used verbatim, not passed through any validators specified in the\nvalue.\n\ndefault can also be a callable:\n\n.. code:: python\n\n    >>> from schema import schema, optional\n    >>> schema({optional('data', default=dict): {}}).validate({}) == {'data': {}}\n    true\n\nalso, a caveat: if you specify types, **schema** won't validate the empty dict:\n\n.. code:: python\n\n    >>> schema({int:int}).is_valid({})\n    false\n\nto do that, you need ``schema(or({int:int}, {}))``. this is unlike what happens with\nlists, where ``schema([int]).is_valid([])`` will return true.\n\n\n**schema** has classes ``and`` and ``or`` that help validating several schemas\nfor the same data:\n\n.. code:: python\n\n    >>> from schema import and, or\n\n    >>> schema({'age': and(int, lambda n: 0 < n < 99)}).validate({'age': 7})\n    {'age': 7}\n\n    >>> schema({'password': and(str, lambda s: len(s) > 6)}).validate({'password': 'hai'})\n    traceback (most recent call last):\n    ...\n    schema.schemaerror: key 'password' error:\n    <lambda>('hai') should evaluate to true\n\n    >>> schema(and(or(int, float), lambda x: x > 0)).validate(3.1415)\n    3.1415\n\nin a dictionary, you can also combine two keys in a \"one or the other\" manner. to do\nso, use the `or` class as a key:\n\n.. code:: python\n\n    >>> from schema import or, schema\n    >>> schema = schema({\n    ...    or(\"key1\", \"key2\", only_one=true): str\n    ... })\n\n    >>> schema.validate({\"key1\": \"test\"}) # ok\n    {'key1': 'test'}\n\n    >>> schema.validate({\"key1\": \"test\", \"key2\": \"test\"}) # schemaerror\n    traceback (most recent call last):\n    ...\n    schema.schemaonlyoneallowederror: there are multiple keys present from the or('key1', 'key2') condition\n\nhooks\n~~~~~~~~~~\nyou can define hooks which are functions that are executed whenever a valid key:value is found.\nthe `forbidden` class is an example of this.\n\nyou can mark a key as forbidden as follows:\n\n.. code:: python\n\n    >>> from schema import forbidden\n    >>> schema({forbidden('age'): object}).validate({'age': 50})\n    traceback (most recent call last):\n    ...\n    schema.schemaforbiddenkeyerror: forbidden key encountered: 'age' in {'age': 50}\n\na few things are worth noting. first, the value paired with the forbidden\nkey determines whether it will be rejected:\n\n.. code:: python\n\n    >>> schema({forbidden('age'): str, 'age': int}).validate({'age': 50})\n    {'age': 50}\n\nnote: if we hadn't supplied the 'age' key here, the call would have failed too, but with\nschemawrongkeyerror, not schemaforbiddenkeyerror.\n\nsecond, forbidden has a higher priority than standard keys, and consequently than optional.\nthis means we can do that:\n\n.. code:: python\n\n    >>> schema({forbidden('age'): object, optional(str): object}).validate({'age': 50})\n    traceback (most recent call last):\n    ...\n    schema.schemaforbiddenkeyerror: forbidden key encountered: 'age' in {'age': 50}\n\nyou can also define your own hooks. the following hook will call `_my_function` if `key` is encountered.\n\n.. code:: python\n\n    from schema import hook\n    def _my_function(key, scope, error):\n        print(key, scope, error)\n\n    hook(\"key\", handler=_my_function)\n\nhere's an example where a `deprecated` class is added to log warnings whenever a key is encountered:\n\n.. code:: python\n\n    from schema import hook, schema\n    class deprecated(hook):\n        def __init__(self, *args, **kwargs):\n            kwargs[\"handler\"] = lambda key, *args: logging.warn(f\"`{key}` is deprecated. \" + (self._error or \"\"))\n            super(deprecated, self).__init__(*args, **kwargs)\n\n    schema({deprecated(\"test\", \"custom error message.\"): object}, ignore_extra_keys=true).validate({\"test\": \"value\"})\n    ...\n    warning: `test` is deprecated. custom error message.\n\nextra keys\n~~~~~~~~~~\n\nthe ``schema(...)`` parameter ``ignore_extra_keys`` causes validation to ignore extra keys in a dictionary, and also to not return them after validating.\n\n.. code:: python\n\n    >>> schema = schema({'name': str}, ignore_extra_keys=true)\n    >>> schema.validate({'name': 'sam', 'age': '42'})\n    {'name': 'sam'}\n\nif you would like any extra keys returned, use ``object: object`` as one of the key/value pairs, which will match any key and any value.\notherwise, extra keys will raise a ``schemaerror``.\n\n\ncustomized validation\n~~~~~~~~~~~~~~~~~~~~~~~\n\nthe ``schema.validate`` method accepts additional keyword arguments. the\nkeyword arguments will be propagated to the ``validate`` method of any\nchild validatables (including any ad-hoc ``schema`` objects), or the default\nvalue callable (if a callable is specified) for ``optional`` keys.\n\nthis feature can be used together with inheritance of the ``schema`` class\nfor customized validation.\n\nhere is an example where a \"post-validation\" hook that runs after validation\nagainst a sub-schema in a larger schema:\n\n.. code:: python\n\n    class eventschema(schema.schema):\n\n        def validate(self, data, _is_event_schema=true):\n            data = super(eventschema, self).validate(data, _is_event_schema=false)\n            if _is_event_schema and data.get(\"minimum\", none) is none:\n                data[\"minimum\"] = data[\"capacity\"]\n            return data\n\n\n    events_schema = schema.schema(\n        {\n            str: eventschema({\n                \"capacity\": int,\n                schema.optional(\"minimum\"): int,  # default to capacity\n            })\n        }\n    )\n\n\n    data = {'event1': {'capacity': 1}, 'event2': {'capacity': 2, 'minimum': 3}}\n    events = events_schema.validate(data)\n\n    assert events['event1']['minimum'] == 1  # == capacity\n    assert events['event2']['minimum'] == 3\n\n\nnote that the additional keyword argument ``_is_event_schema`` is necessary to\nlimit the customized behavior to the ``eventschema`` object itself so that it\nwon't affect any recursive invoke of the ``self.__class__.validate`` for the\nchild schemas (e.g., the call to ``schema(\"capacity\").validate(\"capacity\")``).\n\n\nuser-friendly error reporting\n-------------------------------------------------------------------------------\n\nyou can pass a keyword argument ``error`` to any of validatable classes\n(such as ``schema``, ``and``, ``or``, ``regex``, ``use``) to report this error\ninstead of a built-in one.\n\n.. code:: python\n\n    >>> schema(use(int, error='invalid year')).validate('xvii')\n    traceback (most recent call last):\n    ...\n    schema.schemaerror: invalid year\n\nyou can see all errors that occurred by accessing exception's ``exc.autos``\nfor auto-generated error messages, and ``exc.errors`` for errors\nwhich had ``error`` text passed to them.\n\nyou can exit with ``sys.exit(exc.code)`` if you want to show the messages\nto the user without traceback. ``error`` messages are given precedence in that\ncase.\n\na json api example\n-------------------------------------------------------------------------------\n\nhere is a quick example: validation of\n`create a gist <http://developer.github.com/v3/gists/>`_\nrequest from github api.\n\n.. code:: python\n\n    >>> gist = '''{\"description\": \"the description for this gist\",\n    ...            \"public\": true,\n    ...            \"files\": {\n    ...                \"file1.txt\": {\"content\": \"string file contents\"},\n    ...                \"other.txt\": {\"content\": \"another file contents\"}}}'''\n\n    >>> from schema import schema, and, use, optional\n\n    >>> import json\n\n    >>> gist_schema = schema(and(use(json.loads),  # first convert from json\n    ...                          # use str since json returns unicode\n    ...                          {optional('description'): str,\n    ...                           'public': bool,\n    ...                           'files': {str: {'content': str}}}))\n\n    >>> gist = gist_schema.validate(gist)\n\n    # gist:\n    {u'description': u'the description for this gist',\n     u'files': {u'file1.txt': {u'content': u'string file contents'},\n                u'other.txt': {u'content': u'another file contents'}},\n     u'public': true}\n\nusing **schema** with `docopt <http://github.com/docopt/docopt>`_\n-------------------------------------------------------------------------------\n\nassume you are using **docopt** with the following usage-pattern:\n\n    usage: my_program.py [--count=n] <path> <files>...\n\nand you would like to validate that ``<files>`` are readable, and that\n``<path>`` exists, and that ``--count`` is either integer from 0 to 5, or\n``none``.\n\nassuming **docopt** returns the following dict:\n\n.. code:: python\n\n    >>> args = {'<files>': ['license-mit', 'setup.py'],\n    ...         '<path>': '../',\n    ...         '--count': '3'}\n\nthis is how you validate it using ``schema``:\n\n.. code:: python\n\n    >>> from schema import schema, and, or, use\n    >>> import os\n\n    >>> s = schema({'<files>': [use(open)],\n    ...             '<path>': os.path.exists,\n    ...             '--count': or(none, and(use(int), lambda n: 0 < n < 5))})\n\n    >>> args = s.validate(args)\n\n    >>> args['<files>']\n    [<_io.textiowrapper name='license-mit' ...>, <_io.textiowrapper name='setup.py' ...]\n\n    >>> args['<path>']\n    '../'\n\n    >>> args['--count']\n    3\n\nas you can see, **schema** validated data successfully, opened files and\nconverted ``'3'`` to ``int``.\n\njson schema\n-----------\n\nyou can also generate standard `draft-07 json schema <https://json-schema.org/>`_ from a dict ``schema``.\nthis can be used to add word completion, validation, and documentation directly in code editors.\nthe output schema can also be used with json schema compatible libraries.\n\njson: generating\n~~~~~~~~~~~~~~~~\n\njust define your schema normally and call ``.json_schema()`` on it. the output is a python dict, you need to dump it to json.\n\n.. code:: python\n\n    >>> from schema import optional, schema\n    >>> import json\n    >>> s = schema({\"test\": str,\n    ...             \"nested\": {optional(\"other\"): str}\n    ...             })\n    >>> json_schema = json.dumps(s.json_schema(\"https://example.com/my-schema.json\"))\n\n    # json_schema\n    {\n        \"type\":\"object\",\n        \"properties\": {\n            \"test\": {\"type\": \"string\"},\n            \"nested\": {\n                \"type\":\"object\",\n                \"properties\": {\n                    \"other\": {\"type\": \"string\"}\n                },\n                \"required\": [],\n                \"additionalproperties\": false\n            }\n        },\n        \"required\":[\n            \"test\",\n            \"nested\"\n        ],\n        \"additionalproperties\":false,\n        \"$id\":\"https://example.com/my-schema.json\",\n        \"$schema\":\"http://json-schema.org/draft-07/schema#\"\n    }\n\nyou can add descriptions for the schema elements using the ``literal`` object instead of a string. the main schema can also have a description.\n\nthese will appear in ides to help your users write a configuration.\n\n.. code:: python\n\n    >>> from schema import literal, schema\n    >>> import json\n    >>> s = schema({literal(\"project_name\", description=\"names must be unique\"): str}, description=\"project schema\")\n    >>> json_schema = json.dumps(s.json_schema(\"https://example.com/my-schema.json\"), indent=4)\n\n    # json_schema\n    {\n        \"type\": \"object\",\n        \"properties\": {\n            \"project_name\": {\n                \"description\": \"names must be unique\",\n                \"type\": \"string\"\n            }\n        },\n        \"required\": [\n            \"project_name\"\n        ],\n        \"additionalproperties\": false,\n        \"$id\": \"https://example.com/my-schema.json\",\n        \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n        \"description\": \"project schema\"\n    }\n\n\njson: supported validations\n~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nthe resulting json schema is not guaranteed to accept the same objects as the library would accept, since some validations are not implemented or\nhave no json schema equivalent. this is the case of the ``use`` and ``hook`` objects for example.\n\nimplemented\n'''''''''''\n\n`object properties <https://json-schema.org/understanding-json-schema/reference/object.html#properties>`_\n    use a dict literal. the dict keys are the json schema properties.\n\n    example:\n\n    ``schema({\"test\": str})``\n\n    becomes\n\n    ``{'type': 'object', 'properties': {'test': {'type': 'string'}}, 'required': ['test'], 'additionalproperties': false}``.\n\n    please note that attributes are required by default. to create optional attributes use ``optional``, like so:\n\n    ``schema({optional(\"test\"): str})``\n\n    becomes\n\n    ``{'type': 'object', 'properties': {'test': {'type': 'string'}}, 'required': [], 'additionalproperties': false}``\n\n    additionalproperties is set to true when at least one of the conditions is met:\n        - ignore_extra_keys is true\n        - at least one key is `str` or `object`\n\n    for example:\n\n    ``schema({str: str})`` and ``schema({}, ignore_extra_keys=true)``\n\n    both becomes\n\n    ``{'type': 'object', 'properties' : {}, 'required': [], 'additionalproperties': true}``\n\n    and\n\n    ``schema({})``\n\n    becomes\n\n    ``{'type': 'object', 'properties' : {}, 'required': [], 'additionalproperties': false}``\n\ntypes\n    use the python type name directly. it will be converted to the json name:\n\n    - ``str`` -> `string <https://json-schema.org/understanding-json-schema/reference/string.html>`_\n    - ``int`` -> `integer <https://json-schema.org/understanding-json-schema/reference/numeric.html#integer>`_\n    - ``float`` -> `number <https://json-schema.org/understanding-json-schema/reference/numeric.html#number>`_\n    - ``bool`` -> `boolean <https://json-schema.org/understanding-json-schema/reference/boolean.html>`_\n    - ``list`` -> `array <https://json-schema.org/understanding-json-schema/reference/array.html>`_\n    - ``dict`` -> `object <https://json-schema.org/understanding-json-schema/reference/object.html>`_\n\n    example:\n\n    ``schema(float)``\n\n    becomes\n\n    ``{\"type\": \"number\"}``\n\n`array items <https://json-schema.org/understanding-json-schema/reference/array.html#items>`_\n    surround a schema with ``[]``.\n\n    example:\n\n    ``schema([str])`` means an array of string and becomes:\n\n    ``{'type': 'array', 'items': {'type': 'string'}}``\n\n`enumerated values <https://json-schema.org/understanding-json-schema/reference/generic.html#enumerated-values>`_\n    use `or`.\n\n    example:\n\n    ``schema(or(1, 2, 3))`` becomes\n\n    ``{\"enum\": [1, 2, 3]}``\n\n`constant values <https://json-schema.org/understanding-json-schema/reference/generic.html#constant-values>`_\n    use the value itself.\n\n    example:\n\n    ``schema(\"name\")`` becomes\n\n    ``{\"const\": \"name\"}``\n\n`regular expressions <https://json-schema.org/understanding-json-schema/reference/regular_expressions.html>`_\n    use ``regex``.\n\n    example:\n\n    ``schema(regex(\"^v\\d+\"))`` becomes\n\n    ``{'type': 'string', 'pattern': '^v\\\\d+'}``\n\n`annotations (title and description) <https://json-schema.org/understanding-json-schema/reference/generic.html#annotations>`_\n    you can use the ``name`` and ``description`` parameters of the ``schema`` object init method.\n\n    to add description to keys, replace a str with a ``literal`` object.\n\n    example:\n\n    ``schema({literal(\"test\", description=\"a description\"): str})``\n\n    is equivalent to\n\n    ``schema({\"test\": str})``\n\n    with the description added to the resulting json schema.\n\n`combining schemas with allof <https://json-schema.org/understanding-json-schema/reference/combining.html#allof>`_\n    use ``and``\n\n    example:\n\n    ``schema(and(str, \"value\"))``\n\n    becomes\n\n    ``{\"allof\": [{\"type\": \"string\"}, {\"const\": \"value\"}]}``\n\n    note that this example is not really useful in the real world, since ``const`` already implies the type.\n\n`combining schemas with anyof <https://json-schema.org/understanding-json-schema/reference/combining.html#anyof>`_\n    use ``or``\n\n    example:\n\n    ``schema(or(str, int))``\n\n    becomes\n\n    ``{\"anyof\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]}``\n\n\nnot implemented\n'''''''''''''''\n\nthe following json schema validations cannot be generated from this library.\n\n- `string length <https://json-schema.org/understanding-json-schema/reference/string.html#length>`_\n    however, those can be implemented using ``regex``\n- `string format <https://json-schema.org/understanding-json-schema/reference/string.html#format>`_\n    however, those can be implemented using ``regex``\n- `object dependencies <https://json-schema.org/understanding-json-schema/reference/object.html#dependencies>`_\n- `array length <https://json-schema.org/understanding-json-schema/reference/array.html#length>`_\n- `array uniqueness <https://json-schema.org/understanding-json-schema/reference/array.html#uniqueness>`_\n- `numeric multiples <https://json-schema.org/understanding-json-schema/reference/numeric.html#multiples>`_\n- `numeric ranges <https://json-schema.org/understanding-json-schema/reference/numeric.html#range>`_\n- `property names <https://json-schema.org/understanding-json-schema/reference/object.html#property-names>`_\n    not implemented. we suggest listing the possible keys instead. as a tip, you can use ``or`` as a dict key.\n\n    example:\n\n    ``schema({or(\"name1\", \"name2\"): str})``\n- `annotations (default and examples) <https://json-schema.org/understanding-json-schema/reference/generic.html#annotations>`_\n- `combining schemas with oneof <https://json-schema.org/understanding-json-schema/reference/combining.html#oneof>`_\n- `not <https://json-schema.org/understanding-json-schema/reference/combining.html#not>`_\n- `object size <https://json-schema.org/understanding-json-schema/reference/object.html#size>`_\n- `additionalproperties having a different schema (true and false is supported)`\n\n\njson: minimizing output size\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nexplicit reuse\n''''''''''''''\n\nif your json schema is big and has a lot of repetition, it can be made simpler and smaller by defining schema objects as reference.\nthese references will be placed in a \"definitions\" section in the main schema.\n\n`you can look at the json schema documentation for more information <https://json-schema.org/understanding-json-schema/structuring.html#reuse>`_\n\n.. code:: python\n\n    >>> from schema import optional, schema\n    >>> import json\n    >>> s = schema({\"test\": str,\n    ...             \"nested\": schema({optional(\"other\"): str}, name=\"nested\", as_reference=true)\n    ...             })\n    >>> json_schema = json.dumps(s.json_schema(\"https://example.com/my-schema.json\"), indent=4)\n\n    # json_schema\n    {\n        \"type\": \"object\",\n        \"properties\": {\n            \"test\": {\n                \"type\": \"string\"\n            },\n            \"nested\": {\n                \"$ref\": \"#/definitions/nested\"\n            }\n        },\n        \"required\": [\n            \"test\",\n            \"nested\"\n        ],\n        \"additionalproperties\": false,\n        \"$id\": \"https://example.com/my-schema.json\",\n        \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n        \"definitions\": {\n            \"nested\": {\n                \"type\": \"object\",\n                \"properties\": {\n                    \"other\": {\n                        \"type\": \"string\"\n                    }\n                },\n                \"required\": [],\n                \"additionalproperties\": false\n            }\n        }\n    }\n\nthis becomes really useful when using the same object several times\n\n.. code:: python\n\n    >>> from schema import optional, or, schema\n    >>> import json\n    >>> language_configuration = schema({\"autocomplete\": bool, \"stop_words\": [str]}, name=\"language\", as_reference=true)\n    >>> s = schema({or(\"ar\", \"cs\", \"de\", \"el\", \"eu\", \"en\", \"es\", \"fr\"): language_configuration})\n    >>> json_schema = json.dumps(s.json_schema(\"https://example.com/my-schema.json\"), indent=4)\n\n    # json_schema\n    {\n        \"type\": \"object\",\n        \"properties\": {\n            \"ar\": {\n                \"$ref\": \"#/definitions/language\"\n            },\n            \"cs\": {\n                \"$ref\": \"#/definitions/language\"\n            },\n            \"de\": {\n                \"$ref\": \"#/definitions/language\"\n            },\n            \"el\": {\n                \"$ref\": \"#/definitions/language\"\n            },\n            \"eu\": {\n                \"$ref\": \"#/definitions/language\"\n            },\n            \"en\": {\n                \"$ref\": \"#/definitions/language\"\n            },\n            \"es\": {\n                \"$ref\": \"#/definitions/language\"\n            },\n            \"fr\": {\n                \"$ref\": \"#/definitions/language\"\n            }\n        },\n        \"required\": [],\n        \"additionalproperties\": false,\n        \"$id\": \"https://example.com/my-schema.json\",\n        \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n        \"definitions\": {\n            \"language\": {\n                \"type\": \"object\",\n                \"properties\": {\n                    \"autocomplete\": {\n                        \"type\": \"boolean\"\n                    },\n                    \"stop_words\": {\n                        \"type\": \"array\",\n                        \"items\": {\n                            \"type\": \"string\"\n                        }\n                    }\n                },\n                \"required\": [\n                    \"autocomplete\",\n                    \"stop_words\"\n                ],\n                \"additionalproperties\": false\n            }\n        }\n    }\n\nautomatic reuse\n'''''''''''''''\n\nif you want to minimize the output size without using names explicitly, you can have the library generate hashes of parts of the output json\nschema and use them as references throughout.\n\nenable this behaviour by providing the parameter ``use_refs`` to the json_schema method.\n\nbe aware that this method is less often compatible with ides and json schema libraries.\nit produces a json schema that is more difficult to read by humans.\n\n.. code:: python\n\n    >>> from schema import optional, or, schema\n    >>> import json\n    >>> language_configuration = schema({\"autocomplete\": bool, \"stop_words\": [str]})\n    >>> s = schema({or(\"ar\", \"cs\", \"de\", \"el\", \"eu\", \"en\", \"es\", \"fr\"): language_configuration})\n    >>> json_schema = json.dumps(s.json_schema(\"https://example.com/my-schema.json\", use_refs=true), indent=4)\n\n    # json_schema\n    {\n        \"type\": \"object\",\n        \"properties\": {\n            \"ar\": {\n                \"type\": \"object\",\n                \"properties\": {\n                    \"autocomplete\": {\n                        \"type\": \"boolean\",\n                        \"$id\": \"#6456104181059880193\"\n                    },\n                    \"stop_words\": {\n                        \"type\": \"array\",\n                        \"items\": {\n                            \"type\": \"string\",\n                            \"$id\": \"#1856069563381977338\"\n                        }\n                    }\n                },\n                \"required\": [\n                    \"autocomplete\",\n                    \"stop_words\"\n                ],\n                \"additionalproperties\": false\n            },\n            \"cs\": {\n                \"type\": \"object\",\n                \"properties\": {\n                    \"autocomplete\": {\n                        \"$ref\": \"#6456104181059880193\"\n                    },\n                    \"stop_words\": {\n                        \"type\": \"array\",\n                        \"items\": {\n                            \"$ref\": \"#1856069563381977338\"\n                        },\n                        \"$id\": \"#-5377945144312515805\"\n                    }\n                },\n                \"required\": [\n                    \"autocomplete\",\n                    \"stop_words\"\n                ],\n                \"additionalproperties\": false\n            },\n            \"de\": {\n                \"type\": \"object\",\n                \"properties\": {\n                    \"autocomplete\": {\n                        \"$ref\": \"#6456104181059880193\"\n                    },\n                    \"stop_words\": {\n                        \"$ref\": \"#-5377945144312515805\"\n                    }\n                },\n                \"required\": [\n                    \"autocomplete\",\n                    \"stop_words\"\n                ],\n                \"additionalproperties\": false,\n                \"$id\": \"#-8142886105174600858\"\n            },\n            \"el\": {\n                \"$ref\": \"#-8142886105174600858\"\n            },\n            \"eu\": {\n                \"$ref\": \"#-8142886105174600858\"\n            },\n            \"en\": {\n                \"$ref\": \"#-8142886105174600858\"\n            },\n            \"es\": {\n                \"$ref\": \"#-8142886105174600858\"\n            },\n            \"fr\": {\n                \"$ref\": \"#-8142886105174600858\"\n            }\n        },\n        \"required\": [],\n        \"additionalproperties\": false,\n        \"$id\": \"https://example.com/my-schema.json\",\n        \"$schema\": \"http://json-schema.org/draft-07/schema#\"\n    }\n\n\n",
  "docs_url": null,
  "keywords": "schema json validation",
  "license": "mit",
  "name": "schema",
  "package_url": "https://pypi.org/project/schema/",
  "project_url": "https://pypi.org/project/schema/",
  "project_urls": {
    "Homepage": "https://github.com/keleshev/schema"
  },
  "release_url": "https://pypi.org/project/schema/0.7.5/",
  "requires_dist": [
    "contextlib2 (>=0.5.5)"
  ],
  "requires_python": "",
  "summary": "simple data validation library",
  "version": "0.7.5",
  "releases": [],
  "developers": [
    "vladimir@keleshev.com",
    "vladimir_keleshev"
  ],
  "kwds": "json_schema schemaonlyoneallowederror schemawrongkeyerror schemaforbiddenkeyerror schemaerror",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_schema",
  "homepage": "https://github.com/keleshev/schema",
  "release_count": 25,
  "dependency_ids": [
    "pypi_contextlib2"
  ],
  "documentation_summary": "The GitHub repository \"keleshev/schema\" introduces a Pythonic way for schema validation, making it easier to validate Python data structures like those obtained from config files, forms, external services, or command-line parsing. It supports various Python versions including 2.6, 2.7, 3.2 to 3.9, and PyPy, adhering to semantic versioning. The library allows checking types, using callables for validation, and provides features like \"Validatables\" for custom validation objects, and hooks for executing functions upon finding valid key:value pairs. It also supports list, tuple, set, frozenset, and dict data structures, offering detailed validation options including And, Or, Use, Optional, and Regex. Additionally, it facilitates user-friendly error reporting and can generate JSON schema from Python schema definitions. The repository is licensed under the MIT license, has 2.8k stars, 206 forks, and is actively maintained with contributions from 62 individuals.",
  "embedding": [
    0.011948471888899803,
    0.007576401811093092,
    0.0236189104616642,
    -0.04773828387260437,
    -0.026329733431339264,
    0.023896943777799606,
    -0.007611155975610018,
    -0.029332490637898445,
    0.0025370519142597914,
    -0.04342876747250557,
    0.008285386487841606,
    0.0007989107398316264,
    -0.009008272551000118,
    0.022228745743632317,
    -0.0039306930266320705,
    -0.0036839384119957685,
    0.017029527574777603,
    -0.020491039380431175,
    0.023869141936302185,
    0.010245519690215588,
    0.029721736907958984,
    0.02061615325510502,
    -0.027858916670084,
    -0.00737482775002718,
    -0.027970129624009132,
    0.027858916670084,
    0.010196863673627377,
    -0.013574966229498386,
    -0.02367451786994934,
    -0.0008797140908427536,
    0.05368819087743759,
    -0.019114775583148003,
    -0.03683938458561897,
    -0.029193473979830742,
    -0.0018280675867572427,
    -0.01178860291838646,
    0.00020700432651210576,
    0.012045783922076225,
    0.01563936099410057,
    0.021825598552823067,
    0.010523553006350994,
    0.0005482464912347496,
    -0.0007385254139080644,
    -0.044096048921346664,
    -0.009981388226151466,
    0.021380744874477386,
    0.014819163829088211,
    -0.03664476051926613,
    -0.03219623118638992,
    -0.008375747129321098,
    0.02156146615743637,
    0.019198184832930565,
    -0.013595818541944027,
    -0.015945198014378548,
    -0.014235294423997402,
    -0.0043720705434679985,
    0.022173138335347176,
    0.013199620880186558,
    0.0001245718594873324,
    0.0026169863995164633,
    0.004893382545560598,
    0.00444157887250185,
    -0.03177918121218681,
    0.012622702866792679,
    0.0021304285619407892,
    -0.005101907067000866,
    -8.884026465239003e-05,
    0.015514246188104153,
    -0.007875286974012852,
    -0.002865478629246354,
    0.0011147389886900783,
    0.037284236401319504,
    0.007750172633677721,
    0.011531422846019268,
    0.046264708042144775,
    -0.04679296910762787,
    -0.013811293989419937,
    0.007791877258569002,
    -0.019170381128787994,
    -0.009738109074532986,
    -0.006815286353230476,
    -0.025829274207353592,
    -0.023716222494840622,
    0.03461512178182602,
    0.010294175706803799,
    0.039397288113832474,
    -0.015778377652168274,
    0.016793198883533478,
    -0.00882755033671856,
    -0.013018899597227573,
    -0.005185317248106003,
    0.0006433859816752374,
    -0.0017594281816855073,
    0.0033728890120983124,
    -0.03761787712574005,
    0.03603309020400047,
    -0.017196346074342728,
    0.027205538004636765,
    -0.007903090678155422,
    0.01308145746588707,
    -0.018906250596046448,
    0.01540303323417902,
    -0.0003119183820672333,
    -0.015931297093629837,
    -0.017571691423654556,
    -0.022631892934441566,
    0.016209328547120094,
    -0.025050781667232513,
    0.01693221554160118,
    0.021853400394320488,
    -0.02495346963405609,
    0.06461489200592041,
    -0.016723690554499626,
    -0.02663557045161724,
    0.002669117646291852,
    -0.0012963293120265007,
    0.0353936143219471,
    -0.012129194103181362,
    -0.02911006473004818,
    -0.0025231502950191498,
    -0.009592141956090927,
    -0.00841745175421238,
    0.031834788620471954,
    -0.001073902822099626,
    0.020588351413607597,
    -0.01976815238595009,
    0.011392406187951565,
    -0.001723805209621787,
    -0.009126435965299606,
    -0.009453125298023224,
    0.01905916817486286,
    0.01416578609496355,
    0.03158456087112427,
    0.002924560569226742,
    -0.01737706921994686,
    -0.009647748433053493,
    -0.01611201837658882,
    0.01414493378251791,
    -0.020185202360153198,
    -0.017960937693715096,
    0.02069956436753273,
    0.009765912778675556,
    -0.03911925479769707,
    0.018322380259633064,
    -0.007645910140126944,
    0.003670036792755127,
    0.008340992964804173,
    -0.0073470245115458965,
    0.00258918316103518,
    -0.014263098128139973,
    0.019253792241215706,
    -0.0022590188309550285,
    -0.0037117418833076954,
    0.004716136492788792,
    -0.009633846580982208,
    0.010655618272721767,
    -0.01011345349252224,
    0.028011834248900414,
    0.022492878139019012,
    0.0024327896535396576,
    -0.024744944646954536,
    0.028609605506062508,
    -0.029666131362318993,
    -0.01979595609009266,
    -0.033475182950496674,
    0.028109146282076836,
    0.025676356628537178,
    -0.01647346094250679,
    -0.026718979701399803,
    0.004806497134268284,
    -0.023896943777799606,
    0.05349356681108475,
    -0.01726585440337658,
    -4.947034176439047e-05,
    -0.00781273003667593,
    -0.0052513498812913895,
    0.03586626797914505,
    0.013790441676974297,
    -0.036088693886995316,
    0.006759679410606623,
    0.011726045981049538,
    0.02787281759083271,
    0.013449850492179394,
    0.03294692188501358,
    -0.033558595925569534,
    -0.006801384501159191,
    -0.01563936099410057,
    0.015347426757216454,
    0.007423483766615391,
    0.01647346094250679,
    0.003035773755982518,
    0.015722772106528282,
    -0.01096145436167717,
    -0.016556870192289352,
    -0.5707463622093201,
    -0.008500861935317516,
    -0.021756090223789215,
    -0.027733800932765007,
    0.01014125719666481,
    0.008285386487841606,
    -0.009654698893427849,
    0.0025596420746296644,
    -0.03369761258363724,
    0.03177918121218681,
    -0.012122242711484432,
    0.03873001039028168,
    0.01160093117505312,
    -0.004462431184947491,
    0.006492072716355324,
    -0.024383502081036568,
    0.003013183595612645,
    -0.036060892045497894,
    -0.0032164952717721462,
    0.018642118200659752,
    -0.006193187087774277,
    0.0617789551615715,
    -0.015472541563212872,
    -0.0035762006882578135,
    -0.02399425581097603,
    0.01033588033169508,
    0.01607031375169754,
    -0.0207273680716753,
    0.035755056887865067,
    0.011698242276906967,
    -0.02238166332244873,
    0.013866900466382504,
    0.005685776937752962,
    0.0006803122232668102,
    0.04256686568260193,
    -0.007444336079061031,
    -0.03800712525844574,
    0.05441107600927353,
    -0.0021113138645887375,
    0.04565303400158882,
    -0.019212087616324425,
    0.014958180487155914,
    0.007479090243577957,
    0.03036121465265751,
    0.019239889457821846,
    -0.000752427033148706,
    -0.010224667377769947,
    0.002351117320358753,
    0.001968821743503213,
    0.0005026317085139453,
    -0.006530302111059427,
    -0.017418773844838142,
    0.010627814568579197,
    -0.004379021003842354,
    0.03578285872936249,
    -0.009564338251948357,
    0.03222403675317764,
    -0.0059777116402983665,
    -0.010127355344593525,
    0.006610236596316099,
    0.0149720823392272,
    0.012817326001822948,
    0.01602860726416111,
    -0.02067176066339016,
    0.009251550771296024,
    0.02065785974264145,
    0.01651516556739807,
    -0.01978205516934395,
    -0.006144531536847353,
    -0.0189757589250803,
    0.03797931969165802,
    -0.01205968577414751,
    -0.027344554662704468,
    -0.026816291734576225,
    0.010600011795759201,
    0.04729342833161354,
    0.03125092014670372,
    0.012671357952058315,
    0.0063078757375478745,
    0.024675436317920685,
    0.013025850057601929,
    0.015319623053073883,
    -0.0045249885879457,
    -0.03772909194231033,
    0.02955491840839386,
    -0.00654767919331789,
    -0.035699449479579926,
    -0.0013606244465336204,
    0.007360926363617182,
    0.004229578655213118,
    0.015750573948025703,
    0.004889906849712133,
    -0.01940670982003212,
    -0.022214844822883606,
    0.010009190998971462,
    0.019712546840310097,
    -0.021200023591518402,
    0.016209328547120094,
    0.0014231818495318294,
    -0.033586397767066956,
    -0.009967486374080181,
    -0.013227424584329128,
    -0.009807617403566837,
    0.009772863239049911,
    0.0003985865041613579,
    0.02784501388669014,
    0.006561581045389175,
    -0.0037430205848068,
    0.014652344398200512,
    -0.034364890307188034,
    0.02538442239165306,
    -0.04081525653600693,
    -0.025106389075517654,
    0.0063530560582876205,
    -0.013790441676974297,
    -0.03717302531003952,
    0.025134190917015076,
    0.003319020150229335,
    0.027608687058091164,
    -0.016751494258642197,
    -0.011003159917891026,
    0.014513327740132809,
    -0.020087890326976776,
    -0.0036735122557729483,
    -0.007360926363617182,
    -0.009932732209563255,
    0.01569496840238571,
    0.006902171764522791,
    -0.030611444264650345,
    -0.01540303323417902,
    -0.0003529716923367232,
    0.0018871496431529522,
    0.020838581025600433,
    -0.016292739659547806,
    0.00968250259757042,
    0.003843807615339756,
    0.005856072064489126,
    0.00080542714567855,
    -0.0033555119298398495,
    0.011329848319292068,
    0.002029641531407833,
    0.012574046850204468,
    0.00023632812371943146,
    -0.03150114789605141,
    0.0009887551423162222,
    -0.012768669985234737,
    -0.036867186427116394,
    -0.0006777056842111051,
    -0.013338637538254261,
    0.002387609099969268,
    -0.02952711470425129,
    -0.006777056492865086,
    -0.03461512178182602,
    0.0012885095784440637,
    -0.03622771054506302,
    -0.022270450368523598,
    -0.00445200502872467,
    -0.008361845277249813,
    -0.006617187522351742,
    -0.01608421467244625,
    0.019517922773957253,
    0.02874862216413021,
    -0.015069393441081047,
    -0.002662166953086853,
    -0.027733800932765007,
    -0.01244893204420805,
    -0.020810777321457863,
    0.02158926986157894,
    -0.02026861347258091,
    -0.02788671851158142,
    -0.0072983684949576855,
    -0.014207490719854832,
    -0.005807416047900915,
    -0.0005725743831135333,
    0.015041590668261051,
    0.02232605777680874,
    -0.037395451217889786,
    0.0012702636886388063,
    -0.005122759845107794,
    -0.0022190515883266926,
    -0.003319020150229335,
    0.0012902473099529743,
    -0.051269304007291794,
    -0.032974723726511,
    0.01684880629181862,
    0.00804905779659748,
    0.004782169125974178,
    -0.005633645690977573,
    0.02413327246904373,
    0.006916073150932789,
    -0.003565774532034993,
    0.013422047719359398,
    -0.01821116730570793,
    0.009752010926604271,
    -0.013262178748846054,
    0.014694049023091793,
    0.018461396917700768,
    -0.0026830192655324936,
    -0.010245519690215588,
    0.01246978435665369,
    0.008862304501235485,
    0.007958697155117989,
    -0.014860868453979492,
    -0.022478975355625153,
    0.001063476549461484,
    -0.01725195348262787,
    0.01733536273241043,
    -0.003444134956225753,
    0.004552791826426983,
    0.008612074889242649,
    0.04123230651021004,
    -0.015347426757216454,
    -0.01543083693832159,
    -0.01937890611588955,
    0.021200023591518402,
    0.031139707192778587,
    -0.0064434171654284,
    0.020810777321457863,
    -0.018294578418135643,
    -0.0003410249773878604,
    0.005849121138453484,
    -0.020143497735261917,
    0.01651516556739807,
    0.017404871061444283,
    0.011003159917891026,
    0.03330836445093155,
    -0.012720013968646526,
    -0.004104463383555412,
    0.005449448712170124,
    -0.026329733431339264,
    0.016723690554499626,
    0.014902574010193348,
    0.0058213178999722,
    -0.014513327740132809,
    0.020143497735261917,
    0.013401195406913757,
    0.049239661544561386,
    -0.03403124958276749,
    0.012539292685687542,
    -0.01821116730570793,
    0.007152401376515627,
    0.014131031930446625,
    0.00401410274207592,
    -0.008389648981392384,
    0.01853090524673462,
    0.0013866900699213147,
    0.01640395261347294,
    0.02616291493177414,
    -0.02961052395403385,
    0.0076598115265369415,
    0.0030566263012588024,
    -0.0029888558201491833,
    0.005828268826007843,
    -0.0016638543456792831,
    0.023716222494840622,
    -0.013220473192632198,
    -0.002330264775082469,
    0.02411937154829502,
    0.0013875588774681091,
    -0.010280273854732513,
    0.020018381997942924,
    -0.00032147575984708965,
    -0.0009010009816847742,
    0.022923829033970833,
    0.053382355719804764,
    -0.016695886850357056,
    -0.0304168201982975,
    -0.03578285872936249,
    0.009147289209067822,
    -0.004156594630330801,
    -0.03164016455411911,
    -0.04123230651021004,
    -0.05271507427096367,
    -0.010440142825245857,
    0.012706112116575241,
    -0.0012233456363901496,
    -0.008334041573107243,
    0.018683824688196182,
    0.00047178741078823805,
    -0.008625976741313934,
    -0.023924747481942177,
    -0.013498506508767605,
    0.019531825557351112,
    0.003193905111402273,
    0.01178860291838646,
    -0.013602769002318382,
    -0.027594784274697304,
    0.00907778088003397,
    -0.0120110297575593,
    0.013248276896774769,
    -0.0016968707786872983,
    0.034364890307188034,
    0.0032981676049530506,
    -0.009585190564393997,
    -0.009932732209563255,
    0.022451171651482582,
    0.021394645795226097,
    -0.007270565256476402,
    -0.014624540694057941,
    -0.006850040517747402,
    0.01477745920419693,
    0.0060576461255550385,
    -0.000647295790258795,
    -0.005717055406421423,
    0.04782169312238693,
    -0.02279871329665184,
    0.004389447625726461,
    0.00843830406665802,
    -0.010690372437238693,
    -0.024161076173186302,
    0.01896185614168644,
    0.0228126160800457,
    -0.022979434579610825,
    0.011684340424835682,
    0.006373908836394548,
    0.00444157887250185,
    0.00770151661708951,
    0.004914234858006239,
    0.019531825557351112,
    -0.007131549064069986,
    -0.0022572812158614397,
    -0.04551401734352112,
    -0.004681382328271866,
    -0.01057220809161663,
    0.008549517951905727,
    0.011315946467220783,
    0.013415096327662468,
    0.012400276027619839,
    -0.020477136597037315,
    0.00020331170526333153,
    -0.017168544232845306,
    0.007270565256476402,
    0.0011573127703741193,
    -0.0004500660579651594,
    -0.006978630553930998,
    0.012511488981544971,
    0.03341957926750183,
    0.01850310154259205,
    0.017460478469729424,
    0.018795037642121315,
    0.014735753647983074,
    0.026329733431339264,
    0.0020956743974238634,
    0.002431051805615425,
    0.01611201837658882,
    -0.007784926798194647,
    0.006749253254383802,
    0.038229551166296005,
    0.032363053411245346,
    -0.010718176141381264,
    0.01726585440337658,
    0.00664846645668149,
    -0.0009540010360069573,
    -0.005508530884981155,
    -0.0031817411072552204,
    0.02158926986157894,
    0.0013102309312671423,
    0.01737706921994686,
    -0.02949931100010872,
    0.032363053411245346,
    0.03214062750339508,
    0.037868108600378036,
    0.01858651265501976,
    0.020991498604416847,
    0.05374379828572273,
    -0.006519875954836607,
    0.005320858210325241,
    0.011274241842329502,
    -0.02202022075653076,
    -0.0164873618632555,
    -0.014235294423997402,
    0.017835823819041252,
    0.00866073090583086,
    -0.0018749856390058994,
    0.005032399203628302,
    0.011885914951562881,
    -0.0248978640884161,
    -0.02874862216413021,
    0.04317853972315788,
    -0.027136029675602913,
    0.006314826663583517,
    -0.02235386148095131,
    -0.014416015706956387,
    -0.028553998097777367,
    0.002476232359185815,
    -0.018086053431034088,
    0.020393727347254753,
    -0.009543485939502716,
    0.0008123779552988708,
    0.01392250694334507,
    -0.015903493389487267,
    0.02368841879069805,
    -0.05660753697156906,
    -0.0037047909572720528,
    -0.005567612592130899,
    -0.02737235836684704,
    -0.0022920353803783655,
    -0.018753333017230034,
    0.02828986756503582,
    0.013025850057601929,
    0.016209328547120094,
    -0.001705559203401208,
    0.01162178348749876,
    -0.006474695634096861,
    -0.003454561112448573,
    -0.030277803540229797,
    -0.026760686188936234,
    -0.015847885981202126,
    0.007840532809495926,
    -0.012615751475095749,
    0.01693221554160118,
    0.007079417817294598,
    0.006724925246089697,
    0.039425093680620193,
    0.017613396048545837,
    0.0118094552308321,
    -0.016181526705622673,
    -0.0038125289138406515,
    0.010085650719702244,
    0.020018381997942924,
    0.022200942039489746,
    0.0011069192551076412,
    0.00654767919331789,
    -0.02242336980998516,
    -0.02695530839264393,
    -0.026496553793549538,
    -0.0070307618007063866,
    -0.00804905779659748,
    -0.0198515634983778,
    0.0164873618632555,
    -0.017529986798763275,
    0.014416015706956387,
    0.027956226840615273,
    -0.0066067613661289215,
    0.005268726963549852,
    -0.014680147171020508,
    -0.0021756088826805353,
    0.021283432841300964,
    0.0006533777923323214,
    -0.003053150838240981,
    -0.012525390833616257,
    0.03803492709994316,
    -0.0007637221715413034,
    -0.007632008288055658,
    0.000980935525149107,
    -0.01562546007335186,
    0.013039751909673214,
    0.01687660813331604,
    -0.0207273680716753,
    0.023410387337207794,
    -0.007625057827681303,
    -0.0018124282360076904,
    -0.011239487677812576,
    0.032780103385448456,
    0.04445749148726463,
    0.01608421467244625,
    -0.005077579524368048,
    -0.028067441657185555,
    0.011371553875505924,
    0.017905332148075104,
    -0.005588465370237827,
    0.00517836632207036,
    -0.009884076192975044,
    0.0026760685723274946,
    0.006801384501159191,
    0.00220688758417964,
    -0.01205273438245058,
    -0.04192738980054855,
    -0.019337201490998268,
    -0.023479895666241646,
    -0.040342602878808975,
    0.017015624791383743,
    0.0025596420746296644,
    0.033586397767066956,
    0.016334444284439087,
    0.01595909893512726,
    0.0038368566893041134,
    -0.004160070326179266,
    -0.004705710336565971,
    1.313461962126894e-05,
    -0.012143095023930073,
    -0.0034910531248897314,
    0.013616670854389668,
    0.018252871930599213,
    0.011246439069509506,
    -0.0039480701088905334,
    0.03583846613764763,
    0.0029714787378907204,
    -0.008952666074037552,
    0.020782973617315292,
    -0.01246978435665369,
    0.006273121573030949,
    -0.022284353151917458,
    0.005074103828519583,
    -0.02737235836684704,
    0.009494829922914505,
    -0.00037143484223634005,
    -0.01474965550005436,
    -0.01986546441912651,
    0.021853400394320488,
    0.0090499771758914,
    -0.0003153937868773937,
    -0.03928607702255249,
    -0.0017003461252897978,
    0.002924560569226742,
    0.018864545971155167,
    0.011566177010536194,
    0.003053150838240981,
    0.005004595499485731,
    -0.0041982997208833694,
    0.01569496840238571,
    -0.008396599441766739,
    0.014819163829088211,
    0.014318704605102539,
    -0.00030692247673869133,
    -0.010725126601755619,
    0.02063005603849888,
    0.01477745920419693,
    0.034003447741270065,
    -0.004601447843015194,
    0.004278234206140041,
    -0.028498392552137375,
    -0.013665326870977879,
    -0.004531939513981342,
    0.0050463005900382996,
    0.017557790502905846,
    0.0030948559287935495,
    0.019601333886384964,
    -0.02991636097431183,
    0.02400815859436989,
    0.011899816803634167,
    -0.010898897424340248,
    0.023479895666241646,
    -0.04609788581728935,
    -0.009668600745499134,
    -0.018016545102000237,
    -0.02908226102590561,
    -0.03636672720313072,
    -0.002679544035345316,
    0.017947036772966385,
    0.0248978640884161,
    0.02069956436753273,
    -0.006801384501159191,
    0.005897777155041695,
    -0.004823874216526747,
    -0.014200540259480476,
    0.04971231892704964,
    0.007854434661567211,
    0.035643842071294785,
    0.0189757589250803,
    0.003251249436289072,
    -0.018864545971155167,
    -0.009932732209563255,
    0.004490234423428774,
    -0.017613396048545837,
    0.025203699246048927,
    0.008695485070347786,
    -0.005890826229006052,
    -0.009877125732600689,
    0.010982307605445385,
    -0.0320294126868248,
    -0.00729141803458333,
    -0.0013128374703228474,
    0.011343750171363354,
    0.017988741397857666,
    0.009772863239049911,
    -0.030722657218575478,
    0.008389648981392384,
    -0.009237649850547314,
    0.014707950875163078,
    0.0058664982207119465,
    -0.017905332148075104,
    -0.019656939432024956,
    -0.013776539824903011,
    -0.0033763644751161337,
    0.040731847286224365,
    0.0023041991516947746,
    0.010036994703114033,
    0.01851700432598591,
    -0.005682301241904497,
    -0.0045249885879457,
    -0.02742796391248703,
    -0.009175091981887817,
    0.0017741987248882651,
    0.02741406299173832,
    0.019198184832930565,
    -0.0002673896378837526,
    -0.0022694452200084925,
    0.03592187538743019,
    0.007527745794504881,
    -0.02485615946352482,
    0.007016860414296389,
    -0.0008358369814231992,
    0.036894991993904114,
    -0.013873850926756859,
    -0.00226770737208426,
    -0.014318704605102539,
    -0.0039306930266320705,
    5.6638382375240326e-05,
    0.001718592015095055,
    -0.020199105143547058,
    -0.004312988370656967,
    -0.021630974486470222,
    -0.008271484635770321,
    0.02147805690765381,
    -0.01939280889928341,
    0.005119284149259329,
    -0.016751494258642197,
    0.004048856906592846,
    -0.0013753949897363782,
    -0.0010521814692765474,
    0.008612074889242649,
    0.01898965984582901,
    -0.0066067613661289215,
    -0.026427045464515686,
    -0.020880285650491714,
    -0.03252987191081047,
    0.017988741397857666,
    -0.0004439840849954635,
    -0.02495346963405609,
    0.006346105597913265,
    0.02877642586827278,
    -0.008118566125631332,
    0.03305813670158386,
    0.00126418168656528,
    0.0012302964460104704,
    -0.03561604022979736,
    -0.0020661335438489914,
    -0.011190831661224365,
    -0.01641785353422165,
    0.009870175272226334,
    0.023465992882847786,
    -0.02534271590411663,
    -0.0018715102924034,
    0.0022746582981199026,
    0.021769991144537926,
    0.006644990760833025,
    -0.031028492376208305,
    0.01436040922999382,
    0.0008623370085842907,
    0.02322966419160366,
    -0.02581537328660488,
    -0.004705710336565971,
    0.032279640436172485,
    -0.011844209395349026,
    -0.00549462903290987,
    0.0010365421185269952,
    -0.01516670547425747,
    -0.0032025936525315046,
    0.04259467124938965,
    -0.002544002840295434,
    -0.005953383632004261,
    -0.038229551166296005,
    -0.0164873618632555,
    0.02872081845998764,
    -0.00863292720168829,
    0.005654498003423214,
    0.008500861935317516,
    0.007103745359927416,
    0.015097197145223618,
    -0.003075740998610854,
    0.021366843953728676,
    -0.0004691808426287025,
    -0.01851700432598591,
    -0.00991883035749197,
    0.0215336624532938,
    0.030750460922718048,
    0.018030446022748947,
    -0.006620663218200207,
    0.013846048153936863,
    -0.00348757766187191,
    -0.00343718403019011,
    -0.018683824688196182,
    -0.01733536273241043,
    -0.021213924512267113,
    0.02617681585252285,
    0.020157398656010628,
    -2.1219029804342426e-05,
    -0.003732594195753336,
    -0.004900333471596241,
    -0.00337115116417408,
    -0.007027286570519209,
    -0.019629135727882385,
    0.01773851178586483,
    0.023396484553813934,
    0.011892865411937237,
    0.022048024460673332,
    0.03219623118638992,
    -0.00495246471837163,
    0.05288189277052879,
    -0.035755056887865067,
    0.0021286909468472004,
    -0.012963293120265007,
    0.02492566779255867,
    0.013408145867288113,
    0.0024901339784264565,
    -0.040370404720306396,
    0.012108340859413147,
    0.005525907967239618,
    0.00453541474416852,
    0.01684880629181862,
    0.0321684293448925,
    0.0008501730626448989,
    -0.02285432070493698,
    -0.01269221119582653,
    -0.008271484635770321,
    -0.01860041357576847,
    -0.004625775385648012,
    -0.002564855385571718,
    -0.01771070808172226,
    -0.010169059969484806,
    -0.009411420673131943,
    -0.0010504437377676368,
    0.015097197145223618,
    0.00257875700481236,
    0.0005799596547149122,
    -0.03286351263523102,
    0.017460478469729424,
    0.005525907967239618,
    -0.003167839488014579,
    -0.0006707548163831234,
    -0.01566716469824314,
    0.013623621314764023,
    0.005838694982230663,
    0.03319714963436127,
    0.03759007528424263,
    -0.017571691423654556,
    0.010586109943687916,
    -0.0017794118029996753,
    0.023465992882847786,
    -0.02830376848578453,
    0.015361328609287739,
    0.02368841879069805,
    -0.013866900466382504,
    0.008208926767110825,
    -0.02061615325510502,
    0.035198990255594254,
    -0.0013806080678477883,
    0.02742796391248703,
    -0.01367922779172659,
    -0.021617073565721512,
    -0.018836742267012596,
    0.006488597486168146,
    0.00528957974165678,
    -0.015319623053073883,
    -0.002427576342597604,
    0.02114441618323326,
    0.017863625660538673,
    0.01308145746588707,
    -0.0413157194852829,
    -0.007562499959021807,
    -0.018405791372060776,
    0.010815487243235111,
    -0.02242336980998516,
    0.011969325132668018,
    -0.030611444264650345,
    -0.014596736989915371,
    0.011003159917891026,
    -0.038257353007793427,
    0.003442397341132164,
    0.18672703206539154,
    0.014930376783013344,
    0.031028492376208305,
    0.012935489416122437,
    0.01263660378754139,
    0.007972599007189274,
    0.016737591475248337,
    -0.0045597427524626255,
    -0.023479895666241646,
    0.019573530182242393,
    -0.01290073525160551,
    -0.023827435448765755,
    0.01242112834006548,
    0.006919548846781254,
    -0.003098331391811371,
    0.012796472758054733,
    -0.022715304046869278,
    -0.0532989427447319,
    -0.0007606811705045402,
    -0.017974838614463806,
    0.011329848319292068,
    -0.01766900345683098,
    -0.03583846613764763,
    -0.03639453276991844,
    0.024564223363995552,
    0.004302562214434147,
    0.027302850037813187,
    -0.012414177879691124,
    0.025954389944672585,
    0.004820398986339569,
    -0.009376666508615017,
    0.0011381979566067457,
    0.011003159917891026,
    -0.01096145436167717,
    -0.051686353981494904,
    -0.023076746612787247,
    0.019907169044017792,
    -0.012893784791231155,
    0.01896185614168644,
    0.026927504688501358,
    -0.0038924633990973234,
    -0.056746553629636765,
    0.007100270129740238,
    -0.028859835118055344,
    -0.008313189260661602,
    -0.019545726478099823,
    -0.009647748433053493,
    0.025884881615638733,
    0.016153723001480103,
    0.021714383736252785,
    -0.031000690534710884,
    0.0013771327212452888,
    0.016598574817180634,
    0.01031502801924944,
    0.015055491589009762,
    -0.00841745175421238,
    7.998881483217701e-05,
    0.010509651154279709,
    0.00883450172841549,
    -0.011135225184261799,
    -0.015764476731419563,
    0.02916567213833332,
    -0.0020557071547955275,
    0.009494829922914505,
    -0.044957950711250305,
    4.46916492364835e-05,
    -0.055161766707897186,
    -0.010085650719702244,
    0.0035935777705162764,
    -0.00252836337313056,
    -0.007416532840579748,
    -0.003411118406802416,
    -0.03547702357172966,
    -0.006036793347448111,
    -0.023827435448765755,
    -0.025078585371375084,
    0.03725643455982208,
    0.0005152300582267344,
    0.02074126899242401,
    -0.004771742969751358,
    -0.028178654611110687,
    0.0006989925750531256,
    0.00729141803458333,
    0.03211282193660736,
    -0.016626378521323204,
    -0.018377987667918205,
    0.03505997359752655,
    -0.03380882367491722,
    -0.007027286570519209,
    -0.023771829903125763,
    -0.0009496567654423416,
    -0.01353326067328453,
    0.01811385527253151,
    -0.010565257631242275,
    0.004354693461209536,
    -0.0029089213348925114,
    -0.012921588495373726,
    0.03494875878095627,
    -0.005379940383136272,
    -0.008910960517823696,
    -0.04470772296190262,
    0.06255744397640228,
    -0.005644071847200394,
    0.029721736907958984,
    -0.010245519690215588,
    0.008771943859755993,
    -0.006909122224897146,
    0.007562499959021807,
    -0.006822236813604832,
    -0.029388098046183586,
    0.011691291816532612,
    -0.03581066429615021,
    -0.003635282628238201,
    -0.015277918428182602,
    0.021200023591518402,
    -0.01290073525160551,
    -0.0014683622866868973,
    -0.011913717724382877,
    0.00611672829836607,
    0.0071141719818115234,
    -0.01139935664832592,
    -0.017905332148075104,
    -0.011281193234026432,
    0.009008272551000118,
    -0.0034354464150965214,
    -0.011239487677812576,
    -0.04098207876086235,
    0.04059283062815666,
    -0.0022642319090664387,
    -0.0010843290947377682,
    0.018336283043026924,
    -0.03336397185921669,
    0.010217715986073017,
    0.01162178348749876,
    0.0017724609933793545,
    -0.01903136447072029,
    -0.006068072281777859,
    -0.003093118080869317,
    0.017057329416275024,
    0.0063530560582876205,
    -0.021380744874477386,
    0.011315946467220783,
    0.04164935648441315,
    -0.004097512923181057,
    0.006832663435488939,
    -0.015750573948025703,
    -0.004601447843015194,
    -0.007402630988508463,
    -0.0018054774263873696,
    -0.010919749736785889,
    0.001826329855248332,
    0.03047242760658264,
    0.023549402132630348,
    -0.0514083206653595,
    0.0071141719818115234,
    -0.048739202320575714,
    -0.01035673264414072,
    -0.012150046415627003,
    -0.009835421107709408,
    0.0013336900155991316,
    -0.017168544232845306,
    0.012309915386140347,
    0.02064395695924759,
    -0.0007155007915571332,
    -0.011246439069509506,
    -0.029415901750326157,
    -0.1734926551580429,
    0.009765912778675556,
    0.003442397341132164,
    -0.05513396114110947,
    -0.007882238365709782,
    0.0030149214435368776,
    0.005081054754555225,
    0.011482766829431057,
    -0.008486960083246231,
    -0.006360006984323263,
    0.020018381997942924,
    -0.02492566779255867,
    -0.012706112116575241,
    -0.027219440788030624,
    -0.01939280889928341,
    -0.0011477554216980934,
    0.02664947137236595,
    -0.012004079297184944,
    0.036589156836271286,
    0.013283031061291695,
    0.02955491840839386,
    -0.03164016455411911,
    0.017238052561879158,
    0.0194484144449234,
    0.007214958779513836,
    -0.018433593213558197,
    -0.009585190564393997,
    0.01772460900247097,
    -0.024758847430348396,
    -0.010078699328005314,
    -0.015138901770114899,
    0.026260225102305412,
    0.031000690534710884,
    0.011545323766767979,
    -0.008521714247763157,
    0.01775241270661354,
    0.010085650719702244,
    -0.010419290512800217,
    -0.02705262042582035,
    0.020157398656010628,
    0.016362247988581657,
    0.022923829033970833,
    0.009988338686525822,
    -0.010801585391163826,
    -0.0013354277471080422,
    0.017794117331504822,
    0.017863625660538673,
    -0.01651516556739807,
    0.005094956606626511,
    -0.023132354021072388,
    0.0061202035285532475,
    -0.017071232199668884,
    0.015514246188104153,
    -0.0019775102846324444,
    0.025884881615638733,
    0.0037221680395305157,
    -0.0063078757375478745,
    0.02146415412425995,
    0.01269221119582653,
    0.007743221707642078,
    0.004187873564660549,
    -0.035755056887865067,
    0.01014125719666481,
    0.00797954946756363,
    -0.011656537652015686,
    -1.1688794074871112e-05,
    -0.0248978640884161,
    0.002120002405717969,
    -0.012414177879691124,
    0.023952551186084747,
    0.014374311082065105,
    0.032668888568878174,
    -0.01395031064748764,
    0.0021530187223106623,
    0.00311049516312778,
    0.022701401263475418,
    -0.04220542311668396,
    0.01765510067343712,
    0.007784926798194647,
    -0.020018381997942924,
    -0.013004997745156288,
    0.015889590606093407,
    -0.015222311951220036,
    -0.006398236379027367,
    0.025161994621157646,
    -0.002924560569226742,
    -0.014374311082065105,
    -0.020532744005322456,
    -0.003529282519593835,
    0.008452205918729305,
    0.0009096895228140056,
    -0.026329733431339264,
    -0.02539832331240177,
    -0.010078699328005314,
    -0.0054911538027226925,
    0.002408461645245552,
    -0.0012806899612769485,
    0.02616291493177414,
    -0.0021165269427001476,
    -0.020935891196131706,
    0.012761718593537807,
    0.017418773844838142,
    -0.015875689685344696,
    0.003093118080869317,
    0.019198184832930565,
    0.023493796586990356,
    -0.00822282861918211,
    0.0033172823023051023,
    0.006109777372330427,
    0.03914706036448479,
    0.003306856146082282,
    0.015973001718521118,
    0.023841338232159615,
    0.029304688796401024,
    -0.03080606646835804,
    0.015055491589009762,
    -0.006269646342843771,
    -0.009376666508615017,
    0.013644473627209663,
    -0.015277918428182602,
    0.02453641965985298,
    0.005776137579232454,
    -0.015833985060453415,
    0.008792796172201633,
    -0.0038577092345803976,
    -0.0207273680716753,
    -0.11777482181787491,
    -0.03800712525844574,
    -0.008966566994786263,
    0.006200138013809919,
    -0.023507697507739067,
    -0.0194484144449234,
    -0.0030218721367418766,
    0.030138786882162094,
    -0.01035673264414072,
    0.02370232157409191,
    -0.011684340424835682,
    -0.0035205939784646034,
    -0.02239556610584259,
    0.014666245318949223,
    -0.05115808919072151,
    0.006551154889166355,
    -0.05563442036509514,
    0.02958272211253643,
    -0.0011373291490599513,
    0.014860868453979492,
    0.00043790211202576756,
    0.012372472323477268,
    -0.013283031061291695,
    0.009453125298023224,
    -0.015750573948025703,
    0.007729319855570793,
    -0.04465211555361748,
    0.004775218199938536,
    0.007430434226989746,
    0.005876924376934767,
    -0.018906250596046448,
    -0.034364890307188034,
    -0.020004481077194214,
    0.01375568751245737,
    0.018322380259633064,
    0.010454044677317142,
    -0.020574448630213737,
    -0.013241326436400414,
    0.03800712525844574,
    -0.020866382867097855,
    0.013790441676974297,
    -0.003164364257827401,
    0.009967486374080181,
    0.011024012230336666,
    0.030917279422283173,
    -0.012455882504582405,
    -0.004253906197845936,
    0.02830376848578453,
    0.02581537328660488,
    -0.017071232199668884,
    0.00842440314590931,
    -0.014443819411098957,
    -0.0024380027316510677,
    -0.0012459357967600226,
    0.022979434579610825,
    -0.02156146615743637,
    -0.001583050936460495,
    0.002509248675778508,
    0.015806181356310844,
    0.012977194972336292,
    -0.0026882325764745474,
    0.010238568298518658,
    -0.0023754453286528587,
    0.03717302531003952,
    0.01326912920922041,
    0.015583754517138004,
    -0.020421531051397324,
    0.0061202035285532475,
    0.036894991993904114,
    -0.016390051692724228,
    -0.015583754517138004,
    -0.02150586061179638,
    -0.034781940281391144,
    0.010676470585167408,
    -0.0038577092345803976,
    0.0032477739732712507,
    -0.007103745359927416,
    -0.002040067920461297,
    0.005692727398127317,
    -0.00024175846192520112,
    0.0013250014744699001,
    0.013477654196321964,
    -0.028470588847994804,
    -0.025537339970469475,
    0.026427045464515686,
    0.012796472758054733,
    0.0021738712675869465,
    0.0017629035282880068,
    0.03389223292469978,
    -0.03742325305938721,
    0.029888557270169258,
    -0.016695886850357056,
    0.02911006473004818,
    -0.0022572812158614397,
    -0.005633645690977573,
    0.0066067613661289215,
    -0.005143612157553434,
    -0.0003242995298933238,
    -0.03127872198820114,
    -0.007840532809495926,
    -0.039897747337818146,
    -0.02200631983578205,
    -0.06422564387321472,
    0.007611155975610018,
    0.023424288257956505,
    -0.004455480258911848,
    -0.006019416265189648,
    -0.016181526705622673,
    -0.019086971879005432,
    -0.030194394290447235,
    -0.017363166436553,
    0.004486759193241596,
    -0.02706652134656906,
    -0.009300206787884235,
    -0.026746783405542374,
    0.0014153622323647141,
    -0.00569967832416296,
    -0.004928136710077524,
    0.028109146282076836,
    -0.01730756089091301,
    0.04237224534153938,
    0.017919233068823814,
    -0.0028793802484869957,
    0.004785644821822643,
    0.009321059100329876,
    0.014096277765929699,
    -0.013971162959933281,
    -0.03166797012090683,
    -0.007826631888747215,
    0.015333524905145168,
    -0.01982375979423523,
    -0.028915442526340485,
    0.026079503819346428,
    -0.019517922773957253,
    0.006641515530645847,
    0.018350183963775635,
    0.026496553793549538,
    0.0062939743511378765,
    0.019490119069814682,
    -0.02780330926179886,
    0.042427849024534225,
    -0.006554630119353533,
    -8.373575110454112e-05,
    -0.0345873162150383,
    0.03586626797914505,
    -0.01098925806581974,
    -0.025592945516109467,
    0.00031474215211346745,
    -0.010975356213748455,
    0.012615751475095749,
    0.009390567429363728,
    -0.01734926551580429,
    0.021325137466192245,
    0.022187041118741035,
    -0.0328357070684433,
    -0.012483686208724976,
    -0.00022372975945472717,
    -0.007333122659474611,
    -0.0032651510555297136,
    0.021339040249586105,
    0.004549316596239805,
    0.002601347165182233,
    0.036894991993904114,
    -0.014228343963623047,
    0.0038021025247871876,
    -0.0009322797413915396,
    -0.009758961386978626,
    -0.017182445153594017,
    -0.02238166332244873,
    -0.005115808919072151,
    -0.017154641449451447,
    0.002504035597667098,
    -0.022075828164815903,
    0.004594496916979551,
    0.03895243629813194,
    0.023716222494840622,
    0.019740350544452667,
    -0.014916475862264633,
    -0.014652344398200512,
    -0.0031626264099031687,
    -0.031834788620471954,
    0.041621554642915726,
    0.03380882367491722,
    -0.020518843084573746,
    -0.02150586061179638,
    0.025662453845143318,
    0.025245405733585358,
    -0.023799633607268333,
    -0.006460794247686863,
    -0.00022025434009265155,
    0.013394244015216827,
    0.01244893204420805,
    -0.0033833151683211327,
    -0.006207088939845562,
    -0.015931297093629837,
    -0.0047474149614572525,
    0.030277803540229797,
    0.0036109548527747393,
    0.0009227223345078528,
    -0.014860868453979492,
    0.03255767375230789,
    -0.005432071629911661,
    0.015889590606093407,
    -0.02108881063759327,
    -0.010676470585167408,
    -0.042817097157239914,
    -0.030611444264650345,
    -0.01608421467244625,
    -0.017238052561879158,
    -0.03291912004351616,
    -0.011872013099491596,
    0.028581801801919937,
    0.01368617918342352,
    -0.0035258070565760136,
    -0.007715418469160795,
    0.02404986321926117,
    -0.007903090678155422,
    0.015764476731419563,
    0.011587029322981834,
    -0.0033172823023051023,
    -0.005512006115168333,
    0.026941407471895218,
    0.006749253254383802,
    -0.002521412679925561,
    0.03328056260943413,
    -0.024731043726205826,
    0.01540303323417902,
    0.025217602029442787,
    0.004465906415134668,
    -0.01903136447072029,
    -0.005098431836813688,
    -0.01033588033169508,
    -0.020796874538064003,
    -0.018350183963775635,
    -0.029276885092258453,
    -0.0008393123862333596,
    -0.03083387017250061,
    -0.013387293554842472,
    0.0001230513589689508,
    -0.008674632757902145,
    -0.02064395695924759,
    0.08363235741853714,
    -0.01353326067328453,
    -0.015041590668261051,
    0.013192670419812202,
    -0.0013163129333406687,
    0.020143497735261917,
    0.01392250694334507,
    -0.004406824707984924,
    0.006596335209906101,
    -0.022103631868958473,
    0.016306640580296516,
    -0.030055377632379532,
    -0.004681382328271866,
    -0.02660776674747467,
    -0.013157916255295277,
    0.017919233068823814,
    -0.0070307618007063866,
    0.006234892178326845,
    0.0014092802302911878,
    0.012998047284781933,
    0.008514763787388802,
    0.014457721263170242,
    0.005101907067000866,
    -0.012289063073694706,
    -0.013428998179733753,
    -0.0035414465237408876,
    0.031000690534710884,
    0.02831767126917839,
    -0.01780802011489868,
    -0.054689109325408936,
    -0.0020887237042188644,
    -0.008778895251452923,
    -0.005015022121369839,
    -0.015736673027276993,
    -0.014707950875163078,
    -0.0029488885775208473,
    -0.006502498872578144,
    -0.007214958779513836,
    -0.003607479389756918,
    0.0026586914900690317,
    0.0009791977936401963,
    -0.006408663000911474,
    -0.03122311644256115,
    -0.05324333906173706,
    0.008612074889242649,
    0.023744026198983192,
    0.0049211857840418816,
    -0.014610638841986656,
    -0.041204504668712616
  ]
}
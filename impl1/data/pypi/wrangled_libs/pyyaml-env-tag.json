{
  "classifiers": [
    "development status :: 4 - beta",
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "operating system :: os independent",
    "programming language :: python :: 3",
    "programming language :: python :: 3.6",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: software development :: libraries :: python modules",
    "topic :: text processing :: markup"
  ],
  "description": "# pyyaml_env_tag\n\na custom yaml tag for referencing environment variables in yaml files.\n\n## installation\n\ninstall `pyyaml` and the `pyyaml_env_tag` package with pip:\n\n```bash\npip install pyyaml pyyaml_env_tag\n```\n\n### enabling the tag\n\nto enable the tag, import and add the `construct_env_tag` constructor to your yaml\nloader of choice.\n\n```python\nimport yaml\nfrom yaml_env_tag import construct_env_tag\n\nyaml.loader.add_constructor('!env', construct_env_tag)\n```\n\nthen you may use the loader as per usual. for example:\n\n```python\nyaml.load(data, loader=yaml.loader)\n```\n\n## using the tag\n\ninclude the tag `!env` followed by the name of an environment variable in a yaml\nfile and the value of the environment variable will be used in its place.\n\n```yaml\nkey: !env some_variable\n```\n\nif `some_variable` is set to `a string!`, then the above yaml would result in the\nfollowing python object:\n\n```python\n{'key': 'a string!'}\n```\n\nthe content of the variable is parsed using yaml's implicit scalar types, such as\nstring, bool, integer, float, datestamp and null. more complex types are not\nrecognized and simply passed through as a string. for example, if `some_variable`\nwas set to the string `true`, then the above yaml would result in the following:\n\n```python\n{'key': true}\n```\n\nif the variable specified is not set, then a `null` value is assigned as a default.\nyou may define your own default as the last item in a sequence.\n\n```yaml\nkey: !env [some_variable, default]\n```\n\nin the above example, if `some_variable` is not defined, the string `default` would\nbe used instead, as follows:\n\n```python\n{'key': 'default'}\n```\n\nyou may list multiple variables as fallbacks. the first variable which is set is\nused. in any sequance with more than one item, the last item must always be a\ndefault value and will not be resolved as an environment variable.\n\n```yaml\nkey: !env [some_variable, fallback, default]\n```\n\nas with variable contents, the default is resolved to a python object of the\nimplied type (string, bool, integer, float, datestamp and null).\n\nwhen `some_variable` is not set, all four of the following items will resolve to\nthe same value (`none`):\n\n```yaml\n- !env some_variable\n- !env [some_variable]\n- !env [some_variable, ~]\n- !env [some_variable, null]\n```\n\n## related\n\npyyaml_env_tag was inspired by the ruby package [yaml-env-tag].\n\nan alternate method of referencing environment variables in yaml files is\nimplemented by [pyyaml-tags] and [python_yaml_environment_variables].\neach of those libraries use a template string and replace the template tag with\nthe content of the variable. while this allows a single value to reference\nmultiple variables and to contain additional content, it restricts all values\nto strings only and does not provide a way to define defaults.\n\n[yaml-env-tag]: https://github.com/jirutka/yaml-env-tag\n[pyyaml-tags]: https://github.com/meiblorn/pyyaml-tags\n[python_yaml_environment_variables]: https://gist.github.com/mkaranasou/ba83e25c835a8f7629e34dd7ede01931\n\n## license\n\npyyaml_env_tag is licensed under the [mit license] as defined in `license`.\n\n[mit license]: https://opensource.org/licenses/mit\n\n## changelog\n\n### version 0.1 (released 2020-11-11)\n\nthe initial release.\n",
  "docs_url": null,
  "keywords": "",
  "license": "",
  "name": "pyyaml_env_tag",
  "package_url": "https://pypi.org/project/pyyaml_env_tag/",
  "project_url": "https://pypi.org/project/pyyaml_env_tag/",
  "project_urls": {
    "Homepage": "https://github.com/waylan/pyyaml-env-tag"
  },
  "release_url": "https://pypi.org/project/pyyaml_env_tag/0.1/",
  "requires_dist": [
    "pyyaml"
  ],
  "requires_python": ">=3.6",
  "summary": "a custom yaml tag for referencing environment variables in yaml files. ",
  "version": "0.1",
  "releases": [],
  "developers": [
    "waylan.limberg@icloud.com",
    "waylan_limberg"
  ],
  "kwds": "python_yaml_environment_variables pyyaml_env_tag yaml_env_tag construct_env_tag pyyaml",
  "license_kwds": "",
  "libtype": "pypi",
  "id": "pypi_pyyaml_env_tag",
  "homepage": "https://github.com/waylan/pyyaml-env-tag",
  "release_count": 1,
  "dependency_ids": [
    "pypi_pyyaml"
  ]
}
{
  "classifiers": [
    "development status :: 4 - beta",
    "intended audience :: developers",
    "license :: osi approved",
    "operating system :: os independent",
    "programming language :: javascript",
    "programming language :: python :: 3 :: only",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "typing :: typed"
  ],
  "description": "# cdk monitoring constructs\n\n[![npm version](https://badge.fury.io/js/cdk-monitoring-constructs.svg)](https://badge.fury.io/js/cdk-monitoring-constructs)\n[![maven central](https://maven-badges.herokuapp.com/maven-central/io.github.cdklabs/cdkmonitoringconstructs/badge.svg)](https://maven-badges.herokuapp.com/maven-central/io.github.cdklabs/cdkmonitoringconstructs)\n[![pypi version](https://badge.fury.io/py/cdk-monitoring-constructs.svg)](https://badge.fury.io/py/cdk-monitoring-constructs)\n[![nuget version](https://badge.fury.io/nu/cdklabs.cdkmonitoringconstructs.svg)](https://badge.fury.io/nu/cdklabs.cdkmonitoringconstructs)\n[![gitpod ready-to-code](https://img.shields.io/badge/gitpod-ready--to--code-blue?logo=gitpod)](https://gitpod.io/#https://github.com/cdklabs/cdk-monitoring-constructs)\n[![mergify](https://img.shields.io/endpoint.svg?url=https://gh.mergify.io/badges/cdklabs/cdk-monitoring-constructs&style=flat)](https://mergify.io)\n\neasy-to-use cdk constructs for monitoring your aws infrastructure with [amazon cloudwatch](https://aws.amazon.com/cloudwatch/).\n\n* easily add commonly-used alarms using predefined properties\n* generate concise cloudwatch dashboards that indicate your alarms\n* extend the library with your own extensions or custom metrics\n* consume the library in multiple supported languages\n\n## installation\n\n<details><summary><strong>typescript</strong></summary>\n\n> https://www.npmjs.com/package/cdk-monitoring-constructs\n\nin your `package.json`:\n\n```json\n{\n  \"dependencies\": {\n    \"cdk-monitoring-constructs\": \"^7.0.0\",\n\n    // peer dependencies of cdk-monitoring-constructs\n    \"@aws-cdk/aws-redshift-alpha\": \"^2.112.0-alpha.0\",\n    \"aws-cdk-lib\": \"^2.112.0\",\n    \"constructs\": \"^10.0.5\"\n\n    // ...your other dependencies...\n  }\n}\n```\n\n</details><details><summary><strong>java</strong></summary>\n\nsee https://mvnrepository.com/artifact/io.github.cdklabs/cdkmonitoringconstructs\n\n</details><details><summary><strong>python</strong></summary>\n\nsee https://pypi.org/project/cdk-monitoring-constructs/\n\n</details><details><summary><strong>c#</strong></summary>\n\nsee https://www.nuget.org/packages/cdklabs.cdkmonitoringconstructs/\n\n</details>\n\n## features\n\nyou can browse the documentation at https://constructs.dev/packages/cdk-monitoring-constructs/\n\n| item | monitoring | alarms | notes |\n| ---- | ---------- | ------ | ----- |\n| aws api gateway (rest api) (`.monitorapigateway()`) | tps, latency, errors | latency, error count/rate, low/high tps | to see metrics, you have to enable advanced monitoring |\n| aws api gateway v2 (http api) (`.monitorapigatewayv2httpapi()`) | tps, latency, errors | latency, error count/rate, low/high tps | to see route level metrics, you have to enable advanced monitoring |\n| aws appsync (graphql api) (`.monitorappsyncapi()`) | tps, latency, errors | latency, error count/rate, low/high tps | |\n| amazon aurora (`.monitorauroracluster()`) | query duration, connections, latency, cpu usage, serverless database capacity | connections, serverless database capacity and cpu usage | |\n| aws billing (`.monitorbilling()`) | aws account cost | total cost (anomaly) | [requires enabling](https://docs.aws.amazon.com/amazoncloudwatch/latest/monitoring/gs_monitor_estimated_charges_with_cloudwatch.html#gs_turning_on_billing_metrics) the **receive billing alerts** option in aws console / billing preferences |\n| aws certificate manager (`.monitorcertificate()`) | certificate expiration | days until expiration | |\n| aws cloudfront (`.monitorcloudfrontdistribution()`) | tps, traffic, latency, errors | error rate, low/high tps | |\n| aws cloudwatch logs (`.monitorlog()`) | patterns present in the log group | minimum incoming logs | |\n| aws cloudwatch synthetics canary (`.monitorsyntheticscanary()`) | latency, error count/rate | error count/rate, latency | |\n| aws codebuild (`.monitorcodebuildproject()`) | build counts (total, successful, failed), failed rate, duration | failed build count/rate, duration | |\n| aws documentdb (`.monitordocumentdbcluster()`) | cpu, throttling, read/write latency, transactions, cursors | cpu | |\n| aws dynamodb (`.monitordynamotable()`) | read and write capacity provisioned / used | consumed capacity, throttling, latency, errors | |\n| aws dynamodb global secondary index (`.monitordynamotableglobalsecondaryindex()`) | read and write capacity, indexing progress, throttled events | | |\n| aws ec2 (`.monitorec2instances()`) | cpu, disk operations, network | | |\n| aws ec2 auto scaling groups (`.monitorautoscalinggroup()`) | group size, instance status | | |\n| aws ecs (`.monitorfargateservice()`, `.monitorec2service()`, `.monitorsimplefargateservice()`, `monitorsimpleec2service()`, `.monitorqueueprocessingfargateservice()`, `.monitorqueueprocessingec2service()`) | system resources and task health | unhealthy task count, running tasks count, cpu/memory usage, and bytes processed by load balancer (if any) | use for ecs-patterns load balanced ec2/fargate constructs (networkloadbalancedec2service, networkloadbalancedfargateservice, applicationloadbalancedec2service, applicationloadbalancedfargateservice) |\n| aws elasticache (`.monitorelasticachecluster()`) | cpu/memory usage, evictions and connections | cpu, memory, items count | |\n| aws glue (`.monitorgluejob()`) | traffic, job status, memory/cpu usage | failed/killed task count/rate | |\n| aws kinesis data analytics (`.monitorkinesisdataanalytics`) | up/downtime, cpu/memory usage, kpu usage, checkpoint metrics, and garbage collection metrics | downtime, full restart count | |\n| aws kinesis data stream (`.monitorkinesisdatastream()`) | put/get/incoming record/s and throttling | throttling, throughput, iterator max age | |\n| aws kinesis firehose (`.monitorkinesisfirehose()`) | number of records, requests, latency, throttling | throttling | |\n| aws lambda (`.monitorlambdafunction()`) | latency, errors, iterator max age | latency, errors, throttles, iterator max age | optional lambda insights metrics (opt-in) support |\n| aws load balancing (`.monitornetworkloadbalancer()`, `.monitorfargateapplicationloadbalancer()`, `.monitorfargatenetworkloadbalancer()`, `.monitorec2applicationloadbalancer()`, `.monitorec2networkloadbalancer()`) | system resources and task health | unhealthy task count, running tasks count, (for fargate/ec2 apps) cpu/memory usage | use for fargateservice or ec2service backed by a networkloadbalancer or applicationloadbalancer |\n| aws opensearch/elasticsearch (`.monitoropensearchcluster()`, `.monitorelasticsearchcluster()`) | indexing and search latency, disk/memory/cpu usage | indexing and search latency, disk/memory/cpu usage, cluster status, kms keys | |\n| aws rds (`.monitorrdscluster()`) | query duration, connections, latency, disk/cpu usage | connections, disk and cpu usage | |\n| aws redshift (`.monitorredshiftcluster()`) | query duration, connections, latency, disk/cpu usage | query duration, connections, disk and cpu usage | |\n| aws s3 bucket (`.monitors3bucket()`) | bucket size and number of objects | | |\n| aws secretsmanager (`.monitorsecretsmanager()`) | max secret count, min secret sount, secret count change | min/max secret count or change in secret count | |\n| aws secretsmanager secret (`.monitorsecretsmanagersecret()`) | days since last rotation | days since last change or rotation | |\n| aws sns topic (`.monitorsnstopic()`) | message count, size, failed notifications | failed notifications, min/max published messages | |\n| aws sqs queue (`.monitorsqsqueue()`, `.monitorsqsqueuewithdlq()`) | message count, age, size | message count, age, dlq incoming messages | |\n| aws step functions (`.monitorstepfunction()`, `.monitorstepfunctionactivity()`, `monitorstepfunctionlambdaintegration()`, `.monitorstepfunctionserviceintegration()`) | execution count and breakdown per state | duration, failed, failed rate, aborted, throttled, timed out executions | |\n| aws web application firewall (`.monitorwebapplicationfirewallaclv2()`) | allowed/blocked requests | blocked requests count/rate | |\n| fluentbit (`.monitorfluentbit()`) | num of input records, output failures & retries, filter metrics, storage metrics | | fluentbit needs proper configuration with  metrics enabled: [official sample configuration](https://github.com/aws-samples/amazon-ecs-firelens-examples/tree/mainline/examples/fluent-bit/send-fb-internal-metrics-to-cw). this function creates metricfilters to publish all fluentbit metrics. |\n| custom metrics (`.monitorcustom()`) | addition of custom metrics into the dashboard (each group is a widget) | | supports anomaly detection |\n\n## getting started\n\n### create a facade\n\n*important note*: **please, do not import anything from the `/dist/lib` package.** this is unsupported and might break any time.\n\n1. create an instance of `monitoringfacade`, which is the main entrypoint.\n2. call methods on the facade like `.monitorlambdafunction()` and chain them together to define your monitors. you can also use methods to add your own widgets, headers of various sizes, and more.\n\nfor examples of monitoring different resources, refer to [the unit tests](https://github.com/cdklabs/cdk-monitoring-constructs/tree/main/test/monitoring).\n\n```python\nexport interface monitoringstackprops extends deploymentstackprops {\n  // ...\n}\n\n// this could be in the same stack as your resources, as a nested stack, or a separate stack as you see fit\nexport class monitoringstack extends deploymentstack {\n  constructor(parent: app, name: string, props: monitoringstackprops) {\n    super(parent, name, props);\n\n    const monitoring = new monitoringfacade(this, \"monitoring\", {\n      // defaults are provided for these, but they can be customized as desired\n      metricfactorydefaults: { ... },\n      alarmfactorydefaults: { ... },\n      dashboardfactory: { ... },\n    });\n\n    // monitor your resources\n    monitoring\n      .addlargeheader(\"storage\")\n      .monitordynamotable({ /* monitor a dynamodb table */ })\n      .monitordynamotable({ /* and a different table */ })\n      .monitorlambdafunction({ /* and a lambda function */ })\n      .monitorcustom({ /* and some arbitrary metrics in cloudwatch */ })\n      // ... etc.\n  }\n}\n```\n\n### customize actions\n\nalarms should have an action setup, otherwise they are not very useful. currently, we support notifying an sns topic.\n\n```python\nconst onalarmtopic = new topic(this, \"alarmtopic\");\n\nconst monitoring = new monitoringfacade(this, \"monitoring\", {\n  // ...other props\n  alarmfactorydefaults: {\n    // ....other props\n    action: new snsalarmactionstrategy({ onalarmtopic }),\n  },\n});\n```\n\nyou can override the default topic for any alarm like this:\n\n```python\nmonitoring\n  .monitorsomething(something, {\n    addsomealarm: {\n      warning: {\n        // ...other props\n        threshold: 42,\n        actionoverride: new snsalarmactionstrategy({ onalarmtopic }),\n      }\n    }\n  });\n```\n\n### custom metrics\n\nfor simply adding some custom metrics, you can use `.monitorcustom()` and specify your own title and metric groups.\neach metric group will be rendered as a single graph widget, and all widgets will be placed next to each other.\nall the widgets will have the same size, which is chosen based on the number of groups to maximize dashboard space usage.\n\ncustom metric monitoring can be created for simple metrics, simple metrics with anomaly detection and search metrics.\nthe first two also support alarming.\n\nbelow we are listing a couple of examples. let us assume that there are three existing metric variables: `m1`, `m2`, `m3`.\nthey can either be created by hand (`new metric({...})`) or (preferably) by using `metricfactory` (that can be obtained from facade).\nthe advantage of using the shared `metricfactory` is that you do not need to worry about period, etc.\n\n```python\n// create metrics manually\nconst m1 = new metric(/* ... */);\n```\n\n```python\nconst metricfactory = monitoringfacade.createmetricfactory();\n\n// create metrics using metric factory\nconst m1 = metricfactory.createmetric(/* ... */);\n```\n\n#### example: metric with anomaly detection\n\nin this case, only one metric is supported.\nmultiple metrics cannot be rendered with anomaly detection in a single widget due to a cloudwatch limitation.\n\n```python\nmonitorcustom({\n  title: \"metric with anomaly detection\",\n  metrics: [\n    {\n      metric: m1,\n      anomalydetectionstandarddeviationtorender: 3\n    }\n  ]\n})\n```\n\nadding an alarm:\n\n```python\nmonitorcustom({\n  title: \"metric with anomaly detection and alarm\",\n  metrics: [\n    {\n      metric: m1,\n      alarmfriendlyname: \"metricwithanomalydetectionalarm\",\n      anomalydetectionstandarddeviationtorender: 3,\n      addalarmonanomaly: {\n        warning: {\n          standarddeviationforalarm: 4,\n          alarmwhenabovetheband: true,\n          alarmwhenbelowtheband: true\n        }\n      }\n    }\n  ]\n})\n```\n\n#### example: search metrics\n\n```python\nmonitorcustom({\n  title: \"metric search\",\n  metrics: [\n    {\n      searchquery: \"my.prefix.\",\n      dimensionsmap: {\n        firstdimension: \"firstdimensionvalue\",\n        // allow any value for the given dimension (pardon the weird typing to satisfy dimensionsmap)\n        seconddimension: undefined as unknown as string\n      }\n      statistic: metricstatistic.sum,\n    }\n  ]\n})\n```\n\nsearch metrics do not support setting an alarm, which is a cloudwatch limitation.\n\n### route53 health checks\n\nroute53 has [strict requirements](https://docs.aws.amazon.com/route53/latest/developerguide/health-checks-types.html) as to which alarms are allowed to be referenced in health checks.\nyou adjust the metric for an alarm sot hat it can be used in a route53 health checks as follows:\n\n```python\nmonitoring\n  .monitorsomething(something, {\n    addsomealarm: {\n      warning: {\n        // ...other props\n        metricadjuster: route53healthcheckmetricadjuster.instance,\n      }\n    }\n  });\n```\n\nthis will ensure the alarm can be used on a route53 health check or otherwise throw an `error` indicating why the alarm can't be used.\nin order to easily find your route53 health check alarms later on, you can apply a custom tag to them as follows:\n\n```python\nimport { cfnhealthcheck } from \"aws-cdk-lib/aws-route53\";\n\nmonitoring\n  .monitorsomething(something, {\n    addsomealarm: {\n      warning: {\n        // ...other props\n        customtags: [\"route53-health-check\"],\n        metricadjuster: route53healthcheckmetricadjuster.instance,\n      }\n    }\n  });\n\nconst alarms = monitoring.createdalarmswithtag(\"route53-health-check\");\n\nconst healthchecks = alarms.map(({ alarm }) => {\n  const id = gethealthcheckconstructid(alarm);\n\n  return new cfnhealthcheck(scope, id, {\n    healthcheckconfig: {\n      // ...other props\n      type: \"cloudwatch_metric\",\n      alarmidentifier: {\n        name: alarm.alarmname,\n        region: alarm.stack.region,\n      },\n    },\n  });\n});\n```\n\n### custom monitoring segments\n\nif you want even more flexibility, you can create your own segment.\n\nthis is a general procedure on how to do it:\n\n1. extend the `monitoring` class\n2. override the `widgets()` method (and/or similar ones)\n3. leverage the metric factory and alarm factory provided by the base class (you can create additional factories, if you will)\n4. add all alarms to `.addalarm()` so they are visible to the user and being placed on the alarm summary dashboard\n\nboth of these monitoring base classes are dashboard segments, so you can add them to your monitoring by calling `.addsegment()` on the `monitoringfacade`.\n\n### modifying or omitting widgets from default dashboard segments\n\nwhile the dashboard widgets defined in the library are meant to cover most use cases, they might not be what you're looking for.\n\nto modify the widgets:\n\n1. extend the appropriate `monitoring` class (e.g., `lambdafunctionmonitoring` for `monitorlambdafunction`) and override the relevant methods (e.g., `widgets`):\n\n   ```python\n   export class mycustomizedlambdafunctionmonitoring extends lambdafunctionmonitoring {\n     widgets(): iwidget[] {\n       return [\n         // whatever widgets you want instead of what lambdafunctionmonitoring has\n       ];\n     }\n   }\n   ```\n2. use the facade's `addsegment` method with your custom class:\n\n   ```python\n   declare const facade: monitoringfacade;\n\n   facade.addsegment(new mycustomizedlambdafunctionmonitoring(facade, {\n     // props for lambdafunctionmonitoring\n   }));\n   ```\n\n### custom dashboards\n\nif you want *even* more flexibility, you can take complete control over dashboard generation by leveraging dynamic dashboarding features. this allows you to create an arbitrary number of dashboards while configuring each of them separately. you can do this in three simple steps:\n\n1. create a dynamic dashboard factory\n2. create `idynamicdashboardsegment` implementations\n3. add dynamic segments to your `monitoringfacade`\n\n#### create a dynamic dashboard factory\n\nthe below code sample will generate two dashboards with the following names:\n\n* exampledashboards-hostedservice\n* exampledashboards-infrastructure\n\n```python\n// create the dynamic dashboard factory.\nconst factory = new dynamicdashboardfactory(stack, \"dynamicdashboards\", {\n  dashboardnameprefix: \"exampledashboards\",\n  dashboardconfigs: [\n    // 'name' is the minimum required configuration\n    { name: \"hostedservice\" },\n    // below is an example of additional dashboard-specific config options\n    {\n      name: \"infrastructure\",\n      range: duration.hours(3),\n      periodoverride: periodoverride.auto,\n      renderingpreference: dashboardrenderingpreference.bitmap_only\n    },\n  ],\n});\n```\n\n#### create `idynamicdashboardsegment` implementations\n\nfor each construct you want monitored, you will need to create an implementation of an `idynamicdashboardsegment`. the following is a basic reference implementation as an example:\n\n```python\nexport enum dashboardtypes {\n  hostedservice = \"hostedservice\",\n  infrastructure = \"infrastructure\",\n}\n\nclass examplesegment implements idynamicdashboardsegment {\n  widgetsfordashboard(name: string): iwidget[] {\n    // this logic is what's responsible for allowing your dynamic segment to return\n    // different widgets for different dashboards\n    switch (name) {\n      case dashboardtypes.hostedservice:\n        return [new textwidget({ markdown: \"this shows metrics for your service hosted on aws infrastructure\" })];\n      case dashboardtypes.infrastructure:\n        return [new textwidget({ markdown: \"this shows metrics for the aws infrastructure supporting your hosted service\" })];\n      default:\n        throw new error(\"unexpected dashboard name!\");\n    }\n  }\n}\n```\n\n#### add dynamic segments to monitoringfacade\n\nwhen you have instances of an `idynamicdashboardsegment` to use, they can be added to your dashboard like this:\n\n```python\nmonitoring.adddynamicsegment(new examplesegment());\n```\n\nnow, this widget will be added to both dashboards and will show different content depending on the dashboard. using the above example code, two dashboards will be generated with the following content:\n\n* dashboard name: \"exampledashboards-hostedservice\"\n\n  * content: \"this shows metrics for your service hosted on aws infrastructure\"\n* dashboard name: \"exampledashboards-infrastructure\"\n\n  * content: \"this shows metrics for the aws infrastructure supporting your hosted service\"\n\n### monitoring scopes\n\nyou can monitor complete cdk construct scopes using an aspect. it will automatically discover all monitorable resources within the scope recursively and add them to your dashboard.\n\n```python\nmonitoring.monitorscope(stack, {\n  // with optional configuration\n  lambda: {\n    props: {\n      addlatencyp50alarm: {\n        critical: { maxlatency: duration.seconds(10) },\n      },\n    },\n  },\n\n  // some resources that aren't dependent on nodes (e.g. general metrics across instances/account) may be included\n  // by default, which can be explicitly disabled.\n  billing: { enabled: false },\n  ec2: { enabled: false },\n  elasticcache: { enabled: false },\n});\n```\n\n## contributing\n\nsee [contributing](contributing.md) for more information.\n\n## security policy\n\nsee [security](security.md) for more information.\n\n## license\n\nthis project is licensed under the apache-2.0 license.\n",
  "docs_url": null,
  "keywords": "",
  "license": "apache-2.0",
  "name": "cdk-monitoring-constructs",
  "package_url": "https://pypi.org/project/cdk-monitoring-constructs/",
  "project_url": "https://pypi.org/project/cdk-monitoring-constructs/",
  "project_urls": {
    "Homepage": "https://github.com/cdklabs/cdk-monitoring-constructs",
    "Source": "https://github.com/cdklabs/cdk-monitoring-constructs"
  },
  "release_url": "https://pypi.org/project/cdk-monitoring-constructs/7.2.1/",
  "requires_dist": [
    "aws-cdk-lib <3.0.0,>=2.112.0",
    "aws-cdk.aws-redshift-alpha <3.0.0,>=2.112.0.a0",
    "constructs <11.0.0,>=10.0.5",
    "jsii <2.0.0,>=1.93.0",
    "publication >=0.0.3",
    "typeguard ~=2.13.3"
  ],
  "requires_python": "~=3.8",
  "summary": "cdk-monitoring-constructs",
  "version": "7.2.1",
  "releases": [],
  "developers": [
    "monitoring-cdk-constructs@amazon.com"
  ],
  "kwds": "cdkmonitoringconstructs monitoringstackprops maven cdk monitoringstack",
  "license_kwds": "apache-2.0",
  "libtype": "pypi",
  "id": "pypi_cdk_monitoring_constructs",
  "homepage": "https://github.com/cdklabs/cdk-monitoring-constructs",
  "release_count": 240,
  "dependency_ids": [
    "pypi_aws_cdk_lib",
    "pypi_aws_cdk.aws_redshift_alpha",
    "pypi_constructs",
    "pypi_jsii",
    "pypi_publication",
    "pypi_typeguard"
  ]
}
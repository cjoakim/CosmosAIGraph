{
  "classifiers": [
    "framework :: robot framework",
    "license :: osi approved :: apache software license",
    "operating system :: os independent",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "topic :: software development :: testing",
    "topic :: software development :: testing :: acceptance"
  ],
  "description": "a library for data-driven testing.\n===================================================\ndatadriver for robot framework\u00ae\n===================================================\n\ndatadriver is a data-driven extension for robot framework\u00ae.\nthis document explains how to use the datadriver library listener. for\ninformation about installation, support, and more, please visit the\n`project page <https://github.com/snooz82/robotframework-datadriver>`_\n\nfor more information about robot framework\u00ae, see https://robotframework.org.\n\ndatadriver is used/imported as library but does not provide keywords\nwhich can be used in a test. datadriver uses the listener interface\nversion 3 to manipulate the test cases and creates new test cases based\non a data-file that contains the data for data-driven testing. these\ndata file may be .csv , .xls or .xlsx files.\n\ndata driver is also able to cooperate with microsoft pict. an open\nsource windows tool for data combination testing. pict is able to\ngenerate data combinations based on textual model definitions.\nhttps://github.com/microsoft/pict\n\nit is also possible to implement own datareaders in python to read\nyour test data from some other sources, like databases or json files.\n\n\ninstallation\n------------\n\nif you already have python >= 3.6 with pip installed, you can simply\nrun:\n\n``pip install --upgrade robotframework-datadriver``\n\n\nexcel support\n~~~~~~~~~~~~~\n\nfor file support of ``xls`` or ``xlsx`` file you need to install the extra xls or the dependencies.\nit contains the dependencies of pandas, numpy and xlrd. just add [xls] to your installation.\nnew since version 3.6.\n\n``pip install --upgrade robotframework-datadriver[xls]``\n\n\npython 2\n~~~~~~~~\n\nor if you have python 2 and 3 installed in parallel you may use\n\n``pip3 install --upgrade robotframework-datadriver``\n\ndatadriver is compatible with python 2.7 only in version 0.2.7.\n\n``pip install --upgrade robotframework-datadriver==0.2.7``\n\nbecause python 2.7 is deprecated, there are no new feature to python 2.7 compatible version.\n\n\ntable of contents\n-----------------\n\n-  `what datadriver does`_\n-  `how datadriver works`_\n-  `usage`_\n-  `structure of test suite`_\n-  `structure of data file`_\n-  `accessing test data from robot variables`_\n-  `data sources`_\n-  `file encoding and csv dialect`_\n-  `custom datareader classes`_\n-  `selection of test cases to execute`_\n-  `configure datadriver by pre-run keyword`_\n-  `pabot and datadriver`_\n\n\nwhat datadriver does\n--------------------\n\ndatadriver is an alternative approach to create data-driven tests with\nrobot framework\u00ae. datadriver creates multiple test cases based on a test\ntemplate and data content of a csv or excel file. all created tests\nshare the same test sequence (keywords) and differ in the test data.\nbecause these tests are created on runtime only the template has to be\nspecified within the robot test specification and the used data are\nspecified in an external data file.\n\n\nrobocon 2020 talk\n~~~~~~~~~~~~~~~~~\n\n.. image:: https://img.youtube.com/vi/rteur1i4x3s/0.jpg\n   :target: https://www.youtube.com/watch?v=rteur1i4x3s\n\nbrief overview what datadriver is and how it works at the robocon 2020 in helsiki.\n\n\nalternative approach\n~~~~~~~~~~~~~~~~~~~~\n\ndatadriver gives an alternative to the build in data driven approach\nlike:\n\n.. code :: robotframework\n\n    *** settings ***\n    resource    login_resources.robot\n\n    suite setup    open my browser\n    suite teardown    close browsers\n    test setup      open login page\n    test template    invalid login\n\n\n    *** test cases ***       user        passwort\n    right user empty pass    demo        ${empty}\n    right user wrong pass    demo        foobar\n\n    empty user right pass    ${empty}    mode\n    empty user empty pass    ${empty}    ${empty}\n    empty user wrong pass    ${empty}    foobar\n\n    wrong user right pass    foobar      mode\n    wrong user empty pass    foobar      ${empty}\n    wrong user wrong pass    foobar      foobar\n\n    *** keywords ***\n    invalid login\n        [arguments]    ${username}    ${password}\n        input username    ${username}\n        input pwd    ${password}\n        click login button\n        error page should be visible\n\nthis inbuilt approach is fine for a hand full of data and a hand full of\ntest cases. if you have generated or calculated data and specially if\nyou have a variable amount of test case / combinations these robot files\nbecome quite a pain. with datadriver you may write the same test case\nsyntax but only once and deliver the data from en external data file.\n\none of the rare reasons when microsoft\u00ae excel or libreoffice calc may be\nused in testing\u2026 ;-)\n\n`see example test suite <#example-suite>`__\n\n`see example csv table <#example-csv>`__\n\n\nhow datadriver works\n--------------------\n\nwhen the datadriver is used in a test suite it will be activated before\nthe test suite starts. it uses the listener interface version 3 of robot\nframework\u00ae to read and modify the test specification objects. after\nactivation it searches for the ``test template`` -keyword to analyze the\n``[arguments]`` it has. as a second step, it loads the data from the\nspecified data source. based on the ``test template`` -keyword, datadriver\ncreates as much test cases as data sets are in the data source.\n\nin the case that data source is csv (default)\nas values for the arguments of the ``test template`` -keyword, datadriver\nreads values from the column of the csv file with the matching name of the\n``[arguments]``.\nfor each line of the csv data table, one test case will be created. it\nis also possible to specify test case names, tags and documentation for\neach test case in the specific test suite related csv file.\n\n\nusage\n-----\n\ndata driver is a \"library listener\" but does not provide keywords.\nbecause data driver is a listener and a library at the same time it\nsets itself as a listener when this library is imported into a test suite.\n\nto use it, just use it as library in your suite. you may use the first\nargument (option) which may set the file name or path to the data file.\n\nwithout any options set, it loads a .csv file which has the same name\nand path like the test suite .robot .\n\n\n\n**example:**\n\n.. code :: robotframework\n\n    *** settings ***\n    library    datadriver\n    test template    invalid logins\n\n    *** keywords ***\n    invalid logins\n        ...\n\n\nstructure of test suite\n-----------------------\n\n\nrequirements\n~~~~~~~~~~~~\n\nin the moment there are some requirements how a test\nsuite must be structured so that the datadriver can get all the\ninformation it needs.\n\n - only the first test case will be used as a template. all other test\n   cases will be deleted.\n - test cases have to be defined with a\n   ``test template`` in settings secion. reason for this is,\n   that the datadriver needs to know the names of the test case arguments.\n   test cases do not have named arguments. keywords do.\n - the keyword which is used as\n   ``test template`` must be defined within the test suite (in the same\n   \\*.robot file). if the keyword which is used as ``test template`` is\n   defined in a ``resource`` the datadriver has no access to its\n   arguments names.\n\n\nexample test suite\n~~~~~~~~~~~~~~~~~~\n\n.. code :: robotframework\n\n    ***settings***\n    library           datadriver\n    resource          login_resources.robot\n    suite setup       open my browser\n    suite teardown    close browsers\n    test setup        open login page\n    test template     invalid login\n\n    *** test case ***\n    login with user ${username} and password ${password}    default    userdata\n\n    ***** *keywords* *****\n    invalid login\n        [arguments]    ${username}    ${password}\n        input username    ${username}\n        input pwd    ${password}\n        click login button\n        error page should be visible\n\nin this example, the datadriver is activated by using it as a library.\nit is used with default settings.\nas ``test template`` the keyword ``invalid login`` is used. this\nkeyword has two arguments. argument names are ``${username}`` and\n``${password}``. these names have to be in the csv file as column\nheader. the test case has two variable names included in its name,\nwhich does not have any functionality in robot framework\u00ae. however, the\ndata driver will use the test case name as a template name and\nreplaces the variables with the specific value of the single generated\ntest case.\nthis template test will only be used as a template. the specified data\n``default`` and ``userdata`` would only be used if no csv file has\nbeen found.\n\n\nstructure of data file\n----------------------\n\n\nmin. required columns\n~~~~~~~~~~~~~~~~~~~~~\n\n-  ``*** test cases ***`` column has to be the first one.\n-  *argument columns:* for each argument of the ``test template``\n   keyword one column must be existing in the data file as data source.\n   the name of this column must match the variable name and syntax.\n\n\noptional columns\n~~~~~~~~~~~~~~~~\n\n-  *[tags]* column may be used to add specific tags to a test case. tags\n   may be comma separated.\n-  *[documentation]* column may be used to add specific test case\n   documentation.\n\n\nexample data file\n~~~~~~~~~~~~~~~~~\n\n+-------------+-------------+-------------+-------------+------------------+\n| \\**\\* test  | ${username} | ${password} | [tags]      | [documentation]  |\n| cases \\**\\* |             |             |             |                  |\n|             |             |             |             |                  |\n+=============+=============+=============+=============+==================+\n| right user  | demo        | ${empty}    | 1           | this is a test   |\n| empty pass  |             |             |             | case             |\n|             |             |             |             | documentation of |\n|             |             |             |             | the first one.   |\n+-------------+-------------+-------------+-------------+------------------+\n| right user  | demo        | foobar      | 2,3,foo     | this test        |\n| wrong pass  |             |             |             | case has         |\n|             |             |             |             | the tags         |\n|             |             |             |             | 2,3 and foo      |\n|             |             |             |             | assigned.        |\n+-------------+-------------+-------------+-------------+------------------+\n|             | ${empty}    | mode        | 1,2,3,4     | this test        |\n|             |             |             |             | case has a       |\n|             |             |             |             | generated        |\n|             |             |             |             | name based       |\n|             |             |             |             | on template      |\n|             |             |             |             | name.            |\n+-------------+-------------+-------------+-------------+------------------+\n|             | ${empty}    | ${empty}    |             |                  |\n+-------------+-------------+-------------+-------------+------------------+\n|             | ${empty}    | foobar      |             |                  |\n+-------------+-------------+-------------+-------------+------------------+\n|             | foobar      | mode        |             |                  |\n+-------------+-------------+-------------+-------------+------------------+\n|             | foobar      | ${empty}    |             |                  |\n+-------------+-------------+-------------+-------------+------------------+\n|             | foobar      | foobar      |             |                  |\n+-------------+-------------+-------------+-------------+------------------+\n\nin this data file, eight test cases are defined. each line specifies one\ntest case. the first two test cases have specific names. the other six\ntest cases will generate names based on template test cases name with\nthe replacement of variables in this name. the order of columns is\nirrelevant except the first column, ``*** test cases ***``\n\nsupported data types\n~~~~~~~~~~~~~~~~~~~~\n\nin general datadriver supports any object that is handed over from the datareader.\nhowever the text based readers for csv, excel and so do support different types as well.\ndatadriver supports robot framework\u00ae scalar variables as well as dictionaries and lists.\nit also support python literal evaluations.\n\nscalar variables\n^^^^^^^^^^^^^^^^\n\nthe prefix ``$`` defines that the value in the cell is taken as in robot framework\u00ae syntax.\n``string`` is ``str``, ``${1}`` is ``int`` and ``${none}`` is nonetype.\nthe prefix only defines the value typ. it can also be used to assign a scalar to a dictionary key.\nsee example table: ``${user}[id]``\n\n\ndictionary variables\n^^^^^^^^^^^^^^^^^^^^\n\ndictionaries can be created in different ways.\n\none option is, to use the prefix ``&``.\nif a variable is defined that was (i.e. ``&{dict}``) the cell value is interpreted the same way,\nthe builtin keyword `create dictionary <https://robotframework.org/robotframework/latest/libraries/builtin.html#create%20dictionary>`_ would do.\nthe arguments here are comma (``,``) separated.\nsee example table: ``&{dict}``\n\nthe other option is to define scalar variables in dictionary syntax like ``${user}[name]`` or ``${user.name}``\nthat can be also nested dictionaries. datadriver will create robot framework\u00ae (dotdict) dictionaries, that can be accessed with ``${user.name.first}``\nsee example table: ``${user}[name][first]``\n\n\nlist variables\n^^^^^^^^^^^^^^\n\nlists can be created with the prefix ``@`` as comma (``,``) separated list.\nsee example table: ``@{list}``\n\nbe aware that a list with an empty string has to be the cell content `${empty}`.\n\npython literals\n^^^^^^^^^^^^^^^\n\ndatadriver can evaluate literals.\nit uses the prefix ``e`` for that. (i.e. ``e{list_eval}``)\nfor that it uses `builtin evaluate <https://robotframework.org/robotframework/latest/libraries/builtin.html#evaluate>`_\n\nsee example table: ``e{user.chk}``\n\n\n+--------------------------+-----------------------+---------------+-------------------------+-----------------------------+------------------------------------------+--------------------------+-------------------+-------------------+----------------------------+-------------------------+------------------------------------------------------------------+\n|  ``*** test cases ***``  |  ``${scalar}``        |  ``@{list}``  |  ``e{list_eval}``       |  ``&{dict}``                |  ``e{dict_eval}``                        |  ``e{eval}``             |  ``${exp_eval}``  |  ``${user}[id]``  |  ``${user}[name][first]``  |  ``${user.name.last}``  |  ``e{user.chk}``                                                 |\n+--------------------------+-----------------------+---------------+-------------------------+-----------------------------+------------------------------------------+--------------------------+-------------------+-------------------+----------------------------+-------------------------+------------------------------------------------------------------+\n|  ``one``                 |  ``sum list``         |  ``1,2,3,4``  |  ``[\"1\",\"2\",\"3\",\"4\"]``  |  ``key=value``              |  ``{'key': 'value'}``                    |  ``[1,2,3,4]``           |  ``10``           |  ``1``            |  ``pekka``                 |  ``kl\u00e4rck``             |  ``{'id': '1', 'name': {'first': 'pekka', 'last': 'kl\u00e4rck'}}``   |\n+--------------------------+-----------------------+---------------+-------------------------+-----------------------------+------------------------------------------+--------------------------+-------------------+-------------------+----------------------------+-------------------------+------------------------------------------------------------------+\n|  ``two``                 |  ``should be equal``  |  ``a,b,c,d``  |  ``[\"a\",\"b\",\"c\",\"d\"]``  |  ``key,value``              |  ``{'key': 'value'}``                    |  ``true``                |  ``${true}``      |  ``2``            |  ``ed``                    |  ``manlove``            |  ``{'id': '2', 'name': {'first': 'ed', 'last': 'manlove'}}``     |\n+--------------------------+-----------------------+---------------+-------------------------+-----------------------------+------------------------------------------+--------------------------+-------------------+-------------------+----------------------------+-------------------------+------------------------------------------------------------------+\n|  ``three``               |  ``whos your daddy``  |  ``!,\",',$``  |  ``[\"!\",'\"',\"'\",\"$\"]``  |  ``z,value,a,value2``       |  ``{'a': 'value2', 'z': 'value'}``       |  ``{'daddy' : 'ren\u00e9'}``  |  ``ren\u00e9``         |  ``3``            |  ``tatu``                  |  ``aalto``              |  ``{'id': '3', 'name': {'first': 'tatu', 'last': 'aalto'}}``     |\n+--------------------------+-----------------------+---------------+-------------------------+-----------------------------+------------------------------------------+--------------------------+-------------------+-------------------+----------------------------+-------------------------+------------------------------------------------------------------+\n|  ``4``                   |  ``should be equal``  |  ``1``        |  ``[\"1\"]``              |  ``key=value``              |  ``{'key': 'value'}``                    |  ``1``                   |  ``${1}``         |  ``4``            |  ``jani``                  |  ``mikkonen``           |  ``{'id': '4', 'name': {'first': 'jani', 'last': 'mikkonen'}}``  |\n+--------------------------+-----------------------+---------------+-------------------------+-----------------------------+------------------------------------------+--------------------------+-------------------+-------------------+----------------------------+-------------------------+------------------------------------------------------------------+\n|  ``5``                   |  ``should be equal``  |               |  ``[]``                 |  ``a=${2}``                 |  ``{'a':2}``                             |  ``\"string\"``            |  ``string``       |  ``5``            |  ``mikko``                 |  ``korpela``            |  ``{'id': '5', 'name': {'first': 'mikko', 'last': 'korpela'}}``  |\n+--------------------------+-----------------------+---------------+-------------------------+-----------------------------+------------------------------------------+--------------------------+-------------------+-------------------+----------------------------+-------------------------+------------------------------------------------------------------+\n|  ``6``                   |  ``should be equal``  |  ``[1,2]``    |  ``[\"[1\",\"2]\"]``        |  ``key=value,key2=value2``  |  ``{'key': 'value', 'key2': 'value2'}``  |  ``none``                |  ``${none}``      |  ``6``            |  ``ismo``                  |  ``aro``                | ``{'id': '6', 'name': {'first': 'ismo', 'last': 'aro'}}``        |\n+--------------------------+-----------------------+---------------+-------------------------+-----------------------------+------------------------------------------+--------------------------+-------------------+-------------------+----------------------------+-------------------------+------------------------------------------------------------------+\n\n\naccessing test data from robot variables\n----------------------------------------\n\nif neccesary it is possible to access the fetched data tables directly from a robot framework\u00ae variable.\nthis could be helpfull in test setup or in suite setup.\n\nthere are three variables available within the data-driven suite:\n\n@{datadriver_data_list}\n~~~~~~~~~~~~~~~~~~~~~~~\n\na list as suite variable containing a robot dictionary for each test case that is selected for execution.\n\n.. code :: json\n\n    [\n      {\n        \"test_case_name\": \"right user empty pass\",\n        \"arguments\": {\n          \"${username}\": \"demo\",\n          \"${password}\": \"${empty}\"\n        },\n        \"tags\": [\n          \"1\"\n        ],\n        \"documentation\": \"this is a test case documentation of the first one.\"\n      },\n      {\n        \"test_case_name\": \"right user wrong pass\",\n        \"arguments\": {\n          \"${username}\": \"demo\",\n          \"${password}\": \"foobar\"\n        },\n        \"tags\": [\n          \"2\",\n          \"3\",\n          \"foo\"\n        ],\n        \"documentation\": \"this test case has the tags 2,3 and foo\"\n      },\n      {\n        \"test_case_name\": \"login with user '${empty}' and password 'mode'\",\n        \"arguments\": {\n          \"${username}\": \"${empty}\",\n          \"${password}\": \"mode\"\n        },\n        \"tags\": [\n          \"1\",\n          \"2\",\n          \"3\",\n          \"4\"\n        ],\n        \"documentation\": \"this test case has a generated name based on template name.\"\n      },\n      {\n        \"test_case_name\": \"login with user '${empty}' and password '${empty}'\",\n        \"arguments\": {\n          \"${username}\": \"${empty}\",\n          \"${password}\": \"${empty}\"\n        },\n        \"tags\": [\n          \"\"\n        ],\n        \"documentation\": \"\"\n      },\n      {\n        \"test_case_name\": \"login with user '${empty}' and password 'foobar'\",\n        \"arguments\": {\n          \"${username}\": \"${empty}\",\n          \"${password}\": \"foobar\"\n        },\n        \"tags\": [\n          \"\"\n        ],\n        \"documentation\": \"\"\n      },\n      {\n        \"test_case_name\": \"login with user 'foobar' and password 'mode'\",\n        \"arguments\": {\n          \"${username}\": \"foobar\",\n          \"${password}\": \"mode\"\n        },\n        \"tags\": [\n          \"foo\",\n          \"1\"\n        ],\n        \"documentation\": \"\"\n      },\n      {\n        \"test_case_name\": \"login with user 'foobar' and password '${empty}'\",\n        \"arguments\": {\n          \"${username}\": \"foobar\",\n          \"${password}\": \"${empty}\"\n        },\n        \"tags\": [\n          \"foo\"\n        ],\n        \"documentation\": \"\"\n      },\n      {\n        \"test_case_name\": \"login with user 'foobar' and password 'foobar'\",\n        \"arguments\": {\n          \"${username}\": \"foobar\",\n          \"${password}\": \"foobar\"\n        },\n        \"tags\": [\n          \"foo\",\n          \"2\"\n        ],\n        \"documentation\": \"\"\n      }\n    ]\n\nthis can be accessed as usual in robot framework\u00ae.\n\n``${datadriver_data_list}[2][arguments][\\\\${password}]`` would result in ``mode`` .\n\n\n\n&{datadriver_data_dict}\n~~~~~~~~~~~~~~~~~~~~~~~\n\na dictionary as suite variable that contains the same data as the list, with the test names as keys.\n\n.. code :: json\n\n    {\n      \"right user empty pass\": {\n        \"test_case_name\": \"right user empty pass\",\n        \"arguments\": {\n          \"${username}\": \"demo\",\n          \"${password}\": \"${empty}\"\n        },\n        \"tags\": [\n          \"1\"\n        ],\n        \"documentation\": \"this is a test case documentation of the first one.\"\n      },\n      \"right user wrong pass\": {\n        \"test_case_name\": \"right user wrong pass\",\n        \"arguments\": {\n          \"${username}\": \"demo\",\n          \"${password}\": \"foobar\"\n        },\n        \"tags\": [\n          \"2\",\n          \"3\",\n          \"foo\"\n        ],\n        \"documentation\": \"this test case has the tags 2,3 and foo\"\n      },\n      \"login with user '${empty}' and password 'mode'\": {\n        \"test_case_name\": \"login with user '${empty}' and password 'mode'\",\n        \"arguments\": {\n          \"${username}\": \"${empty}\",\n          \"${password}\": \"mode\"\n        },\n        \"tags\": [\n          \"1\",\n          \"2\",\n          \"3\",\n          \"4\"\n        ],\n        \"documentation\": \"this test case has a generated name based on template name.\"\n      },\n      \"login with user '${empty}' and password '${empty}'\": {\n        \"test_case_name\": \"login with user '${empty}' and password '${empty}'\",\n        \"arguments\": {\n          \"${username}\": \"${empty}\",\n          \"${password}\": \"${empty}\"\n        },\n        \"tags\": [\n          \"\"\n        ],\n        \"documentation\": \"\"\n      },\n      \"login with user '${empty}' and password 'foobar'\": {\n        \"test_case_name\": \"login with user '${empty}' and password 'foobar'\",\n        \"arguments\": {\n          \"${username}\": \"${empty}\",\n          \"${password}\": \"foobar\"\n        },\n        \"tags\": [\n          \"\"\n        ],\n        \"documentation\": \"\"\n      },\n      \"login with user 'foobar' and password 'mode'\": {\n        \"test_case_name\": \"login with user 'foobar' and password 'mode'\",\n        \"arguments\": {\n          \"${username}\": \"foobar\",\n          \"${password}\": \"mode\"\n        },\n        \"tags\": [\n          \"foo\",\n          \"1\"\n        ],\n        \"documentation\": \"\"\n      },\n      \"login with user 'foobar' and password '${empty}'\": {\n        \"test_case_name\": \"login with user 'foobar' and password '${empty}'\",\n        \"arguments\": {\n          \"${username}\": \"foobar\",\n          \"${password}\": \"${empty}\"\n        },\n        \"tags\": [\n          \"foo\"\n        ],\n        \"documentation\": \"\"\n      },\n      \"login with user 'foobar' and password 'foobar'\": {\n        \"test_case_name\": \"login with user 'foobar' and password 'foobar'\",\n        \"arguments\": {\n          \"${username}\": \"foobar\",\n          \"${password}\": \"foobar\"\n        },\n        \"tags\": [\n          \"foo\",\n          \"2\"\n        ],\n        \"documentation\": \"\"\n      }\n    }\n\n&{datadriver_test_data}\n~~~~~~~~~~~~~~~~~~~~~~~\n\na dictionary as test variable that contains the test data of the current test case.\nthis dictionary does also contain arguments that are not used in the ``test template`` keyword.\nthis can be used in test setup and within a test case.\n\n.. code :: json\n\n    {\n      \"test_case_name\": \"right user wrong pass\",\n      \"arguments\": {\n        \"${username}\": \"demo\",\n        \"${password}\": \"foobar\"\n      },\n      \"tags\": [\n        \"2\",\n        \"3\",\n        \"foo\"\n      ],\n      \"documentation\": \"this test case has the tags 2,3 and foo\"\n    }\n\n\ndata sources\n------------\n\n\ncsv / tsv (character-separated values)\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nby default datadriver reads csv files. with the `encoding and csv\ndialect <#file-encoding-and-csv-dialect>`__ settings you may configure which\nstructure your data source has.\n\n\nxls / xlsx files\n~~~~~~~~~~~~~~~~\n\nto use excel file types, you have to install datadriver with the extra xls.\n\nif you want to use excel based data sources, you may just set the file\nto the extention or you may point to the correct file. if the extention\nis \".xls\" or \".xlsx\" datadriver will interpret it as excel file.\nyou may select the sheet which will be read by the option ``sheet_name``.\nby default it is set to 0 which will be the first table sheet.\nyou may use sheet index (0 is first sheet) or sheet name(case sensitive).\nxls interpreter will ignore all other options like encoding, delimiters etc.\n\n.. code :: robotframework\n\n    *** settings ***\n    library    datadriver    .xlsx\n\nor:\n\n.. code :: robotframework\n\n    *** settings ***\n    library    datadriver    file=my_data_source.xlsx    sheet_name=2nd sheet\n\n\nms excel and typed cells\n^^^^^^^^^^^^^^^^^^^^^^^^\n\nmicrosoft excel xls or xlsx file have the possibility to type thair data\ncells. numbers are typically of the type float. if these data are not\nexplicitly defined as text in excel, pandas will read it as the type\nthat is has in excel. because we have to work with strings in robot\nframework\u00ae these data are converted to string. this leads to the\nsituation that a european time value like \"04.02.2019\" (4th january\n2019) is handed over to robot framework\u00ae in iso time \"2019-01-04\n00:00:00\". this may cause unwanted behavior. to mitigate this risk you\nshould define excel based files explicitly as text within excel.\n\nalternatively you may deactivate that string conversion.\nto do so, you have to add the option ``preserve_xls_types`` to ``true``.\nin that case, you will get str, float, boolean, int, datetime.time,\ndatetime.datetime and some others.\n\n.. code :: robotframework\n\n    *** settings ***\n    library    datadriver    file=my_data_source.xlsx    preserve_xls_types=true\n\npict (pairwise independent combinatorial testing)\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\npict is able to generate data files based on a model file.\nhttps://github.com/microsoft/pict\n\ndocumentation: https://github.com/microsoft/pict/blob/master/doc/pict.md\n\n\nrequirements of pict\n^^^^^^^^^^^^^^^^^^^^\n\n-  path to pict.exe must be set in the %path% environment variable.\n-  data model file has the file extention \".pict\"\n-  pict model file must be encoded in utf-8\n\n\nhow it works\n^^^^^^^^^^^^\n\nif the file option is set to a file with the extention pict, datadriver\nwill hand over this file to pict.exe and let it automatically generates\na file with the extention \".pictout\". this file will the be used as data\nsource for the test generation. (it is tab seperated and utf-8 encoded)\nexcept the file option all other options of the library will be ignored.\n\n.. code :: robotframework\n\n    *** settings ***\n    library    datadriver    my_model_file.pict\n\nit is possible to give options to pict with the import argument `pict_options=`.\n\n.. code :: robotframework\n\n    *** settings ***\n    library    datadriver    pict_arg.pict    pict_options=/o:3 /r\n\n\nglob file pattern\n~~~~~~~~~~~~~~~~~\n\nthis module implements a reader class that creates a test case for each file or folder that matches the given glob pattern.\n\nwith an optional argument \"arg_name\" you can modify the argument that will be set. see folder example.\n\nexample with json files:\n\n.. code :: robotframework\n\n    *** settings ***\n    library           datadriver    file=${curdir}/datafiles/*_file.json    reader_class=glob_reader\n    library           operatingsystem\n    test template     test all files\n\n\n    *** test cases ***\n    glob_reader_test    wrong_file.nojson\n\n\n    *** keywords ***\n    test all files\n        [arguments]    ${file_name}\n        ${file_content}=    get file    ${file_name}\n        ${content}=    evaluate    json.loads($file_content)[\"test_case\"]\n        should be equal    ${test_name}    ${content}\n\n\nexample with folders:\n\n.. code :: robotframework\n\n    *** settings ***\n    library           datadriver    file=${curdir}/folderstofind/*/    reader_class=glob_reader    arg_name=\\\\${folder_name}\n    library           operatingsystem\n    test template     test all files\n\n\n    *** test cases ***\n    glob_reader_test    wrong_file.nojson\n\n\n    *** keywords ***\n    test all files\n        [arguments]    ${folder_name}\n        ${content}=    get file    ${folder_name}/verify.txt\n        should be equal    ${test_name}    ${content}\n\n\nfile encoding and csv dialect\n-----------------------------\n\nwhile there are various specifications and implementations for the csv format\n(see `rfc 4180 <https://www.rfc-editor.org/rfc/rfc4180.html>`_),\nthere is no formal specification in existence, which allows for a wide variety of interpretations of csv files.\ntherefore it is possible to define your own dialect or use\npredefined. the default is excel-eu which is a semicolon separated\nfile.\nthese settings are changeable as options of the data driver library.\n\n\nfile=\n~~~~~\n\n.. code :: robotframework\n\n    *** settings ***\n    library         datadriver    file=../data/my_data_source.csv\n\n\n-  none(default): data driver will search in the test suites folder if a\n   \\*.csv file with the same name than the test suite \\*.robot file exists\n-  only file extention: if you just set a file extentions like \".xls\" or\n   \".xlsx\" datadriver will search\n-  absolute path: if an absolute path to a file is set, datadriver tries\n   to find and open the given data file.\n-  relative path: if the option does not point to a data file as an\n   absolute path, data driver tries to find a data file relative to the\n   folder where the test suite is located.\n\n\nencoding=\n~~~~~~~~~\n\n``encoding=`` must be set if it shall not be cp1252.\n\n**examples**:\n\n``cp1252, ascii, iso-8859-1, latin-1, utf_8, utf_16, utf_16_be, utf_16_le``\n\n**cp1252** is:\n\n- code page 1252\n- windows-1252\n- windows western european\n\nmost characters are same between iso-8859-1 (latin-1) except for the code points 128-159 (0x80-0x9f).\nthese characters are available in cp1252 which are not present in latin-1.\n\n``\u20ac \u201a \u0192 \u201e \u2026 \u2020 \u2021 \u02c6 \u2030 \u0161 \u2039 \u0153 \u017e \u2018 \u2019 \u201c \u201d \u2022 \u2013 \u2014 \u02dc \u2122 \u0161 \u203a \u0153 \u017e \u00ff``\n\nsee `python standard encoding <https://docs.python.org/3/library/codecs.html#standard-encodings>`_ for more encodings\n\n\ndialect=\n~~~~~~~~\n\nyou may change the csv dialect here.\nthe dialect option can be one of the following:\n- excel-eu\n- excel\n- excel-tab\n- unix\n- userdefined\n\nsupported dialects are:\n\n.. code:: python\n\n    \"excel-eu\"\n        delimiter=';',\n        quotechar='\"',\n        escapechar='\\\\',\n        doublequote=true,\n        skipinitialspace=false,\n        lineterminator=\"\\\\r\\\\n\",\n        quoting=csv.quote_all\n\n    \"excel\"\n        delimiter = ','\n        quotechar = '\"'\n        doublequote = true\n        skipinitialspace = false\n        lineterminator = '\\\\r\\\\n'\n        quoting = quote_minimal\n\n    \"excel-tab\"\n        delimiter = '\\\\t'\n        quotechar = '\"'\n        doublequote = true\n        skipinitialspace = false\n        lineterminator = '\\\\r\\\\n'\n        quoting = quote_minimal\n\n    \"unix\"\n        delimiter = ','\n        quotechar = '\"'\n        doublequote = true\n        skipinitialspace = false\n        lineterminator = '\\\\n'\n        quoting = quote_all\n\n\n\n\nusage in robot framework\u00ae\n\n.. code :: robotframework\n\n    *** settings ***\n    library    datadriver    my_data_file.csv    dialect=excel\n\n\n\n.. code :: robotframework\n\n    *** settings ***\n    library    datadriver    my_data_file.csv    dialect=excel_tab\n\n\n\n.. code :: robotframework\n\n    *** settings ***\n    library    datadriver    my_data_file.csv    dialect=unix_dialect\n\n\n\nexample user defined\n^^^^^^^^^^^^^^^^^^^^\n\nuser may define the format completely free.\nif an option is not set, the default values are used.\nto register a userdefined format user have to set the\noption ``dialect`` to ``userdefined``\n\n\nusage in robot framework\u00ae\n\n.. code :: robotframework\n\n    *** settings ***\n    library    datadriver    my_data_file.csv\n    ...    dialect=userdefined\n    ...    delimiter=.\n    ...    lineterminator=\\\\n\n\n\n\n\ndefaults:\n~~~~~~~~~\n\n.. code:: python\n\n    file=none,\n    encoding='cp1252',\n    dialect='excel-eu',\n    delimiter=';',\n    quotechar='\"',\n    escapechar='\\\\\\\\',\n    doublequote=true,\n    skipinitialspace=false,\n    lineterminator='\\\\r\\\\n',\n    sheet_name=0\n\n\ncustom datareader classes\n-------------------------\n\nit is possible to write your own datareader class as a plugin for datadriver.\ndatareader classes are called from datadriver to return a list of testcasedata.\n\n\nusing custom datareader\n~~~~~~~~~~~~~~~~~~~~~~~\n\ndatareader classes are loaded dynamically into datadriver while runtime.\ndatadriver identifies the datareader to load by the file extantion of the data file or by the option ``reader_class``.\n\n\nselect reader by file extension:\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n.. code :: robotframework\n\n    *** settings ***\n    library    datadriver    file=mydata.csv\n\nthis will load the class ``csv_reader`` from ``csv_reader.py`` from the same folder.\n\n\nselect reader by option:\n^^^^^^^^^^^^^^^^^^^^^^^^\n\n.. code :: robotframework\n\n    *** settings ***\n        library    datadriver   file=mydata.csv    reader_class=generic_csv_reader    dialect=userdefined   delimiter=\\\\t    encoding=utf-8\n\nthis will load the class ``generic_csv_reader`` from ``generic_csv_reader.py`` from same folder.\n\n\ncreate custom reader\n~~~~~~~~~~~~~~~~~~~~\n\nrecommendation:\n\nhave a look to the source code of existing datareader like ``csv_reader.py`` or ``generic_csv_reader.py`` .\n\nto write your own reader, create a class inherited from ``abstractreaderclass``.\n\nyour class will get all available configs from datadriver as an object of ``readerconfig`` on ``__init__``.\n\ndatadriver will call the method ``get_data_from_source``\nthis method should then load your data from your custom source and stores them into list of object of ``testcasedata``.\nthis list of ``testcasedata`` will be returned to datadriver.\n\n``abstractreaderclass`` has also some optional helper methods that may be useful.\n\nyou can either place the custom reader with the others in datadriver folder or anywhere on the disk.\nin the first case or if your custom reader is in python path just use it like the others by name:\n\n.. code :: robotframework\n\n    *** settings ***\n    library          datadriver    reader_class=my_reader\n\nin case it is somewhere on the disk, it is possible to use an absolute or relative path to a custom reader.\nimports of custom readers follow the same rules like importing robot framework\u00ae libraries.\npath can be relative to ${execdir} or to datadriver/__init__.py:\n\n\n.. code :: robotframework\n\n    *** settings ***\n    library          datadriver    reader_class=c:/data/my_reader.py    # set custom reader\n    ...                            file_search_strategy=none            # set datadriver to not check file\n    ...                            min=0                                # kwargs arguments for custom reader\n    ...                            max=62\n\nthis `my_reader.py` should implement a class inherited from abstractreaderclass that is named `my_reader`.\n\n.. code :: python\n\n    from datadriver.abstractreaderclass import abstractreaderclass  # inherit class from abstractreaderclass\n    from datadriver.readerconfig import testcasedata  # return list of testcasedata to datadriver\n\n\n    class my_reader(abstractreaderclass):\n\n        def get_data_from_source(self):  # this method will be called from datadriver to get the testcasedata list.\n            test_data = []\n            for i in range(int(self.kwargs['min']), int(self.kwargs['max'])):  # dummy code to just generate some data\n                args = {'${var_1}': str(i), '${var_2}': str(i)}  # args is a dictionary. variable name is the key, value is value.\n                test_data.append(testcasedata(f'test {i}', args, ['tag']))  # add a testcasedata object to the list of tests.\n            return test_data  # return the list of testcasedata to datadriver\n\n\nsee other readers as example.\n\n\nselection of test cases to execute\n----------------------------------\n\nbecause test cases that are created by datadriver after parsing while execution,\nit is not possible to use some robot framework\u00ae methods to select test cases.\n\n\nexamples for options that have to be used differently:\n\n+-------------------+-----------------------------------------------------------------------+\n| robot option      | description                                                           |\n+===================+=======================================================================+\n| ``--test``        | selects the test cases by name.                                       |\n+-------------------+-----------------------------------------------------------------------+\n| ``--task``        | alias for --test that can be used when executing tasks.               |\n+-------------------+-----------------------------------------------------------------------+\n| ``--rerunfailed`` | selects failed tests from an earlier output file to be re-executed.   |\n+-------------------+-----------------------------------------------------------------------+\n| ``--include``     | selects the test cases by tag.                                        |\n+-------------------+-----------------------------------------------------------------------+\n| ``--exclude``     | selects the test cases by tag.                                        |\n+-------------------+-----------------------------------------------------------------------+\n\n\nselection of test cases by name\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n\nselect a single test case:\n^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nto execute just a single test case by its exact name it is possible to execute the test suite\nand set the global variable ${dynamictest} with the name of the test case to execute as value.\npattern must be ``suitename.testcasename``.\n\nexample:\n\n.. code ::\n\n    robot --variable \"dynamictest:my suite name.test case to be executed\" my_suite_name.robot\n\npabot uses this feature to execute a single test case when using ``--testlevelsplit``\n\n\nselect a list of test cases:\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nit is possible to set a list of test case names by using the variable ${dynamictests} (plural).\nthis variable must be a string and the list of names must be pipe-seperated (``|``).\n\nexample:\n\n.. code::\n\n    robot --variable dynamictests:firstsuitename.testcase1|firstsuitename.testcase3|anothersuitename.othertestcase foldername\n\nit is also possible to set the variable @{dynamictests} as a list variable from i.e. python code.\n\n\nre-run failed test cases:\n~~~~~~~~~~~~~~~~~~~~~~~~~\n\nbecause it is not possible to use the command line argument ``--rerunfailed`` from robot directly,\ndatadriver brings a pre-run-modifier that handles this issue.\n\nnormally reexecution of failed testcases has three steps.\n\n- original execution\n- re-execution the failed ones based on original execution output\n- merging original execution output with re-execution output\n\nthe datadriver.rerunfailed pre-run-modifier removes all passed test cases based on a former output.xml.\n\nexample:\n\n.. code ::\n\n    robot --output original.xml tests                                                    # first execute all tests\n    robot --prerunmodifier datadriver.rerunfailed:original.xml --output rerun.xml tests  # then re-execute failing\n    rebot --merge original.xml rerun.xml                                                 # finally merge results\n\n\nbe aware, that in this case it is not allowed to use \"``:``\" as character in the original output file path.\nif you want to set a full path on windows like ``e:\\\\myrobottest\\\\output.xml`` you have to use \"``;``\"\nas argument seperator.\n\nexample:\n\n.. code ::\n\n    robot --prerunmodifier datadriver.rerunfailed;e:\\\\myrobottest\\\\output.xml --output e:\\\\myrobottest\\\\rerun.xml tests\n\n\n\nfiltering with tags.\n~~~~~~~~~~~~~~~~~~~~\n\nnew in ``0.3.1``\n\nit is possible to use tags to filter the data source.\nto use this, tags must be assigned to the test cases in data source.\n\n\nrobot framework\u00ae command line arguments\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nto filter the source, the normal command line arguments of robot framework\u00ae can be used.\nsee robot framework\u00ae userguide_ for more information\nbe aware that the filtering of robot framework\u00ae itself is done before datadriver is called.\nthis means if the template test is already filtered out by robot framework\u00ae, datadriver can never be called.\nif you want to use ``--include`` the datadriver testsuite should have a ``defaulttag`` or ``forcetag`` that\nfulfills these requirements.\n\n.. _userguide: https://robotframework.org/robotframework/latest/robotframeworkuserguide.html#tag-patterns\n\nexample: ``robot --include 1or2 --exclude foo datadriven.robot``\n\n\nfilter based on library options\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nit is also possible to filter the data source by an init option of datadriver.\nif these options are set, robot framework\u00ae filtering will be ignored.\n\nexample:\n\n.. code :: robotframework\n\n    *** settings ***\n    library    datadriver    include=1or2    exclude=foo\n\n\n\n\nconfigure datadriver by pre-run keyword\n---------------------------------------\n\nwith ``config_keyword=`` it's possible to name a keyword that will be called from data driver before it starts the actual processing of the ``data file``.\none possible usage is if the ``data file`` itself shall be created by another keyword dynamically during the execution of the data driver test suite.\nthe ``config_keyword=`` can be used to call that keyword and return the updated arguments (e.g. ``file``) back to the data driver library.\n\nthe ``config keyword``\n\n- may be defined globally or inside each testsuite individually\n- gets all the arguments, that data driver gets from library import, as a robot dictionary\n- shall return the (updated) data driver arguments as a robot dictionary\n\nusage in robot framework\u00ae\n\n.. code :: robotframework\n\n    *** settings ***\n    library           operatingsystem\n    library           datadriver    dialect=excel    encoding=utf_8   config_keyword=config\n    test template     the keyword\n\n    *** test cases ***\n    test    aaa\n\n    *** keywords ***\n    the keyword\n        [arguments]    ${var}\n        log to console    ${var}\n\n    config\n        [arguments]    ${original_config}\n        log to console    ${original_config.dialect}                # just a log of the original\n        create file    ${curdir}/test321.csv\n        ...    *** test cases ***,\\\\${var},\\\\n123,111,\\\\n321,222,      # generating file\n        ${new_config}=    create dictionary    file=test321.csv     # set file attribute in a dictionary\n        [return]    ${new_config}                                   # returns {'file': 'test321.csv'}\n\n\n\npabot and datadriver\n--------------------\n\nyou should use pabot version 1.10.0 or newer.\n\ndatadriver supports ``--testlevelsplit`` from pabot only if the pabotlib is in use.\nuse ``--pabotlib`` to enable that.\n\nwhen using pabot like this, datadriver automatically splits the amount of test cases into nearly same sized groups.\nis uses the processes count from pabot to calculate the groups.\nwhen using 8 processes with 100 test cases you will get 8 groups of tests with the size of 12 to 13 tests.\nthese 8 groups are then executed as one block with 8 processes.\nthis reduces a lot of overhead with suite setup and teardown.\n\nyou can switch between three modes:\n\n- ``equal``: means it creates equal sizes groups\n- ``binary``: is more complex. it created a decreasing size of containers to support better balancing.\n- ``atomic``: it does not group tests at all and runs really each test case in a separate thread.\n\nthis can be set by ``optimize_pabot`` in library import.\n\n\n**example**:\n\n.. code :: robotframework\n\n    *** settings ***\n    library          datadriver    optimize_pabot=binary\n\nbinary creates with 40 test cases and 8 threads something like that:\n\n.. code ::\n\n    p01: 01,02,03,04,05\n    p02: 06,07,08,09,10\n    p03: 11,12,13,14,15\n    p04: 16,17,18,19,20\n    p05: 21,22,23\n    p06: 24,25,26\n    p07: 27,28,29\n    p08: 30,31,32\n    p09: 33\n    p10: 34\n    p11: 35\n    p12: 36\n    p13: 37\n    p14: 38\n    p15: 39\n    p16: 40\n",
  "docs_url": null,
  "keywords": "",
  "license": "",
  "name": "robotframework-datadriver",
  "package_url": "https://pypi.org/project/robotframework-datadriver/",
  "project_url": "https://pypi.org/project/robotframework-datadriver/",
  "project_urls": {
    "Homepage": "https://github.com/Snooz82/robotframework-datadriver"
  },
  "release_url": "https://pypi.org/project/robotframework-datadriver/1.10.0/",
  "requires_dist": [
    "robotframework (<8.0,>=4.0.2)",
    "docutils",
    "Pygments",
    "pandas ; extra == 'xls'",
    "xlrd (>=1.2.0) ; extra == 'xls'",
    "openpyxl ; extra == 'xls'"
  ],
  "requires_python": ">=3.8.0",
  "summary": "a library for data-driven testing.",
  "version": "1.10.0",
  "releases": [],
  "developers": [
    "snooz@posteo.de"
  ],
  "kwds": "datadriver_test_data datadriver datadriver_data_dict datadriver_data_list datadriven",
  "license_kwds": "",
  "libtype": "pypi",
  "id": "pypi_robotframework_datadriver",
  "homepage": "https://github.com/snooz82/robotframework-datadriver",
  "release_count": 44,
  "dependency_ids": [
    "pypi_docutils",
    "pypi_openpyxl",
    "pypi_pandas",
    "pypi_pygments",
    "pypi_robotframework",
    "pypi_xlrd"
  ],
  "documentation_summary": "The HTML text provides detailed information about the `robotframework-datadriver` package available on PyPI, which is a library for Data-Driven Testing with Robot Framework. The latest version, 1.11.0, was released on February 13, 2024. It requires Python version 3.8.0 or higher and is licensed under the Apache Software License. The package is maintained by Ren\u00e9 Rohner (Snooz82) and Mikko Korpela. DataDriver enables the creation of multiple test cases based on a test template and data from CSV or Excel files. It supports various data types and allows for custom DataReader classes. Installation instructions, usage examples, and information on configuring DataDriver, including with Pabot for parallel execution, are provided.",
  "embedding": [
    -0.020088719204068184,
    0.010709736496210098,
    -0.010575246065855026,
    -0.021065549924969673,
    -0.0016687511233612895,
    0.02902175858616829,
    -0.002742910059168935,
    -0.009704592637717724,
    -0.029474781826138496,
    -0.014100328087806702,
    -0.0025040116161108017,
    0.016351284459233284,
    -0.03369355574250221,
    0.014978058636188507,
    0.009768299758434296,
    -0.004979709163308144,
    0.02065499871969223,
    -0.024349963292479515,
    0.012840358540415764,
    0.008352603763341904,
    0.03292907774448395,
    -0.0030313581228256226,
    -0.018687181174755096,
    -0.0027039784472435713,
    -0.0019023409113287926,
    0.0033038794063031673,
    -0.001662557478994131,
    -0.04176301881670952,
    0.007418244611471891,
    -0.006016706116497517,
    0.03743099048733711,
    -0.028030771762132645,
    -0.014227740466594696,
    -0.03292907774448395,
    -0.005514134187251329,
    -0.016903404146432877,
    -0.0018651789287105203,
    0.01800764724612236,
    0.03072059340775013,
    0.015799162909388542,
    0.006781181786209345,
    -0.0009263957617804408,
    0.004332028329372406,
    -0.010837149806320667,
    -0.04088528826832771,
    0.006175972055643797,
    0.014128641225397587,
    -0.031796522438526154,
    -0.008402152918279171,
    0.006175972055643797,
    0.013498657383024693,
    0.020187819376587868,
    -0.009725828655064106,
    -0.04275400564074516,
    0.031598325818777084,
    0.0030614417046308517,
    0.002555330516770482,
    0.022141478955745697,
    -0.013866737484931946,
    -0.01653532311320305,
    0.012564297765493393,
    0.018885377794504166,
    -0.017823606729507446,
    -0.004289557691663504,
    -0.010051438584923744,
    0.003153461730107665,
    -0.0009555944707244635,
    0.035477329045534134,
    0.0023518241941928864,
    0.003953329753130674,
    0.02321740612387657,
    0.01633712649345398,
    0.017823606729507446,
    -0.008097779005765915,
    0.03901657089591026,
    -0.02355717308819294,
    -0.029163328930735588,
    0.022028222680091858,
    0.009817848913371563,
    -0.012422728352248669,
    0.0054999771527945995,
    0.013272145763039589,
    -0.008720684796571732,
    0.027917515486478806,
    0.009230335243046284,
    0.03612855076789856,
    -0.016691051423549652,
    0.02614789642393589,
    0.004916002973914146,
    -0.029616350308060646,
    -0.0008303939248435199,
    -0.011148602701723576,
    -0.006632533855736256,
    0.024958712980151176,
    0.0104973828420043,
    0.03369355574250221,
    0.014878960326313972,
    0.03038082644343376,
    -0.00986739806830883,
    -0.03392006456851959,
    0.0026986696757376194,
    0.011240622960031033,
    -0.03459959849715233,
    -0.011651174165308475,
    -0.031456753611564636,
    -0.0042116944678127766,
    0.008175642229616642,
    0.007446558680385351,
    0.010525695979595184,
    0.01717238686978817,
    -0.009407296776771545,
    0.04714266210794449,
    0.006784720811992884,
    -0.031032046303153038,
    -0.0005180560983717442,
    0.0010635412763804197,
    0.012245766818523407,
    -0.02068331278860569,
    -0.03256099671125412,
    -0.0077650900930166245,
    0.007333302870392799,
    0.01817753165960312,
    0.013767639175057411,
    -0.022679442539811134,
    -0.0032791048288345337,
    0.005524751730263233,
    0.0031570009887218475,
    -0.01742721162736416,
    0.015615122392773628,
    0.004349724389612675,
    0.009202021174132824,
    -0.006076873280107975,
    0.02177339792251587,
    0.0010334576945751905,
    -0.03074890747666359,
    0.007283753715455532,
    -0.04640650004148483,
    -0.001608584076166153,
    -0.019196832552552223,
    -0.026827430352568626,
    0.006430796813219786,
    0.00038489222060889006,
    -0.016577795147895813,
    -0.02146194502711296,
    -0.011481290683150291,
    0.027506964281201363,
    0.00933651253581047,
    -0.020301073789596558,
    0.02062668465077877,
    -0.016620265319943428,
    0.0048098256811499596,
    0.00453022588044405,
    -0.007680148351937532,
    0.005698174703866243,
    -0.002270421711727977,
    -0.004275400657206774,
    -0.005726488307118416,
    -0.018828751519322395,
    -0.018078431487083435,
    -0.004353263881057501,
    -0.00903213769197464,
    0.047907136380672455,
    -0.016351284459233284,
    -0.015091314911842346,
    0.0055990759283304214,
    0.04360342398285866,
    0.017568781971931458,
    -0.012026333250105381,
    -0.006108726374804974,
    0.004332028329372406,
    -0.00026831854484044015,
    0.02905007265508175,
    -0.027563592419028282,
    -0.002295196522027254,
    0.015742534771561623,
    0.008593272417783737,
    0.006809495389461517,
    0.000209036297746934,
    -0.010638952255249023,
    0.02807324193418026,
    0.015586808323860168,
    -0.0064520323649048805,
    0.013682697899639606,
    0.00033622770570218563,
    -0.004859374836087227,
    -0.011743194423615932,
    -0.006023784633725882,
    -0.00047823964268900454,
    0.006675004493445158,
    0.0077580115757882595,
    0.03264594078063965,
    0.022962581366300583,
    -0.005822048056870699,
    -0.02149025909602642,
    -0.5975368022918701,
    -0.024519847705960274,
    -0.029814548790454865,
    -0.029984431341290474,
    -0.0032720263116061687,
    0.024576473981142044,
    0.010263793170452118,
    0.01622387021780014,
    0.0011299019679427147,
    0.0253126360476017,
    -0.013569441623985767,
    0.020527586340904236,
    0.006317541468888521,
    -0.012904064729809761,
    -0.02007456310093403,
    -0.003606484504416585,
    0.027492808178067207,
    -0.009485160000622272,
    0.00010612186451908201,
    0.047680627554655075,
    -0.028809404000639915,
    0.033495355397462845,
    -0.025581618770956993,
    0.0039568692445755005,
    0.0007520882645621896,
    0.008508330211043358,
    -0.005386721342802048,
    0.014595821499824524,
    0.022084850817918777,
    -0.008522487245500088,
    -0.01996130682528019,
    0.012387336231768131,
    0.027860889211297035,
    -0.022976739332079887,
    0.03632674738764763,
    -0.02180171199142933,
    -0.01705913059413433,
    0.035194192081689835,
    0.0008259698515757918,
    0.035080935806035995,
    -0.01834741421043873,
    -0.009138314984738827,
    -0.010242557153105736,
    0.02154688537120819,
    0.01206880435347557,
    -0.003889623563736677,
    -0.010653109289705753,
    0.008862254209816456,
    -0.021787554025650024,
    0.01382426731288433,
    0.005832665599882603,
    -0.011353878304362297,
    -0.00281546451151371,
    -0.014086171053349972,
    0.02324572019279003,
    0.006738710682839155,
    0.019055262207984924,
    -0.014220661483705044,
    0.007089095655828714,
    -0.01636544056236744,
    -0.003011892316862941,
    0.0034489883109927177,
    0.021872496232390404,
    -0.011983863078057766,
    0.003252560505643487,
    0.004169223364442587,
    0.010837149806320667,
    -0.0036595729179680347,
    -0.005875136703252792,
    -0.03816715255379677,
    0.02444906160235405,
    -0.009761220775544643,
    0.03907319903373718,
    -0.0036560336593538523,
    0.044424526393413544,
    0.02851210907101631,
    0.05246567726135254,
    0.03290076553821564,
    -0.016549481078982353,
    0.023019209504127502,
    0.014850646257400513,
    -0.0017616561381146312,
    -0.003854231210425496,
    -0.02698315680027008,
    0.05761880800127983,
    -0.006204285658895969,
    -0.010193007998168468,
    -0.011686567217111588,
    0.002794229192659259,
    0.004055967554450035,
    0.0173988975584507,
    0.036836396902799606,
    0.014949744567275047,
    -0.014822332188487053,
    0.0052557699382305145,
    0.009747063741087914,
    -0.012521827593445778,
    0.010596481151878834,
    -0.02631778083741665,
    -0.00979661289602518,
    -0.0241659227758646,
    -0.018998634070158005,
    0.011495447717607021,
    0.0019802041351795197,
    0.013994150795042515,
    0.0015900030266493559,
    0.011842293664813042,
    0.010016046464443207,
    0.010525695979595184,
    -0.018418198451399803,
    0.001308633596636355,
    -0.007131566293537617,
    -0.02062668465077877,
    0.007545657455921173,
    0.006568827200680971,
    -0.028582893311977386,
    -0.002905715024098754,
    -0.009874476119875908,
    0.002295196522027254,
    -0.020329387858510017,
    -0.0007450098055414855,
    -0.01867302507162094,
    0.010320420376956463,
    0.0034666843712329865,
    0.027393708005547523,
    -0.009676279500126839,
    0.023089993745088577,
    -0.010341656394302845,
    -0.036893025040626526,
    -0.020414330065250397,
    0.02007456310093403,
    0.0037091223057359457,
    -0.0002082620922010392,
    -0.009739985689520836,
    0.027195511385798454,
    0.01875796541571617,
    0.01705913059413433,
    -0.005549526773393154,
    -0.0021748621948063374,
    -0.012288236990571022,
    -0.015827476978302002,
    0.009202021174132824,
    0.018913691863417625,
    -0.010072673670947552,
    -0.005588458385318518,
    -0.004498372785747051,
    -0.00774385454133153,
    0.005181445740163326,
    0.008883489295840263,
    -0.00031941631459631026,
    -0.007517343387007713,
    0.0050611114129424095,
    -0.006490963976830244,
    0.023005053400993347,
    -0.004204615950584412,
    -0.019423343241214752,
    -0.010787599720060825,
    -0.006997075397521257,
    0.0028968669939786196,
    -0.005092964973300695,
    -0.0033693553414195776,
    0.0027145962230861187,
    0.0007830566028133035,
    -0.007531500421464443,
    -0.01987636461853981,
    -0.007202351000159979,
    -0.017016660422086716,
    0.04012081027030945,
    -0.027422022074460983,
    -0.048020392656326294,
    0.006756407208740711,
    -0.0093506695702672,
    -0.008409231901168823,
    0.01820584386587143,
    -0.0011422893730923533,
    0.01048322580754757,
    -0.01976311020553112,
    0.016492852941155434,
    0.005149592645466328,
    -0.02079656720161438,
    -0.01159454695880413,
    0.0029676517006009817,
    -0.010200086049735546,
    -0.0013068639673292637,
    0.06421595066785812,
    0.04272569343447685,
    0.01357652060687542,
    0.0076659913174808025,
    -0.021192962303757668,
    0.0010396514553576708,
    -0.040375638753175735,
    0.008848097175359726,
    -0.01298900693655014,
    0.013378323055803776,
    -0.008656978607177734,
    0.013081027194857597,
    -0.002583644352853298,
    0.012691711075603962,
    -0.011608703061938286,
    0.02681327424943447,
    0.024689730256795883,
    0.03955453261733055,
    -0.008954274468123913,
    -0.02425086498260498,
    0.0058963717892766,
    -0.0162521842867136,
    0.016153085976839066,
    -0.030012745410203934,
    0.028299754485487938,
    -0.0060131666250526905,
    0.046208303421735764,
    -0.006639611907303333,
    -0.04685952141880989,
    -0.024080980569124222,
    0.015176256187260151,
    0.014765704981982708,
    0.0029304898343980312,
    0.01608230173587799,
    -0.013994150795042515,
    0.009456845931708813,
    0.01964985392987728,
    0.017243171110749245,
    0.018942005932331085,
    -0.01347742136567831,
    -0.007460715714842081,
    -0.014178191311657429,
    0.023811999708414078,
    0.04074371978640556,
    0.04136662557721138,
    -0.033183902502059937,
    -0.005708792246878147,
    0.03275919333100319,
    0.017328113317489624,
    -0.02088150940835476,
    0.022141478955745697,
    -0.00523453438654542,
    0.012776652351021767,
    -0.03389175236225128,
    0.04340522736310959,
    -0.020201975479722023,
    0.01742721162736416,
    -0.002702208934351802,
    0.051333121955394745,
    -0.015813319012522697,
    0.0014404702233150601,
    -0.01964985392987728,
    0.008246426470577717,
    0.008600350469350815,
    -0.00819687731564045,
    -0.007885424420237541,
    -0.002081072423607111,
    0.015756690874695778,
    -0.014185269363224506,
    -0.0035710919182747602,
    0.011552075855433941,
    0.0025040116161108017,
    -0.008841019123792648,
    0.010292106308043003,
    0.03292907774448395,
    -0.006158275529742241,
    0.021391158923506737,
    0.027138883247971535,
    0.010037281550467014,
    0.01881459355354309,
    0.025793973356485367,
    -0.024944555014371872,
    0.013024399057030678,
    -0.006246756762266159,
    -0.008161485195159912,
    -0.02344391867518425,
    0.010794678702950478,
    -0.014192348346114159,
    -0.006501581985503435,
    -0.014333917759358883,
    0.028950974345207214,
    -0.013958757743239403,
    -0.013031477108597755,
    0.030324198305606842,
    0.018050117418169975,
    -0.010554010048508644,
    -0.01725732907652855,
    -0.03403332084417343,
    0.026048798114061356,
    0.01622387021780014,
    -0.007772168610244989,
    -0.03411826118826866,
    -0.017597096040844917,
    0.02425086498260498,
    -0.012075883336365223,
    0.002236798871308565,
    0.021178806200623512,
    0.010681423358619213,
    -0.0023889862932264805,
    0.008741919882595539,
    -0.0036595729179680347,
    0.000729968014638871,
    0.025468362495303154,
    0.006034402176737785,
    -0.0019288852345198393,
    -0.01722901500761509,
    0.03471285477280617,
    -0.0020085179712623358,
    -0.00045744661474600434,
    -0.0049832481890916824,
    0.05410788580775261,
    -0.008097779005765915,
    -0.002787150675430894,
    -0.018050117418169975,
    0.007701383903622627,
    -0.031032046303153038,
    0.007680148351937532,
    0.005046954844146967,
    -0.024548161774873734,
    -0.03258931264281273,
    -0.006023784633725882,
    -0.006866123527288437,
    0.01979142427444458,
    -0.0007516458281315863,
    0.023344820365309715,
    0.018078431487083435,
    -0.018658867105841637,
    -0.023075837641954422,
    0.010030202567577362,
    0.01010806579142809,
    0.03932802379131317,
    0.031088674440979958,
    0.006218442693352699,
    0.011934313923120499,
    -0.031060360372066498,
    -0.007269596680998802,
    -0.02824312634766102,
    -0.020187819376587868,
    0.001464360044337809,
    0.0011944931466132402,
    0.004590393044054508,
    0.01775282248854637,
    0.0031003733165562153,
    -0.002519938163459301,
    -0.0011794513557106256,
    0.006179511081427336,
    -0.01442593801766634,
    -0.005202681291848421,
    -0.004799208138138056,
    -0.008274740539491177,
    -0.0026296544820070267,
    -0.010851306840777397,
    0.013073948211967945,
    -0.0008706527878530324,
    0.0431503988802433,
    -0.022198107093572617,
    0.023047523573040962,
    0.035109248012304306,
    0.0003952887491323054,
    -0.01725732907652855,
    -0.016775991767644882,
    0.017186544835567474,
    0.007842953316867352,
    0.02888019010424614,
    -0.04082866013050079,
    0.030324198305606842,
    0.021178806200623512,
    0.016322970390319824,
    -0.0027977682184427977,
    0.025581618770956993,
    -0.005524751730263233,
    -0.009421453811228275,
    -0.003410056699067354,
    -0.007085556164383888,
    0.005889293272048235,
    -0.016719363629817963,
    0.01073097251355648,
    0.0074961078353226185,
    -0.020201975479722023,
    -0.009690435603260994,
    0.001478517078794539,
    0.023316506296396255,
    -0.0025447127409279346,
    0.0033605073112994432,
    0.006338777020573616,
    0.00567340012639761,
    0.015162099152803421,
    -0.02068331278860569,
    -0.015770848840475082,
    -0.03593035414814949,
    -0.015048843808472157,
    -0.005960078444331884,
    0.007984522730112076,
    -0.029418153688311577,
    -0.027252139523625374,
    0.012075883336365223,
    -0.0038329956587404013,
    -0.0012758956290781498,
    -0.028469637036323547,
    -0.0115803899243474,
    -0.004321410786360502,
    -0.0339483805000782,
    -0.01036996953189373,
    0.020315231755375862,
    0.018687181174755096,
    -0.012479356490075588,
    0.0018386346055194736,
    -0.004526686388999224,
    -0.02882356196641922,
    -0.008175642229616642,
    -0.019805580377578735,
    -0.04646312817931175,
    -0.018743809312582016,
    -0.028724463656544685,
    0.016577795147895813,
    -0.001976664876565337,
    -0.0031729277689009905,
    0.00013349566143006086,
    0.04193290323019028,
    0.04159313440322876,
    -0.008720684796571732,
    0.004215233493596315,
    0.0162521842867136,
    -0.028313910588622093,
    0.010100987739861012,
    0.0010918552288785577,
    -0.002912793541327119,
    -0.0090604517608881,
    0.004887688905000687,
    -0.008317211642861366,
    0.01095748320221901,
    -0.021589357405900955,
    4.620365871232934e-05,
    -0.017582938075065613,
    0.027691004797816277,
    0.008925960399210453,
    -0.007934973575174809,
    0.008777312003076077,
    -0.012252844870090485,
    0.016591951251029968,
    0.029559724032878876,
    -0.011283093132078648,
    -0.011714880354702473,
    -0.014779862016439438,
    0.01878627948462963,
    -0.0030667504761368036,
    -0.015657592564821243,
    0.019777266308665276,
    -0.0013033247087150812,
    -0.01630881242454052,
    -0.005906989797949791,
    -0.04360342398285866,
    0.01717238686978817,
    0.044339586049318314,
    0.026600919663906097,
    0.018828751519322395,
    -0.015360296703875065,
    -0.02784673124551773,
    -0.025709031149744987,
    -0.009711671620607376,
    0.0615544430911541,
    0.006625455338507891,
    -0.009244492277503014,
    -0.010313342325389385,
    0.007920816540718079,
    -0.02157519944012165,
    -0.01901279203593731,
    0.0035728616639971733,
    -0.007793404161930084,
    0.0023589027114212513,
    0.004622246138751507,
    0.0030791377648711205,
    0.014539193361997604,
    0.0026792038697749376,
    0.0034242135006934404,
    -0.02090982347726822,
    -0.01976311020553112,
    0.01133264321833849,
    0.01686093397438526,
    0.01728564314544201,
    0.003410056699067354,
    0.009272805415093899,
    -0.01780945062637329,
    -0.014907274395227432,
    -0.006643151398748159,
    -0.0022845787461847067,
    0.013583598658442497,
    0.00028955398011021316,
    0.008918882347643375,
    0.02021613158285618,
    0.0448775477707386,
    0.0002499587426427752,
    0.006862584035843611,
    -0.006830730941146612,
    0.0008511869236826897,
    -0.003684347728267312,
    -0.030182629823684692,
    0.006505121011286974,
    0.01300316397100687,
    -0.025878915563225746,
    -0.007467794232070446,
    0.00434264587238431,
    0.024944555014371872,
    0.0017209548968821764,
    0.019324244931340218,
    -0.00903213769197464,
    0.00717049790546298,
    0.005613232962787151,
    -0.02367042936384678,
    -0.02057005651295185,
    -0.011877685785293579,
    0.01806427538394928,
    -0.003618871793150902,
    0.03845028951764107,
    -0.03901657089591026,
    -0.005436270963400602,
    0.03649663180112839,
    -0.017186544835567474,
    -0.002442074939608574,
    0.01046906877309084,
    0.003762210952118039,
    -0.007106791716068983,
    -0.01834741421043873,
    0.027634376659989357,
    0.036893025040626526,
    -0.0029729607049375772,
    0.02093813754618168,
    -0.02902175858616829,
    -0.017766978591680527,
    0.007290832232683897,
    0.0309187900274992,
    0.02459063194692135,
    0.03066396526992321,
    0.019748952239751816,
    0.01095748320221901,
    0.010766364634037018,
    0.035194192081689835,
    -0.022976739332079887,
    0.02810155600309372,
    -0.014794018119573593,
    -0.022056536749005318,
    -0.024123452603816986,
    -0.022962581366300583,
    0.00039506753091700375,
    -0.027889203280210495,
    -0.008133171126246452,
    0.005376103799790144,
    0.027138883247971535,
    -0.026416879147291183,
    9.815857629291713e-05,
    0.023797841742634773,
    -0.025241851806640625,
    0.028115713968873024,
    0.024887926876544952,
    0.045896850526332855,
    0.04668964073061943,
    -4.891338903689757e-05,
    0.012819123454391956,
    -0.027577748522162437,
    -0.017271485179662704,
    -0.023005053400993347,
    0.023571331053972244,
    0.024038510397076607,
    -0.01262800395488739,
    -0.03428814560174942,
    -0.006211364176124334,
    -0.007220047526061535,
    -0.003942712210118771,
    -0.0138101102784276,
    0.027308767661452293,
    0.031881462782621384,
    0.004484215751290321,
    -0.03202303498983383,
    -0.0009051603265106678,
    -0.03816715255379677,
    0.02556746080517769,
    0.000816236948594451,
    -0.010822992771863937,
    0.030239256098866463,
    0.0028313910588622093,
    0.001820938428863883,
    0.010617716237902641,
    -0.005832665599882603,
    -0.007892502471804619,
    -0.0021341610699892044,
    -0.0074111660942435265,
    -0.0130173210054636,
    -0.01211127545684576,
    -0.006975839845836163,
    -0.011608703061938286,
    -0.009725828655064106,
    0.015501866117119789,
    0.019564911723136902,
    -0.015105471946299076,
    0.03799726814031601,
    -0.0029021757654845715,
    -0.01636544056236744,
    -0.021023079752922058,
    -0.003995800856500864,
    0.04377330467104912,
    -0.01775282248854637,
    0.003470223629847169,
    0.009980653412640095,
    -0.009010902605950832,
    -0.012005098164081573,
    0.004349724389612675,
    -0.02715304121375084,
    -0.010299185290932655,
    -0.020527586340904236,
    -0.01596904546022415,
    -0.006161815021187067,
    -0.01630881242454052,
    -0.01809258945286274,
    0.007216508034616709,
    0.004714266397058964,
    -0.007354538422077894,
    -0.0008941002306528389,
    -0.018418198451399803,
    0.001431622076779604,
    -0.028696149587631226,
    -0.01354820653796196,
    0.004654099233448505,
    -0.00453022588044405,
    0.004406352527439594,
    0.006278609856963158,
    0.016521167010068893,
    -0.0050858864560723305,
    0.030239256098866463,
    -0.03287244960665703,
    0.004618706647306681,
    -0.009959418326616287,
    0.004186919424682856,
    -0.028441322967410088,
    0.002385447034612298,
    -0.021759239956736565,
    -0.011254779994487762,
    0.020003778859972954,
    -0.026671703904867172,
    -0.029446467757225037,
    -0.03612855076789856,
    -0.0030490541830658913,
    0.023089993745088577,
    0.010518617928028107,
    -0.02174508385360241,
    -0.002640272257849574,
    -0.0038506919518113136,
    0.009874476119875908,
    0.010532774962484837,
    -0.025609932839870453,
    0.02054174244403839,
    -0.0154593950137496,
    0.007644755765795708,
    0.0009122388437390327,
    -0.01611061580479145,
    0.0024084520991891623,
    -0.010596481151878834,
    -0.002378368517383933,
    0.003569322405382991,
    -0.040800344198942184,
    -0.011990941129624844,
    -0.0014192347880452871,
    0.012847437523305416,
    -0.003871927270665765,
    0.017540467903017998,
    -0.01734227128326893,
    -0.011537918820977211,
    -0.01772450841963291,
    0.038874998688697815,
    0.009987732395529747,
    -0.024576473981142044,
    0.0006410446367226541,
    0.008826862089335918,
    0.025270165875554085,
    -0.005142514128237963,
    -0.018658867105841637,
    0.016818463802337646,
    -0.036893025040626526,
    -0.009378982707858086,
    -0.02868199162185192,
    -0.00632108049467206,
    -0.014794018119573593,
    0.025156909599900246,
    0.003871927270665765,
    -0.01921098865568638,
    -0.023005053400993347,
    -0.03544901683926582,
    -0.019239302724599838,
    0.0007233319338411093,
    -0.001280319644138217,
    0.025793973356485367,
    -0.0006445838953368366,
    -0.01297484990209341,
    0.00930819846689701,
    -0.0061830501072108746,
    0.003011892316862941,
    0.044367898255586624,
    -0.019720638170838356,
    0.009669200517237186,
    0.019310086965560913,
    0.011530839838087559,
    0.006324619986116886,
    -0.013434951193630695,
    -0.03089047782123089,
    -0.018573924899101257,
    0.0026225759647786617,
    -0.001537799253128469,
    0.009194942191243172,
    0.02459063194692135,
    -0.004632863681763411,
    -0.0075739710591733456,
    -0.016436224803328514,
    0.010561089031398296,
    -0.0018616396700963378,
    -0.0016669814940541983,
    0.013378323055803776,
    -0.0019731256179511547,
    -0.033297158777713776,
    -0.0120829613879323,
    0.0030791377648711205,
    0.0016147777205333114,
    -0.03083384968340397,
    0.0037515931762754917,
    -0.013095184229314327,
    -0.00930819846689701,
    -0.02522769384086132,
    0.005691096186637878,
    -0.0071492623537778854,
    -0.004838139750063419,
    -0.009994810447096825,
    -0.014227740466594696,
    0.04003586992621422,
    0.0059529999271035194,
    -0.0006609528791159391,
    0.0019412725232541561,
    -0.031824834644794464,
    0.006540513597428799,
    -0.009506396017968655,
    -0.005574301350861788,
    -0.005744184833019972,
    -0.01889953576028347,
    0.0013634917559102178,
    -0.020400172099471092,
    0.034939367324113846,
    0.004448823165148497,
    0.013753482140600681,
    -0.010837149806320667,
    -0.02076825313270092,
    -0.029757920652627945,
    0.00983908399939537,
    -0.01864471100270748,
    -0.012217452749609947,
    -0.03372186794877052,
    0.0026084191631525755,
    0.009081686846911907,
    -0.023047523573040962,
    -0.006487424951046705,
    0.023019209504127502,
    -0.023712901398539543,
    -0.005393799860030413,
    0.003641876857727766,
    -0.010752207599580288,
    -0.023344820365309715,
    0.013038556091487408,
    0.01829078607261181,
    -0.03445803001523018,
    0.0074890293180942535,
    0.17362090945243835,
    0.014963901601731777,
    0.016011517494916916,
    0.004710726905614138,
    0.0010007198434323072,
    0.023712901398539543,
    -0.008621585555374622,
    0.00033534289104864,
    -0.004753198008984327,
    0.0005114200175739825,
    0.029757920652627945,
    -0.0060981083661317825,
    -0.00954886619001627,
    0.0008352603763341904,
    -0.0120829613879323,
    0.006101647857576609,
    -0.020386015996336937,
    -0.03267425298690796,
    -0.028922660276293755,
    -0.00954886619001627,
    -0.006080412305891514,
    -0.024718044325709343,
    -0.03669482842087746,
    -0.02623283863067627,
    0.014808175154030323,
    -0.002631423994898796,
    -0.01889953576028347,
    -0.003247251734137535,
    0.03290076553821564,
    0.015331982634961605,
    -0.026077112182974815,
    0.005107121542096138,
    -0.00633523752912879,
    -0.004392195492982864,
    -0.010999954305589199,
    -0.006575905717909336,
    0.0007715540705248713,
    -0.020669154822826385,
    0.009775377810001373,
    0.0012847436591982841,
    -0.015388610772788525,
    -0.031145302578806877,
    -0.013654383830726147,
    -0.03057902306318283,
    -0.010079752653837204,
    -0.014348074793815613,
    0.014319760724902153,
    0.00957718025892973,
    -0.02191496640443802,
    0.01636544056236744,
    -0.008664056658744812,
    -0.014822332188487053,
    0.02082488127052784,
    0.02051342837512493,
    -0.006441414821892977,
    -0.022976739332079887,
    0.016804305836558342,
    0.02252371609210968,
    0.013746404089033604,
    0.02054174244403839,
    -0.030069373548030853,
    0.034995995461940765,
    -0.015020529739558697,
    0.013895051553845406,
    -0.0581001453101635,
    0.010221322067081928,
    -0.001206880435347557,
    0.036893025040626526,
    0.008734841831028461,
    0.012967770919203758,
    -0.02001793496310711,
    -0.02784673124551773,
    0.0007335072732530534,
    -0.006448493339121342,
    -0.013010242022573948,
    -0.044226329773664474,
    0.034882739186286926,
    0.01133264321833849,
    0.022099006921052933,
    0.020442644134163857,
    0.003264947794377804,
    0.0025588697753846645,
    -0.014978058636188507,
    0.0023695204872637987,
    -0.010603560134768486,
    -0.025015341117978096,
    0.020357701927423477,
    -0.03038082644343376,
    -0.01783776469528675,
    -0.00338705163449049,
    -0.020697468891739845,
    -0.02888019010424614,
    -0.002834930317476392,
    -0.019026948139071465,
    0.014114484190940857,
    0.03304233402013779,
    -0.0013457955792546272,
    0.030154315754771233,
    0.004101977683603764,
    -0.012394414283335209,
    -0.0339483805000782,
    0.06880280375480652,
    0.021391158923506737,
    0.02810155600309372,
    -0.018828751519322395,
    7.194608770078048e-05,
    -0.017653724178671837,
    0.03290076553821564,
    -0.0002457558875903487,
    -0.008734841831028461,
    0.009010902605950832,
    -0.02096645161509514,
    0.009718749672174454,
    -0.011007033288478851,
    0.018248315900564194,
    -0.008904725313186646,
    -0.019451657310128212,
    -0.027945829555392265,
    -0.03043745458126068,
    0.00979661289602518,
    0.008664056658744812,
    -0.006253835279494524,
    0.01184937171638012,
    -0.007439480163156986,
    -0.019692325964570045,
    -0.02151857316493988,
    -0.0304940827190876,
    0.0006808610633015633,
    0.005269926507025957,
    -0.005142514128237963,
    -0.017653724178671837,
    -0.02812987007200718,
    0.01439762394875288,
    -0.0011591006768867373,
    -0.007772168610244989,
    -0.03428814560174942,
    -0.006179511081427336,
    -0.0074890293180942535,
    -0.010653109289705753,
    0.010978719219565392,
    -0.008133171126246452,
    -0.00491246348246932,
    0.024349963292479515,
    -0.012585533782839775,
    -0.020612526684999466,
    -0.035279132425785065,
    0.025779815390706062,
    -0.003436601022258401,
    -0.015388610772788525,
    0.004151527304202318,
    -0.0038648487534374,
    -0.0026208064518868923,
    0.008748998865485191,
    0.007715540938079357,
    0.009159550070762634,
    -0.011410506442189217,
    -0.009739985689520836,
    -0.018559768795967102,
    0.0011484830174595118,
    -0.013073948211967945,
    -0.04108348488807678,
    -0.011028268374502659,
    0.011375113390386105,
    -0.00871360581368208,
    -0.03989430144429207,
    -0.004264782648533583,
    -0.18018972873687744,
    -0.0003019413270521909,
    0.021150492131710052,
    -0.05985560640692711,
    0.007453637197613716,
    0.0057760379277169704,
    0.02241045981645584,
    0.009485160000622272,
    0.02592138573527336,
    -0.004172762855887413,
    0.029248269274830818,
    0.0029481858946383,
    -0.008083621971309185,
    -0.00454438291490078,
    0.014390544965863228,
    -0.0007348344661295414,
    -0.018970320001244545,
    -0.0042116944678127766,
    0.0463215596973896,
    0.006225521210581064,
    0.027450336143374443,
    -0.020980607718229294,
    0.014086171053349972,
    -0.002061606617644429,
    0.004112595692276955,
    -0.021235432475805283,
    -0.012649239972233772,
    0.008423388935625553,
    0.005199141800403595,
    -0.00821103435009718,
    -0.014850646257400513,
    0.010037281550467014,
    0.010610638186335564,
    -0.0006910364027135074,
    0.02534095011651516,
    0.00983908399939537,
    0.024010196328163147,
    -0.0002313777367817238,
    -0.02539757825434208,
    0.017682038247585297,
    0.003381742862984538,
    0.03833703696727753,
    0.03207965940237045,
    -0.008933039382100105,
    0.0026915911585092545,
    0.007241282612085342,
    0.014794018119573593,
    -0.049634285271167755,
    0.0034047476947307587,
    -0.036949653178453445,
    0.04530225694179535,
    -0.022537874057888985,
    0.018531454727053642,
    -0.017441369593143463,
    0.031003732234239578,
    0.011750273406505585,
    -0.02174508385360241,
    0.004137370269745588,
    0.01630881242454052,
    -0.0048098256811499596,
    -0.006444953847676516,
    -0.008933039382100105,
    0.019140204414725304,
    -0.008954274468123913,
    -0.0068059563636779785,
    -0.019494127482175827,
    -0.030210943892598152,
    0.02410929463803768,
    -0.0063741691410541534,
    0.007531500421464443,
    -0.008175642229616642,
    0.008288897573947906,
    0.01436930987983942,
    0.01526119839400053,
    -0.0027269835118204355,
    0.016209714114665985,
    0.009081686846911907,
    0.009598416276276112,
    0.035052623599767685,
    -0.015105471946299076,
    -0.016832619905471802,
    0.023627959191799164,
    0.027138883247971535,
    0.003733897116035223,
    0.010030202567577362,
    -0.009718749672174454,
    0.00819687731564045,
    0.011410506442189217,
    0.006607758812606335,
    -0.004112595692276955,
    0.05413619801402092,
    -0.018078431487083435,
    0.003963947761803865,
    -0.013654383830726147,
    0.002440305193886161,
    -0.015034686774015427,
    -0.002808385994285345,
    -0.003394130151718855,
    0.006781181786209345,
    -0.016634423285722733,
    0.006473267916589975,
    0.01806427538394928,
    -0.012189138680696487,
    -0.025043655186891556,
    0.037176165729761124,
    0.03125855699181557,
    -0.024548161774873734,
    0.003457836341112852,
    0.0304940827190876,
    -0.0015360296238213778,
    -0.033665239810943604,
    -0.010561089031398296,
    0.020456800237298012,
    0.01700250431895256,
    0.008656978607177734,
    0.03604361042380333,
    -0.01042659766972065,
    -0.0029729607049375772,
    0.012196216732263565,
    -0.015629278495907784,
    0.017880234867334366,
    -0.00901798065751791,
    -0.01633712649345398,
    0.020584212616086006,
    -0.01720070093870163,
    -0.033325474709272385,
    -0.09428532421588898,
    -0.043914876878261566,
    0.021277904510498047,
    -0.009010902605950832,
    -0.013250910677015781,
    -0.02330234833061695,
    -0.00494077755138278,
    0.02712472714483738,
    -0.008720684796571732,
    -0.008904725313186646,
    -0.013158890418708324,
    -0.00703954603523016,
    -0.018630553036928177,
    -0.013109341263771057,
    0.025298479944467545,
    -0.0033569680526852608,
    -0.017512153834104538,
    -0.0029269505757838488,
    -0.013102262280881405,
    0.003733897116035223,
    0.004165684338659048,
    0.006954604294151068,
    0.01262800395488739,
    0.006767024751752615,
    -0.0025571000296622515,
    -0.001989052165299654,
    -0.038705118000507355,
    0.014794018119573593,
    0.022948425263166428,
    0.0016333587700501084,
    -0.005793733987957239,
    -0.036666516214609146,
    0.010631873272359371,
    -0.02154688537120819,
    -0.028922660276293755,
    -0.016209714114665985,
    -0.04527394473552704,
    -0.031456753611564636,
    0.021900810301303864,
    -0.037119537591934204,
    0.02626115269958973,
    0.004466519691050053,
    0.02684158831834793,
    0.009435610845685005,
    -0.03083384968340397,
    -0.009117078967392445,
    0.007467794232070446,
    0.042272668331861496,
    0.013774718157947063,
    -0.010299185290932655,
    -0.02224057726562023,
    0.000673340167850256,
    -0.006625455338507891,
    -0.015317825600504875,
    0.008062385953962803,
    -0.00591052882373333,
    0.024321649223566055,
    -0.012026333250105381,
    0.007991601713001728,
    -0.02525600790977478,
    -0.029163328930735588,
    0.0015466473996639252,
    -0.017497997730970383,
    0.017965177074074745,
    -0.01038412656635046,
    0.01711575873196125,
    0.012238687835633755,
    -0.006059176754206419,
    0.03578878194093704,
    -0.0081260921433568,
    -0.015813319012522697,
    -0.008536644279956818,
    -0.012429807335138321,
    -0.012804966419935226,
    -0.01990467868745327,
    -0.003153461730107665,
    0.007202351000159979,
    0.010037281550467014,
    0.013342930935323238,
    0.00017176369146909565,
    -0.016153085976839066,
    0.006080412305891514,
    -0.0032720263116061687,
    -0.007949130609631538,
    0.011283093132078648,
    0.02076825313270092,
    0.01708744466304779,
    0.008649899624288082,
    0.021136334165930748,
    -0.051248177886009216,
    0.0025163989048451185,
    0.022905953228473663,
    0.01630881242454052,
    -0.00816856324672699,
    -0.020272759720683098,
    -0.0051531316712498665,
    0.014418859034776688,
    0.011530839838087559,
    -0.016294656321406364,
    0.0025588697753846645,
    -0.055013928562402725,
    0.006441414821892977,
    -0.08873579651117325,
    0.018885377794504166,
    -0.000514959276188165,
    -0.010851306840777397,
    0.003737436141818762,
    -0.028809404000639915,
    0.01526119839400053,
    -0.00301366182975471,
    -0.006324619986116886,
    0.018517298623919487,
    -0.03782738372683525,
    -0.008904725313186646,
    -0.019267616793513298,
    0.0019748953636735678,
    -0.015940731391310692,
    -0.01728564314544201,
    0.03590203821659088,
    -0.014135720208287239,
    0.03440140187740326,
    -0.004862914327532053,
    0.0018669485580176115,
    0.031343501061201096,
    0.04875655472278595,
    0.01068850141018629,
    -0.03097541816532612,
    -0.015020529739558697,
    0.008579115383327007,
    0.035250820219516754,
    -0.004947856068611145,
    -0.026940686628222466,
    0.02188665233552456,
    -0.01953659951686859,
    -0.005131896585226059,
    0.003971025813370943,
    -0.000500802299939096,
    0.023712901398539543,
    0.012451042421162128,
    -0.0019996699411422014,
    0.01915436051785946,
    0.013845502398908138,
    -0.004572696518152952,
    -0.017512153834104538,
    0.014248975552618504,
    -0.016153085976839066,
    -0.005691096186637878,
    0.008288897573947906,
    0.007103252224624157,
    -0.01403662096709013,
    0.00760936364531517,
    0.026473507285118103,
    0.02534095011651516,
    0.016322970390319824,
    -0.023231564089655876,
    -0.015317825600504875,
    0.00381176033988595,
    -0.024151766672730446,
    0.02283516898751259,
    -0.01126185804605484,
    -0.014666605740785599,
    0.0056769391521811485,
    0.03256099671125412,
    0.00717049790546298,
    0.002511089900508523,
    0.015841633081436157,
    -0.003606484504416585,
    -0.010865462943911552,
    -0.037147849798202515,
    -0.006381247658282518,
    0.003719740081578493,
    0.005184984765946865,
    -0.042187727987766266,
    -0.03570384159684181,
    0.02335897646844387,
    0.012026333250105381,
    0.04510406032204628,
    -0.007920816540718079,
    -0.03094710409641266,
    0.008572036400437355,
    -0.020428486168384552,
    0.018573924899101257,
    0.02422255091369152,
    -0.0016740600112825632,
    -0.027082255110144615,
    -0.0025659482926130295,
    0.028285596519708633,
    0.001213958952575922,
    -0.0135198924690485,
    -0.015983203426003456,
    0.0036666514351963997,
    0.009393139742314816,
    -0.007064320612698793,
    0.013951679691672325,
    0.006547592114657164,
    0.024675574153661728,
    -0.005528291221708059,
    -0.011481290683150291,
    -0.017073288559913635,
    -0.022424617782235146,
    0.012252844870090485,
    0.02088150940835476,
    0.008848097175359726,
    0.0003986067895311862,
    0.016039829701185226,
    -0.02795998752117157,
    -0.006062716245651245,
    -0.006158275529742241,
    0.014850646257400513,
    -0.00381176033988595,
    0.01570006273686886,
    0.009463924914598465,
    0.008175642229616642,
    -0.030126001685857773,
    0.0011042425176128745,
    0.018545610830187798,
    -0.007552735973149538,
    0.008862254209816456,
    0.0068059563636779785,
    -0.007326224353164434,
    -0.023316506296396255,
    0.028059085831046104,
    0.0023801380302757025,
    0.008748998865485191,
    0.03550564497709274,
    -0.015785004943609238,
    0.01608230173587799,
    0.04150819405913353,
    0.029814548790454865,
    0.00042736309114843607,
    0.011721959337592125,
    -0.006880280561745167,
    -0.009662122465670109,
    -0.00330741866491735,
    -0.021093863993883133,
    -0.004052428528666496,
    -0.00224387738853693,
    -0.012259923852980137,
    -0.03581709787249565,
    -0.004002879373729229,
    0.021277904510498047,
    0.07729697972536087,
    0.03040914051234722,
    -0.02539757825434208,
    -0.008770233951508999,
    -0.005284083541482687,
    -0.016068143770098686,
    0.020895665511488914,
    0.013944601640105247,
    -0.02246708795428276,
    -0.004930159542709589,
    0.018460670486092567,
    -0.010214243084192276,
    -0.01861639693379402,
    -0.011891842819750309,
    -0.008402152918279171,
    0.006795338820666075,
    -0.02191496640443802,
    0.033212218433618546,
    0.00872776284813881,
    0.01010806579142809,
    0.02502949722111225,
    0.011417584493756294,
    0.008232269436120987,
    0.0011918386444449425,
    -0.016606109216809273,
    0.008600350469350815,
    0.030012745410203934,
    0.00012343096022959799,
    0.01599735952913761,
    -0.04567033797502518,
    0.0068908981047570705,
    0.014609978534281254,
    -0.018304944038391113,
    -0.013392480090260506,
    -0.008855175226926804,
    0.01780945062637329,
    -0.020839039236307144,
    -0.011099053546786308,
    0.015501866117119789,
    -0.008635742589831352,
    -0.007906659506261349,
    0.020117033272981644,
    -0.012833280488848686,
    -0.03816715255379677,
    -0.011884763836860657,
    -0.013031477108597755,
    0.005128357093781233,
    -0.023429760709404945,
    -0.015926575288176537
  ]
}
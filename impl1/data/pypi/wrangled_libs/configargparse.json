{
  "classifiers": [
    "development status :: 4 - beta",
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "natural language :: english",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.5",
    "programming language :: python :: 3.6",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9",
    "programming language :: python :: implementation :: cpython",
    "programming language :: python :: implementation :: pypy"
  ],
  "description": "configargparse\n--------------\n\n.. image:: https://img.shields.io/pypi/v/configargparse.svg?style=flat\n    :alt: pypi version\n    :target: https://pypi.python.org/pypi/configargparse\n\n.. image:: https://img.shields.io/pypi/pyversions/configargparse.svg\n    :alt: supported python versions\n    :target: https://pypi.python.org/pypi/configargparse\n\n.. image:: https://static.pepy.tech/badge/configargparse/week\n    :alt: downloads per week\n    :target: https://pepy.tech/project/configargparse\n\n.. image:: https://img.shields.io/badge/-api_documentation-blue\n    :alt: api documentation\n    :target: https://bw2.github.io/configargparse/\n\n\t     \noverview\n~~~~~~~~\n\napplications with more than a handful of user-settable options are best\nconfigured through a combination of command line args, config files,\nhard-coded defaults, and in some cases, environment variables.\n\npython's command line parsing modules such as argparse have very limited\nsupport for config files and environment variables, so this module\nextends argparse to add these features.\n\navailable on pypi: http://pypi.python.org/pypi/configargparse\n\n\nfeatures\n~~~~~~~~\n\n-  command-line, config file, env var, and default settings can now be\n   defined, documented, and parsed in one go using a single api (if a\n   value is specified in more than one way then: command line >\n   environment variables > config file values > defaults)\n-  config files can have .ini or .yaml style syntax (eg. key=value or\n   key: value)\n-  user can provide a config file via a normal-looking command line arg\n   (eg. -c path/to/config.txt) rather than the argparse-style @config.txt\n-  one or more default config file paths can be specified\n   (eg. ['/etc/bla.conf', '~/.my_config'] )\n-  all argparse functionality is fully supported, so this module can\n   serve as a drop-in replacement (verified by argparse unittests).\n-  env vars and config file keys & syntax are automatically documented\n   in the -h help message\n-  new method :code:`print_values()` can report keys & values and where\n   they were set (eg. command line, env var, config file, or default).\n-  lite-weight (no 3rd-party library dependencies except (optionally) pyyaml)\n-  extensible (:code:`configfileparser` can be subclassed to define a new\n   config file format)\n-  unittested by running the unittests that came with argparse but on\n   configargparse, and using tox to test with python 3.5+\n\nexample\n~~~~~~~\n\n*config_test.py*:\n\nscript that defines 4 options and a positional arg and then parses and prints the values. also,\nit prints out the help message as well as the string produced by :code:`format_values()` to show\nwhat they look like.\n\n.. code:: py\n\n   import configargparse\n\n   p = configargparse.argparser(default_config_files=['/etc/app/conf.d/*.conf', '~/.my_settings'])\n   p.add('-c', '--my-config', required=true, is_config_file=true, help='config file path')\n   p.add('--genome', required=true, help='path to genome file')  # this option can be set in a config file because it starts with '--'\n   p.add('-v', help='verbose', action='store_true')\n   p.add('-d', '--dbsnp', help='known variants .vcf', env_var='dbsnp_path')  # this option can be set in a config file because it starts with '--'\n   p.add('vcf', nargs='+', help='variant file(s)')\n\n   options = p.parse_args()\n\n   print(options)\n   print(\"----------\")\n   print(p.format_help())\n   print(\"----------\")\n   print(p.format_values())    # useful for logging where different settings came from\n\n\n*config.txt:*\n\nsince the script above set the config file as required=true, lets create a config file to give it:\n\n.. code:: py\n\n    # settings for config_test.py\n    genome = hcmv     # cytomegalovirus genome\n    dbsnp = /data/dbsnp/variants.vcf\n\n\n*command line:*\n\nnow run the script and pass it the config file:\n\n.. code:: bash\n\n    dbsnp_path=/data/dbsnp/variants_v2.vcf python config_test.py --my-config config.txt f1.vcf f2.vcf\n\n*output:*\n\nhere is the result:\n\n.. code:: bash\n\n    namespace(dbsnp='/data/dbsnp/variants_v2.vcf', genome='hcmv', my_config='config.txt', v=false, vcf=['f1.vcf', 'f2.vcf'])\n    ----------\n    usage: config_test.py [-h] -c my_config --genome genome [-v] [-d dbsnp]\n                          vcf [vcf ...]\n    \n    args that start with '--' (eg. --genome) can also be set in a config file\n    (/etc/app/conf.d/*.conf or ~/.my_settings or specified via -c). config file\n    syntax allows: key=value, flag=true, stuff=[a,b,c] (for details, see syntax at\n    https://goo.gl/r74nmi). if an arg is specified in more than one place, then\n    commandline values override environment variables which override config file\n    values which override defaults.\n    \n    positional arguments:\n      vcf                   variant file(s)\n    \n    optional arguments:\n      -h, --help            show this help message and exit\n      -c my_config, --my-config my_config\n                            config file path\n      --genome genome       path to genome file\n      -v                    verbose\n      -d dbsnp, --dbsnp dbsnp\n                            known variants .vcf [env var: dbsnp_path]\n    \n    ----------\n    command line args:   --my-config config.txt f1.vcf f2.vcf\n    environment variables:\n      dbsnp_path:        /data/dbsnp/variants_v2.vcf\n    config file (config.txt):\n      genome:            hcmv\n\nspecial values\n~~~~~~~~~~~~~~\n\nunder the hood, configargparse handles environment variables and config file\nvalues by converting them to their corresponding command line arg. for\nexample, \"key = value\" will be processed as if \"--key value\" was specified\non the command line.\n\nalso, the following special values (whether in a config file or an environment\nvariable) are handled in a special way to support booleans and lists:\n\n-  :code:`key = true` is handled as if \"--key\" was specified on the command line.\n   in your python code this key must be defined as a boolean flag\n   (eg. action=\"store_true\" or similar).\n\n-  :code:`key = [value1, value2, ...]` is handled as if \"--key value1 --key value2\"\n   etc. was specified on the command line. in your python code this key must\n   be defined as a list (eg. action=\"append\").\n\nconfig file syntax\n~~~~~~~~~~~~~~~~~~\n\nonly command line args that have a long version (eg. one that starts with '--')\ncan be set in a config file. for example, \"--color\" can be set by putting\n\"color=green\" in a config file. the config file syntax depends on the constructor\narg: :code:`config_file_parser_class` which can be set to one of the provided\nclasses: :code:`defaultconfigfileparser`, :code:`yamlconfigfileparser`,\n:code:`configparserconfigfileparser` or to your own subclass of the\n:code:`configfileparser` abstract class.\n\n*defaultconfigfileparser*  - the full range of valid syntax is:\n\n.. code:: yaml\n\n        # this is a comment\n        ; this is also a comment (.ini style)\n        ---            # lines that start with --- are ignored (yaml style)\n        -------------------\n        [section]      # .ini-style section names are treated as comments\n\n        # how to specify a key-value pair (all of these are equivalent):\n        name value     # key is case sensitive: \"name\" isn't \"name\"\n        name = value   # (.ini style)  (white space is ignored, so name = value same as name=value)\n        name: value    # (yaml style)\n        --name value   # (argparse style)\n\n        # how to set a flag arg (eg. arg which has action=\"store_true\")\n        --name\n        name\n        name = true    # \"true\" and \"true\" are the same\n\n        # how to specify a list arg (eg. arg which has action=\"append\")\n        fruit = [apple, orange, lemon]\n        indexes = [1, 12, 35 , 40]\n\n\n*yamlconfigfileparser*  - allows a subset of yaml syntax (http://goo.gl/vgt2du)\n\n.. code:: yaml\n\n        # a comment\n        name1: value\n        name2: true    # \"true\" and \"true\" are the same\n\n        fruit: [apple, orange, lemon]\n        indexes: [1, 12, 35, 40]\n        colors:\n          - green\n          - red\n          - blue\n\n*configparserconfigfileparser*  - allows a subset of python's configparser\nmodule syntax (https://docs.python.org/3.7/library/configparser.html). in\nparticular the following configparser options are set:\n\n.. code:: py\n\n        config = configparser.argparser(\n            delimiters=(\"=\",\":\"),\n            allow_no_value=false,\n            comment_prefixes=(\"#\",\";\"),\n            inline_comment_prefixes=(\"#\",\";\"),\n            strict=true,\n            empty_lines_in_values=false,\n        )\n\nonce configparser parses the config file all section names are removed, thus all\nkeys must have unique names regardless of which ini section they are defined\nunder. also, any keys which have python list syntax are converted to lists by\nevaluating them as python code using ast.literal_eval\n(https://docs.python.org/3/library/ast.html#ast.literal_eval). to facilitate\nthis all multi-line values are converted to single-line values. thus multi-line\nstring values will have all new-lines converted to spaces. note, since key-value\npairs that have python dictionary syntax are saved as single-line strings, even\nif formatted across multiple lines in the config file, dictionaries can be read\nin and converted to valid python dictionaries with pyyaml's safe_load. example\ngiven below:\n\n.. code:: py\n\n        # inside your config file (e.g. config.ini)\n        [section1]  # ini sections treated as comments\n        system1_settings: { # start of multi-line dictionary\n            'a':true,\n            'b':[2, 4, 8, 16],\n            'c':{'start':0, 'stop':1000},\n            'd':'experiment 32 testing simulation with parameter a on'\n            } # end of multi-line dictionary value\n\n        .......\n\n        # in your configargparse setup\n        import configargparse\n        import yaml\n\n        parser = configargparse.argparser(\n            config_file_parser_class=configargparse.configparserconfigfileparser\n        )\n        parser.add_argument('--system1_settings', type=yaml.safe_load)\n        \n        args = parser.parse_args() # now args.system1 is a valid python dict\n\n*iniconfigparser*  - ini parser with support for sections.\n\nthis parser somewhat ressembles ``configparserconfigfileparser``. it uses configparser and apply the same kind of processing to \nvalues written with python list syntax. \n\nwith the following additions: \n   - must be created with argument to bind the parser to a list of sections.\n   - does not convert multiline strings to single line.\n   - optional support for converting multiline strings to list (if ``split_ml_text_to_list=true``). \n   - optional support for quoting strings in config file \n      (useful when text must not be converted to list or when text \n      should contain trailing whitespaces).\n\nthis config parser can be used to integrate with ``setup.cfg`` files.\n\nexample::\n\n      # this is a comment\n      ; also a comment\n      [my_super_tool]\n      # how to specify a key-value pair\n      format-string: restructuredtext \n      # white space are ignored, so name = value same as name=value\n      # this is why you can quote strings \n      quoted-string = '\\thello\\tmom...  '\n      # how to set an arg which has action=\"store_true\"\n      warnings-as-errors = true\n      # how to set an arg which has action=\"count\" or type=int\n      verbosity = 1\n      # how to specify a list arg (eg. arg which has action=\"append\")\n      repeatable-option = [\"https://docs.python.org/3/objects.inv\",\n                     \"https://twistedmatrix.com/documents/current/api/objects.inv\"]\n      # how to specify a multiline text:\n      multi-line-text = \n         lorem ipsum dolor sit amet, consectetur adipiscing elit. \n         vivamus tortor odio, dignissim non ornare non, laoreet quis nunc. \n         maecenas quis dapibus leo, a pellentesque leo. \n\nif you use ``iniconfigparser(sections, split_ml_text_to_list=true)``::\n\n      # the same rules are applicable with the following changes:\n      [my-software]\n      # how to specify a list arg (eg. arg which has action=\"append\")\n      repeatable-option = # just enter one value per line (the list literal format can also be used)\n         https://docs.python.org/3/objects.inv\n         https://twistedmatrix.com/documents/current/api/objects.inv\n      # how to specify a multiline text (you have to quote it):\n      multi-line-text = '''\n         lorem ipsum dolor sit amet, consectetur adipiscing elit. \n         vivamus tortor odio, dignissim non ornare non, laoreet quis nunc. \n         maecenas quis dapibus leo, a pellentesque leo. \n         '''\n\nusage:\n\n.. code:: py\n\n   import configargparse\n   parser = configargparse.argparser(\n            default_config_files=['setup.cfg', 'my_super_tool.ini'],\n            config_file_parser_class=configargparse.iniconfigparser(['tool:my_super_tool', 'my_super_tool']),\n        )\n   ...\n\n*tomlconfigparser*  - toml parser with support for sections.\n\n`toml <https://github.com/toml-lang/toml/blob/main/toml.md>`_ parser. this config parser can be used to integrate with ``pyproject.toml`` files.\n\nexample::\n\n   # this is a comment\n   [tool.my-software] # toml section table.\n   # how to specify a key-value pair\n   format-string = \"restructuredtext\" # strings must be quoted\n   # how to set an arg which has action=\"store_true\"\n   warnings-as-errors = true\n   # how to set an arg which has action=\"count\" or type=int\n   verbosity = 1\n   # how to specify a list arg (eg. arg which has action=\"append\")\n   repeatable-option = [\"https://docs.python.org/3/objects.inv\",\n                  \"https://twistedmatrix.com/documents/current/api/objects.inv\"]\n   # how to specify a multiline text:\n   multi-line-text = '''\n      lorem ipsum dolor sit amet, consectetur adipiscing elit. \n      vivamus tortor odio, dignissim non ornare non, laoreet quis nunc. \n      maecenas quis dapibus leo, a pellentesque leo. \n      '''\n\nusage:\n\n.. code:: py\n\n   import configargparse\n   parser = configargparse.argparser(\n            default_config_files=['pyproject.toml', 'my_super_tool.toml'],\n            config_file_parser_class=configargparse.tomlconfigparser(['tool.my_super_tool']),\n        )\n   ...\n\n*compositeconfigparser*  - create a config parser to understand multiple formats.\n\nthis parser will successively try to parse the file with each parser, until it succeeds, \nelse fail showing all encountered error messages.\n\nthe following code will make configargparse understand both toml and ini formats. \nmaking it easy to integrate in both ``pyproject.toml`` and ``setup.cfg``.\n\n.. code:: py\n\n   import configargparse\n   my_tool_sections = ['tool.my_super_tool', 'tool:my_super_tool', 'my_super_tool']\n                    # pyproject.toml like section, setup.cfg like section, custom section\n   parser = configargparse.argparser(\n            default_config_files=['setup.cfg', 'my_super_tool.ini'],\n            config_file_parser_class=configargparse.compositeconfigparser(\n               [configargparse.tomlconfigparser(my_tool_sections), \n                configargparse.iniconfigparser(my_tool_sections, split_ml_text_to_list=true)]\n               ),\n        )\n   ...\n\nnote that it's required to put the toml parser first because the ini syntax basically would accept anything whereas toml. \n\nargparser singletons\n~~~~~~~~~~~~~~~~~~~~~~~~~\n\nto make it easier to configure different modules in an application,\nconfigargparse provides globally-available argumentparser instances\nvia configargparse.get_argument_parser('name') (similar to\nlogging.getlogger('name')).\n\nhere is an example of an application with a utils module that also\ndefines and retrieves its own command-line args.\n\n*main.py*\n\n.. code:: py\n\n    import configargparse\n    import utils\n\n    p = configargparse.get_argument_parser()\n    p.add_argument(\"-x\", help=\"main module setting\")\n    p.add_argument(\"--m-setting\", help=\"main module setting\")\n    options = p.parse_known_args()   # using p.parse_args() here may raise errors.\n\n*utils.py*\n\n.. code:: py\n\n    import configargparse\n    p = configargparse.get_argument_parser()\n    p.add_argument(\"--utils-setting\", help=\"config-file-settable option for utils\")\n\n    if __name__ == \"__main__\":\n       options = p.parse_known_args()\n\nhelp formatters\n~~~~~~~~~~~~~~~\n\n:code:`argumentdefaultsrawhelpformatter` is a new helpformatter that both adds\ndefault values and disables line-wrapping. it can be passed to the constructor:\n:code:`argparser(.., formatter_class=argumentdefaultsrawhelpformatter)`\n\n\naliases\n~~~~~~~\n\nthe configargparse.argumentparser api inherits its class and method\nnames from argparse and also provides the following shorter names for\nconvenience:\n\n-  p = configargparse.get_arg_parser()  # get global singleton instance\n-  p = configargparse.get_parser()\n-  p = configargparse.argparser()  # create a new instance\n-  p = configargparse.parser()\n-  p.add_arg(..)\n-  p.add(..)\n-  options = p.parse(..)\n\nhelpformatters:\n\n- rawformatter = rawdescriptionhelpformatter\n- defaultsformatter = argumentdefaultshelpformatter\n- defaultsrawformatter = argumentdefaultsrawhelpformatter\n\napi documentation\n~~~~~~~~~~~~~~~~~\n\nyou can review the generated api documentation for the ``configargparse`` module: `here <https://bw2.github.io/configargparse/>`_\n\ndesign notes\n~~~~~~~~~~~~\n\nunit tests:\n\ntests/test_configargparse.py contains custom unittests for features\nspecific to this module (such as config file and env-var support), as\nwell as a hook to load and run argparse unittests (see the built-in\ntest.test_argparse module) but on configargparse in place of argparse.\nthis ensures that configargparse will work as a drop in replacement for\nargparse in all usecases.\n\npreviously existing modules (pypi search keywords: config argparse):\n\n-  argparse (built-in module python v2.7+)\n\n   -  good:\n\n      -  fully featured command line parsing\n      -  can read args from files using an easy to understand mechanism\n\n   -  bad:\n\n      -  syntax for specifying config file path is unusual (eg.\n         @file.txt)and not described in the user help message.\n      -  default config file syntax doesn't support comments and is\n         unintuitive (eg. --namevalue)\n      -  no support for environment variables\n\n-  confargparse v1.0.15\n   (https://pypi.python.org/pypi/confargparse)\n\n   -  good:\n\n      -  extends argparse with support for config files parsed by\n         configparser\n      -  clear documentation in readme\n\n   -  bad:\n\n      -  config file values are processed using\n         argumentparser.set_defaults(..) which means \"required\" and\n         \"choices\" are not handled as expected. for example, if you\n         specify a required value in a config file, you still have to\n         specify it again on the command line.\n      -  doesn't work with python 3 yet\n      -  no unit tests, code not well documented\n\n-  appsettings v0.5 (https://pypi.python.org/pypi/appsettings)\n\n   -  good:\n\n      -  supports config file (yaml format) and env_var parsing\n      -  supports config-file-only setting for specifying lists and\n         dicts\n\n   -  bad:\n\n      -  passes in config file and env settings via parse_args\n         namespace param\n      -  tests not finished and don't work with python 3 (import\n         stringio)\n\n-  argparse_config v0.5.1\n   (https://pypi.python.org/pypi/argparse_config)\n\n   -  good:\n\n      -  similar features to confargparse v1.0.15\n\n   -  bad:\n\n      -  doesn't work with python 3 (error during pip install)\n\n-  yconf v0.3.2 - (https://pypi.python.org/pypi/yconf) - features\n   and interface not that great\n-  hieropt v0.3 - (https://pypi.python.org/pypi/hieropt) - doesn't\n   appear to be maintained, couldn't find documentation\n\n-  configurati v0.2.3 - (https://pypi.python.org/pypi/configurati)\n\n   -  good:\n\n      -  json, yaml, or python configuration files\n      -  handles rich data structures such as dictionaries\n      -  can group configuration names into sections (like .ini files)\n\n   -  bad:\n\n      -  doesn't work with python 3\n      -  2+ years since last release to pypi\n      -  apparently unmaintained\n\n\ndesign choices:\n\n1. all options must be settable via command line. having options that\n   can only be set using config files or env. vars adds complexity to\n   the api, and is not a useful enough feature since the developer can\n   split up options into sections and call a section \"config file keys\",\n   with command line args that are just \"--\" plus the config key.\n2. config file and env. var settings should be processed by appending\n   them to the command line (another benefit of #1). this is an\n   easy-to-implement solution and implicitly takes care of checking that\n   all \"required\" args are provided, etc., plus the behavior should be\n   easy for users to understand.\n3. configargparse shouldn't override argparse's\n   convert_arg_line_to_args method so that all argparse unit tests\n   can be run on configargparse.\n4. in terms of what to allow for config file keys, the \"dest\" value of\n   an option can't serve as a valid config key because many options can\n   have the same dest. instead, since multiple options can't use the\n   same long arg (eg. \"--long-arg-x\"), let the config key be either\n   \"--long-arg-x\" or \"long-arg-x\". this means the developer can allow\n   only a subset of the command-line args to be specified via config\n   file (eg. short args like -x would be excluded). also, that way\n   config keys are automatically documented whenever the command line\n   args are documented in the help message.\n5. don't force users to put config file settings in the right .ini [sections].\n   this doesn't have a clear benefit since all options are command-line settable,\n   and so have a globally unique key anyway.\n   enforcing sections just makes things harder for the user and adds complexity to the implementation.\n   note: this design choice was preventing configargparse from integrating with common python project\n   config files like setup.cfg or pyproject.toml,\n   so additional parser classes were added that parse only a subset of the values defined in ini or\n   toml config files.\n6. if necessary, config-file-only args can be added later by\n   implementing a separate add method and using the namespace arg as in\n   appsettings_v0.5\n\nrelevant sites:\n\n-  http://stackoverflow.com/questions/6133517/parse-config-file-environment-and-command-line-arguments-to-get-a-single-coll\n-  http://tricksntweaks.blogspot.com/2013_05_01_archive.html\n-  http://www.youtube.com/watch?v=vvcwqhgzjc8#t=35\n\n\n\nversioning\n~~~~~~~~~~\n\nthis software follows `semantic versioning`_\n\n.. _semantic versioning: http://semver.org/\n",
  "docs_url": null,
  "keywords": "options,argparse,configargparse,config,environment variables,envvars,env,environment,optparse,yaml,ini",
  "license": "mit",
  "name": "configargparse",
  "package_url": "https://pypi.org/project/ConfigArgParse/",
  "project_url": "https://pypi.org/project/ConfigArgParse/",
  "project_urls": {
    "Homepage": "https://github.com/bw2/ConfigArgParse"
  },
  "release_url": "https://pypi.org/project/ConfigArgParse/1.7/",
  "requires_dist": [
    "mock ; extra == 'test'",
    "PyYAML ; extra == 'test'",
    "pytest ; extra == 'test'",
    "PyYAML ; extra == 'yaml'"
  ],
  "requires_python": ">=3.5",
  "summary": "a drop-in replacement for argparse that allows options to also be set via config files and/or environment variables.",
  "version": "1.7",
  "releases": [],
  "developers": [],
  "kwds": "configargparse argparse_config configparser test_configargparse iniconfigparser",
  "license_kwds": "mit",
  "libtype": "pypi",
  "id": "pypi_configargparse",
  "homepage": "https://github.com/bw2/configargparse",
  "release_count": 28,
  "dependency_ids": [
    "pypi_mock",
    "pypi_pytest",
    "pypi_pyyaml"
  ]
}
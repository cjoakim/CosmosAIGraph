{
  "classifiers": [
    "license :: osi approved :: apache software license",
    "programming language :: python :: 3",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9"
  ],
  "description": "# evergreen.py\n\na client library for the evergreen api written in python. currently supports the v2 version of\nthe api. for more details, see https://github.com/evergreen-ci/evergreen/wiki/rest-v2-usage.\n\n![pypi - python version](https://img.shields.io/pypi/pyversions/evergreen.py) [![pypi](https://img.shields.io/pypi/v/evergreen.py.svg)](https://pypi.org/project/evergreen.py/) [![coverage status](https://coveralls.io/repos/github/evergreen-ci/evergreen.py/badge.svg?branch=master)](https://coveralls.io/github/evergreen-ci/evergreen.py?branch=master)\n\n## table of contents\n\n1. [description](#description)\n2. [getting help](#getting-help)\n3. [dependencies](#dependencies)\n4. [installation](#installation)\n5. [usage](#usage)\n6. [documentation](#documentation)\n7. [contributor's guide](#contributors-guide)\n   - [setting up a local development environment](#setting-up-a-local-development-environment)\n   - [linting/formatting](#lintingformatting)\n   - [running tests](#running-tests)\n   - [automatically running checks on commit](#automatically-running-checks-on-commit)\n   - [versioning](#versioning)\n   - [code review](#code-review)\n   - [deployment](#deployment)\n\n## description\n\nthis is a python client library for interacting with evergreen and evergreen objects. it currently only\nsupports the v2 version of evergreen's api. it can be used either by python code in a separate application\nor on the command line to get data about evergreen objects quickly and easily.\n\n## getting help\n\n### what's the right channel to ask my question?\n\nif you have a question about evergreen.py, please mention @dag-on-call in\nslack channel [#evergreen-users](https://mongodb.slack.com/messages/#evergreen-users/),\nor email us at\ndev-prod-dag@mongodb.com.\n\n### how can i request a change/report a bug in evergreen.py?\n\ncreate a [dag ticket](https://jira.mongodb.org/projects/dag).\n\n### what should i include in my ticket or #evergreen-users question?\n\nsince #evergreen-users questions are interrupts,\nplease include as much information as possible.\nthis can help avoid long information-gathering threads.\n\nplease include the following:\n\n- **motivation for request**\n  - provide us the motivation for this change.\n- **context**\n  - provide some background contexts for this issue.\n- **description**\n  - provide some descriptions on how this issue happened.\n\n## dependencies\n\n- python 3.7 or later\n\n## installation\n\n```bash\n$ pip install evergreen.py\n```\n\n## usage\n\nthis client can be used either in code or directly via the command line.\n\nin code:\n\n```python\n>> from evergreen.api import evgauth, evergreenapi\n>> api = evergreenapi.get_api(evgauth('david.bradford', '***'))\n>> project = api.project_by_id('mongodb-mongo-master')\n>> project.display_name\n'mongodb (master)'\n```\n\ncli:\n\n```bash\n$ evg-api --json list-hosts\n{\n    \"host_id\": \"host num 0\",\n    \"host_url\": \"host.num.com\",\n    \"distro\": {\n        \"distro_id\": \"ubuntu1804-build\",\n        \"provider\": \"static\",\n        \"image_id\": \"\"\n    },\n    \"provisioned\": true,\n    \"started_by\": \"mci\",\n    \"host_type\": \"\",\n    \"user\": \"mci-exec\",\n    \"status\": \"running\",\n    \"running_task\": {\n        \"task_id\": null,\n        \"name\": null,\n        \"dispatch_time\": null,\n        \"version_id\": null,\n        \"build_id\": null\n    },\n    \"user_host\": false\n}\n```\n\nthe `patch_from_diff` api requires the evergreen cli to be installed.\n\nadd the following to the host's dockerfile:\n\n```bash\nrun wget https://evergreen.mongodb.com/clients/linux_amd64/evergreen\nrun chmod +x evergreen\nenv path=\"/project:$path\"\n```\n\nyou will need to provide an .evergreen.yml file with credentials to use the cli. assuming you are using the [web-app](https://github.com/10gen/helm-charts/tree/master/charts/web-app) chart this can be done by [mounting](https://kanopy.corp.mongodb.com/docs/getting_started/application_configuration/#configuration-filesvolumes) [kubernetes secrets](https://kanopy.corp.mongodb.com/docs/cheatsheet/#interacting-with-kubernetes-secrets) in your pod.\n\nstore the secret in the cluster:\n\n```bash\nkubectl create secret generic <secret_name> --from-file .evergreen.yml --namespace <namespace>\n```\n\nin environments/deployment.yml configure the file to be mounted and linked to the correct location:\n\n```yaml\nvolumesecrets:\n  - name: <secret_name>\n    path: /etc/secrets\nlifecycle:\n  poststart:\n    type: exec\n    command:\n      - /bin/sh\n      - -c\n      - ln -sf /etc/secrets/.evergreen.yml\n```\n\n## documentation\n\nyou can find the documentation [here](https://evergreen-ci.github.io/evergreen.py/).\n\n## contributor's guide\n\n### setting up a local development environment\n\n#### requirements\n\n- poetry 1.1 or later\n\nyou will need evergreen credentials on your local machine to use this library or the attached cli. you\ncan set up your credentials by following the link [here](https://github.com/evergreen-ci/evergreen/wiki/using-the-command-line-tool#downloading-the-command-line-tool).\n\n### linting/formatting\n\nthis project uses [black](https://github.com/psf/black) for formatting.\n\n```bash\npoetry run black src tests\n```\n\n### running tests\n\n```bash\npoetry run pytest\n```\n\nthere are a few tests that are slow running. these tests are not run by default, but can be included\nby setting the env variable run_slow_tests to any value.\n\n```\n$ run_slow_test=1 poetry run pytest\n```\n\nto get code coverage information:\n\n```\n$ poetry run pytest --cov=src --cov-report=html\n```\n\n### automatically running checks on commit\n\nthis project has [pre-commit](https://pre-commit.com/) configured. pre-commit will run\nconfigured checks at git commit time. to enable pre-commit on your local repository run:\n\n```bash\n$ poetry run pre-commit install\n```\n\n### versioning\n\nbefore deploying a new version, please update the `changelog.md` file with a description of what\nis being changed.\n\ndeploys to [pypi](https://pypi.org/project/evergreen.py/) are done automatically on merges to master.\nin order to avoid overwriting a previous deploy, the version should be updated on all changes. the\n[semver](https://semver.org/) versioning scheme should be used for determining the version number.\n\nthe version is found in the `pyproject.toml` file.\n\n### code review\n\nthis project uses the [evergreen commit queue](https://github.com/evergreen-ci/evergreen/wiki/commit-queue#pr).\nadd a pr comment with `evergreen merge` to trigger a merge.\n\n### deployment\n\ndeployment to production is automatically triggered on merges to master.\n",
  "docs_url": null,
  "keywords": "",
  "license": "apache-2.0",
  "name": "evergreen-py",
  "package_url": "https://pypi.org/project/evergreen-py/",
  "project_url": "https://pypi.org/project/evergreen-py/",
  "project_urls": {
    "Homepage": "https://github.com/evergreen-ci/evergreen.py",
    "Repository": "https://github.com/evergreen-ci/evergreen.py"
  },
  "release_url": "https://pypi.org/project/evergreen-py/3.6.16/",
  "requires_dist": [
    "Click (>=7)",
    "python-dateutil (>=2)",
    "PyYAML (>=5)",
    "requests (>=2)",
    "structlog (>=19)",
    "tenacity (>=5)",
    "pydantic (>=1)"
  ],
  "requires_python": ">=3.6.1,<4.0.0",
  "summary": "python client for the evergreen api",
  "version": "3.6.16",
  "releases": [],
  "developers": [
    "dev-prod-dag@mongodb.com",
    "dev_prod_dag"
  ],
  "kwds": "evergreenapi evergreen pyversions documentation api",
  "license_kwds": "apache-2.0",
  "libtype": "pypi",
  "id": "pypi_evergreen_py",
  "homepage": "https://github.com/evergreen-ci/evergreen.py",
  "release_count": 148,
  "dependency_ids": [
    "pypi_click",
    "pypi_pydantic",
    "pypi_python_dateutil",
    "pypi_pyyaml",
    "pypi_requests",
    "pypi_structlog",
    "pypi_tenacity"
  ]
}
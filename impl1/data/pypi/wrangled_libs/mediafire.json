{
  "classifiers": [
    "development status :: 3 - alpha",
    "intended audience :: developers",
    "license :: osi approved :: bsd license",
    "programming language :: python :: 2",
    "programming language :: python :: 2.7",
    "programming language :: python :: 3",
    "programming language :: python :: 3.4"
  ],
  "description": "=========================\nmediafire python open sdk\n=========================\n\n\nthis is a python implementation of `mediafire core api`_ client.\n\n.. _mediafire core api: http://www.mediafire.com/developers/core_api/\n\n==========\ninstalling\n==========\n\n.. code-block:: bash\n\n    $ pip install mediafire\n\n==================\nwhat should i use?\n==================\n\nif you are in a hurry, use ``mediafireclient`` - it contains enough functions to\nget your uploads/downloads and file listings working. it does not have a stable api,\nand has rudimentary test coverage only.\n\nyou may want to stick to ``mediafireapi`` and ``mediafireuploader`` to have as much\ncontrol as possible over your application flow.\n\n======================\nmediafire.mediafireapi\n======================\n\napi client library provides an interface to mediafire api. it handles\nrequests, responses, signatures and errors.\n\nusage:\n\n.. code-block:: python\n\n    from mediafire import mediafireapi\n\n    api = mediafireapi()\n    session = api.user_get_session_token(\n        email='your.email@example.net',\n        password='password',\n        app_id='42511')\n\n    # api client does not know about the token\n    # until explicitly told about it:\n    api.session = session\n\n    response = api.user_get_info()\n    print(response['user_info']['display_name'])\n\n    # or directly for methods that are not yet wrapped\n    response = api.request(\"upload/add_web_upload\", {\n        \"url\": \"http://forum.mediafiredev.com/images/mfforumlogo.png\",\n        \"filename\": \"mfforumlogo.png\"})\n\n    response = api.request(\"upload/get_web_uploads\",\n                           {\"key\": response['upload_key']})\n\n\napi client library supports operation w/o session_token. in this case all\noperations that do require session_token will fail with access denied error:\n\n.. code-block:: python\n\n    from mediafire import mediafireapi\n\n    api = mediafireapi()\n    response = api.system_get_info()\n    print(response)  # prints system info\n\n    response = api.user_get_info()  # fails with \"session token is missing\"\n\nonce set, session token can be unset:\n\n.. code-block:: python\n\n    api.session = none\n    # or\n    del api.session\n\nfor information on wrapped methods, see ``pydoc mediafire.api``. for\ndocumentation on actual values expected, see `mediafire core api`_\ndocumentation.\n\nall wrapped methods follow the same naming convention, ``category_action``, so\nupload/instant is ``upload_instant``.\n\nyou can construct the call yourself easily:\n\n.. code-block:: python\n\n    response = api.request(\"user/set_avatar\",\n                           {\"quick_key\": \"123456789012345\"})\n\ndownloading\n-----------\n\napi client does not handle regular file downloads because these are simple http requests\nto urls returned by \"file/get_links\". here's how you can do that yourself:\n\n.. code-block:: python\n\n    response = api.file_get_links('c94lcpx3vax6xp3')\n    normal_download_url = response['links'][0]['normal_download']\n\n    response = requests.get(normal_download_url, stream=true)\n    with io.open(\"/tmp/green.jpg\", 'wb') as fd:\n        for chunk in response.iter_content(chunk_size=4096):\n            fd.write(chunk)\n\nin case response is a file download, e.g. ``file/zip``, the response returned\nis a `requests.response`_ object, which you can read from:\n\n.. code-block:: python\n\n    ...\n    response = api.request(\"file/zip\", {\"keys\": \"c94lcpx3vax6xp3\"})\n    with io.open(\"/tmp/green.zip\", 'wb') as fd:\n        for chunk in response.iter_content(chunk_size=4096):\n            fd.write(chunk)\n    ...\n\n.. _requests.response: http://docs.python-requests.org/en/latest/api/#requests.response\n\nsee download_ documentation for more information.\n\n.. _download: http://www.mediafire.com/developers/core_api/1.2/download/\n\n===========================\nmediafire.mediafireuploader\n===========================\n\nmediafire supports several upload methods and `mediafireuploader` exposes a\nsingle `upload` method to make things easier:\n\n.. code-block:: python\n\n    from mediafire import (mediafireapi, mediafireuploader)\n\n    api = mediafireapi()\n    uploader = mediafireuploader(api)\n\n    # ... authenticate ...\n\n    fd = open('/path/to/file', 'rb')\n\n    result = uploader.upload(fd, 'some filename.txt',\n                             folder_key='1234567890123')\n\n    pprint(api.file_get_info(result.quickkey))\n\n``result`` is a ``mediafire.uploader.uploadresult`` instance.\n\nfiledrop\n--------\n\nfor filedrop uploads (i.e. when filedrop_key is used) only ``upload/instant``\nresult has quickkey. ``upload/instant`` and ``upload/resumable`` return\n``none`` for all the fields, since ``upload/poll`` does not support\nencrypted upload key.\n\n\n======================================\nmediafire.media.conversionserverclient\n======================================\n\nthis api is subject to change\n\nthis is a very thin layer on top of image and document conversion api.\n\n.. code-block:: python\n\n    from mediafire.media import conversionserverclient\n\n    conv = conversionserverclient()\n\n    response = conv.request('2004', 'm8d6blce79xhxl5', 'i', size_id='1')\n    with open('/tmp/example.jpg', 'rb') as fd:\n        fd.write(response.content)\n\n\n================================\nmediafire.client.mediafireclient\n================================\n\nthis api is subject to change\n\nhigh-level client library wraps api calls and presents simplified interface.\n\nsupported operations:\n\n* file upload\n* file download (direct download link)\n* listing directories\n* creating directories\n* removing files and directories\n* getting info about files and directories\n\nmediafire resources can be referenced by path or by quickkey/folderkey.\n\n* **path**: ``mf:/pictures/sample.jpg`` or ``/pictures/sample.jpg``\n* **folder_key**: ``mf:6302u1a9p0a9x`` (``folder_key`` is 13 chars long)\n* **quick_key**: ``mf:46d3y4p8542kiyp`` (``quick_key`` is 15 chars long)\n\n.. code-block:: python\n\n    from mediafire.client import (mediafireclient, file, folder)\n\n    client = mediafireclient()\n    client.login(email='your.email@example.net',\n        password='password',\n        app_id='42511')\n\n    client.upload_file(\"flower.jpg\", \"mf:/pictures/\")\n    client.download_file(\"mf:/pictures/flower.jpg\",\n                         \"flower-from-mediafire.jpg\")\n\n    for item in client.get_folder_contents_iter(\"mf:/pictures\"):\n        if type(item) is file:\n            print(\"file: {}\".format(item['filename']))\n        elif type(item) is folder:\n            print(\"folder: {}\".format(item['name']))\n\nsee ``examples/mediafire-cli.py`` for high-level client usage.\n\nrequirements\n------------\n\n* python 2.7 or 3.4\n* six\n* requests\n* requests\\_toolbelt\n* responses (for testing)\n\ntests\n-----\n\ntest suite is located under ``tests/``\n\n.. code-block:: bash\n\n\n    git clone https://github.com/mediafire/mediafire-python-open-sdk.git\n    cd mediafire-python-open-sdk\n    # run tests with python 3 interpreter\n    pythonpath=. python3 -munittest\n    # run tests with python 2 interpreter\n    pythonpath=. python -munittest discover\n\n================\nreporting issues\n================\n\nsee https://pypi.org/project/mediafire/ for the current maintainer.\n\n=================\nabout and license\n=================\n\ncopyright (c) 2014, roman yepishev. all rights reserved. website: http://www.keypressure.com\n\nthis project was forked by mediafire with explicit permission from roman yepishev on 10.24.2014\n\nthis project is made under bsd license. see license file for more information.\n\nmediafire\u00e2\u00ae is a registered trademark of the mediafire, llc.\n\n\n",
  "docs_url": null,
  "keywords": "mediafire cloud files sdk storage api upload",
  "license": "bsd",
  "name": "mediafire",
  "package_url": "https://pypi.org/project/mediafire/",
  "project_url": "https://pypi.org/project/mediafire/",
  "project_urls": null,
  "release_url": "https://pypi.org/project/mediafire/0.6.1/",
  "requires_dist": [
    "requests",
    "requests-toolbelt",
    "six"
  ],
  "requires_python": "",
  "summary": "python mediafire client library",
  "version": "0.6.1",
  "releases": [],
  "developers": [
    "roman_yepishev",
    "rye@keypressure.com"
  ],
  "kwds": "mediafireuploader mediafireapi mediafireclient mediafire mediafiredev",
  "license_kwds": "bsd",
  "libtype": "pypi",
  "id": "pypi_mediafire",
  "homepage": "",
  "release_count": 9,
  "dependency_ids": [
    "pypi_requests",
    "pypi_requests_toolbelt",
    "pypi_six"
  ]
}
{
  "classifiers": [
    "development status :: 4 - beta",
    "intended audience :: developers",
    "license :: other/proprietary license",
    "operating system :: os independent",
    "programming language :: python"
  ],
  "description": "\nruamel.yaml.split\n=================\n\n.. image:: https://sourceforge.net/p/ruamel-yaml-split/code/ci/default/tree/_doc/_static/license.svg?format=raw\n     :target: https://opensource.org/licenses/mit\n.. image:: https://sourceforge.net/p/ruamel-yaml-split/code/ci/default/tree/_doc/_static/pypi.svg?format=raw\n     :target: https://pypi.org/project/ruamel.yaml.split\n.. image:: https://sourceforge.net/p/oitnb/code/ci/default/tree/_doc/_static/oitnb.svg?format=raw\n     :target: https://pypi.org/project/oitnb/\n\n\n\nthis package provides a yaml document splitter, \nthat allows you to iterate over a utf-8 encoded file with yaml\ndocuments, and that returns each  \ndocument, start linenumber and optionally loaded data.\n\nusing this has the advantage over using ``load_all()``, that you can skip individual documents\nthat you know don't load, or that you test/transform before proper loading. \ne.g. ``r`` markdown files have a yaml header followed by a non-yaml body\n(of course it would have been much better if in ``r`` markdown,\nthe header had been followed by ``--- |`` instead of only a directory-end-marker (``---``),\nthat way you could use **any** compliant yaml parser to load both)\n\nyou can use the following to get to each document:\n\n.. code:: python\n\n    from pathlib import path\n    from ruamel.yaml.split import split\n\n    for doc, line_nr in split(path('input.yaml')): \n        print(doc.decode('utf-8'), line_nr)\n\nthe line_nr indicates the starting line of the document and can be used as an offset\nfor e.g. errors that are generated when parsing the document.\n\nyou can also provide a ``yaml()`` instance to get the document loaded for you:\n\n.. code:: python\n\n    import ruamel.yaml \n\n    for doc, data, line_nr in split(path('input.yaml'), yaml=ruamel.yaml.yaml()): \n        print(doc.decode('utf-8'), data, line_nr)\n\nthe ``yaml()`` instance you provide is used to load all documents.\n\nby default ``split()`` splits on the line-ending after the document-end-marker (``...``), so that any comment\non the line of the document-end-marker is part of the document before it. using\nsome constants imported from ``ruamel.yaml.split`` that you provide to the  \nthe ``cmnt`` parameter of ``split()``, you can influence where the comments \"between\" documents\nare split. ``c_pre`` adds any such comments to the preceding document, ``c_post`` to\nthe following document.\n``c_split_on_first_blank``, splits after the first blank line and assigns to both.\n\n.. code:: python\n\n    from ruamel.yaml.split import c_split_on_first_blank \n\n    for doc, data, line_nr in split(path('input.yaml'), cmnt=c_split_on_first_blank): \n        print(doc.decode('utf-8'), line_nr)\n\ncomments at the end of the\ndocument stream are all attached to the last document, independent of the ``cmnt`` parameter.\n",
  "docs_url": null,
  "keywords": "yaml multi document split",
  "license": "copyright ruamel bvba 2007-2022",
  "name": "ruamel.yaml.split",
  "package_url": "https://pypi.org/project/ruamel.yaml.split/",
  "project_url": "https://pypi.org/project/ruamel.yaml.split/",
  "project_urls": {
    "Homepage": "https://sourceforge.net/p/ruamel-yaml-split/code/ci/default/tree"
  },
  "release_url": "https://pypi.org/project/ruamel.yaml.split/0.2.2/",
  "requires_dist": [],
  "requires_python": ">=3",
  "summary": "yaml document splitter, with iterator that returns document, start linenumber and optionally data",
  "version": "0.2.2",
  "releases": [],
  "developers": [
    "a.van.der.neut@ruamel.eu",
    "anthon_van_der_neut"
  ],
  "kwds": "yaml split splitter svg splits",
  "license_kwds": "copyright ruamel bvba 2007-2022",
  "libtype": "pypi",
  "id": "pypi_ruamel.yaml.split",
  "homepage": "https://sourceforge.net/p/ruamel-yaml-split/code/ci/default/tree",
  "release_count": 3,
  "dependency_ids": []
}
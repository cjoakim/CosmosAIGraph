{
  "classifiers": [
    "development status :: 5 - production/stable",
    "framework :: asyncio",
    "intended audience :: developers",
    "license :: osi approved :: mit license",
    "programming language :: python",
    "programming language :: python :: 3",
    "programming language :: python :: 3 :: only",
    "programming language :: python :: 3.10",
    "programming language :: python :: 3.11",
    "programming language :: python :: 3.12",
    "programming language :: python :: 3.8",
    "programming language :: python :: 3.9"
  ],
  "description": "async-lru\n=========\n\n:info: simple lru cache for asyncio\n\n.. image:: https://github.com/aio-libs/async-lru/actions/workflows/ci-cd.yml/badge.svg?event=push\n   :target: https://github.com/aio-libs/async-lru/actions/workflows/ci-cd.yml?query=event:push\n   :alt: github actions ci/cd workflows status\n\n.. image:: https://img.shields.io/pypi/v/async-lru.svg?logo=python&logocolor=white\n   :target: https://pypi.org/project/async-lru\n   :alt: async-lru @ pypi\n\n.. image:: https://codecov.io/gh/aio-libs/async-lru/branch/master/graph/badge.svg\n    :target: https://codecov.io/gh/aio-libs/async-lru\n\n.. image:: https://img.shields.io/matrix/aio-libs:matrix.org?label=discuss%20on%20matrix%20at%20%23aio-libs%3amatrix.org&logo=matrix&server_fqdn=matrix.org&style=flat\n   :target: https://matrix.to/#/%23aio-libs:matrix.org\n   :alt: matrix room \u2014 #aio-libs:matrix.org\n\n.. image:: https://img.shields.io/matrix/aio-libs-space:matrix.org?label=discuss%20on%20matrix%20at%20%23aio-libs-space%3amatrix.org&logo=matrix&server_fqdn=matrix.org&style=flat\n   :target: https://matrix.to/#/%23aio-libs-space:matrix.org\n   :alt: matrix space \u2014 #aio-libs-space:matrix.org\n\ninstallation\n------------\n\n.. code-block:: shell\n\n    pip install async-lru\n\nusage\n-----\n\nthis package is a port of python's built-in `functools.lru_cache <https://docs.python.org/3/library/functools.html#functools.lru_cache>`_ function for `asyncio <https://docs.python.org/3/library/asyncio.html>`_. to better handle async behaviour, it also ensures multiple concurrent calls will only result in 1 call to the wrapped function, with all ``await``\\s receiving the result of that call when it completes.\n\n.. code-block:: python\n\n    import asyncio\n\n    import aiohttp\n    from async_lru import alru_cache\n\n\n    @alru_cache(maxsize=32)\n    async def get_pep(num):\n        resource = 'http://www.python.org/dev/peps/pep-%04d/' % num\n        async with aiohttp.clientsession() as session:\n            try:\n                async with session.get(resource) as s:\n                    return await s.read()\n            except aiohttp.clienterror:\n                return 'not found'\n\n\n    async def main():\n        for n in 8, 290, 308, 320, 8, 218, 320, 279, 289, 320, 9991:\n            pep = await get_pep(n)\n            print(n, len(pep))\n\n        print(get_pep.cache_info())\n        # cacheinfo(hits=3, misses=8, maxsize=32, currsize=8)\n\n        # closing is optional, but highly recommended\n        await get_pep.cache_close()\n\n\n    asyncio.run(main())\n\n\nttl (time-to-live, expiration on timeout) is supported by accepting `ttl` configuration\nparameter (off by default):\n\n.. code-block:: python\n\n    @alru_cache(ttl=5)\n    async def func(arg):\n        return arg * 2\n\n\nthe library supports explicit invalidation for specific function call by\n`cache_invalidate()`:\n\n.. code-block:: python\n\n    @alru_cache(ttl=5)\n    async def func(arg1, arg2):\n        return arg1 + arg2\n\n    func.cache_invalidate(1, arg2=2)\n\nthe method returns `true` if corresponding arguments set was cached already, `false`\notherwise.\n\n\npython 3.8+ is required\n\nthanks\n------\n\nthe library was donated by `ocean s.a. <https://ocean.io/>`_\n\nthanks to the company for contribution.\n",
  "docs_url": null,
  "keywords": "asyncio,lru,lru_cache",
  "license": "mit license",
  "name": "async-lru",
  "package_url": "https://pypi.org/project/async-lru/",
  "project_url": "https://pypi.org/project/async-lru/",
  "project_urls": {
    "CI: GitHub Actions": "https://github.com/aio-libs/async-lru/actions",
    "Chat: Matrix": "https://matrix.to/#/#aio-libs:matrix.org",
    "Chat: Matrix Space": "https://matrix.to/#/#aio-libs-space:matrix.org",
    "GitHub: repo": "https://github.com/aio-libs/async-lru",
    "Homepage": "https://github.com/aio-libs/async-lru"
  },
  "release_url": "https://pypi.org/project/async-lru/2.0.4/",
  "requires_dist": [
    "typing-extensions (>=4.0.0) ; python_version < \"3.11\""
  ],
  "requires_python": ">=3.8",
  "summary": "simple lru cache for asyncio",
  "version": "2.0.4",
  "releases": [],
  "developers": [
    "team@aiohttp.org"
  ],
  "kwds": "async_lru asyncio async await alru_cache",
  "license_kwds": "mit license",
  "libtype": "pypi",
  "id": "pypi_async_lru",
  "homepage": "https://github.com/aio-libs/async-lru",
  "release_count": 16,
  "dependency_ids": [
    "pypi_typing_extensions"
  ]
}
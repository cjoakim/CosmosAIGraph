{
  "classifiers": [
    "framework :: ipython",
    "framework :: jupyter",
    "license :: osi approved :: apache software license",
    "operating system :: os independent",
    "programming language :: python :: 3",
    "topic :: multimedia :: graphics :: viewers",
    "topic :: multimedia :: video :: display"
  ],
  "description": "# read/write/show images and videos in an ipython/jupyter notebook.\n\n[![unittests](https://github.com/google/mediapy/actions/workflows/pytest_and_autopublish.yml/badge.svg)](https://github.com/google/mediapy/actions/workflows/pytest_and_autopublish.yml)\n[![pypi version](https://badge.fury.io/py/mediapy.svg)](https://badge.fury.io/py/mediapy)\n\n[**[github source]**](https://github.com/google/mediapy) &nbsp;\n[**[api docs]**](https://google.github.io/mediapy/) &nbsp;\n[**[colab example]**](https://colab.research.google.com/github/google/mediapy/blob/main/mediapy_examples.ipynb)\n\n## examples:\n\nsee the notebook &nbsp;\n[`mediapy_examples.ipynb`](https://github.com/google/mediapy/blob/main/mediapy_examples.ipynb)\n&nbsp; &nbsp;\n[![open in colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/github/google/mediapy/blob/main/mediapy_examples.ipynb)\n&nbsp;\n[![open in binder](https://mybinder.org/badge_logo.svg)](https://mybinder.org/v2/gh/google/mediapy/main?filepath=mediapy_examples.ipynb)\n\n<!--\ndeepnote: the notebook runs correctly on https://deepnote.com/, but it cannot be\nlaunched from github with a single click.  instead, one must:\n- start a notebook.\n- create a terminal (console).\n- within the terminal, enter \"git clone https://github.com/google/mediapy.git\".\n- navigate to files -> mediapy.\n- open the *.ipynb notebook.\n\nkaggle: the notebook also runs correctly on https://www.kaggle.com/ although\n\"pip install -q mediapy\" requires first changing settings -> internet -> enable,\nwhich in turn requires a phone number verification.  also, the notebook cannot\nbe launched from github with a single click but must be manually uploaded as a\nfile.\n-->\n\n### images:\n\n```python\n    !pip install -q mediapy\n    import mediapy as media\n    import numpy as np\n\n    image = media.read_image('https://github.com/hhoppe/data/raw/main/image.png')\n    print(image.shape, image.dtype)  # it is a numpy array.\n    media.show_image(image)\n\n    checkerboard = np.kron([[0, 1] * 16, [1, 0] * 16] * 16, np.ones((4, 4)))\n    media.show_image(checkerboard)\n\n    media.show_image(media.color_ramp((128, 128)), height=48, title='ramp')\n\n    images = {\n        'original': image,\n        'brightened': media.to_float01(image) * 1.5,\n    }\n    media.show_images(images)\n\n    media.write_image('/tmp/checkerboard.png', checkerboard)\n```\n\n### videos:\n\n```python\n    url = 'https://github.com/hhoppe/data/raw/main/video.mp4'\n    video = media.read_video(url)\n    print(video.shape, video.dtype)  # it is a numpy array.\n    print(video.metadata.fps)  # the 'metadata' attribute includes framerate.\n    media.show_video(video)  # play the video using the retrieved framerate.\n\n    media.show_images(video, height=80, columns=4)  # show frames side-by-side.\n\n    video = media.moving_circle((128, 128), num_images=10)\n    media.show_video(video, fps=10)\n\n    media.write_video('/tmp/video.mp4', video, fps=60)\n\n    # darken a video frame-by-frame:\n    filename_in = '/tmp/video.mp4'\n    filename_out = '/tmp/out.mp4'\n    with media.videoreader(filename_in) as r:\n      print(f'shape={r.shape} fps={r.fps} bps={r.bps}')\n      darken_image = lambda image: media.to_float01(image) * 0.5\n      with media.videowriter(\n          filename_out, shape=r.shape, fps=r.fps, bps=r.bps) as w:\n        for image in r:\n          w.add_image(darken_image(image))\n    media.show_video(media.read_video(filename_out), fps=60)\n```\n\n## setup:\n\nvideo i/o relies on the external program `ffmpeg`, which must be present in\nthe system path.  on unix, it can be installed using:\n\n```shell\n    apt install ffmpeg\n```\n\nor within a notebook using:\n\n```python\n    !command -v ffmpeg >/dev/null || (apt update && apt install -y ffmpeg)\n```\n\n",
  "docs_url": null,
  "keywords": "",
  "license": "",
  "name": "mediapy",
  "package_url": "https://pypi.org/project/mediapy/",
  "project_url": "https://pypi.org/project/mediapy/",
  "project_urls": {
    "homepage": "https://github.com/google/mediapy",
    "repository": "https://github.com/google/mediapy"
  },
  "release_url": "https://pypi.org/project/mediapy/1.2.0/",
  "requires_dist": [
    "ipython",
    "matplotlib",
    "numpy",
    "Pillow",
    "absl-py ; extra == \"dev\"",
    "pyink ; extra == \"dev\"",
    "pylint>=2.6.0 ; extra == \"dev\"",
    "pytest ; extra == \"dev\"",
    "pytest-xdist ; extra == \"dev\"",
    "pytype ; extra == \"dev\""
  ],
  "requires_python": ">=3.8",
  "summary": "read/write/show images and videos in an ipython notebook",
  "version": "1.2.0",
  "releases": [],
  "developers": [
    "mediapy-owners@google.com"
  ],
  "kwds": "mediapy_examples mediapy pytest_and_autopublish ipython python",
  "license_kwds": "",
  "libtype": "pypi",
  "id": "pypi_mediapy",
  "homepage": "",
  "release_count": 24,
  "dependency_ids": [
    "pypi_absl_py",
    "pypi_ipython",
    "pypi_matplotlib",
    "pypi_numpy",
    "pypi_pillow",
    "pypi_pyink",
    "pypi_pylint",
    "pypi_pytest",
    "pypi_pytest_xdist",
    "pypi_pytype"
  ]
}
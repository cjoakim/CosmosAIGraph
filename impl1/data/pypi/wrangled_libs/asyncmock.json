{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: developers",
    "license :: osi approved :: bsd license",
    "operating system :: os independent",
    "programming language :: python :: 3.6",
    "programming language :: python :: 3.7",
    "programming language :: python :: 3.8",
    "programming language :: python :: implementation :: cpython",
    "programming language :: python :: implementation :: pypy"
  ],
  "description": "##########\nasync mock\n##########\n\nawaitable mocks for async code.\n\n.. image:: https://img.shields.io/badge/code%20style-black-000000.svg\n   :target: https://github.com/ambv/black\n      :alt: once you go black...\n\n.. image:: https://travis-ci.org/timsavage/asyncmock.svg?branch=master\n    :target: https://travis-ci.org/timsavage/asyncmock\n\n.. image:: https://img.shields.io/pypi/l/asyncmock.svg\n    :target: https://pypi.python.org/pypi/asyncmock\n\n.. image:: https://img.shields.io/pypi/pyversions/asyncmock.svg\n    :target: https://pypi.python.org/pypi/asyncmock\n\n.. image::  https://img.shields.io/pypi/status/asyncmock.svg\n    :target: https://pypi.python.org/pypi/asyncmock\n\n.. image:: https://img.shields.io/pypi/implementation/asyncmock.svg\n    :target: https://pypi.python.org/pypi/asyncmock\n\nthe package specifically only extends mock_ and not any other part of unittest.\n\n.. _mock: https://mock.readthedocs.io/en/latest/\n\n\n.. note::\n   mock 4.0+ (included within python 3.8+) now includes an awaitable mock ``mock.asyncmock``. \n   this is recommended for new projects.\n\n\ninstallation\n============\n\ninstall using *pip*:\n\n.. code-block:: bash\n\n    pip install asyncmock\n\n\nusage\n=====\n\nasync mock is a drop in replacement for a `mock` object eg:\n\n.. code-block:: python\n\n    my_mock = asyncmock()\n\n    await my_mock(\"foo\", bar=123)\n\n    my_mock.assert_called_with(\"foo\", bar=123)\n\n\nthis also works with nested methods:\n\n.. code-block:: python\n\n    my_mock = asyncmock()\n\n    await my_mock.my_method(\"foo\", bar=123)\n\n    my_mock.my_method.assert_called_with(\"foo\", bar=123)\n\n\nside effects and return values can also be awaited.\n\nincluding a non-awaitable item:\n\n.. code-block:: python\n\n    my_mock = asyncmock()\n\n    my_mock.my_method.not_async = true\n    my_mock.my_method(\"foo\", bar=123)\n\n\nthe `not_async` option can also be provided as an init argument. the `not_async` \nargument is not inherited by sub-mocks.\n\n\npytest example\n==============\n\nthese examples use pytest_ along with the pytest-asyncio_ plugin.\n\n.. _pytest: https://docs.pytest.org/en/latest/\n.. _pytest-asyncio: https://github.com/pytest-dev/pytest-asyncio\n\n\ngenerating an exception:\n\n.. code-block:: python\n\n    @pytest.mark.asyncio\n    async def test_raise_exception():\n        my_mock = asyncmock(side_effect=keyerror)\n\n        with pytest.raises(keyerror):\n            await my_mock()\n\n        my_mock.assert_called()\n\n\n\n",
  "docs_url": null,
  "keywords": "testing,mock,asyncio",
  "license": "bsd-3-clause",
  "name": "asyncmock",
  "package_url": "https://pypi.org/project/asyncmock/",
  "project_url": "https://pypi.org/project/asyncmock/",
  "project_urls": {
    "Homepage": "https://github.com/timsavage/asyncmock"
  },
  "release_url": "https://pypi.org/project/asyncmock/0.4.2/",
  "requires_dist": [
    "mock"
  ],
  "requires_python": ">=3.6",
  "summary": "extension to the standard mock framework to support support async",
  "version": "0.4.2",
  "releases": [],
  "developers": [
    "tim@savage.company",
    "tim_savage"
  ],
  "kwds": "asyncio asyncmock asyncio_ async not_async",
  "license_kwds": "bsd-3-clause",
  "libtype": "pypi",
  "id": "pypi_asyncmock",
  "homepage": "https://github.com/timsavage/asyncmock",
  "release_count": 5,
  "dependency_ids": [
    "pypi_mock"
  ]
}
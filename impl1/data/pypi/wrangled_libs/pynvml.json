{
  "classifiers": [
    "development status :: 5 - production/stable",
    "intended audience :: developers",
    "intended audience :: system administrators",
    "license :: osi approved :: bsd license",
    "operating system :: microsoft :: windows",
    "operating system :: posix :: linux",
    "programming language :: python",
    "topic :: software development :: libraries :: python modules",
    "topic :: system :: hardware",
    "topic :: system :: systems administration"
  ],
  "description": "python bindings to the nvidia management library\n================================================\n\nprovides a python interface to gpu management and monitoring functions.\n\nthis is a wrapper around the nvml library.\nfor information about the nvml library, see the nvml developer page\nhttp://developer.nvidia.com/nvidia-management-library-nvml\n\nas of version 11.0.0, the nvml-wrappers used in pynvml are identical\nto those published through [nvidia-ml-py](https://pypi.org/project/nvidia-ml-py/).\n\nnote that this file can be run with 'python -m doctest -v readme.txt'\nalthough the results are system dependent\n\nrequires\n--------\npython 3, or an earlier version with the ctypes module.\n\ninstallation\n------------\n\n    pip install .\n\nusage\n-----\n\nyou can use the lower level nvml bindings\n\n```python\n>>> from pynvml import *\n>>> nvmlinit()\n>>> print(\"driver version:\", nvmlsystemgetdriverversion())\ndriver version: 410.00\n>>> devicecount = nvmldevicegetcount()\n>>> for i in range(devicecount):\n...     handle = nvmldevicegethandlebyindex(i)\n...     print(\"device\", i, \":\", nvmldevicegetname(handle))\n...\ndevice 0 : tesla v100\n\n>>> nvmlshutdown()\n```\n\nor the higher level nvidia_smi api\n\n```python\nfrom pynvml.smi import nvidia_smi\nnvsmi = nvidia_smi.getinstance()\nnvsmi.devicequery('memory.free, memory.total')\n```\n\n```python\nfrom pynvml.smi import nvidia_smi\nnvsmi = nvidia_smi.getinstance()\nprint(nvsmi.devicequery('--help-query-gpu'), end='\\n')\n```\n\nfunctions\n---------\npython methods wrap nvml functions, implemented in a c shared library.\neach function's use is the same with the following exceptions:\n\n- instead of returning error codes, failing error codes are raised as\n  python exceptions.\n\n    ```python\n    >>> try:\n    ...     nvmldevicegetcount()\n    ... except nvmlerror as error:\n    ...     print(error)\n    ...\n    uninitialized\n    ```\n\n- c function output parameters are returned from the corresponding\n  python function left to right.\n\n    ```c\n    nvmlreturn_t nvmldevicegeteccmode(nvmldevice_t device,\n                                      nvmlenablestate_t *current,\n                                      nvmlenablestate_t *pending);\n    ```\n\n    ```python\n    >>> nvmlinit()\n    >>> handle = nvmldevicegethandlebyindex(0)\n    >>> (current, pending) = nvmldevicegeteccmode(handle)\n    ```\n\n- c structs are converted into python classes.\n\n    ```c\n    nvmlreturn_t decldir nvmldevicegetmemoryinfo(nvmldevice_t device,\n                                                 nvmlmemory_t *memory);\n    typedef struct nvmlmemory_st {\n        unsigned long long total;\n        unsigned long long free;\n        unsigned long long used;\n    } nvmlmemory_t;\n    ```\n\n    ```python\n    >>> info = nvmldevicegetmemoryinfo(handle)\n    >>> print \"total memory:\", info.total\n    total memory: 5636292608\n    >>> print \"free memory:\", info.free\n    free memory: 5578420224\n    >>> print \"used memory:\", info.used\n    used memory: 57872384\n    ```\n\n- python handles string buffer creation.\n\n    ```c\n    nvmlreturn_t nvmlsystemgetdriverversion(char* version,\n                                            unsigned int length);\n    ```\n\n    ```python\n    >>> version = nvmlsystemgetdriverversion();\n    >>> nvmlshutdown()\n    ```\n\nfor usage information see the nvml documentation.\n\nvariables\n---------\n\nall meaningful nvml constants and enums are exposed in python.\n\nthe nvml_value_not_available constant is not used.  instead none is mapped to the field.\n\nnvml permissions\n----------------\n\nmany of the `pynvml` wrappers assume that the underlying nvidia management library (nvml) api can be used without admin/root privileges.  however, it is certainly possible for the system permissions to prevent pynvml from querying gpu performance counters. for example:\n\n```\n$ nvidia-smi nvlink -g 0\ngpu 0: tesla v100-sxm2-32gb (uuid: gpu-96ab329d-7a1f-73a8-a9b7-18b4b2855f92)\nnvml: unable to get the nvlink link utilization counter control for link 0: insufficient permissions\n```\n\na simple way to check the permissions status is to look for `rmprofilingadminonly` in the driver `params` file (note that `rmprofilingadminonly == 1` means that admin/sudo access is required):\n\n```\n$ cat /proc/driver/nvidia/params | grep rmprofilingadminonly\nrmprofilingadminonly: 1\n```\n\nfor more information on setting/unsetting the relevant admin privileges, see [these notes](https://developer.nvidia.com/nvidia-development-tools-solutions-err_nvgpuctrperm-permission-issue-performance-counters) on resolving `err_nvgpuctrperm` errors.\n\n\nrelease notes\n-------------\n\n-   version 2.285.0\n    - added new functions for nvml 2.285.  see nvml documentation for more information.\n    - ported to support python 3.0 and python 2.0 syntax.\n    - added nvidia_smi.py tool as a sample app.\n-   version 3.295.0\n    - added new functions for nvml 3.295.  see nvml documentation for more information.\n    - updated nvidia_smi.py tool\n      - includes additional error handling\n-   version 4.304.0\n    - added new functions for nvml 4.304.  see nvml documentation for more information.\n    - updated nvidia_smi.py tool\n-   version 4.304.3\n    - fixing nvmlunitgetdevicecount bug\n-   version 5.319.0\n    - added new functions for nvml 5.319.  see nvml documentation for more information.\n-   version 6.340.0\n    - added new functions for nvml 6.340.  see nvml documentation for more information.\n-   version 7.346.0\n    - added new functions for nvml 7.346.  see nvml documentation for more information.\n-   version 7.352.0\n    - added new functions for nvml 7.352.  see nvml documentation for more information.\n-   version 8.0.0\n    - refactor code to a nvidia_smi singleton class\n    - added devicequery that returns a dictionary of (name, value).\n    - added filter parameters on devicequery to match query api in nvidia-smi\n    - added filter parameters on xmldevicequery to match query api in nvidia-smi\n    - added integer enumeration for filter strings to reduce overhead for performance monitoring.\n    - added loop(filter) method with async and callback support\n-   version 8.0.1\n    - restructuring directories into two packages (pynvml and nvidia_smi)\n    - adding initial tests for both packages\n    - some name-convention cleanup in pynvml\n-   version 8.0.2\n    - added nvlink function wrappers for pynvml module\n-   version 8.0.3\n    - added versioneer\n    - fixed nvmldevicegetnvlinkutilizationcounter bug\n-   version 8.0.4\n    - added nvmldevicegettotalenergyconsumption\n    - added notes about nvml permissions\n    - fixed version-check testing\n-   version 11.0.0\n    - updated nvml.py to cuda 11\n    - updated smi.py devicequery to r460\n    - aligned nvml.py with latest nvidia-ml-py deployment\n-   version 11.4.0\n    - updated nvml.py to cuda 11.4\n    - updated smi.py nvml_brand_names\n    - aligned nvml.py with latest nvidia-ml-py deployment (11.495.46)\n-   version 11.4.1\n    - fix comma bugs in nvml.py\n-   version 11.5.0\n    - updated nvml.py to support cuda 11.5 and cuda 12\n    - aligned with latest nvidia-ml-py deployment (11.525.84)\n",
  "docs_url": null,
  "keywords": "",
  "license": "bsd",
  "name": "pynvml",
  "package_url": "https://pypi.org/project/pynvml/",
  "project_url": "https://pypi.org/project/pynvml/",
  "project_urls": {
    "Homepage": "http://www.nvidia.com/"
  },
  "release_url": "https://pypi.org/project/pynvml/11.5.0/",
  "requires_dist": [],
  "requires_python": ">=3.6",
  "summary": "python bindings for the nvidia management library",
  "version": "11.5.0",
  "releases": [],
  "developers": [
    "nvidia_corporation",
    "rzamora@nvidia.com"
  ],
  "kwds": "pynvml nvmldevice_t nvidia_smi nvml nvmlmemory_t",
  "license_kwds": "bsd",
  "libtype": "pypi",
  "id": "pypi_pynvml",
  "homepage": "http://www.nvidia.com/",
  "release_count": 8,
  "dependency_ids": []
}
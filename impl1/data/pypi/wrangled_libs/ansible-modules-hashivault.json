{
  "classifiers": [],
  "description": "ansible modules hashivault\n==========================\n\nansible modules for hashicorp vault.\n\n.. image:: https://img.shields.io/pypi/v/ansible-modules-hashivault.svg\n   :alt: latest version\n   :target: https://pypi.python.org/pypi/ansible-modules-hashivault/\n.. image:: https://pepy.tech/badge/ansible-modules-hashivault/month\n   :alt: downloads\n   :target: https://pepy.tech/project/ansible-modules-hashivault\n.. image:: https://github.com/terryhowe/ansible-modules-hashivault/actions/workflows/test.yml/badge.svg?branch=main\n   :alt: ci\n   :target: https://github.com/terryhowe/ansible-modules-hashivault/actions/workflows/test.yml\n.. image:: https://img.shields.io/badge/license-mit-yellow.svg\n   :alt: license: mit\n   :target: https://opensource.org/licenses/mit\n\ninstall this ansible module:\n\n* via ``pip``:\n\n::\n\n  pip install ansible-modules-hashivault\n\n* via ``ansible-galaxy`` (requires ``hvac>=0.7.2``):\n\n::\n\n  ansible-galaxy install 'git+https://github.com/terryhowe/ansible-modules-hashivault.git'\n\n..\n\n  note: the ``hashicorp`` lookup plugin does not work with this last install method (`ansible/ansible#28770 <https://github.com/ansible/ansible/issues/28770>`_).\n  you can fallback to the build-in lookup plugin: `hashi_vault <https://docs.ansible.com/ansible/latest/plugins/lookup/hashi_vault.html>`_\n\nin most cases the hashicorp vault modules should be run on localhost.\n\nenvironmental variables\n-----------------------\n\nthe following variables need to be exported to the environment where you run ansible\nin order to authenticate to your hashicorp vault instance:\n\n  * `vault_addr`: url for vault\n  * `vault_skip_verify=true`: if set, do not verify presented tls certificate before communicating with vault server. setting this variable is not recommended except during testing\n  * `vault_authtype`: authentication type to use: `token`, `userpass`, `github`, `ldap`, `approle`\n  * `vault_login_mount_point`: mount point for login defaults to auth type\n  * `vault_token`: token for vault\n  * `vault_role_id`: (required by `approle`)\n  * `vault_secret_id`: (required by `approle`)\n  * `vault_user`: username to login to vault\n  * `vault_password`: password to login to vault\n  * `vault_client_key`: path to an unencrypted pem-encoded private key matching the client certificate\n  * `vault_client_cert`: path to a pem-encoded client certificate for tls authentication to the vault server\n  * `vault_cacert`: path to a pem-encoded ca cert file to use to verify the vault server tls certificate\n  * `vault_capath`: path to a directory of pem-encoded ca cert files to verify the vault server tls certificate\n  * `vault_aws_header`: x-vault-aws-iam-server-id header value to prevent replay attacks\n  * `vault_namespace`: specify the vault namespace, if you have one\n\ndocumentation\n-------------\n\nthere are a few simple examples in this document, but the full documentation can be found at:\n\nhttps://terryhowe.github.io/ansible-modules-hashivault/modules/list_of_hashivault_modules.html\n\n\nreading and writing\n-------------------\n\nthe following example writes the giant secret with two values and then\nreads the fie value. the `hashivault_secret` module is kv2 by default::\n\n    ---\n    - hosts: localhost\n      tasks:\n        - hashivault_secret:\n            secret: giant\n            data:\n                foo: foe\n                fie: fum\n        - hashivault_read:\n            secret: giant\n            key: fie\n            version: 2\n          register: vault_read\n\nthe lookup plugin::\n\n        - set_fact:\n            looky: \"{{lookup('hashivault', 'giant', 'foo', version=2)}}\"\n\nthe hashivault_write, hashivault_read and the lookup plugin assume the\n/secret mount point.  if you are accessing another mount point, use `mount_point`::\n\n    ---\n    - hosts: localhost\n      tasks:\n        - hashivault_secret_engine:\n            name: stories\n            backend: generic\n        - hashivault_write:\n            mount_point: /stories\n            secret: stuart\n            data:\n                last: 'little'\n        - hashivault_read:\n            mount_point: /stories\n            secret: stuart\n            key: last\n        - set_fact:\n            book: \"{{lookup('hashivault', 'stuart', 'last', mount_point='/stories')}}\"\n\nversion 2 of kv secret engine is also supported, just add `version: 2`::\n\n    ---\n        - hashivault_read:\n            mount_point: /stories\n            version: 2\n            secret: stuart\n            key: last\n        - set_fact:\n            book: \"{{lookup('hashivault', 'stuart', 'last', mount_point='/stories', version=2)}}\"\n\n\ninitialization, seal, and unseal\n--------------------------------\n\nthe real strength of this module is all the administrative functions you can do. see the documentation\nmentioned above for more, but here is a small sample.\n\nyou may init the vault::\n\n    ---\n    - hosts: localhost\n      tasks:\n        - hashivault_init:\n          register: vault_init\n\nyou may also seal and unseal the vault::\n\n    ---\n    - hosts: localhost\n      vars:\n        vault_keys:  \"{{ lookup('env','vault_keys') }}\"\n      tasks:\n        - hashivault_status:\n          register: vault_status\n        - block:\n            - hashivault_seal:\n              register: vault_seal\n          when: \"{{vault_status.status.sealed}} == false\"\n        - hashivault_unseal:\n            keys: '{{vault_keys}}'\n\naction plugin\n-------------\n\nif you are not using the vault_addr and vault_token environment variables,\nyou may be able to simplify your playbooks with an action plugin.  this can\nbe some somewhat similar to this `example action plugin <https://terryhowe.wordpress.com/2016/05/02/setting-ansible-module-defaults-using-action-plugins/>`_.\n\ndeveloper note\n--------------\none of the complicated problems with development and testing of this module is\n:code:`ansible/module_utils/hashivault.py` is not a directory in itself which\nin my opinion is a problem with ansible.  because of this limitation with\nansible, :code:`pip install -e .` does not work like it would for other\nprojects.  two potential ways to work around this issue are either use the\n:code:`link.sh` script in the top level directory or run for every change::\n\n    rm -rf dist; python setup.py sdist\n    pip install ./dist/ansible-modules-hashivault-*.tar.gz\n\nlicense\n-------\n\n`mit <https://github.com/terryhowe/ansible-modules-hashivault/blob/master/license>`_.\n\n\n",
  "docs_url": null,
  "keywords": "",
  "license": "",
  "name": "ansible-modules-hashivault",
  "package_url": "https://pypi.org/project/ansible-modules-hashivault/",
  "project_url": "https://pypi.org/project/ansible-modules-hashivault/",
  "project_urls": {
    "Homepage": "https://github.com/TerryHowe/ansible-modules-hashivault"
  },
  "release_url": "https://pypi.org/project/ansible-modules-hashivault/5.1.2/",
  "requires_dist": [],
  "requires_python": "",
  "summary": "ansible modules for hashicorp vault",
  "version": "5.1.2",
  "releases": [],
  "developers": [
    "terry_howe",
    "terrylhowe@example.com"
  ],
  "kwds": "hashi_vault ansible hashivault_seal list_of_hashivault_modules vault_keys",
  "license_kwds": "",
  "libtype": "pypi",
  "id": "pypi_ansible_modules_hashivault",
  "homepage": "https://github.com/terryhowe/ansible-modules-hashivault",
  "release_count": 135,
  "dependency_ids": []
}